WEBVTT
Kind: captions
Language: en

00:00:05.510 --> 00:00:09.920
We're here to talk about
media playback the right way,

00:00:09.920 --> 00:00:13.000
so we're really going to kind of
go through all of the different

00:00:13.000 --> 00:00:16.560
components and different
system things that you need

00:00:16.560 --> 00:00:19.210
to actually integrate
with if you really want

00:00:19.210 --> 00:00:21.185
a top-of-the-line
media playback.

00:00:24.490 --> 00:00:27.690
So a little bit about me, I've
been doing Android development

00:00:27.690 --> 00:00:30.170
for just about five years now.

00:00:30.170 --> 00:00:33.660
Started kind of on my
own in my spare time,

00:00:33.660 --> 00:00:36.490
got caught up in part
of my master's degree,

00:00:36.490 --> 00:00:39.190
and then transitioned
to doing it full time.

00:00:39.190 --> 00:00:41.620
First at Phunware
and then at Facebook.

00:00:41.620 --> 00:00:43.830
I'm sorry I didn't fix
everything I wanted to.

00:00:43.830 --> 00:00:46.600
[LAUGHTER]

00:00:46.600 --> 00:00:49.690
There's a lot more
I wanted to fix.

00:00:49.690 --> 00:00:52.570
But this last year, I've been
working as a developer advocate

00:00:52.570 --> 00:00:56.430
at Google, so talking to the
community and kind of bringing

00:00:56.430 --> 00:01:00.080
a lot of your feedback back to
the engineering teams as well.

00:01:00.080 --> 00:01:03.010
I've been working on two
major projects since then.

00:01:03.010 --> 00:01:07.360
We did an advanced Android class
for Udacity, so kind of online

00:01:07.360 --> 00:01:11.930
learning going a little bit
deeper into App architecture.

00:01:11.930 --> 00:01:15.300
And then, as well,
just recently launched

00:01:15.300 --> 00:01:18.300
Android development
patterns, a video series

00:01:18.300 --> 00:01:21.640
as well as pro tips around
kind of all of the things

00:01:21.640 --> 00:01:24.600
that really are the best
practices for Android

00:01:24.600 --> 00:01:26.540
development.

00:01:26.540 --> 00:01:30.240
And my focus has generally
been on the Android framework

00:01:30.240 --> 00:01:33.080
and the Android support
library, which both of which

00:01:33.080 --> 00:01:36.590
play very nicely into this.

00:01:36.590 --> 00:01:39.830
Now when we talk about media
playback there's actually

00:01:39.830 --> 00:01:42.130
like tons of levels
and many things

00:01:42.130 --> 00:01:44.760
we could talk about
here, and we're really

00:01:44.760 --> 00:01:48.340
going to talk about just
one part, specifically

00:01:48.340 --> 00:01:49.500
audio playback.

00:01:49.500 --> 00:01:54.190
Now it's important to note that
if you're doing video playback,

00:01:54.190 --> 00:01:57.040
almost all of this still
applies to you, right?

00:01:57.040 --> 00:02:00.110
The interactions with the
system and that type of stuff

00:02:00.110 --> 00:02:02.830
still matter if
you're doing video.

00:02:02.830 --> 00:02:05.780
But video is a little bit
of a head start on us.

00:02:05.780 --> 00:02:09.259
The actual cast companion
library, it's out.

00:02:09.259 --> 00:02:12.920
It's something our team actually
supports and keeps up to date.

00:02:12.920 --> 00:02:16.570
But it encapsulates a lot of
the best practices around video

00:02:16.570 --> 00:02:19.340
and integrating with things
like Google Cast as well,

00:02:19.340 --> 00:02:21.670
so you kind of get that
full multi-room experience.

00:02:24.320 --> 00:02:27.730
So let's start at the
beginning, and the beginning

00:02:27.730 --> 00:02:30.480
should always be with the user.

00:02:30.480 --> 00:02:33.130
They're kind of the most
important part in actually

00:02:33.130 --> 00:02:37.180
making our apps useful
pieces of information,

00:02:37.180 --> 00:02:39.610
and when we think
about that, we really

00:02:39.610 --> 00:02:42.540
want to think about what
the user's expecting.

00:02:42.540 --> 00:02:45.460
When they're going into your
app, what you don't want

00:02:45.460 --> 00:02:50.090
them is to be surprised
in a negative way.

00:02:50.090 --> 00:02:51.970
But you want those
positive surprises

00:02:51.970 --> 00:02:54.520
like, oh, I didn't know
the app could do that.

00:02:54.520 --> 00:02:57.440
Or like, oh, well, it's
actually doing everything

00:02:57.440 --> 00:02:59.420
I expect, and it's
doing it great,

00:02:59.420 --> 00:03:02.440
and that's where we want
our media apps to be,

00:03:02.440 --> 00:03:07.770
not in meeting expectations, but
really exceeding expectations.

00:03:07.770 --> 00:03:11.030
And of course for
an audio app, you

00:03:11.030 --> 00:03:14.670
can't really do that without
background playback, right?

00:03:14.670 --> 00:03:17.650
There's literally no audio
app you'll find out there

00:03:17.650 --> 00:03:22.350
that forces you to keep the
activity open the entire time

00:03:22.350 --> 00:03:23.560
you're playing audio.

00:03:23.560 --> 00:03:26.620
It just doesn't work very well
on Android, especially when you

00:03:26.620 --> 00:03:29.910
consider phone calls another
interruptions like that.

00:03:29.910 --> 00:03:32.110
So we really need to
get the basics down

00:03:32.110 --> 00:03:35.650
before we can
exceed expectations.

00:03:35.650 --> 00:03:39.020
Now when you think
background playback, that

00:03:39.020 --> 00:03:40.865
should immediately
ring bells like,

00:03:40.865 --> 00:03:43.510
oh, maybe a service
makes lot of sense.

00:03:43.510 --> 00:03:45.850
They're specifically
designed for doing

00:03:45.850 --> 00:03:50.880
that kind of background work
not tied to any UI piece.

00:03:50.880 --> 00:03:54.840
Now when it comes
to media playback

00:03:54.840 --> 00:03:57.770
in a service, what
kind of things

00:03:57.770 --> 00:04:00.860
are we actually doing
in that service,

00:04:00.860 --> 00:04:05.330
so naturally, every service
is created at some point.

00:04:05.330 --> 00:04:07.990
That is what kind of
kicks off the process.

00:04:07.990 --> 00:04:12.250
That's our one-time feedback
or one time initialization

00:04:12.250 --> 00:04:13.820
kind of step.

00:04:13.820 --> 00:04:18.290
And then for most media
apps, you kind of have two,

00:04:18.290 --> 00:04:19.850
I would say, top level states.

00:04:19.850 --> 00:04:24.170
You have playing, which I'll
use as a shorthand for audio

00:04:24.170 --> 00:04:26.674
is actually coming
out of the device.

00:04:26.674 --> 00:04:28.090
And then you have
paused, which is

00:04:28.090 --> 00:04:30.220
kind of all those other
states, whether they're

00:04:30.220 --> 00:04:35.480
buffering or actually paused,
where audio is not being played

00:04:35.480 --> 00:04:38.280
but is in a state where
these may want to transition

00:04:38.280 --> 00:04:41.150
back to playing.

00:04:41.150 --> 00:04:45.600
Similarly, stopped is kind
of the final state, right?

00:04:45.600 --> 00:04:47.940
When the user says,
I'm done with your app.

00:04:47.940 --> 00:04:49.350
I've moved on.

00:04:49.350 --> 00:04:52.740
Maybe I've opened up another
media app, et cetera.

00:04:52.740 --> 00:04:55.830
And then of course
services hopefully

00:04:55.830 --> 00:04:58.070
eventually get
destroyed, and this

00:04:58.070 --> 00:05:00.830
is where we'll reclaim
our final memory

00:05:00.830 --> 00:05:03.630
and get back to kind of a
steady state of our app is not

00:05:03.630 --> 00:05:04.130
running.

00:05:07.100 --> 00:05:09.950
So it wouldn't be
much of an audio app

00:05:09.950 --> 00:05:13.270
if we didn't
actually play audio.

00:05:13.270 --> 00:05:17.040
On Android, we have a media
player which does exactly that.

00:05:17.040 --> 00:05:19.280
It's really good at
playing audio tracks,

00:05:19.280 --> 00:05:23.500
but it's maybe not the most
customizable thing of all time.

00:05:23.500 --> 00:05:27.610
We do have ExoPlayer, which
is another player that's

00:05:27.610 --> 00:05:30.940
supported on higher API
levels that you can use if you

00:05:30.940 --> 00:05:32.800
need more control over here.

00:05:32.800 --> 00:05:36.600
But for the whole rest of this
talk, everything I talk about

00:05:36.600 --> 00:05:40.910
will be player agnostic, so
whether you're doing something

00:05:40.910 --> 00:05:44.370
that specifically requires media
player or ExoPlayer should all

00:05:44.370 --> 00:05:46.110
fit in the framework
of everything else

00:05:46.110 --> 00:05:48.830
we're going to talk about.

00:05:48.830 --> 00:05:52.480
So how do our events,
that we just talked about,

00:05:52.480 --> 00:05:55.000
map to, say, media player?

00:05:55.000 --> 00:05:58.240
So it's actually really
straightforward, right?

00:05:58.240 --> 00:06:00.430
We're going to create
a new media player,

00:06:00.430 --> 00:06:02.490
and then when we're
playing, we'll

00:06:02.490 --> 00:06:06.847
prepare and then play the
track, pause, pause, stop, stop.

00:06:06.847 --> 00:06:08.430
And then when we're
finally destroyed,

00:06:08.430 --> 00:06:10.280
we'll release all of
our service, right?

00:06:10.280 --> 00:06:15.340
This super-straightforward
creating and getting everything

00:06:15.340 --> 00:06:16.830
done, and we're done.

00:06:16.830 --> 00:06:21.460
All right, lots of time
back we're playing audio,

00:06:21.460 --> 00:06:28.880
but the problem is that just
playing audio in the background

00:06:28.880 --> 00:06:33.620
is probably a detriment to
users rather than a positive.

00:06:33.620 --> 00:06:36.360
We've given them no
controls over it,

00:06:36.360 --> 00:06:39.400
and other apps are now
trying to interact with them.

00:06:39.400 --> 00:06:42.450
And really we're in kind
of a net negative kind

00:06:42.450 --> 00:06:43.560
of perspective.

00:06:43.560 --> 00:06:46.590
But what we actually want
to do is go a lot farther,

00:06:46.590 --> 00:06:51.410
and that actually means that d
we need to do a few more things

00:06:51.410 --> 00:06:54.630
to actually get us to play
nicely with the rest system,

00:06:54.630 --> 00:06:58.030
be a good citizen on Android,
and really be the best app

00:06:58.030 --> 00:07:00.400
we can be.

00:07:00.400 --> 00:07:04.350
So the first thing here is
going to be audio focus.

00:07:04.350 --> 00:07:08.480
Now audio focus is kind
of this key in Android

00:07:08.480 --> 00:07:10.440
of being that good
citizen, right?

00:07:10.440 --> 00:07:15.830
It's that concept that your
app is going to play audio,

00:07:15.830 --> 00:07:20.210
and that is your consideration
of being the audio focus.

00:07:20.210 --> 00:07:23.320
But that doesn't mean that
you can ignore every other app

00:07:23.320 --> 00:07:25.870
on the system, every
notification beep that

00:07:25.870 --> 00:07:31.790
comes in, other player
starting, maps navigation

00:07:31.790 --> 00:07:34.020
is a really good
example of this.

00:07:34.020 --> 00:07:36.590
We really want to be
considerate of those other apps

00:07:36.590 --> 00:07:39.490
when you're doing
audio playback.

00:07:39.490 --> 00:07:44.470
Now this is slightly distinct
from actually playing audio.

00:07:44.470 --> 00:07:48.940
We'll actually still want to use
audio focus when we're paused

00:07:48.940 --> 00:07:51.100
or in that kind of
intermediate state

00:07:51.100 --> 00:07:55.650
because if another player were
to start playing while we're

00:07:55.650 --> 00:07:58.160
buffering, for
example, we still don't

00:07:58.160 --> 00:08:01.100
want to talk over that other
app when we're actually

00:08:01.100 --> 00:08:03.710
ready to play.

00:08:03.710 --> 00:08:11.000
So some code actually
registering our audio focus,

00:08:11.000 --> 00:08:14.770
and we can see here, we'll
use audio manager for this.

00:08:14.770 --> 00:08:19.140
It's kind of the core for doing
this core audio kind of work,

00:08:19.140 --> 00:08:21.590
and then we'll call
request audio focus.

00:08:21.590 --> 00:08:24.370
In this case, we'll
pass in a special

00:08:24.370 --> 00:08:26.880
on stream listener,
which is where we'll

00:08:26.880 --> 00:08:28.700
get these callbacks
back, and we'll

00:08:28.700 --> 00:08:30.610
talk about that momentarily.

00:08:30.610 --> 00:08:33.714
And then we'll want to say
we're streaming music or media,

00:08:33.714 --> 00:08:35.130
and then we're
going to say, we're

00:08:35.130 --> 00:08:37.679
going to game audio focus.

00:08:37.679 --> 00:08:42.020
Now in almost all cases,
you'll get granted back.

00:08:42.020 --> 00:08:45.220
The system will say, oh, great
you are requesting audio focus.

00:08:45.220 --> 00:08:46.490
You are a nice app.

00:08:46.490 --> 00:08:48.840
I like you, and you
get audio focus.

00:08:48.840 --> 00:08:50.550
Now there are some
examples where

00:08:50.550 --> 00:08:51.940
you won't get audio focus.

00:08:51.940 --> 00:08:55.700
For example, if the user
is currently in a phone,

00:08:55.700 --> 00:08:57.830
you won't get audio
focus in that sense

00:08:57.830 --> 00:09:00.490
because they're actively
talking in a call.

00:09:00.490 --> 00:09:04.870
And you'll want to wait until
the actual phone call is done

00:09:04.870 --> 00:09:08.460
and then do the call
from there, or have

00:09:08.460 --> 00:09:10.900
the user repress
the Play button when

00:09:10.900 --> 00:09:13.410
they're done with their phone.

00:09:13.410 --> 00:09:17.110
So what does that focus
change actually give us ?

00:09:17.110 --> 00:09:21.180
Well, it's really kind of
that key between our app

00:09:21.180 --> 00:09:23.580
and all the other
apps on the system,

00:09:23.580 --> 00:09:25.390
where we get all
that information.

00:09:25.390 --> 00:09:29.960
So for example, you may get
an audio focus loss symbol.

00:09:29.960 --> 00:09:33.610
Now this is kind of that
permanent loss of focus.

00:09:33.610 --> 00:09:37.710
At this point, they've said,
well, the user has moved on.

00:09:37.710 --> 00:09:41.010
Another app has said, I
want to gain focus forever,

00:09:41.010 --> 00:09:43.590
and it's not coming back.

00:09:43.590 --> 00:09:46.700
It's just not coming
back, so in this case,

00:09:46.700 --> 00:09:49.020
you probably just
want to stop playback.

00:09:49.020 --> 00:09:50.870
You say, all right,
I will gracefully

00:09:50.870 --> 00:09:55.630
exit stage and allow the other
app, which has requested focus,

00:09:55.630 --> 00:09:58.270
to continue on.

00:09:58.270 --> 00:10:00.900
Now, one thing you
might consider here

00:10:00.900 --> 00:10:04.770
is if the user accidentally hit
the Play button another app.

00:10:04.770 --> 00:10:09.840
Instead of immediately stopping,
you may pause, wait 30 seconds,

00:10:09.840 --> 00:10:11.080
and then stop.

00:10:11.080 --> 00:10:13.230
That's certainly
a active pattern

00:10:13.230 --> 00:10:16.920
if you want to prevent some
of those false negatives.

00:10:16.920 --> 00:10:19.000
Now another one
that they can use

00:10:19.000 --> 00:10:22.470
if someone is using gain
transient, in this case,

00:10:22.470 --> 00:10:26.790
the other app is asking for
you to stop temporarily.

00:10:26.790 --> 00:10:30.740
So in this case, you probably
just want to pause the playback

00:10:30.740 --> 00:10:34.550
and wait for them to finish
there 15 seconds or whatever.

00:10:34.550 --> 00:10:38.780
So you may take this is an
example of someone saying

00:10:38.780 --> 00:10:41.690
something out loud or say
you're on a running app,

00:10:41.690 --> 00:10:44.680
and the running is saying
like your splits and pace.

00:10:44.680 --> 00:10:47.420
And maybe they don't want
to talk over your other app.

00:10:47.420 --> 00:10:49.340
They just want you to
pause for a second,

00:10:49.340 --> 00:10:51.540
and then you'll come back.

00:10:51.540 --> 00:10:54.700
Now the last transit one is
actually called can duck,

00:10:54.700 --> 00:10:56.620
and we've talked
about ducking earlier.

00:10:56.620 --> 00:10:59.820
This is a different ducking.

00:10:59.820 --> 00:11:04.690
This is actual can ducking, and
that really just means lowering

00:11:04.690 --> 00:11:06.470
the volume temporarily.

00:11:06.470 --> 00:11:08.660
So in this case,
this is what, say,

00:11:08.660 --> 00:11:11.760
notifications use when
you get a notification in.

00:11:11.760 --> 00:11:14.830
Instead of the music
completely stopping,

00:11:14.830 --> 00:11:16.260
it'll just lower in volume.

00:11:16.260 --> 00:11:19.150
You hear the chime, and
then it'll come back up,

00:11:19.150 --> 00:11:22.740
and it comes back up when
you get an audio focus game,

00:11:22.740 --> 00:11:24.460
so this is when you've
returned from any

00:11:24.460 --> 00:11:27.210
of those transient losses.

00:11:27.210 --> 00:11:29.190
Now one thing to note
about the can duck

00:11:29.190 --> 00:11:32.200
is that it doesn't mean you
have to lower the volume.

00:11:32.200 --> 00:11:35.540
If you're doing, say, a
podcast player or something

00:11:35.540 --> 00:11:38.720
with spoken words where
it's really important

00:11:38.720 --> 00:11:40.260
you get every word.

00:11:40.260 --> 00:11:43.440
Or else if your
talking for 10 seconds

00:11:43.440 --> 00:11:45.722
while there's another
sound going on,

00:11:45.722 --> 00:11:47.430
that's not going to
be very intelligible.

00:11:47.430 --> 00:11:50.630
So you can certainly
pause or do whatever

00:11:50.630 --> 00:11:52.750
you need to do in that
can duck scenario.

00:11:52.750 --> 00:11:54.690
You don't have to
just lower the volume.

00:12:00.180 --> 00:12:03.830
So our updated life
cycle, we're playing,

00:12:03.830 --> 00:12:06.060
or pausing, we're
stopping, were docking.

00:12:06.060 --> 00:12:08.150
Well, lots of -ings.

00:12:08.150 --> 00:12:10.260
But you can see we've kind
of filled in a new row

00:12:10.260 --> 00:12:14.040
here where as soon as we start
playing for that first time,

00:12:14.040 --> 00:12:17.150
we've gone along that
request audio focus

00:12:17.150 --> 00:12:19.020
and then start our
playback once we've

00:12:19.020 --> 00:12:21.570
received that granted playback.

00:12:21.570 --> 00:12:24.080
And then when they've
actually stopped

00:12:24.080 --> 00:12:27.100
and we're done playing
audio entirely,

00:12:27.100 --> 00:12:30.450
we'll want to
abandon audio focus.

00:12:30.450 --> 00:12:35.240
And so that already makes
us a lot better part

00:12:35.240 --> 00:12:36.890
of the overall system.

00:12:36.890 --> 00:12:39.220
We're no longer going to
be talking over other apps.

00:12:39.220 --> 00:12:43.230
It's great, but it's
not all we can do.

00:12:43.230 --> 00:12:46.140
Actually one of my favorite
broadcasts of all time

00:12:46.140 --> 00:12:50.270
is the becoming noisy
or the noisy broadcast.

00:12:50.270 --> 00:12:53.510
So this is actually when, say,
you're listening on headphones

00:12:53.510 --> 00:12:57.120
and that type of thing, and
then your speaker comes out

00:12:57.120 --> 00:13:00.480
and all of a sudden, you're
blaring to the whole audience.

00:13:00.480 --> 00:13:05.220
And we can't really control
what our tastes in music

00:13:05.220 --> 00:13:08.190
are for our users, but
we can prevent them

00:13:08.190 --> 00:13:12.150
from some embarrassing
situations on that case

00:13:12.150 --> 00:13:15.880
by registering just a simple
broadcast receiver that

00:13:15.880 --> 00:13:19.660
listens for that
becoming noisy intent

00:13:19.660 --> 00:13:21.770
and then pauses our music.

00:13:21.770 --> 00:13:24.580
So in this case,
we're going to want

00:13:24.580 --> 00:13:29.470
to tie this to the life cycle
of actually playing audio.

00:13:29.470 --> 00:13:33.240
There's no reason to listen
for being noisy if you are not

00:13:33.240 --> 00:13:35.630
being noisy.

00:13:35.630 --> 00:13:39.040
So we'll register when we
actually start playback right

00:13:39.040 --> 00:13:40.820
after we get audio focus.

00:13:40.820 --> 00:13:45.080
And then actually unregister
as soon as we pause playback.

00:13:45.080 --> 00:13:47.030
So in this case,
it's really more

00:13:47.030 --> 00:13:49.240
of that a little bit of
connection in there to say,

00:13:49.240 --> 00:13:51.680
like OK, well, I really
don't want the user

00:13:51.680 --> 00:13:53.325
to get into this bad scenario.

00:13:56.580 --> 00:14:00.960
So out of it, register,
unregister, easy, done, OK.

00:14:00.960 --> 00:14:05.060
Now at this point, were actually
fairly well off ' an audio

00:14:05.060 --> 00:14:06.470
perspective.

00:14:06.470 --> 00:14:08.140
We're not going to
be playing audio,

00:14:08.140 --> 00:14:10.210
and we're not supposed
to be playing audio.

00:14:10.210 --> 00:14:15.390
But there's a lot more we
can do to be an amazing app.

00:14:15.390 --> 00:14:17.720
Another part of it
is really that sense

00:14:17.720 --> 00:14:21.620
of controlling
audio playback, that

00:14:21.620 --> 00:14:24.807
reaching for the next track
button or the pause button.

00:14:24.807 --> 00:14:26.890
These are the kind of
things that people are going

00:14:26.890 --> 00:14:30.360
to use your app and do a lot.

00:14:30.360 --> 00:14:33.410
And we don't want to make
that really tricky to use.

00:14:33.410 --> 00:14:36.730
We actually want to make it
as easy as possible for users

00:14:36.730 --> 00:14:39.159
to get in control of
your media playback.

00:14:39.159 --> 00:14:40.700
And thankfully,
there's a lot of ways

00:14:40.700 --> 00:14:43.680
to do that in the
Android framework.

00:14:43.680 --> 00:14:45.710
One of the first ones
that you might think of

00:14:45.710 --> 00:14:48.330
are headphones and
Bluetooth controls.

00:14:48.330 --> 00:14:51.820
Now for me personally, this is
probably the most frustrating

00:14:51.820 --> 00:14:54.844
one when apps don't
do it correctly.

00:14:54.844 --> 00:14:57.260
When you're in your car, and
you have integrated Bluetooth

00:14:57.260 --> 00:15:03.320
controls, those are the kind of
scenarios that users should not

00:15:03.320 --> 00:15:06.860
ever have to go into your
app to find the pause button

00:15:06.860 --> 00:15:09.560
or hit the Play button
or anything like that.

00:15:09.560 --> 00:15:14.110
Instead, you should be
handling these in your app.

00:15:14.110 --> 00:15:17.950
Now we generally
call these headphone

00:15:17.950 --> 00:15:21.130
and Bluetooth controls,
collectively, media buttons.

00:15:21.130 --> 00:15:23.220
So in fact, they're
actually just

00:15:23.220 --> 00:15:26.750
like any other keyboard event
from Android's point of view.

00:15:26.750 --> 00:15:28.260
You've got to key
down when someone

00:15:28.260 --> 00:15:29.634
depresses the
button and then key

00:15:29.634 --> 00:15:32.840
up when they release the button.

00:15:32.840 --> 00:15:35.770
Now by default, the
system is actually

00:15:35.770 --> 00:15:37.710
going to send out a
broadcast whenever

00:15:37.710 --> 00:15:41.900
it gets one of these messages
using the aptly-named media

00:15:41.900 --> 00:15:44.020
button intent.

00:15:44.020 --> 00:15:46.170
And this intent
actually includes

00:15:46.170 --> 00:15:49.280
the key event of the down
or up and what action

00:15:49.280 --> 00:15:52.320
was actually hit.

00:15:52.320 --> 00:15:56.320
So in that sense, we
can create our own,

00:15:56.320 --> 00:16:01.090
but in the support library
in the brand new 23.1 release

00:16:01.090 --> 00:16:03.350
that came out a
few days ago now,

00:16:03.350 --> 00:16:05.840
we've actually created a
media button receiver which

00:16:05.840 --> 00:16:08.610
does exactly this for you.

00:16:08.610 --> 00:16:13.130
Now one of the problems with cut
this kind of broadcast receiver

00:16:13.130 --> 00:16:16.240
is, because it's a broadcast
receiver in your manifest,

00:16:16.240 --> 00:16:18.210
somehow you need to
get that information

00:16:18.210 --> 00:16:21.060
into your actual service that
we've been talking about,

00:16:21.060 --> 00:16:21.560
right?

00:16:21.560 --> 00:16:25.190
You can't necessarily play
from the broadcast receiver

00:16:25.190 --> 00:16:26.770
when it's the service.

00:16:26.770 --> 00:16:28.350
How do you do all
that communication?

00:16:28.350 --> 00:16:32.500
And that's what media button
receiver actually does for you.

00:16:32.500 --> 00:16:34.470
So how do you set up a
media button receiver?

00:16:34.470 --> 00:16:36.535
You just registered
it in your manifest.

00:16:36.535 --> 00:16:39.410
It's a simple
receiver, UCR media

00:16:39.410 --> 00:16:43.630
button intent filter here
notice that you haven't

00:16:43.630 --> 00:16:46.330
written any code at all.

00:16:46.330 --> 00:16:52.150
But what it'll do is when it
finds a service which also has

00:16:52.150 --> 00:16:54.780
the Media button
intent filter, it'll

00:16:54.780 --> 00:16:57.060
automatically pass
any intents that

00:16:57.060 --> 00:17:01.570
are received such as those
media buttons onto your service.

00:17:01.570 --> 00:17:05.310
And now the service can actually
handle those play and pause

00:17:05.310 --> 00:17:09.349
and toggle play controls
in its on start command.

00:17:09.349 --> 00:17:11.770
No longer you have to
write this communication

00:17:11.770 --> 00:17:13.440
layer between your
broadcast receiver

00:17:13.440 --> 00:17:17.015
and your service to
get through everything.

00:17:17.015 --> 00:17:18.140
There's one problem though.

00:17:18.140 --> 00:17:21.930
If you write this,
it won't work at all.

00:17:21.930 --> 00:17:24.490
So why is that?

00:17:24.490 --> 00:17:26.540
We wrote media button receiver.

00:17:26.540 --> 00:17:29.390
It should just work.

00:17:29.390 --> 00:17:32.810
It turns out that sending
a broadcast to every media

00:17:32.810 --> 00:17:35.940
app on your device,
not a good idea.

00:17:35.940 --> 00:17:37.400
You don't want to
see what happens

00:17:37.400 --> 00:17:40.210
when you hit play on 10
different media players

00:17:40.210 --> 00:17:42.710
all at the same time.

00:17:42.710 --> 00:17:44.110
It's not pretty.

00:17:44.110 --> 00:17:46.520
Thankfully audio focus
handles most of it,

00:17:46.520 --> 00:17:49.920
but it will look funny,
so instead, the system

00:17:49.920 --> 00:17:54.430
has this concept of a preferred
media button receiver.

00:17:54.430 --> 00:17:57.410
It's basically a last
wins kind of a model,

00:17:57.410 --> 00:18:00.880
so the last one to register that
they want to be the preferred

00:18:00.880 --> 00:18:02.390
media button wins.

00:18:02.390 --> 00:18:04.880
Very similar to kind of
the audio focus model,

00:18:04.880 --> 00:18:08.390
where as you're the last one
to say I want audio focus,

00:18:08.390 --> 00:18:09.650
you get it.

00:18:09.650 --> 00:18:13.840
So if you've ever had Play Music
respond to a Bluetooth control

00:18:13.840 --> 00:18:16.450
when you're, in fact,
listening to another app,

00:18:16.450 --> 00:18:19.204
that's because something's
messed up in the preferred

00:18:19.204 --> 00:18:20.120
media button receiver.

00:18:22.740 --> 00:18:27.271
So that is one of many things
that media session compat

00:18:27.271 --> 00:18:27.770
gives you.

00:18:27.770 --> 00:18:31.315
Now MediaSessionCompat
does a lot.

00:18:31.315 --> 00:18:35.990
It's actually based on a
lollipop addition called

00:18:35.990 --> 00:18:40.170
media session, funnily
enough, and it's

00:18:40.170 --> 00:18:43.690
our entry point
between our media app

00:18:43.690 --> 00:18:46.920
and all of the
media framework API,

00:18:46.920 --> 00:18:49.390
so all the things we're
going to talk about here

00:18:49.390 --> 00:18:53.790
shortly are all kind of
tied into this one object.

00:18:53.790 --> 00:18:56.640
Now the nice part
is that this object,

00:18:56.640 --> 00:18:59.580
even though it was
built in API 21,

00:18:59.580 --> 00:19:01.670
auto translates to older API.

00:19:01.670 --> 00:19:04.680
So if you ever use
remote control receiver

00:19:04.680 --> 00:19:07.930
and other things
we won't mention,

00:19:07.930 --> 00:19:10.485
those deprecated APIs, you
don't have to use them.

00:19:10.485 --> 00:19:15.200
[INAUDIBLE] will automatically
do the right thing for you.

00:19:15.200 --> 00:19:19.330
Now first we'll want to
create our media session.

00:19:19.330 --> 00:19:22.280
We'll create it in our
service pretty much as soon

00:19:22.280 --> 00:19:25.790
as our services is created
just like our media player

00:19:25.790 --> 00:19:28.650
that we'll create
as soon as possible.

00:19:28.650 --> 00:19:31.690
Passing in a logging
tag, so anything

00:19:31.690 --> 00:19:34.130
goes wrong it's very
easy to actually debug

00:19:34.130 --> 00:19:37.320
where in the steps
actually fell apart.

00:19:37.320 --> 00:19:40.040
And then you'll want
to set two flags.

00:19:40.040 --> 00:19:41.880
One that we actually
want to handle

00:19:41.880 --> 00:19:45.590
our media buttons and the second
one is transport controls.

00:19:45.590 --> 00:19:49.800
These are play and pause type of
controls from within your app.

00:19:49.800 --> 00:19:51.580
Basically just always
want to set them.

00:19:51.580 --> 00:19:54.000
I'm not sure why they're
not the defaults.

00:19:54.000 --> 00:19:57.660
And then the last thing
is setting that callback.

00:19:57.660 --> 00:20:00.620
Now the callbacks are
actually really important.

00:20:00.620 --> 00:20:04.880
That's where you get on
play on pause on stop.

00:20:04.880 --> 00:20:09.800
It's basically that central
entry point between where

00:20:09.800 --> 00:20:12.340
all the media APIs
are going to go

00:20:12.340 --> 00:20:14.990
and your actual media player.

00:20:14.990 --> 00:20:18.790
So the onplay method of
here would cause play

00:20:18.790 --> 00:20:20.225
on your media player.

00:20:23.910 --> 00:20:27.620
So we haven't actually set that
we want to be the preferred

00:20:27.620 --> 00:20:28.785
media button.

00:20:28.785 --> 00:20:29.910
Thankfully it's one method.

00:20:29.910 --> 00:20:34.800
It's that setActive that you
can guess what the Boolean does.

00:20:34.800 --> 00:20:39.300
True means we want to become the
active media button receiver.

00:20:39.300 --> 00:20:42.350
False means we're
done, and we can leave.

00:20:42.350 --> 00:20:44.590
So it actually does a lot
behind the backgrounds,

00:20:44.590 --> 00:20:49.050
but one of things it does
is the Media button intent.

00:20:49.050 --> 00:20:52.050
Now once we have this media
session combat set up,

00:20:52.050 --> 00:20:54.400
we can actually take
advantage of the other part

00:20:54.400 --> 00:20:59.040
of media button receiver which
is its handle intent method.

00:20:59.040 --> 00:21:00.770
Handle intent
method, which you can

00:21:00.770 --> 00:21:04.930
put in your on start command,
automatically translates

00:21:04.930 --> 00:21:06.850
all the key events,
extracts them

00:21:06.850 --> 00:21:09.250
from the intents,
does all that work,

00:21:09.250 --> 00:21:11.550
and just hand them
off to your callbacks.

00:21:11.550 --> 00:21:14.430
So now you don't need to do
that translation of, all right,

00:21:14.430 --> 00:21:18.110
well, this is a key
down of toggle play,

00:21:18.110 --> 00:21:21.130
and then that translates
to an on play command.

00:21:21.130 --> 00:21:23.260
You just pass it
on through and keep

00:21:23.260 --> 00:21:25.480
using the call backs that
you've defined as part

00:21:25.480 --> 00:21:27.430
of media session compat.

00:21:27.430 --> 00:21:31.590
Now how does media
session know anything

00:21:31.590 --> 00:21:33.230
about what toggle
play should do?

00:21:33.230 --> 00:21:37.210
We haven't actually told
it if we're playing or not.

00:21:37.210 --> 00:21:40.630
That's what media
state compat is for.

00:21:40.630 --> 00:21:42.365
So you can think of
media state compat

00:21:42.365 --> 00:21:45.140
as kind of all of the
information about what

00:21:45.140 --> 00:21:46.860
your app is currently doing.

00:21:46.860 --> 00:21:51.140
So while you may,
within your app,

00:21:51.140 --> 00:21:54.180
are we playing, are we
pausing, are we buffering,

00:21:54.180 --> 00:21:55.840
the system knows nothing.

00:21:55.840 --> 00:21:58.815
You haven't told it
anything, so we'll

00:21:58.815 --> 00:22:01.880
have to do exactly
that using set state.

00:22:01.880 --> 00:22:06.780
Now set state is kind
of the playing paused.

00:22:06.780 --> 00:22:11.410
It actually looks like an enum
but is, in fact, not an enum.

00:22:11.410 --> 00:22:12.640
It's just ints.

00:22:12.640 --> 00:22:15.820
And we'll also want to
include our position, so

00:22:15.820 --> 00:22:17.720
how far along we
are in the track,

00:22:17.720 --> 00:22:20.200
if that's applicable to you.

00:22:20.200 --> 00:22:22.030
And then we also
have set actions,

00:22:22.030 --> 00:22:25.640
so set actions are things
like do I support play pause?

00:22:25.640 --> 00:22:26.880
Do I support stop?

00:22:26.880 --> 00:22:28.620
Do I support next track?

00:22:28.620 --> 00:22:32.354
Not every player supports
going to the previous track.

00:22:32.354 --> 00:22:34.270
You really want to make
sure that you actually

00:22:34.270 --> 00:22:37.520
put all of the things you
support because this is what's

00:22:37.520 --> 00:22:40.250
going to show up
on various surfaces

00:22:40.250 --> 00:22:41.910
such as the lock screen later.

00:22:41.910 --> 00:22:46.120
And it's also how media
buttons get filtered out.

00:22:46.120 --> 00:22:48.320
If you say you
don't support pause,

00:22:48.320 --> 00:22:51.250
and someone clicks the
button on their head phone,

00:22:51.250 --> 00:22:56.210
you won't get it an on-pause
playback or callback.

00:22:56.210 --> 00:22:58.580
So really make sure
that you're actually

00:22:58.580 --> 00:23:00.100
also setting the actions.

00:23:00.100 --> 00:23:01.680
Now you'll note
that both of these

00:23:01.680 --> 00:23:04.430
are combined into the same
playback state compat.

00:23:04.430 --> 00:23:07.450
It turns out that
in most media apps,

00:23:07.450 --> 00:23:09.450
these are actually
tied together.

00:23:09.450 --> 00:23:11.510
While you're
buffering, you probably

00:23:11.510 --> 00:23:13.865
don't have a pause action.

00:23:13.865 --> 00:23:15.240
When your buffering,
you probably

00:23:15.240 --> 00:23:17.780
don't have a skip to
next, but you may still

00:23:17.780 --> 00:23:21.280
want to support a stop command
to be able to stop things

00:23:21.280 --> 00:23:23.280
if it's really
buffering on forever,

00:23:23.280 --> 00:23:26.870
so they are kind of combined
together under the assumption

00:23:26.870 --> 00:23:29.650
that you'll probably change
both of them at the same time.

00:23:32.240 --> 00:23:35.550
So probably one of my favorite
features in Ice Cream Sandwich

00:23:35.550 --> 00:23:37.720
are lock screen
controls, so kind

00:23:37.720 --> 00:23:40.930
of that play pause,
pretty album art, probably

00:23:40.930 --> 00:23:43.740
the best feature besides
the whole combining phones

00:23:43.740 --> 00:23:46.560
and tablets and all that.

00:23:46.560 --> 00:23:47.440
It's fine.

00:23:47.440 --> 00:23:50.034
Lock screen controls,
definitely the best.

00:23:50.034 --> 00:23:51.700
Now they're actually
fairly easy to add.

00:23:51.700 --> 00:23:54.230
The only thing we're been
missing so far because we

00:23:54.230 --> 00:23:57.620
already set our actions is
actually just some metadata

00:23:57.620 --> 00:23:58.800
including a picture.

00:23:58.800 --> 00:24:00.840
We can't really show
anything on the screen

00:24:00.840 --> 00:24:03.320
if we're not showing
that type of thing.

00:24:03.320 --> 00:24:09.260
So and that's where media
metadata compat comes in.

00:24:09.260 --> 00:24:10.760
Again, we'll just
kind of set it in.

00:24:10.760 --> 00:24:14.550
You can kind of think of it as
a bundle of all the information

00:24:14.550 --> 00:24:17.560
about what's currently playing.

00:24:17.560 --> 00:24:20.370
Now note, this is actually
used in more places

00:24:20.370 --> 00:24:21.860
than just the lock screen.

00:24:21.860 --> 00:24:24.450
So if you've ever
noticed, on Android Wear

00:24:24.450 --> 00:24:27.130
you get a little notification
of playing audio and stuff.

00:24:27.130 --> 00:24:29.880
It's actually using the
metadata you pass in,

00:24:29.880 --> 00:24:31.730
that album art, all
that information is

00:24:31.730 --> 00:24:36.040
coming from the media
metadata use set.

00:24:36.040 --> 00:24:39.580
So what kind of
information goes in here?

00:24:39.580 --> 00:24:44.540
A lot of the basics,
title, artist, album,

00:24:44.540 --> 00:24:46.170
all kind of really
important ones.

00:24:46.170 --> 00:24:48.830
If you are using
fixed duration tracks,

00:24:48.830 --> 00:24:50.490
you probably want
to add the duration

00:24:50.490 --> 00:24:54.350
it goes really well with
that position we already set.

00:24:54.350 --> 00:25:00.940
On the image size, you
have add bitmaps directly.

00:25:00.940 --> 00:25:05.910
Please do not add any like
4,000 by 4,000 giant bitmaps.

00:25:05.910 --> 00:25:08.170
That's kind of the case
where URIs come in,

00:25:08.170 --> 00:25:12.560
where you can actually pass a
URI to just a larger image that

00:25:12.560 --> 00:25:14.290
then can be downloaded later.

00:25:14.290 --> 00:25:16.550
Ideally, these should
be content URIs

00:25:16.550 --> 00:25:18.710
so that other apps
can read from them.

00:25:18.710 --> 00:25:20.890
I have a storage
talk tomorrow that

00:25:20.890 --> 00:25:23.900
talks all about how you can
actually set up these URIs real

00:25:23.900 --> 00:25:28.010
easy, but these are just some
of the most important ones.

00:25:28.010 --> 00:25:31.370
There's actually like
27 of them in total, so

00:25:31.370 --> 00:25:32.800
read through the documentation.

00:25:32.800 --> 00:25:36.880
These are probably the ones
I'd recommend off the top.

00:25:36.880 --> 00:25:39.960
So we've added our
media session compat.

00:25:39.960 --> 00:25:41.790
Just a few more
steps along the way

00:25:41.790 --> 00:25:45.200
we did our created setting
the flags, playing,

00:25:45.200 --> 00:25:47.715
we'll want to set active
to true, set our metadata,

00:25:47.715 --> 00:25:49.530
set our state.

00:25:49.530 --> 00:25:53.840
Similarly, anytime we pause
or buffer or change anything

00:25:53.840 --> 00:25:56.380
really, want to make
sure our state stays

00:25:56.380 --> 00:25:59.850
in sync with our app as well
as then when we're actually

00:25:59.850 --> 00:26:03.790
stopped, we'll set active to
false and say, hey, we're done.

00:26:03.790 --> 00:26:06.130
And then release,
went around destroyed

00:26:06.130 --> 00:26:09.070
to return all those resources.

00:26:09.070 --> 00:26:11.630
Now I talked about
locks and controls.

00:26:11.630 --> 00:26:17.095
They're really great, but we
kind of removed them from 5.0.

00:26:17.095 --> 00:26:20.860
It turns out that notifications
are the new hotness

00:26:20.860 --> 00:26:23.580
and are kind of what
the lock screen is

00:26:23.580 --> 00:26:26.610
all about now as of Lollipop.

00:26:26.610 --> 00:26:29.240
Now it turns out we
probably should have been

00:26:29.240 --> 00:26:32.490
using notifications all along.

00:26:32.490 --> 00:26:35.390
The fact of having to lock
your device just to use a play

00:26:35.390 --> 00:26:38.020
pause button, probably
a little silly.

00:26:38.020 --> 00:26:40.090
So notifications
kind of give you

00:26:40.090 --> 00:26:42.940
that access anywhere--
anywhere in any app

00:26:42.940 --> 00:26:45.580
you can pull down the
notification tray and play

00:26:45.580 --> 00:26:47.100
and pause on that type of thing.

00:26:47.100 --> 00:26:50.180
But building that
custom notification can

00:26:50.180 --> 00:26:52.920
be a lot more complicated
than you want,

00:26:52.920 --> 00:26:55.960
so we built it all for you.

00:26:55.960 --> 00:26:58.890
We have a notification
compat media style,

00:26:58.890 --> 00:27:01.330
so this style kind
of automatically

00:27:01.330 --> 00:27:03.830
allows you to add media
buttons without having

00:27:03.830 --> 00:27:09.190
to create giant custom
notifications every time, so

00:27:09.190 --> 00:27:11.310
unless an API 14.

00:27:11.310 --> 00:27:14.750
In fact, you couldn't add any
buttons to a notification.

00:27:14.750 --> 00:27:18.240
Like there was a time when
all a notification was just

00:27:18.240 --> 00:27:20.410
a single tap target.

00:27:20.410 --> 00:27:24.170
It was like years ago, but
we still support it here.

00:27:24.170 --> 00:27:26.610
You'll get just a basic
notification that allows

00:27:26.610 --> 00:27:29.050
someone to click into your app.

00:27:29.050 --> 00:27:31.890
Starting in API 14, you
can actually have buttons.

00:27:31.890 --> 00:27:34.790
So you support buttons in
that single line state.

00:27:34.790 --> 00:27:36.920
You can have up to three
buttons right there

00:27:36.920 --> 00:27:38.890
in the notification.

00:27:38.890 --> 00:27:43.050
API 16 Android 4.1
added expanded controls,

00:27:43.050 --> 00:27:47.280
so here you'll get a
larger image for album art,

00:27:47.280 --> 00:27:50.630
and you'll get up
to five controls.

00:27:50.630 --> 00:27:52.650
And in Lollipop, we
actually switch over

00:27:52.650 --> 00:27:54.630
to the framework media style.

00:27:54.630 --> 00:27:57.060
So basically from there
on out, you'll actually

00:27:57.060 --> 00:28:00.400
have the exact styling
across every device,

00:28:00.400 --> 00:28:04.120
and it'll look just
like any system one.

00:28:04.120 --> 00:28:07.680
Now one thing to note is that
all of this notification compat

00:28:07.680 --> 00:28:10.610
is in app compat,
not necessarily

00:28:10.610 --> 00:28:12.270
in the support
before, which is where

00:28:12.270 --> 00:28:14.270
all of the rest of the
notification compat stuff

00:28:14.270 --> 00:28:16.730
is, so just keep aware of that.

00:28:16.730 --> 00:28:21.235
Now I like writing
boilerplate code once.

00:28:21.235 --> 00:28:23.760
I never want you to
write boilerplate code.

00:28:23.760 --> 00:28:27.440
So I've come up with kind of
a media style helper class

00:28:27.440 --> 00:28:29.700
which kind of does a
lot of the building,

00:28:29.700 --> 00:28:32.230
taking in a media session
and then building out

00:28:32.230 --> 00:28:34.280
a notification compat for you.

00:28:36.860 --> 00:28:40.410
So we can actually extract
a lot of information

00:28:40.410 --> 00:28:42.350
if we've set our media metadata.

00:28:42.350 --> 00:28:44.940
In fact, media metadata
has a very nice method

00:28:44.940 --> 00:28:47.440
called get description,
which kind of extracts

00:28:47.440 --> 00:28:52.830
the most important information,
those information that we

00:28:52.830 --> 00:28:55.600
called out earlier such
as title and artist,

00:28:55.600 --> 00:28:59.380
and actually allows us to build
our whole notification directly

00:28:59.380 --> 00:29:02.540
from that, getting title,
get our description,

00:29:02.540 --> 00:29:04.560
doing all this work
for so you don't have

00:29:04.560 --> 00:29:06.810
to do this boilerplate work.

00:29:06.810 --> 00:29:11.760
In fact, we can actually
pull out a session activity

00:29:11.760 --> 00:29:16.740
if you've set it via media
session compact session

00:29:16.740 --> 00:29:20.300
activity to launch your
activity automatically.

00:29:20.300 --> 00:29:24.050
Now on 5.0 plus,
you can't actually

00:29:24.050 --> 00:29:28.110
hide notification contacts
on the lock screen,

00:29:28.110 --> 00:29:30.250
but generally we
actually do want

00:29:30.250 --> 00:29:33.730
to show media controls
on the lock screen even

00:29:33.730 --> 00:29:37.870
in those cases, so we
can set it as public.

00:29:37.870 --> 00:29:40.710
Now you'll note here for
the delete intent, which

00:29:40.710 --> 00:29:42.910
is when a notification
is swiped away,

00:29:42.910 --> 00:29:44.990
we're actually using a
separate helper called

00:29:44.990 --> 00:29:49.510
get action intent which
you'll pass in a key event,

00:29:49.510 --> 00:29:51.520
and then it'll automatically
create the pending

00:29:51.520 --> 00:29:53.410
intent for you.

00:29:53.410 --> 00:29:56.390
Thankfully that's another
easy method that I created

00:29:56.390 --> 00:29:59.100
and both of these
methods are just

00:29:59.100 --> 00:30:04.876
on GitHub, which means you don't
have to write it ever again.

00:30:04.876 --> 00:30:06.050
It's fantastic.

00:30:06.050 --> 00:30:10.090
So we can actually just stick
with something very simple.

00:30:10.090 --> 00:30:13.170
In fact, when you create
it from our notification,

00:30:13.170 --> 00:30:15.710
and then we'll want to
set kind of the small icon

00:30:15.710 --> 00:30:19.320
that appears on the top,
and then set the color.

00:30:19.320 --> 00:30:21.950
Now color works a little bit
different for media style

00:30:21.950 --> 00:30:23.590
notifications.

00:30:23.590 --> 00:30:26.820
If you've ever seen a
notification on 5.0 plus,

00:30:26.820 --> 00:30:29.510
the small icon,
the app icon, can

00:30:29.510 --> 00:30:31.240
be colorized in the background.

00:30:31.240 --> 00:30:33.100
You'll see a lot of
Google Apps do this.

00:30:33.100 --> 00:30:34.990
In media sound of
cations it actually

00:30:34.990 --> 00:30:39.340
is the whole background of
the entire notification,

00:30:39.340 --> 00:30:42.120
so if you're using
bright orange,

00:30:42.120 --> 00:30:43.615
I want to stab your eyes out.

00:30:43.615 --> 00:30:44.860
[LAUGHTER]

00:30:44.860 --> 00:30:47.430
Don't use bright
orange or any color

00:30:47.430 --> 00:30:50.020
that really you want to
test it out and make sure

00:30:50.020 --> 00:30:52.020
that the color
that you're setting

00:30:52.020 --> 00:30:54.790
makes sense with your
actual color pallet

00:30:54.790 --> 00:30:57.560
and doesn't look
ridiculous because it

00:30:57.560 --> 00:31:01.390
has a strong chance
of looking ridiculous.

00:31:01.390 --> 00:31:04.090
Now media styles wouldn't
really be much of anything

00:31:04.090 --> 00:31:05.060
without actions.

00:31:05.060 --> 00:31:07.080
So here I'm adding
a pause action

00:31:07.080 --> 00:31:09.150
using our get action intent.

00:31:09.150 --> 00:31:12.080
And then our style actually
just uses two methods,

00:31:12.080 --> 00:31:15.950
one called this set show
actions in compact view.

00:31:15.950 --> 00:31:18.330
So this is what sets
what actions appear

00:31:18.330 --> 00:31:19.930
in that single line view.

00:31:19.930 --> 00:31:22.100
By default, none
will, so you probably

00:31:22.100 --> 00:31:26.730
want to set some zero index
array of what buttons to have.

00:31:26.730 --> 00:31:29.310
So if you want the second
button you've added,

00:31:29.310 --> 00:31:30.340
you'd add button one.

00:31:30.340 --> 00:31:35.480
If you want the second and
third, one and two, et cetera.

00:31:35.480 --> 00:31:38.400
And then the last part,
which is super critical,

00:31:38.400 --> 00:31:42.350
but if you forget it people
will hate you, is media session,

00:31:42.350 --> 00:31:44.740
so the set media
session is actually

00:31:44.740 --> 00:31:48.520
what allows your notification
to work on Android Wear.

00:31:48.520 --> 00:31:50.850
If you don't set
this then you'll

00:31:50.850 --> 00:31:53.240
get a beautiful
notification on [INAUDIBLE],

00:31:53.240 --> 00:31:56.336
and then you hit the pause
button and nothing happens.

00:31:56.336 --> 00:31:58.830
It's the worst
feeling in the world.

00:31:58.830 --> 00:32:02.770
We're like, oh, wow, that looks
amazing and nothing happens.

00:32:02.770 --> 00:32:04.510
But what it's
actually doing is it's

00:32:04.510 --> 00:32:06.810
using a session
token, so it's kind

00:32:06.810 --> 00:32:10.200
of the unique identifier
for your session

00:32:10.200 --> 00:32:12.730
and passing that on to
apps like Android Wear

00:32:12.730 --> 00:32:14.590
such that they can
control your audio

00:32:14.590 --> 00:32:16.580
and give you call
backs in your callback.

00:32:19.170 --> 00:32:21.020
So we've added our notification.

00:32:21.020 --> 00:32:23.680
Want to show it as soon
as we start playing,

00:32:23.680 --> 00:32:26.960
but we want to update it
any time the states changed.

00:32:26.960 --> 00:32:29.880
And then of course, remove
it when we've stopped

00:32:29.880 --> 00:32:31.910
and we're all done.

00:32:31.910 --> 00:32:35.200
But we've talked notifications.

00:32:35.200 --> 00:32:37.620
Now turns out that there's
this concept called

00:32:37.620 --> 00:32:39.430
foreground services
which kind of

00:32:39.430 --> 00:32:43.720
raise our background services
priority to a higher level such

00:32:43.720 --> 00:32:45.610
that it won't get killed.

00:32:45.610 --> 00:32:48.980
Now foreground services
require a notification,

00:32:48.980 --> 00:32:52.630
which thankfully we just
built. So we can actually

00:32:52.630 --> 00:32:57.490
take advantage of this
for our media service.

00:32:57.490 --> 00:32:59.050
Now it's actually
really important

00:32:59.050 --> 00:33:01.620
because we really don't
want our service, which

00:33:01.620 --> 00:33:05.220
is playing audio, to die
in the middle of things

00:33:05.220 --> 00:33:07.489
just because someone
launches chrome

00:33:07.489 --> 00:33:09.530
and it takes up all the
resources on your Android

00:33:09.530 --> 00:33:11.149
device.

00:33:11.149 --> 00:33:12.565
Believe me, they're
working on it.

00:33:12.565 --> 00:33:14.880
[LAUGHTER]

00:33:14.880 --> 00:33:19.040
But what we want is we want our
service because it is actively

00:33:19.040 --> 00:33:22.220
playing music to live
just a little bit longer

00:33:22.220 --> 00:33:25.930
and hopefully survive forever.

00:33:25.930 --> 00:33:27.220
There's one caveat though.

00:33:27.220 --> 00:33:29.900
Once you've started
a notification

00:33:29.900 --> 00:33:33.650
with start foreground,
pre-Lollipop

00:33:33.650 --> 00:33:35.640
it was ongoing forever.

00:33:35.640 --> 00:33:38.390
You could never
swipe it away, which

00:33:38.390 --> 00:33:40.720
was actually super frustrating.

00:33:40.720 --> 00:33:46.110
So we fixed it, but it actually
affects media notifications

00:33:46.110 --> 00:33:48.250
the most because if
you think about it,

00:33:48.250 --> 00:33:51.490
you're going from a
foreground, I'm playing audio

00:33:51.490 --> 00:33:55.090
to being paused not
foreground, very often,

00:33:55.090 --> 00:33:56.840
and you don't want
your notification being

00:33:56.840 --> 00:34:03.420
completely removed and re-put in
because it looks really janky.

00:34:03.420 --> 00:34:08.000
So our media style
actually gives us

00:34:08.000 --> 00:34:10.960
two methods which allow
you to kind of work around

00:34:10.960 --> 00:34:15.040
that setting a cancel intent,
and basically this just adds

00:34:15.040 --> 00:34:17.400
a little x in the
corner of your media

00:34:17.400 --> 00:34:20.659
notification which allows
them even if they are ongoing

00:34:20.659 --> 00:34:23.780
forever and you're
annoying users to no end,

00:34:23.780 --> 00:34:26.800
they can just hit the x and
close out your notification.

00:34:26.800 --> 00:34:28.530
In this case, we'll
set the intent

00:34:28.530 --> 00:34:32.710
to just be a media stop just
like it got swiped away,

00:34:32.710 --> 00:34:35.040
so it always is the
same whether it's

00:34:35.040 --> 00:34:37.630
pre-Lollipop or post-Lollipop.

00:34:37.630 --> 00:34:40.310
Nicely enough, on Lollipop
these methods just

00:34:40.310 --> 00:34:43.219
don't do anything because it
doesn't apply on those levels.

00:34:43.219 --> 00:34:45.210
You'll be able to swipe
it away as soon as you

00:34:45.210 --> 00:34:49.500
say stop foreground false.

00:34:49.500 --> 00:34:51.820
So stop foreground
false means I don't

00:34:51.820 --> 00:34:54.630
want to be a foreground
service anymore, but keep

00:34:54.630 --> 00:34:56.250
my notification up there.

00:34:56.250 --> 00:34:59.920
I'm still alive, but
I don't necessarily

00:34:59.920 --> 00:35:04.290
have the requirement to be at
the top of the priority list.

00:35:04.290 --> 00:35:08.190
If your music is paused
forever, users probably

00:35:08.190 --> 00:35:10.690
won't notice if it actually
gets destroyed or not.

00:35:10.690 --> 00:35:13.210
And if you're really
under memory pressure,

00:35:13.210 --> 00:35:16.570
it is kind of important to be
able to have Android clean up

00:35:16.570 --> 00:35:18.640
your service.

00:35:18.640 --> 00:35:21.580
So we've actually
done a whole lot.

00:35:21.580 --> 00:35:22.327
We're playing.

00:35:22.327 --> 00:35:22.910
We're pausing.

00:35:22.910 --> 00:35:23.600
We're stopping.

00:35:23.600 --> 00:35:25.640
We're not stepping
on other apps.

00:35:25.640 --> 00:35:28.345
Bluetooth controls, work
lock screens, media controls

00:35:28.345 --> 00:35:31.210
and notifications,
Android Wear, and we're

00:35:31.210 --> 00:35:32.700
reliable under memory pressure.

00:35:32.700 --> 00:35:35.030
That's pretty good.

00:35:35.030 --> 00:35:37.540
Now we just forgot
one little thing,

00:35:37.540 --> 00:35:40.650
you have an app that has
UI, that has controls,

00:35:40.650 --> 00:35:45.090
and we haven't talked at
all about how that service

00:35:45.090 --> 00:35:47.300
interacts with your actual UI.

00:35:47.300 --> 00:35:50.050
Now you could be doing
something super simple

00:35:50.050 --> 00:35:53.610
and saying just start
service with custom actions,

00:35:53.610 --> 00:35:57.240
but it doesn't get you the
two-way communication you want.

00:35:57.240 --> 00:36:00.120
You want so that when
the service switches

00:36:00.120 --> 00:36:04.630
to the next song,
your UI stays in sync.

00:36:04.630 --> 00:36:07.120
And ideally, we'd
want to actually reuse

00:36:07.120 --> 00:36:10.670
those call backs we were using
so that when someone hits play

00:36:10.670 --> 00:36:14.400
or pause in your UI, your
callbacks you've already set up

00:36:14.400 --> 00:36:16.640
for media buttons
are automatically

00:36:16.640 --> 00:36:18.790
handling those things.

00:36:18.790 --> 00:36:22.860
Sounds pretty amazing right, so
we've built a class for that.

00:36:22.860 --> 00:36:25.800
We've built a lot of classes.

00:36:25.800 --> 00:36:28.500
Media controller compat kind
of does all that for you.

00:36:28.500 --> 00:36:30.790
Once you've connected
to it, then you'll

00:36:30.790 --> 00:36:34.295
actually get access to all
of the metadata you've set,

00:36:34.295 --> 00:36:37.980
so you can tell what the
current playing track is.

00:36:37.980 --> 00:36:40.630
All of the state, so you
can tell if you're playing

00:36:40.630 --> 00:36:45.660
or paused and what position
you are as well as transport

00:36:45.660 --> 00:36:48.960
controls, so these are
the methods of like play,

00:36:48.960 --> 00:36:52.900
pause, skip to next, right,
kind of useful things to have,

00:36:52.900 --> 00:36:56.440
and these pipe directly
into your callbacks.

00:36:56.440 --> 00:36:58.950
There's no extra layers
you need to build,

00:36:58.950 --> 00:37:01.660
no callback craziness.

00:37:01.660 --> 00:37:05.130
It's just already built for you
in part of transport controls.

00:37:08.830 --> 00:37:13.210
And because no one likes
pulling for media changes,

00:37:13.210 --> 00:37:15.076
you actually get a
set of clawbacks.

00:37:15.076 --> 00:37:16.450
So these callbacks
are the things

00:37:16.450 --> 00:37:19.510
that's say like, oh, the
media metadata has changed.

00:37:19.510 --> 00:37:21.180
We've switched to
the next track.

00:37:21.180 --> 00:37:23.230
Oh, we went to buffering.

00:37:23.230 --> 00:37:25.160
Instead of having
to pull your service

00:37:25.160 --> 00:37:27.160
or have your service
send notifications

00:37:27.160 --> 00:37:30.480
every time, whenever you
call set state or set

00:37:30.480 --> 00:37:33.390
metadata, which
we're already doing,

00:37:33.390 --> 00:37:36.860
then our callback will instantly
get a callback saying like,

00:37:36.860 --> 00:37:38.590
hey, the metadata has changed.

00:37:38.590 --> 00:37:41.420
You should update the UI
to match the new metadata.

00:37:41.420 --> 00:37:43.730
All a sudden our
UI is now totally

00:37:43.730 --> 00:37:45.940
in sync with our
service without us

00:37:45.940 --> 00:37:48.560
having to write any
crazy communication

00:37:48.560 --> 00:37:51.720
code between our
service and our UI

00:37:51.720 --> 00:37:55.520
because we're using
media controller compat.

00:37:55.520 --> 00:37:57.700
There is one wrinkle though.

00:37:57.700 --> 00:38:00.650
That token that we need,
that media session token

00:38:00.650 --> 00:38:02.480
that we pass through
out notification

00:38:02.480 --> 00:38:06.780
is actually also what's needed
for media controller compat.

00:38:06.780 --> 00:38:11.990
But person who knows about
our token is our service.

00:38:11.990 --> 00:38:16.170
We somehow need to
get that to our UI.

00:38:16.170 --> 00:38:20.040
Now [AUDIO OUT] really matter
how you get it to your UI,

00:38:20.040 --> 00:38:23.650
but we do have a second
set of classes called

00:38:23.650 --> 00:38:27.040
MediaBrowserService
and MediaBrowser, which

00:38:27.040 --> 00:38:30.010
were introduced
in API 21 which do

00:38:30.010 --> 00:38:35.490
all this connecting and
passing the session for you.

00:38:35.490 --> 00:38:37.990
Nicely enough,
you don't actually

00:38:37.990 --> 00:38:42.290
need a token to connect to
a media browser service,

00:38:42.290 --> 00:38:46.380
and you'll get access to
actually new APIs as well such

00:38:46.380 --> 00:38:49.560
as being able to browse
media items entirely.

00:38:49.560 --> 00:38:52.910
This allows you to
actually build your UI off

00:38:52.910 --> 00:38:55.830
of the information that's
already in the service.

00:38:55.830 --> 00:38:58.710
For example, you could
have a list of tracks

00:38:58.710 --> 00:39:01.310
and that would match
what's in your UI,

00:39:01.310 --> 00:39:04.100
and you wouldn't have to create
a separate data store for that.

00:39:04.100 --> 00:39:06.970
You can use the media browser
service and MediaBrowser

00:39:06.970 --> 00:39:08.940
to connect to it.

00:39:08.940 --> 00:39:12.780
Note this is also how all the
Android Wear or Android Auto

00:39:12.780 --> 00:39:15.390
integration works,
so Android Auto

00:39:15.390 --> 00:39:18.710
is actually connecting to
your media brother service

00:39:18.710 --> 00:39:22.240
and then building the
whole UI, all the controls,

00:39:22.240 --> 00:39:27.430
all of the information, from
the data you pass back to it.

00:39:27.430 --> 00:39:31.052
We also note that Android
Wear adds a browse action.

00:39:31.052 --> 00:39:32.510
You'll never find
it on your watch,

00:39:32.510 --> 00:39:34.730
but if you're playing
audio, and you

00:39:34.730 --> 00:39:37.290
scroll all the way to the
right, you'll find browse.

00:39:37.290 --> 00:39:39.690
This allows them to actually
check the next track

00:39:39.690 --> 00:39:43.100
or skip multiple tracks or
change playlists and stuff

00:39:43.100 --> 00:39:44.640
directly from the watch.

00:39:44.640 --> 00:39:46.630
Actually, pretty
useful if you're

00:39:46.630 --> 00:39:49.340
one of those kind of people
who hates pulling their giant

00:39:49.340 --> 00:39:50.615
X6's out of their pocket.

00:39:53.480 --> 00:39:54.970
Now moving to media
browser service

00:39:54.970 --> 00:40:00.810
has one thing you'll need to do
call SessionToken in onCreate

00:40:00.810 --> 00:40:06.370
and obviously move over from
extending service to extending

00:40:06.370 --> 00:40:08.830
media browser service.

00:40:08.830 --> 00:40:12.270
Now it also gives you those
new methods onGetRoot,

00:40:12.270 --> 00:40:15.710
which is kind of the verifying
what the calling app is.

00:40:15.710 --> 00:40:19.200
So if you want Android Auto
to display different data,

00:40:19.200 --> 00:40:23.170
you can pass at a different
route from say your own app,

00:40:23.170 --> 00:40:26.490
so if you have different
layouts for each one.

00:40:26.490 --> 00:40:30.170
And then similar to a
file browser, for example,

00:40:30.170 --> 00:40:33.240
onload children gives you
a list of all of the items.

00:40:33.240 --> 00:40:36.860
Some of them may be browsable
items, different folders

00:40:36.860 --> 00:40:40.740
and subfolders, other ones
might be playable ones.

00:40:40.740 --> 00:40:42.690
Similaraly, onload
item just gives you

00:40:42.690 --> 00:40:44.470
details about a single item.

00:40:44.470 --> 00:40:48.430
So you could see how like you
may be able to build a UI out

00:40:48.430 --> 00:40:49.690
of these methods, right?

00:40:49.690 --> 00:40:52.400
You may be able to say,
onload children, and get

00:40:52.400 --> 00:40:55.870
a list of all the songs
or all of the albums

00:40:55.870 --> 00:40:58.020
or all of the most
recently played tracked.

00:40:58.020 --> 00:41:00.230
It doesn't really
matter what it is,

00:41:00.230 --> 00:41:03.570
but that same list of
tracks can be really done

00:41:03.570 --> 00:41:07.670
with onload children, and
then all mode item actually

00:41:07.670 --> 00:41:11.500
give you the details
about an individual item.

00:41:11.500 --> 00:41:15.250
Now if you want to learn
more about this we actually

00:41:15.250 --> 00:41:18.630
have a giant sample app
which does everything

00:41:18.630 --> 00:41:20.810
in the world based
on a media browser

00:41:20.810 --> 00:41:25.380
a service called Universal
Android Media Player UAMP.

00:41:25.380 --> 00:41:27.345
Like I said, currently,
media browser services

00:41:27.345 --> 00:41:33.610
is API 21 plus and so is
universal Android Music Player

00:41:33.610 --> 00:41:35.160
UAMP.

00:41:35.160 --> 00:41:38.170
But I would like to say that
we are working on backporting

00:41:38.170 --> 00:41:41.440
both, so we're working
on getting media browser

00:41:41.440 --> 00:41:46.920
service to lower API levels as
well as moving over UAMP over

00:41:46.920 --> 00:41:49.530
to support a wide
variety of devices.

00:41:49.530 --> 00:41:52.740
So you can actually use
all these things much more

00:41:52.740 --> 00:41:56.440
even if you're not quite
ready for minSdk 21, anyone?

00:41:56.440 --> 00:41:57.790
[LAUGHTER]

00:41:57.790 --> 00:41:58.882
Oh, yeah.

00:41:58.882 --> 00:41:59.590
All right, great.

00:41:59.590 --> 00:42:00.850
Perfect.

00:42:00.850 --> 00:42:01.940
You can use it right now.

00:42:01.940 --> 00:42:02.440
It's great.

00:42:02.440 --> 00:42:03.981
You don't have to
switch any of this.

00:42:06.350 --> 00:42:12.690
Now if you're not minSdk
21, then you should be.

00:42:12.690 --> 00:42:16.940
But they're really
the best users.

00:42:16.940 --> 00:42:20.630
But I understand maybe
that doesn't make sense

00:42:20.630 --> 00:42:21.550
for your app.

00:42:21.550 --> 00:42:26.590
There are a few other ways other
than using media controller

00:42:26.590 --> 00:42:29.520
to get the session
to your activity.

00:42:29.520 --> 00:42:33.570
You could do it super
simply use, say,

00:42:33.570 --> 00:42:38.740
the EventBus app of your
choice or ex-Java or whatever

00:42:38.740 --> 00:42:41.690
or use a static
method in your service

00:42:41.690 --> 00:42:46.070
and a local broadcast who'd
say, oh, it's changed.

00:42:46.070 --> 00:42:49.400
Super easy to
build, but maybe not

00:42:49.400 --> 00:42:52.350
supporting kind of the
multiprocess structure.

00:42:52.350 --> 00:42:56.280
Actually, multiprocess is a lot
more important for a media app

00:42:56.280 --> 00:42:58.430
because you really want
that background service

00:42:58.430 --> 00:43:03.210
to be as low memory, as
low impact as possible

00:43:03.210 --> 00:43:07.080
and have your UI not
impact the actual service.

00:43:07.080 --> 00:43:10.210
So if your UI crashes
because something's

00:43:10.210 --> 00:43:11.960
gone horribly wrong,
you don't necessarily

00:43:11.960 --> 00:43:16.170
want that to kill your whole
background playback also.

00:43:16.170 --> 00:43:20.080
Another option is to kind of
fake what media browser service

00:43:20.080 --> 00:43:23.240
is actually doing under
the covers and bind

00:43:23.240 --> 00:43:25.570
to your service,
build an API that

00:43:25.570 --> 00:43:28.240
just returns a token for you.

00:43:28.240 --> 00:43:29.830
No one really wants
to build this,

00:43:29.830 --> 00:43:32.740
but we actually a really good
training on bound services

00:43:32.740 --> 00:43:35.100
on developer.android.com
if you're

00:43:35.100 --> 00:43:37.510
interested in learning kind
of some of those approaches

00:43:37.510 --> 00:43:39.590
to do that.

00:43:39.590 --> 00:43:42.060
The simple matter
is it doesn't matter

00:43:42.060 --> 00:43:43.980
how you get a token to your UI.

00:43:43.980 --> 00:43:45.740
It just matters
that it gets there,

00:43:45.740 --> 00:43:48.350
so whatever approach
you want to use now

00:43:48.350 --> 00:43:51.080
and then if you want to use
media browser service later,

00:43:51.080 --> 00:43:54.600
it's totally possible
and it works great.

00:43:54.600 --> 00:43:57.350
So everything that
we've done today

00:43:57.350 --> 00:43:59.364
can be summed up in
one slide, probably

00:43:59.364 --> 00:44:01.030
should have shown
this at the beginning,

00:44:01.030 --> 00:44:03.590
but then you might have left.

00:44:03.590 --> 00:44:06.600
But this is the canonical
slide of all the things

00:44:06.600 --> 00:44:08.160
you may want to do.

00:44:08.160 --> 00:44:12.720
I did note once that the
stopped state, right, if you do

00:44:12.720 --> 00:44:16.770
want to keep your service
around for a little bit longer,

00:44:16.770 --> 00:44:19.390
you don't necessarily
need to remove everything

00:44:19.390 --> 00:44:21.460
as soon as they hit
the stop button.

00:44:21.460 --> 00:44:23.520
You may keep it around
a little bit longer.

00:44:23.520 --> 00:44:27.470
That's fine, but we've learned
about kind of audio focus

00:44:27.470 --> 00:44:31.960
and the noisy broadcast becoming
noisy to really play nicely

00:44:31.960 --> 00:44:36.560
with other audio playing apps,
media buttons, lock screens,

00:44:36.560 --> 00:44:39.850
and system information,
and media session combat.

00:44:39.850 --> 00:44:41.530
And then media
style notifications,

00:44:41.530 --> 00:44:45.230
Android Wear support
via media style,

00:44:45.230 --> 00:44:47.540
and then media browser
service for Android audio

00:44:47.540 --> 00:44:52.460
and building your UI
based on your information.

00:44:52.460 --> 00:44:56.340
So feel free to reach out to me
on Google+ Twitter if you have

00:44:56.340 --> 00:44:57.014
any questions.

00:44:57.014 --> 00:44:58.430
Otherwise, I'll
be right down here

00:44:58.430 --> 00:45:00.370
for any questions in the room.

00:45:00.370 --> 00:45:01.660
Thanks so much.

00:45:01.660 --> 00:45:03.760
[APPLAUSE]

00:45:03.760 --> 00:45:07.410
[MUSIC PLAYING]

