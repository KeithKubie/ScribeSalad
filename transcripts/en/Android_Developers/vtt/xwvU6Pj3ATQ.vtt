WEBVTT
Kind: captions
Language: en

00:00:00.327 --> 00:00:02.660
IAN LAKE: When you have to
do something really important

00:00:02.660 --> 00:00:05.830
right now, unlocking your
phone, opening an app,

00:00:05.830 --> 00:00:08.760
and navigating to the right
place is a lot of work.

00:00:08.760 --> 00:00:11.810
On API 24 and higher
devices, though, there's

00:00:11.810 --> 00:00:15.150
an alternative-- a
Quick Settings tile.

00:00:15.150 --> 00:00:19.430
Now, your app can provide its
own tiles for quick access

00:00:19.430 --> 00:00:22.120
to critical functionality.

00:00:22.120 --> 00:00:24.930
Once users have manually
added your tile,

00:00:24.930 --> 00:00:27.120
they'll be able to view
your tile by swiping down

00:00:27.120 --> 00:00:30.390
the notification tray, either
as just an icon if you're

00:00:30.390 --> 00:00:34.420
in the first few spots, or
with up to two lines of text

00:00:34.420 --> 00:00:37.840
and the icon in the full
Quick Settings panel.

00:00:37.840 --> 00:00:40.190
Even better, the full
Quick Settings panel

00:00:40.190 --> 00:00:43.940
is available even if
the device is locked.

00:00:43.940 --> 00:00:46.250
Users can then tap on
your Quick Settings tile

00:00:46.250 --> 00:00:48.870
to trigger a callback, where
you can kick off some background

00:00:48.870 --> 00:00:52.570
work, show a dialog,
or start an activity.

00:00:52.570 --> 00:00:55.240
Now, that's pretty useful
for those really frequent

00:00:55.240 --> 00:00:57.370
or urgent tasks.

00:00:57.370 --> 00:01:01.940
And that's really what Quick
Settings tiles are all about.

00:01:01.940 --> 00:01:04.040
They're not just for
launching your app.

00:01:04.040 --> 00:01:06.510
You have a home
screen icon for that.

00:01:06.510 --> 00:01:09.310
So think about the
critical operations that

00:01:09.310 --> 00:01:12.670
can be very easily
understood with a simple icon

00:01:12.670 --> 00:01:16.300
and a quick tap or
through a simple dialog

00:01:16.300 --> 00:01:19.150
to provide a bit more context.

00:01:19.150 --> 00:01:21.170
Now, your Quick
Settings tile is going

00:01:21.170 --> 00:01:25.410
to be controlled and managed
through a tile service.

00:01:25.410 --> 00:01:27.730
Note that your app
name will be displayed

00:01:27.730 --> 00:01:30.750
right next to the name of
the Quick Settings tile.

00:01:30.750 --> 00:01:33.730
So give a descriptive
name and icon that

00:01:33.730 --> 00:01:36.360
hints at what it actually does.

00:01:36.360 --> 00:01:38.380
Space is pretty limited
here, so keep it

00:01:38.380 --> 00:01:41.120
under 18 characters
for the label.

00:01:41.120 --> 00:01:43.320
The icon here should
be solid white

00:01:43.320 --> 00:01:45.630
on a transparent background.

00:01:45.630 --> 00:01:48.220
Think of it as just
the alpha channel.

00:01:48.220 --> 00:01:50.760
Remember, you can
use a vector drawable

00:01:50.760 --> 00:01:55.470
as you'll only be enabled on
API 24 and higher devices.

00:01:55.470 --> 00:01:57.360
The lifecycle of a
Quick Settings tile

00:01:57.360 --> 00:02:00.220
is a bit different from
many services, though.

00:02:00.220 --> 00:02:02.280
And there's three main parts.

00:02:02.280 --> 00:02:06.160
First, when your tile is added
to the Quick Settings panel,

00:02:06.160 --> 00:02:11.730
the system will bind to your
service and call onTileAdded().

00:02:11.730 --> 00:02:14.630
After that, each time
your tile is visible,

00:02:14.630 --> 00:02:18.090
the system will yet again bind
to your tile service and call

00:02:18.090 --> 00:02:20.340
onStartListening().

00:02:20.340 --> 00:02:23.210
This is the point where you're
expected to keep the tile up

00:02:23.210 --> 00:02:26.945
to date all the way until
you receive a callback

00:02:26.945 --> 00:02:31.590
onStopListening(), which is when
the tile's no longer visible.

00:02:31.590 --> 00:02:33.950
These make a natural pairing
if you need to set up

00:02:33.950 --> 00:02:36.380
any listeners for changes.

00:02:36.380 --> 00:02:40.300
Finally, when-- I mean, if
the user were to ever remove

00:02:40.300 --> 00:02:43.650
your tile, you'd again have
the system bind to your service

00:02:43.650 --> 00:02:46.830
and call onTileRemoved().

00:02:46.830 --> 00:02:50.040
Keep in mind that the lifecycle
is controlled by the system

00:02:50.040 --> 00:02:50.710
here.

00:02:50.710 --> 00:02:52.320
So don't assume that
your service will

00:02:52.320 --> 00:02:55.330
persist between these states.

00:02:55.330 --> 00:02:57.640
There's another mode
called active mode.

00:02:57.640 --> 00:03:00.280
Read the blog post
linked in the description

00:03:00.280 --> 00:03:04.730
for how that differs from the
passive mode described here.

00:03:04.730 --> 00:03:08.960
OK, let's say we've received a
callback to onStartListening()

00:03:08.960 --> 00:03:10.940
and we want to update our tile.

00:03:10.940 --> 00:03:15.670
You'll call getQsTile to get
the tile instance associated

00:03:15.670 --> 00:03:18.010
with the tile service.

00:03:18.010 --> 00:03:21.620
This is what allows you
to update the icon, label,

00:03:21.620 --> 00:03:23.130
and content description.

00:03:23.130 --> 00:03:27.200
It also allows you to set
the state of the tile.

00:03:27.200 --> 00:03:29.710
There are three
states for a tile.

00:03:29.710 --> 00:03:34.160
Active corresponds with
the on or enabled state.

00:03:34.160 --> 00:03:37.700
Inactive is the off
or disabled state.

00:03:37.700 --> 00:03:40.070
And the system automatically
tints your icon

00:03:40.070 --> 00:03:42.330
to indicate the inactive state.

00:03:42.330 --> 00:03:45.590
Really useful if you have
a tile that naturally fits

00:03:45.590 --> 00:03:48.240
with an on-off toggle model.

00:03:48.240 --> 00:03:50.990
And finally, the
unavailable state--

00:03:50.990 --> 00:03:54.390
this would be appropriate if
your tile needs internet access

00:03:54.390 --> 00:03:56.670
and you're offline,
for instance.

00:03:56.670 --> 00:04:00.330
Users can't click on your
tile when it's unavailable,

00:04:00.330 --> 00:04:02.860
unlike the other two states.

00:04:02.860 --> 00:04:05.985
Just remember, once you've
updated everything you need,

00:04:05.985 --> 00:04:09.540
you need to call updateTile.

00:04:09.540 --> 00:04:13.990
This is what actually triggers
the system to update your tile.

00:04:13.990 --> 00:04:17.079
One other pretty core part
to a Quick Settings tile,

00:04:17.079 --> 00:04:19.709
though-- handling clicks.

00:04:19.709 --> 00:04:23.330
You'll get a callback to your
tile service's onClick method

00:04:23.330 --> 00:04:26.310
whenever the user
taps your tile.

00:04:26.310 --> 00:04:28.710
From here, you
have a few options.

00:04:28.710 --> 00:04:31.820
The most common case is you
do want to do some background

00:04:31.820 --> 00:04:35.260
work-- toggling some
internal state in your app

00:04:35.260 --> 00:04:39.080
and updating your tile
with the new state.

00:04:39.080 --> 00:04:43.760
You can also display a dialog
using the showDialog method.

00:04:43.760 --> 00:04:45.650
This is useful if
the tile switches

00:04:45.650 --> 00:04:47.950
between more than
two states or you

00:04:47.950 --> 00:04:51.310
feel the user needs
some additional context,

00:04:51.310 --> 00:04:54.250
such as what remote
device is being changed

00:04:54.250 --> 00:04:58.360
or that you need to download
or upload some information.

00:04:58.360 --> 00:05:01.600
There's also a startActivity
and Collapse method

00:05:01.600 --> 00:05:05.870
for starting an activity
directly from the tile service.

00:05:05.870 --> 00:05:07.720
Don't forget,
though-- users will

00:05:07.720 --> 00:05:11.630
be able to access your tile
even if the device is securely

00:05:11.630 --> 00:05:13.160
locked.

00:05:13.160 --> 00:05:17.460
If you have something sensitive,
consider checking isSecure()

00:05:17.460 --> 00:05:21.610
and modifying your behavior
to only show non-sensitive

00:05:21.610 --> 00:05:23.660
information.

00:05:23.660 --> 00:05:26.810
If the Quick Settings panel
is above the lock screen,

00:05:26.810 --> 00:05:29.490
isLocked() will return true.

00:05:29.490 --> 00:05:32.676
In this state, you won't be
able to use showDialog().

00:05:32.676 --> 00:05:35.000
And you'll have to make
sure any activity you

00:05:35.000 --> 00:05:40.780
start uses FLAG_SHOW_WHEN_LOCKED
to show above the lock screen.

00:05:40.780 --> 00:05:43.480
There is a convenience
method, unlockAndRun(),

00:05:43.480 --> 00:05:46.450
that will prompt the user
to unlock their device

00:05:46.450 --> 00:05:50.350
if your click handling
requires an unlocked device

00:05:50.350 --> 00:05:53.510
So Quick Settings
tiles are a great way

00:05:53.510 --> 00:05:58.200
to give quick access to critical
functionality in your app.

00:05:58.200 --> 00:06:01.020
Make sure they're intuitive
and save the user time

00:06:01.020 --> 00:06:03.225
throughout the entire
lifetime of the app.

00:06:03.225 --> 00:06:07.930
And you'll find them a great
way to build better apps.

