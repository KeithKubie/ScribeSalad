WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:03.780
How does DevOps fit into the world
of software development, and

00:00:03.780 --> 00:00:05.960
relate to things like
agile development and

00:00:05.960 --> 00:00:08.990
continuous integration that
have been around for a while?

00:00:08.990 --> 00:00:12.147
Agile software development is based
on iterative development, where

00:00:12.147 --> 00:00:15.886
requirements and solutions evolve via
collaboration between self-organized and

00:00:15.886 --> 00:00:17.610
cross-functional teams.

00:00:17.610 --> 00:00:21.290
The term was coined in 2001 when
the agile manifesto was formulated, so

00:00:21.290 --> 00:00:23.990
it's been around for
a bit longer than DevOps.

00:00:23.990 --> 00:00:26.790
But in many organizations
using agile development,

00:00:26.790 --> 00:00:29.330
not everybody has been
invited to the party.

00:00:29.330 --> 00:00:32.299
There's a good chance that you already
use some form of agile development in

00:00:32.299 --> 00:00:33.350
your organization.

00:00:33.350 --> 00:00:36.560
But it covers just a couple of
steps in the whole process.

00:00:36.560 --> 00:00:38.860
There are other steps
that need to be covered.

00:00:38.860 --> 00:00:42.560
Agile development generally covers
the steps from planning to coding

00:00:42.560 --> 00:00:44.280
to building and testing.

00:00:44.280 --> 00:00:46.140
And then iterating on the design again.

00:00:46.140 --> 00:00:50.130
It also emphasizes collaboration
between cross-functional teams.

00:00:50.130 --> 00:00:53.840
Testing here includes unit testing of
code as well as integration testing and

00:00:53.840 --> 00:00:55.880
user acceptance testing.

00:00:55.880 --> 00:00:59.320
But agile doesn't necessarily
speak to release process.

00:00:59.320 --> 00:01:03.145
And deployment and operation can look
very similar in an agile organization to

00:01:03.145 --> 00:01:05.700
in a traditional software organization.

00:01:05.700 --> 00:01:08.100
And that's not necessarily
the best solution.

00:01:08.100 --> 00:01:10.890
When we start to improve this,
by automating build and

00:01:10.890 --> 00:01:14.870
unit test processes, this is
covered by continuous integration.

00:01:14.870 --> 00:01:17.995
The automation process helps with
the iterative development and

00:01:17.995 --> 00:01:21.800
makes sure that changes or new features
do not break other functionality.

00:01:21.800 --> 00:01:25.930
Automating it all the way to the release
is covered by continuous delivery.

00:01:25.930 --> 00:01:30.160
Continuous delivery pipeline also makes
it easy to control user testing and

00:01:30.160 --> 00:01:32.680
release the software
when all the tests pass.

00:01:32.680 --> 00:01:35.480
Now, to make sure it's possible
to deploy all these releases

00:01:35.480 --> 00:01:38.120
into production to thousands or
maybe millions of users,

00:01:38.120 --> 00:01:41.770
there has to be an automated
scalable way to run operations.

00:01:41.770 --> 00:01:43.990
And to make sure that
everything runs smoothly and

00:01:43.990 --> 00:01:47.650
to improve the whole process over time
it's necessary to measure it all.

00:01:47.650 --> 00:01:49.180
But for
that measurement to be actionable,

00:01:49.180 --> 00:01:51.580
there has to be good communication and
a culture of sharing and

00:01:51.580 --> 00:01:53.820
collaborating between
all the teams involved.

00:01:53.820 --> 00:01:57.170
Adding automation to this system is
good, but it's only when you combine it

00:01:57.170 --> 00:02:00.490
with a culture of communication and
collaboration between teams that you

00:02:00.490 --> 00:02:03.150
really have the DevOps approach
to the software life cycle.

