WEBVTT
Kind: captions
Language: en

00:00:00.630 --> 00:00:01.862
SHAAN: Welcome, everybody.

00:00:01.862 --> 00:00:02.570
My name is Shaan.

00:00:02.570 --> 00:00:04.050
DAKE: Hi, my name's Dake.

00:00:04.050 --> 00:00:05.390
KEYVAN: Hi, my name's Keyvan.

00:00:05.390 --> 00:00:07.930
SHAAN: We're engineers
in the Android TV Team,

00:00:07.930 --> 00:00:10.360
and we all work in
the Leanback Library.

00:00:10.360 --> 00:00:12.490
Just a few years back,
development on TV

00:00:12.490 --> 00:00:14.820
was considered
difficult, exclusively

00:00:14.820 --> 00:00:17.170
available to TV manufacturers.

00:00:17.170 --> 00:00:19.120
But times have
changed now, and TVs

00:00:19.120 --> 00:00:22.260
are starting to evolve at
the hands of developers.

00:00:22.260 --> 00:00:25.270
What was considered a black box
running some archaic software

00:00:25.270 --> 00:00:28.130
is now running our
familiar Android OS.

00:00:28.130 --> 00:00:30.120
If you know how to
build apps for Android,

00:00:30.120 --> 00:00:32.594
you're already ready
to build apps for TV.

00:00:32.594 --> 00:00:34.790
Leanback is the
recommended library

00:00:34.790 --> 00:00:37.350
for building apps on
TV, and today we'll

00:00:37.350 --> 00:00:39.640
show you how you can
Leanback Library to build

00:00:39.640 --> 00:00:41.220
some amazing experiences on TV.

00:00:45.817 --> 00:00:47.275
When building apps
for TV, you have

00:00:47.275 --> 00:00:49.470
to keep in mind
users are already

00:00:49.470 --> 00:00:53.190
used to interacting
with TV for a long time.

00:00:53.190 --> 00:00:56.030
The central guiding principle
when building apps for TV

00:00:56.030 --> 00:01:00.390
is to strike a balance between
consistency and flexibility.

00:01:00.390 --> 00:01:02.290
That is, we want to
empower the developer

00:01:02.290 --> 00:01:05.360
to build unique experiences
while at the same time

00:01:05.360 --> 00:01:07.670
maintain consistency
across apps,

00:01:07.670 --> 00:01:14.089
thereby eliminate the need for
users to learn to use new apps.

00:01:14.089 --> 00:01:16.130
And if you think about
it, Android phones and TVs

00:01:16.130 --> 00:01:17.370
are not that different.

00:01:17.370 --> 00:01:20.286
They both part of
the same Android OS.

00:01:20.286 --> 00:01:21.660
But there are two
key differences

00:01:21.660 --> 00:01:23.940
that you should keep in
mind when building apps.

00:01:23.940 --> 00:01:26.800
One, TVs don't
support touchscreen.

00:01:26.800 --> 00:01:28.520
And second, users
are usually seated

00:01:28.520 --> 00:01:30.670
a few feet behind the TV.

00:01:30.670 --> 00:01:34.900
As such, the navigation model
for TV is quite different.

00:01:34.900 --> 00:01:37.496
Usually you can go
top, down, left,

00:01:37.496 --> 00:01:38.620
right from any given point.

00:01:41.330 --> 00:01:43.130
In the next 45
minutes, we'll walk you

00:01:43.130 --> 00:01:45.463
through different components
that come with the Leanback

00:01:45.463 --> 00:01:48.450
Library, the features that we
have added to those components,

00:01:48.450 --> 00:01:50.370
and some of the other
underutilized features

00:01:50.370 --> 00:01:51.328
of existing components.

00:01:54.060 --> 00:01:57.690
Now, Leanback provides the
basic building blocks for UI.

00:01:57.690 --> 00:02:02.170
It comes with support for Cards,
Rows, List of Rows, Actions,

00:02:02.170 --> 00:02:04.390
Grids, Fragments.

00:02:04.390 --> 00:02:05.810
Using these basic
building blocks,

00:02:05.810 --> 00:02:09.120
you can build complex
UI hierarchies.

00:02:09.120 --> 00:02:10.680
But not just basic
building blocks,

00:02:10.680 --> 00:02:12.790
it also makes heavy
use of transition

00:02:12.790 --> 00:02:14.750
to guide the user
through your flow.

00:02:18.890 --> 00:02:20.780
Now, no matter what
app you are building,

00:02:20.780 --> 00:02:23.390
you'd want to display content
in a way that's intuitive

00:02:23.390 --> 00:02:25.440
and easily accessible.

00:02:25.440 --> 00:02:28.280
Leanback's answer to
this is BrowseFragment.

00:02:28.280 --> 00:02:31.010
It displays content
in a set of rows.

00:02:31.010 --> 00:02:32.310
It consists of three things.

00:02:32.310 --> 00:02:34.300
It has the HeadersFragment
to the left,

00:02:34.300 --> 00:02:37.380
which has the navigation menu
arranged in a vertical list.

00:02:37.380 --> 00:02:39.970
It has the title bar to the top,
which displays your branding

00:02:39.970 --> 00:02:41.209
information in a row.

00:02:41.209 --> 00:02:43.750
And then it has the RowsFragment
to the right, which displays

00:02:43.750 --> 00:02:46.291
your content in a set of rows.

00:02:46.291 --> 00:02:49.100
Now, BrowseFragment does a
lot of heavy lifting for you.

00:02:49.100 --> 00:02:50.860
It runs a transition,
it takes care

00:02:50.860 --> 00:02:52.818
of the coordination
between the HeadersFragment

00:02:52.818 --> 00:02:55.310
and the RowsFragment,
it also shows and hides

00:02:55.310 --> 00:02:59.130
the TitleView at
appropriate times.

00:02:59.130 --> 00:03:00.600
It is very comprehensive.

00:03:00.600 --> 00:03:04.291
With just a few lines of code,
you can get up and running.

00:03:04.291 --> 00:03:06.040
But you don't want to
build a generic app.

00:03:06.040 --> 00:03:07.470
You want to build
something that is unique,

00:03:07.470 --> 00:03:09.594
something that has character,
something that people

00:03:09.594 --> 00:03:10.895
can spot from a distance.

00:03:10.895 --> 00:03:13.270
Next, we'll walk you through
different techniques you can

00:03:13.270 --> 00:03:15.340
employ to make your app unique.

00:03:18.980 --> 00:03:21.040
But before, this is an
example implementation

00:03:21.040 --> 00:03:22.060
of BrowseFragment.

00:03:22.060 --> 00:03:24.480
As you can see, with
just a few lines of code,

00:03:24.480 --> 00:03:25.773
you have a functional app.

00:03:25.773 --> 00:03:28.770
All you have to do is set
the branding information

00:03:28.770 --> 00:03:31.280
with a setBadgeDurable call.

00:03:31.280 --> 00:03:33.370
Then you load the data
and populate the data

00:03:33.370 --> 00:03:37.220
and set the data in the code by
calling the setAdapter method.

00:03:37.220 --> 00:03:38.910
And finally, you
set your listeners.

00:03:38.910 --> 00:03:43.372
That's all you need to do in
order to have a functional app.

00:03:43.372 --> 00:03:44.830
One caveat you want
to keep in mind

00:03:44.830 --> 00:03:47.310
is if you want to run
the EntranceTransition,

00:03:47.310 --> 00:03:49.709
you want to call it the first
time you go into your app.

00:03:49.709 --> 00:03:51.750
And we'll talk about this
in a little more detail

00:03:51.750 --> 00:03:52.490
in a later slide.

00:03:55.240 --> 00:03:56.740
Remember I mentioned
HeadersFragment

00:03:56.740 --> 00:04:00.515
appears to the left, has the
list of navigation menus?

00:04:00.515 --> 00:04:02.650
Now, that is great, but
what if you wanted to group

00:04:02.650 --> 00:04:04.560
your navigation menus?

00:04:04.560 --> 00:04:06.560
For this, the latest
version of Leanback Library

00:04:06.560 --> 00:04:10.920
has support for two new rows,
SectionRow and DividerRow.

00:04:10.920 --> 00:04:13.540
SectionRow, which is the
title, marks the beginning

00:04:13.540 --> 00:04:15.650
of a group of navigation menus.

00:04:15.650 --> 00:04:19.630
And DividerRow marks
the ending of the group.

00:04:19.630 --> 00:04:23.000
The way to add them is as simple
as when you're adding data

00:04:23.000 --> 00:04:24.940
to your adapter,
you're going to inject

00:04:24.940 --> 00:04:28.690
those rows in the same order
that you want them to appear

00:04:28.690 --> 00:04:30.240
in the HeadersFragment.

00:04:30.240 --> 00:04:30.740
That's it.

00:04:33.380 --> 00:04:36.340
Now, HeadersFragment is
an optional component.

00:04:36.340 --> 00:04:38.480
You can either enable
it or disable it.

00:04:38.480 --> 00:04:41.360
And by doing so, your app will
have a very different look

00:04:41.360 --> 00:04:43.380
and feel to it.

00:04:43.380 --> 00:04:46.090
The way to do that is by
calling setHeadersState function

00:04:46.090 --> 00:04:49.160
with either HeadersState
enabled or disabled parameter.

00:04:53.552 --> 00:04:57.230
Leanback, in an effort to
separate styling from logic,

00:04:57.230 --> 00:05:00.940
makes heavy use of
Android theming.

00:05:00.940 --> 00:05:04.036
Every component in Leanback
comes with its own theme.

00:05:04.036 --> 00:05:07.360
Now, if you want to customize
a component, all you have to do

00:05:07.360 --> 00:05:09.650
is create a style that
extends from the theme

00:05:09.650 --> 00:05:13.370
and override the attributes
that you care about.

00:05:13.370 --> 00:05:15.000
Here is an example
of a BrowseFragment.

00:05:15.000 --> 00:05:17.860
It doesn't even look like
a classical BrowseFragment.

00:05:17.860 --> 00:05:20.790
Here we have offset the content
to the bottom of the page

00:05:20.790 --> 00:05:26.060
by using a combination of
MarginTop and PaddingStart.

00:05:26.060 --> 00:05:29.170
You see, the power of
theme is, without changing

00:05:29.170 --> 00:05:32.210
a single line of code, just
by overriding two attributes,

00:05:32.210 --> 00:05:35.266
you can give a different
look and feel to your app.

00:05:35.266 --> 00:05:37.910
Leanback comes with an extensive
set of Styles and Themes.

00:05:37.910 --> 00:05:40.380
We encourage you to take a
look at the Style [INAUDIBLE]

00:05:40.380 --> 00:05:43.470
for Leanback and see what makes
sense for you to override.

00:05:47.725 --> 00:05:50.100
The TitleView, which appears
on the top of BrowseFragment

00:05:50.100 --> 00:05:52.320
is where you just put
your branding information.

00:05:52.320 --> 00:05:56.080
The classical TitleView
displays a search icon, a title,

00:05:56.080 --> 00:05:57.722
or a logo.

00:05:57.722 --> 00:05:59.580
Now, that is great,
but what if you

00:05:59.580 --> 00:06:02.420
want to display your
own custom view?

00:06:02.420 --> 00:06:06.285
The latest version of Leanback
supports Custom TitleView.

00:06:06.285 --> 00:06:08.576
The first thing you want to
do is create a custom view.

00:06:08.576 --> 00:06:11.710
Second, you want to create
a tight layout file which

00:06:11.710 --> 00:06:13.797
uses your custom view.

00:06:13.797 --> 00:06:16.130
And then you're going to
override the Browse [INAUDIBLE]

00:06:16.130 --> 00:06:21.170
view layout property with the
location of your layout file.

00:06:21.170 --> 00:06:23.390
As soon as you do that,
BrowseFragment will pick up

00:06:23.390 --> 00:06:25.120
the layout you
created and render

00:06:25.120 --> 00:06:28.990
that in the top section
of BrowseFragment.

00:06:28.990 --> 00:06:30.400
As a final step,
though, you will

00:06:30.400 --> 00:06:35.050
have to implement the TitleView
adapter provider interface.

00:06:35.050 --> 00:06:36.700
The TitleView
adapter interface is

00:06:36.700 --> 00:06:41.390
what BrowseFragment uses to
communicate with your fragment.

00:06:41.390 --> 00:06:44.285
It's used to tell your view
to show or hide itself.

00:06:47.707 --> 00:06:51.040
Leanback comes with a default
implementation of TitleView,

00:06:51.040 --> 00:06:53.180
which implements the
TitleView adapter.

00:06:53.180 --> 00:06:54.710
We encourage you to take
a look at the source code

00:06:54.710 --> 00:06:56.001
and see how that's implemented.

00:06:59.260 --> 00:07:01.581
We talk to a lot of
developers-- TV app developers--

00:07:01.581 --> 00:07:03.580
and there was a growing
consensus about the need

00:07:03.580 --> 00:07:05.085
for further customization.

00:07:05.085 --> 00:07:06.520
Now, BrowseFragment is great.

00:07:06.520 --> 00:07:08.560
It displays item
in a set of rows.

00:07:08.560 --> 00:07:11.030
But what if you wanted to
do something more custom?

00:07:11.030 --> 00:07:13.240
Maybe you have a fragment
for your phone app

00:07:13.240 --> 00:07:15.990
that you want to
repurpose for your TV app.

00:07:15.990 --> 00:07:18.110
Or maybe you want to have
a completely different

00:07:18.110 --> 00:07:21.200
representation of
your media items.

00:07:21.200 --> 00:07:23.530
For these use
cases, we introduced

00:07:23.530 --> 00:07:28.530
what's called PageRow,
which is a subclass of Row.

00:07:28.530 --> 00:07:30.899
With PageRow, you can
have your custom fragment

00:07:30.899 --> 00:07:32.190
rendered inside BrowseFragment.

00:07:35.390 --> 00:07:39.650
Typically, developers will pair
the header item which ListRow,

00:07:39.650 --> 00:07:41.660
which represents a
collection of items.

00:07:41.660 --> 00:07:43.780
Now, BrowseFragment
internally maintains

00:07:43.780 --> 00:07:47.580
a registry which
maps each Row type

00:07:47.580 --> 00:07:49.510
to a corresponding factory.

00:07:49.510 --> 00:07:52.690
In this specific case,
we mapped the ListRow

00:07:52.690 --> 00:07:55.050
to RowsFragment, which
knows how to render

00:07:55.050 --> 00:08:00.040
each individual item in a set
of cards in a horizontal grid.

00:08:00.040 --> 00:08:03.760
For PageRows, you want to pair
each header item with a Page

00:08:03.760 --> 00:08:08.260
Row, and then register your
factory with BrowseFragment.

00:08:08.260 --> 00:08:10.600
Then as soon as
BrowseFragment sees a PageRow,

00:08:10.600 --> 00:08:12.630
it's going to look
into its registry,

00:08:12.630 --> 00:08:15.050
find out your factory, and
then using the factory,

00:08:15.050 --> 00:08:17.060
it's going to
instantiate your fragment

00:08:17.060 --> 00:08:20.494
and then render that in
the main content area.

00:08:20.494 --> 00:08:22.410
With that being said,
we will jump into a demo

00:08:22.410 --> 00:08:23.385
and see this in action.

00:08:26.240 --> 00:08:27.620
KEYVAN: Thank you, Shaan.

00:08:27.620 --> 00:08:29.850
So here I will demo a
new sample app which

00:08:29.850 --> 00:08:32.429
we developed for Android TV.

00:08:32.429 --> 00:08:34.190
We just open sourced
this app yesterday,

00:08:34.190 --> 00:08:36.730
and the URL to GitHub
will be provided

00:08:36.730 --> 00:08:39.159
at the end of this presentation.

00:08:39.159 --> 00:08:41.559
But for demo purposes here,
we are using the Android TV

00:08:41.559 --> 00:08:43.539
Emulator.

00:08:43.539 --> 00:08:46.360
So the home screen of this
app is a BrowseFragment

00:08:46.360 --> 00:08:49.940
which consists of a
set of different Cards.

00:08:49.940 --> 00:08:51.894
Each Card here represents
a separate component

00:08:51.894 --> 00:08:52.560
within Leanback.

00:08:55.770 --> 00:08:58.352
I will start off this demo
by showing different examples

00:08:58.352 --> 00:08:59.185
of custom fragments.

00:09:04.160 --> 00:09:06.750
This BrowseFragment consists
of four different custom

00:09:06.750 --> 00:09:08.255
fragments.

00:09:08.255 --> 00:09:10.380
When I switch within the
rows, a different fragment

00:09:10.380 --> 00:09:11.490
will be loaded each time.

00:09:15.370 --> 00:09:19.050
The first fragment displays
images in a vertical grid.

00:09:19.050 --> 00:09:21.630
Here, for example, I
can navigate images

00:09:21.630 --> 00:09:22.700
across different rows.

00:09:26.320 --> 00:09:29.890
The next row is an example
of a standard RowsFragment

00:09:29.890 --> 00:09:33.080
that is embedded within
a custom fragment.

00:09:33.080 --> 00:09:35.550
Here you'll see
several icons that are

00:09:35.550 --> 00:09:37.150
organized into multiple rows.

00:09:41.160 --> 00:09:44.460
The next example shows
the setting icons

00:09:44.460 --> 00:09:46.820
embedded within two rows.

00:09:51.240 --> 00:09:55.300
And finally, we have an example
where a WebView is embedded

00:09:55.300 --> 00:09:57.440
within a custom fragment.

00:09:57.440 --> 00:09:59.970
Unfortunately, the
Wi-Fi connectivity

00:09:59.970 --> 00:10:03.100
is not very great here, so
the part that requires network

00:10:03.100 --> 00:10:03.740
will not play.

00:10:03.740 --> 00:10:05.990
But just in case,
you know, there's

00:10:05.990 --> 00:10:08.890
going to be a full cool
page displayed on the right.

00:10:13.010 --> 00:10:17.710
So this example showed that we
can embed any custom fragments

00:10:17.710 --> 00:10:20.210
inside a BrowseFragment.

00:10:20.210 --> 00:10:24.330
You might have also noticed that
we have a TitleView on the top.

00:10:24.330 --> 00:10:27.110
We can embed any
custom widget in here.

00:10:27.110 --> 00:10:30.160
For example, here we are
using a custom layout

00:10:30.160 --> 00:10:33.030
with a text view
and an analog clock.

00:10:33.030 --> 00:10:35.330
Thanks.

00:10:35.330 --> 00:10:36.830
SHAAN: Thanks, Keyvan.

00:10:36.830 --> 00:10:39.195
So the demo Gods are
not in favor of us.

00:10:39.195 --> 00:10:41.570
Trust me, the web page will
load if you embed the WebView

00:10:41.570 --> 00:10:43.720
inside the CustomFragment.

00:10:43.720 --> 00:10:45.760
Anyway, so we talked
about CustomFragment.

00:10:45.760 --> 00:10:48.600
Now we'll show you how you
can wire your CustomFragment

00:10:48.600 --> 00:10:50.320
inside BrowseFragment,
and then we'll

00:10:50.320 --> 00:10:52.180
show you some snippets of code.

00:10:52.180 --> 00:10:53.860
Remember, I mentioned
BrowseFragment

00:10:53.860 --> 00:10:56.770
has an internal registry
which maps each row type

00:10:56.770 --> 00:10:58.520
to a corresponding factory.

00:10:58.520 --> 00:11:00.420
Now, when you supply
a page row, it's

00:11:00.420 --> 00:11:03.110
going to look into the registry,
find the factory corresponding

00:11:03.110 --> 00:11:05.020
to the page row,
and use that factory

00:11:05.020 --> 00:11:07.530
to instantiate your fragment.

00:11:07.530 --> 00:11:09.120
Now, your fragment
must implement

00:11:09.120 --> 00:11:11.290
MainFragmentAdapterProvider.

00:11:11.290 --> 00:11:13.110
This is the interface
that BrowseFragment

00:11:13.110 --> 00:11:16.605
uses to get a hold of
MainFragmentAdapter.

00:11:16.605 --> 00:11:18.630
Now, you may ask,
what is that adapter?

00:11:18.630 --> 00:11:21.420
Well, MainFragmentAdapter
is the interface

00:11:21.420 --> 00:11:25.070
that BrowseFragment uses to
communicate with your fragment.

00:11:25.070 --> 00:11:28.010
For events such as, like,
I'm starting the animation

00:11:28.010 --> 00:11:31.020
or I'm running animation
or the animation is over.

00:11:31.020 --> 00:11:32.634
Things like that.

00:11:32.634 --> 00:11:34.300
Now, there is another
optional component

00:11:34.300 --> 00:11:37.080
called MainFragmentRowsAdapter.

00:11:37.080 --> 00:11:42.810
This is a special case that
is only used by RowsFragment.

00:11:42.810 --> 00:11:46.040
This is used by BrowseFragment
to communicate row-based events

00:11:46.040 --> 00:11:49.860
so that it can sync
both the HeadersFragment

00:11:49.860 --> 00:11:52.280
and RowsFragment.

00:11:52.280 --> 00:11:54.830
Now, RowsFragment comes
with the implementation

00:11:54.830 --> 00:11:55.900
for this adapter.

00:11:55.900 --> 00:11:58.108
We'll encourage you to take
a look at the source code

00:11:58.108 --> 00:11:59.780
and see how that's implemented.

00:11:59.780 --> 00:12:02.050
Now, these are all different
ways BrowseFragment

00:12:02.050 --> 00:12:03.520
can talk to your fragment.

00:12:03.520 --> 00:12:06.880
But what if your fragment wanted
to talk to BrowseFragment?

00:12:06.880 --> 00:12:09.190
For that we provide
FragmentHost,

00:12:09.190 --> 00:12:11.107
which represents
all possible actions

00:12:11.107 --> 00:12:13.440
that your fragment is allowed
to take on BrowseFragment.

00:12:16.300 --> 00:12:18.079
Now let's take a
look at some code.

00:12:18.079 --> 00:12:19.620
The first thing you
want to do if you

00:12:19.620 --> 00:12:23.060
want to implement CustomFragment
is implement FragmentFactory.

00:12:23.060 --> 00:12:27.730
All you have to do is override
one method, CreateFragment.

00:12:27.730 --> 00:12:30.880
Now remember, the data that's
passed into CreateFragment

00:12:30.880 --> 00:12:34.420
is the currently selected
row, which is either a page

00:12:34.420 --> 00:12:36.180
row or a subclass of page row.

00:12:36.180 --> 00:12:38.110
So you can type
[INAUDIBLE] to a page row

00:12:38.110 --> 00:12:39.920
and then inspect
the data in there

00:12:39.920 --> 00:12:43.887
and return the appropriate
instance of the fragment.

00:12:43.887 --> 00:12:46.220
Once you do that, then you
want to register your factory

00:12:46.220 --> 00:12:48.130
with BrowseFragment.

00:12:48.130 --> 00:12:53.100
And we recommend you do that in
the constructor of your class.

00:12:53.100 --> 00:12:57.390
Next you want to implement the
MainFragmentAdapterProvider

00:12:57.390 --> 00:13:00.602
to return an instance
of MainFragmentAdapter.

00:13:00.602 --> 00:13:02.310
This is the interface
that BrowseFragment

00:13:02.310 --> 00:13:06.380
uses to communicate
with your fragment.

00:13:06.380 --> 00:13:08.390
As a final step, you
have to implement

00:13:08.390 --> 00:13:10.249
the MainFragmentAdapter.

00:13:10.249 --> 00:13:12.540
Now, BrowseFragment comes
with a default implementation

00:13:12.540 --> 00:13:16.730
of MainFragmentAdapter, but if
that doesn't satisfy your need,

00:13:16.730 --> 00:13:21.190
you can extend from it
and override the behavior

00:13:21.190 --> 00:13:23.020
that you care about.

00:13:23.020 --> 00:13:25.080
The general pattern
for implementing

00:13:25.080 --> 00:13:28.420
this is the adapter should
act like a passthrough

00:13:28.420 --> 00:13:30.190
to your fragment.

00:13:30.190 --> 00:13:34.630
Here, we override the
setEntranceTransitionState

00:13:34.630 --> 00:13:37.840
method and then callback
into the fragment.

00:13:37.840 --> 00:13:40.810
The fragment in turn,
based on the Boolean value,

00:13:40.810 --> 00:13:43.370
sets the visibility of
the individual views.

00:13:43.370 --> 00:13:45.480
So the transition system
can notice the difference

00:13:45.480 --> 00:13:49.192
and run the
appropriate transition.

00:13:49.192 --> 00:13:50.150
It's as simple as that.

00:13:53.210 --> 00:13:56.040
So that's a lot
about CustomFragment.

00:13:56.040 --> 00:13:58.530
Now let's talk about Cards.

00:13:58.530 --> 00:14:02.962
Cards are another key
component of Leanback Library.

00:14:02.962 --> 00:14:04.920
One of the key classes
that comes with Leanback

00:14:04.920 --> 00:14:06.350
is called ImageCardView.

00:14:06.350 --> 00:14:07.940
That's used to render cards.

00:14:07.940 --> 00:14:09.670
It consists of two areas.

00:14:09.670 --> 00:14:12.120
There is the Image Area which
displays your image on top,

00:14:12.120 --> 00:14:14.010
and there's the Info
Area at the bottom which

00:14:14.010 --> 00:14:15.000
displays your content.

00:14:15.000 --> 00:14:19.740
It say Title and Description
and an optional icon.

00:14:19.740 --> 00:14:22.810
Now, whatever app you're
building, if you're displaying

00:14:22.810 --> 00:14:26.400
audio, video, or whatever
media you want to display,

00:14:26.400 --> 00:14:28.850
it'll be displayed in Cards.

00:14:28.850 --> 00:14:31.100
But just because you are
rendering everything in Cards

00:14:31.100 --> 00:14:33.900
doesn't mean all your Cards
will have to look alike.

00:14:33.900 --> 00:14:38.200
You can have different types of
Cards in the same application.

00:14:38.200 --> 00:14:40.070
And the way to do
that is by creating

00:14:40.070 --> 00:14:44.080
a style that extends
from ImageCardView style

00:14:44.080 --> 00:14:47.730
and overriding the attribute
that you care about.

00:14:47.730 --> 00:14:51.410
One such interesting attribute
is the lbImageCardViewType.

00:14:51.410 --> 00:14:55.590
This controls what content
gets rendered in the Card.

00:14:55.590 --> 00:14:58.570
It takes four possible values,
Title, Content, Icon Right,

00:14:58.570 --> 00:15:00.990
and Icon Left, and these
are not mutually exclusive.

00:15:03.731 --> 00:15:05.730
Here are three Cards with
three different values

00:15:05.730 --> 00:15:06.900
for this attribute.

00:15:06.900 --> 00:15:10.490
The one on the left displays
the Title in the Info Area.

00:15:10.490 --> 00:15:13.240
The one in the middle displays
Title and the Content.

00:15:13.240 --> 00:15:15.740
And the one on the very right
displays Title, Content,

00:15:15.740 --> 00:15:18.030
and the Icon on the Left.

00:15:18.030 --> 00:15:20.540
You can see just by
creating new styles

00:15:20.540 --> 00:15:25.010
you can have different
representation for your Cards.

00:15:25.010 --> 00:15:27.920
Another interesting
attribute is cardType.

00:15:27.920 --> 00:15:30.400
This controls the positioning
of Info Area in relation

00:15:30.400 --> 00:15:32.457
to your Image Area.

00:15:32.457 --> 00:15:34.540
It has three possible
values, infoUnder, infoOver,

00:15:34.540 --> 00:15:36.570
and mainOnly.

00:15:36.570 --> 00:15:39.180
And here are three cards which
use the three different values

00:15:39.180 --> 00:15:40.990
for this attribute.

00:15:40.990 --> 00:15:43.730
The first one, this is
a default configuration.

00:15:43.730 --> 00:15:47.850
It displays the Info Area
underneath the Image View.

00:15:47.850 --> 00:15:50.880
The second one, infoOver,
lines up the Info Area

00:15:50.880 --> 00:15:52.770
with the bottom
of the Image Card.

00:15:52.770 --> 00:15:56.410
So Info Area appears to
be on top of the card.

00:15:56.410 --> 00:16:00.240
And the final one, mainOnly,
hides the Info Area altogether.

00:16:00.240 --> 00:16:01.740
In this case, you
are free to supply

00:16:01.740 --> 00:16:03.932
any custom layout you want.

00:16:03.932 --> 00:16:05.830
In this specific
case, we are using

00:16:05.830 --> 00:16:07.640
a custom layout which
displays the Content

00:16:07.640 --> 00:16:08.760
to the right of the image.

00:16:12.430 --> 00:16:14.460
Now, once you create
your style, there

00:16:14.460 --> 00:16:17.590
are two more steps you
need to do in order

00:16:17.590 --> 00:16:19.270
to create Custom Cards.

00:16:19.270 --> 00:16:21.410
First, you're going
to create a theme

00:16:21.410 --> 00:16:23.300
and override the
ImageCardViewStyle

00:16:23.300 --> 00:16:26.736
attribute with the
style you just created.

00:16:26.736 --> 00:16:30.610
You can choose to override
other attributes if you want to.

00:16:30.610 --> 00:16:34.260
Once you do that, then you can
instantiate your ImageCardView

00:16:34.260 --> 00:16:36.120
and use the theme
you just created

00:16:36.120 --> 00:16:38.070
using ContextThemeWrapper.

00:16:38.070 --> 00:16:38.940
That's it.

00:16:38.940 --> 00:16:43.340
That's all you need to do in
order to create Custom Cards.

00:16:43.340 --> 00:16:45.590
Now, there are other attributes
that you can override,

00:16:45.590 --> 00:16:48.760
you can play around with and
see if that kind of gives you

00:16:48.760 --> 00:16:52.012
a little more control over the
look and feel of the Cards.

00:16:52.012 --> 00:16:54.220
We'll encourage you to take
a look at the Style Files

00:16:54.220 --> 00:16:57.080
and see what makes sense
for you to override.

00:16:57.080 --> 00:17:00.890
Now, just in case ImageCardView
doesn't satisfy your need,

00:17:00.890 --> 00:17:02.470
you can also look
at BaseCardView,

00:17:02.470 --> 00:17:04.750
which is the base
class for ImageCardView

00:17:04.750 --> 00:17:07.319
and gives you control
over both the layout

00:17:07.319 --> 00:17:11.717
as well as the content that
is rendered on the Card.

00:17:11.717 --> 00:17:13.800
With that being said, we'll
jump into a quick demo

00:17:13.800 --> 00:17:15.383
and show you different
kinds of Cards.

00:17:20.619 --> 00:17:23.160
KEYVAN: Next I'm going to demo
different types of Cards here.

00:17:25.770 --> 00:17:28.280
This BrowseFragment
shows several variations

00:17:28.280 --> 00:17:31.548
of ImageCardView
and BaseCardView.

00:17:31.548 --> 00:17:34.620
In the first row, we
have ImageCardView where

00:17:34.620 --> 00:17:37.250
the Title spans a single line.

00:17:37.250 --> 00:17:38.950
Here we see some
examples of this Card.

00:17:41.640 --> 00:17:44.120
The second row
displays ImageCardView,

00:17:44.120 --> 00:17:47.070
but the Title spans two
lines, and the Rating Icon

00:17:47.070 --> 00:17:47.875
is to the left.

00:17:51.750 --> 00:17:53.880
The next one is an example
of ImageCardView where

00:17:53.880 --> 00:17:55.920
all the components are present.

00:17:55.920 --> 00:17:59.360
We have the ImageView on
top, the Title, the Rating

00:17:59.360 --> 00:18:01.806
Icon to the left, and the
Content, which is the price,

00:18:01.806 --> 00:18:02.555
here to the right.

00:18:05.500 --> 00:18:07.640
We have more variations
of ImageCardViews

00:18:07.640 --> 00:18:08.880
in the next couple of rows.

00:18:11.930 --> 00:18:14.600
But if these ImageCardViews
don't satisfy your needs

00:18:14.600 --> 00:18:16.610
and you need to have more
control over the card

00:18:16.610 --> 00:18:20.270
appearance, here are
some advanced examples.

00:18:20.270 --> 00:18:22.200
In this row we have
examples of BaseCardView

00:18:22.200 --> 00:18:25.040
with the mainOnly card type.

00:18:25.040 --> 00:18:28.117
This one uses a custom layout
with the content placed

00:18:28.117 --> 00:18:29.200
to the right of the image.

00:18:32.280 --> 00:18:34.720
The next row is another
example of BaseCardView

00:18:34.720 --> 00:18:36.990
with a mainOnly card type.

00:18:36.990 --> 00:18:39.480
Here, however, instead
of the image on the top,

00:18:39.480 --> 00:18:42.820
you are using a Text View.

00:18:42.820 --> 00:18:47.030
We have more variations of
ImageCardView in the next row.

00:18:47.030 --> 00:18:49.880
And finally, we
have ImageCardView

00:18:49.880 --> 00:18:53.410
where we have provided
onFocusChange listener.

00:18:53.410 --> 00:18:55.310
You'll notice that
the background changes

00:18:55.310 --> 00:18:56.400
as a card receives focus.

00:18:59.120 --> 00:18:59.620
Thank you.

00:19:03.424 --> 00:19:04.340
SHAAN: Thanks, Keyvan.

00:19:04.340 --> 00:19:05.980
So we talked a lot
about BrowseFragment

00:19:05.980 --> 00:19:07.720
and CustomFragment and Cards.

00:19:07.720 --> 00:19:09.700
Next, Dake is going
to talk about the best

00:19:09.700 --> 00:19:11.260
practices for
Entrance Transition

00:19:11.260 --> 00:19:13.468
and I'll also talk about
some of the other components

00:19:13.468 --> 00:19:14.432
in Leanback.

00:19:14.432 --> 00:19:15.390
DAKE: Thank you, Shaan.

00:19:17.980 --> 00:19:19.860
Animations.

00:19:19.860 --> 00:19:24.100
So BrowseFragment is usually
inside the first activity

00:19:24.100 --> 00:19:28.740
of your app, which might
take a while to load data.

00:19:28.740 --> 00:19:31.080
So the user will
see a blank screen

00:19:31.080 --> 00:19:33.750
when data is being loaded.

00:19:33.750 --> 00:19:36.700
If your app loads
data row-by-row,

00:19:36.700 --> 00:19:40.890
item-by-item, the user might
see multiple screen updates

00:19:40.890 --> 00:19:43.350
during data being loaded.

00:19:43.350 --> 00:19:46.810
To solve these
problems, BrowseFragment

00:19:46.810 --> 00:19:50.190
has a best practice called
Entrance Transition.

00:19:50.190 --> 00:19:53.330
This is one of the less known
feature of Leanback Library

00:19:53.330 --> 00:19:56.890
I'm going to talk about today.

00:19:56.890 --> 00:20:01.450
Entrance Transition gives
user a visual feedback

00:20:01.450 --> 00:20:03.290
that the data is being loaded.

00:20:03.290 --> 00:20:06.700
As you can see, there's
a spinning icon there.

00:20:09.610 --> 00:20:13.160
Once the data finish
loading, BrowseFragment

00:20:13.160 --> 00:20:16.230
will slide content
from two sides.

00:20:16.230 --> 00:20:17.795
Next, Keyvan's
going to do a demo.

00:20:17.795 --> 00:20:18.753
SHAAN: Thank you, Dake.

00:20:22.897 --> 00:20:25.230
KEYVAN: So before we go into
the details of the Entrance

00:20:25.230 --> 00:20:30.250
Transition, here I will showcase
an example Entrance Transition

00:20:30.250 --> 00:20:31.820
in Leanback.

00:20:31.820 --> 00:20:34.040
I will play the
BrowseFragment here.

00:20:37.110 --> 00:20:40.060
You'll notice that we have a
slide-in transition happening

00:20:40.060 --> 00:20:41.920
from the opposite sides.

00:20:41.920 --> 00:20:44.520
The HeadersFragment is
sliding from the left,

00:20:44.520 --> 00:20:46.725
and the RowsFragment is
sliding from the right.

00:20:46.725 --> 00:20:48.550
To capture this
transition once more,

00:20:48.550 --> 00:20:52.210
I will play this
demo once again.

00:20:52.210 --> 00:20:53.395
And here is how it looks.

00:20:56.370 --> 00:20:58.850
BrowseFragment not only
supports Entrance Transition

00:20:58.850 --> 00:21:01.910
for RowsFragment, but any
Custom Fragments can also

00:21:01.910 --> 00:21:03.830
take advantage of that.

00:21:03.830 --> 00:21:07.060
For instance, here when I
open on any Custom Fragment,

00:21:07.060 --> 00:21:09.850
you'll notice that once the
data loading is complete,

00:21:09.850 --> 00:21:12.470
you'll have similar
Entrance Transition.

00:21:12.470 --> 00:21:14.550
The RowsFragment is
sliding from the left,

00:21:14.550 --> 00:21:17.880
and the Custom Fragment
is sliding from the right.

00:21:17.880 --> 00:21:19.080
I will play this once more.

00:21:22.610 --> 00:21:24.540
And with that, Dake
will cover the details

00:21:24.540 --> 00:21:25.540
of Entrance Transitions.

00:21:30.286 --> 00:21:31.910
DAKE: So let's take
a look how your app

00:21:31.910 --> 00:21:34.170
can use Entrance Transition.

00:21:34.170 --> 00:21:36.670
This is a two-steps process.

00:21:36.670 --> 00:21:41.560
First, you app call
prepareEntranceTransition

00:21:41.560 --> 00:21:44.840
in your fragment onCreate.

00:21:44.840 --> 00:21:47.760
This tells BrowseFragment
don't show anything yet

00:21:47.760 --> 00:21:50.390
until I tell you to do so later.

00:21:50.390 --> 00:21:54.180
Internally, BrowseFragment will
hide the content on the left

00:21:54.180 --> 00:21:57.840
and hide all the views
inside the main area.

00:21:57.840 --> 00:22:01.580
The next step, once your
app loads all your data,

00:22:01.580 --> 00:22:04.340
you call this
startEntranceTransition.

00:22:04.340 --> 00:22:07.020
This is a signal
tells BrowseFragment

00:22:07.020 --> 00:22:08.860
that all my data is ready.

00:22:08.860 --> 00:22:10.370
Now you can start the animation.

00:22:13.880 --> 00:22:17.410
If you are just using
classical BrowseFragment

00:22:17.410 --> 00:22:20.280
displaying a list of rows,
all you need to do now

00:22:20.280 --> 00:22:25.300
is prepareEntranceTransition and
startEntranceTransition calls.

00:22:25.300 --> 00:22:30.330
But what if your app has
your own Custom Fragment?

00:22:30.330 --> 00:22:32.520
To make your Custom Fragment
part of the Entrance

00:22:32.520 --> 00:22:35.320
Transition, you need to
implement this method

00:22:35.320 --> 00:22:37.050
inside the MainFragmentAdapter.

00:22:40.060 --> 00:22:44.500
When BrowseFragment prepare
Entrance Transition,

00:22:44.500 --> 00:22:46.850
it calls into this
method telling

00:22:46.850 --> 00:22:48.860
you to hide all
the IndividualViews

00:22:48.860 --> 00:22:51.890
inside your Custom Fragment.

00:22:51.890 --> 00:22:54.240
When BrowseFragment
start the animation,

00:22:54.240 --> 00:22:57.580
it will tell you to
show all IndividualViews

00:22:57.580 --> 00:23:01.025
through the same method with
a different Parameter Value.

00:23:04.520 --> 00:23:06.870
Now, we also have
these three callbacks.

00:23:06.870 --> 00:23:11.270
These are optional because
RowsFragment internally

00:23:11.270 --> 00:23:12.415
uses RecyclerView.

00:23:15.110 --> 00:23:18.330
You might know that RecyclerView
animation cannot be run

00:23:18.330 --> 00:23:21.360
together with
Transition Animations,

00:23:21.360 --> 00:23:25.550
so the RowsFragment
listen to this callbacks,

00:23:25.550 --> 00:23:29.820
it disabled animation in
our transition prepare,

00:23:29.820 --> 00:23:33.740
it disabled the layout
when transition started,

00:23:33.740 --> 00:23:37.447
and it re-enabled layout and
re-enabled animation when

00:23:37.447 --> 00:23:38.280
transition finishes.

00:23:40.950 --> 00:23:44.320
Remember, these are optional.

00:23:44.320 --> 00:23:48.077
Only if your Custom Fragment
is also using RecyclerView

00:23:48.077 --> 00:23:49.660
you need to listen
to these callbacks.

00:23:53.040 --> 00:23:56.080
Now, because BrowseFragment
needs to hide and show

00:23:56.080 --> 00:23:59.680
views inside your fragment,
so your Custom Fragment needs

00:23:59.680 --> 00:24:04.460
to let BrowseFragment know
your view has been created.

00:24:04.460 --> 00:24:07.900
You are doing so by
calling notifyViewCreated

00:24:07.900 --> 00:24:10.020
on the fragment host object.

00:24:13.600 --> 00:24:17.490
And also, because your
Custom Fragment usually

00:24:17.490 --> 00:24:22.090
has your own data, which
can take extra time to load,

00:24:22.090 --> 00:24:25.550
this data is not the same
data inside the BrowseFragment

00:24:25.550 --> 00:24:26.050
Adapter.

00:24:29.090 --> 00:24:32.840
So remember, you need to
call startEntranceTransition

00:24:32.840 --> 00:24:36.400
to tell BrowseFragment that
all the data inside the Browse

00:24:36.400 --> 00:24:37.810
Adapter is ready.

00:24:37.810 --> 00:24:40.390
So here, your Custom
Fragment needs

00:24:40.390 --> 00:24:43.730
to call additional
method notifyDataReady

00:24:43.730 --> 00:24:47.080
to tell BrowseFragment that
the data inside your Custom

00:24:47.080 --> 00:24:48.740
Fragment is ready.

00:24:48.740 --> 00:24:50.960
And then BrowseFragment
can do the transitions.

00:24:55.690 --> 00:24:58.090
So to put all the
pieces together

00:24:58.090 --> 00:24:59.850
we have this sequence diagram.

00:24:59.850 --> 00:25:03.020
First, your app calls
prepareEntranceTransition

00:25:03.020 --> 00:25:05.930
in onCreate.

00:25:05.930 --> 00:25:09.340
Then BrowseFragment will
hide all the HeaderViews

00:25:09.340 --> 00:25:11.770
and don't show anything
in the main area.

00:25:11.770 --> 00:25:15.110
Then BrowseFragment
starts loading data.

00:25:15.110 --> 00:25:19.310
Once it loads the PageRow,
it will create your fragment

00:25:19.310 --> 00:25:22.460
from the factory.

00:25:22.460 --> 00:25:26.985
Next, once all the data inside
the BrowseFragment is loaded,

00:25:26.985 --> 00:25:28.360
it calls
startEntranceTransition.

00:25:30.890 --> 00:25:34.020
But we cannot start animation
yet because your fragment is

00:25:34.020 --> 00:25:35.340
not ready.

00:25:35.340 --> 00:25:38.257
So BrowseFragment is
waiting for your fragment

00:25:38.257 --> 00:25:39.340
to call notifyViewCreated.

00:25:43.520 --> 00:25:45.825
So then BrowseFragment
calls setEntranceTrans

00:25:45.825 --> 00:25:46.575
itionState(false).

00:25:49.410 --> 00:25:52.820
This tells your Custom
Fragment to hide all the views

00:25:52.820 --> 00:25:53.695
inside your fragment.

00:25:56.760 --> 00:26:00.500
At the last step, once your
fragment load all data,

00:26:00.500 --> 00:26:02.600
you call notifyDataReady.

00:26:02.600 --> 00:26:04.650
And then BrowseFragment
calls setEntranceTrans

00:26:04.650 --> 00:26:09.984
itionState(true), which tells
you to show all the views.

00:26:09.984 --> 00:26:11.150
Then we can start animation.

00:26:15.900 --> 00:26:19.180
So we have talked a lot
about BrowseFragment today.

00:26:19.180 --> 00:26:21.250
In the next section,
I'm going to talk

00:26:21.250 --> 00:26:23.360
about some other fragments
in Leanback Libraries.

00:26:27.540 --> 00:26:32.100
If your app wants to
interact with user on TV,

00:26:32.100 --> 00:26:34.100
we recommend you to use
this GuidedStepFragment.

00:26:36.980 --> 00:26:39.780
This is a UX designed
for a user sitting

00:26:39.780 --> 00:26:42.080
10 feet away from the TV.

00:26:42.080 --> 00:26:44.810
So the screen is very
simple, as you can see.

00:26:44.810 --> 00:26:47.810
To the left, we call
it Guidance Area.

00:26:47.810 --> 00:26:52.570
This is the read-only area
that prompts user what

00:26:52.570 --> 00:26:55.640
user can do on this screen.

00:26:55.640 --> 00:26:59.190
To the right is a list
of Guided Actions.

00:26:59.190 --> 00:27:02.050
This is the area that
user can interact with.

00:27:07.990 --> 00:27:10.090
Next Keyvan's going
to do a quick demo.

00:27:16.450 --> 00:27:18.570
KEYVAN: So say you
want to rent a movie.

00:27:18.570 --> 00:27:21.820
Here I will show you an
example workflow of doing so

00:27:21.820 --> 00:27:24.640
using GuidedStepFragment.

00:27:24.640 --> 00:27:26.490
GuidedStepFragment
here presents the user

00:27:26.490 --> 00:27:28.520
with a sequence of fragments.

00:27:28.520 --> 00:27:32.670
At each step, it'll ask the
user to take a set of actions.

00:27:32.670 --> 00:27:34.520
It will also make
it easy for the user

00:27:34.520 --> 00:27:38.120
to navigate back and forth
across all the fragments.

00:27:38.120 --> 00:27:40.810
So I will start off by
choosing the Rent HD

00:27:40.810 --> 00:27:43.007
version of the movie here.

00:27:43.007 --> 00:27:44.840
But let's say at this
point I change my mind

00:27:44.840 --> 00:27:48.810
and I want to rent the SD
version of the movie instead.

00:27:48.810 --> 00:27:53.090
I can easily navigate back
to the previous screen

00:27:53.090 --> 00:27:57.780
and select the SD version
of the movie here.

00:27:57.780 --> 00:28:00.740
Here we see an example
of a GuidedStepFragment

00:28:00.740 --> 00:28:02.970
with a drop-down action.

00:28:02.970 --> 00:28:05.350
I can either choose one of
the existing credit cards

00:28:05.350 --> 00:28:07.412
where I have entered
before, or if I want,

00:28:07.412 --> 00:28:09.620
I can add a new credit card
in a new fragment screen.

00:28:12.260 --> 00:28:15.050
Here we see an example of an
editable action where I can

00:28:15.050 --> 00:28:17.520
enter my credit card number.

00:28:17.520 --> 00:28:20.450
So I will go ahead and enter
my real credit card number.

00:28:25.750 --> 00:28:27.430
And once I'm done
with that, I'm going

00:28:27.430 --> 00:28:29.930
to pick a valid expiration date.

00:28:29.930 --> 00:28:31.690
This is an example
of a date picker

00:28:31.690 --> 00:28:32.856
widget provided by Leanback.

00:28:37.230 --> 00:28:39.980
You'll notice that once
the information I entered

00:28:39.980 --> 00:28:42.620
about my credit
card is validated,

00:28:42.620 --> 00:28:45.110
the OK button is enabled.

00:28:45.110 --> 00:28:46.847
Next I will hit the
OK button, and I

00:28:46.847 --> 00:28:48.930
will be directed back to
the previous screen where

00:28:48.930 --> 00:28:51.850
I left off.

00:28:51.850 --> 00:28:53.890
Next I will choose the Rent.

00:28:53.890 --> 00:28:57.430
And after the
processing is complete,

00:28:57.430 --> 00:28:59.230
I will be presented
with a final screen

00:28:59.230 --> 00:29:03.330
where I can start
watching the movie,

00:29:03.330 --> 00:29:05.220
You'll see that once
I selected Watch Now,

00:29:05.220 --> 00:29:08.860
GuidedStepFragment will close
all the existing fragments

00:29:08.860 --> 00:29:12.120
and a new video
will start playing.

00:29:12.120 --> 00:29:14.740
Unfortunately, again, the
video will not play here,

00:29:14.740 --> 00:29:19.150
but believe it, it's going
to be a really nice video.

00:29:19.150 --> 00:29:21.164
And with that, Dake
will cover the details

00:29:21.164 --> 00:29:22.080
of GuidedStepFragment.

00:29:27.780 --> 00:29:30.630
DAKE: Thank you, Keyvan.

00:29:30.630 --> 00:29:33.060
So to create your
GuidedStepFragment,

00:29:33.060 --> 00:29:36.220
you extend from the Base
Class GuidedStepFragment

00:29:36.220 --> 00:29:38.380
and override these
three methods.

00:29:38.380 --> 00:29:40.730
First, you provide
Guidance, which is

00:29:40.730 --> 00:29:43.190
the read-only area to the left.

00:29:43.190 --> 00:29:48.520
Second, you provide a list of
Guided Actions for the user.

00:29:48.520 --> 00:29:51.240
And then you respond
to user actions

00:29:51.240 --> 00:29:55.505
and do something for your app.

00:29:55.505 --> 00:29:58.550
A Guided Action,
it has an id, which

00:29:58.550 --> 00:30:01.400
is identified for
your program to know

00:30:01.400 --> 00:30:05.710
which Guided Action the
user has interacted with.

00:30:05.710 --> 00:30:08.460
It has a Title and Description.

00:30:08.460 --> 00:30:12.465
So the basic Guided Action
is a click-only action.

00:30:15.280 --> 00:30:18.190
You can also make
a Guided Action

00:30:18.190 --> 00:30:20.920
like a radio or a check box.

00:30:20.920 --> 00:30:24.340
You can make the
Title editable, or you

00:30:24.340 --> 00:30:26.520
can make the Description
editable, but not

00:30:26.520 --> 00:30:29.920
both at the same time.

00:30:29.920 --> 00:30:34.690
Here are some advanced
examples, the DatePicker

00:30:34.690 --> 00:30:39.500
and a list of SubActions which
implement the drop-down list

00:30:39.500 --> 00:30:40.000
feature.

00:30:43.980 --> 00:30:48.190
To use the GuidedStepFragment,
you have two choices.

00:30:48.190 --> 00:30:51.910
You either start the workflow
in a separate activity

00:30:51.910 --> 00:30:57.390
or you can start the flow
in your existing activity.

00:30:57.390 --> 00:31:04.720
In the first approach, you call
addAsRoot in activity onCreate.

00:31:04.720 --> 00:31:09.170
Remember, you only do this
with certain instances now.

00:31:09.170 --> 00:31:12.660
If your activity is restoring
from certain instance,

00:31:12.660 --> 00:31:14.940
the Fragment Manager
will automatically

00:31:14.940 --> 00:31:16.960
restore the fragment
for you so you

00:31:16.960 --> 00:31:19.320
don't add a duplicate
fragment in this case.

00:31:22.960 --> 00:31:24.880
If your app don't
want to use Activity,

00:31:24.880 --> 00:31:27.540
if you want to do everything
in fragments, that's fine.

00:31:27.540 --> 00:31:32.260
You can add the Guided Step on
top of your existing content.

00:31:37.290 --> 00:31:40.010
To navigate between
the fragments,

00:31:40.010 --> 00:31:43.850
you usually do this by
responding to user actions

00:31:43.850 --> 00:31:47.790
and callAddFunction with
the new fragment name

00:31:47.790 --> 00:31:49.220
that you want to navigate to.

00:31:51.950 --> 00:31:55.430
The fragments are added
using BackStack entry.

00:31:55.430 --> 00:31:58.310
So if user click Back
button on the remote,

00:31:58.310 --> 00:32:00.720
he will be taken back
to the previous screen.

00:32:00.720 --> 00:32:05.700
But sometimes your app wants
to go multiple step back.

00:32:05.700 --> 00:32:09.850
You can call this popBackStep
which is a specific Class

00:32:09.850 --> 00:32:11.140
Name of the fragment.

00:32:16.520 --> 00:32:19.600
Finally, if you want
to finish your flow,

00:32:19.600 --> 00:32:22.210
you call
finishGuidedStepFragment.

00:32:22.210 --> 00:32:25.540
This will close all the
GuidedStepFragments.

00:32:25.540 --> 00:32:30.042
And, if your flow was started
in a separate activity,

00:32:30.042 --> 00:32:31.375
it will also close the activity.

00:32:36.350 --> 00:32:37.760
Settings.

00:32:37.760 --> 00:32:42.200
So in Android N, we have
redesigned the Android TV

00:32:42.200 --> 00:32:43.600
Settings app.

00:32:43.600 --> 00:32:48.710
It's now like a set panel
laying on top of other content.

00:32:48.710 --> 00:32:51.470
If you want your app also
to use the same feature,

00:32:51.470 --> 00:32:53.011
you can use
LeanbackSettingsFragment.

00:32:55.690 --> 00:33:00.080
This fragment starts
with a HeaderView

00:33:00.080 --> 00:33:03.620
followed by a list of
Preference Objects.

00:33:03.620 --> 00:33:06.860
Each Preference Object has
Icon, Title, a Summary.

00:33:09.410 --> 00:33:12.000
Optionally, the
Preference Object

00:33:12.000 --> 00:33:13.920
has embedded widget inside it.

00:33:13.920 --> 00:33:15.980
In this case, it's
a switch widget.

00:33:21.690 --> 00:33:25.760
So I'm not going into the
details of SettingsFragment,

00:33:25.760 --> 00:33:28.510
but you are welcome to
take a look at the sample

00:33:28.510 --> 00:33:30.179
code in a Showcase app.

00:33:34.100 --> 00:33:35.100
PlaybackOverlayFragment.

00:33:38.460 --> 00:33:42.310
When your app tried to
play audio or, like I say,

00:33:42.310 --> 00:33:46.800
podcast, then you might use
PlaybackOverlayControlFragment.

00:33:50.460 --> 00:33:52.880
This fragment usually starts
with a PlaybackControlsRow.

00:33:57.530 --> 00:34:01.020
With the upcoming release,
we provided support for you

00:34:01.020 --> 00:34:03.560
to render in a Media Item Row.

00:34:03.560 --> 00:34:05.970
A Media Item Row has two parts.

00:34:05.970 --> 00:34:08.280
To the left is the
Media Item Details.

00:34:08.280 --> 00:34:13.400
It includes the Track Number,
the Song Title, and Duration.

00:34:13.400 --> 00:34:16.240
To the right, there are
multiple clickable actions.

00:34:20.520 --> 00:34:23.239
To use this feature,
your app extends

00:34:23.239 --> 00:34:26.090
from AbstractMediaItemPresenter,
which

00:34:26.090 --> 00:34:30.267
is responsible for
rendering a row.

00:34:30.267 --> 00:34:31.600
You override onBindMediaDetails.

00:34:35.699 --> 00:34:37.440
Your Media Item
can be any class.

00:34:37.440 --> 00:34:41.340
It doesn't need to be a
subclass of a Row Object.

00:34:41.340 --> 00:34:44.370
So you get the values
from your song object

00:34:44.370 --> 00:34:46.712
and then fill that data
into the ViewHolder.

00:34:49.604 --> 00:34:53.690
Optionally, if you want
to support the actions

00:34:53.690 --> 00:34:56.320
to the right of the
MediaItemDetails,

00:34:56.320 --> 00:34:59.130
you can implement this
provider interface

00:34:59.130 --> 00:35:00.470
and provide a list of actions.

00:35:09.590 --> 00:35:13.200
KEYVAN: Next I'm going to demo
the PlaybackOverlyFragment.

00:35:13.200 --> 00:35:15.290
This fragment comes with
a set of new features

00:35:15.290 --> 00:35:19.650
which will be available in the
upcoming Android N release.

00:35:19.650 --> 00:35:22.950
Once I open this fragment,
the first song will start.

00:35:22.950 --> 00:35:25.794
[MUSIC PLAYING]

00:35:26.742 --> 00:35:31.010
I will pause the song right now.

00:35:31.010 --> 00:35:32.510
So the top section
of this fragment

00:35:32.510 --> 00:35:35.490
is the Playback Media Player,
and the button section

00:35:35.490 --> 00:35:38.270
is the Media Item Rows.

00:35:38.270 --> 00:35:40.460
All the individual components
within this fragment

00:35:40.460 --> 00:35:43.860
can be customized through
Themes and Styling.

00:35:43.860 --> 00:35:45.970
For instance, the
developers can specify

00:35:45.970 --> 00:35:49.340
the information about the
currently playing song;

00:35:49.340 --> 00:35:52.790
the primary set of actions,
such as Play or Pause;

00:35:52.790 --> 00:35:55.320
the secondary set of actions,
such as Thumbs Up or Thumbs

00:35:55.320 --> 00:36:00.600
Down; and on the bottom we
have the Media Item Rows.

00:36:00.600 --> 00:36:03.540
Each Media Item Row can
consist of information

00:36:03.540 --> 00:36:08.920
such as the Title of the song,
the Duration, the Artist.

00:36:08.920 --> 00:36:12.660
And they are followed with
a set of optional actions.

00:36:12.660 --> 00:36:14.270
For the actions
here we are having

00:36:14.270 --> 00:36:18.766
the Add to the Playlist button
and the Favorite button action.

00:36:18.766 --> 00:36:22.210
In Leanback, we
provide listener hooks

00:36:22.210 --> 00:36:24.630
for either selecting
or clicking on each one

00:36:24.630 --> 00:36:27.090
of these individual components.

00:36:27.090 --> 00:36:29.490
So let's say I want
to listen to a song.

00:36:29.490 --> 00:36:31.830
I can do that by clicking
on the Media Item

00:36:31.830 --> 00:36:32.800
Details for that song--

00:36:32.800 --> 00:36:34.140
[MUSIC PLAYING]

00:36:34.140 --> 00:36:38.420
--and that will start
playing the song.

00:36:38.420 --> 00:36:41.290
And say at some point into
the song, I really enjoy this

00:36:41.290 --> 00:36:43.494
and I want to
favorite that song.

00:36:43.494 --> 00:36:46.410
I can easily navigate back
to the song that's playing

00:36:46.410 --> 00:36:50.298
and hit the Favorite
button here.

00:36:50.298 --> 00:36:52.728
That will highlight that
row a different color,

00:36:52.728 --> 00:36:55.580
which will make it easy
for me to later find

00:36:55.580 --> 00:36:58.280
my Favorite List of Songs.

00:36:58.280 --> 00:37:00.340
And that concludes
our demonstration,

00:37:00.340 --> 00:37:02.530
and I'd like to hand
it over to Shaan.

00:37:08.700 --> 00:37:11.860
SHAAN: So we've covered
a lot of ground today.

00:37:11.860 --> 00:37:14.222
First, we talked about how
easy it is for you to get up

00:37:14.222 --> 00:37:15.930
and running with just
a few lines of code

00:37:15.930 --> 00:37:17.376
using BrowseFragment.

00:37:17.376 --> 00:37:19.000
Then we showed you
different techniques

00:37:19.000 --> 00:37:22.622
you can employ to give
your app some character.

00:37:22.622 --> 00:37:24.580
Let me show you how you
can plug-in your Custom

00:37:24.580 --> 00:37:27.589
Fragment inside BrowseFragment.

00:37:27.589 --> 00:37:29.630
We showed you how to use
different kinds of Cards

00:37:29.630 --> 00:37:31.894
in the same application.

00:37:31.894 --> 00:37:33.310
We talked about
the best practices

00:37:33.310 --> 00:37:35.550
for running Entrance Transition.

00:37:35.550 --> 00:37:38.500
We also showed you how you
can use GuidedStepFragment

00:37:38.500 --> 00:37:41.910
to walk a user to a workflow.

00:37:41.910 --> 00:37:44.970
We showed you the newly styled
SettingsFragment and the newly

00:37:44.970 --> 00:37:48.527
redesigned PlaybackFragment.

00:37:48.527 --> 00:37:50.110
Hopefully you got a
sense how Leanback

00:37:50.110 --> 00:37:52.840
tries to provide a
comprehensive set of components

00:37:52.840 --> 00:37:55.920
for supporting different
use cases on TV.

00:37:55.920 --> 00:37:58.400
That being said, we are
always interested in listening

00:37:58.400 --> 00:38:01.362
to developer comments, feedback,
suggestions, feature requests.

00:38:01.362 --> 00:38:03.320
We can't wait to see what
you're going to build

00:38:03.320 --> 00:38:05.220
with the new Leanback Library.

00:38:05.220 --> 00:38:06.750
Thank you very much for coming.

00:38:06.750 --> 00:38:08.650
[APPLAUSE]

00:38:11.644 --> 00:38:14.060
Before we go into Q&amp;A, a couple
things I want to call out.

00:38:14.060 --> 00:38:16.420
Our Sandbox TV is right
around the corner,

00:38:16.420 --> 00:38:19.130
so please come by, say
hello, and see this in action

00:38:19.130 --> 00:38:20.120
if you want to.

00:38:20.120 --> 00:38:22.500
And the second is if you
guys are watching remotely,

00:38:22.500 --> 00:38:26.415
then we have a developer
community on Google+.

00:38:26.415 --> 00:38:29.660
Please join the community and
we'll be sharing helpful tips

00:38:29.660 --> 00:38:31.870
and also helping you solve
any problems that you

00:38:31.870 --> 00:38:33.790
run into there.

00:38:33.790 --> 00:38:35.630
And we have the
Showcase app, which

00:38:35.630 --> 00:38:37.615
is available on
GitHub for cloning.

00:38:37.615 --> 00:38:38.740
Please play around with it.

00:38:38.740 --> 00:38:40.906
If you have any questions,
suggestions, let us know.

00:38:53.072 --> 00:38:54.730
AUDIENCE: Hey.

00:38:54.730 --> 00:38:56.772
I have a question
about the WebView.

00:38:56.772 --> 00:38:59.130
In the beginning you
showed that you now

00:38:59.130 --> 00:39:00.559
plug in the WebView, right?

00:39:00.559 --> 00:39:02.515
But as I remember
the guidelines,

00:39:02.515 --> 00:39:04.960
you said to avoid
using the WebView

00:39:04.960 --> 00:39:06.427
because TV is not for web.

00:39:06.427 --> 00:39:09.370
So is something
changing here or?

00:39:09.370 --> 00:39:11.040
SHAAN: I think you
are absolutely right.

00:39:11.040 --> 00:39:13.080
We don't recommend
using WebView.

00:39:13.080 --> 00:39:15.000
There was an example
aimed to display

00:39:15.000 --> 00:39:16.730
the flexibility of
Custom Fragment, what

00:39:16.730 --> 00:39:17.887
you can do with it.

00:39:17.887 --> 00:39:19.720
But you're absolutely
right, we shouldn't be

00:39:19.720 --> 00:39:21.728
using WebView inside TV apps.

00:39:26.252 --> 00:39:27.085
Any other questions?

00:39:30.471 --> 00:39:32.220
Yeah, we'll be around
in the Sandbox area.

00:39:32.220 --> 00:39:33.110
Please come by and--

00:39:33.110 --> 00:39:36.160
[MUSIC PLAYING]

