WEBVTT
Kind: captions
Language: en

00:00:05.014 --> 00:00:06.430
SPEAKER 1: Good
morning, everyone,

00:00:06.430 --> 00:00:08.340
and welcome to this
talk about color.

00:00:08.340 --> 00:00:11.924
So, how many of you think
they understand color?

00:00:11.924 --> 00:00:12.590
Raise your hand.

00:00:12.590 --> 00:00:13.090
Nobody?

00:00:13.090 --> 00:00:15.190
OK, I guess that's
why you're here.

00:00:15.190 --> 00:00:18.340
So I gave a similar talk
last year at AnDev 360,

00:00:18.340 --> 00:00:20.470
and there was a lot of math
and a lot of equations,

00:00:20.470 --> 00:00:22.690
and a lot of worried
developers asked me

00:00:22.690 --> 00:00:24.970
if there's going to be
math in this presentation.

00:00:24.970 --> 00:00:26.800
There's going to be
no math, no equations.

00:00:26.800 --> 00:00:30.330
Instead, there's
going to be physics.

00:00:30.330 --> 00:00:32.189
So let's talk about color.

00:00:32.189 --> 00:00:34.020
The first question we
have to ask ourselves

00:00:34.020 --> 00:00:35.250
is, what is color?

00:00:35.250 --> 00:00:38.250
It sounds like a deep question.

00:00:38.250 --> 00:00:40.050
The answer is not so deep.

00:00:40.050 --> 00:00:42.930
So here's a definition
that applies to most of us

00:00:42.930 --> 00:00:44.080
as human beings.

00:00:44.080 --> 00:00:46.140
We're not developers,
we're just regular people.

00:00:46.140 --> 00:00:48.600
So, it's a visual
perception that

00:00:48.600 --> 00:00:51.810
can be described by hue,
brightness and colorfulness.

00:00:51.810 --> 00:00:55.050
Sometimes colorfulness is
also called saturation.

00:00:55.050 --> 00:00:59.360
And if you've ever
used the HLS, HSL, HSB

00:00:59.360 --> 00:01:01.770
colors in Android
APIs, you may be

00:01:01.770 --> 00:01:03.540
familiar with that
kind of definition.

00:01:03.540 --> 00:01:05.190
What's really
important to understand

00:01:05.190 --> 00:01:07.980
is that color is just a
perception of our brain.

00:01:07.980 --> 00:01:11.460
It's not a real thing, and
we're going to see why that is.

00:01:11.460 --> 00:01:15.210
So obviously, we see colors
with our eyes, and if any of you

00:01:15.210 --> 00:01:19.830
see color through another means,
I would love to talk to you.

00:01:19.830 --> 00:01:22.230
And to understand how
we perceive color,

00:01:22.230 --> 00:01:23.910
we first have to
go back probably

00:01:23.910 --> 00:01:28.320
to high school or college
and try to understand

00:01:28.320 --> 00:01:29.340
what light is made of.

00:01:29.340 --> 00:01:32.550
So I'm sure most of you know
that light is made of photons,

00:01:32.550 --> 00:01:34.080
but there's a duality to light.

00:01:34.080 --> 00:01:35.730
It can be a wave or particle.

00:01:35.730 --> 00:01:38.850
And we're going to look at the
wave nature of light first.

00:01:38.850 --> 00:01:41.600
So light is an
electromagnetic wave.

00:01:41.600 --> 00:01:44.540
And our eyes are
just receptors for

00:01:44.540 --> 00:01:47.940
these electromagnetic waves.

00:01:47.940 --> 00:01:51.170
So, here's the
electromagnetic spectrum.

00:01:51.170 --> 00:01:52.590
It's not to scale.

00:01:52.590 --> 00:01:54.614
And from the shortest
wavelengths to the left

00:01:54.614 --> 00:01:56.280
to the longest
wavelengths to the right,

00:01:56.280 --> 00:02:00.120
we have, in order, the
gamma rays, the x-rays,

00:02:00.120 --> 00:02:03.540
the ultra-violets, the visible
spectrum, the tiny little bits

00:02:03.540 --> 00:02:05.490
in the middle full
of colors, then

00:02:05.490 --> 00:02:10.139
we have the infrared, the
microwaves, and then the radio

00:02:10.139 --> 00:02:11.730
waves.

00:02:11.730 --> 00:02:15.190
The part that interests us is
the tiny bit in the middle,

00:02:15.190 --> 00:02:17.070
It's what we call
the visible spectrum.

00:02:17.070 --> 00:02:21.240
It goes from about 400
nanometers to 700 nanometers.

00:02:21.240 --> 00:02:23.820
And all of us, these
are the only wavelengths

00:02:23.820 --> 00:02:26.700
that we can see.

00:02:26.700 --> 00:02:27.970
Why does this matter?

00:02:27.970 --> 00:02:29.610
Our eyes, like I
said, our receptors,

00:02:29.610 --> 00:02:32.220
they are actually made of
millions of small receptors

00:02:32.220 --> 00:02:33.420
called cones.

00:02:33.420 --> 00:02:36.240
Most of us, almost
everybody has three types

00:02:36.240 --> 00:02:38.760
of cones that can
detect different parts

00:02:38.760 --> 00:02:39.509
of the spectrum.

00:02:39.509 --> 00:02:41.300
So you see the spectrum
here at the bottom,

00:02:41.300 --> 00:02:44.190
it has all the wavelengths
of colors that we can see.

00:02:44.190 --> 00:02:47.190
And this diagram shows,
in three different colors,

00:02:47.190 --> 00:02:50.730
the sensitivity of each type of
cone that we have in our eyes.

00:02:50.730 --> 00:02:52.650
They are called short,
medium, and long.

00:02:52.650 --> 00:02:55.570
Sometimes they are called
blue, green, and red.

00:02:55.570 --> 00:02:59.061
It's not technically accurate to
call them red, green, and blue,

00:02:59.061 --> 00:03:01.560
so instead we're going to call
them short, medium, and long.

00:03:01.560 --> 00:03:04.860
And they are called that way
because the short ones help

00:03:04.860 --> 00:03:08.730
us see in the blue wavelengths,
so ultra-violets, violets,

00:03:08.730 --> 00:03:09.720
and blues.

00:03:09.720 --> 00:03:11.340
Then we have the
medium ones that help

00:03:11.340 --> 00:03:13.320
us see the greenish colors.

00:03:13.320 --> 00:03:16.551
And the long ones that help
us see green, orange, yellow,

00:03:16.551 --> 00:03:17.550
and a little bit of red.

00:03:17.550 --> 00:03:20.940
And you can see there's a lot
of overlap between the medium

00:03:20.940 --> 00:03:25.610
and the longer receptors.

00:03:25.610 --> 00:03:27.750
So now, what is light?

00:03:27.750 --> 00:03:30.560
So light is a distribution
of several wavelengths.

00:03:30.560 --> 00:03:34.649
So this is what we call the
spectral power distribution

00:03:34.649 --> 00:03:36.440
of a light bulb, so
the kind of light bulbs

00:03:36.440 --> 00:03:38.950
that you can find in any house.

00:03:38.950 --> 00:03:40.640
It's an orange-ish
light bulb, and you

00:03:40.640 --> 00:03:43.370
can see the amount of energy
it outputs in different parts

00:03:43.370 --> 00:03:44.700
of the visible spectrum.

00:03:44.700 --> 00:03:47.620
You can see here that
this type of light bulb

00:03:47.620 --> 00:03:50.330
outputs most of its energy
in the red and orange part

00:03:50.330 --> 00:03:52.832
of the spectrum, and that's
why we perceive it that way.

00:03:52.832 --> 00:03:55.040
But what happens when the
lights from that light bulb

00:03:55.040 --> 00:03:57.410
hits our eyes?

00:03:57.410 --> 00:03:59.044
So we saw that we
have those receptors,

00:03:59.044 --> 00:04:00.960
the different sensitivities
to different parts

00:04:00.960 --> 00:04:02.580
of the spectrum.

00:04:02.580 --> 00:04:04.580
So we just multiply
the distribution

00:04:04.580 --> 00:04:07.990
of the incoming light
with the sensitivity

00:04:07.990 --> 00:04:12.650
of our different cones, and
the result is what we perceive.

00:04:12.650 --> 00:04:15.269
So when we multiply
both, we get this.

00:04:15.269 --> 00:04:17.060
So when you look at
one of the light bulbs,

00:04:17.060 --> 00:04:18.589
you see almost
nothing in the blues,

00:04:18.589 --> 00:04:21.230
you see a little bit of green,
and more orange and red,

00:04:21.230 --> 00:04:23.090
and then our brain
will interpret

00:04:23.090 --> 00:04:24.920
that as an orange color.

00:04:24.920 --> 00:04:27.860
The way we actually interpret
the result of this cones

00:04:27.860 --> 00:04:29.750
is a little complicated.

00:04:29.750 --> 00:04:33.110
And we don't have time to
go into the details here.

00:04:33.110 --> 00:04:37.780
You can go look on Wikipedia how
it works if you are interested.

00:04:37.780 --> 00:04:40.470
So here's what happens
exactly when we

00:04:40.470 --> 00:04:41.520
look at the light source.

00:04:44.400 --> 00:04:46.530
There are wavelengths
emitted by the light source.

00:04:46.530 --> 00:04:48.280
It hits our eyes,
multiplied by the cones,

00:04:48.280 --> 00:04:49.536
and that's what we perceive.

00:04:49.536 --> 00:04:52.160
But most of the time, you're not
looking directly at the light.

00:04:52.160 --> 00:04:54.368
You're looking at different
objects that surround us.

00:04:54.368 --> 00:04:56.820
And how do those objects
get their color from?

00:04:56.820 --> 00:05:00.070
So every object also has
what's called a spectral power

00:05:00.070 --> 00:05:01.110
distribution.

00:05:01.110 --> 00:05:03.330
It's a description
of the wavelengths

00:05:03.330 --> 00:05:05.070
that the object can reflect.

00:05:05.070 --> 00:05:06.390
We call that the reflectance.

00:05:06.390 --> 00:05:08.590
So some of the wavelengths
will be absorbed.

00:05:08.590 --> 00:05:11.160
So for instance, a black object
absorbs almost everything

00:05:11.160 --> 00:05:14.250
that's incoming, and a white
object will reflect pretty much

00:05:14.250 --> 00:05:16.320
all the wavelengths.

00:05:16.320 --> 00:05:20.024
So, to perceive the color
of an object, what happens

00:05:20.024 --> 00:05:21.065
is we have light come in.

00:05:21.065 --> 00:05:22.770
It bounces off an object.

00:05:22.770 --> 00:05:24.570
Some of it is
reflected, so we just

00:05:24.570 --> 00:05:26.670
multiply the two distributions.

00:05:26.670 --> 00:05:31.430
Then it hits our eyes and we
get the final perceived color.

00:05:31.430 --> 00:05:34.650
What's very interesting
here is that because it's

00:05:34.650 --> 00:05:36.750
a multiplication,
any combination

00:05:36.750 --> 00:05:41.280
of light and reflectance can
yield to the same perceived

00:05:41.280 --> 00:05:42.610
color in our brain.

00:05:42.610 --> 00:05:44.280
So a very simple
example is that, if you

00:05:44.280 --> 00:05:46.810
have an orange object
lit by white light,

00:05:46.810 --> 00:05:49.970
you're going to see orange, but
if you have a white object led

00:05:49.970 --> 00:05:52.590
by an orange light, you're
also going to see the orange.

00:05:52.590 --> 00:05:55.530
And our brain does a lot
of post-processing really

00:05:55.530 --> 00:05:58.020
to help us understand what is
the color of the light, what

00:05:58.020 --> 00:05:59.145
is the color of the object.

00:05:59.145 --> 00:06:01.650
And a few years ago, there
was this famous example

00:06:01.650 --> 00:06:04.890
of the dress, some people were
seeing it in black and blue,

00:06:04.890 --> 00:06:07.570
some people were seeing it
in gold and something else.

00:06:07.570 --> 00:06:10.980
And that's exactly what's
happening, is that some of us

00:06:10.980 --> 00:06:13.050
were interpreting the
results differently.

00:06:13.050 --> 00:06:15.040
And nobody was wrong.

00:06:15.040 --> 00:06:19.200
It's just without the context
you can't really know for sure.

00:06:19.200 --> 00:06:21.011
So we can swap the
colors, the distribution

00:06:21.011 --> 00:06:22.510
of the light source,
and the object,

00:06:22.510 --> 00:06:24.820
and we're going to
see the same result.

00:06:24.820 --> 00:06:28.260
So that leads us to something
called the Chromaticity

00:06:28.260 --> 00:06:29.540
Diagram.

00:06:29.540 --> 00:06:33.590
It was standardized in 1931 by
the Commission Internationale

00:06:33.590 --> 00:06:36.360
d'Eclairage, CIE.

00:06:36.360 --> 00:06:38.670
It's a French
commission, apparently.

00:06:38.670 --> 00:06:41.010
And it represents all
the colors that we

00:06:41.010 --> 00:06:43.270
can perceive as human beings.

00:06:43.270 --> 00:06:47.270
So on that horseshoe
shape, the outside edge

00:06:47.270 --> 00:06:49.470
is called the spectral locus.

00:06:49.470 --> 00:06:51.630
It represents all
the pure colors,

00:06:51.630 --> 00:06:52.800
the pure spectral colors.

00:06:52.800 --> 00:06:55.440
So that the spectrum of colors
that we saw in the previews

00:06:55.440 --> 00:06:59.250
diagrams actually bands
around that edge all along.

00:06:59.250 --> 00:07:01.140
And everything in
between, all the colors

00:07:01.140 --> 00:07:03.690
that we can actually
see, are a mix

00:07:03.690 --> 00:07:07.100
of all those
different wavelengths.

00:07:07.100 --> 00:07:08.880
So it does this weird shape.

00:07:08.880 --> 00:07:10.430
It's not a rectangle
or anything.

00:07:10.430 --> 00:07:13.380
And there's a lot of colors that
live outside of that spectrum.

00:07:13.380 --> 00:07:15.960
We call them the imaginary
colors because we cannot see

00:07:15.960 --> 00:07:16.470
them.

00:07:16.470 --> 00:07:18.750
No matter how hard
we try, you will not

00:07:18.750 --> 00:07:20.190
be able to see those colors.

00:07:20.190 --> 00:07:22.740
There are also multiple
optical illusions

00:07:22.740 --> 00:07:25.140
that you can find
online that will

00:07:25.140 --> 00:07:27.300
help you find those colors.

00:07:27.300 --> 00:07:30.000
It's actually really weird--
not everybody can see them

00:07:30.000 --> 00:07:31.382
or perceive them.

00:07:31.382 --> 00:07:32.840
There's one, for
instance, where it

00:07:32.840 --> 00:07:35.850
shows you a blue rectangle
for one of your eyes

00:07:35.850 --> 00:07:37.807
and a yellow rectangle
for your other eye,

00:07:37.807 --> 00:07:40.140
and the way I see it is this
really weird color that you

00:07:40.140 --> 00:07:43.300
can't really describe that keeps
changing from blue to yellow

00:07:43.300 --> 00:07:47.907
but never stops on one
of those two colors.

00:07:47.907 --> 00:07:50.490
The visible spectrum is actually
a little bit more complicated

00:07:50.490 --> 00:07:50.989
than that.

00:07:50.989 --> 00:07:53.700
What you're seeing is a
slice, it's a 2D slice.

00:07:53.700 --> 00:07:56.190
There's a z-axis that's
coming towards you,

00:07:56.190 --> 00:07:57.730
and that is the brightness.

00:07:57.730 --> 00:08:00.900
So the footprints at the bottom,
this large footprint you see,

00:08:00.900 --> 00:08:01.770
is the dark colors.

00:08:01.770 --> 00:08:04.620
It's because our eyes are
better at seeing dark colors

00:08:04.620 --> 00:08:06.180
than they are at
seeing light colors.

00:08:09.600 --> 00:08:11.750
We've seen what colors are
for us as human beings.

00:08:11.750 --> 00:08:13.708
But you know, everybody's
a developer, I think,

00:08:13.708 --> 00:08:15.860
in the audience, so the
real question is what

00:08:15.860 --> 00:08:17.450
is called for us as developers?

00:08:17.450 --> 00:08:19.640
What does it mean
for your application?

00:08:19.640 --> 00:08:22.820
So color really is
an [INAUDIBLE] scheme

00:08:22.820 --> 00:08:24.830
for brain sensations.

00:08:24.830 --> 00:08:27.200
And the formal
definition is that it's

00:08:27.200 --> 00:08:29.720
a tuple of numbers,
or a list of numbers,

00:08:29.720 --> 00:08:33.169
defined within a color model
and associated with what

00:08:33.169 --> 00:08:34.419
we call a color space.

00:08:34.419 --> 00:08:37.340
And we're going to
look at some examples

00:08:37.340 --> 00:08:38.720
to make you understand that.

00:08:38.720 --> 00:08:41.361
So here are some
of the color models

00:08:41.361 --> 00:08:42.610
that you may be familiar with.

00:08:42.610 --> 00:08:44.000
RGB is one of the obvious ones.

00:08:44.000 --> 00:08:45.440
I'm sure everybody
has used that.

00:08:45.440 --> 00:08:50.930
CMYK, if you have ever printed a
picture or a book or something,

00:08:50.930 --> 00:08:53.750
you might have
also dealt with it.

00:08:53.750 --> 00:08:56.282
And there's another one
for instance, called L*a*b.

00:08:56.282 --> 00:08:56.990
There are others.

00:08:56.990 --> 00:08:57.840
There's xyz.

00:08:57.840 --> 00:08:59.600
There's many others.

00:08:59.600 --> 00:09:01.350
What's interesting is
that the color model

00:09:01.350 --> 00:09:04.860
defines how many numbers
we need to define a color.

00:09:04.860 --> 00:09:07.970
So you're used to RGB to
three colors, to three values,

00:09:07.970 --> 00:09:10.792
but CMYK requires four
values, for instance.

00:09:10.792 --> 00:09:12.500
So the one that we're
interested in today

00:09:12.500 --> 00:09:14.720
is the RGB color model.

00:09:14.720 --> 00:09:16.490
It uses a triplet of values--

00:09:16.490 --> 00:09:18.140
hence the name.

00:09:18.140 --> 00:09:21.350
And I'm sure most
of you or all of you

00:09:21.350 --> 00:09:23.150
are familiar with the
hexadecimal notation.

00:09:23.150 --> 00:09:24.733
So there are many
ways of representing

00:09:24.733 --> 00:09:25.737
the tuple of numbers.

00:09:25.737 --> 00:09:26.570
This is one of them.

00:09:26.570 --> 00:09:28.460
It is pretty popular,
especially on the web.

00:09:28.460 --> 00:09:30.470
You have probably used
it a lot on Android

00:09:30.470 --> 00:09:33.680
when you want to pass a color
directly to one of APIs.

00:09:33.680 --> 00:09:35.820
This is a pinkish color.

00:09:35.820 --> 00:09:39.020
So this is the same color
represented as a triplet

00:09:39.020 --> 00:09:41.890
of 8-bit [INAUDIBLE] integers.

00:09:41.890 --> 00:09:43.640
You are also most
likely familiar with it.

00:09:43.640 --> 00:09:45.290
This is something we
use a lot on Android

00:09:45.290 --> 00:09:46.748
when you set the
color on the paint

00:09:46.748 --> 00:09:48.950
or when you use the
color to try to extract

00:09:48.950 --> 00:09:52.100
the red component of a color.

00:09:52.100 --> 00:09:53.920
And this is another notation.

00:09:53.920 --> 00:09:55.810
This is actually
the one I prefer.

00:09:55.810 --> 00:09:57.080
This uses floats.

00:09:57.080 --> 00:09:59.780
So the values are
between 0 and 1.

00:09:59.780 --> 00:10:02.070
And it's interesting
because it's more versatile.

00:10:02.070 --> 00:10:05.090
You can use it to represent
[INAUDIBLE] colors.

00:10:05.090 --> 00:10:06.560
And we'll see that
Android actually

00:10:06.560 --> 00:10:09.920
makes use now in O
of the float notation

00:10:09.920 --> 00:10:14.960
to have negative colors and
colors that go beyond 1.

00:10:14.960 --> 00:10:18.020
So the big question is,
once we have those numbers,

00:10:18.020 --> 00:10:19.970
what colors do they
actually represent?

00:10:19.970 --> 00:10:21.274
So I told you this is a pink.

00:10:21.274 --> 00:10:22.940
But you've seen that
spectrum of colors.

00:10:22.940 --> 00:10:24.050
There are many,
many, many pinks.

00:10:24.050 --> 00:10:25.591
There's actually an
infinity of pink.

00:10:25.591 --> 00:10:28.640
So which one of those
pinks does this represent?

00:10:28.640 --> 00:10:31.210
So to reproduce colors,
all of our displays

00:10:31.210 --> 00:10:32.780
use additive light.

00:10:32.780 --> 00:10:38.870
So, we use red, green, and
blue in our TVs, our phones,

00:10:38.870 --> 00:10:41.270
our computers, our
old CRT monitors.

00:10:41.270 --> 00:10:43.550
And they just mix
those different lights.

00:10:43.550 --> 00:10:45.210
So the numbers
that you just saw,

00:10:45.210 --> 00:10:47.240
the RGB triplets, it
might sound obvious,

00:10:47.240 --> 00:10:50.450
but they're an intensity for
each one of those lights.

00:10:50.450 --> 00:10:52.220
So let's say we
pick three lights.

00:10:52.220 --> 00:10:54.980
We pick a green light, a
red light, and a blue light.

00:10:54.980 --> 00:10:57.630
And they're not perfect
spectral lights,

00:10:57.630 --> 00:10:59.450
they're just random
lights that you found.

00:10:59.450 --> 00:11:02.180
They are found somewhere
in the visible spectrum.

00:11:02.180 --> 00:11:04.080
And together they
form a triangle.

00:11:04.080 --> 00:11:08.840
So when you have an RGB
color in your application,

00:11:08.840 --> 00:11:10.730
you can only represent
one of the colors

00:11:10.730 --> 00:11:12.030
within that triangle.

00:11:12.030 --> 00:11:14.720
You cannot represent colors
that live in the entire visible

00:11:14.720 --> 00:11:15.220
spectrum.

00:11:18.467 --> 00:11:20.300
That triangle is what
we call a color space,

00:11:20.300 --> 00:11:21.633
and there's an infinity of them.

00:11:21.633 --> 00:11:23.640
Depending on the three
lights you choose,

00:11:23.640 --> 00:11:28.000
you can represent any of an
infinity of color spaces.

00:11:28.000 --> 00:11:31.510
So here's, for instance,
one of the widest color

00:11:31.510 --> 00:11:32.622
spaces we could create.

00:11:32.622 --> 00:11:35.080
The problem we have is that
with a triangle with just three

00:11:35.080 --> 00:11:38.740
lights, we cannot encompass
all the visible spectrum.

00:11:38.740 --> 00:11:40.870
We have to choose
a smaller slice.

00:11:40.870 --> 00:11:43.710
So this one in particular
is called the [? IW ?] wide

00:11:43.710 --> 00:11:46.420
gamut RGB color space.

00:11:46.420 --> 00:11:52.360
There's no device that I know
of that can capture or recreate

00:11:52.360 --> 00:11:56.400
this color spectrum,
this color space.

00:11:56.400 --> 00:11:57.900
And the problem is
that if we wanted

00:11:57.900 --> 00:12:00.690
to create a color space
with RGB that contains all

00:12:00.690 --> 00:12:03.330
the visible colors, we'd
have to create lights that

00:12:03.330 --> 00:12:05.160
are in the imaginary space.

00:12:05.160 --> 00:12:07.369
So lights that we cannot
perceive because we've seen

00:12:07.369 --> 00:12:09.660
that our eyes cannot perceive
outside of that horseshoe

00:12:09.660 --> 00:12:11.100
shape.

00:12:11.100 --> 00:12:14.010
The color spaces are more
complicated than that.

00:12:14.010 --> 00:12:18.160
So color space is actually
defined by three components.

00:12:18.160 --> 00:12:20.970
The first ones are
called the primaries.

00:12:20.970 --> 00:12:22.230
There are three of them.

00:12:22.230 --> 00:12:24.022
Then we need a white point.

00:12:24.022 --> 00:12:26.230
And then we need something
called transfer functions.

00:12:29.020 --> 00:12:31.510
So this might look like
a complicated diagram,

00:12:31.510 --> 00:12:35.710
but what I did is I've put the
visible spectrum on the left,

00:12:35.710 --> 00:12:37.780
and I've overlaid
three triangles that

00:12:37.780 --> 00:12:40.030
represent three common
color spaces that

00:12:40.030 --> 00:12:43.120
are used for still images.

00:12:43.120 --> 00:12:46.030
So the smallest one you see in
the middle, the blue triangle,

00:12:46.030 --> 00:12:47.260
is the one we call sRGB.

00:12:47.260 --> 00:12:49.180
I'm sure you've heard
that term before.

00:12:49.180 --> 00:12:51.680
sRGB stands for
Standard RGB, and it

00:12:51.680 --> 00:12:53.320
was designed in the '90s.

00:12:53.320 --> 00:12:56.050
And it kind of matches the
reproduction capabilities

00:12:56.050 --> 00:12:59.050
of the CRT monitors
of back then.

00:12:59.050 --> 00:13:01.540
And to this day, it's
still used everywhere.

00:13:01.540 --> 00:13:04.420
It's pretty much the universal
color space, the only color

00:13:04.420 --> 00:13:06.790
space that you can count on.

00:13:06.790 --> 00:13:08.080
There are other color spaces.

00:13:08.080 --> 00:13:09.820
There is Adobe
RGB, for instance.

00:13:09.820 --> 00:13:12.160
It's the orange triangle.

00:13:12.160 --> 00:13:15.220
Because it's bigger than
the sRGB color space,

00:13:15.220 --> 00:13:18.850
we say that it's a wide color
space or it's a wide-gamut.

00:13:18.850 --> 00:13:22.060
So the three vertices of
the triangle, the triangle

00:13:22.060 --> 00:13:23.800
is something we call a gamut.

00:13:23.800 --> 00:13:25.175
And then there's
something called

00:13:25.175 --> 00:13:26.950
ProPhoto RGB that
you can see extends

00:13:26.950 --> 00:13:28.660
beyond the visible spectrum.

00:13:28.660 --> 00:13:30.520
And this is not a
color space that we

00:13:30.520 --> 00:13:32.870
use to actually represent
colors on the screen.

00:13:32.870 --> 00:13:34.990
It is what we call a
working color space.

00:13:34.990 --> 00:13:37.180
For instance, when I take
a picture with my camera,

00:13:37.180 --> 00:13:40.060
my camera is set to Adobe
RGB, so it captures everything

00:13:40.060 --> 00:13:42.070
in the color space
that you see on screen.

00:13:42.070 --> 00:13:44.170
Then when I import my
photo in Lightroom,

00:13:44.170 --> 00:13:48.520
Adobe Lightroom internally
works in ProPhoto RGB.

00:13:48.520 --> 00:13:51.491
And it won't be able to recreate
all the colors that it's

00:13:51.491 --> 00:13:52.990
working with on
screen, but the idea

00:13:52.990 --> 00:13:54.730
is to have as much
precision as possible.

00:13:54.730 --> 00:13:58.570
So you can ignore this kind
of color space for your needs

00:13:58.570 --> 00:14:00.460
on Android applications.

00:14:00.460 --> 00:14:03.280
So I said a color space
has three primaries,

00:14:03.280 --> 00:14:06.070
and the primaries really
are the coordinates

00:14:06.070 --> 00:14:07.450
of each one of
the three vertices

00:14:07.450 --> 00:14:10.450
of a triangle in that
chromaticity diagram,

00:14:10.450 --> 00:14:12.260
in the visible spectrum.

00:14:12.260 --> 00:14:14.230
So they identify,
when you [INAUDIBLE]

00:14:14.230 --> 00:14:16.900
so it's that you want a
color that's red equals 1,

00:14:16.900 --> 00:14:19.720
green equals 0, blue
equals 0, it tells you

00:14:19.720 --> 00:14:21.680
what red we're talking about.

00:14:21.680 --> 00:14:25.780
And if you look here on the
screen, sRGB and Adobe RGB,

00:14:25.780 --> 00:14:29.320
when you say red equals 1,
they have the same exact red,

00:14:29.320 --> 00:14:32.180
but ProPhoto RGB
has a different red.

00:14:32.180 --> 00:14:35.045
So it's two different reds for
us, and then they [INAUDIBLE]

00:14:35.045 --> 00:14:35.670
for computers,.

00:14:35.670 --> 00:14:36.880
We'll take a look at that.

00:14:36.880 --> 00:14:38.080
And then we also
need a white point,

00:14:38.080 --> 00:14:39.680
and the white point
is the same idea,

00:14:39.680 --> 00:14:45.040
it gives us the coordinates
of white in the color space,

00:14:45.040 --> 00:14:48.410
and we'll get back to that.

00:14:48.410 --> 00:14:50.701
So I also mentioned
transfer functions.

00:14:50.701 --> 00:14:52.700
Transfer functions are a
little bit complicated.

00:14:52.700 --> 00:14:55.190
That's where a lot of
math comes into play.

00:14:55.190 --> 00:14:57.530
You've probably heard about
them under the name gamma,

00:14:57.530 --> 00:15:00.650
so if you heard about
gamma correction,

00:15:00.650 --> 00:15:02.120
that's actually
transfer functions.

00:15:02.120 --> 00:15:04.510
So I gave a talk last year
about transfer functions.

00:15:04.510 --> 00:15:06.670
I don't have time to
talk about them today.

00:15:06.670 --> 00:15:09.410
I'm going to show you a
link at the end of the talk.

00:15:09.410 --> 00:15:11.201
If you're interested,
you should definitely

00:15:11.201 --> 00:15:12.225
go look at that talk.

00:15:12.225 --> 00:15:13.850
There's a lot of
things that you should

00:15:13.850 --> 00:15:15.560
learn about transfer
functions that

00:15:15.560 --> 00:15:17.890
can impact your applications.

00:15:17.890 --> 00:15:20.024
So I've been talking
about color spaces.

00:15:20.024 --> 00:15:21.940
But why do we care so
much about color spaces?

00:15:21.940 --> 00:15:24.400
So the problem is that
every device out there

00:15:24.400 --> 00:15:26.401
has a different color space.

00:15:26.401 --> 00:15:28.900
So for instance, you can have
a phone that has an LCD screen

00:15:28.900 --> 00:15:30.400
and is going to
be close to sRGB,

00:15:30.400 --> 00:15:32.385
you have a phone that
has a [INAUDIBLE] screen

00:15:32.385 --> 00:15:36.010
and is going to be closer to
P3, to a color space called P3,

00:15:36.010 --> 00:15:38.712
or to the Adobe RGB color
space that we just saw,

00:15:38.712 --> 00:15:40.670
and something for your
laptop for your computer

00:15:40.670 --> 00:15:42.010
or for your TV.

00:15:42.010 --> 00:15:44.230
And things get even
worse, because even

00:15:44.230 --> 00:15:46.660
if you have two phones,
they're the same model,

00:15:46.660 --> 00:15:49.510
they're the same manufacturer,
they're both supposed to be,

00:15:49.510 --> 00:15:53.200
let's say P3, there are
variations in the manufacturing

00:15:53.200 --> 00:15:54.110
process.

00:15:54.110 --> 00:15:55.820
So they won't be
the exact same P3,

00:15:55.820 --> 00:15:59.820
so the colors won't be exactly
the same on those two devices.

00:15:59.820 --> 00:16:01.560
I'll show you an
example of what happens.

00:16:01.560 --> 00:16:03.260
So let's imagine
that we have content

00:16:03.260 --> 00:16:06.950
that we created for sRGB, so
it's in the sRGB color space.

00:16:06.950 --> 00:16:08.870
We designed it at
home on our computer

00:16:08.870 --> 00:16:10.370
that shows us RGB colors.

00:16:10.370 --> 00:16:12.380
That's the wide
triangle you see.

00:16:12.380 --> 00:16:16.070
And then if we take that content
as is, we don't do anything

00:16:16.070 --> 00:16:19.460
to it, and we just show
it on the display that's

00:16:19.460 --> 00:16:21.272
Adobe RGB, what
we're going to do

00:16:21.272 --> 00:16:23.230
is we're going to just
take those RGB triplets,

00:16:23.230 --> 00:16:25.730
those values we had,
and reinterpret them

00:16:25.730 --> 00:16:27.050
in a different color space.

00:16:27.050 --> 00:16:30.270
So suddenly your green
that you had in this RGB,

00:16:30.270 --> 00:16:33.260
like that green equals one, is
going to be a different green.

00:16:33.260 --> 00:16:36.020
It's going to look completely
different to your user who's

00:16:36.020 --> 00:16:40.050
using an Adobe RGB screen.

00:16:40.050 --> 00:16:42.170
So here are concrete examples.

00:16:42.170 --> 00:16:43.880
This is a photo I took.

00:16:43.880 --> 00:16:45.140
I took it in Adobe RGB.

00:16:45.140 --> 00:16:46.670
I processed it in ProPhoto RGB.

00:16:46.670 --> 00:16:50.996
I converted it nicely on my
calibrated monitor to sRGB.

00:16:50.996 --> 00:16:52.370
This is what it
should look like.

00:16:52.370 --> 00:16:55.607
Actually this is not what it
should look like on my laptop.

00:16:55.607 --> 00:16:58.190
It's what it should look like,
because those [? trains ?] have

00:16:58.190 --> 00:16:58.900
a curved space.

00:16:58.900 --> 00:17:02.360
I have no idea what it is,
but it's definitely not sRGB.

00:17:02.360 --> 00:17:03.703
And this is really wrong.

00:17:03.703 --> 00:17:05.119
But what matters
is the difference

00:17:05.119 --> 00:17:06.980
between the next photos.

00:17:06.980 --> 00:17:09.319
So let's say that
this is proper sRGB.

00:17:09.319 --> 00:17:11.750
This is how I wanted
you to see the picture.

00:17:11.750 --> 00:17:13.790
Now if I display
the picture as is

00:17:13.790 --> 00:17:16.431
on a different screen
that said this is P3,

00:17:16.431 --> 00:17:17.680
it is going to look like this.

00:17:17.680 --> 00:17:19.499
If I go back and forth,
you can see there's

00:17:19.499 --> 00:17:20.540
a difference in contrast.

00:17:20.540 --> 00:17:23.270
Some of the colors are a
little bit more saturated.

00:17:23.270 --> 00:17:26.720
So already my photo does not
look like the way intended.

00:17:26.720 --> 00:17:29.840
Then if I display it on
the ProPhoto RGB display,

00:17:29.840 --> 00:17:32.640
if such a thing existed,
it would look like this.

00:17:32.640 --> 00:17:34.876
So supersaturated,
really garish.

00:17:34.876 --> 00:17:37.250
I don't know about you, I
really don't like this picture.

00:17:37.250 --> 00:17:40.761
And that happens when you
only affect the primaries.

00:17:40.761 --> 00:17:42.260
But you can have
similar issues when

00:17:42.260 --> 00:17:44.210
you affect the white points.

00:17:44.210 --> 00:17:47.435
So the next slide here,
that is the same sRGB photo.

00:17:47.435 --> 00:17:50.240
So we kept the primaries,
but I changed the white point

00:17:50.240 --> 00:17:51.656
to something that's bluish.

00:17:51.656 --> 00:17:53.780
And so in my photo, well,
you know it's underwater,

00:17:53.780 --> 00:17:55.610
so it kind of makes
sense to be blue,

00:17:55.610 --> 00:17:58.230
but it is not the way I
wanted it to look like.

00:17:58.230 --> 00:18:00.927
So again if you take multiple
Android devices, for instance,

00:18:00.927 --> 00:18:02.510
and you put them
side by side, chances

00:18:02.510 --> 00:18:04.750
are that some screens
will appear yellow to you,

00:18:04.750 --> 00:18:07.077
some screens will appear
blue to you or green,

00:18:07.077 --> 00:18:08.660
and that's because
of the white point.

00:18:08.660 --> 00:18:10.993
We have different white points
across multiple displays.

00:18:10.993 --> 00:18:12.980
And once again, the
same model of device

00:18:12.980 --> 00:18:15.490
from the same
manufacturer, there

00:18:15.490 --> 00:18:18.380
are going to be white
point variations.

00:18:18.380 --> 00:18:22.250
So when this happens, we say
that colors are unmanaged.

00:18:22.250 --> 00:18:26.540
This is what Android has
been doing since Android 1.0,

00:18:26.540 --> 00:18:28.280
and I hate it,
absolutely hate it.

00:18:28.280 --> 00:18:30.260
It's horrible.

00:18:30.260 --> 00:18:33.140
Your designers will spend
hours and hours slaving away

00:18:33.140 --> 00:18:35.570
on their computer,
creating a beautiful UI,

00:18:35.570 --> 00:18:38.630
then you test it on a phone
and it's completely different,

00:18:38.630 --> 00:18:40.580
and you test it on
another phone and it looks

00:18:40.580 --> 00:18:42.050
completely different again.

00:18:42.050 --> 00:18:44.540
So you might be
thinking, how can we

00:18:44.540 --> 00:18:47.240
have our design look
exactly the way we want?

00:18:47.240 --> 00:18:50.270
So the solution is something
called color management.

00:18:50.270 --> 00:18:52.940
And it's new to Android O.

00:18:52.940 --> 00:18:56.240
So the idea is that every
color that we want to display

00:18:56.240 --> 00:18:58.670
needs to be associated
with a color space.

00:18:58.670 --> 00:19:02.580
We need to know what was the
original intent of the design,

00:19:02.580 --> 00:19:04.190
so we need that information.

00:19:04.190 --> 00:19:07.400
Then, through the magic of
a lot of math and matrices--

00:19:07.400 --> 00:19:09.870
it's actually more complicated
than just a matrix,

00:19:09.870 --> 00:19:11.660
but that's most of it--

00:19:11.660 --> 00:19:14.350
we're going to do a controlled
conversion to the destination

00:19:14.350 --> 00:19:14.850
color space.

00:19:14.850 --> 00:19:16.535
So what we're going to do
is that, when we manufacture

00:19:16.535 --> 00:19:19.100
a device, we're going to
use special devices that

00:19:19.100 --> 00:19:21.547
will measure the
capabilities of the display.

00:19:21.547 --> 00:19:23.880
We're going to measure the
primaries and the white point

00:19:23.880 --> 00:19:26.240
of the device, we're going
to create a destination color

00:19:26.240 --> 00:19:30.470
space, and then we can
convert your original content

00:19:30.470 --> 00:19:33.920
to the destination color space
and preserve the same colors

00:19:33.920 --> 00:19:36.110
that you wanted to have.

00:19:36.110 --> 00:19:38.281
So this is something we're
introducing in Android O.

00:19:38.281 --> 00:19:39.530
And there are two parts of it.

00:19:39.530 --> 00:19:41.589
There's first color
management proper,

00:19:41.589 --> 00:19:43.880
and then there is something
called the wide color gamut

00:19:43.880 --> 00:19:44.379
rendering.

00:19:44.379 --> 00:19:46.030
And we're going to
take a look at both.

00:19:46.030 --> 00:19:48.800
But first, before you need
to worry about Android,

00:19:48.800 --> 00:19:51.470
you need to make sure
that you or your designers

00:19:51.470 --> 00:19:55.255
are using color spaces properly
in your design application.

00:19:55.255 --> 00:19:57.380
And there are two things
you can do with pictures--

00:19:57.380 --> 00:20:01.100
you can assign a color space, or
you can convert a color space.

00:20:01.100 --> 00:20:05.770
So I'm going to
switch to a demo,

00:20:05.770 --> 00:20:08.160
but first I just
want to show you,

00:20:08.160 --> 00:20:10.680
earlier I said that color
spaces, this chromaticity

00:20:10.680 --> 00:20:12.700
diagram we had, the
horseshoe shape,

00:20:12.700 --> 00:20:17.430
it's a slice of the
color space, and so are

00:20:17.430 --> 00:20:20.540
the gamuts, those triangles.

00:20:20.540 --> 00:20:23.669
So this is sRGB in 3-D.
And it's interesting

00:20:23.669 --> 00:20:25.960
because I mentioned that our
eyes see more in the dark.

00:20:25.960 --> 00:20:27.550
And you can see that
in that diagram,

00:20:27.550 --> 00:20:32.340
the brighter the colors, the
fewer Us we can perceive.

00:20:35.980 --> 00:20:41.400
So for the demo, I'm using a
tool called Affinity Photo.

00:20:41.400 --> 00:20:43.780
And this is a picture
I took, same process.

00:20:43.780 --> 00:20:44.820
I took it in Adobe RGB.

00:20:44.820 --> 00:20:49.270
I was using [INAUDIBLE] files
from my camera, from my DSLR.

00:20:49.270 --> 00:20:51.920
I used ProPhoto RGB to
do my work in Lightroom.

00:20:51.920 --> 00:20:54.500
And I created this RGB
version of the picture.

00:20:54.500 --> 00:20:59.950
And if we zoom in, pretty much
any good design tool somewhere

00:20:59.950 --> 00:21:02.470
will show you the color
space of your image.

00:21:02.470 --> 00:21:05.220
So here we know
it's an sRGB image.

00:21:05.220 --> 00:21:08.290
I'm going to calibrate
display, looks fine.

00:21:08.290 --> 00:21:11.500
And like I said, you can assign
a color space, often called

00:21:11.500 --> 00:21:13.290
an ICC profile, or
you can convert.

00:21:13.290 --> 00:21:16.450
So if you assign,
what you're saying is

00:21:16.450 --> 00:21:18.780
keep the colors the way they
are, keep the same values.

00:21:18.780 --> 00:21:22.190
I just want to move them
to a different color space.

00:21:22.190 --> 00:21:25.870
So let's say we move to
the ProPhoto color space,

00:21:25.870 --> 00:21:27.250
and now it looks like this.

00:21:27.250 --> 00:21:28.907
This is exactly
what Android does.

00:21:28.907 --> 00:21:30.490
This is not the right
way of doing it.

00:21:30.490 --> 00:21:32.269
Sometimes that's what
you want because you

00:21:32.269 --> 00:21:34.060
know what you're doing,
but very often it's

00:21:34.060 --> 00:21:35.310
not going to be what you want.

00:21:35.310 --> 00:21:39.770
So instead, what you want to
do is do convert ICC profile.

00:21:39.770 --> 00:21:42.910
It's sometimes called match.

00:21:42.910 --> 00:21:45.700
So we pick ProPhoto,
and when I click,

00:21:45.700 --> 00:21:46.796
you'll see no difference.

00:21:46.796 --> 00:21:47.920
And this is what we wanted.

00:21:47.920 --> 00:21:51.500
But what happens is that every
single RGB value has changed.

00:21:51.500 --> 00:21:53.770
It just looks the same, we
just have different values

00:21:53.770 --> 00:21:56.561
stored inside the image.

00:21:56.561 --> 00:21:59.060
And to give you an idea what
happens to your Android design,

00:21:59.060 --> 00:22:00.810
so this is a screenshot
I took of my pixel

00:22:00.810 --> 00:22:07.090
2016 running Android N. And on
Android we pretty much assume

00:22:07.090 --> 00:22:08.500
that all the content is RGB.

00:22:08.500 --> 00:22:11.170
So when I opened this
file in the tool,

00:22:11.170 --> 00:22:13.170
I was warned that there
was no color space

00:22:13.170 --> 00:22:15.490
and that the tool is in sRGB.

00:22:15.490 --> 00:22:19.990
Now when you display the
screenshots on a [INAUDIBLE]

00:22:19.990 --> 00:22:24.580
display, because we don't
manage color, what happens

00:22:24.580 --> 00:22:28.010
on that pixel 2016 is this.

00:22:28.010 --> 00:22:31.460
So I hope you can
see the difference.

00:22:31.460 --> 00:22:33.340
If you look at the right
icons at the bottom,

00:22:33.340 --> 00:22:35.900
you can see that everything
becomes more saturated.

00:22:35.900 --> 00:22:38.350
So that's what you
designed, and that's

00:22:38.350 --> 00:22:39.860
what you see on an actual phone.

00:22:43.220 --> 00:22:46.350
All right, so when you don't
know where the color space is,

00:22:46.350 --> 00:22:47.527
just assume it's sRGB.

00:22:47.527 --> 00:22:49.110
It's the only
assumption you can make.

00:22:49.110 --> 00:22:51.270
And this is why, for instance,
all my photos are sRGB,

00:22:51.270 --> 00:22:53.060
because when I put
them online on the web,

00:22:53.060 --> 00:22:54.570
I have no idea what display
you're going to use,

00:22:54.570 --> 00:22:56.130
I have no idea what device
you're going to use,

00:22:56.130 --> 00:22:58.338
I don't know if your app is
going to be color managed

00:22:58.338 --> 00:23:00.120
or not, and sRGB
is your safest bet.

00:23:00.120 --> 00:23:03.480
It won't be always correct,
but it's your safest bet.

00:23:03.480 --> 00:23:06.930
So when you use a design tool
and you have a color picker,

00:23:06.930 --> 00:23:09.270
if there's no information
about the color space anywhere

00:23:09.270 --> 00:23:13.500
in the tool, you are most
likely using either sRGB or what

00:23:13.500 --> 00:23:16.850
we call native gamut, which
is whatever the screen can do.

00:23:16.850 --> 00:23:19.392
For instance, this is
what Apple Keynote does.

00:23:19.392 --> 00:23:21.100
When you pick a color,
you pick the color

00:23:21.100 --> 00:23:24.019
directly for your display
and not another display.

00:23:24.019 --> 00:23:25.560
If your application
is color managed,

00:23:25.560 --> 00:23:27.080
and your document
has a color space,

00:23:27.080 --> 00:23:30.690
you're picking a color
in that color space.

00:23:30.690 --> 00:23:32.720
Some color pickers
are more advanced,

00:23:32.720 --> 00:23:35.460
so this is for instance, on
Mac OS Sierra, if you click

00:23:35.460 --> 00:23:37.346
that little gear
in the second tab,

00:23:37.346 --> 00:23:38.970
you can choose the
color space you want

00:23:38.970 --> 00:23:40.960
to use for the color picker.

00:23:40.960 --> 00:23:43.020
Actually when I was
working on these slides,

00:23:43.020 --> 00:23:45.240
I picked colors for
the slides and then I

00:23:45.240 --> 00:23:47.190
was creating diagrams
into a different tool

00:23:47.190 --> 00:23:49.620
and I tried to match
the colors and I

00:23:49.620 --> 00:23:53.130
forgot that I had to change
the two sRGB in this picker,

00:23:53.130 --> 00:23:54.902
so it took me five
minutes to understand

00:23:54.902 --> 00:23:56.110
why my colors were different.

00:23:56.110 --> 00:23:58.193
So even when you know about
color spaces and color

00:23:58.193 --> 00:24:00.660
management, it can
sometimes be confusing.

00:24:00.660 --> 00:24:03.206
Another tool you can use
on Mac OS for instance,

00:24:03.206 --> 00:24:04.830
and other platforms
with similar tools,

00:24:04.830 --> 00:24:06.690
is the digital color meter.

00:24:06.690 --> 00:24:09.660
It's in the application
slash utilities folder.

00:24:09.660 --> 00:24:11.700
It lets you pick any
color on the screen.

00:24:11.700 --> 00:24:14.430
And using the drop-down, you
can choose the color space

00:24:14.430 --> 00:24:15.700
you want for that color.

00:24:15.700 --> 00:24:18.045
So you can look at the
color in the native gamut

00:24:18.045 --> 00:24:21.954
of the display, or you can
use sRGB, or P3, or whatever.

00:24:21.954 --> 00:24:24.120
On Android, if you have a
recent version of Android,

00:24:24.120 --> 00:24:25.994
and if you have a pixel
device, for instance,

00:24:25.994 --> 00:24:27.930
if you go to the
developer options,

00:24:27.930 --> 00:24:30.330
you can turn on the sRGB mode.

00:24:30.330 --> 00:24:33.660
So here, what we're going to
do is apply color correction.

00:24:33.660 --> 00:24:37.170
We're going to apply color
management to the display

00:24:37.170 --> 00:24:40.140
to make sure that all the colors
are interpreted and reproduced

00:24:40.140 --> 00:24:41.477
as sRGB.

00:24:41.477 --> 00:24:42.810
You might be surprised at first.

00:24:42.810 --> 00:24:45.810
A lot of people complain that
the colors looked washed out.

00:24:45.810 --> 00:24:47.650
They were actually
more accurate.

00:24:47.650 --> 00:24:49.550
It's just a matter of habits.

00:24:49.550 --> 00:24:51.330
All right, so now some code.

00:24:51.330 --> 00:24:54.450
So on Android, what
you've been using so far

00:24:54.450 --> 00:24:56.750
is what we call the
ColorInt, just an int,

00:24:56.750 --> 00:24:59.740
it contains alpha,
red, green, and blue.

00:24:59.740 --> 00:25:01.242
And the only
assumption we can make,

00:25:01.242 --> 00:25:03.450
because we don't know what
color space you are using,

00:25:03.450 --> 00:25:07.420
is that it's sRGB, so
it's pretty simple.

00:25:07.420 --> 00:25:11.370
Now in O, we're introducing
a crazy new API.

00:25:11.370 --> 00:25:13.870
We've had that color
class for 10 years

00:25:13.870 --> 00:25:15.620
but only as static methods.

00:25:15.620 --> 00:25:18.270
Now you can create instances
of the color class.

00:25:18.270 --> 00:25:21.330
You can actually use color
the way it was meant to be.

00:25:21.330 --> 00:25:24.480
So you just call value of,
you give your RGB values,

00:25:24.480 --> 00:25:26.940
and that's going to give you
a sense of the color class

00:25:26.940 --> 00:25:27.600
in sRGB.

00:25:27.600 --> 00:25:30.050
Because note, I didn't
specify the color space,

00:25:30.050 --> 00:25:32.970
so my assumption is it is sRGB.

00:25:32.970 --> 00:25:35.740
You can also specify
the color space.

00:25:35.740 --> 00:25:38.720
So here we also call value
of, we pass the alpha,

00:25:38.720 --> 00:25:41.396
so the order is
RGBa, when it floats,

00:25:41.396 --> 00:25:43.020
and then we say that
we want that color

00:25:43.020 --> 00:25:45.580
to be in the Adobe RGB space.

00:25:45.580 --> 00:25:48.160
What this allows us to
do is work with color

00:25:48.160 --> 00:25:50.560
so we can convert them from
one color space to the other.

00:25:50.560 --> 00:25:53.680
So I have this Adobe RGB
color, and if I call convert,

00:25:53.680 --> 00:25:56.520
I can convert it to
display P3 for instance.

00:26:00.180 --> 00:26:03.174
Someone's happy.

00:26:03.174 --> 00:26:04.590
Something else we
are introducing.

00:26:04.590 --> 00:26:06.750
So color ints are really
useful because they're

00:26:06.750 --> 00:26:10.620
easy to manipulate, they're
small, they're easy to store.

00:26:10.620 --> 00:26:14.000
And color objects, the
color class is very generic.

00:26:14.000 --> 00:26:15.210
It can represent colors.

00:26:15.210 --> 00:26:17.980
It uses a float [INAUDIBLE]
as a reference to color space,

00:26:17.980 --> 00:26:19.470
so it can be a
pretty heavy object.

00:26:19.470 --> 00:26:21.600
So now we have something
we call the color long.

00:26:21.600 --> 00:26:23.280
It's the same idea
as the color int.

00:26:23.280 --> 00:26:25.350
We use a primitive
type to store color.

00:26:25.350 --> 00:26:28.930
But we also store the
color space for that color.

00:26:28.930 --> 00:26:30.350
So it's similar to value of.

00:26:30.350 --> 00:26:33.300
You just call pack instead,
and you get to long.

00:26:33.300 --> 00:26:35.520
And here's the
format of the long.

00:26:35.520 --> 00:26:38.130
So we have 16 bits
for the red channel,

00:26:38.130 --> 00:26:41.130
16 bits for the green channel,
16 bits for the blue channel,

00:26:41.130 --> 00:26:42.870
we have 10 bits for
the alpha channel,

00:26:42.870 --> 00:26:45.750
and then we have six
bits that identify one

00:26:45.750 --> 00:26:47.970
of the built-in color spaces.

00:26:47.970 --> 00:26:50.670
And those 16-bit
values, they use

00:26:50.670 --> 00:26:52.950
something called half floats.

00:26:52.950 --> 00:26:56.310
So they are floats that use
only 16 bits instead of 32 bits.

00:26:56.310 --> 00:26:59.770
So there's a new API in O called
android.util.Half that lets

00:26:59.770 --> 00:27:01.410
you manipulate half floats.

00:27:01.410 --> 00:27:06.090
Anybody who does HDR or advanced
rendering in Open G or Vulkan

00:27:06.090 --> 00:27:08.230
might find that API useful.

00:27:08.230 --> 00:27:10.156
If you use the color
class, you don't have

00:27:10.156 --> 00:27:11.280
to worry too much about it.

00:27:11.280 --> 00:27:13.440
There's a ton of
utility methods on color

00:27:13.440 --> 00:27:18.530
that will use the half
API on your behalf.

00:27:18.530 --> 00:27:21.030
So we also have the
color space class.

00:27:21.030 --> 00:27:22.172
It's well documented.

00:27:22.172 --> 00:27:23.130
It's pretty easy to do.

00:27:23.130 --> 00:27:25.000
You just call get,
and you can create

00:27:25.000 --> 00:27:26.980
one of the common color
spaces that we provide.

00:27:26.980 --> 00:27:29.860
You can create your own
color spaces if you want.

00:27:29.860 --> 00:27:32.170
Two methods that are
interesting on color space.

00:27:32.170 --> 00:27:33.460
There is white gamut.

00:27:33.460 --> 00:27:36.880
It will tell you if it's a
whiter gamut than this RGB.

00:27:36.880 --> 00:27:39.280
And get model, it will tell
you how many components

00:27:39.280 --> 00:27:43.740
are in the color space, so RGB,
CMYK, Adobe, stuff like that.

00:27:43.740 --> 00:27:47.380
If the model is
RGB, you can cast it

00:27:47.380 --> 00:27:49.660
to color space
[? dot ?] RGB, that

00:27:49.660 --> 00:27:51.190
gives you access to more APIs.

00:27:51.190 --> 00:27:52.360
You can query the primaries.

00:27:52.360 --> 00:27:53.520
You can query the white points.

00:27:53.520 --> 00:27:55.269
You have access to the
transfer functions.

00:27:55.269 --> 00:27:58.355
This is also very
well documented.

00:27:58.355 --> 00:28:00.480
If you want to do conversions
between color spaces,

00:28:00.480 --> 00:28:01.870
it's pretty simple.

00:28:01.870 --> 00:28:04.260
You call connect, you
give us the source color

00:28:04.260 --> 00:28:06.329
space and the
destination color space.

00:28:06.329 --> 00:28:08.370
And the reason why where
you need to call correct

00:28:08.370 --> 00:28:10.661
is that we need to make sure
that both color spaces use

00:28:10.661 --> 00:28:11.742
the same white points.

00:28:11.742 --> 00:28:13.950
So when the color spaces
have different white points,

00:28:13.950 --> 00:28:15.750
we do a little bit
of math internally

00:28:15.750 --> 00:28:20.670
to make them use the same
white point, effectively.

00:28:20.670 --> 00:28:22.830
So then you can call
the transfer method,

00:28:22.830 --> 00:28:24.690
you can give us RGB
values, and we're

00:28:24.690 --> 00:28:29.790
going to give you back
the corrected RGB values.

00:28:29.790 --> 00:28:33.250
You can also change the
white point of a color space.

00:28:33.250 --> 00:28:35.310
So if you call
adapt, color space

00:28:35.310 --> 00:28:36.850
dot adapt-- so
here for instance,

00:28:36.850 --> 00:28:39.720
we do what I did for one of my
examples, my photo of the fish

00:28:39.720 --> 00:28:43.150
that was very blue, we
took the sRGB color space

00:28:43.150 --> 00:28:46.000
and then changed the white
point from something called d 65

00:28:46.000 --> 00:28:48.610
to something called
d 50 that's bluer.

00:28:48.610 --> 00:28:52.280
White points are usually
defined as a color temperature.

00:28:52.280 --> 00:28:54.610
It's the perceived
color of a black body

00:28:54.610 --> 00:28:56.360
when you heat it to
that temperature.

00:28:56.360 --> 00:29:00.790
So here d50 is 5,000 degrees
Kelvin and it's blue,

00:29:00.790 --> 00:29:04.300
And d65, which is a
very common white point

00:29:04.300 --> 00:29:07.450
in color spaces
for our monitors,

00:29:07.450 --> 00:29:10.430
it's 6,504 degrees Kelvin.

00:29:10.430 --> 00:29:11.380
It's more yellow.

00:29:14.040 --> 00:29:19.690
Bitmaps, we know, support color
spaces embedded in bitmap.

00:29:19.690 --> 00:29:21.330
So they are called ICC profiles.

00:29:21.330 --> 00:29:23.970
Until now, we would just ignore
it completely on Android.

00:29:23.970 --> 00:29:26.250
So if you use bitmap factory
to decode the bitmap,

00:29:26.250 --> 00:29:28.720
now you can call get
color space on the bitmap,

00:29:28.720 --> 00:29:30.360
and we're going to
tell you what it is.

00:29:30.360 --> 00:29:32.400
Most likely, for
most images you are

00:29:32.400 --> 00:29:34.800
going to load, and presumably
for all your resources

00:29:34.800 --> 00:29:38.520
that come inside your APK, the
answer is going to be sRGB.

00:29:38.520 --> 00:29:40.650
So you can call a
color space that

00:29:40.650 --> 00:29:42.990
is sRGB to check what
kind of color space it is.

00:29:45.840 --> 00:29:48.140
And that's very important.

00:29:48.140 --> 00:29:52.220
All the bitmaps on Android are
always in the RGB color model.

00:29:52.220 --> 00:29:54.860
We might expand on
that in the future,

00:29:54.860 --> 00:29:59.180
but we don't let you use L*a*b
or CMYK or xyz or any of that.

00:29:59.180 --> 00:30:01.569
They are always RGB.

00:30:01.569 --> 00:30:03.860
Right now, when you call get
color space on the bitmap,

00:30:03.860 --> 00:30:07.040
can always cast it to
a color space at RGB.

00:30:07.040 --> 00:30:08.960
It might not be
future proof, so just

00:30:08.960 --> 00:30:12.200
make sure by checking
the color model.

00:30:12.200 --> 00:30:15.350
You can do more interesting
things with bitmap factory.

00:30:15.350 --> 00:30:20.240
So on bitmap factory.options, we
have this horribly named field

00:30:20.240 --> 00:30:23.520
called inJustDecodeBounds.

00:30:23.520 --> 00:30:25.280
It was originally
created to let you

00:30:25.280 --> 00:30:29.210
query the dimensions of an
image without having to decode

00:30:29.210 --> 00:30:30.377
all the pixels in the image.

00:30:30.377 --> 00:30:31.251
So it's really quick.

00:30:31.251 --> 00:30:33.650
It gives you an idea of how
big the image is going to be.

00:30:33.650 --> 00:30:35.810
Over the years,
we've kind of abused

00:30:35.810 --> 00:30:37.640
this field, so now
it's going to tell you

00:30:37.640 --> 00:30:40.430
the configuration of the
bitmap, you know, is it RGB888,

00:30:40.430 --> 00:30:42.920
is it RGB 5 6 5?

00:30:42.920 --> 00:30:45.740
And now it also tells you
what the color space is.

00:30:45.740 --> 00:30:48.440
So if you want to know the
color space of a bitmap ahead

00:30:48.440 --> 00:30:50.780
of time, you have to
ask us to give you

00:30:50.780 --> 00:30:52.700
just the [? balance, ?]
just the dimensions.

00:30:52.700 --> 00:30:56.810
So you call your decode
method on bitmap factory,

00:30:56.810 --> 00:30:59.120
you press your
options, and then we

00:30:59.120 --> 00:31:01.340
have this field called out
color space that tells you

00:31:01.340 --> 00:31:03.030
what is the color
space of the bitmap.

00:31:03.030 --> 00:31:05.930
So if you want to make sure that
the map is in the right color

00:31:05.930 --> 00:31:08.270
space before loading
it, you can do this.

00:31:08.270 --> 00:31:11.300
And if it's not in
the right color space,

00:31:11.300 --> 00:31:15.020
you can use this other API in
options called preferred color

00:31:15.020 --> 00:31:16.790
space, where you
can tell us what

00:31:16.790 --> 00:31:20.676
you want the color space of
the decoded bitmap to be.

00:31:20.676 --> 00:31:22.050
So in this example,
for instance,

00:31:22.050 --> 00:31:23.970
let's say we query the
color space of the bitmap.

00:31:23.970 --> 00:31:25.220
We saw that it was Adobe RGB.

00:31:25.220 --> 00:31:26.720
I don't want Adobe RGB.

00:31:26.720 --> 00:31:27.530
I want sRGB.

00:31:27.530 --> 00:31:29.090
So I can use in
preferred color space

00:31:29.090 --> 00:31:31.790
to force the system to
convert it at load time.

00:31:31.790 --> 00:31:34.430
Then you could just call decode.

00:31:34.430 --> 00:31:38.840
We are also introducing in
Android O 16-bit bitmaps.

00:31:38.840 --> 00:31:41.730
So they are bitmaps that
use 16 bits per channel.

00:31:41.730 --> 00:31:44.870
And those bitmaps are always,
always in a color space called

00:31:44.870 --> 00:31:46.910
linear extended
sRGB, and we're going

00:31:46.910 --> 00:31:48.590
to take a look at what it is.

00:31:48.590 --> 00:31:50.700
So when you have
a 16-bit bitmap,

00:31:50.700 --> 00:31:52.350
don't try to convert
the color space.

00:31:52.350 --> 00:31:55.420
We're not going to let
you, at least for now.

00:31:55.420 --> 00:31:57.400
This is how you create
a wide gamut bitmap.

00:31:57.400 --> 00:32:00.640
You just call create bitmap, you
specify the width, the height,

00:32:00.640 --> 00:32:03.070
the configuration,
the Boolean tells us

00:32:03.070 --> 00:32:04.639
whether there's
alpha in the bitmap,

00:32:04.639 --> 00:32:06.430
and then you just give
us your color space.

00:32:06.430 --> 00:32:09.060
So it's pretty simple.

00:32:09.060 --> 00:32:12.180
Bitmap, as API, it lets
you read and write pixels

00:32:12.180 --> 00:32:13.780
inside the bitmap.

00:32:13.780 --> 00:32:17.760
So because get pixel and set
pixel are used color ints,

00:32:17.760 --> 00:32:19.230
they have to use sRGB.

00:32:19.230 --> 00:32:22.736
So when you call get pixel
on a bitmap that is not sRGB,

00:32:22.736 --> 00:32:24.360
we're going to do a
conversion for you.

00:32:24.360 --> 00:32:25.820
Same thing when
you call set pixel.

00:32:25.820 --> 00:32:29.210
We expect this RGB, so you have
to do the conversion yourself.

00:32:29.210 --> 00:32:34.840
Now if you use this other API
called copy pixels to buffer,

00:32:34.840 --> 00:32:37.370
it gives you access to the
raw data of the bitmap.

00:32:37.370 --> 00:32:39.450
So that data is going
to be the native color

00:32:39.450 --> 00:32:42.312
space of the bitmap left
completely untouched.

00:32:42.312 --> 00:32:43.770
You have to be a
little bit careful

00:32:43.770 --> 00:32:45.650
because of that
new configuration

00:32:45.650 --> 00:32:47.280
for 16-bit bitmaps.

00:32:47.280 --> 00:32:51.150
So if you load the 16-bit png,
the data in that byte buffer

00:32:51.150 --> 00:32:52.740
is going to be half
floats, it's not

00:32:52.740 --> 00:32:54.236
going to be those color ints.

00:32:54.236 --> 00:32:55.860
And that's where you
might want to take

00:32:55.860 --> 00:32:58.350
a look at android.util.Half.

00:32:58.350 --> 00:33:00.450
All right, so now
what happens when

00:33:00.450 --> 00:33:03.210
you draw bitmaps on the screen?

00:33:03.210 --> 00:33:05.370
Until now, what we're
doing is, we take a bitmap,

00:33:05.370 --> 00:33:07.560
we assume it's sRGB, we
send it to the screen.

00:33:07.560 --> 00:33:09.510
And if the screen
is not sRGB, too bad

00:33:09.510 --> 00:33:12.540
the colors are going
to be completely wrong.

00:33:12.540 --> 00:33:15.840
This is still what we do
by default on Android O.

00:33:15.840 --> 00:33:18.690
Now, if we have a bitmap
that we know is not sRGB,

00:33:18.690 --> 00:33:20.690
it has a color space
that's associated with it,

00:33:20.690 --> 00:33:22.950
we're going to do an sRGB
conversion on your behalf

00:33:22.950 --> 00:33:24.576
into the rendering pipeline.

00:33:24.576 --> 00:33:25.950
It can be a little
bit expensive,

00:33:25.950 --> 00:33:28.050
so you should avoid it
as much as you can if you

00:33:28.050 --> 00:33:30.570
don't need non-sRGB bitmaps.

00:33:30.570 --> 00:33:31.980
But at least the
colors are going

00:33:31.980 --> 00:33:33.188
to be correct on the display.

00:33:35.920 --> 00:33:39.520
Now if you render a bitmap
into another bitmap,

00:33:39.520 --> 00:33:41.530
so if you create a bitmap,
you create a canvas

00:33:41.530 --> 00:33:44.500
and then you call get
bitmap on that canvas,

00:33:44.500 --> 00:33:46.930
we're going to convert from
whatever the source color

00:33:46.930 --> 00:33:49.750
space is to whatever the
destination color space is.

00:33:49.750 --> 00:33:52.360
So if you want to convert a
bitmap from one color space

00:33:52.360 --> 00:33:55.840
to another, not at load time,
this is the way you do it.

00:33:55.840 --> 00:33:58.900
You just create this destination
bitmap, you create the canvas,

00:33:58.900 --> 00:34:00.310
and you just draw.

00:34:00.310 --> 00:34:02.800
So pretty simple.

00:34:02.800 --> 00:34:06.100
So we make all these
assumptions about sRGB,

00:34:06.100 --> 00:34:08.530
but like I said earlier,
if you remember,

00:34:08.530 --> 00:34:11.670
I said that all the displays
on our phones have wide gamuts,

00:34:11.670 --> 00:34:14.690
they can show more
colors than sRGB.

00:34:14.690 --> 00:34:17.980
Now the problem is is that
if we take your sRGB content

00:34:17.980 --> 00:34:20.560
and we don't stretch it to the
entire gamut of the display

00:34:20.560 --> 00:34:23.170
anymore, and we keep it
in that little triangle,

00:34:23.170 --> 00:34:25.719
we have all those unused
colors that we're not

00:34:25.719 --> 00:34:27.010
taking advantage of.

00:34:27.010 --> 00:34:29.205
So in Android O, we're
adding this new API,

00:34:29.205 --> 00:34:30.330
and it's super complicated.

00:34:30.330 --> 00:34:32.500
It's just one
attribute that you add

00:34:32.500 --> 00:34:34.600
to your manifest per activity.

00:34:34.600 --> 00:34:36.010
You have to tell
us that you want

00:34:36.010 --> 00:34:38.230
to render using
those extra colors,

00:34:38.230 --> 00:34:40.900
you want the wide
color gamut mode.

00:34:40.900 --> 00:34:47.770
The way it works is as follows,
if you are on a device that

00:34:47.770 --> 00:34:50.230
does not support that mode--
not all devices will support

00:34:50.230 --> 00:34:52.313
that mode, so if you are
on a device that does not

00:34:52.313 --> 00:34:54.190
support that mode,
your window is going

00:34:54.190 --> 00:34:56.701
to use the RGB 888 format.

00:34:56.701 --> 00:34:58.450
That's what we've been
using for 10 years,

00:34:58.450 --> 00:35:00.310
so there's nothing new there.

00:35:00.310 --> 00:35:03.730
You have your sRGB content which
is drawn directly on screen.

00:35:03.730 --> 00:35:06.225
If you have known this RGB
content, we convert it to sRGB

00:35:06.225 --> 00:35:07.840
and we send
everything to screen.

00:35:07.840 --> 00:35:09.430
Colors may be wrong,
but that's just

00:35:09.430 --> 00:35:12.550
because the device does not
support the new wide color

00:35:12.550 --> 00:35:13.840
gamut rendering.

00:35:13.840 --> 00:35:16.840
On the device that does support
wide color gamut rendering,

00:35:16.840 --> 00:35:18.640
we're going to make
a much larger window.

00:35:18.640 --> 00:35:20.330
We're going to use
16-bit per channel,

00:35:20.330 --> 00:35:22.946
so it's going to double the
size in memory of your window.

00:35:22.946 --> 00:35:24.820
It's going to double
the needs and bandwidth,

00:35:24.820 --> 00:35:26.540
so it is an expensive thing.

00:35:26.540 --> 00:35:29.750
So if you don't really need
a wide color gamut rendering,

00:35:29.750 --> 00:35:32.440
think twice before enabling it.

00:35:32.440 --> 00:35:35.650
If we have sRGB content, we're
going to send it directly

00:35:35.650 --> 00:35:38.250
to this display as well.

00:35:38.250 --> 00:35:40.080
And if we have
non-sRGB content, we're

00:35:40.080 --> 00:35:44.024
going to convert it to a color
space called extended sRGB.

00:35:44.024 --> 00:35:44.940
What is extended sRGB?

00:35:44.940 --> 00:35:48.570
In It's a kind of
weird color space,

00:35:48.570 --> 00:35:50.390
it's a really big color space.

00:35:50.390 --> 00:35:54.500
It's way bigger than the visible
spectrum, much, much bigger.

00:35:54.500 --> 00:35:57.200
And some of the values are
negative and some of the values

00:35:57.200 --> 00:35:58.460
are greater than 1.

00:35:58.460 --> 00:36:00.105
They go all the way to 7.5.

00:36:00.105 --> 00:36:01.730
And what's interesting
about that color

00:36:01.730 --> 00:36:04.040
space is that all the
values between 0 and 1

00:36:04.040 --> 00:36:06.310
match exactly the
sRGB color space.

00:36:06.310 --> 00:36:08.960
So what it enables us to do
is, we can take your existing

00:36:08.960 --> 00:36:11.553
content, all your sRGB content,
basically everything you

00:36:11.553 --> 00:36:14.040
have in your app today, and
we can draw it directly.

00:36:14.040 --> 00:36:16.360
We don't need to do any
conversion because it

00:36:16.360 --> 00:36:17.600
is going to match sRGB.

00:36:17.600 --> 00:36:20.470
So what we do is, we only
pay the cost of a conversion

00:36:20.470 --> 00:36:23.190
when we're drawing
non-sRGB content.

00:36:23.190 --> 00:36:25.940
The expense is that we
need 16-bit per channel,

00:36:25.940 --> 00:36:28.400
because we need a lot
of precision and range

00:36:28.400 --> 00:36:32.142
to be able to encode
this sRGB space,

00:36:32.142 --> 00:36:33.350
but it's much better for you.

00:36:33.350 --> 00:36:34.400
It's much simpler.

00:36:34.400 --> 00:36:37.070
You just have one attribute
in your application.

00:36:37.070 --> 00:36:39.680
Interestingly, because we
use 16-bit per channel,

00:36:39.680 --> 00:36:42.800
because of extended
sRGB, we can or we

00:36:42.800 --> 00:36:45.350
will be able to,
maybe in the future,

00:36:45.350 --> 00:36:47.220
to render in HDR directly.

00:36:47.220 --> 00:36:50.780
So we could have
HDR user interfaces.

00:36:50.780 --> 00:36:52.700
We also have a new
resource qualifier

00:36:52.700 --> 00:36:55.130
called the widecg
for wide color gamut.

00:36:55.130 --> 00:36:58.220
So you can create layouts
or strings or [INAUDIBLE]

00:36:58.220 --> 00:37:02.300
that are specific to a display
that supports the wide color

00:37:02.300 --> 00:37:04.960
gamut rendering mode.

00:37:04.960 --> 00:37:06.590
We also have a few
APIs that you can

00:37:06.590 --> 00:37:08.960
use to query whether the
device supports wide gamut.

00:37:08.960 --> 00:37:11.610
So if you have a
resources instance,

00:37:11.610 --> 00:37:14.060
you can grab the configuration
and the configuration

00:37:14.060 --> 00:37:16.253
will tell you if you have
a wide gamut display.

00:37:16.253 --> 00:37:18.879
If you have a view, you
can call get display,

00:37:18.879 --> 00:37:20.420
we give you a display
object, and you

00:37:20.420 --> 00:37:24.590
can ask the display whether
or not it's wide color gamut.

00:37:24.590 --> 00:37:27.860
So the main conclusion of
all this is don't panic.

00:37:27.860 --> 00:37:29.360
I put a bunch of
hearts on the slide

00:37:29.360 --> 00:37:30.984
to make you feel
better about all this.

00:37:30.984 --> 00:37:32.150
I know it's complicated.

00:37:32.150 --> 00:37:34.244
And no matter how
hard you try, and I

00:37:34.244 --> 00:37:35.660
don't want to sound
disheartening,

00:37:35.660 --> 00:37:39.620
but your colors are going to
be wrong somewhere for someone.

00:37:39.620 --> 00:37:41.840
Like they're wrong
for me on that screen,

00:37:41.840 --> 00:37:43.520
and I know a little
thing or two about

00:37:43.520 --> 00:37:44.936
color spaces and
color management,

00:37:44.936 --> 00:37:47.060
but you're not in
control of everything.

00:37:47.060 --> 00:37:49.717
You're not in control
of the final display

00:37:49.717 --> 00:37:51.800
and you're not in control
of all the software that

00:37:51.800 --> 00:37:54.920
intervenes in the pipeline of
an application of rendering

00:37:54.920 --> 00:37:55.550
colors.

00:37:55.550 --> 00:37:57.530
So don't worry
too much about it.

00:37:57.530 --> 00:37:58.430
Do your best.

00:37:58.430 --> 00:38:01.820
Make sure that your designers
work on calibrated displays.

00:38:01.820 --> 00:38:04.850
Make sure they work in sRGB.

00:38:04.850 --> 00:38:08.000
Make sure the images
contain color spaces.

00:38:08.000 --> 00:38:11.420
And you should be OK,
or just mostly OK.

00:38:11.420 --> 00:38:14.120
So if you want to learn more
about transfer functions,

00:38:14.120 --> 00:38:16.600
there's this talk I gave
last year with Chet.

00:38:16.600 --> 00:38:20.210
So if you go to that url
and you go to minute 29,

00:38:20.210 --> 00:38:23.060
that's when the color
part of the talk starts.

00:38:23.060 --> 00:38:24.570
The first half is
about animations.

00:38:24.570 --> 00:38:25.910
It's also super interesting.

00:38:25.910 --> 00:38:28.160
You can also look at the
documentation for color space

00:38:28.160 --> 00:38:29.264
at Rgb.

00:38:29.264 --> 00:38:30.930
There's a lot of
details and information

00:38:30.930 --> 00:38:34.836
about transfer functions
and what they mean for you.

00:38:34.836 --> 00:38:37.290
If you want to learn
even more about colors,

00:38:37.290 --> 00:38:40.980
I gave a talk at [INAUDIBLE]
US a couple of months ago.

00:38:40.980 --> 00:38:42.770
I talked about
bending and dithering.

00:38:42.770 --> 00:38:43.490
What is bending?

00:38:43.490 --> 00:38:44.870
How can you fight it?

00:38:44.870 --> 00:38:47.430
What do we do in the platform
to fight it on your behalf?

00:38:47.430 --> 00:38:51.260
So if you're interested,
go at that url

00:38:51.260 --> 00:38:55.330
and it starts at minute 36.

00:38:55.330 --> 00:38:56.435
And I think that's it.

00:38:56.435 --> 00:38:59.060
I only have one minute left so
I don't have time for questions,

00:38:59.060 --> 00:39:01.050
but I'll be at the
Android sandbox

00:39:01.050 --> 00:39:03.500
if you want to talk more about
color and color management.

00:39:03.500 --> 00:39:05.090
Thank you.

