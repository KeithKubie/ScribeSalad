WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
[Unit 5 - How Programs Run, Making Things Fast]

00:00:02.000 --> 00:00:07.000
Welcome to Unit 5. The main topic for this unit is trying to understand the cost of running program.

00:00:07.000 --> 00:00:10.000
So far we haven't really worried about this. We've been very happy to write code.

00:00:10.000 --> 00:00:14.000
If we get the correct result, that's a great thing.

00:00:14.000 --> 00:00:18.000
But once we start making programs bigger, worrying about programs that do more things,

00:00:18.000 --> 00:00:22.000
running on larger inputs, we have to start thinking about the cost of running our programs.

00:00:22.000 --> 00:00:26.000
This question of what it costs to evaluate an execution

00:00:26.000 --> 00:00:29.000
is a very important problem in computer science.

00:00:29.000 --> 00:00:31.000
Sometimes it's one of the most fundamental problems.

00:00:31.000 --> 00:00:34.000
Many people spend their whole careers working on this.

00:00:34.000 --> 00:00:37.000
It's a problem called algorithm analysis.

00:00:37.000 --> 00:00:41.000
I haven't yet explained what an algorithm is, but you've actually written many of them already.

00:00:41.000 --> 00:00:44.000
An algorithm is the procedure that always finishes.

00:00:44.000 --> 00:00:49.000
A procedure is just a well-defined sequence of steps.

00:00:49.000 --> 00:00:52.000
It has to be defined precisely enough that it could be executed mechanically.

00:00:52.000 --> 00:00:57.000
To be a procedure, it has to be something that can be executed without any thought.

00:00:57.000 --> 00:01:01.000
We're mostly interested in procedures that can be executed by computers,

00:01:01.000 --> 00:01:05.000
but the important part of what makes it a procedure is that the steps are very precisely defined

00:01:05.000 --> 00:01:08.000
and don't require any thought to execute.

00:01:08.000 --> 00:01:11.000
To be an algorithm, it has to always finish.

00:01:11.000 --> 00:01:14.000
We've pointed out already that this is a very tough problem--

00:01:14.000 --> 00:01:17.000
to figure out whether a program will finish.

00:01:17.000 --> 00:01:20.000
In general, it's not possible to answer that question,

00:01:20.000 --> 00:01:23.000
but for many specific programs it is.

00:01:23.000 --> 00:01:26.000
In order for a program to be an algorithm, we have to know that it always finishes,

00:01:26.000 --> 00:01:28.000
and it always produces the correct result.

00:01:28.000 --> 00:01:32.000
Once we have an algorithm, we know we have a well-defined sequence of steps,

00:01:32.000 --> 00:01:36.000
so we can reason about what will happen on any input.

00:01:36.000 --> 00:01:39.000
And we know that it will always finish and always produce the correct result.

00:01:39.000 --> 00:01:45.000
Then we can think about what the cost is of executing that algorithm on some input.

00:01:45.000 --> 00:01:47.000
How should we think about cost?

00:01:47.000 --> 00:01:50.000
The way computer scientists think about cost is quite different

00:01:50.000 --> 00:01:54.000
from how most people think about cost.

00:01:54.000 --> 00:01:57.000
If you're normally thinking about cost, you've got a specific object.

00:01:57.000 --> 00:02:03.000
Let's say you've got a cool car. This is supposed to be a cool car.

00:02:03.000 --> 00:02:08.000
It doesn't quite look like a cool car. It's got a cost associated with it.

00:02:08.000 --> 00:02:13.000
Let's say that's a $25,000 car, and you have some other car.

00:02:13.000 --> 00:02:17.000
You have one car that's got a particular cost. That's what it costs you to get that car.

00:02:17.000 --> 00:02:20.000
You could have another car that would be smaller and green.

00:02:20.000 --> 00:02:24.000
Let's say that car costs $10,000.

00:02:24.000 --> 00:02:27.000
When we think about the cost of things normally, we have very specific things.

00:02:27.000 --> 00:02:31.000
They have specific costs, and we know that the red car costs $25,000,

00:02:31.000 --> 00:02:35.000
the green car costs $10,000. The red car costs more than the green car.

00:02:35.000 --> 00:02:38.000
We just need to compare those costs.

00:02:38.000 --> 00:02:41.000
When we think about the cost of algorithms,

00:02:41.000 --> 00:02:45.000
we don't have a specific execution in mind usually.

00:02:45.000 --> 00:02:49.000
What we want to understand is how the cost depends on the input.

00:02:49.000 --> 00:02:53.000
We might have two different algorithms, let's say this is algorithm 1,

00:02:53.000 --> 00:02:58.000
and we have a second algorithm that solves the same problem.

00:02:58.000 --> 00:03:05.000
Both of these are algorithms that take inputs and produce output.

00:03:05.000 --> 00:03:09.000
If we wanted to decide which algorithm is better,

00:03:09.000 --> 00:03:13.000
we don't have a specific cost for the algorithm the way we do for the cars.

00:03:13.000 --> 00:03:15.000
We can say the red car costs more than the green car.

00:03:15.000 --> 00:03:19.000
The cost depends on the actual input that we run the algorithm on.

00:03:19.000 --> 00:03:22.000
It might be the case for some inputs algorithm 1 is faster,

00:03:22.000 --> 00:03:29.000
and for other inputs, algorithm 2 is faster. I should label this algorithm 2.

00:03:29.000 --> 00:03:35.000
What we need to understand is how the cost of executing the algorithm depends on the input.

00:03:35.000 --> 00:03:38.000
We don't want to do that for every specific input.

00:03:38.000 --> 00:03:43.000
If we had to do that for every input, we might as well just run it on the input and see what it costs.

00:03:43.000 --> 00:03:48.000
What we want to do is be able to predict this without actually having to run it on every input.

00:03:48.000 --> 00:03:52.000
Normally, there isn't that much that matters about the specific input.

00:03:52.000 --> 00:03:56.000
The main thing that's going to matter about the input is the size of the input.

00:03:56.000 --> 00:04:00.000
That's not always going to be the case, and we'll see examples where other properties of the input matter.

00:04:00.000 --> 00:04:05.000
The primary way we talk about cost in computer science is based on the size of the input.

00:04:05.000 --> 00:04:11.000
As the size of input increases, how does the cost to evaluate the procedure increase?

00:04:11.000 --> 00:04:14.000
Cost ultimately always comes down to money.

00:04:14.000 --> 00:04:19.000
When it comes down to money what are the things that cost money when we execute algorithms?

00:04:19.000 --> 00:04:23.000
The main things that cost money are the time it takes to finish.

00:04:23.000 --> 00:04:27.000
If we get an answer more quickly, we've spent less time on it.

00:04:27.000 --> 00:04:30.000
We can also rent computers by the time to execute.

00:04:30.000 --> 00:04:35.000
There are lots of cloud computing services now that will give you a processor of a certain power

00:04:35.000 --> 00:04:39.000
for a certain amount of time for a certain number of cents per hours.

00:04:39.000 --> 00:04:43.000
Time really is money, and so we don't need to turn our cost estimates into money,

00:04:43.000 --> 00:04:46.000
because we don't necessarily know how much our computing cost will be.

00:04:46.000 --> 00:04:49.000
But if we can understand the time it takes to execute,

00:04:49.000 --> 00:04:51.000
that'll give us a good sense of the cost.

00:04:51.000 --> 00:04:55.000
The other main cost is often memory.

00:04:55.000 --> 00:04:59.000
If we know that we need a certain amount of memory to be able to execute our algorithm,

00:04:59.000 --> 00:05:01.000
that tells us something about the size of computer we need

00:05:01.000 --> 00:05:03.000
and how expensive that's going to be.

00:05:03.000 --> 00:05:07.000
We don't usually talk about cost in terms of dollars when we analyze algorithms.

00:05:07.000 --> 00:05:10.000
We're talking about cost in terms of time and memory,

00:05:10.000 --> 00:05:15.000
but those things in real implementations end up being cost in terms of dollars.

00:05:15.000 --> 00:05:18.000
We're mostly going to focus on measuring time,

00:05:18.000 --> 00:05:22.000
and time is usually the most important cost of running an algorithm.

00:05:22.000 --> 99:59:59.000
Memory is often another consideration.

