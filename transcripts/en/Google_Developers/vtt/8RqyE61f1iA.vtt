WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:02.190
SETH LADD: Hi, JJ.

00:00:02.190 --> 00:00:03.450
So this is an Office Hours.

00:00:03.450 --> 00:00:04.350
We're trying something new.

00:00:04.350 --> 00:00:08.100
We want to just have a more
informal opportunity for our

00:00:08.100 --> 00:00:12.400
Dartisans communities to ask
us questions, and with the

00:00:12.400 --> 00:00:15.690
alpha of Dart M3 landing--

00:00:15.690 --> 00:00:16.940
was it this week?

00:00:16.940 --> 00:00:18.690
Last week, this week?

00:00:18.690 --> 00:00:19.440
JOHN: It was this week.

00:00:19.440 --> 00:00:23.150
SETH LADD: This week, the new
Libraries V2 is now available

00:00:23.150 --> 00:00:24.260
for everyone to play with.

00:00:24.260 --> 00:00:27.210
This is a significant milestone
for the Dart

00:00:27.210 --> 00:00:30.900
project, and it's an opportunity
for us to go and

00:00:30.900 --> 00:00:35.610
update all of our code to the
new, awesome futures, streams,

00:00:35.610 --> 00:00:39.490
collections, and various other
changes to the APIs.

00:00:39.490 --> 00:00:41.575
And so here's Office Hours, an
opportunity for you guys to

00:00:41.575 --> 00:00:43.360
just reach out to ask
us questions about

00:00:43.360 --> 00:00:44.060
what's going on.

00:00:44.060 --> 00:00:46.700
And then what we'd really love
do is help you guys upgrade

00:00:46.700 --> 00:00:49.220
your packages and libraries
to Dart M3.

00:00:49.220 --> 00:00:52.400
So this is a fantastic time
to just ask us how

00:00:52.400 --> 00:00:54.000
to update your code.

00:00:54.000 --> 00:00:56.220
You can use it by screen sharing
your screen or just

00:00:56.220 --> 00:00:59.280
asking us questions, and it's
really just an opportunity for

00:00:59.280 --> 00:01:01.130
you guys to ask us what's up.

00:01:01.130 --> 00:01:05.030
So if anyone has any questions
please, go ahead and fire

00:01:05.030 --> 00:01:07.840
away, and we're here
to help you out.

00:01:07.840 --> 00:01:09.320
AUDIENCE: Seth.

00:01:09.320 --> 00:01:10.270
SETH LADD: Adam?

00:01:10.270 --> 00:01:12.970
AUDIENCE: OK, so I have one
question about migration.

00:01:12.970 --> 00:01:16.540
Should we be moving towards the
streams pattern more than

00:01:16.540 --> 00:01:19.300
just using the auto
update feature?

00:01:19.300 --> 00:01:22.750
And a follow-up to that is just
a warning to everyone

00:01:22.750 --> 00:01:26.910
who's upgrading with stuff that
depends on JS Interrupt

00:01:26.910 --> 00:01:31.710
if you change the library name
for JS Interrupt, your js.map

00:01:31.710 --> 00:01:35.520
calls will actually get
transformed to js.mappedby,

00:01:35.520 --> 00:01:37.750
which is incorrect
[INAUDIBLE] file.

00:01:37.750 --> 00:01:41.371
But just keep that in mind, if
you do a lot of JS Interrupt

00:01:41.371 --> 00:01:42.000
dependency.

00:01:42.000 --> 00:01:43.700
SHAILEN TULI: That's an awesome
bit of feedback.

00:01:43.700 --> 00:01:47.320
That's if you use the cleanup
ability of Dart editor, right?

00:01:47.320 --> 00:01:49.080
AUDIENCE: Yeah, it gets a
little too aggressive.

00:01:49.080 --> 00:01:52.060
I mean, everything else so far
has worked pretty clean except

00:01:52.060 --> 00:01:55.650
for that one thing I noticed,
and it probably happens with

00:01:55.650 --> 00:01:58.680
anything that's called Map
where you name a library.

00:01:58.680 --> 00:02:01.800
But I noticed it for
the JS Interrupt.

00:02:01.800 --> 00:02:05.460
SETH LADD: Any chance that
there's a bug for this?

00:02:05.460 --> 00:02:06.500
AUDIENCE: Yeah, I filed one.

00:02:06.500 --> 00:02:07.230
SETH LADD: OK, cool.

00:02:07.230 --> 00:02:07.471
Thanks.

00:02:07.471 --> 00:02:09.160
SHAILEN TULI: Good, thanks.

00:02:09.160 --> 00:02:09.960
SETH LADD: Good.

00:02:09.960 --> 00:02:13.980
So going back to your original
question, should we, as a Dart

00:02:13.980 --> 00:02:15.750
community, move more
towards streams?

00:02:15.750 --> 00:02:17.980
I think the answer is
a resounding yes.

00:02:17.980 --> 00:02:21.920
It's already happening in the
core libraries themselves.

00:02:21.920 --> 00:02:26.860
For instance let's see, Dart
HTML's now adopting the stream

00:02:26.860 --> 00:02:29.090
paradigm, or the stream
libraries.

00:02:29.090 --> 00:02:31.110
Dart I/O is--

00:02:31.110 --> 00:02:32.510
I think there's a branch
for Dart I/O

00:02:32.510 --> 00:02:35.680
refactoring toward streams.

00:02:35.680 --> 00:02:39.660
And so, yeah, yeah, please,
please start using streams for

00:02:39.660 --> 00:02:43.040
your asynchronous version
of iteration.

00:02:43.040 --> 00:02:46.830
If you think about traditional
iterators, or that is like For

00:02:46.830 --> 00:02:49.550
loops, that's a pull model.

00:02:49.550 --> 00:02:53.060
You're going to synchronously
pull from the iterator.

00:02:53.060 --> 00:02:56.600
Streams are kind of the
asynchronous push model of

00:02:56.600 --> 00:02:59.540
these sequence of events will
happen when I'm ready, and you

00:02:59.540 --> 00:03:01.390
will be notified of those.

00:03:01.390 --> 00:03:03.400
So sometimes you want a
traditional iterator,

00:03:03.400 --> 00:03:09.010
sometimes you want to have a
more push-based iteration, and

00:03:09.010 --> 00:03:10.780
that's what streams are.

00:03:10.780 --> 00:03:12.030
So certainly try
to use streams.

00:03:16.300 --> 00:03:17.550
Good question.

00:03:21.990 --> 00:03:25.290
AUDIENCE: Who here's actually
tried to update for the latest

00:03:25.290 --> 00:03:26.100
library changes?

00:03:26.100 --> 00:03:29.520
Who's gone through the process
with their code?

00:03:29.520 --> 00:03:30.770
SHAILEN TULI: You have.

00:03:32.800 --> 00:03:33.960
SETH LADD: No, that that's
a great question.

00:03:33.960 --> 00:03:35.210
Yeah.

00:03:37.910 --> 00:03:39.690
Who's tried to upgrade to M3?

00:03:44.540 --> 00:03:47.880
JOHN: So I've upgraded to M3
on many of my projects, and

00:03:47.880 --> 00:03:50.550
actually Adam helped
out with Specter,

00:03:50.550 --> 00:03:53.600
doing some of the upgrades.

00:03:53.600 --> 00:03:56.550
For the most part, it was a very
straightforward upgrade

00:03:56.550 --> 00:03:58.740
experience.

00:03:58.740 --> 00:04:01.360
I'm trying to think, the biggest
change I had was I had

00:04:01.360 --> 00:04:05.570
used some of the future.chain
method, and the way you can

00:04:05.570 --> 00:04:10.160
translate a future.chain to the
new API is to just replace

00:04:10.160 --> 00:04:11.460
chain with then.

00:04:11.460 --> 00:04:13.110
That's it.

00:04:13.110 --> 00:04:16.500
So long as the then clause
returns a future, it will act

00:04:16.500 --> 00:04:17.640
like a chain.

00:04:17.640 --> 00:04:18.529
SETH LADD: Perfect.

00:04:18.529 --> 00:04:25.930
SHAILEN TULI: And if you ever
used .value, that also is now

00:04:25.930 --> 00:04:27.620
just .then.

00:04:27.620 --> 00:04:29.470
.then is it.

00:04:29.470 --> 00:04:31.340
That's the way--

00:04:31.340 --> 00:04:34.070
everything sort of converges
to .then, and

00:04:34.070 --> 00:04:35.070
that simplifies things.

00:04:35.070 --> 00:04:37.460
SETH LADD: That does simplify,
but I think John brings up a

00:04:37.460 --> 00:04:38.470
subtle point.

00:04:38.470 --> 00:04:43.010
What you return from inside
.then sort of dictates what's

00:04:43.010 --> 00:04:44.010
going to happen next?

00:04:44.010 --> 00:04:46.400
JOHN: Yeah, there's a real
implicit piece of information

00:04:46.400 --> 00:04:49.705
there, which is if you return,
say, an int or some instance

00:04:49.705 --> 00:04:51.950
of other class, then
it operates just

00:04:51.950 --> 00:04:53.470
like then used to.

00:04:53.470 --> 00:04:56.860
But now, if you return a future,
then it's a chain.

00:04:56.860 --> 00:04:58.040
SETH LADD: You can chain
it off of that.

00:04:58.040 --> 00:04:59.930
OK, cool.

00:04:59.930 --> 00:05:04.740
I also know that you've got to
import Dart async, dart:async

00:05:04.740 --> 00:05:06.500
now if you want to use future.

00:05:06.500 --> 00:05:08.000
In fact, when I run--

00:05:08.000 --> 00:05:11.420
so hot tip, if you guys are
upgrading, use the editor's

00:05:11.420 --> 00:05:12.620
cleanup feature.

00:05:12.620 --> 00:05:14.580
There's going to be little
quirks like Adam was pointing

00:05:14.580 --> 00:05:16.620
out with JS Interrupt, but
generally, it's going to save

00:05:16.620 --> 00:05:17.450
you a lot of time.

00:05:17.450 --> 00:05:20.510
But what it doesn't do is
it doesn't also import

00:05:20.510 --> 00:05:22.280
dart:async for you.

00:05:22.280 --> 00:05:28.110
So it'll switch chain to then,
but then you have to go in and

00:05:28.110 --> 00:05:30.560
type in importdartasync,
so heads up on that.

00:05:30.560 --> 00:05:33.030
Luckily, it's just one line.

00:05:33.030 --> 00:05:36.540
JOHN: Another little quirk,
and I expect the editor's

00:05:36.540 --> 00:05:39.420
automatic upgrade feature will
fix it, is it's no longer

00:05:39.420 --> 00:05:41.640
futures.wait.

00:05:41.640 --> 00:05:44.400
It's future.wait.

00:05:44.400 --> 00:05:48.360
So that's a very easy fix, but
that was actually littered

00:05:48.360 --> 00:05:50.470
throughout my code, and so
I just had to go in.

00:05:50.470 --> 00:05:51.600
SETH LADD: Yeah, yeah.

00:05:51.600 --> 00:05:52.650
No, that's a really point.

00:05:52.650 --> 00:05:53.450
Futures is gone.

00:05:53.450 --> 00:05:57.080
SHAILEN TULI: Also, timer
is no longer in--

00:05:57.080 --> 00:05:58.030
timer is in async.

00:05:58.030 --> 00:05:58.590
SETH LADD: That's right.

00:05:58.590 --> 00:06:00.710
SHAILEN TULI: And that's another
thing that you may

00:06:00.710 --> 00:06:04.750
have imports to other
things, Dart I/O.

00:06:04.750 --> 00:06:08.370
AUDIENCE: Another bug that maybe
should be filed is when

00:06:08.370 --> 00:06:13.450
you import dart.json, and you
go through the upgrade

00:06:13.450 --> 00:06:18.070
process, maybe the cleanup tool
should also rename the

00:06:18.070 --> 00:06:19.490
JSON library for you.

00:06:19.490 --> 00:06:23.212
So it's like import dart.json
as capital JSON most people

00:06:23.212 --> 00:06:23.634
[INAUDIBLE].

00:06:23.634 --> 00:06:24.940
JOHN: That's a good
one actually.

00:06:24.940 --> 00:06:26.670
SETH LADD: That's a nice
clean up to add.

00:06:26.670 --> 00:06:32.700
JOHN: Now the JSON library has
a stringify and parse as top

00:06:32.700 --> 00:06:35.220
level functions, whereas before,
they were static

00:06:35.220 --> 00:06:37.330
methods in the JSON class.

00:06:37.330 --> 00:06:39.880
SETH LADD: Now, do you
like that change?

00:06:39.880 --> 00:06:42.130
JOHN: What I did was what Adam
suggested, where I went in and

00:06:42.130 --> 00:06:46.340
replaced every import dart.json
to import dart.json

00:06:46.340 --> 00:06:48.970
as JSON, all capital letters,
and then you don't have to

00:06:48.970 --> 00:06:50.020
change your code.

00:06:50.020 --> 00:06:50.290
SETH LADD: Cool.

00:06:50.290 --> 00:06:51.500
AUDIENCE: I think this is
similar [INAUDIBLE].

00:06:51.500 --> 00:06:52.430
JOHN: [INAUDIBLE]

00:06:52.430 --> 00:06:55.670
too general to be in the
global name space.

00:06:55.670 --> 00:06:57.310
SETH LADD: I don't know.

00:06:57.310 --> 00:06:59.700
I like the idea that we can take
advantage of top level

00:06:59.700 --> 00:07:04.330
functions, and you can always
just import with a prefix, and

00:07:04.330 --> 00:07:04.960
that works OK.

00:07:04.960 --> 00:07:07.470
But yeah, for a classic
[INAUDIBLE]

00:07:07.470 --> 00:07:10.060
static methods, use the
top level functions.

00:07:10.060 --> 00:07:10.690
I don't know.

00:07:10.690 --> 00:07:11.370
JOHN: I know.

00:07:11.370 --> 00:07:16.310
I go back and forth because it
is cleaner in a way, but I

00:07:16.310 --> 00:07:16.980
don't know.

00:07:16.980 --> 00:07:18.380
That was a weird change.

00:07:18.380 --> 00:07:21.480
And I have some of my other
classes have stringify and

00:07:21.480 --> 00:07:23.930
parse in them, so I just feel
like it's a name that's going

00:07:23.930 --> 00:07:26.260
to be used all over the place.

00:07:26.260 --> 00:07:31.140
So by changing the import to
be as JSON, one, I maintain

00:07:31.140 --> 00:07:32.940
compatibility with the existing
code, and two, it's

00:07:32.940 --> 00:07:38.410
like I've now optionally
encapsulated it into its own

00:07:38.410 --> 00:07:39.480
quasi name space.

00:07:39.480 --> 00:07:41.190
SETH LADD: Yeah, so you
have the choice.

00:07:41.190 --> 00:07:42.020
But it's a good tip.

00:07:42.020 --> 00:07:42.470
You're right.

00:07:42.470 --> 00:07:45.760
Most the time, we're going to
want to do as JSON, uppercase,

00:07:45.760 --> 00:07:47.710
just to make it easier
to migrate.

00:07:47.710 --> 00:07:48.150
JOHN: Exactly.

00:07:48.150 --> 00:07:49.630
For migration, it
becomes trivial.

00:07:49.630 --> 00:07:51.300
Nothing has changed
with JSON if you

00:07:51.300 --> 00:07:52.530
change your import line.

00:07:52.530 --> 00:07:53.040
SETH LADD: Cool.

00:07:53.040 --> 00:07:54.880
AUDIENCE: That's exactly what
I was going to say.

00:07:54.880 --> 00:07:57.750
Going forward, probably go to
the model where we don't

00:07:57.750 --> 00:07:59.850
rename the library, but
for all the code

00:07:59.850 --> 00:08:01.020
that already exists--

00:08:01.020 --> 00:08:03.880
and there's a pretty heavy
amount where every library has

00:08:03.880 --> 00:08:05.000
some import of JSON--

00:08:05.000 --> 00:08:09.210
just makes that migration
pattern much easier.

00:08:09.210 --> 00:08:11.580
AUDIENCE: So there's an
important thing that I found

00:08:11.580 --> 00:08:16.380
out when I was porting Dart
HTML5 samples, and that's that

00:08:16.380 --> 00:08:19.200
not every thing that you need
to update will be caught by

00:08:19.200 --> 00:08:23.590
the type system, and so it's
really, really important to

00:08:23.590 --> 00:08:25.260
run the code.

00:08:25.260 --> 00:08:29.000
So I don't really have unit
tests for Dart HTML5 samples

00:08:29.000 --> 00:08:31.090
because that stuff's kind
of hard to unit test.

00:08:31.090 --> 00:08:34.549
And so there's stuff that
breaks that had no type

00:08:34.549 --> 00:08:37.820
warnings at all, and so it's
really important to actually

00:08:37.820 --> 00:08:40.100
run the code.

00:08:40.100 --> 00:08:42.980
JOHN: Yeah, JJ, I've been bitten
by something similar to

00:08:42.980 --> 00:08:44.970
that in the past, and that's
why I manually

00:08:44.970 --> 00:08:48.250
migrated all of my code.

00:08:48.250 --> 00:08:52.770
So I actually went down that
road, and the auto update

00:08:52.770 --> 00:08:55.240
feature missed a couple things,
and then it became

00:08:55.240 --> 00:08:58.550
this weird game of what did it
catch and what didn't it.

00:08:58.550 --> 00:09:00.750
AUDIENCE: Yeah, I wasn't even
using the auto update.

00:09:00.750 --> 00:09:04.660
I was just looking for errors
and fixing them, and when they

00:09:04.660 --> 00:09:07.260
were fixed, I was assuming
everything was working.

00:09:07.260 --> 00:09:10.300
And it's just not the case
because there's some subtle

00:09:10.300 --> 00:09:15.300
ways that a bunch of things come
together so that you have

00:09:15.300 --> 00:09:16.360
to run the code.

00:09:16.360 --> 00:09:19.200
Things have changed enough.

00:09:19.200 --> 00:09:22.050
Yeah, I filed a couple bugs
for things that might have

00:09:22.050 --> 00:09:26.760
been able to be caught, but
you got to run the code.

00:09:26.760 --> 00:09:27.940
SETH LADD: Good advice.

00:09:27.940 --> 00:09:32.270
JJ, was there something specific
that you were more

00:09:32.270 --> 00:09:35.410
taken by surprise when you
did this migration?

00:09:35.410 --> 00:09:38.220
Like some specific advice you
could give to everyone?

00:09:38.220 --> 00:09:42.620
AUDIENCE: Yeah, so I don't know
about specific advice

00:09:42.620 --> 00:09:45.210
besides running your code,
but there were a couple

00:09:45.210 --> 00:09:46.780
ones that bit me.

00:09:46.780 --> 00:09:49.100
It used to be that when you
would call a function that

00:09:49.100 --> 00:09:53.920
would go off into webkit land,
and you wanted the JavaScript

00:09:53.920 --> 00:09:56.730
default, you could just pass
null, and it would

00:09:56.730 --> 00:09:59.705
automatically treat that as
the JavaScript default.

00:09:59.705 --> 00:10:03.030
But that no longer works, and so
you have to explicitly pass

00:10:03.030 --> 00:10:05.570
the JavaScript default if
that's what you want.

00:10:05.570 --> 00:10:09.770
There's some really weird corner
cases with some of the

00:10:09.770 --> 00:10:12.820
way that the Dart API doesn't
quite match up with the

00:10:12.820 --> 00:10:14.070
JavaScript--

00:10:16.312 --> 00:10:17.375
JOHN: Did we lose JJ?

00:10:17.375 --> 00:10:19.350
SETH LADD: I think we
lost JJ, but good

00:10:19.350 --> 00:10:22.635
advice on his way out.

00:10:22.635 --> 00:10:25.510
JOHN: I get the impression
that's going to be the

00:10:25.510 --> 00:10:27.320
direction that we're
moving in general.

00:10:27.320 --> 00:10:29.830
We're moving away from add event
handler, remove event

00:10:29.830 --> 00:10:32.710
handler, to streams, and that's
a big divergence from

00:10:32.710 --> 00:10:33.570
JavaScript.

00:10:33.570 --> 00:10:38.510
So I think you should try and
write code toward Dart and not

00:10:38.510 --> 00:10:41.880
rely on some compatibility
with JavaScript.

00:10:41.880 --> 00:10:44.850
SETH LADD: Yeah, I think that
was part of Adam's question,

00:10:44.850 --> 00:10:48.270
is should we just go ahead and
embrace the stream API as the

00:10:48.270 --> 00:10:50.610
way to fire off this
sequence of events?

00:10:50.610 --> 00:10:52.930
I think the answer's
absolutely.

00:10:52.930 --> 00:10:53.910
SHAILEN TULI: Streams
are the future.

00:10:53.910 --> 00:10:54.725
SETH LADD: There's
no question.

00:10:54.725 --> 00:10:56.720
The future's here today.

00:10:56.720 --> 00:10:58.700
AUDIENCE: So another thing that
really bit me is that I

00:10:58.700 --> 00:11:02.720
was calling this function that
used to return a list.

00:11:02.720 --> 00:11:05.680
And so I was receiving it into a
local variable, and my local

00:11:05.680 --> 00:11:07.550
variable even said list.

00:11:07.550 --> 00:11:08.870
I wasn't using [INAUDIBLE].

00:11:08.870 --> 00:11:12.600
I was using list, but then
that changed iterable.

00:11:12.600 --> 00:11:15.590
But in Dart, you could downcast
without an explicit

00:11:15.590 --> 00:11:19.660
cast, and so Dart looks at
that, and it's like, oh,

00:11:19.660 --> 00:11:20.520
you're downcasting.

00:11:20.520 --> 00:11:22.770
You must know that it's actually
a list and not just

00:11:22.770 --> 00:11:23.410
an iterable.

00:11:23.410 --> 00:11:25.370
Well, the fact of the matter
is, it wasn't a list.

00:11:25.370 --> 00:11:28.080
It was an iterable, and so then
when I tried to index

00:11:28.080 --> 00:11:29.970
into that list, it crashed.

00:11:29.970 --> 00:11:32.190
And so that means that, because
the way our type

00:11:32.190 --> 00:11:35.250
system works, it's very, very
friendly, but in that case,

00:11:35.250 --> 00:11:37.330
you could only catch that
problem at runtime.

00:11:37.330 --> 00:11:41.100
It won't be caught with
the static warning.

00:11:41.100 --> 00:11:42.032
SHAILEN TULI: Sure.

00:11:42.032 --> 00:11:44.160
Yeah, so you need to
remember to call to

00:11:44.160 --> 00:11:47.290
list, to set, to whatever.

00:11:47.290 --> 00:11:49.000
JOHN: Or be aware that
something's not return

00:11:49.000 --> 00:11:50.050
iterable, as well.

00:11:50.050 --> 00:11:51.820
Yeah, both of those things.

00:11:51.820 --> 00:11:54.460
AUDIENCE: But if you have a
large code base, you might not

00:11:54.460 --> 00:11:57.920
know where to look to find those
problems, and that's why

00:11:57.920 --> 00:12:00.420
I'm reiterating again, the
only way to find those

00:12:00.420 --> 00:12:03.680
problems, as far as I can tell,
is to run the code.

00:12:03.680 --> 00:12:04.990
SETH LADD: Yeah, definitely.

00:12:04.990 --> 00:12:07.300
AUDIENCE: Yeah, I got hit by
that, too, in mappedBy.

00:12:07.300 --> 00:12:09.990
So mappedBy, I think, returns
iterable, and I couldn't

00:12:09.990 --> 00:12:11.656
figure out what was going on.

00:12:11.656 --> 00:12:12.370
[INAUDIBLE]

00:12:12.370 --> 00:12:16.150
is mappedBy also returns I think
a read only view to the

00:12:16.150 --> 00:12:18.260
list, or something like that.

00:12:18.260 --> 00:12:20.565
So I actually had pop it
out into another--

00:12:20.565 --> 00:12:22.590
just call two lists, and
then I actually got an

00:12:22.590 --> 00:12:24.690
[? editable ?]

00:12:24.690 --> 00:12:25.050
list.

00:12:25.050 --> 00:12:27.510
And I'll just make one more plug
before I kind of step out

00:12:27.510 --> 00:12:31.270
of here to let someone else
join and ask questions.

00:12:31.270 --> 00:12:33.940
I realize that I've refactored
two separate

00:12:33.940 --> 00:12:35.400
types of code bases.

00:12:35.400 --> 00:12:40.250
The ones that used a lot of
the optional types seem to

00:12:40.250 --> 00:12:42.740
refactor much better
than the code bases

00:12:42.740 --> 00:12:44.430
that didn't use any.

00:12:44.430 --> 00:12:47.400
So I think that was a big win
for the optional type system

00:12:47.400 --> 00:12:48.573
and the Dart editor.

00:12:48.573 --> 00:12:49.650
SETH LADD: Nice.

00:12:49.650 --> 00:12:50.630
SHAILEN TULI: Yeah.

00:12:50.630 --> 00:12:50.905
SETH LADD: Great.

00:12:50.905 --> 00:12:52.940
SHAILEN TULI: That's great.

00:12:52.940 --> 00:12:55.380
SETH LADD: Actually, this is a
good question for the people

00:12:55.380 --> 00:12:58.380
who have joined.

00:12:58.380 --> 00:13:03.390
Do you use the static type
annotations to annotate your

00:13:03.390 --> 00:13:05.215
local method or function
level variables?

00:13:11.060 --> 00:13:11.360
Anyone?

00:13:11.360 --> 00:13:11.730
Just join in.

00:13:11.730 --> 00:13:14.170
It's OK.

00:13:14.170 --> 00:13:15.750
AUDIENCE: So I can tell you
the rule that I've been

00:13:15.750 --> 00:13:17.845
following for Dart
HTML5 samples.

00:13:20.440 --> 00:13:24.640
I explicitly state the type if
it's not dead obvious looking

00:13:24.640 --> 00:13:26.610
at the code.

00:13:26.610 --> 00:13:30.160
Now, if I'm calling a function,
and that function's

00:13:30.160 --> 00:13:34.190
not in my file, it's coming from
elsewhere, then I won't

00:13:34.190 --> 00:13:37.280
know the type unless I look
at the code, and so I will

00:13:37.280 --> 00:13:39.120
specify type.

00:13:39.120 --> 00:13:44.670
But if I'm setting a variable
into some static value where I

00:13:44.670 --> 00:13:49.080
could just reason about
the code directly,

00:13:49.080 --> 00:13:50.060
then I just used var.

00:13:50.060 --> 00:13:53.850
So for me, it's really like if
I could look at this code

00:13:53.850 --> 00:13:56.480
without any other code, and I
could mentally figure out the

00:13:56.480 --> 00:13:58.420
types, then I use var.

00:13:58.420 --> 00:14:00.315
Otherwise, I use a real type.

00:14:00.315 --> 00:14:04.170
And that's kind of a subtle
variation on what we normally

00:14:04.170 --> 00:14:06.910
do, which is just always
use var locally.

00:14:06.910 --> 00:14:11.660
SETH LADD: Well, to be specific,
the style guide says

00:14:11.660 --> 00:14:13.650
prefer using var.

00:14:13.650 --> 00:14:17.122
The style guide is not use
only var inside methods.

00:14:17.122 --> 00:14:19.870
AUDIENCE: That's right, and I
think we had a long, long

00:14:19.870 --> 00:14:23.680
discussion about the word
prefer, and so yeah, prefer.

00:14:23.680 --> 00:14:26.460
SETH LADD: But it's totally OK
to use the type annotations if

00:14:26.460 --> 00:14:27.570
that's what you want.

00:14:27.570 --> 00:14:30.240
I'd love to take that poll
because I'm kind of curious.

00:14:30.240 --> 00:14:33.100
JOHN: So coming from C++, I
cannot break the habit of

00:14:33.100 --> 00:14:35.150
using type annotations.

00:14:35.150 --> 00:14:40.710
The only time that I kill
out the type is when I'm

00:14:40.710 --> 00:14:42.710
explicitly calling a constructor
because then it's

00:14:42.710 --> 00:14:44.430
just very redundant.

00:14:44.430 --> 00:14:47.510
Or when the line of text,
because the type name is so

00:14:47.510 --> 00:14:51.960
large that it's like going over
the 80-character limit,

00:14:51.960 --> 00:14:53.980
I'm like, well, let's just
shrink that down.

00:14:53.980 --> 00:14:57.220
SETH LADD: Abstract class
factory, class factory.

00:14:57.220 --> 00:14:59.190
SHAILEN TULI: R random
equals new random.

00:14:59.190 --> 00:14:59.460
JOHN: Yes.

00:14:59.460 --> 00:15:01.210
SHAILEN TULI: But you would not
do random random equals

00:15:01.210 --> 00:15:02.060
new random.

00:15:02.060 --> 00:15:02.920
JOHN: Yes.

00:15:02.920 --> 00:15:03.160
SHAILEN TULI: Good.

00:15:03.160 --> 00:15:06.390
JOHN: Because the type is
already on that line of code.

00:15:06.390 --> 00:15:08.810
SHAILEN TULI: But your OCD
doesn't kick in when you don't

00:15:08.810 --> 00:15:10.590
put random at the start?

00:15:10.590 --> 00:15:12.110
JOHN: It's hard to break
the habit, but I'm

00:15:12.110 --> 00:15:12.750
starting to get there.

00:15:12.750 --> 00:15:13.250
SHAILEN TULI: OK.

00:15:13.250 --> 00:15:13.640
Good.

00:15:13.640 --> 00:15:14.570
SETH LADD: Good.

00:15:14.570 --> 00:15:15.440
Great to hear that.

00:15:15.440 --> 00:15:16.380
SHAILEN TULI: vars are
there for a reason.

00:15:16.380 --> 00:15:16.790
Right?

00:15:16.790 --> 00:15:18.040
JOHN: Yes.

00:15:21.430 --> 00:15:23.440
SETH LADD: Hello to the new
people that have joined.

00:15:23.440 --> 00:15:26.680
Yeah, this is an Office Hours
for you guys, so ask away.

00:15:26.680 --> 00:15:27.220
What do you want to know?

00:15:27.220 --> 00:15:28.860
It doesn't have to be
specifically about M3,

00:15:28.860 --> 00:15:31.240
although that's what we're
all trained to do to

00:15:31.240 --> 00:15:31.900
help you guys today.

00:15:31.900 --> 00:15:33.360
But what's on your mind?

00:15:42.010 --> 00:15:44.115
All right, I'm going to start
calling on people's names if

00:15:44.115 --> 00:15:45.365
you guys don't--

00:15:49.950 --> 00:15:51.830
AUDIENCE: That's not a
bad idea, actually.

00:15:51.830 --> 00:15:52.630
SHAILEN TULI: Are
people talking,

00:15:52.630 --> 00:15:53.470
and we're not hearing?

00:15:53.470 --> 00:15:55.340
SETH LADD: Yeah, if someone's
talking, we can't hear you.

00:15:55.340 --> 00:15:56.605
Just FYI.

00:15:56.605 --> 00:15:58.326
AUDIENCE: Can you
hear me, Seth?

00:15:58.326 --> 00:15:59.730
Hi, guys.

00:15:59.730 --> 00:16:00.510
SETH LADD: There you go, yes.

00:16:00.510 --> 00:16:02.650
Hi, Ali.

00:16:02.650 --> 00:16:03.766
AUDIENCE: Hey.

00:16:03.766 --> 00:16:05.917
Just, you mentioned
in the [INAUDIBLE]

00:16:05.917 --> 00:16:08.252
that [INAUDIBLE]

00:16:08.252 --> 00:16:10.963
on.click.add would
be [INAUDIBLE].

00:16:13.801 --> 00:16:17.112
Is that [INAUDIBLE]

00:16:17.112 --> 00:16:19.120
warning in the [INAUDIBLE]

00:16:19.120 --> 00:16:19.605
editor?

00:16:19.605 --> 00:16:23.110
I don't see a warning
on the old format.

00:16:23.110 --> 00:16:25.000
SHAILEN TULI: It is
a warning, yeah.

00:16:25.000 --> 00:16:27.110
SETH LADD: That's a good
question, so you barely came

00:16:27.110 --> 00:16:30.060
through, so I'll reiterate
for you.

00:16:30.060 --> 00:16:32.750
The question was the
recommendation is to move to

00:16:32.750 --> 00:16:37.780
the new stream-based APIs in
Dart:HTML, which would be

00:16:37.780 --> 00:16:41.690
element.on, click.listen, which
replaces the old way to

00:16:41.690 --> 00:16:42.940
do it, element.on.click.add.

00:16:46.520 --> 00:16:49.180
But as Ali points out, and we
noticed too, is that there's

00:16:49.180 --> 00:16:52.300
no warning on the old way to do
it. on.click.add does not

00:16:52.300 --> 00:16:54.480
give any sorts of warnings.

00:16:54.480 --> 00:16:56.830
I suspect that's because the
engineers are being really

00:16:56.830 --> 00:16:59.870
nice and giving us this
grace period.

00:16:59.870 --> 00:17:03.110
Maybe what we should do is file
a bug and ask them to add

00:17:03.110 --> 00:17:07.325
deprecated to some of those
APIs, but the generalize

00:17:07.325 --> 00:17:12.819
advice is move to
.onClick.listen ASAP because

00:17:12.819 --> 00:17:15.030
the old way will be removed
as far as I understand.

00:17:19.300 --> 00:17:21.359
AUDIENCE: So, Seth, I was
thinking I might just wait

00:17:21.359 --> 00:17:23.290
until the warnings come out
because that'll make my life

00:17:23.290 --> 00:17:24.160
so much easier.

00:17:24.160 --> 00:17:26.339
What do you think about that?

00:17:26.339 --> 00:17:28.290
SETH LADD: Well, if you've got
cycles now, probably the

00:17:28.290 --> 00:17:32.070
advice is to move to the new
APIs as soon as you can.

00:17:32.070 --> 00:17:34.580
A, they're going to get ripped
out anyway, the old ones, but

00:17:34.580 --> 00:17:37.890
B, if you notice something when
you go to the new APIs,

00:17:37.890 --> 00:17:40.330
and you provide some feedback
for us, that's

00:17:40.330 --> 00:17:41.480
really, really valuable.

00:17:41.480 --> 00:17:44.102
So I would say as soon as
you can, do it and let

00:17:44.102 --> 00:17:45.400
us know how it goes.

00:17:45.400 --> 00:17:48.090
JJ, when you moved to some of
the new APIs, you had some

00:17:48.090 --> 00:17:50.480
really good feedback and
insights into the process.

00:17:58.340 --> 00:18:02.620
OK, so what we can do now is
Shailen's actually prepared a

00:18:02.620 --> 00:18:07.420
couple samples using the new
APIs, and so please do ask

00:18:07.420 --> 00:18:09.160
some questions here in
the Office Hours.

00:18:09.160 --> 00:18:11.848
But, Shailen, do you think we
can show just a couple of some

00:18:11.848 --> 00:18:12.964
of these new samples?

00:18:12.964 --> 00:18:14.302
SHAILEN TULI: Oh, sure, sure.

00:18:14.302 --> 00:18:19.460
So not knowing fully who was
going to be showing up and who

00:18:19.460 --> 00:18:21.576
wasn't, I sort of prepared
something that starts with

00:18:21.576 --> 00:18:24.240
very basic stuff and moves up.

00:18:24.240 --> 00:18:26.425
I don't know how much of the
basic stuff I should skip.

00:18:26.425 --> 00:18:27.070
Should I just--

00:18:27.070 --> 00:18:28.900
[INTERPOSING VOICES]

00:18:28.900 --> 00:18:30.570
SETH LADD: I think you should
go ahead and show us some of

00:18:30.570 --> 00:18:31.200
the basic stuff.

00:18:31.200 --> 00:18:31.670
SHAILEN TULI: OK.

00:18:31.670 --> 00:18:35.040
SETH LADD: And, Ollie, if you
don't mind, can you mute?

00:18:35.040 --> 00:18:38.160
And of course, if you have a
question, go ahead and unmute.

00:18:38.160 --> 00:18:39.960
JOHN: So why don't we start
with the basics.

00:18:39.960 --> 00:18:42.880
And if we start to hear a lot of
people say, you know what,

00:18:42.880 --> 00:18:45.320
this is too simple, then
we'll skip ahead.

00:18:45.320 --> 00:18:45.750
SETH LADD: OK.

00:18:45.750 --> 00:18:45.980
I like it.

00:18:45.980 --> 00:18:48.380
JOHN: So speak up if this
is way too basic.

00:18:48.380 --> 00:18:50.220
SETH LADD: And if you
can't see the fonts,

00:18:50.220 --> 00:18:51.000
please let us know.

00:18:51.000 --> 00:18:52.760
We try to embiggen them
a bunch, but we can

00:18:52.760 --> 00:18:54.620
embiggen them more.

00:18:54.620 --> 00:18:57.630
So, do this if you can't
see anything.

00:18:57.630 --> 00:18:59.690
JOHN: Is it "embiggen"
or "bigify"?

00:18:59.690 --> 00:19:00.540
SETH LADD: Oh, "embiggenify."

00:19:00.540 --> 00:19:03.260
SHAILEN TULI: "Embiggenify"
is a good one.

00:19:03.260 --> 00:19:03.800
SETH LADD: It's a
technical term.

00:19:03.800 --> 00:19:04.032
SHAILEN TULI: All right.

00:19:04.032 --> 00:19:07.960
So our cameras are up there,
my screen is down there.

00:19:07.960 --> 00:19:10.700
So if I'm burrowing down like
this, it's not because I don't

00:19:10.700 --> 00:19:11.510
want to look at you guys.

00:19:11.510 --> 00:19:13.906
But this is how it is.

00:19:13.906 --> 00:19:17.240
All right, so example
one, really simple.

00:19:17.240 --> 00:19:21.886
We got Completer so I create
this level function called

00:19:21.886 --> 00:19:27.020
getNum Create a Completer
completes it, and returns

00:19:27.020 --> 00:19:28.450
completer.future.

00:19:28.450 --> 00:19:30.130
It's just going to give
you the number 4.

00:19:30.130 --> 00:19:31.450
And then--

00:19:31.450 --> 00:19:33.600
SETH LADD: So, wait, what
are we seeing here?

00:19:33.600 --> 00:19:34.490
What are you demonstrating
here?

00:19:34.490 --> 00:19:37.500
SHAILEN TULI: So I am
demonstrating future's 101.

00:19:37.500 --> 00:19:37.800
SETH LADD: Got it.

00:19:37.800 --> 00:19:38.400
Futures 101.

00:19:38.400 --> 00:19:39.170
SHAILEN TULI: So if you know--

00:19:39.170 --> 00:19:40.180
SETH LADD: What is a future.

00:19:40.180 --> 00:19:41.200
SHAILEN TULI: A future--

00:19:41.200 --> 00:19:42.250
what is a--

00:19:42.250 --> 00:19:44.445
you know, it's hard answer the
question without using the

00:19:44.445 --> 00:19:45.650
word "future."

00:19:45.650 --> 00:19:47.930
[INTERPOSING VOICES]

00:19:47.930 --> 00:19:48.870
JOHN: It's a promise.

00:19:48.870 --> 00:19:51.880
SETH LADD: It's a promise to
use the word "future."

00:19:51.880 --> 00:19:55.390
SHAILEN TULI: A future is--

00:19:55.390 --> 00:19:58.470
well, I'm trying to do this
without using "future."

00:19:58.470 --> 00:19:59.160
SETH LADD: Don't worry,
use the "future."

00:19:59.160 --> 00:19:59.970
SHAILEN TULI: OK.

00:19:59.970 --> 00:20:02.310
That something will be given
to you in the future,

00:20:02.310 --> 00:20:04.290
it's not there now.

00:20:04.290 --> 00:20:07.500
And when it's given to you, then
you will do something.

00:20:07.500 --> 00:20:08.190
SETH LADD: I like it.

00:20:08.190 --> 00:20:08.920
OK.

00:20:08.920 --> 00:20:09.880
SHAILEN TULI: Right.

00:20:09.880 --> 00:20:10.590
So the [? when ?]

00:20:10.590 --> 00:20:15.190
then plays nicely with
the API .then.

00:20:15.190 --> 00:20:17.530
SETH LADD: Why are futures
important?

00:20:17.530 --> 00:20:20.560
SHAILEN TULI: Well, sometimes
things are expensive, and you

00:20:20.560 --> 00:20:22.480
don't want your application
to block.

00:20:22.480 --> 00:20:24.490
We don't think like
that in Dart.

00:20:24.490 --> 00:20:26.080
We think asynchronously.

00:20:26.080 --> 00:20:27.370
SETH LADD: And, specifically,
we don't think that way

00:20:27.370 --> 00:20:32.590
because Dart is a single-event
loop execution environment.

00:20:32.590 --> 00:20:33.830
Think of it as--

00:20:33.830 --> 00:20:36.030
[? queue ?] right, and you're
going to just pop off all

00:20:36.030 --> 00:20:37.130
these little work items.

00:20:37.130 --> 00:20:38.060
They may be call-backs.

00:20:38.060 --> 00:20:40.030
They may be instructions.

00:20:40.030 --> 00:20:42.420
Any time one of those guy's
does something really

00:20:42.420 --> 00:20:45.540
expensive, you're blocking
everything else.

00:20:45.540 --> 00:20:48.800
And so if you can return this
token, this future token, you

00:20:48.800 --> 00:20:53.440
return it right now, the event
loop can keep going, and when

00:20:53.440 --> 00:20:56.270
that value's ready to be given,
it can just be put on

00:20:56.270 --> 00:20:58.630
the event loop, and eventually,
oh, I'm ready now.

00:20:58.630 --> 00:20:59.310
SHAILEN TULI: Yeah.

00:20:59.310 --> 00:21:02.040
So it's like, I'm going to keep
doing other things, and

00:21:02.040 --> 00:21:03.940
when you have something
to give me, then

00:21:03.940 --> 00:21:04.430
I'll listen to you.

00:21:04.430 --> 00:21:05.290
SETH LADD: I like it.

00:21:05.290 --> 00:21:06.070
SHAILEN TULI: All right.

00:21:06.070 --> 00:21:10.100
So, unless anybody has
objections, this is just--

00:21:10.100 --> 00:21:11.690
this little page is over.

00:21:11.690 --> 00:21:12.090
SETH LADD: Ah, no.

00:21:12.090 --> 00:21:14.490
JOHN: Oh, whoa.

00:21:14.490 --> 00:21:16.230
SHAILEN TULI: You have
an objection?

00:21:16.230 --> 00:21:17.040
SETH LADD: What is
a Completer?

00:21:17.040 --> 00:21:18.290
JOHN: Objection.

00:21:22.310 --> 00:21:23.570
SHAILEN TULI: What
is a Completer?

00:21:23.570 --> 00:21:25.630
SETH LADD: Why do you have
that native code there?

00:21:25.630 --> 00:21:27.790
SHAILEN TULI: Well, so this
is how you are return

00:21:27.790 --> 00:21:31.760
a future, and so--

00:21:31.760 --> 00:21:34.890
JOHN: Maybe one way to think
about it is, if you look at--

00:21:34.890 --> 00:21:36.640
there is a receiver--

00:21:36.640 --> 00:21:39.090
there 's a thrower
and a catcher.

00:21:39.090 --> 00:21:40.980
So the Completer
is the thrower.

00:21:40.980 --> 00:21:45.430
The Completer is this object
that eventually will throw the

00:21:45.430 --> 00:21:46.810
value to the catcher--

00:21:46.810 --> 00:21:47.540
the future.

00:21:47.540 --> 00:21:51.830
SHAILEN TULI: And it's not
aware of who's catching.

00:21:51.830 --> 00:21:54.010
It has no notion of that.

00:21:54.010 --> 00:21:55.250
It throws--

00:21:55.250 --> 00:21:56.250
[INAUDIBLE]

00:21:56.250 --> 00:21:59.090
JOHN: So the pattern you see
with the code there is you

00:21:59.090 --> 00:22:00.870
instantiate a new
Completer class.

00:22:00.870 --> 00:22:04.260
And then, from within that
function, you return

00:22:04.260 --> 00:22:05.570
completer.future.

00:22:05.570 --> 00:22:09.210
You don't return the value that
you've completed upon.

00:22:09.210 --> 00:22:12.830
So that future then gets grabbed
by the calling code.

00:22:12.830 --> 00:22:14.830
They assign their then
method to it.

00:22:14.830 --> 00:22:17.200
And then whenever the Completer
calls the complete

00:22:17.200 --> 00:22:20.160
method, that future becomes
the value itself.

00:22:20.160 --> 00:22:21.550
And it's then that it calls.

00:22:21.550 --> 00:22:21.890
SETH LADD: Perfect.

00:22:21.890 --> 00:22:22.160
Perfect.

00:22:22.160 --> 00:22:24.990
Now this is a bit contrived
example because this doesn't

00:22:24.990 --> 00:22:27.160
show the long-running
or expensive

00:22:27.160 --> 00:22:28.770
asynchronous operation.

00:22:28.770 --> 00:22:29.820
Imagine [? inside ?]

00:22:29.820 --> 00:22:32.345
getNum would be like
a database query.

00:22:32.345 --> 00:22:32.840
SHAILEN TULI: All right, here.

00:22:32.840 --> 00:22:34.430
So since you brought
that up, let's go

00:22:34.430 --> 00:22:35.050
to the second example.

00:22:35.050 --> 00:22:35.560
SETH LADD: Yes.

00:22:35.560 --> 00:22:36.120
OK, here we go.

00:22:36.120 --> 00:22:37.540
This drives it home.

00:22:37.540 --> 00:22:40.050
SHAILEN TULI: So, I didn't
actually tell Seth to segue so

00:22:40.050 --> 00:22:41.200
beautifully, but--

00:22:41.200 --> 00:22:43.055
SETH LADD: We're linked,
like a--

00:22:43.055 --> 00:22:44.630
SHAILEN TULI: I actually don't
think I need [? .io. ?]

00:22:44.630 --> 00:22:45.710
But I'm not going to try
to break anything.

00:22:45.710 --> 00:22:46.690
All right, here we go.

00:22:46.690 --> 00:22:51.020
So it's the same getNum Now,
it takes two seconds.

00:22:51.020 --> 00:22:52.060
JOHN: Before it completes.

00:22:52.060 --> 00:22:53.020
SHAILEN TULI: Before
it completes.

00:22:53.020 --> 00:22:55.000
Now, so--

00:22:55.000 --> 00:22:57.290
SETH LADD: It takes two seconds
before it returns a

00:22:57.290 --> 00:22:59.990
value, but we should say that
this function is going to

00:22:59.990 --> 00:23:00.805
return instantly.

00:23:00.805 --> 00:23:01.460
SHAILEN TULI: Perfect.

00:23:01.460 --> 00:23:02.960
SETH LADD: The getNum is going
to return instantly.

00:23:02.960 --> 00:23:03.660
SHAILEN TULI: Perfect, yeah.

00:23:03.660 --> 00:23:04.760
So there's two things.

00:23:04.760 --> 00:23:06.810
So getNum has three parts.

00:23:06.810 --> 00:23:10.290
You create a Completer object,
that's the first part.

00:23:10.290 --> 00:23:12.770
Completer or complete
is the second part.

00:23:12.770 --> 00:23:15.520
OK it's wrapped in a timer here,
but that's what it is.

00:23:15.520 --> 00:23:18.810
And then returning
completer.future.

00:23:18.810 --> 00:23:22.640
Because most people think very
synchronously about code, it's

00:23:22.640 --> 00:23:25.480
tempting to think, OK, the first
thing happens, then the

00:23:25.480 --> 00:23:27.470
second thing happens, then
the third thing happens.

00:23:27.470 --> 00:23:30.430
The whole point of async here
is, the first thing happens.

00:23:30.430 --> 00:23:33.220
Yeah, you got a Completer
object right away.

00:23:33.220 --> 00:23:35.690
The last thing happens,
you return it.

00:23:35.690 --> 00:23:38.700
And then the second thing
happens when it happens.

00:23:38.700 --> 00:23:39.290
JOHN: Correct.

00:23:39.290 --> 00:23:40.370
SETH LADD: Yeah, at
some point later.

00:23:40.370 --> 00:23:41.780
SHAILEN TULI: At some point.

00:23:41.780 --> 00:23:44.810
It could happen really right
away if you're just returning

00:23:44.810 --> 00:23:47.260
the number 4, but if you're
waiting two seconds, and then

00:23:47.260 --> 00:23:49.565
returning the number 4, then it
happens two seconds later.

00:23:49.565 --> 00:23:51.510
SETH LADD: And this is what I
like about Completer here.

00:23:51.510 --> 00:23:54.510
You can take that instance
Completer and, thanks to

00:23:54.510 --> 00:23:57.740
lexical scoping, access it from
deep within a bunch of

00:23:57.740 --> 00:24:00.660
call-backs, or you pass
it to some other guy.

00:24:00.660 --> 00:24:03.050
So whoever's got a handle
on that Completer

00:24:03.050 --> 00:24:04.340
can complete it.

00:24:04.340 --> 00:24:09.160
And then magically, whoever's
listening on that future will

00:24:09.160 --> 00:24:10.490
get that value somewhere else.

00:24:10.490 --> 00:24:10.870
JOHN: Exactly.

00:24:10.870 --> 00:24:11.630
SETH LADD: I like that.

00:24:11.630 --> 00:24:13.810
SHAILEN TULI: So let
me run this.

00:24:13.810 --> 00:24:15.660
So notice that the returning
showed up.

00:24:15.660 --> 00:24:17.080
I don't know if you
can see it.

00:24:17.080 --> 00:24:17.950
SETH LADD: No.

00:24:17.950 --> 00:24:21.040
JOHN: It's kind of small,
because you can't embiggenify.

00:24:21.040 --> 00:24:22.070
SHAILEN TULI: Embiggenify?

00:24:22.070 --> 00:24:23.205
SETH LADD: Hm, that's a bug.

00:24:23.205 --> 00:24:24.290
It's unembiggefiable.

00:24:24.290 --> 00:24:26.780
JOHN: So for those of you who
aren't in the room with us,

00:24:26.780 --> 00:24:29.880
the first line says
"returning..." And you can see

00:24:29.880 --> 00:24:32.200
that print statement clearly
in the source code.

00:24:32.200 --> 00:24:33.560
SHAILEN TULI: OK, and I've
highlighted it down here.

00:24:33.560 --> 00:24:35.690
So you have to trust us that
that's really what it says.

00:24:35.690 --> 00:24:38.460
And then, the 4 shows up a
couple of seconds later.

00:24:38.460 --> 00:24:39.020
JOHN: Yes.

00:24:39.020 --> 00:24:40.130
SHAILEN TULI: Right?

00:24:40.130 --> 00:24:42.260
So here in our main--

00:24:42.260 --> 00:24:44.780
JOHN: Actually, if we could be
more explicit, what happens

00:24:44.780 --> 00:24:48.010
after two seconds is that the
then statement executes.

00:24:48.010 --> 00:24:48.910
SHAILEN TULI: Yeah.

00:24:48.910 --> 00:24:49.660
SETH LADD: Correct.

00:24:49.660 --> 00:24:52.570
SHAILEN TULI: Then has nothing
to do until it gets something.

00:24:52.570 --> 00:24:53.746
JOHN: Yes.

00:24:53.746 --> 00:24:54.642
SHAILEN TULI: Sorry,
I interrupted you.

00:24:54.642 --> 00:24:55.540
SETH LADD: No, you're right.

00:24:55.540 --> 00:24:59.650
SHAILEN TULI: So again,
getNum .then is--

00:24:59.650 --> 00:25:02.240
JOHN: What you're doing is your
cuing in the future when

00:25:02.240 --> 00:25:06.430
the Completer has completed,
call this function, in which

00:25:06.430 --> 00:25:09.050
case there's a closure, which
just prints the value.

00:25:09.050 --> 00:25:10.820
SHAILEN TULI: OK.

00:25:10.820 --> 00:25:12.280
So--

00:25:12.280 --> 00:25:14.510
JOHN: So this is the pattern
you're going to see over and

00:25:14.510 --> 00:25:15.910
over and over again
in code that uses

00:25:15.910 --> 00:25:17.475
Completers and futures.

00:25:17.475 --> 00:25:19.710
You instantiate a Completer
[? inside ?] of that function.

00:25:19.710 --> 00:25:20.910
You return completer.future.

00:25:20.910 --> 00:25:22.100
[? dot ?]

00:25:22.100 --> 00:25:24.660
And then, the calling function
is typically going to be

00:25:24.660 --> 00:25:26.830
chained immediately
with a .then.

00:25:26.830 --> 00:25:28.180
SETH LADD: Yes.

00:25:28.180 --> 00:25:33.050
And futures are really great
for one-time events.

00:25:33.050 --> 00:25:35.130
I want to get a value, and
there's only going to be one

00:25:35.130 --> 00:25:36.450
value that's going to come
out of this thing.

00:25:36.450 --> 00:25:39.880
JOHN: I want to do an HTTP
request, and when it is

00:25:39.880 --> 00:25:45.530
finished, then I want to print
the JSON or parts of the JSON,

00:25:45.530 --> 00:25:47.260
and get something out of it.

00:25:47.260 --> 00:25:48.310
SETH LADD: Now, contrast
that a little

00:25:48.310 --> 00:25:50.200
bit with, say, streams.

00:25:50.200 --> 00:25:53.730
Right, now the stream API is
designed to allow you to spit

00:25:53.730 --> 00:25:56.340
out a sequence or series
of these events.

00:25:56.340 --> 00:25:57.930
Future's really a
one-time deal.

00:25:57.930 --> 00:26:00.730
I'm only waiting for one kind
of event to happen.

00:26:00.730 --> 00:26:01.770
When I'm done, that's it.

00:26:01.770 --> 00:26:05.540
JOHN: So my go-to examples for
future versus stream is a

00:26:05.540 --> 00:26:07.190
future is an HTTP request.

00:26:07.190 --> 00:26:10.050
It's like this single thing
that you kick off.

00:26:10.050 --> 00:26:12.350
And it's going to take a while,
and it will complete.

00:26:12.350 --> 00:26:14.190
Whereas a stream
is an on-click.

00:26:14.190 --> 00:26:15.870
The user could be clicking
over and over and

00:26:15.870 --> 00:26:17.250
over again, and it's--

00:26:17.250 --> 00:26:20.380
you're not requesting
the click to occur.

00:26:20.380 --> 00:26:22.610
You're just being told
that it happened.

00:26:22.610 --> 00:26:24.075
SETH LADD: And many, many
clicks can happen.

00:26:24.075 --> 00:26:24.380
JOHN: Yes.

00:26:24.380 --> 00:26:24.740
SETH LADD: Yeah.

00:26:24.740 --> 00:26:25.220
Exactly.

00:26:25.220 --> 00:26:26.390
Perfect.

00:26:26.390 --> 00:26:27.975
All right, by the way--

00:26:27.975 --> 00:26:29.190
oh, go ahead, JJ.

00:26:29.190 --> 00:26:30.910
AUDIENCE: We're reading--
my favorite is reading

00:26:30.910 --> 00:26:31.850
lines from a file.

00:26:31.850 --> 00:26:33.920
You could have a stream where
it's giving you a bunch of

00:26:33.920 --> 00:26:36.020
lines coming from a file.

00:26:36.020 --> 00:26:38.450
Then you could modify that
stream to create another

00:26:38.450 --> 00:26:41.090
stream, which is all the
lines coming from

00:26:41.090 --> 00:26:43.720
the file, UTF-8 decoded.

00:26:43.720 --> 00:26:46.620
And then you could modify it,
create another stream coming

00:26:46.620 --> 00:26:48.330
from the original stream,
in which case

00:26:48.330 --> 00:26:51.250
you break it on tabs.

00:26:51.250 --> 00:26:54.520
And so, I think of it as UNIX
pipes, in a certain sense.

00:26:54.520 --> 00:26:55.510
SETH LADD: That's right.

00:26:55.510 --> 00:26:58.440
JOHN: There's a lot of
analog there between

00:26:58.440 --> 00:27:00.880
streams in UNIX pipes.

00:27:00.880 --> 00:27:02.090
SETH LADD: This sounds
like a good

00:27:02.090 --> 00:27:03.550
segue to get into streams.

00:27:03.550 --> 00:27:05.430
Do you have some stream
stuff for us?

00:27:05.430 --> 00:27:06.200
SHAILEN TULI: Yeah--

00:27:06.200 --> 00:27:07.260
SETH LADD: Or are we
jumping ahead?

00:27:07.260 --> 00:27:09.160
SHAILEN TULI: Well, depends
on what we want to do.

00:27:09.160 --> 00:27:10.410
There's no jumping ahead.

00:27:10.410 --> 00:27:12.850
SETH LADD: Do you guys have any
questions about the basic

00:27:12.850 --> 00:27:17.200
kind of concepts about
Completers and futures?

00:27:17.200 --> 00:27:19.130
And if you're shy-- oh,
we've got a chat.

00:27:19.130 --> 00:27:19.540
OK.

00:27:19.540 --> 00:27:19.890
Perfect.

00:27:19.890 --> 00:27:20.600
Sorry, guys.

00:27:20.600 --> 00:27:22.480
You should definitely
use chat, as well.

00:27:22.480 --> 00:27:23.020
That's fine.

00:27:23.020 --> 00:27:26.030
We'll start actually monitoring
this now.

00:27:26.030 --> 00:27:28.430
"I'm a Java programmer, so it's
in my blood to use static

00:27:28.430 --> 00:27:29.440
type, the Triborough"--

00:27:29.440 --> 00:27:30.060
OK, cool.

00:27:30.060 --> 00:27:31.300
Thanks, Frank.

00:27:31.300 --> 00:27:33.270
JOHN: I'm a C++ programmer,
Frank, and

00:27:33.270 --> 00:27:35.490
I'm in the same vein.

00:27:35.490 --> 00:27:39.040
It's very much just in my
blood to put the types

00:27:39.040 --> 00:27:39.500
everywhere.

00:27:39.500 --> 00:27:40.080
I like it.

00:27:40.080 --> 00:27:41.290
It's very verbose.

00:27:41.290 --> 00:27:43.780
SHAILEN TULI: To me, either you
use types, or you don't.

00:27:43.780 --> 00:27:44.280
So--

00:27:44.280 --> 00:27:45.340
SETH LADD: I don't know, I think
there's definitely a

00:27:45.340 --> 00:27:45.620
middle ground.

00:27:45.620 --> 00:27:46.770
[INTERPOSING VOICES]

00:27:46.770 --> 00:27:47.540
SHAILEN TULI: Well, OK, clearly
in Dart, there's a

00:27:47.540 --> 00:27:47.970
middle ground.

00:27:47.970 --> 00:27:49.750
SETH LADD: Yeah, yeah,
not in Dart.

00:27:49.750 --> 00:27:50.880
Are there other languages?

00:27:50.880 --> 00:27:54.150
SHAILEN TULI: Well, no, what
I mean is, Dart, might--

00:27:54.150 --> 00:27:57.250
the way my head is wired, I'm
saying either I put vars

00:27:57.250 --> 00:28:00.260
everywhere, or I put random
equals new random.

00:28:00.260 --> 00:28:02.860
And so it takes a little
adjusting to say, OK, I don't

00:28:02.860 --> 00:28:04.470
need to do this verbose
thing everywhere.

00:28:04.470 --> 00:28:05.380
SETH LADD: Oh, you mean
traditionally that's how your

00:28:05.380 --> 00:28:05.980
brain was wired.

00:28:05.980 --> 00:28:10.050
JOHN: Interestingly enough, C++
is actually moving towards

00:28:10.050 --> 00:28:11.190
the Dart way.

00:28:11.190 --> 00:28:16.480
In C++ 11, they introduced the
auto keyword, which, just like

00:28:16.480 --> 00:28:19.740
Dart's var keyword, it just
automatically deduces the type

00:28:19.740 --> 00:28:21.300
based on the right-hand side.

00:28:21.300 --> 00:28:22.690
SETH LADD: So we should probably
be really specific

00:28:22.690 --> 00:28:23.160
about that.

00:28:23.160 --> 00:28:25.490
So in Dart, var is
not like auto.

00:28:25.490 --> 00:28:29.060
In Dart, var is a stand-in
for Dynamic.

00:28:29.060 --> 00:28:30.500
Now the Editor--

00:28:30.500 --> 00:28:33.005
if there's a flag in Editor,
you can be like

00:28:33.005 --> 00:28:34.200
a little bit smarter.

00:28:34.200 --> 00:28:36.910
But it's going well above
and beyond what the

00:28:36.910 --> 00:28:38.310
language back is saying.

00:28:38.310 --> 00:28:41.480
As far as Dynamic,
there is no auto.

00:28:41.480 --> 00:28:45.290
I write code with the checkbox
for the Editor that says, do

00:28:45.290 --> 00:28:46.790
some extra inferencing for me.

00:28:46.790 --> 00:28:48.295
Definitely, I think it's
super helpful.

00:28:48.295 --> 00:28:51.390
JOHN: So in that sense, they're
not the same, but the

00:28:51.390 --> 00:28:53.320
programmers are moving towards
that way where it's like, I

00:28:53.320 --> 00:28:55.380
don't need to write
out the type.

00:28:55.380 --> 00:28:58.620
If the compiler of the tool can
deduce the type for me,

00:28:58.620 --> 00:29:01.840
why write it out?

00:29:01.840 --> 00:29:03.415
SETH LADD: Anyway, guys, we're
watching the chat now, so go

00:29:03.415 --> 00:29:07.190
ahead and use that, or just wave
your hands and speak up.

00:29:07.190 --> 00:29:08.110
That's why we're here for you.

00:29:08.110 --> 00:29:11.275
But you've got some more on
futures then, I think.

00:29:11.275 --> 00:29:13.260
SHAILEN TULI: Yeah, actually,
I played around with error

00:29:13.260 --> 00:29:14.220
handling in futures yesterday.

00:29:14.220 --> 00:29:15.150
SETH LADD: Oh, good topic.

00:29:15.150 --> 00:29:17.160
SHAILEN TULI: I got deep into
it because I kept getting

00:29:17.160 --> 00:29:19.660
bitten and wasn't sure
what was going wrong.

00:29:19.660 --> 00:29:24.810
So, if you're trying to use
.then in the Editor--

00:29:24.810 --> 00:29:27.160
let's just try it here, OK?

00:29:27.160 --> 00:29:28.790
Tell me if you guys
can see this.

00:29:35.950 --> 00:29:39.570
Notice it tells you that,
oh, it takes an onError.

00:29:39.570 --> 00:29:41.450
SETH LADD: OK, so these are
two different call-backs.

00:29:41.450 --> 00:29:41.850
SHAILEN TULI: Yeah.

00:29:41.850 --> 00:29:44.240
So basically, it's a common
pattern, right?

00:29:44.240 --> 00:29:46.040
When things go well,
do something.

00:29:46.040 --> 00:29:48.190
When things go badly,
do something else.

00:29:48.190 --> 00:29:49.370
Right?

00:29:49.370 --> 00:29:51.330
Beware of onError.

00:29:51.330 --> 00:29:53.910
And if we have time, I'm going
to try to convince you to

00:29:53.910 --> 00:29:57.970
never use it, and use better
things that Dart gives you.

00:29:57.970 --> 00:30:01.060
So I'll go through
that quickly.

00:30:01.060 --> 00:30:02.310
So here's--

00:30:05.950 --> 00:30:07.490
close this.

00:30:07.490 --> 00:30:08.070
That doesn't matter.

00:30:08.070 --> 00:30:08.510
All right.

00:30:08.510 --> 00:30:09.760
Here we go.

00:30:11.810 --> 00:30:13.450
OK, so here's a simple
error handling.

00:30:13.450 --> 00:30:16.830
So you've got a function named
foo, which should be returning

00:30:16.830 --> 00:30:18.460
a number, but it doesn't.

00:30:18.460 --> 00:30:21.030
It throws.

00:30:21.030 --> 00:30:24.980
And you have another function
called getNum, which is the

00:30:24.980 --> 00:30:26.960
standard one for all
our examples.

00:30:26.960 --> 00:30:30.130
And this one returns
a future, right?

00:30:30.130 --> 00:30:35.710
But this time, it calls foo
internally, and then it uses

00:30:35.710 --> 00:30:36.960
completeError.

00:30:39.130 --> 00:30:41.100
SETH LADD: So here, you're
writing getNum with the

00:30:41.100 --> 00:30:43.460
expectation that something
bad may happen.

00:30:43.460 --> 00:30:46.850
So you're smart, you write
the try, the catch, OK.

00:30:46.850 --> 00:30:48.340
And that's where Completer
comes in again.

00:30:48.340 --> 00:30:48.690
SHAILEN TULI: Right.

00:30:48.690 --> 00:30:49.490
So here we go.

00:30:49.490 --> 00:30:53.490
So if things go well, we put
the value of whatever foo

00:30:53.490 --> 00:30:55.080
gives us into val.

00:30:55.080 --> 00:30:57.100
And we return that
completer.complete--

00:30:57.100 --> 00:30:58.600
the same stuff we
had seen before.

00:30:58.600 --> 00:30:59.750
We're good to go.

00:30:59.750 --> 00:31:02.230
If things don't go well,
we need to do this.

00:31:07.800 --> 00:31:10.600
This is how you basically
throw arrays

00:31:10.600 --> 00:31:12.810
in the async context.

00:31:12.810 --> 00:31:15.000
If you just write "throw,"
I don't think--

00:31:15.000 --> 00:31:17.310
it kind of, sort of
just falls apart.

00:31:17.310 --> 00:31:18.210
SETH LADD: Hopefully you have
an example of that, because

00:31:18.210 --> 00:31:19.920
that's where I think that
onError might come in.

00:31:19.920 --> 00:31:21.380
But you're right, this is--

00:31:21.380 --> 00:31:22.970
you expect something
may happen.

00:31:22.970 --> 00:31:25.280
Let's do the right thing,
completeError.

00:31:25.280 --> 00:31:27.140
SHAILEN TULI: Right, so whatever
is returning the

00:31:27.140 --> 00:31:31.510
future should handle errors that
it gets from somewhere

00:31:31.510 --> 00:31:35.270
else or raises internally, and
omit those errors using a

00:31:35.270 --> 00:31:36.940
completeError.

00:31:36.940 --> 00:31:38.410
OK?

00:31:38.410 --> 00:31:40.392
Then, this is what your
handling of all

00:31:40.392 --> 00:31:41.540
of that looks like.

00:31:41.540 --> 00:31:42.380
So here we go.

00:31:42.380 --> 00:31:43.910
We call getNum.

00:31:43.910 --> 00:31:45.900
We put a then.

00:31:45.900 --> 00:31:47.040
And this part--

00:31:47.040 --> 00:31:48.290
let's see if I can
highlight this--

00:31:50.870 --> 00:31:52.760
is the success, right?

00:31:52.760 --> 00:31:55.990
We get the value for whatever,
and we print it.

00:31:55.990 --> 00:31:57.730
But we're not going to get it
the way this is written,

00:31:57.730 --> 00:32:00.590
because foo, as we said,
throws, right?

00:32:00.590 --> 00:32:05.090
So then, you should just
call .catchError.

00:32:05.090 --> 00:32:07.100
Not onError and I'll explain
in a minute why.

00:32:07.100 --> 00:32:08.960
SETH LADD: Yeah, so, let's
actually point that out,

00:32:08.960 --> 00:32:10.710
because you're not--

00:32:10.710 --> 00:32:14.140
this catchError handler is not
part of the then call, right?

00:32:14.140 --> 00:32:15.740
You're actually chaining
something to the end.

00:32:15.740 --> 00:32:17.490
And so then--

00:32:17.490 --> 00:32:19.620
and then chain on a catchError
to the future itself.

00:32:19.620 --> 00:32:20.340
SHAILEN TULI: That's right.

00:32:20.340 --> 00:32:25.240
So, you're saying do this, and
then if there's failure, we

00:32:25.240 --> 00:32:26.900
use catchError to catch that.

00:32:26.900 --> 00:32:29.370
In this case, let's just run it,
It says it's not going to

00:32:29.370 --> 00:32:30.190
give you an end.

00:32:30.190 --> 00:32:32.620
It catches that error.

00:32:32.620 --> 00:32:34.920
AUDIENCE: So there's
an important thing.

00:32:34.920 --> 00:32:38.300
Some of my code was calling
basically getNum

00:32:38.300 --> 00:32:39.570
and getting a future.

00:32:39.570 --> 00:32:42.660
And then I would do it in two
statements, I would do a

00:32:42.660 --> 00:32:45.910
future.then, and then I would
do a future.catchError.

00:32:45.910 --> 00:32:47.140
And that is not the
right thing.

00:32:47.140 --> 00:32:50.580
You need to do it in
a single chain.

00:32:50.580 --> 00:32:52.910
SETH LADD: Excellent,
excellent point, JJ.

00:32:52.910 --> 00:32:55.080
Why don't you reiterate that,
because that's a tricky one.

00:32:55.080 --> 00:32:58.230
AUDIENCE: So if you call
getNum and it returns a

00:32:58.230 --> 00:33:01.910
future, and some of my code was
saying future .then, and

00:33:01.910 --> 00:33:04.080
then later, future.catchError.

00:33:04.080 --> 00:33:10.070
But because the way futures
work, that ends up setting up

00:33:10.070 --> 00:33:16.960
two different chains of future
handlers, and that is not the

00:33:16.960 --> 00:33:17.470
right thing.

00:33:17.470 --> 00:33:19.950
So if you're going to
use catchError, you

00:33:19.950 --> 00:33:21.252
want to chain it.

00:33:21.252 --> 00:33:21.590
SETH LADD: Excellent.

00:33:21.590 --> 00:33:23.790
So, JJ, we did--

00:33:23.790 --> 00:33:24.450
thank you for bringing
this up.

00:33:24.450 --> 00:33:26.440
We did what you should not do.

00:33:26.440 --> 00:33:28.970
I think this is what you're
saying, right, don't do this?

00:33:28.970 --> 00:33:29.880
AUDIENCE: Don't do that.

00:33:29.880 --> 00:33:30.810
SETH LADD: Right.

00:33:30.810 --> 00:33:31.560
SHAILEN TULI: Because
essentially,

00:33:31.560 --> 00:33:32.270
you have two things.

00:33:32.270 --> 00:33:34.170
Now here, this is
going to just--

00:33:34.170 --> 00:33:36.220
oh, we can run it.

00:33:36.220 --> 00:33:37.470
OK.

00:33:39.850 --> 00:33:41.040
This was not supposed to work.

00:33:41.040 --> 00:33:43.485
SETH LADD: Oh wait, let's
see here. getNum--

00:33:43.485 --> 00:33:44.570
ah, this is it.

00:33:44.570 --> 00:33:46.190
SHAILEN TULI: Oh,
it needs to be--

00:33:46.190 --> 00:33:48.120
SETH LADD: You do this.

00:33:48.120 --> 00:33:49.170
And then you say--

00:33:49.170 --> 00:33:50.810
this is I think what
you're saying, JJ.

00:33:50.810 --> 00:33:51.896
Is that right?

00:33:51.896 --> 00:33:53.120
AUDIENCE: Yeah, that's right.

00:33:53.120 --> 00:33:54.845
SETH LADD: Because
this will return.

00:33:54.845 --> 00:33:58.040
Try that.

00:33:58.040 --> 00:33:59.290
Now, is that still doing it?

00:34:03.280 --> 00:34:06.150
Maybe it's two different
thens.

00:34:06.150 --> 00:34:10.489
AUDIENCE: No, we're not reproing
the correct case, but

00:34:10.489 --> 00:34:12.780
this is definitely the broken
way of doing things.

00:34:12.780 --> 00:34:16.290
And there was an email to the
mailing list about this, but

00:34:16.290 --> 00:34:19.239
this actually bit me
in my own code.

00:34:19.239 --> 00:34:23.310
In any case, remember
to do the chaining.

00:34:23.310 --> 00:34:25.540
SETH LADD: It sounds like what
we should do is, let's take an

00:34:25.540 --> 00:34:25.889
action item.

00:34:25.889 --> 00:34:26.980
We'll write up a blog post.

00:34:26.980 --> 00:34:29.500
We'll repro the exact
situation.

00:34:29.500 --> 00:34:31.429
And we'll show the don't do
this, and we'll show the do

00:34:31.429 --> 00:34:31.989
this version.

00:34:31.989 --> 00:34:33.460
So thank you very much
for bringing this up.

00:34:33.460 --> 00:34:36.469
SHAILEN TULI: Yeah, I'm going
to write up all this stuff,

00:34:36.469 --> 00:34:39.488
and then I can add
that stuff there.

00:34:39.488 --> 00:34:40.520
Can I make this slightly
smaller?

00:34:40.520 --> 00:34:42.159
I actually can't navigate.

00:34:42.159 --> 00:34:43.389
SETH LADD: No, I'm
really-- this is

00:34:43.389 --> 00:34:44.600
going on YouTube later.

00:34:44.600 --> 00:34:45.690
The bigger, the better.

00:34:45.690 --> 00:34:46.510
SHAILEN TULI: OK, OK.

00:34:46.510 --> 00:34:47.820
So--

00:34:47.820 --> 00:34:50.940
AUDIENCE: One more
thing, Shailen.

00:34:50.940 --> 00:34:53.420
So it used to be that
you, as far as I can

00:34:53.420 --> 00:34:55.920
tell, you had to call--

00:34:55.920 --> 00:34:56.639
what is it?

00:34:56.639 --> 00:34:57.350
A handle error--

00:34:57.350 --> 00:34:58.410
I can't see your code.

00:34:58.410 --> 00:34:59.667
It's a little bit up.

00:35:02.590 --> 00:35:04.350
SHAILEN TULI: Where I defined
the function?

00:35:04.350 --> 00:35:05.130
Here?

00:35:05.130 --> 00:35:06.660
AUDIENCE: A little bit higher.

00:35:06.660 --> 00:35:07.780
SHAILEN TULI: That's
just foo throwing.

00:35:07.780 --> 00:35:08.380
AUDIENCE: Yeah, yeah.

00:35:08.380 --> 00:35:11.250
So it used to be that you'd have
to call completeError, or

00:35:11.250 --> 00:35:12.770
whatever, handle error,
whatever.

00:35:12.770 --> 00:35:13.926
Not handle error, but--

00:35:13.926 --> 00:35:14.760
SHAILEN TULI: completeError.

00:35:14.760 --> 00:35:17.000
AUDIENCE: Yeah, completeError
before.

00:35:17.000 --> 00:35:19.390
And that you couldn't just
raise an exception.

00:35:19.390 --> 00:35:20.660
But [? Florine ?]

00:35:20.660 --> 00:35:23.450
was saying that, actually, if
you raise an exception, it'll

00:35:23.450 --> 00:35:26.460
be caught by the system, and
automatically translated into

00:35:26.460 --> 00:35:27.910
completeError.

00:35:27.910 --> 00:35:29.990
And he told me that,
and I tried it.

00:35:29.990 --> 00:35:32.340
It didn't work, but I think I
was using a slightly older

00:35:32.340 --> 00:35:34.180
version of the SDK.

00:35:34.180 --> 00:35:37.290
So this might actually be like
brand new functionality where

00:35:37.290 --> 00:35:40.840
I think it might be the case
that, if you happen to raise

00:35:40.840 --> 00:35:43.280
an error, it will get caught
and translated into

00:35:43.280 --> 00:35:44.420
completeError.

00:35:44.420 --> 00:35:46.510
That makes life a little
bit easier.

00:35:46.510 --> 00:35:48.600
SHAILEN TULI: I wonder actually,
though, if he was

00:35:48.600 --> 00:35:51.350
talking about something slightly
different, which is

00:35:51.350 --> 00:35:57.950
in your then, if you raise an
error, that's where onError

00:35:57.950 --> 00:36:03.530
will kill you, and catchError
will beautifully help you out.

00:36:03.530 --> 00:36:06.700
But I'll try your thing, also.

00:36:06.700 --> 00:36:08.580
SETH LADD: So it sounds like
we-- let's write up a blog

00:36:08.580 --> 00:36:12.020
post on different ways these
futures can throw errors, and

00:36:12.020 --> 00:36:13.970
the right and wrong
ways to chain.

00:36:13.970 --> 00:36:14.720
This is great.

00:36:14.720 --> 00:36:15.770
We definitely more here.

00:36:15.770 --> 00:36:17.190
SHAILEN TULI: So onError.

00:36:17.190 --> 00:36:19.820
Now, let's just go back to the
way the Editor, at least for

00:36:19.820 --> 00:36:22.330
now, is telling you
to do this, right?

00:36:22.330 --> 00:36:25.340
The same getNum you call--

00:36:25.340 --> 00:36:26.490
oh, OK--

00:36:26.490 --> 00:36:34.070
you call foo, and it throws.

00:36:34.070 --> 00:36:37.660
getNum again, call foo, check
to see if there's an error,

00:36:37.660 --> 00:36:41.140
and sends out a completeError.

00:36:41.140 --> 00:36:46.720
Now, if you've re-throw
in your then,

00:36:46.720 --> 00:36:49.520
this will fall apart.

00:36:49.520 --> 00:36:51.130
SETH LADD: OK, so here
we have then.

00:36:51.130 --> 00:36:54.750
We know that foo is going
to throw an exception.

00:36:54.750 --> 00:36:56.060
SHAILEN TULI: Right,
so this will catch

00:36:56.060 --> 00:36:57.980
foo's exception nicely.

00:36:57.980 --> 00:36:59.480
onError will catch it.

00:36:59.480 --> 00:37:03.300
But because you're then also
did some mischief--

00:37:03.300 --> 00:37:04.220
SETH LADD: Oh, so you're
not rethrowing.

00:37:04.220 --> 00:37:05.450
You're just throwing a
new exception there.

00:37:05.450 --> 00:37:06.370
Sorry, that confused me.

00:37:06.370 --> 00:37:09.580
SHAILEN TULI: Yeah, throw
something new.

00:37:09.580 --> 00:37:11.330
SETH LADD: OK, that
makes more sense.

00:37:11.330 --> 00:37:12.760
SHAILEN TULI: Oops.

00:37:12.760 --> 00:37:14.470
Sorry, guys, I'm not
used to this font.

00:37:14.470 --> 00:37:15.370
OK.

00:37:15.370 --> 00:37:16.650
Throw something new.

00:37:16.650 --> 00:37:19.910
That something new now will
not be caught by onError.

00:37:19.910 --> 00:37:23.500
But it will be caught by--

00:37:23.500 --> 00:37:24.820
SETH LADD: Why don't you
run the code now.

00:37:24.820 --> 00:37:25.220
What happens?

00:37:25.220 --> 00:37:27.860
SHAILEN TULI: OK, so--

00:37:27.860 --> 00:37:29.160
all right, this is
not [INAUDIBLE].

00:37:32.680 --> 00:37:35.960
JOHN: I think you need to change
foo to return 4, and

00:37:35.960 --> 00:37:39.480
then throw from inside
there, right?

00:37:39.480 --> 00:37:41.620
Because the then clause will
never execute the way it's--

00:37:41.620 --> 00:37:42.590
SHAILEN TULI: Oh yeah,
I'm sorry.

00:37:42.590 --> 00:37:43.850
That's why I had it as that.

00:37:43.850 --> 00:37:45.050
OK, I changed it without
thinking.

00:37:45.050 --> 00:37:46.300
Here we go.

00:37:48.140 --> 00:37:49.360
Thank you, John.

00:37:49.360 --> 00:37:50.610
There you go.

00:37:53.160 --> 00:37:55.340
We called it, foo returned 4.

00:37:55.340 --> 00:37:57.600
So, there was no problem here.

00:37:57.600 --> 00:37:58.440
SETH LADD: You have
no problem there.

00:37:58.440 --> 00:37:59.440
SHAILEN TULI: Completer.complete
could

00:37:59.440 --> 00:38:01.390
happen normally.

00:38:01.390 --> 00:38:04.360
In here, you got into
the then normally.

00:38:04.360 --> 00:38:06.900
And you printed the
value, which I can

00:38:06.900 --> 00:38:09.990
attest actually happens.

00:38:09.990 --> 00:38:11.250
The number 4 was returned.

00:38:11.250 --> 00:38:11.870
That's a value.

00:38:11.870 --> 00:38:13.070
That's what you get.

00:38:13.070 --> 00:38:16.470
And then we threw something new,
and at that point, all

00:38:16.470 --> 00:38:17.140
hell broke loose.

00:38:17.140 --> 00:38:18.340
There was no way
to handle that.

00:38:18.340 --> 00:38:19.110
SETH LADD: Got it.

00:38:19.110 --> 00:38:23.950
SHAILEN TULI: You do
this catchError.

00:38:27.130 --> 00:38:30.590
So again, you return
a 4 from foo.

00:38:30.590 --> 00:38:31.390
You handle that.

00:38:31.390 --> 00:38:33.520
All the code is the same.

00:38:33.520 --> 00:38:34.860
And, OK, I [INAUDIBLE]

00:38:34.860 --> 00:38:38.310
"rethrowing." I'll just
say "throw something."

00:38:38.310 --> 00:38:40.800
SETH LADD: That's fine.

00:38:40.800 --> 00:38:41.880
SHAILEN TULI: Right?

00:38:41.880 --> 00:38:43.560
And now, you run it.

00:38:47.220 --> 00:38:49.310
And it says, ah, you threw
something new.

00:38:49.310 --> 00:38:50.910
I can handle that.

00:38:50.910 --> 00:38:55.675
So that, for me, a real blessing
of using catchError.

00:38:58.840 --> 00:39:01.240
It's one of those things,
it's just--

00:39:01.240 --> 00:39:04.580
I don't know if there's
a bug--

00:39:04.580 --> 00:39:08.360
I don't know what scenarios
there are where you would want

00:39:08.360 --> 00:39:10.350
to use onError and
not catchError.

00:39:10.350 --> 00:39:10.640
SETH LADD: Cool.

00:39:10.640 --> 00:39:11.490
But we will find out.

00:39:11.490 --> 00:39:12.870
And we're going to document
that for everyone.

00:39:12.870 --> 00:39:13.330
I like it.

00:39:13.330 --> 00:39:14.350
SHAILEN TULI: One last point.

00:39:14.350 --> 00:39:16.830
And this is being made by people
on the mailing list.

00:39:16.830 --> 00:39:18.080
This is a huge point.

00:39:20.860 --> 00:39:22.080
So again, we go back--

00:39:22.080 --> 00:39:24.550
so this is about when you
do error handling.

00:39:24.550 --> 00:39:28.490
If you wait too long, it's
going to bite you.

00:39:28.490 --> 00:39:30.990
So again, foo throws.

00:39:30.990 --> 00:39:33.960
getNum is exactly the same.

00:39:33.960 --> 00:39:37.320
It does what it was doing
in previous examples.

00:39:37.320 --> 00:39:40.530
Now, we call getNum.

00:39:43.970 --> 00:39:49.820
And we put all of this stuff,
the then, all the onError,

00:39:49.820 --> 00:39:51.830
inside a timer.

00:39:51.830 --> 00:39:53.620
SETH LADD: OK.

00:39:53.620 --> 00:39:56.500
SHAILEN TULI: So anyone want
to guess what happens here?

00:39:56.500 --> 00:39:58.230
JOHN: I know, so
I won't guess.

00:39:58.230 --> 00:40:00.270
SETH LADD: But getNum is going
to throw an exception.

00:40:00.270 --> 00:40:00.560
SHAILEN TULI: Right.

00:40:00.560 --> 00:40:03.090
At this point--

00:40:03.090 --> 00:40:04.500
SETH LADD: And num
is a future?

00:40:04.500 --> 00:40:04.770
SHAILEN TULI: Yeah.

00:40:04.770 --> 00:40:05.690
SETH LADD: OK.

00:40:05.690 --> 00:40:06.840
SHAILEN TULI: So, I
should have called

00:40:06.840 --> 00:40:07.360
it something better.

00:40:07.360 --> 00:40:08.460
It's not a number.

00:40:08.460 --> 00:40:11.360
It's a future number
or something.

00:40:11.360 --> 00:40:16.410
So at this point, the error's
emitted, and there's no

00:40:16.410 --> 00:40:17.700
one to handle it.

00:40:17.700 --> 00:40:19.640
Because your onError is getting

00:40:19.640 --> 00:40:23.680
attached after three seconds.

00:40:23.680 --> 00:40:25.970
And in this case, onError
is not to blame.

00:40:25.970 --> 00:40:28.890
The same exact same thing
happens if you use catchError.

00:40:31.580 --> 00:40:33.310
If you put it in a timer, OK?

00:40:36.850 --> 00:40:37.830
SETH LADD: Go back to
the other example.

00:40:37.830 --> 00:40:38.840
What happens?

00:40:38.840 --> 00:40:40.470
SHAILEN TULI: OK, so--

00:40:40.470 --> 00:40:41.460
you want me to run it?

00:40:41.460 --> 00:40:42.340
SETH LADD: Yeah.

00:40:42.340 --> 00:40:43.330
SHAILEN TULI: Of course.

00:40:43.330 --> 00:40:43.660
There.

00:40:43.660 --> 00:40:44.970
Uncaught.

00:40:44.970 --> 00:40:48.845
It says, uncaught error,
unhandled exception, blah,

00:40:48.845 --> 00:40:49.450
blah, blah.

00:40:49.450 --> 00:40:52.020
And it gives you all
the details, right?

00:40:52.020 --> 00:40:54.096
If you do this with catchError,
catchError is good

00:40:54.096 --> 00:40:55.346
for other things.

00:40:58.060 --> 00:41:03.510
So this works because I called
getNum inside the new timer.

00:41:03.510 --> 00:41:14.760
But if I had done this, that
should not work now.

00:41:14.760 --> 00:41:17.400
AUDIENCE: So I think the key
point you're raising is that

00:41:17.400 --> 00:41:20.680
there's a race condition here,
and if you're going to call

00:41:20.680 --> 00:41:24.500
something that returns a future,
you need to call .then

00:41:24.500 --> 00:41:26.140
as soon as you get
that future back.

00:41:26.140 --> 00:41:29.030
You can't do it later because,
if you do it later, you're

00:41:29.030 --> 00:41:32.690
going to hit this race
condition, and things won't be

00:41:32.690 --> 00:41:34.170
set up correctly.

00:41:34.170 --> 00:41:37.750
SETH LADD: And that's because,
if you miss a loop in the

00:41:37.750 --> 00:41:39.410
event loop, right?

00:41:39.410 --> 00:41:40.250
JOHN: Yes.

00:41:40.250 --> 00:41:43.840
That's exactly it.

00:41:43.840 --> 00:41:45.250
SHAILEN TULI: I can move
the streams now.

00:41:45.250 --> 00:41:46.090
There's one [INAUDIBLE]

00:41:46.090 --> 00:41:47.070
I just mentioned it.

00:41:47.070 --> 00:41:49.820
It is very simple.

00:41:49.820 --> 00:41:50.220
Not [INAUDIBLE].

00:41:50.220 --> 00:41:52.870
I'm sorry, whenComplete, I don't
actually know if this is

00:41:52.870 --> 00:41:55.560
brand new, but I don't remember
seeing it before.

00:41:55.560 --> 00:41:57.010
Maybe it was called
something else.

00:41:57.010 --> 00:41:58.410
SETH LADD: I don't know,
let's go down the code.

00:41:58.410 --> 00:42:01.920
SHAILEN TULI: OK, so again, so
here I've modify foo slightly

00:42:01.920 --> 00:42:04.995
to randomly either return
the number 4, or

00:42:04.995 --> 00:42:08.740
throw a string, OK?

00:42:08.740 --> 00:42:10.570
So, again, getNum
has not changed.

00:42:10.570 --> 00:42:12.300
It's the same.

00:42:12.300 --> 00:42:14.510
It does some--

00:42:14.510 --> 00:42:17.790
try and catch, and then
it returns, OK.

00:42:17.790 --> 00:42:19.540
In meme--

00:42:19.540 --> 00:42:20.560
SETH LADD: Oh, yeah,
this is new.

00:42:20.560 --> 00:42:21.000
Yeah, go ahead.

00:42:21.000 --> 00:42:22.130
SHAILEN TULI: This
is new, right?

00:42:22.130 --> 00:42:24.420
So this is the equivalent--

00:42:24.420 --> 00:42:26.106
you know when you write in
synchronous code, when you

00:42:26.106 --> 00:42:32.960
write finally where you try
something, you catch an error.

00:42:32.960 --> 00:42:36.990
But whether you catch, or
there's no abnormal

00:42:36.990 --> 00:42:38.880
termination, you want
something to happen.

00:42:38.880 --> 00:42:40.510
So you put in that finally.

00:42:40.510 --> 00:42:44.060
Well, this is the async
version of finally.

00:42:44.060 --> 00:42:48.210
So here, we say, all right,
we'll call getNum.

00:42:48.210 --> 00:42:50.240
If everything goes well,
we'll print the value.

00:42:50.240 --> 00:42:52.400
That's here.

00:42:52.400 --> 00:42:55.790
If there's an error, we'll
print the error.

00:42:55.790 --> 00:43:01.300
But regardless, we
will do this.

00:43:01.300 --> 00:43:01.800
SETH LADD: Awesome.

00:43:01.800 --> 00:43:02.210
Run it.

00:43:02.210 --> 00:43:03.250
SHAILEN TULI: So run it.

00:43:03.250 --> 00:43:04.840
JOHN: And you'll note there
that, in the source code,

00:43:04.840 --> 00:43:06.160
these are all chained.

00:43:06.160 --> 00:43:07.490
They're all chained
from each other.

00:43:07.490 --> 00:43:08.300
SHAILEN TULI: They're
chained, yeah.

00:43:08.300 --> 00:43:08.770
Absolutely.

00:43:08.770 --> 00:43:09.840
Thank you.

00:43:09.840 --> 00:43:11.700
So in this case,
in my example--

00:43:11.700 --> 00:43:13.670
I know this is a little
small to read--

00:43:13.670 --> 00:43:16.865
you have the number 4 being
returned, because that's what

00:43:16.865 --> 00:43:18.030
foo gave you.

00:43:18.030 --> 00:43:21.810
And it says, "when complete, run
regardless of success or

00:43:21.810 --> 00:43:27.080
failure." OK, do it again.

00:43:27.080 --> 00:43:28.575
SETH LADD: I was going
file a bug that

00:43:28.575 --> 00:43:29.490
you're missing a comma.

00:43:29.490 --> 00:43:30.120
SHAILEN TULI: Missing
a comma, yeah.

00:43:30.120 --> 00:43:30.750
SETH LADD: But you
fixed the bug.

00:43:30.750 --> 00:43:33.100
SHAILEN TULI: OK, well that's
the same-- oh, there you go.

00:43:33.100 --> 00:43:34.630
So now it threw.

00:43:34.630 --> 00:43:37.200
Not going to give you an int,
but this ran again.

00:43:37.200 --> 00:43:40.410
So this is a very contrived
example, but a more--

00:43:40.410 --> 00:43:41.560
SETH LADD: No, whenComplete
is awesome.

00:43:41.560 --> 00:43:42.320
SHAILEN TULI: whenComplete
is great.

00:43:42.320 --> 00:43:46.590
But for instance, I think there
is code in [? ..io, ?]

00:43:46.590 --> 00:43:49.110
where you sometimes have to
create a temporary file or a

00:43:49.110 --> 00:43:52.280
temporary directory, and then
pass that to a function.

00:43:52.280 --> 00:43:56.240
That function could return
something, or it could throw.

00:43:56.240 --> 00:43:59.185
But in any case, you want to get
rid of that temporary file

00:43:59.185 --> 00:44:02.160
or temporary directory
when you're done.

00:44:02.160 --> 00:44:03.720
So that's what whenComplete
is about.

00:44:03.720 --> 00:44:07.380
Anyways, this is finally in
an asynchronous context.

00:44:07.380 --> 00:44:08.640
SETH LADD: I love it.

00:44:08.640 --> 00:44:10.920
We might get kicked out of this
room, though, so do you

00:44:10.920 --> 00:44:12.630
have a quick way to show
us some streams?

00:44:12.630 --> 00:44:17.600
SHAILEN TULI: OK, so
I have three demos.

00:44:17.600 --> 00:44:20.855
I had a mappedBy thing, but
that's Adam and a bunch of

00:44:20.855 --> 00:44:21.220
other people--

00:44:21.220 --> 00:44:22.120
[INTERPOSING VOICES]

00:44:22.120 --> 00:44:22.665
SETH LADD: Let's try to
at least-- what's

00:44:22.665 --> 00:44:23.590
the concept of streams?

00:44:23.590 --> 00:44:24.290
Show me a simple example.

00:44:24.290 --> 00:44:25.280
SHAILEN TULI: Streams--

00:44:25.280 --> 00:44:26.530
OK.

00:44:29.870 --> 00:44:31.850
AUDIENCE: You could probably
drop down your font.

00:44:31.850 --> 00:44:33.570
I think people in the next
room from me can

00:44:33.570 --> 00:44:35.870
actually see it.

00:44:35.870 --> 00:44:37.360
SETH LADD: The trouble, though,
is when this goes back

00:44:37.360 --> 00:44:38.720
up on YouTube, we lose a lot.

00:44:38.720 --> 00:44:40.610
So we're going to have
to keep it big.

00:44:40.610 --> 00:44:41.540
AUDIENCE: OK.

00:44:41.540 --> 00:44:42.792
SETH LADD: But you can
put a return there.

00:44:42.792 --> 00:44:44.042
That'll work.

00:44:49.440 --> 00:44:51.880
SHAILEN TULI: OK,
so when you--

00:44:51.880 --> 00:44:56.440
this is a very simple example
of a single subscription.

00:44:56.440 --> 00:44:59.236
AUDIENCE: Hey, sorry, guys.

00:44:59.236 --> 00:45:02.965
Can I just drop in?

00:45:02.965 --> 00:45:04.336
SETH LADD: Hello?

00:45:04.336 --> 00:45:08.230
AUDIENCE: Hello, Hello, I just
have a quick interruption.

00:45:08.230 --> 00:45:10.620
SETH LADD: No problem,
please ask away.

00:45:10.620 --> 00:45:15.920
AUDIENCE: It's just that, I was
up in the YouTube stream--

00:45:15.920 --> 00:45:17.170
SETH LADD: I'm sorry?

00:45:20.060 --> 00:45:21.840
JOHN: Say that again.

00:45:21.840 --> 00:45:23.460
AUDIENCE: The sound
is a bit slow.

00:45:23.460 --> 00:45:29.100
But if you go into the YouTube
stream, you can only see you

00:45:29.100 --> 00:45:30.380
three guys talk.

00:45:30.380 --> 00:45:34.140
That's very exciting, but
most people would

00:45:34.140 --> 00:45:36.600
like to see the code.

00:45:36.600 --> 00:45:38.900
SETH LADD: Yeah, no kidding.

00:45:38.900 --> 00:45:40.150
Weird.

00:45:43.020 --> 00:45:44.050
I don't know how
to change that.

00:45:44.050 --> 00:45:44.800
Thank you for the heads up.

00:45:44.800 --> 00:45:46.690
SHAILEN TULI: You know,
I have this on gitHub.

00:45:46.690 --> 00:45:48.670
Should I just put
out the link?

00:45:48.670 --> 00:45:50.000
JOHN: Yeah, we'll
put it in the--

00:45:50.000 --> 00:45:51.270
SETH LADD: We'll put it
in the show notes.

00:45:51.270 --> 00:45:52.230
Sure.

00:45:52.230 --> 00:45:54.560
AUDIENCE: So, Seth, if you're
doing the Hangout On Air from

00:45:54.560 --> 00:45:57.900
your laptop, why don't you
click on the window

00:45:57.900 --> 00:45:59.230
that has the code?

00:45:59.230 --> 00:46:00.120
SETH LADD: I have.

00:46:00.120 --> 00:46:01.910
In fact, that's how I've
been running it.

00:46:01.910 --> 00:46:02.910
AUDIENCE: OK.

00:46:02.910 --> 00:46:04.830
SETH LADD: Yeah, guys, Sorry, I
thought that's what we did.

00:46:04.830 --> 00:46:07.140
SHAILEN TULI: So, is everyone
having this problem, or--?

00:46:07.140 --> 00:46:08.660
SETH LADD: We're talking
about just the YouTube.

00:46:08.660 --> 00:46:10.850
JOHN: Just the YouTube.

00:46:10.850 --> 00:46:11.490
SETH LADD: Can you-- oh.

00:46:11.490 --> 00:46:12.960
Can the YouTube stream
literally not

00:46:12.960 --> 00:46:15.630
see anything else?

00:46:15.630 --> 00:46:17.620
Oh, cameraman.

00:46:17.620 --> 00:46:18.730
Oh, Google effects--

00:46:18.730 --> 00:46:22.480
Sorry, OK, well, we're going
to have to work on that.

00:46:22.480 --> 00:46:25.670
What if I share my screen
of the Hangout?

00:46:25.670 --> 00:46:27.280
We can go deeper.

00:46:27.280 --> 00:46:27.760
Well, you know what.

00:46:27.760 --> 00:46:28.490
OK, sorry.

00:46:28.490 --> 00:46:30.510
My apologies for that.

00:46:30.510 --> 00:46:32.580
We're going to do some tests
afterwards, and we're going to

00:46:32.580 --> 00:46:34.180
figure out how to fix
that for next time.

00:46:34.180 --> 00:46:37.880
We're going to get kicked out of
here really soon, so maybe

00:46:37.880 --> 00:46:40.370
we could just be really verbose
with our description

00:46:40.370 --> 00:46:42.485
of what's happening here for
the last couple minutes.

00:46:42.485 --> 00:46:44.170
SHAILEN TULI: Not only-- oh you
mean verbose, because they

00:46:44.170 --> 00:46:44.770
don't have that.

00:46:44.770 --> 00:46:45.300
SETH LADD: Yeah.

00:46:45.300 --> 00:46:48.010
SHAILEN TULI: OK, so there's
two kinds of streams--

00:46:48.010 --> 00:46:50.200
single subscription, and--

00:46:50.200 --> 00:46:51.870
SETH LADD: Sorry,
let's back up.

00:46:51.870 --> 00:46:54.600
What is a stream?

00:46:54.600 --> 00:46:58.250
AUDIENCE: Actually, I can
see code now on YouTube.

00:46:58.250 --> 00:47:00.800
SETH LADD: OK, cool.

00:47:00.800 --> 00:47:03.320
SHAILEN TULI: I'm sorry, I don't
know your name, who said

00:47:03.320 --> 00:47:03.700
they couldn't.

00:47:03.700 --> 00:47:04.910
SETH LADD: That's Frank.

00:47:04.910 --> 00:47:06.200
SHAILEN TULI: Frank.

00:47:06.200 --> 00:47:09.130
Frank, can you see it?

00:47:09.130 --> 00:47:10.050
SETH LADD: Well.

00:47:10.050 --> 00:47:13.160
If, JJ, you can see it, I'll
make sure this is--

00:47:13.160 --> 00:47:17.340
AUDIENCE: Sorry, I haven't
just looked at it.

00:47:17.340 --> 00:47:18.710
SETH LADD: OK, no worries.

00:47:18.710 --> 00:47:19.150
Streams.

00:47:19.150 --> 00:47:21.340
What are streams?

00:47:21.340 --> 00:47:22.830
SHAILEN TULI: What
are streams?

00:47:22.830 --> 00:47:25.830
This is like the equivalent
to what are futures.

00:47:25.830 --> 00:47:27.440
JOHN: So I think we kind
of touched on this

00:47:27.440 --> 00:47:28.180
a little bit earlier.

00:47:28.180 --> 00:47:30.400
A future is a single event.

00:47:30.400 --> 00:47:35.500
A stream is a sequence of events
that are asynchronous

00:47:35.500 --> 00:47:37.710
that will arrive at some
point in the future.

00:47:37.710 --> 00:47:42.540
In the same way that you have
the future as a then clause,

00:47:42.540 --> 00:47:45.450
the stream you then
subscribe to it.

00:47:45.450 --> 00:47:45.830
SHAILEN TULI: You
have a listener.

00:47:45.830 --> 00:47:47.230
SETH LADD: You have an onData.

00:47:47.230 --> 00:47:50.580
Which is really like
"onThing-you-care-about." So,

00:47:50.580 --> 00:47:52.240
many examples of streams.

00:47:52.240 --> 00:47:53.680
You used button clicks, right?

00:47:53.680 --> 00:47:56.260
You can have a series
of button clicks.

00:47:56.260 --> 00:47:59.080
Bytes-- so JJ used to I/O.
Great example, right?

00:47:59.080 --> 00:48:01.910
Bytes in a file, like give me
when I've read a certain

00:48:01.910 --> 00:48:03.620
number of bites over and
over and over until

00:48:03.620 --> 00:48:05.370
the stream is closed.

00:48:05.370 --> 00:48:07.630
Bytes over a socket.

00:48:07.630 --> 00:48:10.440
Web socket events is another
good use for streams.

00:48:10.440 --> 00:48:13.470
JOHN: Yeah, that would
be another stream.

00:48:13.470 --> 00:48:14.600
SETH LADD: I'm sure there's
plenty others.

00:48:14.600 --> 00:48:16.540
But that's a stream.

00:48:16.540 --> 00:48:18.830
And OK, cool.

00:48:18.830 --> 00:48:24.240
SHAILEN TULI: So here's a very
simple, streams 101 example of

00:48:24.240 --> 00:48:25.980
a single subscription.

00:48:25.980 --> 00:48:29.250
So the language is a little--

00:48:29.250 --> 00:48:33.170
so there's emitters
and listeners.

00:48:33.170 --> 00:48:37.550
We emit events.

00:48:37.550 --> 00:48:39.080
Then there's also streams
and subscribers.

00:48:39.080 --> 00:48:43.120
So the language is a little
mixed up in our API, but it's

00:48:43.120 --> 00:48:44.250
the same stuff we're
talking about.

00:48:44.250 --> 00:48:46.780
Something is streaming, and
something is listening or

00:48:46.780 --> 00:48:48.560
subscribing, OK?

00:48:48.560 --> 00:48:49.610
So here's a stream.

00:48:49.610 --> 00:48:52.840
We create a stream from an
interval, a small list--

00:48:52.840 --> 00:48:54.750
1, 2, 3.

00:48:54.750 --> 00:48:59.910
And we stream out the square
of 1, 2 and 3.

00:48:59.910 --> 00:49:02.710
So the first thing that comes
out of there is 1, because 1

00:49:02.710 --> 00:49:03.670
squared is 1.

00:49:03.670 --> 00:49:03.830
Then.

00:49:03.830 --> 00:49:04.640
4.

00:49:04.640 --> 00:49:05.760
And then 9.

00:49:05.760 --> 00:49:07.500
This is a contrived example.

00:49:07.500 --> 00:49:11.070
And this is a single
subscription, which means

00:49:11.070 --> 00:49:13.880
there's only one subscriber
to this stream.

00:49:13.880 --> 00:49:17.010
SETH LADD: Or this stream
expects only one subscriber.

00:49:17.010 --> 00:49:17.330
SHAILEN TULI: Yeah.

00:49:17.330 --> 00:49:20.680
So, nothing happens unless
there is a listener--

00:49:20.680 --> 00:49:22.070
I'm sorry, I'm confusing--

00:49:22.070 --> 00:49:24.974
unless there is a subscriber.

00:49:24.974 --> 00:49:25.390
SETH LADD: Right.

00:49:25.390 --> 00:49:27.530
SHAILEN TULI: Right.

00:49:27.530 --> 00:49:31.970
Then, so we put all that
in a mapStream object,

00:49:31.970 --> 00:49:33.280
mapStream.listen.

00:49:33.280 --> 00:49:39.460
And now, we have a listener
subscriber, and it waits.

00:49:39.460 --> 00:49:42.820
So i is going to be 1.

00:49:42.820 --> 00:49:44.040
It'll print that.

00:49:44.040 --> 00:49:45.615
Then the next thing from
the stream is 4.

00:49:45.615 --> 00:49:46.220
It'll print that.

00:49:46.220 --> 00:49:48.410
And the next thing from
the stream is 9.

00:49:48.410 --> 00:49:51.820
It'll print that,
and it's done.

00:49:51.820 --> 00:49:53.500
The stream is exhausted.

00:49:53.500 --> 00:50:00.340
If you do this, we have a
second listener, it will

00:50:00.340 --> 00:50:01.740
complain mightily.

00:50:01.740 --> 00:50:04.150
SETH LADD: Well, but before you
do that, comment that out

00:50:04.150 --> 00:50:07.550
and run it so everyone
can see.

00:50:07.550 --> 00:50:14.970
SHAILEN TULI: OK, so the true is
for when I was asking if it

00:50:14.970 --> 00:50:17.820
wanted a single subscription.

00:50:17.820 --> 00:50:19.220
Is it a single subscription?

00:50:19.220 --> 00:50:20.240
Yes, it is.

00:50:20.240 --> 00:50:24.220
And then print out each event,
each thing that you got from

00:50:24.220 --> 00:50:24.770
the stream--

00:50:24.770 --> 00:50:25.890
1, 4, and 9.

00:50:25.890 --> 00:50:27.210
That's what you get.

00:50:27.210 --> 00:50:36.030
If you try to do this again,
it won't work.

00:50:36.030 --> 00:50:40.100
Bad state, stream already
has a subscriber.

00:50:40.100 --> 00:50:41.930
You can't trick it.

00:50:41.930 --> 00:50:43.150
But you don't need
to trick it.

00:50:43.150 --> 00:50:46.180
There is a nice way
to do this.

00:50:46.180 --> 00:50:48.830
So you can have the
stream [INAUDIBLE]

00:50:48.830 --> 00:50:51.550
by as many subscribers
as you want.

00:50:51.550 --> 00:50:53.470
So let's look at this example.

00:50:53.470 --> 00:50:57.690
It's a simple example, again,
but the listening thing is

00:50:57.690 --> 00:50:58.890
more complicated this time.

00:50:58.890 --> 00:51:04.560
OK, so, again, we just call--

00:51:04.560 --> 00:51:06.520
oh my god, how did I do this?

00:51:06.520 --> 00:51:08.410
OK.

00:51:08.410 --> 00:51:09.560
SETH LADD: No, because you've
defined stream--

00:51:09.560 --> 00:51:10.380
SHAILEN TULI: Oh, I've
defined it up there.

00:51:10.380 --> 00:51:10.720
That's why.

00:51:10.720 --> 00:51:11.020
OK.

00:51:11.020 --> 00:51:11.360
I'm sorry.

00:51:11.360 --> 00:51:13.985
This is what happens when
you have 48-sized font.

00:51:13.985 --> 00:51:15.820
All right, so we have a stream
object that I've

00:51:15.820 --> 00:51:19.720
defined way up here.

00:51:19.720 --> 00:51:23.260
So all my functions
can have it.

00:51:23.260 --> 00:51:28.320
And now I say, give me a new
stream from this interval--

00:51:28.320 --> 00:51:30.720
1, 2, 3-- just like
we did last time.

00:51:30.720 --> 00:51:33.050
And here's the important
line--

00:51:33.050 --> 00:51:34.300
asMultiSubscriberStream.

00:51:36.960 --> 00:51:39.120
And then you just say, OK, I'm
going to just return the

00:51:39.120 --> 00:51:44.070
square of those three
numbers each time.

00:51:44.070 --> 00:51:47.630
So, I have defined foo,
bar, and bot.

00:51:47.630 --> 00:51:48.810
Hold on about foo right now.

00:51:48.810 --> 00:51:50.630
Bar and bot--

00:51:50.630 --> 00:51:52.520
bat--

00:51:52.520 --> 00:51:56.270
simply listen for everything
coming through the stream, and

00:51:56.270 --> 00:51:59.180
then print out a simple message,
saying, in this

00:51:59.180 --> 00:52:00.240
function, this is--

00:52:00.240 --> 00:52:01.285
SETH LADD: So each one
of those functions

00:52:01.285 --> 00:52:03.370
sets up its own list--

00:52:03.370 --> 00:52:04.495
subscriber slash listener.

00:52:04.495 --> 00:52:05.480
SHAILEN TULI: Yeah.

00:52:05.480 --> 00:52:08.420
So there are two listeners for
now-- one inside bar, and one

00:52:08.420 --> 00:52:09.490
inside bat.

00:52:09.490 --> 00:52:13.180
And we are, in fact, calling
those two right here.

00:52:13.180 --> 00:52:17.810
OK, so if we run this,
it'll say-- and I'm

00:52:17.810 --> 00:52:18.390
sorry if this is small--

00:52:18.390 --> 00:52:22.150
"in bar, i equals 1," "in
bat, i equals 1." "bar

00:52:22.150 --> 00:52:24.100
equals 4." 4, 9, 9.

00:52:24.100 --> 00:52:26.130
SETH LADD: So we see subscribers
dealing with a

00:52:26.130 --> 00:52:28.150
series of just fine.

00:52:28.150 --> 00:52:31.220
SHAILEN TULI: So this is
actually a simple case where

00:52:31.220 --> 00:52:32.210
this happens.

00:52:32.210 --> 00:52:34.010
If you look at the API,
there's ways to

00:52:34.010 --> 00:52:35.880
do it that it goes--

00:52:35.880 --> 00:52:39.820
so right now goes 1,
1, 4, 4, 9, 9.

00:52:39.820 --> 00:52:43.740
If you want, you can go
1, 4, 9, 1, 4, 9.

00:52:43.740 --> 00:52:48.340
But in the interest of time,
you can explore that.

00:52:48.340 --> 00:52:49.510
Exercise for the reader.

00:52:49.510 --> 00:52:51.130
Isn't that what you say when
you don't want to go into

00:52:51.130 --> 00:52:53.130
something, that it's an exercise
for the reader.

00:52:53.130 --> 00:52:56.930
But, there is something else
that's kind of cool about all

00:52:56.930 --> 00:53:00.680
this stuff, which is I've
defined a function foo which

00:53:00.680 --> 00:53:03.660
actually kind of just sort of
mixes things up a little bit.

00:53:03.660 --> 00:53:05.260
So let's look at foo.

00:53:05.260 --> 00:53:09.820
Like bar and bot, foo said,
I'm going to listen to the

00:53:09.820 --> 00:53:13.100
stream, and it does the
usual printing.

00:53:13.100 --> 00:53:15.660
In foo, i equals i.

00:53:15.660 --> 00:53:17.590
But then it has a little bit--
and John helped me with this

00:53:17.590 --> 00:53:18.460
yesterday--

00:53:18.460 --> 00:53:23.150
if i is 1, it says,
call bar, also.

00:53:23.150 --> 00:53:26.550
If i is 4, call bat.

00:53:26.550 --> 00:53:29.230
SETH LADD: In other words, set
up another stream listener

00:53:29.230 --> 00:53:30.770
either at the beginning
or the end.

00:53:30.770 --> 00:53:32.440
SHAILEN TULI: Yeah.

00:53:32.440 --> 00:53:36.230
So arbitrarily, we have picked
these points to--

00:53:36.230 --> 00:53:37.510
SETH LADD: But what's really
happening here is you're

00:53:37.510 --> 00:53:41.440
setting up a new stream
subscriber in the middle of

00:53:41.440 --> 00:53:43.363
the stream's ability
to send events.

00:53:43.363 --> 00:53:44.110
SHAILEN TULI: Yeah.

00:53:44.110 --> 00:53:44.320
SETH LADD: OK.

00:53:44.320 --> 00:53:44.700
Awesome.

00:53:44.700 --> 00:53:47.820
SHAILEN TULI: So
let's run this.

00:53:47.820 --> 00:53:52.050
So, we'll go through
this line by line--

00:53:52.050 --> 00:53:54.990
foo is saying we know the stream
is going to be sending

00:53:54.990 --> 00:53:56.980
1, 4, and 9, right?

00:53:56.980 --> 00:54:00.540
So foo says, so that you
predictably will see in

00:54:00.540 --> 00:54:02.130
foo i equals 1.

00:54:02.130 --> 00:54:03.090
Great.

00:54:03.090 --> 00:54:06.380
If i is 1, you call bar.

00:54:06.380 --> 00:54:07.370
But you don't see that now.

00:54:07.370 --> 00:54:08.640
You'll see that the
next around.

00:54:08.640 --> 00:54:09.390
SETH LADD: Because you
already missed the

00:54:09.390 --> 00:54:10.630
emitting of the event.

00:54:10.630 --> 00:54:11.150
SHAILEN TULI: Right.

00:54:11.150 --> 00:54:13.390
One came and went, and bar
missed the boat on that one.

00:54:13.390 --> 00:54:14.340
SETH LADD: Sure.

00:54:14.340 --> 00:54:17.450
SHAILEN TULI: So next time, when
4 comes out, it says, i

00:54:17.450 --> 00:54:19.450
equals 4 in foo.

00:54:19.450 --> 00:54:22.300
Sorry, in reverse--
in foo i equals 4.

00:54:22.300 --> 00:54:23.740
In bar, i equals 4.

00:54:23.740 --> 00:54:26.430
So bar has joined in, gotten
in to the action a little

00:54:26.430 --> 00:54:27.850
late, but he's they're now.

00:54:27.850 --> 00:54:29.350
SETH LADD: Sure.

00:54:29.350 --> 00:54:32.600
SHAILEN TULI: And so in our
code, we say, if i is equal to

00:54:32.600 --> 00:54:36.280
4, get that into the
action, too.

00:54:36.280 --> 00:54:39.220
So now, the third time when
9 comes around, well, foo

00:54:39.220 --> 00:54:41.090
consumes it first.

00:54:41.090 --> 00:54:42.670
bar consumes it next.

00:54:42.670 --> 00:54:43.680
And then bat consumes it.

00:54:43.680 --> 00:54:44.930
That's the only thing
that bat consumes.

00:54:47.790 --> 00:54:49.625
There's a lot you can
do beyond. this.

00:54:49.625 --> 00:54:51.850
This is just a simple
get-you-started example.

00:54:51.850 --> 00:54:53.212
SETH LADD: What this illustrates
to me, though, is

00:54:53.212 --> 00:54:55.150
that streams are really--
it's a stream.

00:54:55.150 --> 00:54:57.490
And so, if you introduce the
listener in the middle of a

00:54:57.490 --> 00:54:59.075
stream, of course he's
not to get any of

00:54:59.075 --> 00:55:00.580
the previous events.

00:55:00.580 --> 00:55:01.790
But he comes in right
there for every

00:55:01.790 --> 00:55:04.770
other subsequent events.

00:55:04.770 --> 00:55:06.750
JOHN: I mean, we can extend
the list even longer.

00:55:06.750 --> 00:55:09.580
We could add 16, then keep
going, and then all three of

00:55:09.580 --> 00:55:12.440
them would start getting
everything past 4.

00:55:12.440 --> 00:55:14.470
SETH LADD: Bingo.

00:55:14.470 --> 00:55:15.690
SHAILEN TULI: So, before--

00:55:15.690 --> 00:55:18.470
I'm sort of rushing because I'm
fearing a knock on this

00:55:18.470 --> 00:55:20.910
door that throws us out.

00:55:20.910 --> 00:55:27.610
So I've built a small,
little app.

00:55:27.610 --> 00:55:29.550
So when you create a new--

00:55:29.550 --> 00:55:30.800
let me just get rid
of all of these.

00:55:33.870 --> 00:55:36.430
When you create a new web
application using the Dart

00:55:36.430 --> 00:55:39.250
Editor, it gives you that
familiar click me-- oh, why

00:55:39.250 --> 00:55:40.500
don't I just do it?

00:55:44.060 --> 00:55:44.710
I am sorry.

00:55:44.710 --> 00:55:45.960
I'm sorry, folks.

00:55:54.850 --> 00:55:56.390
It's my computer that's
complaining

00:55:56.390 --> 00:55:58.220
mightily about something.

00:55:58.220 --> 00:56:00.990
JOHN: I think it's the
screen trying to.

00:56:00.990 --> 00:56:02.690
SETH LADD: Hey guys, make sure
if you have any questions, you

00:56:02.690 --> 00:56:04.330
can type them in the
chat window here.

00:56:04.330 --> 00:56:06.520
Or, of course, just by
[? waving ?] your hand.

00:56:06.520 --> 00:56:09.680
Was that a hand wave
for a question?

00:56:09.680 --> 00:56:10.710
Maybe not.

00:56:10.710 --> 00:56:11.180
So anyway.

00:56:11.180 --> 00:56:12.100
Make sure.

00:56:12.100 --> 00:56:16.212
We are here to answer your
questions, so let us know.

00:56:16.212 --> 00:56:17.530
SHAILEN TULI: All right,
I screwed up.

00:56:17.530 --> 00:56:19.430
Never mind.

00:56:19.430 --> 00:56:20.880
SETH LADD: For the sake of time,
let's just look at the

00:56:20.880 --> 00:56:21.570
async demo here.

00:56:21.570 --> 00:56:22.525
The one you got prepared.

00:56:22.525 --> 00:56:24.170
SHAILEN TULI: So
you will get--

00:56:24.170 --> 00:56:26.390
OK, I'll explain.

00:56:26.390 --> 00:56:27.530
SETH LADD: Don't worry
about the old way.

00:56:27.530 --> 00:56:29.470
Tell us the new way.

00:56:29.470 --> 00:56:31.970
SHAILEN TULI: So, let's
just run it, and

00:56:31.970 --> 00:56:33.550
you'll see it's familiar.

00:56:33.550 --> 00:56:34.360
Well, sort of.

00:56:34.360 --> 00:56:36.150
It said click me, right?

00:56:36.150 --> 00:56:38.340
And you click it, and
it goes backwards.

00:56:38.340 --> 00:56:39.820
So now I do a few other
things to it.

00:56:39.820 --> 00:56:42.570
Let's get rid of this.

00:56:42.570 --> 00:56:43.500
So this syntax you will have--

00:56:43.500 --> 00:56:45.430
SETH LADD: Why don't
you minimize this.

00:56:45.430 --> 00:56:46.680
SHAILEN TULI: Yes.

00:56:50.800 --> 00:56:54.280
So the syntax you
would have is--

00:56:54.280 --> 00:56:56.310
SETH LADD: So I'm going to
move it up one level.

00:56:56.310 --> 00:56:58.240
So what we're showing here,
we're showing the use of

00:56:58.240 --> 00:57:02.560
streams and the new Dart
HTML library together.

00:57:02.560 --> 00:57:05.310
So we're showing you some simple
bit of browser code

00:57:05.310 --> 00:57:07.260
that is using the
new streamified

00:57:07.260 --> 00:57:10.150
versions of Dart HTML.

00:57:10.150 --> 00:57:13.510
SHAILEN TULI: So the original
code, if you were to create a

00:57:13.510 --> 00:57:16.670
new app, would create
this element.

00:57:16.670 --> 00:57:19.370
SETH LADD: Show us what's
going on here.

00:57:19.370 --> 00:57:22.450
SHAILEN TULI: And it would
say, .on .click .add.

00:57:22.450 --> 00:57:25.830
Now we already taught, that's
yesterday's news.

00:57:25.830 --> 00:57:28.260
What we do this now is
el.onClick.listen.

00:57:30.850 --> 00:57:33.585
So onClick is going to
give you a stream.

00:57:36.190 --> 00:57:39.360
And when you listen
to it, you get a--

00:57:39.360 --> 00:57:41.070
John, is it stream subscriber?

00:57:41.070 --> 00:57:42.020
JOHN: Stream subscriber.

00:57:42.020 --> 00:57:44.380
SHAILEN TULI: A stream
subscriber of some stream

00:57:44.380 --> 00:57:46.040
subscription object.

00:57:46.040 --> 00:57:46.980
SETH LADD: Oh, that's return.

00:57:46.980 --> 00:57:47.990
Yeah, sorry.

00:57:47.990 --> 00:57:50.830
SHAILEN TULI: So onClick returns
a stream, and listen

00:57:50.830 --> 00:57:53.770
returns a listener, which, if
you want to look at the API,

00:57:53.770 --> 00:57:57.540
is a stream subscription
object.

00:57:57.540 --> 00:57:59.300
And in that, I call
the original

00:57:59.300 --> 00:58:00.960
reverse text function.

00:58:00.960 --> 00:58:05.570
And then, it's a contrived demo
of showing how you can

00:58:05.570 --> 00:58:08.570
pause the stream, and
resume the stream.

00:58:08.570 --> 00:58:11.860
SETH LADD: So that looks a lot
like Ruby or Python code?

00:58:11.860 --> 00:58:12.610
SHAILEN TULI: No.

00:58:12.610 --> 00:58:13.120
SETH LADD: Yes

00:58:13.120 --> 00:58:13.920
SHAILEN TULI: Why?

00:58:13.920 --> 00:58:14.950
SETH LADD: It's not
camel-cased.

00:58:14.950 --> 00:58:16.770
SHAILEN TULI: Oh.

00:58:16.770 --> 00:58:17.630
OK.

00:58:17.630 --> 00:58:19.680
SETH LADD: I'll file a bug.

00:58:19.680 --> 00:58:21.560
SHAILEN TULI: I can't put commas
in the right places, I

00:58:21.560 --> 00:58:22.370
can't camel-case.

00:58:22.370 --> 00:58:23.520
What am I good for?

00:58:23.520 --> 00:58:25.350
JOHN: GitHub has an
issue tracker, and

00:58:25.350 --> 00:58:26.350
so we'll make sure--

00:58:26.350 --> 00:58:27.090
SETH LADD: Yeah, don't worry.

00:58:27.090 --> 00:58:29.390
I'll send you a pool request.

00:58:29.390 --> 00:58:30.130
SHAILEN TULI: Well, so,
what is pause--

00:58:30.130 --> 00:58:31.420
SETH LADD: You should
probably actually--

00:58:31.420 --> 00:58:33.700
no joke, it'd be really cool
to show off the renaming

00:58:33.700 --> 00:58:34.015
capability.

00:58:34.015 --> 00:58:34.330
SHAILEN TULI: OK.

00:58:34.330 --> 00:58:35.580
SETH LADD: You want to
do that really quick?

00:58:38.240 --> 00:58:39.250
AUDIENCE: Actually, Frank
has a question.

00:58:39.250 --> 00:58:41.490
He's wondering what the return
objects for all of those

00:58:41.490 --> 00:58:42.650
different things are.

00:58:42.650 --> 00:58:45.340
So maybe you could talk about
the return object of onClick

00:58:45.340 --> 00:58:48.580
and return to object
of onClick.listen.

00:58:48.580 --> 00:58:49.500
SETH LADD: OK, great question.

00:58:49.500 --> 00:58:54.385
SHAILEN TULI: OK, so why don't
I, instead of spending time on

00:58:54.385 --> 00:58:55.635
pedantic stuff--

00:58:59.310 --> 00:59:03.540
AUDIENCE: Yes, I see the irony
in me telling you not to spend

00:59:03.540 --> 00:59:05.260
time on pedantic stuff.

00:59:05.260 --> 00:59:06.480
SETH LADD: If you let this
go, what's next?

00:59:06.480 --> 00:59:11.320
SHAILEN TULI: OK, so
the stream object--

00:59:11.320 --> 00:59:12.790
so var stream--

00:59:12.790 --> 00:59:14.962
SETH LADD: Is onClick
a getter?

00:59:14.962 --> 00:59:15.934
Yeah, okay.

00:59:15.934 --> 00:59:17.410
JOHN: [INAUDIBLE] fields.

00:59:17.410 --> 00:59:17.960
Returns a stream.

00:59:17.960 --> 00:59:20.510
AUDIENCE: So maybe you could
just right click onClick and

00:59:20.510 --> 00:59:23.010
right click on listen in
order to see the types.

00:59:25.970 --> 00:59:27.710
SETH LADD: Maybe just hover,
I think maybe-- yeah.

00:59:27.710 --> 00:59:31.060
Is that what you mean?

00:59:31.060 --> 00:59:32.330
Put the cursor there.

00:59:32.330 --> 00:59:33.580
[INTERPOSING VOICES]

00:59:37.318 --> 00:59:39.060
JOHN: It's a stream.

00:59:39.060 --> 00:59:41.440
SHAILEN TULI: It's a stream,
guys, I promise you.

00:59:41.440 --> 00:59:42.690
Stream.

00:59:44.280 --> 00:59:46.260
OK?

00:59:46.260 --> 00:59:47.387
SETH LADD: No need to yell.

00:59:47.387 --> 00:59:48.550
SHAILEN TULI: I'm sorry
I'm yelling.

00:59:48.550 --> 00:59:50.715
JOHN: Take one exclamation
point off of there.

00:59:50.715 --> 00:59:51.040
SETH LADD: Yeah.

00:59:51.040 --> 00:59:51.810
I'll file a bug.

00:59:51.810 --> 00:59:56.190
SHAILEN TULI: OK, guys, in
subscript, which should've

00:59:56.190 --> 00:59:57.890
been named something
slightly more

00:59:57.890 --> 01:00:01.730
pronounceable, is stream--

01:00:01.730 --> 01:00:02.460
SETH LADD: Subscription.

01:00:02.460 --> 01:00:03.680
SHAILEN TULI: Stream
subscription.

01:00:03.680 --> 01:00:04.740
SETH LADD: You got
that right there.

01:00:04.740 --> 01:00:05.350
SHAILEN TULI: I have that.

01:00:05.350 --> 01:00:07.118
There we go.

01:00:07.118 --> 01:00:09.130
AUDIENCE: I have a
quick question.

01:00:09.130 --> 01:00:14.520
Is there anything that this new
approach to HTML handlers

01:00:14.520 --> 01:00:16.530
can do that the old approach
couldn't do?

01:00:16.530 --> 01:00:17.730
JOHN: Yeah.

01:00:17.730 --> 01:00:19.400
I'll demonstrate that.

01:00:19.400 --> 01:00:22.190
SHAILEN TULI: I mean, the
old approach-- in plain

01:00:22.190 --> 01:00:25.210
JavaScript, if you want to
add or remove [INAUDIBLE]

01:00:25.210 --> 01:00:27.230
handlers, it's a complete
pain, but

01:00:27.230 --> 01:00:29.040
you can do it, right?

01:00:29.040 --> 01:00:31.180
So there's all sorts of
stuff that you can do

01:00:31.180 --> 01:00:33.710
now, but much easier--

01:00:33.710 --> 01:00:34.200
what happened?

01:00:34.200 --> 01:00:34.750
SETH LADD: Nothing.

01:00:34.750 --> 01:00:37.230
Ignore me.

01:00:37.230 --> 01:00:39.110
SHAILEN TULI: All right, let
me-- can I just sort of talk

01:00:39.110 --> 01:00:41.650
through this code, and I think
hopefully that will answer

01:00:41.650 --> 01:00:43.720
your question.

01:00:43.720 --> 01:00:46.890
OK, so, here we go.

01:00:46.890 --> 01:00:49.970
We get this element, which
we found up here, right?

01:00:49.970 --> 01:00:52.650
We found an element with
a particular ID.

01:00:52.650 --> 01:00:56.910
And we said onClick [INAUDIBLE]
a stream, listen

01:00:56.910 --> 01:01:00.460
to that stream, and call reverse
text, so "click me"

01:01:00.460 --> 01:01:02.680
becomes the reverse.

01:01:02.680 --> 01:01:06.540
And then you call, pause,
and resume a horribly

01:01:06.540 --> 01:01:08.480
not-camel-cased OK?

01:01:08.480 --> 01:01:10.010
So pause and resume--

01:01:10.010 --> 01:01:11.520
JOHN: Horrible.

01:01:11.520 --> 01:01:17.000
SHAILEN TULI: Takes a
subscription object, right?

01:01:17.000 --> 01:01:18.150
And it pauses--

01:01:18.150 --> 01:01:19.460
it calls a little helper.

01:01:19.460 --> 01:01:21.330
Maybe I should not have
made my code so dry.

01:01:21.330 --> 01:01:25.340
Basically, what it's saying
is, subscr.pause.

01:01:25.340 --> 01:01:27.740
OK?

01:01:27.740 --> 01:01:31.710
Here, it causes it, calls
pause, and it basically

01:01:31.710 --> 01:01:33.400
toggles the class.

01:01:33.400 --> 01:01:35.160
SETH LADD: OK, but let's
go up a level.

01:01:35.160 --> 01:01:37.060
So streams can--

01:01:37.060 --> 01:01:40.320
sorry, subscriptions can
be paused or resumed.

01:01:40.320 --> 01:01:41.180
JOHN: Correct

01:01:41.180 --> 01:01:41.580
SHAILEN TULI: That's right.

01:01:41.580 --> 01:01:42.250
So when you--

01:01:42.250 --> 01:01:44.280
SETH LADD: So what does that
mean from a subscription--

01:01:44.280 --> 01:01:45.740
without walking me through
the code first.

01:01:45.740 --> 01:01:46.640
Talk about the concepts.

01:01:46.640 --> 01:01:49.620
So, the reason why you
care about the stream

01:01:49.620 --> 01:01:51.790
subscription handle--

01:01:51.790 --> 01:01:53.630
subscr--

01:01:53.630 --> 01:01:59.110
is because you want to control
when you're getting events on

01:01:59.110 --> 01:02:00.240
that stream subscription,
right?

01:02:00.240 --> 01:02:02.130
And you do that by pausing it?

01:02:02.130 --> 01:02:04.080
Or resuming it?

01:02:04.080 --> 01:02:04.720
SHAILEN TULI: OK.

01:02:04.720 --> 01:02:06.250
Or canceling it.

01:02:06.250 --> 01:02:07.115
SETH LADD: Or cancelling it.

01:02:07.115 --> 01:02:08.080
SHAILEN TULI: Right, John?

01:02:08.080 --> 01:02:10.030
JOHN: Yeah, if you're done
with a subscription--

01:02:10.030 --> 01:02:12.025
SHAILEN TULI: If you don't want
to listen anymore, you

01:02:12.025 --> 01:02:12.860
cancel and you're out of this.

01:02:12.860 --> 01:02:14.510
JOHN: The old way
would be, like,

01:02:14.510 --> 01:02:18.250
on.click.remove event handler.

01:02:18.250 --> 01:02:19.930
And now that you have
the subscription,

01:02:19.930 --> 01:02:21.230
you just call cancel.

01:02:21.230 --> 01:02:23.950
SETH LADD: And canceling
is just canceling your

01:02:23.950 --> 01:02:25.940
subscription to this
sequence of events.

01:02:25.940 --> 01:02:28.860
You are not canceling
the stream itself.

01:02:28.860 --> 01:02:32.300
JOHN: Yes, the stream can be
done, but that's an entirely

01:02:32.300 --> 01:02:33.430
different [INAUDIBLE].

01:02:33.430 --> 01:02:34.210
SETH LADD: Exactly, right.

01:02:34.210 --> 01:02:34.490
Yeah.

01:02:34.490 --> 01:02:35.790
SHAILEN TULI: You would need a
stream controller for that.

01:02:35.790 --> 01:02:36.410
That's another topic.

01:02:36.410 --> 01:02:36.870
SETH LADD: Yeah.

01:02:36.870 --> 01:02:38.130
Yeah, so this pausing--

01:02:38.130 --> 01:02:39.660
just so we're utterly clear--

01:02:39.660 --> 01:02:42.970
this pausing, resuming, and
canceling is only about your

01:02:42.970 --> 01:02:45.270
receiving of the events.

01:02:45.270 --> 01:02:47.320
It could be other subscriptions
to the stream,

01:02:47.320 --> 01:02:49.515
and you call pause, whatever,
they're not paused.

01:02:49.515 --> 01:02:52.010
JOHN: While a subscription is
paused, any events that are

01:02:52.010 --> 01:02:54.660
emitted by the stream
are buffered.

01:02:54.660 --> 01:02:57.275
So you don't lose any events
when you're paused.

01:02:57.275 --> 01:02:59.200
The other people will get the
events if they have a

01:02:59.200 --> 01:03:00.700
subscription that's
not paused.

01:03:00.700 --> 01:03:03.910
So you're not blocking the
other subscribers.

01:03:03.910 --> 01:03:06.180
It's a choice for the
subscription.

01:03:06.180 --> 01:03:07.440
SETH LADD: It's like
a TiVo pause.

01:03:07.440 --> 01:03:10.850
When you press play again, you
resume where you picked up,

01:03:10.850 --> 01:03:12.860
not where the time
actually is.

01:03:12.860 --> 01:03:13.660
I like it.

01:03:13.660 --> 01:03:13.920
SHAILEN TULI: All right.

01:03:13.920 --> 01:03:16.690
So all I'm doing in
this example.

01:03:16.690 --> 01:03:18.360
If we run it--

01:03:18.360 --> 01:03:20.100
I've been monkeying with it,
so I hope it still runs.

01:03:20.100 --> 01:03:24.160
OK, here, and I'm actually going
to give you a little bit

01:03:24.160 --> 01:03:25.230
of console help.

01:03:25.230 --> 01:03:27.090
I don't know if I can
make that big.

01:03:27.090 --> 01:03:32.160
Anyway, the point is, in the
default Dart example that you

01:03:32.160 --> 01:03:34.540
get, you click this and
it becomes backward.

01:03:34.540 --> 01:03:35.940
You click that and get
"click me" again.

01:03:35.940 --> 01:03:38.970
You can keep going
back and forth.

01:03:38.970 --> 01:03:41.560
[? Pleasant ?], I decided to
make it a little annoying,

01:03:41.560 --> 01:03:42.930
which is you can click,
but then for

01:03:42.930 --> 01:03:45.290
two seconds, it pauses.

01:03:45.290 --> 01:03:47.150
And after two seconds,
it resumes.

01:03:47.150 --> 01:03:48.810
So let me demonstrate that,
and then we can look

01:03:48.810 --> 01:03:49.890
at the code, OK?

01:03:49.890 --> 01:03:52.500
So I click, and I can
click all I like,

01:03:52.500 --> 01:03:53.330
nothing's going to happen.

01:03:53.330 --> 01:03:56.190
Now, it's clickable again.

01:03:56.190 --> 01:03:58.250
Now, it's clickable again.

01:03:58.250 --> 01:04:00.310
I don't know, can you
make this big?

01:04:00.310 --> 01:04:01.750
JOHN: Oh, let's not
worry about that--

01:04:01.750 --> 01:04:02.580
SHAILEN TULI: Well, I
just wanted to know

01:04:02.580 --> 01:04:03.740
[? where pause count ?].

01:04:03.740 --> 01:04:04.930
JOHN: But that's an internal.

01:04:04.930 --> 01:04:05.670
SETH LADD: Yeah.

01:04:05.670 --> 01:04:07.215
JOHN: That's like an
implementation detail.

01:04:07.215 --> 01:04:10.050
SETH LADD: Well, what we're
seeing here is you are pausing

01:04:10.050 --> 01:04:10.950
your subscription.

01:04:10.950 --> 01:04:14.970
So even though there are clicks
happening, you're

01:04:14.970 --> 01:04:17.270
subscriptions, your listeners
aren't receiving those things

01:04:17.270 --> 01:04:18.360
because it's been paused.

01:04:18.360 --> 01:04:19.000
Which is cool.

01:04:19.000 --> 01:04:22.220
SHAILEN TULI: The subscriber
here is paused.

01:04:22.220 --> 01:04:23.350
I logged that.

01:04:23.350 --> 01:04:25.520
And then I put a little
time out--

01:04:25.520 --> 01:04:26.780
SETH LADD: That should
be timer.

01:04:29.400 --> 01:04:30.560
SHAILEN TULI: Will that work?

01:04:30.560 --> 01:04:31.600
JOHN: You can put
timer up there.

01:04:31.600 --> 01:04:33.280
SHAILEN TULI: You can
put timer, yeah.

01:04:33.280 --> 01:04:34.930
And then, I resume it.

01:04:34.930 --> 01:04:37.950
And pause and resume are just
very thin wrappers for--

01:04:42.450 --> 01:04:43.670
JOHN: [INAUDIBLE] if I
was incorrect about

01:04:43.670 --> 01:04:45.710
the way pause works.

01:04:45.710 --> 01:04:46.750
SETH LADD: It may
not queue it up.

01:04:46.750 --> 01:04:49.090
SHAILEN TULI: It may
not queue it up.

01:04:49.090 --> 01:04:53.100
So the important thing to take
away from this is it keeps a

01:04:53.100 --> 01:04:54.290
reference count of
this, right?

01:04:54.290 --> 01:04:57.570
If you pause twice, and you want
to resume, you need to

01:04:57.570 --> 01:04:59.230
resume twice, too.

01:04:59.230 --> 01:04:59.970
SETH LADD: Oh, that's
the point.

01:04:59.970 --> 01:05:01.500
OK.

01:05:01.500 --> 01:05:03.540
SHAILEN TULI: If you don't, if
you pause twice and resume

01:05:03.540 --> 01:05:06.770
once, it throws up its
hands and says--

01:05:06.770 --> 01:05:08.080
SETH LADD: So, let's take
a note and figure out--

01:05:08.080 --> 01:05:09.580
JOHN: We're still pause then?

01:05:09.580 --> 01:05:10.720
SHAILEN TULI: Yeah.

01:05:10.720 --> 01:05:12.400
SETH LADD: Let's figure
out why that is.

01:05:12.400 --> 01:05:14.720
There may be some
reason there.

01:05:14.720 --> 01:05:16.900
Pause is not-- you're not
toggling some state, it sounds

01:05:16.900 --> 01:05:19.850
like, because you have to toggle
it the same amount--

01:05:19.850 --> 01:05:21.120
pausing and unpausing.

01:05:21.120 --> 01:05:22.900
SHAILEN TULI: Yeah,
so there is this--

01:05:22.900 --> 01:05:24.206
so here.

01:05:24.206 --> 01:05:25.565
Can you make this big?

01:05:25.565 --> 01:05:28.050
Here we go.

01:05:28.050 --> 01:05:33.410
So I click, and it says,
pause count is 1.

01:05:33.410 --> 01:05:35.830
But then it just reverted
back, and now

01:05:35.830 --> 01:05:37.940
pause count is 0.

01:05:37.940 --> 01:05:40.020
So that's basically
what's happening.

01:05:40.020 --> 01:05:42.570
It's a counter internally that's
just keeping track of

01:05:42.570 --> 01:05:44.010
how many pauses, how
many resumes.

01:05:46.962 --> 01:05:48.605
SETH LADD: Oh good, we're
getting a question from Roman.

01:05:53.620 --> 01:05:56.080
Oh, maybe not.

01:05:56.080 --> 01:05:59.350
But this is a good time to say
we're going to wrap it up in

01:05:59.350 --> 01:06:00.030
just a few minutes.

01:06:00.030 --> 01:06:01.180
If you guys have questions,
now is a

01:06:01.180 --> 01:06:02.570
good time to ask them.

01:06:02.570 --> 01:06:03.710
Jump in the chat.

01:06:03.710 --> 01:06:05.760
Wave your hands,
ask with voice.

01:06:05.760 --> 01:06:08.530
Any last questions about some
of these new features in the

01:06:08.530 --> 01:06:11.335
Dart libraries?

01:06:11.335 --> 01:06:11.770
No?

01:06:11.770 --> 01:06:13.250
OK.

01:06:13.250 --> 01:06:13.900
Cool.

01:06:13.900 --> 01:06:16.520
Well, hopefully you guys are
updating all your code to M3.

01:06:16.520 --> 01:06:19.520
We've seen a lot of traffic on
Pub as people are uploading

01:06:19.520 --> 01:06:21.560
the new packages, which
is awesome.

01:06:21.560 --> 01:06:24.870
We're also seeing people take
their new packages and put

01:06:24.870 --> 01:06:27.920
them on to drone.io, which is
a continuous integration

01:06:27.920 --> 01:06:31.330
service that has full support
for native Dart apps.

01:06:31.330 --> 01:06:34.260
So if you want to ensure that
your code keeps working, then

01:06:34.260 --> 01:06:35.500
you should totally use drone.

01:06:35.500 --> 01:06:36.160
It's very cool.

01:06:36.160 --> 01:06:37.420
Ah, yes.

01:06:37.420 --> 01:06:38.050
Beer o'clock.

01:06:38.050 --> 01:06:39.300
I like it.

01:06:41.610 --> 01:06:46.270
And so, lots of cool things to
keep your apps updated, and

01:06:46.270 --> 01:06:49.100
running all the time with our
continuous integration

01:06:49.100 --> 01:06:51.480
partners, drone.io.

01:06:51.480 --> 01:06:52.730
Very cool.

01:06:54.250 --> 01:06:55.420
SHAILEN TULI: I'll write
up all this stuff.

01:06:55.420 --> 01:06:56.420
I'll put it on gitHub.

01:06:56.420 --> 01:06:58.930
And I'll send out emails to the

01:06:58.930 --> 01:07:00.830
mailing list and to Dartisans.

01:07:00.830 --> 01:07:01.850
SETH LADD: OK.

01:07:01.850 --> 01:07:02.460
SHAILEN TULI: G+.

01:07:02.460 --> 01:07:03.890
SETH LADD: Cool.

01:07:03.890 --> 01:07:05.990
Well, let us know if this
format works you guys.

01:07:05.990 --> 01:07:07.650
It's office hours.

01:07:07.650 --> 01:07:09.270
And how we can make
it better for you.

01:07:09.270 --> 01:07:11.930
We want to make sure you have a
good conduit into the team.

01:07:11.930 --> 01:07:14.590
And if this live Q&amp;A
thing works you

01:07:14.590 --> 01:07:15.570
guys, then that's cool.

01:07:15.570 --> 01:07:16.830
We'll keep doing it.

01:07:16.830 --> 01:07:20.620
So I want to thank John and
Shailen and JJ and, definitely

01:07:20.620 --> 01:07:22.290
thank all of our watchers
and guests.

01:07:22.290 --> 01:07:24.290
This is really, really
appreciated.

01:07:24.290 --> 01:07:25.870
You can find us on the
Dart mailing list--

01:07:25.870 --> 01:07:27.310
misc@dartlang.org.

01:07:27.310 --> 01:07:31.290
You can find us on Stack
Overflow, tag Dart.

01:07:31.290 --> 01:07:34.320
You can find us on
Google+, +Dart.

01:07:34.320 --> 01:07:38.090
And our Dartisans community
on Google+.

01:07:38.090 --> 01:07:41.440
So, lots of good ways
to get a hold of us.

01:07:41.440 --> 01:07:42.290
Yeah.

01:07:42.290 --> 01:07:43.930
I think that's it for today.

01:07:43.930 --> 01:07:45.120
Everyone have a great weekend.

01:07:45.120 --> 01:07:46.150
And we appreciate it.

01:07:46.150 --> 01:07:48.870
And we'll see you online.

01:07:48.870 --> 01:07:50.120
Bye.

