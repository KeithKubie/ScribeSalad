WEBVTT
Kind: captions
Language: en

00:00:00.342 --> 00:00:03.997
So TCP has all of these provisions
to deal with packet loss and

00:00:03.997 --> 00:00:05.079
other failures.

00:00:05.079 --> 00:00:07.482
But why do these ever
happen in the first place?

00:00:07.482 --> 00:00:11.720
Why don't networks just be super
reliable, so nothing ever gets dropped?

00:00:11.720 --> 00:00:13.659
Well, that's not always an option.

00:00:13.659 --> 00:00:16.544
Imagine that you have two machines,
A and

00:00:16.544 --> 00:00:19.603
B attached to two
different fast networks.

00:00:19.603 --> 00:00:23.005
But those fast networks are connected
by a slow network in the middle.

00:00:23.005 --> 00:00:27.533
Like maybe these are two offices
with gigabit ethernet, and

00:00:27.533 --> 00:00:31.364
the connection between
them is only 10 megabit.

00:00:31.364 --> 00:00:33.407
That's 100 times slower.

00:00:33.407 --> 00:00:38.483
Then Host A tries to send a big
pile of data over to Host B,

00:00:38.483 --> 00:00:41.302
let's say a gigabyte of data.

00:00:41.302 --> 00:00:45.999
Because its own network interface is
very fast, in theory, Host A could

00:00:45.999 --> 00:00:50.472
transmit this data as far as its
nearby router, in about 8 seconds.

00:00:50.472 --> 00:00:55.481
But that data also has to travel over
this slow link, and because that's 100

00:00:55.481 --> 00:01:00.580
times slower, over that 10 megabit
network, it's going to take 13 minutes.

00:01:00.580 --> 00:01:03.343
Where does the data have
to live in the mean time?

00:01:03.343 --> 00:01:07.859
If Host A were allowed to just push that
big pile of data onto the network, in

00:01:07.859 --> 00:01:12.449
order for it to get through, this router
would have to buffer it in memory and

00:01:12.449 --> 00:01:16.205
trickle it out over this slow
link over the next 13 minutes.

00:01:16.205 --> 00:01:20.802
And meanwhile, nobody else on this
network would be able to send anything.

00:01:20.802 --> 00:01:24.158
This link would be saturated,
completely full.

00:01:24.158 --> 00:01:25.806
That wouldn't be a very good outcome.

00:01:25.806 --> 00:01:28.697
So TCP and
routers don't actually do it that way.

00:01:28.697 --> 00:01:33.144
Instead TCP doesn't start
sending data at full blast.

00:01:33.144 --> 00:01:37.223
It starts out slowly, only increasing
speed when the other end shows it can

00:01:37.223 --> 00:01:39.628
keep up by sending
acknowledgements back.

00:01:39.628 --> 00:01:44.307
If packets are dropped, it slows down,
and then gradually it speeds up again.

00:01:44.307 --> 00:01:48.625
And routers work with this by dropping
packets if the link they're trying to

00:01:48.625 --> 00:01:49.777
send on is too busy.

00:01:49.777 --> 00:01:52.056
The result of this is
that the endpoints and

00:01:52.056 --> 00:01:56.312
the routers in the middle collaborate to
move data at close to an optimal speed.

00:01:56.312 --> 00:02:00.466
But this only works because routers
are willing to drop packets in order to

00:02:00.466 --> 00:02:01.675
signal congestion.

00:02:01.675 --> 00:02:05.112
And endpoints are willing
to slow down in response.

00:02:05.112 --> 00:02:07.354
If the router just let
everything queue up,

00:02:07.354 --> 00:02:09.907
the whole connection would
eventually time out.

00:02:09.907 --> 00:02:12.026
This is called TCP Congestion Control,
and

00:02:12.026 --> 00:02:15.130
that's one of the most important
performance features of TCP.

