WEBVTT
Kind: captions
Language: en

00:00:06.860 --> 00:00:09.090
MALE SPEAKER: OK, so we're here
at Devoxx, and I'm here

00:00:09.090 --> 00:00:12.640
with Igor and Misko
from AngularJS.

00:00:12.640 --> 00:00:14.540
And AngularJS, for those
who've never

00:00:14.540 --> 00:00:16.170
heard of it, is a new--

00:00:16.170 --> 00:00:18.180
can we call it a JavaScript
framework?

00:00:18.180 --> 00:00:18.540
MISKO HEVERY: Sure.

00:00:18.540 --> 00:00:19.530
MALE SPEAKER: Are
you offended?

00:00:19.530 --> 00:00:20.425
IGOR MINAR: That's
the closest--

00:00:20.425 --> 00:00:21.330
MALE SPEAKER: That's
the closest.

00:00:21.330 --> 00:00:22.980
But you have a different
take on things.

00:00:22.980 --> 00:00:25.450
You like things that are
declarative, right?

00:00:25.450 --> 00:00:25.830
MISKO HEVERY: Yes.

00:00:25.830 --> 00:00:29.240
I like to think of it as what a
browser would have been, had

00:00:29.240 --> 00:00:31.340
it been designed for
web applications.

00:00:31.340 --> 00:00:33.710
MALE SPEAKER: And you don't like
to deal with the DOM, or

00:00:33.710 --> 00:00:36.950
you think other frameworks,
maybe, are obstructing away

00:00:36.950 --> 00:00:40.410
and hacking the web and
browsers, and you're trying to

00:00:40.410 --> 00:00:43.910
be more true to, maybe, HTML?

00:00:43.910 --> 00:00:44.490
MISKO HEVERY: Yes.

00:00:44.490 --> 00:00:47.580
A lot of frameworks take the
approach that DOM and HTML and

00:00:47.580 --> 00:00:50.100
CSS is complicated stuff-- even
sometimes the Javascript.

00:00:50.100 --> 00:00:51.790
And so they try to hide
it from the user.

00:00:51.790 --> 00:00:54.320
And so we're kind of unique in
that we're saying, no, no, no,

00:00:54.320 --> 00:00:56.370
we're just going to embrace it,
and we're just going to

00:00:56.370 --> 00:00:58.150
see if we can monkey
back some of the

00:00:58.150 --> 00:01:00.230
efficiencies to make it better.

00:01:00.230 --> 00:01:01.650
MALE SPEAKER: So do you want to
talk about data binding and

00:01:01.650 --> 00:01:03.730
templating and how that helps?

00:01:03.730 --> 00:01:06.960
IGOR MINAR: So in angular
applications, we see that the

00:01:06.960 --> 00:01:09.990
biggest benefit you get from
using Angular is this declare

00:01:09.990 --> 00:01:10.370
templating.

00:01:10.370 --> 00:01:14.440
In Angular, you don't do
imperative DOM manipulation

00:01:14.440 --> 00:01:16.850
just anywhere in your
application like are common in

00:01:16.850 --> 00:01:18.290
JQuery applications.

00:01:18.290 --> 00:01:21.280
In Angular application,
you have a model.

00:01:21.280 --> 00:01:23.680
This model is something domain
specific to your application,

00:01:23.680 --> 00:01:26.550
and this model drives the view,
and it drives it in a

00:01:26.550 --> 00:01:30.690
way that you take this template,
and you declare to

00:01:30.690 --> 00:01:34.870
specify where this model binds
to the template, and you let

00:01:34.870 --> 00:01:38.920
the templating figure out how to
take the model and push it

00:01:38.920 --> 00:01:41.340
through this template and render
the view and keep the

00:01:41.340 --> 00:01:42.950
model and the view in
sync at all times.

00:01:42.950 --> 00:01:43.160
MALE SPEAKER: Right.

00:01:43.160 --> 00:01:44.530
So this is bidirectional.

00:01:44.530 --> 00:01:44.850
IGOR MINAR: Yeah.

00:01:44.850 --> 00:01:46.130
So it's bidirectional.

00:01:46.130 --> 00:01:49.950
If you have input fields, we
actually take the user input,

00:01:49.950 --> 00:01:52.440
and we push it to
the model back.

00:01:52.440 --> 00:01:56.170
If you have just single binding,
we take whatever

00:01:56.170 --> 00:01:58.570
changes happen to the model and
update the view for you

00:01:58.570 --> 00:01:59.586
automatically.

00:01:59.586 --> 00:02:01.980
MALE SPEAKER: So something
else I understand about

00:02:01.980 --> 00:02:04.930
AngularJS is the dependency
injection being built in,

00:02:04.930 --> 00:02:07.630
which is a term obviously that
means a lot to, say, Java

00:02:07.630 --> 00:02:08.190
developers.

00:02:08.190 --> 00:02:11.910
Can you elaborate on that, and
does that even make sense for

00:02:11.910 --> 00:02:12.960
Java and for the web?

00:02:12.960 --> 00:02:14.910
And is it about testability?

00:02:14.910 --> 00:02:19.100
IGOR MINAR: So testability is
one reason why we embrace

00:02:19.100 --> 00:02:21.440
dependence injection, but
in general, we find that

00:02:21.440 --> 00:02:23.800
dependence injection just gives
you these guidelines on

00:02:23.800 --> 00:02:26.070
how we should just structure the
application into smaller

00:02:26.070 --> 00:02:28.630
components, and then have
dependencies between

00:02:28.630 --> 00:02:31.550
components that are
automatically resolved when

00:02:31.550 --> 00:02:33.840
any of the components need
to be instantiated.

00:02:33.840 --> 00:02:36.960
So not only dependence injection
helps you with

00:02:36.960 --> 00:02:40.190
testability, it helps you just
making the application easier

00:02:40.190 --> 00:02:42.430
to understand and write
and maintain.

00:02:42.430 --> 00:02:44.320
MALE SPEAKER: And
maintain, yeah.

00:02:44.320 --> 00:02:45.340
You mentioned components.

00:02:45.340 --> 00:02:47.150
What was the component
story in AngularJS?

00:02:47.150 --> 00:02:48.380
Do you build components?

00:02:48.380 --> 00:02:49.470
Custom components?

00:02:49.470 --> 00:02:51.620
MISKO HEVERY: We basically were
trying to follow the web

00:02:51.620 --> 00:02:54.000
components story.

00:02:54.000 --> 00:02:55.625
MALE SPEAKER: You want to say
what components are first?

00:02:55.625 --> 00:02:57.300
MISKO HEVERY: Web components
is the new standard that's

00:02:57.300 --> 00:03:01.260
coming from the W3C, where
they're recognizing the need,

00:03:01.260 --> 00:03:03.540
if you're building an
application, that the divs and

00:03:03.540 --> 00:03:06.080
spans is not what you want,
rather you want this reusable

00:03:06.080 --> 00:03:08.820
stuff like tabs and control
panels and so on.

00:03:08.820 --> 00:03:10.620
IGOR MINAR: We basically want
higher level abstraction.

00:03:10.620 --> 00:03:14.760
So you want to build
abstractions from this small

00:03:14.760 --> 00:03:18.500
li span, or whatever you have,
and just create component that

00:03:18.500 --> 00:03:21.850
would just say, oh, this is a
tab, or this is a Google map,

00:03:21.850 --> 00:03:25.340
or any other component that
you might have that is

00:03:25.340 --> 00:03:29.470
internally structured from this
low level DOM element.

00:03:29.470 --> 00:03:29.940
MALE SPEAKER: Right.

00:03:29.940 --> 00:03:32.320
And Angular, how does
that translate?

00:03:32.320 --> 00:03:34.180
IGOR MINAR: So with Angular,
we allow you to build these

00:03:34.180 --> 00:03:35.900
reusable components today.

00:03:35.900 --> 00:03:39.100
We use existing domain PIs in
JavaScript, which is not as

00:03:39.100 --> 00:03:41.910
powerful as what you
can do with changes

00:03:41.910 --> 00:03:43.320
to the native APIs.

00:03:43.320 --> 00:03:46.900
And our story is, let's start
building these reusable

00:03:46.900 --> 00:03:49.860
components today, and pretend
that we already have this low

00:03:49.860 --> 00:03:54.390
level native APIs for
building components.

00:03:54.390 --> 00:03:57.830
And when the web component
specification is done, it's

00:03:57.830 --> 00:03:59.900
going to align really well,
because it will allow you to

00:03:59.900 --> 00:04:01.560
build the same kind
of components,

00:04:01.560 --> 00:04:04.650
but with native APIs.

00:04:04.650 --> 00:04:06.710
MISKO HEVERY: What I want to
add to it is, really, what

00:04:06.710 --> 00:04:10.150
we're trying to do is we want
to turn HTML into a

00:04:10.150 --> 00:04:13.740
declarative DSL-- a domain
specific language, where if

00:04:13.740 --> 00:04:17.029
you're building an application
that has a lot of panes and

00:04:17.029 --> 00:04:22.905
panels and a calendar thing,
then you want to have a

00:04:22.905 --> 00:04:24.730
vocabulary that's useful for
building that application.

00:04:24.730 --> 00:04:25.640
MALE SPEAKER: OK.

00:04:25.640 --> 00:04:28.980
So I have my components,
I have my views, my--

00:04:28.980 --> 00:04:30.690
how do I wire up the back end?

00:04:30.690 --> 00:04:34.380
How do you get the data from
your friends producing and

00:04:34.380 --> 00:04:36.590
managing the data source?

00:04:36.590 --> 00:04:39.600
MISKO HEVERY: So we're trying
to be server side agnostic.

00:04:39.600 --> 00:04:41.370
So there's no server
side component.

00:04:41.370 --> 00:04:44.950
That means that as long as the
server is producing JSON and

00:04:44.950 --> 00:04:46.130
something that [INAUDIBLE].

00:04:46.130 --> 00:04:46.465
IGOR MINAR: Or XML.

00:04:46.465 --> 00:04:47.320
MISKO HEVERY: Or XML.

00:04:47.320 --> 00:04:47.830
IGOR MINAR: Doesn't matter.

00:04:47.830 --> 00:04:51.310
Like, if there's a way how you
can get data from the server

00:04:51.310 --> 00:04:53.680
to the client, then we
can just use this.

00:04:53.680 --> 00:04:56.260
If this is done through HTTP,
if it's done through web

00:04:56.260 --> 00:05:00.000
sockets, if the encoding is JSON
or XML, we don't care.

00:05:00.000 --> 00:05:03.820
We provide you some helpers,
so for HTTP and RESTful

00:05:03.820 --> 00:05:06.160
backends, we give you some
support to how you can

00:05:06.160 --> 00:05:07.190
communicate.

00:05:07.190 --> 00:05:11.570
But we really think that there
are such a variety of backends

00:05:11.570 --> 00:05:14.570
out there that it doesn't really
make sense for us to be

00:05:14.570 --> 00:05:16.640
tied to only one specific
backend.

00:05:16.640 --> 00:05:18.310
We should be able
to use anything.

00:05:18.310 --> 00:05:20.900
One thing that is really
interesting for me is that

00:05:20.900 --> 00:05:23.390
there are new approaches
of solving the backend.

00:05:23.390 --> 00:05:27.000
For example, MeteorJS completely
says, REST doesn't

00:05:27.000 --> 00:05:30.120
work for applications
that we're building

00:05:30.120 --> 00:05:31.020
today on the web.

00:05:31.020 --> 00:05:34.410
We need to rethink how we
deliver data to the browser.

00:05:34.410 --> 00:05:37.070
And integration between
AngularJS and Meteor is

00:05:37.070 --> 00:05:39.290
something that we are discussing
right now.

00:05:39.290 --> 00:05:40.070
MALE SPEAKER: OK.

00:05:40.070 --> 00:05:43.400
So for a developer looking into
trying out AngularJS,

00:05:43.400 --> 00:05:44.940
what does the tool
chain look like?

00:05:44.940 --> 00:05:46.700
What are the tools
you recommend?

00:05:46.700 --> 00:05:47.920
Do you recommend any?

00:05:47.920 --> 00:05:49.300
I mean, this is the web,
this is editing.

00:05:49.300 --> 00:05:51.440
MISKO HEVERY: Tool number
one, browser.

00:05:51.440 --> 00:05:51.960
MALE SPEAKER: This is
declarative stuff.

00:05:51.960 --> 00:05:53.180
IGOR MINAR: You need
a browser.

00:05:53.180 --> 00:05:54.440
MALE SPEAKER: You need
a browser, right.

00:05:54.440 --> 00:05:57.570
But do you need the full
blown IDEs that--

00:05:57.570 --> 00:05:59.270
IGOR MINAR: No, not really.

00:05:59.270 --> 00:06:02.610
Because most of the editors
today have support for HTML,

00:06:02.610 --> 00:06:04.660
so they can do syntax
highlighting, they can do all

00:06:04.660 --> 00:06:06.380
the completion for HTML.

00:06:06.380 --> 00:06:09.770
And Angular is really just
HTML extended, and

00:06:09.770 --> 00:06:11.030
JavaScript, of course.

00:06:11.030 --> 00:06:15.640
So if you have an editor that is
suitable for web design and

00:06:15.640 --> 00:06:18.580
just simple web development,
then it's suitable for

00:06:18.580 --> 00:06:19.850
AngularJS development.

00:06:19.850 --> 00:06:21.240
There are some IDEs
that are better.

00:06:21.240 --> 00:06:23.810
For example, Web Store currently
has the best support

00:06:23.810 --> 00:06:27.030
for AngularJS, but there
are other IDEs that--

00:06:27.030 --> 00:06:28.870
MISKO HEVERY: Better support,
just to be clear.

00:06:28.870 --> 00:06:33.830
IGOR MINAR: So this means auto
completion of Angular specific

00:06:33.830 --> 00:06:35.120
attributes.

00:06:35.120 --> 00:06:37.390
It also means maybe just
pre-generating

00:06:37.390 --> 00:06:38.440
templates for you.

00:06:38.440 --> 00:06:42.095
So if you have some component
that has well known structure,

00:06:42.095 --> 00:06:45.584
it can just pre-generate
the code for you.

00:06:45.584 --> 00:06:47.380
What else am I missing?

00:06:47.380 --> 00:06:47.930
Testing--

00:06:47.930 --> 00:06:49.920
running tests with Angular.

00:06:49.920 --> 00:06:52.480
So Angular's really--

00:06:52.480 --> 00:06:56.540
we like to tell people that they
really should test drive

00:06:56.540 --> 00:06:58.980
their applications, and
IDE can help there.

00:06:58.980 --> 00:07:02.120
So having a good integration
with

00:07:02.120 --> 00:07:04.630
test runners is important.

00:07:04.630 --> 00:07:06.300
MALE SPEAKER: You have
integration with Chrome dev

00:07:06.300 --> 00:07:08.310
tools as well for debugging
purposes?

00:07:08.310 --> 00:07:11.000
IGOR MINAR: For debugging
purposes, Chrome is amazing,

00:07:11.000 --> 00:07:14.420
because it helps us see
what the application

00:07:14.420 --> 00:07:15.540
looks like at runtime.

00:07:15.540 --> 00:07:18.620
And the debugging tools in
Chrome are really pretty good.

00:07:18.620 --> 00:07:21.710
You can debug JavaScript, you
can debug the element and you

00:07:21.710 --> 00:07:24.110
can look at the DOM and see
what state it is in.

00:07:24.110 --> 00:07:27.030
But we thought it could be
better, so we actually created

00:07:27.030 --> 00:07:28.940
an extension for the
Web Inspector

00:07:28.940 --> 00:07:30.470
that you see in Chrome.

00:07:30.470 --> 00:07:33.660
And with this extension, you
can visualize what the

00:07:33.660 --> 00:07:36.020
application structure looks
like, what is the current

00:07:36.020 --> 00:07:39.360
model state, what is the state
of the dependence injector,

00:07:39.360 --> 00:07:41.670
and all the dependencies
in my system.

00:07:41.670 --> 00:07:42.580
MALE SPEAKER: Very nice.

00:07:42.580 --> 00:07:45.440
So I obviously have written
some JavaScript already.

00:07:45.440 --> 00:07:48.040
I have pages, I'm using probably
some frameworks.

00:07:48.040 --> 00:07:50.850
Does Angular play well with
those frameworks, or do I need

00:07:50.850 --> 00:07:52.230
to rip everything off?

00:07:52.230 --> 00:07:54.010
MISKO HEVERY: You know, that's
something that I feel very

00:07:54.010 --> 00:07:55.160
strongly about.

00:07:55.160 --> 00:07:57.725
I think one of the successes of
JQuery was that you didn't

00:07:57.725 --> 00:07:59.540
have to subscribe to
the whole thing.

00:07:59.540 --> 00:08:01.490
You could just say, I want to
start using JQuery in this

00:08:01.490 --> 00:08:02.890
little tiny portion of
the page, and then I

00:08:02.890 --> 00:08:04.400
grow as I like it.

00:08:04.400 --> 00:08:07.000
And so we structured this
Angular in the same exact way,

00:08:07.000 --> 00:08:09.680
where you can just sprinkle as
little of it or as much of it

00:08:09.680 --> 00:08:10.530
as you want.

00:08:10.530 --> 00:08:12.650
You can even use it with a round
trip application, and

00:08:12.650 --> 00:08:14.510
then later on think about how
you turn the round trip

00:08:14.510 --> 00:08:17.272
application into a single
page Ajax application.

00:08:17.272 --> 00:08:17.660
MALE SPEAKER: OK.

00:08:17.660 --> 00:08:19.430
And the dependencies,
how big are they?

00:08:19.430 --> 00:08:23.670
I mean, are you dragging along
like, big libraries, or--

00:08:23.670 --> 00:08:25.600
MISKO HEVERY: No, so Angular is
about the size of JQuery.

00:08:25.600 --> 00:08:26.620
A little smaller.

00:08:26.620 --> 00:08:28.250
[INTERPOSING VOICES]

00:08:28.250 --> 00:08:29.340
IGOR MINAR: It's much smaller.

00:08:29.340 --> 00:08:29.830
MISKO HEVERY: It's
much smaller?

00:08:29.830 --> 00:08:30.690
IGOR MINAR: Yeah, it's
much smaller.

00:08:30.690 --> 00:08:31.780
[INTERPOSING VOICES]

00:08:31.780 --> 00:08:34.620
IGOR MINAR: So Angular itself
is 29K right now, when it's

00:08:34.620 --> 00:08:35.880
[INAUDIBLE].

00:08:35.880 --> 00:08:39.730
We have some plans to make it
even smaller, but really, 29K

00:08:39.730 --> 00:08:40.920
is not that big.

00:08:40.920 --> 00:08:44.080
It's a small image.

00:08:44.080 --> 00:08:48.290
So I think we're doing
quite well there.

00:08:48.290 --> 00:08:51.300
Like, we try to keep the core
of the framework small, and

00:08:51.300 --> 00:08:53.670
then if there are some
functionalities that we see

00:08:53.670 --> 00:08:56.140
that people use, but not all the
time, then that should be

00:08:56.140 --> 00:08:59.570
a separate module that you
can load if you want to.

00:08:59.570 --> 00:09:04.420
And often this brings up the
question of what about

00:09:04.420 --> 00:09:04.950
components?

00:09:04.950 --> 00:09:06.420
Like, are there components
that the

00:09:06.420 --> 00:09:10.430
framework brings and contains?

00:09:10.430 --> 00:09:11.690
And the answer is no.

00:09:11.690 --> 00:09:14.970
We wanted to build the core of
the framework very small, and

00:09:14.970 --> 00:09:18.140
we wanted to make it possible to
build all these components

00:09:18.140 --> 00:09:19.130
on top of Angular.

00:09:19.130 --> 00:09:22.510
So one of the design tools of
Angular is everything should

00:09:22.510 --> 00:09:23.530
be extensible.

00:09:23.530 --> 00:09:27.040
So when you look at all these
custom attributes that Angular

00:09:27.040 --> 00:09:30.820
created, like ng-repeat,
ng-show, all of this stuff is

00:09:30.820 --> 00:09:34.430
built on the APIs that are
available to all the

00:09:34.430 --> 00:09:35.050
developers.

00:09:35.050 --> 00:09:38.930
So if you actually don't like
all of our custom directives,

00:09:38.930 --> 00:09:41.680
you can just throw them away and
build your own, and just

00:09:41.680 --> 00:09:46.810
use the HTML templating core and
the dependence injector.

00:09:46.810 --> 00:09:48.520
MALE SPEAKER: So where should
people go to find out more

00:09:48.520 --> 00:09:50.290
about AngularJS?

00:09:50.290 --> 00:09:51.575
IGOR MINAR: AngularJS.org.

00:09:51.575 --> 00:09:52.970
MALE SPEAKER: Dot org?

00:09:52.970 --> 00:09:53.930
That's probably a good place

00:09:53.930 --> 00:09:54.530
MISKO HEVERY: There's
also this search

00:09:54.530 --> 00:09:55.710
engine called Google.

00:09:55.710 --> 00:09:56.010
MALE SPEAKER: Yeah.

00:09:56.010 --> 00:09:56.860
MISKO HEVERY: It's
pretty good.

00:09:56.860 --> 00:09:58.560
MALE SPEAKER: Does it work?

00:09:58.560 --> 00:09:59.160
That's awesome.

00:09:59.160 --> 00:10:00.730
Well, thanks, guys,
for being here.

00:10:00.730 --> 00:10:01.500
IGOR MINAR: Thank you
for having us.

00:10:01.500 --> 00:10:02.310
MISKO HEVERY: Thanks
for having us.

00:10:02.310 --> 00:10:03.560
MALE SPEAKER: Thank you.

