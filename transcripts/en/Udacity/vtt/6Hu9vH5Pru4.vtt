WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Narrator] We're going to define Fibonacci.

00:00:03.000 --> 00:00:07.000
Here's our definition and let's try this out.

00:00:07.000 --> 00:00:11.000
We'll print the result of Fibonacci 0 first.

00:00:11.000 --> 00:00:14.000
We should get 0, which we do.

00:00:14.000 --> 00:00:17.000
We'll try Fibonacci 1.

00:00:17.000 --> 00:00:20.000
We get 1, so we've seen our 2 base cases.

00:00:20.000 --> 00:00:25.000
Now, when we do Fibonacci 2, what we should get is the result of Fibonacci 1,

00:00:25.000 --> 00:00:32.000
which is 1 + Fibonacci 2-2, which is Fibonacci 0, which is 0.

00:00:32.000 --> 00:00:40.000
We should get 1, again, which we do, and now let's try printing Fibonacci 3.

00:00:40.000 --> 00:00:49.000
We get 2, and if we print Fibonacci 4, we should get 1 + 2, which is 3, which we get,

00:00:49.000 --> 00:00:56.000
and if we try 5, we should get 2 + 3, which is 5,

00:00:56.000 --> 00:01:02.000
and let's try something a little bigger.

00:01:02.000 --> 00:01:05.000
Let's try Fibonacci 10.

00:01:05.000 --> 00:01:08.000
We get 55.

00:01:08.000 --> 00:01:12.000
We'll try Fibonacci 25.

00:01:12.000 --> 00:01:14.000
We'll try Fibonacci 24.

00:01:14.000 --> 00:01:17.000
If we're counting months that would be the number of rabbits in 2 years,

00:01:17.000 --> 00:01:20.000
and we get 46,000,

00:01:20.000 --> 00:01:26.000
and let's try in 3 years our program times out.

00:01:26.000 --> 00:01:29.000
I'm going to try this soon in the Python interpreter.

00:01:29.000 --> 00:01:31.000
We'll see if we can do slightly bigger ones,

00:01:31.000 --> 00:01:37.000
but the time it takes to solve Fibonacci this way is very long,

00:01:37.000 --> 00:01:42.000
and the reason for that is because we're doing lots and lots of redundant calculation.

00:01:42.000 --> 00:01:45.000
If we look at what our code is doing,

00:01:45.000 --> 00:01:48.000
every time we call Fibonacci N

00:01:48.000 --> 00:01:54.000
what's happening is we're calling Fibonacci N-1, and we're calling Fibonacci N-2.

00:01:54.000 --> 00:01:56.000
We're starting--we're calling Fibonacci 36.

00:01:56.000 --> 00:02:00.000
That was the example where the interpreter didn't finish,

00:02:00.000 --> 00:02:13.000
and what we'll get is that's going to be broken down into calling Fibonacci 35 + the result that we get from calling Fibonacci 34.

00:02:13.000 --> 00:02:18.000
Each of those is another called the Fibonacci.

00:02:18.000 --> 00:02:24.000
The call to Fibonacci 35, well, that will be broken into calling Fibonacci 34

00:02:24.000 --> 00:02:29.000
and adding that result to what we get from calling Fibonacci 33,

00:02:29.000 --> 00:02:34.000
and when we do Fibonacci 34 here, well, that's going to be turned into

00:02:34.000 --> 00:02:40.000
calling Fibonacci 33 and adding the result to Fibonacci 32.

00:02:40.000 --> 00:02:43.000
Okay, so I think you get the idea.

00:02:43.000 --> 00:02:46.000
We're going to do lots and lots of calculations here,

00:02:46.000 --> 00:02:50.000
and we haven't got close to getting down to Fibo 1 or Fibo 0,

00:02:50.000 --> 00:02:53.000
which is the only places that we stopped.

00:02:53.000 --> 00:03:01.000
If we look at the number of times we have to evaluate Fibo 32, let's pick that one, so Fibonacci 32.

00:03:01.000 --> 00:03:04.000
We have to evaluate it once here; we have to evaluate it once here,

00:03:04.000 --> 00:03:09.000
once here, once here, and one more time.

00:03:09.000 --> 00:03:13.000
We need to evaluate Fibonacci 32, 1, 2, 3, 4, 5 times.

00:03:13.000 --> 00:03:21.000
The number of times we had to evaluate Fibonacci 33 was 1, 2, 3 times.

00:03:21.000 --> 00:03:29.000
The number of times we had to evaluate Fibonacci 34 was 2 times,

00:03:29.000 --> 00:03:33.000
and the number of times we had to evaluate Fibonacci 35 was 1 time,

00:03:33.000 --> 00:03:39.000
and the number of times we had to evaluate Fibonacci 36 was 1 time.

00:03:39.000 --> 00:03:42.000
Maybe you can see a pattern here.

00:03:42.000 --> 99:59:59.000
How many times do you think we're going to need to evaluate Fibonacci 31?

