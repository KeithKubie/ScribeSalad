WEBVTT
Kind: captions
Language: en

00:00:02.389 --> 00:00:04.180
COLT MCANLIS: One
important part of writing

00:00:04.180 --> 00:00:06.910
successful applications
is enabling the programmer

00:00:06.910 --> 00:00:08.890
to be as efficient as
possible so that they

00:00:08.890 --> 00:00:12.110
can focus their brain cycles on
the truly important problems.

00:00:12.110 --> 00:00:13.860
But sometimes this
ease of development

00:00:13.860 --> 00:00:15.380
can create new
performance problems

00:00:15.380 --> 00:00:17.000
that aren't always clear.

00:00:17.000 --> 00:00:18.080
My name is Colt McAnlis.

00:00:18.080 --> 00:00:20.230
And while the Android
Runtime provides

00:00:20.230 --> 00:00:21.820
lots of opportunities
for programmers

00:00:21.820 --> 00:00:23.540
to be more efficient,
it also presents

00:00:23.540 --> 00:00:26.400
a lot of hidden pitfalls
with respect to performance.

00:00:26.400 --> 00:00:28.820
And the single biggest one
that you need to worry about

00:00:28.820 --> 00:00:31.440
has everything to do with how
you're allocating and using

00:00:31.440 --> 00:00:31.957
memory.

00:00:31.957 --> 00:00:34.540
See, many programming languages
that are known for being "high

00:00:34.540 --> 00:00:38.360
performance," like a C and C++,
usually require programmers

00:00:38.360 --> 00:00:40.230
to manage memory themselves.

00:00:40.230 --> 00:00:42.960
That is, the programmer is
responsible for allocating

00:00:42.960 --> 00:00:45.910
blocks of memory off of the
heap during code execution,

00:00:45.910 --> 00:00:48.280
and explicitly freeing
them back to the heap

00:00:48.280 --> 00:00:50.220
once they aren't
being used anymore.

00:00:50.220 --> 00:00:52.110
But in a 2 million
line code base,

00:00:52.110 --> 00:00:54.050
it's easy to get
lost in logic flows

00:00:54.050 --> 00:00:57.540
and end up not freeing
allocated memory as intended.

00:00:57.540 --> 00:01:00.980
These types of allocations
are called leaks-- that is,

00:01:00.980 --> 00:01:03.710
memory which was
allocated but never freed.

00:01:03.710 --> 00:01:07.100
Now, a managed memory
environment, on the other hand,

00:01:07.100 --> 00:01:10.090
removes this burden of freeing
memory from the programmer's

00:01:10.090 --> 00:01:10.820
shoulders.

00:01:10.820 --> 00:01:13.270
See, it keeps track of
each memory allocation.

00:01:13.270 --> 00:01:15.220
And once it determines
that a piece of memory

00:01:15.220 --> 00:01:17.250
is no longer being
used by the program,

00:01:17.250 --> 00:01:20.590
it can free it back to the
heap without any intervention

00:01:20.590 --> 00:01:21.780
from the programmer.

00:01:21.780 --> 00:01:24.570
Which is great, because we can
spend that extra time doing

00:01:24.570 --> 00:01:26.870
other things-- like arguing
about whether or not

00:01:26.870 --> 00:01:29.990
crossguards work
on light sabers.

00:01:29.990 --> 00:01:31.770
Anyhow, the process
of reclaiming

00:01:31.770 --> 00:01:35.460
memory in a managed environment
is known as Garbage Collection.

00:01:35.460 --> 00:01:39.850
It's a concept that was created
by John McCarthy back in 1959

00:01:39.850 --> 00:01:42.470
to solve problems in the
LISP programming language.

00:01:42.470 --> 00:01:45.550
And it generally adheres
to two primary principles--

00:01:45.550 --> 00:01:48.570
find data objects in a program
that cannot be accessed

00:01:48.570 --> 00:01:51.940
by in the future, and reclaim
the resources used by those

00:01:51.940 --> 00:01:52.900
objects.

00:01:52.900 --> 00:01:53.830
Now, think about it.

00:01:53.830 --> 00:01:55.870
Garbage Collection
can be really gnarly.

00:01:55.870 --> 00:01:58.115
I mean, if you've got
some 20,000 allocations

00:01:58.115 --> 00:02:00.230
in your program
right now, which ones

00:02:00.230 --> 00:02:01.540
aren't being needed anymore?

00:02:01.540 --> 00:02:04.680
Or better yet, when should you
execute a Garbage Collection

00:02:04.680 --> 00:02:07.440
event to free up memory
that isn't being used?

00:02:07.440 --> 00:02:10.110
These are actually very
difficult questions.

00:02:10.110 --> 00:02:13.450
And thankfully, we've had about
50 years worth of innovation

00:02:13.450 --> 00:02:14.530
to improve on them.

00:02:14.530 --> 00:02:17.590
Which is why the Garbage
Collector in Android Runtime

00:02:17.590 --> 00:02:20.030
is quite a bit more
sophisticated than McCarthy's

00:02:20.030 --> 00:02:21.340
original proposal.

00:02:21.340 --> 00:02:24.600
It's been built to be fast and
as non-intrusive as possible.

00:02:24.600 --> 00:02:26.770
Effectively, the memory
heap in Android's Runtime

00:02:26.770 --> 00:02:29.970
are segmented into spaces
based on the type of allocation

00:02:29.970 --> 00:02:32.890
and how best the system can
organize those allocations

00:02:32.890 --> 00:02:34.630
for future GC events.

00:02:34.630 --> 00:02:37.240
As a new object is allocated,
the characteristics

00:02:37.240 --> 00:02:39.420
are taken into
account to best fit

00:02:39.420 --> 00:02:41.520
what space it should
be placed into,

00:02:41.520 --> 00:02:44.580
depending on what version of the
Android Runtime you're using.

00:02:44.580 --> 00:02:46.260
And here's the important part.

00:02:46.260 --> 00:02:48.750
Each space has a set size.

00:02:48.750 --> 00:02:50.390
As objects are
allocated, we keep

00:02:50.390 --> 00:02:52.320
track of the combined sizes.

00:02:52.320 --> 00:02:54.240
And as a space starts
to grow, the system

00:02:54.240 --> 00:02:57.000
will need to execute a Garbage
Collection event in an attempt

00:02:57.000 --> 00:02:59.730
to free up memory for
future allocations.

00:02:59.730 --> 00:03:01.880
Now, it's worth pointing
out that GC events will

00:03:01.880 --> 00:03:04.770
behave differently depending
on which Android Runtime

00:03:04.770 --> 00:03:05.470
you're using.

00:03:05.470 --> 00:03:08.340
For example, in
DALVIK, many GC events

00:03:08.340 --> 00:03:10.390
are "stop the world" events.

00:03:10.390 --> 00:03:12.530
Meaning that any managed
code that is running

00:03:12.530 --> 00:03:14.790
will stop until the
operation completes.

00:03:14.790 --> 00:03:16.350
Which can get very
problematic when

00:03:16.350 --> 00:03:18.200
these GCs take
longer than normal,

00:03:18.200 --> 00:03:20.195
or there's a ton of
them happening at once,

00:03:20.195 --> 00:03:21.860
since it's going to
significantly eat

00:03:21.860 --> 00:03:23.290
into your frame time.

00:03:23.290 --> 00:03:25.420
Now, ART, on the
other hand, extended

00:03:25.420 --> 00:03:28.530
the functionality of a
concurrent GC system, which

00:03:28.530 --> 00:03:31.330
tends to remove the larger
GC pauses, but will still

00:03:31.330 --> 00:03:35.170
incur a small pause at the
end of important GC events.

00:03:35.170 --> 00:03:38.975
And to be clear, our engineers
have spent a lot of time

00:03:38.975 --> 00:03:40.350
making sure that
these events are

00:03:40.350 --> 00:03:43.160
as fast as possible to
reduce interruptions.

00:03:43.160 --> 00:03:46.020
That being said, this can
still cause your application

00:03:46.020 --> 00:03:48.430
some performance headaches.

00:03:48.430 --> 00:03:50.630
Firstly, understand that
the more time your app

00:03:50.630 --> 00:03:52.900
is spending doing
GCs in a given frame,

00:03:52.900 --> 00:03:55.150
the less time it's got
for the rest of the logic

00:03:55.150 --> 00:03:57.970
needed to keep you under
the 16 millisecond barrier

00:03:57.970 --> 00:03:59.230
for rendering.

00:03:59.230 --> 00:04:01.550
So if you've got a lot
of GCs, or some long ones

00:04:01.550 --> 00:04:04.660
right after each other, it might
push your frame processing time

00:04:04.660 --> 00:04:06.910
over the 16 millisecond
barrier, which

00:04:06.910 --> 00:04:09.840
can cause a visible hitching
or jink for your users.

00:04:09.840 --> 00:04:12.260
Secondly, understand
that your code flow

00:04:12.260 --> 00:04:14.030
may be doing the
kinds of work that

00:04:14.030 --> 00:04:17.800
force GCs to occur more often
or making them last longer

00:04:17.800 --> 00:04:18.910
than normal durations.

00:04:18.910 --> 00:04:20.579
For example, if
you're allocating

00:04:20.579 --> 00:04:23.290
a horde worth of objects in
the innermost part of a loop

00:04:23.290 --> 00:04:24.685
that runs for a
really long time,

00:04:24.685 --> 00:04:26.560
then you're going to be
polluting your memory

00:04:26.560 --> 00:04:28.170
heap with a lot of objects.

00:04:28.170 --> 00:04:30.170
And you'll end up kicking
off a lot of GC events

00:04:30.170 --> 00:04:33.097
quickly due to this
additional memory pressure.

00:04:33.097 --> 00:04:35.680
And these types of programming
patterns are easier to run into

00:04:35.680 --> 00:04:36.680
than you'd think.

00:04:36.680 --> 00:04:39.530
So thankfully, the
Android SDK has

00:04:39.530 --> 00:04:42.420
a set of powerful
tools at your disposal.

00:04:42.420 --> 00:04:44.260
For example, you can
get a high-level view

00:04:44.260 --> 00:04:46.690
of how your application
is managing memory using

00:04:46.690 --> 00:04:49.950
the Memory Monitor tool
inside of Android Studio.

00:04:49.950 --> 00:04:52.420
Every time you see a dip
in the allocated memory,

00:04:52.420 --> 00:04:54.450
that's a GC event occurring.

00:04:54.450 --> 00:04:56.710
Lots of dips in a
short time could

00:04:56.710 --> 00:04:58.860
signal a performance problem.

00:04:58.860 --> 00:05:01.130
And you can see what objects
are active in your heap,

00:05:01.130 --> 00:05:03.270
and what parts of your
code are allocating them,

00:05:03.270 --> 00:05:06.470
with the Heap and Allocation
Tracker tools as well.

00:05:06.470 --> 00:05:08.990
But wrangling memory
into performant uses

00:05:08.990 --> 00:05:10.880
is easier said than done.

00:05:10.880 --> 00:05:13.300
Which is why you need to check
out the rest of our Android

00:05:13.300 --> 00:05:15.900
Performance Patterns
content for other great ways

00:05:15.900 --> 00:05:17.080
to improve performance.

00:05:17.080 --> 00:05:20.370
And don't forget to join our
Google+ community for excellent

00:05:20.370 --> 00:05:21.880
info as well.

00:05:21.880 --> 00:05:24.850
So keep calm, profile your
code, and always remember,

00:05:24.850 --> 00:05:25.400
Perf matters.

00:05:25.400 --> 00:05:28.750
[MUSIC PLAYING]

