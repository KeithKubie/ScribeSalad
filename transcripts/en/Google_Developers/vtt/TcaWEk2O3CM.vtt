WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.299
&gt;&gt; BIDELMAN: All right, so people are still
sort of filtering in but we can get started.

00:00:07.299 --> 00:00:14.080
Thank you for coming. This is, What is a Web
App, and it's going to introduce you to the

00:00:14.080 --> 00:00:19.260
Chrome Web Store and building an application
for the Chrome Web Store, so hopefully, you're

00:00:19.260 --> 00:00:25.640
in the right place. Just a little bit about
myself for those that haven't seen me present

00:00:25.640 --> 00:00:31.170
today. I--my name is Eric Bidelman. That's
my Twitter handle there @ebidel at the top.

00:00:31.170 --> 00:00:36.480
I'm a developer programs engineer at Google.
I've worked on a bunch of different APIs and

00:00:36.480 --> 00:00:41.969
helped their developers with Google Docs and
Sites and Base and OAuth. And now, I'm doing

00:00:41.969 --> 00:00:46.629
things with Chrome and HTML5 and evangelizing
the open Web and all the cool stuff you can

00:00:46.629 --> 00:00:54.010
do with Chrome and modern browsers. So, today,
we're going to talk a little bit about Chrome;

00:00:54.010 --> 00:00:59.850
what is it, where we--where were we, where
we're at now. And also in regards to HTML5,

00:00:59.850 --> 00:01:04.430
what's going on in HTML5 space in Chrome because
ultimately, you know, we're building Web apps,

00:01:04.430 --> 00:01:09.820
we're going to be building them using technologies
like HTML5. And then we'll switch gears and

00:01:09.820 --> 00:01:14.860
sort of think and talk about what a Web app
looks like. So thinking gets your mind thinking

00:01:14.860 --> 00:01:19.550
about the certain components of a Web app
and how they look, how they feel. We'll talk

00:01:19.550 --> 00:01:24.300
about the Chrome Web Store, how do you publish
an application, how do you write an app and

00:01:24.300 --> 00:01:29.810
write or install the Web application. That's
kind of a new concept. There's two types;

00:01:29.810 --> 00:01:33.800
there's a host app and a package app. I'll
discuss both compatibility and then we'll

00:01:33.800 --> 00:01:43.600
take questions if we have time. So let's jump
right into HTML5 and Chrome. So you saw some

00:01:43.600 --> 00:01:48.380
of this in the keynote but I just want to
reiterate it, why Chrome as sort of a developer

00:01:48.380 --> 00:01:53.080
platform? Well, here's a--here's an interesting
graph. So you can see the initial beta of

00:01:53.080 --> 00:01:58.770
Chrome all the way down to Chrome 9. And this
is a benchmark of the V8 JavaScript engine

00:01:58.770 --> 00:02:03.890
that Chrome runs. This is the--the version
five of that benchmark. But you can tell that

00:02:03.890 --> 00:02:08.560
the--obviously, the bigger bars mean better
and better performance. So over the last releases,

00:02:08.560 --> 00:02:12.319
I mean, we just keep getting faster and faster
and faster. This is why applications like

00:02:12.319 --> 00:02:20.120
Gmail and these big JavaScript-heavy and JavaScript-centric
applications work and work really well. Chrome

00:02:20.120 --> 00:02:24.840
has 70 million plus active users. That's something
we announced at Google I/O. And that number

00:02:24.840 --> 00:02:29.280
is only getting bigger. So if you're targeting
Chrome, if you're targeting it for the Web

00:02:29.280 --> 00:02:34.350
Store, you have a huge potential user base
to reach. Stable channel update happen every

00:02:34.350 --> 00:02:39.280
six weeks. So, we are iterating on this thing
lighting fast. And it's really nice that all

00:02:39.280 --> 00:02:44.090
browser vendors now are competing. You have
Safari, you have Firefox, you have IE9 and

00:02:44.090 --> 00:02:49.380
Chrome sort of driving the Web forward and
building these HTML5 APIs at lightning speeds.

00:02:49.380 --> 00:02:53.040
You have new Canary build on Windows that
you can download. It's nightly build of Chrome

00:02:53.040 --> 00:02:57.490
that you can test the latest and greatest,
the bleeding edge features, as they come out.

00:02:57.490 --> 00:03:03.530
I mentioned 400% JavaScript performance improvement.
So just a--it's a really exciting space to

00:03:03.530 --> 00:03:09.251
be in. So why HTML5? Well, you've seen a lot
of cool demos today. I did some of the keynote.

00:03:09.251 --> 00:03:13.891
We've talked about them a little bit. I'll
just sort of break up this talk a little bit.

00:03:13.891 --> 00:03:19.349
I'm going to switch to this mic and just show
you a few cool demos throughout the entire

00:03:19.349 --> 00:03:28.959
thing. This is one I actually found today.
So, this is using the Drag and Drop API that

00:03:28.959 --> 00:03:33.150
we demoed in the keynote but this one's a
little different. So let me find a nice image

00:03:33.150 --> 00:03:47.099
to drop on here. I'll do the Chrome logo.
So this image data was read using the File

00:03:47.099 --> 00:03:51.370
Reader API in JavaScript and you can tell,
you know, it's the Chrome logo. It's all pixilated.

00:03:51.370 --> 00:03:55.400
But the really cool thing about this is that
it's using Canvas and it's breaking this image

00:03:55.400 --> 00:04:00.050
pixel data up because you can read the pixel
level. And so, I can create a nice 3D cool

00:04:00.050 --> 00:04:08.709
aspect of the--of the Chrome logo as I traverse
around. Really kind of cool. He's also incorporated

00:04:08.709 --> 00:04:13.569
the device orientation API. So here's another
example where I move the computer and it turns.

00:04:13.569 --> 00:04:31.590
Pretty neat. All right. So, that's why Chrome,
why HTML5. Now, why the Web? Why would you

00:04:31.590 --> 00:04:35.511
want, if you're a desktop application software
developer, why would you want to switch to

00:04:35.511 --> 00:04:40.590
the Web? Well, I think there's really three
key reasons. The first one, there's--I mean,

00:04:40.590 --> 00:04:45.090
it's got--and maybe it's not obvious, I don't
know. But the zero installment, right, you

00:04:45.090 --> 00:04:48.520
can access your application--your users can
access your application from anywhere and

00:04:48.520 --> 00:04:53.820
anytime on the Web; there's zero install.
There's no friction in that. You know, they

00:04:53.820 --> 00:04:57.160
get the latest security updates and features
that you roll out. When you click "deploy,"

00:04:57.160 --> 00:05:03.190
they get the latest and greatest every time.
It's a seamless update. Cross-platform and

00:05:03.190 --> 00:05:08.530
device support; this one, you know, this one
might be obvious, too. But obviously HTML5

00:05:08.530 --> 00:05:13.370
is an emerging technology and it's still being
built up by the various browsers. But in the

00:05:13.370 --> 00:05:17.130
long term here, everyone's going to support
it. It's going to be used across multiple

00:05:17.130 --> 00:05:21.280
platforms, maybe for the term right ones and
run anywhere. Well, that's sort of the idea

00:05:21.280 --> 00:05:30.030
behind, you know, the Web. But it's really
not just Chrome and the desktop, right? There's

00:05:30.030 --> 00:05:34.920
different spaces. There's things like Android
and the smartphones that support HTML5 and

00:05:34.920 --> 00:05:39.320
these web technologies. There's also a new
product, Google TV, right, that launched which

00:05:39.320 --> 00:05:43.020
has Chrome built into it and a modern browser
that can run these cool technologies. So,

00:05:43.020 --> 00:05:47.919
you're running your apps not only on small
device but, say, a 40-inch screen. So it's

00:05:47.919 --> 00:05:52.510
a very different type of application environment
that you're used to. And, of course, those

00:05:52.510 --> 00:05:56.160
two products, in particular, share WebKit
as the rendering engine. So you know if it

00:05:56.160 --> 00:06:02.530
works, say, in Safari. It's probably going
to work in Chrome, Google TV, and Android

00:06:02.530 --> 00:06:10.979
as well. So, what does a Web app look like?
I mean, we've talked about sort of applications

00:06:10.979 --> 00:06:15.030
on the Web. I think you guys kind of know.
We use these everyday but here are sort of

00:06:15.030 --> 00:06:19.389
my ideas of what a good, solid Web application,
at least the kind that we're looking for for

00:06:19.389 --> 00:06:25.449
the Store, I have. So, one, it's goal-oriented.
It should be very task-driven. You go there

00:06:25.449 --> 00:06:29.460
to serve a purpose and you maybe do--maybe
it's a music player app and you're searching

00:06:29.460 --> 00:06:36.540
for music or you're playing music. It's very
task-driven and focused. The UI is tight.

00:06:36.540 --> 00:06:40.510
It's beautiful and immersive. So, again, I
think, you know, as engineers we often get

00:06:40.510 --> 00:06:45.970
in this niche where we're not the best designers,
I would say, but if you hire a designer, I

00:06:45.970 --> 00:06:50.490
guarantee you're going to have more traffic.
CSS3, you know, the graphical capabilities

00:06:50.490 --> 00:06:55.462
in the HTML5 now are amazing. And so, you
can really make a beautiful and immersive

00:06:55.462 --> 00:06:59.750
site that sort of takes up the whole browser
space or whole rendering space on whatever

00:06:59.750 --> 00:07:04.900
device you're on. You should sort of get lost
in the UI. It shouldn't feel--it should feel

00:07:04.900 --> 00:07:11.490
like a native app basically. And in that regard,
it should have a rich user experience. Lastly,

00:07:11.490 --> 00:07:16.330
it should be fast. I showed you the JavaScript
performance graphs earlier. But there's also

00:07:16.330 --> 00:07:20.390
APIs that we talked about in some prior sessions
that really make this stuff lightning fast;

00:07:20.390 --> 00:07:25.020
things like Offline, things like Web Workers
and Web Sockets for real time communication.

00:07:25.020 --> 00:07:29.100
So, it should feel native but it's on the
Web. So now let me show you what I'm talking

00:07:29.100 --> 00:07:39.590
about.

00:07:39.590 --> 00:07:43.370
This is a Web site. And I won't go to these
sites, but this is--this will sort of give

00:07:43.370 --> 00:07:47.740
you sort of a general idea of what some of
these--what a Web app, in my opinion, looks

00:07:47.740 --> 00:07:51.460
like. So here's an example from the Associated
Press. It--you go there for a reason. You

00:07:51.460 --> 00:07:54.890
go there to read news articles. It's fully
immersive. It's thinking about into things

00:07:54.890 --> 00:08:00.770
like rounding corners and all the cool stuff
you can do in CSS. Another great example of

00:08:00.770 --> 00:08:07.819
a music player, Twitter app. I mean, this
look and feel like native, say, iPad apps

00:08:07.819 --> 00:08:14.669
or iPhone apps but they're Web apps. This
one's really simple. I mentioned focus-driven

00:08:14.669 --> 00:08:20.430
and very goal-oriented. You know, everytimezone.com,
the whole purpose of the site is just to go

00:08:20.430 --> 00:08:24.110
there if you forgot what time zone you're
in and how it translates to other time zones.

00:08:24.110 --> 00:08:29.889
But it's using things like SVG and Canvas
to present a really cool user interface. So

00:08:29.889 --> 00:08:34.560
you get the idea, right? These are--these
are Web apps but they look native and they

00:08:34.560 --> 00:08:46.690
feel native. All right, I promised awesome
demos to get you guys excited so here's the

00:08:46.690 --> 00:08:58.860
second awesome demo. Actually, I need Firefox
for this. So, Firefox, there's a new API in

00:08:58.860 --> 00:09:04.020
HTML5, it's the audio data API. And what that
allows you to do is actually read data, say,

00:09:04.020 --> 00:09:09.339
from an MP3 file as you're going to see in
a second, and you can process that data and

00:09:09.339 --> 00:09:14.320
do anything with it you want. So you get the
raw byte information from the data stream.

00:09:14.320 --> 00:09:18.760
You can also create audio on the fly using
this API. So here's an example of using HTML5

00:09:18.760 --> 00:09:23.580
audio. This is the audio tag and this is what
it looks like rendered in Firefox and Canvas

00:09:23.580 --> 00:09:30.140
to play an MP3 file. But at the same time,
it's rendering the spectrum of that sound.

00:09:30.140 --> 00:09:34.620
It's doing this on the fly in JavaScript in
real time and it looks fantastic, right? I

00:09:34.620 --> 00:09:45.649
mean, there's no lag here whatsoever. I could
play it all day, but I won't. Here's just

00:09:45.649 --> 00:09:53.760
another quick example of the auto data API.
This is also in Canvas. Is my sound out? Let

00:09:53.760 --> 00:10:10.390
me do a refresh. My--is my audio on in the
computer? Maybe not. But what you would hear

00:10:10.390 --> 00:10:16.640
would be sound. As I press these different
dots it generates a sound based on the color

00:10:16.640 --> 00:10:22.260
pallet. So it's pretty cool, low to high based
on sort of the frequency of the image. Maybe

00:10:22.260 --> 00:10:33.731
the auto data API was on mute for that particular
demo. So that's sort of setting up the Chrome

00:10:33.731 --> 00:10:37.360
Web Store, all that, you know, billing an
app, what is an app, what does it look like,

00:10:37.360 --> 00:10:44.050
how does it feel, how does it act, what technologies
to use. So here--here's what the Chrome Web

00:10:44.050 --> 00:10:47.290
Store is. And before I sort of talk about
the Chrome Web Store, I want to talk about

00:10:47.290 --> 00:10:51.990
the current problem sort of on the Web today.
You have--I don't know about you guys but

00:10:51.990 --> 00:10:55.770
this is how my tab page looks every, you know,
afternoon after I've been at work for the

00:10:55.770 --> 00:11:01.580
whole day. I have a couple different new sites
open. I have maybe--you see three instances

00:11:01.580 --> 00:11:06.930
of Gmail open because I'm lost in my tabs
and maybe I've signed in to different accounts.

00:11:06.930 --> 00:11:10.370
You know, I have new sites, I have apps, I
have Facebook open, I have TechCrunch; all

00:11:10.370 --> 00:11:15.720
these different--these applications that we
use, Facebook, and the readers and everything.

00:11:15.720 --> 00:11:18.740
It's different, the Web is different, much
different than it used to be. These are not

00:11:18.740 --> 00:11:23.560
sites anymore, these are apps. People are
spending all their time in these. So the Browser

00:11:23.560 --> 00:11:27.240
UI really hasn't sort of kept up with this
pace of innovation and thinking along these

00:11:27.240 --> 00:11:33.529
same lines, it's not ideal for the scenario.
Same thing with permissions. So a lot of really

00:11:33.529 --> 00:11:39.870
neat HTML5 APIs like Geolocation, Storage,
Notifications API. There's some other ones

00:11:39.870 --> 00:11:44.029
in the pipeline, like device access will be
something that will require permission. So

00:11:44.029 --> 00:11:48.610
it requires user interaction in order to make
this stuff work. So what you end up with,

00:11:48.610 --> 00:11:53.570
if you have this really killer app that has
all these awesome APIs, you know, on page

00:11:53.570 --> 00:11:59.140
load, you get four or five permissions and
it's ugly. I don't know about you guys but

00:11:59.140 --> 00:12:04.560
that's not ideal user experience. So we can
do better. The last problem of the Chrome

00:12:04.560 --> 00:12:10.029
Web Store--I hope in saying to solve, is that
you have all these users out there. And if

00:12:10.029 --> 00:12:16.120
you do a search for Google.com today--I'm
putting a really cool animation. If you do

00:12:16.120 --> 00:12:21.709
a search for Google.com today, right, you--and
you find the best photo app or something,

00:12:21.709 --> 00:12:26.040
photo sharing app. You know, you're not necessarily
going to get the best photo sharing app out

00:12:26.040 --> 00:12:31.920
there, Google Search is not ideal for discovering
applications on the Web. So you have all these

00:12:31.920 --> 00:12:36.399
apps, you have all these developers, how do
you sort of connect them together for developers

00:12:36.399 --> 00:12:42.230
to reach a new market? And of course, that's
sort of where the Chrome Web Store comes in.

00:12:42.230 --> 00:12:47.550
So the Web Store is going to be about discoverability,
right? You should be able to find the killer

00:12:47.550 --> 00:12:52.820
apps you want, install them on a Chrome. Or
in general, it's any browsers that you access

00:12:52.820 --> 00:12:57.520
the store and you should be able to find those
applications. And the best ones will surface

00:12:57.520 --> 00:13:01.410
to the top based on user ratings and reviews.
So if your app is killer, if you're a small

00:13:01.410 --> 00:13:06.529
time developer, you know, your app can rise
to the top if you do a good job and users

00:13:06.529 --> 00:13:12.540
like what they're seeing. It's all about distribution,
so reaching those users. Auto-update for package

00:13:12.540 --> 00:13:17.399
apps. We'll talk about package apps in a bit
but it's the same auto-update. If any of you

00:13:17.399 --> 00:13:21.720
went to the Chrome extensions talk earlier,
Chrome extensions, once you upload them to

00:13:21.720 --> 00:13:26.610
the gallery and upload a new version they
are auto-updated for all users of your extension.

00:13:26.610 --> 00:13:30.470
So the same thing will be true for packaged
apps for the Chrome Web Store. If you, you

00:13:30.470 --> 00:13:35.300
know, hit deploy, if you hit publish to the
Web Store, your applications will get updated

00:13:35.300 --> 00:13:40.040
for all users of your app. So that's pretty
cool. Obviously, revenue for developers is

00:13:40.040 --> 00:13:46.589
huge. You know, you can make money off a Web
app. That's kind of a new idea, I would say.

00:13:46.589 --> 00:13:51.089
And themes and extensions will be part of
this too. So you'll be able to sell extensions,

00:13:51.089 --> 00:14:01.380
you will be able to sell themes as well. Themes
meaning, themes for Google Chrome.

00:14:01.380 --> 00:14:05.720
So the whole process of publishing app on
the Web Store, you're in complete control.

00:14:05.720 --> 00:14:11.029
So we don't do, you know, app approval or
anything like that. You pay a one time registration

00:14:11.029 --> 00:14:15.620
fee and you're all set, you can go ahead and
publish. Unless your app does something malicious

00:14:15.620 --> 00:14:19.600
or it's flagged by users, you know, we won't
interact, we won't intervene at all. So you

00:14:19.600 --> 00:14:24.120
create the app, you upload it to the store
and you provide the product information. There's

00:14:24.120 --> 00:14:28.149
things like screenshots and videos, and then
you get published, and you reach users and

00:14:28.149 --> 00:14:35.110
sell your application. So it's very frictionless.
We have a payment system set-up with a licensing

00:14:35.110 --> 00:14:39.260
API that you can talk to. Who's installed
my app, you know, to make sure they're valid

00:14:39.260 --> 00:14:45.829
users for the hosted apps at least. It uses
OpenID and OAuth, so two technologies that

00:14:45.829 --> 00:14:50.931
are open standards using RESTful API. And
we also provide things like analytics in the

00:14:50.931 --> 00:14:55.620
store. So, you know, how many times did this
user or how many times did this user--people

00:14:55.620 --> 00:15:03.290
have installed this application, uninstalled
it, viewed the listing page, and so on and

00:15:03.290 --> 00:15:07.290
so forth. So, there's this been this asterisk
here on all the payment stuff for a couple

00:15:07.290 --> 00:15:12.980
slides now, that's because when we do launch
the store later in the year, you have to have

00:15:12.980 --> 00:15:18.370
a U.S. bank account in order to publish on
a store. So, until it's--this sort of officially

00:15:18.370 --> 00:15:23.990
launched in Brazil, you won't have the ability
to publish an application. But you can prepare

00:15:23.990 --> 00:15:28.149
yourself for it. And I do recommend you do
that. We'll talk about how. I just want to

00:15:28.149 --> 00:15:32.399
mention, when we do launch, they'll be, you
know, free. You can have a free application.

00:15:32.399 --> 00:15:37.560
You can pay to install so a user can choose
to pay a one time fee to install your application.

00:15:37.560 --> 00:15:42.570
There'll be subscriptions both monthly and
annually. There'll be a freemium model so

00:15:42.570 --> 00:15:47.380
you can upload a free version of apps so the
users can have a trial version. If they like

00:15:47.380 --> 00:15:51.850
your app they can choose to install the premium
version. And then you can choose your own

00:15:51.850 --> 00:15:56.459
adventure. So, you're not, again, locked in
to any technology or any payment solution.

00:15:56.459 --> 00:16:00.050
You can use your own. You can even sell your
app on your own, you know, server if you wanted

00:16:00.050 --> 00:16:04.339
to, there's no restrictions. But the, again,
the benefit of the store here is that, for

00:16:04.339 --> 00:16:10.920
the discoverability and ease of integration.
So what can you do to prepare if you can't

00:16:10.920 --> 00:16:20.820
sell anything. Before I do that, I want to
show you another cool example because they're

00:16:20.820 --> 00:16:31.600
awesome. I'll make sure I have sound. Yes.
Okay, so this is also using the audio data

00:16:31.600 --> 00:16:35.990
API. This is our--basically what they've done
is, is create a sound sampler, and I'll just

00:16:35.990 --> 00:16:44.390
play it for you right now using a--what is
it, the D key or S key. Let me try to refresh.

00:16:44.390 --> 00:17:02.430
Can you guys hear that? Could you turn that
up a little bit? So this is reading an MP3

00:17:02.430 --> 00:17:11.709
file and then producing a spectrum. But what
I can do using Audio Data API I ran, I can

00:17:11.709 --> 00:17:19.209
sample different portions. I can also read
this thing backwards if I wanted to and really

00:17:19.209 --> 00:17:22.879
get the full effect there. But just--certainly
the capabilities of things you can do with

00:17:22.879 --> 00:17:31.989
audio and video and multimedia HTML5, it's
pretty amazing. Okay, I'm done with the audio,

00:17:31.989 --> 00:17:46.711
thank you. All right, so I've mentioned installation.
How do you install a Web application? In Chrome

00:17:46.711 --> 00:17:52.150
at least, if users visit the store and see
your listing and want to, you know, purchase

00:17:52.150 --> 00:17:57.229
your user free application, they can install
their app--your application inside of Chrome.

00:17:57.229 --> 00:18:03.039
So this is an image of what the new tab page
will probably or might look like and this

00:18:03.039 --> 00:18:07.340
is available in the developer channel of Chrome.
So, you can install applications. And basically

00:18:07.340 --> 00:18:12.820
what it is it has this big icon, a launch
icon to your app so you just can access, you

00:18:12.820 --> 00:18:19.039
know, their favorite applications really quickly.
And so there will also be a link to the store

00:18:19.039 --> 00:18:24.260
where they can find and discover new ones.
So I mentioned the launcher. This is, you

00:18:24.260 --> 00:18:28.090
know, an example of what an icon would look
like and the options that are available to

00:18:28.090 --> 00:18:33.269
you. Users have the full choice to sort of
open the application regular tab in Google

00:18:33.269 --> 00:18:41.409
Chrome. Excuse me. It can open as a pin tab
so they can actually sort of move the app

00:18:41.409 --> 00:18:44.760
over to side by itself so it's away from the
rest of the tabs sort of to minimize that

00:18:44.760 --> 00:18:48.970
clutter that you saw. Or they can choose to
run full screen which is kind of cool for

00:18:48.970 --> 00:18:54.210
things like games, or hopefully not uninstall
your apps. So that's why that one's pushed

00:18:54.210 --> 00:18:59.690
down so far. Unless there's--there's also
an option to have sort of a pop-up panel UI.

00:18:59.690 --> 00:19:03.860
So if you have something, maybe like a count--a
calculator widget or a clock, you can run

00:19:03.860 --> 00:19:08.429
that in a little panel pop-up. The tab and
the panel are something you can programmatically

00:19:08.429 --> 00:19:12.669
choose. The pin tab and full screen are just
something the user has to manually select

00:19:12.669 --> 00:19:19.081
from this list. But what this allows you to
do--so, it's got the convenient new tab page,

00:19:19.081 --> 00:19:23.529
but it simplifies the permissions model. So
if you have an app that uses Geolocation,

00:19:23.529 --> 00:19:28.389
Notifications and Storage, it's basically
just, you know, do you trust this application,

00:19:28.389 --> 00:19:32.169
click to install and that's it. They don't
have to grant access to all these different

00:19:32.169 --> 00:19:36.149
APIs separately. It's sort of at the trust
level of the store and installing application

00:19:36.149 --> 00:19:42.679
and you hereby say that you trust the application
to do whatever it needs to do. So let's talk

00:19:42.679 --> 00:19:47.489
about hosted apps. Hosted apps are probably
going to be, in my opinion, they're super

00:19:47.489 --> 00:19:52.309
easy to create for the store. If you have
an existing Web site, it's literally a matter

00:19:52.309 --> 00:19:57.440
of wrapping that existing Web site in a manifest
file. Very similar to extensions, it's actually

00:19:57.440 --> 00:20:01.679
the same model. So if you have a Web site,
you add some metadata to it and boom you're

00:20:01.679 --> 00:20:05.879
done. You upload to the store and you've already
created the app, right, there's nothing else

00:20:05.879 --> 00:20:11.950
to do. But what it does is you have the--all
the permissions. So this is what, you know,

00:20:11.950 --> 00:20:16.799
a pop-up would look like. This app, Google
Maps, running in the Web Store would require

00:20:16.799 --> 00:20:21.289
your physical location for the Geolocation
and storage for offline access. And so, you

00:20:21.289 --> 00:20:26.929
click to install. There's three permissions
right now, I mentioned them before. As new

00:20:26.929 --> 00:20:32.820
APIs become available they'll be added to
the list as well. So how do you--if you have

00:20:32.820 --> 00:20:37.119
a Web app that exists on the Web today, how
do you detect that the user has installed

00:20:37.119 --> 00:20:41.039
this application? How do you know they're
launching it from Chrome instead of just visiting,

00:20:41.039 --> 00:20:46.729
you know, the app from a URL or a bookmark?
And what we'll have available for you is--it's

00:20:46.729 --> 00:20:52.440
not really an API, but it's a property. So,
Window Chrome app is installed, you can check

00:20:52.440 --> 00:20:57.080
that. If that property exists on the Chrome
app object then you know the user's installed

00:20:57.080 --> 00:21:02.419
the app. And then, they paid money if they
purchased it or if it's free. Otherwise, you

00:21:02.419 --> 00:21:06.019
know, they're just visiting it as a normal
user without install. So you can display maybe

00:21:06.019 --> 00:21:12.019
a different UI, you can display, "Would you
like to purchase this app?" or something.

00:21:12.019 --> 00:21:17.979
So, let me just demo this and show you what
this looks like. I have taken the liberty

00:21:17.979 --> 00:21:23.379
and spent countless hours in creating a really
nice demo application. It runs on my local

00:21:23.379 --> 00:21:27.760
machine right now but obviously, this could
be any domain, any Web site. On the Web, we

00:21:27.760 --> 00:21:31.470
could wrap Google.com if we want it to. We
could wrap Google Maps if we wanted to in

00:21:31.470 --> 00:21:38.019
a hosted app. But I will show you what this
looks like in all of its glory. So the first

00:21:38.019 --> 00:21:43.169
thing you'll notice is that this is just a,
you know, helloworld.html. And this is not

00:21:43.169 --> 00:21:47.700
really a Web app. It's just a static page.
But it happens to use a lot of cool HTML5

00:21:47.700 --> 00:21:54.359
APIs. This is text. This is using the fonts
API and all that good CSS stuff. But you'll

00:21:54.359 --> 00:21:58.029
notice that the first thing when the page
loads, it wants to use Geolocation. So I get

00:21:58.029 --> 00:22:03.239
the browser pop-up, right? This app wants
physical access to your location. So I'll

00:22:03.239 --> 00:22:07.179
say, "Yes," because I do trust this app, I
built it. And for some reason, of course,

00:22:07.179 --> 00:22:13.350
it's putting us in the water. That's really
interesting. So, it's probably because of

00:22:13.350 --> 00:22:20.499
the Ethernet. Oh, fantastic. Well, we got
close to Brazil, okay. Let me try that again.

00:22:20.499 --> 00:22:26.740
I want to see. The wireless is probably more
accurate but I assure you Geolocation does

00:22:26.740 --> 00:22:32.070
work. So, let's say that worked. Now it's
got my location. I've granted it permission.

00:22:32.070 --> 00:22:38.450
But this app, you know, it's, obviously, it's
not ideal but it also wants to send notifications.

00:22:38.450 --> 00:22:43.211
So when I hit "send notification," right,
I get another dialogue. And you get the point,

00:22:43.211 --> 00:22:47.889
right? This is kind of annoying. In order
to really experience this app I have to go

00:22:47.889 --> 00:22:53.609
through all these hurdles. So, now that I've
obviously done that I can send notifications.

00:22:53.609 --> 00:22:59.100
It's an HTML5 notification. This last one
is using the FileWriter API, which is a brand

00:22:59.100 --> 00:23:03.929
new API that recently landed in Chrome, in
Chrome dev channel. So you can actually write

00:23:03.929 --> 00:23:08.830
files and write directories and read directories
and files using Javascript. And the reason

00:23:08.830 --> 00:23:13.220
I'm getting code exceeded error here is because
I don't have the proper permission set. Right

00:23:13.220 --> 00:23:18.849
now in Chrome, at least for the foreseeable
near future, you have to be an application

00:23:18.849 --> 00:23:23.590
and request the permission in your manifest
file in order to write and read files. I'll

00:23:23.590 --> 00:23:38.529
show you the code for that just so you believe
me. So I'm not out putting random text.

00:23:38.529 --> 00:23:41.989
So this is what the file looks. This is what
an API looks like. There's a new sort of method

00:23:41.989 --> 00:23:47.389
on the window object. So I can request the
file system, I want temporary file access.

00:23:47.389 --> 00:23:53.669
I'll give it a size and then I, you know,
give success and error callbacks. The success

00:23:53.669 --> 00:23:58.369
callback will take the file system object
that's passed to that callback and it will

00:23:58.369 --> 00:24:02.969
basically do a get file. If it finds that
file, it will try--excuse me, if it finds

00:24:02.969 --> 00:24:06.820
that file, it will try to read it, otherwise
since I have this create "true," if it doesn't

00:24:06.820 --> 00:24:11.249
exist I'll try to create it. In this case,
it doesn't exist on my local storage system

00:24:11.249 --> 00:24:16.309
so I get that code exceeded error. So, my
error callback is handed--or is handled instead

00:24:16.309 --> 00:24:23.149
of the success callback. And you can do other
things like read directories and whatnot,

00:24:23.149 --> 00:24:30.789
but that is not the point. Last thing I wanted
to show is that I am making that check for--if

00:24:30.789 --> 00:24:35.049
this app is installed using the easy install
parameter. So you can sell the message here.

00:24:35.049 --> 00:24:40.460
You know, this launch, this was normally--this
app was launched via bookmarker or link so

00:24:40.460 --> 00:24:46.779
I just navigated to this page. Okay, so that's
a normal web app, I've already built that.

00:24:46.779 --> 00:24:52.019
Let's see what this looks like as installable
hosted application. So the first thing you're

00:24:52.019 --> 00:24:57.090
going to do is create a manifest.json file.
So the exact same process as creating an extension.

00:24:57.090 --> 00:25:01.690
You give a name, you know, description of
your app, you have logos. There's various

00:25:01.690 --> 00:25:05.150
logos you can provide for the store, there's
one for the launcher icon, there's one for

00:25:05.150 --> 00:25:09.610
fab icon, there's one for, you know, the listing
in the store itself. So you have a lot of

00:25:09.610 --> 00:25:15.340
flexibility and options there. But the new
property for the store itself is this app

00:25:15.340 --> 00:25:20.590
object, this app JSON object. And the first
property in there is the launch URL. The launch

00:25:20.590 --> 00:25:26.950
URL is the URL of your application. So if
I was to just package this app, this app that

00:25:26.950 --> 00:25:30.269
I created, you know, in 10 minutes for the
Web Store, this is all I would need to do.

00:25:30.269 --> 00:25:35.379
I would just need to write, you know, these
10 lines of JSON, package that up, upload

00:25:35.379 --> 00:25:42.889
it to the store and boom, I'm done. But if
users are using Chrome they can obviously

00:25:42.889 --> 00:25:48.599
have a better experience. So the first thing
optionally that we can do, I mentioned that

00:25:48.599 --> 00:25:52.149
you can launch in different modes. You can
launch as panel app, you can give it a size

00:25:52.149 --> 00:25:57.669
and a width. By default, it's tabs so we'll
just leave that out. But I mentioned permission.

00:25:57.669 --> 00:26:02.009
So again, just like the extensions there's
different permission bits that you can set.

00:26:02.009 --> 00:26:07.200
My app is going to have Geolocation unlimited
storage for FileWriter and also notifications.

00:26:07.200 --> 00:26:13.509
So I can set those inside the manifest file
so I can say this app will need these permissions.

00:26:13.509 --> 00:26:19.789
And those permissions will apply to any URLs
that I list in the URLs array under the app

00:26:19.789 --> 00:26:26.419
object. So any URLs basically get the white-listing
of these permissions. If you're not within

00:26:26.419 --> 00:26:36.320
this list then you don't have unlimited storage
notifications for Geolocation. So to show

00:26:36.320 --> 00:26:45.570
you this in action, I will close this. I could
keep it open, but I'll close it. Using the

00:26:45.570 --> 00:26:51.809
Chrome extensions API, I will navigate to
my app. So I'm just basically uploading or

00:26:51.809 --> 00:26:56.159
loading up an unpackaged application. It's
got all my files in there. You know, there's

00:26:56.159 --> 00:27:00.929
a helloworld.html, there's a HTML file for
the notification and there's the manifest

00:27:00.929 --> 00:27:07.759
file. I'll click select and actually, it's
already here so it didn't do anything. But

00:27:07.759 --> 00:27:15.330
I'll enable that application. And so, the
first thing you notice is my first app is

00:27:15.330 --> 00:27:20.420
available now in my new tab page. So I can
choose to launch this in different modes,

00:27:20.420 --> 00:27:30.619
or I can just see what this looks like when
I launch it. So, you notice a couple of things.

00:27:30.619 --> 00:27:34.650
Just to prove that this does work, I will
refresh this page. I just got rid of the Geolocation

00:27:34.650 --> 00:27:39.159
permission. I said I don't want to access
the Geolocation anymore, but since I'm a Web

00:27:39.159 --> 00:27:43.239
app now, since I'm an install-hosted app,
it's automatically got the Geolocation. I

00:27:43.239 --> 00:27:51.830
can send notifications without a permission
setting to pop-up. There it is. And you see

00:27:51.830 --> 00:27:54.820
a new message here. You see log file created
so the file system API is actually working

00:27:54.820 --> 00:27:59.509
now. We can create files because we have that
permission set. And obviously, at the bottom

00:27:59.509 --> 00:28:03.849
there, you know, we're making the check to
see if we're installed via the app store using

00:28:03.849 --> 00:28:08.809
the Chrome Web Store and indeed, we are. So,
a better user experience but very trivial.

00:28:08.809 --> 00:28:13.489
I added three permissions to this web app
to make it a better experience for all users.

00:28:13.489 --> 00:28:23.690
It's just fantastic.
So that was hosted apps. But there's another

00:28:23.690 --> 00:28:29.500
type of app called a packaged app. And packaged
apps are very similar to Chrome extensions.

00:28:29.500 --> 00:28:35.400
In fact, they basically are glorified Chrome
extensions. So you have a normal Web site

00:28:35.400 --> 00:28:39.489
but you add some extra metadata and you wrap
it up in a CRX file, which is basically a

00:28:39.489 --> 00:28:45.359
zip file. It supports auto-updating so, again,
when you upload a new version in the store,

00:28:45.359 --> 00:28:50.909
all your users are auto-updated. So, when
would you use this over hosted web application?

00:28:50.909 --> 00:28:53.960
Well, there's a couple of reasons. So if you
don't require a server for one. If you just

00:28:53.960 --> 00:28:59.249
want to package up a Flash game for instance,
a SWF file, you can absolutely do that. And

00:28:59.249 --> 00:29:01.990
you don't want to--or you don't have a server
component that you want to talk to or host

00:29:01.990 --> 00:29:06.059
that application anywhere. You can just choose
it, choose to upload it to the Web Store and

00:29:06.059 --> 00:29:10.919
boom, it's there, and then people can download
it from there. There's tighter integration

00:29:10.919 --> 00:29:13.740
with Chrome so we'll talk about some of the
APIs that are available to the packaged apps.

00:29:13.740 --> 00:29:17.429
And they have elevated permissions because
they're packaged. They're installed in Chrome

00:29:17.429 --> 00:29:24.299
whereas a Web app doesn't have that same liberty.
And lastly, if you don't care about supporting

00:29:24.299 --> 00:29:29.029
other browsers, I mean, that's fine. You know,
if you want to just start at Chrome, that's

00:29:29.029 --> 00:29:34.980
totally cool. It's just like an extension.
It will only be run in Chrome so you don't

00:29:34.980 --> 00:29:38.589
have to worry about sort of developing for
all these different browsers. But there's

00:29:38.589 --> 00:29:42.359
more things you can do with in a packaged
app. So you have full access to all the extensions

00:29:42.359 --> 00:29:46.769
APIs, except browser action and page action.
How many people went to the extensions talk

00:29:46.769 --> 00:29:54.719
by the way? A few people? Okay. So page action
and browser actions are the little icons that

00:29:54.719 --> 00:29:59.359
appear when you install a Chrome extensions
in the top right corner of the browser that

00:29:59.359 --> 00:30:05.369
do interaction. Again, you can do things like
content scripts and background pages. Content

00:30:05.369 --> 00:30:10.719
scripts inject the Javascript or CSS onto
a page based on a set of rules that you specify.

00:30:10.719 --> 00:30:15.349
Background pages are great for things like
polling. You can do cross-domain XHR request,

00:30:15.349 --> 00:30:20.450
which is pretty cool, in background pages.
Obviously, that's not something a normal web

00:30:20.450 --> 00:30:24.360
application can do because of the restrictions.
But there's really much, much more. So you

00:30:24.360 --> 00:30:29.029
can write a packaged, you know, Web app for
the Chrome Web Store that does things with

00:30:29.029 --> 00:30:33.859
context menus. So you can modify the right
click menu and add your options there. Tab

00:30:33.859 --> 00:30:38.089
and window manipulation, Omnibar, you can
tie into the Chrome's URL bar with your own

00:30:38.089 --> 00:30:42.779
API, it provides search results or do what
ever you want there. History, bookmarks and

00:30:42.779 --> 00:30:49.129
cookies, these are thing that, at least bookmarks
and history, that, you know, normal Web app

00:30:49.129 --> 00:30:59.110
can't do but a Chrome extension has a permission.
So that's sort of an overview of the Web Store.

00:30:59.110 --> 00:31:04.059
And I've mentioned, you know, you heard a
lot about--you heard a lot of preaching about

00:31:04.059 --> 00:31:11.320
HTML5 today. And a lot of people think it's
not ready, there's been some posts recently.

00:31:11.320 --> 00:31:16.479
I would say it is ready and it's definitely
ready to experiment with at the very least.

00:31:16.479 --> 00:31:22.830
Here's a picture of 2008, the browser support
in 2008, for various APIs. So you have Geolocation,

00:31:22.830 --> 00:31:30.429
forms, you know, Web Workers. It's very sparse.
So this is two years ago. One year ago, we're

00:31:30.429 --> 00:31:35.269
getting a lot better. So, you know, Chrome2
comes along. It's got most support here. Firefox

00:31:35.269 --> 00:31:40.109
is catching up, IE is still kind of lagging
behind. But by 2010, you just can see this

00:31:40.109 --> 00:31:44.441
graph really starting to fill out, right?
So most WebKit browsers have pretty much everything

00:31:44.441 --> 00:31:49.909
implemented. You know, Firefox4 is there.
I guess you did, wow, cool. So you edited

00:31:49.909 --> 00:31:54.989
IE9. So IE9 is doing a fantastic job with
a lot of these APIs, video, audio for example,

00:31:54.989 --> 00:32:00.200
SVG. So you can imagine in a year, you know,
where this is going to be. It's just absolutely

00:32:00.200 --> 00:32:16.690
ridiculous how fast the innovation is happening.
Time for an awesome demo. So you saw--you've

00:32:16.690 --> 00:32:21.840
seen the device orientation API a lot today.
Here is another example of, you know, using

00:32:21.840 --> 00:32:27.149
an interactive game. So I can speed this up
if I tilt it forward. Anyway, I have three

00:32:27.149 --> 00:32:33.460
lives so hopefully it would be fast because
this is the best I've ever done, promise.

00:32:33.460 --> 00:32:42.539
I'll try something tricky. [MAKES NOISE] But
now this is--now that this stuff is all native

00:32:42.539 --> 00:32:47.539
to the browser, right, you really have different
interactions with applications then ever before.

00:32:47.539 --> 00:33:02.769
I will just kill myself, no? Well, you get
the point. There we go. Seven twenty-seven,

00:33:02.769 --> 00:33:11.479
it's not too bad. So here is the current browser
share as of September 2010. And just soaked

00:33:11.479 --> 00:33:18.129
this in for a little bit. This is sort of
the state right now. You know, it's not September

00:33:18.129 --> 00:33:23.179
anymore so the numbers have change a little
bit. But in general, you get the idea. Modern

00:33:23.179 --> 00:33:28.039
browsers are taking up, you know, a good chunk
of that. But for the most part, people running

00:33:28.039 --> 00:33:33.259
IE6, 7 and 8. Which is fine but the problem
is you can't leverage these cool APIs and

00:33:33.259 --> 00:33:39.039
target those browsers, it's just impossible.
So what you do as a developer is you have

00:33:39.039 --> 00:33:44.649
to hack around things, right? This is the
Acid3 test rendered by Chrome. And here's

00:33:44.649 --> 00:33:50.419
what it looks like rendered by IE6, I believe.
So again, between thes two different versions,

00:33:50.419 --> 00:33:54.580
say this is the layout and color scheme of
your site, you know, you have all cool CSS

00:33:54.580 --> 00:33:59.729
tricks and then--but other users are seeing
this, that's not ideal, they get the score

00:33:59.729 --> 00:34:05.739
of 20 out of 100. So products like Google
Wave for instance, just as an example, did

00:34:05.739 --> 00:34:10.170
something, you know, they choose not to support
IE6 anymore because the development cost is

00:34:10.170 --> 00:34:15.649
way too much. You end up having to have JavaScript
hacks and, you know, spending way more time

00:34:15.649 --> 00:34:23.840
than you need to working around these issues.
So Wave chose to do is have a prompt. So if

00:34:23.840 --> 00:34:27.309
you're in one of these--if you're in Internet
Explorer let's just not support you at all.

00:34:27.309 --> 00:34:32.799
We have too many, you know, awesome capabilities
that you can access. So go ahead and install

00:34:32.799 --> 00:34:38.339
Google Chrome Frame and Google Chrome Frame
is a plug-in. If--we probably talked about

00:34:38.339 --> 00:34:42.419
this way too much today, but that's because
a lot of people don't know about it, unfortunately.

00:34:42.419 --> 00:34:47.230
Google Chrome Frame is a plug-in that users
install for IE. And basically what it does

00:34:47.230 --> 00:34:52.630
is if you imagine the browser of IE6, for
example, I think it's not IE6 but this is

00:34:52.630 --> 00:34:59.480
the image I found, the user installs the plug-in
and the entire rendering portion. So anything

00:34:59.480 --> 00:35:04.099
in the tab, the actual Web page itself, is
all rendered with a Chrome rendering engine.

00:35:04.099 --> 00:35:08.869
So you get things like CSS3, you get things
like Geo location. All the stuff that's not

00:35:08.869 --> 00:35:13.540
in that older browser, you get for free. You
also get speed and performance. You get the

00:35:13.540 --> 00:35:19.359
security and sandbox of Google Chrome, which
is one of the best in my opinions. And it's

00:35:19.359 --> 00:35:23.079
auto-updated along with Chrome, so they get
the latest and greatest when the plug-in,

00:35:23.079 --> 00:35:27.329
the new plug in is pushed. And that includes
things like the--integrated Flash in the PDF

00:35:27.329 --> 00:35:31.320
or inside of Chrome. So also open source so
you can go check out the code if you want.

00:35:31.320 --> 00:35:40.029
As a developer, it really literally couldn't
be any easier to put this thing with inside

00:35:40.029 --> 00:35:44.250
of your app, with inside of your site. So
if you are writing a hosted app and you want

00:35:44.250 --> 00:35:50.569
other users, not just Chrome users, you know,
IE6 users for example, to access these APIs

00:35:50.569 --> 00:35:55.529
in your Web app to its full potential, all
you have to do is include a meta tag on your

00:35:55.529 --> 00:36:01.369
HTML page using the chrome=1 for the content.
Or if you can't, you know, add that to every

00:36:01.369 --> 00:36:06.589
page you can send a header with the same value
there. Super simple. The only problem with

00:36:06.589 --> 00:36:11.069
this is that the user has to have the plug-in
installed. So if they don't then there's no

00:36:11.069 --> 00:36:19.990
benefit there. But there's zero cost you as
a developer. So that was sort of a high level

00:36:19.990 --> 00:36:24.950
overview of the Chrome Web Store. I just want
to mention that, you know, we talked--I showed

00:36:24.950 --> 00:36:28.562
you an application, sort of how do you package
it for a hosted app, talked a little bit about

00:36:28.562 --> 00:36:33.210
package apps. But the building an app for
the store is your choice, right? There's no

00:36:33.210 --> 00:36:37.490
limitation on technology whatsoever. You can
choose one from the Web stack, you know, the

00:36:37.490 --> 00:36:41.619
open Web stack platform. But you can write
a Flash game. You can use a Silverlight, the

00:36:41.619 --> 00:36:45.480
plug in. You can do things like native client,
which is running C++ in the browser. That's

00:36:45.480 --> 00:36:49.930
a Chrome-specific thing but again, it's your
choice of technology. So anything you want,

00:36:49.930 --> 00:36:58.020
a LAMP stack, you know, choose your own adventure
if you will. So I think the takeaways here

00:36:58.020 --> 00:37:02.620
are that the Web is innovating, right? We're
seeing things like you saw it all today, HTML,

00:37:02.620 --> 00:37:07.560
JS and hardware acceleration. There's literally
a parity with the desktop now. And I guarantee

00:37:07.560 --> 00:37:11.360
you within six months to a year, you're going
to have things like device integration. So

00:37:11.360 --> 00:37:16.900
you can access the microphone, and USB drives,
and all that great stuff, camera, for instance,

00:37:16.900 --> 00:37:25.610
using the webcam. So don't wait until 2022
that--that's I think what the W3C said when

00:37:25.610 --> 00:37:30.339
the HTML5 will finally be ready. I assure
you it's out there and living well. And I

00:37:30.339 --> 00:37:34.299
think with the pace of innovation that's happening
right now were really seeing that in action.

00:37:34.299 --> 00:37:38.450
Features are first class citizens. You know,
things like video and audio we take for granted

00:37:38.450 --> 00:37:41.640
with Flash and in other plug-ins. But now
we've the ability to do these and manipulate

00:37:41.640 --> 00:37:46.360
them using JavaScript inside of the--in the
native platform. The Chrome Web Store is a

00:37:46.360 --> 00:37:50.589
great way to monetize your applications, your
existing application. Or create entirely a

00:37:50.589 --> 00:37:54.911
new one, right? And if users are visiting
the Web Store in Chrome and they choose to

00:37:54.911 --> 00:37:58.551
install the app then they have a little bit
better experiences if you, you know, set up

00:37:58.551 --> 00:38:02.430
the manifest file correctly. And you can finally
monetize an application on the Web, which

00:38:02.430 --> 00:38:10.369
is pretty exciting. So your HTML5 investment
will be rewarded. A couple of essential links.

00:38:10.369 --> 00:38:15.690
You know, here's the documentation links for
Web Store, for Web apps in relation to Web

00:38:15.690 --> 00:38:20.799
Store extensions. But do stay in touch. You
can follow us in Twitter. Our developer operations

00:38:20.799 --> 00:38:25.980
team is @ChromiumDev. We tweet a bunch of
great stuff there. You can ask questions in

00:38:25.980 --> 00:38:30.910
both of these forms, one is for--dedicated
to HTML5 questions and one is dedicated for

00:38:30.910 --> 00:38:36.500
Chromium apps, Chrome apps. But also file
bugs. If you find issues, that's the only

00:38:36.500 --> 00:38:40.299
way we know about this stuff. And you, as
developers, you know, really, we know we listen

00:38:40.299 --> 00:38:47.930
to you guys. Lastly, here's the feedback link,
mgddbr, if you'd like to give me feedback.

00:38:47.930 --> 00:38:50.220
So I'll take Q&amp;A now and I thank you for your
time.

