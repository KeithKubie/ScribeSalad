WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.730
[MUSIC PLAYING]

00:00:05.730 --> 00:00:08.560
OWEN CAMPBELL-MOORE: Hi, my
name is Owen Campbell-Moore.

00:00:08.560 --> 00:00:10.960
I'm a product manager
on the Chrome team,

00:00:10.960 --> 00:00:13.650
and I work to make sure
that the web is the best

00:00:13.650 --> 00:00:18.330
platform that it can possibly be
for both developers and users.

00:00:18.330 --> 00:00:19.740
And today I'm
going to be talking

00:00:19.740 --> 00:00:23.910
about creating user experiences
that just feel right

00:00:23.910 --> 00:00:26.890
when your users are using
them on their mobile devices,

00:00:26.890 --> 00:00:28.950
and doing that with
Progressive Web Apps.

00:00:31.870 --> 00:00:34.570
And so before I jump
in to talk about UX,

00:00:34.570 --> 00:00:36.280
I want to take a moment
to talk about why

00:00:36.280 --> 00:00:38.860
I think the web is such an
exciting and fascinating

00:00:38.860 --> 00:00:42.460
platform to build
for as developers.

00:00:42.460 --> 00:00:46.180
So you will have all heard
yesterday in Sundar's keynote

00:00:46.180 --> 00:00:49.360
how Chrome now has
over two billion

00:00:49.360 --> 00:00:52.930
monthly active users, which
is just a huge number.

00:00:52.930 --> 00:00:55.780
And that's just Chrome alone.

00:00:55.780 --> 00:00:58.870
When we look at the whole
spectrum of the web,

00:00:58.870 --> 00:01:01.750
we see that there are
over five billion devices

00:01:01.750 --> 00:01:03.220
running web browsers.

00:01:03.220 --> 00:01:05.710
And so this means that if
you're building for the web,

00:01:05.710 --> 00:01:09.070
there's this incredible
large potential addressable

00:01:09.070 --> 00:01:12.370
audience that you have, this
amazing potential reach.

00:01:12.370 --> 00:01:14.830
I think that's a really
fascinating and unique property

00:01:14.830 --> 00:01:15.640
that the web has.

00:01:18.200 --> 00:01:20.870
And there's been a huge
rate of development

00:01:20.870 --> 00:01:22.400
in the last few years.

00:01:22.400 --> 00:01:24.710
Performance has
gotten so much better.

00:01:24.710 --> 00:01:27.380
In the last year alone,
according to the Speedometer

00:01:27.380 --> 00:01:29.720
benchmark, JavaScript
performance

00:01:29.720 --> 00:01:34.210
on Chrome for Android
is now 35% faster.

00:01:34.210 --> 00:01:36.570
And so I think that these
improvements in performance

00:01:36.570 --> 00:01:38.570
mean that it's possible
to do a lot more than it

00:01:38.570 --> 00:01:42.070
was possible to do previously.

00:01:42.070 --> 00:01:43.870
And another thing that
I love about the web

00:01:43.870 --> 00:01:46.190
is how it's fundamentally open.

00:01:46.190 --> 00:01:49.030
There's no one company
that's in control and decides

00:01:49.030 --> 00:01:50.320
what happens on the web.

00:01:50.320 --> 00:01:51.910
It's really thousands
of developers

00:01:51.910 --> 00:01:55.420
across lots of different
companies and web browsers

00:01:55.420 --> 00:01:59.650
and open standards organizations
that are all working together

00:01:59.650 --> 00:02:01.570
to push the web forwards.

00:02:01.570 --> 00:02:05.620
And it's really been designed
over the last 20 years

00:02:05.620 --> 00:02:08.050
to have this amazing
property where users should

00:02:08.050 --> 00:02:10.389
be able to click one
link and immediately

00:02:10.389 --> 00:02:13.450
have that content streamed
to them so they can access it

00:02:13.450 --> 00:02:14.650
instantly.

00:02:14.650 --> 00:02:18.520
No need to kind of bundle up
10, 20 megabytes of resources,

00:02:18.520 --> 00:02:21.040
upload them to a
store, and then have

00:02:21.040 --> 00:02:23.050
users go through some
kind of install process

00:02:23.050 --> 00:02:26.410
to download and get
that onto their device.

00:02:26.410 --> 00:02:29.270
And that's a really fascinating
property for the platform,

00:02:29.270 --> 00:02:32.590
in part because it means that
your users can potentially

00:02:32.590 --> 00:02:34.450
just tap a link and
be in your experience

00:02:34.450 --> 00:02:37.990
immediately-- which means you
can reach a lot more users.

00:02:37.990 --> 00:02:40.240
And from a purely
business perspective,

00:02:40.240 --> 00:02:42.130
it means that customer
acquisition costs

00:02:42.130 --> 00:02:45.210
are much lower.

00:02:45.210 --> 00:02:49.010
So in the last few years, we've
seen this huge shift to mobile.

00:02:49.010 --> 00:02:51.960
And in particular, this
has been interesting

00:02:51.960 --> 00:02:54.840
because Native has really
been great on mobile.

00:02:54.840 --> 00:02:57.150
It's taken advantage of
the unique capabilities

00:02:57.150 --> 00:02:58.680
of those devices.

00:02:58.680 --> 00:03:00.750
And on the web, you
had this great reach.

00:03:00.750 --> 00:03:03.075
Users could tap a link
and try your experience,

00:03:03.075 --> 00:03:04.700
but there was no way
for that user that

00:03:04.700 --> 00:03:07.890
to get the features that they've
come to expect on mobile, to be

00:03:07.890 --> 00:03:10.920
able to get push notifications
and a home screen icon,

00:03:10.920 --> 00:03:13.020
and all of these aspects
that allow users to come

00:03:13.020 --> 00:03:14.920
back over and over again.

00:03:14.920 --> 00:03:17.040
And so that's been a
really big focus for us

00:03:17.040 --> 00:03:19.350
in the last few years.

00:03:19.350 --> 00:03:24.180
And in addition,
the shift to mobile

00:03:24.180 --> 00:03:26.580
has been a really big
shift in interaction.

00:03:26.580 --> 00:03:29.190
Previously on desktop,
users had a keyboard

00:03:29.190 --> 00:03:31.560
and they had a mouse, and
everything was indirect.

00:03:31.560 --> 00:03:34.860
You were moving a mouse, which
moved a cursor on the screen.

00:03:34.860 --> 00:03:37.726
But now we're on mobile,
users are dragging things

00:03:37.726 --> 00:03:38.850
and they're swiping things.

00:03:38.850 --> 00:03:40.770
They're tapping
things on the screen.

00:03:40.770 --> 00:03:43.050
And this means that the
quality of experience

00:03:43.050 --> 00:03:45.630
just has to be that much
higher because when a user is

00:03:45.630 --> 00:03:48.510
physically manipulating
something on the screen,

00:03:48.510 --> 00:03:51.000
it really has to respond
and do what they expect

00:03:51.000 --> 00:03:52.390
to create a good experience.

00:03:54.704 --> 00:03:56.870
So this is what I'm going
to be talking about today.

00:03:56.870 --> 00:03:59.760
Specifically, how do
we design for the web,

00:03:59.760 --> 00:04:02.280
especially for mobile devices?

00:04:02.280 --> 00:04:04.850
So this will build upon
general UX principles

00:04:04.850 --> 00:04:08.330
and general principles of good
mobile design and good design.

00:04:08.330 --> 00:04:11.000
But it will focus
specifically on the challenges

00:04:11.000 --> 00:04:13.490
and unique opportunities
presented by the web.

00:04:16.370 --> 00:04:19.250
So this talk was
named "How to build

00:04:19.250 --> 00:04:23.700
user experiences that just
feel right on mobile devices."

00:04:23.700 --> 00:04:26.030
And so to dig into
that, I think we've all

00:04:26.030 --> 00:04:29.570
had lots of experiences on
the web where we open a page

00:04:29.570 --> 00:04:32.000
and we're scrolling, and it's
just not really responding.

00:04:32.000 --> 00:04:32.690
And we tap it.

00:04:32.690 --> 00:04:36.560
It feels kind of kludgy
and slow and old-fashioned.

00:04:36.560 --> 00:04:39.050
And so this is a kind of
common emotion and feeling

00:04:39.050 --> 00:04:40.560
on lots of websites.

00:04:40.560 --> 00:04:43.430
And so I want to kind of think
about those are the symptoms

00:04:43.430 --> 00:04:45.950
and can we really dig in and
understand those symptoms

00:04:45.950 --> 00:04:47.892
and understand the
causes for those such

00:04:47.892 --> 00:04:49.850
that we can look at how
to go and address them?

00:04:52.490 --> 00:04:54.770
And so the first common
symptom that we see

00:04:54.770 --> 00:04:57.620
is that sites often
aren't reactive.

00:04:57.620 --> 00:04:59.360
So here you can see
I'm tapping a link

00:04:59.360 --> 00:05:01.280
on developers.google.com.

00:05:01.280 --> 00:05:03.650
And I'm kind of waiting,
and I'm waiting.

00:05:03.650 --> 00:05:05.360
And I'm on a mobile
device, so who

00:05:05.360 --> 00:05:06.950
knows what my network is like.

00:05:06.950 --> 00:05:09.830
And really, this wait
is almost indeterminant.

00:05:09.830 --> 00:05:12.869
This is kind of in contrast
to when things were developed

00:05:12.869 --> 00:05:14.660
on desktop, and probably
this was developed

00:05:14.660 --> 00:05:17.460
on a desktop device, where they
were running a local server

00:05:17.460 --> 00:05:19.530
and they tapped the button,
and in half a second

00:05:19.530 --> 00:05:21.760
the next page was there
and it just felt fine.

00:05:21.760 --> 00:05:24.020
But on mobile devices
and real world networks,

00:05:24.020 --> 00:05:25.260
that's just not the case.

00:05:25.260 --> 00:05:30.340
And so often sites just don't
feel like they're reactive.

00:05:30.340 --> 00:05:32.650
Next, sites often
aren't predictable.

00:05:32.650 --> 00:05:35.260
So here you can see we're
looking at the Google I/O

00:05:35.260 --> 00:05:36.187
website.

00:05:36.187 --> 00:05:38.020
I've opened the hamburger
menu, and then I'm

00:05:38.020 --> 00:05:39.670
trying to swipe it away.

00:05:39.670 --> 00:05:41.470
But it's not
responding to my input.

00:05:41.470 --> 00:05:43.270
It's not swiping away.

00:05:43.270 --> 00:05:45.940
To me, this is a little bit
like working in an office that

00:05:45.940 --> 00:05:48.310
has old pull doors everywhere.

00:05:48.310 --> 00:05:51.040
And then one day, someone goes
and installs a sliding door.

00:05:51.040 --> 00:05:53.636
But they think, oh, I'll put
a pull sign on it and a handle

00:05:53.636 --> 00:05:55.510
because that's what all
the other doors have.

00:05:55.510 --> 00:05:57.299
So that'll be good.

00:05:57.299 --> 00:05:58.840
And obviously, that's
going to create

00:05:58.840 --> 00:06:01.210
a very confusing and
frustrating experience,

00:06:01.210 --> 00:06:04.540
and that's something that
we often see on the web.

00:06:04.540 --> 00:06:07.570
And thirdly, users often
just aren't in control

00:06:07.570 --> 00:06:08.830
when they're on the web.

00:06:08.830 --> 00:06:11.980
So here you can see me
loading an article, scrolling,

00:06:11.980 --> 00:06:13.960
and then it's kind of
jumping underneath me.

00:06:13.960 --> 00:06:15.310
I'm sure we've all had
this experience when

00:06:15.310 --> 00:06:17.434
we're trying to read or
we're trying to tap a link.

00:06:17.434 --> 00:06:19.810
And then everything just
shifts underneath us

00:06:19.810 --> 00:06:23.020
as the content appears and
loads in elsewhere on the page.

00:06:23.020 --> 00:06:24.970
This is also a very
common experience

00:06:24.970 --> 00:06:28.730
that we've seen and
is a big problem.

00:06:28.730 --> 00:06:31.840
Another good example of where
the user isn't in control

00:06:31.840 --> 00:06:34.420
is if they're on a
list of, say, products

00:06:34.420 --> 00:06:35.686
on an e-commerce sites.

00:06:35.686 --> 00:06:37.060
They tap an item
and then realize

00:06:37.060 --> 00:06:38.350
they tapped the wrong one.

00:06:38.350 --> 00:06:41.080
Now they're waiting three,
five, 10-- actually,

00:06:41.080 --> 00:06:44.950
the average page load time
on mobile is 19 seconds.

00:06:44.950 --> 00:06:47.110
So that waiting a really
long time for that page.

00:06:47.110 --> 00:06:49.210
They know it's the wrong
one, so they hit back.

00:06:49.210 --> 00:06:51.209
And now they're staring
at the screen wondering,

00:06:51.209 --> 00:06:53.200
is the page I was
tapping on loading?

00:06:53.200 --> 00:06:55.000
Is the back page loading?

00:06:55.000 --> 00:06:56.170
Do I need to hit back again?

00:06:56.170 --> 00:06:57.280
What's going on?

00:06:57.280 --> 00:06:59.680
And this can turn a minor
mistake into an experience

00:06:59.680 --> 00:07:02.055
where they accidentally leave
the whole site because they

00:07:02.055 --> 00:07:03.190
hit back too many times.

00:07:03.190 --> 00:07:06.160
And so really users
often aren't in control.

00:07:06.160 --> 00:07:09.500
And these are some of the
big issues that we see.

00:07:09.500 --> 00:07:12.445
And so today I want to share
a secret with all of you.

00:07:12.445 --> 00:07:14.660
Are you already?

00:07:14.660 --> 00:07:21.670
So the secret is that
websites can feel amazing.

00:07:21.670 --> 00:07:25.830
So this is actually a pretty
well-kept secret, I think.

00:07:25.830 --> 00:07:27.510
And so there's
this huge amount--

00:07:27.510 --> 00:07:29.010
the history of the
web means there's

00:07:29.010 --> 00:07:31.350
this huge amount
of legacy content

00:07:31.350 --> 00:07:33.630
that was really not designed
with mobile in mind,

00:07:33.630 --> 00:07:36.360
not designed for the
networks and the interaction.

00:07:36.360 --> 00:07:39.750
And this means that the vast
majority of existing content

00:07:39.750 --> 00:07:42.467
just isn't designed
for the modern world.

00:07:42.467 --> 00:07:44.550
And I think that this means
that a lot of the time

00:07:44.550 --> 00:07:46.092
we experience the
web in this way

00:07:46.092 --> 00:07:48.300
and therefore think, oh
well, this is how the web is.

00:07:48.300 --> 00:07:49.320
This is how it feels.

00:07:49.320 --> 00:07:50.582
This is how it must be.

00:07:50.582 --> 00:07:52.665
And so, if you take away
one thing from this talk,

00:07:52.665 --> 00:07:56.490
it's that websites can really
feel amazing and can do more.

00:07:59.170 --> 00:08:01.270
And here's a great
example of a web app

00:08:01.270 --> 00:08:02.984
that I think does a lot more.

00:08:02.984 --> 00:08:04.150
So here we have Twitter.com.

00:08:04.150 --> 00:08:07.842
They recently launched this
as a Progressive Web App

00:08:07.842 --> 00:08:09.550
a couple of months
ago, so you can try it

00:08:09.550 --> 00:08:11.140
on your mobile device.

00:08:11.140 --> 00:08:14.530
And you can see, as I'm tapping
the tabs, it's very responsive.

00:08:14.530 --> 00:08:17.200
I can tap compose, tap
through all of the tweets.

00:08:17.200 --> 00:08:20.440
And this is actually simulated
on a very slow I think 2G or 3G

00:08:20.440 --> 00:08:21.190
network.

00:08:21.190 --> 00:08:24.472
And it all just
feels really good.

00:08:24.472 --> 00:08:25.930
You can actually
see that it's also

00:08:25.930 --> 00:08:27.700
running in this kind
of immersive mode

00:08:27.700 --> 00:08:28.750
where there's no omnibox.

00:08:28.750 --> 00:08:31.180
There's no distracting
browser UI.

00:08:31.180 --> 00:08:33.429
And that's another feature
of the Progressive Web App.

00:08:33.429 --> 00:08:37.630
Since I've added to home screen
this lightweight install,

00:08:37.630 --> 00:08:38.450
I have the icon.

00:08:38.450 --> 00:08:40.199
And once I launch it
from the home screen,

00:08:40.199 --> 00:08:43.000
it runs in this kind of rich,
immersive mode, which creates

00:08:43.000 --> 00:08:44.610
a really nice experience.

00:08:44.610 --> 00:08:48.390
And so this is a nice
example of what's possible.

00:08:48.390 --> 00:08:51.090
And so I said that this
is a Progressive Web App.

00:08:51.090 --> 00:08:53.280
And so what are
Progressive Web Apps?

00:08:53.280 --> 00:08:55.970
Well, at their core, they're
really just radically better

00:08:55.970 --> 00:08:57.540
web experiences.

00:08:57.540 --> 00:08:59.760
And they are
fundamentally enabled

00:08:59.760 --> 00:09:03.030
by a new set of browser
standardized capabilities

00:09:03.030 --> 00:09:06.990
and APIs that have been shipped
over the past few years.

00:09:06.990 --> 00:09:10.290
For example, Service Worker
is this amazing new API

00:09:10.290 --> 00:09:12.690
that allows web sites to
really fundamentally take

00:09:12.690 --> 00:09:15.390
control of the
networking on the page

00:09:15.390 --> 00:09:17.940
in order to make it
performant and fast

00:09:17.940 --> 00:09:20.310
and reactive regardless
of the network condition,

00:09:20.310 --> 00:09:22.509
even if the user
is fully offline.

00:09:22.509 --> 00:09:24.050
Essentially, it lets
you kind of keep

00:09:24.050 --> 00:09:27.514
a stored copy of your web
app on the user's device

00:09:27.514 --> 00:09:29.430
so as they're using it,
you're not downloading

00:09:29.430 --> 00:09:31.650
every page each time, or
downloading the whole app

00:09:31.650 --> 00:09:34.230
every time they browse to it.

00:09:34.230 --> 00:09:36.120
And another thing
that I think is

00:09:36.120 --> 00:09:38.310
really important about
Progressive Web Apps--

00:09:38.310 --> 00:09:40.200
actually besides
the capabilities

00:09:40.200 --> 00:09:41.940
and the technical aspects--

00:09:41.940 --> 00:09:44.610
is the idea of it as
a label and a thing

00:09:44.610 --> 00:09:46.380
that we can aspire towards.

00:09:46.380 --> 00:09:49.110
We have this big problem on the
web of this legacy content that

00:09:49.110 --> 00:09:52.020
doesn't work very well, and
I think that by having this

00:09:52.020 --> 00:09:54.540
label-- where we can say these
are Progressive Web Apps,

00:09:54.540 --> 00:09:56.850
these are great experiences--

00:09:56.850 --> 00:10:00.780
we can reset expectations for
ourselves and our companies

00:10:00.780 --> 00:10:03.390
and for our users that
things can be great.

00:10:03.390 --> 00:10:07.830
And so that's one of the reasons
why I think PWA is so exciting.

00:10:07.830 --> 00:10:10.410
And so over the last 18
months, we on the Chrome team

00:10:10.410 --> 00:10:12.390
have had the great
opportunity to work

00:10:12.390 --> 00:10:14.190
with a bunch of the
world's best developers

00:10:14.190 --> 00:10:18.350
in rebuilding their mobile
sites as Progressive Web Apps,

00:10:18.350 --> 00:10:21.180
or just coming to the web for
the first time-- from Twitter

00:10:21.180 --> 00:10:24.240
launching Twitter Lite to Lift
launching their Progressive Web

00:10:24.240 --> 00:10:25.920
App for the first time.

00:10:25.920 --> 00:10:27.870
And in that process,
we've had a chance

00:10:27.870 --> 00:10:30.300
to really understand
the common problems

00:10:30.300 --> 00:10:32.130
and look at the demos
and the prototypes

00:10:32.130 --> 00:10:33.750
and work out what works well.

00:10:33.750 --> 00:10:36.330
And we've boiled down
three key principles

00:10:36.330 --> 00:10:39.390
that we called the Feel Good
Principles that we think really

00:10:39.390 --> 00:10:43.950
explain what makes a web
experience feel good to users

00:10:43.950 --> 00:10:45.730
as they using it.

00:10:45.730 --> 00:10:47.760
So the first
principle is reactive.

00:10:47.760 --> 00:10:51.000
Sites should be reactive
to use as input.

00:10:51.000 --> 00:10:53.640
Really the word responsive
would have been better in here,

00:10:53.640 --> 00:10:55.990
but responsive web design
is already a thing.

00:10:55.990 --> 00:11:00.220
And so reactive is the
word we're using today.

00:11:00.220 --> 00:11:03.030
Secondly, sites
should be predictable,

00:11:03.030 --> 00:11:05.760
and they should offer
predictable user experiences

00:11:05.760 --> 00:11:08.220
that users can expect
and understand.

00:11:08.220 --> 00:11:09.960
And thirdly, users
should always be

00:11:09.960 --> 00:11:12.580
in control of their experience.

00:11:12.580 --> 00:11:15.300
So let's dig into this
first one, reactive.

00:11:15.300 --> 00:11:18.120
Sites should be reactive
to users' input.

00:11:18.120 --> 00:11:19.920
And when we're talking
about reactivity,

00:11:19.920 --> 00:11:23.100
I think first it's important
to think about perceived

00:11:23.100 --> 00:11:23.874
performance.

00:11:23.874 --> 00:11:26.040
Because we're really talking
about performance here,

00:11:26.040 --> 00:11:28.860
and what counts as how
users experience it.

00:11:28.860 --> 00:11:30.690
And so there's this
quote that I love

00:11:30.690 --> 00:11:33.530
from a classic paper
in this field, which

00:11:33.530 --> 00:11:36.840
says "human perception
of time is fluid

00:11:36.840 --> 00:11:39.870
and can be manipulated in
purposeful and productive

00:11:39.870 --> 00:11:41.640
ways."

00:11:41.640 --> 00:11:44.400
So this is a quote that
comes from a great paper

00:11:44.400 --> 00:11:47.490
about designing loading
bars and about how

00:11:47.490 --> 00:11:50.250
to create good experiences
of loading bars

00:11:50.250 --> 00:11:52.890
that make users feel like
the experience is really fast

00:11:52.890 --> 00:11:55.140
and avoid them
feeling frustrated.

00:11:55.140 --> 00:11:57.720
And that research,
amongst lots of others,

00:11:57.720 --> 00:12:00.970
has demonstrated that user
perception of time is fluid.

00:12:00.970 --> 00:12:03.720
And so as we're thinking about
building reactive websites,

00:12:03.720 --> 00:12:06.330
we should be thinking about
how users perceive performance.

00:12:06.330 --> 00:12:08.880
Knowing the page loads
in 5 seconds is great,

00:12:08.880 --> 00:12:12.000
but if users can think that
it loads just in one second

00:12:12.000 --> 00:12:15.462
because we can use some
tricks, that's even better.

00:12:15.462 --> 00:12:16.920
And the data actually
backs that up

00:12:16.920 --> 00:12:20.160
and says the users do engage
more thanks to this perceived

00:12:20.160 --> 00:12:22.510
in performance.

00:12:22.510 --> 00:12:25.652
So the first example
I want to show

00:12:25.652 --> 00:12:27.110
is kind of like
what we saw before,

00:12:27.110 --> 00:12:29.010
a transition that's
blocked on the network.

00:12:29.010 --> 00:12:30.900
Here you can see me
tapping a listing,

00:12:30.900 --> 00:12:33.960
and then I'm waiting really an
indeterminate amount of time

00:12:33.960 --> 00:12:36.265
until suddenly the
next page appears.

00:12:36.265 --> 00:12:39.860
And so this can be frustrating.

00:12:39.860 --> 00:12:41.750
And here we can
see actually what

00:12:41.750 --> 00:12:44.840
Housing.com, the Progressive
Web App here, has done.

00:12:44.840 --> 00:12:46.880
Where, when the user
taps on a listing,

00:12:46.880 --> 00:12:49.095
they're immediately
taken to the next screen.

00:12:49.095 --> 00:12:50.720
The information that
was known before--

00:12:50.720 --> 00:12:52.040
the image and the title--

00:12:52.040 --> 00:12:54.680
is re-used on that next
screen, and the user

00:12:54.680 --> 00:12:57.320
is given an idea of the
structure of the page

00:12:57.320 --> 00:12:59.090
so they can start
understanding that,

00:12:59.090 --> 00:13:01.700
take a few seconds to process
that whilst the download is

00:13:01.700 --> 00:13:02.700
happening.

00:13:02.700 --> 00:13:05.900
And so this is a really big
improvement in user experience,

00:13:05.900 --> 00:13:08.330
and it's a pattern that
we've seen very successfully

00:13:08.330 --> 00:13:12.710
being used across lots
of Progressive Web Apps.

00:13:12.710 --> 00:13:15.665
Next, a big issue that we've
often seen with Progressive Web

00:13:15.665 --> 00:13:20.420
App developers is trying to
do responsive touch feedback

00:13:20.420 --> 00:13:22.610
and finding that it's
just not really responding

00:13:22.610 --> 00:13:24.120
to the user's input.

00:13:24.120 --> 00:13:25.680
So here, if you
look really closely,

00:13:25.680 --> 00:13:27.710
you can see that I'm
tapping on this Demo button

00:13:27.710 --> 00:13:30.320
on the Material UI docs page.

00:13:30.320 --> 00:13:32.630
Material UI, by the way,
is an implementation

00:13:32.630 --> 00:13:35.400
of material design for
the React framework.

00:13:35.400 --> 00:13:38.061
So as I'm tapping Demo, this
should be a material button.

00:13:38.061 --> 00:13:39.310
There should be a nice ripple.

00:13:39.310 --> 00:13:41.840
And in fact, if you look at
the code there is a ripple.

00:13:41.840 --> 00:13:44.540
But when you go on a low-end
phone and you just tap it,

00:13:44.540 --> 00:13:45.230
there's not.

00:13:45.230 --> 00:13:48.009
And so, why?

00:13:48.009 --> 00:13:49.550
To understand this,
let's take a look

00:13:49.550 --> 00:13:52.550
at a simplification of the
code for how this would look.

00:13:52.550 --> 00:13:54.940
Here we have the button,
and we add an event listener

00:13:54.940 --> 00:13:56.164
for the click event.

00:13:56.164 --> 00:13:57.830
And when the user
clicks on that button,

00:13:57.830 --> 00:14:00.230
we're going to add a
class to the button.

00:14:00.230 --> 00:14:02.780
This class will
trigger that animation.

00:14:02.780 --> 00:14:04.790
And then we call
render next screen,

00:14:04.790 --> 00:14:06.650
and this probably does
a bunch of react code

00:14:06.650 --> 00:14:09.594
preparing the next screen
and then swaps it in.

00:14:09.594 --> 00:14:11.510
Now the problem here is
that when you actually

00:14:11.510 --> 00:14:13.910
set a class on
something in JavaScript,

00:14:13.910 --> 00:14:16.460
that doesn't actually
happen immediately.

00:14:16.460 --> 00:14:19.850
And in this case, the
render next screen code

00:14:19.850 --> 00:14:21.680
is what we call blocking
the main thread.

00:14:21.680 --> 00:14:25.520
It's doing so much busy work
that the change to the class

00:14:25.520 --> 00:14:29.070
actually doesn't get
time to be applied.

00:14:29.070 --> 00:14:31.700
And so this is kind of a
weird quirk that we have.

00:14:31.700 --> 00:14:33.590
But it's fairly simple to solve.

00:14:33.590 --> 00:14:36.350
The way to solve it
is to use this trick

00:14:36.350 --> 00:14:38.630
that we call a double
requestAnimationFrame,

00:14:38.630 --> 00:14:40.160
or a double RAF.

00:14:40.160 --> 00:14:42.020
And so here what we're
doing is, after we

00:14:42.020 --> 00:14:44.389
at that class we
say to the browser,

00:14:44.389 --> 00:14:45.680
hey, wait until the next frame.

00:14:45.680 --> 00:14:48.140
And then we say wait
until the next frame again

00:14:48.140 --> 00:14:50.300
and then start rendering
the next screen.

00:14:50.300 --> 00:14:53.600
And so what this does is
it ensures that that CSS

00:14:53.600 --> 00:14:55.100
change has been applied.

00:14:55.100 --> 00:14:59.600
It's made it off onto
the other process.

00:14:59.600 --> 00:15:02.130
And then when we call
render next screen,

00:15:02.130 --> 00:15:04.160
it can block the main
threads, but the animation

00:15:04.160 --> 00:15:05.300
is already going.

00:15:05.300 --> 00:15:07.770
And it won't be
blocked by that work.

00:15:07.770 --> 00:15:09.260
And so this is a
really good trick

00:15:09.260 --> 00:15:11.420
that I'd recommend you
think about whenever

00:15:11.420 --> 00:15:14.550
you are implementing tabs or
buttons or really anything

00:15:14.550 --> 00:15:17.990
that the user should expect
to get a response from.

00:15:17.990 --> 00:15:19.490
Think about using
this to make sure

00:15:19.490 --> 00:15:21.057
that things don't get blocked.

00:15:21.057 --> 00:15:22.640
So if you're testing
your sites always

00:15:22.640 --> 00:15:25.970
on the latest Pixel
or the latest iPhone

00:15:25.970 --> 00:15:28.490
or on your desktop, you often
don't notice these issues.

00:15:28.490 --> 00:15:31.220
But when you try them on the
really low-end mobile devices

00:15:31.220 --> 00:15:33.980
that realistically a
lot of users are using,

00:15:33.980 --> 00:15:36.930
these issues can really
become a problem.

00:15:36.930 --> 00:15:40.360
And so here we can see the docs
page with that fix applied.

00:15:40.360 --> 00:15:43.437
I'm tapping the Demo button, and
there's a nice material ripple

00:15:43.437 --> 00:15:44.270
as you would expect.

00:15:49.160 --> 00:15:51.860
Next, I want to talk about
kind of infinite lists.

00:15:51.860 --> 00:15:54.050
So infinite lists
are a common feature

00:15:54.050 --> 00:15:56.300
that we see on sites
especially with feeds.

00:15:56.300 --> 00:15:59.450
Sites like Twitter
or Facebook or Tumblr

00:15:59.450 --> 00:16:01.910
often let you scroll
infinitely through a list.

00:16:01.910 --> 00:16:03.620
And here you can
see a page where

00:16:03.620 --> 00:16:05.751
I put 1,000 of these rows.

00:16:05.751 --> 00:16:07.250
And I'm trying to
scroll through it,

00:16:07.250 --> 00:16:10.550
and it's such rendering
blank for a lot of it, which

00:16:10.550 --> 00:16:11.750
is really weird.

00:16:11.750 --> 00:16:14.720
And I found in reality,
when I was writing some code

00:16:14.720 --> 00:16:17.210
to keep adding
elements to this page,

00:16:17.210 --> 00:16:20.090
it got really sluggish
and slow, and the memory

00:16:20.090 --> 00:16:21.350
got really large.

00:16:21.350 --> 00:16:24.170
If you go on a site
that uses one of these

00:16:24.170 --> 00:16:28.250
and you just keep scrolling and
watch the memory information,

00:16:28.250 --> 00:16:31.680
you can see these sometimes take
multiple gigabytes of memory,

00:16:31.680 --> 00:16:33.320
which just grinds
everything to a halt.

00:16:33.320 --> 00:16:37.310
So this is a problem that we
need to be thoughtful about.

00:16:37.310 --> 00:16:39.090
And so there's a
solution to this,

00:16:39.090 --> 00:16:41.919
which is to use what are
called virtualized lists.

00:16:41.919 --> 00:16:43.460
Essentially, this
is a technique that

00:16:43.460 --> 00:16:45.500
means when that component
goes off the screen,

00:16:45.500 --> 00:16:47.220
it's actually
removed from the Dom.

00:16:47.220 --> 00:16:49.010
It's removed from the page.

00:16:49.010 --> 00:16:51.770
And so really only the things
that are within view and a few

00:16:51.770 --> 00:16:53.426
on either side are rendered.

00:16:53.426 --> 00:16:54.800
And actually here,
this is a page

00:16:54.800 --> 00:16:58.130
with 100,000 elements on it.

00:16:58.130 --> 00:16:59.997
And so this can really
scale very well,

00:16:59.997 --> 00:17:01.580
and it was a key
that actually Twitter

00:17:01.580 --> 00:17:03.590
found when they were
building Twitter Lite, that

00:17:03.590 --> 00:17:06.964
was key to making sure that
that list scrolls really well

00:17:06.964 --> 00:17:09.380
and the user can sit there and
use Twitter for a long time

00:17:09.380 --> 00:17:11.089
and have it be performant.

00:17:11.089 --> 00:17:14.619
So virtualized lists
is a great tool.

00:17:14.619 --> 00:17:16.450
Next, one of the big
questions that we

00:17:16.450 --> 00:17:19.750
get when we talk about
building reactive websites

00:17:19.750 --> 00:17:22.089
is how do I do
native UI on the web?

00:17:22.089 --> 00:17:23.680
And for Android
developers, this often

00:17:23.680 --> 00:17:26.105
means how to do
material on the web?

00:17:26.105 --> 00:17:27.730
And so I want to give
a quick shout out

00:17:27.730 --> 00:17:30.130
to a few different
implementations of material

00:17:30.130 --> 00:17:31.635
that you can go
and take a look at.

00:17:31.635 --> 00:17:34.000
At the top, we have
the Polymer Elements.

00:17:34.000 --> 00:17:36.280
So this is a set
of elements built

00:17:36.280 --> 00:17:38.530
by Google, built by
the Polymer team that

00:17:38.530 --> 00:17:39.880
implement material design.

00:17:39.880 --> 00:17:41.590
And the Polymer
team are here today,

00:17:41.590 --> 00:17:43.881
so you can go and chat with
them in the mobile web tent

00:17:43.881 --> 00:17:45.220
and hear all about it.

00:17:45.220 --> 00:17:47.130
Secondly, if you're
interested in React,

00:17:47.130 --> 00:17:49.360
there's this
implementation Material UI

00:17:49.360 --> 00:17:52.900
that we saw a little screen grab
from earlier, which is great.

00:17:52.900 --> 00:17:54.490
So you can check that out.

00:17:54.490 --> 00:17:56.860
And if you want to be a bit
more framework agnostic,

00:17:56.860 --> 00:17:59.410
then Google has also published
the material components

00:17:59.410 --> 00:18:00.340
for Web.

00:18:00.340 --> 00:18:02.080
And these aren't tied
to any framework.

00:18:02.080 --> 00:18:03.820
They're vanilla
JavaScript and CSS,

00:18:03.820 --> 00:18:06.403
and you can pull them into any
project that you're working on.

00:18:10.090 --> 00:18:13.120
Now I can't really talk about
building reactive web sites

00:18:13.120 --> 00:18:15.220
without touching
on load performance

00:18:15.220 --> 00:18:17.200
since the first time a
user comes to a site,

00:18:17.200 --> 00:18:20.650
their first experience is part
of it being reactive to what

00:18:20.650 --> 00:18:22.040
they're trying to do.

00:18:22.040 --> 00:18:24.640
And so here on the left,
we can see the improvement

00:18:24.640 --> 00:18:28.325
that the major company
OLX saw in India when

00:18:28.325 --> 00:18:29.950
they launched their
Progressive Web App

00:18:29.950 --> 00:18:31.520
and used some of these patterns.

00:18:31.520 --> 00:18:33.520
So there are these
techniques that if you're not

00:18:33.520 --> 00:18:36.520
familiar with, I recommend
that you go and just look up.

00:18:36.520 --> 00:18:38.269
The first one is
the PRPL pattern.

00:18:38.269 --> 00:18:40.810
This is about a way of ensuring
that you're loading resources

00:18:40.810 --> 00:18:42.970
effectively and reusing
them effectively

00:18:42.970 --> 00:18:44.770
to make everything very fast.

00:18:44.770 --> 00:18:46.900
Secondly, there's
service worker caching.

00:18:46.900 --> 00:18:50.380
So service worker is one of
those new standardized APIs

00:18:50.380 --> 00:18:52.510
that's been added
to the web recently

00:18:52.510 --> 00:18:54.302
that allows the
controlling of the network.

00:18:54.302 --> 00:18:56.593
And so this is really good
for when the user comes back

00:18:56.593 --> 00:18:57.230
to your site.

00:18:57.230 --> 00:18:59.290
You can have the resources
already available

00:18:59.290 --> 00:19:00.730
on the device.

00:19:00.730 --> 00:19:03.730
And third, server
side rendering.

00:19:03.730 --> 00:19:05.980
So these days people are
building a lot richer

00:19:05.980 --> 00:19:07.390
experiences on the web.

00:19:07.390 --> 00:19:08.980
They're very app like.

00:19:08.980 --> 00:19:12.294
They have a big framework
and lots of resources.

00:19:12.294 --> 00:19:13.960
And sometimes this
means that, if to get

00:19:13.960 --> 00:19:16.120
that very first render
you have to download

00:19:16.120 --> 00:19:18.610
all of those
resources, then it's

00:19:18.610 --> 00:19:20.170
going to be a slow first render.

00:19:20.170 --> 00:19:21.970
And so there's a technique,
server side rendering,

00:19:21.970 --> 00:19:24.011
where you can render the
first view on the server

00:19:24.011 --> 00:19:25.750
and send that down and then--

00:19:25.750 --> 00:19:27.680
we say hydrate it
on the client--

00:19:27.680 --> 00:19:29.680
once the other resources
have been loaded in it,

00:19:29.680 --> 00:19:30.820
make it interactive.

00:19:33.970 --> 00:19:37.420
And talking about this kind
of first load performance,

00:19:37.420 --> 00:19:39.050
given that we're
talking about design,

00:19:39.050 --> 00:19:41.140
I think it's really
important to touch on fonts.

00:19:41.140 --> 00:19:44.110
So as designers, fonts
are a really valuable tool

00:19:44.110 --> 00:19:50.320
in our toolkit for creating
these great experiences.

00:19:50.320 --> 00:19:52.510
But on the web, there's
this common problem

00:19:52.510 --> 00:19:56.506
where fonts can be a megabyte,
two megabytes in size.

00:19:56.506 --> 00:19:57.880
And so if you want
to really rely

00:19:57.880 --> 00:20:00.130
on that font for the first
load of your application,

00:20:00.130 --> 00:20:02.200
you can end up with
something like you see here

00:20:02.200 --> 00:20:05.290
where everything is downloaded,
all of the text is there,

00:20:05.290 --> 00:20:06.820
but the font isn't
yet downloaded.

00:20:06.820 --> 00:20:07.930
And so it's unstyled.

00:20:07.930 --> 00:20:09.130
It's blank.

00:20:09.130 --> 00:20:10.594
And this is a big problem.

00:20:10.594 --> 00:20:12.010
So there's a couple
of tips that I

00:20:12.010 --> 00:20:13.630
would recommend thinking about.

00:20:13.630 --> 00:20:16.810
Firstly is to consider
using device fonts.

00:20:16.810 --> 00:20:20.830
So these days devices ship with
a large set of default fonts.

00:20:20.830 --> 00:20:22.720
And often just by
choosing between them,

00:20:22.720 --> 00:20:24.820
you can get a good
artistic expression

00:20:24.820 --> 00:20:26.800
that you're interested in.

00:20:26.800 --> 00:20:29.230
Secondly, if a
custom font is really

00:20:29.230 --> 00:20:32.380
important to you for
a header or a logo,

00:20:32.380 --> 00:20:34.480
consider using an
image or an SVG.

00:20:34.480 --> 00:20:37.030
Often these can just be
like 10 kilobytes instead

00:20:37.030 --> 00:20:42.100
of a megabyte, and so this can
be a much better trick to use.

00:20:42.100 --> 00:20:45.730
And thirdly, another good
pattern is to use custom fonts,

00:20:45.730 --> 00:20:47.770
but use them on
subsequent loads.

00:20:47.770 --> 00:20:49.780
So once they're
available, use them.

00:20:49.780 --> 00:20:52.000
Until they're available,
make sure that you're not.

00:20:52.000 --> 00:20:54.064
And if you're pulling
fonts from Google Fonts,

00:20:54.064 --> 00:20:55.730
there's an option
that lets you do this.

00:20:55.730 --> 00:20:57.310
So just keep your
eye out for it,

00:20:57.310 --> 00:20:59.680
and make sure that
you're trying your site

00:20:59.680 --> 00:21:00.750
on really slow networks.

00:21:00.750 --> 00:21:02.350
You're trying that
first load and checking

00:21:02.350 --> 00:21:03.433
how the fonts are working.

00:21:06.010 --> 00:21:07.734
Now, I've given a
bunch of different tips

00:21:07.734 --> 00:21:09.400
on how to build your
sites and make sure

00:21:09.400 --> 00:21:10.660
that they feel reactive.

00:21:10.660 --> 00:21:12.820
I want to share a couple
tools to make it easier

00:21:12.820 --> 00:21:14.890
to make sure that you're
hitting all of these.

00:21:14.890 --> 00:21:16.250
The first is Lighthouse.

00:21:16.250 --> 00:21:18.370
So Lighthouse doesn't
do all of the things

00:21:18.370 --> 00:21:20.380
that we've talked about
in terms of helping

00:21:20.380 --> 00:21:23.470
with skeleton screens and
responsive touch input,

00:21:23.470 --> 00:21:25.390
but it does help a
lot with many aspects,

00:21:25.390 --> 00:21:27.760
and we're building
on it rapidly.

00:21:27.760 --> 00:21:29.860
So Lighthouse is a
new Chrome extension

00:21:29.860 --> 00:21:32.710
built by the Chrome team
that you can run on any page,

00:21:32.710 --> 00:21:35.170
and it gives you this
personalized report that

00:21:35.170 --> 00:21:38.262
explains how all the different
aspects of it are working

00:21:38.262 --> 00:21:40.720
and gives you pointers about
areas that you should look at,

00:21:40.720 --> 00:21:43.854
areas of opportunity.

00:21:43.854 --> 00:21:46.270
There are another couple tools
which are worth mentioning.

00:21:46.270 --> 00:21:49.000
Page Speed Insights
is another Google tool

00:21:49.000 --> 00:21:52.390
that helps you understand the
performance of your page loads.

00:21:52.390 --> 00:21:55.630
And Web Page Test is a
great non-Google tool

00:21:55.630 --> 00:21:59.260
that helps you say, what's
the experience like of loading

00:21:59.260 --> 00:22:02.309
my website on Moto
4G in Bangalore?

00:22:02.309 --> 00:22:03.850
And it'll give you
back a video of it

00:22:03.850 --> 00:22:06.580
loading and traces
and timelines and help

00:22:06.580 --> 00:22:08.236
you see how that's working.

00:22:08.236 --> 00:22:09.610
So this is a really
powerful tool

00:22:09.610 --> 00:22:12.370
for understanding,
real world, how users

00:22:12.370 --> 00:22:13.540
would experience your site.

00:22:16.134 --> 00:22:18.300
So that was about how to
make sure that your site is

00:22:18.300 --> 00:22:20.790
reactive to the user's input.

00:22:20.790 --> 00:22:23.640
Next I want to talk about how
to make sure it's predictable

00:22:23.640 --> 00:22:28.080
and that your user experiences
are understandable.

00:22:28.080 --> 00:22:31.140
So here we saw the example
earlier of a hamburger menu

00:22:31.140 --> 00:22:32.940
that the user is
trying to swipe away

00:22:32.940 --> 00:22:34.140
and that just doesn't swipe.

00:22:34.140 --> 00:22:36.530
So this is a problem.

00:22:36.530 --> 00:22:38.635
And here, instead, we can
see the Progressive Web

00:22:38.635 --> 00:22:40.870
App recently launched
by the company Wego.

00:22:40.870 --> 00:22:44.710
This is built using Polymer
and the Polymer Elements.

00:22:44.710 --> 00:22:47.094
And so here, I am able
to drag the left nav.

00:22:47.094 --> 00:22:49.510
I'm able to fling it, and it
works just like you'd expect.

00:22:53.410 --> 00:22:56.201
So here's another example
similar to the hamburger menu.

00:22:56.201 --> 00:22:57.700
There are tabs on
this site, and I'm

00:22:57.700 --> 00:22:59.560
trying to just swipe
between those tabs

00:22:59.560 --> 00:23:01.420
as I've been trained to expect.

00:23:01.420 --> 00:23:02.540
But it's not working.

00:23:02.540 --> 00:23:05.980
And so this is a
confusing experience.

00:23:05.980 --> 00:23:08.710
So instead of that,
here is the docs page

00:23:08.710 --> 00:23:12.580
for react-swipeable-views, which
is a performant way of having

00:23:12.580 --> 00:23:14.990
these swipeable tabs
or swipeable views

00:23:14.990 --> 00:23:16.570
somewhere in your application.

00:23:16.570 --> 00:23:18.280
So go and check
this out if you're

00:23:18.280 --> 00:23:22.420
looking at doing swipeable
views for some reason.

00:23:22.420 --> 00:23:24.465
But actually there's
another tip that I

00:23:24.465 --> 00:23:26.590
like to think about when
thinking about navigation,

00:23:26.590 --> 00:23:29.770
which is sometimes it's
best just to keep it simple.

00:23:29.770 --> 00:23:32.800
With both the hamburger
menu and with those tabs,

00:23:32.800 --> 00:23:35.800
we have this implication of
gestural navigation, which

00:23:35.800 --> 00:23:38.050
can be challenging to do
a good job, especially

00:23:38.050 --> 00:23:42.040
if you're interested in serving
users on low-end devices.

00:23:42.040 --> 00:23:44.260
And in fact, the hamburger
menu has a number

00:23:44.260 --> 00:23:47.200
of usability problems
around discoverability

00:23:47.200 --> 00:23:48.730
of the items in that menu.

00:23:48.730 --> 00:23:51.160
So sometimes it's best
just to keep it simple.

00:23:51.160 --> 00:23:54.250
There's this pattern
called a bottom navigation,

00:23:54.250 --> 00:23:56.200
which doesn't have
the same implications

00:23:56.200 --> 00:23:57.940
of gestural swiping.

00:23:57.940 --> 00:24:01.472
It's also much easier to tap
for the user with their thumb,

00:24:01.472 --> 00:24:03.430
and it's more discoverable
because they can see

00:24:03.430 --> 00:24:05.080
immediately what's available.

00:24:05.080 --> 00:24:07.540
So think about keeping it simple
with the bottom navigation

00:24:07.540 --> 00:24:09.820
instead of going really
deep on the other areas.

00:24:12.390 --> 00:24:14.600
So the next aspect
of predictability

00:24:14.600 --> 00:24:16.460
I want to talk
about is this gotcha

00:24:16.460 --> 00:24:19.340
that we called the blue
flash, which incidentally

00:24:19.340 --> 00:24:21.530
I think sounds like a
great superhero name

00:24:21.530 --> 00:24:24.840
if anyone needs
one for any reason.

00:24:24.840 --> 00:24:26.090
So the blue flash, what is it?

00:24:26.090 --> 00:24:28.730
So here we can see, I'm tapping
on the hamburger button,

00:24:28.730 --> 00:24:30.530
and I'm tapping to dismiss it.

00:24:30.530 --> 00:24:34.850
And the screen is kind of
flashing blue in that area.

00:24:34.850 --> 00:24:36.710
So why is this happening?

00:24:36.710 --> 00:24:40.820
Well, this turns out, again,
to be due to the legacy

00:24:40.820 --> 00:24:42.710
content on the web.

00:24:42.710 --> 00:24:44.960
We had this big problem in
the early days of the web

00:24:44.960 --> 00:24:47.210
where the user with
tap on some content,

00:24:47.210 --> 00:24:49.070
and then they'd
be stuck waiting.

00:24:49.070 --> 00:24:51.140
And so we made this
decision to have

00:24:51.140 --> 00:24:55.220
links go blue for a
brief amount of time

00:24:55.220 --> 00:24:57.440
so the user knows that
the tap was recognized

00:24:57.440 --> 00:25:00.020
and that they know
that they need to wait.

00:25:00.020 --> 00:25:02.840
But these days, when we're
building these rich experiences

00:25:02.840 --> 00:25:06.280
that are going to be responding
to user input immediately,

00:25:06.280 --> 00:25:08.390
this blue flash is really
just a distraction,

00:25:08.390 --> 00:25:10.470
and it takes away
from the design.

00:25:10.470 --> 00:25:12.320
So if you want to
blue flash, great.

00:25:12.320 --> 00:25:15.470
You get one by default. If you
don't want to a blue flash,

00:25:15.470 --> 00:25:17.150
it's really easy to fix.

00:25:17.150 --> 00:25:19.340
You just add this
one line of CSS--

00:25:19.340 --> 00:25:21.290
webkit-tap-highlight-color.

00:25:21.290 --> 00:25:23.510
And then this is
an rgb alpha value.

00:25:23.510 --> 00:25:25.610
The zero at the end
means the alpha is zero.

00:25:25.610 --> 00:25:26.660
It's transparent.

00:25:26.660 --> 00:25:29.480
So this makes the blue
flash transparent.

00:25:29.480 --> 00:25:31.800
So this is just a small
example of the polish

00:25:31.800 --> 00:25:35.430
that you can bring
to your websites.

00:25:35.430 --> 00:25:38.850
Now thirdly, the user
should always be in control

00:25:38.850 --> 00:25:41.520
when they're on your site.

00:25:41.520 --> 00:25:44.940
And so earlier we saw this
example of loading an article

00:25:44.940 --> 00:25:46.950
and it jumping out
from underneath us,

00:25:46.950 --> 00:25:50.640
which is probably a common
experience that we've all had.

00:25:50.640 --> 00:25:53.980
So the alternative to that is
what we call the stable load.

00:25:53.980 --> 00:25:56.940
This is where images
and dynamic components

00:25:56.940 --> 00:25:59.820
have their size
pre-determined such

00:25:59.820 --> 00:26:01.740
that the browser
knows how to lay out

00:26:01.740 --> 00:26:04.900
everything on the screen even
before they're downloaded.

00:26:04.900 --> 00:26:08.280
And so this is the solution,
just specify those sizes.

00:26:08.280 --> 00:26:12.330
And it really allows the user to
interpret the page better, not

00:26:12.330 --> 00:26:13.830
accidentally tap
on the wrong thing.

00:26:17.300 --> 00:26:19.790
Another case where
I personally find

00:26:19.790 --> 00:26:22.640
I'm kind of taken out of
my context and diverted

00:26:22.640 --> 00:26:24.986
is sometimes with
permissions on the web.

00:26:24.986 --> 00:26:26.360
So there is this
pattern that I'm

00:26:26.360 --> 00:26:28.080
seeing a lot at the
moment where I'll

00:26:28.080 --> 00:26:31.140
land on some kind of e-commerce
site or some news site,

00:26:31.140 --> 00:26:32.750
and the first
thing that I see is

00:26:32.750 --> 00:26:35.083
a bar appear at the bottom
saying that the website wants

00:26:35.083 --> 00:26:37.209
to send you notifications.

00:26:37.209 --> 00:26:39.500
At this point, the user really
doesn't have any context

00:26:39.500 --> 00:26:40.370
to make this decision.

00:26:40.370 --> 00:26:42.286
They don't know what
you're going to send them

00:26:42.286 --> 00:26:43.730
notifications about.

00:26:43.730 --> 00:26:46.520
And you probably have multiple
calls to action on the page.

00:26:46.520 --> 00:26:48.590
Here, there's different
browse buttons.

00:26:48.590 --> 00:26:51.200
So it's unclear what
we're expecting users

00:26:51.200 --> 00:26:53.030
to do at this point.

00:26:53.030 --> 00:26:55.340
Instead, I really like
what Twitter's done,

00:26:55.340 --> 00:26:58.700
which is where-- when you tap
on their notifications tab--

00:26:58.700 --> 00:27:01.550
if you haven't previously
enabled push notifications,

00:27:01.550 --> 00:27:03.054
they show this
full screen overlay

00:27:03.054 --> 00:27:04.970
asking the user if they
want to opt in and get

00:27:04.970 --> 00:27:06.530
push notification.

00:27:06.530 --> 00:27:08.150
Incidentally, push
notifications are

00:27:08.150 --> 00:27:10.880
one of the new features, the new
standardized features brought

00:27:10.880 --> 00:27:12.480
by Progressive Web Apps.

00:27:12.480 --> 00:27:15.140
So you can now build
web experiences

00:27:15.140 --> 00:27:16.790
that can send
native notifications

00:27:16.790 --> 00:27:19.799
on Android and on desktop
that look and feel

00:27:19.799 --> 00:27:20.840
just as you would expect.

00:27:23.940 --> 00:27:26.210
So those were the
Feel Good Principles.

00:27:26.210 --> 00:27:29.150
Site should be reactive
to users input.

00:27:29.150 --> 00:27:31.640
They should have
predictable user experiences

00:27:31.640 --> 00:27:35.240
and not set up things that
are going to trip up users.

00:27:35.240 --> 00:27:38.293
And users should always be
in control fundamentally.

00:27:41.610 --> 00:27:44.070
And what we've seen actually
in the last 18 months

00:27:44.070 --> 00:27:46.260
from companies shipping
new Progressive Web

00:27:46.260 --> 00:27:48.510
Apps that follow these
principles is really

00:27:48.510 --> 00:27:49.830
good results.

00:27:49.830 --> 00:27:52.480
We've publish a whole bunch on--

00:27:52.480 --> 00:27:54.810
if you Google Progressive
Web App case study,

00:27:54.810 --> 00:27:57.787
you'll find a whole bunch from
lots of different companies.

00:27:57.787 --> 00:27:58.620
This is just a few--

00:27:58.620 --> 00:28:03.000
100% increase in session
duration from Forbes, 170%

00:28:03.000 --> 00:28:04.860
increase in page
views from Twitter,

00:28:04.860 --> 00:28:08.550
and 76% in higher
conversions from Alibaba.

00:28:08.550 --> 00:28:11.510
So this is potentially a very
major impact on business.

00:28:14.230 --> 00:28:17.980
Now I want to talk quickly
about how better UX is now

00:28:17.980 --> 00:28:20.230
being built into browsers
and how you can do things

00:28:20.230 --> 00:28:21.880
that you couldn't
do before thanks

00:28:21.880 --> 00:28:25.480
to these new capabilities
being built in.

00:28:25.480 --> 00:28:27.420
So the first of
these is Smart Lock.

00:28:27.420 --> 00:28:29.620
So Smart Lock is
this capability that

00:28:29.620 --> 00:28:32.380
means that if a user has
ever logged into your service

00:28:32.380 --> 00:28:36.040
on any device, native or on the
web, then when they transition

00:28:36.040 --> 00:28:38.590
to another device they can
be automatically logged

00:28:38.590 --> 00:28:42.220
in without needing to remember
their username and password.

00:28:42.220 --> 00:28:45.730
We find that when users are
presented with a login screen,

00:28:45.730 --> 00:28:47.950
that actually the
majority of them

00:28:47.950 --> 00:28:50.290
often just leave the
site at that point

00:28:50.290 --> 00:28:53.230
and they don't ever make it
through that login screen.

00:28:53.230 --> 00:28:55.180
And so this is a really
key part of your flow

00:28:55.180 --> 00:28:57.250
that you can optimize
with this new capability

00:28:57.250 --> 00:29:00.130
Smart Lock, which is also called
Credential Manager if you're

00:29:00.130 --> 00:29:03.150
looking at up.

00:29:03.150 --> 00:29:06.300
Next, the Payment Request API.

00:29:06.300 --> 00:29:09.420
So the data shows
that approximately 65%

00:29:09.420 --> 00:29:12.030
of users on mobile that
get to a checkout screen

00:29:12.030 --> 00:29:14.520
don't end up completing
that checkout.

00:29:14.520 --> 00:29:16.440
And when we ask them
why, most of them

00:29:16.440 --> 00:29:18.750
say that it's because the
form was too long or too

00:29:18.750 --> 00:29:20.290
hard to fill in.

00:29:20.290 --> 00:29:23.640
And so Payment Request
lets you tell the browser

00:29:23.640 --> 00:29:25.800
what the price is and
what the product is,

00:29:25.800 --> 00:29:28.530
and then the browser will render
this native form that's already

00:29:28.530 --> 00:29:30.450
filled in with all of
the user's information

00:29:30.450 --> 00:29:31.890
that we already have.

00:29:31.890 --> 00:29:34.110
The user can just
tap pay, and then you

00:29:34.110 --> 00:29:35.990
get all of that form
information back.

00:29:35.990 --> 00:29:38.010
You get the credit card
details, the address,

00:29:38.010 --> 00:29:40.040
all of those things
that you would expect,

00:29:40.040 --> 00:29:42.100
but the user it have
to retype them in.

00:29:42.100 --> 00:29:47.100
And so this can be really
big impact on e-commerce.

00:29:47.100 --> 00:29:49.260
And thirdly, Service
Workers allow

00:29:49.260 --> 00:29:52.440
you to build experiences that
work on flaky networks really

00:29:52.440 --> 00:29:54.930
performantly or even
when fully offline.

00:29:54.930 --> 00:29:56.440
So here you can see Konga.

00:29:56.440 --> 00:29:59.229
This is a Progressive
Web App in Africa,

00:29:59.229 --> 00:30:01.020
where they've shipped
their experience such

00:30:01.020 --> 00:30:04.192
that if the user goes offline,
they can look back at items

00:30:04.192 --> 00:30:05.400
they've looked at previously.

00:30:05.400 --> 00:30:07.110
They can you know
take their phone home

00:30:07.110 --> 00:30:09.480
and show their partner
what they were looking

00:30:09.480 --> 00:30:11.460
at even without internet.

00:30:11.460 --> 00:30:13.442
And actually, with
their experience

00:30:13.442 --> 00:30:15.150
when you're on that
product listing page,

00:30:15.150 --> 00:30:16.500
they give you a
phone number to call,

00:30:16.500 --> 00:30:18.390
and you can actually
call that phone number

00:30:18.390 --> 00:30:21.720
and convert on that item without
internet at a later point.

00:30:24.842 --> 00:30:26.300
So these are some
of the new things

00:30:26.300 --> 00:30:27.650
that are possible on the web.

00:30:27.650 --> 00:30:29.780
In fact, in the last
year alone, we've

00:30:29.780 --> 00:30:33.200
shipped over 215 new
APIs on the web--

00:30:33.200 --> 00:30:36.770
new APIs like Web
Bluetooth and Image Capture

00:30:36.770 --> 00:30:39.860
that gives you full control
over the camera and the focus

00:30:39.860 --> 00:30:41.690
and aperture.

00:30:41.690 --> 00:30:44.720
So if you've ever thought, oh,
I can't do that on the web,

00:30:44.720 --> 00:30:46.414
I have to do native
for some reason,

00:30:46.414 --> 00:30:48.830
just go back and take a look
and see if it's now possible.

00:30:48.830 --> 00:30:50.600
Because a lot of
things really are.

00:30:50.600 --> 00:30:53.420
The web has come
a really long way.

00:30:53.420 --> 00:30:57.050
And finally, I'd like to share a
kind of debate that's currently

00:30:57.050 --> 00:31:00.090
going on on the
web in this area.

00:31:00.090 --> 00:31:02.360
So there's this common
question that we get--

00:31:02.360 --> 00:31:05.210
should I tweak my PWA
to visually fit in

00:31:05.210 --> 00:31:07.730
with Android or iOS?

00:31:07.730 --> 00:31:11.690
Especially when running in
immersive mode, what are users,

00:31:11.690 --> 00:31:14.120
what do they expect?

00:31:14.120 --> 00:31:16.340
I think this is a really
fascinating question.

00:31:16.340 --> 00:31:17.887
It's very philosophical.

00:31:17.887 --> 00:31:19.970
Some people would argue
that the web should evolve

00:31:19.970 --> 00:31:23.360
its own aesthetic and its
own design patterns and users

00:31:23.360 --> 00:31:26.750
should become accustomed
to web design as a concept.

00:31:26.750 --> 00:31:29.060
Other people would argue
that you should fully

00:31:29.060 --> 00:31:31.980
adjust how your experience
works on iOS and Android

00:31:31.980 --> 00:31:33.560
like you would a native app.

00:31:33.560 --> 00:31:35.780
At the end of the day, the
user is holding the phone

00:31:35.780 --> 00:31:37.700
and it looks the
same, so why should

00:31:37.700 --> 00:31:40.830
we draw this user experience
barrier based on technology--

00:31:40.830 --> 00:31:42.740
JavaScript versus Java?

00:31:42.740 --> 00:31:44.210
It should be about
the form factor

00:31:44.210 --> 00:31:48.410
and the user's context, which
I think is another great point.

00:31:48.410 --> 00:31:51.410
A really interesting
example of one company's way

00:31:51.410 --> 00:31:53.160
of handling this--

00:31:53.160 --> 00:31:54.680
so this is the
Progressive Web App

00:31:54.680 --> 00:31:57.230
from the city of Barcelona
for their tourists.

00:31:57.230 --> 00:31:58.100
It works offline.

00:31:58.100 --> 00:32:02.360
You can store different sites
and the information and maps.

00:32:02.360 --> 00:32:03.920
And what they've
done is they've kept

00:32:03.920 --> 00:32:07.730
the same fundamental structure
across Android and iOS,

00:32:07.730 --> 00:32:09.890
but they've tweaked the design.

00:32:09.890 --> 00:32:13.160
They've changed the
colors and the typography.

00:32:13.160 --> 00:32:14.660
They've centered the header.

00:32:14.660 --> 00:32:16.850
And they've really made
it feel a little more

00:32:16.850 --> 00:32:19.430
native while keeping the
fundamental underlying

00:32:19.430 --> 00:32:20.900
structure the same.

00:32:20.900 --> 00:32:22.700
This is a really
interesting pattern,

00:32:22.700 --> 00:32:24.410
and I think this
is an area where

00:32:24.410 --> 00:32:27.650
a lot more exploration needs to
happen, a lot more discussion.

00:32:27.650 --> 00:32:30.215
If you have thoughts about
this, I'd love to see blog posts

00:32:30.215 --> 00:32:31.840
and see people trying
different things.

00:32:34.440 --> 00:32:36.390
And finally, if you're
interested in going out

00:32:36.390 --> 00:32:38.820
from here and building
a Progressive Web App,

00:32:38.820 --> 00:32:40.680
trying out what
it's like, there's

00:32:40.680 --> 00:32:44.620
a couple of ways I'd recommend
looking at getting started.

00:32:44.620 --> 00:32:47.080
The first is the Polymer CLI.

00:32:47.080 --> 00:32:49.590
So Polymer recently
released a new command line

00:32:49.590 --> 00:32:53.070
tool that makes it really
easy to get up and running.

00:32:53.070 --> 00:32:54.850
It gives you all of
the basics of an app,

00:32:54.850 --> 00:32:56.280
including service
worker caching,

00:32:56.280 --> 00:32:58.600
all those various aspects.

00:32:58.600 --> 00:33:01.020
And then on the React side,
there's this great tool--

00:33:01.020 --> 00:33:02.716
Create React App,
which lets you get

00:33:02.716 --> 00:33:04.590
started with React
without setting up a whole

00:33:04.590 --> 00:33:05.920
build process.

00:33:05.920 --> 00:33:08.070
You don't have to deal
with Babel or Grunt or Gulp

00:33:08.070 --> 00:33:12.060
or any of those things.

00:33:12.060 --> 00:33:16.020
And in fact, Create React App
just announced at Google I/O

00:33:16.020 --> 00:33:19.590
that any web apps built
with Create React App

00:33:19.590 --> 00:33:21.360
will be Progressive
Web Apps by default.

00:33:21.360 --> 00:33:23.310
They'll have service
workers built in

00:33:23.310 --> 00:33:26.680
and do a lot of these things
just straight out of the box.

00:33:26.680 --> 00:33:30.120
So these are two really
good places to get started.

00:33:30.120 --> 00:33:31.890
And remember that
when you go out

00:33:31.890 --> 00:33:34.892
and start building these
things, use skeleton screens

00:33:34.892 --> 00:33:36.600
and those kind of
techniques to make sure

00:33:36.600 --> 00:33:39.750
that your site is reactive
to the user's input.

00:33:39.750 --> 00:33:43.560
Consider keeping things simple
and using a bottom navigation

00:33:43.560 --> 00:33:45.270
instead of the gestural inputs.

00:33:45.270 --> 00:33:47.820
Or if you do the gestural
input, be thoughtful about it

00:33:47.820 --> 00:33:50.370
so your site is
predictable to users.

00:33:50.370 --> 00:33:52.320
And use techniques
like stable loading

00:33:52.320 --> 00:33:54.300
to ensure that your site
isn't jumping around

00:33:54.300 --> 00:33:56.160
underneath user's
fingers in order

00:33:56.160 --> 00:33:59.340
to keep the user in control.

00:33:59.340 --> 00:34:01.680
And so, I think we have
a couple minutes now

00:34:01.680 --> 00:34:04.260
for Q&amp;A if you'd
like to stick around.

00:34:04.260 --> 00:34:05.915
But otherwise, I've been Owen.

00:34:05.915 --> 00:34:07.290
You've been a
wonderful audience.

00:34:07.290 --> 00:34:10.820
I hope you enjoy the rest
of I/O. Thank you very much.

