WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:03.420
Let's start our discussion with the world's most

00:00:03.420 --> 00:00:07.830
simplest and naive implementation of the lock, and we're

00:00:07.830 --> 00:00:11.130
calling it spinlock because, as you're going to see a

00:00:11.130 --> 00:00:14.050
processor that is waiting for lock has to spin,

00:00:14.050 --> 00:00:17.210
in order to spin, meaning, doing no useful work,

00:00:17.210 --> 00:00:19.610
but it is waiting for the lock to be

00:00:19.610 --> 00:00:22.610
released. And the first one that we're going to look

00:00:22.610 --> 00:00:26.070
at, is what is called spin on testing set.

00:00:26.070 --> 00:00:28.930
The idea is very simple and straightforward. There's

00:00:28.930 --> 00:00:32.439
a shared memory location, L and it can

00:00:32.439 --> 00:00:35.170
have one of two possible values. Either unlocked

00:00:35.170 --> 00:00:37.475
or locked. And let's say that at the.

00:00:37.475 --> 00:00:41.070
at the beginning, we've initialized unlocked, so nobody

00:00:41.070 --> 00:00:44.590
has the lock. And the way to implement

00:00:44.590 --> 00:00:48.190
this naive spinlock algorithm is the following. What

00:00:48.190 --> 00:00:51.100
you do is, you go in and check,

00:00:51.100 --> 00:00:58.290
using test and set primitive, the memory location, L. So when you call this lock

00:00:58.290 --> 00:01:02.655
primitive the lock primitive executes this Instruction

00:01:02.655 --> 00:01:04.950
testant set of L, and what that is

00:01:04.950 --> 00:01:10.510
going to do is, its going to return the old value from L, and set it to

00:01:10.510 --> 00:01:13.150
the new value which is locked, that's going to

00:01:13.150 --> 00:01:16.030
be done automatically, we that from the architecture,

00:01:16.030 --> 00:01:20.560
that it is going to provide you that, that is a primitive, and so

00:01:20.560 --> 00:01:26.460
now, if we find that this test and and set,

00:01:26.460 --> 00:01:31.122
instruction execution returns the value locked, it means that somebody else

00:01:31.122 --> 00:01:33.460
has bought the lock. And therefore, I cannot

00:01:33.460 --> 00:01:35.820
use it and i'm going to basically spin here. That's

00:01:35.820 --> 00:01:37.640
why its called spin on test and set,

00:01:37.640 --> 00:01:41.150
so you're basically spinning waiting for this test and

00:01:41.150 --> 00:01:46.210
set instruction to return to me. A value that says, the

00:01:46.210 --> 00:01:48.690
old value is unlocked. If I, if it gives me, the old

00:01:48.690 --> 00:01:50.906
value is unlocked, then I know I won. But if I

00:01:50.906 --> 00:01:53.360
don't, then I, basically, I'm going to wait here. That's why it's called

00:01:53.360 --> 00:01:56.610
spinning on test and set. So let's put up some threads

00:01:56.610 --> 00:01:59.840
here that are trying to get this lock. And, so let's say

00:01:59.840 --> 00:02:02.930
that T 1 is the first one to make a test and

00:02:02.930 --> 00:02:06.190
set call on this lock, and it finds it unlocked, and therefore,

00:02:06.190 --> 00:02:08.906
it locks it. And once it locks it, T1 knows

00:02:08.906 --> 00:02:11.980
that it's got the lock. So, it's got the lock, it

00:02:11.980 --> 00:02:14.460
can go off to messing with the data structure that

00:02:14.460 --> 00:02:17.710
it wants to mess with, and that is good. So far

00:02:17.710 --> 00:02:21.460
as T1 is concerned. In the meanwhile, T2 and T3

00:02:21.460 --> 00:02:24.090
may come along and say well, we also want the lock,

00:02:24.090 --> 00:02:28.050
and they also execute the same lock algorithm. And when

00:02:28.050 --> 00:02:31.970
they execute the lock algorithm, they're going to do the Test-and-Set and

00:02:31.970 --> 00:02:35.620
you know that the Test-and-Set when they do that, the

00:02:35.620 --> 00:02:37.840
old value that is going to be returned for T2 or

00:02:37.840 --> 00:02:40.600
T3 is going to be that the value L is locked

00:02:40.600 --> 00:02:44.080
and therefore these two guys, both T2 and T3 are stuck

00:02:44.080 --> 00:02:46.800
here. How long are they going to be stuck? Until this

00:02:46.800 --> 00:02:50.150
guy releases the lock, and the way to do that

00:02:50.150 --> 00:02:53.190
is very simple. So he comes along and calls an

00:02:53.190 --> 00:02:57.320
unlock function, and what the unlock function does, is it basically

00:02:57.320 --> 00:03:00.170
goes in, and clears this lock. Meaning it

00:03:00.170 --> 00:03:03.470
resets this lock to the unlocked state. And, and

00:03:03.470 --> 00:03:06.130
so once it does that, then this lock becomes

00:03:06.130 --> 00:03:09.420
available. So, it becomes unlocked and at this point,

00:03:09.420 --> 00:03:13.010
T2 and T3 were stuck here. When they

00:03:13.010 --> 00:03:16.030
tried to do this testing set again, they're going to

00:03:16.030 --> 00:03:19.460
find, at least one of them hopefully exactly one

00:03:19.460 --> 00:03:22.540
of them, is going to find that, that the lock

00:03:22.540 --> 00:03:24.610
is unlocked and therefore they're going to get it.

00:03:24.610 --> 00:03:26.370
And one of them will get it, and,

00:03:26.370 --> 00:03:30.740
will, will go on to executing whatever code

00:03:30.740 --> 00:03:32.750
they want to do, and the protection of the

00:03:32.750 --> 00:03:38.160
lock, and so only exactly one of T2 or T3 will win, because that's a semantic

00:03:38.160 --> 00:03:40.720
of test and set. So that's the world's

00:03:40.720 --> 00:03:45.280
simplest lock algorithm, spinning on test and set.

