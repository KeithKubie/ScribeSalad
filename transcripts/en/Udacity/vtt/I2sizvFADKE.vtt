WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now, I want to say right here

00:00:03.000 --> 00:00:06.000
that I made a mistake, and I haven't talked about this very much

00:00:06.000 --> 00:00:11.000
over the course of these lectures, but I'm making mistakes all the time.

00:00:11.000 --> 00:00:15.000
I know you guys are. You type something in, it doesn't work.

00:00:15.000 --> 00:00:17.000
I have the same problem over and over again.

00:00:17.000 --> 00:00:20.000
I keep making mistakes, and that's fine as long as I know how to correct them.

00:00:20.000 --> 00:00:25.000
Here the mistake I made is--the mechanical mistake was

00:00:25.000 --> 00:00:27.000
I messed up, and I typed the wrong function at one point.

00:00:27.000 --> 00:00:29.000
I think these function names are too similar,

00:00:29.000 --> 00:00:33.000
and I made a mistake in naming them max_diffs and win_diff.

00:00:33.000 --> 00:00:36.000
They sound too much alike, and when I was playing with this

00:00:36.000 --> 00:00:42.000
I put in the utility function where I meant to put in the strategy function,

00:00:42.000 --> 00:00:46.000
and that's an easy mistake to make because they sound the same.

00:00:46.000 --> 00:00:48.000
Probably I should have come up with better names.

00:00:48.000 --> 00:00:51.000
I should have called this windiffutility or something like that

00:00:51.000 --> 00:00:54.000
to make it clear that this is the utility function

00:00:54.000 --> 00:00:57.000
and this is the strategy function, but the annoying thing was

00:00:57.000 --> 00:01:02.000
that mistake went unnoticed for a while, and I'll show you part of the problem.

00:01:02.000 --> 00:01:06.000
Here's the play_pig function. It takes two strategies: A and B.

00:01:06.000 --> 00:01:09.000
These have to be strategy functions, and then it comes down here,

00:01:09.000 --> 00:01:12.000
and it applies the appropriate strategy function to a state,

00:01:12.000 --> 00:01:16.000
and it says if that strategy function decides to hold,

00:01:16.000 --> 00:01:19.000
then we do the hold action, otherwise--

00:01:19.000 --> 00:01:22.000
well, there's only 2 actions you could do, so I'll do the roll action.

00:01:22.000 --> 00:01:24.000
That makes sense, right? Now here's the problem.

00:01:24.000 --> 00:01:31.000
If instead of passing in a strategy function you accidentally pass in a utility function,

00:01:31.000 --> 00:01:33.000
then that's all good down here.

00:01:33.000 --> 00:01:39.000
You say strategies of P apply to state, and that's really applying a utility function to state,

00:01:39.000 --> 00:01:41.000
what's the utility function going to return?

00:01:41.000 --> 00:01:44.000
Well, it's going to return a number, and play_pig just says,

00:01:44.000 --> 00:01:47.000
"Well, does that number equal to hold?" No, it's not.

00:01:47.000 --> 00:01:49.000
No numbers are equal to hold.

00:01:49.000 --> 00:01:52.000
So then I'm just going to assume that you meant roll.

00:01:52.000 --> 00:01:55.000
And so the fact that I passed in a completely wrong function

00:01:55.000 --> 00:01:59.000
that's doing nothing related to strategy--

00:01:59.000 --> 00:02:02.000
it's returning a number rather than an action--

00:02:02.000 --> 00:02:04.000
went completely unnoticed, and instead what my strategy was--

00:02:04.000 --> 00:02:10.000
the utility function that returns a number acted as if it was a strategy function

00:02:10.000 --> 00:02:12.000
that always said roll.

00:02:12.000 --> 00:02:15.000
Now, in general, that's one of the complaints that people have about Python

00:02:15.000 --> 00:02:17.000
is that it's too easy to make that mistake

00:02:17.000 --> 00:02:20.000
because you don't have to declare for each function

00:02:20.000 --> 00:02:23.000
what are its inputs and what are its outputs.

00:02:23.000 --> 00:02:27.000
In other languages, you would do that, and the program

00:02:27.000 --> 00:02:30.000
where you accidentally used a utility function

00:02:30.000 --> 00:02:32.000
where you expected a strategy function--

00:02:32.000 --> 00:02:35.000
that program wouldn't even compile. You'd get an error message before you ran it.

00:02:35.000 --> 00:02:37.000
In Python, you don't have that protection,

00:02:37.000 --> 09:59:59.000
so you've got to build in the protection yourself.

