WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:01.396
TSAHI LEVENT-LEVI: OK.

00:00:03.480 --> 00:00:07.540
I'm Tsahi Levent-Levi, the
person behind BlogGeek.Me.

00:00:07.540 --> 00:00:10.900
I'm going to talk now a
little bit about WebRTC.

00:00:10.900 --> 00:00:13.460
I'm not going to go too
deep in the technical side,

00:00:13.460 --> 00:00:16.400
because we only have 20 minutes,
and some of you know WebRTC,

00:00:16.400 --> 00:00:18.640
some of you don't.

00:00:18.640 --> 00:00:21.470
So first of all, thank you for
the opportunity for being here.

00:00:21.470 --> 00:00:24.270
And I hope not to
bore you too much.

00:00:24.270 --> 00:00:26.610
What we're going to talk
about first in 20 minutes

00:00:26.610 --> 00:00:29.100
is what exactly is WebRTC?

00:00:29.100 --> 00:00:30.320
What is it here to solve?

00:00:30.320 --> 00:00:32.409
How does it achieve that?

00:00:32.409 --> 00:00:35.000
The different types of
entities in WebRTC-- something

00:00:35.000 --> 00:00:37.080
that usually people miss.

00:00:37.080 --> 00:00:39.380
It's not only by having
something in the browser,

00:00:39.380 --> 00:00:42.240
and you can run off
and do things with it.

00:00:42.240 --> 00:00:44.080
You can, but not much.

00:00:44.080 --> 00:00:46.930
And then if you want to
actually learn WebRTC,

00:00:46.930 --> 00:00:48.489
where can you go to learn that?

00:00:48.489 --> 00:00:50.280
Because I'm not going
to be able to achieve

00:00:50.280 --> 00:00:53.040
that in these 20 minutes.

00:00:53.040 --> 00:00:55.460
So what is WebRTC?

00:00:55.460 --> 00:00:58.570
If you go and look for
the dictionary definition,

00:00:58.570 --> 00:01:00.580
it will be something like that.

00:01:00.580 --> 00:01:04.780
WebRTC offers real-time
communication running natively

00:01:04.780 --> 00:01:06.750
from a web browser.

00:01:06.750 --> 00:01:10.040
That's only part true,
and we'll see later why.

00:01:10.040 --> 00:01:12.860
But that's, at least,
the nature of it.

00:01:12.860 --> 00:01:15.110
And then if you come from
the Voice over IP space,

00:01:15.110 --> 00:01:17.390
like me, then for
you, WebRTC is simply

00:01:17.390 --> 00:01:20.990
a media engine that got
trapped with a JavaScript API

00:01:20.990 --> 00:01:22.980
on top of it, OK?

00:01:22.980 --> 00:01:26.110
So we have a standard API
on top a media engine--

00:01:26.110 --> 00:01:29.330
nothing that interesting.

00:01:29.330 --> 00:01:32.200
Something to remember--
WebRTC is only a technology.

00:01:32.200 --> 00:01:34.370
It is not a solution.

00:01:34.370 --> 00:01:37.940
I usually get questions like,
well, can WebRTC do this?

00:01:37.940 --> 00:01:39.440
Well, it can, but not alone.

00:01:39.440 --> 00:01:42.360
You need to add something
to it in order to get there.

00:01:42.360 --> 00:01:46.120
You can't compare WebRTC
to a full service.

00:01:46.120 --> 00:01:49.400
But you can build a
service on top of WebRTC.

00:01:49.400 --> 00:01:51.420
So it is a piece of technology.

00:01:51.420 --> 00:01:55.740
Whatever you do with
it, that's fine.

00:01:55.740 --> 00:01:58.080
How are calls made with WebRTC?

00:01:58.080 --> 00:02:00.320
We've got our two browsers here.

00:02:00.320 --> 00:02:04.340
You'll see these logos
probably along this day a lot.

00:02:04.340 --> 00:02:08.610
And we've got a web server.

00:02:08.610 --> 00:02:09.110
Now.

00:02:09.110 --> 00:02:13.200
The first browser is going to
send a message to the server.

00:02:13.200 --> 00:02:15.150
This server is going
to send that message

00:02:15.150 --> 00:02:18.260
or relay that to
the other browser.

00:02:18.260 --> 00:02:18.760
Now.

00:02:18.760 --> 00:02:23.000
This is a request-- an
offer-- to make a call.

00:02:23.000 --> 00:02:25.810
The result is going to be
that the Firefox browser here

00:02:25.810 --> 00:02:29.100
is going to send a response--
a line to that-- in answer

00:02:29.100 --> 00:02:30.580
to the offer.

00:02:30.580 --> 00:02:35.570
And that message is going to
get to that other browser.

00:02:35.570 --> 00:02:38.640
Once that happens,
the magic begins.

00:02:38.640 --> 00:02:41.220
And we've got this
line over here

00:02:41.220 --> 00:02:43.670
that can send any type
of vibratory data.

00:02:43.670 --> 00:02:47.600
It can be voice, video,
or something else.

00:02:47.600 --> 00:02:51.290
Those of you that know Voice
over IP look at this and say,

00:02:51.290 --> 00:02:53.982
well, that's SIP.

00:02:53.982 --> 00:02:54.940
We know how to do that.

00:02:54.940 --> 00:02:56.730
Nothing new here.

00:02:56.730 --> 00:03:00.600
But if what you are doing is
web browsers and HTML code,

00:03:00.600 --> 00:03:02.760
you look at that
and you say, well, I

00:03:02.760 --> 00:03:06.350
could never send a message
directly across browsers.

00:03:06.350 --> 00:03:10.570
This is fundamentally different
than how browsing or browsers

00:03:10.570 --> 00:03:13.180
worked up until WebRTC.

00:03:13.180 --> 00:03:15.620
And this is something
we need to remember.

00:03:15.620 --> 00:03:20.830
Now, what goes on in 1, 2, 3,
and 4 isn't necessarily WebRTC.

00:03:20.830 --> 00:03:24.110
It's just signaling, which
isn't a part of WebRTC.

00:03:24.110 --> 00:03:27.230
Again, we'll see that later.

00:03:27.230 --> 00:03:30.640
WebRTC comes with
three main API blocks.

00:03:30.640 --> 00:03:32.810
The first one is GetUserMedia.

00:03:32.810 --> 00:03:36.240
GetUserMedia allows you to
access from the browser using

00:03:36.240 --> 00:03:39.730
JavaScript, your camera, your
microphone, or the screen

00:03:39.730 --> 00:03:41.900
itself to capture the screen.

00:03:41.900 --> 00:03:45.300
You can take that data and
do whatever you want with it.

00:03:45.300 --> 00:03:46.180
Leave the other two.

00:03:46.180 --> 00:03:48.020
Don't do anything with them.

00:03:48.020 --> 00:03:50.190
You can now take
a photo of someone

00:03:50.190 --> 00:03:53.360
and put it on his profile,
on whatever social network

00:03:53.360 --> 00:03:54.700
you want to build with it.

00:03:54.700 --> 00:03:58.347
MailChimp is doing that already.

00:03:58.347 --> 00:03:59.930
So there are things
you can do with it

00:03:59.930 --> 00:04:03.520
that don't relate to
communication at all.

00:04:03.520 --> 00:04:04.990
Then you've got PeerConnection.

00:04:04.990 --> 00:04:07.690
For me, PeerConnection
is WebRTC.

00:04:07.690 --> 00:04:11.870
Everything that goes in
WebRTC goes in PeerConnection.

00:04:11.870 --> 00:04:14.840
It gets you the signaling
stuff or at least the stuff

00:04:14.840 --> 00:04:18.160
it needs to negotiate what
codecs are being used.

00:04:18.160 --> 00:04:20.529
Is it only voice
call or a video call?

00:04:20.529 --> 00:04:22.343
Is there a data channel there?

00:04:22.343 --> 00:04:26.060
Is there more than a single
video channel, for example?

00:04:26.060 --> 00:04:27.605
It sends that data
over the line.

00:04:27.605 --> 00:04:29.980
It then codes and decodes the
stuff that you are sending.

00:04:29.980 --> 00:04:31.960
It does everything.

00:04:31.960 --> 00:04:34.296
And it deals with NAT traversal.

00:04:34.296 --> 00:04:35.670
And then there's
the DataChannel.

00:04:35.670 --> 00:04:39.040
The DataChannel simply allows
us to send whatever type of data

00:04:39.040 --> 00:04:42.180
we want across
browsers without going

00:04:42.180 --> 00:04:45.800
through any server
along the way.

00:04:45.800 --> 00:04:48.870
These are the types
of APIs we have.

00:04:48.870 --> 00:04:50.540
So why all the fuss?

00:04:50.540 --> 00:04:52.120
We have a media engine.

00:04:52.120 --> 00:04:54.240
Nothing new there, OK?

00:04:54.240 --> 00:04:57.460
You can say that the codecs are
the latest ones, not the latest

00:04:57.460 --> 00:04:59.380
ones, are better codecs.

00:04:59.380 --> 00:05:02.580
But at the end of the day, it's
the same type of technology

00:05:02.580 --> 00:05:05.160
that exists in any
videoconferencing solution

00:05:05.160 --> 00:05:09.420
today and any Voice over
IP call that you make.

00:05:09.420 --> 00:05:11.860
So what makes it so different?

00:05:11.860 --> 00:05:13.970
First of all, it's free.

00:05:13.970 --> 00:05:15.004
It's open sourced.

00:05:15.004 --> 00:05:15.670
It is out there.

00:05:15.670 --> 00:05:17.172
You can take it,
use it, compile it,

00:05:17.172 --> 00:05:18.380
do whatever you want with it.

00:05:18.380 --> 00:05:23.010
It's already-- let's call it
preinstalled inside browsers.

00:05:23.010 --> 00:05:25.710
It's wrapped there,
so you can use it.

00:05:25.710 --> 00:05:28.220
Before WebRTC, that
would have cost you

00:05:28.220 --> 00:05:31.530
anywhere between
$50,000 to $200,000

00:05:31.530 --> 00:05:34.320
just to start working with
it, not including royalties

00:05:34.320 --> 00:05:36.490
that you needed to pay.

00:05:36.490 --> 00:05:37.740
So that's a huge deal.

00:05:37.740 --> 00:05:40.240
It's a reduction of barrier
of entry to new players

00:05:40.240 --> 00:05:42.450
into this field.

00:05:42.450 --> 00:05:46.020
If it was only that,
I would even be happy.

00:05:46.020 --> 00:05:49.910
Coming from someone that did
in his past video conferencing

00:05:49.910 --> 00:05:52.970
solutions, that's huge.

00:05:52.970 --> 00:05:56.410
The second thing is even bigger.

00:05:56.410 --> 00:06:02.270
This is for web developers,
not Voice over IP developers.

00:06:02.270 --> 00:06:03.720
It is a huge difference.

00:06:03.720 --> 00:06:05.550
I come from a Voice
over IP space.

00:06:05.550 --> 00:06:07.720
I've got my upbringing.

00:06:07.720 --> 00:06:09.790
There are certain
things that I know

00:06:09.790 --> 00:06:12.960
how you do to build
Voice over IP solutions.

00:06:12.960 --> 00:06:16.960
So my mind is already narrowed
to this kind of thinking.

00:06:16.960 --> 00:06:19.270
There are lot many
other web developers

00:06:19.270 --> 00:06:24.180
that don't have these kinds of
restrictions built into them.

00:06:24.180 --> 00:06:28.460
And now we're unleashing this
kind of a solution to them.

00:06:28.460 --> 00:06:30.730
So this is going to change
a lot of things out there.

00:06:33.370 --> 00:06:36.440
Where is WebRTC happening today?

00:06:36.440 --> 00:06:40.650
We've got Firefox and Chrome,
of course, supporting it,

00:06:40.650 --> 00:06:42.370
also Opera, not included here.

00:06:42.370 --> 00:06:46.250
But Opera is also one of the
browsers that support it.

00:06:46.250 --> 00:06:48.650
And then you have Internet
Explorer and Safari

00:06:48.650 --> 00:06:52.146
that don't have WebRTC
build into to them.

00:06:52.146 --> 00:06:55.170
There are plug-in solutions
in these browsers.

00:06:55.170 --> 00:06:58.890
But it doesn't come
natively from the browser.

00:06:58.890 --> 00:07:00.910
In terms of the
history, Chris already

00:07:00.910 --> 00:07:05.700
said, May 2011,
WebRTC was announced.

00:07:05.700 --> 00:07:08.700
A few months later,
near the end of 2011,

00:07:08.700 --> 00:07:11.630
we had the first browser
supporting WebRTC.

00:07:11.630 --> 00:07:13.190
It supported only part of it.

00:07:13.190 --> 00:07:14.170
It didn't really work.

00:07:14.170 --> 00:07:19.280
The echo cancellation was the
worst ever, but it worked.

00:07:19.280 --> 00:07:21.680
Now nothing happened in 2012.

00:07:21.680 --> 00:07:24.010
That seems like a lost year.

00:07:24.010 --> 00:07:27.260
But I started somewhere
in 2012 to actually look

00:07:27.260 --> 00:07:30.580
at companies that do
things with WebRTC.

00:07:30.580 --> 00:07:32.610
And from beginning
to end, we went

00:07:32.610 --> 00:07:35.920
from a zero number of
vendors that use WebRTC

00:07:35.920 --> 00:07:40.710
to 100 vendors that tinker
and build stuff with WebRTC.

00:07:40.710 --> 00:07:43.890
And without having a
standard at that point

00:07:43.890 --> 00:07:47.610
with a single browser that
almost didn't work with WebRTC

00:07:47.610 --> 00:07:50.090
and changed consistently
the types of APIs

00:07:50.090 --> 00:07:55.370
it provided, and still,
we had 100 vendors.

00:07:55.370 --> 00:08:02.050
2013, we had Firefox on
board in second part of 2013.

00:08:02.050 --> 00:08:03.380
We had mobile support.

00:08:03.380 --> 00:08:07.090
Both Firefox and Chrome came
out with our Android support

00:08:07.090 --> 00:08:08.930
for WebRTC.

00:08:08.930 --> 00:08:12.290
At the end of 2013--
it's not here--

00:08:12.290 --> 00:08:14.510
Opera provided WebRTC
on the desktop,

00:08:14.510 --> 00:08:16.710
and later on at the
beginning of this year,

00:08:16.710 --> 00:08:20.190
on mobile on Android.

00:08:20.190 --> 00:08:21.470
If we look at mobile.

00:08:21.470 --> 00:08:23.700
mobile is tricky for WebRTC.

00:08:23.700 --> 00:08:26.180
I took the liberty of going
to the Google Play Store

00:08:26.180 --> 00:08:30.810
and look at what gets
installed, what people download.

00:08:30.810 --> 00:08:32.240
So you see the browsers here.

00:08:32.240 --> 00:08:36.539
The purple are browsers that
don't have WebRTC support.

00:08:36.539 --> 00:08:40.309
The green are browsers
that have WebRTC support.

00:08:40.309 --> 00:08:43.480
And that's in the millions
or hundreds of millions.

00:08:46.030 --> 00:08:47.340
That's not much.

00:08:47.340 --> 00:08:51.130
We've got more than a billion
activations for Android today.

00:08:51.130 --> 00:08:53.560
And the most popular
browser is somewhere here

00:08:53.560 --> 00:08:56.570
at 300 million downloads.

00:08:56.570 --> 00:08:59.450
And it gets forced
on users today.

00:08:59.450 --> 00:09:02.580
So if you are thinking, well,
I'm going to build something.

00:09:02.580 --> 00:09:04.900
It's going to run on
the mobile immediately,

00:09:04.900 --> 00:09:08.260
because I've got it using
WebRTC on the web-- not going

00:09:08.260 --> 00:09:09.270
to happen.

00:09:09.270 --> 00:09:12.730
If will take more time for us
to reach there as an industry.

00:09:12.730 --> 00:09:15.110
I've also taken
the liberty to look

00:09:15.110 --> 00:09:17.780
at what other things
people download.

00:09:17.780 --> 00:09:23.110
So anyone here has Candy
Crush on his phone?

00:09:23.110 --> 00:09:25.710
OK, we've got only
three souls that

00:09:25.710 --> 00:09:27.070
are actually telling the truth.

00:09:27.070 --> 00:09:28.330
[LAUGHTER]

00:09:28.330 --> 00:09:28.830
I don't.

00:09:28.830 --> 00:09:33.550
But I get too many requests to
play Candy Crush on Facebook.

00:09:33.550 --> 00:09:35.680
And then we have
Facebook and WhatsApp

00:09:35.680 --> 00:09:38.890
messaging systems,
communication solutions.

00:09:38.890 --> 00:09:43.370
And they are somewhere on top
of the 500 million downloads.

00:09:43.370 --> 00:09:46.470
So today, WebRTC
on mobile is hard.

00:09:46.470 --> 00:09:48.950
And I would say that at
this point in time, for most

00:09:48.950 --> 00:09:52.200
of the use cases, it would
require an application.

00:09:52.200 --> 00:09:55.410
So you'll take WebRTC,
wrap it in an SDK,

00:09:55.410 --> 00:09:58.060
and then compile it
into your application.

00:09:58.060 --> 00:10:00.260
You can still use
HTML5 inside that

00:10:00.260 --> 00:10:02.530
in many different techniques.

00:10:02.530 --> 00:10:05.610
And Google already
announced at Google I/O

00:10:05.610 --> 00:10:08.440
that WebRTC is going
to be inside WebView

00:10:08.440 --> 00:10:12.740
later this year with
Android L, so things

00:10:12.740 --> 00:10:16.865
are improving and
improving fast.

00:10:16.865 --> 00:10:18.020
But we're not there yet.

00:10:18.020 --> 00:10:21.150
And we're not there yet even
in the terms of developers.

00:10:21.150 --> 00:10:23.190
So yes, we're saying
web developers.

00:10:23.190 --> 00:10:27.030
There is more web developers
than Voice over IP developers.

00:10:27.030 --> 00:10:29.160
I took the liberty
to look at LinkedIn

00:10:29.160 --> 00:10:31.550
and see how many people
there have WebRTC

00:10:31.550 --> 00:10:36.800
in their profile--
almost 3,000 people.

00:10:36.800 --> 00:10:42.150
Voice over IP--
more than 800,000.

00:10:42.150 --> 00:10:47.120
So we're an abysmally small team
of people that look at WebRTC

00:10:47.120 --> 00:10:48.760
and see that as
part of the things

00:10:48.760 --> 00:10:52.870
that we know how to deal
with it-- not enough.

00:10:52.870 --> 00:10:55.930
Going to another high
technology, big data--

00:10:55.930 --> 00:11:03.280
not even a technology, only a
concept-- not even 1% of that.

00:11:03.280 --> 00:11:05.250
So WebRTC is not hyped.

00:11:05.250 --> 00:11:08.250
It is very small, and
it's growing nicely,

00:11:08.250 --> 00:11:12.200
if you look at as time goes by.

00:11:12.200 --> 00:11:14.860
Let's look at the
entities of WebRTC.

00:11:14.860 --> 00:11:17.280
WebRTC, first and
foremost for me,

00:11:17.280 --> 00:11:21.060
at least, is an implementation
of SRTP-- Secure Real-Time

00:11:21.060 --> 00:11:25.010
Protocol-- with an SDP control
mechanism on top of it.

00:11:25.010 --> 00:11:30.560
SRTP-- signaling protocol
that is used to send media--

00:11:30.560 --> 00:11:34.490
voice and video, in this
case, and SDP is a way for us

00:11:34.490 --> 00:11:37.780
to explain what it is
that we want to send.

00:11:37.780 --> 00:11:40.630
I think that things
that exist in WebRTC

00:11:40.630 --> 00:11:41.740
will have a media engine.

00:11:41.740 --> 00:11:43.239
And then that media
engine will have

00:11:43.239 --> 00:11:46.220
an implementation of three
codecs-- two voice codecs,

00:11:46.220 --> 00:11:50.720
G.711 and Opus, and one video
codec, VP8, at least today.

00:11:53.790 --> 00:11:55.440
In terms of the
VoIP implementation,

00:11:55.440 --> 00:11:58.890
we are using in WebRTC
STUN, TURN, and ICE

00:11:58.890 --> 00:12:02.020
to do NAT traversal.

00:12:02.020 --> 00:12:03.560
And we need NAT traversal.

00:12:03.560 --> 00:12:06.480
We'll see that in a moment.

00:12:06.480 --> 00:12:09.710
On the client side, this
is what WebRTC gives you--

00:12:09.710 --> 00:12:11.290
only this part.

00:12:11.290 --> 00:12:13.600
The rest of the
slides in this area

00:12:13.600 --> 00:12:15.900
are things that
WebRTC doesn't provide

00:12:15.900 --> 00:12:18.720
but you need to have
in your network.

00:12:18.720 --> 00:12:20.830
On the client side,
we have a browser.

00:12:20.830 --> 00:12:23.470
Chrome and Firefox
supporting WebRTC.

00:12:23.470 --> 00:12:25.190
So that's green for us.

00:12:25.190 --> 00:12:28.090
Internet Explorer and
Safari don't support them,

00:12:28.090 --> 00:12:30.800
can be solved with
plug-ins in the areas

00:12:30.800 --> 00:12:34.480
or for the use case
that allow plug-ins.

00:12:34.480 --> 00:12:35.110
Going on.

00:12:35.110 --> 00:12:38.140
On mobile, Android browsers,
some of them support it.

00:12:38.140 --> 00:12:39.210
Some of them don't.

00:12:39.210 --> 00:12:41.070
So we are not
necessarily sure what

00:12:41.070 --> 00:12:43.530
happens when we
want to run a use

00:12:43.530 --> 00:12:45.620
case on mobile in a browser.

00:12:45.620 --> 00:12:49.220
iOS browsers don't support it.

00:12:49.220 --> 00:12:52.540
And you cannot support it
in an iOS browser today

00:12:52.540 --> 00:12:56.580
because of the way the App Store
is built and the rules that

00:12:56.580 --> 00:12:58.840
exist there.

00:12:58.840 --> 00:13:00.500
And then you have SDKs and apps.

00:13:00.500 --> 00:13:04.870
You can also always take WebRTC,
port it into iOS and Android,

00:13:04.870 --> 00:13:06.340
run your application
on top of it.

00:13:06.340 --> 00:13:10.150
And there are many use cases
that are already doing that.

00:13:10.150 --> 00:13:12.660
If you want a PC
application, again, there

00:13:12.660 --> 00:13:14.910
is the case that
it can run on a PC

00:13:14.910 --> 00:13:17.380
and you can wrap your
application on top.

00:13:17.380 --> 00:13:20.040
So you can do a PC
application if you want.

00:13:20.040 --> 00:13:22.450
And if you want to go
for an embedded system,

00:13:22.450 --> 00:13:26.360
you can again port
the SDK and use it.

00:13:26.360 --> 00:13:28.080
So in terms of the
clients, you can

00:13:28.080 --> 00:13:31.720
get availability in
many places with WebRTC.

00:13:31.720 --> 00:13:34.000
None of them are, let's
say, the pure WebRTC,

00:13:34.000 --> 00:13:35.834
which is only the browsers.

00:13:35.834 --> 00:13:37.750
But we're talking about
real-life deployments.

00:13:37.750 --> 00:13:40.410
And we don't really care
if the standard allows it

00:13:40.410 --> 00:13:44.700
or not, or if that's
how it should be or not.

00:13:44.700 --> 00:13:49.900
Signaling-- WebRTC comes with
bring-your-own signaling.

00:13:49.900 --> 00:13:52.540
Whatever you want to
use for signaling,

00:13:52.540 --> 00:13:54.362
this is what you're going to do.

00:13:54.362 --> 00:13:55.320
It means the following.

00:13:55.320 --> 00:13:59.920
If I want to reach out to you
and do a call with you, now

00:13:59.920 --> 00:14:02.100
as a developer,
someone needs to decide

00:14:02.100 --> 00:14:06.040
how that happens because I
don't know his IP address.

00:14:06.040 --> 00:14:08.720
And for me to get that, someone
needs to negotiate that.

00:14:08.720 --> 00:14:10.940
So I have a web
server in between

00:14:10.940 --> 00:14:13.050
that does that negotiation.

00:14:13.050 --> 00:14:15.930
That server can be
a social network.

00:14:15.930 --> 00:14:18.520
It can be a website that
deals with e-commerce,

00:14:18.520 --> 00:14:21.500
a blog, or anything
else that I want.

00:14:21.500 --> 00:14:24.850
I can use different type
of signaling mechanism,

00:14:24.850 --> 00:14:28.060
depending on what it is
that I want to achieve.

00:14:28.060 --> 00:14:32.150
And I urge you to think
well before you decide

00:14:32.150 --> 00:14:34.460
on the signaling mechanism
that you are going to use.

00:14:37.010 --> 00:14:39.310
Usually, people will stop here.

00:14:39.310 --> 00:14:42.015
And then we've got the
issue of NAT traversal.

00:14:42.015 --> 00:14:46.890
And in NAT traversal,
there is this minor nuance.

00:14:46.890 --> 00:14:49.230
Let me find it.

00:14:49.230 --> 00:14:50.980
Let's see if I can run it.

00:14:50.980 --> 00:14:53.020
If I check what's
my IP addresses,

00:14:53.020 --> 00:14:57.360
it's 216 something--
blah, blah, blah.

00:14:57.360 --> 00:14:59.280
[COMPUTER AD PLAYBACK]

00:14:59.280 --> 00:15:01.600
We can close this one.

00:15:01.600 --> 00:15:12.830
But if we actually check my
IP address, it's actually 192.

00:15:12.830 --> 00:15:14.630
So I have two IP addresses.

00:15:14.630 --> 00:15:18.270
One is an internal IP
address that only I know,

00:15:18.270 --> 00:15:21.310
or the people within
my local network know.

00:15:21.310 --> 00:15:24.100
And there's the
public IP address.

00:15:24.100 --> 00:15:25.900
And if I want to reach
out to someone else

00:15:25.900 --> 00:15:28.250
or if someone needs
to reach me, they

00:15:28.250 --> 00:15:31.110
need to be able to know
my public IP address.

00:15:31.110 --> 00:15:32.530
Otherwise, they can't reach me.

00:15:32.530 --> 00:15:35.060
But I don't know that one.

00:15:35.060 --> 00:15:38.370
STUN is a protocol that allows
us to solve exactly that.

00:15:38.370 --> 00:15:39.850
It does a similar
thing to what I

00:15:39.850 --> 00:15:42.650
did with a website
just a second ago.

00:15:42.650 --> 00:15:43.677
You ask the question.

00:15:43.677 --> 00:15:45.510
You go to a STUN server
that you know about.

00:15:45.510 --> 00:15:47.580
You ask him, what's
my IP address?

00:15:47.580 --> 00:15:48.590
You get a response.

00:15:48.590 --> 00:15:53.910
And that, generally, will
create a pinhole in the net

00:15:53.910 --> 00:15:56.660
where someone will
be able to reach me.

00:15:56.660 --> 00:15:58.220
It doesn't always work.

00:15:58.220 --> 00:16:00.530
But when it works, it's good.

00:16:00.530 --> 00:16:03.630
And it doesn't takes a lot
of networking resources.

00:16:03.630 --> 00:16:08.720
So most STUN servers
today are relatively free.

00:16:08.720 --> 00:16:11.192
When that doesn't
work, we have TURN.

00:16:11.192 --> 00:16:13.450
TURN will relay that
media through a server--

00:16:13.450 --> 00:16:16.480
an external server that
will receive all of the data

00:16:16.480 --> 00:16:18.980
and stream it to someone else,
to the other side because we

00:16:18.980 --> 00:16:21.230
can't reach them directly.

00:16:21.230 --> 00:16:24.730
So we went from a peer-to-peer
direct connection to a point

00:16:24.730 --> 00:16:27.740
where we need to relay that
media through a server.

00:16:27.740 --> 00:16:30.930
And that happens, well,
10, 20% of the sessions.

00:16:30.930 --> 00:16:33.760
Again, it will depend on
the use case that you have

00:16:33.760 --> 00:16:36.960
and the types of networks
you need to go and talk.

00:16:36.960 --> 00:16:39.280
TURN is a bandwidth
hog because it

00:16:39.280 --> 00:16:41.130
sends all the media through it.

00:16:41.130 --> 00:16:45.000
And this is why these things
are usually secured and usually

00:16:45.000 --> 00:16:46.690
don't open them
up for every one.

00:16:46.690 --> 00:16:50.820
You will only install it and
run it for your own use case.

00:16:50.820 --> 00:16:52.460
So we had signaling.

00:16:52.460 --> 00:16:54.070
We had STUN and TURN servers.

00:16:54.070 --> 00:16:56.260
We need to deploy
all these three.

00:16:56.260 --> 00:16:58.770
We might need to deploy
other servers as well,

00:16:58.770 --> 00:17:01.550
if we need to deal with
other kinds of media.

00:17:01.550 --> 00:17:04.430
If I want to do a multipoint
conference with a large number

00:17:04.430 --> 00:17:07.290
of people, I might need a server
to handle the load for that.

00:17:07.290 --> 00:17:10.589
I can't do that on the
browser clients directly.

00:17:10.589 --> 00:17:12.530
If I want to do
archiving, broadcasting,

00:17:12.530 --> 00:17:14.859
or any other type
of media processing

00:17:14.859 --> 00:17:17.230
that requires a
servers, then yes,

00:17:17.230 --> 00:17:21.119
I will need a server to
be added to my solution.

00:17:21.119 --> 00:17:24.740
WebRTC comes as a client
that runs on a browser.

00:17:24.740 --> 00:17:26.430
And there are other
components that you

00:17:26.430 --> 00:17:31.790
might need to add for your
use case on the server side.

00:17:31.790 --> 00:17:35.110
Now, how exactly are we
going to learn WebRTC?

00:17:35.110 --> 00:17:36.440
I am a book kind of a person.

00:17:36.440 --> 00:17:39.620
And there are currently four
good books about WebRTC.

00:17:39.620 --> 00:17:42.660
The first one is,
well, the WebRTC book.

00:17:42.660 --> 00:17:44.660
Let's call this one the Bible.

00:17:44.660 --> 00:17:47.190
This is the first book that
was written about WebRTC

00:17:47.190 --> 00:17:50.840
by Alan Johnston
and Dan Burnett.

00:17:50.840 --> 00:17:52.400
It is now in its third edition.

00:17:52.400 --> 00:17:55.190
It is a very good book,
especially if what you like

00:17:55.190 --> 00:17:57.950
is understanding
standards, and the details,

00:17:57.950 --> 00:18:01.250
and the intricacies of
a specific protocol.

00:18:01.250 --> 00:18:05.040
So that's the Bible of WebRTC.

00:18:05.040 --> 00:18:10.410
Then there is the step-by-step
guide, written by Rob Manson.

00:18:10.410 --> 00:18:12.750
This is a Getting
Started with WebRTC book.

00:18:12.750 --> 00:18:13.770
It's a very good one.

00:18:13.770 --> 00:18:16.350
It shows how you take
WebRTC, connect it

00:18:16.350 --> 00:18:20.650
into a signaling server
based out of Node.JS,

00:18:20.650 --> 00:18:23.530
which is what most of
the people do today.

00:18:23.530 --> 00:18:26.180
And it just shows
how to do that.

00:18:26.180 --> 00:18:29.050
So if you're one of these guys
that just want to get things

00:18:29.050 --> 00:18:32.130
done fast, this is
the book for you.

00:18:32.130 --> 00:18:36.580
The third book-- for me,
this is the living-room chat.

00:18:36.580 --> 00:18:39.490
This is one by
Salvatore and Simon.

00:18:39.490 --> 00:18:41.200
It's a new book from O'Reilly.

00:18:41.200 --> 00:18:42.980
We have a few of
those here to give

00:18:42.980 --> 00:18:46.030
as part of our raffle prizes.

00:18:46.030 --> 00:18:49.220
I really like this book,
because it's natural.

00:18:49.220 --> 00:18:52.440
Really, it's as if
one of these two guys

00:18:52.440 --> 00:18:55.720
are sitting with you in the room
and explaining things to you.

00:18:55.720 --> 00:18:58.840
So that the most
natural book for me.

00:18:58.840 --> 00:19:02.950
The fourth one also a new
book-- WebRTC Blueprints.

00:19:02.950 --> 00:19:05.220
This one is for
hard-core developers.

00:19:05.220 --> 00:19:07.880
Don't open this book if you
don't know WebRTC already

00:19:07.880 --> 00:19:11.660
and haven't started
playing with it.

00:19:11.660 --> 00:19:13.540
It goes deep into some areas.

00:19:13.540 --> 00:19:15.380
It leaves a lot
of things behind.

00:19:15.380 --> 00:19:19.940
So use it with care, although
the information inside it

00:19:19.940 --> 00:19:21.850
is pure gold.

00:19:21.850 --> 00:19:25.480
You just need to understand
what you're doing with it.

00:19:25.480 --> 00:19:29.180
If you don't like books,
and you rather look at URLs,

00:19:29.180 --> 00:19:31.600
then there's the
HTML5 Rocks website,

00:19:31.600 --> 00:19:35.590
which has several good articles
about WebRTC for beginners.

00:19:35.590 --> 00:19:38.230
There's a WebRTC Hacks
website, with a lot

00:19:38.230 --> 00:19:40.300
of stuff for developers.

00:19:40.300 --> 00:19:45.520
Articles coming up every
few weeks with good content.

00:19:45.520 --> 00:19:47.850
And there is the
discuss-webrtc Google Group,

00:19:47.850 --> 00:19:53.050
where people ask questions
and Google actually answers.

00:19:53.050 --> 00:19:55.690
Last but not least, there
is the WebRTC Weekly,

00:19:55.690 --> 00:19:58.074
which Chris and I are running.

00:19:58.074 --> 00:19:58.615
Go subscribe.

00:19:58.615 --> 00:20:01.850
You will see weekly
links to things happening

00:20:01.850 --> 00:20:04.130
on the internet that
relate to WebRTC.

00:20:04.130 --> 00:20:05.850
AUDIENCE: [INAUDIBLE].

00:20:05.850 --> 00:20:08.030
TSAHI LEVENT-LEVI:
What's Israeli in it?

00:20:08.030 --> 00:20:10.660
There.

00:20:10.660 --> 00:20:11.440
OK.

00:20:11.440 --> 00:20:15.260
So thank you, and let's
move on to our next speaker.

00:20:15.260 --> 00:20:16.810
[APPLAUSE]

