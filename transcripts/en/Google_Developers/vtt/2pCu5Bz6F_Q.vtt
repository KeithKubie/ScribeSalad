WEBVTT
Kind: captions
Language: en

00:00:01.110 --> 00:00:03.480
YOSHIFUMI YAMAGUCHI: I'm
Yoshifumi Yamaguchi, developer

00:00:03.480 --> 00:00:06.205
advocate, usually
based on Tokyo office.

00:00:10.240 --> 00:00:13.200
I started working on the
developer relations team

00:00:13.200 --> 00:00:14.860
from last quarter.

00:00:14.860 --> 00:00:17.600
And before that, I have
been working in YouTube

00:00:17.600 --> 00:00:23.120
as a technical
account manager, which

00:00:23.120 --> 00:00:27.880
like technical sales to
the YouTube partners.

00:00:27.880 --> 00:00:31.220
So I have been working in the
YouTube for almost three years.

00:00:31.220 --> 00:00:36.330
So in the keynote, and
in the last section,

00:00:36.330 --> 00:00:40.960
we have explained how to create
your application properly,

00:00:40.960 --> 00:00:41.883
or more sophisticated.

00:00:44.890 --> 00:00:51.140
So in the last two keynotes,
and the last section,

00:00:51.140 --> 00:00:56.660
we have been talked about how
to create your application more

00:00:56.660 --> 00:01:00.000
properly, or more sophisticated.

00:01:00.000 --> 00:01:05.170
But if your application
is not [? available ?]

00:01:05.170 --> 00:01:09.990
on the internet,
or anywhere else,

00:01:09.990 --> 00:01:16.250
your application is not going
to be used by lots of users.

00:01:16.250 --> 00:01:20.990
So in that sense, YouTube API
is really great because you

00:01:20.990 --> 00:01:24.950
can [INAUDIBLE] your
application on the internet

00:01:24.950 --> 00:01:29.620
and then you don't have to
create the content by yourself.

00:01:29.620 --> 00:01:32.620
So you can let users
to great content

00:01:32.620 --> 00:01:34.620
by using your application.

00:01:34.620 --> 00:01:40.080
So today I'd like to talk about
how to integrate YouTube API,

00:01:40.080 --> 00:01:43.370
and also I'd like to
introduce the [INAUDIBLE]

00:01:43.370 --> 00:01:48.610
for use cases using YouTube API.

00:01:48.610 --> 00:01:50.270
So here's the agenda.

00:01:50.270 --> 00:01:56.560
Before starting
introduction of YouTube API,

00:01:56.560 --> 00:02:00.890
I'd liked to introduce the
feature of YouTube itself

00:02:00.890 --> 00:02:05.890
because this is the
key of this strategy

00:02:05.890 --> 00:02:09.470
and then move onto
YouTube API stuff.

00:02:09.470 --> 00:02:13.340
And then, after that, I'm going
to introduce the developer

00:02:13.340 --> 00:02:17.030
ecosystem surrounding
the YouTube API

00:02:17.030 --> 00:02:20.250
and then going to
the Q&amp;A session.

00:02:20.250 --> 00:02:25.060
So before starting
introducing YouTube API,

00:02:25.060 --> 00:02:28.150
I'd like to introduce
YouTube service itself

00:02:28.150 --> 00:02:33.870
because that expresses the
reason why YouTube can energize

00:02:33.870 --> 00:02:36.820
your application and
increase your user

00:02:36.820 --> 00:02:41.640
engagement to your applications.

00:02:41.640 --> 00:02:47.820
So I'd like to show you some
stats as an explanation of how

00:02:47.820 --> 00:02:51.920
big YouTube is as a
video provider service.

00:02:51.920 --> 00:02:58.125
So the first one, YouTube has
over one billion unique users

00:02:58.125 --> 00:02:59.190
per month.

00:02:59.190 --> 00:03:05.500
That means more than 150
million unique users per day.

00:03:05.500 --> 00:03:09.470
And then it is
continuing to grow fast.

00:03:09.470 --> 00:03:15.660
So maybe this stat is one year
ago, but the latest one maybe

00:03:15.660 --> 00:03:17.520
more than this one.

00:03:17.520 --> 00:03:22.070
And also, there is four
billion views per day.

00:03:22.070 --> 00:03:26.460
So with the stats above,
so in rough calculation,

00:03:26.460 --> 00:03:30.920
each unique user consume
24 videos per day.

00:03:30.920 --> 00:03:34.900
So don't you think this
is kind of big number.

00:03:34.900 --> 00:03:41.920
And another aspect of
consuming, so all YouTube users

00:03:41.920 --> 00:03:48.510
are spending six billion hours
per month on watching videos.

00:03:48.510 --> 00:03:53.800
And not only the consumption of
content, but also the creation

00:03:53.800 --> 00:03:57.250
of content, is immensely active.

00:03:57.250 --> 00:04:01.030
The total length of videos
uploaded onto YouTube

00:04:01.030 --> 00:04:06.430
in every single minute
reaches over 100 hours.

00:04:06.430 --> 00:04:11.110
Over 100 hours of video
are uploaded on YouTube.

00:04:11.110 --> 00:04:13.320
So can you imagine
how big is this?

00:04:16.170 --> 00:04:19.440
And let us shift
the point of view

00:04:19.440 --> 00:04:27.000
to the diverse devices where
the YouTube videos are played.

00:04:27.000 --> 00:04:29.830
So recently, as you
know, the mobile devices

00:04:29.830 --> 00:04:32.940
is really popular--
especially in APAC region

00:04:32.940 --> 00:04:35.400
and in Korea as well.

00:04:35.400 --> 00:04:40.290
And more than 40% of watch
time are from mobile.

00:04:40.290 --> 00:04:44.490
So in the case of APAC,
the number of the rate

00:04:44.490 --> 00:04:47.570
is more than that,
maybe more than half.

00:04:47.570 --> 00:04:49.590
So the half of
people are watching

00:04:49.590 --> 00:04:51.150
the video on the mobile.

00:04:51.150 --> 00:04:53.660
And then half of
people are watching

00:04:53.660 --> 00:04:55.240
the video on the devices.

00:04:55.240 --> 00:05:01.850
So you have to take serious
care of mobile development,

00:05:01.850 --> 00:05:05.680
especially on YouTube as well.

00:05:05.680 --> 00:05:09.520
So with these stats,
what I'd like to say

00:05:09.520 --> 00:05:14.410
is that if you don't have
no channels on YouTube,

00:05:14.410 --> 00:05:20.880
that means you don't
have any presence

00:05:20.880 --> 00:05:23.810
to the internet, or the users.

00:05:23.810 --> 00:05:26.570
So it is really
important to have

00:05:26.570 --> 00:05:28.165
the connection to the YouTube.

00:05:30.760 --> 00:05:34.570
But I agree that
every developer can

00:05:34.570 --> 00:05:39.170
create a
professional-like video.

00:05:39.170 --> 00:05:44.120
I'm not trying to say create
a TV commercial-like video

00:05:44.120 --> 00:05:45.700
and put it on YouTube.

00:05:45.700 --> 00:05:51.840
But I'd like to say that
let users to create content

00:05:51.840 --> 00:05:55.590
and then try to [INAUDIBLE]
your application

00:05:55.590 --> 00:05:58.520
through those users'
uploaded video.

00:05:58.520 --> 00:06:03.470
So that is the key
to take advantage

00:06:03.470 --> 00:06:05.707
of the power of YouTube API.

00:06:08.450 --> 00:06:11.570
So here's interesting
statistics.

00:06:11.570 --> 00:06:15.870
Research is three years ago, so
the number is more than this.

00:06:15.870 --> 00:06:20.130
So 90% of serious
gamers are watching

00:06:20.130 --> 00:06:22.770
the user-uploaded
videos on YouTube,

00:06:22.770 --> 00:06:26.510
users uploaded gameplay
videos on YouTube.

00:06:26.510 --> 00:06:32.500
And 94% of those are watching
[? off ?] [? show ?] game

00:06:32.500 --> 00:06:33.630
trailers.

00:06:33.630 --> 00:06:40.910
So the game players are watching
user-generated video more

00:06:40.910 --> 00:06:44.420
than the [? off show ?]
trailers.

00:06:44.420 --> 00:06:49.400
So these stats
prove the importance

00:06:49.400 --> 00:06:53.620
of user-generated
content on YouTube.

00:06:53.620 --> 00:06:56.410
So look at these two pictures.

00:06:56.410 --> 00:07:01.400
The one is "Trial Extreme Three"
And the other is "FIFA '13".

00:07:01.400 --> 00:07:06.800
And both has that
kind of uploading

00:07:06.800 --> 00:07:08.570
user-generated content feature.

00:07:08.570 --> 00:07:13.340
And then they
succeeded of the sales.

00:07:13.340 --> 00:07:18.300
And they also-- that
left cat is the logo

00:07:18.300 --> 00:07:24.110
of Talking Tom, which is the
first famous mobile application

00:07:24.110 --> 00:07:26.340
using the YouTube API.

00:07:26.340 --> 00:07:31.820
And those three achieved
great success on YouTube

00:07:31.820 --> 00:07:33.310
using the upload API.

00:07:33.310 --> 00:07:43.980
So that is why I emphasize on
the YouTube API for our game

00:07:43.980 --> 00:07:45.660
developers.

00:07:45.660 --> 00:07:52.560
So now I'm moving on to
why I use the YouTube API.

00:07:52.560 --> 00:07:55.930
So Google is always
adding new features

00:07:55.930 --> 00:08:00.150
to help our API partners,
and content partners,

00:08:00.150 --> 00:08:04.870
to improve their
applications and content.

00:08:04.870 --> 00:08:09.010
So recently, YouTube
released new features

00:08:09.010 --> 00:08:15.460
to our YouTube API, such as
a subscription widget, which

00:08:15.460 --> 00:08:22.790
allows the YouTube channel owner
to put the subscription button

00:08:22.790 --> 00:08:27.900
outside of YouTube.com site,
such as their own website.

00:08:27.900 --> 00:08:30.760
And there's also a
live streaming API,

00:08:30.760 --> 00:08:34.360
and a video programming
API, and a channel

00:08:34.360 --> 00:08:36.200
branding API, et
cetera, et cetera.

00:08:36.200 --> 00:08:43.490
So the reason why we are
trying to put lot of features

00:08:43.490 --> 00:08:45.820
to the YouTube
API is that we are

00:08:45.820 --> 00:08:52.190
trying to make YouTube APIs
equal to YouTube itself.

00:08:52.190 --> 00:08:55.750
So let me explain about this.

00:08:55.750 --> 00:09:01.010
So the overview of
a YouTube API is

00:09:01.010 --> 00:09:06.930
that its intent
is making YouTube

00:09:06.930 --> 00:09:12.490
to be more similar
to YouTube itself.

00:09:12.490 --> 00:09:18.830
But we'd like to let developers
to utilize all the features

00:09:18.830 --> 00:09:20.540
on the YouTube outside
of YouTube.com.

00:09:26.650 --> 00:09:30.840
In YouTube, we have
three features.

00:09:30.840 --> 00:09:33.310
So one is playback.

00:09:33.310 --> 00:09:36.550
So if you access
through YouTube,

00:09:36.550 --> 00:09:40.410
you're going to search
some video with some query,

00:09:40.410 --> 00:09:42.740
and then find a video,
and then play it.

00:09:42.740 --> 00:09:45.780
This is the basic
feature of YouTube.

00:09:45.780 --> 00:09:48.300
And then the playback is the
most important part of YouTube

00:09:48.300 --> 00:09:54.090
because YouTube is a
game providing service.

00:09:54.090 --> 00:09:57.630
Without the playback service,
you cannot enjoy the video.

00:09:57.630 --> 00:10:02.725
So the playback feature
is coming first.

00:10:02.725 --> 00:10:10.580
So you can play a YouTube
video on Android, iOS, HTML5,

00:10:10.580 --> 00:10:11.720
and then Flash.

00:10:11.720 --> 00:10:15.830
So all of the platforms are
covered with YouTube API.

00:10:18.360 --> 00:10:26.120
The second thing is utilizing
the YouTube.com features

00:10:26.120 --> 00:10:27.610
outside of it.

00:10:27.610 --> 00:10:32.340
So, for example, uploading
video, and then finding video,

00:10:32.340 --> 00:10:36.310
and then also putting live
stream content on YouTube,

00:10:36.310 --> 00:10:42.340
and modifying the video content,
modifying video metadata,

00:10:42.340 --> 00:10:46.740
or channel metadata,
and also investigating

00:10:46.740 --> 00:10:55.170
user activities, or video
stats outside of YouTube.com

00:10:55.170 --> 00:10:57.360
Then the last one is analyze.

00:10:57.360 --> 00:11:02.830
So YouTube has the dashboard
called YouTube Analytics,

00:11:02.830 --> 00:11:06.730
which enables users to
investigate how the video is

00:11:06.730 --> 00:11:14.090
consumed, such as-- so which age
of people are watching video?

00:11:14.090 --> 00:11:19.620
Or which area is this
video popular, or something

00:11:19.620 --> 00:11:20.270
like that?

00:11:20.270 --> 00:11:27.910
So you can use analytics APIs
to investigate user activities.

00:11:33.370 --> 00:11:40.250
So far, I have been focusing
on describing the YouTube

00:11:40.250 --> 00:11:41.960
and YouTube API.

00:11:41.960 --> 00:11:46.740
But I think what
you'd like to know

00:11:46.740 --> 00:11:51.790
is how the actual developers
achieved the access using

00:11:51.790 --> 00:11:53.080
YouTube API.

00:11:53.080 --> 00:11:56.230
So now move onto
the actual use cases

00:11:56.230 --> 00:11:58.720
and then taking
advantage of YouTube API.

00:12:02.970 --> 00:12:07.630
So this picture is showing
the developer system

00:12:07.630 --> 00:12:09.540
around YouTube.

00:12:09.540 --> 00:12:13.490
And the areas are
divided into four.

00:12:13.490 --> 00:12:18.650
The one is creators, and
then marketers, enterprises,

00:12:18.650 --> 00:12:21.820
and then viewers.

00:12:21.820 --> 00:12:25.060
And then, in this
section, I'd like

00:12:25.060 --> 00:12:29.320
to focus on the creation
section, creators section,

00:12:29.320 --> 00:12:32.350
because game and
the live streaming

00:12:32.350 --> 00:12:36.020
is really popular here in
Korea, and also this event

00:12:36.020 --> 00:12:38.180
is about mobile.

00:12:38.180 --> 00:12:42.630
So I'd like to focus
on the creation part.

00:12:47.510 --> 00:12:51.270
So let's start from
EA's "FIFA 13."

00:12:51.270 --> 00:12:59.290
Has anyone played "FIFA
13" on the iPad or iPhone?

00:12:59.290 --> 00:13:00.146
No one?

00:13:00.146 --> 00:13:01.394
OK.

00:13:01.394 --> 00:13:03.430
So let me introduce.

00:13:03.430 --> 00:13:09.990
So "FIFA 13," is, as you
see here, is a soccer game.

00:13:09.990 --> 00:13:16.090
And it allows users shoot
scenes of the match,

00:13:16.090 --> 00:13:25.910
and then the record is
processed automatically.

00:13:25.910 --> 00:13:29.880
And then it enables users
to share the content

00:13:29.880 --> 00:13:33.540
onto the YouTube, as you
can see in the screenshot.

00:13:33.540 --> 00:13:36.800
So if you press
the YouTube button,

00:13:36.800 --> 00:13:42.095
then the recorded video is going
to be shared on the YouTube.

00:13:44.640 --> 00:13:48.020
So this is really easy workflow.

00:13:48.020 --> 00:13:52.180
And then you can
watch the actual video

00:13:52.180 --> 00:13:54.255
uploaded on the
YouTube like this.

00:14:06.000 --> 00:14:08.820
So this is a really
short one, but you

00:14:08.820 --> 00:14:13.180
can find out a longer
one on YouTube.com.

00:14:13.180 --> 00:14:15.750
So if you are
interested in this,

00:14:15.750 --> 00:14:18.920
please find some
videos on YouTube.com.

00:14:18.920 --> 00:14:24.510
And some users are creating
the lists of best goals

00:14:24.510 --> 00:14:25.760
in this season.

00:14:25.760 --> 00:14:31.820
So you can enjoy those videos
like the real soccer match.

00:14:42.940 --> 00:14:48.090
So how they enable this
is that the key feature

00:14:48.090 --> 00:14:55.670
is that the video upload
part-- so because the

00:14:55.670 --> 00:15:00.070
is the uploaded video, actually.

00:15:00.070 --> 00:15:04.760
Though I'm going to explain
the sample code in Java,

00:15:04.760 --> 00:15:09.930
but, of course, you can use
the other client libraries,

00:15:09.930 --> 00:15:13.900
such as for php, and
then Python, Ruby,

00:15:13.900 --> 00:15:16.510
and [? Sheesha. ?] But
this is a mobile summit,

00:15:16.510 --> 00:15:20.140
so I'm going to introduce
the Java samples.

00:15:20.140 --> 00:15:26.110
So the video upload is really
easy to use and intuitive.

00:15:26.110 --> 00:15:30.330
This call is showing how
to upload video in Java.

00:15:30.330 --> 00:15:32.820
So the flow is really easy.

00:15:32.820 --> 00:15:39.420
So first you open the file
and then set the file size

00:15:39.420 --> 00:15:42.250
onto the media content.

00:15:42.250 --> 00:15:47.650
And then call the YouTube
method, the video insert

00:15:47.650 --> 00:15:53.500
method, and then pass the media
content instance into them.

00:15:53.500 --> 00:15:57.000
And just execute the API.

00:15:57.000 --> 00:15:58.040
So that's it.

00:15:58.040 --> 00:16:02.920
So the name of the
method is video.insert,

00:16:02.920 --> 00:16:06.580
which is the same as the
actual [? list of ?] APIs name.

00:16:06.580 --> 00:16:13.700
So you can intuitively use
the YouTube API client library

00:16:13.700 --> 00:16:19.235
in Java if you know the
URL of the YouTube API.

00:16:22.740 --> 00:16:31.930
So then, once you've succeeded
in uploading video to YouTube,

00:16:31.930 --> 00:16:38.690
then you may think
that you want to make

00:16:38.690 --> 00:16:43.830
your application
possible to play

00:16:43.830 --> 00:16:46.880
user uploaded video
inside your application.

00:16:46.880 --> 00:16:53.340
So in order to do
that, there is the

00:16:53.340 --> 00:16:56.220
in game playback
features in YouTube API.

00:16:59.550 --> 00:17:05.740
So this is how you can
integrate the player

00:17:05.740 --> 00:17:11.530
API inside your
Android application.

00:17:11.530 --> 00:17:15.800
So first of all,
in the layout file,

00:17:15.800 --> 00:17:20.510
you can specify the YouTube
player view like this.

00:17:24.760 --> 00:17:30.550
And after that, you can extend
the YouTube basic activity

00:17:30.550 --> 00:17:39.630
class for your own
customized playback section.

00:17:39.630 --> 00:17:44.850
So this is really easy
because-- so you're

00:17:44.850 --> 00:17:48.450
going to implement each
interface for each event.

00:17:52.100 --> 00:17:58.750
So then every single handler
is handled by these interfaces.

00:17:58.750 --> 00:18:01.910
So once you implement
the interface,

00:18:01.910 --> 00:18:07.400
then you can customize
how the player works.

00:18:07.400 --> 00:18:14.125
So this is a really easy
to use native player API.

00:18:22.840 --> 00:18:26.770
So I just introduced
some use cases

00:18:26.770 --> 00:18:35.100
that is going to upload
user-generated gameplay

00:18:35.100 --> 00:18:38.660
video onto YouTube
and explain how

00:18:38.660 --> 00:18:42.970
to play them inside
your application.

00:18:42.970 --> 00:18:47.170
But I haven't
explained how to record

00:18:47.170 --> 00:18:53.270
the gameplay of the users
because, unfortunately, YouTube

00:18:53.270 --> 00:19:00.400
API does not provide
any recording service.

00:19:00.400 --> 00:19:03.830
So the recording
part has to be done

00:19:03.830 --> 00:19:09.210
by yourself or others
third party libraries.

00:19:09.210 --> 00:19:17.840
But, fortunately, some
gameplay SDK's are provided

00:19:17.840 --> 00:19:22.630
by a third party, such as
the [? play ?] showing here.

00:19:22.630 --> 00:19:28.900
And so once you
integrate those kind

00:19:28.900 --> 00:19:31.450
of SDK's inside
your application,

00:19:31.450 --> 00:19:40.890
then you can record the user
play and to the video file.

00:19:40.890 --> 00:19:46.950
And then you can automatically
upload that recorded video

00:19:46.950 --> 00:19:49.650
directly onto the YouTube.

00:19:49.650 --> 00:19:55.200
So the left one is the screen
shot of the "Bad Piggies."

00:19:55.200 --> 00:20:01.795
So does play "Bad
Piggies," or has anyone

00:20:01.795 --> 00:20:02.670
played "Bad Piggies?"

00:20:02.670 --> 00:20:03.890
Oh, you did.

00:20:03.890 --> 00:20:08.600
So did you try the
recording feature?

00:20:08.600 --> 00:20:09.270
AUDIENCE: No.

00:20:09.270 --> 00:20:10.270
YOSHIFUMI YAMAGUCHI: No.

00:20:10.270 --> 00:20:11.090
AUDIENCE: [INAUDIBLE].

00:20:11.090 --> 00:20:12.090
YOSHIFUMI YAMAGUCHI: OK.

00:20:14.460 --> 00:20:22.720
So this is the sample video
recorded by the Everyplay SDK.

00:20:25.840 --> 00:20:27.430
Oh, why?

00:20:31.430 --> 00:20:34.010
[VIDEO GAME SOUND]

00:20:43.320 --> 00:20:48.280
So can you see the rec icon
on the top of the video?

00:20:57.420 --> 00:21:00.490
So the key is that
the user is not

00:21:00.490 --> 00:21:04.140
trying to create
the great content.

00:21:04.140 --> 00:21:06.410
But they just play the video.

00:21:06.410 --> 00:21:09.470
And then, if they press
the YouTube Upload

00:21:09.470 --> 00:21:12.390
to YouTube button, they
can share the content

00:21:12.390 --> 00:21:14.170
onto the YouTube.

00:21:14.170 --> 00:21:18.950
So the developers don't
have to do anything,

00:21:18.950 --> 00:21:25.080
just implement the upload
feature and then let the game

00:21:25.080 --> 00:21:30.080
players to [INAUDIBLE]-- let
the game players [INAUDIBLE]

00:21:30.080 --> 00:21:32.280
the application on the internet.

00:21:32.280 --> 00:21:34.130
That is the key.

00:21:34.130 --> 00:21:40.020
So, but, in some cases,
you cannot use these kind

00:21:40.020 --> 00:21:45.640
of third-party libraries,
or you'd like to implement

00:21:45.640 --> 00:21:47.980
the recording part by yourself.

00:21:47.980 --> 00:21:55.880
So I'd like to explain how
you can implement that part.

00:21:55.880 --> 00:22:01.670
So this is just an explanation.

00:22:01.670 --> 00:22:06.460
So in this case, this
is using the Unity.

00:22:06.460 --> 00:22:08.990
It's also a framework.

00:22:08.990 --> 00:22:13.660
But I think you can
do it by yourself.

00:22:13.660 --> 00:22:19.600
So at first, you create a game,
and then users start gameplay.

00:22:19.600 --> 00:22:24.520
And then you have to pull
out the audio and video

00:22:24.520 --> 00:22:28.880
frames from the game.

00:22:28.880 --> 00:22:32.480
And then once you
get those frames,

00:22:32.480 --> 00:22:38.470
you have to encode those
frames into the video file.

00:22:38.470 --> 00:22:48.410
So in this case, I'm using the
web-m, and VPA, and [? Vobis ?]

00:22:48.410 --> 00:22:53.320
for a container and
the video format,

00:22:53.320 --> 00:22:55.330
and audio format, respectively.

00:22:55.330 --> 00:23:04.300
But you can also use these such
as MPEG-4, and H.264, and mp3,

00:23:04.300 --> 00:23:05.510
respectively.

00:23:05.510 --> 00:23:08.000
So this is just an explanation.

00:23:08.000 --> 00:23:14.010
So anyway, you have to
encode those captured frames

00:23:14.010 --> 00:23:17.090
into the video file
using, like, FFM

00:23:17.090 --> 00:23:19.410
tech inside the application.

00:23:19.410 --> 00:23:23.760
And then once the video file is
created, the rest of the stuff

00:23:23.760 --> 00:23:24.820
is very easy.

00:23:24.820 --> 00:23:28.840
Just code the video
insert YouTube API,

00:23:28.840 --> 00:23:32.830
and then that is going to
be uploaded on the YouTube.

00:23:32.830 --> 00:23:37.900
So the last part is really
easy, but the first part

00:23:37.900 --> 00:23:39.380
is kind of hard.

00:23:39.380 --> 00:23:45.730
So I recommend you to take
advantage of those kind

00:23:45.730 --> 00:23:48.930
of the gameplay SDK's.

00:23:51.740 --> 00:23:56.280
And if you want to
try some samples which

00:23:56.280 --> 00:24:01.570
is using YouTube API,
especially for uploading videos,

00:24:01.570 --> 00:24:04.620
please find these two samples.

00:24:04.620 --> 00:24:08.530
One is YouTube
[INAUDIBLE] for Android,

00:24:08.530 --> 00:24:11.355
and then the other
is that for iOS.

00:24:17.390 --> 00:24:24.520
And then the YouTube is putting
the sample code on the GitHub

00:24:24.520 --> 00:24:29.780
and showing here,
GitHub.com/YouTube.

00:24:29.780 --> 00:24:35.140
And if you go down
to some repositories,

00:24:35.140 --> 00:24:40.610
then you can find YouTube
[? direct light ?] Android.

00:24:46.957 --> 00:24:49.040
And then here, you YouTube
[? direct light ?] iOS.

00:24:49.040 --> 00:24:51.770
So if you are interested
in how to upload

00:24:51.770 --> 00:24:56.770
the video through the
Android apps or iOS app,

00:24:56.770 --> 00:24:59.440
then please try this.

00:24:59.440 --> 00:25:01.670
And then maybe
you can find a way

00:25:01.670 --> 00:25:08.960
to use the upload
API at the same time.

00:25:14.670 --> 00:25:15.680
OK.

00:25:15.680 --> 00:25:40.080
So let me show-- so the
video upload part has

00:25:40.080 --> 00:25:42.040
been explained in
the previous slides.

00:25:42.040 --> 00:25:45.110
So here, I'd like
to introduce how

00:25:45.110 --> 00:25:50.250
to authorize and authenticate
your application using API.

00:25:50.250 --> 00:25:54.940
So YouTube API is
using OAuth2 for

00:25:54.940 --> 00:26:00.310
authorization/authentication,
like other Google services.

00:26:00.310 --> 00:26:05.120
And the flow is kind of
really straightforward.

00:26:05.120 --> 00:26:10.730
So here, at first, you
can create credentials

00:26:10.730 --> 00:26:13.220
using the Google
account confidential,

00:26:13.220 --> 00:26:16.450
using OAuth2 method.

00:26:16.450 --> 00:26:23.320
Then this part is just
for the error handling.

00:26:23.320 --> 00:26:29.560
Then, after that, just
assign the account name

00:26:29.560 --> 00:26:32.060
to the credential.

00:26:32.060 --> 00:26:35.900
So then the preparation for
credential is ready now.

00:26:35.900 --> 00:26:41.150
Then you can pass
this credential

00:26:41.150 --> 00:26:46.830
to the YouTube
service builder here.

00:26:46.830 --> 00:26:54.420
With this YouTube instance, you
can call any method, like video

00:26:54.420 --> 00:26:58.630
insert, or video
update, or search,

00:26:58.630 --> 00:27:01.660
or some other old YouTube API.

00:27:04.360 --> 00:27:06.620
And this is for [? 100 ?].

00:27:06.620 --> 00:27:15.020
But in the case of iOS,
which the sign in flow

00:27:15.020 --> 00:27:17.450
is also really straightforward.

00:27:17.450 --> 00:27:23.260
Just call this--
where is the pointer?

00:27:28.020 --> 00:27:33.230
So call this method once.

00:27:33.230 --> 00:27:34.695
So it's really straightforward.

00:27:44.650 --> 00:27:49.630
So, so far, we have focused
on the video upload.

00:27:49.630 --> 00:27:51.520
So archived video upload.

00:27:51.520 --> 00:27:56.730
But now I'm going to introduce
how to integrate live streaming

00:27:56.730 --> 00:27:58.660
API inside the application.

00:27:58.660 --> 00:28:00.560
So let me show an example.

00:28:13.938 --> 00:28:16.880
[MUSIC  PLAYING]

00:29:17.370 --> 00:29:23.750
So all it's showing is
only the recorded video

00:29:23.750 --> 00:29:28.760
using the Arigato Gaming device.

00:29:31.680 --> 00:29:33.290
How can I go to the next slide?

00:29:36.230 --> 00:29:44.370
But what I want to introduce
is that so this device

00:29:44.370 --> 00:29:52.160
allows users to put the
live streaming onto YouTube

00:29:52.160 --> 00:29:57.510
without doing any
complicated configuration.

00:29:57.510 --> 00:30:03.610
So the users just have to plug
the HDMI cable into this device

00:30:03.610 --> 00:30:09.510
and connect to the PC.

00:30:09.510 --> 00:30:14.260
Then, the user can broadcast
their gameplay online.

00:30:14.260 --> 00:30:20.910
So this device is highly
connected to the YouTube.

00:30:20.910 --> 00:30:25.720
And then, if user has
the YouTube account,

00:30:25.720 --> 00:30:31.140
then user can broadcast the
gameplay with only one click.

00:30:31.140 --> 00:30:39.180
So this is enabled users
to exposing the gameplay

00:30:39.180 --> 00:30:43.290
onto the YouTube in real time.

00:30:43.290 --> 00:30:51.050
And there is another
solution using

00:30:51.050 --> 00:30:54.990
YouTube API for live
streaming called XSplit.

00:30:54.990 --> 00:30:58.790
So XSplit is just
a software solution

00:30:58.790 --> 00:31:00.280
for our live streaming.

00:31:00.280 --> 00:31:04.670
But if the user
launches this software,

00:31:04.670 --> 00:31:11.820
then user can put the
live streaming using

00:31:11.820 --> 00:31:20.490
any arbitrary archived content,
or any screencast stream.

00:31:20.490 --> 00:31:26.385
So this is also are
connected to YouTube API.

00:31:30.920 --> 00:31:38.810
So then this is how the
YouTube API is working.

00:31:38.810 --> 00:31:42.880
So in YouTube live, we call
each live streaming event

00:31:42.880 --> 00:31:47.270
as broadcast, left
side, and then we

00:31:47.270 --> 00:31:53.420
call each stream, each actual
video live stream setting

00:31:53.420 --> 00:31:54.920
as a stream.

00:31:54.920 --> 00:32:00.610
Then you can bind the broadcast
and the stream setting

00:32:00.610 --> 00:32:02.170
using the API.

00:32:02.170 --> 00:32:11.050
Then after that, the YouTube
API returns the actual endpoint

00:32:11.050 --> 00:32:16.750
where a user has to put
the live streaming, too.

00:32:16.750 --> 00:32:21.960
So the device, or software,
just sends a live stream

00:32:21.960 --> 00:32:25.365
to the endpoint, which is
returned by a YouTube API.

00:32:27.960 --> 00:32:31.670
And then, if you are
a YouTube partner,

00:32:31.670 --> 00:32:34.630
if you insert a cue
point to the live stream,

00:32:34.630 --> 00:32:40.120
then you can insert
the in-stream ad

00:32:40.120 --> 00:32:41.390
inside live streaming.

00:32:41.390 --> 00:32:43.770
So you can monetize
live streaming

00:32:43.770 --> 00:32:46.255
as well using the API.

00:32:49.470 --> 00:32:54.050
So this is the
implementation of creating

00:32:54.050 --> 00:32:56.310
the broadcast [? spot ?].

00:32:56.310 --> 00:33:03.705
But like other YouTube APIs,
it's really straightforward.

00:33:03.705 --> 00:33:09.330
So just create the instance,
the broadcast instance,

00:33:09.330 --> 00:33:12.510
then set live streaming
title, and then set

00:33:12.510 --> 00:33:16.340
the metadata of what
time does the live start,

00:33:16.340 --> 00:33:19.870
and what time does live end.

00:33:19.870 --> 00:33:27.140
Then create the live
streaming status.

00:33:27.140 --> 00:33:31.065
Then, if you want to
make the live as private,

00:33:31.065 --> 00:33:34.460
at first, then set
the private here.

00:33:37.150 --> 00:33:43.480
Then, using the live
broadcast insert method,

00:33:43.480 --> 00:33:56.730
you can create the live event
using this broadcast instance.

00:33:56.730 --> 00:33:58.370
So this is really
straightforward,

00:33:58.370 --> 00:34:00.960
same as a live
video insert method.

00:34:04.090 --> 00:34:10.010
And yesterday, a
Korean-translated version

00:34:10.010 --> 00:34:12.780
of the YouTube API is out.

00:34:12.780 --> 00:34:17.290
So if you get interested
in using the upload API,

00:34:17.290 --> 00:34:21.400
or live API, or some
other YouTube API,

00:34:21.400 --> 00:34:25.930
then please refer to this site.

00:34:34.350 --> 00:34:42.110
So if you access to
developers.google.com/YouTube--

00:34:42.110 --> 00:34:47.790
so maybe, at first, you access
through the English version

00:34:47.790 --> 00:34:49.670
one.

00:34:49.670 --> 00:34:54.560
Then, at the very right
bottom of the page,

00:34:54.560 --> 00:34:56.770
you can find a Select button.

00:35:00.220 --> 00:35:04.550
This here is a Hangul.

00:35:04.550 --> 00:35:08.870
If you change the menu,
then you can get access

00:35:08.870 --> 00:35:14.590
to the Korea version
of YouTube API docs.

00:35:14.590 --> 00:35:19.040
So for example, if you access
through the data API, and then

00:35:19.040 --> 00:35:24.230
version 3, then although
it's translated into-- oh no,

00:35:24.230 --> 00:35:25.200
this is not one.

00:35:28.124 --> 00:35:33.020
So the one with the English
tag is not translated yet.

00:35:33.020 --> 00:35:37.710
But all others--
something, for example,

00:35:37.710 --> 00:35:47.950
if you access to documentation
for each methods,

00:35:47.950 --> 00:35:51.730
you can get the whole translated
version of the YouTube API.

00:35:51.730 --> 00:35:55.951
So this is really easy
to try because then you

00:35:55.951 --> 00:36:01.870
have API explorer.

00:36:01.870 --> 00:36:07.740
So here, you don't
have to write any code.

00:36:07.740 --> 00:36:14.639
So just put properties here
inside a form and just press

00:36:14.639 --> 00:36:15.430
the Execute button.

00:36:15.430 --> 00:36:17.810
Then you can see how it works.

00:36:17.810 --> 00:36:22.170
So if you get interested
in YouTube API,

00:36:22.170 --> 00:36:25.130
please access to this page.

00:36:25.130 --> 00:36:29.360
And please play
around how it works.

00:36:41.670 --> 00:36:43.470
So today's summary.

00:36:43.470 --> 00:36:50.370
So the huge stats of
YouTube show how much

00:36:50.370 --> 00:36:55.100
the users spend their
life on the YouTube.

00:36:55.100 --> 00:36:59.850
And also the gamers watch
more user-generated content

00:36:59.850 --> 00:37:02.170
than the official trailers.

00:37:02.170 --> 00:37:06.290
So it's really
important for developers

00:37:06.290 --> 00:37:15.100
to create some system that
lets users generate content.

00:37:15.100 --> 00:37:18.770
And then also why use
the YouTube APIs is

00:37:18.770 --> 00:37:22.330
that YouTube API
itself is the YouTube.

00:37:22.330 --> 00:37:26.640
But the YouTube API
enables developers

00:37:26.640 --> 00:37:32.730
to utilize those YouTube
features outside of YouTube.

00:37:32.730 --> 00:37:34.780
It means inside the application.

00:37:37.490 --> 00:37:40.410
And then also, after that, I
introduced the developer system

00:37:40.410 --> 00:37:42.650
around YouTube.

00:37:42.650 --> 00:37:48.510
And you learned some successful
use cases in creation

00:37:48.510 --> 00:37:52.980
[INAUDIBLE] YouTube using
data API, and the upload API,

00:37:52.980 --> 00:37:55.530
and the live streaming API.

00:37:55.530 --> 00:37:59.660
So if you get interested in
YouTube and the YouTube API,

00:37:59.660 --> 00:38:03.210
please utilize those.

00:38:03.210 --> 00:38:06.830
And then I hope you
are going to achieve

00:38:06.830 --> 00:38:10.140
a great success
through the YouTube.

00:38:10.140 --> 00:38:13.700
So here's some reference.

00:38:13.700 --> 00:38:16.920
So if you get interested in
the YouTube, and YouTube API,

00:38:16.920 --> 00:38:18.180
please access these.

00:38:18.180 --> 00:38:21.230
And thank you for coming here.

00:38:21.230 --> 00:38:23.690
And thank you for listening
to my presentation.

00:38:23.690 --> 00:38:25.320
Thank you.

