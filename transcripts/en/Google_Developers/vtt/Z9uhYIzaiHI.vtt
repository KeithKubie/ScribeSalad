WEBVTT
Kind: captions
Language: en

00:00:01.540 --> 00:00:06.960
BRENDAN O'BRIEN: Hello, and
welcome to Google I/O 2012.

00:00:06.960 --> 00:00:09.180
Today, I'm going to be talking
about building web

00:00:09.180 --> 00:00:12.330
applications that use Google
APIs and the JavaScript client

00:00:12.330 --> 00:00:14.420
for Google APIs.

00:00:14.420 --> 00:00:15.650
My name is Brendan O'Brien.

00:00:15.650 --> 00:00:18.640
I'm a software engineering on
Google+, and I also maintain

00:00:18.640 --> 00:00:21.740
the JavaScript client.

00:00:21.740 --> 00:00:24.400
As the title implies, we're
going to be talking mainly

00:00:24.400 --> 00:00:28.510
about the client, what it can
do, how you do that, and how

00:00:28.510 --> 00:00:30.860
you use it to consume
Google's APIs.

00:00:34.360 --> 00:00:36.230
So a little bit about
our APIs.

00:00:36.230 --> 00:00:39.560
We provide many RESTful
APIs for most of our

00:00:39.560 --> 00:00:41.750
products and services.

00:00:41.750 --> 00:00:46.160
This includes Google+, Calendar,
Analytics, and over

00:00:46.160 --> 00:00:49.560
35 more discovery-based APIs.

00:00:49.560 --> 00:00:52.260
We even announced a few here
at Google I/O. Hopefully

00:00:52.260 --> 00:00:54.790
you've seen some of
the sessions.

00:00:54.790 --> 00:00:59.240
Requests are typically made to
www.googleapis.com, which is

00:00:59.240 --> 00:01:01.370
Google's APIs front-end.

00:01:01.370 --> 00:01:04.599
So I have an example here, since
it is a RESTful API.

00:01:04.599 --> 00:01:08.880
I can take this URL and just
paste it into my browser here.

00:01:08.880 --> 00:01:10.040
So what this one's going
to do-- let me

00:01:10.040 --> 00:01:12.200
go back real quick--

00:01:12.200 --> 00:01:16.960
as you can see in the URL here,
that urlshortener/v1.

00:01:16.960 --> 00:01:20.290
This is going to go to URL
shortener API at version one,

00:01:20.290 --> 00:01:23.710
and take this shortened URL,
and give us back the long,

00:01:23.710 --> 00:01:26.270
full URL for it.

00:01:26.270 --> 00:01:31.050
So if I paste that in, we should
get some data back.

00:01:31.050 --> 00:01:31.780
And here we are.

00:01:31.780 --> 00:01:33.350
We have a JSON blob, and
we can see one of

00:01:33.350 --> 00:01:34.892
the fields is longUrl.

00:01:34.892 --> 00:01:36.450
www.google.com.

00:01:36.450 --> 00:01:40.000
So that's what the short
URL translates to.

00:01:40.000 --> 00:01:42.300
And there's some other fields
in here that might be useful

00:01:42.300 --> 00:01:43.550
for you as well.

00:01:48.880 --> 00:01:53.230
So we also provided several API
clients to make accessing

00:01:53.230 --> 00:01:56.450
the Google APIs easier
for you.

00:01:56.450 --> 00:01:59.170
We have a total of nine
clients right now.

00:01:59.170 --> 00:02:02.190
Besides just JavaScript, there's
Java, Objective-C,

00:02:02.190 --> 00:02:04.610
Python, and many more.

00:02:04.610 --> 00:02:07.540
And I have a link here, if
you're curious later, to see

00:02:07.540 --> 00:02:09.440
all the clients that
we currently have.

00:02:12.980 --> 00:02:15.940
So before, if you wanted to
consume Google APIs, you had

00:02:15.940 --> 00:02:19.040
to do it from your web server,
using one of the server-side

00:02:19.040 --> 00:02:20.030
scripting languages--

00:02:20.030 --> 00:02:22.910
Java, Python, something
like that.

00:02:22.910 --> 00:02:26.340
So in order to make API calls,
your code in the browser would

00:02:26.340 --> 00:02:29.890
have to call back to your web
server, your web circles makes

00:02:29.890 --> 00:02:32.850
a call to the Google APIs server
to get a response back,

00:02:32.850 --> 00:02:35.590
and then it has to pass that
response back to the browser.

00:02:35.590 --> 00:02:40.170
So a lot of logic must exist
on your web server to make

00:02:40.170 --> 00:02:42.620
this possible.

00:02:42.620 --> 00:02:45.030
Well, with the JavaScript
client, you can make these

00:02:45.030 --> 00:02:47.662
calls directly from
the browser.

00:02:47.662 --> 00:02:51.380
This makes your web server a
bit simpler, and also just

00:02:51.380 --> 00:02:52.530
makes it so that you
can make these

00:02:52.530 --> 00:02:54.060
direct calls a bit quicker.

00:02:57.700 --> 00:02:59.650
So I'm going to do a
quick demo using

00:02:59.650 --> 00:03:00.830
the JavaScript client.

00:03:00.830 --> 00:03:03.960
And I have a little snippet
of code here.

00:03:03.960 --> 00:03:07.450
This is basically all the code
that exists in the demo that

00:03:07.450 --> 00:03:08.280
I'm about to show you.

00:03:08.280 --> 00:03:13.080
This is all that's needed to
load an API and then make

00:03:13.080 --> 00:03:17.360
calls to it and get
a response back.

00:03:17.360 --> 00:03:19.850
So here is this demo.

00:03:19.850 --> 00:03:22.990
Again, I'm going to use the URL
shorter API as an example.

00:03:22.990 --> 00:03:26.010
And I'm going to take a short
URL and expand it

00:03:26.010 --> 00:03:27.900
out into a long URL.

00:03:27.900 --> 00:03:30.070
And you'll see that I've
pre-populated this field here

00:03:30.070 --> 00:03:32.700
with the same short URL
that we had before.

00:03:32.700 --> 00:03:36.670
So, if we expand it, as we
expect, we see that this short

00:03:36.670 --> 00:03:40.230
URL expands to www.google.com.

00:03:40.230 --> 00:03:42.410
And like I said, the code you
saw on the previous page is

00:03:42.410 --> 00:03:45.640
all the code that's running on
this page besides HTML markup

00:03:45.640 --> 00:03:47.980
and the little things to make
it slightly pretty.

00:03:54.670 --> 00:03:57.430
So now that we've seen a demo
and seen what it can do, let's

00:03:57.430 --> 00:03:59.980
talk in a little bit more detail
about what it provides

00:03:59.980 --> 00:04:01.320
and what it can do.

00:04:04.200 --> 00:04:06.150
First, a note on
compatibility.

00:04:06.150 --> 00:04:09.950
We support the four major modern
browsers, including

00:04:09.950 --> 00:04:14.690
Chrome, Firefox, Internet
Explorer, and Safari.

00:04:14.690 --> 00:04:17.550
We also have built-in support
in the JavaScript client for

00:04:17.550 --> 00:04:21.700
the OAuth 2.0 authorization
protocol so that your

00:04:21.700 --> 00:04:26.270
applications can be authorized
to retrieve sensitive or

00:04:26.270 --> 00:04:31.500
protected user data
on their behalf.

00:04:31.500 --> 00:04:33.540
And we also support many APIs,
as I mentioned earlier.

00:04:33.540 --> 00:04:35.380
I'm just going to click through
really quickly to the

00:04:35.380 --> 00:04:37.460
Google APIs Explorer.

00:04:37.460 --> 00:04:40.220
This is where you can see a list
of all the APIs we have

00:04:40.220 --> 00:04:43.910
and what versions they're on,
and it also allows you to see

00:04:43.910 --> 00:04:47.040
what methods are available
on each API.

00:04:47.040 --> 00:04:49.810
What's also really cool is you
can run these methods directly

00:04:49.810 --> 00:04:52.540
from the Google APIs Explorer
and play around with them

00:04:52.540 --> 00:04:55.490
before actually implementing
any code in your project.

00:04:55.490 --> 00:04:57.370
So it's very useful.

00:04:57.370 --> 00:04:59.090
And I'll be doing a little
bit more with the

00:04:59.090 --> 00:05:00.630
APIs Explorer later.

00:05:00.630 --> 00:05:03.960
And also, if you are interested
and you attend the

00:05:03.960 --> 00:05:06.580
code lab, we'll be doing
a lot more work in

00:05:06.580 --> 00:05:08.300
the Explorer as well.

00:05:08.300 --> 00:05:12.240
So let's just have a
quick look at it.

00:05:12.240 --> 00:05:14.430
So we can see the list
of APIs here.

00:05:14.430 --> 00:05:17.890
We can scroll down and see
the various versions.

00:05:17.890 --> 00:05:21.550
There's a little description
on the right of the API and

00:05:21.550 --> 00:05:23.460
exactly what it does.

00:05:23.460 --> 00:05:25.710
So here's URL shortener down
here at the bottom, the one

00:05:25.710 --> 00:05:27.910
we've been using.

00:05:27.910 --> 00:05:31.970
If I click through it has all
the methods that are available

00:05:31.970 --> 00:05:35.460
on URL shortener, what their
names are, and again, a quick

00:05:35.460 --> 00:05:37.570
little description.

00:05:37.570 --> 00:05:39.740
You can also see, at the top,
there's a link to the full

00:05:39.740 --> 00:05:42.200
documentation for this API.

00:05:42.200 --> 00:05:44.900
And that will tell you in detail
what the calls are that

00:05:44.900 --> 00:05:49.140
can be made, how to make them,
what their response is going

00:05:49.140 --> 00:05:51.780
to look like, et cetera.

00:05:51.780 --> 00:05:58.610
So we'll come back to this
later when I actually

00:05:58.610 --> 00:06:01.350
demonstrate exactly how you can
make calls from the APIs

00:06:01.350 --> 00:06:03.370
Explorer to learn about
these calls.

00:06:07.970 --> 00:06:08.200
OK.

00:06:08.200 --> 00:06:10.990
So you're probably wondering,
well, what do I get by using

00:06:10.990 --> 00:06:12.700
the JS client?

00:06:12.700 --> 00:06:15.720
Well, the first thing is we have
a method that allows you

00:06:15.720 --> 00:06:19.700
to make these RESTful
requests.

00:06:19.700 --> 00:06:21.940
All of our APIs are based on
the REST protocol, which is

00:06:21.940 --> 00:06:24.400
also the basis for HTTP.

00:06:24.400 --> 00:06:27.220
URLs typically identify
resources, and then you

00:06:27.220 --> 00:06:32.240
specify the HTTP verb, such as
POST or PUT or GET, that is

00:06:32.240 --> 00:06:36.170
going to do an operation
on these resources.

00:06:36.170 --> 00:06:38.050
So I have another snippet of
code here that shows how to

00:06:38.050 --> 00:06:41.460
make a REST request in the
JavaScript client.

00:06:41.460 --> 00:06:44.570
The method for that is
gapi.client.request.

00:06:44.570 --> 00:06:47.335
All methods are on the
gapi.client namespace, or, for

00:06:47.335 --> 00:06:52.040
our authorization method,
the gapi.auth namespace.

00:06:52.040 --> 00:06:54.880
So this is the same example
I've been using so far.

00:06:54.880 --> 00:06:56.730
This is the URL shortener API.

00:06:56.730 --> 00:07:00.640
And we can see in the path,
like we saw before, I list

00:07:00.640 --> 00:07:03.200
first the API I want, URL
shortener, and then the

00:07:03.200 --> 00:07:06.260
version of it that I'm
trying to access.

00:07:06.260 --> 00:07:08.200
And then, as I mentioned,
there's a resource at the end.

00:07:08.200 --> 00:07:12.550
URL is the resource we're
trying to access here.

00:07:12.550 --> 00:07:15.700
And then we pass in a few params
to let the API know

00:07:15.700 --> 00:07:17.680
exactly what we want to do.

00:07:17.680 --> 00:07:20.770
Since we pass in a short URL,
it knows that we want to get

00:07:20.770 --> 00:07:22.790
back information about
this short URL.

00:07:22.790 --> 00:07:24.510
In particular, what
does it expand to?

00:07:24.510 --> 00:07:27.120
What's the long URL?

00:07:27.120 --> 00:07:29.240
So when you call
gapi.client.request, you get

00:07:29.240 --> 00:07:32.466
back a REST request object.

00:07:32.466 --> 00:07:34.020
It hasn't actually made
the call yet.

00:07:34.020 --> 00:07:35.800
In order to make the
call, you call

00:07:35.800 --> 00:07:37.500
Execute on the REST request.

00:07:37.500 --> 00:07:39.125
It's the only method
to find on it.

00:07:39.125 --> 00:07:42.670
And it takes one parameter,
a callback function.

00:07:42.670 --> 00:07:44.080
And I'll be talking about
that in a little more

00:07:44.080 --> 00:07:45.330
detail later as well.

00:07:47.780 --> 00:07:50.330
So the other way you can make
requests, or another request

00:07:50.330 --> 00:07:54.080
format that we support,
is JSON-RPC.

00:07:54.080 --> 00:07:59.090
When you make the request, it's
encapsulated is JSON data

00:07:59.090 --> 00:08:00.590
in a POST body.

00:08:00.590 --> 00:08:04.630
And the response is always JSON,
as the name implies.

00:08:04.630 --> 00:08:07.620
So again, I have an example up
here of the same URL shortener

00:08:07.620 --> 00:08:09.600
that we've been using.

00:08:09.600 --> 00:08:10.690
And here you can see
the signature

00:08:10.690 --> 00:08:11.580
looks a little different.

00:08:11.580 --> 00:08:12.900
It says gapi.client.urls
hortener.url.get.

00:08:16.730 --> 00:08:19.280
So if you remember from the
APIs Explorer, that's the

00:08:19.280 --> 00:08:23.320
exact name of the method that
we're trying to execute.

00:08:23.320 --> 00:08:26.280
And we can see, we can just call
it directly, pass in our

00:08:26.280 --> 00:08:28.540
parameters that we're interested
about, and again,

00:08:28.540 --> 00:08:30.470
we get back a request object.

00:08:30.470 --> 00:08:33.490
This is now an RPC
request object.

00:08:33.490 --> 00:08:35.640
But it's very similar
to REST request.

00:08:35.640 --> 00:08:37.570
It has one method
on it, Execute.

00:08:37.570 --> 00:08:40.620
You pass in a call back, and
when the function returns, you

00:08:40.620 --> 00:08:41.870
can play around with
the response.

00:08:46.110 --> 00:08:48.490
So, I also said that we have
a built in mechanism that

00:08:48.490 --> 00:08:51.300
supports OAuth 2.0
authorization and

00:08:51.300 --> 00:08:52.550
authentication.

00:08:54.670 --> 00:08:57.220
Essentially, what you do is you
create a client ID-- and

00:08:57.220 --> 00:08:59.520
we'll be going over that later
as well-- which identifies

00:08:59.520 --> 00:09:01.550
your application.

00:09:01.550 --> 00:09:04.920
And you also gather a set of
scopes that you'd like

00:09:04.920 --> 00:09:07.460
to have access to.

00:09:07.460 --> 00:09:09.590
So if you've ever installed an
Android application, for

00:09:09.590 --> 00:09:11.460
example, it tells you what this

00:09:11.460 --> 00:09:13.710
application wants to access.

00:09:13.710 --> 00:09:15.940
Does it want to see
your location or

00:09:15.940 --> 00:09:17.650
maybe read your profile?

00:09:17.650 --> 00:09:21.310
So these are the kind of things
that scopes identify to

00:09:21.310 --> 00:09:26.520
the OAuth server that you want
to access for this user.

00:09:26.520 --> 00:09:31.610
So here in this example, I have
just a random client ID.

00:09:31.610 --> 00:09:35.530
And then I have one scope that
I'm interested in here.

00:09:35.530 --> 00:09:37.360
And this is the Calendar
scope.

00:09:37.360 --> 00:09:41.140
So this will ask the user, this
application would like to

00:09:41.140 --> 00:09:44.160
access your calendar, possibly
read and also possibly

00:09:44.160 --> 00:09:45.340
manipulate.

00:09:45.340 --> 00:09:46.810
Is that OK?

00:09:46.810 --> 00:09:49.960
And we'll be seeing an example
of that later.

00:09:49.960 --> 00:09:52.890
So the interface to do all OAuth
2.0 authentication is

00:09:52.890 --> 00:09:55.430
gabi.auth.authorize.

00:09:55.430 --> 00:09:59.430
You pass in the client ID I
mentioned, the scopes, and you

00:09:59.430 --> 00:10:02.090
can request multiple
scopes if you need

00:10:02.090 --> 00:10:04.800
access to multiple APIs.

00:10:04.800 --> 00:10:06.660
And then we have this immediate
value, which I'll be

00:10:06.660 --> 00:10:09.230
going over a little
bit more later.

00:10:09.230 --> 00:10:11.050
Now, that's all contained in
one object, so that's the

00:10:11.050 --> 00:10:12.080
first parameter.

00:10:12.080 --> 00:10:14.960
The second parameter is another
callback method.

00:10:14.960 --> 00:10:18.170
And this will be past the result
of authentication.

00:10:18.170 --> 00:10:20.530
And if it's successful, you can
continue on and use your

00:10:20.530 --> 00:10:20.860
application.

00:10:20.860 --> 00:10:23.345
If not, you'll need to handle
the error somehow.

00:10:28.770 --> 00:10:31.040
So now we know what
the Google API's

00:10:31.040 --> 00:10:32.610
JavaScript client can do.

00:10:32.610 --> 00:10:34.980
And I'm sure you're curious,
how do I do that?

00:10:34.980 --> 00:10:36.830
I've shown you some brief
examples, but now I'm going to

00:10:36.830 --> 00:10:40.100
go into a little bit more detail
about how exactly we

00:10:40.100 --> 00:10:43.380
can do that and how
that works.

00:10:43.380 --> 00:10:45.730
So two things I want to go
over before we begin.

00:10:45.730 --> 00:10:49.010
The first is the APIs console.

00:10:49.010 --> 00:10:52.390
This is where you create an
API key and a client ID.

00:10:52.390 --> 00:10:54.130
Both are used to identify your

00:10:54.130 --> 00:10:57.180
application when making requests.

00:10:57.180 --> 00:11:00.200
And again, we'll be talking
about those more detail when I

00:11:00.200 --> 00:11:02.930
go over authorization.

00:11:02.930 --> 00:11:05.090
This is also where you activate
the APIs that you're

00:11:05.090 --> 00:11:05.790
interested in.

00:11:05.790 --> 00:11:08.650
So you saw a long list of APIs
in the APIs Explorer.

00:11:08.650 --> 00:11:11.880
Well, you turn on the various
APIs that your application is

00:11:11.880 --> 00:11:14.600
going to need access to.

00:11:14.600 --> 00:11:16.370
And you can do more in
the APIs console

00:11:16.370 --> 00:11:20.110
to manage your project.

00:11:20.110 --> 00:11:22.460
You can change the quota
for the APIs.

00:11:22.460 --> 00:11:24.470
They'll have a default amount of
quota that they're allowed

00:11:24.470 --> 00:11:27.750
to access every day.

00:11:27.750 --> 00:11:29.770
But you can request more
if you need more.

00:11:29.770 --> 00:11:32.690
If your application's become
very popular, then you might

00:11:32.690 --> 00:11:34.120
need to do that.

00:11:34.120 --> 00:11:35.400
This is also where you
manage billings.

00:11:35.400 --> 00:11:40.310
A few of our APIs are paid APIs,
and you have to set up

00:11:40.310 --> 00:11:41.270
billing there.

00:11:41.270 --> 00:11:43.270
And you can do team management,
as well, to add

00:11:43.270 --> 00:11:45.510
more members to your project
so that they can go in and

00:11:45.510 --> 00:11:46.760
also change these settings.

00:11:50.130 --> 00:11:53.330
So I showed you the APIs
Explorer briefly.

00:11:53.330 --> 00:11:55.160
This is, as I mentioned, a
great starting point for

00:11:55.160 --> 00:11:56.660
documentation.

00:11:56.660 --> 00:11:58.910
First, you can just go through
the list of all the methods

00:11:58.910 --> 00:12:01.080
that are available on
the API and get a

00:12:01.080 --> 00:12:03.010
brief overview of each.

00:12:03.010 --> 00:12:04.940
And as you saw, there was
a link to the full

00:12:04.940 --> 00:12:07.830
documentation, so you can find
out just everything you want

00:12:07.830 --> 00:12:10.760
to know about this
particular API.

00:12:10.760 --> 00:12:13.570
You can try the API calls out
from the Explorer as well.

00:12:13.570 --> 00:12:15.540
And we're going to do
that right now.

00:12:15.540 --> 00:12:18.200
So here's that short
URL again.

00:12:18.200 --> 00:12:21.160
I hope you're noticing
a theme.

00:12:21.160 --> 00:12:23.490
So we come back into the APIs
Explorer, and I want to find

00:12:23.490 --> 00:12:25.120
the URL shortener API.

00:12:27.630 --> 00:12:29.090
So here are all those
methods again.

00:12:29.090 --> 00:12:32.720
And the description of the
first one says "expands a

00:12:32.720 --> 00:12:34.550
short URL or gets creation
time and

00:12:34.550 --> 00:12:36.310
analytics." Well, great.

00:12:36.310 --> 00:12:37.460
That's exactly what
we're looking for.

00:12:37.460 --> 00:12:40.270
I want to see what this
short URL expands to.

00:12:40.270 --> 00:12:43.830
So I click into that, and it
gives me this form where I can

00:12:43.830 --> 00:12:45.480
fill in the parameters
for this particular

00:12:45.480 --> 00:12:48.360
method and let it go.

00:12:48.360 --> 00:12:52.440
As you can see, the bold
red ones are required.

00:12:52.440 --> 00:12:54.820
Let's get that up
a little bit.

00:12:54.820 --> 00:12:57.530
So I'm going to paste in that
value here that we had before

00:12:57.530 --> 00:13:01.570
for short URL, and execute
this method.

00:13:01.570 --> 00:13:04.290
Now, if we scroll down, the
APIs Explorer shows us the

00:13:04.290 --> 00:13:05.310
request that was made.

00:13:05.310 --> 00:13:09.650
We saw this URL in the beginning
of the presentation.

00:13:09.650 --> 00:13:11.420
And then it shows the
response as well.

00:13:11.420 --> 00:13:14.050
And this is the same response
we saw earlier, a JSON

00:13:14.050 --> 00:13:17.120
response where long URL has
the value that we're

00:13:17.120 --> 00:13:18.370
interested in.

00:13:24.180 --> 00:13:24.580
OK.

00:13:24.580 --> 00:13:25.800
So now that we've done
that, we're ready

00:13:25.800 --> 00:13:28.250
to use the JS client.

00:13:28.250 --> 00:13:30.220
Well, to load it,
the URL is here.

00:13:30.220 --> 00:13:37.160
It's https://apis.goo
gle.com/js/client.js.

00:13:37.160 --> 00:13:39.300
Now, the way the JS client
loads, it loads asynchronously

00:13:39.300 --> 00:13:41.730
in two phases.

00:13:41.730 --> 00:13:43.890
We do this, obviously, so that
it doesn't block your page and

00:13:43.890 --> 00:13:46.050
make performance terrible while
you're waiting for the

00:13:46.050 --> 00:13:48.690
page to load.

00:13:48.690 --> 00:13:51.290
But this also means you need to
know when the JS client is

00:13:51.290 --> 00:13:53.920
actually loaded and
is ready to use.

00:13:53.920 --> 00:13:58.150
So to do that, we have added
this onload parameter, URL

00:13:58.150 --> 00:14:00.520
parameter, that you
add to the URL.

00:14:00.520 --> 00:14:04.570
And it specifies a global
JavaScript function that it

00:14:04.570 --> 00:14:08.590
should execute when the JS
client is ready to use.

00:14:08.590 --> 00:14:11.110
So let me just highlight
those two things here.

00:14:11.110 --> 00:14:17.980
We can see the URL for the JS
client and the script source

00:14:17.980 --> 00:14:19.650
with this onload parameter.

00:14:19.650 --> 00:14:21.750
And it's pointing to this global
init function which is

00:14:21.750 --> 00:14:23.170
defined above.

00:14:23.170 --> 00:14:25.690
And once the unit executes, we
know that the JS client has

00:14:25.690 --> 00:14:28.710
loaded, and we can run off
and start consuming APIs.

00:14:34.140 --> 00:14:37.690
So the first of the two ways you
can make requests in the

00:14:37.690 --> 00:14:41.150
JavaScript client is by
making a REST request.

00:14:41.150 --> 00:14:42.930
When you go into the
documentation, the full

00:14:42.930 --> 00:14:46.760
documentation, for each API,
they tend to describe the APIs

00:14:46.760 --> 00:14:48.730
in terms of REST.

00:14:48.730 --> 00:14:52.150
So, what are the URLs that you
need to construct to access

00:14:52.150 --> 00:14:53.460
various resources?

00:14:53.460 --> 00:14:55.870
What are the methods
you need to make?

00:14:55.870 --> 00:14:59.210
The HTTP methods you
need to use to

00:14:59.210 --> 00:15:00.460
manipulate these resources?

00:15:04.020 --> 00:15:07.070
So here, again, is the
REST request method.

00:15:07.070 --> 00:15:09.690
We just call it
gapi.client.request.

00:15:09.690 --> 00:15:11.650
And it takes one argument,
which is what we

00:15:11.650 --> 00:15:12.820
call a bag of arguments.

00:15:12.820 --> 00:15:17.230
It's just an object with key
value pairs of one required

00:15:17.230 --> 00:15:19.800
and several optional
parameters.

00:15:19.800 --> 00:15:22.550
So let's just go through
those very quickly.

00:15:22.550 --> 00:15:24.780
The first is the 'path,' the
path to which you're making

00:15:24.780 --> 00:15:26.970
this request, that identifies
the resource that you're

00:15:26.970 --> 00:15:29.800
trying to get or manipulate.

00:15:29.800 --> 00:15:32.200
Earlier, we saw that, for the
URL shortener, it was

00:15:32.200 --> 00:15:33.450
urlshortener/v1/url.

00:15:35.420 --> 00:15:38.580
So that last part, /url, is
the resource that we're

00:15:38.580 --> 00:15:40.070
interested in.

00:15:40.070 --> 00:15:42.200
Now you need that whole path
in the gapi.client.request,

00:15:42.200 --> 00:15:44.750
and we'll see that
in a second.

00:15:44.750 --> 00:15:47.270
The next parameter is 'params.'
These are URL

00:15:47.270 --> 00:15:49.640
parameters that will be
serialized and encoded and

00:15:49.640 --> 00:15:53.120
added to the path when
this request is made.

00:15:55.640 --> 00:15:57.540
When going through the
documentation, some of the

00:15:57.540 --> 00:16:02.210
APIs have URL parameters that
you can use to control how the

00:16:02.210 --> 00:16:04.960
method is executed, or maybe how
the response comes back.

00:16:04.960 --> 00:16:08.140
And so this is where you would
add those parameters.

00:16:08.140 --> 00:16:11.490
Next, we have 'method,' which
is the HTTP method.

00:16:11.490 --> 00:16:12.580
This is, again, optional.

00:16:12.580 --> 00:16:14.190
It defaults to a GET.

00:16:14.190 --> 00:16:18.670
But you can do, again, many APIs
support POSTs and DELETEs

00:16:18.670 --> 00:16:21.330
and INSERTs, in particular,
for deleting and inserting

00:16:21.330 --> 00:16:27.110
more resources.

00:16:27.110 --> 00:16:29.690
And then next we have 'headers.'
this is a key value

00:16:29.690 --> 00:16:32.080
pairing, again, of headers--

00:16:32.080 --> 00:16:33.130
and it's optional--

00:16:33.130 --> 00:16:34.850
that you can send along
with your requests.

00:16:34.850 --> 00:16:36.970
These are, again, just
HTTP headers.

00:16:36.970 --> 00:16:39.830
And some of the APIs have some
headers that you can set,

00:16:39.830 --> 00:16:43.020
again, to control or manipulate
the request as it's

00:16:43.020 --> 00:16:45.380
being made.

00:16:45.380 --> 00:16:48.080
Next, we have a 'body,'
an HTTP body.

00:16:48.080 --> 00:16:51.540
Particularly when doing inserts
and making REST

00:16:51.540 --> 00:16:55.570
requests, you'll serialize a
JSON object into the body, and

00:16:55.570 --> 00:16:59.630
that will get sent to the API.

00:16:59.630 --> 00:17:00.930
And finally, we have
'callback.'

00:17:00.930 --> 00:17:02.740
This is, again, optional.

00:17:02.740 --> 00:17:07.650
But it's a callback function
that will be executed when the

00:17:07.650 --> 00:17:09.819
request returns.

00:17:09.819 --> 00:17:11.130
Now you don't have
to provide this.

00:17:11.130 --> 00:17:13.510
If you do, the request is
executed immediately, because

00:17:13.510 --> 00:17:14.630
it has a callback.

00:17:14.630 --> 00:17:17.390
If not, you get the REST request
object back that we

00:17:17.390 --> 00:17:18.550
saw earlier.

00:17:18.550 --> 00:17:20.520
And then you can call execute on
that, and that's where you

00:17:20.520 --> 00:17:22.079
would pass in the callback
function.

00:17:26.160 --> 00:17:27.579
So here's an example.

00:17:27.579 --> 00:17:31.950
I've switched APIs now to the
Calendar API, because it works

00:17:31.950 --> 00:17:33.860
very well for this example.

00:17:33.860 --> 00:17:36.730
So, we see in the path that
I want to specify the API

00:17:36.730 --> 00:17:39.720
inversion that I'm interested
in-- calendar, v3.

00:17:39.720 --> 00:17:44.330
And the documentation
will mention this.

00:17:44.330 --> 00:17:46.990
And then I want to access
me, as a user.

00:17:46.990 --> 00:17:48.970
So I put in users/me.

00:17:48.970 --> 00:17:51.830
And in the documentation, "me"
is a special keyword to let

00:17:51.830 --> 00:17:54.790
you know that it wants to access
the currently logged-in

00:17:54.790 --> 00:18:00.420
users, so the users of your
applications, their Calendars.

00:18:00.420 --> 00:18:02.760
And then the last
is calendarList.

00:18:02.760 --> 00:18:05.155
I want to list all the Calendars
that this user has.

00:18:09.280 --> 00:18:12.640
So then I have the method as a
POST, because what I want to

00:18:12.640 --> 00:18:15.250
do for this request is insert
a new calendar.

00:18:15.250 --> 00:18:17.110
So I'm posting to
this resource to

00:18:17.110 --> 00:18:20.100
insert a new value.

00:18:20.100 --> 00:18:23.240
Next, I set one header value,
which is content type

00:18:23.240 --> 00:18:27.370
application JSON to let the
API server know that I'm

00:18:27.370 --> 00:18:30.310
sending JSON data along
with this request.

00:18:30.310 --> 00:18:31.600
Now, this is actually
the default.

00:18:31.600 --> 00:18:33.610
It's always included.

00:18:33.610 --> 00:18:35.080
But I've included it here
for illustration

00:18:35.080 --> 00:18:38.510
of the headers parameter.

00:18:38.510 --> 00:18:39.840
Next, we're passing
along a body.

00:18:39.840 --> 00:18:42.060
So, as I mentioned, we're
inserting a new calendar here,

00:18:42.060 --> 00:18:44.770
and this is how the API
expects the new

00:18:44.770 --> 00:18:47.440
calendar to be inserted.

00:18:47.440 --> 00:18:49.830
You pass in a calendar
resource, which the

00:18:49.830 --> 00:18:53.810
documentation describes, to
create this new calendar.

00:18:53.810 --> 00:18:57.470
So I've included one parameter
that's required, the ID, and

00:18:57.470 --> 00:19:00.910
that's just my demo email
address here.

00:19:00.910 --> 00:19:04.310
And I've also included an
optional parameter value, the

00:19:04.310 --> 00:19:05.950
selected true.

00:19:05.950 --> 00:19:10.830
And this will mean when you look
at the Calendar UI, that

00:19:10.830 --> 00:19:13.130
this calendar will be selected
by default and you'll see your

00:19:13.130 --> 00:19:16.010
events in the Calendar UI.

00:19:16.010 --> 00:19:18.275
And then I pass in a callback
so that this request will

00:19:18.275 --> 00:19:19.856
execute immediately.

00:19:19.856 --> 00:19:23.060
And when it returns, it will
execute this function.

00:19:25.805 --> 00:19:29.190
So let's talk a little bit
about that callback.

00:19:29.190 --> 00:19:32.090
So the callback takes
two parameters.

00:19:32.090 --> 00:19:34.670
The first is called
jsonResponse, and this is the

00:19:34.670 --> 00:19:39.970
response from the response
body, parsed as JSON.

00:19:39.970 --> 00:19:42.950
This will actually be the
Boolean value false if the

00:19:42.950 --> 00:19:47.540
response is not valid JSON or if
it's just not JSON at all.

00:19:47.540 --> 00:19:50.870
This could be the case for a
few APIs, but it's kind of

00:19:50.870 --> 00:19:55.620
rare that you will not
have a jsonResponse.

00:19:55.620 --> 00:19:59.070
If you don't, we also provide
rawResponse, which is the full

00:19:59.070 --> 00:20:02.170
HTTP response as a stream.

00:20:02.170 --> 00:20:03.330
So this is actually JSON.

00:20:03.330 --> 00:20:05.770
Even though it is a string, you
can parse it out into an

00:20:05.770 --> 00:20:10.240
object that contains the body
response, the headers, which

00:20:10.240 --> 00:20:13.750
is another key value pairing and
object that were sent as

00:20:13.750 --> 00:20:17.590
response headers, the status of
the request, and then the

00:20:17.590 --> 00:20:18.810
status text as well.

00:20:18.810 --> 00:20:21.320
So if you're interested in
anything besides the response

00:20:21.320 --> 00:20:23.910
in the body-- the headers, the
status, or the statusText--

00:20:23.910 --> 00:20:25.160
you would find that
in rawResponse.

00:20:30.140 --> 00:20:34.660
So the other request format that
we can use is JSON-RPC.

00:20:34.660 --> 00:20:36.800
And there's actually several
ways we can make a JSON-RPC

00:20:36.800 --> 00:20:39.410
request using the JS client.

00:20:39.410 --> 00:20:45.480
The first is by just directly
creating one of these objects.

00:20:45.480 --> 00:20:49.290
So we do that with
gapi.client.rpcRequest.

00:20:49.290 --> 00:20:51.710
And the format, as
you see here, is

00:20:51.710 --> 00:20:52.620
it takes three arguments.

00:20:52.620 --> 00:20:55.770
The first is the method
you want to execute.

00:20:55.770 --> 00:20:59.480
The second is the API version
of the API that

00:20:59.480 --> 00:21:01.170
you're trying to access.

00:21:01.170 --> 00:21:03.460
And then the parameters for this
actual request are passed

00:21:03.460 --> 00:21:06.450
on as the third argument here.

00:21:06.450 --> 00:21:08.560
So I have a quick example.

00:21:08.560 --> 00:21:13.940
This request is going to search
the Google+ profiles.

00:21:13.940 --> 00:21:16.290
So that method is
plus.people.search.

00:21:16.290 --> 00:21:17.940
You can find that, again,
in the APIs Explorer.

00:21:17.940 --> 00:21:21.740
There's method name and what
the current version is.

00:21:21.740 --> 00:21:24.530
In this case, it's V1.

00:21:24.530 --> 00:21:29.300
And then we pass in an object,
key value pairing, of the

00:21:29.300 --> 00:21:31.910
parameters that this
method expects.

00:21:31.910 --> 00:21:34.030
So it only has one required
parameter, and that's the

00:21:34.030 --> 00:21:35.400
query you want to make.

00:21:35.400 --> 00:21:38.380
And so I'm going to look for
every profile on Google+ where

00:21:38.380 --> 00:21:42.360
the person's name
includes Lewis.

00:21:42.360 --> 00:21:45.700
So that returns back a
RpcRequest object to me, and

00:21:45.700 --> 00:21:48.060
then I can execute that and
pass in a callback.

00:21:52.890 --> 00:21:55.160
So you may remember from before,
I didn't use that

00:21:55.160 --> 00:21:58.590
RpcRequest method when I
introduced JSON-RPC.

00:21:58.590 --> 00:22:03.600
I called a method directly on
the gapi.client namespace.

00:22:03.600 --> 00:22:06.370
Well, this is how
you set that up.

00:22:06.370 --> 00:22:10.000
We have a gapi.client.register
method, which registers this

00:22:10.000 --> 00:22:13.570
method that we're interested in,
so that we don't have to

00:22:13.570 --> 00:22:16.080
always put in the method
name that we want.

00:22:16.080 --> 00:22:17.960
And it's particularly
the API version that

00:22:17.960 --> 00:22:19.470
we're interested in.

00:22:19.470 --> 00:22:21.720
So when I do this call here,
gapi.client.register

00:22:21.720 --> 00:22:25.230
('plus.people.search') and pass
in the apiVersion, that's

00:22:25.230 --> 00:22:26.510
going to register this method.

00:22:26.510 --> 00:22:28.650
And remember that the version
that we're interested in for

00:22:28.650 --> 00:22:32.520
this method is V1.

00:22:32.520 --> 00:22:35.140
So that method registers in
the gapi.client namespace.

00:22:35.140 --> 00:22:38.460
We do this to avoid polluting
the global name space and keep

00:22:38.460 --> 00:22:41.570
it as tight as possible.

00:22:41.570 --> 00:22:45.740
And the way we register it is by
separating on the dots and

00:22:45.740 --> 00:22:48.400
the method name and turning
that into a namespace and

00:22:48.400 --> 00:22:49.680
function name.

00:22:49.680 --> 00:22:52.730
So plus.people.search becomes
gapi.client.plus.people.search.

00:22:55.860 --> 00:22:56.710
And then this is a method.

00:22:56.710 --> 00:22:59.720
So when you execute this method,
you pass in the params

00:22:59.720 --> 00:23:03.030
for the RpcRequest that
you're trying to make.

00:23:03.030 --> 00:23:06.970
And again, it returns to
an RpcRequest object.

00:23:06.970 --> 00:23:08.710
So in the example down here at
the bottom-- let me just

00:23:08.710 --> 00:23:09.870
highlight that real
quick-- this is

00:23:09.870 --> 00:23:11.690
where we call the method.

00:23:11.690 --> 00:23:14.670
I pass in the same query that
I was interested in before.

00:23:14.670 --> 00:23:17.110
I want to find everybody
named Lewis.

00:23:17.110 --> 00:23:19.380
And I get a request
object back.

00:23:19.380 --> 00:23:21.660
And then I can execute
that request object

00:23:21.660 --> 00:23:22.910
and pass in a callback.

00:23:28.100 --> 00:23:32.680
So now, with JSON-RPC, you can
load one in particular API,

00:23:32.680 --> 00:23:36.890
the entire API, all at once so
that you don't have to, for

00:23:36.890 --> 00:23:40.310
example, register every single
one of the methods.

00:23:40.310 --> 00:23:42.060
We looked at URL shortener
earlier, and

00:23:42.060 --> 00:23:42.980
there were three methods.

00:23:42.980 --> 00:23:45.290
Well, some have quite a
few more than that.

00:23:45.290 --> 00:23:47.150
They may have three dozen,
for example.

00:23:47.150 --> 00:23:49.920
And you don't want to have to
put in your code a line

00:23:49.920 --> 00:23:52.510
gapi.client.register for each
one of those methods if you're

00:23:52.510 --> 00:23:55.440
going to be using them
most of the time.

00:23:55.440 --> 00:23:58.220
So the JS client provides a
convenient method called load,

00:23:58.220 --> 00:24:02.180
gapi.client.load, which will
load the entire API surface,

00:24:02.180 --> 00:24:05.250
register all the methods, and
when we do that again, it will

00:24:05.250 --> 00:24:08.010
remember the version that
we're interested in.

00:24:08.010 --> 00:24:10.120
So this is a nice convenience
method that will save us some

00:24:10.120 --> 00:24:13.810
time and some coding
in our code.

00:24:13.810 --> 00:24:16.540
So the way this works is you
pass in the name of the API

00:24:16.540 --> 00:24:17.790
you're interested in.

00:24:17.790 --> 00:24:21.040
This is typically the first
part of the full method

00:24:21.040 --> 00:24:21.630
description.

00:24:21.630 --> 00:24:25.710
So in plus.people.search, the
first portion was "plus."

00:24:25.710 --> 00:24:27.700
That's API name.

00:24:27.700 --> 00:24:29.750
And then we pass in the version
we're interested in,

00:24:29.750 --> 00:24:31.860
V1 in this case.

00:24:31.860 --> 00:24:34.490
And then it also takes as a
third argument a callback to

00:24:34.490 --> 00:24:38.720
let us know when that API has
loaded, all the methods are

00:24:38.720 --> 00:24:41.550
registered, and we can start
making requests--

00:24:41.550 --> 00:24:43.490
registered method requests--

00:24:43.490 --> 00:24:44.740
on that API.

00:24:47.770 --> 00:24:49.360
So this one, for example,
registers all

00:24:49.360 --> 00:24:50.950
the Google+ API methods.

00:24:55.520 --> 00:24:58.020
So we saw how to make
a JSON-RPC request.

00:24:58.020 --> 00:25:00.680
We saw a couple methods of
making a JSON-RPC request.

00:25:00.680 --> 00:25:02.920
And in all of them, we
pass in a callback to

00:25:02.920 --> 00:25:05.440
this execute method.

00:25:05.440 --> 00:25:08.520
So this callback is very similar
to the REST callback,

00:25:08.520 --> 00:25:11.750
in which we get two parameters
passed to this callback.

00:25:11.750 --> 00:25:14.700
The first is JSON response.

00:25:14.700 --> 00:25:18.610
Again, this extracts the
returned value from the HTTP

00:25:18.610 --> 00:25:20.610
request, parses it
at JSON, and then

00:25:20.610 --> 00:25:23.130
passes it as this parameter.

00:25:23.130 --> 00:25:25.170
And again, this will be false
if the response is not valid

00:25:25.170 --> 00:25:27.400
Jason or not JSON at all.

00:25:27.400 --> 00:25:31.182
But of course, since we're
working with JSON-RPC, that is

00:25:31.182 --> 00:25:34.280
going to be extremely rare,
if it ever happens at all.

00:25:34.280 --> 00:25:36.760
But, just in case, we include
the rawResponse, which is the

00:25:36.760 --> 00:25:39.530
entire RPC response
as a string.

00:25:39.530 --> 00:25:41.260
It's always present, but
you may not always be

00:25:41.260 --> 00:25:43.790
interested in it.

00:25:43.790 --> 00:25:46.130
So again, if it's not JSON,
you can do your own custom

00:25:46.130 --> 00:25:46.860
parsing on this.

00:25:46.860 --> 00:25:48.650
But again, I don't think
that'll be a

00:25:48.650 --> 00:25:52.800
very common use case.

00:25:52.800 --> 00:25:55.410
So one cool thing about JSON-RPC
requests is we have

00:25:55.410 --> 00:25:58.530
built-in support for making
batch requests.

00:25:58.530 --> 00:26:01.980
So you have a snippet in
your code that makes

00:26:01.980 --> 00:26:04.810
many requests in order.

00:26:04.810 --> 00:26:07.590
And for each one of those, it's
going to be making an

00:26:07.590 --> 00:26:09.910
HTTP round trip.

00:26:09.910 --> 00:26:12.450
And these are HTTPS
round trips.

00:26:12.450 --> 00:26:15.670
All of our requests
are made on SSL.

00:26:15.670 --> 00:26:17.300
So they can be quite costly.

00:26:17.300 --> 00:26:19.270
If you're making many of them,
it would be nice if you could

00:26:19.270 --> 00:26:24.020
make multiple requests with
just one HTTP round trip.

00:26:24.020 --> 00:26:27.960
Well, this is what batching
allows you to do.

00:26:27.960 --> 00:26:30.560
All requests are sent off and
executed in parallel, and then

00:26:30.560 --> 00:26:32.100
they all come back at
the same time with

00:26:32.100 --> 00:26:33.890
their various responses.

00:26:33.890 --> 00:26:35.930
So let's go through, quickly,
how you use

00:26:35.930 --> 00:26:38.420
the JSON-RPC batching.

00:26:38.420 --> 00:26:40.720
Well, the first step,
up at the top, is

00:26:40.720 --> 00:26:42.120
create a new batch.

00:26:42.120 --> 00:26:44.670
And that method is
gapi.client.newRpcBatch.

00:26:44.670 --> 00:26:46.720
And this gives you back
a batch object.

00:26:46.720 --> 00:26:49.685
We can then add requests to
the batch object, and when

00:26:49.685 --> 00:26:53.580
we're done adding requests, we
can execute it and go and get

00:26:53.580 --> 00:26:56.770
our responses back.

00:26:56.770 --> 00:26:58.890
So the next two segments
we see here is

00:26:58.890 --> 00:27:02.080
the add method, batch.add.

00:27:02.080 --> 00:27:03.770
Let me show you first
in the code.

00:27:03.770 --> 00:27:06.520
I created two RpcRequests.

00:27:06.520 --> 00:27:09.610
Just for illustration, one is
a direct creation, where I

00:27:09.610 --> 00:27:13.650
call RpcRequest and pass in the
method and the API name

00:27:13.650 --> 00:27:15.050
that I'm interested in.

00:27:15.050 --> 00:27:17.840
And this one's going to search
for all Google+ profiles where

00:27:17.840 --> 00:27:21.250
the person's name
contains Larry.

00:27:21.250 --> 00:27:23.600
And then I create another
request from the register

00:27:23.600 --> 00:27:25.480
plus.people.search method.

00:27:25.480 --> 00:27:27.850
And you can see, in this case,
it's a little bit simpler.

00:27:27.850 --> 00:27:31.160
All I have to pass in now is the
query parameters that I'm

00:27:31.160 --> 00:27:32.470
interested.

00:27:32.470 --> 00:27:35.000
And so then this request is
going to search for all people

00:27:35.000 --> 00:27:36.290
on Google+ name Sergey.

00:27:40.290 --> 00:27:43.510
So now I want to add both these
requests to my batch and

00:27:43.510 --> 00:27:45.350
then execute the batch.

00:27:45.350 --> 00:27:47.930
Well, in the batch.add, the
first parameter, the first

00:27:47.930 --> 00:27:50.520
argument to this method--
it takes two--

00:27:50.520 --> 00:27:54.490
is required, and it's the
request you want to make.

00:27:54.490 --> 00:27:56.180
Makes sense.

00:27:56.180 --> 00:27:58.940
The second argument is another
one of these bag of args with

00:27:58.940 --> 00:28:01.700
some optional parameters
in it.

00:28:01.700 --> 00:28:04.450
The first is going to be the
ID for this request.

00:28:04.450 --> 00:28:06.740
So obviously, you're
making multiple

00:28:06.740 --> 00:28:08.950
batched requests here.

00:28:08.950 --> 00:28:11.800
When it returns, it may not
necessarily be in the same

00:28:11.800 --> 00:28:13.720
order as you added them
to the batch.

00:28:13.720 --> 00:28:16.500
It just depends on when
those requests

00:28:16.500 --> 00:28:18.780
finish on the back end.

00:28:18.780 --> 00:28:23.160
So if you want to be able to
access the response from this

00:28:23.160 --> 00:28:27.110
entire batch, you'll need
an ID for that.

00:28:27.110 --> 00:28:30.100
So for the Larry request,
I've added an ID.

00:28:30.100 --> 00:28:33.270
We're just going to call it
"Larry." So that will identify

00:28:33.270 --> 00:28:35.680
my response.

00:28:35.680 --> 00:28:37.810
I've also passed
in a callback.

00:28:37.810 --> 00:28:40.085
And I defined this callback
up above.

00:28:40.085 --> 00:28:42.100
Right now it's just
an empty function.

00:28:42.100 --> 00:28:45.960
But you can see it's got the
same callback signature that

00:28:45.960 --> 00:28:47.210
we've seen before.

00:28:51.540 --> 00:28:53.900
For the second request, I add
it, and I don't use any of

00:28:53.900 --> 00:28:55.950
optional parameters.

00:28:55.950 --> 00:28:58.770
Now, if you're interested in
the response for a batch,

00:28:58.770 --> 00:29:02.050
you're going to want one of
the two, ID or callback.

00:29:02.050 --> 00:29:06.060
You'll either want the ID to
extract a response from your

00:29:06.060 --> 00:29:08.350
batch response, or
the callback.

00:29:08.350 --> 00:29:10.260
Because this individual callback
will be called with

00:29:10.260 --> 00:29:13.400
just the response for this batch
operation, not for the

00:29:13.400 --> 00:29:14.650
entire thing.

00:29:16.810 --> 00:29:22.410
So once I've added two requests
to my batch, I define

00:29:22.410 --> 00:29:23.320
a batch callback.

00:29:23.320 --> 00:29:26.250
Again, this is just an empty
function for illustration

00:29:26.250 --> 00:29:29.350
purposes, but you can see that
the signature is similar to

00:29:29.350 --> 00:29:30.760
what we've seen before.

00:29:30.760 --> 00:29:33.150
I'm going to go over that
in detail in a second.

00:29:33.150 --> 00:29:35.345
And then I execute that
batch and pass

00:29:35.345 --> 00:29:36.595
in the batch callback.

00:29:40.330 --> 00:29:42.020
So a little bit about
these callbacks.

00:29:42.020 --> 00:29:43.240
As I mentioned, there
are callbacks

00:29:43.240 --> 00:29:44.330
for individual responses.

00:29:44.330 --> 00:29:47.170
You saw we added one for the
Larry request, but not for the

00:29:47.170 --> 00:29:48.720
Sergey request.

00:29:48.720 --> 00:29:52.250
And then we also, when we
executed the overall batch

00:29:52.250 --> 00:29:57.340
operation, we sent in another
callback method.

00:29:57.340 --> 00:30:00.450
So how do these get executed
when the response returns?

00:30:00.450 --> 00:30:02.310
Well, individual batch
callbacks are

00:30:02.310 --> 00:30:03.740
all executed first.

00:30:03.740 --> 00:30:05.170
You're not guaranteed the
order, but you will be

00:30:05.170 --> 00:30:07.370
guaranteed that those
will execute first.

00:30:07.370 --> 00:30:10.310
And then when all those are
done, the overall batch

00:30:10.310 --> 00:30:11.560
callback is executed.

00:30:14.060 --> 00:30:17.350
So what gets passed to these
callbacks when the response

00:30:17.350 --> 00:30:18.862
has returned?

00:30:18.862 --> 00:30:21.200
Well, again, it's very similar
to what we've seen before for

00:30:21.200 --> 00:30:24.060
JSON-RPC requests.

00:30:24.060 --> 00:30:25.490
The first is a JSON response.

00:30:25.490 --> 00:30:28.280
This is the response parsed as
JSON, so you get a JavaScript

00:30:28.280 --> 00:30:30.770
object back.

00:30:30.770 --> 00:30:33.470
For individual callbacks, this
is the response, as I said,

00:30:33.470 --> 00:30:35.590
just for that particular
method.

00:30:35.590 --> 00:30:39.100
So the Larry callback we saw
will be executed and only

00:30:39.100 --> 00:30:43.910
receive the response from the
search for people named Larry.

00:30:43.910 --> 00:30:46.075
It will not see the response
for Sergey

00:30:46.075 --> 00:30:48.430
in this JSON response.

00:30:48.430 --> 00:30:52.450
For batch callbacks, this
is all of the responses.

00:30:52.450 --> 00:30:57.150
And it's a map of the batch ID
to the particular response for

00:30:57.150 --> 00:30:59.780
that batch operation.

00:30:59.780 --> 00:31:03.030
And then the second parameter is
the best response, which is

00:31:03.030 --> 00:31:08.980
the same overall ID to response
mapping, but this is

00:31:08.980 --> 00:31:10.360
just a string.

00:31:10.360 --> 00:31:13.370
What's nice about this is it
always includes the full batch

00:31:13.370 --> 00:31:16.410
response for both individual
callbacks and

00:31:16.410 --> 00:31:18.170
for the overall callback.

00:31:18.170 --> 00:31:20.950
So at the end of one of your
individual callbacks, you're

00:31:20.950 --> 00:31:23.640
going to need to access data
from another batch operation

00:31:23.640 --> 00:31:24.980
you've made.

00:31:24.980 --> 00:31:28.270
You could either look in this
batch response, or you can

00:31:28.270 --> 00:31:32.190
also use the overall batch
callback, as that will receive

00:31:32.190 --> 00:31:36.470
the ID to response mapping as
well, but that time in the

00:31:36.470 --> 00:31:39.260
JSON response parameter.

00:31:39.260 --> 00:31:41.800
So, I have an example down here
from our previous slide.

00:31:41.800 --> 00:31:43.840
Those requests we made
in the batch.

00:31:43.840 --> 00:31:45.640
We get a response back,
which is just an

00:31:45.640 --> 00:31:48.260
ID to response pairing.

00:31:48.260 --> 00:31:51.350
The first ID is Larry, since we
specified what ID we want

00:31:51.350 --> 00:31:54.490
that response to be
identified with.

00:31:54.490 --> 00:31:57.470
And then the second one is just
a random string that the

00:31:57.470 --> 00:32:01.960
JS client automatically assigned
for you so that it

00:32:01.960 --> 00:32:04.450
has a unique ID identified
with it.

00:32:04.450 --> 00:32:07.130
And then each one of these has
the individual responses, the

00:32:07.130 --> 00:32:10.163
search results for Larry and the
search results for Sergey.

00:32:14.510 --> 00:32:16.510
OK, so now we're going to
diverge just a little bit.

00:32:16.510 --> 00:32:19.550
We saw the two request
formats that you can

00:32:19.550 --> 00:32:21.210
use with the JS client.

00:32:21.210 --> 00:32:24.050
One is the RESTful style,
the other is JSON-RPC.

00:32:29.040 --> 00:32:33.050
Well, we also provide an option
for using a different

00:32:33.050 --> 00:32:35.210
transport for making
these requests.

00:32:35.210 --> 00:32:38.930
So, astute observers will notice
that we're making calls

00:32:38.930 --> 00:32:42.530
to www.googleapis.com
from your domain.

00:32:42.530 --> 00:32:44.540
Your application is running
on a different domain.

00:32:44.540 --> 00:32:48.120
We're not going to let you
run on googleapis.com.

00:32:48.120 --> 00:32:51.510
Well, you can't make
XML HTTP requests

00:32:51.510 --> 00:32:52.325
to a different domain.

00:32:52.325 --> 00:32:54.710
That's not allowed
by browsers.

00:32:54.710 --> 00:32:57.090
Well, the JS client gets around
this in a somewhat

00:32:57.090 --> 00:33:00.100
clever way, but it's also a
little bit bulky, and it's

00:33:00.100 --> 00:33:01.350
proprietary as well.

00:33:03.730 --> 00:33:07.210
But there's a new transport out
there called CORS, which

00:33:07.210 --> 00:33:10.470
stands for Cross Origin
Resources Sharing.

00:33:10.470 --> 00:33:14.170
So if the server that is
accepting XML HTTP requests

00:33:14.170 --> 00:33:17.030
support CORS and says CORS
will be allowed for these

00:33:17.030 --> 00:33:20.560
requests, then you can
make a CORS request.

00:33:20.560 --> 00:33:23.860
And so we've implemented
this on googleapis.com.

00:33:23.860 --> 00:33:29.840
So you can make direct
XHRs to Google APIs

00:33:29.840 --> 00:33:33.230
and access our APIs.

00:33:33.230 --> 00:33:36.470
So these are constructed similar
to REST requests,

00:33:36.470 --> 00:33:39.190
because we're just making HTTP
requests and, as you may know,

00:33:39.190 --> 00:33:42.060
that those are based on
the REST protocol.

00:33:42.060 --> 00:33:45.020
So I have a snippet here, and
what's cool about this snippet

00:33:45.020 --> 00:33:48.100
I've included is you can take
all this code, copy it into a

00:33:48.100 --> 00:33:50.870
page, make a request,
and it will work--

00:33:50.870 --> 00:33:51.940
well, with one caveat.

00:33:51.940 --> 00:33:56.110
I've provided a dummy
API key here.

00:33:56.110 --> 00:33:58.520
But if you change that and put
in your own API key, this

00:33:58.520 --> 00:34:00.640
would work just fine.

00:34:00.640 --> 00:34:05.720
So we can see, in this
example, some of the

00:34:05.720 --> 00:34:07.070
translations that
we need to make.

00:34:07.070 --> 00:34:11.590
So when you open an XHR, the
first parameter is the HTTP

00:34:11.590 --> 00:34:12.920
method you want to make.

00:34:12.920 --> 00:34:15.520
So that was provided in
gapi.client.request.

00:34:15.520 --> 00:34:17.310
Here's where you put it here.

00:34:17.310 --> 00:34:19.820
And then the second parameter is
where you want to make the

00:34:19.820 --> 00:34:21.920
request to.

00:34:21.920 --> 00:34:23.330
So you can see, I have
to include a bit

00:34:23.330 --> 00:34:24.909
more in this example.

00:34:24.909 --> 00:34:29.710
I have to include the domain
I want, www.googleapis.com.

00:34:29.710 --> 00:34:32.389
And now there's this new
parameter key with this sort

00:34:32.389 --> 00:34:35.030
of encrypted value here, and
what the heck is that?

00:34:35.030 --> 00:34:37.820
Well when making requests,
you must identify your

00:34:37.820 --> 00:34:41.010
application, either using
an API key or client ID.

00:34:41.010 --> 00:34:43.120
We'll get back to this again a
little bit more when we talk

00:34:43.120 --> 00:34:45.460
about authentication.

00:34:45.460 --> 00:34:48.570
Normally, the JS client, you
set the API key once, it

00:34:48.570 --> 00:34:52.690
remembers it, and for every
request this key is set.

00:34:52.690 --> 00:34:54.420
Well, if you're making a CORS
requests, you're not

00:34:54.420 --> 00:34:55.750
using the JS client.

00:34:55.750 --> 00:34:58.160
And so you need to remember
to add that.

00:34:58.160 --> 00:35:00.340
The same is true for this
request header here, Content

00:35:00.340 --> 00:35:02.670
Type Application JSON.

00:35:02.670 --> 00:35:05.160
I included that in the REST
example earlier, for

00:35:05.160 --> 00:35:07.660
illustration purposes, and
mentioned that the JS client

00:35:07.660 --> 00:35:08.820
will handle this for you.

00:35:08.820 --> 00:35:11.980
Well, if you're making direct
requests through CORS, you

00:35:11.980 --> 00:35:15.190
need to remember to
set this as well.

00:35:15.190 --> 00:35:18.260
The callback is set by sending
a function to the onload

00:35:18.260 --> 00:35:19.890
parameter and getting the
response from the

00:35:19.890 --> 00:35:22.580
XHR response text.

00:35:22.580 --> 00:35:27.280
And we send the payload in the
body through the xhr.send.

00:35:27.280 --> 00:35:30.130
So in this example, I'm actually
inserting a long URL

00:35:30.130 --> 00:35:33.060
to try to get back the shortened
version for it.

00:35:33.060 --> 00:35:35.580
So when I send the request,
I pass in the long URL,

00:35:35.580 --> 00:35:42.030
www.google.com.

00:35:42.030 --> 00:35:44.220
So why did I mentioned this?

00:35:44.220 --> 00:35:47.700
Well, first, we just think
CORS is pretty cool.

00:35:47.700 --> 00:35:50.690
It's a native transport, which
means you don't need to use,

00:35:50.690 --> 00:35:53.840
as I mentioned, our proprietary,
cross-domain

00:35:53.840 --> 00:35:56.150
handling method, which
means it allows for

00:35:56.150 --> 00:35:58.670
faster requests overall.

00:35:58.670 --> 00:36:01.590
It's also standards-compliant,
non-proprietary, and it's

00:36:01.590 --> 00:36:03.910
native to most major
modern browsers.

00:36:03.910 --> 00:36:06.130
So I encourage you, if you're
interested, to try out CORS

00:36:06.130 --> 00:36:09.170
request, but with a
couple caveats.

00:36:09.170 --> 00:36:14.260
One is that browser support
is currently not quite as

00:36:14.260 --> 00:36:15.850
expansive as the JS client.

00:36:15.850 --> 00:36:18.870
So the JS client will handle
pretty much any major modern

00:36:18.870 --> 00:36:22.450
browser that your users
are using, but CORS is

00:36:22.450 --> 00:36:25.230
not quite there yet.

00:36:25.230 --> 00:36:27.810
Also, since it's not currently
implemented in the JS client,

00:36:27.810 --> 00:36:30.860
if you stop using the JS client,
you'll miss future

00:36:30.860 --> 00:36:32.960
updates to the JS client.

00:36:32.960 --> 00:36:35.820
So that's why I mentioned
to use, maybe, as an

00:36:35.820 --> 00:36:36.930
experimental basis.

00:36:36.930 --> 00:36:40.750
Or perhaps you know that your
users are only using compliant

00:36:40.750 --> 00:36:44.250
browsers, and so you just want
to use CORS instead.

00:36:44.250 --> 00:36:46.510
That's a great use
case for that.

00:36:46.510 --> 00:36:50.200
So I've included a useful link
here to caniuse.com, which

00:36:50.200 --> 00:36:52.670
will tell you which browsers and
which versions currently

00:36:52.670 --> 00:36:53.920
support this.

00:36:57.880 --> 00:37:01.710
So let's summarize, first, the
two request formats that I've

00:37:01.710 --> 00:37:02.590
mentioned here.

00:37:02.590 --> 00:37:07.140
The one is JSON-RPC, and
the other is REST.

00:37:07.140 --> 00:37:11.330
So, which allows you to set and
read HTTP method headers

00:37:11.330 --> 00:37:12.300
and bodies?

00:37:12.300 --> 00:37:13.790
Well, the REST does,
as we saw.

00:37:13.790 --> 00:37:15.160
It had those various
parameters that

00:37:15.160 --> 00:37:16.760
you can pass in.

00:37:16.760 --> 00:37:17.930
JSON-RPC does not.

00:37:17.930 --> 00:37:19.960
It only allows you to
pass the parameters

00:37:19.960 --> 00:37:21.210
that the API expects.

00:37:23.570 --> 00:37:24.440
What about batching?

00:37:24.440 --> 00:37:26.460
Well, JSON-RPC has built-in
batching.

00:37:26.460 --> 00:37:27.230
We saw that earlier.

00:37:27.230 --> 00:37:28.370
It was pretty easy to do.

00:37:28.370 --> 00:37:30.580
There's just a few method calls
you need to make to get

00:37:30.580 --> 00:37:32.660
that to work.

00:37:32.660 --> 00:37:35.340
REST also supports batching,
but it's quite a bit more

00:37:35.340 --> 00:37:37.880
tricky to do, and it's not
built into the JS client

00:37:37.880 --> 00:37:40.350
currently, so you'll have
to do it by hand and

00:37:40.350 --> 00:37:41.720
really kind of messy.

00:37:41.720 --> 00:37:44.730
I definitely suggest, for right
now, using JSON-RPC if

00:37:44.730 --> 00:37:47.370
you want to do batching.

00:37:47.370 --> 00:37:49.990
And we also saw that, with
JSON-RPC, we can auto-load

00:37:49.990 --> 00:37:53.160
full APIs, register all those
methods, and then make these

00:37:53.160 --> 00:37:56.200
really simple requests on them
but just passing in the query

00:37:56.200 --> 00:37:58.550
parameters that the
API expects.

00:37:58.550 --> 00:38:00.540
Whereas, with REST, you pretty
much need to construct every

00:38:00.540 --> 00:38:03.340
single request manually
by hand.

00:38:06.920 --> 00:38:08.530
We also have two transports.

00:38:08.530 --> 00:38:10.130
One is built into
the JS client.

00:38:10.130 --> 00:38:12.300
We call that XD3.

00:38:12.300 --> 00:38:15.820
And the other is CORS,
as I mentioned.

00:38:15.820 --> 00:38:18.160
Well, if you use the JS client,
then your requests are

00:38:18.160 --> 00:38:20.260
automatically formatted.

00:38:20.260 --> 00:38:23.500
So I mentioned before that
CORS requests generally

00:38:23.500 --> 00:38:25.510
translate well to
REST requests.

00:38:25.510 --> 00:38:29.440
Well, you can also make a
JSON-RPC request using CORS if

00:38:29.440 --> 00:38:30.810
you get the format right.

00:38:30.810 --> 00:38:33.710
Well, the JS client handles
the format for you, so you

00:38:33.710 --> 00:38:34.880
don't have to worry
about that.

00:38:34.880 --> 00:38:36.580
And it can be maybe a
little bit tricky.

00:38:36.580 --> 00:38:41.020
So CORS doesn't allow you to do
that, at least currently.

00:38:41.020 --> 00:38:43.530
The JS client is fully
cross-browser compatible.

00:38:43.530 --> 00:38:45.370
We saw all the clients
that it supports.

00:38:45.370 --> 00:38:48.990
That'll cover most modern
browsers, major browsers,

00:38:48.990 --> 00:38:53.280
whereas CORS only has
partial, currently.

00:38:53.280 --> 00:38:56.170
However, CORS is native to the
browsers that do support it,

00:38:56.170 --> 00:38:58.170
whereas the JS client,
obviously, is not, and you

00:38:58.170 --> 00:39:01.550
need to download that into
your application.

00:39:01.550 --> 00:39:04.370
JS client has built-in Auth,
however, and allows us to make

00:39:04.370 --> 00:39:08.300
these OAuth 2.0 authentication
and authorization, whereas

00:39:08.300 --> 00:39:09.620
CORS does not.

00:39:09.620 --> 00:39:11.750
Those endpoints don't support
CORS currently, so you'll

00:39:11.750 --> 00:39:13.910
still need to use the JS client
if you want to do

00:39:13.910 --> 00:39:15.160
authorization.

00:39:19.020 --> 00:39:19.925
Let's talk about
authorization.

00:39:19.925 --> 00:39:21.890
This is the last major
piece of the JS

00:39:21.890 --> 00:39:25.820
client that it provides.

00:39:25.820 --> 00:39:27.860
So just a very quick
OAuth 2.0 overview.

00:39:27.860 --> 00:39:30.370
This is probably review
for most of you.

00:39:30.370 --> 00:39:32.310
It's in the webinar, if you've
seen the webinar.

00:39:32.310 --> 00:39:35.480
And there's also some
talks at Google I/O

00:39:35.480 --> 00:39:37.680
that talk about OAuth.

00:39:37.680 --> 00:39:39.610
But just a quick overview.

00:39:39.610 --> 00:39:41.480
I found a great quote
for this.

00:39:41.480 --> 00:39:44.620
"OAuth is a security protocol
that enables users to grant

00:39:44.620 --> 00:39:47.490
third-party access to their web
resources without sharing

00:39:47.490 --> 00:39:49.470
their password."

00:39:49.470 --> 00:39:53.240
So normally, if we did not have
OAuth, the user would

00:39:53.240 --> 00:39:57.130
have to give your application
their username and password so

00:39:57.130 --> 00:39:59.490
that you could sign into Google
for them and make

00:39:59.490 --> 00:40:02.700
requests to the Google
API servers.

00:40:02.700 --> 00:40:05.230
Well, with OAuth, that's
no longer necessary.

00:40:05.230 --> 00:40:08.150
Instead, the user logs in
directly to this third party--

00:40:08.150 --> 00:40:11.210
in this case, the Google
APIs server--

00:40:11.210 --> 00:40:12.580
and gets back an access token.

00:40:12.580 --> 00:40:16.080
And then your application uses
that access token to make

00:40:16.080 --> 00:40:17.480
requests to protect
your resources

00:40:17.480 --> 00:40:20.140
on the user's behalf.

00:40:20.140 --> 00:40:23.040
So I have a few useful links
here to the OAuth working

00:40:23.040 --> 00:40:26.910
draft, a page on the Google
Developers page about OAuth

00:40:26.910 --> 00:40:29.350
and how to use it and everything
that provides and

00:40:29.350 --> 00:40:33.240
what we support, and then a nice
intro from universe.com,

00:40:33.240 --> 00:40:36.620
which is where I got this great
quote here that briefly

00:40:36.620 --> 00:40:39.030
describes OAuth 2.0.

00:40:39.030 --> 00:40:41.160
So let's look at that, quickly,
in an example.

00:40:41.160 --> 00:40:44.400
I want to show the difference
between authorization and

00:40:44.400 --> 00:40:46.790
authentication, because
I think I might be

00:40:46.790 --> 00:40:48.770
a little bit unclear.

00:40:48.770 --> 00:40:50.820
So this example, as it says,
is going to retrieve my

00:40:50.820 --> 00:40:56.040
profile name and photo using
the Google+ API.

00:40:56.040 --> 00:40:58.640
So I click this Authorize
button here.

00:40:58.640 --> 00:41:01.440
And the first thing it does is
pop up a Google-- this is

00:41:01.440 --> 00:41:02.835
accounts.google.com,
as you can see.

00:41:02.835 --> 00:41:05.670
This is the Google login page.

00:41:05.670 --> 00:41:11.030
So I need to provide my email
here and password.

00:41:15.930 --> 00:41:17.180
And then I sign in.

00:41:17.180 --> 00:41:20.640
That's the authentication part
that authenticates me with

00:41:20.640 --> 00:41:25.470
Google servers only,
not your servers.

00:41:25.470 --> 00:41:27.040
And then the next page it
brings me to is the

00:41:27.040 --> 00:41:32.170
authorization page, where
the user authorizes your

00:41:32.170 --> 00:41:35.760
application to make requests
on their behalf.

00:41:35.760 --> 00:41:39.480
So we can see that my app, I/O
2012 JS Client Demos, is

00:41:39.480 --> 00:41:42.050
requesting permission to know
who I am on Google, so it can

00:41:42.050 --> 00:41:44.940
get my profile name
and picture.

00:41:44.940 --> 00:41:46.810
And if I expand that, it tells
you a little bit more.

00:41:46.810 --> 00:41:49.260
Associate you with your
Google profile.

00:41:49.260 --> 00:41:51.800
So this segment here comes from
those scopes that you

00:41:51.800 --> 00:41:54.430
pass when you do
gapi.auth.authorize.

00:41:54.430 --> 00:41:56.600
And again, there can
be many of these.

00:41:56.600 --> 00:41:59.880
So the user can click Allow
Access or no, No Thanks, I'm

00:41:59.880 --> 00:42:00.815
not interested.

00:42:00.815 --> 00:42:04.030
Of course, I'm going to click
Allow Access here.

00:42:04.030 --> 00:42:09.870
And there you go, it retrieves
my name and my little Android

00:42:09.870 --> 00:42:11.490
figure avatar here.

00:42:14.690 --> 00:42:19.010
So I've been talking about the
API key and client ID a bit.

00:42:19.010 --> 00:42:21.340
Let's go over what exactly
those are.

00:42:21.340 --> 00:42:24.790
Now, if your application is
accessing unprotected

00:42:24.790 --> 00:42:27.840
resources, then all you
need is the API key.

00:42:27.840 --> 00:42:31.360
And all it does is identify your
application is accessing

00:42:31.360 --> 00:42:33.020
these APIs.

00:42:33.020 --> 00:42:36.530
And that's important for quota
and things like that.

00:42:36.530 --> 00:42:39.230
However, for protected
resources, we need to make

00:42:39.230 --> 00:42:41.430
sure that you're authorized
to access

00:42:41.430 --> 00:42:43.330
these protected resources.

00:42:43.330 --> 00:42:47.690
And so that's when you exchange
a client ID to our

00:42:47.690 --> 00:42:50.790
Google authorization servers to
get an access token back,

00:42:50.790 --> 00:42:53.190
and then you pass that access
token with each request to

00:42:53.190 --> 00:42:55.280
access-protected resources.

00:42:55.280 --> 00:42:58.470
So let's go over, really
quickly, where you get this

00:42:58.470 --> 00:43:01.790
API keys and client IDs.

00:43:05.480 --> 00:43:07.460
So I'm going to the APIs console
here that we saw

00:43:07.460 --> 00:43:09.965
earlier, and I'm going to
create a new project.

00:43:14.010 --> 00:43:15.590
And when we create the project,
the first place it

00:43:15.590 --> 00:43:17.060
takes us is to the
Services page.

00:43:17.060 --> 00:43:19.790
And this is where you turn on
all the various APIs that

00:43:19.790 --> 00:43:21.320
you're interested in.

00:43:21.320 --> 00:43:22.560
I've been using a
few examples, so

00:43:22.560 --> 00:43:23.460
let's turn those on.

00:43:23.460 --> 00:43:25.455
I'm going to turn on
Calendar first.

00:43:25.455 --> 00:43:28.220
And you can see what it does is
it sends me to a Terms of

00:43:28.220 --> 00:43:31.010
Service page to make sure I
agree to the terms of service,

00:43:31.010 --> 00:43:32.870
first for Google APIs
is in general--

00:43:32.870 --> 00:43:34.880
I accept--

00:43:34.880 --> 00:43:37.355
and then for the Calendar
API in particular.

00:43:37.355 --> 00:43:41.310
I'm going to go ahead and
agree to those as well.

00:43:41.310 --> 00:43:43.280
And then we've been
using Google+.

00:43:43.280 --> 00:43:44.890
Let me turn that one on.

00:43:44.890 --> 00:43:46.500
And again, there's the
Google+ Terms of

00:43:46.500 --> 00:43:49.320
Service, so I accept that.

00:43:49.320 --> 00:43:51.520
And finally, we've been using
URL Shortener as well.

00:43:51.520 --> 00:43:52.800
So let's turn that one on.

00:43:52.800 --> 00:43:54.800
And in that case there is no
Terms of Service for the URL

00:43:54.800 --> 00:43:57.680
Shortener, so we don't
see anything there.

00:43:57.680 --> 00:44:01.020
So now that I've turned on the
APIs that I'm interested in,

00:44:01.020 --> 00:44:03.470
we'll go to the API
Access tab.

00:44:03.470 --> 00:44:06.260
And we can see already under
Simple API Access that there

00:44:06.260 --> 00:44:07.730
is an API key here.

00:44:07.730 --> 00:44:10.030
Just highlight that quickly.

00:44:10.030 --> 00:44:12.340
This is that key that sent along
with the request you saw

00:44:12.340 --> 00:44:14.900
earlier, and it will identify
your application for

00:44:14.900 --> 00:44:16.980
unprotected resources.

00:44:16.980 --> 00:44:20.290
However, if we want to access
protected resources, we need

00:44:20.290 --> 00:44:21.975
an OAuth 2.0 client ID.

00:44:21.975 --> 00:44:25.270
So let's create one with
this blue button here.

00:44:25.270 --> 00:44:27.490
First thing you do is put
in your product name.

00:44:27.490 --> 00:44:29.500
So when we saw that
authorization window, it said

00:44:29.500 --> 00:44:31.720
I/O 2012 JS Client Demos.

00:44:31.720 --> 00:44:32.970
Let's put that in.

00:44:38.480 --> 00:44:40.760
You can also put a logo, and
this will show up on that same

00:44:40.760 --> 00:44:42.185
page, too, to identify
your application.

00:44:42.185 --> 00:44:45.290
I'm just going to skip
that for now.

00:44:45.290 --> 00:44:47.640
So it asks you what your
application type is.

00:44:47.640 --> 00:44:49.840
Of course, in this case, we're
building web applications, so

00:44:49.840 --> 00:44:51.690
we choose Web Application.

00:44:51.690 --> 00:44:55.316
And then down here it asks for
your site or host name.

00:44:55.316 --> 00:44:57.980
I'm going to expand this to get
a few more options here.

00:44:57.980 --> 00:45:00.590
So this first box, Authorize
Redirect URIs, is not going to

00:45:00.590 --> 00:45:04.210
apply in our case, because we're
not doing that kind of

00:45:04.210 --> 00:45:05.510
authorization.

00:45:05.510 --> 00:45:08.500
If you go to the OAuth 2.0 talk,
they'll talk about that

00:45:08.500 --> 00:45:11.370
a little bit more and
what that does.

00:45:11.370 --> 00:45:13.890
We're just curious about this
authorized JavaScript origin,

00:45:13.890 --> 00:45:16.520
because we're making JavaScript
requests.

00:45:16.520 --> 00:45:19.950
So you can see here, it's
defaulted to www.example.com.

00:45:19.950 --> 00:45:24.490
Well, as a developer, this
is the domain that your

00:45:24.490 --> 00:45:25.980
application is running on.

00:45:25.980 --> 00:45:29.570
Well, let's just say mine is
running on google.com.

00:45:29.570 --> 00:45:33.040
Now, when verifying these
origins, they

00:45:33.040 --> 00:45:34.130
need to match exactly.

00:45:34.130 --> 00:45:36.710
So I have the HTTPS
protocol here--

00:45:36.710 --> 00:45:38.800
that needs to be listed--

00:45:38.800 --> 00:45:40.290
and then the full domain.

00:45:40.290 --> 00:45:42.660
And also, if you're going to
be using a port, the port

00:45:42.660 --> 00:45:45.500
should be listed here.

00:45:45.500 --> 00:45:47.760
So I'm going to go ahead and
create this client ID to run

00:45:47.760 --> 00:45:50.810
my application on secure
google.com.

00:45:50.810 --> 00:45:52.920
And now we have a client ID.

00:45:52.920 --> 00:45:58.200
So this is what's used to pass
to the authorized call to get

00:45:58.200 --> 00:46:00.430
back an access token so that
your application can use that

00:46:00.430 --> 00:46:02.720
access token to start
making requests.

00:46:02.720 --> 00:46:04.960
Now, again, if you're using
the JS client, when that

00:46:04.960 --> 00:46:08.540
access token gets returned, the
JS client will save it for

00:46:08.540 --> 00:46:11.430
you locally, and then whenever
you make a request, that

00:46:11.430 --> 00:46:15.180
access token will automatically
be sent.

00:46:15.180 --> 00:46:17.050
Now, if you're sending an access
token, you don't also

00:46:17.050 --> 00:46:20.270
have to send an API key,
but it doesn't hurt to.

00:46:20.270 --> 00:46:23.340
So I generally recommend to
always set the API key.

00:46:23.340 --> 00:46:27.460
And then, even if you're using
a client ID, the access token

00:46:27.460 --> 00:46:30.065
gets sent as well, and
everything works just fine.

00:46:34.520 --> 00:46:35.020
OK.

00:46:35.020 --> 00:46:38.960
So I'm just going to go over
a code snippet here.

00:46:38.960 --> 00:46:42.280
And again, I included all this
code because this is just

00:46:42.280 --> 00:46:45.100
about everything you need
to do to make a nice

00:46:45.100 --> 00:46:48.890
authorization experience
for your application.

00:46:48.890 --> 00:46:51.740
So I'm going to go through
what this does.

00:46:51.740 --> 00:46:53.660
First, at the top here, we
have this global init

00:46:53.660 --> 00:46:55.340
function, which is going
to be executed when

00:46:55.340 --> 00:46:56.280
the JS client loads.

00:46:56.280 --> 00:46:58.120
We saw that earlier.

00:46:58.120 --> 00:46:59.880
First thing I do is
I set the API key.

00:46:59.880 --> 00:47:03.290
Now, I have a variable API key
above here that I don't show,

00:47:03.290 --> 00:47:06.980
but this is the key you saw
in the APIs console.

00:47:06.980 --> 00:47:08.540
And then the next thing I'm
going to do is call this

00:47:08.540 --> 00:47:10.890
checkAuth function here, which
is going to make a

00:47:10.890 --> 00:47:14.020
gapi.auth.authorize call.

00:47:14.020 --> 00:47:16.030
And to that, I passed the
client ID that we just

00:47:16.030 --> 00:47:19.210
created, the scopes that I'm
interested in-- and we saw we

00:47:19.210 --> 00:47:21.760
can have Calendar, maybe, or if
you're using Google+, you

00:47:21.760 --> 00:47:25.110
want to say that you're going
to use the Google+ scope--

00:47:25.110 --> 00:47:28.170
and then the last value I
pass is immediate true.

00:47:28.170 --> 00:47:31.350
Now, what this is going to do
is do a behind-the-scenes

00:47:31.350 --> 00:47:34.490
check to see, hey, has this user
already authorized your

00:47:34.490 --> 00:47:34.825
application?

00:47:34.825 --> 00:47:36.510
If so, terrific.

00:47:36.510 --> 00:47:38.590
And if they're signed in, of
course, we'll give you back an

00:47:38.590 --> 00:47:41.620
access token and you're
off and running.

00:47:41.620 --> 00:47:43.740
Otherwise, you're going to need
to send the user through

00:47:43.740 --> 00:47:44.990
the authorization flow.

00:47:47.530 --> 00:47:49.490
So when this returns, it's
going to call this

00:47:49.490 --> 00:47:53.810
handleAuthResult function and
pass in an Auth result.

00:47:53.810 --> 00:47:55.670
We need to check that Auth
result to see, first, if it

00:47:55.670 --> 00:47:57.670
exists, and if it does,
make sure that

00:47:57.670 --> 00:47:58.460
there's no error there.

00:47:58.460 --> 00:48:01.040
And if there is an error, we're
going to need to handle

00:48:01.040 --> 00:48:02.070
that somehow.

00:48:02.070 --> 00:48:03.830
Otherwise, we get an access
token back and we

00:48:03.830 --> 00:48:05.100
can make API calls.

00:48:05.100 --> 00:48:06.960
Great.

00:48:06.960 --> 00:48:10.010
But if we have no AuthResult
or an error-- and an error

00:48:10.010 --> 00:48:13.140
would be this immediate
has failed--

00:48:13.140 --> 00:48:15.180
then we need to send them
through the full flow.

00:48:15.180 --> 00:48:18.670
And to do that, I set this
handleAuthClick method to an

00:48:18.670 --> 00:48:23.050
onClick handler for an
authorized button on the page.

00:48:23.050 --> 00:48:28.160
Now, it's important that you
have this function kicked off

00:48:28.160 --> 00:48:31.440
by a user-initiated event such
as a click or keydown,

00:48:31.440 --> 00:48:34.560
because, as you saw earlier,
the flow uses a pop-up, and

00:48:34.560 --> 00:48:36.930
you could trigger pop-up
blockers if you try to do it

00:48:36.930 --> 00:48:40.120
just programmatically.

00:48:40.120 --> 00:48:42.260
So here's that AuthClick
method down here.

00:48:42.260 --> 00:48:44.600
And again, I'm calling
gapi.auth.authorize.

00:48:44.600 --> 00:48:47.450
Pass the client ID in
the same scope.

00:48:47.450 --> 00:48:50.550
But this time, I say I want
the immediate mode false.

00:48:50.550 --> 00:48:51.450
Turn it off.

00:48:51.450 --> 00:48:53.350
And this will send the user
through the pop-up flow that

00:48:53.350 --> 00:48:54.320
we saw earlier.

00:48:54.320 --> 00:48:57.010
Then we're passing the same
handleAuthResult because, when

00:48:57.010 --> 00:49:01.500
we do get a response, an
AuthResult, then we know we're

00:49:01.500 --> 00:49:03.190
good to go and we can
go off and running.

00:49:06.240 --> 00:49:09.180
So one more thing I want to
mention is when you get this

00:49:09.180 --> 00:49:12.490
access token, it expires after
a certain amount of time so

00:49:12.490 --> 00:49:14.730
that you can't use it
indefinitely to make spammy

00:49:14.730 --> 00:49:17.460
applications, for example.

00:49:17.460 --> 00:49:21.220
Well, the response has another
field in it besides access

00:49:21.220 --> 00:49:22.690
token, called expires_in.

00:49:22.690 --> 00:49:26.940
And this is the value in seconds
until this access

00:49:26.940 --> 00:49:28.580
token expires.

00:49:28.580 --> 00:49:30.030
So what I've done in
this example here

00:49:30.030 --> 00:49:31.730
is I take that value--

00:49:31.730 --> 00:49:33.980
it's in seconds again-- and
I subtract 5 minutes--

00:49:33.980 --> 00:49:36.510
5 times 60 seconds--

00:49:36.510 --> 00:49:38.880
and then convert that to
milliseconds So that I can do

00:49:38.880 --> 00:49:41.490
a set timeout to do the same
check off we saw before.

00:49:41.490 --> 00:49:43.820
And this does that background
check to

00:49:43.820 --> 00:49:45.000
get your access token.

00:49:45.000 --> 00:49:49.180
So it can happen without
interrupting the user while

00:49:49.180 --> 00:49:50.610
they're using the application.

00:49:50.610 --> 00:49:53.380
And so by doing it this way,
you ensure that you have a

00:49:53.380 --> 00:49:56.900
fresh access token
all the time.

00:49:56.900 --> 00:49:59.080
I should also note that this
field expires and does not

00:49:59.080 --> 00:50:00.090
auto update.

00:50:00.090 --> 00:50:03.860
So there is a method,
gapi.auth.getToken, that gets

00:50:03.860 --> 00:50:06.740
back this token value with
the expires_in field.

00:50:06.740 --> 00:50:07.900
Well, that field
doesn't update.

00:50:07.900 --> 00:50:10.380
So don't trust it when you
call gapi.auth.getToken.

00:50:10.380 --> 00:50:15.310
Only trust it in this
handleAuthResult callback

00:50:15.310 --> 00:50:16.640
So you make and authorized
call.

00:50:16.640 --> 00:50:18.765
Like I mentioned, this is done
for you automatically by the

00:50:18.765 --> 00:50:21.440
JS client, but if you're
using CORS you

00:50:21.440 --> 00:50:23.420
need to set this yourself.

00:50:23.420 --> 00:50:25.220
And the way you do that is you
set up one header, called

00:50:25.220 --> 00:50:30.390
Authorization, where the value
is the string bearer plus the

00:50:30.390 --> 00:50:31.100
access token.

00:50:31.100 --> 00:50:32.790
And this is an example of an
access token which is, of

00:50:32.790 --> 00:50:34.040
course, long since expired.

00:50:38.030 --> 00:50:38.550
And that's it.

00:50:38.550 --> 00:50:40.430
So I've included some
links here for you.

00:50:40.430 --> 00:50:44.000
The first is the home page for
the JavaScript client.

00:50:44.000 --> 00:50:45.350
The second is the discussion
forum.

00:50:45.350 --> 00:50:47.980
If you want to ask questions,
I'm on the

00:50:47.980 --> 00:50:50.160
discussion fairly regularly.

00:50:50.160 --> 00:50:52.920
And then an announcement blog.

00:50:52.920 --> 00:50:54.640
The name is wrong there, but
this is the link to the

00:50:54.640 --> 00:50:59.210
announcements log where I
announce various new features

00:50:59.210 --> 00:51:00.225
for the JS client.

00:51:00.225 --> 00:51:01.840
And then I also wanted
to call out a couple

00:51:01.840 --> 00:51:03.300
sessions and code labs.

00:51:03.300 --> 00:51:06.480
There is a code lab for this
particular session that I very

00:51:06.480 --> 00:51:07.640
much encourage you to go to.

00:51:07.640 --> 00:51:10.120
It will go through all these
things I've talked about in

00:51:10.120 --> 00:51:12.840
much more detail, and you'll
actually build an application

00:51:12.840 --> 00:51:15.590
using the JS client.

00:51:15.590 --> 00:51:18.330
You can also go to Optimizing
Your Code Using Features of

00:51:18.330 --> 00:51:22.380
Google APIs, which is a session
on making your APIs

00:51:22.380 --> 00:51:24.650
access more performant.

00:51:24.650 --> 00:51:27.720
And finally, a session
on OAuth 2.0 and how

00:51:27.720 --> 00:51:28.970
exactly that works.

00:51:31.410 --> 00:51:32.960
So thank you very much
for coming today.

00:51:32.960 --> 00:51:36.240
I would like to open up the room
for questions if you have

00:51:36.240 --> 00:51:39.470
them, and if so, please use
the microphone so that the

00:51:39.470 --> 00:51:41.200
folks on video can hear.

00:51:50.200 --> 00:51:51.450
Thank you.

