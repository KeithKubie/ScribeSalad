WEBVTT
Kind: captions
Language: en

00:00:08.730 --> 00:00:10.320
PROFESSOR: OK.

00:00:10.320 --> 00:00:11.330
Here we are.

00:00:11.330 --> 00:00:12.800
We've got our data.

00:00:12.800 --> 00:00:15.540
We've managed to plot it.

00:00:15.540 --> 00:00:21.960
Now let's go about
constructing a matrix which

00:00:21.960 --> 00:00:27.670
will enable us to fit a
polynomial to this data.

00:00:27.670 --> 00:00:30.160
First of all, I need a matrix.

00:00:30.160 --> 00:00:32.759
Here is a way to
construct a matrix.

00:00:32.759 --> 00:00:41.760
We put s equal to-- The function
zeros is a function which

00:00:41.760 --> 00:00:45.040
produces a matrix
with all zeros in it,

00:00:45.040 --> 00:00:50.190
and I want this matrix to
have dimensions endpoints

00:00:50.190 --> 00:00:52.330
by endpoints.

00:00:52.330 --> 00:00:56.400
So this command should
produce such a matrix,

00:00:56.400 --> 00:00:59.240
and lo and behold, it does.

00:00:59.240 --> 00:01:07.490
Let me just clean up this
display a little bit.

00:01:07.490 --> 00:01:09.230
At the moment, it's
a little bit annoying

00:01:09.230 --> 00:01:14.340
that I'm plotting out absolutely
everything that I have.

00:01:14.340 --> 00:01:17.162
This won't be too much trouble
when I only have six points,

00:01:17.162 --> 00:01:18.620
but it might be in
a lot of trouble

00:01:18.620 --> 00:01:20.820
if I had a lot more points.

00:01:20.820 --> 00:01:25.860
Here's how to stop our MATLAB
or Octave from printing out

00:01:25.860 --> 00:01:28.190
the results of a command.

00:01:28.190 --> 00:01:31.480
All you do is you
put a semicolon

00:01:31.480 --> 00:01:33.320
at the end of the
line, like that.

00:01:33.320 --> 00:01:35.180
Or, like that.

00:01:35.180 --> 00:01:39.780
If I make that change,
so you hit and run again,

00:01:39.780 --> 00:01:42.080
it no longer prints out x and y.

00:01:42.080 --> 00:01:49.626
It's still doing the plotting,
and it's printing out s

00:01:49.626 --> 00:01:52.630
as being zeros of
endpoints endpoints.

00:01:52.630 --> 00:01:54.370
That's not terribly
interesting either,

00:01:54.370 --> 00:01:57.880
so I'm going to put a code
on at the end of that line

00:01:57.880 --> 00:02:01.570
and prevent s from
being printed out.

00:02:01.570 --> 00:02:03.590
Now, zeros is not what I want.

00:02:03.590 --> 00:02:10.152
What I want is a matrix which
has the appropriate values

00:02:10.152 --> 00:02:14.950
to enable me to fit polynomials.

00:02:14.950 --> 00:02:20.260
And those values I'm going
to generate by using a loop.

00:02:20.260 --> 00:02:24.030
In general, it's not a great
idea within MATLAB or Octave

00:02:24.030 --> 00:02:28.330
to use loops, but it's
perfectly possible to do so.

00:02:28.330 --> 00:02:33.370
Loops are generated
in the following way.

00:02:33.370 --> 00:02:37.150
Supposing I choose i to
be the index of my loop,

00:02:37.150 --> 00:02:41.660
I can let i range
from one to endpoints

00:02:41.660 --> 00:02:48.370
by writing 4i equals
1 Coulomb endpoints.

00:02:48.370 --> 00:02:58.380
The end of that for loop is
indicated by writing end.

00:02:58.380 --> 00:03:02.640
Actually, in Octave, it's
endfor, but in MATLAB it's end,

00:03:02.640 --> 00:03:05.340
and so I'm just going to put
end and that works in Octave

00:03:05.340 --> 00:03:06.770
as well.

00:03:06.770 --> 00:03:09.660
So that would loop
over one index,

00:03:09.660 --> 00:03:13.320
but actually I want two indices.

00:03:13.320 --> 00:03:17.125
So I'm going to put another
loop inside of the first loop

00:03:17.125 --> 00:03:21.320
that I had and I'm going
to make its index j

00:03:21.320 --> 00:03:26.590
and I'm going to let it also
run from one to endpoints.

00:03:26.590 --> 00:03:31.410
And I need to end
that loop, too.

00:03:31.410 --> 00:03:34.860
Let's do my
indentation neatly so I

00:03:34.860 --> 00:03:41.790
can understand this loop when
I come back and read it later,

00:03:41.790 --> 00:03:46.625
and now that's a loop
which will loop over all

00:03:46.625 --> 00:03:51.270
of the indices of the matrix s.

00:03:51.270 --> 00:03:55.530
To refer to a particular
element of the matrix s,

00:03:55.530 --> 00:04:01.760
I write s of i and j,
where i and j are indices.

00:04:01.760 --> 00:04:06.020
So I'm going to set
the ij-th element of s

00:04:06.020 --> 00:04:13.510
equal to an appropriate value
to use for polynomial fitting,

00:04:13.510 --> 00:04:19.820
and that value is x--
actually x I have to refer to

00:04:19.820 --> 00:04:24.390
by its index, so that's xi--
and I'm going to raise it

00:04:24.390 --> 00:04:28.780
to the power j minus 1.

00:04:28.780 --> 00:04:31.280
So if j is 1, which
is the lowest element,

00:04:31.280 --> 00:04:35.180
this would raise it to the 0
power, which would just give me

00:04:35.180 --> 00:04:38.420
the result of being x
to the 0, which is 1,

00:04:38.420 --> 00:04:46.550
and for higher powers, it
would go on appropriately.

00:04:46.550 --> 00:04:50.120
I don't want to print
this out at every time

00:04:50.120 --> 00:04:51.520
that I calculate
it, so I'm going

00:04:51.520 --> 00:04:54.670
to end the line
with a semicolon.

00:04:54.670 --> 00:04:57.690
And then at the end,
perhaps I do want to see s,

00:04:57.690 --> 00:05:02.320
so let me just write s, and that
will cause s to be printed out.

00:05:02.320 --> 00:05:04.480
So here I am.

00:05:04.480 --> 00:05:10.220
I run it again, and now
s consists of this 6

00:05:10.220 --> 00:05:16.680
by 6 matrix whose values,
if I look at the top line,

00:05:16.680 --> 00:05:19.840
you can see that--
Well, first of all,

00:05:19.840 --> 00:05:22.190
let's look at the first column.

00:05:22.190 --> 00:05:26.590
The first column is all
the values of j equals 1,

00:05:26.590 --> 00:05:28.060
and they're all x to the 0.

00:05:30.730 --> 00:05:35.270
And then this next column
is x to the power 1,

00:05:35.270 --> 00:05:40.990
so you can see that it
ranges from a 6 to 1.

00:05:40.990 --> 00:05:45.380
The next column is
x to the power 2,

00:05:45.380 --> 00:05:47.800
and so it runs from a
smaller value up to 1.

00:05:47.800 --> 00:05:53.070
So of course all the values
along the bottom row are 1,

00:05:53.070 --> 00:05:58.580
and the values along the top
row are 1/6 to the power 0,

00:05:58.580 --> 00:06:01.420
1, 2, 3, and so forth.

00:06:01.420 --> 00:06:08.870
So that's my s and that's what
I'm going to use as my matrix.

00:06:08.870 --> 00:06:15.740
Now, I can take the
inverse of s by writing

00:06:15.740 --> 00:06:21.160
some new variable name.

00:06:21.160 --> 00:06:24.140
I'm going to call
it sinv to remind me

00:06:24.140 --> 00:06:26.180
that it's the
inverse of s, and put

00:06:26.180 --> 00:06:29.300
it equal to a function
which is called inv, which

00:06:29.300 --> 00:06:33.620
stands for inverse, called s.

00:06:33.620 --> 00:06:38.285
So this command finds me
the inverse of the matrix s.

00:06:38.285 --> 00:06:42.160
And when I run that,
I find that s inverse

00:06:42.160 --> 00:06:49.055
is given by this matrix
here, whose values will

00:06:49.055 --> 00:06:52.560
be very hard to guess.

00:06:52.560 --> 00:06:57.360
Now, the way to find
the coefficients

00:06:57.360 --> 00:07:04.030
of a polynomial fit
to my original data

00:07:04.030 --> 00:07:08.770
are to put those coefficients
equal to the matrix product

00:07:08.770 --> 00:07:16.060
of the inverse of s, which is
sinv times the y values, which

00:07:16.060 --> 00:07:19.190
we learned about in the lecture.

00:07:19.190 --> 00:07:23.250
So that would give
me the coefficients.

00:07:23.250 --> 00:07:27.420
When I run that, I find
out what the coefficients,

00:07:27.420 --> 00:07:31.550
or the different
powers, of x are.

00:07:31.550 --> 00:07:37.630
So in other words,
these coefficients--

00:07:37.630 --> 00:07:42.590
the first line is the
coefficient of the power x

00:07:42.590 --> 00:07:48.640
to the power 0, the next one
is x to the power 1, and so on.

00:07:48.640 --> 00:07:51.920
So I've actually found the
coefficients of the fit.

00:07:51.920 --> 00:07:58.260
For the moment, it's not obvious
whether I've done it correctly.

00:07:58.260 --> 00:08:03.980
I could certainly
plot out the values

00:08:03.980 --> 00:08:08.060
of this fit at various
places, and that's

00:08:08.060 --> 00:08:09.585
what I'm going to do.

00:08:09.585 --> 00:08:14.070
I'm going to plot it
actually with more points

00:08:14.070 --> 00:08:15.340
than I started with.

00:08:15.340 --> 00:08:23.100
So let me define a
new parameter, np2.

00:08:23.100 --> 00:08:24.825
I might make it equal
to, let's say, 40.

00:08:27.890 --> 00:08:35.559
I could then have a
second variable, x2,

00:08:35.559 --> 00:08:44.930
equal to something
running from 1 to np2

00:08:44.930 --> 00:08:48.540
transposed, divided by np2.

00:08:48.540 --> 00:08:52.710
So that will be an x array
running from a small value

00:08:52.710 --> 00:08:57.420
to 1 with, in this
case, 40 steps.

00:08:57.420 --> 00:09:02.580
I'll set, for now,
y2 equal to x2.

00:09:02.580 --> 00:09:07.720
That's just created
an array that

00:09:07.720 --> 00:09:13.990
is of the same length as x,
and is actually equal to x,

00:09:13.990 --> 00:09:16.710
but I'm actually going
to end up setting y

00:09:16.710 --> 00:09:18.990
to be something
else in a minute.

00:09:22.900 --> 00:09:32.812
And let me, for now, put fj,
a new variable, equal to the c

00:09:32.812 --> 00:09:33.895
that I've just calculated.

00:09:38.542 --> 00:09:40.000
This won't do
anything interesting,

00:09:40.000 --> 00:09:42.470
because I've commented those
out, and so when I run it,

00:09:42.470 --> 00:09:44.402
I just get the same
result that I had before.

00:09:44.402 --> 00:09:46.350
So I haven't actually
done anything.

00:09:46.350 --> 00:09:51.860
Now I'm going to have another
couple of nested for loops.

00:09:51.860 --> 00:10:03.110
I'm going to say for j equals
1,np2, and for i equals 1:np2.

00:10:09.450 --> 00:10:14.400
Let's f set the
value of fj, which

00:10:14.400 --> 00:10:20.040
is a matrix of the vector,
strictly speaking, column

00:10:20.040 --> 00:10:23.870
vector of the same length as c.

00:10:23.870 --> 00:10:33.050
Let's set that the i-th element
of that equal to the x value,

00:10:33.050 --> 00:10:38.460
which is x2, because this is the
second array that I'm creating,

00:10:38.460 --> 00:10:47.340
evaluated at parameter j
to the power j minus 1.

00:10:47.340 --> 00:10:56.868
So that's actually evaluating
x2 to the appropriate power.

00:10:56.868 --> 00:10:58.367
So it shouldn't
have been j minus 1.

00:10:58.367 --> 00:11:00.140
It should have been i minus 1.

00:11:00.140 --> 00:11:03.140
So this is x2 j
to the i minus 1.

00:11:06.824 --> 00:11:08.740
Again, I don't want to
print all of those out,

00:11:08.740 --> 00:11:12.240
so I'm going to put a
semicolon at the end.

00:11:12.240 --> 00:11:22.726
So that's calculated
by fj value,

00:11:22.726 --> 00:11:32.015
and now I'm going to put y2
of j equal to-- Well, what

00:11:32.015 --> 00:11:38.090
I basically want to do is form
the dot product between c,

00:11:38.090 --> 00:11:41.825
the coefficients,
and the value of fj

00:11:41.825 --> 00:11:44.020
that I've just calculated.

00:11:44.020 --> 00:11:52.920
So I want c1 times fj1 plus
c2 times fj2 and so forth.

00:11:52.920 --> 00:11:54.752
One way of doing
that-- there are

00:11:54.752 --> 00:11:56.290
various different
ways of doing it--

00:11:56.290 --> 00:11:58.070
is to take the transpose of c.

00:11:58.070 --> 00:12:01.390
C remember, is a column vector.

00:12:01.390 --> 00:12:02.500
Let's transpose it.

00:12:02.500 --> 00:12:04.770
That's going to give
me a row vector.

00:12:04.770 --> 00:12:07.980
I can then take the
product of that row vector

00:12:07.980 --> 00:12:12.970
with the column vector fj.

00:12:15.890 --> 00:12:20.470
And so taking to the
matrix product of a column

00:12:20.470 --> 00:12:23.640
vector times a row vector
is equivalent to taking

00:12:23.640 --> 00:12:27.870
the dot product of two vectors.

00:12:27.870 --> 00:12:32.380
So that has produced
a value y2 of j,

00:12:32.380 --> 00:12:37.480
which is equal to the sum of the
coefficients times the values

00:12:37.480 --> 00:12:40.820
of x to the appropriate power.

00:12:40.820 --> 00:12:48.100
So that's what I want
to form in that matrix.

00:12:48.100 --> 00:12:50.550
Again, I'm--

00:12:53.085 --> 00:12:54.710
It seems as though
I've made a mistake.

00:13:05.690 --> 00:13:10.410
And I'm not quite
sure what I did wrong,

00:13:10.410 --> 00:13:16.630
but I need to find out.

00:13:16.630 --> 00:13:18.345
So let's have a look.

00:13:21.500 --> 00:13:26.770
It's saying that I made my
mistake at line 29 of column 8.

00:13:26.770 --> 00:13:36.080
29 is this, and it's saying
that I have a 1 by 6,

00:13:36.080 --> 00:13:41.290
and op2 is 40 by 1.

00:13:41.290 --> 00:13:46.870
I don't know why
that is 40 by 1.

00:13:46.870 --> 00:13:55.120
I'm a bit surprised
by it, because-- Ah.

00:13:55.120 --> 00:13:57.080
I see what I did wrong.

00:13:57.080 --> 00:13:59.550
This should have been endpoints.

00:13:59.550 --> 00:14:05.040
So what I did was,
this inner for loop

00:14:05.040 --> 00:14:07.420
shouldn't have been over
all of the j values.

00:14:07.420 --> 00:14:13.330
The j values refer to the
length of the new vectors

00:14:13.330 --> 00:14:14.660
that I produced.

00:14:14.660 --> 00:14:18.330
It should've been over
the shorter version.

00:14:18.330 --> 00:14:19.360
So let's see.

00:14:19.360 --> 00:14:22.270
Let's save that and hope
that's corrected my error.

00:14:22.270 --> 00:14:22.770
Yes.

00:14:22.770 --> 00:14:24.250
Lo and behold, it has.

00:14:24.250 --> 00:14:27.270
I haven't actually done anything
to show what the result is,

00:14:27.270 --> 00:14:33.030
but at least now
I've got the result.

00:14:33.030 --> 00:14:40.330
Now what I want to do is, I want
to plot these two new matrices,

00:14:40.330 --> 00:14:50.810
x2 and y2, and actually
I'd like to overplot them

00:14:50.810 --> 00:14:52.530
on my old plot.

00:14:52.530 --> 00:14:57.935
If I just say plot like this,
save this and plot it again,

00:14:57.935 --> 00:14:59.160
that isn't what happens.

00:14:59.160 --> 00:15:02.490
Instead, what happens is
just the curve that I've just

00:15:02.490 --> 00:15:09.325
calculated is plotted, and my
previous plot is wiped out.

00:15:12.370 --> 00:15:19.210
What I can do to prevent that
happening is to say, hold on.

00:15:19.210 --> 00:15:27.230
Only MATLAB slash Octave
would have something like hold

00:15:27.230 --> 00:15:28.950
on as a command.

00:15:28.950 --> 00:15:32.980
But anyway, hold on basically
says, retain the data

00:15:32.980 --> 00:15:36.620
that you've already got in this
plot and add some more data on.

00:15:36.620 --> 00:15:39.680
So let's try this.

00:15:39.680 --> 00:15:43.600
So now what we see is the
data that I've plotted out

00:15:43.600 --> 00:15:48.670
in my first plot, which
was up here, is held

00:15:48.670 --> 00:15:51.790
and the second plot is plotted.

00:15:51.790 --> 00:15:56.910
Notice that this fit does
indeed go through the six points

00:15:56.910 --> 00:16:07.080
that I originally
retained, and yet,

00:16:07.080 --> 00:16:09.070
that line actually
does some funny things.

00:16:09.070 --> 00:16:13.780
Particularly at the end
here, it goes negative.

00:16:13.780 --> 00:16:17.670
There's another trick that
one can do in plotting,

00:16:17.670 --> 00:16:23.988
and one can say things
like axis manual,

00:16:23.988 --> 00:16:29.120
and I think that, if I'm
lucky, that will fix this plot.

00:16:29.120 --> 00:16:30.800
No, it won't.

00:16:30.800 --> 00:16:32.880
Never mind.

00:16:32.880 --> 00:16:36.780
Anyway, there's a way--
and I'll show it later--

00:16:36.780 --> 00:16:41.530
to prevent the plot rescaling
and the required command

00:16:41.530 --> 00:16:42.760
is axis manual.

00:16:42.760 --> 00:16:49.010
But at the moment, I
think, before I do it,

00:16:49.010 --> 00:16:52.960
I've got to say hold off.

00:16:52.960 --> 00:16:57.740
And then if I re-run it, I
will find that lo and behold,

00:16:57.740 --> 00:17:01.940
I've got a plot of the
six points and the line

00:17:01.940 --> 00:17:03.940
that I fitted, which
is a polynomial fitted

00:17:03.940 --> 00:17:05.839
to those lines.

00:17:05.839 --> 00:17:09.760
And lo and behold, it fits.

