WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:01.140
Vsauce!

00:00:01.140 --> 00:00:07.569
Kevin here, and I’ve built a computer capable
of explaining how you get smarter.

00:00:07.569 --> 00:00:13.200
Out of these matchboxes, some colorful beads
and...

00:00:13.200 --> 00:00:15.740
Shrek.

00:00:15.740 --> 00:00:19.380
Real quick, before we get into the game we’re
about to play, I wanna tell you about the

00:00:19.380 --> 00:00:21.130
game that I’ve been playing.

00:00:21.130 --> 00:00:25.880
I partnered with Raid: Shadow Legends on this
video and if you follow me on Instagram you

00:00:25.880 --> 00:00:28.589
know that I’m a huge fan of RPGs.

00:00:28.589 --> 00:00:33.650
Well, Raid is the most immersive champion-collecting
experience you’ll get on a smartphone.

00:00:33.650 --> 00:00:39.109
It has a deep story, detailed graphics, giant
boss fights, and hundreds of champions to

00:00:39.109 --> 00:00:40.960
collect and customize.

00:00:40.960 --> 00:00:42.309
And you can play it free.

00:00:42.309 --> 00:00:48.550
So to check it out, download Raid using only
my link in the description to get 50,000 silver

00:00:48.550 --> 00:00:52.929
immediately and a free epic champion courtesy
of the dev team.

00:00:52.929 --> 00:00:57.199
Thanks again to them for supporting Vsauce2,
go check out their game, it's amazing how

00:00:57.199 --> 00:01:03.609
far mobile gaming has come, Now let’s
get back to the inner workings of our game.

00:01:03.609 --> 00:01:04.609
Okay.

00:01:04.609 --> 00:01:10.759
24 matchboxes, all filled with beads, and
covered in potential moves for the game we’re

00:01:10.759 --> 00:01:15.110
about to play and… this is our computer.

00:01:15.110 --> 00:01:18.710
Now, Shrek comes along and...wait.

00:01:18.710 --> 00:01:20.910
How is THIS a computer?

00:01:20.910 --> 00:01:27.100
Aren’t computers, just like, electronic
machines that run software?

00:01:27.100 --> 00:01:28.930
What IS a computer?

00:01:28.930 --> 00:01:32.579
Well, the earliest computer was YOU.

00:01:32.579 --> 00:01:35.220
Or… your ancestors.

00:01:35.220 --> 00:01:43.340
They used calculating machines like the abacus
to input information which output a result

00:01:43.340 --> 00:01:46.460
but we were the ones computing.

00:01:46.460 --> 00:01:53.470
The human operators of early calculating machines
were literally called “computers.”

00:01:53.470 --> 00:01:57.170
Okay, back to our matchboxes.

00:01:57.170 --> 00:02:03.190
Once we introduce a game board, Shrek and
the gang, this matchbox and bead setup processes

00:02:03.190 --> 00:02:09.759
our input, gives us an output and not only
that… it also learns.

00:02:09.759 --> 00:02:17.120
This is not just a computer, this is an artificial
intelligence machine capable of matching wits

00:02:17.120 --> 00:02:21.069
with the brightest minds humanity has to offer.

00:02:21.069 --> 00:02:22.610
At a game called Hexapawn.

00:02:22.610 --> 00:02:24.290
Here’s how.

00:02:24.290 --> 00:02:31.300
Hexapawn is based on chess -- each player
has 3 pawns on a board with just 9 squares.

00:02:31.300 --> 00:02:33.770
The pieces move like chess pawns, too.

00:02:33.770 --> 00:02:39.840
They can go forward one space if that space
is unoccupied, if it is occupied by the opponent

00:02:39.840 --> 00:02:41.970
then they can’t go forward.

00:02:41.970 --> 00:02:43.610
Sorry, Donkey.

00:02:43.610 --> 00:02:48.540
You can, however, move diagonally, but only
to take an opponent’s piece.

00:02:48.540 --> 00:02:50.780
There are three ways to win:

00:02:50.780 --> 00:02:53.530
Get a pawn to the other side of the board.

00:02:53.530 --> 00:02:55.900
Take all of your opponent’s pieces.

00:02:55.900 --> 00:03:01.140
Or leave your opponent without a possible
move, like a checkmate in chess.

00:03:01.140 --> 00:03:07.680
Our setup works like this: I’ve got 24 matchboxes
here, and each one corresponds to the position

00:03:07.680 --> 00:03:10.650
of pieces on the board during that round.

00:03:10.650 --> 00:03:15.909
I’ve got my Team Kevin pawns vs. the computer’s
Team Shrek.

00:03:15.909 --> 00:03:19.020
And do you know what that means?

00:03:19.020 --> 00:03:24.010
That means that we’ve officially turned
Hexapawn into: Shreksapawn.

00:03:24.010 --> 00:03:25.150
Alright.

00:03:25.150 --> 00:03:27.420
Let’s play.

00:03:27.420 --> 00:03:31.900
The human, that's me, always goes first.

00:03:31.900 --> 00:03:33.159
Wait.

00:03:33.159 --> 00:03:34.430
Why?

00:03:34.430 --> 00:03:37.930
Because recreational mathematician Martin
Gardner said so.

00:03:37.930 --> 00:03:45.269
He actually created Hexapawn and its rules
as a simplified version of a 304-matchbox

00:03:45.269 --> 00:03:47.330
computer called MENACE.

00:03:47.330 --> 00:03:52.970
15 years after helping the British break the
Nazis' codes in World War II, Donald Michie

00:03:52.970 --> 00:03:56.879
invented MENACE to learn how to master Tic-Tac-Toe.

00:03:56.879 --> 00:04:03.230
And now 59 years later, I’m on YouTube playing
Shreksapawn.

00:04:03.230 --> 00:04:08.090
Since I go first, my moves occur in only the
odd-numbered rounds.

00:04:08.090 --> 00:04:10.270
1, 3, 5 and 7.

00:04:10.270 --> 00:04:19.680
Therefore, the matchboxes are grouped by possible
Team Shrek moves in rounds 2, 4, and 6.

00:04:19.680 --> 00:04:22.310
One of us is guaranteed to win before Round
8.

00:04:22.310 --> 00:04:25.780
So, Team Shrek has no Round 8 moves.

00:04:25.780 --> 00:04:31.070
Each box contains one colored bead for each
potential move on that board position.

00:04:31.070 --> 00:04:35.680
So like this first box has a green, a blue,
and a purple.

00:04:35.680 --> 00:04:40.020
And I've cut a hole at the bottom of the box
that will only allow one bead at a time to

00:04:40.020 --> 00:04:41.170
fall out.

00:04:41.170 --> 00:04:45.140
So I’ll just shake the box and let one bead
out.

00:04:45.140 --> 00:04:46.210
And it's purple.

00:04:46.210 --> 00:04:51.010
That means if my pawn was here and it was
Team Shrek's move, Team Shrek would make the

00:04:51.010 --> 00:04:52.380
purple arrow move.

00:04:52.380 --> 00:04:53.580
Like this.

00:04:53.580 --> 00:04:57.990
If a blue bead had fallen out, then Team Shrek
would've made the blue arrow move.

00:04:57.990 --> 00:05:02.900
And if it was a Green Bead then Team Shrek
would've made the green arrow move.

00:05:02.900 --> 00:05:04.480
And taken my pawn.

00:05:04.480 --> 00:05:06.490
Okay so that's how Team Shrek will move.

00:05:06.490 --> 00:05:11.750
Team Kevin will move however I want Team Kevin
to move because I'm Kevin and then we’ll

00:05:11.750 --> 00:05:14.300
play back and forth until there’s a winner.

00:05:14.300 --> 00:05:19.190
Alright, Round : Fight!: I decide to move
Lord Farquaad forward.

00:05:19.190 --> 00:05:21.180
For Round 2 I now use.

00:05:21.180 --> 00:05:24.060
this box to determine Team Shrek's move.

00:05:24.060 --> 00:05:26.690
So we'll give it a shake.

00:05:26.690 --> 00:05:28.050
Woah!

00:05:28.050 --> 00:05:31.680
Let's try that again.

00:05:31.680 --> 00:05:33.180
And it's the green move.

00:05:33.180 --> 00:05:36.380
So Donkey moves forward.

00:05:36.380 --> 00:05:40.850
Now it's my turn and I decide that, look,
I can just take Princess Fiona when I move

00:05:40.850 --> 00:05:43.990
diagonally and win the game.

00:05:43.990 --> 00:05:44.990
That's it.

00:05:44.990 --> 00:05:47.150
Now here’s the important part.

00:05:47.150 --> 00:05:53.760
When Team Shrek makes a losing move, I remove
that bead from the box.

00:05:53.760 --> 00:06:00.070
That way the computer can’t make the same
bad move the next time that this situation

00:06:00.070 --> 00:06:01.200
comes up.

00:06:01.200 --> 00:06:05.940
By removing its losing beads, the computer
learns to play better.

00:06:05.940 --> 00:06:10.500
When Team Shrek does win, then instead of
removing the bead I'll just put the bead back

00:06:10.500 --> 00:06:11.500
in the box.

00:06:11.500 --> 00:06:15.001
Okay, I’m gonna play a bunch of rounds now
and I’ll keep track of wins over here, with

00:06:15.001 --> 00:06:30.190
a K when I win and I'll write an S for a Shrek
win.

00:06:30.190 --> 00:07:06.120
Here we go.

00:07:06.120 --> 00:07:31.530
Okay, I’ve played 14 games.

00:07:31.530 --> 00:07:36.330
I started off winning a lot more than I was
losing… and then things changed.

00:07:36.330 --> 00:07:41.630
Out of the last 7 games, Team Shrek has won
6 of them.

00:07:41.630 --> 00:07:48.110
The computer is clearly getting better at
the game… but is it really learning?

00:07:48.110 --> 00:07:53.940
I mean, I’m just taking beads out of matchboxes
how is that learning?

00:07:53.940 --> 00:07:55.950
What is learning?

00:07:55.950 --> 00:08:02.740
At the most basic level, learning is acquiring
new knowledge or a new skill, or modifying

00:08:02.740 --> 00:08:05.270
an existing behavior.

00:08:05.270 --> 00:08:12.031
Every time I take a bead out of a matchbox,
the computer loses a behavior that leads it

00:08:12.031 --> 00:08:14.180
to an outcome of failure.

00:08:14.180 --> 00:08:20.120
That increases the probability that the computer’s
move each round leads it to success -- which

00:08:20.120 --> 00:08:23.110
in our case, is winning Shreksapawn.

00:08:23.110 --> 00:08:28.960
After a sufficient number of games, the computer
will evolve to play perfectly.

00:08:28.960 --> 00:08:35.260
My Team Shrek computer may not be thinking
on its own, but it is learning.

00:08:35.260 --> 00:08:38.720
And it can also learn in a different way.

00:08:38.720 --> 00:08:43.090
Removing beads is basically a form of learning
by punishment.

00:08:43.090 --> 00:08:48.690
When Team Shrek makes a bad move, I’m punishing
the computer for being wrong.

00:08:48.690 --> 00:08:54.510
I don’t have to worry about the computer
feeling bad about losing, these matchboxes

00:08:54.510 --> 00:08:59.070
aren’t gonna get frustrated and quit playing
and run away crying and slam the door in my

00:08:59.070 --> 00:09:02.770
face and tell me I’m not their real dad.

00:09:02.770 --> 00:09:10.500
But what happens if instead of punishing my
computer, I reward it?

00:09:10.500 --> 00:09:15.420
Instead of just putting the good play bead
back in the box when the computer wins, I

00:09:15.420 --> 00:09:21.340
could add another bead of the same color that
made the winning move.

00:09:21.340 --> 00:09:26.930
That would reduce the probability of a losing
bead appearing by increasing the probability

00:09:26.930 --> 00:09:30.510
of a matchbox generating a winning bead.

00:09:30.510 --> 00:09:36.760
The computer would still eventually reach
perfect play because I'll still remove the

00:09:36.760 --> 00:09:41.450
losing beads, but it will take longer because
it's winning more often.

00:09:41.450 --> 00:09:46.760
If it could feel, it would probably feel better
about winning more often along its longer

00:09:46.760 --> 00:09:49.090
journey toward perfection.

00:09:49.090 --> 00:09:54.550
So the fastest way to perfect play is by punishing
the computer’s mistakes.

00:09:54.550 --> 00:10:02.900
But the way to win as many games as possible
along the way is to reward its victories.

00:10:02.900 --> 00:10:08.280
To improve at hexapawn, our matchbox computer
actually uses a type of genetic algorithm.

00:10:08.280 --> 00:10:14.130
It’s a way to solve problems and learn based
on natural selection.

00:10:14.130 --> 00:10:19.650
Based on the process that drives biological
evolution.

00:10:19.650 --> 00:10:25.290
The beads of learning in your life may be
refined by punishment.

00:10:25.290 --> 00:10:28.580
Put your hand on a hot stove once, and learn
that, “Ow!

00:10:28.580 --> 00:10:30.200
That’s painful.”

00:10:30.200 --> 00:10:35.900
So you remove the touch-hot-stove-bead from
your brain.

00:10:35.900 --> 00:10:38.540
They may also be augmented by rewards.

00:10:38.540 --> 00:10:43.690
“My parents bought me ice cream for getting
an A on my exam.”

00:10:43.690 --> 00:10:49.760
Add another get-good-grades-bead to your matchbox
head computer.

00:10:49.760 --> 00:10:56.350
Hexapawn is an obscure, academic game from
over 50 years ago, and you can make a matchbox

00:10:56.350 --> 00:10:59.870
computer that learns to win every time.

00:10:59.870 --> 00:11:08.910
But by allowing this matchbox computer full
of colored beads to learn, the player who’s

00:11:08.910 --> 00:11:14.510
learning a bit more about learning is… you.

00:11:14.510 --> 00:11:24.600
And as always, thanks for watching.

00:11:24.600 --> 00:11:29.370
If you wanna make your own matchbox, oh I
lost a bead, matchbox computer, download my

00:11:29.370 --> 00:11:33.460
template for free over at Twitter.com/VsauceTwo.

00:11:33.460 --> 00:11:36.220
That's at Vsauce T, W, O.

00:11:36.220 --> 00:11:42.350
If you wanna watch more Vsauce2 videos, just
uh click over here, and if you aren't subscribed

00:11:42.350 --> 00:11:57.220
to Vsauce2 then maybe you should uh, put a,
"subscribe to Vsauce2" bead in your brain.

00:11:57.220 --> 00:11:58.550
Wow.

00:11:58.550 --> 00:12:00.910
That was weirdly creepy.

