WEBVTT
Kind: captions
Language: en

00:00:04.400 --> 00:00:07.901
Inbar: Okay, thank you
for attending this session.

00:00:07.901 --> 00:00:11.334
So how do you like
your new Galaxy Tabs?

00:00:13.868 --> 00:00:16.200
So hopefully,
the next thing you want to do,

00:00:16.200 --> 00:00:18.200
now that you've
got your device,

00:00:18.200 --> 00:00:20.534
is to write Android applications
with that device

00:00:20.534 --> 00:00:22.701
that work
with Google APIs.

00:00:22.701 --> 00:00:25.367
My goal here is to,
after watching this session,

00:00:25.367 --> 00:00:27.534
you should be able
to get started

00:00:27.534 --> 00:00:30.000
and be able to build
real applications.

00:00:30.000 --> 00:00:32.501
So let me introduce myself.
My name is Yaniv Inbar.

00:00:32.501 --> 00:00:34.834
I've worked at Google
for about four and a half years,

00:00:34.834 --> 00:00:36.834
and during that time,

00:00:36.834 --> 00:00:39.334
I've worked on the Google
API Infrastructure Team.

00:00:39.334 --> 00:00:42.601
I am the tech lead of the team
that develops client libraries

00:00:42.601 --> 00:00:45.968
for Google APIs,
and also the lead developer

00:00:45.968 --> 00:00:47.968
of the Java library.

00:00:47.968 --> 00:00:49.801
And one of the key goals
of the Java library

00:00:49.801 --> 00:00:51.834
is to make a great experience

00:00:51.834 --> 00:00:53.968
for working with
Android applications.

00:00:53.968 --> 00:00:56.434
And I'm
really excited here today,

00:00:56.434 --> 00:00:58.934
because just about a year ago,
I announced a prototype

00:00:58.934 --> 00:01:00.767
of this library.

00:01:00.767 --> 00:01:03.167
I gave a quick demo,
working on a G1,

00:01:03.167 --> 00:01:05.701
and I talked about
how great this is going to be.

00:01:05.701 --> 00:01:09.000
And today,
the big announcement

00:01:09.000 --> 00:01:11.000
is beta.

00:01:11.000 --> 00:01:14.133
So the Google APIs
client library for Java

00:01:14.133 --> 00:01:16.133
is now in beta,

00:01:16.133 --> 00:01:18.634
and we're eager to have you
try it and give us feedback

00:01:18.634 --> 00:01:20.634
on how it's working for you.

00:01:20.634 --> 00:01:22.968
We've written applications
based on this library,

00:01:22.968 --> 00:01:25.300
so we feel
pretty confident about it.

00:01:25.300 --> 00:01:27.300
So this is our beta period,

00:01:27.300 --> 00:01:29.634
and we hope that
if all is successful,

00:01:29.634 --> 00:01:31.968
we'll be able
to go out of beta soon.

00:01:31.968 --> 00:01:34.767
So this, um, so all the best
practices that we've learned

00:01:34.767 --> 00:01:37.100
about accessing Google APIs,

00:01:37.100 --> 00:01:39.267
um, we've pretty much codified
in this library.

00:01:39.267 --> 00:01:41.434
And I'm not gonna
go through every detail

00:01:41.434 --> 00:01:43.601
of what's found
in the library.

00:01:43.601 --> 00:01:45.767
It covers a wide range
of use cases,

00:01:45.767 --> 00:01:48.267
but I'll cover the highlights,
which are most important to you,

00:01:48.267 --> 00:01:50.267
as Android developers.

00:01:50.267 --> 00:01:52.767
Before I jump into the library,
I just want a quick idea

00:01:52.767 --> 00:01:55.601
of, um, the kind
of experiences you've had.

00:01:55.601 --> 00:01:58.567
How many of you have developed
an Android application?

00:01:58.567 --> 00:02:00.734
And how many of you,
of those of you,

00:02:00.734 --> 00:02:02.968
have developed
an Android application

00:02:02.968 --> 00:02:05.300
that works
with Google APIs?

00:02:05.300 --> 00:02:09.234
Okay, and how many of you
thought the process was easy?

00:02:09.234 --> 00:02:12.734
Okay, no hands are going up.
I didn't think so, either.

00:02:12.734 --> 00:02:15.567
And this was a big challenge,
um, so we wanted something

00:02:15.567 --> 00:02:17.834
that was really powerful,
really efficient,

00:02:17.834 --> 00:02:19.901
but also,
reasonably easy to use,

00:02:19.901 --> 00:02:23.601
so you can get started quickly
and in powerful applications.

00:02:23.601 --> 00:02:27.534
So let's first talk about
what other platforms

00:02:27.534 --> 00:02:29.701
that we're targeting
with this library.

00:02:29.701 --> 00:02:32.901
Um, Android, of course,
our premier platform

00:02:32.901 --> 00:02:35.067
that we're focusing on today,

00:02:35.067 --> 00:02:37.701
but this library also
really works the same way

00:02:37.701 --> 00:02:39.701
on Google App Engine,

00:02:39.701 --> 00:02:42.033
if you're writing
in a Servlet environment,

00:02:42.033 --> 00:02:44.367
or an install application
using Java 5.

00:02:44.367 --> 00:02:46.534
All those platforms
are supported,

00:02:46.534 --> 00:02:49.200
and that's
important to understand

00:02:49.200 --> 00:02:51.367
when you're
using this library,

00:02:51.367 --> 00:02:53.701
because that theme
will come often

00:02:53.701 --> 00:02:57.067
as you're experiencing
the library.

00:02:57.067 --> 00:03:01.067
What are the APIs that
are supported by this library?

00:03:01.067 --> 00:03:03.400
Well, of course, Google APIs.

00:03:03.400 --> 00:03:05.901
There are actually two different
categories of Google APIs.

00:03:05.901 --> 00:03:08.067
I'll go more
into detail about that.

00:03:08.067 --> 00:03:10.234
Some are built
on our older technology--

00:03:10.234 --> 00:03:13.334
the Google Data API
technology stack.

00:03:13.334 --> 00:03:15.667
Um, YouTube, Blogger,
those kinds of APIs,

00:03:15.667 --> 00:03:17.667
and some of them are built
on the new infrastructure,

00:03:17.667 --> 00:03:19.667
and I'll tell you
about the advantages

00:03:19.667 --> 00:03:21.701
of the new infrastructure
and what this means

00:03:21.701 --> 00:03:23.367
to you as developers.

00:03:23.367 --> 00:03:25.367
But really this library
is designed

00:03:25.367 --> 00:03:27.200
for pretty much any API
on the Web.

00:03:27.200 --> 00:03:30.033
Why would you care about that
as an Android developer?

00:03:30.033 --> 00:03:32.534
Well, why would you want
to use a different library

00:03:32.534 --> 00:03:35.868
with one vendor and a different
library for another vendor?

00:03:35.868 --> 00:03:38.968
Ideally, you'd like a library
that would pretty much work

00:03:38.968 --> 00:03:42.267
with any API and be--
have a consistent experience,

00:03:42.267 --> 00:03:44.767
so if you're developing
an Android application,

00:03:44.767 --> 00:03:47.667
you'd want to use
the same library.

00:03:47.667 --> 00:03:50.734
And what are the data formats
supported by this library?

00:03:50.734 --> 00:03:53.067
Well, JSON is
our premier data format.

00:03:53.067 --> 00:03:55.434
It's, by far,
the most common on the Web.

00:03:55.434 --> 00:03:57.767
It works really great
with JavaScript,

00:03:57.767 --> 00:04:00.167
but really to support
across many languages.

00:04:00.167 --> 00:04:02.567
It's a lighter weight format
than XML.

00:04:02.567 --> 00:04:05.234
XML is a more traditional format
than we've used for any--

00:04:05.234 --> 00:04:07.234
for REST APIs.

00:04:07.234 --> 00:04:09.567
The Atom Publishing Protocol,
in particular,

00:04:09.567 --> 00:04:12.000
is based on XML,
so it has a long history.

00:04:12.000 --> 00:04:14.133
And this is also supported
by this library.

00:04:14.133 --> 00:04:16.300
We have support
for any kind of media

00:04:16.300 --> 00:04:18.634
that you might want
to use--pictures, videos.

00:04:18.634 --> 00:04:20.801
I take a photo
on my Android device.

00:04:20.801 --> 00:04:22.801
I want to upload it to Picasa.

00:04:22.801 --> 00:04:24.968
That should work
with this library.

00:04:24.968 --> 00:04:27.801
We really allow you to plug in
any data format that you want,

00:04:27.801 --> 00:04:31.400
but also the ones that we've
built a good experience around

00:04:31.400 --> 00:04:33.400
with the library.

00:04:33.400 --> 00:04:35.901
While authentication mechanism
is supported by the library,

00:04:35.901 --> 00:04:38.067
Um, ClientLogin
is the traditional

00:04:38.067 --> 00:04:40.400
username/password
authentication mechanism.

00:04:40.400 --> 00:04:43.200
Um, it's managed by
the Android operating system.

00:04:43.200 --> 00:04:45.367
You use it
with Google data APIs.

00:04:45.367 --> 00:04:48.767
But we really support
and recommend OAuth

00:04:48.767 --> 00:04:50.934
as an open
authentication protocol

00:04:50.934 --> 00:04:54.434
that works across
many different web sites,

00:04:54.434 --> 00:04:56.601
and I'll talk more about that.

00:04:56.601 --> 00:04:58.934
And this may be the most tricky
part of this presentation,

00:04:58.934 --> 00:05:01.167
and maybe the part
I'm most excited about

00:05:01.167 --> 00:05:03.334
to talk to you about today.

00:05:03.334 --> 00:05:05.334
So let's break this down.

00:05:05.334 --> 00:05:07.934
Let's start with the platforms
supported by this library.

00:05:07.934 --> 00:05:10.534
If you don't mind, I'll extend
beyond Android for a moment.

00:05:10.534 --> 00:05:14.267
So a key design goal
of this library--

00:05:14.267 --> 00:05:17.834
we want to make sure that it
will work across any platform

00:05:17.834 --> 00:05:19.834
based on Java 5.

00:05:19.834 --> 00:05:22.000
So we want to be
platform neutral.

00:05:22.000 --> 00:05:24.501
That means we can't take
advantage of maybe some hooks

00:05:24.501 --> 00:05:26.501
that are in the Android SDK.

00:05:26.501 --> 00:05:29.000
But the advantage of this
is that now we can be sure

00:05:29.000 --> 00:05:31.501
that we can work
pretty much the same way.

00:05:31.501 --> 00:05:34.334
If you see a library that
was developed for OAuth 2,

00:05:34.334 --> 00:05:37.167
you don't have to worry about--
based on this library,

00:05:37.167 --> 00:05:40.000
you don't have to worry about,
well, is it gonna work

00:05:40.000 --> 00:05:42.834
on AppAge, and is it gonna work
in some other environment?

00:05:42.834 --> 00:05:45.167
The library works the same
in all places.

00:05:45.167 --> 00:05:47.667
And the only way we were able
to make this happen

00:05:47.667 --> 00:05:49.667
is by making
everything pluggable.

00:05:49.667 --> 00:05:51.701
I can pick
a different HTTP stack.

00:05:51.701 --> 00:05:53.834
I could pick
a different JSON library,

00:05:53.834 --> 00:05:55.834
a different XML library.

00:05:55.834 --> 00:05:58.634
Authentication--I should be
able to use any one I want.

00:05:58.634 --> 00:06:00.968
So that's
a key design principle here.

00:06:00.968 --> 00:06:03.534
So let's take a look
at some code, and I'll warn you,

00:06:03.534 --> 00:06:06.033
you're gonna see a lot of code
in this presentation.

00:06:06.033 --> 00:06:08.033
This is a 201 level session.

00:06:08.033 --> 00:06:10.534
I won't be able to go
into all the basic details,

00:06:10.534 --> 00:06:13.534
but I really want
to make sure that you see--

00:06:13.534 --> 00:06:15.868
you'll be able
to just write some code

00:06:15.868 --> 00:06:18.200
directly after watching
this presentation.

00:06:18.200 --> 00:06:20.367
So here's what it looks like

00:06:20.367 --> 00:06:22.567
on the normal
Java command line application.

00:06:22.567 --> 00:06:25.133
It has the main method,
and there's this Buzz object.

00:06:25.133 --> 00:06:27.300
This is part
of our generated libraries.

00:06:27.300 --> 00:06:29.834
I'll talk more about that,
but I'll point out

00:06:29.834 --> 00:06:32.167
one point of confusion
here in this presentation.

00:06:32.167 --> 00:06:34.167
If you're an Android developer,

00:06:34.167 --> 00:06:36.167
you're very familiar
with activities.

00:06:36.167 --> 00:06:38.167
Those are
your main UI components.

00:06:38.167 --> 00:06:40.167
Unfortunately, Buzz
also has activities,

00:06:40.167 --> 00:06:42.701
so I'll try to make it clear,
based on the context here,

00:06:42.701 --> 00:06:45.200
of what I'm talking about,
but basically, Google Buzz--

00:06:45.200 --> 00:06:47.868
I hope most of you
are familiar with that.

00:06:47.868 --> 00:06:50.200
It allows you
to post your activities.

00:06:50.200 --> 00:06:52.100
You can download to
other people's activity stream.

00:06:52.100 --> 00:06:54.601
You can make them public.
You can have them shared.

00:06:54.601 --> 00:06:57.534
I have an example of someone's
public activity stream.

00:06:57.534 --> 00:06:59.534
It's a demo account.

00:06:59.534 --> 00:07:01.767
So you call
buzz.activities.list.

00:07:01.767 --> 00:07:03.767
It returns an activity feed.

00:07:03.767 --> 00:07:05.934
You have to check
for null there,

00:07:05.934 --> 00:07:08.501
because there may not be
any public activities

00:07:08.501 --> 00:07:10.501
for optimization.

00:07:10.501 --> 00:07:12.834
But in any case,
we just iterate over it.

00:07:12.834 --> 00:07:15.334
This is just basic Java
programming and print to dot.

00:07:15.334 --> 00:07:19.234
So hopefully, really into it,
hopefully, pretty readable.

00:07:19.234 --> 00:07:22.100
So let's look at what this
looks like on another platform,

00:07:22.100 --> 00:07:23.934
on AppAge.

00:07:23.934 --> 00:07:26.100
So I'm extending it
to be Servlet,

00:07:26.100 --> 00:07:28.267
and there are
a couple minor differences,

00:07:28.267 --> 00:07:30.434
but mostly,
this is the same, right?

00:07:30.434 --> 00:07:33.934
So we've got the Buzz object
that manages your--

00:07:33.934 --> 00:07:36.968
anytime you're working
with this library.

00:07:36.968 --> 00:07:39.300
And again, the code below
is pretty much the same.

00:07:39.300 --> 00:07:41.300
So I want to highlight

00:07:41.300 --> 00:07:43.634
one really important
difference here, though--

00:07:43.634 --> 00:07:46.501
The primary site
passes to the Buzz object.

00:07:46.501 --> 00:07:49.200
You'll notice I'm using
a UrlFetch transport.

00:07:49.200 --> 00:07:52.067
That's the ideal one to use
when working with Google AppAge,

00:07:52.067 --> 00:07:54.234
and it's
only applicable to AppAge.

00:07:54.234 --> 00:07:56.400
And I'm using Jackson Factory.

00:07:56.400 --> 00:08:00.334
That's based on the popular
Jackson JSON library.

00:08:00.334 --> 00:08:03.334
And if you don't mind, I'll skip
back to the previous slide

00:08:03.334 --> 00:08:05.334
for a second.

00:08:05.334 --> 00:08:07.801
Here, I use
Net HP Transport.

00:08:07.801 --> 00:08:10.300
That's based on
Java.net HP URL connection.

00:08:10.300 --> 00:08:12.467
So that's the one
that's applicable,

00:08:12.467 --> 00:08:14.801
but that's pretty much the only
thing that's changed here.

00:08:14.801 --> 00:08:17.200
I'm also using Jackson Factory
in this case.

00:08:17.200 --> 00:08:20.868
So if you don't mind,
I'll jump now from App Engine

00:08:20.868 --> 00:08:24.567
to our premier platform,
Android.

00:08:24.567 --> 00:08:27.100
If you've done
any Android programming,

00:08:27.100 --> 00:08:29.434
this is pretty basic
Android activity--

00:08:29.434 --> 00:08:31.434
list activity class.

00:08:31.434 --> 00:08:34.033
It just gives you a list box
of all the activities

00:08:34.033 --> 00:08:36.567
from this person's
public stream.

00:08:36.567 --> 00:08:39.234
Nothing new from the perspective
of Android programming.

00:08:39.234 --> 00:08:41.234
I am doing some bad things.

00:08:41.234 --> 00:08:43.734
Maybe you can notice it
on this slide,

00:08:43.734 --> 00:08:46.234
and I'll talk about what's wrong
with this picture.

00:08:46.234 --> 00:08:48.400
It works,
but there's some things

00:08:48.400 --> 00:08:51.133
that are not quite
the best designed.

00:08:51.133 --> 00:08:55.033
So I'm downloading a list
of Buzz activities,

00:08:55.033 --> 00:08:58.934
and then I'm converting
each activity content into HTML.

00:08:58.934 --> 00:09:02.200
And that actually displays
this nice HTML content.

00:09:02.200 --> 00:09:05.033
So pretty simple Android
programming and mostly the same

00:09:05.033 --> 00:09:07.033
in terms of look.

00:09:07.033 --> 00:09:09.033
I am using the HP URL
connection,

00:09:09.033 --> 00:09:11.634
and I'm using
Android JSON Factory.

00:09:11.634 --> 00:09:13.767
This is maybe not
well-announced,

00:09:13.767 --> 00:09:15.934
but if you look
in the Android SDK,

00:09:15.934 --> 00:09:18.434
there's now a JSON library
that's actually streaming.

00:09:18.434 --> 00:09:20.934
That's really good, so that's
the one I'm using here.

00:09:20.934 --> 00:09:23.367
And I'll talk a little more
about that later.

00:09:26.000 --> 00:09:28.501
So let's talk about
the pluggable HTTP stack.

00:09:28.501 --> 00:09:30.667
I showed you some examples.

00:09:30.667 --> 00:09:32.834
The biggest difference
between them

00:09:32.834 --> 00:09:35.501
was which HTTP transport
I used.

00:09:35.501 --> 00:09:39.067
UrlFetch Transport, that's the
ideal one to use in App Engine.

00:09:39.067 --> 00:09:41.234
If you're programming
for Android,

00:09:41.234 --> 00:09:43.234
you have
two important options.

00:09:43.234 --> 00:09:45.667
One is based on
HP URL connection, which is--

00:09:45.667 --> 00:09:48.167
if you're familiar with
any kind of Java programming,

00:09:48.167 --> 00:09:50.567
that's part of Java.
It's part of the Android SDK.

00:09:50.567 --> 00:09:53.767
Also, the second option you have
is the Apache transport.

00:09:53.767 --> 00:09:56.300
That's based on
the popular Apache HP client.

00:09:56.300 --> 00:09:58.467
And that's not part of the Java,

00:09:58.467 --> 00:10:00.634
but it is part
of the Android SDK.

00:10:00.634 --> 00:10:02.634
At least for now it is.

00:10:02.634 --> 00:10:05.133
So the question is, well,
which one should you pick?

00:10:05.133 --> 00:10:07.133
The answer
is a little tricky.

00:10:07.133 --> 00:10:09.467
I talked to an expert
on the Android team,

00:10:09.467 --> 00:10:11.467
and he tried
to explain it to me.

00:10:11.467 --> 00:10:13.634
Basically, they fixed
a whole bunch of issues

00:10:13.634 --> 00:10:15.968
with the implementation HP URL
connection to Android

00:10:15.968 --> 00:10:18.334
in the Gingerbread release.

00:10:18.334 --> 00:10:20.467
You may or may not
have encountered those,

00:10:20.467 --> 00:10:22.968
but it's best practice
just to use that one.

00:10:22.968 --> 00:10:25.467
It's really the one
that they've developed the best,

00:10:25.467 --> 00:10:28.033
so highly recommended if you're
targeting Gingerbread or later.

00:10:28.033 --> 00:10:29.868
Use that one.

00:10:29.868 --> 00:10:32.367
I'm not sure how good
a support they will have

00:10:32.367 --> 00:10:34.701
for the Apache HP client
in the future.

00:10:34.701 --> 00:10:37.467
They still both work,
but that's what's recommended.

00:10:37.467 --> 00:10:39.467
But if you're working with

00:10:39.467 --> 00:10:41.968
a previous version
of the Android SDK,

00:10:41.968 --> 00:10:44.467
you'll want to still use
the Apache transport,

00:10:44.467 --> 00:10:46.467
just to avoid those few bugs

00:10:46.467 --> 00:10:48.501
that they fixed
in Gingerbread release.

00:10:48.501 --> 00:10:51.133
If you're targeting
both Android SDKs,

00:10:51.133 --> 00:10:53.267
I created
a little utility library

00:10:53.267 --> 00:10:56.000
just as if Android level,
greater or equal to Gingerbread.

00:10:56.000 --> 00:10:58.801
Use one,
also use the other.

00:10:58.801 --> 00:11:01.267
Okay.

00:11:01.267 --> 00:11:03.767
So let's
talk about the library

00:11:03.767 --> 00:11:05.767
and how you make requests.

00:11:05.767 --> 00:11:08.100
A lot of times,
every request you make,

00:11:08.100 --> 00:11:10.267
you'll do a lot
of the same things.

00:11:10.267 --> 00:11:12.601
I want to set
the user agent string to--

00:11:12.601 --> 00:11:14.601
this is the application name
I want to set the G data

00:11:14.601 --> 00:11:16.467
versus working
with Google Calendar,

00:11:16.467 --> 00:11:18.000
you have to specify

00:11:18.000 --> 00:11:20.000
what version of the API
you need using a header.

00:11:20.000 --> 00:11:22.000
That's something you need to do.

00:11:22.000 --> 00:11:24.000
If you're writing
any real application,

00:11:24.000 --> 00:11:26.000
you just
have to do those things.

00:11:26.000 --> 00:11:28.000
You need to enable Gzip,

00:11:28.000 --> 00:11:30.334
if you want the most
efficient posting of content.

00:11:30.334 --> 00:11:33.834
So there's an example here
of how to use a request factory.

00:11:33.834 --> 00:11:37.334
A request factory is nice,
because it lets you do

00:11:37.334 --> 00:11:41.067
a bunch of consistent behaviors
across every request you make.

00:11:41.067 --> 00:11:43.567
There's some more sophisticated
functionality in it.

00:11:43.567 --> 00:11:46.667
I'm not demonstrating code here,
but you could have code run

00:11:46.667 --> 00:11:48.834
before you
execute any requests.

00:11:48.834 --> 00:11:52.434
You can have code run after you
get an unsuccessful request.

00:11:52.434 --> 00:11:54.601
So why are these in the library?

00:11:54.601 --> 00:11:57.100
Well, um, for OAuth
is a great example.

00:11:57.100 --> 00:12:00.400
OAuth 1.0, for example, requires
you to sign every request,

00:12:00.400 --> 00:12:02.801
so that's how you can
build a hook every time.

00:12:02.801 --> 00:12:05.133
Before you execute a request,

00:12:05.133 --> 00:12:09.000
you just sign the request using
the OAuth 1.0 specification,

00:12:09.000 --> 00:12:11.334
and go ahead
and make your request.

00:12:11.334 --> 00:12:14.667
Don't worry, we'll make this
a little bit easier for you.

00:12:14.667 --> 00:12:16.667
Stay tuned.

00:12:16.667 --> 00:12:19.167
So I wanted to put
this little tip in here.

00:12:19.167 --> 00:12:21.667
I don't want to dwell on it,
but if you've done

00:12:21.667 --> 00:12:24.634
any kind of programming
with making HTTP requests,

00:12:24.634 --> 00:12:26.968
it's really nice
to be able to log

00:12:26.968 --> 00:12:29.300
the requests
and the responses that you make.

00:12:29.300 --> 00:12:31.734
If you set
the logging level to config,

00:12:31.734 --> 00:12:33.734
you'll see those requests.

00:12:33.734 --> 00:12:37.100
One thing is I'm not showing
the authorization header.

00:12:37.100 --> 00:12:39.701
By default,
it's set to config level.

00:12:39.701 --> 00:12:42.868
If you set to all level, it will
show the authorization header.

00:12:42.868 --> 00:12:45.467
This is maybe to avoid
some use case, if you, um,

00:12:45.467 --> 00:12:47.968
you don't want to log
the most sensitive data.

00:12:47.968 --> 00:12:50.467
But the one trick on Android
that's really important

00:12:50.467 --> 00:12:53.400
is you need to also
set some property here.

00:12:53.400 --> 00:12:55.901
You're not gonna remember
exactly the command to run,

00:12:55.901 --> 00:12:58.400
but when you go home
and write in your application,

00:12:58.400 --> 00:13:01.567
you can come back
to this slide.

00:13:01.567 --> 00:13:03.901
Okay, so let's step away
from, you know, the mechanics

00:13:03.901 --> 00:13:06.234
of making HTTP requests

00:13:06.234 --> 00:13:09.067
and think a little bit more
of the bigger picture.

00:13:09.067 --> 00:13:12.067
How do you actually design
your Android application?

00:13:12.067 --> 00:13:15.133
The most important principle
that I hope you remember

00:13:15.133 --> 00:13:17.968
is you don't want to make HTTP
requests in the UI thread.

00:13:17.968 --> 00:13:19.968
If an HTTP request is fast

00:13:19.968 --> 00:13:22.634
and you've got
a fast Wi-Fi connection, great.

00:13:22.634 --> 00:13:25.133
But if anything like
the experience here

00:13:25.133 --> 00:13:27.667
at this conference--

00:13:27.667 --> 00:13:30.400
Wi-Fi is not always fast.
It's not always reliable.

00:13:30.400 --> 00:13:33.534
That's the reality you have
to deal with on Android devices.

00:13:33.534 --> 00:13:36.868
So don't make any HTTP requests
on the main thread.

00:13:36.868 --> 00:13:38.901
That was the mistake I made

00:13:38.901 --> 00:13:41.200
in the first sample code
I showed you.

00:13:41.200 --> 00:13:44.000
One risk is if the Android
operating system sees, okay,

00:13:44.000 --> 00:13:46.501
your application is hanging,
it's not doing anything,

00:13:46.501 --> 00:13:49.000
it's gonna put up a dialogue
box, a scary dialogue box,

00:13:49.000 --> 00:13:51.334
saying, "Hey, your application
is not responding.

00:13:51.334 --> 00:13:54.167
Do you want to shut it down
now?" Okay, that's not good.

00:13:54.167 --> 00:13:57.367
So the simplest solution
is to just use AsyncTask,

00:13:57.367 --> 00:13:59.701
and I'll give an example
in just a minute.

00:13:59.701 --> 00:14:02.601
But before I show you that
example, I highly recommend--

00:14:02.601 --> 00:14:04.934
there's a great session
from IO last year,

00:14:04.934 --> 00:14:07.267
called "The Beginner's Guide
to Android,"

00:14:07.267 --> 00:14:09.434
which really covers this
in detail

00:14:09.434 --> 00:14:11.434
and shows you
how to use AsyncTask.

00:14:11.434 --> 00:14:15.000
Um...

00:14:15.000 --> 00:14:16.667
So here is an example.

00:14:16.667 --> 00:14:19.167
Um, I tried to squeeze
all that code into the slide.

00:14:19.167 --> 00:14:20.667
I apologize.

00:14:20.667 --> 00:14:23.667
Um, but basically, uh, the top
of it is pretty much the same.

00:14:23.667 --> 00:14:25.667
I've--I'm extending
list activity

00:14:25.667 --> 00:14:27.667
but then I'm using AsyncTask.

00:14:27.667 --> 00:14:30.000
I declare a class
called "Load Activities."

00:14:30.000 --> 00:14:32.000
And I've got
a progress dialogue.

00:14:32.000 --> 00:14:34.667
And it'll show
a nice little circle

00:14:34.667 --> 00:14:36.667
saying, "loading your activities
now."

00:14:36.667 --> 00:14:39.167
And then this, uh,

00:14:39.167 --> 00:14:41.501
this method
called "due in background,"

00:14:41.501 --> 00:14:45.100
which, um, Android takes care of
all the thread synchronization

00:14:45.100 --> 00:14:46.567
for you,

00:14:46.567 --> 00:14:48.567
so if you don't know
a lot about multithreading,

00:14:48.567 --> 00:14:50.567
this is a really great tool,

00:14:50.567 --> 00:14:52.567
and you don't have to worry
about making sure

00:14:52.567 --> 00:14:54.567
that the memory's
properly synchronized.

00:14:54.567 --> 00:14:56.567
So it--the implementation here
is pretty simple.

00:14:56.567 --> 00:14:58.567
One line of code--
I execute the request

00:14:58.567 --> 00:15:00.067
using the library,

00:15:00.067 --> 00:15:02.133
and I return the activity feed,

00:15:02.133 --> 00:15:04.133
and that activity feed
is passed to...

00:15:04.133 --> 00:15:06.133
next slide--

00:15:06.133 --> 00:15:08.133
on post execute.

00:15:08.133 --> 00:15:11.701
So it takes an activity feed,
um, and pretty much does

00:15:11.701 --> 00:15:14.033
the same UI code
that I showed you earlier.

00:15:14.033 --> 00:15:16.033
And maybe some of you--
this is boring.

00:15:16.033 --> 00:15:18.567
You've already seen this before.
Um, that's great.

00:15:18.567 --> 00:15:21.033
If you haven't seen it before,
please try it out.

00:15:21.033 --> 00:15:23.033
Um, so that's AsyncTask,

00:15:23.033 --> 00:15:25.033
and it's relatively simple.

00:15:25.033 --> 00:15:27.033
Um, but let's say

00:15:27.033 --> 00:15:29.033
you're building
a-a more complex application.

00:15:29.033 --> 00:15:31.534
Um, in my case, you know,
I'm just displaying

00:15:31.534 --> 00:15:33.534
a bunch of, um, buzz activities.

00:15:33.534 --> 00:15:35.934
Worst-case scenario--
um, I lose those activities.

00:15:35.934 --> 00:15:38.434
I can always make another
request and get a new one.

00:15:38.434 --> 00:15:40.434
But a lot
of, um, real applications

00:15:40.434 --> 00:15:43.934
require you to do something
more sophisticated.

00:15:43.934 --> 00:15:45.934
So, um, a better design,

00:15:45.934 --> 00:15:49.434
um, that deals with,
uh, more complex use cases

00:15:49.434 --> 00:15:51.467
is to actually use
a background service.

00:15:51.467 --> 00:15:53.434
And I won't go into details.

00:15:53.434 --> 00:15:55.434
Um, there's actually
an excellent session

00:15:55.434 --> 00:15:57.934
from last year's Google I/O
that I really enjoyed

00:15:57.934 --> 00:16:00.434
that shows you
a lot of the different options

00:16:00.434 --> 00:16:02.501
for how you can do this called

00:16:02.501 --> 00:16:04.501
"Developing Android
REST client applications."

00:16:04.501 --> 00:16:07.167
Um, and, um,
and I'll just summarize,

00:16:07.167 --> 00:16:09.167
you know,
the--the general principle,

00:16:09.167 --> 00:16:12.167
um, which is, you're going
to have a background service

00:16:12.167 --> 00:16:13.667
running on the device.

00:16:13.667 --> 00:16:16.167
It's going to store the result
of the HTTP request,

00:16:16.167 --> 00:16:18.167
uh, in a SQLite database,

00:16:18.167 --> 00:16:20.667
and then it's going to talk
to, uh, the activity

00:16:20.667 --> 00:16:23.167
in the U.I. thread,
give it back the response.

00:16:23.167 --> 00:16:25.200
But activities
have a life cycle.

00:16:25.200 --> 00:16:26.667
There's no guarantee

00:16:26.667 --> 00:16:29.200
that, um, that the activity
is going to be there.

00:16:29.200 --> 00:16:32.267
Um, when the response--
maybe the user got a phone call,

00:16:32.267 --> 00:16:35.701
and, uh, or maybe they want
to play "Angry Birds"...

00:16:35.701 --> 00:16:37.200
I'm not sure--

00:16:37.200 --> 00:16:39.200
The Android operating system
might decide, "you know what?

00:16:39.200 --> 00:16:40.868
"I'm running low on memory.

00:16:40.868 --> 00:16:42.868
Let's just shut down
your application."

00:16:42.868 --> 00:16:44.868
Whoops. We just lost some data.

00:16:44.868 --> 00:16:46.868
This is gonna be especially
crucial in some cases,

00:16:46.868 --> 00:16:49.367
so, uh, the key, uh, thing
you need to do

00:16:49.367 --> 00:16:51.367
is when the activity
starts up again,

00:16:51.367 --> 00:16:53.367
okay, check
if we have any new data,

00:16:53.367 --> 00:16:57.367
load it up,
we're good.

00:16:57.367 --> 00:17:00.367
So I want to talk about
something that I see often...

00:17:00.367 --> 00:17:01.934
[chuckles]

00:17:01.934 --> 00:17:03.434
uh, complaints from developers,

00:17:03.434 --> 00:17:05.434
You know,
I downloaded this library,

00:17:05.434 --> 00:17:07.434
I'm running the device,
and it's 2.3 megabytes--

00:17:07.434 --> 00:17:09.434
you know,
my little example here.

00:17:09.434 --> 00:17:11.434
Um, something is wrong here,
right?

00:17:11.434 --> 00:17:14.234
And why would you take
a 100 kilobyte example

00:17:14.234 --> 00:17:17.033
and end up
with a 2 megabyte library?

00:17:17.033 --> 00:17:19.033
So there
is something wrong here,

00:17:19.033 --> 00:17:21.033
uh, and the trick
is to use ProGuard,

00:17:21.033 --> 00:17:24.033
um, or any other tool that--that
shrinks your application size,

00:17:24.033 --> 00:17:26.033
but ProGuard
is a particularly good one,

00:17:26.033 --> 00:17:28.367
and, um, it has
a good, um, support

00:17:28.367 --> 00:17:32.734
in the Android, um, Eclipse
integration,

00:17:32.734 --> 00:17:34.701
so that's why we're recommending
that one.

00:17:34.701 --> 00:17:37.701
Um, and you'll see
in this very complex graph,

00:17:37.701 --> 00:17:39.701
um, you know--
with ProGuard, without,

00:17:39.701 --> 00:17:41.701
which would you pick?

00:17:41.701 --> 00:17:43.701
123 kilobytes
versus 2.3 megabytes.

00:17:43.701 --> 00:17:45.200
So what does ProGuard do?

00:17:45.200 --> 00:17:47.200
What's--what's the magic
behind it?

00:17:47.200 --> 00:17:50.200
Well, the first thing it does
is strips out any unused code.

00:17:50.200 --> 00:17:53.200
All right, so, um, I want to use
this 1 megabyte library,

00:17:53.200 --> 00:17:55.868
but I just need this one method.
Is that okay?

00:17:55.868 --> 00:17:57.868
Well, normally not,
but when you use ProGuard,

00:17:57.868 --> 00:18:00.567
yes, it's okay, because it'll
only include that one method,

00:18:00.567 --> 00:18:02.734
not the rest
of the 1 megabyte library,

00:18:02.734 --> 00:18:04.767
and it--actually,
that is what we're doing.

00:18:04.767 --> 00:18:06.868
We're using Guava,
which is a very large library,

00:18:06.868 --> 00:18:08.868
but we're just using a tiny bit
of it.

00:18:08.868 --> 00:18:10.767
So it should work,

00:18:10.767 --> 00:18:13.267
um, if you set up your ProGuard
configuration file correctly.

00:18:13.267 --> 00:18:15.100
Now one more note about ProGuard

00:18:15.100 --> 00:18:17.601
is it also does a lot of other
aggressive optimizations.

00:18:17.601 --> 00:18:20.100
It changes your class names
to, you know, single letters

00:18:20.100 --> 00:18:21.934
and all sorts of crazy stuff.

00:18:21.934 --> 00:18:24.434
You can disable that if it's too
aggressive of an optimization.

00:18:24.434 --> 00:18:25.934
Really, the crucial thing

00:18:25.934 --> 00:18:27.934
is to cut out anything
you're not using.

00:18:27.934 --> 00:18:29.934
Um, but you're welcome
to play around with it.

00:18:29.934 --> 00:18:31.934
So how do you set it up?

00:18:31.934 --> 00:18:33.934
Um, the number one mistake
people make,

00:18:33.934 --> 00:18:35.934
um, in setting up the ProGuard

00:18:35.934 --> 00:18:37.934
is forgetting
to add this one line

00:18:37.934 --> 00:18:39.434
and default the properties file.

00:18:39.434 --> 00:18:41.601
Um, I highly recommend
the Eclipse New Project Wizard.

00:18:41.601 --> 00:18:43.601
Um, it generates
a ProGuard configuration file

00:18:43.601 --> 00:18:45.601
for you
that's actually pretty good.

00:18:45.601 --> 00:18:48.801
Um, and it generates
a default of properties file.

00:18:48.801 --> 00:18:51.801
Um, you just put in that
one line--proguard.config.

00:18:51.801 --> 00:18:54.267
Um, that will tell it
to run ProGuard.

00:18:54.267 --> 00:18:56.267
And then I added some more lines
in here.

00:18:56.267 --> 00:18:58.267
I'm not gonna go into detail

00:18:58.267 --> 00:19:00.267
how they work
and how they're important,

00:19:00.267 --> 00:19:02.834
but suffice it to say
you just add these few lines,

00:19:02.834 --> 00:19:04.834
and it, um,
they are really crucial

00:19:04.834 --> 00:19:06.334
for this library in particular,

00:19:06.334 --> 00:19:08.334
uh, not for Android programming
in general,

00:19:08.334 --> 00:19:10.334
but for this library,
you absolutely need these.

00:19:10.334 --> 00:19:12.534
Um, otherwise, it's just not
going to work properly.

00:19:12.534 --> 00:19:14.667
So, uh, when you run
your program in DebugMode,

00:19:14.667 --> 00:19:17.667
it will actually be the full
2.3 megabyte, um, application.

00:19:17.667 --> 00:19:19.167
That's okay.

00:19:19.167 --> 00:19:21.667
Um, but then you want to make
sure you run it

00:19:21.667 --> 00:19:24.167
into release mode, and sometimes
people forget to do that.

00:19:24.167 --> 00:19:25.667
I've done that often.

00:19:25.667 --> 00:19:28.667
Um, you run it in release mode
and see if any bugs happen.

00:19:28.667 --> 00:19:30.667
As I said, ProGuard
can be aggressive sometimes,

00:19:30.667 --> 00:19:32.667
so make sure that, you know,

00:19:32.667 --> 00:19:35.734
the things that, um, you expect
to work are still working.

00:19:35.734 --> 00:19:39.400
Um, all right, so...

00:19:39.400 --> 00:19:41.400
let's talk about
the next section

00:19:41.400 --> 00:19:42.901
of this session.

00:19:42.901 --> 00:19:45.767
What APIs are we trying
to support with this library?

00:19:45.767 --> 00:19:48.133
Well, my vision is, ideally,
all of them,

00:19:48.133 --> 00:19:50.133
so let's talk about them.

00:19:50.133 --> 00:19:52.133
Uh, so Google Data APIs

00:19:52.133 --> 00:19:54.133
are, by far,
the most mature platform.

00:19:54.133 --> 00:19:56.801
Um,
some really popular examples--

00:19:56.801 --> 00:19:58.801
YouTube, Calendar,

00:19:58.801 --> 00:20:01.367
Blogger, un, the Contacts.

00:20:01.367 --> 00:20:03.367
Uh, those are some of the ones

00:20:03.367 --> 00:20:05.367
that you'll often,
uh, see being used.

00:20:05.367 --> 00:20:08.334
Um, they have, uh...

00:20:08.334 --> 00:20:10.334
many years of experience
behind them.

00:20:10.334 --> 00:20:11.834
It's a great architecture.

00:20:11.834 --> 00:20:13.834
Um, but there are some flaws
in it,

00:20:13.834 --> 00:20:16.133
and I'll talk more about
what those issues were.

00:20:16.133 --> 00:20:18.167
But first,
one of the main principles

00:20:18.167 --> 00:20:19.634
of this platform

00:20:19.634 --> 00:20:21.634
is it's a decentralized
architecture.

00:20:21.634 --> 00:20:23.801
So YouTube has its own server
running.

00:20:23.801 --> 00:20:26.534
Blogger has its own server.
Calendar has its own server.

00:20:26.534 --> 00:20:28.534
And they both--all using
the same, you know,

00:20:28.534 --> 00:20:30.033
GData library.

00:20:30.033 --> 00:20:32.033
But because it's a decentralized
architecture,

00:20:32.033 --> 00:20:34.033
we didn't have as much control,

00:20:34.033 --> 00:20:36.033
so we added some features
to one.

00:20:36.033 --> 00:20:38.033
They weren't always there
in the other.

00:20:38.033 --> 00:20:40.033
Um, and that was one
of the problems

00:20:40.033 --> 00:20:42.033
that we tried to solve
with the new infrastructure.

00:20:42.033 --> 00:20:43.534
Um, another issue

00:20:43.534 --> 00:20:45.534
with, um, the Google Data API's
infrastructure

00:20:45.534 --> 00:20:48.801
is, um, XML, and that--
it's a great, uh, data format.

00:20:48.801 --> 00:20:51.701
Um, it--we were using
the Atom Publishing Protocol.

00:20:51.701 --> 00:20:53.701
Uh, it's a standards base.

00:20:53.701 --> 00:20:57.501
It uses REST,
um, as its primary principle,

00:20:57.501 --> 00:21:00.000
uh, which, if you're not
familiar with that,

00:21:00.000 --> 00:21:02.067
that's when you're making
only basic operations--

00:21:02.067 --> 00:21:05.868
you create, you update,
you can delete, um, objects,

00:21:05.868 --> 00:21:07.868
so very easy to understand.

00:21:07.868 --> 00:21:11.834
However, XML is--is a more, um,
heavyweight, um, data format

00:21:11.834 --> 00:21:13.334
than say JSON.

00:21:13.334 --> 00:21:15.334
So we--we designed
this new format

00:21:15.334 --> 00:21:17.334
called--we called it JSON-C.

00:21:17.334 --> 00:21:19.334
Um, unfortunately,
it's only read only.

00:21:19.334 --> 00:21:21.334
Picasa and YouTube and Calendar

00:21:21.334 --> 00:21:23.334
are some of the few APIs
that implement it,

00:21:23.334 --> 00:21:25.367
and it's great, but, um, it--

00:21:25.367 --> 00:21:27.567
as I said,
decentralized architecture.

00:21:27.567 --> 00:21:30.267
We couldn't do it across
all of our APIs.

00:21:30.267 --> 00:21:32.267
Um, the authentication mechanism
supported.

00:21:32.267 --> 00:21:34.267
I'm gonna go
into a lot more detail,

00:21:34.267 --> 00:21:36.767
but a ClientLogin is a great
choice for Android programmers.

00:21:36.767 --> 00:21:38.767
It's not such a great choice,

00:21:38.767 --> 00:21:41.667
um, for other--other types
of environments.

00:21:41.667 --> 00:21:44.501
Um, so OAuth 1.0 and OAuth 2.0

00:21:44.501 --> 00:21:47.167
are--are the authentication,
because you'll want to use

00:21:47.167 --> 00:21:50.300
any other, uh, platform
for right now.

00:21:53.267 --> 00:21:55.267
So we actually have
a Java library

00:21:55.267 --> 00:21:58.100
for Google Data APIs,
um, and it's pretty good.

00:21:58.100 --> 00:22:00.067
It has a nice XML data model.

00:22:00.067 --> 00:22:02.968
I actually had a role in--
in designing that data model,

00:22:02.968 --> 00:22:05.968
um, and it--it's code-generated,
actually,

00:22:05.968 --> 00:22:08.467
um, but there are a couple
minor issues

00:22:08.467 --> 00:22:11.334
that might worry you
as an Android programmer.

00:22:11.334 --> 00:22:13.834
Um, one is it only works
the Google Data APIs,

00:22:13.834 --> 00:22:15.334
which is okay right now,

00:22:15.334 --> 00:22:18.033
but as we, um, Google comes up
with new APIs,

00:22:18.033 --> 00:22:20.501
as I said, they're all going on
this new API infrastructure.

00:22:20.501 --> 00:22:22.167
So too bad.

00:22:22.167 --> 00:22:23.834
And another minor problem--

00:22:23.834 --> 00:22:25.834
it doesn't really work well
on Android.

00:22:25.834 --> 00:22:27.334
[chuckles]

00:22:27.334 --> 00:22:29.834
You'll get an exception
if you try to use it.

00:22:29.834 --> 00:22:31.834
Um, and we think
it might be fixed

00:22:31.834 --> 00:22:33.334
on Ice Cream Sandwich SDK.

00:22:33.334 --> 00:22:35.334
I heard from one
of the Android programmers

00:22:35.334 --> 00:22:36.834
they fixed one bug,

00:22:36.834 --> 00:22:38.834
but really, uh,
at the heart of the problem

00:22:38.834 --> 00:22:41.334
is it really wasn't designed
for Android at the beginning,

00:22:41.334 --> 00:22:43.334
from the start.
It's--it's not efficient.

00:22:43.334 --> 00:22:45.334
It--it--it doesn't think
about use cases

00:22:45.334 --> 00:22:48.334
that you want to think about
as an Android developer,

00:22:48.334 --> 00:22:51.334
so we don't recommend it,
um, but yet, it still exists.

00:22:51.334 --> 00:22:53.334
It's still maintained.
It still works.

00:22:53.334 --> 00:22:55.834
Um, but we haven't touched it
for about two years now.

00:22:55.834 --> 00:22:58.000
So let's talk about
the new API infrastructure

00:22:58.000 --> 00:23:00.167
and tell you why I'm excited
about--about it,

00:23:00.167 --> 00:23:02.567
and--and why I've really focused
all of my energies

00:23:02.567 --> 00:23:05.334
to make sure it's really
well supported in this library.

00:23:05.334 --> 00:23:06.834
Uh, it's a centralized
architecture--

00:23:06.834 --> 00:23:09.334
really important, because we can
roll out new features,

00:23:09.334 --> 00:23:11.834
and they work, um,
across all the APIs.

00:23:11.834 --> 00:23:14.834
It--we focus on JSON, which
is a lighter weight format.

00:23:14.834 --> 00:23:16.667
It's more natural to use.

00:23:16.667 --> 00:23:19.634
Um, it's a much more pleasant
experience.

00:23:19.634 --> 00:23:22.868
OAuth is our, um, our
authentication mechanism

00:23:22.868 --> 00:23:24.868
for almost all of those APIs

00:23:24.868 --> 00:23:28.100
that we, uh, that they support
with this--with this platform.

00:23:28.100 --> 00:23:30.100
Uh, and some examples--

00:23:30.100 --> 00:23:32.434
okay, Buzz, um, Latitude,

00:23:32.434 --> 00:23:35.033
Search API forShopping
is a relatively recent one.

00:23:35.033 --> 00:23:37.400
You'll see new ones
being rolled out quite--

00:23:37.400 --> 00:23:39.434
um, um,
at a reasonable pace now.

00:23:39.434 --> 00:23:41.734
Um, so if you want
to get more details,

00:23:41.734 --> 00:23:43.734
I highly recommend
two, uh, sessions.

00:23:43.734 --> 00:23:45.734
One is a session from last year,

00:23:45.734 --> 00:23:48.234
um, called
"How Google Builds APIs."

00:23:48.234 --> 00:23:50.734
It really talks about
our new API infrastructure

00:23:50.734 --> 00:23:53.234
and the vision
that we had a year ago,

00:23:53.234 --> 00:23:55.234
which, thankfully,
hasn't changed at all.

00:23:55.234 --> 00:23:57.234
We've just, uh,
simply rolled out on the vision,

00:23:57.234 --> 00:23:58.734
executed that vision.

00:23:58.734 --> 00:24:00.734
I actually make a quick
appearance on that video.

00:24:00.734 --> 00:24:02.801
That's where I talk about
the alpha prototype

00:24:02.801 --> 00:24:04.300
of this library.

00:24:04.300 --> 00:24:06.300
Um, and the second one
that I highly recommend,

00:24:06.300 --> 00:24:08.300
if you're really gonna get
a beginner's view

00:24:08.300 --> 00:24:10.133
of working with Google APIs,

00:24:10.133 --> 00:24:12.501
I highly recommend "Life
of a Google API Developer."

00:24:12.501 --> 00:24:14.467
Unfortunately,
you just missed it,

00:24:14.467 --> 00:24:17.467
but when you--when you go home,
um, you know, find it on YouTube

00:24:17.467 --> 00:24:19.400
and watch that one.

00:24:23.234 --> 00:24:27.634
So Announcing today
the Discovery Service,

00:24:27.634 --> 00:24:30.434
and the geek in me
is really excited about this.

00:24:30.434 --> 00:24:31.934
This is really cool.
[chuckles]

00:24:31.934 --> 00:24:34.434
Uh, we just announced it
on a blog, uh, yesterday.

00:24:34.434 --> 00:24:36.434
Um, it's basically a directory
of all the APIs

00:24:36.434 --> 00:24:38.133
on the new
Google API infrastructure.

00:24:38.133 --> 00:24:40.934
Um, and you get a Discovery
document for every API

00:24:40.934 --> 00:24:43.267
that tells you
what other methods are supported

00:24:43.267 --> 00:24:45.701
on these A--uh,
by each API,

00:24:45.701 --> 00:24:49.234
um, so, um, and what are the--
what's the schema,

00:24:49.234 --> 00:24:51.734
the JSON schema of--
of the objects

00:24:51.734 --> 00:24:55.133
that are being, um, manipulated
and--by this API.

00:24:55.133 --> 00:24:57.133
Um, so you can think
of Buzz activities--

00:24:57.133 --> 00:24:59.133
that list, that's the method.

00:24:59.133 --> 00:25:01.200
Activities feed--well,
that's your--that's your object.

00:25:01.200 --> 00:25:03.200
And also the OAuth 2.0 scopes,

00:25:03.200 --> 00:25:05.200
and--and you'll see us
really focusing

00:25:05.200 --> 00:25:08.300
OAuth 2.0 as our premier
authentification method.

00:25:08.300 --> 00:25:10.801
Um, so there's
a really great session

00:25:10.801 --> 00:25:13.300
if you're interested
in this Discovery service--

00:25:13.300 --> 00:25:16.300
Uh, "Building Custom Client
Libraries for Google APIs."

00:25:16.300 --> 00:25:18.801
I believe
it's tomorrow afternoon.

00:25:18.801 --> 00:25:22.567
Uh, check your session guide.

00:25:22.567 --> 00:25:25.634
So what can you do
when you have a Discovery API?

00:25:25.634 --> 00:25:27.634
Well, the first thing
we thought of

00:25:27.634 --> 00:25:29.634
is let's build an API Explorer.

00:25:29.634 --> 00:25:32.501
It's a web-based tool,
and I'm gonna brave

00:25:32.501 --> 00:25:35.100
and attempt to--to run this
real quick.

00:25:35.100 --> 00:25:37.467
Let's see
if I've got the internet here.

00:25:37.467 --> 00:25:41.767
Um... okay.

00:25:41.767 --> 00:25:44.100
So we have a list

00:25:44.100 --> 00:25:47.501
of all the services.

00:25:47.501 --> 00:25:50.167
And let's pick Buzz,

00:25:50.167 --> 00:25:52.200
activities.list,
and you'll see--

00:25:52.200 --> 00:25:54.667
it tells you the description
of everything you need to know

00:25:54.667 --> 00:25:56.167
for the userId LPIC.

00:25:56.167 --> 00:25:58.167
"At me" for the scope--

00:25:58.167 --> 00:26:00.734
Ah, self, that's a good one.

00:26:00.734 --> 00:26:02.234
Execute it.

00:26:02.234 --> 00:26:05.934
Whoops. I'm not authenticated.

00:26:05.934 --> 00:26:09.934
Let's try that again.

00:26:09.934 --> 00:26:11.934
I'm authenticated now
apparently.

00:26:11.934 --> 00:26:13.434
[chuckles]

00:26:13.434 --> 00:26:15.434
Aha! It works.

00:26:15.434 --> 00:26:17.434
Um, now why is this useful?

00:26:17.434 --> 00:26:19.434
I can see
the authorization header.

00:26:19.434 --> 00:26:21.934
I can see exactly the request
it made.

00:26:21.934 --> 00:26:24.934
I can see the response.
I can see the data format.

00:26:24.934 --> 00:26:26.934
Whoa, there's a lot of data
here.

00:26:26.934 --> 00:26:31.100
Wow, I just wanted to check
the activity content.

00:26:31.100 --> 00:26:33.601
Okay, here we go.
So here's the activity content.

00:26:33.601 --> 00:26:35.601
I'll come back to this
in a second.

00:26:35.601 --> 00:26:37.601
Okay, so this is fun.

00:26:37.601 --> 00:26:39.601
This is just a great tool

00:26:39.601 --> 00:26:42.100
if you're doing
any kind of Android development.

00:26:42.100 --> 00:26:44.100
So let's go to the next tool

00:26:44.100 --> 00:26:47.100
that we--what--the next thing
we can do with Discovery.

00:26:47.100 --> 00:26:49.100
Uh, well, we've got
the APIs console,

00:26:49.100 --> 00:26:51.100
and I highly recommend
the session

00:26:51.100 --> 00:26:53.100
that, uh, just ended,
uh, momentarily.

00:26:53.100 --> 00:26:55.100
Um, this is about setting up,

00:26:55.100 --> 00:26:57.367
uh, which APIs
you want to access

00:26:57.367 --> 00:26:58.868
as a developer,

00:26:58.868 --> 00:27:00.868
uh, based on
this new infrastructure.

00:27:00.868 --> 00:27:03.434
Um, it's about getting
your API access key,

00:27:03.434 --> 00:27:05.434
which is going to be important
later.

00:27:05.434 --> 00:27:07.934
Um, I'm not gonna show you
a demo--

00:27:07.934 --> 00:27:10.868
well, I could show you
real quick what it looks like.

00:27:10.868 --> 00:27:12.868
Here it is running,
so let's see.

00:27:12.868 --> 00:27:15.367
I want to use
the URL Shortener API.

00:27:15.367 --> 00:27:16.868
That's a fun API.

00:27:16.868 --> 00:27:19.200
Okay, it's on now.
Great.

00:27:19.200 --> 00:27:22.534
So I get a free limit
of 1,000 queries per day.

00:27:22.534 --> 00:27:25.167
Um, if I go beyond that,

00:27:25.167 --> 00:27:27.501
I'll probably have to pay
for that usage,

00:27:27.501 --> 00:27:30.300
um, but that's
a pretty high limit.

00:27:30.300 --> 00:27:32.667
Um, you can see
I've already enabled Buzz API.

00:27:32.667 --> 00:27:34.634
If you go to the API access tab,

00:27:34.634 --> 00:27:36.634
you'll actually see
"Get your API Access Key."

00:27:36.634 --> 00:27:38.634
And it will look
something like this

00:27:38.634 --> 00:27:40.634
with the API key
not blocked out.

00:27:40.634 --> 00:27:42.133
[chuckles]

00:27:42.133 --> 00:27:43.634
Sorry.

00:27:43.634 --> 00:27:46.133
And... so I'll come back
to this,

00:27:46.133 --> 00:27:48.167
um, later in the--
in the presentation.

00:27:48.167 --> 00:27:49.667
Okay.

00:27:49.667 --> 00:27:52.667
So what's the next thing you
can do with the Discovery API?

00:27:52.667 --> 00:27:54.167
Well, actually, last year,

00:27:54.167 --> 00:27:56.167
immediately after
the Google I/O session,

00:27:56.167 --> 00:27:57.667
they had, um, a developer--

00:27:57.667 --> 00:28:00.000
I don't know if you're here
in this room now,

00:28:00.000 --> 00:28:02.734
but come up to me and say,
"Hey, wouldn't it be great

00:28:02.734 --> 00:28:04.734
"if you took
the Discovery API

00:28:04.734 --> 00:28:06.934
and generated a bunch of
libraries based on that?"

00:28:06.934 --> 00:28:09.067
I said, "You know what?
That's a great idea."

00:28:09.067 --> 00:28:11.234
So one year later,
we're proud to announce

00:28:11.234 --> 00:28:13.734
we've got generated libraries
based on the Discovery API.

00:28:13.734 --> 00:28:16.934
Um, so here's an example
of how you can use it.

00:28:16.934 --> 00:28:19.167
Um, I already showed
this earlier.

00:28:19.167 --> 00:28:21.434
Google Buzz
getting an activities list.

00:28:21.434 --> 00:28:24.434
Um, I have here an example
of inserting an activity.

00:28:24.434 --> 00:28:28.200
Um, we've got--so this is based
on the JSON schema.

00:28:28.200 --> 00:28:31.000
We can just generate
Java classes right out of it.

00:28:31.000 --> 00:28:32.434
So I do new activity,

00:28:32.434 --> 00:28:34.434
I set the activity content,

00:28:34.434 --> 00:28:36.434
um, and...

00:28:36.434 --> 00:28:39.467
I call the Buzz activities
an insert method,

00:28:39.467 --> 00:28:41.434
I get a result back.

00:28:41.434 --> 00:28:43.100
Pretty straightforward,
pretty readable.

00:28:43.100 --> 00:28:46.100
How do you delete an activity?
And I'll give you one hint here.

00:28:46.100 --> 00:28:48.100
I always forget to call
a .execute method.

00:28:48.100 --> 00:28:49.601
[chuckles]

00:28:49.601 --> 00:28:51.601
Um, you--you're calling
that "delete,"

00:28:51.601 --> 00:28:54.100
and you think, oh, that's going
to delete my--my activity.

00:28:54.100 --> 00:28:56.100
Oh, I forgot to call execute.

00:28:56.100 --> 00:28:58.100
So don't forget that.
[chuckles]

00:28:58.100 --> 00:29:00.934
Okay, so we've got
generated libraries.

00:29:00.934 --> 00:29:02.934
So this is what gets me excited

00:29:02.934 --> 00:29:04.434
about this new
API infrastructure.

00:29:04.434 --> 00:29:06.434
Uh, we're able to provide this
to you.

00:29:06.434 --> 00:29:08.434
It's gonna make your life
a lot easier.

00:29:08.434 --> 00:29:11.434
You don't have to write your own
HTTP request intializer

00:29:11.434 --> 00:29:15.267
that sets the GData version.
It just works.

00:29:15.267 --> 00:29:17.601
All right,
so what are the data formats

00:29:17.601 --> 00:29:19.601
supported by this library?

00:29:19.601 --> 00:29:22.968
Uh, this is gonna get more
detailed than we've had before.

00:29:22.968 --> 00:29:24.467
So JSON--

00:29:24.467 --> 00:29:26.968
I talked about how great
of a format that is.

00:29:26.968 --> 00:29:28.467
It's lightweight.

00:29:28.467 --> 00:29:31.801
Um, it--it's well supported
across different platforms.

00:29:31.801 --> 00:29:34.767
Um, but here, again, I'm gonna
give you a bunch of options.

00:29:34.767 --> 00:29:38.100
Let's allow you to plug in any
streaming library that you want.

00:29:38.100 --> 00:29:40.100
Now why a streaming library?

00:29:40.100 --> 00:29:42.100
Why not just use JSON object?

00:29:42.100 --> 00:29:44.434
Android devices often have
very low memory,

00:29:44.434 --> 00:29:46.467
so what do we do about it?

00:29:46.467 --> 00:29:49.434
We can use JSON object.
That's part of the Android SDK.

00:29:49.434 --> 00:29:50.934
And that usually works.

00:29:50.934 --> 00:29:52.934
The problem is it loads
everything in memory.

00:29:52.934 --> 00:29:54.434
You want to avoid that.

00:29:54.434 --> 00:29:56.434
Suppose they get that,
um, activities list.

00:29:56.434 --> 00:29:58.434
Do you remember how I showed you
that response?

00:29:58.434 --> 00:30:01.267
I had to scroll many pages just
to find information I wanted.

00:30:01.267 --> 00:30:03.100
So that's gonna be a problem.

00:30:03.100 --> 00:30:05.100
You're likely to get
an "out of memory" error.

00:30:05.100 --> 00:30:06.601
Whoops.

00:30:06.601 --> 00:30:09.100
So the way you solve it
is using a streaming parser.

00:30:09.100 --> 00:30:11.100
Um, you're really getting
every little JSON bit,

00:30:11.100 --> 00:30:12.601
um, at a time.

00:30:12.601 --> 00:30:14.601
Get me the next field,
get me the value,

00:30:14.601 --> 00:30:17.100
get me the next object,
so it's a very low level.

00:30:17.100 --> 00:30:19.133
It's not that easy to use,

00:30:19.133 --> 00:30:21.601
but it's, by far, going
to get you the fastest...

00:30:21.601 --> 00:30:25.100
And given that this
is a best practices session,

00:30:25.100 --> 00:30:27.601
I want to make sure
you're doing the right thing,

00:30:27.601 --> 00:30:29.601
you're building
your applications the right way.

00:30:29.601 --> 00:30:31.100
It's your choice.

00:30:31.100 --> 00:30:33.100
Do you want ease of use
or, um, and very--

00:30:33.100 --> 00:30:35.100
being, you know,
very quick programming

00:30:35.100 --> 00:30:37.601
or do you need--you're running,
um, a very critical section

00:30:37.601 --> 00:30:40.701
of your application,
and you need that speed?

00:30:40.701 --> 00:30:43.200
So, um, regardless,
here are the choices you have

00:30:43.200 --> 00:30:44.868
for the JSON library.

00:30:44.868 --> 00:30:46.367
You could use Jackson.

00:30:46.367 --> 00:30:48.200
Based on our tests,

00:30:48.200 --> 00:30:51.133
that, we--we found to be
the fastest choice.

00:30:51.133 --> 00:30:53.634
Um, it's based on
the popular Jackson library.

00:30:53.634 --> 00:30:56.300
Um, another option is to use
Geggle--Google-Gson,

00:30:56.300 --> 00:30:59.400
which we found is pretty fast,
not quite as fast as Jackson,

00:30:59.400 --> 00:31:00.901
but--but pretty good,

00:31:00.901 --> 00:31:02.968
but it's a lot more
lighter weight.

00:31:02.968 --> 00:31:04.968
I think Jackson's somewhere
around 180 kilobytes.

00:31:04.968 --> 00:31:06.968
Gson is somewhere around 20?

00:31:06.968 --> 00:31:09.968
I don't remember exact numbers,
but that's roughly the scale.

00:31:09.968 --> 00:31:11.968
So if you're really counting
every byte,

00:31:11.968 --> 00:31:13.968
you might want
to choose Google-Gson.

00:31:13.968 --> 00:31:15.968
Um, if you're building
an Android application,

00:31:15.968 --> 00:31:17.968
that's probably an important
consideration for you,

00:31:17.968 --> 00:31:19.968
uh, a trade-off for you to make.
You choose.

00:31:19.968 --> 00:31:22.968
Uh, now, as I mentioned,
on Honeycomb,

00:31:22.968 --> 00:31:24.968
and starting
with Honeycomb devices,

00:31:24.968 --> 00:31:26.968
they actually have Google-Gson
built it.

00:31:26.968 --> 00:31:28.968
It's in
the android.util package.

00:31:28.968 --> 00:31:30.968
Um, and if you're writing
an application

00:31:30.968 --> 00:31:32.968
that targets Honeycomb anyway,

00:31:32.968 --> 00:31:34.968
you might as well use
the Android JSON Factory.

00:31:34.968 --> 00:31:37.467
You know, why not just use
something that's part of--

00:31:37.467 --> 00:31:38.968
built into the Android SDK?

00:31:38.968 --> 00:31:40.968
That's gonna be, uh, definitely
going to minimize your,

00:31:40.968 --> 00:31:42.968
um, the size
of your application.

00:31:42.968 --> 00:31:45.467
And of course, it's a part
of the Android SDK,

00:31:45.467 --> 00:31:47.467
it's probably gonna
get developed in the future,

00:31:47.467 --> 00:31:50.467
um, if, you know, if there's
any way to make it faster,

00:31:50.467 --> 00:31:51.968
they might do that.

00:31:51.968 --> 00:31:54.133
So let's talk about
the data model

00:31:54.133 --> 00:31:55.968
that's part of the library.

00:31:55.968 --> 00:31:57.968
Um, I talked about
the streaming parser.

00:31:57.968 --> 00:31:59.501
Let's talk about data models,

00:31:59.501 --> 00:32:01.534
and I'll come back
to the middle later.

00:32:01.534 --> 00:32:03.033
So this is a functionality

00:32:03.033 --> 00:32:05.033
that's very similar
to other libraries out there.

00:32:05.033 --> 00:32:08.033
I don't want to claim this is
the only library that does it.

00:32:08.033 --> 00:32:10.367
Jackson has a great, um, object
to JSON mapping,

00:32:10.367 --> 00:32:12.534
Google-Gson has one,
and now we do, too.

00:32:12.534 --> 00:32:15.033
Um, and the reason
we had to build our own

00:32:15.033 --> 00:32:17.534
is because we want it to work
not just with JSON,

00:32:17.534 --> 00:32:20.534
we want it to work with XML--
you could do the same thing.

00:32:20.534 --> 00:32:23.033
You want to have a data model
for URL query parameters,

00:32:23.033 --> 00:32:24.534
for request headers.

00:32:24.534 --> 00:32:26.534
You'll see this
across the library

00:32:26.534 --> 00:32:28.534
used in
a lot of different contexts.

00:32:28.534 --> 00:32:31.033
Well, now let's talk about how
it's used in--with JSON.

00:32:31.033 --> 00:32:33.067
So the idea is you have a Java
object, and you have the JSON.

00:32:33.067 --> 00:32:36.033
So you want to--every time you
see a Java field of type string,

00:32:36.033 --> 00:32:38.734
it maps to a JSON string value.

00:32:38.734 --> 00:32:41.734
Um, numbers,
booleans are supported.

00:32:41.734 --> 00:32:45.734
You could use enums to map--
to string values in JSON.

00:32:45.734 --> 00:32:47.734
You could use
arrays and collection

00:32:47.734 --> 00:32:49.734
that maps to JSON arrays.

00:32:49.734 --> 00:32:51.901
Um, you can use--if you've got
a JSON object

00:32:51.901 --> 00:32:54.534
that can either be mapping
to a Java object

00:32:54.534 --> 00:32:56.534
or a Java map.

00:32:56.534 --> 00:32:59.033
Um, we--you can use
the full reaches of Java

00:32:59.033 --> 00:33:00.534
with this library.

00:33:00.534 --> 00:33:02.601
Um, list of activities--
uh, generic types,

00:33:02.601 --> 00:33:04.100
pretty convenient.

00:33:04.100 --> 00:33:06.133
So I'll give you a handy tip.

00:33:06.133 --> 00:33:08.100
When you're getting
to, uh, more sophisticated usage

00:33:08.100 --> 00:33:10.601
of the library, sometimes
you only want a few fields,

00:33:10.601 --> 00:33:12.601
and you can only declare
those fields,

00:33:12.601 --> 00:33:14.601
and it'll basically ignore
everything else.

00:33:14.601 --> 00:33:16.601
So I showed you
that long example

00:33:16.601 --> 00:33:18.100
of a Buzz activities list.

00:33:18.100 --> 00:33:20.601
Well, I just want the content
of the--of the--of the object.

00:33:20.601 --> 00:33:22.601
Well, if you only declare
that one field,

00:33:22.601 --> 00:33:24.100
it'll basically drop
everything else,

00:33:24.100 --> 00:33:26.601
which will make it faster
and use memory more efficiently.

00:33:26.601 --> 00:33:28.601
But sometimes
you need to preserve,

00:33:28.601 --> 00:33:30.601
um, content that you don't need.

00:33:30.601 --> 00:33:33.100
And the reason for that is--
a good example for that

00:33:33.100 --> 00:33:35.100
is when you're using
the PUT method.

00:33:35.100 --> 00:33:37.601
So the idea is you get
a Buzz activity.

00:33:37.601 --> 00:33:39.634
You change one thing about it,

00:33:39.634 --> 00:33:41.601
and then you post it back--

00:33:41.601 --> 00:33:44.100
you put it back into
the, uh, Buzz activity post.

00:33:44.100 --> 00:33:46.601
Um, and the important thing is
if you drop the data

00:33:46.601 --> 00:33:48.601
that you don't recognize
or that you're not using,

00:33:48.601 --> 00:33:50.601
um, Buzz is going to think,

00:33:50.601 --> 00:33:52.601
"Oh, that means he wanted
to delete that data."

00:33:52.601 --> 00:33:54.100
Whoops. We can't do that.

00:33:54.100 --> 00:33:56.100
So you absolutely
have to preserve everything.

00:33:56.100 --> 00:33:58.100
Again, trade-offs--
with the PUT method,

00:33:58.100 --> 00:34:01.100
that means that you are keeping
a lot of stuff in memory

00:34:01.100 --> 00:34:03.667
or maybe in your database that
you didn't want to preserve.

00:34:03.667 --> 00:34:06.167
So those are the decisions
that you would want to make.

00:34:06.167 --> 00:34:09.167
Um, and by the way, if you're
using the generated libraries,

00:34:09.167 --> 00:34:11.667
we already provide
a full data model for you

00:34:11.667 --> 00:34:13.701
that extends,
uh, generic JSON.

00:34:13.701 --> 00:34:15.667
So oftentimes,
you won't have to write this,

00:34:15.667 --> 00:34:17.667
but if you're really optimizing
for efficiency,

00:34:17.667 --> 00:34:19.667
you may want to do
the extra work

00:34:19.667 --> 00:34:21.667
of writing your own data model

00:34:21.667 --> 00:34:24.167
or if you're working with
something that's not built

00:34:24.167 --> 00:34:27.300
on the new
Google API infrastructure.

00:34:27.300 --> 00:34:30.133
Okay, so here's an example
of JSON model.

00:34:30.133 --> 00:34:32.801
Um, I won't go
into a lot of details into it.

00:34:32.801 --> 00:34:34.801
It's hopefully
pretty self-explanatory.

00:34:34.801 --> 00:34:36.467
You've got an updated key,

00:34:36.467 --> 00:34:39.467
an I.D. key that maps
to update in I.D. fields.

00:34:39.467 --> 00:34:41.467
Um, DateTime is something

00:34:41.467 --> 00:34:43.467
that's part of the--
of the Java library.

00:34:43.467 --> 00:34:44.968
Um, it just represents dates.

00:34:44.968 --> 00:34:46.501
You've got
objects within objects.

00:34:46.501 --> 00:34:48.467
The key here is the "at key"
annotation.

00:34:48.467 --> 00:34:50.801
That's what tells,
uh, the library

00:34:50.801 --> 00:34:53.100
to preserve that in a JSON.

00:34:55.901 --> 00:34:58.901
So let's talk about how to make
your app more efficient,

00:34:58.901 --> 00:35:00.901
not just in terms
of application size,

00:35:00.901 --> 00:35:03.467
but let's talk about
the HTTP response size.

00:35:03.467 --> 00:35:05.801
So... [chuckles]
you already saw my example

00:35:05.801 --> 00:35:07.801
that was 7 kilobyte response.

00:35:07.801 --> 00:35:09.801
That's not a great choice.

00:35:09.801 --> 00:35:13.400
Again, Android devices, uh,
maybe the user is paying for--

00:35:13.400 --> 00:35:15.901
for the amount of data
that they're, um, getting.

00:35:15.901 --> 00:35:18.901
Um, but you want to make your--
your application responsive,

00:35:18.901 --> 00:35:21.400
so you want to make
the response size small.

00:35:21.400 --> 00:35:23.400
A full response, 7 kilobytes--

00:35:23.400 --> 00:35:24.901
when you're using Gzip,

00:35:24.901 --> 00:35:27.234
it'll be compressed down
to 1.3 kilobytes,

00:35:27.234 --> 00:35:29.234
so that's actually
already much better.

00:35:29.234 --> 00:35:31.234
Uh, I guess
that's seven times better.

00:35:31.234 --> 00:35:33.234
But, um, that's not good enough,

00:35:33.234 --> 00:35:35.234
because you're still getting
all of that content.

00:35:35.234 --> 00:35:37.234
I really only want
to get the content

00:35:37.234 --> 00:35:38.734
of the Buzz activity.

00:35:38.734 --> 00:35:40.734
So if I tell to use
just--to--

00:35:40.734 --> 00:35:43.067
a special partial response
syntax,

00:35:43.067 --> 00:35:45.067
it will just get that one field,

00:35:45.067 --> 00:35:47.067
and I'll show that
in the next slide.

00:35:47.067 --> 00:35:49.801
But you end up
with a 286-byte response.

00:35:49.801 --> 00:35:51.300
That's a lot better.

00:35:51.300 --> 00:35:53.534
So order of magnitude difference
just by using it.

00:35:53.534 --> 00:35:55.767
The library will automatically
Gzip things for you.

00:35:55.767 --> 00:35:57.801
Um, but, uh, the partial

00:35:57.801 --> 00:36:00.200
is something
you have to do yourself.

00:36:00.200 --> 00:36:02.267
So here's an example
of using partial.

00:36:02.267 --> 00:36:04.267
I took that one line of code

00:36:04.267 --> 00:36:06.767
that we had used
in many examples before,

00:36:06.767 --> 00:36:09.267
and all I did was add
a fields mask.

00:36:09.267 --> 00:36:13.234
So request.fields equals
items/objects/content.

00:36:13.234 --> 00:36:15.234
Pretty straightforward
in that simple case.

00:36:15.234 --> 00:36:17.234
You might have a more
sophisticated use case.

00:36:17.234 --> 00:36:19.734
Maybe you want also the updated
and the I.D. fields.

00:36:19.734 --> 00:36:21.734
Okay, um, use
a parenthesis syntax,

00:36:21.734 --> 00:36:23.234
comma separated.

00:36:23.234 --> 00:36:24.734
Uh, not too bad.

00:36:24.734 --> 00:36:26.767
It's something
you have to learn,

00:36:26.767 --> 00:36:28.734
um, and you'll only
want to use it

00:36:28.734 --> 00:36:30.734
when, you know,
you've got a critical section

00:36:30.734 --> 00:36:32.734
of your application
that's running slow,

00:36:32.734 --> 00:36:35.067
but it's a great tool to have.

00:36:35.067 --> 00:36:37.767
So I mentioned earlier,

00:36:37.767 --> 00:36:40.434
it's not a good idea
to load everything into memory.

00:36:40.434 --> 00:36:41.934
[chuckles]

00:36:41.934 --> 00:36:43.767
Um, and I broke that rule,

00:36:43.767 --> 00:36:45.767
because now I've got
this activities feed class.

00:36:45.767 --> 00:36:47.267
you remember, in my example.

00:36:47.267 --> 00:36:49.767
Uh, when I was using AsyncTask,
they returned activity feed,

00:36:49.767 --> 00:36:52.267
so, again, I'm making the same
mistake I told you earlier--

00:36:52.267 --> 00:36:54.267
don't load everything
into memory.

00:36:54.267 --> 00:36:56.467
That's--so that's generally,
uh, a problem.

00:36:56.467 --> 00:36:59.434
So how do we find,
uh, a middle ground

00:36:59.434 --> 00:37:02.968
between using a stream parser
and using a full model?

00:37:02.968 --> 00:37:04.467
So you'll notice here

00:37:04.467 --> 00:37:06.467
the one thing
I changed at the top

00:37:06.467 --> 00:37:07.968
is I'm using execute unparsed.

00:37:07.968 --> 00:37:09.968
So that's gonna return
HTTP response.

00:37:09.968 --> 00:37:12.968
and I can just do "get content."
It gives me an input stream.

00:37:12.968 --> 00:37:16.634
I parse it using a J--
the JSON stream parser.

00:37:16.634 --> 00:37:18.968
I go to data, I go to items,

00:37:18.968 --> 00:37:20.968
and then I parse each object
separately.

00:37:20.968 --> 00:37:23.634
And I'm doing this--I'm--
I'm parsing the activity class,

00:37:23.634 --> 00:37:26.634
so I'm still doing a full
representation of an activity,

00:37:26.634 --> 00:37:28.634
but it's a much smaller
representation.

00:37:28.634 --> 00:37:31.634
And what I forgot to add in here
is the partial fields mask

00:37:31.634 --> 00:37:33.634
to make it
that much more efficient.

00:37:33.634 --> 00:37:35.133
All right.

00:37:35.133 --> 00:37:37.133
So this is maybe
the best compromise.

00:37:37.133 --> 00:37:39.133
Um, if you've got
a critical section,

00:37:39.133 --> 00:37:41.634
you want to stream,
um, at the level of entries,

00:37:41.634 --> 00:37:44.834
so for each Buzz activity,
parse that one.

00:37:44.834 --> 00:37:46.834
So let's jump real quick
to XML.

00:37:46.834 --> 00:37:50.467
Now XML is a--is a bit more work
for two reasons.

00:37:50.467 --> 00:37:52.467
Um, one is XML namespaces,

00:37:52.467 --> 00:37:54.801
uh, and that makes it
more work than JSON.

00:37:54.801 --> 00:37:57.133
And the second is we don't
actually provide you

00:37:57.133 --> 00:38:00.133
with a data model for, um,
Google APIs built in XML.

00:38:00.133 --> 00:38:03.200
So, um, I won't go through
all the details,

00:38:03.200 --> 00:38:06.067
but you'll see
the gCal namespace

00:38:06.067 --> 00:38:08.067
is in there.

00:38:08.067 --> 00:38:11.067
Um, so we have to specify
in the "at key" annotation

00:38:11.067 --> 00:38:14.434
this is the XML name
that I want to use.

00:38:14.434 --> 00:38:17.534
And another trick here
is the "at type."

00:38:17.534 --> 00:38:19.033
That stands for an attribute

00:38:19.033 --> 00:38:21.033
that, if you're familiar
with XPath,

00:38:21.033 --> 00:38:23.033
you should be very familiar
with this syntax.

00:38:23.033 --> 00:38:26.067
And if you--you want
the text content of an XML,

00:38:26.067 --> 00:38:30.067
that's text, uh, with open
and closed parenthesis.

00:38:30.067 --> 00:38:32.067
So some tips.

00:38:32.067 --> 00:38:34.067
Don't forget
the XML namespace dictionary.

00:38:34.067 --> 00:38:36.567
Um, you have to declare
the namespace in advance,

00:38:36.567 --> 00:38:38.567
and why this is important
is because,

00:38:38.567 --> 00:38:43.133
um, if you are serializing
an XML object--

00:38:43.133 --> 00:38:45.133
a-a-a Java object
into XML,

00:38:45.133 --> 00:38:47.667
you need to know
what the XML namespaces are.

00:38:47.667 --> 00:38:50.667
There's that
XMLNS declaration at the top.

00:38:50.667 --> 00:38:53.167
So you have to specify them
in advance,

00:38:53.167 --> 00:38:56.167
and the library will warn you
if you're not doing that.

00:38:56.167 --> 00:38:58.167
Um, you just need to look up

00:38:58.167 --> 00:39:00.167
the XML namespace,
uh, uh, declarations.

00:39:00.167 --> 00:39:02.234
So how do you get a feed?

00:39:02.234 --> 00:39:04.234
So, uh, we provide utility
in the library

00:39:04.234 --> 00:39:05.734
that, given a Java object,

00:39:05.734 --> 00:39:08.234
will give you that
partial fields mask,

00:39:08.234 --> 00:39:10.734
and that works right now
only with the XML.

00:39:10.734 --> 00:39:12.734
So you call
GoogleAtom.getfieldsfour.

00:39:12.734 --> 00:39:14.734
You give it the feed class,

00:39:14.734 --> 00:39:16.734
and it'll just compute it
for you.

00:39:16.734 --> 00:39:18.734
Um, you can
also specify yourself.

00:39:18.734 --> 00:39:20.234
Sometimes
it doesn't work correctly.

00:39:20.234 --> 00:39:22.734
Um, it tries to guess exactly
what your intent was.

00:39:22.734 --> 00:39:25.234
If that doesn't work for you,
specify a string directly--

00:39:25.234 --> 00:39:27.033
no problem.

00:39:27.033 --> 00:39:30.033
I don't want to go
into too many more details.

00:39:30.033 --> 00:39:32.601
So what about media?
I get a lot of questions.

00:39:32.601 --> 00:39:34.601
"How do I upload, uh, a video?"

00:39:34.601 --> 00:39:37.100
"I took a picture.
I want to send it to Picasa.

00:39:37.100 --> 00:39:38.601
How do you do that?"

00:39:38.601 --> 00:39:40.601
Or I--maybe I want to download
a picture.

00:39:40.601 --> 00:39:43.234
So you can use
httprequest.getcontent.

00:39:43.234 --> 00:39:44.734
I used that earlier.

00:39:44.734 --> 00:39:47.400
That gives you an input string--
pretty straightforward.

00:39:47.400 --> 00:39:50.467
Um, and the content type
is the media type.

00:39:50.467 --> 00:39:52.467
So how do you upload media?

00:39:52.467 --> 00:39:55.934
Well, use input stream content.
That's part of the library also.

00:39:55.934 --> 00:39:57.934
Let me show you an example.

00:39:57.934 --> 00:39:59.434
It's a little complicated,

00:39:59.434 --> 00:40:01.934
and you don't have to understand
all the details,

00:40:01.934 --> 00:40:04.434
but, um...

00:40:04.434 --> 00:40:07.434
So in this case, um, if you
take a picture with Android,

00:40:07.434 --> 00:40:09.434
it starts an intent to say,

00:40:09.434 --> 00:40:11.434
"Okay, I want to upload
this picture.

00:40:11.434 --> 00:40:12.934
Who can handle this?"

00:40:12.934 --> 00:40:14.934
And your activity says,
"I can handle it."

00:40:14.934 --> 00:40:16.934
Um, so the user
picks your activity.

00:40:16.934 --> 00:40:18.934
And then it goes
to the uncreate method.

00:40:18.934 --> 00:40:20.467
You get the intent,

00:40:20.467 --> 00:40:23.434
and I'm not gonna go
into too many details here,

00:40:23.434 --> 00:40:26.100
but the intent has information

00:40:26.100 --> 00:40:28.200
about the URI

00:40:28.200 --> 00:40:30.701
for where to download that--
that media from.

00:40:30.701 --> 00:40:32.200
From that URI,

00:40:32.200 --> 00:40:36.334
we can get a, um,
we can get the content,

00:40:36.334 --> 00:40:38.033
the input stream.

00:40:38.033 --> 00:40:41.701
We can get the type,
the media type here.

00:40:41.701 --> 00:40:44.467
Uh, it's image/jpeg or a video.

00:40:44.467 --> 00:40:46.968
And we can get the size
of the content.

00:40:46.968 --> 00:40:48.968
So all these pieces
of information,

00:40:48.968 --> 00:40:52.834
you put that together,
you send it to the Picasa API.

00:40:52.834 --> 00:40:54.834
You set
the appropriate headers.

00:40:54.834 --> 00:40:56.834
There's a slug header
in there also.

00:40:56.834 --> 00:40:58.334
And you execute the request.

00:40:58.334 --> 00:41:00.834
So you have an example
how to do it.

00:41:00.834 --> 00:41:03.901
Um, it turns out that there's
one problem with that, though--

00:41:03.901 --> 00:41:06.400
because we're posting a huge
media file potentially,

00:41:06.400 --> 00:41:08.400
um, this might take a long time.

00:41:08.400 --> 00:41:10.400
And there's a protocol called
"resumable upload,"

00:41:10.400 --> 00:41:12.400
which I don't have time
to go into here,

00:41:12.400 --> 00:41:14.901
but that's something you're
going to want to look into.

00:41:14.901 --> 00:41:16.901
That's also supported
by the library,

00:41:16.901 --> 00:41:18.901
uh, though not as well
as we--we hoped yet.

00:41:18.901 --> 00:41:20.901
Okay, so now from the part

00:41:20.901 --> 00:41:23.834
that is maybe the most exciting
of this library...

00:41:23.834 --> 00:41:25.334
[chuckles]

00:41:25.334 --> 00:41:27.667
and, uh, not quite
completely figured out yet.

00:41:27.667 --> 00:41:29.634
So...

00:41:29.634 --> 00:41:31.868
the most important thing
you need to know

00:41:31.868 --> 00:41:34.133
about authentication on Android
is the AccountManager.

00:41:34.133 --> 00:41:35.634
User accounts
are centrally controlled.

00:41:35.634 --> 00:41:38.300
You don't want to come up
with your own flow.

00:41:38.300 --> 00:41:40.300
I've come up
with a bunch of them myself,

00:41:40.300 --> 00:41:42.968
and the Android team told me,
"Don't do that. It's bad.

00:41:42.968 --> 00:41:44.968
Don't tell people to do that."

00:41:44.968 --> 00:41:47.634
You have to make sure you're
always using AccountManager.

00:41:47.634 --> 00:41:50.367
Um, um, um, nice thing
about accounts

00:41:50.367 --> 00:41:51.868
is they can be synchronized.

00:41:51.868 --> 00:41:53.367
Your GMAIL is downloaded,

00:41:53.367 --> 00:41:55.367
sort of happening
in the background.

00:41:55.367 --> 00:41:58.367
A lot of cool things you can do
with the AccountManager.

00:41:58.367 --> 00:42:00.734
So what is the AccountManager
really? It's an abstraction.

00:42:00.734 --> 00:42:02.767
Uh, it has this concept
of an account

00:42:02.767 --> 00:42:04.601
and a-a concept of auth token,

00:42:04.601 --> 00:42:06.601
but it doesn't really specify
which account that is.

00:42:06.601 --> 00:42:08.434
It doesn't work--it works
with Google accounts,

00:42:08.434 --> 00:42:10.934
but it'll work with
other kinds of accounts as well.

00:42:10.934 --> 00:42:12.934
So the key two things
you need to know--

00:42:12.934 --> 00:42:15.767
what is the account type,
and what is the auth token type?

00:42:15.767 --> 00:42:17.267
With Google accounts,

00:42:17.267 --> 00:42:19.267
the account type
is always com.google,

00:42:19.267 --> 00:42:20.767
so that's simple.

00:42:20.767 --> 00:42:22.767
The auth token type
depends on

00:42:22.767 --> 00:42:24.767
which authentication mechanism
you're using

00:42:24.767 --> 00:42:26.767
and which API you're talking to.

00:42:26.767 --> 00:42:28.767
And there's a little useful
utility in the library

00:42:28.767 --> 00:42:30.767
called Google AccountManager.

00:42:30.767 --> 00:42:33.467
All it is is pretty much
the same as an AccountManager

00:42:33.467 --> 00:42:37.000
except it knows what
the account type is already.

00:42:37.000 --> 00:42:39.000
So ClientLogin--

00:42:39.000 --> 00:42:40.501
that's username, password.

00:42:40.501 --> 00:42:42.501
It works great
with Google Data APIs,

00:42:42.501 --> 00:42:46.033
and, as of right now,
that's the best, um, you have

00:42:46.033 --> 00:42:48.367
when you're working
with Google Data APIs.

00:42:48.367 --> 00:42:50.367
Biggest problem
with the ClientLogin

00:42:50.367 --> 00:42:52.367
for you as a user--
as--as a developer

00:42:52.367 --> 00:42:55.367
is it's not supported by the new
Google APIs that are coming out.

00:42:55.367 --> 00:42:56.868
Buzz, Latitude--

00:42:56.868 --> 00:42:58.868
they're not gonna accept
a ClientLogin token.

00:42:58.868 --> 00:43:01.267
Um, but it works great
with YouTube,

00:43:01.267 --> 00:43:02.934
Calendar, Blogger.

00:43:02.934 --> 00:43:05.434
That's what I'd recommend to use
for them.

00:43:05.434 --> 00:43:07.434
Uh, you request permission
from the user.

00:43:07.434 --> 00:43:09.434
That's done
by the operating system.

00:43:09.434 --> 00:43:11.934
We don't want to see anyone
writing an Android application

00:43:11.934 --> 00:43:13.934
that asks the user
for their password.

00:43:13.934 --> 00:43:15.434
That's really bad.

00:43:15.434 --> 00:43:17.434
Um, who is gonna trust
an application

00:43:17.434 --> 00:43:18.934
to give them their password?

00:43:18.934 --> 00:43:21.434
So the auth token type
is also called a service name.

00:43:21.434 --> 00:43:23.434
If you ever look in
the ClientLogin documentation,

00:43:23.434 --> 00:43:25.434
uh, for Google Calendar,
it's called C.L.

00:43:25.434 --> 00:43:28.434
Here's an example of what
the user interface looks like.

00:43:28.434 --> 00:43:31.968
Um, it says, "Do you want to
give your Google Calendar

00:43:31.968 --> 00:43:33.467
access to this application?"

00:43:33.467 --> 00:43:35.467
In this case,
it's the calendar sample.

00:43:35.467 --> 00:43:37.701
Hopefully, they click "allow."

00:43:37.701 --> 00:43:39.701
So here's what it looks like.

00:43:39.701 --> 00:43:41.701
Um, this slide
is pretty much the same

00:43:41.701 --> 00:43:43.200
as--as the previous slides.

00:43:43.200 --> 00:43:45.701
I have to send
a request, um, intializer

00:43:45.701 --> 00:43:47.200
that sets the GData version.

00:43:47.200 --> 00:43:49.033
The one thing
that's new here is

00:43:49.033 --> 00:43:51.033
I'm calling it headers
that set googlelogin.

00:43:51.033 --> 00:43:54.300
So the auth token that you got
from the AccountManager,

00:43:54.300 --> 00:43:58.434
that's the one you pass
into the header.

00:43:58.434 --> 00:44:02.000
I'm using Google AccountManager
class.

00:44:02.000 --> 00:44:05.834
I am preserving the auth token
and the account name

00:44:05.834 --> 00:44:07.667
in the shared preferences.

00:44:07.667 --> 00:44:10.167
That's for convenience.
You don't have to do that.

00:44:10.167 --> 00:44:12.167
Um, but it tends to make

00:44:12.167 --> 00:44:14.167
for a-a-a more friendly
user interface flow.

00:44:14.167 --> 00:44:17.200
Um, I figured if I have
the account by that name,

00:44:17.200 --> 00:44:20.200
if there is one, I can just
go ahead and load the calendar,

00:44:20.200 --> 00:44:22.701
and that's gonna use a AsyncTask
like I've shown you before.

00:44:22.701 --> 00:44:24.701
Um, but if there isn't one,

00:44:24.701 --> 00:44:26.701
you call
the Choose Accounts method.

00:44:26.701 --> 00:44:28.200
So let's see that one.

00:44:28.200 --> 00:44:30.868
Choose Account method uses
my favorite, uh, method

00:44:30.868 --> 00:44:32.868
from the AccountManager class.

00:44:32.868 --> 00:44:35.868
Get auth token by features.
Now why do I like it so much?

00:44:35.868 --> 00:44:38.367
It takes care of a lot of stuff
for you.

00:44:38.367 --> 00:44:40.868
If there's no accounts set up,
it'll go through the setup--

00:44:40.868 --> 00:44:43.367
a good Google account,
uh, setup floor--flow for you.

00:44:43.367 --> 00:44:44.868
Great.

00:44:44.868 --> 00:44:46.868
If there is an account
set up already,

00:44:46.868 --> 00:44:48.868
or if you--they want
through the flow,

00:44:48.868 --> 00:44:50.868
it's gonna put up
that permission dialogue

00:44:50.868 --> 00:44:52.868
and hopefully the user
clicks "allow,"

00:44:52.868 --> 00:44:54.868
and it will get the auth token
for you.

00:44:54.868 --> 00:44:56.868
So all you have to do
as a developer

00:44:56.868 --> 00:44:58.868
is implement this
AccountManager feature.

00:44:58.868 --> 00:45:00.934
I get the account name
and the auth token,

00:45:00.934 --> 00:45:02.434
and I load my calendars.

00:45:02.434 --> 00:45:04.100
If there are
multiple accounts set up

00:45:04.100 --> 00:45:05.601
on the--on the device,

00:45:05.601 --> 00:45:07.601
that method will
only take care of, um,

00:45:07.601 --> 00:45:09.601
putting up a dialogue box
that says, okay,

00:45:09.601 --> 00:45:11.434
which account
do you want to use?

00:45:11.434 --> 00:45:13.267
So very convenient.

00:45:13.267 --> 00:45:15.434
Now let's talk about OAuth 2.0.

00:45:15.434 --> 00:45:17.767
And I'll warn you
that not everything here

00:45:17.767 --> 00:45:19.934
is as pretty
as ClientLogin was

00:45:19.934 --> 00:45:21.601
from a developer's
point of view.

00:45:21.601 --> 00:45:23.767
But why do we love it
as an authentication mechanism?

00:45:23.767 --> 00:45:26.267
It gives the user
a lot more control

00:45:26.267 --> 00:45:28.767
over the amount of data
that they give the application.

00:45:28.767 --> 00:45:30.934
Um, so one nice thing
about OAuth

00:45:30.934 --> 00:45:33.934
is it allows it
to specify a scope of access.

00:45:33.934 --> 00:45:36.934
Do I want to give
full read/write access to Buzz--

00:45:36.934 --> 00:45:39.434
um, to Buzz, or do I want
to give just read only?

00:45:39.434 --> 00:45:41.434
Do I want to give access
only to the photos?

00:45:41.434 --> 00:45:44.767
Um, so scopes are
very convenient that way.

00:45:44.767 --> 00:45:47.267
Maybe a user's more likely
to use your application

00:45:47.267 --> 00:45:50.267
if the permissions
that they have to grant you

00:45:50.267 --> 00:45:52.100
are not as, um, scary.

00:45:52.100 --> 00:45:54.434
Another thing to know
about auth tokens

00:45:54.434 --> 00:45:55.934
is they are temporary.

00:45:55.934 --> 00:45:58.267
Um, you don't want to be sharing

00:45:58.267 --> 00:46:00.601
your auth tokens, uh,
wile--widely.

00:46:00.601 --> 00:46:03.667
and OAuth takes care
of making sure

00:46:03.667 --> 00:46:05.167
that those tokens expire.

00:46:05.167 --> 00:46:07.167
So an hour later, they won't
work. Users would love this,

00:46:07.167 --> 00:46:09.167
because of the security
implications of this.

00:46:09.167 --> 00:46:11.834
As a developer, that makes
your life more difficult,

00:46:11.834 --> 00:46:13.834
because you have to handle
an expired token.

00:46:13.834 --> 00:46:16.501
So how do we do that?

00:46:16.501 --> 00:46:18.501
And another important thing--

00:46:18.501 --> 00:46:20.667
oh, you check
for 401 error response.

00:46:20.667 --> 00:46:22.501
And another important
consideration--

00:46:22.501 --> 00:46:24.334
how do we get the auth token
for OAuth 2?

00:46:24.334 --> 00:46:26.167
There's nothing
in the documentation.

00:46:26.167 --> 00:46:28.834
So what I'm gonna show you
is not documented yet.

00:46:28.834 --> 00:46:31.000
This is hot off the press

00:46:31.000 --> 00:46:33.000
and not ideal yet.

00:46:33.000 --> 00:46:35.000
And the reason we haven't
documented it yet

00:46:35.000 --> 00:46:37.000
is because it doesn't work
quite as well

00:46:37.000 --> 00:46:38.667
as we'd like it to.

00:46:38.667 --> 00:46:40.334
Uh, but I want to show you

00:46:40.334 --> 00:46:42.167
long-term this is what you
need to be doing.

00:46:42.167 --> 00:46:45.334
Use a special auth token type,
"oauth2:scope."

00:46:45.334 --> 00:46:48.167
Sounds simple, right?
It works just like ClientLogin.

00:46:48.167 --> 00:46:51.334
The only thing that changed
is the auth token type.

00:46:51.334 --> 00:46:53.501
Um, we're gonna improve
on this story later,

00:46:53.501 --> 00:46:55.334
but here's how it works
right now.

00:46:55.334 --> 00:46:58.167
So the user interface says,
do you want to grant permission

00:46:58.167 --> 00:47:00.200
to this application

00:47:00.200 --> 00:47:03.567
called "oauth2:" et cetera.

00:47:03.567 --> 00:47:06.067
Not the ideal user experience,

00:47:06.067 --> 00:47:08.400
so how do we solve that?

00:47:08.400 --> 00:47:12.234
Well, we don't have
a great solution yet.

00:47:12.234 --> 00:47:15.901
For Google Buzz you can use
a special alias "Google Buzz."

00:47:15.901 --> 00:47:17.901
Then it will actually show
Google Buzz

00:47:17.901 --> 00:47:19.901
in the permission dialogue.
So that's great for Google Buzz.

00:47:19.901 --> 00:47:21.567
It gives you read/write access.

00:47:21.567 --> 00:47:23.567
What happens if you want to use
a different API?

00:47:23.567 --> 00:47:26.567
Well, we're gonna try to set up
more aliases for you.

00:47:26.567 --> 00:47:28.400
That's our quick
and dirty solution.

00:47:28.400 --> 00:47:30.734
We'll come up with a better
long-term solution later.

00:47:30.734 --> 00:47:32.734
Um, there's another
problem here.

00:47:32.734 --> 00:47:34.567
This OAuth 2 flow

00:47:34.567 --> 00:47:36.901
gives you anonymous,
unregistered quota,

00:47:36.901 --> 00:47:38.567
which for a lot of the new APIs

00:47:38.567 --> 00:47:40.901
and basically
the new infrastructure,

00:47:40.901 --> 00:47:44.234
that pretty much gives you
nearly zero quota.

00:47:44.234 --> 00:47:46.234
It's very small.
I tried it this morning.

00:47:46.234 --> 00:47:48.234
I got about ten requests
out of Buzz

00:47:48.234 --> 00:47:50.133
before it gave me a 403 error.

00:47:50.133 --> 00:47:51.968
"You've made
too many requests today."

00:47:51.968 --> 00:47:53.467
Okay, that doesn't work.

00:47:53.467 --> 00:47:55.133
So how do you get around this?

00:47:55.133 --> 00:47:57.968
Well, remember earlier
I showed you the API's console?

00:47:57.968 --> 00:47:59.801
That's why it was so important

00:47:59.801 --> 00:48:01.868
that I showed you
that--that--that console

00:48:01.868 --> 00:48:04.534
is because you can go
to the API access tab

00:48:04.534 --> 00:48:06.200
and get an access key.

00:48:06.200 --> 00:48:09.200
That gives you
a very large registered quota.

00:48:09.200 --> 00:48:11.534
I think it's about a million
queries per day.

00:48:11.534 --> 00:48:13.367
That's definitely something
you can work with

00:48:13.367 --> 00:48:15.200
in the bounds of for Buzz.

00:48:15.200 --> 00:48:18.667
And for each API it's gonna be
a different story.

00:48:18.667 --> 00:48:21.667
So you should be able to use it.

00:48:21.667 --> 00:48:24.000
I won't have time
to go through all this code,

00:48:24.000 --> 00:48:25.834
but a lot of things
are very similar.

00:48:25.834 --> 00:48:27.834
The number one thing I want
to highlight on this slide

00:48:27.834 --> 00:48:29.834
is "Buzz at access key equals."

00:48:29.834 --> 00:48:32.000
That's what you got
from the API console.

00:48:32.000 --> 00:48:33.501
This is a fake one.

00:48:33.501 --> 00:48:35.334
And the second thing
you need to know

00:48:35.334 --> 00:48:37.167
is you've got another case here.

00:48:37.167 --> 00:48:40.033
What happens if you've got
an account but no auth token?

00:48:40.033 --> 00:48:41.667
This will likely happen

00:48:41.667 --> 00:48:43.901
if your auth token expired.

00:48:43.901 --> 00:48:46.067
So here's another slide
that shows you

00:48:46.067 --> 00:48:47.901
how to deal with that.

00:48:47.901 --> 00:48:51.067
I checked for a 401 error code.
I invalidate the auth token.

00:48:51.067 --> 00:48:53.067
That means telling
the AccountManager

00:48:53.067 --> 00:48:56.067
the auth token no longer works.
I need a new one.

00:48:56.067 --> 00:48:58.734
And you preserve the fact

00:48:58.734 --> 00:49:00.734
that you no longer have
an auth token.

00:49:00.734 --> 00:49:03.133
and you call
getAuthToken for an account.

00:49:03.133 --> 00:49:06.200
You're using
the getAuthToken method

00:49:06.200 --> 00:49:08.033
from the AccountManager.

00:49:08.033 --> 00:49:10.534
It will give you back
an auth token,

00:49:10.534 --> 00:49:12.534
or it will give you
and intent to display

00:49:12.534 --> 00:49:14.534
the user permission dialogue.

00:49:14.534 --> 00:49:16.367
I'm sorry I don't have to go--

00:49:16.367 --> 00:49:18.367
the time to go
through it slowly.

00:49:18.367 --> 00:49:20.701
And you call onActivityResult.

00:49:20.701 --> 00:49:23.033
You get that token from the--

00:49:23.033 --> 00:49:25.300
for the account you have to go
there flow again.

00:49:25.300 --> 00:49:27.300
So let me just quickly summarize

00:49:27.300 --> 00:49:28.968
what we've talked about.

00:49:28.968 --> 00:49:32.300
Um, the new Google API's
client library for Java--

00:49:32.300 --> 00:49:34.968
it supports a variety
of platforms.

00:49:34.968 --> 00:49:36.801
It supports a variety of APIs.

00:49:36.801 --> 00:49:39.133
It supports a variety
of data formats,

00:49:39.133 --> 00:49:43.133
um, and a variety
of auth mechanisms.

00:49:43.133 --> 00:49:45.467
So in conclusion,
I'm excited to have you

00:49:45.467 --> 00:49:48.467
go play with your devices,
build applications.

00:49:48.467 --> 00:49:50.801
Try it out.
Give us feedback.

00:49:50.801 --> 00:49:52.467
We're now in beta.

00:49:52.467 --> 00:49:54.634
Um, we have a developer's guide

00:49:54.634 --> 00:49:56.634
that's custom-designed
for Android,

00:49:56.634 --> 00:49:58.634
and if you have any questions
or comments,

00:49:58.634 --> 00:50:00.634
there's a support page

00:50:00.634 --> 00:50:02.634
that links to where
you can give us feedback.

00:50:02.634 --> 00:50:05.300
And for this particular session,

00:50:05.300 --> 00:50:07.300
um, if you want
to give us feedback,

00:50:07.300 --> 00:50:09.300
then there's--
there's a link down there,

00:50:09.300 --> 00:50:11.300
and there's some
Twitter hashtags to use.

00:50:11.300 --> 00:50:15.133
So that's it, and I'd like
to hear you questions.

00:50:15.133 --> 00:50:18.067
[applause]

00:50:22.000 --> 00:50:24.000
So we've got
two microphones there.

00:50:24.000 --> 00:50:26.834
If there are any live questions,
please come up and--and ask.

00:50:26.834 --> 00:50:30.167
And I-I appreciate all of you
staying up here so late,

00:50:30.167 --> 00:50:33.334
knowing that lunch is, uh,
competing with the session.

00:50:33.334 --> 00:50:36.167
So...

00:50:36.167 --> 00:50:39.000
[man speaking indistinctly]

00:50:39.000 --> 00:50:40.834
man: So you're talking about
using AccountManager,

00:50:40.834 --> 00:50:44.167
but that's only available
with, uh, Android 2.1 and on?

00:50:44.167 --> 00:50:46.000
Is that correct?
Inbar: Yes.

00:50:46.000 --> 00:50:47.434
man: So what do you do
with devices that are

00:50:47.434 --> 00:50:49.434
still running 1.5 and 1.6?

00:50:49.434 --> 00:50:51.601
Inbar: Good question.
Um, so the question is--

00:50:51.601 --> 00:50:53.601
the AccountManager only works

00:50:53.601 --> 00:50:57.434
on Android SDK 2.0 or 2.1
or higher.

00:50:57.434 --> 00:51:00.267
What about older SDKs--

00:51:00.267 --> 00:51:02.667
um, 1.5, that nice G1 phone?

00:51:02.667 --> 00:51:04.334
Um, unfortunately,

00:51:04.334 --> 00:51:06.167
there is no
AccountManager there.

00:51:06.167 --> 00:51:09.000
It represents a very small
percentage of the user base.

00:51:09.000 --> 00:51:10.667
There's actually a great,
you know--

00:51:10.667 --> 00:51:13.334
a page on the Android--
on the Android, uh, page

00:51:13.334 --> 00:51:15.667
that says what percent of users
are actually on that SDK.

00:51:15.667 --> 00:51:18.000
So the one good news
about the story

00:51:18.000 --> 00:51:20.501
is long-term this will
work itself out.

00:51:20.501 --> 00:51:22.501
Um, but unfortunately, I don't
have a good answer for--

00:51:22.501 --> 00:51:26.167
for those earlier SDKs.
Good question.

00:51:26.167 --> 00:51:28.834
man: There's a lot of good, uh,
code on the slides.

00:51:28.834 --> 00:51:30.834
Are they gonna be
available anywhere?

00:51:30.834 --> 00:51:32.667
Inbar: I'm sorry.
Repeat your question.

00:51:32.667 --> 00:51:34.501
man: There's a lot of good code
on the slides.

00:51:34.501 --> 00:51:36.667
Are they gonna be
available somewhere?

00:51:36.667 --> 00:51:39.000
Inbar: Yes, absolutely.
I'll make sure that the PDF

00:51:39.000 --> 00:51:41.000
of this, uh, presentation
will be available.

00:51:41.000 --> 00:51:43.000
I know there's a lot
of content there.

00:51:43.000 --> 00:51:44.834
I don't expect you
to memorize it all.

00:51:44.834 --> 00:51:46.501
I just want to make sure

00:51:46.501 --> 00:51:48.334
it's available to you
when you need it.

00:51:48.334 --> 00:51:50.167
Furthermore, we'll be
providing samples.

00:51:50.167 --> 00:51:52.167
We haven't yet published them,
but we will be providing samples

00:51:52.167 --> 00:51:54.167
for Android for different APIs
that you can play with.

00:51:54.167 --> 00:51:56.667
man: Where should we look to
find the PDF that you publish?

00:51:56.667 --> 00:51:58.501
Inbar: Um, good question.

00:51:58.501 --> 00:52:01.400
I believe it's on, uh...

00:52:01.400 --> 00:52:03.234
When you go
to the Google I/O page,

00:52:03.234 --> 00:52:05.067
you'll find it there.
I'm not sure.

00:52:05.067 --> 00:52:07.067
[man speaking indistinctly]

00:52:07.067 --> 00:52:09.067
Inbar: And the presentations
are going on YouTube.

00:52:09.067 --> 00:52:12.067
So if you...
[woman speaking indistinctly]

00:52:12.067 --> 00:52:14.067
She says they might be
there tomorrow.

00:52:14.067 --> 00:52:16.400
I'm not sure,
but it should be pretty quick.

00:52:16.400 --> 00:52:19.234
man: So I have a question
for OAuth 2.

00:52:19.234 --> 00:52:21.734
Um, you say the OAuth 2
is not really ready?

00:52:21.734 --> 00:52:24.901
So as developers,
should we just wait

00:52:24.901 --> 00:52:27.234
until it's pretty mature?

00:52:27.234 --> 00:52:28.901
Inbar: Okay, excellent question.

00:52:28.901 --> 00:52:31.067
Is OAuth 2 ready
for developers to use?

00:52:31.067 --> 00:52:33.400
Um, OAuth 2 in general
is absolutely ready.

00:52:33.400 --> 00:52:35.067
We highly recommend, um,

00:52:35.067 --> 00:52:37.734
in general,
that developers use it.

00:52:37.734 --> 00:52:39.234
The problem is

00:52:39.234 --> 00:52:41.567
the OAuth 2 flow in Android
is a problem.

00:52:41.567 --> 00:52:44.234
Um, the full story
is not yet figured out.

00:52:44.234 --> 00:52:46.234
But what I showed you works.

00:52:46.234 --> 00:52:48.067
It's not ideal.

00:52:48.067 --> 00:52:50.067
Um, I just wanted to--so--

00:52:50.067 --> 00:52:53.234
to let you know what the state
of things are right now.

00:52:53.234 --> 00:52:55.234
I don't know what
the right answer for you--

00:52:55.234 --> 00:52:57.234
when I talk to some people
on the Android team,

00:52:57.234 --> 00:52:59.067
they're working
on different ideas

00:52:59.067 --> 00:53:01.133
of how to simplify this flow
and how to make it, um,

00:53:01.133 --> 00:53:03.133
a better experience.

00:53:03.133 --> 00:53:05.133
Um, I don't know what's coming
in the future,

00:53:05.133 --> 00:53:06.968
But I do--
definitely can show you--

00:53:06.968 --> 00:53:08.968
This will work, and now it's
the only good option we have

00:53:08.968 --> 00:53:11.968
for working with Google Buzz
or any of the new APIs.

00:53:11.968 --> 00:53:14.300
man: Okay, so--
so for Honeycomb development,

00:53:14.300 --> 00:53:17.300
I think I just leave it
to OAuth for now, right,

00:53:17.300 --> 00:53:18.968
not the OAuth 2?

00:53:18.968 --> 00:53:22.300
Inbar: Um, well,
it is actually OAuth.

00:53:22.300 --> 00:53:24.300
I didn't mention this,
but it works pretty much

00:53:24.300 --> 00:53:25.968
the same way as OAuth 2.

00:53:25.968 --> 00:53:27.801
The only difference
is you do "oauth:"

00:53:27.801 --> 00:53:29.133
instead of "oauth2:,"

00:53:29.133 --> 00:53:31.133
but again, it has
the same exact limitations.

00:53:31.133 --> 00:53:32.801
Um, it will work.

00:53:32.801 --> 00:53:34.801
Um, I'm--I'm eager to get
your feedback

00:53:34.801 --> 00:53:38.300
on your experience with it.
man: Thank you.

00:53:38.300 --> 00:53:41.634
woman: I have a question
about sort of best practices

00:53:41.634 --> 00:53:44.467
for testing with this stuff.

00:53:44.467 --> 00:53:47.300
Um, I'm thinking use devices

00:53:47.300 --> 00:53:50.467
with smaller amounts of memory
so you find the memory issues

00:53:50.467 --> 00:53:52.801
and use a broad variety
of devices.

00:53:52.801 --> 00:53:54.634
Would that be your take on this?

00:53:54.634 --> 00:53:56.634
Inbar: That's a great answer.
So the question is, um,

00:53:56.634 --> 00:53:59.801
how do we test applications
built on this--

00:53:59.801 --> 00:54:01.868
uh, on this library?

00:54:01.868 --> 00:54:05.534
Um, one idea is to use
a variety of devices

00:54:05.534 --> 00:54:07.367
with different form factors.

00:54:07.367 --> 00:54:10.868
Um, you want to use
different memory limitations.

00:54:10.868 --> 00:54:14.734
Um, you want to make sure
you are using,

00:54:14.734 --> 00:54:17.200
you know, different network
connections,

00:54:17.200 --> 00:54:20.033
you know, a slow or--
or a flaky connection.

00:54:20.033 --> 00:54:21.701
How does it work there?

00:54:21.701 --> 00:54:24.033
The error conditions
tend to be the trickiest.

00:54:24.033 --> 00:54:27.033
The auth flow tends to be
tricky to get right.

00:54:27.033 --> 00:54:29.534
Um, there are--you know,
there's a lot of edge cases

00:54:29.534 --> 00:54:31.033
to test here.

00:54:31.033 --> 00:54:34.033
Um, we--I wish I had
a more comprehensive answer.

00:54:34.033 --> 00:54:36.033
Maybe we should actually
write a, you know,

00:54:36.033 --> 00:54:37.534
a good testing guidelines.

00:54:37.534 --> 00:54:39.367
That would be
a great idea actually.

00:54:39.367 --> 00:54:41.200
Definitely take that.
woman: Okay, thanks.

00:54:41.200 --> 00:54:42.868
Inbar: Good feedback. Thanks.

00:54:42.868 --> 00:54:46.033
man: Um, for--this all works
with the, uh,

00:54:46.033 --> 00:54:48.701
Google documents list API?
Yes?

00:54:48.701 --> 00:54:52.200
And then, um, in terms
of authentication,

00:54:52.200 --> 00:54:54.701
if the user is using 2-pass

00:54:54.701 --> 00:54:56.701
or 2-stage authentication,

00:54:56.701 --> 00:54:58.868
is there a best practice
for that? Is that...

00:54:58.868 --> 00:55:00.534
Inbar: Okay, so good question.

00:55:00.534 --> 00:55:02.267
So the first was do we sup--

00:55:02.267 --> 00:55:04.100
uh, the Google documents API--

00:55:04.100 --> 00:55:06.934
that's actually
the number one, um, API

00:55:06.934 --> 00:55:09.601
that I've gotten requests for,
uh, with this library.

00:55:09.601 --> 00:55:11.934
So, yes, it's definitely
supported.

00:55:11.934 --> 00:55:13.767
Now the next question was

00:55:13.767 --> 00:55:16.434
what happens if you've got
2-, um, 2-factor--

00:55:16.434 --> 00:55:18.934
I forget what it's called--
2-step verification set up?

00:55:18.934 --> 00:55:22.767
Um, the answer is,
um, different

00:55:22.767 --> 00:55:25.434
for older Android SDKs,

00:55:25.434 --> 00:55:27.434
as it is with Honeycomb.

00:55:27.434 --> 00:55:29.267
So prior to Honeycomb,

00:55:29.267 --> 00:55:32.434
you--I'm--I don't think
it worked.

00:55:32.434 --> 00:55:35.100
But with Honeycomb it works now,

00:55:35.100 --> 00:55:37.934
but it's cleverly hidden
in the user interface.

00:55:37.934 --> 00:55:39.767
Um, I just discovered
that recently.

00:55:39.767 --> 00:55:41.767
At the very top-right corner,
there's a little button

00:55:41.767 --> 00:55:45.434
that says, um, "authenticate
using a web browser"

00:55:45.434 --> 00:55:48.133
instead of the "user name,
password" box.

00:55:48.133 --> 00:55:49.834
And I think it's only available
on Honeycomb.

00:55:49.834 --> 00:55:52.834
I'm not an expert on this topic,
so I'll qualify that statement.

00:55:52.834 --> 00:55:54.367
But that was--that's what--

00:55:54.367 --> 00:55:56.167
I actually did manage
to get it to work.

00:55:56.167 --> 00:55:58.167
I had an account with
2-step authentication set--

00:55:58.167 --> 00:55:59.667
verification set up.

00:55:59.667 --> 00:56:02.400
I went to the web flow,
and it's the typical,

00:56:02.400 --> 00:56:05.567
um, flow--authentication flow
you see in Google.

00:56:05.567 --> 00:56:07.567
You click "submit,"
and then it goes back,

00:56:07.567 --> 00:56:09.067
and it uses that.

00:56:09.067 --> 00:56:11.067
So it--it actually does
run OAuth under the hood,

00:56:11.067 --> 00:56:12.734
which is really great,

00:56:12.734 --> 00:56:14.734
but it's a very different kind
of OAuth

00:56:14.734 --> 00:56:16.734
than the OAuth I'm talking about
in this talk.

00:56:16.734 --> 00:56:18.901
man: So for the older APIs,

00:56:18.901 --> 00:56:21.234
um, they would just have--
the user would have to get

00:56:21.234 --> 00:56:22.901
an application-specific, um...

00:56:22.901 --> 00:56:24.734
Inbar: Yes, thank you.
man: whatever.

00:56:24.734 --> 00:56:26.567
Inbar: Actually,
I forgot to mention that

00:56:26.567 --> 00:56:28.400
that's actually
the most important thing,

00:56:28.400 --> 00:56:30.067
getting an application-specific
password.

00:56:30.067 --> 00:56:31.901
So the user has to go
through that flow

00:56:31.901 --> 00:56:33.567
and type it into their device,

00:56:33.567 --> 00:56:35.234
which is not
a pleasant experience,

00:56:35.234 --> 00:56:37.400
but fortunately they
only have to do it once.

00:56:37.400 --> 00:56:39.400
Thanks for that question.

00:56:39.400 --> 00:56:42.234
man: Hi, um, well,
I think my question

00:56:42.234 --> 00:56:44.400
is kind of answered
in that previous response.

00:56:44.400 --> 00:56:46.901
But basically,
is this library

00:56:46.901 --> 00:56:49.234
the libr--is this library
gonna handle, um,

00:56:49.234 --> 00:56:51.901
if you want, just general
authentication?

00:56:51.901 --> 00:56:54.567
So not necessarily
that I'm using, uh,

00:56:54.567 --> 00:56:56.234
Google APIs,

00:56:56.234 --> 00:56:59.234
but for example, like, uh,
on, uh, my--

00:56:59.234 --> 00:57:02.300
on the web I use,
um, OAuth

00:57:02.300 --> 00:57:04.133
for logging--
logging in,

00:57:04.133 --> 00:57:06.467
and I make an attribute-exchange
column and stuff like that.

00:57:06.467 --> 00:57:08.968
Would that be available
via this library

00:57:08.968 --> 00:57:11.968
as far as the information
that you get

00:57:11.968 --> 00:57:13.634
from attribute exchange?

00:57:13.634 --> 00:57:16.133
Or is it that it's gonna need
to go through the web flow?

00:57:16.133 --> 00:57:19.968
Inbar: Um, let me see
if I understand the question,

00:57:19.968 --> 00:57:21.634
um, correctly.

00:57:21.634 --> 00:57:23.634
So we talked about Google APIs

00:57:23.634 --> 00:57:26.968
and the authentication methods
that work with Google APIs,

00:57:26.968 --> 00:57:29.801
but suppose you're working
with a different API

00:57:29.801 --> 00:57:31.801
with a different
authentication flow.

00:57:31.801 --> 00:57:34.667
Does this library support
different authentication flows?

00:57:34.667 --> 00:57:36.634
Is that a fair summary or...
man: Um, I guess.

00:57:36.634 --> 00:57:40.300
I guess it--it's just using
the Google authentication

00:57:40.300 --> 00:57:43.634
without necessarily leveraging
an API, per se,

00:57:43.634 --> 00:57:45.467
but just using
Google authentication.

00:57:45.467 --> 00:57:46.968
Inbar: Okay. Um, yeah.

00:57:46.968 --> 00:57:49.133
So leveraging
Google authentication, um...

00:57:49.133 --> 00:57:50.968
yes, so the goal
of this library--

00:57:50.968 --> 00:57:52.801
the vision is
you should be able to build

00:57:52.801 --> 00:57:56.634
any kind of authentication
mechanism on top if it.

00:57:56.634 --> 00:58:00.133
The problem is on Android
we want all authentication flows

00:58:00.133 --> 00:58:02.200
to go through
the AccountManager.

00:58:02.200 --> 00:58:05.534
So, um, if you don't want to use
the ones that are built in,

00:58:05.534 --> 00:58:09.200
um, you'll have to write
your own account, um,

00:58:09.200 --> 00:58:13.033
your own account provider
for the, um, AccountManager.

00:58:13.033 --> 00:58:15.868
So, um, another company,

00:58:15.868 --> 00:58:18.033
uh, might want to provide,

00:58:18.033 --> 00:58:20.367
um, account management
for their--

00:58:20.367 --> 00:58:22.868
for their, uh,
for their, um...

00:58:22.868 --> 00:58:24.701
I'm sorry--
for their accounts.

00:58:24.701 --> 00:58:26.534
They'll just set up
an account provider,

00:58:26.534 --> 00:58:28.200
an account manager.

00:58:28.200 --> 00:58:30.868
And as long as they--
they stick with the idea

00:58:30.868 --> 00:58:33.534
of an auth token type
and an account type,

00:58:33.534 --> 00:58:35.868
they can implement
the account provider

00:58:35.868 --> 00:58:37.534
that gives you an auth token.

00:58:37.534 --> 00:58:39.200
And so you can
pretty much implement

00:58:39.200 --> 00:58:40.868
any kind of authentication
mechanism

00:58:40.868 --> 00:58:42.701
as long as it follows
that abstraction.

00:58:42.701 --> 00:58:44.701
man: Okay.
Inbar: Good question.

00:58:44.701 --> 00:58:48.534
man: Any status
on Google Cloud Print APIs?

00:58:48.534 --> 00:58:50.868
Inbar: I'm sorry, can you
repeat your question, please?

00:58:50.868 --> 00:58:54.367
man: Yeah, any status
on Google Cloud Print APIs?

00:58:54.367 --> 00:58:56.033
It's not on the list.

00:58:56.033 --> 00:58:58.033
Inbar: Uh, I don't know
the answer to your question.

00:58:58.033 --> 00:59:01.601
I can follow up, um, later.

00:59:01.601 --> 00:59:04.100
Uh, so I don't know

00:59:04.100 --> 00:59:06.934
if there's
a Google Cloud Print API.

00:59:06.934 --> 00:59:09.434
man: I-I have a question.

00:59:09.434 --> 00:59:11.767
Like, if there is
an enterprise app,

00:59:11.767 --> 00:59:13.434
and then we test to use

00:59:13.434 --> 00:59:15.434
the AccountManager
authentication,

00:59:15.434 --> 00:59:18.267
can they leverage
the Google API methods,

00:59:18.267 --> 00:59:21.267
or can they extend it
and customize that?

00:59:21.267 --> 00:59:23.767
Inbar: I-I'm sorry, can you
repeat your question, please?

00:59:23.767 --> 00:59:25.434
man: So, like,
the enterprise app...

00:59:25.434 --> 00:59:26.934
[speaking indistinctly]

00:59:26.934 --> 00:59:28.767
the authentication mechanism
is different,

00:59:28.767 --> 00:59:30.601
it has to go
to the enterprise pack,

00:59:30.601 --> 00:59:33.267
and can they use this API
with those apps?

00:59:33.267 --> 00:59:34.601
Inbar: Hmm.

00:59:34.601 --> 00:59:36.434
I don't know the answer
to your question.

00:59:36.434 --> 00:59:38.767
Let me actually, um...
I think we're--

00:59:38.767 --> 00:59:40.601
I think we're running
out of time,

00:59:40.601 --> 00:59:42.267
so let me meet you in person,

00:59:42.267 --> 00:59:44.267
and I'll get more details
from you then.

00:59:44.267 --> 00:59:46.267
Thanks for attending.

00:59:46.267 --> 00:59:48.567
[applause]

