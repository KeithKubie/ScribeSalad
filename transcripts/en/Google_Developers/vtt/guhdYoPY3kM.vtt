WEBVTT
Kind: captions
Language: en

00:00:15.534 --> 00:00:19.467
Raz: Good morning, everybody.

00:00:19.467 --> 00:00:22.100
So my name is Itai.

00:00:22.100 --> 00:00:23.934
I'm an engineer from
Google Tel Aviv.

00:00:23.934 --> 00:00:26.334
And I'm going to talk about

00:00:26.334 --> 00:00:28.868
how to implement
your own data source

00:00:28.868 --> 00:00:33.701
for the Google visualization
API.

00:00:33.701 --> 00:00:35.334
I'm gonna start with
some introduction

00:00:35.334 --> 00:00:37.634
about the API itself
in general.

00:00:37.634 --> 00:00:40.100
And then I'm gonna focus on
data source--

00:00:40.100 --> 00:00:43.501
the concept of data source
and what it means to be--

00:00:43.501 --> 00:00:46.133
to get Data Source for API.

00:00:46.133 --> 00:00:48.601
Then I'm gonna talk more about
the open source library,

00:00:48.601 --> 00:00:53.367
the Java library that
we've just announced.

00:00:53.367 --> 00:00:56.167
And later on,
we'll have Jesse Lorenz

00:00:56.167 --> 00:00:58.100
from Salesforce,
and he'll talk about

00:00:58.100 --> 00:01:00.467
the implementation
of Data Source.

00:01:00.467 --> 00:01:03.434
And Q&amp;A in the end.

00:01:03.434 --> 00:01:06.334
So I'll start with
a few words about

00:01:06.334 --> 00:01:08.033
the Google Visualization API.

00:01:08.033 --> 00:01:09.968
I know that some of you
know it,

00:01:09.968 --> 00:01:13.601
and some of you were
in yesterday's session too,

00:01:13.601 --> 00:01:15.300
but I just want to make sure
that everybody knows

00:01:15.300 --> 00:01:17.601
what I'm talking about.

00:01:17.601 --> 00:01:21.767
So this API is a tool
that is used to visualize

00:01:21.767 --> 00:01:24.167
structural data
over the web.

00:01:24.167 --> 00:01:28.033
In general, it's a library
of many visualizations

00:01:28.033 --> 00:01:29.534
from different
implementations,

00:01:29.534 --> 00:01:33.067
Flash based or image based
or JavaScript based.

00:01:33.067 --> 00:01:35.734
But all of them share
the same API.

00:01:35.734 --> 00:01:37.901
So you load them on
the same way

00:01:37.901 --> 00:01:40.868
and you interact with them
the same way.

00:01:40.868 --> 00:01:43.701
It's all JavaScript based API.

00:01:43.701 --> 00:01:45.167
You don't care about
the implementation

00:01:45.167 --> 00:01:47.801
of the actual code,

00:01:47.801 --> 00:01:49.501
and it's true for
all of them that

00:01:49.501 --> 00:01:52.300
the same way
to configure them,

00:01:52.300 --> 00:01:53.601
to interact with them,

00:01:53.601 --> 00:01:57.100
and to manage events
if there are events.

00:01:57.100 --> 00:02:01.000
And one thing that is more
important to this session

00:02:01.000 --> 00:02:03.901
is that they share
the same data table model.

00:02:03.901 --> 00:02:06.767
So no matter again what--

00:02:06.767 --> 00:02:08.801
if it's the pie chart
in JavaScript

00:02:08.801 --> 00:02:10.901
or the motion chart in Flash,

00:02:10.901 --> 00:02:13.567
they share the same class
that represent the data,

00:02:13.567 --> 00:02:15.567
and this class called
data table.

00:02:15.567 --> 00:02:17.133
You load it from the--

00:02:17.133 --> 00:02:21.200
when you load the JavaScript API
from the library.

00:02:21.200 --> 00:02:24.400
And it's a very simple class.

00:02:24.400 --> 00:02:25.734
It has rows and columns.

00:02:25.734 --> 00:02:28.634
Each column has a type
that can be string numbered--

00:02:28.634 --> 00:02:31.567
date and time and so on.

00:02:31.567 --> 00:02:34.734
A pretty fine set of types.

00:02:34.734 --> 00:02:36.200
And each column has a type,

00:02:36.200 --> 00:02:37.400
so all of the sales
from this type--

00:02:37.400 --> 00:02:41.234
from this column
share the same type.

00:02:41.234 --> 00:02:44.467
You may have as many rows
as you want.

00:02:44.467 --> 00:02:46.734
Usually, it will not be
above a few thousand

00:02:46.734 --> 00:02:51.634
because then the browser
will just fail to visualize it

00:02:51.634 --> 00:02:57.133
and to create
the visualization width.

00:02:57.133 --> 00:03:01.334
So let's see just
a few examples.

00:03:05.834 --> 00:03:07.968
So there is a gallery
in our documentation

00:03:07.968 --> 00:03:10.067
out of all of the charts.

00:03:10.067 --> 00:03:12.367
This is a very simple example
of--

00:03:12.367 --> 00:03:16.133
this is the example page
of the bar chart you can--

00:03:16.133 --> 00:03:18.300
this is--sorry.

00:03:18.300 --> 00:03:19.934
This is a Flash based--
I'm sorry.

00:03:19.934 --> 00:03:22.667
JavaScript based,
so you can interact with it

00:03:22.667 --> 00:03:27.033
and get events when
the user interacts and so on.

00:03:27.033 --> 00:03:29.834
The code is very simple
to create it.

00:03:29.834 --> 00:03:32.334
Most of the code--
this is the code that you see--

00:03:32.334 --> 00:03:34.434
all of the HTML page
that you need to have

00:03:34.434 --> 00:03:37.801
in order to see this chart.

00:03:37.801 --> 00:03:39.534
Mainly what you see here
is the--

00:03:39.534 --> 00:03:40.801
most of the lines
in the middle

00:03:40.801 --> 00:03:42.167
is the creation of
the data table

00:03:42.167 --> 00:03:44.567
and populating it with data.

00:03:44.567 --> 00:03:47.767
The first row that you see
is loading the JSAPI loader,

00:03:47.767 --> 00:03:51.133
the JavaScript loader
of Google.

00:03:51.133 --> 00:03:52.968
Then we call the Google
load function

00:03:52.968 --> 00:03:55.467
to load the library--

00:03:55.467 --> 00:03:56.901
the library of
the visualization.

00:03:56.901 --> 00:04:00.300
And the specific packages
shows what you want,

00:04:00.300 --> 00:04:03.200
and then again,
we create a data table.

00:04:03.200 --> 00:04:05.634
We populate it with data,
in this case locally,

00:04:05.634 --> 00:04:09.200
just with JavaScript calls--
functions.

00:04:09.200 --> 00:04:10.334
And then we create a chart

00:04:10.334 --> 00:04:12.834
and draw it with
this data table.

00:04:12.834 --> 00:04:14.868
And that's it.

00:04:14.868 --> 00:04:17.734
Another example
that I want to show

00:04:17.734 --> 00:04:20.901
is this one in which
I have iGoogle

00:04:20.901 --> 00:04:24.868
that takes the data from
some remote data source.

00:04:24.868 --> 00:04:27.367
And I'll explain, of course,
later, what it means.

00:04:27.367 --> 00:04:30.300
Still it's one child
that you might know

00:04:30.300 --> 00:04:32.434
from Google Finance.

00:04:32.434 --> 00:04:34.400
It's an annotated timeline,
we call it--

00:04:34.400 --> 00:04:37.000
it's time-based access.

00:04:37.000 --> 00:04:39.200
And the Ys, you may have
as many data series

00:04:39.200 --> 00:04:43.934
that you want
with the notations.

00:04:43.934 --> 00:04:46.834
And the last example here
is this one.

00:04:46.834 --> 00:04:50.634
This is the motion chart,
in which you can see bubbles

00:04:50.634 --> 00:04:55.000
moving with different X and Y
in size and colors

00:04:55.000 --> 00:04:58.501
and with the timeline.

00:04:58.501 --> 00:05:01.000
So it has, like,
five dimensions.

00:05:01.000 --> 00:05:02.234
In this case,
what you can see

00:05:02.234 --> 00:05:03.367
is that all of the data

00:05:03.367 --> 00:05:05.367
is taken from the Google
spreadsheets behind it.

00:05:05.367 --> 00:05:06.701
So it has many columns,

00:05:06.701 --> 00:05:08.901
and it can set
which columns means what,

00:05:08.901 --> 00:05:12.200
it can change the,
I don't know,

00:05:12.200 --> 00:05:16.467
the color to be not the region
but something else.

00:05:16.467 --> 00:05:18.167
And you see that it changes
on the fly.

00:05:18.167 --> 00:05:22.400
I can change it to be
a bar chart

00:05:22.400 --> 00:05:24.801
instead of bubbles and so on.

00:05:24.801 --> 00:05:27.667
But what I wanted to show you
that I can take this one

00:05:27.667 --> 00:05:29.267
and add it--okay.

00:05:29.267 --> 00:05:34.667
Add it to iGoogle.

00:05:34.667 --> 00:05:35.834
And then,
in addition

00:05:35.834 --> 00:05:38.801
to the time series
that you just saw,

00:05:38.801 --> 00:05:42.400
I have now this motion chart,

00:05:42.400 --> 00:05:44.667
that hopefully
will be loaded in a second.

00:05:44.667 --> 00:05:46.200
And you see just
the same configuration

00:05:46.200 --> 00:05:50.801
that I just set,
I have it here.

00:05:50.801 --> 00:05:53.234
And the nice thing about it
is that, as you can see here,

00:05:53.234 --> 00:05:55.434
I can edit the settings,

00:05:55.434 --> 00:05:59.667
and the first setting
is data source URL.

00:05:59.667 --> 00:06:02.567
And now it's taking
the data from the spreadsheet,

00:06:02.567 --> 00:06:05.767
as we just saw, so if
I change the spreadsheet data,

00:06:05.767 --> 00:06:08.434
it will take--
it will affect this one too.

00:06:08.434 --> 00:06:10.400
So you can create data--

00:06:10.400 --> 00:06:13.968
you can create dashboards
of users that are taking--

00:06:13.968 --> 00:06:17.133
that are built from charts
from many other data--

00:06:17.133 --> 00:06:18.300
many different data sources.

00:06:18.300 --> 00:06:20.701
And each one of them
is the live data.

00:06:20.701 --> 00:06:23.400
So it's not hardcore data
in a page,

00:06:23.400 --> 00:06:25.167
it's something that gets
live data

00:06:25.167 --> 00:06:26.334
from Google spreadsheets.

00:06:26.334 --> 00:06:29.934
Or what I want to show now
in this session

00:06:29.934 --> 00:06:33.234
is that you can actually build
your own data source.

00:06:33.234 --> 00:06:38.000
So the data can be taken
from your organizational data

00:06:38.000 --> 00:06:39.834
including all of
the nice features

00:06:39.834 --> 00:06:42.901
that are already
in the data source.

00:06:46.968 --> 00:06:52.000
[clears throat]

00:06:52.000 --> 00:06:54.667
So again, you can create
a data table locally

00:06:54.667 --> 00:06:57.701
as we saw in the example
by just creating

00:06:57.701 --> 00:06:59.701
a JavaScript data table
object,

00:06:59.701 --> 00:07:03.734
and then add columns and rows
and set the values.

00:07:03.734 --> 00:07:05.868
Alternatively,
you can use a JSON notation,

00:07:05.868 --> 00:07:08.067
which is much faster
in the browser.

00:07:08.067 --> 00:07:10.667
But it's a bit harder
to implement,

00:07:10.667 --> 00:07:13.367
to write,
to generate this code.

00:07:13.367 --> 00:07:16.033
But the effect
is just the same.

00:07:16.033 --> 00:07:18.968
And in addition, you can use
the remote data source.

00:07:18.968 --> 00:07:20.501
Then you get all of
the good stuff

00:07:20.501 --> 00:07:22.334
that is written here.

00:07:22.334 --> 00:07:25.067
You don't have to have
all the data in your page,

00:07:25.067 --> 00:07:27.501
but it's taken every time
from a different place--

00:07:27.501 --> 00:07:31.133
the live data
that are in the data source.

00:07:31.133 --> 00:07:33.601
You've got a query language
that will explain--

00:07:33.601 --> 00:07:35.434
I will explain later
and show.

00:07:35.434 --> 00:07:37.200
But in general,
it means that

00:07:37.200 --> 00:07:40.167
you don't have to create
any variant of the data.

00:07:40.167 --> 00:07:43.033
Instead, you create
a single data table

00:07:43.033 --> 00:07:44.367
on the service side,

00:07:44.367 --> 00:07:47.834
and the data source implements
the query language.

00:07:47.834 --> 00:07:51.000
So the user you can just
type in another parameter

00:07:51.000 --> 00:07:54.033
to the URL
and specify the queries

00:07:54.033 --> 00:07:56.033
that you want to do
the manipulation,

00:07:56.033 --> 00:07:57.200
the data manipulation.

00:07:57.200 --> 00:07:59.334
If you want to do only
select some--

00:07:59.334 --> 00:08:02.634
certain columns
or maybe sort the data

00:08:02.634 --> 00:08:06.601
or group it
or whatever you want.

00:08:06.601 --> 00:08:07.767
Or to refresh.

00:08:07.767 --> 00:08:09.434
It's another feature
of the query.

00:08:09.434 --> 00:08:11.467
You can set the query
with auto refresh

00:08:11.467 --> 00:08:13.434
for any time,
any number of seconds

00:08:13.434 --> 00:08:14.601
that you want.

00:08:14.601 --> 00:08:16.501
And then after these number
of seconds,

00:08:16.501 --> 00:08:18.868
the JavaScript automatically
sends another request

00:08:18.868 --> 00:08:21.067
to the data source

00:08:21.067 --> 00:08:22.634
to see if there is any change
in the data.

00:08:22.634 --> 00:08:24.734
And if there is,
it's reflected automatically

00:08:24.734 --> 00:08:27.634
in the chart.

00:08:27.634 --> 00:08:29.667
It's using the JSON
constructives that we just saw,

00:08:29.667 --> 00:08:33.868
so it's much faster
than using the JavaScript

00:08:33.868 --> 00:08:35.701
notation of functions.

00:08:35.701 --> 00:08:37.934
And the last thing is that
it's a public protocol,

00:08:37.934 --> 00:08:39.567
which means that
you can just read it

00:08:39.567 --> 00:08:40.901
in the documentation.

00:08:40.901 --> 00:08:44.534
It's well documented
and it's--

00:08:44.534 --> 00:08:45.834
you can just know how
to implement it.

00:08:45.834 --> 00:08:48.534
It's not that complicated.

00:08:48.534 --> 00:08:52.234
Even if you want to do it
on your own.

00:08:52.234 --> 00:08:54.767
In order to send a query
to a data source, so it's--

00:08:54.767 --> 00:08:56.100
from gadget,
it's very simple,

00:08:56.100 --> 00:08:57.267
because the gadgets

00:08:57.267 --> 00:08:59.834
are already pre-built
to deal with it.

00:08:59.834 --> 00:09:01.667
So all we have to do
in the gadget

00:09:01.667 --> 00:09:03.300
is to write the URL.

00:09:03.300 --> 00:09:04.634
But if you want to do it
in JavaScript,

00:09:04.634 --> 00:09:06.934
it's not
much more than this.

00:09:06.934 --> 00:09:09.334
You just create a query object
past the URL,

00:09:09.334 --> 00:09:13.467
option--already sent
the query language phrase.

00:09:13.467 --> 00:09:15.734
And then send it
with a callback,

00:09:15.734 --> 00:09:18.901
and when the response
get back from the server,

00:09:18.901 --> 00:09:20.133
you just take the response--

00:09:20.133 --> 00:09:23.133
take the data table from it
and work with it.

00:09:23.133 --> 00:09:24.634
Additionally,
you can also check

00:09:24.634 --> 00:09:30.067
if there are any errors
and react to them.

00:09:30.067 --> 00:09:33.601
So let's talk
about data source.

00:09:33.601 --> 00:09:34.767
So first of all,
as I said,

00:09:34.767 --> 00:09:40.300
there is a public documentation
of the format--

00:09:40.300 --> 00:09:41.667
the format of the response

00:09:41.667 --> 00:09:44.434
and the request of
this protocol.

00:09:44.434 --> 00:09:46.234
So it's documented exactly--

00:09:46.234 --> 00:09:48.467
all of the fields
and the details

00:09:48.467 --> 00:09:52.734
that may be or must be
in the request.

00:09:52.734 --> 00:09:55.234
And of course,
of all of the things there are,

00:09:55.234 --> 00:09:59.067
they should be in
the response.

00:09:59.067 --> 00:10:01.868
It contains information
about errors that may be--

00:10:01.868 --> 00:10:04.667
so there is a way
to pass errors, for example,

00:10:04.667 --> 00:10:07.501
access denied or any other error
from the client--

00:10:07.501 --> 00:10:10.667
from the server
to the client.

00:10:10.667 --> 00:10:14.200
So it's not that the client
don't get any response,

00:10:14.200 --> 00:10:16.634
but you can pass errors
in there.

00:10:16.634 --> 00:10:19.534
And most of the visualization
know how to show them

00:10:19.534 --> 00:10:21.334
very nicely
so the user can understand

00:10:21.334 --> 00:10:25.067
that something went wrong.

00:10:25.067 --> 00:10:27.701
And another thing to say
that there is the new version

00:10:27.701 --> 00:10:31.334
with some improvements.

00:10:31.334 --> 00:10:32.734
I'm gonna cover some of them.

00:10:32.734 --> 00:10:36.000
It's all documented
in our site.

00:10:39.067 --> 00:10:42.567
There are some additions
to the query language.

00:10:42.567 --> 00:10:45.033
So now it supports
some calculated columns

00:10:45.033 --> 00:10:48.767
and Scholar functions.

00:10:48.767 --> 00:10:51.400
So if you have a field
from type date,

00:10:51.400 --> 00:10:53.968
you can ask to get only
the year part of this date

00:10:53.968 --> 00:10:56.567
and so on,
which is very nice

00:10:56.567 --> 00:11:00.467
if you want to do some
aggregations.

00:11:00.467 --> 00:11:02.968
And in the Java library
that I'm gonna cover later,

00:11:02.968 --> 00:11:04.467
it's all fully implemented.

00:11:04.467 --> 00:11:06.133
So if you use this library,

00:11:06.133 --> 00:11:09.701
you get the full query language
in your data source

00:11:09.701 --> 00:11:12.734
without the need to write
a single line of code

00:11:12.734 --> 00:11:16.834
that deals with it.

00:11:16.834 --> 00:11:20.033
A few words about security
because--

00:11:20.033 --> 00:11:22.834
just to make sure
that it's clear.

00:11:22.834 --> 00:11:24.534
When you use a data source,

00:11:24.534 --> 00:11:27.033
it means that from
the visualization,

00:11:27.033 --> 00:11:29.133
a request is sent
to bring the data.

00:11:29.133 --> 00:11:31.901
It's not included
in the page itself, as we said.

00:11:31.901 --> 00:11:34.434
And this means that as--

00:11:34.434 --> 00:11:36.100
on the same wave that
you send a request

00:11:36.100 --> 00:11:37.934
to get this data,
maybe someone else

00:11:37.934 --> 00:11:42.834
might try to send a request
to this data.

00:11:42.834 --> 00:11:46.434
Until now, we use a technique
called script injection.

00:11:46.434 --> 00:11:50.167
Because the advantage of this
is that you can send request

00:11:50.167 --> 00:11:51.734
across the domain.

00:11:51.734 --> 00:11:52.901
It means that if you get--

00:11:52.901 --> 00:11:54.834
if you have your data
on a Google spreadsheet,

00:11:54.834 --> 00:11:56.701
or maybe if you have your data
on one site,

00:11:56.701 --> 00:11:58.834
but you want to show it
in your blog,

00:11:58.834 --> 00:12:01.067
of if you have any public data
that you want everybody

00:12:01.067 --> 00:12:04.000
to be accessed--
to be able to read,

00:12:04.000 --> 00:12:07.033
so we have to use
this technique.

00:12:07.033 --> 00:12:11.834
But the bad side is that
it's a bit easier to get--

00:12:11.834 --> 00:12:14.200
for people that you don't want
to get this data

00:12:14.200 --> 00:12:16.601
and maybe to get it,
it's not easy,

00:12:16.601 --> 00:12:21.334
but it's possible
in some ways.

00:12:21.334 --> 00:12:23.200
Now we change to use

00:12:23.200 --> 00:12:25.534
in most of the cases as
a default,

00:12:25.534 --> 00:12:27.167
a method called XHR.

00:12:27.167 --> 00:12:31.200
So the requests are limited
by default to your domain.

00:12:31.200 --> 00:12:34.934
By authenticating the user
and making sure

00:12:34.934 --> 00:12:38.901
that he has the cookies
that he needs to have,

00:12:38.901 --> 00:12:40.968
you can be sure that
the request came from

00:12:40.968 --> 00:12:43.267
the same domain that
the data source is.

00:12:43.267 --> 00:12:46.300
And since this is
a common use--

00:12:46.300 --> 00:12:49.667
use case,
so this is the default.

00:12:49.667 --> 00:12:51.400
And we also didn't want people
to have, like,

00:12:51.400 --> 00:12:53.434
mistakenly to open
their data source

00:12:53.434 --> 00:12:54.834
to other people.

00:12:54.834 --> 00:12:56.200
So if you want to change it

00:12:56.200 --> 00:12:58.968
and you want other domains
to be able to get this data,

00:12:58.968 --> 00:13:00.434
it's very simple to change.

00:13:00.434 --> 00:13:03.167
I'll show it later on how you
do it on the service side.

00:13:03.167 --> 00:13:05.434
But just know that
the default is that

00:13:05.434 --> 00:13:09.234
it's only for the same domain
and you can open it.

00:13:09.234 --> 00:13:11.267
There are some other
alternatives to change--

00:13:11.267 --> 00:13:13.167
to send the request in.

00:13:13.167 --> 00:13:16.534
Once called makeRequest
to enable--

00:13:16.534 --> 00:13:18.133
it's something specific
for gadgets.

00:13:18.133 --> 00:13:19.501
You can read about it more.

00:13:19.501 --> 00:13:22.534
And if you don't specify
any one, any option,

00:13:22.534 --> 00:13:25.467
then it's--
we apply some heuristics.

00:13:25.467 --> 00:13:27.534
And if we see that
you send the request to

00:13:27.534 --> 00:13:30.300
the same domain of
your webpage,

00:13:30.300 --> 00:13:31.968
then we use XHR.

00:13:31.968 --> 00:13:36.667
If not, we use script
injection.

00:13:36.667 --> 00:13:40.901
So the query language
is a bit similar to SQL.

00:13:40.901 --> 00:13:45.200
You have a selection
in row ordering and grouping.

00:13:45.200 --> 00:13:47.501
And even people think
that it's not possible in SQL.

00:13:47.501 --> 00:13:49.868
We don't have all of
the capabilities of SQL,

00:13:49.868 --> 00:13:52.033
but it's a very nice set.

00:13:52.033 --> 00:13:53.200
And if you have any
data tables

00:13:53.200 --> 00:13:54.467
that you want to present

00:13:54.467 --> 00:13:56.667
in so many different
visualizations,

00:13:56.667 --> 00:13:58.400
you can use it
and it's very easy.

00:13:58.400 --> 00:13:59.467
Very easy to use

00:13:59.467 --> 00:14:03.000
in the implementation of
the Java,

00:14:03.000 --> 00:14:05.434
the Java library.

00:14:05.434 --> 00:14:06.801
Of course in addition to this,

00:14:06.801 --> 00:14:10.234
you might have some specific
URL parameters.

00:14:10.234 --> 00:14:12.267
So in this Google spreadsheet
example,

00:14:12.267 --> 00:14:15.033
you see that you specified
the key of the spreadsheet

00:14:15.033 --> 00:14:16.267
from which you want to read,

00:14:16.267 --> 00:14:18.234
but on top of this
you can add a tq parameter

00:14:18.234 --> 00:14:19.934
for the query language
and say,

00:14:19.934 --> 00:14:22.200
okay, this is a spreadsheet,
it has, I don't know,

00:14:22.200 --> 00:14:24.734
ten columns, but I want
to read only the first

00:14:24.734 --> 00:14:26.300
and the second column
because I want a pie chart

00:14:26.300 --> 00:14:31.734
that takes only two columns.

00:14:31.734 --> 00:14:36.367
So let's have a look
on this Java library.

00:14:39.033 --> 00:14:43.400
As a concept,
this is an open source library.

00:14:43.400 --> 00:14:46.334
So you can get the code,
you can modify for your needs

00:14:46.334 --> 00:14:48.767
and do whatever you want.

00:14:48.767 --> 00:14:52.601
It has, again,
as I said, full--

00:14:52.601 --> 00:14:56.934
complete support for
the query language.

00:14:56.934 --> 00:14:59.767
It has--it contains
some examples.

00:14:59.767 --> 00:15:04.100
So if you just load it and--
within, say, an hour,

00:15:04.100 --> 00:15:05.934
you can just read through
the documentation

00:15:05.934 --> 00:15:07.434
of the Getting Started.

00:15:07.434 --> 00:15:10.167
And then you have
working Tomcat,

00:15:10.167 --> 00:15:12.000
with all of the configuration
that you need.

00:15:12.000 --> 00:15:13.434
And you see
the running example,

00:15:13.434 --> 00:15:14.934
and it's very good
to start with this.

00:15:14.934 --> 00:15:17.767
Now we can go and create
your own examples

00:15:17.767 --> 00:15:22.133
or your own use cases
that are not that simple maybe.

00:15:22.133 --> 00:15:24.467
But still, you have something
to start with

00:15:24.467 --> 00:15:26.200
and you see real
visualization,

00:15:26.200 --> 00:15:29.534
as they're going to show
later on today.

00:15:29.534 --> 00:15:33.400
There are utilities
for CSV and MySQL.

00:15:33.400 --> 00:15:35.400
So in most--
in many cases,

00:15:35.400 --> 00:15:39.601
people have CSV files
on MySQL data tables.

00:15:39.601 --> 00:15:41.100
And they want to use
these tables

00:15:41.100 --> 00:15:43.234
to visualize this data.

00:15:43.234 --> 00:15:44.534
But today,
there is no way to do it.

00:15:44.534 --> 00:15:47.033
Okay, you have a CSV file
on your own computer

00:15:47.033 --> 00:15:49.534
or on your website.

00:15:49.534 --> 00:15:52.801
There is no way to use it
to visualize this data.

00:15:52.801 --> 00:15:57.200
What this library provides
is some class that you can,

00:15:57.200 --> 00:16:00.234
with very small number
of call lines,

00:16:00.234 --> 00:16:04.567
just specify the URL
of these files

00:16:04.567 --> 00:16:05.901
or the location
of these files.

00:16:05.901 --> 00:16:07.534
And we take it from there.

00:16:07.534 --> 00:16:10.868
We take it--
we access these files.

00:16:10.868 --> 00:16:13.200
We change it,
we transform them

00:16:13.200 --> 00:16:16.534
into the JSON format
of the response

00:16:16.534 --> 00:16:18.200
of this protocol.

00:16:18.200 --> 00:16:19.367
In the middle,

00:16:19.367 --> 00:16:21.267
we take the query that
the user provided

00:16:21.267 --> 00:16:25.601
and apply it on top of
this data table.

00:16:25.601 --> 00:16:26.734
And all that you have to do

00:16:26.734 --> 00:16:30.334
is to specify the exact
location of the file.

00:16:30.334 --> 00:16:31.634
I'm gonna show an example
of this.

00:16:31.634 --> 00:16:35.634
We have the same for SQL.

00:16:35.634 --> 00:16:37.100
As I said by default,

00:16:37.100 --> 00:16:38.868
we use the restricted--
same domain mode,

00:16:38.868 --> 00:16:42.801
but you can change it
in a single line of code.

00:16:42.801 --> 00:16:44.467
You get the source code
and you get jars,

00:16:44.467 --> 00:16:46.601
so if you just want to use it
as is

00:16:46.601 --> 00:16:48.601
and you don't want
to start looking at the code

00:16:48.601 --> 00:16:50.901
or change it,
you just take the jars,

00:16:50.901 --> 00:16:52.434
you put them on Tomcat,
are they gonna show now?

00:16:52.434 --> 00:16:55.133
And there you go.

00:16:55.133 --> 00:16:56.501
And again,
it's well documented,

00:16:56.501 --> 00:16:57.868
and there's a user group.

00:16:57.868 --> 00:17:02.334
If you have any questions
or comments, you can use it.

00:17:02.334 --> 00:17:06.701
So let's have a quick demo.

00:17:06.701 --> 00:17:09.934
So first of all,
the documentation--

00:17:09.934 --> 00:17:12.901
in the general documentation
of the API,

00:17:12.901 --> 00:17:17.234
there is a section describing
this new library.

00:17:17.234 --> 00:17:19.834
And if you just go through
the Getting Started,

00:17:19.834 --> 00:17:21.801
you'll see a very detailed
explanation

00:17:21.801 --> 00:17:23.601
of how to install Tomcat,

00:17:23.601 --> 00:17:26.968
how to configure it
for you to have this--

00:17:26.968 --> 00:17:28.901
to install all of the things
that you need,

00:17:28.901 --> 00:17:32.400
and you are set.

00:17:32.400 --> 00:17:34.834
Specifically what I did here,

00:17:34.834 --> 00:17:40.834
I just downloaded
the .jar files and--

00:17:40.834 --> 00:17:42.767
all of the configuration
that is needed

00:17:42.767 --> 00:17:45.100
is to take all of the dependents
in the .jar files

00:17:45.100 --> 00:17:48.501
put them in the web directory
of Tomcat,

00:17:48.501 --> 00:17:50.267
as you can see here.

00:17:50.267 --> 00:17:53.467
In addition, I took
the web XML file,

00:17:53.467 --> 00:17:56.601
that is the file that tells
Tomcat where to--

00:17:56.601 --> 00:17:58.501
where the application exists,

00:17:58.501 --> 00:18:01.667
and added these--

00:18:01.667 --> 00:18:04.734
these are mapping for
the servlets.

00:18:04.734 --> 00:18:07.701
So I have something
called Simple Example here,

00:18:07.701 --> 00:18:09.567
and another one on the bottom
called CSV.

00:18:09.567 --> 00:18:11.000
I'm gonna show both of them.

00:18:11.000 --> 00:18:12.400
Simple Example is something

00:18:12.400 --> 00:18:15.133
that just create
a static table,

00:18:15.133 --> 00:18:18.701
and CSV is something that
takes the table from a CSV file.

00:18:22.968 --> 00:18:26.534
So let's start with
the Simple Example.

00:18:26.534 --> 00:18:30.067
This is all the code
that is here in this servlet

00:18:30.067 --> 00:18:33.901
to create the response.

00:18:33.901 --> 00:18:37.367
And I'll show in a minute
all of the things

00:18:37.367 --> 00:18:38.734
that you can do with
this response.

00:18:38.734 --> 00:18:41.000
It's not just a simple table
as it looks.

00:18:41.000 --> 00:18:44.200
So what I do here,
I implemented--

00:18:44.200 --> 00:18:46.200
I have a servlet called
Simple Example.

00:18:46.200 --> 00:18:48.467
Servlet I implemented--
I extended, sorry,

00:18:48.467 --> 00:18:50.534
data source servlet.

00:18:50.534 --> 00:18:52.133
And it means that
I only need to implement

00:18:52.133 --> 00:18:54.534
a single method called
generate data table.

00:18:54.534 --> 00:18:56.501
This method gets
a query object,

00:18:56.501 --> 00:18:58.167
which is the tq parameter
that the user

00:18:58.167 --> 00:19:02.734
may have added to the URL.

00:19:02.734 --> 00:19:05.267
We'll select some certain
columns and so on,

00:19:05.267 --> 00:19:07.367
and the requests.

00:19:07.367 --> 00:19:10.567
You might want to use
the request to know

00:19:10.567 --> 00:19:13.334
what the other parameters
the user specified

00:19:13.334 --> 00:19:16.601
or get cookies to authenticate
the user and so on.

00:19:16.601 --> 00:19:18.834
And the query,
for the moment let's assume

00:19:18.834 --> 00:19:20.367
that you can just ignore it.

00:19:20.367 --> 00:19:22.167
Later on, I'll show
what you can do with it,

00:19:22.167 --> 00:19:23.868
but you don't have to
do anything in order to have

00:19:23.868 --> 00:19:26.601
the query language
working for you.

00:19:26.601 --> 00:19:28.133
So here in this example,

00:19:28.133 --> 00:19:30.200
they just build
the data table object,

00:19:30.200 --> 00:19:34.234
add some four columns of
a name, a link,

00:19:34.234 --> 00:19:35.300
and a population.

00:19:35.300 --> 00:19:37.567
Of a vegetarian,
of a buillon field,

00:19:37.567 --> 00:19:39.868
of some animals,

00:19:39.868 --> 00:19:43.300
and then I add columns
for each one of these animals,

00:19:43.300 --> 00:19:44.801
and that's it.

00:19:44.801 --> 00:19:48.334
You can see that down here
that I set the restricted mode

00:19:48.334 --> 00:19:50.901
to false,
but just for this example--

00:19:50.901 --> 00:19:53.534
again, normally if
you don't do this,

00:19:53.534 --> 00:19:55.734
then it will be true.

00:19:55.734 --> 00:20:01.234
So let's see the results
of this very nice example.

00:20:01.234 --> 00:20:02.801
It looks like this.

00:20:02.801 --> 00:20:05.033
So it's not very useful,

00:20:05.033 --> 00:20:07.334
at least when you want
to debug your code

00:20:07.334 --> 00:20:08.601
and check it and make sure
that you understand

00:20:08.601 --> 00:20:10.267
what's going on.

00:20:10.267 --> 00:20:14.467
Although this is the right
JSON format of the response.

00:20:14.467 --> 00:20:17.534
So let's see what you get
for free here.

00:20:17.534 --> 00:20:20.667
The first thing is,
you can change the render,

00:20:20.667 --> 00:20:24.367
or what we call it,
to HTML.

00:20:24.367 --> 00:20:26.534
So we know not only
to create the JSON format

00:20:26.534 --> 00:20:29.267
out of this data table,
but then also to create

00:20:29.267 --> 00:20:32.467
a very simple data table,
HTML table.

00:20:32.467 --> 00:20:34.667
So when you are on
the development cycle,

00:20:34.667 --> 00:20:37.334
you don't have to try
to understand what went wrong.

00:20:37.334 --> 00:20:40.100
If you try to visualize it
and something doesn't work,

00:20:40.100 --> 00:20:42.901
you can just change
the TQX parameter.

00:20:42.901 --> 00:20:44.067
Again, it's all documented

00:20:44.067 --> 00:20:46.267
so you don't have
to remember it.

00:20:46.267 --> 00:20:48.300
But you change
the output format to HTML

00:20:48.300 --> 00:20:51.133
and then you can see
the table

00:20:51.133 --> 00:20:55.033
and find out what's going on.

00:20:55.033 --> 00:20:56.767
This is one thing.

00:20:56.767 --> 00:20:58.567
Another render that there is,

00:20:58.567 --> 00:21:02.367
though it's already written
and supported, is CSV.

00:21:02.367 --> 00:21:07.334
So you might want to have
a link

00:21:07.334 --> 00:21:11.767
just below the chart saying
okay, "I want this data to be--

00:21:11.767 --> 00:21:13.334
"I want the user to be able
to download

00:21:13.334 --> 00:21:15.868
this data in CSV format."

00:21:15.868 --> 00:21:20.300
So you can just--
just below the chart

00:21:20.300 --> 00:21:23.300
that displayed this data,
you can have another link

00:21:23.300 --> 00:21:25.901
saying, "download this data"
and say--

00:21:25.901 --> 00:21:29.200
have the same link of URL--
the same URL,

00:21:29.200 --> 00:21:30.534
but without CSV.

00:21:30.534 --> 00:21:32.100
And then when
you click on it--

00:21:32.100 --> 00:21:34.300
when the user clicks on it,

00:21:34.300 --> 00:21:36.234
they get this
save file option

00:21:36.234 --> 00:21:39.467
or whatever they want to
do with it.

00:21:39.467 --> 00:21:44.033
In addition,
let's change it back to...

00:21:44.033 --> 00:21:45.767
HTML.

00:21:45.767 --> 00:21:47.567
And let's specify that
we don't want the whole table.

00:21:47.567 --> 00:21:51.701
We want only the first column.

00:21:51.701 --> 00:21:53.067
So there you go.

00:21:53.067 --> 00:21:56.267
Select name,
and you've got the name.

00:21:56.267 --> 00:21:59.033
I can also order them
by whatever field they want

00:21:59.033 --> 00:22:03.334
or to filter these that--

00:22:03.334 --> 00:22:06.834
size equals something
or whatever.

00:22:06.834 --> 00:22:10.934
And all of this, again,
just go back to the code.

00:22:10.934 --> 00:22:15.133
So...maybe one more thing

00:22:15.133 --> 00:22:16.968
to explain about
the code structure.

00:22:16.968 --> 00:22:19.100
So there is an example here.

00:22:19.100 --> 00:22:21.167
And there is the library
itself.

00:22:21.167 --> 00:22:23.901
The call they just show now
is from the examples.

00:22:23.901 --> 00:22:27.167
So it just uses all of the code
of the library as is.

00:22:27.167 --> 00:22:29.234
It doesn't change it,
it doesn't do anything.

00:22:29.234 --> 00:22:32.968
So as you see,
it's just a small example.

00:22:32.968 --> 00:22:34.801
Creating the data tables,
starting the data table,

00:22:34.801 --> 00:22:36.501
and you get all of
these renders

00:22:36.501 --> 00:22:39.634
and all of these query
language for free

00:22:39.634 --> 00:22:42.868
without the need
to do anything.

00:22:42.868 --> 00:22:46.601
So now let's move on to
a bit more interesting example,

00:22:46.601 --> 00:22:49.367
which is this one.

00:22:49.367 --> 00:22:54.267
Taking--using a CSV file
and building the table

00:22:54.267 --> 00:22:55.868
on top of it.

00:22:55.868 --> 00:23:01.934
So what we see here is also
the same kind of servlet--

00:23:01.934 --> 00:23:03.901
implement--
I extend data source servlet

00:23:03.901 --> 00:23:07.701
and I need to implement
the generate table function,

00:23:07.701 --> 00:23:10.000
as you see here.

00:23:10.000 --> 00:23:11.567
What I do here--
I read the--

00:23:11.567 --> 00:23:13.467
a single parameter
called URL,

00:23:13.467 --> 00:23:17.234
which is the URL,
in this case of the CSV file.

00:23:17.234 --> 00:23:20.901
And I take the CSV file,
and what I'm doing with it is

00:23:20.901 --> 00:23:24.300
I want to make a data table
out of it.

00:23:24.300 --> 00:23:26.100
So let's see
how simple it is.

00:23:26.100 --> 00:23:28.234
I just create a reader,

00:23:28.234 --> 00:23:31.968
a Java reader object.

00:23:31.968 --> 00:23:35.467
And giving this URL
so I can work with it,

00:23:35.467 --> 00:23:38.667
this is something that
is general Java procedure.

00:23:38.667 --> 00:23:41.801
Then I do this thing,
which is interesting.

00:23:41.801 --> 00:23:44.100
It's an optional step,
but what I'm doing here is

00:23:44.100 --> 00:23:47.601
I get the locale
of the user.

00:23:47.601 --> 00:23:48.901
Why it's important?

00:23:48.901 --> 00:23:51.534
Because in many times,
as you know with CSV files,

00:23:51.534 --> 00:23:53.601
you have dates,
for example.

00:23:53.601 --> 00:23:55.601
And dates are written
in CSV files

00:23:55.601 --> 00:23:58.968
in different formats,
depending on the URL locale

00:23:58.968 --> 00:24:02.734
or the user--
or the owner of the file.

00:24:02.734 --> 00:24:05.934
So what I'm doing here is just,
I give this locale

00:24:05.934 --> 00:24:10.400
as a parameter to the next--
to the passing of the CSV file.

00:24:10.400 --> 00:24:11.767
You don't have to do it.

00:24:11.767 --> 00:24:13.968
If you don't do it,
we take some different locale,

00:24:13.968 --> 00:24:17.067
but it's quite useful.

00:24:17.067 --> 00:24:18.234
And the last thing I do

00:24:18.234 --> 00:24:21.567
is I call CSV Data Source
helper.

00:24:21.567 --> 00:24:24.701
I read the method.

00:24:24.701 --> 00:24:27.400
Okay, this is the reader
and it does everything

00:24:27.400 --> 00:24:31.667
that it needs to do
including passing the file,

00:24:31.667 --> 00:24:35.067
creating the JSON format.

00:24:35.067 --> 00:24:36.667
In the middle,
it takes the query

00:24:36.667 --> 00:24:39.901
if the user specified any,
and apply it on this data table.

00:24:39.901 --> 00:24:41.067
And there you go.

00:24:41.067 --> 00:24:45.334
There is a data table,
and everything is done.

00:24:45.334 --> 00:24:50.033
So let's see this example
live.

00:24:50.033 --> 00:24:51.400
Oh, just, this is--

00:24:51.400 --> 00:24:53.767
I'm going back to
the example I showed before.

00:24:53.767 --> 00:24:57.734
So this--
I just showed you here that,

00:24:57.734 --> 00:25:00.634
okay, there is a table,
but let's see how it's used.

00:25:00.634 --> 00:25:04.567
So this is another--
just a simple HTML page.

00:25:04.567 --> 00:25:07.200
It says "Hello! Data Source!"
and show a chart.

00:25:07.200 --> 00:25:08.834
This chart is actually
a table,

00:25:08.834 --> 00:25:11.667
a table visualization,
not to be mixed with

00:25:11.667 --> 00:25:14.300
the data tables
that we just saw.

00:25:14.300 --> 00:25:16.234
It's a very rich table,
actually, you can--

00:25:16.234 --> 00:25:20.367
the user can select rows
and sort them

00:25:20.367 --> 00:25:22.934
and get select event
when something--

00:25:22.934 --> 00:25:24.300
when the user interacts
with it.

00:25:24.300 --> 00:25:25.934
You can customize it
very well.

00:25:25.934 --> 00:25:28.234
It's a very nice tool.

00:25:28.234 --> 00:25:32.968
I want to show you
the source of this page.

00:25:32.968 --> 00:25:34.667
So you can see here that I--

00:25:34.667 --> 00:25:38.200
in the middle
I just send a query

00:25:38.200 --> 00:25:41.467
to the remote data source
called Simple Table.

00:25:41.467 --> 00:25:45.200
Make this big
so you can read it.

00:25:45.200 --> 00:25:49.667
So I send here a request
to Simple Table.

00:25:49.667 --> 00:25:53.567
This is a servlet that
we saw before on the other page.

00:25:53.567 --> 00:25:58.067
And I get the query--
sorry for that.

00:25:58.067 --> 00:26:00.634
I send the query,
and when the response back--

00:26:00.634 --> 00:26:04.267
coming back, I just get
the data from the response,

00:26:04.267 --> 00:26:07.467
and process it
as if it's a normal data table.

00:26:10.067 --> 00:26:12.467
And now I go on to
the CSV file.

00:26:12.467 --> 00:26:15.267
So again we see here
the same thing.

00:26:15.267 --> 00:26:17.267
The URL--
see the URL on top,

00:26:17.267 --> 00:26:21.934
so it's myweb.csv--
slash csv,

00:26:21.934 --> 00:26:24.601
but then I add another
parameter, URL parameter

00:26:24.601 --> 00:26:26.100
called URL in this case,

00:26:26.100 --> 00:26:29.801
which is the URL of
the CSV file.

00:26:29.801 --> 00:26:32.834
So if I go to this file...

00:26:35.901 --> 00:26:40.133
I just open a new window...

00:26:40.133 --> 00:26:41.801
you can see just
a simple CSV file.

00:26:41.801 --> 00:26:43.601
You can work with it,
you can do anything,

00:26:43.601 --> 00:26:45.834
you can visualize data,
you can process it.

00:26:45.834 --> 00:26:47.734
But with this tool now,

00:26:47.734 --> 00:26:51.100
I have this CSV file
as a data source.

00:26:51.100 --> 00:26:54.267
So I can add here--
sorry.

00:27:02.400 --> 00:27:07.601
tqx.html...

00:27:07.601 --> 00:27:09.300
and you see the same data--

00:27:09.300 --> 00:27:13.534
this as a data table
that you can work with.

00:27:13.534 --> 00:27:14.934
Let's do this.

00:27:14.934 --> 00:27:16.467
I go to this playground,

00:27:16.467 --> 00:27:20.234
which is a nice tool
that there is for all of the--

00:27:20.234 --> 00:27:21.934
exists for all of
the Google APIs.

00:27:21.934 --> 00:27:23.133
But in this case,

00:27:23.133 --> 00:27:24.934
what I wanted to show you
is that I create--

00:27:24.934 --> 00:27:29.634
I take this org chart and
I take this data from this URL.

00:27:29.634 --> 00:27:31.300
So I just place this URL

00:27:31.300 --> 00:27:35.868
as your data source URL
for a query.

00:27:35.868 --> 00:27:38.534
You get to your response,
this table,

00:27:38.534 --> 00:27:41.634
and I use this table to build
an organizational chart.

00:27:41.634 --> 00:27:43.367
As you can see here,
the same data--

00:27:43.367 --> 00:27:48.133
this is the data
taken from the CSV file.

00:27:55.767 --> 00:27:59.968
And going back here...

00:27:59.968 --> 00:28:03.434
So a few last things.

00:28:06.200 --> 00:28:08.033
First of all about the query.

00:28:08.033 --> 00:28:11.200
So you saw that the query
working here,

00:28:11.200 --> 00:28:14.200
but I didn't do anything
with it.

00:28:14.200 --> 00:28:19.901
So the default mode
is that we assume that

00:28:19.901 --> 00:28:23.267
you don't know how to do
the query language,

00:28:23.267 --> 00:28:24.901
which is true in most cases.

00:28:24.901 --> 00:28:27.834
So what we are doing
is we're taking the data tables

00:28:27.834 --> 00:28:30.601
that you generate on your side
after--

00:28:30.601 --> 00:28:33.601
that you return in the generate
data table function.

00:28:33.601 --> 00:28:37.000
And on top of this data table,

00:28:37.000 --> 00:28:40.901
we apply the query that
the user specified.

00:28:40.901 --> 00:28:42.067
But in some cases,

00:28:42.067 --> 00:28:44.334
you might want to do it
from your side.

00:28:44.334 --> 00:28:46.734
A good example is that--

00:28:46.734 --> 00:28:49.901
let's say that you have
very huge table.

00:28:49.901 --> 00:28:52.734
And you don't want to return
to create all of it

00:28:52.734 --> 00:28:54.934
because it has,
I don't know, maybe it froze.

00:28:54.934 --> 00:28:57.567
And you do know how
to filter them.

00:28:57.567 --> 00:28:59.434
So if you want to--
if the user specified,

00:28:59.434 --> 00:29:03.133
I don't know,
some values of some row limit,

00:29:03.133 --> 00:29:04.767
you do want to get
this information

00:29:04.767 --> 00:29:06.934
and do it on your own,
on your side.

00:29:06.934 --> 00:29:08.100
So you can do it.

00:29:08.100 --> 00:29:10.968
You can take the query
and apply the parse

00:29:10.968 --> 00:29:12.934
that you know how to apply
on your side

00:29:12.934 --> 00:29:14.501
before you return
the data table

00:29:14.501 --> 00:29:16.934
to the library from
this table--

00:29:16.934 --> 00:29:18.734
from this method.

00:29:18.734 --> 00:29:21.467
But in this case,
you have to override a method

00:29:21.467 --> 00:29:24.667
called GetCapabilities.

00:29:24.667 --> 00:29:27.634
So you just--
this one here.

00:29:27.634 --> 00:29:29.467
The default is none.

00:29:29.467 --> 00:29:30.701
But if you know that
you can--

00:29:30.701 --> 00:29:33.667
you know how to select rows
or select columns

00:29:33.667 --> 00:29:36.234
or any other thing,
you should mention it.

00:29:36.234 --> 00:29:41.434
So we don't do the same thing
on top of your data table.

00:29:41.434 --> 00:29:46.634
So this is one thing and...

00:29:46.634 --> 00:29:49.701
this is the Data Source
servlet.

00:29:49.701 --> 00:29:52.801
You see that the only thing
that you have to do

00:29:52.801 --> 00:29:54.501
after you implement it

00:29:54.501 --> 00:29:58.534
is to override the generate
data table method,

00:29:58.534 --> 00:29:59.868
which is defined

00:29:59.868 --> 00:30:04.167
in the data table
generator interface.

00:30:04.167 --> 00:30:07.968
And maybe the last
important thing

00:30:07.968 --> 00:30:11.300
in this library for now

00:30:11.300 --> 00:30:14.601
is this class called
Data Source helper.

00:30:14.601 --> 00:30:16.968
So it is--

00:30:16.968 --> 00:30:20.133
this class is the main API
that you need to use

00:30:20.133 --> 00:30:22.067
if you don't want to just
implement a servlet,

00:30:22.067 --> 00:30:24.801
as we saw before.

00:30:24.801 --> 00:30:26.234
Let's say that
you don't use servlets.

00:30:26.234 --> 00:30:29.534
You use maybe,
I don't know, any kind of--

00:30:29.534 --> 00:30:33.501
another framework you see
or any other thing

00:30:33.501 --> 00:30:36.868
that you don't work with
with simple servlets.

00:30:36.868 --> 00:30:39.334
So this is like
a lower level API.

00:30:39.334 --> 00:30:41.701
You can do everything
from here,

00:30:41.701 --> 00:30:45.367
and this is being used
by the servlet we saw before.

00:30:45.367 --> 00:30:46.567
The way it's implemented,

00:30:46.567 --> 00:30:51.801
it has a few sets
of static methods

00:30:51.801 --> 00:30:53.767
that deals with several,
as you can see here,

00:30:53.767 --> 00:30:57.133
deal with servlet
or deal with how to create

00:30:57.133 --> 00:31:00.834
the response or how to apply
the query language

00:31:00.834 --> 00:31:03.767
at the bottom here.

00:31:03.767 --> 00:31:05.133
It tells everything
that you need

00:31:05.133 --> 00:31:06.501
in order to work with it.

00:31:06.501 --> 00:31:09.033
So you don't really need to care
about all of the classes

00:31:09.033 --> 00:31:11.100
in this library.

00:31:11.100 --> 00:31:12.901
This is your main API.

00:31:12.901 --> 00:31:14.701
If you use it
and there are examples,

00:31:14.701 --> 00:31:16.501
you can see how it's used.

00:31:16.501 --> 00:31:18.968
You can work--

00:31:18.968 --> 00:31:20.501
if you need not to work
with servlet

00:31:20.501 --> 00:31:21.934
but with some other stuff,

00:31:21.934 --> 00:31:24.000
then this is the way
that you should use it.

00:31:24.000 --> 00:31:25.567
This is the class to use,

00:31:25.567 --> 00:31:27.567
and I just close everything
so you can see the method,

00:31:27.567 --> 00:31:30.767
but as you see here,
they are documented quite well.

00:31:30.767 --> 00:31:33.067
And again, it's open source

00:31:33.067 --> 00:31:35.467
so you can see
the actual implementation.

00:31:35.467 --> 00:31:39.400
So this is very useful.

00:31:45.901 --> 00:31:50.000
I think that's about it
for now.

00:31:50.000 --> 00:31:52.501
I want to call Jesse Lorenz
from Salesforce.

00:31:52.501 --> 00:31:55.167
They implemented their own
data source,

00:31:55.167 --> 00:31:57.033
and he will explain about it
now.

00:31:57.033 --> 00:31:58.267
Thank you.

00:31:58.267 --> 00:32:03.501
Lorenz: Thank you, Itai.

00:32:03.501 --> 00:32:05.234
So my name is Jesse Lorenz,

00:32:05.234 --> 00:32:08.534
and I'm a technical evangelist
from salesforce.com.

00:32:08.534 --> 00:32:11.501
And I primarily work with
independent software vendors

00:32:11.501 --> 00:32:14.400
that are looking to build
an architect application

00:32:14.400 --> 00:32:16.934
on the force.com platform.

00:32:16.934 --> 00:32:19.033
So some of you might not
be entirely familiar

00:32:19.033 --> 00:32:21.734
with salesforce.com and
the force.com platform,

00:32:21.734 --> 00:32:23.133
so I'm gonna use just--

00:32:23.133 --> 00:32:25.267
let me go through a little bit
of terminology right now,

00:32:25.267 --> 00:32:26.601
so we're all on the same page.

00:32:26.601 --> 00:32:30.167
But before I do that,
I want to talk about--

00:32:30.167 --> 00:32:32.067
I want to tell you
what I'm gonna talk about today.

00:32:32.067 --> 00:32:35.100
So there's really two paths

00:32:35.100 --> 00:32:37.033
of the Google visualization
API.

00:32:37.033 --> 00:32:39.334
So there's actually
the visualizations themselves,

00:32:39.334 --> 00:32:41.067
the annotated timelines,
the heat maps,

00:32:41.067 --> 00:32:43.033
all that good stuff.

00:32:43.033 --> 00:32:45.334
And then as Itai spent a lot
of time talking about today,

00:32:45.334 --> 00:32:47.000
there's also the data sources.

00:32:47.000 --> 00:32:48.467
So back in November,

00:32:48.467 --> 00:32:51.334
Google and salesforce.com
started a partnership,

00:32:51.334 --> 00:32:55.234
and we released a set
of components that allow you

00:32:55.234 --> 00:32:57.801
to imbed the Google
visualizations inside of

00:32:57.801 --> 00:33:01.367
your force.com
or Salesforce CRM apps.

00:33:01.367 --> 00:33:04.334
Today I'm really excited
to announce that salesforce.com

00:33:04.334 --> 00:33:08.167
is also now a Google
visualization data source.

00:33:08.167 --> 00:33:09.901
So we'll talk about that
in a little bit more depth

00:33:09.901 --> 00:33:11.767
in a moment.

00:33:11.767 --> 00:33:13.000
But first,
just to make sure

00:33:13.000 --> 00:33:14.634
everyone's on the same page
with me here,

00:33:14.634 --> 00:33:16.968
Salesforce CRM is our suite

00:33:16.968 --> 00:33:20.000
of customer relationship
management applications.

00:33:20.000 --> 00:33:23.267
We've got over a million users
that are using it today

00:33:23.267 --> 00:33:26.300
to market and sell
and support

00:33:26.300 --> 00:33:29.100
their products
more effectively.

00:33:29.100 --> 00:33:32.434
Now below that is
the force.com platform

00:33:32.434 --> 00:33:34.267
and infrastructure.

00:33:34.267 --> 00:33:38.234
So force.com allows developers
to go ahead and build

00:33:38.234 --> 00:33:41.467
their own applications
on top of our infrastructure.

00:33:41.467 --> 00:33:43.367
So this is very similar
to what Google's done

00:33:43.367 --> 00:33:46.067
with Google App Engine
in allowing you to build

00:33:46.067 --> 00:33:48.334
applications on top
of Google's infrastructure.

00:33:48.334 --> 00:33:49.667
That's what force.com is.

00:33:49.667 --> 00:33:51.634
It lets you build
your own business applications

00:33:51.634 --> 00:33:54.400
on top of our infrastructure.

00:33:54.400 --> 00:33:55.901
So I'm gonna talk about

00:33:55.901 --> 00:33:58.400
two components of force.com
today.

00:33:58.400 --> 00:34:01.334
So force.com is a complete
development stack.

00:34:01.334 --> 00:34:03.968
It's delivered on demand
as a service.

00:34:03.968 --> 00:34:05.400
And I'm gonna talk about
two components today.

00:34:05.400 --> 00:34:07.000
One is Visualforce.

00:34:07.000 --> 00:34:09.367
And Visualforce is what
we refer to as

00:34:09.367 --> 00:34:11.300
our user interface
as a service.

00:34:11.300 --> 00:34:14.000
It's our markup language
that provides you

00:34:14.000 --> 00:34:15.567
with a bunch of pre-built
components

00:34:15.567 --> 00:34:19.133
that ultimately
gets translated into HTML.

00:34:19.133 --> 00:34:21.501
And then we're also
gonna talk about Apex,

00:34:21.501 --> 00:34:24.901
which is one portion
of our logic as a service layer.

00:34:24.901 --> 00:34:28.067
And it actually allows you
to write and run code

00:34:28.067 --> 00:34:30.167
on our servers on demand.

00:34:30.167 --> 00:34:31.601
It's a very Java-like
language.

00:34:31.601 --> 00:34:34.501
You'll see a lot of similarities
here in a moment.

00:34:34.501 --> 00:34:37.000
So enough talking.

00:34:37.000 --> 00:34:38.334
I want to show you
some of the demos.

00:34:38.334 --> 00:34:40.067
Hopefully,
that's enough background.

00:34:40.067 --> 00:34:42.033
And the first thing
that I want to show you

00:34:42.033 --> 00:34:44.434
is how we're already using
the visualizations

00:34:44.434 --> 00:34:49.234
inside of Salesforce today.

00:34:49.234 --> 00:34:50.767
So here's my login.

00:34:50.767 --> 00:34:56.133
I'm gonna log in to
a sample org for Salesforce.

00:34:56.133 --> 00:34:58.234
And what you can see
is that Salesforce

00:34:58.234 --> 00:35:00.501
actually has its own
analytics engine.

00:35:00.501 --> 00:35:02.334
We allow you
to do reporting

00:35:02.334 --> 00:35:03.968
and to create
your own visualizations

00:35:03.968 --> 00:35:05.801
just by pointing
and clicking.

00:35:05.801 --> 00:35:07.334
We've got gauges, pie charts.

00:35:07.334 --> 00:35:10.000
Pretty much all
the standard visualizations.

00:35:10.000 --> 00:35:11.567
But one of the really
exciting things

00:35:11.567 --> 00:35:14.267
is that with our new release
coming out in June

00:35:14.267 --> 00:35:16.634
in just a few weeks from now,

00:35:16.634 --> 00:35:19.868
you can actually embed
Visualforce pages

00:35:19.868 --> 00:35:21.767
inside of your dashboards
as well.

00:35:21.767 --> 00:35:23.133
And this is an example

00:35:23.133 --> 00:35:25.334
of the annotated
timeline component

00:35:25.334 --> 00:35:28.767
inside of a Visualforce page
displayed on your dashboard.

00:35:28.767 --> 00:35:30.300
And as you can see here,

00:35:30.300 --> 00:35:32.033
we've got two different
salespeople,

00:35:32.033 --> 00:35:33.267
and you can see that
they have

00:35:33.267 --> 00:35:35.534
fairly widely divergent
performance.

00:35:35.534 --> 00:35:37.334
And so if we want to,
we can zoom in,

00:35:37.334 --> 00:35:40.467
we can take a look
and start playing with

00:35:40.467 --> 00:35:42.100
the annotated timeline

00:35:42.100 --> 00:35:44.400
just like
you're used to using it.

00:35:44.400 --> 00:35:46.667
And so this makes our dashboards
even more interactive.

00:35:46.667 --> 00:35:49.801
We think it's really great
to have Google visualizations

00:35:49.801 --> 00:35:55.667
inside of Salesforce.

00:35:55.667 --> 00:35:57.400
So I did the demo.

00:35:57.400 --> 00:35:59.200
And also,
I'm really excited.

00:35:59.200 --> 00:36:01.467
This opens up brand new
use cases

00:36:01.467 --> 00:36:03.934
to the force.com
development community.

00:36:03.934 --> 00:36:06.667
I'm really excited to announce
that force.com

00:36:06.667 --> 00:36:09.234
is now a Google visualization
data source.

00:36:09.234 --> 00:36:14.000
So what I'm gonna focus on today
is unauthenticated access

00:36:14.000 --> 00:36:17.267
to your force.com
or your Salesforce CRM data.

00:36:17.267 --> 00:36:18.868
So I think this is really neat

00:36:18.868 --> 00:36:21.400
because I think what
we've seen recently

00:36:21.400 --> 00:36:23.267
is that there's really
a move towards

00:36:23.267 --> 00:36:26.033
greater transparency
in our society.

00:36:26.033 --> 00:36:28.234
So I think you might have seen
that Google released

00:36:28.234 --> 00:36:32.067
the ability to go in
and drill into housing data,

00:36:32.067 --> 00:36:34.834
housing sales price data,
and unemployment data

00:36:34.834 --> 00:36:36.133
across the nation.

00:36:36.133 --> 00:36:38.334
And so you can start
going in and looking at that.

00:36:38.334 --> 00:36:41.133
And recently, data.gov
was just released as well,

00:36:41.133 --> 00:36:44.133
which exposes a whole bunch more
census data.

00:36:44.133 --> 00:36:46.334
And so people are able
to go in,

00:36:46.334 --> 00:36:47.534
look at that data,
visualize it,

00:36:47.534 --> 00:36:49.000
and understand it more.

00:36:49.000 --> 00:36:51.434
And this is another step
toward that transparency.

00:36:51.434 --> 00:36:53.000
And now companies
can actually go out

00:36:53.000 --> 00:36:54.767
and start exposing
their internal data.

00:36:54.767 --> 00:36:56.234
And we thought about this.

00:36:56.234 --> 00:36:58.100
We thought, "Boy, there's just
a whole bunch of use cases

00:36:58.100 --> 00:37:00.434
that are really interesting
here."

00:37:00.434 --> 00:37:02.267
So if you're in marketing

00:37:02.267 --> 00:37:04.501
and you're putting on
a conference like Google I/O,

00:37:04.501 --> 00:37:06.834
you might want to put out
a heat map that shows where

00:37:06.834 --> 00:37:08.934
all your different users
are coming from

00:37:08.934 --> 00:37:10.400
so that they can figure out
if they're gonna be able

00:37:10.400 --> 00:37:11.567
to make connections from

00:37:11.567 --> 00:37:13.300
their home stage
or their home country.

00:37:13.300 --> 00:37:14.467
You know if you're in sales,

00:37:14.467 --> 00:37:17.000
you might want to expose
your product list.

00:37:17.000 --> 00:37:19.067
You might want to expose
your most popular products

00:37:19.067 --> 00:37:21.000
just like Amazon does, right?

00:37:21.000 --> 00:37:24.467
They list the top books
that are being sold today.

00:37:24.467 --> 00:37:27.467
With force.com as
a visualization data source,

00:37:27.467 --> 00:37:28.634
that's really easy.

00:37:28.634 --> 00:37:29.767
That's ten lines of code.

00:37:29.767 --> 00:37:32.100
Your company can do that
as well.

00:37:32.100 --> 00:37:34.334
And finally, the use case
that I'm gonna go through today

00:37:34.334 --> 00:37:37.300
is also being able
to expose your support data.

00:37:37.300 --> 00:37:38.801
So the sample that
I'm gonna walk through

00:37:38.801 --> 00:37:42.000
in just a moment here
is actually at a call center

00:37:42.000 --> 00:37:44.501
where you can actually start
to expose your call volumes

00:37:44.501 --> 00:37:49.067
proactively to your users.

00:37:49.067 --> 00:37:52.601
So let's take a look at
what that might be.

00:37:52.601 --> 00:37:54.367
So I've mocked this up

00:37:54.367 --> 00:37:56.901
for the California Department
of Motor Vehicles.

00:37:56.901 --> 00:37:59.767
This isn't real.
This is a demo.

00:37:59.767 --> 00:38:01.834
They're not doing this today.

00:38:01.834 --> 00:38:04.067
But you can see that
here's the page, right?

00:38:04.067 --> 00:38:06.601
So if I wanted to call the DMV,
you could use that number.

00:38:06.601 --> 00:38:08.767
You could do that right now
if you're really bored.

00:38:08.767 --> 00:38:10.567
But the call volume for today

00:38:10.567 --> 00:38:12.434
can be displayed down at
the bottom.

00:38:12.434 --> 00:38:14.234
And this is really interesting,
right?

00:38:14.234 --> 00:38:15.667
For two reasons.

00:38:15.667 --> 00:38:18.467
Because if I'm calling the DMV,
I can take a look and say,

00:38:18.467 --> 00:38:20.000
"All right, it looks like
it might be a bad time

00:38:20.000 --> 00:38:21.334
"to call the DMV.

00:38:21.334 --> 00:38:22.868
"I don't really want
to sit on the phone.

00:38:22.868 --> 00:38:25.067
"I'm probably just gonna
call tomorrow morning at 8:00.

00:38:25.067 --> 00:38:26.901
"I'll get right in,
I'll talk to someone.

00:38:26.901 --> 00:38:28.367
I'll be done."

00:38:28.367 --> 00:38:29.534
It's also an advantage

00:38:29.534 --> 00:38:30.901
because if people
start doing that,

00:38:30.901 --> 00:38:32.400
then the utilization
of your call center

00:38:32.400 --> 00:38:34.634
should smooth out, right?

00:38:34.634 --> 00:38:37.334
So I think this is
a really powerful example

00:38:37.334 --> 00:38:38.834
of your data source.

00:38:38.834 --> 00:38:40.667
If you're using your internal
Salesforce CRM

00:38:40.667 --> 00:38:42.100
or force.com data,

00:38:42.100 --> 00:38:45.667
and exposing it to
the public.

00:38:45.667 --> 00:38:47.100
And so I want to show you
how easy that is.

00:38:47.100 --> 00:38:49.934
And to do that,
we can look at the page source

00:38:49.934 --> 00:38:51.100
for this page.

00:38:51.100 --> 00:38:52.634
I've simplified it
a little bit here

00:38:52.634 --> 00:38:54.567
so that we can all
understand it.

00:38:54.567 --> 00:38:57.467
But up at the top, we've got
some really basic styling.

00:38:57.467 --> 00:38:59.000
And the interesting parts

00:38:59.000 --> 00:39:02.133
are really this JavaScript here,
right?

00:39:02.133 --> 00:39:05.033
So we're gonna load
the JavaScript API

00:39:05.033 --> 00:39:06.968
for the visualizations.

00:39:06.968 --> 00:39:10.033
And then we're also going to--

00:39:10.033 --> 00:39:12.567
what Itai showed before,
we're also gonna create

00:39:12.567 --> 00:39:13.968
this query object.

00:39:13.968 --> 00:39:16.767
And again, here's the URL
to our data source.

00:39:16.767 --> 00:39:18.634
And this is public.
You can go to this right now.

00:39:18.634 --> 00:39:19.968
I'd encourage you not to

00:39:19.968 --> 00:39:22.767
since it's kind of
a small developer instance.

00:39:22.767 --> 00:39:25.167
But we can actually--

00:39:25.167 --> 00:39:28.167
we can take this data source
right here--

00:39:28.167 --> 00:39:30.267
copy that "E" as well--

00:39:30.267 --> 00:39:34.501
and we can see the data
that's being returned

00:39:34.501 --> 00:39:36.167
by this endpoint.

00:39:36.167 --> 00:39:38.267
And so there it is.
So--

00:39:38.267 --> 00:39:39.501
And we didn't have to
do anything

00:39:39.501 --> 00:39:40.767
in order to generate this.

00:39:40.767 --> 00:39:42.534
This is all being generated
for us.

00:39:42.534 --> 00:39:46.901
And if we want to see
what that looks like visually,

00:39:46.901 --> 00:39:50.767
we can go over to iGoogle
here.

00:39:50.767 --> 00:39:55.200
And we can drag our force.com
data source

00:39:55.200 --> 00:39:58.734
into a gadget on iGoogle.

00:39:58.734 --> 00:40:02.434
So paste the URL there.

00:40:02.434 --> 00:40:05.501
And we'll hit Save.

00:40:05.501 --> 00:40:07.767
And you can see all
the different fields

00:40:07.767 --> 00:40:11.300
that are available to us
at this endpoint.

00:40:11.300 --> 00:40:12.701
But one of the things
that we've done

00:40:12.701 --> 00:40:16.367
is we've actually
added a query,

00:40:16.367 --> 00:40:19.000
or we've implemented
parts of the query language here

00:40:19.000 --> 00:40:21.300
so that you can start
filtering and you can specify

00:40:21.300 --> 00:40:22.767
the columns that
you want to return,

00:40:22.767 --> 00:40:24.534
you can specify order bys
and limits

00:40:24.534 --> 00:40:26.634
and things like that.

00:40:26.634 --> 00:40:29.501
And so to give you
an example of that,

00:40:29.501 --> 00:40:33.767
I will add that tq parameter
that Itai mentioned before,

00:40:33.767 --> 00:40:38.701
and we'll select the hour

00:40:38.701 --> 00:40:44.167
and the number of calls.

00:40:44.167 --> 00:40:49.701
Oops.

00:40:49.701 --> 00:40:52.300
Oh. Looks like we've got
an error there.

00:40:52.300 --> 00:40:55.534
So that was really simple.

00:40:55.534 --> 00:40:57.701
So that was really simple
to do, to wire that up,

00:40:57.701 --> 00:40:59.400
that visualization.

00:40:59.400 --> 00:41:01.901
But let me show you
the code that we had to write.

00:41:01.901 --> 00:41:03.000
And I'm gonna go in.

00:41:03.000 --> 00:41:04.968
This is the force.com IDE.

00:41:04.968 --> 00:41:07.067
This is the integrated
development environment

00:41:07.067 --> 00:41:09.667
for force.com applications.

00:41:09.667 --> 00:41:13.167
And I'm gonna go to that page.

00:41:13.167 --> 00:41:15.133
My endpoint there called
volume.

00:41:15.133 --> 00:41:17.234
And you can see there's
not a lot on this page.

00:41:17.234 --> 00:41:18.501
This is Visualforce here.

00:41:18.501 --> 00:41:21.334
It might be unfamiliar
but we can understand it.

00:41:21.334 --> 00:41:24.434
So the important thing here
is that there's a controller

00:41:24.434 --> 00:41:26.100
behind this page
that follows the model-view-

00:41:26.100 --> 00:41:27.601
controller architecture.

00:41:27.601 --> 00:41:28.767
There's a controller

00:41:28.767 --> 00:41:31.901
called call volume
data source controller.

00:41:31.901 --> 00:41:34.868
And through this syntax,
we're calling a method

00:41:34.868 --> 00:41:37.200
called GetResponse.

00:41:37.200 --> 00:41:38.601
And so if we take a look at

00:41:38.601 --> 00:41:41.000
that controller that's behind
our Visualforce page,

00:41:41.000 --> 00:41:43.534
we can look at the methods
that we had to implement

00:41:43.534 --> 00:41:46.067
in order to expose
this data source.

00:41:46.067 --> 00:41:47.400
So there's two methods here.

00:41:47.400 --> 00:41:48.534
There's get table name.

00:41:48.534 --> 00:41:51.968
So I'm querying
the call volume table.

00:41:51.968 --> 00:41:54.667
And then I've also exposed
a list of default columns,

00:41:54.667 --> 00:41:55.968
and I've got five here--

00:41:55.968 --> 00:41:57.968
the I.D. of the record,
the name of the record,

00:41:57.968 --> 00:42:00.501
date, hour, and the number
of calls.

00:42:00.501 --> 00:42:02.634
So that's pretty much
all you have to do

00:42:02.634 --> 00:42:05.801
from a code perspective
to expose a data source

00:42:05.801 --> 00:42:09.767
at force.com as a data source
to Google visualizations.

00:42:09.767 --> 00:42:11.667
One of the things
that I haven't shown here

00:42:11.667 --> 00:42:13.100
is that there's also
some security

00:42:13.100 --> 00:42:14.968
that you're gonna need
to set up, of course.

00:42:14.968 --> 00:42:16.200
You probably don't want
to go and expose

00:42:16.200 --> 00:42:18.434
all of your accounts
and contacts and leads

00:42:18.434 --> 00:42:20.300
to the public internet.

00:42:20.300 --> 00:42:21.567
And so you can do that.

00:42:21.567 --> 00:42:23.734
You can prevent that
from happening by just going in

00:42:23.734 --> 00:42:26.567
and setting
the security settings

00:42:26.567 --> 00:42:28.334
using our default
implementation,

00:42:28.334 --> 00:42:33.033
our tried and true tested
decade-old security methodology.

00:42:33.033 --> 00:42:36.667
And so none of what you see here
is actually security code.

00:42:36.667 --> 00:42:39.567
You don't have to worry
about that at all.

00:42:39.567 --> 00:42:41.734
So I'm very excited
about this.

00:42:41.734 --> 00:42:42.901
I'm very excited about
the fact

00:42:42.901 --> 00:42:45.033
that with just about
ten lines of code

00:42:45.033 --> 00:42:47.567
you can start making
your force.com applications

00:42:47.567 --> 00:42:50.901
into data sources as well
for Google visualizations.

00:42:50.901 --> 00:42:53.400
And if you'd like
to learn more,

00:42:53.400 --> 00:42:57.067
I would encourage you
to go to developerforce.com.

00:43:00.133 --> 00:43:01.434
And I think we're ready
for questions.

00:43:01.434 --> 00:43:06.300
Is that right, Itai?

00:43:06.300 --> 00:43:09.701
Raz: So...

00:43:18.367 --> 00:43:20.267
And that's about it.

00:43:20.267 --> 00:43:22.968
So again, if you need
any more information, so--

00:43:22.968 --> 00:43:26.801
there is detailed documentation
and many examples,

00:43:26.801 --> 00:43:29.067
user group and everything
on our side.

00:43:29.067 --> 00:43:31.634
Just Google
for Google visualization.

00:43:31.634 --> 00:43:33.767
I hope you'll find it useful.
Thank you.

00:43:33.767 --> 00:43:35.200
And if you have any questions.

00:43:35.200 --> 00:43:39.801
[applause]

00:43:39.801 --> 00:43:41.200
Lorenz: And I think if
you do have questions,

00:43:41.200 --> 00:43:42.534
it would be great if
you could use the microphone

00:43:42.534 --> 00:43:44.534
for the recording.

00:43:44.534 --> 00:43:48.234
man: So with the querying
over the data sources,

00:43:48.234 --> 00:43:51.000
are there WHERE clauses
in that query syntax?

00:43:51.000 --> 00:43:52.534
Raz: Yeah.

00:43:52.534 --> 00:43:54.033
man: And if it's implemented
over a CSV file,

00:43:54.033 --> 00:43:56.334
say, through
the Java library,

00:43:56.334 --> 00:43:58.901
are indexes built
for very large files,

00:43:58.901 --> 00:44:01.601
and where are those
indexes stored?

00:44:01.601 --> 00:44:04.534
Raz: So no, there is
no indexing for CSV files

00:44:04.534 --> 00:44:06.000
at the moment.

00:44:06.000 --> 00:44:08.167
Not in the implementation
that there is in the library.

00:44:08.167 --> 00:44:09.934
Again, it's open source,

00:44:09.934 --> 00:44:11.067
so it's something that can be
added later

00:44:11.067 --> 00:44:14.901
or by your own,
but there is no indexing.

00:44:14.901 --> 00:44:17.701
But yes, there is
a WHERE clause.

00:44:17.701 --> 00:44:21.300
You can filter out with WHERE
and there is ordering--

00:44:21.300 --> 00:44:24.934
order by group, by pivot,
column selection,

00:44:24.934 --> 00:44:26.334
calculate the column,
and so on.

00:44:26.334 --> 00:44:28.067
man: Okay, so it would be
pretty straightforward.

00:44:28.067 --> 00:44:29.534
There's a method
that you could override

00:44:29.534 --> 00:44:32.033
that does probably
a linear search right now,

00:44:32.033 --> 00:44:35.868
but you could have it
use an index instead.

00:44:35.868 --> 00:44:37.901
Raz: So the index
that you'd like to use,

00:44:37.901 --> 00:44:40.434
I guess, is when you build
the data table

00:44:40.434 --> 00:44:45.300
from the CSV file,

00:44:45.300 --> 00:44:47.434
but now it's not implemented
with anything.

00:44:47.434 --> 00:44:50.901
man: Okay, thank you.

00:44:50.901 --> 00:44:53.267
man: Instead of taking us
through a SQL query,

00:44:53.267 --> 00:44:56.734
could you call
a stall procedure?

00:44:56.734 --> 00:44:58.567
Raz: No.

00:44:58.567 --> 00:45:01.934
So the current implementation
for MySQL

00:45:01.934 --> 00:45:04.000
means that you have
to specify the tables

00:45:04.000 --> 00:45:05.834
that you want to use.

00:45:05.834 --> 00:45:09.968
The good way to create
kind of the--

00:45:09.968 --> 00:45:11.567
to use stall procedure,
I believe,

00:45:11.567 --> 00:45:15.000
is to create a dynamic view
on the SQL side.

00:45:15.000 --> 00:45:19.601
You can define a view
with some pretty fine selection,

00:45:19.601 --> 00:45:23.100
and then you can refer to it
as a table.

00:45:23.100 --> 00:45:26.501
So that would be it.

00:45:29.200 --> 00:45:30.868
Yes?

00:45:30.868 --> 00:45:32.300
man: I have two questions.

00:45:32.300 --> 00:45:34.234
First one, just a general
historical question

00:45:34.234 --> 00:45:36.367
about the protocol.

00:45:36.367 --> 00:45:38.634
I was investigating, and
I know that there's something

00:45:38.634 --> 00:45:40.534
called the DAP protocol

00:45:40.534 --> 00:45:42.701
and also something called
OPeNDAP,

00:45:42.701 --> 00:45:47.667
which is used in applications
for weather data

00:45:47.667 --> 00:45:50.534
and also been applied
to astronomy data

00:45:50.534 --> 00:45:52.200
and things like that.

00:45:52.200 --> 00:45:54.067
And I'm wondering
if there's been some--

00:45:54.067 --> 00:45:55.300
you're shaking your head no,

00:45:55.300 --> 00:45:56.801
so you probably
didn't inves--

00:45:56.801 --> 00:45:58.100
or maybe you're not familiar
with that.

00:45:58.100 --> 00:45:59.300
But I'm wondering if
there's something that

00:45:59.300 --> 00:46:02.934
was kind of a predecessor
or it was used as

00:46:02.934 --> 00:46:05.801
an inspiration for
the protocol that's used

00:46:05.801 --> 00:46:09.834
just to put it into context
for what--

00:46:09.834 --> 00:46:12.234
so it's sort of generated
fresh from the ground up then?

00:46:12.234 --> 00:46:13.467
Raz: Probably.
man: Okay.

00:46:13.467 --> 00:46:16.400
Then the second question is,
if there's--

00:46:16.400 --> 00:46:19.567
if we have a lot of data
that is not stored

00:46:19.567 --> 00:46:23.667
in the CSV format,
so just a custom binary format,

00:46:23.667 --> 00:46:25.267
what would be the technique

00:46:25.267 --> 00:46:28.734
that we could use to make it
available for visualization?

00:46:28.734 --> 00:46:31.968
Raz: So as we saw before,
you can just

00:46:31.968 --> 00:46:34.734
implement the generate
data table

00:46:34.734 --> 00:46:37.701
and you'll have to build
your own code.

00:46:37.701 --> 00:46:40.033
But the nice thing is
all you have to do is

00:46:40.033 --> 00:46:42.701
to generate a code
that takes this internal format

00:46:42.701 --> 00:46:45.767
that you know
and create a data table object.

00:46:45.767 --> 00:46:47.167
man: All right.

00:46:47.167 --> 00:46:49.634
Raz: So you can take a look
at just the CSV implementation,

00:46:49.634 --> 00:46:53.067
which is, by the way,
using some external code

00:46:53.067 --> 00:46:54.767
called opencsv.

00:46:54.767 --> 00:46:57.167
So it's an open source--

00:46:57.167 --> 00:46:59.801
but generally speaking,
it's quite simple.

00:46:59.801 --> 00:47:01.667
All you have--
if you already have the data

00:47:01.667 --> 00:47:03.100
and you know how
to modulate it

00:47:03.100 --> 00:47:06.701
to be a two-dimensional
table,

00:47:06.701 --> 00:47:07.968
then you're set.

00:47:07.968 --> 00:47:09.400
Build the actual Java coding

00:47:09.400 --> 00:47:11.701
that needs to build
the data table

00:47:11.701 --> 00:47:14.067
and add rows and columns
is very simple.

00:47:14.067 --> 00:47:17.467
man: Right.

00:47:17.467 --> 00:47:18.734
man: Hi.

00:47:18.734 --> 00:47:21.000
Just a quick question about
the query language.

00:47:21.000 --> 00:47:22.701
If I have a really dumb
data source

00:47:22.701 --> 00:47:25.334
that I create myself
that's just producing

00:47:25.334 --> 00:47:28.300
the JSON format for
the columns and the rows

00:47:28.300 --> 00:47:29.567
with the data in it,

00:47:29.567 --> 00:47:32.267
can I use the query language
on that?

00:47:32.267 --> 00:47:34.901
Is that understanding correct?

00:47:34.901 --> 00:47:38.801
That I can actually query
against a data source

00:47:38.801 --> 00:47:40.434
that doesn't actually
implement

00:47:40.434 --> 00:47:41.868
any of the query language?

00:47:41.868 --> 00:47:44.033
Raz: So this is a data source
that you implemented?

00:47:44.033 --> 00:47:45.133
man: Yes.

00:47:45.133 --> 00:47:47.133
Raz: So it will not work
as is.

00:47:47.133 --> 00:47:50.167
You'll have to implement
the data--

00:47:50.167 --> 00:47:52.100
the query language.

00:47:52.100 --> 00:47:54.267
So either
you can implement it--

00:47:54.267 --> 00:47:56.000
look at the spec
and implement it,

00:47:56.000 --> 00:47:59.000
or you may just take the--
if you use--

00:47:59.000 --> 00:48:01.000
if it's Java based,
you may want to consider

00:48:01.000 --> 00:48:03.033
to use this Java library
and to re-implement

00:48:03.033 --> 00:48:04.200
your data source.

00:48:04.200 --> 00:48:05.534
man: Okay, so when
you were saying that

00:48:05.534 --> 00:48:07.834
the query language
doesn't expect--

00:48:07.834 --> 00:48:09.133
well, I think I was reading
where it says that

00:48:09.133 --> 00:48:10.667
the query language
doesn't expect the data source

00:48:10.667 --> 00:48:13.901
to implement the full--
the full feature set

00:48:13.901 --> 00:48:15.934
of the query language,
it just means that

00:48:15.934 --> 00:48:18.367
you can just pick and choose
which parts you want to use.

00:48:18.367 --> 00:48:19.701
Raz: We refer to
the data source--

00:48:19.701 --> 00:48:23.133
to the query language as
an optional part of

00:48:23.133 --> 00:48:25.334
the spec of the protocol.

00:48:25.334 --> 00:48:28.234
Because we know it's quite hard
to implement it.

00:48:28.234 --> 00:48:29.601
We did it.

00:48:29.601 --> 00:48:31.167
So parsing it
and implementing it

00:48:31.167 --> 00:48:33.033
is not that easy.

00:48:33.033 --> 00:48:36.501
So you don't have to do it
to be a data source.

00:48:36.501 --> 00:48:37.534
And in many cases,

00:48:37.534 --> 00:48:38.634
if you want to be
the data source

00:48:38.634 --> 00:48:40.200
of your own site,

00:48:40.200 --> 00:48:42.133
so there is no real need
to do it.

00:48:42.133 --> 00:48:43.734
You can use
your external parameters

00:48:43.734 --> 00:48:45.968
and whatever you know to return
you just return it.

00:48:45.968 --> 00:48:49.467
man: Okay. Thank you.
Raz: All right.

00:48:49.467 --> 00:48:51.000
Go ahead.
Anyone else?

00:48:51.000 --> 00:48:55.200
man: I have a question
about MySQL in particular.

00:48:55.200 --> 00:48:57.400
So I'm curious about
with the query language,

00:48:57.400 --> 00:48:59.133
are you actually
parsing the query

00:48:59.133 --> 00:49:00.801
that's coming in
or with MySQL,

00:49:00.801 --> 00:49:03.601
are you just passing that
through to MySQL?

00:49:03.601 --> 00:49:06.167
I think about this just because
I have implemented something

00:49:06.167 --> 00:49:07.467
which is similar.

00:49:07.467 --> 00:49:09.300
I like your architecture
much better.

00:49:09.300 --> 00:49:11.734
So I'm looking at porting
what would be

00:49:11.734 --> 00:49:14.000
gobs of SQL that
I've already got.

00:49:14.000 --> 00:49:17.367
Am I gonna have to make it
so that it's compatible to SQL,

00:49:17.367 --> 00:49:19.300
as compatible with your SQL?

00:49:19.300 --> 00:49:20.567
Raz: Yeah, okay,
this is a good question.

00:49:20.567 --> 00:49:22.067
So what we are doing--

00:49:22.067 --> 00:49:25.901
we actual parse the data
because we just wanted

00:49:25.901 --> 00:49:28.100
to make sure that there is
no error in stuff like this

00:49:28.100 --> 00:49:30.434
and so we parse it,
but we don't implement it.

00:49:30.434 --> 00:49:35.334
What we are doing--
we parse this query to MySQL.

00:49:35.334 --> 00:49:37.634
So we parse it on
the first end,

00:49:37.634 --> 00:49:40.567
and then what we are doing--
we build SQL query

00:49:40.567 --> 00:49:43.968
and send it to
the MySQL engine.

00:49:43.968 --> 00:49:45.167
Okay?

00:49:45.167 --> 00:49:47.133
So we parse it,
but we don't implement it.

00:49:47.133 --> 00:49:49.801
Unless there is one case
that we do it on our end,

00:49:49.801 --> 00:49:51.968
which is, for example,
the pivot.

00:49:51.968 --> 00:49:54.334
So in our query language,
you can specify to people

00:49:54.334 --> 00:49:56.234
we found it very useful.

00:49:56.234 --> 00:49:58.367
So many times,
people have data of--

00:49:58.367 --> 00:50:00.667
quarterly data and so on,

00:50:00.667 --> 00:50:02.734
and it won't be able
to show quarters like this.

00:50:02.734 --> 00:50:05.934
And MySQL, SQL in general,
does not support pivot,

00:50:05.934 --> 00:50:08.667
which is a pity,
but this is the situation.

00:50:08.667 --> 00:50:11.467
So in this case,
we have to do it on our side.

00:50:11.467 --> 00:50:13.067
So we don't parse anything.

00:50:13.067 --> 00:50:14.234
Or most of the case,

00:50:14.234 --> 00:50:15.667
we don't parse anything
to MySQL,

00:50:15.667 --> 00:50:16.801
but do it on our side.

00:50:16.801 --> 00:50:18.467
But any other way,
if we see that--

00:50:18.467 --> 00:50:21.200
to create something
that SQL can deal with,

00:50:21.200 --> 00:50:22.601
we'll pass it on to you.

00:50:22.601 --> 00:50:23.767
man: That's great.

00:50:23.767 --> 00:50:24.934
I didn't realize you guys
were doing that.

00:50:24.934 --> 00:50:26.634
That's really good to know.

00:50:26.634 --> 00:50:28.901
So are there any limitations
in terms of,

00:50:28.901 --> 00:50:30.501
if you think of sort of
the body of SQL

00:50:30.501 --> 00:50:32.167
that something like
MySQL could handle,

00:50:32.167 --> 00:50:35.234
whether it's unions
or different types of joins

00:50:35.234 --> 00:50:39.234
or really complex
or verbose SQL.

00:50:39.234 --> 00:50:40.701
Raz: Yeah.

00:50:40.701 --> 00:50:41.868
So for now,
joins and unions

00:50:41.868 --> 00:50:43.434
are not part of
the query language.

00:50:43.434 --> 00:50:47.000
So you'll have to create
a pretty fine view

00:50:47.000 --> 00:50:49.300
on your data source,
on your database

00:50:49.300 --> 00:50:52.367
and call it as a data table
from our side.

00:50:52.367 --> 00:50:53.601
This is one thing.

00:50:53.601 --> 00:50:56.634
But as about the size
of the data,

00:50:56.634 --> 00:50:59.434
usually it doesn't make sense
to pass the data

00:50:59.434 --> 00:51:01.901
that is more than
a few thousand across

00:51:01.901 --> 00:51:04.434
to the browser.

00:51:04.434 --> 00:51:06.934
It will just take a long time
to be processed

00:51:06.934 --> 00:51:08.601
and to be sent to the browser.

00:51:08.601 --> 00:51:11.534
And usually most visualizations
don't know how to show

00:51:11.534 --> 00:51:13.367
such an amount of data.

00:51:13.367 --> 00:51:16.767
So you'd better send some kind
of grouping information

00:51:16.767 --> 00:51:19.968
or filtering in
the query language.

00:51:19.968 --> 00:51:22.901
man: Okay. Thank you.
Raz: All right.

00:51:22.901 --> 00:51:24.534
Okay, thank you, everybody.

00:51:24.534 --> 00:51:25.934
Are there any other questions?
Okay, so--

00:51:25.934 --> 00:51:27.968
[applause]
I don't know.

00:51:27.968 --> 00:51:31.000
You can come here maybe
and ask later.

00:51:31.000 --> 00:51:33.868
Okay, thank you.

00:51:33.868 --> 00:51:37.234
[applause]

