WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:24.960
[MUSIC]

00:00:24.960 --> 00:00:25.560
Hi, everyone.

00:00:25.560 --> 00:00:28.270
Welcome to this episode
of Dartisans.

00:00:28.270 --> 00:00:28.910
My name is Seth Ladd.

00:00:28.910 --> 00:00:31.840
I'm a Dart developer advocate
with the Chrome team.

00:00:31.840 --> 00:00:33.170
And today we're going
to try something a

00:00:33.170 --> 00:00:35.030
little new on the show.

00:00:35.030 --> 00:00:36.290
Today, I want to run
through a bunch of

00:00:36.290 --> 00:00:38.650
demos with Dart Editor.

00:00:38.650 --> 00:00:41.730
We featured the Dart Editor
back in one of our first

00:00:41.730 --> 00:00:43.440
Dartisans, almost a year ago.

00:00:43.440 --> 00:00:45.600
And a lot has changed
since then.

00:00:45.600 --> 00:00:48.890
So, if you haven't seen Dart
Editor in a while or you saw

00:00:48.890 --> 00:00:51.930
it almost a year ago, today
is the show for you.

00:00:51.930 --> 00:00:54.800
We're going to run through how
to download, how to load up

00:00:54.800 --> 00:00:57.320
files, and all the great
features of Dart Editor, that

00:00:57.320 --> 00:01:01.090
helps you scale from small
scripts, all the way to a

00:01:01.090 --> 00:01:04.769
large apps with, say, hundreds
of thousands of lines of code,

00:01:04.769 --> 00:01:07.300
and maybe a hundred or
developers on your team.

00:01:07.300 --> 00:01:10.100
And so with that, let's jump
to the screen and go to a

00:01:10.100 --> 00:01:13.120
bunch of demos.

00:01:13.120 --> 00:01:15.640
First thing to note is, that
it's very easy to get started

00:01:15.640 --> 00:01:17.060
with Dart Editor.

00:01:17.060 --> 00:01:19.770
The nice thing about this editor
is there's really no

00:01:19.770 --> 00:01:21.000
installation process.

00:01:21.000 --> 00:01:23.720
And so you can just download
the zip file, unzip it, and

00:01:23.720 --> 00:01:24.920
you're off and running.

00:01:24.920 --> 00:01:28.300
To grab the zip file, go
over to dartland.org.

00:01:28.300 --> 00:01:32.200
You'll see up at the top a list
of tools and, of course,

00:01:32.200 --> 00:01:34.280
jump to the editor.

00:01:34.280 --> 00:01:37.850
Now we're auto selecting which
editor for you, based on your

00:01:37.850 --> 00:01:38.870
operating system.

00:01:38.870 --> 00:01:42.040
And the editor does work on
Linux, Mac, and Windows.

00:01:42.040 --> 00:01:43.200
And so, here I'm on a Mac.

00:01:43.200 --> 00:01:44.670
Now, I'm not actually going
to download it today.

00:01:44.670 --> 00:01:46.690
But you can see right here at
the top is a blue button for

00:01:46.690 --> 00:01:47.650
download Dart Editor.

00:01:47.650 --> 00:01:50.400
Again it's a standalone install,
very, very simple.

00:01:50.400 --> 00:01:52.640
So it's very easy
to get started.

00:01:52.640 --> 00:01:54.390
So we're going to use the
magic of television.

00:01:54.390 --> 00:01:59.150
And voila, our editor
is now installed.

00:01:59.150 --> 00:02:02.980
So it's important to note,
there's a couple different

00:02:02.980 --> 00:02:04.610
versions of the editor that
we have out there.

00:02:04.610 --> 00:02:07.395
We have weekly versions
and nightly versions.

00:02:07.395 --> 00:02:10.750
Now, I recommend running the
weeklies or what they call the

00:02:10.750 --> 00:02:11.930
integration builds.

00:02:11.930 --> 00:02:14.860
These come out about every week
and they're tested by the

00:02:14.860 --> 00:02:15.940
editor team.

00:02:15.940 --> 00:02:18.550
And that's, I believe, the
best place for you.

00:02:18.550 --> 00:02:20.310
If you like living on
the edge, we do

00:02:20.310 --> 00:02:21.900
have nightly builds.

00:02:21.900 --> 00:02:25.750
Those are kicked off by
build bots we have.

00:02:25.750 --> 00:02:27.460
There's not a lot of testing
there, but if there's some

00:02:27.460 --> 00:02:30.230
particular bug that you
critically need fixed, and it

00:02:30.230 --> 00:02:31.600
might have gotten in
the previous day,

00:02:31.600 --> 00:02:32.610
you can try the nightlies.

00:02:32.610 --> 00:02:37.560
But I recommend the weekly
or integration builds.

00:02:37.560 --> 00:02:40.360
The auditor does have auto
update features now, which is

00:02:40.360 --> 00:02:41.520
really nice.

00:02:41.520 --> 00:02:45.270
You can optionally opt-in
to auto updates.

00:02:45.270 --> 00:02:47.310
And it will download in the
background, and then give you

00:02:47.310 --> 00:02:50.490
a nice little hints that it's
time to restart your editor.

00:02:50.490 --> 00:02:53.160
And so, for the past month or
two I've just been running on

00:02:53.160 --> 00:02:55.740
auto update, and just living on
whatever the latest weekly

00:02:55.740 --> 00:02:57.460
is, which is nice.

00:02:57.460 --> 00:03:00.730
So let's go and actually see
Dart Editor in action.

00:03:00.730 --> 00:03:02.660
So once you've got it installed,
which again is just

00:03:02.660 --> 00:03:04.680
unzipping a zip file,
you're presented

00:03:04.680 --> 00:03:06.250
with a welcome screen.

00:03:06.250 --> 00:03:08.300
And this is really nice
because it helps you

00:03:08.300 --> 00:03:10.330
just ease into Dart.

00:03:10.330 --> 00:03:11.690
I want to show a couple
of features

00:03:11.690 --> 00:03:13.060
here the welcome screen.

00:03:13.060 --> 00:03:14.720
Right here you can create
applications or

00:03:14.720 --> 00:03:16.390
open existing code.

00:03:16.390 --> 00:03:20.390
We also have helpful links
around the documentation, or

00:03:20.390 --> 00:03:23.290
tutorials, or the O'Reilly book
that we just published.

00:03:23.290 --> 00:03:27.670
And my favorite are the sample
applications down here.

00:03:27.670 --> 00:03:29.970
And we'll get to these in a
minute, but you can see that

00:03:29.970 --> 00:03:31.470
we have a bunch of different
samples.

00:03:31.470 --> 00:03:34.180
Showing off different bits
and parts of either

00:03:34.180 --> 00:03:36.000
HTML5 and or Dart code.

00:03:36.000 --> 00:03:38.360
And they just load up into your
editor, and so you can

00:03:38.360 --> 00:03:39.360
start playing with them.

00:03:39.360 --> 00:03:42.590
And it's non-destructive and so
we really want you to try

00:03:42.590 --> 00:03:45.120
these samples, play with
the code, and see

00:03:45.120 --> 00:03:47.560
which you can do.

00:03:47.560 --> 00:03:49.610
So let's go ahead and
jump in here.

00:03:49.610 --> 00:03:51.730
On the left, we have
the files view.

00:03:51.730 --> 00:03:54.100
The files view is a way to
think about your Dart

00:03:54.100 --> 00:03:57.300
applications as directories.

00:03:57.300 --> 00:04:00.590
Dart applications are really
scripts that link to other

00:04:00.590 --> 00:04:01.990
scripts and other libraries.

00:04:01.990 --> 00:04:04.590
And so, you don't have this
heavyweight concept of a

00:04:04.590 --> 00:04:06.410
project in Dart Editor.

00:04:06.410 --> 00:04:09.040
You just have the directory that
you happen to open, which

00:04:09.040 --> 00:04:12.550
contains any number of files,
like dart files, HTML files,

00:04:12.550 --> 00:04:14.240
CSS files, et cetera.

00:04:14.240 --> 00:04:17.550
So it's very lightweight,
lightweight way to interact

00:04:17.550 --> 00:04:18.750
with your projects.

00:04:18.750 --> 00:04:23.120
I typically think of one
project per directory.

00:04:23.120 --> 00:04:25.020
Let's load up.

00:04:25.020 --> 00:04:26.320
Let's go ahead and get
rid of this here.

00:04:29.640 --> 00:04:31.750
Let's load up one of the easiest
samples to check out,

00:04:31.750 --> 00:04:32.840
which is the clock sample.

00:04:32.840 --> 00:04:36.850
So by clicking on clock from
the welcome screen, you can

00:04:36.850 --> 00:04:39.940
see that it creates a copy of
that code on my files view,

00:04:39.940 --> 00:04:44.800
and then immediately opens the
files in the editor itself.

00:04:44.800 --> 00:04:47.760
So, just quickly now, you
probably want to run it.

00:04:47.760 --> 00:04:51.560
Well, when you open up the
clock folder here, in the

00:04:51.560 --> 00:04:54.780
files view, you'll see that
we have CSS files HTML

00:04:54.780 --> 00:04:56.420
files and CSS files.

00:04:56.420 --> 00:04:58.630
So let's run the actual
application.

00:04:58.630 --> 00:05:01.450
You can run it by right-clicking
on the main

00:05:01.450 --> 00:05:05.590
Dart file, and choosing run in
Dartium or run as JavaScript.

00:05:05.590 --> 00:05:07.830
Now the quickest way to run
your applications in the

00:05:07.830 --> 00:05:09.950
editor is run as Dartium.

00:05:09.950 --> 00:05:13.090
Dartium is a build of Chromium
with the Dart virtual machine

00:05:13.090 --> 00:05:14.290
embedded inside.

00:05:14.290 --> 00:05:16.600
So just like normal web
programming, we can just edit

00:05:16.600 --> 00:05:19.110
a few files and hit reload,
where reload is

00:05:19.110 --> 00:05:21.080
acting as your compiler.

00:05:21.080 --> 00:05:24.890
We can get that same very fast
iterative development cycle

00:05:24.890 --> 00:05:28.110
with Dartium and the
virtual machine.

00:05:28.110 --> 00:05:30.450
That means there's no
compilation step.

00:05:30.450 --> 00:05:32.010
So let's go ahead and
run in Dartium.

00:05:37.610 --> 00:05:41.240
And here it's downloading a file
from Google code which is

00:05:41.240 --> 00:05:44.090
a bootstrap file
and here we go.

00:05:44.090 --> 00:05:48.190
So this is actual Dart code
running in a Dart virtual

00:05:48.190 --> 00:05:50.680
machine, inside a custom
build of Chromium.

00:05:50.680 --> 00:05:53.150
So this is a pretty cool demo.

00:05:53.150 --> 00:05:56.360
And this quick added reload
cycle is very, very nice when

00:05:56.360 --> 00:05:57.180
you're doing development.

00:05:57.180 --> 00:05:59.760
But when you want to deploy to
the open web, of course, you

00:05:59.760 --> 00:06:01.230
need to compile to JavaScript.

00:06:01.230 --> 00:06:03.240
So let's see how that happens.

00:06:03.240 --> 00:06:05.100
So we're going back to
your editor now.

00:06:05.100 --> 00:06:07.250
And if you right-click on the
Dart file, you can choose the

00:06:07.250 --> 00:06:09.970
other option, run
as JavaScript.

00:06:09.970 --> 00:06:12.810
Now this will run the
Dart to JS compiler,

00:06:12.810 --> 00:06:14.370
itself written in Dart.

00:06:14.370 --> 00:06:17.410
Converting the Dart code
into JavaScript code.

00:06:17.410 --> 00:06:20.810
And then launching into your
particular stable browser.

00:06:20.810 --> 00:06:23.670
Right here I'm running Chrome.

00:06:23.670 --> 00:06:25.980
As we wait for this
file to load.

00:06:25.980 --> 00:06:29.190
Here we go, so same exact app,
but it's compiled to

00:06:29.190 --> 00:06:29.810
JavaScript.

00:06:29.810 --> 00:06:32.260
And this is running just
right in Chrome.

00:06:32.260 --> 00:06:35.620
So to prove that, we can open
up the dev tools, and go to

00:06:35.620 --> 00:06:38.760
sources, and sure enough
here's the

00:06:38.760 --> 00:06:40.460
JavaScript file itself.

00:06:40.460 --> 00:06:41.580
So pretty cool.

00:06:41.580 --> 00:06:45.160
So, generally, we recommended
doing the editing in, and

00:06:45.160 --> 00:06:46.350
testing in Dartium.

00:06:46.350 --> 00:06:49.000
And then when you're ready to
deploy, compile the JavaScript

00:06:49.000 --> 00:06:52.380
for your modern browsers like
Firefox, IE9 and above,

00:06:52.380 --> 00:06:54.870
Chrome, Opera, and, of course,
Mobile Safari,

00:06:54.870 --> 00:06:58.030
and Chrome for Android.

00:06:58.030 --> 00:07:01.110
Now is very, very easy to
run your application by

00:07:01.110 --> 00:07:02.075
right-clicking on the file.

00:07:02.075 --> 00:07:04.910
But we also have a run manager,
so in the editor you

00:07:04.910 --> 00:07:08.230
can see this green run button,
up in the top toolbar.

00:07:08.230 --> 00:07:10.810
If you drop this down you can
see all the different run

00:07:10.810 --> 00:07:15.000
configurations that you have,
that link to all the files in

00:07:15.000 --> 00:07:17.220
your files view on the left.

00:07:17.220 --> 00:07:20.700
And you could also
manage them, too.

00:07:20.700 --> 00:07:23.040
And so this is a nice way, say,
if you want to create a

00:07:23.040 --> 00:07:24.410
custom-run configuration.

00:07:24.410 --> 00:07:26.100
Maybe you want to turn
off debugging.

00:07:26.100 --> 00:07:29.410
Maybe you want to send some
custom flags to Dartium or

00:07:29.410 --> 00:07:31.110
Chrome, when you
start them up.

00:07:31.110 --> 00:07:34.200
You can use the manage run
configurations option.

00:07:34.200 --> 00:07:36.850
But most the time you'll be
just using the simple

00:07:36.850 --> 00:07:40.070
right-click run as Dartium and
right-click run as JavaScript.

00:07:40.070 --> 00:07:42.050
I find that I use those
almost every time.

00:07:45.290 --> 00:07:47.610
OK, so let's look at
some of the editing

00:07:47.610 --> 00:07:49.920
features of Dart Editor.

00:07:49.920 --> 00:07:52.060
Again, we'll stick with the
clock sample here, just to

00:07:52.060 --> 00:07:53.310
keep things simple.

00:07:53.310 --> 00:07:56.880
Now, Dart is a structured
but dynamic language.

00:07:56.880 --> 00:07:59.800
And so that helps you scale,
again, for very small sets of

00:07:59.800 --> 00:08:03.260
scripts, maybe you don't even
use a class, all the way up to

00:08:03.260 --> 00:08:04.870
hundreds of thousands
of lines of code.

00:08:04.870 --> 00:08:07.980
And on that journey as you
scale, you're going to be

00:08:07.980 --> 00:08:11.140
encountering more lines of code,
more libraries, and more

00:08:11.140 --> 00:08:11.740
developers.

00:08:11.740 --> 00:08:14.800
And to compensate for the added
complexity, it's nice to

00:08:14.800 --> 00:08:17.450
have tools that help you
navigate and work your way

00:08:17.450 --> 00:08:18.610
through the code.

00:08:18.610 --> 00:08:21.640
So let's show some of the
features of Dart Editor that

00:08:21.640 --> 00:08:24.860
helps us scale up in terms of
lines of code and number of

00:08:24.860 --> 00:08:25.940
developers.

00:08:25.940 --> 00:08:29.590
Probably the one that most
people are used to is the code

00:08:29.590 --> 00:08:30.920
completion.

00:08:30.920 --> 00:08:34.730
Now as projects grow, you can't
keep all the libraries,

00:08:34.730 --> 00:08:37.230
and features, and
functionalities in your head

00:08:37.230 --> 00:08:37.820
at all times.

00:08:37.820 --> 00:08:39.620
And so it's nice to have an
editor to give you that

00:08:39.620 --> 00:08:41.750
assistance as you go.

00:08:41.750 --> 00:08:44.020
And so code completion
can help you do that.

00:08:44.020 --> 00:08:49.110
So by typing a variable name
and hitting dot, the editor

00:08:49.110 --> 00:08:52.000
will say, OK, well, I know what
type this variable is,

00:08:52.000 --> 00:08:55.320
and in most cases it does, and
he'll give you then all the

00:08:55.320 --> 00:08:57.950
methods you can call
on that variable.

00:08:57.950 --> 00:09:01.320
And so for here, on the window
object, which just comes from

00:09:01.320 --> 00:09:04.970
HTML5, you can see all the
different options now.

00:09:04.970 --> 00:09:05.770
This is really nice.

00:09:05.770 --> 00:09:10.070
So again, if you are not
entirely familiar with an API

00:09:10.070 --> 00:09:12.020
and you want to explore,
code completion can

00:09:12.020 --> 00:09:13.540
really, really help you.

00:09:13.540 --> 00:09:18.690
I see for here, it just it
reduces the options as you go,

00:09:18.690 --> 00:09:20.990
and very, very helpful.

00:09:20.990 --> 00:09:25.010
OK, so I really like
code completion.

00:09:25.010 --> 00:09:27.400
Another really nice feature
is the outline.

00:09:27.400 --> 00:09:31.890
Again, it's about helping you
not have to keep the entire

00:09:31.890 --> 00:09:33.220
program structure
in your head.

00:09:33.220 --> 00:09:35.460
Your tools should be able
to help you with this.

00:09:35.460 --> 00:09:37.380
And so, one way is to
conceptualize, what is the

00:09:37.380 --> 00:09:39.710
outline of the files that
I'm looking at.

00:09:39.710 --> 00:09:43.930
So, if you go up Tools and you
show the outline view.

00:09:43.930 --> 00:09:47.660
And here, I'll just
drag this up here.

00:09:47.660 --> 00:09:49.840
You can see here, it's
an outline of the

00:09:49.840 --> 00:09:51.700
file that I have open.

00:09:51.700 --> 00:09:55.020
And so it shows you the class,
it shows you the static

00:09:55.020 --> 00:09:57.450
members of that class,
it shows you the

00:09:57.450 --> 00:09:59.410
fields and the methods.

00:09:59.410 --> 00:10:01.810
And so this is a nice way,
especially if you're working

00:10:01.810 --> 00:10:04.730
with very large files, to be
able to navigate those files

00:10:04.730 --> 00:10:08.340
very quickly, if you know the
name of one of the methods.

00:10:08.340 --> 00:10:09.880
Or if you're just curious,
and what's the

00:10:09.880 --> 00:10:10.910
structure of this file.

00:10:10.910 --> 00:10:14.440
Of course, if you click one of
the items in the outline on

00:10:14.440 --> 00:10:16.710
the left, it will jump
you directly to that

00:10:16.710 --> 00:10:18.590
location on the right.

00:10:18.590 --> 00:10:21.600
So again, just trying to help
you navigate that code easily.

00:10:21.600 --> 00:10:24.540
Speaking about navigation, a
common question when you're

00:10:24.540 --> 00:10:27.170
dealing with large amounts of
code, or even just acclimating

00:10:27.170 --> 00:10:32.030
to new projects is, who's using
this code or does this

00:10:32.030 --> 00:10:34.190
code call out, or who
calls this code?

00:10:34.190 --> 00:10:36.110
Well, the editor can help
you with that as well.

00:10:36.110 --> 00:10:38.870
So here, let's just use
this tick method here.

00:10:38.870 --> 00:10:41.330
My question here is, does
anyone call tick, what

00:10:41.330 --> 00:10:43.010
is this used for?

00:10:43.010 --> 00:10:45.350
So you can right-click on this,
and a bunch of options

00:10:45.350 --> 00:10:47.640
show up, find references,
find caller.

00:10:47.640 --> 00:10:50.870
So I'm interested does anyone
call this method.

00:10:50.870 --> 00:10:53.820
So by choosing find callers
and scrolling down to the

00:10:53.820 --> 00:10:56.100
bottom, you can see
the callers view.

00:10:56.100 --> 00:10:58.710
And sure enough, there seems
to be two places that uses

00:10:58.710 --> 00:11:01.530
this tick method, both
in this class.

00:11:01.530 --> 00:11:04.560
And I can just click on these
and it takes me right to them.

00:11:04.560 --> 00:11:06.490
So this is again really helpful
for navigating your

00:11:06.490 --> 00:11:09.170
code, but it also really helpful
when you want to know,

00:11:09.170 --> 00:11:12.120
is this code safe
for deletion?

00:11:12.120 --> 00:11:14.170
Certainly, the best thing as
developers we can do, is

00:11:14.170 --> 00:11:15.550
delete code.

00:11:15.550 --> 00:11:16.980
That's always more fun
than writing code.

00:11:16.980 --> 00:11:20.150
And it's imperative to know, is
this code safe to delete?

00:11:20.150 --> 00:11:22.540
So, I use the find callers to
help me understand, is this

00:11:22.540 --> 00:11:25.310
dead code out there?

00:11:25.310 --> 00:11:28.220
Let's look at a couple other
navigation features in the

00:11:28.220 --> 00:11:30.640
Dart Editor, as well.

00:11:30.640 --> 00:11:32.900
Well, let's look at the
opposite direction.

00:11:32.900 --> 00:11:35.050
So let's say I'm looking here
at window.requestAn

00:11:35.050 --> 00:11:38.620
imationFrame(tick) and
I'm wondering, what

00:11:38.620 --> 00:11:39.520
is this tick thing?

00:11:39.520 --> 00:11:42.180
Is it a variable, is it a
method, who declares or even

00:11:42.180 --> 00:11:43.040
defines it?

00:11:43.040 --> 00:11:45.180
Well, you can go the
opposite way.

00:11:45.180 --> 00:11:49.350
From find callers as you
can open declaration.

00:11:49.350 --> 00:11:51.830
And that will jump you to where
that variable or method

00:11:51.830 --> 00:11:52.640
is defined.

00:11:52.640 --> 00:11:54.460
And, of course, it's
right here in tick.

00:11:54.460 --> 00:11:58.290
So really, really helpful for
navigating your code.

00:11:58.290 --> 00:12:02.690
Now, of course, this is just
a simple demo application.

00:12:02.690 --> 00:12:04.720
Does this really work when you
have, say, hundreds of

00:12:04.720 --> 00:12:06.130
thousands of lines of code?

00:12:06.130 --> 00:12:11.420
Well, to show that, let's jump
to one of our more complex

00:12:11.420 --> 00:12:14.730
Dart projects, which is the
Dart to JS compiler.

00:12:14.730 --> 00:12:18.030
This itself is written in Dart
and it converts Dart code into

00:12:18.030 --> 00:12:21.410
modern JavaScript, to run
on all modern browsers.

00:12:21.410 --> 00:12:25.820
And this is a lot of code and
I'm not exactly familiar with

00:12:25.820 --> 00:12:26.660
this project at all.

00:12:26.660 --> 00:12:29.490
But I want to show you how,
say, you can load up, and

00:12:29.490 --> 00:12:32.000
easily and quickly navigate
something that you've never

00:12:32.000 --> 00:12:33.160
seen before.

00:12:33.160 --> 00:12:36.390
So I'm just going to pick a
random file here from this is

00:12:36.390 --> 00:12:39.500
the Dart to JS project here,
this is the compiler.

00:12:39.500 --> 00:12:42.100
Again, I've never seen this
code here before.

00:12:42.100 --> 00:12:45.020
But one of the things I'm kind
of curious about is, this tree

00:12:45.020 --> 00:12:46.580
element, so, what is that?

00:12:46.580 --> 00:12:49.550
So I can right-click on that,
open declaration.

00:12:49.550 --> 00:12:50.090
And boom.

00:12:50.090 --> 00:12:52.900
In a whole other file, it makes
the hundreds of files,

00:12:52.900 --> 00:12:55.320
the hundreds of thousands lines
of code, the Dart editor

00:12:55.320 --> 00:12:58.460
immediately pops open the
definition of tree element.

00:12:58.460 --> 00:13:00.950
So that's really useful.

00:13:00.950 --> 00:13:03.250
I might say, OK, this is
kind of interesting.

00:13:03.250 --> 00:13:05.110
Get selector, I wonder
who calls this?

00:13:05.110 --> 00:13:06.990
So again, I can find callers.

00:13:06.990 --> 00:13:09.180
And sure enough there's a lot
of code that calls that.

00:13:09.180 --> 00:13:11.985
And I can double-click from the
callers view, and it jumps

00:13:11.985 --> 00:13:14.220
me right to the usage
of that method.

00:13:14.220 --> 00:13:17.350
Now again, this is scanning
hundreds of thousands of lines

00:13:17.350 --> 00:13:19.140
of code, hundreds of files.

00:13:19.140 --> 00:13:21.680
And it's almost instantaneous.

00:13:21.680 --> 00:13:26.650
So really, really nice for
acclimating to new projects.

00:13:26.650 --> 00:13:29.510
OK, so there's more features
there for navigation, but

00:13:29.510 --> 00:13:32.420
hopefully that gives you a
sense of how you can jump

00:13:32.420 --> 00:13:36.060
around your projects
with Dart Editor.

00:13:36.060 --> 00:13:38.340
Now, I want to talk about some
of the feedback that Dart

00:13:38.340 --> 00:13:40.250
Editor can provide.

00:13:40.250 --> 00:13:42.510
Dart is a dynamic language,
but it's also structured.

00:13:42.510 --> 00:13:45.820
And that means that the analysis
engine of the editor

00:13:45.820 --> 00:13:49.160
can give you early warnings,
and early feedback based on

00:13:49.160 --> 00:13:52.610
the code that you've written,
to help you track down,

00:13:52.610 --> 00:13:56.170
identify, and fix errors before
you run the code.

00:13:56.170 --> 00:13:58.890
And, this is again, it's so
important when you have to

00:13:58.890 --> 00:14:01.760
deal with huge amounts of code,
that maybe the unit

00:14:01.760 --> 00:14:06.050
tests take minutes and minutes
to run, or you just want to

00:14:06.050 --> 00:14:08.660
work in one little file here,
and just play around the

00:14:08.660 --> 00:14:09.490
changes here.

00:14:09.490 --> 00:14:12.080
You really, really appreciate
that instant feedback that

00:14:12.080 --> 00:14:13.790
these editor tools
can give you.

00:14:13.790 --> 00:14:16.150
So let's go back to the
clock demo here.

00:14:16.150 --> 00:14:18.420
And try to trigger
some warnings.

00:14:18.420 --> 00:14:20.950
The things that we're going to
be interested in here is, the

00:14:20.950 --> 00:14:23.900
problems view, which is
typically down at the bottom

00:14:23.900 --> 00:14:25.280
of your editor.

00:14:25.280 --> 00:14:27.860
Now this is going to list all
the warnings and errors across

00:14:27.860 --> 00:14:29.330
all the different projects.

00:14:29.330 --> 00:14:31.200
And you can see here that
there's a lot of different

00:14:31.200 --> 00:14:34.140
problems going on, in projects
that I'm not

00:14:34.140 --> 00:14:34.880
that interested in.

00:14:34.880 --> 00:14:37.760
So I'm going to right-click
on my files view, on the

00:14:37.760 --> 00:14:39.360
individual folders here
and I'm going to

00:14:39.360 --> 00:14:41.780
choose, don't analyze.

00:14:41.780 --> 00:14:44.510
Now that's going to tell the
editor, hey don't worry about

00:14:44.510 --> 00:14:48.060
analyzing or peering too deeply
into the files in here.

00:14:48.060 --> 00:14:50.640
I'm not that interested
in this right now.

00:14:50.640 --> 00:14:52.630
Other editors might have
this functionality like

00:14:52.630 --> 00:14:54.570
a close or a hide.

00:14:54.570 --> 00:14:58.060
And as you can see, as I tell
the editor, don't analyze this

00:14:58.060 --> 00:15:00.860
stuff, my problems
view is getting

00:15:00.860 --> 00:15:01.600
reduced, which is good.

00:15:01.600 --> 00:15:05.780
Because I want to just focus on
one particular project here

00:15:05.780 --> 00:15:06.580
to show you.

00:15:06.580 --> 00:15:09.560
So, I'm just about turning off
all the, there you go.

00:15:09.560 --> 00:15:11.925
So I have an empty problems
view, which is good because

00:15:11.925 --> 00:15:14.240
now I'm going to introduce
some problems for us.

00:15:14.240 --> 00:15:17.520
Now, there's two kinds of
feedback here that the editor

00:15:17.520 --> 00:15:18.420
can tell you.

00:15:18.420 --> 00:15:20.790
One is warnings, and
one is errors.

00:15:20.790 --> 00:15:22.400
And it's important to understand
the distinction

00:15:22.400 --> 00:15:23.800
between these two.

00:15:23.800 --> 00:15:28.030
Warnings in Dart are, hey, you
might have some issue, but it

00:15:28.030 --> 00:15:29.050
may actually run.

00:15:29.050 --> 00:15:31.200
I don't have enough information
to tell you.

00:15:31.200 --> 00:15:34.320
So I'm going to let the program
compile and run.

00:15:34.320 --> 00:15:37.790
Dart has a philosophy of
innocent until proven guilty.

00:15:37.790 --> 00:15:42.320
That is, we know that the
ceremonial type checkers, if

00:15:42.320 --> 00:15:44.940
you will, don't always catch
all potential problems, and

00:15:44.940 --> 00:15:48.640
especially every time you do
a cast in a traditional

00:15:48.640 --> 00:15:51.110
statically typed languages,
you're trying to express

00:15:51.110 --> 00:15:54.430
something that that type checker
is unable to express.

00:15:54.430 --> 00:15:58.420
And you're kind of busting out
of the rigid rules system.

00:15:58.420 --> 00:16:00.410
Well, if you're allowed to bust
out of the rigid rule

00:16:00.410 --> 00:16:03.780
system, shouldn't a language
come along that gives you more

00:16:03.780 --> 00:16:06.550
flexibility, and trusts
you a little bit more?

00:16:06.550 --> 00:16:07.640
That's Dart's philosophy.

00:16:07.640 --> 00:16:09.790
And so it's going to give you
warnings, but it's going to

00:16:09.790 --> 00:16:12.250
let you run the program.

00:16:12.250 --> 00:16:14.380
Contrast that with errors.

00:16:14.380 --> 00:16:18.990
Errors are show stopping
problems, that the Dart

00:16:18.990 --> 00:16:22.330
program knows will prevent your
program from running.

00:16:22.330 --> 00:16:25.240
So if you see the red for
errors, that means program

00:16:25.240 --> 00:16:27.180
can't run, you should
fix this right now.

00:16:27.180 --> 00:16:29.650
If you see the yellow warnings,
that means program

00:16:29.650 --> 00:16:32.380
may run, but you probably
want to check this out.

00:16:32.380 --> 00:16:36.670
So let's see if we can trigger
both kinds of problems here.

00:16:36.670 --> 00:16:39.450
OK, so I'm back over
to Dart Editor.

00:16:39.450 --> 00:16:43.700
And let's just play around with
some of the types here.

00:16:43.700 --> 00:16:47.930
Let's just change one of
these ints to a string.

00:16:47.930 --> 00:16:51.360
So, clearly, I'm setting display
hour to zero, which is

00:16:51.360 --> 00:16:55.360
an integer, but I'm annotating
the displayed hour

00:16:55.360 --> 00:16:56.940
variable as a string.

00:16:56.940 --> 00:16:58.790
Of course, these things
don't quite match.

00:16:58.790 --> 00:17:02.760
So down here, you can see
immediate feedback and two

00:17:02.760 --> 00:17:05.780
warnings that int is not
assignable to string.

00:17:05.780 --> 00:17:09.079
I also get a warning right,
when the variable is

00:17:09.079 --> 00:17:11.230
initialized here, and you can
hover over that and see that.

00:17:11.230 --> 00:17:14.589
I also, of course, get a warning
here in the gutter.

00:17:14.589 --> 00:17:18.460
Now, I can just simply click
on these problems to get

00:17:18.460 --> 00:17:21.339
jumped right to their
locations.

00:17:21.339 --> 00:17:21.770
So that's really nice.

00:17:21.770 --> 00:17:24.540
Again, the editor helping
me navigate my code.

00:17:24.540 --> 00:17:25.550
But this is a warning.

00:17:25.550 --> 00:17:29.150
Now, why is it a warning
that strings

00:17:29.150 --> 00:17:30.620
can be set to integers?

00:17:30.620 --> 00:17:32.960
Well, remember that Dart
is a dynamic language.

00:17:32.960 --> 00:17:36.500
And these type annotations,
the string and int for

00:17:36.500 --> 00:17:40.210
instance, don't affect the
runtime semantics of the code.

00:17:40.210 --> 00:17:45.750
So at run time, it's as if
I simply used var here.

00:17:45.750 --> 00:17:48.730
But, of course, I love the
instant feedback and so I use

00:17:48.730 --> 00:17:52.000
these type annotations, which
are perfect for development.

00:17:52.000 --> 00:17:53.290
So I'm going to put
this back in.

00:17:53.290 --> 00:17:58.570
But you can see that, so you can
see that changing the type

00:17:58.570 --> 00:18:01.550
annotation will, in fact,
trigger a warning.

00:18:01.550 --> 00:18:05.120
Let's go back here and see if
we can trigger an error.

00:18:05.120 --> 00:18:11.760
OK, import dart foo.

00:18:11.760 --> 00:18:14.080
Now here's an example
of an error.

00:18:14.080 --> 00:18:16.720
Let's say I'm importing a
library that, just flat out,

00:18:16.720 --> 00:18:17.710
doesn't exist.

00:18:17.710 --> 00:18:19.480
Now Dart Editor knows
that there's no such

00:18:19.480 --> 00:18:20.940
library called dart foo.

00:18:20.940 --> 00:18:23.120
And here you can see the red
underline, you can see the red

00:18:23.120 --> 00:18:24.853
error over here, and, of course,
in the problems view

00:18:24.853 --> 00:18:26.950
you can see an error here.

00:18:26.950 --> 00:18:28.090
This is really, really cool.

00:18:28.090 --> 00:18:29.960
Again, instant feedback.

00:18:29.960 --> 00:18:32.080
And the editor's telling me
before I even run the program,

00:18:32.080 --> 00:18:33.070
hey, something's wrong.

00:18:33.070 --> 00:18:35.410
You should probably fix this.

00:18:35.410 --> 00:18:38.330
So I really, really appreciate
that instant feedback.

00:18:38.330 --> 00:18:40.970
So that's a little bit about
warnings and errors.

00:18:44.440 --> 00:18:47.310
OK, so we looked at running
apps, and I want to dive into

00:18:47.310 --> 00:18:51.630
running apps a little bit more,
and show the run config.

00:18:51.630 --> 00:18:55.890
So let's go to, let's go here.

00:18:55.890 --> 00:18:57.790
Let's go manage launches, and
we're going to manage the

00:18:57.790 --> 00:19:00.230
launch for this clock.

00:19:05.190 --> 00:19:07.240
We're not, maybe this is going
to be a little bit too

00:19:07.240 --> 00:19:08.490
complicated.

00:19:10.430 --> 00:19:10.860
Here we go.

00:19:10.860 --> 00:19:11.770
OK, good.

00:19:11.770 --> 00:19:14.300
So there's going to be two kinds
of launches for clock.

00:19:14.300 --> 00:19:17.580
One is with Dartium, which is
with the Dart virtual machine.

00:19:17.580 --> 00:19:21.210
One is with JavaScript, that
is for modern web browsers

00:19:21.210 --> 00:19:23.020
deployed out there
in the wild.

00:19:23.020 --> 00:19:26.260
Now, one of the main things that
I recommend you play with

00:19:26.260 --> 00:19:30.810
is the run in checked mode
configuration option, in

00:19:30.810 --> 00:19:32.390
manage launches.

00:19:32.390 --> 00:19:35.930
Run in checked mode defines
what happens when the Dart

00:19:35.930 --> 00:19:39.110
virtual machine, or the Dart
run times encounters type

00:19:39.110 --> 00:19:41.210
annotations that don't
quite make sense.

00:19:41.210 --> 00:19:44.750
In checked mode if, say,
we set string to a

00:19:44.750 --> 00:19:46.850
zero, it will fail.

00:19:46.850 --> 00:19:51.530
And if you uncheck checked mode,
then that will work OK.

00:19:51.530 --> 00:19:54.510
So it's a nice way to say
develop in checked mode, and

00:19:54.510 --> 00:19:56.950
catch some of those early
warnings when you have type

00:19:56.950 --> 00:19:58.680
notations that don't
quite match.

00:19:58.680 --> 00:20:02.730
But when you want to test, say,
pure speed, or if you

00:20:02.730 --> 00:20:06.250
want to test the behavior as if
you were to deploy your app

00:20:06.250 --> 00:20:09.190
into the wild, where checked
mode not run by default.

00:20:09.190 --> 00:20:11.530
You can turn off checked
mode here.

00:20:11.530 --> 00:20:15.670
You can also see options here
about enabling debugging, and

00:20:15.670 --> 00:20:17.320
turning on experimental
WebKit features.

00:20:17.320 --> 00:20:18.250
So if you want to
play with how to

00:20:18.250 --> 00:20:20.490
run, use manage launches.

00:20:20.490 --> 00:20:22.740
Let's go ahead and play with
some of the debugging here, as

00:20:22.740 --> 00:20:24.080
a good transition to
some of the other

00:20:24.080 --> 00:20:26.320
features the editor provides.

00:20:26.320 --> 00:20:30.550
Now let's close this and let's
go back to clock here.

00:20:30.550 --> 00:20:33.000
So one of the best things about
the debugger is being

00:20:33.000 --> 00:20:34.690
able to set break points.

00:20:34.690 --> 00:20:36.370
So let's take a break
point right here

00:20:36.370 --> 00:20:37.480
inside the tick method.

00:20:37.480 --> 00:20:40.780
And if we run this again, of
course, setting this break

00:20:40.780 --> 00:20:45.010
point here requires a virtual
machine, because the editor

00:20:45.010 --> 00:20:47.970
hooks up the debugging session
directly to the VM that's

00:20:47.970 --> 00:20:49.920
embedded inside Chromium
for you.

00:20:49.920 --> 00:20:52.270
And sure enough, the
program stops right

00:20:52.270 --> 00:20:53.030
at the break point.

00:20:53.030 --> 00:20:55.950
And you could go over here
on my right and see

00:20:55.950 --> 00:20:57.880
the debugger in action.

00:20:57.880 --> 00:21:00.220
So standard debugging
features here.

00:21:00.220 --> 00:21:04.610
Useful and familiar to people
who like their Eclipses and

00:21:04.610 --> 00:21:07.340
IntelliJs and Visual Studios,
we have this in Dart editor.

00:21:07.340 --> 00:21:11.780
You can browse variables, you
can walk the stack, you can

00:21:11.780 --> 00:21:15.670
even jump over and jump into
methods and functions.

00:21:15.670 --> 00:21:17.520
All this functionality
is available.

00:21:17.520 --> 00:21:21.340
And you can see here that this
is a live debugging session,

00:21:21.340 --> 00:21:25.110
with what's inside Dartium.

00:21:25.110 --> 00:21:27.990
So here the program is paused,
of course, because we're in a

00:21:27.990 --> 00:21:30.660
debugging session, if
I hit run here.

00:21:30.660 --> 00:21:34.950
Or I turn off the break point,
and then hit run.

00:21:34.950 --> 00:21:36.670
Of course, the programs
running again.

00:21:36.670 --> 00:21:39.510
So this is really, really good
to help you track down bugs,

00:21:39.510 --> 00:21:41.480
or you want to know the state
of your variables.

00:21:41.480 --> 00:21:44.960
You could do this live without
ever leaving your editor, and

00:21:44.960 --> 00:21:48.010
while you're controlling the
running program in Dartium.

00:21:48.010 --> 00:21:49.480
Which I think is really,
really cool.

00:21:52.000 --> 00:21:57.060
OK, so as the program grows in
lines of code and complexity,

00:21:57.060 --> 00:21:59.200
you want to maintain it.

00:21:59.200 --> 00:22:02.350
And to maintain it you often
have to move code around, or

00:22:02.350 --> 00:22:05.850
you have to clean up old code,
or you have to, say, rename

00:22:05.850 --> 00:22:08.350
variable names that don't really
make sense anymore.

00:22:08.350 --> 00:22:13.030
And to do that the technique is
called refactoring, which

00:22:13.030 --> 00:22:15.520
changes the structure
of the code without

00:22:15.520 --> 00:22:16.630
changing the behavior.

00:22:16.630 --> 00:22:20.060
And this is a common technique
as you evolve over time.

00:22:20.060 --> 00:22:23.480
Now the Dart editor has some
refactorings built in.

00:22:23.480 --> 00:22:26.000
One of my favorite is the
rename refactoring.

00:22:26.000 --> 00:22:28.680
Let's do this now.

00:22:28.680 --> 00:22:33.000
Let's say, for instance, that
this time variable name here

00:22:33.000 --> 00:22:36.130
is maybe not as clear
as it could be.

00:22:36.130 --> 00:22:37.940
And so I want to rename this.

00:22:37.940 --> 00:22:40.990
Now, you could do a global
search and replace, of course.

00:22:40.990 --> 00:22:44.960
But that can catch usages of
the word time that aren't

00:22:44.960 --> 00:22:46.810
direct related to this
particular rename.

00:22:46.810 --> 00:22:49.020
Now, because Dart is a
structured language, the

00:22:49.020 --> 00:22:52.690
editor can statically analyze
the code structure and help

00:22:52.690 --> 00:22:55.110
you refactor cleanly
and safely.

00:22:55.110 --> 00:22:57.680
So let's right click on this
variable name time.

00:22:57.680 --> 00:23:02.480
And let's see here, rename,
and time stamp, and I can

00:23:02.480 --> 00:23:05.210
change the name of this, in
real time, Dart editor is

00:23:05.210 --> 00:23:09.600
renaming my variables for me
on the fly, safely, for me.

00:23:09.600 --> 00:23:12.470
So this is the kind of things
that I want my editor to do.

00:23:12.470 --> 00:23:15.690
Like, I don't want to have to
use grep to do refactoring.

00:23:15.690 --> 00:23:19.910
And I don't want to have to do
complicated searches across

00:23:19.910 --> 00:23:21.770
all my code, to find out
who uses the code.

00:23:21.770 --> 00:23:26.000
The editor is doing this stuff
for me, so I can actually

00:23:26.000 --> 00:23:29.270
focus on solving real business
problems, not managing complex

00:23:29.270 --> 00:23:30.180
code bases.

00:23:30.180 --> 00:23:31.820
So I really, really
appreciate that.

00:23:31.820 --> 00:23:34.730
The editor has other the
refactoring features, like

00:23:34.730 --> 00:23:37.440
in-lining of functions
or others.

00:23:37.440 --> 00:23:40.390
And so experiment, play around
and see how it can help you

00:23:40.390 --> 00:23:43.550
manage your code.

00:23:43.550 --> 00:23:46.780
One other feature of the editor
is its integration into

00:23:46.780 --> 00:23:48.350
the Dart ecosystem.

00:23:48.350 --> 00:23:51.450
So we've been playing a lot
with the code here, but we

00:23:51.450 --> 00:23:54.150
have some other things like
package manager, which allows

00:23:54.150 --> 00:23:56.640
you to discover, install,
and manage third party

00:23:56.640 --> 00:23:57.740
dependencies.

00:23:57.740 --> 00:23:59.520
Most ecosystems have this.

00:23:59.520 --> 00:24:03.090
Ruby has Gems, Python has Eggs,
Java has Maven, Dart has

00:24:03.090 --> 00:24:04.710
Pub, the package manager.

00:24:04.710 --> 00:24:07.250
And the editor has Pub
integration or package

00:24:07.250 --> 00:24:09.640
management, built right
in for you.

00:24:09.640 --> 00:24:11.380
And so I want to show
a demo of that.

00:24:11.380 --> 00:24:13.540
Let's go back to one of
my favorite apps here,

00:24:13.540 --> 00:24:16.410
catpic-app, and we're going to
turn the analyzer back on, so

00:24:16.410 --> 00:24:20.660
you can see the errors that
we have in the system.

00:24:20.660 --> 00:24:23.330
So here is the sample
application that I have.

00:24:23.330 --> 00:24:27.510
Now, it uses three different
packages and I haven't run the

00:24:27.510 --> 00:24:30.730
package install process yet,
because I want to show you

00:24:30.730 --> 00:24:32.000
what happens beforehand.

00:24:32.000 --> 00:24:33.570
So, of course, I've
got these errors.

00:24:33.570 --> 00:24:36.240
Now, how do I get these packages
into my system?

00:24:36.240 --> 00:24:39.920
Well, I use a pubspec.yaml
file, which declares the

00:24:39.920 --> 00:24:42.220
dependencies and where to
find those dependencies.

00:24:42.220 --> 00:24:45.090
So here I've got two
dependencies, each pointing to

00:24:45.090 --> 00:24:46.380
a GitHub repo.

00:24:46.380 --> 00:24:49.840
We also have a package hosting
service at pub.dartlang.org,

00:24:49.840 --> 00:24:52.540
where you find many third party
dependencies, or third

00:24:52.540 --> 00:24:55.430
party packages for you to
us in your own app.

00:24:55.430 --> 00:25:00.070
Now if we select the files
directory here, and go to

00:25:00.070 --> 00:25:03.260
Tools and run Pub install,
that's going to parse the

00:25:03.260 --> 00:25:05.100
pubspec.yaml file, that
I have for this

00:25:05.100 --> 00:25:07.370
particular project here.

00:25:07.370 --> 00:25:10.560
It's going to pull down,
download, symlink, set

00:25:10.560 --> 00:25:13.190
everything else up for you.

00:25:13.190 --> 00:25:17.590
And then you can see here,
this is a little bug.

00:25:17.590 --> 00:25:21.340
But if we open up again, then
the errors are gone.

00:25:21.340 --> 00:25:22.170
And so, it's nice.

00:25:22.170 --> 00:25:25.710
You get a really nice, smooth
integration with Pub, our

00:25:25.710 --> 00:25:26.520
package manager.

00:25:26.520 --> 00:25:31.690
Of course, if we run this now,
you can see here boom,

00:25:31.690 --> 00:25:34.470
catpics, one of the
best apps I have.

00:25:34.470 --> 00:25:35.290
So enjoy that.

00:25:35.290 --> 00:25:37.470
But, of course, what's important
here is that, I only

00:25:37.470 --> 00:25:39.390
wrote about seven lines
of code to make

00:25:39.390 --> 00:25:40.850
this application work.

00:25:40.850 --> 00:25:44.050
I used the third party packages
for the catpics

00:25:44.050 --> 00:25:49.090
themselves, the simple widgets
here, the simple frame here.

00:25:49.090 --> 00:25:50.450
And each one of those
was pulled

00:25:50.450 --> 00:25:51.535
from different packages.

00:25:51.535 --> 00:25:53.810
And because Dart is a structured
language with

00:25:53.810 --> 00:25:56.260
first-class formal support for
things like libraries, and

00:25:56.260 --> 00:26:00.180
classes, you can actually have
independent, third-party

00:26:00.180 --> 00:26:02.830
authors all work together.

00:26:02.830 --> 00:26:06.030
And you, as an application
developer, can integrate these

00:26:06.030 --> 00:26:08.370
things, and have good certainty
that they're all

00:26:08.370 --> 00:26:09.500
going to play nicely.

00:26:09.500 --> 00:26:14.970
So I really like the Pub
integration in the editor.

00:26:14.970 --> 00:26:17.340
So I should point out some of
the customizations you can do

00:26:17.340 --> 00:26:18.320
in the editor.

00:26:18.320 --> 00:26:20.880
If you open up the preferences,
as I've done

00:26:20.880 --> 00:26:24.920
here, you can see that you can
show line numbers, you can

00:26:24.920 --> 00:26:30.080
print the margins, enable
code folding, excuse me.

00:26:30.080 --> 00:26:33.000
You can also manipulate the
fonts here, and dictate the

00:26:33.000 --> 00:26:34.560
behavior of errors
and warnings.

00:26:34.560 --> 00:26:37.140
The point with this is, in the
preferences, you have some

00:26:37.140 --> 00:26:40.940
nice control over the look
and feel of the editor.

00:26:40.940 --> 00:26:43.770
And the behavior of some of the
editor features for you.

00:26:43.770 --> 00:26:47.620
You can also control the auto
updates functionality as well.

00:26:47.620 --> 00:26:50.520
And so when you get the editor
everything's set to go, but

00:26:50.520 --> 00:26:53.070
know that you can tweak some
of these features, as well,

00:26:53.070 --> 00:26:56.380
which I like.

00:26:56.380 --> 00:26:59.320
OK, so that's a whirlwind tour
of some of the features and

00:26:59.320 --> 00:27:00.810
functionality of the editor.

00:27:00.810 --> 00:27:02.840
We saw how easy it is
to get started.

00:27:02.840 --> 00:27:04.670
You just open a zip file.

00:27:04.670 --> 00:27:07.030
Browsing around code and
navigating code, especially

00:27:07.030 --> 00:27:09.480
code that's unfamiliar to you,
is really easy with the

00:27:09.480 --> 00:27:12.330
outlines, and the jump to
definitions, and jump to

00:27:12.330 --> 00:27:13.870
callers functionality.

00:27:13.870 --> 00:27:16.670
We saw debugging, setting break
points, and stepping

00:27:16.670 --> 00:27:17.590
through code.

00:27:17.590 --> 00:27:20.330
We saw launching apps, both into
Dartium, our version of

00:27:20.330 --> 00:27:23.140
Chromium with the Dart virtual
machine, and compiling to

00:27:23.140 --> 00:27:24.040
JavaScript.

00:27:24.040 --> 00:27:26.400
We saw some of the customization
features and the

00:27:26.400 --> 00:27:28.770
integration with some
of the larger

00:27:28.770 --> 00:27:31.070
ecosystem of the Dart project.

00:27:31.070 --> 00:27:32.530
So hopefully this gives
you a taste of what

00:27:32.530 --> 00:27:33.920
the editor can do.

00:27:33.920 --> 00:27:37.140
We should note that while this
looks like Eclipse, this is a

00:27:37.140 --> 00:27:38.850
completely built from
the ground up

00:27:38.850 --> 00:27:41.780
version of the editor.

00:27:41.780 --> 00:27:44.510
And so it's lightweight and
streamlined, but if you like

00:27:44.510 --> 00:27:47.700
Eclipse we have the equivalent
functionality here, as an

00:27:47.700 --> 00:27:48.780
Eclipse plug-in.

00:27:48.780 --> 00:27:52.310
And the good folks at JetBrains
also have a Dart

00:27:52.310 --> 00:27:55.030
plug-in for their IntelliJ
and WebStorm editor.

00:27:55.030 --> 00:27:57.530
And if rich editors aren't
your bag, we also have

00:27:57.530 --> 00:28:01.560
plug-ins for Vim, Sublime,
TextMate, and Emacs.

00:28:01.560 --> 00:28:04.170
And so hopefully you can find
an editing experience that

00:28:04.170 --> 00:28:05.190
works well with you.

00:28:05.190 --> 00:28:08.410
No matter what you choose,
we hope that you try

00:28:08.410 --> 00:28:09.380
and write Dart code.

00:28:09.380 --> 00:28:13.210
Have fun with it, and really
broaden scale from small

00:28:13.210 --> 00:28:16.830
scripts, that use just
functions, too large apps that

00:28:16.830 --> 00:28:20.120
really deliver on the user
expectations for modern,

00:28:20.120 --> 00:28:22.440
really cool HTML5 features.

00:28:22.440 --> 00:28:24.940
With that, we'd love to have
a call for feedback.

00:28:24.940 --> 00:28:28.660
We have a Dart mailing list, and
Stack Overflow, and one of

00:28:28.660 --> 00:28:32.650
my favorite things the other is
the send feedback button.

00:28:32.650 --> 00:28:33.550
Do not be shy.

00:28:33.550 --> 00:28:37.110
Use this, tell us what's working
for you, what features

00:28:37.110 --> 00:28:39.550
do you need, what seems
to be a bug?

00:28:39.550 --> 00:28:42.680
This goes straight to the editor
team and we take this

00:28:42.680 --> 00:28:45.190
stuff really seriously, and
really appreciate any feedback

00:28:45.190 --> 00:28:46.880
that you have.

00:28:46.880 --> 00:28:49.280
So with that, I think we're
going to wrap up today's

00:28:49.280 --> 00:28:50.580
episode of Dartisans.

00:28:50.580 --> 00:28:52.380
And again thank you very
much for joining us.

00:28:52.380 --> 00:28:55.360
And see this next time in a
couple weeks, where we're

00:28:55.360 --> 00:28:58.920
going to talk in depth about
Dart and web components.

00:28:58.920 --> 00:29:02.490
And we're going to meet the
godfather of web components,

00:29:02.490 --> 00:29:04.560
and some of the engineers
working on Dart web

00:29:04.560 --> 00:29:05.360
components.

00:29:05.360 --> 00:29:08.690
And give you a deep dive in
Dart and web components.

00:29:08.690 --> 00:29:10.400
So, thanks very much,
and we'll see you

00:29:10.400 --> 00:29:11.650
next time on Dartisans.

