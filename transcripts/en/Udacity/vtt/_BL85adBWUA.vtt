WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Now here's an alternative.

00:00:02.000 --> 00:00:05.000
Instead of just defining a state by just creating a tuple

00:00:05.000 --> 00:00:08.000
and then getting at the fields of a state by doing an assignment,

00:00:08.000 --> 00:00:12.000
we can use something called a namedtuple that gives a name to the tuple itself

00:00:12.000 --> 00:00:16.000
as well as to the individual elements.

00:00:16.000 --> 00:00:22.000
We can define a new data type called state and use capitalized letters for data types.

00:00:22.000 --> 00:00:27.000
Say state is equal to a namedtuple, and the name of the data type is state,

00:00:27.000 --> 00:00:30.000
and the fields of the data type are p, me, you, and pending.

00:00:30.000 --> 00:00:33.000
So I can just go ahead and make that assertion.

00:00:33.000 --> 00:00:36.000
Namedtuples is in a module.

00:00:36.000 --> 00:00:40.000
So, from collections import namedtuple gives me access to it.

00:00:40.000 --> 00:01:00.000
Now I can say s = state (1,2,3,4), and I can ask for the components of s by name.

00:01:00.000 --> 00:01:04.000
How would I choose between this representation for states

00:01:04.000 --> 00:01:07.000
and the normal tuple representation?

00:01:07.000 --> 00:01:10.000
Well the namedtuple had a couple of advantages.

00:01:10.000 --> 00:01:12.000
It's explicit about the types.

00:01:12.000 --> 00:01:14.000
It helps you catch errors.

00:01:14.000 --> 00:01:17.000
So if you ask for the p field of something that's not a state

00:01:17.000 --> 00:01:19.000
that would give you an error.

00:01:19.000 --> 00:01:25.000
Whereas if you just broke up something that was four elements into these components

00:01:25.000 --> 00:01:28.000
that would work even if it didn't happen to be a proper state.

00:01:28.000 --> 00:01:30.000
There are a few negatives as well.

00:01:30.000 --> 00:01:33.000
It's a little bit more verbose, although not so much,

00:01:33.000 --> 00:01:36.000
and it may be unfamiliar to some programmers.

00:01:36.000 --> 00:01:40.000
It may take them a while to understand what namedtuples mean.

00:01:40.000 --> 00:01:46.000
I should say we could also do the same type of thing by defining a class.

00:01:46.000 --> 00:01:49.000
That has all the same positives,

00:01:49.000 --> 00:01:54.000
and it's certainly familiar to most Python programmers,

00:01:54.000 --> 00:01:57.000
but it would be even more verbose.

00:01:57.000 --> 00:02:01.000
Here's what hold and roll look like in this new notation.

00:02:01.000 --> 00:02:04.000
So, hold--where we're explicitly creating a new state.

00:02:04.000 --> 00:02:10.000
We look at the state.p, the state.you, the state.me, and the state.pending and so on,

00:02:10.000 --> 00:02:12.000
similarly for roll.

00:02:12.000 --> 00:02:14.000
They look fairly similar.

00:02:14.000 --> 00:02:17.000
You notice the lines are a little bit longer in terms of we're being more explicit.

00:02:17.000 --> 00:02:19.000
So, it takes a little bit more to say that.

00:02:19.000 --> 00:02:24.000
I'm sort of up in the air whether this representation is better

00:02:24.000 --> 00:02:26.000
than the previous representation with tuples.

00:02:26.000 --> 09:59:59.000
I could go either way.

