WEBVTT
Kind: captions
Language: en

00:00:00.630 --> 00:00:03.720
ALI AFSHAR: Welcome, everyone,
to the Google Drive Question

00:00:03.720 --> 00:00:06.620
Time about the SDK.

00:00:06.620 --> 00:00:07.460
Sorry we're a bit late.

00:00:07.460 --> 00:00:09.210
We had some minor technical
difficulties,

00:00:09.210 --> 00:00:11.310
but we're here now.

00:00:11.310 --> 00:00:12.080
My name's Ali.

00:00:12.080 --> 00:00:12.340
And this is--

00:00:12.340 --> 00:00:13.210
CLAUDIO CHERUBINO:
I'm Claudio.

00:00:13.210 --> 00:00:15.480
ALI AFSHAR: And we're going to
be looking at the questions

00:00:15.480 --> 00:00:17.840
that you've been asking on Stack
Overflow, see if we can

00:00:17.840 --> 00:00:21.210
come up with some
answers for you.

00:00:21.210 --> 00:00:26.790
So the first question we have
is, why is the redirect URL in

00:00:26.790 --> 00:00:30.230
Google Drive modified when
an app is called from the

00:00:30.230 --> 00:00:32.882
Google Drive UI?

00:00:32.882 --> 00:00:35.640
So there's a bit of information
about that, but if

00:00:35.640 --> 00:00:38.310
possible, Claudio, you could
describe what a redirect URL

00:00:38.310 --> 00:00:40.431
is or what the OAuth flow is.

00:00:40.431 --> 00:00:40.930
That would be fantastic.

00:00:40.930 --> 00:00:41.970
CLAUDIO CHERUBINO: Sure,
I'll start from that.

00:00:41.970 --> 00:00:43.770
But then the spoilers first.

00:00:43.770 --> 00:00:47.500
I don't think the redirect URL
is modified by the Google app.

00:00:47.500 --> 00:00:51.020
But let's go back to what
a redirect URL is.

00:00:51.020 --> 00:00:54.820
So in order for your application
to be authorized

00:00:54.820 --> 00:00:59.230
to access the user's files,
the application has to go

00:00:59.230 --> 00:01:01.690
through the so-called
OAuth flow.

00:01:01.690 --> 00:01:05.060
You've probably seen it many
times, when you install an

00:01:05.060 --> 00:01:07.580
application on your
phone, let's say.

00:01:07.580 --> 00:01:11.950
And you'll see that the
application wants to access

00:01:11.950 --> 00:01:12.440
your files.

00:01:12.440 --> 00:01:15.910
So you have to grant access to
it or deny access to it.

00:01:15.910 --> 00:01:17.700
And of course, if you
deny access, the

00:01:17.700 --> 00:01:19.610
application will not work.

00:01:19.610 --> 00:01:22.120
That page is provided
by the OAuth flow.

00:01:22.120 --> 00:01:25.160
So when you build your
application and you want to

00:01:25.160 --> 00:01:28.290
use this kind of authorization
mechanism, you define some

00:01:28.290 --> 00:01:31.410
parameters in the Google
API console.

00:01:31.410 --> 00:01:33.730
And one of them is
the redirect URL.

00:01:33.730 --> 00:01:36.640
How this works is like this.

00:01:36.640 --> 00:01:39.280
The application needs
to be authorized

00:01:39.280 --> 00:01:40.360
to access some files.

00:01:40.360 --> 00:01:44.120
So it will send the
request to Google.

00:01:44.120 --> 00:01:47.890
Google will show you a page that
says what the application

00:01:47.890 --> 00:01:51.020
wants, in this case, access
to files or documents.

00:01:51.020 --> 00:01:52.660
And it can be read-only,
write-only.

00:01:52.660 --> 00:01:56.000
There are different scopes you
can request access to.

00:01:56.000 --> 00:01:58.960
And then the user clicks
on Grant Access.

00:01:58.960 --> 00:02:04.220
When that happens, Google takes
the user back to the

00:02:04.220 --> 00:02:07.340
page that is listed
in the redirect

00:02:07.340 --> 00:02:09.380
URL in the API console.

00:02:09.380 --> 00:02:12.650
So we don't do any change
to that URL.

00:02:12.650 --> 00:02:15.720
We just take it as it
is from the API

00:02:15.720 --> 00:02:17.410
console, which you configure.

00:02:17.410 --> 00:02:19.490
And we send you back.

00:02:19.490 --> 00:02:22.420
What you should do, what you
should make sure, though, is

00:02:22.420 --> 00:02:26.630
that these redirect URL that is
defined in the API console

00:02:26.630 --> 00:02:29.240
matches the one that
you defined in

00:02:29.240 --> 00:02:31.700
your application code.

00:02:31.700 --> 00:02:36.340
If they don't match, the OAuth
flow will fail with an error

00:02:36.340 --> 00:02:38.750
that is called Redirect
URL mismatch.

00:02:38.750 --> 00:02:40.740
And I think this is exactly
what is happening

00:02:40.740 --> 00:02:42.315
here in this question.

00:02:45.860 --> 00:02:51.130
The developer has defined a
redirect URL that is something

00:02:51.130 --> 00:02:56.760
like site.com/app while the
API console says that the

00:02:56.760 --> 00:03:00.360
redirect URL is site.com,
without /app.

00:03:00.360 --> 00:03:04.670
So there is a mismatch, and for
security reasons we cannot

00:03:04.670 --> 00:03:08.330
approve this access,
and the flow fails.

00:03:08.330 --> 00:03:11.780
ALI AFSHAR: So the OAuth 2.0
specification is very clear

00:03:11.780 --> 00:03:12.280
about this.

00:03:12.280 --> 00:03:15.060
You have to check at
each stage that the

00:03:15.060 --> 00:03:17.190
redirect URL matches.

00:03:17.190 --> 00:03:18.610
So that's just what
we're doing here.

00:03:18.610 --> 00:03:20.865
And as Claudio rightly says,
it's likely that

00:03:20.865 --> 00:03:22.000
they're not the same.

00:03:22.000 --> 00:03:25.210
Now, I have three tips I always
do, because this is an

00:03:25.210 --> 00:03:27.460
error that we get quite a lot
when we're writing our own

00:03:27.460 --> 00:03:28.820
personal applications.

00:03:28.820 --> 00:03:29.870
So I do three things.

00:03:29.870 --> 00:03:33.340
Well, the first one, I check
that I haven't made a typo.

00:03:33.340 --> 00:03:36.420
The second one is to make sure
that the protocol is right.

00:03:36.420 --> 00:03:39.690
So if it's an HTTP redirect,
that's exactly what it is.

00:03:39.690 --> 00:03:41.960
It's not an HTTPS redirect.

00:03:41.960 --> 00:03:42.970
So check that.

00:03:42.970 --> 00:03:45.560
And the third one is to check
trailing slashes.

00:03:45.560 --> 00:03:48.870
So if there's a trailing slash
on the end of the URL, that's

00:03:48.870 --> 00:03:50.020
not the same as one without.

00:03:50.020 --> 00:03:53.320
So I usually check those three
things, and that covers most

00:03:53.320 --> 00:03:54.320
minor mistakes that
you can make.

00:03:54.320 --> 00:03:56.110
CLAUDIO CHERUBINO: Yeah, just to
make it super clear, it has

00:03:56.110 --> 00:03:59.480
to be exactly the same.

00:03:59.480 --> 00:04:02.775
It doesn't matter if they start
with the same URL or

00:04:02.775 --> 00:04:04.860
they're in the same domain
or anything else.

00:04:04.860 --> 00:04:06.170
They have to be the same.

00:04:06.170 --> 00:04:07.130
ALI AFSHAR: Yeah.

00:04:07.130 --> 00:04:09.010
And if you want more information
on that, please

00:04:09.010 --> 00:04:12.420
check out the OAuth 2.0 spec.

00:04:12.420 --> 00:04:13.930
CLAUDIO CHERUBINO: There's also
another thing we can add.

00:04:13.930 --> 00:04:16.589
It's that when you define your
application in the API's

00:04:16.589 --> 00:04:21.440
console, you can also specify
more than one redirect URL.

00:04:21.440 --> 00:04:26.670
And so in the API's console you
define them one per line.

00:04:26.670 --> 00:04:29.120
And each of them
would be valid.

00:04:29.120 --> 00:04:31.630
Of course, you have to have the
same URL that's in your

00:04:31.630 --> 00:04:32.110
application.

00:04:32.110 --> 00:04:33.420
But if you need more--

00:04:33.420 --> 00:04:35.240
let's say you need more for--

00:04:35.240 --> 00:04:38.445
you need one for testing that
is internal only and one for

00:04:38.445 --> 00:04:41.210
the public application, the real
application that external

00:04:41.210 --> 00:04:42.890
users will use.

00:04:42.890 --> 00:04:46.450
Then you can define
both and try.

00:04:46.450 --> 00:04:47.950
And that will work same way.

00:04:47.950 --> 00:04:48.750
ALI AFSHAR: Absolutely.

00:04:48.750 --> 00:04:51.020
And also local host and
this kind of thing

00:04:51.020 --> 00:04:52.070
is absolutely fine.

00:04:52.070 --> 00:04:54.760
So as long as they match,
you're onto a winner.

00:04:54.760 --> 00:04:59.020
So that's, I think, the answer
to that question.

00:04:59.020 --> 00:05:00.680
CLAUDIO CHERUBINO: Do we
have other questions?

00:05:00.680 --> 00:05:02.320
ALI AFSHAR: We have
other questions.

00:05:02.320 --> 00:05:07.730
Another one about OAuth, since
we're warm on the topic.

00:05:07.730 --> 00:05:09.670
CLAUDIO CHERUBINO: OK.

00:05:09.670 --> 00:05:12.180
ALI AFSHAR: So I'm having--
oh, clarification on OAuth

00:05:12.180 --> 00:05:16.270
flow in Python Google Drive
sample application DrEdit.

00:05:16.270 --> 00:05:19.560
DrEdit is an application
that we wrote in a

00:05:19.560 --> 00:05:20.540
few different languages.

00:05:20.540 --> 00:05:22.770
And it's a full end-to-end
sample that you can use to get

00:05:22.770 --> 00:05:25.760
yourself going with
a drive app.

00:05:25.760 --> 00:05:28.780
Now, when the application is
called from the Google Drive

00:05:28.780 --> 00:05:32.600
UI, the application checks that
it is authorized to make

00:05:32.600 --> 00:05:34.270
requests to Google Drive.

00:05:34.270 --> 00:05:37.090
In the event that access has
been revoked, it tries to

00:05:37.090 --> 00:05:39.840
reauthorize using the
following code.

00:05:39.840 --> 00:05:40.930
And how does it do that?

00:05:40.930 --> 00:05:45.020
It redirects back to the
authorization endpoint so that

00:05:45.020 --> 00:05:48.230
the user can't authorize.

00:05:48.230 --> 00:05:51.380
My problem is that when
I revoke access of the

00:05:51.380 --> 00:05:54.130
application from my Google
Dashboard and try and open it

00:05:54.130 --> 00:05:56.900
via Google Drive UI, it
redirects me to the

00:05:56.900 --> 00:05:59.990
Authorization page, then
redirects back to the

00:05:59.990 --> 00:06:02.930
application after
I authorize it.

00:06:02.930 --> 00:06:06.510
But it manages to retain
the state.

00:06:06.510 --> 00:06:09.145
I think this is inconsistent
with what the code describes,

00:06:09.145 --> 00:06:11.460
and I was wondering
if there is any

00:06:11.460 --> 00:06:14.310
explanation for this behavior.

00:06:14.310 --> 00:06:15.920
CLAUDIO CHERUBINO: I think
that's actually by design.

00:06:15.920 --> 00:06:18.260
So let's explain this.

00:06:18.260 --> 00:06:23.070
The first time the user opens
your application, the user has

00:06:23.070 --> 00:06:26.390
to go through the OAuth flow and
manually grant access to

00:06:26.390 --> 00:06:27.390
the application.

00:06:27.390 --> 00:06:31.280
When that happens, Google
returns two different tokens--

00:06:31.280 --> 00:06:35.180
a long-lived refresh token and
a short-lived access token.

00:06:35.180 --> 00:06:38.610
The access token is what you
need to send requests.

00:06:38.610 --> 00:06:41.630
And it only lives for about
one hour, though.

00:06:41.630 --> 00:06:45.610
So whenever that expires, you
have to use a refresh token to

00:06:45.610 --> 00:06:48.300
request a new access token, and
then use the application

00:06:48.300 --> 00:06:51.830
as nothing happened.

00:06:51.830 --> 00:06:55.160
The problem or the design is
that they only get the refresh

00:06:55.160 --> 00:06:58.440
token the first time the user
grants access to the URL.

00:06:58.440 --> 00:07:00.690
And then you have
to store it, for

00:07:00.690 --> 00:07:01.670
instance, in your database.

00:07:01.670 --> 00:07:05.750
And this is what DrEdit,
the app we have, does.

00:07:05.750 --> 00:07:08.810
It stores the refresh token
in the database.

00:07:08.810 --> 00:07:11.820
In case the database is corrupt,
in case you lose

00:07:11.820 --> 00:07:15.270
access to the database, or in
case the user revokes access

00:07:15.270 --> 00:07:17.830
to the application,
that refresh token

00:07:17.830 --> 00:07:19.520
is no longer valid.

00:07:19.520 --> 00:07:22.910
So if the user wants to go back
to the app and use it

00:07:22.910 --> 00:07:26.180
again, we have to send
the user back to the

00:07:26.180 --> 00:07:27.520
grant access page.

00:07:27.520 --> 00:07:29.730
This is not automatic, but
this is covered by the

00:07:29.730 --> 00:07:30.030
application.

00:07:30.030 --> 00:07:32.790
So it's described in the
documentation we have.

00:07:32.790 --> 00:07:36.560
So whenever we realize we have
no refresh token, we have to

00:07:36.560 --> 00:07:38.360
send the user back to
a grant access page.

00:07:38.360 --> 00:07:41.950
And in order to do that, we have
to build an authorization

00:07:41.950 --> 00:07:43.865
URL with some specific
parameters.

00:07:46.410 --> 00:07:48.630
After that, the user grants
access, and everything goes

00:07:48.630 --> 00:07:50.890
back to the normal flow.

00:07:50.890 --> 00:07:54.980
One thing we added to this
normal behavior is that we

00:07:54.980 --> 00:07:56.370
save the state.

00:07:56.370 --> 00:07:59.490
The state stores some
information about what the

00:07:59.490 --> 00:08:00.730
user is doing--

00:08:00.730 --> 00:08:04.680
for instance, if the user is
opening a new file, opening an

00:08:04.680 --> 00:08:06.350
existing file, or creating
a new file.

00:08:06.350 --> 00:08:08.930
We pass that in the
state parameter.

00:08:08.930 --> 00:08:10.740
So we want to keep that.

00:08:10.740 --> 00:08:15.890
Otherwise, if we don't, then we
have less than optimal user

00:08:15.890 --> 00:08:18.190
experience.

00:08:18.190 --> 00:08:21.770
Let's say the user is editing
a file, and he spends a long

00:08:21.770 --> 00:08:26.990
time writing a document, he
writes this novel, DrEdit.

00:08:26.990 --> 00:08:29.330
And the access token expires.

00:08:29.330 --> 00:08:32.299
And we need to refresh it
from refresh token.

00:08:32.299 --> 00:08:34.870
But for some reason, we
cannot get access to

00:08:34.870 --> 00:08:36.270
that refresh token.

00:08:36.270 --> 00:08:38.559
We have to send the user back
to the ground access page.

00:08:38.559 --> 00:08:42.370
But we don't want the user to
lose what it was doing.

00:08:42.370 --> 00:08:43.030
ALI AFSHAR: Exactly.

00:08:43.030 --> 00:08:45.770
CLAUDIO CHERUBINO: So if he was
editing an existing file,

00:08:45.770 --> 00:08:49.890
we want the user then to go
back to the same page.

00:08:49.890 --> 00:08:53.700
So we send it back to the Grant
Access page, but we also

00:08:53.700 --> 00:08:57.300
want the user to go back
to the page it

00:08:57.300 --> 00:08:58.330
was working on before.

00:08:58.330 --> 00:09:00.200
That's why we store the
state parameter.

00:09:00.200 --> 00:09:01.095
ALI AFSHAR: Exactly.

00:09:01.095 --> 00:09:03.680
And again, the state parameter
is something that is in the

00:09:03.680 --> 00:09:04.985
OAuth 2.0 spec.

00:09:04.985 --> 00:09:08.280
And it's very useful for this
purpose, for an application

00:09:08.280 --> 00:09:11.900
when the user authorizes to know
what the user was doing

00:09:11.900 --> 00:09:15.240
before they were sent
away to authorize.

00:09:15.240 --> 00:09:19.610
And in the drive applications
situation, we actually use

00:09:19.610 --> 00:09:22.020
that very specifically to
say what it's using.

00:09:22.020 --> 00:09:24.710
But in other situations you
can use the state for

00:09:24.710 --> 00:09:25.720
whatever you like.

00:09:25.720 --> 00:09:26.120
CLAUDIO CHERUBINO: Yeah.

00:09:26.120 --> 00:09:29.180
And then the drive application,
when the

00:09:29.180 --> 00:09:34.190
application is integrated with
the drive UI, we send some

00:09:34.190 --> 00:09:38.810
specific parameters which are
listed in our documentation.

00:09:38.810 --> 00:09:42.300
Probably the most important is
the action we pass to the

00:09:42.300 --> 00:09:47.910
user, so that when a user tries
to open an existing file

00:09:47.910 --> 00:09:52.810
from the drive UI, we pass some
parameters in the state.

00:09:52.810 --> 00:09:56.460
There are the action, which
is open, and the unique

00:09:56.460 --> 00:09:58.630
identifier, the file the
user's trying to open.

00:09:58.630 --> 00:10:02.090
So then the application knows
what user wants to do and

00:10:02.090 --> 00:10:03.840
which file the user's
trying to access.

00:10:03.840 --> 00:10:06.140
Same thing for when
we create a file.

00:10:06.140 --> 00:10:11.720
We say that the action is
create, and we also say where

00:10:11.720 --> 00:10:14.080
the user is trying to create,
the folder the user is trying

00:10:14.080 --> 00:10:15.600
to create the file in.

00:10:15.600 --> 00:10:17.900
ALI AFSHAR: And if you're
interested in how that exactly

00:10:17.900 --> 00:10:20.830
look or how to pass that, again,
look at our DrEdit

00:10:20.830 --> 00:10:23.780
samples in your chosen language,
and there's an

00:10:23.780 --> 00:10:25.610
example of each of them
on how to pass it.

00:10:25.610 --> 00:10:27.910
CLAUDIO CHERUBINO: Which are
the languages we support?

00:10:27.910 --> 00:10:30.010
ALI AFSHAR: Currently for
DrEdit we have Python.

00:10:30.010 --> 00:10:30.890
We have Java.

00:10:30.890 --> 00:10:33.450
We have .NET.

00:10:33.450 --> 00:10:34.490
We have PHP.

00:10:34.490 --> 00:10:36.090
And we have Ruby.

00:10:36.090 --> 00:10:37.710
CLAUDIO CHERUBINO: OK,
what about Go?

00:10:37.710 --> 00:10:38.740
I think you wrote one.

00:10:38.740 --> 00:10:41.860
ALI AFSHAR: So we do have
half a sample for Go.

00:10:41.860 --> 00:10:43.600
We'll look to get that out.

00:10:43.600 --> 00:10:47.660
We do have specific samples
for API calling in Go.

00:10:47.660 --> 00:10:50.900
So if Go's your thing,
firstly, nice one.

00:10:50.900 --> 00:10:54.250
Secondly, check out our samples
that are in our

00:10:54.250 --> 00:10:55.900
reference documentation.

00:10:55.900 --> 00:10:59.050
I know there's at least one
person using them externally.

00:10:59.050 --> 00:11:00.420
So that's great.

00:11:00.420 --> 00:11:03.720
I personally love Go.

00:11:03.720 --> 00:11:06.110
Right, next question.

00:11:06.110 --> 00:11:08.960
How to integrate Google
Docs with PHP?

00:11:08.960 --> 00:11:10.530
This seems to be a question
we get asked a lot.

00:11:10.530 --> 00:11:11.580
CLAUDIO CHERUBINO: Yeah.

00:11:11.580 --> 00:11:13.030
And it's a broad question.

00:11:13.030 --> 00:11:13.900
ALI AFSHAR: It's a
broad question.

00:11:13.900 --> 00:11:15.110
Please help me--

00:11:15.110 --> 00:11:16.540
always a good start--

00:11:16.540 --> 00:11:18.550
integrating Google
Docs for PHP.

00:11:18.550 --> 00:11:20.730
I want to use Google Docs
as a database for my

00:11:20.730 --> 00:11:22.450
application in PHP.

00:11:22.450 --> 00:11:26.060
I want to upload and download
files for Google Docs,

00:11:26.060 --> 00:11:28.520
irrespective of using PHP.

00:11:28.520 --> 00:11:32.070
So I guess that means how do I
access Google Docs with PHP?

00:11:32.070 --> 00:11:33.480
Well nowadays--

00:11:33.480 --> 00:11:36.380
before I let Claudio answer
this question-- nowadays

00:11:36.380 --> 00:11:38.240
Google Docs is Google Drive.

00:11:38.240 --> 00:11:42.280
So we would very much recommend
using the Drive API.

00:11:42.280 --> 00:11:44.760
And Claudio is going to tell
you a bit about that.

00:11:44.760 --> 00:11:47.310
CLAUDIO CHERUBINO: Well, as
you said before, we have

00:11:47.310 --> 00:11:49.630
complete samples in many
different languages.

00:11:49.630 --> 00:11:51.140
And PHP's one of them.

00:11:51.140 --> 00:11:55.360
So the Google Drive API
completely supports PHP.

00:11:55.360 --> 00:11:59.390
And we have samples for each
operation, including file

00:11:59.390 --> 00:12:02.050
upload and download, which is
[INAUDIBLE], in this case, but

00:12:02.050 --> 00:12:05.040
it's also what this guy
is looking for.

00:12:05.040 --> 00:12:09.930
And we also have a complete
application, DrEdit.

00:12:12.460 --> 00:12:15.430
And we strongly recommend people
to use the new Drive

00:12:15.430 --> 00:12:20.500
API, which has a totally new
backend and a new set of

00:12:20.500 --> 00:12:23.210
libraries, a new
set of samples.

00:12:23.210 --> 00:12:26.190
The existing Documents List
API is still supported.

00:12:26.190 --> 00:12:28.270
It also has support for PHP.

00:12:28.270 --> 00:12:31.540
But the resources that can be
accessed by the Documents List

00:12:31.540 --> 00:12:35.440
API and the Drive API are
exactly the same resources.

00:12:35.440 --> 00:12:39.260
So at the moment, right now,
there is no real advantage in

00:12:39.260 --> 00:12:41.730
using the old Documents
List API.

00:12:41.730 --> 00:12:44.430
Because all of its features are
now supported by the Drive

00:12:44.430 --> 00:12:48.340
API v 2, which we released a
couple of weeks ago at Google

00:12:48.340 --> 00:12:49.920
I/O.

00:12:49.920 --> 00:12:52.860
ALI AFSHAR: Unless you love XML,
for example, or unless

00:12:52.860 --> 00:12:55.740
your application is already
heavily integrated with the

00:12:55.740 --> 00:12:57.400
Documents List API.

00:12:57.400 --> 00:13:00.370
We certainly wouldn't use
it for any new code.

00:13:00.370 --> 00:13:01.900
Would you agree with
that, Claudio?

00:13:01.900 --> 00:13:03.720
CLAUDIO CHERUBINO:
I would agree.

00:13:03.720 --> 00:13:07.340
If you have existing code and
it can be a problem to port

00:13:07.340 --> 00:13:10.730
that to the new library and the
new infrastructure, then

00:13:10.730 --> 00:13:13.110
of course you can keep using
the Documents List API.

00:13:13.110 --> 00:13:15.040
But for new development
we strongly

00:13:15.040 --> 00:13:17.060
recommend using Drive API.

00:13:17.060 --> 00:13:19.020
It's also more efficient.

00:13:19.020 --> 00:13:20.350
It's easier to understand--

00:13:20.350 --> 00:13:27.280
and just JSON instead of XML,
and many other advantages.

00:13:27.280 --> 00:13:31.260
And of course, we must say that
we now focus more on its

00:13:31.260 --> 00:13:34.830
development than the old
version of the API.

00:13:34.830 --> 00:13:35.040
ALI AFSHAR: Right.

00:13:35.040 --> 00:13:36.480
Absolutely right.

00:13:36.480 --> 00:13:40.480
Certainly with new features and
that kind of thing, that's

00:13:40.480 --> 00:13:44.020
where we're focused
at the moment.

00:13:44.020 --> 00:13:47.660
Uploading a local file
to Google Drive.

00:13:47.660 --> 00:13:50.280
I'm looking at code taken from
the official documentation

00:13:50.280 --> 00:13:53.500
shown below to upload a file
from the local hard drive to

00:13:53.500 --> 00:13:54.750
Google Drive.

00:13:54.750 --> 00:13:57.670
Does anyone know what the form
that I would use to post the

00:13:57.670 --> 00:14:00.320
necessary JSON and media
would look like?

00:14:00.320 --> 00:14:02.930
I've looked high and low
for an example, but

00:14:02.930 --> 00:14:03.930
I cannot find one.

00:14:03.930 --> 00:14:07.050
I can tell you from the code
sample that he's using Python,

00:14:07.050 --> 00:14:10.940
and the sample is exactly copied
from the documentation.

00:14:14.236 --> 00:14:16.000
CLAUDIO CHERUBINO: So
it will be useful.

00:14:16.000 --> 00:14:18.030
So this is a general answer.

00:14:18.030 --> 00:14:21.180
Any time you report something
on Stack Overflow,

00:14:21.180 --> 00:14:21.970
thank you for that.

00:14:21.970 --> 00:14:25.140
But also try to be as specific
as possible.

00:14:25.140 --> 00:14:28.550
And if something fails, there's
usually an error

00:14:28.550 --> 00:14:33.080
message that says a lot
about what went wrong.

00:14:33.080 --> 00:14:37.270
So with that, we can
easily help you.

00:14:37.270 --> 00:14:42.500
So this user is asking
for the exact JSON

00:14:42.500 --> 00:14:46.450
format to upload a file.

00:14:46.450 --> 00:14:49.280
So in our code snippets, we have
code snippets for each

00:14:49.280 --> 00:14:50.940
language, including
Python, which is

00:14:50.940 --> 00:14:53.030
what this guy's using.

00:14:53.030 --> 00:14:58.150
But we also have a specific page
for the upload protocol

00:14:58.150 --> 00:15:02.480
that describes the JSON that
they have to send, and all the

00:15:02.480 --> 00:15:03.750
parameters he can use.

00:15:03.750 --> 00:15:06.980
So we have complete samples in
all the supported languages.

00:15:06.980 --> 00:15:10.050
But we also have a page that
describes the protocol.

00:15:10.050 --> 00:15:11.676
We have actually a different
way to support

00:15:11.676 --> 00:15:13.290
files to Google Drive.

00:15:13.290 --> 00:15:15.900
And maybe you want to
talk about that?

00:15:18.420 --> 00:15:18.670
ALI AFSHAR: Yeah.

00:15:18.670 --> 00:15:21.810
I think kind of more interesting
here is exactly

00:15:21.810 --> 00:15:24.750
why this sample is failing.

00:15:24.750 --> 00:15:27.450
We did speak about the different
upload types in one

00:15:27.450 --> 00:15:28.270
of our previous--

00:15:28.270 --> 00:15:28.630
CLAUDIO CHERUBINO: I see.

00:15:28.630 --> 00:15:30.920
ALI AFSHAR: So I don't want
to bore these guys.

00:15:30.920 --> 00:15:36.230
But how the DrEdit sample works
is because it's a web

00:15:36.230 --> 00:15:40.170
application, and running on App
Engine, there's no concept

00:15:40.170 --> 00:15:41.700
of local files.

00:15:41.700 --> 00:15:45.360
So this uses an upload type
called the media in memory

00:15:45.360 --> 00:15:48.840
upload that essentially takes
a string and a MIME type and

00:15:48.840 --> 00:15:51.020
imagines it as a file.

00:15:51.020 --> 00:15:55.160
What you would do on a local
file is use a media file

00:15:55.160 --> 00:15:59.150
upload that takes a file
name on the local disk.

00:15:59.150 --> 00:16:01.780
You can optionally pass it a
MIME type, or it can do the

00:16:01.780 --> 00:16:05.020
discovery, work out what the
MIME type is for you.

00:16:05.020 --> 00:16:09.290
So I think what would solve this
person's problem is to

00:16:09.290 --> 00:16:12.790
actually just replace the media
in memory upload with a

00:16:12.790 --> 00:16:15.650
media file upload, and instead
of passing the data as a

00:16:15.650 --> 00:16:18.980
string, just to pass the file
name and allow the API library

00:16:18.980 --> 00:16:19.470
to do that.

00:16:19.470 --> 00:16:21.680
CLAUDIO CHERUBINO: Well,
assuming that the user is not

00:16:21.680 --> 00:16:22.970
using App Engine.

00:16:22.970 --> 00:16:25.210
ALI AFSHAR: Yeah,
well it says--

00:16:25.210 --> 00:16:27.930
very good assumption, but it
says here, "a local file." So

00:16:27.930 --> 00:16:29.460
I'm assuming--

00:16:29.460 --> 00:16:31.120
CLAUDIO CHERUBINO: If you're
using App Engine, can you read

00:16:31.120 --> 00:16:32.480
a local file on your computer?

00:16:32.480 --> 00:16:32.820
ALI AFSHAR: No.

00:16:32.820 --> 00:16:34.200
The App Engine has
no local file.

00:16:34.200 --> 00:16:35.010
CLAUDIO CHERUBINO: Exactly.

00:16:35.010 --> 00:16:36.670
ALI AFSHAR: And not only
on your system.

00:16:36.670 --> 00:16:39.260
On the server itself there's
no concept of file.

00:16:39.260 --> 00:16:41.410
CLAUDIO CHERUBINO: In that case,
I think maybe you have

00:16:41.410 --> 00:16:44.270
to upload a file with something
like an HTML upload

00:16:44.270 --> 00:16:46.540
to your application and then
send it back to Google.

00:16:46.540 --> 00:16:50.160
But it's king of messy, and it's
probably not what this

00:16:50.160 --> 00:16:50.700
guy is trying to do.

00:16:50.700 --> 00:16:51.090
ALI AFSHAR: So, yeah.

00:16:51.090 --> 00:16:53.810
I am fairly sure he's writing
an application that

00:16:53.810 --> 00:16:56.420
communicates directly
from his computer--

00:16:56.420 --> 00:16:57.920
I keep saying "his"--

00:16:57.920 --> 00:17:03.170
his or her computer, directly
to Google Drive, which, of

00:17:03.170 --> 00:17:05.630
course, is as common a use case
as doing it from a web

00:17:05.630 --> 00:17:06.770
application.

00:17:06.770 --> 00:17:10.540
So I think that would be
the solution to that.

00:17:10.540 --> 00:17:13.424
If you're interested in the
different types of uploads--

00:17:13.424 --> 00:17:14.839
sorry to cut you off
on that, Claudio--

00:17:14.839 --> 00:17:16.810
if you're interested in the
different types of upload,

00:17:16.810 --> 00:17:18.430
there's the document
Claudio said.

00:17:18.430 --> 00:17:24.460
Or check our history of Google
developer live sessions, where

00:17:24.460 --> 00:17:26.160
Steve Basil talks in
depth about this.

00:17:26.160 --> 00:17:27.410
CLAUDIO CHERUBINO: I should
probably have checked it out.

00:17:31.510 --> 00:17:32.970
Want to go with the
last question?

00:17:32.970 --> 00:17:34.220
ALI AFSHAR: And the
last question--

00:17:37.555 --> 00:17:39.530
ah, this is a good one.

00:17:39.530 --> 00:17:41.930
Because I guess we can
talk about this.

00:17:41.930 --> 00:17:44.550
Don't send email notification
when ACL

00:17:44.550 --> 00:17:46.050
modified for Google Doc.

00:17:46.050 --> 00:17:48.560
That's not really a question,
but I'm guessing it's saying

00:17:48.560 --> 00:17:53.070
how can I modify an ACL for a
Google Doc without sending an

00:17:53.070 --> 00:17:54.335
email notification.

00:17:54.335 --> 00:17:56.350
I'm going to let Claudio answer,
but just as bit of

00:17:56.350 --> 00:17:59.430
background, in the Google Drive
user interface, when you

00:17:59.430 --> 00:18:02.030
share something with someone you
have a little check box to

00:18:02.030 --> 00:18:03.430
say, notify them by email.

00:18:03.430 --> 00:18:05.450
And you can set a
custom message.

00:18:05.450 --> 00:18:07.750
The API is exactly the same.

00:18:07.750 --> 00:18:09.950
By default it does
send an email.

00:18:09.950 --> 00:18:10.620
Is that right?

00:18:10.620 --> 00:18:11.550
CLAUDIO CHERUBINO: Yeah.

00:18:11.550 --> 00:18:13.065
ALI AFSHAR: So is there
a way that we can

00:18:13.065 --> 00:18:16.150
not send the email?

00:18:16.150 --> 00:18:19.090
CLAUDIO CHERUBINO: Yes,
there is a way.

00:18:19.090 --> 00:18:21.810
So this user is trying to use
the Documents List API, the

00:18:21.810 --> 00:18:26.720
older API, which, I suppose,
is his functionality.

00:18:26.720 --> 00:18:31.194
But the Java library, which--

00:18:31.194 --> 00:18:33.460
so this developer's
using Java.

00:18:33.460 --> 00:18:36.430
And unfortunately,
Java library--

00:18:36.430 --> 00:18:37.410
I think it was using Java.

00:18:37.410 --> 00:18:38.300
ALI AFSHAR: That's
right, yeah.

00:18:38.300 --> 00:18:38.810
CLAUDIO CHERUBINO: Oh yeah.

00:18:38.810 --> 00:18:42.480
And unfortunately, Java
client library

00:18:42.480 --> 00:18:44.890
doesn't expose this option.

00:18:44.890 --> 00:18:50.420
So if you want to use the older
Documents List API with

00:18:50.420 --> 00:18:54.990
Java, there's no way to do this,
unless, you hard code at

00:18:54.990 --> 00:18:56.210
somewhere--

00:18:56.210 --> 00:18:58.750
you have to hack it around.

00:18:58.750 --> 00:19:02.030
A better solution would be to
use the new Drive API, which

00:19:02.030 --> 00:19:04.300
has an added support for this.

00:19:04.300 --> 00:19:10.050
So there's probably called Send
Notification Emails--

00:19:10.050 --> 00:19:13.680
there is actually a method, a
set method called Set Send

00:19:13.680 --> 00:19:15.120
Notification Emails.

00:19:15.120 --> 00:19:19.240
And you can set it to true or
false whenever you instantiate

00:19:19.240 --> 00:19:21.170
a insert request.

00:19:21.170 --> 00:19:25.120
So this is one of the advantages
of using the new

00:19:25.120 --> 00:19:27.510
API, is that the client
libraries are

00:19:27.510 --> 00:19:28.930
automatically updated.

00:19:28.930 --> 00:19:32.160
So whenever we have a new thing
release in API, a new

00:19:32.160 --> 00:19:35.980
feature, a new field, a new
method, in a very short amount

00:19:35.980 --> 00:19:40.310
of time all the libraries will
be automatically regenerated

00:19:40.310 --> 00:19:44.140
so that users all will have
the latest version of it,

00:19:44.140 --> 00:19:45.310
unlike the old ones.

00:19:45.310 --> 00:19:49.090
So that is one of the reasons
why we are moving all the APIs

00:19:49.090 --> 00:19:52.990
to this new structure.

00:19:52.990 --> 00:19:54.330
ALI AFSHAR: And I see in
the comments it says,

00:19:54.330 --> 00:19:56.550
unfortunately, my application
is heavily based on

00:19:56.550 --> 00:19:57.730
Documents List API.

00:19:57.730 --> 00:20:00.400
So exactly that case, as Claudio
said, we would have to

00:20:00.400 --> 00:20:01.480
hack around it.

00:20:01.480 --> 00:20:02.510
How would you hack around it?

00:20:02.510 --> 00:20:07.090
Well, most of the methods you
can pass a URL in directly.

00:20:07.090 --> 00:20:10.410
And for that you will need to
manually append the send

00:20:10.410 --> 00:20:13.540
notification emails
equals false.

00:20:13.540 --> 00:20:15.580
You'd have to actually
concatenate that on

00:20:15.580 --> 00:20:16.740
the end of the URL.

00:20:16.740 --> 00:20:18.800
So it's not ideal, but that's
the way to do it.

00:20:18.800 --> 00:20:22.190
Again, we would strongly
recommend using the Drive API

00:20:22.190 --> 00:20:23.810
if you can for this
kind of use case.

00:20:23.810 --> 00:20:24.560
CLAUDIO CHERUBINO: Yeah.

00:20:24.560 --> 00:20:26.970
All these parameters are
listed in the docs.

00:20:26.970 --> 00:20:31.760
So this is found in the
Documents List API

00:20:31.760 --> 00:20:32.790
documentation.

00:20:32.790 --> 00:20:34.750
So if you want to know what
other parameters are there,

00:20:34.750 --> 00:20:36.050
you can just look at the docs.

00:20:36.050 --> 00:20:39.780
But take into account that not
all client libraries support

00:20:39.780 --> 00:20:41.020
all the same features.

00:20:41.020 --> 00:20:45.970
So you can be in a case like
this where the client library

00:20:45.970 --> 00:20:48.550
for your favorite language
doesn't actually support the

00:20:48.550 --> 00:20:50.390
field or method that
you want--

00:20:50.390 --> 00:20:52.620
maybe because it's new, or maybe
because it's something

00:20:52.620 --> 00:20:56.310
experimental, or many
other reasons.

00:20:56.310 --> 00:20:59.920
When you can, you should
move to the Drive API.

00:20:59.920 --> 00:21:02.000
ALI AFSHAR: Agreed And I
think on that note we

00:21:02.000 --> 00:21:02.590
should leave it.

00:21:02.590 --> 00:21:04.340
Thank you very much
for joining us.

00:21:04.340 --> 00:21:07.110
We'll be back again this week
and next with some more of

00:21:07.110 --> 00:21:08.130
your questions.

00:21:08.130 --> 00:21:10.612
If you have any burning
questions, please, by all

00:21:10.612 --> 00:21:11.560
means, ask them.

00:21:11.560 --> 00:21:14.230
And we'll get round to answering
them for you.

00:21:14.230 --> 00:21:15.040
Thank you very much.

00:21:15.040 --> 00:21:16.290
CLAUDIO CHERUBINO: Thank
you very much.

00:21:20.100 --> 00:21:21.080
MALE SPEAKER: Good job, guys.

00:21:21.080 --> 00:21:22.950
ALI AFSHAR: Thank you.

