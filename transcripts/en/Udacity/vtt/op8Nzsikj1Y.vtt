WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:04.490
I mentioned that this management function that this initiator

00:00:04.490 --> 00:00:06.550
is doing, you don't want it to be statically

00:00:06.550 --> 00:00:08.080
assigned to one node, because that would be a

00:00:08.080 --> 00:00:11.540
huge burden, and besides this node will suddenly become very

00:00:11.540 --> 00:00:14.790
active, and if that happens, then you must time

00:00:14.790 --> 00:00:17.800
in the computations that are going to happen here to

00:00:17.800 --> 00:00:20.520
do this management function. Now intuitively if you think

00:00:20.520 --> 00:00:25.460
about it, if a particular node, let's say node N2.

00:00:25.460 --> 00:00:31.490
Has a read of .8, what does that mean? What that means is that in the upcoming

00:00:31.490 --> 00:00:37.460
Epoch, 80% of the end pages are going to be replaced from the

00:00:37.460 --> 00:00:43.525
node N2, in other words, N2 is hosting a whole bunch of serious citizens, so

00:00:43.525 --> 00:00:47.100
it's a node that's not very active. Right?

00:00:47.100 --> 00:00:50.950
If an inactive node, then the replacement's candidates

00:00:50.950 --> 00:00:52.960
are probably not going to come from that guy

00:00:52.960 --> 00:00:56.070
and in predicting the future the initiator is saying that

00:00:56.070 --> 00:00:58.540
well, most of the replacements are going to come from

00:00:58.540 --> 00:01:02.540
here, so it's rated very high. So this information. The

00:01:02.540 --> 00:01:05.542
weight information for all the nodes is coming to

00:01:05.542 --> 00:01:07.950
every one of these guys. So intuitively if we think

00:01:07.950 --> 00:01:11.500
about it, the guy that has the highest weight is

00:01:11.500 --> 00:01:16.100
probably the least active. Why not make him the manager?

00:01:16.100 --> 00:01:19.350
So the initiator for the next Epoch is going

00:01:19.350 --> 00:01:22.450
to be the node with the maximum weight. Now how

00:01:22.450 --> 00:01:24.880
do you determine that? Well, every one of these

00:01:24.880 --> 00:01:29.150
nodes is receiving not only the min age of the

00:01:29.150 --> 00:01:31.150
candidate pages that are going to be replaced in

00:01:31.150 --> 00:01:35.350
the next epoch but also the weight distribution that says

00:01:35.350 --> 00:01:38.640
what is the percentage of these replacements that are going

00:01:38.640 --> 00:01:41.530
to happen in each one of these nodes. So locally

00:01:41.530 --> 00:01:44.330
each one of these guys. Can look at the

00:01:44.330 --> 00:01:47.060
Wi vector that it got back from the initiator and

00:01:47.060 --> 00:01:52.130
say, I know, given that node N3 has the

00:01:52.130 --> 00:01:55.010
maximum rate, that's going to be the initiative of the next

00:01:55.010 --> 00:01:57.540
epoch. So locally you can make the determination so

00:01:57.540 --> 00:01:59.920
that for the next epoch, in order to send the

00:01:59.920 --> 00:02:02.730
age information, you know, locally who to send it

00:02:02.730 --> 00:02:06.950
to. Now let's look at how this minimum age information

00:02:06.950 --> 00:02:08.970
is going to be used by each node.

00:02:08.970 --> 00:02:13.610
Remember that min age represents the minimum age of

00:02:13.610 --> 00:02:17.340
the m oldest pages. The smaller the age, the

00:02:17.340 --> 00:02:20.010
more recent that page is. And so those are

00:02:20.010 --> 00:02:25.290
the active pages. So if you, if you look at this as the age distribution, of all

00:02:25.290 --> 00:02:28.820
the pages, then if you draw a line here,

00:02:28.820 --> 00:02:32.300
then the pages to the left of this line,

00:02:32.300 --> 00:02:35.270
the minimum age line, are the active pages. And the

00:02:35.270 --> 00:02:37.680
pages to the right of this, with is the m

00:02:37.680 --> 00:02:40.460
oldest pages are the candidate pages that are going to

00:02:40.460 --> 00:02:44.094
be replaced in the next epoch. This is the information that

00:02:44.094 --> 00:02:46.470
we're going to use In the way we manage page

00:02:46.470 --> 00:02:50.460
replacements at every node. So let's see what the action is

00:02:50.460 --> 00:02:53.860
at a node when there is a page fault. If

00:02:53.860 --> 00:02:57.720
upon a page fault I have to evict a page y,

00:02:57.720 --> 00:03:02.970
then what I'm going to do is I'm going to look at the age of this page y. If the

00:03:02.970 --> 00:03:06.170
age of this page y is more than the minimum

00:03:06.170 --> 00:03:09.860
wage. Then I know it's going to be replaced. Even if

00:03:09.860 --> 00:03:12.040
I sent it to a peer node, it's going to be

00:03:12.040 --> 00:03:16.380
replaced because that is part of the candidate m pages

00:03:16.380 --> 00:03:19.020
that are going to be replaced in the upcoming epoch. And

00:03:19.020 --> 00:03:22.810
therefore locally I'll make a decision that page y has

00:03:22.810 --> 00:03:26.430
an age older than minimum age, and therefore, I'm

00:03:26.430 --> 00:03:29.810
going to discard it. Simply discard it. Don't worry about sending

00:03:29.810 --> 00:03:33.470
it to a peer. Remember that, in the description of

00:03:33.470 --> 00:03:36.170
how a page fault is handled, I said that, when

00:03:36.170 --> 00:03:39.030
you have a page fault in the node, I pick

00:03:39.030 --> 00:03:42.400
one of the replacement candidates, and I send it to

00:03:42.400 --> 00:03:45.530
a peer node. To store it in the global cache

00:03:45.530 --> 00:03:48.260
of the peer node. Well, we don't want to do that.

00:03:48.260 --> 00:03:52.200
If that page is going to be eventually replaced

00:03:52.200 --> 00:03:54.790
during this upcoming epoch, meaning it has to be

00:03:54.790 --> 00:03:57.650
thrown out onto the disk. In that case, you

00:03:57.650 --> 00:03:59.930
might as well discard it right now. So if

00:03:59.930 --> 00:04:03.480
the age of the page that you're evicting. From

00:04:03.480 --> 00:04:07.020
your node happens to be greater than MinAge, simply

00:04:07.020 --> 00:04:10.520
discard it. On the other hand, if the page

00:04:10.520 --> 00:04:13.430
happens to be less than the MinAge, then you

00:04:13.430 --> 00:04:15.950
know that it is part of the Active set

00:04:15.950 --> 00:04:18.589
of pages for the entire cluster, you cannot throw

00:04:18.589 --> 00:04:23.485
it away. You send it to Peer Node Ni. How do you pick Ni? This is where the

00:04:23.485 --> 00:04:28.060
weight distribution comes in. I know the weight of

00:04:28.060 --> 00:04:31.560
the nodes. At the end of this computation, the

00:04:31.560 --> 00:04:35.190
manager sent me the weight distribution for the upcoming

00:04:35.190 --> 00:04:38.480
epoch of all the nodes. So I can pick a

00:04:38.480 --> 00:04:42.050
node to send this page to based on the

00:04:42.050 --> 00:04:44.960
weight distribution. Of course I could say, well, send it

00:04:44.960 --> 00:04:47.270
to the guy that has the highest weight because that's

00:04:47.270 --> 00:04:50.060
the guy that is likely to replace, but remember that

00:04:50.060 --> 00:04:52.970
there's only an estimate of what is going to happen in

00:04:52.970 --> 00:04:55.650
the future. So, you don't want to hard code that.

00:04:55.650 --> 00:05:00.030
Instead, we're going to use some information drawn from these weights.

00:05:00.030 --> 00:05:03.810
We're going to factor that weight information Into making a choice

00:05:03.810 --> 00:05:06.420
as to which peer we want to send this

00:05:06.420 --> 00:05:09.860
eviction page to. Chances are that the node, that

00:05:09.860 --> 00:05:13.700
has a higher weight is a likely candidate that'll

00:05:13.700 --> 00:05:16.050
pick. But it will not always be the node

00:05:16.050 --> 00:05:18.020
with the highest weight. Because if that decision is

00:05:18.020 --> 00:05:21.050
made by everybody then we going to have a situation

00:05:21.050 --> 00:05:25.770
where. If the prediction was not exactly accurate, we

00:05:25.770 --> 00:05:29.190
would be making wrong choices. Basically you can see

00:05:29.190 --> 00:05:34.180
that this age management, geriatric management, is

00:05:34.180 --> 00:05:36.840
approximating a global LRU. Not exactly a

00:05:36.840 --> 00:05:40.410
global LRU, because global LRU. Computing that

00:05:40.410 --> 00:05:42.380
on every page fault is too expensive,

00:05:42.380 --> 00:05:48.170
so we don't want to do that. Instead, we are doing an approximation to global

00:05:48.170 --> 00:05:54.290
LRU by computing this information at the beginning of an epoch, and using that

00:05:54.290 --> 00:05:58.028
information locally in order to make decisions. So we

00:05:58.028 --> 00:06:00.646
think globally in order to get all the age

00:06:00.646 --> 00:06:04.419
information, and compute the minimum age and compute the

00:06:04.419 --> 00:06:06.960
weight for all the nodes as to how much of

00:06:06.960 --> 00:06:10.348
the fraction of the replacements are going to come from

00:06:10.348 --> 00:06:13.597
each one of these nodes. But once that computation

00:06:13.597 --> 00:06:16.405
has been done, for the duration of the epoch,

00:06:16.405 --> 00:06:19.573
all the decisions that are taken at a particular node

00:06:19.573 --> 00:06:24.181
Is local decisions in terms of, what we want to do, with respect to a page that

00:06:24.181 --> 00:06:29.284
we are choosing as an eviction candidate. Do we discard it, or do we store it in

00:06:29.284 --> 00:06:34.120
a peer, global cache? This might sound like a political slogan but, the

00:06:34.120 --> 00:06:39.150
important thing, in any distributed system, is as much as

00:06:39.150 --> 00:06:44.950
possible. Use local information in decision making. So think globally but

00:06:44.950 --> 00:06:47.690
act locally. So that's the key and that's

00:06:47.690 --> 00:06:51.230
what is ingrained in this description of the algorithm.

