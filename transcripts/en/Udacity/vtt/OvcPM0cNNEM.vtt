WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:01.400
Not yet.
There we go.

00:00:01.400 --> 00:00:02.660
Now we're live.

00:00:02.660 --> 00:00:03.280
Hey everybody.

00:00:03.280 --> 00:00:06.350
Welcome to another webcast.

00:00:06.350 --> 00:00:08.890
Today, joining me is Ty.

00:00:08.890 --> 00:00:12.380
And he's going to sit down and
talk to us a little bit about backbone.

00:00:12.380 --> 00:00:16.460
We're going to kind of go over
some of the basics of backbone and

00:00:16.460 --> 00:00:18.220
what it allows you to do you.

00:00:18.220 --> 00:00:21.760
For those of you who
are unfamiliar with backbone and

00:00:21.760 --> 00:00:26.210
where it fits into the course where
it's part of the optional health tracker

00:00:26.210 --> 00:00:30.500
web application that's immediately
after the neighborhood map.

00:00:30.500 --> 00:00:33.770
And ultimately Backbone's just
another framework which is

00:00:33.770 --> 00:00:36.890
going to include models,
collections, and views.

00:00:36.890 --> 00:00:42.220
And this project is really meant
to kind of let you branch out and

00:00:42.220 --> 00:00:43.750
explore this new framework.

00:00:44.890 --> 00:00:49.107
Let you explore something I'm going to
Knockout and Backbone is actually pretty

00:00:49.107 --> 00:00:53.076
common in a lot of web applications and
this actually kind of holding together

00:00:53.076 --> 00:00:56.330
a lot of really,
really big web applications out there.

00:00:56.330 --> 00:01:00.600
So it's a pretty desirable skill
to have worked in Backbone and

00:01:00.600 --> 00:01:02.770
have built something with it.

00:01:02.770 --> 00:01:05.410
So I guess Ty,
you want to introduce yourself and

00:01:05.410 --> 00:01:07.780
explain to people what Backbone is?

00:01:07.780 --> 00:01:08.760
&gt;&gt; Yeah, sure John.

00:01:08.760 --> 00:01:09.930
So hey everybody.

00:01:09.930 --> 00:01:12.590
Just like John, I'm a front
end coach here at Udacity and

00:01:12.590 --> 00:01:14.805
I'm also a full stack web developer.

00:01:14.805 --> 00:01:19.960
So, I guess the first logical thing
to start with is what is Backbone?

00:01:19.960 --> 00:01:23.400
And It's a front end
JavaScript MVC framework.

00:01:23.400 --> 00:01:25.880
For those of you who even don't
know what MVC is it stands for

00:01:25.880 --> 00:01:27.620
Model View Controller.

00:01:27.620 --> 00:01:30.520
And it's basically a design
paradigm to help you kind of

00:01:30.520 --> 00:01:34.120
separate your front end application
into logical components.

00:01:34.120 --> 00:01:37.630
So like the, model provides structure
for your application's data.

00:01:37.630 --> 00:01:40.680
For example, like storing,
representing people in a database.

00:01:40.680 --> 00:01:43.330
You could have a person,
model, something like that.

00:01:43.330 --> 00:01:48.580
The view as the name suggests has to
do with the UI of your application and

00:01:48.580 --> 00:01:52.740
it is the view is always updated based
on changes to the model, generally,

00:01:52.740 --> 00:01:55.160
or reacting to user input.

00:01:55.160 --> 00:01:59.080
So that's how the users interact with
your data and the application itself.

00:01:59.080 --> 00:02:01.760
And the controller,
which is the C part of MVC,

00:02:01.760 --> 00:02:05.500
you could consider kind of the brain
of the application to some degree.

00:02:05.500 --> 00:02:09.288
It updates both the model and
the view, tying everything together.

00:02:11.210 --> 00:02:14.210
So we'll go back to John briefly and
talk about

00:02:14.210 --> 00:02:17.568
getting set up with Backbone for a bit
&gt;&gt; Yeah, and

00:02:17.568 --> 00:02:22.000
I think, it's always good to remind
everybody to like what MVC is.

00:02:22.000 --> 00:02:23.120
I know that should be for

00:02:23.120 --> 00:02:26.390
those of you who have gone through
project five and everything.

00:02:26.390 --> 00:02:29.440
Should be pretty familiar
at this point but

00:02:29.440 --> 00:02:34.040
it's easy to kind of forget
what each component it is.

00:02:34.040 --> 00:02:37.629
Each component is used for and you'll
probably hear it called or referred to

00:02:37.629 --> 00:02:40.970
as a bunch of different things like-
&gt;&gt; Alphabet soup.

00:02:40.970 --> 00:02:45.730
&gt;&gt; Right, model view, view model, model
view controller, model view presenter.

00:02:45.730 --> 00:02:51.890
And for general purposes you can kind of
consider them all the same thing.

00:02:51.890 --> 00:02:55.415
When you start digging deeper you
realize there's like these small little

00:02:55.415 --> 00:03:00.153
differences, but generally what we'll
be dealing with is you know the MVC

00:03:00.153 --> 00:03:03.189
model viewer controller.

00:03:03.189 --> 00:03:07.570
Now as far as setting up Backbone,
it's really straightforward.

00:03:07.570 --> 00:03:10.250
It's just,
it's just a tiny little script.

00:03:10.250 --> 00:03:12.280
It's pretty tiny framework.

00:03:12.280 --> 00:03:16.150
&gt;&gt; Yeah, if compressed I think
it's like 8 kilobytes, right.

00:03:16.150 --> 00:03:19.320
&gt;&gt; Yeah super super super tiny
compared to like some of these bigger

00:03:19.320 --> 00:03:22.230
ones you have out there like Ember,
Angular.

00:03:22.230 --> 00:03:27.690
But obviously right that small size
means you're not going to kind of get

00:03:27.690 --> 00:03:33.040
some of the more stronger architecture
like you get with Angular and Ember.

00:03:33.040 --> 00:03:37.310
Or some of just the more
robust set of tools.

00:03:37.310 --> 00:03:41.740
Backbone is just a very
stripped down MVC framework.

00:03:41.740 --> 00:03:45.170
A lot of the decision making
is going to be left up to you.

00:03:45.170 --> 00:03:48.600
And you're not going to
have a lot of these sort of

00:03:48.600 --> 00:03:52.320
fancy you ways to do you things
like you have with Angular and

00:03:52.320 --> 00:03:57.060
Ember or some of the other
big frameworks out there.

00:03:57.060 --> 00:04:00.550
But fortunately it makes
setup pretty easy.

00:04:00.550 --> 00:04:03.680
You just go download it
from backbonejs.org, or

00:04:03.680 --> 00:04:05.930
you can use a package
manager like Bower.

00:04:07.190 --> 00:04:10.010
For those of you who haven't used
Bower yet, there's a whole forum

00:04:10.010 --> 00:04:14.078
post about it, or you can just go
to Bower.io to check that out.

00:04:14.078 --> 00:04:16.480
And, from there,

00:04:16.480 --> 00:04:20.291
you only need two dependencies
to run at jQuery and underscore.

00:04:20.291 --> 00:04:24.745
jQuery are largely uses to sort
of interact with the DOM and then

00:04:24.745 --> 00:04:29.320
underscore a uses for templating which
out of the box Backbone doesn't provide.

00:04:30.580 --> 00:04:33.860
So it just and relies on underscore
to do a lot of the templating and

00:04:33.860 --> 00:04:37.410
some other helper functions
included with that.

00:04:37.410 --> 00:04:42.210
And the cool thing is along with being
able to bring these in from Bower or

00:04:42.210 --> 00:04:45.490
download this and
include them in your project.

00:04:45.490 --> 00:04:47.910
You can also just use a CDN
to bring them all in.

00:04:47.910 --> 00:04:51.750
And just include them as
links in your header tag or

00:04:51.750 --> 00:04:53.940
scripts of the bottom of your file.

00:04:53.940 --> 00:04:57.080
That's pretty much all
there is to it to like get

00:04:57.080 --> 00:04:58.880
Backbone included in your project.

00:04:58.880 --> 00:05:00.860
Really, really straightforward.

00:05:00.860 --> 00:05:03.780
It's not like something like React.

00:05:03.780 --> 00:05:07.830
React just sounds like an entire build
process to compile your code into

00:05:07.830 --> 00:05:08.810
usable JavaScript.

00:05:08.810 --> 00:05:10.480
It's really straightforward.

00:05:10.480 --> 00:05:12.050
It's written in native JavaScript, so

00:05:12.050 --> 00:05:15.280
it should run real easily just
by importing those scripts.

00:05:16.780 --> 00:05:19.000
So yeah that's pretty much setting up.

00:05:19.000 --> 00:05:21.490
I think the next thing we
want to kind of cover here is

00:05:21.490 --> 00:05:23.400
to talk a little bit about models and
collections.

00:05:23.400 --> 00:05:26.370
And I think Ty wanted to talk to
everybody a little bit about that.

00:05:27.402 --> 00:05:32.990
&gt;&gt; Yes so as with most applications,
data is a very important aspect of them.

00:05:32.990 --> 00:05:37.540
So the way Backbone handles your data
is through what they call models and

00:05:37.540 --> 00:05:41.430
collections, which is the same
M from MVC and collections.

00:05:41.430 --> 00:05:47.100
You could consider like Backbones
database for holding models.

00:05:47.100 --> 00:05:51.150
&gt;&gt; I think it's important to note that

00:05:51.150 --> 00:05:55.101
the models aren't
necessarily persistent.

00:05:55.101 --> 00:05:59.480
Like, this isn't like putting
your data into a database, right?

00:05:59.480 --> 00:06:02.520
&gt;&gt; Yeah, we're not working
with like SQL or MongoDB here.

00:06:02.520 --> 00:06:06.520
Yet you can interact with those, but
this is strictly providing structure for

00:06:06.520 --> 00:06:08.090
your data within the code.

00:06:08.090 --> 00:06:09.980
It's not actually saving it.

00:06:09.980 --> 00:06:14.850
In any kind of file yet or on any kind
of remote database nothing like that.

00:06:14.850 --> 00:06:16.110
You can certainly do that.

00:06:16.110 --> 00:06:20.920
But this is just backbones lingo for
providing structure for your data.

00:06:20.920 --> 00:06:25.960
So when I say model, I mean backbone
model, not like any kind of database.

00:06:25.960 --> 00:06:30.050
So I think the concept of models and
collections are pretty straightforward.

00:06:30.050 --> 00:06:32.670
So I actually want to jump
right into an example.

00:06:33.670 --> 00:06:39.077
So I'm going to screen share with you
guys and zoom in a bit so you can see.

00:06:39.077 --> 00:06:40.296
Where are we?

00:06:44.498 --> 00:06:47.280
So you guys should be able to see that.

00:06:47.280 --> 00:06:49.290
John how does that look on your end?

00:06:49.290 --> 00:06:50.450
&gt;&gt; Hey, it looks pretty good.

00:06:50.450 --> 00:06:52.767
Maybe just zoom in a little more.

00:06:52.767 --> 00:06:55.000
But it looks pretty good on my side.

00:06:56.030 --> 00:06:57.130
&gt;&gt; Yes, is that readable?

00:06:57.130 --> 00:06:59.060
&gt;&gt; Yeah, that's readable..

00:06:59.060 --> 00:07:00.650
&gt;&gt; Okay, so
we'll just step through this.

00:07:00.650 --> 00:07:02.970
So we can ignore the first
couple of lines.

00:07:02.970 --> 00:07:06.120
I've basically just wrapped all of
the code in an anonymous function.

00:07:07.330 --> 00:07:10.690
After the webcast is over will
be uploading a forum post and

00:07:10.690 --> 00:07:14.030
I'll explain why that's kind of
important in front end code, but

00:07:14.030 --> 00:07:17.210
it's not super relevant right now.

00:07:17.210 --> 00:07:19.830
So, we can see right here
starting on line four,

00:07:19.830 --> 00:07:24.280
I have created a person model and
it's pretty easy.

00:07:24.280 --> 00:07:28.260
What you do is you take the function
that backbone provides,

00:07:28.260 --> 00:07:30.020
model backbone's a model.

00:07:30.020 --> 00:07:32.040
And you just call
the extend function and

00:07:32.040 --> 00:07:35.262
pass in an object with
your customizations.

00:07:35.262 --> 00:07:38.610
So that's just a base to use
the model at the basic level.

00:07:38.610 --> 00:07:40.190
There's really not much you have to do.

00:07:40.190 --> 00:07:43.968
All I've done is kind of
provide some default for

00:07:43.968 --> 00:07:47.140
let to describe some defaults
to basically describe like

00:07:47.140 --> 00:07:50.060
what the structure of every
person is going to look like and

00:07:50.060 --> 00:07:54.310
each person is going to have at
the minimum a name, age and gender.

00:07:54.310 --> 00:07:56.531
And I've just kind of pick
some like sensible or

00:07:56.531 --> 00:07:59.873
at least sensible to me defaults so
then empty strings and negative 1.

00:07:59.873 --> 00:08:03.753
So that's it, as far as creating
the model pretty readable.

00:08:03.753 --> 00:08:09.897
And then we're actually going to use
that person model to make me, Ty.

00:08:09.897 --> 00:08:12.850
So, Ty-Lucas Kelley, 20 years old, male.

00:08:12.850 --> 00:08:14.760
There we are.

00:08:14.760 --> 00:08:17.844
And once you've actually
created that variable and

00:08:17.844 --> 00:08:20.378
you can make much more
than one if you want.

00:08:20.378 --> 00:08:24.595
Accessing, what it was
that accessing elements in

00:08:24.595 --> 00:08:28.228
the model is as simple as saying,
Ty.get.

00:08:28.228 --> 00:08:29.830
And then, in this case I got the name.

00:08:30.950 --> 00:08:32.240
For you to run this code.

00:08:32.240 --> 00:08:34.220
Had you imported
backbone in all of that,

00:08:34.220 --> 00:08:36.567
it would get a little pop up that says,
Ty-Lucas Kelley.

00:08:37.750 --> 00:08:39.538
If I wanted to change my name later.

00:08:39.538 --> 00:08:41.940
It's just Ty.set, name.

00:08:41.940 --> 00:08:44.070
And then, the name I want to change to.

00:08:44.070 --> 00:08:46.140
And I'm now Homer Simpson,
unfortunately.

00:08:47.420 --> 00:08:51.550
So at the basic level,
that's really all there is to models.

00:08:51.550 --> 00:08:55.470
And again, we'll be providing much
more links to documentation and

00:08:55.470 --> 00:08:59.140
more advanced tutorials,
after the webcast on the forums.

00:09:00.970 --> 00:09:03.270
&gt;&gt; So where do we-
&gt;&gt; Will become Homer Simpson,

00:09:03.270 --> 00:09:05.505
unfortunately, like it's a bad thing.

00:09:05.505 --> 00:09:09.175
[LAUGH] A good thing in
the earlier Simpson's seasons,

00:09:09.175 --> 00:09:12.680
maybe not now that we're in like
season 30 or 300, or whatever.

00:09:12.680 --> 00:09:16.533
&gt;&gt; [LAUGH]
&gt;&gt; So, that's a model.

00:09:16.533 --> 00:09:20.508
And then there is a collection, which
you can consider a container for models.

00:09:20.508 --> 00:09:22.403
So I made a person model and

00:09:22.403 --> 00:09:27.756
we're going to make a collection called
people, to put persons inside of.

00:09:27.756 --> 00:09:31.178
So, over in this file now,
which I've called collection.js.

00:09:31.178 --> 00:09:36.348
And we have the same stuff from before
the person model nothing is changed.

00:09:36.348 --> 00:09:41.218
And then we create on line 15,
a people collection.

00:09:41.218 --> 00:09:45.014
And you kind of interact with it the
same way you did with the model which is

00:09:45.014 --> 00:09:46.288
collection.extend.

00:09:46.288 --> 00:09:49.200
And then you pass in
your customizations.

00:09:49.200 --> 00:09:53.870
So, all we have to do at the bare
minimum is point to the model that we

00:09:53.870 --> 00:09:57.860
want to be storing in this collection,
so that nothing else gets inside of it,

00:09:57.860 --> 00:09:59.780
otherwise it's just
a big array essentially.

00:10:01.780 --> 00:10:07.300
We create a collection just by
invoking the people function.

00:10:07.300 --> 00:10:10.250
And then just like before,
I made Ty, here I am.

00:10:10.250 --> 00:10:12.840
This time I'm not Homer Simpson.

00:10:12.840 --> 00:10:18.090
And then, the way I added myself to that
people collection is with people.add.

00:10:18.090 --> 00:10:20.120
So again, very readable.

00:10:20.120 --> 00:10:22.920
Backbone is meant to be simple and
kind of stripped down.

00:10:24.940 --> 00:10:27.940
So let's say I wanted to, I've put
a bunch of stuff in the collection and

00:10:27.940 --> 00:10:29.580
now, I want to get something out.

00:10:29.580 --> 00:10:32.220
I would say,
there are two ways you can do that.

00:10:32.220 --> 00:10:34.240
I could say people.get(ty),

00:10:34.240 --> 00:10:38.340
which is the actual model,
I just pass on the entire model.

00:10:38.340 --> 00:10:40.220
And then, obviously,
it's pretty easy for

00:10:40.220 --> 00:10:42.580
it to verify that it has that in there.

00:10:42.580 --> 00:10:46.880
And then, once I get it back, I can
get my name again or change things.

00:10:46.880 --> 00:10:49.940
I'm actually working with
the model itself at this point.

00:10:49.940 --> 00:10:54.450
Or, if you provided like an ID number,

00:10:54.450 --> 00:10:57.060
like a unique ID for the model,
you can get it by that.

00:10:57.060 --> 00:11:02.060
So like, people.get, zero or
10,000, or whatever the ID is.

00:11:02.060 --> 00:11:03.660
So either way is acceptable.

00:11:05.060 --> 00:11:07.980
There again, there is definitely a lot
more that you can do with models and

00:11:07.980 --> 00:11:09.620
collections including things like,

00:11:09.620 --> 00:11:13.280
pointing them to like a remote,
Mongo DB database, something like that.

00:11:14.510 --> 00:11:17.560
That's not what this webcast is all
about but again, after we will be

00:11:17.560 --> 00:11:21.780
providing plenty of links and
tutorials for you guys to dive into.

00:11:21.780 --> 00:11:24.687
And the course itself that you can
take on your desk, the dotcom.

00:11:25.830 --> 00:11:29.596
So that's all I want to say about
models and collections for now.

00:11:29.596 --> 00:11:31.336
And that brings us to the V.

00:11:31.336 --> 00:11:34.720
The middle part of MVC,
and back to John.

00:11:34.720 --> 00:11:37.030
&gt;&gt; Actually, I actually have a question.

00:11:37.030 --> 00:11:38.522
&gt;&gt; Sure.
&gt;&gt; I'm not 100% sure if

00:11:38.522 --> 00:11:42.126
you know the answer, and I don't
expect you to because I'm kind of just

00:11:42.126 --> 00:11:44.030
throwing it to you off the cuff.

00:11:44.030 --> 00:11:44.690
&gt;&gt; Yeah, go for it.

00:11:44.690 --> 00:11:49.970
&gt;&gt; But, so like for a person model,
if I set these defaults.

00:11:49.970 --> 00:11:54.770
And then I say, in your example,
his name with gender and age.

00:11:54.770 --> 00:12:00.290
If I did something like a new person and
then I passed in a name,

00:12:00.290 --> 00:12:05.130
a gender and an age, and then I passed
in something else like, I don't know.

00:12:08.090 --> 00:12:10.670
GPA, let's say,
like a grade point average,

00:12:10.670 --> 00:12:15.930
just like threw like another
argument into the new constructor.

00:12:15.930 --> 00:12:20.010
Would that fail, would it add
that to that particular person?

00:12:23.110 --> 00:12:25.900
So actually, backbone doesn't really.

00:12:25.900 --> 00:12:27.930
I'm not sure if you can enforce the,

00:12:27.930 --> 00:12:30.180
like to stick to the defaults
that I specified.

00:12:30.180 --> 00:12:33.010
But, no.
You can totally just add in an arbitrary

00:12:33.010 --> 00:12:34.868
amount of extra variables.

00:12:34.868 --> 00:12:38.152
So you could create a new property
called favorite sport, and

00:12:38.152 --> 00:12:39.868
call it football or something.

00:12:39.868 --> 00:12:43.148
And it wouldn't complain or
give you any errors.

00:12:43.148 --> 00:12:46.113
So the whole reason we define
the default is more just for

00:12:46.113 --> 00:12:47.448
like code readability.

00:12:47.448 --> 00:12:51.100
And so that, as the developer, you kind
of know what's supposed to go in there.

00:12:53.030 --> 00:12:56.800
I'm sure it wouldn't be too
hard to figure out if you can

00:12:56.800 --> 00:12:58.740
kind of enforce those defaults.

00:13:01.960 --> 00:13:05.524
Actually, okay, cool, so

00:13:05.524 --> 00:13:10.276
there's actually a model.validate

00:13:10.276 --> 00:13:14.670
function which that you can call.

00:13:14.670 --> 00:13:18.210
And in the case that you did provide
like extra arbitrary variables,

00:13:18.210 --> 00:13:19.920
it would then yell at you.

00:13:19.920 --> 00:13:23.150
But it's up to you actually to
write that validation function.

00:13:23.150 --> 00:13:26.960
So again, kind of like we're mentioning
before, backbone leaves a lot up to you

00:13:26.960 --> 00:13:32.410
the whole idea is performance and
small size bare bones.

00:13:32.410 --> 00:13:34.260
But yes, so to answer your question.

00:13:34.260 --> 00:13:37.890
Yes and no, it doesn't do it by
default but the option is there.

00:13:39.860 --> 00:13:40.710
&gt;&gt; For sure.

00:13:40.710 --> 00:13:41.440
Okay.

00:13:41.440 --> 00:13:42.970
Yeah.

00:13:42.970 --> 00:13:44.758
Just kind of curious what would happen.

00:13:44.758 --> 00:13:46.738
&gt;&gt; Yeah,
that's a good thing to know about.

00:13:46.738 --> 00:13:50.880
&gt;&gt; Yeah,
I haven't really tried that myself.

00:13:50.880 --> 00:13:54.494
I'm usually pretty anal about like
massaging her, creating my models so

00:13:54.494 --> 00:13:57.190
it exactly matches like
the data I'm pulling in from.

00:13:57.190 --> 00:14:02.511
So I was just curious what would
happened if something through,

00:14:02.511 --> 00:14:05.360
stick in the spoke on that one.

00:14:05.360 --> 00:14:06.350
&gt;&gt; Yeah, definitely good for

00:14:06.350 --> 00:14:09.910
like a larger team to be able to
actually enforce the validation though.

00:14:09.910 --> 00:14:11.440
If you're working by yourself.

00:14:11.440 --> 00:14:12.465
Probably not a huge issue.

00:14:12.465 --> 00:14:15.048
&gt;&gt; Mm-hm.

00:14:15.048 --> 00:14:16.688
&gt;&gt; Okay, so
what was I supposed to be talking about?

00:14:16.688 --> 00:14:20.288
The view, the V area.

00:14:20.288 --> 00:14:25.290
Yeah, so
the view is all about displaying things.

00:14:25.290 --> 00:14:26.250
The models and

00:14:26.250 --> 00:14:30.410
collections are about sort of creating
this data into some usable format.

00:14:30.410 --> 00:14:34.233
But it doesn't really
present this data to a user.

00:14:34.233 --> 00:14:39.010
So that's really what the view is for,
and what the view is all about.

00:14:39.010 --> 00:14:43.350
So really, when you want something
to have change in your model and

00:14:43.350 --> 00:14:47.990
be presented to the user, that's really
what the view's going to be handling.

00:14:47.990 --> 00:14:50.159
So working with the view
involves really just two things.

00:14:50.159 --> 00:14:53.428
One, writing a template
in your HTML files.

00:14:53.428 --> 00:14:57.290
And that's going to provide sort of
the layout or structure for your view.

00:14:57.290 --> 00:15:01.509
And this is largely where underscore
comes in like I mentioned before that

00:15:01.509 --> 00:15:03.968
was one of the dependencies for
backbone.

00:15:03.968 --> 00:15:08.672
And then the actual view code which
is the JavaScript that fills in data

00:15:08.672 --> 00:15:11.948
from the models and
uses your template as a base.

00:15:11.948 --> 00:15:14.840
So let's take a look at
this quick example here.

00:15:15.990 --> 00:15:17.078
That we have right now.

00:15:17.078 --> 00:15:19.758
Let me screen share.

00:15:19.758 --> 00:15:22.718
I don't have fancy, or
I do have a fancy atom.

00:15:22.718 --> 00:15:24.538
But I rather use sublime.

00:15:24.538 --> 00:15:29.638
[LAUGH] So, I hope that looks
good on your guy's end.

00:15:29.638 --> 00:15:31.500
&gt;&gt; Yeah, totally clear for me.

00:15:31.500 --> 00:15:34.530
&gt;&gt; But again, you can see we
kind of have a lot of this

00:15:34.530 --> 00:15:37.720
wrapping in on this function, which
I'm not going to worry too much about.

00:15:37.720 --> 00:15:44.428
But just like the model, we have this
view function that basically says,

00:15:44.428 --> 00:15:47.350
this is going to be a view objects,
it's going to be a view method.

00:15:48.370 --> 00:15:50.950
So we just call backbone.view.extend.

00:15:50.950 --> 00:15:53.645
And first, we pass in this L property,

00:15:53.645 --> 00:15:57.991
which is going to be the down element
that we're going to bind into.

00:15:57.991 --> 00:16:01.525
So in this case, we're just binding to
the body and you can see that this is

00:16:01.525 --> 00:16:05.346
a pretty standard J query selector, just
the dollar sign and then the element.

00:16:05.346 --> 00:16:08.659
This could also be
right any sort of div.

00:16:08.659 --> 00:16:12.538
Or any sort of class that
we decide to pass into it.

00:16:12.538 --> 00:16:16.960
Maybe you want to attach it to like
the main, or even IP selector.

00:16:16.960 --> 00:16:20.410
So it supports you know anything
you can select on the DOM.

00:16:20.410 --> 00:16:23.110
&gt;&gt; Yeah, just plain old jQuery.

00:16:23.110 --> 00:16:26.010
&gt;&gt; Plain old jQuery,
yeah real simple there.

00:16:26.010 --> 00:16:30.150
So then we have this initialize
argument which is basically

00:16:30.150 --> 00:16:33.260
this function going to to be
assigned to this function.

00:16:33.260 --> 00:16:35.690
And it's going to call
this render function.

00:16:35.690 --> 00:16:39.343
This is basically what's called
her viewer was created and

00:16:39.343 --> 00:16:43.871
typically you just use it to call render
function but you can also do a lot of

00:16:43.871 --> 00:16:47.908
set up in sort of this initialized
stuff prior to calling render.

00:16:47.908 --> 00:16:53.395
So, if you need to sort of manipulate
some things, or premanage some data,

00:16:53.395 --> 00:16:58.285
or make some requests before
you probably render the view,

00:16:58.285 --> 00:17:01.910
you can kind of do it in
this initialization step.

00:17:03.100 --> 00:17:04.868
So then this one's pretty simple.

00:17:04.868 --> 00:17:06.949
Like I mentioned,
it just calls this dot render,

00:17:06.949 --> 00:17:08.589
which is our back dot render function.

00:17:09.990 --> 00:17:15.640
And this is just going to basically set
up this pretty simple template here.

00:17:15.640 --> 00:17:19.065
It's just going to make this
list item which says hey there.

00:17:19.065 --> 00:17:24.390
this.el, as you remember from above,
is actually our body element.

00:17:24.390 --> 00:17:27.868
So this is just a selector saying like,
pick that body element.

00:17:27.868 --> 00:17:29.720
Append this little chunk of stuff.

00:17:30.900 --> 00:17:32.160
And then we, down here,

00:17:32.160 --> 00:17:36.059
actually instantiate our new list view,
which will throw it up on the new page.

00:17:37.640 --> 00:17:40.680
So that's the basic premise of view.

00:17:40.680 --> 00:17:44.369
There's a few other kind of tricky
things you can get away with in there,

00:17:44.369 --> 00:17:48.316
but generally speaking this is what most
of your views are going to look like.

00:17:52.148 --> 00:17:53.790
Stop screen sharing there.

00:17:55.680 --> 00:18:00.410
And it looks like there aren't
too many questions on Slack,

00:18:02.150 --> 00:18:05.990
or on the side so we'll move on
real quick to the next thing

00:18:05.990 --> 00:18:09.300
which I believe is talking about events.

00:18:09.300 --> 00:18:11.120
&gt;&gt; Yeah so back to me for that.

00:18:11.120 --> 00:18:14.540
You know if you've been programming
with JavaScript at all you've probably

00:18:14.540 --> 00:18:18.560
encountered events before it's just
a huge part of a Java script and

00:18:18.560 --> 00:18:23.120
backbone to their kind of what make
the application come to life and

00:18:23.120 --> 00:18:27.390
able to react to user input as well
as changes to like the model and

00:18:27.390 --> 00:18:29.490
collection that you mentioned before.

00:18:29.490 --> 00:18:34.940
If you used jQuery specifically you've
probably seen something like this.

00:18:34.940 --> 00:18:36.830
Let me screen share real quick,

00:18:43.220 --> 00:18:45.320
okay, so you guys can see that.

00:18:45.320 --> 00:18:49.510
So you have seen events before most
likely so in this little comment,

00:18:49.510 --> 00:18:53.830
right here I threw in a classic
use of j query which is

00:18:53.830 --> 00:18:57.250
what to do when the click event
was fired after clicking a button.

00:18:57.250 --> 00:19:00.330
In this case, it just logs
some nonsense to the console.

00:19:00.330 --> 00:19:01.010
Or yesterday.

00:19:01.010 --> 00:19:03.350
You've seen events before post likely.

00:19:03.350 --> 00:19:08.500
And now, we're going to actually work
with events in the context of Backbone.

00:19:08.500 --> 00:19:13.140
So we're taking that list view
from before in John's example.

00:19:13.140 --> 00:19:15.530
So everything is the same so far.

00:19:15.530 --> 00:19:16.600
Elements of the body.

00:19:18.730 --> 00:19:20.560
We've actually added a little more.

00:19:20.560 --> 00:19:24.730
I've created an actual HTML file here,
so ignore the errors, but

00:19:24.730 --> 00:19:26.070
there's the body.

00:19:26.070 --> 00:19:29.360
And we've made a button to add items and
remove them.

00:19:29.360 --> 00:19:31.370
And then, here is our list right here.

00:19:31.370 --> 00:19:32.750
So pretty simple.

00:19:32.750 --> 00:19:34.840
But, I will be referencing that.

00:19:34.840 --> 00:19:36.500
So, bam, events.

00:19:38.090 --> 00:19:41.970
As you can see, this is backbone
syntax for dealing with events and

00:19:41.970 --> 00:19:44.090
you basically create this events object,

00:19:44.090 --> 00:19:46.700
which is all the events you
want the viewer to handle.

00:19:46.700 --> 00:19:52.140
And then the key,
you have the event name which is click,

00:19:52.140 --> 00:19:55.140
you know,
which is fired upon clicking anything.

00:19:55.140 --> 00:19:59.270
And then the element that is being
clicked, separated by a space.

00:20:00.630 --> 00:20:05.860
And then the actual value in the key
value pair is the name of the function.

00:20:05.860 --> 00:20:07.380
We're going to call, and

00:20:07.380 --> 00:20:10.870
you guessed it, we are the ones
that write that function.

00:20:10.870 --> 00:20:15.090
So quickly scrolling past,
this is the same as before.

00:20:15.090 --> 00:20:17.270
Except for calling it on the list.

00:20:18.270 --> 00:20:20.820
Tag this time or id rather.

00:20:20.820 --> 00:20:22.600
But you can see the add item and

00:20:22.600 --> 00:20:26.138
remove item functions and
they basically are pretty simple.

00:20:26.138 --> 00:20:30.730
When you click the add item button,
it's going to add another list item.

00:20:30.730 --> 00:20:34.050
And when you click remove item,
it's going to remove the last item.

00:20:34.050 --> 00:20:39.120
So nothing too crazy and, as before,
we have to actually instantiate the list

00:20:39.120 --> 00:20:43.290
view, but that is actually the basics
of working with events in Backbone.

00:20:44.450 --> 00:20:46.450
Just like with everything
else we've done so far,

00:20:46.450 --> 00:20:51.390
it's pretty readable and
quick to pick up on which is very nice.

00:20:51.390 --> 00:20:55.030
Not nearly as complex as a lot
of other JavaScript frameworks.

00:20:55.030 --> 00:21:00.600
But yeah this object right here is
essentially mapping events to functions.

00:21:00.600 --> 00:21:02.920
And that's all there is
to events in Backbone.

00:21:05.110 --> 00:21:06.790
So I will stop screen sharing.

00:21:08.230 --> 00:21:11.090
And I think we have,
unless there's questions,

00:21:11.090 --> 00:21:13.940
I think we only have one
more thing to talk about.

00:21:13.940 --> 00:21:17.150
&gt;&gt; Yeah, I think we'll take
questions at the end here.

00:21:17.150 --> 00:21:20.800
But the last little bit
I think a lot of people

00:21:20.800 --> 00:21:25.710
are curious about is you mentioned
before that these models you're creating

00:21:27.760 --> 00:21:29.230
they don't really persist.

00:21:29.230 --> 00:21:31.770
They're not like a model innocence.

00:21:31.770 --> 00:21:35.680
And it's something that its store in
the database that you can retrieve.

00:21:35.680 --> 00:21:39.920
Later when you create these models
they're very distraught me.

00:21:39.920 --> 00:21:41.640
Being a sickly gets destroyed.

00:21:41.640 --> 00:21:45.910
Once the backbone application
goes down In that instance where-

00:21:45.910 --> 00:21:47.770
&gt;&gt; Where the page hits refreshed?

00:21:47.770 --> 00:21:49.440
&gt;&gt; Or the, yeah,
where the page gets refreshed.

00:21:49.440 --> 00:21:54.530
So in that instance where Ty said,
you know ty.create there was a new

00:21:54.530 --> 00:21:59.850
person equals ti, blah blah blah.

00:21:59.850 --> 00:22:04.480
That object is basically going to get
destroyed the next time session reloads.

00:22:06.740 --> 00:22:10.870
So to get persistent data, and it's
something we talk a little bit about

00:22:10.870 --> 00:22:13.650
you guys doing in
the health tracker project.

00:22:13.650 --> 00:22:16.250
It's utilizing local storage.

00:22:16.250 --> 00:22:21.090
And so Backbone can utilize Browser's
local storage pretty easily.

00:22:21.090 --> 00:22:24.380
Most browsers have some
local storage support.

00:22:25.450 --> 00:22:29.370
Chrome does, Firefox does,
I think Safari does now.

00:22:29.370 --> 00:22:32.255
&gt;&gt; Yep.
And the latest versions of IE.

00:22:32.255 --> 00:22:34.065
And the new Edge browser as well.

00:22:34.065 --> 00:22:39.605
&gt;&gt; Yeah, so as long as you're not trying
to support a lot of IE 8 clients and

00:22:39.605 --> 00:22:43.395
stuff like that, you'll probably
get away with using local storage.

00:22:43.395 --> 00:22:46.525
And so, it's a database of sorts and

00:22:46.525 --> 00:22:51.030
it's a really easy library to
integrate into your projects.

00:22:51.030 --> 00:22:53.980
And so it's pretty easy to implement.

00:22:53.980 --> 00:22:57.150
Let me screen share this
little snippet of code.

00:22:57.150 --> 00:22:59.930
There you go.

00:23:01.860 --> 00:23:06.040
And let me make this a little smaller so
you can see everything.

00:23:06.040 --> 00:23:08.699
But you can see in
the collection that we create.

00:23:10.010 --> 00:23:12.100
We specify the model that we want.

00:23:12.100 --> 00:23:15.650
And then we just specify
local storage and

00:23:15.650 --> 00:23:20.010
use this new backbone to local storage
and then give it some collection name.

00:23:20.010 --> 00:23:27.890
So this could be something
like you know local store.

00:23:31.170 --> 00:23:34.690
And that could, you know, house all
our people that we end up creating.

00:23:34.690 --> 00:23:37.820
So now any time that we,
you know, put, you know,

00:23:37.820 --> 00:23:40.680
information into this local source,
it's going to get saved there.

00:23:40.680 --> 00:23:46.364
It's basically going to get cached to
that URL and then when users come back,

00:23:46.364 --> 00:23:51.348
the data will persist at least for
a little while unless they go in and

00:23:51.348 --> 00:23:55.738
clear their browser history and
mess with a bunch of stuff.

00:23:55.738 --> 00:24:01.119
But generally, local storage
is a pretty simple method for

00:24:01.119 --> 00:24:05.746
making persistent data
without having to go out and

00:24:05.746 --> 00:24:09.834
learn a huge database
framework like Mongo or

00:24:09.834 --> 00:24:13.830
Just zillion other ones
that are out there.

00:24:13.830 --> 00:24:17.950
&gt;&gt; That's really it if you guys
are looking to learn a little bit more

00:24:17.950 --> 00:24:21.200
you definitely should go
through your Backbone JS class

00:24:22.330 --> 00:24:24.860
which has a lot of great
material in there,

00:24:24.860 --> 00:24:27.810
we reference a lot of great articles and
we'll make sure to share

00:24:27.810 --> 00:24:30.490
a lot of these useful links as well
&gt;&gt; But

00:24:30.490 --> 00:24:34.720
it looks like we have some questions
that need to be answered so

00:24:34.720 --> 00:24:39.690
how about we go through those and try
and hit on as many of them as we can.

00:24:39.690 --> 00:24:44.300
If you guys are posting
questions in slack as well,

00:24:44.300 --> 00:24:47.230
I'd be happy to take them there.

00:24:47.230 --> 00:24:54.090
So let's see, Roger Woodroof
says as P five two is optional,

00:24:54.090 --> 00:24:58.590
is it possible to complete the nano
degree minimum requirements, graduate,

00:24:58.590 --> 00:25:01.920
and then come back and
do P five two after graduating and

00:25:01.920 --> 00:25:04.570
still be able to submit P five two for
review.

00:25:04.570 --> 00:25:09.440
And I actually was not 100% sure about
this before we started the webcast.

00:25:09.440 --> 00:25:13.240
But I just talked to Rant
who's one of our CM's on

00:25:13.240 --> 00:25:18.020
the career services side and
he says yeah, you know graduates.

00:25:18.020 --> 00:25:19.870
You guys have access to your paths and

00:25:19.870 --> 00:25:24.190
are able to see the optional projects
for review after graduating.

00:25:24.190 --> 00:25:26.750
So yeah,
you guys are more than welcome to.

00:25:27.900 --> 00:25:31.440
Finish up project five,
finish up project six.

00:25:31.440 --> 00:25:35.530
And then graduate, come back,
do project five too and

00:25:35.530 --> 00:25:37.350
submit that one since it's optional.

00:25:39.950 --> 00:25:43.220
If you do have any trouble submitting
it, for whatever reason, like,

00:25:43.220 --> 00:25:47.340
I don't know maybe you know,
if the system doesn't let you submit it,

00:25:47.340 --> 00:25:50.040
feel free to email into us
at support@udacity.com and

00:25:50.040 --> 00:25:55.970
we'll make sure to get
that set up right for you.

00:25:57.960 --> 00:26:01.160
This one comes to us from Udan who asks,

00:26:01.160 --> 00:26:05.990
I'm creating a disposable set
of views for third party data.

00:26:05.990 --> 00:26:09.000
They have no attached models or
collections.

00:26:10.250 --> 00:26:13.240
The user can elect to
save specific results.

00:26:13.240 --> 00:26:18.160
What's the best approach to harvesting
the data behind that view, or

00:26:18.160 --> 00:26:19.940
should i just create
models to begin with?

00:26:21.650 --> 00:26:22.610
I'm leaning.

00:26:22.610 --> 00:26:23.570
&gt;&gt; The models.

00:26:23.570 --> 00:26:24.570
&gt;&gt; Yeah.

00:26:24.570 --> 00:26:28.300
I'm leaning towards the making
models to begin with.

00:26:28.300 --> 00:26:31.340
&gt;&gt; Yeah it's just that that's the way
the framework was meant to be used and

00:26:31.340 --> 00:26:35.650
that's going to be the least painful and
most importantly easiest to find.

00:26:35.650 --> 00:26:38.075
Documentation and help for
if anything goes wrong.

00:26:38.075 --> 00:26:38.800
&gt;&gt; Mm-hm.

00:26:38.800 --> 00:26:42.940
&gt;&gt; So if you have any kind of data that
you need to work with, definitely go

00:26:42.940 --> 00:26:47.380
with the models and collections route,
rather than rolling your own solutions.

00:26:49.120 --> 00:26:50.620
&gt;&gt; Yeah, I would agree with that too.

00:26:50.620 --> 00:26:53.460
If you're looking for a framework that.

00:26:53.460 --> 00:26:54.590
You know just.

00:26:54.590 --> 00:26:56.770
You can do something like that within.

00:26:56.770 --> 00:26:59.340
Doesn't rely on like models or
collections.

00:26:59.340 --> 00:27:00.650
Then you're probably looking for

00:27:00.650 --> 00:27:02.750
something like React
which just strictly VM.

00:27:02.750 --> 00:27:05.370
&gt;&gt; React would be the way to go.

00:27:05.370 --> 00:27:06.710
&gt;&gt; Yeah.

00:27:06.710 --> 00:27:08.470
That that's essential.

00:27:08.470 --> 00:27:09.800
That's actually.

00:27:09.800 --> 00:27:12.720
Damn near the description for
a reactor is just like

00:27:12.720 --> 00:27:17.930
sort of use that you can kind of
dispose of and set this data on.

00:27:17.930 --> 00:27:19.540
With Backbone though I mean

00:27:21.410 --> 00:27:25.500
it still relies heavily on well
defined models and collections.

00:27:26.910 --> 00:27:30.250
&gt;&gt; Yeah, otherwise things start to
kind of look like spaghetti code and

00:27:30.250 --> 00:27:33.770
the whole point of Backbone
kind of falls through the floor

00:27:33.770 --> 00:27:37.470
in terms of clean
application architecture.

00:27:37.470 --> 00:27:41.310
Yeah, I feel like you'd end up
using a lot of like jQuery,

00:27:41.310 --> 00:27:44.080
if you just used to use no model, or

00:27:45.310 --> 00:27:50.180
you'd end up basically writing
a model without meaning to.

00:27:50.180 --> 00:27:52.910
I feel like that would
be the end result.

00:27:55.340 --> 00:27:57.330
All right, let's see here.

00:28:00.210 --> 00:28:03.490
I'm going to check the slack
channels really quick.

00:28:06.350 --> 00:28:10.870
Bochef says he doesn't really have
a question, he was having some trouble

00:28:10.870 --> 00:28:15.800
getting into the webcast, so, hopefully
we deliver the recording to him but

00:28:15.800 --> 00:28:18.610
he says you starting a new job next
monday and they have some Backbone

00:28:18.610 --> 00:28:21.050
applications there
&gt;&gt; Hey, awesome.

00:28:21.050 --> 00:28:27.110
&gt;&gt; So yeah i mean like any any advice I
guess we can give to Bo about you know,

00:28:27.110 --> 00:28:29.620
stepping into doing like real

00:28:29.620 --> 00:28:34.570
heavy lifting with back bone
&gt;&gt; So I guess not

00:28:34.570 --> 00:28:38.360
too much quick advice i can give
right now but definitely look out for

00:28:38.360 --> 00:28:42.260
our forum post which is going to have
links to much more advanced tutorials

00:28:42.260 --> 00:28:46.180
that will probably help you with ton
unlike the workplace environment.

00:28:48.120 --> 00:28:49.220
Yeah definitely.

00:28:50.470 --> 00:28:53.880
&gt;&gt; And luckily you'll be able to lean
on your coworkers shoulders too,

00:28:53.880 --> 00:28:56.980
to learn how things work over there.

00:28:56.980 --> 00:28:58.960
But congrats on the new job.

00:28:58.960 --> 00:29:02.655
&gt;&gt; Yeah, I was just going to say that
too, is when you're stepping into, and

00:29:02.655 --> 00:29:07.155
this goes I guess, with framework
in any job you step into, right?

00:29:07.155 --> 00:29:11.665
There's going to be a particular way
that their engineers are doing things.

00:29:11.665 --> 00:29:12.786
There's going to,

00:29:12.786 --> 00:29:16.746
there'd be a particular framework
that they all like to use and

00:29:16.746 --> 00:29:21.212
there's going to be a particular
style that they like to stick to.

00:29:21.212 --> 00:29:27.870
So, you come in with the basics, but
definitely ask questions, inquire about.

00:29:27.870 --> 00:29:30.162
I understand how backbone
works a little bit, but

00:29:30.162 --> 00:29:33.332
I kind of need to understand how
you guys make backbone work.

00:29:37.000 --> 00:29:40.470
Let's see this one comes
to us from Robert.

00:29:40.470 --> 00:29:46.750
What are the strengths slash weaknesses
of backbone versus knocked out?

00:29:50.410 --> 00:29:55.320
So I guess the strength of both of them
is that they're really lightweight.

00:29:56.770 --> 00:30:02.639
You're not getting into
an overly large architecture.

00:30:02.639 --> 00:30:05.230
I guess, versus each other.

00:30:06.770 --> 00:30:10.900
Knockout, in my opinion,
is very much more.

00:30:10.900 --> 00:30:15.640
Convention over configuration
where you're sitting down and

00:30:15.640 --> 00:30:22.950
you're writing a lot of
code whereas a backbone

00:30:22.950 --> 00:30:27.820
I think is a little bit more structured
to not know and so you kind of have

00:30:27.820 --> 00:30:31.930
a little bit more of this configuration
set up where you're basically defining.

00:30:33.500 --> 00:30:36.630
More or
less you're defining these objects and

00:30:36.630 --> 00:30:40.230
their properties,
whereas with Knockout you're kind

00:30:40.230 --> 00:30:44.230
of writing the code building
those objects and properties.

00:30:44.230 --> 00:30:47.560
&gt;&gt; Yeah, and
if I can chime in real quick.

00:30:47.560 --> 00:30:51.080
So both these frameworks, they're
similar in the sense they both kind of

00:30:51.080 --> 00:30:56.500
fill that kind of smaller second tier
niche in terms of JavaScript Frameworks.

00:30:56.500 --> 00:30:57.850
They're not quite as big and

00:30:57.850 --> 00:31:00.690
all encompassing as something
like Angular or Ember.

00:31:00.690 --> 00:31:04.440
You know and as a result they're
a lot simpler and lightweight.

00:31:04.440 --> 00:31:07.770
The one big difference between
the two frameworks is,

00:31:07.770 --> 00:31:10.580
in something that's called
two way data binding.

00:31:10.580 --> 00:31:13.720
So this is something that Knockout
has and Backbone does not.

00:31:13.720 --> 00:31:16.570
So in Knockout it's
a little bit simpler.

00:31:16.570 --> 00:31:19.930
To have Your views and models.

00:31:19.930 --> 00:31:22.830
Kind of stay up to date with each other.

00:31:22.830 --> 00:31:26.220
Whereas Backbone, you have to do
a little more of the wiring yourself.

00:31:27.370 --> 00:31:32.330
It's certainly not impossible to do
the same things with both frameworks,

00:31:32.330 --> 00:31:34.740
but that is one small
advantage of Knockout.

00:31:34.740 --> 00:31:38.520
It's a little simpler to keep
things up to date with each other.

00:31:38.520 --> 00:31:40.810
Without any like dom manipulation or

00:31:40.810 --> 00:31:45.750
kind of manual I'm not sure what
the word I'm looking for is.

00:31:45.750 --> 00:31:47.960
Yeah but that's about the only
difference between the two,

00:31:47.960 --> 00:31:51.710
they both kind of fill
the same void in terms of like

00:31:51.710 --> 00:31:54.060
a small lightweight
JavaScript framework.

00:31:56.140 --> 00:31:57.266
Yeah.

00:31:57.266 --> 00:32:01.939
I tend to lean a little bit more towards
Knockout, largely because of the two way

00:32:01.939 --> 00:32:04.743
data binding, and
the ease of setup with that.

00:32:04.743 --> 00:32:07.506
It's not terribly
difficult with Backbone.

00:32:07.506 --> 00:32:12.776
It just is a little bit more work.

00:32:12.776 --> 00:32:16.174
&gt;&gt; Luckily because Backbone's
been around for a little while,

00:32:16.174 --> 00:32:19.520
well both frameworks have there
are there's a lot of like.

00:32:19.520 --> 00:32:23.790
Good third party code out there and
OpenSource code you can find.

00:32:23.790 --> 00:32:26.390
To kind of take care of some
of the heavy lifting for you.

00:32:26.390 --> 00:32:27.790
But yeah that's about it on that.

00:32:29.730 --> 00:32:32.760
&gt;&gt; All right.
Let's see if we can help this guy out.

00:32:33.840 --> 00:32:37.980
Prada asks, I'm trying to
build a backbone application

00:32:37.980 --> 00:32:40.290
which interacts with
files on Google Drive.

00:32:41.300 --> 00:32:43.870
Where should i place
the Google API calls?

00:32:43.870 --> 00:32:48.290
In the model or the controller?

00:32:48.290 --> 00:32:51.240
&gt;&gt; The controller would be the place for
that.

00:32:52.260 --> 00:32:57.750
Any interaction with third party APIs or
outside resources should go there.

00:32:57.750 --> 00:33:01.560
The model should purely be for
defining the structure of your data.

00:33:01.560 --> 00:33:04.050
You want to keep that as kind of.

00:33:04.050 --> 00:33:06.490
Pure quote unquote as possible.

00:33:06.490 --> 00:33:07.540
So definitely go for

00:33:07.540 --> 00:33:09.930
the controller if you're working
with the Google Drive API.

00:33:09.930 --> 00:33:10.430
&gt;&gt; Yeah.

00:33:11.650 --> 00:33:12.850
I agree with that.

00:33:14.190 --> 00:33:16.890
That's basically right from

00:33:16.890 --> 00:33:18.720
the definition of what
the controller is, right?

00:33:18.720 --> 00:33:24.320
It's all the code that interacts with
the model and interacts with the view.

00:33:24.320 --> 00:33:32.620
And in this case you know that API call
fits perfectly into that sort of piece.

00:33:32.620 --> 00:33:37.050
The robber

00:33:37.050 --> 00:33:41.770
asks do you have a screenshot of
a sample interface for this project.

00:33:44.370 --> 00:33:47.230
So a sample of the health tracker.

00:33:48.970 --> 00:33:52.370
I mean, do you have a copy on
your on your laptop right now?

00:33:54.220 --> 00:33:54.900
&gt;&gt; I might.

00:33:54.900 --> 00:33:58.830
Here, let me see if I can whip something
up real quick, give me a second.

00:33:58.830 --> 00:34:01.050
&gt;&gt; Yeah, yeah, no problem.

00:34:01.050 --> 00:34:06.200
I don't know,
I'll double check my laptop

00:34:07.580 --> 00:34:11.190
too, but I recently did
a full reset the other day.

00:34:12.380 --> 00:34:13.080
Here we go.

00:34:13.080 --> 00:34:14.210
I can share something.

00:34:16.370 --> 00:34:19.750
So there's a bit of set up with
the project that I have on right now so

00:34:19.750 --> 00:34:22.409
thank you why isn't adequate
work correctly without

00:34:22.409 --> 00:34:24.860
throwing a bunch of errors this alike.

00:34:24.860 --> 00:34:27.909
I need to put in there but
as far as the basic what the u.i.

00:34:27.909 --> 00:34:31.350
could look like if you wanted
to implement it yourself.

00:34:31.350 --> 00:34:37.842
The screen Perfect.

00:34:37.842 --> 00:34:39.230
So that's about that.

00:34:39.230 --> 00:34:40.320
So you can see,

00:34:40.320 --> 00:34:44.080
there's a little search bar at
the top the title of the application.

00:34:44.080 --> 00:34:46.810
Search results are going
to go on this left third.

00:34:46.810 --> 00:34:50.560
And then, this is the actual Health
tracker that keeps track of how many

00:34:50.560 --> 00:34:52.090
calories you've had.

00:34:52.090 --> 00:34:56.260
So that's pretty basic,
not too fancy with the CSS.

00:34:56.260 --> 00:34:59.520
But that's kind of a good structure for
this type of application.

00:34:59.520 --> 00:35:02.160
Search bar at the top,
search results at the left and

00:35:02.160 --> 00:35:05.380
then the actual report taking
up most of the screen.

00:35:05.380 --> 00:35:08.650
So there's a little sneak
peek at what we came up with.

00:35:08.650 --> 00:35:14.680
Yeah and just since there is,
we can't really shelf date our activity.

00:35:14.680 --> 00:35:17.640
&gt;&gt; We got to leave some work for
you guys.

00:35:18.690 --> 00:35:19.730
&gt;&gt; You're basically right.

00:35:19.730 --> 00:35:24.420
You just type into that search bar and
then a whole list of categories,

00:35:24.420 --> 00:35:25.500
or sorry.

00:35:25.500 --> 00:35:28.190
&gt;&gt; A list of results of
foods would come up.

00:35:28.190 --> 00:35:30.010
The user would be able to pick one and

00:35:30.010 --> 00:35:34.810
basically add it to their, what they
ate that day or week or whatever.

00:35:34.810 --> 00:35:38.810
&gt;&gt; Yeah, and there's much more details
of course in the actual backbone course

00:35:38.810 --> 00:35:41.270
we have on our website and
the project rubric.

00:35:43.270 --> 00:35:46.298
&gt;&gt; Yeah, we definitely encourage
you to make it not so plain.

00:35:46.298 --> 00:35:47.886
We're just [CROSSTALK].

00:35:47.886 --> 00:35:50.795
&gt;&gt; And you do a better job
than I did with the CSS.

00:35:50.795 --> 00:35:53.020
[LAUGH] You put me to shame.

00:35:53.020 --> 00:35:54.940
We're just lazy and
need to get things working.

00:35:54.940 --> 00:35:58.186
So we use a lot of Bootstrap.

00:35:58.186 --> 00:35:59.620
&gt;&gt; I will never complain.

00:35:59.620 --> 00:36:02.360
I will never claim to be a designer.

00:36:04.090 --> 00:36:06.500
I respect those that
can make that claim.

00:36:07.500 --> 00:36:08.470
&gt;&gt; I know.

00:36:08.470 --> 00:36:15.720
I was I was perusing job listings
just seen what people were asking for

00:36:15.720 --> 00:36:21.590
for like junior and senior front end
web developers, and there is a large

00:36:21.590 --> 00:36:26.030
misunderstanding of what a front end
developer and front end designer are.

00:36:26.030 --> 00:36:31.030
There's so many that are like, okay we
need you to know HTML, CSS, JavaScript.

00:36:31.030 --> 00:36:34.630
And two different paths.

00:36:35.660 --> 00:36:37.840
&gt;&gt; No.
&gt;&gt; If you can learn it all,

00:36:37.840 --> 00:36:40.580
then you should have no problem
getting a job anywhere.

00:36:40.580 --> 00:36:43.500
&gt;&gt; Yeah.
&gt;&gt; Props to you if you've got

00:36:43.500 --> 00:36:45.200
development and artistic ability.

00:36:45.200 --> 00:36:53.040
&gt;&gt; I was thinking that some of
the more intense development stuff.

00:36:53.040 --> 00:36:56.620
All right I think we've got time for
one more question here and it's kind of

00:36:56.620 --> 00:37:02.850
a fun one which is from Etine and
he asks what brand of coffee do you buy.

00:37:02.850 --> 00:37:04.050
&gt;&gt; Boy toughest question.

00:37:04.050 --> 00:37:07.720
Okay I'm a big coffee and tea drinker.

00:37:07.720 --> 00:37:13.980
I don't really buy any one particular
brand but I am picky with buying

00:37:13.980 --> 00:37:17.760
whole bean coffee needs to be ground
right before I'm about to drink it.

00:37:19.220 --> 00:37:20.850
The coffee I'm hooked on lately,

00:37:20.850 --> 00:37:23.960
you can actually get it,
Ii you've got a Trader Joe's near you.

00:37:23.960 --> 00:37:27.000
It's this new Mexican Fair Trade
blend they have.

00:37:27.000 --> 00:37:28.440
It's very, very nice.

00:37:28.440 --> 00:37:29.600
It's got a nutty flavor.

00:37:29.600 --> 00:37:33.950
As far as like if I'm out and
about and grabbing a cup of coffee.

00:37:33.950 --> 00:37:35.820
Not too much preference.

00:37:35.820 --> 00:37:37.820
Starbucks over Dunkin Donuts I guess.

00:37:37.820 --> 00:37:39.285
Not to start a flame war.

00:37:39.285 --> 00:37:44.690
&gt;&gt; [LAUGH]
I guess i'm kind of on the same

00:37:44.690 --> 00:37:50.550
boat as you, not too particular.

00:37:50.550 --> 00:37:52.010
As long as it's not crappy and

00:37:52.010 --> 00:37:53.710
as long as it's
&gt;&gt; Good coffee.

00:37:53.710 --> 00:37:54.675
That's the easy answer.

00:37:54.675 --> 00:37:56.160
[LAUGH]
&gt;&gt; Fresh.

00:37:56.160 --> 00:38:02.040
I guess my drink of choice if I
had to pick one is like Americano,

00:38:02.040 --> 00:38:04.560
just straight espresso in
the cup with some water.

00:38:06.040 --> 00:38:07.330
&gt;&gt; Caffeine IV.

00:38:07.330 --> 00:38:10.600
&gt;&gt; Yeah, pretty much.

00:38:10.600 --> 00:38:13.370
I don't think we've got
any other questions here,

00:38:13.370 --> 00:38:17.420
I'm just going to take
a quick glance at slack.

00:38:17.420 --> 00:38:21.270
It looks like we're okay.

00:38:21.270 --> 00:38:23.690
For those of you who are watching or
recording and

00:38:23.690 --> 00:38:28.440
were able to get and,
I am sorry about that.

00:38:28.440 --> 00:38:33.090
We're going to do our best to you this
on something that doesn't require

00:38:33.090 --> 00:38:35.710
being a part of the Google Plus
community beforehand.

00:38:35.710 --> 00:38:39.780
I think the next one who are going to do
is going to be posted on YouTube Live,

00:38:39.780 --> 00:38:43.530
so there won't be any sort of
like gate and we want to try and

00:38:43.530 --> 00:38:47.180
like you accept people as
they're trying to join in

00:38:48.210 --> 00:38:52.370
any way as any last thoughts
on anything today insights?

00:38:52.370 --> 00:38:56.400
&gt;&gt; No I hope you guys we're able to
get a nice intro to Backbone and

00:38:56.400 --> 00:38:59.450
get your feet wet again,
definitely keep an eye out for

00:38:59.450 --> 00:39:03.850
the forum post that's going to be
coming right after this It'll have

00:39:03.850 --> 00:39:08.530
basically everything we cover today
as well as some important links to

00:39:08.530 --> 00:39:11.090
code examples and tutorials,
things like that.

00:39:13.010 --> 00:39:17.868
&gt;&gt; Yeah, and along with that,
we'll be taking questions there.

00:39:17.868 --> 00:39:23.940
So,feel free to post any other
questions that you might have.

00:39:23.940 --> 00:39:26.430
Let us know you know where
you're struggling with Backbone,

00:39:26.430 --> 00:39:28.560
where you're struggling
with the project.

00:39:28.560 --> 00:39:31.570
We're always happy to to dive in and
give you guys some support.

00:39:33.780 --> 00:39:34.770
All right, cool.

00:39:34.770 --> 00:39:36.250
Thanks, Ty!

00:39:36.250 --> 00:39:37.330
&gt;&gt; See you everybody!

00:39:37.330 --> 00:39:38.760
Thanks for popping in.

00:39:38.760 --> 00:39:39.390
&gt;&gt; Bye everybody.

00:39:39.390 --> 00:39:41.346
Have a good rest of your evening.

