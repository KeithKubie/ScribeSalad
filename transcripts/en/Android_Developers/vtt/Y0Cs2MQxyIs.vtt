WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.455
[MUSIC PLAYING]

00:00:02.455 --> 00:00:04.580
LYLA FUJIWARA: Navigating
around an app, by which I

00:00:04.580 --> 00:00:06.470
mean moving from one
screen to another,

00:00:06.470 --> 00:00:09.710
is an absolutely fundamental
part of Android development.

00:00:09.710 --> 00:00:12.140
Historically you'd do this
using intents or fragment

00:00:12.140 --> 00:00:15.200
transactions, which in simple
cases, like clicking a button,

00:00:15.200 --> 00:00:16.515
was easy enough.

00:00:16.515 --> 00:00:18.890
But what if you wanted to do
something just slightly more

00:00:18.890 --> 00:00:19.850
complex?

00:00:19.850 --> 00:00:23.050
For example, hooking up a common
pattern like bottom navigation.

00:00:23.050 --> 00:00:25.550
You'd need to make sure that
not only your Bottom Navigation

00:00:25.550 --> 00:00:27.800
view actually navigates
but also that it

00:00:27.800 --> 00:00:29.360
highlights the correct button.

00:00:29.360 --> 00:00:32.420
Oh, and also that it handles
the backstack in a uniform way

00:00:32.420 --> 00:00:35.300
so that users don't end up
getting lost or confused.

00:00:35.300 --> 00:00:37.730
Cases like this are where
the new navigation component

00:00:37.730 --> 00:00:38.673
shines.

00:00:38.673 --> 00:00:40.340
The navigation component
is a collection

00:00:40.340 --> 00:00:42.440
of libraries, a
plug-in, and tooling

00:00:42.440 --> 00:00:44.798
that simplifies
Android navigation.

00:00:44.798 --> 00:00:47.090
Beyond making the setup for
common patterns like Bottom

00:00:47.090 --> 00:00:49.910
Navigation easier, the
component handles the backstack,

00:00:49.910 --> 00:00:52.160
fragment transactions,
argument passing,

00:00:52.160 --> 00:00:54.800
navigation-based animations,
and deep linking.

00:00:54.800 --> 00:00:57.740
Importantly, it gathers up all
of this navigation information

00:00:57.740 --> 00:01:00.510
and puts it in one visualized
location of your app,

00:01:00.510 --> 00:01:02.143
the Navigation graph.

00:01:02.143 --> 00:01:03.560
The navigation
component works out

00:01:03.560 --> 00:01:05.475
of the box with
fragments and activities.

00:01:05.475 --> 00:01:07.850
You can also extend the library
to work with other screen

00:01:07.850 --> 00:01:10.197
implementations, like
your custom views.

00:01:10.197 --> 00:01:12.530
Let's look at some examples
of the navigation components

00:01:12.530 --> 00:01:14.870
in action, with a single
activity swapping out

00:01:14.870 --> 00:01:16.150
multiple fragments.

00:01:16.150 --> 00:01:17.900
If you're wondering
why you might consider

00:01:17.900 --> 00:01:21.080
a single-activity model, check
out Ian Link's excellent talk,

00:01:21.080 --> 00:01:22.820
which I've linked in the notes.

00:01:22.820 --> 00:01:23.480
OK.

00:01:23.480 --> 00:01:25.820
So one way to think about
the navigation component

00:01:25.820 --> 00:01:28.250
is that there are three
major parts working together

00:01:28.250 --> 00:01:29.310
in harmony.

00:01:29.310 --> 00:01:32.135
These are the Navigation
graph, the NavHostFragment,

00:01:32.135 --> 00:01:33.890
and the NavController.

00:01:33.890 --> 00:01:36.590
The Navigation graph
is a new resource type.

00:01:36.590 --> 00:01:39.620
It's an XML file that contains
and centralizes information

00:01:39.620 --> 00:01:41.450
related to navigation.

00:01:41.450 --> 00:01:43.130
Now this information
can be visualized

00:01:43.130 --> 00:01:46.570
in the new Navigation editor
that is available in Android

00:01:46.570 --> 00:01:47.750
Studio 3.3.

00:01:47.750 --> 00:01:49.730
It's a graphical
editor to create this,

00:01:49.730 --> 00:01:51.680
well, Navigation graph.

00:01:51.680 --> 00:01:54.350
Each of these screens
are called destinations,

00:01:54.350 --> 00:01:56.750
or places that you
can navigate to.

00:01:56.750 --> 00:01:58.920
In this example,
they're all fragments.

00:01:58.920 --> 00:02:00.957
Now these arrows here
are called actions

00:02:00.957 --> 00:02:02.540
and they represent
the different paths

00:02:02.540 --> 00:02:04.740
that a user could
take through your app.

00:02:04.740 --> 00:02:06.426
If you click on
one of the actions,

00:02:06.426 --> 00:02:08.509
you can see a whole bunch
of embedded information,

00:02:08.509 --> 00:02:10.850
including data passed
between destinations,

00:02:10.850 --> 00:02:14.510
transition animations, backstack
manipulation, and so on.

00:02:14.510 --> 00:02:17.610
Clicking on a destination, you
can see things like deep link

00:02:17.610 --> 00:02:20.160
URLs and launch options.

00:02:20.160 --> 00:02:23.190
This is all part of
the XML of the graph.

00:02:23.190 --> 00:02:26.025
OK, so next, we have
the NavHostFragment.

00:02:26.025 --> 00:02:28.400
This is a fragment widget that
you'll add to your layout,

00:02:28.400 --> 00:02:30.740
assuming that you're
doing fragment navigation.

00:02:30.740 --> 00:02:32.878
It's basically a window
that swaps in and out

00:02:32.878 --> 00:02:34.920
different fragment
destinations that are included

00:02:34.920 --> 00:02:36.620
in your Navigation graph.

00:02:36.620 --> 00:02:39.320
The final piece of the
puzzle is the NavController.

00:02:39.320 --> 00:02:41.540
Each NavHostFragment
has a NavController

00:02:41.540 --> 00:02:43.747
that you'll use in your
Kotlin or Java code.

00:02:43.747 --> 00:02:45.830
And this is what actually
instructs the navigation

00:02:45.830 --> 00:02:47.100
to occur.

00:02:47.100 --> 00:02:48.890
So if I write some
code like this,

00:02:48.890 --> 00:02:51.562
the NavController will then
perform this navigation action

00:02:51.562 --> 00:02:53.270
based off of all of
that information that

00:02:53.270 --> 00:02:55.640
was in the Navigation graph,
and it will ultimately

00:02:55.640 --> 00:02:58.730
swap out which fragment is
shown in the NavHost fragment.

00:02:58.730 --> 00:03:00.850
Now here I'm using
the action's XML ID

00:03:00.850 --> 00:03:03.470
to specify which of those
action arrows to follow,

00:03:03.470 --> 00:03:06.080
but an even better way to do
this is using the navigation

00:03:06.080 --> 00:03:08.120
component's SafeArgs plug-in.

00:03:08.120 --> 00:03:10.010
The SafeArgs plug-in
generates code

00:03:10.010 --> 00:03:12.020
to allow you to use
type-safe navigation

00:03:12.020 --> 00:03:13.640
and argument passing.

00:03:13.640 --> 00:03:16.160
First, you'll add the
Gradle plug-in to your code.

00:03:16.160 --> 00:03:19.220
This will generate classes based
off of your Navigation graph.

00:03:19.220 --> 00:03:20.690
It'll make these
Direction classes

00:03:20.690 --> 00:03:22.930
for any destination
that has actions

00:03:22.930 --> 00:03:25.250
and it will make Args
classes for any destination

00:03:25.250 --> 00:03:26.720
with arguments.

00:03:26.720 --> 00:03:28.910
If you take your original
navigation statement,

00:03:28.910 --> 00:03:30.830
you can swap in these
generated classes

00:03:30.830 --> 00:03:33.140
and you'll get something
that looks like this.

00:03:33.140 --> 00:03:35.568
Instead of referring to
an action by its XML ID,

00:03:35.568 --> 00:03:37.610
you're making sure that
you have an action that's

00:03:37.610 --> 00:03:40.070
actually associated
with your destination.

00:03:40.070 --> 00:03:42.140
You can also set
arguments of the action.

00:03:42.140 --> 00:03:45.290
Pass in the wrong type and
the code won't compile.

00:03:45.290 --> 00:03:47.850
Getting the arguments you
passed through is easy.

00:03:47.850 --> 00:03:49.970
Simply use the
GeneratedArgs class

00:03:49.970 --> 00:03:51.890
and you have type-safe
access to only

00:03:51.890 --> 00:03:53.540
the correctly-named arguments.

00:03:53.540 --> 00:03:56.810
No need to worry about the
key value pairs of yesteryear.

00:03:56.810 --> 00:03:58.700
So that was simple navigation.

00:03:58.700 --> 00:04:01.070
Let's talk about setting
up that bottom nav.

00:04:01.070 --> 00:04:02.570
The navigation
component includes

00:04:02.570 --> 00:04:05.960
an additional navigation
UI library in Java and KTX

00:04:05.960 --> 00:04:08.060
extensions for Kotlin,
that have support

00:04:08.060 --> 00:04:11.660
for options menus, bottom
navigation, navigation

00:04:11.660 --> 00:04:13.400
view, and navigation drawer.

00:04:13.400 --> 00:04:15.290
It also works with
action bar, toolbar,

00:04:15.290 --> 00:04:16.850
and collapsing toolbar.

00:04:16.850 --> 00:04:19.099
For our bottom nav,
you'd cut the bottom nav

00:04:19.099 --> 00:04:20.930
to your XML as normal.

00:04:20.930 --> 00:04:23.360
You'd also create
an XML menu with IDs

00:04:23.360 --> 00:04:25.588
that match the XML IDs
of your destinations

00:04:25.588 --> 00:04:28.130
and your Navigation graph that
you want the bottom navigation

00:04:28.130 --> 00:04:28.990
to go to.

00:04:28.990 --> 00:04:31.940
Then you'd use navigation
UI to wire up the rest.

00:04:31.940 --> 00:04:35.060
In Kotlin, that's done with
this handy extension function.

00:04:35.060 --> 00:04:37.370
This one line of code
has NavController

00:04:37.370 --> 00:04:39.350
handle the actual
navigation, making

00:04:39.350 --> 00:04:41.930
sure to follow material
design best practices as far

00:04:41.930 --> 00:04:43.700
as backstack management goes.

00:04:43.700 --> 00:04:45.500
On top of that, it
handles highlighting

00:04:45.500 --> 00:04:47.120
the correct bottom buttons.

00:04:47.120 --> 00:04:48.860
Now we have only
explored a few parts

00:04:48.860 --> 00:04:50.330
of the navigation component.

00:04:50.330 --> 00:04:52.190
For a deeper trek
into navigation,

00:04:52.190 --> 00:04:54.230
check out the code lab
and the documentation,

00:04:54.230 --> 00:04:55.400
all linked below.

00:04:55.400 --> 00:04:58.840
Happy coding and
happy navigating.

