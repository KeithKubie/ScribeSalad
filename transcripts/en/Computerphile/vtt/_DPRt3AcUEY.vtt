WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.060
We'll talk about, uh, Deep Learned Super-Sampling.

00:00:02.919 --> 00:00:06.689
So yeah, it's got a fancy name. It sounds cool. It is quite cool.

00:00:07.240 --> 00:00:09.210
Let's imagine you're running a game, right?

00:00:09.210 --> 00:00:11.010
I don't do that as often as I'd like anymore.

00:00:11.010 --> 00:00:16.229
But- but- maybe you're pushing your graphics card right to the limit of where it- where it's happy, right?

00:00:16.230 --> 00:00:18.930
You've got a 4K monitor, you're pushing a lot of pixels to the screen,

00:00:19.020 --> 00:00:21.920
the game is a big game with lots of- lots of effects.

00:00:23.220 --> 00:00:25.680
The problem is that then your frame rate's going to start suffering.

00:00:26.340 --> 00:00:29.180
So maybe what we could do is run at a lower frame rate,

00:00:29.189 --> 00:00:33.148
which is going to be that much easier for your graphics card, and then use deep learning

00:00:33.730 --> 00:00:38.520
to recreate that 4K image - and if the deep learning is good enough, you won't be able to tell the difference.

00:00:40.960 --> 00:00:45.840
So the most recent generation of Nvidia graphics cards have these Tensor Cores on board, right?

00:00:45.840 --> 00:00:50.460
Tensor Cores are basically very quick matrix multiplication circuitry.

00:00:50.860 --> 00:00:56.260
Matrix multiplication comes up a lot in deep learning, which is kind of what these were designed around.

00:00:56.260 --> 00:00:58.940
But it has some applications to games, a little bit.

00:00:58.949 --> 00:01:03.419
I'm going to betray my lack of knowledge about modern games, but I don't really know much about them.

00:01:03.420 --> 00:01:05.420
I play some games, but very easy ones.

00:01:06.610 --> 00:01:10.529
So, I- you know, I'm not running games at 4K and worrying about framerates, right?

00:01:10.530 --> 00:01:14.820
But some people do concern themselves with these things and they spend a lot of money on these graphics cards,

00:01:14.820 --> 00:01:16.720
and they want them to run as well as they can.

00:01:16.720 --> 00:01:19.019
The problem is that maybe some game comes out,

00:01:19.300 --> 00:01:24.300
and it has a huge demand on your- on your GPU, right? For every pixel in your game.

00:01:24.300 --> 00:01:27.140
The GPU's gotta work out which triangles in the world

00:01:27.150 --> 00:01:30.779
it needs to - you know - it needs to render what color they're going to be,

00:01:30.780 --> 00:01:32.970
it's got to include lighting and shadows,

00:01:33.280 --> 00:01:38.140
you know, blurs and - you know - depth of field effects, like I was talking about last- last video.

00:01:38.140 --> 00:01:41.940
You know, this takes a long time and the more pixels you use, the worse it gets.

00:01:41.940 --> 00:01:43.580
OFF-SCREEN: And motion blur, of course?

00:01:43.580 --> 00:01:46.520
And motion blur, I know people love motion blur. I myself can't get enough of it.

00:01:46.520 --> 00:01:50.460
What do you do about this? One thing you do is you just make your graphics cards faster, right?

00:01:50.460 --> 00:01:56.300
This is something that happens every generation, not just on NVIDIA cards, but - you know - all graphics cards, and that helps a lot.

00:01:56.310 --> 00:01:58.680
All right, but the problem is we've had a jump from 1080P

00:01:59.380 --> 00:02:03.390
To 4Kand that is not a slight increase in number of pixels

00:02:03.390 --> 00:02:09.809
It's four times the number of pixels which on a simple level means four times the amount of work right to render

00:02:09.810 --> 00:02:13.530
This this screen and you've got it all so when we talk about things like super so

00:02:13.610 --> 00:02:17.839
Something sometimes we're looking at a pixel more than once right and that means it's getting really slow

00:02:19.530 --> 00:02:21.679
So what Nvidia have tried to do here is

00:02:22.350 --> 00:02:24.090
Say well

00:02:24.090 --> 00:02:29.270
Maybe we can we can we can save quite a lot of performance by let's say running our game at 1080p, right?

00:02:29.270 --> 00:02:33.469
But if you up sample that to 4k, maybe it won't look very good because basically it's just going to be blurred

00:02:33.780 --> 00:02:34.530
so

00:02:34.530 --> 00:02:36.420
maybe we could do a slightly more a

00:02:36.420 --> 00:02:43.970
slightly smarter up sampling using these sort of deep learns to prepare solution techniques as I understand it even modern TVs these days do

00:02:44.190 --> 00:02:48.589
Scaling and they're scale things up and blu-ray recorders DVD recorders are always

00:02:48.590 --> 00:02:52.970
You know had an element of doing this scaling is this just a more advanced version?

00:02:53.100 --> 00:02:56.029
Yeah, and some TVs have starting to bring in as far as I know

00:02:56.700 --> 00:03:01.700
Deep learned, you know smart AI driven up sampling right the idea

00:03:01.700 --> 00:03:06.320
Is that so what happens when you run a game is you've give adding all these effects on top of one another to?

00:03:06.450 --> 00:03:07.580
Get a good performance

00:03:07.580 --> 00:03:10.399
now if your performance if your frame rate starts to drop

00:03:10.800 --> 00:03:16.459
What you're going to do probably is either drop your resolution or if you don't want to drop your resolution because you don't like it

00:03:16.459 --> 00:03:18.440
You start to remove some of the effects, right?

00:03:18.440 --> 00:03:20.070
So you drop your shaders down from high to?

00:03:20.070 --> 00:03:24.949
Something else and that will just reduce the amount of work per pixel and if slightly increase your frame rate

00:03:24.950 --> 00:03:26.930
But some people don't want to do this

00:03:26.930 --> 00:03:30.049
Right, they spent a lot of money on their computer and they want to run it on full graphics

00:03:30.209 --> 00:03:33.949
So but maybe a game has come out. There's just really really demanding

00:03:35.970 --> 00:03:38.899
There's kind of two problems we want to solve here one

00:03:38.900 --> 00:03:43.580
Is this problem of aliasing, right which is but if you rent if you rasterize a scene with triangles

00:03:43.740 --> 00:03:47.990
They don't always line up exactly where the pixels are. So you get a kind of jagged edge, right?

00:03:47.990 --> 00:03:52.789
That's one problem, which doesn't look very nice and there are techniques to get around this the other problem

00:03:52.790 --> 00:03:58.610
Is this issue of resolution, right? If you drop down from 4k to 1080p you gain months, you know gone four times faster

00:03:58.740 --> 00:04:03.049
That's a huge benefit. Right? If you could do that without noticing and the difference in appearance

00:04:03.630 --> 00:04:09.290
Well, that's a winner right that's going to be great. And then you can start putting it even even more

00:04:10.650 --> 00:04:13.970
Computational time on shader effects and things so but yes, you're running out a lower resolution

00:04:13.970 --> 00:04:17.630
But those pixels are better had a good deal time spent on them. They look really nice

00:04:17.790 --> 00:04:20.809
What are the problems we have? Is this problem called aliasing right now?

00:04:20.810 --> 00:04:24.019
I will just talk about this very briefly because it's not really what this video is about

00:04:24.060 --> 00:04:31.190
But if you're valuing an image and your triangle Falls like this, then this pixel actually isn't all of this object here

00:04:31.190 --> 00:04:34.820
Maybe this whole dish is dark and this object is light. It's not all of this object

00:04:34.860 --> 00:04:39.740
It's like 70% dark and 30% light now. The problem is that there's no way of doing this

00:04:39.740 --> 00:04:45.410
So if you saw and pull this pixel here this pixel here and this pixel here. You're going to get an edge that goes light

00:04:46.140 --> 00:04:49.189
Dark light like this, right and that looks ugly

00:04:49.200 --> 00:04:52.580
So what you'd use is a technique usually called some multisample

00:04:52.979 --> 00:04:59.389
Anti-aliasing where essentially you take multiple readings from this pixel like these four here or something more dense than that

00:04:59.390 --> 00:05:02.479
And there's lots of different ways to do this and then you have those

00:05:02.640 --> 00:05:08.329
values and the nice thing is then you've got three readings of dark one reading of light and you come out with a reading of

00:05:08.330 --> 00:05:10.700
About 75% dark and you get a smooth edge

00:05:10.700 --> 00:05:15.890
This is one thing that graphics cards do to try and make things look a little bit better if you turn off all these

00:05:16.080 --> 00:05:19.430
Anti-aliasing approaches, then what you'll get is your your core jaggedy lines?

00:05:19.740 --> 00:05:25.640
It'll run nice and quickly. If you're sampling four times per pixel, that could be a four-fold decrease in speed

00:05:25.979 --> 00:05:31.669
Right and that has a performance hit unless your graphics card is just amazing. Mine is not that's one problem, right?

00:05:31.669 --> 00:05:33.590
the other problem is but you know when you go up to 4k

00:05:33.590 --> 00:05:37.010
It's just four times the number of pixels whatever you're doing per pixel is

00:05:37.200 --> 00:05:41.899
Multiplied by four these four times in our pixels that you know, that's a huge problem. So if you're running

00:05:42.599 --> 00:05:45.889
4k and four samples for example per pixel

00:05:46.410 --> 00:05:48.529
That's a lot more computation

00:05:48.530 --> 00:05:51.019
but if you were just running without anti-aliasing on

00:05:51.419 --> 00:05:57.169
1080p and so you inevitably have to drop down somebody's setting so that you can get a good framerate for your game

00:05:57.330 --> 00:06:01.039
And it doesn't look as nice. So one option is just to make the graphics cost faster, right?

00:06:01.039 --> 00:06:05.089
This can't always, you know, this isn't the answer to everything and they get more more expensive, right?

00:06:05.090 --> 00:06:06.210
That's also a problem

00:06:06.210 --> 00:06:13.519
these new cards have in them these tentacles which are very good specific operations namely matrix multiplications and

00:06:13.949 --> 00:06:19.309
So there is a chance of what we could do is use a deep network to kind of just clean this image up for us

00:06:19.710 --> 00:06:26.150
Very quickly before it's presented to the screen and that will give us a nice presentation for our image without the huge

00:06:26.280 --> 00:06:29.000
Performance hit of doing all this anti-aliasing and all of this

00:06:29.550 --> 00:06:30.930
massive resolution, right

00:06:30.930 --> 00:06:33.949
So what board is speaking it works like this your computer?

00:06:34.259 --> 00:06:36.288
will render a raw frame with

00:06:36.360 --> 00:06:41.449
Aliasing and all the kind of problems that it has and this may or may not be at the same resolution as your monitor

00:06:41.550 --> 00:06:43.550
It will then be passed through a deep network

00:06:43.550 --> 00:06:45.479
which is not very deep because

00:06:45.479 --> 00:06:51.769
this has got to happen pretty quickly which utilizes the tensor cause of these new graphics cards to work very very quickly and that will

00:06:51.770 --> 00:06:55.759
Produce your knives 4k with anti-aliasing shot

00:06:55.759 --> 00:07:03.259
Which theoretically looks really really nice the way they train this network when they take the lower resolution alias version and the higher resolution

00:07:03.659 --> 00:07:08.659
Anti-alias version is they're going to train it basically to try and create the image on a pixel level as closely as possible

00:07:09.090 --> 00:07:13.669
But they'll also add additional parameters like that. It looks perceptually nice high

00:07:13.669 --> 00:07:19.669
So basically perceptual loss functions which try and make things look aesthetically closer to something right now

00:07:20.190 --> 00:07:23.989
Different loss functions are going to have different effects. So we trying out all these different loss functions

00:07:23.990 --> 00:07:29.479
They might even use adversarial loss functions which are these adversarial networks of what Mars talked about, right?

00:07:29.479 --> 00:07:34.579
There's loads of different ways to train these and how you do that. It's going to influence the actual result you get

00:07:34.580 --> 00:07:38.509
All right, because it's not worth going to work perfectly. So there's kind of two answer answer questions here

00:07:38.509 --> 00:07:39.389
I mean firstly does this work

00:07:39.389 --> 00:07:43.399
Right and and the other might personally

00:07:43.400 --> 00:07:47.959
I don't know because I don't haven't tried this right but I think it the results vary right? That's certainly true

00:07:48.029 --> 00:07:50.299
But also how do we train this new your network, right?

00:07:50.460 --> 00:07:54.109
Because what you don't want to have happen right is like the fate you're unlocking the phone thing

00:07:54.930 --> 00:07:59.200
What was it unlocking your face with your phone if you to unlock a face of your phone?

00:07:59.210 --> 00:08:01.359
You don't want users to have to do this, right?

00:08:01.360 --> 00:08:03.849
This is something for NVIDIA to do if they're gonna you know

00:08:03.950 --> 00:08:06.999
Silvus and make money off this technology and that's exactly what happens

00:08:07.250 --> 00:08:13.000
sometimes shortly before games release the game developers will send an early copy to a midea an

00:08:13.160 --> 00:08:19.179
Nvidia will start generating training data and train a neural network to do this process to take an image, but isn't quite as nice

00:08:19.180 --> 00:08:26.110
It's got aliasing it's lower resolution and perform this up sampling smart up sampling up to 4k

00:08:26.600 --> 00:08:27.100
anti-aliased

00:08:27.100 --> 00:08:27.490
right

00:08:27.490 --> 00:08:32.049
that's the idea and they do this by generating essentially a

00:08:32.390 --> 00:08:37.809
Perfect representation of the game using 64 samples per pixel anti-aliasing, right?

00:08:37.810 --> 00:08:43.060
So that is for every pixel they do 64 samples from that pixel instead of just one really nice

00:08:43.610 --> 00:08:46.990
sixty-four times slower than normal and then they take that as their

00:08:47.210 --> 00:08:50.439
Output and the input is just serve all frame with no anti-aliasing at all

00:08:50.470 --> 00:08:57.220
Maybe lower resolution and they train this network to take the raw frame and output the 64

00:08:57.830 --> 00:09:00.669
Samples per pixel really nice frame, right?

00:09:00.670 --> 00:09:03.849
And so really what it comes down to is whether in practice this works

00:09:03.920 --> 00:09:07.660
Right and the answer I think is probably some of the time yes some of the time no

00:09:07.660 --> 00:09:12.879
This is true of most deep learning right people don't tend to say this as much as they should but you know

00:09:12.890 --> 00:09:14.890
will it generalize if you take

00:09:14.990 --> 00:09:22.090
10 million frames of battlefield 5 and train this network on them to get as close to this output as possible and

00:09:22.340 --> 00:09:26.919
Then you generate the 10 million from one. Don't even want the next frame, right?

00:09:26.920 --> 00:09:29.920
if you generate the next frame, will it have as good a

00:09:30.650 --> 00:09:35.739
Performance on that unseen frame and the answer is usually pretty good, but it won't be ever be perfect

00:09:35.740 --> 00:09:38.440
right, especially if you're going from 1080p to 4k

00:09:38.900 --> 00:09:44.619
so I think NVIDIA kind of made the point here that actually this is about when you're running at the very top end of your

00:09:44.620 --> 00:09:47.109
graphics cards capability and so in some sense

00:09:47.110 --> 00:09:50.650
They're not talking about people who are barely struggling to run the game at 1080p

00:09:50.650 --> 00:09:56.349
You should already barely run the game at 4k and then maybe this will make it look slightly nicer first kind of two ways of

00:09:56.350 --> 00:09:59.470
Doing this one is you take a 4k input and you use this to perform

00:09:59.600 --> 00:10:03.520
Anti-aliasing and the other is you take a low resolution input and you use this to perform both

00:10:04.070 --> 00:10:11.229
Anti-aliasing and up sampling and that's a harder job to do because if you imagine that you've got a 1080p saw

00:10:11.560 --> 00:10:17.199
Then what actually you're going to have is a series of pixels like this and you've got to come up with all of these

00:10:17.270 --> 00:10:23.650
Pixels in between right and this is just like increasing the size of an image enhance enhance by you know, will it work?

00:10:23.650 --> 00:10:25.660
I don't know. It's going to be better than

00:10:26.330 --> 00:10:28.330
Violent bicubic up sampling, right?

00:10:28.850 --> 00:10:33.939
Because it's going to be bearing in mind this local area. It's going to say well look there's an edge coming down here

00:10:33.940 --> 00:10:37.210
So this needs to be sharper, this doesn't need to be as sharp things like this

00:10:37.640 --> 00:10:43.240
But this is not an easy problem to solve and you know by Nvidia's own admission. This is an ongoing process

00:10:43.340 --> 00:10:47.170
they continually train these networks on a supercomputer and then

00:10:48.260 --> 00:10:51.160
You know, hopefully they get better and better we shall see right

00:10:51.160 --> 00:10:51.580
well

00:10:51.580 --> 00:10:55.509
One thing I think is quite interesting is that it means that essentially a deep network is part of your game experience

00:10:55.580 --> 00:10:59.379
On your GPU and so the weights for this network

00:10:59.380 --> 00:11:03.670
The parameters of this network are actually going to be shipped out with drivers, which I think is quite neat, right?

00:11:03.670 --> 00:11:08.079
So you're no longer just getting graphics drivers which have performance optimizations for games?

00:11:08.080 --> 00:11:15.280
and of course the hardware the hardware control software, you've also got this network weights being shipped around by they're quite big so

00:11:15.280 --> 00:11:17.270
you know and

00:11:17.270 --> 00:11:23.110
So that's why you get limited support for games early on because they're training these maybe they haven't gotten early copy of the game

00:11:23.180 --> 00:11:23.680
right

00:11:23.680 --> 00:11:28.060
So it's it's it's down to Nvidia to just take these games render these super high resolution

00:11:28.550 --> 00:11:34.690
64 times amazing scenes and train these networks strikes me that even if it's been trained

00:11:34.940 --> 00:11:40.029
Running a network a deep network is not computationally cheap though. Is it is it worth it?

00:11:40.030 --> 00:11:44.019
I suppose what's the trade-off so I mean, I guess that's the question people are asking at the moment, right?

00:11:44.020 --> 00:11:45.170
so the tray office so

00:11:45.170 --> 00:11:50.319
the nice thing about a neural network is it takes an exact same amount of time every time right on these tensor cause

00:11:50.510 --> 00:11:51.790
There is a fixed amount of time

00:11:51.790 --> 00:11:57.249
It takes to take an image of a certain resolution and output this image of another resolution some amount of milliseconds

00:11:57.590 --> 00:12:02.649
So that is per frame a fixed load that's going to have happen games aren't merely a fixed load

00:12:02.650 --> 00:12:05.619
they take different amounts of time depending on what's in the scene and

00:12:06.440 --> 00:12:10.509
The argument basically is if yours graphics card is struggling you can drop from 4k to 1080p

00:12:10.700 --> 00:12:15.970
For a massive increase in performance and then decrease the performance slightly by attacking this neural network on the end

00:12:15.970 --> 00:12:19.990
Right, but your overall performance will be better for it that that's the idea

00:12:20.090 --> 00:12:25.030
So if you can already run at 6 at 4k my eye with 60 frames a second

00:12:25.340 --> 00:12:28.850
Very little reason to add this on right which is why sometimes it gets disabled in the options

00:12:28.850 --> 00:12:31.639
I your computer is already fine running this game

00:12:32.340 --> 00:12:36.230
Dropping down to 1080p is only going to make you experience worse. Don't bother doing it

00:12:36.230 --> 00:12:37.650
I guess the question is how does this?

00:12:37.650 --> 00:12:43.189
Network actually look right and it's something called an auto encoder or I would call this an encoder decoder, right?

00:12:43.190 --> 00:12:46.040
I talked about these before but you have an image coming in

00:12:46.110 --> 00:12:49.550
You have some amount of network, which is going to perform down sampling

00:12:49.860 --> 00:12:51.510
It's going to make the image smaller

00:12:51.510 --> 00:12:52.920
but it's also going to

00:12:52.920 --> 00:12:58.819
Learn interesting things about that image as it does it so this image is going to get down sampled through some Network layers

00:12:58.980 --> 00:13:02.389
Down to about half resolution something like that

00:13:02.390 --> 00:13:07.999
And then it's going to get up sample back to 4k or whatever. The resolution of the output is like this now

00:13:08.000 --> 00:13:11.900
It's quite typical in these kind of networks to go much further than this right normally

00:13:11.900 --> 00:13:15.920
So in a network I use to do something like this would go down to a few pixels wide

00:13:16.110 --> 00:13:18.349
because I'm using it to segment objects and

00:13:19.050 --> 00:13:25.669
So this network won't learn where all the people are because it doesn't go deep enough, right, but it will learn on a local level

00:13:26.190 --> 00:13:29.540
Kind of what's going on. This is a dark edge here. This is a light bit

00:13:29.540 --> 00:13:31.370
It's a bit of sunlight coming in, you know

00:13:31.370 --> 00:13:34.910
And it can start to piece some of these things together and work out in a slightly

00:13:35.040 --> 00:13:37.759
Smart way what these pixels are going to be doing, right?

00:13:39.240 --> 00:13:44.599
The other nice thing about this being only a few layers followed by quite a high resolution image followed by a few layers

00:13:44.600 --> 00:13:46.340
This is gonna be quite fast, right?

00:13:46.340 --> 00:13:46.850
I mean

00:13:46.850 --> 00:13:50.119
let's not underestimate how much computation this involves like if this is

00:13:50.490 --> 00:13:54.529
1080p or 4k what a staggering amount of maps has to happen very very quickly

00:13:55.440 --> 00:14:01.280
But that's exactly what these tens of calls are for they perform extremely fast 4x4 matrix multiplications and additions

00:14:01.950 --> 00:14:07.790
Which is exactly what this generalizes into so you essentially pass over the image performing these matrix multiplications

00:14:07.920 --> 00:14:10.849
Over these layers and it happens really really fast

00:14:11.610 --> 00:14:15.829
We're gonna see more and more of this kind of stuff. So yes, this is one way of doing it

00:14:15.830 --> 00:14:22.309
It's used in meandering for four denoising of ray tracing in in, you know, big movies like Pixar movies and things

00:14:23.310 --> 00:14:25.310
It's using up sampling on TVs

00:14:25.830 --> 00:14:31.819
Using a sash a low but powerful deep network to try and tidy up something but it's not perfect

00:14:32.340 --> 00:14:34.040
Best is going to happen a lot, right?

00:14:34.040 --> 00:14:40.949
We've already seen these these gams these generative adversarial networks turning up that are trying to produce new people's faces and things

00:14:42.370 --> 00:14:44.849
This is a big deal at the moment and it's going to be a lot of it

00:14:44.850 --> 00:14:47.370
So, you know in video have started this process

00:14:47.370 --> 00:14:51.060
But we're going to see more and more and I'll imagine it will become a kind of standard approach

00:14:51.060 --> 00:14:52.810
You know in a few years time

00:14:52.810 --> 00:14:57.389
It is staggering that this is happening 60 times a second

00:14:57.389 --> 00:15:01.889
Yeah, I mean III think that the school should bomb one of these cards and we'll give it a fire test

00:15:02.130 --> 00:15:03.149
We just need to test it

00:15:03.149 --> 00:15:07.229
We just need to test it on, you know, all these games. So it copies of his games to please

00:15:09.310 --> 00:15:14.609
Copies of the games a machine to run them on one of these Packers cards and I'll do a very thorough in-depth research on it

00:15:15.639 --> 00:15:20.129
But probably a similar word was in the dictionary and he got manipulated in some way

00:15:20.130 --> 00:15:23.639
Some letters got swapped around and suddenly it was cracked. We've had some luck. We've done a bit of brute force

00:15:24.040 --> 00:15:26.579
We've done a basic dictionary attack

00:15:26.579 --> 00:15:30.029
We have a few rules just to mix it up and we've got some passwords so far

00:15:30.029 --> 00:15:33.419
I've cracked I think about 1,700 passwords out of about six and a half pounds

