WEBVTT
Kind: captions
Language: en

00:00:08.858 --> 00:00:11.363
Welcome to Google
Developers Hackademy.

00:00:11.363 --> 00:00:13.726
This is the second part
of the Android SDK

00:00:13.726 --> 00:00:16.462
introduction course,
created by Enrique Diaz

00:00:16.462 --> 00:00:18.396
from GDG Androidtitlan Mexico.

00:00:18.396 --> 00:00:20.396
If this is your first contact
with the course,

00:00:20.396 --> 00:00:22.396
I recommend you watch
the first part

00:00:22.396 --> 00:00:23.990
and do the exercises.

00:00:31.726 --> 00:00:34.198
Hi. Welcome to lesson 2.

00:00:34.198 --> 00:00:38.165
My name is Enrique Diaz.
Remember in the previous lesson

00:00:38.165 --> 00:00:41.627
we learned 3 important things
about Android framework.

00:00:41.627 --> 00:00:44.825
First, we went through its
history and where it comes from.

00:00:45.264 --> 00:00:48.066
Then, we analyzed statistics

00:00:48.396 --> 00:00:50.495
and the growth it's had.

00:00:50.495 --> 00:00:53.429
And finally, we got excited
by the relevance

00:00:53.429 --> 00:00:55.858
and potential the platform has.

00:00:56.561 --> 00:00:59.990
In this lesson we'll learn
5 very valuable things.

00:01:00.264 --> 00:01:03.825
First, we'll learn how
the Android framework works.

00:01:04.132 --> 00:01:07.825
Second, we'll check
the structure of an application.

00:01:08.924 --> 00:01:10.660
As third point,

00:01:10.660 --> 00:01:13.264
we'll check out Dalvik Debug
Monitor Server

00:01:13.264 --> 00:01:15.132
and what it is for.

00:01:15.363 --> 00:01:18.660
What's more, we'll see
Android SDK Manager

00:01:18.660 --> 00:01:21.462
and we'll finish by creating
a virtual device

00:01:21.462 --> 00:01:23.924
with Android Virtual
Device Manager.

00:01:24.132 --> 00:01:26.363
"Knowing Android framework."

00:01:26.363 --> 00:01:29.561
In the API's lowest part
we find six very important

00:01:29.561 --> 00:01:33.264
components it inherits
directly from Linux Kernel.

00:01:33.264 --> 00:01:35.627
The first one's called
"wakelocks,"

00:01:35.627 --> 00:01:39.726
and what it does, basically,
is prevent battery waste

00:01:40.132 --> 00:01:42.660
by automatically
turning the display off.

00:01:42.660 --> 00:01:46.594
This means that, natively,
Linux doesn't have it,

00:01:46.594 --> 00:01:49.066
however,
Google developed it

00:01:49.066 --> 00:01:51.660
particularly
for mobile platforms.

00:01:51.858 --> 00:01:54.165
Two: "low memory killer."

00:01:54.165 --> 00:01:57.627
This is a process that allows us
to automatically eliminate

00:01:57.627 --> 00:02:00.198
applications
we're no longer using,

00:02:00.198 --> 00:02:03.198
so we have enough memory space

00:02:03.198 --> 00:02:05.528
to open other apps.

00:02:05.528 --> 00:02:07.396
Three: "binder."

00:02:07.627 --> 00:02:10.891
This is a process called
within Java classes

00:02:10.891 --> 00:02:13.891
built on the top of the stack.

00:02:13.891 --> 00:02:16.990
Its goal is to maintain
memory space

00:02:16.990 --> 00:02:18.693
that are assigned as resources

00:02:18.693 --> 00:02:22.132
to be able to have and create,
whether it's other activities,

00:02:22.132 --> 00:02:24.033
intents or services.

00:02:24.363 --> 00:02:26.099
Four: "ashmem."

00:02:26.099 --> 00:02:29.495
This is a process that allows us
to create memory spaces

00:02:29.495 --> 00:02:33.297
that are both shared between
the OS and the final user.

00:02:34.396 --> 00:02:37.858
Five: "alarm."
This process comes

00:02:37.858 --> 00:02:40.693
from Linux Kernel
and allows us to maintain

00:02:40.693 --> 00:02:44.165
the status of a clock.
It inherits from Real Time Clock

00:02:44.165 --> 00:02:48.462
and as it is, it's the phone's
alarm and internal clock.

00:02:49.561 --> 00:02:53.132
And finally, six: "logger,"
which is a process

00:02:53.132 --> 00:02:56.396
also from any operative system
that allows us

00:02:56.396 --> 00:02:59.858
to be sensing and recognizing
what is send as a message

00:02:59.858 --> 00:03:02.132
in the OS console.

00:03:02.132 --> 00:03:04.825
The biggest difference
in Android is that,

00:03:04.825 --> 00:03:07.363
instead of using sockets,
it uses buffers.

00:03:07.363 --> 00:03:10.561
This means you can access
this content

00:03:10.561 --> 00:03:12.066
in real time.

00:03:12.066 --> 00:03:15.792
Another important part
of the API are the libraries

00:03:15.792 --> 00:03:19.528
that, despite not being entirely
developed by Google,

00:03:19.528 --> 00:03:23.099
allow to add functionality
to our applications.

00:03:23.099 --> 00:03:25.561
There are 4 important ones
I'd like to mention:

00:03:25.561 --> 00:03:26.891
"open SSL,"

00:03:26.891 --> 00:03:29.825
which allows us to have
certain security and ciphering

00:03:29.825 --> 00:03:31.561
for the applications.

00:03:31.792 --> 00:03:34.528
"Sqlite," which is a tool

00:03:34.528 --> 00:03:37.033
to create databases in Sqlite.

00:03:37.396 --> 00:03:40.297
"WebKit," which is
another library

00:03:40.297 --> 00:03:42.594
that allows us
to natively implement

00:03:42.594 --> 00:03:44.924
the WebKit browser.

00:03:44.924 --> 00:03:48.429
And finally, "Bionic,"
which is the C compiler

00:03:48.429 --> 00:03:50.792
that is used instead of GCC.

00:03:50.792 --> 00:03:52.858
Dalvik Virtual Machine,

00:03:52.858 --> 00:03:55.330
unlike any other
virtual machine,

00:03:55.330 --> 00:03:56.957
is register-based.

00:03:56.957 --> 00:04:00.759
This reduces in 30%
the size of our executables.

00:04:01.231 --> 00:04:03.495
In a normal Java environment,

00:04:03.495 --> 00:04:05.462
in Java language,

00:04:05.462 --> 00:04:08.132
we have .class files,

00:04:08.132 --> 00:04:11.066
which are executed
through the Java Compiler.

00:04:11.066 --> 00:04:13.726
Passed through the Java process
they can be executed

00:04:13.726 --> 00:04:17.528
in Java's VM, very differently
to how you'd do it

00:04:17.528 --> 00:04:20.990
in a Dalvik VM
because you have a .class file

00:04:20.990 --> 00:04:23.627
that goes through
the DEX process

00:04:23.627 --> 00:04:25.660
and are turned into Dalvik code.

00:04:25.660 --> 00:04:27.825
The last part of the API

00:04:27.825 --> 00:04:30.561
is something you can access
from Java code

00:04:30.561 --> 00:04:33.330
that allows us to create
our own applications,

00:04:33.330 --> 00:04:35.858
and besides,
access system services

00:04:35.858 --> 00:04:37.792
with just one codeline.

00:04:37.792 --> 00:04:40.726
Two examples: one can be
Notification Manager,

00:04:40.726 --> 00:04:42.924
which allows us
to create notifications,

00:04:42.924 --> 00:04:45.231
and Power Manager,
which allows us

00:04:45.231 --> 00:04:48.198
to turn the display on and off
at our own will.

00:04:48.198 --> 00:04:51.396
Finally, the last layer
within our stack

00:04:51.396 --> 00:04:54.990
are applications themselves,
whether we build them

00:04:54.990 --> 00:04:57.528
or are downloaded
from Google Play.

00:04:57.528 --> 00:04:59.825
LET'S GET TO WORK

00:05:00.924 --> 00:05:02.924
Now we will see

00:05:02.924 --> 00:05:05.363
the file structure
in an Android project,

00:05:05.363 --> 00:05:08.660
and this is important so you,
as a programmer, can understand

00:05:08.660 --> 00:05:10.858
which files you need to modify.

00:05:10.858 --> 00:05:14.264
Here, on the video,
I already have a project

00:05:14.264 --> 00:05:15.627
I have initialized.

00:05:16.099 --> 00:05:18.495
So we go to Source folder,

00:05:18.495 --> 00:05:22.924
then to the package
mx.androidtitlan.holamundo,

00:05:23.924 --> 00:05:28.759
and we can see something called
"MainActivity.java" inside.

00:05:30.033 --> 00:05:32.462
This is a Java file,
just like that,

00:05:32.462 --> 00:05:34.924
the difference is
it inherits from Activity,

00:05:34.924 --> 00:05:38.231
which is the class
we will see later on,

00:05:39.066 --> 00:05:41.495
and it has two
very important methods:

00:05:41.495 --> 00:05:44.363
onCreate and
onCreateOptionsMenu.

00:05:45.594 --> 00:05:47.759
We won't get into details now,

00:05:47.759 --> 00:05:49.693
we'll continue seeing
the rest of the files.

00:05:49.693 --> 00:05:52.396
We'll enter a folder called gen.

00:05:52.396 --> 00:05:55.891
In it we can see there is
a BuildConfig.java,

00:05:56.297 --> 00:06:00.231
which clearly tells you
not to modify it.

00:06:00.759 --> 00:06:02.627
This is useful

00:06:03.165 --> 00:06:05.924
because, when you're building

00:06:05.924 --> 00:06:08.033
an application for Android,

00:06:08.462 --> 00:06:11.297
it automatically builds
this file,

00:06:11.297 --> 00:06:14.165
because it allows us
to be in control.

00:06:17.033 --> 00:06:19.165
And the R.java file

00:06:19.165 --> 00:06:22.957
manages images and dependencies

00:06:22.957 --> 00:06:24.627
in our project.

00:06:26.396 --> 00:06:29.099
Pay close attention
to this part because,

00:06:29.099 --> 00:06:30.957
if you notice,

00:06:30.957 --> 00:06:33.528
we have the attributes part,

00:06:34.363 --> 00:06:35.693
dimens part,

00:06:35.693 --> 00:06:37.132
drawbles part,

00:06:37.132 --> 00:06:40.066
IDs, layouts, menus,
strings parts.

00:06:40.396 --> 00:06:42.330
All these elements

00:06:42.759 --> 00:06:45.198
are assigned to a memory space

00:06:45.198 --> 00:06:47.594
that Android
automatically controls.

00:06:47.594 --> 00:06:50.627
Pay special attention
to this Easy Launcher,

00:06:50.627 --> 00:06:53.066
because we will see it
later on and we'll understand

00:06:53.066 --> 00:06:55.990
what the Android framework
does internally.

00:06:55.990 --> 00:06:59.825
Now, we can check
the API for version 4,

00:07:00.495 --> 00:07:03.825
where it allows us
to add functionality

00:07:03.825 --> 00:07:07.198
towards previous versions
of Android SDK.

00:07:08.330 --> 00:07:11.297
We're also entering
the bin folder,

00:07:11.297 --> 00:07:15.033
where, basically, there are
files generated by the framework

00:07:15.561 --> 00:07:17.396
which are executable.

00:07:17.396 --> 00:07:21.198
We have the res folder,
which contains nothing now,

00:07:21.198 --> 00:07:24.297
and also another file
called AndroidManifest.

00:07:25.231 --> 00:07:28.627
And the folder libs,
which we're now seeing,

00:07:28.627 --> 00:07:31.528
has nothing but
another .jar file,

00:07:31.528 --> 00:07:34.924
which is the dependency
we previously checked.

00:07:34.924 --> 00:07:38.099
It is also very important
because here we have

00:07:38.099 --> 00:07:41.165
all the resources of our project

00:07:41.165 --> 00:07:44.594
and the resource concept
in Android is very simple:

00:07:44.594 --> 00:07:47.198
everything which is not
a Java file

00:07:47.198 --> 00:07:49.990
is a resource.
Whether it's in .xml files,

00:07:49.990 --> 00:07:52.066
files that give architecture

00:07:52.066 --> 00:07:55.033
to the way we see our app,

00:07:55.033 --> 00:07:57.825
selectors, buttons, etc., etc.

00:07:58.495 --> 00:08:01.462
For example, here I'm seeing

00:08:03.396 --> 00:08:05.561
ic_launcher.png,

00:08:05.891 --> 00:08:09.099
and if you remember well,
in the R file,

00:08:09.099 --> 00:08:13.165
we had just that variable.

00:08:13.693 --> 00:08:16.561
And what is the framework doing?

00:08:17.594 --> 00:08:20.627
Defining a memory space

00:08:20.627 --> 00:08:23.924
to have control of that file

00:08:23.924 --> 00:08:26.594
and then show it
in our application.

00:08:27.924 --> 00:08:29.924
In this folder, layout,

00:08:29.924 --> 00:08:33.495
we have a file called
activity_main.xml,

00:08:33.495 --> 00:08:36.990
and, as you can see,
it's a graphical interface.

00:08:38.264 --> 00:08:41.594
It's important here
to understand that an .xml file

00:08:41.594 --> 00:08:44.066
allows us to have
an user interface

00:08:44.066 --> 00:08:46.462
and manipulate and create
elements with which

00:08:46.462 --> 00:08:48.297
the user will interact.

00:08:48.297 --> 00:08:50.825
Also, in the menu folder,

00:08:50.825 --> 00:08:53.528
we have an .xml folder
called menu,

00:08:53.528 --> 00:08:56.033
which we won't see
in this lesson.

00:08:56.033 --> 00:08:59.561
In values,
we have three .xml files:

00:08:59.891 --> 00:09:01.792
dimensions, strings...

00:09:02.429 --> 00:09:04.924
Also,
in this other identifier,

00:09:04.924 --> 00:09:07.330
in the sw600dp suffix,

00:09:07.330 --> 00:09:10.495
it basically helps us
maintain control

00:09:10.495 --> 00:09:13.792
over devices
with different densities,

00:09:13.792 --> 00:09:16.957
in particular,
the sw600dp suffix

00:09:16.957 --> 00:09:20.891
is trying that all those
dependencies, in dimensions,

00:09:21.429 --> 00:09:24.693
are usable in 7-inch tablets.

00:09:26.594 --> 00:09:29.396
And the same for sw720,

00:09:29.396 --> 00:09:32.792
just that here it's the
particular dependencies

00:09:32.792 --> 00:09:34.759
for 10-inch tablets.

00:09:34.759 --> 00:09:37.198
The suffix values-v11

00:09:37.198 --> 00:09:40.627
allows us to have control
over values

00:09:41.132 --> 00:09:44.528
within a particular API,

00:09:44.528 --> 00:09:46.726
in this case is version 11,

00:09:46.726 --> 00:09:49.759
and for version 14
it's exactly the same,

00:09:49.759 --> 00:09:51.858
but for API level 14.

00:09:51.858 --> 00:09:55.099
And finally, we open
AndroidManifest.

00:09:56.264 --> 00:09:59.099
In the file AndroidManifest
we have

00:09:59.429 --> 00:10:02.066
the entire description
of our project

00:10:02.066 --> 00:10:04.726
and, specially, I am opening

00:10:04.726 --> 00:10:07.033
the Manifest file

00:10:07.033 --> 00:10:11.825
is probably the most important
file of the project.

00:10:12.825 --> 00:10:15.099
If you look closely,

00:10:15.759 --> 00:10:18.660
we have several tags,
such as package,

00:10:19.264 --> 00:10:22.231
version code
and version name.

00:10:22.627 --> 00:10:25.495
For example, version code
is very important

00:10:25.495 --> 00:10:29.066
for Google Play because
it allows it to understand

00:10:29.066 --> 00:10:30.957
if there are any updates.

00:10:30.957 --> 00:10:34.627
The version name is a string,
a mere text,

00:10:34.627 --> 00:10:37.726
and it allows us
to have internal control

00:10:37.726 --> 00:10:39.726
in a development team

00:10:39.726 --> 00:10:42.330
and to know which version
we're working on.

00:10:42.330 --> 00:10:45.462
It also defines
the SDK minimum version

00:10:45.462 --> 00:10:47.198
and what the target is.

00:10:47.198 --> 00:10:50.990
In this sense,
the minimum version allows you

00:10:50.990 --> 00:10:53.132
to discriminate all devices

00:10:53.132 --> 00:10:55.099
that don't have that version.

00:10:56.297 --> 00:10:59.330
Below we can see
the class application,

00:10:59.330 --> 00:11:03.165
and inside is the class
activity. These are tags.

00:11:03.528 --> 00:11:05.759
In the case of application
we see

00:11:05.759 --> 00:11:07.561
if it allows it
to make a backup,

00:11:07.561 --> 00:11:10.594
what's the icon to be shown
in our launcher,

00:11:10.594 --> 00:11:12.429
the tag and the theme.

00:11:12.429 --> 00:11:15.891
By default, since I'm taking
Hola Mundo as it is,

00:11:15.891 --> 00:11:18.726
I'm not adding any properties.

00:11:18.726 --> 00:11:22.330
When I create a new project
this is how it should appear,

00:11:23.165 --> 00:11:27.231
and inside the app we have
another tag called activity.

00:11:28.330 --> 00:11:32.033
This activity is the definition
for all our activities

00:11:32.033 --> 00:11:34.924
or classes we have
in our application.

00:11:34.924 --> 00:11:39.396
Now we will access
the proguard-project.txt file,

00:11:40.231 --> 00:11:42.627
which somehow helps us

00:11:43.231 --> 00:11:46.759
cipher our project

00:11:46.759 --> 00:11:49.099
and add a layer...

00:11:51.297 --> 00:11:54.033
a security layer
to our Java file.

00:11:54.033 --> 00:11:56.198
In this case, as you can see,

00:11:56.198 --> 00:11:59.561
it's briefly explained
what it does

00:11:59.561 --> 00:12:02.066
and, broadly speaking,
it's rules

00:12:02.066 --> 00:12:05.891
that help us be in control
on the Java code side,

00:12:05.891 --> 00:12:09.297
to which reverse engineering
can not be applied.

00:12:09.924 --> 00:12:13.165
And finally, we have
project.properties,

00:12:13.495 --> 00:12:16.990
which is a file that helps us
have control

00:12:18.231 --> 00:12:20.660
over the dependencies
management.

00:12:20.924 --> 00:12:22.330
Up next,

00:12:22.330 --> 00:12:25.165
we'll see Android Virtual
Device Manager,

00:12:25.165 --> 00:12:28.297
which is a tool that allows us

00:12:28.297 --> 00:12:32.330
to logically test
different configurations

00:12:32.660 --> 00:12:34.264
for our application.

00:12:34.264 --> 00:12:37.198
In the Android Virtual
Device Manager section

00:12:37.198 --> 00:12:39.594
we have a window that pops up

00:12:39.594 --> 00:12:43.297
and lets us visualize
some important things.

00:12:43.825 --> 00:12:46.528
We have em16, for example,

00:12:47.660 --> 00:12:51.066
em16, -1, -2, -4,
etcetera, etcetera.

00:12:51.066 --> 00:12:54.726
Each one of this is a nave
for our virtual device,

00:12:54.726 --> 00:12:58.066
and all that column
allows us to know their name

00:12:58.066 --> 00:13:00.165
to be easily identified.

00:13:00.165 --> 00:13:02.198
It also contains target name,

00:13:02.198 --> 00:13:05.099
which is the API level

00:13:05.099 --> 00:13:08.363
for which this virtual device
is designed.

00:13:09.528 --> 00:13:12.198
It also contains the platform.

00:13:13.033 --> 00:13:15.495
In the first 3 cases it's 1.6.

00:13:15.495 --> 00:13:18.396
The one below is Nexus_4,

00:13:18.396 --> 00:13:21.594
which has 4.3 as platform

00:13:21.594 --> 00:13:23.363
and it's Android 4.3.

00:13:23.363 --> 00:13:26.231
The API level,
which is the next column,

00:13:26.231 --> 00:13:28.099
and it varies from one
to the other.

00:13:28.099 --> 00:13:31.528
As you know, we have
the newest one to date,

00:13:31.528 --> 00:13:33.792
which is API level 18.

00:13:34.660 --> 00:13:38.594
And finally, we have the CPU,
the ABI,

00:13:38.957 --> 00:13:42.792
which is the processor
on which we run our emulator.

00:13:43.231 --> 00:13:45.594
In the first few cases
it's an ARM,

00:13:45.594 --> 00:13:48.594
and in the last ones
it's an 7a version ARM.

00:13:49.594 --> 00:13:52.693
In the device definition tab

00:13:53.462 --> 00:13:56.033
we can see a list,

00:13:56.396 --> 00:13:59.891
which contains
the virtual devices

00:14:00.957 --> 00:14:04.231
that Google facilitates
by default.

00:14:04.792 --> 00:14:08.396
The upper part of it
contains, for example,

00:14:09.693 --> 00:14:11.660
Google's Nexus S.

00:14:11.660 --> 00:14:14.099
This is a real device

00:14:14.495 --> 00:14:18.132
that is used to be able
to do our tests here.

00:14:18.132 --> 00:14:20.330
This device, Nexus S,

00:14:20.330 --> 00:14:23.528
has a 4-inch display

00:14:23.528 --> 00:14:26.759
with 480 x 800 dimensions

00:14:27.297 --> 00:14:30.231
and an hdpi display

00:14:30.792 --> 00:14:33.264
with 343 MB in RAM.

00:14:33.264 --> 00:14:36.528
Now we will create
a new virtual device.

00:14:36.891 --> 00:14:39.033
It will display

00:14:39.429 --> 00:14:42.330
a series of elements

00:14:42.990 --> 00:14:45.033
that we can modify,

00:14:45.033 --> 00:14:48.396
and we can also choose
by default

00:14:48.396 --> 00:14:52.198
which device
with its different properties.

00:14:52.198 --> 00:14:53.891
We can choose

00:14:53.891 --> 00:14:57.231
if we want a front camera,
a back camera,

00:14:57.231 --> 00:14:59.198
how much RAM memory...

00:14:59.660 --> 00:15:03.495
if it's going to contain
an internal storage device

00:15:04.132 --> 00:15:05.858
or an SD card.

00:15:05.858 --> 00:15:08.528
We hit start
in the virtual device...

00:15:10.594 --> 00:15:11.792
and there it is.

00:15:12.990 --> 00:15:14.957
Android SDK Manager

00:15:14.957 --> 00:15:18.198
is a tool that allows us
to download

00:15:18.198 --> 00:15:20.858
the newest API versions.

00:15:21.165 --> 00:15:24.462
Besides, it allows us access
to a source code,

00:15:24.924 --> 00:15:27.165
to documentation and libraries

00:15:27.165 --> 00:15:29.627
that the API doesn't have
by default,

00:15:29.627 --> 00:15:31.561
such as Google Play Services,

00:15:32.429 --> 00:15:35.990
the tool for charges
within the platform,

00:15:35.990 --> 00:15:37.429
and many more.

00:15:37.957 --> 00:15:40.858
Now we will enter
Android SDK Manager,

00:15:40.858 --> 00:15:43.957
which contains a series of files

00:15:44.528 --> 00:15:47.594
that we downloaded
to the repository

00:15:47.594 --> 00:15:49.363
that Google provided us with

00:15:49.660 --> 00:15:53.165
to use and implement

00:15:53.693 --> 00:15:58.231
new versions of the API
into my projects.

00:15:59.396 --> 00:16:02.297
Here we can see
the window has shown up...

00:16:03.099 --> 00:16:05.726
and what we can see first

00:16:05.726 --> 00:16:07.759
is the Tools folder,

00:16:08.429 --> 00:16:12.231
which contains the tools
to developing,

00:16:13.198 --> 00:16:15.066
including also

00:16:16.495 --> 00:16:18.330
the Eclipse plug-in.

00:16:18.330 --> 00:16:21.627
In this case we have
Android SDK Tools

00:16:21.627 --> 00:16:24.891
and, specially, in this video

00:16:24.891 --> 00:16:28.132
we can see we have
an update available,

00:16:28.132 --> 00:16:30.363
which is version 22.2.

00:16:30.363 --> 00:16:34.033
Besides, we can see
all versions

00:16:34.033 --> 00:16:35.924
for the current APIs,

00:16:35.924 --> 00:16:38.198
including the documentation,

00:16:38.198 --> 00:16:40.495
the platform, the samples,

00:16:40.825 --> 00:16:44.825
the emulator
for the two kinds of processors,

00:16:44.825 --> 00:16:47.165
ARM and Intel x86,

00:16:47.594 --> 00:16:50.495
the Google APIs
and the source code.

00:16:50.495 --> 00:16:53.231
For all versions of the API,

00:16:53.231 --> 00:16:55.759
from 17 to 4.

00:16:56.264 --> 00:16:59.363
And another
very important folder,

00:16:59.363 --> 00:17:01.297
within SDK,

00:17:02.462 --> 00:17:07.528
is Extras, where we have
some libraries

00:17:07.528 --> 00:17:10.594
not natively contained
in the framework,

00:17:11.660 --> 00:17:15.198
like for example
Google Analytics SDK,

00:17:15.660 --> 00:17:17.990
or AdMob Ads SDK.

00:17:19.396 --> 00:17:21.924
Also Android Support Library

00:17:22.528 --> 00:17:24.429
and Google Play Services.

00:17:25.165 --> 00:17:26.396
Up next,

00:17:26.396 --> 00:17:29.363
we'll see Dalvik Debug
Monitor Server,

00:17:29.363 --> 00:17:31.957
which is a series of tools

00:17:31.957 --> 00:17:34.495
that help us control
and simulate

00:17:34.495 --> 00:17:37.858
functionalities
inside our virtual device.

00:17:38.264 --> 00:17:40.198
Things like making a call,

00:17:40.198 --> 00:17:41.990
receiving an SMS

00:17:41.990 --> 00:17:44.594
or simulating longitude
and latitude values

00:17:44.594 --> 00:17:47.231
are some of the things
you can do with this tool.

00:17:47.231 --> 00:17:51.066
Finally, we will enter
Dalvik Debug Monitor Server.

00:17:52.165 --> 00:17:54.561
In this window we can see

00:17:55.165 --> 00:17:58.297
all the processes that are
running in my emulator

00:17:58.924 --> 00:18:01.165
in this device section.

00:18:01.396 --> 00:18:04.033
This processes, as they are,

00:18:04.033 --> 00:18:06.231
are those that are running

00:18:06.231 --> 00:18:09.363
as part of the operative system.

00:18:10.330 --> 00:18:13.825
Also, at the top,

00:18:13.825 --> 00:18:17.165
we can see several tools

00:18:17.165 --> 00:18:21.033
to finish the process,
performing a checkup,

00:18:21.759 --> 00:18:23.165
emptying the Heap,

00:18:23.759 --> 00:18:26.198
performing a debug,
etcetera, etcetera.

00:18:26.825 --> 00:18:30.957
And, specially, there are two
of them that are very important,

00:18:31.891 --> 00:18:35.792
like this one in particular
called Device Screen Capture,

00:18:36.198 --> 00:18:40.957
that allows us to take
a snapshot of the application

00:18:41.825 --> 00:18:43.792
and of the current device

00:18:43.792 --> 00:18:46.858
that is connected
to our SDK tool.

00:18:47.495 --> 00:18:50.990
In this section we can see
different tabs

00:18:50.990 --> 00:18:53.693
that help us check

00:18:53.693 --> 00:18:57.660
the status of the application
that we are running.

00:18:58.924 --> 00:19:01.099
We have, for example, Threads,

00:19:01.099 --> 00:19:03.594
Heap, Allocation Tracker,

00:19:03.924 --> 00:19:05.429
Network Statistics,

00:19:05.429 --> 00:19:07.396
File Explorer

00:19:07.396 --> 00:19:09.198
and Emulator Control.

00:19:09.198 --> 00:19:12.066
We're specially
interested in two,

00:19:13.033 --> 00:19:15.264
which is File Explorer,

00:19:15.264 --> 00:19:17.396
where, as we can notice,

00:19:17.396 --> 00:19:20.528
there is a file system

00:19:20.528 --> 00:19:23.396
which is just the one
Android contains,

00:19:23.726 --> 00:19:25.825
and Emulator Control,

00:19:26.165 --> 00:19:29.726
that allows us to check

00:19:30.594 --> 00:19:32.924
and simulate some calls

00:19:32.924 --> 00:19:34.462
or SMS

00:19:34.462 --> 00:19:36.462
and also to control

00:19:36.462 --> 00:19:40.231
the 3G data
it can receive and sense,

00:19:40.924 --> 00:19:44.066
as well as the protocol
and speed at which it goes.

00:19:44.066 --> 00:19:47.231
Besides, in Telephony Actions
I can add

00:19:47.891 --> 00:19:52.429
a number and simulate an SMS
by adding a message.

00:19:52.957 --> 00:19:55.825
Such as: "Hey, nice course,"

00:19:56.891 --> 00:19:58.759
which I can send...

00:20:01.033 --> 00:20:03.990
and, in my emulator,
it should show

00:20:04.429 --> 00:20:07.396
as a sent message.
We can see it there.

00:20:08.957 --> 00:20:14.066
It's an SMS we can open
and reply.

00:20:15.924 --> 00:20:18.231
And we can also make a call,

00:20:18.594 --> 00:20:21.231
just by switching the button...

00:20:22.693 --> 00:20:26.099
and we should be able
to see it in our emulator.

00:20:28.858 --> 00:20:32.726
There it is,
with the number 1337.

00:20:34.363 --> 00:20:36.924
You can also simulate
that you hung up

00:20:37.264 --> 00:20:39.957
and it will show up
as a missing call.

00:20:40.495 --> 00:20:45.363
Finally, we will check
the Log window,

00:20:46.594 --> 00:20:49.429
which outputs information

00:20:50.033 --> 00:20:51.792
from the operative system

00:20:52.396 --> 00:20:55.627
or from an application
we develop.

00:20:55.627 --> 00:20:58.165
As you can see from the video,

00:20:58.165 --> 00:21:01.858
we have a little text column

00:21:02.462 --> 00:21:05.660
which is outputting
all the messages

00:21:06.726 --> 00:21:10.627
from the Dalvik Virtual Machine
such as a garbage collector,

00:21:11.099 --> 00:21:13.429
or the activity manager.

00:21:16.297 --> 00:21:17.660
Let's recapitulate.

00:21:18.264 --> 00:21:19.264
One:

00:21:19.264 --> 00:21:21.957
we learned how Android
framework works.

00:21:22.396 --> 00:21:23.396
Two:

00:21:23.396 --> 00:21:26.429
we went through
the file structure of a project.

00:21:26.957 --> 00:21:27.957
Three:

00:21:27.957 --> 00:21:30.627
we used Dalvik Debug
Monitor Server.

00:21:31.066 --> 00:21:32.198
Four:

00:21:32.198 --> 00:21:35.231
we checked what is
Android SDK Manager.

00:21:35.231 --> 00:21:37.231
And, finally, five:

00:21:37.231 --> 00:21:40.330
we used Android Virtual
Device Manager.

00:21:40.627 --> 00:21:44.330
In the next lesson we will see
three very important things:

00:21:44.330 --> 00:21:47.066
one, we will learn
what an Activity is.

00:21:47.066 --> 00:21:49.693
Two, we'll implement an Intent.

00:21:50.066 --> 00:21:53.066
And three, we will learn
what a Fragment is.

00:21:53.561 --> 00:21:55.231
My name is Enrique Diaz.

00:21:55.231 --> 00:21:56.858
Keep on programming!

