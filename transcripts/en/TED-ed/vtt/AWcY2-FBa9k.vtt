WEBVTT
Kind: captions
Language: en

00:00:06.832 --> 00:00:10.876
Dutch artist Piet Mondrian’s abstract,
rectangular paintings

00:00:10.876 --> 00:00:15.546
inspired mathematicians 
to create a two-fold challenge.

00:00:15.546 --> 00:00:21.498
First, we must completely cover a square
canvas with non-overlapping rectangles.

00:00:21.498 --> 00:00:27.932
All must be unique, so if we use a 1x4, 
we can’t use a 4x1 in another spot,

00:00:27.932 --> 00:00:31.757
but a 2x2 rectangle would be fine.

00:00:31.757 --> 00:00:33.106
Let’s try that.

00:00:33.106 --> 00:00:35.827
Say we have a canvas measuring 4x4.

00:00:35.827 --> 00:00:37.958
We can’t chop it directly in half,

00:00:37.958 --> 00:00:41.571
since that would give us 
identical rectangles of 2x4.

00:00:41.571 --> 00:00:47.007
But the next closest option 
- 3x4 and 1x4 - works.

00:00:47.007 --> 00:00:49.441
That was easy, but we’re not done yet.

00:00:49.441 --> 00:00:52.109
Now take the area 
of the largest rectangle,

00:00:52.109 --> 00:00:55.172
and subtract the area of the smallest.

00:00:55.172 --> 00:00:57.161
The result is our score,

00:00:57.161 --> 00:01:01.175
and the goal is to get 
as low a score as possible.

00:01:01.175 --> 00:01:05.433
Here, the largest area is 12 
and the smallest is 4,

00:01:05.433 --> 00:01:07.301
giving us a score of 8.

00:01:07.301 --> 00:01:10.337
Since we didn’t try to go 
for a low score that time,

00:01:10.337 --> 00:01:12.208
we can probably do better.

00:01:12.208 --> 00:01:13.992
Let’s keep our 1x4

00:01:13.992 --> 00:01:19.031
while breaking the 3x4 
into a 3x3 and a 3x1.

00:01:19.031 --> 00:01:22.816
Now our score is 9 minus 3, or 6.

00:01:22.816 --> 00:01:25.359
Still not optimal, but better.

00:01:25.359 --> 00:01:29.452
With such a small canvas, 
there are only a few options.

00:01:29.452 --> 00:01:32.250
But let’s see what happens
when the canvas gets bigger.

00:01:32.250 --> 00:01:37.127
Try out an 8x8; 
what’s the lowest score you can get?

00:01:37.127 --> 00:01:41.694
Pause here if you want 
to figure it out yourself.

00:01:41.694 --> 00:01:42.779
Answer in: 3

00:01:42.779 --> 00:01:43.840
Answer in: 2

00:01:43.840 --> 00:01:45.223
Answer in: 1

00:01:45.223 --> 00:01:47.585
To get our bearings, 
we can start as before:

00:01:47.585 --> 00:01:49.903
dividing the canvas roughly in two.

00:01:49.903 --> 00:01:53.869
That gives us a 5x8 rectangle 
with area 40

00:01:53.869 --> 00:01:56.483
and a 3x8 with area 24,

00:01:56.483 --> 00:01:58.321
for a score of 16.

00:01:58.321 --> 00:01:59.528
That’s pretty bad.

00:01:59.528 --> 00:02:06.453
Dividing that 5x8 into a 5x5 
and a 5x3 leaves us with a score of 10.

00:02:06.453 --> 00:02:08.935
Better, but still not great.

00:02:08.935 --> 00:02:12.199
We could just keep dividing 
the biggest rectangle.

00:02:12.199 --> 00:02:15.208
But that would leave us 
with increasingly tiny rectangles,

00:02:15.208 --> 00:02:19.018
which would increase the range 
between the largest and smallest.

00:02:19.018 --> 00:02:20.734
What we really want

00:02:20.734 --> 00:02:25.941
is for all our rectangles to fall
within a small range of area values.

00:02:25.941 --> 00:02:29.279
And since the total area 
of the canvas is 64,

00:02:29.279 --> 00:02:31.615
the areas need to add up to that.

00:02:31.615 --> 00:02:35.426
Let’s make a list 
of possible rectangles and areas.

00:02:35.426 --> 00:02:37.637
To improve on our previous score,

00:02:37.637 --> 00:02:41.404
we can try to pick a range 
of values spanning 9 or less

00:02:41.404 --> 00:02:43.735
and adding up to 64.

00:02:43.735 --> 00:02:46.654
You’ll notice that some values 
are left out

00:02:46.654 --> 00:02:52.253
because rectangles like 1x13 
or 2x9 won’t fit on the canvas.

00:02:52.253 --> 00:02:53.465
You might also realize

00:02:53.465 --> 00:02:58.794
that if you use one of the rectangles 
with an odd area like 5, 9, or 15,

00:02:58.794 --> 00:03:03.217
you need to use another odd-value 
rectangle to get an even sum.

00:03:03.217 --> 00:03:06.633
With all that in mind, 
let’s see what works.

00:03:06.633 --> 00:03:11.651
Starting with area 20 or more 
puts us over the limit too quickly.

00:03:11.651 --> 00:03:16.633
But we can get to 64 using
rectangles in the 14-18 range,

00:03:16.633 --> 00:03:18.804
leaving out 15.

00:03:18.804 --> 00:03:21.722
Unfortunately, there’s no way 
to make them fit.

00:03:21.722 --> 00:03:24.291
Using the 2x7 leaves a gap

00:03:24.291 --> 00:03:28.202
that can only be filled 
by a rectangle with a width of 1.

00:03:28.202 --> 00:03:32.277
Going lower, the next range
that works is 8 to 14,

00:03:32.277 --> 00:03:34.797
leaving out the 3x3 square.

00:03:34.797 --> 00:03:36.946
This time, the pieces fit.

00:03:36.946 --> 00:03:38.823
That’s a score of 6.

00:03:38.823 --> 00:03:40.244
Can we do even better?

00:03:40.244 --> 00:03:41.339
No.

00:03:41.339 --> 00:03:45.587
We can get the same score 
by throwing out the 2x7 and 1x8

00:03:45.587 --> 00:03:50.050
and replacing them 
with a 3x3, 1x7, and 1x6.

00:03:50.050 --> 00:03:52.739
But if we go any lower down the list,

00:03:52.739 --> 00:03:54.517
the numbers become so small

00:03:54.517 --> 00:03:57.830
that we’d need a wider range 
of sizes to cover the canvas,

00:03:57.830 --> 00:04:00.136
which would increase the score.

00:04:00.136 --> 00:04:03.812
There’s no trick or formula here 
– just a bit of intuition.

00:04:03.812 --> 00:04:05.887
It's more art than science.

00:04:05.887 --> 00:04:07.344
And for larger grids,

00:04:07.344 --> 00:04:12.737
expert mathematicians aren’t sure whether
they’ve found the lowest possible scores.

00:04:12.737 --> 00:04:14.921
So how would you divide a 4x4,

00:04:14.921 --> 00:04:16.008
10x10,

00:04:16.008 --> 00:04:19.156
or 32x32 canvas?

00:04:19.156 --> 00:04:21.916
Give it a try 
and post your results in the comments.

