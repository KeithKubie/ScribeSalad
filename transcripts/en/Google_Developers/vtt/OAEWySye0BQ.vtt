WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.980
[MUSIC PLAYING]

00:00:04.980 --> 00:00:09.592
TIM SNEATH: Let's now
switch to the developer.

00:00:09.592 --> 00:00:12.910
Writing code can often
be a frustrating process,

00:00:12.910 --> 00:00:16.830
particularly when you're
working with a new framework.

00:00:16.830 --> 00:00:19.500
And perhaps one of the best
things about web development

00:00:19.500 --> 00:00:21.410
is how immediate it is.

00:00:21.410 --> 00:00:23.220
You can make
changes, and you can

00:00:23.220 --> 00:00:26.700
see them reflected in real
time without the painful edit,

00:00:26.700 --> 00:00:29.790
compile, run, debug
cycle that slows down

00:00:29.790 --> 00:00:31.920
traditional development.

00:00:31.920 --> 00:00:35.490
With Flutter, we've taken a lot
of inspiration from that model.

00:00:35.490 --> 00:00:37.230
And here to show
you how fun it can

00:00:37.230 --> 00:00:40.020
be to develop with
Flutter, Emily and Matt.

00:00:40.020 --> 00:00:40.620
Hey, you guys.

00:00:40.620 --> 00:00:41.495
EMILY FORTUNA: Hello.

00:00:41.495 --> 00:00:43.973
[APPLAUSE]

00:00:47.326 --> 00:00:50.180
MATT SULLIVAN: So
hopefully so far

00:00:50.180 --> 00:00:53.090
you've seen a whole bunch of
really cool and beautiful apps

00:00:53.090 --> 00:00:54.889
built in Flutter.

00:00:54.889 --> 00:00:57.180
Well, we want to show you
something a little different,

00:00:57.180 --> 00:01:00.710
what it's actually like to
build a Flutter app, what

00:01:00.710 --> 00:01:03.060
the developer
experience is like.

00:01:03.060 --> 00:01:04.760
So we've got a laptop.

00:01:04.760 --> 00:01:06.902
We have a mobile phone.

00:01:06.902 --> 00:01:08.360
And what we're
going to do is we're

00:01:08.360 --> 00:01:10.670
going to start to play
around with some code

00:01:10.670 --> 00:01:14.360
because one of the things
that we feel Flutter really

00:01:14.360 --> 00:01:17.840
gives you as a developer is a
really, really nice development

00:01:17.840 --> 00:01:18.510
experience.

00:01:18.510 --> 00:01:23.540
So we're going to mirror our
mobile phone onto our laptop.

00:01:23.540 --> 00:01:29.306
And we are going to get--
build ourselves an app.

00:01:29.306 --> 00:01:31.305
And it's all going to go
swimmingly because this

00:01:31.305 --> 00:01:33.506
is actually going to be live.

00:01:33.506 --> 00:01:35.717
EMILY FORTUNA: Got a
ADB not responding.

00:01:35.717 --> 00:01:37.550
MATT SULLIVAN: And we're
starting off really

00:01:37.550 --> 00:01:39.811
well because our ADB
is not responding.

00:01:39.811 --> 00:01:40.310
Yes.

00:01:40.310 --> 00:01:42.995
[APPLAUSE]

00:01:45.366 --> 00:01:47.740
I get to keep talking about
how wonderful the development

00:01:47.740 --> 00:01:48.420
experience is.

00:01:48.420 --> 00:01:49.075
EMILY FORTUNA: Why don't you--

00:01:49.075 --> 00:01:51.283
MATT SULLIVAN: Not necessarily
the plugging the phone

00:01:51.283 --> 00:01:52.817
and getting going experience.

00:01:52.817 --> 00:01:54.400
EMILY FORTUNA: Why
don't you tell them

00:01:54.400 --> 00:01:55.532
what we're going to build.

00:01:55.532 --> 00:01:56.350
MATT SULLIVAN: OK.

00:01:56.350 --> 00:02:03.940
So we're going to play
around with clocks

00:02:03.940 --> 00:02:07.450
because we feel that clocks
are underrated as apps.

00:02:07.450 --> 00:02:10.090
And we're going to actually
try to make them interesting.

00:02:10.090 --> 00:02:12.631
But the real reason we're doing
it is because what we did was

00:02:12.631 --> 00:02:15.500
initially, as you'll see any
second-- honestly I really,

00:02:15.500 --> 00:02:16.420
really promise--

00:02:16.420 --> 00:02:19.900
is that we put a very,
very basic app together.

00:02:19.900 --> 00:02:23.420
And what this app is
is a countdown app.

00:02:23.420 --> 00:02:26.710
And when we click go, it's
going to start counting down,

00:02:26.710 --> 00:02:29.530
and we didn't put a
reset button in there.

00:02:29.530 --> 00:02:31.270
So this is going
to count down to 0,

00:02:31.270 --> 00:02:34.415
and that is going to
keep us honest as to what

00:02:34.415 --> 00:02:35.290
we're going to build.

00:02:35.290 --> 00:02:37.220
And we're going to
see how this goes.

00:02:37.220 --> 00:02:39.591
So we're up and running.

00:02:39.591 --> 00:02:40.090
Great.

00:02:40.090 --> 00:02:42.940
We're going to take
about 30 minutes to--

00:02:42.940 --> 00:02:45.642
EMILY FORTUNA: 15.

00:02:45.642 --> 00:02:47.600
MATT SULLIVAN: We're
going to take 25 minutes--

00:02:47.600 --> 00:02:48.972
EMILY FORTUNA: 15.

00:02:48.972 --> 00:02:50.930
MATT SULLIVAN: We're
going to take 20 minutes--

00:02:50.930 --> 00:02:51.410
EMILY FORTUNA: 10!

00:02:51.410 --> 00:02:52.160
MATT SULLIVAN: Right, 15.

00:02:52.160 --> 00:02:53.540
We're going to take 15 minutes--

00:02:53.540 --> 00:02:56.622
EMILY FORTUNA: Let's split
the difference and make it 12.

00:02:56.622 --> 00:02:59.010
MATT SULLIVAN: Emily runs down.

00:02:59.010 --> 00:03:01.510
We're going to take 12 minutes,
and we're going to build a--

00:03:01.510 --> 00:03:02.634
and you've already started.

00:03:02.634 --> 00:03:03.290
OK.

00:03:03.290 --> 00:03:05.540
So, Emily, why don't
we explain roughly

00:03:05.540 --> 00:03:06.927
how our basic app works.

00:03:06.927 --> 00:03:07.760
EMILY FORTUNA: Yeah.

00:03:07.760 --> 00:03:12.830
So as Matt mentioned, we're--
we have a countdown app written

00:03:12.830 --> 00:03:15.391
in Flutter because as you
can see it's rather boring.

00:03:15.391 --> 00:03:17.390
But we're wondering what
if countdown apps could

00:03:17.390 --> 00:03:19.940
be fun as Flutter is fun,
and what if count apps could

00:03:19.940 --> 00:03:20.930
be beautiful.

00:03:20.930 --> 00:03:23.120
This is not yet beautiful.

00:03:23.120 --> 00:03:25.850
So let's take a look at
what we have written here.

00:03:25.850 --> 00:03:28.650
So we've got a simple clock.

00:03:28.650 --> 00:03:32.385
And if you ever come across a
clock in your lifetime, you--

00:03:32.385 --> 00:03:34.760
MATT SULLIVAN: I hope you're
not going to explain clocks.

00:03:34.760 --> 00:03:36.230
People get clocks.

00:03:36.230 --> 00:03:38.290
And we have 11 minutes
and 24 seconds left.

00:03:38.290 --> 00:03:42.500
EMILY FORTUNA: OK, so as
you will all experienced,

00:03:42.500 --> 00:03:44.030
clocks tick.

00:03:44.030 --> 00:03:46.760
Every second, a event--

00:03:46.760 --> 00:03:48.330
time is passing.

00:03:48.330 --> 00:03:50.000
And so what we
have here is we've

00:03:50.000 --> 00:03:54.110
got a stream that our
program can subscribe to,

00:03:54.110 --> 00:03:57.380
and every second an event occurs
saying the amount of remaining

00:03:57.380 --> 00:03:58.940
time that is left.

00:03:58.940 --> 00:04:03.360
And so we can subscribe
to the stream.

00:04:03.360 --> 00:04:08.160
And on our simple clock, we
can build based on that stream.

00:04:08.160 --> 00:04:09.710
So we have this stream builder.

00:04:09.710 --> 00:04:12.560
We are listening to
that countdown stream.

00:04:12.560 --> 00:04:17.029
And then based on each time
we get a update, AKA a second

00:04:17.029 --> 00:04:19.744
has passed, we're going
to print that text.

00:04:19.744 --> 00:04:21.410
MATT SULLIVAN: So the
moral of the story

00:04:21.410 --> 00:04:23.351
here is time is
inexorably counting down,

00:04:23.351 --> 00:04:24.350
and we need to get busy.

00:04:24.350 --> 00:04:26.120
So we're going to make
our lives even more

00:04:26.120 --> 00:04:27.869
harder because Emily
and I could not agree

00:04:27.869 --> 00:04:29.570
on what we were going to build.

00:04:29.570 --> 00:04:34.100
I wanted to build a retro clock
because I love my 70s chic.

00:04:34.100 --> 00:04:36.500
EMILY FORTUNA: And I
wanted to showcase the fact

00:04:36.500 --> 00:04:38.480
that we can use so
many different features

00:04:38.480 --> 00:04:40.340
with our mobile phones.

00:04:40.340 --> 00:04:42.080
So we're going to be
building a photo app

00:04:42.080 --> 00:04:44.165
because interactive
timers are the best.

00:04:44.165 --> 00:04:46.370
MATT SULLIVAN: So in 10
minutes and 15 seconds,

00:04:46.370 --> 00:04:49.314
we are going to
try to build two.

00:04:49.314 --> 00:04:51.230
And the reason again
we're using the stream is

00:04:51.230 --> 00:04:52.927
because we can
actually build these,

00:04:52.927 --> 00:04:54.510
and we can combine
them into this app.

00:04:54.510 --> 00:04:57.222
And we can use the same
timer, so we cannot cheat.

00:04:57.222 --> 00:04:58.430
So where am I going to start?

00:04:58.430 --> 00:04:59.388
Let's take a look here.

00:04:59.388 --> 00:05:01.290
Let's close that down.

00:05:01.290 --> 00:05:04.220
And I am starting here with
basically a blank file.

00:05:04.220 --> 00:05:05.361
I have nothing.

00:05:05.361 --> 00:05:06.860
And I'm going to
start with a widget

00:05:06.860 --> 00:05:09.920
because in Flutter everything
begins with a widget.

00:05:09.920 --> 00:05:11.630
In the beginning,
there is a widget,

00:05:11.630 --> 00:05:14.405
and I'm going to call
this retro clock.

00:05:14.405 --> 00:05:16.640
EMILY FORTUNA: And as you
can see we have this widget

00:05:16.640 --> 00:05:17.832
has a build method.

00:05:17.832 --> 00:05:19.790
This is what's gets called
when you're drawing.

00:05:19.790 --> 00:05:21.680
They would particular
widget to screen,

00:05:21.680 --> 00:05:23.490
which is not yet being drawn.

00:05:23.490 --> 00:05:24.970
And yeah.

00:05:24.970 --> 00:05:28.027
MATT SULLIVAN: So what
screams 70s chic to you?

00:05:28.027 --> 00:05:29.360
EMILY FORTUNA: Orange and brown.

00:05:29.360 --> 00:05:32.032
MATT SULLIVAN: Orange and brown
is one but also wood grain.

00:05:32.032 --> 00:05:33.740
So we're going to add
some wood grain in.

00:05:33.740 --> 00:05:35.160
We're going to start there.

00:05:35.160 --> 00:05:36.875
I bet you all thought you were
going to see something awesome,

00:05:36.875 --> 00:05:39.050
and now you're going to
get retro wood grain.

00:05:39.050 --> 00:05:42.422
And what I'm going to do is
I'm going to put in a stack.

00:05:42.422 --> 00:05:43.880
And the reason I'm
using a stack is

00:05:43.880 --> 00:05:46.220
that we can layer widgets on
top of each other with a stack.

00:05:46.220 --> 00:05:47.395
And I'm going to start
with the wood grain.

00:05:47.395 --> 00:05:48.186
EMILY FORTUNA: Yes.

00:05:48.186 --> 00:05:51.070
And so right now this
stack has one widget in it,

00:05:51.070 --> 00:05:55.004
but spoiler alert, there's
going to be more widgets on top.

00:05:55.004 --> 00:05:56.420
MATT SULLIVAN: And
because we want

00:05:56.420 --> 00:05:58.460
to be able to see all
of our clocks, what

00:05:58.460 --> 00:05:59.555
are we going to use?

00:05:59.555 --> 00:06:01.400
EMILY FORTUNA: Yes,
we'll add a-- we'll

00:06:01.400 --> 00:06:04.400
wrap this in a page
view, which will allow us

00:06:04.400 --> 00:06:06.380
to swipe between
the different clocks

00:06:06.380 --> 00:06:08.990
since want to be able
to see all of them

00:06:08.990 --> 00:06:10.050
as our time counts down.

00:06:10.050 --> 00:06:11.180
MATT SULLIVAN: Yes, so
going to wrap page view.

00:06:11.180 --> 00:06:12.890
We're going to put
retro clock first.

00:06:12.890 --> 00:06:15.341
EMILY FORTUNA: Bold move.

00:06:15.341 --> 00:06:16.820
MATT SULLIVAN: And
lo and behold--

00:06:19.640 --> 00:06:21.270
oh, is this disconnected?

00:06:21.270 --> 00:06:22.480
EMILY FORTUNA: It did!

00:06:22.480 --> 00:06:24.650
MATT SULLIVAN: It
did disconnect.

00:06:24.650 --> 00:06:27.180
This is going so well.

00:06:27.180 --> 00:06:28.880
Oh, this is awesome.

00:06:28.880 --> 00:06:31.213
I knew we should have
used the iOS simulator.

00:06:31.213 --> 00:06:34.320
[LAUGHTER]

00:06:34.320 --> 00:06:37.640
Bear with us while we
just reconnect here.

00:06:37.640 --> 00:06:41.240
Now you see the problem here
is that we're not only counting

00:06:41.240 --> 00:06:41.780
down.

00:06:41.780 --> 00:06:42.920
So the app restarts.

00:06:42.920 --> 00:06:45.170
It doesn't start at the same--

00:06:45.170 --> 00:06:47.900
or at a new time or
at the beginning time.

00:06:47.900 --> 00:06:50.190
We're persisting
this to the device.

00:06:50.190 --> 00:06:54.000
So it's probably still clicking
down at this moment in time.

00:06:54.000 --> 00:06:56.750
So we're not going
to get anymore

00:06:56.750 --> 00:06:58.925
extra time to work in this.

00:06:58.925 --> 00:07:00.800
We're going to be able
to constrain ourselves

00:07:00.800 --> 00:07:03.900
even further.

00:07:03.900 --> 00:07:06.196
So with Flutter,
even though it isn't

00:07:06.196 --> 00:07:08.570
quite obvious to you at the
moment, what you can actually

00:07:08.570 --> 00:07:11.410
do is you can develop really
nicely with a phone plugged in.

00:07:11.410 --> 00:07:13.160
And you can hot reload
over to that phone,

00:07:13.160 --> 00:07:14.540
and it could be iOS or Android.

00:07:14.540 --> 00:07:19.360
We work equally well with
emulators and simulators.

00:07:19.360 --> 00:07:20.990
And I even do
funky things like--

00:07:20.990 --> 00:07:24.080
[LAUGHTER]

00:07:24.080 --> 00:07:24.890
Did I mess up?

00:07:24.890 --> 00:07:26.630
EMILY FORTUNA: You added a
few too many parentheses.

00:07:26.630 --> 00:07:27.845
MATT SULLIVAN: Did I add
too many parentheses?

00:07:27.845 --> 00:07:28.430
EMILY FORTUNA: Yes.

00:07:28.430 --> 00:07:29.420
MATT SULLIVAN: Did
I actually do that?

00:07:29.420 --> 00:07:30.440
EMILY FORTUNA: Yes.

00:07:30.440 --> 00:07:31.076
Although that--

00:07:31.076 --> 00:07:33.869
MATT SULLIVAN: Why
do I have a job.

00:07:33.869 --> 00:07:35.410
EMILY FORTUNA: Yeah,
creating empty--

00:07:35.410 --> 00:07:36.951
MATT SULLIVAN: I
used to write lists.

00:07:36.951 --> 00:07:38.244
This was easy back then.

00:07:38.244 --> 00:07:39.160
EMILY FORTUNA: Let's--

00:07:39.160 --> 00:07:40.460
MATT SULLIVAN: Can
I keep going now?

00:07:40.460 --> 00:07:41.020
EMILY FORTUNA: Yes.

00:07:41.020 --> 00:07:41.980
MATT SULLIVAN:
Are we doing that?

00:07:41.980 --> 00:07:42.456
Do you trust me?

00:07:42.456 --> 00:07:42.910
EMILY FORTUNA:
It's re-launching.

00:07:42.910 --> 00:07:45.410
MATT SULLIVAN: Will I actually
get back at the keyboard now?

00:07:45.410 --> 00:07:47.220
EMILY FORTUNA: Yeah.

00:07:47.220 --> 00:07:47.720
Go for it.

00:07:47.720 --> 00:07:48.680
MATT SULLIVAN: OK.

00:07:48.680 --> 00:07:49.460
I'm going for it.

00:07:49.460 --> 00:07:49.959
Wow.

00:07:49.959 --> 00:07:52.910
EMILY FORTUNA: So while that's
reloading, as we mentioned,

00:07:52.910 --> 00:07:54.444
we've stored our time in.

00:07:54.444 --> 00:07:55.110
The preferences.

00:07:55.110 --> 00:07:55.390
Oh, there we go.

00:07:55.390 --> 00:07:56.473
MATT SULLIVAN: Oh dear me!

00:07:56.473 --> 00:07:57.560
It's wood grain.

00:07:57.560 --> 00:07:59.040
Yes.

00:07:59.040 --> 00:07:59.540
Yeah, we go.

00:07:59.540 --> 00:08:00.664
Yeah, wood grain wonderful.

00:08:00.664 --> 00:08:02.780
[APPLAUSE]

00:08:02.780 --> 00:08:05.120
EMILY FORTUNA: If only we
knew what time it was, Matt.

00:08:05.120 --> 00:08:07.120
MATT SULLIVAN: If only
we knew what time it was,

00:08:07.120 --> 00:08:07.990
it's too late.

00:08:07.990 --> 00:08:10.190
And so what I'm going to
do is I am going to-- here,

00:08:10.190 --> 00:08:12.290
I'm going to put
back in simple clock

00:08:12.290 --> 00:08:15.110
because with simple clock,
everything is a widget,

00:08:15.110 --> 00:08:16.670
and we can reuse widgets.

00:08:16.670 --> 00:08:19.670
And lo and behold, we have
an incredibly difficult time

00:08:19.670 --> 00:08:22.960
that we can't read, so let
me style that up a bit.

00:08:22.960 --> 00:08:25.340
And we will put that in.

00:08:25.340 --> 00:08:28.250
So we have eight minutes, and
we've gotten to wood grain

00:08:28.250 --> 00:08:29.430
on a clock.

00:08:29.430 --> 00:08:31.850
EMILY FORTUNA: I think you've
achieved Swedish minimalism.

00:08:31.850 --> 00:08:32.960
MATT SULLIVAN: I think.

00:08:36.289 --> 00:08:37.080
So let me fix that.

00:08:37.080 --> 00:08:39.187
I'm going to put in
a clock frame widget.

00:08:39.187 --> 00:08:41.520
And in my clock frame widget,
what I'm going to use here

00:08:41.520 --> 00:08:44.752
is I'm going to use a card.

00:08:44.752 --> 00:08:45.630
EMILY FORTUNA: Yeah.

00:08:45.630 --> 00:08:47.316
So a card is--

00:08:47.316 --> 00:08:48.440
it's just like a container.

00:08:48.440 --> 00:08:51.200
You can give it color,
and it has some elevation.

00:08:51.200 --> 00:08:53.000
It has a nice edge--

00:08:53.000 --> 00:08:54.770
you can around the edges.

00:08:54.770 --> 00:08:55.521
Make it stand out.

00:08:55.521 --> 00:08:57.728
MATT SULLIVAN: Exactly and
again, I can just swap out

00:08:57.728 --> 00:08:59.300
my widgets as I build this up.

00:08:59.300 --> 00:09:00.050
And there we go.

00:09:00.050 --> 00:09:02.250
We have a card, which
is kind of boring.

00:09:02.250 --> 00:09:04.310
So let's make a
little more framing

00:09:04.310 --> 00:09:08.300
so I can give it a shape,
and I can give it the border.

00:09:08.300 --> 00:09:11.890
And this border-- border color,
some roundness, and there we

00:09:11.890 --> 00:09:12.390
go.

00:09:12.390 --> 00:09:13.670
OK so that's looking
more clock like right?

00:09:13.670 --> 00:09:15.440
EMILY FORTUNA: That
is although I thought

00:09:15.440 --> 00:09:16.970
this is just a retro
clock, and this

00:09:16.970 --> 00:09:18.845
is looking pretty darn digital.

00:09:18.845 --> 00:09:21.262
MATT SULLIVAN: OK, so I can
do something about that.

00:09:21.262 --> 00:09:23.720
I can create you another widget
and start to stack them up,

00:09:23.720 --> 00:09:25.777
and this time I'm going
to create a clock face.

00:09:25.777 --> 00:09:27.860
And what I'm going to do
now is I'm going to use--

00:09:27.860 --> 00:09:29.860
and cheat-- and I'm going
to use a package built

00:09:29.860 --> 00:09:30.935
by one of our community.

00:09:30.935 --> 00:09:34.340
EMILY FORTUNA: Yeah, so
someone else in our community

00:09:34.340 --> 00:09:37.610
wrote this really cool
package called Flip Panel.

00:09:37.610 --> 00:09:40.020
And Matt wrote some
styling around that,

00:09:40.020 --> 00:09:42.294
and he has a variant
called Flip Digit.

00:09:42.294 --> 00:09:43.210
And we are using that.

00:09:43.210 --> 00:09:44.751
MATT SULLIVAN: But
we have a problem.

00:09:44.751 --> 00:09:46.640
Because I'm no longer
using Retro Clock--

00:09:46.640 --> 00:09:49.010
Simple Clock, so I don't
actually have a clock anymore.

00:09:49.010 --> 00:09:51.596
So I need access to
that countdown stream.

00:09:51.596 --> 00:09:53.900
EMILY FORTUNA: So, yeah,
Matt is going to access--

00:09:53.900 --> 00:09:56.730
use a InheritedWidget to
pull down that stream so we

00:09:56.730 --> 00:09:59.220
can listen and receive updates.

00:09:59.220 --> 00:10:01.740
MATT SULLIVAN: And I'm going
to swap out my Simple Clock now

00:10:01.740 --> 00:10:03.015
with my clock face.

00:10:05.560 --> 00:10:07.570
And there we go.

00:10:07.570 --> 00:10:08.792
Best clock ever.

00:10:08.792 --> 00:10:09.861
[APPLAUSE]

00:10:09.861 --> 00:10:10.360
Wait.

00:10:10.360 --> 00:10:11.310
Wait, there's more.

00:10:11.310 --> 00:10:12.179
We're not done yet.

00:10:12.179 --> 00:10:13.720
EMILY FORTUNA: Yeah,
but I would like

00:10:13.720 --> 00:10:15.070
to see how many minutes we have.

00:10:15.070 --> 00:10:16.300
MATT SULLIVAN: You don't want
to see how many minutes we

00:10:16.300 --> 00:10:17.814
have left, seriously.

00:10:17.814 --> 00:10:18.980
EMILY FORTUNA: You're right.

00:10:18.980 --> 00:10:19.480
I don't.

00:10:19.480 --> 00:10:20.920
Let's just -- yeah, OK, fine.

00:10:20.920 --> 00:10:22.690
MATT SULLIVAN: Can I
close my parentheses?

00:10:22.690 --> 00:10:24.880
No I can't.

00:10:24.880 --> 00:10:27.311
So let's reuse that.

00:10:27.311 --> 00:10:28.810
So what I'm doing
here is I'm simply

00:10:28.810 --> 00:10:31.910
creating a row so I can lay
things out horizontally.

00:10:31.910 --> 00:10:33.940
And I'm going to put in
four flip digits, one

00:10:33.940 --> 00:10:37.840
for each the tens, the
seconds, the ones and what not.

00:10:37.840 --> 00:10:39.350
And I'm going to save that.

00:10:39.350 --> 00:10:40.270
And there we go.

00:10:40.270 --> 00:10:43.030
I think at this point,
this is retro enough.

00:10:43.030 --> 00:10:43.960
EMILY FORTUNA: Yeah.

00:10:43.960 --> 00:10:44.824
Yeah, it's good.

00:10:44.824 --> 00:10:46.490
And I'm ready to take
over the keyboard.

00:10:46.490 --> 00:10:48.073
MATT SULLIVAN: I'm
getting kicked off.

00:10:48.073 --> 00:10:49.050
OK, fair enough.

00:10:49.050 --> 00:10:49.550
Good.

00:10:49.550 --> 00:10:54.100
So hopefully you've seen if
you balance your parentheses,

00:10:54.100 --> 00:10:56.240
coding Flutter is
relatively straightforward,

00:10:56.240 --> 00:10:57.810
composing widgets together.

00:10:57.810 --> 00:11:00.460
And what I've done is I've
created something with--

00:11:00.460 --> 00:11:02.440
basically by styling
up a bunch of pieces,

00:11:02.440 --> 00:11:04.750
a little bit of animation
of using a package.

00:11:04.750 --> 00:11:06.625
We're going to get a
little more advanced now

00:11:06.625 --> 00:11:09.689
because what Emily wants
to build is a photo clock.

00:11:09.689 --> 00:11:10.480
EMILY FORTUNA: Yes.

00:11:10.480 --> 00:11:11.980
MATT SULLIVAN: So
what Emily's using

00:11:11.980 --> 00:11:14.260
here is she's using a
stateful widget, which is--

00:11:14.260 --> 00:11:15.850
I was using stateless
because I didn't

00:11:15.850 --> 00:11:17.317
have any state to follow.

00:11:17.317 --> 00:11:19.150
Emily is going to have
a little bit of state

00:11:19.150 --> 00:11:22.270
to manage later on, and we'll
get back to that in a minute

00:11:22.270 --> 00:11:23.650
when it becomes obvious.

00:11:23.650 --> 00:11:25.390
So we have this stateful widget.

00:11:25.390 --> 00:11:28.620
And inside what are we doing
when we run this thing?

00:11:28.620 --> 00:11:31.750
EMILY FORTUNA: Yeah, so when
you-- with stateful widgets,

00:11:31.750 --> 00:11:35.830
you had this init state
method that you can call when

00:11:35.830 --> 00:11:39.040
the first time that a
stateful widget is called.

00:11:39.040 --> 00:11:39.540
Hold on.

00:11:39.540 --> 00:11:40.630
I'm just going to
point that clock here

00:11:40.630 --> 00:11:41.810
so we know how we're doing.

00:11:41.810 --> 00:11:44.350
MATT SULLIVAN: So you can
see here that we have--

00:11:44.350 --> 00:11:46.240
we're using the
camera plugin, which

00:11:46.240 --> 00:11:49.960
is one of the plugins built
by the Flutter team, which

00:11:49.960 --> 00:11:53.170
gives you full access to all
of the cameras and camera

00:11:53.170 --> 00:11:56.866
activities, slash things you
can do on both iOS and Android.

00:11:56.866 --> 00:11:58.240
And what we want
to do is we want

00:11:58.240 --> 00:12:00.070
to take a photo every
minute, and we really

00:12:00.070 --> 00:12:02.611
want to hurry up because we only
have 4 and 1/2 of them left.

00:12:02.611 --> 00:12:05.260
So we're going to--

00:12:05.260 --> 00:12:07.300
Emily's done some funky
math to basically say

00:12:07.300 --> 00:12:11.465
every time we hit 0 on the
seconds, take a picture.

00:12:11.465 --> 00:12:13.340
We're doing the right
thing with permissions?

00:12:13.340 --> 00:12:16.474
EMILY FORTUNA: Yeah, what you
saw is I initialized the camera

00:12:16.474 --> 00:12:18.890
and so it was asking me for
permissions to use the camera.

00:12:18.890 --> 00:12:21.400
MATT SULLIVAN: And so
technically in seven seconds,

00:12:21.400 --> 00:12:22.780
we're going to
get a photo taken.

00:12:22.780 --> 00:12:25.810
So we shall do our first selfie.

00:12:25.810 --> 00:12:28.660
And by the power of Flutter,
there was a photo taken.

00:12:28.660 --> 00:12:30.190
Isn't that wonderful?

00:12:30.190 --> 00:12:34.189
We have our word for it, so
let's actually show something.

00:12:34.189 --> 00:12:35.230
EMILY FORTUNA: All right.

00:12:35.230 --> 00:12:37.130
So I'm going to put
this in a column

00:12:37.130 --> 00:12:40.450
so we can put the clock
and then the image

00:12:40.450 --> 00:12:42.250
that we took just below it.

00:12:42.250 --> 00:12:46.820
And then I wrote a widget
ahead of time called Film Strip

00:12:46.820 --> 00:12:47.980
that's--

00:12:47.980 --> 00:12:51.820
so remember we're talking
about streams for the time.

00:12:51.820 --> 00:12:55.430
We also set up a stream that is
listening to the file system.

00:12:55.430 --> 00:12:59.410
So when we take a photo, we
are writing to init file system

00:12:59.410 --> 00:13:00.790
and we have a listener.

00:13:00.790 --> 00:13:03.940
And then when that
is updated, we

00:13:03.940 --> 00:13:06.604
tell Flutter that
we need to rebuild.

00:13:06.604 --> 00:13:07.770
So I'm going to add that in.

00:13:07.770 --> 00:13:08.770
MATT SULLIVAN: We're
going to add this in.

00:13:08.770 --> 00:13:09.670
We're using a column here.

00:13:09.670 --> 00:13:12.128
I used the row earlier, so this
should vertically stall it.

00:13:12.128 --> 00:13:14.140
And fingers crossed,
we have a selfie.

00:13:14.140 --> 00:13:16.570
[APPLAUSE]

00:13:16.570 --> 00:13:18.754
So this is great.

00:13:18.754 --> 00:13:20.462
We can only-- well,
we're going to need--

00:13:20.462 --> 00:13:21.580
EMILY FORTUNA: There's
another picture coming up.

00:13:21.580 --> 00:13:22.540
MATT SULLIVAN: All right,
so I'm going to get in here.

00:13:22.540 --> 00:13:23.260
I'm going to get my selfie.

00:13:23.260 --> 00:13:24.343
This is going to be great.

00:13:24.343 --> 00:13:27.976
So we got 3, 2, 1 and photos.

00:13:27.976 --> 00:13:29.908
[LAUGHTER]

00:13:29.908 --> 00:13:32.806
[APPLAUSE]

00:13:32.806 --> 00:13:34.749
We're going to make this
so we can scroll back

00:13:34.749 --> 00:13:35.790
to the other photo right?

00:13:35.790 --> 00:13:36.581
EMILY FORTUNA: Yes.

00:13:36.581 --> 00:13:39.270
Oh, well, yes, because I
like the first one better.

00:13:39.270 --> 00:13:42.520
So let us switch this is out.

00:13:42.520 --> 00:13:44.520
Right now we're just
checking-- we're showing

00:13:44.520 --> 00:13:46.500
the first of the film images.

00:13:46.500 --> 00:13:50.370
So instead, we're going
to use a list view.

00:13:50.370 --> 00:13:52.740
And we're going to
scroll horizontally

00:13:52.740 --> 00:13:55.249
through all of the photo paths.

00:13:55.249 --> 00:13:56.790
MATT SULLIVAN: And
so we have managed

00:13:56.790 --> 00:14:01.839
to squeeze in stacks,
columns, rows, and list views

00:14:01.839 --> 00:14:03.630
almost by accident,
but we got them all in.

00:14:03.630 --> 00:14:05.620
So now we can scroll
through these photos,

00:14:05.620 --> 00:14:07.260
and this is great.

00:14:07.260 --> 00:14:09.640
And we're starting
to get somewhere.

00:14:09.640 --> 00:14:11.199
But we're not quite
done yet are we.

00:14:11.199 --> 00:14:13.240
EMILY FORTUNA: No, I'm
going to add some styling.

00:14:13.240 --> 00:14:13.680
So first--

00:14:13.680 --> 00:14:15.090
MATT SULLIVAN: Even though
I eat up all your time,

00:14:15.090 --> 00:14:16.410
you seem to be making
some up, and we still

00:14:16.410 --> 00:14:18.305
have 2 minutes and
10 seconds left.

00:14:18.305 --> 00:14:21.420
EMILY FORTUNA: Yes.

00:14:21.420 --> 00:14:23.220
So first I'm going to
add some images just

00:14:23.220 --> 00:14:28.580
to make it look a little
more like a camera.

00:14:28.580 --> 00:14:30.540
Uh oh.

00:14:30.540 --> 00:14:32.346
I'm glad that Dash could visit.

00:14:32.346 --> 00:14:33.470
MATT SULLIVAN: There we go.

00:14:33.470 --> 00:14:35.886
EMILY FORTUNA: She may have
even visited the haberdashery.

00:14:39.530 --> 00:14:44.675
So I'm also going to set some
styling to make this fill in.

00:14:44.675 --> 00:14:45.920
Let's see.

00:14:45.920 --> 00:14:48.145
I've got a nice font.

00:14:48.145 --> 00:14:50.270
MATT SULLIVAN: So we're
going to style up the time,

00:14:50.270 --> 00:14:52.311
and we're going to make
it not look super modern.

00:14:52.311 --> 00:14:54.660
We're going to go art deco.

00:14:54.660 --> 00:14:56.820
This is going to
be fairly eclectic.

00:14:56.820 --> 00:14:59.400
So we have the
time ticking down.

00:14:59.400 --> 00:15:03.000
We have some styling around it.

00:15:03.000 --> 00:15:04.230
What else do we need to do?

00:15:04.230 --> 00:15:06.240
Oh, we're going to put in a--

00:15:06.240 --> 00:15:08.720
we have two cameras in
this phone, not one.

00:15:08.720 --> 00:15:10.900
And we can access both of them.

00:15:10.900 --> 00:15:14.170
So what we can do here is
we can pop in a button,

00:15:14.170 --> 00:15:15.617
and that's going to let us--

00:15:15.617 --> 00:15:17.700
EMILY FORTUNA: Switch the
direction of the camera.

00:15:17.700 --> 00:15:19.783
MATT SULLIVAN: Switch the
direction of the camera.

00:15:19.783 --> 00:15:21.690
EMILY FORTUNA: So it's
pretty easy button.

00:15:21.690 --> 00:15:24.930
You can see here, when we when
the can't-- when the button

00:15:24.930 --> 00:15:27.690
gets pressed, we are going
to switch the direction

00:15:27.690 --> 00:15:28.620
of the camera.

00:15:28.620 --> 00:15:31.560
And this is where the
statefulness of the widget

00:15:31.560 --> 00:15:33.040
comes into place.

00:15:33.040 --> 00:15:35.790
We're setting the state,
and here I'll show you.

00:15:35.790 --> 00:15:36.690
So you see that?

00:15:36.690 --> 00:15:41.550
If you tap the button, you
can see the text will change.

00:15:41.550 --> 00:15:43.470
And so it's changing state.

00:15:43.470 --> 00:15:46.060
Now the alignment
is a little wonky,

00:15:46.060 --> 00:15:47.280
so I'm going to fix that.

00:15:47.280 --> 00:15:49.440
Make it centered.

00:15:49.440 --> 00:15:51.650
And there's one more
thing we're going to do.

00:15:51.650 --> 00:15:52.500
MATT SULLIVAN: We
have 35 seconds.

00:15:52.500 --> 00:15:53.686
What are we going to do?

00:15:53.686 --> 00:15:55.500
EMILY FORTUNA: So
there's a really cool--

00:15:55.500 --> 00:16:00.990
another third-party plug-in that
has this explosion animation.

00:16:00.990 --> 00:16:02.317
And so I--

00:16:02.317 --> 00:16:04.650
MATT SULLIVAN: We're going
to make our app self-destruct

00:16:04.650 --> 00:16:05.295
in 22 seconds.

00:16:05.295 --> 00:16:06.560
EMILY FORTUNA: Yes.

00:16:06.560 --> 00:16:07.177
So I wrote--

00:16:07.177 --> 00:16:09.510
MATT SULLIVAN: Not that we
made it self-destruct already

00:16:09.510 --> 00:16:10.060
at least twice.

00:16:10.060 --> 00:16:10.490
EMILY FORTUNA: Yes.

00:16:10.490 --> 00:16:11.150
Yes.

00:16:11.150 --> 00:16:12.900
Well-- so we're going to--

00:16:12.900 --> 00:16:13.680
MATT SULLIVAN: Are
we going to make it?

00:16:13.680 --> 00:16:15.263
EMILY FORTUNA: We're
going to make it.

00:16:15.263 --> 00:16:16.200
MATT SULLIVAN: OK.

00:16:16.200 --> 00:16:17.070
We got 10 seconds.

00:16:17.070 --> 00:16:18.695
EMILY FORTUNA: We
are going to make it.

00:16:18.695 --> 00:16:20.730
MATT SULLIVAN:
House lights please.

00:16:20.730 --> 00:16:23.100
I want everybody
raise their arms--

00:16:23.100 --> 00:16:25.570
3, 2, 1.

00:16:25.570 --> 00:16:26.175
Say cheese.

00:16:26.175 --> 00:16:27.837
AUDIENCE: Cheese.

00:16:27.837 --> 00:16:29.170
MATT SULLIVAN: Oh, look at that!

00:16:29.170 --> 00:16:30.010
There we go!

00:16:30.010 --> 00:16:32.950
[APPLAUSE]

00:16:32.950 --> 00:16:33.690
Fireworks!

00:16:38.452 --> 00:16:39.428
EMILY FORTUNA: Phew!

00:16:44.520 --> 00:16:46.770
MATT SULLIVAN: We've subjected
you enough life coding,

00:16:46.770 --> 00:16:48.527
so we'll stop it there.

00:16:48.527 --> 00:16:49.360
Thank you very much.

00:16:49.360 --> 00:16:51.840
EMILY FORTUNA: Get
you enough adrenaline.

00:16:51.840 --> 00:16:52.580
Rest easy now.

00:16:52.580 --> 00:16:55.460
[APPLAUSE]

00:16:58.340 --> 00:17:01.920
TIM SNEATH: I have so much
respect for those guys

00:17:01.920 --> 00:17:04.904
to pull that off in that
length of time is just amazing.

00:17:07.454 --> 00:17:09.829
So over the last couple of
months, we spent a lot of time

00:17:09.829 --> 00:17:11.720
talking with companies
and developers who're

00:17:11.720 --> 00:17:13.700
building with Flutter
and learning a little bit

00:17:13.700 --> 00:17:15.210
about how they're using it.

00:17:15.210 --> 00:17:18.260
And in particular as
we've got towards 1.0,

00:17:18.260 --> 00:17:20.780
we were interested to
see what things did we

00:17:20.780 --> 00:17:23.599
need to continue to invest in.

00:17:23.599 --> 00:17:25.810
And so there's a bunch
of things that we've

00:17:25.810 --> 00:17:31.220
been working on and adding
over the last couple of months,

00:17:31.220 --> 00:17:33.910
particularly in the
run up to Flutter 1.0.

00:17:33.910 --> 00:17:38.320
So firstly developers told
us, as Will mentioned,

00:17:38.320 --> 00:17:41.110
they wanted to see
support or better support

00:17:41.110 --> 00:17:44.170
for building apps that
fully model the iOS design

00:17:44.170 --> 00:17:45.680
guidelines.

00:17:45.680 --> 00:17:48.400
So we've added lots more
widgets and classes that

00:17:48.400 --> 00:17:51.160
make it possible to build
those pixel perfect experiences

00:17:51.160 --> 00:17:52.810
for iPhone.

00:17:52.810 --> 00:17:54.880
Secondly, as Phillip
showed, developers

00:17:54.880 --> 00:17:57.160
want to be able to
integrate other platform

00:17:57.160 --> 00:17:59.450
content into Flutter apps.

00:17:59.450 --> 00:18:01.420
So we've done the
heavy lifting work

00:18:01.420 --> 00:18:04.810
to bring this directly into
the Flutter compositor,

00:18:04.810 --> 00:18:08.350
and so that's how you
saw the Google Maps work.

00:18:08.350 --> 00:18:11.440
And in the last week we've
published developer previews

00:18:11.440 --> 00:18:15.760
of a Google Maps plugin and
also a web browser plugin.

00:18:15.760 --> 00:18:18.010
And then we heard loud
and clear the developers

00:18:18.010 --> 00:18:21.190
want to be able to add
Flutter to existing apps

00:18:21.190 --> 00:18:24.311
rather than just creating
new apps with Flutter.

00:18:24.311 --> 00:18:26.742
This has actually been
possible for a while.

00:18:26.742 --> 00:18:29.200
But we've done a lot of work
over the last couple of months

00:18:29.200 --> 00:18:34.210
to improve the tooling, the
build process, the debugability

00:18:34.210 --> 00:18:35.620
of this scenario.

00:18:35.620 --> 00:18:37.540
And we'll continue to
invest in this space

00:18:37.540 --> 00:18:39.920
over the next couple of months.

00:18:39.920 --> 00:18:42.130
And, of course, that's not
all that's in Flutter 1.0.

00:18:42.130 --> 00:18:44.140
We fixed a bunch of bugs.

00:18:44.140 --> 00:18:47.350
We've continued to
refine and polish it.

00:18:47.350 --> 00:18:49.210
One feature I'm
particularly proud of

00:18:49.210 --> 00:18:52.060
is adding localization
of the UI content

00:18:52.060 --> 00:18:57.580
to 50 languages from Arabic
to Vietnamese, Marathi

00:18:57.580 --> 00:18:58.980
to Swiss German.

00:18:58.980 --> 00:19:01.360
We even support English.

00:19:01.360 --> 00:19:04.720
Many of these have come thanks
to community contributions,

00:19:04.720 --> 00:19:08.850
so thank you if you've been
involved in that process also.

00:19:08.850 --> 00:19:14.240
Lastly, Flutter 1.0
includes Dart 2.1,

00:19:14.240 --> 00:19:16.120
which adds additional
compile time

00:19:16.120 --> 00:19:21.700
checking, increased performance,
and reduced code size.

00:19:21.700 --> 00:19:24.580
A recent study of
GitHub pull requests

00:19:24.580 --> 00:19:27.880
shows that Dart is one of the
fastest growing languages,

00:19:27.880 --> 00:19:31.270
and that's also backed up by
the latest edition of the TIOBE

00:19:31.270 --> 00:19:32.590
index.

00:19:32.590 --> 00:19:34.480
And as you'll see later,
Dart gives Flutter

00:19:34.480 --> 00:19:38.815
unique advantages because of
its versatility as a platform.

00:19:42.470 --> 00:19:43.820
So we've done design.

00:19:43.820 --> 00:19:45.360
We've done develop.

00:19:45.360 --> 00:19:46.790
We're now going
to move on to talk

00:19:46.790 --> 00:19:49.640
about another part of
the development process,

00:19:49.640 --> 00:19:51.800
connecting to external services.

00:19:54.011 --> 00:19:55.760
As I mentioned earlier,
one of the reasons

00:19:55.760 --> 00:19:58.430
why Flutter is so productive
for mobile development

00:19:58.430 --> 00:20:01.170
is the package ecosystem.

00:20:01.170 --> 00:20:05.130
We deliberately made the core
of Flutter as small as possible,

00:20:05.130 --> 00:20:07.680
and we use the plug-in
model ourselves to shape

00:20:07.680 --> 00:20:09.840
new features out of band.

00:20:09.840 --> 00:20:13.710
We already have over
1,000 Flutter plugins,

00:20:13.710 --> 00:20:16.380
covering everything
from video playback

00:20:16.380 --> 00:20:21.660
to Facebook authentication,
SQL lite to graph QL.

00:20:21.660 --> 00:20:24.330
These packages are
fully open source.

00:20:24.330 --> 00:20:26.760
Many of them are contributed
by the community.

00:20:26.760 --> 00:20:31.580
And they make it easy to add
support for new services.

00:20:31.580 --> 00:20:35.040
For mobile developers,
Firebase provides an array

00:20:35.040 --> 00:20:39.860
of key app services such
as analytics, databases,

00:20:39.860 --> 00:20:45.010
sign in, push notifications,
and crash reporting.

00:20:45.010 --> 00:20:46.920
Most of them are
already supported

00:20:46.920 --> 00:20:49.830
with first-party
Flutter integrations.

00:20:49.830 --> 00:20:53.990
And further 1.0 increases
this support further.

00:20:53.990 --> 00:20:56.180
To show how these
plug-ins come together

00:20:56.180 --> 00:20:58.340
to make Flutter apps
even more connected,

00:20:58.340 --> 00:21:01.450
please welcome Maurice
Parrish to the stage.

00:21:01.450 --> 00:21:02.600
Maurice, great to see you.

00:21:02.600 --> 00:21:03.933
MAURICE PARRISH: Thank you, Tim.

00:21:06.979 --> 00:21:08.020
Let's get logged in here.

00:21:10.570 --> 00:21:12.010
Make sure everything's
connected.

00:21:15.502 --> 00:21:17.460
So it looks like we went
out to reconnect this.

00:21:22.540 --> 00:21:23.040
Here we go.

00:21:23.040 --> 00:21:24.740
Perfect.

00:21:24.740 --> 00:21:25.529
Hey, everyone.

00:21:25.529 --> 00:21:27.320
My name's Maurice, and
I'm an engineer that

00:21:27.320 --> 00:21:28.484
works on Flutter's plugins.

00:21:28.484 --> 00:21:29.900
I would like to
show you something

00:21:29.900 --> 00:21:32.030
cool that we've been
adding to Flutter.

00:21:32.030 --> 00:21:34.850
As you can see here, we
have an avatar of me.

00:21:34.850 --> 00:21:37.610
And just like the timeline
app, the design and animation

00:21:37.610 --> 00:21:40.760
have been provided using Flair.

00:21:40.760 --> 00:21:43.500
Right now, the avatar
is just standing idle.

00:21:43.500 --> 00:21:45.000
That's kind of boring.

00:21:45.000 --> 00:21:48.880
So what we can actually do
is we can move these sliders.

00:21:48.880 --> 00:21:51.430
We can have his
face animation move,

00:21:51.430 --> 00:21:54.010
add some funny
expressions as well.

00:21:54.010 --> 00:21:56.690
We can even give
them a big smile.

00:21:56.690 --> 00:21:59.470
When instead of using
sliders, what have we

00:21:59.470 --> 00:22:03.280
could have his facial expression
match mine automatically

00:22:03.280 --> 00:22:06.140
using the power of
machine learning.

00:22:06.140 --> 00:22:07.599
So let's look at the code.

00:22:07.599 --> 00:22:09.765
So to achieve this, we're
going to need two plugins.

00:22:09.765 --> 00:22:11.348
We're going to need
the camera plugin,

00:22:11.348 --> 00:22:13.480
and we're going to need
that ML kit plugin.

00:22:13.480 --> 00:22:17.080
So since this app has already
been pre-configured to--

00:22:17.080 --> 00:22:19.630
preconfigured for the
camera and the ML kit,

00:22:19.630 --> 00:22:22.647
we're just going to dive
straight into the code.

00:22:22.647 --> 00:22:24.480
So the first thing we're
going to need to do

00:22:24.480 --> 00:22:27.360
is we're going to need to create
a class that will facilitate

00:22:27.360 --> 00:22:30.240
taking images from the
camera and passing it

00:22:30.240 --> 00:22:31.947
to the face detector.

00:22:31.947 --> 00:22:33.530
So I've already gone
ahead and created

00:22:33.530 --> 00:22:37.230
a class called Face Expression
Reader that does just that.

00:22:37.230 --> 00:22:39.940
So this class has
three main components.

00:22:39.940 --> 00:22:43.050
It has the camera controller,
which controls access

00:22:43.050 --> 00:22:46.170
to the camera, then we
have the face detector,

00:22:46.170 --> 00:22:49.920
which runs ML models on
images to detect faces.

00:22:49.920 --> 00:22:52.830
The last part is we had the init
method, which sets everything

00:22:52.830 --> 00:22:54.104
up.

00:22:54.104 --> 00:22:55.770
So what we're going
to do is we're going

00:22:55.770 --> 00:22:58.100
to implement the init method.

00:22:58.100 --> 00:23:00.420
And what I love about
Flutter is how easy

00:23:00.420 --> 00:23:02.400
it is to get started
with the camera.

00:23:02.400 --> 00:23:04.020
It only requires two lines.

00:23:04.020 --> 00:23:06.100
The first one is a
constructor, where

00:23:06.100 --> 00:23:08.100
we show that we want
access to the front camera.

00:23:08.100 --> 00:23:12.930
And the second one, we show that
we want low resolution images.

00:23:12.930 --> 00:23:15.870
And then the second line, we
just initialize the camera.

00:23:15.870 --> 00:23:17.410
That's all that we need.

00:23:17.410 --> 00:23:19.590
The next step is
initialize the detector.

00:23:19.590 --> 00:23:23.040
And just like the camera,
it's just as easy to setup.

00:23:23.040 --> 00:23:25.320
All we do is we get an
instance of face detector

00:23:25.320 --> 00:23:27.940
from Firebase vision.

00:23:27.940 --> 00:23:29.760
However, the default
face detector

00:23:29.760 --> 00:23:31.895
only tells you the location
of faces in an image.

00:23:31.895 --> 00:23:33.270
So what we're
going to want to do

00:23:33.270 --> 00:23:35.220
is really set some
options so it can actually

00:23:35.220 --> 00:23:36.540
read facial expressions.

00:23:40.156 --> 00:23:40.910
Here we go.

00:23:40.910 --> 00:23:42.395
Reformat.

00:23:42.395 --> 00:23:43.770
So the options
we're going to set

00:23:43.770 --> 00:23:45.450
so we can read
facial expressions

00:23:45.450 --> 00:23:47.970
is to-- we're going to enable
classification and have

00:23:47.970 --> 00:23:50.370
the detector run
in accurate mode.

00:23:50.370 --> 00:23:51.890
Now last but not
least, we're going

00:23:51.890 --> 00:23:56.100
to want to continuously
stream bytes from the camera

00:23:56.100 --> 00:23:58.590
to the detector,
and I've already

00:23:58.590 --> 00:24:02.274
gone ahead and created a
helper method to do just that.

00:24:02.274 --> 00:24:03.690
So in this method,
all we do is we

00:24:03.690 --> 00:24:06.330
pass the camera and the
detector we just initialized

00:24:06.330 --> 00:24:09.720
but also pass a method that
updates the face expressions

00:24:09.720 --> 00:24:14.220
reader every time we get a
new result face from an image.

00:24:14.220 --> 00:24:17.760
So we can actually take a quick
look at this helper method.

00:24:17.760 --> 00:24:19.350
It's actually fairly short.

00:24:19.350 --> 00:24:21.990
All we really do is we call this
upcoming method called start

00:24:21.990 --> 00:24:23.610
byte stream on the camera.

00:24:23.610 --> 00:24:26.250
Every time we get an
image, we take this image,

00:24:26.250 --> 00:24:28.851
we pass it to our
detector, and then

00:24:28.851 --> 00:24:30.600
after we get the results
for our detector,

00:24:30.600 --> 00:24:34.530
we update our face
expression reader.

00:24:34.530 --> 00:24:36.650
So now that we set
all that up, let's

00:24:36.650 --> 00:24:39.530
go ahead and go to
our main dot Dart.

00:24:39.530 --> 00:24:42.620
We're going to want to go
down to our statement or state

00:24:42.620 --> 00:24:43.850
class.

00:24:43.850 --> 00:24:47.000
So I've already gone ahead and
created an instance of the face

00:24:47.000 --> 00:24:49.460
expression reader, the class
we just implemented, and I

00:24:49.460 --> 00:24:50.497
called it reader.

00:24:50.497 --> 00:24:52.830
So the very last thing we
need to do to get this working

00:24:52.830 --> 00:24:55.490
is that we needed to add
a listener to the reader.

00:24:58.930 --> 00:24:59.800
And here we go.

00:24:59.800 --> 00:25:03.490
Now with this listener,
the face expression reader

00:25:03.490 --> 00:25:07.770
will update our avatar every
time it gets a new face.

00:25:07.770 --> 00:25:12.590
So we're going to go
ahead and run hot restart.

00:25:12.590 --> 00:25:15.060
And the reason we're going
to run hot restart instead

00:25:15.060 --> 00:25:18.390
of hot reload is because since
we changed our init state

00:25:18.390 --> 00:25:23.282
method, we want to rebuild
the entire state of our class.

00:25:23.282 --> 00:25:25.090
Let's see.

00:25:25.090 --> 00:25:26.760
I think it's already set up.

00:25:29.890 --> 00:25:30.500
There you go.

00:25:34.070 --> 00:25:35.052
There we go.

00:25:35.052 --> 00:25:37.824
[APPLAUSE]

00:25:40.140 --> 00:25:42.687
So not only can it just
tell if I'm smiling or not,

00:25:42.687 --> 00:25:44.270
we can actually add
a little bit more.

00:25:49.230 --> 00:25:51.770
So we're going to go ahead
and run another hot restart.

00:25:51.770 --> 00:25:54.892
And what we did is
that we have the--

00:25:54.892 --> 00:25:56.600
we're going to update
the eyes, and we're

00:25:56.600 --> 00:25:58.266
going to update the
tilting of the head.

00:25:58.266 --> 00:26:04.270
So if I hold this up to my
face again, close my eyes,

00:26:04.270 --> 00:26:09.310
tilt right and left, it
updates in real time.

00:26:09.310 --> 00:26:12.208
[APPLAUSE]

00:26:13.990 --> 00:26:17.920
So now that you've seen how easy
it is to use ML Kit, hopefully

00:26:17.920 --> 00:26:20.260
you'll consider it
using your app as well.

00:26:20.260 --> 00:26:21.377
Thanks, everyone.

00:26:21.377 --> 00:26:24.299
[APPLAUSE]

00:26:26.247 --> 00:26:28.410
TIM SNEATH: Thanks, Maurice.

00:26:28.410 --> 00:26:30.840
So as Flutter is now
at the point where

00:26:30.840 --> 00:26:33.150
it's starting to gain
this critical momentum,

00:26:33.150 --> 00:26:35.790
we're starting to see
other major companies add

00:26:35.790 --> 00:26:37.680
direct support.

00:26:37.680 --> 00:26:41.640
As an example, today, we're
announcing a new partnership

00:26:41.640 --> 00:26:47.370
that we think will open Flutter
to a new class of applications.

00:26:47.370 --> 00:26:48.900
Mobile phones that
are increasingly

00:26:48.900 --> 00:26:53.130
being used for payments, both
for digital and physical goods.

00:26:53.130 --> 00:26:56.010
Square are one of the
pioneers of payment services

00:26:56.010 --> 00:26:58.020
for retailers and consumers.

00:26:58.020 --> 00:27:02.130
And I'm delighted to introduce
Ella Polo to the stage

00:27:02.130 --> 00:27:04.601
to talk about how you guys
are extending Flutter.

00:27:04.601 --> 00:27:05.100
Welcome.

00:27:05.100 --> 00:27:06.183
ELLA POLO: Thank you, Tim.

00:27:11.240 --> 00:27:13.860
At Square, we believe
the economy is better

00:27:13.860 --> 00:27:15.930
when everyone has access.

00:27:15.930 --> 00:27:18.840
No one should be left out
because the cost is too high

00:27:18.840 --> 00:27:21.430
or the technology too complex.

00:27:21.430 --> 00:27:23.210
We started with a
little light reader

00:27:23.210 --> 00:27:25.789
that let millions of merchants
participate in the economy

00:27:25.789 --> 00:27:27.330
by making it easy
to take credit card

00:27:27.330 --> 00:27:29.250
payments with your smartphone.

00:27:29.250 --> 00:27:32.190
Since then, we've worked hard to
create an ecosystem of products

00:27:32.190 --> 00:27:35.040
that empowers our customers,
and our developer platform

00:27:35.040 --> 00:27:37.490
is a key part of that ecosystem.

00:27:37.490 --> 00:27:39.200
Our multi-channel
payment platform

00:27:39.200 --> 00:27:42.620
includes APOs and SDKs that let
developers integrate payments

00:27:42.620 --> 00:27:44.510
into the apps they build.

00:27:44.510 --> 00:27:46.740
Square takes care of the
complexity of payments

00:27:46.740 --> 00:27:50.630
in person, in app, and
online so developers can just

00:27:50.630 --> 00:27:54.150
focus on building great apps.

00:27:54.150 --> 00:27:56.190
Now we've been following
Flutter since the beta,

00:27:56.190 --> 00:27:58.290
and we're impressed by
how it enables developers

00:27:58.290 --> 00:28:00.990
to quickly create beautiful
and performance cross platform

00:28:00.990 --> 00:28:02.010
apps.

00:28:02.010 --> 00:28:04.350
That's why today, we're
so excited to announce

00:28:04.350 --> 00:28:06.870
two new plugins for
Flutter development--

00:28:06.870 --> 00:28:09.330
the Flutter plugin for
the Square Reader SDK

00:28:09.330 --> 00:28:12.780
and the Flutter plugin for
the in-app payments SDK.

00:28:12.780 --> 00:28:15.580
The Square Reader SDK enables
developers to build apps

00:28:15.580 --> 00:28:17.800
for merchants that take
in-person payments using

00:28:17.800 --> 00:28:19.090
Square hardware.

00:28:19.090 --> 00:28:20.980
And the in-app
payments SDK lets them

00:28:20.980 --> 00:28:24.670
build consumer apps that take
payments directly from buyers.

00:28:24.670 --> 00:28:27.735
To see this in action, let's
meet Collins Family Orchards.

00:28:27.735 --> 00:28:29.860
They're a great example of
a typical small business

00:28:29.860 --> 00:28:32.320
that runs on Square.

00:28:32.320 --> 00:28:34.877
Collins Family Orchards is a
fourth generation family farm

00:28:34.877 --> 00:28:37.210
growing a variety of organic
foods in eastern Washington

00:28:37.210 --> 00:28:38.132
state.

00:28:38.132 --> 00:28:40.090
They sell their produce
at farmer's markets all

00:28:40.090 --> 00:28:41.410
around the Seattle area.

00:28:41.410 --> 00:28:42.910
And like many small
businesses, they

00:28:42.910 --> 00:28:46.330
use their phone and a Square
reader to take payments.

00:28:46.330 --> 00:28:48.464
Now the Collins family was
happy running on square,

00:28:48.464 --> 00:28:50.380
but they wanted to build
an app to accommodate

00:28:50.380 --> 00:28:53.120
the specific needs of
their growing business.

00:28:53.120 --> 00:28:55.300
So let's take a look at
an app built specifically

00:28:55.300 --> 00:28:57.730
for the Collins family using
Flutter and the Flutter

00:28:57.730 --> 00:28:59.890
for Square Reader SDK plugin.

00:28:59.890 --> 00:29:01.330
This app helps
them take and track

00:29:01.330 --> 00:29:02.871
payments at each
farmer's market they

00:29:02.871 --> 00:29:05.200
go to and has quick locations
switching built right in.

00:29:08.680 --> 00:29:09.680
Can we see the app here?

00:29:09.680 --> 00:29:10.720
Yes, it's on the right.

00:29:10.720 --> 00:29:13.136
You can see that it's branded
for Collins Family Orchards,

00:29:13.136 --> 00:29:15.831
and I'm going to
start by signing in.

00:29:15.831 --> 00:29:18.080
And then I'll choose the
location that I'm selling at.

00:29:18.080 --> 00:29:21.020
So let's say today that I'm at
a farmer's market in Bellevue.

00:29:25.030 --> 00:29:25.530
Great.

00:29:25.530 --> 00:29:27.051
And I'll enter the
amount of charge,

00:29:27.051 --> 00:29:29.550
but we can see right now that
the charge button is disabled.

00:29:29.550 --> 00:29:31.830
So let's take a look at
the code really quick.

00:29:31.830 --> 00:29:33.349
This is the on
checkout function,

00:29:33.349 --> 00:29:35.640
and this uses the Flutter
plug-in for Square Reader SDK

00:29:35.640 --> 00:29:37.560
to start the Square
checkout flow.

00:29:37.560 --> 00:29:39.325
It takes an a set of
checkout parameters,

00:29:39.325 --> 00:29:40.950
and these are the
things that determine

00:29:40.950 --> 00:29:42.984
the behavior of the
payment flow so things

00:29:42.984 --> 00:29:44.400
like the amount
of the transaction

00:29:44.400 --> 00:29:46.816
but also whether we want to
collect tips or show a receipt

00:29:46.816 --> 00:29:49.300
screen.

00:29:49.300 --> 00:29:50.800
And once we start
the checkout flow,

00:29:50.800 --> 00:29:53.216
you'll notice that there's no
configuration for the reader

00:29:53.216 --> 00:29:55.510
here, and that's because once
we're in the transaction,

00:29:55.510 --> 00:29:57.830
Square takes care of
talking to the hardware.

00:29:57.830 --> 00:30:00.526
So this is really all the
configuration that you need.

00:30:00.526 --> 00:30:03.150
And we'll see nothing's calling
this check out functionary now.

00:30:03.150 --> 00:30:06.450
So for the live coding
portion of the demo,

00:30:06.450 --> 00:30:09.360
we're going to do a hot
reload and set the charge

00:30:09.360 --> 00:30:12.120
button to call on check
out when it's pressed.

00:30:12.120 --> 00:30:14.650
And then I'll click charge
to start the transaction.

00:30:14.650 --> 00:30:15.150
Great.

00:30:15.150 --> 00:30:17.842
What you're seeing now is
the Square check out outflow

00:30:17.842 --> 00:30:20.896
if I can find my card.

00:30:20.896 --> 00:30:21.920
Can we see the reader?

00:30:21.920 --> 00:30:23.530
Yes.

00:30:23.530 --> 00:30:27.330
And I'll insert my card
to take the payment.

00:30:27.330 --> 00:30:28.931
[BEEPING]

00:30:28.931 --> 00:30:29.430
Great.

00:30:29.430 --> 00:30:30.886
And the payment was accepted.

00:30:30.886 --> 00:30:33.510
Now when we look at the list of
transactions for this location,

00:30:33.510 --> 00:30:36.082
we can see the payment that
I just took right there.

00:30:36.082 --> 00:30:39.028
[APPLAUSE]

00:30:41.960 --> 00:30:43.960
As you can see, it's
really easy to add payments

00:30:43.960 --> 00:30:45.400
into your Flutter
app with Square.

00:30:45.400 --> 00:30:47.275
The Flutter plug-in for
the Square Reader SDK

00:30:47.275 --> 00:30:49.480
is available today,
and the Flutter plugin

00:30:49.480 --> 00:30:52.450
for the in-app payments SDK
is available for early access.

00:30:52.450 --> 00:30:54.910
And you can read more about
both at Square Up dot com slash

00:30:54.910 --> 00:30:55.930
Flutter.

00:30:55.930 --> 00:30:57.580
We're really excited to be
partnering with Google on this

00:30:57.580 --> 00:30:59.235
and to see what more we can
do with Flutter in the future.

00:30:59.235 --> 00:30:59.820
Thank you.

00:30:59.820 --> 00:31:02.688
[APPLAUSE]

00:31:06.034 --> 00:31:09.840
TIM SNEATH: Thank you,
Ella, and thank you Square.

00:31:09.840 --> 00:31:12.330
So the last part of
the app lifecycle we're

00:31:12.330 --> 00:31:15.310
going to talk about is release.

00:31:15.310 --> 00:31:17.980
As you've been hearing
throughout the presentation,

00:31:17.980 --> 00:31:21.580
our goal is to make Flutter
the most productive way

00:31:21.580 --> 00:31:25.450
to build beautiful fast
experiences for both iOS

00:31:25.450 --> 00:31:28.740
and Android from a
single code base.

00:31:28.740 --> 00:31:31.920
But when it comes to
continuous integration,

00:31:31.920 --> 00:31:34.710
continuous deployment,
sometimes feels

00:31:34.710 --> 00:31:37.500
that we're still a little
bit stuck in the olden days.

00:31:37.500 --> 00:31:39.990
It's just a little
bit too hard sometimes

00:31:39.990 --> 00:31:43.020
to configure build and
test tooling, particularly

00:31:43.020 --> 00:31:46.350
if you're trying to target
both iOS and Android.

00:31:46.350 --> 00:31:49.920
Lots of knobs and switches
and manual configuration

00:31:49.920 --> 00:31:54.030
sometimes feels like being a
phone operator in the 1950s.

00:31:54.030 --> 00:31:58.650
If only there was a build
system that understood Flutter.

00:31:58.650 --> 00:32:01.540
Well, turns out there's a
company who's been doing that.

00:32:01.540 --> 00:32:03.761
Let me introduce Triin
Kask from Nevercode.

00:32:03.761 --> 00:32:04.260
Hi, Triin.

00:32:04.260 --> 00:32:07.600
[APPLAUSE]

00:32:07.600 --> 00:32:11.040
TRIIN KASK: Hello, everybody.

00:32:11.040 --> 00:32:15.120
I'm so excited to be here
and celebrate this Flutter

00:32:15.120 --> 00:32:18.270
live event with people
here and online.

00:32:18.270 --> 00:32:21.200
So, hey, people online.

00:32:21.200 --> 00:32:26.980
So at Nevercode,
we've been building

00:32:26.980 --> 00:32:30.190
our continuous integration
and delivery product

00:32:30.190 --> 00:32:32.380
for mobile developers
in companies

00:32:32.380 --> 00:32:36.320
such as Toyota, Walmart, and
Sainsbury's to name a few.

00:32:36.320 --> 00:32:39.010
And we've seen them
struggle with setting up

00:32:39.010 --> 00:32:44.000
the whole development process
for iOS and Android separately.

00:32:44.000 --> 00:32:46.300
So when we heard
what Flutter does

00:32:46.300 --> 00:32:49.090
and how it actually changes
the way-- how mobile apps are

00:32:49.090 --> 00:32:53.530
developed, we were convinced
that the whole CI/CD experience

00:32:53.530 --> 00:32:55.870
needs to be re-engineered.

00:32:55.870 --> 00:33:01.510
So I'm proudly presenting you
our brand new product Code

00:33:01.510 --> 00:33:02.260
Magic.

00:33:02.260 --> 00:33:05.026
[APPLAUSE]

00:33:06.870 --> 00:33:11.020
So I'm going to show
you how it works.

00:33:11.020 --> 00:33:12.810
And I'm going to
show how easy it

00:33:12.810 --> 00:33:15.530
is to set up the whole
pipeline to build your Flutter

00:33:15.530 --> 00:33:18.030
apps on Code Magic.

00:33:18.030 --> 00:33:20.490
So actually the
beauty starts already

00:33:20.490 --> 00:33:23.730
when you join with
your GitHub account

00:33:23.730 --> 00:33:28.050
because you see it automatically
understands your Flutter apps

00:33:28.050 --> 00:33:31.290
and pulls them to Code Magic.

00:33:31.290 --> 00:33:32.220
And it's very easy.

00:33:32.220 --> 00:33:37.000
You just kick off the
first build and voila.

00:33:37.000 --> 00:33:38.500
It starts.

00:33:38.500 --> 00:33:42.440
You see the whole process
here on one screen.

00:33:42.440 --> 00:33:44.470
So, of course,
normally you would

00:33:44.470 --> 00:33:47.800
have web hooks that trigger
the builds from GitHub

00:33:47.800 --> 00:33:49.300
after each commit.

00:33:49.300 --> 00:33:54.190
But the underlying thought when
we were building this product

00:33:54.190 --> 00:33:56.500
was that it needs
to be seamless.

00:33:56.500 --> 00:33:59.320
It needs to be intuitive
so that even a person

00:33:59.320 --> 00:34:04.850
with no prior CI/CD experience
can start very, very quickly.

00:34:04.850 --> 00:34:08.440
So just to demonstrate
to you some

00:34:08.440 --> 00:34:13.800
of the UI that we have in mind,
for example I'm taking this--

00:34:13.800 --> 00:34:15.159
oh, there's a huge--

00:34:15.159 --> 00:34:17.650
OK, here's your fail build.

00:34:17.650 --> 00:34:20.590
Because you want to know why
things are failing sometimes,

00:34:20.590 --> 00:34:21.880
so here you see that it--

00:34:21.880 --> 00:34:25.030
the build fail because it
failed to install dependencies

00:34:25.030 --> 00:34:26.530
and here you get
more information

00:34:26.530 --> 00:34:30.190
like what's happened to
make the next decisions.

00:34:30.190 --> 00:34:34.750
And then if you want to
configure your app more

00:34:34.750 --> 00:34:38.889
on Code Magic because it's
not just for hobbyists

00:34:38.889 --> 00:34:41.830
or freelance results, also
for hardcore developers

00:34:41.830 --> 00:34:48.340
who maybe want to experience
a more sophisticated product.

00:34:48.340 --> 00:34:51.610
So you just go to the
app settings here.

00:34:51.610 --> 00:34:55.630
You see seems like
just small steps,

00:34:55.630 --> 00:34:59.530
but actually you can
customize here a lot.

00:34:59.530 --> 00:35:01.750
For example, I have
chosen that I only

00:35:01.750 --> 00:35:04.570
want to build the Android app.

00:35:04.570 --> 00:35:07.900
And, for example, in publishing,
you can publish automatically

00:35:07.900 --> 00:35:11.650
to Google Play or app store, and
we also support out-of-the-box

00:35:11.650 --> 00:35:15.370
integration code signing
with iOS and Android.

00:35:15.370 --> 00:35:19.030
So as I'm on Slack very
often then, of course,

00:35:19.030 --> 00:35:22.870
I want my notification to
end up in Slack channel,

00:35:22.870 --> 00:35:25.210
so I have chosen
here that I want

00:35:25.210 --> 00:35:28.130
to know when the build
starts and when it fails

00:35:28.130 --> 00:35:31.080
or when the artifacts
are published.

00:35:31.080 --> 00:35:37.940
So let's go see how far are we
building this app currently.

00:35:37.940 --> 00:35:40.520
So you see that it's currently
building the Android app,

00:35:40.520 --> 00:35:44.480
and already you can open up
the steps to see everything

00:35:44.480 --> 00:35:46.840
what's going on here.

00:35:46.840 --> 00:35:49.680
So it gives you a
lot of flexibility.

00:35:49.680 --> 00:35:51.300
And another thing
that I also wanted

00:35:51.300 --> 00:35:55.440
to mention that if I
go here to app settings

00:35:55.440 --> 00:35:59.730
is that you can also actually
[INAUDIBLE] your workflows

00:35:59.730 --> 00:36:01.780
according to the user groups.

00:36:01.780 --> 00:36:05.430
Maybe you want to have
them different people--

00:36:05.430 --> 00:36:11.480
to, testers beta testers, some
other team in your company.

00:36:11.480 --> 00:36:14.450
It shows that the
build was successful.

00:36:14.450 --> 00:36:17.110
So I'm just going
to do the build.

00:36:17.110 --> 00:36:18.790
And here everything is green.

00:36:18.790 --> 00:36:20.710
It's a very nice green.

00:36:20.710 --> 00:36:23.620
So I promise that they
should be on Slack,

00:36:23.620 --> 00:36:26.470
so let's go check
out my Slack channel.

00:36:26.470 --> 00:36:27.730
And they are!

00:36:27.730 --> 00:36:28.810
Great!

00:36:28.810 --> 00:36:30.265
The artifacts are actually here.

00:36:30.265 --> 00:36:32.755
[APPLAUSE]

00:36:34.550 --> 00:36:37.960
So I'm convinced that
Flutter plus Code

00:36:37.960 --> 00:36:40.150
Magic is the fastest
route to get your apps

00:36:40.150 --> 00:36:41.980
to the hands of your end users.

00:36:41.980 --> 00:36:47.320
So I invite everybody to join
and sign up at codemagic.io.

00:36:47.320 --> 00:36:49.210
It's free.

00:36:49.210 --> 00:36:51.010
It's live now.

00:36:51.010 --> 00:36:53.170
You can just go crazy.

00:36:53.170 --> 00:36:56.080
And then you can also
join our Slack channel

00:36:56.080 --> 00:36:58.630
where all the other Flutter
fans are and just share

00:36:58.630 --> 00:37:00.740
your experience,
learn from others.

00:37:00.740 --> 00:37:02.450
So I think it will be awesome.

00:37:02.450 --> 00:37:04.200
Thank you.

