WEBVTT
Kind: captions
Language: en

00:00:06.359 --> 00:00:09.270
hello and welcome back on root access

00:00:09.270 --> 00:00:09.280
hello and welcome back on root access
 

00:00:09.280 --> 00:00:12.030
hello and welcome back on root access
Berlin we are again recording here from

00:00:12.030 --> 00:00:12.040
Berlin we are again recording here from
 

00:00:12.040 --> 00:00:15.150
Berlin we are again recording here from
the factory studio in Dublin and today I

00:00:15.150 --> 00:00:15.160
the factory studio in Dublin and today I
 

00:00:15.160 --> 00:00:16.440
the factory studio in Dublin and today I
have with me

00:00:16.440 --> 00:00:16.450
have with me
 

00:00:16.450 --> 00:00:20.490
have with me
Jiro Emoto the CTO of snapengage hello

00:00:20.490 --> 00:00:20.500
Jiro Emoto the CTO of snapengage hello
 

00:00:20.500 --> 00:00:22.260
Jiro Emoto the CTO of snapengage hello
Jerome hello Buffy can you please

00:00:22.260 --> 00:00:22.270
Jerome hello Buffy can you please
 

00:00:22.270 --> 00:00:25.080
Jerome hello Buffy can you please
introduce yourself yes absolutely so I'm

00:00:25.080 --> 00:00:25.090
introduce yourself yes absolutely so I'm
 

00:00:25.090 --> 00:00:27.300
introduce yourself yes absolutely so I'm
Michele Mouton the CTO for that stamp

00:00:27.300 --> 00:00:27.310
Michele Mouton the CTO for that stamp
 

00:00:27.310 --> 00:00:30.630
Michele Mouton the CTO for that stamp
engage well it's more properly providing

00:00:30.630 --> 00:00:30.640
engage well it's more properly providing
 

00:00:30.640 --> 00:00:32.880
engage well it's more properly providing
software as a service on the Google

00:00:32.880 --> 00:00:32.890
software as a service on the Google
 

00:00:32.890 --> 00:00:35.790
software as a service on the Google
cloud platform or customers are using

00:00:35.790 --> 00:00:35.800
cloud platform or customers are using
 

00:00:35.800 --> 00:00:38.580
cloud platform or customers are using
cengage to engage their visitors on

00:00:38.580 --> 00:00:38.590
cengage to engage their visitors on
 

00:00:38.590 --> 00:00:41.250
cengage to engage their visitors on
their website and to assist them through

00:00:41.250 --> 00:00:41.260
their website and to assist them through
 

00:00:41.260 --> 00:00:44.520
their website and to assist them through
the cell cycle or for customer service

00:00:44.520 --> 00:00:44.530
the cell cycle or for customer service
 

00:00:44.530 --> 00:00:47.369
the cell cycle or for customer service
so let's see a demo let's see what this

00:00:47.369 --> 00:00:47.379
so let's see a demo let's see what this
 

00:00:47.379 --> 00:00:51.450
so let's see a demo let's see what this
looks like here we have the website of

00:00:51.450 --> 00:00:51.460
looks like here we have the website of
 

00:00:51.460 --> 00:00:54.270
looks like here we have the website of
one of your customers and I have opened

00:00:54.270 --> 00:00:54.280
one of your customers and I have opened
 

00:00:54.280 --> 00:00:57.930
one of your customers and I have opened
to this little live chat widget that one

00:00:57.930 --> 00:00:57.940
to this little live chat widget that one
 

00:00:57.940 --> 00:01:00.240
to this little live chat widget that one
is provided by snapengage exactly so

00:01:00.240 --> 00:01:00.250
is provided by snapengage exactly so
 

00:01:00.250 --> 00:01:02.430
is provided by snapengage exactly so
this customers i didn't stamp engage the

00:01:02.430 --> 00:01:02.440
this customers i didn't stamp engage the
 

00:01:02.440 --> 00:01:04.350
this customers i didn't stamp engage the
transcript client on their website and

00:01:04.350 --> 00:01:04.360
transcript client on their website and
 

00:01:04.360 --> 00:01:06.960
transcript client on their website and
when you clicked on the little button to

00:01:06.960 --> 00:01:06.970
when you clicked on the little button to
 

00:01:06.970 --> 00:01:10.010
when you clicked on the little button to
open the chart this window popped up and

00:01:10.010 --> 00:01:10.020
open the chart this window popped up and
 

00:01:10.020 --> 00:01:12.420
open the chart this window popped up and
provide you the option to leave a

00:01:12.420 --> 00:01:12.430
provide you the option to leave a
 

00:01:12.430 --> 00:01:15.109
provide you the option to leave a
message part and chat with this customer

00:01:15.109 --> 00:01:15.119
message part and chat with this customer
 

00:01:15.119 --> 00:01:18.090
message part and chat with this customer
and so today we are going to answer a

00:01:18.090 --> 00:01:18.100
and so today we are going to answer a
 

00:01:18.100 --> 00:01:19.859
and so today we are going to answer a
question there is a recurring question

00:01:19.859 --> 00:01:19.869
question there is a recurring question
 

00:01:19.869 --> 00:01:22.679
question there is a recurring question
on aperture how much do these cost every

00:01:22.679 --> 00:01:22.689
on aperture how much do these cost every
 

00:01:22.689 --> 00:01:24.270
on aperture how much do these cost every
time I talk about App Engine with

00:01:24.270 --> 00:01:24.280
time I talk about App Engine with
 

00:01:24.280 --> 00:01:26.219
time I talk about App Engine with
someone that's a question that comes

00:01:26.219 --> 00:01:26.229
someone that's a question that comes
 

00:01:26.229 --> 00:01:28.640
someone that's a question that comes
again because it's not so easy to

00:01:28.640 --> 00:01:28.650
again because it's not so easy to
 

00:01:28.650 --> 00:01:31.800
again because it's not so easy to
determine how much you are going to pay

00:01:31.800 --> 00:01:31.810
determine how much you are going to pay
 

00:01:31.810 --> 00:01:34.469
determine how much you are going to pay
for your application in App Engine

00:01:34.469 --> 00:01:34.479
for your application in App Engine
 

00:01:34.479 --> 00:01:37.520
for your application in App Engine
everything is metered and you pay

00:01:37.520 --> 00:01:37.530
everything is metered and you pay
 

00:01:37.530 --> 00:01:41.580
everything is metered and you pay
according to your bandwidth usage CPU

00:01:41.580 --> 00:01:41.590
according to your bandwidth usage CPU
 

00:01:41.590 --> 00:01:46.050
according to your bandwidth usage CPU
usage and so on however here with

00:01:46.050 --> 00:01:46.060
usage and so on however here with
 

00:01:46.060 --> 00:01:49.560
usage and so on however here with
snapengage we have an application that

00:01:49.560 --> 00:01:49.570
snapengage we have an application that
 

00:01:49.570 --> 00:01:53.460
snapengage we have an application that
has a significant traffic and so

00:01:53.460 --> 00:01:53.470
has a significant traffic and so
 

00:01:53.470 --> 00:01:56.609
has a significant traffic and so
generally is going to tell us about the

00:01:56.609 --> 00:01:56.619
generally is going to tell us about the
 

00:01:56.619 --> 00:01:58.410
generally is going to tell us about the
associated costs and how to optimize

00:01:58.410 --> 00:01:58.420
associated costs and how to optimize
 

00:01:58.420 --> 00:02:02.100
associated costs and how to optimize
them it's a first of all zero how much

00:02:02.100 --> 00:02:02.110
them it's a first of all zero how much
 

00:02:02.110 --> 00:02:04.950
them it's a first of all zero how much
traffic are we talking about on the

00:02:04.950 --> 00:02:04.960
traffic are we talking about on the
 

00:02:04.960 --> 00:02:07.230
traffic are we talking about on the
man's an average we serve two billions

00:02:07.230 --> 00:02:07.240
man's an average we serve two billions
 

00:02:07.240 --> 00:02:09.510
man's an average we serve two billions
of queries in App Engine for that

00:02:09.510 --> 00:02:09.520
of queries in App Engine for that
 

00:02:09.520 --> 00:02:13.600
of queries in App Engine for that
engaged and we use

00:02:13.600 --> 00:02:13.610
engaged and we use
 

00:02:13.610 --> 00:02:15.640
engaged and we use
you know a fair amount of instances at

00:02:15.640 --> 00:02:15.650
you know a fair amount of instances at
 

00:02:15.650 --> 00:02:18.190
you know a fair amount of instances at
tea-time where the dozens of instances

00:02:18.190 --> 00:02:18.200
tea-time where the dozens of instances
 

00:02:18.200 --> 00:02:21.040
tea-time where the dozens of instances
running for serving our credits alright

00:02:21.040 --> 00:02:21.050
running for serving our credits alright
 

00:02:21.050 --> 00:02:24.730
running for serving our credits alright
that's it and so can you tell us what a

00:02:24.730 --> 00:02:24.740
that's it and so can you tell us what a
 

00:02:24.740 --> 00:02:27.100
that's it and so can you tell us what a
typical query landing on your

00:02:27.100 --> 00:02:27.110
typical query landing on your
 

00:02:27.110 --> 00:02:28.990
typical query landing on your
application looks like so that we

00:02:28.990 --> 00:02:29.000
application looks like so that we
 

00:02:29.000 --> 00:02:31.120
application looks like so that we
understand what's going on yes so you

00:02:31.120 --> 00:02:31.130
understand what's going on yes so you
 

00:02:31.130 --> 00:02:34.180
understand what's going on yes so you
were seeing earlier system a window and

00:02:34.180 --> 00:02:34.190
were seeing earlier system a window and
 

00:02:34.190 --> 00:02:37.240
were seeing earlier system a window and
to do this this display we have to

00:02:37.240 --> 00:02:37.250
to do this this display we have to
 

00:02:37.250 --> 00:02:40.630
to do this this display we have to
figure out or someone in the company it

00:02:40.630 --> 00:02:40.640
figure out or someone in the company it
 

00:02:40.640 --> 00:02:42.460
figure out or someone in the company it
want to answer the chat in the user

00:02:42.460 --> 00:02:42.470
want to answer the chat in the user
 

00:02:42.470 --> 00:02:43.180
want to answer the chat in the user
decide to chat

00:02:43.180 --> 00:02:43.190
decide to chat
 

00:02:43.190 --> 00:02:45.730
decide to chat
so the typical RPC we do on every

00:02:45.730 --> 00:02:45.740
so the typical RPC we do on every
 

00:02:45.740 --> 00:02:48.940
so the typical RPC we do on every
customer web page like this one is to

00:02:48.940 --> 00:02:48.950
customer web page like this one is to
 

00:02:48.950 --> 00:02:52.390
customer web page like this one is to
first bring in the appengine memory

00:02:52.390 --> 00:02:52.400
first bring in the appengine memory
 

00:02:52.400 --> 00:02:55.449
first bring in the appengine memory
context just the configuration of the

00:02:55.449 --> 00:02:55.459
context just the configuration of the
 

00:02:55.459 --> 00:02:57.699
context just the configuration of the
chat team so you know a lot of

00:02:57.699 --> 00:02:57.709
chat team so you know a lot of
 

00:02:57.709 --> 00:02:59.500
chat team so you know a lot of
configuration details including what is

00:02:59.500 --> 00:02:59.510
configuration details including what is
 

00:02:59.510 --> 00:03:03.130
configuration details including what is
the agent list for for system what are

00:03:03.130 --> 00:03:03.140
the agent list for for system what are
 

00:03:03.140 --> 00:03:05.440
the agent list for for system what are
the different tiers of agent with a

00:03:05.440 --> 00:03:05.450
the different tiers of agent with a
 

00:03:05.450 --> 00:03:07.470
the different tiers of agent with a
little booze for for assigning agents

00:03:07.470 --> 00:03:07.480
little booze for for assigning agents
 

00:03:07.480 --> 00:03:10.270
little booze for for assigning agents
once we have that we need to bring also

00:03:10.270 --> 00:03:10.280
once we have that we need to bring also
 

00:03:10.280 --> 00:03:13.000
once we have that we need to bring also
in memory what is the status of each

00:03:13.000 --> 00:03:13.010
in memory what is the status of each
 

00:03:13.010 --> 00:03:16.479
in memory what is the status of each
agent of the online post of line how

00:03:16.479 --> 00:03:16.489
agent of the online post of line how
 

00:03:16.489 --> 00:03:19.630
agent of the online post of line how
many chat does effort of their so really

00:03:19.630 --> 00:03:19.640
many chat does effort of their so really
 

00:03:19.640 --> 00:03:22.000
many chat does effort of their so really
is really handling such we know how to

00:03:22.000 --> 00:03:22.010
is really handling such we know how to
 

00:03:22.010 --> 00:03:24.160
is really handling such we know how to
best to return even right to chat to the

00:03:24.160 --> 00:03:24.170
best to return even right to chat to the
 

00:03:24.170 --> 00:03:27.789
best to return even right to chat to the
right person so you have first a batch

00:03:27.789 --> 00:03:27.799
right person so you have first a batch
 

00:03:27.799 --> 00:03:31.300
right person so you have first a batch
of requests to the data store sometimes

00:03:31.300 --> 00:03:31.310
of requests to the data store sometimes
 

00:03:31.310 --> 00:03:33.400
of requests to the data store sometimes
backed by memcache so as to optimize

00:03:33.400 --> 00:03:33.410
backed by memcache so as to optimize
 

00:03:33.410 --> 00:03:36.220
backed by memcache so as to optimize
them to get the status of your agents

00:03:36.220 --> 00:03:36.230
them to get the status of your agents
 

00:03:36.230 --> 00:03:38.500
them to get the status of your agents
and then you run a CPU intensive

00:03:38.500 --> 00:03:38.510
and then you run a CPU intensive
 

00:03:38.510 --> 00:03:41.620
and then you run a CPU intensive
computing algorithm that comes up with

00:03:41.620 --> 00:03:41.630
computing algorithm that comes up with
 

00:03:41.630 --> 00:03:43.090
computing algorithm that comes up with
the best agent to answer this query

00:03:43.090 --> 00:03:43.100
the best agent to answer this query
 

00:03:43.100 --> 00:03:47.800
the best agent to answer this query
exactly yeah so let's see how your cost

00:03:47.800 --> 00:03:47.810
exactly yeah so let's see how your cost
 

00:03:47.810 --> 00:03:51.009
exactly yeah so let's see how your cost
breakdown looks like you know taking

00:03:51.009 --> 00:03:51.019
breakdown looks like you know taking
 

00:03:51.019 --> 00:03:54.550
breakdown looks like you know taking
game it seems that the CPU is is the

00:03:54.550 --> 00:03:54.560
game it seems that the CPU is is the
 

00:03:54.560 --> 00:03:57.370
game it seems that the CPU is is the
most expensive part of your App Engine

00:03:57.370 --> 00:03:57.380
most expensive part of your App Engine
 

00:03:57.380 --> 00:04:00.670
most expensive part of your App Engine
cost so what are you doing to to keep

00:04:00.670 --> 00:04:00.680
cost so what are you doing to to keep
 

00:04:00.680 --> 00:04:04.570
cost so what are you doing to to keep
that under control so the first thing

00:04:04.570 --> 00:04:04.580
that under control so the first thing
 

00:04:04.580 --> 00:04:05.890
that under control so the first thing
that come in mind of course is to

00:04:05.890 --> 00:04:05.900
that come in mind of course is to
 

00:04:05.900 --> 00:04:08.530
that come in mind of course is to
optimize your code if you want algorithm

00:04:08.530 --> 00:04:08.540
optimize your code if you want algorithm
 

00:04:08.540 --> 00:04:11.020
optimize your code if you want algorithm
inefficient you're going to use more CPU

00:04:11.020 --> 00:04:11.030
inefficient you're going to use more CPU
 

00:04:11.030 --> 00:04:14.440
inefficient you're going to use more CPU
for that something else you should do if

00:04:14.440 --> 00:04:14.450
for that something else you should do if
 

00:04:14.450 --> 00:04:16.930
for that something else you should do if
you your team has the skills on

00:04:16.930 --> 00:04:16.940
you your team has the skills on
 

00:04:16.940 --> 00:04:18.400
you your team has the skills on
different languages you should pick a

00:04:18.400 --> 00:04:18.410
different languages you should pick a
 

00:04:18.410 --> 00:04:20.770
different languages you should pick a
language it is also efficient at one

00:04:20.770 --> 00:04:20.780
language it is also efficient at one
 

00:04:20.780 --> 00:04:23.450
language it is also efficient at one
time typically

00:04:23.450 --> 00:04:23.460
time typically
 

00:04:23.460 --> 00:04:25.370
time typically
you go with interpreted language I'm

00:04:25.370 --> 00:04:25.380
you go with interpreted language I'm
 

00:04:25.380 --> 00:04:28.279
you go with interpreted language I'm
going to take more resources at one time

00:04:28.279 --> 00:04:28.289
going to take more resources at one time
 

00:04:28.289 --> 00:04:31.430
going to take more resources at one time
then if you take a compiled language so

00:04:31.430 --> 00:04:31.440
then if you take a compiled language so
 

00:04:31.440 --> 00:04:32.960
then if you take a compiled language so
what language are you use well I think

00:04:32.960 --> 00:04:32.970
what language are you use well I think
 

00:04:32.970 --> 00:04:37.159
what language are you use well I think
Java which I think your reader knows it

00:04:37.159 --> 00:04:37.169
Java which I think your reader knows it
 

00:04:37.169 --> 00:04:39.950
Java which I think your reader knows it
it's a compiled to bytecode so it's not

00:04:39.950 --> 00:04:39.960
it's a compiled to bytecode so it's not
 

00:04:39.960 --> 00:04:42.350
it's a compiled to bytecode so it's not
exactly running on the CPU which

00:04:42.350 --> 00:04:42.360
exactly running on the CPU which
 

00:04:42.360 --> 00:04:45.379
exactly running on the CPU which
receives the Machine JVM in between but

00:04:45.379 --> 00:04:45.389
receives the Machine JVM in between but
 

00:04:45.389 --> 00:04:47.900
receives the Machine JVM in between but
it's fairly efficient so it's certainly

00:04:47.900 --> 00:04:47.910
it's fairly efficient so it's certainly
 

00:04:47.910 --> 00:04:51.230
it's fairly efficient so it's certainly
more efficient than an interpreted

00:04:51.230 --> 00:04:51.240
more efficient than an interpreted
 

00:04:51.240 --> 00:04:54.589
more efficient than an interpreted
language like Python but you are you

00:04:54.589 --> 00:04:54.599
language like Python but you are you
 

00:04:54.599 --> 00:04:56.390
language like Python but you are you
have another option on App Engine which

00:04:56.390 --> 00:04:56.400
have another option on App Engine which
 

00:04:56.400 --> 00:05:00.140
have another option on App Engine which
is go which is completely compliant so

00:05:00.140 --> 00:05:00.150
is go which is completely compliant so
 

00:05:00.150 --> 00:05:04.939
is go which is completely compliant so
with that probably you would get almost

00:05:04.939 --> 00:05:04.949
with that probably you would get almost
 

00:05:04.949 --> 00:05:09.050
with that probably you would get almost
an order of well almost a factor of 2 of

00:05:09.050 --> 00:05:09.060
an order of well almost a factor of 2 of
 

00:05:09.060 --> 00:05:13.879
an order of well almost a factor of 2 of
CPU saving compared to Java but you

00:05:13.879 --> 00:05:13.889
CPU saving compared to Java but you
 

00:05:13.889 --> 00:05:16.189
CPU saving compared to Java but you
haven't tried go we haven't but I think

00:05:16.189 --> 00:05:16.199
haven't tried go we haven't but I think
 

00:05:16.199 --> 00:05:18.469
haven't tried go we haven't but I think
you should that would be for the most

00:05:18.469 --> 00:05:18.479
you should that would be for the most
 

00:05:18.479 --> 00:05:20.180
you should that would be for the most
important services something we should

00:05:20.180 --> 00:05:20.190
important services something we should
 

00:05:20.190 --> 00:05:22.129
important services something we should
do let me just interject something here

00:05:22.129 --> 00:05:22.139
do let me just interject something here
 

00:05:22.139 --> 00:05:25.689
do let me just interject something here
now with App Engine supporting modules

00:05:25.689 --> 00:05:25.699
now with App Engine supporting modules
 

00:05:25.699 --> 00:05:29.390
now with App Engine supporting modules
in theory we should be able to have some

00:05:29.390 --> 00:05:29.400
in theory we should be able to have some
 

00:05:29.400 --> 00:05:31.820
in theory we should be able to have some
part of the application using the send a

00:05:31.820 --> 00:05:31.830
part of the application using the send a
 

00:05:31.830 --> 00:05:33.830
part of the application using the send a
test or stamp in cash but running a

00:05:33.830 --> 00:05:33.840
test or stamp in cash but running a
 

00:05:33.840 --> 00:05:35.390
test or stamp in cash but running a
different language that's something were

00:05:35.390 --> 00:05:35.400
different language that's something were
 

00:05:35.400 --> 00:05:37.070
different language that's something were
planning to experimental easy to sell

00:05:37.070 --> 00:05:37.080
planning to experimental easy to sell
 

00:05:37.080 --> 00:05:39.260
planning to experimental easy to sell
indeed modules have been introduced

00:05:39.260 --> 00:05:39.270
indeed modules have been introduced
 

00:05:39.270 --> 00:05:42.860
indeed modules have been introduced
recently and they allow you to split

00:05:42.860 --> 00:05:42.870
recently and they allow you to split
 

00:05:42.870 --> 00:05:46.459
recently and they allow you to split
your application into different modules

00:05:46.459 --> 00:05:46.469
your application into different modules
 

00:05:46.469 --> 00:05:48.950
your application into different modules
but those modules have their own version

00:05:48.950 --> 00:05:48.960
but those modules have their own version
 

00:05:48.960 --> 00:05:52.070
but those modules have their own version
their own language however they still

00:05:52.070 --> 00:05:52.080
their own language however they still
 

00:05:52.080 --> 00:05:53.959
their own language however they still
the same application so they hit the

00:05:53.959 --> 00:05:53.969
the same application so they hit the
 

00:05:53.969 --> 00:05:56.600
the same application so they hit the
same data store so that that is a good

00:05:56.600 --> 00:05:56.610
same data store so that that is a good
 

00:05:56.610 --> 00:05:59.149
same data store so that that is a good
idea actually to experiment with one

00:05:59.149 --> 00:05:59.159
idea actually to experiment with one
 

00:05:59.159 --> 00:06:01.790
idea actually to experiment with one
separate functionality written in a

00:06:01.790 --> 00:06:01.800
separate functionality written in a
 

00:06:01.800 --> 00:06:04.610
separate functionality written in a
different language and to see what the

00:06:04.610 --> 00:06:04.620
different language and to see what the
 

00:06:04.620 --> 00:06:08.450
different language and to see what the
impact of that on the CPU cost is some

00:06:08.450 --> 00:06:08.460
impact of that on the CPU cost is some
 

00:06:08.460 --> 00:06:11.209
impact of that on the CPU cost is some
scans I would like to mention is like

00:06:11.209 --> 00:06:11.219
scans I would like to mention is like
 

00:06:11.219 --> 00:06:13.490
scans I would like to mention is like
most cloud platforms you can pre

00:06:13.490 --> 00:06:13.500
most cloud platforms you can pre
 

00:06:13.500 --> 00:06:15.709
most cloud platforms you can pre
reserved some number of instances that

00:06:15.709 --> 00:06:15.719
reserved some number of instances that
 

00:06:15.719 --> 00:06:18.080
reserved some number of instances that
don't need to use this week so once your

00:06:18.080 --> 00:06:18.090
don't need to use this week so once your
 

00:06:18.090 --> 00:06:21.320
don't need to use this week so once your
application which level of usage which

00:06:21.320 --> 00:06:21.330
application which level of usage which
 

00:06:21.330 --> 00:06:23.779
application which level of usage which
is getting you no more than one basic

00:06:23.779 --> 00:06:23.789
is getting you no more than one basic
 

00:06:23.789 --> 00:06:26.540
is getting you no more than one basic
you can kind of look at what is it is to

00:06:26.540 --> 00:06:26.550
you can kind of look at what is it is to
 

00:06:26.550 --> 00:06:27.890
you can kind of look at what is it is to
read and for the past few weeks

00:06:27.890 --> 00:06:27.900
read and for the past few weeks
 

00:06:27.900 --> 00:06:30.290
read and for the past few weeks
this toy that you know you are going to

00:06:30.290 --> 00:06:30.300
this toy that you know you are going to
 

00:06:30.300 --> 00:06:32.240
this toy that you know you are going to
use at least that many instances and

00:06:32.240 --> 00:06:32.250
use at least that many instances and
 

00:06:32.250 --> 00:06:34.900
use at least that many instances and
tells App Engine dashboard that

00:06:34.900 --> 00:06:34.910
tells App Engine dashboard that
 

00:06:34.910 --> 00:06:37.390
tells App Engine dashboard that
to reserve that many instances you don't

00:06:37.390 --> 00:06:37.400
to reserve that many instances you don't
 

00:06:37.400 --> 00:06:39.520
to reserve that many instances you don't
have to schedule them overtime just

00:06:39.520 --> 00:06:39.530
have to schedule them overtime just
 

00:06:39.530 --> 00:06:41.670
have to schedule them overtime just
saying for this week I when used as

00:06:41.670 --> 00:06:41.680
saying for this week I when used as
 

00:06:41.680 --> 00:06:42.880
saying for this week I when used as
administrator

00:06:42.880 --> 00:06:42.890
administrator
 

00:06:42.890 --> 00:06:45.790
administrator
what you gain is instead of paying the I

00:06:45.790 --> 00:06:45.800
what you gain is instead of paying the I
 

00:06:45.800 --> 00:06:48.520
what you gain is instead of paying the I
think eight cents per hour you're going

00:06:48.520 --> 00:06:48.530
think eight cents per hour you're going
 

00:06:48.530 --> 00:06:50.320
think eight cents per hour you're going
to pay five cents per hours for the

00:06:50.320 --> 00:06:50.330
to pay five cents per hours for the
 

00:06:50.330 --> 00:06:51.970
to pay five cents per hours for the
suite of instances you shouldn't think

00:06:51.970 --> 00:06:51.980
suite of instances you shouldn't think
 

00:06:51.980 --> 00:06:53.860
suite of instances you shouldn't think
we can say okay so it's almost half

00:06:53.860 --> 00:06:53.870
we can say okay so it's almost half
 

00:06:53.870 --> 00:06:57.310
we can say okay so it's almost half
prices all right let's go back to the

00:06:57.310 --> 00:06:57.320
prices all right let's go back to the
 

00:06:57.320 --> 00:07:01.090
prices all right let's go back to the
list so the second most expensive item

00:07:01.090 --> 00:07:01.100
list so the second most expensive item
 

00:07:01.100 --> 00:07:05.380
list so the second most expensive item
here our data store reads again can you

00:07:05.380 --> 00:07:05.390
here our data store reads again can you
 

00:07:05.390 --> 00:07:07.710
here our data store reads again can you
tell us what what you can do with that

00:07:07.710 --> 00:07:07.720
tell us what what you can do with that
 

00:07:07.720 --> 00:07:11.770
tell us what what you can do with that
yes so reading to data store is

00:07:11.770 --> 00:07:11.780
yes so reading to data store is
 

00:07:11.780 --> 00:07:14.680
yes so reading to data store is
expensive and also is not the fastest

00:07:14.680 --> 00:07:14.690
expensive and also is not the fastest
 

00:07:14.690 --> 00:07:17.230
expensive and also is not the fastest
operation you can do so App Engine

00:07:17.230 --> 00:07:17.240
operation you can do so App Engine
 

00:07:17.240 --> 00:07:19.600
operation you can do so App Engine
provide other platform memcache service

00:07:19.600 --> 00:07:19.610
provide other platform memcache service
 

00:07:19.610 --> 00:07:24.310
provide other platform memcache service
which memcache it's just a key key value

00:07:24.310 --> 00:07:24.320
which memcache it's just a key key value
 

00:07:24.320 --> 00:07:29.230
which memcache it's just a key key value
pair in memory on one one system so for

00:07:29.230 --> 00:07:29.240
pair in memory on one one system so for
 

00:07:29.240 --> 00:07:31.420
pair in memory on one one system so for
free on the platform you get a shared

00:07:31.420 --> 00:07:31.430
free on the platform you get a shared
 

00:07:31.430 --> 00:07:34.720
free on the platform you get a shared
memcache service which let you put in

00:07:34.720 --> 00:07:34.730
memcache service which let you put in
 

00:07:34.730 --> 00:07:37.660
memcache service which let you put in
there some cash content that you know

00:07:37.660 --> 00:07:37.670
there some cash content that you know
 

00:07:37.670 --> 00:07:40.690
there some cash content that you know
you're going to use quite a bit but it's

00:07:40.690 --> 00:07:40.700
you're going to use quite a bit but it's
 

00:07:40.700 --> 00:07:43.840
you're going to use quite a bit but it's
a - if Akash so at any point it can tell

00:07:43.840 --> 00:07:43.850
a - if Akash so at any point it can tell
 

00:07:43.850 --> 00:07:45.520
a - if Akash so at any point it can tell
you that it has forgotten the content

00:07:45.520 --> 00:07:45.530
you that it has forgotten the content
 

00:07:45.530 --> 00:07:47.110
you that it has forgotten the content
and you still must have it somewhere in

00:07:47.110 --> 00:07:47.120
and you still must have it somewhere in
 

00:07:47.120 --> 00:07:48.640
and you still must have it somewhere in
the datastore that's a throwback but

00:07:48.640 --> 00:07:48.650
the datastore that's a throwback but
 

00:07:48.650 --> 00:07:50.860
the datastore that's a throwback but
your your code should be should be

00:07:50.860 --> 00:07:50.870
your your code should be should be
 

00:07:50.870 --> 00:07:52.630
your your code should be should be
spotting us that if you don't find the

00:07:52.630 --> 00:07:52.640
spotting us that if you don't find the
 

00:07:52.640 --> 00:07:54.220
spotting us that if you don't find the
value in memcache you will then get a

00:07:54.220 --> 00:07:54.230
value in memcache you will then get a
 

00:07:54.230 --> 00:07:56.710
value in memcache you will then get a
datastore but your heat ratio image

00:07:56.710 --> 00:07:56.720
datastore but your heat ratio image
 

00:07:56.720 --> 00:07:58.750
datastore but your heat ratio image
cache should be sufficient for you to

00:07:58.750 --> 00:07:58.760
cache should be sufficient for you to
 

00:07:58.760 --> 00:08:02.370
cache should be sufficient for you to
say maybe one out of ten or more

00:08:02.370 --> 00:08:02.380
say maybe one out of ten or more
 

00:08:02.380 --> 00:08:05.680
say maybe one out of ten or more
requests on the typical difference

00:08:05.680 --> 00:08:05.690
requests on the typical difference
 

00:08:05.690 --> 00:08:07.420
requests on the typical difference
between hitting the datastore and

00:08:07.420 --> 00:08:07.430
between hitting the datastore and
 

00:08:07.430 --> 00:08:09.340
between hitting the datastore and
hitting the data store through memcache

00:08:09.340 --> 00:08:09.350
hitting the data store through memcache
 

00:08:09.350 --> 00:08:13.120
hitting the data store through memcache
is is a reduction of cost of the factor

00:08:13.120 --> 00:08:13.130
is is a reduction of cost of the factor
 

00:08:13.130 --> 00:08:17.470
is is a reduction of cost of the factor
of ten ten is just number I'm mentioning

00:08:17.470 --> 00:08:17.480
of ten ten is just number I'm mentioning
 

00:08:17.480 --> 00:08:20.500
of ten ten is just number I'm mentioning
here you need to miss significant

00:08:20.500 --> 00:08:20.510
here you need to miss significant
 

00:08:20.510 --> 00:08:25.180
here you need to miss significant
certain yeah and so the this shared

00:08:25.180 --> 00:08:25.190
certain yeah and so the this shared
 

00:08:25.190 --> 00:08:28.659
certain yeah and so the this shared
memcache has some capacity it can handle

00:08:28.659 --> 00:08:28.669
memcache has some capacity it can handle
 

00:08:28.669 --> 00:08:32.050
memcache has some capacity it can handle
so load and when do you know that you

00:08:32.050 --> 00:08:32.060
so load and when do you know that you
 

00:08:32.060 --> 00:08:35.920
so load and when do you know that you
are exceeding that so yeah it's shared

00:08:35.920 --> 00:08:35.930
are exceeding that so yeah it's shared
 

00:08:35.930 --> 00:08:38.770
are exceeding that so yeah it's shared
memcache there's no real numbers that we

00:08:38.770 --> 00:08:38.780
memcache there's no real numbers that we
 

00:08:38.780 --> 00:08:40.779
memcache there's no real numbers that we
can't kind of thing with about 100

00:08:40.779 --> 00:08:40.789
can't kind of thing with about 100
 

00:08:40.789 --> 00:08:43.750
can't kind of thing with about 100
megabyte of storage there there is share

00:08:43.750 --> 00:08:43.760
megabyte of storage there there is share
 

00:08:43.760 --> 00:08:44.500
megabyte of storage there there is share
the cost

00:08:44.500 --> 00:08:44.510
the cost
 

00:08:44.510 --> 00:08:47.440
the cost
perhaps understand at several what

00:08:47.440 --> 00:08:47.450
perhaps understand at several what
 

00:08:47.450 --> 00:08:50.860
perhaps understand at several what
happened or if some of your liberals

00:08:50.860 --> 00:08:50.870
happened or if some of your liberals
 

00:08:50.870 --> 00:08:53.020
happened or if some of your liberals
understand observer are using out of

00:08:53.020 --> 00:08:53.030
understand observer are using out of
 

00:08:53.030 --> 00:08:55.870
understand observer are using out of
memcache to nucleus of constrained young

00:08:55.870 --> 00:08:55.880
memcache to nucleus of constrained young
 

00:08:55.880 --> 00:08:58.900
memcache to nucleus of constrained young
man cache lifetime may be reduced so

00:08:58.900 --> 00:08:58.910
man cache lifetime may be reduced so
 

00:08:58.910 --> 00:09:02.350
man cache lifetime may be reduced so
when you see your cache heat rate and we

00:09:02.350 --> 00:09:02.360
when you see your cache heat rate and we
 

00:09:02.360 --> 00:09:04.810
when you see your cache heat rate and we
used compared to - usually it's most

00:09:04.810 --> 00:09:04.820
used compared to - usually it's most
 

00:09:04.820 --> 00:09:06.310
used compared to - usually it's most
likely because you're kind of hitting

00:09:06.310 --> 00:09:06.320
likely because you're kind of hitting
 

00:09:06.320 --> 00:09:09.310
likely because you're kind of hitting
the limit on the shared memcache so the

00:09:09.310 --> 00:09:09.320
the limit on the shared memcache so the
 

00:09:09.320 --> 00:09:12.100
the limit on the shared memcache so the
shared memcache is free it's normal that

00:09:12.100 --> 00:09:12.110
shared memcache is free it's normal that
 

00:09:12.110 --> 00:09:15.430
shared memcache is free it's normal that
it has some limits what can you do - or

00:09:15.430 --> 00:09:15.440
it has some limits what can you do - or
 

00:09:15.440 --> 00:09:17.320
it has some limits what can you do - or
to use water in the cache if that's what

00:09:17.320 --> 00:09:17.330
to use water in the cache if that's what
 

00:09:17.330 --> 00:09:18.820
to use water in the cache if that's what
your application limits yes open

00:09:18.820 --> 00:09:18.830
your application limits yes open
 

00:09:18.830 --> 00:09:20.980
your application limits yes open
application except engage having quite

00:09:20.980 --> 00:09:20.990
application except engage having quite
 

00:09:20.990 --> 00:09:23.560
application except engage having quite
heavy traffic and we are making good use

00:09:23.560 --> 00:09:23.570
heavy traffic and we are making good use
 

00:09:23.570 --> 00:09:26.740
heavy traffic and we are making good use
of what content ekt in memcache so

00:09:26.740 --> 00:09:26.750
of what content ekt in memcache so
 

00:09:26.750 --> 00:09:29.140
of what content ekt in memcache so
instead of having about 100 megabytes of

00:09:29.140 --> 00:09:29.150
instead of having about 100 megabytes of
 

00:09:29.150 --> 00:09:33.610
instead of having about 100 megabytes of
storage you rent instances of you know

00:09:33.610 --> 00:09:33.620
storage you rent instances of you know
 

00:09:33.620 --> 00:09:37.840
storage you rent instances of you know
one gigabyte and I think the instance is

00:09:37.840 --> 00:09:37.850
one gigabyte and I think the instance is
 

00:09:37.850 --> 00:09:40.240
one gigabyte and I think the instance is
rated for up to 10,000 operation per

00:09:40.240 --> 00:09:40.250
rated for up to 10,000 operation per
 

00:09:40.250 --> 00:09:43.420
rated for up to 10,000 operation per
second ok so that's quite significant a

00:09:43.420 --> 00:09:43.430
second ok so that's quite significant a
 

00:09:43.430 --> 00:09:45.820
second ok so that's quite significant a
gigabyte of data and 10,000 operations

00:09:45.820 --> 00:09:45.830
gigabyte of data and 10,000 operations
 

00:09:45.830 --> 00:09:48.100
gigabyte of data and 10,000 operations
per second you can handle a lot of load

00:09:48.100 --> 00:09:48.110
per second you can handle a lot of load
 

00:09:48.110 --> 00:09:51.280
per second you can handle a lot of load
with that definitely you can get civil

00:09:51.280 --> 00:09:51.290
with that definitely you can get civil
 

00:09:51.290 --> 00:09:54.130
with that definitely you can get civil
of this one gigabyte instances if you

00:09:54.130 --> 00:09:54.140
of this one gigabyte instances if you
 

00:09:54.140 --> 00:09:55.810
of this one gigabyte instances if you
need even more and more operation per

00:09:55.810 --> 00:09:55.820
need even more and more operation per
 

00:09:55.820 --> 00:09:59.140
need even more and more operation per
second so it's not something typical for

00:09:59.140 --> 00:09:59.150
second so it's not something typical for
 

00:09:59.150 --> 00:10:02.350
second so it's not something typical for
small or startup product and want to do

00:10:02.350 --> 00:10:02.360
small or startup product and want to do
 

00:10:02.360 --> 00:10:04.720
small or startup product and want to do
you see that the expiration of your

00:10:04.720 --> 00:10:04.730
you see that the expiration of your
 

00:10:04.730 --> 00:10:07.030
you see that the expiration of your
content is being pressured and that's

00:10:07.030 --> 00:10:07.040
content is being pressured and that's
 

00:10:07.040 --> 00:10:08.620
content is being pressured and that's
what you can hear to me that because

00:10:08.620 --> 00:10:08.630
what you can hear to me that because
 

00:10:08.630 --> 00:10:11.110
what you can hear to me that because
twice is not expensive what you get it

00:10:11.110 --> 00:10:11.120
twice is not expensive what you get it
 

00:10:11.120 --> 00:10:15.090
twice is not expensive what you get it
88 $80 per month for one gigabyte

00:10:15.090 --> 00:10:15.100
88 $80 per month for one gigabyte
 

00:10:15.100 --> 00:10:20.160
88 $80 per month for one gigabyte
instances let's get back to this list so

00:10:20.160 --> 00:10:20.170
instances let's get back to this list so
 

00:10:20.170 --> 00:10:24.760
instances let's get back to this list so
next or data store who writes those who

00:10:24.760 --> 00:10:24.770
next or data store who writes those who
 

00:10:24.770 --> 00:10:26.860
next or data store who writes those who
told me or even more expensive or even

00:10:26.860 --> 00:10:26.870
told me or even more expensive or even
 

00:10:26.870 --> 00:10:30.100
told me or even more expensive or even
slower so again what can you do it you

00:10:30.100 --> 00:10:30.110
slower so again what can you do it you
 

00:10:30.110 --> 00:10:33.430
slower so again what can you do it you
to health it there so the one thing you

00:10:33.430 --> 00:10:33.440
to health it there so the one thing you
 

00:10:33.440 --> 00:10:35.320
to health it there so the one thing you
need to keep in mind is every time you

00:10:35.320 --> 00:10:35.330
need to keep in mind is every time you
 

00:10:35.330 --> 00:10:37.840
need to keep in mind is every time you
persist an entity in the dollar store

00:10:37.840 --> 00:10:37.850
persist an entity in the dollar store
 

00:10:37.850 --> 00:10:40.030
persist an entity in the dollar store
you're not only processed every

00:10:40.030 --> 00:10:40.040
you're not only processed every
 

00:10:40.040 --> 00:10:42.340
you're not only processed every
attribute of this quantity every field

00:10:42.340 --> 00:10:42.350
attribute of this quantity every field
 

00:10:42.350 --> 00:10:46.210
attribute of this quantity every field
but you also ask appengine to create an

00:10:46.210 --> 00:10:46.220
but you also ask appengine to create an
 

00:10:46.220 --> 00:10:49.360
but you also ask appengine to create an
index for each of these attendant like

00:10:49.360 --> 00:10:49.370
index for each of these attendant like
 

00:10:49.370 --> 00:10:51.790
index for each of these attendant like
not typically very usual whenever the

00:10:51.790 --> 00:10:51.800
not typically very usual whenever the
 

00:10:51.800 --> 00:10:53.800
not typically very usual whenever the
person's email address maybe a phone

00:10:53.800 --> 00:10:53.810
person's email address maybe a phone
 

00:10:53.810 --> 00:10:56.420
person's email address maybe a phone
number processing that will

00:10:56.420 --> 00:10:56.430
number processing that will
 

00:10:56.430 --> 00:10:58.880
number processing that will
will not have three right but will have

00:10:58.880 --> 00:10:58.890
will not have three right but will have
 

00:10:58.890 --> 00:11:01.850
will not have three right but will have
six right for each indexes as well on

00:11:01.850 --> 00:11:01.860
six right for each indexes as well on
 

00:11:01.860 --> 00:11:04.340
six right for each indexes as well on
top of that if you need composite

00:11:04.340 --> 00:11:04.350
top of that if you need composite
 

00:11:04.350 --> 00:11:06.260
top of that if you need composite
indexes like if you need to be able to

00:11:06.260 --> 00:11:06.270
indexes like if you need to be able to
 

00:11:06.270 --> 00:11:09.140
indexes like if you need to be able to
do queries to find people on phone

00:11:09.140 --> 00:11:09.150
do queries to find people on phone
 

00:11:09.150 --> 00:11:11.300
do queries to find people on phone
number or email address not sure what

00:11:11.300 --> 00:11:11.310
number or email address not sure what
 

00:11:11.310 --> 00:11:13.250
number or email address not sure what
you would do that you have to define an

00:11:13.250 --> 00:11:13.260
you would do that you have to define an
 

00:11:13.260 --> 00:11:16.190
you would do that you have to define an
additional index in your object

00:11:16.190 --> 00:11:16.200
additional index in your object
 

00:11:16.200 --> 00:11:19.240
additional index in your object
definition that will be also on write

00:11:19.240 --> 00:11:19.250
definition that will be also on write
 

00:11:19.250 --> 00:11:23.660
definition that will be also on write
another result right operation so there

00:11:23.660 --> 00:11:23.670
another result right operation so there
 

00:11:23.670 --> 00:11:27.380
another result right operation so there
is a write amplification effect that

00:11:27.380 --> 00:11:27.390
is a write amplification effect that
 

00:11:27.390 --> 00:11:30.410
is a write amplification effect that
when you write one entity every property

00:11:30.410 --> 00:11:30.420
when you write one entity every property
 

00:11:30.420 --> 00:11:32.780
when you write one entity every property
in the entity that is indexed produces

00:11:32.780 --> 00:11:32.790
in the entity that is indexed produces
 

00:11:32.790 --> 00:11:36.380
in the entity that is indexed produces
an additional right and also every pair

00:11:36.380 --> 00:11:36.390
an additional right and also every pair
 

00:11:36.390 --> 00:11:38.420
an additional right and also every pair
of properties that is indexed in a

00:11:38.420 --> 00:11:38.430
of properties that is indexed in a
 

00:11:38.430 --> 00:11:40.310
of properties that is indexed in a
composite index that also produces an

00:11:40.310 --> 00:11:40.320
composite index that also produces an
 

00:11:40.320 --> 00:11:43.190
composite index that also produces an
additional right yes so all right so you

00:11:43.190 --> 00:11:43.200
additional right yes so all right so you
 

00:11:43.200 --> 00:11:44.720
additional right yes so all right so you
have to be very careful with that you

00:11:44.720 --> 00:11:44.730
have to be very careful with that you
 

00:11:44.730 --> 00:11:46.250
have to be very careful with that you
have to be careful in collecting money

00:11:46.250 --> 00:11:46.260
have to be careful in collecting money
 

00:11:46.260 --> 00:11:48.650
have to be careful in collecting money
and you have a way school you know some

00:11:48.650 --> 00:11:48.660
and you have a way school you know some
 

00:11:48.660 --> 00:11:50.210
and you have a way school you know some
some property and your definition of

00:11:50.210 --> 00:11:50.220
some property and your definition of
 

00:11:50.220 --> 00:11:53.240
some property and your definition of
object to tell App Engine please do not

00:11:53.240 --> 00:11:53.250
object to tell App Engine please do not
 

00:11:53.250 --> 00:11:55.910
object to tell App Engine please do not
create an index for this attribute for

00:11:55.910 --> 00:11:55.920
create an index for this attribute for
 

00:11:55.920 --> 00:11:57.320
create an index for this attribute for
example you know the name of the person

00:11:57.320 --> 00:11:57.330
example you know the name of the person
 

00:11:57.330 --> 00:11:59.510
example you know the name of the person
is something you search on so you just

00:11:59.510 --> 00:11:59.520
is something you search on so you just
 

00:11:59.520 --> 00:12:03.410
is something you search on so you just
say magazines attribute not indexed and

00:12:03.410 --> 00:12:03.420
say magazines attribute not indexed and
 

00:12:03.420 --> 00:12:04.820
say magazines attribute not indexed and
that's where you can save scene if you

00:12:04.820 --> 00:12:04.830
that's where you can save scene if you
 

00:12:04.830 --> 00:12:06.590
that's where you can save scene if you
can clean the number of try corporations

00:12:06.590 --> 00:12:06.600
can clean the number of try corporations
 

00:12:06.600 --> 00:12:08.750
can clean the number of try corporations
but that will prevent you from ever

00:12:08.750 --> 00:12:08.760
but that will prevent you from ever
 

00:12:08.760 --> 00:12:11.690
but that will prevent you from ever
querying by that property if it's

00:12:11.690 --> 00:12:11.700
querying by that property if it's
 

00:12:11.700 --> 00:12:13.700
querying by that property if it's
correct not in there all right but

00:12:13.700 --> 00:12:13.710
correct not in there all right but
 

00:12:13.710 --> 00:12:17.050
correct not in there all right but
that's what you are it's a trade-off yes

00:12:17.050 --> 00:12:17.060
that's what you are it's a trade-off yes
 

00:12:17.060 --> 00:12:20.650
that's what you are it's a trade-off yes
everybody's like cost versus no atrophy

00:12:20.650 --> 00:12:20.660
everybody's like cost versus no atrophy
 

00:12:20.660 --> 00:12:23.780
everybody's like cost versus no atrophy
and so the last item on this list here

00:12:23.780 --> 00:12:23.790
and so the last item on this list here
 

00:12:23.790 --> 00:12:26.870
and so the last item on this list here
is bandwidth so it doesn't seem to be

00:12:26.870 --> 00:12:26.880
is bandwidth so it doesn't seem to be
 

00:12:26.880 --> 00:12:29.210
is bandwidth so it doesn't seem to be
that significant in your case but you

00:12:29.210 --> 00:12:29.220
that significant in your case but you
 

00:12:29.220 --> 00:12:30.830
that significant in your case but you
told me that you optimize those quite

00:12:30.830 --> 00:12:30.840
told me that you optimize those quite
 

00:12:30.840 --> 00:12:32.870
told me that you optimize those quite
well well what did you do what did you

00:12:32.870 --> 00:12:32.880
well well what did you do what did you
 

00:12:32.880 --> 00:12:36.800
well well what did you do what did you
do to achieve this this Lola similar

00:12:36.800 --> 00:12:36.810
do to achieve this this Lola similar
 

00:12:36.810 --> 00:12:39.230
do to achieve this this Lola similar
things here as well on App Engine for

00:12:39.230 --> 00:12:39.240
things here as well on App Engine for
 

00:12:39.240 --> 00:12:41.750
things here as well on App Engine for
Java for example you are hosted on the

00:12:41.750 --> 00:12:41.760
Java for example you are hosted on the
 

00:12:41.760 --> 00:12:43.910
Java for example you are hosted on the
Sabbath container so you have complete

00:12:43.910 --> 00:12:43.920
Sabbath container so you have complete
 

00:12:43.920 --> 00:12:47.570
Sabbath container so you have complete
access to the HTTP headers there are

00:12:47.570 --> 00:12:47.580
access to the HTTP headers there are
 

00:12:47.580 --> 00:12:50.060
access to the HTTP headers there are
headers specific for the caching

00:12:50.060 --> 00:12:50.070
headers specific for the caching
 

00:12:50.070 --> 00:12:53.210
headers specific for the caching
instruction telling the browser to keep

00:12:53.210 --> 00:12:53.220
instruction telling the browser to keep
 

00:12:53.220 --> 00:12:54.980
instruction telling the browser to keep
your content for a certain amount of

00:12:54.980 --> 00:12:54.990
your content for a certain amount of
 

00:12:54.990 --> 00:12:58.100
your content for a certain amount of
time and so by playing with cache

00:12:58.100 --> 00:12:58.110
time and so by playing with cache
 

00:12:58.110 --> 00:13:00.170
time and so by playing with cache
control headers you can you can leverage

00:13:00.170 --> 00:13:00.180
control headers you can you can leverage
 

00:13:00.180 --> 00:13:03.890
control headers you can you can leverage
a resume addiction of of heat and your

00:13:03.890 --> 00:13:03.900
a resume addiction of of heat and your
 

00:13:03.900 --> 00:13:04.580
a resume addiction of of heat and your
application

00:13:04.580 --> 00:13:04.590
application
 

00:13:04.590 --> 00:13:06.650
application
telling the browser to reuse what they

00:13:06.650 --> 00:13:06.660
telling the browser to reuse what they
 

00:13:06.660 --> 00:13:09.759
telling the browser to reuse what they
have so much

00:13:09.759 --> 00:13:09.769
have so much
 

00:13:09.769 --> 00:13:12.699
have so much
and also well of course that's the

00:13:12.699 --> 00:13:12.709
and also well of course that's the
 

00:13:12.709 --> 00:13:16.809
and also well of course that's the
basics but you should be careful of the

00:13:16.809 --> 00:13:16.819
basics but you should be careful of the
 

00:13:16.819 --> 00:13:19.419
basics but you should be careful of the
the resources that you use images

00:13:19.419 --> 00:13:19.429
the resources that you use images
 

00:13:19.429 --> 00:13:21.579
the resources that you use images
JavaScript resources and so on the

00:13:21.579 --> 00:13:21.589
JavaScript resources and so on the
 

00:13:21.589 --> 00:13:25.540
JavaScript resources and so on the
static resources write something as a

00:13:25.540 --> 00:13:25.550
static resources write something as a
 

00:13:25.550 --> 00:13:27.369
static resources write something as a
convention here as well not applicable

00:13:27.369 --> 00:13:27.379
convention here as well not applicable
 

00:13:27.379 --> 00:13:29.109
convention here as well not applicable
for everybody but since we are using

00:13:29.109 --> 00:13:29.119
for everybody but since we are using
 

00:13:29.119 --> 00:13:31.989
for everybody but since we are using
Java for our back-end and our team is

00:13:31.989 --> 00:13:31.999
Java for our back-end and our team is
 

00:13:31.999 --> 00:13:35.079
Java for our back-end and our team is
very with Java and may also use Java to

00:13:35.079 --> 00:13:35.089
very with Java and may also use Java to
 

00:13:35.089 --> 00:13:37.079
very with Java and may also use Java to
create objects trips was a great

00:13:37.079 --> 00:13:37.089
create objects trips was a great
 

00:13:37.089 --> 00:13:42.519
create objects trips was a great
framework so by doing that offer the

00:13:42.519 --> 00:13:42.529
framework so by doing that offer the
 

00:13:42.529 --> 00:13:44.769
framework so by doing that offer the
flexibility for testing debugging but

00:13:44.769 --> 00:13:44.779
flexibility for testing debugging but
 

00:13:44.779 --> 00:13:47.499
flexibility for testing debugging but
also rely on the quick compiler to

00:13:47.499 --> 00:13:47.509
also rely on the quick compiler to
 

00:13:47.509 --> 00:13:50.619
also rely on the quick compiler to
create highly optimized JavaScript code

00:13:50.619 --> 00:13:50.629
create highly optimized JavaScript code
 

00:13:50.629 --> 00:13:53.889
create highly optimized JavaScript code
for each target so we won't serve the

00:13:53.889 --> 00:13:53.899
for each target so we won't serve the
 

00:13:53.899 --> 00:13:56.410
for each target so we won't serve the
same JavaScript to a Firefox user

00:13:56.410 --> 00:13:56.420
same JavaScript to a Firefox user
 

00:13:56.420 --> 00:13:59.590
same JavaScript to a Firefox user
compared to abuser which mean we we

00:13:59.590 --> 00:13:59.600
compared to abuser which mean we we
 

00:13:59.600 --> 00:14:01.629
compared to abuser which mean we we
serve the smallest possible amount of

00:14:01.629 --> 00:14:01.639
serve the smallest possible amount of
 

00:14:01.639 --> 00:14:04.090
serve the smallest possible amount of
data to each of all of our customers

00:14:04.090 --> 00:14:04.100
data to each of all of our customers
 

00:14:04.100 --> 00:14:09.460
data to each of all of our customers
I think you should all and there is one

00:14:09.460 --> 00:14:09.470
I think you should all and there is one
 

00:14:09.470 --> 00:14:11.979
I think you should all and there is one
more point that I would like you to

00:14:11.979 --> 00:14:11.989
more point that I would like you to
 

00:14:11.989 --> 00:14:17.309
more point that I would like you to
touch upon and you told me that you have

00:14:17.309 --> 00:14:17.319
touch upon and you told me that you have
 

00:14:17.319 --> 00:14:21.519
touch upon and you told me that you have
started using App Engine before it even

00:14:21.519 --> 00:14:21.529
started using App Engine before it even
 

00:14:21.529 --> 00:14:24.309
started using App Engine before it even
had a name can you tell us a bit more

00:14:24.309 --> 00:14:24.319
had a name can you tell us a bit more
 

00:14:24.319 --> 00:14:27.429
had a name can you tell us a bit more
about that yeah back I think it was very

00:14:27.429 --> 00:14:27.439
about that yeah back I think it was very
 

00:14:27.439 --> 00:14:30.639
about that yeah back I think it was very
very soon eight I was caught writing for

00:14:30.639 --> 00:14:30.649
very soon eight I was caught writing for
 

00:14:30.649 --> 00:14:33.129
very soon eight I was caught writing for
Google for some gadget ads project

00:14:33.129 --> 00:14:33.139
Google for some gadget ads project
 

00:14:33.139 --> 00:14:36.189
Google for some gadget ads project
meaning this very smart ads which show

00:14:36.189 --> 00:14:36.199
meaning this very smart ads which show
 

00:14:36.199 --> 00:14:38.829
meaning this very smart ads which show
content context on to what the person's

00:14:38.829 --> 00:14:38.839
content context on to what the person's
 

00:14:38.839 --> 00:14:42.189
content context on to what the person's
search where they are located and as

00:14:42.189 --> 00:14:42.199
search where they are located and as
 

00:14:42.199 --> 00:14:44.470
search where they are located and as
part of doing this contracting had

00:14:44.470 --> 00:14:44.480
part of doing this contracting had
 

00:14:44.480 --> 00:14:47.710
part of doing this contracting had
Authority access to the platform Python

00:14:47.710 --> 00:14:47.720
Authority access to the platform Python
 

00:14:47.720 --> 00:14:51.519
Authority access to the platform Python
only at the time very limited to all the

00:14:51.519 --> 00:14:51.529
only at the time very limited to all the
 

00:14:51.529 --> 00:14:53.769
only at the time very limited to all the
functionalities but it allowed me to see

00:14:53.769 --> 00:14:53.779
functionalities but it allowed me to see
 

00:14:53.779 --> 00:14:56.319
functionalities but it allowed me to see
the value of having a system that

00:14:56.319 --> 00:14:56.329
the value of having a system that
 

00:14:56.329 --> 00:14:57.970
the value of having a system that
skilled in itself as you can imagine

00:14:57.970 --> 00:14:57.980
skilled in itself as you can imagine
 

00:14:57.980 --> 00:15:01.079
skilled in itself as you can imagine
these ad campaigns spark very quickly

00:15:01.079 --> 00:15:01.089
these ad campaigns spark very quickly
 

00:15:01.089 --> 00:15:04.449
these ad campaigns spark very quickly
when the ad companies lounge and then

00:15:04.449 --> 00:15:04.459
when the ad companies lounge and then
 

00:15:04.459 --> 00:15:06.280
when the ad companies lounge and then
scale down quickly as we're going to add

00:15:06.280 --> 00:15:06.290
scale down quickly as we're going to add
 

00:15:06.290 --> 00:15:08.590
scale down quickly as we're going to add
companies turned down so the value

00:15:08.590 --> 00:15:08.600
companies turned down so the value
 

00:15:08.600 --> 00:15:10.749
companies turned down so the value
proposition of App Engine to go to scale

00:15:10.749 --> 00:15:10.759
proposition of App Engine to go to scale
 

00:15:10.759 --> 00:15:12.809
proposition of App Engine to go to scale
and just pay for what you use

00:15:12.809 --> 00:15:12.819
and just pay for what you use
 

00:15:12.819 --> 00:15:16.059
and just pay for what you use
it's huge in the situation so that was

00:15:16.059 --> 00:15:16.069
it's huge in the situation so that was
 

00:15:16.069 --> 00:15:21.069
it's huge in the situation so that was
back in 2008 or x18 2008 alright so you

00:15:21.069 --> 00:15:21.079
back in 2008 or x18 2008 alright so you
 

00:15:21.079 --> 00:15:22.970
back in 2008 or x18 2008 alright so you
are here having an app engine

00:15:22.970 --> 00:15:22.980
are here having an app engine
 

00:15:22.980 --> 00:15:27.889
are here having an app engine
expert since 2008 yeah and that's

00:15:27.889 --> 00:15:27.899
expert since 2008 yeah and that's
 

00:15:27.899 --> 00:15:28.550
expert since 2008 yeah and that's
impressive

00:15:28.550 --> 00:15:28.560
impressive
 

00:15:28.560 --> 00:15:30.680
impressive
thank you buddy the thing is when we

00:15:30.680 --> 00:15:30.690
thank you buddy the thing is when we
 

00:15:30.690 --> 00:15:32.329
thank you buddy the thing is when we
decided to launch step and get you

00:15:32.329 --> 00:15:32.339
decided to launch step and get you
 

00:15:32.339 --> 00:15:37.970
decided to launch step and get you
sooner 2009 so one went bigger later we

00:15:37.970 --> 00:15:37.980
sooner 2009 so one went bigger later we
 

00:15:37.980 --> 00:15:40.129
sooner 2009 so one went bigger later we
were already convinced that the platform

00:15:40.129 --> 00:15:40.139
were already convinced that the platform
 

00:15:40.139 --> 00:15:42.230
were already convinced that the platform
was what we wanted to do with a small

00:15:42.230 --> 00:15:42.240
was what we wanted to do with a small
 

00:15:42.240 --> 00:15:45.910
was what we wanted to do with a small
team to have the capacity to go quickly

00:15:45.910 --> 00:15:45.920
team to have the capacity to go quickly
 

00:15:45.920 --> 00:15:48.110
team to have the capacity to go quickly
let me mention something else here since

00:15:48.110 --> 00:15:48.120
let me mention something else here since
 

00:15:48.120 --> 00:15:51.860
let me mention something else here since
the more time typically when your host

00:15:51.860 --> 00:15:51.870
the more time typically when your host
 

00:15:51.870 --> 00:15:54.139
the more time typically when your host
application under the instance based

00:15:54.139 --> 00:15:54.149
application under the instance based
 

00:15:54.149 --> 00:15:56.060
application under the instance based
platform and you have to you know kind

00:15:56.060 --> 00:15:56.070
platform and you have to you know kind
 

00:15:56.070 --> 00:15:58.490
platform and you have to you know kind
of provision your instances yourself you

00:15:58.490 --> 00:15:58.500
of provision your instances yourself you
 

00:15:58.500 --> 00:16:02.480
of provision your instances yourself you
we grow by by chunk will you if you see

00:16:02.480 --> 00:16:02.490
we grow by by chunk will you if you see
 

00:16:02.490 --> 00:16:04.160
we grow by by chunk will you if you see
your perfect is growing they would have

00:16:04.160 --> 00:16:04.170
your perfect is growing they would have
 

00:16:04.170 --> 00:16:06.079
your perfect is growing they would have
to get an increase of instances of this

00:16:06.079 --> 00:16:06.089
to get an increase of instances of this
 

00:16:06.089 --> 00:16:09.620
to get an increase of instances of this
traffic scaling down is difficult at

00:16:09.620 --> 00:16:09.630
traffic scaling down is difficult at
 

00:16:09.630 --> 00:16:11.180
traffic scaling down is difficult at
night when the traffic goes down you

00:16:11.180 --> 00:16:11.190
night when the traffic goes down you
 

00:16:11.190 --> 00:16:12.889
night when the traffic goes down you
typically don't turn off instances

00:16:12.889 --> 00:16:12.899
typically don't turn off instances
 

00:16:12.899 --> 00:16:15.139
typically don't turn off instances
because it's a lot of food product with

00:16:15.139 --> 00:16:15.149
because it's a lot of food product with
 

00:16:15.149 --> 00:16:17.960
because it's a lot of food product with
App Engine your growth would be linear

00:16:17.960 --> 00:16:17.970
App Engine your growth would be linear
 

00:16:17.970 --> 00:16:21.110
App Engine your growth would be linear
because you you pay for what you use the

00:16:21.110 --> 00:16:21.120
because you you pay for what you use the
 

00:16:21.120 --> 00:16:22.759
because you you pay for what you use the
platform will add instant scenes when

00:16:22.759 --> 00:16:22.769
platform will add instant scenes when
 

00:16:22.769 --> 00:16:24.829
platform will add instant scenes when
needed when the traffic slows down at

00:16:24.829 --> 00:16:24.839
needed when the traffic slows down at
 

00:16:24.839 --> 00:16:27.050
needed when the traffic slows down at
night then we'll take down instances and

00:16:27.050 --> 00:16:27.060
night then we'll take down instances and
 

00:16:27.060 --> 00:16:29.090
night then we'll take down instances and
you will be charged so it's a huge

00:16:29.090 --> 00:16:29.100
you will be charged so it's a huge
 

00:16:29.100 --> 00:16:30.980
you will be charged so it's a huge
difference in the paradigm compared to

00:16:30.980 --> 00:16:30.990
difference in the paradigm compared to
 

00:16:30.990 --> 00:16:34.850
difference in the paradigm compared to
traditional hosting all right thank you

00:16:34.850 --> 00:16:34.860
traditional hosting all right thank you
 

00:16:34.860 --> 00:16:37.040
traditional hosting all right thank you
very much Cheryl thank you for being

00:16:37.040 --> 00:16:37.050
very much Cheryl thank you for being
 

00:16:37.050 --> 00:16:41.110
very much Cheryl thank you for being
with us here at root access Berlin and

00:16:41.110 --> 00:16:41.120
with us here at root access Berlin and
 

00:16:41.120 --> 00:16:44.600
with us here at root access Berlin and
we'll be seeing you in the next episode

00:16:44.600 --> 00:16:44.610
we'll be seeing you in the next episode
 

00:16:44.610 --> 00:16:47.090
we'll be seeing you in the next episode
of root access Berlin thank you thank

00:16:47.090 --> 00:16:47.100
of root access Berlin thank you thank
 

00:16:47.100 --> 00:16:50.060
of root access Berlin thank you thank
you Martine you me

