WEBVTT
Kind: captions
Language: en

00:00:01.222 --> 00:00:03.344
﻿Now we showed how useful it is to have an API

00:00:03.344 --> 00:00:05.822
for regular expressions that we can say

00:00:05.822 --> 00:00:15.379
for example plus an option, alternative of literal A, literal B

00:00:15.379 --> 00:00:18.899
and these function calls are convenient to manipulate

00:00:18.899 --> 00:00:20.488
but that’s an awful lot to type,

00:00:20.488 --> 00:00:22.353
especially when the string notation for

00:00:22.353 --> 00:00:24.423
regular expressions is so much simpler,

00:00:24.423 --> 00:00:28.284
we can represent this as this simple string,

00:00:28.284 --> 00:00:31.938
and so what I want you to do in this homework

00:00:31.938 --> 00:00:34.750
is to write a grammar and a parser that maps

00:00:34.750 --> 00:00:37.500
from this string to this expression.

00:00:37.500 --> 00:00:41.019
So you should first define regular expression grammar

00:00:41.019 --> 00:00:43.150
using the tools that we’ve provided,

00:00:43.150 --> 00:00:45.371
build the parser for that, that’s going to give you a tree,

00:00:45.371 --> 00:00:49.941
so when we parse let’s say, RE is our main symbol,

00:00:49.941 --> 00:00:52.725
then some text with this grammar

00:00:52.725 --> 00:00:54.827
then that’s going to give you some sort of tree,

00:00:54.827 --> 00:00:58.025
but it’s not quite this API form,

00:00:58.025 --> 00:01:02.373
so then I want you to write another function to convert

00:01:02.373 --> 00:01:05.259
from the tree to the API,

00:01:05.259 --> 00:01:06.810
and so here’s what it looks like.

00:01:06.810 --> 00:01:08.704
You are going to define your grammar,

00:01:08.704 --> 00:01:10.968
RE is going to be the main left-hand side symbol

00:01:10.968 --> 00:01:13.225
to parse the regular expression that’s given for you,

00:01:13.225 --> 00:01:15.179
you parse it and convert it

00:01:15.317 --> 00:01:17.994
and then you have to convert this

00:01:17.994 --> 00:01:21.019
to make that cause into the API.

