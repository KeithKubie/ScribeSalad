WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.730
Well, today is hardcore Coding Theory,
relatively speaking. It's still "64 shades

00:00:05.730 --> 00:00:09.660
of Grey" for those of you looking for the
sequel.  And remember, the sequel is always

00:00:09.660 --> 00:00:18.000
better than the original thing!
&gt;&gt; Sean: Is  this "50 shades Darker then? 
	"64 Shades Darker ?"
&gt;&gt; DFB: Yeah! "64 Shades Darker!"

00:00:18.000 --> 00:00:25.439
To send pictures back from Mariner 9 a
Reed-Muller code was used and Irving

00:00:25.439 --> 00:00:29.039
Reed is a very famous coding theorist.
And this worked incredibly well; they [JPL]

00:00:29.039 --> 00:00:33.600
were ever so pleased about the results
they got from this.  The nice thing about

00:00:33.600 --> 00:00:38.700
it from the theory point of view is that
if you want to go all mathematical and say:

00:00:38.700 --> 00:00:45.300
"It's a multi-variable polynomial 
blah blah... y' know ..."
You can do that. Because it is. But I

00:00:45.300 --> 00:00:51.390
can disguise that for you with Reed-Muller
and I can say: "Look everyone, trust

00:00:51.390 --> 00:00:56.879
me. It's just an exercise in recursion
that we're all familiar with". And you've

00:00:56.879 --> 00:01:01.649
got to be prepared to do concatenation
of bit strings which I think in North

00:01:01.649 --> 00:01:05.280
America and Canada is called bit
fiddling, but here in the UK we call it

00:01:05.280 --> 00:01:09.990
bit twiddling. Bit twiddling? Fiddling? 
We don't mind which. Recursion and bit

00:01:09.990 --> 00:01:16.229
twiddling is all we need to understand
how those pictures were sent. But because

00:01:16.229 --> 00:01:20.490
it's a recursive procedure it takes us
almost on a sort of magical mystery tour

00:01:20.490 --> 00:01:25.020
of everything we've ever done about
codes. Because as you build up to

00:01:25.020 --> 00:01:29.880
something usable - in terms of lots of
error correction - you meet lots of other,

00:01:29.880 --> 00:01:36.329
almost familiar, friends on the way. 
The [n, k, d] notation is what we're going to use.

00:01:36.329 --> 00:01:41.340
This comes from a previous video where
we qualitatively took a look at pictures

00:01:41.340 --> 00:01:44.100
from Mars and how they were sent. But, of
course, we're now getting down to

00:01:44.100 --> 00:01:49.710
hard-core details involving recursion and
bit twiddling. But, just for revision, the

00:01:49.710 --> 00:01:54.210
total number of bits in what you're
sending. including payload bits [i.e. message

00:01:54.210 --> 00:01:59.369
bits] and the parity check bits, that's 'n'.
Within that, how many bits are devoted to

00:01:59.369 --> 00:02:04.680
the message itself, 'k'.  What's your distance?
And the bigger that number is the more

00:02:04.680 --> 00:02:10.429
errors you can correct. So the
correctable errors is your distance,

00:02:10.429 --> 00:02:17.599
here minus 1, divided by 2, and take the "floor of" 
The thing that we are headed for at the end

00:02:17.599 --> 00:02:25.459
of our recursion is 32 bits total, 6
bits of message.  16 is the distance. This

00:02:25.459 --> 00:02:31.700
magic code, when we've got there, will
actually correct up to 7 wrong bits

00:02:31.700 --> 00:02:37.250
in 32. And, I mean, some of you will be saying: 
"Why couldn't you do this earlier?!" The answer

00:02:37.250 --> 00:02:43.459
is: "It's a trade-off". The trade-off is
[that] we've only got six payload bits, whereas

00:02:43.459 --> 00:02:46.909
with things like Hamming codes it would
have been more like 26. You pay your

00:02:46.909 --> 00:02:52.760
money and you make your choice! OK, well how
do we do this recursion then? How does it

00:02:52.760 --> 00:02:57.950
develop? Every recursion has to have a
sort of bottom point where it finishes.

00:02:57.950 --> 00:03:04.400
You know, factorial(0) is 1. That sort of
thing. Well, here we're going to develop

00:03:04.400 --> 00:03:12.769
the ... [what are] known in some textbooks as the 
H_n codes. And the reason for that is that

00:03:12.769 --> 00:03:19.099
they are actually derived from things
called Hadamard matrices. There's lots

00:03:19.099 --> 00:03:24.799
of ways of getting at these Reed-Muller
codes. But the fact that there is a

00:03:24.799 --> 00:03:30.739
Hadamard matrix method of getting at
it is good news for us. Because what

00:03:30.739 --> 00:03:34.459
it means is you can do it recursively
and, as computer scientists, we're all

00:03:34.459 --> 00:03:40.220
totally and completely happy with
recursion, I know we are. The zeroth one of

00:03:40.220 --> 00:03:45.949
these codes, the very simplest, is just so
simple it's laughable, just the single

00:03:45.949 --> 00:03:51.829
bit "1". But every good recursion has got
to have an algorithm for how you get

00:03:51.829 --> 00:03:57.109
from this one, to the previous one, to the
next one and so on. The rule for

00:03:57.109 --> 00:04:04.790
constructing - shall we call it H_n - is
at every stage you take 2^(n-1) 0s

00:04:04.790 --> 00:04:11.419
and  2^(n-1) 1s
So, in other words, you get a bunch of

00:04:11.419 --> 00:04:17.299
zeros and a bunch of ones - joined together by
concatenation. Plus, at every stage of the

00:04:17.299 --> 00:04:24.680
recursion, you do 2-fold repetitions of previous

00:04:24.680 --> 00:04:31.040
patterns, from the previous version of
the recursion. It's one of these things

00:04:31.040 --> 00:04:34.850
where it's actually ... let's start doing it 
and then I'll keep cross-referring here and

00:04:34.850 --> 00:04:39.110
you'll get the hang. H_0 is 1. That's
god-given, you can't contest that. That's

00:04:39.110 --> 00:04:45.980
the bottom. OK then, so what about H_1 ?
Well, what this is saying is that for H_1

00:04:45.980 --> 00:04:52.010
our 'n' value is 1. So we're going to have to
put in a pattern, here, that is 

00:04:52.010 --> 00:04:58.220
2^(n-1) 0s.  Well 'n' is 1.
That's 2 ^ (1 - 1).

00:04:58.220 --> 00:05:05.450
2 ^ 0. But anything to the power 0 is 1. 
So you start off with one 0 and one 1 [i.e. 01]

00:05:05.450 --> 00:05:12.560
OK but the rule says ... and as well as
that your working set - this is called 

00:05:12.560 --> 00:05:17.030
your *basis set* of things you're building
up - your working set must also include a

00:05:17.030 --> 00:05:22.340
two-fold repetition of the things you
had previously. Well the only thing I had

00:05:22.340 --> 00:05:28.250
previously was a 1. So what's a two-fold
repetition of 1?  [It's] 11.  It's all to do

00:05:28.250 --> 00:05:32.180
with *concatenation*. We're not, at the
moment, doing any arithmetic or XORs.

00:05:32.180 --> 00:05:37.340
We're just joining bit patterns together. 
So here we are then, it's 11. Now a rule

00:05:37.340 --> 00:05:43.910
here - which is a quite general thing in
developing these codes - is you can always

00:05:43.910 --> 00:05:52.400
introduce a 0 vector, as it's called. If I
keep calling these things *vectors* don't

00:05:52.400 --> 00:05:56.330
worry. It's a very "in" phrase - you can
bandy it around in the pub. But all it

00:05:56.330 --> 00:06:02.720
really means is 'bit strings'. You can
always introduce a zero vector of order 'n'.

00:06:02.720 --> 00:06:09.590
What that means is - absolutely for free
and from nowhere - I can add to this 00.

00:06:09.590 --> 00:06:15.050
OK? And if I was working with bit strings,
as we will eventually be, that are

00:06:15.050 --> 00:06:20.090
4 bits long,  I can just bring in four 0s.
It's bound to be there. The zero vector, at

00:06:20.090 --> 00:06:26.030
whatever length, is always part of your
set of codewords. That's fine. So you can

00:06:26.030 --> 00:06:30.110
look at this now and say "You know, you've almost
got a valid code there, haven't you, in 2 bits?"

00:06:30.110 --> 00:06:35.589
Look you've got 01, 11.
And you say that absolutely for

00:06:35.589 --> 00:06:41.349
free i can have 00? Do you know if you
just added 10 in there, you'd have a complete

00:06:41.349 --> 00:06:46.119
set of 4-bit possibilities wouldn't
you? Yes and here is a lovely way to

00:06:46.119 --> 00:06:49.989
introduce you to what I blather on about
from some time-  it's called a *linear code*.

00:06:49.989 --> 00:06:55.300
It means, if you add these things
together with XOR they'll

00:06:55.300 --> 00:06:59.319
deliver something else in the same
family. Well, look, there's only one thing

00:06:59.319 --> 00:07:05.649
we're missing in this family of 4-bit
possibilities. So if I do 01 - and I'll

00:07:05.649 --> 00:07:11.889
indicate my XOR, "binary addition without carry", 
with that + [within a circle], what happens

00:07:11.889 --> 00:07:18.399
if you add 01 to 11? Well 1 + 0 is 1,
because they differ, 1 + 1 is 0 because

00:07:18.399 --> 00:07:27.639
they're the same.  Hurrah! that has delivered
me my final possibility of 10. So what

00:07:27.639 --> 00:07:32.589
we're saying is: at every level of this
recursion you take what's called your

00:07:32.589 --> 00:07:36.699
basis vectors, that come from this
recursive algorithm, lots of zeros, lots

00:07:36.699 --> 00:07:41.319
of ones, plus double-ups of what you had
last time. You do all of those but then

00:07:41.319 --> 00:07:47.050
you add together what you've got in all
possible combinations. And you know that

00:07:47.050 --> 00:07:50.379
they'll form a closed family. You'll get to
a stage where they won't deliver

00:07:50.379 --> 00:07:55.749
anything different. They just rattle
around within themselves. Now look at

00:07:55.749 --> 00:08:00.699
this fabulous code, Sean! It's so familiar
to us isn't it? But it's not very

00:08:00.699 --> 00:08:08.110
exciting because in [n, k, d] terms what
are we saying that this is? It's got a

00:08:08.110 --> 00:08:13.599
2-bit code but the payload is 2 bits
long. There is no space for any error

00:08:13.599 --> 00:08:17.740
correction, and if there's no space for
any error correction whatsoever, then

00:08:17.740 --> 00:08:22.629
they must be distance 1 apart. They all
differ by one bit as you go from zero

00:08:22.629 --> 00:08:26.409
through to 4.
&gt;&gt; Sean:  I have to confess to being
completely lost at this moment!

00:08:26.409 --> 00:08:29.769
I understood what you said but I don't see
how it has a bearing on where we're going.

00:08:29.769 --> 00:08:35.079
&gt;&gt; DFB: It will! Next time around, believe me, this
will have such a bearing as you can't imagine.

00:08:35.079 --> 00:08:38.229
What I'm saying is, in the
trivial case this doesn't give us an

00:08:38.229 --> 00:08:42.789
error-correcting code at all so it's
useless. But we recur one more time! 

00:08:42.789 --> 00:08:48.860
I might need your help here. H_2. 
Oh crumbs! You need 2 ^ (n - 1) 0s

00:08:48.860 --> 00:08:53.840
and 2^(n-1) 1s. So that's always the new
thing - introduced every time, yeah? 

00:08:53.840 --> 00:08:59.960
It's 2 ^ 1, which is 2. So you need two
0s and two 1s, plus two-fold

00:08:59.960 --> 00:09:06.740
repetitions ... now I did derive that, but
that wasn't part of the basis set.

00:09:06.740 --> 00:09:15.560
Two-fold repetitions of what you had last
time. Well, 0101 and 1111.

00:09:15.560 --> 00:09:19.550
Don't worry about the zeros. You can always add
those in at this stage. If we want to add

00:09:19.550 --> 00:09:25.490
in a four 0s vector we can do so at whatever
stage we want.
&gt;&gt; Sean: So that's just

00:09:25.490 --> 00:09:30.650
like you can have a code of nothing?
&gt;&gt; DFB: Yeah, it's a bit like, you know, when

00:09:30.650 --> 00:09:34.970
you're doing arithmetic systems you find
zeros are useful. But it really is like

00:09:34.970 --> 00:09:40.430
saying 5 + 0 = 5. all right?
But, of course, with XOR systems it's

00:09:40.430 --> 00:09:44.720
handy to have it because if you
accidentally XOR something with

00:09:44.720 --> 00:09:49.130
itself, because they're identical, it will
yield a bunch of zeros for you. So it's handy

00:09:49.130 --> 00:09:53.420
to have that there, as a kind of check
that it didn't just arise from outer

00:09:53.420 --> 00:09:57.410
space. It could have arisen from adding
two things together that were absolutely

00:09:57.410 --> 00:10:01.670
identical. These are what's called *basis vectors* 
for the vector space and

00:10:01.670 --> 00:10:08.660
they're 4 bits long. But from these you
can generate all of the 4-bit

00:10:08.660 --> 00:10:13.490
possibilities you're after by simply
adding - either taking them as they come or

00:10:13.490 --> 00:10:18.080
adding them together with XOR.
And I'll show this now on this sheet

00:10:18.080 --> 00:10:23.120
which I'll carefully introduce over here.
I've introduced a 4-bit 0 vector which

00:10:23.120 --> 00:10:28.430
sometimes is called 'bold 0'. That is the 0
vector of whatever length you need.

00:10:28.430 --> 00:10:37.040
Remember the x_1 we got? Two 0s and two 1s? Fine.
x_2: 0101 ;   x_3:  1111. Those are the three we

00:10:37.040 --> 00:10:41.930
started with. Now add them together in
all possible combinations until you

00:10:41.930 --> 00:10:48.140
don't get anything new. And I mean
XOR of course. x_1 + x_2 = 0110

00:10:48.140 --> 00:10:57.800
x_1 + x_ 3 = 1100. How about x_2 + x_3?
1010. And finally the final

00:10:57.800 --> 00:11:00.960
possible combination is all three of them.
And of course you

00:11:00.960 --> 00:11:05.040
know it doesn't matter what order you do
these XORs in: x_1 + x_2 + x_3

00:11:05.040 --> 00:11:09.420
is the same as x_3 + x_1 + x_2.
You do all that one and you get 1001.

00:11:09.420 --> 00:11:15.000
Now when you look here, look,
[counting] 1, 2, 3, 4, 5, 6, 7, 8.

00:11:15.000 --> 00:11:20.100
You've generated 8 possibilities out of all the 16

00:11:20.100 --> 00:11:24.060
possibilities in 4 bits. What I'm
saying to you is, you take any two of

00:11:24.060 --> 00:11:30.270
those now, and add them together again.
You won't get anything new. If I take 1010 [+]

00:11:30.270 --> 00:11:38.010
1100. Do an XOR on those. I'll get 
0110. There it is look, just above.

00:11:38.010 --> 00:11:42.420
Try it with any of those and you
won't get anything new. The other thing I'd

00:11:42.420 --> 00:11:47.520
point out to you, here, is what is the
minimum distance of this code? Well, look

00:11:47.520 --> 00:11:54.000
0011 how distant is that from 0000? Two.
Yeah, the only exception is if

00:11:54.000 --> 00:11:59.610
you take the zero vector with the vector
that's all 1s. you will get a much

00:11:59.610 --> 00:12:03.660
bigger distance - you'll  get 4. But you're
not worried about the maximum [distance] one.

00:12:03.660 --> 00:12:07.170
You're worried about the [minimum distance] one.
So this thing, then, it's not exactly

00:12:07.170 --> 00:12:13.470
award-winning but it's a step on the way.
We've now got something -  let me use my

00:12:13.470 --> 00:12:22.980
crib-sheet and write down for you. 
H_2 is a [4, 3, 2] code. And you look at that and 

00:12:22.980 --> 00:12:27.029
you say: "Well, that's a bit better than last
time where we didn't do any error correction"t

00:12:27.029 --> 00:12:30.690
But we all know, from previous videos, if the
thing's only got a distance of 2 you

00:12:30.690 --> 00:12:34.890
can't correct an error, you can only
detect it. And when you look back at

00:12:34.890 --> 00:12:41.400
this set of possible codewords,
we've seen that it's actually carrying a

00:12:41.400 --> 00:12:46.589
3-bit payload with one parity check bit
at the end of it. And overall it's always

00:12:46.589 --> 00:12:52.980
even parity. Yes, but we're on our way! We
can now fast forward and say: "What about H_3?"

00:12:52.980 --> 00:13:00.959
What we're going to develop
from here is basically a set of 16 8-bit

00:13:00.959 --> 00:13:07.529
possibilities and if you sort of say
"Well this is H_3, what is its [n, k, d] rating?

00:13:07.529 --> 00:13:15.010
It's an [8, 4, 4] code. We're coming on!

00:13:15.010 --> 00:13:18.190
We're getting a bit of error correction at
last! Now. In this recursive build up. Aren't we?r

00:13:18.190 --> 00:13:27.310
4 - 1 Sean?  3. &lt;correction&gt; 3 / 2 = 1.5
round down to 1 &lt;/correction&gt;
It can correct one error. It's getting up

00:13:27.310 --> 00:13:34.600
to Hamming code standards this is! We're
up to [8, 4, 4] for this H_3 code.

00:13:34.600 --> 00:13:43.540
But probably the most equivalent Hamming code
I could pluck out for you is [7, 4, 3].

00:13:43.540 --> 00:13:48.160
A perfect illustration of trade-off. Look, that will
only correct one error but it's got a

00:13:48.160 --> 00:13:52.600
payload of four bits. That's [also] got a
payload of four bits and this is pretty comparable.

00:13:52.600 --> 00:13:56.680
&gt;&gt; Sean: How far do you have to go with
this before you get ...
&gt;&gt; DFB: well we've done H_3

00:13:56.680 --> 00:14:02.380
and you've got to get to H_5. We will draw a veil
over H_4 completely. I will leave

00:14:02.380 --> 00:14:07.510
you to read the handout and work out the
basis vectors and do it all for yourself. 

00:14:07.510 --> 00:14:11.410
Or, if you can't be bothered to, you can use
my 'awk' program which has got an option

00:14:11.410 --> 00:14:22.600
in to generate it. Let me just say H_4 has a
[n, k, d] rating of [16, 5, 8]  and that's very nice

00:14:22.600 --> 00:14:28.480
Look at that: 8 - 1 = 7; 7/2 = 3.5; 
Round it down. It could correct 

00:14:28.480 --> 00:14:33.730
three errors in a 16-bit codeword. This is
looking good. But those clever engineers

00:14:33.730 --> 00:14:38.889
at JPL, and elsewhere, said: "Oh!! if we
went one stage further we could do even

00:14:38.889 --> 00:14:48.850
better". H_5, this is our target. [32, 6, 16].
Notice what's happening is that at every

00:14:48.850 --> 00:14:53.380
stage of these Hadamard / Reed-Muller
codes the size - the length of them.

00:14:53.380 --> 00:15:00.760
It's exponential; it's doubling. It's 
gone 2, 4, 8, 16, 32 The next one will 
be 64. So they are expanding at

00:15:00.760 --> 00:15:07.389
a heck of a rate. And as some sardonic
person has once said, in the Comments on these:

00:15:07.389 --> 00:15:11.290
"The trouble with extending these codes
is [that] it only gives the cosmic rays more

00:15:11.290 --> 00:15:16.029
chance to damage them" And that's quite
true, So this is a fabulous compromise as

00:15:16.029 --> 00:15:20.430
you can see now.
I hope you've all by now seen the

00:15:20.430 --> 00:15:23.940
previous video, with the pictures from
Mars. If not you can always go and

00:15:23.940 --> 00:15:28.950
consult it but this was just about
perfect - you get a 6-bit payload packed

00:15:28.950 --> 00:15:35.040
inside 32. And with a lot of hard work, at
the Jet Propulsion Laboratory, you can

00:15:35.040 --> 00:15:41.760
deterministically decode every one of
these vectors to get its shade of grey

00:15:41.760 --> 00:15:46.950
out of it - so long as it's not being hit
by more than 7 errors. You might have

00:15:46.950 --> 00:15:54.240
a big decoding effort to do this quickly
enough because it can very easily mount up,

00:15:54.240 --> 00:15:58.920
but that's solved the problem for you.
Mission Accomplished, really, I think, this.

00:15:58.920 --> 00:16:08.130
It solves all our error correcting
desires for this particular level of

00:16:08.130 --> 00:16:12.690
technology that happened in the Mariner
9. It was always counted a great success

00:16:12.690 --> 00:16:20.400
Of course, things have moved on from
there a lot, since that date. 

00:16:20.400 --> 00:16:25.020
[Trailer for EXTRA BITS]
We've used secure shell [ssh] to bridge across 
to something I'm more familiar with: Open

00:16:25.020 --> 00:16:31.970
SuSse Linux. And i think I can't remember
in the previous ....

