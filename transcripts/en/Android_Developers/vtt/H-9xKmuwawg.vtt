WEBVTT
Kind: captions
Language: en

00:00:00.670 --> 00:00:02.100
SPEAKER: Data
plans aren't cheap.

00:00:02.100 --> 00:00:04.580
And unfortunately, Wi-Fi
isn't everywhere yet.

00:00:04.580 --> 00:00:06.990
But some apps get over-eager
when they open a network

00:00:06.990 --> 00:00:09.020
connection, so we
decided to give users

00:00:09.020 --> 00:00:12.640
a way to fight off apps that are
literally costing them money.

00:00:12.640 --> 00:00:15.450
With API 24, we're expanding
on a previous feature that

00:00:15.450 --> 00:00:17.420
allowed users to block
background network

00:00:17.420 --> 00:00:18.810
access for a given app.

00:00:18.810 --> 00:00:20.870
Now users can put
the entire device

00:00:20.870 --> 00:00:23.750
into Data Saver mode, which
will restrict any background

00:00:23.750 --> 00:00:25.820
activity on metered
internet connections

00:00:25.820 --> 00:00:28.510
until the device
is safely on Wi-Fi.

00:00:28.510 --> 00:00:31.490
Data Saver is easy to trigger,
so that users can turn it

00:00:31.490 --> 00:00:33.390
on and off as they see fit.

00:00:33.390 --> 00:00:35.220
And whereas users
previously only

00:00:35.220 --> 00:00:37.416
had a blacklist of apps
that could no longer use

00:00:37.416 --> 00:00:38.790
networked data in
the background,

00:00:38.790 --> 00:00:40.960
now they can restrict
the entire device

00:00:40.960 --> 00:00:43.940
and then whitelist the few
exceptions they wish to allow.

00:00:43.940 --> 00:00:45.850
The effects of the
expanded Data Saver mode

00:00:45.850 --> 00:00:48.450
are largely unchanged from
the previous background

00:00:48.450 --> 00:00:49.630
restrictions feature.

00:00:49.630 --> 00:00:51.990
These restrictions only
apply to background jobs,

00:00:51.990 --> 00:00:54.080
since foreground services
are generally something

00:00:54.080 --> 00:00:55.690
the user has requested.

00:00:55.690 --> 00:00:57.820
And since this is all
about saving data,

00:00:57.820 --> 00:00:59.360
these restrictions
only apply when

00:00:59.360 --> 00:01:01.318
you're on a metered
connection, not when you're

00:01:01.318 --> 00:01:02.660
on unmetered Wi-Fi.

00:01:02.660 --> 00:01:05.060
But the other major
improvement for developers

00:01:05.060 --> 00:01:08.190
is that we have created an API
to check whether your app is

00:01:08.190 --> 00:01:09.440
currently restricted.

00:01:09.440 --> 00:01:12.790
This allows you to build
better behaviors into your app

00:01:12.790 --> 00:01:15.240
so that the user understands
what data is needed,

00:01:15.240 --> 00:01:17.180
and how it will be used
when they ask your app

00:01:17.180 --> 00:01:19.830
to do something while
it is restricted.

00:01:19.830 --> 00:01:23.060
For example, let's say your app
wants to sync with your server.

00:01:23.060 --> 00:01:25.990
Before, you would simply
kick off a background task

00:01:25.990 --> 00:01:27.424
and hope for the best.

00:01:27.424 --> 00:01:29.840
But now that you can check
whether your network access has

00:01:29.840 --> 00:01:33.050
been restricted, your background
work patterns have shifted.

00:01:33.050 --> 00:01:35.210
An obvious solution
is to identify

00:01:35.210 --> 00:01:36.920
any network connections
you are making

00:01:36.920 --> 00:01:38.600
that are not time-sensitive.

00:01:38.600 --> 00:01:40.940
Your app should always
be data-conscious,

00:01:40.940 --> 00:01:43.020
and these moments are
a great opportunity

00:01:43.020 --> 00:01:45.127
to only sync when on Wi-Fi.

00:01:45.127 --> 00:01:46.960
If you'd rather not
manage this on your own,

00:01:46.960 --> 00:01:49.180
I recommend JobScheduler.

00:01:49.180 --> 00:01:50.910
You can schedule your
sync to take place

00:01:50.910 --> 00:01:52.820
as soon as Wi-Fi is
available, and you won't

00:01:52.820 --> 00:01:54.750
have to worry about it again.

00:01:54.750 --> 00:01:57.190
Now, if your use case
is time-sensitive,

00:01:57.190 --> 00:02:00.050
or has some other need to do
work on a metered connection,

00:02:00.050 --> 00:02:03.060
you'll want to check if Data
Saver is active for your app.

00:02:03.060 --> 00:02:06.223
It's a pretty simple method--
getRestrictBackgroundStatus().

00:02:06.223 --> 00:02:08.889
And the result will let you know
whether Data Saver is currently

00:02:08.889 --> 00:02:11.480
on, whether it is on and
you've been whitelisted,

00:02:11.480 --> 00:02:14.150
or whether apps have free
reign over network connections

00:02:14.150 --> 00:02:15.390
or right now.

00:02:15.390 --> 00:02:17.660
Checking that status might
look a little something

00:02:17.660 --> 00:02:18.930
like this in your app.

00:02:18.930 --> 00:02:21.320
If the only network available
is a metered network,

00:02:21.320 --> 00:02:23.310
we need a switch
statement to determine

00:02:23.310 --> 00:02:25.070
the best behavior for our app.

00:02:25.070 --> 00:02:27.440
Although, again, if you
can afford to always wait

00:02:27.440 --> 00:02:29.120
for Wi-Fi, you should
use JobScheduler

00:02:29.120 --> 00:02:31.245
and avoid having to know
anything about the network

00:02:31.245 --> 00:02:32.220
connection at all.

00:02:32.220 --> 00:02:33.820
Check out the links
in the description

00:02:33.820 --> 00:02:37.230
for how to set up a broadcast
receiver to listen for signals

00:02:37.230 --> 00:02:39.690
for a Data Saver state
change, how to request

00:02:39.690 --> 00:02:42.540
the user whitelist your
app, and how to test Data

00:02:42.540 --> 00:02:44.900
Saver with the help of ADB.

00:02:44.900 --> 00:02:46.820
Because there's
always so much more

00:02:46.820 --> 00:02:49.480
to learn about being
data-conscious.

00:02:49.480 --> 00:02:51.150
In general, though,
there are a number

00:02:51.150 --> 00:02:54.170
of good and bad behaviors
your app may be doing

00:02:54.170 --> 00:02:55.740
when it comes to network use.

00:02:55.740 --> 00:02:58.900
The rule of thumb is to
respect that data is expensive,

00:02:58.900 --> 00:03:00.960
and honor the user's
preferences when they

00:03:00.960 --> 00:03:02.750
are trying to be conscientious.

00:03:02.750 --> 00:03:06.560
It's their device, and your
app is a small part of it.

00:03:06.560 --> 00:03:09.580
We want to empower users to
know what their device is doing,

00:03:09.580 --> 00:03:11.370
and that means app
developers sometimes

00:03:11.370 --> 00:03:12.580
need to work a bit harder.

00:03:12.580 --> 00:03:14.550
But we've tried to
make it easy for you.

00:03:14.550 --> 00:03:16.680
So now it's your turn to
make it easy for users

00:03:16.680 --> 00:03:18.580
as you build better apps.

00:03:18.580 --> 00:03:22.530
[MUSIC PLAYING]

