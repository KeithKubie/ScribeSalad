WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:04.430
The first step in this process of adding context is to create a map.

00:00:04.430 --> 00:00:07.430
D3 has some of the best geo capabilities out there,

00:00:07.430 --> 00:00:10.580
and there is one area where it really shines.

00:00:10.580 --> 00:00:13.790
Well you can create charts using other libraries.

00:00:13.790 --> 00:00:16.638
We would be hard pressed to find another tool that

00:00:16.638 --> 00:00:20.680
makes creating data-driven maps, as powerful and fun.

00:00:20.680 --> 00:00:23.300
We will start simply, and build up,

00:00:23.300 --> 00:00:28.040
by applying knowledge we've already learned, to create our interactive map.

00:00:28.040 --> 00:00:33.520
The first step of which, is to simply acquire data, to draw map, which we

00:00:33.520 --> 00:00:38.040
can then plot the data we already have, the attendance data for the World Cup.

00:00:38.040 --> 00:00:41.970
Historically, working with maps has been a bit cumbersome since the files you

00:00:41.970 --> 00:00:45.918
need to work with, are usually large complicated data formats,

00:00:45.918 --> 00:00:49.830
such as Shapefiles, or other proprietary formats.

00:00:49.830 --> 00:00:51.110
The reason being,

00:00:51.110 --> 00:00:54.810
that Shapefiles typically encode a lot of data when you think about it.

00:00:54.810 --> 00:00:58.880
If we wanted to draw a map of all the countries of the world, we would need

00:00:58.880 --> 00:01:04.170
exact boundaries of every country, as a series of paths or coordinates.

00:01:04.170 --> 00:01:07.560
A few other formats have emerged, somewhat hand in hand with d3.

00:01:07.560 --> 00:01:10.180
Two of which are very related.

00:01:10.180 --> 00:01:12.900
GeoJSON and TopoJSON.

00:01:12.900 --> 00:01:15.070
When working with web technologies,

00:01:15.070 --> 00:01:19.160
JSON can be thought of something as the lingual franca, and

00:01:19.160 --> 00:01:24.080
acts as a common interface between libraries, languages and technologies.

00:01:24.080 --> 00:01:26.190
Almost every programming language and

00:01:26.190 --> 00:01:31.840
environment, has facilities, to work with native JSON, in some form or another.

00:01:31.840 --> 00:01:35.550
And especially when working with d3 in JavaScript,

00:01:35.550 --> 00:01:37.840
JSON's the most natural format.

00:01:37.840 --> 00:01:41.680
So, when working with maps in d3, it seems only natural to

00:01:41.680 --> 00:01:45.630
use a JSON based format to encode the coordinates you need to display.

00:01:45.630 --> 00:01:48.940
And that's exactly what GeoJSON is.

00:01:48.940 --> 00:01:51.680
One issue with Shapefiles is that they encode their

00:01:51.680 --> 00:01:56.050
information in a binary format, which isn't readable by a human,

00:01:56.050 --> 00:02:00.160
unless you use a special program to interpret the shape file.

00:02:00.160 --> 00:02:04.620
GeoJSON on the other hand, encodes very similar coordinate information,

00:02:04.620 --> 00:02:07.910
using valid JSON, with some minor extensions.

00:02:07.910 --> 00:02:11.500
And it results in much more interpretable, and human readable, and

00:02:11.500 --> 00:02:13.250
inspectible data.

00:02:13.250 --> 00:02:17.940
One very nice feature of GeoJSON, is that it's very easy to explore and

00:02:17.940 --> 00:02:20.960
debug using many of the common development tools,

00:02:20.960 --> 00:02:25.200
such as simple text editors, or even in the browser console.

00:02:25.200 --> 00:02:30.190
One of the issues with GeoJSON however, is that to achieve these features of

00:02:30.190 --> 00:02:35.400
being valid JSON and human readable, the data file itself is often a bit

00:02:35.400 --> 00:02:40.280
more verbose and substantially larger than a binary Shapefile.

00:02:40.280 --> 00:02:43.940
And since often when building maps on the web,

00:02:43.940 --> 00:02:46.970
we need to send this information with any web request.

00:02:46.970 --> 00:02:50.470
For our graphic, it can put a strain on both our server and

00:02:50.470 --> 00:02:52.990
the browser, and increase loading latency.

00:02:52.990 --> 00:02:56.610
And one of the final issues I want to go over with Shapefiles,

00:02:56.610 --> 00:03:00.110
is they can have some storage limitations, in the number of

00:03:00.110 --> 00:03:05.192
properties you can attach to given shapes, such as names or other data.

00:03:05.192 --> 00:03:09.010
And Shapefiles are limited in their maximum file size,

00:03:09.010 --> 00:03:13.460
limiting how precise the coordinates in the shape of the map can actually be.

00:03:13.460 --> 00:03:17.170
The third data format that we didn't cover,

00:03:17.170 --> 00:03:21.020
TopoJSON, is an extension to GeoJSON.

00:03:21.020 --> 00:03:26.950
It's actually much smaller than both GeoJSON, and Shapefiles in raw file size,

00:03:26.950 --> 00:03:31.550
but also encodes topology, hence the name TopoJSON.

00:03:31.550 --> 00:03:35.030
Which Shapefiles and GeoJSON, unfortunately, cannot do.

00:03:35.030 --> 00:03:37.900
For the sake of simplicity, and since we won't be

00:03:37.900 --> 00:03:41.380
using a whole lot of topological information in this lesson and

00:03:41.380 --> 00:03:45.930
class, we'll be using GeoJSON, which in many cases, is good enough.

