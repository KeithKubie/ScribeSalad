WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:03.230
Initially, if I compile and run the tester, all

00:00:03.230 --> 00:00:06.390
of the methods are actually returning zeros. Let's fix

00:00:06.390 --> 00:00:09.750
the amdahl Speedup first. Right now, it's returning 0.

00:00:09.750 --> 00:00:11.380
What if I just write it in sort of the

00:00:11.380 --> 00:00:13.920
way it is? Now, if I run the tester

00:00:13.920 --> 00:00:18.600
again, I'm getting an actual of 2.875. When I

00:00:18.600 --> 00:00:21.590
expected 1.6. I think I'd better go back and

00:00:21.590 --> 00:00:25.360
fix it. Right now, this is doing the divisions first,

00:00:25.360 --> 00:00:28.510
so 1 over s, and s over n.

00:00:28.510 --> 00:00:30.370
And then the additions and subtractions in the middle.

00:00:30.370 --> 00:00:32.290
And there's no real sense of the fraction

00:00:32.290 --> 00:00:36.340
that we started with. This whole piece From s

00:00:36.340 --> 00:00:39.200
to n should stay together in the denominator,

00:00:40.410 --> 00:00:43.620
and the 1 minus s needs to stay together

00:00:43.620 --> 00:00:47.990
in its numerator. Let's try this again. Alright, looks

00:00:47.990 --> 00:00:50.390
like Amdalh/s speed up is working, but we still

00:00:50.390 --> 00:00:53.400
need to do the cross ratio. I'll try

00:00:53.400 --> 00:00:56.480
doing this sort of naively again. I've written this

00:00:56.480 --> 00:00:58.150
as it looks but flattened it onto one line.

00:00:59.180 --> 00:01:02.220
So, if I return this quantity and I compile

00:01:03.300 --> 00:01:07.580
I'm getting an error, unexpected type, required class found

00:01:07.580 --> 00:01:10.710
value. This error probably doesn't make a whole lot

00:01:10.710 --> 00:01:12.910
of sense to yet but this is a little

00:01:12.910 --> 00:01:15.480
hint of what's to come. A pair of parentheses

00:01:15.480 --> 00:01:19.800
like this immediately followed by some other quantity has another meaning.

00:01:19.800 --> 00:01:21.980
In particular, if you put a type in here instead of

00:01:21.980 --> 00:01:25.350
an expression like a minus c. What I need to indicate

00:01:25.350 --> 00:01:27.990
is that I want to multiply, and I'll need to do it

00:01:27.990 --> 00:01:30.460
over here as well. And now if I try to run

00:01:30.460 --> 00:01:33.990
the tester again I'm definitely not getting right answers for the cross

00:01:33.990 --> 00:01:37.190
ratio. This is because when we have a bunch of operators

00:01:37.190 --> 00:01:40.520
with the same precedents Travel will just start from the left and

00:01:40.520 --> 00:01:43.550
move to the right so instead of computing a

00:01:43.550 --> 00:01:47.800
minus c times b minus d over in parentheses b

00:01:47.800 --> 00:01:53.120
minus c times a minus d. This will do a minus c times b minus d divided by b

00:01:53.120 --> 00:01:56.840
minus c and multiply that entire quantity by a

00:01:56.840 --> 00:02:00.740
minus d. What I need to do here, is group

00:02:00.740 --> 00:02:03.860
the denominator. I could also group the numerator, if

00:02:03.860 --> 00:02:05.530
I really wanted to but it wouldn't make much of

00:02:05.530 --> 00:02:11.000
a difference. If I compile again, and run the tester, I've

00:02:11.000 --> 00:02:16.300
now got two methods working right. Now for the average. I might try retuning

00:02:16.300 --> 00:02:20.860
the sum of all of these, all divided by four. Let's

00:02:20.860 --> 00:02:26.080
see how this works. If I run the tester, it looks like it works in one case, but

00:02:26.080 --> 00:02:27.850
not in the other. Let's look at the second

00:02:27.850 --> 00:02:31.600
case. I'm going to go read inside of the tester.

00:02:31.600 --> 00:02:33.330
The case that isn't working is when we try

00:02:33.330 --> 00:02:36.053
to take the average of 3, 4, 3, and 3.

00:02:37.570 --> 00:02:39.310
We should, in fact, expect 3.25, but it looks

00:02:39.310 --> 00:02:44.220
like we're losing the decimal. Java is interpreting this as

00:02:44.220 --> 00:02:47.270
integer division, because 4 is an integer, and a,

00:02:47.270 --> 00:02:50.760
b, c and d are all declared as integers. There

00:02:50.760 --> 00:02:56.680
are a few ways I could fix this. I could write 4 as 4., or 4.0 And then it would

00:02:56.680 --> 00:02:59.750
get the right answer here. Or I could actually change

00:02:59.750 --> 00:03:02.670
all of these ints to doubles, and then I wouldn't actually

00:03:02.670 --> 00:03:05.320
need to specify that the 4 was a double. I

00:03:05.320 --> 00:03:10.070
can compile this and run the tester, and it still works.

00:03:10.070 --> 00:03:13.640
That's because if any of these variables are a double,

00:03:13.640 --> 00:03:15.780
this whole expression in parentheses is going to come out as a

00:03:15.780 --> 00:03:18.620
double, and a double divided by an int doesn't need

00:03:18.620 --> 00:03:22.520
to be done with integer division, that calls for regular division.

00:03:22.520 --> 00:03:24.730
This is a really easy thing to mix up. It

00:03:24.730 --> 00:03:26.680
looks right to us, but the computer's going to read

00:03:26.680 --> 00:03:29.960
it wrong and the compiler won't warn you. When we

00:03:29.960 --> 00:03:32.960
ran this with all ints and no doubles we saw that

00:03:32.960 --> 00:03:35.620
it ended up being a run time error. This is

00:03:35.620 --> 00:03:38.340
a good example of why it's helpful to think about what

00:03:38.340 --> 00:03:41.430
you want your answer to be beforehand. Calculate a couple

00:03:41.430 --> 00:03:44.300
examples and then write your code. Good book on this quiz.

