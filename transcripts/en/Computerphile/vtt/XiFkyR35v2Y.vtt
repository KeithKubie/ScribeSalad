WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.660
This is not really relevant to the video, actually, but this is a slow loris.

00:00:02.660 --> 00:00:04.200
I just wanted to show it because it was cute,

00:00:04.200 --> 00:00:06.580
that's all...  Don't keep them as pets though.

00:00:06.580 --> 00:00:09.020
Now, the slow loris is

00:00:09.020 --> 00:00:11.020
I guess my favorite

00:00:11.020 --> 00:00:12.540
Denial of Service (DoS) attack -- now that

00:00:12.540 --> 00:00:14.080
says a lot about me, doesn't it, that I have a favorite

00:00:14.240 --> 00:00:15.680
denial of service attack...

00:00:15.860 --> 00:00:18.620
Before we demonstrate anything, of course, let's get straight out in the open,

00:00:18.620 --> 00:00:23.160
you shouldn't be using slow loris on anyone, or any other DoS attack on anyone else, alright, because

00:00:23.160 --> 00:00:24.540
you'll get in a lot of trouble.

00:00:27.480 --> 00:00:32.820
Most DoS have this idea that you try and defeat some web server, [or] some computer

00:00:32.840 --> 00:00:37.900
on the other side of the web, by giving it as much bandwitdh as you can, such that it breaks, right,

00:00:37.900 --> 00:00:42.020
they have a certain amount of bandwidth [that] they are allowed to use. and if you give them more than that,

00:00:42.020 --> 00:00:47.340
or try to request too many web pages, their server goes down. That's the general idea of a DoS.

00:00:47.340 --> 00:00:52.080
Distributed DoS is just the next level, where you have multiple computers all attempting to do the same thing,

00:00:52.080 --> 00:00:57.800
and then, more modern DoS will use amplification and things like this, to try and improve this even more.

00:00:57.800 --> 00:01:03.540
But, the whole point is as much bandwidth as you can all at the same time, alright, and if you get enough,

00:01:03.540 --> 00:01:07.320
you can take them down. If you don't, then they just laugh, right?

00:01:07.320 --> 00:01:12.360
So, you know, Microsoft and Google, you're going to have difficulty bringing them down.

00:01:12.360 --> 00:01:15.900
But, smaller websites, it can have a massive impact on the amount of money they are making,

00:01:15.900 --> 00:01:21.740
if no one can visit their shop, or something like that, so it's a real problem. What I like about the slow loris is

00:01:21.740 --> 00:01:27.520
it comes at it from a completely different way. It's a protocol attack, so a layer-7 application attack,

00:01:27.520 --> 00:01:32.700
which doesn't need a lot of bandwidth, so I can do a slow loris on someone and then browse the web

00:01:32.700 --> 00:01:37.460
as normal, play computer games... So let's think back to how me talking to a web server works.

00:01:37.460 --> 00:01:43.200
I send off a "get" request to a website, and I say "get me index.html", then the web server

00:01:43.200 --> 00:01:47.700
sends back index.html, and that's the end of that conversation, right, then I start up

00:01:47.700 --> 00:01:53.640
another conversation that says: "I've read this index.html, I now need, you know, header.jpeg",

00:01:53.640 --> 00:01:58.100
so I send off another get request, and so on, and we have these short conversations back and forth.

00:01:58.240 --> 00:02:04.760
Now, usually, an HTTP request is just text, right, so it litterally says "HTTP get 1.1", or something,

00:02:04.760 --> 00:02:10.320
index.html, where I'm sending it, a bit about me, so I'm using, you know, Firefox or something,

00:02:12.920 --> 00:02:19.920
and then some other data, and then it always ends with two caret return line feeds, so two new lines, right,

00:02:19.920 --> 00:02:25.400
so, normally in text we have a caret return character, and then a line feed character, two of those signals the end

00:02:25.400 --> 00:02:30.880
of an HTTP request. What the inventor of the slow loris, some hacker named Rsnake, I think, (indeed!)

00:02:30.880 --> 00:02:37.240
decided was "what if I never send those caret return line feeds, can I just keep the website waiting for me,

00:02:37.260 --> 00:02:44.500
can I go so slowly, by asking for website so slowly, that I just break them", right?

00:02:44.500 --> 00:02:50.200
And yeah, he can! And -- and so they have things like timeouts and stuff so maybe let's say

00:02:50.200 --> 00:02:55.680
I'm in the middle of browsing a website, and then -- on my phone, right -- and just as I'm in the middle of

00:02:55.680 --> 00:03:01.340
sending off a request, I lose phone signal, right? That's pretty common, you know, these days,

00:03:01.340 --> 00:03:05.680
so that would timeout on the server's end as well, and they would let the connection go,

00:03:05.680 --> 00:03:10.780
and then they conserve someone else's website. The problem comes if I don't send no data, I send some data,

00:03:10.780 --> 00:03:17.580
but just painfully slowly. What's great about the slow loris is, there's hardly any code, it talks to a web server,

00:03:18.640 --> 00:03:25.040
and it basically says "get me index.html", or something like that, and then sends a space, or a 0,

00:03:25.040 --> 00:03:31.100
or a random number, or something like that, and then it waits for about, you know, 10, 20, 30 seconds,

00:03:31.100 --> 00:03:36.840
just when the website is about to assume it's gone, and sends another single byte, and says

00:03:36.840 --> 00:03:41.820
"I'm still here! I'm just really slow", and then it does this again, and it does this again, and keeps that

00:03:41.820 --> 00:03:46.120
connection going as long as it can, and then it does it with 200 other connections,

00:03:46.120 --> 00:03:52.960
or as many connections as it can. So, my computer sending out this attack, it's sending 200 byte packets

00:03:52.960 --> 00:03:58.920
every minute or so, it's not a lot at all, and it's very difficult for a firewall or something to notice this,

00:03:58.920 --> 00:04:03.640
because these are valid HTTP requests, they're just super slow, right, and

00:04:03.780 --> 00:04:08.420
you know maybe I've just got a really bad internet connection, maybe.

00:04:08.420 --> 00:04:14.660
Now, this doesn't affect every web server, it mostly affects Apache, because of the way Apache works.

00:04:14.660 --> 00:04:19.300
Unfortunately, Apache is very prevalent, there's about 40, 50% Apache these days,

00:04:19.300 --> 00:04:23.740
it's hard to know for sure, but I had a quick check, and that seems to be about the right estimate.

00:04:23.740 --> 00:04:28.560
Apache when they designed it, they decided it would be a good idea to start up a new thread

00:04:28.560 --> 00:04:34.140
to serve every concurrent connection, so when a connection comes in with an HTTP request, they

00:04:34.140 --> 00:04:38.980
set up a new thread that handles that request, and then the thread goes away when it's finished.

00:04:38.980 --> 00:04:43.580
Now, that wasn't entirely stupid, you know, if the connections appear, and then they go away,

00:04:43.580 --> 00:04:49.480
that's not a problem. But if the connection starts to stay longer than we anticipate, then our connection limit

00:04:49.480 --> 00:04:54.660
gets reached, so Apache will have a connection limit of, let's say, 200 concurrent connections,

00:04:54.660 --> 00:04:58.180
because beyond that you've just got so many threads [that] the whole thing starts to grind to a halt.

00:04:58.180 --> 00:05:03.480
So, what slow loris does, is begin to open connections, and as a new one gets freed up,

00:05:03.480 --> 00:05:08.200
from someone else using the website, they'll open that one, and this one, and that one, until they got

00:05:08.200 --> 00:05:13.740
all the connections. So, let's see how it works, right, so I've come up with another of my glorious websites,

00:05:13.740 --> 00:05:19.860
just for this, "Mike's website"! So, that's actually this computer here, which is running Windows and Apache.

00:05:19.860 --> 00:05:26.140
Now, so this is my website, with my company profile, and lorem ipsum. What this website is, is not very important.

00:05:26.140 --> 00:05:29.860
Let's have a quick look at the code, this is not the original implementation of slow loris, this is a Python

00:05:29.860 --> 00:05:35.600
implementation I found, but essentially, it's not very long, right, 67 lines, which another reason in our kit,

00:05:35.600 --> 00:05:41.120
because it's so elegant. Really, what it does -- it has some code here, to start up a socket, which is a TCP

00:05:41.120 --> 00:05:47.220
connection, and make it get requests, here's our get request text, and then, for all existing sockets,

00:05:47.220 --> 00:05:53.760
down here, can we send a little bit more data every 15 seconds. And if a socket dies, we recreate it, and we just

00:05:53.760 --> 00:05:59.840
keep that going, and we'll do this for 200 concurrent sockets, which is more than my Apache installation

00:05:59.840 --> 00:06:05.900
is configured to handle. So let's run this -- there we are, python, slow loris, to the IP address that we just

00:06:05.900 --> 00:06:11.180
looked up. Alright, it's creating all the sockets, and now, it's just going to sit there, every now and then,

00:06:11.180 --> 00:06:17.280
sending a byte of data to the Apache web server. So, the web server thinks that it's got 200 people looking

00:06:17.280 --> 00:06:22.440
at the website, when in fact it's got one person looking at the website really, really slowly 200 times.

00:06:22.440 --> 00:06:26.820
If I press refresh on this, because it has been cached, we can see we're now waiting.

00:06:28.280 --> 00:06:29.180
Waiting.

00:06:29.180 --> 00:06:33.280
(Sean:) So if you clear the cache now, in your browser, would that -- that not be able to get the website?

00:06:33.280 --> 00:06:38.120
(Mike:) No, it wouldn't be able to see the website, so let's go to website now, that we're under slow loris. So...

00:06:40.480 --> 00:06:44.900
Alright, we're waiting for it. I mean, we might get lucky, maybe one of these sockets drops out and then the

00:06:44.900 --> 00:06:47.520
server can respond, alright, but we might not. But...

00:06:47.520 --> 00:06:51.940
(Sean:) You've clicked to go back to that same website, and of course it can't load it and so we're just sitting...

00:06:51.940 --> 00:06:56.380
(Mike:) Yeah and [at] some point we might see a timeout on this client-side, saying "no, we didn't get any response

00:06:56.380 --> 00:07:02.840
from the server". This server is basically -- won't serve this website to me, because it's too busy serving

00:07:02.840 --> 00:07:09.460
200 other websites, or more specifically, busy waiting for us to finish the request 200 times so it can actually

00:07:09.460 --> 00:07:10.660
finally get home with something.

00:07:10.660 --> 00:07:14.040
(Sean:) And how long would that carry on sending those requests? (Mike:) As long as I want.

00:07:14.040 --> 00:07:18.640
And, as soon as a socket dies, another one comes up, and it just keeps going.

00:07:19.520 --> 00:07:26.520
And, I mean, 67 lines of code, right, and here's the nice bit, "fun things to do", I can just use the net as normal --

00:07:26.520 --> 00:07:31.640
my net is fine, right, I'm not using all my bandwidth to do this, I'm using barely any of my bandwidth,

00:07:31.640 --> 00:07:35.940
which is what I really like about it. This kind of attack is called a low and slow attack.

00:07:35.940 --> 00:07:40.180
So there's a couple of others, "RUded", [meaning] "are you dead yet?", is another one that does similar things.

00:07:40.180 --> 00:07:46.920
And, what's clever about them is [that] they're quite hard to detect, because what it's doing is totally normal

00:07:46.920 --> 00:07:52.700
HTTP, it's just doing it incredibly slowly, and when they designed this, and when they designed Apache,

00:07:52.700 --> 00:07:56.220
they never thought you would do something like that, and that is exactly the problem with these sorts of

00:07:56.220 --> 00:08:00.700
protocol attacks: the assumption that they will always do what you expect them to do, and they won't

00:08:01.500 --> 00:08:05.500
do these random, strange things. So, yeah, my favorite DoS.

