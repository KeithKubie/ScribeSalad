WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:03.750
Now that you have the general idea down,
let's go over an example.

00:00:03.750 --> 00:00:07.140
Say there's a part of your app that
presents use with a preferences page and

00:00:07.140 --> 00:00:11.780
allows them to choose between two
app themes, daytime and midnight.

00:00:11.780 --> 00:00:13.600
If you set your preference
to the midnight theme,

00:00:13.600 --> 00:00:15.400
you probably want the app
to remember that so

00:00:15.400 --> 00:00:18.000
you don't have to reset it
every time upon app launch.

00:00:18.000 --> 00:00:21.150
So this would be a good place
to use NS user default.

00:00:21.150 --> 00:00:24.680
Your device has a default database
where it stores everything from system

00:00:24.680 --> 00:00:28.425
wide defaults to language defaults
to app-specific defaults and more.

00:00:28.425 --> 00:00:31.970
App-specific defaults is
what we'll be focusing on.

00:00:31.970 --> 00:00:33.800
To access the values from this database,

00:00:33.800 --> 00:00:37.850
we'll need to call standardUserDefaults
from an NSUserDefaults object

00:00:37.850 --> 00:00:40.930
which will return the shared
defaults object that we need.

00:00:40.930 --> 00:00:45.020
Notice I said shared object, that means
the NSUserDefaults class has a class

00:00:45.020 --> 00:00:48.550
method that will return a reference
to the same UserDefaults object

00:00:48.550 --> 00:00:50.940
regardless of where we
invoke it in our program.

00:00:50.940 --> 00:00:53.510
This is called the singleton
design pattern.

00:00:53.510 --> 00:00:56.830
Once we have the shared user defaults
object, we can then use keys to get

00:00:56.830 --> 00:00:59.380
values for this default object,
just like a dictionary.

00:01:00.840 --> 00:01:03.360
In this example,
we'll use the method value for key.

00:01:03.360 --> 00:01:07.320
But there are other methods available as
well, such as string for key, bool for

00:01:07.320 --> 00:01:08.719
key, float for key and others.

00:01:10.040 --> 00:01:13.250
In this example want to keep a value
that let's us know whether the midnight

00:01:13.250 --> 00:01:14.800
theme is off or on.

00:01:14.800 --> 00:01:17.152
So it makes sense to use a Boolean here.

00:01:17.152 --> 00:01:19.850
So we'll first check to see if
a Boolean value already exists for

00:01:19.850 --> 00:01:24.170
the string midnight theme on using
the if let syntax in case, doesn't.

00:01:25.630 --> 00:01:28.900
So let's first suppose that has no idea
what we're talking about it's never

00:01:28.900 --> 00:01:32.260
heard of midnight theme on and this
is our first time launching the app.

00:01:32.260 --> 00:01:33.300
So here's where we'll set it.

00:01:34.370 --> 00:01:37.480
Setting a value and its user defaults
is very similar to checking for

00:01:37.480 --> 00:01:42.730
value and
the syntax is set value with a value And

00:01:42.730 --> 00:01:44.920
then the key string we'll
want to use to retrieve it.

00:01:45.960 --> 00:01:48.020
So in our case this would be a bool.

00:01:48.020 --> 00:01:52.850
So we'll say false because no one has
flipped the midnight theme on yet.

00:01:52.850 --> 00:01:55.930
And for key we'll put in that
midnight theme on string.

00:01:57.260 --> 00:02:00.440
So we know that if this else
statement is being executed.

00:02:00.440 --> 00:02:01.780
It's because our call to value for

00:02:01.780 --> 00:02:07.080
key up here return nil meaning no
value had been set for that keystring.

00:02:07.080 --> 00:02:10.789
So this also shows us that the app
has never been launched before

00:02:10.789 --> 00:02:14.620
because if it had, it have a value for
midnight theme on.

00:02:14.620 --> 00:02:18.640
So let's just add a print that shows us
that this is the apps very first launch.

00:02:18.640 --> 00:02:21.930
And we know that after this first
launch, we will now have a value for

00:02:21.930 --> 00:02:24.970
NSUserDefaults for
that midnightThemeOn key.

00:02:24.970 --> 00:02:27.790
So let's go back up here and
deal with this case,

00:02:27.790 --> 00:02:31.880
that is the case where value for
midnightThemeOn returns a value.

00:02:31.880 --> 00:02:35.570
So we know that since we're using value
for key it's returning any object.

00:02:35.570 --> 00:02:38.300
So the first thing we need
to do is cast this to a bool

00:02:38.300 --> 00:02:40.180
then we can check its value.

00:02:40.180 --> 00:02:43.090
If it is true we'll call a method
called switch to midnight.

00:02:43.090 --> 00:02:45.870
Which makes all the UI changes
necessary to show the midnight theme.

00:02:47.110 --> 00:02:50.160
If it's false we don't really need to do
anything because the UI is set to load

00:02:50.160 --> 00:02:52.000
with daytime theme, in general.

00:02:52.000 --> 00:02:53.720
But let's just add some
print statement in here so

00:02:53.720 --> 00:02:54.870
we can see what's happening when.

00:02:55.910 --> 00:02:59.570
Okay, so now I just need to set up an
action for when the switch gets flipped.

00:02:59.570 --> 00:03:01.220
Let me do that now.

00:03:01.220 --> 00:03:03.665
So when this action gets executed.

00:03:03.665 --> 00:03:06.425
I check my switch outlet to see
whether it's turned off or on.

00:03:06.425 --> 00:03:11.115
And then I call the appropriate
UI configuration method and

00:03:11.115 --> 00:03:14.715
it's here that I want to update my
new preference in my user defaults.

00:03:14.715 --> 00:03:20.360
So I hadn't a set value here to true for
midnight them on and if the theme switch

00:03:20.360 --> 00:03:26.170
is set to off I'll put in a set value
here to false for midnight theme on.

00:03:26.170 --> 00:03:29.120
So this should work to save our
preference, let's try it out.

00:03:30.180 --> 00:03:31.910
Now let's switch to midnight theme.

00:03:33.250 --> 00:03:35.820
And let's see what happens
when we close the app.

00:03:35.820 --> 00:03:39.170
On a device you can view all your open
apps by pressing the home button twice

00:03:39.170 --> 00:03:40.010
in rapid succession.

00:03:40.010 --> 00:03:42.260
And then you can close
an app from there.

00:03:42.260 --> 00:03:46.100
We can simulate this action on your
simulator by holding Cmd+Shift and

00:03:46.100 --> 00:03:47.840
rapidly pressing the H key twice.

00:03:48.970 --> 00:03:54.670
So Cmd+Shift+H+H and just like on
a device I can swipe up to close it.

00:03:54.670 --> 00:04:00.157
Now let's relaunch our app and great
we see that our preference is saved.

00:04:00.157 --> 00:04:02.527
Let's switch back to daylight and
close it again.

00:04:02.527 --> 00:04:04.987
[BLANK_AUDIO]

00:04:04.987 --> 00:04:06.999
Awesome, it saved our
daylight preference.

00:04:08.230 --> 00:04:12.290
But how come it didn't print this is the
first launch ever when we first ran it?

00:04:12.290 --> 00:04:15.550
Well because I had run this app with
the NSUserDefaults already implemented

00:04:15.550 --> 00:04:17.200
when I showed you the demo.

00:04:17.200 --> 00:04:20.010
So how do we simulate running this
app as if it was the first time it's

00:04:20.010 --> 00:04:21.139
ever been launched on our device?

00:04:22.210 --> 00:04:26.060
What we need to do is reset the content
and settings of our simulator.

00:04:26.060 --> 00:04:27.760
We'll end up doing this a lot
throughout the course so

00:04:27.760 --> 00:04:31.410
we've included the directions for the
step in the accompanying text as well.

00:04:31.410 --> 00:04:33.180
It's pretty simple though.

00:04:33.180 --> 00:04:37.320
We just click simulator and then reset
content and settings and that's it.

00:04:39.110 --> 00:04:42.069
Now we can launch the app as if it's
the first time it's on our device.

00:04:43.150 --> 00:04:46.060
And now we get this output that
says this is the first launch ever.

00:04:47.340 --> 00:04:50.930
So it switched the midnight theme on,
let's close the app.

00:04:52.490 --> 00:04:55.700
Let's relaunch and
we see our preferences saved.

00:04:57.440 --> 00:05:00.880
So awesome but there's actually an even
better place to put all this code.

00:05:00.880 --> 00:05:02.999
And that's in our app delegate.

00:05:04.100 --> 00:05:07.070
So I made this method called
check you first launch

00:05:07.070 --> 00:05:11.040
which does a similar thing to what our
code in our view did load method did.

00:05:11.040 --> 00:05:13.690
Except for the primary focus is not
whether the theme has been set or

00:05:13.690 --> 00:05:16.900
not but in a more general sense whether
the app has ever launched before.

00:05:18.570 --> 00:05:22.160
So similar to the code in our view
did load method we have bool for

00:05:22.160 --> 00:05:26.790
key has launched before to check
if the app has ever launched.

00:05:27.940 --> 00:05:32.880
And if it hasn't we know that this is
the first launch in this L section.

00:05:32.880 --> 00:05:35.340
We can set the ball for
has launched before to true.

00:05:35.340 --> 00:05:39.970
And here will also set the default
value for midnight theme so that we

00:05:39.970 --> 00:05:43.620
know it's taken care for the rest of
the app and then we can go back here and

00:05:43.620 --> 00:05:48.310
delete some of this section and
see that the app still works.

00:05:48.310 --> 00:05:51.890
We no longer need to check if there's a
value for weWantMidnight because we know

00:05:51.890 --> 00:05:56.190
that there is because we set it in
the app delegate which launches first.

00:05:56.190 --> 00:05:58.780
And you can see how this would be
preferred because then you can make sure

00:05:58.780 --> 00:06:01.330
things are set up at launch
rather than a view load and

00:06:02.460 --> 00:06:04.590
let's run it one more time.

00:06:04.590 --> 00:06:10.380
But first let's reset the content
in settings and launch.

00:06:11.910 --> 00:06:14.960
And switch to midnight,
let's close our app.

00:06:16.330 --> 00:06:21.420
Relaunch, and we see that our
preferences saved, awesome.

