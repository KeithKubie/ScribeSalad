WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.948
[MUSIC PLAYING]

00:00:05.844 --> 00:00:07.510
MIKE SORVILLO: My
name is Mike Sorvillo.

00:00:07.510 --> 00:00:10.810
I'm a product manager on the
Hangouts Chat bot framework.

00:00:10.810 --> 00:00:13.870
I'm here today with Wesley,
one of our G Suite developer

00:00:13.870 --> 00:00:16.960
advocates and Chuan, the
technical lead for the Hangouts

00:00:16.960 --> 00:00:18.257
Chat bot framework.

00:00:18.257 --> 00:00:19.840
So today we're going
to talk about how

00:00:19.840 --> 00:00:23.080
you can transform your workplace
with a Hangouts Chat bot

00:00:23.080 --> 00:00:24.274
framework.

00:00:24.274 --> 00:00:25.690
And just a quick
agenda, I'm going

00:00:25.690 --> 00:00:27.850
to give some background
about the new Hangouts Chat

00:00:27.850 --> 00:00:29.560
and bot's user
experience in case you

00:00:29.560 --> 00:00:31.812
guys have never tried
the product before.

00:00:31.812 --> 00:00:33.520
I'm going to pass it
off to Wes and Chuan

00:00:33.520 --> 00:00:36.070
to talk about the
bot framework in API.

00:00:36.070 --> 00:00:38.290
And show you a ton of
code samples and demos

00:00:38.290 --> 00:00:39.220
before I wrap it up.

00:00:43.250 --> 00:00:46.090
So a quick show of hands,
how many people in the room

00:00:46.090 --> 00:00:50.620
use Hangouts today in
Gmail or on mobile?

00:00:50.620 --> 00:00:51.970
Awesome.

00:00:51.970 --> 00:00:54.490
So what you might not know is
that millions of businesses

00:00:54.490 --> 00:00:59.320
use Hangouts today for direct
messaging or lightweight group

00:00:59.320 --> 00:01:03.042
messaging with their company.

00:01:03.042 --> 00:01:04.750
And what we've heard
from these companies

00:01:04.750 --> 00:01:06.874
is that they're looking
for a more persistent place

00:01:06.874 --> 00:01:09.730
for their teams to
collaborate and communicate.

00:01:09.730 --> 00:01:13.390
So this past February, we
launched the new Hangouts Chat.

00:01:13.390 --> 00:01:15.580
It's currently available
for G Suite customers

00:01:15.580 --> 00:01:17.420
at no additional charge.

00:01:17.420 --> 00:01:20.080
It's a brand new tech
stack with apps on macOS,

00:01:20.080 --> 00:01:24.130
Windows, Android, iOS, and web.

00:01:24.130 --> 00:01:25.300
It's global out of the gate.

00:01:25.300 --> 00:01:27.050
So it works in 28
languages and is

00:01:27.050 --> 00:01:31.930
accessible on all major screen
readers on all major platforms.

00:01:31.930 --> 00:01:34.120
And really, the backbone
of the new Hangouts Chat

00:01:34.120 --> 00:01:37.630
are rooms, a way to center the
conversation around a team,

00:01:37.630 --> 00:01:41.367
a project, an event,
basically anything you want.

00:01:41.367 --> 00:01:43.450
And it's obvious when
you're working on a project,

00:01:43.450 --> 00:01:46.200
you're going to be talking about
a bunch of different things.

00:01:46.200 --> 00:01:48.700
I'm sure everyone in the room
has experienced this if you've

00:01:48.700 --> 00:01:50.514
used group messaging before.

00:01:50.514 --> 00:01:52.930
You maybe are talking about
something important, something

00:01:52.930 --> 00:01:54.310
at work, about work.

00:01:54.310 --> 00:01:56.440
And then all of a sudden,
someone in the message

00:01:56.440 --> 00:02:01.510
is like, hey guys, what do
you want for lunch today.

00:02:01.510 --> 00:02:04.121
And then the work keeps
going on and that's great.

00:02:04.121 --> 00:02:06.370
But then all of a sudden,
someone else, who's probably

00:02:06.370 --> 00:02:09.160
hungry, says I want Mexican.

00:02:09.160 --> 00:02:11.410
So when this happens,
it's really hard

00:02:11.410 --> 00:02:13.000
to just figure out
what's happening

00:02:13.000 --> 00:02:15.610
and what's the conversation
we should be focused on.

00:02:15.610 --> 00:02:17.350
So conversations in
rooms are threaded

00:02:17.350 --> 00:02:20.620
to prevent this exact problem.

00:02:20.620 --> 00:02:24.430
Threading helps you separate
the everyday chit chat from all

00:02:24.430 --> 00:02:25.750
of the important stuff.

00:02:25.750 --> 00:02:28.180
And not only that, you can
segment the important stuff

00:02:28.180 --> 00:02:30.040
by different threads
to keep context

00:02:30.040 --> 00:02:32.350
around those conversations.

00:02:32.350 --> 00:02:34.600
If you use Google
Groups for email lists

00:02:34.600 --> 00:02:36.430
or identity management
at your company,

00:02:36.430 --> 00:02:37.930
you can add a Google
Group to a room

00:02:37.930 --> 00:02:40.054
and then anyone in the room
can also join the room.

00:02:42.209 --> 00:02:44.000
Over time, these rooms
are going to contain

00:02:44.000 --> 00:02:45.300
all the things
you've talked about,

00:02:45.300 --> 00:02:47.090
all the files you've
shared, so everything

00:02:47.090 --> 00:02:50.300
is fully indexed and searchable
and you can look for file type,

00:02:50.300 --> 00:02:53.660
keyword, person, look
in one room, many rooms,

00:02:53.660 --> 00:02:58.320
basically however you remember
what you're looking for.

00:02:58.320 --> 00:03:00.980
Hangouts Chat has deep
integrations into G Suite.

00:03:00.980 --> 00:03:04.040
So you can pick any docs or
drive file from the drive file

00:03:04.040 --> 00:03:04.760
picker.

00:03:04.760 --> 00:03:07.400
And any time you paste
a drive file or docs

00:03:07.400 --> 00:03:11.150
file, a link to it, we
will render a thumbnail

00:03:11.150 --> 00:03:14.620
and help you grant access
to everybody in the room.

00:03:14.620 --> 00:03:16.940
And if you find yourself
going back and forth too much

00:03:16.940 --> 00:03:20.270
with someone or writing
blocks and blocks of text,

00:03:20.270 --> 00:03:22.640
we help you, with one
click, up the bandwidth

00:03:22.640 --> 00:03:24.710
of the conversation by
creating a video meeting

00:03:24.710 --> 00:03:26.574
with our sister
product Hangouts Meet.

00:03:26.574 --> 00:03:28.490
So anyone in the room
can jump in the meeting,

00:03:28.490 --> 00:03:30.740
and you can resolve what you
wanted to resolve faster.

00:03:33.190 --> 00:03:35.760
So you're all no stranger to
conversational interfaces.

00:03:35.760 --> 00:03:39.540
We saw some pretty amazing
things from the Assistant team

00:03:39.540 --> 00:03:41.432
yesterday at the keynote.

00:03:41.432 --> 00:03:43.890
And bots at the workplace, what
they're really meant to do,

00:03:43.890 --> 00:03:46.200
is help you blend
conversation and tools

00:03:46.200 --> 00:03:48.504
to accelerate your work
and reduce all that context

00:03:48.504 --> 00:03:49.920
switching that
happens when you're

00:03:49.920 --> 00:03:53.070
working with a bunch of
different tools at work.

00:03:53.070 --> 00:03:56.280
You can talk to a bot privately
in a one-on-one direct message.

00:03:56.280 --> 00:03:59.010
Or you can add a bot to a room,
and then anyone in the room

00:03:59.010 --> 00:04:02.319
can @mention it to do something.

00:04:02.319 --> 00:04:04.110
And while you can take
anything and make it

00:04:04.110 --> 00:04:06.180
a conversational interface,
you can literally

00:04:06.180 --> 00:04:09.214
take a 12 page form and make
it a conversational interface.

00:04:09.214 --> 00:04:10.880
We really think
conversational interface

00:04:10.880 --> 00:04:14.900
is shine for three main
use cases at the workplace.

00:04:14.900 --> 00:04:16.616
One is asynchronous
notifications.

00:04:16.616 --> 00:04:19.290
So in use case, something
happens in a third party app

00:04:19.290 --> 00:04:21.510
and a notification gets
plumbed into the room

00:04:21.510 --> 00:04:24.420
where everyone can start
a conversation about it.

00:04:24.420 --> 00:04:26.015
Another is one-off actions.

00:04:26.015 --> 00:04:28.140
So in this case, maybe
you're talking about someone

00:04:28.140 --> 00:04:29.820
about what you need to do.

00:04:29.820 --> 00:04:31.740
And then you say, hey
project management bot,

00:04:31.740 --> 00:04:33.520
create a task about this item.

00:04:33.520 --> 00:04:35.320
And it does that.

00:04:35.320 --> 00:04:37.312
And the third is
querying for information.

00:04:37.312 --> 00:04:39.270
So with this use case,
there's data, obviously,

00:04:39.270 --> 00:04:40.530
in the third party app.

00:04:40.530 --> 00:04:41.760
And you just want to find it.

00:04:41.760 --> 00:04:44.070
So you say, project
management bot,

00:04:44.070 --> 00:04:45.421
what are Mandy Tiller's tasks.

00:04:45.421 --> 00:04:46.920
And it shows you
what the tasks are.

00:04:49.600 --> 00:04:52.270
One of our big mantras
on the Hangout Chat team

00:04:52.270 --> 00:04:53.941
is that bots are people too.

00:04:53.941 --> 00:04:56.440
They live alongside people and
there's no heavy instillation

00:04:56.440 --> 00:04:57.989
flow, nothing more to learn.

00:04:57.989 --> 00:05:00.280
If you know how to start a
direct message with someone,

00:05:00.280 --> 00:05:03.820
add someone to a room,
@mention someone,

00:05:03.820 --> 00:05:07.420
you know how to get
started with a bot.

00:05:07.420 --> 00:05:09.130
Google launched a few
bots of their own.

00:05:09.130 --> 00:05:12.970
One is the Meet bot that uses
natural language processing

00:05:12.970 --> 00:05:16.207
and machine learning to schedule
a meeting and book a room

00:05:16.207 --> 00:05:17.290
for everybody in the room.

00:05:19.880 --> 00:05:22.130
Another is the Google
Drive bot that notifies you

00:05:22.130 --> 00:05:24.920
when new files are shared with
you, new comments are made,

00:05:24.920 --> 00:05:27.770
or when people request
access to your files.

00:05:27.770 --> 00:05:30.310
And not only can you see
when people request access,

00:05:30.310 --> 00:05:33.570
but you can actually grant
access from the bot itself.

00:05:33.570 --> 00:05:36.260
In fact, in the two months
since launching, what we've seen

00:05:36.260 --> 00:05:38.060
is that people
typically grant access

00:05:38.060 --> 00:05:39.770
to files with the
Google Drive bot

00:05:39.770 --> 00:05:42.777
eight times faster than
they do with email.

00:05:42.777 --> 00:05:43.610
So think about that.

00:05:43.610 --> 00:05:46.680
You can actually speed up a
common workflow for any app

00:05:46.680 --> 00:05:48.090
that you build by eight times.

00:05:50.940 --> 00:05:53.250
We have a number of third
party bots like Trello

00:05:53.250 --> 00:05:55.290
to stay informed about
your project's progress

00:05:55.290 --> 00:05:57.720
without leaving the chat room.

00:05:57.720 --> 00:06:00.120
Ringcentral to make calls
or start videoconferences

00:06:00.120 --> 00:06:03.000
with your room and your team.

00:06:03.000 --> 00:06:05.160
Jira, so you can get
notified about changes

00:06:05.160 --> 00:06:06.660
to issues, tasks, bugs.

00:06:06.660 --> 00:06:09.942
And then talk about those
changes as they happen.

00:06:09.942 --> 00:06:11.400
And we're excited
to announce today

00:06:11.400 --> 00:06:15.090
that box is launching a bot on
Hangouts Chat to help you find

00:06:15.090 --> 00:06:17.700
recent files or
favorite files to open

00:06:17.700 --> 00:06:19.755
or share without
switching context.

00:06:22.390 --> 00:06:24.880
We have a number of bots
and many different business

00:06:24.880 --> 00:06:29.920
functions, like developer
tools, tasks, CRM, HR, support,

00:06:29.920 --> 00:06:31.805
and more.

00:06:31.805 --> 00:06:33.930
So now I'm going to pass
this over to Wes and Chuan

00:06:33.930 --> 00:06:37.139
to talk a bit about the
bot framework and API.

00:06:37.139 --> 00:06:37.930
WESLEY CHUN: Great.

00:06:37.930 --> 00:06:39.610
Thanks, Mike.

00:06:39.610 --> 00:06:41.049
All right, we're
here to guide you

00:06:41.049 --> 00:06:43.590
on this comprehensive tour for
the bot framework for Hangouts

00:06:43.590 --> 00:06:45.010
Chat.

00:06:45.010 --> 00:06:46.780
So what we just
saw from Mike are

00:06:46.780 --> 00:06:50.820
a bunch of public bots written
by others and they're available

00:06:50.820 --> 00:06:52.176
for everyone.

00:06:52.176 --> 00:06:53.800
But what I want you
guys to think about

00:06:53.800 --> 00:06:55.600
is writing bots on your own.

00:06:55.600 --> 00:06:57.280
Whether it be for
your organization,

00:06:57.280 --> 00:06:58.987
for your customers,
or the world,

00:06:58.987 --> 00:07:00.820
you know, write a public
bot like the others

00:07:00.820 --> 00:07:01.982
that you've seen.

00:07:01.982 --> 00:07:03.190
But maybe you're new to bots.

00:07:03.190 --> 00:07:04.870
And you're kind of
like hesitating,

00:07:04.870 --> 00:07:06.790
going, you know, how hard is it?

00:07:06.790 --> 00:07:09.700
But you know, put simply
it's not that bad.

00:07:09.700 --> 00:07:12.750
Just think of bots as
like microservices.

00:07:12.750 --> 00:07:14.570
They're simpler.

00:07:14.570 --> 00:07:15.470
There's less code.

00:07:15.470 --> 00:07:19.260
And you don't have to write it a
complete web app or mobile app.

00:07:19.260 --> 00:07:21.590
You don't have that complexity.

00:07:21.590 --> 00:07:24.130
So less code means you can
build your apps quicker.

00:07:24.130 --> 00:07:25.200
But how quick?

00:07:25.200 --> 00:07:27.460
Well, the Motorola
CIO got a demo bot up

00:07:27.460 --> 00:07:29.360
in less than an hour,
then, of course,

00:07:29.360 --> 00:07:33.340
spent a bit more time
to do one for real work.

00:07:33.340 --> 00:07:34.330
What does it do?

00:07:34.330 --> 00:07:35.980
It talks to multiple
systems and it

00:07:35.980 --> 00:07:39.190
gathers customer order and
device warranty information

00:07:39.190 --> 00:07:41.230
to present to
perhaps the customer

00:07:41.230 --> 00:07:43.120
service agent who needs
this information when

00:07:43.120 --> 00:07:44.800
they're on a call.

00:07:44.800 --> 00:07:47.352
The main idea is
that humans used

00:07:47.352 --> 00:07:49.060
to have to log into
each of these systems

00:07:49.060 --> 00:07:52.750
separately by hand, collate all
that information before they

00:07:52.750 --> 00:07:54.130
could tell their customer.

00:07:54.130 --> 00:07:56.590
But now with the bot, you can
summarize all these results

00:07:56.590 --> 00:07:59.350
from all these different systems
together in a single room

00:07:59.350 --> 00:08:03.060
so that all the CSRs can
see this at the same time.

00:08:03.060 --> 00:08:05.530
Some more on the blog
post, but we're here

00:08:05.530 --> 00:08:08.805
to help get you started.

00:08:08.805 --> 00:08:10.180
All right, well,
building quickly

00:08:10.180 --> 00:08:12.760
isn't the only standout
feature of Hangouts Chat.

00:08:12.760 --> 00:08:14.530
We want to emphasize
that the platform has

00:08:14.530 --> 00:08:16.200
a lot of flexibility.

00:08:16.200 --> 00:08:19.537
There's many different ways to
implement and host your bots.

00:08:19.537 --> 00:08:21.370
So we're going to go
over some of the basics

00:08:21.370 --> 00:08:25.450
and then walk you through
each option that you see here.

00:08:25.450 --> 00:08:29.170
All right, so a quick
review, talking to APIs

00:08:29.170 --> 00:08:31.270
and then comparing
that with bots.

00:08:31.270 --> 00:08:33.850
So in this diagram, we
have an application.

00:08:33.850 --> 00:08:36.220
We need to try and reach an API.

00:08:36.220 --> 00:08:38.302
The data is protected
behind OAuth.

00:08:38.302 --> 00:08:39.760
And so what typically
has to happen

00:08:39.760 --> 00:08:44.159
is the user has to grant
access to your application

00:08:44.159 --> 00:08:44.800
through OAuth.

00:08:44.800 --> 00:08:46.990
You guys have seen that
little dialog window, right?

00:08:46.990 --> 00:08:50.620
And once that happens, then the
app is able to reach the API,

00:08:50.620 --> 00:08:54.250
access that users secure
data on their behalf,

00:08:54.250 --> 00:08:56.330
do all the work
that it needs to,

00:08:56.330 --> 00:08:58.690
and then respond back
to the user, right?

00:08:58.690 --> 00:09:00.250
Everybody familiar with this?

00:09:00.250 --> 00:09:01.330
OK, great.

00:09:01.330 --> 00:09:03.680
So with bots, it's a little
bit different, all right.

00:09:03.680 --> 00:09:06.020
It's kind of a three
tier architecture here.

00:09:06.020 --> 00:09:09.370
And what happens is,
instead of a request coming

00:09:09.370 --> 00:09:11.650
from an application,
the request really

00:09:11.650 --> 00:09:14.020
comes from a user
in a chat room.

00:09:14.020 --> 00:09:15.070
All right, they enter.

00:09:15.070 --> 00:09:16.630
I want to talk to this bot.

00:09:16.630 --> 00:09:18.260
I'm going to send
it this payload.

00:09:18.260 --> 00:09:20.780
So that message gets
entered into Hangouts Chat.

00:09:20.780 --> 00:09:23.620
Then Hangouts Chat
contacts your bot.

00:09:23.620 --> 00:09:25.450
Your bot does all the
work it needs to do,

00:09:25.450 --> 00:09:27.460
collates the
information, and then it

00:09:27.460 --> 00:09:30.010
returns that information
back to Hangouts Chat

00:09:30.010 --> 00:09:33.270
which then renders that
result in the chat room, OK.

00:09:33.270 --> 00:09:34.810
So it's a little bit different.

00:09:34.810 --> 00:09:37.600
The key takeaway here is
that for your regular apps,

00:09:37.600 --> 00:09:38.940
you call APIs.

00:09:38.940 --> 00:09:42.730
But with bots, Hangouts
Chat calls you, all right?

00:09:42.730 --> 00:09:46.690
So noodle on this for a moment
and once you kind of got this,

00:09:46.690 --> 00:09:49.030
then the implementation path
that you are going to take

00:09:49.030 --> 00:09:53.820
is going to be more clear, and
you can build your bots faster.

00:09:53.820 --> 00:09:56.080
All right, now the
most efficient bots

00:09:56.080 --> 00:09:59.200
return plain text because
it's short, it's fast,

00:09:59.200 --> 00:10:00.890
and it gets the job done.

00:10:00.890 --> 00:10:02.950
But for a better
user experience,

00:10:02.950 --> 00:10:05.110
Hangouts Chat
supports richer UIs

00:10:05.110 --> 00:10:10.010
called cards that allow you to
structure your response data.

00:10:10.010 --> 00:10:13.420
For example, if you look
at the card sample here,

00:10:13.420 --> 00:10:15.580
you could see that
your bot could

00:10:15.580 --> 00:10:20.110
have returned five lines of
plain text and done its job.

00:10:20.110 --> 00:10:22.780
But this UI card is
more pleasing visually.

00:10:22.780 --> 00:10:25.360
In fact, if you communicate
more than just plain text,

00:10:25.360 --> 00:10:28.060
for example, you can see
that there's a visual cue

00:10:28.060 --> 00:10:31.570
to show that two of the
five have been completed

00:10:31.570 --> 00:10:33.430
from this project
management bot that's

00:10:33.430 --> 00:10:35.980
managing one of your reports.

00:10:35.980 --> 00:10:37.760
So that visual cue
is really helpful.

00:10:37.760 --> 00:10:39.468
And if you were to do
that in plain text,

00:10:39.468 --> 00:10:42.370
you'd have to add some
extra symbols, which

00:10:42.370 --> 00:10:45.070
may get in the way of the
data that's coming back.

00:10:45.070 --> 00:10:46.900
So cards are great.

00:10:46.900 --> 00:10:49.100
We'll look at them a
little bit more later.

00:10:49.100 --> 00:10:51.910
Now, if you already have an app
with data that's kept secure

00:10:51.910 --> 00:10:54.250
behind OAuth, you
can still expose

00:10:54.250 --> 00:10:57.160
some of your app functionality
within Hangouts Chat.

00:10:57.160 --> 00:11:00.940
Our auth and config flow lets
your users log into your app

00:11:00.940 --> 00:11:02.950
directly from Hangouts Chat.

00:11:02.950 --> 00:11:04.767
Now, it's similar
to this example

00:11:04.767 --> 00:11:07.225
where you see the task tracker
bot which stores information

00:11:07.225 --> 00:11:08.620
on a Google sheet.

00:11:08.620 --> 00:11:11.200
Well, you know, the sheet
is protected data, right?

00:11:11.200 --> 00:11:15.890
So the user has to allow your
bot access to that spreadsheet.

00:11:15.890 --> 00:11:17.740
And then once the
auth's flow is complete,

00:11:17.740 --> 00:11:21.490
then users can now access
your app and their secure data

00:11:21.490 --> 00:11:25.835
directly from Hangouts Chat
room and direct messages.

00:11:25.835 --> 00:11:27.460
All right, before
showing you the code,

00:11:27.460 --> 00:11:29.668
I want to give you a quick
rundown of the event types

00:11:29.668 --> 00:11:31.970
that Hangouts Chat
sends to your bot.

00:11:31.970 --> 00:11:34.880
So your bot can take action
when it is, for example,

00:11:34.880 --> 00:11:36.124
added to a space.

00:11:36.124 --> 00:11:38.540
This is a great place to send
a welcome message like, hey,

00:11:38.540 --> 00:11:40.530
thanks for adding
me to this room.

00:11:40.530 --> 00:11:43.070
Here's how to use me.

00:11:43.070 --> 00:11:45.740
It also can take action when
its removed from a space,

00:11:45.740 --> 00:11:48.980
like logging things or doing
some kind of cleanup business

00:11:48.980 --> 00:11:50.690
logic.

00:11:50.690 --> 00:11:52.850
The most common event
type is message,

00:11:52.850 --> 00:11:54.470
which is just when
a bot receives

00:11:54.470 --> 00:11:57.510
a normal message entered
by a user in a room or DM.

00:11:57.510 --> 00:11:59.510
And then the last
one is card clicked,

00:11:59.510 --> 00:12:02.420
which is when a user clicks
on one of the UI card elements

00:12:02.420 --> 00:12:03.967
that we just looked at earlier.

00:12:03.967 --> 00:12:05.550
So to keep things
simple, we are going

00:12:05.550 --> 00:12:08.540
to focus on the latter pair.

00:12:08.540 --> 00:12:10.400
All right, let's start
with standard bots

00:12:10.400 --> 00:12:12.720
that are running over HTTP.

00:12:12.720 --> 00:12:14.720
As mentioned before, the
development environment

00:12:14.720 --> 00:12:16.190
is quite flexible.

00:12:16.190 --> 00:12:19.260
Bots can be created and
hosted on any platform.

00:12:19.260 --> 00:12:23.210
In other words, your language,
your stack, your cloud or ours.

00:12:23.210 --> 00:12:26.465
So I presented at the top here
some Google Cloud Platform,

00:12:26.465 --> 00:12:29.690
or GCP, products and Firebase
products that you could use,

00:12:29.690 --> 00:12:32.300
but you don't have to.

00:12:32.300 --> 00:12:34.940
So Hangouts Chat also works
with bot-related environments

00:12:34.940 --> 00:12:37.700
like Dialogflow and Hubot.

00:12:37.700 --> 00:12:40.910
We'll demo some bots in some
languages that you see here.

00:12:40.910 --> 00:12:42.350
But it really doesn't matter.

00:12:42.350 --> 00:12:45.020
As long as the Hangouts
Chat service can HTTP

00:12:45.020 --> 00:12:47.690
post to your bot, that's
all that's really necessary.

00:12:50.386 --> 00:12:52.510
All right, are you guys
ready for your hello world?

00:12:52.510 --> 00:12:54.134
We're going to start
with the Echo bot,

00:12:54.134 --> 00:12:55.654
and happy to pass
it off to Chuan,

00:12:55.654 --> 00:12:57.820
who's the engineering lead
for the Hangouts Chat bot

00:12:57.820 --> 00:12:58.924
framework.

00:12:58.924 --> 00:13:00.215
CHUAN JI: All right, thank you.

00:13:00.215 --> 00:13:02.850
Hi, let's switch
to demo, please.

00:13:02.850 --> 00:13:05.080
All right, can
everybody see my screen?

00:13:05.080 --> 00:13:06.340
Great.

00:13:06.340 --> 00:13:07.090
Cool.

00:13:07.090 --> 00:13:09.220
So for those of you
haven't used Hangouts Chat

00:13:09.220 --> 00:13:12.190
before, what you're seeing
right now on my screen

00:13:12.190 --> 00:13:15.640
is the Mac OS desktop
app for Hangouts Chat.

00:13:15.640 --> 00:13:17.530
So on the left,
you'll see a list

00:13:17.530 --> 00:13:20.080
of rooms and direct messages
that I'm a member of.

00:13:20.080 --> 00:13:22.707
And on the right, you
will see a message stream.

00:13:22.707 --> 00:13:24.040
So I can scroll up a little bit.

00:13:24.040 --> 00:13:28.480
And I can see the group
conversations and so on.

00:13:28.480 --> 00:13:33.230
And of course, I can create
a new conversation here.

00:13:33.230 --> 00:13:38.042
So now, let's take a
look at a very basic bot.

00:13:38.042 --> 00:13:40.500
I'm going to call it the echo
bot, which simply writes back

00:13:40.500 --> 00:13:43.180
whatever the user sends to it.

00:13:43.180 --> 00:13:46.090
So I'm going to talk
to it here, got bot.

00:13:46.090 --> 00:13:48.140
Hi.

00:13:48.140 --> 00:13:50.925
And it's going to
say hi back to me.

00:13:50.925 --> 00:13:52.070
All right.

00:13:52.070 --> 00:13:52.570
Cool.

00:13:52.570 --> 00:13:55.330
So you saw that the
way I talked to a bot

00:13:55.330 --> 00:13:57.800
is by mentioning
it in a message.

00:13:57.800 --> 00:14:01.090
So in rooms, only messages
that directly mention a bot get

00:14:01.090 --> 00:14:02.770
sent to the corresponding bot.

00:14:02.770 --> 00:14:06.842
So the rest of your conversation
with your team is private.

00:14:06.842 --> 00:14:08.800
This is not the only way
you can talk to a bot.

00:14:08.800 --> 00:14:11.230
You can also have
a direct message,

00:14:11.230 --> 00:14:13.036
a one-on-one direct
message with the bot.

00:14:13.036 --> 00:14:15.160
So here you can see I
already have a direct message

00:14:15.160 --> 00:14:16.756
with the Echo bot as well.

00:14:16.756 --> 00:14:18.130
And here you can
see I don't have

00:14:18.130 --> 00:14:19.630
to mention the echo bot at all.

00:14:19.630 --> 00:14:21.824
Every message I say
in this direct message

00:14:21.824 --> 00:14:23.740
is going to be sent to
this bot because that's

00:14:23.740 --> 00:14:27.730
the only other person
in this direct message.

00:14:27.730 --> 00:14:30.250
So now that we've seen
how you could interact

00:14:30.250 --> 00:14:32.730
with the echo bot
in Hangouts Chat,

00:14:32.730 --> 00:14:35.054
let's take a look
at how it's built.

00:14:35.054 --> 00:14:36.220
Let's go back to the slides.

00:14:39.115 --> 00:14:40.490
WESLEY CHUN: All
right, so here's

00:14:40.490 --> 00:14:43.070
the echo bot in full
glory in Python.

00:14:43.070 --> 00:14:45.800
This example uses the
popular flask web framework,

00:14:45.800 --> 00:14:48.320
which is hostable on App Engine,
Compute Engine, or really

00:14:48.320 --> 00:14:50.900
any cloud-supporting
Python web apps.

00:14:50.900 --> 00:14:53.170
As you can see from the
top of the function there,

00:14:53.170 --> 00:14:55.730
Hangouts Chat posts to slash.

00:14:55.730 --> 00:14:59.719
And the code scans the JSON
payload for the message type.

00:14:59.719 --> 00:15:01.760
And then it returns the
same message string along

00:15:01.760 --> 00:15:05.120
with the user and the user name
of whomever called the bot.

00:15:05.120 --> 00:15:08.360
Just like in Chuan's
demo that you just saw.

00:15:08.360 --> 00:15:10.054
Now Python isn't
the only choice.

00:15:10.054 --> 00:15:11.720
For example, maybe
you have a mobile app

00:15:11.720 --> 00:15:13.850
and you're using Firebase,
well if all of your code

00:15:13.850 --> 00:15:16.100
is on Firebase, you don't
really necessarily want

00:15:16.100 --> 00:15:19.030
to host your bot on something
completely different.

00:15:19.030 --> 00:15:20.550
That's perfectly fine.

00:15:20.550 --> 00:15:22.610
So here's the same
bot in Node.js

00:15:22.610 --> 00:15:26.300
and hosted by Cloud
Functions for Firebase.

00:15:26.300 --> 00:15:29.219
If instead, most of
your back end is on GCP,

00:15:29.219 --> 00:15:31.010
then you can host it
on the sister product,

00:15:31.010 --> 00:15:32.210
Google Cloud Functions.

00:15:32.210 --> 00:15:34.156
The code will be
nearly identical.

00:15:34.156 --> 00:15:35.780
So if you take a look
at the code here,

00:15:35.780 --> 00:15:38.450
it does pretty much the same
thing as all the others.

00:15:38.450 --> 00:15:41.030
It scans the inbound
message for a message event,

00:15:41.030 --> 00:15:43.310
then it returns a user
name and string as before,

00:15:43.310 --> 00:15:45.800
and it really doesn't
matter to Hangouts Chat

00:15:45.800 --> 00:15:47.860
that your code isn't
JavaScript or Python

00:15:47.860 --> 00:15:51.060
and hosted on Cloud Functions
for Firebase or Google Cloud

00:15:51.060 --> 00:15:51.950
Functions.

00:15:51.950 --> 00:15:53.870
Remember, Hangouts
Chat only knows

00:15:53.870 --> 00:15:57.677
how to HTTP post to your bot.

00:15:57.677 --> 00:15:59.510
All right, so how are
you guys doing so far?

00:15:59.510 --> 00:16:01.670
Want to see more code?

00:16:01.670 --> 00:16:03.500
All right.

00:16:03.500 --> 00:16:05.420
Switching gears a little
bit, let's talk a bit

00:16:05.420 --> 00:16:07.460
about Google Cloud Pub/Sub.

00:16:07.460 --> 00:16:08.517
So what is it?

00:16:08.517 --> 00:16:10.100
Many of you know
that it's a real time

00:16:10.100 --> 00:16:11.960
event streaming and
messaging system where

00:16:11.960 --> 00:16:13.910
you can have many
producers and consuming

00:16:13.910 --> 00:16:16.630
reading and writing and
probably at different rates.

00:16:16.630 --> 00:16:18.560
And all, of course,
could be coming

00:16:18.560 --> 00:16:19.970
from different applications.

00:16:19.970 --> 00:16:23.720
But what does this have
to do with Hangouts Chat?

00:16:23.720 --> 00:16:26.170
Well, the platform is supposed
to be flexible, right?

00:16:26.170 --> 00:16:28.310
What if you decide to
host your bot on premise

00:16:28.310 --> 00:16:30.420
and behind a firewall.

00:16:30.420 --> 00:16:34.040
Well, in this case, Hangouts
Chat cannot contact your bot.

00:16:34.040 --> 00:16:36.030
So what can you do?

00:16:36.030 --> 00:16:38.260
Well, this is a perfect
use case for Pub/Sub.

00:16:38.260 --> 00:16:41.510
Hangouts Chat sends a message
to Pub/Sub instead of your bot

00:16:41.510 --> 00:16:42.800
because it can't reach it.

00:16:42.800 --> 00:16:45.350
Your bot has to register
a pull subscription which

00:16:45.350 --> 00:16:47.360
allows the bot to
get the Hangouts Chat

00:16:47.360 --> 00:16:50.720
messages from Pub/Sub and
bring it through the firewall.

00:16:50.720 --> 00:16:53.720
And then your on premise bot
can service the requests,

00:16:53.720 --> 00:16:55.640
do all the calls it needs
to do, it gathers up

00:16:55.640 --> 00:16:58.140
all the information, and then
responds back to Hangouts Chat

00:16:58.140 --> 00:16:59.180
like normal.

00:16:59.180 --> 00:17:01.870
All right, let's
see how to use it.

00:17:01.870 --> 00:17:04.751
So in the next example, is a
Java version of the echo bot,

00:17:04.751 --> 00:17:05.250
OK.

00:17:05.250 --> 00:17:07.500
Because a lot of
enterprises use a Java,

00:17:07.500 --> 00:17:09.720
and so we want to show an
example in this language

00:17:09.720 --> 00:17:10.500
as well.

00:17:10.500 --> 00:17:13.260
So like Python and Node, you
can see that the code handles

00:17:13.260 --> 00:17:14.010
the event.

00:17:14.010 --> 00:17:15.729
It scans for message type.

00:17:15.729 --> 00:17:18.810
And then it replies to Hangouts
Chat with a message text

00:17:18.810 --> 00:17:20.079
and username.

00:17:20.079 --> 00:17:22.619
It's just like the others,
but perhaps maybe a tiny bit

00:17:22.619 --> 00:17:24.210
more verbose, right?

00:17:24.210 --> 00:17:25.079
Well, that's great.

00:17:25.079 --> 00:17:27.450
But what if this bot is
in our corporate data

00:17:27.450 --> 00:17:29.660
center behind that firewall?

00:17:29.660 --> 00:17:31.500
Well, we just
mentioned a minute ago

00:17:31.500 --> 00:17:33.520
that Pub/Sub is
the right solution.

00:17:33.520 --> 00:17:36.360
So how do we tweak our bot
code to work with Pub/Sub?

00:17:36.360 --> 00:17:38.124
Well, it turns out
it's not too bad.

00:17:38.124 --> 00:17:40.290
So if you look over here,
you can see the extra code

00:17:40.290 --> 00:17:42.090
that we added to
our Java Echo bot

00:17:42.090 --> 00:17:45.270
that uses object mapper to
convert between JSON and Java

00:17:45.270 --> 00:17:46.230
objects.

00:17:46.230 --> 00:17:48.510
It's then able to get
the message from Pub/Sub

00:17:48.510 --> 00:17:50.850
and convert it to
JSON for processing.

00:17:50.850 --> 00:17:53.310
It passes that event
object to the handle method

00:17:53.310 --> 00:17:56.040
that we saw in the previous
slide, which then handles

00:17:56.040 --> 00:18:00.390
a message as if it was sent via
HTTP posts from Hangouts Chat.

00:18:00.390 --> 00:18:02.640
It doesn't know the difference.

00:18:02.640 --> 00:18:05.124
All right, so that's awesome.

00:18:05.124 --> 00:18:06.540
All right, so we
discussed hosting

00:18:06.540 --> 00:18:09.720
on Google's cloud, your cloud,
with or without a firewall.

00:18:09.720 --> 00:18:11.970
Let's bring it back inside
Google with a little twist

00:18:11.970 --> 00:18:13.230
called Google Apps Script.

00:18:13.230 --> 00:18:16.510
But first things
first, quick quiz.

00:18:16.510 --> 00:18:19.500
How many of you feel it's
important to have auth to help

00:18:19.500 --> 00:18:22.050
keep your user's data secure?

00:18:22.050 --> 00:18:24.490
Right, yeah, me too.

00:18:24.490 --> 00:18:28.210
Now, how many of you
like writing auth code?

00:18:28.210 --> 00:18:29.560
Yeah, chirp, chirp, chirp.

00:18:29.560 --> 00:18:31.260
Yeah, that's what I thought.

00:18:31.260 --> 00:18:33.300
What about managing
your own servers or VMs

00:18:33.300 --> 00:18:34.990
on premise or in the cloud?

00:18:34.990 --> 00:18:37.080
Not easy either, right?

00:18:37.080 --> 00:18:40.110
So in that case, App
Script is for you.

00:18:40.110 --> 00:18:41.952
Have you heard of
App Script before?

00:18:41.952 --> 00:18:44.160
How many of you have ever
heard of App Script before?

00:18:44.160 --> 00:18:45.440
Well, a couple of you.

00:18:45.440 --> 00:18:47.730
That's good, but not enough.

00:18:47.730 --> 00:18:51.090
It's kind of like another Google
secret, but just not a good one

00:18:51.090 --> 00:18:53.770
because we launched it
almost a decade ago.

00:18:53.770 --> 00:18:54.730
So what is it?

00:18:54.730 --> 00:18:56.550
It's a customized
JavaScript environment

00:18:56.550 --> 00:18:59.030
where we take care of
the servers and auth.

00:18:59.030 --> 00:19:01.740
And you have access to
more than 40 G Suite

00:19:01.740 --> 00:19:05.190
and Google APIs with
just function calls.

00:19:05.190 --> 00:19:08.220
Now, if you try to
build a bot with it,

00:19:08.220 --> 00:19:10.810
we actually provide you
a one-click bot template

00:19:10.810 --> 00:19:13.290
so that you're already
given a basic working bot

00:19:13.290 --> 00:19:14.970
to hack on right away.

00:19:14.970 --> 00:19:18.084
Check out the video if you want
to learn more about the secret.

00:19:18.084 --> 00:19:20.250
All right, so App Script
is a serverless environment

00:19:20.250 --> 00:19:23.040
for all developers, including
sometimes developers,

00:19:23.040 --> 00:19:25.170
like all you product
folk, business analysts,

00:19:25.170 --> 00:19:27.190
and data scientists out there.

00:19:27.190 --> 00:19:30.270
Now, here's the @Echo
bot inn Apps Script.

00:19:30.270 --> 00:19:34.170
Now, let's pause for a minute
here, really look at this code.

00:19:34.170 --> 00:19:36.510
While it's identical in
functionality as the others,

00:19:36.510 --> 00:19:38.575
it's only one line of code.

00:19:38.575 --> 00:19:40.030
One line.

00:19:40.030 --> 00:19:42.000
And not only that,
it's the easiest way

00:19:42.000 --> 00:19:45.900
to deploy a bot within
your organization.

00:19:45.900 --> 00:19:47.930
All right, so the Echo
part is a good start.

00:19:47.930 --> 00:19:52.140
But Chuan, can you show us a
more useful Apps Script bot?

00:19:52.140 --> 00:19:53.252
CHUAN JI: Sure.

00:19:53.252 --> 00:19:57.660
All right, so just
like the Echo bot,

00:19:57.660 --> 00:20:00.360
we're going to show
you a very quick bot

00:20:00.360 --> 00:20:02.630
that's takes in the user input.

00:20:02.630 --> 00:20:04.590
But instead of just
returning it verbatim,

00:20:04.590 --> 00:20:06.170
I'm going to do a little twist.

00:20:06.170 --> 00:20:07.390
We're going to translate it.

00:20:07.390 --> 00:20:09.245
OK, so let's switch to demo.

00:20:09.245 --> 00:20:11.080
Already here, all right.

00:20:11.080 --> 00:20:13.530
So I've called
the translate bot.

00:20:13.530 --> 00:20:18.921
And I'm going to say welcome
to Google I/O in English.

00:20:18.921 --> 00:20:23.830
And it's giving to us back the
same message but in Japanese.

00:20:23.830 --> 00:20:24.565
Cool.

00:20:24.565 --> 00:20:27.240
So let's take a look
at how that's built.

00:20:27.240 --> 00:20:28.770
Let's go back to
the slides, please.

00:20:33.590 --> 00:20:35.460
OK here it is.

00:20:35.460 --> 00:20:38.210
Notice how it's almost
as simple as the robot

00:20:38.210 --> 00:20:41.090
the only difference is that
we are now calling the Google

00:20:41.090 --> 00:20:42.860
Translate API.

00:20:42.860 --> 00:20:44.930
And how do we call the
Google Translate API?

00:20:44.930 --> 00:20:46.940
It's just a function
call away, right?

00:20:46.940 --> 00:20:50.120
You're not importing SDK,
you're not downloading anything,

00:20:50.120 --> 00:20:51.470
it's just there.

00:20:51.470 --> 00:20:53.840
And you can see how it's
very intuitive to use.

00:20:53.840 --> 00:20:56.360
You pass the message
the user sent.

00:20:56.360 --> 00:20:59.366
In this case, it's
e.message to argument text.

00:20:59.366 --> 00:21:00.740
Our human text
being the text you

00:21:00.740 --> 00:21:03.500
just sent without the
bot's own name in it.

00:21:03.500 --> 00:21:05.650
And you pass it the source
language and the target

00:21:05.650 --> 00:21:06.470
language.

00:21:06.470 --> 00:21:09.360
And they return
the result as text.

00:21:09.360 --> 00:21:10.432
That's it.

00:21:10.432 --> 00:21:12.500
It's almost too simple, right?

00:21:12.500 --> 00:21:18.090
Let's take a look at a more
advanced example, cool.

00:21:18.090 --> 00:21:22.100
So that's the demo again.

00:21:22.100 --> 00:21:26.210
So in preparation for
this talk, our team

00:21:26.210 --> 00:21:31.310
has been using Google
Spreadsheets to track all work.

00:21:31.310 --> 00:21:33.630
OK, so each of us has
some task assigned.

00:21:33.630 --> 00:21:36.960
And I built a simple bot to
take a look at where everyone

00:21:36.960 --> 00:21:39.440
is at in terms of their tasks.

00:21:39.440 --> 00:21:42.020
So I call it the
task tracker bot.

00:21:42.020 --> 00:21:43.350
So I'm going to call it here.

00:21:47.470 --> 00:21:51.530
OK, so it looks like we have
a bunch of tasks pending here.

00:21:51.530 --> 00:21:53.448
So let's take a look
at the spreadsheet.

00:21:57.120 --> 00:21:58.940
Can you guys see
the spreadsheet?

00:21:58.940 --> 00:21:59.940
OK.

00:21:59.940 --> 00:22:04.630
So you can see this is a
plain Google Spreadsheet.

00:22:04.630 --> 00:22:07.720
The first row with the column
names and a bunch of tasks

00:22:07.720 --> 00:22:09.600
here, assignee, and status.

00:22:09.600 --> 00:22:11.894
So you can see the bot is
really pulling the data

00:22:11.894 --> 00:22:14.310
from the spreadsheet that's
showing the tasks that are not

00:22:14.310 --> 00:22:16.169
yet completed.

00:22:16.169 --> 00:22:18.210
So I'm going to mark all
of these completed right

00:22:18.210 --> 00:22:22.918
now since we're already
standing on the iOS stage.

00:22:22.918 --> 00:22:25.020
I'm going to mark
everything as completed.

00:22:25.020 --> 00:22:28.200
And I'm going to go
back to the chat app.

00:22:28.200 --> 00:22:32.702
And I'm going to query it again
through my task tracker bot.

00:22:32.702 --> 00:22:34.440
And this time it's
going to tell us

00:22:34.440 --> 00:22:36.170
that there are no more tasks.

00:22:36.170 --> 00:22:36.975
Hooray.

00:22:36.975 --> 00:22:40.720
The video's coming
soon, by the way.

00:22:40.720 --> 00:22:42.480
All right, let go to the slides.

00:22:48.000 --> 00:22:49.380
So this is the code.

00:22:49.380 --> 00:22:51.750
This is the code for
the Task Tracker bot.

00:22:51.750 --> 00:22:53.460
And you can see it
fits on one slide.

00:22:53.460 --> 00:22:55.980
So it's really not
that complicated.

00:22:55.980 --> 00:22:59.140
You can see we're doing
some processing here.

00:22:59.140 --> 00:23:03.160
We're opening up the spreadsheet
by SpreadsheetApp.openById.

00:23:03.160 --> 00:23:05.460
We're grabbing the data
from the spreadsheet

00:23:05.460 --> 00:23:07.020
in a two dimensional array.

00:23:07.020 --> 00:23:08.865
We're doing a little
bit of processing here.

00:23:08.865 --> 00:23:13.050
We're moving the first row,
which is just the column names,

00:23:13.050 --> 00:23:15.750
filtering out the rows
they're already completed,

00:23:15.750 --> 00:23:18.810
mapping each row into a
string, putting them together

00:23:18.810 --> 00:23:20.460
into a message, and
then returning them

00:23:20.460 --> 00:23:22.110
to Hangouts Chat.

00:23:22.110 --> 00:23:23.100
WESLEY CHUN: What?

00:23:23.100 --> 00:23:25.980
I don't see any auth
or API calls here.

00:23:25.980 --> 00:23:29.130
CHUAN JI: That's a very
good question, Wes.

00:23:29.130 --> 00:23:32.130
So notice how, I mean,
in terms of API calls

00:23:32.130 --> 00:23:34.950
just like the translate
bot, all the API calls

00:23:34.950 --> 00:23:36.830
are just function calls.

00:23:36.830 --> 00:23:39.240
It's just
SpreadsheetApp.openById,

00:23:39.240 --> 00:23:42.870
Spreadsheet.getDataRange,
getValues, get URL.

00:23:42.870 --> 00:23:43.770
And that's it.

00:23:43.770 --> 00:23:45.970
You're not doing complicated--

00:23:45.970 --> 00:23:48.930
You're not building REST
requests or using SDK.

00:23:48.930 --> 00:23:51.104
You just call them as
if they're built in.

00:23:51.104 --> 00:23:52.770
And in addition, you
don't have to write

00:23:52.770 --> 00:23:55.290
any explicit
authentication code.

00:23:55.290 --> 00:23:59.280
So obviously, this
spreadsheet is [INAUDIBLE]..

00:23:59.280 --> 00:24:01.290
It's not publicly visible.

00:24:01.290 --> 00:24:02.940
But because I've
used this before,

00:24:02.940 --> 00:24:04.920
I have given access to it.

00:24:04.920 --> 00:24:08.060
And Google Apps Script is
responsible for handling

00:24:08.060 --> 00:24:08.730
all of that.

00:24:08.730 --> 00:24:10.650
You don't have to
write a call back.

00:24:10.650 --> 00:24:12.510
You don't have to
store the auth tokens.

00:24:12.510 --> 00:24:13.980
You don't have to refresh them.

00:24:13.980 --> 00:24:15.990
It's all taken care
of Apps Script.

00:24:15.990 --> 00:24:18.000
So after the user logs
in for the first time,

00:24:18.000 --> 00:24:19.490
Apps Script will
take care of it.

00:24:22.630 --> 00:24:26.860
So, so far, the bots you've seen
collect data and return them

00:24:26.860 --> 00:24:29.110
in plain text.

00:24:29.110 --> 00:24:32.320
But let's take a look at
how to present a richer

00:24:32.320 --> 00:24:34.570
UI in the form of cards.

00:24:34.570 --> 00:24:36.070
WESLEY CHUN: Right,
while it's true

00:24:36.070 --> 00:24:40.012
that plain text is the
easiest and fastest.

00:24:40.012 --> 00:24:41.470
But you've got to
use cards to make

00:24:41.470 --> 00:24:43.900
your response look good, right?

00:24:43.900 --> 00:24:45.550
So that's what this is for.

00:24:45.550 --> 00:24:49.270
So you can use JSON markup
to construct the UI card.

00:24:49.270 --> 00:24:52.480
And the best part is that
it's write once, run anywhere.

00:24:52.480 --> 00:24:54.999
Web, iOS, Android,
they're all covered.

00:24:54.999 --> 00:24:57.040
You don't need to write
a separate mobile version

00:24:57.040 --> 00:24:58.690
of your bot.

00:24:58.690 --> 00:25:01.480
Cards can be interactive
like the poll you see here.

00:25:01.480 --> 00:25:04.420
Users interact by clicking
on the vote button.

00:25:04.420 --> 00:25:06.010
Cards are also updateable.

00:25:06.010 --> 00:25:08.590
So when users submit votes, the
bar chart and the vote count,

00:25:08.590 --> 00:25:09.840
they update.

00:25:09.840 --> 00:25:11.500
Now, the user
experience would be

00:25:11.500 --> 00:25:14.380
much worse if a new card was
generated for every vote,

00:25:14.380 --> 00:25:16.210
right?

00:25:16.210 --> 00:25:19.660
The bot framework supports
a variety of widgets.

00:25:19.660 --> 00:25:22.420
So here are a couple to
get an idea, like buttons,

00:25:22.420 --> 00:25:27.410
formatted text, structured
data, images, links, and more.

00:25:27.410 --> 00:25:29.920
But really, the widgets
are just building blocks.

00:25:29.920 --> 00:25:32.050
The real magic is when
you put them all together

00:25:32.050 --> 00:25:34.180
and assemble them into
cards, whether they're

00:25:34.180 --> 00:25:38.100
interactive, updating, or both.

00:25:38.100 --> 00:25:41.360
All right, so Chuan, let's
see a demo of a bot that has

00:25:41.360 --> 00:25:43.740
interactive and updating cards.

00:25:43.740 --> 00:25:46.040
CHUAN JI: All right,
cool, let's go to demo.

00:25:46.040 --> 00:25:48.200
Great, thank you.

00:25:48.200 --> 00:25:52.520
So it's a great day here today
at Shoreline Amphitheater.

00:25:52.520 --> 00:25:56.300
How many of you have been to
Shoreline Amphitheater before?

00:25:56.300 --> 00:25:59.540
OK, some of you.

00:25:59.540 --> 00:26:01.130
That's more than I
expected, actually.

00:26:01.130 --> 00:26:05.810
But for the rest of you,
I just wrote a little bot

00:26:05.810 --> 00:26:09.640
that helps us find Shoreline
Amphitheater on Google Maps.

00:26:09.640 --> 00:26:10.890
So I call it the Where Is bot.

00:26:10.890 --> 00:26:12.500
And I'll just use it like this.

00:26:12.500 --> 00:26:17.480
Where is Shoreline Amphitheater?

00:26:17.480 --> 00:26:19.280
And what this spot
does is pull up

00:26:19.280 --> 00:26:22.460
a map that shows
Shoreline Amphitheater.

00:26:22.460 --> 00:26:27.170
And it shows an
image of the map.

00:26:27.170 --> 00:26:29.697
WESLEY CHUN: I don't see
any amphitheater there.

00:26:29.697 --> 00:26:30.530
CHUAN JI: All right.

00:26:30.530 --> 00:26:32.630
On the bottom, you can
see a row of buttons.

00:26:32.630 --> 00:26:36.270
And guess what happens.

00:26:36.270 --> 00:26:38.030
WESLEY CHUN: I
don't see it still.

00:26:38.030 --> 00:26:39.020
Oh wait, there it is.

00:26:39.020 --> 00:26:39.936
CHUAN JI: There it is.

00:26:39.936 --> 00:26:44.520
So the plus button zooms in
and the minus button zooms out.

00:26:44.520 --> 00:26:49.040
So we can see the Bay
Area in all of its glory.

00:26:49.040 --> 00:26:52.300
WESLEY CHUN: What's that
Google Maps icon down there?

00:26:52.300 --> 00:26:54.590
CHUAN JI: Right, so when
you click on this button,

00:26:54.590 --> 00:26:59.830
on web it will take you to
the Google Maps site centered

00:26:59.830 --> 00:27:01.730
on the location I typed.

00:27:01.730 --> 00:27:03.680
And on mobile, it will,
of course, take you

00:27:03.680 --> 00:27:06.500
to the Google Maps App.

00:27:06.500 --> 00:27:07.662
Cool.

00:27:07.662 --> 00:27:09.484
Would you like to see
how this is built?

00:27:09.484 --> 00:27:10.650
Let's go back to the slides.

00:27:16.040 --> 00:27:17.810
So here at the
first, we're going

00:27:17.810 --> 00:27:20.360
to start with our familiar
on-message function.

00:27:20.360 --> 00:27:22.850
So as you guys already know,
the on-message function

00:27:22.850 --> 00:27:26.120
is invoked when the user
sends a message to the bot.

00:27:26.120 --> 00:27:29.000
In this case, I said, where
is Shoreline Amphitheater.

00:27:29.000 --> 00:27:32.034
So its job is to
return the card.

00:27:32.034 --> 00:27:34.700
But in this case, we're going to
move the logic for constructing

00:27:34.700 --> 00:27:36.480
the card into a new
function we're going

00:27:36.480 --> 00:27:38.810
to show called Build Message.

00:27:38.810 --> 00:27:40.570
We'll just note here
that Build Message

00:27:40.570 --> 00:27:42.080
takes in three arguments.

00:27:42.080 --> 00:27:44.900
It takes in the
location of user typed.

00:27:44.900 --> 00:27:47.510
This is argumentText.trim.

00:27:47.510 --> 00:27:49.610
So we move the space.

00:27:49.610 --> 00:27:51.620
And it's going to take
initial zoom level.

00:27:51.620 --> 00:27:53.703
And it's going to take in
a third parameter, which

00:27:53.703 --> 00:27:54.710
is the response type.

00:27:54.710 --> 00:27:56.090
So when a new
message is sent, we

00:27:56.090 --> 00:27:58.340
want to send a new
message always.

00:27:58.340 --> 00:28:02.170
So we just use new message type.

00:28:02.170 --> 00:28:05.130
We'll take a look at that later.

00:28:05.130 --> 00:28:06.920
So now let's look
at Build Message.

00:28:06.920 --> 00:28:09.500
This is kind of the
meat of the code.

00:28:09.500 --> 00:28:12.230
As you saw before, it takes
in location the user typed.

00:28:12.230 --> 00:28:13.760
It takes initial zoom level.

00:28:13.760 --> 00:28:16.850
And it takes in
the response type.

00:28:16.850 --> 00:28:19.097
So what we're going
to do in Build Message

00:28:19.097 --> 00:28:21.680
is that we're going to construct
each element, or each widget,

00:28:21.680 --> 00:28:24.890
inside this card in sequence.

00:28:24.890 --> 00:28:26.516
So we start with the header.

00:28:26.516 --> 00:28:28.460
As you can see, just
like the header,

00:28:28.460 --> 00:28:29.919
the other widgets are the same.

00:28:29.919 --> 00:28:31.460
All of these switches
are represented

00:28:31.460 --> 00:28:35.450
by a plain JavaScript object And
the header has two properties.

00:28:35.450 --> 00:28:37.400
There's a title,
and it has an icon.

00:28:40.350 --> 00:28:45.070
So next, we're going to build
the image that we see here,

00:28:45.070 --> 00:28:46.560
the map image.

00:28:46.560 --> 00:28:49.420
We'll take a look at how
that's built in the next slide.

00:28:49.420 --> 00:28:51.790
And then we'll construct
a row of buttons

00:28:51.790 --> 00:28:53.027
that you see on the bottom.

00:28:53.027 --> 00:28:55.360
So now here we're going to
have write create in two more

00:28:55.360 --> 00:28:57.040
functions, build
Google Maps link, which

00:28:57.040 --> 00:28:58.870
takes in just a location.

00:28:58.870 --> 00:29:01.240
And we're going to
have a function called

00:29:01.240 --> 00:29:04.270
build button, which takes
in the label, the location,

00:29:04.270 --> 00:29:06.640
and the target zoom level
that the user will be taken

00:29:06.640 --> 00:29:09.704
to when they click the button.

00:29:09.704 --> 00:29:11.620
So finally, we're going
to put it all together

00:29:11.620 --> 00:29:14.260
into one big JSON object.

00:29:14.260 --> 00:29:17.770
And we return this object
back to Hangouts Chat.

00:29:17.770 --> 00:29:19.770
And that creates the card.

00:29:19.770 --> 00:29:21.395
So let's look at each
of these widgets.

00:29:24.070 --> 00:29:26.170
First, let's look
at build image.

00:29:26.170 --> 00:29:31.630
It shows an image from Google
Maps in an image widget.

00:29:31.630 --> 00:29:34.490
So in this example, we're
going to use the Google Maps

00:29:34.490 --> 00:29:38.310
API, which you might notice is
again built into Apps Script.

00:29:38.310 --> 00:29:40.630
We just say, maps
on new static map.

00:29:40.630 --> 00:29:45.220
We set a bunch of parameters,
like location zoom level,

00:29:45.220 --> 00:29:48.460
add a marker, that's the
little red pin you see there.

00:29:48.460 --> 00:29:51.190
And you can just
grab a maps URL.

00:29:51.190 --> 00:29:53.040
All right, pretty simple.

00:29:53.040 --> 00:29:54.716
It's just a function call away.

00:29:54.716 --> 00:29:56.590
And then finally, we're
going to take the URL

00:29:56.590 --> 00:29:58.660
and construct a JavaScript
object that represents

00:29:58.660 --> 00:30:02.164
the image widget and return it.

00:30:02.164 --> 00:30:04.080
So next we're going to
build the zoom buttons.

00:30:04.080 --> 00:30:06.420
Remember that these zoom
buttons are interactive.

00:30:06.420 --> 00:30:10.990
So in addition to creating
the UI side of things,

00:30:10.990 --> 00:30:15.630
we're going to add a text button
which contains a text label.

00:30:15.630 --> 00:30:18.240
We're going to have
an OnClick parameter.

00:30:18.240 --> 00:30:21.450
What's inside the
OnClick parameter?

00:30:21.450 --> 00:30:23.790
It's going to be the payloads
that we want sent back

00:30:23.790 --> 00:30:27.800
to our bot when a user interacts
with one of these buttons.

00:30:27.800 --> 00:30:29.550
So here we're going
to set two parameters.

00:30:29.550 --> 00:30:31.470
It's going to put the
location the user typed

00:30:31.470 --> 00:30:33.780
in the beginning and
the new zoom level

00:30:33.780 --> 00:30:37.140
that the user will be taken
to when they click the button.

00:30:37.140 --> 00:30:40.680
So like I said, this
object, or this payload,

00:30:40.680 --> 00:30:42.540
is going to be sent
back to our bot

00:30:42.540 --> 00:30:44.190
when the user
clicks this button.

00:30:44.190 --> 00:30:47.800
So where do we
receive this payload?

00:30:47.800 --> 00:30:50.010
You receive it in the
function called OnCard click.

00:30:50.010 --> 00:30:52.890
So just like OnMessage, which
is triggered when the user sends

00:30:52.890 --> 00:30:55.740
a message, OnCard click is
triggered when a user clicks

00:30:55.740 --> 00:30:58.350
on a button in a card.

00:30:58.350 --> 00:31:00.860
So what it receives is
the payload of the button

00:31:00.860 --> 00:31:02.269
that the user clicked.

00:31:02.269 --> 00:31:03.810
So we can extract
the parameters that

00:31:03.810 --> 00:31:06.268
were assigned to the button,
and see we extract a location.

00:31:06.268 --> 00:31:07.581
We extract the zoom level.

00:31:07.581 --> 00:31:10.080
We do a little bit of math to
make sure the zoom level isn't

00:31:10.080 --> 00:31:11.370
out of bounds.

00:31:11.370 --> 00:31:12.870
And then, guess
what, we just called

00:31:12.870 --> 00:31:15.030
the same build
message function that

00:31:15.030 --> 00:31:17.040
constructed the initial card.

00:31:17.040 --> 00:31:19.890
The only difference is
that this time we're

00:31:19.890 --> 00:31:22.290
going to set the parameter
to update message.

00:31:22.290 --> 00:31:24.724
Because what we want is
not to post a new message.

00:31:24.724 --> 00:31:26.390
We just want to update
the original card

00:31:26.390 --> 00:31:27.223
the user clicked on.

00:31:31.440 --> 00:31:35.810
So finally, we have the
icon on the bottom left that

00:31:35.810 --> 00:31:37.970
takes the user to Google Maps.

00:31:37.970 --> 00:31:41.870
So like the zoom buttons,
it's going to create a button.

00:31:41.870 --> 00:31:44.657
But it's not going to have
an OnClick handle or payload

00:31:44.657 --> 00:31:47.240
that will be returned to the bot
because we don't want the bot

00:31:47.240 --> 00:31:48.050
to be invoked.

00:31:48.050 --> 00:31:50.630
We just want to send the
user directly to Google Maps.

00:31:50.630 --> 00:31:54.020
So here we construct
a link to Google Maps.

00:31:54.020 --> 00:31:56.630
And then we attach it to
the Open Link property,

00:31:56.630 --> 00:31:59.180
which just instructs
Hangouts Chats to not

00:31:59.180 --> 00:32:01.790
deliver the response
back to the bot

00:32:01.790 --> 00:32:05.670
but just call up Google Maps.

00:32:05.670 --> 00:32:09.860
OK, so I want to stress that
while this example shows you

00:32:09.860 --> 00:32:13.670
how to build this kind of
interactivity in Apps Script,

00:32:13.670 --> 00:32:16.010
this functionality is not
limited to App Script.

00:32:16.010 --> 00:32:17.600
The same functionality
is available

00:32:17.600 --> 00:32:21.720
as well if you build your bot
using HTP endpoint or a cloud

00:32:21.720 --> 00:32:22.539
pops up endpoint.

00:32:22.539 --> 00:32:24.080
So what this really
means is that you

00:32:24.080 --> 00:32:27.320
can build the same rich
user experience with cards

00:32:27.320 --> 00:32:29.540
in the language of your
choice and deploy it

00:32:29.540 --> 00:32:31.053
to the environment
of your choice.

00:32:33.740 --> 00:32:37.340
So far we've shown you bots
that respond to something

00:32:37.340 --> 00:32:38.180
the user does.

00:32:38.180 --> 00:32:39.680
Or the user has
to send a message

00:32:39.680 --> 00:32:42.572
or click on a button for
your bot to do anything.

00:32:42.572 --> 00:32:44.030
But what if the
bot needs to notify

00:32:44.030 --> 00:32:45.690
the user about something?

00:32:45.690 --> 00:32:47.860
WESLEY CHUN: All right,
so thanks, Chuan.

00:32:47.860 --> 00:32:50.356
So the framework supports
asynchronous messages

00:32:50.356 --> 00:32:51.980
which are perfect
for long running jobs

00:32:51.980 --> 00:32:53.810
or out-of-band notifications.

00:32:53.810 --> 00:32:55.400
Asynchronous
messages can also be

00:32:55.400 --> 00:32:58.010
sent to specific
threads for contacts.

00:32:58.010 --> 00:33:00.280
So here our bot need to
contact Hangouts Chat.

00:33:00.280 --> 00:33:04.200
So some OAuth is needed.

00:33:04.200 --> 00:33:05.670
All right, so when
you see OAuth,

00:33:05.670 --> 00:33:07.710
it's a strong indication
you're using an API.

00:33:07.710 --> 00:33:09.450
So there's no exception
here as a bot has

00:33:09.450 --> 00:33:11.370
to call into Hangouts Chat now.

00:33:11.370 --> 00:33:14.310
So this Python sample uses
the bot's permission scope

00:33:14.310 --> 00:33:16.200
plus a service
account credentials

00:33:16.200 --> 00:33:18.515
that you got downloaded
from your API project.

00:33:18.515 --> 00:33:20.140
And then once you
have the credentials,

00:33:20.140 --> 00:33:22.170
you establish a service
endpoint to the API,

00:33:22.170 --> 00:33:24.780
like you see with the
discovery.build call.

00:33:24.780 --> 00:33:26.940
And then you can use
the API to send messages

00:33:26.940 --> 00:33:29.070
to a DM or a room.

00:33:29.070 --> 00:33:31.635
Now, like any other bot,
this bot can call other APIs.

00:33:31.635 --> 00:33:33.180
Or it could do any
other processing

00:33:33.180 --> 00:33:36.385
that you want to have
it done and then collate

00:33:36.385 --> 00:33:38.010
the information and
then send that back

00:33:38.010 --> 00:33:40.674
into the room with the DM.

00:33:40.674 --> 00:33:44.070
All right, more generally,
besides just creating messages,

00:33:44.070 --> 00:33:47.340
the API can do all CRUD
operations on messages.

00:33:47.340 --> 00:33:49.740
It also has additional features
to give you more context,

00:33:49.740 --> 00:33:52.590
like getting information
on room and DMS or members

00:33:52.590 --> 00:33:55.710
who are in room and DMs.

00:33:55.710 --> 00:33:57.660
In addition to the
API, Hangouts Chat also

00:33:57.660 --> 00:33:59.340
supports in-coming web hooks.

00:33:59.340 --> 00:34:01.230
Now these are great
for one-off alerts

00:34:01.230 --> 00:34:02.940
like when a server goes down.

00:34:02.940 --> 00:34:05.010
They're quick and dirty
or quick and easy.

00:34:05.010 --> 00:34:08.010
And you can integrate with
any of your custom workflows.

00:34:08.010 --> 00:34:10.290
And the way you do it is you
go to the Room with a DM.

00:34:10.290 --> 00:34:11.965
And you pull down
configure webhooks.

00:34:11.965 --> 00:34:14.340
And then from there, you can
see all the current webhooks

00:34:14.340 --> 00:34:15.579
that are currently defined.

00:34:15.579 --> 00:34:17.370
And you can have
different ones because you

00:34:17.370 --> 00:34:20.121
may have different apps that
are posting different alerts.

00:34:20.121 --> 00:34:21.870
So you just click on
the icon to the right

00:34:21.870 --> 00:34:25.409
to copy the web hook
you're able to use.

00:34:25.409 --> 00:34:27.510
Now in-coming webhooks
can come from a variety

00:34:27.510 --> 00:34:30.150
of sources like monitoring
apps or even the command line.

00:34:30.150 --> 00:34:33.120
So Chuan's going to prove this
by doing an incoming WebHook

00:34:33.120 --> 00:34:35.500
from a cURL command.

00:34:35.500 --> 00:34:37.020
CHUAN JI: All right
thank you, Wes.

00:34:37.020 --> 00:34:38.280
All right, let's get to demo.

00:34:38.280 --> 00:34:39.870
Thank you.

00:34:39.870 --> 00:34:41.674
So as Wes showed
you, the way you

00:34:41.674 --> 00:34:43.590
configure a webhook is
you go to a room, click

00:34:43.590 --> 00:34:44.760
on configure webhooks.

00:34:44.760 --> 00:34:46.290
And we're going to
see a dialog here

00:34:46.290 --> 00:34:48.630
that shows you the webhooks
that you've configured.

00:34:48.630 --> 00:34:51.580
You can have a URL
here that you can use.

00:34:51.580 --> 00:34:53.600
So in this particular
case, to just give

00:34:53.600 --> 00:34:56.340
you give some context, let's
say we have an imaginary Task

00:34:56.340 --> 00:34:58.110
Manager app.

00:34:58.110 --> 00:35:00.480
And it just wants to
send a quick notification

00:35:00.480 --> 00:35:03.670
into Hangouts Chat
when something happens.

00:35:03.670 --> 00:35:07.590
So I'm going to switch
to a terminal here.

00:35:07.590 --> 00:35:10.290
And here you can see
I pasted the command.

00:35:10.290 --> 00:35:13.680
It's going to be a cURL command
sending an HTTP post request.

00:35:13.680 --> 00:35:15.790
It's going to contain
a JSON payload.

00:35:15.790 --> 00:35:17.040
That's the header here.

00:35:17.040 --> 00:35:20.340
And it's going to contain the
URL I copied from the dialogue

00:35:20.340 --> 00:35:22.904
from Hangouts Chat
in the background.

00:35:22.904 --> 00:35:24.570
And the text I'm going
to send, remember

00:35:24.570 --> 00:35:26.640
this is the same
payload, the same JSON

00:35:26.640 --> 00:35:29.400
object, that you would
send from Apps Script

00:35:29.400 --> 00:35:31.470
or from an HTTP request.

00:35:31.470 --> 00:35:33.940
It's the same JSON format.

00:35:33.940 --> 00:35:35.190
So you just send us a payload.

00:35:35.190 --> 00:35:37.350
And let me hit enter here.

00:35:37.350 --> 00:35:39.900
And if the thing goes
well, so you can see here,

00:35:39.900 --> 00:35:41.330
before we close
the terminal, you

00:35:41.330 --> 00:35:43.765
can see that I've
gotten back a response,

00:35:43.765 --> 00:35:49.080
a JSON formatted payload from
Hangouts Chat that shows me,

00:35:49.080 --> 00:35:51.240
among other things, the
ID of the message that

00:35:51.240 --> 00:35:54.590
was just created, the space that
it was posted in, and so on.

00:35:54.590 --> 00:35:58.220
So now let's take a look at
this message in Hangouts Chat.

00:35:58.220 --> 00:36:01.650
As you can see here, this
created a new conversation.

00:36:01.650 --> 00:36:06.084
And it contains the text
that we had just sent to it.

00:36:06.084 --> 00:36:07.250
Let's go back to the slides.

00:36:11.540 --> 00:36:14.810
So one of the most innovative
features in Hangouts Chat,

00:36:14.810 --> 00:36:17.440
as Mike explained
to you guys earlier,

00:36:17.440 --> 00:36:20.410
is threaded
conversations, right?

00:36:20.410 --> 00:36:23.650
So threaded conversations
are great for grouping

00:36:23.650 --> 00:36:26.240
relevant context together.

00:36:26.240 --> 00:36:28.750
So in the context of our
imaginary Task Manager

00:36:28.750 --> 00:36:31.435
app, what we really like
to see is the history

00:36:31.435 --> 00:36:33.880
around a particular
task grouped together,

00:36:33.880 --> 00:36:38.030
kind of like the top
thread you can see here.

00:36:38.030 --> 00:36:40.660
So what this means is that
all the relevant discussions

00:36:40.660 --> 00:36:43.840
from people, all the relevant
notifications from this app,

00:36:43.840 --> 00:36:45.620
get grouped into the
same conversation.

00:36:45.620 --> 00:36:49.220
So it's very easy for people
to understand whats going on.

00:36:49.220 --> 00:36:51.310
So how do we do this?

00:36:51.310 --> 00:36:54.610
Just like you saw
before on my screen,

00:36:54.610 --> 00:36:56.860
after you send a request
to Hangouts Chat,

00:36:56.860 --> 00:37:00.680
we return the data,
the IDs, and so on,

00:37:00.680 --> 00:37:02.309
about the messages created.

00:37:02.309 --> 00:37:03.350
So you can remember that.

00:37:03.350 --> 00:37:06.490
You can remember the association
between task ID and the thread

00:37:06.490 --> 00:37:07.150
ID.

00:37:07.150 --> 00:37:07.960
And that's perfectly fine.

00:37:07.960 --> 00:37:08.630
There's nothing wrong with that.

00:37:08.630 --> 00:37:09.920
You can totally do that.

00:37:09.920 --> 00:37:12.250
But since this is a
really common use case

00:37:12.250 --> 00:37:15.590
we felt we could make
it more convenient.

00:37:15.590 --> 00:37:19.810
So the solution we came up with
is the idea of a thread key.

00:37:19.810 --> 00:37:22.490
So you can think thread
key as a custom identifier.

00:37:22.490 --> 00:37:24.042
It's a [INAUDIBLE]
to Hangouts Chat.

00:37:24.042 --> 00:37:25.750
But it's some identifier
that makes sense

00:37:25.750 --> 00:37:27.640
to you in your problem domain.

00:37:27.640 --> 00:37:29.470
So for example, in
our Task Manager app

00:37:29.470 --> 00:37:31.090
it could be a task ID.

00:37:31.090 --> 00:37:33.520
If you have a customer
ticket tracking system,

00:37:33.520 --> 00:37:36.250
it could be a custom ticket
ID, maybe a customer order ID.

00:37:36.250 --> 00:37:37.950
It doesn't matter.

00:37:37.950 --> 00:37:40.969
And what you do with it is
just specify in each request

00:37:40.969 --> 00:37:42.510
that you make it
when you're creating

00:37:42.510 --> 00:37:44.514
a message in Hangouts Chat.

00:37:44.514 --> 00:37:45.680
And we do the heavy lifting.

00:37:45.680 --> 00:37:46.780
We will remember this.

00:37:46.780 --> 00:37:50.310
The first time we see a message
that has a particular thread

00:37:50.310 --> 00:37:52.120
key, we will create
a new conversation.

00:37:52.120 --> 00:37:56.050
Subsequent messages get posted
into the same conversation.

00:37:56.050 --> 00:37:57.490
So now you don't
have to remember

00:37:57.490 --> 00:38:01.870
that mapping between an
entity in your problem domain

00:38:01.870 --> 00:38:05.917
and a thread or a
conversation in Hangouts Chat.

00:38:05.917 --> 00:38:07.750
So of course, this
example here on the slide

00:38:07.750 --> 00:38:10.840
shows you are cURL command,
which is very simple.

00:38:10.840 --> 00:38:13.780
But this of course, doesn't
just work for incoming webhooks

00:38:13.780 --> 00:38:14.650
or from cURL.

00:38:14.650 --> 00:38:16.210
This works for bots as well.

00:38:16.210 --> 00:38:21.340
So you could write as a bot
and could use thread key

00:38:21.340 --> 00:38:23.250
to do the same group conv--

00:38:23.250 --> 00:38:26.772
group messages into
the same conversation.

00:38:26.772 --> 00:38:29.750
All right, so this wraps
up our introductory tour

00:38:29.750 --> 00:38:32.445
of the Hangouts
Chat bot framework.

00:38:32.445 --> 00:38:35.070
And I'll hand it off to Mike to
take us across the finish line.

00:38:37.740 --> 00:38:39.450
MIKE SORVILLO: Thank
you, Wes and Chuan.

00:38:39.450 --> 00:38:41.640
Just to summarize what
we talked about today, so

00:38:41.640 --> 00:38:43.260
the Hangout Chat
service with bots

00:38:43.260 --> 00:38:46.940
helps teams accelerate
their team and productivity.

00:38:46.940 --> 00:38:50.670
You can stay notified, automate
tasks, query information, all

00:38:50.670 --> 00:38:52.775
without changing any contexts.

00:38:52.775 --> 00:38:54.150
And like they
showed you, there's

00:38:54.150 --> 00:38:55.920
many different ways to connect.

00:38:55.920 --> 00:38:57.720
You can spin up
your own web service

00:38:57.720 --> 00:38:59.940
using any cloud or
language you want.

00:38:59.940 --> 00:39:01.890
You can use Cloud
Pub/Sub to work

00:39:01.890 --> 00:39:04.590
with a firewall inside
your organization.

00:39:04.590 --> 00:39:06.750
Or the easiest way, if
you're building a custom bot

00:39:06.750 --> 00:39:09.137
to streamline a workflow,
is using Apps Script

00:39:09.137 --> 00:39:11.220
where you don't have to
worry about servers, auth,

00:39:11.220 --> 00:39:14.400
or anything like that.

00:39:14.400 --> 00:39:16.920
So to get started, check
out developers.googl

00:39:16.920 --> 00:39:20.970
e.com/hangoutschat for
more documentation on how

00:39:20.970 --> 00:39:22.710
to actually do all of this.

00:39:22.710 --> 00:39:25.400
If you're a G Suite customer and
you haven't tried Hangouts Chat

00:39:25.400 --> 00:39:27.570
today, you can go
to chat.google.com

00:39:27.570 --> 00:39:29.569
to try the product itself.

00:39:29.569 --> 00:39:31.110
And if you have more
questions, we're

00:39:31.110 --> 00:39:33.900
happy to answer them
in Dome B. We'll

00:39:33.900 --> 00:39:35.320
be giving some more demos.

00:39:35.320 --> 00:39:37.440
And we could show you
some more details on how

00:39:37.440 --> 00:39:40.750
to publish bots and whatnot.

00:39:40.750 --> 00:39:43.026
So before we all leave,
we want to hear from you.

00:39:43.026 --> 00:39:44.775
So please provide
feedback for the session

00:39:44.775 --> 00:39:48.360
at google.com/io/schedule.

00:39:48.360 --> 00:39:49.650
And thank you for all coming .

00:39:49.650 --> 00:39:51.025
Enjoy the rest of
the conference.

00:39:51.025 --> 00:39:52.810
[APPLAUSE]

00:39:52.810 --> 00:39:56.050
[MUSIC PLAYING]

