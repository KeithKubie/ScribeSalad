WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.090
&gt;&gt; SCHWARTZ: Okay, welcome. Thanks everybody
for coming today. This morning at the key

00:00:09.090 --> 00:00:12.809
note, we introduced Google Storage for Developers,
and today we'd like to tell you a little bit

00:00:12.809 --> 00:00:17.539
more about it. Hi, my name is Mike Schwartz.
I'm an engineer working on the Google Storage

00:00:17.539 --> 00:00:21.810
project. And my colleague is David Erb; he
is the engineering lead for the project. And

00:00:21.810 --> 00:00:25.519
together we're going to talk to you about
Google storage. And if anybody has questions

00:00:25.519 --> 00:00:29.640
or do you want to see notes about things,
as we're presenting, please copy down this

00:00:29.640 --> 00:00:35.000
link and visit us on wave. We'll just wait
a couple more seconds to let people have a

00:00:35.000 --> 00:00:45.940
chance to copy that down. Okay, so Google
Storage is a Cloud-based binary objects store,

00:00:45.940 --> 00:00:50.559
and by that way mean that things are structured
as buckets and objects. So a bucket is basically

00:00:50.559 --> 00:00:56.170
just a flat name space. You can get a bunch
of buckets and you can put objects in the

00:00:56.170 --> 00:00:59.769
buckets. And for those of you who are familiar
with other Clouds storage provider, this is

00:00:59.769 --> 00:01:07.170
a pretty common paradigm. You see then, Microsoft
2.0 and Amazon S3. And the key thing to think--take

00:01:07.170 --> 00:01:11.460
away from this is you can have many, many
buckets. Buckets can have many, many objects

00:01:11.460 --> 00:01:16.210
and objects can be really big. And we'll talk
a little bit more about some of those sizes

00:01:16.210 --> 00:01:22.320
later. Another aspect of Google storage is
that you control your data, and this means

00:01:22.320 --> 00:01:26.780
a couple of things. First of all, you can
make data private. It's only visible to you.

00:01:26.780 --> 00:01:31.280
You can make it shared and you can--we'll
talk more about the sharing model. It's pretty

00:01:31.280 --> 00:01:35.890
flexible sharing model that we'll be introducing.
You can share it with individuals and we'll

00:01:35.890 --> 00:01:41.700
talk more about groups too. And you can also
make it public. So the entire world can see

00:01:41.700 --> 00:01:45.630
your objects. You have a choice over that.
And the other aspect about you controlling

00:01:45.630 --> 00:01:50.061
your data is that you can get your data out
in anytime. And we believe this is important,

00:01:50.061 --> 00:01:53.700
across Google, we believe it's important.
It's your data. You should be able to get

00:01:53.700 --> 00:01:59.560
it all out completely, anytime you want to.
Finally, what is "for developers" mean, the

00:01:59.560 --> 00:02:06.070
products called Google Storage for Developers?
Well anybody will be able to sign up for this

00:02:06.070 --> 00:02:12.140
service. We're introducing it as a trial,
as a preliminary version for now and we're

00:02:12.140 --> 00:02:17.510
going to give you guys a chance to get invites
for this initial period a little later in

00:02:17.510 --> 00:02:22.230
the talk. But, eventually, everybody would
be able to sign up, but the product is really

00:02:22.230 --> 00:02:27.510
aimed to developers. So this means a few things.
First of all, it uses a RESTful API; and for

00:02:27.510 --> 00:02:31.530
people who haven't heard the term, REST stands
for Representational State Transfer. It's

00:02:31.530 --> 00:02:36.540
essentially the model that HTTP is based on.
You have a limited set of verbs, like PUT

00:02:36.540 --> 00:02:41.810
and GET and then you have URIs for naming
everything in the system and so all the operations

00:02:41.810 --> 00:02:48.810
are modeled as simple verbs with URIs. And
Dave will talk more about that later too.

00:02:48.810 --> 00:02:54.040
Also there is many different software development
kits and tools. Lots of open source tools

00:02:54.040 --> 00:02:58.470
and software development kits, many that prig
us the project and also some one's that we're

00:02:58.470 --> 00:03:03.120
introducing, we'll talk about those. And also
there's good integration with Google services.

00:03:03.120 --> 00:03:11.070
So what are some of the benefits? Well, first
of all, it's built on Google's high performance

00:03:11.070 --> 00:03:18.709
and scalable infrastructure. So we'll talk
more about replication and how we get performance

00:03:18.709 --> 00:03:23.569
and availability out of the system later;
also, very flexible authentication and sharing

00:03:23.569 --> 00:03:27.710
models, which again we'll talk about later.
And it's easy to get started quickly with

00:03:27.710 --> 00:03:31.980
third party tools and utilities. Some that
we provide, some--like I said before that

00:03:31.980 --> 00:03:37.900
are available in the open source world. So
first thing I'd like to share you is a quick

00:03:37.900 --> 00:03:42.510
demo. It's very easy to get start using Google
Storage and like I said at the end of the

00:03:42.510 --> 00:03:47.800
talk, we're going to give you a link where
you can ask to be--to be given an invite.

00:03:47.800 --> 00:03:51.460
You'll click that invite and you very quickly
can get into using Google Storage, and I'll

00:03:51.460 --> 00:03:56.590
show you what that looks like right now. So
you'll get an email in you box, after you

00:03:56.590 --> 00:04:01.959
fill out this free form to ask for an invitation.
And when you click on the email, it says thank

00:04:01.959 --> 00:04:07.300
you and here's your invite. If you click on
that, here's the invite, and as you'll notice,

00:04:07.300 --> 00:04:11.170
I'm actually using a little temporary account
here for the rest of the demos we do. I'm

00:04:11.170 --> 00:04:14.230
not going to use this account. I'm using this
temporary account so that it's actually a

00:04:14.230 --> 00:04:23.800
brand new invite. This account has never used
Google Storage before. And when I log in,

00:04:23.800 --> 00:04:28.850
what you is some terms of service, a little
welcome page. Some terms of service that you

00:04:28.850 --> 00:04:36.199
should read and you click it--click accept--accept,
and the first thing you're taken to is some

00:04:36.199 --> 00:04:40.139
documentation. And you're welcome to cruise
the documentation, there's a lot of information

00:04:40.139 --> 00:04:43.789
available here. However, it's pretty easy
to get started in. If you want, you don't

00:04:43.789 --> 00:04:47.561
even need to go to the documentation and you
just can go right over this link Google Storage

00:04:47.561 --> 00:04:54.529
Manager and show you this. So the Google Storage
Manager is a web-based user interface that

00:04:54.529 --> 00:05:00.830
we're providing as part of this release. It
has a simple explorer like model that you're

00:05:00.830 --> 00:05:05.840
familiar with from also different explorer
services. And as you can see, right now I

00:05:05.840 --> 00:05:11.069
just have kind of an empty account, no buckets.
So the first thing I'm going to do is create

00:05:11.069 --> 00:05:18.710
myself a bucket. And I'll give it an imaginative
name, mynewbucket, creates the bucket and

00:05:18.710 --> 00:05:22.629
you can click down into there. There's nothing
in there, right now. It says the thing is

00:05:22.629 --> 00:05:27.779
empty and you can drag objects in there. So
for example, I'm going to drag this image

00:05:27.779 --> 00:05:33.779
that I have on my desktop. It's uploading
this and this is--and then what I can do--you

00:05:33.779 --> 00:05:37.889
can see over here, there's a checkbox, it's
created out right now. That means that the

00:05:37.889 --> 00:05:41.590
object is currently private. So the default,
if you don't specify anything else or when

00:05:41.590 --> 00:05:46.199
you first upload the object, this is private
and you can later change the ACLs. If I click

00:05:46.199 --> 00:05:50.499
on this checkbox, I have now just made it
publicly readable and there's more flexibility

00:05:50.499 --> 00:05:55.199
than that, it's not really exposed right here.
We'll talk more about ACLs later. But you

00:05:55.199 --> 00:06:00.089
could at this point if you want it. Go copy
this link and email it to your friend or post

00:06:00.089 --> 00:06:03.900
it on a blog. Or have you want to expose the
thing, what I'm going to do instead, I'm just

00:06:03.900 --> 00:06:10.250
going to click on it, download it again and
here's this object that I just loaded. This

00:06:10.250 --> 00:06:15.180
is actually a picture of some of the folks
who worked on the project, up in the Seattle

00:06:15.180 --> 00:06:20.949
office. Okay, so it's as easy as that, you
get an email, you click on it, you read some

00:06:20.949 --> 00:06:25.130
terms of service, and immediately you can
start using Google Storage. And just then

00:06:25.130 --> 00:06:29.400
when I did that, you know, data was copied
down to all of our services and replicated.

00:06:29.400 --> 00:06:37.059
How--David is going to talk later more. It's
quite easy to use. Okay, so let me talk briefly

00:06:37.059 --> 00:06:42.479
now about some of the services inside of Google
that use Google storage. There's a number

00:06:42.479 --> 00:06:45.909
of one's up here, and if you look at them,
the way I like to break it down, is the first

00:06:45.909 --> 00:06:51.009
two: Panoramio and picnik. These are services
that are a lot like some services that view

00:06:51.009 --> 00:06:56.240
as a developer might build. And by that I
mean basically lets your users upload data

00:06:56.240 --> 00:07:00.899
and share with other users as--then can come
in and get to the data. So it's a pretty common

00:07:00.899 --> 00:07:09.259
usage pattern. The ones over here on the right
side, double click and YouTube; these are

00:07:09.259 --> 00:07:14.820
modeling, if you will, services that are different
kind of service that you might build which

00:07:14.820 --> 00:07:20.210
is services that generate data and then other
services consume that data. In this case,

00:07:20.210 --> 00:07:25.369
I'm talking about reporting data. And that
is all done through big store. I mean through

00:07:25.369 --> 00:07:32.639
Google Storage. The--the next one, the Data
Liberation is basically uses Google Storage

00:07:32.639 --> 00:07:38.449
as a platform for letting users gets all of
their data out of various use, Google services

00:07:38.449 --> 00:07:44.439
and google.org. So, a few months back when
the earthquake hit Haiti, there was a need

00:07:44.439 --> 00:07:49.219
for the people who were delivering relief
to get access to multiple terabytes of satellite

00:07:49.219 --> 00:07:54.529
imagery and so we used Google Storage to give
them a way to get at that data. And then on

00:07:54.529 --> 00:08:01.770
the bottom here, Google BigQuery and the Prediction
API, these are a couple of great new services

00:08:01.770 --> 00:08:09.050
APIs that we just announced at the conference
this morning. These are analytic frameworks

00:08:09.050 --> 00:08:14.740
that let you work with really large data sets.
And I encourage you to go to tomorrow's 10:15

00:08:14.740 --> 00:08:18.639
AM talk to find out more. But let me just
give you a kind of the brief, briefest, you

00:08:18.639 --> 00:08:24.449
know, one liner for that. Basically, Google
BigQuery lets you analyze what happened in

00:08:24.449 --> 00:08:29.919
the past, so understand the past. And Google's
Prediction API helps you to predict the future

00:08:29.919 --> 00:08:38.209
based on enormous data sets. We also have
a number of current users that are partners

00:08:38.209 --> 00:08:42.610
who helped us, you know, test out and give
us feedback and worked with us, as we were

00:08:42.610 --> 00:08:46.130
bringing the product to market. You can see
a number of their logos here and we're going

00:08:46.130 --> 00:08:51.019
to actually show you a couple of demos today.
I want to show you simplicity and the U.S.

00:08:51.019 --> 00:08:58.339
Navy, today, right in this talk. So at this
point I'd like to turn things over to Damon

00:08:58.339 --> 00:09:01.970
Moritz, who's with the U.S. Navy Office of
the Information to give a demo.

00:09:01.970 --> 00:09:08.800
&gt;&gt; MORITZ: Hello. I'm the video manager for
the U.S. Navy Office of the Information in

00:09:08.800 --> 00:09:14.620
Washington, D.C. And our office mission is
to collect and disseminates still photos and

00:09:14.620 --> 00:09:20.370
video that comes to us from throughout the
fleet. And we hand those videos off to the

00:09:20.370 --> 00:09:23.860
media, documentary producers, we upload it
to YouTube, places like that to help tell

00:09:23.860 --> 00:09:29.500
the Navy story. Now, when I started this job
seven years ago, it's kind of difficult. We

00:09:29.500 --> 00:09:34.560
would receive a file. They'd give an FTP to
us, whatever. A good example is the tsunamis.

00:09:34.560 --> 00:09:39.470
So the files would come in, we would ingest
that file, burn it on a tape, run the tapes

00:09:39.470 --> 00:09:45.430
down to the media, come back upstairs, delete
the media because there's a new file. It didn't

00:09:45.430 --> 00:09:52.060
work. So we went looking for good solution
to allow us to do one good piece of work and

00:09:52.060 --> 00:09:56.350
then profit from that work forever. In fact,
we're still profiting from a lot of the work

00:09:56.350 --> 00:10:01.870
that we did early on and then doing that we
found MediaBeacon. So MediaBeacon got us going.

00:10:01.870 --> 00:10:08.110
We were doing pretty well. We have a single
Ethernet line that fed it on a 100 Meg pipe

00:10:08.110 --> 00:10:14.860
coming into the Pentagon. Things were good,
things were real good. We did Haiti--I'm sorry--we

00:10:14.860 --> 00:10:24.020
did Katrina, we did any piracy operations.
But then came Haiti; one of the biggest events

00:10:24.020 --> 00:10:30.160
that we've ever dealt with. And we went from
doing a peak of about 20 terabytes of data

00:10:30.160 --> 00:10:35.730
burst to 85 terabytes in a span of a month.
And everybody kind of panicked, our customers

00:10:35.730 --> 00:10:40.800
are calling saying, it's not fast enough,
it's not giving us what we expect. So we said,

00:10:40.800 --> 00:10:46.491
"Well, we have the truck. We know how to package
it up and get it in our truck and now we need

00:10:46.491 --> 00:10:50.269
the highway. We need to get it out and get
it out faster." So we started looking around

00:10:50.269 --> 00:10:56.730
and what we came across luckily was Google
Storage. And Google Storage has done some

00:10:56.730 --> 00:11:00.389
pretty neat things for us and--actually, I
forgot to start this. This is going to be

00:11:00.389 --> 00:11:11.680
an example of what MediaBeacon looks like.
It should play. Anyway, so what MediaBeacon

00:11:11.680 --> 00:11:21.040
with Google Web Toolkit and HTML5 did for
us in the--yes, it's coming--with Google Storage

00:11:21.040 --> 00:11:25.220
it has given us a way not only to deliver
to our customers, and they don't notice any

00:11:25.220 --> 00:11:30.120
difference, except that they get better bandwidth.
For us it's a huge deal, it's a massive deal.

00:11:30.120 --> 00:11:37.430
We don't have any complaints at all. Here
we go. What is done beyond that? Is it's given

00:11:37.430 --> 00:11:44.569
us a much better way to receive files. So
the 286 ships that the Navy has at sea, actually

00:11:44.569 --> 00:11:50.810
half of them were at sea today, some of them
were trying to send us files and we have shore

00:11:50.810 --> 00:11:55.180
stations all around the world, they're trying
to send us files. And that has--it has and

00:11:55.180 --> 00:12:00.509
will greatly improve our ability to receive
files so that we can be much, much faster

00:12:00.509 --> 00:12:05.970
in receiving, delivering our content to the
media. So, again, for us it's a huge deal.

00:12:05.970 --> 00:12:18.319
Thank you. Thank you.
&gt;&gt; ERB: Thanks very much. So as Mike said

00:12:18.319 --> 00:12:23.519
in the beginning, I'm David Erb. I'm the engineering
lead for the Google Storage project up in

00:12:23.519 --> 00:12:30.070
Seattle. And I'm really excited finally to
be able to talk about it and to tell you what

00:12:30.070 --> 00:12:42.379
we've been up to. Google Storage was conceived
as a platform for highly available, highly

00:12:42.379 --> 00:12:51.519
secure, high performance data storage and
transfer. When we set about trying to design

00:12:51.519 --> 00:12:56.750
the system, one of the first things we did
was to try to think about--well, you know,

00:12:56.750 --> 00:13:02.209
what should this API look like? What should
the--what should the paradigm be for our storage?

00:13:02.209 --> 00:13:10.410
And we--we adopted the philosophy that said;
we want to work with what customers are finding

00:13:10.410 --> 00:13:16.379
successful today. So we designed Google Storage
to work well with a lot of existing tools

00:13:16.379 --> 00:13:21.639
and libraries. And one of the paradigms we've
picked up, as Mike mentioned, is this idea

00:13:21.639 --> 00:13:28.029
of buckets and objects. So what are buckets?
Buckets are flat containers, they don't contain

00:13:28.029 --> 00:13:34.160
other buckets. They form a global name space.
So if you have a bucket of a given name, no

00:13:34.160 --> 00:13:38.199
body else in the world can have a bucket of
the same name. That can lead to some confusion,

00:13:38.199 --> 00:13:44.740
of course. So one of the things that we introduced
is the idea of that if you control a DNS name,

00:13:44.740 --> 00:13:50.529
you can use that as the basis for a name space
of your own. You have to verify that you control

00:13:50.529 --> 00:13:55.149
the name space but you can then--if you're
in food.com, you can then have buckets that

00:13:55.149 --> 00:14:01.329
are called things like images.food.com and
text.food.com and whatever. And just keep

00:14:01.329 --> 00:14:08.139
creating them to you heart's content. Another
thing that we heard from customers was that

00:14:08.139 --> 00:14:12.870
it's very important, of course, not to lose
their data and to make it available all the

00:14:12.870 --> 00:14:18.209
time. So one of the things that we do in Google
Storage is on every right, we replicate the

00:14:18.209 --> 00:14:27.019
data to multiple locations, multiple geographic
locations, currently only in the U.S. And

00:14:27.019 --> 00:14:30.750
despite the fact that we're doing that, we
provide a strong consistency model and I'll

00:14:30.750 --> 00:14:35.760
talk a little bit more about that later. Another
thing that we thought was really important

00:14:35.760 --> 00:14:40.920
was to make it simple to authenticate requests,
to prove that the requestors who they--they

00:14:40.920 --> 00:14:45.250
are. And we have a couple of ways of doing
that that I'll talk about in a minute. We,

00:14:45.250 --> 00:14:52.910
also thought it was important to have flexible
ways to share content. To say, securely, I

00:14:52.910 --> 00:15:00.410
want so and so to be able to read this but
not the rest of the world. And then, finally,

00:15:00.410 --> 00:15:05.629
in addition to all the--the tools and libraries
that are all ready out there that we thought

00:15:05.629 --> 00:15:09.540
it was important to work with, we thought
it was important to provide some tools that

00:15:09.540 --> 00:15:15.089
help you get started quickly. Mike all ready
showed you the Storage Manager and he'll be

00:15:15.089 --> 00:15:21.410
showing you a command line tool a little bit
later. So Mike all ready mentioned the RESTful

00:15:21.410 --> 00:15:29.740
API, here all the verbs and the API. You can
use the GET verb to list the contents of a

00:15:29.740 --> 00:15:35.430
bucket or to retrieve a natural object, the
PUT verb to create a bucket or to create a

00:15:35.430 --> 00:15:43.079
new object. You can use POST to build forms
that your users can use to securely upload

00:15:43.079 --> 00:15:52.300
content to your Google Storage bucket. HEAD,
DELETE, pretty obvious. When you upload an

00:15:52.300 --> 00:15:55.990
object, you can specify the object type, the
content type and we'll just serve it as that

00:15:55.990 --> 00:16:02.860
type when it's served up. And objects can
be practically any size, hundreds of gigabytes.

00:16:02.860 --> 00:16:07.019
As I'll mention in a minute, there is--during
this preview period that were beginning today,

00:16:07.019 --> 00:16:14.170
there is a 100 Gigabyte per account limit.
So that is effectively a limit on object size

00:16:14.170 --> 00:16:23.769
for the time being. And another thing that
we did as far as the sharing model was we

00:16:23.769 --> 00:16:29.779
wanted to make it possible for you to share
securely, but in a simple way. So we took

00:16:29.779 --> 00:16:34.980
advantage of Google accounts. Many of you
users have or can easily sign up for a Google

00:16:34.980 --> 00:16:39.889
account associated with your email address
and you can share content to a specific email

00:16:39.889 --> 00:16:45.149
account. In the very near future, we'll add
support for sharing to groups. And that's

00:16:45.149 --> 00:16:49.769
important because suppose that you have an
object or collection of objects, let's say

00:16:49.769 --> 00:16:54.980
a large collection of objects, maybe a billion
objects that you shared with some long list

00:16:54.980 --> 00:16:59.939
of people. Well, that list might change, as
people come into your company and--or leave

00:16:59.939 --> 00:17:05.420
or, you know, whatever your business needs
are. That group might change. You don't want

00:17:05.420 --> 00:17:14.780
to have to go update a billion objects. Instead,
you can just go to the groups.google.com and

00:17:14.780 --> 00:17:19.331
manage the membership of your group to manage
access to your objects. I also mentioned that

00:17:19.331 --> 00:17:28.100
we wanted to support flexible ways to authenticate
requests. And so when you share something

00:17:28.100 --> 00:17:32.900
to someone with a Google account, they can
access that content, just be on a normal web

00:17:32.900 --> 00:17:39.790
browser, as long as they're logged in to the
Google account. We also support signing requests.

00:17:39.790 --> 00:17:45.530
When you sign up, you get a key pair. You
get a public key and a secret key. In this

00:17:45.530 --> 00:17:52.540
request, you can see a few of the common elements.
So PUT the verb, then the--the name after

00:17:52.540 --> 00:17:59.440
PUT, specifies a bucket. I creatively named
it mybucket and then the rest of that is the

00:17:59.440 --> 00:18:01.840
object name. The slashes don't matter, it
doesn't matter what characters you put in

00:18:01.840 --> 00:18:13.150
the object name. So my/long/objects/name is
all one object name. And then host, our URL,

00:18:13.150 --> 00:18:16.500
commondatastorage.google.apis.com, bunch of
other, more or less self explanatory fields.

00:18:16.500 --> 00:18:22.650
And then the authorization header, Google1
identifies this as a request that uses this

00:18:22.650 --> 00:18:28.740
syntax native to our service, because we want
to work well with other tools and libraries

00:18:28.740 --> 00:18:33.410
that already exist. That might also say for
example AWS and which case we would interpret

00:18:33.410 --> 00:18:40.620
it not as Amazon credentials but as a request
formatted in the Amazon web service format.

00:18:40.620 --> 00:18:46.030
That's followed by a public key that begins
with Goog and bunch of numbers and then a

00:18:46.030 --> 00:18:54.941
signature that you compute using a secure
hash over the contents of the header. When

00:18:54.941 --> 00:19:01.960
you create an object--I didn't specify any
access control in that previous request, and

00:19:01.960 --> 00:19:06.460
so by default it was private. I can read it,
nobody else can. I could've specified that

00:19:06.460 --> 00:19:11.720
it was public or I could've specified a few
different simple things that you can--you're

00:19:11.720 --> 00:19:16.520
supposed to find the header or I could upload
an access control list later and determine

00:19:16.520 --> 00:19:22.610
who has what access to the object? The access
control model is pretty simple, access control

00:19:22.610 --> 00:19:28.020
list supply to buckets and to objects. In
the context of a bucket, an access control

00:19:28.020 --> 00:19:33.450
list to determine who can list the contents
to the bucket, read information, determines

00:19:33.450 --> 00:19:38.280
who can create new objects in the bucket,
write permission, and then full control means

00:19:38.280 --> 00:19:44.760
people can interact with the bucket ACL as
well. The object to ACL model is even simpler.

00:19:44.760 --> 00:19:51.761
You can either read the object or you can
have full control over its ACL. You'll notice

00:19:51.761 --> 00:19:57.130
there's no right ACL on an object and that's
because the right permissions are associated

00:19:57.130 --> 00:20:03.080
with the bucket. And that does mean that if
you have right access to a bucket, you can

00:20:03.080 --> 00:20:13.720
overwrite or delete objects that are in that
bucket. So I'd like to show you a quick demonstration

00:20:13.720 --> 00:20:19.770
of one of our partners did around our sharing
model.

00:20:19.770 --> 00:20:29.560
&gt;&gt; CHUNG: Hi, I'm Leonard Chung, CEO of Syncplicity.
Syncplicity is a file management solution

00:20:29.560 --> 00:20:33.780
that lets you easily sync, share, access and
back up all of your files across all of your

00:20:33.780 --> 00:20:39.260
computers and Google docs. We'll also provide
a way for IT to essentially control and protect

00:20:39.260 --> 00:20:41.150
files across the company through policies
and recording. We all ready provide first

00:20:41.150 --> 00:20:46.530
class synchronization of any files Google
Apps and Google Docs, with nearly 12,000 customers.

00:20:46.530 --> 00:20:53.950
We think this market is going to find Google
Storage to be a compelling solution. Let me

00:20:53.950 --> 00:20:58.980
show you Syncplicity integrated with Google's
Storage. I'm going to modify a document on

00:20:58.980 --> 00:21:04.230
my desktop as it normally would within my
My Documents folder. I double-click on the

00:21:04.230 --> 00:21:10.580
file and it opens right up in Word, only a
few changes to the document. Now, go ahead

00:21:10.580 --> 00:21:20.660
and hit save, just as I normally would. As
I hit save, in the background, Syncplicity

00:21:20.660 --> 00:21:26.030
has automatically backed-up version synced
and if I so desire share this file in real

00:21:26.030 --> 00:21:30.010
time. If I'm part of a company, it automatically
also complies with my corporate information

00:21:30.010 --> 00:21:33.970
policies including retention and sharing as
set by my company administrator and can be

00:21:33.970 --> 00:21:41.040
set to be pushed to existing infrastructure
like file servers. If I switch over to my

00:21:41.040 --> 00:21:48.917
laptop, you'll be able to see that the file
have automatically been changed and synchronized

00:21:48.917 --> 00:21:52.880
down to this computer. If I'm on my mobile
phone or at any computer, I can access the

00:21:52.880 --> 00:21:57.600
new version immediately through either rich
client or an optimized website. And if I refresh

00:21:57.600 --> 00:22:03.530
the document listing in my Google Docs account,
I'll be able to see it here as well. If the

00:22:03.530 --> 00:22:08.980
change was accidental, I could restore the
original file myself through the Syncplicity

00:22:08.980 --> 00:22:13.960
website instead of calling IT. But I can also
call my IT administrator to do the restore

00:22:13.960 --> 00:22:20.110
remotely. I'm not going to touch on the full
administrative capabilities of Syncplicity.

00:22:20.110 --> 00:22:25.760
What to demonstrate, I'll switch over to my
web browser while I'm logged in as an administrator

00:22:25.760 --> 00:22:31.270
and do remote restore of the previous version.
All of this is possible in real time, because

00:22:31.270 --> 00:22:35.990
of the robust and formant consistency model
in Google Storage. We're excited that Google

00:22:35.990 --> 00:22:40.980
is innovating at their storage layer with
[INDISTINCT] to Google Apps and other Google

00:22:40.980 --> 00:22:45.170
infrastructure. We can leverage this rich
functionality to deliver more capabilities

00:22:45.170 --> 00:22:52.760
and a terrific user experience to our customers.
As you can see, the previous version has immediately

00:22:52.760 --> 00:22:59.270
flowed back down to my desktop. We manage
over 250 million customer files today, spending

00:22:59.270 --> 00:23:03.410
hundreds of terabytes. Our mutual customers
have been asking us for a syncplicity solution

00:23:03.410 --> 00:23:09.870
that included Google Storage. So we're pleased
to be here today.

00:23:09.870 --> 00:23:19.610
&gt;&gt; ERB: One of the things you might have noted
in that brief video was a mention of how some

00:23:19.610 --> 00:23:24.820
things are possible due to the strong consistency
model. Let me talk a little bit more about

00:23:24.820 --> 00:23:36.000
what that model is and what it might mean
to you? When you write an object to a Cloud

00:23:36.000 --> 00:23:41.230
storage system, you want to--you want to make
sure that you'll be able to read it after

00:23:41.230 --> 00:23:47.480
you've written it. It's kind of obvious, it
goes without saying. But one thing in our

00:23:47.480 --> 00:23:51.810
experience with Google that has really been
driven home to me is that you have to be prepared

00:23:51.810 --> 00:23:57.020
for things to fail. Disks fail, computers
fail, racks of machines failed, data centers

00:23:57.020 --> 00:24:01.200
failed, the networks fail, whole regions can
be out of commission and you have to keep

00:24:01.200 --> 00:24:07.600
things working in the face of all these kinds
of failures. So in particular when you write

00:24:07.600 --> 00:24:10.121
something, you may--the write may work and
everything might--might go very well and the

00:24:10.121 --> 00:24:15.710
system that you write to might generate a
success response and that response might never

00:24:15.710 --> 00:24:18.250
get to you. You might have gone off-line,
the network may go down, anything could happen.

00:24:18.250 --> 00:24:28.030
So you
need to understand the behavior of this system

00:24:28.030 --> 00:24:32.800
and the presence of that--of that kind of
behavior. So our model is very simple, if

00:24:32.800 --> 00:24:37.480
you do it right and you see it succeed, all
subsequent reads are going to see the results

00:24:37.480 --> 00:24:41.970
to that write. If you do it write, you can't
tell what happened; if you do a read, and

00:24:41.970 --> 00:24:45.760
you see the results of that write. All subsequent
reads will see the results of that write.

00:24:45.760 --> 00:24:50.080
So what does this mean to you when you're
building your applications? Well, I built

00:24:50.080 --> 00:24:58.200
this very sophisticated web form here, in
my application and I'm using it to serve this

00:24:58.200 --> 00:25:05.040
form to a customer, so they can upload a photo
to my service. So the user clicked submit

00:25:05.040 --> 00:25:15.000
and does he--then it'll be post to Google
Storage or whatever Cloud storage provider.

00:25:15.000 --> 00:25:19.810
In that--the FORM post there's a redirect
that tells the browser where it should go

00:25:19.810 --> 00:25:28.550
after doing the--after getting a success on
the post. And the--so the redirect sends the

00:25:28.550 --> 00:25:34.560
browser back to your web service, to my web
service. Or say, my server that--that's running

00:25:34.560 --> 00:25:40.070
the--the photo App. And that's how I know,
it's how my server knows, my App knows that

00:25:40.070 --> 00:25:44.550
that user has submitted some new content.
So what I'm going to do? Of course I'm going

00:25:44.550 --> 00:25:48.370
to go immediately read the content. I'm going
to index or I'm going to thumbnail or I'm

00:25:48.370 --> 00:25:53.850
going to do something else with it. But I
might have a totally different region. I might

00:25:53.850 --> 00:26:01.730
have a server on the other side of the country.
With a weak consistency model or an eventual

00:26:01.730 --> 00:26:09.820
consistency model, that might not work. You
might get a 404 back. But with the Google

00:26:09.820 --> 00:26:18.960
Storage consistency model, you know that the
success of the previous write means that you

00:26:18.960 --> 00:26:23.170
will be able to read the content. In this
case, delightful family photograph I took

00:26:23.170 --> 00:26:33.670
on a hike near Seattle. Let me talk a little
bit also about Interoperability. It's our

00:26:33.670 --> 00:26:40.300
strong belief at Google that it's important
for you to be able to have a choice. For you

00:26:40.300 --> 00:26:44.620
to be able to choose the Cloud provider that
you want to work with and for you to be able

00:26:44.620 --> 00:26:49.820
to choose the tools that you want to work
with. So this drove a lot of our decisions

00:26:49.820 --> 00:26:55.920
about how to build Google Storage. You should
be able to move your data to choose a Cloud

00:26:55.920 --> 00:27:00.340
provider or even multiple providers if that
make sense for you. And you should be able

00:27:00.340 --> 00:27:09.170
to use a consistent toolset with those providers.
So with that, I'm going to turn things back

00:27:09.170 --> 00:27:15.570
over to my colleague, Mike, who will show
you some examples of how Interoperability

00:27:15.570 --> 00:27:20.990
works.
&gt;&gt; SCHWARTZ: Okay, so what you see here is

00:27:20.990 --> 00:27:25.590
a diagram of some of the tools I want to talk
about here. As I've mentioned earlier, there's

00:27:25.590 --> 00:27:30.270
quite a few tools, open source tools and libraries
available, I'm talking about just a few of

00:27:30.270 --> 00:27:37.110
them here today. Earlier, I gave a demonstration
using GS Manager, a web-based tool for interacting

00:27:37.110 --> 00:27:42.720
with Google Storage. Today, I'm going to--right
now, I'm going to show you an example of using

00:27:42.720 --> 00:27:47.410
command line tool that were open-sourcing
and releasing with the product today called

00:27:47.410 --> 00:27:53.880
GSUtil. And GSUtil is implemented on top of
the popular boto open-source library which

00:27:53.880 --> 00:27:58.550
is a Python library built for interacting
with Cloud storage services that was implemented

00:27:58.550 --> 00:28:04.520
by Mitch Garnaat. And I'm also going to talk
about the App Engine SDK and show you how

00:28:04.520 --> 00:28:10.560
easy it is to build an application that uses
App Engine to top to Google Storage and serve

00:28:10.560 --> 00:28:19.310
it off of the Google App Engine infrastructure.
So here I've got a simple show command line

00:28:19.310 --> 00:28:25.900
prompt and GSUtil was fashioned after simple
Unix command for listing and copying data

00:28:25.900 --> 00:28:32.180
around. And so, for example, if you just say
GSUtil LS, this shows you all the bucket set

00:28:32.180 --> 00:28:38.260
I--this logged in user has, log in I should
say, this user whose credentials are known

00:28:38.260 --> 00:28:47.400
by the GSUtil tool. So in this case, I just
have the one bucket and you'll see that the

00:28:47.400 --> 00:28:53.690
command line tool produces listings with the
URI-like syntax and so here it's saying this

00:28:53.690 --> 00:29:02.070
is GS provider with the bucket GS2010. And
you actually can name providers, buckets,

00:29:02.070 --> 00:29:08.740
and objects this way. So, for example, I could
use the same command and I could list this

00:29:08.740 --> 00:29:14.460
command "gsutil ls gs://" is equivalent to
the little shorthand I just did. I could also

00:29:14.460 --> 00:29:21.850
use it to list--this user happens to have
buckets at Amazon S3 service and I can even

00:29:21.850 --> 00:29:31.730
do it--I can even list both. So, on the single
line I can list all the buckets that I have

00:29:31.730 --> 00:29:36.910
in both of these services. The next thing
I want to show you is how to put your upload,

00:29:36.910 --> 00:29:40.330
your data to the cloud using this command
line tools. So I'm going to just use a local

00:29:40.330 --> 00:29:46.930
Unix "ls-l" command. You can see I have in
this directory a couple of files and a directory.

00:29:46.930 --> 00:29:52.290
And so I want to upload all this data to the
cloud and I can do that simply by saying "gsutil

00:29:52.290 --> 00:29:59.390
cp *" and I'm going to copy it up to this
bucket that I already show you I have and

00:29:59.390 --> 00:30:02.860
that's--it's as easy as that. It's going to
copy all the files and all the files within

00:30:02.860 --> 00:30:07.740
on the bucket and all the directories up to
the cloud. And I can see that the files had

00:30:07.740 --> 00:30:18.680
been copied there now by doing an LS on the
bucket. Okay, so those are the files. I can

00:30:18.680 --> 00:30:23.040
also use an "ls-l" command. This case is going
to show me some information about the bucket.

00:30:23.040 --> 00:30:31.640
It's--what it is, is a listing of the ACL
on the bucket and this long string is a canonical

00:30:31.640 --> 00:30:37.361
ID that's for this users--saying that this
is the--the one user. So this is a private

00:30:37.361 --> 00:30:42.630
bucket that one user has full control and
no one else has read access besides that user.

00:30:42.630 --> 00:30:48.540
And if I--if I want to see everything that's
in the bucket itself, I can use a wildcard;

00:30:48.540 --> 00:30:52.281
so, here, this is going to give me information
about all the different objects in the bucket,

00:30:52.281 --> 00:30:56.710
the things I just uploaded. And you can see
the upload times and you can see the mime

00:30:56.710 --> 00:31:01.080
types and also the ACLs. And again the ACLs
show that all of the objects I uploaded are

00:31:01.080 --> 00:31:07.170
initially private in full control just to
meet the user that has is here, so. And one

00:31:07.170 --> 00:31:11.580
other thing that's kind of handy to do either
if you're interested in knowing more to see

00:31:11.580 --> 00:31:16.280
the underlying HTTP protocol that's being
used there--the rest of the protocol or sometimes

00:31:16.280 --> 00:31:20.121
for debugging purpose, if you want to see
what's going on. If you add the "-d" option

00:31:20.121 --> 00:31:27.470
and I'm just going to look at the short thing
because it's going to generate a lot of output.

00:31:27.470 --> 00:31:34.540
I'm going to use "gsutil -d ls" on the bucket
and that actually will show you the HTTP headers

00:31:34.540 --> 00:31:38.610
that the request, there is the GET request
and the headers that are being sent including

00:31:38.610 --> 00:31:45.420
the authentication header and there's a response,
so that's kind of handy to do. So one of the

00:31:45.420 --> 00:31:53.040
things I one to point out is this URI syntax
with the combination, the URI syntax and wildcarding

00:31:53.040 --> 00:31:59.710
is actually not just convenient but also was
very practical--in a very practical sense

00:31:59.710 --> 00:32:05.190
represents the comment we've been making several
times now, both David and I have made about

00:32:05.190 --> 00:32:10.000
giving users the control to get their data
out anytime. So, in particular, say I have

00:32:10.000 --> 00:32:13.270
a bunch of files and up inside the bucket
and I want to get the data out for whatever

00:32:13.270 --> 00:32:21.180
reason it's as easy as saying "gsutil cp"
to the local directory and there I've done

00:32:21.180 --> 00:32:25.070
it. I've just copied all my data back out
of the Cloud. And if I want, I could even

00:32:25.070 --> 00:32:40.480
copy it all over to another provider. So it's
as easy as that.

00:32:40.480 --> 00:32:45.680
Thank you. Okay, so now I've talked to you
about the command line tool and that tool

00:32:45.680 --> 00:32:49.160
is useful for, if you're someone like me,
I actually like using command line tools better

00:32:49.160 --> 00:32:53.230
than GUIs, but--it's, you know, a matter of
personal preference. It also can be useful

00:32:53.230 --> 00:32:58.520
for scripting, so for example, if you have
a big site and you wanted to have a production

00:32:58.520 --> 00:33:02.130
site and you have a bunch of contact you want
to make live, you could write a script that

00:33:02.130 --> 00:33:07.450
would run GSUtil and copied it into a production
bucket and set up, make live bit, how ever

00:33:07.450 --> 00:33:12.210
that works in your application. Next thing
I want to show you is about the library, one

00:33:12.210 --> 00:33:16.930
level down from there, if you remember it's
the extended version of boto and what we did

00:33:16.930 --> 00:33:22.860
was we extended it with a new class hierarchy
and I want to show you right now what that

00:33:22.860 --> 00:33:29.330
is. So right here I have a very short script
called "demo.py" and for the three-line script.

00:33:29.330 --> 00:33:35.340
And you can see first thing it does is it
imports a Storage URI method out of boto and

00:33:35.340 --> 00:33:41.980
that's a little convenience method for instantiating
the Storage URI class. And that class hierarchy

00:33:41.980 --> 00:33:46.740
is kind of the main thing that we've added
in addition to support from multiple credentials

00:33:46.740 --> 00:33:52.200
in the boto config file. And what these little
script will do is instantiate a URI with a

00:33:52.200 --> 00:33:58.830
given name, this happens to be a publicly
readable URI. Anyone of you could go run this

00:33:58.830 --> 00:34:03.520
script and it will work because you have access
to this particular "shakespeare/rose.txt"

00:34:03.520 --> 00:34:08.840
file. And then it just gets the contents out
of the string. Now, this is going to work

00:34:08.840 --> 00:34:12.800
fine because it's a little short file, obviously,
if it was a terabyte file you probably won't

00:34:12.800 --> 00:34:19.940
want to do this. But now I'll just going to
go ahead and run it form the Python interpreter,

00:34:19.940 --> 00:34:24.410
and there it's just connected the Cloud, retrieve
this little short text file and printed it

00:34:24.410 --> 00:34:29.300
out for you. So it's pretty easy to use and
there's lots of other interfaces of the URIs.

00:34:29.300 --> 00:34:33.700
You can do things like iterate over buckets
and get back all of the objects in that bucket.

00:34:33.700 --> 00:34:36.850
You can manipulate ACLs, there's a lot more
that I'm not showing you here. I just want

00:34:36.850 --> 00:34:43.659
to give you an example of how easy it is to
use as a basic function just to use this library.

00:34:43.659 --> 00:34:48.429
The other comment I want to make is that script
as it stands, you can basically drop inside

00:34:48.429 --> 00:34:52.500
of an App Engine App to make it work. And
so I want to show you that. If we look back

00:34:52.500 --> 00:34:59.120
at the slide show now here is a--essentially
complete App Engine App and you can see highlighted

00:34:59.120 --> 00:35:04.980
in here are basically the lines I just had
and that script I ran for you. And it's basically

00:35:04.980 --> 00:35:08.640
complete. I've left out some imports and I've
left out some exception handling that you'd

00:35:08.640 --> 00:35:13.080
probably want to implement if you're implementing
a real application. But for the purposes of

00:35:13.080 --> 00:35:18.880
this it's basically complete and all this
does is when a user request the webpage it

00:35:18.880 --> 00:35:24.020
connects and retrieves that object from the
Cloud from Google storage paints it in as

00:35:24.020 --> 00:35:31.010
a free formatted HTML page and renders it
to the user. And now I'm going show you--I've

00:35:31.010 --> 00:35:37.280
actually uploaded this application. If you
noticed I'd given an App ID for those of you

00:35:37.280 --> 00:35:45.750
who use Google App Engine. The App ID is "cloudreader-demo"
so I've uploaded it. This is running on actual

00:35:45.750 --> 00:35:52.960
Google production servers is that--is that
App Engine App--oops, what just happened here?

00:35:52.960 --> 00:36:01.090
Something didn't work. Oh, well that's how
you know it's real and it's not a fake demo.

00:36:01.090 --> 00:36:17.150
Okay, so that's it. Thank you.
&gt;&gt; ERB: So as I mentioned earlier we're beginning

00:36:17.150 --> 00:36:22.560
a preview period now. And during the preview
period you're use of the Google storage is

00:36:22.560 --> 00:36:31.500
free. We are publishing some pricing information
about the pricing that we'll have after the

00:36:31.500 --> 00:36:36.750
preview period. It's pretty simple model,
you pay for the data that you store, aggregated

00:36:36.750 --> 00:36:44.080
month by month and you pay for each request
that you make, you pay for transfer bandwidth,

00:36:44.080 --> 00:36:48.100
and these terms are--this price sheet is also
available on the websites. So it's--it will

00:36:48.100 --> 00:36:55.530
be easy for you to refer to them. During the
period we're not offering any particular SLA,

00:36:55.530 --> 00:37:03.790
we are taking the availability and reliability
to the service very seriously. But it's--but

00:37:03.790 --> 00:37:13.450
we're not offering an SLA. We will be offering
an SLA in the near future. We'll also be offering

00:37:13.450 --> 00:37:19.710
some additional support options beyond the
normal online forms, discussion groups and

00:37:19.710 --> 00:37:26.730
so on. We'll be making Google Storage available
to premium Apps customers. Today, if you need

00:37:26.730 --> 00:37:35.510
to use twin Google Apps account not on a premium
Apps Google account to sign up for Google

00:37:35.510 --> 00:37:41.711
storage, we'll be dealing with that very soon.
I mentioned earlier that we're going to be

00:37:41.711 --> 00:37:46.850
allowing you to specify sharing to groups
that's not in the service today but it will

00:37:46.850 --> 00:37:52.330
be very soon. We're also working on resumable
uploads. You know, I uploaded an object just

00:37:52.330 --> 00:37:56.930
the other day that was 98 gigabytes and I
want to leave myself a little bit of headroom

00:37:56.930 --> 00:38:06.180
in my 100 gigabyte quota. But, you know, if
something--I said earlier things fail all

00:38:06.180 --> 00:38:10.050
the time that's something--if the connection
had been dropped for some reason partly through

00:38:10.050 --> 00:38:17.240
that upload that would have been very inconvenient
you have to start over, and if it's a much

00:38:17.240 --> 00:38:19.460
bigger object even more inconvenient. So we're
going to make it possible to resume uploads.

00:38:19.460 --> 00:38:24.970
And as I mentioned earlier we're deploying
our storage systems in multiple geographic

00:38:24.970 --> 00:38:30.520
locations but all in the United States currently.
We'll be announcing additional regions in

00:38:30.520 --> 00:38:35.980
the not to distant future. So how can you
get started with Google Storage? Well, you

00:38:35.980 --> 00:38:43.380
can request an invitation. I will say we published
this and we got a lot more interest than we

00:38:43.380 --> 00:38:50.190
expected. So our invitations servers had been
absolutely slammed. So my apologies if you

00:38:50.190 --> 00:38:53.360
have trouble getting an invitation right away
but we're working on that, we're working to

00:38:53.360 --> 00:39:05.260
fix that very quickly. That system is not
based on Google Storage. And be sure when

00:39:05.260 --> 00:39:10.920
you fill in your request for an invitation
that you write--that you attended the I/O

00:39:10.920 --> 00:39:15.340
session in the additional information section.
We're getting a large number of requests and

00:39:15.340 --> 00:39:20.640
we want to make sure that you, people who
came to the session, are priority people for

00:39:20.640 --> 00:39:28.460
getting your invitations. And then we'll send
an invitation in your email. And on the "bit.ly"

00:39:28.460 --> 00:39:38.100
link there, by the way, that's "dbO" not zero
"B1f." So with that I think we're ready to

00:39:38.100 --> 00:39:46.960
go to questions. I'm going to ask you, Mike,
to flip your machine over to the web links

00:39:46.960 --> 00:39:48.260
for questions.
&gt;&gt; SCHWARTZ: Ah, okay.

00:39:48.260 --> 00:39:53.200
&gt;&gt; ERB: So if you are going to ask your questions
here please come up and use one of the microphones.

00:39:53.200 --> 00:39:59.400
So we can capture it for posterity. Okay.
&gt;&gt; What about CDN usage like Echo Myers stuff

00:39:59.400 --> 00:40:03.390
like that?
&gt;&gt; ERB: We're not announcing any specific--any

00:40:03.390 --> 00:40:13.670
particular CDN product. Google has a very--it
has a global presence with its network and

00:40:13.670 --> 00:40:19.430
it has a--we take advantage of a wide range
of excellent Google technologies to deliver

00:40:19.430 --> 00:40:28.990
high performance. Go ahead.
&gt;&gt; Hi. Thanks for the talk. I have a double

00:40:28.990 --> 00:40:33.270
question actually. I saw you were using MD5
as the hash of the files, it's very easy actually

00:40:33.270 --> 00:40:37.360
to generate collisions for MD5. So do you
actually use something else? Do you provide

00:40:37.360 --> 00:40:42.670
any other hash function for retrieving your
fingerprints on the files?

00:40:42.670 --> 00:40:48.140
&gt;&gt; ERB: No, we don't and the reason for that
is partly an interoperability issue. But I

00:40:48.140 --> 00:40:54.330
was concerned about that too and looked into
that back when we started working on the project.

00:40:54.330 --> 00:40:57.690
And what we're really using the MD5 hash for,
in this case, is not any kind of security

00:40:57.690 --> 00:41:03.750
or authentication, it's really just kind of
a check some to make sure that an upload succeeded

00:41:03.750 --> 00:41:12.020
or for you to make a request and say "If I--if
the version of the object that's in storage

00:41:12.020 --> 00:41:15.110
is different from the one that I know about,
the one that I scrolled on MD5 hash away for

00:41:15.110 --> 00:41:25.180
then I want to do something." So we don't
see any vulnerabilities that comes out of

00:41:25.180 --> 00:41:27.910
the fact that collisions are in fact possible
in MD5.

00:41:27.910 --> 00:41:32.260
&gt;&gt; Okay then, the second part of my question
is besides the rest full APIs that you presented

00:41:32.260 --> 00:41:38.060
to you have an API that, for example to take
a hash of input and return the buckets and

00:41:38.060 --> 00:41:42.210
the objects that actually have that content?
&gt;&gt; ERB: No we don't.

00:41:42.210 --> 00:41:47.110
&gt;&gt; Is it something you're planning on doing?
&gt;&gt; ERB: We're interested in hearing what anybody

00:41:47.110 --> 00:41:52.070
thinks would be valuable to do and so we'd
love to hear your suggestions. And, in fact,

00:41:52.070 --> 00:41:55.740
on our website, there is a place where you
can go make suggestions. So we encourage everybody

00:41:55.740 --> 00:42:04.170
who has ideas for features and functions they'd
like to see in the service to let us know

00:42:04.170 --> 00:42:05.170
about them. We'll be paying good attention
to that.

00:42:05.170 --> 00:42:09.610
&gt;&gt; SCHWARTZ: And also just to add to that.
We have a Sandbox, we'd love to have people

00:42:09.610 --> 00:42:16.160
come talk to us one-on-one, talk about ideas
like that; it's over on the Google code, on

00:42:16.160 --> 00:42:17.160
the flip.
&gt;&gt; Okay. Thanks.

00:42:17.160 --> 00:42:21.290
&gt;&gt; ERB: So I think we should probably take
one of the online questions. So the first

00:42:21.290 --> 00:42:28.170
question "What advantages does Google storage
have over Amazons S3? Well, I'm not really

00:42:28.170 --> 00:42:34.820
in much of a position to comment on Amazons
products and services. We hope that you will

00:42:34.820 --> 00:42:37.980
take a good look at the different Cloud storage
providers that are available to you and make

00:42:37.980 --> 00:42:46.410
a determination about what makes sense for
you to use. Let's see--oh, it's right here,

00:42:46.410 --> 00:42:54.290
isn't it? It'll be easier. Will controls over
location of data be provided for Google storage?

00:42:54.290 --> 00:42:58.171
Distribution is great for speed but there
are legislative issues internationally. When

00:42:58.171 --> 00:43:03.401
I mentioned earlier that we will be announcing
additional regions, yes, we will give you

00:43:03.401 --> 00:43:06.089
control over use of those regions. So why
don't we take one here?

00:43:06.089 --> 00:43:10.430
&gt;&gt; Can you comment on the comparison of this
in the Blob store functionality?

00:43:10.430 --> 00:43:19.130
&gt;&gt; ERB: Oh, sure. Yes, the App Engine's Blob
store API is optimized for use in App Engine

00:43:19.130 --> 00:43:27.960
and the references are designed to be stored
in the App Engine data store and when you

00:43:27.960 --> 00:43:31.580
pull a reference out of the App Engine data
store you can immediately use that to--the

00:43:31.580 --> 00:43:36.360
App Engine can immediately use that to de-reference
the Blob. It's kind of a different service,

00:43:36.360 --> 00:43:42.350
you know, they offer objects up to two gigabytes
which is ample for many, many applications.

00:43:42.350 --> 00:43:52.040
We offer, you know, this service offers much
larger, much larger objects as a possibility.

00:43:52.040 --> 00:43:56.590
So, you know, they're similar in that they're
both Blob stored services but there are a

00:43:56.590 --> 00:43:59.450
lot of differences in--we think in kind of
those scenarios that they fit in to.

00:43:59.450 --> 00:44:08.960
&gt;&gt; Is there support or have you thought about
support for, sort of like Medikey's such 4.4,

00:44:08.960 --> 00:44:14.510
4.3 or that nil key so that you could potentially
just run static sites directly off of GS?

00:44:14.510 --> 00:44:21.480
&gt;&gt; ERB: That's an interesting question. We
haven't really thought abut that and that

00:44:21.480 --> 00:44:29.099
definitely falls into the category of things
we'd love to talk to you about. Go ahead.

00:44:29.099 --> 00:44:35.770
&gt;&gt; I have two thoughts. First is, do we have
versioned objects? So can I version an object?

00:44:35.770 --> 00:44:39.039
&gt;&gt; ERB: No. We' don't currently have versioned
objects.

00:44:39.039 --> 00:44:41.930
&gt;&gt; And second, I appreciate the Constantine
model but it clearly influences latency. Can

00:44:41.930 --> 00:44:56.010
you bit go in--explain a bit how it works?
&gt;&gt; ERB: Sure. The--I won't go any great details

00:44:56.010 --> 00:45:03.850
because this kind of gets into some things
that we worked very hard on for a very long

00:45:03.850 --> 00:45:12.720
time. But the--I think if you experiment with
Google storage, you'll find that you get really

00:45:12.720 --> 00:45:21.462
good latency on read and write operations.
I encourage you to go try it out and find

00:45:21.462 --> 00:45:28.260
out for yourself. Go ahead.
&gt;&gt; Do you need to pay for bandwidth from App

00:45:28.260 --> 00:45:34.430
Engine to Google storage?
&gt;&gt; ERB: Let's see. That's an interesting question.

00:45:34.430 --> 00:45:36.250
I'm actually going to hand that over to our
product manager. So I'd like to invite Jessie

00:45:36.250 --> 00:45:38.400
to come on up and join us on the stage because
I don't know the answer. Do we have a...?

00:45:38.400 --> 00:45:54.650
Oh, yes. We have a microphone. It should be
on.

00:45:54.650 --> 00:46:03.650
&gt;&gt; FRIEDMAN: Okay. Actually the answer is
really simple because we're actually still

00:46:03.650 --> 00:46:09.750
evaluating what's the best way to do it. We
will collect data during the preview period

00:46:09.750 --> 00:46:10.750
and figure out what's the best way forward.
&gt;&gt; ERB: Thanks, Jessie. So let's see, we have

00:46:10.750 --> 00:46:11.750
another question online here. Google Content
it is very useful in App Engine App but my

00:46:11.750 --> 00:46:20.550
App blobs you know, as user log in using Google
account for Twitter and Facebook, is there

00:46:20.550 --> 00:46:33.780
any guide about how to implement it on App
Engine? I'm not sure I'm actually completely

00:46:33.780 --> 00:46:39.060
following this question but I think the--I
think what Mike demonstrated earlier about

00:46:39.060 --> 00:46:45.150
using Google storage from App Engine might
be a good guideline for getting started. Go

00:46:45.150 --> 00:46:49.540
ahead.
&gt;&gt; When I make a request, does it support

00:46:49.540 --> 00:46:54.590
progressive download or screening? Can I stream
from the services?

00:46:54.590 --> 00:46:59.230
&gt;&gt; ERB: Can you stream from the--well, we
don't really have explicit support for, you

00:46:59.230 --> 00:47:07.600
know, rate controlled streaming. We do have
range get operations, we can get partial objects

00:47:07.600 --> 00:47:15.430
and I've played with that a bit and I've had--I
have in fact, you know, uploaded media files

00:47:15.430 --> 00:47:23.109
and played them out on a [INDISTINCT]. So
if you're interested in support for streaming

00:47:23.109 --> 00:47:27.280
operations, I'd like to hear more about what
your needs are.

00:47:27.280 --> 00:47:30.900
&gt;&gt; All right.
&gt;&gt; Could you comment on recursion from the

00:47:30.900 --> 00:47:37.960
GS Util tool for sub-directories and stuff?
&gt;&gt; SCHWARTZ; Sorry I can't here the question.

00:47:37.960 --> 00:47:39.720
&gt;&gt; ERB: Recursing. Recursing on any of those
sub-directories.

00:47:39.720 --> 00:47:43.099
&gt;&gt; Recursive copies on sub-directories with
the GS Util tool, is that possible?

00:47:43.099 --> 00:47:50.490
&gt;&gt; SCHWARTZ: Yes. So, basically, decided to
make the interface simpler than normal Unix.

00:47:50.490 --> 00:47:54.850
Command line tools you actually explicitly
say "-r" and we felt--a pretty common case

00:47:54.850 --> 00:48:00.730
if you name a directory is you just want that
directory. So you--if you want to copy an

00:48:00.730 --> 00:48:04.619
entire directory, you just name the directory
or you can use wildcards within the directory

00:48:04.619 --> 00:48:10.010
and similarly on the bucket site.
&gt;&gt; Would that were the same? Because the buckets

00:48:10.010 --> 00:48:12.000
are flat structured?
&gt;&gt; SCHWARTZ: Oh, so there are cases, that's

00:48:12.000 --> 00:48:18.210
a good question, there are cases where the
object names that are inside of buckets will

00:48:18.210 --> 00:48:22.600
not be compatible with a file name. So let
me give you an example, suppose you have a

00:48:22.600 --> 00:48:29.090
bucket with--supposed you have a bucket that
had an object called "X" and another object

00:48:29.090 --> 00:48:35.330
called "x/y." If you just did a copy of all
of the objects in the bucket into the local

00:48:35.330 --> 00:48:39.770
file system, it would first create that object
"x" as a file and then it would go to try

00:48:39.770 --> 00:48:45.990
to create the object "x/y" and it would fail
because there is a directory--there's a file

00:48:45.990 --> 00:48:50.330
where a directory needs to go, namely "x."
And the tool actually catches some cases like

00:48:50.330 --> 00:48:54.619
that. It tries to do something to prevent
errors or detect things like that and warn

00:48:54.619 --> 00:48:58.630
you about it. But that's just the consequence
of the fact that the hierarchical and flat

00:48:58.630 --> 00:49:02.010
name spaces are sort of not always compatible.
&gt;&gt; Thank you.

00:49:02.010 --> 00:49:11.110
&gt;&gt; ERB: I want to cover a few of the questions
online all at once. So you can see we have

00:49:11.110 --> 00:49:17.440
questions about do we plan to offer encryption?
Is there a timeline for replication? Are we

00:49:17.440 --> 00:49:25.330
thinking about creating any open storage specs?
And we're not really going to talk about specifics

00:49:25.330 --> 00:49:29.580
for features that I didn't already mention
and we don't have a timeline that we're prepared

00:49:29.580 --> 00:49:34.600
to announce for the things that we did talk
about. Go ahead.

00:49:34.600 --> 00:49:36.570
&gt;&gt; So there is a storage like service today
in Google? I think I paid for it and I have

00:49:36.570 --> 00:49:37.850
like a DGB assigned. Is this going to somehow
integrate with all of the Google docs and

00:49:37.850 --> 00:49:43.109
mail and all of those things and can I actually
pull files from docs using this sapient, put

00:49:43.109 --> 00:49:54.420
files for docs using this sapient?
&gt;&gt; ERB: I'm not a present--there are really

00:49:54.420 --> 00:50:00.550
separate services in it. The docs list API
is really designed for one set of used cases

00:50:00.550 --> 00:50:06.280
and Google storage is kind of designed for
a different set of used cases. But we're very

00:50:06.280 --> 00:50:13.930
interested in hearing about interest in that
kind of connections. It's certainly not infeasible

00:50:13.930 --> 00:50:19.660
but it's not something that we've done yet.
&gt;&gt; Are there any rate limits on uploading

00:50:19.660 --> 00:50:32.440
and downloading?
&gt;&gt; ERB: Let's see. No, there aren't any rate

00:50:32.440 --> 00:50:40.880
limits on uploading and downloading that we've
imposed, I mean, there are certainly limits

00:50:40.880 --> 00:50:42.050
that--that the infrastructure between your
machine and my machine will impose on us.

00:50:42.050 --> 00:50:43.050
But that's about it.
&gt;&gt; Just a question about authentication. So

00:50:43.050 --> 00:50:46.670
having beaten my head up AllSub and AllAuthor,
are we now getting another third option to

00:50:46.670 --> 00:50:52.210
play with? Whether we like it or not?
&gt;&gt; ERB: For--it serves the question are we

00:50:52.210 --> 00:50:55.960
going to be adding a lot of support?
&gt;&gt; Yes, basically.

00:50:55.960 --> 00:50:58.000
&gt;&gt; ERB: Well, it some--again that something
that we're interested in hearing about the

00:50:58.000 --> 00:51:05.600
level of interest that people have. So...
&gt;&gt; And then as a follow on to that, if it

00:51:05.600 --> 00:51:11.410
was a server to server based platform, so
clients are uploading things in the web, how

00:51:11.410 --> 00:51:14.140
productive then we want them to put it into
this back end [INDISTINCT] replication earlier

00:51:14.140 --> 00:51:16.700
or the good stuff. Would best practice be
to register a specific Google account and

00:51:16.700 --> 00:51:21.849
basically just run on that basis though it's
only for that server environment?

00:51:21.849 --> 00:51:23.950
&gt;&gt; ERB: I think that sounds like a very good
way to do it, yes, that's probably what I

00:51:23.950 --> 00:51:30.470
would do in that situation.
&gt;&gt; What about support or the plans support

00:51:30.470 --> 00:51:35.920
for custom metadata on buckets or objects?
&gt;&gt; ERB: Oh yes, there is support for a limited

00:51:35.920 --> 00:51:40.470
amount of custom metadata. This--again this
is kind of--if you're familiar with other

00:51:40.470 --> 00:51:46.450
rest full APIs, it's a similar kind of thing
were you can supply HTP headers that say "x-goog-meta-"

00:51:46.450 --> 00:51:54.430
your tag and then the value and you can store
a couple of kilobytes of metadata with an

00:51:54.430 --> 00:52:08.350
object there. I think we're about out of time.
But thank you very much for your attention.

