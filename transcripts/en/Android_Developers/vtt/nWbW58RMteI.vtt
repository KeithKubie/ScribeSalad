WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.269
[MUSIC PLAYING]

00:00:03.269 --> 00:00:05.870
ARTUR TSURKAN: So the
theme for this talk really

00:00:05.870 --> 00:00:08.210
is thinking about,
how can Android

00:00:08.210 --> 00:00:13.010
empower you, the developer, to
enable your app to help users

00:00:13.010 --> 00:00:14.150
get things done?

00:00:14.150 --> 00:00:15.980
And on the team, we
really think a lot

00:00:15.980 --> 00:00:18.420
about how to give
your app superpowers

00:00:18.420 --> 00:00:21.002
so you can help users
throughout the operating system,

00:00:21.002 --> 00:00:23.210
even when users aren't
necessarily in the full screen

00:00:23.210 --> 00:00:26.370
experience of your app.

00:00:26.370 --> 00:00:29.392
For this talk, we'll
focus on three major areas

00:00:29.392 --> 00:00:31.100
that you can take
advantage of in Android

00:00:31.100 --> 00:00:34.320
Q. The first is with sharing.

00:00:34.320 --> 00:00:36.750
Next, we'll talk a little
bit about notifications.

00:00:36.750 --> 00:00:39.630
And finally, we'll discuss new
details around multitasking.

00:00:42.670 --> 00:00:46.290
So in Android Q, we're excited
to have launched our redesigned

00:00:46.290 --> 00:00:47.340
Share Sheet experience.

00:00:47.340 --> 00:00:48.840
And there's a number
of improvements

00:00:48.840 --> 00:00:52.600
that we've made for
improving users' experience.

00:00:52.600 --> 00:00:55.740
So the first is around
much improved performance

00:00:55.740 --> 00:00:57.460
through a new API
that we've introduced,

00:00:57.460 --> 00:00:59.830
that we're going to talk
about in a little more detail.

00:00:59.830 --> 00:01:02.010
We've also actually
updated the user experience

00:01:02.010 --> 00:01:04.349
to make it simpler for users
to figure out where they

00:01:04.349 --> 00:01:05.868
can share their content to you.

00:01:05.868 --> 00:01:07.410
So the Share Sheet
is now going to be

00:01:07.410 --> 00:01:09.520
organized into three sections.

00:01:09.520 --> 00:01:12.120
The first is going to clarify,
what is the content that users

00:01:12.120 --> 00:01:12.990
can share to?

00:01:12.990 --> 00:01:14.580
And we'll provide a
default experience

00:01:14.580 --> 00:01:16.622
of what that looks like,
but you, as a developer,

00:01:16.622 --> 00:01:18.300
can also provide
additional metadata

00:01:18.300 --> 00:01:20.700
to provide a richer preview.

00:01:20.700 --> 00:01:23.910
Next up, are our direct
sharing shortcuts

00:01:23.910 --> 00:01:25.530
where you can share within apps.

00:01:25.530 --> 00:01:27.540
And then, finally,
are the app targets,

00:01:27.540 --> 00:01:29.400
which have been split
into two sections--

00:01:29.400 --> 00:01:32.800
some which are suggested
by the operating system,

00:01:32.800 --> 00:01:34.727
and then finally the
full alphabetical list.

00:01:34.727 --> 00:01:36.810
And you'll see that it's
a very familiar interface

00:01:36.810 --> 00:01:38.550
to our launcher.

00:01:38.550 --> 00:01:41.820
We've also included a lot of new
developer customization options

00:01:41.820 --> 00:01:44.610
because we understand
that a lot of developers

00:01:44.610 --> 00:01:47.220
need to tailor their Share
Sheet for various use cases,

00:01:47.220 --> 00:01:49.470
and we want to enable and
empower developers to do so.

00:01:52.167 --> 00:01:54.250
So one area that I want
to highlight in particular

00:01:54.250 --> 00:01:56.380
is the Sharing Shortcuts API.

00:01:56.380 --> 00:01:58.540
And really, the goal of
the Sharing Shortcuts API

00:01:58.540 --> 00:02:02.080
is to allow users to share
more directly within your apps.

00:02:02.080 --> 00:02:05.680
These sit above the app targets
that users can share to,

00:02:05.680 --> 00:02:08.289
and they can include
targets like a close friend

00:02:08.289 --> 00:02:10.630
that you are in contact
frequently with,

00:02:10.630 --> 00:02:12.850
or an important work folder.

00:02:12.850 --> 00:02:14.320
Because of the
performance benefit

00:02:14.320 --> 00:02:15.820
that they provide
users, we're going

00:02:15.820 --> 00:02:19.240
to actually rank these ahead
of the old chooser targets.

00:02:19.240 --> 00:02:21.717
And so we encourage
your adoption

00:02:21.717 --> 00:02:23.800
so users can take advantage
of these in their API.

00:02:26.510 --> 00:02:28.712
Switching gears now
into notifications.

00:02:28.712 --> 00:02:30.920
One thing that we looked at
the start of this release

00:02:30.920 --> 00:02:34.310
is we found that 75% of
our users get at least one

00:02:34.310 --> 00:02:37.280
buzzing notification or
noise-making notification

00:02:37.280 --> 00:02:43.830
every hour, and 15% of users get
these every 10 waking minutes.

00:02:43.830 --> 00:02:46.820
So we thought, how can we help
users manage this overload?

00:02:46.820 --> 00:02:49.460
And so we're introducing the
concept of Gentle Notifications

00:02:49.460 --> 00:02:52.790
in Q. And really, the goal
of Gentle Notifications

00:02:52.790 --> 00:02:55.550
is to help organize those
important and valuable

00:02:55.550 --> 00:02:57.920
notifications that
users want to consume

00:02:57.920 --> 00:03:00.320
but that aren't time
sensitive and that they

00:03:00.320 --> 00:03:04.020
can consume on whatever
their own schedule is.

00:03:04.020 --> 00:03:06.080
And so the story
is, for developers,

00:03:06.080 --> 00:03:08.960
that you still set the
priority as you normally would.

00:03:08.960 --> 00:03:10.940
Users can still
adjust that priority,

00:03:10.940 --> 00:03:13.550
but now the system will also
help adjust that priority

00:03:13.550 --> 00:03:15.360
on behalf of users.

00:03:15.360 --> 00:03:17.750
And this will mainly
target notifications

00:03:17.750 --> 00:03:20.420
that are set with
the default priority.

00:03:20.420 --> 00:03:24.620
In AOSP and in Q, the system
will use a heuristic model,

00:03:24.620 --> 00:03:26.270
but we also will
be incorporating

00:03:26.270 --> 00:03:29.330
on-device machine learning to
make this a better experience.

00:03:32.520 --> 00:03:35.370
Having organized
notifications, the next step

00:03:35.370 --> 00:03:38.062
is to make them even richer
and more useful to users.

00:03:38.062 --> 00:03:40.020
And so the way that we're
tackling this problem

00:03:40.020 --> 00:03:42.360
is by enhancing
these notifications

00:03:42.360 --> 00:03:44.070
with suggested actions.

00:03:44.070 --> 00:03:46.720
There are two use cases that
we're targeting for this.

00:03:46.720 --> 00:03:49.710
The first is by suggesting
responses for users

00:03:49.710 --> 00:03:52.770
to reply to with messages,
as well as providing access

00:03:52.770 --> 00:03:54.960
to actions that are
related to the content

00:03:54.960 --> 00:03:56.220
of the notification.

00:03:56.220 --> 00:03:58.680
So now, messaging
notifications on Android

00:03:58.680 --> 00:04:01.923
will contain actions to
navigate to an address

00:04:01.923 --> 00:04:04.590
that maybe your friend mentioned
for a restaurant to meet up at,

00:04:04.590 --> 00:04:06.930
or to open a URL that your
friend wants to check out.

00:04:10.490 --> 00:04:12.880
Finally, we're really
excited to be announcing

00:04:12.880 --> 00:04:17.300
the Bubbles API, which is a new
multitasking feature for users.

00:04:17.300 --> 00:04:20.860
This allows users to keep track
of their most important tasks

00:04:20.860 --> 00:04:23.320
and be able to access
them at any time

00:04:23.320 --> 00:04:25.910
anywhere in the
operating system.

00:04:25.910 --> 00:04:29.000
How this will work is users
will have a floating icon.

00:04:29.000 --> 00:04:32.880
They can drag it anywhere
that is useful to them,

00:04:32.880 --> 00:04:35.510
and then they can tap to expand
it to get the full custom

00:04:35.510 --> 00:04:38.070
app UI.

00:04:38.070 --> 00:04:41.940
We're prioritizing
communication tasks

00:04:41.940 --> 00:04:43.860
as those that can bubble
from a notification

00:04:43.860 --> 00:04:46.277
because these are often the
most important tasks to a user

00:04:46.277 --> 00:04:48.120
on their phone,
while also users will

00:04:48.120 --> 00:04:50.430
be able to pin the task
from within your full screen

00:04:50.430 --> 00:04:51.650
app for other use cases.

00:04:55.223 --> 00:04:56.890
And I think it's
really useful to review

00:04:56.890 --> 00:05:00.340
how this sits alongside our
other multitasking features,

00:05:00.340 --> 00:05:03.060
namely picture-in-picture.

00:05:03.060 --> 00:05:05.013
The big difference
between these features

00:05:05.013 --> 00:05:06.680
is that, really, what
picture-in-picture

00:05:06.680 --> 00:05:09.950
is meant to do is provide users
with a path to visually monitor

00:05:09.950 --> 00:05:11.720
an important task.

00:05:11.720 --> 00:05:14.870
And it's meant to be a low
interaction feature, something

00:05:14.870 --> 00:05:18.260
that you keep alongside you so
that you can watch while you're

00:05:18.260 --> 00:05:19.970
performing some primary task.

00:05:19.970 --> 00:05:24.140
So you can watch a video
going on or some directions

00:05:24.140 --> 00:05:25.820
that you're following.

00:05:25.820 --> 00:05:28.190
With Bubbles, the
goal is to help

00:05:28.190 --> 00:05:30.960
users get to another task
as quickly as possible.

00:05:30.960 --> 00:05:33.500
And they are often
high-interactive UIs.

00:05:33.500 --> 00:05:35.732
So that's where a
friend has messaged you

00:05:35.732 --> 00:05:37.440
and you want to get
back to them quickly,

00:05:37.440 --> 00:05:39.320
and you really want to do
so with the full fidelity

00:05:39.320 --> 00:05:41.060
of the messaging app
that you're using.

00:05:41.060 --> 00:05:42.560
So you'll expand
the Bubble inline

00:05:42.560 --> 00:05:45.050
without losing your
current context, and then

00:05:45.050 --> 00:05:46.640
message to your
friend and go back

00:05:46.640 --> 00:05:48.600
to what you were
previously doing.

00:05:48.600 --> 00:05:50.600
We hope that this suite
of multitasking features

00:05:50.600 --> 00:05:52.482
unlocks a number
of new capabilities

00:05:52.482 --> 00:05:54.440
that your apps can take
advantage of and create

00:05:54.440 --> 00:05:57.982
great new user experiences.

00:05:57.982 --> 00:05:59.690
So now, I'm going to
hand it over to Mike

00:05:59.690 --> 00:06:02.107
to talk a little bit more about
how you can take advantage

00:06:02.107 --> 00:06:03.454
of sharing features.

00:06:03.454 --> 00:06:07.350
[APPLAUSE]

00:06:10.759 --> 00:06:13.780
MIKE DIGMAN: So we've made
some big changes to the way

00:06:13.780 --> 00:06:16.600
that Share Sheet works
in Android Q. Let's hit

00:06:16.600 --> 00:06:18.300
the details that
matter most to you.

00:06:21.530 --> 00:06:23.960
We know folks like
sharing straight

00:06:23.960 --> 00:06:26.390
to the person they want
to over the app they

00:06:26.390 --> 00:06:27.890
want with a single tap.

00:06:27.890 --> 00:06:29.680
Who doesn't?

00:06:29.680 --> 00:06:32.410
We're shooting to make this
experience even better.

00:06:32.410 --> 00:06:36.730
So now, we'll show up to
eight deep linked targets,

00:06:36.730 --> 00:06:39.730
but we know that
loading ChooserTargets

00:06:39.730 --> 00:06:42.550
from every installed
ChooserTargetService

00:06:42.550 --> 00:06:45.980
on a user's phone
can be a little slow.

00:06:45.980 --> 00:06:49.480
So to make loading deep
link targets faster,

00:06:49.480 --> 00:06:51.950
we need a new architecture.

00:06:51.950 --> 00:06:57.130
So in Q, we're extending the
Shortcuts API to do just that.

00:06:57.130 --> 00:06:59.650
Publish a dynamic
shortcut, and Android

00:06:59.650 --> 00:07:02.380
will load and rank much
faster than we could

00:07:02.380 --> 00:07:04.060
with direct share.

00:07:04.060 --> 00:07:07.030
Previously, we would only
consider two ChooserTargets

00:07:07.030 --> 00:07:10.060
per ChooserTargetService,
and now we'll

00:07:10.060 --> 00:07:13.270
consider all of the
Sharing Shortcuts

00:07:13.270 --> 00:07:16.060
that you provide instead
of just those two.

00:07:16.060 --> 00:07:19.540
As an added bonus, because
you're publishing shortcuts,

00:07:19.540 --> 00:07:22.390
those published targets may
also appear if you long-press

00:07:22.390 --> 00:07:25.040
your app in Launcher.

00:07:25.040 --> 00:07:28.640
To give users the best sharing
experience we can offer,

00:07:28.640 --> 00:07:32.210
Sharing Shortcuts will
supersede ChooserTargetService.

00:07:32.210 --> 00:07:34.340
We've made it so that
Sharing Shortcuts will

00:07:34.340 --> 00:07:36.920
be ranked above all
targets provided

00:07:36.920 --> 00:07:40.320
by any ChooserTargetService
on a user's phone.

00:07:40.320 --> 00:07:44.160
So if you want your targets
to be seen on Q plus devices,

00:07:44.160 --> 00:07:46.160
please update your app.

00:07:46.160 --> 00:07:49.130
And we've made that relatively
easy through AndroidX.

00:07:49.130 --> 00:07:50.930
Implement Sharing
Shortcuts with AndroidX,

00:07:50.930 --> 00:07:53.540
and you can get a backcompat
ChooserTargetService

00:07:53.540 --> 00:07:55.920
for older devices with a
tiny amount of extra effort.

00:07:59.680 --> 00:08:02.320
The new API to do this is
pretty straightforward.

00:08:02.320 --> 00:08:03.940
Make and publish a
dynamic shortcut,

00:08:03.940 --> 00:08:05.830
like you would normally,
with the addition

00:08:05.830 --> 00:08:10.270
of the required Category field
and the highly encouraged

00:08:10.270 --> 00:08:11.740
Person field.

00:08:11.740 --> 00:08:13.600
Adding a well-formatted
Person object

00:08:13.600 --> 00:08:15.550
to this and relevant
notifications,

00:08:15.550 --> 00:08:18.200
your app pushes can help
improve your ranking.

00:08:18.200 --> 00:08:20.860
So for your own
sake, please do so.

00:08:20.860 --> 00:08:23.170
Sharing Shortcuts
must be associated

00:08:23.170 --> 00:08:26.710
with an activity that has a
category matching your shortcut

00:08:26.710 --> 00:08:27.820
category.

00:08:27.820 --> 00:08:32.317
And that activity must have
an ACTION_SEND intent filter,

00:08:32.317 --> 00:08:34.900
which you'd have already if this
activity appears in the Share

00:08:34.900 --> 00:08:36.340
Sheet.

00:08:36.340 --> 00:08:38.409
If you want AndroidX to
automatically generate

00:08:38.409 --> 00:08:40.750
a backcompat
ChooserTargetService for you,

00:08:40.750 --> 00:08:43.570
you'll need to include extra
metadata under that activity

00:08:43.570 --> 00:08:44.710
in the manifest.

00:08:44.710 --> 00:08:46.840
Documentation on how to
do this is available now.

00:08:50.810 --> 00:08:53.670
Sometimes, when you
hit the Share button,

00:08:53.670 --> 00:08:56.720
it's not exactly clear
what you're sharing.

00:08:56.720 --> 00:08:58.470
We know this is a problem.

00:08:58.470 --> 00:09:00.800
And so to help with
that, we've added

00:09:00.800 --> 00:09:05.000
a system-generated preview for
several different mime types.

00:09:05.000 --> 00:09:08.800
It's now way easier
to copy text.

00:09:08.800 --> 00:09:12.220
In some cases, though,
even seeing the exact text

00:09:12.220 --> 00:09:15.920
of the thing you're about to
share is hard to understand.

00:09:15.920 --> 00:09:20.560
Think a long, complicated
URL or a really messy URI.

00:09:20.560 --> 00:09:23.650
In these cases, a rich
preview can provide your users

00:09:23.650 --> 00:09:27.240
real reassurance of what
they're about to send.

00:09:27.240 --> 00:09:29.440
So for text previews
specifically,

00:09:29.440 --> 00:09:31.420
you can add a thumbnail
and description

00:09:31.420 --> 00:09:34.120
to provide your
users that context.

00:09:34.120 --> 00:09:36.407
Pull this off with clip
data and extra title.

00:09:36.407 --> 00:09:37.240
Let me show you how.

00:09:40.650 --> 00:09:43.350
Make a sharing intent,
as you would normally.

00:09:43.350 --> 00:09:46.440
Then add rich preview
metadata to your share intent

00:09:46.440 --> 00:09:49.740
before calling createChooser.

00:09:49.740 --> 00:09:52.050
Stuff the description
and extra title,

00:09:52.050 --> 00:09:54.190
and add the thumbnail
to clip data.

00:09:54.190 --> 00:09:58.260
As a gotcha, make sure to
give us the right permissions

00:09:58.260 --> 00:10:01.770
to read your thumbnail image,
otherwise it won't appear.

00:10:01.770 --> 00:10:03.810
See the addFlags
method in this example.

00:10:08.820 --> 00:10:10.940
We've heard from
developers that you really

00:10:10.940 --> 00:10:13.610
want a way to provide
hooks back to your app

00:10:13.610 --> 00:10:15.710
from within the Share Sheet.

00:10:15.710 --> 00:10:19.040
You can now provide a limited
number of ChooserTarget objects

00:10:19.040 --> 00:10:22.130
that will be shown ahead
of sharing shortcuts

00:10:22.130 --> 00:10:25.160
and any ChooserTargets loaded
from ChooserTargetServices

00:10:25.160 --> 00:10:27.770
on the phone, as
shown in this image.

00:10:27.770 --> 00:10:30.770
You can also provide a limited
number of intents that point

00:10:30.770 --> 00:10:35.203
to activities that will be shown
ahead of any app suggestions.

00:10:35.203 --> 00:10:36.620
You can pull this
off as you might

00:10:36.620 --> 00:10:40.850
expect with extra ChooserTargets
and extra initial intents.

00:10:40.850 --> 00:10:42.980
It's really important
to call out here

00:10:42.980 --> 00:10:48.290
that users like and use
deep link targets and app

00:10:48.290 --> 00:10:49.700
suggestions.

00:10:49.700 --> 00:10:51.860
For every intent
and ChooserTarget

00:10:51.860 --> 00:10:55.100
you include, it reduces
the number of suggestions

00:10:55.100 --> 00:10:57.750
available to your users.

00:10:57.750 --> 00:10:59.490
So please use this
feature with care.

00:11:03.420 --> 00:11:05.370
Through user studies,
we've learned

00:11:05.370 --> 00:11:09.690
that folks almost always think
of the person and the app

00:11:09.690 --> 00:11:13.710
they want to share to before
they ever hit the Share button.

00:11:13.710 --> 00:11:17.070
To make it easier for users
to find that app that they're

00:11:17.070 --> 00:11:22.230
looking for, we've alphabetized
app share targets by app name.

00:11:22.230 --> 00:11:25.140
And important for you,
we've changed the way

00:11:25.140 --> 00:11:27.380
that targets look.

00:11:27.380 --> 00:11:29.390
We will show your
application icon,

00:11:29.390 --> 00:11:33.320
as defined in the manifest, and
ignore any provided activity

00:11:33.320 --> 00:11:35.270
or intent filter icon.

00:11:35.270 --> 00:11:38.000
For app targets, we will
show the application label

00:11:38.000 --> 00:11:39.170
very prominently.

00:11:39.170 --> 00:11:41.420
It's what we alphabetize by.

00:11:41.420 --> 00:11:43.580
And any activity
or intent filter

00:11:43.580 --> 00:11:48.060
label less so, as you
can see in the example.

00:11:48.060 --> 00:11:51.540
This is all to help users
quickly find your app.

00:11:51.540 --> 00:11:54.000
So please update
your application icon

00:11:54.000 --> 00:11:57.510
and label so users understand
what they're sharing to.

00:11:57.510 --> 00:11:59.490
Often, the application
label alone

00:11:59.490 --> 00:12:02.500
is enough context for users.

00:12:02.500 --> 00:12:06.150
Finally, we wrap and shape
app icons, just like Launcher.

00:12:06.150 --> 00:12:09.510
So please use adaptive
icons, if you aren't already,

00:12:09.510 --> 00:12:12.045
to make your app
icon look great.

00:12:12.045 --> 00:12:13.920
There's a ton of other
things Share Sheet can

00:12:13.920 --> 00:12:15.660
do for you on Android
Q. And you can

00:12:15.660 --> 00:12:18.530
find more info and developer
documentation coming soon.

00:12:21.680 --> 00:12:25.002
Now over to Toki for
notification actions.

00:12:25.002 --> 00:12:27.858
[APPLAUSE]

00:12:32.575 --> 00:12:33.450
ABODUNRINWA TOKI: OK.

00:12:33.450 --> 00:12:35.070
So in Android Q,
the system can now

00:12:35.070 --> 00:12:39.390
generate suggested actions
for your notification.

00:12:39.390 --> 00:12:42.470
This happens for
messaging notifications.

00:12:42.470 --> 00:12:46.830
The types of suggestions
that the system now generates

00:12:46.830 --> 00:12:50.870
include text replies or
deep links into apps.

00:12:50.870 --> 00:12:55.430
So if you have a message in
notification, for example,

00:12:55.430 --> 00:13:00.020
we would automatically just
generate suggestions for this.

00:13:00.020 --> 00:13:02.260
We think this will help
improve how users engage

00:13:02.260 --> 00:13:04.270
with your app's notifications.

00:13:04.270 --> 00:13:08.290
So for example, if a friend of
mine texts me through your app

00:13:08.290 --> 00:13:12.130
and says, hey, let's
meet at this address,

00:13:12.130 --> 00:13:16.710
then the system can generate
suggestions, such as yeah,

00:13:16.710 --> 00:13:20.670
sure, or no, I can't make
it, or give me a deep link

00:13:20.670 --> 00:13:25.880
to Maps to see the address
or navigate to that address.

00:13:25.880 --> 00:13:27.800
The way this works
is the system takes

00:13:27.800 --> 00:13:29.920
the content of the
notification, runs it

00:13:29.920 --> 00:13:31.670
through machine learning
models, and tries

00:13:31.670 --> 00:13:34.970
to understand the content
of that notification

00:13:34.970 --> 00:13:37.620
and what the user might
like to do with this.

00:13:37.620 --> 00:13:39.680
And then it will pop
those actions inside

00:13:39.680 --> 00:13:43.170
of your notification.

00:13:43.170 --> 00:13:46.188
Let's have a look
at how you could--

00:13:46.188 --> 00:13:48.870
oh, sorry.

00:13:48.870 --> 00:13:51.970
There's one other feature
that you can enable with this.

00:13:51.970 --> 00:13:55.170
It's called Tap to Edit.

00:13:55.170 --> 00:13:58.380
Whenever the system generates
a text reply and a user

00:13:58.380 --> 00:14:02.100
clicks the reply,
what you could do

00:14:02.100 --> 00:14:05.900
is you can enable the fact that
the system will allow the user

00:14:05.900 --> 00:14:09.510
to edit the notification
before sending it.

00:14:09.510 --> 00:14:12.620
So for example, if I was
responding to my friend

00:14:12.620 --> 00:14:14.300
and I clicked I would
love to, I could

00:14:14.300 --> 00:14:17.030
continue to edit the response
before sending it and say,

00:14:17.030 --> 00:14:19.276
how about I bring my
dog, or something?

00:14:22.333 --> 00:14:24.000
Let's look at how you
can make your apps

00:14:24.000 --> 00:14:26.790
play nice with this new feature.

00:14:26.790 --> 00:14:29.882
I'll show you how you can
enable and disable this feature,

00:14:29.882 --> 00:14:32.340
and then I'll show you how you
can generate your own custom

00:14:32.340 --> 00:14:35.120
suggestions, and
then I'll show you

00:14:35.120 --> 00:14:36.650
how you could
combine your custom

00:14:36.650 --> 00:14:40.512
suggestions with
system-generated suggestions.

00:14:40.512 --> 00:14:41.470
Let's look at the code.

00:14:44.250 --> 00:14:44.750
All right.

00:14:44.750 --> 00:14:46.375
The first thing you
want to think about

00:14:46.375 --> 00:14:49.880
is to remember that this
applies automatically

00:14:49.880 --> 00:14:52.230
to message notifications.

00:14:52.230 --> 00:14:55.160
So if your notification
is of type,

00:14:55.160 --> 00:14:57.770
CATEGORY_MESSAGE, then
the system automatically

00:14:57.770 --> 00:15:00.460
generates suggestions.

00:15:00.460 --> 00:15:02.380
You can also make this
happen for other types

00:15:02.380 --> 00:15:05.980
of notifications, if you think
this is applicable to them.

00:15:05.980 --> 00:15:07.540
The way to turn the
feature on or off

00:15:07.540 --> 00:15:10.960
is, if you wanted to
turn on deep links,

00:15:10.960 --> 00:15:12.460
the method you're
really looking for

00:15:12.460 --> 00:15:15.760
is setAllowSystemGe
neratedContextualActions.

00:15:15.760 --> 00:15:17.810
You set it to True
to enable deep links,

00:15:17.810 --> 00:15:20.950
and you set it to False
if you don't want this.

00:15:20.950 --> 00:15:25.740
By default, the
system turns this on.

00:15:25.740 --> 00:15:28.080
Now, for text replies, the
method you're looking for

00:15:28.080 --> 00:15:29.820
is setAllowGeneratedReplies.

00:15:29.820 --> 00:15:32.607
This was an API that we
introduced in Android P.

00:15:32.607 --> 00:15:34.065
You set it to True,
then the system

00:15:34.065 --> 00:15:36.770
will automatically generate
text replies for your app.

00:15:36.770 --> 00:15:40.740
And you set it to
False, it won't do that.

00:15:40.740 --> 00:15:43.360
And then, for Tap to Edit,
the method you're looking for

00:15:43.360 --> 00:15:46.260
is setEditChoicesBeforeSending.

00:15:46.260 --> 00:15:48.120
You want to set this to Auto.

00:15:48.120 --> 00:15:50.790
When you do this, your app will
behave like every other app

00:15:50.790 --> 00:15:52.302
on the device.

00:15:52.302 --> 00:15:54.510
However, if you really want
to give the user a chance

00:15:54.510 --> 00:15:56.218
to edit the response
before they send it,

00:15:56.218 --> 00:15:58.950
then you want to
set this to, Yes.

00:15:58.950 --> 00:16:01.830
If you want a one-click
action, then you

00:16:01.830 --> 00:16:02.830
want to set this to, No.

00:16:07.830 --> 00:16:10.430
Next slide.

00:16:10.430 --> 00:16:11.330
Cool.

00:16:11.330 --> 00:16:14.060
So as I said, you could
generate your own custom replies

00:16:14.060 --> 00:16:16.900
and pop them into notifications.

00:16:16.900 --> 00:16:20.020
The way the system
really does this is it

00:16:20.020 --> 00:16:22.420
runs the content
of the notification

00:16:22.420 --> 00:16:23.810
through machine learning models.

00:16:23.810 --> 00:16:25.268
So you could train
your own models.

00:16:25.268 --> 00:16:28.240
But if you need help to do
this, you could use ML Kit.

00:16:28.240 --> 00:16:32.350
ML Kit now features this
new API, called Smart Reply.

00:16:32.350 --> 00:16:35.200
What you do is you take the
text of your conversation,

00:16:35.200 --> 00:16:37.660
you pass it to Smart
Reply to suggest,

00:16:37.660 --> 00:16:41.200
and then it will
return a response

00:16:41.200 --> 00:16:43.522
to your callback
with the suggestions.

00:16:43.522 --> 00:16:44.980
You can then take
those suggestions

00:16:44.980 --> 00:16:46.397
and set them on
your notifications

00:16:46.397 --> 00:16:48.880
remote input by calling
setChoices on it.

00:16:54.210 --> 00:16:56.880
Whenever you set your own
custom suggestions, what happens

00:16:56.880 --> 00:17:02.350
is the system will not generate
suggestions for you anymore.

00:17:02.350 --> 00:17:05.900
The reason we do this is so
that the system-generated

00:17:05.900 --> 00:17:09.030
suggestions don't conflict
with your custom ones.

00:17:09.030 --> 00:17:12.550
But if you really want to
combine these suggestions,

00:17:12.550 --> 00:17:13.897
you could do this.

00:17:13.897 --> 00:17:15.730
And the trick to doing
this is to understand

00:17:15.730 --> 00:17:18.410
how the system really
generates the suggestions.

00:17:18.410 --> 00:17:23.160
System uses a system service
called a TextClassifier.

00:17:23.160 --> 00:17:25.859
TextClassifier now features
this method, called

00:17:25.859 --> 00:17:28.329
suggestConversationActions.

00:17:28.329 --> 00:17:31.960
And what you do is you take the
content of the notification,

00:17:31.960 --> 00:17:34.170
and you pass it
through this API.

00:17:34.170 --> 00:17:37.170
The API then returns
the suggestions for you.

00:17:37.170 --> 00:17:41.260
This suggestion includes text
suggestions and deep links

00:17:41.260 --> 00:17:42.690
into apps.

00:17:42.690 --> 00:17:46.510
I already showed you how
you could set text replies

00:17:46.510 --> 00:17:48.475
to your notifications.

00:17:48.475 --> 00:17:51.920
But if you wanted to do it for
actions, here's how to do it.

00:17:51.920 --> 00:17:54.700
You take the icon, the
title, and the intent

00:17:54.700 --> 00:17:58.160
from the action that was
returned by the TextClassifier,

00:17:58.160 --> 00:18:00.700
and you use that to build
your own notification.

00:18:00.700 --> 00:18:02.920
You also want to
call setContextual,

00:18:02.920 --> 00:18:04.840
and you set that to True.

00:18:04.840 --> 00:18:08.860
This will enable the system
to render your deep links

00:18:08.860 --> 00:18:14.480
the same way the system renders
this in notification actions.

00:18:14.480 --> 00:18:17.840
And that's really the
summary of all the things

00:18:17.840 --> 00:18:19.310
that you really
need to know about

00:18:19.310 --> 00:18:22.820
to get your app to play
nice with this new feature

00:18:22.820 --> 00:18:27.190
that we have in
Android Q. Next up

00:18:27.190 --> 00:18:28.810
is Mady to talk about Bubbles.

00:18:28.810 --> 00:18:29.310
Thank you.

00:18:29.310 --> 00:18:32.136
[APPLAUSE]

00:18:36.375 --> 00:18:38.290
MADY MELLOR Hey, everyone.

00:18:38.290 --> 00:18:42.220
So Bubbles is our new
notification-based multitasking

00:18:42.220 --> 00:18:45.340
feature in Android.

00:18:45.340 --> 00:18:46.990
But before I talk
about Bubbles, I

00:18:46.990 --> 00:18:49.672
want to talk a little bit
about System Alert Window.

00:18:49.672 --> 00:18:53.110
So System Alert Window has
existed in Android for a while.

00:18:53.110 --> 00:18:56.470
And lots of apps have done
really cool things with it,

00:18:56.470 --> 00:18:59.350
even though that wasn't really
the intention of this API

00:18:59.350 --> 00:19:02.200
to begin with.

00:19:02.200 --> 00:19:07.730
Also, unfortunately, apps have
done some less cool things.

00:19:07.730 --> 00:19:09.520
So it's a bit of a
security problem.

00:19:09.520 --> 00:19:13.300
And it was never meant to be a
heavily used user-facing API,

00:19:13.300 --> 00:19:16.300
so it also has performance
implications for the system.

00:19:16.300 --> 00:19:18.280
And Android as a
whole is taking steps

00:19:18.280 --> 00:19:23.290
to limit apps' abilities
to use this API.

00:19:23.290 --> 00:19:27.790
So OK, this is where
Bubbles comes in.

00:19:27.790 --> 00:19:31.450
Bubbles is going to be offered
as a platform alternative

00:19:31.450 --> 00:19:32.800
to System Alert Window.

00:19:32.800 --> 00:19:35.680
So similar to how PIP handles
a lot of the media viewing

00:19:35.680 --> 00:19:39.850
use cases, Bubbles is here to
handle the more interactive use

00:19:39.850 --> 00:19:41.530
cases.

00:19:41.530 --> 00:19:44.200
In Q, Bubbles will be
a developer preview.

00:19:44.200 --> 00:19:46.360
You can find it in
developer options,

00:19:46.360 --> 00:19:48.580
and you can start
playing with the API

00:19:48.580 --> 00:19:52.660
and getting your
apps built with it.

00:19:52.660 --> 00:19:55.320
So try Bubbles,
give us feedback,

00:19:55.320 --> 00:20:00.790
and it will become the preferred
path over System Alert Window.

00:20:00.790 --> 00:20:03.753
In the beta builds, you'll see
it turned on automatically,

00:20:03.753 --> 00:20:05.545
but it will be moving
to developer options.

00:20:08.730 --> 00:20:09.300
OK.

00:20:09.300 --> 00:20:11.610
So the anatomy of a bubble--

00:20:11.610 --> 00:20:14.620
you have a collapsed state
and an expanded state.

00:20:14.620 --> 00:20:16.860
The collapsed state
has the ability

00:20:16.860 --> 00:20:19.440
to post an update out of it.

00:20:19.440 --> 00:20:23.010
It's represented as a shape
with a little fly-out.

00:20:23.010 --> 00:20:27.750
And then expanded state
shows activity content.

00:20:27.750 --> 00:20:29.130
This supports multiple bubbles.

00:20:29.130 --> 00:20:33.640
If you've got more, they
would show up in a little row.

00:20:33.640 --> 00:20:34.350
OK.

00:20:34.350 --> 00:20:35.907
How do you build a bubble?

00:20:35.907 --> 00:20:38.490
If you've ever sent an Android
notification, or if you've ever

00:20:38.490 --> 00:20:40.870
built an activity, you
can build a Bubble.

00:20:40.870 --> 00:20:43.270
It's very straightforward.

00:20:43.270 --> 00:20:45.480
First, you're
configuring an activity

00:20:45.480 --> 00:20:47.310
to display in a
Bubble, then you're

00:20:47.310 --> 00:20:49.860
building a bubble
metadata object,

00:20:49.860 --> 00:20:51.630
attaching that to
a notification,

00:20:51.630 --> 00:20:55.340
and sending the notification.

00:20:55.340 --> 00:20:58.720
So let's look at some code.

00:20:58.720 --> 00:21:00.750
Here, we have our
activity definition

00:21:00.750 --> 00:21:02.700
in the Android manifest.

00:21:02.700 --> 00:21:04.460
There are three things
you need to have

00:21:04.460 --> 00:21:06.820
set on your activity
for it to bubble.

00:21:06.820 --> 00:21:08.640
It needs to be
embeddable, it needs

00:21:08.640 --> 00:21:10.320
to be document
launch mode always,

00:21:10.320 --> 00:21:12.060
and it needs to be re-sizable.

00:21:12.060 --> 00:21:15.210
If your activity fails
any of these checks,

00:21:15.210 --> 00:21:17.910
your notification won't bubble.

00:21:17.910 --> 00:21:20.100
It'll just show as a
normal notification.

00:21:23.200 --> 00:21:25.600
To construct bubble
metadata, this

00:21:25.600 --> 00:21:28.660
is a new API on notifications.

00:21:28.660 --> 00:21:31.750
You get the pending intent
for that bubble activity,

00:21:31.750 --> 00:21:33.460
and then--

00:21:33.460 --> 00:21:34.600
this is very basic.

00:21:34.600 --> 00:21:36.910
All you need is an
icon and an intent.

00:21:36.910 --> 00:21:38.620
The API has a couple
of other flags

00:21:38.620 --> 00:21:41.680
that you can look at in the
developer documentation.

00:21:41.680 --> 00:21:44.868
But at minimum, you need
the icon and the activity.

00:21:48.290 --> 00:21:51.810
Then you attach this metadata
object to your notification.

00:21:51.810 --> 00:21:54.280
So you build a notification
as you normally would,

00:21:54.280 --> 00:21:57.520
and then you just do that
one call, set BubbleMetadata,

00:21:57.520 --> 00:22:00.670
on it, and then use
Notification Manager to send

00:22:00.670 --> 00:22:03.410
the notification.

00:22:03.410 --> 00:22:06.970
Now, I might have mentioned that
not everything gets to bubble.

00:22:06.970 --> 00:22:13.090
So bubbles are meant for
highly interactive use cases.

00:22:13.090 --> 00:22:15.310
They can be convenient,
but they might be annoying

00:22:15.310 --> 00:22:17.770
if the user doesn't
find them handy.

00:22:17.770 --> 00:22:18.910
They show up on screen.

00:22:18.910 --> 00:22:21.160
They take up screen real estate.

00:22:21.160 --> 00:22:23.020
They want your attention.

00:22:23.020 --> 00:22:26.230
So right now, we're focusing
on messaging, calling,

00:22:26.230 --> 00:22:29.260
and user-initiated use cases.

00:22:29.260 --> 00:22:33.320
If your notification doesn't
fulfill these requirements,

00:22:33.320 --> 00:22:34.570
it won't display as a bubble.

00:22:34.570 --> 00:22:38.410
It'll just show as a
normal notification would.

00:22:38.410 --> 00:22:41.350
So the nitty-gritty of this.

00:22:41.350 --> 00:22:45.088
If you are messaging, you'll
want to use MessageStyle,

00:22:45.088 --> 00:22:47.380
and you'll want to have an
inline reply action attached

00:22:47.380 --> 00:22:48.790
to the notification.

00:22:48.790 --> 00:22:51.760
If you're a phone call, you'll
want to be CATEGORY_CALL.

00:22:51.760 --> 00:22:55.390
You'll want to have a person
and foreground service.

00:22:55.390 --> 00:22:58.040
And then the user
initiated use case,

00:22:58.040 --> 00:23:01.280
we're kind of covering when
your app is in the foreground.

00:23:01.280 --> 00:23:05.110
So when your app is
in front of the user,

00:23:05.110 --> 00:23:07.480
you can send any kind of
notification as a bubble,

00:23:07.480 --> 00:23:09.220
and that'll appear.

00:23:09.220 --> 00:23:11.380
Once the app goes out
of the foreground,

00:23:11.380 --> 00:23:13.120
that bubble will
remain on screen,

00:23:13.120 --> 00:23:15.520
and you can continue
to send updates to it.

00:23:20.310 --> 00:23:20.810
OK.

00:23:20.810 --> 00:23:25.530
So just to confirm, did that
thing I sent, did it bubble?

00:23:25.530 --> 00:23:27.890
You can query
Notification Manager.

00:23:27.890 --> 00:23:31.400
Whenever something
is bubbled or when

00:23:31.400 --> 00:23:33.470
it's an active
notification, it will appear

00:23:33.470 --> 00:23:36.140
in getActiveNotifications.

00:23:36.140 --> 00:23:38.090
Then you just can
check the flags of it.

00:23:38.090 --> 00:23:40.820
This code gives a little
bit of a sense of it.

00:23:40.820 --> 00:23:43.790
Find the notification that
was supposed to bubble,

00:23:43.790 --> 00:23:47.102
check if the flag for
FLAG_BUBBLE is enabled,

00:23:47.102 --> 00:23:47.810
then you'll know.

00:23:50.410 --> 00:23:50.910
OK.

00:23:50.910 --> 00:23:53.310
So that's all we've got.

00:23:53.310 --> 00:23:56.760
Thank you, for coming
to listen about sharing

00:23:56.760 --> 00:23:59.310
improvements, notification
improvements, and bubbles,

00:23:59.310 --> 00:24:02.370
and multitasking.

00:24:02.370 --> 00:24:04.350
We'll be heading over
to the Android Sandbox,

00:24:04.350 --> 00:24:06.720
if you've got questions for us.

00:24:06.720 --> 00:24:08.500
So please come find us.

00:24:08.500 --> 00:24:10.290
And thanks for listening today.

00:24:10.290 --> 00:24:10.890
[APPLAUSE]

00:24:10.890 --> 00:24:14.240
[MUSIC PLAYING]

