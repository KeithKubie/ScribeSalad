WEBVTT
Kind: captions
Language: en

00:00:00.435 --> 00:00:02.610
[MUSIC PLAYING]

00:00:02.610 --> 00:00:04.670
Hi, I'm Laura, from Google.

00:00:04.670 --> 00:00:07.050
Did you know that you can use
the Google Cloud Platform to

00:00:07.050 --> 00:00:09.560
build your own mobile backend on
Google's infrastructure in

00:00:09.560 --> 00:00:10.980
five minutes?

00:00:10.980 --> 00:00:12.580
Let me show you how.

00:00:12.580 --> 00:00:14.710
In this tutorial, we'll be
building an app that allows a

00:00:14.710 --> 00:00:17.600
user to shop smart by getting
information on products she's

00:00:17.600 --> 00:00:19.580
looking for at the store
she's in, as well

00:00:19.580 --> 00:00:21.590
as find stores nearby.

00:00:21.590 --> 00:00:24.180
We'll be using some custom code
to wire a basic Android

00:00:24.180 --> 00:00:27.390
app front end with an App Engine
Cloud backend using

00:00:27.390 --> 00:00:30.250
Google Cloud Endpoints, so the
phone can determine customer

00:00:30.250 --> 00:00:33.320
location, and the app can locate
nearby stores and allow

00:00:33.320 --> 00:00:36.420
the customer to get relevant
offers and recommendations.

00:00:36.420 --> 00:00:38.210
Let's get started.

00:00:38.210 --> 00:00:40.630
I've already installed and
configured my IDE with all the

00:00:40.630 --> 00:00:42.430
right tools and SDKs.

00:00:42.430 --> 00:00:45.240
First, we're going to create
the project for the Android

00:00:45.240 --> 00:00:47.970
client application, and start
building the app.

00:00:47.970 --> 00:00:50.890
We'll create an entity class to
define the data structure,

00:00:50.890 --> 00:00:53.100
generate Cloud Endpoint classes
to give us the backend

00:00:53.100 --> 00:00:56.490
infrastructure and APIs, and
then generate a related client

00:00:56.490 --> 00:00:58.545
library to make calling
the server APIs from

00:00:58.545 --> 00:01:00.600
our mobile app easy.

00:01:00.600 --> 00:01:03.230
In our Eclipse project, let's
create a new class and

00:01:03.230 --> 00:01:04.830
name it check in.

00:01:04.830 --> 00:01:06.810
These classes allow for
communication between the

00:01:06.810 --> 00:01:08.972
client and the backend.

00:01:08.972 --> 00:01:13.040
Click to generate the Cloud
Endpoint class.

00:01:13.040 --> 00:01:15.810
You can see now that the check
in endpoint.java file is

00:01:15.810 --> 00:01:17.990
generated in our Apps backend.

00:01:17.990 --> 00:01:20.560
To generate the related client
library, let's open the

00:01:20.560 --> 00:01:22.980
package explorer and
our project.

00:01:22.980 --> 00:01:25.050
In a few clicks, we generate
the check in

00:01:25.050 --> 00:01:27.040
endpoint client library.

00:01:27.040 --> 00:01:29.480
Now that we've created the
communication mechanism, we

00:01:29.480 --> 00:01:32.260
need to add more logic to the
mobile client app to talk to

00:01:32.260 --> 00:01:34.580
the entity and Cloud
Endpoint classes.

00:01:34.580 --> 00:01:36.610
Once we do this, the
app will be able to

00:01:36.610 --> 00:01:38.460
call back to the server.

00:01:38.460 --> 00:01:41.120
For our app, this means we'll
be able to retrieve store

00:01:41.120 --> 00:01:44.250
information contained in
the backend data store.

00:01:44.250 --> 00:01:46.880
Let's create a new entity
class in our app.

00:01:46.880 --> 00:01:48.340
This will represent places--

00:01:48.340 --> 00:01:49.610
such as stores--

00:01:49.610 --> 00:01:52.700
near the customer's current
location in real time.

00:01:52.700 --> 00:01:55.560
Let's create that new class
and name it Place.

00:01:55.560 --> 00:01:58.390
We'll navigate to the package
explorer and generate a Cloud

00:01:58.390 --> 00:01:59.710
Endpoint class.

00:01:59.710 --> 00:02:01.950
Then, we'll also generate
another Cloud

00:02:01.950 --> 00:02:04.110
Endpoint client library.

00:02:04.110 --> 00:02:05.990
Now that we've told the app
how to understand store

00:02:05.990 --> 00:02:08.789
addresses, let's modify the
client to actually obtain

00:02:08.789 --> 00:02:12.300
information from the backend
and display it in our app.

00:02:12.300 --> 00:02:15.540
What I'm doing is expanding the
MainActivity.java section,

00:02:15.540 --> 00:02:18.170
where our front end code is
located, and adding in more

00:02:18.170 --> 00:02:21.720
code, which includes the global
results list variable.

00:02:21.720 --> 00:02:24.570
This contains the information
about the store locations

00:02:24.570 --> 00:02:27.170
obtained from the backend.

00:02:27.170 --> 00:02:29.320
And now we've got the app
infrastructure in place

00:02:29.320 --> 00:02:31.670
between the client and the
mobile backend using Google

00:02:31.670 --> 00:02:33.150
Cloud Endpoints.

00:02:33.150 --> 00:02:34.570
We just did a lot.

00:02:34.570 --> 00:02:37.360
We created a bunch of objects
and classes, built the

00:02:37.360 --> 00:02:40.320
infrastructure, wired up the
Android app to call back to

00:02:40.320 --> 00:02:43.890
the server, and got the app to
display a list of stores.

00:02:43.890 --> 00:02:46.780
Next, let's add logic that
allows the customer to perform

00:02:46.780 --> 00:02:49.750
the actual tasks of checking
in to a place and obtaining

00:02:49.750 --> 00:02:52.120
information about the
sales and offers.

00:02:52.120 --> 00:02:55.170
First, we need to create the
client-user interface so users

00:02:55.170 --> 00:02:58.080
can access the information,
then we can add offers and

00:02:58.080 --> 00:03:02.320
recommendations logic to the
backend and to the client.

00:03:02.320 --> 00:03:05.180
Let's modify a few files to
improve the interface.

00:03:05.180 --> 00:03:07.890
We replace TextView with
ListView, which contains the

00:03:07.890 --> 00:03:09.630
code to list nearby places.

00:03:09.630 --> 00:03:11.750
We add the
placesListClickListener event

00:03:11.750 --> 00:03:14.850
handler, which helps the client
understand user clicks,

00:03:14.850 --> 00:03:16.780
and lets it know when to
activate the logic that

00:03:16.780 --> 00:03:18.740
performs the check in tasks.

00:03:18.740 --> 00:03:22.200
Finally, in the onPostExecute
method, we create a list

00:03:22.200 --> 00:03:25.650
adapter to better display the
information with icons.

00:03:25.650 --> 00:03:28.720
Let's now add a few things to
the MainActivity.java file to

00:03:28.720 --> 00:03:31.120
improve the interface
even more.

00:03:31.120 --> 00:03:34.550
We add activity_main.xml, which
defines the UI layout

00:03:34.550 --> 00:03:36.400
for buttons and places.

00:03:36.400 --> 00:03:39.770
We add place_item.xml, which
contains information about

00:03:39.770 --> 00:03:43.090
display format and position.

00:03:43.090 --> 00:03:46.160
And finally, we add strings.xml,
which contains

00:03:46.160 --> 00:03:48.810
pre-defined strings to display
when the user might get

00:03:48.810 --> 00:03:51.290
relevant offers or
recommendations.

00:03:51.290 --> 00:03:53.770
Now that we've created the
client-user interface, we need

00:03:53.770 --> 00:03:56.450
to add classes that allow the
app to obtain information

00:03:56.450 --> 00:03:59.190
about offers available and
shopping recommendations for

00:03:59.190 --> 00:04:00.890
each store.

00:04:00.890 --> 00:04:03.500
We can add the Offer.java
entity class and the

00:04:03.500 --> 00:04:05.660
Recommendation.java
entity class--

00:04:05.660 --> 00:04:08.610
one for gathering offers, and
one for gathering shopping

00:04:08.610 --> 00:04:09.860
recommendations.

00:04:13.030 --> 00:04:15.980
In the same way we added the
CheckIn.java class, we're

00:04:15.980 --> 00:04:19.260
going to create our related
OfferEndpoint.java class and

00:04:19.260 --> 00:04:21.980
RecommendationsEndpoint.java
class.

00:04:21.980 --> 00:04:24.630
Again, this creates the related
client libraries

00:04:24.630 --> 00:04:27.300
automatically.

00:04:27.300 --> 00:04:29.730
Finally, we're going to add
the logic to the client so

00:04:29.730 --> 00:04:32.220
that the customer can actually
see offers and shopping

00:04:32.220 --> 00:04:34.180
recommendations displayed.

00:04:34.180 --> 00:04:36.570
We modify MainActivity.java
to add the

00:04:36.570 --> 00:04:39.630
placesListClickListener event
handler, so that when a

00:04:39.630 --> 00:04:42.710
customer clicks on an item in
the list of nearby places,

00:04:42.710 --> 00:04:45.120
it'll provide offers and
recommendations.

00:04:45.120 --> 00:04:46.610
We're done with all
the coding.

00:04:46.610 --> 00:04:49.560
Let's deploy an instance
to see our app live.

00:04:49.560 --> 00:04:50.560
Check it out.

00:04:50.560 --> 00:04:53.370
In five minutes, we were able to
control our Android app by

00:04:53.370 --> 00:04:56.600
writing custom code to wire
the app to Google Cloud

00:04:56.600 --> 00:04:58.880
Endpoints, enhancing the
user experience,

00:04:58.880 --> 00:05:00.700
and saving us time.

00:05:00.700 --> 00:05:03.930
Now, you should go download the
code and the tutorial, and

00:05:03.930 --> 00:05:05.660
give it a shot doing
it on your own.

00:05:05.660 --> 00:05:11.287
[MUSIC PLAYING]

