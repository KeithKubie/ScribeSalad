WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:18.426
[MUSIC PLAYING]

00:00:28.386 --> 00:00:29.480
PAUL RASHIDI: Hello, everyone.

00:00:29.480 --> 00:00:30.180
Thanks for joining.

00:00:30.180 --> 00:00:31.150
My name's Paul Rashidi.

00:00:31.150 --> 00:00:32.790
I'm joined by Adam Rogal,
and we're part

00:00:32.790 --> 00:00:34.870
of the DFP API team.

00:00:34.870 --> 00:00:37.920
We're excited to host another
Hangout, so today we'll be

00:00:37.920 --> 00:00:41.030
talking with Maanto about their
DFP API integration.

00:00:41.030 --> 00:00:43.900
Maanto has robust solutions for
campaign analysis as well

00:00:43.900 --> 00:00:46.490
as ad verification that
dramatically reduce workflow

00:00:46.490 --> 00:00:49.580
for publishers that I think
you'll find quite interesting.

00:00:49.580 --> 00:00:52.740
So without further ado, I'll
pass it over to Tom Denecke,

00:00:52.740 --> 00:00:54.870
founder of Maanto, to show
us what Maanto does

00:00:54.870 --> 00:00:56.726
and how they integrate.

00:00:56.726 --> 00:00:57.300
TOM DENECKE: Thanks, Paul.

00:00:57.300 --> 00:01:00.490
We are very glad to take part
in this Hangout here.

00:01:00.490 --> 00:01:03.010
And I'm also very happy to have

00:01:03.010 --> 00:01:04.379
Christoph here on my side.

00:01:04.379 --> 00:01:07.140
He's our software architect
and knows all technical

00:01:07.140 --> 00:01:09.300
details about our products.

00:01:09.300 --> 00:01:13.240
And yeah, I guess in the next
30 minutes, we'll be most of

00:01:13.240 --> 00:01:15.410
it online demo of
all our tools.

00:01:15.410 --> 00:01:19.060
And we start with some facts
about our company.

00:01:19.060 --> 00:01:22.280
We are a very specialized
software provider for a

00:01:22.280 --> 00:01:23.970
segment of online marketing.

00:01:23.970 --> 00:01:25.380
Our clients are sales houses,

00:01:25.380 --> 00:01:27.470
publishers, and media agencies.

00:01:27.470 --> 00:01:31.550
We are based here in Cologne,
Germany, and we have software

00:01:31.550 --> 00:01:34.460
services, like AdShooter and
AdChecker, that we will show

00:01:34.460 --> 00:01:36.950
in some minutes, business
intelligence solutions,

00:01:36.950 --> 00:01:40.300
application development, and
also IT consulting services.

00:01:44.470 --> 00:01:47.815
We have currently three
solutions based on the DFP

00:01:47.815 --> 00:01:52.100
API, AdChecker and AdShooter,
already mentioned, and also

00:01:52.100 --> 00:01:53.420
campaign reporting tools.

00:01:53.420 --> 00:01:57.582
Here we put together delivery
data from the ad server and

00:01:57.582 --> 00:02:03.230
also master data turned to XML
data from the older system,

00:02:03.230 --> 00:02:06.140
for example, research
data like visibility

00:02:06.140 --> 00:02:07.570
and view time trackings.

00:02:07.570 --> 00:02:11.190
And all that is put together in
the application database.

00:02:11.190 --> 00:02:15.000
And based on that, we have
analytical tools, dashboards,

00:02:15.000 --> 00:02:16.650
alerting, and stuff like that.

00:02:16.650 --> 00:02:23.210
So each user has his own access
and view on his KPIs.

00:02:23.210 --> 00:02:26.020
Today, we will focus on
AdShooter and AdChecker.

00:02:26.020 --> 00:02:31.590
And now we switch to the
workflow slide here.

00:02:31.590 --> 00:02:37.082
So Christoph will tell you
about how the steps are.

00:02:37.082 --> 00:02:40.860
MALE SPEAKER: Yeah, so we
have the workflow here.

00:02:40.860 --> 00:02:45.640
And basically, we have two
technical parts, which is our

00:02:45.640 --> 00:02:47.180
AdShooter application.

00:02:47.180 --> 00:02:50.510
And on the other side,
we have the DFP API.

00:02:50.510 --> 00:02:53.250
And the first thing we need
to do to get our AdShooter

00:02:53.250 --> 00:02:56.820
running is to have daily
campaign imports.

00:02:56.820 --> 00:03:01.400
So basically, we fetch the
campaign data, line item data,

00:03:01.400 --> 00:03:06.070
of all campaigns of our
customers, fetch them to our

00:03:06.070 --> 00:03:09.720
AdShooter application so that we
know which ads are actually

00:03:09.720 --> 00:03:15.160
running and which ads we need
to take screenshots of.

00:03:15.160 --> 00:03:19.630
So when we have this data, the
next step is to, of course,

00:03:19.630 --> 00:03:20.970
make the screenshots.

00:03:20.970 --> 00:03:25.730
For this, we've built our own
custom tool that allows us to

00:03:25.730 --> 00:03:31.280
save up to 70% at a time that we
would usually require if we

00:03:31.280 --> 00:03:33.150
have to do this manually.

00:03:33.150 --> 00:03:37.560
So basically, what we do, we
have a list of all the running

00:03:37.560 --> 00:03:41.270
campaigns, all the running ads
that we can go through from

00:03:41.270 --> 00:03:42.380
top to bottom.

00:03:42.380 --> 00:03:47.820
And it automatically fills in
details, like where to perform

00:03:47.820 --> 00:03:54.920
these screenshots and which
URLs we need to use.

00:03:54.920 --> 00:03:58.640
We have a preview of the
creatives, so we know which

00:03:58.640 --> 00:04:00.230
creative is meant.

00:04:00.230 --> 00:04:03.430
And once we've done this, once
we have our screenshots, the

00:04:03.430 --> 00:04:07.930
next step is to inform the
sales house that their

00:04:07.930 --> 00:04:10.910
screenshots are ready so they
can select the screenshots

00:04:10.910 --> 00:04:15.890
they want to send out and to
approve these screenshots.

00:04:15.890 --> 00:04:19.119
And once they've selected the
shots they want to use, and

00:04:19.119 --> 00:04:22.230
they've approved them, the next
step is just to send a

00:04:22.230 --> 00:04:25.590
mail with a download link to
the actual advertiser or

00:04:25.590 --> 00:04:31.920
agency so they can download
these screenshots, either as a

00:04:31.920 --> 00:04:34.585
zip package or as a PowerPoint
package.

00:04:38.280 --> 00:04:41.460
So I'll switch back over
to Tom so he can

00:04:41.460 --> 00:04:44.368
show you the demo.

00:04:44.368 --> 00:04:46.065
TOM DENECKE: Thanks,
Christoph.

00:04:46.065 --> 00:04:50.160
Now we will shortly have a
look at the application.

00:04:50.160 --> 00:04:53.370
So here we are on the stat where
we have generated the

00:04:53.370 --> 00:04:54.090
screenshots.

00:04:54.090 --> 00:04:56.220
They are uploaded
to our server.

00:04:56.220 --> 00:05:00.337
And then this mail, Christoph
mentioned, there is a deep

00:05:00.337 --> 00:05:04.170
link included, so we click on
it, and then we are directed

00:05:04.170 --> 00:05:07.760
here to this screenshot job.

00:05:07.760 --> 00:05:11.150
And here we see an
example campaign.

00:05:11.150 --> 00:05:13.110
It consists of three different
creatives.

00:05:13.110 --> 00:05:18.910
It's a skyscraper, a medium
rectangle, and a super banner.

00:05:18.910 --> 00:05:23.180
So what we can do here, we can,
for example, click on

00:05:23.180 --> 00:05:28.790
that, and then we see the full
size here of the screenshot.

00:05:28.790 --> 00:05:33.900
We can change here formats,
kind of cropping

00:05:33.900 --> 00:05:35.420
feature we have here.

00:05:35.420 --> 00:05:37.450
We can save it or
just go back.

00:05:41.490 --> 00:05:44.490
And then we can select
those that we want

00:05:44.490 --> 00:05:46.280
to send to our clients.

00:05:46.280 --> 00:05:50.810
So we can say we only want to
send, for example, two of

00:05:50.810 --> 00:05:51.550
those three.

00:05:51.550 --> 00:05:54.500
So we would uncheck this here.

00:05:54.500 --> 00:05:58.940
And we can also have a
look at the results.

00:05:58.940 --> 00:06:04.260
We have the screenshot as a
JPEG file but also in a

00:06:04.260 --> 00:06:06.520
PowerPoint file included.

00:06:06.520 --> 00:06:15.110
So we check this button here,
open this PowerPoint example.

00:06:15.110 --> 00:06:19.990
And yeah, we have first
title slide with

00:06:19.990 --> 00:06:22.520
the corporate layout.

00:06:22.520 --> 00:06:24.790
Here is the name of
the advertiser and

00:06:24.790 --> 00:06:25.980
the campaign name.

00:06:25.980 --> 00:06:29.190
And each following slide
contains the screenshot with

00:06:29.190 --> 00:06:35.190
the description text here in
the header and also some

00:06:35.190 --> 00:06:39.060
describing information here in
the comment, the creative and

00:06:39.060 --> 00:06:42.840
ad IDs and the URL where the
screenshot was taken.

00:06:42.840 --> 00:06:46.360
And we can close that
again here.

00:06:46.360 --> 00:06:49.840
And the last step is to send
out those screenshots.

00:06:49.840 --> 00:06:53.500
And this mail can be generated
here also in our application.

00:06:53.500 --> 00:06:54.960
So we have here this
Mail button.

00:07:00.340 --> 00:07:03.360
And then there is some
pre-configured information,

00:07:03.360 --> 00:07:05.340
like recipient, subject.

00:07:05.340 --> 00:07:07.860
You can type in some additional
information.

00:07:07.860 --> 00:07:12.230
And then we just press here
Approve, and the screenshot

00:07:12.230 --> 00:07:15.170
mail is generated
from our server.

00:07:15.170 --> 00:07:19.640
And we see here how it
would look like.

00:07:19.640 --> 00:07:24.220
We can have also a corporate
layout with some text and say,

00:07:24.220 --> 00:07:26.930
hello, here's a new screenshot,
and here's those

00:07:26.930 --> 00:07:30.430
three download links for the
image package, the PowerPoint,

00:07:30.430 --> 00:07:36.370
and also both of that, again,
as in a zip file here.

00:07:36.370 --> 00:07:40.010
So that was basically what you
can do with AdShooter.

00:07:46.850 --> 00:07:50.955
So to sum that up--

00:07:50.955 --> 00:07:52.630
MALE SPEAKER: [INAUDIBLE].

00:07:52.630 --> 00:07:57.210
TOM DENECKE: Sorry, yeah, the
AdShooter is really a

00:07:57.210 --> 00:08:01.190
comprehensive solution for this
whole screenshot process.

00:08:01.190 --> 00:08:04.550
We have some API features
here integrated.

00:08:04.550 --> 00:08:10.260
We have the job list, which is
the result of our data import

00:08:10.260 --> 00:08:12.500
process, where we use the API.

00:08:12.500 --> 00:08:17.330
Also finding the creative is
based on this preview feature

00:08:17.330 --> 00:08:18.700
of the API.

00:08:18.700 --> 00:08:20.370
And then we have taken
the screenshots.

00:08:20.370 --> 00:08:24.130
We format them, distribute
it, and also archiving.

00:08:24.130 --> 00:08:28.280
So the benefit is this process
efficiency, we save a lot of

00:08:28.280 --> 00:08:31.120
time, and you can offer
screenshots for all your

00:08:31.120 --> 00:08:33.856
clients because it's so easy.

00:08:33.856 --> 00:08:35.820
ADAM ROGAL: It's an
impressive tool.

00:08:35.820 --> 00:08:39.679
So just diving a little bit into
the API there, maybe we

00:08:39.679 --> 00:08:42.730
could discuss what calls to
the API you're making.

00:08:42.730 --> 00:08:46.270
I know that you have two
parts there, which is

00:08:46.270 --> 00:08:47.760
the campaign import.

00:08:47.760 --> 00:08:50.520
And then it also looks like
you might be using the

00:08:50.520 --> 00:08:58.580
line-item creative service,
the getPreview web call.

00:08:58.580 --> 00:09:00.170
Maybe you guys can talk a little
bit about how you're

00:09:00.170 --> 00:09:01.400
using both API calls.

00:09:01.400 --> 00:09:03.570
MALE SPEAKER: Yeah, OK.

00:09:03.570 --> 00:09:06.600
Well actually, we wanted to talk
about this later on, but

00:09:06.600 --> 00:09:08.480
we can do it now.

00:09:08.480 --> 00:09:13.720
So basically, as you mentioned,
we use pretty much

00:09:13.720 --> 00:09:17.060
all the sales-side services,
I think it was--

00:09:17.060 --> 00:09:18.320
sales-side services?

00:09:18.320 --> 00:09:21.310
No, it's the other one?

00:09:21.310 --> 00:09:22.180
Whatever.

00:09:22.180 --> 00:09:24.980
We have the campaign
service for

00:09:24.980 --> 00:09:27.430
fetching all active campaigns.

00:09:27.430 --> 00:09:30.910
We use the line-item service of
course, to fetch the line

00:09:30.910 --> 00:09:32.860
items of all these campaigns.

00:09:32.860 --> 00:09:37.490
We use the creative service to
fetch the actual creatives.

00:09:37.490 --> 00:09:41.860
And once we have these, we have
the line-item creative

00:09:41.860 --> 00:09:45.450
associations, of course, to
match up the line items with

00:09:45.450 --> 00:09:47.580
the corresponding creatives.

00:09:47.580 --> 00:09:51.410
And then the line-item creative
association service

00:09:51.410 --> 00:09:55.330
also allows us to get
the preview URL.

00:09:55.330 --> 00:10:02.400
And then we also have the
inventory service that allows

00:10:02.400 --> 00:10:07.340
us to know in which placements
the ads are supposed to be

00:10:07.340 --> 00:10:10.050
shown so we know where to
take the screenshots.

00:10:10.050 --> 00:10:15.764
So we're basically using the
API almost as a whole.

00:10:15.764 --> 00:10:16.560
ADAM ROGAL: Great.

00:10:16.560 --> 00:10:17.810
Thanks.

00:10:19.550 --> 00:10:23.290
MALE SPEAKER: OK, so we'll
continue, then,

00:10:23.290 --> 00:10:25.030
with the next product.

00:10:25.030 --> 00:10:26.470
I'll switch back to Tom.

00:10:30.238 --> 00:10:32.490
TOM DENECKE: OK, thanks.

00:10:32.490 --> 00:10:36.610
So AdChecker is the product
that we offer as

00:10:36.610 --> 00:10:37.830
software as a service.

00:10:37.830 --> 00:10:40.480
Here's more about quality
management.

00:10:40.480 --> 00:10:46.730
And what we have here is a tool
which checks if all those

00:10:46.730 --> 00:10:49.630
technical parameters, like size,
performance, download

00:10:49.630 --> 00:10:52.000
time, is OK.

00:10:52.000 --> 00:10:56.570
So it's kind of a monitoring
system of all active creatives

00:10:56.570 --> 00:10:59.540
and special features
for redirect ads.

00:10:59.540 --> 00:11:03.960
Because here, the sales house
or the publisher, he doesn't

00:11:03.960 --> 00:11:08.170
know what is going on when the
creative has changed so that

00:11:08.170 --> 00:11:14.180
it's a special point here that
we track the whole campaign

00:11:14.180 --> 00:11:15.980
delivery process here.

00:11:15.980 --> 00:11:20.010
And we have email alerts if
there's a problem with that,

00:11:20.010 --> 00:11:25.150
and we store all the checks
and kind of the history.

00:11:25.150 --> 00:11:28.480
So the benefit is early
detection of possible

00:11:28.480 --> 00:11:32.835
problems, and you're enabled
for proactive handling.

00:11:36.310 --> 00:11:42.375
Christoph will now explain also
the AdChecker workflow.

00:11:42.375 --> 00:11:45.840
MALE SPEAKER: OK, so basically,
it's very similar

00:11:45.840 --> 00:11:47.810
to the AdShooter workflow.

00:11:47.810 --> 00:11:50.160
We also, again, have
our AdChecker

00:11:50.160 --> 00:11:53.160
application this time.

00:11:53.160 --> 00:11:56.440
This also connects
to the DFP API to

00:11:56.440 --> 00:11:58.440
import the active orders.

00:11:58.440 --> 00:12:02.340
Pretty much the same as the
AdShooter application, we

00:12:02.340 --> 00:12:05.220
check which ads are running,
so with that, we know which

00:12:05.220 --> 00:12:07.400
ads we have to check.

00:12:07.400 --> 00:12:13.170
So what happens is we perform
these continuous checks,

00:12:13.170 --> 00:12:17.420
usually on a 24-hour schedule,
but we can change this

00:12:17.420 --> 00:12:19.920
schedule if the customer
needs it.

00:12:19.920 --> 00:12:25.440
And what we do is we open
these creatives that are

00:12:25.440 --> 00:12:29.050
currently running, check their
file sizes, check especially

00:12:29.050 --> 00:12:32.060
if they have changed in redirect
creative cases.

00:12:32.060 --> 00:12:36.060
And if there's a problem with
any part of the creative, then

00:12:36.060 --> 00:12:38.750
we can send out an email with
the problem summary to the

00:12:38.750 --> 00:12:43.840
sales house so that they, in
turn, can analyze what's

00:12:43.840 --> 00:12:47.830
happening and especially,
maybe, perform some

00:12:47.830 --> 00:12:50.275
troubleshooting with the agency
or advertiser that may

00:12:50.275 --> 00:12:52.830
be hosting the redirect
creative, in case there are

00:12:52.830 --> 00:12:55.710
some issues there.

00:12:55.710 --> 00:12:59.000
So onto the online demo.

00:12:59.000 --> 00:13:02.450
I'll switch back to
Tom for this.

00:13:02.450 --> 00:13:03.700
TOM DENECKE: Thanks.

00:13:07.030 --> 00:13:10.740
OK, what we see here is our web
application with all the

00:13:10.740 --> 00:13:13.230
results of our checks
that we performed.

00:13:13.230 --> 00:13:18.330
And we got here some kind
of traffic light system.

00:13:18.330 --> 00:13:21.380
So this is the list
of all active

00:13:21.380 --> 00:13:24.420
creative for this publisher.

00:13:24.420 --> 00:13:28.160
And for each [INAUDIBLE], we
have a column which indicates

00:13:28.160 --> 00:13:29.050
if there's a problem.

00:13:29.050 --> 00:13:33.570
So here, it's formats, file
size, download time, Flash

00:13:33.570 --> 00:13:39.210
version, Flash frame rate, and
the download domain where it

00:13:39.210 --> 00:13:39.960
comes from.

00:13:39.960 --> 00:13:44.110
And if it's red, it indicates
here is a problem.

00:13:44.110 --> 00:13:45.090
Yellow is a warning.

00:13:45.090 --> 00:13:47.180
And if it's nothing to
be seen here, it's

00:13:47.180 --> 00:13:50.450
green, so it's fine.

00:13:50.450 --> 00:13:56.050
What is interesting here, we can
select those checks, and

00:13:56.050 --> 00:13:58.810
we can filter all
that are red.

00:13:58.810 --> 00:14:02.930
So we see here very quick
where are the problems.

00:14:02.930 --> 00:14:09.610
We can do this here for each
check or for all those.

00:14:09.610 --> 00:14:14.180
And another one, which is
another filter that is really

00:14:14.180 --> 00:14:19.580
nice, this here, first
OK, and now red.

00:14:19.580 --> 00:14:21.890
That means initially
that creative was

00:14:21.890 --> 00:14:24.940
fine when it started.

00:14:24.940 --> 00:14:28.540
But later on, it was changed,
and now it has a problem.

00:14:28.540 --> 00:14:32.860
And there are those cases that
are hard to detect without

00:14:32.860 --> 00:14:36.100
such tool support.

00:14:36.100 --> 00:14:40.930
So let's get one step
deeper and have a

00:14:40.930 --> 00:14:43.140
look in such a creative.

00:14:51.730 --> 00:14:55.570
We have here a very
nice example.

00:14:55.570 --> 00:14:58.050
It's a Batman creative.

00:14:58.050 --> 00:15:03.660
And here we got the details
from this check history.

00:15:03.660 --> 00:15:07.650
We see some details from
which order it came.

00:15:07.650 --> 00:15:10.050
Here are the results
of the check.

00:15:10.050 --> 00:15:15.130
So we see this creative
was 143 kilobytes big.

00:15:15.130 --> 00:15:19.650
And our check condition is
lower than 50 is green,

00:15:19.650 --> 00:15:24.050
between 50 and 60 is yellow,
and bigger than 60 is red.

00:15:24.050 --> 00:15:25.260
So this one was red.

00:15:25.260 --> 00:15:27.000
And also, here was a
little problem with

00:15:27.000 --> 00:15:28.510
the download speed.

00:15:28.510 --> 00:15:31.390
Flash version and so
on, this was OK.

00:15:31.390 --> 00:15:34.660
So we see here in which
order it was used.

00:15:34.660 --> 00:15:39.310
And when we come down here, we
have this check history.

00:15:39.310 --> 00:15:42.630
So this one started here
on the 22nd of May.

00:15:42.630 --> 00:15:46.330
It's an old example, and it
was checked four times.

00:15:46.330 --> 00:15:52.220
And you see here, every time it
was red was the file size.

00:15:52.220 --> 00:15:55.640
And one time, it has a problem
with download time.

00:15:55.640 --> 00:15:59.780
And we can click on that here.

00:15:59.780 --> 00:16:02.620
And it looks similar to the
other page, but here, we have

00:16:02.620 --> 00:16:07.030
more details and see the result
of the specific check.

00:16:07.030 --> 00:16:12.080
So if the creative would have
been changed, we would see

00:16:12.080 --> 00:16:14.580
here another creative--

00:16:14.580 --> 00:16:16.310
here, it's the same one--

00:16:16.310 --> 00:16:21.320
and some more details
about the source

00:16:21.320 --> 00:16:22.820
URL, stuff like that.

00:16:22.820 --> 00:16:26.980
And for Flash creatives, we
also have here integrated

00:16:26.980 --> 00:16:34.290
decompiler, so we can dig very
deep in details, like those

00:16:34.290 --> 00:16:35.380
action scripts.

00:16:35.380 --> 00:16:37.820
You'll see how it
was implemented.

00:16:37.820 --> 00:16:41.780
And so it's very detailed
information.

00:16:41.780 --> 00:16:45.760
Also, we have here the whole ad
request chain, so it leads

00:16:45.760 --> 00:16:47.290
to the ad delivery.

00:16:47.290 --> 00:16:52.110
And we see where were cookies
used and all that, so you get

00:16:52.110 --> 00:16:55.620
a whole overview about
all requests.

00:16:55.620 --> 00:17:00.020
And yeah, you can spend a lot
of time investigating the

00:17:00.020 --> 00:17:02.280
problems here.

00:17:02.280 --> 00:17:06.040
We've got other features, like
dashboards, Excel export, and

00:17:06.040 --> 00:17:07.240
other things.

00:17:07.240 --> 00:17:10.250
But I guess for a short
overview, that is enough at

00:17:10.250 --> 00:17:13.150
this point here.

00:17:13.150 --> 00:17:16.549
So yeah, any questions
for that?

00:17:16.549 --> 00:17:21.069
PAUL RASHIDI: So I just wanted
to quickly ask, the comparison

00:17:21.069 --> 00:17:24.040
you're doing, or the timeline,
basically, you're taking of

00:17:24.040 --> 00:17:27.880
the creatives, are you using the
API to be able to detect

00:17:27.880 --> 00:17:29.200
when the creatives
are changing?

00:17:29.200 --> 00:17:32.205
Or are you picking that up
in your daily checks?

00:17:35.225 --> 00:17:35.970
TOM DENECKE: I'm on?

00:17:35.970 --> 00:17:37.220
OK.

00:17:40.270 --> 00:17:44.370
When we check the creative,
we generate a hash key--

00:17:44.370 --> 00:17:46.220
MD5 hash key.

00:17:46.220 --> 00:17:49.630
And so when we compare it to the
last check, we know it has

00:17:49.630 --> 00:17:50.660
changed or not.

00:17:50.660 --> 00:17:52.600
So that is our mechanism
for that.

00:17:52.600 --> 00:17:54.260
PAUL RASHIDI: OK.

00:17:54.260 --> 00:17:58.310
But are you doing it on the ad
serving side, like you're

00:17:58.310 --> 00:18:01.390
checking it from that end, or
are you using the API--

00:18:01.390 --> 00:18:03.500
the PQL LastModifiedDateTime?

00:18:03.500 --> 00:18:05.530
TOM DENECKE: No, we
don't use the API.

00:18:05.530 --> 00:18:07.870
We use the result.

00:18:07.870 --> 00:18:11.740
We pull the creative again,
and then we compare it

00:18:11.740 --> 00:18:12.420
physically.

00:18:12.420 --> 00:18:13.720
PAUL RASHIDI: OK, great.

00:18:13.720 --> 00:18:16.630
ADAM ROGAL: Since a lot of other
developers do something

00:18:16.630 --> 00:18:19.630
very similar, I was wondering if
maybe they might be looking

00:18:19.630 --> 00:18:21.780
at this demo and then sort of
asking themselves how they can

00:18:21.780 --> 00:18:23.260
do something similar.

00:18:23.260 --> 00:18:27.890
It seems like what you'll be
doing is a lot of times, these

00:18:27.890 --> 00:18:30.590
are third-party creatives, and
you're downloading the

00:18:30.590 --> 00:18:36.240
creative that might be within
the asset that's within the

00:18:36.240 --> 00:18:36.920
source code of it.

00:18:36.920 --> 00:18:42.020
Or if it's a redirect URL,
you're following the URL down

00:18:42.020 --> 00:18:44.900
the path to get the
actual asset.

00:18:44.900 --> 00:18:48.150
Is that mostly the case here,
where you basically handle it

00:18:48.150 --> 00:18:49.280
on different type
of creatives--

00:18:49.280 --> 00:18:51.290
you handle it differently?

00:18:51.290 --> 00:18:54.130
MALE SPEAKER: Yeah, and the
thing is, with redirect

00:18:54.130 --> 00:18:56.530
creatives, the problem
is it doesn't

00:18:56.530 --> 00:18:58.040
change in the ad server.

00:18:58.040 --> 00:19:01.220
So that's why we always have to
follow all these requests,

00:19:01.220 --> 00:19:05.040
down to the actual creative,
to see if it has changed.

00:19:05.040 --> 00:19:07.100
If it's a physical creative,
of course, we could

00:19:07.100 --> 00:19:08.120
check in the API.

00:19:08.120 --> 00:19:12.740
But in our case, it's just a
scheduled task that repeatedly

00:19:12.740 --> 00:19:14.760
tries to get the
actual creative

00:19:14.760 --> 00:19:16.460
that's being delivered.

00:19:16.460 --> 00:19:21.990
So we have the creative code
from the API, and we just

00:19:21.990 --> 00:19:25.770
basically paste this creative
code in a blank HTML page and

00:19:25.770 --> 00:19:28.725
then analyze which requests
are being made.

00:19:28.725 --> 00:19:30.500
ADAM ROGAL: And that's a good
point to make to our other

00:19:30.500 --> 00:19:33.620
developers out there, is that
while LastModifiedDateTime in

00:19:33.620 --> 00:19:36.200
the PQL query will get you
creatives that have been

00:19:36.200 --> 00:19:40.260
modified, if we're hosting the
asset ourselves for redirect

00:19:40.260 --> 00:19:42.710
creatives, yeah, the asset
might have changed.

00:19:42.710 --> 00:19:44.930
So if you're dealing with a lot
of redirect creatives or

00:19:44.930 --> 00:19:47.220
third-party creatives, where the
asset's hosted somewhere

00:19:47.220 --> 00:19:50.650
else, that's a good point, too,
that you might need to

00:19:50.650 --> 00:19:53.860
check that yourself.

00:19:53.860 --> 00:19:55.705
TOM DENECKE: Correct.

00:19:55.705 --> 00:19:58.110
PAUL RASHIDI: Great.

00:19:58.110 --> 00:20:01.920
So I think next, you guys were
going to speak about your API

00:20:01.920 --> 00:20:06.416
integration in a little bit
more detail, I believe.

00:20:06.416 --> 00:20:08.130
MALE SPEAKER: Exactly.

00:20:08.130 --> 00:20:13.060
We wanted to give a small
technical overview of what

00:20:13.060 --> 00:20:17.160
we're doing, especially what
we're doing with the API.

00:20:17.160 --> 00:20:21.600
Since we've already pretty much
said that we're working

00:20:21.600 --> 00:20:24.250
with everything, I
think we can step

00:20:24.250 --> 00:20:26.750
through this quite quickly.

00:20:26.750 --> 00:20:30.260
Let me just share the
screen again.

00:20:30.260 --> 00:20:37.190
OK, we have, basically, the two
parts of the API for our

00:20:37.190 --> 00:20:40.610
transactional data for the
company service that I

00:20:40.610 --> 00:20:43.300
mentioned-- the order service,
line-item service, inventory

00:20:43.300 --> 00:20:46.040
service, and creative service.

00:20:46.040 --> 00:20:51.050
So from the companies, of
course, we fetch the actual

00:20:51.050 --> 00:20:55.420
advertiser, the person that
wants to advertise.

00:20:55.420 --> 00:20:59.120
From the order service, we
get the active campaigns.

00:20:59.120 --> 00:21:02.650
From the line-item service,
we get the line

00:21:02.650 --> 00:21:04.610
items of the orders.

00:21:04.610 --> 00:21:06.790
From the creatives,
we get all the

00:21:06.790 --> 00:21:07.910
creatives that are running.

00:21:07.910 --> 00:21:11.360
And then we associate them
through the line-item creative

00:21:11.360 --> 00:21:12.690
associations.

00:21:12.690 --> 00:21:17.190
And from the inventory service,
me fetch where these

00:21:17.190 --> 00:21:20.430
creatives are supposed to be
shown or the line items.

00:21:20.430 --> 00:21:26.570
And what we have is we have our
import tool, especially in

00:21:26.570 --> 00:21:32.350
this case, the DFP6 importer
that connects to the API to

00:21:32.350 --> 00:21:38.453
fetch all this master data so
that we can generate our job

00:21:38.453 --> 00:21:42.570
lists so we know where to
perform the screenshots or

00:21:42.570 --> 00:21:45.320
which ads we need to check
with the AdChecker.

00:21:45.320 --> 00:21:49.100
And then there's also the
second part, the report

00:21:49.100 --> 00:21:52.270
service that we use in some of
our other products where we

00:21:52.270 --> 00:21:58.710
fetch the reporting data for
various campaigns and then use

00:21:58.710 --> 00:22:03.600
this data to display dashboards
about which

00:22:03.600 --> 00:22:06.540
campaigns we're running
how well.

00:22:06.540 --> 00:22:10.800
And some of the highlights--

00:22:10.800 --> 00:22:14.270
as you can imagine, we're not
using only the DFP API.

00:22:14.270 --> 00:22:18.560
We've seen very many others.

00:22:18.560 --> 00:22:22.820
And one of the highlights of
the DFP API that we really

00:22:22.820 --> 00:22:26.780
love is the
LastModifiedDateTime, because

00:22:26.780 --> 00:22:30.780
this allows us to perform
incremental updates.

00:22:30.780 --> 00:22:37.180
So our importers, for some ad
servers, they run only once at

00:22:37.180 --> 00:22:40.660
night, because they take quite
some time to finish.

00:22:40.660 --> 00:22:45.310
And the DFP6 importer can
basically run once an hour, or

00:22:45.310 --> 00:22:50.620
even more often, because with
the LastModifiedDateTime, we

00:22:50.620 --> 00:22:58.980
can, one, filter by this so that
we can just take the last

00:22:58.980 --> 00:23:00.960
entry we have in our tables--

00:23:00.960 --> 00:23:03.250
the maximum
LastModifiedDateTime--

00:23:03.250 --> 00:23:07.110
and query everything that's
higher than this.

00:23:07.110 --> 00:23:11.050
And also, what we can do is we
can order it by this column.

00:23:11.050 --> 00:23:15.430
So this basically allows us that
even if an import might

00:23:15.430 --> 00:23:19.590
crash, we still have a
consistent state in our

00:23:19.590 --> 00:23:23.610
database so that we always can
just say, what's our maximum

00:23:23.610 --> 00:23:25.810
value of the
LastModifiedDateTime?

00:23:25.810 --> 00:23:27.650
Continue on from there.

00:23:27.650 --> 00:23:30.405
And that's something that we
have pretty much only seen in

00:23:30.405 --> 00:23:32.980
the DFP API.

00:23:32.980 --> 00:23:39.520
All the others have some
revision or other abilities

00:23:39.520 --> 00:23:42.850
that go in this direction, but
none of them really compare to

00:23:42.850 --> 00:23:47.780
this, because you can't continue
where you left off.

00:23:47.780 --> 00:23:53.550
And that makes the DFP API
very practical for us.

00:23:53.550 --> 00:23:59.400
And also, of course, the basis
for this is the PQL language,

00:23:59.400 --> 00:24:02.460
which allows us to filter by
this column and to order by

00:24:02.460 --> 00:24:07.150
this column and also fetch the
relevant data from all the

00:24:07.150 --> 00:24:09.360
other services that we use.

00:24:09.360 --> 00:24:12.430
So basically, we have
to say we were very

00:24:12.430 --> 00:24:14.966
happy with the API.

00:24:14.966 --> 00:24:15.830
PAUL RASHIDI: Great.

00:24:15.830 --> 00:24:19.340
ADAM ROGAL: Well, thanks
very much.

00:24:19.340 --> 00:24:22.210
One question I had for
you guys was--

00:24:22.210 --> 00:24:26.600
we discussed earlier how
LastModifiedDateTime was not

00:24:26.600 --> 00:24:28.490
as useful for creative
service.

00:24:28.490 --> 00:24:30.830
Are you mostly using that for
the order service and

00:24:30.830 --> 00:24:32.775
line-item service?

00:24:32.775 --> 00:24:35.610
MALE SPEAKER: We are also using
it for the creative

00:24:35.610 --> 00:24:40.040
service, because what we're
doing there is not checking

00:24:40.040 --> 00:24:42.290
has the creative been modified
or anything.

00:24:42.290 --> 00:24:47.720
But what we are doing is we are
fetching pretty much all

00:24:47.720 --> 00:24:51.400
creatives so that if a creative
has changed, then we

00:24:51.400 --> 00:24:52.070
get this change.

00:24:52.070 --> 00:24:53.860
If it hasn't changed, we
don't need to fetch it.

00:24:53.860 --> 00:24:55.015
ADAM ROGAL: Great.

00:24:55.015 --> 00:24:58.420
MALE SPEAKER: But this also
means-- so it doesn't

00:24:58.420 --> 00:25:00.790
necessarily have
to be modified.

00:25:00.790 --> 00:25:04.250
The LastModifiedDateTime is also
when it's created, so we

00:25:04.250 --> 00:25:07.090
are sure to get all
new creatives.

00:25:07.090 --> 00:25:09.848
We have all the data we need,
all the current data.

00:25:09.848 --> 00:25:11.370
ADAM ROGAL: Great point.

00:25:11.370 --> 00:25:14.330
One other thing that I wanted to
bring up to some developers

00:25:14.330 --> 00:25:18.170
who might be watching this is
that starting in v. 2012.11,

00:25:18.170 --> 00:25:21.160
we're going to be supporting
unsupported creatives now.

00:25:21.160 --> 00:25:24.560
So as the API evolves, and as
the product evolves, new

00:25:24.560 --> 00:25:25.980
creatives get introduced.

00:25:25.980 --> 00:25:28.650
In the past, a lot of these
would get filtered out.

00:25:28.650 --> 00:25:32.730
It seems like in a tool like
AdChecker or the screenshot

00:25:32.730 --> 00:25:36.660
tool, you'd want to have every
creative in your system.

00:25:36.660 --> 00:25:40.650
So it seems like that would be
a good move for you guys is

00:25:40.650 --> 00:25:42.240
the next step is to incorporate

00:25:42.240 --> 00:25:43.270
the unsupported creatives.

00:25:43.270 --> 00:25:43.885
TOM DENECKE: Yeah.

00:25:43.885 --> 00:25:44.330
MALE SPEAKER: Exactly.

00:25:44.330 --> 00:25:46.000
ADAM ROGAL: And just for people
who aren't familiar,

00:25:46.000 --> 00:25:48.530
those extend the base
creative types.

00:25:48.530 --> 00:25:50.660
So you still have the preview
URL where you can go

00:25:50.660 --> 00:25:51.850
and fetch the asset.

00:25:51.850 --> 00:25:53.590
You still have the size.

00:25:53.590 --> 00:25:55.150
You still have the name,
and you also have the

00:25:55.150 --> 00:25:56.480
LastModifiedDateTime.

00:25:56.480 --> 00:25:59.765
So even if it's not fully
supported in API yet, you can

00:25:59.765 --> 00:26:01.716
still check to see if
it's been modified.

00:26:01.716 --> 00:26:02.670
TOM DENECKE: Mm hm.

00:26:02.670 --> 00:26:03.726
Yep.

00:26:03.726 --> 00:26:04.642
MALE SPEAKER: Exactly.

00:26:04.642 --> 00:26:06.985
That's our next step.

00:26:06.985 --> 00:26:08.500
ADAM ROGAL: Great.

00:26:08.500 --> 00:26:12.230
PAUL RASHIDI: Christoph, did
you want to talk about

00:26:12.230 --> 00:26:16.130
upgrades and any of the changes
you made for your

00:26:16.130 --> 00:26:19.040
system in order to support
some of the upgrades

00:26:19.040 --> 00:26:20.290
that are going on?

00:26:23.240 --> 00:26:26.030
MALE SPEAKER: There wasn't
actually much that we needed

00:26:26.030 --> 00:26:30.400
to change, because the upgrades
went pretty fluent.

00:26:30.400 --> 00:26:35.690
What we did encounter was
exactly this point about the

00:26:35.690 --> 00:26:40.750
missing creative types that came
after the version of the

00:26:40.750 --> 00:26:45.190
API that we were using, which
might lead to exceptions when

00:26:45.190 --> 00:26:47.190
fetching the creatives.

00:26:47.190 --> 00:26:49.760
But with the new API, this has
also been removed, and all

00:26:49.760 --> 00:26:52.640
other upgrades have been
pretty much fluent.

00:26:52.640 --> 00:26:58.250
It was all some features that
were nice to have, especially,

00:26:58.250 --> 00:27:03.250
I think, in the creative set
service, if I'm not mistaken.

00:27:03.250 --> 00:27:05.950
I think we used the creative set
service for some reporting

00:27:05.950 --> 00:27:09.230
applications, too.

00:27:09.230 --> 00:27:12.170
We didn't have the
LastModifiedDateTime on the

00:27:12.170 --> 00:27:15.150
creative sets, and this has been
also introduced in the

00:27:15.150 --> 00:27:16.070
latest version.

00:27:16.070 --> 00:27:19.100
So that's something
that's pretty

00:27:19.100 --> 00:27:20.662
much an ongoing upgrade.

00:27:20.662 --> 00:27:21.928
PAUL RASHIDI: Great.

00:27:21.928 --> 00:27:24.140
ADAM ROGAL: And I just want
to point out, if you're a

00:27:24.140 --> 00:27:26.300
developer and you're listening
to this, and you're basically

00:27:26.300 --> 00:27:29.040
asking yourself, I have
feature requests, too.

00:27:29.040 --> 00:27:32.010
How do I get these feature
requests known?

00:27:32.010 --> 00:27:34.550
The forum is the best
place to go.

00:27:34.550 --> 00:27:36.830
So if you go to the
DFP API forum,

00:27:36.830 --> 00:27:37.980
please let us know there.

00:27:37.980 --> 00:27:40.950
Paul and I are there every day
looking at feature requests.

00:27:40.950 --> 00:27:44.900
The unsupported creatives, what
came out of the forum was

00:27:44.900 --> 00:27:48.930
a big request from people there
wanting to get all their

00:27:48.930 --> 00:27:53.960
creatives, even if they're not
fully supported, as well as

00:27:53.960 --> 00:27:57.320
failing a little bit more
gracefully when you fetch down

00:27:57.320 --> 00:27:59.790
a creative that might
not be supported.

00:27:59.790 --> 00:28:02.410
Filtering might be a little
bit better than having

00:28:02.410 --> 00:28:04.650
exceptions saying you
need to upgrade the

00:28:04.650 --> 00:28:05.490
version of the API.

00:28:05.490 --> 00:28:08.580
But it's a back-and-forth
process, and the API is

00:28:08.580 --> 00:28:11.870
evolving every version.

00:28:11.870 --> 00:28:15.500
And we really rely on our
developers to let us know what

00:28:15.500 --> 00:28:18.790
they'd like to see in the API.

00:28:18.790 --> 00:28:20.700
The reason that we get a lot
of compliments is the

00:28:20.700 --> 00:28:21.780
developers themselves.

00:28:21.780 --> 00:28:23.200
They're the ones who suggest
all these great

00:28:23.200 --> 00:28:25.390
features, like PQL.

00:28:25.390 --> 00:28:28.390
That came out of a big developer
question of, hey,

00:28:28.390 --> 00:28:31.570
how can I just select out things
that are named "my

00:28:31.570 --> 00:28:35.850
creative?"

00:28:35.850 --> 00:28:38.240
One thing I wanted to ask
you guys is, I noticed

00:28:38.240 --> 00:28:39.440
you're using C#.

00:28:39.440 --> 00:28:43.496
Are you using one of our
client libraries?

00:28:43.496 --> 00:28:45.400
MALE SPEAKER: Indeed, we are.

00:28:45.400 --> 00:28:47.030
Yes.

00:28:47.030 --> 00:28:53.440
We actually wish the C# library
would be more in time

00:28:53.440 --> 00:28:56.430
with the actual release of the
APIs, because we sometimes

00:28:56.430 --> 00:28:57.560
have to wait about a week.

00:28:57.560 --> 00:29:01.480
But on the other hand, a week
is not long to wait for

00:29:01.480 --> 00:29:03.230
something like this.

00:29:03.230 --> 00:29:05.530
ADAM ROGAL: It's good that you
guys are eager to start using

00:29:05.530 --> 00:29:06.640
new features of the API.

00:29:06.640 --> 00:29:08.440
We appreciate that.

00:29:08.440 --> 00:29:10.800
But that is definitely
some feedback that I

00:29:10.800 --> 00:29:14.060
can give back to--

00:29:14.060 --> 00:29:17.900
So Paul and myself belong to
the same team, that we both

00:29:17.900 --> 00:29:18.740
support the API.

00:29:18.740 --> 00:29:22.435
And we write the SDKs and
the client libraries.

00:29:22.435 --> 00:29:25.890
And if that's feedback that you
have, that other people

00:29:25.890 --> 00:29:28.560
have similar feedback, we love
to hear that kind of feedback.

00:29:28.560 --> 00:29:30.850
That means that you guys are
excited to use the new

00:29:30.850 --> 00:29:33.130
features, and it's something--

00:29:33.130 --> 00:29:37.470
it means that it's easy for
you guys to integrate new

00:29:37.470 --> 00:29:40.820
versions, which we love, as
well, because that means more

00:29:40.820 --> 00:29:42.570
developers are on
newer versions.

00:29:42.570 --> 00:29:46.370
And we can iterate a lot faster
on these new features

00:29:46.370 --> 00:29:47.750
for you guys.

00:29:47.750 --> 00:29:50.790
So I'll definitely bring that
back to the developer.

00:29:50.790 --> 00:29:53.980
Like you said, we try and aim
for about a week after the

00:29:53.980 --> 00:29:58.000
version release to release the
client library release, but we

00:29:58.000 --> 00:30:02.490
can try and speed that up a
little bit if that means a lot

00:30:02.490 --> 00:30:03.740
to you guys.

00:30:06.230 --> 00:30:07.403
PAUL RASHIDI: Great.

00:30:07.403 --> 00:30:10.031
ADAM ROGAL: Paul, do you
want to say something?

00:30:10.031 --> 00:30:10.920
PAUL RASHIDI: Go ahead.

00:30:10.920 --> 00:30:13.240
I was just going to say we're
getting close to time.

00:30:13.240 --> 00:30:14.325
But [INAUDIBLE].

00:30:14.325 --> 00:30:18.040
ADAM ROGAL: So one last question
is, it seems like--

00:30:18.040 --> 00:30:21.420
I remember working with Maanto
for a long time now, and you

00:30:21.420 --> 00:30:24.100
guys are, I would say, experts
in the API now.

00:30:24.100 --> 00:30:28.090
For a lot of our beginners out
there, maybe folks who are

00:30:28.090 --> 00:30:31.370
trying to write their first DFP
API application, do you

00:30:31.370 --> 00:30:33.920
have any advice that you want to
give them in some of those

00:30:33.920 --> 00:30:35.690
first baby steps they
might want to take?

00:30:38.520 --> 00:30:48.850
MALE SPEAKER: Basically, I'd say
first, get acclimated to

00:30:48.850 --> 00:30:52.580
the nomenclature, because if you
first enter the field and

00:30:52.580 --> 00:30:54.380
you hear something like
an order line item--

00:30:54.380 --> 00:30:56.890
what the hell is a line item?

00:30:56.890 --> 00:31:00.950
So first of all, you need to
introduce yourself to this.

00:31:00.950 --> 00:31:07.220
Then, when you've handled the
nomenclature, get take the

00:31:07.220 --> 00:31:12.260
programming language of your
choice, get the API, and just

00:31:12.260 --> 00:31:14.310
try some stuff out.

00:31:14.310 --> 00:31:15.520
Play around with the API.

00:31:15.520 --> 00:31:17.322
That's the best way to learn.

00:31:17.322 --> 00:31:19.220
ADAM ROGAL: And what do you
think the best way to play

00:31:19.220 --> 00:31:20.000
around with the API is?

00:31:20.000 --> 00:31:21.650
I've heard examples are good.

00:31:21.650 --> 00:31:22.830
The Playground is good.

00:31:22.830 --> 00:31:24.375
What would you suggest?

00:31:24.375 --> 00:31:27.800
MALE SPEAKER: Yeah, just try
fetching information.

00:31:27.800 --> 00:31:31.560
Try putting some information
into the system if you need

00:31:31.560 --> 00:31:32.450
this use case.

00:31:32.450 --> 00:31:35.860
In our case, we pretty much
rely only on fetching of

00:31:35.860 --> 00:31:36.910
information.

00:31:36.910 --> 00:31:43.520
So just see what your
use case needs--

00:31:43.520 --> 00:31:46.470
what you need from the service,
and try getting the

00:31:46.470 --> 00:31:48.130
information you need.

00:31:48.130 --> 00:31:50.290
Usually, you'll find it's
pretty easy to get the

00:31:50.290 --> 00:31:52.970
information that you wanted,
once you know where to look.

00:31:52.970 --> 00:31:56.710
But everything is usually
well sorted.

00:31:56.710 --> 00:31:59.210
ADAM ROGAL: So basically, you
can't learn to build a house

00:31:59.210 --> 00:32:00.070
unless you pick up a hammer.

00:32:00.070 --> 00:32:02.384
MALE SPEAKER: Right.

00:32:02.384 --> 00:32:03.240
ADAM ROGAL: All right.

00:32:03.240 --> 00:32:03.935
Thanks very much.

00:32:03.935 --> 00:32:05.700
PAUL RASHIDI: For newer
developers out there, I just

00:32:05.700 --> 00:32:10.290
want to mention that the
developer website for

00:32:10.290 --> 00:32:13.510
DoubleClick for Publishers does
have instructions in how

00:32:13.510 --> 00:32:14.970
to create a test network.

00:32:14.970 --> 00:32:17.150
So very easy to follow.

00:32:17.150 --> 00:32:20.490
You can actually create one from
the API itself or use our

00:32:20.490 --> 00:32:23.320
Playground to create one with
any Google account.

00:32:23.320 --> 00:32:26.870
ADAM ROGAL: And that's just
dfp-playground.appspot.com.

00:32:26.870 --> 00:32:28.220
So it's very easy to remember.

00:32:28.220 --> 00:32:30.240
You go there, and you can create
a test network in a

00:32:30.240 --> 00:32:32.165
couple steps.

00:32:32.165 --> 00:32:33.150
PAUL RASHIDI: All right.

00:32:33.150 --> 00:32:37.360
Gentlemen, thank you very much
for joining us today during

00:32:37.360 --> 00:32:38.250
this Hangout.

00:32:38.250 --> 00:32:40.930
Thank you, everyone on the
internet, for joining us or

00:32:40.930 --> 00:32:42.220
watching this later.

00:32:42.220 --> 00:32:45.290
We really appreciate everyone's
time, and we will

00:32:45.290 --> 00:32:48.026
see you again for one
of these shortly.

00:32:48.026 --> 00:32:49.675
TOM DENECKE: Thank
you very much.

00:32:49.675 --> 00:32:50.430
PAUL RASHIDI: Thank you.

00:32:50.430 --> 00:32:51.030
TOM DENECKE: Bye bye.

00:32:51.030 --> 00:32:52.280
PAUL RASHIDI: Bye.

00:33:00.030 --> 00:33:16.800
[MUSIC PLAYING]

