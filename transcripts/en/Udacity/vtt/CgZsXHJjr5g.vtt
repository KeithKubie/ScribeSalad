WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Needless to say, Sherlock Holmes would make an excellent program debugger

00:00:05.000 --> 00:00:07.000
if he were living these days.

00:00:07.000 --> 00:00:10.000
The problem in front of us can be stated as follows:

00:00:10.000 --> 00:00:16.000
"Something impossible occurred, and the only solid information is that it did occur.

00:00:16.000 --> 00:00:21.000
So we must think backwards from the result to discover the reasons."

00:00:21.000 --> 00:00:25.000
Quote from Kernighan and Pike, "The Practice of Programming"

00:00:25.000 --> 00:00:28.000
Thinking backwards from the result.

00:00:28.000 --> 00:00:32.000
This is the art of deduction applied to debugging.

00:00:32.000 --> 00:00:36.000
Let me illustrate this--how this works--using a familiar example.

00:00:36.000 --> 00:00:40.000
Here again we have a function to remove HTML markup.

00:00:40.000 --> 00:00:46.000
Just as a reminder, what this function is supposed to do is to take HTML input

00:00:46.000 --> 00:00:53.000
such as this one: a foo text enclosed into HTML tags,

00:00:53.000 --> 00:00:58.000
one to switch on bold rendering and one to switch off bold rendering,

00:00:58.000 --> 00:01:04.000
and to turn this into a text in which the HTML markup has been removed.

00:01:04.000 --> 00:01:07.000
This makes use of a number of variables:

00:01:07.000 --> 00:01:13.000
Tag checks whether we currently are processing a tag.

00:01:13.000 --> 00:01:17.000
That is, during these three characters, tag should be true.

00:01:17.000 --> 00:01:22.000
And only if we are not in tag mode do we actually add

00:01:22.000 --> 00:01:25.000
the characters to the out variable.

00:01:25.000 --> 00:01:30.000
And the out variable at the end is being returned.

00:01:30.000 --> 00:01:32.000
So while we are processing this code,

00:01:32.000 --> 00:01:35.000
tag would be true for these three characters.

00:01:35.000 --> 00:01:38.000
Then tag would be false.

00:01:38.000 --> 00:01:40.000
F-O-O would be added to the output.

00:01:40.000 --> 00:01:45.000
Finally, we would have 4 more tag characters which would not be added.

00:01:45.000 --> 00:01:48.000
In the end, what we get is this string: foo.

00:01:48.000 --> 00:01:52.000
Now let's practice the art of deduction on this example

00:01:52.000 --> 00:01:57.000
simply from the observation that this final assertion

00:01:57.000 --> 00:01:59.000
has failed.

00:01:59.000 --> 00:02:04.000
So all we know is that indeed this code can produce an output

00:02:04.000 --> 00:02:08.000
in which HTML markup is still present.

00:02:08.000 --> 00:02:12.000
This is the observation from which we start.

00:02:12.000 --> 00:02:14.000
Let's go and think backwards

00:02:14.000 --> 00:02:17.000
how the assertion possibly could have failed.

00:02:17.000 --> 00:02:23.000
What we know is that out contains an opening tag

00:02:23.000 --> 00:02:26.000
that is a less-than character.

00:02:26.000 --> 00:02:29.000
The only place where this character could have been added

00:02:29.000 --> 00:02:32.000
to the out variable is here.

00:02:32.000 --> 00:02:38.000
In order to reach that line, a number of conditions must be fulfilled.

00:02:38.000 --> 00:02:41.000
All of these conditions cannot have failed.

00:02:41.000 --> 00:02:46.000
Whereas this one must have failed.

00:02:46.000 --> 00:02:49.000
Let's focus on the tag variable here.

00:02:49.000 --> 00:02:51.000
What was the value of the tag variable

00:02:51.000 --> 00:02:53.000
when the less-than sign had been added?

00:02:53.000 --> 00:02:55.000
Over to you.

