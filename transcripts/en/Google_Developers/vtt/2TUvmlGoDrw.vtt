WEBVTT
Kind: captions
Language: en

00:00:02.680 --> 00:00:05.585
PNG files represent the bulk
of Android image content,

00:00:05.585 --> 00:00:07.460
especially if you've
got a lot of UI elements

00:00:07.460 --> 00:00:09.800
in your application,
rather than photo data.

00:00:09.800 --> 00:00:12.370
But PNG files also
represent a huge problem

00:00:12.370 --> 00:00:13.980
in terms of file size.

00:00:13.980 --> 00:00:15.720
They're easy to bloat,
and too often, we

00:00:15.720 --> 00:00:18.159
don't give them enough
attention to make them smaller.

00:00:18.159 --> 00:00:19.700
My name is Colt
McAnlis, and ensuring

00:00:19.700 --> 00:00:21.350
that your app is
easy to distribute,

00:00:21.350 --> 00:00:23.554
and that images are quick
to grab from your server

00:00:23.554 --> 00:00:25.970
has everything to do with
taking a really hard look at how

00:00:25.970 --> 00:00:27.626
you're using PNG files.

00:00:27.626 --> 00:00:30.000
Let's take a look at how bad
this problem is, in reality.

00:00:30.000 --> 00:00:34.030
Take this simple, 16
by 16 pixel red square.

00:00:34.030 --> 00:00:35.800
The default exported
image from Photoshop

00:00:35.800 --> 00:00:38.666
creates a 2.7 k image,
where the one that's

00:00:38.666 --> 00:00:40.790
been processed with some
attention to the file size

00:00:40.790 --> 00:00:43.432
only ends up being 121 bytes.

00:00:43.432 --> 00:00:44.890
The point here is
straightforward--

00:00:44.890 --> 00:00:46.580
if you're serving
a load of PNG files

00:00:46.580 --> 00:00:49.240
to your app that haven't been
optimized to this degree,

00:00:49.240 --> 00:00:52.390
you're going to be wasting a
lot of your users' bandwidth.

00:00:52.390 --> 00:00:55.430
See, at its core, PNGs
are simple file formats

00:00:55.430 --> 00:00:57.040
that apply a
lossless compression

00:00:57.040 --> 00:00:58.529
algorithm to the pixel data.

00:00:58.529 --> 00:01:00.320
The end result is that
your image maintains

00:01:00.320 --> 00:01:03.570
100% of its original
quality, but as a trade off,

00:01:03.570 --> 00:01:06.650
means that the image can be
bloated in terms of file size.

00:01:06.650 --> 00:01:08.470
Other formats,
like JPEG, achieve

00:01:08.470 --> 00:01:10.810
better compression
[? radios ?] than PNG

00:01:10.810 --> 00:01:14.030
by applying a lossy compression
algorithm to the pixels, which

00:01:14.030 --> 00:01:16.320
reduces the number of
unique pixels in the image,

00:01:16.320 --> 00:01:19.300
before handing it off
to the lossless stages.

00:01:19.300 --> 00:01:22.170
This first step of reducing
image quality helps

00:01:22.170 --> 00:01:24.830
make the pixel data more
compressible to the lossless

00:01:24.830 --> 00:01:27.430
encoder, and also allows
you, the content creator,

00:01:27.430 --> 00:01:30.230
to make a decision-- do you
want better image quality,

00:01:30.230 --> 00:01:32.770
or do you want
smaller file sizes?

00:01:32.770 --> 00:01:35.510
Sadly, PNG's simple
file format doesn't

00:01:35.510 --> 00:01:38.450
come equipped with the ability
to apply a lossy preprocess

00:01:38.450 --> 00:01:39.762
to the pixel data.

00:01:39.762 --> 00:01:41.220
But this doesn't
give you an excuse

00:01:41.220 --> 00:01:43.120
to use these bloated
PNGs in your apps.

00:01:43.120 --> 00:01:45.540
With a little bit of
gusto and elbow grease,

00:01:45.540 --> 00:01:48.650
you too can easily incorporate
a lossy preprocessor

00:01:48.650 --> 00:01:50.570
to your PNG pipeline,
helping reduce

00:01:50.570 --> 00:01:52.760
the bloat in these files.

00:01:52.760 --> 00:01:54.970
See, the problem that
we're solving here really

00:01:54.970 --> 00:01:56.360
isn't a new one.

00:01:56.360 --> 00:01:58.510
I mean, cleaning up PNG
files to be less bloated

00:01:58.510 --> 00:02:01.040
and applying a lossy
preprocess is an issue that's

00:02:01.040 --> 00:02:02.300
been around awhile.

00:02:02.300 --> 00:02:04.260
A simple Google
search proves that.

00:02:04.260 --> 00:02:06.150
I mean, when you do,
you get a plethora

00:02:06.150 --> 00:02:08.850
of tools that are already
available to help accomplish

00:02:08.850 --> 00:02:11.382
these same tasks on your behalf.

00:02:11.382 --> 00:02:13.090
Now, most of these
tools are command line

00:02:13.090 --> 00:02:15.506
driven, so that they fit into
your existing build systems,

00:02:15.506 --> 00:02:17.480
or they've been
ported to languages

00:02:17.480 --> 00:02:20.270
that are easy to adapt
to your content servers.

00:02:20.270 --> 00:02:22.480
In fact, Script
PNG will allow you

00:02:22.480 --> 00:02:24.670
to run a bunch of different
compression codecs

00:02:24.670 --> 00:02:26.060
on your image
file, and see which

00:02:26.060 --> 00:02:28.740
one gives the best
compression ratio

00:02:28.740 --> 00:02:30.809
for the right visual quality.

00:02:30.809 --> 00:02:32.600
Basically, it'll do
all the work of finding

00:02:32.600 --> 00:02:34.770
the sweet spot between
compression and quality

00:02:34.770 --> 00:02:35.527
for you.

00:02:35.527 --> 00:02:38.110
And in reality, there's lots of
situations where you shouldn't

00:02:38.110 --> 00:02:39.760
be using PNG files at all.

00:02:39.760 --> 00:02:41.560
I mean, if you don't
need transparency,

00:02:41.560 --> 00:02:44.330
a JPEG file with carefully
tuned compression settings

00:02:44.330 --> 00:02:46.030
would be much more
valuable to you.

00:02:46.030 --> 00:02:48.570
Or if you do need
transparency, consider

00:02:48.570 --> 00:02:52.660
storing the transparent channel
in a separate JPEG file, which

00:02:52.660 --> 00:02:55.390
you then combine back into the
alpha channel of your image

00:02:55.390 --> 00:02:57.849
at a load time
point in the future.

00:02:57.849 --> 00:02:59.640
This will help reduce
the overall footprint

00:02:59.640 --> 00:03:01.389
of the alpha channel,
since it can usually

00:03:01.389 --> 00:03:03.620
be compressed much
better than the RBG data

00:03:03.620 --> 00:03:05.592
by the JPEG algorithm.

00:03:05.592 --> 00:03:07.550
Of course, if you want
transparency, animation,

00:03:07.550 --> 00:03:10.870
and great compression, you
could just use the WebP format.

00:03:10.870 --> 00:03:13.070
WebP is an open source
image format from Google

00:03:13.070 --> 00:03:15.360
that supports alpha
transparency, lossless,

00:03:15.360 --> 00:03:18.440
and lossy compression,
as well as animation.

00:03:18.440 --> 00:03:20.200
The entire purpose
of this image format

00:03:20.200 --> 00:03:22.620
is to be a one stop
image format shop

00:03:22.620 --> 00:03:24.700
for developers of all sizes.

00:03:24.700 --> 00:03:27.220
And the good news is that
WebP is natively supported

00:03:27.220 --> 00:03:29.751
in Android, as of 4.2.1.

00:03:29.751 --> 00:03:32.250
Well, technically, a bit earlier
than that, but all the good

00:03:32.250 --> 00:03:35.470
bells and whistles landed
in 4.2.1, which is basically

00:03:35.470 --> 00:03:39.130
SDK 17 and higher,
accounting for 67%

00:03:39.130 --> 00:03:41.580
of the total global market
presence of Android,

00:03:41.580 --> 00:03:43.580
as of the filming
of the episode.

00:03:43.580 --> 00:03:46.227
Of course, that'll change
in like 10 minutes.

00:03:46.227 --> 00:03:48.310
And that's actually a large
portion of the market,

00:03:48.310 --> 00:03:50.220
so don't be afraid to
experiment with WebP

00:03:50.220 --> 00:03:51.950
where it makes sense to.

00:03:51.950 --> 00:03:54.830
But in truth, WebP and
lossy preprocessing steps

00:03:54.830 --> 00:03:57.080
will only help you with
the size of your image

00:03:57.080 --> 00:03:58.370
during distribution.

00:03:58.370 --> 00:04:00.420
Once the image is
loaded into memory,

00:04:00.420 --> 00:04:02.712
they're decompressed into
their regular format,

00:04:02.712 --> 00:04:04.670
so that they can be used
for rendering, meaning

00:04:04.670 --> 00:04:06.300
that all the file
compression only

00:04:06.300 --> 00:04:10.130
helps you with data transfer,
not CPU memory residency.

00:04:10.130 --> 00:04:12.620
That's a whole separate topic.

00:04:12.620 --> 00:04:14.640
But distribution
sizes are the smallest

00:04:14.640 --> 00:04:16.220
of your worries, which is
why you should check out

00:04:16.220 --> 00:04:18.510
the rest of the Android
Performance Patterns content.

00:04:18.510 --> 00:04:21.490
And don't forget to join the G+
community for other great tips

00:04:21.490 --> 00:04:23.430
from developers just like you.

00:04:23.430 --> 00:04:26.080
So keep calm, profile your
code, and always remember--

00:04:26.080 --> 00:04:28.010
perf matters.

