WEBVTT
Kind: captions
Language: en

00:00:05.840 --> 00:00:05.990
Hi.

00:00:05.990 --> 00:00:08.700
I'm Chet Haase, an engineer on
the Android team at Google.

00:00:08.700 --> 00:00:10.350
I work on graphics
and animation.

00:00:10.350 --> 00:00:12.610
And today, I want to talk
about some animation

00:00:12.610 --> 00:00:14.280
capabilities of drawables.

00:00:14.280 --> 00:00:16.570
Specifically, I want to talk
about KeyFrame Animations

00:00:16.570 --> 00:00:19.310
using the class transition
drawable.

00:00:19.310 --> 00:00:22.250
This is a way of specifying not
only what image is going

00:00:22.250 --> 00:00:24.970
to be displayed at any given
time, but how long you're

00:00:24.970 --> 00:00:27.380
going to display it before
displaying the next in a

00:00:27.380 --> 00:00:28.830
sequence of drawables
you've actually

00:00:28.830 --> 00:00:30.340
loaded into this thing.

00:00:30.340 --> 00:00:32.079
So let's take a look
at the demo.

00:00:32.079 --> 00:00:35.050
It's a fascinating demo where
we see a gray rectangle with

00:00:35.050 --> 00:00:36.230
some text on top.

00:00:36.230 --> 00:00:38.270
When I click on this, it's going
to start running this

00:00:38.270 --> 00:00:40.700
animation with the drawables
that I've preloaded.

00:00:40.700 --> 00:00:41.520
So click on it.

00:00:41.520 --> 00:00:44.140
We see frame 0, 1,
2, 3, all that.

00:00:44.140 --> 00:00:44.980
Click on it.

00:00:44.980 --> 00:00:46.315
It stops.

00:00:46.315 --> 00:00:48.040
A very exciting application.

00:00:48.040 --> 00:00:49.450
It's a little more interesting
in code.

00:00:49.450 --> 00:00:51.310
So why don't we take
a look at that now.

00:00:51.310 --> 00:00:52.890
So we see this class
called KeyFrame

00:00:52.890 --> 00:00:55.070
Animation that I created.

00:00:55.070 --> 00:00:58.180
And there's an image view in
here, which is centered in

00:00:58.180 --> 00:01:01.310
there, where we load
in these drawables.

00:01:01.310 --> 00:01:04.110
So we create an animation
drawable object, where we're

00:01:04.110 --> 00:01:05.330
going to load these things.

00:01:05.330 --> 00:01:07.470
And for each of these, we're
going to add a frame.

00:01:07.470 --> 00:01:10.100
So basically to create this
KeyFrame Animation, you're

00:01:10.100 --> 00:01:11.510
going to keep adding
frames to it.

00:01:11.510 --> 00:01:13.770
And this represents the series
of images that it's going to

00:01:13.770 --> 00:01:15.530
animate between.

00:01:15.530 --> 00:01:18.900
So we addFrame, calling
getDrawable for frame number.

00:01:18.900 --> 00:01:22.100
And we pass in I. So basically
I'm just creating these simple

00:01:22.100 --> 00:01:25.720
drawable images that have the
number embedded in them.

00:01:25.720 --> 00:01:28.120
There's some code down here to
show you how I did that.

00:01:28.120 --> 00:01:31.260
So we just create a bitmap of
a certain hard-coded size.

00:01:31.260 --> 00:01:32.070
We have canvas.

00:01:32.070 --> 00:01:33.890
We draw this grey
color into it.

00:01:33.890 --> 00:01:36.230
And then we draw the text into
it, at an appropriate place,

00:01:36.230 --> 00:01:38.280
and then return a
bitmap drawable,

00:01:38.280 --> 00:01:40.450
based on that bitmap.

00:01:40.450 --> 00:01:43.730
So for each one of those, we add
a frame to the animation

00:01:43.730 --> 00:01:45.890
drawable, set one
shot default.

00:01:45.890 --> 00:01:48.660
So we're just going to repeat
this infinitely until the

00:01:48.660 --> 00:01:50.340
thing gets clicked on again.

00:01:50.340 --> 00:01:52.080
We're going to set this
as the image drawable

00:01:52.080 --> 00:01:53.270
on that image view.

00:01:53.270 --> 00:01:55.040
And then we're going to have a
click listener and listen for

00:01:55.040 --> 00:01:56.840
the user to actually
click the image.

00:01:56.840 --> 00:01:59.210
And then we'll start the
animation running or stop it.

00:01:59.210 --> 00:02:02.430
So when they click, if the
animation is already running,

00:02:02.430 --> 00:02:03.660
we're going to call stop.

00:02:03.660 --> 00:02:05.160
Otherwise, we're going
to call start.

00:02:05.160 --> 00:02:06.750
Fairly straightforward.

00:02:06.750 --> 00:02:08.199
I'm not doing anything
interesting here.

00:02:08.199 --> 00:02:11.640
If you had something like an
image resource, with actual

00:02:11.640 --> 00:02:14.200
timings embedded in the
metadata, then you could

00:02:14.200 --> 00:02:17.950
create an animation drawable
to mimic that exactly.

00:02:17.950 --> 00:02:21.120
Here, I'm just using the same
hard-coded 300 milliseconds to

00:02:21.120 --> 00:02:24.750
animate and move on to the
next image in sequence.

00:02:24.750 --> 00:02:27.110
And that's it for animation
drawable.

00:02:27.110 --> 00:02:28.360
Thanks for tuning in.

