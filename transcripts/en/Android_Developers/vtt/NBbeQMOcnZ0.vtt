WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.935
[MUSIC PLAYING]

00:00:02.935 --> 00:00:04.310
GEORGE MOUNT:
Hello everyone, I'm

00:00:04.310 --> 00:00:07.830
George Mount from
the UI Toolkit team,

00:00:07.830 --> 00:00:12.610
and I'm here to talk to you
about Android Data Binding.

00:00:12.610 --> 00:00:17.410
Before we started this I
sought some random Android

00:00:17.410 --> 00:00:21.380
developer out there for
some help in this talk

00:00:21.380 --> 00:00:23.240
and I'd like to
introduce you to-- I'm

00:00:23.240 --> 00:00:24.420
sorry what was your name?

00:00:24.420 --> 00:00:26.320
YGIT BOYAR: Random123.

00:00:26.320 --> 00:00:28.524
GEORGE MOUNT: Random123,
why don't you come up here?

00:00:28.524 --> 00:00:31.400
[APPLAUSE]

00:00:32.460 --> 00:00:36.610
I stole-- I hope you don't mind,
I have some friends in the NSA,

00:00:36.610 --> 00:00:39.960
I looked at your laptop and
put it up here on the screen.

00:00:39.960 --> 00:00:42.180
You guys, don't tell anyone.

00:00:42.180 --> 00:00:44.230
YGIT BOYAR: My code.

00:00:44.230 --> 00:00:46.120
So, I love Android.

00:00:46.120 --> 00:00:48.130
I love that little green robot.

00:00:48.130 --> 00:00:51.580
But as a developer, some
parts I feel are terrible.

00:00:51.580 --> 00:00:54.020
I'm writing so
much code, George.

00:00:54.020 --> 00:00:55.440
It's like, why is
this like this?

00:00:55.440 --> 00:00:58.529
Why all this stupid code here?

00:00:58.529 --> 00:00:59.320
Why do I need that?

00:01:02.080 --> 00:01:06.340
Like this product image: Set
that, set this, set this.

00:01:06.340 --> 00:01:08.300
Did I study computer
science for this?

00:01:08.300 --> 00:01:09.010
I don't think so.

00:01:09.010 --> 00:01:11.254
GEORGE MOUNT: No.

00:01:11.254 --> 00:01:13.420
We've got to have something
better than that, right?

00:01:13.420 --> 00:01:14.500
YGIT BOYAR: We have
something in the box.

00:01:14.500 --> 00:01:15.430
GEORGE MOUNT: I do!

00:01:15.430 --> 00:01:17.705
Let's talk about Android
Data Binding, OK?

00:01:23.690 --> 00:01:26.740
All right, let's look at your
code in a little bit of detail.

00:01:26.740 --> 00:01:29.020
I see this set
product UI you are

00:01:29.020 --> 00:01:31.990
using calling from onCreate.

00:01:31.990 --> 00:01:34.400
That's just a pain,
let's get rid of it.

00:01:34.400 --> 00:01:35.810
We don't want that.

00:01:35.810 --> 00:01:38.560
Instead, let's look
at this onCreate.

00:01:38.560 --> 00:01:43.590
Let's, instead, just bind your
layout to this binding code

00:01:43.590 --> 00:01:45.770
and then set the
product on there

00:01:45.770 --> 00:01:49.250
and let the binding take
care of all the work.

00:01:49.250 --> 00:01:49.839
Sound good?

00:01:49.839 --> 00:01:50.505
A little better?

00:01:50.505 --> 00:01:51.880
YGIT BOYAR: Let's
see about that.

00:01:51.880 --> 00:01:53.570
I'm skeptical.

00:01:53.570 --> 00:01:55.820
GEORGE MOUNT: Let's
look at your layout.

00:01:55.820 --> 00:01:58.070
Wow, you have a lot of
ellipses in your layout, man.

00:01:58.070 --> 00:02:01.120
What's up with that?

00:02:01.120 --> 00:02:03.940
To make sure that we understand
that it's a data binding

00:02:03.940 --> 00:02:08.880
layout, first we add this
layout tag to the outside,

00:02:08.880 --> 00:02:11.950
and then we get this
variable, the prod variable,

00:02:11.950 --> 00:02:15.560
that we set in onCreate.

00:02:15.560 --> 00:02:18.030
And then we can use
that prod variable

00:02:18.030 --> 00:02:19.240
anywhere in our layout.

00:02:19.240 --> 00:02:25.480
So instead of this ID we can
now access that prod variable.

00:02:25.480 --> 00:02:28.600
So, for example, in the
source it's an image problem

00:02:28.600 --> 00:02:31.810
so we can access it directly.

00:02:31.810 --> 00:02:34.590
The product name, it's a string.

00:02:34.590 --> 00:02:36.790
And same with the description.

00:02:36.790 --> 00:02:39.580
YGIT BOYAR: There
is a bug, though.

00:02:39.580 --> 00:02:40.240
There you go.

00:02:40.240 --> 00:02:43.500
You set a price, it's a crash.

00:02:43.500 --> 00:02:44.720
GEORGE MOUNT: Shoot.

00:02:44.720 --> 00:02:49.300
All right, well our price is--
if you look at the code there

00:02:49.300 --> 00:02:50.840
it's a resource, right?

00:02:50.840 --> 00:02:55.156
And our resource is a string
and it's doing a format.

00:02:55.156 --> 00:02:57.030
We should do better in
our expression, right?

00:02:57.030 --> 00:02:58.030
YGIT BOYAR: I expect so.

00:02:58.030 --> 00:02:59.730
GEORGE MOUNT: I think so.

00:02:59.730 --> 00:03:03.900
One good thing is that now
we can access our layout--

00:03:03.900 --> 00:03:05.900
our expression stuff
directly in our layout.

00:03:05.900 --> 00:03:07.941
So we can have this access
to the string resource

00:03:07.941 --> 00:03:09.730
right there, and
pass a parameter.

00:03:09.730 --> 00:03:12.714
We're passing the product price
as a parameter in our resource,

00:03:12.714 --> 00:03:14.390
in our layout.

00:03:14.390 --> 00:03:15.484
Pretty cool, huh?

00:03:18.244 --> 00:03:19.910
YGIT BOYAR: But in
my application things

00:03:19.910 --> 00:03:21.478
are not always starting, George.

00:03:21.478 --> 00:03:23.280
I'm cool with your demo.

00:03:23.280 --> 00:03:25.160
But I have this
application, sometimes

00:03:25.160 --> 00:03:26.910
I have a different layout.

00:03:26.910 --> 00:03:27.860
Yes, there you go.

00:03:27.860 --> 00:03:28.930
It might be on sale.

00:03:28.930 --> 00:03:30.250
How do I do this?

00:03:30.250 --> 00:03:32.802
I need to write more
code to do this.

00:03:32.802 --> 00:03:34.510
GEORGE MOUNT: Whine,
whine, whine, whine.

00:03:34.510 --> 00:03:37.510
You want everything, don't you?

00:03:37.510 --> 00:03:39.810
We allow you,
inside your layout,

00:03:39.810 --> 00:03:41.520
to have some little
dynamism in there.

00:03:41.520 --> 00:03:45.300
You can have an expression
that says, if you're on sale

00:03:45.300 --> 00:03:47.700
then show this on sale
sign, and if you're on sale

00:03:47.700 --> 00:03:50.566
you might also have a
different color for your price.

00:03:50.566 --> 00:03:53.190
YGIT BOYAR: Your example is not
very realistic because my price

00:03:53.190 --> 00:03:55.460
changes, we're a
dynamic website.

00:03:55.460 --> 00:03:56.940
So I do dynamic pricing.

00:03:56.940 --> 00:03:57.930
How you handle that?

00:03:57.930 --> 00:03:59.930
GEORGE MOUNT: Well, you
have to at least tell us

00:03:59.930 --> 00:04:01.020
when it changes.

00:04:01.020 --> 00:04:02.270
So let's look at your product.

00:04:02.270 --> 00:04:07.850
Your product has a price
and name and image.

00:04:07.850 --> 00:04:10.400
You have to just extend
the base observable class,

00:04:10.400 --> 00:04:12.320
and then we mark
the things that you

00:04:12.320 --> 00:04:15.084
can change that are going
to change as bindable.

00:04:15.084 --> 00:04:16.959
And then you have to
tell us when it changes.

00:04:16.959 --> 00:04:20.519
So we have this notify property
change and the bindable part--

00:04:20.519 --> 00:04:22.710
YGIT BOYAR: But my classes
extend the base class.

00:04:22.710 --> 00:04:26.350
I can't extend your class,
that is not possible.

00:04:26.350 --> 00:04:27.800
GEORGE MOUNT: Come on!

00:04:27.800 --> 00:04:29.460
All right, all right, fine.

00:04:29.460 --> 00:04:32.190
We can use an observable
interface instead.

00:04:32.190 --> 00:04:32.924
Is that better?

00:04:32.924 --> 00:04:34.590
YGIT BOYAR: Maybe,
let's see about that.

00:04:34.590 --> 00:04:35.830
GEORGE MOUNT: We'll give you
a little bit of help here.

00:04:35.830 --> 00:04:38.110
We'll give you this
property change registry

00:04:38.110 --> 00:04:41.600
so you can just tell
us when that happens.

00:04:41.600 --> 00:04:43.580
YGIT BOYAR: Yeah,
that's good enough.

00:04:43.580 --> 00:04:45.121
GEORGE MOUNT: That's
a little better.

00:04:49.550 --> 00:04:51.430
This is a little easier.

00:04:51.430 --> 00:04:53.930
It would be nice if we
could just have properties

00:04:53.930 --> 00:04:55.730
that are themselves observable.

00:04:55.730 --> 00:04:57.525
Wouldn't it be?

00:04:57.525 --> 00:04:59.650
Here you can access them
as if it was just the same

00:04:59.650 --> 00:05:01.590
with the same expression.

00:05:01.590 --> 00:05:03.850
You just say your
prod.image, and even

00:05:03.850 --> 00:05:07.772
though it's not a
drawable itself we

00:05:07.772 --> 00:05:08.980
pretend that it's a drawable.

00:05:08.980 --> 00:05:12.330
It's an observable field
and it's observable double.

00:05:12.330 --> 00:05:13.690
Double for price?

00:05:13.690 --> 00:05:15.440
YGIT BOYAR: Did you
just double the price?

00:05:15.440 --> 00:05:16.830
[LAUGHS]

00:05:16.830 --> 00:05:19.371
GEORGE MOUNT: You shouldn't be
using doubles for your prices.

00:05:20.990 --> 00:05:23.090
Or, if you have
more blobby data,

00:05:23.090 --> 00:05:25.012
like let's imagine
coming from JSON

00:05:25.012 --> 00:05:26.470
and you're still
doing development,

00:05:26.470 --> 00:05:28.011
everything's up in
the air, you don't

00:05:28.011 --> 00:05:31.210
know what it's going to
be like you can use a map.

00:05:31.210 --> 00:05:34.670
And that's pretty
nice for prototyping.

00:05:34.670 --> 00:05:35.920
YGIT BOYAR: Seems interesting.

00:05:35.920 --> 00:05:38.170
How about multiple layouts?

00:05:38.170 --> 00:05:40.470
GEORGE MOUNT: Multiple layouts?

00:05:40.470 --> 00:05:44.240
I guess you have two
different variables

00:05:44.240 --> 00:05:45.196
and different layouts.

00:05:45.196 --> 00:05:47.220
YGIT BOYAR: So I like
two activities now?

00:05:47.220 --> 00:05:47.710
GEORGE MOUNT: I hope not.

00:05:47.710 --> 00:05:49.335
Boy, that would be
a pain, wouldn't it?

00:05:50.989 --> 00:05:53.030
In one you're setting a
product and the other one

00:05:53.030 --> 00:05:55.290
you're setting the product
list, it's really a pain.

00:05:55.290 --> 00:05:56.790
You don't want to
have to do if it's

00:05:56.790 --> 00:06:01.440
on the left-- landscape do this,
and if your portrait do this.

00:06:01.440 --> 00:06:06.190
So instead what we do is we
merge all of your variables

00:06:06.190 --> 00:06:09.470
and we produce one that has the
summation of all the variables

00:06:09.470 --> 00:06:13.230
that you need, and the
binding will just say,

00:06:13.230 --> 00:06:15.270
"Oh, I only need
these what variables,

00:06:15.270 --> 00:06:17.840
and I'll use those in my layout.

00:06:17.840 --> 00:06:19.980
The rest of them I'll
just not use at all."

00:06:19.980 --> 00:06:22.550
You just set it and
forget it, it's great.

00:06:22.550 --> 00:06:25.370
Just like Ronco, right?

00:06:25.370 --> 00:06:27.150
YGIT BOYAR: That seems good.

00:06:27.150 --> 00:06:30.625
Talk about the down sides.

00:06:30.625 --> 00:06:32.166
GEORGE MOUNT: But
wait, there's more.

00:06:35.980 --> 00:06:38.200
You don't need to do any
more findViewByID() right?

00:06:38.200 --> 00:06:40.430
Because now all your
expressions are right there

00:06:40.430 --> 00:06:41.493
in your layout file.

00:06:41.493 --> 00:06:43.890
YGIT BOYAR: Yeah
but I run animations

00:06:43.890 --> 00:06:46.406
and also put them
into the data binding.

00:06:46.406 --> 00:06:48.220
It seems weird.

00:06:48.220 --> 00:06:50.900
GEORGE MOUNT: Well, OK.

00:06:50.900 --> 00:06:52.670
You still don't
need findViewByID().

00:06:52.670 --> 00:06:59.170
If you have a layout a view with
a tag ID in it, then what we do

00:06:59.170 --> 00:07:01.760
is we automatically
extract that view

00:07:01.760 --> 00:07:04.954
and stick it as a public
static-- final field

00:07:04.954 --> 00:07:05.620
in your binding.

00:07:05.620 --> 00:07:07.710
So you can access it
directly from binding.

00:07:07.710 --> 00:07:08.330
YGIT BOYAR: That sounds good.

00:07:08.330 --> 00:07:10.100
GEORGE MOUNT: You really don't
need findViewByID() anymore.

00:07:10.100 --> 00:07:12.182
YGIT BOYAR: I don't
write that code.

00:07:12.182 --> 00:07:15.200
GEORGE MOUNT: That stuff
is a pain, isn't it?

00:07:15.200 --> 00:07:19.100
Also, we have these
automatic properties.

00:07:19.100 --> 00:07:21.140
For example, here is
this DrawerLayout,

00:07:21.140 --> 00:07:25.880
and there's this is really
nice setter-- setScrimColor.

00:07:25.880 --> 00:07:29.510
Wouldn't it be nice to
be able to just tag it

00:07:29.510 --> 00:07:34.190
so you could just set it right
there in your layout file?

00:07:34.190 --> 00:07:36.410
There's no attribute for that.

00:07:36.410 --> 00:07:41.540
Well, we can just kind of sneak
in and say, "Oh, setScrimColor.

00:07:41.540 --> 00:07:43.700
That looks a lot like
a scrim color, right?

00:07:43.700 --> 00:07:45.750
Just to set it right
in front of it."

00:07:45.750 --> 00:07:49.670
So we just look at it
say, "setScrimColor."

00:07:49.670 --> 00:07:51.170
Automatically we
just say, OK if you

00:07:51.170 --> 00:07:55.990
have this thing with a data
binding expression in it,

00:07:55.990 --> 00:07:59.830
then we will look for the set
center with it, that takes

00:07:59.830 --> 00:08:01.770
of the same type of parameter.

00:08:01.770 --> 00:08:04.100
So in this case the
color scrim is an int,

00:08:04.100 --> 00:08:05.766
so we say setScrimColor.

00:08:05.766 --> 00:08:06.890
We know exactly what it is.

00:08:06.890 --> 00:08:08.473
It's just automatic
for you, you don't

00:08:08.473 --> 00:08:12.450
have to create this new
attribute for yourself.

00:08:12.450 --> 00:08:16.560
And everyone's
favorite on click.

00:08:16.560 --> 00:08:18.930
Pretty awesome.

00:08:18.930 --> 00:08:19.920
YGIT BOYAR: Infamous.

00:08:19.920 --> 00:08:21.503
GEORGE MOUNT: So we
have this as well,

00:08:21.503 --> 00:08:25.260
we can do onClick
with expressions.

00:08:25.260 --> 00:08:27.460
Pretty nice.

00:08:27.460 --> 00:08:29.570
YGIT BOYAR: How does it work?

00:08:29.570 --> 00:08:32.892
GEORGE MOUNT: I think we'll
talk about that in a little bit.

00:08:32.892 --> 00:08:34.600
We have all the other
event handlers too,

00:08:34.600 --> 00:08:38.250
like onLongClick or onItems.

00:08:38.250 --> 00:08:40.620
Whatever, all those things.

00:08:40.620 --> 00:08:43.449
onTextChanged is a
real interesting one,

00:08:43.449 --> 00:08:44.990
because it's a text
watcher and there

00:08:44.990 --> 00:08:48.075
are three handlers on there.

00:08:48.075 --> 00:08:50.450
You can just set one of them,
two of them, three of them.

00:08:50.450 --> 00:08:53.710
Whatever you want,
it's pretty nice.

00:08:53.710 --> 00:08:54.720
How much would you pay?

00:08:54.720 --> 00:08:56.740
How much [INAUDIBLE] performance
you would pay for this?

00:08:56.740 --> 00:08:57.380
20%?

00:08:57.380 --> 00:08:59.710
YGIT BOYAR: No, of course not.

00:08:59.710 --> 00:09:01.524
GEORGE MOUNT: 10%?

00:09:01.524 --> 00:09:05.177
YGIT BOYAR: Uh, maybe.

00:09:05.177 --> 00:09:06.510
GEORGE MOUNT: How about nothing?

00:09:06.510 --> 00:09:09.900
YGIT BOYAR: Wow, no way.

00:09:09.900 --> 00:09:11.857
He's lying.

00:09:11.857 --> 00:09:13.440
GEORGE MOUNT: It
might not be nothing,

00:09:13.440 --> 00:09:19.070
depending on how optimal your
code is, but it's pretty good.

00:09:19.070 --> 00:09:22.738
I want to bring up my
co-conspirator in this.

00:09:22.738 --> 00:09:26.940
Let me introduce
you to Ygit Boyar.

00:09:26.940 --> 00:09:29.940
[APPLAUSE]

00:09:31.096 --> 00:09:32.221
YGIT BOYAR: Hey, everybody.

00:09:32.221 --> 00:09:34.331
I'm Ygit from the
UI Toolkit Team,

00:09:34.331 --> 00:09:36.600
I work on data
binding with George.

00:09:36.600 --> 00:09:39.560
I'm going to go into some
details on how it actually

00:09:39.560 --> 00:09:41.800
works.

00:09:41.800 --> 00:09:44.009
As George showed
before the layouts

00:09:44.009 --> 00:09:45.300
are a little bit different now.

00:09:45.300 --> 00:09:47.470
You have a layout
tag in the root.

00:09:47.470 --> 00:09:50.020
This tells us it's
data binding layout.

00:09:50.020 --> 00:09:53.620
And we pass it into
the layout grinder,

00:09:53.620 --> 00:09:57.270
which processes your layouts,
and then explores a new layout

00:09:57.270 --> 00:09:59.560
that the older Android
versions can understand,

00:09:59.560 --> 00:10:01.290
which doesn't add a
layout tag anymore,

00:10:01.290 --> 00:10:04.040
remove the namespaces
to your first child.

00:10:04.040 --> 00:10:06.250
And it also has
some sub-products

00:10:06.250 --> 00:10:08.830
from the processing,
it creates a class,

00:10:08.830 --> 00:10:11.385
it creates all these public
final fields for your views

00:10:11.385 --> 00:10:16.510
with IDs, and it creates the
setters for your variables.

00:10:16.510 --> 00:10:19.970
Going into detail, this is
what actually is happening.

00:10:19.970 --> 00:10:22.480
We move that namespace
to her first child,

00:10:22.480 --> 00:10:23.886
get rid of the layout tag.

00:10:23.886 --> 00:10:25.510
And this is done
while your application

00:10:25.510 --> 00:10:26.520
is compiled by Gradle.

00:10:29.210 --> 00:10:33.410
And then we remove your
expressions add some tag there

00:10:33.410 --> 00:10:36.260
so we can find those
[INAUDIBLE] afterwards.

00:10:36.260 --> 00:10:38.950
If you had an ID we would
keep it there, and also

00:10:38.950 --> 00:10:41.357
create the vies.

00:10:41.357 --> 00:10:43.690
As you can see there directly
matching this public file.

00:10:43.690 --> 00:10:46.210
You don't need to cast anymore
because we know what type it

00:10:46.210 --> 00:10:48.770
is at compile time, so we
just create the variable

00:10:48.770 --> 00:10:49.560
with that type.

00:10:53.000 --> 00:10:54.830
So, how do we do this?

00:10:54.830 --> 00:10:56.710
One important aspect
of data binding

00:10:56.710 --> 00:10:59.280
is that almost everything
is done at compile time.

00:10:59.280 --> 00:11:02.060
So when we see an
expression like this we--

00:11:02.060 --> 00:11:04.800
while your Java code
is being compiled,

00:11:04.800 --> 00:11:07.430
we go check, "OK,
this product, we

00:11:07.430 --> 00:11:09.490
know what type it is
because you told us."

00:11:09.490 --> 00:11:13.381
Now we say, "OK product is
an image field or an image

00:11:13.381 --> 00:11:13.880
getter."

00:11:13.880 --> 00:11:17.610
We will look for these things.

00:11:17.610 --> 00:11:20.160
OK, here we found there
is a drawable returning

00:11:20.160 --> 00:11:21.135
getImage method.

00:11:21.135 --> 00:11:23.830
Then we check, OK,
I have a drawable,

00:11:23.830 --> 00:11:25.240
there is a source attributes.

00:11:25.240 --> 00:11:27.990
Can I set this drawable
to the source attribute?

00:11:27.990 --> 00:11:30.920
And then we call
set source there.

00:11:30.920 --> 00:11:33.030
The cool part is, we
don't need any reflection

00:11:33.030 --> 00:11:35.240
to do any of these
things because we do it

00:11:35.240 --> 00:11:36.200
at compile time.

00:11:36.200 --> 00:11:37.790
So at runtime it is
equal to the code

00:11:37.790 --> 00:11:39.260
that you would write yourself.

00:11:39.260 --> 00:11:40.180
GEORGE MOUNT: Hey wait
a second, I thought

00:11:40.180 --> 00:11:41.960
all databyte [INAUDIBLE]
frameworks needed reflection,

00:11:41.960 --> 00:11:42.492
don't they?

00:11:42.492 --> 00:11:43.700
YGIT BOYAR: Not the new ones.

00:11:43.700 --> 00:11:44.825
GEORGE MOUNT: Not this one?

00:11:44.825 --> 00:11:46.810
Oh, nice.

00:11:46.810 --> 00:11:49.490
YGIT BOYAR: So for
example-- but is not

00:11:49.490 --> 00:11:51.740
true that the
examples are simple.

00:11:51.740 --> 00:11:55.520
So you can say I have my
variable, said to this text.

00:11:55.520 --> 00:11:57.670
Correct, that's straightforward.

00:11:57.670 --> 00:11:59.670
It sets the user of that image.

00:11:59.670 --> 00:12:00.600
The source.

00:12:00.600 --> 00:12:05.091
I call setSrc which I said
before, which does not exist.

00:12:05.091 --> 00:12:06.840
So this is a problem
because the ImageView

00:12:06.840 --> 00:12:08.560
doesn't have a setSrc method.

00:12:08.560 --> 00:12:12.096
It has a source attribute, but
as a setImageDrawable method,

00:12:12.096 --> 00:12:13.720
[INAUDIBLE] you can
pass that drawable.

00:12:13.720 --> 00:12:16.450
How does data binding
know about this?

00:12:16.450 --> 00:12:18.890
It's done by annotation.

00:12:18.890 --> 00:12:22.680
So we had this binding method
annotation which-- you can say,

00:12:22.680 --> 00:12:26.480
OK, this is a binding annotation
for a type class ImageView

00:12:26.480 --> 00:12:29.110
that attribute a source
and the method is

00:12:29.110 --> 00:12:30.690
called setImageDrawable.

00:12:30.690 --> 00:12:34.030
So we know that at the resource
maps are setImageDrawable,

00:12:34.030 --> 00:12:37.710
if the pass parameters
match we can use that method

00:12:37.710 --> 00:12:38.670
to run the binding.

00:12:38.670 --> 00:12:41.650
Again, this is done
in the compile time.

00:12:41.650 --> 00:12:43.830
What we generate
is the same code

00:12:43.830 --> 00:12:47.290
that you will do at
setImageDrawable.

00:12:47.290 --> 00:12:48.480
[INAUDIBLE] event handler.

00:12:48.480 --> 00:12:53.270
These are a little tricky
because unfortunately Java 7

00:12:53.270 --> 00:12:57.310
didn't have any function
parameters, you cannot do them.

00:12:57.310 --> 00:13:00.900
So the way this
works is, we know

00:13:00.900 --> 00:13:03.040
there's a binding method
that says onClick.

00:13:03.040 --> 00:13:05.430
Method setOnClickListner.

00:13:05.430 --> 00:13:07.770
OK, what does the
setOnClickListener expect?

00:13:07.770 --> 00:13:11.300
It expects a [INAUDIBLE]
.onClickListener

00:13:11.300 --> 00:13:13.370
that's an interface or
[INAUDIBLE] and then

00:13:13.370 --> 00:13:16.180
the interface has one method.

00:13:16.180 --> 00:13:20.000
Now if you look for
that handler.clicked

00:13:20.000 --> 00:13:22.900
matches that one method.

00:13:22.900 --> 00:13:25.242
Going into the
details, we saw this.

00:13:27.910 --> 00:13:32.720
Nice, that the handler.clicked
method receives a view

00:13:32.720 --> 00:13:35.900
and this matches so we
create the interface for you

00:13:35.900 --> 00:13:39.960
so that Java is happy,
and you're going to tunnel

00:13:39.960 --> 00:13:43.330
those calls to our handler.

00:13:43.330 --> 00:13:45.170
So you can see
everything is matching.

00:13:45.170 --> 00:13:47.540
It just works.

00:13:47.540 --> 00:13:49.734
GEORGE MOUNT: You're
stealing my thunder here.

00:13:49.734 --> 00:13:51.150
Let's talk about
binding adapters.

00:13:51.150 --> 00:13:53.066
Binding adapters are
probably the coolest part

00:13:53.066 --> 00:13:54.611
about data binding.

00:13:54.611 --> 00:13:56.360
So let's talk about
something a little bit

00:13:56.360 --> 00:13:57.700
more complicated than setText.

00:13:57.700 --> 00:14:00.120
SetText was a nice
automatic variable.

00:14:00.120 --> 00:14:02.210
You can just setText,
it takes in a string--

00:14:02.210 --> 00:14:05.450
or, actually to setText
takes in an char sequence

00:14:05.450 --> 00:14:07.087
but it's pretty close.

00:14:07.087 --> 00:14:08.920
Let's talk about something
more interesting.

00:14:08.920 --> 00:14:12.930
We have this ImageView
but we have a large URL,

00:14:12.930 --> 00:14:14.460
large image data coming down.

00:14:14.460 --> 00:14:17.030
And if we do this,
what's going to happen--

00:14:17.030 --> 00:14:18.660
we don't want this
on the UI thread.

00:14:18.660 --> 00:14:20.618
It's going to load
everything on the UI thread.

00:14:20.618 --> 00:14:22.970
That that's pretty
lousy, I don't like that.

00:14:22.970 --> 00:14:24.820
So instead, I'm
going to use a tool.

00:14:24.820 --> 00:14:26.370
How about Picasso?

00:14:26.370 --> 00:14:26.870
Glyde?

00:14:26.870 --> 00:14:28.700
What's your favorite?

00:14:28.700 --> 00:14:31.439
YGIT BOYAR: I'd
rather not say that.

00:14:31.439 --> 00:14:32.980
GEORGE MOUNT: In
this example whoever

00:14:32.980 --> 00:14:35.229
it was who wrote this
expression tried to use Picasso,

00:14:35.229 --> 00:14:39.550
but my goodness, Picasso
with context-- that's

00:14:39.550 --> 00:14:42.270
a heck of an expression,
and into what do you--

00:14:42.270 --> 00:14:44.690
I don't know.

00:14:44.690 --> 00:14:47.000
That's lousy.

00:14:47.000 --> 00:14:48.880
I don't like this.

00:14:48.880 --> 00:14:51.150
We don't want to see that
in our expressions anyway.

00:14:51.150 --> 00:14:53.002
So let's do something
else simpler.

00:14:53.002 --> 00:14:55.460
Instead, what we're going to
do is create a binding adapter

00:14:55.460 --> 00:14:57.610
and we're going to use
the Android source.

00:14:57.610 --> 00:15:00.180
We're going to override
what the default behavior is

00:15:00.180 --> 00:15:01.359
with our binding adapter.

00:15:01.359 --> 00:15:02.900
And instead of doing
the normal stuff

00:15:02.900 --> 00:15:03.920
we're going to try to
do something special.

00:15:03.920 --> 00:15:06.300
So what we're going to do
is set this binding adapter,

00:15:06.300 --> 00:15:09.680
and of course this is an
attribute, an annotation

00:15:09.680 --> 00:15:12.190
on our static method here.

00:15:12.190 --> 00:15:14.220
And it could be any
static method anywhere.

00:15:14.220 --> 00:15:16.640
And we're just going to
look for that static method

00:15:16.640 --> 00:15:19.370
with the attribute,
the annotation.

00:15:19.370 --> 00:15:23.250
And here we're going to look for
something that is an ImageView

00:15:23.250 --> 00:15:25.850
and it takes in a
string as a parameter.

00:15:25.850 --> 00:15:29.690
And now what we can do is do
anything we want in that class.

00:15:29.690 --> 00:15:32.650
So we have this nice Picasso.

00:15:32.650 --> 00:15:34.770
We can use their
context from the view.

00:15:34.770 --> 00:15:37.210
We can load the image
in there, and it

00:15:37.210 --> 00:15:38.980
can be done all
off the UI thread,

00:15:38.980 --> 00:15:40.960
and it's all kind of magic.

00:15:40.960 --> 00:15:43.250
Now you can do image source
is equal to some value,

00:15:43.250 --> 00:15:45.380
it's great.

00:15:45.380 --> 00:15:47.630
But what if you want to do
something more interesting.

00:15:47.630 --> 00:15:50.260
Let's imagine you want
to have a placeholder

00:15:50.260 --> 00:15:51.130
for your annotation.

00:15:51.130 --> 00:15:54.620
Now you have to do this with
Picasso in the same call,

00:15:54.620 --> 00:15:57.920
you can't just say,
"in one call it's

00:15:57.920 --> 00:15:59.890
called the load in the
other one you do--"

00:15:59.890 --> 00:16:01.306
so what we're going
to do is we're

00:16:01.306 --> 00:16:04.710
going to merge it all together
into one binding adapter.

00:16:04.710 --> 00:16:07.340
This one takes two
kinds of attributes,

00:16:07.340 --> 00:16:09.650
and they can work together.

00:16:09.650 --> 00:16:11.430
You just take the
parameters in the order

00:16:11.430 --> 00:16:14.910
that you've assigned
them in the annotation,

00:16:14.910 --> 00:16:17.660
and now you can do whatever
you want in the method.

00:16:17.660 --> 00:16:20.310
In this case we're going
to load the URL off-thread,

00:16:20.310 --> 00:16:25.230
and in the meantime we'll
load this placeholder image.

00:16:25.230 --> 00:16:30.300
[APPLAUSE]

00:16:30.300 --> 00:16:33.020
Now sometimes you want to
have some kind of instance

00:16:33.020 --> 00:16:35.410
information in your adapter.

00:16:35.410 --> 00:16:38.110
And before we were
using static methods.

00:16:38.110 --> 00:16:41.545
But what happens if you
want to use an instance?

00:16:41.545 --> 00:16:42.920
With the static
method it's easy.

00:16:42.920 --> 00:16:43.711
We know what to do.

00:16:43.711 --> 00:16:47.670
We can call it directly just
my class static method call.

00:16:47.670 --> 00:16:50.490
Very simple to do in the
generated binding class

00:16:50.490 --> 00:16:51.070
that we have.

00:16:51.070 --> 00:16:53.000
YGIT BOYAR: How do
you get the instance?

00:16:53.000 --> 00:16:58.480
GEORGE MOUNT: So we take
out the static what happens?

00:16:58.480 --> 00:17:00.720
Where does that
instance come from?

00:17:00.720 --> 00:17:02.240
Some kind of instance.

00:17:02.240 --> 00:17:06.990
So what we're going to do
is-- the binding framework

00:17:06.990 --> 00:17:09.550
is going to look and see, "Oh,
this is an instance binding

00:17:09.550 --> 00:17:10.099
adapter.

00:17:10.099 --> 00:17:13.010
We need to generate this
method on this class, this data

00:17:13.010 --> 00:17:14.298
binding component class."

00:17:14.298 --> 00:17:15.839
And this method is
going to be called

00:17:15.839 --> 00:17:21.180
get whatever the name of
your adapter class is.

00:17:21.180 --> 00:17:25.280
And now it's your
job to implement

00:17:25.280 --> 00:17:26.317
to implement this class.

00:17:26.317 --> 00:17:28.150
So you've been with
this class, and then you

00:17:28.150 --> 00:17:30.300
call setDefaultComponent on it.

00:17:30.300 --> 00:17:31.930
Now, there's also
ones if you want

00:17:31.930 --> 00:17:34.080
to load a specific
implementation

00:17:34.080 --> 00:17:37.045
for a specific
binding if you want.

00:17:37.045 --> 00:17:38.420
But most of the
time you probably

00:17:38.420 --> 00:17:41.660
want just the default component
that you're going to load.

00:17:41.660 --> 00:17:45.170
Then we know exactly
what instance

00:17:45.170 --> 00:17:51.020
we're going to load for
your binding adapter.

00:17:51.020 --> 00:17:52.652
Very nice.

00:17:52.652 --> 00:17:54.360
Now you can also do
this with components.

00:17:54.360 --> 00:17:56.068
Now when you're doing
it with a component

00:17:56.068 --> 00:17:58.850
if you have some kind of
state you want to get.

00:17:58.850 --> 00:18:02.130
Imagine this is a cache
for your images, right?

00:18:02.130 --> 00:18:05.330
So you want to load the image
from your cache first, and then

00:18:05.330 --> 00:18:08.040
possibly load off-thread.

00:18:08.040 --> 00:18:12.850
In this case we need to
go what that instance is.

00:18:12.850 --> 00:18:15.042
Where we're going to pass
it as a static method,

00:18:15.042 --> 00:18:16.750
but we want to have
some kind of instance

00:18:16.750 --> 00:18:17.940
that we're going to
share around to all

00:18:17.940 --> 00:18:19.570
the different binding adapters.

00:18:19.570 --> 00:18:25.280
So in this case we need to
know what that state is.

00:18:25.280 --> 00:18:28.220
So in this case you implement
your data binding component

00:18:28.220 --> 00:18:30.840
but you add your
own method to it.

00:18:30.840 --> 00:18:31.440
OK?

00:18:31.440 --> 00:18:32.600
So when you had your
own method to it,

00:18:32.600 --> 00:18:33.950
we don't know anything
about this method,

00:18:33.950 --> 00:18:35.780
this is something
that you know about.

00:18:35.780 --> 00:18:38.590
But we're going to pass it to
you as the first parameter,

00:18:38.590 --> 00:18:40.330
if you'd like.

00:18:40.330 --> 00:18:42.560
Now, you can do
whatever you want.

00:18:42.560 --> 00:18:48.100
So we have our own cache here
that we can load our data from.

00:18:48.100 --> 00:18:51.099
Let's talk a little bit
about best practices.

00:18:51.099 --> 00:18:52.890
YGIT BOYAR: Let's go
through some examples.

00:18:52.890 --> 00:18:53.720
GEORGE MOUNT: They say
practice makes perfect.

00:18:53.720 --> 00:18:54.125
YGIT BOYAR: Practice.

00:18:54.125 --> 00:18:55.350
GEORGE MOUNT: Practice, man.

00:18:55.350 --> 00:18:57.150
YGIT BOYAR: [LAUGHS]
Internal joke, sorry.

00:19:00.220 --> 00:19:03.390
Let's look at some examples.

00:19:03.390 --> 00:19:07.600
Data binding allows you to write
some explorations in the XML.

00:19:07.600 --> 00:19:11.630
That means I can just send a
web service call from my XML,

00:19:11.630 --> 00:19:12.130
right?

00:19:12.130 --> 00:19:12.590
Why not?

00:19:12.590 --> 00:19:13.631
There's a click listener.

00:19:13.631 --> 00:19:14.460
There's an API.

00:19:14.460 --> 00:19:16.210
Why should I not do this?

00:19:16.210 --> 00:19:17.170
You should not do this.

00:19:17.170 --> 00:19:20.950
If you do this, your
application will break.

00:19:20.950 --> 00:19:22.540
This is not what
data binding is for.

00:19:22.540 --> 00:19:26.720
Data binding and is to put data
into your UI from your model.

00:19:26.720 --> 00:19:29.132
So instead of doing
that, have a call

00:19:29.132 --> 00:19:33.080
back, have a presenter,
whatever model you prefer.

00:19:33.080 --> 00:19:36.210
Just [INAUDIBLE]
the call to the Java

00:19:36.210 --> 00:19:37.850
when you do the real thing.

00:19:37.850 --> 00:19:40.260
Don't try to do business
logic tree here or something.

00:19:40.260 --> 00:19:43.430
Its not going to work.

00:19:43.430 --> 00:19:47.290
Another example in a
good way is that, I

00:19:47.290 --> 00:19:52.200
want to change this drawable
based on the users [INAUDIBLE]

00:19:52.200 --> 00:19:53.453
just reacted.

00:19:53.453 --> 00:19:55.180
In that case it's fine.

00:19:55.180 --> 00:19:58.370
Just what the eye sees is
a super simple expression.

00:19:58.370 --> 00:20:02.370
That's OK, because here's an
advantage, when I look at this

00:20:02.370 --> 00:20:05.122
here it's OK, I know that
if the age is this UI

00:20:05.122 --> 00:20:06.510
shows this drawable.

00:20:06.510 --> 00:20:08.370
Otherwise the other
one is very clear,

00:20:08.370 --> 00:20:10.740
it makes my example
better, my code cleaner.

00:20:10.740 --> 00:20:11.990
So this is OK.

00:20:11.990 --> 00:20:13.950
So you have to decide
it for yourself.

00:20:13.950 --> 00:20:19.070
Well, if you do something like
this, [INAUDIBLE] redact it.

00:20:19.070 --> 00:20:21.410
I don't understand what this
code is doing when I look

00:20:21.410 --> 00:20:23.050
at it, then there's a problem.

00:20:23.050 --> 00:20:25.190
It doesn't make sense.

00:20:25.190 --> 00:20:28.190
Instead of doing it,
there's something simpler.

00:20:28.190 --> 00:20:31.730
If the age is this, the
displayName otherwise redacted.

00:20:31.730 --> 00:20:34.820
And the displayName
comes from your model.

00:20:34.820 --> 00:20:37.810
If your object doesn't
really have that field, which

00:20:37.810 --> 00:20:40.287
it doesn't in this case,
you create a view model

00:20:40.287 --> 00:20:41.870
that provides that
information, or you

00:20:41.870 --> 00:20:44.100
can make the variable
for your binding layout.

00:20:44.100 --> 00:20:46.829
GEORGE MOUNT: I think you took
that from my code, I'm sorry.

00:20:46.829 --> 00:20:48.120
YGIT BOYAR: It's not very good.

00:20:48.120 --> 00:20:49.790
He got data binding wrong.

00:20:49.790 --> 00:20:50.540
GEORGE MOUNT: Hey!

00:20:53.900 --> 00:20:55.930
YGIT BOYAR: So if
your real model

00:20:55.930 --> 00:20:58.230
can display [INAUDIBLE]
in this example

00:20:58.230 --> 00:21:01.050
we make this
displayName bindable.

00:21:01.050 --> 00:21:04.410
In return, data binding is
going to generate this BR clause

00:21:04.410 --> 00:21:07.430
similar to the R clause,
but for bindable things.

00:21:07.430 --> 00:21:10.700
And when the user's last name
is set you can [INAUDIBLE]

00:21:10.700 --> 00:21:12.340
that it has changed
and data binding

00:21:12.340 --> 00:21:13.812
will keep the UI up to date.

00:21:18.232 --> 00:21:21.410
If you have value objects and
you're directly showing them

00:21:21.410 --> 00:21:23.220
in your UI, that's
okay to set them

00:21:23.220 --> 00:21:26.860
as variables in your
layout, and set [INAUDIBLE]

00:21:26.860 --> 00:21:28.736
your generated binding class.

00:21:28.736 --> 00:21:31.110
But if this is not the case,
if you need more information

00:21:31.110 --> 00:21:34.390
consider using a view model
where you put this information

00:21:34.390 --> 00:21:37.730
there, and you can just use
these observable convenience

00:21:37.730 --> 00:21:40.120
fields we provide
your view models.

00:21:40.120 --> 00:21:41.870
You just set them
and data binding

00:21:41.870 --> 00:21:44.950
makes sure of that they
are visible on the UI.

00:21:44.950 --> 00:21:48.000
By the way, observables
like those convenience

00:21:48.000 --> 00:21:50.000
observable classes
we provide, they're

00:21:50.000 --> 00:21:52.690
nice if there are very few.

00:21:52.690 --> 00:21:55.550
If you tried to make your
value objects with those things

00:21:55.550 --> 00:21:58.730
you're just using a lot of
my memory for no reason.

00:21:58.730 --> 00:21:59.380
Don't do that.

00:21:59.380 --> 00:22:01.420
But they're nice if
you have a view model

00:22:01.420 --> 00:22:03.310
or you could have
them in your activity

00:22:03.310 --> 00:22:06.770
if there's something you
want to easily control.

00:22:06.770 --> 00:22:09.060
So there's other
examples where you

00:22:09.060 --> 00:22:12.620
write the view model
extending the base observable

00:22:12.620 --> 00:22:15.810
class because you don't want to
use those convenient classes.

00:22:15.810 --> 00:22:20.680
The same example here, when you
the data changes you notify,

00:22:20.680 --> 00:22:24.480
and then data binding
takes care of this.

00:22:24.480 --> 00:22:27.060
Or you can implement
observable interface,

00:22:27.060 --> 00:22:28.910
now we provide this
program to change

00:22:28.910 --> 00:22:32.410
registry class which allows you
to dispatch your [INAUDIBLE].

00:22:32.410 --> 00:22:35.500
All they have to do is,
just notify PropertyChange

00:22:35.500 --> 00:22:36.700
through that class.

00:22:36.700 --> 00:22:38.900
And when we add and
remove callbacks,

00:22:38.900 --> 00:22:41.780
just send those
calls to this class

00:22:41.780 --> 00:22:45.060
and it will take care of it.

00:22:45.060 --> 00:22:48.020
The other part is-- This
is a beautiful example.

00:22:48.020 --> 00:22:50.740
I know many people have been
asking for this font editor

00:22:50.740 --> 00:22:52.310
within TextView.

00:22:52.310 --> 00:22:53.780
There's some reasons for that.

00:22:53.780 --> 00:22:56.200
You ask the [INAUDIBLE].

00:22:56.200 --> 00:22:58.310
Lisa, I don't know
if she's here,

00:22:58.310 --> 00:23:02.100
she's created this thing where
I can set my fonts in XML.

00:23:02.100 --> 00:23:04.780
I want to do that,
it is much cleaner.

00:23:04.780 --> 00:23:07.836
This became very popular,
I like this example.

00:23:07.836 --> 00:23:09.210
The good thing
about this example

00:23:09.210 --> 00:23:11.120
is it makes your XML very clean.

00:23:11.120 --> 00:23:14.430
You look at it, you understand
what it is trying to do.

00:23:14.430 --> 00:23:18.700
There's no added performance
cost in all of these things.

00:23:18.700 --> 00:23:20.680
So you write the binding
adapter that says,

00:23:20.680 --> 00:23:23.930
I know how to set a
font on a textView.

00:23:23.930 --> 00:23:25.950
This is all well defined.

00:23:25.950 --> 00:23:28.120
In this code you get the font.

00:23:28.120 --> 00:23:29.610
You load the typeface.

00:23:29.610 --> 00:23:31.380
Set it on the text view.

00:23:31.380 --> 00:23:33.080
If this was a real
application you

00:23:33.080 --> 00:23:38.920
would probably cache it so you
don't keep reloading the font.

00:23:38.920 --> 00:23:40.620
Beautiful.

00:23:40.620 --> 00:23:42.930
Another good example
is the image adapter.

00:23:42.930 --> 00:23:46.505
I'm using any image
loader here, Glide.

00:23:46.505 --> 00:23:51.315
I could say, this adapter
knows how to set a photo URL

00:23:51.315 --> 00:23:55.140
and might have a default
but they're not required.

00:23:55.140 --> 00:23:58.480
So that if there is only a
photo URL set on the view

00:23:58.480 --> 00:24:01.180
we will still call the adapter
the other value you will see

00:24:01.180 --> 00:24:03.570
will be the default value,
which is if it is an object

00:24:03.570 --> 00:24:04.850
it will be null.

00:24:04.850 --> 00:24:07.070
So an integer will be
zero and all the default

00:24:07.070 --> 00:24:09.190
values you can imagine.

00:24:09.190 --> 00:24:11.490
This way I can write
just one adapter

00:24:11.490 --> 00:24:16.210
that can handle multiple
attribute groups.

00:24:16.210 --> 00:24:19.740
And if it is an
instance method you

00:24:19.740 --> 00:24:21.810
can just create
this AppComponent

00:24:21.810 --> 00:24:24.256
that implants the
DataBindingComponent

00:24:24.256 --> 00:24:26.450
and just returns
your image adapter.

00:24:26.450 --> 00:24:29.920
This is very nice for testing so
that while the test is running

00:24:29.920 --> 00:24:32.470
you can basically set the
default, or do nothing,

00:24:32.470 --> 00:24:35.440
because no one wants to
call network during a test

00:24:35.440 --> 00:24:38.350
unless you are
testing the network.

00:24:38.350 --> 00:24:42.816
So I have this mock version here
that I inject during my test.

00:24:42.816 --> 00:24:44.440
And it just does nothing.

00:24:44.440 --> 00:24:45.770
It uses the default drawable.

00:24:50.610 --> 00:24:54.320
So this works one-on-one
with [INAUDIBLE].

00:24:54.320 --> 00:24:59.240
You can just say inject
ImageAdapter, create this app

00:24:59.240 --> 00:25:01.917
component and for example,
if you are using Dagger 2

00:25:01.917 --> 00:25:03.250
this will take care of the rest.

00:25:03.250 --> 00:25:04.980
You don't need to
the anything else

00:25:04.980 --> 00:25:08.470
and this is a Dagger 2
implementation where we always

00:25:08.470 --> 00:25:11.280
say-- We create the
model for the stuff,

00:25:11.280 --> 00:25:14.510
and we implement
this, and then Dagger

00:25:14.510 --> 00:25:18.310
generates the rest of the code
assuming that you provided it.

00:25:18.310 --> 00:25:19.992
And thank you.

00:25:19.992 --> 00:25:23.120
[APPLAUSE]

00:25:26.319 --> 00:25:28.110
GEORGE MOUNT: We were
super fast so we have

00:25:28.110 --> 00:25:30.250
time for lots of questions!

00:25:30.250 --> 00:25:33.040
YGIT BOYAR: There are two
microphones left and right.

00:25:33.040 --> 00:25:34.735
Please use them
to ask questions.

00:25:48.510 --> 00:25:54.310
AUDIENCE: Hi, my question is
about when you use data binding

00:25:54.310 --> 00:25:58.710
it's not always obvious what's
happening in the UX editor.

00:25:58.710 --> 00:26:00.670
If you understand what I mean.

00:26:00.670 --> 00:26:04.260
It would be nice to be
able to provide a default

00:26:04.260 --> 00:26:09.220
product, or something to mock
so I can see what a UX looks

00:26:09.220 --> 00:26:10.954
like in the editor as well.

00:26:10.954 --> 00:26:13.120
GEORGE MOUNT: Yeah, that
was one of the first things

00:26:13.120 --> 00:26:16.560
that we talked about when we
were talking to the Android

00:26:16.560 --> 00:26:17.262
Studio team.

00:26:17.262 --> 00:26:19.220
And they were really
excited about data binding

00:26:19.220 --> 00:26:23.250
but as you saw in
the last talk, they

00:26:23.250 --> 00:26:25.730
are working on some pretty
exciting things right now.

00:26:25.730 --> 00:26:29.930
And so they're going to get to
it but they're not there yet.

00:26:29.930 --> 00:26:31.870
YGIT BOYAR: I can tell
that code completion is

00:26:31.870 --> 00:26:34.070
coming this way of course.

00:26:34.070 --> 00:26:35.530
That's good news
for data binding.

00:26:35.530 --> 00:26:37.380
And that's one of the
things we should do.

00:26:42.890 --> 00:26:45.610
AUDIENCE: Is it possible
to inflate ViewStub

00:26:45.610 --> 00:26:48.047
according to data binding?

00:26:48.047 --> 00:26:49.880
GEORGE MOUNT: You said,
"Inflate new stuff"?

00:26:49.880 --> 00:26:50.730
AUDIENCE: ViewStub.

00:26:50.730 --> 00:26:55.460
GEORGE MOUNT: Oh yes, there's
a special implementation

00:26:55.460 --> 00:27:01.320
for ViewStub because as you
saw we have final classes--

00:27:01.320 --> 00:27:02.990
final fields.

00:27:02.990 --> 00:27:06.090
So we have a ViewStub
proxy final field for that.

00:27:06.090 --> 00:27:09.410
Because ViewStub actually
replaces itself with a view.

00:27:09.410 --> 00:27:11.922
So we can't do a replacement
for a final field, right?

00:27:11.922 --> 00:27:13.380
So we have a ViewStub
proxy and you

00:27:13.380 --> 00:27:18.730
can get either the view, or
the replaced view with it

00:27:18.730 --> 00:27:20.870
depending on its status.

00:27:20.870 --> 00:27:25.490
AUDIENCE: OK, and it is
possible to parse the data model

00:27:25.490 --> 00:27:28.040
to underlying [INAUDIBLE].

00:27:28.040 --> 00:27:32.000
YGIT BOYAR: Yes, you
us the same expression

00:27:32.000 --> 00:27:34.320
as if you are
passing an attribute.

00:27:34.320 --> 00:27:36.936
And if there's a
binding for that class

00:27:36.936 --> 00:27:39.330
we know to create the
binding for that class

00:27:39.330 --> 00:27:42.502
and pass that variable
as the variable changes.

00:27:42.502 --> 00:27:45.770
AUDIENCE: Cool, thank you.

00:27:45.770 --> 00:27:48.520
AUDIENCE: Hello, the
current design tab

00:27:48.520 --> 00:27:51.070
inside Android Studio sometimes
doesn't render the layout

00:27:51.070 --> 00:27:51.810
correctly.

00:27:51.810 --> 00:27:54.510
Sometimes there is just a black
screen or something like this.

00:27:54.510 --> 00:27:57.380
Are you going to improve this
and will its work with data

00:27:57.380 --> 00:27:58.524
binding also?

00:27:58.524 --> 00:27:59.940
GEORGE MOUNT: So
we are constantly

00:27:59.940 --> 00:28:03.410
improving the Android
Studio layout editor.

00:28:03.410 --> 00:28:05.760
So that's going to get
better and better over time,

00:28:05.760 --> 00:28:06.610
absolutely.

00:28:06.610 --> 00:28:09.140
AUDIENCE: OK, thank you.

00:28:09.140 --> 00:28:11.550
AUDIENCE: I was wondering,
you showed the image

00:28:11.550 --> 00:28:13.210
loading examples.

00:28:13.210 --> 00:28:15.580
How would you go about
canceling the loads when

00:28:15.580 --> 00:28:18.660
your UI is torn down somewhere.

00:28:18.660 --> 00:28:22.790
YGIT BOYAR: You have the
binding so you can model it--

00:28:22.790 --> 00:28:25.390
so for example you
create the binding--

00:28:25.390 --> 00:28:27.100
what you are trying
to cancel is--

00:28:27.100 --> 00:28:29.600
let's say you are trying
to load user image URL,

00:28:29.600 --> 00:28:32.370
and then the image
URL disappeared or--

00:28:32.370 --> 00:28:34.970
AUDIENCE: No, I mean like in
Picasso, you can pass a tag

00:28:34.970 --> 00:28:38.400
and then cancel every loads
on those tags for example,

00:28:38.400 --> 00:28:41.707
when your fragment goes
away, or something like that.

00:28:41.707 --> 00:28:44.040
YGIT BOYAR: One option would
be passing that tag as well

00:28:44.040 --> 00:28:45.692
to the binding adapter.

00:28:45.692 --> 00:28:47.540
Now you can cancel
through Picasso.

00:28:47.540 --> 00:28:50.530
Or if there's some
variable in your model

00:28:50.530 --> 00:28:53.230
that can control that then,
again, the binding adapter

00:28:53.230 --> 00:28:54.550
can handle the canceling.

00:28:54.550 --> 00:28:57.250
AUDIENCE: OK, but it's
not really a callback

00:28:57.250 --> 00:28:58.102
for tearing down--

00:28:58.102 --> 00:29:00.310
YGIT BOYAR: You can pass a
callback variable if want.

00:29:00.310 --> 00:29:04.546
For the view tearing
down-- You know

00:29:04.546 --> 00:29:06.920
when the view is going away
through the Android view life

00:29:06.920 --> 00:29:09.400
cycle, and there
are callback methods

00:29:09.400 --> 00:29:11.520
that you can assign
to this binding class.

00:29:11.520 --> 00:29:15.575
You can even say, "Hey
stop, don't rebind."

00:29:15.575 --> 00:29:19.010
The mandated changes
generated by the binding class

00:29:19.010 --> 00:29:21.980
calls your callback,
"I'm about to re-bind."

00:29:21.980 --> 00:29:23.180
And now you can say, "No.

00:29:23.180 --> 00:29:23.680
Stop.

00:29:23.680 --> 00:29:24.370
Don't re-bind."

00:29:24.370 --> 00:29:27.352
When you say that you are
responsible to tell it

00:29:27.352 --> 00:29:28.560
to re-bind whenever you want.

00:29:28.560 --> 00:29:32.300
Which is very useful if you are
using inside the RecyclerVIew.

00:29:32.300 --> 00:29:35.240
Recycler gets really upset if
you update the views themselves

00:29:35.240 --> 00:29:36.360
directly.

00:29:36.360 --> 00:29:38.710
So if you're at the
RecyclerView.Adapter you say,

00:29:38.710 --> 00:29:42.630
"Don't change. " And in runs it
through the RevyclerlViews like

00:29:42.630 --> 00:29:44.351
item change flaw.

00:29:44.351 --> 00:29:46.350
AUDIENCE: OK, I think
that answers my questions.

00:29:50.880 --> 00:29:54.182
AUDIENCE: What's the best way
to debug the expressions that

00:29:54.182 --> 00:29:55.140
are in the view markup?

00:29:57.800 --> 00:30:00.700
Because it's logic effectively
and so if there's a bug

00:30:00.700 --> 00:30:01.533
how do you debug it.

00:30:01.533 --> 00:30:03.069
How do you step through it?

00:30:03.069 --> 00:30:05.610
YGIT BOYAR: Well, you can't step
through the code, the source

00:30:05.610 --> 00:30:08.520
code that we generate is
actually visible to you.

00:30:08.520 --> 00:30:11.810
It's generated and you can
step through it if you need to.

00:30:11.810 --> 00:30:14.690
It's a little bit
on the uglier side

00:30:14.690 --> 00:30:18.250
because it's generated code,
but you can't step through it.

00:30:20.940 --> 00:30:23.710
You should try to limit what
your expressions look like.

00:30:23.710 --> 00:30:27.260
Now we have some things that
make it a lot easier for you

00:30:27.260 --> 00:30:28.660
so that you have fewer bugs.

00:30:28.660 --> 00:30:32.110
For example, we have a
no coalescent operator

00:30:32.110 --> 00:30:35.400
which-- those of you who
have used other languages

00:30:35.400 --> 00:30:37.420
know what this is,
but essentially-- says

00:30:37.420 --> 00:30:41.600
if the first part is null
then use the second part.

00:30:41.600 --> 00:30:44.680
And we also automatically
do null checks

00:30:44.680 --> 00:30:46.240
on your expressions.

00:30:46.240 --> 00:30:49.440
So if any part of it is null
then the resultant value

00:30:49.440 --> 00:30:50.450
is a default value.

00:30:50.450 --> 00:30:53.830
So if you call setText
on user.name then,

00:30:53.830 --> 00:30:58.980
if user is null, then the
whole expression is null.

00:30:58.980 --> 00:31:03.590
You'll see fewer bugs from that.

00:31:03.590 --> 00:31:06.170
Like in the best practices you
should limit your expressions

00:31:06.170 --> 00:31:07.650
so they're not too complicated.

00:31:07.650 --> 00:31:08.900
AUDIENCE: Yeah, I would agree.

00:31:08.900 --> 00:31:09.836
Thanks.

00:31:09.836 --> 00:31:10.565
AUDIENCE: Hello.

00:31:10.565 --> 00:31:15.610
When we're using data binding
with recycle views actually,

00:31:15.610 --> 00:31:18.810
the documentation
says that we should--

00:31:18.810 --> 00:31:21.200
after passing the view
to the view holder

00:31:21.200 --> 00:31:22.815
and get the binding clause.

00:31:22.815 --> 00:31:24.565
We should use as a
executePendingBindings.

00:31:27.076 --> 00:31:28.700
I want to know exactly
what is it like,

00:31:28.700 --> 00:31:30.283
because I'll tried
to use on list view

00:31:30.283 --> 00:31:33.350
and didn't call that
method and it worked fine.

00:31:33.350 --> 00:31:38.490
YGIT BOYAR: It will work fine
but it will-- As the variables

00:31:38.490 --> 00:31:42.090
change we don't instantly
go and update the views.

00:31:42.090 --> 00:31:46.670
What data binding does
is we just keep track

00:31:46.670 --> 00:31:49.650
and wait until the next
animation frame happens.

00:31:49.650 --> 00:31:51.804
This helps us to run
less explorations

00:31:51.804 --> 00:31:52.970
because it's more efficient.

00:31:52.970 --> 00:31:55.936
Plus you can change
your data on any thread.

00:31:55.936 --> 00:31:57.560
You don't need to be
on the main thread

00:31:57.560 --> 00:31:59.370
while changing your
data, and data binding

00:31:59.370 --> 00:32:02.030
will take care of moving
it to the main thread.

00:32:02.030 --> 00:32:05.170
Now the way this works is you
wait until the next animation

00:32:05.170 --> 00:32:05.950
frame.

00:32:05.950 --> 00:32:09.030
From a recycler perspective
for the list view, what it does

00:32:09.030 --> 00:32:11.340
is it calls your own
bind method and it

00:32:11.340 --> 00:32:14.950
expects the view to be updated
when that method returns.

00:32:14.950 --> 00:32:16.900
So if there's any
TextView that you

00:32:16.900 --> 00:32:19.050
should set that takes
when that happens,

00:32:19.050 --> 00:32:21.740
otherwise the view won't
be measured properly.

00:32:21.740 --> 00:32:23.600
The first layout will be wrong.

00:32:23.600 --> 00:32:28.080
The next animation frame, data
binding will update that view.

00:32:28.080 --> 00:32:30.270
This is going to cause
another layout which

00:32:30.270 --> 00:32:31.570
will correct itself.

00:32:31.570 --> 00:32:33.720
It looked like it worked
fine, but it actually

00:32:33.720 --> 00:32:35.570
did two layouts for no reason.

00:32:35.570 --> 00:32:37.860
So you by calling
executePendingBindings,

00:32:37.860 --> 00:32:42.900
you sync all the
VFs with your model

00:32:42.900 --> 00:32:45.880
so that data binding is not
going to request another layout

00:32:45.880 --> 00:32:48.825
and the ListView or RecyclerView
will run the proper layout

00:32:48.825 --> 00:32:49.366
calculations.

00:32:52.050 --> 00:32:54.890
AUDIENCE: So, the last one.

00:32:54.890 --> 00:32:58.630
When you're importing variables
such as Android-- the base

00:32:58.630 --> 00:33:01.310
class to use an
expression-- I want

00:33:01.310 --> 00:33:03.130
to know if on the
new Android Studio

00:33:03.130 --> 00:33:05.960
we actually have error
fix because if you

00:33:05.960 --> 00:33:08.352
try to do that expression
of setting visibility,

00:33:08.352 --> 00:33:11.715
it actually shows you an
error, even after compiling.

00:33:11.715 --> 00:33:14.120
So I want to know if that's
fixed on Android Studios?

00:33:14.120 --> 00:33:15.250
GEORGE MOUNT: You
said for compiling?

00:33:15.250 --> 00:33:17.000
I shouldn't show you
errors for compiling.

00:33:17.000 --> 00:33:18.488
YGIT BOYAR: It
does show an error.

00:33:18.488 --> 00:33:21.260
It's a very detailed problem.

00:33:21.260 --> 00:33:24.298
While parsing your
expressions we use ANTLR.

00:33:24.298 --> 00:33:27.930
We say grammer parser
is very popular.

00:33:27.930 --> 00:33:30.870
That model doesn't
work on IntelliJ.

00:33:30.870 --> 00:33:35.680
IntelliJ suggests using
another parser called JFlex.

00:33:35.680 --> 00:33:39.200
So sometimes these grammars
don't match properly.

00:33:39.200 --> 00:33:42.220
So if you have a bug just report
it and we will try to fix it.

00:33:42.220 --> 00:33:44.130
We are working on some
other solutions that

00:33:44.130 --> 00:33:46.365
will allow us to use ANTLR
parser inside IntelliJ

00:33:46.365 --> 00:33:49.343
but there are fundamental
different models,

00:33:49.343 --> 00:33:51.343
so it's not very [INAUDIBLE],
but we are working

00:33:51.343 --> 00:33:52.932
on making it more reliable.

00:33:56.730 --> 00:33:58.330
GEORGE MOUNT: All
right, thank you.

00:33:58.330 --> 00:34:00.430
[APPLAUSE]

00:34:00.430 --> 00:34:04.080
[MUSIC PLAYING]

