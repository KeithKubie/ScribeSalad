WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:02.995
So it's one thing to say that our
project build successfully, but

00:00:02.995 --> 00:00:04.348
how do we know that it works right?

00:00:04.348 --> 00:00:07.561
The best answer that software
engineering has come up with for

00:00:07.561 --> 00:00:10.046
this is to use a lot of
different kinds of tests.

00:00:10.046 --> 00:00:14.107
Now testing is a hug subject and
we actually have a whole course on it,

00:00:14.107 --> 00:00:18.410
but let's take a quick look at
some different kinds of tests.

00:00:18.410 --> 00:00:23.380
Unit tests are tests the developers
write along side the application code.

00:00:23.380 --> 00:00:25.968
Each test checks the behavior
of one specific unit of code,

00:00:25.968 --> 00:00:27.123
like a function or class.

00:00:27.123 --> 00:00:29.317
They're designed to be automated.

00:00:29.317 --> 00:00:31.952
Developers will run them repeatedly
as part of the development process.

00:00:31.952 --> 00:00:35.955
Regression test on the other hand,
get written as part of debugging and

00:00:35.955 --> 00:00:37.098
troubleshooting.

00:00:37.098 --> 00:00:40.764
Once you've fixed a bug, you want to
make sure that it doesn't come back due

00:00:40.764 --> 00:00:43.300
to some future oversight or regression.

00:00:43.300 --> 00:00:47.090
So you add a test that checks
specifically for that particular bug.

00:00:47.090 --> 00:00:49.938
Like unit tests, regression tests
are automated and run frequently.

00:00:49.938 --> 00:00:54.126
A smoke test is something that gets run
after the build, kind of a sanity check

00:00:54.126 --> 00:00:58.453
to make sure the system basically works
before doing any more refined testing.

00:00:58.453 --> 00:01:01.970
For instance, if our project is a web
server, we might just bring a server

00:01:01.970 --> 00:01:05.393
instance up and fetch the home page
just to make sure it doesn't crash.

00:01:05.393 --> 00:01:08.422
The term smoke test comes
from electrical engineering.

00:01:08.422 --> 00:01:11.689
You can imagine plugging an appliance or
a machine in and

00:01:11.689 --> 00:01:13.496
seeing if it catches fire, but

00:01:13.496 --> 00:01:17.964
it also has an older meaning in plumbing
as a test for newly installed pipes.

00:01:17.964 --> 00:01:22.301
Before putting water in a pipe, plumbers
would fill it with pressurized smoke to

00:01:22.301 --> 00:01:24.359
see if the smoke leaked out anywhere.

00:01:24.359 --> 00:01:27.250
A system integration task
is just a little bigger.

00:01:27.250 --> 00:01:30.633
It's a test of the system
including not just our code, but

00:01:30.633 --> 00:01:35.560
also the back-ends and dependencies and
data that our code makes use of.

00:01:35.560 --> 00:01:38.050
You might often run it on
dedicated test machines.

00:01:38.050 --> 00:01:40.134
Before we treat infrastructure as code,

00:01:40.134 --> 00:01:43.357
we can spin up test instances as
VMs dynamically when we need to.

00:01:43.357 --> 00:01:45.854
In doing that,
we'll test our deployment scripts too.

00:01:45.854 --> 00:01:49.911
An automated acceptance test is
something that you'd write to verify

00:01:49.911 --> 00:01:53.086
that a system or
feature does what the user wants it to.

00:01:53.086 --> 00:01:56.749
Now it can't replace everything that
a human QA tester might do, but

00:01:56.749 --> 00:01:59.985
there are testing frameworks
that let automate quite a lot.

00:01:59.985 --> 00:02:03.205
Whole workflows, clicking buttons,
filling out data fields,

00:02:03.205 --> 00:02:06.000
whatever a user might do in your app.

00:02:06.000 --> 00:02:07.330
And then depending on your service,

00:02:07.330 --> 00:02:11.600
you might have a manual QA step as
well before launch goes to production.

00:02:11.600 --> 00:02:13.450
If that's the last step before launch,

00:02:13.450 --> 00:02:16.840
the QA tester's approval can actually
tell the continuous deployment system

00:02:16.840 --> 00:02:18.537
that it's okay to go
ahead with the roll out.

00:02:19.660 --> 00:02:23.048
So there we have six different
kinds of testing, unit testing,

00:02:23.048 --> 00:02:26.753
regression testing, smoke testing,
system integration testing,

00:02:26.753 --> 00:02:29.090
automated and manual acceptance testing.

00:02:29.090 --> 00:02:32.609
While we're talking about testing,
let's talk about bugs too.

00:02:32.609 --> 00:02:37.062
Having a single, unified bug
tracking system can go a long way to

00:02:37.062 --> 00:02:40.043
improving communication amongst teams.

00:02:40.043 --> 00:02:43.888
If it's accessible to everyone in
the organization to report issues and

00:02:43.888 --> 00:02:45.464
collaborate on fixing them,

00:02:45.464 --> 00:02:48.500
then that's one less barrier
to getting real work done.

