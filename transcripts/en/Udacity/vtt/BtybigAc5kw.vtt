WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.780
So maybe, maybe this will make you feel better Charles. So

00:00:02.780 --> 00:00:05.890
there's we can actually, you know, when all else fails, change

00:00:05.890 --> 00:00:08.610
the problem. So let's say that instead of trying to learn

00:00:08.610 --> 00:00:11.940
the way we were describing it before, we're going to change the rules.

00:00:11.940 --> 00:00:16.200
We're going to say we're going to use a learning formalism that's sometimes

00:00:16.200 --> 00:00:18.940
referred to as mistake bands. So here's how the things work

00:00:18.940 --> 00:00:23.190
in mistake bands, the learner is sitting around and input arrives.

00:00:23.190 --> 00:00:25.590
And then the learner gets to guess an answer for that input.

00:00:25.590 --> 00:00:27.920
So the learner the, maybe the learner chose the input or

00:00:27.920 --> 00:00:31.660
maybe it came from a, a helpful teacher or maybe a malicious

00:00:31.660 --> 00:00:34.750
teacher, turns out it's not going to matter. But the input's going to show

00:00:34.750 --> 00:00:37.110
up. The learner's going to guess the answer, so it doesn't have to

00:00:37.110 --> 00:00:39.690
now guess the hypothesis and get that right. It just has

00:00:39.690 --> 00:00:44.190
to get the. The output correct for this input. If the learners

00:00:44.190 --> 00:00:47.900
wrong, then we're going to charge it a point and tell it,

00:00:47.900 --> 00:00:51.370
that it was wrong and then it goes up to one and

00:00:51.370 --> 00:00:54.620
we repeat this and so, this is going to run forever and what we're

00:00:54.620 --> 00:00:56.030
going to do is bound the total number

00:00:56.030 --> 00:00:58.740
of mistakes made, into infinity. Right? So,

00:00:58.740 --> 00:01:02.660
were going to keep playing this game forever. And we want to say it'll never

00:01:02.660 --> 00:01:06.670
make tot total number of mistakes will never be larger than a certain amount.

00:01:06.670 --> 00:01:09.230
&gt;&gt; So this is giving the learner some

00:01:09.230 --> 00:01:11.920
new powers, right? So the learner now is guessing

00:01:11.920 --> 00:01:14.410
answers. And all we have to guarantee is

00:01:14.410 --> 00:01:16.390
that if is guess is wrong, it better learn

00:01:16.390 --> 00:01:17.900
a heck of a lot from that. Hmm.

00:01:17.900 --> 00:01:20.470
&gt;&gt; Otherwise if it even if it doesn't know much

00:01:20.470 --> 00:01:22.620
if it guesses right that's fine. It doesn't have to learn.

00:01:22.620 --> 00:01:25.760
&gt;&gt; Okay. I see. So, so in the case before so long as I had been

00:01:25.760 --> 00:01:28.280
guessing false I would have been okay even

00:01:28.280 --> 00:01:30.480
if I didn't know what the hypothesis was.

00:01:30.480 --> 00:01:34.330
And then the moment I got a one, I got a true, I could actually learn

00:01:34.330 --> 00:01:36.620
something. Then I should learn something and try

00:01:36.620 --> 00:01:38.790
to do better guesses from that point on. Okay.

00:01:38.790 --> 00:01:41.450
&gt;&gt; Outstanding, yes, exactly so.

00:01:41.450 --> 00:01:45.320
So let's turn that into an algorithm. So here's

00:01:45.320 --> 00:01:48.740
an algorithm that's really simple and actually can learn very

00:01:48.740 --> 00:01:51.290
effectively for these mistake bound problems. So it, it

00:01:51.290 --> 00:01:54.950
works like this. It starts off in this weird state

00:01:54.950 --> 00:01:57.640
where it imagines in the formula that every variable

00:01:57.640 --> 00:02:01.570
is present. In, in both it's positive and negated for.

00:02:01.570 --> 00:02:03.620
Right, which is kind of weird. And so what that, that

00:02:03.620 --> 00:02:06.820
would mean is the formula is x1 and not x1.

00:02:06.820 --> 00:02:12.780
X2 and not x2. X3 and not x3. X4 and not x4. X5 and not x5. So

00:02:12.780 --> 00:02:14.690
any input that it gets, it;s always going to produce

00:02:14.690 --> 00:02:16.690
the same answer, right? What, what is that answer.

00:02:16.690 --> 00:02:20.670
&gt;&gt; False. False, right, so it's going to keep saying false, for a

00:02:20.670 --> 00:02:26.120
long time. Until at some point, it actually could be right. Each

00:02:26.120 --> 00:02:29.210
time it's right, it's actually not getting charged any mistakes for that.

00:02:29.210 --> 00:02:32.750
It's just that at some point, it's going to get an input that

00:02:32.750 --> 00:02:34.370
the correct answer is true. It's going to

00:02:34.370 --> 00:02:35.880
say false, and it's going to have made a

00:02:35.880 --> 00:02:41.110
mistake. So let's say that this here, here's that example. X1 is true. X3 and X4

00:02:41.110 --> 00:02:43.000
are true, and the other two are false,

00:02:43.000 --> 00:02:47.010
and the learner said false, but the answer

00:02:47.010 --> 00:02:50.640
was actually true. So if the answer to this one is true, what do we know?

00:02:50.640 --> 00:02:57.902
&gt;&gt; We know that one zero. Wait we know that 0100 1, which is the

00:02:57.902 --> 00:03:01.850
opposite of what you're saying could not be a part

00:03:01.850 --> 00:03:05.070
of the formula. So we could remove that from our formula.

00:03:06.170 --> 00:03:08.850
&gt;&gt; okay. That's one way to think of it. Couldn't quite think of it that way.

00:03:08.850 --> 00:03:11.810
&gt;&gt; But am I right? Yeah, if this is what you meant. so...

00:03:11.810 --> 00:03:13.370
&gt;&gt; [LAUGH]

00:03:13.370 --> 00:03:19.880
&gt;&gt; Uh...the first variable, the x1 not cannot be in the formula. Cause

00:03:19.880 --> 00:03:23.100
if it was, there's no way that this would've been able to produce true.

00:03:23.100 --> 00:03:23.830
&gt;&gt; Right.

00:03:23.830 --> 00:03:31.230
&gt;&gt; So we can erase x1 not. We can erase x2... in a positive

00:03:31.230 --> 00:03:37.210
form, because of the second bit. We can, the third bit says that X3, if it's

00:03:37.210 --> 00:03:40.850
in there, it can't be negated. We don't know if it's in there, but we know it

00:03:40.850 --> 00:03:47.490
can't be negated. X4 Is the same. And x5, if it's in there.

00:03:47.490 --> 00:03:48.140
&gt;&gt; Right

00:03:48.140 --> 00:03:50.090
you get rid of the positive. Yeah, that's what I meant. That's

00:03:50.090 --> 00:03:52.030
why I wrote down the opposite of everything that was up there.

00:03:52.030 --> 00:03:53.690
&gt;&gt; Yeah, and that is what we're left with. Okay,

00:03:53.690 --> 00:03:56.200
it's not exactly what the algorithm says, but it, it produced

00:03:56.200 --> 00:03:58.230
the right answer in this case. Alright, so now, now

00:03:58.230 --> 00:04:00.260
what is it going to do? Now it's going to continue to say

00:04:00.260 --> 00:04:05.060
no, unless it sees. This particular bit pattern, right, this

00:04:05.060 --> 00:04:07.470
is the only thing that will ever predict true on and

00:04:07.470 --> 00:04:10.090
it will always be right,when it does that because we

00:04:10.090 --> 00:04:13.186
know that is the correct answer for that. But let's so,

00:04:13.186 --> 00:04:17.002
so it's going to guess no everywhere else and so let's say it gets

00:04:17.002 --> 00:04:21.640
something wrong again and let's say it gets one zero, one one, one wrong.

00:04:21.640 --> 00:04:25.150
So in this particular case, it's going to guess no, and we say, I'm sorry,

00:04:25.150 --> 00:04:28.180
the answer is yes. All right, so now what does it know from that?

00:04:28.180 --> 00:04:31.190
&gt;&gt; Well, I'm just reading your algorithm now. And

00:04:31.190 --> 00:04:33.090
I'm just going to do what number three says.

00:04:33.090 --> 00:04:35.890
&gt;&gt; All right. That's a good idea. It says if we're

00:04:35.890 --> 00:04:38.360
wrong, which we are in this case, set all the positive

00:04:38.360 --> 00:04:40.860
variables that were zero to absent. All

00:04:40.860 --> 00:04:42.280
the positive values that were zero, there are

00:04:42.280 --> 00:04:43.590
none of those and said all the

00:04:43.590 --> 00:04:46.050
negative variables that were one, to absent, alright.

00:04:46.050 --> 00:04:50.700
So then that was x5, x5 is there in its negated form, but it's actually a one in

00:04:50.700 --> 00:04:56.520
the input, so we're going to turn that away to absent. Alright.

00:04:56.520 --> 00:04:57.570
&gt;&gt; Mm-hm.

00:04:57.570 --> 00:04:59.500
&gt;&gt; So and that's the same thing that you did when we were

00:04:59.500 --> 00:05:03.430
looking at the problem before, you said if you have two answers, where the,

00:05:03.430 --> 00:05:07.290
two inputs where that output is both true, any bits that are

00:05:07.290 --> 00:05:10.780
different in those two patterns, must be not part of the formula.

00:05:10.780 --> 00:05:11.140
&gt;&gt; Right.

00:05:11.140 --> 00:05:13.600
&gt;&gt; Alright, so now we've definitely, X5 is

00:05:13.600 --> 00:05:16.200
not in the formula and that's actually correct there's,

00:05:16.200 --> 00:05:17.630
there's at no point in the future where

00:05:17.630 --> 00:05:20.360
we have to revisit that. In this other cases

00:05:20.360 --> 00:05:24.290
we are not quite so sure. It could be that they're, in there or not in there.

00:05:24.290 --> 00:05:25.970
And, so each time that we get one

00:05:25.970 --> 00:05:29.010
wrong, we're going to move something from negated to absent.

00:05:29.010 --> 00:05:31.980
And when we do that, that thing is always going to be correct.

00:05:31.980 --> 00:05:36.390
So at most we can move K things from negated or positive to absent.

00:05:36.390 --> 00:05:40.340
&gt;&gt; Oh! So if I. . Think about, oh, so

00:05:40.340 --> 00:05:43.280
even if we may have to see in fact, every,

00:05:43.280 --> 00:05:46.950
even if we may see an exponential number or examples.

00:05:46.950 --> 00:05:50.930
We will never make more than k plus one mistakes.

00:05:50.930 --> 00:05:51.730
&gt;&gt; Perfect.

00:05:51.730 --> 00:05:54.240
&gt;&gt; And so that's exactly what I wanted

00:05:54.240 --> 00:05:58.560
to do before, right? So, if, if I'm a teacher, if I'm a good teacher in this

00:05:58.560 --> 00:06:01.110
case, then I can basically, and I knew

00:06:01.110 --> 00:06:03.710
that you started out assuming that everything was false.

00:06:03.710 --> 00:06:06.310
&gt;&gt; That you know, all variables were there in both their positive or

00:06:06.310 --> 00:06:11.820
negative form, I can just give you one example that is true. And that

00:06:11.820 --> 00:06:15.030
would let you eliminate half of the formula right away, and then I could

00:06:15.030 --> 00:06:16.760
just keep giving you examples that are

00:06:16.760 --> 00:06:19.360
true but only with one variable difference

00:06:19.360 --> 00:06:21.420
each time. And then eventually you would learn it.

00:06:21.420 --> 00:06:23.840
So, then the total number of samples you would

00:06:23.840 --> 00:06:26.230
need would also be k+1 if I know how

00:06:26.230 --> 00:06:28.500
you're starting out as a learner. Does that make sense?

00:06:28.500 --> 00:06:30.360
&gt;&gt; If we charge things by mistakes.

00:06:30.360 --> 00:06:32.320
&gt;&gt; No. But even if we don't charge things by mistake. If I'm

00:06:32.320 --> 00:06:36.450
a teacher who's trying to give you the best examples and I know that

00:06:36.450 --> 00:06:40.900
as the learner you're starting out with a formula that is x one

00:06:40.900 --> 00:06:44.850
and not x one, x two and not x two. Like you said before.

00:06:44.850 --> 00:06:47.910
Then I could just give you the first example that is

00:06:47.910 --> 00:06:52.150
true. That'll eliminate half of those literals. And then only give

00:06:52.150 --> 00:06:55.900
you true examples from that point on, where only change one

00:06:55.900 --> 00:06:57.940
of the variables that are left, and you'll know that you can

00:06:57.940 --> 00:07:00.990
make them absent to get rid of it, and so, just

00:07:00.990 --> 00:07:04.440
as you can only make k plus 1 mistakes, I could

00:07:04.440 --> 00:07:08.020
give you exactly the right k plus 1 examples. If I

00:07:08.020 --> 00:07:10.000
know how you're starting out as a learner. If I don't know

00:07:10.000 --> 00:07:13.170
that, then I have to do the k plus 2 that you showed before.

