WEBVTT
Kind: captions
Language: en

00:00:00.174 --> 00:00:02.441
So in the last quiz you have seen that it's not very likely

00:00:02.441 --> 00:00:05.890
that we can find a randomized algorithm for an np complete problem

00:00:05.890 --> 00:00:11.958
that in polynomial time will deliver us the right answer with a fixed probability

00:00:11.958 --> 00:00:16.974
to be honest, we currently don't know if such an algorithm is possible or impossible

00:00:16.974 --> 00:00:19.324
but many believe that it is highly unlikely

00:00:19.324 --> 00:00:22.274
and so far no such algorithm has been discovered

00:00:22.274 --> 00:00:29.675
it seems that sometimes, however, if we either cross this one here off our list or this one here off our list

00:00:29.675 --> 00:00:33.323
and you'll soon see that it doesn't really matter what we cross off our list

00:00:33.323 --> 00:00:37.224
but if we kind of reduce the number of wishes that we have

00:00:37.224 --> 00:00:40.306
it seems that sometimes we can use randomness

00:00:40.306 --> 00:00:44.025
to at least improve the running time of exponential time algorithms

00:00:44.025 --> 00:00:46.590
so just as you've seen, when we optimize search trees

00:00:46.590 --> 00:00:51.826
it's sometimes also possible to improve the running time of exponential time algorithms

00:00:51.826 --> 00:00:54.908
or the base of the exponent using randomness

00:00:54.908 --> 00:00:58.992
now the question is could we use randomness to help Alice solve vertex cover

00:00:58.992 --> 00:01:05.791
or help Bob solve his clique problem, or Carol her independent set problem, or Dave his shortest tour problem

00:01:05.791 --> 00:01:09.258
at least when we say that we do not have this requirement here

00:01:09.258 --> 00:01:11.491
and the answer unfortunately is - we don't know

00:01:11.491 --> 00:01:13.691
we don't know if there are good randomized algorithms

00:01:13.691 --> 00:01:17.191
to solve vertex cover, or clique, or independent set, or shortest tour

00:01:17.191 --> 00:01:20.109
at least not if we're demanding guarantees

00:01:20.109 --> 00:01:24.842
so there are randomized algorithms that will look through a random number of solutions

00:01:24.842 --> 00:01:28.808
and these are also used in practice, but again they do not offer any guarantees

00:01:28.808 --> 00:01:33.291
there's one problem, however, that is MP complete where I can give you a randomized algorithm

00:01:33.291 --> 00:01:39.625
that's at least better than the best known deterministic algorithm. And that problem is 3-SAT

00:01:39.625 --> 00:01:45.542
As I hope you will remember, the 3-SAT problem had as an input a boolean formula with n variables

00:01:45.542 --> 00:01:48.741
and the boolean formula has a special property because

00:01:48.741 --> 00:01:55.341
it's 3-SAT, namely that each clause has exactly 3 variables

00:01:55.341 --> 00:01:59.258
And the output I'm looking for is, an answer to the question

00:01:59.258 --> 00:02:06.274
If this boolean formula, with n variables, where each clause has exactly 3 variables, has a satisfying assignment

00:02:06.274 --> 00:02:08.958
So how can you use randomness to solve this problem?

00:02:08.958 --> 00:02:12.773
Well there's a very simple, and in my mind very elegant, algorithm

00:02:12.773 --> 00:02:18.824
that in 1999 was proposed by Uva Sherning to solve a 3-SAT instance with n variables

00:02:18.824 --> 00:02:21.875
So this is the algorithm and as you can see it's really quite simple

00:02:21.875 --> 00:02:26.341
So you start out by picking a random 0 - 1 assignment for the variables

00:02:26.341 --> 00:02:34.041
and then you go into a loop that iterates 3n times, where n is the number of variables

00:02:34.041 --> 00:02:36.093
and what you do each time in the loop

00:02:36.093 --> 00:02:42.592
you take one of the clauses that is not satisfied and then you randomly flip one of the variables of that clause

00:02:42.592 --> 00:02:44.142
So what does this randomly flipping mean?

00:02:44.142 --> 00:02:48.608
You start out with a clause and we already know that this clause will have only 3 variables

00:02:48.608 --> 00:02:50.708
because we're dealing with 3-SAT

00:02:50.708 --> 00:02:57.558
Now you randomly pick one of those variables, say we randomly pick the 2nd one, and then you just flip its value

00:02:57.558 --> 00:03:02.659
meaning, if it was assigned to true you now assign it to false, or vice versa

00:03:02.659 --> 00:03:05.323
if it was assigned to false, now you set it to true

00:03:05.323 --> 00:03:08.391
and since it's a random process we don't know which variable we're going to pick

00:03:08.391 --> 00:03:13.659
So instead of this one here, we might have also picked this one here, and of course this one here

00:03:13.659 --> 00:03:20.458
And what happens is by this flipping, you satisfy this clause, but of course other clauses might become unsatisfied

00:03:20.458 --> 00:03:26.558
Now if we run this algorithm here once, what are the chances that it will succeed and find a satisfying assignment

00:03:26.558 --> 00:03:31.274
provided that the initial boolean formula does indeed have a satisfying assignment

00:03:31.274 --> 00:03:34.542
if it doesn't have a satisfying assignment, the algorithm can't find it

00:03:34.542 --> 00:03:36.709
but let's assume that it has one

00:03:36.709 --> 00:03:39.892
then the success of this algorithm will depend on two things

00:03:39.892 --> 00:03:47.024
the first one is: how far the initial assignment is off the satisfying assignment

00:03:47.024 --> 00:03:52.458
or, in other words, picking this random 0 - 1 assignment to the variables, how many variables did we get right?

00:03:52.458 --> 00:03:57.008
and by right I mean we set them to the same value that they would have in a satisfying assignment

00:03:57.008 --> 00:04:03.558
and the second one is, are these random choices that we make here, by flipping the variables, successful

00:04:03.558 --> 00:04:10.292
So if we are somewhere near a satisfying assignment, and by chance the algorithm makes the right choices

00:04:10.292 --> 00:04:12.259
then we would find a satisfying assignment

00:04:12.259 --> 00:04:16.995
provided –but we made that assumption– that the boolean formula here actually has a satisfying assignment

00:04:16.995 --> 00:04:20.426
But let's look at those two success factors a little more closely

