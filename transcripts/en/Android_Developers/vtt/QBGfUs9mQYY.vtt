WEBVTT
Kind: captions
Language: en

00:00:00.149 --> 00:00:04.470
&gt;&gt; CLERON: Hi, my name is Mike Cleron. I'm
an engineer on the Android Development Team.

00:00:04.470 --> 00:00:08.829
Android is an open software platform for mobile
development. It is intended to be a complete

00:00:08.829 --> 00:00:12.860
stack that includes everything from the operating
system through middle ware and up through

00:00:12.860 --> 00:00:17.300
applications. In the next few minutes, I'm
going to be introducing you to an overview

00:00:17.300 --> 00:00:21.170
of the architecture of the Android platform.
And I'm also going to talk about some of the

00:00:21.170 --> 00:00:25.419
key principles that are underlying its design.
If I'm going to talk about architecture, we

00:00:25.419 --> 00:00:30.980
need to start with a diagram covered with
a lot of little boxes and this is ours. Our

00:00:30.980 --> 00:00:34.810
architecture, we’re going to start at the
bottom work up. Our architecture is based

00:00:34.810 --> 00:00:39.690
on the Linux 2.6 Kernel. We use the Linux
Kernel as our hardware abstraction layer.

00:00:39.690 --> 00:00:45.780
So, if you are an OEM trying to bring up Android
on a new device, the first thing you do is

00:00:45.780 --> 00:00:51.320
bring up Linux and get all your drivers in
place. The reason we’re using Linux is because

00:00:51.320 --> 00:00:56.450
it provides a proven driver model in a lot
of cases existing drivers. It also provides

00:00:56.450 --> 00:01:02.280
memory management, process management, a security
model, networking, a lot of core operating

00:01:02.280 --> 00:01:06.010
system infrastructures that are robust and
have been proven over time. The next level

00:01:06.010 --> 00:01:10.920
up is our native libraries. Everything that
you see here in green is written in C and

00:01:10.920 --> 00:01:15.420
C plus, plus. It’s at this level where a
lot of the core power of the Android platform

00:01:15.420 --> 00:01:20.170
comes from. I'm just going to go through and
describe what some of these components are.

00:01:20.170 --> 00:01:26.060
I'm going to start with the surface manager.
The surface manager is responsible for composing

00:01:26.060 --> 00:01:30.390
different drawings surfaces onto the screen.
So it’s the surface manager that’s responsible

00:01:30.390 --> 00:01:34.200
for taking different windows that are owned
by different applications that are running

00:01:34.200 --> 00:01:38.350
in different processes and all drawing at
different times and making sure the pixels

00:01:38.350 --> 00:01:43.920
end up on the screen when they’re supposed
to. Below that we have two boxes, OpenGL/ES

00:01:43.920 --> 00:01:51.840
and SGL and these two make up the core of
our graphics libraries. OpenGL/ES is a 3D

00:01:51.840 --> 00:01:56.350
library. We have a software implementation
that is hardware acceleratable if the device

00:01:56.350 --> 00:02:03.479
has a 3D chip on it. The SGL graphics are
for 2D graphics and that is what most of our

00:02:03.479 --> 00:02:09.209
application drawing is based on. One interesting
thing about the Android graphics platform

00:02:09.209 --> 00:02:16.200
is that you can combine 3D and 2D graphics
in the same application. Moving over, we have

00:02:16.200 --> 00:02:20.749
the Media Framework. The Media Framework was
provided by PacketVideo, one of the members

00:02:20.749 --> 00:02:26.159
of the open handset alliance and that contains
all of the codex that make up the core of

00:02:26.159 --> 00:02:33.109
the media experience. So, in there you’ll
find IMPEG 4, H.264, MP3, AAC, all the audio

00:02:33.109 --> 00:02:38.730
and video codex you need to build a rich media
experience. We use Free Type to render our

00:02:38.730 --> 00:02:44.129
fonts. We have an implementation of SQLite,
we use that as the core of most of our data

00:02:44.129 --> 00:02:50.659
storage. We have WebKit which is the open
source browser engine, that’s what we’re

00:02:50.659 --> 00:02:55.189
using as a core of our browser. It’s the
same browser that’s powering Safari from

00:02:55.189 --> 00:03:01.809
Apple and we’d made some, we’ve worked
with that engine to make it render well on

00:03:01.809 --> 00:03:07.719
small screens and on mobile devices. Next
is The Android Runtime. And the main component

00:03:07.719 --> 00:03:12.989
in the Android Runtime is the Dalvik Virtual
Machine. The Android Runtime was designed

00:03:12.989 --> 00:03:18.029
specifically for Android to meet the needs
of running in an embedded environment where

00:03:18.029 --> 00:03:25.219
you have limited battery, limited memory,
limited CPU. The Dalvik Virtual Machine runs

00:03:25.219 --> 00:03:32.329
something called dex files, D-E-X. And these
are bytecodes that are the results of converting

00:03:32.329 --> 00:03:39.639
at build time .Class and .JAR Files. So, these
files when they are converted to .dex, become

00:03:39.639 --> 00:03:46.260
a much more efficient bytecode that can run
very well on small processors. They use memory

00:03:46.260 --> 00:03:51.870
very efficiently. The data structures are
designed to be shared across processes whenever

00:03:51.870 --> 00:03:57.779
possible. And it uses a highly CPU optimized
bytecode interpreter. The end result of that

00:03:57.779 --> 00:04:03.260
is that it’s possible to have multiple instances
of the Dalvik Virtual Machine running on the

00:04:03.260 --> 00:04:07.760
device at the same time, one in each of several
processes and we'll see why that’s important

00:04:07.760 --> 00:04:13.059
a little bit later on. The next level up from
that is the Core Libraries. This is in blue,

00:04:13.059 --> 00:04:18.259
meaning that it’s written in the Java programming
language. And the Core library contains all

00:04:18.259 --> 00:04:25.099
of the collection classes, utilities, IO,
all the utilities and tools that you’ve

00:04:25.099 --> 00:04:30.659
come to expected to use. Moving up again,
we now have the Application Framework. This

00:04:30.659 --> 00:04:35.970
is all written in a Java programming language
and the application framework is the toolkit

00:04:35.970 --> 00:04:41.250
that all applications use. These applications
include the ones that come with a phone like

00:04:41.250 --> 00:04:45.979
the home application, or the phone application.
It includes applications written by Google,

00:04:45.979 --> 00:04:50.440
and it includes applications that will be
written by you. So, all applications use the

00:04:50.440 --> 00:04:56.009
same framework and the same APIs. Again, I'm
going to go through and talk about what some

00:04:56.009 --> 00:05:00.800
of the main components are in this layer,
in the Application Framework. The activity

00:05:00.800 --> 00:05:07.330
manager is what manages the life cycle of
applications. It also maintains a common backstack

00:05:07.330 --> 00:05:12.389
so that applications that are running in different
processes can have a smoothly integrated navigation

00:05:12.389 --> 00:05:18.939
experience. Next down from that is the package
manager. The package manager is what keeps

00:05:18.939 --> 00:05:24.340
track of which applications are installed
on your device. So, if you download new applications

00:05:24.340 --> 00:05:28.819
over the air or otherwise install applications,
it's the package manager that’s responsible

00:05:28.819 --> 00:05:33.169
for keeping track of what you have and what
the capabilities of each of your applications

00:05:33.169 --> 00:05:40.330
are. The window manager manages Windows. It’s
mostly a Java programming language abstraction

00:05:40.330 --> 00:05:45.370
on top of lower level services that are provided
by the surface manager. The telephony manager

00:05:45.370 --> 00:05:50.840
contains the APIs that we use to build the
phone application that’s central to the

00:05:50.840 --> 00:05:56.710
phone experience. Content providers are a
unique piece of the Android platform. That’s

00:05:56.710 --> 00:06:02.020
a framework that allows applications to share
their data with other applications. We use

00:06:02.020 --> 00:06:07.069
that in our contacts application so that all
of the information in contacts, phone numbers,

00:06:07.069 --> 00:06:12.740
addresses, names is available to any application
that wants to make use of them. And other

00:06:12.740 --> 00:06:16.840
applications can use that facility as well
to share data. The resource manager is what

00:06:16.840 --> 00:06:24.439
we use to store local iStrings, bitmaps, layout
file descriptions, all of the external parts

00:06:24.439 --> 00:06:29.060
of an application that aren’t code. I'm
just going to touch lightly on the remaining

00:06:29.060 --> 00:06:34.659
four boxes, view system, location manager,
notification manager and XMPP service. The

00:06:34.659 --> 00:06:39.960
view system contains things like buttons and
lists, all the building blocks of the UI.

00:06:39.960 --> 00:06:46.569
It also handles things like event dispatching,
layout, drawing. Location manager, notification

00:06:46.569 --> 00:06:52.280
manager and XMPP service are some APIs that
I think will allow developers to create really

00:06:52.280 --> 00:06:58.789
innovative and exciting applications. And
the final layer on top is Applications. This

00:06:58.789 --> 00:07:03.969
is where all the applications get written.
It includes the home application, the contacts

00:07:03.969 --> 00:07:09.099
application, the browser, your applications.
And everything at this layer is, again, using

00:07:09.099 --> 00:07:13.479
the same application framework provided by
the layers below. Now, if you’re going to

00:07:13.479 --> 00:07:18.099
write an application, the first step is to
decompose it into the components that are

00:07:18.099 --> 00:07:23.229
supported by the Android platform. Here are
the four major ones. We have activity, intent

00:07:23.229 --> 00:07:28.689
receiver, service, and content provider. An
activity is essentially just a piece of UI

00:07:28.689 --> 00:07:34.099
typically corresponding to one screen. So
if you think of something like the mail application,

00:07:34.099 --> 00:07:38.340
that would be decomposed into maybe three
major activities, something that lists your

00:07:38.340 --> 00:07:44.409
mail, something that shows you what an individual
mail message and a compose screen to put together

00:07:44.409 --> 00:07:49.979
an outgoing email. An intent receiver is something
different. An intent receiver is a way for

00:07:49.979 --> 00:07:54.749
which your application to register some code
that won’t be running until it’s triggered

00:07:54.749 --> 00:08:00.129
by some external event. And the set of external
events that triggers your code is open and

00:08:00.129 --> 00:08:06.340
extensible. So you can write some code and
through XML, register it to be woken up and

00:08:06.340 --> 00:08:12.529
run when something happens, when the network,
the network activities established or at a

00:08:12.529 --> 00:08:18.039
certain time or when the phone rings or whatever
trigger makes sense for your application.

00:08:18.039 --> 00:08:23.669
The next major component is a service. A service
is a task that doesn’t have any UI, that’s

00:08:23.669 --> 00:08:28.120
long lived, that’s running in the background.
A good example is a music player. You may

00:08:28.120 --> 00:08:32.540
start playing some music from an activity,
from a piece of UI, but once the music is

00:08:32.540 --> 00:08:36.900
playing, you'd want it to keep playing even
if you’re navigating to other parts of the

00:08:36.900 --> 00:08:42.330
user experience. So the code that’s actually
running through the playlist playing songs

00:08:42.330 --> 00:08:46.160
would be a service, that’s running in the
background. You can connect to it later if

00:08:46.160 --> 00:08:51.380
you want to from an activity or some other
component by binding to the service and sending

00:08:51.380 --> 00:08:57.770
messages like “skip to the next” or “rewind.”
The last component is a content provider and,

00:08:57.770 --> 00:09:03.780
again, that’s a component that allows you
to share some of your data with other processes

00:09:03.780 --> 00:09:09.330
and other applications. Now, any application
can store data in whatever may--way it makes

00:09:09.330 --> 00:09:12.930
sense for that application. They can store
it in the files. They can store it in our

00:09:12.930 --> 00:09:17.400
super light database, whatever makes sense.
But if they want to make that data available

00:09:17.400 --> 00:09:22.300
as part of the platform so that other applications
can make use of it, then the content provider

00:09:22.300 --> 00:09:27.470
is the solution for that and we've used that
for the context database that comes with the

00:09:27.470 --> 00:09:32.730
Android platform so that any application can
make use of the information in context. Android

00:09:32.730 --> 00:09:38.280
was designed at a fundamental level to encourage
reusing and replacing components. I have an

00:09:38.280 --> 00:09:43.570
example here that shows how that works. On
the left, there are four applications that

00:09:43.570 --> 00:09:47.250
might want to pick a photo for some reason.
So the home application might want to pick

00:09:47.250 --> 00:09:52.310
it for wallpaper. Contacts might want to pick
a person’s face to associate with their

00:09:52.310 --> 00:09:56.740
contact card. Gmail or MMS, you might want
to have a photo that you sent to someone in

00:09:56.740 --> 00:10:02.590
an outgoing message. Now, an Android for these
applications to make use of the service of

00:10:02.590 --> 00:10:07.850
taking a photo, they first need to make a
request. So the client component makes a request

00:10:07.850 --> 00:10:14.410
for specific action. In this case, I’m illustrating
that with a talk balloon and the Gmail application

00:10:14.410 --> 00:10:19.400
is requesting that it picks a photo. So the
talk balloon is actually representation of

00:10:19.400 --> 00:10:25.500
a formal class in our system called an intent.
What the system does when a request is made

00:10:25.500 --> 00:10:30.670
is it looks at all of the installed components
and it finds the best available component

00:10:30.670 --> 00:10:34.980
that knows how to do whatever was asked for.
In this case, let’s say that the system

00:10:34.980 --> 00:10:41.290
finds the built-in photo gallery. Now, what
happens is the Gmail application is now connected

00:10:41.290 --> 00:10:47.020
to the photo gallery. When the user in Gmails
wanted to pick a photo, he will be taken to

00:10:47.020 --> 00:10:52.740
the photo gallery and the photo gallery will
fulfill whatever was asked for in the intent.

00:10:52.740 --> 00:10:57.690
What makes this interesting is that the picking
of the matching component is late bound, it's

00:10:57.690 --> 00:11:02.100
done very late and so you can swap software
components at any time. So let’s say you

00:11:02.100 --> 00:11:05.900
didn’t like the built-in photo gallery and
you wanted to replace it with one that went

00:11:05.900 --> 00:11:12.660
online to find a richer or bigger set of photos.
You can replace our built-in photo gallery

00:11:12.660 --> 00:11:18.410
with one that say goes out to Picasso or whatever
your favorite online photo site is. Once you’ve

00:11:18.410 --> 00:11:25.040
done that, then any of the applications on
the left will now use the new and better component

00:11:25.040 --> 00:11:31.750
on the right to fulfill the task of picking
a photo. And at any time, a new application

00:11:31.750 --> 00:11:36.320
can come along and make use of existing functionality.
So if you’re writing a blogger application,

00:11:36.320 --> 00:11:40.140
you don’t have to worry about writing a
photo picker yourself. You can just rely on

00:11:40.140 --> 00:11:44.380
whichever one the user has configured to be
their preferred photo picking application.

00:11:44.380 --> 00:11:51.300
This becomes really important because in Android,
it’s not just about picking photos, virtually

00:11:51.300 --> 00:11:55.770
any task has an intent in the middle. If the
user is going from point A to point B, there’s

00:11:55.770 --> 00:12:01.740
an intent in the middle and each of those
intents is an opportunity to reuse a component

00:12:01.740 --> 00:12:06.170
or to replace a component. So we have intents
for going home which means you can replace

00:12:06.170 --> 00:12:10.830
a home application. Or we have an intent for
sending an email which means you can replace

00:12:10.830 --> 00:12:16.690
the mail application. All of these are opportunities
for replacing and reusing components. If you’re

00:12:16.690 --> 00:12:21.070
interested in finding out more about Android,
I encourage you to visit the developer site

00:12:21.070 --> 00:12:26.180
and download the SDK. In the SDK, you’ll
find a lot more documentation and sample code

00:12:26.180 --> 00:12:30.290
and you’ll also be able to try building
applications of your own. There’s also a

00:12:30.290 --> 00:12:34.170
developer group that you can join to find
out more information and I also encourage

00:12:34.170 --> 00:12:39.250
you to check back frequently because we’ll
be posting updates to the SDK as the platform

00:12:39.250 --> 00:12:40.550
matures. Thank you for watching.

