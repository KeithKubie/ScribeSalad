WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.538
&gt;&gt;So we had a lot of great questions

00:00:02.538 --> 00:00:04.401
about hash tables on the forums

00:00:04.401 --> 00:00:07.274
and one example is Student Baracha asks

00:00:07.274 --> 00:00:09.283
"How does Python decide how many buckets

00:00:09.283 --> 00:00:11.599
a dictionary has as it grows?"

00:00:11.599 --> 00:00:13.550
&gt;&gt;So this is an important question, and

00:00:13.550 --> 00:00:16.047
there are lots and lots of interesting things about hash tables

00:00:16.047 --> 00:00:18.148
that we did not get into in Unit 5.

00:00:18.148 --> 00:00:22.872
If memory was free and cheap, and equally fast

00:00:22.872 --> 00:00:24.737
no matter how much you needed,

00:00:24.737 --> 00:00:27.590
then you'd want the hash table to be as big as possible, right?

00:00:27.590 --> 00:00:30.322
You'd want billions of buckets in your hash tables

00:00:30.322 --> 00:00:32.686
so they'd never have to have more than one entry in a bucket.

00:00:32.686 --> 00:00:35.904
But as we saw in Unit 3, memory can be expensive.

00:00:35.904 --> 00:00:41.570
And the faster and the closer to the processor the memory is,

00:00:41.570 --> 00:00:43.354
the more expensive it is.

00:00:43.354 --> 00:00:45.484
So you have a very limited amount of that,

00:00:45.484 --> 00:00:47.849
there's a reason to try to keep the hash tables small as well.

00:00:47.849 --> 00:00:49.564
So this is a tough trade-off.

00:00:49.564 --> 00:00:51.422
Good hash table implementations

00:00:51.422 --> 00:00:53.688
try to make this trade-off in a way that gives you the right balance

00:00:53.688 --> 00:00:55.873
of performance and memory use.

00:00:55.873 --> 00:00:58.372
They do this by looking at the load factor.

00:00:58.372 --> 00:01:00.370
We actually used this in Unit 4.

00:01:00.370 --> 00:01:02.757
This is just the number of entries divided by the number of buckets.

00:01:02.757 --> 00:01:10.704
We had that question in Unit 5. The question where it was "N divided by B"

00:01:10.704 --> 00:01:14.137
where you're looking at the impact of the change of the number of buckets and the number of entries.

00:01:14.137 --> 00:01:18.487
One thing you have to worry about when you do that

00:01:18.487 --> 00:01:20.624
is if you're just looking at the number of keywords and the number of buckets,

00:01:20.624 --> 00:01:24.236
that's the average size. What matters in many applications

00:01:24.236 --> 00:01:27.648
is more the worst size. Even if the average size is fairly small,

00:01:27.648 --> 00:01:30.416
the worst size could be much larger than that,

00:01:30.416 --> 00:01:32.600
and if the lookup for the worst case entry

00:01:32.600 --> 00:01:36.504
starts to get very bad, then you want a larger number of buckets

00:01:36.504 --> 00:01:38.805
or to change your hash function in some way.

00:01:38.805 --> 00:01:40.818
So, for a typical hash table implementation,

00:01:40.818 --> 00:01:43.597
the goal is to keep the load factor actually below 1 usually.

00:01:43.597 --> 00:01:46.239
For Python's dictionary implementation,

00:01:46.239 --> 00:01:49.818
if the number of keywords exceeds about 2/3,

00:01:49.818 --> 00:01:53.687
and I think it's actually exactly 2/3 of the size of the table,

00:01:53.687 --> 00:01:55.904
that's the point where the table is resized.

00:01:55.904 --> 00:01:59.082
So the table would then be doubled, and that changes

00:01:59.082 --> 00:02:01.606
the bucket each word would appear in,

00:02:01.606 --> 00:02:03.573
because we saw that the result of the hash function

00:02:03.573 --> 00:02:05.685
depends on the number of buckets you have.

00:02:05.685 --> 00:02:07.888
So you'd have to copy things into the new hash table

00:02:07.888 --> 00:02:11.200
that has more space, but that's going to make the look-ups faster.

00:02:11.200 --> 00:02:14.865
So this means that if you had about a million entries in your hash table,

00:02:14.865 --> 00:02:17.748
you would expect to have about a million and a half buckets.

00:02:17.748 --> 00:02:21.353
But as you increase above that 2/3 threshold,

00:02:21.353 --> 00:02:23.484
then you'd double the size of the buckets.

00:02:23.484 --> 00:02:25.169
So you'd end up with 3 million buckets,

00:02:25.169 --> 00:02:27.264
if you added one more entry beyond that.

00:02:27.264 --> 00:02:31.331
So if you compare this to what we did in Unit 5,

00:02:31.331 --> 00:02:33.282
you might be surprised that it's so low.

00:02:33.282 --> 00:02:35.099
We were doing example hash tables,

00:02:35.099 --> 00:02:37.023
where the number of buckets was very small,

00:02:37.023 --> 00:02:39.087
and each bucket had many entries in it.

00:02:39.087 --> 00:02:41.804
This is partly to be easier to see what's going on,

00:02:41.804 --> 00:02:44.082
because if you saw a hash table with thousands of

00:02:44.082 --> 00:02:46.316
empty buckets, that would be kind of hard to print out.

00:02:46.316 --> 00:02:48.822
But the other reason for that is the way we implemented

00:02:48.822 --> 00:02:51.471
the hash table in Unit 5 was each bucket was a list.

00:02:51.471 --> 00:02:55.907
And with a list, that's a fairly expensive data structure.

00:02:55.907 --> 00:02:57.734
You've got to create all those empty lists to

00:02:57.734 --> 00:02:59.403
create your hash table.

00:02:59.403 --> 00:03:01.491
The way the Python dictionary is implemented,

00:03:01.491 --> 00:03:03.056
there's just one flat list.

00:03:03.056 --> 00:03:05.347
That means there's one space for each

00:03:05.347 --> 00:03:08.052
hash value, that if you hashed to a given bucket

00:03:08.052 --> 00:03:09.807
there's only one space there.

00:03:09.807 --> 00:03:11.670
That means if two things hash to the same bucket,

00:03:11.670 --> 00:03:13.420
you've got to do something else.

00:03:13.420 --> 00:03:15.204
And what happens with the Python dictionary implementation

00:03:15.204 --> 00:03:17.688
is you look for another free place to put it

00:03:17.688 --> 00:03:20.169
and you have a way for deciding where you look for the next one

00:03:20.169 --> 00:03:22.073
if the first one is full.

00:03:22.073 --> 00:03:24.415
This makes look-ups and adding to the table more complicated,

00:03:24.415 --> 00:03:26.200
so that's why we didn't do it.

00:03:26.200 --> 00:03:28.183
But it means you're using less memory,

00:03:28.183 --> 00:03:29.674
because you don't have all those empty lists

00:03:29.674 --> 00:03:31.417
for all the empty buckets.

00:03:31.417 --> 00:03:33.501
There's a great chapter in a book called "Beautiful Code"

00:03:33.501 --> 00:03:35.774
that's all about the Python dictionary implementation.

00:03:35.774 --> 00:03:37.568
So if you're interested in how that's actually done,

00:03:37.568 --> 00:03:40.253
I encourage you to look at that chapter.

