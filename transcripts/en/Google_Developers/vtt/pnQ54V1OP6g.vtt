WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:00.670
MALE SPEAKER: [INAUDIBLE]

00:00:00.670 --> 00:00:04.019
Wave APIs, and I'm going to give
a quick one on behalf of

00:00:04.019 --> 00:00:05.269
Wave [INAUDIBLE].

00:00:08.730 --> 00:00:09.240
PAMELA FOX: All right.

00:00:09.240 --> 00:00:11.235
Sorry to break up riveting
discussions.

00:00:11.235 --> 00:00:15.114
You guys will have a lot
to do to keep it going.

00:00:15.114 --> 00:00:20.977
So I worked on the Wave API for
the last year, and did a

00:00:20.977 --> 00:00:24.835
lot of fielding developers'
feature requests, and did a

00:00:24.835 --> 00:00:28.090
lot of discussion of what the
API should look like.

00:00:28.090 --> 00:00:34.580
When we launched Google Wave
to developers last year, we

00:00:34.580 --> 00:00:38.790
had a basic Robots API, number
one, and we had a basic Gadget

00:00:38.790 --> 00:00:40.996
API, and that was
basically it.

00:00:40.996 --> 00:00:43.640
And then in the course of the
year, we revised the Robots

00:00:43.640 --> 00:00:46.302
API to do V2, which is what
you guys are probably

00:00:46.302 --> 00:00:48.480
familiar with now.

00:00:48.480 --> 00:00:48.964
MALE SPEAKER: [INAUDIBLE]

00:00:48.964 --> 00:00:49.932
PAMELA FOX: What?

00:00:49.932 --> 00:00:50.416
MALE SPEAKER: [INAUDIBLE].

00:00:50.416 --> 00:00:54.010
PAMELA FOX: Oh, yeah,
yeah, sorry.

00:00:54.010 --> 00:00:58.180
And then we also introduced an
Embed API, and also Wave This,

00:00:58.180 --> 00:01:01.050
and also a Wave Data API,
which was like an

00:01:01.050 --> 00:01:05.040
authenticated user version
of the Wave Robot API.

00:01:05.040 --> 00:01:06.950
So we actually made a lot of
progress on the APIs during

00:01:06.950 --> 00:01:11.860
the year, but there are
definitely still drafts, and

00:01:11.860 --> 00:01:14.930
there's still a lot of things
that they could be, a lot of

00:01:14.930 --> 00:01:18.350
features they could have, and
also sometimes completely

00:01:18.350 --> 00:01:21.780
different ways of doing
those APIs.

00:01:21.780 --> 00:01:23.970
So since you guys are going
to be doing your own wave

00:01:23.970 --> 00:01:26.450
servers, and presumably you're
probably going to be

00:01:26.450 --> 00:01:30.460
supporting the APIs, I just
wanted to talk briefly about

00:01:30.460 --> 00:01:33.750
some of the ideas that we had
about what features we would

00:01:33.750 --> 00:01:35.130
add or what APIs we would add.

00:01:37.700 --> 00:01:41.170
So one type of API was
the Extensions.

00:01:41.170 --> 00:01:44.130
How many of you guys actually
used the APIs

00:01:44.130 --> 00:01:45.070
during the last year?

00:01:45.070 --> 00:01:46.590
OK, a fair few.

00:01:46.590 --> 00:01:49.400
And presumably, most of you have
actually used a gadget

00:01:49.400 --> 00:01:50.980
and used a robot
in your waves.

00:01:50.980 --> 00:01:56.010
So for extensions, we have
robots, and we have gadgets.

00:01:56.010 --> 00:01:58.990
So for robots, the whole idea
was programmatic manipulation

00:01:58.990 --> 00:02:00.400
of the waves.

00:02:00.400 --> 00:02:03.950
And just to remind you what
robot code looks like, this is

00:02:03.950 --> 00:02:06.360
a really basic Python robot.

00:02:06.360 --> 00:02:09.260
We have a profile, we register
for events, we respond to the

00:02:09.260 --> 00:02:11.820
events by doing some actions
on the blip, or on the

00:02:11.820 --> 00:02:13.905
wavelet, or on the
participants.

00:02:13.905 --> 00:02:16.750
So that's our basic Robot API.

00:02:16.750 --> 00:02:19.460
So the ways we wanted to extend
it is first just in

00:02:19.460 --> 00:02:20.475
terms of features.

00:02:20.475 --> 00:02:23.290
The whole point of robots is
that they should be able to do

00:02:23.290 --> 00:02:25.100
what human users can do.

00:02:25.100 --> 00:02:29.100
And we got robots close to that,
but there was still a

00:02:29.100 --> 00:02:30.695
lot that they're missing.

00:02:30.695 --> 00:02:32.890
And if robots can't do
everything humans can do,

00:02:32.890 --> 00:02:35.580
they're really pretty
handicapped.

00:02:35.580 --> 00:02:38.490
So one of the big things was
being able to be able to

00:02:38.490 --> 00:02:43.870
manipulate the conversation
model, being able to actually

00:02:43.870 --> 00:02:45.960
move threads, move
blips around.

00:02:45.960 --> 00:02:49.170
We had really basic conversation
model support,

00:02:49.170 --> 00:02:51.280
but nothing like what
people wanted.

00:02:51.280 --> 00:02:52.910
Because they wanted robots
that could actually

00:02:52.910 --> 00:02:55.840
restructure these
conversations.

00:02:55.840 --> 00:02:58.400
Another thing was for robots to
be able to search their own

00:02:58.400 --> 00:02:59.470
waves that they were on.

00:02:59.470 --> 00:03:00.840
A user can search their waves.

00:03:00.840 --> 00:03:03.610
Robots should to be
able to as well.

00:03:03.610 --> 00:03:07.030
Another thing is having robots
actually able to

00:03:07.030 --> 00:03:08.020
be a part of a group.

00:03:08.020 --> 00:03:10.490
One of the big issues is that
with the way our permissions

00:03:10.490 --> 00:03:14.680
model worked, a robot couldn't
actually add a group to a wave

00:03:14.680 --> 00:03:17.680
if that group had restricted
permissions.

00:03:17.680 --> 00:03:19.720
Because a group is saying,
like, all right, the only

00:03:19.720 --> 00:03:22.250
people that can add to the wave
are people in this group,

00:03:22.250 --> 00:03:25.110
because that's like posting
to the wave.

00:03:25.110 --> 00:03:26.360
Spam.

00:03:29.150 --> 00:03:30.920
Getting those all day.

00:03:30.920 --> 00:03:33.370
So we were trying to come up
with a way where robots could

00:03:33.370 --> 00:03:35.620
actually be members of a group,
because that way they

00:03:35.620 --> 00:03:38.830
would have permission
to do it.

00:03:38.830 --> 00:03:39.730
So you could just
associate it.

00:03:39.730 --> 00:03:42.680
If you had addresses and
associate that with the group,

00:03:42.680 --> 00:03:44.530
maybe you could do it.

00:03:44.530 --> 00:03:45.980
That's something to think about
when you're thinking

00:03:45.980 --> 00:03:49.550
about the group support,
and also permissions.

00:03:49.550 --> 00:03:52.420
Another thing was having
access to the multiple

00:03:52.420 --> 00:03:53.570
revisions of the wave.

00:03:53.570 --> 00:03:57.150
In the current API, you just get
the version at which the

00:03:57.150 --> 00:03:58.220
event happened.

00:03:58.220 --> 00:04:01.000
But a lot of people wanted
history access, and also along

00:04:01.000 --> 00:04:02.460
with that restore access.

00:04:02.460 --> 00:04:04.930
A human user can go through
history, and they can hit

00:04:04.930 --> 00:04:06.620
Restore when they see
a version they

00:04:06.620 --> 00:04:07.880
want to go back to.

00:04:07.880 --> 00:04:11.500
That's something that robots
would find useful as well.

00:04:11.500 --> 00:04:13.910
And this is sort of related to
robots also, just related to

00:04:13.910 --> 00:04:15.230
permissions in general.

00:04:15.230 --> 00:04:18.110
In Wave, there was in the
permissions model, there's

00:04:18.110 --> 00:04:22.710
there was one owner of a wave,
and that owner had some

00:04:22.710 --> 00:04:23.620
special properties.

00:04:23.620 --> 00:04:25.890
Like only the owner could
set other people on the

00:04:25.890 --> 00:04:29.010
wave as read only.

00:04:29.010 --> 00:04:31.710
So since there was this
[INAUDIBLE] owner, we needed

00:04:31.710 --> 00:04:35.630
to be able to have robots own
waves, which they can do by

00:04:35.630 --> 00:04:36.810
creating it.

00:04:36.810 --> 00:04:38.940
But a lot of times, you'd add a
robot to a wave and actually

00:04:38.940 --> 00:04:42.060
want that robot to be an owner
and have all those owner

00:04:42.060 --> 00:04:43.630
capabilities as well.

00:04:43.630 --> 00:04:46.950
So this would need both
modification in robots and

00:04:46.950 --> 00:04:48.970
just in permissions model
generally, as you need the

00:04:48.970 --> 00:04:51.960
idea of being able to say that
there are multiple owners of a

00:04:51.960 --> 00:04:55.280
wave, and being able to delegate
and say this person

00:04:55.280 --> 00:04:57.410
can also be an owner, and
has all those owner

00:04:57.410 --> 00:05:00.140
responsibilities
and privileges.

00:05:00.140 --> 00:05:03.270
So that was all capabilities
for robots.

00:05:03.270 --> 00:05:06.170
There's also just in terms
of the API, the

00:05:06.170 --> 00:05:07.420
usability of the API.

00:05:10.160 --> 00:05:12.390
Like right now, when you wanted
to actually modify

00:05:12.390 --> 00:05:16.340
blips, you would have to create
image elements, and set

00:05:16.340 --> 00:05:17.760
their attitudes, and
append them.

00:05:17.760 --> 00:05:22.890
Or you could do this append
HTML operation.

00:05:22.890 --> 00:05:26.520
It was basically doing a copy
and paste of HTML into a wave.

00:05:26.520 --> 00:05:28.165
It was calling that code.

00:05:28.165 --> 00:05:30.110
But the problem is that
when you did this--

00:05:30.110 --> 00:05:33.110
HTML is nice, because we all
know how to write out HTML.

00:05:33.110 --> 00:05:33.690
We write it out.

00:05:33.690 --> 00:05:35.770
We've got this massive blob of
content that we're going to

00:05:35.770 --> 00:05:36.630
put into the wave.

00:05:36.630 --> 00:05:38.560
It's cool, it's styled.

00:05:38.560 --> 00:05:41.360
But it doesn't really represent
what it's going to

00:05:41.360 --> 00:05:45.000
become in wave world, so you
don't actually know for sure

00:05:45.000 --> 00:05:48.990
what the indices are going
to be when you do HTML.

00:05:48.990 --> 00:05:52.340
So we contemplated in having
some sort of Wave markup

00:05:52.340 --> 00:05:55.290
language, not to introduce
more markup languages.

00:05:55.290 --> 00:06:00.670
But some way that you could
just pass in a string that

00:06:00.670 --> 00:06:03.800
represented both your content
and your style, similar to how

00:06:03.800 --> 00:06:06.450
you do in HTML.

00:06:06.450 --> 00:06:10.630
And have that be conveyed to
the wave, and have all the

00:06:10.630 --> 00:06:14.150
indices be predictable.

00:06:14.150 --> 00:06:15.960
But we didn't actually
really figure out

00:06:15.960 --> 00:06:16.490
what that looks like.

00:06:16.490 --> 00:06:17.980
And that would also be
advantageous, because right

00:06:17.980 --> 00:06:21.220
now if you're going to do append
text and style it, and

00:06:21.220 --> 00:06:23.200
append text and style it.

00:06:23.200 --> 00:06:25.130
For example, Syntaxy
was a robot that

00:06:25.130 --> 00:06:26.600
syntax highlighted code.

00:06:26.600 --> 00:06:29.240
So it would change the color
like every three characters.

00:06:29.240 --> 00:06:32.830
But every time it would set the
style annotation for the

00:06:32.830 --> 00:06:34.780
color, that would be
another operation.

00:06:34.780 --> 00:06:37.510
So Syntaxy actually did
more operations

00:06:37.510 --> 00:06:39.570
than any other robot.

00:06:39.570 --> 00:06:40.670
Because every single
one of those

00:06:40.670 --> 00:06:41.950
was a separate operation.

00:06:41.950 --> 00:06:44.250
So the other advantage of having
wave markup is that you

00:06:44.250 --> 00:06:47.180
can do all this styling
in one operation.

00:06:47.180 --> 00:06:50.240
So it really reduces the number
of operations you're

00:06:50.240 --> 00:06:52.030
sending to the server.

00:06:52.030 --> 00:06:54.310
So it should make it
faster as well.

00:06:54.310 --> 00:06:57.510
A lot of you want to be able to
copy, like copy a blip or

00:06:57.510 --> 00:07:00.120
just copy a range, like say
from character here to

00:07:00.120 --> 00:07:01.160
character here.

00:07:01.160 --> 00:07:03.860
Copy both the contents
and the annotations.

00:07:03.860 --> 00:07:07.280
It's a very common use case to
actually want to copy stuff

00:07:07.280 --> 00:07:10.310
from one place to another.

00:07:10.310 --> 00:07:13.990
And we also talked about having
some API that didn't

00:07:13.990 --> 00:07:16.730
actually require you to host
something on a server.

00:07:16.730 --> 00:07:18.170
There were some robots
I wrote that were

00:07:18.170 --> 00:07:20.125
literally one line of code.

00:07:20.125 --> 00:07:23.430
But I had to deploy a whole App
Engine app just for that

00:07:23.430 --> 00:07:24.460
one line of code.

00:07:24.460 --> 00:07:26.920
I had one that would just remove
all the formatting from

00:07:26.920 --> 00:07:29.580
all the style annotations
from a wave.

00:07:29.580 --> 00:07:33.030
I shouldn't really have to run
a robot in a server to do

00:07:33.030 --> 00:07:35.550
that, because that's a very
simple operation.

00:07:35.550 --> 00:07:40.340
So we thought about some sort of
API that they wouldn't have

00:07:40.340 --> 00:07:42.270
to run their own server for.

00:07:42.270 --> 00:07:44.560
Now either it could be a
JavaScript API that's been

00:07:44.560 --> 00:07:47.100
sanitized, that can actually
run inside the

00:07:47.100 --> 00:07:48.950
context of the wave.

00:07:48.950 --> 00:07:52.860
Or it could be maybe a
JavaScript API that we ran on

00:07:52.860 --> 00:07:56.090
our own servers, so that at
least they didn't have to run

00:07:56.090 --> 00:07:56.440
their server.

00:07:56.440 --> 00:07:59.430
And Google Apps Script is
a good example of this.

00:07:59.430 --> 00:08:02.270
Google Apps Script is actually
right in JavaScript, and it

00:08:02.270 --> 00:08:05.380
gets run the Google Apps servers
against your current

00:08:05.380 --> 00:08:08.640
doc or spreadsheet.

00:08:08.640 --> 00:08:11.430
That was something-- and that
would also make testing a lot

00:08:11.430 --> 00:08:13.780
easier too.

00:08:13.780 --> 00:08:15.950
And it would also make it a bit
more in line with gadgets,

00:08:15.950 --> 00:08:18.300
because gadgets are all
JavaScript, right?

00:08:18.300 --> 00:08:20.330
So right now, if you wanted to
do something that involved

00:08:20.330 --> 00:08:25.470
both robots and gagets, you
had to learn Python, JSON,

00:08:25.470 --> 00:08:28.090
XML, HTML, CSS, JavaScript.

00:08:28.090 --> 00:08:30.840
So that's quite a lot
of things to learn.

00:08:30.840 --> 00:08:32.630
Granted, a lot of web
developers know it.

00:08:32.630 --> 00:08:35.530
But if you can simplify that
stack, so everything's

00:08:35.530 --> 00:08:39.023
JavaScript or something like
that, I think that would make

00:08:39.023 --> 00:08:41.960
it a lot easier for
developers.

00:08:41.960 --> 00:08:45.610
And finally, we wanted this idea
of a personal robot, or

00:08:45.610 --> 00:08:47.670
maybe you'd call it
robot as an agent.

00:08:47.670 --> 00:08:51.280
But when you put a robot on a
wave, it's basically acting as

00:08:51.280 --> 00:08:52.290
another user.

00:08:52.290 --> 00:08:54.900
And that makes sense in some
cases, but sometimes you want

00:08:54.900 --> 00:08:57.340
a robot that's just acting
on your behalf,

00:08:57.340 --> 00:08:58.550
and acting as you.

00:08:58.550 --> 00:09:02.910
So Spelly and Linky, those are
agents and they basically act

00:09:02.910 --> 00:09:04.160
like they're you.

00:09:04.160 --> 00:09:06.810
They correct spelling,
and it looks like you

00:09:06.810 --> 00:09:08.570
have that great spelling.

00:09:08.570 --> 00:09:10.705
They add links, and it looks
like you did it.

00:09:10.705 --> 00:09:13.100
So a really common time
we'd want this

00:09:13.100 --> 00:09:15.830
is for emotion robots.

00:09:15.830 --> 00:09:18.600
I would add my favorite emotion
robot to a wave,

00:09:18.600 --> 00:09:22.400
because I wanted to convert my
colons and parentheses to

00:09:22.400 --> 00:09:23.590
smiley faces.

00:09:23.590 --> 00:09:25.610
But that doesn't mean that
everybody else on the wave

00:09:25.610 --> 00:09:26.600
wanted to convert them.

00:09:26.600 --> 00:09:28.350
And in fact, a lot of
times they didn't.

00:09:28.350 --> 00:09:32.080
And I think some people might
have hated me for my prolific

00:09:32.080 --> 00:09:34.670
use of emoticon robots.

00:09:34.670 --> 00:09:37.520
So ideally I'd be able to say
like, listen, on every wave of

00:09:37.520 --> 00:09:41.420
mine, run Emoticony as me.

00:09:41.420 --> 00:09:47.050
So it would just be running as
an agent or personal robot,

00:09:47.050 --> 00:09:49.250
and represent its
actions as me.

00:09:49.250 --> 00:09:51.510
So that would require some
settings, and maybe some

00:09:51.510 --> 00:09:54.690
thought about what that means
in terms of what the

00:09:54.690 --> 00:09:56.560
robots could do.

00:09:56.560 --> 00:10:02.010
But it's definitely something
that we wanted for very simple

00:10:02.010 --> 00:10:04.792
cases, just like the
emotions one.

00:10:04.792 --> 00:10:06.760
The other way you can think
about it is just letting

00:10:06.760 --> 00:10:07.970
people write agents.

00:10:07.970 --> 00:10:10.470
There's multiple ways of
thinking about that.

00:10:10.470 --> 00:10:11.840
All right, so going
onto gadgets.

00:10:11.840 --> 00:10:16.550
So the whole point of gadgets
was to be able to do basically

00:10:16.550 --> 00:10:20.560
a little collaborative web apps
inside of a wave while

00:10:20.560 --> 00:10:25.700
still retaining wavy qualities,
and making it so we

00:10:25.700 --> 00:10:31.610
could really extend wave from
textual editing to visual

00:10:31.610 --> 00:10:33.890
editing, visual collaboration.

00:10:33.890 --> 00:10:35.370
So gadgets are really simple.

00:10:35.370 --> 00:10:39.200
I think I have an
example here.

00:10:39.200 --> 00:10:42.450
So basically, gadgets is a web
page that's embedded inside

00:10:42.450 --> 00:10:47.090
some XML metadata, and all it
does is it has a shared state

00:10:47.090 --> 00:10:47.960
which is a hash map.

00:10:47.960 --> 00:10:51.100
It submits delta to that shared
state, and on a state

00:10:51.100 --> 00:10:53.490
callback, it will
render the new

00:10:53.490 --> 00:10:54.840
information about the state.

00:10:54.840 --> 00:10:57.460
So it's a really simple API,
which is good, because it

00:10:57.460 --> 00:11:00.060
actually was pretty
easy to use.

00:11:00.060 --> 00:11:03.430
But it could be extended to make
it a bit more powerful.

00:11:03.430 --> 00:11:06.400
One thing that people found it
difficult to use for was to

00:11:06.400 --> 00:11:08.020
make games.

00:11:08.020 --> 00:11:09.880
Because it was very
easy, actually, to

00:11:09.880 --> 00:11:13.320
kind of hack the state.

00:11:13.320 --> 00:11:16.450
So one thing that would make
that better is if every state

00:11:16.450 --> 00:11:19.980
in the gadget state actually had
a modified by and a time

00:11:19.980 --> 00:11:21.980
stamp that was set
by the server.

00:11:21.980 --> 00:11:24.650
So you can imagine you have a
trivia game, and two people

00:11:24.650 --> 00:11:27.870
are trying to answer
the question.

00:11:27.870 --> 00:11:31.260
And if you don't know what time,
because this guy answers

00:11:31.260 --> 00:11:32.730
then, and guy answers then.

00:11:32.730 --> 00:11:36.180
If they come in and you set
different state keys, and the

00:11:36.180 --> 00:11:39.050
server put a time stamp and a
modified by on both of them,

00:11:39.050 --> 00:11:42.790
you can then compare them and
know for sure which user got

00:11:42.790 --> 00:11:44.870
to the server first and
say, all right, that

00:11:44.870 --> 00:11:46.370
user was the winner.

00:11:46.370 --> 00:11:49.190
So right now you'd have to do
that in JavaScript using their

00:11:49.190 --> 00:11:51.240
local time or using
some other way of

00:11:51.240 --> 00:11:52.560
getting the server time.

00:11:52.560 --> 00:11:53.720
That's pretty annoying.

00:11:53.720 --> 00:11:57.210
So modified by and time stamp
would definitely help.

00:11:57.210 --> 00:12:00.760
Some people wanted gadgets to be
able to actually listen to

00:12:00.760 --> 00:12:04.540
state from other gadgets
within the same wave.

00:12:04.540 --> 00:12:06.590
We didn't really figure out how
that would work, like if

00:12:06.590 --> 00:12:08.830
you'd have to declare multiple
gadgets as a package or

00:12:08.830 --> 00:12:09.580
something like that.

00:12:09.580 --> 00:12:12.750
But that way, you could make
more of an application inside

00:12:12.750 --> 00:12:15.930
a wave that was composed
of multiple gadgets.

00:12:15.930 --> 00:12:18.580
And then there was a lot of
stuff about user experience.

00:12:18.580 --> 00:12:21.540
So the point of these gadgets
is to take textual

00:12:21.540 --> 00:12:25.140
collaboration to visual
collaboration, while still

00:12:25.140 --> 00:12:25.830
being wavy.

00:12:25.830 --> 00:12:30.080
So we have all these things
that we were lacking that

00:12:30.080 --> 00:12:31.710
would have made gadgets
wavier.

00:12:31.710 --> 00:12:34.970
So one simple thing is just
having participant carets.

00:12:34.970 --> 00:12:36.600
So when you're in the wave,
you can see where somebody

00:12:36.600 --> 00:12:38.940
else is editing, because they
have a particular colored

00:12:38.940 --> 00:12:41.360
caret, and you see their name.

00:12:41.360 --> 00:12:43.820
Gadgets didn't have access to
those colors, and they're

00:12:43.820 --> 00:12:45.070
actually computed per wave.

00:12:48.250 --> 00:12:50.430
So they didn't have a good
way of representing them.

00:12:50.430 --> 00:12:53.360
So one simple thing is just to
pass the colors to the gadget

00:12:53.360 --> 00:12:58.030
so we can have this
consistent view.

00:12:58.030 --> 00:13:00.270
Another thing is that Wave
has this concept of

00:13:00.270 --> 00:13:01.810
edit versus view mode.

00:13:01.810 --> 00:13:03.640
There's a lot of confusion
about how to deal

00:13:03.640 --> 00:13:05.610
with this in Gadgets.

00:13:05.610 --> 00:13:09.100
Sometimes we told people that
they should only let people

00:13:09.100 --> 00:13:10.840
edit the gadget in edit mode.

00:13:10.840 --> 00:13:12.900
But there are a lot of people
that were very confused and

00:13:12.900 --> 00:13:16.080
couldn't figure out why they
couldn't edit like a map, why

00:13:16.080 --> 00:13:18.720
they couldn't add markers to the
map because they weren't

00:13:18.720 --> 00:13:20.900
in edit mode.

00:13:20.900 --> 00:13:25.250
So we never really quite
resolved whether gadgets

00:13:25.250 --> 00:13:28.440
should be able to submit
states in view mode.

00:13:28.440 --> 00:13:32.220
And that's the current way it is
now, but it's something to

00:13:32.220 --> 00:13:35.470
think about from a user
point of view.

00:13:35.470 --> 00:13:40.130
I think in Wave, now-- are we
on full wave edit mode yet?

00:13:40.130 --> 00:13:42.020
Because we recently made a
change, at least internally

00:13:42.020 --> 00:13:46.900
where when you start editing
something, the entire wave

00:13:46.900 --> 00:13:48.310
becomes editable.

00:13:48.310 --> 00:13:51.200
And I think that that makes the
gadget situation a little

00:13:51.200 --> 00:13:53.780
bit easier, because at least
you can be editing both the

00:13:53.780 --> 00:13:57.600
gadget blip and another
blip at the same time.

00:13:57.600 --> 00:13:58.975
But it is confusing.

00:13:58.975 --> 00:14:01.410
Another thing is that when you
wanted to have text inside a

00:14:01.410 --> 00:14:04.600
gadget, you couldn't have
it be wavy text.

00:14:04.600 --> 00:14:06.470
If you wanted it to be
collaborative text, you'd have

00:14:06.470 --> 00:14:09.070
to come up with your own way of
doing that on top of this

00:14:09.070 --> 00:14:11.390
simple shared state API.

00:14:11.390 --> 00:14:13.475
And you could kind of do it, but
not really that well, and

00:14:13.475 --> 00:14:15.590
it didn't feel like the same
experience that you had inside

00:14:15.590 --> 00:14:16.590
the editor.

00:14:16.590 --> 00:14:19.670
So we really wanted to be able
to say, like this part of a

00:14:19.670 --> 00:14:22.900
gadget is actually a wavy text
field, and this part of the

00:14:22.900 --> 00:14:24.080
gadget is a wavy text field.

00:14:24.080 --> 00:14:27.400
And you could have single line
text areas, multiline text

00:14:27.400 --> 00:14:31.820
areas, and those could
all be handled by OT.

00:14:31.820 --> 00:14:35.820
And you could maybe represent
them somewhere in the wavelet

00:14:35.820 --> 00:14:38.330
data documents or something like
that, and just surface

00:14:38.330 --> 00:14:41.990
them in the UI of the gadget.

00:14:41.990 --> 00:14:43.960
There's a lot of stuff
to do with sizing.

00:14:43.960 --> 00:14:46.005
There's so many different types
of gadgets out there.

00:14:46.005 --> 00:14:47.250
Some of them are very
small, but some of

00:14:47.250 --> 00:14:48.260
them are very large.

00:14:48.260 --> 00:14:50.860
Some of them are like
full-on web apps.

00:14:50.860 --> 00:14:54.280
So we really wanted the ability
to minimize, maximize,

00:14:54.280 --> 00:14:58.320
make the gadget full screen,
make the wave full screen, to

00:14:58.320 --> 00:15:01.440
really make it possible to use
those collaborative apps whole

00:15:01.440 --> 00:15:05.820
also making them not interfere
with the rest of your wave.

00:15:05.820 --> 00:15:07.910
Another thing that we wanted,
which is kind of related to

00:15:07.910 --> 00:15:09.820
this, is that there's a lot of
people who made these big,

00:15:09.820 --> 00:15:13.420
collaborative web apps, and they
wanted to use this web

00:15:13.420 --> 00:15:15.960
app gadget while also
chatting beneath it.

00:15:15.960 --> 00:15:18.190
But you'd have to use the
gadget, scroll down to the

00:15:18.190 --> 00:15:20.490
bottom, chat, use the gadget,
scroll down to

00:15:20.490 --> 00:15:21.500
the bottom, and chat.

00:15:21.500 --> 00:15:25.740
So one thing we toyed with is
the idea of a split scroll bar

00:15:25.740 --> 00:15:28.920
where you could, say, split the
scroll bar here, and then

00:15:28.920 --> 00:15:34.000
that way, you can actually chat
below the gadget, and not

00:15:34.000 --> 00:15:36.490
have to keep scrolling
back and forth.

00:15:36.490 --> 00:15:38.500
And you can see that being
useful not just for gadgets,

00:15:38.500 --> 00:15:40.510
but also for editing
a document.

00:15:40.510 --> 00:15:43.980
You have your one blip that's
your main document blip, and

00:15:43.980 --> 00:15:45.800
then beneath that maybe you
have this more dynamic

00:15:45.800 --> 00:15:46.700
conversation going on.

00:15:46.700 --> 00:15:49.220
So if you could just split the
scroll bar at these arbitrary

00:15:49.220 --> 00:15:52.490
points, and if we're going to
have a random scroll bar named

00:15:52.490 --> 00:15:54.170
Scrolly, we might as well
do something with it.

00:15:56.830 --> 00:15:59.560
It really would become a much
better experience for those

00:15:59.560 --> 00:16:01.520
type of gadgets.

00:16:01.520 --> 00:16:02.010
Diff-on-open.

00:16:02.010 --> 00:16:04.590
Diff-on-open, you know when you
open a wave, you can see

00:16:04.590 --> 00:16:06.940
what's changed by the yellow.

00:16:06.940 --> 00:16:08.190
It was kind of weird
that you couldn't

00:16:08.190 --> 00:16:09.050
see that with Gadgets.

00:16:09.050 --> 00:16:12.040
I think it was just generally a
frustrating experience with

00:16:12.040 --> 00:16:14.960
Gadgets data updates, because
your wave would go bold, and

00:16:14.960 --> 00:16:18.110
you'd click on the wave, but you
weren't really sure what

00:16:18.110 --> 00:16:20.720
had changed.

00:16:20.720 --> 00:16:23.660
We now pass in the dif that
happens so that people could

00:16:23.660 --> 00:16:24.720
do stuff with it.

00:16:24.720 --> 00:16:27.330
But we don't really have support
for diff-on-open

00:16:27.330 --> 00:16:29.990
So ideally, you would open a
wave, and if it was a gadget

00:16:29.990 --> 00:16:32.110
that changed, you would actually
see in the gadget

00:16:32.110 --> 00:16:34.810
some visual indication that
this was the changed

00:16:34.810 --> 00:16:35.710
information.

00:16:35.710 --> 00:16:39.330
Otherwise, I think users get
really frustrated clicking

00:16:39.330 --> 00:16:41.330
away, that's bold, and not
knowing what the hell

00:16:41.330 --> 00:16:43.010
happened, right?

00:16:43.010 --> 00:16:45.480
And along with that in, the
inbox, ideally, you would

00:16:45.480 --> 00:16:48.100
actually see when something
was bold, that blah, blah,

00:16:48.100 --> 00:16:49.695
blah, gadget was changed.

00:16:49.695 --> 00:16:51.370
Or blah, blah, blah,
change this gadget.

00:16:51.370 --> 00:16:54.070
So you don't even have to click
the wave to know why

00:16:54.070 --> 00:16:55.320
it's been bolded.

00:16:57.650 --> 00:17:00.910
Along with that is sometimes
when you update the gadget

00:17:00.910 --> 00:17:03.640
state, you don't actually want
the wave to go bold.

00:17:03.640 --> 00:17:07.130
You don't want to have everyone
notified that this

00:17:07.130 --> 00:17:10.950
wave has changed, because it's
really not that important of a

00:17:10.950 --> 00:17:11.950
state change.

00:17:11.950 --> 00:17:14.595
One way of doing that is letting
developers say, all

00:17:14.595 --> 00:17:19.939
right, this state change isn't
going to trigger a bolding.

00:17:19.939 --> 00:17:21.579
So we call that no echo.

00:17:21.579 --> 00:17:23.130
Another thing is
actually having

00:17:23.130 --> 00:17:24.900
different notions of state.

00:17:24.900 --> 00:17:27.440
Like there's one state that's
kind of your data state, which

00:17:27.440 --> 00:17:30.600
really represents the full data
that's in the gadget.

00:17:30.600 --> 00:17:34.410
But another state could be
the user position state.

00:17:37.870 --> 00:17:41.590
When you play Sudoku, you see
the positions of people inside

00:17:41.590 --> 00:17:45.850
the wave, and each of those
is a state update.

00:17:45.850 --> 00:17:47.340
But if you're not playing
Sudoku, you don't

00:17:47.340 --> 00:17:48.030
really care about it.

00:17:48.030 --> 00:17:49.790
The only people that care about
positions of the other

00:17:49.790 --> 00:17:51.380
people are the ones that
are looking at that

00:17:51.380 --> 00:17:52.450
wave at that time.

00:17:52.450 --> 00:17:55.120
So you could have one state
that's actually the user

00:17:55.120 --> 00:17:55.710
position state.

00:17:55.710 --> 00:17:58.510
It's like the cursor state,
which we store in annotations

00:17:58.510 --> 00:17:59.630
for the rest of the wave.

00:17:59.630 --> 00:18:03.390
And that way, if you just change
the cursor state, you

00:18:03.390 --> 00:18:05.210
wouldn't actually see
the wave go bold.

00:18:05.210 --> 00:18:07.010
It would just be transmitted
to the

00:18:07.010 --> 00:18:09.570
people that were watching.

00:18:09.570 --> 00:18:12.420
Permissions, we had on Google
Wave, we had public waves that

00:18:12.420 --> 00:18:14.460
became really popular,
and people would

00:18:14.460 --> 00:18:15.510
put gadgets in them.

00:18:15.510 --> 00:18:18.240
And unfortunately, sometimes
they'd put gadgets in them

00:18:18.240 --> 00:18:20.280
that were somewhat evil.

00:18:23.580 --> 00:18:26.260
By evil I mean like some of them
could actually redirect

00:18:26.260 --> 00:18:29.750
and break out of the
frame, and do some

00:18:29.750 --> 00:18:31.570
sort of phishing thing.

00:18:31.570 --> 00:18:34.010
Some of them just used
up lot of memory.

00:18:34.010 --> 00:18:38.320
So we wanted to do permissions
at least inside public waves,

00:18:38.320 --> 00:18:41.090
so that if there was a gadget
there, you could enable it for

00:18:41.090 --> 00:18:44.770
that wave, enable it always,
always trust ones from that

00:18:44.770 --> 00:18:46.060
author, stuff like that.

00:18:46.060 --> 00:18:48.670
Obviously, when it comes to
permissions, it all comes down

00:18:48.670 --> 00:18:52.400
to the user interface and not
being really, really annoying.

00:18:52.400 --> 00:18:56.070
So we had some drafts of
what that look like.

00:18:56.070 --> 00:19:00.300
But this depends really on
whether you're having public

00:19:00.300 --> 00:19:02.140
waves in your particular
system.

00:19:02.140 --> 00:19:05.940
Or if it's more trusted and if
all of the gadgets people are

00:19:05.940 --> 00:19:08.660
using are trusted, then maybe
you don't have that issue.

00:19:08.660 --> 00:19:10.730
But it's something to think
about, because gadgets can

00:19:10.730 --> 00:19:13.170
actually do a fair bit.

00:19:13.170 --> 00:19:15.810
Along that note, we wanted
to have cajoled gadgets.

00:19:15.810 --> 00:19:19.460
So Caja is a project to make
it possible to have safe

00:19:19.460 --> 00:19:23.090
JavaScript APIs that can
only do basically a

00:19:23.090 --> 00:19:26.096
whitelisted set of things.

00:19:26.096 --> 00:19:29.030
Because right now, we have to
run Gadgets in an iframe,

00:19:29.030 --> 00:19:32.450
because we don't want them to do
something malicious to the

00:19:32.450 --> 00:19:33.460
area around them.

00:19:33.460 --> 00:19:35.560
But the fact that we run them
in an iframe makes them

00:19:35.560 --> 00:19:37.890
actually kind of slow to load.

00:19:37.890 --> 00:19:39.210
Because we've got all
these iframes.

00:19:39.210 --> 00:19:41.910
And if you use the plus one,
gadget, sometimes there are

00:19:41.910 --> 00:19:44.600
waves that have like 100 plus
one gadgets in it, and that

00:19:44.600 --> 00:19:46.990
can get really slow to load
those 100 iframes.

00:19:46.990 --> 00:19:49.140
So ideally, for these little
gadgets that you kind of

00:19:49.140 --> 00:19:54.400
sprinkle around, you would
actually be able to not put

00:19:54.400 --> 00:19:59.120
them in an iframe, and
just render the divs.

00:19:59.120 --> 00:20:01.400
But in order to do that, you
have to use something like

00:20:01.400 --> 00:20:04.730
Caja, which will basically
sanitize the JavaScript, and

00:20:04.730 --> 00:20:07.880
make sure that it's not using
anything that it can't use.

00:20:07.880 --> 00:20:10.010
So we got pretty close to
that, actually, but not

00:20:10.010 --> 00:20:11.270
releasing it.

00:20:11.270 --> 00:20:13.200
Another thing is you might want
to actually find a way

00:20:13.200 --> 00:20:16.780
for gadgets to go offline, if
offline or mobile support is

00:20:16.780 --> 00:20:21.130
important to your particular
wave instance.

00:20:21.130 --> 00:20:23.270
And we thought you could
actually maybe even use the

00:20:23.270 --> 00:20:25.850
HTML5 application manifest for
people to declare all the

00:20:25.850 --> 00:20:27.850
resources that their
gadget uses.

00:20:27.850 --> 00:20:30.380
And then the gadget server could
actually store all those

00:20:30.380 --> 00:20:34.110
resources if you go offline,
so that you have a good

00:20:34.110 --> 00:20:35.890
experience if you're trying
to view those things.

00:20:39.510 --> 00:20:40.600
Then we had installers.

00:20:40.600 --> 00:20:43.080
So installers are the
way of actually

00:20:43.080 --> 00:20:44.520
using robots and gadgets.

00:20:44.520 --> 00:20:47.380
And basically, an installer
would put a little user

00:20:47.380 --> 00:20:50.440
interface hook somewhere
into the client.

00:20:50.440 --> 00:20:53.650
And then when you clicked it,
something would happen, like a

00:20:53.650 --> 00:20:56.040
gadget would get inserted into
the wave, or a robot would get

00:20:56.040 --> 00:20:56.900
added to the wave.

00:20:56.900 --> 00:20:58.840
Those are the very common
ways of doing it.

00:20:58.840 --> 00:21:02.160
So here we add the waffle
extension, we get a waffle on

00:21:02.160 --> 00:21:03.320
our toolbar.

00:21:03.320 --> 00:21:05.400
It inserts the waffle gadget.

00:21:05.400 --> 00:21:08.880
We add the Submitty extension,
we get a new wave dropdown,

00:21:08.880 --> 00:21:12.840
and it creates a new wave
for that robot.

00:21:12.840 --> 00:21:15.100
So this is just a way of making
extensions a lot more

00:21:15.100 --> 00:21:17.670
user friendly, so that people
didn't have to remember URLs

00:21:17.670 --> 00:21:18.810
every time they wanted
a gadget.

00:21:18.810 --> 00:21:20.470
And they didn't have to remember
addresses every time

00:21:20.470 --> 00:21:21.580
they wanted a robot.

00:21:21.580 --> 00:21:25.010
And they could make extensions
actually feel like they were a

00:21:25.010 --> 00:21:28.020
native part of the
wave client.

00:21:28.020 --> 00:21:30.640
And we did a good job
at that, but there's

00:21:30.640 --> 00:21:31.890
definitely more to do.

00:21:34.325 --> 00:21:36.700
We'll just manually go down.

00:21:36.700 --> 00:21:37.080
All right.

00:21:37.080 --> 00:21:40.280
So in fact, there are a lot more
hooks we wanted to add.

00:21:40.280 --> 00:21:45.030
So at that time, we had the hook
for the new wave menu and

00:21:45.030 --> 00:21:46.850
the hook for the
insert toolbar.

00:21:46.850 --> 00:21:48.280
But there was a lot more.

00:21:48.280 --> 00:21:51.170
And if you actually look at the
extensions docs, we did

00:21:51.170 --> 00:21:52.430
document them.

00:21:52.430 --> 00:21:54.880
A lot of these were in
experimental mode on Sandbox.

00:21:54.880 --> 00:21:56.430
They just never made it to

00:21:56.430 --> 00:21:59.560
non-experimental mode on preview.

00:21:59.560 --> 00:22:02.550
So one thing was RegEx hook, so
that when somebody types a

00:22:02.550 --> 00:22:07.010
particular pattern that an
extension recognized, the user

00:22:07.010 --> 00:22:10.550
would get reminded to
actually put that

00:22:10.550 --> 00:22:11.800
extension on the wave.

00:22:11.800 --> 00:22:13.950
So if they type a phone number,
they would get a

00:22:13.950 --> 00:22:16.810
prompt that said, do you want
to actually add the Twilio

00:22:16.810 --> 00:22:19.220
extension to this wave?

00:22:19.220 --> 00:22:21.850
So it's just a way of actually
reminding people, hey, you

00:22:21.850 --> 00:22:23.920
have an extension that can
actually deal with some

00:22:23.920 --> 00:22:25.950
information that's
in this wave.

00:22:25.950 --> 00:22:29.210
And along with that, besides
RegEx, you could also build

00:22:29.210 --> 00:22:31.350
something that recognizes
addresses, and let people

00:22:31.350 --> 00:22:33.970
register, so that they only
react when there's addresses

00:22:33.970 --> 00:22:38.090
in the wave, or just any sort
of semantic information.

00:22:38.090 --> 00:22:40.320
So that's just reminding people
that there's something

00:22:40.320 --> 00:22:43.190
useful that can be done with
that information in the wave.

00:22:43.190 --> 00:22:45.450
Another thing is an attachment
hook, so that when you add an

00:22:45.450 --> 00:22:47.990
attachment to the wave, and you
click on that attachment,

00:22:47.990 --> 00:22:49.665
you would actually get an option
to do something with

00:22:49.665 --> 00:22:50.270
that attachment.

00:22:50.270 --> 00:22:52.970
Like you could go and, maybe
if it's a photo, you can

00:22:52.970 --> 00:22:54.960
imagine people actually building
photo editors.

00:22:54.960 --> 00:22:57.390
A lot of people wanted
to be extendable

00:22:57.390 --> 00:22:59.670
photo editors for Wave.

00:22:59.670 --> 00:23:02.370
So you'd click on a picture,
and it'd be like open it in

00:23:02.370 --> 00:23:08.610
Picnik, and that attachment hook
would, maybe, insert a

00:23:08.610 --> 00:23:11.590
gadget that would let you edit
that particular attachment.

00:23:11.590 --> 00:23:12.640
Welcome panel hook.

00:23:12.640 --> 00:23:14.890
That was simply just putting a
button in the welcome panel.

00:23:14.890 --> 00:23:16.690
And that was pretty
much implemented.

00:23:16.690 --> 00:23:18.840
A right-click hook, so when you
right-click, you can have

00:23:18.840 --> 00:23:20.580
something there.

00:23:20.580 --> 00:23:21.520
A blip menu hook.

00:23:21.520 --> 00:23:26.370
Basically, anywhere in the Wave
client that there are

00:23:26.370 --> 00:23:29.790
buttons that the client
provides, that's someplace

00:23:29.790 --> 00:23:32.390
that a developer potentially
wants to hook into.

00:23:32.390 --> 00:23:35.080
So it depends what your
particular client looks like,

00:23:35.080 --> 00:23:38.280
what hooks you're going to
provide, but, really,

00:23:38.280 --> 00:23:40.600
developers wanted all of them.

00:23:40.600 --> 00:23:44.180
They wanted to be able to have
dropdowns on the toolbar.

00:23:44.180 --> 00:23:45.440
It's pretty basic.

00:23:45.440 --> 00:23:48.040
And also, a lot of them want
configuration popups.

00:23:48.040 --> 00:23:50.690
So before you insert the gadget,
set some parameters.

00:23:50.690 --> 00:23:54.290
Before you add the robot,
set some parameters.

00:23:54.290 --> 00:23:56.940
And I think you can implement
that just as actually maybe a

00:23:56.940 --> 00:24:02.730
gadget itself, so that the user
would say, toolbar hook,

00:24:02.730 --> 00:24:05.110
configuration gadget, and
then insert gadget.

00:24:05.110 --> 00:24:07.690
And then maybe the gadget would
get the configuration

00:24:07.690 --> 00:24:09.410
information in its state.

00:24:09.410 --> 00:24:11.960
I think that would actually
be pretty simple to do.

00:24:11.960 --> 00:24:15.670
Because then, you would
get experiences like--

00:24:15.670 --> 00:24:17.950
because we basically do
something similar to this when

00:24:17.950 --> 00:24:19.680
you click G+.

00:24:19.680 --> 00:24:22.830
That's kind of like a
configuration thing, where I

00:24:22.830 --> 00:24:25.510
can go and select that, and
that becomes something.

00:24:25.510 --> 00:24:27.160
So you can imagine
using something

00:24:27.160 --> 00:24:28.466
like that for a gadget.

00:24:32.560 --> 00:24:35.155
One basic thing we wanted is
that when somebody clicks a

00:24:35.155 --> 00:24:37.770
thing on the toolbar, we wanted
to actually send the

00:24:37.770 --> 00:24:40.500
position that they were in when
they clicked that to the

00:24:40.500 --> 00:24:45.810
extension, so that it could do
something like insert an image

00:24:45.810 --> 00:24:47.190
wherever they clicked.

00:24:47.190 --> 00:24:49.050
And a lot of people
just wanted to do

00:24:49.050 --> 00:24:50.470
more and more actions.

00:24:50.470 --> 00:24:52.830
We have basic actions like
insert gadget and add

00:24:52.830 --> 00:24:55.305
participant, but people said,
oh, can I add a tag?

00:24:55.305 --> 00:24:56.360
Can I set a title?

00:24:56.360 --> 00:24:57.590
Can I insert an image?

00:24:57.590 --> 00:24:59.630
So the thing is, people kept
requesting these things, and

00:24:59.630 --> 00:25:01.640
we started realizing that they
basically just wanted the

00:25:01.640 --> 00:25:04.520
Robots API inside of the
extension installer.

00:25:04.520 --> 00:25:09.110
And I didn't show it, but the
extension installer is XML.

00:25:09.110 --> 00:25:12.100
So once again, we have another
technology we're using.

00:25:12.100 --> 00:25:13.350
The other thing you could
do is make this JSON.

00:25:16.650 --> 00:25:19.192
So you could think of some way
of actually making it so you

00:25:19.192 --> 00:25:23.430
could embed robot code inside
of the extension installer

00:25:23.430 --> 00:25:25.320
instead of having to
invent new syntax

00:25:25.320 --> 00:25:26.150
for all these actions.

00:25:26.150 --> 00:25:28.280
Because a lot of these actions
are really mimicking the kind

00:25:28.280 --> 00:25:30.120
of things that robots
can already do.

00:25:30.120 --> 00:25:33.440
So you might want to actually
try and bring together Robot

00:25:33.440 --> 00:25:36.540
API with this extension action
API, and maybe have it be the

00:25:36.540 --> 00:25:38.260
same thing.

00:25:38.260 --> 00:25:40.490
And then if you have it be
JSON, then everything's

00:25:40.490 --> 00:25:42.240
JavaScript, and, whoo.

00:25:42.240 --> 00:25:45.025
Another thing is having
a proper gallery.

00:25:45.025 --> 00:25:47.895
We decided to do this kind of
weird thing where our gallery

00:25:47.895 --> 00:25:54.190
is actually are wave based,
and eveything's in a wave.

00:25:54.190 --> 00:25:56.030
And that was cool, I guess.

00:25:56.030 --> 00:25:58.640
But the problem with this is
that that meant we didn't have

00:25:58.640 --> 00:26:02.110
ratings, we didn't have reviews,
and it wasn't obvious

00:26:02.110 --> 00:26:05.840
how to actually implement
ratings and reviews on top of

00:26:05.840 --> 00:26:07.740
a Wave based gallery.

00:26:07.740 --> 00:26:10.070
I think, actually, if you're
really gong to have a gallery,

00:26:10.070 --> 00:26:11.550
you might want to just do
it outside of Wave.

00:26:11.550 --> 00:26:14.320
Here's an example of what it
actually could look like.

00:26:14.320 --> 00:26:16.070
So these are all the things.

00:26:16.070 --> 00:26:16.290
And look at that.

00:26:16.290 --> 00:26:19.490
I have categories over here,
because that's something that

00:26:19.490 --> 00:26:23.440
we never really got to was
having categories.

00:26:23.440 --> 00:26:25.400
And then when you actually
clicked on these, you could

00:26:25.400 --> 00:26:28.670
go, and you could rate them,
and add comments, and you

00:26:28.670 --> 00:26:29.990
could see the number of users.

00:26:29.990 --> 00:26:33.390
So I think that if you're going
to have extensions, you

00:26:33.390 --> 00:26:36.120
might want to just do an outside
of wave gallery.

00:26:36.120 --> 00:26:38.700
And then use something like
the Wave This API to let

00:26:38.700 --> 00:26:42.550
people try the gadgets
or install them.

00:26:47.080 --> 00:26:48.830
So this is about
the discovery.

00:26:48.830 --> 00:26:50.880
We also wanted it so
that if you saw--

00:26:50.880 --> 00:26:53.150
if you were in a wave, and
somebody was using a gadget in

00:26:53.150 --> 00:26:55.520
the wave, you just click on that
gadget and say, I want

00:26:55.520 --> 00:26:57.880
that gadget, I want
that extension.

00:26:57.880 --> 00:27:00.810
Maybe on every wave, you'd
see a list that said the

00:27:00.810 --> 00:27:03.390
extensions that are being used
on this wave are this, and

00:27:03.390 --> 00:27:05.440
this, and this, and you would
get a link to install it.

00:27:05.440 --> 00:27:09.310
Basically, if a user sees
something being used on a wave

00:27:09.310 --> 00:27:11.220
that somebody else has put
there, they should have a

00:27:11.220 --> 00:27:14.630
really easy way of installing
that themselves.

00:27:14.630 --> 00:27:16.320
So that would help
with discovery.

00:27:16.320 --> 00:27:18.780
We had cool extensions, but I
don't actually think that they

00:27:18.780 --> 00:27:21.500
got as much usage as they
deserved because

00:27:21.500 --> 00:27:23.440
of discovery ability.

00:27:23.440 --> 00:27:24.740
So those are extensions API.

00:27:24.740 --> 00:27:28.350
We also have the Embed API,
which is really just iframing

00:27:28.350 --> 00:27:30.990
the wave panel and putting
it on the page using the

00:27:30.990 --> 00:27:33.900
JavaScript API.

00:27:33.900 --> 00:27:36.660
So this was the JavaScript
API.

00:27:36.660 --> 00:27:40.110
This was actually version two
of the JavaScript API.

00:27:40.110 --> 00:27:42.865
And I think this is one of the
starter project for wave in

00:27:42.865 --> 00:27:45.310
the box, is actually
to implement this.

00:27:45.310 --> 00:27:47.910
But yeah, it's basically create
a new wave panel and

00:27:47.910 --> 00:27:49.490
load this wave.

00:27:49.490 --> 00:27:51.550
And you have a couple of embed
options, like showing the

00:27:51.550 --> 00:27:52.610
header and footer.

00:27:52.610 --> 00:27:54.240
But it's very basic API.

00:27:57.060 --> 00:27:59.770
Some people would use it for it
embedding things on their

00:27:59.770 --> 00:28:02.650
wiki, in their content
management system, for doing

00:28:02.650 --> 00:28:04.760
live waving.

00:28:04.760 --> 00:28:07.520
And, really, when it came to
features for the Embed API, it

00:28:07.520 --> 00:28:08.230
was just all about

00:28:08.230 --> 00:28:10.560
customization of the user interface.

00:28:10.560 --> 00:28:12.090
People wanted different
color schemes.

00:28:12.090 --> 00:28:16.100
Not every website is this color
of blue that Google uses

00:28:16.100 --> 00:28:18.730
everywhere.

00:28:18.730 --> 00:28:20.120
And what they're displaying.

00:28:20.120 --> 00:28:22.230
People want to toggle this
off and that off.

00:28:22.230 --> 00:28:23.640
They don't want to show
blip contributors.

00:28:23.640 --> 00:28:25.500
They don't want to
time stamps.

00:28:25.500 --> 00:28:29.590
They don't want to show
the participant panel.

00:28:29.590 --> 00:28:31.512
Basically anything that you
could possibly toggle on and

00:28:31.512 --> 00:28:34.370
off, they want to toggle
on and off.

00:28:34.370 --> 00:28:37.460
For sizing, it was kind of
awkward to embed wave, because

00:28:37.460 --> 00:28:39.210
you had to guess what size
they were going to be.

00:28:39.210 --> 00:28:41.440
But you can't guess what size a
wave is going to be, because

00:28:41.440 --> 00:28:43.460
people can add more stuff
to that wave.

00:28:43.460 --> 00:28:47.280
So ideally, you could actually
say, just auto-size this wave

00:28:47.280 --> 00:28:50.680
to be as big as it has to
be as people add to it.

00:28:50.680 --> 00:28:51.770
Wouldn't be too hard to do.

00:28:51.770 --> 00:28:55.040
People wanted to be able to
have comments collapse by

00:28:55.040 --> 00:28:57.550
default when they
embed something.

00:28:57.550 --> 00:29:01.660
I wanted a kind of user
interface which would be ideal

00:29:01.660 --> 00:29:05.980
for encouraging people to
only follow a wave.

00:29:05.980 --> 00:29:08.190
For the kind of waves that
are read only, and you're

00:29:08.190 --> 00:29:11.920
embedding them so that people
can follow updates to them.

00:29:11.920 --> 00:29:15.450
For the API change log, I would
like to just embed that,

00:29:15.450 --> 00:29:17.790
and there would just be a big
follow button on that and

00:29:17.790 --> 00:29:18.410
nothing else.

00:29:18.410 --> 00:29:19.780
None of the rest of the UI.

00:29:19.780 --> 00:29:21.350
Because there's nothing else
they can really do to that

00:29:21.350 --> 00:29:23.366
wave besides follow it.

00:29:23.366 --> 00:29:25.660
So that's kind of using
waves as RSS

00:29:25.660 --> 00:29:28.160
feeds or Twitter streams.

00:29:28.160 --> 00:29:31.980
And then people also want to
customize which part of the

00:29:31.980 --> 00:29:32.860
wave they're seeing.

00:29:32.860 --> 00:29:36.230
So being able to jump to a
particular blip, or even only

00:29:36.230 --> 00:29:38.370
embedding that particular
blip.

00:29:38.370 --> 00:29:41.930
And we did actually introduce
blip refs a few months ago,

00:29:41.930 --> 00:29:44.010
which means that you have
an ID for each blip.

00:29:44.010 --> 00:29:47.660
So this actually wouldn't be too
difficult to do, now that

00:29:47.660 --> 00:29:48.860
we have that.

00:29:48.860 --> 00:29:51.040
And then people want to embed
the search panel as well.

00:29:51.040 --> 00:29:52.880
We actually started with the
ability to embed the search

00:29:52.880 --> 00:29:55.810
panel, but decided to focus
on just the single wave.

00:29:55.810 --> 00:29:57.870
Shouldn't be too hard
to do it, though.

00:29:57.870 --> 00:29:59.860
Then we had the Data API, which
is basically the Robot

00:29:59.860 --> 00:30:01.960
API, but you authenticate
it as a user.

00:30:01.960 --> 00:30:05.270
And here I would say the feature
requests are largely

00:30:05.270 --> 00:30:07.620
the same as the Robot API.

00:30:07.620 --> 00:30:10.750
They wanted a bit more in terms
of realtime operations

00:30:10.750 --> 00:30:13.010
and editing, because people
are using the Data API to

00:30:13.010 --> 00:30:14.360
write their own clients.

00:30:14.360 --> 00:30:17.250
But besides that, since it is
the same API, it was basically

00:30:17.250 --> 00:30:19.331
the same requests.

00:30:19.331 --> 00:30:23.020
So besides those APIs, some
other things we talked about.

00:30:23.020 --> 00:30:23.950
Forms.

00:30:23.950 --> 00:30:28.010
A lot of people were using Wave
to do forms, collecting

00:30:28.010 --> 00:30:32.680
information from people, and
processing that, adding some

00:30:32.680 --> 00:30:33.660
people on there.

00:30:33.660 --> 00:30:36.930
So we did have form
elements in Wave.

00:30:36.930 --> 00:30:38.680
There was, like, input
and password and

00:30:38.680 --> 00:30:42.400
radio, and all of that.

00:30:42.400 --> 00:30:43.880
So that was one way
of doing forms.

00:30:43.880 --> 00:30:46.870
But some people also did
forms as gadgets.

00:30:46.870 --> 00:30:48.820
Because then if you did a form
as a gadget, you could

00:30:48.820 --> 00:30:54.240
implement your own simple
JavaScript stuff to say, oh,

00:30:54.240 --> 00:30:55.880
if they did this then we're
going to show this.

00:30:55.880 --> 00:30:57.410
And if they said this, we're
going to know this.

00:30:57.410 --> 00:30:59.490
And we do some client
side verification.

00:30:59.490 --> 00:31:01.970
So there were kind of two
competing ways of doing forms.

00:31:04.610 --> 00:31:07.350
In the end, we were thinking
that the best way is probably

00:31:07.350 --> 00:31:10.600
still as gadgets so that
you have more control.

00:31:10.600 --> 00:31:15.860
And also the other thing with a
gadget is that you keep the

00:31:15.860 --> 00:31:18.580
arrangements of everything
in the gadget.

00:31:18.580 --> 00:31:19.680
So this is what we
were thinking.

00:31:19.680 --> 00:31:21.070
Now I just remembered.

00:31:21.070 --> 00:31:23.870
We were thinking for a form, you
want to have a form, and

00:31:23.870 --> 00:31:25.190
you want people to fill
out the form.

00:31:25.190 --> 00:31:27.370
So you do want them to be
able to edit the wave.

00:31:27.370 --> 00:31:29.960
But you don't actually want them
to be able to move around

00:31:29.960 --> 00:31:31.350
the elements in the wave.

00:31:31.350 --> 00:31:34.550
You don't want them to move this
form element up here, and

00:31:34.550 --> 00:31:37.926
you don't want them to delete
the gadget that is the form.

00:31:37.926 --> 00:31:40.030
Because right now, if they can
edit the wave, they can edit

00:31:40.030 --> 00:31:40.750
everything.

00:31:40.750 --> 00:31:42.940
So we were thinking, actually,
that the owner of the wave

00:31:42.940 --> 00:31:46.570
could lock certain elements in
the wave, and say all right,

00:31:46.570 --> 00:31:47.940
this gadget is locked.

00:31:47.940 --> 00:31:50.160
They can't move it, they
can't delete it.

00:31:50.160 --> 00:31:53.570
Or say, this input element,
this text area is locked.

00:31:53.570 --> 00:31:54.810
They can't move it, and
they can't delete it.

00:31:54.810 --> 00:31:57.620
So then, you can keep the
structure of your wave, and

00:31:57.620 --> 00:31:59.703
share that with somebody,
without worrying that they're

00:31:59.703 --> 00:32:02.250
going to accidentally
delete parts of it.

00:32:02.250 --> 00:32:06.190
So it's almost like the
permission to add to

00:32:06.190 --> 00:32:08.760
something, but not take
away from it.

00:32:08.760 --> 00:32:13.120
and that can apply to more
than just forms.

00:32:13.120 --> 00:32:15.660
And we're also thinking for
gadgets, right now gadgets

00:32:15.660 --> 00:32:18.060
have a shared state which
are subchildren

00:32:18.060 --> 00:32:19.210
of the gadget element.

00:32:19.210 --> 00:32:21.590
Another thing you could do is
actually just sync the gadget

00:32:21.590 --> 00:32:24.570
state to data documents, because
it's very similar.

00:32:24.570 --> 00:32:27.350
Data documents are basically
like hash maps of key values.

00:32:27.350 --> 00:32:30.930
So you could actually have the
gadget state tied to these

00:32:30.930 --> 00:32:31.670
data documents.

00:32:31.670 --> 00:32:34.050
And then, it becomes a little
bit easier to interact with

00:32:34.050 --> 00:32:36.286
them as a robot.

00:32:36.286 --> 00:32:38.940
Another thing is that Dan was
actually a big fan of getting

00:32:38.940 --> 00:32:41.850
developers to somehow use the
Doodad API, so that they

00:32:41.850 --> 00:32:43.400
weren't using gadgets
to do everything.

00:32:43.400 --> 00:32:45.630
So they're actually making their
own doodads to do stuff.

00:32:45.630 --> 00:32:48.010
And that would make it probably
integrate a bit

00:32:48.010 --> 00:32:51.230
better with the rest
of the wave.

00:32:51.230 --> 00:32:53.260
We were playing with, actually,
wave templates,

00:32:53.260 --> 00:32:55.850
which I saw the demo,
but didn't

00:32:55.850 --> 00:32:57.110
actually see how it worked.

00:32:57.110 --> 00:33:01.840
But basically you could mix and
match HTML with elements

00:33:01.840 --> 00:33:04.910
of the wave so that you would
open up a wave and it would

00:33:04.910 --> 00:33:07.250
look like a blog page, but
then parts of it would

00:33:07.250 --> 00:33:10.280
actually be edible parts
of the wave.

00:33:10.280 --> 00:33:13.150
And that was using Caja, the
thing we talked about earlier.

00:33:13.150 --> 00:33:17.470
But I don't really know exactly
how it was working.

00:33:17.470 --> 00:33:18.650
But it looked cool.

00:33:18.650 --> 00:33:22.260
Because that way, people would
really have big control over

00:33:22.260 --> 00:33:25.270
style of waves, and be
able to do stuff.

00:33:25.270 --> 00:33:28.630
And then we're also thinking of
doing a search, like inbox

00:33:28.630 --> 00:33:29.620
rendering API.

00:33:29.620 --> 00:33:32.750
So right now, your search
results are

00:33:32.750 --> 00:33:34.740
rendered the same here.

00:33:34.740 --> 00:33:37.930
But imagine if a developer
wanted to actually do

00:33:37.930 --> 00:33:40.000
something like the extensions
gallery.

00:33:40.000 --> 00:33:42.330
So they wanted this custom
display, where you have the

00:33:42.330 --> 00:33:44.520
thumbnail, the titles,
blah, blah, blah.

00:33:44.520 --> 00:33:49.420
So we can actually have an API
where you hand the developer

00:33:49.420 --> 00:33:51.580
the search results, or one
search result, and the

00:33:51.580 --> 00:33:54.710
developer would say, render each
search result like this.

00:33:54.710 --> 00:33:59.420
Maybe they'd specify some HTML,
some template, and that

00:33:59.420 --> 00:34:01.390
way, you could actually
do custom displays for

00:34:01.390 --> 00:34:01.930
extensions.

00:34:01.930 --> 00:34:03.600
Like a to-do list extension.

00:34:03.600 --> 00:34:06.550
When you click on your items
that you have to do, it would

00:34:06.550 --> 00:34:08.510
be useful if a to-do list
extension that could actually

00:34:08.510 --> 00:34:13.520
give you a panel here that you
could actually sort your tasks

00:34:13.520 --> 00:34:18.159
by priority, and actually
visualize when they're due on

00:34:18.159 --> 00:34:20.600
the side here, instead
of having them

00:34:20.600 --> 00:34:21.909
look like normal waves.

00:34:21.909 --> 00:34:26.440
So that, I think, would have
enabled people to really

00:34:26.440 --> 00:34:30.439
customize Wave a lot more
for particular cases.

00:34:34.570 --> 00:34:39.159
So those are some of the
ones I was thinking of.

00:34:39.159 --> 00:34:42.639
But the cool thing is that we
were tracking all of our bugs

00:34:42.639 --> 00:34:44.960
and feature requests
externally.

00:34:44.960 --> 00:34:48.400
So if you are playing with the
APIs, you might want to check

00:34:48.400 --> 00:34:49.100
out that list.

00:34:49.100 --> 00:34:51.139
Some of these things are
actually really basic things

00:34:51.139 --> 00:34:54.169
that if you guys are supporting
the APIs, you

00:34:54.169 --> 00:34:55.860
should look at immediately.

00:34:55.860 --> 00:34:59.695
But some of them are somewhat
farther out there, or just

00:34:59.695 --> 00:35:01.246
restructurings of the
API entirely.

00:35:03.780 --> 00:35:06.280
The APIs are cool.

00:35:06.280 --> 00:35:09.700
I encourage you to actually just
think about what kind of

00:35:09.700 --> 00:35:12.350
apps you want developers
to do.

00:35:12.350 --> 00:35:14.500
Think about whether your
developers are internal or

00:35:14.500 --> 00:35:16.970
external, how much
you trust them.

00:35:16.970 --> 00:35:21.640
And that can influence what you
actually do with the API.

00:35:21.640 --> 00:35:22.380
All right.

00:35:22.380 --> 00:35:24.480
Thanks.

00:35:24.480 --> 00:35:26.169
[APPLAUSE]

