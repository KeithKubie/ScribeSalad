WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:02.930
Great, we've learned so
much about efficiency.

00:00:02.930 --> 00:00:06.689
When you look at two pieces of code you
can maybe tell which one is going to be

00:00:06.689 --> 00:00:09.400
faster and
which one is going to be slower, but

00:00:09.400 --> 00:00:14.200
how do we say definitively which one
is faster and which one is slower, and

00:00:14.200 --> 00:00:17.660
how do we communicate that with our
coworkers and the people around us?

00:00:17.660 --> 00:00:22.330
We can describe efficiency of code
with something called Big O Notation.

00:00:22.330 --> 00:00:25.180
The name is odd if you're hearing it for
the first time but

00:00:25.180 --> 00:00:27.320
it turns out to be a very
straightforward name.

00:00:28.480 --> 00:00:33.170
Every time you use this notation you
literally write a capital letter O,

00:00:33.170 --> 00:00:36.880
parentheses and some algebraic
expression inside the parentheses.

00:00:36.880 --> 00:00:40.770
This is the algebraic expression is
always going to be a mathematical

00:00:40.770 --> 00:00:45.230
function of the variable n, and
such as some of these examples.

00:00:45.230 --> 00:00:49.830
As you can see, these all contain
algebraic expressions with the letter n.

00:00:49.830 --> 00:00:52.000
The only exception is
this guy right here.

00:00:53.360 --> 00:00:56.800
Yes the number one still counts.

00:00:56.800 --> 00:01:01.549
It's just another way to rate 0n + 1,
so this is a value we can still use.

00:01:02.740 --> 00:01:06.500
So what does the algebraic
expression mean in this case?

00:01:06.500 --> 00:01:11.900
Well n represents the length
of an input to your function.

00:01:11.900 --> 00:01:15.120
Let's say you received a secret coded
message from one of your friends and

00:01:15.120 --> 00:01:18.670
a cipher that tells you
which letter maps to what.

00:01:18.670 --> 00:01:22.270
You want to automatically
decode the coded messages

00:01:22.270 --> 00:01:24.300
with the cipher your friend gave you, so

00:01:24.300 --> 00:01:27.640
you write some pseudocode to
figure out how you can do that.

00:01:28.840 --> 00:01:32.820
You take a string input,
you iterate through it and

00:01:32.820 --> 00:01:37.280
change each letter based on the cipher,
and then you output a new message.

00:01:37.281 --> 00:01:42.190
The pseudocode shows you what
it might actually look like.

00:01:42.190 --> 00:01:42.830
Okay.
So

00:01:42.830 --> 00:01:44.660
to get a sense of the time efficiency,

00:01:44.660 --> 00:01:47.649
we're just going to count
up the number of lines.

00:01:47.650 --> 00:01:50.550
Creating an output string and
returning an output string

00:01:50.550 --> 00:01:53.619
each only need to happen once
every time the function is run.

00:01:54.750 --> 00:01:58.890
To represent that, we can go ahead and
add a 2 to our efficiency.

00:01:58.890 --> 00:02:00.920
Now both lines inside the for

00:02:00.920 --> 00:02:04.520
loop have to get run for
every letter in the input.

00:02:04.520 --> 00:02:08.948
For those we can add a 2n since 2
is the number of letters in our

00:02:08.949 --> 00:02:13.380
input string and we have two lines
that need to get run for each one.

00:02:13.380 --> 00:02:15.180
Hopefully, the way we count up lines and

00:02:15.180 --> 00:02:19.490
turn it into something in Big O notation
is starting to make sense to you.

00:02:19.490 --> 00:02:21.910
Let's take a look at some examples.

00:02:21.910 --> 00:02:26.140
If our input string had ten letters, the
calculation would look something like

00:02:26.140 --> 00:02:28.519
this and
we would end up with the value 22.

00:02:28.520 --> 00:02:33.210
To get the actual efficiency,
you can multiply 22 times

00:02:33.210 --> 00:02:36.674
the amount of time it takes for your
computer to run one line of of code.

00:02:37.900 --> 00:02:42.120
If the input string was 1 million
you would have to multiply 2 million

00:02:42.120 --> 00:02:45.830
times the amount of time it takes for
your computer to do a computation.

00:02:45.830 --> 00:02:47.740
There you go,
looks like you've got the basics down.

