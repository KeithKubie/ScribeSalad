WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:00.760
SETH LADD: Hi.

00:00:00.760 --> 00:00:03.550
Welcome to this Dart
Q&amp;A on GDL.

00:00:03.550 --> 00:00:04.520
My name is Seth Ladd.

00:00:04.520 --> 00:00:06.600
I'm a developer advocate
with the Chrome team.

00:00:06.600 --> 00:00:09.330
And we're joined here today
with two special guests--

00:00:09.330 --> 00:00:13.490
Gilad Bracha, Dart language spec
lead, and JJ Behrens, a

00:00:13.490 --> 00:00:15.260
developer advocate joining
with the Dart

00:00:15.260 --> 00:00:16.500
team very soon, actually.

00:00:16.500 --> 00:00:17.940
JJ BEHRENS: Yeah, very
excited about that.

00:00:17.940 --> 00:00:18.580
SETH LADD: Very cool.

00:00:18.580 --> 00:00:20.630
Well, we kind of have a short
amount of time. here.

00:00:20.630 --> 00:00:22.460
So we're going to get to it and
answer all these questions

00:00:22.460 --> 00:00:25.000
that you had in our moderator
for this GDL session.

00:00:25.000 --> 00:00:29.600
So right at the top, did they
find the Higgs boson today?

00:00:29.600 --> 00:00:30.830
Gilad.

00:00:30.830 --> 00:00:32.535
GILAD BRACHA: I didn't
follow that.

00:00:32.535 --> 00:00:33.010
SETH LADD: Oh, it
just came out.

00:00:33.010 --> 00:00:33.940
GILAD BRACHA: But they
would have done it.

00:00:33.940 --> 00:00:36.590
If they'd used Dart, they'd
have done it faster.

00:00:36.590 --> 00:00:37.360
SETH LADD: Absolutely.

00:00:37.360 --> 00:00:39.380
Well, I think they're going to
announce that coming up soon,

00:00:39.380 --> 00:00:39.430
so that's good.

00:00:39.430 --> 00:00:39.830
GILAD BRACHA: Cool.

00:00:39.830 --> 00:00:41.970
SETH LADD: First adopter,
there you go.

00:00:41.970 --> 00:00:43.580
Oh, wait that's not on the--

00:00:43.580 --> 00:00:48.710
sorry, OK, the moderator says,
Golgote from Paris.

00:00:48.710 --> 00:00:51.090
"I'd like to develop apps
for Android but

00:00:51.090 --> 00:00:52.040
I'm allergic to Java.

00:00:52.040 --> 00:00:54.170
Is there any chance to see
Google eat its own dog food

00:00:54.170 --> 00:00:57.350
someday and provide a complete
Android SDK for Dart?"

00:00:57.350 --> 00:00:59.550
Well, we're not on
the Android team.

00:00:59.550 --> 00:01:01.850
We're part of the Dart team,
which is on Chrome.

00:01:01.850 --> 00:01:03.310
We've heard this
request a lot.

00:01:03.310 --> 00:01:05.610
But I know that the Dart project
is focused squarely on

00:01:05.610 --> 00:01:07.640
making a fantastic development
experience

00:01:07.640 --> 00:01:10.330
for modern web apps.

00:01:10.330 --> 00:01:12.330
JJ BEHRENS: And that would
extend to all the mobile

00:01:12.330 --> 00:01:14.900
devices, not just Android, as
much as we love Android.

00:01:14.900 --> 00:01:16.660
But we'd like to work
everywhere.

00:01:16.660 --> 00:01:17.380
SETH LADD: Excellent point.

00:01:17.380 --> 00:01:20.260
We're all modern browsers.

00:01:20.260 --> 00:01:23.590
John E from Texas asks, "I'd
love to hear more about the

00:01:23.590 --> 00:01:27.922
roadmap to bring Dart closer to
the Google API ecosystem."

00:01:27.922 --> 00:01:29.460
Well, some good news there.

00:01:29.460 --> 00:01:32.320
You probably see an API console
or explorer that

00:01:32.320 --> 00:01:35.600
Google has for a countless
number of APIs.

00:01:35.600 --> 00:01:40.540
We are working on easy ways to
integrate your Dart app with

00:01:40.540 --> 00:01:41.780
our API services.

00:01:41.780 --> 00:01:42.880
So we're still working
on that.

00:01:42.880 --> 00:01:45.950
But we will make it easier for
you to plug into the existing

00:01:45.950 --> 00:01:48.500
Google API set, like YouTube,
I think, right?

00:01:48.500 --> 00:01:51.090
JJ BEHRENS: Yeah, I love that
new API infrastructure, where

00:01:51.090 --> 00:01:54.790
you could have all the different
APIs kind of behave

00:01:54.790 --> 00:01:56.380
in similar ways.

00:01:56.380 --> 00:01:58.810
And have one client library
to rule them all.

00:01:58.810 --> 00:01:59.540
SETH LADD: Yes.

00:01:59.540 --> 00:02:00.550
So we're definitely
working on that.

00:02:00.550 --> 00:02:03.010
We hear your call.

00:02:03.010 --> 00:02:06.730
This fine gentleman Seth Ladd
writes, "I remember when Dart

00:02:06.730 --> 00:02:08.229
was first announced,
it generated a lot

00:02:08.229 --> 00:02:09.229
of JavaScript code.

00:02:09.229 --> 00:02:11.890
What's the latest on the Dart to
JavaScript compiler?" Have

00:02:11.890 --> 00:02:13.360
you been following
that at all?

00:02:13.360 --> 00:02:16.200
GILAD BRACHA: Well, we've been
moving to this new compiler.

00:02:16.200 --> 00:02:18.830
Dart to JS, which is actually
essentially, even though the

00:02:18.830 --> 00:02:21.880
project's very young, the third
generation of our Dart

00:02:21.880 --> 00:02:23.130
to JavaScript compiler.

00:02:25.670 --> 00:02:27.020
I know they're working
on that.

00:02:27.020 --> 00:02:30.830
They're not where they want to
be yet, in some ways, because

00:02:30.830 --> 00:02:32.160
we're getting the
semantics right.

00:02:32.160 --> 00:02:34.620
It's actually getting, in some
ways, a little bit worse in

00:02:34.620 --> 00:02:35.270
some cases.

00:02:35.270 --> 00:02:40.670
But Kasper's on it, and I'm
confident that these numbers

00:02:40.670 --> 00:02:42.930
will keep improving over time.

00:02:42.930 --> 00:02:44.780
JJ BEHRENS: So, Gilad, I know
that we're always talking

00:02:44.780 --> 00:02:46.940
about this weird thing
called tree shaking.

00:02:46.940 --> 00:02:50.250
And I know we have a lot of tree
huggers here at Google,

00:02:50.250 --> 00:02:52.650
but I'm pretty sure that's not
what we're talking about.

00:02:52.650 --> 00:02:55.820
GILAD BRACHA: Right, so this is
basically in the interest

00:02:55.820 --> 00:02:59.550
of minimizing the amount of code
that gets shipped down to

00:02:59.550 --> 00:03:00.540
the browser.

00:03:00.540 --> 00:03:04.230
In your program, if you do an
analysis, you can often find

00:03:04.230 --> 00:03:07.165
that the tree-- the abstract
syntax tree, basically, that

00:03:07.165 --> 00:03:08.660
you parse for your program--

00:03:08.660 --> 00:03:10.240
contains lots of pieces
that you're not

00:03:10.240 --> 00:03:11.860
actually going to use.

00:03:11.860 --> 00:03:15.220
And so you want to shake the
tree and get them to fall off

00:03:15.220 --> 00:03:16.690
so that you can ship
less code.

00:03:16.690 --> 00:03:20.430
So it's a way of basically
reducing the code size.

00:03:20.430 --> 00:03:22.940
SETH LADD: I'd actually take
that and segue into a new

00:03:22.940 --> 00:03:24.280
feature that we've working
on a long time.

00:03:24.280 --> 00:03:27.925
Mirrors, which is, I guess, the
Dart way to do reflection.

00:03:27.925 --> 00:03:29.550
But I think there's an
interesting intersection there

00:03:29.550 --> 00:03:30.170
with tree shaking.

00:03:30.170 --> 00:03:30.840
Is that right?

00:03:30.840 --> 00:03:31.760
GILAD BRACHA: Right.

00:03:31.760 --> 00:03:33.150
Reflection makes--

00:03:33.150 --> 00:03:36.220
well, they make each other
harder, basically.

00:03:36.220 --> 00:03:40.180
But basically what happens is
if you're doing reflection,

00:03:40.180 --> 00:03:43.420
you may have code that you're
calling reflectively that the

00:03:43.420 --> 00:03:45.120
static analysis can't find.

00:03:45.120 --> 00:03:48.420
And so either it can't tree
shake, which is bad because

00:03:48.420 --> 00:03:49.330
your code will grow.

00:03:49.330 --> 00:03:51.940
Or you may find that you had
this thing you were going to

00:03:51.940 --> 00:03:54.340
reflect on that was written in
your file but didn't get

00:03:54.340 --> 00:03:57.960
shipped down to the browser.

00:03:57.960 --> 00:04:01.730
And so we're going to have
mechanisms to let you say

00:04:01.730 --> 00:04:05.310
that, even though this isn't
statically in my code, I

00:04:05.310 --> 00:04:08.760
expect this to not
be shaken away.

00:04:08.760 --> 00:04:10.770
The exact nature of that
mechanism is still being

00:04:10.770 --> 00:04:12.320
debated, but we're aware
of the problem.

00:04:12.320 --> 00:04:13.310
It's one of many.

00:04:13.310 --> 00:04:14.990
It makes life interesting.

00:04:14.990 --> 00:04:16.230
JJ BEHRENS: Great.

00:04:16.230 --> 00:04:18.040
SETH LADD: Moving back to the
moderator, Hussain writes,

00:04:18.040 --> 00:04:20.589
"When will we see a Dart VM
as a flag in Chrome and

00:04:20.589 --> 00:04:21.589
ChromeOS?"

00:04:21.589 --> 00:04:23.050
JJ BEHRENS: Oh, that's
exciting.

00:04:23.050 --> 00:04:25.570
SETH LADD: Well, we have a Dart
virtual machine in what

00:04:25.570 --> 00:04:27.730
we affectionately call Dartium
today, which ships as part of

00:04:27.730 --> 00:04:28.770
our editor download.

00:04:28.770 --> 00:04:30.930
And this is a build of Chromium
with the Dart VM

00:04:30.930 --> 00:04:31.880
embedded right in it.

00:04:31.880 --> 00:04:35.700
And so you can run your Dart
programs directly inside a

00:04:35.700 --> 00:04:36.830
build of Chromium.

00:04:36.830 --> 00:04:37.820
So we're on track.

00:04:37.820 --> 00:04:40.820
And it's part of the plan to
ship Dart VM inside of Chrome.

00:04:40.820 --> 00:04:41.180
When?

00:04:41.180 --> 00:04:41.910
It's hard to tell.

00:04:41.910 --> 00:04:44.290
But the best thing you can do
to help make that happen is

00:04:44.290 --> 00:04:47.290
download the editor, play with
Dartium, and help us get there

00:04:47.290 --> 00:04:48.470
even faster.

00:04:48.470 --> 00:04:51.330
JJ BEHRENS: Yeah, I know that
when they initially hired me

00:04:51.330 --> 00:04:53.840
onto the Dart team, part of the
reason they hired me is

00:04:53.840 --> 00:04:55.085
I'm a fairly big guy.

00:04:55.085 --> 00:04:55.980
I'm a lot bigger
than you guys.

00:04:55.980 --> 00:04:58.270
And I think that's going to
be helpful in case any

00:04:58.270 --> 00:05:01.670
PMs get in our way.

00:05:01.670 --> 00:05:05.890
SETH LADD: OK, "Will there be
a Dart UI control library

00:05:05.890 --> 00:05:09.720
similar to maybe Closure
Library, Ext JS?" Yes, we have

00:05:09.720 --> 00:05:13.090
definitely on the roadmap this
concept of a UI library.

00:05:13.090 --> 00:05:15.050
The final form is yet
to be worked out.

00:05:15.050 --> 00:05:16.130
We're still working
hard on that.

00:05:16.130 --> 00:05:19.600
But the Dart project does
come batteries included.

00:05:19.600 --> 00:05:20.850
That's definitely the vision.

00:05:20.850 --> 00:05:23.650
And so you can kind of work
yourself up from language spec

00:05:23.650 --> 00:05:28.030
to virtual machine to the
libraries to the runtimes.

00:05:28.030 --> 00:05:30.790
But then you have the kind of
userland libraries, like a UI

00:05:30.790 --> 00:05:32.200
library to help you write
those web apps.

00:05:32.200 --> 00:05:35.980
So it's definitely
on the roadmap.

00:05:35.980 --> 00:05:38.420
This one I actually hear
numerous times.

00:05:38.420 --> 00:05:41.860
"I'd like to develop Dart
modular web applications with

00:05:41.860 --> 00:05:43.470
a low initial load time.

00:05:43.470 --> 00:05:46.320
Do you plan to support lazy
loading of Dart libraries, or

00:05:46.320 --> 00:05:48.220
is there any other way
to accomplish this?"

00:05:48.220 --> 00:05:49.910
GILAD BRACHA: There will be
a way to accomplish it.

00:05:49.910 --> 00:05:52.000
Now, lazy loading actually
encompasses a

00:05:52.000 --> 00:05:53.870
multitude of things.

00:05:53.870 --> 00:05:57.300
And it's not clear that you'll
have a completely general,

00:05:57.300 --> 00:05:59.360
arbitrary lazy loading,
at least not

00:05:59.360 --> 00:06:01.090
without using fancy mirrors.

00:06:01.090 --> 00:06:04.980
But definitely the issue of
efficient loading of web apps

00:06:04.980 --> 00:06:06.760
is very high on our list.

00:06:06.760 --> 00:06:10.160
And there's going to be
a good story for that.

00:06:10.160 --> 00:06:13.080
The details are still
a little murky.

00:06:13.080 --> 00:06:14.280
SETH LADD: TBD.

00:06:14.280 --> 00:06:16.290
JJ BEHRENS: Gilad, tell me a
little bit more about how

00:06:16.290 --> 00:06:19.410
Dart's going to make web apps
start up a lot faster once we

00:06:19.410 --> 00:06:22.050
get the Dart VM integrated
into the browser.

00:06:22.050 --> 00:06:25.480
GILAD BRACHA: OK, so the basic
idea is that we have this

00:06:25.480 --> 00:06:27.560
mechanism called snapshots.

00:06:27.560 --> 00:06:29.650
And they let you--

00:06:29.650 --> 00:06:31.550
even in the current
stage, which I

00:06:31.550 --> 00:06:33.310
expect will get better--

00:06:33.310 --> 00:06:38.800
load a program 10x faster than
by loading Dart code over the

00:06:38.800 --> 00:06:40.870
network, where you have
to parse it and all

00:06:40.870 --> 00:06:42.150
that kind of stuff.

00:06:42.150 --> 00:06:45.290
So that translates very
directly into

00:06:45.290 --> 00:06:46.200
good startup times.

00:06:46.200 --> 00:06:48.550
JJ BEHRENS: Great, because
I'm very impatient.

00:06:48.550 --> 00:06:50.350
SETH LADD: Yes.

00:06:50.350 --> 00:06:53.170
Another question here, going on.
"Will Dart to JavaScript

00:06:53.170 --> 00:06:56.020
compiler take advantage of
ECMAscript 6 improvements like

00:06:56.020 --> 00:06:59.572
class support in order to make
generated code even smaller?"

00:06:59.572 --> 00:07:00.825
GILAD BRACHA: I think
it would.

00:07:00.825 --> 00:07:01.180
SETH LADD: When it rolls out?

00:07:01.180 --> 00:07:04.160
GILAD BRACHA: I'm sure that
whenever that stuff is

00:07:04.160 --> 00:07:08.940
available in the target browsers
and so forth, where

00:07:08.940 --> 00:07:12.300
it's useful to use it,
it'll get used.

00:07:12.300 --> 00:07:15.940
That specifically, there are
probably differences between

00:07:15.940 --> 00:07:19.440
ECMAscript classes and Dart
classes, so it may be a little

00:07:19.440 --> 00:07:21.240
naive to focus on that one.

00:07:21.240 --> 00:07:23.110
We will have to look at
it and figure it out.

00:07:23.110 --> 00:07:25.740
But generally, anything that
gets into JavaScript that

00:07:25.740 --> 00:07:29.120
makes it easier for us, we
will suck their blood and

00:07:29.120 --> 00:07:30.760
leverage it to the hilt.

00:07:30.760 --> 00:07:33.790
JJ BEHRENS: Do you think that
there will be cases where we

00:07:33.790 --> 00:07:36.310
hold back on some of those newer
features of JavaScript

00:07:36.310 --> 00:07:38.160
to ensure that we work
really well with

00:07:38.160 --> 00:07:39.740
slightly older browsers?

00:07:39.740 --> 00:07:42.730
You know, ones that have
JavaScript but maybe aren't

00:07:42.730 --> 00:07:43.980
quite as cutting edge?

00:07:43.980 --> 00:07:45.370
GILAD BRACHA: Well,
I think so.

00:07:45.370 --> 00:07:48.550
So we're targeting
modern browsers.

00:07:48.550 --> 00:07:51.000
Now, that's modern now.

00:07:51.000 --> 00:07:53.490
If they have to be more modern
in order to run some of this

00:07:53.490 --> 00:07:57.300
stuff, we might not want to
get that modern that fast.

00:07:57.300 --> 00:07:58.270
Depending how--

00:07:58.270 --> 00:08:00.300
this is something you just
see-- what's deployed out

00:08:00.300 --> 00:08:03.100
there, what you can bank
on-- and make it

00:08:03.100 --> 00:08:04.040
up as you go along.

00:08:04.040 --> 00:08:06.230
SETH LADD: I think this is
actually an excellent case on

00:08:06.230 --> 00:08:07.860
something that Dart brings
to the table today.

00:08:07.860 --> 00:08:09.320
That is that the
class syntax--

00:08:09.320 --> 00:08:12.150
I find it very hard today to
integrate code from different

00:08:12.150 --> 00:08:13.050
libraries in JavaScript.

00:08:13.050 --> 00:08:15.510
You have MooTools has their
own kind of class builder.

00:08:15.510 --> 00:08:17.090
And you have Ext JS has
a class builder.

00:08:17.090 --> 00:08:19.910
And never the twain shall
meet, in a sense.

00:08:19.910 --> 00:08:22.790
And when you bake class
semantics into the language,

00:08:22.790 --> 00:08:24.110
now I can share stuff
across these

00:08:24.110 --> 00:08:25.525
frameworks and libraries.

00:08:25.525 --> 00:08:26.270
JJ BEHRENS: Yeah.

00:08:26.270 --> 00:08:28.620
SETH LADD: Dart enables me to
do that today, which I'm

00:08:28.620 --> 00:08:30.470
looking forward to.

00:08:30.470 --> 00:08:33.289
So this is a good one I hear a
lot. "I'd like to see Dart

00:08:33.289 --> 00:08:35.150
support in Google App Engine.

00:08:35.150 --> 00:08:37.140
Will you enable this
scenario?"

00:08:37.140 --> 00:08:38.090
JJ BEHRENS: Hmm.

00:08:38.090 --> 00:08:41.770
Dart works on client and server,
but App Engine--

00:08:41.770 --> 00:08:44.280
I don't know if we've thought
about that one yet.

00:08:44.280 --> 00:08:46.320
SETH LADD: Well, there's
an existing bug for it.

00:08:46.320 --> 00:08:46.540
JJ BEHRENS: Is there?

00:08:46.540 --> 00:08:49.000
SETH LADD: I think in the App
Engine bug issue tracker.

00:08:49.000 --> 00:08:50.770
So definitely go there
and star that.

00:08:50.770 --> 00:08:52.120
It's not the first time I've
heard that either, and so

00:08:52.120 --> 00:08:54.010
that'd be kinda cool.

00:08:54.010 --> 00:08:55.590
OK, we've got a couple
minutes to wrap up.

00:08:55.590 --> 00:08:56.785
Let's see--

00:08:56.785 --> 00:08:59.070
oh, this is one that
comes up a lot.

00:08:59.070 --> 00:09:01.570
"When can we see a two-way
communication between

00:09:01.570 --> 00:09:03.900
JavaScript and Dart so that the
rich features of existing

00:09:03.900 --> 00:09:07.175
JavaScript libraries and
frameworks can be exploited?"

00:09:07.175 --> 00:09:09.140
Now, I think we want to
do this generally.

00:09:09.140 --> 00:09:11.590
But how does this impact the
overall design of the system?

00:09:11.590 --> 00:09:13.460
GILAD BRACHA: Well, it's rather
complicated because

00:09:13.460 --> 00:09:16.570
garbage collectors don't
like each other.

00:09:16.570 --> 00:09:19.670
They're sort of alpha
kind of things.

00:09:19.670 --> 00:09:20.890
They just won't--

00:09:20.890 --> 00:09:23.830
it's very hard to have two
VMs tightly coupled.

00:09:23.830 --> 00:09:26.970
So the way we've envisaged
doing this is through the

00:09:26.970 --> 00:09:29.070
isolate mechanism.

00:09:29.070 --> 00:09:32.330
And that, at the moment, is
still a little painful because

00:09:32.330 --> 00:09:33.020
of the asynchrony.

00:09:33.020 --> 00:09:36.320
But there's thoughts about
making synchronous covers for

00:09:36.320 --> 00:09:40.740
this that should make it
relatively painless.

00:09:40.740 --> 00:09:42.210
JJ BEHRENS: Now, that'd actually
be really nice, to be

00:09:42.210 --> 00:09:45.600
able to have multiple
widgets on the page.

00:09:45.600 --> 00:09:49.280
And have them protected via
isolate, so that people can't

00:09:49.280 --> 00:09:51.530
reach in and monkey
with my stuff.

00:09:51.530 --> 00:09:54.360
And keep me a little
bit safer.

00:09:54.360 --> 00:09:55.930
GILAD BRACHA: Well,
that's the idea.

00:09:55.930 --> 00:09:56.660
SETH LADD: We should chat--

00:09:56.660 --> 00:09:57.570
so you mentioned isolates.

00:09:57.570 --> 00:09:59.100
We should probably talk
just a second about

00:09:59.100 --> 00:10:00.700
what isolates are--

00:10:00.700 --> 00:10:02.020
isolated memory heaps.

00:10:02.020 --> 00:10:04.760
It allows you to do a couple of
different cool use cases.

00:10:04.760 --> 00:10:07.230
For one, the security use case
that you're talking about.

00:10:07.230 --> 00:10:10.000
Another one-- it allows you to
exploit multi-core systems

00:10:10.000 --> 00:10:12.940
once you have separated memory
heaps in your runtime.

00:10:12.940 --> 00:10:15.390
You could run those concurrently
or on a pool of

00:10:15.390 --> 00:10:16.520
processes or threads.

00:10:16.520 --> 00:10:19.780
And then there's the interop
potential use case as well.

00:10:19.780 --> 00:10:22.180
Can I use isolates to
communicate between, say,

00:10:22.180 --> 00:10:23.360
JavaScript and Dart?

00:10:23.360 --> 00:10:25.280
JJ BEHRENS: Yeah, whenever I try
to explain this, I always

00:10:25.280 --> 00:10:26.220
try to say actors.

00:10:26.220 --> 00:10:28.100
But then, of course, if you know
what an actor, you don't

00:10:28.100 --> 00:10:31.030
need to ask this question.

00:10:31.030 --> 00:10:32.750
GILAD BRACHA: And the other
great thing is, of course,

00:10:32.750 --> 00:10:35.560
Dart on the server and Dart on
the client should eventually

00:10:35.560 --> 00:10:38.130
be talking through isolates,
through message passing, and

00:10:38.130 --> 00:10:40.510
not through browser-specific
mechanisms.

00:10:40.510 --> 00:10:42.120
That may take a little
while, but--

00:10:42.120 --> 00:10:42.520
SETH LADD: Absolutely.

00:10:42.520 --> 00:10:43.020
I've heard that.

00:10:43.020 --> 00:10:43.920
GILAD BRACHA: --that
should make life

00:10:43.920 --> 00:10:46.350
much cleaner and simpler.

00:10:46.350 --> 00:10:48.510
SETH LADD: So I've always
wondered what the-- so I guess

00:10:48.510 --> 00:10:50.700
the wrap-up last question here,
"What are some of the

00:10:50.700 --> 00:10:52.540
design constraints for
the Dart language.

00:10:52.540 --> 00:10:54.640
That is, what's that box
you're working in?"

00:10:54.640 --> 00:10:57.210
GILAD BRACHA: It's a very small
box because it has to

00:10:57.210 --> 00:10:59.670
compile efficiently
to JavaScript.

00:10:59.670 --> 00:11:02.960
And it has to be sort of
palatable to a large body of

00:11:02.960 --> 00:11:05.020
mainstream developers, both from
the Java world and the

00:11:05.020 --> 00:11:05.985
JavaScript world.

00:11:05.985 --> 00:11:10.830
And that's actually a pretty
hard set of constraints.

00:11:10.830 --> 00:11:12.110
SETH LADD: Well, I know I've
really enjoyed it.

00:11:12.110 --> 00:11:14.270
In fact, true story-- one day
I was editing Dart code.

00:11:14.270 --> 00:11:15.550
I had no idea it
was Dart code.

00:11:15.550 --> 00:11:16.150
It was so familiar.

00:11:16.150 --> 00:11:19.010
I just pulled up the file, and
I didn't even know it.

00:11:19.010 --> 00:11:21.200
So good job on the
familiarity.

00:11:21.200 --> 00:11:22.390
With that, I think.

00:11:22.390 --> 00:11:25.150
I want to thank our guests
today, JJ and Gilad.

00:11:25.150 --> 00:11:28.100
We'll be at Google I/O next
week to give a bunch of

00:11:28.100 --> 00:11:30.510
different Dart talks and chat
with developers there.

00:11:30.510 --> 00:11:32.690
And if you can't be there, we'll
hold more of these cool

00:11:32.690 --> 00:11:35.140
GDL sessions and more
Q&amp;As, and--

00:11:35.140 --> 00:11:36.230
lots of ways to get
ahold of us.

00:11:36.230 --> 00:11:39.550
So I guess lastly, join our Dart
mailing list if you're

00:11:39.550 --> 00:11:40.830
interested in learning more.

00:11:40.830 --> 00:11:43.200
And we're going to be there to
help out, answer questions.

00:11:43.200 --> 00:11:44.390
And thanks for watching.

00:11:44.390 --> 00:11:45.840
And thanks for trying Dart.

00:11:45.840 --> 00:11:47.090
JJ BEHRENS: Thanks a lot, guys.

