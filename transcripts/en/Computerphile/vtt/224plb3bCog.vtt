WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.420
Recently we've had a request saying can
Computerphile do something on finite

00:00:05.420 --> 00:00:11.440
state automata. And in considering what
to do about that it did seem to me that it

00:00:11.440 --> 00:00:17.109
would be a good idea to look at where
finite-state automata sit in the scheme

00:00:17.109 --> 00:00:23.880
of things. We've done a lot about
Turing machines for example, we've

00:00:23.880 --> 00:00:27.380
covered the fact that really every
single computer, of any sort nowadays, is

00:00:27.380 --> 00:00:34.000
a Turing machine. So what I'd like to do
is to refer to a diagram which shows, if

00:00:34.000 --> 00:00:39.350
you like, the various types of Turing machine -
a hierarchy where if you go inside

00:00:39.350 --> 00:00:46.180
you make less and less demands on what you need.
And, if you look at this set of circles

00:00:46.180 --> 00:00:50.390
here, I can even related it back to some of
the videos we've done previously. You will

00:00:50.390 --> 00:00:58.170
remember that when we were doing the Ackermann 
function we eventually decided that it's

00:00:58.170 --> 00:01:01.920
of the Recursive sort,  which means it will
terminate but it could take an awful

00:01:01.920 --> 00:01:07.909
long time. If you remember in leading up
to that, I said there's a certain sort of

00:01:07.909 --> 00:01:13.510
Turing Machine, outside that, which is a
real so-and-so which says: "Sometimes the

00:01:13.510 --> 00:01:17.520
algorithm you give me will give an
answer - and you're happy, but sometimes I

00:01:17.520 --> 00:01:22.520
will go into a loop and when you say `How
can I detect, in general, that you are in a

00:01:22.520 --> 00:01:27.530
loop?', the answer is `You can't!' "
And we've done other videos with my colleague Mark Jago

00:01:27.530 --> 00:01:31.960
all about the Halting Problem as it's
called and then we went one even worse:

00:01:31.960 --> 00:01:38.020
we've been out in the outer perimeter of
hyperspace here, to say are there some

00:01:38.020 --> 00:01:45.540
problems that are so awful that no algorithm 
can exist? And we did the Busy Beaver

00:01:45.540 --> 00:01:52.040
if you remember which is a sort of encoding 
of a particular Turing Machine. It says: "Look, there's

00:01:52.040 --> 00:01:55.790
not a general algorithm here - I'm not trying to 
do n factorial. What I'm

00:01:55.790 --> 00:02:02.720
asking is, for machines of this sort, can you
predict how many zeros it will print out?" And the

00:02:02.720 --> 00:02:06.700
answer is there isn't an algorithm that can say 
how those Busy Beaver

00:02:06.700 --> 00:02:10.759
programs will behave in general - if only there
was! What you have to do is to run them

00:02:10.759 --> 00:02:15.520
all and just exhaustively say "I don't know,
there isn't an algorithm, just try them".

00:02:15.520 --> 00:02:16.400
What happened after

00:02:16.400 --> 00:02:21.300
Godel and Turing and others, in the nineteen
thirties, did all this, is people started

00:02:21.300 --> 00:02:25.950
saying "Well these Turing Machines, y'know,
it's wonderful -

00:02:25.950 --> 00:02:29.640
they're a pencil and paper thing but you could
imagine building hardware to do them and,

00:02:29.640 --> 00:02:33.580
of course. those are general-purpose
computers as we now know them. But people

00:02:33.580 --> 00:02:41.120
said: "Is there a sort of subset of Turing 
Machines where you can either say 'it doesn't need

00:02:41.120 --> 00:02:47.260
more than a definite amount of RAM -
guaranteed - that would be nice to know. ' "
And those come

00:02:47.260 --> 00:02:53.010
out to be in this inner circle of Type 1, here,
Then people started to say;"Hey there's

00:02:53.010 --> 00:02:58.320
this thing called a 'pushdown store', which
the Americans call a 'stack'. That's a one-ended

00:02:58.320 --> 00:03:02.799
memory device.  You can't dip into it,
arbitrarily. You can either take

00:03:02.799 --> 00:03:08.370
something off the top or push something new on the 
top. So any addition or 

00:03:08.370 --> 00:03:14.989
reading of your memory can only be done at the 
top of the stack. Is that a sort of special

00:03:14.989 --> 00:03:19.580
case? Yes it is. 
&gt;&gt; Sean: And we've looked at that with
your Towers of Hanoi haven't we?
&gt;&gt; DFB: Yes,  Towers of

00:03:19.580 --> 00:03:23.160
Hanoi is a classic example of
something where you just want to get

00:03:23.160 --> 00:03:29.250
hold of the whole bunch of disks and sort them, in your
hand, like RAM, y' know, just park that one there,

00:03:29.250 --> 00:03:32.100
store that one there, think about it
put them back together and plonk them

00:03:32.100 --> 00:03:37.400
back on the rod. But you can't do that!
You can only do it one-ended and for

00:03:37.400 --> 00:03:41.610
something that y'know, "I could do that in two 
or three moves if only I could take all the

00:03:41.610 --> 00:03:44.130
discs off", you end up having to do 64

00:03:44.130 --> 00:03:48.350
moves. And then there's one right in the
middle in the inner circle here,

00:03:48.350 --> 00:03:55.190
that needs no memory at all - in principle. And
that's what these finite-state automata

00:03:55.190 --> 00:03:59.080
are all about. You might ask "Who
discovered all this - who filled in all

00:03:59.080 --> 00:04:03.410
these gaps?" Because there we are with Turing,
who perversely discovers the most general

00:04:03.410 --> 00:04:09.330
thing going, in the nineteen thirties. But
people don't know the simpler story underneath.

00:04:09.330 --> 00:04:13.050
Well the person who discovered it is still
with us. I think he must be in his late

00:04:13.050 --> 00:04:17.720
eighties now - his name is Noam Chomsky
and I think my friends say that you

00:04:17.720 --> 00:04:22.710
ought to pronounce it "Homski" like the "ch" in 
[Scottish] "loch". But I'm happy to be put right on

00:04:22.710 --> 00:04:29.030
that. He's genius - near genius - guy, I think he's
been at Harvard, MIT, places like that

00:04:29.030 --> 00:04:34.320
ever since he was young. He really was
talented. He's a 'linguistician'. If you

00:04:34.320 --> 00:04:40.350
study the structure of natural languages
- any languages, computer languages even, I think

00:04:40.350 --> 00:04:45.100
I'm right in saying you're a 'linguistician'. Well,  
in the late nineteen fifties he started

00:04:45.100 --> 00:04:49.360
saying: "Look, to understand natural
languages better, I'm going to look at the

00:04:49.360 --> 00:04:55.760
most restrictive form of language I can
think of". Y'know really simple things.

00:04:55.760 --> 00:05:02.590
How about a language whose words are just
strings of the letter 'i'. So 'iii' is a 

00:05:02.590 --> 00:05:09.740
word; five i's, 'iiiii, 'is a word. Any number of
i's is a different word. How simple can

00:05:09.740 --> 00:05:10.550
that be?

00:05:10.550 --> 00:05:17.710
Yes, very simple. And then he went on to
say things like "Yeah, what's a bit more

00:05:17.710 --> 00:05:23.340
complicated than that?" Because those very
simple languages as we'll find, next

00:05:23.340 --> 00:05:27.450
time, don't need any memory at all - they
really don't.

00:05:27.450 --> 00:05:30.689
And what's the one that sits outside - he
did more investigations

00:05:30.689 --> 00:05:35.249
and said: "Ah! there is one where a one-ended 
memory will work".

00:05:35.249 --> 00:05:40.919
Yeah - these are the Chomsky Type 2.
So, remember Chomsky - it goes, as it were, the

00:05:40.919 --> 00:05:49.129
opposite way around. Type 0 is the most
general, right, the Recursivley Enumerables.
A subset of Type 0

00:05:49.129 --> 00:05:52.779
is the Recursively Enumerables that really do

00:05:52.779 --> 00:06:00.169
terminate - e.g. Ackermann. Type 1 is
the one where it needs RAM but you can predict

00:06:00.169 --> 00:06:05.809
how much RAM. So he discovered that sort -
that's the Type 1 i.e. Turing Machines with

00:06:05.809 --> 00:06:11.399
a predictable and finite amount of RAM
requirement. And he just filled in the

00:06:11.399 --> 00:06:16.329
whole picture. And in the period really
from about 1959 to the middle 1970s

00:06:16.329 --> 00:06:21.419
a huge amount of work filling in
the middle of this diagram. And that

00:06:21.419 --> 00:06:26.869
includes things like computer languages,
Algol, how to parse them, how to compile them.

00:06:26.869 --> 00:06:31.379
And it was all filled in - in the middle
of this diagram. But all basically

00:06:31.379 --> 00:06:35.629
referring back to that work that Chomsky
did in 1959, saying: "These are the

00:06:35.629 --> 00:06:40.139
language varieties".

