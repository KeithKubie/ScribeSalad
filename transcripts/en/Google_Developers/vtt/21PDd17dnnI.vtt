WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:12.890
[MUSIC PLAYING]

00:00:12.890 --> 00:00:14.740
MANO MARKS: Hi, I'm
Mano Marks.

00:00:14.740 --> 00:00:17.050
And I'm here with
Brendan Kenny.

00:00:17.050 --> 00:00:22.280
And this is the first episode
Google Maps Garage, where

00:00:22.280 --> 00:00:25.640
we're going to delve into
technical details on

00:00:25.640 --> 00:00:29.190
implementing the Google
Maps API.

00:00:29.190 --> 00:00:36.990
So what we often find is that
people are confronted with a

00:00:36.990 --> 00:00:41.360
set of common mistakes, common
things that they

00:00:41.360 --> 00:00:42.780
do that cause problems.

00:00:42.780 --> 00:00:48.090
So you can see, for instance,
if we switch to my laptop

00:00:48.090 --> 00:00:52.260
view, you can see, actually,
that right now I am looking at

00:00:52.260 --> 00:00:54.870
a blank page.

00:00:54.870 --> 00:00:57.770
But if I look at the source code
for the page, it looks

00:00:57.770 --> 00:01:00.660
like I have a map.

00:01:00.660 --> 00:01:05.630
So the problem here-- this is
probably the most common

00:01:05.630 --> 00:01:08.500
mistake that developers make.

00:01:08.500 --> 00:01:16.020
The mistake here is that they
don't set the height or width

00:01:16.020 --> 00:01:19.520
for the Div that the
map sits in.

00:01:19.520 --> 00:01:26.940
So Google Maps needs to be able
to expand the map, to

00:01:26.940 --> 00:01:29.640
show the map rather in a Div.

00:01:29.640 --> 00:01:34.570
And if the Div itself doesn't
have any height or width, it

00:01:34.570 --> 00:01:36.610
won't actually show up.

00:01:36.610 --> 00:01:44.280
So you can see here that the
HTML and the body tags are

00:01:44.280 --> 00:01:50.730
assigned height, and that
gives them some space.

00:01:50.730 --> 00:01:56.210
But the Div itself, the map
canvas Div, has actually has

00:01:56.210 --> 00:01:57.510
no height itself.

00:01:57.510 --> 00:02:01.240
So this can be fixed
fairly easily.

00:02:01.240 --> 00:02:08.694
You can go and in
create a style.

00:02:13.650 --> 00:02:17.960
I'm just going to do height
100%, and then you see

00:02:17.960 --> 00:02:19.460
the map shows up.

00:02:19.460 --> 00:02:24.470
This can be a very frustrating
problem for developers.

00:02:24.470 --> 00:02:32.110
There's a related problem
where you give the Div a

00:02:32.110 --> 00:02:39.850
height but not the containing
body or not the containing

00:02:39.850 --> 00:02:45.550
body element, which means that,
for instance here, this

00:02:45.550 --> 00:02:48.550
Div has a width of 100%
and a height of

00:02:48.550 --> 00:02:51.890
100%, but there's no--

00:02:51.890 --> 00:02:56.900
the body itself doesn't have
any height or width, so the

00:02:56.900 --> 00:03:00.140
Div doesn't show up.

00:03:00.140 --> 00:03:05.720
So that can also be fixed
by simply giving a

00:03:05.720 --> 00:03:07.310
style to the body.

00:03:07.310 --> 00:03:11.320
Now, this is one of those
problems that can be really

00:03:11.320 --> 00:03:12.370
hard to diagnose.

00:03:12.370 --> 00:03:15.310
So I'm going to hand that over
to Brendan, who's going to

00:03:15.310 --> 00:03:19.270
show you some tools for
doing some diagnosis.

00:03:19.270 --> 00:03:19.540
BRENDAN KENNY: Right.

00:03:19.540 --> 00:03:22.470
So if we come back here
to the first example

00:03:22.470 --> 00:03:24.200
and undo Mano's fix--

00:03:27.940 --> 00:03:29.720
and come back here to
our first example.

00:03:29.720 --> 00:03:31.900
So nothing shows up on screen.

00:03:31.900 --> 00:03:33.270
And this is in a
lot of feedback

00:03:33.270 --> 00:03:34.410
for you as a developer.

00:03:34.410 --> 00:03:36.650
You put together
your web page.

00:03:36.650 --> 00:03:38.940
Maybe there's a whole bunch of
things going on on the page.

00:03:38.940 --> 00:03:43.130
And you just have one Div in the
corner that needs to have

00:03:43.130 --> 00:03:44.740
a map in it, and it's
just blank.

00:03:44.740 --> 00:03:48.100
And It's really hard to say from
just a blank screen what

00:03:48.100 --> 00:03:48.980
exactly is going on.

00:03:48.980 --> 00:03:50.140
It could be all sorts
of things.

00:03:50.140 --> 00:03:52.040
Maybe your code is not
running it all.

00:03:52.040 --> 00:03:56.310
So your number one go-to place
to find out about this stuff

00:03:56.310 --> 00:03:59.100
should be the Developer Tools.

00:03:59.100 --> 00:04:00.970
So I'm going to be showing
the Chrome Developer

00:04:00.970 --> 00:04:01.920
Tools in this case.

00:04:01.920 --> 00:04:06.340
But if you use another browser,
most of the major

00:04:06.340 --> 00:04:08.800
browsers now have developer
tools that you can use.

00:04:08.800 --> 00:04:12.800
So in Chrome, to get access to
them, you come here to the

00:04:12.800 --> 00:04:15.640
Options menu and go to
Tools and then down

00:04:15.640 --> 00:04:18.050
to Developer Tools.

00:04:18.050 --> 00:04:21.405
And that opens up this nice
panel down here at the bottom.

00:04:21.405 --> 00:04:26.080
So often, people turn first to
JavaScript alerts, those

00:04:26.080 --> 00:04:30.360
ancient devices that pop of
those mobile dialogues and

00:04:30.360 --> 00:04:31.700
interrupt everything.

00:04:31.700 --> 00:04:34.690
And those are great for
saying a warning

00:04:34.690 --> 00:04:35.760
that you cannot ignore.

00:04:35.760 --> 00:04:37.730
But it's really annoying for
debugging, especially if you

00:04:37.730 --> 00:04:40.030
have like a bunch of alerts
or something like that.

00:04:40.030 --> 00:04:44.260
So the next tool people turn
to is console.log.

00:04:44.260 --> 00:04:46.730
So that logs to this
screen right here,

00:04:46.730 --> 00:04:48.180
the developer console.

00:04:48.180 --> 00:04:50.480
And that could be good for
some things, but not for

00:04:50.480 --> 00:04:50.830
everything.

00:04:50.830 --> 00:04:53.580
So in this case, we actually
have opened up the console.

00:04:53.580 --> 00:04:56.160
And at first glance, we can
tell right away there's no

00:04:56.160 --> 00:04:56.970
JavaScript errors.

00:04:56.970 --> 00:04:59.600
So we know that's not
an issue here.

00:04:59.600 --> 00:05:00.990
We still don't know
if our JavaScript

00:05:00.990 --> 00:05:03.070
has even run, really.

00:05:03.070 --> 00:05:06.620
But let's go take look at
the Elements panel.

00:05:06.620 --> 00:05:12.920
And this shows the actual Dom
tree that is used by the

00:05:12.920 --> 00:05:14.660
browser to lay out the page.

00:05:14.660 --> 00:05:16.190
And so here we see map canvas.

00:05:16.190 --> 00:05:20.330
And this was the Div that we
handed to the Maps API and

00:05:20.330 --> 00:05:22.470
said fill this up
with your map.

00:05:22.470 --> 00:05:24.210
And we can already see there's
a bunch of properties on it

00:05:24.210 --> 00:05:25.890
that we didn't add,
so it implies that

00:05:25.890 --> 00:05:27.440
something has run here.

00:05:27.440 --> 00:05:30.700
And if we open it up, we can see
there's a Div inside and

00:05:30.700 --> 00:05:32.400
inside that a whole
bunch of stuff,

00:05:32.400 --> 00:05:35.790
which is the map itself.

00:05:35.790 --> 00:05:38.250
So what's going on?

00:05:38.250 --> 00:05:41.390
The easiest way to tell right
here is that if we highlight

00:05:41.390 --> 00:05:43.980
this Div, we can tell up on
the screen up top where it

00:05:43.980 --> 00:05:46.660
shows the actual size,
the width and

00:05:46.660 --> 00:05:48.140
height of our map Div.

00:05:48.140 --> 00:05:52.690
We can tell that it's 2,068
pixels wide and 0 pixels tall.

00:05:52.690 --> 00:05:54.215
So that's what's happened.

00:05:54.215 --> 00:05:56.010
Our Div is collapsed.

00:05:56.010 --> 00:05:58.710
And there's no place for the
map to actually show.

00:05:58.710 --> 00:06:03.680
And this just has to do with the
way that Dom elements are

00:06:03.680 --> 00:06:04.690
laid out on a page.

00:06:04.690 --> 00:06:08.440
A Div, if it doesn't have a
height, either from a height

00:06:08.440 --> 00:06:14.090
set on itself or relative to
its positioning within its

00:06:14.090 --> 00:06:17.200
parent, it's just going
to have zero height.

00:06:17.200 --> 00:06:18.750
And so the map is there.

00:06:18.750 --> 00:06:20.330
It just was never given
height, and

00:06:20.330 --> 00:06:21.690
so nothing is showing.

00:06:21.690 --> 00:06:26.850
And so, as Mano said, we can
just give it a height in our

00:06:26.850 --> 00:06:27.860
original document.

00:06:27.860 --> 00:06:30.780
And now, if we were refresh, we
can tell that same Div now

00:06:30.780 --> 00:06:35.630
has a height that's taken up
the full size of the body.

00:06:35.630 --> 00:06:41.550
So if we move to the second
example that Mano showed us,

00:06:41.550 --> 00:06:45.730
where we didn't give a size to
the body, but we give it a

00:06:45.730 --> 00:06:48.670
size the Div, we can see the
same thing is going on here.

00:06:48.670 --> 00:06:52.150
So the map canvas in this case,
we can look over here to

00:06:52.150 --> 00:06:56.780
the right and see that it did
indeed have a width and a

00:06:56.780 --> 00:06:59.550
height set on it.

00:06:59.550 --> 00:07:03.510
But the width and height
are in relative units.

00:07:03.510 --> 00:07:06.660
So it's 100% in width and
100% of the height

00:07:06.660 --> 00:07:08.500
of its parent container.

00:07:08.500 --> 00:07:11.150
And the parent container
is the body element.

00:07:11.150 --> 00:07:13.200
And the body itself
has no height.

00:07:13.200 --> 00:07:17.430
We can see once again, now it's
1,700 pixels wide and 0

00:07:17.430 --> 00:07:18.200
pixels tall.

00:07:18.200 --> 00:07:20.760
So once again, we need to
add the height to it.

00:07:20.760 --> 00:07:25.160
And at that point, that Div will
then have a height, and

00:07:25.160 --> 00:07:28.580
that it won't be an issue.

00:07:28.580 --> 00:07:32.920
So yeah, that's our first tool,
is the Developer Tools.

00:07:32.920 --> 00:07:36.680
And the Elements pane is really
great for seeing that

00:07:36.680 --> 00:07:39.000
page layout sort of thing.

00:07:39.000 --> 00:07:42.130
We don't have to worry about
any sort of JavaScript

00:07:42.130 --> 00:07:43.160
commands in that case.

00:07:43.160 --> 00:07:46.040
We can just kind of explore the
Dom and see why exactly

00:07:46.040 --> 00:07:48.262
nothing is showing
up on screen.

00:07:48.262 --> 00:07:48.680
Great.

00:07:48.680 --> 00:07:52.310
So what if--

00:07:52.310 --> 00:07:55.690
I don't have a great segue
to this next one.

00:07:55.690 --> 00:07:56.360
MANO MARKS: Segue.

00:07:56.360 --> 00:07:59.450
BRENDAN KENNY: Lets try some
different errors, Mano.

00:07:59.450 --> 00:08:00.260
MANO MARKS: Yes.

00:08:00.260 --> 00:08:03.520
So that is probably--

00:08:03.520 --> 00:08:05.420
I'm going to guess,
anecdotally.

00:08:05.420 --> 00:08:09.700
It's probably the most common
error that you'll see in

00:08:09.700 --> 00:08:11.880
developing a maps application,
and It's one of the more

00:08:11.880 --> 00:08:12.930
frustrating ones because--

00:08:12.930 --> 00:08:13.830
BRENDAN KENNY: Nothing
shows up.

00:08:13.830 --> 00:08:16.240
MANO MARKS: --nothing shows
up, which is why developer

00:08:16.240 --> 00:08:17.870
tools are really important.

00:08:17.870 --> 00:08:22.660
Another really common problem is
a little different, and I',

00:08:22.660 --> 00:08:26.040
going to just show you
what it looks like.

00:08:26.040 --> 00:08:31.460
This one actually does give
you back some information.

00:08:35.200 --> 00:08:38.539
Here you'll see Google
Maps API server

00:08:38.539 --> 00:08:39.700
rejected your request.

00:08:39.700 --> 00:08:43.120
The sensor parameters specified
in the request must

00:08:43.120 --> 00:08:45.165
be set to either
true or false.

00:08:48.560 --> 00:08:52.560
So this happens a lot when
people are copying and pasting

00:08:52.560 --> 00:08:57.240
code from our documentation,
because we have to say, set it

00:08:57.240 --> 00:08:58.700
to either true or false.

00:08:58.700 --> 00:09:01.900
And it must actually be
set to true or false.

00:09:01.900 --> 00:09:05.400
So if you take a look here at
this sample, you'll see the

00:09:05.400 --> 00:09:07.770
JavaScript loader we
put in this sensor

00:09:07.770 --> 00:09:10.760
parameter to the loader.

00:09:10.760 --> 00:09:13.270
Now, I'm just going to go
ahead and say this.

00:09:13.270 --> 00:09:15.720
You get no benefit
from setting the

00:09:15.720 --> 00:09:17.340
sensor to true or false.

00:09:17.340 --> 00:09:20.580
It's just a recording mechanism
that we're required

00:09:20.580 --> 00:09:24.750
to add on for our
data providers.

00:09:24.750 --> 00:09:29.500
And again, by setting the sensor
to true, you don't

00:09:29.500 --> 00:09:30.810
actually get a sensor.

00:09:30.810 --> 00:09:35.050
All we will say on this is
if you are setting--

00:09:35.050 --> 00:09:37.410
if you are using a sensor of
some kind, that is, you are

00:09:37.410 --> 00:09:42.840
detecting somebody's location
based on this application,

00:09:42.840 --> 00:09:44.890
then you set the
sensor to true.

00:09:44.890 --> 00:09:46.720
Otherwise, you set
it to false.

00:09:46.720 --> 00:09:51.440
For most use cases that
I've seen, you will be

00:09:51.440 --> 00:09:52.730
setting this to false.

00:09:52.730 --> 00:09:57.080
It's only if you're doing some
sort of live tracking kind of

00:09:57.080 --> 00:09:59.070
application.

00:09:59.070 --> 00:10:02.480
So this one is easily fixed.

00:10:02.480 --> 00:10:07.230
And you'll see here we set this
to true or, in this case,

00:10:07.230 --> 00:10:09.250
I'm going to say false.

00:10:09.250 --> 00:10:11.125
And I reload the page.

00:10:15.192 --> 00:10:19.330
I'll first dismiss the original
error message.

00:10:19.330 --> 00:10:23.400
And there you see
we have a map

00:10:23.400 --> 00:10:32.790
OK, so the next one is kind of
similar to that and also will

00:10:32.790 --> 00:10:35.760
give you very clear
feedback on it.

00:10:35.760 --> 00:10:37.490
The first thing that will happen
is you'll see the map

00:10:37.490 --> 00:10:38.210
start to load.

00:10:38.210 --> 00:10:42.280
But then you'll see that Google
has disabled the use of

00:10:42.280 --> 00:10:45.080
the Maps API for this
application.

00:10:45.080 --> 00:10:48.070
The provided key is not a valid
Google API key, blah,

00:10:48.070 --> 00:10:49.820
blah, blah.

00:10:49.820 --> 00:10:53.380
Basically, that happens when--

00:10:53.380 --> 00:10:55.840
again, it often happens when
people are copying and pasting

00:10:55.840 --> 00:10:57.320
from the documentation.

00:10:57.320 --> 00:10:59.590
And you'll see here we have
the parameter key

00:10:59.590 --> 00:11:02.050
equals your API key.

00:11:02.050 --> 00:11:05.870
So this is easily solved.

00:11:05.870 --> 00:11:07.490
It takes a couple of steps.

00:11:07.490 --> 00:11:12.305
But basically, just search on
the Google API console.

00:11:15.480 --> 00:11:19.460
And then you'll need to log in
with a Gmail account, and then

00:11:19.460 --> 00:11:27.355
you turn on a service
for Google Maps API.

00:11:30.940 --> 00:11:34.880
Sorry, you click on API
access, and you

00:11:34.880 --> 00:11:37.250
create an API key.

00:11:37.250 --> 00:11:40.110
So I'm not going to go through
that in too much detail.

00:11:40.110 --> 00:11:43.780
Just search on Google API
console, and then click on

00:11:43.780 --> 00:11:44.960
Help to get that.

00:11:44.960 --> 00:11:49.080
But the reason that you'd
want to use an API key--

00:11:49.080 --> 00:11:51.100
so technically it's optional.

00:11:51.100 --> 00:11:53.930
But if you use the API key, you
get slightly higher quotas

00:11:53.930 --> 00:11:59.570
on a few of the services,
including the places requests.

00:11:59.570 --> 00:12:03.410
And you can then also
track your usage.

00:12:03.410 --> 00:12:07.150
In case you have an
extraordinarily popular site

00:12:07.150 --> 00:12:09.620
for a very long period of time,
you'll want to be able

00:12:09.620 --> 00:12:14.410
to check that to make sure that
your usage is not hitting

00:12:14.410 --> 00:12:16.830
up against our usage limits.

00:12:16.830 --> 00:12:20.880
So those are the reasons
that you would

00:12:20.880 --> 00:12:22.830
want to set that key.

00:12:22.830 --> 00:12:27.470
But the key point here is you
may need to actually set a key

00:12:27.470 --> 00:12:30.610
and not use our documentation
to copy and

00:12:30.610 --> 00:12:34.285
paste your API key.

00:12:34.285 --> 00:12:39.610
I'm going to hand this
over to Brendan.

00:12:39.610 --> 00:12:42.580
BRENDAN KENNY: So the next
three examples, all have

00:12:42.580 --> 00:12:43.530
something in common.

00:12:43.530 --> 00:12:47.770
They all leave out a key
parameter to the map

00:12:47.770 --> 00:12:49.000
constructor.

00:12:49.000 --> 00:12:56.250
So, if we open this up, go to
five, we can see once again

00:12:56.250 --> 00:12:58.040
nothing is showing.

00:12:58.040 --> 00:12:58.875
But it's slightly different.

00:12:58.875 --> 00:13:01.600
You can see that background
color is the

00:13:01.600 --> 00:13:02.770
background color of a map.

00:13:02.770 --> 00:13:06.110
If you ever noticed that if you
pan too fast and map tiles

00:13:06.110 --> 00:13:08.440
haven't loaded yet, this is the
color that's behind them.

00:13:08.440 --> 00:13:12.485
So if I go back again, you can
see white is the background.

00:13:12.485 --> 00:13:14.970
if you go forward-- so
something's going on.

00:13:14.970 --> 00:13:16.820
And so if we open up the
Developer Tools--

00:13:16.820 --> 00:13:19.780
so you can use the menu, or you
can be cool and use the

00:13:19.780 --> 00:13:20.690
keyboard shortcuts.

00:13:20.690 --> 00:13:27.300
That's Command-Option-I or
Control-Option-J, I,

00:13:27.300 --> 00:13:27.900
something like that.

00:13:27.900 --> 00:13:30.980
Anyway, check your menu
on Windows and Linux.

00:13:30.980 --> 00:13:36.840
And so we can see that our
map is plainly here.

00:13:36.840 --> 00:13:39.230
If we open it up, down here in
the Elements screen, we can

00:13:39.230 --> 00:13:42.620
see all sorts of Dom
elements going on.

00:13:42.620 --> 00:13:44.420
So something's happening.

00:13:44.420 --> 00:13:48.290
But if we go to our console,
there is no error.

00:13:48.290 --> 00:13:50.560
So this is a subtle
bug, another

00:13:50.560 --> 00:13:52.840
subtle bug to diagnose.

00:13:52.840 --> 00:13:57.020
Because it's not an error, but
the map has not finished being

00:13:57.020 --> 00:13:57.780
initialized.

00:13:57.780 --> 00:14:01.190
So if we go back to
our code here--

00:14:01.190 --> 00:14:05.190
typically, if you've seen this
before, you'll recognize it.

00:14:05.190 --> 00:14:09.770
The maps, or the map
constructor, takes a Dom

00:14:09.770 --> 00:14:11.520
element to construct in,
and then it also

00:14:11.520 --> 00:14:12.500
takes an options object.

00:14:12.500 --> 00:14:14.530
And in that options object,
you pass all sorts of

00:14:14.530 --> 00:14:18.010
parameters that you want to
use to customize your map.

00:14:18.010 --> 00:14:19.900
And there's three
required ones.

00:14:19.900 --> 00:14:23.130
You need to set a center of
your view, so a lat/long

00:14:23.130 --> 00:14:28.360
coordinate to look at, a zoom
level to base your view on,

00:14:28.360 --> 00:14:30.710
and then a map type, whether
that's a road map or a

00:14:30.710 --> 00:14:36.940
satellite or other versions
that are at available.

00:14:36.940 --> 00:14:40.130
And so in this case, we've
left out the center.

00:14:40.130 --> 00:14:44.130
We made it really obvious by
just commenting it out.

00:14:44.130 --> 00:14:46.600
And so, as a result, the map
actually has nowhere to look

00:14:46.600 --> 00:14:49.440
at, and so that's why it's
not showing anything.

00:14:49.440 --> 00:14:52.010
And there's a couple ways
to tell this, that

00:14:52.010 --> 00:14:53.390
this is going on.

00:14:53.390 --> 00:14:56.330
But the easiest is just to make
sure that all three of

00:14:56.330 --> 00:14:58.160
those things are in there.

00:14:58.160 --> 00:15:01.030
You can also do something here,
where if I move this

00:15:01.030 --> 00:15:04.640
declaration of the map itself
outside of our initialize

00:15:04.640 --> 00:15:08.630
function, it makes the map a
global variable, and that way,

00:15:08.630 --> 00:15:10.120
I can access it in
the console.

00:15:10.120 --> 00:15:13.420
Otherwise, it's lost
inside that scope.

00:15:13.420 --> 00:15:18.090
So if I set var.map here, it'll
now be available outside

00:15:18.090 --> 00:15:19.200
that function.

00:15:19.200 --> 00:15:21.460
And if I go here,
I can see map.

00:15:21.460 --> 00:15:25.650
And it is indeed a JavaScript
object.

00:15:25.650 --> 00:15:26.800
Yeah, you're big.

00:15:26.800 --> 00:15:27.120
OK.

00:15:27.120 --> 00:15:31.180
So Map has a bunch of properties
on it and ways of

00:15:31.180 --> 00:15:31.870
accessing it.

00:15:31.870 --> 00:15:37.080
And so if I say map.getZoom,
for instance, I can see the

00:15:37.080 --> 00:15:38.760
zoom level that's currently
going on.

00:15:38.760 --> 00:15:45.870
And so at this point, you can
then ask it for the center.

00:15:45.870 --> 00:15:47.590
And you can see that
it's undefined.

00:15:47.590 --> 00:15:50.120
So this isn't really helpful if
your code is this simple.

00:15:50.120 --> 00:15:51.670
You can just look at
your original code.

00:15:51.670 --> 00:15:54.430
But say it's within a larger
framework, and everything is

00:15:54.430 --> 00:15:56.670
complicated, and you can't tell
what's going on and where

00:15:56.670 --> 00:15:58.200
things are initialized.

00:15:58.200 --> 00:16:00.600
This can be a great way to go
in and check those three

00:16:00.600 --> 00:16:03.180
required things and say,
is this thing defined?

00:16:03.180 --> 00:16:06.310
And it turns out, the center
is undefined right now.

00:16:06.310 --> 00:16:08.550
And the way the Maps
API works, it's

00:16:08.550 --> 00:16:10.140
all this MVC framework.

00:16:10.140 --> 00:16:14.460
And so it's all about setting
the state on these models.

00:16:14.460 --> 00:16:17.900
And then once the state is set,
it sends messages to go

00:16:17.900 --> 00:16:20.150
and actually present
that to the screen.

00:16:20.150 --> 00:16:23.040
And in this case, it's waiting
for that center.

00:16:23.040 --> 00:16:25.130
And as soon as you set that
center, it's going to be

00:16:25.130 --> 00:16:29.750
display it on the screen
and just be a

00:16:29.750 --> 00:16:32.110
normal map at that point.

00:16:32.110 --> 00:16:33.000
So that's what's going on.

00:16:33.000 --> 00:16:37.740
And the reason that it is not
showing anything is because

00:16:37.740 --> 00:16:41.050
the way it accelerates
downloading, it actually shows

00:16:41.050 --> 00:16:44.520
a really fast view as quickly
as possible before it starts

00:16:44.520 --> 00:16:48.170
loading the full tile
view of the map.

00:16:48.170 --> 00:16:50.810
And if it had just a default
center view, then it would

00:16:50.810 --> 00:16:52.140
always be loading.

00:16:52.140 --> 00:16:54.260
It would be quick loading this
view that you don't care about

00:16:54.260 --> 00:16:57.220
at all and just wasting
bandwidth and latency.

00:16:57.220 --> 00:16:58.930
Especially on mobile, you
have to worry about

00:16:58.930 --> 00:17:00.170
that sort of thing.

00:17:00.170 --> 00:17:04.310
So map.getCenter is our problem
here, and obviously,

00:17:04.310 --> 00:17:08.450
if I uncomment that,
it's not an issue.

00:17:08.450 --> 00:17:11.020
So we can see the same
thing over here in

00:17:11.020 --> 00:17:12.530
this class of bugs.

00:17:12.530 --> 00:17:14.800
So here we've left out Zoom.

00:17:14.800 --> 00:17:16.050
And if we do map.getZoom--

00:17:19.290 --> 00:17:21.849
oh, I didn't add map to
the global scale.

00:17:21.849 --> 00:17:24.440
Well, if I did that
map.getZoom,

00:17:24.440 --> 00:17:26.020
it wouldn't be there.

00:17:26.020 --> 00:17:28.870
But I didn't move map outside
of this function.

00:17:28.870 --> 00:17:31.430
And finally we have this--

00:17:31.430 --> 00:17:34.160
we've left out at the
map's typeID.

00:17:34.160 --> 00:17:36.780
So this is one that often gets
people, because it's not

00:17:36.780 --> 00:17:39.470
something you think about when
you think about, I just want

00:17:39.470 --> 00:17:40.140
to show a map.

00:17:40.140 --> 00:17:41.490
You think, I need a center.

00:17:41.490 --> 00:17:42.520
I need a zoom.

00:17:42.520 --> 00:17:44.770
But you don't think that,
oh, I also need to

00:17:44.770 --> 00:17:45.830
specify a map type.

00:17:45.830 --> 00:17:48.430
But to the Maps API, they're
all equivalent map types.

00:17:48.430 --> 00:17:52.100
And so you need to pick one to
represent what you want to

00:17:52.100 --> 00:17:53.350
show on the screen.

00:18:05.230 --> 00:18:09.990
MANO MARKS: So another common
problem that people have is

00:18:09.990 --> 00:18:12.680
they will create a map marker.

00:18:12.680 --> 00:18:15.530
And the map marker will not
show up on the map.

00:18:15.530 --> 00:18:16.610
And that's--

00:18:16.610 --> 00:18:18.910
there's a pretty simple
reason for it.

00:18:18.910 --> 00:18:21.050
You look here.

00:18:21.050 --> 00:18:26.590
There is you see, hey, I've
created a marker.

00:18:26.590 --> 00:18:34.070
But the thing is, in D3 of the
Google Maps API, any overlay

00:18:34.070 --> 00:18:37.470
is created independent
of the map.

00:18:37.470 --> 00:18:40.100
And then it is assigned
to a particular map.

00:18:40.100 --> 00:18:43.760
And the reason for that is so
that the map object itself

00:18:43.760 --> 00:18:46.090
doesn't get bloated with
knowledge of where all the

00:18:46.090 --> 00:18:48.180
markers are.

00:18:48.180 --> 00:18:56.680
Maps API v3 was designed to be
very tight, only downloading

00:18:56.680 --> 00:19:01.340
the code that it absolutely
needs for

00:19:01.340 --> 00:19:02.850
any individual piece.

00:19:02.850 --> 00:19:05.220
So creating the map,
if you just have a

00:19:05.220 --> 00:19:07.230
map, you don't need--

00:19:07.230 --> 00:19:08.790
it doesn't need to
have knowledge of

00:19:08.790 --> 00:19:10.200
where the markers are.

00:19:10.200 --> 00:19:13.410
Markers, however, need to know
what map that they go to to.

00:19:13.410 --> 00:19:16.090
So in this case, you can
actually do this

00:19:16.090 --> 00:19:18.200
in a couple of ways.

00:19:18.200 --> 00:19:23.600
You'll see in the options when
you create the marker, you can

00:19:23.600 --> 00:19:25.910
just set a map--

00:19:25.910 --> 00:19:28.831
you can just set
the map there.

00:19:28.831 --> 00:19:31.450
Or you can also set
[AUDIO LOST]

00:19:31.450 --> 00:19:40.110
on as a marker.set map.

00:19:40.110 --> 00:19:43.250
This is another one that's
not going to show up in--

00:19:43.250 --> 00:19:45.725
BRENDAN KENNY: It said map.map

00:19:45.725 --> 00:19:46.880
MANO MARKS: Oh, said map.map.

00:19:46.880 --> 00:19:48.130
Thank you.

00:19:50.930 --> 00:19:52.210
And there you see the map.

00:19:52.210 --> 00:19:54.340
The marker shows
up on the map.

00:19:54.340 --> 00:19:58.470
This is another one that is not
going to show up well in

00:19:58.470 --> 00:20:01.440
Developer Tools, because from
JavaScript's point of view,

00:20:01.440 --> 00:20:03.480
there's actually
nothing wrong.

00:20:03.480 --> 00:20:06.240
You created this
marker object.

00:20:06.240 --> 00:20:08.080
You just didn't do
anything with it.

00:20:08.080 --> 00:20:13.450
So again, you could go through
the console and check what its

00:20:13.450 --> 00:20:18.590
map property is and figure
out things there.

00:20:18.590 --> 00:20:23.220
But fundamentally, it's one of
the things you just have to

00:20:23.220 --> 00:20:28.880
know You have to actually put a
marker or any other overlay.

00:20:28.880 --> 00:20:31.590
You have to actually
set a map to that.

00:20:34.280 --> 00:20:48.980
And then finally, we have
another example here, which is

00:20:48.980 --> 00:20:52.890
kind of related to
that problem.

00:20:52.890 --> 00:20:56.370
Here, this one will actually
show up in

00:20:56.370 --> 00:20:57.510
the console, though.

00:20:57.510 --> 00:21:02.120
What often happens is people
will declare the map object in

00:21:02.120 --> 00:21:05.810
their initialized function, the
standard way, especially

00:21:05.810 --> 00:21:07.280
if you're copying code.

00:21:07.280 --> 00:21:10.460
But if you create a separate
function, in this case, you'll

00:21:10.460 --> 00:21:14.190
see I created this function
addMarker And then I tell it

00:21:14.190 --> 00:21:22.070
to add it to the map.

00:21:22.070 --> 00:21:24.660
The mapped object is actually
declared in the initialized

00:21:24.660 --> 00:21:28.810
function, so it's out of scope
when I run addMarker.

00:21:28.810 --> 00:21:34.420
So this is another point where
declaring the map as a global

00:21:34.420 --> 00:21:39.530
variable can be helpful.

00:21:39.530 --> 00:21:42.730
Now, there's a lot of discussion
about global

00:21:42.730 --> 00:21:49.670
variables and why they're good
and why they're bad.

00:21:49.670 --> 00:21:52.410
You should probably check out
a lot of that discussion.

00:21:52.410 --> 00:21:56.860
We could have that conversation
at some point.

00:21:56.860 --> 00:21:59.640
You typically want to minimize
the number of global variables

00:21:59.640 --> 00:22:02.390
because they can interfere
name spacing

00:22:02.390 --> 00:22:04.420
with different functions.

00:22:04.420 --> 00:22:06.880
And they can just clutter
up your--

00:22:06.880 --> 00:22:09.400
you create a lot of global
variables when you're not--

00:22:09.400 --> 00:22:10.670
when you don't need them.

00:22:10.670 --> 00:22:15.490
But in this case, there are some
distinct advantages to

00:22:15.490 --> 00:22:19.890
declaring your map variable as
a global variable there.

00:22:19.890 --> 00:22:21.625
BRENDAN KENNY: And there's lots
of other approaches where

00:22:21.625 --> 00:22:26.020
you can wrap it up in a name
space or a little module.

00:22:26.020 --> 00:22:30.270
And as long as the functions are
within the same module or

00:22:30.270 --> 00:22:32.930
have access to that name space,
you can pass around an

00:22:32.930 --> 00:22:39.470
object that represents your map,
widget, or whatever, and

00:22:39.470 --> 00:22:41.350
keep it out of the global
name space but

00:22:41.350 --> 00:22:42.530
still have it available.

00:22:42.530 --> 00:22:46.490
Because the Developer Tools
are extremely helpful.

00:22:46.490 --> 00:22:48.570
You should learn
to trust them.

00:22:48.570 --> 00:22:52.060
And having it available
to the developer

00:22:52.060 --> 00:22:54.725
tools is a huge help.

00:22:57.440 --> 00:23:00.590
MANO MARKS: I'm actually going
to show you what this looks

00:23:00.590 --> 00:23:05.260
like in the Developer Tools, why
these Developer Tools are

00:23:05.260 --> 00:23:06.090
so important.

00:23:06.090 --> 00:23:09.190
If I take a look at the
JavaScript console, this one

00:23:09.190 --> 00:23:10.080
will actually--

00:23:10.080 --> 00:23:11.930
you'll see map is not defined.

00:23:11.930 --> 00:23:15.050
Now, for somebody who isn't
really paying a lot of

00:23:15.050 --> 00:23:17.070
attention, that can be
confusing, because you'll know

00:23:17.070 --> 00:23:19.250
you defined the--

00:23:19.250 --> 00:23:22.550
you've defined it, and you can
actually click through to

00:23:22.550 --> 00:23:24.550
where it's not defined.

00:23:24.550 --> 00:23:27.780
And your hint is that it's
in this function.

00:23:27.780 --> 00:23:33.016
So that's your scoping
problem.

00:23:33.016 --> 00:23:34.270
BRENDAN KENNY: Great.

00:23:34.270 --> 00:23:34.680
MANO MARKS: All right.

00:23:34.680 --> 00:23:39.530
I think those are the common
problems that we have

00:23:39.530 --> 00:23:40.420
for you this time.

00:23:40.420 --> 00:23:43.450
We're going to do more episodes
of Maps Garage to

00:23:43.450 --> 00:23:47.200
delve into some technical
details.

00:23:47.200 --> 00:23:53.100
If you're having any problems
developing your application

00:23:53.100 --> 00:23:55.190
with the Google Maps API,
there's a big community of

00:23:55.190 --> 00:23:57.070
people on Stack Overflow.

00:23:57.070 --> 00:24:00.770
And actually, members of our
team also monitor Stack

00:24:00.770 --> 00:24:04.650
Overflow to see what the
problems are that people are

00:24:04.650 --> 00:24:08.640
having, and then they can
comment on them there.

00:24:08.640 --> 00:24:15.780
So that's your best resource
for getting fast answers to

00:24:15.780 --> 00:24:16.940
your questions.

00:24:16.940 --> 00:24:19.580
BRENDAN KENNY: We also have a
screencast I did that gives an

00:24:19.580 --> 00:24:24.180
introduction to debugging the
Maps API with Dev tools.

00:24:24.180 --> 00:24:28.890
It uses some different examples
to just walk through

00:24:28.890 --> 00:24:31.390
the Elements pane on your
console, but also the Sources

00:24:31.390 --> 00:24:34.480
panel, so you can step
through code.

00:24:34.480 --> 00:24:36.170
Well, I guess we'll
link to that.

00:24:36.170 --> 00:24:40.300
MANO MARKS: We'll put a link to
that in the YouTube video

00:24:40.300 --> 00:24:41.380
description.

00:24:41.380 --> 00:24:43.660
BRENDAN KENNY: And then there's
also another Google

00:24:43.660 --> 00:24:46.470
Developers Live session called
"The Breakpoint," which

00:24:46.470 --> 00:24:49.240
happens periodically --I'm
not sure how often--

00:24:49.240 --> 00:24:51.560
that's specifically about the
Chrome Developer Tools.

00:24:51.560 --> 00:24:53.660
And those guys are really great,
and you can learn a

00:24:53.660 --> 00:24:55.856
lot, so check that out.

00:24:55.856 --> 00:24:56.314
MANO MARKS: All right.

00:24:56.314 --> 00:24:57.690
I think that's it.

00:24:57.690 --> 00:25:01.940
Thank you all for listening
in today, and

00:25:01.940 --> 00:25:03.230
hopefully this was helpful.

00:25:12.530 --> 00:25:27.467
[MUSIC PLAYING]

