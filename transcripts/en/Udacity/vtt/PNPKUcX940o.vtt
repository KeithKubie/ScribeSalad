WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.000
So computational complexity is the problem of actually finding the hardness of problems

00:00:08.000 --> 00:00:13.000
and from the prospective of a theoretician who studies complexity theory,

00:00:13.000 --> 00:00:15.000
the stuff that we've been doing so far talking about devising algorithms

00:00:15.000 --> 00:00:21.000
and proving their running times, that's just part of the story, that's just upper bound determination.

00:00:21.000 --> 00:00:23.000
There's a whole other set of work that has to go into

00:00:23.000 --> 00:00:27.000
finding lower bounds on the hardness of problems and that requires

00:00:27.000 --> 00:00:32.000
very different techniques from the kinds that we've talking about up to this point.

00:00:32.000 --> 00:00:36.000
So it's worth pointing out what theoreticians often really like to do

00:00:36.000 --> 00:00:41.000
is that they find an upper bound for the hardness of their problem and they can find a lower bound

00:00:41.000 --> 00:00:45.000
that matches it, then you know exactly the complexity of the problem.

00:00:45.000 --> 00:00:49.000
It has to lie between those and they match, so therefore, it's exactly that.

00:00:49.000 --> 00:00:54.000
So as I said, we're not going to get very involved in proving lower bounds for different problems,

00:00:54.000 --> 00:00:58.000
but this argument is actually not too hard and I'll give you a little flavor

00:00:58.000 --> 00:01:01.000
for how this can be done in some cases.

00:01:01.000 --> 00:01:04.000
Imagine that we're trying to compute the max of a list of (n).

00:01:04.000 --> 00:01:07.000
Now we know an upper bound on this problem is Î˜(n)

00:01:07.000 --> 00:01:10.000
because we can just loop through all the elements in the list find the maximum.

00:01:10.000 --> 00:01:14.000
But how do we argue about a lower bound for this problem?

00:01:14.000 --> 00:01:18.000
Well, one argument might be, well, constant time is a lower bound on this problem

00:01:18.000 --> 00:01:24.000
Because at the very least, you have to give the answer. It takes at least constant time to do that.

00:01:24.000 --> 00:01:26.000
It's possible you can even do that well

00:01:26.000 --> 00:01:29.000
if you're trying to compute the max of a list and you guessed a number,

00:01:29.000 --> 00:01:33.000
if may very well be the max, so that gives us a lower bound.

00:01:33.000 --> 00:01:37.000
Here's another one, Î˜(n) might be on lower bound, why?

00:01:37.000 --> 00:01:43.000
Because you have to at least look at all the n items; otherwise, there could be one item in the list

00:01:43.000 --> 00:01:49.000
that is the max that you didn't look at and so you can't possible return the right answer.

00:01:49.000 --> 00:01:54.000
All right another argument might be something like this.

00:01:54.000 --> 00:01:57.000
We have a lower bound of (log n) for the problem

00:01:57.000 --> 00:02:00.000
because finding the max is sort of like finding the winner of a tournament.

00:02:00.000 --> 00:02:03.000
You have to compare values against other values

00:02:03.000 --> 00:02:08.000
and we might be able to actually eliminate half each time,

00:02:08.000 --> 00:02:14.000
and if we could do that, then the number of rounds that it would take before we have a winner

00:02:14.000 --> 00:02:18.000
in a tournament of individuals in a single elimination tournament,

00:02:18.000 --> 00:02:24.000
it's like it's (log n), so which of these do you think is the best argument

00:02:24.000 --> 00:02:30.000
in terms of a lower bound for finding the max?

