WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:03.900
If you'd rather minimize the use
of any object all together,

00:00:03.900 --> 00:00:07.280
you can provide information about
the contents of Objective C

00:00:07.280 --> 00:00:11.322
collections when those arrays
are defined using lightweight generics.

00:00:11.322 --> 00:00:15.852
For example, let's say we added
a property to our BookClass to represent

00:00:15.852 --> 00:00:17.760
the awards that a book has one.

00:00:17.760 --> 00:00:22.564
Each item in the array is a pointer to
an NSString representing the name of

00:00:22.564 --> 00:00:23.368
the award.

00:00:23.368 --> 00:00:26.229
We indicate that by placing NSString in

00:00:26.229 --> 00:00:30.832
an asterisk between angle brackets
before the property name.

00:00:30.832 --> 00:00:34.442
And here's what it looks like
when it's translated to Swift.

00:00:34.442 --> 00:00:39.532
Notice that, instead of being an array
holding objects of type any object,

00:00:39.532 --> 00:00:42.961
awards is an array holding
objects of type String.

00:00:42.961 --> 00:00:44.740
We can also do this with dictionaries.

00:00:44.740 --> 00:00:49.326
For example, we might have a property
representing a dictionary of quotes

00:00:49.326 --> 00:00:52.688
about the book that are paired
with their source URLs.

00:00:52.688 --> 00:00:56.310
Again, we indicate the types
held by the dictionary here and

00:00:56.310 --> 00:00:57.880
between angle brackets.

00:00:57.880 --> 00:00:58.564
And then,

00:00:58.564 --> 00:01:03.507
if we look at the generated interface,
we can see that the swift version of our

00:01:03.507 --> 00:01:08.313
quotes dictionary is holding keys of
type string and values of type NSURL.

00:01:08.313 --> 00:01:13.007
Keep in mind that lightweight generics
are only supported for NS-array,

00:01:13.007 --> 00:01:15.174
NS-set and its NS-dictionary.

00:01:15.174 --> 00:01:17.490
They won't work with NS mutable arrays.

