WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:01.950
ALEXIS MP: So hi, everyone.

00:00:01.950 --> 00:00:02.700
Welcome back.

00:00:02.700 --> 00:00:06.420
Today, the topic is
Docker-- in the cloud,

00:00:06.420 --> 00:00:09.080
on the desktop,
Docker everywhere.

00:00:09.080 --> 00:00:11.050
And I'm speaking
with David today.

00:00:13.670 --> 00:00:16.444
So what do you want
to show us today?

00:00:16.444 --> 00:00:17.860
DAVID GAGEOT: I'd
like to show you

00:00:17.860 --> 00:00:22.180
how easy it is to package
a Java 8 application, a web

00:00:22.180 --> 00:00:26.240
application, on your laptop with
Docker, and use this package

00:00:26.240 --> 00:00:28.925
application to deploy
it on that platform.

00:00:28.925 --> 00:00:31.050
ALEXIS MP: So what we're
trying to demonstrate here

00:00:31.050 --> 00:00:34.470
is the fact that you're able
to build an environment which

00:00:34.470 --> 00:00:37.280
will be running on your
development environment,

00:00:37.280 --> 00:00:40.130
and use the exact same
environment, packaged

00:00:40.130 --> 00:00:43.180
as a container, with
the Docker technology,

00:00:43.180 --> 00:00:46.840
and ship this across to
the cloud and computer.

00:00:46.840 --> 00:00:47.720
DAVID GAGEOT: Yes.

00:00:47.720 --> 00:00:51.420
It is exactly like
a big binary file.

00:00:51.420 --> 00:00:54.160
But inside this binary,
there's your application.

00:00:54.160 --> 00:00:55.990
There's also all
the dependencies.

00:00:55.990 --> 00:00:59.360
The Java 8 version,
the operating system.

00:00:59.360 --> 00:01:01.590
Everything is fixed,
and you can run it

00:01:01.590 --> 00:01:05.289
on the machine or the cloud
with the same command.

00:01:05.289 --> 00:01:06.830
ALEXIS MP: Sounds
promising, I think.

00:01:06.830 --> 00:01:07.620
It's quite useful.

00:01:07.620 --> 00:01:10.690
Why is it actually useful to
have this same environment

00:01:10.690 --> 00:01:11.969
across--

00:01:11.969 --> 00:01:13.510
DAVID GAGEOT: It
works on my machine.

00:01:13.510 --> 00:01:16.430
It doesn't work on production,
it works on my machine.

00:01:16.430 --> 00:01:20.340
So this is one of the reasons
why Docker is very useful.

00:01:20.340 --> 00:01:22.630
You can reproduce exactly
the same environment

00:01:22.630 --> 00:01:25.240
on your machine
as on production.

00:01:25.240 --> 00:01:29.170
It's especially very important
if in operation, you've

00:01:29.170 --> 00:01:33.900
got multiple servers, load
balancer, different components.

00:01:33.900 --> 00:01:36.850
So you can reproduce
exactly the same environment

00:01:36.850 --> 00:01:38.860
on your machine with
different containers.

00:01:38.860 --> 00:01:41.980
You could do it with VMs,
but then on your machine,

00:01:41.980 --> 00:01:43.720
you would run lots of VMs.

00:01:43.720 --> 00:01:47.000
It would be too much
for your machine.

00:01:47.000 --> 00:01:48.900
With containers, it's
very lightweight.

00:01:48.900 --> 00:01:49.667
Very easy.

00:01:49.667 --> 00:01:50.250
ALEXIS MP: OK.

00:01:50.250 --> 00:01:52.559
Let's get going and
let's look at the demo

00:01:52.559 --> 00:01:53.600
you have prepared for us.

00:01:53.600 --> 00:01:56.960
DAVID GAGEOT: OK, so I've
prepared a very small project

00:01:56.960 --> 00:01:59.660
with a single file
called Dockerfile.

00:01:59.660 --> 00:02:03.100
This Dockerfile is the
recipe to build my container.

00:02:03.100 --> 00:02:05.630
So I will show you the
Dockerfile very quickly,

00:02:05.630 --> 00:02:08.300
and then we'll run it, and we'll
come back to the Dockerfile

00:02:08.300 --> 00:02:11.020
to see what it contains.

00:02:11.020 --> 00:02:14.710
Let's create the container
from this Dockerfile.

00:02:14.710 --> 00:02:16.920
It's like a recipe
to make a cake.

00:02:16.920 --> 00:02:19.930
So that's build a cake.

00:02:19.930 --> 00:02:20.900
Here it is.

00:02:20.900 --> 00:02:22.840
It will download lots
of things, install

00:02:22.840 --> 00:02:24.900
lots of things
inside the container.

00:02:24.900 --> 00:02:26.740
Let's take a look
at the Dockerfile.

00:02:26.740 --> 00:02:31.490
So what I'm saying is my
container is based on Ubunto.

00:02:31.490 --> 00:02:37.800
And then I will install lots
of components, mainly Java 8.

00:02:37.800 --> 00:02:40.380
I will install Maven, Git.

00:02:40.380 --> 00:02:44.070
Then I will clone the
source code of my project,

00:02:44.070 --> 00:02:46.210
build it inside the
container to be sure

00:02:46.210 --> 00:02:48.900
that the build is
easy to reproduce.

00:02:48.900 --> 00:02:51.320
And what is very important
is at the end of the build,

00:02:51.320 --> 00:02:55.630
I've got classical
Maven install.

00:02:55.630 --> 00:02:58.220
Here's the command that
the container will run.

00:02:58.220 --> 00:03:01.810
So classical Java application.

00:03:01.810 --> 00:03:03.840
ALEXIS MP: So it is
definitely a recipe.

00:03:03.840 --> 00:03:07.330
You are building
everything from zero.

00:03:07.330 --> 00:03:11.430
So hopefully the recipe will
always produce the same cake.

00:03:11.430 --> 00:03:12.180
DAVID GAGEOT: Yes.

00:03:12.180 --> 00:03:12.860
Not always.

00:03:12.860 --> 00:03:17.560
In fact, if I run the
same recipe in two weeks,

00:03:17.560 --> 00:03:19.840
the version of each
components might change.

00:03:19.840 --> 00:03:23.420
So I could fix the
versions inside my recipe.

00:03:23.420 --> 00:03:26.130
But then, at the end
of the day, Docker

00:03:26.130 --> 00:03:30.300
is not really based on you
running the same recipe again

00:03:30.300 --> 00:03:31.030
and again.

00:03:31.030 --> 00:03:32.900
You run the recipe
once, and then you've

00:03:32.900 --> 00:03:35.940
got a binary that you
can run on your machine

00:03:35.940 --> 00:03:37.987
or run on another machine.

00:03:37.987 --> 00:03:39.570
ALEXIS MP: And there
are ways to share

00:03:39.570 --> 00:03:42.730
this with different
people, if you-- even

00:03:42.730 --> 00:03:44.600
a common repository
for people to use.

00:03:44.600 --> 00:03:45.927
DAVID GAGEOT: Exactly, you can.

00:03:45.927 --> 00:03:46.760
It's like a battery.

00:03:46.760 --> 00:03:49.180
So you can copy it,
or you can publish it

00:03:49.180 --> 00:03:53.260
in public or private
repositories.

00:03:53.260 --> 00:03:58.450
There's lots of ways to
share container images.

00:03:58.450 --> 00:04:00.690
What we will do is we
will use the recipe

00:04:00.690 --> 00:04:03.800
to build locally and build
on the cloud platform.

00:04:03.800 --> 00:04:05.710
It's not the thing
you will do normally,

00:04:05.710 --> 00:04:08.120
but it's just to
show you that it's

00:04:08.120 --> 00:04:12.100
the same locally and
on the cloud platform.

00:04:12.100 --> 00:04:13.120
ALEXIS MP: Great.

00:04:13.120 --> 00:04:17.750
So it takes a few minutes to
build locally on the laptop,

00:04:17.750 --> 00:04:19.980
so we'll just skip
ahead and get to a point

00:04:19.980 --> 00:04:21.810
where we're about
to finish the build.

00:04:26.450 --> 00:04:28.310
DAVID GAGEOT: So here we are.

00:04:28.310 --> 00:04:32.160
We're running the
last Maven build.

00:04:32.160 --> 00:04:36.570
And at the end, it will produce
the Java flies that we need.

00:04:36.570 --> 00:04:39.340
And we'll be able to
launch the container

00:04:39.340 --> 00:04:43.200
and see if the
application runs properly.

00:04:43.200 --> 00:04:43.990
ALEXIS MP: Great.

00:04:43.990 --> 00:04:45.580
So tests are going.

00:04:45.580 --> 00:04:49.740
And as soon as the tests pass,
I suppose you have-- no tests.

00:04:49.740 --> 00:04:51.010
Wait.

00:04:51.010 --> 00:04:53.720
DAVID GAGEOT: It's not me.

00:04:53.720 --> 00:04:54.635
Yes.

00:04:54.635 --> 00:04:55.690
Here it is.

00:04:55.690 --> 00:04:59.290
So build success, and then
the container is ready.

00:04:59.290 --> 00:05:05.230
What I want to show-- you said,
can we use the same respect

00:05:05.230 --> 00:05:08.480
to build a container twice?

00:05:08.480 --> 00:05:12.210
Docker uses a cache to make sure
that, if on the same machine

00:05:12.210 --> 00:05:14.690
you build from the same
recipe, it will use cache

00:05:14.690 --> 00:05:16.670
again and again
so that you don't

00:05:16.670 --> 00:05:20.490
run all the steps of your
recipe again and again.

00:05:20.490 --> 00:05:22.680
So you should
change an operation

00:05:22.680 --> 00:05:24.160
at the end of your
recipe, it will

00:05:24.160 --> 00:05:27.800
reuse the cache for all the
operations before the change.

00:05:27.800 --> 00:05:32.550
So let's try to
run our container.

00:05:32.550 --> 00:05:36.420
What we are going to do is to
ask for the version of Java

00:05:36.420 --> 00:05:37.389
inside the container.

00:05:37.389 --> 00:05:39.680
ALEXIS MP: Just to make sure
we're using the right one.

00:05:39.680 --> 00:05:41.020
That's one thing you
can try to check.

00:05:41.020 --> 00:05:42.840
DAVID GAGEOT: Yes, to make
sure that it works properly.

00:05:42.840 --> 00:05:44.930
So we saw the Docker
build an operation,

00:05:44.930 --> 00:05:47.360
so now we're going to
use the Docker run.

00:05:47.360 --> 00:05:52.610
So we run the same container
with a command, java -version.

00:05:52.610 --> 00:05:56.680
And we see that we've got Java 8
installed inside the container.

00:05:56.680 --> 00:06:01.000
If I run the same command on my
machine, I've got only Java 7.

00:06:01.000 --> 00:06:03.459
So this is to show you that
you can use different versions.

00:06:03.459 --> 00:06:05.083
ALEXIS MP: They're
completely isolated.

00:06:05.083 --> 00:06:06.600
DAVID GAGEOT: Yes, completely.

00:06:06.600 --> 00:06:10.950
So now we can try to run
the real applications

00:06:10.950 --> 00:06:15.760
by letting the container
use the default command.

00:06:15.760 --> 00:06:17.200
And here it is.

00:06:17.200 --> 00:06:18.380
Our website is running.

00:06:18.380 --> 00:06:19.330
Yeah.

00:06:19.330 --> 00:06:21.410
ALEXIS MP: So you build
all of this locally

00:06:21.410 --> 00:06:23.080
and you have something
that's working.

00:06:23.080 --> 00:06:25.570
So now we can ship
it-- that's probably

00:06:25.570 --> 00:06:27.431
the best way to describe
it-- to the cloud.

00:06:27.431 --> 00:06:28.180
DAVID GAGEOT: Yes.

00:06:28.180 --> 00:06:31.010
Just before, let's
try to open it

00:06:31.010 --> 00:06:34.820
into a brother to make sure
that it works property.

00:06:34.820 --> 00:06:38.940
So we're going to run
the container-- Oh.

00:06:38.940 --> 00:06:42.270
What's going on is I've got
other containers running

00:06:42.270 --> 00:06:43.000
on the same port.

00:06:43.000 --> 00:06:46.340
So I'm going to delete
all my running containers.

00:06:46.340 --> 00:06:49.410
It's like deleting
running processes.

00:06:49.410 --> 00:06:53.020
I just kill them, and
then run my process again.

00:06:55.770 --> 00:06:59.220
And now it's running as a
daemon in the background.

00:06:59.220 --> 00:07:07.280
So we open a URL and see that
the site is running properly.

00:07:07.280 --> 00:07:08.130
Yes.

00:07:08.130 --> 00:07:08.740
ALEXIS MP: That's great.

00:07:08.740 --> 00:07:09.239
Perfect.

00:07:09.239 --> 00:07:11.940
DAVID GAGEOT: As you
say, now let's ship it.

00:07:11.940 --> 00:07:14.600
So we're going to
ship it to deploy it

00:07:14.600 --> 00:07:17.890
on Google Compute Engine.

00:07:17.890 --> 00:07:23.120
So we're going to open the
Google Compute Engine console.

00:07:23.120 --> 00:07:27.800
And we're going to create
a VM on which we're

00:07:27.800 --> 00:07:29.620
going to install Docker.

00:07:29.620 --> 00:07:33.320
And then we're going to
build the same container

00:07:33.320 --> 00:07:34.979
from the same recipe.

00:07:34.979 --> 00:07:37.020
ALEXIS MP: So we're really
starting from scratch.

00:07:37.020 --> 00:07:38.353
DAVID GAGEOT: Yes, from scratch.

00:07:38.353 --> 00:07:41.530
Choose the name,
allow HTTP traffic.

00:07:41.530 --> 00:07:43.990
Choose the zone of our VM.

00:07:43.990 --> 00:07:46.190
We can choose among
different type of machines.

00:07:46.190 --> 00:07:49.970
I'll keep the default one.

00:07:49.970 --> 00:07:54.350
I'm going to choose a
Debian from my machine.

00:07:54.350 --> 00:07:57.080
So everything I do
here on website,

00:07:57.080 --> 00:08:00.846
I could do through the
API with a command line.

00:08:00.846 --> 00:08:01.812
Here it is.

00:08:01.812 --> 00:08:03.770
Here's the command line
you could run to do it.

00:08:06.295 --> 00:08:07.670
ALEXIS MP: Especially
if you want

00:08:07.670 --> 00:08:11.220
to instantiate multiple VMs
with the same configuration.

00:08:11.220 --> 00:08:13.300
DAVID GAGEOT: What I
like about Google Cloud

00:08:13.300 --> 00:08:15.690
platform is I can
always click on a link

00:08:15.690 --> 00:08:19.330
to show me the command I'm going
to execute from the website.

00:08:19.330 --> 00:08:20.690
That's nice.

00:08:20.690 --> 00:08:23.230
So I can see that
the VM is created.

00:08:23.230 --> 00:08:24.520
That was quick.

00:08:24.520 --> 00:08:31.210
And I'm going to SSH into the
VM using the command given

00:08:31.210 --> 00:08:32.809
by the website.

00:08:32.809 --> 00:08:37.350
I could use a standard SSH,
it's just that here there's

00:08:37.350 --> 00:08:41.830
a wrapper that uses the
correct configuration, security

00:08:41.830 --> 00:08:42.710
configuration mainly.

00:08:48.790 --> 00:08:51.645
We have to wait
for the VM to boot.

00:08:53.602 --> 00:08:55.060
ALEXIS MP: Shouldn't
take too long.

00:08:55.060 --> 00:08:56.101
DAVID GAGEOT: Here it is.

00:08:56.101 --> 00:08:57.010
Yes.

00:08:57.010 --> 00:08:59.080
So I'm in the machine.

00:08:59.080 --> 00:09:01.120
Maybe 15 seconds to make it run.

00:09:01.120 --> 00:09:02.760
Docker is not installed.

00:09:02.760 --> 00:09:04.220
I'm going to install Docker.

00:09:04.220 --> 00:09:07.770
So it takes about 20 seconds.

00:09:07.770 --> 00:09:10.530
I need to [INAUDIBLE] the line
to install it on the machine.

00:09:10.530 --> 00:09:12.290
ALEXIS MP: Yeah, it's
probably interesting to see

00:09:12.290 --> 00:09:13.430
how it's being
installed, but there

00:09:13.430 --> 00:09:15.096
are other options
where it comes, maybe,

00:09:15.096 --> 00:09:16.684
packaged as part of the image.

00:09:16.684 --> 00:09:18.350
DAVID GAGEOT: I could
package it myself.

00:09:18.350 --> 00:09:23.430
I can install it on Google Base
image and create a new image.

00:09:23.430 --> 00:09:25.590
Or I could use the
images provided

00:09:25.590 --> 00:09:31.100
by Google that already
have Docker installed.

00:09:31.100 --> 00:09:33.990
So I've got lots of options.

00:09:33.990 --> 00:09:37.470
Here it will download
Docker, install it,

00:09:37.470 --> 00:09:38.760
make sure it works properly.

00:09:43.620 --> 00:09:45.830
OK, docker was installed.

00:09:45.830 --> 00:09:47.949
It started, and now--

00:09:47.949 --> 00:09:50.490
ALEXIS MP: It's going through
a few tests, just to make sure.

00:09:50.490 --> 00:09:51.240
DAVID GAGEOT: Yes.

00:09:51.240 --> 00:09:55.040
It will run a basic container
to make sure it works property.

00:09:55.040 --> 00:09:58.290
Then I have to add the
current user to the dock group

00:09:58.290 --> 00:10:00.470
to make sure I can run
Docker without sudo.

00:10:03.230 --> 00:10:04.350
Here it is.

00:10:04.350 --> 00:10:06.950
Let's run docker ps
to see what's running.

00:10:06.950 --> 00:10:08.410
Nothing, normal.

00:10:08.410 --> 00:10:13.757
So I'm going to build the same
image from the same recipe.

00:10:13.757 --> 00:10:15.840
This time the recipe is
not locally on my machine,

00:10:15.840 --> 00:10:18.440
it was published on Github.

00:10:18.440 --> 00:10:21.950
So I'll just give
the URL to Github.

00:10:21.950 --> 00:10:25.080
And the Dockerfile will
be downloaded and used

00:10:25.080 --> 00:10:27.030
to build a container.

00:10:27.030 --> 00:10:31.640
And so I will see the exact
same step on my local machine.

00:10:31.640 --> 00:10:35.040
It will download it
too, install Java 8,

00:10:35.040 --> 00:10:36.890
extract and build
the application.

00:10:36.890 --> 00:10:38.210
It will be ready to run.

00:10:38.210 --> 00:10:39.880
ALEXIS MP: Yeah,
so maybe a little

00:10:39.880 --> 00:10:42.010
bit faster, because the
network is somewhat faster.

00:10:42.010 --> 00:10:44.080
But other than that,
it's very similar.

00:10:44.080 --> 00:10:46.080
So we'll skip ahead
and get to the point

00:10:46.080 --> 00:10:49.320
where it's almost ready
to finish building.

00:10:55.679 --> 00:10:56.720
DAVID GAGEOT: Here it is.

00:10:56.720 --> 00:11:00.070
So the build is running.

00:11:04.530 --> 00:11:06.230
And done.

00:11:06.230 --> 00:11:08.430
The container is ready to run.

00:11:08.430 --> 00:11:12.390
So let's make sure
that it runs properly.

00:11:12.390 --> 00:11:14.660
We'll use the docker
run command again.

00:11:14.660 --> 00:11:16.910
ALEXIS MP: So it happens to
be the exact same command,

00:11:16.910 --> 00:11:18.340
but you could map it
to a different port

00:11:18.340 --> 00:11:19.048
if you wanted to.

00:11:19.048 --> 00:11:22.860
DAVID GAGEOT: Same version
of Java as on my machine.

00:11:22.860 --> 00:11:27.905
And then I can run the real web
application in the background.

00:11:34.990 --> 00:11:36.066
Done.

00:11:36.066 --> 00:11:38.190
And I can check that
everything is running properly

00:11:38.190 --> 00:11:43.752
by opening the IP of
my VM, and it works.

00:11:43.752 --> 00:11:44.460
ALEXIS MP: Great.

00:11:44.460 --> 00:11:47.870
So we've successfully shipped
something from the laptop

00:11:47.870 --> 00:11:51.130
to the cloud, and
it behaves exactly

00:11:51.130 --> 00:11:54.370
in the same way, which is what
we were trying to demonstrate.

00:11:54.370 --> 00:11:56.550
That's a good thing.

00:11:56.550 --> 00:11:58.142
Great, so that worked.

00:11:58.142 --> 00:11:58.850
That's very good.

00:11:58.850 --> 00:12:01.220
We were trying to
demonstrate something.

00:12:01.220 --> 00:12:04.730
Shipping, building, and
behaving the exact same way

00:12:04.730 --> 00:12:06.140
on both environments.

00:12:06.140 --> 00:12:09.090
And you can have that on
many different environments.

00:12:09.090 --> 00:12:10.830
So, by the way, you
were doing a demo

00:12:10.830 --> 00:12:14.170
on Mac, which required
a little bit of setup.

00:12:14.170 --> 00:12:14.810
You want to--

00:12:14.810 --> 00:12:15.560
DAVID GAGEOT: Yes.

00:12:15.560 --> 00:12:19.500
It uses a component
called Boot2docker.

00:12:19.500 --> 00:12:22.650
Boot2docker is a
very lightweight VM

00:12:22.650 --> 00:12:25.070
that is running Linux.

00:12:25.070 --> 00:12:29.260
And it is used to run the
Docker daemon on my laptop.

00:12:29.260 --> 00:12:31.500
On the Google Cloud
platform, this

00:12:31.500 --> 00:12:33.860
is Debian, so it's
running natively.

00:12:33.860 --> 00:12:36.872
But on my machine, it's the
only way to make it run.

00:12:36.872 --> 00:12:38.830
ALEXIS MP: Great, so that
was very interesting.

00:12:38.830 --> 00:12:41.540
One key element, obviously,
here is the Dockerfile itself,

00:12:41.540 --> 00:12:44.060
which is somewhat of the recipe.

00:12:44.060 --> 00:12:46.010
Who writes the Dockerfile,
in your experience?

00:12:46.010 --> 00:12:47.287
Who should write it?

00:12:47.287 --> 00:12:48.870
DAVID GAGEOT: I think
that it's mainly

00:12:48.870 --> 00:12:50.580
the developer that
writes the Dockerfile.

00:12:50.580 --> 00:12:55.710
But you've seen on
Dockerfile that you

00:12:55.710 --> 00:12:58.960
can base your Dockerfile
from another container.

00:12:58.960 --> 00:13:00.460
So this container
is base container.

00:13:00.460 --> 00:13:02.840
It could be [INAUDIBLE],
Ubuntu, or Debian.

00:13:02.840 --> 00:13:05.110
Or it could be a base
container that you

00:13:05.110 --> 00:13:07.830
developed with an operation.

00:13:07.830 --> 00:13:10.790
So you choose a base container
for all your applications,

00:13:10.790 --> 00:13:14.640
and then the developer
writes the Dockerfile

00:13:14.640 --> 00:13:16.470
for each application.

00:13:16.470 --> 00:13:17.420
ALEXIS MP: Great.

00:13:17.420 --> 00:13:21.160
So would you recommend
using Docker today?

00:13:21.160 --> 00:13:23.410
On development environment,
on production environment,

00:13:23.410 --> 00:13:25.770
maybe on Compute
Engine, specifically?

00:13:25.770 --> 00:13:29.660
DAVID GAGEOT: I do it
every day for my customers.

00:13:29.660 --> 00:13:33.560
There's a lot of big companies
using Docker already.

00:13:33.560 --> 00:13:36.930
So it's really a production
ready, so try it.

00:13:36.930 --> 00:13:39.670
Give it a try, and
you'll be happy, I think.

00:13:39.670 --> 00:13:41.310
ALEXIS MP: And try
it for yourself.

00:13:41.310 --> 00:13:43.370
You've probably heard
of Docker before.

00:13:43.370 --> 00:13:45.260
Now is a good time
to try, and you

00:13:45.260 --> 00:13:48.070
could do this on
the Cloud platform,

00:13:48.070 --> 00:13:49.910
and Compute Engine,
specifically,

00:13:49.910 --> 00:13:53.400
following something similar
to what David showed us today.

00:13:53.400 --> 00:13:54.490
So thank you, David.

00:13:54.490 --> 00:13:55.490
DAVID GAGEOT: Thank you.

00:13:55.490 --> 00:13:57.906
ALEXIS MP: Thanks for coming,
and I'll be seeing you soon.

00:13:57.906 --> 00:13:58.854
Cheers.

