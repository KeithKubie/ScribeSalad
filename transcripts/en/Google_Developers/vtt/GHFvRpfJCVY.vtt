WEBVTT
Kind: captions
Language: en

00:00:07.280 --> 00:00:12.170
JOHANNDU TOIT: So welcome
to Google Developer's Africa

00:00:12.170 --> 00:00:14.040
broadcast.

00:00:14.040 --> 00:00:15.770
So just a quick intro.

00:00:15.770 --> 00:00:17.480
We're all GDEs here.

00:00:17.480 --> 00:00:22.490
In the GDE program, we are
appointed in different regions,

00:00:22.490 --> 00:00:24.870
acting as resources
and the people

00:00:24.870 --> 00:00:28.230
to go guide local students
and companies, just

00:00:28.230 --> 00:00:30.880
help with Google, and
just direct your chats,

00:00:30.880 --> 00:00:33.650
our needs back to
Google HQ, and see

00:00:33.650 --> 00:00:35.680
if they can help us in Africa.

00:00:35.680 --> 00:00:38.820
So let me just introduce
the premise of the show.

00:00:38.820 --> 00:00:42.530
We're going for monthly,
downloadable MP3,

00:00:42.530 --> 00:00:44.440
which we hope you can get.

00:00:44.440 --> 00:00:47.940
If you get it to watch later,
let's see how that goes.

00:00:47.940 --> 00:00:51.345
And we are looking for people
to invite to the live Hangouts.

00:00:51.345 --> 00:00:55.114
So later in the show, we're
going to post our links.

00:00:55.114 --> 00:00:56.530
Please go to the
form, fill it in.

00:00:56.530 --> 00:00:58.540
We'd love to have you.

00:00:58.540 --> 00:01:01.880
And we're really trying to
base this off a theme base.

00:01:01.880 --> 00:01:03.770
So every episode,
we're going to try

00:01:03.770 --> 00:01:06.660
to focus on one thing,
which in this episode,

00:01:06.660 --> 00:01:08.097
you might see the title.

00:01:08.097 --> 00:01:09.555
I'm going to hand
off to Hiren now,

00:01:09.555 --> 00:01:13.534
who's going to explain
and introduce the panel.

00:01:13.534 --> 00:01:14.450
HIREN PATEL: Hi, guys.

00:01:14.450 --> 00:01:18.760
So an introduction of who's on
the panel today, I am Hiren.

00:01:18.760 --> 00:01:21.340
I'm a Cloud based
GDE in Cape Town.

00:01:21.340 --> 00:01:23.410
Johanndu, who you've
met, is a Cloud

00:01:23.410 --> 00:01:26.100
based GDE in Cape Town,
as well, and the founder

00:01:26.100 --> 00:01:29.090
of a few startups
here in Cape Town.

00:01:29.090 --> 00:01:32.830
We have Alex, Android GDE, and
the author of the Cape Town

00:01:32.830 --> 00:01:39.890
MyCiTi Android app, and Dale,
Cloud GDE, and CTO of Nomanini

00:01:39.890 --> 00:01:41.870
here in Cape Town.

00:01:41.870 --> 00:01:46.350
So you've seen the theme
for this episode is staying

00:01:46.350 --> 00:01:50.930
connected in Africa, and it's
all about giving your users

00:01:50.930 --> 00:01:54.500
a good experience,
taking into consideration

00:01:54.500 --> 00:01:58.670
the internet connectivity
challenges of Africa.

00:01:58.670 --> 00:02:01.570
So as we all know,
mobile is king in Africa,

00:02:01.570 --> 00:02:04.835
but in a lot of areas,
the mobile networks

00:02:04.835 --> 00:02:09.320
and the mobile connectivity can
be very patchy, high latency,

00:02:09.320 --> 00:02:12.310
low frequent, and
even nonexistent.

00:02:12.310 --> 00:02:15.690
Now, most mobile apps today make
use of a Cloud-based back end,

00:02:15.690 --> 00:02:20.040
which is generally very great,
but a problem comes into play

00:02:20.040 --> 00:02:22.510
when these apps don't
take into consideration

00:02:22.510 --> 00:02:27.190
that they don't always have
access to this Cloud back end.

00:02:27.190 --> 00:02:29.780
What happens as a result
is that they aren't

00:02:29.780 --> 00:02:32.730
able to provide the basic
functionality to the users,

00:02:32.730 --> 00:02:36.290
and this gives the users a
bad experience on the app.

00:02:36.290 --> 00:02:39.640
So all apps in Africa
need to be able to provide

00:02:39.640 --> 00:02:43.040
the base functionality even when
they can't access their Cloud

00:02:43.040 --> 00:02:43.710
back end.

00:02:43.710 --> 00:02:45.270
And that's the
discussion, that's

00:02:45.270 --> 00:02:46.870
the topic of discussion today.

00:02:46.870 --> 00:02:49.320
We're going to go into
some depth on the problems,

00:02:49.320 --> 00:02:52.060
as well as some
solutions around this.

00:02:52.060 --> 00:02:54.030
So the schedule
going forward, we

00:02:54.030 --> 00:02:58.950
will have Alex and Dale present
on the subject for 10 minutes.

00:02:58.950 --> 00:03:03.210
We will then have a Q&amp;A
session for five minutes.

00:03:03.210 --> 00:03:06.940
We will have a closing and wrap
up for five minutes thereafter.

00:03:06.940 --> 00:03:09.390
If you have any questions,
please post the questions

00:03:09.390 --> 00:03:14.900
to the YouTube video
section, and we

00:03:14.900 --> 00:03:18.800
will take those questions in the
Q&amp;A. Just before I hand over,

00:03:18.800 --> 00:03:21.300
we have our latest
Cloud GDE, Kenneth,

00:03:21.300 --> 00:03:25.300
joining us from Nairobi
as well, on the panel.

00:03:25.300 --> 00:03:28.300
JOHANNDU TOIT: Hi, Ken.

00:03:28.300 --> 00:03:30.660
HIREN PATEL: So I'll hand
over to Alex and Dale

00:03:30.660 --> 00:03:31.990
to kick it off.

00:03:36.530 --> 00:03:39.250
DALE HUMBY: I'm Dale.

00:03:39.250 --> 00:03:41.780
Mobile networks in Africa
can often be unreliable,

00:03:41.780 --> 00:03:45.140
and they drop calls and
connections at the worst time.

00:03:45.140 --> 00:03:48.030
Data's also expensive, with
some networks charging as much

00:03:48.030 --> 00:03:50.430
as $1.00 per megabyte for data.

00:03:50.430 --> 00:03:52.450
So at first, I'm going
to talk on the basis

00:03:52.450 --> 00:03:55.927
of how mobile networks work, and
why things sometimes go wrong.

00:03:55.927 --> 00:03:57.760
And then I'm going to
talk about some things

00:03:57.760 --> 00:03:59.900
to keep in mind while
you're designing an app.

00:03:59.900 --> 00:04:02.446
And then hand over to Alex,
who's going to talk about some

00:04:02.446 --> 00:04:04.935
of the potential solutions
for overcoming these problems.

00:04:10.330 --> 00:04:14.635
We'll try to switch over
to some slides quickly.

00:04:14.635 --> 00:04:16.868
Let's get them open here.

00:04:22.850 --> 00:04:24.720
So while your phone
is switched on,

00:04:24.720 --> 00:04:28.260
it is always connected to at
least one mobile base station,

00:04:28.260 --> 00:04:30.840
and if it isn't, it tries
hard to get connected.

00:04:30.840 --> 00:04:33.100
And say you wanted to visit
a web page on your phone,

00:04:33.100 --> 00:04:35.870
your phone sends that request
to the nearest mobile base

00:04:35.870 --> 00:04:39.050
station, which routes your
data to a switching center,

00:04:39.050 --> 00:04:43.620
and then, from there, it's
routed onto the internet.

00:04:43.620 --> 00:04:48.770
As you travel around, your
phone roams from base station

00:04:48.770 --> 00:04:49.750
to base station.

00:04:49.750 --> 00:04:53.440
Up to seven towers are connected
to your phone at any time.

00:04:53.440 --> 00:04:56.920
This allows your phone to hand
over between towers seamlessly,

00:04:56.920 --> 00:04:59.110
so data and voice calls
don't get dropped.

00:05:02.180 --> 00:05:05.002
Your phone sends data to
any tower it's connected to,

00:05:05.002 --> 00:05:07.210
and the tower routes that
data to a switching center,

00:05:07.210 --> 00:05:09.830
and then on to the internet,
and replies are sent back

00:05:09.830 --> 00:05:11.560
from a server that
you're connecting to,

00:05:11.560 --> 00:05:14.070
to all the towers that
your phone is connected to,

00:05:14.070 --> 00:05:17.150
and then back on to your phone.

00:05:17.150 --> 00:05:20.530
This is sort of like a monkey
swinging from branch to branch.

00:05:20.530 --> 00:05:22.350
The monkey won't let
go from one branch

00:05:22.350 --> 00:05:24.240
before it's holding
onto the next one.

00:05:24.240 --> 00:05:26.240
But sometimes, the branch
that you want to go to

00:05:26.240 --> 00:05:28.660
has too many other monkeys
on it and there's nowhere

00:05:28.660 --> 00:05:31.282
for you to go.

00:05:31.282 --> 00:05:32.740
So say you're
traveling, and you're

00:05:32.740 --> 00:05:34.930
connected to a
first base station,

00:05:34.930 --> 00:05:37.589
and there's loads of devices
on the second base station.

00:05:37.589 --> 00:05:39.130
You don't know that,
but you continue

00:05:39.130 --> 00:05:42.460
traveling towards the second
one, the base station that's

00:05:42.460 --> 00:05:44.169
now overloaded.

00:05:44.169 --> 00:05:46.210
Your phone is still
connected to the first tower,

00:05:46.210 --> 00:05:48.418
and your data connection
and your voice call is fine,

00:05:48.418 --> 00:05:50.410
but you can't get to
second base station,

00:05:50.410 --> 00:05:52.750
because too many
other connections are

00:05:52.750 --> 00:05:55.690
open on that one.

00:05:55.690 --> 00:05:59.000
Eventually, you travel too far
from the first base station.

00:05:59.000 --> 00:06:01.710
The signal is weak and
the connection breaks.

00:06:01.710 --> 00:06:04.130
But you're still not connected
to the closer, busy base

00:06:04.130 --> 00:06:04.980
station.

00:06:04.980 --> 00:06:07.720
And at that point, the call
fails because you're not

00:06:07.720 --> 00:06:08.960
connected to anything.

00:06:08.960 --> 00:06:10.400
And if you're
trying to use data,

00:06:10.400 --> 00:06:12.274
well, you can't get a
data connection either.

00:06:15.190 --> 00:06:17.890
So let's look at what's
happening under the hood.

00:06:17.890 --> 00:06:21.000
GSM networks, which is
primarily what we use in Africa,

00:06:21.000 --> 00:06:24.050
use what's called TDMA, or
Time Division Multiple Access,

00:06:24.050 --> 00:06:27.950
to allow many devices to connect
to the same base station.

00:06:27.950 --> 00:06:31.610
Each base station has 124
channels, roughly at about 900

00:06:31.610 --> 00:06:33.650
megahertz or 1800 megahertz.

00:06:33.650 --> 00:06:36.610
And each channel has
eight time slots.

00:06:36.610 --> 00:06:38.885
Each phone will
transmit during a time

00:06:38.885 --> 00:06:42.280
slot for a few milliseconds,
and then the next phone

00:06:42.280 --> 00:06:44.880
will transmit for the next
few milliseconds, and so on.

00:06:44.880 --> 00:06:47.060
This happens so quickly
that you don't notice it.

00:06:47.060 --> 00:06:49.600
It's very similar in the
way that operating systems

00:06:49.600 --> 00:06:55.290
can run many programs, even
with only one or two CPUs.

00:06:55.290 --> 00:06:58.020
On a base station, some time
slots will be used for voice,

00:06:58.020 --> 00:07:00.620
and the other free time
slots can be used for data.

00:07:03.230 --> 00:07:04.850
As more people use
the base stations,

00:07:04.850 --> 00:07:06.960
the networks prioritize
voice over data,

00:07:06.960 --> 00:07:09.130
because they make more
money on voice calls.

00:07:09.130 --> 00:07:12.620
So they reduce the number of
data time slots available.

00:07:12.620 --> 00:07:15.520
Eventually, if a base station
is completely overloaded,

00:07:15.520 --> 00:07:17.100
all the time slots
are used for voice

00:07:17.100 --> 00:07:21.240
and nothing is left for data,
and you can't get any data

00:07:21.240 --> 00:07:24.010
through to the servers.

00:07:24.010 --> 00:07:26.570
So that's a little background
of how mobile networks work,

00:07:26.570 --> 00:07:28.319
and why sometimes your
calls are dropped,

00:07:28.319 --> 00:07:30.610
and you can't get a data
connection, even when it looks

00:07:30.610 --> 00:07:31.776
like you've got good signal.

00:07:34.900 --> 00:07:37.680
So given that data
connections can be flaky,

00:07:37.680 --> 00:07:39.240
what can we do about it?

00:07:39.240 --> 00:07:43.780
Well, the first solution is to
transmit as little as possible.

00:07:43.780 --> 00:07:47.500
Data costs are expensive, some
people paying as much as $1.00

00:07:47.500 --> 00:07:50.320
per megabyte.

00:07:50.320 --> 00:07:54.070
And if you're using HTTP,
you can reduce the data

00:07:54.070 --> 00:07:58.640
by using a compact data format,
like JSON instead of XML

00:07:58.640 --> 00:08:02.620
and you can use GZIP for
something like a 50% savings.

00:08:09.430 --> 00:08:11.190
Sorry, can we just
switch back to that?

00:08:17.410 --> 00:08:18.390
There we go.

00:08:18.390 --> 00:08:20.130
I'm back.

00:08:20.130 --> 00:08:23.630
As I was saying, if you're
using something like HTTP,

00:08:23.630 --> 00:08:27.500
you can use JSON as a
compact data format over XML.

00:08:27.500 --> 00:08:29.080
And then you can GZIP it.

00:08:29.080 --> 00:08:31.350
And we found that
GZIPing data can

00:08:31.350 --> 00:08:34.010
add as much as a 50% savings.

00:08:34.010 --> 00:08:36.150
But something that I
only realized recently

00:08:36.150 --> 00:08:39.909
is compression is only on the
server side and for downloads.

00:08:39.909 --> 00:08:41.784
If you want to compress
uploads, you probably

00:08:41.784 --> 00:08:44.090
have to roll something
to back your app.

00:08:44.090 --> 00:08:47.497
You can use GZIP or another
protocol like Deflate.

00:08:47.497 --> 00:08:48.580
But I found it's worth it.

00:08:48.580 --> 00:08:50.250
In some data that
I've been doing,

00:08:50.250 --> 00:08:52.930
I've had as much as a 50%
savings, especially when

00:08:52.930 --> 00:08:55.200
you batch those uploads.

00:08:55.200 --> 00:08:58.250
Some actually might not
need to use data compression

00:08:58.250 --> 00:09:02.900
because you may be uploading
images or movie clips.

00:09:02.900 --> 00:09:04.670
And formats like
JPEG and MPEG, which

00:09:04.670 --> 00:09:07.640
are used for images and
movies are already compressed,

00:09:07.640 --> 00:09:10.900
and compressing them again with
GZIP is not going to help much.

00:09:10.900 --> 00:09:13.970
Just remember to resize
your photos on the app,

00:09:13.970 --> 00:09:17.520
on the client's side,
before you upload them.

00:09:17.520 --> 00:09:19.750
You can also batch
requests and responses.

00:09:19.750 --> 00:09:21.500
If you're doing
many small requests,

00:09:21.500 --> 00:09:23.780
there's a lot of
overhead in HTTP headers,

00:09:23.780 --> 00:09:26.410
and a cookie, which is
used for authentication,

00:09:26.410 --> 00:09:29.260
can be as much as 1 to 2
kilobytes, versus maybe

00:09:29.260 --> 00:09:32.560
100 or 200 bytes that
you're trying to send up,

00:09:32.560 --> 00:09:39.050
and that's a 10 times overhead,
instead of-- yeah, [INAUDIBLE].

00:09:39.050 --> 00:09:42.860
HTTP/2, which is based
on Google's SPDY protocol

00:09:42.860 --> 00:09:44.240
overcomes these issues.

00:09:44.240 --> 00:09:48.190
It's already supported on
Android using the OkHttp stack.

00:09:48.190 --> 00:09:50.280
All the normal browsers
are supported already.

00:09:50.280 --> 00:09:51.755
That only sends
those headers once,

00:09:51.755 --> 00:09:53.254
and there's many
other optimizations

00:09:53.254 --> 00:09:58.960
that you can do which it has
got built in for mobile usage.

00:09:58.960 --> 00:10:01.650
And only send when you need to.

00:10:01.650 --> 00:10:03.710
If a server needs to send
a message to a client,

00:10:03.710 --> 00:10:04.831
use [INAUDIBLE] messaging.

00:10:04.831 --> 00:10:06.330
Don't pull the
server the whole time

00:10:06.330 --> 00:10:08.640
if you need to get a connection.

00:10:08.640 --> 00:10:10.770
WebSockets is an
attractive connection

00:10:10.770 --> 00:10:12.410
between the server and client.

00:10:12.410 --> 00:10:14.450
And the server can
send data to the client

00:10:14.450 --> 00:10:16.450
without having to pull.

00:10:16.450 --> 00:10:19.025
SSL, which is
encryption, is important,

00:10:19.025 --> 00:10:22.350
and prevents things like third
parties from sniffing data

00:10:22.350 --> 00:10:25.770
and man-in-the-middle attacks,
especially over public Wi-Fi

00:10:25.770 --> 00:10:28.620
like internet cafes,
coffee shops, airports.

00:10:28.620 --> 00:10:31.010
But the problem is it adds
latency to your application.

00:10:31.010 --> 00:10:34.600
It takes 12 packs to
negotiate a SSL connection.

00:10:34.600 --> 00:10:37.280
And that's three round trips
over the mobile network,

00:10:37.280 --> 00:10:39.946
compared to just three
packets, or one round

00:10:39.946 --> 00:10:43.600
trip from an unencrypted
TCP connection.

00:10:43.600 --> 00:10:46.080
But if you're using
something like HTTP/2,

00:10:46.080 --> 00:10:49.210
it keeps the connection open
for as long as possible,

00:10:49.210 --> 00:10:51.370
and is reused.

00:10:51.370 --> 00:10:53.000
Reducing data also
has the benefit

00:10:53.000 --> 00:10:54.970
of reducing battery usage.

00:10:54.970 --> 00:10:57.730
Continuously transmitting
data, especially in poor signal

00:10:57.730 --> 00:10:59.860
areas, uses a lot of
power, because when

00:10:59.860 --> 00:11:02.080
the phone is struggling
to get a signal,

00:11:02.080 --> 00:11:05.140
it boosts the transmitter
power to get your data through.

00:11:05.140 --> 00:11:07.460
And on that note,
if you're using GPS,

00:11:07.460 --> 00:11:10.340
think about how often you really
need to update the position.

00:11:10.340 --> 00:11:13.480
GPS uses a lot more
battery than even GSM coms.

00:11:13.480 --> 00:11:15.870
Fused Location
Provider on Android

00:11:15.870 --> 00:11:17.950
estimates a position
based on the cell network

00:11:17.950 --> 00:11:20.680
and surrounding
Wi-Fi base stations.

00:11:20.680 --> 00:11:24.190
And so your app doesn't
need to use GPS as often.

00:11:24.190 --> 00:11:28.130
Data and battery hungry apps
get deleted by users, or worse,

00:11:28.130 --> 00:11:29.602
they get a one star rating.

00:11:29.602 --> 00:11:31.060
I'm now going to
hand over to Alex,

00:11:31.060 --> 00:11:33.440
who's going to talk about
building Android apps that

00:11:33.440 --> 00:11:35.786
handle these difficult
network conditions.

00:11:35.786 --> 00:11:37.530
ALEX KOLLER: Thanks Dale.

00:11:37.530 --> 00:11:40.170
My name is Alex and I'm
an Android developer.

00:11:40.170 --> 00:11:41.940
And from what Dale
has presented,

00:11:41.940 --> 00:11:44.610
it's pretty clear that we have
some challenges to overcome

00:11:44.610 --> 00:11:46.230
with these networking problems.

00:11:46.230 --> 00:11:48.950
The good news is that the
Android framework actually

00:11:48.950 --> 00:11:50.810
handles a lot of
these things for us.

00:11:50.810 --> 00:11:53.860
At least in the recent
versions, KitKat and Lollipop.

00:11:53.860 --> 00:11:57.250
But using the open
OkHttp library,

00:11:57.250 --> 00:11:59.180
you can get the
same results using

00:11:59.180 --> 00:12:01.150
all the versions of Android.

00:12:01.150 --> 00:12:04.780
And this generally takes care
of things like request retries,

00:12:04.780 --> 00:12:07.240
simple caching, selecting
the right protocols,

00:12:07.240 --> 00:12:12.029
such as HTTP/2, and other
low level things like that.

00:12:12.029 --> 00:12:14.070
What we're going to do is
discuss some techniques

00:12:14.070 --> 00:12:16.580
you can use while building
your apps to help you create

00:12:16.580 --> 00:12:18.930
the best possible user
experience even when

00:12:18.930 --> 00:12:22.020
the network isn't
being your best friend.

00:12:22.020 --> 00:12:25.230
First thing is storing
everything on the client.

00:12:25.230 --> 00:12:28.150
Persist everything in an
appropriate data store,

00:12:28.150 --> 00:12:29.800
such as SQLite.

00:12:29.800 --> 00:12:31.720
This means you'll
always, always have

00:12:31.720 --> 00:12:34.670
data available to show
immediately in your UI

00:12:34.670 --> 00:12:37.460
if you have a slow
or no connection.

00:12:37.460 --> 00:12:39.946
Even if the data is a bit
old, it's usually better

00:12:39.946 --> 00:12:42.400
to show that than nothing.

00:12:42.400 --> 00:12:45.490
By combining a sync
adapter, content provider,

00:12:45.490 --> 00:12:48.540
and cursor loaders, which are
all available in the Android

00:12:48.540 --> 00:12:52.120
framework, you can update
your data in the background,

00:12:52.120 --> 00:12:53.890
and always be sure
that the latest data is

00:12:53.890 --> 00:12:55.140
showing in the UI immediately.

00:12:57.650 --> 00:13:00.490
Speaking of the UI,
never block the UI when

00:13:00.490 --> 00:13:02.880
you're doing network requests.

00:13:02.880 --> 00:13:05.026
As a user, there's nothing
worse than being stopped

00:13:05.026 --> 00:13:07.275
in your tracks while you
wait for some networking task

00:13:07.275 --> 00:13:08.530
to complete.

00:13:08.530 --> 00:13:11.470
Whether that's fetching new
data or posting a new message,

00:13:11.470 --> 00:13:14.096
there are very few times it
makes sense to block the UI

00:13:14.096 --> 00:13:16.820
and prevent the user from
actually using your app.

00:13:16.820 --> 00:13:20.990
This is especially true on slow
and unreliable connections.

00:13:20.990 --> 00:13:23.550
If you need to indicate that
there's an ongoing process,

00:13:23.550 --> 00:13:27.560
use a small inline progress
indicator inside the views.

00:13:27.560 --> 00:13:29.060
This shows the user
that something's

00:13:29.060 --> 00:13:30.890
happening, but doesn't
stop them from using

00:13:30.890 --> 00:13:32.760
the rest of your app.

00:13:32.760 --> 00:13:37.070
But even better, is if you saved
the changed data on the device

00:13:37.070 --> 00:13:38.779
and update the UI immediately.

00:13:38.779 --> 00:13:40.320
And you can assume
that their request

00:13:40.320 --> 00:13:42.080
will finish successfully.

00:13:42.080 --> 00:13:45.170
However, if it doesn't,
you must alert the user

00:13:45.170 --> 00:13:48.340
that it's changed and roll back
that change that you've saved.

00:13:48.340 --> 00:13:50.726
This can be a little
bit tricky, but I

00:13:50.726 --> 00:13:53.580
think it's well worth
it, in my opinion.

00:13:53.580 --> 00:13:56.549
There's one special case where
you do need to block the UI.

00:13:56.549 --> 00:13:58.090
And that's when you
have first loads,

00:13:58.090 --> 00:14:01.430
or after user logs in, when
there is no data to show,

00:14:01.430 --> 00:14:03.920
and you have to fetch
it from a server.

00:14:03.920 --> 00:14:07.605
It's important to fetch that
data as quickly as possible.

00:14:07.605 --> 00:14:11.540
However, most apps have a
summary dashboard type screen

00:14:11.540 --> 00:14:13.230
where we show a
bit of everything,

00:14:13.230 --> 00:14:15.050
a summary of the entire app.

00:14:15.050 --> 00:14:16.860
And if you have a
nicely designed,

00:14:16.860 --> 00:14:18.930
restful API, that
means you'll have

00:14:18.930 --> 00:14:23.950
to fetch information from a
number of different endpoints.

00:14:23.950 --> 00:14:26.780
What I usually do
is I combine those

00:14:26.780 --> 00:14:29.170
into a single API endpoint.

00:14:29.170 --> 00:14:31.240
That allows me to fetch
all of the information

00:14:31.240 --> 00:14:33.880
for the first screen in
one single request, which

00:14:33.880 --> 00:14:36.080
is far more efficient than
doing multiple requests

00:14:36.080 --> 00:14:37.300
on the network.

00:14:37.300 --> 00:14:40.350
And this results in a shorter
load time for your apps.

00:14:43.750 --> 00:14:46.610
One other thing to keep in
mind is always push data

00:14:46.610 --> 00:14:50.180
to the devices whenever
possible, instead of pulling.

00:14:50.180 --> 00:14:53.540
As Dale mentioned, this
is a preferred technique

00:14:53.540 --> 00:14:56.310
in terms of data
transfer because updates

00:14:56.310 --> 00:14:58.770
get to your users
faster, but it also

00:14:58.770 --> 00:15:02.190
has less of an impact on
battery and data costs.

00:15:02.190 --> 00:15:07.120
You can use Google Cloud
Messaging for this on Android.

00:15:07.120 --> 00:15:08.730
That covers some
basic techniques

00:15:08.730 --> 00:15:10.920
we can use for handling
unreliable and expensive

00:15:10.920 --> 00:15:13.150
networks, but how can
we get the back end up

00:15:13.150 --> 00:15:14.850
and running quickly?

00:15:14.850 --> 00:15:17.360
I've used App Engine
a few times recently,

00:15:17.360 --> 00:15:20.180
and it's a great option for
a low maintenance back end.

00:15:20.180 --> 00:15:23.020
You can use Java to
get going quickly,

00:15:23.020 --> 00:15:26.175
and there's a free daily
[INAUDIBLE] for most apps.

00:15:26.175 --> 00:15:28.780
However, it doesn't
offer specific support

00:15:28.780 --> 00:15:31.800
for any of the things we've
mentioned today out of the box.

00:15:31.800 --> 00:15:34.900
That's where things like
Firebase come into play.

00:15:34.900 --> 00:15:38.660
Firebase is described as a
complete back end solution.

00:15:38.660 --> 00:15:41.250
There's no other coding
required, or even possible,

00:15:41.250 --> 00:15:42.790
on the back end.

00:15:42.790 --> 00:15:45.600
It basically provides
an API for your data,

00:15:45.600 --> 00:15:48.272
and handles other things,
such as authentication

00:15:48.272 --> 00:15:51.390
and common networking tasks.

00:15:51.390 --> 00:15:53.410
One of the benefits is
it's cross-platform,

00:15:53.410 --> 00:15:56.820
so it works on web,
iOS and Android.

00:15:56.820 --> 00:15:59.570
But the real gem
of this software

00:15:59.570 --> 00:16:01.880
is the client-side SDKs.

00:16:01.880 --> 00:16:05.560
They support offline mode
and data synchronizations.

00:16:05.560 --> 00:16:09.360
That means that you can
persist data on the device

00:16:09.360 --> 00:16:10.862
while there's no
network connection

00:16:10.862 --> 00:16:12.695
and then in the background
it'll synchronize

00:16:12.695 --> 00:16:14.370
that with the server.

00:16:14.370 --> 00:16:16.510
This is one of the trickiest
problems to deal with.

00:16:16.510 --> 00:16:20.490
So it's fantastic having
that done well for you.

00:16:20.490 --> 00:16:22.910
There's also a free pricing
option to get started.

00:16:22.910 --> 00:16:24.620
I haven't used it
extensively, but I

00:16:24.620 --> 00:16:27.130
do think it's great
for prototype,

00:16:27.130 --> 00:16:29.700
especially for apps that
require real time syncing,

00:16:29.700 --> 00:16:34.070
such as mobile
[AUDIO OUT] applications.

00:16:34.070 --> 00:16:37.480
So to wrap up, remember
to always store your data

00:16:37.480 --> 00:16:40.040
on the device, so you can
display it immediately.

00:16:40.040 --> 00:16:43.170
Never block the UI when
doing network requests.

00:16:43.170 --> 00:16:44.800
Load all of your
data that you need

00:16:44.800 --> 00:16:47.390
upfront in a single request.

00:16:47.390 --> 00:16:49.370
And push data to
the device instead

00:16:49.370 --> 00:16:55.240
of pulling for it to save
battery and data costs.

00:16:55.240 --> 00:16:58.090
With all the links to the things
we've mentioned in this talk,

00:16:58.090 --> 00:17:02.730
feel free to [AUDIO OUT] so
that we can share that with you.

00:17:06.679 --> 00:17:07.970
HIREN PATEL: Cool, thanks guys.

00:17:07.970 --> 00:17:11.680
So we're now going to
take some questions.

00:17:11.680 --> 00:17:14.690
Just a reminder, if you're
watching this live on YouTube,

00:17:14.690 --> 00:17:15.970
please post your questions.

00:17:15.970 --> 00:17:16.970
I'll read your comments.

00:17:16.970 --> 00:17:20.240
We're watching those as well.

00:17:20.240 --> 00:17:22.819
So for the first
question, what apps

00:17:22.819 --> 00:17:25.349
would be a good example of
how to handle a connection

00:17:25.349 --> 00:17:26.039
failure well?

00:17:26.039 --> 00:17:29.657
And how do they do it?

00:17:29.657 --> 00:17:31.740
ALEX KOLLER: One app I
think does this quite well,

00:17:31.740 --> 00:17:36.020
based on the web, is
the Gmail Inbox app.

00:17:36.020 --> 00:17:39.587
When you're typing an email,
you don't get any indication

00:17:39.587 --> 00:17:40.795
that it's saved or not saved.

00:17:40.795 --> 00:17:42.240
You assume it's saved.

00:17:42.240 --> 00:17:45.090
But if you lose a connection,
there's a subtle reminder

00:17:45.090 --> 00:17:47.420
that this draft is not saved.

00:17:47.420 --> 00:17:49.540
But it lets you continue
with what you're doing,

00:17:49.540 --> 00:17:54.450
and when the network comes back
up, everything syncs again.

00:17:54.450 --> 00:17:55.660
DALE HUMBY: [INAUDIBLE].

00:17:55.660 --> 00:17:58.140
One of my favorite
apps is 8tracks,

00:17:58.140 --> 00:18:02.100
and it's a media, well, it's
like an online radio station,

00:18:02.100 --> 00:18:04.220
except what they do in
the background is they

00:18:04.220 --> 00:18:06.970
stream an MP3 to your phone.

00:18:06.970 --> 00:18:10.770
So it's not trying to do live
streaming off of content,

00:18:10.770 --> 00:18:12.240
like in a [INAUDIBLE].

00:18:12.240 --> 00:18:13.144
It just sends an MP3.

00:18:13.144 --> 00:18:14.685
And as soon as the
first MP3 has been

00:18:14.685 --> 00:18:17.244
downloaded in the playlist,
it downloads the next one.

00:18:17.244 --> 00:18:18.660
So there's always
something there.

00:18:18.660 --> 00:18:20.826
So when you're in spotty
connections, like in a lift

00:18:20.826 --> 00:18:23.136
or in underground parking,
it still works pretty well.

00:18:28.490 --> 00:18:30.380
HIREN PATEL: OK.

00:18:30.380 --> 00:18:33.070
Still thinking framework
and it stops working.

00:18:33.070 --> 00:18:34.330
How would I go about this?

00:18:34.330 --> 00:18:37.662
What should I do as a developer?

00:18:37.662 --> 00:18:40.120
ALEX KOLLER: Well, when I was
playing around with Firebase,

00:18:40.120 --> 00:18:44.990
there are things in the SDK to
allow you to react to a failed

00:18:44.990 --> 00:18:47.097
connection or a failed sync.

00:18:47.097 --> 00:18:48.680
And it's really up
to the application.

00:18:48.680 --> 00:18:52.641
It depends on the context
of the application, how

00:18:52.641 --> 00:18:54.890
you bubble that up to the
user, whether you do at all.

00:18:54.890 --> 00:18:56.770
Sometimes you can
just throw away data.

00:18:56.770 --> 00:18:58.830
Sometimes you don't
want to throw away

00:18:58.830 --> 00:19:00.560
people's love letters.

00:19:00.560 --> 00:19:03.390
So it depends on the app,
but the frameworks all

00:19:03.390 --> 00:19:06.040
allow a way of knowing
what went wrong,

00:19:06.040 --> 00:19:10.240
and how often it went wrong.

00:19:10.240 --> 00:19:11.160
HIREN PATEL: Cool.

00:19:11.160 --> 00:19:14.300
So for the next one,
can sync frameworks

00:19:14.300 --> 00:19:17.980
work with hybrid apps, given the
rise of hybrid apps these days?

00:19:20.920 --> 00:19:23.240
ALEX KOLLER: Well, if
a hybrid app is just

00:19:23.240 --> 00:19:26.640
a web app running in a
web view, theoretically,

00:19:26.640 --> 00:19:32.000
with something like Firebase,
you could use the web SDK

00:19:32.000 --> 00:19:33.860
and get similar
results to native.

00:19:33.860 --> 00:19:37.580
But I doubt the reality
is quite that simple.

00:19:37.580 --> 00:19:39.710
Every time I've been
involved in a hybrid app,

00:19:39.710 --> 00:19:42.222
it has never been simple.

00:19:42.222 --> 00:19:44.680
DALE HUMBY: You're not a great
fan of hybrid apps, are you?

00:19:44.680 --> 00:19:46.208
ALEX KOLLER: How can you tell?

00:19:46.208 --> 00:19:47.060
[LAUGHTER]

00:19:47.060 --> 00:19:52.390
DALE HUMBY: How about using
the HTML5 or cloud storage?

00:19:52.390 --> 00:19:55.320
ALEX KOLLER: Yeah, that's
actually a good example.

00:19:55.320 --> 00:19:57.570
I read something just
the other night about

00:19:57.570 --> 00:20:00.610
how, I think it was
Google, years ago,

00:20:00.610 --> 00:20:04.480
they started downloading massive
CSS and JavaScript files,

00:20:04.480 --> 00:20:06.280
chopping them up into
strings, and then

00:20:06.280 --> 00:20:08.690
storing those strings
in local storage.

00:20:08.690 --> 00:20:09.440
DALE HUMBY: Right.

00:20:09.440 --> 00:20:11.790
ALEX KOLLER: So if it didn't
have the CSS and JavaScript

00:20:11.790 --> 00:20:13.950
required for the page, it
would just go and request

00:20:13.950 --> 00:20:16.100
the pieces it needs.

00:20:16.100 --> 00:20:17.690
So now there are
imaginative ways

00:20:17.690 --> 00:20:20.355
you can use HTML technologies.

00:20:23.810 --> 00:20:24.560
HIREN PATEL: Cool.

00:20:24.560 --> 00:20:35.870
So what is the difference
between [AUDIO OUT]

00:20:35.870 --> 00:20:37.780
Any comments around that?

00:20:37.780 --> 00:20:39.480
DALE HUMBY: Sure.

00:20:39.480 --> 00:20:45.060
Most of my knowledge is on 2G
networks, so the GPRS and EDGE,

00:20:45.060 --> 00:20:51.790
and that's from the early
1000s, and uses TDMA.

00:20:51.790 --> 00:20:55.700
And it's pretty reliable and
available almost everywhere.

00:20:55.700 --> 00:20:59.860
A lot of the networks are sort
of building out 3G and then

00:20:59.860 --> 00:21:01.220
HSDPA.

00:21:01.220 --> 00:21:05.100
Mobile users are a whole
completely different protocol

00:21:05.100 --> 00:21:09.370
for transporting
and receiving data.

00:21:09.370 --> 00:21:11.260
It's, as far as I
know, it's CDMA,

00:21:11.260 --> 00:21:14.890
so it's just a different stack,
entirely different frequencies.

00:21:14.890 --> 00:21:18.440
And a lot of the new
networks are now using LTE.

00:21:18.440 --> 00:21:21.480
And the newest
ones in Africa have

00:21:21.480 --> 00:21:23.860
found that they skipped
right over 3G entirely,

00:21:23.860 --> 00:21:25.360
and they're just
installing LTE now.

00:21:25.360 --> 00:21:29.290
So they might have--
GPRS might have.

00:21:29.290 --> 00:21:33.720
EDGE, certainly they'll have
3G and then now installing LTE.

00:21:33.720 --> 00:21:35.345
And the guys that
don't install LTE now

00:21:35.345 --> 00:21:37.232
might skip over to
whatever's next.

00:21:37.232 --> 00:21:39.190
ALEX KOLLER: Well, that's
great news, actually,

00:21:39.190 --> 00:21:43.030
because I've read and
experienced that 2G

00:21:43.030 --> 00:21:45.130
is a painful experience.

00:21:45.130 --> 00:21:47.520
But 3G was a great
advancement on that,

00:21:47.520 --> 00:21:50.320
but there were also problems,
especially initializing

00:21:50.320 --> 00:21:52.290
the radio on mobile devices.

00:21:52.290 --> 00:21:55.630
It can get up to a 2 1/2
second delay from when you make

00:21:55.630 --> 00:21:59.350
the request to when it
actually leaves your device.

00:21:59.350 --> 00:22:03.390
And LTE, and HSDPA made
massive improvements

00:22:03.390 --> 00:22:06.300
on this, where those times are
down to under 100 milliseconds.

00:22:08.930 --> 00:22:11.970
So the future is looking fast.

00:22:11.970 --> 00:22:14.230
HIREN PATEL: Nice.

00:22:14.230 --> 00:22:17.860
So do we have any other
questions in the panel?

00:22:17.860 --> 00:22:20.100
It doesn't look like it.

00:22:20.100 --> 00:22:22.410
You could always,
after the event,

00:22:22.410 --> 00:22:24.660
we are an open community,
so just post your questions.

00:22:24.660 --> 00:22:27.070
Yes, so if haven't
joined the community.

00:22:27.070 --> 00:22:29.340
So if you have
questions about anything

00:22:29.340 --> 00:22:31.714
we've spoken about,
please post the date

00:22:31.714 --> 00:22:34.942
and we'll be happy to
answer it at a later point.

00:22:34.942 --> 00:22:37.121
I'll hand it back
over to Johanndu.

00:22:37.121 --> 00:22:39.620
JOHANNDU TOIT: All right, so
first, thank you Dale and Alex.

00:22:39.620 --> 00:22:42.030
Awesome talk.

00:22:42.030 --> 00:22:43.770
This is the section
where we would

00:22:43.770 --> 00:22:47.050
like to have you, the
community, come and show us

00:22:47.050 --> 00:22:49.380
what you're doing, any
problems you're experiencing,

00:22:49.380 --> 00:22:53.020
and just spotlight what the
rest of Africa is doing.

00:22:53.020 --> 00:22:56.876
So we decided to keep it blank,
and rather than do a call out,

00:22:56.876 --> 00:23:00.590
after the show, we're going
to put out a post with a link,

00:23:00.590 --> 00:23:02.660
and just follow the link,
and fill in the form,

00:23:02.660 --> 00:23:04.077
and we'll be in contact.

00:23:04.077 --> 00:23:05.660
Especially with the
[INAUDIBLE] shows,

00:23:05.660 --> 00:23:07.510
we're looking for
something that fits,

00:23:07.510 --> 00:23:09.176
and just something
that's generally cool

00:23:09.176 --> 00:23:12.680
and shows how innovative
we are in Africa.

00:23:12.680 --> 00:23:18.090
And so next up, it's Alex
and Hiren attended ScaleConf.

00:23:18.090 --> 00:23:19.465
I don't know if
you guys know it.

00:23:19.465 --> 00:23:21.820
It's a conference
down in Cape Town.

00:23:21.820 --> 00:23:24.520
They're going to tell you more.

00:23:24.520 --> 00:23:27.190
ALEX KOLLER: Yeah.

00:23:27.190 --> 00:23:31.306
Hiren and I recently attended
ScaleConf in Cape Town.

00:23:31.306 --> 00:23:33.120
It's probably the
conference with the best

00:23:33.120 --> 00:23:35.320
venue in the world.

00:23:35.320 --> 00:23:38.040
It's right here in
Kirstenbosch Botanical Gardens.

00:23:38.040 --> 00:23:40.440
And we gave a talk on
scaling Android apps

00:23:40.440 --> 00:23:43.480
with Google Cloud
Messaging and App Engine.

00:23:43.480 --> 00:23:45.300
The talk itself is fascinating.

00:23:45.300 --> 00:23:47.610
The video will be
available soon.

00:23:47.610 --> 00:23:49.750
But I wanted to talk
more about ScaleConf

00:23:49.750 --> 00:23:51.120
and what makes it great.

00:23:51.120 --> 00:23:55.240
And I think because it's
really well organized,

00:23:55.240 --> 00:23:59.450
has an interesting
content in the tech

00:23:59.450 --> 00:24:01.645
talks, and also
the format of it,

00:24:01.645 --> 00:24:04.520
a single track format with
breaks between every talk.

00:24:04.520 --> 00:24:06.200
It worked really well.

00:24:06.200 --> 00:24:10.460
Everyone was always attentive
and enjoying the talks.

00:24:10.460 --> 00:24:11.980
So we'd love to see
more conferences

00:24:11.980 --> 00:24:13.340
like this in Africa.

00:24:13.340 --> 00:24:16.600
So please let us know about
any conferences or events

00:24:16.600 --> 00:24:21.850
that you've really enjoyed so
we can share a bit about them.

00:24:21.850 --> 00:24:23.530
HIREN PATEL: On the
topic of events,

00:24:23.530 --> 00:24:27.730
we have a events category
in the G+ community.

00:24:27.730 --> 00:24:32.100
We encourage everyone to go
in the events over there,

00:24:32.100 --> 00:24:34.030
events run by your local GDG.

00:24:34.030 --> 00:24:38.180
If you are a GDG organizer,
please reshare your events

00:24:38.180 --> 00:24:40.740
under the Events section
of the community for us

00:24:40.740 --> 00:24:42.560
to see as well.

00:24:42.560 --> 00:24:45.210
On that note, I'd like to
make mention of two upcoming

00:24:45.210 --> 00:24:47.410
important events.

00:24:47.410 --> 00:24:50.600
The first one is the
Google I/O. So this

00:24:50.600 --> 00:24:55.390
is Google's annual major
developer conference.

00:24:55.390 --> 00:24:57.130
They live stream this as well.

00:24:57.130 --> 00:24:59.490
And folks around the
world, including GDGs,

00:24:59.490 --> 00:25:02.680
will get together for
extended viewing parties

00:25:02.680 --> 00:25:05.570
and watch the live
stream together.

00:25:05.570 --> 00:25:09.370
So do look out for an
extended party near you,

00:25:09.370 --> 00:25:11.730
or even start one if
you don't have one.

00:25:11.730 --> 00:25:14.230
And share it with us in the
community events [INAUDIBLE]

00:25:14.230 --> 00:25:15.550
as well.

00:25:15.550 --> 00:25:17.830
The other one is
the UX Masterclass.

00:25:17.830 --> 00:25:21.610
This is the Google-run
workshop-like event.

00:25:21.610 --> 00:25:23.330
It happened for the
first time last year.

00:25:23.330 --> 00:25:26.040
And it's all around user
experience and user interfaces.

00:25:26.040 --> 00:25:28.890
If this interests
you, this is happening

00:25:28.890 --> 00:25:32.870
at the beginning of May in
Nairobi, Cape Town, and Lagos.

00:25:32.870 --> 00:25:34.660
So look out for that as well.

00:25:34.660 --> 00:25:38.240
They are posted to the events
section of the community

00:25:38.240 --> 00:25:38.740
as well.

00:25:42.090 --> 00:25:45.850
So back to Johanndu about
the future of the show.

00:25:45.850 --> 00:25:48.010
JOHANNDU TOIT: So let
me just take us out.

00:25:48.010 --> 00:25:50.979
First off, thank you for coming
to watch the first episode.

00:25:50.979 --> 00:25:52.520
We're still trying
to find this show,

00:25:52.520 --> 00:25:56.900
but this was a structure show,
so please give us feedback.

00:25:56.900 --> 00:25:58.400
We're going to be
posting in a link.

00:25:58.400 --> 00:26:01.310
So just tell us what you
liked, what you didn't like,

00:26:01.310 --> 00:26:02.565
and [INAUDIBLE] towards.

00:26:02.565 --> 00:26:03.516
.

00:26:03.516 --> 00:26:04.140
That's implied.

00:26:04.140 --> 00:26:06.910
Also, very important,
the guest speakers,

00:26:06.910 --> 00:26:08.190
we'd love to feature you.

00:26:08.190 --> 00:26:12.350
So thank you for attending
and hope to see you next time.

