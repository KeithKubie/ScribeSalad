WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:04.540
In a perfect world, my password would be a
long, unique code and have absolutely nothing

00:00:04.540 --> 00:00:12.850
to do with my pets, birthdays, partners, hometowns,
sports teams or whatever… but that's hard.

00:00:12.850 --> 00:00:17.179
Hey there says-a-me's thanks for being open
to DNews.

00:00:17.179 --> 00:00:18.279
I'm Trace.

00:00:18.279 --> 00:00:23.619
Having a slew of stupid passwords for all
the websites we interact with or, *ahem* one

00:00:23.619 --> 00:00:25.749
password for everything like some people…

00:00:25.749 --> 00:00:27.669
Is just so taxing.

00:00:27.669 --> 00:00:28.669
Passwords suck.

00:00:28.669 --> 00:00:29.669
They suck bad.

00:00:29.669 --> 00:00:33.760
But without security, there's no online shopping,
true identity protection, or mobile banking…

00:00:33.760 --> 00:00:37.300
basically, the way the web works now, you
need passwords to be a fully functioning member

00:00:37.300 --> 00:00:38.340
of internet society.

00:00:38.340 --> 00:00:40.660
But how the heck do they work?

00:00:40.660 --> 00:00:43.770
Firstly, passwords aren't exactly in a safe
in the basement of your bank.

00:00:43.770 --> 00:00:48.670
They're saved in a password database stored
on a company's server or in the "cloud" (which

00:00:48.670 --> 00:00:51.510
is really just another company's server, usually
one of Amazon's).

00:00:51.510 --> 00:00:53.730
These things can (and are) hacked.

00:00:53.730 --> 00:00:56.030
So, companies have to encrypt your password!

00:00:56.030 --> 00:01:00.370
This involves math and some tricks to keep
the hackers busy, slow them down, or just

00:01:00.370 --> 00:01:02.280
mess with hacking software.

00:01:02.280 --> 00:01:06.960
When you create or change a password: let's
say "Password123" // please do not tell me

00:01:06.960 --> 00:01:12.400
that is your damn password // The first thing
a smart company will do is "hash" it.

00:01:12.400 --> 00:01:13.560
Hashing is a real term.

00:01:13.560 --> 00:01:17.920
It means applying a one-way mathematical formula
to the password text.

00:01:17.920 --> 00:01:22.640
Hashing changes passwords of any length into
a standard set of seemingly-random characters.

00:01:22.640 --> 00:01:29.310
One hash standard, MD5, was created in 1992
by an MIT computer scientist and uses a 128-bit

00:01:29.310 --> 00:01:30.310
encoding.

00:01:30.310 --> 00:01:33.249
It's not important to understand, just know
that it happens.

00:01:33.249 --> 00:01:36.750
Hashing keeps just anyone from being able
to read passwords.

00:01:36.750 --> 00:01:41.240
No one wants a shady employee literally reading
everyone's private information, so instead

00:01:41.240 --> 00:01:47.590
MD5 turns "Password123" into this, and Password1234
into this.

00:01:47.590 --> 00:01:50.310
See how these are completely different?

00:01:50.310 --> 00:01:53.329
Hashing is sometimes referred to as a password
"fingerprint."

00:01:53.329 --> 00:01:55.930
At that point, the hash literally becomes
your password!

00:01:55.930 --> 00:01:58.749
It's saved in a database, waiting for you
to log in next time.

00:01:58.749 --> 00:02:02.639
When you (or a hacker) wants to access the
account: you type your password, the site

00:02:02.639 --> 00:02:06.249
hashes it, and then compares the new hash
to the one on the server.

00:02:06.249 --> 00:02:07.880
If they match, you're in!

00:02:07.880 --> 00:02:14.050
The thing is, MD5 is pretty old standard now,
so newer algorithms create more secure salted

00:02:14.050 --> 00:02:16.610
hashes -- again, official terms!

00:02:16.610 --> 00:02:21.860
Salted hashes add complexity by generating
chunks of data and plopping it into the hash.

00:02:21.860 --> 00:02:27.710
One encryption of 'Password123' with the salted
hash algorithm bcrypt looks like this.

00:02:27.710 --> 00:02:33.040
It adds dollar-sign, two, 'a', dollar-sign
to the beginning -- that's simple salt!

00:02:33.040 --> 00:02:36.890
Computers aren't great at problem solving,
so even this little change can fumble automated

00:02:36.890 --> 00:02:41.900
hacking programs; especially if the algorithm
puts the salt in a different place for different

00:02:41.900 --> 00:02:42.900
users!

00:02:42.900 --> 00:02:47.420
Then, even if I hack Bob, I can't use the
same salted hash formula to hack Jane.

00:02:47.420 --> 00:02:50.440
Plus, it makes everything take longer for
hackers.

00:02:50.440 --> 00:02:52.880
And taking longer is often the name of the
game.

00:02:52.880 --> 00:02:54.790
Computer security is like a house of doors.

00:02:54.790 --> 00:02:58.940
The more steps and layers of security companies
can add between the outside and the information

00:02:58.940 --> 00:03:01.890
on your account, the more secure the data
will be!

00:03:01.890 --> 00:03:03.970
More complexity means more time.

00:03:03.970 --> 00:03:08.560
To add complexity, companies could do something
called "slow hashing" or "key stretching"

00:03:08.560 --> 00:03:13.980
which literally slows down the hash calculations
by using super inefficient mathematical formulas!

00:03:13.980 --> 00:03:15.400
I’m not kidding.

00:03:15.400 --> 00:03:20.900
If I'm trying 350 billion different passwords
and each takes a half-a-second (so slow!):

00:03:20.900 --> 00:03:24.140
that's over 5500 years!

00:03:24.140 --> 00:03:28.850
It seems dumb to be inefficient, but in computer
security, sometimes, it can be smart.

00:03:28.850 --> 00:03:30.510
They can also spread the security around!

00:03:30.510 --> 00:03:34.660
"Tokens," are bits of data stored somewhere
else on the company's server or even in a

00:03:34.660 --> 00:03:35.910
whole other server.

00:03:35.910 --> 00:03:39.220
Those are like the images your bank asks you
to check before you log in.

00:03:39.220 --> 00:03:43.680
If the token image of a cute dog doesn't match
the roller-coaster you picked when you first

00:03:43.680 --> 00:03:45.760
created the account: HACK ALERT!

00:03:45.760 --> 00:03:49.600
Right now, the most secure password option
is "two-factor authentication."

00:03:49.600 --> 00:03:53.380
The correct password needs to be paired with
input from you.

00:03:53.380 --> 00:03:56.390
Sometimes this is a code they can text to
your phone (which would require the hacker

00:03:56.390 --> 00:04:00.170
to intercept the message or get your actual
phone), or you can get the code from an app

00:04:00.170 --> 00:04:03.190
like Facebook's Code Generator or Google's
Authenticator.

00:04:03.190 --> 00:04:06.340
They make new codes every 30 seconds to frustrate
hackers further.

00:04:06.340 --> 00:04:11.310
As more of the world comes online, we're going
to have to fix passwords, because even with

00:04:11.310 --> 00:04:13.880
all this -- anything can be hacked.

00:04:13.880 --> 00:04:17.910
Because people often use the same (or really
similar) passwords for a lot of different

00:04:17.910 --> 00:04:22.889
websites, getting access to even one can compromise
all a user's accounts.

00:04:22.889 --> 00:04:24.930
Webmasters take this stuff seriously.

00:04:24.930 --> 00:04:29.410
They want you to feel safe sending your credit
card number over the open internet, but like

00:04:29.410 --> 00:04:34.540
any heist movie, there are always ways to
grab information, if you can find them…

00:04:34.540 --> 00:04:38.000
For more on how to make the best passwords
and how hackers can hold up the armored car

00:04:38.000 --> 00:04:40.340
containing your password and hack into your
account.

00:04:40.340 --> 00:04:43.530
Watch the second part of this video in one
week.

00:04:43.530 --> 00:04:43.970
Thanks for tuning in to DNews.

