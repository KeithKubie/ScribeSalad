WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.868
[MUSIC PLAYING]

00:00:07.106 --> 00:00:08.730
DAN GALPIN: Level up
with data binding.

00:00:08.730 --> 00:00:12.377
All right, so when data binding
was introduced back in 2015--

00:00:12.377 --> 00:00:14.710
and I can't read anything so
I'll just do it from here--

00:00:14.710 --> 00:00:17.160
my reaction was pretty
much, what have we done?

00:00:17.160 --> 00:00:19.860
Like expressions inside of XML
values-- this is kind of nuts.

00:00:19.860 --> 00:00:22.470
But, as it turns out, data
binding is pretty cool.

00:00:22.470 --> 00:00:24.720
And I just needed to
level up my understanding.

00:00:24.720 --> 00:00:25.950
And the one thing I
love about data binding

00:00:25.950 --> 00:00:27.700
is you can actually choose how
much of it you wanted to use.

00:00:27.700 --> 00:00:30.600
So at the beginner level, you
get some immediate benefits,

00:00:30.600 --> 00:00:32.220
like avoiding FindViewById.

00:00:32.220 --> 00:00:33.090
But that's a start.

00:00:33.090 --> 00:00:34.766
At the intermediate
level, you actually

00:00:34.766 --> 00:00:36.390
get things like custom
binding adapters

00:00:36.390 --> 00:00:38.306
and observability, while,
at the expert level,

00:00:38.306 --> 00:00:40.360
we actually have
two-way data binding.

00:00:40.360 --> 00:00:42.360
And this also allows you
to apply observability,

00:00:42.360 --> 00:00:45.910
not only from data to UI,
but also from UI to data.

00:00:45.910 --> 00:00:49.201
So, first of all, let's
get rid of FindViewById.

00:00:49.201 --> 00:00:51.005
[CHEERS]

00:00:51.005 --> 00:00:51.910
Exactly.

00:00:51.910 --> 00:00:53.715
So first we need to
enable data binding.

00:00:53.715 --> 00:00:55.590
Now all you have to do
to do this is actually

00:00:55.590 --> 00:00:58.290
set data binding enabled equals
true in your Gradle file.

00:00:58.290 --> 00:01:00.123
And then you need to
put these little layout

00:01:00.123 --> 00:01:01.510
wrappers around your file.

00:01:01.510 --> 00:01:03.426
And you can actually do
that in Android Studio

00:01:03.426 --> 00:01:06.780
automatically now by pulling
down from the little light bulb

00:01:06.780 --> 00:01:09.390
icon and saying convert to
data binding layout, which

00:01:09.390 --> 00:01:10.450
is pretty cool.

00:01:10.450 --> 00:01:12.180
Now the binding is
actually this object

00:01:12.180 --> 00:01:14.560
you get from inflating the
layout with data binding util.

00:01:14.560 --> 00:01:16.500
And you simply set your
attributes and listeners

00:01:16.500 --> 00:01:17.830
like this, which is pretty cool.

00:01:17.830 --> 00:01:18.890
But, honestly,
you're never going

00:01:18.890 --> 00:01:20.348
to use this because
you're actually

00:01:20.348 --> 00:01:22.960
going to want to use
real data binding.

00:01:22.960 --> 00:01:25.660
So let's talk about
binding expressions.

00:01:25.660 --> 00:01:27.360
And, in order to do
this, we actually

00:01:27.360 --> 00:01:29.880
have to make data
available to our layout

00:01:29.880 --> 00:01:33.540
by declaring variables in this
data section of our layout.

00:01:33.540 --> 00:01:38.280
And then we can use expressions
in layout XML attributes

00:01:38.280 --> 00:01:40.770
to actually tie
that data to views.

00:01:40.770 --> 00:01:43.530
Now expressions are actually
wrapped in curly braces

00:01:43.530 --> 00:01:45.370
and prefixed by an @ sign.

00:01:45.370 --> 00:01:47.760
So here are some examples
of data binding expressions.

00:01:47.760 --> 00:01:50.250
Again, this first one we're
assigning a text property

00:01:50.250 --> 00:01:51.660
to a view model property.

00:01:51.660 --> 00:01:54.372
In the second one, we're using a
custom attribute-- height of 0.

00:01:54.372 --> 00:01:55.830
And in the third
one we're actually

00:01:55.830 --> 00:01:59.370
using a lambda, which
gets past the text view

00:01:59.370 --> 00:02:00.247
and calls on like.

00:02:00.247 --> 00:02:01.830
And in this fourth
one, we're actually

00:02:01.830 --> 00:02:05.010
using a lambda, which calls
on like with a text property

00:02:05.010 --> 00:02:06.480
of another view in our layout.

00:02:06.480 --> 00:02:07.710
So you can actually
reference other views

00:02:07.710 --> 00:02:09.550
and pass them in,
which is pretty cool.

00:02:09.550 --> 00:02:12.030
Now, to give data binding
access to the ViewModel engines,

00:02:12.030 --> 00:02:14.340
we just set the binding
object like this

00:02:14.340 --> 00:02:15.600
after inflating the layout.

00:02:15.600 --> 00:02:17.620
So pretty straightforward.

00:02:17.620 --> 00:02:21.510
And then our view model is
now available to that layout.

00:02:21.510 --> 00:02:24.074
But the real question is,
how does this all work?

00:02:24.074 --> 00:02:25.740
And the answer, of
course, is that there

00:02:25.740 --> 00:02:28.440
is no magic in data binding.

00:02:28.440 --> 00:02:30.000
But it does seem like magic.

00:02:30.000 --> 00:02:32.610
And that's because we have
built-in binding adapters that

00:02:32.610 --> 00:02:33.941
handle almost everything.

00:02:33.941 --> 00:02:35.940
So with data binding every
call to the framework

00:02:35.940 --> 00:02:37.722
is actually made in
a binding adapter.

00:02:37.722 --> 00:02:38.430
There's no magic.

00:02:38.430 --> 00:02:40.140
You can actually see the
coding, use a debugger

00:02:40.140 --> 00:02:41.160
to navigate through it.

00:02:41.160 --> 00:02:42.743
The first lines of
the method are just

00:02:42.743 --> 00:02:45.300
checking for changes to only
update the UI if necessary.

00:02:45.300 --> 00:02:48.222
And that last line is actually
the set text we're looking for.

00:02:48.222 --> 00:02:50.430
And there's lots of adapter
provided by data binding.

00:02:50.430 --> 00:02:52.680
And they make it behave
intelligently and consistently

00:02:52.680 --> 00:02:53.886
across all these views.

00:02:53.886 --> 00:02:55.260
Now looking at
these source files

00:02:55.260 --> 00:02:57.109
will help to build
your own custom

00:02:57.109 --> 00:02:58.650
binding adapters,
which is really how

00:02:58.650 --> 00:03:00.090
things start to get exciting.

00:03:00.090 --> 00:03:02.370
So let's talk about
binding adapters 101.

00:03:02.370 --> 00:03:04.500
The adapters annotated
with @BindingAdapter

00:03:04.500 --> 00:03:06.840
and takes one or
more attribute names.

00:03:06.840 --> 00:03:09.166
The adapter method takes a
view as the first parameter

00:03:09.166 --> 00:03:11.040
and you use a subclass
of view to restrict it

00:03:11.040 --> 00:03:12.234
to a specific view type.

00:03:12.234 --> 00:03:13.650
Any additional
parameters are then

00:03:13.650 --> 00:03:16.980
matched with the data side
of the binding expressions.

00:03:16.980 --> 00:03:20.190
Adapters can differ
just by data types.

00:03:20.190 --> 00:03:22.350
You can also use adapters
to override the behavior

00:03:22.350 --> 00:03:24.160
for built-in attributes.

00:03:24.160 --> 00:03:25.800
Now this makes
all image use load

00:03:25.800 --> 00:03:27.990
using glide with their
source parameters set.

00:03:27.990 --> 00:03:28.950
But you've got to
careful with this

00:03:28.950 --> 00:03:30.200
because this is module global.

00:03:30.200 --> 00:03:32.220
So you might have some
really cool side effects

00:03:32.220 --> 00:03:33.725
of this you might not expect.

00:03:33.725 --> 00:03:35.100
We also could do
a bunch of stuff

00:03:35.100 --> 00:03:36.690
with advanced binding adapters.

00:03:36.690 --> 00:03:38.750
So sometimes that old
value is really important,

00:03:38.750 --> 00:03:40.459
such as with a color
change listener.

00:03:40.459 --> 00:03:42.000
So if you use the
same parameter type

00:03:42.000 --> 00:03:44.520
for two parameters in a row,
the binding compiler actually

00:03:44.520 --> 00:03:46.200
passed the old value
into the first one

00:03:46.200 --> 00:03:48.260
followed by the updated one.

00:03:48.260 --> 00:03:51.060
And also you can use multiple
attributes, which is pretty

00:03:51.060 --> 00:03:52.440
cool, like in this image view.

00:03:52.440 --> 00:03:55.230
So you can actually define
these multiple attributes here

00:03:55.230 --> 00:03:56.830
when you declare
the binding adapter.

00:03:56.830 --> 00:04:00.024
And then those are both
available to your code,

00:04:00.024 --> 00:04:01.440
actually, as you're
looking at it.

00:04:01.440 --> 00:04:04.050
Now observability
is also pretty cool.

00:04:04.050 --> 00:04:07.500
And we can actually use
LiveData to automatically do

00:04:07.500 --> 00:04:09.180
observation.

00:04:09.180 --> 00:04:10.240
So this is pretty cool.

00:04:10.240 --> 00:04:12.240
We're actually only exposing
an immutable class here,

00:04:12.240 --> 00:04:13.110
with an example of this.

00:04:13.110 --> 00:04:15.485
And the backing field can
either be a mutable or mediator

00:04:15.485 --> 00:04:16.038
LiveData.

00:04:16.038 --> 00:04:17.579
And then you just
expose the LiveData

00:04:17.579 --> 00:04:20.435
using Kotlin getters attacks.

00:04:20.435 --> 00:04:22.560
And then you need to do
one more additional change.

00:04:22.560 --> 00:04:24.210
You actually need to
set the lifecycle owner.

00:04:24.210 --> 00:04:26.293
So you can observe the
LiveData in your view model

00:04:26.293 --> 00:04:28.470
with the correct scope.

00:04:28.470 --> 00:04:28.980
All right.

00:04:28.980 --> 00:04:30.450
Finally, two-way data binding.

00:04:30.450 --> 00:04:32.190
And, honestly, this
is really trivial

00:04:32.190 --> 00:04:34.420
when you're actually
using LiveData.

00:04:34.420 --> 00:04:37.050
Now you could, of course, use
one-way data binding two ways,

00:04:37.050 --> 00:04:39.510
as in this example of checkbox.

00:04:39.510 --> 00:04:42.570
But you could actually call
this with two-way data binding

00:04:42.570 --> 00:04:44.127
by using @=.

00:04:44.127 --> 00:04:46.710
And the best part of this is we
can actually observe LiveData.

00:04:46.710 --> 00:04:49.350
So, in this case, it's fine
to expose immutable LiveData,

00:04:49.350 --> 00:04:51.310
since it's going to be
modified by our view.

00:04:51.310 --> 00:04:54.450
And then we set the lifecycle
owner and we use the @=

00:04:54.450 --> 00:04:55.920
notation for the checkbox.

00:04:55.920 --> 00:04:57.780
And that's it--
two-way data binding.

00:04:57.780 --> 00:04:59.610
Maybe that's not so
expert after all.

00:04:59.610 --> 00:05:01.110
So to learn more,
check out the data

00:05:01.110 --> 00:05:02.730
binding code lab and
the documentation

00:05:02.730 --> 00:05:04.830
on developer.Android.com.

00:05:04.830 --> 00:05:07.880
[MUSIC PLAYING]

