WEBVTT
Kind: captions
Language: en

00:00:02.500 --> 00:00:05.350
Battery's the most precious
resource to Android users

00:00:05.350 --> 00:00:05.930
right now.

00:00:05.930 --> 00:00:07.880
The world is more mobile,
but it's frustrating

00:00:07.880 --> 00:00:08.980
when you can't make
it through the day

00:00:08.980 --> 00:00:11.100
without needing a
recharge of your phone.

00:00:11.100 --> 00:00:13.530
And sadly for most
developers, battery efficiency

00:00:13.530 --> 00:00:14.905
is the last thing
on their minds.

00:00:14.905 --> 00:00:16.738
My name is Colt McAnlis
canvas and the truth

00:00:16.738 --> 00:00:18.880
is that your app doesn't
have to be a battery hog.

00:00:18.880 --> 00:00:21.130
With a few simple
APIs and tools you

00:00:21.130 --> 00:00:24.160
can have a fast, awesome
application that users love.

00:00:24.160 --> 00:00:26.300
But let's take a step
back for a second.

00:00:26.300 --> 00:00:28.720
How bad is the state of
battery usage right now?

00:00:28.720 --> 00:00:31.600
Well, Purdue University did a
study of the top apps and games

00:00:31.600 --> 00:00:34.140
for mobile devices, in which
they measured the battery

00:00:34.140 --> 00:00:36.440
draw of various
types of actions.

00:00:36.440 --> 00:00:38.580
They made a shocking discovery.

00:00:38.580 --> 00:00:40.980
On average, only
about 25% to 30%

00:00:40.980 --> 00:00:42.900
of the battery used
by these applications

00:00:42.900 --> 00:00:45.600
was dedicated to the core
functions of the app,

00:00:45.600 --> 00:00:49.350
like drawing images, laying
out news, or throwing birds

00:00:49.350 --> 00:00:51.140
across the screen.

00:00:51.140 --> 00:00:53.610
The other 75%--
completely eaten up

00:00:53.610 --> 00:00:55.700
by uploading analytics,
checking location,

00:00:55.700 --> 00:00:59.337
and constantly polling the
server for ads to display.

00:00:59.337 --> 00:01:01.170
This finding presents
an interesting problem

00:01:01.170 --> 00:01:01.770
for developers.

00:01:01.770 --> 00:01:03.395
See, these applications
are effectively

00:01:03.395 --> 00:01:07.010
eating up their users'
battery for their benefit

00:01:07.010 --> 00:01:09.789
while only providing marginal
features to the users, which

00:01:09.789 --> 00:01:11.330
is tricky since at
the end of the day

00:01:11.330 --> 00:01:13.070
the user's happiness
is directly linked

00:01:13.070 --> 00:01:15.190
to the success of
the application.

00:01:15.190 --> 00:01:17.140
Smart developers
will focus on finding

00:01:17.140 --> 00:01:18.790
a balance between
these two extremes

00:01:18.790 --> 00:01:21.440
by recognizing that they
can perform the same actions

00:01:21.440 --> 00:01:24.130
and draw less battery
at the same time.

00:01:24.130 --> 00:01:26.080
For example, waking up
the device from sleep

00:01:26.080 --> 00:01:28.080
has a battery cost
associated with it.

00:01:28.080 --> 00:01:29.580
So conservative
use of wake locks,

00:01:29.580 --> 00:01:31.940
or rather smarter
use of wake locks,

00:01:31.940 --> 00:01:34.140
can help reduce battery drain.

00:01:34.140 --> 00:01:37.670
Likewise, some operations
don't have to happen right now.

00:01:37.670 --> 00:01:40.290
For example, uploading
songs, recalculating storage,

00:01:40.290 --> 00:01:42.370
or resizing your photos
should probably not

00:01:42.370 --> 00:01:44.869
be done while the user is out
in the middle of their holiday

00:01:44.869 --> 00:01:46.280
shopping, right?

00:01:46.280 --> 00:01:48.570
And network requests are
another big drain on battery.

00:01:48.570 --> 00:01:51.260
See, each time you turn on
your phone's mobile radio

00:01:51.260 --> 00:01:54.030
it has to keep itself awake
for a few seconds in case

00:01:54.030 --> 00:01:55.740
a response packet comes in.

00:01:55.740 --> 00:01:58.990
Of course, needing to draw extra
battery just to stay awake.

00:01:58.990 --> 00:02:00.850
So if you're polling
an ad server every five

00:02:00.850 --> 00:02:03.080
seconds or so, you're going
to be incurring the cost

00:02:03.080 --> 00:02:05.470
over and over and over again.

00:02:05.470 --> 00:02:08.550
Thankfully Android has several
tools to help you track down

00:02:08.550 --> 00:02:10.410
and fix these battery issues.

00:02:10.410 --> 00:02:13.580
Firstly, you can get by battery
data stats on the device

00:02:13.580 --> 00:02:15.374
by going to Settings,
and then Battery,

00:02:15.374 --> 00:02:17.040
and then choosing the
application you're

00:02:17.040 --> 00:02:18.020
interested in.

00:02:18.020 --> 00:02:20.360
You'll notice that the data
reporting on this screen

00:02:20.360 --> 00:02:22.370
is mostly about how long
your device is awake,

00:02:22.370 --> 00:02:24.440
and its networking connectivity.

00:02:24.440 --> 00:02:27.340
And to dig deeper you can use
the battery historian tool

00:02:27.340 --> 00:02:29.400
to get a graphical
view of how your app is

00:02:29.400 --> 00:02:30.800
using the battery over time.

00:02:30.800 --> 00:02:32.490
And once you've found
your app's issues,

00:02:32.490 --> 00:02:35.320
Android has several APIs
that can help you fix them.

00:02:35.320 --> 00:02:38.560
For example, using
the jobscheduler API

00:02:38.560 --> 00:02:41.620
allows your application to
defer various types of work

00:02:41.620 --> 00:02:43.680
to a time when the
battery is better

00:02:43.680 --> 00:02:45.890
to be used, like
when it's plugged in,

00:02:45.890 --> 00:02:47.430
or when it's connected
to the Wi-Fi,

00:02:47.430 --> 00:02:50.769
or the next time it wakes
up the device intentionally.

00:02:50.769 --> 00:02:52.810
So if you're looking to
optimize your application

00:02:52.810 --> 00:02:54.580
to be lean on battery
check out the rest

00:02:54.580 --> 00:02:57.000
of the Android performance
patterns resources

00:02:57.000 --> 00:02:59.340
to get more info on
saving every last piece

00:02:59.340 --> 00:03:01.640
of this precious
resource for your users.

00:03:01.640 --> 00:03:05.140
So as always, keep calm,
profile your code, and remember,

00:03:05.140 --> 00:03:06.990
perf matters.

