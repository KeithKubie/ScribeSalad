WEBVTT
Kind: captions
Language: en

00:00:00.510 --> 00:00:01.270
SETH LADD: Well I think
we're going to go

00:00:01.270 --> 00:00:02.070
ahead and get started.

00:00:02.070 --> 00:00:03.260
Welcome everybody.

00:00:03.260 --> 00:00:05.610
This is Dartisans,
Episode Four.

00:00:05.610 --> 00:00:08.940
This week we have very special
guests, the Dart Editor team

00:00:08.940 --> 00:00:10.080
and Phil Quitslund.

00:00:10.080 --> 00:00:12.024
Hi Phil how's it going?

00:00:12.024 --> 00:00:12.456
PHIL QUITSLUND: Great.

00:00:12.456 --> 00:00:12.890
Hey, Seth.

00:00:12.890 --> 00:00:14.620
Hey, everyone.

00:00:14.620 --> 00:00:15.740
SETH LADD: Thanks for
joining us today.

00:00:15.740 --> 00:00:18.480
I've been seeing a lot of
releases is from the Dart

00:00:18.480 --> 00:00:21.990
Editor team, and you
guys are cranking.

00:00:21.990 --> 00:00:24.490
I'm sure everyone's going to be
excited to see what you've

00:00:24.490 --> 00:00:28.050
got working in the latest
builds, see the demo we're

00:00:28.050 --> 00:00:30.310
going to go into shortly, and
then hear a little bit about

00:00:30.310 --> 00:00:32.049
where you're going
with the Editor.

00:00:32.049 --> 00:00:33.320
So I really appreciate it.

00:00:33.320 --> 00:00:36.070
And I think we should
get started with

00:00:36.070 --> 00:00:36.970
a really cool demo.

00:00:36.970 --> 00:00:39.380
I know you've got some stuff to
show off so are you ready

00:00:39.380 --> 00:00:41.310
to show us what's latest and
greatest in the Editor there?

00:00:41.310 --> 00:00:43.260
PHIL QUITSLUND: Sure,
yeah, absolutely.

00:00:43.260 --> 00:00:45.200
SETH LADD: Share your
screen away.

00:00:45.200 --> 00:00:47.360
PHIL QUITSLUND: All right.

00:00:47.360 --> 00:00:48.980
SETH LADD: All right,
we're good.

00:00:48.980 --> 00:00:49.450
PHIL QUITSLUND: We're good?

00:00:49.450 --> 00:00:50.740
OK, great.

00:00:50.740 --> 00:00:52.890
So one of the first things
that you'll notice after

00:00:52.890 --> 00:00:56.950
launching the Editor is a
Welcome page, and the Welcome

00:00:56.950 --> 00:01:00.100
page features a host
of samples.

00:01:00.100 --> 00:01:02.800
And those samples are there to
help you get started with Dart

00:01:02.800 --> 00:01:04.840
and get started with
the Editor.

00:01:04.840 --> 00:01:08.360
So that's just as good a jumping
off point as any.

00:01:08.360 --> 00:01:09.820
So let's dive into it.

00:01:09.820 --> 00:01:13.860
My favorite sample is Clock,
so let's jump into that.

00:01:13.860 --> 00:01:17.460
So when you click the Clock
sample on the Welcome page, it

00:01:17.460 --> 00:01:21.890
will bring the Clock application
into the Editor,

00:01:21.890 --> 00:01:23.150
ready for you to play with.

00:01:23.150 --> 00:01:26.910
And you'll notice quickly on
the left hand side, in the

00:01:26.910 --> 00:01:29.890
files view, we have a new folder
and in it, we have a

00:01:29.890 --> 00:01:31.100
bunch of resources.

00:01:31.100 --> 00:01:33.570
One thing that's worth
mentioning, this is sort of a

00:01:33.570 --> 00:01:35.060
new feature for folks
that have been

00:01:35.060 --> 00:01:36.990
using Editor for awhile.

00:01:36.990 --> 00:01:40.350
We just recently added
some new emphasis.

00:01:40.350 --> 00:01:44.460
You'll notice that Clock.dart
is emphasized in bold here.

00:01:44.460 --> 00:01:47.490
And the reason for that is that
Clock.dart is essentially

00:01:47.490 --> 00:01:49.420
the entry point of
this application.

00:01:49.420 --> 00:01:54.000
It's a library and it turns
out that in nontrivial

00:01:54.000 --> 00:01:56.420
applications, just this little
bit of emphasis is really

00:01:56.420 --> 00:01:58.372
useful to help folks navigate.

00:02:01.090 --> 00:02:06.870
So we've opened up the source
but we want to see what this

00:02:06.870 --> 00:02:07.510
thing does.

00:02:07.510 --> 00:02:11.140
So luckily with the Dart Editor,
it's very easy to get

00:02:11.140 --> 00:02:12.100
up and running.

00:02:12.100 --> 00:02:17.650
So to run this application, we
just go over to the Run Tool

00:02:17.650 --> 00:02:21.120
item in the toolbar, or
alternatively we go to the

00:02:21.120 --> 00:02:25.020
Tools menu and select Run.

00:02:25.020 --> 00:02:28.780
And then as quickly as that,
we have a running Dart

00:02:28.780 --> 00:02:29.560
application.

00:02:29.560 --> 00:02:33.060
And what's worth pointing out
about this is that this is

00:02:33.060 --> 00:02:40.410
running, you'll see over here,
we're launching Clock in a

00:02:40.410 --> 00:02:43.130
special build of Chromium, the
Chromium browser, that

00:02:43.130 --> 00:02:44.240
includes the Dart VM.

00:02:44.240 --> 00:02:49.910
So this is actually running in
the Dart VM in Chromium.

00:02:49.910 --> 00:02:52.000
So that's all fine and well.

00:02:52.000 --> 00:02:53.960
To give you some kind of sense
for what it's like to actually

00:02:53.960 --> 00:02:55.620
work with Dart, let's introduce

00:02:55.620 --> 00:02:57.100
sort of a simple edit.

00:02:57.100 --> 00:03:00.500
Now I happen to know a little
bit about this code.

00:03:00.500 --> 00:03:02.770
So I know where I'm going.

00:03:02.770 --> 00:03:05.400
What I'd like to do is I'd like
to change the speed of

00:03:05.400 --> 00:03:06.910
these bouncing balls.

00:03:06.910 --> 00:03:09.850
So to do that, I'm going
to navigate to a

00:03:09.850 --> 00:03:11.580
class called Balls.

00:03:11.580 --> 00:03:14.160
And one quick and easy
way to do that is

00:03:14.160 --> 00:03:15.600
through the search box.

00:03:15.600 --> 00:03:19.420
So if you go to the search box
and start typing, it will

00:03:19.420 --> 00:03:23.140
refine your results to match
what you've typed.

00:03:23.140 --> 00:03:26.020
So I'm going to navigate
to the Balls type.

00:03:26.020 --> 00:03:30.650
And now, once I've opened this
in the Editor, the next thing

00:03:30.650 --> 00:03:32.160
I want to do is I want
to navigate to

00:03:32.160 --> 00:03:33.240
a particular member.

00:03:33.240 --> 00:03:36.240
So what I'm going to do is I'm
going to open the Quick

00:03:36.240 --> 00:03:40.320
Outline view, which is a
kind of handy overlay.

00:03:40.320 --> 00:03:44.290
On the Mac, it's Option-Open,
or with this

00:03:44.290 --> 00:03:47.660
Context menu, click.

00:03:47.660 --> 00:03:49.150
There's the method
I'm looking for.

00:03:49.150 --> 00:03:51.610
It's called tick.

00:03:51.610 --> 00:03:54.090
And what I want to do is I want
to change the way that

00:03:54.090 --> 00:03:56.420
this delta is getting
calculated.

00:03:56.420 --> 00:04:00.910
So let's change it
a little bit.

00:04:00.910 --> 00:04:05.150
Now I'm going to click Save,
go back to my browser, and

00:04:05.150 --> 00:04:07.620
it's a simple matter of
reloading the browser to see

00:04:07.620 --> 00:04:09.020
the effect of my change.

00:04:09.020 --> 00:04:10.800
Oh, very slow.

00:04:10.800 --> 00:04:14.200
I think actually, I'm feeling a
little more hyper than that.

00:04:14.200 --> 00:04:19.790
So let's change it and reload.

00:04:19.790 --> 00:04:27.010
So that's the edit/refresh cycle
with the Dart Editor,

00:04:27.010 --> 00:04:28.550
and running in Chromium.

00:04:28.550 --> 00:04:32.150
And what we're hoping is that
people will be delighted with

00:04:32.150 --> 00:04:34.250
how quick it is to
test out changes.

00:04:34.250 --> 00:04:38.900
Now that we have a file open in
the Editor, I want to draw

00:04:38.900 --> 00:04:40.770
your attention to some of the
things that we've done in the

00:04:40.770 --> 00:04:45.070
Editor to help make you an
effective Dart programmer.

00:04:45.070 --> 00:04:49.740
So first of all, unsurprisingly,
the Editor

00:04:49.740 --> 00:04:52.070
will give you some feedback when
you've gone completely

00:04:52.070 --> 00:04:52.600
off the rails.

00:04:52.600 --> 00:04:56.870
So for instance, if we introduce
a syntax error here

00:04:56.870 --> 00:05:00.810
and save it, we'll notice
at the bottom we

00:05:00.810 --> 00:05:03.680
get a bunch of errors.

00:05:03.680 --> 00:05:05.280
So that's useful.

00:05:05.280 --> 00:05:09.670
More subtly and more
interestingly, it will give us

00:05:09.670 --> 00:05:14.480
some feedback when we've done
unhappy things with types.

00:05:14.480 --> 00:05:17.460
So this is one of the places
where Dart really shines and

00:05:17.460 --> 00:05:20.125
the Editor can really
piggy back on that

00:05:20.125 --> 00:05:20.940
feature of the language.

00:05:20.940 --> 00:05:23.430
So lastTime, we happen
to know, is an int.

00:05:23.430 --> 00:05:26.440
And if we assign a string to
an int, you would expect a

00:05:26.440 --> 00:05:30.500
warning, and indeed
we get one.

00:05:30.500 --> 00:05:37.110
Now once we have types, we can
do other interesting things to

00:05:37.110 --> 00:05:39.630
help you be a productive
programmer.

00:05:39.630 --> 00:05:43.560
So since we know lastTime is
an int, you would hope that

00:05:43.560 --> 00:05:46.850
the tool would be able to
do something with that.

00:05:46.850 --> 00:05:48.300
And sure enough, it can.

00:05:48.300 --> 00:05:52.390
And it can calculate some
pretty constructive code

00:05:52.390 --> 00:05:54.080
completion proposals.

00:05:54.080 --> 00:06:00.210
So since lastTime is an int,
we can complete all valid

00:06:00.210 --> 00:06:03.360
methods on ints.

00:06:03.360 --> 00:06:06.900
So that is really,
really useful.

00:06:06.900 --> 00:06:10.650
And I think folks that are
coming from other, well, from

00:06:10.650 --> 00:06:13.680
typed languages like Java, for
instance, are going to take

00:06:13.680 --> 00:06:14.550
that for granted.

00:06:14.550 --> 00:06:17.190
But this is very useful
in the context of--

00:06:17.190 --> 00:06:19.940
Well, coming over from
JavaScript, this is

00:06:19.940 --> 00:06:22.610
refreshing.

00:06:22.610 --> 00:06:26.165
So I think that's what I want to
point out about the sample.

00:06:28.800 --> 00:06:30.770
Next you're probably wondering
what it's like to

00:06:30.770 --> 00:06:32.080
build your own apps.

00:06:32.080 --> 00:06:35.615
And to do that, first
let's close this.

00:06:39.390 --> 00:06:43.590
And to create an application
with the Dart Editor, you

00:06:43.590 --> 00:06:47.960
simply go to the File menu,
select New Application.

00:06:47.960 --> 00:06:51.090
It will come up with a wizard,
and this wizard will generate

00:06:51.090 --> 00:06:52.720
some sample content for us.

00:06:52.720 --> 00:06:54.270
So let's make a web app.

00:06:58.190 --> 00:07:03.485
And here we have a very
simple web app.

00:07:07.860 --> 00:07:09.160
(If could only type.

00:07:09.160 --> 00:07:12.350
The Editor does not make you a
better typist, unfortunately.)

00:07:12.350 --> 00:07:16.950
So once again we can just
run it like this.

00:07:16.950 --> 00:07:18.730
It runs, and, very good.

00:07:18.730 --> 00:07:21.770
So I mentioned a couple things
that you can do to navigate

00:07:21.770 --> 00:07:24.300
and I want to point out one
more while we're here.

00:07:28.360 --> 00:07:31.950
t you hold down the command key,
this will give us a very

00:07:31.950 --> 00:07:36.760
handy affordance for opening
the declarations of types

00:07:36.760 --> 00:07:37.880
inside the Editor panes.

00:07:37.880 --> 00:07:39.250
When I hold down the
Command key and

00:07:39.250 --> 00:07:42.390
hover, I can hop around.

00:07:42.390 --> 00:07:46.960
But more excitingly, I can drill
into externally-defined

00:07:46.960 --> 00:07:47.960
types and interfaces.

00:07:47.960 --> 00:07:50.370
So this is something that comes

00:07:50.370 --> 00:07:51.350
in the bundled libraries.

00:07:51.350 --> 00:07:54.200
The String interface, and
we can hop right to it.

00:07:54.200 --> 00:07:57.800
Similarly we can hop
around inside here.

00:07:57.800 --> 00:08:00.780
Now it's worth noting, you'll
notice what's happened on the

00:08:00.780 --> 00:08:02.280
left-hand side in
the Files views.

00:08:02.280 --> 00:08:06.720
We've expanded this synthetic
node which points off to the

00:08:06.720 --> 00:08:08.410
bundled SDK libraries.

00:08:08.410 --> 00:08:10.750
So obviously you can
navigate this--

00:08:10.750 --> 00:08:12.930
It's useful, maybe, to navigate
this to get some kind

00:08:12.930 --> 00:08:16.590
of a sense for how the SDK
libraries are structured.

00:08:16.590 --> 00:08:20.510
Another way to zoom around and
take a look at SDK libraries,

00:08:20.510 --> 00:08:22.170
of course, is through
the search box.

00:08:22.170 --> 00:08:24.520
So if you happen to know, you're
guessing likely, that

00:08:24.520 --> 00:08:27.140
there's some HTML-related
classes--

00:08:27.140 --> 00:08:30.370
And here, we can zoom
into one of them.

00:08:35.400 --> 00:08:38.100
So before we open for questions,
I want to point out

00:08:38.100 --> 00:08:40.774
a few more launching options.

00:08:45.320 --> 00:08:47.150
Up until this point, we've just
been running things in

00:08:47.150 --> 00:08:47.930
the Dartium--

00:08:47.930 --> 00:08:52.120
in the context of the Dartium
browser, so running on the VM.

00:08:52.120 --> 00:08:57.380
But you may be interested to
note that we can also run

00:08:57.380 --> 00:09:01.070
things just as well as
JavaScript apps.

00:09:01.070 --> 00:09:03.400
So we'll create a new Launch.

00:09:03.400 --> 00:09:06.570
So the way that we
did that, sorry.

00:09:06.570 --> 00:09:09.980
You can go to Tools,
Manage Launches.

00:09:09.980 --> 00:09:13.060
This will open this wizard
and create a new Launch.

00:09:13.060 --> 00:09:17.140
This time we're going to choose
a Dart Web Launch.

00:09:17.140 --> 00:09:25.630
We'll call it "webby." We need
to select the "webby" HTML

00:09:25.630 --> 00:09:26.990
file as an entry point.

00:09:26.990 --> 00:09:31.400
We're going to use the system
browser, apply it, and run it.

00:09:31.400 --> 00:09:33.930
What's happening here, you'll
see in the Console.

00:09:33.930 --> 00:09:37.600
Now we're generating JavaScript
and we're opening

00:09:37.600 --> 00:09:40.230
that file, in this
case, in Safari.

00:09:40.230 --> 00:09:43.690
Because that's what I've chosen
as my default browser.

00:09:43.690 --> 00:09:46.810
Also worth noting, when we
look at these Launches.

00:09:46.810 --> 00:09:48.520
You may have noticed--

00:09:48.520 --> 00:09:51.100
Folks who have been playing with
the Editor, this is a bit

00:09:51.100 --> 00:09:51.710
of a teaser.

00:09:51.710 --> 00:09:53.450
There are a few other options
when you launch.

00:09:53.450 --> 00:09:57.610
And one thing that I want to
just point out very quickly.

00:09:57.610 --> 00:09:59.590
Many folks on [UNINTELLIGIBLE]

00:09:59.590 --> 00:10:05.050
have discovered that there's
some early debugging support.

00:10:05.050 --> 00:10:08.400
And while we aren't turning it
on by default, I think it's

00:10:08.400 --> 00:10:10.310
already fully baked enough
to be pretty useful.

00:10:10.310 --> 00:10:12.540
So let me just quickly demo
what that looks like.

00:10:12.540 --> 00:10:18.110
So going back to our original
"webby" Launch configuration,

00:10:18.110 --> 00:10:19.360
we enable debugging.

00:10:21.850 --> 00:10:25.700
And just apply it, and run it.

00:10:25.700 --> 00:10:28.350
And now let's set
a break point.

00:10:28.350 --> 00:10:30.370
So setting a break point is
a simple matter of double

00:10:30.370 --> 00:10:32.755
clicking in the gutter here.

00:10:32.755 --> 00:10:35.866
Now we have a break
point set here.

00:10:35.866 --> 00:10:39.220
I suppose we want
to run it again.

00:10:39.220 --> 00:10:43.100
When we run it, you'll notice
that this debugger

00:10:43.100 --> 00:10:44.790
panel has opened up.

00:10:44.790 --> 00:10:48.830
We're stopped where we expect to
be, and you'll notice that

00:10:48.830 --> 00:10:50.865
values are propagated
to the view.

00:10:50.865 --> 00:10:54.300
And you can actually get them
also by hovering over.

00:10:54.300 --> 00:10:56.410
And as you would expect
in a debugger, you

00:10:56.410 --> 00:10:59.780
can just click resume.

00:10:59.780 --> 00:11:02.460
Finally I should point out there
was one other option

00:11:02.460 --> 00:11:06.750
that you may have noticed.

00:11:06.750 --> 00:11:09.240
So earlier I pointed out that
we get these warnings.

00:11:09.240 --> 00:11:11.940
And this is not strictly
an error in Dart.

00:11:11.940 --> 00:11:17.640
But you can run the VM, or you
can connect to the VM in

00:11:17.640 --> 00:11:18.320
checked mode.

00:11:18.320 --> 00:11:23.200
And when you do that, it gets
a little bit more strict.

00:11:23.200 --> 00:11:26.400
And in that case, what we should
see here in our Console

00:11:26.400 --> 00:11:28.810
is a stack trace.

00:11:28.810 --> 00:11:32.940
Because in this case, we're
saying that assignment is--

00:11:32.940 --> 00:11:34.680
We're going to treat that
as an error at runtime.

00:11:37.680 --> 00:11:41.560
That's about it that I had
set for the canned demo.

00:11:41.560 --> 00:11:45.400
Do we want to switch over
to some questions?

00:11:45.400 --> 00:11:46.180
SETH LADD: Yeah, thanks Phil.

00:11:46.180 --> 00:11:50.130
Go ahead and pop off your
screen sharing there.

00:11:53.830 --> 00:11:55.020
Awesome.

00:11:55.020 --> 00:11:57.510
So for everyone who's just
joined us, this is Dartisans

00:11:57.510 --> 00:11:58.510
Episode Four.

00:11:58.510 --> 00:12:01.580
We have special guests, the
Dart Editor team from

00:12:01.580 --> 00:12:04.510
Portland, who's just
finished up a demo.

00:12:04.510 --> 00:12:06.880
And this is all being recorded,
so if you missed the

00:12:06.880 --> 00:12:08.450
demo you'll be able to
see it on YouTube.

00:12:08.450 --> 00:12:09.560
It's very, very slick.

00:12:09.560 --> 00:12:13.640
We saw debugging, we saw
warnings, we saw launching

00:12:13.640 --> 00:12:15.900
into Dartium A lot
of good stuff.

00:12:15.900 --> 00:12:17.640
So thank you, Phil.

00:12:17.640 --> 00:12:21.580
So why don't we take just a
second to introduce yourself.

00:12:21.580 --> 00:12:24.530
I know you guys are in Portland,
but who's there with

00:12:24.530 --> 00:12:27.680
you in the room, and what have
you guys been doing, and what

00:12:27.680 --> 00:12:29.990
led you to Dart Editor?

00:12:29.990 --> 00:12:33.330
PHIL QUITSLUND: So I'll start.

00:12:33.330 --> 00:12:34.440
So I'm Phil Quitslund.

00:12:34.440 --> 00:12:38.850
I work on the Dart Editor
team in sunny Portland.

00:12:38.850 --> 00:12:43.570
And before, I had been working
in the Eclipse plug-in space

00:12:43.570 --> 00:12:49.230
for a long time, doing tooling
primarily for Java and Java

00:12:49.230 --> 00:12:49.960
extensions.

00:12:49.960 --> 00:12:52.650
I was in academia for a while
doing programming language

00:12:52.650 --> 00:12:54.830
research and language tools.

00:12:54.830 --> 00:12:59.090
And have happily found my way
onto the Dart team and am

00:12:59.090 --> 00:13:03.450
doing similar kinds of things
with the Dart Editor.

00:13:03.450 --> 00:13:09.090
And my focus on the Editor has
been, search has been a big

00:13:09.090 --> 00:13:11.076
part of my focus.

00:13:11.076 --> 00:13:13.050
SETH LADD: We saw a demo
that was very cool.

00:13:13.050 --> 00:13:15.980
Who's behind you, back there?

00:13:15.980 --> 00:13:17.960
DEVON CAREW: Hi.

00:13:17.960 --> 00:13:19.871
I'm Devon Carew.

00:13:19.871 --> 00:13:25.380
And I worked with Phil at
Instantiations before Google.

00:13:25.380 --> 00:13:28.910
And previous to that, I worked
at a couple of companies in

00:13:28.910 --> 00:13:33.270
Boston on work writing Java
virtual machines.

00:13:33.270 --> 00:13:37.510
And mostly on the Editor, I've
been working on debugging and

00:13:37.510 --> 00:13:41.740
launch support, which you
saw a little bit of.

00:13:41.740 --> 00:13:45.026
So if you find any bugs
in debugging, you can

00:13:45.026 --> 00:13:45.950
send them to me.

00:13:45.950 --> 00:13:47.280
[LAUGHTER]

00:13:47.280 --> 00:13:48.680
SETH LADD: Thanks, Devon.

00:13:48.680 --> 00:13:49.140
DEVON CAREW: Yeah.

00:13:49.140 --> 00:13:50.520
KIRSTIE: Hi.

00:13:50.520 --> 00:13:51.060
I'm Kirstie.

00:13:51.060 --> 00:13:55.130
And I'm also part of the team
that came over from

00:13:55.130 --> 00:13:56.900
Instantiations--

00:13:56.900 --> 00:13:57.130
PHIL QUITSLUND: Me too.

00:13:57.130 --> 00:13:58.940
KIRSTIE: I've been working with
these folks for a while

00:13:58.940 --> 00:14:02.410
now, mainly doing
[UNINTELLIGIBLE] loops and

00:14:02.410 --> 00:14:06.430
Java productivity tools, and
now working on the Dart

00:14:06.430 --> 00:14:09.330
Editor, So I've been
working with--

00:14:09.330 --> 00:14:12.080
Devon and I have been working on
the debugging and launching

00:14:12.080 --> 00:14:13.500
story for a while now.

00:14:17.290 --> 00:14:18.880
SETH LADD: Well thanks,
everyone, for taking the time.

00:14:18.880 --> 00:14:21.940
I keep hearing this word
Eclipse over and over.

00:14:21.940 --> 00:14:24.130
Can you tell us just a little
bit about Instantiations?

00:14:24.130 --> 00:14:26.830
Because I think that's an
interesting story about how we

00:14:26.830 --> 00:14:27.770
actually got here.

00:14:27.770 --> 00:14:30.550
And then the question that we
always get is, so is this

00:14:30.550 --> 00:14:31.400
thing Eclipse?

00:14:31.400 --> 00:14:35.790
So can you help demystify
what we just saw?

00:14:35.790 --> 00:14:36.910
PHIL QUITSLUND: Let's
start with the last

00:14:36.910 --> 00:14:38.330
part that you asked.

00:14:38.330 --> 00:14:41.590
As Kirstie said, at
Instantiations, our bread and

00:14:41.590 --> 00:14:42.870
butter was building
productivity

00:14:42.870 --> 00:14:44.680
tools built on Eclipse.

00:14:44.680 --> 00:14:48.200
And so our primary customers
there were folks that were

00:14:48.200 --> 00:14:51.520
using the Eclipse platform
in all of its grandness.

00:14:51.520 --> 00:14:55.250
Now what we're trying to do with
the Dart Editor is parlay

00:14:55.250 --> 00:14:58.265
some of our experience in the
larger Eclipse community.

00:15:01.390 --> 00:15:04.770
There are some pain points,
especially for novice users.

00:15:04.770 --> 00:15:09.590
So for end users who picked
up Eclipse, they found it

00:15:09.590 --> 00:15:13.480
sometimes threatening and a
little bit overly large.

00:15:13.480 --> 00:15:16.300
So we've been striving to do
with the Dart Editor is build

00:15:16.300 --> 00:15:20.490
something with a smaller
UX footprint.

00:15:20.490 --> 00:15:28.470
And just streamlined a little
bit, and emphasizing a kinder,

00:15:28.470 --> 00:15:31.210
gentler more streamlined
user experience.

00:15:31.210 --> 00:15:33.330
Which is not to denigrate
Eclipse at all.

00:15:33.330 --> 00:15:36.100
I think where we're trying to
really kind of focus this

00:15:36.100 --> 00:15:41.610
effort on clean and simple
and small and not open.

00:15:41.610 --> 00:15:44.480
So Eclipse is this great
open architecture.

00:15:44.480 --> 00:15:47.450
The Dart Editor is much
more curated.

00:15:47.450 --> 00:15:49.680
SETH LADD: I think the key there
is the word, editor.

00:15:49.680 --> 00:15:51.700
We don't really call it an
IDE, because I think that

00:15:51.700 --> 00:15:54.440
implies a different kind
of experience.

00:15:54.440 --> 00:15:57.110
And we're very focused
on an editor.

00:15:57.110 --> 00:16:00.540
What would an editor focused
on Dart look like, and feel

00:16:00.540 --> 00:16:01.680
like, and act like?

00:16:01.680 --> 00:16:03.360
And that's what you
guys are building.

00:16:03.360 --> 00:16:06.050
PHIL QUITSLUND: Right.

00:16:06.050 --> 00:16:08.160
SETH LADD: The other question we
always get, so is this ever

00:16:08.160 --> 00:16:10.510
going to turn into a plug-in?

00:16:10.510 --> 00:16:12.290
What's the story behind
a plug-in?

00:16:12.290 --> 00:16:14.130
How did we not write
a plug-in?

00:16:14.130 --> 00:16:17.772
How did we end up at a
standalone editor?

00:16:17.772 --> 00:16:19.810
PHIL QUITSLUND: Anybody else
want to answer that one?

00:16:19.810 --> 00:16:22.460
I can answer it, but--

00:16:22.460 --> 00:16:27.120
DEVON CAREW: I think initially
we were very concerned with

00:16:27.120 --> 00:16:32.640
the UX, user experience of our
tooling and that definitely

00:16:32.640 --> 00:16:36.620
led us to the road of this
curated, smaller

00:16:36.620 --> 00:16:38.525
version of an editor.

00:16:41.280 --> 00:16:44.510
Especially new users have
a good on-ramp, a good

00:16:44.510 --> 00:16:45.890
experience.

00:16:45.890 --> 00:16:51.110
And I would say largely, we
haven't done a plug-in version

00:16:51.110 --> 00:16:53.640
because of bandwidth reasons.

00:16:53.640 --> 00:16:57.530
If we try to concentrate on too
much, you're not able to

00:16:57.530 --> 00:17:00.190
perform well on what
you're trying to

00:17:00.190 --> 00:17:01.690
do- what's most important.

00:17:04.319 --> 00:17:08.350
And we have had requests for
plug-in versions, a plug-in

00:17:08.350 --> 00:17:11.760
version of the Editor,
Dart plug-ins.

00:17:11.760 --> 00:17:14.460
And we may introduce
them at some point.

00:17:14.460 --> 00:17:18.760
But I think that's mostly to do
with what other things we

00:17:18.760 --> 00:17:22.470
would be prioritizing about
that, where we would be

00:17:22.470 --> 00:17:24.599
putting our effort.

00:17:24.599 --> 00:17:26.380
PHIL QUITSLUND: I think
that's right.

00:17:26.380 --> 00:17:27.839
I should just add one--

00:17:27.839 --> 00:17:29.876
You've made me realize one thing
that I meant to demo is

00:17:29.876 --> 00:17:33.690
that in the application we have
the feedback mechanism.

00:17:33.690 --> 00:17:36.970
And we hope that people take
advantage of that to give us

00:17:36.970 --> 00:17:37.940
feedback just like this.

00:17:37.940 --> 00:17:39.460
There also obviously
is the public bug

00:17:39.460 --> 00:17:41.950
tracker at Dart Bugs.

00:17:41.950 --> 00:17:47.190
And like Devon said, there is
an open ticket that has had

00:17:47.190 --> 00:17:48.990
some kind of interesting
activity on it.

00:17:48.990 --> 00:17:53.505
So if folks want to explore
that issue any further,

00:17:53.505 --> 00:17:57.676
they're welcome to
chime in there.

00:17:57.676 --> 00:17:59.930
DEVON CAREW: And to add to
what Phil said, we have

00:17:59.930 --> 00:18:03.610
changed the behavior of the
Editor based on user feedback.

00:18:03.610 --> 00:18:06.050
We had a different type
of explorer, a

00:18:06.050 --> 00:18:09.510
navigator for your code.

00:18:09.510 --> 00:18:13.750
And based on a specific amount
of user feedback we changed it

00:18:13.750 --> 00:18:16.610
to a different style, from
the Library view

00:18:16.610 --> 00:18:18.050
to the Files view.

00:18:18.050 --> 00:18:23.760
And if we saw enough feedback
on various issues we would

00:18:23.760 --> 00:18:26.950
definitely take that into
account and probably change

00:18:26.950 --> 00:18:27.920
what we were doing.

00:18:27.920 --> 00:18:29.790
PHIL QUITSLUND: Right.

00:18:29.790 --> 00:18:30.060
SETH LADD: Yeah.

00:18:30.060 --> 00:18:31.140
We definitely appreciate that.

00:18:31.140 --> 00:18:32.280
And you touched on it before.

00:18:32.280 --> 00:18:35.140
There's a SEND FEEDBACK
mechanism in the Editor.

00:18:35.140 --> 00:18:37.470
But the Editor, just like the
entire Dart project, is

00:18:37.470 --> 00:18:38.300
open-source.

00:18:38.300 --> 00:18:42.000
And so you can go to
dartbug.com, file your

00:18:42.000 --> 00:18:44.530
experiences, ask for new
features, file bugs.

00:18:44.530 --> 00:18:46.820
Or use the SEND FEEDBACK.

00:18:46.820 --> 00:18:49.330
The team listens and triages
all these issues.

00:18:49.330 --> 00:18:50.880
And so we definitely
appreciate that.

00:18:50.880 --> 00:18:53.660
This is the Editor's technology
preview, just like

00:18:53.660 --> 00:18:54.900
the rest of the project.

00:18:54.900 --> 00:18:59.390
And things are being re-factored
every week based

00:18:59.390 --> 00:19:00.310
on the feedback we get.

00:19:00.310 --> 00:19:02.450
So we definitely appreciate
that.

00:19:02.450 --> 00:19:03.490
PHIL QUITSLUND: Patches
welcome.

00:19:03.490 --> 00:19:05.930
SETH LADD: Yes definitely.

00:19:05.930 --> 00:19:08.590
Let's take a question from
the moderator here.

00:19:08.590 --> 00:19:10.330
This question is, the
top question is

00:19:10.330 --> 00:19:12.820
voted by our listeners.

00:19:12.820 --> 00:19:14.210
What are their future plans for

00:19:14.210 --> 00:19:17.040
supporting other languages?

00:19:17.040 --> 00:19:19.050
Or at least syntax highlighting
in quote

00:19:19.050 --> 00:19:23.020
completion for things like
HTML, CSS, or Go?

00:19:23.020 --> 00:19:25.110
Where do you see the Editor
fitting in with at

00:19:25.110 --> 00:19:28.170
least HTML and CSS?

00:19:28.170 --> 00:19:28.670
PHIL QUITSLUND: Well,
that's interesting.

00:19:28.670 --> 00:19:31.690
You can speak to that.

00:19:31.690 --> 00:19:35.560
That's a very hotly
requested item.

00:19:35.560 --> 00:19:38.130
DEVON CAREW: I would definitely
say HTML and CSS is

00:19:38.130 --> 00:19:38.930
on our near-term.

00:19:38.930 --> 00:19:42.720
I don't think Go is on the
strategy right now.

00:19:42.720 --> 00:19:44.980
But yeah, we've had
requests for it.

00:19:44.980 --> 00:19:47.900
And for simple stuff like syntax
highlighting, it makes

00:19:47.900 --> 00:19:48.540
a big difference.

00:19:48.540 --> 00:19:51.310
It makes it easier
to read the code.

00:19:51.310 --> 00:19:55.180
And we actually have
some code for that

00:19:55.180 --> 00:19:56.090
which is not completed.

00:19:56.090 --> 00:19:58.530
So I think it will land
the next few weeks.

00:20:01.620 --> 00:20:01.770
SETH LADD: Great.

00:20:01.770 --> 00:20:02.140
Thank you.

00:20:02.140 --> 00:20:04.820
Especially as Dart, first and
foremost, is a modern,

00:20:04.820 --> 00:20:07.670
structured web programming
language, I think that's going

00:20:07.670 --> 00:20:11.130
to get a lot of usage
out of that.

00:20:11.130 --> 00:20:12.610
Here's another question
from the moderator.

00:20:12.610 --> 00:20:16.460
And for everyone watching, feel
free to join the Hangout.

00:20:16.460 --> 00:20:19.130
I believe I shared it to all
the extended circles there.

00:20:19.130 --> 00:20:22.630
We love the live questions,
so don't be shy.

00:20:22.630 --> 00:20:26.240
This next question,
MBC or MBP web

00:20:26.240 --> 00:20:28.660
application scaffold generator.

00:20:28.660 --> 00:20:31.770
That sounds like a feature
request. If Google's building

00:20:31.770 --> 00:20:34.210
guit-like framework in Dart--

00:20:34.210 --> 00:20:36.300
which we definitely
are looking at--

00:20:36.300 --> 00:20:40.420
What does the UI stack, or UI
app stack, look like for Dart?

00:20:40.420 --> 00:20:43.470
Then a GUI-based model creator
for App Engine SQL?

00:20:43.470 --> 00:20:45.310
No SQL back end would be
really interesting.

00:20:45.310 --> 00:20:48.990
So I think what this question
is really saying is, how far

00:20:48.990 --> 00:20:51.290
do you see the Editor going?

00:20:51.290 --> 00:20:54.280
Right now we saw a lot of cool
stuff about the syntax, and

00:20:54.280 --> 00:20:55.770
launching, and debugging.

00:20:55.770 --> 00:20:58.750
But at some point we'll
introduce an app stack.

00:20:58.750 --> 00:21:02.730
And people compile their Dart
apps into JavaScript, and

00:21:02.730 --> 00:21:05.700
deploy that up to App Engine.

00:21:05.700 --> 00:21:08.220
Where's your head at, and how
far do you think that Editor's

00:21:08.220 --> 00:21:09.470
going to go?

00:21:12.150 --> 00:21:15.510
PHIL QUITSLUND: I think what
Devon said earlier about a

00:21:15.510 --> 00:21:17.720
plug-in version of the Editor
is exactly right.

00:21:17.720 --> 00:21:23.410
I mean, I think it's entirely
a matter of bandwidth.

00:21:23.410 --> 00:21:26.300
I can't imagine that
we wouldn't--

00:21:26.300 --> 00:21:27.800
I don't know.

00:21:27.800 --> 00:21:31.880
I think as the more opinionated
that the Dart team

00:21:31.880 --> 00:21:37.800
gets about a UI app stack, and
the sooner we have a real

00:21:37.800 --> 00:21:41.670
story for that, the sooner
we can start building our

00:21:41.670 --> 00:21:42.420
tooling around it.

00:21:42.420 --> 00:21:44.790
But again I think that I think
that's just a matter of

00:21:44.790 --> 00:21:45.720
interest and bandwidth.

00:21:45.720 --> 00:21:47.530
But I can't imagine we wouldn't
want to do that.

00:21:47.530 --> 00:21:49.540
It sounds very exciting.

00:21:49.540 --> 00:21:52.950
But again I also encourage this
should be translated into

00:21:52.950 --> 00:21:58.600
a feature request. And put
on the public tracker.

00:21:58.600 --> 00:22:00.580
SETH LADD: I'd like to turn it
back to some of the stuff that

00:22:00.580 --> 00:22:03.290
we saw you doing
in the Editor.

00:22:03.290 --> 00:22:06.960
You showed that if type
annotations exist in the code,

00:22:06.960 --> 00:22:09.740
that the Editor can
give you warnings.

00:22:09.740 --> 00:22:13.730
We also saw an error for
something you checked for

00:22:13.730 --> 00:22:15.120
checked mode.

00:22:15.120 --> 00:22:18.230
Can you just take a minute and
explain the differences

00:22:18.230 --> 00:22:20.520
between what the Editor and
just really what the Dart

00:22:20.520 --> 00:22:23.770
system considers warnings and
errors and checked mode?

00:22:23.770 --> 00:22:26.390
And can you demystify all
this a little bit?

00:22:26.390 --> 00:22:30.375
Because I know that if you add
these static type annotations

00:22:30.375 --> 00:22:32.030
to your code, the
Editor really--

00:22:32.030 --> 00:22:34.740
Like, a lot of these cool
features turn on.

00:22:34.740 --> 00:22:36.840
Talk to us a little bit about,
what are warnings?

00:22:36.840 --> 00:22:37.960
What are errors?

00:22:37.960 --> 00:22:39.210
And how do they manifest
themselves?

00:22:42.620 --> 00:22:45.730
PHIL QUITSLUND: Anybody else
want to take that one?

00:22:45.730 --> 00:22:48.090
DEVON CAREW: I'll jump in
here for a little bit.

00:22:48.090 --> 00:22:51.070
PHIL QUITSLUND: And I'll
take up after that.

00:22:51.070 --> 00:22:53.320
DEVON CAREW: But I am not
a Dart language expert,

00:22:53.320 --> 00:22:55.450
by any means so--

00:22:55.450 --> 00:22:56.030
Yeah.

00:22:56.030 --> 00:22:57.826
Generally, the type
annotations--

00:23:01.010 --> 00:23:03.470
In some places on
your Dart code--

00:23:03.470 --> 00:23:06.070
Basically, we don't
want the types to

00:23:06.070 --> 00:23:07.300
affect the runtime behavior.

00:23:07.300 --> 00:23:13.120
They're there more as helpful
hints to the user.

00:23:13.120 --> 00:23:16.250
So if you see a warning,
it means that

00:23:16.250 --> 00:23:17.870
this is probably incorrect.

00:23:17.870 --> 00:23:25.280
But the VM and the browser are
going to execute it just fine.

00:23:25.280 --> 00:23:28.520
Whereas an error is more
like your code is--

00:23:28.520 --> 00:23:31.160
We're not compiling, but
it wouldn't compile

00:23:31.160 --> 00:23:31.555
traditionally.

00:23:31.555 --> 00:23:34.180
And it will not run correctly.

00:23:34.180 --> 00:23:36.710
So that's when you see the
difference between a warning

00:23:36.710 --> 00:23:38.160
and an error.

00:23:38.160 --> 00:23:40.720
ERIC CLAYBURG: So
are you guys--?

00:23:40.720 --> 00:23:41.620
PHIL QUITSLUND: Yeah, sure.

00:23:41.620 --> 00:23:42.470
DEVON CAREW: Sure.

00:23:42.470 --> 00:23:42.930
ERIC CLAYBURG: Oh yeah.

00:23:42.930 --> 00:23:45.530
I was going to say so it's
really not even that

00:23:45.530 --> 00:23:46.750
straightforward.

00:23:46.750 --> 00:23:53.510
Sometimes even when the Editor
is showing an error, the VM

00:23:53.510 --> 00:23:57.470
will actually execute code
somewhere up until that point.

00:23:57.470 --> 00:24:01.740
So the definition of a compile
time error in Dart just means

00:24:01.740 --> 00:24:04.920
that you won't be able to
execute the code, and you

00:24:04.920 --> 00:24:09.570
won't be able to catch an
exception, and keep going.

00:24:09.570 --> 00:24:13.190
So that's the real difference
between a

00:24:13.190 --> 00:24:16.080
warning and an error.

00:24:16.080 --> 00:24:18.480
Warnings, you can turn
on checked mode.

00:24:18.480 --> 00:24:21.310
But if you put a try/catch block
around them, it throws a

00:24:21.310 --> 00:24:26.120
special kind of type exception
that could be caught.

00:24:26.120 --> 00:24:27.960
I don't recommend coding
like that.

00:24:27.960 --> 00:24:30.780
But this is something
that we do in our

00:24:30.780 --> 00:24:33.140
unit tests, for example.

00:24:33.140 --> 00:24:37.910
So the real point of the
warnings is to give people who

00:24:37.910 --> 00:24:43.140
want the extra safety of types
a way to do type safety,

00:24:43.140 --> 00:24:46.580
without letting types get in
the way of people who don't

00:24:46.580 --> 00:24:50.170
use a type system or
casually using it.

00:24:50.170 --> 00:24:54.020
So for example, you showed
assigning an int to a string

00:24:54.020 --> 00:24:56.050
and everything working fine.

00:24:56.050 --> 00:24:59.630
If you want to write code that
uses duck typing, where you

00:24:59.630 --> 00:25:02.990
have an object to implement some
fields, and you assign it

00:25:02.990 --> 00:25:06.600
to another object that has some
of those same fields, and

00:25:06.600 --> 00:25:11.800
you access only those fields,
everything works fine.

00:25:11.800 --> 00:25:15.660
It's just the warnings that
would get in the way.

00:25:15.660 --> 00:25:18.433
I hope that clarified, and
not confused people.

00:25:18.433 --> 00:25:20.635
PHIL QUITSLUND: No,
that's great.

00:25:20.635 --> 00:25:21.700
SETH LADD: And Eric,
can you introduce

00:25:21.700 --> 00:25:23.600
yourself real briefly?

00:25:23.600 --> 00:25:24.370
ERIC CLAYBURG: Oh yeah, sorry.

00:25:24.370 --> 00:25:27.070
I'm Eric.

00:25:27.070 --> 00:25:30.740
I work on the Dart Editor team
now, and I've been working on

00:25:30.740 --> 00:25:32.840
the static analyzer.

00:25:32.840 --> 00:25:40.030
And as a part of the
old Dart seed team.

00:25:40.030 --> 00:25:43.470
And previous to that, at Google,
I worked on the Google

00:25:43.470 --> 00:25:47.740
Web Toolkit and Maps bindings
for Google Web Toolkit.

00:25:50.260 --> 00:25:50.730
SETH LADD: Thanks Eric.

00:25:50.730 --> 00:25:53.640
And I should probably point
out the static analyzer is

00:25:53.640 --> 00:25:56.540
what's looking through all the
code as you type it and as you

00:25:56.540 --> 00:25:59.630
save it, and generates those
yellow squigglies.

00:25:59.630 --> 00:26:01.430
So that's what's looking through
it and using the

00:26:01.430 --> 00:26:04.920
language spec, and giving you
those warnings early on.

00:26:04.920 --> 00:26:07.560
I think that's really where you
start to see the power of

00:26:07.560 --> 00:26:10.880
type annotations pay off,
is in the Editor.

00:26:10.880 --> 00:26:12.830
Editor's where the
users actually

00:26:12.830 --> 00:26:14.010
interact with the system.

00:26:14.010 --> 00:26:16.730
So you add those types, and you
get these early warnings.

00:26:16.730 --> 00:26:18.410
You catch those bugs early.

00:26:18.410 --> 00:26:20.070
That, to me, is where
the power really

00:26:20.070 --> 00:26:20.880
starts to kick in.

00:26:20.880 --> 00:26:22.210
So I appreciate that.

00:26:22.210 --> 00:26:24.850
PHIL QUITSLUND: Yeah and also,
the type annotations also make

00:26:24.850 --> 00:26:30.070
it much, much easier for us
to propose intelligent

00:26:30.070 --> 00:26:31.400
completions.

00:26:31.400 --> 00:26:33.250
I think on the--

00:26:33.250 --> 00:26:35.660
I can't make any promises about
a time frame, but I know

00:26:35.660 --> 00:26:38.720
folks are very interested in
adding some basic type

00:26:38.720 --> 00:26:40.630
inferencing.

00:26:40.630 --> 00:26:46.570
So I think, depending on how far
we want to go with that,

00:26:46.570 --> 00:26:49.380
hopefully in the not-so-long
term, you'll start to see some

00:26:49.380 --> 00:26:51.650
custom code completion in places
where there isn't an

00:26:51.650 --> 00:26:52.260
explicit type.

00:26:52.260 --> 00:26:55.200
On the other hand, it kind
of gives you some nice

00:26:55.200 --> 00:26:56.460
encouragement to use type.

00:26:56.460 --> 00:26:59.380
So I think it'll be interesting
to see what kind

00:26:59.380 --> 00:27:03.130
of culture grows around the
types and how many people

00:27:03.130 --> 00:27:04.770
really leverage the
optional types.

00:27:04.770 --> 00:27:07.450
But that still remains
to be seen.

00:27:07.450 --> 00:27:07.940
SETH LADD: Thanks, Phil.

00:27:07.940 --> 00:27:10.650
That was exactly the next
question from Adam in San

00:27:10.650 --> 00:27:14.710
Francisco, was, when do you
think, or can the Dart Editor

00:27:14.710 --> 00:27:18.640
handle at least local
type inference?

00:27:18.640 --> 00:27:22.360
And so it's good to see that
that's on the radar.

00:27:22.360 --> 00:27:24.700
PHIL QUITSLUND: Yeah, we were
just talking about that.

00:27:24.700 --> 00:27:27.560
Kind of an idiom that seems
to be kind of growing--

00:27:27.560 --> 00:27:30.760
Well, something that people are
kind of trying on here, is

00:27:30.760 --> 00:27:35.000
the notion of types at
all the boundaries.

00:27:35.000 --> 00:27:38.220
So having all your interfaces
well-typed.

00:27:38.220 --> 00:27:41.430
So more specifically, if you
have a method declaration, you

00:27:41.430 --> 00:27:44.950
wouldn't have any vars
in the signature.

00:27:44.950 --> 00:27:45.930
Those would all be typed.

00:27:45.930 --> 00:27:49.150
But in the body of your
method, you may

00:27:49.150 --> 00:27:50.480
not use types, right?

00:27:50.480 --> 00:27:51.995
That affords you some
flexibility.

00:27:54.630 --> 00:27:56.790
But that being said, if you want
to do type inference in

00:27:56.790 --> 00:28:00.090
that context, that's much
easier than global type

00:28:00.090 --> 00:28:03.590
inference, where you have to
do an analysis that reaches

00:28:03.590 --> 00:28:05.960
further out of that scope.

00:28:05.960 --> 00:28:09.405
So I think that--

00:28:09.405 --> 00:28:10.290
Bryan isn't here.

00:28:10.290 --> 00:28:13.700
Bryan's the one who's been
thinking most deeply about

00:28:13.700 --> 00:28:16.300
what type inferencing for the
Editor would look like.

00:28:16.300 --> 00:28:19.850
But I think folks are very
keen to have that happen,

00:28:19.850 --> 00:28:23.320
because I think that would be
hugely valuable to users, and

00:28:23.320 --> 00:28:24.850
Adam, at least.

00:28:24.850 --> 00:28:26.056
SETH LADD: Yes.

00:28:26.056 --> 00:28:29.150
Well, with so many people from
the Dart team here joining us,

00:28:29.150 --> 00:28:31.010
which is a really rare
treat, I'm kind of

00:28:31.010 --> 00:28:32.460
curious to turn it around.

00:28:32.460 --> 00:28:34.810
What are some of the things that
you as the Editor team

00:28:34.810 --> 00:28:39.380
would like to know more about
from our Dart users out there.

00:28:39.380 --> 00:28:41.440
There's a whole bunch of people
using the Editor, and

00:28:41.440 --> 00:28:43.345
the language, and libraries.

00:28:43.345 --> 00:28:45.900
This is a good chance for you
guys to ask your own questions

00:28:45.900 --> 00:28:49.060
that people can either respond
here in the moderator, or the

00:28:49.060 --> 00:28:51.960
hang out, or just when they file
bugs, or join the mailing

00:28:51.960 --> 00:28:54.060
list. What is it that you
guys want to know?

00:28:54.060 --> 00:28:55.310
Anything curious?

00:28:57.430 --> 00:28:58.870
PHIL QUITSLUND: Hmm.

00:28:58.870 --> 00:28:59.900
Dan, you want to chime in?

00:28:59.900 --> 00:29:04.330
DAN RUBEL: I'd say definitely
feature requests, where you're

00:29:04.330 --> 00:29:07.420
getting road blocked, how we
can help you understand the

00:29:07.420 --> 00:29:13.790
language quickly, bugs
you're running into.

00:29:13.790 --> 00:29:18.130
All those sort of typical
product-centric

00:29:18.130 --> 00:29:22.260
product-realized questions
that can help drive us to

00:29:22.260 --> 00:29:24.620
determine where we should
spend our time

00:29:24.620 --> 00:29:26.860
in the short term.

00:29:26.860 --> 00:29:28.150
SETH LADD: With that, I
want to say, hi Dan.

00:29:28.150 --> 00:29:29.360
How are you?

00:29:29.360 --> 00:29:29.770
DAN RUBEL: Howdy.

00:29:29.770 --> 00:29:32.160
SETH LADD: Can you introduce
yourself real briefly?

00:29:32.160 --> 00:29:35.330
DAN RUBEL: I'm the TL for the
Dart Editor project log.

00:29:35.330 --> 00:29:40.080
I've been working on Eclipse
plug-ins for 10-plus years,

00:29:40.080 --> 00:29:44.490
working with the guys in
Portland, doing that.

00:29:44.490 --> 00:29:50.110
All prior to Google, and now
part of the Dart Editor team.

00:29:50.110 --> 00:29:51.150
SETH LADD: I feel so lucky.

00:29:51.150 --> 00:29:53.980
I really feel you're the right
guys building this project.

00:29:53.980 --> 00:29:57.700
You guys have been doing these
kind of editors, and IDEs, and

00:29:57.700 --> 00:29:58.650
frameworks for a long time.

00:29:58.650 --> 00:30:02.640
So I think we're lucky to have
you guys working on it.

00:30:02.640 --> 00:30:04.200
Dan, I'm going to put you
on the spot for just

00:30:04.200 --> 00:30:04.890
real briefly here.

00:30:04.890 --> 00:30:08.300
One of the things we're hearing
about, and we love to

00:30:08.300 --> 00:30:11.160
hear, is that people are using
Dart for some fairly large,

00:30:11.160 --> 00:30:13.030
nontrivial projects.

00:30:13.030 --> 00:30:15.690
Some public, some private.

00:30:15.690 --> 00:30:20.040
But they've been running
into slower analysis

00:30:20.040 --> 00:30:21.000
times with the Editor.

00:30:21.000 --> 00:30:22.550
I know you've been thinking
about ways

00:30:22.550 --> 00:30:24.490
to make that better.

00:30:24.490 --> 00:30:26.600
Can you talk just a little bit
about what you've seen, and

00:30:26.600 --> 00:30:29.770
any kind of thoughts on
the future of the

00:30:29.770 --> 00:30:33.000
analysis and speed?

00:30:33.000 --> 00:30:34.740
DAN RUBEL: Speed is definitely,
performance is

00:30:34.740 --> 00:30:38.670
definitely of interest
to us obviously.

00:30:38.670 --> 00:30:43.320
We're addressing larger and
larger programs. it's the

00:30:43.320 --> 00:30:43.970
basic things.

00:30:43.970 --> 00:30:47.190
We need to speed up the
analysis itself and do

00:30:47.190 --> 00:30:50.440
performance analysis there,
address the hot spots.

00:30:50.440 --> 00:30:54.480
We are putting in place caching
so that things are not

00:30:54.480 --> 00:30:56.380
analyzed multiple times.

00:30:56.380 --> 00:30:59.120
Cache whatever we can.

00:30:59.120 --> 00:31:04.800
In addition, Phil's added, and
Bryan has added some logic so

00:31:04.800 --> 00:31:08.610
that you can exclude certain
areas and focus, so that even

00:31:08.610 --> 00:31:14.990
if you open up a large directory
tree, you can focus

00:31:14.990 --> 00:31:18.900
Editor on a particular area
and say, only analyze this

00:31:18.900 --> 00:31:20.170
small portion of it.

00:31:20.170 --> 00:31:22.710
So we're looking at things
both from an automated

00:31:22.710 --> 00:31:27.080
standpoint and from a
user-driven standpoint to

00:31:27.080 --> 00:31:30.220
improve performance.

00:31:30.220 --> 00:31:30.620
SETH LADD: Great.

00:31:30.620 --> 00:31:31.330
Thanks, Dan.

00:31:31.330 --> 00:31:34.520
And we'll keep encouraging our
community to send us more

00:31:34.520 --> 00:31:37.330
specific use cases
and scenarios.

00:31:37.330 --> 00:31:39.600
Because I know we definitely
appreciate to see what those

00:31:39.600 --> 00:31:40.390
projects look like.

00:31:40.390 --> 00:31:42.700
That helps us get to the
root even quicker.

00:31:42.700 --> 00:31:46.790
So we appreciate the community
feedback there.

00:31:46.790 --> 00:31:48.340
ERIC CLAYBURG: This
is Eric again.

00:31:48.340 --> 00:31:52.270
And we were talking to some
usability people, saying that

00:31:52.270 --> 00:31:54.510
users are having trouble
interpreting some of the

00:31:54.510 --> 00:31:55.670
warnings and errors.

00:31:55.670 --> 00:32:01.500
And I was just putting out a
plea to get more specific

00:32:01.500 --> 00:32:06.140
instances of those, to see if we
could help people by making

00:32:06.140 --> 00:32:07.390
the messages better,
basically.

00:32:11.020 --> 00:32:11.870
SETH LADD: Great,
thank you Eric.

00:32:11.870 --> 00:32:13.140
That's awesome.

00:32:13.140 --> 00:32:17.610
So please use our bug-tracking
system not just for bugs or

00:32:17.610 --> 00:32:18.920
explicit feature requests.

00:32:18.920 --> 00:32:21.580
You can also use the SEND
FEEDBACK button, and our

00:32:21.580 --> 00:32:25.350
mailing list, and our
dartbug.com, just to send your

00:32:25.350 --> 00:32:26.730
general thoughts and
experiences.

00:32:26.730 --> 00:32:27.680
We love to hear that.

00:32:27.680 --> 00:32:30.660
We can put the pieces together
and make it even better.

00:32:30.660 --> 00:32:34.210
So thanks Eric, for offering
to do that.

00:32:34.210 --> 00:32:34.630
Hi, Brandon.

00:32:34.630 --> 00:32:36.590
Did you have a question for
the Dart Editor team?

00:32:39.410 --> 00:32:40.740
BRANDON DONNELSON: I don't
have a question.

00:32:40.740 --> 00:32:42.090
I thought I'd lurk.

00:32:42.090 --> 00:32:46.220
I saw the request come across,
and I couldn't help myself.

00:32:46.220 --> 00:32:46.980
SETH LADD: Awesome.

00:32:46.980 --> 00:32:48.160
PHIL QUITSLUND: Well, welcome.

00:32:48.160 --> 00:32:49.320
Lurk away.

00:32:49.320 --> 00:32:50.260
SETH LADD: Lurk away,
that's right.

00:32:50.260 --> 00:32:53.160
BRANDON DONNELSON: You guys are
doing some awesome work.

00:32:53.160 --> 00:32:54.680
DAN RUBEL: Well, thanks.

00:32:54.680 --> 00:32:56.430
PHIL QUITSLUND: Thank you.

00:32:56.430 --> 00:32:58.320
SETH LADD: We've got
just about five

00:32:58.320 --> 00:32:59.480
or six minutes left.

00:32:59.480 --> 00:33:02.730
And something that, it was kind
of a teasing hint I want

00:33:02.730 --> 00:33:06.290
to end on, with one of the
latest announcements for the

00:33:06.290 --> 00:33:11.130
Dart Editor team, was local
rename refactoring support.

00:33:11.130 --> 00:33:13.760
I think that is going to
be really awesome.

00:33:13.760 --> 00:33:15.910
Can you spend a few minutes
talking about, what's your

00:33:15.910 --> 00:33:18.720
vision there, and what's coming
down maybe the next

00:33:18.720 --> 00:33:23.270
couple releases with regards
to refactor?

00:33:23.270 --> 00:33:28.260
DAN RUBEL: As our local analysis
improves, and again

00:33:28.260 --> 00:33:32.640
type inferencing, in that area,
one of the first simple

00:33:32.640 --> 00:33:34.490
things is rename.

00:33:34.490 --> 00:33:41.110
Beyond that, I think all
of the typical Java,

00:33:41.110 --> 00:33:43.330
Eclipse-related refactorings--

00:33:43.330 --> 00:33:45.130
We would like to see
as many as we can.

00:33:45.130 --> 00:33:48.610
We'll just take them
as we have time.

00:33:48.610 --> 00:33:52.620
Extract Method, inline, Extract
Local, et cetera.

00:33:52.620 --> 00:33:56.330
But again, we have to the bright
bread and butter things

00:33:56.330 --> 00:33:59.110
first. Performance,
stability--

00:34:04.880 --> 00:34:06.940
SETH LADD: OK.

00:34:06.940 --> 00:34:07.420
Thanks, Dan.

00:34:07.420 --> 00:34:10.510
I I'm personally very excited
for the refactoring support.

00:34:10.510 --> 00:34:13.110
So looking forward
to that one.

00:34:13.110 --> 00:34:15.219
PHIL QUITSLUND: Well I think
there's a lot of incentives to

00:34:15.219 --> 00:34:15.659
do it right.

00:34:15.659 --> 00:34:18.870
Because I think one of the
things that obviously is on

00:34:18.870 --> 00:34:21.909
our mind as we're building this
tool is that we want to

00:34:21.909 --> 00:34:24.400
emphasize all the
ways that Dart

00:34:24.400 --> 00:34:26.659
distinguishes itself from--

00:34:26.659 --> 00:34:30.449
well, the elephant in the
room is JavaScript.

00:34:30.449 --> 00:34:33.670
There are lots of things that
are very challenging to do in

00:34:33.670 --> 00:34:34.230
JavaScript.

00:34:34.230 --> 00:34:35.340
And I think there are still--

00:34:35.340 --> 00:34:39.380
Rename in Dart is not a piece of
cake either, because of the

00:34:39.380 --> 00:34:42.489
typing story.

00:34:42.489 --> 00:34:44.600
But I think that's something
that we're really keen to do

00:34:44.600 --> 00:34:45.510
and to get right.

00:34:45.510 --> 00:34:46.710
I think there are some
interesting new

00:34:46.710 --> 00:34:47.690
UX challenges there.

00:34:47.690 --> 00:34:51.610
So beyond just the analysis, I
think we need to come up with

00:34:51.610 --> 00:34:54.000
potentially some innovative
ways to communicate to the

00:34:54.000 --> 00:34:56.580
user when there are--

00:34:56.580 --> 00:34:59.420
So a refactoring, a definition
of refactoring is something

00:34:59.420 --> 00:35:03.580
that guarantees that behavior is
preserved before and after

00:35:03.580 --> 00:35:04.780
the transformation.

00:35:04.780 --> 00:35:09.090
And I think with the optional
type story, that gets

00:35:09.090 --> 00:35:10.680
interesting.

00:35:10.680 --> 00:35:13.030
And I think we still have some
exploring to do there.

00:35:13.030 --> 00:35:15.210
But that's also where the
language geeks get really

00:35:15.210 --> 00:35:17.270
psyched, because that's
it's a chance to do

00:35:17.270 --> 00:35:18.520
something really new.

00:35:22.560 --> 00:35:22.940
SETH LADD: OK.

00:35:22.940 --> 00:35:25.260
Well, without any other
questions--

00:35:25.260 --> 00:35:28.690
I don't see anything new showing
up in the moderator.

00:35:28.690 --> 00:35:31.870
I'll take this opportunity to
again encourage everyone to

00:35:31.870 --> 00:35:34.540
try out the Editor and
send the feedback.

00:35:34.540 --> 00:35:35.920
And this team really
does listen.

00:35:35.920 --> 00:35:38.310
They're really great at
responding quickly and they

00:35:38.310 --> 00:35:41.640
push out releases so fast, it's
hard for me to catch up.

00:35:41.640 --> 00:35:44.100
There's a SEND FEEDBACK button
in the upper right of the

00:35:44.100 --> 00:35:47.660
Editor, there's dartbug.com
which links you straight to

00:35:47.660 --> 00:35:48.770
our H2 tracking system.

00:35:48.770 --> 00:35:51.925
That's a good place to put
explicit feature requests, and

00:35:51.925 --> 00:35:53.840
any bugs you might
ever encounter.

00:35:53.840 --> 00:35:56.050
And then, encourage you to
participate in the mailing

00:35:56.050 --> 00:36:01.730
list. Our engineers participate
there, and listen

00:36:01.730 --> 00:36:02.890
to what you have to
say, and a lot of

00:36:02.890 --> 00:36:04.540
good discussion happens.

00:36:04.540 --> 00:36:05.550
So please do.

00:36:05.550 --> 00:36:07.650
This community is very, very
good and our engineers are

00:36:07.650 --> 00:36:10.510
awesome at listening to what you
have. So please do give it

00:36:10.510 --> 00:36:11.520
a shot and let us know.

00:36:11.520 --> 00:36:12.510
We appreciate it.

00:36:12.510 --> 00:36:15.670
And on behalf of the whole
Dart community, I want to

00:36:15.670 --> 00:36:17.980
thank all you guys from the
Editor team, and everyone

00:36:17.980 --> 00:36:20.070
watching at home for
joining us today.

00:36:20.070 --> 00:36:23.440
This is really cool to see the
demo, to hear your thoughts,

00:36:23.440 --> 00:36:24.570
and learn what's coming next.

00:36:24.570 --> 00:36:27.600
So I really appreciate it.

00:36:27.600 --> 00:36:29.260
So with that, I want to
say, thanks everyone.

00:36:29.260 --> 00:36:30.820
This video will go
up on YouTube.

00:36:30.820 --> 00:36:32.350
And thanks, everyone.

00:36:32.350 --> 00:36:33.780
Have a great weekend.

00:36:33.780 --> 00:36:35.150
DAN RUBEL: And thank you,
Seth, for coordinating.

00:36:35.150 --> 00:36:36.102
PHIL QUITSLUND: Yeah, thanks.

00:36:36.102 --> 00:36:38.680
SETH LADD: My pleasure.

00:36:38.680 --> 00:36:39.930
BRANDON DONNELSON: Awesome.

