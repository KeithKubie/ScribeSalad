WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.380
First thing to notice about JPEG is:

00:00:02.380 --> 00:00:03.800
It's not actually a file format,

00:00:03.800 --> 00:00:05.000
although everyone talks about JPEG files.

00:00:05.740 --> 00:00:07.620
JPEG is actually a compression method

00:00:08.140 --> 00:00:09.940
much like the codec you would use in a video.

00:00:10.340 --> 00:00:11.640
Umm, and

00:00:11.640 --> 00:00:13.640
we actually use the JPEG File Interchange Format,

00:00:13.640 --> 00:00:16.720
or JFIF as the actual wrapper that holds that compress data

00:00:19.300 --> 00:00:20.440
So what happened was

00:00:20.440 --> 00:00:23.760
the Joint Photographic Experts Group, which is what JPEG stands for

00:00:24.000 --> 00:00:28.720
came along and they created this incredibly complex, specification of how you should compress image data.

00:00:29.280 --> 00:00:32.100
Umm, very long, lots of different options

00:00:32.240 --> 00:00:34.660
and what that means, is that basically, in practice

00:00:35.020 --> 00:00:37.500
You couldn't possibly hope to implement all the different options.

00:00:37.500 --> 00:00:41.720
Progressive JPEG, sequential JPEG files, different color spaces

00:00:41.720 --> 00:00:43.140
and so no one did.

00:00:43.140 --> 00:00:45.980
Someone came along, and said how about this JFIF format, and everyone went:

00:00:45.980 --> 00:00:47.080
"Actually, that's much easier"

00:00:47.080 --> 00:00:48.840
and now everyone just uses that.

00:00:48.840 --> 00:00:56.680
And more recently, the Exif format, which has been sort of championed by the photographic industry, camera makers,

00:00:56.680 --> 00:01:01.800
umm, has kind of joined with JFIF, and so you'll either have Exif files of JFIF files.

00:01:02.000 --> 00:01:03.300
Or both in the same file.

00:01:04.180 --> 00:01:05.520
"but they still have the .jpeg-"

00:01:05.520 --> 00:01:06.900
They all have .jpeg,

00:01:06.900 --> 00:01:11.660
and so really, when we're talking about a JPEG file,we're actually talking about a JFIF file most of the time,

00:01:11.660 --> 00:01:13.660
but we just don't make that distinction.

00:01:13.820 --> 00:01:16.180
JPEG compression works in a very clever way.

00:01:16.400 --> 00:01:20.460
So first of all, it depends on the fact that we don't see color quite as well

00:01:21.060 --> 00:01:22.260
as we do grayscale

00:01:22.260 --> 00:01:25.060
which is something we touched upon in our video on the biofilter.

00:01:25.060 --> 00:01:26.880
"Two greens for every blue and red."

00:01:26.880 --> 00:01:30.160
"And that's because our eyes are more sensitive to green than they are to blue and red,"

00:01:30.160 --> 00:01:35.420
It also deals with the fact that we don't see high-frequency changes in image intensity very well either.

00:01:35.420 --> 00:01:37.420
So we can get rid of some of that high-frequency information.

00:01:37.420 --> 00:01:41.580
So bits of image that change intensity very very quickly, we can kind of sorta blur out,

00:01:41.580 --> 00:01:44.260
and those things will go away, we won't really see a difference,

00:01:44.260 --> 00:01:47.120
certainly not if we're not zooming right in looking at individual pixels.

00:01:48.280 --> 00:01:52.500
So, to start with we'll talk just about the color aspects of JPEG.

00:01:52.800 --> 00:01:54.800
I have an an input image here what we want to do

00:01:54.940 --> 00:01:57.400
is try to shrink it down as small as possible, for storage,

00:01:57.400 --> 00:01:59.900
and then be able to extract as much as possible on the way out.

00:02:00.000 --> 00:02:04.400
So what we first do, is we, we, the change the color space.

00:02:04.500 --> 00:02:11.400
We transform it into the Y-cb-cr color space, which is what we spoke about in our little video on color spaces

00:02:11.400 --> 00:02:14.800
What we're trying to do with Y-cb-cr is separate the luminosity of an image

00:02:14.800 --> 00:02:17.800
so the intensity of each pixel, form the actual color.

00:02:17.800 --> 00:02:21.500
After we've converted to Y-cb-cr, we down sample,

00:02:21.500 --> 00:02:24.100
and essentially reduce the amount of color in our image

00:02:24.100 --> 00:02:29.040
and that lets us save quite a lot of space, without actually seeing any difference in  the image quality.

00:02:29.040 --> 00:02:32.880
We then apply a discrete cosine transform,

00:02:32.880 --> 00:02:35.020
which is a fairly a fairly complicated mathematical technique,

00:02:35.080 --> 00:02:38.620
which hopefully I can explain in a slightly, slightly easier to understand way.

00:02:38.620 --> 00:02:42.860
And then we quantize it, which is the actual lossy part of the jpeg compression.

00:02:42.860 --> 00:02:44.860
Then we encode it and that's our file.

00:02:44.860 --> 00:02:45.800
(Brady)What does lossy mean?

00:02:45.900 --> 00:02:48.180
So, some file formats that we encounter

00:02:48.180 --> 00:02:53.480
like, ah, BNP and, um, PNG are losslessly compressed.

00:02:53.480 --> 00:02:57.620
So, um essentially, it's equivalent to put them in a zip file.

00:02:57.620 --> 00:03:00.600
You might use LZX compression or something more complicated

00:03:00.600 --> 00:03:04.220
but, generally speaking, you take the image data. You compress it in such a way that

00:03:04.220 --> 00:03:07.140
when you uncompress it on the other side, it's exactly the same.

00:03:07.180 --> 00:03:11.040
I believe it's, uh, professor rels that did a video on LZX compression.

00:03:11.040 --> 00:03:13.480
In Jpeg, the compression is almost always lossy.

00:03:13.480 --> 00:03:19.260
You aren't guaranteed the same image when you output it as you put in

00:03:19.260 --> 00:03:23.280
However, it will be very very close most of the time

00:03:23.340 --> 00:03:28.860
and the advantage of lossy compression, is you get a huge amount more compression for your money.

00:03:28.860 --> 00:03:32.880
Jpeg allows you to do, basically any color space you want to.

00:03:32.880 --> 00:03:37.400
You could use RGB. You could use YCBCR or you could use CIE.

00:03:37.400 --> 00:03:43.700
and because of the fact that it's totally impractical to program every single possible color space

00:03:43.700 --> 00:03:46.080
in your own Jpeg coder or decoder,

00:03:46.080 --> 00:03:49.260
most people just followed the JFIF standard.

00:03:49.260 --> 00:03:53.520
Which is just YCBCR, very occasionally RGB.

00:03:53.520 --> 00:03:58.200
So, we're going to assume, for the rest of this video, that we're talking about JFIF

00:03:58.200 --> 00:04:00.740
which is essentially, a small subsect of the JPEG standard.

00:04:00.740 --> 00:04:04.620
So, we take our image, which is an RGB

00:04:04.620 --> 00:04:08.880
and we convert it into YCBCR

00:04:08.880 --> 00:04:13.920
And what that does, is it separates out the  luminance and chrominance components.

00:04:13.920 --> 00:04:18.260
And, as we talked about in our other video, luminance represents essentially the brightness of the image

00:04:18.260 --> 00:04:20.360
and it's a greyscale component.

00:04:20.420 --> 00:04:24.300
and the CB and CR represent the blueness and the redness of the image.

00:04:24.300 --> 00:04:28.220
But, both of these values fall, after conversion in JFIF standard,

00:04:28.220 --> 00:04:30.700
fall into the range of 0 to 255.

00:04:30.700 --> 00:04:37.320
So the amount of data that YCBCR holds is exactly the same as the 0 to 255 RGB

00:04:37.320 --> 00:04:42.240
One of the nice things about YCBCR, is that human eye doesnt really see chrominance very well.

00:04:42.240 --> 00:04:46.560
It's certainly a much lower resolution than we see changes in intensity.

00:04:46.560 --> 00:04:54.120
So, just like with TV encoding, we can massively down sample the amount of CB and CR that we see in the image.

00:04:54.120 --> 00:04:58.660
And, most humans, unless your right up to the pixelboard, wont notice a difference.

00:04:58.660 --> 00:05:02.460
So, to use a demonstration: This is a flower picture that I took

00:05:02.460 --> 00:05:08.500
and this picture on the right has had the chromance component down-sampled by a factor of 10 in both directions

00:05:08.500 --> 00:05:09.680
So, 100 overall.

00:05:09.680 --> 00:05:13.140
There's 100 times less color in this picture, than there is in this one.

00:05:13.140 --> 00:05:16.380
And, to my eye, they look almost exactly the same.

00:05:16.380 --> 00:05:19.560
And that's because my eye only sees the grey scale

00:05:19.560 --> 00:05:20.520
and a little bit of color.

00:05:20.520 --> 00:05:22.520
If you zoom in on one of these pixels

00:05:22.520 --> 00:05:25.360
you can see right on the edge of some of these petals

00:05:25.360 --> 00:05:29.060
you can see slight discrepancies, where the color and they grey don't match up.

00:05:29.060 --> 00:05:30.980
but, at a normal level of zoom

00:05:30.980 --> 00:05:32.980
The level of zoom of your computer monitor

00:05:32.980 --> 00:05:34.480
or the screen you're looking at

00:05:34.480 --> 00:05:35.760
or a photograph

00:05:35.760 --> 00:05:37.200
you're never going to see the difference.

00:05:37.200 --> 00:05:39.360
And we've managed to save a huge amount of space

00:05:39.360 --> 00:05:41.820
by getting rid of a huge amount of color information.

00:05:41.820 --> 00:05:46.740
Once we decide to transform to YCBCR we have to decide how much down-sampling we can get away with.

00:05:46.740 --> 00:05:51.560
In general, it's very comon to down-sample the color by a factor of 2 in both directions.

00:05:51.560 --> 00:05:54.100
So essentially, you have 4 times less color.

00:05:54.100 --> 00:05:58.620
For every 4 Y pixels, you only have 1 CBCR pixel.

00:05:58.620 --> 00:06:04.500
You might also down-sample by a factor of 2 only in the vertical direction and keep the horizontal.

00:06:04.500 --> 00:06:06.640
Depending on how much space you want to save.

00:06:06.640 --> 00:06:11.340
In general, down-sampling by that much, you wont see much of a change in the image.

00:06:11.340 --> 00:06:13.340
So, you can get away with quite a lot.

00:06:13.340 --> 00:06:17.540
So, down-sampling is sometimes tied to the quality of the JPG that you output.

00:06:17.540 --> 00:06:21.660
So, in some software you will say, I want it a quality of 85

00:06:21.660 --> 00:06:24.340
and it will decide how much down-sampling that is

00:06:24.340 --> 00:06:28.480
and how much of a compression it does later on in the stages.

00:06:28.480 --> 00:06:33.860
In general, most software will use a down-sample of two in both directions.

00:06:33.860 --> 00:06:35.860
So, four times less color.

00:06:35.860 --> 00:06:37.860
But, you might find, if you choose the highest quality,

00:06:37.860 --> 00:06:39.860
in a software, such as photoshop,

00:06:39.860 --> 00:06:44.260
it won't down-sample at all and it will have they same resolution of color to grey-scale.

00:06:44.260 --> 00:06:47.820
So, once we take an RGB image, we've converted it into YCBCR

00:06:47.820 --> 00:06:52.200
and we've done whatever down-sampling we think is necessary, or that we can get away with

00:06:52.200 --> 00:06:57.080
That's when we pass this information onto the DCT, the Discrete Cosine Transform

00:06:57.080 --> 00:07:00.360
Which is right at the core of how JPEG compression works.

00:07:00.360 --> 00:07:02.360
But that's for another video.

00:07:02.360 --> 00:07:04.360
subtitled by a terry

