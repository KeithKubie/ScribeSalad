WEBVTT
Kind: captions
Language: en

00:00:06.550 --> 00:00:08.660
LEON NICHOLLS: Hi, my
name is Leon Nicholls.

00:00:08.660 --> 00:00:11.610
I'm a Developer Advocate
for Google Cast.

00:00:11.610 --> 00:00:16.000
I'm here to tell you about the
Google Cast SDK for Android.

00:00:16.000 --> 00:00:18.730
The Google Cast SDK
supports Android, iOS,

00:00:18.730 --> 00:00:21.080
and desktop Chrome platforms.

00:00:21.080 --> 00:00:22.970
Apps developed for
these platforms can all

00:00:22.970 --> 00:00:27.590
interact with any Google Cast
device, such as Chromecast.

00:00:27.590 --> 00:00:29.590
The Google Cast
sender application

00:00:29.590 --> 00:00:32.940
refers to an app running on
a mobile device or laptop,

00:00:32.940 --> 00:00:36.500
and the receiver application
refers to an HTML application

00:00:36.500 --> 00:00:42.050
running on Chromecast or other
Google Cast receiver devices.

00:00:42.050 --> 00:00:44.250
The release of the
Google Cast SDK

00:00:44.250 --> 00:00:48.180
is the public API for
developers of Cast applications.

00:00:48.180 --> 00:00:50.650
From now on, developers
are in control

00:00:50.650 --> 00:00:54.690
of releasing the Cast apps by
using the new Google Cast SDK

00:00:54.690 --> 00:00:56.780
developer console.

00:00:56.780 --> 00:00:59.250
The Google Cast SDK is now a
part of Android's Google Play

00:00:59.250 --> 00:01:04.739
services, and will be
shared across all Cast apps.

00:01:04.739 --> 00:01:08.220
Let's take a look at the typical
life cycle of a Cast sender

00:01:08.220 --> 00:01:09.730
app.

00:01:09.730 --> 00:01:12.340
When the sender app is
launched, Cast devices

00:01:12.340 --> 00:01:15.530
need to be discovered
on the local network.

00:01:15.530 --> 00:01:18.520
Once the user selects a
device, the sender app

00:01:18.520 --> 00:01:22.760
will connect to that device
and launch the receiver app.

00:01:22.760 --> 00:01:25.070
The sender app then
creates a message channel

00:01:25.070 --> 00:01:29.510
to the receiver app to
send and receive messages.

00:01:29.510 --> 00:01:34.000
The user can also
disconnect from that device.

00:01:34.000 --> 00:01:36.510
The first step in
supporting Cast in an app

00:01:36.510 --> 00:01:38.580
is to add the Cast button.

00:01:38.580 --> 00:01:42.940
There are three choices-- the
MediaRouter ActionBar provider,

00:01:42.940 --> 00:01:46.310
the MediaRouter button,
or a custom button.

00:01:46.310 --> 00:01:51.400
We recommend the provider since
that's the easiest integration.

00:01:51.400 --> 00:01:54.290
The Cast button has to be added
to the menu for the ActionBar,

00:01:54.290 --> 00:01:57.940
or to the activity
layout resource file.

00:01:57.940 --> 00:02:00.950
The advantage to create a
MediaRouter selector, which

00:02:00.950 --> 00:02:03.520
will fall to devices
to discover only

00:02:03.520 --> 00:02:06.710
Cast devices that
can run your app.

00:02:06.710 --> 00:02:08.699
The selector is attached
to the Cast button

00:02:08.699 --> 00:02:11.140
when the activity starts.

00:02:11.140 --> 00:02:13.490
Here is an example
of how easy it

00:02:13.490 --> 00:02:15.810
is to add a Cast
button to the ActionBar

00:02:15.810 --> 00:02:18.930
[? compat ?] using the
MediaRouter ActionBar provider

00:02:18.930 --> 00:02:21.340
in your menu XML.

00:02:21.340 --> 00:02:23.620
Other ways of integrating
the Cast button

00:02:23.620 --> 00:02:28.350
is documented by the
MediaRouter support library.

00:02:28.350 --> 00:02:31.060
The sender app also has to
tell the MediaRouter to start

00:02:31.060 --> 00:02:33.430
discovery of Cast
devices by adding

00:02:33.430 --> 00:02:36.630
a callback when the
activity starts.

00:02:36.630 --> 00:02:38.660
The app will be informed
by the MediaRouter

00:02:38.660 --> 00:02:42.600
when the user has selected
a device from the Cast menu.

00:02:42.600 --> 00:02:45.580
As a best practice,
remove the callback

00:02:45.580 --> 00:02:47.560
when discovery is
no longer needed,

00:02:47.560 --> 00:02:51.360
to conserve battery usage.

00:02:51.360 --> 00:02:54.930
Here's an example of how to add
a callback to the MediaRouter

00:02:54.930 --> 00:02:57.820
to start device discovery.

00:02:57.820 --> 00:02:59.650
The device the user
has selected is

00:02:59.650 --> 00:03:04.230
extracted from
the callback data.

00:03:04.230 --> 00:03:06.240
Now that the sender
app knows which

00:03:06.240 --> 00:03:08.630
Cast device the
user has selected,

00:03:08.630 --> 00:03:12.250
launching the receiver
app involves a few steps.

00:03:12.250 --> 00:03:15.480
The sender app needs to connect
to Google Play Services using

00:03:15.480 --> 00:03:18.450
the GoogleAPIClient Cast.

00:03:18.450 --> 00:03:20.850
Then the app uses
the Cast.CastAPI

00:03:20.850 --> 00:03:24.970
Cast to launch the receiver
app using the app ID obtained

00:03:24.970 --> 00:03:27.560
from the Developer Console.

00:03:27.560 --> 00:03:29.930
Once the receiver
app has launched,

00:03:29.930 --> 00:03:33.760
the sender can create a media
message channel or a custom

00:03:33.760 --> 00:03:36.530
message channel to the receiver.

00:03:36.530 --> 00:03:38.910
The app has to handle
various callbacks

00:03:38.910 --> 00:03:43.140
about the application
and the channel status.

00:03:43.140 --> 00:03:45.390
Here's an example of how
to launch the receiver

00:03:45.390 --> 00:03:48.460
app once the sender app has
connected to Google Play

00:03:48.460 --> 00:03:50.230
services.

00:03:50.230 --> 00:03:52.930
The result callback is
invoked with the launch status

00:03:52.930 --> 00:03:55.650
and the application metadata.

00:03:55.650 --> 00:03:57.920
Note the same asynchronous
callback model

00:03:57.920 --> 00:04:03.240
is used throughout the
life cycle of a Cast app.

00:04:03.240 --> 00:04:05.580
To play media on the
receiver, the sender app

00:04:05.580 --> 00:04:07.660
has to create a
MediaInfo instance

00:04:07.660 --> 00:04:11.210
with the URL of
the media stream.

00:04:11.210 --> 00:04:12.880
The RemoteMediaPlayer
Cast is then

00:04:12.880 --> 00:04:16.880
used to load that media
stream on the receiver.

00:04:16.880 --> 00:04:20.360
The sender app then accepts
commands such as play and pause

00:04:20.360 --> 00:04:23.140
using the RemoteMediaPlayer.

00:04:23.140 --> 00:04:26.000
The sender app has to handle
callbacks about the media

00:04:26.000 --> 00:04:29.730
status during playback.

00:04:29.730 --> 00:04:32.090
Finally, let's take
a look at an example

00:04:32.090 --> 00:04:36.510
of how to create a MediaInfo
instance for a video stream.

00:04:36.510 --> 00:04:39.390
The video stream is loaded
on the receiver using

00:04:39.390 --> 00:04:42.180
the RemoteMediaPlayer instance.

00:04:42.180 --> 00:04:47.700
The ResultCallback is invoked
with the load command status.

00:04:47.700 --> 00:04:50.490
You can get more details
about the Google Cast SDK

00:04:50.490 --> 00:04:54.530
at developers.google.com/cast.

00:04:54.530 --> 00:04:57.440
It's also important to take
a look at the Cast Design

00:04:57.440 --> 00:05:01.750
Checklist, which has design
implications for your app.

00:05:01.750 --> 00:05:04.640
We've also opened
source sample Cast apps

00:05:04.640 --> 00:05:07.160
that you can use as a reference.

00:05:07.160 --> 00:05:09.270
If you have any
developer questions,

00:05:09.270 --> 00:05:12.740
post those on Stack Overflow.

00:05:12.740 --> 00:05:16.970
Join our Google Cast Developers
Community on Google+.

00:05:16.970 --> 00:05:18.740
Happy Casting.

