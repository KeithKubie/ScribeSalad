WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:02.810
The reason for Mach's expensive border

00:00:02.810 --> 00:00:06.900
crossing, is it's focused on portability. What

00:00:06.900 --> 00:00:09.070
that means is that, the Mach

00:00:09.070 --> 00:00:13.300
microkernel is architecture independent to allow that

00:00:13.300 --> 00:00:16.320
Mach microkernel to run on several

00:00:16.320 --> 00:00:19.780
different processor architectures. What that means is

00:00:19.780 --> 00:00:25.490
that there's going to be a code bloat in the Mach microkernel because it has

00:00:25.490 --> 00:00:32.369
to have the personality for any architecture that it may need to run on.

00:00:32.369 --> 00:00:34.670
In particular, in the Mach microkernel, there

00:00:34.670 --> 00:00:38.540
is an architecture independent part of the microkernel,

00:00:38.540 --> 00:00:42.140
an architecture specific part of the microkernel.

00:00:42.140 --> 00:00:45.150
The two together results in a significant code

00:00:45.150 --> 00:00:47.460
bloat, which means it has a large

00:00:47.460 --> 00:00:51.430
memory footprint. Which means, it has lesser locality.

00:00:51.430 --> 00:00:53.360
Which means, you're going to have more cache

00:00:53.360 --> 00:00:57.020
misses and pollution of the cache. And that

00:00:57.020 --> 00:00:59.180
is the reason why you have a longer

00:00:59.180 --> 00:01:02.880
latency for border crossing in Mach, as opposed

00:01:02.880 --> 00:01:07.350
to the theoretically smallest number of processor cycles

00:01:07.350 --> 00:01:09.325
in order to go from user space to

00:01:09.325 --> 00:01:12.094
kernel space. As I mentioned earlier, LeKay did

00:01:12.094 --> 00:01:17.190
back-of-the-envelop calculation on the same processor hardware and

00:01:17.190 --> 00:01:20.090
said that it should take about 107 cycles

00:01:20.090 --> 00:01:22.840
to go from user space to kernel space. And

00:01:22.840 --> 00:01:26.470
then he implemented L3 microkernel and showed that it

00:01:26.470 --> 00:01:29.550
took only 123 processor cycles to do that. And

00:01:29.550 --> 00:01:32.470
the reason for Mach's expensive border crossing is

00:01:32.470 --> 00:01:34.630
all due to the fact that there is code

00:01:34.630 --> 00:01:39.110
bloat, resulting in more cache misses and therefore incurring

00:01:39.110 --> 00:01:42.330
longer latency for border crossing. So in other words,

00:01:42.330 --> 00:01:45.160
Mach kernel's memory footprint is the

00:01:45.160 --> 00:01:49.100
culprit for the expensive border crossing. It

00:01:49.100 --> 00:01:51.770
is not the philosophy, or the

00:01:51.770 --> 00:01:55.040
principle, of microkernel based operating system design,

00:01:55.040 --> 00:02:01.010
because by proof of construction, L3 has shown that you can have very

00:02:01.010 --> 00:02:04.840
minimal border crossing overhead by careful construction.

00:02:05.890 --> 00:02:07.820
Another way of saying it is that

00:02:07.820 --> 00:02:13.580
portability, which was one of the main concerns in Mach design, and

00:02:13.580 --> 00:02:18.660
performance, are at loggerheads with each other. So if you focus on portability,

00:02:18.660 --> 00:02:22.740
you may sacrifice performance, and that's what we saw when we look at

00:02:22.740 --> 00:02:25.405
the difference between Mach's performance and

00:02:25.405 --> 00:02:28.320
L3's performance on the same processing hardware.

