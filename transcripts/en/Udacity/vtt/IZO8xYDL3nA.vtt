WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So all the examples we've seen so far,

00:00:02.000 --> 00:00:05.000
all of the elements in the list had the same type.

00:00:05.000 --> 00:00:07.000
We had a list where all the elements were strings.

00:00:07.000 --> 00:00:10.000
We had a list where all the elements were numbers.

00:00:10.000 --> 00:00:12.000
There's no restriction on lists, though.

00:00:12.000 --> 00:00:14.000
We can make all of the elements any type we want.

00:00:14.000 --> 00:00:16.000
We can mix and match different things in 1 list,

00:00:16.000 --> 00:00:20.000
so here's an example.

00:00:20.000 --> 00:00:23.000
We've put some strings and some numbers together in 1 list.

00:00:23.000 --> 00:00:25.000
That's perfectly okay.

00:00:25.000 --> 00:00:28.000
Where it gets even more interesting is we can have a list inside a list.

00:00:28.000 --> 00:00:32.000
Now one of the elements of "mixed up" is itself a list,

00:00:32.000 --> 00:00:34.000
and we can have another list inside that.

00:00:34.000 --> 00:00:38.000
Here we've defined a new variable, mixed up.

00:00:38.000 --> 00:00:41.000
It contains a string, a number, a string, a number,

00:00:41.000 --> 00:00:43.000
and then a list.

00:00:43.000 --> 00:00:47.000
The fifth element is itself a list that contains

00:00:47.000 --> 00:00:50.000
a number, a number, and contains another list.

00:00:50.000 --> 00:00:53.000
This example shows the versatility of lists,

00:00:53.000 --> 00:00:55.000
that we can put anything we want in them.

00:00:55.000 --> 00:00:57.000
It doesn't seem particularly useful

00:00:57.000 --> 00:01:00.000
because there's no structure to the things we've put in the list.

00:01:00.000 --> 00:01:03.000
So let's try another example that may give a better idea

00:01:03.000 --> 00:01:07.000
of why it's so useful to be able to have lists inside lists.

00:01:07.000 --> 00:01:11.000
Before we defined the variable "beatles" as a list of 4 strings,

00:01:11.000 --> 00:01:14.000
just the names of the Beatles.

00:01:14.000 --> 00:01:17.000
Now we've defined the variable beatles as a list of lists

00:01:17.000 --> 00:01:20.000
where each element of the list is a list

00:01:20.000 --> 00:01:24.000
of the name of the person as well as the date when he was born.

00:01:24.000 --> 00:01:27.000
We have the first element in our list as John,

00:01:27.000 --> 00:01:29.000
who was born in 1940.

00:01:29.000 --> 00:01:32.000
Let's see how that works in the Python interpreter.

00:01:32.000 --> 00:01:35.000
When we start to have long lists, especially lists of lists like this,

00:01:35.000 --> 00:01:37.000
they might not all fit on 1 line.

00:01:37.000 --> 00:01:39.000
It's okay to divide things into 2 lines,

00:01:39.000 --> 00:01:41.000
but we have to be a little careful where we do the division

00:01:41.000 --> 00:01:43.000
to make it clear to the Python interpreter

00:01:43.000 --> 00:01:46.000
that it's all part of 1 list.

00:01:46.000 --> 00:01:49.000
The place where you want to do the separation is after a comma,

00:01:49.000 --> 00:01:53.000
and if you indent things in a way that makes that clear,

00:01:53.000 --> 00:01:55.000
then you can see the structure, that these 2 lines

00:01:55.000 --> 00:02:00.000
are still part of the same list, and it's the closed bracket here

00:02:00.000 --> 00:02:02.000
that closes the list.

00:02:02.000 --> 00:02:06.000
Now let's try printing that out,

00:02:06.000 --> 00:02:09.000
and we see the list containing 4 elements.

00:02:09.000 --> 00:02:13.000
Each element itself is a list containing 2 elements.

00:02:13.000 --> 00:02:15.000
We can print just 1 of the elements.

00:02:15.000 --> 00:02:17.000
We'll print the element at position 3,

00:02:17.000 --> 00:02:20.000
which is actually the fourth element of the list.

00:02:20.000 --> 00:02:22.000
We see that element itself is a pair.

00:02:22.000 --> 00:02:24.000
That's a list.

00:02:24.000 --> 00:02:26.000
So if we want to get just the name from that, well,

00:02:26.000 --> 00:02:30.000
then we need to use index again, so we can use index again

00:02:30.000 --> 00:02:33.000
to get the 0 position element of that list,

00:02:33.000 --> 00:02:36.000
and that will give us just the name.

00:02:36.000 --> 00:02:40.000
If we used index 1 here,

00:02:40.000 --> 00:02:43.000
that will give us the year.

