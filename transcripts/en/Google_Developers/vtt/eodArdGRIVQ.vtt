WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.430
[MUSIC PLAYING]

00:00:08.830 --> 00:00:11.850
SAM DUTTON: Hello,
and welcome to Krakow.

00:00:11.850 --> 00:00:14.020
And for those of
you from Krakow,

00:00:14.020 --> 00:00:18.820
thank you for welcoming
us to your beautiful city.

00:00:18.820 --> 00:00:20.920
Here is actually a
photograph from the last time

00:00:20.920 --> 00:00:22.870
I was in Krakow, when
the temperature was

00:00:22.870 --> 00:00:26.020
like minus 20 degrees Celsius.

00:00:26.020 --> 00:00:30.670
So I've been really happy to
see some sunshine in Krakow.

00:00:30.670 --> 00:00:33.800
Anyway, my name is Sam Dutton.

00:00:33.800 --> 00:00:36.770
I'm a Developer
Advocate for the Web.

00:00:36.770 --> 00:00:39.310
Worked for Google
based in London.

00:00:39.310 --> 00:00:43.660
I'm here today and tomorrow
with a bunch of other Googlers,

00:00:43.660 --> 00:00:46.840
like people working on Chrome
and some really brilliant web

00:00:46.840 --> 00:00:48.182
developers.

00:00:48.182 --> 00:00:50.140
So please, if you have
questions, come and chat

00:00:50.140 --> 00:00:51.100
to us in the web area.

00:00:51.100 --> 00:00:54.220
Come and check out Lighthouse
and all the other stuff

00:00:54.220 --> 00:00:56.410
that we've got.

00:00:56.410 --> 00:00:58.630
I wanted to cover
some of the stuff

00:00:58.630 --> 00:01:00.940
from the keynote in
a little more detail

00:01:00.940 --> 00:01:04.810
and really give an
overview of the web today.

00:01:04.810 --> 00:01:07.360
I want to give a high-level
overview, but also some

00:01:07.360 --> 00:01:10.180
of the business reasons
why I think it makes sense

00:01:10.180 --> 00:01:12.742
to build progressive web apps.

00:01:12.742 --> 00:01:14.200
So we're going to
go into that now.

00:01:14.200 --> 00:01:16.990
And there will be sessions
later with more technical detail

00:01:16.990 --> 00:01:19.480
about building for the web.

00:01:19.480 --> 00:01:25.060
So like you heard earlier,
in a word, the web is big.

00:01:25.060 --> 00:01:29.320
There are now over 5
billion devices out there

00:01:29.320 --> 00:01:31.380
that can access web content.

00:01:31.380 --> 00:01:32.740
That is incredible, I think.

00:01:32.740 --> 00:01:36.420
You get this instant
broad reach with the web.

00:01:36.420 --> 00:01:39.340
And this didn't happen
because of luck.

00:01:39.340 --> 00:01:43.360
Yeah, the web is this open,
decentralized platform.

00:01:43.360 --> 00:01:46.450
There are no gatekeepers.

00:01:46.450 --> 00:01:49.180
Websites get massive reach.

00:01:49.180 --> 00:01:53.380
Users get low friction,
which is great.

00:01:53.380 --> 00:01:56.050
And I think we've all
seen charts like this.

00:01:56.050 --> 00:02:00.670
Mobile computing is at the
heart of this revolution.

00:02:00.670 --> 00:02:04.170
There's been this explosion
of computing on mobile.

00:02:04.170 --> 00:02:07.360
And you know, we now
use more mobile devices

00:02:07.360 --> 00:02:09.500
than desktop
computers, and so on.

00:02:09.500 --> 00:02:13.360
And this is a really interesting
challenge for developers.

00:02:13.360 --> 00:02:14.830
We've also reached
this point now--

00:02:14.830 --> 00:02:18.310
I've particularly noticed
this in some regions--

00:02:18.310 --> 00:02:20.770
where a lot of
users coming online

00:02:20.770 --> 00:02:23.000
are actually mobile-only.

00:02:23.000 --> 00:02:26.300
They never use a desktop
or a laptop device.

00:02:26.300 --> 00:02:28.510
And again, this is a really
interesting challenge

00:02:28.510 --> 00:02:29.890
for the web.

00:02:29.890 --> 00:02:33.850
Of course, on mobile,
most users spend

00:02:33.850 --> 00:02:38.080
most of their time in native
apps rather than the web.

00:02:38.080 --> 00:02:40.560
Apps seem to be
more predictable.

00:02:40.560 --> 00:02:44.620
They have great
re-engagement features.

00:02:44.620 --> 00:02:46.090
All this good stuff
in native apps.

00:02:46.090 --> 00:02:49.540
You think, well, I could cut
my presentation short right now

00:02:49.540 --> 00:02:52.330
and say, well, go
and build native.

00:02:52.330 --> 00:02:54.460
We could all go home.

00:02:54.460 --> 00:02:56.950
There is a flip side
to this, though.

00:02:56.950 --> 00:03:00.190
And I'm sure you understand
this, particularly

00:03:00.190 --> 00:03:02.320
app developers in
the audience here.

00:03:02.320 --> 00:03:04.690
App usage is highly
concentrated.

00:03:04.690 --> 00:03:07.660
Users tend to only
use a few apps.

00:03:07.660 --> 00:03:12.370
They see native apps as a big
commitment to device space

00:03:12.370 --> 00:03:14.200
and time and cost.

00:03:14.200 --> 00:03:17.470
Native apps are
engaging, but only a few

00:03:17.470 --> 00:03:19.140
are worth installing.

00:03:19.140 --> 00:03:22.990
Now, based on a recent study,
something like the average user

00:03:22.990 --> 00:03:27.220
is installing like
zero apps per month.

00:03:27.220 --> 00:03:30.760
This certainly does not
mean that users are not

00:03:30.760 --> 00:03:32.410
using native apps.

00:03:32.410 --> 00:03:35.440
But by contrast
from our own data,

00:03:35.440 --> 00:03:37.660
something like the
average mobile user

00:03:37.660 --> 00:03:41.920
visits around 100
sites per month.

00:03:41.920 --> 00:03:47.030
This is the power of URLs and
the ephemerality of the web,

00:03:47.030 --> 00:03:50.555
particularly to
meet one-off needs.

00:03:50.555 --> 00:03:52.930
I think one way to think of
the difference between native

00:03:52.930 --> 00:03:56.710
and web apps is on
the capability access.

00:03:56.710 --> 00:04:01.580
Native apps start up quickly and
reliably when you tap the icon.

00:04:01.580 --> 00:04:05.080
They tend to work offline.

00:04:05.080 --> 00:04:07.450
When do you ever
open a web browser

00:04:07.450 --> 00:04:09.700
when you know you're offline?

00:04:09.700 --> 00:04:12.100
That's just not what people do.

00:04:12.100 --> 00:04:15.490
Native apps can use
push notifications, sync

00:04:15.490 --> 00:04:16.779
in the background, and so on.

00:04:16.779 --> 00:04:19.810
And they've had access for
some time to device sensors,

00:04:19.810 --> 00:04:23.410
like microphones,
cameras, and so on.

00:04:23.410 --> 00:04:26.380
By contrast, the web
has been seen to be--

00:04:26.380 --> 00:04:29.890
I don't know, like safer, more
respectful of privacy, maybe,

00:04:29.890 --> 00:04:34.360
but it hasn't had
those capabilities.

00:04:34.360 --> 00:04:37.840
I think, what if we could
add those capabilities

00:04:37.840 --> 00:04:40.420
so the web could
get that engagement

00:04:40.420 --> 00:04:43.540
and meet those UX expectations?

00:04:43.540 --> 00:04:46.330
We could have the
best of both worlds.

00:04:46.330 --> 00:04:51.430
And this is what progressive
web apps represent.

00:04:51.430 --> 00:04:54.460
A user experience that's good
enough, like integrated enough,

00:04:54.460 --> 00:04:57.790
so it can actually earn a
place on the Home screen

00:04:57.790 --> 00:05:00.430
and the notification tray
without having to give up

00:05:00.430 --> 00:05:02.990
that reach to get that.

00:05:02.990 --> 00:05:04.310
This is really the core point.

00:05:04.310 --> 00:05:09.310
Progressive web apps is really
just a term for radically

00:05:09.310 --> 00:05:12.800
improving the quality of the
end-to-end user experience.

00:05:12.800 --> 00:05:14.950
We want to learn
from native apps.

00:05:14.950 --> 00:05:17.620
We want to take what's
best from native apps

00:05:17.620 --> 00:05:19.510
and bring that to the web.

00:05:19.510 --> 00:05:22.540
And this requires being
really honest about what

00:05:22.540 --> 00:05:24.814
matters to users.

00:05:24.814 --> 00:05:26.230
So in order to do
that, I think we

00:05:26.230 --> 00:05:27.820
need to focus on four things.

00:05:27.820 --> 00:05:29.500
We need to make the web fast.

00:05:29.500 --> 00:05:32.620
We need to make web
experiences better integrated

00:05:32.620 --> 00:05:36.100
with device hardware
platforms and other apps.

00:05:36.100 --> 00:05:39.550
And we need to make sure that
web experiences are reliable.

00:05:39.550 --> 00:05:41.615
And we need to
keep users engaged.

00:05:41.615 --> 00:05:43.990
So I want to look at each of
those properties in a little

00:05:43.990 --> 00:05:45.490
more detail.

00:05:45.490 --> 00:05:47.610
Now, from a really
good native app,

00:05:47.610 --> 00:05:51.640
users do not expect janky
scrolling or slow load

00:05:51.640 --> 00:05:52.750
performance.

00:05:52.750 --> 00:05:56.650
And you know, the web has had a
bad name for slow performance,

00:05:56.650 --> 00:05:57.160
I think.

00:05:57.160 --> 00:05:58.285
Particularly on mobile.

00:05:58.285 --> 00:06:01.990
And by performance, I
mean in-page performance

00:06:01.990 --> 00:06:05.830
scrolling and so on, as
well as load performance.

00:06:05.830 --> 00:06:10.960
And in a sense, an app has
to be kind of invisible.

00:06:10.960 --> 00:06:13.450
Users should not be aware
that they're actually

00:06:13.450 --> 00:06:14.410
loading an app.

00:06:14.410 --> 00:06:15.830
It should just work.

00:06:15.830 --> 00:06:17.440
And we want to see
that on the web.

00:06:17.440 --> 00:06:20.230
And this isn't just a
kind of abstract goal.

00:06:20.230 --> 00:06:23.590
We all know that time
is money on the web.

00:06:23.590 --> 00:06:28.300
This data from SOASTA shows
just how much that is true.

00:06:28.300 --> 00:06:30.850
After only like a little
more than 3 seconds,

00:06:30.850 --> 00:06:36.400
something like 20% of your users
will abandon the experience.

00:06:36.400 --> 00:06:41.050
And you know, there's evidence
that users are getting

00:06:41.050 --> 00:06:42.430
shorter attention spans.

00:06:42.430 --> 00:06:44.590
That this is getting
tighter every year.

00:06:47.452 --> 00:06:48.660
So a couple of other numbers.

00:06:48.660 --> 00:06:53.640
It takes the average web
page on mobile 19 seconds

00:06:53.640 --> 00:06:55.650
to load on a 3G connection.

00:06:55.650 --> 00:06:58.830
You know, that's really
bad for everyone.

00:06:58.830 --> 00:07:01.500
For every 1-second
delay the page loads,

00:07:01.500 --> 00:07:04.410
we calculate that
sites lose something

00:07:04.410 --> 00:07:06.810
like 7% of conversions.

00:07:06.810 --> 00:07:09.600
That's really bad for business.

00:07:09.600 --> 00:07:12.450
You know, we really
need to fix this.

00:07:12.450 --> 00:07:14.880
I think one of the
side effects, thinking

00:07:14.880 --> 00:07:18.240
about this on the web
of the reach of the web,

00:07:18.240 --> 00:07:22.020
is that you do not have
control where users start

00:07:22.020 --> 00:07:24.750
in your experience, like
which page they hit first

00:07:24.750 --> 00:07:25.830
on your site.

00:07:25.830 --> 00:07:28.710
You can't dictate like
you can with a native app

00:07:28.710 --> 00:07:30.660
where users start.

00:07:30.660 --> 00:07:32.700
So we've been
working to make sure

00:07:32.700 --> 00:07:36.730
that wherever someone
starts, they start fast.

00:07:36.730 --> 00:07:40.620
Pages need to be reliable
and fast from the first time

00:07:40.620 --> 00:07:42.450
that users load them.

00:07:42.450 --> 00:07:46.050
And to fix this, last year we
started working on a project

00:07:46.050 --> 00:07:49.650
Accelerated Mobile
Pages, known as AMP.

00:07:49.650 --> 00:07:54.570
This is an open source project
to create super-fast web pages.

00:07:54.570 --> 00:07:57.330
We all know that accessing
pages on the mobile web

00:07:57.330 --> 00:07:58.680
can be painful.

00:07:58.680 --> 00:08:03.930
And AMP is a framework to ensure
that content loads reliably.

00:08:03.930 --> 00:08:06.540
We've been able to prove
this over the last year.

00:08:06.540 --> 00:08:09.650
AMP pages load, on average,
in less than a second.

00:08:09.650 --> 00:08:11.160
On average, they use less--

00:08:11.160 --> 00:08:15.480
like 10% less data than
compared to non-AMP pages.

00:08:15.480 --> 00:08:17.310
This is particularly
important for users

00:08:17.310 --> 00:08:21.300
where data is expensive, where
people are really constrained

00:08:21.300 --> 00:08:23.160
by their use of data.

00:08:23.160 --> 00:08:24.630
A good example of this.

00:08:24.630 --> 00:08:26.630
Doing great work, actually,
the Weather Channel.

00:08:26.630 --> 00:08:29.490
They've seen like a four times
increase in click-through

00:08:29.490 --> 00:08:30.240
rates--

00:08:30.240 --> 00:08:32.250
it's fantastic-- on
their AMP articles

00:08:32.250 --> 00:08:34.500
and into their main site.

00:08:34.500 --> 00:08:38.110
That's up from something like
21% to 90% click-through rates,

00:08:38.110 --> 00:08:41.500
which is great since launching
the beginning of this year.

00:08:41.500 --> 00:08:44.490
So instant access to
information is really valuable,

00:08:44.490 --> 00:08:48.060
like this example of
these giant hailstones.

00:08:48.060 --> 00:08:49.980
Weather.com, they get that.

00:08:49.980 --> 00:08:54.720
And I think AMP is really
paying off for them.

00:08:54.720 --> 00:08:57.450
Now, AMP was originally
focused on publishers

00:08:57.450 --> 00:08:58.740
and static content.

00:08:58.740 --> 00:09:01.210
The format has been
constantly evolving

00:09:01.210 --> 00:09:03.405
to support really
critical new features

00:09:03.405 --> 00:09:07.140
and verticals like e-commerce.

00:09:07.140 --> 00:09:09.780
Merchants can now use
AMP to build really

00:09:09.780 --> 00:09:12.930
interactive and engaging pages.

00:09:12.930 --> 00:09:18.850
And a lot of e-commerce partners
have really started to do that.

00:09:18.850 --> 00:09:21.720
Last summer, eBay
launched all their product

00:09:21.720 --> 00:09:23.130
listing pages on AMP.

00:09:23.130 --> 00:09:28.120
Over 15 million pages reliably
load in less than a second.

00:09:28.120 --> 00:09:31.640
And now, they're launching
product pages worldwide on AMP.

00:09:31.640 --> 00:09:33.660
And that means that users
can go from searching

00:09:33.660 --> 00:09:35.460
on Google to actually
buying something

00:09:35.460 --> 00:09:39.260
on eBay in milliseconds.

00:09:39.260 --> 00:09:41.160
So in total for
AMP since launch,

00:09:41.160 --> 00:09:46.770
there have been over 2 billion
AMP pages, 900,000 domains.

00:09:46.770 --> 00:09:50.160
And yeah, every
second, 58 AMP pages

00:09:50.160 --> 00:09:51.900
are released into the wild.

00:09:51.900 --> 00:09:53.710
That's incredible.

00:09:53.710 --> 00:09:55.890
If you want to learn
more about AMP,

00:09:55.890 --> 00:09:59.400
check out Ben Morris'
presentation after lunch today.

00:09:59.400 --> 00:10:02.580
We have an AMP training session
tomorrow afternoon as well.

00:10:02.580 --> 00:10:04.890
As you'll find out, AMP
and progressive web apps,

00:10:04.890 --> 00:10:06.330
they work really well.

00:10:06.330 --> 00:10:08.310
The two attitudes to
building for the web

00:10:08.310 --> 00:10:09.830
work really well together.

00:10:09.830 --> 00:10:12.090
To build sites that,
as the slogan goes,

00:10:12.090 --> 00:10:14.070
to start fast and stay fast.

00:10:16.595 --> 00:10:19.160
So as well as
speed, users expect

00:10:19.160 --> 00:10:22.475
this app-like integration
with their device hardware,

00:10:22.475 --> 00:10:25.550
the operating system,
and other apps.

00:10:25.550 --> 00:10:28.580
You know that feeling when you
use a really great native app?

00:10:28.580 --> 00:10:31.010
You get that tight connection
right from the start.

00:10:31.010 --> 00:10:33.990
You can focus on what
you want to achieve.

00:10:33.990 --> 00:10:37.130
And you kind of forget
that you're using an app.

00:10:37.130 --> 00:10:39.230
I think that users,
they shouldn't

00:10:39.230 --> 00:10:42.500
have to feel like they're
reaching through a browser tab

00:10:42.500 --> 00:10:43.940
in order to access your app.

00:10:43.940 --> 00:10:45.350
In fact, the users
shouldn't have

00:10:45.350 --> 00:10:47.810
to think about the fact
they're on the web.

00:10:47.810 --> 00:10:49.970
They're just using their
phone, or their tablet,

00:10:49.970 --> 00:10:53.690
or desktop to complete
whatever is their task.

00:10:53.690 --> 00:10:55.190
So just one example of this.

00:10:55.190 --> 00:10:56.940
This is like dear to
my heart because I've

00:10:56.940 --> 00:10:58.660
worked on this stuff, is media.

00:10:58.660 --> 00:11:02.630
In the past, it's been
really difficult to get

00:11:02.630 --> 00:11:04.630
media working well on the web.

00:11:04.630 --> 00:11:08.520
People have felt like they had
to consume media in an app.

00:11:08.520 --> 00:11:11.300
This just isn't
the case anymore.

00:11:11.300 --> 00:11:12.920
We worked really
hard across platforms

00:11:12.920 --> 00:11:15.770
to make media more effective.

00:11:15.770 --> 00:11:19.730
And also, just to ensure
that video and audio content

00:11:19.730 --> 00:11:23.070
can be included in the
page and it just works.

00:11:23.070 --> 00:11:25.790
We've got great
new APIs to build

00:11:25.790 --> 00:11:29.900
robust, secure, and
efficient media experiences

00:11:29.900 --> 00:11:32.810
that can even work offline.

00:11:32.810 --> 00:11:36.470
This is a particularly
important problem to solve.

00:11:36.470 --> 00:11:41.780
Over 70% of internet traffic
now is actually video.

00:11:41.780 --> 00:11:43.010
That number is increasing.

00:11:43.010 --> 00:11:43.880
It's incredible.

00:11:46.640 --> 00:11:48.350
All the browsers need
to ensure that we

00:11:48.350 --> 00:11:51.110
can get this really
complete solution

00:11:51.110 --> 00:11:55.800
across different browsers
for the mobile web for media.

00:11:55.800 --> 00:12:01.010
So we have these new APIs
that are improving capability

00:12:01.010 --> 00:12:02.360
for media on the web.

00:12:02.360 --> 00:12:04.160
I would really
recommend checking out--

00:12:04.160 --> 00:12:06.830
this is Paul Lewis's
fantastic progressive web

00:12:06.830 --> 00:12:08.690
app for media publishing.

00:12:08.690 --> 00:12:12.140
It's at bit.ly/pwa-media.

00:12:12.140 --> 00:12:14.390
And it gives you
adaptive streaming,

00:12:14.390 --> 00:12:16.540
pre-caching for faster loads.

00:12:16.540 --> 00:12:21.620
Orientation change gives
you instant full-screen.

00:12:21.620 --> 00:12:24.760
You get custom controls,
thumbnails, and so on.

00:12:24.760 --> 00:12:26.990
And for me, I mean,
this is amazing.

00:12:26.990 --> 00:12:29.386
This is amazing to see
this happening on the web.

00:12:29.386 --> 00:12:30.260
It's a beautiful app.

00:12:30.260 --> 00:12:32.070
I really recommend that.

00:12:32.070 --> 00:12:34.790
So the technology is
opening up the web

00:12:34.790 --> 00:12:38.390
to even more platforms,
even more experiences.

00:12:38.390 --> 00:12:42.470
With the web VR API, we get
this incredible expressive power

00:12:42.470 --> 00:12:43.720
on the web.

00:12:43.720 --> 00:12:45.470
This is enabling
companies like Within

00:12:45.470 --> 00:12:50.240
to bring this really incredible
experiences from VR creators.

00:12:50.240 --> 00:12:54.650
Creators from around the
world directly to the browser.

00:12:54.650 --> 00:12:57.700
Companies like SketchFab
bringing these amazing VR

00:12:57.700 --> 00:12:58.580
scenes.

00:12:58.580 --> 00:13:00.620
I believe they have
like 1.5 million

00:13:00.620 --> 00:13:02.959
of these that you can explore.

00:13:02.959 --> 00:13:05.000
This would look really
wonderful if everyone here

00:13:05.000 --> 00:13:06.815
had a VR headset.

00:13:06.815 --> 00:13:08.540
It would also look a
bit weird, I guess.

00:13:08.540 --> 00:13:11.660
But anyway, you get a
sense of what is possible.

00:13:11.660 --> 00:13:15.110
And looking forward
to the advent of

00:13:15.110 --> 00:13:20.810
augmented reality, this idea
of connecting information data

00:13:20.810 --> 00:13:22.370
with the physical world.

00:13:22.370 --> 00:13:26.450
We think the web is going to
play a pivotal role there as

00:13:26.450 --> 00:13:28.190
well.

00:13:28.190 --> 00:13:29.240
Think about integration.

00:13:29.240 --> 00:13:31.640
I just wanted to touch
on new capabilities

00:13:31.640 --> 00:13:35.480
also for e-commerce.

00:13:35.480 --> 00:13:38.390
Mobile commerce is a huge deal.

00:13:38.390 --> 00:13:40.820
Last year, mobile
commerce was worth--

00:13:40.820 --> 00:13:45.830
just in the US, was worth
something like $123 billion.

00:13:45.830 --> 00:13:48.530
You can imagine what the
figure is for Europe.

00:13:48.530 --> 00:13:52.770
This is, actually, a fundamental
challenge for the web.

00:13:52.770 --> 00:13:57.440
So the web has gone mobile,
but conversions are,

00:13:57.440 --> 00:14:01.410
we calculate, something like
one third lower on mobile

00:14:01.410 --> 00:14:02.580
than desktop.

00:14:02.580 --> 00:14:04.670
And this makes sense.

00:14:04.670 --> 00:14:07.540
It's hard to enter
data on a phone.

00:14:07.540 --> 00:14:09.380
And we need better integration.

00:14:09.380 --> 00:14:14.760
Because e-commerce is really
all about removing friction.

00:14:14.760 --> 00:14:18.422
Browsers have worked to
improve this with Autofill.

00:14:18.422 --> 00:14:19.130
And that's great.

00:14:19.130 --> 00:14:21.990
Today on Chrome, we have
something like 9 billion forms

00:14:21.990 --> 00:14:24.510
and passwords, which are
auto-filled each month.

00:14:24.510 --> 00:14:28.800
This is good, but
it's not enough.

00:14:28.800 --> 00:14:33.780
The Payment Request API goes
a step further than this.

00:14:33.780 --> 00:14:36.810
This is a W3C
standard for browsers

00:14:36.810 --> 00:14:40.410
to present a standardized
interface for users

00:14:40.410 --> 00:14:42.810
to enter payment
and shipping data.

00:14:42.810 --> 00:14:46.620
So the users get a
consistent, secure experience

00:14:46.620 --> 00:14:50.760
and developers don't have to
reinvent the wheel every time.

00:14:50.760 --> 00:14:52.900
And this works from
like a tiny boutique

00:14:52.900 --> 00:14:56.340
right up to some
e-commerce giant.

00:14:56.340 --> 00:14:58.590
Sites can call the
Payment Request API,

00:14:58.590 --> 00:15:00.420
like in the screencast here.

00:15:00.420 --> 00:15:04.980
The browser then securely can
store emails, shipping, credit

00:15:04.980 --> 00:15:07.450
card data on file for the user.

00:15:07.450 --> 00:15:10.710
So the browser can provide
a merchant with all this

00:15:10.710 --> 00:15:16.660
in one form pre-populated,
again, to reduce friction.

00:15:16.660 --> 00:15:20.190
So you can see that
the web has become

00:15:20.190 --> 00:15:23.250
this highly-capable platform.

00:15:23.250 --> 00:15:27.130
It's tightly integrated with
underlying operating system,

00:15:27.130 --> 00:15:29.280
hardware capabilities.

00:15:29.280 --> 00:15:32.650
Users need better
reliability as well.

00:15:32.650 --> 00:15:36.570
At present, users have
not come to expect the web

00:15:36.570 --> 00:15:38.880
to work without a
network connection.

00:15:38.880 --> 00:15:43.110
And most of us don't even
bother to try when connectivity

00:15:43.110 --> 00:15:45.090
is slow or intermittent.

00:15:45.090 --> 00:15:47.310
We really need to
change that perception.

00:15:47.310 --> 00:15:49.350
Web apps must be reliable.

00:15:49.350 --> 00:15:53.350
When a user taps on
a Home screen icon

00:15:53.350 --> 00:15:56.520
they expect it to load
instantly and reliably.

00:15:56.520 --> 00:15:59.520
Launched from the Home screen,
apps should never, ever

00:15:59.520 --> 00:16:01.920
show the downasaur.

00:16:01.920 --> 00:16:04.590
Thinking back to the '90s,
when the web was growing up.

00:16:04.590 --> 00:16:07.770
Does anyone know what
this actually is?

00:16:07.770 --> 00:16:08.430
Maybe not.

00:16:08.430 --> 00:16:10.255
Maybe a few people.

00:16:10.255 --> 00:16:11.630
For those who have
never seen it,

00:16:11.630 --> 00:16:13.410
this was like how we
got online, probably

00:16:13.410 --> 00:16:16.980
from some monolithic desktop
machine somewhere in the house.

00:16:16.980 --> 00:16:19.290
In the basement or
something, with this modem.

00:16:19.290 --> 00:16:22.910
You had to put the whole
house into online mode.

00:16:22.910 --> 00:16:25.467
I remember like back
in the day, 56K to me

00:16:25.467 --> 00:16:27.300
would have been really
exciting because we'd

00:16:27.300 --> 00:16:29.430
grown up on like 14K.

00:16:29.430 --> 00:16:31.620
And you know, what
you had to do was

00:16:31.620 --> 00:16:34.940
like yell to the whole house,
like don't pick up the phone,

00:16:34.940 --> 00:16:37.230
or that would kill the
connection in the middle

00:16:37.230 --> 00:16:38.880
of a download, or whatever.

00:16:38.880 --> 00:16:41.820
And of course, in
those days, we knew

00:16:41.820 --> 00:16:44.790
that we were online because
nothing else was happening.

00:16:44.790 --> 00:16:48.690
Now, we think of the
internet connectivity

00:16:48.690 --> 00:16:51.960
kind of more like a utility,
like gas or electricity.

00:16:51.960 --> 00:16:54.060
Almost like oxygen, you know?

00:16:54.060 --> 00:16:56.490
Users are coming to
expect connectivity

00:16:56.490 --> 00:16:59.960
to be available all the time.

00:16:59.960 --> 00:17:03.030
And we've become used to this.

00:17:03.030 --> 00:17:07.579
And this means that
seeing this downasaur

00:17:07.579 --> 00:17:09.950
is just not an option.

00:17:09.950 --> 00:17:12.920
You imagine if you
went to a native app

00:17:12.920 --> 00:17:16.849
and you got some kind of
system-generated error message

00:17:16.849 --> 00:17:18.640
when the device was offline?

00:17:18.640 --> 00:17:19.849
You'd just think, what?

00:17:19.849 --> 00:17:20.810
This is crazy.

00:17:20.810 --> 00:17:23.157
But we've become used
to this on the web.

00:17:23.157 --> 00:17:24.240
We have to deal with this.

00:17:24.240 --> 00:17:26.450
We have to solve this.

00:17:26.450 --> 00:17:30.320
The other problem is that, as
we know, mobile phones, they're

00:17:30.320 --> 00:17:32.270
not just online or offline.

00:17:32.270 --> 00:17:33.760
It's not a binary state.

00:17:33.760 --> 00:17:36.720
The existence is kind of
Schrodinger's cat state.

00:17:36.720 --> 00:17:37.220
Is it on?

00:17:37.220 --> 00:17:38.590
Is it off?

00:17:38.590 --> 00:17:40.730
We get these problems
with cell connectivity,

00:17:40.730 --> 00:17:43.370
like you've got four bars
here, but it turns out

00:17:43.370 --> 00:17:45.950
you do not have a
working connection.

00:17:45.950 --> 00:17:48.680
So it's not just no connection
that breaks our experience.

00:17:48.680 --> 00:17:51.800
It's slow or intermittent
connections that

00:17:51.800 --> 00:17:55.330
can really be worse for users.

00:17:55.330 --> 00:17:57.580
And like I say,
mobile apps should--

00:17:57.580 --> 00:17:59.990
as much as I love the
cute, little downasaur,

00:17:59.990 --> 00:18:02.350
it should never show him.

00:18:02.350 --> 00:18:05.300
No other app will show this.

00:18:05.300 --> 00:18:08.860
And so in order for web apps
to really earn their place

00:18:08.860 --> 00:18:11.590
on the Home screen, we
need to make them reliable,

00:18:11.590 --> 00:18:14.940
even when the network
is not reliable.

00:18:14.940 --> 00:18:17.080
And this is where
service workers come in.

00:18:17.080 --> 00:18:20.160
I just wanted to ask, who
has heard of service workers

00:18:20.160 --> 00:18:23.170
and feels like they have a
pretty good idea of why they're

00:18:23.170 --> 00:18:24.580
game-changing for the web?

00:18:27.270 --> 00:18:29.710
Oh, that's great, actually.

00:18:29.710 --> 00:18:31.240
That's really good to see.

00:18:31.240 --> 00:18:34.380
For those of you who don't
know about service worker,

00:18:34.380 --> 00:18:37.420
the traditional web model has
been like you type in a URL,

00:18:37.420 --> 00:18:40.570
or you click on a link, or
a bookmark, or whatever.

00:18:40.570 --> 00:18:42.100
And the browser
goes to the network,

00:18:42.100 --> 00:18:45.490
looks up the web server,
and retrieves the resources

00:18:45.490 --> 00:18:48.050
required for a page.

00:18:48.050 --> 00:18:51.850
Now, the browser, of
course, has an HTTP cache.

00:18:51.850 --> 00:18:55.690
But if the network is
down, you get a visit

00:18:55.690 --> 00:18:58.920
from our friend the downasaur.

00:18:58.920 --> 00:19:00.760
And the user
experience, obviously,

00:19:00.760 --> 00:19:04.780
can be even worse with
flaky connectivity.

00:19:04.780 --> 00:19:07.810
So a service worker is
a client-side proxy.

00:19:07.810 --> 00:19:12.840
Acts as an intermediary between
your app and the outside world.

00:19:12.840 --> 00:19:15.340
You write a service worker in
JavaScript in a separate file,

00:19:15.340 --> 00:19:17.230
kind of like a web worker.

00:19:17.230 --> 00:19:21.550
And after the first visit, the
service worker is installed.

00:19:21.550 --> 00:19:24.910
And after that, it can
intercept and respond to events,

00:19:24.910 --> 00:19:27.550
like network requests.

00:19:27.550 --> 00:19:30.970
And the service worker
then can use the cache API

00:19:30.970 --> 00:19:34.210
to cache resources and
work with storage features,

00:19:34.210 --> 00:19:37.600
like IndexedDB for
data, and so on.

00:19:37.600 --> 00:19:40.840
And that enables you, the
developer, the site owner,

00:19:40.840 --> 00:19:44.440
to decide when to use the cache
and when to go to the network.

00:19:44.440 --> 00:19:46.990
This is extremely powerful.

00:19:46.990 --> 00:19:48.730
Like I said, service
workers are acting

00:19:48.730 --> 00:19:51.620
like a proxy between your
app and the outside world.

00:19:51.620 --> 00:19:55.120
Now, this means that they can
also handle incoming events as

00:19:55.120 --> 00:19:58.000
well as outgoing requests.

00:19:58.000 --> 00:20:01.780
Push notifications are
a great example of this.

00:20:01.780 --> 00:20:04.930
Push messages are received
by the operating system

00:20:04.930 --> 00:20:08.990
via whatever push service
it uses, and then passed on

00:20:08.990 --> 00:20:10.510
to the browser.

00:20:10.510 --> 00:20:13.450
The push event from the
browser then wakes up

00:20:13.450 --> 00:20:16.610
the relevant service worker
that subscribed to it,

00:20:16.610 --> 00:20:19.060
and then that can
call a push handler.

00:20:19.060 --> 00:20:22.720
The really nice thing is here
that the browser does not even

00:20:22.720 --> 00:20:24.130
need to be open.

00:20:24.130 --> 00:20:27.750
This is fantastic for
reducing usage of memory,

00:20:27.750 --> 00:20:30.550
CPU, battery, and so on.

00:20:30.550 --> 00:20:35.410
I think this kind of capability
for engagement/re-engagement is

00:20:35.410 --> 00:20:40.680
where progressive web apps
are really coming alive.

00:20:40.680 --> 00:20:44.490
So of course, a
truly engaging app

00:20:44.490 --> 00:20:48.150
needs to kind of go beyond being
just functional and reliable.

00:20:48.150 --> 00:20:51.300
And ensure that the whole
experience is delightful

00:20:51.300 --> 00:20:54.510
and it makes it
easier for the user

00:20:54.510 --> 00:20:55.770
to do what they need to do.

00:20:55.770 --> 00:20:57.871
Really good
experiences on the web

00:20:57.871 --> 00:20:59.370
need to have the
right capabilities,

00:20:59.370 --> 00:21:03.330
use them at the right
time in a beautiful way.

00:21:03.330 --> 00:21:06.250
Twitter is a great
example of this.

00:21:06.250 --> 00:21:09.910
They launched a progressive
web app in spring this year.

00:21:09.910 --> 00:21:12.720
They had noticed their
web traffic was growing.

00:21:12.720 --> 00:21:16.620
And yet, the experience
wasn't great.

00:21:16.620 --> 00:21:19.170
So they set out to
redesign their mobile web

00:21:19.170 --> 00:21:20.985
experiences of PWA.

00:21:20.985 --> 00:21:23.550
And this is a great
place to look to see

00:21:23.550 --> 00:21:25.260
what can be done on the web.

00:21:25.260 --> 00:21:27.060
They had three goals in mind.

00:21:27.060 --> 00:21:32.400
They needed to cope with
slow, or flaky, networks.

00:21:32.400 --> 00:21:34.230
And they had to
consume less data.

00:21:34.230 --> 00:21:37.170
This is critically important
for a global service

00:21:37.170 --> 00:21:38.940
for all their users.

00:21:38.940 --> 00:21:42.510
And Twitter needs to work
well for a huge variety

00:21:42.510 --> 00:21:46.180
of smartphones, from
high-end to low-end.

00:21:46.180 --> 00:21:49.890
Some of which have tiny levels
of storage and limited CPU,

00:21:49.890 --> 00:21:50.955
and so on.

00:21:50.955 --> 00:21:53.080
For those of you who have
got a phone in your hand,

00:21:53.080 --> 00:21:55.470
you can check this out right
now, mobile.twitter.com.

00:21:55.470 --> 00:21:59.175
You'll see how fast and
smooth the scrolling is.

00:21:59.175 --> 00:22:03.810
Now, performance is a
huge priority for Twitter.

00:22:03.810 --> 00:22:08.490
They can access photos
and videos for uploading.

00:22:08.490 --> 00:22:11.580
You can see a tweet
going on here.

00:22:11.580 --> 00:22:15.870
And of course, the web can
now send push notifications.

00:22:15.870 --> 00:22:18.630
On Android, these appear
alongside native web app

00:22:18.630 --> 00:22:19.950
notifications.

00:22:19.950 --> 00:22:23.010
And this is a fantastic
re-engagement tool.

00:22:23.010 --> 00:22:25.290
I believe Twitter are
now sending out something

00:22:25.290 --> 00:22:29.430
like 10 million push
notifications per day, which

00:22:29.430 --> 00:22:31.430
is incredible.

00:22:31.430 --> 00:22:33.750
What I really love,
though, is that Twitter

00:22:33.750 --> 00:22:38.040
can deliver this experience
at a fraction of the size

00:22:38.040 --> 00:22:39.810
compared to native.

00:22:39.810 --> 00:22:42.480
You can see here the difference
that a progressive web

00:22:42.480 --> 00:22:44.490
app can make.

00:22:44.490 --> 00:22:48.750
So how can a PWA be so small?

00:22:48.750 --> 00:22:50.940
Well, when you
download an app, you

00:22:50.940 --> 00:22:53.340
download everything that
the app needs, which is

00:22:53.340 --> 00:22:55.470
why you get those data sizes.

00:22:55.470 --> 00:22:58.830
But the PWA can leverage the
resources of the browser,

00:22:58.830 --> 00:23:03.780
and then progressively
install more assets and data

00:23:03.780 --> 00:23:05.290
as required.

00:23:05.290 --> 00:23:07.710
And again, this is
a huge deal for we

00:23:07.710 --> 00:23:12.120
need to remember that for a
lot of users in many regions,

00:23:12.120 --> 00:23:15.780
their constraint is actually
from data costs as well

00:23:15.780 --> 00:23:17.390
as connectivity.

00:23:17.390 --> 00:23:19.330
Need to remember that
and bear that in mind.

00:23:19.330 --> 00:23:22.710
So as you might expect, Twitter
is getting great metrics

00:23:22.710 --> 00:23:27.660
for their PWA compared to their
previous mobile experience.

00:23:27.660 --> 00:23:30.390
And they're getting something
like a million daily visits

00:23:30.390 --> 00:23:33.720
users coming from the Home
screen icon, which is great.

00:23:33.720 --> 00:23:36.060
We're seeing the same
from a company called Ola.

00:23:36.060 --> 00:23:40.572
This is like India's largest
ride-hailing service.

00:23:40.572 --> 00:23:41.280
It's interesting.

00:23:41.280 --> 00:23:46.980
Their mission was to build
mobility for a billion Indians.

00:23:46.980 --> 00:23:48.840
An incredible scale.

00:23:48.840 --> 00:23:50.520
They started, just
like six years ago.

00:23:50.520 --> 00:23:53.640
The co-founders, they would
actually drive customers

00:23:53.640 --> 00:23:55.900
if a cab didn't show up.

00:23:55.900 --> 00:23:58.570
Now, they're up to like
a million rides a day,

00:23:58.570 --> 00:24:00.270
something like that.

00:24:00.270 --> 00:24:03.150
But that was not enough
when their target

00:24:03.150 --> 00:24:06.330
was like billions of users.

00:24:06.330 --> 00:24:09.010
What they needed to do
was to target tier 2

00:24:09.010 --> 00:24:09.990
and tier 3 cities.

00:24:09.990 --> 00:24:14.310
These are like smaller cities,
20 to maybe 100K in size.

00:24:14.310 --> 00:24:18.330
A lot of users in those
cities get flaky connectivity

00:24:18.330 --> 00:24:23.100
and are using
cheaper smartphones.

00:24:23.100 --> 00:24:25.080
And it makes sense
for those people

00:24:25.080 --> 00:24:28.890
not to actually install apps
because of limited storage

00:24:28.890 --> 00:24:31.150
and the cost of data.

00:24:31.150 --> 00:24:33.900
So with Ola, their
progressive web app,

00:24:33.900 --> 00:24:36.270
you get smooth navigation,
which is great.

00:24:36.270 --> 00:24:39.660
You get this
fantastic, robust UX.

00:24:39.660 --> 00:24:41.370
And you know, great
functionality,

00:24:41.370 --> 00:24:44.800
even on low bandwidth.

00:24:44.800 --> 00:24:46.720
So since launch,
what they've seen

00:24:46.720 --> 00:24:49.480
is that things are going well
for them in the tier 2 cities.

00:24:49.480 --> 00:24:51.610
But what's really
nice is that they're

00:24:51.610 --> 00:24:57.850
seeing great conversions up in
the tier 3 cities, up like 30%.

00:24:57.850 --> 00:25:00.060
This is a fundamental point
that progressive web apps

00:25:00.060 --> 00:25:05.310
are allowing them to address
new audiences and new market.

00:25:05.310 --> 00:25:07.320
One stat I really like
from them actually

00:25:07.320 --> 00:25:11.235
is that like 20% of
their progressive web

00:25:11.235 --> 00:25:14.560
app bookings are actually
from users who had previously

00:25:14.560 --> 00:25:16.560
uninstalled the app.

00:25:16.560 --> 00:25:17.430
This is fantastic.

00:25:17.430 --> 00:25:20.400
It's worth remembering that
a lot of users, because

00:25:20.400 --> 00:25:22.450
of device, memory
constraints, or whatever,

00:25:22.450 --> 00:25:24.600
are regularly uninstalling apps.

00:25:24.600 --> 00:25:27.390
And you don't get
that on the web.

00:25:27.390 --> 00:25:30.600
If you want to find out more
about what Ola and Twitter have

00:25:30.600 --> 00:25:33.480
done, check out their case
studies on Web Fundamentals.

00:25:33.480 --> 00:25:38.430
I'll be sharing a link with that
at the end of the presentation.

00:25:38.430 --> 00:25:42.240
Just briefly, getting back
to the topic of engagement.

00:25:42.240 --> 00:25:44.010
When a user visits
your site, you

00:25:44.010 --> 00:25:47.394
can now prompt them to add
the site to their Home screen.

00:25:47.394 --> 00:25:48.810
Great example of
doing this really

00:25:48.810 --> 00:25:51.480
well is Trivago,
the travel site.

00:25:51.480 --> 00:25:53.550
They have like progressive
web app for something

00:25:53.550 --> 00:25:56.080
like 55 domains globally.

00:25:56.080 --> 00:25:57.370
Incredible.

00:25:57.370 --> 00:26:00.010
And as you can see,
the Add to Home Screen

00:26:00.010 --> 00:26:03.000
process here works
really, really well.

00:26:03.000 --> 00:26:06.150
And then, this app is now
like tightly integrated

00:26:06.150 --> 00:26:07.710
with the Android device.

00:26:07.710 --> 00:26:10.300
It's displayed in the app
launcher, just like other apps.

00:26:10.300 --> 00:26:15.770
And it's part of Android
Settings, which is great.

00:26:15.770 --> 00:26:18.480
But given this focus
on Android, you

00:26:18.480 --> 00:26:21.010
might be wondering, well,
is this progressive web app

00:26:21.010 --> 00:26:21.720
thing--

00:26:21.720 --> 00:26:23.800
is this a Google thing?

00:26:23.800 --> 00:26:25.110
And the answer is no.

00:26:25.110 --> 00:26:28.160
A big part of what
makes progressive web

00:26:28.160 --> 00:26:30.790
apps so successful is
that multiple browsers

00:26:30.790 --> 00:26:32.430
are committed to them.

00:26:32.430 --> 00:26:34.950
Developer adoption is
obviously growing, but so

00:26:34.950 --> 00:26:36.570
is browser support.

00:26:36.570 --> 00:26:38.820
Opera, Samsung,
Microsoft, Mozilla

00:26:38.820 --> 00:26:41.000
are on board with the
features I've discussed.

00:26:41.000 --> 00:26:42.666
And of course, you
might have also heard

00:26:42.666 --> 00:26:45.570
that service workers are in
development for Safari, which

00:26:45.570 --> 00:26:46.800
is great.

00:26:46.800 --> 00:26:49.140
But progressive
web apps are really

00:26:49.140 --> 00:26:52.440
about the attitude to building
web experiences that work well

00:26:52.440 --> 00:26:54.090
for all your users.

00:26:54.090 --> 00:26:55.710
So you can count
on reaching users

00:26:55.710 --> 00:26:57.460
that are important to you.

00:26:57.460 --> 00:26:59.350
The word "progressive" is--

00:26:59.350 --> 00:27:01.170
it's in progressive web apps.

00:27:01.170 --> 00:27:03.550
It's not there by accident.

00:27:03.550 --> 00:27:06.770
We need to focus on this
end-to-end user experience.

00:27:06.770 --> 00:27:09.030
And that can give a
really dramatic impact

00:27:09.030 --> 00:27:10.860
to your business.

00:27:10.860 --> 00:27:13.860
Even with users who
can't experience

00:27:13.860 --> 00:27:15.270
the full power of
progressive web

00:27:15.270 --> 00:27:18.870
apps because they're using a
device that does not support

00:27:18.870 --> 00:27:21.510
some particular feature.

00:27:21.510 --> 00:27:24.360
A great example of this,
the luxury cosmetics brand,

00:27:24.360 --> 00:27:28.050
like Lancome, they
built this great PWA.

00:27:28.050 --> 00:27:30.870
But I want to call this
out, because something

00:27:30.870 --> 00:27:35.700
like 65% of their users
are actually on iOS.

00:27:35.700 --> 00:27:37.680
What they found
was that when they

00:27:37.680 --> 00:27:41.340
built their progressive web app
and used the kind of techniques

00:27:41.340 --> 00:27:45.030
that we're advocating and you
can learn more about today,

00:27:45.030 --> 00:27:48.870
that they were getting
much higher engagement.

00:27:48.870 --> 00:27:50.520
And this is fantastic.

00:27:50.520 --> 00:27:53.760
It just means that this is
a good investment for you,

00:27:53.760 --> 00:27:58.480
no matter what the browser
mix is that you're targeting.

00:27:58.480 --> 00:28:00.690
Gartner has recently
published a report

00:28:00.690 --> 00:28:05.010
advocating that PWAs should be
part of a mobile development

00:28:05.010 --> 00:28:06.450
strategy.

00:28:06.450 --> 00:28:09.420
And this idea that
progressive web apps

00:28:09.420 --> 00:28:13.270
will begin to replace
general-purpose apps.

00:28:13.270 --> 00:28:16.890
So I know this sounds
great, but I also

00:28:16.890 --> 00:28:18.480
know that reality sinks in.

00:28:18.480 --> 00:28:20.199
You go back to your
day job and you

00:28:20.199 --> 00:28:21.990
think about building
a progressive web app.

00:28:21.990 --> 00:28:25.740
It could seem like
this huge undertaking.

00:28:25.740 --> 00:28:27.630
But implementing
these techniques

00:28:27.630 --> 00:28:30.720
need not be this monolithic
refactoring task.

00:28:30.720 --> 00:28:34.150
I want to talk about
some ways to get started.

00:28:34.150 --> 00:28:37.040
First and foremost,
you need security.

00:28:37.040 --> 00:28:40.320
HTTPS is table stakes
for progressive web apps,

00:28:40.320 --> 00:28:42.780
to keep your users and
your business safe.

00:28:42.780 --> 00:28:46.170
This is not just for sites
that work with sensitive data.

00:28:46.170 --> 00:28:50.640
You Any site can be a target
that's vulnerable for attack.

00:28:50.640 --> 00:28:55.630
And the green lock indicates
that that site is secure,

00:28:55.630 --> 00:28:59.260
is a secure connection between
your users and your site.

00:28:59.260 --> 00:29:01.470
And this means three things.

00:29:01.470 --> 00:29:05.130
The user must be able to trust
that the site is actually you,

00:29:05.130 --> 00:29:07.050
not a scammer or a phisher.

00:29:07.050 --> 00:29:11.226
They must be assured that no
one can tamper with the content.

00:29:11.226 --> 00:29:12.600
And then, they
need to be assured

00:29:12.600 --> 00:29:15.720
that no one is listening to
the interaction between them

00:29:15.720 --> 00:29:17.440
and your site.

00:29:17.440 --> 00:29:21.600
The web has this tremendous
reach and lack of friction.

00:29:21.600 --> 00:29:25.140
But you know, keeping users
safe is absolutely paramount.

00:29:25.140 --> 00:29:31.680
And for this reason, HTTPS is
mandatory for many of the APIs

00:29:31.680 --> 00:29:35.730
now on the web, including
service worker, geolocation,

00:29:35.730 --> 00:29:39.630
camera access, web
RTC APIs, and so on.

00:29:39.630 --> 00:29:42.090
So once you've moved
to a secure domain,

00:29:42.090 --> 00:29:46.415
three approaches to moving
to a progressive web app.

00:29:46.415 --> 00:29:47.790
You can build from
the ground up,

00:29:47.790 --> 00:29:50.100
you can start with
a simple version,

00:29:50.100 --> 00:29:52.080
or you could focus
on a single feature.

00:29:52.080 --> 00:29:54.210
Just want to have a
quick look at these.

00:29:54.210 --> 00:29:56.100
So starting from
the ground up makes

00:29:56.100 --> 00:29:58.440
sense when you're going
through a redesign.

00:29:58.440 --> 00:30:00.190
If you're starting
from scratch, well, you

00:30:00.190 --> 00:30:02.940
can build that appness right
in from the start using

00:30:02.940 --> 00:30:05.100
service workers and so on.

00:30:05.100 --> 00:30:08.740
OLX is a great example of this.

00:30:08.740 --> 00:30:11.820
They launched their
site for classified ads

00:30:11.820 --> 00:30:15.630
in India, providing communities
with its great markets.

00:30:15.630 --> 00:30:19.290
And they've seen fantastic
improvement in time

00:30:19.290 --> 00:30:23.070
to interactive, drops in
bounce rates, and so on.

00:30:23.070 --> 00:30:27.930
And they wanted to
reengage with their users,

00:30:27.930 --> 00:30:30.270
including their
mobile app users.

00:30:30.270 --> 00:30:32.830
And they've had fantastic
results with that.

00:30:32.830 --> 00:30:35.700
And again, they built
this right from scratch.

00:30:35.700 --> 00:30:38.310
But of course, not
everyone can do this.

00:30:38.310 --> 00:30:41.690
Starting from scratch
is not realistic.

00:30:41.690 --> 00:30:45.150
An example of a different
approach is Air Berlin.

00:30:45.150 --> 00:30:50.130
They built this
post check-in app

00:30:50.130 --> 00:30:53.250
where you can get all the
details for your flight.

00:30:53.250 --> 00:30:55.890
They weren't able to just
start everything from scratch.

00:30:55.890 --> 00:30:57.420
Check out their stuff.

00:30:57.420 --> 00:30:59.640
They've done a
beautiful job of this.

00:30:59.640 --> 00:31:02.760
And you can get your boarding
pass, all those details, even

00:31:02.760 --> 00:31:06.570
when the app is then offline.

00:31:06.570 --> 00:31:09.440
Now, the final strategy
is just to define--

00:31:09.440 --> 00:31:14.020
is to pick on one
particular strategy.

00:31:14.020 --> 00:31:16.050
Weather.com have
done a great job

00:31:16.050 --> 00:31:18.180
with this with notifications.

00:31:18.180 --> 00:31:20.430
I would really, really
recommend-- they've rolled this

00:31:20.430 --> 00:31:22.950
out in like 60 languages.

00:31:22.950 --> 00:31:25.980
If you're looking at
UX for notifications,

00:31:25.980 --> 00:31:28.300
I would really recommend you
look at what they've done.

00:31:28.300 --> 00:31:32.400
They've done a beautiful job of
this within a PWA experience.

00:31:32.400 --> 00:31:35.690
And they've seen great
results from this.

00:31:35.690 --> 00:31:38.670
A million opt-ins within
a month, and so on.

00:31:38.670 --> 00:31:39.720
So check out their work.

00:31:39.720 --> 00:31:41.670
I'd thoroughly recommend that.

00:31:44.350 --> 00:31:46.650
So I would look at these
different approaches

00:31:46.650 --> 00:31:49.200
if you're thinking of building
a progressive web app.

00:31:49.200 --> 00:31:51.810
Come along to Ava's
talk about how

00:31:51.810 --> 00:31:55.290
to get started with moving
from website to PWA later.

00:31:55.290 --> 00:31:56.310
It's an excellent talk.

00:31:56.310 --> 00:31:58.260
And she'll talk more
about how you can

00:31:58.260 --> 00:32:00.060
get started with that stuff.

00:32:00.060 --> 00:32:02.850
So we're seeing great
momentum, different verticals

00:32:02.850 --> 00:32:06.570
with travel
companies on the web.

00:32:06.570 --> 00:32:09.870
We've seen publishers,
partners like Forbes.

00:32:09.870 --> 00:32:13.680
Forbes has seen like
double in user engagement

00:32:13.680 --> 00:32:16.800
since the launch of their
PWA, which is fantastic.

00:32:16.800 --> 00:32:18.840
And e-commerce sites as well.

00:32:18.840 --> 00:32:21.930
Fandango, Alibaba,
Rakuten, and so on.

00:32:21.930 --> 00:32:25.375
They've all invested really
successfully in progressive web

00:32:25.375 --> 00:32:26.130
apps.

00:32:26.130 --> 00:32:30.417
And also, like newer services,
like ride-sharing companies.

00:32:30.417 --> 00:32:32.250
This was just a sample
of some of the people

00:32:32.250 --> 00:32:35.970
who are actively working
with PWAs and new web APIs.

00:32:35.970 --> 00:32:37.140
Check out their work.

00:32:37.140 --> 00:32:41.490
They've done beautiful work
on building great sites.

00:32:41.490 --> 00:32:44.370
And they're just finding
ways to start down this path,

00:32:44.370 --> 00:32:47.820
investing in the mobile
web and getting down

00:32:47.820 --> 00:32:51.300
this path of building
progressive web apps.

00:32:51.300 --> 00:32:53.510
So I think progressive web
apps for these companies,

00:32:53.510 --> 00:32:56.480
it's giving them
reach and capability.

00:32:56.480 --> 00:33:00.110
The ability to target new
audiences and new markets,

00:33:00.110 --> 00:33:04.070
which is incredibly
exciting on the web.

00:33:04.070 --> 00:33:05.660
If you want to learn
more about this,

00:33:05.660 --> 00:33:08.180
we have some great
sessions coming up.

00:33:08.180 --> 00:33:10.670
Some good presentations
today and tomorrow.

00:33:10.670 --> 00:33:13.490
We'll have, like I say, a lot
of expert web Googlers on hand

00:33:13.490 --> 00:33:16.325
to answer your questions,
solve your problems.

00:33:16.325 --> 00:33:18.890
I'd also strongly recommend
the training sessions

00:33:18.890 --> 00:33:20.580
from Sarah Clark and her team.

00:33:20.580 --> 00:33:21.830
These are really, really good.

00:33:21.830 --> 00:33:25.340
And really good people
running those sessions.

00:33:25.340 --> 00:33:26.720
And if you want
to find out more,

00:33:26.720 --> 00:33:28.760
please check out
web fundamentals,

00:33:28.760 --> 00:33:34.160
like case studies, resources,
at developers.google.com/web.

00:33:34.160 --> 00:33:37.460
Most of all, please feel
free to come and talk to us.

00:33:37.460 --> 00:33:40.550
Any of the Googlers-- there's
a bunch of web Googlers here.

00:33:40.550 --> 00:33:43.610
We're here to learn what
you're doing on the web, what

00:33:43.610 --> 00:33:46.250
we can do to make
the web better,

00:33:46.250 --> 00:33:50.720
and to help you build better
experiences for all your users.

00:33:50.720 --> 00:33:53.600
Thank you very much, and
we'll see you around.

00:33:53.600 --> 00:33:54.470
Thank you.

00:33:54.470 --> 00:33:55.070
[APPLAUSE]

00:33:55.070 --> 00:33:57.820
[MUSIC PLAYING]

