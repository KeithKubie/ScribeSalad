WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.006
 

00:00:00.006 --> 00:00:01.130
Alexis Moussine-Pouchkine: Hi, everyone.

00:00:01.130 --> 00:00:03.500
We're here at Devoxx
2014, and I'm here

00:00:03.500 --> 00:00:06.220
with people that know a
thing or two about Java.

00:00:06.220 --> 00:00:10.577
And I think you guys have
read "Effective Java," right?

00:00:10.577 --> 00:00:11.410
EAMONN MCMANUS: Yes.

00:00:11.410 --> 00:00:11.860
CHRISTIAN GRUBER: Yes.

00:00:11.860 --> 00:00:13.985
MALE SPEAKER: So this is
Eamonn, this is Christian.

00:00:13.985 --> 00:00:18.730
And we're going to talk about
annotation processing, code

00:00:18.730 --> 00:00:21.350
generation, and two
specific projects.

00:00:21.350 --> 00:00:23.790
So why don't we start with
annotation processing?

00:00:23.790 --> 00:00:26.250
So for those that haven't
been exposed to it,

00:00:26.250 --> 00:00:27.655
you want to explain
what that is?

00:00:27.655 --> 00:00:28.530
EAMONN MCMANUS: Sure.

00:00:28.530 --> 00:00:30.071
So it's something
that was introduced

00:00:30.071 --> 00:00:32.229
as a standard with Java 6.

00:00:32.229 --> 00:00:34.160
So there was a JSR
that defined that,

00:00:34.160 --> 00:00:35.980
and there's a set of
APIs that define it.

00:00:35.980 --> 00:00:40.020
And it's basically a way of
extending the Java processor,

00:00:40.020 --> 00:00:42.430
plugging your own code
into the processor that

00:00:42.430 --> 00:00:44.410
will run while
compilation is running.

00:00:44.410 --> 00:00:46.520
And it's quite powerful.

00:00:46.520 --> 00:00:48.240
You can follow
these standard APIs

00:00:48.240 --> 00:00:51.490
which will work with
both Java SE and ECJ

00:00:51.490 --> 00:00:53.328
because it is a standard.

00:00:53.328 --> 00:00:57.260
And you can arrange that
when the compilation happens

00:00:57.260 --> 00:00:59.290
your code gets
executed, and that code

00:00:59.290 --> 00:01:02.000
can see what other
code is being compiled.

00:01:02.000 --> 00:01:04.260
And it can also
generate new code

00:01:04.260 --> 00:01:07.350
that will be compiled
alongside the original code.

00:01:07.350 --> 00:01:10.080
So doing that means
that you can-- first

00:01:10.080 --> 00:01:11.880
of all, you can do
additional checks,

00:01:11.880 --> 00:01:15.252
because you can
emit error messages,

00:01:15.252 --> 00:01:16.960
and they will show up
in the right place.

00:01:16.960 --> 00:01:19.376
If you were using an IDE, they
would show up as red lines,

00:01:19.376 --> 00:01:20.580
there is a problem here.

00:01:20.580 --> 00:01:23.970
And secondly, then you can
augment the code, the input

00:01:23.970 --> 00:01:27.050
code of your program, with
this new generated code.

00:01:27.050 --> 00:01:29.670
MALE SPEAKER: So the fact that
it's at the compiler level

00:01:29.670 --> 00:01:32.130
obviously means that you still
get the benefit of using,

00:01:32.130 --> 00:01:34.560
you mentioned an IDE,
and all the tool chain.

00:01:34.560 --> 00:01:35.920
And that is very critical.

00:01:35.920 --> 00:01:37.127
How about performance?

00:01:37.127 --> 00:01:39.210
Is that something that
people need to worry about?

00:01:39.210 --> 00:01:39.885
EAMONN MCMANUS:
It's not something

00:01:39.885 --> 00:01:41.426
that we've noticed
as a problem, so I

00:01:41.426 --> 00:01:43.200
think it's probably all right.

00:01:43.200 --> 00:01:44.960
MALE SPEAKER: So the
reason you were here

00:01:44.960 --> 00:01:46.720
talking about
annotation processing,

00:01:46.720 --> 00:01:48.850
and that we're
talking about it now,

00:01:48.850 --> 00:01:51.790
is that this enables for
some interesting features.

00:01:51.790 --> 00:01:53.970
And one of the projects
you've been working on

00:01:53.970 --> 00:01:56.447
is AutoValue, is
the proper name?

00:01:56.447 --> 00:01:57.280
EAMONN MCMANUS: Yes.

00:01:57.280 --> 00:01:59.420
MALE SPEAKER: And that's
a project on its own?

00:01:59.420 --> 00:02:02.490
Can we say it's built
by the Guava team?

00:02:02.490 --> 00:02:03.660
Some relation to it?

00:02:03.660 --> 00:02:07.080
CHRISTIAN GRUBER: It's part
of a larger effort of projects

00:02:07.080 --> 00:02:09.330
that all do
annotation processing

00:02:09.330 --> 00:02:10.570
for various purposes.

00:02:10.570 --> 00:02:13.380
AutoValue does value type.

00:02:13.380 --> 00:02:15.150
Really easy, low
boilerplate value types.

00:02:15.150 --> 00:02:15.880
I

00:02:15.880 --> 00:02:16.838
MALE SPEAKER: So, yeah.

00:02:16.838 --> 00:02:19.490
I mean, AutoValue, I mentioned
"Effective Java." if you

00:02:19.490 --> 00:02:22.850
haven't read it, guys
watching this and gals,

00:02:22.850 --> 00:02:24.550
you should read it.

00:02:24.550 --> 00:02:28.240
It talks about how
you have to implement

00:02:28.240 --> 00:02:30.645
equals hashcode-- what
was the third one?

00:02:30.645 --> 00:02:31.770
EAMONN MCMANUS: Two string.

00:02:31.770 --> 00:02:32.811
MALE SPEAKER: Two string.

00:02:32.811 --> 00:02:33.400
Thank you.

00:02:33.400 --> 00:02:34.880
EAMONN MCMANUS: And that's
a major pain, right?

00:02:34.880 --> 00:02:36.240
MALE SPEAKER: And
that is painful, yes.

00:02:36.240 --> 00:02:38.132
But remind us, why do
you need to do that?

00:02:38.132 --> 00:02:39.340
And how are you solving this?

00:02:39.340 --> 00:02:40.500
EAMONN MCMANUS: So
you don't absolutely

00:02:40.500 --> 00:02:42.730
have to implement two
string, but you really

00:02:42.730 --> 00:02:45.300
would want to implement equals
and hashcode so that you

00:02:45.300 --> 00:02:50.090
can use your values as keys
in like hash map or hash set.

00:02:50.090 --> 00:02:52.810
If you have equals, that
means you can use it in tests.

00:02:52.810 --> 00:02:55.800
So you can compare your object
against an expected object,

00:02:55.800 --> 00:02:56.530
and so on.

00:02:56.530 --> 00:02:59.860
So you pretty much always
want to define these methods

00:02:59.860 --> 00:03:01.330
when you're creating
a value type.

00:03:01.330 --> 00:03:04.260
So an immutable type, you really
want to define these methods.

00:03:04.260 --> 00:03:06.134
And it's a huge pain,
because you're doing it

00:03:06.134 --> 00:03:07.880
exactly the same way every time.

00:03:07.880 --> 00:03:10.370
So the idea of
AutoValue is, instead

00:03:10.370 --> 00:03:14.130
of-- so you define basic
abstract methods that

00:03:14.130 --> 00:03:15.610
are the properties
of your objects.

00:03:15.610 --> 00:03:19.305
So your classes and address,
you say abstract class address.

00:03:19.305 --> 00:03:21.990
And you say abstract
string, street address,

00:03:21.990 --> 00:03:23.780
abstract post code and so on.

00:03:23.780 --> 00:03:26.880
And you put the AutoValue
annotation on that class.

00:03:26.880 --> 00:03:30.450
And so the idea with the
AutoValue annotation processor

00:03:30.450 --> 00:03:32.890
is that it sees this
notation, and that

00:03:32.890 --> 00:03:35.020
causes it to generate
basically new code,

00:03:35.020 --> 00:03:36.770
which is the implementation
of this class.

00:03:36.770 --> 00:03:39.061
So you have this abstract
class, which is the interface

00:03:39.061 --> 00:03:40.210
that the client code sees.

00:03:40.210 --> 00:03:42.200
And then you can have a
private implementation

00:03:42.200 --> 00:03:45.450
of that class, a
subclass that basically

00:03:45.450 --> 00:03:46.727
writes those methods for you.

00:03:46.727 --> 00:03:49.310
So it writes the implementations
of those two abstract methods

00:03:49.310 --> 00:03:52.090
that you defined, and it also
writes the implementation

00:03:52.090 --> 00:03:55.730
of the equals and hashcode
and two string methods.

00:03:55.730 --> 00:03:59.280
So it's a simple idea, but
it's just a huge benefit

00:03:59.280 --> 00:04:01.050
in terms of avoiding
having to rewrite

00:04:01.050 --> 00:04:02.990
the same sorts of things
over and over again.

00:04:02.990 --> 00:04:05.490
MALE SPEAKER: So if I want to
use it, it's like [INAUDIBLE],

00:04:05.490 --> 00:04:06.899
I add-- how does it--

00:04:06.899 --> 00:04:09.190
EAMONN MCMANUS: The easiest
way to do it is with Maven.

00:04:09.190 --> 00:04:11.481
I mean, you just express a
dependency on it with Maven,

00:04:11.481 --> 00:04:14.340
and everything just works.

00:04:14.340 --> 00:04:17.500
MALE SPEAKER: This has no impact
on any jar that you generate,

00:04:17.500 --> 00:04:18.000
right?

00:04:18.000 --> 00:04:19.034
This is all tooling.

00:04:19.034 --> 00:04:20.450
EAMONN MCMANUS:
Yes, that's right.

00:04:20.450 --> 00:04:21.029
CHRISTIAN GRUBER:
This is tooling.

00:04:21.029 --> 00:04:23.587
Although the generated
code goes in your jar.

00:04:23.587 --> 00:04:25.670
We actually made a choice
to generate source code,

00:04:25.670 --> 00:04:28.402
not bite code, precisely
so you could go look at it.

00:04:28.402 --> 00:04:30.860
MALE SPEAKER: But you're not
carrying along a library, or--

00:04:30.860 --> 00:04:31.390
CHRISTIAN GRUBER: No, no, no.

00:04:31.390 --> 00:04:32.680
MALE SPEAKER: this
huge dependency.

00:04:32.680 --> 00:04:33.450
EAMONN MCMANUS:
AutoValue in particular

00:04:33.450 --> 00:04:34.900
is defined to be
completely standalone.

00:04:34.900 --> 00:04:35.930
It doesn't depend
on anything else

00:04:35.930 --> 00:04:37.220
in terms of what's generated.

00:04:37.220 --> 00:04:39.450
MALE SPEAKER: Yeah,
Java 6 and above.

00:04:39.450 --> 00:04:42.680
CHRISTIAN GRUBER: And you're
configuring the compiler

00:04:42.680 --> 00:04:45.050
with the jar, you're not
configuring your runtime

00:04:45.050 --> 00:04:45.592
with the jar.

00:04:45.592 --> 00:04:46.800
MALE SPEAKER: Right, exactly.

00:04:46.800 --> 00:04:48.009
It's really the compile time.

00:04:48.009 --> 00:04:49.383
CHRISTIAN GRUBER:
Yeah, for sure.

00:04:49.383 --> 00:04:52.080
MALE SPEAKER: So there's more to
it than just [INAUDIBLE] this.

00:04:52.080 --> 00:04:54.650
I know there's some
nice additional features

00:04:54.650 --> 00:04:56.960
that people might want to
use that is part of this.

00:04:56.960 --> 00:05:00.740
So when it comes to declaring
things as being nullable,

00:05:00.740 --> 00:05:01.550
for example?

00:05:01.550 --> 00:05:04.379
EAMONN MCMANUS: Right, so it
does do a certain amount of--

00:05:04.379 --> 00:05:05.420
MALE SPEAKER: Optionally?

00:05:05.420 --> 00:05:07.280
EAMONN MCMANUS: Optionally, yes.

00:05:07.280 --> 00:05:09.550
If you don't specify a
parameter as nullable,

00:05:09.550 --> 00:05:12.070
then the generated
constructor would actually

00:05:12.070 --> 00:05:13.660
verify that it's not null.

00:05:13.660 --> 00:05:15.860
So there's a few
things like that.

00:05:15.860 --> 00:05:19.750
We have GWT serialization, G-W-T
serialization, for example.

00:05:19.750 --> 00:05:22.082
So a few extra bells and
whistles like that, yeah.

00:05:22.082 --> 00:05:22.790
MALE SPEAKER: OK.

00:05:22.790 --> 00:05:24.206
So if you haven't
checked it out--

00:05:24.206 --> 00:05:25.856
and what is the status
of that project?

00:05:25.856 --> 00:05:29.120
 

00:05:29.120 --> 00:05:31.930
CHRISTIAN GRUBER: It's
in a release candidate.

00:05:31.930 --> 00:05:33.680
And we had a
discussion yesterday

00:05:33.680 --> 00:05:36.410
where we couldn't think of a
good reason not to release 1.0.

00:05:36.410 --> 00:05:37.880
So I suspect we'll release
1.0 really soon now.

00:05:37.880 --> 00:05:38.110
MALE SPEAKER: You
heard it here first.

00:05:38.110 --> 00:05:38.776
Really soon now.

00:05:38.776 --> 00:05:40.907
 

00:05:40.907 --> 00:05:42.490
CHRISTIAN GRUBER:
There's a little bit

00:05:42.490 --> 00:05:45.047
of touching up in terms of
the other features and maybe

00:05:45.047 --> 00:05:46.380
some documentation improvements.

00:05:46.380 --> 00:05:49.590
But we've been using it in
production code at Google

00:05:49.590 --> 00:05:52.300
for quite awhile now, at head.

00:05:52.300 --> 00:05:54.860
And it hasn't changed much
in the last couple of months.

00:05:54.860 --> 00:05:56.370
MALE SPEAKER: And it is an
open sourced project developed

00:05:56.370 --> 00:05:56.660
[INAUDIBLE].

00:05:56.660 --> 00:05:58.035
CHRISTIAN GRUBER:
It's on GitHub.

00:05:58.035 --> 00:06:01.590
It's GitHub, in the Google
project space, called Auto,

00:06:01.590 --> 00:06:02.410
A-U-T-O.

00:06:02.410 --> 00:06:03.410
MALE SPEAKER: OK, great.

00:06:03.410 --> 00:06:05.704
So let's switch gears
a little bit and talk

00:06:05.704 --> 00:06:07.120
about something,
Christian, you've

00:06:07.120 --> 00:06:09.190
been spending some time
on, which is Dagger.

00:06:09.190 --> 00:06:11.450
Which is, really
when you look at it,

00:06:11.450 --> 00:06:14.280
another use of annotation
processing, where a lot of work

00:06:14.280 --> 00:06:18.390
is done at the compile time so
that, in terms of performance

00:06:18.390 --> 00:06:21.430
start up time and
many other things,

00:06:21.430 --> 00:06:22.930
you don't have to
do it at run time.

00:06:22.930 --> 00:06:28.470
So tell us what is Dagger real
quickly, and how it uses ABT.

00:06:28.470 --> 00:06:29.960
CHRISTIAN GRUBER:
Yeah, so Dagger

00:06:29.960 --> 00:06:34.420
is, in essence, a
JSR 330 compliant

00:06:34.420 --> 00:06:35.712
dependency injection framework.

00:06:35.712 --> 00:06:36.711
MALE SPEAKER: At inject.

00:06:36.711 --> 00:06:37.890
CHRISTIAN GRUBER: At inject.

00:06:37.890 --> 00:06:41.060
You, just like every other
dependency injection framework

00:06:41.060 --> 00:06:45.760
these days you have classes
that you control the constructor

00:06:45.760 --> 00:06:48.204
for, and you can mark at
inject on the constructor.

00:06:48.204 --> 00:06:49.870
And then they declare
their dependencies

00:06:49.870 --> 00:06:51.460
as constructor parameters.

00:06:51.460 --> 00:06:53.056
Or you have a
configuration for things

00:06:53.056 --> 00:06:54.930
that can't have
constructors, like interfaces

00:06:54.930 --> 00:06:56.370
that need to be bound.

00:06:56.370 --> 00:06:59.170
And we have some
annotations at module

00:06:59.170 --> 00:07:01.310
for the module
configuration classes,

00:07:01.310 --> 00:07:03.985
and at provides to
declare the methods that

00:07:03.985 --> 00:07:06.360
will provide these types that
you don't have constructors

00:07:06.360 --> 00:07:07.250
for.

00:07:07.250 --> 00:07:10.940
And what it does is it looks
at these annotation signals

00:07:10.940 --> 00:07:12.650
and says, hey, what
are the dependencies

00:07:12.650 --> 00:07:13.441
that were declared?

00:07:13.441 --> 00:07:17.850
And can we satisfy these with
all of the things that we know?

00:07:17.850 --> 00:07:19.902
And then it just does
that work for you.

00:07:19.902 --> 00:07:21.860
So traditionally, things
like Spring and Juice,

00:07:21.860 --> 00:07:24.130
et cetera, would use
reflection at run time

00:07:24.130 --> 00:07:28.000
to analyze these signals
and yank them all together.

00:07:28.000 --> 00:07:32.140
And what we wanted
was, first of all,

00:07:32.140 --> 00:07:35.340
to have some improved
performance on Android.

00:07:35.340 --> 00:07:37.550
And reflection is
pretty slow on dalvik,

00:07:37.550 --> 00:07:39.940
and so that was one of
the inceptions of Dagger,

00:07:39.940 --> 00:07:42.190
one of the motivations for it.

00:07:42.190 --> 00:07:44.930
Secondly, we wanted to
move errors from runtime,

00:07:44.930 --> 00:07:46.640
late in the game,
to compile times.

00:07:46.640 --> 00:07:48.574
It's always good to move
your errors forward.

00:07:48.574 --> 00:07:49.990
And with annotation
processors, we

00:07:49.990 --> 00:07:51.406
found a way that
we could generate

00:07:51.406 --> 00:07:53.290
code that could do what
the reflection did.

00:07:53.290 --> 00:07:56.810
Because we did the reflective
analysis at compile time.

00:07:56.810 --> 00:07:58.840
And we could also omit
the errors and warnings,

00:07:58.840 --> 00:08:02.272
as Eamonn mentioned, so we
could actually turn these wiring

00:08:02.272 --> 00:08:03.730
errors that you
would normally have

00:08:03.730 --> 00:08:06.950
to do some kind of
an internal logging

00:08:06.950 --> 00:08:10.460
system, or an
internal observation,

00:08:10.460 --> 00:08:12.210
to figure out what
is my wiring, you

00:08:12.210 --> 00:08:13.730
can now see it at compile time.

00:08:13.730 --> 00:08:15.190
You know when you got it wrong.

00:08:15.190 --> 00:08:17.524
And it'll catch cycles and
all of these sorts of things.

00:08:17.524 --> 00:08:19.773
MALE SPEAKER: So you mentioned
that mobile and Android

00:08:19.773 --> 00:08:21.610
in particular was
the prime motivation.

00:08:21.610 --> 00:08:22.360
CHRISTIAN GRUBER: That
was the original, yeah.

00:08:22.360 --> 00:08:22.700
MALE SPEAKER: The original one.

00:08:22.700 --> 00:08:23.750
So has this evolved?

00:08:23.750 --> 00:08:24.750
Because it sounds like--

00:08:24.750 --> 00:08:25.430
CHRISTIAN GRUBER:
It has involved.

00:08:25.430 --> 00:08:25.720
MALE SPEAKER: Yes.

00:08:25.720 --> 00:08:27.511
There are a number of
things you cannot do,

00:08:27.511 --> 00:08:29.330
because you're doing
stuff at compile time.

00:08:29.330 --> 00:08:31.341
So you cannot be
as dynamic, and--

00:08:31.341 --> 00:08:32.299
CHRISTIAN GRUBER: Yeah.

00:08:32.299 --> 00:08:36.400
And to be clear,
we've never had it

00:08:36.400 --> 00:08:40.312
as a goal to be as fully
dynamic as the runtime based

00:08:40.312 --> 00:08:41.520
dependency injection systems.

00:08:41.520 --> 00:08:44.049
Like Juice will always
have more capabilities,

00:08:44.049 --> 00:08:45.930
because it can dynamically
slurp things up

00:08:45.930 --> 00:08:47.750
at the last minute,
which we will never

00:08:47.750 --> 00:08:49.360
be able to do quite the same.

00:08:49.360 --> 00:08:52.590
Although we found that a lot
of places where we were using

00:08:52.590 --> 00:08:55.710
reflection, like graph
analysis for example,

00:08:55.710 --> 00:08:57.390
that we're doing
at compile time,

00:08:57.390 --> 00:09:02.580
there are other kinds of, sort
of the assembling of new things

00:09:02.580 --> 00:09:05.030
that is often done at
reflection, that we found

00:09:05.030 --> 00:09:06.790
we can also do at compile time.

00:09:06.790 --> 00:09:10.270
So we have some people that
had implemented plug-in systems

00:09:10.270 --> 00:09:12.719
on top of Juice, and they
were trying to use Dagger.

00:09:12.719 --> 00:09:14.510
And they were like,
well how do we do that?

00:09:14.510 --> 00:09:17.430
Because we can't
dynamically build the shell

00:09:17.430 --> 00:09:19.380
around this thing,
because it's static.

00:09:19.380 --> 00:09:21.290
And they just
turned their plug-in

00:09:21.290 --> 00:09:24.490
into a Dagger-like
annotation processor system

00:09:24.490 --> 00:09:26.820
so they would generate
dagger modules which

00:09:26.820 --> 00:09:29.740
then our processor would
generate the resulting DI

00:09:29.740 --> 00:09:30.900
code for.

00:09:30.900 --> 00:09:33.700
And it just works amazingly
well for that sort of thing.

00:09:33.700 --> 00:09:38.720
So we just kept pushing the
reflection problem further out

00:09:38.720 --> 00:09:42.180
and got a lot of the
benefits and even layers

00:09:42.180 --> 00:09:42.956
on top of dagger.

00:09:42.956 --> 00:09:44.080
It was kind of fascinating.

00:09:44.080 --> 00:09:46.620
MALE SPEAKER: So same
question is for AutoValue.

00:09:46.620 --> 00:09:47.700
What is Dagger 2?

00:09:47.700 --> 00:09:49.902
We're talking mostly about
Dagger 2 here by the way.

00:09:49.902 --> 00:09:51.360
CHRISTIAN GRUBER:
I should mention,

00:09:51.360 --> 00:09:54.010
so Dagger 1 did the exact same
thing that we're talking about.

00:09:54.010 --> 00:09:56.326
But Dagger 2, we went
fully compile time.

00:09:56.326 --> 00:09:57.700
There was still
some loading that

00:09:57.700 --> 00:09:59.490
was going on in
reflection, and we've

00:09:59.490 --> 00:10:01.424
eliminated all of
that with Dagger 2.

00:10:01.424 --> 00:10:03.090
MALE SPEAKER: And
then where are we now?

00:10:03.090 --> 00:10:04.310
Can I use Dagger 2?

00:10:04.310 --> 00:10:08.080
What has Google been doing in
terms of contributing and using

00:10:08.080 --> 00:10:08.990
Dagger 2?

00:10:08.990 --> 00:10:11.530
CHRISTIAN GRUBER: So Dagger
1 was a joint project

00:10:11.530 --> 00:10:12.560
with Google and Square.

00:10:12.560 --> 00:10:14.260
Dagger 2 is still
a joint project

00:10:14.260 --> 00:10:16.730
in that Square has been
consulting with us and helping,

00:10:16.730 --> 00:10:19.770
and we've been workshopping all
of the ideas with the Square

00:10:19.770 --> 00:10:20.930
guys.

00:10:20.930 --> 00:10:22.380
But primarily,
the implementation

00:10:22.380 --> 00:10:24.620
has been written inside Google.

00:10:24.620 --> 00:10:27.740
We are using it in production
on a couple of servers

00:10:27.740 --> 00:10:30.330
and quite a few Android
applications, Dagger 2.

00:10:30.330 --> 00:10:32.470
So at head, it works.

00:10:32.470 --> 00:10:34.310
It's missing a lot
of important things,

00:10:34.310 --> 00:10:36.650
like the validations
aren't fully built out.

00:10:36.650 --> 00:10:38.764
So if you get errors,
sometimes in your graph

00:10:38.764 --> 00:10:40.180
you'll sometimes
get a stack trace

00:10:40.180 --> 00:10:41.596
where you should
get a nice error.

00:10:41.596 --> 00:10:45.100
And that's just stuff we
have to improve and work on.

00:10:45.100 --> 00:10:47.140
It's in a pre-alpha state.

00:10:47.140 --> 00:10:48.900
We haven't released
a formal alpha,

00:10:48.900 --> 00:10:52.940
but we are pushing snapshots to
Sonatype snapshot repositories.

00:10:52.940 --> 00:10:58.300
So if you use Maven, you can use
Dagger 2 as 2.0 dash snapshot

00:10:58.300 --> 00:11:01.380
version, and you'll just
get the latest from head.

00:11:01.380 --> 00:11:04.180
Every time we push to GitHub,
we get a new version pushed out

00:11:04.180 --> 00:11:05.357
to Sonatype automatically.

00:11:05.357 --> 00:11:06.815
MALE SPEAKER: For
those people that

00:11:06.815 --> 00:11:10.030
have an issue with snapshots,
how long would it be before--?

00:11:10.030 --> 00:11:12.309
CHRISTIAN GRUBER: We're
hoping to put together

00:11:12.309 --> 00:11:14.850
some sort of developer's preview
in the next couple of weeks.

00:11:14.850 --> 00:11:15.290
MALE SPEAKER: A couple of weeks.

00:11:15.290 --> 00:11:16.789
CHRISTIAN GRUBER:
We've just updated

00:11:16.789 --> 00:11:18.510
the documentation
on the website.

00:11:18.510 --> 00:11:22.630
So it is actually-- there is
some documentation now for 2.0.

00:11:22.630 --> 00:11:24.457
So you can get a sense
of how to use it.

00:11:24.457 --> 00:11:26.040
Now that we've done
a couple of talks,

00:11:26.040 --> 00:11:28.290
and Jake Wharton's
doing a talk later today

00:11:28.290 --> 00:11:30.244
here at the conference.

00:11:30.244 --> 00:11:31.910
So we think people
will be in good shape

00:11:31.910 --> 00:11:34.937
to receive a developer preview
in the next couple of weeks.

00:11:34.937 --> 00:11:35.770
MALE SPEAKER: Great.

00:11:35.770 --> 00:11:36.660
CHRISTIAN GRUBER: Yeah.

00:11:36.660 --> 00:11:38.160
MALE SPEAKER: So
I guess that's all

00:11:38.160 --> 00:11:39.535
the time we have for questions.

00:11:39.535 --> 00:11:41.310
Eamonn, thank you very much.

00:11:41.310 --> 00:11:45.430
AutoValue, Dagger, all powered
by annotation processing.

00:11:45.430 --> 00:11:50.680
And with super low overhead, no
runtime dependency whatsoever.

00:11:50.680 --> 00:11:52.569
So thanks for
answering my questions.

00:11:52.569 --> 00:11:53.860
EAMONN MCMANUS: Yeah, pleasure.

00:11:53.860 --> 00:11:55.490
MALE SPEAKER: And do
check out those projects.

00:11:55.490 --> 00:11:56.090
Thank you very much.

00:11:56.090 --> 00:11:57.173
EAMONN MCMANUS: Thank you.

00:11:57.173 --> 00:11:58.240
CHRISTIAN GRUBER: Thanks.

00:11:58.240 --> 00:12:14.748
 

