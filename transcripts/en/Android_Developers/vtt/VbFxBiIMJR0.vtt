WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:04:40.500
[MUSIC PLAYING]

00:04:40.500 --> 00:04:43.980
ANKUR KOTWAL: Welcome to another
Backstage on making

00:04:43.980 --> 00:04:44.730
apps beautiful.

00:04:44.730 --> 00:04:48.660
This is part two after all five
parts of the DevBytes

00:04:48.660 --> 00:04:51.930
series, Making Apps Beautiful,
have been released.

00:04:51.930 --> 00:04:53.160
And I'm joined by--

00:04:53.160 --> 00:04:54.700
JAN-FELIX SCHMAKEIT: Yeah,
I'm Jan-Felix Schmakeit.

00:04:54.700 --> 00:04:56.820
I was here last time as well.

00:04:56.820 --> 00:04:59.440
I'm based here in Sydney on
the Android Developer

00:04:59.440 --> 00:04:59.950
Relations Team.

00:04:59.950 --> 00:05:01.910
ANKUR KOTWAL: And I'm Ankur
Kotwal, and I'm a Software

00:05:01.910 --> 00:05:03.380
Engineer on the Android
Developer

00:05:03.380 --> 00:05:06.050
Relations Team as well.

00:05:06.050 --> 00:05:10.050
We had some good discussions
last time, but we've had quite

00:05:10.050 --> 00:05:12.560
a lot of questions since.

00:05:12.560 --> 00:05:14.910
So let's talk about the elephant
in the room to begin

00:05:14.910 --> 00:05:16.630
with, which is the
source code.

00:05:16.630 --> 00:05:20.900
In Making Apps Beautiful, we
showed different stages of the

00:05:20.900 --> 00:05:24.640
apps, the app that we were
building, and people were

00:05:24.640 --> 00:05:26.480
asking if we were going to
release the source code.

00:05:26.480 --> 00:05:28.280
And the answer is yes, we're
going to do that.

00:05:28.280 --> 00:05:29.570
We're going to do that
very shortly.

00:05:29.570 --> 00:05:33.180
I'm just cleaning it up and
preparing it so that you can

00:05:33.180 --> 00:05:33.730
have a look.

00:05:33.730 --> 00:05:34.890
JAN-FELIX SCHMAKEIT: Yeah,
that's fantastic.

00:05:34.890 --> 00:05:36.170
I think people are really
excited about this.

00:05:36.170 --> 00:05:37.340
We didn't want to dig
through it again.

00:05:37.340 --> 00:05:38.336
ANKUR KOTWAL: Yeah.

00:05:38.336 --> 00:05:41.280
We also had some followup
questions from the last--

00:05:41.280 --> 00:05:42.270
JAN-FELIX SCHMAKEIT: Yeah.

00:05:42.270 --> 00:05:45.420
We had a very popular question
on the cards layout that a lot

00:05:45.420 --> 00:05:47.040
of people seem really
excited about.

00:05:47.040 --> 00:05:50.070
And there's also a followup
question from the [INAUDIBLE]

00:05:50.070 --> 00:05:52.110
who was asking a bit more
about the specifics of

00:05:52.110 --> 00:05:55.420
implementing a cards layout
that's dynamic, so you could

00:05:55.420 --> 00:05:57.500
have different size
cards together.

00:05:57.500 --> 00:06:00.770
And I thought about this a bit
more, and I think that there's

00:06:00.770 --> 00:06:02.670
lots of different ways
you can do this.

00:06:02.670 --> 00:06:04.870
One way we've done it is
that we have actually

00:06:04.870 --> 00:06:05.950
used our own ViewGroup.

00:06:05.950 --> 00:06:07.230
So if you want to have something
that's a bit more

00:06:07.230 --> 00:06:09.820
abstract, you can just add
your own content to it.

00:06:09.820 --> 00:06:11.570
I think there's a bit
more work involved.

00:06:11.570 --> 00:06:15.570
You would actually have to
look at [INAUDIBLE] a

00:06:15.570 --> 00:06:18.610
ViewGroup, doing your own
measurements and layouts, and

00:06:18.610 --> 00:06:19.650
all that kind of stuff.

00:06:19.650 --> 00:06:22.380
But if it's just something as
simple as displaying different

00:06:22.380 --> 00:06:27.670
size content and it's just
a list, basically, just a

00:06:27.670 --> 00:06:30.945
resizable layout might just do
the trick, and the 9-patch in

00:06:30.945 --> 00:06:31.700
the background.

00:06:31.700 --> 00:06:34.440
So there might be a bit more
work involved, but simply

00:06:34.440 --> 00:06:36.060
using a 9-patch and different
size containers

00:06:36.060 --> 00:06:37.050
might work for you.

00:06:37.050 --> 00:06:37.800
ANKUR KOTWAL: Yeah.

00:06:37.800 --> 00:06:40.650
And then just to followup as
well, the person was asking

00:06:40.650 --> 00:06:42.740
about a 48 dp rhythm.

00:06:42.740 --> 00:06:45.400
Now for when you're talking
about something that's similar

00:06:45.400 --> 00:06:49.580
to the cards layout, 48 dps,
just have a look at it.

00:06:49.580 --> 00:06:51.920
It might not be quite right
because typically a lot of

00:06:51.920 --> 00:06:54.210
these cards, you tend to have
some rich content, and you

00:06:54.210 --> 00:06:56.940
have some buttons that you
can press as well.

00:06:56.940 --> 00:07:00.620
And if you try to squash all of
that information into a 48

00:07:00.620 --> 00:07:04.760
dp layout, you might find that
you don't have enough space.

00:07:04.760 --> 00:07:08.680
So I wouldn't say that you
need to follow the 48 dp

00:07:08.680 --> 00:07:11.260
rhythm for cards layout
to the letter.

00:07:11.260 --> 00:07:13.600
See what works well, and
provide the better user

00:07:13.600 --> 00:07:13.900
experience.

00:07:13.900 --> 00:07:15.920
JAN-FELIX SCHMAKEIT: And if
you think about how these

00:07:15.920 --> 00:07:17.870
cards layouts have been used
in the past, for example in

00:07:17.870 --> 00:07:20.060
the Play Store, there's always
a big touch target.

00:07:20.060 --> 00:07:22.800
In this case, it's generally the
application icon, or the

00:07:22.800 --> 00:07:23.670
movies icon, or something.

00:07:23.670 --> 00:07:25.680
Always something big
you can hit.

00:07:25.680 --> 00:07:27.020
So it's something to keep
in mind when you

00:07:27.020 --> 00:07:28.330
design a user interface.

00:07:28.330 --> 00:07:29.560
ANKUR KOTWAL: Yeah.

00:07:29.560 --> 00:07:29.900
OK.

00:07:29.900 --> 00:07:31.455
So, yeah, thanks.

00:07:31.455 --> 00:07:32.580
JAN-FELIX SCHMAKEIT: Thanks for
that followup question.

00:07:32.580 --> 00:07:33.040
It was good.

00:07:33.040 --> 00:07:35.400
ANKUR KOTWAL: Yeah,
the [INAUDIBLE].

00:07:35.400 --> 00:07:36.270
OK.

00:07:36.270 --> 00:07:40.890
So we had some questions around
the layout XML files

00:07:40.890 --> 00:07:43.330
that we had in the
tablets episode.

00:07:43.330 --> 00:07:46.660
The questions were actually
around using references rather

00:07:46.660 --> 00:07:52.840
than just putting in your sw600
dp resource folders.

00:07:52.840 --> 00:07:54.270
So do we want to sort of--

00:07:54.270 --> 00:07:56.600
JAN-FELIX SCHMAKEIT: Yeah, so
one big reason for this is

00:07:56.600 --> 00:07:58.640
that you don't want to duplicate
your layouts, right?

00:07:58.640 --> 00:08:01.850
So if you want to reuse your
layouts, it's just much easier

00:08:01.850 --> 00:08:05.620
to just use references rather
than copy and pasting the

00:08:05.620 --> 00:08:08.560
files multiple times in the APK,
and it would blow up the

00:08:08.560 --> 00:08:09.610
APK as well.

00:08:09.610 --> 00:08:12.360
But there's another
reason as well.

00:08:12.360 --> 00:08:15.100
Before Android API level 13--

00:08:15.100 --> 00:08:17.700
it's Android 3.2, Honeycomb--

00:08:17.700 --> 00:08:21.650
you only had these buckets that
allowed you to look at

00:08:21.650 --> 00:08:24.630
the screen size, the actual
screen size, of the device.

00:08:24.630 --> 00:08:27.140
So like small, normal, large,
and extra large screens.

00:08:27.140 --> 00:08:29.540
So a tablet would be
an extra large

00:08:29.540 --> 00:08:30.980
screen bucket, for example.

00:08:30.980 --> 00:08:35.320
And the problem is this really
didn't give you fine-grained

00:08:35.320 --> 00:08:37.230
control, because sometimes
some devices would get

00:08:37.230 --> 00:08:39.230
classified as extra large, but
they're actually a phone, for

00:08:39.230 --> 00:08:39.700
example, right?

00:08:39.700 --> 00:08:42.860
It was really tricky to take
this apart and actually

00:08:42.860 --> 00:08:45.450
provide a tablet-only layout
and a phone-only layout.

00:08:45.450 --> 00:08:51.920
So API level 13 and above, we
actually introduced some

00:08:51.920 --> 00:08:54.400
resource modifiers that you
can use to look at the

00:08:54.400 --> 00:08:55.460
available screen size.

00:08:55.460 --> 00:08:57.660
You can look at the smallest
[INAUDIBLE] that's available

00:08:57.660 --> 00:08:59.910
on the device, and it doesn't
change for rotation.

00:08:59.910 --> 00:09:03.540
So in this case, when you want
to define a layout for a Nexus

00:09:03.540 --> 00:09:07.355
7, for example, like a 7-inch
tablet, you will look at 600

00:09:07.355 --> 00:09:10.810
dp, or a 10-inch tablet
would be 720 dp.

00:09:10.810 --> 00:09:13.030
So that's really
useful as well.

00:09:13.030 --> 00:09:14.890
So this is where these
references come in really

00:09:14.890 --> 00:09:16.810
handy, where you can just
reuse your layouts in

00:09:16.810 --> 00:09:17.460
different ways.

00:09:17.460 --> 00:09:18.070
ANKUR KOTWAL: Yeah.

00:09:18.070 --> 00:09:22.490
Just to add to that as well,
with the qualifiers that we

00:09:22.490 --> 00:09:24.320
added, you'll notice that
they're now numerical.

00:09:24.320 --> 00:09:26.185
So you're talking about
measurements.

00:09:26.185 --> 00:09:28.760
You're talking about physical
sizes of devices.

00:09:28.760 --> 00:09:31.190
Whereas before, when you had
these arbitrary buckets, it

00:09:31.190 --> 00:09:35.050
was getting hard to classify a
device in large or extra large

00:09:35.050 --> 00:09:38.840
because one of the strengths
of the Android ecosystem is

00:09:38.840 --> 00:09:40.770
the variety of screen sizes.

00:09:40.770 --> 00:09:44.290
So you can get small tablets and
large phones that could be

00:09:44.290 --> 00:09:46.470
large, extra large, it
could be medium.

00:09:46.470 --> 00:09:49.590
Whereas when you talk about
these qualifiers, when you say

00:09:49.590 --> 00:09:53.530
600 dp, you're now putting a
physical measurement around

00:09:53.530 --> 00:09:55.880
the dimensions of that device.

00:09:55.880 --> 00:09:57.340
So that's why it works
a lot better.

00:09:57.340 --> 00:09:58.600
JAN-FELIX SCHMAKEIT:
Yeah, exactly.

00:09:58.600 --> 00:10:00.060
And it's also important to
note that this is the

00:10:00.060 --> 00:10:00.870
available size.

00:10:00.870 --> 00:10:03.050
So is this the size that's
actually available to your

00:10:03.050 --> 00:10:03.820
application?

00:10:03.820 --> 00:10:05.720
We're not just talking about
the physical, the actual

00:10:05.720 --> 00:10:06.410
screen size anymore.

00:10:06.410 --> 00:10:08.330
We're talking about what's
actually available for your

00:10:08.330 --> 00:10:09.532
application.

00:10:09.532 --> 00:10:11.200
ANKUR KOTWAL: Great.

00:10:11.200 --> 00:10:13.910
So, do we need resources
for every combination?

00:10:13.910 --> 00:10:15.460
JAN-FELIX SCHMAKEIT:
Not necessarily.

00:10:15.460 --> 00:10:16.320
Good question.

00:10:16.320 --> 00:10:18.870
[LAUGHTER]

00:10:18.870 --> 00:10:20.150
JAN-FELIX SCHMAKEIT: The Android
framework actually

00:10:20.150 --> 00:10:24.120
takes care of this for you, so
it tries to take a good guess

00:10:24.120 --> 00:10:26.930
at what are the best resources
for you to use if you don't

00:10:26.930 --> 00:10:28.940
specify it for every
single combination.

00:10:28.940 --> 00:10:32.710
So for example, if you specify a
phone layout and you specify

00:10:32.710 --> 00:10:37.035
a 7-inch tablet using the 600
dp resource quantifier.

00:10:37.035 --> 00:10:39.910
And you don't specify a 10-inch
layout, you know, a

00:10:39.910 --> 00:10:40.930
bigger tablet layout.

00:10:40.930 --> 00:10:43.425
It would automatically pick the
one that goes for the 600

00:10:43.425 --> 00:10:45.260
dp for the 7-inch tablet.

00:10:45.260 --> 00:10:46.740
So it tries to make
a good guess at

00:10:46.740 --> 00:10:48.680
what's useful for you.

00:10:48.680 --> 00:10:50.290
And you can use it to your
advantage, right?

00:10:50.290 --> 00:10:55.000
So I think it's a good idea to
look at what's specific to

00:10:55.000 --> 00:10:57.890
some of your layouts and how
you can trim down on the

00:10:57.890 --> 00:10:59.930
layouts and resources and
images that you use.

00:10:59.930 --> 00:11:00.380
ANKUR KOTWAL: Yeah.

00:11:00.380 --> 00:11:03.610
I mean, typically we tend to
use the 10-inch qualifier,

00:11:03.610 --> 00:11:09.730
which is 720 dp, the 7-inch
qualifier which is 600 dp, and

00:11:09.730 --> 00:11:11.280
then just not putting
a qualifier,

00:11:11.280 --> 00:11:12.150
which is your fallback.

00:11:12.150 --> 00:11:14.590
So you've got phone,
7-inch tablets,

00:11:14.590 --> 00:11:18.190
10-inch tablets as well.

00:11:18.190 --> 00:11:21.110
So they tend to cater
for really

00:11:21.110 --> 00:11:22.290
the bulk of the devices.

00:11:22.290 --> 00:11:24.940
Unless you're going for
something very specialized,

00:11:24.940 --> 00:11:27.020
which generally we don't
recommend because

00:11:27.020 --> 00:11:30.070
maintainability becomes
more difficult.

00:11:30.070 --> 00:11:32.780
But yeah, three buckets
will get you very far.

00:11:32.780 --> 00:11:34.030
JAN-FELIX SCHMAKEIT:
That's right.

00:11:37.510 --> 00:11:40.150
We talked a tiny bit about
designing for platform

00:11:40.150 --> 00:11:41.890
independence in our series.

00:11:41.890 --> 00:11:44.870
We had the Nexus S. We
had a tablet layout.

00:11:44.870 --> 00:11:46.600
We had a phone layout.

00:11:46.600 --> 00:11:49.590
So let's talk a bit about
this a bit more.

00:11:49.590 --> 00:11:51.150
So do you have any good tips?

00:11:51.150 --> 00:11:53.870
When you want to design a
layout, you want to design an

00:11:53.870 --> 00:11:56.090
app for platform independence,
what are the key things you

00:11:56.090 --> 00:11:57.340
should pay attention
to or that you

00:11:57.340 --> 00:12:00.255
should do in your code?

00:12:00.255 --> 00:12:02.880
ANKUR KOTWAL: Just to clarify,
by platform, what we actually

00:12:02.880 --> 00:12:06.730
meant is device independence,
so we're not linked to a

00:12:06.730 --> 00:12:08.210
particular device size.

00:12:08.210 --> 00:12:13.360
But when you're specifying
layouts, the obvious thing is

00:12:13.360 --> 00:12:16.190
use dps, use density
independent pixels.

00:12:16.190 --> 00:12:17.880
They're physical measurements.

00:12:17.880 --> 00:12:19.840
We have some great documentation
about this, so

00:12:19.840 --> 00:12:23.000
please check it out at
d.android.com if you're not

00:12:23.000 --> 00:12:23.620
sure

00:12:23.620 --> 00:12:27.520
But we also have a special
qualifier or unit of

00:12:27.520 --> 00:12:29.145
measurement called sp.

00:12:29.145 --> 00:12:31.580
Sp is actually what you should
be using for things like

00:12:31.580 --> 00:12:36.190
TextViews because they're
telling you that the text that

00:12:36.190 --> 00:12:38.990
you have in these things like
TextViews, you're going to

00:12:38.990 --> 00:12:41.760
scale that up based on
the user preferences.

00:12:41.760 --> 00:12:44.930
So for example, if the user has
got their accessibility

00:12:44.930 --> 00:12:48.430
settings set so that the
smallest font size is a

00:12:48.430 --> 00:12:52.450
minimum of 14 rather than 12,
then sp will honor that,

00:12:52.450 --> 00:12:53.730
whereas dps won't.

00:12:53.730 --> 00:12:55.960
So for text, use sp's.

00:12:55.960 --> 00:12:57.680
For everything else, use dps.

00:12:57.680 --> 00:12:58.350
JAN-FELIX SCHMAKEIT: Yeah.

00:12:58.350 --> 00:13:00.050
And what about pixels?

00:13:00.050 --> 00:13:00.950
ANKUR KOTWAL: Pixels?

00:13:00.950 --> 00:13:02.540
Never use pixels.

00:13:02.540 --> 00:13:05.120
Never hard code pixel values
in your layout.

00:13:05.120 --> 00:13:09.080
Now obviously, your assets
will tend to have pixels.

00:13:09.080 --> 00:13:12.370
Your images will be using a
pixel coordinate system.

00:13:12.370 --> 00:13:14.330
There's a very simple
mapping to dps.

00:13:14.330 --> 00:13:19.510
But we already talked in Making
Apps Beautiful, those

00:13:19.510 --> 00:13:22.920
DevBytes, about how you can use
those images well, so that

00:13:22.920 --> 00:13:25.570
they kind of stretch nicely,
they may crop.

00:13:25.570 --> 00:13:28.880
So we use centerCrop in all of
the examples that we used.

00:13:28.880 --> 00:13:31.660
So yeah, definitely.

00:13:31.660 --> 00:13:35.490
And you should always, to go
with pixels, make sure you

00:13:35.490 --> 00:13:36.780
don't use absolute layouts.

00:13:36.780 --> 00:13:39.700
Absolute layouts were in a
very early version of the

00:13:39.700 --> 00:13:42.850
platform and were deprecated
a long time ago.

00:13:42.850 --> 00:13:44.840
Our compiler will warn
you about it, so

00:13:44.840 --> 00:13:47.730
please heed those warnings.

00:13:47.730 --> 00:13:52.780
The other thing is make sure you
provide images or assets

00:13:52.780 --> 00:13:56.890
for the different densities, so
that at runtime the device

00:13:56.890 --> 00:13:59.530
isn't having to scale
up a low resolution

00:13:59.530 --> 00:14:01.430
image on an xhdpi device.

00:14:01.430 --> 00:14:02.350
JAN-FELIX SCHMAKEIT:
Yeah, exactly.

00:14:02.350 --> 00:14:04.010
That's actually what's happening
when you put in an

00:14:04.010 --> 00:14:10.120
image asset and you provide it
in a xhdpi or mdpi resource

00:14:10.120 --> 00:14:12.450
folder, but you're not
specifying anything for ldpi

00:14:12.450 --> 00:14:14.055
or any other resources.

00:14:14.055 --> 00:14:16.130
It would actually get scaled
up or scaled down.

00:14:16.130 --> 00:14:19.040
We use extra work for the device
itself, so maybe not

00:14:19.040 --> 00:14:19.490
such a good idea.

00:14:19.490 --> 00:14:22.980
So it's always a good idea to
put these in and process them

00:14:22.980 --> 00:14:23.770
beforehand.

00:14:23.770 --> 00:14:25.860
ANKUR KOTWAL: And taking that
one step further, quite a lot

00:14:25.860 --> 00:14:28.400
of apps will dynamically
download images right from the

00:14:28.400 --> 00:14:31.870
web, so try and provide those
assets on your server or

00:14:31.870 --> 00:14:34.230
whatever content you're getting
so that it comes down

00:14:34.230 --> 00:14:35.340
in the right resolution.

00:14:35.340 --> 00:14:37.500
Or when you fetch it, make sure
you do the conversion, so

00:14:37.500 --> 00:14:39.870
that you're not having to do
it at runtime, but just the

00:14:39.870 --> 00:14:44.000
one download cost at the time
you download it for the

00:14:44.000 --> 00:14:45.580
relevant resolution.

00:14:45.580 --> 00:14:49.610
All right, so we had some
more questions as well.

00:14:49.610 --> 00:14:51.725
JAN-FELIX SCHMAKEIT: Actually,
before we go on, let's see it

00:14:51.725 --> 00:14:53.310
there's anyone on the Hangout.

00:14:53.310 --> 00:14:55.030
If you have any questions,
feel free to join

00:14:55.030 --> 00:14:55.750
our Hangouts on air.

00:14:55.750 --> 00:14:57.675
There's a link post
on our Plus page.

00:14:57.675 --> 00:15:00.010
So if you have any questions,
feel free to just post it in

00:15:00.010 --> 00:15:02.700
chat, and we'll put you up on
the screen if you want to be

00:15:02.700 --> 00:15:03.200
live on air.

00:15:03.200 --> 00:15:05.180
ANKUR KOTWAL: Yeah, so you can
still ask questions and not

00:15:05.180 --> 00:15:06.260
come on the screen
if you like.

00:15:06.260 --> 00:15:07.080
JAN-FELIX SCHMAKEIT:
No pressure.

00:15:07.080 --> 00:15:08.030
ANKUR KOTWAL: Yeah, there's
no pressure.

00:15:08.030 --> 00:15:09.590
People feel shy.

00:15:09.590 --> 00:15:12.450
While we wait for people to ask
us questions, we do have

00:15:12.450 --> 00:15:14.340
others that people submitted.

00:15:14.340 --> 00:15:17.960
Antonio said, "I'd like to know
what do you think about

00:15:17.960 --> 00:15:21.480
using different fonts?"

00:15:21.480 --> 00:15:25.950
Basically, he was saying what if
I don't want to use Roboto,

00:15:25.950 --> 00:15:29.370
and I want to use
a custom font?

00:15:29.370 --> 00:15:31.510
To be honest, the answer is you
can use whatever font you

00:15:31.510 --> 00:15:33.660
like, but at the end of the
day, make sure you've

00:15:33.660 --> 00:15:35.470
considered the different
aspects of the

00:15:35.470 --> 00:15:36.740
type of font you use.

00:15:36.740 --> 00:15:40.920
So does it look great on a
3-inch phone screen, but does

00:15:40.920 --> 00:15:43.430
it blow up well onto
a 10-inch tablet?

00:15:43.430 --> 00:15:45.790
Does it support different
languages, accented

00:15:45.790 --> 00:15:47.220
characters, and so on?

00:15:47.220 --> 00:15:51.780
So by all means, we do encourage
you to use your own

00:15:51.780 --> 00:15:54.170
fonts and ship them with
your app if you'd like.

00:15:54.170 --> 00:15:56.140
Don't make assumptions
about which fonts

00:15:56.140 --> 00:15:57.010
are going to be available.

00:15:57.010 --> 00:16:00.530
So other than Roboto
and Droid Sans.

00:16:00.530 --> 00:16:04.280
Don't make assumptions about
what users are going to have.

00:16:04.280 --> 00:16:08.280
But Antonio said he was from
Spain, so perhaps there's a

00:16:08.280 --> 00:16:11.900
particular font that works
well for the accented

00:16:11.900 --> 00:16:13.910
characters that you
get in Spanish.

00:16:13.910 --> 00:16:14.890
JAN-FELIX SCHMAKEIT:
That's actually an

00:16:14.890 --> 00:16:16.200
important point as well.

00:16:16.200 --> 00:16:18.620
When you're adding custom font,
you have to make sure it

00:16:18.620 --> 00:16:21.200
supports other international
characters as well, especially

00:16:21.200 --> 00:16:22.000
if you have [INAUDIBLE]

00:16:22.000 --> 00:16:24.400
app, where you want to reach
users in other countries and

00:16:24.400 --> 00:16:25.270
other languages.

00:16:25.270 --> 00:16:27.850
So when you add a custom font,
make sure it works for all

00:16:27.850 --> 00:16:29.270
your languages that your
app is relevant

00:16:29.270 --> 00:16:30.810
ANKUR KOTWAL: Yeah.

00:16:30.810 --> 00:16:31.870
OK.

00:16:31.870 --> 00:16:35.450
We had Leander Berg also asking
a question, saying,

00:16:35.450 --> 00:16:38.710
"For tablet optimizations, Nick
Butcher"-- he said Nick,

00:16:38.710 --> 00:16:41.060
but I'm pretty sure it's Nick
Butcher-- "has some

00:16:41.060 --> 00:16:43.650
interesting tips for
his Design Bytes.

00:16:43.650 --> 00:16:47.630
He had a grid view in tablets
and a list view on phones.

00:16:47.630 --> 00:16:48.800
How would I implement this?

00:16:48.800 --> 00:16:51.330
Is it always a grid view, just
with different layouts?

00:16:51.330 --> 00:16:53.250
Or would I switch between
the two?"

00:16:53.250 --> 00:16:55.040
Actually, the option's yours.

00:16:55.040 --> 00:16:57.220
You could just go with a single
grid view that's one

00:16:57.220 --> 00:17:01.660
column on phones and
multi-columns on a tablet, or

00:17:01.660 --> 00:17:02.780
you could switch them around.

00:17:02.780 --> 00:17:06.579
And basically, what you would
do is using those same

00:17:06.579 --> 00:17:09.569
resource qualifiers, you could
have a value that indicated

00:17:09.569 --> 00:17:11.020
whether you're in the
grid view mode or

00:17:11.020 --> 00:17:12.210
the list view mode.

00:17:12.210 --> 00:17:15.579
And conditionally in your code,
when you do a find view

00:17:15.579 --> 00:17:18.710
by ID, you would cast them
to the right type.

00:17:18.710 --> 00:17:21.829
So actually, there is no
right way to do it.

00:17:21.829 --> 00:17:23.140
There's multiple ways
to do it, which is

00:17:23.140 --> 00:17:24.390
always a good thing.

00:17:26.410 --> 00:17:30.600
I mean, it makes sense to use
grid views on tablets because

00:17:30.600 --> 00:17:34.460
especially if you're doing like
a tiled UI, you want to

00:17:34.460 --> 00:17:38.460
be able to use that extra space
that you get on tablets.

00:17:38.460 --> 00:17:39.190
OK.

00:17:39.190 --> 00:17:45.320
So we had some episodes on
performance tuning, and we

00:17:45.320 --> 00:17:49.380
talked in our episode a little
bit about LruCache, the least

00:17:49.380 --> 00:17:50.560
recently used cache.

00:17:50.560 --> 00:17:54.260
It's great, and I hope more and
more people are using it.

00:17:54.260 --> 00:17:58.570
Because as you saw in our
episode, it makes a massive

00:17:58.570 --> 00:18:01.200
difference to the performance of
your app and the experience

00:18:01.200 --> 00:18:03.720
as well, and it tries to do
the right thing by holding

00:18:03.720 --> 00:18:05.550
onto your images as
long as possible.

00:18:05.550 --> 00:18:06.760
So the hard work is
done for you.

00:18:06.760 --> 00:18:09.420
It's just a matter
of utilizing it.

00:18:09.420 --> 00:18:11.310
But there is some other
libraries that

00:18:11.310 --> 00:18:12.330
you can use to fetch--

00:18:12.330 --> 00:18:12.980
JAN-FELIX SCHMAKEIT: Yeah.

00:18:12.980 --> 00:18:14.700
So we didn't talk in our
series, but there are

00:18:14.700 --> 00:18:17.010
obviously a lot of other
libraries you can use to fetch

00:18:17.010 --> 00:18:18.955
images, do some processing
of the UI, and all

00:18:18.955 --> 00:18:19.680
that kind of stuff.

00:18:19.680 --> 00:18:22.250
So you don't have to do all of
the work yourself every single

00:18:22.250 --> 00:18:23.620
time you want to do something.

00:18:23.620 --> 00:18:24.960
One really good library
that we have been

00:18:24.960 --> 00:18:26.560
using is called Volley.

00:18:26.560 --> 00:18:29.060
There was a talk at Google I/O
this year that I would highly

00:18:29.060 --> 00:18:30.520
recommend for you guys
to check out.

00:18:30.520 --> 00:18:34.590
It's a library that's open
source and is part of the

00:18:34.590 --> 00:18:36.630
Android framework as well.

00:18:36.630 --> 00:18:37.790
ANKUR KOTWAL: We use
it extensively.

00:18:37.790 --> 00:18:40.160
It's actually written
by a Googler, Ficus,

00:18:40.160 --> 00:18:42.560
and yeah, it's great.

00:18:42.560 --> 00:18:48.120
It asynchronizes your
web requests.

00:18:48.120 --> 00:18:51.370
And so you can basically have
a very responsive user

00:18:51.370 --> 00:18:53.790
interface that brings
images in in the

00:18:53.790 --> 00:18:54.820
background, for example.

00:18:54.820 --> 00:18:56.200
JAN-FELIX SCHMAKEIT:
It's actually very

00:18:56.200 --> 00:18:57.140
easy to use, actually.

00:18:57.140 --> 00:19:00.070
You basically say here's an
image, here's the URL, here's

00:19:00.070 --> 00:19:01.190
the view where I
want to put it.

00:19:01.190 --> 00:19:03.000
And it goes off, does it
automatically, and updates the

00:19:03.000 --> 00:19:04.500
UI in the right track, and
does all this kind

00:19:04.500 --> 00:19:05.100
of stuff for you.

00:19:05.100 --> 00:19:06.280
It's really handy.

00:19:06.280 --> 00:19:08.670
But you can also use it for
other things, not just images.

00:19:08.670 --> 00:19:10.370
So for example, built
in, I think,

00:19:10.370 --> 00:19:11.650
support for JSON as well.

00:19:11.650 --> 00:19:14.390
So if there's some JSON you want
to fetch from a server,

00:19:14.390 --> 00:19:16.565
you can use the Volley library
for that as well, and it gives

00:19:16.565 --> 00:19:19.300
you back the JSON option, the
JSON array, and it's really,

00:19:19.300 --> 00:19:20.170
really handy.

00:19:20.170 --> 00:19:22.560
And there are all sorts of other
really cool features in

00:19:22.560 --> 00:19:23.000
there, folks.

00:19:23.000 --> 00:19:25.650
For example, does location
for you has really good

00:19:25.650 --> 00:19:26.930
cancellation policies.

00:19:26.930 --> 00:19:28.865
If you want to stop requests,
you can group them together

00:19:28.865 --> 00:19:29.880
and all that kind of stuff.

00:19:29.880 --> 00:19:32.130
I highly recommend checking
that out.

00:19:32.130 --> 00:19:34.130
Having said that, there are a
lot of other libraries out

00:19:34.130 --> 00:19:37.910
there as well that people are
using these days as well, and

00:19:37.910 --> 00:19:40.470
one of the ones was Picasso that
somebody mentioned in a

00:19:40.470 --> 00:19:41.080
YouTube comment.

00:19:41.080 --> 00:19:45.420
So have a look at your app and
see which library does exactly

00:19:45.420 --> 00:19:46.375
what you need to do.

00:19:46.375 --> 00:19:46.980
ANKUR KOTWAL: Yep.

00:19:46.980 --> 00:19:51.560
So that's Picasso, not
Picasa, like the

00:19:51.560 --> 00:19:55.100
photo app and website.

00:19:55.100 --> 00:19:59.150
And I guess the good news since
we recorded the episode

00:19:59.150 --> 00:20:01.830
is that ActionBarCompat
is finally out.

00:20:01.830 --> 00:20:05.810
When we recorded it, we were,
like, "coming soon." But its

00:20:05.810 --> 00:20:08.600
great, it's released, and it's
part of the support library.

00:20:08.600 --> 00:20:10.960
So please grab it, use
it, let us know what

00:20:10.960 --> 00:20:12.565
you think about it.

00:20:12.565 --> 00:20:16.650
We also have a DevByte on using
ActionBarCompat, so it's

00:20:16.650 --> 00:20:17.900
a good way to get you started.

00:20:17.900 --> 00:20:19.150
It's a good primer.

00:20:20.980 --> 00:20:23.340
Now we've had some questions
around, well, should I use

00:20:23.340 --> 00:20:23.730
ActionBarCompat?

00:20:23.730 --> 00:20:26.250
Should I use ActionBarSherlock?

00:20:26.250 --> 00:20:28.140
ActionBarSherlock,
widely popular.

00:20:28.140 --> 00:20:32.580
We talked about it in
our DevByte as well.

00:20:32.580 --> 00:20:34.930
So if you're comfortable with
ActionBarSherlock, go ahead,

00:20:34.930 --> 00:20:36.180
keep using it.

00:20:38.530 --> 00:20:42.000
Both are great libraries, so
use what works for you.

00:20:42.000 --> 00:20:45.540
What we're going to be doing is
as we update the ActionBar

00:20:45.540 --> 00:20:46.780
in the Android framework--

00:20:46.780 --> 00:20:50.110
let's say we do it in a future
version of the Android

00:20:50.110 --> 00:20:50.670
framework--

00:20:50.670 --> 00:20:53.410
we're going to make sure that
ActionBarCompat is also kept

00:20:53.410 --> 00:20:54.280
up to date.

00:20:54.280 --> 00:20:57.660
So that's one of the things that
you'll get straight away

00:20:57.660 --> 00:20:58.750
from ActionBarCompat.

00:20:58.750 --> 00:21:00.750
But you know, use what
works well for you.

00:21:00.750 --> 00:21:04.400
JAN-FELIX SCHMAKEIT: That's
right, that's right.

00:21:04.400 --> 00:21:06.230
The navigation drawer is
obviously an interesting

00:21:06.230 --> 00:21:08.615
topic, and we kind of showed
it off in beta, I think, in

00:21:08.615 --> 00:21:10.900
one of our last episodes
that he did.

00:21:10.900 --> 00:21:12.560
And that's part of the
software library

00:21:12.560 --> 00:21:13.350
as well, isn't it?

00:21:13.350 --> 00:21:15.090
ANKUR KOTWAL: It is.

00:21:15.090 --> 00:21:16.790
You can grab the classes.

00:21:16.790 --> 00:21:19.380
You can just drop it in
and start using it.

00:21:19.380 --> 00:21:21.810
The nice thing is we talked
about all of the subtleties

00:21:21.810 --> 00:21:24.400
that come with the standardized
Android

00:21:24.400 --> 00:21:26.980
ActionBar, and you get those.

00:21:26.980 --> 00:21:29.370
You don't need to sit down
implementing the nice,

00:21:29.370 --> 00:21:33.310
beautiful fade in, fade out
or the bezel swipes.

00:21:33.310 --> 00:21:35.860
It's all taken care
of for you.

00:21:35.860 --> 00:21:37.990
Using standard components
is always a good thing.

00:21:37.990 --> 00:21:39.875
You don't have to write it and
test the code yourself.

00:21:39.875 --> 00:21:42.335
JAN-FELIX SCHMAKEIT:
That's right.

00:21:42.335 --> 00:21:43.110
ANKUR KOTWAL: OK.

00:21:43.110 --> 00:21:45.900
The last think I think we should
talk about-- we didn't

00:21:45.900 --> 00:21:47.265
really talk about it--
is notifications.

00:21:47.265 --> 00:21:49.360
JAN-FELIX SCHMAKEIT: Yeah.

00:21:49.360 --> 00:21:52.400
That's in NotificationCompat and
support library as well.

00:21:52.400 --> 00:21:57.330
So in Android 4.1, Jelly Bean,
we introduced new types of

00:21:57.330 --> 00:21:57.970
notifications.

00:21:57.970 --> 00:21:59.870
So you can have expanded
notifications.

00:21:59.870 --> 00:22:02.200
You can display a different type
of notification depending

00:22:02.200 --> 00:22:03.800
on whether it's expanded
or not expanded.

00:22:03.800 --> 00:22:06.490
It's really useful for email
messages, for example.

00:22:06.490 --> 00:22:09.590
You can see all of your emails
in unification lists, so you

00:22:09.590 --> 00:22:11.350
can minimize them and
only see that you

00:22:11.350 --> 00:22:13.320
have some unread messages.

00:22:13.320 --> 00:22:15.940
And this is something that
we've added to the

00:22:15.940 --> 00:22:19.290
NotificationCompat in the
support library as well.

00:22:19.290 --> 00:22:23.110
But the problem here is that
expanded notifications are not

00:22:23.110 --> 00:22:24.210
backwards compatible.

00:22:24.210 --> 00:22:26.650
So if you use the
NotificationCompat builder

00:22:26.650 --> 00:22:29.350
that's in the support library,
you can add all of these

00:22:29.350 --> 00:22:32.240
things to your notification, but
it doesn't get displayed

00:22:32.240 --> 00:22:34.120
on lower versions of Android,
unfortunately.

00:22:34.120 --> 00:22:36.410
But the good thing for you, it's
transparent, so you don't

00:22:36.410 --> 00:22:37.920
have to worry about version
checks and all

00:22:37.920 --> 00:22:38.580
that kind of stuff.

00:22:38.580 --> 00:22:39.990
It simply isn't displayed.

00:22:39.990 --> 00:22:43.520
One really big hint I have,
though, is that if you make

00:22:43.520 --> 00:22:46.410
use of these expanded
notifications or notification

00:22:46.410 --> 00:22:48.650
actions-- you know how you can
have buttons at the bottom of

00:22:48.650 --> 00:22:48.935
notifications.

00:22:48.935 --> 00:22:50.910
You can reply straight
away or call someone

00:22:50.910 --> 00:22:52.520
back straight away--

00:22:52.520 --> 00:22:55.500
make sure you always supply
a content intent.

00:22:55.500 --> 00:22:58.200
And the content intent is the
one that's fired when you use

00:22:58.200 --> 00:23:00.180
a taps notification.

00:23:00.180 --> 00:23:02.650
This is basically what gets
fired on lower versions of

00:23:02.650 --> 00:23:03.840
Android, so Gingerbread,
for example.

00:23:03.840 --> 00:23:06.440
We don't have support for these

00:23:06.440 --> 00:23:07.400
notification actions, right?

00:23:07.400 --> 00:23:10.920
So it's always really, really
important to specify the

00:23:10.920 --> 00:23:13.740
content intent that gets fired
off when somebody taps your

00:23:13.740 --> 00:23:15.701
notification.

00:23:15.701 --> 00:23:18.490
ANKUR KOTWAL: Well, it doesn't
look like we have anyone

00:23:18.490 --> 00:23:20.680
asking any questions
on the Hangout.

00:23:20.680 --> 00:23:24.240
I think we've covered the
questions that we had leading

00:23:24.240 --> 00:23:25.070
up to this.

00:23:25.070 --> 00:23:28.110
So on that note, I guess
we'll say goodbye.

00:23:28.110 --> 00:23:29.440
Thank you for joining us.

00:23:29.440 --> 00:23:30.030
JAN-FELIX SCHMAKEIT:
Yeah, thank you.

00:23:30.030 --> 00:23:31.350
ANKUR KOTWAL: And we'll
see you next time.

00:23:31.350 --> 00:23:31.870
JAN-FELIX SCHMAKEIT:
See you next time.

00:23:31.870 --> 00:23:32.350
ANKUR KOTWAL: Bye bye.

00:23:32.350 --> 00:23:33.600
JAN-FELIX SCHMAKEIT: Thanks.

00:23:35.650 --> 00:24:48.213
[MUSIC PLAYING]

