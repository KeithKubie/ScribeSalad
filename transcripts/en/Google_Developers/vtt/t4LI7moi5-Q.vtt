WEBVTT
Kind: captions
Language: en

00:00:08.364 --> 00:00:10.420
BRENDAN KENNY: Hi, my name
is Brendan Kenny.

00:00:10.420 --> 00:00:13.790
I work with the Maps API team.

00:00:13.790 --> 00:00:16.000
And I'm here to tell you as
quickly as possible how you

00:00:16.000 --> 00:00:20.380
can make Maps in your web
browser work with the

00:00:20.380 --> 00:00:22.560
Crossfilter library for
interesting data

00:00:22.560 --> 00:00:23.800
visualization.

00:00:23.800 --> 00:00:27.240
So the Crossfilter library, if
you go to their Github repo,

00:00:27.240 --> 00:00:30.730
is a great library for helping
you explore, exactly as they

00:00:30.730 --> 00:00:34.640
say here, multivariate
data sets.

00:00:34.640 --> 00:00:37.200
So data sets where each of your
data points has multiple

00:00:37.200 --> 00:00:39.030
variables associated with it.

00:00:39.030 --> 00:00:43.260
You want to see how they
interdepend and interrelate.

00:00:43.260 --> 00:00:47.980
So the example they have here
has to do with airline flights

00:00:47.980 --> 00:00:50.810
and the amount of time early
that they might arrive.

00:00:50.810 --> 00:00:54.170
And so you can see here a
classic view where you have

00:00:54.170 --> 00:00:57.480
multiple views into
a data set.

00:00:57.480 --> 00:00:59.120
And we can look and see
how the different

00:00:59.120 --> 00:01:00.350
histograms here compare.

00:01:00.350 --> 00:01:02.630
So we can see that the time of
day is relatively evenly

00:01:02.630 --> 00:01:04.199
distributed throughout
the day, but

00:01:04.199 --> 00:01:06.130
almost nothing at night.

00:01:06.130 --> 00:01:08.725
And you see how the distance
and the arrival delay both

00:01:08.725 --> 00:01:12.010
have this long tail out
towards the right.

00:01:12.010 --> 00:01:14.870
So what's great about modern
computer technology, browser

00:01:14.870 --> 00:01:17.330
technology is we can drop this
in and actually have these

00:01:17.330 --> 00:01:19.240
histograms be interactive.

00:01:19.240 --> 00:01:19.930
So I can look here.

00:01:19.930 --> 00:01:24.100
And I can use this brush tool
to select subsets within one

00:01:24.100 --> 00:01:27.610
of these data sets and see how
that affects the other views

00:01:27.610 --> 00:01:28.410
within the data.

00:01:28.410 --> 00:01:31.370
So you can see, for instance, as
I come out here to the long

00:01:31.370 --> 00:01:36.930
tail, you get actually a large
number of flights that arrive

00:01:36.930 --> 00:01:37.780
quite a bit earlier.

00:01:37.780 --> 00:01:38.900
Because they're so long,
they have more

00:01:38.900 --> 00:01:40.580
time to arrive early.

00:01:40.580 --> 00:01:44.690
Whereas much shorter flights
tend to stick right around

00:01:44.690 --> 00:01:47.250
zero and have that
longer tail.

00:01:47.250 --> 00:01:49.520
And so actually, each of
these is interactive.

00:01:49.520 --> 00:01:52.310
And so I can select subsets
within each, and see how that

00:01:52.310 --> 00:01:54.610
affects the overall data.

00:01:54.610 --> 00:01:59.090
And so this is great because
not only can you find new

00:01:59.090 --> 00:02:01.760
stories in here, because
relationships within data

00:02:01.760 --> 00:02:04.690
tends to not be even over
the full distribution.

00:02:04.690 --> 00:02:08.690
So things that might be true
between relationships between

00:02:08.690 --> 00:02:13.540
long flights and the arrival
delay might not be the same

00:02:13.540 --> 00:02:17.520
relationships that, exactly as
I said, short trips have with

00:02:17.520 --> 00:02:18.870
arrival delay.

00:02:18.870 --> 00:02:20.940
And so if you have just summary
statistics where you

00:02:20.940 --> 00:02:23.830
see the full thing, you're
not going to find those

00:02:23.830 --> 00:02:24.650
relationships.

00:02:24.650 --> 00:02:28.050
The other thing it allows you
to do is allows more lay

00:02:28.050 --> 00:02:30.580
people to come in and discover
things about flights.

00:02:30.580 --> 00:02:33.570
I don't know much about distance
and how that relates

00:02:33.570 --> 00:02:34.950
to arrival delay, really.

00:02:34.950 --> 00:02:37.500
And so just by playing around
with this, I can discover

00:02:37.500 --> 00:02:41.180
things, and then approach things
more methodically after

00:02:41.180 --> 00:02:43.390
I know what I'm trying
to look for.

00:02:43.390 --> 00:02:46.570
So we want to look at how we
can apply this to Maps.

00:02:46.570 --> 00:02:49.080
So Crossfilter is really
great for histograms

00:02:49.080 --> 00:02:50.950
and graphs like this.

00:02:50.950 --> 00:02:52.740
But there's no reason
why we have to limit

00:02:52.740 --> 00:02:53.640
ourselves to that.

00:02:53.640 --> 00:02:55.860
Crossfilter is really
just a data library.

00:02:55.860 --> 00:02:59.810
It just spits out JavaScript
values.

00:02:59.810 --> 00:03:03.040
And so it's up to us to
create this interface.

00:03:03.040 --> 00:03:04.670
In fact, this interfaces
is all D3.

00:03:04.670 --> 00:03:07.000
It's not the Crossfilter
library at all.

00:03:07.000 --> 00:03:08.200
So I wanted to show you
how you could hook

00:03:08.200 --> 00:03:10.440
that up quite quickly.

00:03:10.440 --> 00:03:13.450
So we're going to start off
with an example data set.

00:03:13.450 --> 00:03:14.880
I just created this randomly.

00:03:14.880 --> 00:03:17.110
And I apologize for the
boring variables.

00:03:17.110 --> 00:03:20.360
But it's just a JavaScript array
of JavaScript objects.

00:03:20.360 --> 00:03:22.350
And in each of these objects,
we have a latitude, a

00:03:22.350 --> 00:03:25.985
longitude, and two variables--
a val 1, a val 2, that have

00:03:25.985 --> 00:03:27.840
different distributions
that I've generated.

00:03:27.840 --> 00:03:30.830
And we want to see how they
relate to each other and how

00:03:30.830 --> 00:03:32.720
they relate spatially.

00:03:32.720 --> 00:03:37.330
And so how we introduce that
into Crossfilter is actually

00:03:37.330 --> 00:03:38.360
quite simple.

00:03:38.360 --> 00:03:40.920
The docs are a little daunting
at first because Crossfilter

00:03:40.920 --> 00:03:43.420
is made to be very general,
which is great later on as you

00:03:43.420 --> 00:03:47.605
start trying to expand
the visualization or

00:03:47.605 --> 00:03:50.850
Crossfiltering that you do.

00:03:50.850 --> 00:03:52.990
Being so general is
extremely helpful.

00:03:52.990 --> 00:03:56.410
But it can make it a little
daunting to start at first.

00:03:56.410 --> 00:03:59.160
But here's a really simple way
that you can start out.

00:03:59.160 --> 00:04:02.130
And it's just about as
basic as you can get.

00:04:02.130 --> 00:04:05.090
So we create our filter by just
calling the Crossfilter

00:04:05.090 --> 00:04:09.040
function with our point data,
with that array of points.

00:04:09.040 --> 00:04:11.100
And then, we actually create the
dimensions that we want to

00:04:11.100 --> 00:04:12.230
explore on this data.

00:04:12.230 --> 00:04:14.580
So by default, Crossfilter
doesn't create any dimensions.

00:04:14.580 --> 00:04:17.610
We have to manually make those,
which is actually a

00:04:17.610 --> 00:04:19.440
good thing, because that means
we can pass any JavaScript

00:04:19.440 --> 00:04:20.670
objects in there.

00:04:20.670 --> 00:04:22.180
And they can contain
functions.

00:04:22.180 --> 00:04:24.740
They can have pointers
into the DOM.

00:04:24.740 --> 00:04:26.420
And we don't have to worry
about Crossfilter

00:04:26.420 --> 00:04:27.640
messing that up.

00:04:27.640 --> 00:04:30.060
It also allows us to create
dimensions, variables that

00:04:30.060 --> 00:04:31.140
we're interested in,
that are actually

00:04:31.140 --> 00:04:32.240
derived from the data.

00:04:32.240 --> 00:04:35.880
So maybe we combine two data
points into one dimension that

00:04:35.880 --> 00:04:37.440
we want to explore.

00:04:37.440 --> 00:04:39.190
So that's all the general
stuff you

00:04:39.190 --> 00:04:40.900
can figure out later.

00:04:40.900 --> 00:04:43.400
So for now, we're just going
to make it really easy.

00:04:43.400 --> 00:04:45.150
We're going to say we're
interested in dimension of

00:04:45.150 --> 00:04:47.480
variables that's
just the val 1.

00:04:47.480 --> 00:04:49.430
And this is a function that's
mapped over all the points and

00:04:49.430 --> 00:04:52.680
just returns from each
point the val 1.

00:04:52.680 --> 00:04:54.770
And so we created an array
within Crossfilter

00:04:54.770 --> 00:04:56.380
of all the val 1s.

00:04:56.380 --> 00:04:58.680
And then, we make this grouping,
which is a little

00:04:58.680 --> 00:05:01.390
bit more abstract.

00:05:01.390 --> 00:05:04.410
But if you think of it just as
the histogram where we're

00:05:04.410 --> 00:05:07.820
bucketing them and looking at
the frequency of each bucket

00:05:07.820 --> 00:05:10.890
within the data set, it becomes
a little more clear.

00:05:10.890 --> 00:05:13.860
So I know that val1 varies
over 0 to 10.

00:05:13.860 --> 00:05:16.890
And so I just want to bucket
it by integer since it's

00:05:16.890 --> 00:05:17.430
floating point.

00:05:17.430 --> 00:05:20.110
I just want to floor
it and see it.

00:05:20.110 --> 00:05:23.840
So then, I'm going to create
another dimension for val 2.

00:05:23.840 --> 00:05:25.530
And I again return val 2.

00:05:25.530 --> 00:05:29.620
But val 2 is a much wider range,
I think 0 to 1,000.

00:05:29.620 --> 00:05:31.220
And so I'm going to make
larger buckets.

00:05:31.220 --> 00:05:33.740
And so I'm going to floor
for every 25.

00:05:33.740 --> 00:05:35.700
I'm going to bucket
it, but still keep

00:05:35.700 --> 00:05:37.690
it at the same value.

00:05:37.690 --> 00:05:41.260
So let's take a look at
what that looks like.

00:05:41.260 --> 00:05:43.670
And if I refresh the page, you
can see that we have two

00:05:43.670 --> 00:05:47.160
histograms here-- value 1, which
has this almost normal

00:05:47.160 --> 00:05:49.910
distribution maybe.

00:05:49.910 --> 00:05:51.730
So here's what this
looks like.

00:05:51.730 --> 00:05:52.800
We have two histograms.

00:05:52.800 --> 00:05:55.280
And you can see value 1 has
this normal distribution.

00:05:55.280 --> 00:05:57.720
Value 2 is a little
bit more uniform.

00:05:57.720 --> 00:06:01.990
And I totally ripped out the
histogram and brush code from

00:06:01.990 --> 00:06:06.560
the Crossfilter example and just
adapted it to this data

00:06:06.560 --> 00:06:09.180
set-- or not even adapted,
I literally used it.

00:06:09.180 --> 00:06:12.960
And so now, we can brush and see
how the two things relate

00:06:12.960 --> 00:06:13.930
to each other.

00:06:13.930 --> 00:06:15.500
So that's great.

00:06:15.500 --> 00:06:17.520
And you can see that this
is already helpful.

00:06:17.520 --> 00:06:20.460
If these were meaningful
variables to us, then it would

00:06:20.460 --> 00:06:20.840
be helpful.

00:06:20.840 --> 00:06:23.570
But we want to see again
the spatial component.

00:06:23.570 --> 00:06:27.420
So what we do next is
just add a map.

00:06:27.420 --> 00:06:30.830
And so you saw before that that
array of points each has

00:06:30.830 --> 00:06:32.160
a latlong value.

00:06:32.160 --> 00:06:32.890
So I can add a map.

00:06:32.890 --> 00:06:36.790
And then, I can just, for each
of those points, I can loop

00:06:36.790 --> 00:06:38.560
over that and add a
marker to the map.

00:06:38.560 --> 00:06:40.330
And for each marker,
I just set the

00:06:40.330 --> 00:06:41.730
latlong from that point.

00:06:41.730 --> 00:06:44.610
And now, I have a point
associated with each value.

00:06:44.610 --> 00:06:46.310
And so this isn't a view yet.

00:06:46.310 --> 00:06:48.750
It's really just showing
where those points are.

00:06:48.750 --> 00:06:51.830
So I want to connect these
two views to each other.

00:06:51.830 --> 00:06:57.720
So I need to bind first the map
to Crossfilter, and then

00:06:57.720 --> 00:07:00.160
bind Crossfilter to the map.

00:07:00.160 --> 00:07:01.695
So let's take a look
how to do that.

00:07:01.695 --> 00:07:07.360
So what I want to do is bind the
current view in the map to

00:07:07.360 --> 00:07:09.550
Crossfilter so I can filter
the data based on what's

00:07:09.550 --> 00:07:10.750
currently in view.

00:07:10.750 --> 00:07:13.120
So to do this, I create two
new dimensions, a latitude

00:07:13.120 --> 00:07:14.860
dimension and a longitude
dimension.

00:07:14.860 --> 00:07:18.710
So the simple dimensions that
we had before, or similar to

00:07:18.710 --> 00:07:21.440
those, where they just return
those values directly.

00:07:21.440 --> 00:07:25.700
And now, what I can do is use a
map event on bounds changed

00:07:25.700 --> 00:07:30.360
to actually get the bounds,
the most westward and most

00:07:30.360 --> 00:07:34.430
eastward, and most northward
to most southward.

00:07:34.430 --> 00:07:36.920
And then, I can use those
to actually filter those

00:07:36.920 --> 00:07:38.200
dimensions.

00:07:38.200 --> 00:07:39.190
So I pass these things.

00:07:39.190 --> 00:07:42.420
And I say, this is pretty much
just asking Crossfilter to

00:07:42.420 --> 00:07:44.080
filter out all the data
points that don't

00:07:44.080 --> 00:07:45.660
fall within that range.

00:07:45.660 --> 00:07:47.110
So that's exactly
what we want.

00:07:47.110 --> 00:07:49.400
We're now filtering
on the bounds.

00:07:49.400 --> 00:07:51.690
And now, when we refresh, we
can see how that looks.

00:07:51.690 --> 00:07:55.230
And so you can see as I move
points in and off the screen,

00:07:55.230 --> 00:07:56.810
the histograms below change.

00:07:56.810 --> 00:07:58.920
And this is doing exactly what
we were doing before.

00:07:58.920 --> 00:08:01.190
We were selecting subsets of
the data by brushing within

00:08:01.190 --> 00:08:02.300
the histogram and
seeing how that

00:08:02.300 --> 00:08:04.420
affected the other histogram.

00:08:04.420 --> 00:08:06.630
Now we're seeing, based on the
points that are currently on

00:08:06.630 --> 00:08:09.640
screen, what is the distribution
of the values

00:08:09.640 --> 00:08:11.900
that are associated
with those points?

00:08:11.900 --> 00:08:13.160
So you can imagine
this is helpful.

00:08:13.160 --> 00:08:15.860
As you zoom in, we can see,
just like before where we

00:08:15.860 --> 00:08:18.280
could see the long tail distance
was associated with

00:08:18.280 --> 00:08:19.520
certain patterns.

00:08:19.520 --> 00:08:23.420
We could see spatially as we
zoom into certain areas of the

00:08:23.420 --> 00:08:27.370
United States, maybe certain
values have different patterns

00:08:27.370 --> 00:08:29.200
within that area.

00:08:29.200 --> 00:08:32.030
You could imagine a different
tool where you are actually

00:08:32.030 --> 00:08:35.620
dragging and selecting a
bounding box, or any sort of

00:08:35.620 --> 00:08:36.270
thing like that.

00:08:36.270 --> 00:08:38.900
You're selecting
census blocks.

00:08:38.900 --> 00:08:42.159
And you could affect the
histograms below.

00:08:42.159 --> 00:08:45.210
So now, we need it to go the
other way where selecting

00:08:45.210 --> 00:08:48.730
what's in the histogram drives
what's on the screen.

00:08:48.730 --> 00:08:51.435
So we do that by adding
one final dimension.

00:08:51.435 --> 00:08:54.120
And I just call it
the ID dimension.

00:08:54.120 --> 00:08:56.100
And there might be an easier
way to do this, but this is

00:08:56.100 --> 00:08:58.610
the first way I thought
of doing it.

00:08:58.610 --> 00:08:59.170
And it works OK.

00:08:59.170 --> 00:09:00.240
So we'll use it for now.

00:09:00.240 --> 00:09:03.180
But if anybody has better ideas,
feel free to leave them

00:09:03.180 --> 00:09:03.880
in the comments.

00:09:03.880 --> 00:09:06.690
There's probably a more
idiomatic way.

00:09:06.690 --> 00:09:09.640
So in this, I just
return an ID.

00:09:09.640 --> 00:09:11.310
So this is a little subtle.

00:09:11.310 --> 00:09:16.470
But this is a function that's
mapped over our data with the

00:09:16.470 --> 00:09:19.270
built-in map, array.map.

00:09:19.270 --> 00:09:21.520
The second thing that
you get is that the

00:09:21.520 --> 00:09:22.710
index within the array.

00:09:22.710 --> 00:09:24.970
And so I can just return the
index of that point.

00:09:24.970 --> 00:09:30.190
So I know which point it was
that created the current thing

00:09:30.190 --> 00:09:31.950
that's being filtered.

00:09:31.950 --> 00:09:33.960
And so I make a grouping
of it where it's

00:09:33.960 --> 00:09:35.290
actually the full thing.

00:09:35.290 --> 00:09:36.630
So I have 300 data points.

00:09:36.630 --> 00:09:39.160
So this group is 300 buckets.

00:09:39.160 --> 00:09:42.140
And each bucket only has one of
one thing in it, or nothing

00:09:42.140 --> 00:09:44.930
in it if a point has
been filtered out.

00:09:44.930 --> 00:09:48.410
And so when I created my
markers, I put them in an

00:09:48.410 --> 00:09:52.410
array also that mirrors exactly
the point array.

00:09:52.410 --> 00:09:55.270
And so what I can do is when
I check a bucket with a

00:09:55.270 --> 00:09:59.700
particular ID, I can just go in
and take that ID, that same

00:09:59.700 --> 00:10:02.680
ID, and set it to either visible
or not if that bucket

00:10:02.680 --> 00:10:03.930
is empty or not.

00:10:03.930 --> 00:10:06.450
So that code is that
is right down here,

00:10:06.450 --> 00:10:07.960
where I update markers.

00:10:07.960 --> 00:10:09.780
And so I get the grouping.

00:10:09.780 --> 00:10:11.050
And I do grouping.all.

00:10:11.050 --> 00:10:13.640
And this is something that--

00:10:13.640 --> 00:10:15.370
this is where I'm not totally
sure this is the best

00:10:15.370 --> 00:10:15.820
way of doing it.

00:10:15.820 --> 00:10:18.500
But the nice thing about .all is
that it's not creating the

00:10:18.500 --> 00:10:20.550
new array every time
there's a change.

00:10:20.550 --> 00:10:23.630
It's actually using the same
array over and over again.

00:10:23.630 --> 00:10:26.150
And so, as I said, I just
loop over those points.

00:10:26.150 --> 00:10:28.350
And I just check--

00:10:28.350 --> 00:10:32.140
I use the key, which is
the ID, to look up

00:10:32.140 --> 00:10:34.030
into my markers array.

00:10:34.030 --> 00:10:37.190
And then, I just check if
anything is in that bucket, I

00:10:37.190 --> 00:10:38.580
set that marker to visible.

00:10:38.580 --> 00:10:41.830
And if not, it's set
to invisible.

00:10:41.830 --> 00:10:47.140
And so if I once more refresh
the page, I come back here.

00:10:47.140 --> 00:10:52.640
And you can see that it's still
bound so my view affects

00:10:52.640 --> 00:10:54.190
the Crossfilter.

00:10:54.190 --> 00:10:55.980
And now it goes the other
way, as well.

00:10:55.980 --> 00:10:58.910
When I filter the Crossfilter
using the other histograms, I

00:10:58.910 --> 00:11:02.440
can see that it affects
the markers currently

00:11:02.440 --> 00:11:03.510
drawn on the screen.

00:11:03.510 --> 00:11:09.130
So if I only want the value 2s
that are within this range, it

00:11:09.130 --> 00:11:13.640
will filter the histogram of
value 1s associated with the

00:11:13.640 --> 00:11:14.760
same points.

00:11:14.760 --> 00:11:17.100
But it also affects
the pointers that

00:11:17.100 --> 00:11:18.480
are drawn on screen.

00:11:18.480 --> 00:11:20.220
And so now, we have a
fully bound thing.

00:11:20.220 --> 00:11:23.350
And you can say, things only
within this subset, looks like

00:11:23.350 --> 00:11:24.520
this in value 2.

00:11:24.520 --> 00:11:26.370
And it looks like
this spatially.

00:11:26.370 --> 00:11:28.450
And so once we have this,
you can start doing

00:11:28.450 --> 00:11:30.040
all sorts of things.

00:11:30.040 --> 00:11:34.520
And it gets a little hairy
when you have a bunch of

00:11:34.520 --> 00:11:36.280
markers that are even
more than this.

00:11:36.280 --> 00:11:40.100
So this is about 300 and
actually works quite well.

00:11:40.100 --> 00:11:41.545
There's some performance
things we can do with

00:11:41.545 --> 00:11:42.910
de-bouncing and that
sort of thing.

00:11:42.910 --> 00:11:47.110
But actually, the Maps API
handles it fairly well doing

00:11:47.110 --> 00:11:48.280
exactly that.

00:11:48.280 --> 00:11:49.760
And there's some really
interesting things we can do

00:11:49.760 --> 00:11:54.870
with D3 and the Maps API which
both have kind of strong NVC

00:11:54.870 --> 00:11:59.560
or data driven views.

00:11:59.560 --> 00:12:01.710
And so there's more interesting
things we can with

00:12:01.710 --> 00:12:03.600
binding them together.

00:12:03.600 --> 00:12:06.780
And then, we can take a look at
things like WebGL, where we

00:12:06.780 --> 00:12:08.270
can display many more points.

00:12:08.270 --> 00:12:11.130
And we can express these
filter ranges in a more

00:12:11.130 --> 00:12:13.580
interesting way, rather than
looping over each point.

00:12:13.580 --> 00:12:16.680
And then checking, we can do
some interesting things with

00:12:16.680 --> 00:12:17.840
actually our geometry.

00:12:17.840 --> 00:12:20.030
But those are all talks
for another day.

00:12:20.030 --> 00:12:21.490
So I hope this was helpful.

00:12:21.490 --> 00:12:27.460
Check out the source code and
feel free to make Maps to your

00:12:27.460 --> 00:12:29.450
heart's content.

00:12:29.450 --> 00:12:32.310
We can definitely do more and
more interesting things here,

00:12:32.310 --> 00:12:35.450
and there's no reason to limit
ourselves to just a map or

00:12:35.450 --> 00:12:37.770
just a histogram when we
have so much better

00:12:37.770 --> 00:12:39.020
things we could do.

