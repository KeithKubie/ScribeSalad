WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.640
The browser does a lot
of heavy-lifting for us.

00:00:02.640 --> 00:00:04.620
But as so often in
life, we don't always

00:00:04.620 --> 00:00:06.629
know what we want
right from the start.

00:00:06.629 --> 00:00:09.000
Imagine a website that
wants to show an image

00:00:09.000 --> 00:00:10.115
of the current weather.

00:00:10.115 --> 00:00:11.490
We don't know what
the weather is

00:00:11.490 --> 00:00:14.460
going to be when the user visits
the website in the future.

00:00:14.460 --> 00:00:16.440
Of course, we could have
loaded all the images

00:00:16.440 --> 00:00:18.960
you might possibly need
from the very start,

00:00:18.960 --> 00:00:21.730
but that becomes
impractical really quickly.

00:00:21.730 --> 00:00:24.817
So let's talk about Ajax.

00:00:24.817 --> 00:00:26.699
Ajax is a group of
web technologies

00:00:26.699 --> 00:00:28.679
that let you make
requests programmatically

00:00:28.679 --> 00:00:31.530
with JavaScript instead of
navigating and effectively

00:00:31.530 --> 00:00:33.810
reloading the entire website.

00:00:33.810 --> 00:00:37.160
XMLHttpRequest,
or XHR for short,

00:00:37.159 --> 00:00:40.359
is the most common way
of doing it right now.

00:00:40.359 --> 00:00:44.399
The API of XHR is arguably
confusing and outdated

00:00:44.399 --> 00:00:47.469
compared to what
JavaScript offers nowadays.

00:00:47.469 --> 00:00:50.460
That is why we are going
to skip talking about XHR

00:00:50.460 --> 00:00:53.820
and use its successor
instead, Fetch.

00:00:53.820 --> 00:00:56.789
Fetch does the exact same
thing but with a cleaner

00:00:56.789 --> 00:00:59.189
API utilizing promises,
and therefore, it

00:00:59.189 --> 00:01:02.250
integrates much better with the
rest of the modern JavaScript

00:01:02.250 --> 00:01:03.659
APIs.

00:01:03.659 --> 00:01:05.729
If you want to know
more about promises,

00:01:05.730 --> 00:01:08.230
take a look at our course,
JavaScript Promises,

00:01:08.230 --> 00:01:10.410
linked in the instructor notes.

00:01:10.409 --> 00:01:13.019
With Fetch, you can utilize
all the HTTP methods

00:01:13.019 --> 00:01:16.769
the protocol specifies and have
full control of which headers

00:01:16.769 --> 00:01:18.030
are being sent--

00:01:18.030 --> 00:01:20.390
well, almost all the headers.

00:01:20.390 --> 00:01:22.439
Richard is going to
show you a small tool

00:01:22.439 --> 00:01:25.049
to explore the Fetch API with.

00:01:25.049 --> 00:01:27.420
Open up the networking
tab in your DevTools

00:01:27.420 --> 00:01:30.600
to see if the browser actually
sent the request as you

00:01:30.599 --> 00:01:32.659
specified it.

