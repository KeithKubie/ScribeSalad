WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:03.770
We'll focus on the Drawing library so
we can fulfill Audrey's business need.

00:00:05.350 --> 00:00:08.260
We'll load the drawing library
in the libraries parameter.

00:00:09.400 --> 00:00:10.592
After loading the library,

00:00:10.592 --> 00:00:12.980
we'll need to tell the map that
we plan to draw all over it.

00:00:14.140 --> 00:00:17.480
So we'll create a new object
called the drawingManager

00:00:17.480 --> 00:00:18.610
in our initialize function.

00:00:19.810 --> 00:00:22.610
This allows us to specify
multiple drawing modes and

00:00:22.610 --> 00:00:24.700
the position of the controls on the map.

00:00:25.870 --> 00:00:28.410
I'm copying this right from our
developer site linked in the notes.

00:00:30.010 --> 00:00:34.340
At first, we aren't going to set the map
on the drawingManager, so essentially

00:00:34.340 --> 00:00:37.680
we're initializing it, but we aren't
going to have it appear right away.

00:00:37.680 --> 00:00:40.340
We're telling it that our
default drawing mode and

00:00:40.340 --> 00:00:42.731
our only drawing mode
is going to be polygon.

00:00:43.990 --> 00:00:47.480
Other drawing modes are rectangle,
circle, polyline, and marker.

00:00:48.670 --> 00:00:50.527
These require slightly different
handling than a polygon.

00:00:50.527 --> 00:00:54.060
But polygons are the hardest, so if you
can do this one, you can do anything.

00:00:55.200 --> 00:00:57.790
Next, we'll create a button
to allow the user to

00:00:57.790 --> 00:00:59.510
toggle the drawing tools on and off.

00:01:01.080 --> 00:01:05.209
We'll call it toggle-drawing and
we'll prompt the user to use it.

00:01:05.209 --> 00:01:06.510
We'll also add in some more CSS.

00:01:08.230 --> 00:01:12.040
Next we'll add in an event listener so
that when this button is clicked,

00:01:12.040 --> 00:01:14.780
the drawing tools are either hidden or
shown.

00:01:14.780 --> 00:01:17.240
We'll create a toggleDrawing
function for that and

00:01:17.240 --> 00:01:21.080
pass in the drawingManager that we
created in the initialize function.

00:01:21.080 --> 00:01:24.325
With this function, we're essentially
saying that when the user clicks on

00:01:24.325 --> 00:01:28.840
toggle-drawing, check the map
property on the drawingManager.

00:01:28.840 --> 00:01:31.710
If it's map, set it to null or
hide the drawingManager.

00:01:32.770 --> 00:01:35.095
Or set it to map or
show the drawingManager.

00:01:37.110 --> 00:01:40.310
Okay cool, now we can create
geometric overlays on our map.

00:01:41.590 --> 00:01:43.180
So this still begs the question,

00:01:43.180 --> 00:01:47.040
how do I actually use this to
search within it for listings?

00:01:47.040 --> 00:01:47.579
Back to the code.

00:01:48.640 --> 00:01:52.410
The next order of business is to add an
event listener so that when a polygon is

00:01:52.410 --> 00:01:56.360
drawn on the map, we capture those
points into a polygon and use them.

00:01:57.820 --> 00:02:00.330
I'm going to create
a global polygon variable

00:02:00.330 --> 00:02:03.870
which is changed every time
a user draws a new polygon.

00:02:03.870 --> 00:02:06.290
Next, we'll add the event listener.

00:02:06.290 --> 00:02:09.330
The goal of this event listener is
that when the polygon is complete,

00:02:09.330 --> 00:02:13.360
we're going to iterate through our
markers array, show all of the markers

00:02:13.360 --> 00:02:17.510
that are within the shape and hide all
of the markers that are outside of it.

00:02:17.510 --> 00:02:21.020
The first thing we're going to do is
check on our polygon variable to see if

00:02:21.020 --> 00:02:22.770
it already has a value.

00:02:22.770 --> 00:02:24.580
If it does,
we're going to hide it off the map.

00:02:25.640 --> 00:02:28.650
By doing this, we're limiting
the user to one polygon at a time.

00:02:29.650 --> 00:02:33.690
We could certainly allow multiple,
to let them select different zones.

00:02:33.690 --> 00:02:37.040
For a better user experience, we're
going to assume that the user's done

00:02:37.040 --> 00:02:41.350
drawing when the polygon is completed
and switch the pointer back to normal,

00:02:41.350 --> 00:02:44.230
so that they can click on
the markers after they see them.

00:02:44.230 --> 00:02:47.020
Then we'll capture the overlay
which was drawn and

00:02:47.020 --> 00:02:49.600
assign it to our polygon variable.

00:02:49.600 --> 00:02:52.960
We want the polygon to be editable,
so we'll set this to true.

00:02:52.960 --> 00:02:55.040
We could make it draggable as well.

00:02:55.040 --> 00:02:58.040
And finally, we'll call our
searchWithinPolygon function,

00:02:58.040 --> 00:02:59.760
which we'll create below.

00:02:59.760 --> 00:03:02.350
We also want to make sure
that the search is redone if

00:03:02.350 --> 00:03:04.000
the polygon is edited.

00:03:04.000 --> 00:03:07.467
So we'll add more event listeners
on the polygon itself, checking for

00:03:07.467 --> 00:03:09.448
changes and re-executing the search.

00:03:09.448 --> 00:03:13.670
Let's create our
searchWithinPolygon function.

00:03:13.670 --> 00:03:16.974
This function uses the polygon
that was drawn by the user and

00:03:16.974 --> 00:03:21.161
the marker's position and
uses more geometry library

00:03:21.161 --> 00:03:26.215
functionality to check to see if
the polygon contains the marker.

00:03:26.215 --> 00:03:31.175
If it does, we'll set the map property
to map on each marker, which shows it.

00:03:31.175 --> 00:03:34.275
And if it doesn't,
we'll set it to null, which hides it.

00:03:34.275 --> 00:03:37.245
This is going to result in only
the markers that are within the polygon

00:03:37.245 --> 00:03:39.065
showing on the map.

00:03:39.065 --> 00:03:41.905
Finally we'll add a little bit more
into our toggleDrawing function.

00:03:43.070 --> 00:03:46.320
When the user is done drawing and
turns off the drawing tools,

00:03:46.320 --> 00:03:48.800
we'll assume that they don't want to
see their polygon anymore, so

00:03:48.800 --> 00:03:51.780
we'll remove the overlay, but
we'll keep the markers that appeared.

00:03:53.340 --> 00:03:54.640
So let's test this out.

00:03:54.640 --> 00:03:59.820
I'm going to turn on the drawing tools
and draw a quick polygon, there we go.

00:03:59.820 --> 00:04:01.660
If the user wants to limit
the search to one or

00:04:01.660 --> 00:04:04.250
two city blocks,
we'll see the listings there.

00:04:04.250 --> 00:04:08.265
If they then decide to redraw the shape,
the search will be re-executed.

00:04:10.300 --> 00:04:13.600
If I then turn off the drawing tools,
the shape will disappear, but

00:04:13.600 --> 00:04:14.620
my markers will remain.

00:04:15.678 --> 00:04:20.660
Never fear Ajay, you can do it however
you want with the Google Maps APIs.

00:04:20.660 --> 00:04:22.150
&gt;&gt; Thanks for that Emily.

00:04:22.150 --> 00:04:23.280
I would feel better, but

00:04:23.280 --> 00:04:27.500
I just realized that we keep using lat
longs, and none of our students would

00:04:27.500 --> 00:04:30.560
know the coordinates of
the places they want to use.

00:04:30.560 --> 00:04:31.196
Also, I'm hungry.

00:04:31.196 --> 00:04:32.900
&gt;&gt; You're right.

00:04:32.900 --> 00:04:35.226
We better teach them about
geocoding after the next quiz.

00:04:35.226 --> 00:04:37.024
And here.

00:04:37.024 --> 00:04:39.071
&gt;&gt; Thank you.

