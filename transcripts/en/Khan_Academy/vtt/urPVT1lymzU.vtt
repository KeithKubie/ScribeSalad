WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.250
If you haven't tried
already to write

00:00:02.250 --> 00:00:04.740
your own recursive
Fibonacci function,

00:00:04.740 --> 00:00:08.039
I really encourage you to do
so, or at least to try to do so.

00:00:08.039 --> 00:00:10.980
Give it a serious attempt
before you watch this video.

00:00:10.980 --> 00:00:14.350
But if you have done that,
or if you're feeling lazy,

00:00:14.350 --> 00:00:16.160
I guess you can
watch this video.

00:00:16.160 --> 00:00:18.780
And so we're going to try to
write a recursive Fibonacci

00:00:18.780 --> 00:00:22.130
function according to the specs
that I laid out when I first

00:00:22.130 --> 00:00:25.400
set up the challenge to
write a Fibonacci function.

00:00:25.400 --> 00:00:31.790
So I'll call this Fibonacci
again, and it'll take it.

00:00:31.790 --> 00:00:33.870
It has a parameter here, n.

00:00:33.870 --> 00:00:36.546
So someone will have to
pass an argument to it

00:00:36.546 --> 00:00:39.450
to say which term do we want
of the Fibonacci sequence,

00:00:39.450 --> 00:00:41.200
but here we're going
to do it recursively.

00:00:41.200 --> 00:00:43.241
And what we're going to
see is that it's actually

00:00:43.241 --> 00:00:47.440
very intuitive to write a
Fibonacci function recursively.

00:00:47.440 --> 00:00:48.940
It's almost like magic.

00:00:48.940 --> 00:00:50.981
And later we'll see,
though, it's not necessarily

00:00:50.981 --> 00:00:53.890
the most efficient way to
write a Fibonacci function.

00:00:53.890 --> 00:00:55.970
So what I'm going to do
is whenever you write

00:00:55.970 --> 00:00:57.550
any recursive
program, you really

00:00:57.550 --> 00:00:59.560
need to think about the
base cases really well.

00:00:59.560 --> 00:01:02.540
And the base cases of the
Fibonacci sequence, there's

00:01:02.540 --> 00:01:03.630
actually two base cases.

00:01:03.630 --> 00:01:05.830
There's the 0-th term
and the first term,

00:01:05.830 --> 00:01:07.630
and those are really
given by definition.

00:01:07.630 --> 00:01:16.044
So let's just say if we want the
0-th term, if n is equal to 0,

00:01:16.044 --> 00:01:17.710
well, that means you
want the 0-th term,

00:01:17.710 --> 00:01:20.070
and the 0-th term is actually 0.

00:01:20.070 --> 00:01:29.830
And you could say else
if n is equal to 1,

00:01:29.830 --> 00:01:37.800
then you can return 1,
because the 0-th term is 0.

00:01:37.800 --> 00:01:40.870
The first term in the
Fibonacci sequence is 1.

00:01:40.870 --> 00:01:44.470
And now here is where a little
bit of the magic happens.

00:01:44.470 --> 00:01:47.730
Otherwise return-- and
this is really cool

00:01:47.730 --> 00:01:55.980
here-- the Fibonacci
of n minus 1.

00:01:55.980 --> 00:01:58.900
So whatever the previous term
in the Fibonacci sequence

00:01:58.900 --> 00:02:06.790
is plus Fibonacci of n minus 2.

00:02:06.790 --> 00:02:08.366
And I think this should work.

00:02:08.366 --> 00:02:10.740
And that's why it seems magical,
because all we're saying

00:02:10.740 --> 00:02:12.960
is, hey, look, if you want
the 0-th term, it's 0.

00:02:12.960 --> 00:02:14.840
If you want the
first term, it's 1--

00:02:14.840 --> 00:02:17.460
Let me put two spaces here--
if you want the first term,

00:02:17.460 --> 00:02:19.820
it is 1.

00:02:19.820 --> 00:02:23.010
If you want any other term,
so else-- and this is else

00:02:23.010 --> 00:02:25.390
if-- but else if neither
of these are true,

00:02:25.390 --> 00:02:28.240
if it's neither 0 nor 1,
if it's some other number,

00:02:28.240 --> 00:02:29.656
it's going to be--
and we're going

00:02:29.656 --> 00:02:33.160
to assume that you're inputting
some non-negative integer

00:02:33.160 --> 00:02:35.270
over here.

00:02:35.270 --> 00:02:38.200
This would break down if you
did some non-negative integer

00:02:38.200 --> 00:02:40.530
over the non-negative term.

00:02:40.530 --> 00:02:43.160
But assuming you have
a non-negative integer,

00:02:43.160 --> 00:02:46.230
then you say, look, if it's
not the 0-th or the first term,

00:02:46.230 --> 00:02:51.190
then just take the Fibonacci
of whatever one term

00:02:51.190 --> 00:02:54.409
less than it is, plus
two terms less than that.

00:02:54.409 --> 00:02:55.450
And you could try it out.

00:02:55.450 --> 00:02:59.160
For example, let's say
you took Fibonacci of 2.

00:02:59.160 --> 00:03:01.970
Then n is not 0, so you won't
do this, and n is not 1,

00:03:01.970 --> 00:03:02.970
so you wouldn't do this.

00:03:02.970 --> 00:03:05.210
So you'll say return
Fibonacci of 2 minus 1.

00:03:05.210 --> 00:03:09.080
So that's Fibonacci of 1,
plus Fibonacci of 2 minus 2,

00:03:09.080 --> 00:03:10.495
plus Fibonacci of 0.

00:03:10.495 --> 00:03:13.580
Well, we know Fibonacci
of 1 evaluates to 1,

00:03:13.580 --> 00:03:17.520
and Fibonacci of 0 evaluates
to 0, so it'll be 1 plus 0,

00:03:17.520 --> 00:03:19.440
or just 1.

00:03:19.440 --> 00:03:20.580
And you could keep going.

00:03:20.580 --> 00:03:21.850
Try Fibonacci of 3.

00:03:21.850 --> 00:03:25.299
It'll work because we know
Fibonacci of 0, 1, or 2 works.

00:03:25.299 --> 00:03:26.840
Because Fibonacci
of 3 will boil down

00:03:26.840 --> 00:03:29.140
to Fibonacci of 2
plus Fibonacci of 1,

00:03:29.140 --> 00:03:32.430
we know that Fibonacci of 2
is 1, and Fibonacci of 1 is 1.

00:03:32.430 --> 00:03:35.141
So it'll be 1 plus 1 is 2,
so it'll just keep working.

00:03:35.141 --> 00:03:36.140
And we could try it out.

00:03:36.140 --> 00:03:37.390
Let's just save this.

00:03:37.390 --> 00:03:39.100
Actually I didn't save the
file name, let me just call it

00:03:39.100 --> 00:03:39.985
Recursive Fibonacci.

00:03:46.550 --> 00:03:48.380
It's a dot py file.

00:03:48.380 --> 00:03:50.240
And now let me actually
run the program.

00:03:50.240 --> 00:03:53.115
And all this does is define
the function in my environment.

00:03:53.115 --> 00:03:55.570
And then I'd actually
have to call the function.

00:03:55.570 --> 00:03:57.700
So let me just run it.

00:03:57.700 --> 00:04:04.180
And let me ask for
Fibonacci of 4.

00:04:04.180 --> 00:04:05.420
It gave me the right answer.

00:04:09.930 --> 00:04:12.380
Fibonacci of 10, 55.

00:04:12.380 --> 00:04:14.567
Right answer.

00:04:14.567 --> 00:04:15.650
I could try simple things.

00:04:15.650 --> 00:04:18.600
Fibonacci of 0,
the 0-th term is 0.

00:04:18.600 --> 00:04:19.980
So it all works out.

00:04:19.980 --> 00:04:22.399
So that's why recursion
is kind of magical.

00:04:22.399 --> 00:04:24.190
And if you wanted to
simplify this anymore,

00:04:24.190 --> 00:04:27.040
you might recognize, hey, the
0-th term of the Fibonacci

00:04:27.040 --> 00:04:31.330
sequence is 0; the first term
of the Fibonacci sequence is 1;

00:04:31.330 --> 00:04:34.550
so really if you're
looking for the 0-th term

00:04:34.550 --> 00:04:37.430
or the first term, it's really
the same thing as that number.

00:04:37.430 --> 00:04:39.450
So you could actually, maybe,
simplify this a little bit.

00:04:39.450 --> 00:04:40.908
If you assume that
someone is going

00:04:40.908 --> 00:04:44.670
to input a non-negative
integer over here,

00:04:44.670 --> 00:04:50.140
you could say something
like if n is equal to 0,

00:04:50.140 --> 00:05:01.701
or n is equal to 1, return n.

00:05:01.701 --> 00:05:02.700
Let's see if this works.

00:05:02.700 --> 00:05:05.310
So this simplified our
code up a little bit.

00:05:05.310 --> 00:05:06.750
So let's try to save this.

00:05:06.750 --> 00:05:07.880
And now let's run it.

00:05:11.140 --> 00:05:14.050
And now let's try,

00:05:14.050 --> 00:05:15.240
Fibonacci of 10.

00:05:15.240 --> 00:05:19.120
It still worked, because
really the 0-th term is 0,

00:05:19.120 --> 00:05:23.020
and the first term is 1.

00:05:23.020 --> 00:05:26.230
So it works there, or you
could even simplify it more.

00:05:26.230 --> 00:05:30.630
If n is less than 2, that should
also work, because then if it's

00:05:30.630 --> 00:05:32.940
0 or 1 you're going to return
n, and otherwise you're

00:05:32.940 --> 00:05:36.560
going to do all
of this business.

00:05:36.560 --> 00:05:37.710
So let's try that out.

00:05:37.710 --> 00:05:39.190
So we ran it.

00:05:39.190 --> 00:05:46.510
And let's try Fibonacci of 10.

00:05:46.510 --> 00:05:48.180
Now, it seems like
the computer is

00:05:48.180 --> 00:05:50.200
able to do this really
quickly, and all of that,

00:05:50.200 --> 00:05:51.180
and all the rest of it.

00:05:51.180 --> 00:05:54.310
But if you really want to
see all of the work that's

00:05:54.310 --> 00:05:56.600
being done, all the
calls to Fibonacci,

00:05:56.600 --> 00:05:59.130
what you can do is--
let's put a print in here.

00:05:59.130 --> 00:06:01.010
So that every time
Fibonacci gets called,

00:06:01.010 --> 00:06:10.080
it prints the text
Fibonacci colon.

00:06:10.080 --> 00:06:15.250
And then I'm going to add
to that string of text

00:06:15.250 --> 00:06:18.150
what the argument is.

00:06:18.150 --> 00:06:20.840
So the argument in
this is going to be n,

00:06:20.840 --> 00:06:24.830
and I want to make sure that
it is viewed as a string.

00:06:24.830 --> 00:06:26.610
I'm casting it to a string.

00:06:26.610 --> 00:06:28.575
That's essentially
just taking an integer

00:06:28.575 --> 00:06:30.200
and making sure it's
a string, and then

00:06:30.200 --> 00:06:32.860
when I add to this string,
it'll make it one big string.

00:06:32.860 --> 00:06:34.420
But let's see what this does.

00:06:34.420 --> 00:06:38.870
I'm going to try it out
with lower values first.

00:06:38.870 --> 00:06:40.400
So the function is defined.

00:06:40.400 --> 00:06:47.050
So let me write Fibonacci of 3.

00:06:47.050 --> 00:06:50.320
So notice when I called,
it called Fibonacci of 3.

00:06:50.320 --> 00:06:52.820
Then to do Fibonacci of 3,
it had to call Fibonacci of 2

00:06:52.820 --> 00:06:54.590
and Fibonacci of 1.

00:06:54.590 --> 00:06:59.240
And then to do Fibonacci of 2,
it had to call Fibonacci of 0

00:06:59.240 --> 00:07:00.750
and Fibonacci of 1.

00:07:00.750 --> 00:07:03.370
So it had to do all of
these calls to Fibonacci

00:07:03.370 --> 00:07:05.720
just to calculate
the Fibonacci of 3,

00:07:05.720 --> 00:07:07.590
and then eventually it
gave you the answer.

00:07:07.590 --> 00:07:10.200
If you did Fibonacci of 10,
it's going to go really crazy.

00:07:10.200 --> 00:07:11.650
So I'm not even
going to do that.

00:07:11.650 --> 00:07:14.250
Let me just do Fibonacci
of 6, and you're

00:07:14.250 --> 00:07:17.050
going to see how many calls
to Fibonacci it had to do.

00:07:17.050 --> 00:07:21.130
So it had to do all of
these calls to Fibonacci.

00:07:21.130 --> 00:07:24.760
So it was actually a very
computationally intensive thing

00:07:24.760 --> 00:07:25.600
to do.

00:07:25.600 --> 00:07:27.194
But the computers
are super fast,

00:07:27.194 --> 00:07:28.360
so you don't even notice it.

00:07:28.360 --> 00:07:29.710
But in the future we'll
talk a little bit more

00:07:29.710 --> 00:07:31.970
of how do we think about
how computationally

00:07:31.970 --> 00:07:37.210
intensive different ways of
implementing a function can be.

