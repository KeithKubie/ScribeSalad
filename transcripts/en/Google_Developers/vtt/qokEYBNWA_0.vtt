WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:13.375
[MUSIC PLAYING]

00:00:13.375 --> 00:00:14.000
URS HOLZLE: Hi.

00:00:17.350 --> 00:00:20.037
Good morning, everyone,
and welcome to Google Cloud

00:00:20.037 --> 00:00:23.170
Platform Live here
in San Francisco.

00:00:23.170 --> 00:00:26.210
But I also want to welcome
every one of you who's

00:00:26.210 --> 00:00:30.180
watching from our offices in
Seattle, New York, and London.

00:00:30.180 --> 00:00:32.830
And also from the many viewing
parties, online viewing

00:00:32.830 --> 00:00:36.080
parties, all around the world.

00:00:36.080 --> 00:00:38.680
So I'm Urs Holzle,
and I'm responsible

00:00:38.680 --> 00:00:41.830
for the technical
infrastructure at Google.

00:00:41.830 --> 00:00:45.790
My team, which includes
thousands of engineers,

00:00:45.790 --> 00:00:48.910
builds and runs
the infrastructure

00:00:48.910 --> 00:00:53.170
that all of Google-- and now
the Google Cloud Platform--

00:00:53.170 --> 00:00:53.780
is built on.

00:00:53.780 --> 00:00:56.390
So the data centers, the
networks, the servers,

00:00:56.390 --> 00:00:59.970
and the software
systems on top of that.

00:00:59.970 --> 00:01:03.760
Now I started in 1999
to work with Google,

00:01:03.760 --> 00:01:06.080
and it's really
gratifying for me

00:01:06.080 --> 00:01:10.140
to see that this platform, this
super-efficient and scalable

00:01:10.140 --> 00:01:14.840
and fast, worldwide platform
is now available for everyone

00:01:14.840 --> 00:01:19.800
to use, to deploy applications
to pretty much any device,

00:01:19.800 --> 00:01:23.880
any user, pretty much
anywhere in the world.

00:01:23.880 --> 00:01:29.080
Now, the Google Cloud
Platform is a central part

00:01:29.080 --> 00:01:32.050
of our infrastructure
development.

00:01:32.050 --> 00:01:33.920
And we're investing
heavily in it

00:01:33.920 --> 00:01:37.440
to make it as great a
platform for external users

00:01:37.440 --> 00:01:41.560
as it has been for
internal users at Google.

00:01:41.560 --> 00:01:44.680
So we're laying the
groundwork for years and years

00:01:44.680 --> 00:01:47.780
of improvements and innovation.

00:01:47.780 --> 00:01:50.870
And while we already
have a strong platform,

00:01:50.870 --> 00:01:53.930
these are the early days, so
you can expect a lot more.

00:01:53.930 --> 00:01:56.710
There's many things that are
still hard in a platform.

00:01:56.710 --> 00:02:00.330
But we see a clear path to
making developers phenomenally

00:02:00.330 --> 00:02:02.890
more productive.

00:02:02.890 --> 00:02:04.510
And build applications.

00:02:04.510 --> 00:02:07.230
They really take advantage
of our platform and all

00:02:07.230 --> 00:02:09.360
the services that it has to use.

00:02:09.360 --> 00:02:13.080
Be that storage, compute,
or higher level things

00:02:13.080 --> 00:02:16.530
like maps or speech
recognition or translation.

00:02:16.530 --> 00:02:20.070
Google is really committed
to the Google Cloud Platform.

00:02:20.070 --> 00:02:23.740
And as you'll see today, we'll
be introducing new features

00:02:23.740 --> 00:02:26.240
at a pretty rapid pace.

00:02:26.240 --> 00:02:29.350
So today, I want to
spend my time with you

00:02:29.350 --> 00:02:33.620
on three particular
themes or topics.

00:02:33.620 --> 00:02:36.120
First, a quick look
back at what we've

00:02:36.120 --> 00:02:39.080
done in the last
12 months or so.

00:02:39.080 --> 00:02:43.580
But then second, while we've
already accomplished a lot,

00:02:43.580 --> 00:02:45.520
I want to talk
about the challenges

00:02:45.520 --> 00:02:48.760
that people still
face in the cloud.

00:02:48.760 --> 00:02:51.810
There's a lot of ways in
which the promise of the cloud

00:02:51.810 --> 00:02:53.420
isn't fully met yet.

00:02:53.420 --> 00:02:56.100
And we see that as
a major opportunity.

00:02:56.100 --> 00:02:58.810
So we want to make developers
much more productive.

00:02:58.810 --> 00:03:01.430
And so in the third
part I'll talk

00:03:01.430 --> 00:03:04.260
about how we are
going to do that.

00:03:04.260 --> 00:03:07.830
Today we're announcing new
functionality, new pricing,

00:03:07.830 --> 00:03:11.900
that will help you developers
be more productive, more

00:03:11.900 --> 00:03:16.570
economical, and hopefully
have more fun while you do it.

00:03:16.570 --> 00:03:21.050
So first, let's look at a few
highlights from last year.

00:03:21.050 --> 00:03:23.750
12 months ago-- it's
actually hard to think back

00:03:23.750 --> 00:03:27.170
12 months ago because our world
was so much different back

00:03:27.170 --> 00:03:29.870
then, and we changed
so much since then.

00:03:29.870 --> 00:03:33.870
So obviously at I/O last
May, here in San Francisco,

00:03:33.870 --> 00:03:36.280
we introduced Compute
Engine, so the ability

00:03:36.280 --> 00:03:39.430
to run VMs in
Google data centers.

00:03:39.430 --> 00:03:43.220
And we introduced them
with a few cool features,

00:03:43.220 --> 00:03:46.450
such as large consistent
disks and per minute billing,

00:03:46.450 --> 00:03:50.140
so you only pay for the
minutes that you actually use.

00:03:50.140 --> 00:03:53.340
We also introduce that at the
same time, PHP for App Engine.

00:03:53.340 --> 00:03:57.380
PHP, obviously, one of the
most popular languages, and PHP

00:03:57.380 --> 00:04:01.080
for App Engine having been one
of the most popular features

00:04:01.080 --> 00:04:03.970
of all time-- feature
requests of all time.

00:04:03.970 --> 00:04:07.520
Then in August, we showed
you Layer 3 load balancing.

00:04:07.520 --> 00:04:09.840
And you might
remember, in November

00:04:09.840 --> 00:04:12.790
when we demoed it,
that it can reach

00:04:12.790 --> 00:04:17.240
a million requests per
second, from a cold start,

00:04:17.240 --> 00:04:20.829
in five seconds with no need
to preprovision or warm up

00:04:20.829 --> 00:04:22.130
anything.

00:04:22.130 --> 00:04:25.720
So even a 1.0 product,
like load balancing,

00:04:25.720 --> 00:04:29.380
is actually pretty
mature and pretty stable.

00:04:29.380 --> 00:04:32.230
And the reason for that is that
it's based on the same code

00:04:32.230 --> 00:04:35.560
base that powers load
balancing for Google.com.

00:04:35.560 --> 00:04:39.380
You're going to see that a
lot from our infrastructure.

00:04:39.380 --> 00:04:42.990
Then in December, we
put Compute Engine

00:04:42.990 --> 00:04:48.420
into GA-- General Availability--
and introduced a few more

00:04:48.420 --> 00:04:51.570
new features there that
I'll talk about in a minute.

00:04:51.570 --> 00:04:54.500
On the data side,
we also did a lot.

00:04:54.500 --> 00:04:59.380
We introduced Cloud Datastore,
our fully managed, NoSQL data

00:04:59.380 --> 00:05:03.130
store that scales to pretty much
anything you can throw at it.

00:05:03.130 --> 00:05:05.810
Based on our very own BigTable,
the system that actually

00:05:05.810 --> 00:05:11.750
started the NoSQL revolution,
we have offline disk import,

00:05:11.750 --> 00:05:15.520
encryption at rest, native
connections for Cloud SQL.

00:05:15.520 --> 00:05:18.370
So one example of where
we're following open

00:05:18.370 --> 00:05:20.740
API so that you can
use all the tools that

00:05:20.740 --> 00:05:23.500
come with an ecosystem
that's been built up

00:05:23.500 --> 00:05:24.490
around these APIs.

00:05:24.490 --> 00:05:28.230
So something we're really
committed to in a Google Cloud.

00:05:28.230 --> 00:05:30.120
Many improvements
to persistent disks.

00:05:30.120 --> 00:05:33.540
And then SQL went GA,
general availability,

00:05:33.540 --> 00:05:40.270
just last month with 99.95%
SLA, larger instance types,

00:05:40.270 --> 00:05:43.486
and encryption of
all data at rest.

00:05:43.486 --> 00:05:45.690
But we didn't stop there.

00:05:45.690 --> 00:05:48.410
We also introduced many
improvements to BigQuery.

00:05:48.410 --> 00:05:52.160
So for example, now you can
join huge tables with ease

00:05:52.160 --> 00:05:55.440
and really do big data
computing at scale.

00:05:55.440 --> 00:05:57.980
We have dedicated
memcache that, again,

00:05:57.980 --> 00:06:01.510
scales to pretty much
arbitrary size and load.

00:06:01.510 --> 00:06:03.000
Lots of other updates.

00:06:03.000 --> 00:06:04.960
Mobile backend starter for iOS.

00:06:04.960 --> 00:06:07.650
So now on both
Android and in iOS,

00:06:07.650 --> 00:06:10.550
you can build the backend
for your application

00:06:10.550 --> 00:06:12.780
with very little effort.

00:06:12.780 --> 00:06:17.110
And cloud endpoints,
like you do RESTful APIs,

00:06:17.110 --> 00:06:20.090
for your own applications
with little programming.

00:06:20.090 --> 00:06:23.590
And just last month, we
announced HIPAA support,

00:06:23.590 --> 00:06:25.530
adding to the long
list of certifications

00:06:25.530 --> 00:06:28.870
that our cloud already has.

00:06:28.870 --> 00:06:30.080
So that's great.

00:06:30.080 --> 00:06:35.491
And I want to spend a little
bit more time on one feature.

00:06:35.491 --> 00:06:37.240
Just one of these--
and we couldn't really

00:06:37.240 --> 00:06:39.130
mention all of them--
but one of them

00:06:39.130 --> 00:06:41.240
is live migration
as we announced.

00:06:41.240 --> 00:06:45.090
So when Compute Engine
went to GA last month--

00:06:45.090 --> 00:06:49.630
or last December, it came
with a unique feature

00:06:49.630 --> 00:06:50.640
called live migration.

00:06:50.640 --> 00:06:52.440
Now why is that important?

00:06:52.440 --> 00:06:56.920
Well, as a cloud provider,
you're faced with a dilemma.

00:06:56.920 --> 00:07:01.240
Because you can either have an
up-to-date infrastructure-- you

00:07:01.240 --> 00:07:04.000
know, patch your
operating systems,

00:07:04.000 --> 00:07:06.830
upgrade, introduce
new features, hands-on

00:07:06.830 --> 00:07:11.750
at a rapid pace-- or you
can provide long-running VMs

00:07:11.750 --> 00:07:12.990
to your users.

00:07:12.990 --> 00:07:14.500
But you can't really do both.

00:07:14.500 --> 00:07:17.612
Because if you apply a
security patch to the OS,

00:07:17.612 --> 00:07:19.070
in the underlying
host OS, and then

00:07:19.070 --> 00:07:24.370
have to reboot the machine, the
VM can't really survive that.

00:07:24.370 --> 00:07:27.220
But live migration
solves this dilemma

00:07:27.220 --> 00:07:28.470
and lets us provide both.

00:07:28.470 --> 00:07:31.140
And to show you
how it works, I'd

00:07:31.140 --> 00:07:34.950
like to introduce Chris Elliott
to give you a demo-- here

00:07:34.950 --> 00:07:36.950
you are, Chris--
of live migration.

00:07:42.101 --> 00:07:44.350
CHRIS ELLIOTT: So in order
to demonstrate how seamless

00:07:44.350 --> 00:07:46.220
live migration is
for our customers,

00:07:46.220 --> 00:07:48.340
we built this sample
application here,

00:07:48.340 --> 00:07:51.890
which is going to live stream an
HD video from an instance that

00:07:51.890 --> 00:07:54.030
is undergoing live migration.

00:07:54.030 --> 00:07:56.600
This instance is physically
moving around in our data

00:07:56.600 --> 00:07:59.060
centers while we're live
streaming this video.

00:07:59.060 --> 00:08:00.634
And this happens blazingly fast.

00:08:00.634 --> 00:08:02.050
I'm going to walk
you through what

00:08:02.050 --> 00:08:04.280
you can expect to see here.

00:08:04.280 --> 00:08:06.980
This instance down here,
VOD 1, is the instance

00:08:06.980 --> 00:08:08.780
that'll be streaming the video.

00:08:08.780 --> 00:08:10.510
And once we start
live migration,

00:08:10.510 --> 00:08:13.730
you'll see a spinning wheel
appear on that instance.

00:08:13.730 --> 00:08:15.520
Then it'll briefly
flash yellow, and that

00:08:15.520 --> 00:08:19.250
is when the switch happens
to the new physical host.

00:08:19.250 --> 00:08:22.820
So without further delay
here, I have a terminal window

00:08:22.820 --> 00:08:25.830
into my instance, and I'm
going to start a script that

00:08:25.830 --> 00:08:28.530
is keeping an eye out for
a signal we send to the VM

00:08:28.530 --> 00:08:31.149
when we're running
live migration.

00:08:31.149 --> 00:08:33.440
This script is then going to
fire off to the App Engine

00:08:33.440 --> 00:08:37.910
app you saw earlier
and update that UI.

00:08:37.910 --> 00:08:39.080
So, we're good there.

00:08:39.080 --> 00:08:41.030
Let's jump back over to the UI.

00:08:41.030 --> 00:08:44.380
And I have an engineer
waiting by in Seattle

00:08:44.380 --> 00:08:47.350
to simulate a physical hardware
failure, such as a power

00:08:47.350 --> 00:08:49.820
supply overheating on
this current hardware

00:08:49.820 --> 00:08:50.690
where it's hosted.

00:08:50.690 --> 00:08:52.852
And that will then
trigger live migration.

00:08:52.852 --> 00:08:53.935
So let's get this started.

00:08:59.630 --> 00:09:02.140
And so we should
see, very shortly,

00:09:02.140 --> 00:09:05.665
that this VOD 1 instance
will start live migrating

00:09:05.665 --> 00:09:09.050
once she runs the tool.

00:09:09.050 --> 00:09:11.280
And we'll wait for it
to start live migrating

00:09:11.280 --> 00:09:13.550
until we start
streaming the video.

00:09:13.550 --> 00:09:15.960
And here we go,
1080P video streaming

00:09:15.960 --> 00:09:18.790
while this instance is
undergoing live migration.

00:09:18.790 --> 00:09:20.970
And so this is currently
syncing the two states

00:09:20.970 --> 00:09:22.500
of those physical
machines, getting

00:09:22.500 --> 00:09:25.190
ready to make that switch
over to the new machine.

00:09:25.190 --> 00:09:28.520
And it should happen
any second now,

00:09:28.520 --> 00:09:30.924
because it's amazing how
quickly-- and there it is!

00:09:30.924 --> 00:09:32.590
And now we're on a
new physical machine.

00:09:32.590 --> 00:09:36.005
That is live migration, that
is how quickly we can migrate.

00:09:36.005 --> 00:09:41.791
[APPLAUSE]

00:09:41.791 --> 00:09:42.290
Thanks.

00:09:42.290 --> 00:09:44.373
And there's two points I
wanted to highlight here.

00:09:44.373 --> 00:09:46.880
One is, it's amazing--
it fundamentally

00:09:46.880 --> 00:09:49.680
changes how developers
build on virtual machines.

00:09:49.680 --> 00:09:51.650
We have added
intelligence to that layer

00:09:51.650 --> 00:09:54.250
so we can now proactively
live migrate you

00:09:54.250 --> 00:09:55.470
around hardware issues.

00:09:55.470 --> 00:09:58.170
So you're always going to have
a high performant, consistent

00:09:58.170 --> 00:09:59.480
system.

00:09:59.480 --> 00:10:01.930
Similarly, it allows us to
upgrade under the covers

00:10:01.930 --> 00:10:03.810
so that you always have
the safest and most

00:10:03.810 --> 00:10:06.680
secure environment to
run your workloads on.

00:10:06.680 --> 00:10:10.350
And the other aspect here is
this is completely transparent.

00:10:10.350 --> 00:10:11.590
That is the real magic.

00:10:11.590 --> 00:10:13.690
We built this demo on
signals that are available,

00:10:13.690 --> 00:10:15.120
but you shouldn't even
really care about this

00:10:15.120 --> 00:10:16.200
when you're running.

00:10:16.200 --> 00:10:17.620
During development
and testing, we

00:10:17.620 --> 00:10:19.020
had a test cluster
with customers

00:10:19.020 --> 00:10:20.840
running large
production workloads.

00:10:20.840 --> 00:10:23.480
And they were trying to find
any performance hiccups to find

00:10:23.480 --> 00:10:24.802
when live migration happened.

00:10:24.802 --> 00:10:27.260
We ended up getting email at
the end of the day asking hey,

00:10:27.260 --> 00:10:28.634
are you not doing
live migration?

00:10:28.634 --> 00:10:29.400
What's happening?

00:10:29.400 --> 00:10:32.350
When in reality, we moved
them back and forth 10 times

00:10:32.350 --> 00:10:33.790
that day.

00:10:33.790 --> 00:10:35.350
It really is seamless fast.

00:10:35.350 --> 00:10:36.925
The instance is
exactly the same.

00:10:36.925 --> 00:10:39.160
Same IP, same
configuration, and you

00:10:39.160 --> 00:10:41.570
really don't need to know
about it live migrating at all.

00:10:41.570 --> 00:10:42.730
And at the end of the
day, the only thing

00:10:42.730 --> 00:10:44.370
that actually tells
you it migrated

00:10:44.370 --> 00:10:46.180
is a little note in
your operations log.

00:10:46.180 --> 00:10:46.850
That's it.

00:10:46.850 --> 00:10:49.340
And this is how we can--one of
the ways we can provide high

00:10:49.340 --> 00:10:51.520
performance computing with
Compute Engine and give

00:10:51.520 --> 00:10:54.310
developers the consistency
they expect from Google.

00:10:54.310 --> 00:10:54.990
Thanks.

00:10:54.990 --> 00:10:59.702
[APPLAUSE]

00:10:59.702 --> 00:11:00.910
URS HOLZLE: Thank you, Chris.

00:11:00.910 --> 00:11:02.534
So you can see, even
though our VMs may

00:11:02.534 --> 00:11:04.400
look similar to
other VMs, there's

00:11:04.400 --> 00:11:06.840
really a lot of innovation
under the covers

00:11:06.840 --> 00:11:09.120
that make it a unique platform.

00:11:09.120 --> 00:11:11.850
Now let's take a look
at what kind of adoption

00:11:11.850 --> 00:11:13.120
we've been seeing.

00:11:13.120 --> 00:11:16.870
We now have over 4.75
active applications

00:11:16.870 --> 00:11:19.060
running in a Google
Cloud Platform,

00:11:19.060 --> 00:11:23.090
continuing the strong trend
that we've seen last year.

00:11:23.090 --> 00:11:27.620
And App Engine alone gets over
28 billion front end requests

00:11:27.620 --> 00:11:29.610
per day, every day.

00:11:29.610 --> 00:11:33.970
So for comparison, that's more
than 10 Wikipedias-- worldwide

00:11:33.970 --> 00:11:39.290
Wikipedias-- just for
App Engine content.

00:11:39.290 --> 00:11:41.570
On the back end with
Datastore, the numbers

00:11:41.570 --> 00:11:42.690
are even more staggering.

00:11:42.690 --> 00:11:48.220
Datastore currently serves
6.3 trillion requests per day.

00:11:48.220 --> 00:11:50.720
Now trillion is really a
very, very large number,

00:11:50.720 --> 00:11:52.610
so it's hard to put
that in relation.

00:11:52.610 --> 00:11:58.480
One way to visualize it is as 30
operations per day, every day,

00:11:58.480 --> 00:12:00.760
for every person
living on Earth.

00:12:00.760 --> 00:12:04.320
Just in Datastore transactions.

00:12:04.320 --> 00:12:06.030
And finally, we've
been working a lot

00:12:06.030 --> 00:12:09.320
on being not just the fastest
cloud but also the most

00:12:09.320 --> 00:12:10.450
cost effective cloud.

00:12:10.450 --> 00:12:12.680
And it's great to
see this starting

00:12:12.680 --> 00:12:15.780
to be recognized in the press.
"InfoWorld," for example,

00:12:15.780 --> 00:12:18.760
reported that we ran
their benchmarks faster

00:12:18.760 --> 00:12:22.750
than any other cloud
and less expensively

00:12:22.750 --> 00:12:24.890
than any other cloud.

00:12:24.890 --> 00:12:27.860
So who is on Google Cloud today?

00:12:27.860 --> 00:12:29.910
Now our customers range
from small startups

00:12:29.910 --> 00:12:33.030
to public companies to
large consumer services,

00:12:33.030 --> 00:12:35.020
really all across the board.

00:12:35.020 --> 00:12:37.570
Some of them are running their
entire business on the Google

00:12:37.570 --> 00:12:40.270
Cloud, and others
are taking advantage

00:12:40.270 --> 00:12:42.180
of just certain parts
of their workload

00:12:42.180 --> 00:12:44.840
that fit really
well into our cloud.

00:12:44.840 --> 00:12:47.370
So Costco, for example,
runs their entire websites

00:12:47.370 --> 00:12:50.200
in several countries
on the cloud platforms.

00:12:50.200 --> 00:12:53.620
Citrix runs their
developer platform.

00:12:53.620 --> 00:12:56.530
Netflix, Zulily.

00:12:56.530 --> 00:12:59.180
TiVo uses our storage.

00:12:59.180 --> 00:13:04.070
Airbnb and Zillow use
our translate API.

00:13:04.070 --> 00:13:09.210
Phillips is developing-- or is
deploying their new light bulb

00:13:09.210 --> 00:13:11.380
using the Google Cloud.

00:13:11.380 --> 00:13:15.030
And we power Khan Academy,
optimizing millions

00:13:15.030 --> 00:13:16.390
of other websites.

00:13:16.390 --> 00:13:19.990
And Wicks for example,
or WebFilings,

00:13:19.990 --> 00:13:24.630
are two businesses that are
entirely based on Google Cloud.

00:13:24.630 --> 00:13:30.150
So, last month, we
traveled to Ames, Iowa,

00:13:30.150 --> 00:13:32.400
to visit WebFilings.

00:13:32.400 --> 00:13:34.120
A company that you
may not have heard of,

00:13:34.120 --> 00:13:40.610
but that in three years captured
60% of the Fortune 500 market

00:13:40.610 --> 00:13:42.330
for financial disclosures.

00:13:42.330 --> 00:13:44.680
And so, let's have
a look of how they

00:13:44.680 --> 00:13:47.930
do it using the
Google Cloud Platform.

00:13:47.930 --> 00:13:48.810
[VIDEO PLAYBACK]

00:13:48.810 --> 00:13:51.830
-We hear all the time when
we talk about WebFilings

00:13:51.830 --> 00:13:55.240
that people are surprised that
we're based in Ames, Iowa.

00:13:55.240 --> 00:13:58.080
People do expect us to
be in Silicon Valley

00:13:58.080 --> 00:14:01.140
because we're very much a
Silicon Valley type of company.

00:14:01.140 --> 00:14:03.950
At WebFilings, we
build applications

00:14:03.950 --> 00:14:06.810
that help companies build
their financial reports.

00:14:06.810 --> 00:14:09.160
-WebFilings started
the summer of 2008.

00:14:09.160 --> 00:14:12.760
We had eight engineers in one
of the founders' basement.

00:14:12.760 --> 00:14:14.812
We launched our
product early in 2010.

00:14:14.812 --> 00:14:16.310
We grew very rapidly.

00:14:16.310 --> 00:14:18.120
We have 2,000 corporate
customers now.

00:14:18.120 --> 00:14:22.410
60% of the Fortune 500 use
our flagship product, WDesk,

00:14:22.410 --> 00:14:25.170
all running on Google
Cloud Platform.

00:14:25.170 --> 00:14:26.900
-Building on Google
Cloud Platform

00:14:26.900 --> 00:14:30.430
allowed us to spend money on
infrastructure as we needed it

00:14:30.430 --> 00:14:32.300
and not have to
make a big upfront

00:14:32.300 --> 00:14:34.750
investment in data
centers and servers.

00:14:34.750 --> 00:14:37.270
So, as we were growing,
we were able to invest

00:14:37.270 --> 00:14:39.230
in customer service.

00:14:39.230 --> 00:14:41.460
A couple of days ago, I just
looked at the dashboard,

00:14:41.460 --> 00:14:43.690
and I was like, we're
serving a bunch more traffic,

00:14:43.690 --> 00:14:46.070
and I didn't even know
that that happened.

00:14:46.070 --> 00:14:48.750
Cloud Platform scales on demand.

00:14:48.750 --> 00:14:50.830
I don't have to spend my
time thinking about it.

00:14:50.830 --> 00:14:54.230
And it gave the company
a sense of confidence

00:14:54.230 --> 00:14:56.470
with Google running the
data centers that it would

00:14:56.470 --> 00:15:00.020
be a secure place to put
prerelease financial data.

00:15:00.020 --> 00:15:03.600
-Cloud Platform offers
us a variety of services.

00:15:03.600 --> 00:15:06.890
App Engine provides us
with dynamically scalable

00:15:06.890 --> 00:15:09.030
application servers.

00:15:09.030 --> 00:15:12.610
Compute Engine allows us to run
standard off-the-shelf services

00:15:12.610 --> 00:15:14.440
and components.

00:15:14.440 --> 00:15:16.330
We leverage cloud
storage because that

00:15:16.330 --> 00:15:20.760
allows us to efficiently
store and serve large binary

00:15:20.760 --> 00:15:22.030
blobs of data.

00:15:22.030 --> 00:15:25.760
BigQuery allows us to
process and analyze

00:15:25.760 --> 00:15:29.020
large volumes of
data in real time.

00:15:29.020 --> 00:15:31.375
-Being in a company
that's growing this fast

00:15:31.375 --> 00:15:33.835
is really the experience
of a lifetime,

00:15:33.835 --> 00:15:36.210
because we've been able to
build on really cool platforms

00:15:36.210 --> 00:15:37.620
like the Cloud Platform.

00:15:37.620 --> 00:15:40.020
And seeing your
product take off and be

00:15:40.020 --> 00:15:42.750
successful in the marketplace
is an incredible experience.

00:15:50.734 --> 00:15:53.237
[END VIDEO PLAYBACK]

00:15:53.237 --> 00:15:55.070
URS HOLZLE: All right,
so WebFilings is just

00:15:55.070 --> 00:15:59.100
one of the many companies that
I mentioned that really base

00:15:59.100 --> 00:16:01.380
their entire business
on the Google Cloud.

00:16:01.380 --> 00:16:03.640
And obviously they're
all about enterprise.

00:16:03.640 --> 00:16:06.980
So let's look at another company
that's all about the consumer.

00:16:06.980 --> 00:16:10.310
Now we've all heard
about Snapchat.

00:16:10.310 --> 00:16:12.510
A small team of
engineers, they have

00:16:12.510 --> 00:16:15.650
built one of the most
popular applications

00:16:15.650 --> 00:16:17.210
on the internet today.

00:16:17.210 --> 00:16:19.850
And it's been fun for
us to partner with them.

00:16:19.850 --> 00:16:22.805
And so I'm excited today
to welcome Bob Murphy, CTO

00:16:22.805 --> 00:16:26.920
and co-founder of
Snapchat to the stage

00:16:26.920 --> 00:16:30.040
so we can hear their
story first hand.

00:16:30.040 --> 00:16:31.230
Sorry, Bobby.

00:16:31.230 --> 00:16:32.139
Please come up.

00:16:32.139 --> 00:16:36.929
[APPLAUSE]

00:16:40.290 --> 00:16:43.200
All right, so I'm curious
how you actually got

00:16:43.200 --> 00:16:47.960
started with both the idea and
sort of the infrastructure.

00:16:47.960 --> 00:16:50.430
What led you there?

00:16:50.430 --> 00:16:52.430
BOBBY MURPHY: Evan and I
got started on Snapchat

00:16:52.430 --> 00:16:54.250
in summer of 2011.

00:16:54.250 --> 00:16:57.167
Basically understood
that visual content

00:16:57.167 --> 00:16:59.250
was the most engaging,
interesting form of content

00:16:59.250 --> 00:17:02.090
that there was and
wanted to create a way

00:17:02.090 --> 00:17:05.210
to enable that to be a
means of communication

00:17:05.210 --> 00:17:08.521
rather than a piece of content
around which communication

00:17:08.521 --> 00:17:09.270
actually happened.

00:17:09.270 --> 00:17:12.540
So that was the initial
concept behind Snapchat.

00:17:12.540 --> 00:17:16.130
We launched on Google
App Engine because I've

00:17:16.130 --> 00:17:19.000
used App Engine a couple
times for some small projects

00:17:19.000 --> 00:17:22.180
and found it was super
easy to get up and running.

00:17:22.180 --> 00:17:25.000
And at the time, obviously
our biggest priority

00:17:25.000 --> 00:17:27.742
was to get a product
in the hands of users

00:17:27.742 --> 00:17:29.450
in the real world as
quickly as possible.

00:17:29.450 --> 00:17:30.991
And so I turned
again, to App Engine,

00:17:30.991 --> 00:17:32.710
something that I was
very familiar with.

00:17:32.710 --> 00:17:34.930
A platform that very
easily abstracts away

00:17:34.930 --> 00:17:39.030
a lot of the complexities
of building, deploying a web

00:17:39.030 --> 00:17:41.742
backend into the real world.

00:17:41.742 --> 00:17:43.200
And I think at the
time, App Engine

00:17:43.200 --> 00:17:44.449
was actually still in preview.

00:17:44.449 --> 00:17:46.860
So we took a chance
on a new platform.

00:17:46.860 --> 00:17:49.304
But I was fairly confident,
given Google's reputation

00:17:49.304 --> 00:17:50.970
as a very strong
infrastructure company,

00:17:50.970 --> 00:17:52.530
that anything we
built on App Engine

00:17:52.530 --> 00:17:56.372
would eventually
scale if we needed to.

00:17:56.372 --> 00:17:57.330
URS HOLZLE: And it did.

00:17:57.330 --> 00:18:00.680
So, can you tell us a
little bit about how

00:18:00.680 --> 00:18:04.110
that platform supported your
launch of more recent features,

00:18:04.110 --> 00:18:07.659
like the Stories feature that
you launched just recently?

00:18:07.659 --> 00:18:08.950
BOBBY MURPHY: Yeah, absolutely.

00:18:08.950 --> 00:18:10.741
It's actually been very
surprising for us--

00:18:10.741 --> 00:18:14.630
and like, super fortunate--
to see Cloud Platform grow

00:18:14.630 --> 00:18:16.325
its feature set almost
perfectly in sync

00:18:16.325 --> 00:18:17.450
with our own feature needs.

00:18:17.450 --> 00:18:19.840
It's actually funny looking
at the timeline earlier

00:18:19.840 --> 00:18:21.910
because we've taken
advantage of almost all

00:18:21.910 --> 00:18:24.060
of those product offerings
almost immediately

00:18:24.060 --> 00:18:26.018
upon them being released
to the general public.

00:18:26.018 --> 00:18:28.360
So around the time that we
were launching Stories, which

00:18:28.360 --> 00:18:31.952
was fall of last
year, App Engine

00:18:31.952 --> 00:18:33.410
was great for our
core application,

00:18:33.410 --> 00:18:34.460
but we were looking
for something

00:18:34.460 --> 00:18:36.335
a little more flexible
to support the Stories

00:18:36.335 --> 00:18:38.880
architecture, which
currently uses Redis

00:18:38.880 --> 00:18:41.420
on a huge cluster of
Compute Engine instances.

00:18:41.420 --> 00:18:43.900
And so we were looking
around, and that

00:18:43.900 --> 00:18:46.640
was exactly when Compute Engine
launched to the general public.

00:18:46.640 --> 00:18:49.376
And so-- along with
outgoing socket connections

00:18:49.376 --> 00:18:50.750
from App Engine
front end-- so it

00:18:50.750 --> 00:18:52.208
was actually perfect
timing for us,

00:18:52.208 --> 00:18:55.217
and that's worked and
scaled tremendously well.

00:18:55.217 --> 00:18:57.300
URS HOLZLE: So you're
running lots of Redis today?

00:18:57.300 --> 00:18:58.650
BOBBY MURPHY: We are.

00:18:58.650 --> 00:19:02.770
Yeah, we've got 256 master
nodes and two slaves

00:19:02.770 --> 00:19:05.130
per each with a
Twemproxy cluster

00:19:05.130 --> 00:19:08.600
in front and Google load
balancers in front of that.

00:19:08.600 --> 00:19:11.100
URS HOLZLE: And so,
obviously, that all

00:19:11.100 --> 00:19:13.640
came with a huge amount
of growth, right?

00:19:13.640 --> 00:19:15.660
Not just in the beginning,
but actually it's

00:19:15.660 --> 00:19:16.720
really an amazing thing.

00:19:16.720 --> 00:19:18.900
The growth has just
been keeping up.

00:19:18.900 --> 00:19:21.320
So how have we helped you?

00:19:21.320 --> 00:19:22.405
I hope we have helped you.

00:19:22.405 --> 00:19:23.780
BOBBY MURPHY:
Yeah, you guys have

00:19:23.780 --> 00:19:26.310
seen the growth first hand.

00:19:26.310 --> 00:19:28.430
Absolutely, so the
biggest benefit

00:19:28.430 --> 00:19:29.892
is just the fact
that we can focus

00:19:29.892 --> 00:19:32.100
much less on maintaining
infrastructure and much more

00:19:32.100 --> 00:19:34.350
on building new infrastructure
to support the features

00:19:34.350 --> 00:19:37.570
and product developments
that we need.

00:19:37.570 --> 00:19:41.460
In fact, actually, Tim-- one
of our VPs of engineering--

00:19:41.460 --> 00:19:44.020
just last week told me one
of his biggest surprises

00:19:44.020 --> 00:19:46.944
at joining Snapchat
was that not having

00:19:46.944 --> 00:19:49.110
to deal with the operational
headache and complexity

00:19:49.110 --> 00:19:50.910
that he was expecting
and you would expect

00:19:50.910 --> 00:19:53.368
from a company at our growth
rate and at our current scale.

00:19:53.368 --> 00:19:55.930
So yeah, the biggest
benefit is just the fact

00:19:55.930 --> 00:19:58.621
that we can focus less on
maintaining infrastructure

00:19:58.621 --> 00:20:00.120
and much more on
building new stuff.

00:20:00.120 --> 00:20:01.911
URS HOLZLE: And so, as
far as I understand,

00:20:01.911 --> 00:20:04.190
you still don't have an
operations team, really.

00:20:04.190 --> 00:20:06.170
BOBBY MURPHY: No, not really.

00:20:06.170 --> 00:20:09.554
We're at about 25 engineers now.

00:20:09.554 --> 00:20:11.470
Little bit of operational
work here and there.

00:20:11.470 --> 00:20:13.090
But for the most
part, everyone's

00:20:13.090 --> 00:20:14.590
focused on new
feature development.

00:20:14.590 --> 00:20:15.298
URS HOLZLE: Cool.

00:20:15.298 --> 00:20:18.380
So if you had a piece
of advice for anyone

00:20:18.380 --> 00:20:22.460
out there who wants to build
the next Snapchat on the Google

00:20:22.460 --> 00:20:27.521
Cloud Platform, how
should they go about it?

00:20:27.521 --> 00:20:29.020
BOBBY MURPHY: Yeah,
I would just say

00:20:29.020 --> 00:20:31.396
it's a super easy
platform to use.

00:20:31.396 --> 00:20:33.020
We got started on
the App Engine, which

00:20:33.020 --> 00:20:36.900
is amazingly simple to use, and
has scaled tremendously well.

00:20:36.900 --> 00:20:39.130
I've been absolutely
impressed and very surprised

00:20:39.130 --> 00:20:40.740
that it's scaled
as well as it has.

00:20:40.740 --> 00:20:44.150
Certainly thought early on that
the kind of traditional notion

00:20:44.150 --> 00:20:45.830
of you build on
a hosted solution

00:20:45.830 --> 00:20:48.400
and you reach a certain size
at which you have to move off,

00:20:48.400 --> 00:20:52.570
I think is fading, and Google
is paving the way there.

00:20:52.570 --> 00:20:54.362
And so, what's great
about App Engine

00:20:54.362 --> 00:20:56.070
and Cloud Platform in
general is that you

00:20:56.070 --> 00:20:58.770
get that kind of up
front ease of use

00:20:58.770 --> 00:21:01.290
with the added comfort of
knowing that whatever you're

00:21:01.290 --> 00:21:05.820
building, if it needs to, will
eventually scale ad infinitum.

00:21:05.820 --> 00:21:07.810
URS HOLZLE: Great.

00:21:07.810 --> 00:21:10.800
Let's go to infinity and beyond.

00:21:10.800 --> 00:21:11.910
Thanks Bobby.

00:21:11.910 --> 00:21:13.164
Thank you very much.

00:21:13.164 --> 00:21:17.960
[APPLAUSE]

00:21:17.960 --> 00:21:20.690
So people like you
make it look easy.

00:21:20.690 --> 00:21:25.730
Just a small team building an
insanely popular application

00:21:25.730 --> 00:21:28.740
and just scaling just like that.

00:21:28.740 --> 00:21:32.170
Now, even though there are
success stories like this,

00:21:32.170 --> 00:21:35.390
as I mentioned a little
bit earlier, building

00:21:35.390 --> 00:21:37.970
an app in the cloud is still
harder than it should be.

00:21:37.970 --> 00:21:40.280
Because you have to
spend a lot of times

00:21:40.280 --> 00:21:43.060
worrying about things
that you shouldn't really

00:21:43.060 --> 00:21:44.890
have to worry about.

00:21:44.890 --> 00:21:46.760
So too many things
to think about.

00:21:46.760 --> 00:21:48.920
Too many trade-offs to make.

00:21:48.920 --> 00:21:51.940
And too much work that's
not really related

00:21:51.940 --> 00:21:53.820
to building your app.

00:21:53.820 --> 00:21:55.210
Let's look at a few of them.

00:21:55.210 --> 00:21:56.970
Consider pricing.

00:21:56.970 --> 00:21:59.350
Pricing is still
way too complex.

00:21:59.350 --> 00:22:01.890
It may seem cheap
by comparison with

00:22:01.890 --> 00:22:03.900
your on-premise alternatives.

00:22:03.900 --> 00:22:06.770
But there's still a lot
of room for it to go down.

00:22:06.770 --> 00:22:08.500
And moreover, it
seems like you need

00:22:08.500 --> 00:22:11.480
a Ph.D. to figure
out the best options.

00:22:11.480 --> 00:22:13.700
Should you use on
demand instances

00:22:13.700 --> 00:22:17.020
that are flexible or
cheaper reserved instances?

00:22:17.020 --> 00:22:19.280
And should you pre-pay,
and if so, how much?

00:22:19.280 --> 00:22:21.107
And for how long are
you going to use them,

00:22:21.107 --> 00:22:22.690
and how much are you
going to use them

00:22:22.690 --> 00:22:23.940
over the next year, et cetera?

00:22:23.940 --> 00:22:27.140
How do you optimize your
cost versus your performance?

00:22:27.140 --> 00:22:29.140
Way too much complexity there.

00:22:29.140 --> 00:22:32.710
And often, developers
also are forced

00:22:32.710 --> 00:22:34.530
to make design trade-offs.

00:22:34.530 --> 00:22:37.380
Like Bobby just
mentioned, should you

00:22:37.380 --> 00:22:39.450
get started really
quickly but then

00:22:39.450 --> 00:22:42.342
risk having to rewrite
everything down the road?

00:22:42.342 --> 00:22:43.925
Or should you build
something scalable

00:22:43.925 --> 00:22:46.170
but be less productive?

00:22:46.170 --> 00:22:50.110
Now we want cloud to
be easier, and so we

00:22:50.110 --> 00:22:52.320
want to solve both
of these problems.

00:22:52.320 --> 00:22:54.540
And today, in the
next 10 minutes or so,

00:22:54.540 --> 00:22:55.760
I'll talk about that.

00:22:55.760 --> 00:22:58.570
So first, let's
start with pricing.

00:22:58.570 --> 00:23:03.560
And the chart here
illustrates the typical VM

00:23:03.560 --> 00:23:07.420
in sort of the average industry
cloud over the last five years

00:23:07.420 --> 00:23:08.170
or so.

00:23:08.170 --> 00:23:11.600
So prices have been
falling by about 6% to 8%

00:23:11.600 --> 00:23:14.560
per year, which is pretty nice.

00:23:14.560 --> 00:23:17.710
But hardware prices,
during the same five years,

00:23:17.710 --> 00:23:22.080
have been falling by
about 20% to 30% a year.

00:23:22.080 --> 00:23:26.550
So the cost of the underlying
components, CPUs, RAM, flash,

00:23:26.550 --> 00:23:30.560
disk-- has been
falling much faster.

00:23:30.560 --> 00:23:33.380
Because they've been
following Moore's law,

00:23:33.380 --> 00:23:35.710
and cloud prices haven't.

00:23:35.710 --> 00:23:40.630
And so over time, that's opened
quite a gap over several years.

00:23:40.630 --> 00:23:44.200
Easily a factor of two
between the two curves.

00:23:44.200 --> 00:23:48.910
And we don't think that this
gap should really exist.

00:23:48.910 --> 00:23:52.570
Because while the two
curves can't be identical,

00:23:52.570 --> 00:23:56.660
because the VM price also
includes not just the capital

00:23:56.660 --> 00:24:01.060
expenditures, but also the
cost of running the VM, power,

00:24:01.060 --> 00:24:04.940
space, maintenance,
administration, and so on.

00:24:04.940 --> 00:24:08.100
But the gap should be
nowhere this large.

00:24:08.100 --> 00:24:11.060
We think the two curves should
be much closer together.

00:24:11.060 --> 00:24:12.730
And today we're
taking a big step

00:24:12.730 --> 00:24:14.300
to bringing them much closer.

00:24:14.300 --> 00:24:16.515
And we think over the
next two or three years

00:24:16.515 --> 00:24:20.130
that they will be
even closer still.

00:24:20.130 --> 00:24:23.180
So I'll now describe
how we do this.

00:24:23.180 --> 00:24:29.740
First, we will have on demand
price reductions that make our

00:24:29.740 --> 00:24:32.890
on demand pricing
incredibly attractive.

00:24:32.890 --> 00:24:35.650
So Moore's Law at
work, basically.

00:24:35.650 --> 00:24:37.700
And then second,
I'll show you how

00:24:37.700 --> 00:24:40.390
you get additional
discounts that traditionally

00:24:40.390 --> 00:24:42.710
come with reserved instances.

00:24:42.710 --> 00:24:47.380
But with no upfront payment,
no commitment, and no lock-in.

00:24:47.380 --> 00:24:51.080
And together, these
two changes bring

00:24:51.080 --> 00:24:54.280
you industry leading
performance, price

00:24:54.280 --> 00:24:58.320
performance-- really by far--
without the complexity that's

00:24:58.320 --> 00:25:00.052
common in the industry.

00:25:00.052 --> 00:25:02.740
Yes.

00:25:02.740 --> 00:25:04.110
Just wait for the details.

00:25:04.110 --> 00:25:06.990
So let's get started with the
on demand price reductions.

00:25:06.990 --> 00:25:10.810
So we start with immediate
price reductions that bring our

00:25:10.810 --> 00:25:14.140
on demand pricing to
where it really should be,

00:25:14.140 --> 00:25:15.080
given Moore's Law.

00:25:15.080 --> 00:25:17.310
On Compute Engine,
we're reducing prices

00:25:17.310 --> 00:25:21.410
by 32% across the board
and in all regions.

00:25:21.410 --> 00:25:25.690
So now our on demand price
is lower than the three year

00:25:25.690 --> 00:25:30.130
reserve price of
most other providers.

00:25:30.130 --> 00:25:31.670
But that's not all.

00:25:31.670 --> 00:25:37.600
In storage, we price all storage
now at a consistent $0.026

00:25:37.600 --> 00:25:38.880
per gigabyte.

00:25:38.880 --> 00:25:41.200
No matter whether they
use it for App Engine,

00:25:41.200 --> 00:25:42.790
or for Compute Engine.

00:25:42.790 --> 00:25:46.830
And no matter whether you
store a gigabyte or a petabyte.

00:25:46.830 --> 00:25:52.910
So for most users, that's a
68% decrease in storage cost

00:25:52.910 --> 00:25:55.824
and our lower cost,
DRA alternative

00:25:55.824 --> 00:25:57.990
that gives you the same
durability with a little bit

00:25:57.990 --> 00:26:00.710
less availability, is $0.02.

00:26:00.710 --> 00:26:04.560
So now they're more than
20% cheaper than that.

00:26:04.560 --> 00:26:05.450
But that's not all.

00:26:05.450 --> 00:26:11.500
On BigQuery, we're also reducing
the on demand prices by 85%.

00:26:11.500 --> 00:26:15.380
So now BigQuery is really
accessible to everyone.

00:26:15.380 --> 00:26:17.550
And in BigQuery, we're
going one step further

00:26:17.550 --> 00:26:19.980
because our largest
customers have told us

00:26:19.980 --> 00:26:22.820
that they want
predictable throughput

00:26:22.820 --> 00:26:25.330
for their applications.

00:26:25.330 --> 00:26:27.760
And so now, you can
analyze any amount

00:26:27.760 --> 00:26:31.890
of data with a chosen
level of throughput

00:26:31.890 --> 00:26:37.830
in 5 gigabyte per second
increments at a fixed price.

00:26:37.830 --> 00:26:42.830
So you can-- and
you just tell us

00:26:42.830 --> 00:26:44.639
how much performance you want.

00:26:44.639 --> 00:26:47.180
what throughput do you want,
and we just provision everything

00:26:47.180 --> 00:26:47.610
for you.

00:26:47.610 --> 00:26:49.151
So you don't have
to worry about what

00:26:49.151 --> 00:26:51.770
hardware resources you need
to pick, and how many of them,

00:26:51.770 --> 00:26:53.250
and where, etc.

00:26:53.250 --> 00:26:58.840
So with other cloud providers,
or on-premise solutions,

00:26:58.840 --> 00:27:01.070
if you wanted 5
gigabytes per second

00:27:01.070 --> 00:27:05.160
of query throughputs--
so gigabytes per second,

00:27:05.160 --> 00:27:09.690
not megabytes per second-- you'd
pay about $80,000 per month.

00:27:09.690 --> 00:27:12.760
And you'd have to worry about
picking the right configuration

00:27:12.760 --> 00:27:13.930
and everything.

00:27:13.930 --> 00:27:18.881
So with Compute Engine and
BigQuery, this is just $20,000

00:27:18.881 --> 00:27:19.380
a month.

00:27:19.380 --> 00:27:21.800
So 75% deduction.

00:27:21.800 --> 00:27:24.930
And on top of the
predictable performance,

00:27:24.930 --> 00:27:28.270
you also get on
demand elasticity

00:27:28.270 --> 00:27:33.080
so that when your needs really
spike, you can go even higher.

00:27:33.080 --> 00:27:36.790
So together, we are really
resetting the price curve

00:27:36.790 --> 00:27:38.950
in a cloud to
where it should be.

00:27:38.950 --> 00:27:44.550
And this isn't a one time
step, this is a philosophy.

00:27:44.550 --> 00:27:48.120
The price trend of
virtualized hardware

00:27:48.120 --> 00:27:52.860
should follow the price
trend of real hardware.

00:27:52.860 --> 00:27:56.010
So it should follow Moore's Law.

00:27:56.010 --> 00:27:58.370
And with the Google
Cloud Platform,

00:27:58.370 --> 00:28:01.550
you're going to
see exactly that.

00:28:01.550 --> 00:28:06.450
Now one more problem with
pricing is really that

00:28:06.450 --> 00:28:09.130
it's-- as I mentioned--
it's too complicated.

00:28:09.130 --> 00:28:13.690
So now we've lowered the
prices, but the original dream

00:28:13.690 --> 00:28:16.040
of the cloud-- and
the original promise--

00:28:16.040 --> 00:28:18.430
was that you could
get elastic capacity.

00:28:18.430 --> 00:28:22.270
So on demand capacity, you
only pay for what you use.

00:28:22.270 --> 00:28:25.060
You don't have to preprovision,
you don't have to commit,

00:28:25.060 --> 00:28:29.700
and it's cheaper than
anything you can do yourself.

00:28:29.700 --> 00:28:33.560
Now, the industry
hasn't really evolved

00:28:33.560 --> 00:28:36.400
towards that simple concept.

00:28:36.400 --> 00:28:39.440
In fact, along the way, things
have gotten more complicated.

00:28:39.440 --> 00:28:41.220
Much more complicated.

00:28:41.220 --> 00:28:45.420
Here's a graph that shows the
total cost of a typical VM

00:28:45.420 --> 00:28:49.850
over three years given
different pricing choices.

00:28:49.850 --> 00:28:52.500
So you can see that there's a
huge difference, a factor of 10

00:28:52.500 --> 00:28:56.020
difference, between the
lowest and the highest price,

00:28:56.020 --> 00:28:58.200
depending on what
price plan you choose.

00:28:58.200 --> 00:29:00.220
And it's the same resource.

00:29:00.220 --> 00:29:02.100
So for the same
resource, you can

00:29:02.100 --> 00:29:05.280
pay 10 times more if
you don't pay attention.

00:29:05.280 --> 00:29:09.880
So the question is, should
you use on demand instances,

00:29:09.880 --> 00:29:12.830
or should you prepay to
get a reserved instance?

00:29:12.830 --> 00:29:16.489
And if so, how much do you
prepay, and for how long

00:29:16.489 --> 00:29:18.030
do you want to
reserve this instance?

00:29:18.030 --> 00:29:20.600
And you have to
guess how much am I

00:29:20.600 --> 00:29:24.380
going to actually use
this VM for the next year?

00:29:24.380 --> 00:29:25.980
Or the next three years?

00:29:25.980 --> 00:29:30.990
This is not simple, on
demand, elastic computing.

00:29:30.990 --> 00:29:34.310
This requires a Ph.D. in
finance to kind of get right.

00:29:34.310 --> 00:29:36.920
And so either you have
someone on your team

00:29:36.920 --> 00:29:39.590
who spends a lot of time
worrying about this.

00:29:39.590 --> 00:29:42.610
Or, you're probably
paying too much.

00:29:42.610 --> 00:29:44.900
Or both.

00:29:44.900 --> 00:29:48.100
So this isn't completely crazy.

00:29:48.100 --> 00:29:50.800
Reserved instances
actually have a purpose,

00:29:50.800 --> 00:29:53.080
because they try to
reward you for having

00:29:53.080 --> 00:29:56.280
a predictable,
sustained workload.

00:29:56.280 --> 00:29:57.980
And of course you
should get a discount

00:29:57.980 --> 00:30:00.380
for having a sustained workload.

00:30:00.380 --> 00:30:03.190
But we think that you
should get that discount

00:30:03.190 --> 00:30:08.360
with no upfront price, with
no upfront expenditures.

00:30:08.360 --> 00:30:14.400
With no contract, no lock-in,
and just no complexity.

00:30:14.400 --> 00:30:16.740
So how do we do that?

00:30:16.740 --> 00:30:17.880
I'll show you how.

00:30:17.880 --> 00:30:22.030
Today we're introducing
sustained-use discounts.

00:30:22.030 --> 00:30:24.940
We want you to be
rewarded automatically

00:30:24.940 --> 00:30:28.680
for having sustained usage
without you requiring

00:30:28.680 --> 00:30:29.620
to preplan.

00:30:29.620 --> 00:30:33.130
So we're moving the burden
of planning from you to us.

00:30:33.130 --> 00:30:34.200
How does this work?

00:30:34.200 --> 00:30:35.930
Well, here's an example.

00:30:35.930 --> 00:30:38.940
We start with the low rates
that we just announced.

00:30:38.940 --> 00:30:41.660
So rates that are lower
there anywhere else.

00:30:41.660 --> 00:30:46.080
But once you use a VM for
more than 25% of the month,

00:30:46.080 --> 00:30:48.110
your price starts dropping.

00:30:48.110 --> 00:30:53.180
So every additional
minute becomes cheaper.

00:30:53.180 --> 00:31:01.780
So that means that if you
have a 24/7 workload that you

00:31:01.780 --> 00:31:05.710
use for an entire month,
like a database instance,

00:31:05.710 --> 00:31:11.900
then in effect, you get a 53%
discount over today's prices.

00:31:11.900 --> 00:31:16.460
And what's even better,
you don't-- this price,

00:31:16.460 --> 00:31:21.330
this discount applies to all
instances of a certain type

00:31:21.330 --> 00:31:22.320
in a region.

00:31:22.320 --> 00:31:25.450
So even if you have a VM
that you restart frequently,

00:31:25.450 --> 00:31:30.540
as long as that VM in
aggregate is used more than 25%

00:31:30.540 --> 00:31:33.440
of the month, you
get that discount.

00:31:33.440 --> 00:31:36.500
So simple, easy
pricing that gives you

00:31:36.500 --> 00:31:40.420
a discount based on your
actual usage with no commitment

00:31:40.420 --> 00:31:41.150
upfront.

00:31:41.150 --> 00:31:43.660
And remember that our pricing
already has simplicity

00:31:43.660 --> 00:31:46.710
built in in all kinds
of other places.

00:31:46.710 --> 00:31:48.670
So you have per minute
billing, where you only

00:31:48.670 --> 00:31:51.230
pay for the minutes
you actually use.

00:31:51.230 --> 00:31:56.000
And you have linear scaling
of prices across VM types.

00:31:56.000 --> 00:31:58.960
So if you need a VM
that has four times more

00:31:58.960 --> 00:32:02.660
CPU and four times more
RAM than your current VM,

00:32:02.660 --> 00:32:05.280
you're going to pay a rate
that is four times higher.

00:32:05.280 --> 00:32:08.860
There's no penalty for
using a larger machine.

00:32:08.860 --> 00:32:12.050
Things just scale
as they should.

00:32:12.050 --> 00:32:14.250
So with these price
principles, we've

00:32:14.250 --> 00:32:17.930
really taken the
guesswork out of pricing.

00:32:17.930 --> 00:32:21.480
Your developers no longer have
to double as finance planners.

00:32:21.480 --> 00:32:23.891
We do that for you.

00:32:23.891 --> 00:32:28.700
You automatically get discounts
based on your actual sustained

00:32:28.700 --> 00:32:30.990
usage without any commitments.

00:32:30.990 --> 00:32:34.400
And that really was the
original dream of the cloud

00:32:34.400 --> 00:32:35.610
that I talked about.

00:32:35.610 --> 00:32:38.380
You have on demand capacity.

00:32:38.380 --> 00:32:43.290
You pay for just what you need,
but you get a great price.

00:32:43.290 --> 00:32:47.940
That is a world
that you can live in

00:32:47.940 --> 00:32:50.710
as long as you use the
Google Cloud because that's

00:32:50.710 --> 00:32:53.700
the experience
you'll have with us.

00:32:53.700 --> 00:32:56.870
So now let's turn
to the other part

00:32:56.870 --> 00:33:00.296
that makes cloud computing
harder than it could be.

00:33:00.296 --> 00:33:03.250
And mostly it's that
you have to work around

00:33:03.250 --> 00:33:07.950
certain limitations that
are in the cloud that

00:33:07.950 --> 00:33:11.040
causes you to do extra work.

00:33:11.040 --> 00:33:12.760
Let's look at a few of them.

00:33:12.760 --> 00:33:19.200
First, just the basic
problem of time to market

00:33:19.200 --> 00:33:20.440
versus scalability.

00:33:20.440 --> 00:33:25.060
Should you build something
that is quick and works,

00:33:25.060 --> 00:33:26.970
or should you make it scalable?

00:33:26.970 --> 00:33:29.460
There's too many
examples of startups

00:33:29.460 --> 00:33:31.940
that had to go rewrite
their back end just as they

00:33:31.940 --> 00:33:33.310
were getting really popular.

00:33:33.310 --> 00:33:36.090
It's a success
failure, essentially.

00:33:36.090 --> 00:33:40.630
Second, flexibility
versus automation.

00:33:40.630 --> 00:33:44.280
Do you want the flexibility
and the openness of VMs,

00:33:44.280 --> 00:33:48.230
or do you want the automatic
management of App Engine?

00:33:48.230 --> 00:33:51.960
And then third, big
data scalability

00:33:51.960 --> 00:33:54.250
versus real time analytics.

00:33:54.250 --> 00:33:57.380
Do you want to analyze really,
really large data sets,

00:33:57.380 --> 00:34:02.370
or can you deal with
the special demands

00:34:02.370 --> 00:34:04.680
of ingesting large
amounts of data

00:34:04.680 --> 00:34:07.060
and analyzing them in real time?

00:34:07.060 --> 00:34:10.400
And now fundamentally,
these are all hard problems.

00:34:10.400 --> 00:34:12.409
But we want to make
the cloud easier,

00:34:12.409 --> 00:34:14.210
and so we believe
that you should not

00:34:14.210 --> 00:34:19.530
have to choose between
those apparent opposites.

00:34:19.530 --> 00:34:23.030
We'd like to turn
this or into and,

00:34:23.030 --> 00:34:27.320
and we'd like for you to be
able to do all of the above

00:34:27.320 --> 00:34:29.790
in the same infrastructure.

00:34:29.790 --> 00:34:33.800
And how we do that-- to
show you how we do that,

00:34:33.800 --> 00:34:36.540
I'd like to call up
Greg DeMichillie.

00:34:36.540 --> 00:34:39.254
Sorry, Greg.

00:34:39.254 --> 00:34:40.670
He can't pronounce
my last name, I

00:34:40.670 --> 00:34:42.025
can't pronounce his last name.

00:34:42.025 --> 00:34:44.070
So I think we're about even.

00:34:44.070 --> 00:34:48.920
So Greg, come up, and
Greg will explain to you

00:34:48.920 --> 00:34:50.900
how we do all of this.

00:34:50.900 --> 00:34:51.968
So Greg, all yours.

00:34:51.968 --> 00:34:53.218
GREG DEMICHILLIE: Thanks, Urs.

00:34:53.218 --> 00:34:58.180
[APPLAUSE]

00:34:58.180 --> 00:34:58.680
Thanks, Urs.

00:34:58.680 --> 00:35:00.210
It's really no
exaggeration to say

00:35:00.210 --> 00:35:02.780
that cloud is one of the
biggest trends that's

00:35:02.780 --> 00:35:04.847
changing the way that
developers operate.

00:35:04.847 --> 00:35:06.680
And with the new pricing
that Urs announced,

00:35:06.680 --> 00:35:08.471
we really think that
this will be opened up

00:35:08.471 --> 00:35:10.390
to even more developers
to take advantage

00:35:10.390 --> 00:35:12.640
of the promise of the cloud.

00:35:12.640 --> 00:35:15.640
Now before I deep dive
into those hard trade-offs

00:35:15.640 --> 00:35:18.100
that Urs talked about, I
want to spend just a minute

00:35:18.100 --> 00:35:21.160
and update you on a couple
of very common requests

00:35:21.160 --> 00:35:25.380
I've heard from customers
since we met at I/O.

00:35:25.380 --> 00:35:27.646
The first one's around
operating systems.

00:35:27.646 --> 00:35:29.270
We know there's
customers out there who

00:35:29.270 --> 00:35:32.280
want to run specific operating
systems because they have

00:35:32.280 --> 00:35:35.490
workloads that depend upon
those operating systems.

00:35:35.490 --> 00:35:39.140
So today we're announcing the
GA availability of both SUSE

00:35:39.140 --> 00:35:43.120
and Red Hat Enterprise Linux
on the Google Cloud Platform.

00:35:43.120 --> 00:35:46.160
So if you have workloads
that require either

00:35:46.160 --> 00:35:47.540
of those products,
with one click

00:35:47.540 --> 00:35:50.940
you can deploy virtual machines
using those two operating

00:35:50.940 --> 00:35:52.550
systems.

00:35:52.550 --> 00:35:55.020
But of course it's not
just a Linux world.

00:35:55.020 --> 00:35:58.160
And one of the things we hear
a lot is, hey, Google, are you

00:35:58.160 --> 00:35:59.970
really ever going
to support Windows?

00:35:59.970 --> 00:36:01.550
And the answer to that's easy.

00:36:01.550 --> 00:36:03.490
Our customers tell
us they want Windows,

00:36:03.490 --> 00:36:05.125
so of course we're
supporting Windows.

00:36:09.540 --> 00:36:12.090
So starting today, we
have a preview support

00:36:12.090 --> 00:36:15.840
for the most popular version
of Windows Server out there

00:36:15.840 --> 00:36:17.264
available on the cloud platform.

00:36:17.264 --> 00:36:18.680
So if you're an
enterprise and you

00:36:18.680 --> 00:36:21.040
have workloads that
depend upon Windows,

00:36:21.040 --> 00:36:25.390
those are now open for
business on the cloud platform.

00:36:25.390 --> 00:36:26.860
That's not the
only common request

00:36:26.860 --> 00:36:28.970
that I've heard in
the months since we

00:36:28.970 --> 00:36:33.130
were at I/O. Another one is
around network management.

00:36:33.130 --> 00:36:36.550
We've heard from customers
that having to manage their DNS

00:36:36.550 --> 00:36:40.540
infrastructure in one place and
managing their virtual network

00:36:40.540 --> 00:36:44.020
configuration in another is a
pain to keep those up to date

00:36:44.020 --> 00:36:45.440
and keep those in sync.

00:36:45.440 --> 00:36:48.380
So today we're announcing
Google Cloud DNS.

00:36:48.380 --> 00:36:51.120
An authoritative
DNS as a service.

00:36:51.120 --> 00:36:53.550
Built, operated,
managed by Google.

00:36:53.550 --> 00:36:57.600
Google scale, Google
reliability, with a simple API

00:36:57.600 --> 00:37:00.520
and integrated into
the Google console.

00:37:00.520 --> 00:37:02.880
So as a developer now, you
can manage your network

00:37:02.880 --> 00:37:05.970
infrastructure for your
applications and your DNS

00:37:05.970 --> 00:37:09.030
all in one place and get
very high performance,

00:37:09.030 --> 00:37:11.550
easy to use DNS.

00:37:11.550 --> 00:37:15.020
So those are a few of the
common requests that we've had.

00:37:15.020 --> 00:37:17.440
Let me turn now to
those hard trade-offs

00:37:17.440 --> 00:37:19.360
that Urs talked about.

00:37:19.360 --> 00:37:21.290
Now the first one
we want to dive into

00:37:21.290 --> 00:37:24.440
is around time to market
versus scalability.

00:37:24.440 --> 00:37:26.180
So let's start at the beginning.

00:37:26.180 --> 00:37:27.330
You're a developer.

00:37:27.330 --> 00:37:30.390
Maybe you're at a startup,
maybe you're at an enterprise,

00:37:30.390 --> 00:37:32.270
and you're building
an application.

00:37:32.270 --> 00:37:36.040
Right away, you know that you
are going to be successful,

00:37:36.040 --> 00:37:38.190
so of course you want
to build for scalability

00:37:38.190 --> 00:37:41.520
so that when you go viral,
your application supports it.

00:37:41.520 --> 00:37:43.990
But you've got a manager,
whether that's your manager,

00:37:43.990 --> 00:37:46.210
or your board of directors,
or your stakeholder.

00:37:46.210 --> 00:37:49.480
Somebody is telling you, get the
application out and get it out

00:37:49.480 --> 00:37:50.870
yesterday.

00:37:50.870 --> 00:37:54.360
So at some point you feel
this pressure to maybe

00:37:54.360 --> 00:37:56.680
not spend as much
time on scalability

00:37:56.680 --> 00:37:58.410
and really just
go with whatever's

00:37:58.410 --> 00:38:00.600
the most productive
thing to build.

00:38:00.600 --> 00:38:01.830
And then you pay the price.

00:38:01.830 --> 00:38:04.765
The app goes viral,
suddenly your app is down,

00:38:04.765 --> 00:38:06.140
and now you're
frantically trying

00:38:06.140 --> 00:38:09.620
to rewrite the back end
while your customers are not

00:38:09.620 --> 00:38:11.590
getting served.

00:38:11.590 --> 00:38:13.500
We think that's a
false trade-off.

00:38:13.500 --> 00:38:16.180
We think you should be able to
take advantage of the Google

00:38:16.180 --> 00:38:19.000
scalability that we've built
the cloud platform around

00:38:19.000 --> 00:38:20.320
from the beginning.

00:38:20.320 --> 00:38:23.900
But you should also have a very
productive developer experience

00:38:23.900 --> 00:38:24.400
to do it.

00:38:24.400 --> 00:38:26.858
You shouldn't have to choose
between developer productivity

00:38:26.858 --> 00:38:28.690
and scalability.

00:38:28.690 --> 00:38:31.970
So to do that, we've been
focusing on a couple key areas.

00:38:31.970 --> 00:38:36.460
One is making sure that when
you come to the cloud platform,

00:38:36.460 --> 00:38:39.390
you can continue to
use the existing tools

00:38:39.390 --> 00:38:41.510
and services that
you know and love.

00:38:41.510 --> 00:38:44.485
Whether that's Git for your
source code repository,

00:38:44.485 --> 00:38:46.870
or whether that's
Maven and Jenkins

00:38:46.870 --> 00:38:50.160
for build and
continuous integration,

00:38:50.160 --> 00:38:52.950
you should be able to continue
to use those tools and services

00:38:52.950 --> 00:38:57.000
and have them integrate into the
cloud platform really nicely.

00:38:57.000 --> 00:38:59.899
Second, when you
do a deployment,

00:38:59.899 --> 00:39:02.440
you should have the confidence
to know that the deployment is

00:39:02.440 --> 00:39:05.850
successful and that you didn't
have a bad deployment that

00:39:05.850 --> 00:39:08.410
resulted in your
app not working.

00:39:08.410 --> 00:39:11.590
And third, when problems
come up in production--

00:39:11.590 --> 00:39:13.152
and they will come
up in production.

00:39:13.152 --> 00:39:15.360
Because they never come up
in testing servers, right?

00:39:15.360 --> 00:39:17.020
It's only production.

00:39:17.020 --> 00:39:19.990
You should have the
ability to easily spot

00:39:19.990 --> 00:39:23.560
those problems in production
and, with one click,

00:39:23.560 --> 00:39:26.240
make fixes so that your
app is back on track

00:39:26.240 --> 00:39:29.690
running like you want without
having to do a bunch of context

00:39:29.690 --> 00:39:33.680
switching from the console
into a bunch of other tools.

00:39:33.680 --> 00:39:36.600
So to give us a look at
exactly these things,

00:39:36.600 --> 00:39:38.020
I want to bring up Brad Abrams.

00:39:38.020 --> 00:39:41.440
He leads the product management
team for our developer

00:39:41.440 --> 00:39:42.590
experiences group.

00:39:42.590 --> 00:39:44.710
And he's going to give
us a demo of Zero to 60

00:39:44.710 --> 00:39:48.180
in the Cloud Platform showing
these productivity features.

00:39:48.180 --> 00:39:48.680
Brad?

00:39:48.680 --> 00:39:49.967
BRAD ABRAMS: Thanks, Greg.

00:39:49.967 --> 00:39:51.300
GREG DEMICHILLIE: You need that?

00:39:51.300 --> 00:39:53.680
BRAD ABRAMS: No,
I don't need it.

00:39:53.680 --> 00:39:56.230
So in his copious
spare time, Greg's

00:39:56.230 --> 00:40:00.360
been building out this cloud
event 2014 application.

00:40:00.360 --> 00:40:02.340
But he ran into a
little snag, and he

00:40:02.340 --> 00:40:06.660
asked me to use my programming
prowess to help him out.

00:40:06.660 --> 00:40:10.160
So what we're looking at here
is the Google Developer Console

00:40:10.160 --> 00:40:12.110
for Greg's application.

00:40:12.110 --> 00:40:15.100
But before we drill into
the console, how many people

00:40:15.100 --> 00:40:16.507
are command line fans?

00:40:16.507 --> 00:40:18.840
How many people are more
productive on the command line?

00:40:18.840 --> 00:40:19.423
Let's hear it.

00:40:19.423 --> 00:40:20.350
OK.

00:40:20.350 --> 00:40:21.960
Great, yes, me too.

00:40:21.960 --> 00:40:23.770
So we're going to start there.

00:40:23.770 --> 00:40:27.460
I'm going to show you our
new gcloud command line tool.

00:40:27.460 --> 00:40:29.900
The reason I'm more
productive on the command line

00:40:29.900 --> 00:40:33.890
is because of keyboard
shortcuts like Tab completion.

00:40:33.890 --> 00:40:36.360
So I can just say
gcloud Tab, Tab.

00:40:36.360 --> 00:40:38.270
And that shows me
the list of options

00:40:38.270 --> 00:40:39.970
that are available there.

00:40:39.970 --> 00:40:44.910
And then-- if I can type--
a Tab again completes that.

00:40:44.910 --> 00:40:47.190
Oh yeah, and then what are
the options for components,

00:40:47.190 --> 00:40:48.300
I can't remember?

00:40:48.300 --> 00:40:50.430
Oh, right, list
is the one I want.

00:40:50.430 --> 00:40:51.720
Tab finishes that out.

00:40:51.720 --> 00:40:54.120
So pretty cool, huh?

00:40:54.120 --> 00:40:56.080
OK.

00:40:56.080 --> 00:40:57.690
Fine, OK.

00:40:57.690 --> 00:41:01.490
So we have a set of
components that are available.

00:41:01.490 --> 00:41:03.470
I can add and
remove those, but I

00:41:03.470 --> 00:41:05.120
have what I think I need there.

00:41:05.120 --> 00:41:06.510
So we'll clear that.

00:41:06.510 --> 00:41:08.930
And I'll do another
gcloud command,

00:41:08.930 --> 00:41:15.030
and we'll go ahead--
cloud event 2014--

00:41:15.030 --> 00:41:18.370
we'll go ahead and bring
down code that Greg's already

00:41:18.370 --> 00:41:20.740
started on to our
local workspace

00:41:20.740 --> 00:41:23.530
so that we can get
started with this.

00:41:23.530 --> 00:41:25.800
So let's take a look at
what Greg's already got.

00:41:25.800 --> 00:41:28.760
I'm going to use my second
favorite editor here

00:41:28.760 --> 00:41:32.140
to check out Greg's code.

00:41:32.140 --> 00:41:34.840
And there, Greg, I think
I see your problem.

00:41:34.840 --> 00:41:36.430
You forgot to give it a title.

00:41:36.430 --> 00:41:39.260
So let's see if we can do that.

00:41:39.260 --> 00:41:42.930
So GCP Live.

00:41:42.930 --> 00:41:44.520
OK, just save that.

00:41:44.520 --> 00:41:47.500
Now we're going to
use Git to commit that

00:41:47.500 --> 00:41:48.920
to our local repository.

00:41:48.920 --> 00:41:51.650
How many big Git fans
are there that use Git?

00:41:51.650 --> 00:41:52.370
Yes?

00:41:52.370 --> 00:41:53.470
Awesome.

00:41:53.470 --> 00:41:56.850
So I'll do a Git commit.

00:41:56.850 --> 00:42:02.280
And I'll say add a
title or whatever.

00:42:02.280 --> 00:42:05.190
And then I'm going to go
ahead and do a Git push.

00:42:05.190 --> 00:42:09.340
So when I did the gcloud init,
I initialized my local workspace

00:42:09.340 --> 00:42:12.350
with a remote repository
that's hosted for us

00:42:12.350 --> 00:42:13.710
in the Google Cloud.

00:42:13.710 --> 00:42:16.030
And I've gone and
pushed that up.

00:42:16.030 --> 00:42:18.470
So if we switch over
here to the console,

00:42:18.470 --> 00:42:22.260
you'll see, when I refresh
this, that our new source code

00:42:22.260 --> 00:42:26.130
viewer in the console has
that change that we looked at.

00:42:26.130 --> 00:42:27.800
There it is.

00:42:27.800 --> 00:42:29.340
GCP Live.

00:42:29.340 --> 00:42:32.100
And now if I switch
over to releases,

00:42:32.100 --> 00:42:35.780
we see this is the
Git URL that we

00:42:35.780 --> 00:42:38.270
offer as part of every
developer console project.

00:42:38.270 --> 00:42:41.050
You get a free
private Git repository

00:42:41.050 --> 00:42:43.710
that's accessible to all the
members of your development

00:42:43.710 --> 00:42:45.390
team on this project.

00:42:45.390 --> 00:42:46.240
GREG DEMICHILLIE: Now
that's really cool,

00:42:46.240 --> 00:42:47.531
and a lot of people do use Git.

00:42:47.531 --> 00:42:49.450
But a lot of people
also use GitHub,

00:42:49.450 --> 00:42:51.940
whether it's for public
open source projects

00:42:51.940 --> 00:42:53.420
or even for private repos.

00:42:53.420 --> 00:42:54.910
So is there support
for that, too?

00:42:54.910 --> 00:42:56.400
BRAD ABRAMS: Absolutely Greg.

00:42:56.400 --> 00:43:00.140
At Google, we are
big fans of GitHub.

00:43:00.140 --> 00:43:02.870
And so we've gone ahead
and added a Connect

00:43:02.870 --> 00:43:05.210
to GitHub button,
so all the features

00:43:05.210 --> 00:43:07.060
I'm going to show you
work great if you're

00:43:07.060 --> 00:43:10.780
using a GitHub repository
or one of ours.

00:43:10.780 --> 00:43:15.950
So regardless of which you
use, as a post commit action,

00:43:15.950 --> 00:43:18.100
you have your choice
as to what happens.

00:43:18.100 --> 00:43:21.590
We can do a build, run
a set of unit tests

00:43:21.590 --> 00:43:24.110
before we deploy
that into production.

00:43:24.110 --> 00:43:27.060
In this case, we've set
it to build with Maven,

00:43:27.060 --> 00:43:30.790
run unit test, and then
deploy to our cloud platform.

00:43:30.790 --> 00:43:33.830
To give you a peek inside a
little bit about what's really

00:43:33.830 --> 00:43:38.560
happening, when we configured
that build, what we did

00:43:38.560 --> 00:43:40.870
is we spin up a Compute
Engine instance.

00:43:40.870 --> 00:43:44.360
And we installed on your
behalf half Jenkins, Maven,

00:43:44.360 --> 00:43:48.600
JDK-- everything we needed
to do reliable builds.

00:43:48.600 --> 00:43:50.560
And then when that
Git push happened,

00:43:50.560 --> 00:43:54.970
we pulled down all the
code and did a clean build.

00:43:54.970 --> 00:43:58.810
And then when that build passed,
we ran all your unit test

00:43:58.810 --> 00:44:00.340
and then pushed
it to production.

00:44:00.340 --> 00:44:04.510
So you can be more sure you get
a safe, reliable deployment.

00:44:04.510 --> 00:44:07.640
And you can see, as I practiced
this demo, those spikes in the

00:44:07.640 --> 00:44:09.370
build machines.

00:44:09.370 --> 00:44:12.180
So if we switch back
over to cloud deployment,

00:44:12.180 --> 00:44:14.600
you can see our release history.

00:44:14.600 --> 00:44:17.650
And what you see here is
that we added that title,

00:44:17.650 --> 00:44:21.370
we did a build test, and we
deployed that into production,

00:44:21.370 --> 00:44:23.840
all in the time we've
been talking here.

00:44:23.840 --> 00:44:26.080
So if we switch over
and see Greg's app.

00:44:26.080 --> 00:44:29.280
Greg, it looks like a
little meme application.

00:44:29.280 --> 00:44:31.290
That's kind of cool.

00:44:31.290 --> 00:44:33.680
And it's going to
refresh with-- and we

00:44:33.680 --> 00:44:37.590
see these-- here are
the memes you have.

00:44:37.590 --> 00:44:38.550
Yes.

00:44:38.550 --> 00:44:41.670
That's cute, petabytes of data.

00:44:41.670 --> 00:44:43.580
And there's the
title that we added.

00:44:43.580 --> 00:44:44.580
That's great.

00:44:44.580 --> 00:44:48.520
I'm interested in what our top
memes are here at the cloud

00:44:48.520 --> 00:44:50.540
event, so let's check those out.

00:44:50.540 --> 00:44:52.570
Oh, Greg.

00:44:52.570 --> 00:44:54.110
You have a server error here.

00:44:54.110 --> 00:44:57.230
A 500 server error,
that's not good.

00:44:57.230 --> 00:45:00.030
These kind of issues
are hard enough

00:45:00.030 --> 00:45:02.320
to debug when it's on
your local machine.

00:45:02.320 --> 00:45:05.110
But when you have an issue
like this in production,

00:45:05.110 --> 00:45:06.630
it's even harder.

00:45:06.630 --> 00:45:11.370
So to give you a sense about
debugging this in production,

00:45:11.370 --> 00:45:15.240
I'm going to switch over and
give some simulated load.

00:45:15.240 --> 00:45:18.500
So just going to throw a
lot of traffic at that site.

00:45:18.500 --> 00:45:20.420
I saw some of you
copying down the URL,

00:45:20.420 --> 00:45:24.430
so you might be throwing
some traffic at it as well.

00:45:24.430 --> 00:45:27.930
So we'll go over and look
at how we debug that issue.

00:45:27.930 --> 00:45:31.890
So I'm going to bring up
the new unified logs viewer.

00:45:31.890 --> 00:45:34.930
And we're getting a log
entry for every request

00:45:34.930 --> 00:45:35.630
that comes in.

00:45:35.630 --> 00:45:37.980
And you saw, it just
threw a bunch of requests

00:45:37.980 --> 00:45:39.200
at this thing.

00:45:39.200 --> 00:45:42.420
And we're aggregating all those
logs across every front end

00:45:42.420 --> 00:45:46.070
instance that we're spinning
up into a single unified view.

00:45:46.070 --> 00:45:48.580
And so now I can just
scroll through here,

00:45:48.580 --> 00:45:51.730
and notice as I'm scrolling,
it's loading new logs,

00:45:51.730 --> 00:45:55.460
so it's easy for me to find the
logs that I'm interested in.

00:45:55.460 --> 00:46:00.850
I can also filter these or, in
this particular place though,

00:46:00.850 --> 00:46:04.370
I want to look for a status
500, because that's what we saw.

00:46:04.370 --> 00:46:06.490
The 500 server error.

00:46:06.490 --> 00:46:10.020
I can also come in and
filter by date and time.

00:46:10.020 --> 00:46:11.940
So if I get a bug report
at a certain time,

00:46:11.940 --> 00:46:14.990
I can narrow that
down pretty easily.

00:46:14.990 --> 00:46:17.800
These filters can be chained
together with and and

00:46:17.800 --> 00:46:20.600
or so you can get
exactly what you want.

00:46:20.600 --> 00:46:23.020
OK, so here are the
errors that we're hitting.

00:46:23.020 --> 00:46:25.160
And I can see, Greg,
the problem here

00:46:25.160 --> 00:46:30.220
is in this ominously named
method, getMemes_Buggy.

00:46:30.220 --> 00:46:31.337
Hmm.

00:46:31.337 --> 00:46:33.920
GREG DEMICHILLIE: I had to make
it easy for you to find, Brad.

00:46:33.920 --> 00:46:37.060
BRAD ABRAMS: Yes,
I appreciate that.

00:46:37.060 --> 00:46:39.240
So speaking of
finding that, you'll

00:46:39.240 --> 00:46:41.940
notice the next thing we
want to do, as a developer,

00:46:41.940 --> 00:46:43.400
is jump into the source.

00:46:43.400 --> 00:46:46.510
Because that's where we're going
to be able to fix this problem.

00:46:46.510 --> 00:46:48.740
But I have all this
context loaded in my head.

00:46:48.740 --> 00:46:50.290
I need to get to
the source quick

00:46:50.290 --> 00:46:52.846
so I can start
bringing that to bear.

00:46:52.846 --> 00:46:54.220
So what I'm going
to do is notice

00:46:54.220 --> 00:46:56.810
that right here, this
is actually a hyperlink.

00:46:56.810 --> 00:46:58.970
So if I click right
on this hyperlink,

00:46:58.970 --> 00:47:03.010
it brings me into the console,
into our source code view,

00:47:03.010 --> 00:47:06.360
with exactly the version
of the source code that

00:47:06.360 --> 00:47:09.550
was deployed into production and
that line of code highlighted.

00:47:09.550 --> 00:47:10.430
Pretty useful?

00:47:10.430 --> 00:47:14.880
[APPLAUSE]

00:47:14.880 --> 00:47:18.230
So at this point, we can drop
back to get command line.

00:47:18.230 --> 00:47:20.960
We could pull that file down
and start operating on it.

00:47:20.960 --> 00:47:23.460
I can click on this
open in IDE button

00:47:23.460 --> 00:47:27.270
and use a variety of third
party or Google-provided IDEs.

00:47:27.270 --> 00:47:30.010
Or, because this is
a very quick change,

00:47:30.010 --> 00:47:31.730
I can just click on Edit.

00:47:31.730 --> 00:47:34.370
Make this change
right in the browser

00:47:34.370 --> 00:47:36.060
and go ahead and do a commit.

00:47:36.060 --> 00:47:42.520
And we'll just say
fix Greg's buggy code.

00:47:42.520 --> 00:47:44.950
And we'll deploy
that into production.

00:47:44.950 --> 00:47:48.330
Now how many of you have been
debugging a production issue,

00:47:48.330 --> 00:47:51.510
and you ended up SSHing
into a production machine

00:47:51.510 --> 00:47:55.080
and twiddling some config file
or messing with some PHP code.

00:47:55.080 --> 00:47:56.390
Who's done that?

00:47:56.390 --> 00:47:57.960
Yes, who's done
that this morning?

00:48:00.690 --> 00:48:04.210
That's maybe not the best
idea, and that is not

00:48:04.210 --> 00:48:05.350
what we're doing here.

00:48:05.350 --> 00:48:07.740
We're actually committing
this change back

00:48:07.740 --> 00:48:09.810
to the production
Git repository.

00:48:09.810 --> 00:48:12.060
That change is attributed to me.

00:48:12.060 --> 00:48:13.020
It's repeatable.

00:48:13.020 --> 00:48:16.700
All future deployments will
have that code as well.

00:48:16.700 --> 00:48:19.680
And we're running that
full release pipeline.

00:48:19.680 --> 00:48:22.250
We're building the code
on a clean machine.

00:48:22.250 --> 00:48:24.460
We're running all
our unit tests,

00:48:24.460 --> 00:48:28.280
and we're deploying it only
if all those things pass.

00:48:28.280 --> 00:48:31.350
Now, that takes a minute or
so for those things to happen,

00:48:31.350 --> 00:48:35.160
so let's see if we can view
that deployment in progress.

00:48:35.160 --> 00:48:38.960
So let's open that in a new tab.

00:48:38.960 --> 00:48:41.150
And we should see
our new release.

00:48:41.150 --> 00:48:43.070
There it is, we fixed
Greg's buggy code.

00:48:43.070 --> 00:48:45.060
Notice it's already
built and tested

00:48:45.060 --> 00:48:48.000
that in just this short time,
and we've deployed that out

00:48:48.000 --> 00:48:49.250
into production.

00:48:49.250 --> 00:48:51.790
So if we switch over
now and refresh this,

00:48:51.790 --> 00:48:55.210
we should see the
top cloud memes.

00:48:55.210 --> 00:49:00.090
And of course, they're
all Jeff Dean memes.

00:49:00.090 --> 00:49:01.810
Guess that's how it goes.

00:49:01.810 --> 00:49:04.150
So what you've
seen today is it's

00:49:04.150 --> 00:49:07.010
very easy to use tools
you already know and love,

00:49:07.010 --> 00:49:10.210
like Maven, Jenkins,
and Gradle to be

00:49:10.210 --> 00:49:11.970
able to target our platform.

00:49:11.970 --> 00:49:13.610
You've seen how
easy it is to get

00:49:13.610 --> 00:49:16.860
reliable and quick deployments
with our new continuous

00:49:16.860 --> 00:49:18.420
integration system.

00:49:18.420 --> 00:49:20.880
And finally, you
saw how easy it was

00:49:20.880 --> 00:49:23.320
to find and debug an
issue in production

00:49:23.320 --> 00:49:25.380
and get that fixed quickly.

00:49:25.380 --> 00:49:25.970
Thanks Greg.

00:49:25.970 --> 00:49:27.220
GREG DEMICHILLIE: Thanks Brad.

00:49:32.379 --> 00:49:33.170
That's really cool.

00:49:33.170 --> 00:49:34.990
I think that'll help
a lot of developers

00:49:34.990 --> 00:49:37.198
make the jump to the cloud
knowing that they can keep

00:49:37.198 --> 00:49:40.020
using the tools that
they're comfortable with.

00:49:40.020 --> 00:49:44.360
So let's turn to the second
of the big trade-offs,

00:49:44.360 --> 00:49:46.020
and it's a big one.

00:49:46.020 --> 00:49:49.250
Back in 2008, we
introduced App Engine,

00:49:49.250 --> 00:49:52.320
which really became the
first widely used platform

00:49:52.320 --> 00:49:54.330
as a service,
allowing developers

00:49:54.330 --> 00:49:57.590
to focus only on the code that
make their application unique

00:49:57.590 --> 00:50:00.760
and let us at Google handle
all of the stuff like scaling,

00:50:00.760 --> 00:50:02.600
and management,
and configuration,

00:50:02.600 --> 00:50:05.260
and let us carry a pager
so you don't have to.

00:50:05.260 --> 00:50:07.790
But today you face
a tough choice.

00:50:07.790 --> 00:50:11.120
Do I use products like
Compute Engine, infrastructure

00:50:11.120 --> 00:50:15.140
as a service, that give me
total flexibility on open source

00:50:15.140 --> 00:50:16.150
packages I use?

00:50:16.150 --> 00:50:19.200
And operating systems and
programming languages.

00:50:19.200 --> 00:50:22.240
But at the cost of me having
to carry my own pager,

00:50:22.240 --> 00:50:25.850
scale my own infrastructure,
build out my own management?

00:50:25.850 --> 00:50:28.500
Or do I use products like
App Engine, which free me

00:50:28.500 --> 00:50:31.960
from all of that, but impose
certain restrictions on me?

00:50:31.960 --> 00:50:34.030
Like they only let me
use certain languages

00:50:34.030 --> 00:50:36.140
or certain environments.

00:50:36.140 --> 00:50:39.020
This is another case of what
we think is a false dichotomy,

00:50:39.020 --> 00:50:41.090
and it's one that
we want to address.

00:50:41.090 --> 00:50:45.150
We think you should have access
to the languages and runtimes

00:50:45.150 --> 00:50:48.600
you want and still get
the auto management,

00:50:48.600 --> 00:50:52.400
auto capabilities of
products like App Engine.

00:50:52.400 --> 00:50:56.480
So today we're introducing
managed virtual machines.

00:50:56.480 --> 00:50:58.860
And managed VMs are
just what it says.

00:50:58.860 --> 00:51:01.760
They are virtual machines
that run on Compute Engine,

00:51:01.760 --> 00:51:03.910
but they are managed
on your behalf

00:51:03.910 --> 00:51:06.440
with all of the
goodness of App Engine.

00:51:06.440 --> 00:51:09.640
So this gives you a new way to
think about building services,

00:51:09.640 --> 00:51:12.710
combining the
freedom and control

00:51:12.710 --> 00:51:15.630
of App Engine--
of Compute Engine

00:51:15.630 --> 00:51:17.660
with the capabilities
of App Engine.

00:51:17.660 --> 00:51:20.940
So you can start with an
App Engine application,

00:51:20.940 --> 00:51:23.360
and if you ever hit
a point where there's

00:51:23.360 --> 00:51:25.630
a language you want to
use, or an open source

00:51:25.630 --> 00:51:27.910
package you want to use
that we don't support,

00:51:27.910 --> 00:51:30.600
with just a few
configuration line changes,

00:51:30.600 --> 00:51:32.720
you can take part
of that application

00:51:32.720 --> 00:51:35.240
and replace it with an
equivalent virtual machine.

00:51:35.240 --> 00:51:37.020
And now you have control.

00:51:37.020 --> 00:51:39.920
You can do whatever you
want, without giving up

00:51:39.920 --> 00:51:44.561
all the benefits that you chose
App Engine for to begin with.

00:51:44.561 --> 00:51:46.060
So to see this in
action, I've asked

00:51:46.060 --> 00:51:47.560
Chris Ramsdale to come up.

00:51:47.560 --> 00:51:50.510
Chris is going to give us a demo
of managed virtual machines.

00:51:50.510 --> 00:51:53.020
He's going to take an
application like Brad used,

00:51:53.020 --> 00:51:56.570
but he's going to add in now
C++ code and some open source

00:51:56.570 --> 00:51:59.702
packages, while still keeping
the capabilities that he

00:51:59.702 --> 00:52:01.660
thought App Engine was
great for to begin with.

00:52:01.660 --> 00:52:03.840
So Chris, why don't you show
us managed virtual machines.

00:52:03.840 --> 00:52:04.750
CHRIS RAMSDALE:
Cool, thanks Greg.

00:52:04.750 --> 00:52:05.422
Appreciate it.

00:52:05.422 --> 00:52:06.880
So what I want to
show you today is

00:52:06.880 --> 00:52:10.602
how we use managed VMs to
take and add real time image

00:52:10.602 --> 00:52:13.334
collaboration in the cloud
and add that to Brad's demo.

00:52:13.334 --> 00:52:14.750
So what we're going
to do is we're

00:52:14.750 --> 00:52:16.860
going to have clients that are
running inside of Chrome that

00:52:16.860 --> 00:52:18.776
are communicating back
with a fleet of managed

00:52:18.776 --> 00:52:21.739
VMs via WebSockets, for
low latency communications.

00:52:21.739 --> 00:52:23.280
And on these managed
VMs, we're going

00:52:23.280 --> 00:52:25.372
to rely on ImageMagick,
a third party

00:52:25.372 --> 00:52:27.830
open source library that's an
optimized C library for doing

00:52:27.830 --> 00:52:29.371
image processing
and image rendering.

00:52:29.371 --> 00:52:32.460
And we're going to use local
disks to cache the renderings,

00:52:32.460 --> 00:52:33.624
make it super snappy.

00:52:33.624 --> 00:52:35.290
And we're going to
use App Engine's Java

00:52:35.290 --> 00:52:38.090
runtime as a serving
stack to get data flowing

00:52:38.090 --> 00:52:40.060
from the front ends
to the back ends.

00:52:40.060 --> 00:52:42.360
Now, as Greg alluded to,
that kind of technology

00:52:42.360 --> 00:52:45.380
is not typically supported
on platforms as a service,

00:52:45.380 --> 00:52:46.960
and not what App
Engine is today.

00:52:46.960 --> 00:52:49.210
With managed VMs, this
is totally possible.

00:52:49.210 --> 00:52:51.514
Furthermore, we make
it very easy to get up

00:52:51.514 --> 00:52:52.430
and started with this.

00:52:52.430 --> 00:52:54.846
So let me show you, we're going
to pop over to my terminal

00:52:54.846 --> 00:52:55.650
here.

00:52:55.650 --> 00:52:58.200
And what we see is a typical
App Engine configuration

00:52:58.200 --> 00:52:59.996
file with a few parameters.

00:52:59.996 --> 00:53:01.870
So we have an application,
we have a version,

00:53:01.870 --> 00:53:03.650
we have what module's running.

00:53:03.650 --> 00:53:05.814
With a few more lines
of configuration,

00:53:05.814 --> 00:53:07.980
we're actually going to
turn this into a managed VM.

00:53:07.980 --> 00:53:09.771
So let me walk through
these settings here.

00:53:09.771 --> 00:53:11.720
So the first thing is
we're setting VM true.

00:53:11.720 --> 00:53:13.990
That's telling the system I
want to run this on a managed VM

00:53:13.990 --> 00:53:16.250
so I have access to native
resources and the ability

00:53:16.250 --> 00:53:17.670
to run native code.

00:53:17.670 --> 00:53:20.610
Furthermore, we get into a new
section called VM settings.

00:53:20.610 --> 00:53:22.382
Here we specify machine
type, for example.

00:53:22.382 --> 00:53:24.840
And since we're doing image
rendering and image processing,

00:53:24.840 --> 00:53:26.964
we're going to crank up
the horsepower on these VMs

00:53:26.964 --> 00:53:28.239
and deploy 8-core machines.

00:53:28.239 --> 00:53:30.780
GREG DEMICHILLIE: Now this could
be any of the Compute Engine

00:53:30.780 --> 00:53:31.840
virtual machine types.

00:53:31.840 --> 00:53:33.980
One, two, four,
eight, or more cores.

00:53:33.980 --> 00:53:37.600
High mem, high CPU standard,
whatever's available in GCE,

00:53:37.600 --> 00:53:39.100
you can use with
App Engine as well.

00:53:39.100 --> 00:53:41.183
CHRIS RAMSDALE: Absolutely,
Greg, and furthermore,

00:53:41.183 --> 00:53:43.120
as we innovate here,
those innovations

00:53:43.120 --> 00:53:45.640
will flow back to this
configuration as well.

00:53:45.640 --> 00:53:48.767
The next line is the settings
for deploying the third party

00:53:48.767 --> 00:53:50.350
code that I want on
those managed VMs.

00:53:50.350 --> 00:53:52.266
In this case, we're using
ImageMagick and just

00:53:52.266 --> 00:53:54.662
doing apt_get_install
to those managed VMs.

00:53:54.662 --> 00:53:56.620
GREG DEMICHILLIE: And
again, anything installed

00:53:56.620 --> 00:53:58.820
will be an apt_get
I can specify here,

00:53:58.820 --> 00:54:01.200
and it becomes available
to me in a managed VM.

00:54:01.200 --> 00:54:01.640
CHRIS RAMSDALE: Absolutely.

00:54:01.640 --> 00:54:03.370
This is how we're opening
up App Engine so you

00:54:03.370 --> 00:54:04.995
can use third party
libraries like that

00:54:04.995 --> 00:54:08.102
and get them onto those managed
VMs in a super simple way.

00:54:08.102 --> 00:54:09.810
The next line is we're
opening up a port.

00:54:09.810 --> 00:54:11.240
In this case, it's
an arbitrary port,

00:54:11.240 --> 00:54:13.350
65080, and that's how we're
going to the WebSocket

00:54:13.350 --> 00:54:15.933
communication from the clients
that are running in Chrome back

00:54:15.933 --> 00:54:17.222
to those fleet of managed VMs.

00:54:17.222 --> 00:54:18.680
And then for the
sake of this demo,

00:54:18.680 --> 00:54:19.940
we're going to
specify two instances,

00:54:19.940 --> 00:54:21.450
because that's more than
enough for this demo,

00:54:21.450 --> 00:54:23.470
especially since we're
running 8-core machines.

00:54:23.470 --> 00:54:25.960
So we're going to escape
from this, save it.

00:54:25.960 --> 00:54:28.150
Now since we're running
in the Java runtime,

00:54:28.150 --> 00:54:31.420
and it's a Java application, we
can use Maven to deploy this.

00:54:34.044 --> 00:54:35.460
So while that's
running, I'm going

00:54:35.460 --> 00:54:37.501
to talk about what's
happening under the hood, so

00:54:37.501 --> 00:54:40.039
can we cut back to
the slides, please?

00:54:40.039 --> 00:54:41.830
All right, the first
thing that's happening

00:54:41.830 --> 00:54:43.490
is we're relying
on our gcloud tools

00:54:43.490 --> 00:54:45.823
to parse and validate the
configuration file that I just

00:54:45.823 --> 00:54:46.690
showed you.

00:54:46.690 --> 00:54:48.220
Assuming that's
valid, which it is,

00:54:48.220 --> 00:54:49.700
it's going to communicate
to our deployment endpoints

00:54:49.700 --> 00:54:51.960
and say, OK, I want to
deploy this application.

00:54:51.960 --> 00:54:53.460
Those deployment
endpoints are going

00:54:53.460 --> 00:54:55.530
to store some metadata
about the application.

00:54:55.530 --> 00:54:57.340
The version, the
template, the number

00:54:57.340 --> 00:54:58.830
of instances that are running.

00:54:58.830 --> 00:54:59.890
And then from there,
we're going to go off

00:54:59.890 --> 00:55:02.000
and we're going to create
the actual containers.

00:55:02.000 --> 00:55:05.250
In this case, we're creating
8-core Compute Engine VMs,

00:55:05.250 --> 00:55:07.545
and we're installing our
Debian OS on top of that.

00:55:07.545 --> 00:55:09.920
After that, we're going to
carve out the managed services

00:55:09.920 --> 00:55:12.130
and make sure that everything's
lined up correctly for you.

00:55:12.130 --> 00:55:14.463
So in this case, we're going
to do monitoring and health

00:55:14.463 --> 00:55:16.926
checking, task queues,
memcache and data store.

00:55:16.926 --> 00:55:18.800
We're also going to
create secure name spaces

00:55:18.800 --> 00:55:21.049
so that everything is secure
within those multi-tenant

00:55:21.049 --> 00:55:21.564
systems.

00:55:21.564 --> 00:55:23.230
And we're going to
set up smart defaults

00:55:23.230 --> 00:55:25.330
so it's very easy
to access the APIs

00:55:25.330 --> 00:55:27.990
and get data flowing
back and forth.

00:55:27.990 --> 00:55:29.710
From there, it's on
the serving stack.

00:55:29.710 --> 00:55:31.060
And since we're running
on a Java runtime,

00:55:31.060 --> 00:55:33.185
we're going to install a
web server, an application

00:55:33.185 --> 00:55:34.281
server, and a JVM.

00:55:34.281 --> 00:55:36.280
Then it's on to the
interesting parts, the parts

00:55:36.280 --> 00:55:36.960
that you provide.

00:55:36.960 --> 00:55:38.700
In this case, the third
party code that we specified,

00:55:38.700 --> 00:55:40.630
so ImageMagick on
those managed VMs.

00:55:40.630 --> 00:55:42.485
And then most
importantly, your code.

00:55:42.485 --> 00:55:43.860
We're going to
bring all that up,

00:55:43.860 --> 00:55:44.800
we're going to do
some health checking,

00:55:44.800 --> 00:55:45.715
make sure everything's
running correctly.

00:55:45.715 --> 00:55:48.230
And assuming it is, we're going
to install a load balancer,

00:55:48.230 --> 00:55:50.130
and then we're going to
wire everything up for you.

00:55:50.130 --> 00:55:52.170
The final step is we're
going to take all of that

00:55:52.170 --> 00:55:53.850
and make sure it's colocated
with the other pieces

00:55:53.850 --> 00:55:55.020
of compute that you're running.

00:55:55.020 --> 00:55:56.230
So in this case,
Brad had showed you

00:55:56.230 --> 00:55:57.400
some front ends
that were running.

00:55:57.400 --> 00:55:58.450
We're going to take
the managed VMs

00:55:58.450 --> 00:56:00.140
and colocate those
with your front ends

00:56:00.140 --> 00:56:01.570
so you get low
latency and improve

00:56:01.570 --> 00:56:03.860
the overall performance.

00:56:03.860 --> 00:56:07.360
All right, so if we can
jump back to the demo.

00:56:07.360 --> 00:56:09.080
All right, so our
build succeeded.

00:56:09.080 --> 00:56:11.720
Let's go check
that out in Chrome.

00:56:11.720 --> 00:56:13.640
So we'll pull this
up, we'll navigate

00:56:13.640 --> 00:56:17.120
to the URL that's
provisioned for us.

00:56:17.120 --> 00:56:19.240
All right, and there we
see our new front end.

00:56:19.240 --> 00:56:21.529
Cloud Collabo,
collaboration in the cloud.

00:56:21.529 --> 00:56:22.820
This is pretty straightforward.

00:56:22.820 --> 00:56:24.579
We're going to be able
to upload an image,

00:56:24.579 --> 00:56:26.370
we're going to do some
edits to that image.

00:56:26.370 --> 00:56:27.505
Those edits are going to be
shared with the people that

00:56:27.505 --> 00:56:29.088
are collaborating
and then we're going

00:56:29.088 --> 00:56:31.230
to do some real time
conversation back and forth.

00:56:31.230 --> 00:56:34.260
So let's pick an image.

00:56:34.260 --> 00:56:36.620
Meme two looks good.

00:56:36.620 --> 00:56:37.386
All right.

00:56:37.386 --> 00:56:38.760
Man of the hour,
Urs, we're going

00:56:38.760 --> 00:56:41.030
to use his meme to
actually get going.

00:56:41.030 --> 00:56:44.130
So that's uploading to
cloud storage right now.

00:56:44.130 --> 00:56:45.582
All right, there it is.

00:56:45.582 --> 00:56:46.290
So it's uploaded.

00:56:46.290 --> 00:56:47.914
We see that I am the
only collaborator,

00:56:47.914 --> 00:56:49.140
so let's change that.

00:56:49.140 --> 00:56:50.690
I'm going to share
this with Greg.

00:56:50.690 --> 00:56:53.796
Now demo note where I'm going to
use Chrome profiles to simulate

00:56:53.796 --> 00:56:55.670
Greg and myself
communicating back and forth.

00:56:55.670 --> 00:56:59.250
So we're going to bump
over to Greg's profile.

00:56:59.250 --> 00:57:01.000
Oh yes, it looks
just like you, Greg.

00:57:01.000 --> 00:57:02.860
Oh, you're a Despicable
Me fan as well.

00:57:02.860 --> 00:57:04.224
I love it, it's great.

00:57:04.224 --> 00:57:06.640
That is like the craziest theme
I've ever seen in my life.

00:57:09.880 --> 00:57:12.400
All right, back to business.

00:57:12.400 --> 00:57:14.550
OK, so I'm sharing this
with Greg right now.

00:57:14.550 --> 00:57:15.620
It's going out.

00:57:15.620 --> 00:57:18.980
It's going to log him in.

00:57:18.980 --> 00:57:21.356
Wait for it.

00:57:21.356 --> 00:57:22.670
OK, there he is.

00:57:22.670 --> 00:57:24.420
All right, and you see
now that Greg and I

00:57:24.420 --> 00:57:26.220
are collaborating on this image.

00:57:26.220 --> 00:57:27.355
Now to show you it
happening in real time--

00:57:27.355 --> 00:57:29.021
I'm going to try to
move this over here.

00:57:32.215 --> 00:57:34.090
So I'm going to pretend
that Greg is actually

00:57:34.090 --> 00:57:37.730
doing the editing, and you're
going to see things happening

00:57:37.730 --> 00:57:40.030
if everything works correctly
in my browser as well.

00:57:40.030 --> 00:57:42.890
So we'll dress up
with a frame first.

00:57:42.890 --> 00:57:44.700
Nothing goes with
green like magenta.

00:57:44.700 --> 00:57:47.055
Grab that.

00:57:47.055 --> 00:57:48.829
Say Add Border.

00:57:48.829 --> 00:57:49.870
Good, we've got a border.

00:57:49.870 --> 00:57:54.649
And now we're going to add
some high-end doodling.

00:57:54.649 --> 00:57:56.940
Now somebody had mentioned
that doodling on Urs's image

00:57:56.940 --> 00:57:58.860
is probably a
career-ending move.

00:58:01.340 --> 00:58:02.340
But I said hey, why not?

00:58:02.340 --> 00:58:04.340
GREG DEMICHILLIE: Only
if the demo doesn't work.

00:58:04.340 --> 00:58:05.670
CHRIS RAMSDALE: Ha ha, exactly.

00:58:05.670 --> 00:58:08.150
All right, so we're going
to give Urs a big smile.

00:58:08.150 --> 00:58:09.930
Good prices in cloud.

00:58:09.930 --> 00:58:11.980
His famous earring,
a little more bling.

00:58:11.980 --> 00:58:13.462
There we go.

00:58:13.462 --> 00:58:15.420
And now we see that it's
happening in real time

00:58:15.420 --> 00:58:16.645
back to my browser.

00:58:16.645 --> 00:58:18.020
And so again,
what's happening is

00:58:18.020 --> 00:58:20.103
that these two clients,
connecting over WebSockets

00:58:20.103 --> 00:58:21.650
backed the managed VMs.

00:58:21.650 --> 00:58:24.270
We're doing the rendering,
were caching in a local disk.

00:58:24.270 --> 00:58:26.687
Then we're sending the updates
back to the Chrome clients.

00:58:26.687 --> 00:58:29.061
Now I want to take a second
and say to all the App Engine

00:58:29.061 --> 00:58:30.950
developers and users
that are in the crowd

00:58:30.950 --> 00:58:32.620
that this typically
wasn't, and was not

00:58:32.620 --> 00:58:33.620
supported in App Engine.

00:58:33.620 --> 00:58:36.471
But yet it's been a top feature
request consistently year

00:58:36.471 --> 00:58:36.970
over year.

00:58:36.970 --> 00:58:39.350
So I'm happy to announce that
those feature requests are

00:58:39.350 --> 00:58:42.760
now fixed and available to you.

00:58:42.760 --> 00:58:44.420
OK, so it's not just about--

00:58:44.420 --> 00:58:44.940
[APPLAUSE]

00:58:44.940 --> 00:58:46.145
Thank you, thank you,
thank you, all the App

00:58:46.145 --> 00:58:47.436
Engine developers in the crowd.

00:58:49.930 --> 00:58:53.120
So while the ability to
access native resources

00:58:53.120 --> 00:58:55.470
and run native code on these
managed VMs is fantastic,

00:58:55.470 --> 00:58:57.130
it's not just about that.

00:58:57.130 --> 00:58:59.760
It's about great developer
experiences and great developer

00:58:59.760 --> 00:59:00.720
integration.

00:59:00.720 --> 00:59:02.678
So to show you that, I'm
going to bump back out

00:59:02.678 --> 00:59:04.820
to the developer's console here.

00:59:04.820 --> 00:59:06.420
Over here.

00:59:06.420 --> 00:59:07.080
OK.

00:59:07.080 --> 00:59:09.570
It's the same UI that
Brad had shown previously.

00:59:09.570 --> 00:59:11.212
It's our developer's console.

00:59:11.212 --> 00:59:13.420
And I'm going to show how
we've integrated App Engine

00:59:13.420 --> 00:59:17.450
and Compute Engine by drilling
down into the App Engine tab.

00:59:17.450 --> 00:59:20.052
We see our dashboard,
we see our modules.

00:59:20.052 --> 00:59:22.010
I'm going to select our
back end module, that's

00:59:22.010 --> 00:59:23.718
the one that's handling
all the real time

00:59:23.718 --> 00:59:26.140
collaboration and communication.

00:59:26.140 --> 00:59:28.089
We'll drill into the instances.

00:59:28.089 --> 00:59:29.630
And here we'll see
the instances that

00:59:29.630 --> 00:59:30.650
are running for my application.

00:59:30.650 --> 00:59:32.720
So, remember back in
the configuration file,

00:59:32.720 --> 00:59:34.690
we specified that we
want two managed VMs.

00:59:34.690 --> 00:59:39.314
Here we see those, and if we
drill into this VM over here.

00:59:39.314 --> 00:59:40.230
Give it a second.

00:59:40.230 --> 00:59:40.800
OK.

00:59:40.800 --> 00:59:43.380
And so there's the dashboard
for the underlying VM.

00:59:43.380 --> 00:59:44.760
If we move down
the page, you can

00:59:44.760 --> 00:59:47.440
see that it is, in
fact, an 8-core machine.

00:59:47.440 --> 00:59:50.200
We've automatically configured
an external IP for it.

00:59:50.200 --> 00:59:51.820
And there's some
metadata here that

00:59:51.820 --> 00:59:54.261
allows us to manage the VM,
quite a bit of it actually.

00:59:54.261 --> 00:59:55.760
So that's drilling
down into the VM.

00:59:55.760 --> 00:59:57.260
Now let's bubble
back up and see how

00:59:57.260 --> 00:59:59.240
we've integrated all
the managed services.

00:59:59.240 --> 01:00:01.710
We come back to
the App Engine tab.

01:00:01.710 --> 01:00:04.154
We'll go to our
unified logs viewer.

01:00:04.154 --> 01:00:06.320
Now what's nice about this
is it's not just unifying

01:00:06.320 --> 01:00:07.900
the logs on all my managed VMs.

01:00:07.900 --> 01:00:09.930
It's actually unifying
the logs across all the

01:00:09.930 --> 01:00:12.840
compute that I'm doing, be it a
front end running on App Engine

01:00:12.840 --> 01:00:15.890
or managed VMs that are running
on top of Compute Engine VMs.

01:00:15.890 --> 01:00:18.230
So here we see that there's
a fair number of servlets

01:00:18.230 --> 01:00:20.930
that are being hit
for my back end.

01:00:20.930 --> 01:00:22.500
Got one for serving
up an image, one

01:00:22.500 --> 01:00:24.420
for creating a
WebSockets connection.

01:00:24.420 --> 01:00:27.620
And while you could do all of
this on an unmanaged VM-- you

01:00:27.620 --> 01:00:29.570
could do it on a raw
Compute Engine VM,

01:00:29.570 --> 01:00:31.136
you can deploy
syslog or rsyslog.

01:00:31.136 --> 01:00:32.760
We think there's a
more productive way.

01:00:32.760 --> 01:00:35.218
We think that by offering a
managed and centralized service

01:00:35.218 --> 01:00:37.869
like this, you can become a
more productive developer.

01:00:37.869 --> 01:00:39.910
And furthermore, if you
apply that philosophy out

01:00:39.910 --> 01:00:43.510
to things like authentication,
deployment management,

01:00:43.510 --> 01:00:45.740
configuration management,
developer tools,

01:00:45.740 --> 01:00:47.520
developer console,
that you can be

01:00:47.520 --> 01:00:50.990
a more productive and happier
developer for the cloud.

01:00:50.990 --> 01:00:53.157
Now let's take a look at
how-- speaking of developer

01:00:53.157 --> 01:00:54.781
productivity, let's
take a look at what

01:00:54.781 --> 01:00:56.100
we do with the underlying VMs.

01:00:56.100 --> 01:00:58.947
Now, we had mentioned that these
VMs are locked down by default.

01:00:58.947 --> 01:01:00.780
So they're not-- you
don't have root access.

01:01:00.780 --> 01:01:02.295
You don't have SSH
axis into them.

01:01:02.295 --> 01:01:03.420
And that's for good reason.

01:01:03.420 --> 01:01:06.169
We don't want people going out
into production making changes

01:01:06.169 --> 01:01:07.960
to one of those VMs
that are running inside

01:01:07.960 --> 01:01:09.140
of a large fleet.

01:01:09.140 --> 01:01:12.200
It makes it hard to manage
within a high availability

01:01:12.200 --> 01:01:13.500
manner.

01:01:13.500 --> 01:01:15.010
But we recognize
the fact that there

01:01:15.010 --> 01:01:17.050
are times when you need
to get to those VMs

01:01:17.050 --> 01:01:19.190
to do things like do
some kind of debugging

01:01:19.190 --> 01:01:21.190
or check on a configuration
file that you have,

01:01:21.190 --> 01:01:23.240
or make some
configuration change just

01:01:23.240 --> 01:01:25.520
to see what happens
to the underlying VM.

01:01:25.520 --> 01:01:27.650
We make that super
simple as well.

01:01:27.650 --> 01:01:29.940
So we come back here
to the terminal.

01:01:29.940 --> 01:01:36.380
We're going to do
a gcloud instances.

01:01:36.380 --> 01:01:44.480
Excuse me, gcloud
compute instances list.

01:01:44.480 --> 01:01:46.670
And there's our two VMs
that are actually running.

01:01:46.670 --> 01:01:49.045
And now we're going to enable
debugging for one of those.

01:01:49.045 --> 01:01:55.224
So I'm goingn to do
gcloud compute debug--

01:01:55.224 --> 01:01:56.640
use the local
directory, which has

01:01:56.640 --> 01:01:58.482
the configuration for
these managed VMs.

01:01:58.482 --> 01:01:59.940
And what that's
going to do is it's

01:01:59.940 --> 01:02:01.815
going to go through that
deployment end point

01:02:01.815 --> 01:02:04.130
and put those two managed
VMs into debug mode, which

01:02:04.130 --> 01:02:05.360
is what you're seeing here.

01:02:05.360 --> 01:02:07.610
I'll clear that up.

01:02:07.610 --> 01:02:16.570
If we do gcloud
compute instances.

01:02:16.570 --> 01:02:18.490
List again, so I can
get the-- grab the name,

01:02:18.490 --> 01:02:19.531
let's grab the first one.

01:02:19.531 --> 01:02:20.915
We'll SSH into that.

01:02:20.915 --> 01:02:24.150
Let's grab that guy.

01:02:24.150 --> 01:02:25.675
Instead of list, we'll do SSH.

01:02:28.700 --> 01:02:29.870
OK.

01:02:29.870 --> 01:02:32.310
And now that'll SSH us
into the underlying VM,

01:02:32.310 --> 01:02:34.185
what you see here--
cramsdale@ae-backend-1-0.

01:02:35.965 --> 01:02:37.125
Clear that up.

01:02:37.125 --> 01:02:39.500
Now once we're on this VM, we
have access to common tools

01:02:39.500 --> 01:02:41.170
you would normally use
on a virtual machine.

01:02:41.170 --> 01:02:43.170
In this case, we can do
things like run netstat.

01:02:45.397 --> 01:02:46.980
We see all the
activity that's running

01:02:46.980 --> 01:02:48.729
through the various
connections on the VM.

01:02:48.729 --> 01:02:52.580
In this case, we can actually
see up there at 65080,

01:02:52.580 --> 01:02:55.322
the port we're listening on for
the WebSockets communication.

01:02:55.322 --> 01:02:56.780
Then we can do
things like interact

01:02:56.780 --> 01:02:57.940
with the Debian
package [INAUDIBLE]

01:02:57.940 --> 01:02:59.981
and see that the package
that we specified inside

01:02:59.981 --> 01:03:02.480
of the configuration file
is actually on the VM.

01:03:02.480 --> 01:03:07.020
In this case, we'll do DPKG, and
we'll do a grep for, let's say,

01:03:07.020 --> 01:03:08.800
magick.

01:03:08.800 --> 01:03:11.460
And sure enough, there you
see that on the bottom right,

01:03:11.460 --> 01:03:14.260
you'll see that our package is
actually installed on the VM.

01:03:14.260 --> 01:03:16.790
And so all we need
to do is we exit.

01:03:16.790 --> 01:03:20.000
We'll seal that VM back up,
and things are going to go.

01:03:20.000 --> 01:03:22.220
So what we've seen here
is that with managed VMs,

01:03:22.220 --> 01:03:25.070
we can take advantage
of the auto management

01:03:25.070 --> 01:03:27.600
that App Engine provides with
the control and flexibility

01:03:27.600 --> 01:03:29.147
of underlying
Compute Engine VMs.

01:03:29.147 --> 01:03:30.730
We make it super
simple to get started

01:03:30.730 --> 01:03:33.350
with easy configuration,
easy deployments,

01:03:33.350 --> 01:03:35.250
integration back with
managed services,

01:03:35.250 --> 01:03:36.958
as well as integration
with our developer

01:03:36.958 --> 01:03:38.770
console and our developer tools.

01:03:38.770 --> 01:03:40.770
So that you don't have
to make a choice between,

01:03:40.770 --> 01:03:44.260
oh, I want platform as a
service and automanagement,

01:03:44.260 --> 01:03:47.430
or I want to choose flexibility
with Compute Engine.

01:03:47.430 --> 01:03:49.622
Managed VMs brings
both of those together,

01:03:49.622 --> 01:03:51.080
giving you the best
of both worlds.

01:03:51.080 --> 01:03:53.140
So with that, I'm going to
turn it back over to Greg.

01:03:53.140 --> 01:03:54.431
GREG DEMICHILLIE: Thanks Chris.

01:03:54.431 --> 01:04:00.040
[APPLAUSE]

01:04:00.040 --> 01:04:01.520
So there you really
saw the ability

01:04:01.520 --> 01:04:04.900
to blend auto management and
flexibility in one offering.

01:04:04.900 --> 01:04:07.150
We think that's going to be
a great way for developers

01:04:07.150 --> 01:04:08.986
to be more productive.

01:04:08.986 --> 01:04:11.360
So the last hard problem that
we want to talk about today

01:04:11.360 --> 01:04:12.410
is a big one.

01:04:12.410 --> 01:04:14.530
It's all about data.

01:04:14.530 --> 01:04:17.840
Big data is really
revolutionizing the way people

01:04:17.840 --> 01:04:19.300
deal with analytics.

01:04:19.300 --> 01:04:21.320
And companies are
able to get insights

01:04:21.320 --> 01:04:23.660
from data that was
never before possible,

01:04:23.660 --> 01:04:25.480
it was previously
just sort of a mass

01:04:25.480 --> 01:04:27.710
of data they couldn't
make sense of.

01:04:27.710 --> 01:04:30.570
But if you take a look at
most big data deployments,

01:04:30.570 --> 01:04:32.730
there's a lot of
work in those that

01:04:32.730 --> 01:04:34.760
has nothing to do
with analytics.

01:04:34.760 --> 01:04:36.630
It's about moving
data from A to B,

01:04:36.630 --> 01:04:38.700
or sharding it so
it's efficient.

01:04:38.700 --> 01:04:42.770
Or transforming it from
one format to another.

01:04:42.770 --> 01:04:46.050
None of which is
actually about analyzing.

01:04:46.050 --> 01:04:49.130
It's all about setting
up so you can analyze.

01:04:49.130 --> 01:04:51.280
What you really want
to be able to do

01:04:51.280 --> 01:04:55.530
is take data as it's
generated in its raw form,

01:04:55.530 --> 01:04:58.430
ingest it in real time
as it's being generated,

01:04:58.430 --> 01:05:01.510
and start analyzing it the
minute it's in your system

01:05:01.510 --> 01:05:04.350
without having to go through
intermediate warehousing

01:05:04.350 --> 01:05:07.200
and transformation steps.

01:05:07.200 --> 01:05:09.870
And that's really why
we first built BigQuery.

01:05:09.870 --> 01:05:12.740
BigQuery, you probably
know, builds on a tool

01:05:12.740 --> 01:05:14.680
that we developed
internally at Google.

01:05:14.680 --> 01:05:17.020
Early on at Google,
we realized that we

01:05:17.020 --> 01:05:19.090
had to find a way
to look at the log

01:05:19.090 --> 01:05:22.170
files of massive numbers
of front end web servers

01:05:22.170 --> 01:05:23.500
to see what's going on.

01:05:23.500 --> 01:05:27.040
And we knew that none of the
existing data tools out there

01:05:27.040 --> 01:05:28.550
would be anywhere close enough.

01:05:28.550 --> 01:05:30.890
So we built an
internal tool for that,

01:05:30.890 --> 01:05:33.440
and BigQuery is
built on top of that.

01:05:33.440 --> 01:05:35.000
So it uses the
same technology we

01:05:35.000 --> 01:05:38.770
use to do massive data analytics
of front end web servers,

01:05:38.770 --> 01:05:43.350
but with a very friendly
SQL-like syntax.

01:05:43.350 --> 01:05:45.830
So back in September,
we introduced

01:05:45.830 --> 01:05:48.010
in BigQuery a streaming API.

01:05:48.010 --> 01:05:50.760
And BigQuery streaming
allowed you to take data

01:05:50.760 --> 01:05:52.880
as you're generating
it, whether that's

01:05:52.880 --> 01:05:56.740
from applications or
from physical devices.

01:05:56.740 --> 01:05:58.960
Send it into
BigQuery, and as soon

01:05:58.960 --> 01:06:01.520
as you send it to
BigQuery, it shows up

01:06:01.520 --> 01:06:03.890
and is available for analysis.

01:06:03.890 --> 01:06:05.780
Well, we started
out allowing you

01:06:05.780 --> 01:06:09.740
to ingest 1,000 rows per
second into BigQuery.

01:06:09.740 --> 01:06:11.910
Today, we're taking
that to the next level.

01:06:11.910 --> 01:06:13.390
We're announcing
BigQuery streaming

01:06:13.390 --> 01:06:18.050
supporting 100,000 rows
per second of ingestion.

01:06:18.050 --> 01:06:21.940
So what that means is you can
take massive amounts of data

01:06:21.940 --> 01:06:23.260
that you generate.

01:06:23.260 --> 01:06:26.310
And as fast as you can generate
them and send it to BigQuery,

01:06:26.310 --> 01:06:29.400
you can start analyzing it and
drawing business conclusions

01:06:29.400 --> 01:06:32.080
from it without setting
up data warehouses,

01:06:32.080 --> 01:06:34.960
without building charting,
without doing ETL,

01:06:34.960 --> 01:06:37.540
without doing copying.

01:06:37.540 --> 01:06:40.940
So to give you a demo of
exactly that, of real time

01:06:40.940 --> 01:06:43.869
large amounts of data
being analyzed in BigQuery,

01:06:43.869 --> 01:06:45.660
I have a special guest
we want to bring up.

01:06:45.660 --> 01:06:47.247
I want to bring up Eric Schmidt.

01:06:47.247 --> 01:06:49.580
Not the chairman of the board
of directors Eric Schmidt,

01:06:49.580 --> 01:06:52.048
the Eric Schmidt from
the Cloud Platform team.

01:06:52.048 --> 01:06:57.916
[APPLAUSE]

01:07:04.762 --> 01:07:06.250
ERIC SCHMIDT: Thanks, Greg.

01:07:06.250 --> 01:07:08.811
I'm a solutions architect
in the Cloud Platform team,

01:07:08.811 --> 01:07:10.060
not the chairman of the board.

01:07:17.130 --> 01:07:19.350
In this demo, I
want to demonstrate

01:07:19.350 --> 01:07:23.680
how you can leverage
BigQuery to do near real time

01:07:23.680 --> 01:07:28.220
interactive analysis over
rapidly changing massive data

01:07:28.220 --> 01:07:29.099
sets.

01:07:29.099 --> 01:07:30.640
Now as Greg just
talked about, we now

01:07:30.640 --> 01:07:33.990
have the ability to ingest
100,000 rows per second,

01:07:33.990 --> 01:07:36.590
per table, into BigQuery.

01:07:36.590 --> 01:07:39.560
For this demo, I'm
modeling some use cases

01:07:39.560 --> 01:07:42.210
from a company
called Glen Canyon.

01:07:42.210 --> 01:07:45.660
Glen Canyon is a
pioneer in smart meter

01:07:45.660 --> 01:07:49.120
and intelligent network
technology for electric power

01:07:49.120 --> 01:07:50.390
utilities.

01:07:50.390 --> 01:07:52.644
They have millions of
meters in the market today.

01:07:52.644 --> 01:07:54.060
This is an example
of one of them.

01:07:54.060 --> 01:07:58.300
They communicate
over Wi-Fi and 3G.

01:07:58.300 --> 01:08:00.770
For our demo, we're going to
have these meters report out

01:08:00.770 --> 01:08:02.820
once a minute, 60
events an hour,

01:08:02.820 --> 01:08:05.450
and I'm going to
virtualize these meters

01:08:05.450 --> 01:08:07.680
over the city of
Seattle, which roughly

01:08:07.680 --> 01:08:10.154
has 400,000 meters
in its network.

01:08:10.154 --> 01:08:11.570
At the end of the
day, we're going

01:08:11.570 --> 01:08:16.840
to be processing around 17
billion events per month.

01:08:16.840 --> 01:08:19.410
Flip over to the demo machine.

01:08:22.029 --> 01:08:23.330
All right.

01:08:23.330 --> 01:08:25.649
So the first thing I
want to do is just dive

01:08:25.649 --> 01:08:27.669
into a couple very,
very simple queries

01:08:27.669 --> 01:08:29.210
to give you some
context about what's

01:08:29.210 --> 01:08:30.630
happening with the system.

01:08:30.630 --> 01:08:33.939
On my other machine over
here, this is my meter system.

01:08:33.939 --> 01:08:37.350
I'm generating load to
create hundreds of thousands

01:08:37.350 --> 01:08:40.040
of meter requests.

01:08:40.040 --> 01:08:43.439
This query here I'm just
going to do a quick count

01:08:43.439 --> 01:08:48.290
from my single table that I'm
doing raw ingestion of records.

01:08:48.290 --> 01:08:50.890
I apologize to all my
DBA friends out there

01:08:50.890 --> 01:08:55.540
for doing a select star
with no where clause.

01:08:55.540 --> 01:08:56.300
So there you go.

01:08:56.300 --> 01:09:00.939
We have over 4.6 billion
rows in this table.

01:09:00.939 --> 01:09:04.189
We're doing around a
half billion per day.

01:09:04.189 --> 01:09:10.960
So this is roughly a little
over a week's worth of data.

01:09:10.960 --> 01:09:12.700
So what does this
data look like?

01:09:12.700 --> 01:09:16.569
If I go and look at
my raw data table.

01:09:16.569 --> 01:09:18.140
Scroll down.

01:09:18.140 --> 01:09:19.229
First get details.

01:09:19.229 --> 01:09:21.760
Scroll down.

01:09:21.760 --> 01:09:24.750
And you can see down at the
bottom I have individual meter

01:09:24.750 --> 01:09:29.100
ID, the read time from
the meter, its status--

01:09:29.100 --> 01:09:30.960
the status is very important.

01:09:30.960 --> 01:09:33.060
How many of you had to
call the electric company

01:09:33.060 --> 01:09:35.600
to tell them that
your power's off?

01:09:35.600 --> 01:09:39.149
Wouldn't it be great whenever
you call them, they tell you?

01:09:39.149 --> 01:09:41.300
You have active energy,
this is how many

01:09:41.300 --> 01:09:45.319
kilowatts per hour the home
or businesses is drawing.

01:09:45.319 --> 01:09:47.250
And if I scroll
all the way out, I

01:09:47.250 --> 01:09:49.750
have things like the actual
temperature of the meter.

01:09:49.750 --> 01:09:51.490
So temperature
increases of a meter

01:09:51.490 --> 01:09:55.440
typically indicate some
type of mechanical failure.

01:09:55.440 --> 01:09:57.890
And finally, you have
the insertion time,

01:09:57.890 --> 01:09:59.510
the time that the
record was actually

01:09:59.510 --> 01:10:02.430
inserted into BigQuery.

01:10:02.430 --> 01:10:08.040
This record, on a case-by-case
basis, is 128 bytes.

01:10:08.040 --> 01:10:11.590
So roughly, we're building
around two terabytes per month

01:10:11.590 --> 01:10:13.560
just for the
simulation of Seattle.

01:10:13.560 --> 01:10:15.780
But if you want to put
this into perspective,

01:10:15.780 --> 01:10:18.470
you start multiplying the
number of cities on the planet,

01:10:18.470 --> 01:10:21.043
you're talking about hundreds
and hundreds of terabytes

01:10:21.043 --> 01:10:23.600
into petabytes.

01:10:23.600 --> 01:10:26.320
So what can we do
with this data?

01:10:26.320 --> 01:10:27.910
I'm going to flip over.

01:10:27.910 --> 01:10:31.390
I'm going to rerender this.

01:10:31.390 --> 01:10:35.000
This is a real
time visualization

01:10:35.000 --> 01:10:38.600
of all the meters in
Seattle, all 400,000.

01:10:38.600 --> 01:10:41.420
This visualization is
powered by a standing query

01:10:41.420 --> 01:10:44.710
that I'm running
that will calculate

01:10:44.710 --> 01:10:47.340
all of the average power
for the entire grid.

01:10:47.340 --> 01:10:50.670
So you can see this
mean energy that's

01:10:50.670 --> 01:10:52.670
being drawn across the screen.

01:10:52.670 --> 01:10:55.800
It's a sliding window of
approximately 10 minutes.

01:10:55.800 --> 01:10:58.180
So every second, I'm
streaming on average

01:10:58.180 --> 01:11:02.510
around 8,000 to 10,000
records into the system

01:11:02.510 --> 01:11:05.130
because I have it
completely distributed.

01:11:05.130 --> 01:11:08.860
And BigQuery is constantly
ingesting and enabling

01:11:08.860 --> 01:11:11.700
me to query that
data in real time.

01:11:11.700 --> 01:11:13.920
Now, let's go ahead
and zoom in and try

01:11:13.920 --> 01:11:16.450
to find a location because
it's kind of hard to see what's

01:11:16.450 --> 01:11:19.240
going on in this map
with so many points.

01:11:19.240 --> 01:11:23.390
So I'm going to find my
local coffee shop on 19th.

01:11:23.390 --> 01:11:23.890
Fuel Coffee.

01:11:23.890 --> 01:11:26.380
If you've ever been in Seattle,
they have great coffee.

01:11:26.380 --> 01:11:28.890
I'm going to go ahead
and rerender this map,

01:11:28.890 --> 01:11:32.770
and in the background, I
have run another query that

01:11:32.770 --> 01:11:35.050
is doing geographic
analysis just

01:11:35.050 --> 01:11:37.690
on the lat and long
boundary for all the points

01:11:37.690 --> 01:11:39.020
that are in this view.

01:11:39.020 --> 01:11:40.820
So if I start
clicking on them, I

01:11:40.820 --> 01:11:44.250
can go ahead and get
some details specifically

01:11:44.250 --> 01:11:46.860
about just this meter.

01:11:46.860 --> 01:11:49.830
The interesting thing here to
point out is I have one table.

01:11:49.830 --> 01:11:52.350
One single table for me
to do my aggregations

01:11:52.350 --> 01:11:56.490
that I just showed you in the
previous graph or these graphs

01:11:56.490 --> 01:11:58.980
that are looking at
specific atomic records.

01:11:58.980 --> 01:12:01.170
The active energy as well
as the temperature, so we

01:12:01.170 --> 01:12:02.270
can go ahead and click around.

01:12:02.270 --> 01:12:04.690
GREG DEMICHILLIE: And this also
shows how BigQuery is not only

01:12:04.690 --> 01:12:06.770
for interactive analysis,
but you can actually

01:12:06.770 --> 01:12:08.970
build applications that
sit on top of BigQuery

01:12:08.970 --> 01:12:12.035
to do visualizations at
the API level as well.

01:12:12.035 --> 01:12:13.910
ERIC SCHMIDT: Exactly,
so some of the queries

01:12:13.910 --> 01:12:16.580
that I'm about to show you that
I was using in the console.

01:12:16.580 --> 01:12:19.400
Those are running inside of
a set of Python application

01:12:19.400 --> 01:12:23.315
as well as a Java application
to power this visualization.

01:12:23.315 --> 01:12:25.440
All right, let's get back
and look at some queries.

01:12:32.020 --> 01:12:35.310
This query is the
average power by time.

01:12:35.310 --> 01:12:38.876
And I'm going to go
ahead and run this.

01:12:38.876 --> 01:12:40.375
This is fundamentally
the same query

01:12:40.375 --> 01:12:44.360
that was powering the overall
averaging of an entire system.

01:12:44.360 --> 01:12:49.660
Now, you'll note here, up top
where, in my from statement,

01:12:49.660 --> 01:12:53.060
I'm using a relatively new
feature inside of BigQuery

01:12:53.060 --> 01:12:54.910
called table decorators.

01:12:54.910 --> 01:12:58.819
What this enables you to do is
basically filter down the rows

01:12:58.819 --> 01:13:00.860
that you would like to
see that have been written

01:13:00.860 --> 01:13:04.230
into a particular table
in a given time window.

01:13:04.230 --> 01:13:07.830
So fundamentally, I've taken
four plus four billion rows

01:13:07.830 --> 01:13:10.480
and narrow it down
to roughly 800,000.

01:13:10.480 --> 01:13:12.370
This helps with
query performance

01:13:12.370 --> 01:13:14.560
as well as reduce query cost.

01:13:14.560 --> 01:13:18.940
So you can view table
decorators as a simplified where

01:13:18.940 --> 01:13:21.140
with some benefits.

01:13:21.140 --> 01:13:23.910
So there you go, there's the
average of the entire system

01:13:23.910 --> 01:13:24.700
right now.

01:13:24.700 --> 01:13:27.880
Around 5.7 kilowatts an hour.

01:13:27.880 --> 01:13:28.860
This is interesting.

01:13:28.860 --> 01:13:32.120
I can do real time-- near real
time-- interactive analysis

01:13:32.120 --> 01:13:33.310
over lots of data.

01:13:33.310 --> 01:13:37.420
But let's write a bigger
query, because after all, this

01:13:37.420 --> 01:13:38.470
is BigQuery.

01:13:45.940 --> 01:13:51.560
This query is the
basis for the query

01:13:51.560 --> 01:13:54.110
that I was running
whenever I was zooming in

01:13:54.110 --> 01:13:57.310
on my geocoordinates.

01:13:57.310 --> 01:14:00.440
And one of the things I
want to point out here--

01:14:00.440 --> 01:14:02.300
Urs talked about
this this morning--

01:14:02.300 --> 01:14:07.650
released a feature last fall
called join, or Big JOIN.

01:14:07.650 --> 01:14:10.230
In this case, what
I'm doing is I

01:14:10.230 --> 01:14:14.670
am joining my raw meter table,
those four billion rows,

01:14:14.670 --> 01:14:17.025
to a metadata table that
contains all of my lat

01:14:17.025 --> 01:14:19.600
and long information
for my meters.

01:14:19.600 --> 01:14:23.650
This is a great way to maintain
normalization in your database.

01:14:23.650 --> 01:14:26.330
I'm a big NoSQL fan as well,
but one of the challenges

01:14:26.330 --> 01:14:28.420
is you end up
muddying your tables

01:14:28.420 --> 01:14:30.540
with lots of redundant data.

01:14:30.540 --> 01:14:33.180
Well, with the power of
join, I can go ahead and just

01:14:33.180 --> 01:14:35.280
filter out, given lat
and long, the meter

01:14:35.280 --> 01:14:38.000
IDs that I would like
to address in my query.

01:14:38.000 --> 01:14:39.860
So I'm roughly filtering
down to a couple

01:14:39.860 --> 01:14:42.220
hundred inside of that view.

01:14:42.220 --> 01:14:45.280
And I'm averaging and also
looking at their status

01:14:45.280 --> 01:14:47.219
to see if they're off and on.

01:14:47.219 --> 01:14:49.510
It's fundamentally the same
query I was running before,

01:14:49.510 --> 01:14:54.840
except I'm using joins to
filter out lat and long.

01:14:54.840 --> 01:14:58.760
Now I can average-- so I have
roughly, probably 200 to 300

01:14:58.760 --> 01:15:00.520
in this view-- and
I'm averaging so I

01:15:00.520 --> 01:15:03.170
can see who's the
highest user-- I

01:15:03.170 --> 01:15:05.740
do a sort at the bottom of this
query-- I want to see who's

01:15:05.740 --> 01:15:09.010
the highest user of
power on average.

01:15:09.010 --> 01:15:11.350
The other thing I
did in this query

01:15:11.350 --> 01:15:18.340
is leverage cross joins and
the statistical function

01:15:18.340 --> 01:15:20.140
called quantiles.

01:15:20.140 --> 01:15:27.260
To look at the entire 400,000
meters that are in this system

01:15:27.260 --> 01:15:29.530
and look at the
quantile distribution--

01:15:29.530 --> 01:15:32.190
I have 100 steps in
this distribution--

01:15:32.190 --> 01:15:35.230
so that I can compare an
individual meter to the entire

01:15:35.230 --> 01:15:36.840
population .

01:15:36.840 --> 01:15:39.740
So I'm fundamentally
taking four billion rows,

01:15:39.740 --> 01:15:42.780
narrowing it down to
around 800, doing a join,

01:15:42.780 --> 01:15:47.350
and then doing a quantile back
on the entire grid system.

01:15:47.350 --> 01:15:49.850
That's a big query.

01:15:49.850 --> 01:15:51.370
But you'll notice
I only processed

01:15:51.370 --> 01:15:53.490
around 200 megabytes of data.

01:15:53.490 --> 01:15:55.100
I didn't process
gigs of data, and I

01:15:55.100 --> 01:15:57.360
did this in roughly 15 seconds.

01:15:57.360 --> 01:16:02.340
So there you go,
meter number 163, 236.

01:16:02.340 --> 01:16:05.910
They are the highest average
user in that geo grid.

01:16:05.910 --> 01:16:10.050
And, ironically, they're
also in the 99th quantile

01:16:10.050 --> 01:16:13.220
because my data is all
completely randomized,

01:16:13.220 --> 01:16:16.760
but it's randomized
with the same patterns.

01:16:16.760 --> 01:16:18.850
Now, this same type of
query, you might not even

01:16:18.850 --> 01:16:20.350
have been able to
run this if you're

01:16:20.350 --> 01:16:22.570
running in a NoSQL environment.

01:16:22.570 --> 01:16:25.000
Or, if you didn't have
the processing power,

01:16:25.000 --> 01:16:27.030
you may have gone to
lunch and then came back.

01:16:27.030 --> 01:16:28.520
Right?

01:16:28.520 --> 01:16:31.220
So, I have one more
query to show you.

01:16:34.610 --> 01:16:37.130
While I've been running
this demo on my machine

01:16:37.130 --> 01:16:42.440
over here-- just making sure
that our system is still up--

01:16:42.440 --> 01:16:47.100
instead of running the
system to report every 60

01:16:47.100 --> 01:16:50.550
seconds or every minute, I've
asked the system the report

01:16:50.550 --> 01:16:56.100
out roughly every seven
seconds Functionally,

01:16:56.100 --> 01:16:58.640
I've taken 400,000
meters and turned them

01:16:58.640 --> 01:17:01.240
into 2.8 million meters.

01:17:01.240 --> 01:17:04.860
This equates to roughly
around 45,000 rows

01:17:04.860 --> 01:17:07.812
per second being
ingested into my table.

01:17:07.812 --> 01:17:08.770
Not doing any sharding.

01:17:08.770 --> 01:17:11.920
I have one table to do
all of my analysis off of.

01:17:11.920 --> 01:17:18.302
Now if you needed to do
further RPS, you could shard.

01:17:18.302 --> 01:17:20.260
And you could do use
something like wild cards.

01:17:20.260 --> 01:17:21.926
And you could get
hundreds of thousands,

01:17:21.926 --> 01:17:26.130
or millions of rows per
second, into BigQuery.

01:17:26.130 --> 01:17:27.710
So there you have it.

01:17:27.710 --> 01:17:30.740
All of your data in
one common environment.

01:17:30.740 --> 01:17:32.850
You have a friendly
SQL-like syntax.

01:17:32.850 --> 01:17:36.550
You have high throughput,
low latency ingestion,

01:17:36.550 --> 01:17:39.760
to do near real time
interactive analysis

01:17:39.760 --> 01:17:42.160
at democratized pricing.

01:17:42.160 --> 01:17:45.180
So thanks for your time, I hope
you enjoy the rest of the show.

01:17:45.180 --> 01:17:48.572
Please turn off your
lights, and go big data.

01:17:48.572 --> 01:17:54.295
[APPLAUSE]

01:17:54.295 --> 01:17:55.920
GREG DEMICHILLIE: It
just blows my mind

01:17:55.920 --> 01:17:57.480
that while Eric was
doing that demo,

01:17:57.480 --> 01:18:01.079
that we were putting in
45,000 new rows per second

01:18:01.079 --> 01:18:02.370
while he's doing the demo live.

01:18:02.370 --> 01:18:05.220
He gets like the gutsy on
stage demo award for the day,

01:18:05.220 --> 01:18:07.114
I think.

01:18:07.114 --> 01:18:08.780
When you look at
everything we're doing,

01:18:08.780 --> 01:18:10.746
this is a great time
to be a developer.

01:18:10.746 --> 01:18:12.370
We're going to have
drill-down sessions

01:18:12.370 --> 01:18:14.880
on all of these technologies
throughout the day as well

01:18:14.880 --> 01:18:16.820
as product managers
and engineers

01:18:16.820 --> 01:18:18.720
to help you answer
your questions.

01:18:18.720 --> 01:18:21.570
So with that, I'm going
to turn things back over

01:18:21.570 --> 01:18:23.900
to Urs to sort of
wrap up, and thank

01:18:23.900 --> 01:18:25.604
you very much for your time.

01:18:25.604 --> 01:18:26.770
URS HOLZLE: Thank you, Greg.

01:18:26.770 --> 01:18:28.924
GREG DEMICHILLIE: Thanks, Urs.

01:18:28.924 --> 01:18:30.185
URS HOLZLE: All right.

01:18:30.185 --> 01:18:33.870
Well as Greg said, this
truly is an exciting time

01:18:33.870 --> 01:18:35.130
to be engineer.

01:18:35.130 --> 01:18:38.460
Because you can
build an application

01:18:38.460 --> 01:18:40.860
for a global
audience, and you have

01:18:40.860 --> 01:18:43.860
to do very little to
do that other than

01:18:43.860 --> 01:18:45.750
focus on your problem.

01:18:45.750 --> 01:18:47.730
That is our goal.

01:18:47.730 --> 01:18:50.850
The amount of change
and innovation around us

01:18:50.850 --> 01:18:53.570
that's happening right
now is really incredible.

01:18:53.570 --> 01:18:55.790
And that creates a
huge opportunity.

01:18:55.790 --> 01:18:59.590
And what we want to do is
build the Cloud Platform

01:18:59.590 --> 01:19:05.250
that you want to use to take
advantage of that opportunity.

01:19:05.250 --> 01:19:09.150
So really, a lot of
what we focused on today

01:19:09.150 --> 01:19:12.750
was productivity and how do
we make you more productive

01:19:12.750 --> 01:19:15.360
in developing in the cloud.

01:19:15.360 --> 01:19:19.260
Make it easier to build and
test and deploy in a cloud using

01:19:19.260 --> 01:19:22.680
the tools that we already know.

01:19:22.680 --> 01:19:24.540
And then with
managed VMs, you're

01:19:24.540 --> 01:19:27.260
going to have the
flexibility of App Engine--

01:19:27.260 --> 01:19:29.200
sorry, the automanagement
of App Engine

01:19:29.200 --> 01:19:30.390
with the flexibility of VMs.

01:19:30.390 --> 01:19:32.920
And you don't have to
choose between the two.

01:19:32.920 --> 01:19:35.100
And then as we
just saw, BigQuery

01:19:35.100 --> 01:19:40.160
allows you to make big
data analysis really just

01:19:40.160 --> 01:19:42.390
work at any scale.

01:19:42.390 --> 01:19:46.380
You don't have to choose
between really high scale,

01:19:46.380 --> 01:19:49.520
interactive querying,
or real time data.

01:19:49.520 --> 01:19:53.220
All of this, all these three
things, you get on one tool,

01:19:53.220 --> 01:19:57.820
one single tool on the
Google Cloud Platform.

01:19:57.820 --> 01:19:59.930
And on top of
that, of course, we

01:19:59.930 --> 01:20:02.140
have made this all
more affordable

01:20:02.140 --> 01:20:08.180
than it's ever been before,
by following Moore's Law.

01:20:08.180 --> 01:20:12.640
Because we believe that the
price of virtualized hardware

01:20:12.640 --> 01:20:15.860
should follow the same
trends that the price

01:20:15.860 --> 01:20:18.580
of real hard work follow.

01:20:18.580 --> 01:20:20.850
Really, Moore's Law
is here to stay,

01:20:20.850 --> 01:20:24.450
and you will see
that in our cloud.

01:20:24.450 --> 01:20:27.340
Now on top of that,
I have shown you

01:20:27.340 --> 01:20:30.360
how you can get additional
discounts for sustained usage.

01:20:30.360 --> 01:20:35.000
But without upfront
payments, without locking,

01:20:35.000 --> 01:20:38.850
without long term commitment,
and really without the planning

01:20:38.850 --> 01:20:43.670
hassle that you have to go
into with other providers just

01:20:43.670 --> 01:20:46.720
to get a good price.

01:20:46.720 --> 01:20:52.520
So this is really a new way of
thinking about pricing I think.

01:20:52.520 --> 01:20:58.610
A way where we move the
planning hassle from you to us

01:20:58.610 --> 01:21:00.990
so that you can
focus on the things

01:21:00.990 --> 01:21:03.730
that you actually
want to focus on.

01:21:03.730 --> 01:21:06.950
So everything we're doing
with the platform, really,

01:21:06.950 --> 01:21:09.560
is about making you
more productive.

01:21:09.560 --> 01:21:11.390
And helping you,
the developer, to do

01:21:11.390 --> 01:21:15.690
the things you love
and let us do the rest.

01:21:15.690 --> 01:21:18.510
So, we introduced a
lot of things today.

01:21:18.510 --> 01:21:20.550
But it's just March.

01:21:20.550 --> 01:21:24.280
So you can look forward to
a lot more later this year.

01:21:24.280 --> 01:21:27.380
And I'll certainly see
many of you at Google I/O

01:21:27.380 --> 01:21:31.360
here in San Francisco in June,
when we will have a lot more

01:21:31.360 --> 01:21:33.720
to say about the Google Cloud.

01:21:33.720 --> 01:21:36.510
But before we get
there, we're going

01:21:36.510 --> 01:21:40.620
to go on a tour, a
developer roadshow,

01:21:40.620 --> 01:21:44.370
starting two weeks from
now, going through 27 cities

01:21:44.370 --> 01:21:45.080
worldwide.

01:21:45.080 --> 01:21:49.010
So look for that at
cloud.google.com/roadshow,

01:21:49.010 --> 01:21:52.260
and I hope to see some
of you there as well.

01:21:52.260 --> 01:21:54.640
So with that, enjoy
the rest of the day.

01:21:54.640 --> 01:21:56.240
All the detailed sessions.

01:21:56.240 --> 01:21:58.290
Thank you for putting
your applications

01:21:58.290 --> 01:21:59.930
in the Google Cloud.

01:21:59.930 --> 01:22:03.050
Thank you for attending
Cloud Platform Live.

01:22:03.050 --> 01:22:03.650
Thanks.

01:22:03.650 --> 01:22:09.850
[APPLAUSE]

