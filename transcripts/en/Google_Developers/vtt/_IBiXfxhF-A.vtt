WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:01.290
Hi there.

00:00:01.290 --> 00:00:02.020
My name's Alice.

00:00:02.020 --> 00:00:04.342
And this is Making Polymer
Elements Accessible.

00:00:04.342 --> 00:00:05.800
So you've gotten
the Web Components

00:00:05.800 --> 00:00:07.070
bug and downloaded Polymer.

00:00:07.070 --> 00:00:09.040
And you've made your
first custom element.

00:00:09.040 --> 00:00:09.947
Fantastic.

00:00:09.947 --> 00:00:11.530
Today I'm here to
talk a bit about how

00:00:11.530 --> 00:00:13.071
we can make sure
our brand new custom

00:00:13.071 --> 00:00:15.850
elements can be
used by everyone.

00:00:15.850 --> 00:00:17.990
Right now, built-in
HTML5 elements

00:00:17.990 --> 00:00:19.720
work well for accessibility.

00:00:19.720 --> 00:00:21.210
This didn't happen by accident.

00:00:21.210 --> 00:00:23.370
Browser developers follow
published standards

00:00:23.370 --> 00:00:25.450
for ensuring the accessibility
of these elements

00:00:25.450 --> 00:00:27.320
and add keyboard
handling, styling,

00:00:27.320 --> 00:00:29.100
and semantic
information to make sure

00:00:29.100 --> 00:00:31.222
that all users can use them.

00:00:31.222 --> 00:00:33.180
When we're creating new
components for the web,

00:00:33.180 --> 00:00:35.810
ideally they should be
using the same standards.

00:00:35.810 --> 00:00:39.192
They, too, should be
accessible to all users.

00:00:39.192 --> 00:00:40.650
When we talk about
all users, there

00:00:40.650 --> 00:00:42.274
are several broad
classes of impairment

00:00:42.274 --> 00:00:44.520
that we consider--
visual impairment, which

00:00:44.520 --> 00:00:46.820
could range from poor color
vision through low vision,

00:00:46.820 --> 00:00:49.450
to no vision; hearing
issues, whether a user is

00:00:49.450 --> 00:00:52.200
deaf, hard-of-hearing, or
simply can't use the device's

00:00:52.200 --> 00:00:54.720
audio output; mobility
or motor impairment,

00:00:54.720 --> 00:00:57.750
whether temporary or permanent,
such as a broken arm, RSI,

00:00:57.750 --> 00:01:00.270
or long-term motor disorder;
other impairments which

00:01:00.270 --> 00:01:02.470
encompass a very broad
range of issues, including

00:01:02.470 --> 00:01:05.909
cognitive impairments like
dyslexia, ADHD, brain injury,

00:01:05.909 --> 00:01:08.200
and other impairments like
learning disorder, epilepsy,

00:01:08.200 --> 00:01:09.654
and vestibular disorder.

00:01:09.654 --> 00:01:11.070
The first thing
we want to look at

00:01:11.070 --> 00:01:13.784
is whether an element can be
used with the keyboard alone.

00:01:13.784 --> 00:01:15.200
This is the first
step ensuring it

00:01:15.200 --> 00:01:17.040
can be used by users
of assistive technology

00:01:17.040 --> 00:01:18.324
on all platforms.

00:01:18.324 --> 00:01:20.490
But also important for users
with motor impairments,

00:01:20.490 --> 00:01:22.410
or injuries, or any
desktop users who

00:01:22.410 --> 00:01:25.400
can't or won't use
a mouse right now.

00:01:25.400 --> 00:01:27.039
During your
user-experience design,

00:01:27.039 --> 00:01:29.455
think about how you would use
your element with a keyboard

00:01:29.455 --> 00:01:31.420
alone and figure
out a consistent set

00:01:31.420 --> 00:01:33.210
of keyboard interactions.

00:01:33.210 --> 00:01:34.930
To help with the design
process, consider

00:01:34.930 --> 00:01:37.460
including physical impairments
in your user experience

00:01:37.460 --> 00:01:38.990
personas.

00:01:38.990 --> 00:01:41.240
If you're creating an element
which mimics an existing

00:01:41.240 --> 00:01:42.945
element in some way,
consider copying

00:01:42.945 --> 00:01:45.070
the way it handles keyboard
interactions to provide

00:01:45.070 --> 00:01:45.957
consistency.

00:01:45.957 --> 00:01:47.790
Try using a native
element with the keyboard

00:01:47.790 --> 00:01:49.420
and find out what already works.

00:01:49.420 --> 00:01:51.961
Chances are, you've been using
the keyboard sometimes anyway.

00:01:51.961 --> 00:01:53.670
So you'll find it
comes pretty naturally.

00:01:53.670 --> 00:01:55.127
Later, we'll talk
about ARIA, which

00:01:55.127 --> 00:01:57.650
allows you to specify additional
semantics for your element.

00:01:57.650 --> 00:01:59.242
Once you've picked
a semantic role,

00:01:59.242 --> 00:02:00.700
you can use the
ARIA design patents

00:02:00.700 --> 00:02:02.310
guide to get some
extra advice on what

00:02:02.310 --> 00:02:04.086
keyboard events to handle.

00:02:04.086 --> 00:02:05.710
The first step in
actually implementing

00:02:05.710 --> 00:02:07.918
keyboard interactions is to
make sure the element can

00:02:07.918 --> 00:02:08.946
take keyboard focus.

00:02:08.946 --> 00:02:10.820
Unless you can actually
focus on the element,

00:02:10.820 --> 00:02:13.120
it's not going to get
any keyboard events.

00:02:13.120 --> 00:02:15.670
Ensure you have a sensible
focus target for your element.

00:02:15.670 --> 00:02:17.350
For a simple element
like a button,

00:02:17.350 --> 00:02:19.950
this will obviously just
be the element itself.

00:02:19.950 --> 00:02:23.080
A complex element like a
menu-- maybe one focused target

00:02:23.080 --> 00:02:26.250
within the page, but then
manage focus within itself.

00:02:26.250 --> 00:02:29.150
So the active menu item
always takes focus.

00:02:29.150 --> 00:02:30.620
In this case you
want to make sure

00:02:30.620 --> 00:02:33.270
that the menu items are
programmatically focusable,

00:02:33.270 --> 00:02:35.329
but not in the tab order itself.

00:02:35.329 --> 00:02:37.870
This is where an understanding
of the nuances of the tabIndex

00:02:37.870 --> 00:02:40.440
attribute is going
to come in handy.

00:02:40.440 --> 00:02:43.420
TabIndex can take one of
three classes of values.

00:02:43.420 --> 00:02:45.227
When tabIndex is
zero, the element

00:02:45.227 --> 00:02:46.810
will be in the natural
tab order which

00:02:46.810 --> 00:02:48.189
is defined by the DOM order.

00:02:48.189 --> 00:02:49.980
This is what you would
use to make a custom

00:02:49.980 --> 00:02:53.590
element, such as a custom
button, keyboard focusable.

00:02:53.590 --> 00:02:55.910
When tabIndex is
negative, the element

00:02:55.910 --> 00:02:58.155
will be programmatically
focusable but not in the tab

00:02:58.155 --> 00:02:58.930
order.

00:02:58.930 --> 00:03:00.346
This would be
useful for something

00:03:00.346 --> 00:03:02.780
like the menu example
on the previous slide.

00:03:02.780 --> 00:03:04.410
The menu container
element can manage

00:03:04.410 --> 00:03:08.310
setting focus to each individual
menu item when appropriate.

00:03:08.310 --> 00:03:09.920
The tabIndex is
greater than zero,

00:03:09.920 --> 00:03:12.440
the element will be
in a manual tab order.

00:03:12.440 --> 00:03:14.670
This makes no sense in the
context of Web Components,

00:03:14.670 --> 00:03:17.336
since you essentially never know
where your event-- your element

00:03:17.336 --> 00:03:18.387
will fall on the page.

00:03:18.387 --> 00:03:20.720
So now that you've spec'd out
your keyboard interactions

00:03:20.720 --> 00:03:22.344
and made your element
focusable, you'll

00:03:22.344 --> 00:03:24.789
need to implement the actual
keyboard interactions.

00:03:24.789 --> 00:03:26.580
Luckily, there's an
event handler for that.

00:03:26.580 --> 00:03:28.746
You can add an on-key data
attribute to your Polymer

00:03:28.746 --> 00:03:31.120
element and add a method to
handle the keyboard event,

00:03:31.120 --> 00:03:33.610
checking for any key-press
events you're interested in.

00:03:33.610 --> 00:03:36.570
Finally, make sure your keyboard
interactions are discoverable,

00:03:36.570 --> 00:03:39.100
especially if they're not using
one of the standard patents.

00:03:39.100 --> 00:03:40.640
Tool tips or keyboard
help overlays

00:03:40.640 --> 00:03:42.730
are common patterns
for achieving this.

00:03:42.730 --> 00:03:44.550
Once our keyboard
interactions are working,

00:03:44.550 --> 00:03:46.590
we're a good part of
the way there already.

00:03:46.590 --> 00:03:48.881
Next, we need to take a look
at whether our element can

00:03:48.881 --> 00:03:50.530
be used with
assistive technology.

00:03:50.530 --> 00:03:53.010
The types of users who would
use assistive technology

00:03:53.010 --> 00:03:54.710
range from users with
visual impairments

00:03:54.710 --> 00:03:56.920
who might use screen
readers or braille displays;

00:03:56.920 --> 00:03:58.420
to users with
cognitive impairments

00:03:58.420 --> 00:04:01.410
such as dyslexia, who might
use a screen reader to augment

00:04:01.410 --> 00:04:04.240
their reading ability; and
users with motor impairments

00:04:04.240 --> 00:04:05.930
who need to use
technologies like voice

00:04:05.930 --> 00:04:09.140
control to interact
with their devices.

00:04:09.140 --> 00:04:10.967
There are really only
two parts to ensuring

00:04:10.967 --> 00:04:13.300
that your element can be used
with assistive technology,

00:04:13.300 --> 00:04:15.760
including screen readers,
once you've addressed keyboard

00:04:15.760 --> 00:04:18.640
accessibility-- adding
semantic information,

00:04:18.640 --> 00:04:21.405
including the element's
role, state, value, and name,

00:04:21.405 --> 00:04:23.280
and making sure that
all information conveyed

00:04:23.280 --> 00:04:25.790
visually has a text alternative.

00:04:25.790 --> 00:04:27.576
First, let's talk
about semantics.

00:04:27.576 --> 00:04:29.450
One of the great things
about custom elements

00:04:29.450 --> 00:04:32.070
is that they make a mark-up
look semantic again.

00:04:32.070 --> 00:04:34.760
We can hide presentation
logic inside the shadow DOM

00:04:34.760 --> 00:04:38.220
and use meaningful element
names to create a readable DOM.

00:04:38.220 --> 00:04:42.230
However, assistive technology
doesn't see those semantics.

00:04:42.230 --> 00:04:44.666
It still sees
essentially DIV soup,

00:04:44.666 --> 00:04:47.165
unless you tell it about the
semantics you want your element

00:04:47.165 --> 00:04:48.850
to have.

00:04:48.850 --> 00:04:50.910
Assuming we're not
extending built-in elements,

00:04:50.910 --> 00:04:52.410
the way we tell
assistive technology

00:04:52.410 --> 00:04:53.960
about these additional
semantics is

00:04:53.960 --> 00:04:57.740
using WAI-ARIA,
or ARIA for short.

00:04:57.740 --> 00:04:59.800
ARIA is a specification
defining support

00:04:59.800 --> 00:05:02.080
for accessible-rich
web applications.

00:05:02.080 --> 00:05:03.880
It defines mock-up
extensions implemented

00:05:03.880 --> 00:05:05.806
as attributes and
elements, which

00:05:05.806 --> 00:05:07.680
can be used to provide
additional information

00:05:07.680 --> 00:05:10.310
about the semantics of elements
to assistive technologies

00:05:10.310 --> 00:05:11.700
like screen readers.

00:05:11.700 --> 00:05:16.210
This is what using ARIA
looks like in vanilla HTML5.

00:05:16.210 --> 00:05:18.330
So we can use ARIA to add
the semantic information

00:05:18.330 --> 00:05:20.251
we want to our custom elements.

00:05:20.251 --> 00:05:22.500
This is a custom slider
element which you can visually

00:05:22.500 --> 00:05:25.550
see as a minimum value of
one, a maximum value of five,

00:05:25.550 --> 00:05:27.451
and a current value of 2.5.

00:05:27.451 --> 00:05:29.200
Until we add the
relevant ARIA attributes,

00:05:29.200 --> 00:05:31.710
though, this element doesn't
communicate any of these

00:05:31.710 --> 00:05:33.640
to assistive technology.

00:05:33.640 --> 00:05:36.420
We can add ARIA value attributes
to tell assistive technology

00:05:36.420 --> 00:05:37.905
about the value of this element.

00:05:37.905 --> 00:05:39.470
Here we have added
the attributes

00:05:39.470 --> 00:05:44.400
for role and current
minimum and maximum values.

00:05:44.400 --> 00:05:46.339
Finally, once all your
semantics are in place,

00:05:46.339 --> 00:05:48.130
make sure you always
have text alternatives

00:05:48.130 --> 00:05:51.480
for any other information
which is conveyed visually.

00:05:51.480 --> 00:05:54.790
For example, if your custom
button uses a settings icon,

00:05:54.790 --> 00:05:57.350
make sure you give it a
name of settings as well.

00:05:57.350 --> 00:05:59.440
And obviously make
sure all of your images

00:05:59.440 --> 00:06:00.470
have an alt attribute.

00:06:00.470 --> 00:06:01.928
Even if you want
them to be skipped

00:06:01.928 --> 00:06:03.360
by assistive technology.

00:06:03.360 --> 00:06:06.290
Assistive technology will try
to come up with alternative text

00:06:06.290 --> 00:06:07.550
if you don't provide it.

00:06:07.550 --> 00:06:09.320
And often it'll
pick the file name.

00:06:09.320 --> 00:06:11.940
So provide an
empty alt attribute

00:06:11.940 --> 00:06:14.020
if you want the image to
be visible to assistive

00:06:14.020 --> 00:06:15.461
technology.

00:06:15.461 --> 00:06:16.960
We also need to
make sure that users

00:06:16.960 --> 00:06:19.695
of any form of color
blindness can use our element.

00:06:19.695 --> 00:06:21.320
Firstly, let's make
sure that we're not

00:06:21.320 --> 00:06:24.132
communicating anything
with color alone.

00:06:24.132 --> 00:06:25.840
Color shouldn't be
used as the only means

00:06:25.840 --> 00:06:28.460
of conveying information
such as indicating a status,

00:06:28.460 --> 00:06:31.210
prompting for a response, or
distinguishing a visual custom

00:06:31.210 --> 00:06:32.330
element.

00:06:32.330 --> 00:06:33.900
Here we have the
Chromium dashboard

00:06:33.900 --> 00:06:35.860
which, as well as being
a Polymer application,

00:06:35.860 --> 00:06:37.530
gives the status
for each new web

00:06:37.530 --> 00:06:40.206
platform feature being developed
or shipped in Chromium.

00:06:40.206 --> 00:06:42.080
Since the color dots
next to the stakeholders

00:06:42.080 --> 00:06:44.360
are meant to convey
information, the developers

00:06:44.360 --> 00:06:46.160
added a tool tip
here which appears

00:06:46.160 --> 00:06:49.395
when you hover over the name
giving the same information.

00:06:49.395 --> 00:06:51.270
We also need to make
sure that there's always

00:06:51.270 --> 00:06:54.890
sufficient contrast between text
or icons and background color.

00:06:54.890 --> 00:06:57.120
This is important for
users with low vision

00:06:57.120 --> 00:06:59.442
who might have trouble
reading low-contrast text,

00:06:59.442 --> 00:07:01.150
color blind users in
the case where we're

00:07:01.150 --> 00:07:03.390
using two different
colors next to each other,

00:07:03.390 --> 00:07:05.200
and any user using
a mobile phone

00:07:05.200 --> 00:07:07.430
or device in bright sunlight.

00:07:07.430 --> 00:07:10.090
Any text content
displayed in your element

00:07:10.090 --> 00:07:14.417
should at least meet the minimum
contrast ratio of 4.5 to one.

00:07:14.417 --> 00:07:16.750
You can audit your element
for sufficient contrast using

00:07:16.750 --> 00:07:18.969
the accessibility developer
tools extension, which

00:07:18.969 --> 00:07:21.260
even provides suggested
foreground and background color

00:07:21.260 --> 00:07:24.160
pairs if it finds
low-contrast text.

00:07:24.160 --> 00:07:27.340
Lastly, make sure any
moving or flashing content

00:07:27.340 --> 00:07:29.330
is stoppable and safe.

00:07:29.330 --> 00:07:32.510
If you have any fancy, slidey
parallax-y transitions,

00:07:32.510 --> 00:07:34.440
make sure you have a
way to turn those off.

00:07:34.440 --> 00:07:37.870
They can be a real pain for
people with vestibular disorder

00:07:37.870 --> 00:07:39.430
who may experience
motion sickness

00:07:39.430 --> 00:07:41.510
symptoms while using them.

00:07:41.510 --> 00:07:44.550
And if you have any flashing
content-- please don't tell me

00:07:44.550 --> 00:07:46.440
you're re-implementing
the blink tag--

00:07:46.440 --> 00:07:49.270
make sure it meets the criteria
for safe flashing content

00:07:49.270 --> 00:07:52.260
of having a flash frequency
of three times per second,

00:07:52.260 --> 00:07:54.210
or fewer.

00:07:54.210 --> 00:07:57.450
So let's recap and summarize
everything into a handy list.

00:07:57.450 --> 00:07:59.580
Remember, every
built-in HTML5 element

00:07:59.580 --> 00:08:01.450
will have all of these
properties, at least

00:08:01.450 --> 00:08:02.660
in a mainstream browser.

00:08:02.660 --> 00:08:05.470
So we should make sure the
custom elements do, too.

00:08:05.470 --> 00:08:08.330
Make sure that your element can
be used with a keyboard alone.

00:08:08.330 --> 00:08:10.536
Make sure that it works
with assistive technology.

00:08:10.536 --> 00:08:12.160
Make sure that it
doesn't rely on color

00:08:12.160 --> 00:08:14.312
to communicate
important information.

00:08:14.312 --> 00:08:16.520
Make sure all text and icons
have sufficient contrast

00:08:16.520 --> 00:08:18.150
ratio with the background.

00:08:18.150 --> 00:08:20.010
Make sure that it
works without sound.

00:08:20.010 --> 00:08:21.472
I didn't cover
this, but make sure

00:08:21.472 --> 00:08:23.680
any video or audio elements
have the appropriate text

00:08:23.680 --> 00:08:24.454
alternatives.

00:08:24.454 --> 00:08:26.370
And make sure you aren't
relying on audio cues

00:08:26.370 --> 00:08:27.950
to prompt for actions.

00:08:27.950 --> 00:08:31.080
And finally, make sure any
moving or flashing content

00:08:31.080 --> 00:08:33.251
is configurable and safe.

00:08:33.251 --> 00:08:35.750
Please check out our article
on the Polymer project website,

00:08:35.750 --> 00:08:38.291
which goes into more detail on
much of what I've covered here

00:08:38.291 --> 00:08:41.580
as well as providing links to
many other useful resources.

00:08:41.580 --> 00:08:44.190
Remember, we're creating
new components for the web.

00:08:44.190 --> 00:08:45.900
We have an amazing
opportunity to make

00:08:45.900 --> 00:08:48.210
sure the web is
accessible for everyone.

00:08:48.210 --> 00:08:50.180
Let's do this.

