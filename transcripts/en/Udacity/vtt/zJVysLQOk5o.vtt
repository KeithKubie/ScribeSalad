WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:03.600
So why do we want a multiprocessor?

00:00:03.600 --> 00:00:06.680
Why not just use uniprocessors?

00:00:06.680 --> 00:00:10.980
Well first, our uniprocessors
would already be 4-wide.

00:00:10.980 --> 00:00:15.420
When we got to about 4 to six wide is
when we switch to using multiprocessors

00:00:15.420 --> 00:00:17.990
and that's because once
you get to this point,

00:00:17.990 --> 00:00:23.220
you get diminishing returns from
making the uniprocessor even wider.

00:00:23.220 --> 00:00:28.740
You can make it execute let's say,
six or eight instructions per cycle.

00:00:28.740 --> 00:00:33.520
But you don't get as much from
that extension as you did from for

00:00:33.520 --> 00:00:36.580
example, making it from two to 4 wide.

00:00:36.580 --> 00:00:39.090
And that's because we
get diminishing returns.

00:00:39.090 --> 00:00:44.430
If you remember your Amdahl's law, there
will be things that benefit from this,

00:00:44.430 --> 00:00:47.750
such as programs that have a lot of
parallelism between instructions.

00:00:47.750 --> 00:00:51.770
And then there are things that don't
benefit from this, such as programs that

00:00:51.770 --> 00:00:55.110
have a lot of dependencies so
they have to run things one at a time.

00:00:55.110 --> 00:00:59.970
Things that are 4-wide already
are already making the parallel

00:00:59.970 --> 00:01:04.680
parts fast, whereas the one at
a time parts are not accelerated.

00:01:04.680 --> 00:01:10.270
So by the time you get here, you already
have a lot of your program suffer from

00:01:10.270 --> 00:01:16.160
not enough parallelism to benefit
from either four or even six wide.

00:01:16.160 --> 00:01:21.050
Another problem with uniprocessors,
if we make them even fancier, is,

00:01:21.050 --> 00:01:24.280
to make them faster,
we have to jack up the frequency.

00:01:24.280 --> 00:01:27.310
To do that, we have to raise the voltage

00:01:27.310 --> 00:01:30.430
from what it would be if we'd
use the lower frequency.

00:01:30.430 --> 00:01:36.280
And when we do both of these, the power
consumption grows up cubically,

00:01:36.280 --> 00:01:39.850
so even if we increase
the frequency by not too much,

00:01:39.850 --> 00:01:41.970
we would end up burning our processor.

00:01:41.970 --> 00:01:46.386
So we don't really want to make our
uniprocessors be clocked twice as fast

00:01:46.386 --> 00:01:52.625
as before and we don't want to make
them much wider than they already are.

00:01:52.625 --> 00:01:54.245
But Moore's Law continues.

00:01:54.245 --> 00:01:57.775
We get twice the transistors
every 18 months for

00:01:57.775 --> 00:02:01.645
the same cot as before and
in the same area as before.

00:02:01.645 --> 00:02:06.025
So, we want to benefit from this and
improve the over all performance, but

00:02:06.025 --> 00:02:08.330
we no longer can do it this way.

00:02:08.330 --> 00:02:09.788
So what do we do?

00:02:09.788 --> 00:02:13.060
We just double the number
of cores every 18 months.

00:02:13.060 --> 00:02:17.650
That allows us to have the cores
that are not getting wider

00:02:17.650 --> 00:02:21.090
that are not getting up in
frequency too much and yet,

00:02:21.090 --> 00:02:27.090
the overall computational performance of
the shape is improving with Moore's Law.

00:02:28.210 --> 00:02:33.230
So we can get approximately a doubling
of overall performance every 18 months.

00:02:33.230 --> 00:02:36.710
That is only if we assume that
we can use all the cores.

00:02:36.710 --> 00:02:39.520
If we only have one
program with one thread,

00:02:39.520 --> 00:02:41.470
then we're really using
only one of the cores.

00:02:41.470 --> 00:02:45.020
It doesn't matter if the number of cores
doubles because we are still using

00:02:45.020 --> 00:02:46.510
one of those cores.

00:02:46.510 --> 00:02:52.250
So we need programs that
are parallel in order to exploit

00:02:52.250 --> 00:02:55.120
our many core processors
that we are getting.

00:02:55.120 --> 00:03:00.220
But if we do we continue the trend of
scaling performance up exponentially.

00:03:00.220 --> 00:03:04.010
To put this in another way we
have multiprocessors today

00:03:04.010 --> 00:03:06.680
not because we think
that we would rather have

00:03:06.680 --> 00:03:10.498
twice the cores than twice
the uniprocessor performance.

00:03:10.498 --> 00:03:15.150
It's always preferable to have a
uniprocessor, a singe core that is twice

00:03:15.150 --> 00:03:20.770
as fast as before than having two
cores that are just as fast as before.

00:03:20.770 --> 00:03:25.470
But we ran out of things,
that we can do with uniprocessors.

00:03:25.470 --> 00:03:28.840
So after a long string of years
where we were doing this,

00:03:28.840 --> 00:03:31.210
just getting better unit processors,

00:03:31.210 --> 00:03:34.950
we had to switch to this if we want
to get performance improvement.

