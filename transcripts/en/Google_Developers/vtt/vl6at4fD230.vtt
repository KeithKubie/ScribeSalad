WEBVTT
Kind: captions
Language: en

00:00:08.267 --> 00:00:10.600
DAN GALPIN: Hi, and welcome
back to the Developer Show's

00:00:10.600 --> 00:00:12.162
coverage at GDD India.

00:00:12.162 --> 00:00:13.870
I'm Dan Galpin here
to talk about Instant

00:00:13.870 --> 00:00:16.309
Apps with Lyla Fujiwara,
Android developer advocate.

00:00:16.309 --> 00:00:18.100
LYLA FUJIWARA: So
basically, an Instant App

00:00:18.100 --> 00:00:20.150
is an app where you
click on a link,

00:00:20.150 --> 00:00:22.270
and you're immediately
taken into a native Android

00:00:22.270 --> 00:00:23.235
experience.

00:00:23.235 --> 00:00:24.610
DAN GALPIN: So
what do developers

00:00:24.610 --> 00:00:26.652
need to do to turn their
app into an Instant App?

00:00:26.652 --> 00:00:28.901
LYLA FUJIWARA: OK, so there's
a couple of major things

00:00:28.901 --> 00:00:29.921
that they need to do.

00:00:29.921 --> 00:00:32.170
The first is that you need
to have runtime permissions

00:00:32.170 --> 00:00:32.860
implemented.

00:00:32.860 --> 00:00:35.550
Now, if you're already targeting
M, you've already done this,

00:00:35.550 --> 00:00:36.495
so that's great.

00:00:36.495 --> 00:00:37.870
Another thing that
you need to do

00:00:37.870 --> 00:00:39.490
is you need to
implement app links.

00:00:39.490 --> 00:00:41.320
So of course, we're talking
about the experience

00:00:41.320 --> 00:00:43.361
of clicking on the link
and getting into the app.

00:00:43.361 --> 00:00:45.070
Well, that's exactly
what app links do,

00:00:45.070 --> 00:00:47.630
so Instant Apps leverages that.

00:00:47.630 --> 00:00:50.950
And finally, your app needs
to be under 4 megabytes

00:00:50.950 --> 00:00:52.980
when it's coming
down to the device.

00:00:52.980 --> 00:00:55.930
So that, in and of itself
seems a little bit worrisome,

00:00:55.930 --> 00:00:58.360
because most apps are not
less than 4 megabytes.

00:00:58.360 --> 00:01:01.600
But the way that Instant Apps
actually enables this is you

00:01:01.600 --> 00:01:04.390
are able to split up your app
into separate feature modules

00:01:04.390 --> 00:01:06.490
so you'll actually
make different modules

00:01:06.490 --> 00:01:09.980
for the different experiences
that might be in your app,

00:01:09.980 --> 00:01:11.560
and Instant Apps
will dynamically

00:01:11.560 --> 00:01:13.752
download those for you
in 4 megabyte chunks.

00:01:13.752 --> 00:01:16.210
DAN GALPIN: What are the biggest
challenges in getting apps

00:01:16.210 --> 00:01:16.985
under 4 megabytes?

00:01:16.985 --> 00:01:17.860
LYLA FUJIWARA: Right.

00:01:17.860 --> 00:01:19.693
So even when you have
those feature modules,

00:01:19.693 --> 00:01:21.730
there is the chance that
those will get larger

00:01:21.730 --> 00:01:23.170
than 4 megabytes.

00:01:23.170 --> 00:01:25.946
And honestly, the size of those
feature modules and the reason

00:01:25.946 --> 00:01:27.820
that they might be
bloated is the same reason

00:01:27.820 --> 00:01:30.580
that a normal
installable app might

00:01:30.580 --> 00:01:34.090
be bloated, which is resources
and having potentially

00:01:34.090 --> 00:01:36.140
extra libraries in there.

00:01:36.140 --> 00:01:38.650
So if you think about it,
a library like Play Service

00:01:38.650 --> 00:01:40.810
is 1.3 megabytes,
so already that's

00:01:40.810 --> 00:01:43.240
getting you kind of close
to your 4 megabyte limit.

00:01:43.240 --> 00:01:45.570
But you can do intelligent
things like only

00:01:45.570 --> 00:01:48.306
take the parts of Play Services
that you actually need.

00:01:48.306 --> 00:01:49.760
ProGuard is also very useful.

00:01:49.760 --> 00:01:51.790
So for example, with
the support library,

00:01:51.790 --> 00:01:53.776
that's like 2.4 megabytes.

00:01:53.776 --> 00:01:55.780
If you implement
ProGuard, depending

00:01:55.780 --> 00:01:57.430
on your usage with
the support library,

00:01:57.430 --> 00:02:00.280
you can see up to 50% of
that cut out of the app.

00:02:00.280 --> 00:02:02.730
And while you're doing this,
another thing to keep in mind

00:02:02.730 --> 00:02:05.120
is that the APK Analyzer
is also incredibly useful.

00:02:05.120 --> 00:02:06.680
So the APK Analyzer
is, of course,

00:02:06.680 --> 00:02:09.580
included in Android Studio,
and lets you check your sizes

00:02:09.580 --> 00:02:12.760
as you're doing your refactoring
and making things smaller.

00:02:12.760 --> 00:02:15.310
So another useful thing to know
about are configuration APKs,

00:02:15.310 --> 00:02:17.920
and you can actually configure
your [? gradle ?] files

00:02:17.920 --> 00:02:20.365
to split up your APKs
into even smaller chunks.

00:02:20.365 --> 00:02:22.740
Now, you can do this based on
three different dimensions.

00:02:22.740 --> 00:02:24.340
So you can do it
based on language,

00:02:24.340 --> 00:02:27.100
image density, and also what
hardware you're targeting.

00:02:27.100 --> 00:02:29.147
And it uses all the
instant app technology,

00:02:29.147 --> 00:02:30.730
so it's an instant
app specific thing,

00:02:30.730 --> 00:02:33.820
and it's a pretty cool way to
get that shrinkage on your APK

00:02:33.820 --> 00:02:34.822
size.

00:02:34.822 --> 00:02:36.280
DAN GALPIN: So
where can developers

00:02:36.280 --> 00:02:37.780
go to find more
out about building

00:02:37.780 --> 00:02:40.230
Instant Apps and the Android
Studio refactoring tools.

00:02:40.230 --> 00:02:40.930
LYLA FUJIWARA:
All right, well, I

00:02:40.930 --> 00:02:43.120
would be remiss if I didn't
say go to the documentation.

00:02:43.120 --> 00:02:45.411
So that's going to give you
kind of your baseline layer

00:02:45.411 --> 00:02:47.140
of information about this.

00:02:47.140 --> 00:02:49.540
I also think that Code Labs
are especially helpful.

00:02:49.540 --> 00:02:51.660
There's a really great
Instant Apps Code Lab.

00:02:51.660 --> 00:02:53.745
It actually takes
a kind of large app

00:02:53.745 --> 00:02:55.870
that wasn't necessarily
built to be an Instant App,

00:02:55.870 --> 00:02:58.160
and you go through the
practice of refactoring

00:02:58.160 --> 00:03:00.010
it to become an Instant App.

00:03:00.010 --> 00:03:02.260
Finally, there's a really
helpful blog post out there,

00:03:02.260 --> 00:03:05.170
which we'll link which just
has a bunch of Instant App

00:03:05.170 --> 00:03:08.830
specific strategies for again,
shrinking APK size down.

00:03:08.830 --> 00:03:10.330
And that blog post
at the end of it,

00:03:10.330 --> 00:03:13.360
it also links out to a bunch
of different partner blog posts

00:03:13.360 --> 00:03:14.770
from companies
that have actually

00:03:14.770 --> 00:03:15.940
gone through this
process where they

00:03:15.940 --> 00:03:17.500
talk about the different
things that they did,

00:03:17.500 --> 00:03:19.120
and give some sample
code, and just

00:03:19.120 --> 00:03:21.370
talk about strategies for
what they did in their case.

00:03:21.370 --> 00:03:22.420
DAN GALPIN: Thank you, Lyla.

00:03:22.420 --> 00:03:22.970
LYLA FUJIWARA: Yeah, of course.

00:03:22.970 --> 00:03:23.549
This was fun.

00:03:23.549 --> 00:03:25.090
DAN GALPIN: Check
out the description

00:03:25.090 --> 00:03:27.247
for links to Android
Instant Apps documentation.

00:03:27.247 --> 00:03:29.330
Once again, I'm Dan Galpin
here with the Developer

00:03:29.330 --> 00:03:31.580
Show at GDD India.

