WEBVTT
Kind: captions
Language: en

00:00:00.959 --> 00:00:03.850
MARK WEITZEL: Welome, my name
is Mark Weitzel and I'll be

00:00:03.850 --> 00:00:08.080
talking about best practices
for OpenSocial in the

00:00:08.080 --> 00:00:09.969
enterprise with some of
my colleagues here.

00:00:10.259 --> 00:00:14.049
By way of introduction I work
for IBM, part of their strategy

00:00:14.049 --> 00:00:16.590
and technology team and I'm
also an Officer of the

00:00:16.590 --> 00:00:20.529
OpenSocial Foundation.

00:00:20.919 --> 00:00:23.659
As we get going you can follow
along with Google Wave.

00:00:23.659 --> 00:00:26.430
There's the bit.ly and we have
the bit.ly link on the bottom

00:00:26.430 --> 00:00:28.560
of the slides so you don't
have to worry about

00:00:28.560 --> 00:00:29.859
remembering it now.

00:00:29.859 --> 00:00:32.710
And the hashtag for all you
Twitter guys is #opensocial.

00:00:32.710 --> 00:00:37.660
So we'll do a little bit of
introduction, background, make

00:00:37.660 --> 00:00:41.450
sure we level set on what
OpenSocial is, how it works and

00:00:41.450 --> 00:00:44.600
then we'll talk about where we
can start applying that inside

00:00:44.600 --> 00:00:48.840
the enterprise in some
interesting ways.

00:00:48.840 --> 00:00:50.070
So what is OpenSocial?

00:00:50.780 --> 00:00:53.150
When we think about it
really breaks down

00:00:53.150 --> 00:00:54.969
into three big things.

00:00:54.969 --> 00:00:59.170
The first big thing is it's
a social graph, social API.

00:00:59.780 --> 00:01:02.840
So it has a data model for
profiles and people, but it

00:01:02.840 --> 00:01:04.860
also has a Web 2.0
component model.

00:01:04.860 --> 00:01:07.840
It allows you to take these
components and move them around

00:01:07.840 --> 00:01:08.799
inside of applications.

00:01:08.799 --> 00:01:11.419
So you can do some very rich
application embedding and

00:01:11.419 --> 00:01:13.590
that's the gadget part of it.

00:01:13.590 --> 00:01:18.439
So if we think about the social
data model this gives a

00:01:18.439 --> 00:01:21.729
standard representation because
OpenSocial is an

00:01:21.729 --> 00:01:24.040
open foundation.

00:01:24.040 --> 00:01:28.140
It provides a standard
representation for profile,

00:01:28.140 --> 00:01:30.609
people, their relationships
and feeds or activities.

00:01:30.609 --> 00:01:32.229
And we'll talk a little
bit about activity

00:01:32.229 --> 00:01:32.630
streams later on.

00:01:32.630 --> 00:01:35.390
But their activities, it gives
a standard representation

00:01:35.390 --> 00:01:36.590
for those things.

00:01:36.590 --> 00:01:40.350
And it's also easily
extensible, so if you have some

00:01:40.350 --> 00:01:43.210
information, particularly in
enterprise contexts, it's easy

00:01:43.210 --> 00:01:45.400
to extend that model.

00:01:45.800 --> 00:01:47.940
And if you abstract that out
what you're really talking

00:01:47.940 --> 00:01:50.130
about is a connected
graph of people.

00:01:50.130 --> 00:01:54.710
And those are fundamental
to the way business works.

00:01:54.710 --> 00:01:58.360
The other thing that we have
inside of OpenSocial is a set

00:01:58.360 --> 00:02:03.320
of these core APIs, the social
APIs that you can get from

00:02:03.320 --> 00:02:06.430
both JavaScript and via REST.

00:02:06.430 --> 00:02:11.819
So you can use the JavaScript
API in the gadgets to get

00:02:11.819 --> 00:02:14.410
access to people and when
you're doing things where you

00:02:14.410 --> 00:02:16.739
don't necessarily have
JavaScript you can get

00:02:16.739 --> 00:02:20.299
access to that same
information via REST.

00:02:20.299 --> 00:02:25.299
If we talk about for example,
in gadgets, you know we've got

00:02:25.299 --> 00:02:30.820
basically HTML, CSS, JavaScript
model that we wrap a little bit

00:02:30.820 --> 00:02:35.209
of XML around and that gives
us a way to modularize and

00:02:35.209 --> 00:02:37.629
create a standard component.

00:02:37.629 --> 00:02:41.089
We can take that component and
move it around into different

00:02:41.089 --> 00:02:43.099
websites that we
call containers.

00:02:43.099 --> 00:02:46.470
So things like iGoogle,
Myspace, all of those things

00:02:46.470 --> 00:02:50.389
are what we would call social
network containers, but we can

00:02:50.389 --> 00:02:53.469
also take that same technology
because there's an open source

00:02:53.469 --> 00:02:56.899
reference implementation, we
can take that same technology

00:02:56.899 --> 00:03:00.819
and we can use that behind the
firewall to build really

00:03:00.819 --> 00:03:02.260
interesting apps and get
that same modularization.

00:03:04.069 --> 00:03:07.680
And again, the JavaScript
API is for accessing that

00:03:07.680 --> 00:03:11.279
information, for accessing
people is available

00:03:11.279 --> 00:03:13.529
in JavaScript.

00:03:13.529 --> 00:03:15.509
There is a reference
implementation available

00:03:15.509 --> 00:03:17.299
in open source called
Apache Shindig.

00:03:21.029 --> 00:03:23.799
Part of the technology that was
donated by Google was some of

00:03:23.799 --> 00:03:26.799
the gadget technology
that they had.

00:03:26.799 --> 00:03:30.119
But it's important to remember
that both OpenSocial and Apache

00:03:30.119 --> 00:03:31.699
are not Google related efforts.

00:03:31.699 --> 00:03:34.630
This is really a community
effort that we have.

00:03:34.710 --> 00:03:37.819
We have an open foundation
that's made up of a number

00:03:37.819 --> 00:03:39.939
of member companies.

00:03:40.239 --> 00:03:41.409
Google is one of them.

00:03:41.409 --> 00:03:43.669
Myspace, several others.

00:03:43.669 --> 00:03:46.969
As well as an open source
project that's run at Apache,

00:03:46.969 --> 00:03:49.419
so anybody can contribute.

00:03:49.419 --> 00:03:51.549
So that's a very important
thing as we start thinking

00:03:51.549 --> 00:03:53.419
about how we take this forward.

00:03:53.419 --> 00:03:55.849
This really is a
community driven effort.

00:03:55.849 --> 00:04:00.739
In Shindig you can have
a Java or PHP server.

00:04:00.739 --> 00:04:02.229
You have both of them,
so you have your choice

00:04:02.229 --> 00:04:03.519
of technology there.

00:04:03.519 --> 00:04:06.779
And Shindig is widely used
and widely deployed at most

00:04:06.779 --> 00:04:10.919
of the social networks.

00:04:10.919 --> 00:04:13.930
So it's important as we think
about this to understand

00:04:13.930 --> 00:04:14.970
how gadgets work.

00:04:14.970 --> 00:04:20.569
One of the key pieces of
technology is that the social

00:04:20.569 --> 00:04:23.170
container, the thing that
provides the social contact to

00:04:23.170 --> 00:04:25.590
the application that your
embedding does not necessarily

00:04:25.590 --> 00:04:27.319
have to be on the same server.

00:04:27.319 --> 00:04:30.650
They can be in fact spread
across the firewall if you

00:04:30.650 --> 00:04:33.170
will or even you know,
outside your enterprise.

00:04:33.170 --> 00:04:37.000
And that's very important
because this allows some very

00:04:37.000 --> 00:04:38.810
interesting application
embedding scenarios.

00:04:38.810 --> 00:04:41.639
If you have a business
relationship between

00:04:41.639 --> 00:04:43.509
enterprises you can
surface that relationship

00:04:43.509 --> 00:04:46.659
using gadgets.

00:04:46.659 --> 00:04:50.629
So what happens when the page
loads, somebody comes in and

00:04:50.629 --> 00:04:53.229
they get to a browser, the
browser makes a request.

00:04:53.229 --> 00:04:55.749
Say you're loading up a
dashboard, for example.

00:04:56.239 --> 00:05:00.069
And then what will happen is
you'll go into the gadget

00:05:00.069 --> 00:05:03.419
rendering part of Shindig or
your OpenSocial container.

00:05:03.419 --> 00:05:06.379
It will fetch the gadget
definition, which is simply

00:05:06.379 --> 00:05:09.270
an XML file around CSS,
HTML and JavaScript.

00:05:10.999 --> 00:05:12.319
It'll fetch that.

00:05:12.319 --> 00:05:15.050
It'll return it and process
it and then send that back

00:05:15.050 --> 00:05:17.629
down to the dashboard.

00:05:17.629 --> 00:05:19.929
And then you can turn around
and make another request if you

00:05:19.929 --> 00:05:23.070
will to the gadget rendering
service to get some social data

00:05:23.070 --> 00:05:24.639
and return that all back.

00:05:24.639 --> 00:05:29.039
Now this flow can actually
be optimized in the 1.0 and

00:05:29.039 --> 00:05:31.330
0.9 versions of the spec
through data pipelining.

00:05:31.330 --> 00:05:33.529
So you can take that whole
thing and make that one time

00:05:33.529 --> 00:05:36.874
and you don't have to do this
constant bouncing back.

00:05:36.874 --> 00:05:39.399
What becomes very interesting
though is as we think about

00:05:39.399 --> 00:05:44.030
that application running inside
the browser, what you end up

00:05:44.030 --> 00:05:47.609
having is one place to get
social context and another

00:05:47.609 --> 00:05:49.560
place to have business logic.

00:05:49.560 --> 00:05:52.270
And so if you think about all
of the applications that you do

00:05:52.270 --> 00:05:55.639
inside of your enterprise,
where you have people,

00:05:55.639 --> 00:05:58.840
relationships with people, and
the things people do, and now

00:05:58.840 --> 00:06:02.180
you have a way to get that
information from one place and

00:06:02.180 --> 00:06:04.530
use it with business logic from
another place it becomes

00:06:04.530 --> 00:06:05.869
very, very powerful.

00:06:05.869 --> 00:06:08.720
So I can take business logic
from a business partner

00:06:08.720 --> 00:06:11.169
or another part of my
organization, I can bring it in

00:06:11.169 --> 00:06:16.909
and I can compliment all of
that with some social data.

00:06:16.909 --> 00:06:19.889
And it's important that we
don't think about necessarily

00:06:19.889 --> 00:06:22.630
friends in the traditional
sense as Helen and I are

00:06:22.630 --> 00:06:27.960
friends, but it could be that
Helen and I are colleagues

00:06:27.960 --> 00:06:31.419
collaborating on a
presentation for Google I/O.

00:06:31.419 --> 00:06:32.490
Helen works for Cisco.

00:06:32.490 --> 00:06:33.900
I work for IBM.

00:06:33.900 --> 00:06:36.919
And the things that we do and
the people that we interrelate

00:06:36.919 --> 00:06:42.280
with can be reflected in that
kind of social network as well.

00:06:42.280 --> 00:06:45.099
So speaking of that we
started about a year ago.

00:06:45.610 --> 00:06:49.110
It was last Google I/O where
we did an initial enterprise

00:06:49.110 --> 00:06:50.460
OpenSocial session.

00:06:50.869 --> 00:06:54.659
It was a collection of us that
got together really looking at

00:06:54.659 --> 00:06:57.820
this component model,
recognizing the value that a

00:06:57.820 --> 00:06:59.870
standard based component model
would have when you could take

00:06:59.870 --> 00:07:02.639
this and move it around the web
and deploy it in

00:07:02.639 --> 00:07:02.999
context, right.

00:07:02.999 --> 00:07:04.289
How that social context.

00:07:04.289 --> 00:07:07.500
And we started thinking about
how we can work together to

00:07:07.500 --> 00:07:11.139
kind of have a collective voice
around, you know guys, you

00:07:11.139 --> 00:07:13.289
started this in the consumer
space and it worked really

00:07:13.289 --> 00:07:16.110
well, but as you move into the
enterprise there's a couple

00:07:16.110 --> 00:07:17.939
things that we need
to start looking at.

00:07:17.939 --> 00:07:20.489
And that was the result that
we started talking about.

00:07:20.489 --> 00:07:24.299
And it turns out that you know
Jive, and Atlassian, Cisco, and

00:07:24.299 --> 00:07:27.289
SAP you know, we all have the
same sorts of concerns and we

00:07:27.289 --> 00:07:30.029
said this is the way we can
work in the open, transparently

00:07:30.029 --> 00:07:32.400
and collectively to advance
this specification.

00:07:32.639 --> 00:07:33.650
Because [? inter-op ?]

00:07:33.650 --> 00:07:34.930
works good for all of us.

00:07:35.090 --> 00:07:37.469
That's a shared
goal that we have.

00:07:37.469 --> 00:07:41.660
So one of the things that we
did was we had a meetup in

00:07:41.660 --> 00:07:44.030
September and we started
working on this white paper.

00:07:44.030 --> 00:07:47.240
Thinking about you know, how do
we go off and define and these

00:07:47.240 --> 00:07:50.250
are some of the folks that
participated in the white paper

00:07:50.250 --> 00:07:54.189
who have either proof of
concepts or are interested, are

00:07:54.189 --> 00:07:57.440
looking at things around
OpenSocial and how we do it.

00:07:57.440 --> 00:07:59.870
Some of the folks that are
on there actually have

00:07:59.870 --> 00:08:04.490
implementations of that and
are using that as well.

00:08:04.490 --> 00:08:05.979
And so this was the result.

00:08:06.279 --> 00:08:08.800
We put together an Enterprise
OpenSocial White Paper and we

00:08:08.800 --> 00:08:11.810
really looked at this through
the lens of if I'm sitting

00:08:11.810 --> 00:08:14.860
behind my firewall and I'm in
my enterprise, what are the

00:08:14.860 --> 00:08:16.979
things that I need that
OpenSocial doesn't have?

00:08:16.979 --> 00:08:18.360
We need to think
about manageability.

00:08:19.139 --> 00:08:22.830
The kind of interoperability
that we have has to be better

00:08:22.830 --> 00:08:25.250
because our customers aren't
going to have the, well it

00:08:25.250 --> 00:08:27.139
kind of mostly sort
of works over here.

00:08:27.689 --> 00:08:29.409
And there are just the
little things that are off.

00:08:29.409 --> 00:08:32.649
So interoperability,
portability, security, which

00:08:32.649 --> 00:08:34.550
Mark Halvorson will talk about.

00:08:34.550 --> 00:08:35.120
And then tooling, right?

00:08:35.120 --> 00:08:36.209
It has to be easier.

00:08:36.209 --> 00:08:39.130
There was a session earlier
about being able to build

00:08:39.130 --> 00:08:42.580
OpenSocial gadgets easier, so
tooling is another aspect.

00:08:42.580 --> 00:08:44.690
So these are things that we
identified and we don't

00:08:44.690 --> 00:08:45.950
necessarily have all the
answers, but these are

00:08:45.950 --> 00:08:48.640
the kinds of things that
we're working towards

00:08:48.640 --> 00:08:51.450
collectively as a group.

00:08:51.450 --> 00:08:55.510
So one of the things that I get
to do in my role at IBM is I

00:08:55.510 --> 00:08:58.740
get to do a lot of early
prototyping and early

00:08:58.740 --> 00:09:01.280
looking at technology.

00:09:01.280 --> 00:09:03.485
And that's part of my
role in the strategy

00:09:03.485 --> 00:09:04.050
and technology group.

00:09:04.050 --> 00:09:07.440
Is to look at this and
understand how and what we

00:09:07.440 --> 00:09:10.020
can do with these emerging
things in the market.

00:09:10.020 --> 00:09:12.530
So one of our goals has always
been about aggregation.

00:09:12.640 --> 00:09:16.660
This has been the focus of IBM
for a long time and we did

00:09:16.660 --> 00:09:21.020
portal aggregation in JSR 168
and it works great, right?

00:09:21.020 --> 00:09:23.355
And we even went so far as to
say you know, OK, now that

00:09:23.355 --> 00:09:25.970
we've got portlets that we can
bring these things together,

00:09:25.970 --> 00:09:28.340
how do we get them when we have
different kind of

00:09:28.340 --> 00:09:29.940
portlet servers?

00:09:29.940 --> 00:09:33.900
So we can do things like WSRP,
the remote portlet stuff.

00:09:33.900 --> 00:09:38.010
But now what we've started to
see is we're doing aggregation

00:09:38.010 --> 00:09:40.740
on the client and how do
we start thinking about

00:09:40.740 --> 00:09:41.490
aggregation on the client?

00:09:41.490 --> 00:09:43.400
And this is really getting
into the AJAX model, right?

00:09:43.400 --> 00:09:45.990
The CSS, the HTML,
the JavaScript.

00:09:45.990 --> 00:09:47.730
And so how do we start
thinking about that?

00:09:47.730 --> 00:09:51.310
And so as we look around we are
building and our customers are

00:09:51.310 --> 00:09:52.609
buildings these very rich apps.

00:09:52.609 --> 00:09:55.339
You know, with things like Dojo
and jQuery and script.aculo.us

00:09:55.339 --> 00:09:57.570
and those sorts of things.

00:09:57.570 --> 00:10:02.240
And if we think about bringing
gadgets on top, well now we get

00:10:02.240 --> 00:10:06.440
a little XML wrapper around
that and we get some very, very

00:10:06.440 --> 00:10:08.620
interesting and additional
capabilities like

00:10:08.620 --> 00:10:11.400
OpenSocial markup language
that we can use.

00:10:11.400 --> 00:10:12.910
Or you know, a
gadget lifecycle.

00:10:12.910 --> 00:10:14.870
When things are added to
the page, when things are

00:10:14.870 --> 00:10:17.180
taken off the page, we
get some callbacks there.

00:10:17.770 --> 00:10:22.220
We get the oauth that's already
in this specification.

00:10:22.220 --> 00:10:24.020
We get things like data
pipelining and features.

00:10:24.020 --> 00:10:27.330
So that little shell of XML and
the fact that we've got a

00:10:27.330 --> 00:10:30.275
container to interpret that
brings a lot of value and can

00:10:30.275 --> 00:10:32.880
start standardizing on how we
can move these components and

00:10:32.880 --> 00:10:36.460
these embedded applications
around on the web.

00:10:36.460 --> 00:10:38.230
And that gets more fun
when you start thinking

00:10:38.230 --> 00:10:39.910
about the social APIs.

00:10:39.910 --> 00:10:43.430
Having the social context
available to that application.

00:10:43.430 --> 00:10:47.590
Again, let's not think about
friends if you will, but people

00:10:47.590 --> 00:10:49.990
and people being connected to
people and the things

00:10:49.990 --> 00:10:50.930
that those people do.

00:10:50.930 --> 00:10:53.910
And that's a large part of what
we've got here in OpenSocial.

00:10:53.910 --> 00:10:56.820
Is a nice, abstract way to
think about those things.

00:10:56.820 --> 00:10:59.060
And then you can complement
that with the kinds of things

00:10:59.060 --> 00:11:03.529
like media items, which are
your videos, things like that.

00:11:03.529 --> 00:11:06.880
So you can start having
a standard programming

00:11:06.880 --> 00:11:09.570
model for these things.

00:11:09.570 --> 00:11:11.829
Because that standard
programming model is there you

00:11:11.829 --> 00:11:14.810
can do this inside the browser
inside these gadgets and if

00:11:14.810 --> 00:11:17.000
you're dealing with something
like a hybrid app well you

00:11:17.000 --> 00:11:19.080
know, we can push that down
and render that on a

00:11:19.080 --> 00:11:20.125
smart client, right?

00:11:20.125 --> 00:11:22.740
A smartphone kind of thing
or if you want to build a

00:11:22.740 --> 00:11:24.020
native app, there you go.

00:11:24.020 --> 00:11:26.140
You can use the REST APIs.

00:11:26.140 --> 00:11:28.910
So one of the things that we've
done at IBM is we have a

00:11:28.910 --> 00:11:31.290
product called mashup center.

00:11:31.290 --> 00:11:33.910
One of the things that we've
found is a lot of companies

00:11:33.910 --> 00:11:36.990
have an initiative like
this on their own.

00:11:36.990 --> 00:11:39.780
In IBM we have one that we call
iWidgets and a lot of our

00:11:39.780 --> 00:11:41.790
products are done with
iWidgets, which aren't really

00:11:41.790 --> 00:11:43.150
the same as OpenSocial gadgets.

00:11:44.000 --> 00:11:45.620
And so it's important
that all of these things

00:11:45.620 --> 00:11:47.340
start to interoperate.

00:11:47.740 --> 00:11:50.190
And can communicate, so they
all need to be treated as sort

00:11:50.190 --> 00:11:52.490
of first class citizens.

00:11:52.490 --> 00:11:55.035
And so one of the things that
this demo will show is if I'm

00:11:55.035 --> 00:11:57.399
in a business context and we
just took health care

00:11:57.399 --> 00:11:58.649
as a random example.

00:11:58.649 --> 00:12:01.130
This could be retail
or it could be travel

00:12:01.130 --> 00:12:01.690
and transportation.

00:12:01.690 --> 00:12:03.320
But you know, what would
we start to look at?

00:12:03.320 --> 00:12:04.940
What would something
like this look like?

00:12:04.940 --> 00:12:08.590
So we mocked this up using
our mashup center product.

00:12:08.590 --> 00:12:17.935
And what's going to happen is
if I click-- I get a demo here.

00:12:17.935 --> 00:12:18.430
There we go, OK.

00:12:18.430 --> 00:12:20.950
So what's going to happen is,
we go through this is you're

00:12:20.950 --> 00:12:24.430
going to see that I can take,
regardless of the type of

00:12:24.430 --> 00:12:26.250
component, so that happens to
be one of our internal iWIdget

00:12:26.250 --> 00:12:29.700
type components and I can add a
feed and I can bring that up.

00:12:29.700 --> 00:12:31.260
That's from the CDC.

00:12:31.260 --> 00:12:33.200
And the other thing that I
can do is I can start to

00:12:33.200 --> 00:12:34.480
build these rich mashups.

00:12:34.480 --> 00:12:37.480
I can take these OpenSocial
gadgets, these iWidgets and

00:12:37.480 --> 00:12:40.209
I can put them and lay them
out using the mashup center

00:12:40.209 --> 00:12:43.350
product all on the same page.

00:12:43.350 --> 00:12:45.420
And what you're going to see is
one of the things that we're

00:12:45.420 --> 00:12:49.650
working on right now is we're
working with the technology

00:12:49.650 --> 00:12:53.440
that IBM did in the Open AJAX
Alliance, which is another open

00:12:53.440 --> 00:12:56.740
foundation to build
AJAX components.

00:12:56.740 --> 00:12:59.360
And there's an underlying
technology here called the Open

00:12:59.360 --> 00:13:04.260
AJAX Hub, which allows you to
do secure eventing between

00:13:04.260 --> 00:13:05.240
components in the browser.

00:13:05.240 --> 00:13:08.409
So I can do secure eventing
between two OpenSocial gadgets.

00:13:08.409 --> 00:13:10.649
I can do secure eventing
between two iWidgets.

00:13:10.949 --> 00:13:13.980
I can do secure eventing
between an iWidget and

00:13:13.980 --> 00:13:14.890
an OpenSocial gadget.

00:13:15.370 --> 00:13:20.680
So now I can build these very
rich interactive mashups using

00:13:20.680 --> 00:13:22.420
this type of technology.

00:13:22.420 --> 00:13:23.880
And so we're doing a
couple of things.

00:13:23.880 --> 00:13:27.180
We're taking the eventing
piece, that core technology

00:13:27.180 --> 00:13:30.589
called the Open AJAX Hub and
we're bringing it inside of

00:13:30.589 --> 00:13:33.860
Apache Shindig and then
ultimately we'll write the spec

00:13:33.860 --> 00:13:35.819
around what does an event
look like for the gadget.

00:13:35.819 --> 00:13:38.009
So you can actaully have that
as a formal part of the API.

00:13:38.930 --> 00:13:41.739
And so what you're going to see
here is in this example this is

00:13:41.739 --> 00:13:43.579
really simple, it's
a patient list.

00:13:43.849 --> 00:13:46.830
So here are the patients that
some doctor John Doe is

00:13:46.830 --> 00:13:48.290
going to see for the day.

00:13:49.620 --> 00:13:52.880
And so if you've used Shindig
you'll recognize George

00:13:52.880 --> 00:13:53.440
and [? Jainee ?]

00:13:53.440 --> 00:13:56.440
and those guys because this is
just pulling some sample data

00:13:56.440 --> 00:14:00.620
from the sample container
inside or just the sample json

00:14:00.620 --> 00:14:02.520
database that comes
with Shindig.

00:14:02.520 --> 00:14:04.540
And what's going to happen is
as I start to build this up

00:14:04.540 --> 00:14:06.109
I'll select on [? Jainee ?]

00:14:06.109 --> 00:14:09.160
and you'll see the data
populate in the back.

00:14:09.160 --> 00:14:11.790
And that uses that eventing
mechanism and all of this is

00:14:11.790 --> 00:14:16.040
in OpenSocial so what we
interpreted as friends is a

00:14:16.040 --> 00:14:17.779
doctor and the patient list.

00:14:17.779 --> 00:14:20.810
So that's one way we can show
that abstract API here.

00:14:20.810 --> 00:14:22.730
And again, you see
I selected it.

00:14:22.730 --> 00:14:25.200
Things populate and
life is great.

00:14:25.200 --> 00:14:28.150
So you can start to see how we
can put all of these things

00:14:28.150 --> 00:14:30.909
together to get this
very rich experience.

00:14:30.909 --> 00:14:33.579
We can look at the abstract
social model and apply that

00:14:33.579 --> 00:14:36.480
in a business context.

00:14:36.480 --> 00:14:39.130
OK, so now I'm going to turn
it over to Mark Halvorson,

00:14:39.130 --> 00:14:46.620
who will talk a little
bit about security.

00:14:46.620 --> 00:14:46.800
Mark.

00:14:46.800 --> 00:14:47.790
MARK HALVORSON Thank you Mark.

00:14:47.790 --> 00:14:48.740
I'll keep it easy for you guys.

00:14:48.740 --> 00:14:50.210
My name is also Mark.

00:14:50.210 --> 00:14:50.770
I'm Mark Halvorson.

00:14:51.420 --> 00:14:54.850
I'm the Chief Imagineer
at Atlassian Software.

00:14:54.850 --> 00:14:57.440
So now that Mark's shown us
some of the things we might

00:14:57.440 --> 00:15:00.589
want to do with gadgets like
this let's start talking about

00:15:00.589 --> 00:15:03.120
how we're actually working with
these technologies

00:15:03.120 --> 00:15:04.810
in the real world.

00:15:04.810 --> 00:15:08.150
So a componentized model like
this is a great way to write

00:15:08.150 --> 00:15:12.010
small UI components and bring
them together in a context

00:15:12.010 --> 00:15:13.760
to relates to what the
user is trying to do.

00:15:13.760 --> 00:15:17.490
So things like a dashboard
or wiki page can now have

00:15:17.490 --> 00:15:20.800
rich content that's coming
from back end systems.

00:15:20.800 --> 00:15:24.310
But when you start to try to
write these small UI components

00:15:24.310 --> 00:15:26.290
you're always faced with the
same challenge inside

00:15:26.290 --> 00:15:27.480
an enterprise.

00:15:27.480 --> 00:15:29.930
And that's that these back end
systems are going to require

00:15:29.930 --> 00:15:31.690
some sort of authentication.

00:15:31.690 --> 00:15:34.690
You're trying to pull data from
an Oracle or from SAP or from

00:15:34.690 --> 00:15:37.910
some other system you're going
to be challenged for

00:15:37.910 --> 00:15:41.120
credentials in order to
get that information.

00:15:41.120 --> 00:15:43.740
Now in the past there's
ways to work around this.

00:15:43.740 --> 00:15:47.279
Whether you prompt the user for
the username and password and

00:15:47.279 --> 00:15:50.059
pass that on to the back end
application or if you happen to

00:15:50.059 --> 00:15:52.949
have an SSO solution in house
like that's great, things

00:15:52.949 --> 00:15:54.410
will work automatically.

00:15:54.410 --> 00:15:56.650
There's lots of different ways
you can kind of work around

00:15:56.650 --> 00:15:59.200
this security challenge.

00:15:59.200 --> 00:16:01.730
However, all of these
different solutions have

00:16:01.730 --> 00:16:03.310
one thing in common.

00:16:03.310 --> 00:16:05.210
When you're asking the user
for these credentials

00:16:05.210 --> 00:16:07.490
you're authenticating
to the back end system.

00:16:07.490 --> 00:16:09.729
You're actually
authenticating as that user.

00:16:09.729 --> 00:16:12.800
That means that the gadget
itself can do all of the

00:16:12.800 --> 00:16:15.160
actions in the back end
system that the user

00:16:15.160 --> 00:16:16.450
could do by themselves.

00:16:16.450 --> 00:16:18.210
So that could be bad.

00:16:18.210 --> 00:16:21.180
If the gadget were to go and
change your password for

00:16:21.180 --> 00:16:23.560
example it, could completely
lock you out of that system.

00:16:23.560 --> 00:16:27.070
So in an enterprise, when
you're talking about enterprise

00:16:27.070 --> 00:16:29.920
systems that actually run the
business like SAP or things

00:16:29.920 --> 00:16:33.009
that have your financial
numbers it can hinder adoption

00:16:33.009 --> 00:16:38.370
of things like these dashboards
or gadgets if the CFO or

00:16:38.370 --> 00:16:40.440
somebody has to hand over their
credentials because that

00:16:40.440 --> 00:16:44.110
could be a liability.

00:16:44.110 --> 00:16:46.800
There has to a better way and
that way is through OAuth.

00:16:46.800 --> 00:16:49.090
So OAuth is actually
authentication at

00:16:49.090 --> 00:16:50.250
the API level.

00:16:50.250 --> 00:16:53.239
So instead of handing over your
credentials and letting a

00:16:53.239 --> 00:16:56.710
gadget behave exactly like you
in the back end system, with

00:16:56.710 --> 00:17:01.190
OAuth you're granted a token
that will only allow them to

00:17:01.190 --> 00:17:03.520
interact with certain APIs
on the back end system.

00:17:03.520 --> 00:17:07.390
It's like a valet key for
your application as it were.

00:17:07.390 --> 00:17:08.720
There's a lot of nice
things about OAuth.

00:17:09.200 --> 00:17:10.540
It's an open standard.

00:17:10.540 --> 00:17:14.380
That means that everybody's
doing the same thing, so as

00:17:14.380 --> 00:17:17.490
Oracle is writing REST APIs or
SAP's writing your REST APIs we

00:17:17.490 --> 00:17:19.800
can all kind of be on the same
page as how we're

00:17:19.800 --> 00:17:22.160
authenticating in the
back end system.

00:17:22.160 --> 00:17:25.860
And how that's nice with
OpenSocial in specific

00:17:25.860 --> 00:17:28.309
is that it's just baked
into the specification.

00:17:28.309 --> 00:17:31.860
So in order to get a REST
endpoint on a back end system

00:17:31.860 --> 00:17:34.559
to work with an OpenSocial
gadget you simply have to tell

00:17:34.559 --> 00:17:38.580
that gadget where the endpoints
are for the OAuth

00:17:38.580 --> 00:17:39.160
authentication.

00:17:39.560 --> 00:17:42.440
And then you hand off all the
complexity of getting that

00:17:42.440 --> 00:17:44.160
authorization to the
container itself.

00:17:44.160 --> 00:17:47.490
So it's literally adding these
three lines of code to your

00:17:47.490 --> 00:17:52.800
gadget specification and you're
able to be OAuth enabled.

00:17:52.800 --> 00:17:57.190
So how this looks to the end
user is when they're presented

00:17:57.190 --> 00:18:01.130
a gadget that is not authorized
to the back end system the

00:18:01.130 --> 00:18:04.260
gadget will ask the user
to authorize the gadget.

00:18:04.260 --> 00:18:08.730
When they click the button
they're actually passed off to

00:18:08.730 --> 00:18:11.230
the other application where
they enter their credentials.

00:18:11.230 --> 00:18:13.754
So they're never actually
giving over their username and

00:18:13.754 --> 00:18:15.390
password to the gadget itself.

00:18:15.390 --> 00:18:17.400
It all happens within the
application that they're

00:18:17.400 --> 00:18:19.400
trying to work with.

00:18:19.400 --> 00:18:22.350
After that application gets the
credentials from the user it

00:18:22.350 --> 00:18:25.720
then asks the user to
authorize the gadget.

00:18:25.720 --> 00:18:28.256
And when they authorize the
gadget they're actually going

00:18:28.256 --> 00:18:31.290
to authorize only the APIs that
that gadget needs access to.

00:18:31.290 --> 00:18:35.350
And then finally they're
redirected back to the gadget.

00:18:35.350 --> 00:18:39.020
So Atlassian itself has widely
adopted OpenSocial inside of

00:18:39.020 --> 00:18:41.950
all of our products, so all of
our products currently are

00:18:41.950 --> 00:18:44.110
OpenSocial gadget producers.

00:18:44.110 --> 00:18:48.479
And then we have OpenSocial
containers inside of JIRA and

00:18:48.479 --> 00:18:50.740
Confluence, which means that
you can have dashboards or

00:18:50.740 --> 00:18:53.570
create wiki pages with which
gadget content out

00:18:53.570 --> 00:18:56.670
of the box today.

00:18:56.670 --> 00:18:58.760
One of the areas that we're
working on within the

00:18:58.760 --> 00:19:02.540
enterprise open social group is
that while OAuth is great on

00:19:02.540 --> 00:19:05.330
many levels there are still
some little niggles about

00:19:05.330 --> 00:19:06.270
how you work with OAuth.

00:19:06.450 --> 00:19:10.040
So if you place for example, in
this case on one Confluence

00:19:10.040 --> 00:19:13.560
page two gadgets that point at
the same back end system you're

00:19:13.560 --> 00:19:15.660
going to have to authorize each
gadget independent

00:19:15.660 --> 00:19:16.460
of one another.

00:19:16.460 --> 00:19:18.630
That's because each gadget
runs inside of an iFrame.

00:19:18.630 --> 00:19:22.920
It is completely walled
off from the context

00:19:22.920 --> 00:19:24.380
within which it runs.

00:19:24.380 --> 00:19:28.429
So that can be kind of a hassle
for the end user because that

00:19:28.429 --> 00:19:30.309
means they have to
authorize each individual

00:19:30.309 --> 00:19:31.740
gadget one by one.

00:19:31.740 --> 00:19:35.419
So we're looking at ways to
modify the specification to

00:19:35.419 --> 00:19:38.120
make it so that if they
authorize one gadget on a back

00:19:38.120 --> 00:19:40.159
end system and another gadget
from the back end system is on

00:19:40.159 --> 00:19:44.450
that page that both get
authenticated at the same time.

00:19:44.450 --> 00:19:46.915
So with that I'm going to hand
it over to Helen, who's going

00:19:46.915 --> 00:19:49.850
to talk a little bit about how
they're reusing existing

00:19:49.850 --> 00:19:51.313
infrastructure inside Cisco.

00:19:51.313 --> 00:19:51.860
HELEN CHEN: Thanks, Mark.

00:19:51.860 --> 00:19:55.790
Hi everyone.

00:19:55.790 --> 00:19:58.650
My name is Helen
Chen from Cisco.

00:19:58.650 --> 00:20:01.840
I'm the Engineering Manager.

00:20:01.840 --> 00:20:06.969
So I'm going to share with you
some of the experience we

00:20:06.969 --> 00:20:10.870
got when integrated with
the existing systems.

00:20:10.870 --> 00:20:16.040
So before you start, you really
need to think about very

00:20:16.040 --> 00:20:18.345
carefully about your
deployment plan.

00:20:18.345 --> 00:20:22.470
For example, your existing
application, what is the

00:20:22.470 --> 00:20:25.590
relationship with the new
OpenSocial application you

00:20:25.590 --> 00:20:26.759
are going to develop?

00:20:28.360 --> 00:20:33.410
And also, the gadgets inside
your firewall, does it need to

00:20:33.410 --> 00:20:39.134
access outside services or,
outside services need you to

00:20:39.134 --> 00:20:42.640
get some information
from your services.

00:20:42.640 --> 00:20:46.420
And also, what's your
IT policy for this?

00:20:46.420 --> 00:20:50.640
Do they need to allow your
server to do a server to server

00:20:50.640 --> 00:20:55.910
call from your server machine
and how about through

00:20:55.910 --> 00:20:57.580
the proxy server?

00:20:57.580 --> 00:21:00.190
All those kind of things you
need to think through it before

00:21:00.190 --> 00:21:03.409
you start otherwise you
probably need to redesign

00:21:03.409 --> 00:21:04.779
the whole architecture.

00:21:07.080 --> 00:21:14.150
So of course, when are two of
those kind of things we're also

00:21:14.150 --> 00:21:18.653
facing some kind of challenges
over there when we're designing

00:21:18.653 --> 00:21:19.890
and implementing our
social applications.

00:21:19.890 --> 00:21:28.049
For example, the standard, even
though the standard mentioned

00:21:28.049 --> 00:21:31.919
the people information could
be extended, but it doesn't

00:21:31.919 --> 00:21:35.700
address the granular [? role ?]

00:21:35.700 --> 00:21:36.680
controlled authorization.

00:21:36.680 --> 00:21:40.059
For example, some of the
gadgets you probably only

00:21:40.059 --> 00:21:45.180
allow them to access by your
financial department or some

00:21:45.180 --> 00:21:47.600
other gadgets may be only
available for the

00:21:47.600 --> 00:21:50.090
sales department.

00:21:50.090 --> 00:21:55.340
Secondly, for the issue ID from
the specification it doesn't

00:21:55.340 --> 00:21:57.390
tell you too specific much
about how the user ID looks

00:21:57.390 --> 00:22:01.299
like and these enterprise
[UNINTELLIGIBLE]

00:22:01.299 --> 00:22:03.590
you probably only have the
single user ID how those

00:22:03.590 --> 00:22:04.460
things could be addressed.

00:22:05.380 --> 00:22:08.679
And thirdly, the
inter-gadget communication.

00:22:10.500 --> 00:22:12.690
What we're addressing in
the future release is.

00:22:12.690 --> 00:22:16.169
I mean, you're here and we
are here to work together

00:22:16.169 --> 00:22:17.750
to make that happen.

00:22:17.750 --> 00:22:20.120
And then thirdly is the
guidance for extension.

00:22:21.430 --> 00:22:25.995
All of us will provide some
kind of surface from there, but

00:22:25.995 --> 00:22:28.440
what that kind of extensions
the detail should be?

00:22:28.440 --> 00:22:33.930
The guidance for this
extension will improve the

00:22:33.930 --> 00:22:36.809
interoperabilities even
from the extended APIs.

00:22:40.570 --> 00:22:42.950
So this is some other
lessons we learned.

00:22:45.630 --> 00:22:47.580
You already have
people's information

00:22:47.580 --> 00:22:48.940
in your LDAP server.

00:22:49.960 --> 00:22:55.570
Why you ask the users to input,
to fill their profiles from

00:22:55.570 --> 00:22:58.929
scratch if you know kind of
most of the social app they

00:22:58.929 --> 00:23:01.150
monitor your profile.

00:23:01.150 --> 00:23:03.359
How many percentages
that have been filled.

00:23:03.359 --> 00:23:06.399
You can see that kind of
challenge is most people

00:23:06.399 --> 00:23:09.450
don't really like to
fill their profile.

00:23:09.450 --> 00:23:13.104
So we find out since the LDAP
already has those kind of

00:23:13.104 --> 00:23:16.990
information so we extended the
person services from the

00:23:16.990 --> 00:23:22.350
Shindig and from that we get
all those kind of LDAP

00:23:22.350 --> 00:23:26.130
information automatically
for your users.

00:23:26.130 --> 00:23:29.750
When the user first time log-in
they'll get pretty much 80%

00:23:29.750 --> 00:23:30.980
of their profile filled-in.

00:23:31.690 --> 00:23:35.783
And they're automatically
synced with the back

00:23:35.783 --> 00:23:36.950
end server every night.

00:23:36.950 --> 00:23:39.960
Of course, we also extended
the social API [? juice ?]

00:23:39.960 --> 00:23:45.549
module to bind you're
[UNINTELLIGIBLE]

00:23:45.549 --> 00:23:46.080
with that interface.

00:23:48.650 --> 00:23:54.530
And also, the enterprise
extension, when you create your

00:23:54.530 --> 00:23:58.090
services I'm very sure you're
allowed to simply create

00:23:58.090 --> 00:24:00.089
another social app.

00:24:00.229 --> 00:24:01.339
You add your unique
values to it.

00:24:02.400 --> 00:24:03.870
How do you do that?

00:24:03.870 --> 00:24:08.580
From Cisco's experience we
basically created the new pulse

00:24:08.580 --> 00:24:15.429
services and also this kind of
template looks like the first

00:24:15.429 --> 00:24:19.899
part, the pulse services and
then gives a guid, which is an

00:24:19.899 --> 00:24:23.709
e-mail address and then the
service ID and followed by

00:24:23.709 --> 00:24:27.070
some other parameters.

00:24:27.070 --> 00:24:29.530
Currently we support
the response data like

00:24:29.530 --> 00:24:31.587
XML and the JSON.

00:24:34.280 --> 00:24:35.110
The whole [UNINTELLIGIBLE]

00:24:35.110 --> 00:24:36.530
works.

00:24:36.530 --> 00:24:38.900
So I'll do about like
a two minutes demo.

00:24:39.490 --> 00:24:42.960
In front of there is
about 30 minutes.

00:24:42.960 --> 00:24:45.809
Something like the marketing
like those kind of demos.

00:24:46.720 --> 00:24:47.470
Just get ignored.

00:24:48.409 --> 00:24:51.610
The reason we put that one in
front is because we want to

00:24:51.610 --> 00:24:55.520
provide to those elements
What's Cisco's doing using

00:24:55.520 --> 00:24:59.944
elements to the OpenSocial and
what's the OpenSocial

00:24:59.944 --> 00:25:00.934
helped us?

00:25:10.830 --> 00:25:14.294
[UNINTELLIGIBLE]

00:25:14.294 --> 00:25:16.761
Could we get the sound?

00:25:19.226 --> 00:25:21.152
I'm not sure.

00:25:21.152 --> 00:25:23.200
Do I hit play?

00:25:23.200 --> 00:25:26.925
DEMO VOICE: Cisco Pulse is an
innovative search and analytics

00:25:26.925 --> 00:25:30.059
platform that taps into real
time information flows over the

00:25:30.059 --> 00:25:32.970
network and discovers the
collective expertise

00:25:32.970 --> 00:25:37.290
of an organization.

00:25:37.290 --> 00:25:40.230
Cisco Pulse allows you to
search for people with

00:25:40.230 --> 00:25:44.640
experience with a
specified term.

00:25:44.640 --> 00:25:48.090
The people found in a search
are ranked by their net pulse,

00:25:48.090 --> 00:25:51.310
which is determined by the
tagging of e-mails and web

00:25:51.310 --> 00:25:53.980
traffic, as well as rich
media that is shared

00:25:53.980 --> 00:25:55.570
across the network.

00:25:55.570 --> 00:25:59.500
In addition, Cisco Pulse finds
relevant documents and videos

00:25:59.500 --> 00:26:06.530
for the specified term.

00:26:06.530 --> 00:26:09.100
Cisco Pulse leverages
and extends OpenSocial

00:26:09.100 --> 00:26:10.160
in several ways.

00:26:10.160 --> 00:26:14.340
For example, companies
typically store user data,

00:26:14.340 --> 00:26:17.660
such as name and corporate
address in their LDAP

00:26:17.660 --> 00:26:19.720
directory services.

00:26:19.720 --> 00:26:23.930
Cisco Pulse can leverage this
LDAP data and in turn make it

00:26:23.930 --> 00:26:26.330
available through
it's people API.

00:26:26.330 --> 00:26:30.960
The real power of Cisco Pulse's
OpenSocial implementation is

00:26:30.960 --> 00:26:34.780
the portability of the feature
set to other containers.

00:26:34.780 --> 00:26:38.429
Through extensions of the
existing OpenSocial APIs the

00:26:38.429 --> 00:26:42.176
search and analytical services
of Pulse are available

00:26:42.176 --> 00:26:42.860
via external gadgets.

00:26:42.860 --> 00:26:48.100
By leveraging OpenSocial it is
possible to easily integrate

00:26:48.100 --> 00:26:50.929
Cisco Pulse's intelligence
into a users workflow.

00:26:56.240 --> 00:26:58.100
HELEN CHEN: So maybe
hand it to Matt.

00:26:58.100 --> 00:27:01.320
He will address more OpenSocial
enterpirse challenges.

00:27:01.320 --> 00:27:07.860
MATT TUCKER: All right, so the
one thing we practiced was our

00:27:07.860 --> 00:27:09.810
transitions, can you guys tell?

00:27:09.920 --> 00:27:13.350
My name is Matt Tucker, I'm
the CTO at Jive Software.

00:27:13.350 --> 00:27:17.440
And I'm going to cover a couple
of specific challenges about

00:27:17.440 --> 00:27:20.425
using OpenSocial in the
enterprise context and then

00:27:20.425 --> 00:27:25.130
I'll bring it home and we'll
open it up for questions.

00:27:25.130 --> 00:27:27.940
So I'm going to cover
another OAuth topic.

00:27:28.690 --> 00:27:30.960
One of the fantastic things
in a consumer world

00:27:30.960 --> 00:27:33.710
is the simplicity of
monolithic services.

00:27:33.710 --> 00:27:36.980
There's only one iGoogle,
there's one Facebook, there's

00:27:36.980 --> 00:27:40.150
one Twitter and if you guys
have ever done any development

00:27:40.150 --> 00:27:43.780
using OAuth against Twitter for
example, you know that to

00:27:43.780 --> 00:27:47.029
interact with any Twitter user,
you as a developer go to the

00:27:47.029 --> 00:27:50.015
Twitter website, register for
an OAuth consumer key and

00:27:50.015 --> 00:27:54.860
a consumers secret and
use that for everyone.

00:27:54.860 --> 00:27:57.100
Now unfortunately that just
doesn't quite exist, that

00:27:57.100 --> 00:27:59.570
same model doesn't exist
in the enterprise world.

00:27:59.700 --> 00:28:03.250
For example, Jive SBS which is
our product, there are

00:28:03.250 --> 00:28:06.350
thousands of implementations of
our product and a lot of them

00:28:06.350 --> 00:28:07.169
are behind the firewall.

00:28:08.440 --> 00:28:10.919
So consider what that means
for a developer with

00:28:10.919 --> 00:28:13.300
the OAuth model.

00:28:13.300 --> 00:28:16.180
Essentially, as a developer,
you need to go to every single

00:28:16.180 --> 00:28:19.220
Jive instance and register for
an OAuth consumer key

00:28:19.220 --> 00:28:20.750
and consumer secret.

00:28:20.750 --> 00:28:25.080
That's an explosion of
complexity and it's much, much

00:28:25.080 --> 00:28:27.990
harder because you have to deal
with the firewall issues.

00:28:27.990 --> 00:28:31.160
So obviously this is not a
good situation and there

00:28:31.160 --> 00:28:32.960
should be a solution.

00:28:33.490 --> 00:28:35.620
One possible solution
would be OAuth 2.0.

00:28:36.649 --> 00:28:37.529
It's an emerging specification.

00:28:37.880 --> 00:28:40.910
It's starting to go
through the ITF process.

00:28:40.910 --> 00:28:43.890
Facebook recently launched part
of their social graph API using

00:28:43.890 --> 00:28:49.680
OAuth 2.0 And it's possible to
use the SSL certificate at

00:28:49.680 --> 00:28:52.740
methodology and OAuth 2.0 to
make it simpler to do

00:28:52.740 --> 00:28:54.160
that negotiation.

00:28:54.880 --> 00:28:56.630
There's another possible
solution that we

00:28:56.630 --> 00:28:59.080
are looking at.

00:28:59.080 --> 00:29:02.450
And essentially it's to somehow
make all these different Jive

00:29:02.450 --> 00:29:06.000
SBS instances look like
one monolithic service.

00:29:06.000 --> 00:29:07.990
And two advantages to that.

00:29:07.990 --> 00:29:10.309
One is we solve the
OAuth problem.

00:29:10.309 --> 00:29:15.000
It is now you register as a
Jive instance when you're first

00:29:15.000 --> 00:29:18.859
signing up as an administrator
with a public cloud and

00:29:18.859 --> 00:29:20.669
secured data connecter.

00:29:21.120 --> 00:29:23.919
Then as a developer you
go register what the

00:29:23.919 --> 00:29:24.909
cloud service wants.

00:29:24.909 --> 00:29:28.380
You get one OAuth consumer
key and consumer secret.

00:29:28.380 --> 00:29:30.305
And you can use that
to communicate with

00:29:30.305 --> 00:29:31.750
any Jive instance.

00:29:31.750 --> 00:29:35.030
So we solve the OAuth problem
and we also solve the firewall

00:29:35.030 --> 00:29:39.490
problem because the secured
data connector will let

00:29:39.490 --> 00:29:41.870
you do the communication
through the firewall.

00:29:42.630 --> 00:29:45.220
Now of course we have to make
sure that we're handling

00:29:45.220 --> 00:29:48.070
security the proper way and
that if you want to communicate

00:29:48.070 --> 00:29:50.610
with a gadget on a particular
Jive instance that you're

00:29:50.610 --> 00:29:52.730
actually authenticated
to do that.

00:29:52.970 --> 00:29:55.790
But once you get that all
working this is a much simpler

00:29:55.790 --> 00:29:59.360
model for developers.

00:29:59.360 --> 00:30:00.980
All right, another
issue with OpenSocial.

00:30:02.320 --> 00:30:03.640
We're kind of [? grazing ?]

00:30:03.640 --> 00:30:07.100
the enterprise world trying
to use a consumer defined

00:30:07.100 --> 00:30:08.240
specification perhaps.

00:30:08.300 --> 00:30:11.860
So I've pulled all these words
from the actual OpenSocial spec

00:30:11.860 --> 00:30:14.749
and you'll see things on here
like whether you're a smoker,

00:30:14.749 --> 00:30:18.450
your favorite TV shows, your
body type, whether you drink.

00:30:18.590 --> 00:30:21.299
These are not necessarily
enterprise friendly concepts.

00:30:22.000 --> 00:30:25.860
And all of it's optional and
there is a little bit of work

00:30:25.860 --> 00:30:29.240
to do in order to take what was
defined in the consumer world

00:30:29.240 --> 00:30:32.040
and make it work well
from the enterprise.

00:30:32.040 --> 00:30:34.790
Of course, that is was done for
the consumer world is the whole

00:30:34.790 --> 00:30:37.615
reason that it's simple and
that's why we all find it very

00:30:37.615 --> 00:30:40.890
interesting is it's a very
simple programming model and

00:30:40.890 --> 00:30:44.520
much better than anything we've
had in the enterprise before.

00:30:44.520 --> 00:30:47.870
So what are some of the things
that we are doing in order to

00:30:47.870 --> 00:30:50.890
address the fact that it is
a consumer specification?

00:30:50.890 --> 00:30:55.899
First, the group of us and the
larger enterprise OpenSocial

00:30:55.899 --> 00:31:00.200
working group are doing some
efforts to define some business

00:31:00.200 --> 00:31:04.079
friendly profile fields as
well as activity verbs.

00:31:04.079 --> 00:31:09.430
So as you do an action like
file an expense report, what

00:31:09.430 --> 00:31:11.919
kind of verb would
you use for that?

00:31:11.919 --> 00:31:14.549
And another thing that's
fantastic about OpenSocial

00:31:14.549 --> 00:31:16.960
itself is that
extensibility is built in.

00:31:16.960 --> 00:31:21.090
Helen talked a little bit about
how Cisco has taken the

00:31:21.090 --> 00:31:23.980
extension mechanism in
OpenSocial to add access

00:31:23.980 --> 00:31:25.109
to their own data.

00:31:25.109 --> 00:31:27.529
So the fact that that's built
into this specification itself

00:31:27.529 --> 00:31:31.940
makes it much simpler for
vendors like all of us.

00:31:31.940 --> 00:31:35.299
There's also a technology in
OpenSocial called osml tags.

00:31:36.529 --> 00:31:39.720
It's a simple templating system
if any of you have programmed

00:31:39.720 --> 00:31:43.539
against Facebook with FBML it
would look fairly familiar.

00:31:43.539 --> 00:31:46.159
And that system is
extensible as well.

00:31:46.159 --> 00:31:48.919
So it makes it very easy to add
container specific osml tags.

00:31:49.970 --> 00:31:53.419
And then finally one effort
that we're all excited about is

00:31:53.419 --> 00:31:57.249
ongoing work to merge together
the activity streams

00:31:57.249 --> 00:31:59.560
specification with
OpenSocial activities.

00:31:59.680 --> 00:32:02.390
There's a lot of good work
going on right now and I think

00:32:02.390 --> 00:32:06.270
I saw that the first patch for
the Shindig OpenSocial project

00:32:06.270 --> 00:32:12.330
to integrate with some activity
streams pretty recently.

00:32:12.330 --> 00:32:15.639
All right, so what are
we working on with the

00:32:15.639 --> 00:32:17.100
actual OpenSocial spec?

00:32:17.250 --> 00:32:20.210
The 1.0 release just came
out fairly recently.

00:32:20.210 --> 00:32:23.720
We're targeting that next
release of the spec after 1.0

00:32:23.720 --> 00:32:25.500
for the end of the year.

00:32:25.500 --> 00:32:28.750
And a few things that
matter a lot to us in the

00:32:28.750 --> 00:32:30.130
enterprise working group.

00:32:30.130 --> 00:32:32.690
First, is to solve the
inter-gadget communication

00:32:32.690 --> 00:32:35.090
problem that the first
Mark talked about.

00:32:35.090 --> 00:32:38.759
So make it possible to
securely share data between

00:32:38.759 --> 00:32:40.850
gadgets on the same page.

00:32:40.850 --> 00:32:43.709
Second, we want to solve
some OAuth issues.

00:32:43.709 --> 00:32:47.520
One in particular is installing
multiple gadgets on the same

00:32:47.520 --> 00:32:51.600
page and only having one OAuth
request flow, which the

00:32:51.600 --> 00:32:52.290
other Mark talked about.

00:32:53.250 --> 00:32:56.470
We definitely want to be
ahead of the curve with

00:32:56.470 --> 00:32:58.340
OAuth 2.0 as well.

00:32:58.340 --> 00:33:01.930
So the plan is to try to have
some working code and then as

00:33:01.930 --> 00:33:06.240
the OAuth 2.0 standard goes
through the ITF,

00:33:06.240 --> 00:33:07.180
we'll be ready.

00:33:07.520 --> 00:33:11.090
Don't know quite exactly when
that will all play out, but our

00:33:11.090 --> 00:33:13.690
intention is to be ready so
that we can move to OAuth

00:33:13.690 --> 00:33:15.660
2.0 when the time is right.

00:33:15.660 --> 00:33:18.530
And finally, it should
be possible to view

00:33:18.530 --> 00:33:20.169
gadgets through mobile.

00:33:20.169 --> 00:33:23.900
And so we wanted to find a
mobile view for the gadget

00:33:23.900 --> 00:33:25.700
specification so it's
possible to consume gadgets

00:33:25.700 --> 00:33:30.160
from mobile devices.

00:33:30.160 --> 00:33:33.740
So what do we want you to
leave this session with?

00:33:33.740 --> 00:33:38.730
First, that OpenSocial is an
open, standards based and most

00:33:38.730 --> 00:33:43.259
importantly, Web 2.0 style of
building apps and gadgets.

00:33:43.259 --> 00:33:45.570
So it's HTML, it's
CSS and JavaScript.

00:33:45.739 --> 00:33:47.070
This is simple.

00:33:47.140 --> 00:33:49.610
If we think about what's been
in the enterprise for a long

00:33:49.610 --> 00:33:55.049
time, JSR 168 portlets really,
this is far simpler, far

00:33:55.049 --> 00:33:58.350
better and that's why we're
all excited about it.

00:33:58.350 --> 00:34:00.290
Second, that there's
enormous opportunity

00:34:00.290 --> 00:34:01.759
for this technology.

00:34:01.759 --> 00:34:03.710
And for social in general
in the enterprise.

00:34:03.710 --> 00:34:06.260
There are going to be a
lot of domain specific

00:34:06.260 --> 00:34:07.030
social networks.

00:34:07.090 --> 00:34:11.039
We saw one example of that with
the patient physician social

00:34:11.039 --> 00:34:13.519
network that Mark talked about.

00:34:13.519 --> 00:34:16.879
And finally, it's easy to use
this technology to leverage

00:34:16.879 --> 00:34:18.099
what you already have.

00:34:18.099 --> 00:34:21.310
Because it's HTML and CSS and
JavaScript that means you take

00:34:21.310 --> 00:34:24.420
your existing enterprise apps,
turn them into gadgets in a

00:34:24.420 --> 00:34:28.420
very easy way and all of us as
vendors are also trying to make

00:34:28.420 --> 00:34:33.000
it very easy to leverage things
like your existing LDAP back

00:34:33.000 --> 00:34:39.779
end in order to build out the
social graph in a simple way.

00:34:39.779 --> 00:34:42.229
We have collected a few
resources if you're interested

00:34:42.229 --> 00:34:43.559
in exploring more.

00:34:43.559 --> 00:34:46.339
You can find these in
the slide deck later.

00:34:46.429 --> 00:34:48.919
In particular, the white
paper that Mark mentioned

00:34:48.919 --> 00:34:50.560
is a great resource.

00:34:50.560 --> 00:34:55.000
Talks a lot about why we think
this specification is very

00:34:55.000 --> 00:34:57.529
important in the enterprise.

00:34:57.529 --> 00:35:00.089
And with that we'll end
a little bit early.

00:35:00.089 --> 00:35:02.619
Thank you so much and we'll
open it up for questions.

00:35:14.640 --> 00:35:17.509
AUDIENCE: Hi.

00:35:17.509 --> 00:35:20.269
This is not an enterprise
specific question, but a more

00:35:20.269 --> 00:35:21.749
OpenSocial in general question.

00:35:21.749 --> 00:35:27.949
I'm implementing an app that
pulls together contacts and

00:35:27.949 --> 00:35:31.149
events from different networks
like Facebook, Twitter,

00:35:31.149 --> 00:35:33.859
Linkedin, and all that.

00:35:33.859 --> 00:35:36.220
So currently what I'm doing is
using OAuth for each of those

00:35:36.220 --> 00:35:39.029
networks and then using the
APIs that each of these

00:35:39.029 --> 00:35:40.009
networks provides, REST APIs.

00:35:40.460 --> 00:35:47.170
So my question is, is there
any benefit of looking at

00:35:47.170 --> 00:35:51.719
OpenSocial API to access data
and what's the advantage

00:35:51.719 --> 00:35:53.660
versus using the custom API?

00:35:53.660 --> 00:35:56.439
Because it seems to me that you
know, you lose some power and

00:35:56.439 --> 00:35:58.049
the second thing is what
do we do with Facebook?

00:35:58.049 --> 00:36:05.619
Thanks.

00:36:05.619 --> 00:36:07.309
MATT TUCKER: All right, I'll
start an answer and then we

00:36:07.309 --> 00:36:09.039
can pass it down perhaps.

00:36:09.039 --> 00:36:10.809
So why use OpenSocial?

00:36:11.389 --> 00:36:12.559
Why [? Am ?]

00:36:12.559 --> 00:36:16.459
said, let's say you have OAuth
and you can bring together

00:36:16.459 --> 00:36:19.189
all the social web
services together.

00:36:19.189 --> 00:36:22.799
The hope is write once and
use it with many different

00:36:22.799 --> 00:36:24.130
social networks.

00:36:24.130 --> 00:36:29.179
And the fact is OpenSocial
isn't tremendously successful

00:36:29.179 --> 00:36:30.069
in the consumer web.

00:36:30.180 --> 00:36:33.719
It is adopted by almost every
social network except for

00:36:33.719 --> 00:36:38.719
Facebook, but it's not Facebook
so that does limit its

00:36:38.719 --> 00:36:40.239
usefulness perhaps.

00:36:40.239 --> 00:36:44.770
In the enterprise world and
specifically, the ability for a

00:36:44.770 --> 00:36:47.180
developer to write a single
application and to have that

00:36:47.180 --> 00:36:50.170
work in all of our different
containers that's

00:36:50.170 --> 00:36:50.930
very important.

00:36:50.930 --> 00:36:53.680
And that prevents vendor
lock in and it makes

00:36:53.680 --> 00:36:55.119
programming simpler.

00:36:55.119 --> 00:36:57.719
And it's true, you can always
use the proprietary APIs in

00:36:57.719 --> 00:37:01.339
order to grab the social data,
but it is a fairly rich API

00:37:01.339 --> 00:37:05.489
that OpenSocial provides
and so, why not use it.

00:37:05.489 --> 00:37:09.599
It's pretty elegant and get as
far as you can there and then

00:37:09.599 --> 00:37:12.169
build a little bit of extra
stuff if you need access to

00:37:12.169 --> 00:37:16.269
the container specific data.

00:37:16.269 --> 00:37:18.410
MARK WEITZEL: I think it's also
important to recognize that

00:37:18.410 --> 00:37:21.380
OpenSocial is an open community
and an open standard, right?

00:37:21.380 --> 00:37:23.440
So you're not locked
into a proprietary API.

00:37:24.180 --> 00:37:27.400
That's one of the things that
we found very good working

00:37:27.400 --> 00:37:31.799
together is we can come and to
say we need to advance this

00:37:31.799 --> 00:37:33.819
specification, this way whether
it's mobiles or some of the

00:37:33.819 --> 00:37:37.360
gadget communication or
extensions to profiles

00:37:37.360 --> 00:37:39.269
for enterprise.

00:37:39.269 --> 00:37:42.869
So being able to work in an
open environment, being able to

00:37:42.869 --> 00:37:46.229
engage openly and have some say
in the direction, I don't think

00:37:46.229 --> 00:37:55.189
we can underestimate that.

00:37:55.189 --> 00:37:56.165
Other questions?

00:38:00.219 --> 00:38:01.739
MATT TUCKER: Don't bore us.

00:38:06.299 --> 00:38:09.920
MARK WEITZEL: Well a number of
us have spaces in the sandbox.

00:38:10.339 --> 00:38:13.000
Please feel free to stop by,
ask questions, and you can

00:38:13.000 --> 00:38:14.829
see some of the things that
we're working on there.

00:38:14.829 --> 00:38:19.829
Thank you very much
for your time.

