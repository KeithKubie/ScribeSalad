WEBVTT
Kind: captions
Language: en

00:00:06.858 --> 00:00:10.495
Hello and welcome to
YouTube Behind the Scenes.

00:00:10.495 --> 00:00:13.066
My name is Matias Molinas and
I'm a Google Developer Expert

00:00:13.066 --> 00:00:15.198
for YouTube APIs.

00:00:15.198 --> 00:00:17.561
In this lesson
we are going to see

00:00:17.561 --> 00:00:20.231
how to manage player events
and change states

00:00:20.231 --> 00:00:24.066
in the iFrame Player,
as well as the Flash Player,

00:00:24.066 --> 00:00:28.297
using iFrame, Flash
and JavaScript APIs.

00:00:28.297 --> 00:00:32.198
We are going to look at
real cases that use these APIs

00:00:32.198 --> 00:00:34.033
and how they use them.

00:00:34.990 --> 00:00:37.396
It is worth mentioning
that until 2010

00:00:37.396 --> 00:00:39.858
there was only Flash Player.

00:00:40.594 --> 00:00:43.660
Now we have new devices,

00:00:43.660 --> 00:00:46.594
like iPad and iPhone,
that can not support Flash.

00:00:47.165 --> 00:00:51.198
YouTube provides us with
a new API, the iFrame,

00:00:51.198 --> 00:00:53.627
that chooses,
according to the capabilities

00:00:53.627 --> 00:00:56.990
of the client's device,
whether to use Flash Player

00:00:56.990 --> 00:00:59.429
or an HTML5 Player.

00:00:59.429 --> 00:01:02.330
This will also depend on

00:01:02.330 --> 00:01:04.198
the format of the videos.

00:01:04.990 --> 00:01:08.825
JavaScript support
is also added to the iFrame API,

00:01:08.825 --> 00:01:11.693
converting it
into an alternative

00:01:11.693 --> 00:01:13.825
for developers
that used to use

00:01:13.825 --> 00:01:17.033
Flash Player
and the JavaScript API.

00:01:18.099 --> 00:01:19.891
As a result,

00:01:19.891 --> 00:01:23.033
we now have
the Flash Player API,

00:01:23.033 --> 00:01:26.165
the JavaScript API,
used to control

00:01:26.165 --> 00:01:28.462
Flash Player
in it's embedded version

00:01:28.462 --> 00:01:30.033
and Chromeless,

00:01:30.033 --> 00:01:33.924
and the new iFrame API,
with JavaScript support,

00:01:33.924 --> 00:01:35.891
to control the player.

00:01:36.396 --> 00:01:38.231
Are you ready?
Let's begin!

00:01:39.099 --> 00:01:45.198
THE BEST OPTION FOR THE WEB:
THE iFRAME API

00:01:46.033 --> 00:01:48.891
The iFrame API allows
the player to be embedded

00:01:48.891 --> 00:01:52.066
in a web page and controlled
through JavaScript.

00:01:52.891 --> 00:01:56.858
Unlike the Flash API,
where we embed a Flash object,

00:01:56.858 --> 00:02:00.198
in the iFrame API we include
the player in an iFrame

00:02:00.198 --> 00:02:03.330
that can communicate
with the page that includes it.

00:02:04.297 --> 00:02:07.363
This way there's
a lot more flexibility

00:02:07.363 --> 00:02:09.792
than with the Flash API
and the JavaScript API,

00:02:09.792 --> 00:02:12.726
since it allows
YouTube to decide

00:02:12.726 --> 00:02:16.264
if it uploads Flash Player
or HTML5 Player,

00:02:16.264 --> 00:02:19.495
which most portable devices
can support.

00:02:20.330 --> 00:02:22.264
Using JavaScript,

00:02:22.264 --> 00:02:24.264
you can download videos,
play videos,

00:02:24.264 --> 00:02:26.561
pause them, adjust the volume,

00:02:26.561 --> 00:02:29.858
and obtain information
for the video being watched.

00:02:31.858 --> 00:02:34.363
}STEP 1
CREATE THE PLAYER

00:02:35.066 --> 00:02:38.264
There are some important
details to remember.

00:02:38.264 --> 00:02:41.990
The iFrame API uses
an HTML5 characteristic

00:02:41.990 --> 00:02:44.693
called postMessage.

00:02:44.693 --> 00:02:47.165
Browsers like
Internet Explorer 7

00:02:47.165 --> 00:02:48.957
can not support it.

00:02:48.957 --> 00:02:50.660
Also keep in mind

00:02:50.660 --> 00:02:52.594
that the minimum size
for the player

00:02:52.594 --> 00:02:55.033
has to be 200x200 pixels.

00:02:55.825 --> 00:03:00.726
For any web page
that uses the iFrame Player,

00:03:00.726 --> 00:03:03.594
you should implement
the JavaScript function called

00:03:03.594 --> 00:03:07.462
when the JavaScript library
has finished downloading.

00:03:07.462 --> 00:03:10.726
You should also
create the players

00:03:10.726 --> 00:03:12.891
you're going to use
on your page in this function.

00:03:15.726 --> 00:03:18.231
}STEP 2 -KNOW THE STATE
AND CONTROL THE PLAYER

00:03:19.858 --> 00:03:24.066
Now let's see a complete example
of how to download a video,

00:03:24.066 --> 00:03:26.561
have it start to play
automatically,

00:03:26.561 --> 00:03:29.429
keep playing for 6 seconds,
and stop.

00:03:34.660 --> 00:03:37.198
}STEP 3
HOW IT WORKS

00:03:37.858 --> 00:03:40.561
Let's go through a step-by-step
of the example in Chrome.

00:03:41.264 --> 00:03:44.033
We see that the dome
is modified in the code

00:03:44.033 --> 00:03:47.396
to download the library
asynchronously.

00:03:47.396 --> 00:03:49.759
This is the form

00:03:49.759 --> 00:03:52.462
supported by most browsers.

00:03:52.462 --> 00:03:54.792
Once the library downloads,

00:03:54.792 --> 00:03:57.957
we create an iFrame Player,
where there used to be a dip.

00:03:57.957 --> 00:04:00.957
We do this
in the function called

00:04:00.957 --> 00:04:04.165
when the library downloads.

00:04:04.165 --> 00:04:07.297
We are going to assign
the player a global variable

00:04:07.297 --> 00:04:08.825
in this function.

00:04:08.825 --> 00:04:12.066
The onPlayerReady function
will come up

00:04:12.066 --> 00:04:13.924
when the onReady event
is launched.

00:04:13.924 --> 00:04:16.561
We specify that the player

00:04:16.561 --> 00:04:19.132
should start playing the video
when it's ready

00:04:19.132 --> 00:04:20.825
in this function.

00:04:20.825 --> 00:04:24.528
The API will call
onPlayerStateChange

00:04:24.528 --> 00:04:26.726
when the state of the player
is changed.

00:04:26.726 --> 00:04:29.363
This is when we push play,
when we push pause,

00:04:29.363 --> 00:04:31.165
and when the video
stops playing.

00:04:31.165 --> 00:04:34.693
This function is implemented,
when the state is 1

00:04:34.693 --> 00:04:36.792
or when it's playing,

00:04:36.792 --> 00:04:40.066
the player should play
for 6 seconds

00:04:40.066 --> 00:04:44.264
and then call stopVideo
to stop playing.

00:04:47.561 --> 00:04:51.396
THE FLASH API

00:04:51.396 --> 00:04:56.297
Now we will look at the AC3
Flash API of the YouTube Player.

00:04:56.297 --> 00:04:59.033
This API allows you to download
the Flash Player

00:04:59.033 --> 00:05:01.363
to your Flash application

00:05:01.363 --> 00:05:03.891
and control it
from the Flash application.

00:05:04.363 --> 00:05:06.957
You will also be able to use it
in Chromeless mode,

00:05:06.957 --> 00:05:09.726
where you can define
your own controls

00:05:09.726 --> 00:05:12.330
and control it
from your Flash application.

00:05:13.033 --> 00:05:15.825
The calls you can make
with the API

00:05:15.825 --> 00:05:17.660
are Play, Pause, Volume,

00:05:17.660 --> 00:05:20.231
and all the functions
we've seen for the player.

00:05:20.231 --> 00:05:22.528
The Actionscript API
will activate

00:05:22.528 --> 00:05:26.462
when you download the player
in another SWF.

00:05:27.264 --> 00:05:32.033
To use it, you will need
Flash 10.1 or higher installed

00:05:32.033 --> 00:05:35.660
and remember that the minimum
measurements for the player

00:05:35.660 --> 00:05:38.231
are 200x200 pixels.

00:05:38.231 --> 00:05:40.693
Other than using
the Actionscript API,

00:05:40.693 --> 00:05:43.231
you can also use
the parameters we saw

00:05:43.231 --> 00:05:46.594
in the prior lesson
to personalize the player.

00:05:47.495 --> 00:05:50.495
We will look at some of the
basic aspects of the Flash API

00:05:50.495 --> 00:05:52.231
in the following steps.

00:05:52.660 --> 00:05:55.198
}STEP 1
CHROMELESS PLAYER

00:05:56.099 --> 00:05:58.726
Let's see the URL you should use
to download

00:05:58.726 --> 00:06:01.330
the Chromeless Player
to your application.

00:06:02.726 --> 00:06:05.660
If you try downloading this URL
in a browser,

00:06:05.660 --> 00:06:09.231
you will see it downloads
Flash Player with no controls.

00:06:12.165 --> 00:06:14.660
STEP 2
LET'S SEE AN EXAMPLE

00:06:15.660 --> 00:06:17.792
For the embedded Flash Player

00:06:17.792 --> 00:06:20.165
you should use this URL.

00:06:20.165 --> 00:06:23.165
In this case you should replace
the Video ID

00:06:23.165 --> 00:06:26.528
for the Video ID
you want to be seen.

00:06:27.924 --> 00:06:30.957
Let's see an example
on YouTube Player Demo.

00:06:30.957 --> 00:06:33.429
In this demo you can compare

00:06:33.429 --> 00:06:35.660
the two types
of Flash Players.

00:06:38.660 --> 00:06:41.693
STEP 3 -PROGRAM
THE CHROMELESS PLAYER

00:06:42.033 --> 00:06:45.858
Not only can we program
and control the Flash Player

00:06:45.858 --> 00:06:48.627
through Actionscript
from a Flash application,

00:06:48.627 --> 00:06:51.330
we can also use the player

00:06:51.330 --> 00:06:54.165
from a Flash application
through JavaScript.

00:06:54.165 --> 00:06:56.561
To enable this possibility,

00:06:56.561 --> 00:06:59.924
we should add a parameter
that enables JavaScript

00:06:59.924 --> 00:07:01.891
in the player URL.

00:07:02.792 --> 00:07:05.792
This URL will look like this.

00:07:08.957 --> 00:07:12.165
In this introduction
to the Flash Player API,

00:07:12.165 --> 00:07:15.627
we will not see how to use
the Actionscript API in detail.

00:07:15.627 --> 00:07:19.033
Instead, we will see
how to control it in detail,

00:07:19.033 --> 00:07:22.099
through the JavaScript API that,
with small differences,

00:07:22.099 --> 00:07:25.561
is the same way to do it
as in the iFrame API.

00:07:25.561 --> 00:07:28.660
I invite you to study in detail
the Actionscript API,

00:07:28.660 --> 00:07:31.264
to download the examples,

00:07:31.264 --> 00:07:33.627
to install the Flex SDK
Open Source

00:07:33.627 --> 00:07:36.660
and to try to personalize
the behavior

00:07:36.660 --> 00:07:39.231
and the way
the Flash Player is seen.

00:07:40.165 --> 00:07:42.033
When should we use

00:07:42.033 --> 00:07:44.726
the Flash and Actionscript API?

00:07:44.726 --> 00:07:48.165
When your player is part
of a user experience

00:07:48.165 --> 00:07:50.528
or an application developed
in Flash.

00:07:50.528 --> 00:07:53.462
If this is not the case,
you should try to use

00:07:53.462 --> 00:07:57.099
the iFrame Player
with the following parameters.

00:07:58.198 --> 00:08:01.561
In this way, your user
experience or your application

00:08:01.561 --> 00:08:04.858
will be compatible with
a greater number of platforms.

00:08:05.594 --> 00:08:10.858
THE JAVASCRIPT API

00:08:12.066 --> 00:08:14.033
The JavaScript API
will allow you

00:08:14.033 --> 00:08:18.792
to control the Flash Player,
embedded or Chromeless,

00:08:18.792 --> 00:08:20.165
through JavaScript.

00:08:20.165 --> 00:08:25.066
You will be able to play videos,
pause them, stop them,

00:08:25.066 --> 00:08:28.759
forward them to a certain point
or many other useful functions.

00:08:29.891 --> 00:08:33.660
The page that the JavaScript
API uses should implement

00:08:33.660 --> 00:08:36.957
the function
onYouTubePlayerReady.

00:08:36.957 --> 00:08:39.495
This function will call

00:08:39.495 --> 00:08:42.231
when the player is downloaded

00:08:42.231 --> 00:08:44.495
and when the player
is ready to receive calls.

00:08:45.462 --> 00:08:48.495
To develop a web application
or user experience

00:08:48.495 --> 00:08:49.924
on a web page,

00:08:49.924 --> 00:08:53.231
you should have a site
running on a web server.

00:08:53.231 --> 00:08:56.165
This is due to restrictions
that exist in Flash

00:08:56.165 --> 00:08:59.957
to communicate between local
and Internet files.

00:08:59.957 --> 00:09:04.297
I also recommend using
SWF Object

00:09:04.297 --> 00:09:07.495
to embed the player
that you then want to control

00:09:07.495 --> 00:09:09.033
through JavaScript.

00:09:09.033 --> 00:09:12.594
This library will allow you
to detect the Flash version.

00:09:13.462 --> 00:09:15.957
Remember that you should
include the parameter

00:09:15.957 --> 00:09:18.924
to control the player
through JavaScript.

00:09:19.462 --> 00:09:21.594
We are going to create
a YouTube Flash Player

00:09:21.594 --> 00:09:24.660
and we are going to its events
and control its behavior,

00:09:24.660 --> 00:09:26.825
and all through JavaScript.

00:09:27.429 --> 00:09:29.957
STEP 1
ENABLE JAVASCRIPT

00:09:30.264 --> 00:09:32.924
Because the player downloads
from a different dominion

00:09:32.924 --> 00:09:35.297
than the HTML page,

00:09:35.297 --> 00:09:39.066
it's necessary to add
the allowScriptAccess parameter,

00:09:39.066 --> 00:09:42.429
so that the SWF Player can call

00:09:42.429 --> 00:09:45.792
the JavaScript functions
defined on the HTML page.

00:09:51.462 --> 00:09:52.429
}STEP 2
READY THE PLAYER

00:09:52.561 --> 00:09:55.264
Once the player
is loaded and ready,

00:09:55.264 --> 00:09:59.858
the player will call the
function onYouTubePlayerReady.

00:09:59.858 --> 00:10:04.495
In this function you can use
getElementById

00:10:04.495 --> 00:10:07.297
to obtain a player reference

00:10:07.297 --> 00:10:09.957
and start using the API.

00:10:11.561 --> 00:10:14.627
STEP 3
CONTROL THE PLAYER

00:10:15.363 --> 00:10:18.858
You can make a simple call
to control the player,

00:10:18.858 --> 00:10:21.495
like play, for example.

00:10:25.957 --> 00:10:28.363
STEP 4
MONITOR STATE CHANGES

00:10:28.462 --> 00:10:32.330
Finally, you can subscribe
to the events and monitor

00:10:32.330 --> 00:10:34.726
player state changes.

00:10:34.726 --> 00:10:37.759
Add an EventListener
to onStateChange

00:10:37.759 --> 00:10:39.957
and include
a call back function.

00:10:44.726 --> 00:10:47.231
Before looking at real cases
where the APIs are applied,

00:10:47.231 --> 00:10:48.957
and that we saw in this lesson,

00:10:48.957 --> 00:10:53.033
let's look at a small comparison
between the JavaScript

00:10:53.033 --> 00:10:56.033
and the API iFrameAPIs,
that also has JavaScript,

00:10:56.033 --> 00:10:58.627
but that, in this case
is for the player

00:10:58.627 --> 00:11:00.198
embedded in an iFrame.

00:11:00.198 --> 00:11:02.528
Let's compare the format.

00:11:03.396 --> 00:11:05.429
We see that for the iFrame API

00:11:05.429 --> 00:11:07.957
the library downloads
asynchronously.

00:11:07.957 --> 00:11:10.198
And once it loads
it allows us to access

00:11:10.198 --> 00:11:12.033
the players.

00:11:12.033 --> 00:11:14.033
When we access them,
we can specify

00:11:14.033 --> 00:11:15.858
the parameters
to personalize them

00:11:15.858 --> 00:11:19.264
or add functions
to manage its events.

00:11:20.363 --> 00:11:24.165
On the right we see
that the old JavaScript API

00:11:24.165 --> 00:11:27.990
that, through SWF Object,
allows access to

00:11:27.990 --> 00:11:31.990
a Chromeless Player
and register EventListener

00:11:31.990 --> 00:11:34.198
to manage the events.

00:11:38.594 --> 00:11:40.231
I invite you, as homework,

00:11:40.231 --> 00:11:44.660
to consult this excellent
Google presentation I/O 2011

00:11:44.660 --> 00:11:47.660
to see more details
on this comparison.

00:11:48.330 --> 00:11:51.330
A LOOK AT REAL CASES

00:11:52.099 --> 00:11:54.561
Now let's see how the APIs
we saw in this lesson

00:11:54.561 --> 00:11:56.660
are used in real cases.

00:11:57.363 --> 00:11:59.990
AXE EXPERIENCE

00:11:59.990 --> 00:12:03.231
Let's look at Axe Experience.

00:12:03.231 --> 00:12:06.627
Let's look at the example
for a few moments.

00:12:06.627 --> 00:12:09.627
In this case,
the player is used

00:12:09.627 --> 00:12:13.561
in a larger Flash application.

00:12:13.561 --> 00:12:16.792
So we see a case
where its better to use

00:12:16.792 --> 00:12:19.462
the Flash API.

00:12:19.462 --> 00:12:23.627
We also see that, to achieve
a totally personalized

00:12:23.627 --> 00:12:25.363
user experience,

00:12:25.363 --> 00:12:27.396
they have developed
their own controls,

00:12:27.396 --> 00:12:30.363
and that the application
controls the player.

00:12:30.363 --> 00:12:32.627
Have you figured out
how they did it?

00:12:32.627 --> 00:12:34.099
I'm sure you did.

00:12:34.099 --> 00:12:36.495
They used
the Actionscript Flash API

00:12:36.495 --> 00:12:38.891
and the Chromeless Player.

00:12:42.660 --> 00:12:45.066
KNORR MスICO

00:12:45.066 --> 00:12:48.561
Let's look at Knorr M支ico.

00:12:48.561 --> 00:12:51.363
After seeing this example,
we would think

00:12:51.363 --> 00:12:54.033
that they are using
the Flash API.

00:12:54.033 --> 00:12:55.792
But if we look
at the coding source

00:12:55.792 --> 00:12:58.033
we see that it's an iFrame API.

00:12:58.033 --> 00:13:00.660
Let's look at part of the coding
source for the page.

00:13:05.132 --> 00:13:06.627
NISSAN MスICO

00:13:06.627 --> 00:13:10.099
Let's look at one more case;
Nissan M支ico.

00:13:10.099 --> 00:13:13.561
This is an excellent
user experience.

00:13:13.561 --> 00:13:17.330
After inspecting the code,
we see they use the iFrame API.

00:13:17.330 --> 00:13:20.297
Personalized through parameters

00:13:20.297 --> 00:13:22.561
where the controls are hidden,

00:13:22.561 --> 00:13:26.264
achieving an aspect similar to
the Flash Chromeless Player,

00:13:26.264 --> 00:13:28.561
and they control it
through JavaScript.

00:13:34.297 --> 00:13:37.132
I invite you to study
this official example.

00:13:38.660 --> 00:13:41.990
You will be able to create
examples like the ones we saw.

00:13:43.330 --> 00:13:44.957
I leave you with a challenge:

00:13:44.957 --> 00:13:47.957
Try updating from
the Data API version 2

00:13:47.957 --> 00:13:49.627
to the API version 3.

00:13:51.495 --> 00:13:53.660
I hope you enjoyed this lesson.

00:13:53.660 --> 00:13:55.330
We saw the basic ways

00:13:55.330 --> 00:13:58.528
of how to use
the iFrame Player,

00:13:58.528 --> 00:14:00.528
Flash and JavaScript APIs.

00:14:00.528 --> 00:14:03.759
I invite you to study these APIs
more in depth.

00:14:03.759 --> 00:14:06.462
You can experiment
with the official examples.

00:14:06.462 --> 00:14:10.033
We have seen how to use
these APIs in real examples.

00:14:10.957 --> 00:14:14.231
You can look for more cases,
and explore and analyze

00:14:14.231 --> 00:14:16.495
how they are implemented.

00:14:16.495 --> 00:14:18.528
See you the next lesson!

