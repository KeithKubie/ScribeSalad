WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Why does this work? We're going to do another proof of correctness.

00:00:03.000 --> 00:00:08.000
It turns out that the same strategy that we used for naive is going to work out really well here.

00:00:08.000 --> 00:00:14.000
In particular, what holds is that the product of a and b is always equal to the product of x and y plus z.

00:00:14.000 --> 00:00:18.000
And again, since x is going to be counting down and eventually reads 0,

00:00:18.000 --> 00:00:21.000
z is going to ultimately have to hold the product of a and b.

00:00:21.000 --> 00:00:25.000
Can we prove that this is the case? Again, we need to do 2 things.

00:00:25.000 --> 00:00:28.000
We need to say that it starts off with that being the case.

00:00:28.000 --> 00:00:31.000
That's the same exact argument that we had in the naive algorithm,

00:00:31.000 --> 00:00:36.000
because x starts out as a, y starts out as b, and z starts out as 0, so that holds.

00:00:36.000 --> 00:00:42.000
Now we need to show that if this condition holds at the beginning of the top of the "while" loop,

00:00:42.000 --> 00:00:46.000
then it's going to hold at the end with the new values of x, y, and z.

00:00:46.000 --> 00:00:49.000
Let's remind ourselves how x, y, and z changed in the "while" loop,

00:00:49.000 --> 00:00:52.000
so we can see whether the condition still holds.

00:00:52.000 --> 00:00:54.000
We're going to have to break this into 2 cases.

00:00:54.000 --> 00:00:58.000
First, if x is odd, and second, if x is even because 2 slightly different things happen.

00:00:58.000 --> 00:01:02.000
So in the case when x is odd, the first thing we do is add z and y together,

00:01:02.000 --> 00:01:05.000
make that a new value of z, then we do a bit shift on x,

00:01:05.000 --> 00:01:10.000
which in this case is equivalent to subtracting 1 to make it even and smaller than having it.

00:01:10.000 --> 00:01:12.000
And y, meanwhile, gets doubled.

00:01:12.000 --> 00:01:19.000
What can we say about x prime times y prime plus z prime, so that is on the bottom of the loop.

00:01:19.000 --> 00:01:27.000
We can substitute in these values--get x minus 1 over 2 times the new value of y just 2y,

00:01:27.000 --> 00:01:30.000
plus the new value of z, which is z plus y.

00:01:30.000 --> 00:01:36.000
We noticed that this 2 and that 2 cancel, and we get xy minus y plus z plus y.

00:01:36.000 --> 00:01:42.000
Again that +y and -y cancel, then we do indeed get xy minus z,

00:01:42.000 --> 00:01:46.000
which we had assumed holds in advance, so that's a times b.

00:01:46.000 --> 00:01:48.000
What about the case where x is even?

00:01:48.000 --> 00:01:52.000
So in some ways, this case is easier because the bit shift on x just halves it.

00:01:52.000 --> 00:01:57.000
Z doesn't change at all and y again is doubled. Let's look to see what happens in this case.

00:01:57.000 --> 00:02:01.000
What happens now is the value of z doesn't change at all,

00:02:01.000 --> 00:02:06.000
and in some sense, x and y just move the 2 around, so x get half, then y's get doubled.

00:02:06.000 --> 00:02:10.000
When we multiplied those 2 together, they cancel, and again we get xy plus z,

00:02:10.000 --> 00:02:13.000
which we had assumed, coming in to this, is equal to a times b.

00:02:13.000 --> 00:02:18.000
The new values of x, y, and z in either the case where x is odd or x is even,

00:02:18.000 --> 00:02:20.000
continue to satisfy this property.

00:02:20.000 --> 00:02:23.000
This is kind of strange--what is true in here is removing the factor 2

00:02:23.000 --> 00:02:26.000
back and forth between x and y, actually generally from x to y.

00:02:26.000 --> 00:02:30.000
When if it's odd, then we had to shift x a little bit more than that to make it balanced.

00:02:30.000 --> 09:59:59.000
We move some of the value into z. This is kind of lucky.

