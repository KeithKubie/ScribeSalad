WEBVTT
Kind: captions
Language: en

00:00:08.501 --> 00:00:09.834
Sauer: Hi.
I'm Fred Sauer.

00:00:09.834 --> 00:00:11.634
I'm a Developer Advocate
for Google.

00:00:11.634 --> 00:00:13.868
I'm here today
with Paul Hammant.

00:00:13.868 --> 00:00:15.801
Paul's a big
Open Source Advocate

00:00:15.801 --> 00:00:19.901
at, uh, Thoughtworks and
Dependency Injection pioneer.

00:00:19.901 --> 00:00:23.167
Uh, Thoughtworks is an Agile
preaching consultancy.

00:00:23.167 --> 00:00:25.701
And I'd like to ask Paul
some questions today.

00:00:25.701 --> 00:00:29.100
Uh, he's had a chance
to test-drive, uh,

00:00:29.100 --> 00:00:31.801
our recent, uh, launch
of--of App Engine

00:00:31.801 --> 00:00:34.801
and support for the--
the Java language.

00:00:34.801 --> 00:00:36.267
I wonder, Paul,
if you could, uh,

00:00:36.267 --> 00:00:38.601
share some of your initial
observations with us.

00:00:38.601 --> 00:00:40.734
Hammant: Yeah, so I'm--I'm
pretty pleased with App Engine.

00:00:40.734 --> 00:00:43.200
It's a very nice environment
to work with.

00:00:43.200 --> 00:00:45.434
And, uh, the feature set
that you've shipped with it

00:00:45.434 --> 00:00:48.267
is quite compelling too.

00:00:48.267 --> 00:00:52.467
Sauer: Uh, what are some of
the--the most important aspects

00:00:52.467 --> 00:00:56.567
of what you--what we've just
launched in--in your opinion?

00:00:56.567 --> 00:00:58.901
Hammant: Um, in terms
of the experiments

00:00:58.901 --> 00:01:00.701
that I've done, I've been
very pleased to find out

00:01:00.701 --> 00:01:04.100
that existing Web frameworks
for Java are working quite well

00:01:04.100 --> 00:01:06.834
and they're almost unchanged.

00:01:06.834 --> 00:01:12.667
Um, and--and there's integration
into Google Accounts.

00:01:12.667 --> 00:01:14.234
And that's taken away
a huge problem

00:01:14.234 --> 00:01:17.000
that's always part of any
Web application development

00:01:17.000 --> 00:01:21.067
in that you don't have to write
a login system.

00:01:21.067 --> 00:01:23.167
You don't have to write
a password recovery system.

00:01:23.167 --> 00:01:25.701
You don't even have to cater
for, um, hackers

00:01:25.701 --> 00:01:28.567
or phishing attacks because
the whole Google capture stuff

00:01:28.567 --> 00:01:30.434
is all done very well.

00:01:30.434 --> 00:01:32.501
Um, the other--
the main observation--

00:01:32.501 --> 00:01:35.300
the other main observation
that I've, um, seen

00:01:35.300 --> 00:01:38.033
with this stack is that
their persistence side

00:01:38.033 --> 00:01:39.868
is different to other
applications

00:01:39.868 --> 00:01:42.334
that Java developers
may have made in the past.

00:01:42.334 --> 00:01:44.734
Specifically, this is not
a relational model.

00:01:44.734 --> 00:01:47.200
It's gonna require
some thinking from the outside

00:01:47.200 --> 00:01:48.701
about how you're gonna
organize your data

00:01:48.701 --> 00:01:49.901
inside App Engine.

00:01:49.901 --> 00:01:51.334
Sauer: Sure.

00:01:51.334 --> 00:01:56.667
Uh, so App Engine, uh, is built
on top of a fairly scalable

00:01:56.667 --> 00:01:58.067
distributed datastore.

00:01:58.067 --> 00:02:00.400
And I imagine you probably
have some advice

00:02:00.400 --> 00:02:04.734
for developers building
very scalable applications

00:02:04.734 --> 00:02:06.901
perhaps for the--
for the first time.

00:02:06.901 --> 00:02:10.167
What are some recommendations
or tips you might give them?

00:02:10.167 --> 00:02:11.868
Hammant: Yeah, so the--
the obvious things

00:02:11.868 --> 00:02:14.934
that--to think about
are, um,

00:02:14.934 --> 00:02:18.200
the fact that you're being
billed for every CPU second

00:02:18.200 --> 00:02:22.400
that you're using and
you're going to try and reduce

00:02:22.400 --> 00:02:24.667
that footprint
as much as you can--

00:02:24.667 --> 00:02:27.601
shift as many resources
to static as you can.

00:02:27.601 --> 00:02:29.767
And then for the--
for any items,

00:02:29.767 --> 00:02:31.901
you're going to want to try
and see if you can leverage

00:02:31.901 --> 00:02:35.701
memcached for, um, you know,
just shortcutting

00:02:35.701 --> 00:02:37.434
the whole request cycle.

00:02:37.434 --> 00:02:39.234
Um, and then the other
big piece--

00:02:39.234 --> 00:02:42.734
and this is common
with LAMP stack people--

00:02:42.734 --> 00:02:45.033
is you're going to want
to use state list

00:02:45.033 --> 00:02:46.834
if you can as a--
as a metaphor

00:02:46.834 --> 00:02:48.868
for the application
rather than leveraging

00:02:48.868 --> 00:02:50.868
the session
for storage of stuff.

00:02:50.868 --> 00:02:53.234
Sauer: Sure. State list
gives you scalability.

00:02:53.234 --> 00:02:54.968
Hammant: Yes.
Very much so.

00:02:54.968 --> 00:02:57.567
Sauer: Um...
Hammant: Well, actually, no.

00:02:57.567 --> 00:02:59.300
Google gives you scalability
in this case.

00:02:59.300 --> 00:03:02.267
But state list is gonna
give you cheap scalability.

00:03:02.267 --> 00:03:03.667
Sauer: Okay.

00:03:03.667 --> 00:03:08.901
Uh, so one of the--
the big features of this, uh,

00:03:08.901 --> 00:03:10.801
new version of App Engine
is the support

00:03:10.801 --> 00:03:12.367
for the Java Runtime.

00:03:12.367 --> 00:03:15.901
And I wonder what you think
the--the biggest impact is

00:03:15.901 --> 00:03:20.567
of the Java language support
for, uh, some of your customers.

00:03:20.567 --> 00:03:22.033
Some of Thoughtworks'
customers.

00:03:22.033 --> 00:03:25.000
Hammant: Yeah, um, I thi--
I think there's a huge

00:03:25.000 --> 00:03:26.801
cost reduction piece here.

00:03:26.801 --> 00:03:28.901
Um, currently,
uh, you know,

00:03:28.901 --> 00:03:31.100
it's common for many
Fortune 500 enterprises

00:03:31.100 --> 00:03:33.267
to want to build out
their own infrastructure,

00:03:33.267 --> 00:03:35.934
not to trust things
out in the clouds.

00:03:35.934 --> 00:03:37.567
So they're going to build
that stack.

00:03:37.567 --> 00:03:40.300
And they're going to have
support and infrastructure

00:03:40.300 --> 00:03:43.667
and electricity and personnel
all assigned to this thing.

00:03:43.667 --> 00:03:45.934
And whole work flows around
releases

00:03:45.934 --> 00:03:47.267
that are problematic
for them.

00:03:47.267 --> 00:03:48.267
Sauer: Sure.

00:03:48.267 --> 00:03:49.667
Hammant:
So one of the things

00:03:49.667 --> 00:03:51.434
we think or one of the things
I think could happen here

00:03:51.434 --> 00:03:53.367
is we might see 90%
of all the costs

00:03:53.367 --> 00:03:56.200
for deployment and
infrastructure just disappear.

00:03:56.200 --> 00:03:58.367
And that actually,
deployment to production

00:03:58.367 --> 00:04:00.367
will be a turnkey event.

00:04:00.367 --> 00:04:05.501
Um, quite easy to do
and very, um,

00:04:05.501 --> 00:04:07.567
pleasing for the, uh,
customer in question

00:04:07.567 --> 00:04:09.100
to experiment with.

00:04:09.100 --> 00:04:12.300
So we might see
some of those customers

00:04:12.300 --> 00:04:14.601
just commission and experiment
with App Engine

00:04:14.601 --> 00:04:17.000
before committing larger sets
of their infrastructure

00:04:17.000 --> 00:04:20.467
towards it to see what the
experience was like for them.

00:04:20.467 --> 00:04:21.801
Sauer: That makes sense.

00:04:21.801 --> 00:04:24.934
What, um, sort of applications
do you think would be

00:04:24.934 --> 00:04:28.934
the--the best initial candidates
for--for such a--an attempt?

00:04:28.934 --> 00:04:31.133
Hammant: Um, it's gonna be
Web applications.

00:04:31.133 --> 00:04:33.734
And Web applications
that are data-centric.

00:04:33.734 --> 00:04:35.801
So if you've got a large
data set

00:04:35.801 --> 00:04:36.968
that's being read a lot,

00:04:36.968 --> 00:04:39.133
then it's suitable
for the App Engine.

00:04:39.133 --> 00:04:41.334
But similarly, if you have
an application

00:04:41.334 --> 00:04:44.434
that's going to be receiving
data from some other source,

00:04:44.434 --> 00:04:47.734
um, App Engine will scale
quite well to receive that data

00:04:47.734 --> 00:04:50.400
and then to store it
in BigTable.

00:04:50.400 --> 00:04:53.200
But things without doing
the processes perhaps.

00:04:53.200 --> 00:04:54.868
Sauer: Until, uh,
we launch support.

00:04:54.868 --> 00:04:57.367
Hammant: Yes.
Sauer: Or, uh, schedule tasks.

00:04:57.367 --> 00:05:00.200
Which is--which is coming--
forthcoming.

00:05:00.200 --> 00:05:02.934
Uh, and maybe, finally,
what do you see

00:05:02.934 --> 00:05:04.667
for the--the future
of cloud computing

00:05:04.667 --> 00:05:06.501
or what would you like to see
in--in the future

00:05:06.501 --> 00:05:08.267
of, uh, App Engine?

00:05:08.267 --> 00:05:11.767
Hammant: Okay, so, um,
my wish list would include

00:05:11.767 --> 00:05:13.067
mostly additional services,

00:05:13.067 --> 00:05:14.801
which is, I think,
the big value add that you guys

00:05:14.801 --> 00:05:16.133
have done here.

00:05:16.133 --> 00:05:18.601
So stuff around geolocation.

00:05:18.601 --> 00:05:20.767
An API that I as a developer
could call

00:05:20.767 --> 00:05:22.767
to say
where is my end user?

00:05:22.767 --> 00:05:24.601
Um, and how I use that
is my business.

00:05:24.601 --> 00:05:26.968
But you might attach
terms and conditions to it

00:05:26.968 --> 00:05:31.133
to prevent the loss of the
entire, um, Google IP database

00:05:31.133 --> 00:05:33.801
to, um, you know, off-site.

00:05:33.801 --> 00:05:36.834
Um, I might also think
that this stack

00:05:36.834 --> 00:05:39.067
could be well suited
for the streaming of content

00:05:39.067 --> 00:05:40.400
in the future.

00:05:40.400 --> 00:05:42.267
I have no knowledge
of what you're actually

00:05:42.267 --> 00:05:44.100
going to be putting in it
later.

00:05:44.100 --> 00:05:49.167
But to me, um, I see,
uh, CMSs and Wiki systems

00:05:49.167 --> 00:05:51.968
being based on this, um,
that might be richer media

00:05:51.968 --> 00:05:53.234
and streaming
of their content

00:05:53.234 --> 00:05:54.901
directly from the actual
application

00:05:54.901 --> 00:05:58.701
rather than handing off a URL
to something like YouTube.

00:05:58.701 --> 00:06:01.567
To that end, I think, um,
you could do well

00:06:01.567 --> 00:06:05.834
to support DAV as like
a lower level service on--

00:06:05.834 --> 00:06:07.968
you know, if Web requests
come in, and they're ordinarily

00:06:07.968 --> 00:06:10.033
served by get or by post,

00:06:10.033 --> 00:06:12.200
I think it's quite possible here
that you might be supporting

00:06:12.200 --> 00:06:15.000
put and delete
in highly sophisticated ways

00:06:15.000 --> 00:06:19.834
that would directly pipe data
to, um, it's place in BigTable.

00:06:19.834 --> 00:06:21.501
Um, and to support that,

00:06:21.501 --> 00:06:24.033
I kinda think that maybe
some of the magic

00:06:24.033 --> 00:06:26.767
that Google Code has done
to sit Subversion

00:06:26.767 --> 00:06:30.167
on top of BigTable
could be reused by yourselves

00:06:30.167 --> 00:06:33.901
to massively enrich
the experience of, um,

00:06:33.901 --> 00:06:37.234
users of the App Engine
experience.

00:06:37.234 --> 00:06:39.901
Um, and then some other
obvious pieces as well

00:06:39.901 --> 00:06:42.033
like integration
into Google Checkout

00:06:42.033 --> 00:06:44.267
would provide a payment system
for people--

00:06:44.267 --> 00:06:47.501
again built quite cheaply
and scalable,

00:06:47.501 --> 00:06:49.834
you know, there's no fixed
fees in here--

00:06:49.834 --> 00:06:53.334
um, in such a way that people
wanting to mount,

00:06:53.334 --> 00:06:55.501
um, a modest, um,
shopping portal

00:06:55.501 --> 00:06:57.968
could choose now
the Google application--

00:06:57.968 --> 00:07:01.567
the, um, App Engine stack
and feel fairly pleased

00:07:01.567 --> 00:07:04.367
with that choice rather than
traditionally trying

00:07:04.367 --> 00:07:06.234
to build out
some PHP solution

00:07:06.234 --> 00:07:08.234
and then leveraging
some third party

00:07:08.234 --> 00:07:10.000
to handle the payments
and things like that.

00:07:10.000 --> 00:07:11.667
It's like a one--
one-stop shop now

00:07:11.667 --> 00:07:13.167
for that entire experience.

00:07:13.167 --> 00:07:15.801
Sauer: Okay.
Those are great ideas.

00:07:15.801 --> 00:07:18.234
Well, thank you
for joining us today.

00:07:18.234 --> 00:07:19.400
Hammant: Thank you
for having me.

00:07:19.400 --> 00:07:20.400
Sauer: It was a pleasure.

