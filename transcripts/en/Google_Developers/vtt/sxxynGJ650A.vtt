WEBVTT
Kind: captions
Language: en

00:14:28.225 --> 00:14:30.225
-

00:16:09.498 --> 00:16:19.330
   11:30     9:30 a.m. CST

00:16:21.517 --> 00:16:29.448
   May 18, 2017 l  
   Google I/

00:16:33.167 --> 00:16:35.167
O

00:19:15.552 --> 00:19:17.552
TensorFlow Frontiers

00:19:29.312 --> 00:19:31.312
   Stage 3

00:19:53.297 --> 00:19:55.689
 TensorFlow  

00:21:32.849 --> 00:21:34.849
 iOS  

00:21:50.891 --> 00:21:54.397
 Sierra          

00:21:58.065 --> 00:22:01.025
  3

00:28:50.010 --> 00:28:52.010
-

00:29:16.285 --> 00:29:21.540
   &gt;&gt; Hi, everybody, I'm Wolff 
Dobson and I apparently can't 

00:29:22.617 --> 00:29:25.593
walk upstairs.  I'd like to talk
 to you today about the 

00:29:26.117 --> 00:29:29.378
frontiers of TensorFlow.  It has
 three parts.  The latest 

00:29:29.379 --> 00:29:32.202
developments in TensorFlow.  
We're going to talk about Cloud 

00:29:32.422 --> 00:29:36.533
TPUs and TPU pods, and finally 
Zak is going to tell us about 

00:29:36.534 --> 00:29:44.360
the TensorFlow Research Cloud
   Okay.  So TensorFlow, it's 

00:29:44.361 --> 00:29:47.382
mentioner           machine 
learning for everyone.  We like 

00:29:47.383 --> 00:29:50.694
to say that it is fast, it is 
flexible and production ready.  

00:29:50.695 --> 00:29:52.987
When we say production ready, 
what we mean is the code that 

00:29:53.221 --> 00:29:56.729
you mess around with on your 
laptop, that you try out on your

00:29:56.967 --> 00:30:00.384
 local machine, it's the same 
code that you push out to run on

00:30:00.617 --> 00:30:04.451
 giant clusters.  It's all the 
same thing all the way down, no 

00:30:04.452 --> 00:30:06.488
rewrite ing in a new language 
after you've figure ed it out

00:30:07.808 --> 00:30:14.338
   So, TensorFlow is this 
language that allows you to 

00:30:14.339 --> 00:30:18.696
write computational graphs and 
use these computational graphs 

00:30:18.697 --> 00:30:22.281
to do, usually, machine learning
 and often deep learningSo here 

00:30:22.472 --> 00:30:25.946
is an example of, sort of, a 
basic deep learn      learning 

00:30:25.947 --> 00:30:30.348
graph.  Here we have a picture 
of a cat or a dog that we feed 

00:30:30.349 --> 00:30:33.072
in as pixels into the 
convolutional layer at the 

00:30:33.073 --> 00:30:35.723
bottom, and then it goes all the
 way down to give us a 

00:30:35.870 --> 00:30:39.156
prediction of some kind, either 
it's a cat or it's a dog

00:30:39.645 --> 00:30:41.930
   Convolutional layers are one 
kind of thing.  This is another 

00:30:41.931 --> 00:30:46.467
kind of thing.  This is a 
collection of fully-       

00:30:46.468 --> 00:30:49.555
fully-connected layers, where we
 have each node on each layer 

00:30:49.674 --> 00:30:52.118
connects to every other node on 
the next layer

00:30:52.330 --> 00:30:55.936
   The arrows between nodes are 
all weights.  Those weight      

00:30:55.937 --> 00:30:58.630
 weights are -- we like to call 
them parameters and they get 

00:30:58.631 --> 00:31:05.244
change ed over time.
   This is a very deep network 

00:31:05.245 --> 00:31:11.287
where this is inception V3, and 
inception V3 has about 17 layers

00:31:11.570 --> 00:31:14.086
 depending how you count, and it
 has about 25 million parameters

00:31:14.792 --> 00:31:18.860
, so it can take a while to 
train.

00:31:19.095 --> 00:31:23.571
   And so what do you do when 
you're doing TensorFlow, you 

00:31:23.572 --> 00:31:27.881
probably have Python, and you're
 going to knock out some Python 

00:31:27.949 --> 00:31:29.998
there, and it's going to 
generate this graph for you    

00:31:29.999 --> 00:31:32.356
you.  That graph, you're going 
to execute later.  You're going 

00:31:32.357 --> 00:31:35.085
to execute it in two ways.ne, 
you're going to be doing 

00:31:35.086 --> 00:31:37.231
training, which means you're 
going to be showing examples and

00:31:37.459 --> 00:31:41.221
 modifying based on the results 
you get, modifying those 

00:31:41.518 --> 00:31:45.256
parameters, and then when you --
 then you can run it again later

00:31:45.575 --> 00:31:49.221
 on new data.  We call that 
Inference, and we're hope ing to

00:31:49.222 --> 00:31:53.199
 get some kind of statistical 
insight ought of          out of

00:31:53.447 --> 00:31:55.158
 all the data we have on this 
new data

00:31:55.159 --> 00:31:58.868
   TensorFlow runs on all kinds 
of platforms, CPU, GPU, 

00:31:58.869 --> 00:32:02.632
obviously, we're going to talk 
about TPUs later.  They're 

00:32:02.633 --> 00:32:05.033
pretty neat
   Also on mobile, iOS and 

00:32:05.034 --> 00:32:13.322
Android, and actually also on 
ras berry           r  raspberry

00:32:13.393 --> 00:32:16.662
 pie, we can support all of 
TensorFlow on that.  We support 

00:32:16.851 --> 00:32:23.109
all languages, Google supports 
Python, C +  , Java and Go.  

00:32:23.110 --> 00:32:25.273
These others are community 
projects, we're excite ed about 

00:32:25.274 --> 00:32:29.907
the community picking these to 
use the new C bindings to create

00:32:29.908 --> 00:32:32.805
 new language wrappers
   Floa come         TensorFlow 

00:32:32.945 --> 00:32:35.708
comes with a lot of different 
tools.  This tool is tensorboard

00:32:35.849 --> 00:32:40.118
, it's sort of like an X ray for
 your training process.  It 

00:32:40.119 --> 00:32:42.115
allows you to look inside your 
training and see what's actually

00:32:42.116 --> 00:32:45.201
 going on inside your graph     
 graph.  Thus you inspect your 

00:32:45.202 --> 00:32:48.476
graph, and in this case we're 
showing off and embedding, 

00:32:48.477 --> 00:32:50.843
that's M nest, for those of you 
that recognize it, it's handw

00:32:51.064 --> 00:32:53.777
rite ing data, and you can see 
we're grouping all the 5s as 

00:32:54.026 --> 00:32:57.825
gray and all the 9s adds redt's 
really                          

00:32:57.826 --> 00:33:00.694
as red really need to be able to
 look and see what's actually 

00:33:00.799 --> 00:33:05.710
going on.  And, once you've got 
this all trained up and you want

00:33:05.711 --> 00:33:09.041
 to push it into production, we 
have TensorFlow Serve ing.  

00:33:09.042 --> 00:33:11.998
That's a second Open Source 
project, also developed by 

00:33:12.140 --> 00:33:15.705
Google, that let's       lets y
ou kind of manage the process of

00:33:15.883 --> 00:33:18.266
 serve ing a model in 
production, and it lets you do 

00:33:18.267 --> 00:33:21.921
things like serve multiple model
s in production, use it with 

00:33:22.052 --> 00:33:27.396
some kind of container engine, 
and allows you to manage the 

00:33:27.617 --> 00:33:29.607
process of setting up one of 
these big services         

00:33:29.608 --> 00:33:32.759
serviceses to allow you to do 
insight for your customers is a 

00:33:32.865 --> 00:33:37.686
great talk about this.  I 
encourage you, Noh    Noha Fidel

00:33:37.947 --> 00:33:40.329
 is going to be speaking about 
it on Friday.

00:33:40.330 --> 00:33:44.195
   Inside Google, TensorFlow is 
a   very popular.  This is a 

00:33:44.196 --> 00:33:46.701
graph of directors inside Google
 with model description files in

00:33:46.785 --> 00:33:50.080
 it, which is to say, this is 
like a little peetion of     

00:33:50.157 --> 00:33:53.641
       piece of machine learning
 we have inside the Google 

00:33:53.642 --> 00:33:55.862
repository.
   You can see TensorFlow launch

00:33:55.988 --> 00:34:01.527
ed in Q3 2014 internally.  We 
actually had another system 

00:34:01.607 --> 00:34:06.156
before this, it was called disk 
belief.  It was great but not 

00:34:06.157 --> 00:34:09.414
flexible enough for the kind of 
projects we wanted to do, and 

00:34:09.415 --> 00:34:12.148
you can see after we launched 
TensorFlow internally, there is 

00:34:12.149 --> 00:34:16.115
a kind of Explosion of trying to
 apply ML to every kind of 

00:34:16.116 --> 00:34:23.105
problem at Google, search, gm
ail, translate, Maps, all kinds 

00:34:23.106 --> 00:34:27.672
of stuff
   And in November of 2015, we 

00:34:27.673 --> 00:34:32.416
launched TensorFlow in public.  
There we had the -- it quickly 

00:34:32.417 --> 00:34:37.456
became one of the most popular 
-- actually, the most popular 

00:34:37.533 --> 00:34:40.336
machine learning GitHub project,
 and when we say most popular, 

00:34:40.337 --> 00:34:43.699
we mean really the most popular.
  (Laughing).  This is a graph 

00:34:43.865 --> 00:34:52.671
of all of our stars over time.  
We're really ee happy          

00:34:52.672 --> 00:34:54.824
happy about community, and speak
ing of community, since November

00:34:55.873 --> 00:35:00.752
 2015, we've had 17,000 commits 
from public, many of those from 

00:35:00.753 --> 00:35:04.333
external contribute ors
   We have almost 500 non-google

00:35:04.334 --> 00:35:08.480
 contribute ors, and for 
TensorFlow Version 1.0, which we

00:35:08.481 --> 00:35:12.856
 cuts      cut if    in 
February, and we've actually had

00:35:12.857 --> 00:35:15.734
 some very significant external 
commits.  One that comes to mind

00:35:16.390 --> 00:35:20.103
 is the Windows GPU Support was 
actually external and it was 

00:35:20.104 --> 00:35:22.944
committed in and we absolutely 
loved it

00:35:23.198 --> 00:35:26.083
   And if you hunt around on 
GitHub, you'll find thousands of

00:35:26.775 --> 00:35:30.120
 other repository ies that have 
TensorFlow in the title, and 

00:35:30.356 --> 00:35:33.934
along with that comes blogs and 
books and all kinds of other 

00:35:34.274 --> 00:35:36.274
materials that, again, the 
community is putting together 

00:35:36.574 --> 00:35:39.118
and we're so happy that they 
are.

00:35:39.358 --> 00:35:44.629
   We also take supporting 
TensorFlow seriously.  One of 

00:35:44.630 --> 00:35:49.102
the great things about working 
on the the TensorFlow Team is 

00:35:49.103 --> 00:35:54.030
our engineering Team actually 
takes rotations through stack  

00:35:54.690 --> 00:36:01.558
      Stack Overflow and also 
issues and PRs so we had over 5,

00:36:01.674 --> 00:36:05.996
000  Stack Overflow questions 
answered and about 5,000 GitHub 

00:36:06.100 --> 00:36:11.024
issues filed and triage ed in 
some useful way, and we have a 

00:36:11.171 --> 00:36:14.897
lot of activity.  We're getting 
almost 160 new issues a week.

00:36:14.993 --> 00:36:18.686
   So where are we today?  You 
know, last night, or actually 

00:36:18.890 --> 00:36:22.866
yesterday afternoon, we branched
 TensorFlow 1.2.  There is a lot

00:36:22.867 --> 00:36:28.593
 of new stuff in TensorFlow 1.2 
around supporting TPUs.  Brennan

00:36:28.747 --> 00:36:33.579
 is going to talk about that, 
but something that's come into 

00:36:33.820 --> 00:36:38.358
TensorFlow recently          
recently is XLA, which is 

00:36:38.647 --> 00:36:41.723
TensorFlow's compile er for 
accelerate ed linear algebra, XL

00:36:41.904 --> 00:36:47.897
A, and the basic idea is 
TensorFlow graphs go in   in, 

00:36:47.898 --> 00:36:51.663
and optimize ed assembly comes 
out.  Machine code that will 

00:36:51.664 --> 00:36:53.949
actually run, it's not like an 
optimize ed version of the graph

00:36:54.143 --> 00:36:56.971
.  It is like it is an optimize 
ed version of the graph, but 

00:36:56.972 --> 00:36:58.389
it's actually running in machine
 code

00:36:58.390 --> 00:37:01.544
   Super important to support 
custom hardware, and again we'll

00:37:01.750 --> 00:37:05.280
 talk more about this with the 
TPU section.

00:37:05.528 --> 00:37:07.848
   TensorFlow is a distribute ed
 execution engine that runs on 

00:37:08.107 --> 00:37:14.098
top of all of these other kernel
s for iOS, Android, GPU, CPU, 

00:37:14.218 --> 00:37:17.252
all of that kind of stuff.  On 
top of that, we have the Python 

00:37:17.253 --> 00:37:21.365
front end, which is how you 
program it.  We have a C++ front

00:37:21.472 --> 00:37:23.770
 end as well and all these other
 languages

00:37:23.771 --> 00:37:28.234
   Recently in TensorFlow we've 
added a layers API.   Layers API

00:37:28.328 --> 00:37:31.210
 gives you sort of big building 
blocks that are the right shape 

00:37:31.211 --> 00:37:34.340
for you to do basic machine 
learning tasks in the kind of 

00:37:34.341 --> 00:37:37.526
ways we've done, convolutional 
layers, fully connected layers, 

00:37:37.735 --> 00:37:43.376
all that kind of thing
   And, on top of that, we have 

00:37:43.377 --> 00:37:51.718
both Karas and Estimate ors.  Ke
ras didn't original at Google 

00:37:51.954 --> 00:37:56.170
but we liked it so much, it's a 
high-level API that gives you 

00:37:56.313 --> 00:38:01.412
even sort of easy ier powerful 
ways to fit all of these 

00:38:01.413 --> 00:38:04.919
different, all of your graphs 
together, and then it's actually

00:38:05.264 --> 00:38:08.659
 built on top of our  Layers API
 as well, and then we also have 

00:38:08.813 --> 00:38:11.923
Estimate ors, and  Estimate ors 
are a way to package up and 

00:38:11.924 --> 00:38:16.233
abstract a way, sort of the 
concepts of machine learning  

00:38:16.351 --> 00:38:21.444
        learning.  It has Fit 
and ee evaluate              

00:38:21.445 --> 00:38:24.138
Evaluate and all that stuff.  
Again, Estimate is really 

00:38:24.139 --> 00:38:28.458
important for parallellization
   And with Statementers,      

00:38:28.589 --> 00:38:35.446
         Estimate ors, if you 
want to do a linear regression 

00:38:35.621 --> 00:38:37.979
or classify ier or fully connect
ed layers, whatever ttion you 

00:38:38.059 --> 00:38:40.608
want                it is you 
want, we might be able to give 

00:38:40.872 --> 00:38:43.932
you a canned estimate or that 
allows you to do no graph 

00:38:44.113 --> 00:38:46.960
construction and just drop your 
data and go.

00:38:48.722 --> 00:38:52.946
   The effect of all of these 
high-level APIs, like Keras and 

00:38:52.947 --> 00:38:54.947
canned estimate ors, one of the 
things you're going to see is 

00:38:55.181 --> 00:38:58.901
code gets smaller.  But beyond 
that, like I said, a big thing 

00:38:58.902 --> 00:39:01.728
about Estimate ors, they help 
you parallelize your computation

00:39:01.885 --> 00:39:06.792
, and we're going to talk about 
that more because TPUs are super

00:39:06.793 --> 00:39:10.790
 parallel.
   Speaking of performance, 

00:39:10.791 --> 00:39:13.813
let's talk about performance.  
About a week and a half ago, we 

00:39:14.069 --> 00:39:16.069
raised a bunch of benchmark 
         benchmarks.  They're 

00:39:17.242 --> 00:39:20.181
actually on TensorFlow.org, 
there is a lipg down there.  

00:39:20.302 --> 00:39:22.815
                link down there.
  This is one of the graphs on 

00:39:22.816 --> 00:39:29.889
that page.  A video DGX1, 
synthetic data 1, 2, 4, or 8GPU,

00:39:30.006 --> 00:39:32.417
 and there is a lot of throughp
ut there, a whole bunch of image

00:39:32.845 --> 00:39:36.007
s per second.s per second is 
super important.  Another thing 

00:39:36.276 --> 00:39:39.198
that's really important in 
machine learning is that you get

00:39:39.199 --> 00:39:43.789
 good scaleup.  What that means 
is if I add another GPU, do I 

00:39:44.021 --> 00:39:48.260
get another G.  Approximate  
            PU's worth of 

00:39:48.644 --> 00:39:50.803
performance out of that?
   So in this graph, if you go 

00:39:50.912 --> 00:39:54.051
from 4 to 8GPUs, you actually 
see double the performance.  

00:39:54.052 --> 00:39:56.210
It's a little hard to read on 
this graph so we made it a 

00:39:56.454 --> 00:40:00.434
little easy ier, and an ideal 
scale ing line on this graph, 

00:40:00.435 --> 00:40:04.998
and this is GPUs on one axis and
 speed up on the other, and you 

00:40:05.215 --> 00:40:10.709
want with one GPU, you have 1X 
speed up and 8GPUs, you have 8X 

00:40:10.787 --> 00:40:12.787
speed up and you want a straight
 line all the way down there

00:40:12.990 --> 00:40:16.813
   On your test data, which are 
common models in machine 

00:40:16.966 --> 00:40:23.652
learning, inspections, .  Are es
net            , Resnet50.  

00:40:23.653 --> 00:40:27.657
We're getting pretty close.  
Next is synthetic data, you're 

00:40:27.658 --> 00:40:31.964
putting         put holding it 
on constant, putting it on 

00:40:31.965 --> 00:40:36.424
cinder blocks and reving the 
engine as fast as you can.

00:40:36.425 --> 00:40:38.901
   Add Google we think it's 
important to try with real data 

00:40:38.984 --> 00:40:41.319
as well, on the right we have 
the same test with real data, 

00:40:41.320 --> 00:40:43.950
and you can see it's not quite 
as ideal.  It's never going to 

00:40:43.951 --> 00:40:46.543
be ideal because there is going 
to be overhead for doing the 

00:40:47.104 --> 00:40:48.897
parallel competition            
 computation, but we're getting 

00:40:48.898 --> 00:40:51.893
pretty close
   And if you want to scale up 

00:40:52.452 --> 00:40:55.298
to lots of GPU, we have bunch  
     bunchmarks for that as 

00:40:55.504 --> 00:41:01.869
well.  This goes up to 64GPUs.  
This time on K80 in the Cloud.  

00:41:01.870 --> 00:41:05.946
Again, you're looking for that, 
up, from 32 to 64, are you g

00:41:06.249 --> 00:41:08.398
etting, you know, double the 
throughput

00:41:09.062 --> 00:41:11.627
   But don't take my word for it
.  Try it yourself.  Not only 

00:41:11.873 --> 00:41:14.407
did we release the page that has
 all of these bench      

00:41:14.408 --> 00:41:17.445
benchmarks and graphs on it, but
 we also release ed the code so 

00:41:17.446 --> 00:41:20.771
you can dowrchload            
download it and run it yourself 

00:41:20.772 --> 00:41:24.571
on your own set    setup.  We 
have Google Compute Engine, 

00:41:24.970 --> 00:41:28.655
Amazon EC2, but please try it on
 your own setup and tell us how 

00:41:29.501 --> 00:41:32.287
it goes.
   Also, that code is tuned for 

00:41:32.385 --> 00:41:35.088
speed, so it's a good place to 
look that if you're having, you 

00:41:35.089 --> 00:41:38.962
know, issues with scaleup, you 
can take a look at our stuff and

00:41:39.282 --> 00:41:43.147
 see how we did it and see if 
that can help you.

00:41:43.148 --> 00:41:51.407
   But, 64GPUs is a lot, but 
there is more than 64 GPUs, and 

00:41:51.710 --> 00:41:56.667
with very large compute -- with 
very large models, you're going 

00:41:56.668 --> 00:42:03.733
to need a lot more computation t
o train them, and that kind of 

00:42:03.734 --> 00:42:09.061
computation is more powerful 
chips, faster communication  

00:42:09.199 --> 00:42:14.174
             communication among
 the accelerate ors, faster 

00:42:14.175 --> 00:42:17.628
memory and optimize ed software 
stacko to tell you about that, 

00:42:17.757 --> 00:42:20.643
to tell you about TPU, which are
 all of those things, I'm going 

00:42:20.644 --> 00:42:26.201
to hand it over to ZakThanks, 
Wolff.  I'm super excite ed a

00:42:26.385 --> 00:42:29.182
bout TPUs and I'd like to share 
the story of their 

00:42:29.270 --> 00:42:30.743
develop        development with 
you today.

00:42:30.744 --> 00:42:35.101
   Some of you may remember this
 image here.  This is an image 

00:42:35.245 --> 00:42:42.060
of Google's first generation 
TPU, which was reradio veel at 

00:42:42.271 --> 00:42:47.235
Google yoi last year and they 
considered building custom as 

00:42:47.236 --> 00:42:51.931
soon as 2006 but it was more 
urgent in 2013 when one of the 

00:42:51.932 --> 00:42:55.889
star engineers if all Android 
users spoke to their phones for 

00:42:55.890 --> 00:42:58.527
three minutes a day that could 
force Google to double the 

00:42:58.528 --> 00:43:01.739
number of data centers, so that 
drove this crash project to 

00:43:01.974 --> 00:43:05.427
develop our first TPU, which in 
just 15 months of building and 

00:43:05.641 --> 00:43:09.552
deploying these in the data 
centers, brought us to some 

00:43:09.553 --> 00:43:14.893
pretty significant performance 
gains across search, ranking, 

00:43:14.894 --> 00:43:19.391
Google Photos, Street View, 
Google Translate, and a variety 

00:43:19.765 --> 00:43:21.684
of other large machine learning 
applications.

00:43:21.685 --> 00:43:24.891
   In fact, compared to 
contemporary CPUs and GPUs, this

00:43:25.138 --> 00:43:29.141
 first generation TPU was 15 to 
30X faster on these internal 

00:43:29.584 --> 00:43:32.743
workloads     loads while being 
30 to 80X more power efficient.

00:43:33.040 --> 00:43:36.159
   But there was an important 
limitation, namely that this 

00:43:36.927 --> 00:43:38.835
first generation TPU was 
designed for inference and not 

00:43:38.836 --> 00:43:43.061
training.  As Wolff mentioned 
early ier, training is this 

00:43:43.208 --> 00:43:45.248
enormously complicate ed process
 of setting all of these weights

00:43:45.395 --> 00:43:48.427
 in these giant machine learning
 models, and then inference is 

00:43:48.887 --> 00:43:51.398
the process of running the ed mo
 else, and so              

00:43:52.263 --> 00:43:55.742
        the models, and while 
the first generation was 

00:43:55.817 --> 00:43:59.842
excellent for running models 
that were already trained, 

00:43:59.960 --> 00:44:04.458
Google still had to use huge 
clusters to train the models 7 

00:44:05.123 --> 00:44:07.717
that       .
   That inspired the second 

00:44:07.718 --> 00:44:12.441
generation, which is what was 
announce ed yesterday.  This 

00:44:12.442 --> 00:44:16.761
device delivers up to 180ter  
     180teraflops of floating-p

00:44:16.933 --> 00:44:22.068
oint performance and 64 gigabyte
s of ultra-high bandwidth 

00:44:22.383 --> 00:44:25.779
memory.  The most important 
thing is that it's designed to 

00:44:25.780 --> 00:44:27.894
support most training and 
inference on one platform, and 

00:44:28.275 --> 00:44:30.733
that turns out to be really 
convenient because it allows you

00:44:30.734 --> 00:44:35.046
 to develop your model and then 
run it in exactly the same way. 

00:44:35.246 --> 00:44:40.655
 You don't have this barrier of 
friction of having to quantize 

00:44:40.656 --> 00:44:43.742
the weights or figure out how to
 deploy it it on a separate 

00:44:44.200 --> 00:44:46.436
platform.
   But for some of Google's 

00:44:46.706 --> 00:44:51.209
large machine learning problems,
 even 180teraflops isn't enough.

00:44:51.314 --> 00:44:53.572
  So from the beginning the 
second generation TPUs were 

00:44:54.022 --> 00:44:57.026
designed to be connected 
together with an ultra-fast 

00:44:57.027 --> 00:45:03.121
custom network.e call these 
collections of TPU, pods, and 

00:45:03.122 --> 00:45:07.778
the TPU pods that you see here 
contain 64 of these new second 

00:45:07.779 --> 00:45:12.781
generation TPUs.  If you add all
 of that up, that gives you up 

00:45:13.045 --> 00:45:18.063
to 11.5petaflops of machine 
learning acceleration that you 

00:45:18.419 --> 00:45:20.579
can apply to a single machine 
learning training problem       

00:45:20.580 --> 00:45:22.782
 problem, or you can split up to
 support many different training

00:45:22.783 --> 00:45:27.563
 problems in parallel.
   This whole system has 4 

00:45:27.893 --> 00:45:31.148
terabytes of term and the TPU   
 TPUs are connected in a droidal

00:45:31.149 --> 00:45:34.304
 mesh network that fas I will 
state the ultra-fast and dense 

00:45:34.508 --> 00:45:36.023
communication that you need 
especially to solve these 

00:45:36.024 --> 00:45:41.857
machine learning training 
problems.e're already seeing 

00:45:41.858 --> 00:45:44.262
interesting results on some of 
the important internal workloads

00:45:44.397 --> 00:45:49.376
 that matter to us.  For example
, on one of our new large-scale 

00:45:49.377 --> 00:45:54.440
nerl      neural machine 
translation models it used to 

00:45:54.441 --> 00:45:59.274
take 24 hours to train the model
 on the best commercialaly 

00:45:59.275 --> 00:46:04.115
available.  Now in 6 hours we 
can train to the same accuracy 

00:46:04.116 --> 00:46:09.469
on 1/8 of a TPU pod. new devices
, these second generation TPUs, 

00:46:09.470 --> 00:46:13.213
we're thrilled to announce are 
coming to Google Cloud as Cloud 

00:46:13.214 --> 00:46:18.213
tums.       TPUs.  Our goal is 
Cloud to be the best Cloud for 

00:46:18.214 --> 00:46:20.692
machine learning, we offer 
customers the choice for the 

00:46:20.907 --> 00:46:23.585
best hardware that you can find 
anywhere, whether that's like S 

00:46:23.934 --> 00:46:30.105
scrk ylikeCPUs, Vola, and now 
this new member of the family, 

00:46:30.106 --> 00:46:33.124
Cloud TPUs so customers can 
build the best machine learning 

00:46:33.125 --> 00:46:35.125
systems to their specific workl
oads.

00:46:35.249 --> 00:46:38.375
   To tell you a little bit more
 about how clowtd TPUs are going

00:46:38.502 --> 00:46:42.083
 to                   TPU      
      Cloud tup     TPUs are 

00:46:42.084 --> 00:46:44.604
going to integrate with 
TensorFlow, I'd like to hand it 

00:46:44.955 --> 00:46:46.699
off to Brennan.
   &gt;&gt; BRENNAN SAETA:  Thank you,

00:46:46.700 --> 00:46:50.325
 Zak.  Today I want to talk to 
you about Cloud TPUs.  Now, as 

00:46:50.533 --> 00:46:54.115
we've designed Cloud TPUs, we 
wanted to ensure that it would 

00:46:54.116 --> 00:46:57.986
meet your needs, whether you are
 a researcher or whether you're 

00:46:58.233 --> 00:47:03.892
designing a high-scale, high-
performance machine learning 

00:47:03.893 --> 00:47:06.811
product, so for researchers, we 
wanted to ensure that it was 

00:47:06.812 --> 00:47:09.218
interact         interactive and
 low level, can     you can play

00:47:09.219 --> 00:47:11.061
 around with your models and 
debug them.

00:47:11.062 --> 00:47:13.932
   And for high-performance and 
high-scale platforms and 

00:47:14.073 --> 00:47:16.523
products, we wanted to ensure 
that it would integrate with the

00:47:16.660 --> 00:47:19.134
 rest of the Google Cloud P
latform.

00:47:19.135 --> 00:47:21.446
   But I think that instead of 
me just telling you about it, 

00:47:21.645 --> 00:47:26.147
are it's more excite ing if I 
show you.  Now, before I show 

00:47:26.148 --> 00:47:29.130
you, I want to say an important 
caveat.

00:47:29.131 --> 00:47:34.402
   As we bring TPUs to Google 
Cloud, there is a lot of move 

00:47:34.557 --> 00:47:38.574
ing pieces, and so some of those
 pieces are still under active 

00:47:38.575 --> 00:47:39.967
development so things may change
.

00:47:39.968 --> 00:47:43.875
   That said, let's get started.
  The simplest models that I 

00:47:43.876 --> 00:47:50.027
think I can show you is alpha 
times X plus Y.

00:47:50.028 --> 00:47:54.905
   So alpha is the constant of 2
.  X is a vector, or we call a 

00:47:54.906 --> 00:48:01.123
tensor, of three 1s.  Y is also 
three 1s, and we hope to at the 

00:48:01.334 --> 00:48:03.768
end of the computation get three
 3s.

00:48:04.053 --> 00:48:06.809
   In order to use Google Cloud 
TPUs      TPUs you've got to 

00:48:06.810 --> 00:48:09.246
first create one.  When you 
create one, this is your Cloud 

00:48:10.426 --> 00:48:13.192
TPU.  And so, in order to access
 it, however, you need to access

00:48:13.502 --> 00:48:17.897
 it via Google Compute Engine, 
so we first create a virtues 

00:48:17.898 --> 00:48:22.365
iewl              virtual 
machine in Google's Compute 

00:48:22.607 --> 00:48:24.876
Engine Product and we're going 
to name it demo

00:48:28.140 --> 00:48:35.841
 vm and then we're going to call
 a demo tpu.  We log into demo v

00:48:35.995 --> 00:48:41.141
m, and this is what we see after
 we install TensorFlow.o, we're 

00:48:41.269 --> 00:48:44.482
going to run the Python I
nteractive  Interpreter, and 

00:48:44.631 --> 00:48:48.580
we're going to import TensorFlow
 just like normal.  After that, 

00:48:48.665 --> 00:48:53.842
we're going to connect to our 
Cloud TPU using GRPC, Google's 

00:48:53.843 --> 00:48:58.457
Open Source RPC framework.
   After that, you use 

00:48:58.458 --> 00:49:01.287
TensorFlow just like you 
normally would, whether you're 

00:49:01.288 --> 00:49:03.793
on a CPU or GP

00:49:08.990 --> 00:49:11.990
U.  The only 
difference           difference,

00:49:08.990 --> 00:49:13.056
 however, is that you define 
your computations that you want 

00:49:08.990 --> 00:49:15.556
to run on the TPU in this withtf
device block.  In doing so you 

00:49:15.557 --> 00:49:17.572
tell TensorFlow to run the 
computation on the TPU.

00:49:17.573 --> 00:49:20.387
   After that, you can just run 
it, again, just like normal 

00:49:20.496 --> 00:49:24.349
TensorFlow and it just works.  
It's very comieting           

00:49:24.444 --> 00:49:27.439
excite ing.
   So to review what just 

00:49:27.440 --> 00:49:33.921
happened, we logged into our 
Google Compute Engine vm, ran 

00:49:33.922 --> 00:49:36.752
the TensorFlow and interact  
       interactive interpreter 

00:49:36.878 --> 00:49:40.668
and connected to the Cloud TPU 
and ran the competition  

00:49:41.751 --> 00:49:44.110
           computation and ferch
ed the result                   

00:49:44.111 --> 00:49:49.979
 ferched the results back to our
 Google Cloud.his 1VM and Cloud 

00:49:49.980 --> 00:49:53.516
TPU is only the beginning.  We 
designed Cloud TPUs to int 

00:49:53.517 --> 00:49:57.629
dprait with all the         
                integrate with 

00:49:57.630 --> 00:50:00.289
platforms available in the 
Google platform. if you want, if

00:50:00.417 --> 00:50:03.420
 you have a model that part of 
the model runs really, really 

00:50:03.421 --> 00:50:07.043
well on brand new GPUs and part 
of your model runs really, 

00:50:07.044 --> 00:50:11.750
really well on Cloud TPU, you 
can create your owness tare  

00:50:11.896 --> 00:50:16.360
           own esoteri 
heterogeneous cluster and test 

00:50:16.686 --> 00:50:19.218
the model to the right parts of 
the cluster run on the right

00:50:23.620 --> 00:50:23.838
 compute nodes.
   But UW    one thing we've 

00:50:23.839 --> 00:50:26.331
learned at Google is as you push
 the boundaries of computational

00:50:26.614 --> 00:50:30.985
 power, as you push extreme 
scale, you need to optimize the 

00:50:31.198 --> 00:50:35.250
entire system from end to end.
   And what I mean is, you need 

00:50:35.251 --> 00:50:39.774
to take into account not just 
the amount of discs that you use

00:50:40.170 --> 00:50:43.126
 to feed your data quickly into 
the excelling           

00:50:43.127 --> 00:50:45.644
accelerate or pods and not just 
the network that connects all of

00:50:45.645 --> 00:50:48.473
 these distribute ed machines 
together, but you also need a 

00:50:48.474 --> 00:50:52.592
highly-tuned software platform, 
and to tell you about that, I'd 

00:50:52.725 --> 00:50:54.745
like to tell you about some of 
the latest changes that are 

00:50:55.155 --> 00:50:58.449
happening, that are still under 
act    active development in C

00:50:58.640 --> 00:51:00.640
ore TensorFlow.

00:51:04.919 --> 00:51:07.678
presentation, we had a picture 
of the Core TensorFlow Platform,

00:51:07.895 --> 00:51:12.475
 and I've redrawn that add    
adding a few extra boxes.  I'm 

00:51:12.605 --> 00:51:19.394
going to talk to you today about
 XLA, Estimate ors, and datasets

00:51:19.621 --> 00:51:24.264
. start with closest to the bare
 med     metal, let's talk about

00:51:24.374 --> 00:51:29.134
 XLA.  TensorFlow is designed to
 go from research to production,

00:51:29.448 --> 00:51:32.099
 and production means not just 
serve ers in a data center, but 

00:51:32.321 --> 00:51:36.647
it means going all the way from 
phones to these exotic hardware 

00:51:36.840 --> 00:51:40.811
compute devices like pup     TPU
s. in order to run efficiently 

00:51:40.812 --> 00:51:44.751
and to get the extreme 
performance, you need a highly 

00:51:44.752 --> 00:51:50.450
tuned software stack      stack.
   As it turns out, in order to 

00:51:50.680 --> 00:51:54.404
get the optimize ed code, you 
need to bring your own compile 

00:51:55.159 --> 00:51:58.751
er.  XLA is tensor        
TensorFlow's compile er.  XLA 

00:51:58.752 --> 00:52:06.916
stands for Accelerate ed   
        ak Accelerate ed Linear 

00:52:07.602 --> 00:52:13.144
Algebra.  And when you use it 
you design yourgraph, and XLA 

00:52:13.284 --> 00:52:16.184
will take a subset or even a 
whole grap and run a huge number

00:52:16.185 --> 00:52:18.883
 of opt immigration passes over 
it,                 pass       

00:52:18.969 --> 00:52:21.234
               optimization 
passes over it and approximately

00:52:22.650 --> 00:52:27.767
               put the machine 
to run on what you have.

00:52:27.768 --> 00:52:30.948
   We're taking the algorithm 
that does extreme performance on

00:52:31.279 --> 00:52:35.030
 image recognition and XLA will 
take a subset of that graph and 

00:52:35.124 --> 00:52:39.206
it will reorder the computations
 and krowt put the              

00:52:39.207 --> 00:52:43.003
 output the assembly in binary 
form to run efficiently on CP   

00:52:43.004 --> 00:52:48.332
CPUs or GPUs.
   But XLA was designed for the 

00:52:48.535 --> 00:52:52.289
Explosion in exotic hardware 
that we see in machine learning

00:52:52.833 --> 00:52:56.551
          learning.  XLA has a 
plug     pluggable back end so 

00:52:56.669 --> 00:53:01.711
that you can target your own 
hardware elements.

00:53:01.712 --> 00:53:08.181
   TPUs are just a custom backe
nd for XLA.  In doing so we take

00:53:08.444 --> 00:53:12.413
 advantage of the optimizations 
that we do for CPUs and GPUs and

00:53:12.414 --> 00:53:14.414
 we're able to run them also on 
TPUs.

00:53:14.643 --> 00:53:18.065
   But XLA runs sort of 
underneath the hood and so it's 

00:53:18.208 --> 00:53:21.599
sometimes a little hard to see, 
so if you'd like to see XLA in 

00:53:21.600 --> 00:53:25.000
action, you can turn on trace 
ing when you run your TensorFlow

00:53:25.347 --> 00:53:28.068
 computation, and if you print 
out the trace information that's

00:53:28.069 --> 00:53:33.357
 stored in that run metadata 
object, you might see something 

00:53:33.481 --> 00:53:37.029
like this.n one of the node stat
s we see this funny underscore X

00:53:37.274 --> 00:53:41.174
LA launch operation.  If you're 
not using XLA, the node stats 

00:53:41.710 --> 00:53:44.535
will be your TensorFlow graph 
nodes, but what happens when you

00:53:44.536 --> 00:53:49.839
 use XLA is the XLA compile er 
generates that optimize ed 

00:53:50.754 --> 00:53:53.812
binary, and the XLA launch 
operation is the time spent 

00:53:54.122 --> 00:53:57.255
actually running that bieb ree 
on             binary on your 

00:53:57.256 --> 00:54:02.613
compute devices. one thing 
that's interesting is the node 

00:54:02.614 --> 00:54:06.025
names don't correspond, 
necessarily, with your 

00:54:06.248 --> 00:54:11.904
TensorFlow graph, and the reason
 for that is that XLA preforms 

00:54:11.905 --> 00:54:14.726
whole program optimization.
   If you've ever used an 

00:54:14.727 --> 00:54:17.904
optimize ing compile er and look
ed at the assembly that's output

00:54:18.111 --> 00:54:20.347
 afterwards, you notice that it 
doesn't necessarily match up 

00:54:20.348 --> 00:54:24.315
with your statements that you 
write in, for example, C.  

00:54:24.539 --> 00:54:26.433
That's because the optimize and 
compile er is doing a number of 

00:54:26.434 --> 00:54:30.581
tricks underneath the hood to 
get optimal machine performance,

00:54:30.875 --> 00:54:33.739
 and XLA is doing that not just 
at the function or the operation

00:54:33.740 --> 00:54:36.542
 level, but it's schedule ing 
whole programs to run 

00:54:38.179 --> 00:54:42.096
efficiently.
   So, we've talked about XLA or

00:54:42.097 --> 00:54:45.813
 how you run on these new 
hardware platforms all the way 

00:54:45.814 --> 00:54:50.548
across the range of devices we 
support, but I now want to talk 

00:54:50.549 --> 00:54:53.983
about how you actually write 
your algorithms so that they can

00:54:54.194 --> 00:54:57.080
 run across all of these 
platforms, and for that we have 

00:54:57.299 --> 00:55:01.676
Estimate ors.
   Now, this code I'm showing 

00:55:01.904 --> 00:55:05.330
you is copy and paste ed directl
y from our source repository, 

00:55:05.515 --> 00:55:08.956
and it runs today on C  CPUs and
 GPU, and I'm going to show you 

00:55:09.490 --> 00:55:12.046
how you can modify it to run on 
TPUs.

00:55:12.318 --> 00:55:15.986
   When you use Estimate ors, 
you define your machine learning

00:55:15.987 --> 00:55:20.019
 algorithm using a model 
function, and this is the model 

00:55:20.020 --> 00:55:24.241
definition for a simple 
convolutional neural network to 

00:55:24.242 --> 00:55:30.002
recognize handwritten digits, 
this is the M (?) dataset for 

00:55:30.003 --> 00:55:32.258
those of you that are familiar.
   I want to draw your attention

00:55:32.498 --> 00:55:35.085
 to the final three lines, in 
order to see them a a little 

00:55:35.086 --> 00:55:37.006
better, we've made them a little
 bigger.

00:55:37.007 --> 00:55:39.616
   Normally, when you train your
 machine learning algorithm, you

00:55:39.879 --> 00:55:42.982
 use a grade       gradient 
descent optimize er or similar 

00:55:42.983 --> 00:55:47.145
to optimize the weights.  This 
is the training step of your 

00:55:47.146 --> 00:55:50.678
machine learning algorithm.  In 
order to get it to run on TPUs, 

00:55:51.192 --> 00:55:54.915
you just wrap your gradient 
descent optimize er with a TPU 

00:55:55.462 --> 00:55:59.359
cross-shard optimize er.  TPUs 
have a number of parallel 

00:55:59.360 --> 00:56:03.394
compute elements that all work 
together, and in order to 

00:56:03.735 --> 00:56:06.530
aggregate the learned weights, 
you need to use this cross-  

00:56:06.824 --> 00:56:09.927
     cross-shard optimize er to 
relearn the entire algorithm.

00:56:10.051 --> 00:56:13.363
   That is the only change 
required when you're using  

00:56:13.364 --> 00:56:21.632
Estimate ors to run on CPU, GPUs
 and TPUs for this example.  

00:56:21.633 --> 00:56:24.551
Now, how do you actually run it?
  You've got to define your main

00:56:24.732 --> 00:56:27.571
 function.  Using Estimate ors 
it's very simple.

00:56:27.961 --> 00:56:30.042
   Normally you just design  
      define the Estimate ors 

00:56:30.218 --> 00:56:32.919
based on the model function and 
you call train.  Tolgt this to  

00:56:32.997 --> 00:56:36.522
               To get this to 
work on TPUs you use a TPU E

00:56:37.385 --> 00:56:42.193
stimate or and a TPU Run Config.
  A that's it.  Those are all 

00:56:42.194 --> 00:56:45.788
the changes required for this 
model to work on CPU, GPUs, and 

00:56:46.013 --> 00:56:48.335
TPUs.
   Some more complicate ed 

00:56:48.336 --> 00:56:50.690
models may require additional 
code changes, but the TensorFlow

00:56:50.888 --> 00:56:54.688
 Team is constantly working to 
reduce the amount of code 

00:56:54.689 --> 00:56:57.765
changes required as you go all 
the way to production on all of 

00:56:57.766 --> 00:57:01.810
these different platforms.
   If you'd like to hear more 

00:57:01.980 --> 00:57:04.912
about the high-level API, I 
encourage you to check out the 

00:57:05.016 --> 00:57:09.318
talk in the next hour about 
TensorFlow with the high-level 

00:57:09.512 --> 00:57:12.651
APIs.
   So, we've talked about how to

00:57:13.015 --> 00:57:16.223
 define your machine learning 
algorithms, we've talked about 

00:57:16.385 --> 00:57:19.216
how they execute on hardware 
device, but we're missing one 

00:57:20.771 --> 00:57:26.107
key thing.  The machine learning
 triad that has relate ed in a 

00:57:26.108 --> 00:57:30.293
Explosion of progress has been 
fueled by three components, high

00:57:30.551 --> 00:57:32.588
-      high-performance 
computation, advances in 

00:57:32.673 --> 00:57:38.998
algorithms, and also input data.
  Without input data, all the 

00:57:38.999 --> 00:57:44.335
fancy acceleration you want is 
not going to generate any more 

00:57:44.336 --> 00:57:46.500
than random numbers.
   Cloud TPUs are designed to 

00:57:46.636 --> 00:57:48.862
int dprait with the rest      
                    integrate 

00:57:49.416 --> 00:57:52.040
with the rest of Google platform
 to make it easy to load data in

00:57:52.158 --> 00:57:54.862
 a high-      high-performance 
way.  You can load data from 

00:57:54.863 --> 00:58:00.521
your persistent disc or your 
ephemeral loyal SSD on Google 

00:58:00.522 --> 00:58:03.754
Compute Engine, but you can also
 stream data in directly from 

00:58:03.755 --> 00:58:07.797
Google Cloud storage into your 
Cloud TPUs, and for those of you

00:58:07.798 --> 00:58:10.078
 doing advance ed reinforcement 
algorithms or other sorts of 

00:58:10.212 --> 00:58:15.076
things, you can run simulate ors
 on Google  Compute Engine and 

00:58:15.077 --> 00:58:17.708
integrate that with your machine
 learn      learning model 

00:58:17.709 --> 00:58:23.903
running on your Cloud TPUs.
   But as it turns out, we at 

00:58:23.904 --> 00:58:26.951
Google, we've been deploy       
deploying these high opinion hfa

00:58:27.355 --> 00:58:31.505
nce                     high 
performance accelerate ors of CP

00:58:31.611 --> 00:58:35.403
Us and G  GPUs for a while, and 
we find when you put them into 

00:58:35.404 --> 00:58:37.751
production you find new bottle
neck, I think this is best 

00:58:37.752 --> 00:58:42.178
explained with an example of if
      .  If you optimize ed your

00:58:42.179 --> 00:58:45.782
 software platform, you use 
techniques to overlap 

00:58:45.783 --> 00:58:48.650
competition,              comp 
computation, and that's what 

00:58:48.910 --> 00:58:53.525
we've done here, for this image 
model we run input on the CPU 

00:58:53.526 --> 00:58:57.112
for the next training step while
 our accelerate or is running 

00:58:57.113 --> 00:58:59.264
the model and learning on the 
current training step.

00:58:59.516 --> 00:59:02.660
   But if you all of a sudden 
just take this and put this over

00:59:02.845 --> 00:59:06.256
 to an Accelerate or that's 10 
times faster, your training step

00:59:06.257 --> 00:59:10.025
 time is not going to decrease 
anywhere close to what you would

00:59:10.026 --> 00:59:13.566
 hope.
   To help you feed data in in a

00:59:13.567 --> 00:59:15.909
 flexible but high-      
high-performance manner, we're 

00:59:15.910 --> 00:59:22.205
introduce ing a new API in 
TensorFlow 1.2 called Datasets. 

00:59:22.365 --> 00:59:25.119
 TensorFlow 1.2, the first 
release candidate is coming out 

00:59:25.120 --> 00:59:28.742
as we speak, and we encourage 
you all to try out these new API

00:59:29.204 --> 00:59:32.163
s, kick the tires      tires.  
Although, they're still a work 

00:59:32.164 --> 00:59:35.614
in progress, we think they're 
very excite ing, and I'd like to

00:59:35.756 --> 00:59:38.614
 show you a little about what 
the status of the API looks like

00:59:38.828 --> 00:59:45.789
. a code snipbit where we load a
 set of data from a TF record on

00:59:46.300 --> 00:59:49.015
 file.  We then repeat the 
dataset as we train our 

00:59:49.016 --> 00:59:52.530
algorithm.  We perform some 
parse ing and disportion  

00:59:52.740 --> 00:59:55.006
          distortions to this 
using the parse er function, but

00:59:55.007 --> 00:59:59.398
 we can use this in parallel 
using the parallel num threads 

00:59:59.399 --> 01:00:02.436
through a parallel map.
   Finally we batch it up into 

01:00:02.437 --> 01:00:05.077
training bunches that he with 
then feed to the accelerate or. 

01:00:05.412 --> 01:00:09.222
 This new datasets API borrows 
from functional programming and 

01:00:09.529 --> 01:00:13.625
other advance ed concepts to 
make it easy to define high-p

01:00:15.539 --> 01:00:20.974
erformance input pipelines that 
run well.We've talked about now 

01:00:20.975 --> 01:00:26.621
XLA, Estimate ors and Dataset, 
and these are just some of the 

01:00:26.622 --> 01:00:29.138
new changes coming in TensorFlow
 1.2 that helped make these high

01:00:29.327 --> 01:00:36.247
-performance accelerate ors be 
they CPUs, GPUs or TPUs really 

01:00:36.248 --> 01:00:38.160
sing.
   Now, on top of this base of 

01:00:38.161 --> 01:00:40.835
awesome compute and 
infrastructure, we see some 

01:00:40.836 --> 01:00:44.532
really phenomenal learning and 
research work, and for that I'd 

01:00:44.533 --> 01:00:48.127
like to turn it back over to Zak
 Stone to talk about research on

01:00:48.128 --> 01:00:50.751
 the frontier. 
   &gt;&gt; ZAK STONE:  Thanks, 

01:00:52.178 --> 01:00:55.815
Brennan.  We've witnessed e
xtraordinary breakthroughs in 

01:00:55.816 --> 01:00:59.076
machine learning research over 
the passed several years, and 

01:00:59.077 --> 01:01:01.992
while there are many typeses of 
machine learning, many of these 

01:01:01.993 --> 01:01:05.039
breakthroughs vs. been 
concentrate ed at the edges of 

01:01:05.040 --> 01:01:06.426
what's computational 
             computationally 

01:01:06.427 --> 01:01:10.771
possible, and we believe that 
much large er amounts of 

01:01:10.912 --> 01:01:13.603
computation are going to unlock 
new discovery ies and new breakt

01:01:14.428 --> 01:01:18.396
hroughs, which with large er and
 more complex models than 

01:01:18.593 --> 01:01:21.751
researchers can practically 
experiment with today. the photo

01:01:21.752 --> 01:01:25.472
 behind me, we'll       it 
represents the research learning

01:01:25.678 --> 01:01:28.288
 community.  The mountain 
represents the break      

01:01:28.289 --> 01:01:30.151
breakthroughs yet to be 
discovered, and that gate is the

01:01:30.152 --> 01:01:32.761
 computational limits that are h
oaltding researchers back      

01:01:32.892 --> 01:01:35.248
            research            
        holding researchers back

01:01:35.526 --> 01:01:37.299
.
   Our goal is to break open the

01:01:37.300 --> 01:01:39.903
 gate and help research         
researchers to climb that mown  

01:01:40.029 --> 01:01:45.672
    mountain to find new 
discovery.  I'm thrilled the 

01:01:46.010 --> 01:01:47.945
TensorFlow Research Cloud was 
announce ed yesterday in order 

01:01:47.946 --> 01:01:50.765
to support open machine learning
 research worldwide and help 

01:01:51.487 --> 01:01:53.674
rrch      researchers who 
currently don't have enough 

01:01:53.908 --> 01:01:56.974
access to computation experiment
 with large er and more complex 

01:01:56.975 --> 01:01:58.327
motion is denied else.

01:01:58.328 --> 01:02:00.749
                         come 
models.e've dedicate ed a 

01:02:00.750 --> 01:02:04.665
thousand of these new Cloud TPUs
 to accelerate open machine 

01:02:04.666 --> 01:02:07.075
learning research.  We're going 
to set up an application process

01:02:07.221 --> 01:02:09.888
 to let people from all 
backgrounds and all fields of 

01:02:09.889 --> 01:02:14.332
expertise propose projects to 
take advantage of this extra 

01:02:14.333 --> 01:02:23.028
amount of computing power.  This
 is 1le 0peta  a          80peta

01:02:23.311 --> 01:02:26.765
frop      aflops all together 
and we can't wait to see what 

01:02:26.766 --> 01:02:30.627
beam are going to do with      
                     people are 

01:02:31.027 --> 01:02:35.299
going to do.  What could they be
?  We can't wait to find out. 

01:02:35.422 --> 01:02:38.227
example that was mentioned 
yesterday.  I want to mention A

01:02:38.467 --> 01:02:40.900
uto ML it's a family of 
techniques for using machine 

01:02:40.901 --> 01:02:43.833
learning models to develop new 
machine learning models.  I 

01:02:44.061 --> 01:02:46.061
won't go through the details 
here, but these are just two 

01:02:46.214 --> 01:02:50.204
examples from a linguistic 
problem and an image recognition

01:02:50.205 --> 01:02:53.216
 problem where we've used the 
machine learning          learn

01:02:53.471 --> 01:02:56.765
ing model to generate the 
architectures that you see here 

01:02:56.766 --> 01:02:59.480
on the screen, and the 
interesting thing about it is 

01:02:59.481 --> 01:03:03.265
that both of these models look 
kind of complex and organic.  

01:03:03.266 --> 01:03:06.908
They don't necessarily look like
 the thing that a mathematician 

01:03:07.031 --> 01:03:09.209
might have come up with by hand.
   Now, this kind of 

01:03:11.345 --> 01:03:13.232
experimentation requires immense
 amounts of compute, but 

01:03:13.233 --> 01:03:17.347
fortunately, with this step 
function to Cloud TPUs and 

01:03:17.348 --> 01:03:21.227
eventually to the TPU Pods we 
want to shift the research minds

01:03:21.522 --> 01:03:24.973
et from scares tee to abundance 
so you can start contemplate ing

01:03:24.974 --> 01:03:27.702
 these kind of techniques to 
search for new model 

01:03:27.703 --> 01:03:29.865
architectures and open up new 
applications.

01:03:29.866 --> 01:03:34.551
   So just to be clear, we have 
one underlie  ying product in 

01:03:35.367 --> 01:03:39.508
fool      Google Cloud which is 
the new Cloud TPUs on the Google

01:03:39.509 --> 01:03:42.373
 Compute Engine, but we're offer
ing the community access to them

01:03:42.374 --> 01:03:46.910
 in two ways.or general use, 
we're setting up a Cloud TPU 

01:03:47.016 --> 01:03:49.695
alpha program that lets 
businesses, startup, individuals

01:03:50.021 --> 01:03:54.346
, students, people, artists, 
anyone who is interested in this

01:03:54.581 --> 01:03:57.933
 frontier of machine learning, 
to sign up and try to get early 

01:03:57.934 --> 01:04:01.096
access to these limited numbers 
of Cloud TPUs to figure out how 

01:04:01.240 --> 01:04:03.659
to adapt them for their 
applications.

01:04:03.660 --> 01:04:07.196
   But for those of you out 
there who are doing cutting edge

01:04:07.480 --> 01:04:10.811
 machine learning research, who 
are extending this frontier, 

01:04:10.935 --> 01:04:13.428
we've set up the TensorFlow 
Research Cloud, and we're going 

01:04:13.574 --> 01:04:17.302
to open up this application 
process to invite you in to take

01:04:17.303 --> 01:04:20.837
 advantage of these thousand 
Cloud TPUs to do things that 

01:04:21.167 --> 01:04:24.164
just aren't feasible today.
   If you're interested in 

01:04:24.263 --> 01:04:28.941
either of these programs, we 
encourage you to sign up now at 

01:04:28.942 --> 01:04:35.614
g.co/TPUsignup, and tell us more
 about your compute needs and 

01:04:35.926 --> 01:04:38.946
we'll notify you as soon as more
 information is available about 

01:04:38.947 --> 01:04:40.947
Cloud TPUs and the TensorFlow 
Research Cloud.

01:04:40.995 --> 01:04:43.084
   Before I go, I'd like to 
encourage you to either stick 

01:04:43.211 --> 01:04:46.320
around for the next session, 
which will cover TensorFlow for 

01:04:46.418 --> 01:04:48.679
non-experts and tell you more 
about the high     high-level 

01:04:48.942 --> 01:04:52.491
APIs that we described early 
ier, or join us in the office 

01:04:52.607 --> 01:04:55.523
hours section for office hour, 
and if you're worried, how do I 

01:04:55.658 --> 01:04:58.854
choose between the next session 
and office hours?  Don't worry. 

01:04:59.039 --> 01:05:01.209
 We've added a next office hour 
after the next session so you 

01:05:01.210 --> 01:05:04.905
can do both.
   Thanks again to your 

01:05:04.906 --> 01:05:07.965
attention, we'll really excite
 ed about TensorFlow and Cloud 

01:05:08.087 --> 01:05:10.671
TPUs and we look forward to 
speaking you with in office hour

01:05:10.780 --> 01:05:12.868
s.(Applause).

01:05:58.555 --> 01:06:08.372
   10:30 a.m.
   May 18, 2017

01:06:11.872 --> 01:06:13.872
.

01:06:16.835 --> 01:06:18.835
   Google

01:06:21.392 --> 01:06:23.392
 UI 

01:06:27.391 --> 01:06:29.391
   I/O

01:06:32.471 --> 01:06:34.471
.

01:06:47.879 --> 01:06:49.879
Fragment Tricks

01:14:20.094 --> 01:14:22.094
-

01:15:42.326 --> 01:15:44.326
   -

01:28:22.240 --> 01:28:23.080
         s-

01:28:35.945 --> 01:28:44.748
   May 18, 2017. I/O.
   Fragment

01:28:46.296 --> 01:28:49.176
 tricks        T

01:28:55.503 --> 01:28:57.503
ricks

01:29:00.409 --> 01:29:02.409
.
   Stage 3

01:29:08.720 --> 01:29:10.720
.

01:29:19.429 --> 01:29:22.318
welcome to tragment tricks,  
       tricks today we're going 

01:29:22.319 --> 01:29:26.398
to talk about a few ective ways 
to iewts frag            use 

01:29:27.278 --> 01:29:31.439
fragment patterns in your apps. 
 Some of these may seem a little

01:29:31.440 --> 01:29:34.077
 bay     basic, but they're also
 things that are going to help 

01:29:34.201 --> 01:29:37.473
you factor things effectively, 
and makes sure you can keep your

01:29:37.930 --> 01:29:40.880
 code clean.
   Stupid trag      fragment 

01:29:41.088 --> 01:29:43.088
tricks.
   &gt;&gt; Yeah.  Stupid fragment 

01:29:44.248 --> 01:29:47.041
tricks.
   Now, let's start with a 

01:29:47.042 --> 01:29:49.237
little history behind this, 
which kind of helps understand 

01:29:49.238 --> 01:29:53.335
where some of the Fragment APIs 
came from, so as we started move

01:29:53.471 --> 01:29:57.107
 ing into large-screen devices 
in the honeycomb era, we started

01:29:57.200 --> 01:30:00.023
 to realize a few specific 
patterns in the way that some 

01:30:00.269 --> 01:30:02.269
apps are put together, 
especially app

01:30:04.518 --> 01:30:06.984
s of the time.
   You've got one area 

01:30:04.518 --> 01:30:07.212
denoted         devote ed to 
your navigation and another area

01:30:07.213 --> 01:30:09.604
 denoted to content.  When you 
put these two things together, 

01:30:09.737 --> 01:30:12.996
you can imagine on a small 
screen device, you might see the

01:30:12.997 --> 01:30:16.191
 navigation as one screen that 
advances to a content screen, 

01:30:16.192 --> 01:30:18.121
and when you're on a large er 
screen device       device, 

01:30:18.122 --> 01:30:21.530
you're able to show the same t
hings side-by-side.We had a 

01:30:21.531 --> 01:30:24.325
question of how do I write an 
app that works seamlessly across

01:30:24.774 --> 01:30:27.425
 both?
   So the Fragment APIs were 

01:30:27.426 --> 01:30:30.976
born.  It was something that you
 could use to factor out your 

01:30:30.977 --> 01:30:34.002
activity components into two 
separate pieces that you could 

01:30:34.003 --> 01:30:36.817
show differently based on 
different device cop figure 

01:30:36.818 --> 01:30:38.986
racial                   
configurations.

01:30:38.987 --> 01:30:42.369
   This works really well for 
some applications like g  gmail,

01:30:42.637 --> 01:30:45.167
 but you're probably not using 
that if you followed the 

01:30:45.401 --> 01:30:48.233
development of app design over 
the past several years, you 

01:30:48.234 --> 01:30:51.269
notice that this sort of pattern
 doesn't fit for a lot of 

01:30:51.458 --> 01:30:52.843
things.
   However, it's still extremely

01:30:52.844 --> 01:30:55.223
 useful for representing your 
application as a series of 

01:30:59.653 --> 01:31:02.017
destinations, so even on a 
small-screen device, you might 

01:31:02.018 --> 01:31:02.362
have an app that looks 
like            looks something 

01:31:02.363 --> 01:31:04.831
like this.  We've got our little
 application where we can order 

01:31:04.832 --> 01:31:08.263
some microkitchen snacks        
snacks around the Google campus,

01:31:08.381 --> 01:31:11.396
 and for each one of these 
screens, you can perform a 

01:31:11.615 --> 01:31:14.211
replace transactions for replace
 the destination that you were 

01:31:14.619 --> 01:31:19.463
looking at previously with the 
new one.  A replace transaction 

01:31:19.464 --> 01:31:23.311
will remove any fragment in the 
container and then add the new 

01:31:23.312 --> 01:31:27.277
fragment., the nice thing about 
this is you can place these 

01:31:27.503 --> 01:31:30.184
particular transactions on to 
the backstack, we'll handle the 

01:31:30.434 --> 01:31:33.208
back navigation for you.  Now, 
the nice thing about this is 

01:31:33.209 --> 01:31:37.902
that the content and navigation 
pane separation isn't limited to

01:31:38.200 --> 01:31:41.249
 just large screens.  This can 
really help to keep your Chrome 

01:31:41.336 --> 01:31:43.360
stable in your application.  So 
any time you have things like 

01:31:43.361 --> 01:31:46.789
bars, net drawers, bottom 
navigation bars, any of these 

01:31:46.992 --> 01:31:49.125
things that you want to keep 
stable and perform some 

01:31:49.126 --> 01:31:52.400
consistent animations from one 
screen to another, this really 

01:31:52.401 --> 01:31:55.824
lets you do it in a way that is 
really difficult to being a 

01:31:55.825 --> 01:31:58.911
publish with activity-to-  
           activity-to-activity 

01:31:58.912 --> 01:32:00.644
transitions             
transitions where you can't have

01:32:00.645 --> 01:32:04.974
 the continuity as you navigate 
deeper in your app's hierarchy.

01:32:05.049 --> 01:32:07.463
   Now, let's talk              

01:32:07.464 --> 01:32:09.652
   &gt;&gt; Now, let's talk a little 
about navigation flows.  When I 

01:32:09.653 --> 01:32:13.288
talk about navigation flow, I'm 
talking about those step-by-step

01:32:13.289 --> 01:32:17.081
 throw       flows that you have
 in your application.  So when y

01:32:17.168 --> 01:32:22.565
ou have a checkout or a sign up,
 or a setup wizard, you're going

01:32:22.752 --> 01:32:27.357
 to go -- the users are going to
 go step by step through the 

01:32:27.566 --> 01:32:30.159
navigation, and then they may 
want to wonder back using the 

01:32:30.160 --> 01:32:32.693
back button and then go forward 
again      again.  Then when 

01:32:32.694 --> 01:32:35.211
they're all done, you want to be
 all done with that.  You want t

01:32:36.370 --> 01:32:39.594
he user to be able to go back 
through the checkout process 

01:32:39.754 --> 01:32:42.200
again with the back button, you 
wouldn't want that, that would 

01:32:42.201 --> 01:32:46.991
kind of suck. going to focus on 
our app, the microkitchen app 

01:32:47.130 --> 01:32:49.584
which we've been trying to sell 
to the Google ers to sell the 

01:32:49.585 --> 01:32:53.688
free micro       microkitchen 
apps.   &gt;&gt; It hasn't been 

01:32:53.689 --> 01:32:56.088
working very well.
   &gt;&gt; It has not.  We have new 

01:32:56.475 --> 01:32:59.301
customers coming this summer, 
intern, so we're pretty sure 

01:32:59.448 --> 01:33:04.812
they will partake in our great 
free microkitchen service.  And 

01:33:04.813 --> 01:33:08.484
when the user comes in, they're 
going to chick on          click

01:33:08.606 --> 01:33:12.504
 on the Cart Button, and what 
we're going to do is remove the 

01:33:12.716 --> 01:33:15.046
little Cart at the bottom, the 
little fragment there, and then 

01:33:15.047 --> 01:33:18.531
we're also going to remove that 
big -- replace that big fragment

01:33:18.532 --> 01:33:22.035
 at the top with our new 
fragment that we're going to 

01:33:22.036 --> 01:33:25.850
label,  Cart.  Not the fragment,
 but we're going to label the 

01:33:26.354 --> 01:33:29.070
state      state, Cart.I'm going
 to talk about that a little bit

01:33:29.071 --> 01:33:33.132
 later, why we're giving it a 
name on the backstack.  And then

01:33:33.133 --> 01:33:37.052
 when they hit checkout, they 
can then choose the address they

01:33:37.123 --> 01:33:40.921
 want to ship to, and we're just
 going to replace that fragment 

01:33:40.996 --> 01:33:45.860
with their address selection 
one, and they can choose payment

01:33:45.961 --> 01:33:49.500
 then, and we replace again with
 with a faiment fragment,   

01:33:50.385 --> 01:33:53.310
        fragment, and again we 
add it to the backstack and we 

01:33:53.471 --> 01:33:56.194
don't need a name for the backs
tack, but we'll talk about it in

01:33:56.316 --> 01:33:58.678
 a little bit, but they can go 
back through the back it is 

01:33:58.679 --> 01:34:01.127
stack, navigate back and choose 
a different address if they want

01:34:01.313 --> 01:34:04.220
 by hitting the back button.
   As developers, we don't have 

01:34:04.221 --> 01:34:07.641
to do any other work.  Backstack
 just pops that fragment right 

01:34:07.772 --> 01:34:13.313
back into our state      state, 
and it's great.  And then the 

01:34:13.576 --> 01:34:17.625
user can go back through, choose
 a payment, and then confirm t

01:34:17.878 --> 01:34:23.275
heir purchase.
   Now, here on the Confirm P

01:34:23.360 --> 01:34:25.521
urchase screen, we're going to 
do a couple of things all at 

01:34:25.625 --> 01:34:28.409
once.  We're going to do a pop 
back stack all the way back to 

01:34:28.410 --> 01:34:31.917
that original Cart state that we
 said, and because we passed the

01:34:32.480 --> 01:34:38.987
 inclusive flag there, now it 
pops -- that Cart state also, 

01:34:38.988 --> 01:34:42.469
and it will go all the way back,
 pop all the states back, and 

01:34:42.470 --> 01:34:46.892
then statement           at the 
same time, we add this new 

01:34:46.893 --> 01:34:51.838
transaction that will replace 
that state with our thank you 

01:34:51.839 --> 01:34:54.286
page because we want to thank 
them for giving us all their mon

01:34:54.418 --> 01:34:57.972
ey.  It's pretty good.  We need 
to thank them for giving us all 

01:34:58.212 --> 01:35:01.106
their money.
   Now, on this one, we have a 

01:35:01.107 --> 01:35:05.018
little different thing going on.
  The Okay Button doesn't just 

01:35:06.527 --> 01:35:09.156
create        create a new 
transaction, it's going to pop 

01:35:09.240 --> 01:35:13.016
the backstack as well.  Now, no 
matter what the user does, the 

01:35:13.017 --> 01:35:15.078
user is going to do the right 
thing.  They're not going to add

01:35:15.079 --> 01:35:18.612
 a new transaction -- add to 
that state.  We don't want to 

01:35:19.620 --> 01:35:23.010
have that thank you page come 
back again if they pop the 

01:35:23.309 --> 01:35:27.204
backstack. , so it's going to 
come right back to where they 

01:35:27.330 --> 01:35:31.307
can buy more stuff from us., can
 you see some of the keys here 

01:35:31.308 --> 01:35:36.842
to backstack management.  Always
 maintain your backstack going 

01:35:37.099 --> 01:35:41.148
forward.  It's so much easy ier 
to manage your backstack if you 

01:35:41.379 --> 01:35:45.679
choose the direction your user 
is going to go on the back stack

01:35:45.680 --> 01:35:51.261
 as you navigate forward.
   At the time the user presses 

01:35:51.583 --> 01:35:53.583
the back button, don't at the 
time choose what they're going 

01:35:53.593 --> 01:35:58.138
to do.  That's a lot harder to 
manage.

01:35:58.406 --> 01:36:00.657
   So, to take advantage of this
 kind of thing, sometimes you 

01:36:00.658 --> 01:36:05.131
need to do some synthetic back 
stack management, that means if 

01:36:05.225 --> 01:36:12.419
you have a   an exearn ital link
           it              an 

01:36:12.541 --> 01:36:14.803
external link into your 
application, a deep-nested thing

01:36:15.036 --> 01:36:17.844
, they're selecting a particular
 Cart button, and when they hit 

01:36:18.155 --> 01:36:20.591
the back button, you don't want 
them to go to the main screen.  

01:36:20.592 --> 01:36:23.584
You want them to go into the 
category, perhaps, or even from 

01:36:23.585 --> 01:36:27.270
a               .Or even from a 
notification.

01:36:27.537 --> 01:36:29.860
   &gt;&gt; That's a great example.  
From notification.  Or maybe in 

01:36:30.387 --> 01:36:32.416
search, in the application, you 
might want to have the same 

01:36:32.417 --> 01:36:34.910
thing.
   So what do we do?  Well, we 

01:36:35.276 --> 01:36:37.923
just execute a whole bunch of 
transactions all at the same 

01:36:37.924 --> 01:36:41.480
time.  Just build up the stack 
for them, boo     boom, boom, 

01:36:41.481 --> 01:36:46.530
boom, boom, and execute them.

01:36:46.531 --> 01:36:49.179
   &gt;&gt; ADAM POWELL:  Hang on, 
George.  If I can make repeated 

01:36:49.620 --> 01:36:51.863
transactions that means on each 
of those transactions I'm going 

01:36:52.413 --> 01:36:56.357
to start and stop those fragment
s as I execute each one in turn,

01:36:56.487 --> 01:36:57.783
 so that can be really 
expensive          expensive, 

01:36:57.784 --> 01:37:01.635
right.  So how do I go ahead and
 main      maintain the back 

01:37:01.636 --> 01:37:05.748
stack state without doing a lot 
of heavy-weight work as I start 

01:37:05.908 --> 01:37:10.213
and top the fragments along the 
way.That's a really big problem.

01:37:10.310 --> 01:37:12.723
  You have to create the view, 
tear them down again, inflation,

01:37:13.054 --> 01:37:15.991
 right.  It seems like a lot of 
unnecessary work.  It is a lot 

01:37:16.077 --> 01:37:25.091
of unnecessary work.  Sorry, 
guys.You want to fix that?

01:37:25.092 --> 01:37:26.924
   &gt;&gt; ADAM POWELL:  Sure.
   &gt;&gt; GEORGE MOUNT:  All right. 

01:37:26.925 --> 01:37:31.873
 Thanks, Adam.  So now we have 
this new thing here called set 

01:37:31.874 --> 01:37:35.571
resoredding ol loud.           
       sored        reorderring 

01:37:35.963 --> 01:37:38.788
allowed.  What it does is allows
 all of the execution to happen 

01:37:38.789 --> 01:37:42.608
all at once without change ing 
your fragment state.  And then 

01:37:42.609 --> 01:37:45.106
at the very end, we bring up all
 the fragments that need to be 

01:37:45.107 --> 01:37:48.081
brought up and tear down all the
 frag      fragments that need 

01:37:48.082 --> 01:37:51.106
to be torn down, and now your 
fragments don't have to go 

01:37:51.107 --> 01:37:54.047
through all of that oh, I got 
added, I got removed, I got 

01:37:54.256 --> 01:37:57.409
added, I got removed, so we can 
optimize this for you.ut you 

01:37:57.410 --> 01:38:03.366
have to watch out because if you
 expected a fragment to exist 

01:38:03.367 --> 01:38:06.442
that didn't -- that might have 
been optimize ed out, if you 

01:38:06.443 --> 01:38:10.024
expected it to go through this 
creation, it might not have done

01:38:10.321 --> 01:38:14.498
 that, so you have to watch out 
for this.  So you use this in 

01:38:14.499 --> 01:38:18.064
your applications.  It's great 
to use, but expect some slightly

01:38:18.065 --> 01:38:20.271
 different behavior than before

01:38:24.271 --> 01:38:30.060
., you might have seen in our 
application that as a user 

01:38:30.490 --> 01:38:32.805
clicks through the checkout 
screen, it was just pop, pop, 

01:38:32.806 --> 01:38:39.466
pop, pop.  The screens changed 
instantaneously, and that's not 

01:38:39.467 --> 01:38:46.235
very pleasant, so what we can do
 is we can add transitions.he 

01:38:46.236 --> 01:38:51.735
easiest ones to use are the basi
c transitions that come with 

01:38:51.994 --> 01:38:54.328
fragment, and there are three 
options, and this is done on the

01:38:54.329 --> 01:39:00.642
 transactions, you call a step 
                you call a set

01:39:01.300 --> 01:39:03.799
transition.  And the basic 
transitions are fade, open, and 

01:39:05.335 --> 01:39:08.972
close.And from this, it's really
 hard to see the difference  

01:39:09.065 --> 01:39:11.470
         differences, but you 
can see the fade has just a 

01:39:12.218 --> 01:39:14.389
simple cross fade, and then the 
open and close also have a fade 

01:39:14.390 --> 01:39:18.448
and zoom, so play with it a 
little bit, see what works well 

01:39:18.449 --> 01:39:23.805
in your application and see what
 you look best. provides a nice 

01:39:24.552 --> 01:39:26.865
subtle effect for your 
transitions

01:39:30.538 --> 01:39:31.075
            transitions.
   &gt;&gt; ADAM POWELL:  What if you 

01:39:31.076 --> 01:39:33.777
want to do something a little 
bit more in keeping with my own 

01:39:33.938 --> 01:39:35.866
apps design.
   &gt;&gt; GEORGE MOUNT:  Yeah, if 

01:39:35.867 --> 01:39:38.192
you want something a little more
 custom, then we can use 

01:39:38.193 --> 01:39:41.484
animations.  Animations in this 
case is the view animations that

01:39:41.781 --> 01:39:45.964
 allow you to change scale, rot
ation, 

01:39:50.580 --> 01:39:55.650
translation, alpha, so fade ing.
  So you can set those for -- 

01:39:55.774 --> 01:39:59.854
this is only on the support 
library, you can set those on 

01:40:00.099 --> 01:40:05.439
the view coming in, the fragment
 coming in, on a separate one 

01:40:05.572 --> 01:40:09.662
for the fragment being popped --
 or I'm sorry being removed, and

01:40:09.663 --> 01:40:12.278
 also the same things for the 
pop as well, the ones that are 

01:40:12.279 --> 01:40:15.137
being added and removed, so you 
can have different animations 

01:40:15.138 --> 01:40:19.033
for each of those.  And you can 
get them like this, which is 

01:40:19.034 --> 01:40:21.977
very nice, a slide effect, which
 you couldn't do with the basic 

01:40:21.978 --> 01:40:25.833
animations, with the basic 
transitions.

01:40:26.126 --> 01:40:32.339
   Now, if you're working with 
the framework fragments you can 

01:40:32.543 --> 01:40:35.852
do the same thing with animate 
ers, but they provide even more 

01:40:36.300 --> 01:40:39.729
benefit because now you can 
animate any property on the view

01:40:39.812 --> 01:40:43.675
.  That means you can have some 
really custom animations, 

01:40:43.781 --> 01:40:46.048
whatever you want to do.  It's 
great.

01:40:46.049 --> 01:40:50.166
   And what's better, is now you
 can also do that in the  

01:40:50.414 --> 01:40:52.995
Support Like    library.
   (Applause).

01:41:01.144 --> 01:41:05.119
added for the framework so that 
you can do this and set your 

01:41:05.120 --> 01:41:11.501
animations or animateors fl a 
style.  Now, a lot of you have 

01:41:11.629 --> 01:41:14.133
been using the activity 
transition, and you want to have

01:41:14.134 --> 01:41:18.958
 that work with fragments as 
well, so activity transitions 

01:41:18.959 --> 01:41:20.487
a.m.                  
transitions allows this great 

01:41:20.488 --> 01:41:25.780
ability to have a shared element
 change from one view to another

01:41:25.911 --> 01:41:30.656
, so in this case from one 
fragment to another, and it 

01:41:30.915 --> 01:41:34.886
works on activity transitions 
from lobbypop on.              

01:41:34.887 --> 01:41:37.679
lobby       lob lolly          
                  transitions 

01:41:37.680 --> 01:41:39.705
from lollypop on, it's very usef
ul.

01:41:39.706 --> 01:41:43.379
   We added the ability to do t
hat.  So for fragment, instead 

01:41:43.629 --> 01:41:46.019
of doing this on the transition,
 you do this on the fragment 

01:41:46.020 --> 01:41:49.195
itself.  You can set the views 
-- you can set the transition to

01:41:49.300 --> 01:41:55.528
 do on the views that are coming
 in, and this is for all the 

01:41:55.648 --> 01:41:59.626
views that are not the shared 
element, so that's the Enter T

01:41:59.851 --> 01:42:03.050
ransition.
   And the Shared Element Enter 

01:42:03.401 --> 01:42:05.443
Transition, this is the one you 
do on the view that is move ing.

01:42:05.595 --> 01:42:08.912
  This is our shared element, in
 this case I don't know what it 

01:42:08.913 --> 01:42:12.982
was.  The almond       almonds 
maybe.  And here this is a 

01:42:14.227 --> 01:42:16.605
combination of change bounds, 
change transform, and change 

01:42:16.749 --> 01:42:20.974
image trans       transform, too
 many things to fit on the slide

01:42:21.047 --> 01:42:24.868
, but that's what it is here.
   And then in the transaction, 

01:42:24.869 --> 01:42:29.305
we add the shared element 
itself.  And the shared element 

01:42:29.306 --> 01:42:32.219
is the view that's in that fr
agment, and then we have a 

01:42:32.220 --> 01:42:36.681
target name.  This name, this is
 a shared element transition 

01:42:36.851 --> 01:42:40.691
name, and this is a name that 
you've given the transition 

01:42:40.692 --> 01:42:43.827
element in the fragment that has
 not been inflated yet, so in 

01:42:43.828 --> 01:42:48.995
this case, it's in the My 
Fragment that's being pulled in.

01:42:50.654 --> 01:42:56.981
   And then question have our 
transition, which is great      

01:42:56.982 --> 01:43:04.134
great.  But something's wrong.  
What?  Can you see it?veryone 

01:43:04.135 --> 01:43:06.298
raise your hand if you can see 
it.  What's the problem with 

01:43:06.635 --> 01:43:09.408
this?  Okay.  A lot of you can 
see the problem.  All right.  

01:43:09.409 --> 01:43:12.478
Transition is only working one 
way.  Right.  It works great 

01:43:12.479 --> 01:43:16.377
getting into the detail view, 
but when we come back to that 

01:43:16.486 --> 01:43:20.194
main view with all of those 
other elements, you're not 

01:43:20.943 --> 01:43:24.275
seeing it, and why is that?
   Well, that main view is a 

01:43:24.370 --> 01:43:30.374
recycle er view, and what's 
happening is the recycle er view

01:43:30.375 --> 01:43:38.382
 will layout its views after the
 set adapter call is made.  So 

01:43:38.383 --> 01:43:41.411
if you wait for the layout call 
after this adapter call is made,

01:43:41.774 --> 01:43:45.349
 and the transition is coming in
 and saying, hey I want to up 

01:43:45.476 --> 01:43:48.932
the share, and it's not there.  
So what does it do?  It says oh,

01:43:49.106 --> 01:43:53.973
 give up, fade out.
   So in activity transition, 

01:43:53.974 --> 01:43:58.503
what do we do?  Well, it's 
great, we have a thing called 

01:44:00.121 --> 01:44:03.469
postpone ing the transition.  So
 postpone enter transition, and 

01:44:03.605 --> 01:44:09.078
when the views are ready, we 
call start postpone edentert

01:44:09.204 --> 01:44:11.580
ransition.  It gives you the 
ability to wait for view, come 

01:44:11.581 --> 01:44:16.077
on view, come on views, (  
(whistle ing) and when they're 

01:44:16.078 --> 01:44:19.490
all ready, then you say, go!
   So we want to do this for 

01:44:19.491 --> 01:44:25.644
fragments as well.  So here we 
go.  We can do it for fragments 

01:44:25.738 --> 01:44:29.052
          fragments, but there 
is one extra thing you need to 

01:44:29.053 --> 01:44:34.139
do.  You absolutely have to have
 the set reordering allowed 

01:44:34.140 --> 01:44:38.547
because for our short time while
 you're postpone ing, both 

01:44:38.548 --> 01:44:41.103
fragmentses are there.  They're 
both act                   

01:44:41.229 --> 01:44:44.062
                       fragments
 are there, they're both active,

01:44:44.201 --> 01:44:46.867
 and that's not what you expect,
 you expected one to move and 

01:44:46.868 --> 01:44:49.587
the other to be added.  So both 
views for both fragment         

01:44:49.588 --> 01:44:51.539
fragments are in the create ed 
state, so that's going to be a 

01:44:51.540 --> 01:44:56.416
little weird for you.        , 
so we want to make sure you know

01:44:56.417 --> 01:44:57.381
 you're getting into this 
situation.

01:44:57.382 --> 01:45:04.357
   So let's see how it's done in
 our application.  In my view, 

01:45:04.358 --> 01:45:09.251
now you can do this any time 
before the Oncreate view     

01:45:09.252 --> 01:45:12.001
view.  If you want to do a non-c
reate, whatever you want to do. 

01:45:12.387 --> 01:45:15.596
 You call postponeenter Tran
sition because I know at this 

01:45:15.597 --> 01:45:19.053
point, I'm going to do a 
recycle er view, and I know I 

01:45:19.054 --> 01:45:23.315
need to worry about the 
transitions there.

01:45:23.316 --> 01:45:26.765
   And because I love data bindi
ng, some you have might know 

01:45:26.766 --> 01:45:31.447
that, I love data binding, and 
we have a few others here too.  

01:45:31.448 --> 01:45:34.383
That's good too, thank you Adam,
 if you haven't seen that talk, 

01:45:34.384 --> 01:45:37.134
you should go back and watch it.
  We're using that.

01:45:37.404 --> 01:45:41.505
   So here I'm sitting         
setting the adapter for the 

01:45:41.677 --> 01:45:43.884
recycle er view     view.  Now 
I'm setting the adapter and now 

01:45:43.885 --> 01:45:48.565
I have to wait for the layout.  
So I'm waiting for the layout, 

01:45:48.566 --> 01:45:57.760
and then the listener, I call 
startpostponedentertransition.  

01:45:57.761 --> 01:46:02.303
Now my transition is ready and 
it will just go on ahead and -- 

01:46:02.304 --> 01:46:06.269
I think I skipped a slide.  
(Laughing).

01:46:06.270 --> 01:46:12.236
   Okay.  So it works.  
(Laughing).

01:46:12.462 --> 01:46:14.016
   &gt;&gt; ADAM POWELL:  All right.  
So one of the other features -- 

01:46:14.017 --> 01:46:15.729
move ing along to something 
completely different.  One of 

01:46:15.730 --> 01:46:18.913
the other features we get a lot 
of questions are the start 

01:46:18.914 --> 01:46:22.203
retain instance method on 
fragments, you remain        

01:46:22.204 --> 01:46:25.969
retain an instance across 
activity, deconstruction, and 

01:46:26.822 --> 01:46:28.996
creation, cause something like a
 configuration change.

01:46:28.997 --> 01:46:32.301
   So, this means that the 
object instance itself of the 

01:46:32.302 --> 01:46:34.775
fragment that you've marked this
 way is transferred across the 

01:46:34.854 --> 01:46:38.208
parent recreation, so anything 
that you put there is moved 

01:46:38.396 --> 01:46:41.927
along with it, so full object, 
you don't have to serialize this

01:46:42.100 --> 01:46:48.611
 into a parcellable or across or
 safe instance state.he 

01:46:48.612 --> 01:46:50.831
important thing to remember if 
you're doing this is this 

01:46:50.989 --> 01:46:53.019
doesn't happen if the process is
 recreate ed.  Your objects 

01:46:53.728 --> 01:46:55.728
aren't there, be so you need to 
be a little careful about this. 

01:46:55.916 --> 01:46:58.545
 You need to make sure you can 
still restore from instant state

01:46:58.691 --> 01:47:01.652
 if you have to, even though in 
the common case you may still 

01:47:01.742 --> 01:47:03.715
have the full objects that you 
may have create ed in the first 

01:47:03.716 --> 01:47:08.542
place. this is a replacements 
for the old on retain 

01:47:09.390 --> 01:47:11.668
nonconfiguration instance method
 that was on activity, in fact, 

01:47:11.669 --> 01:47:14.283
this same mechanism is used to 
implement the fragment         

01:47:14.284 --> 01:47:16.453
fragments version of this, but 
what's a little more interesting

01:47:16.454 --> 01:47:19.002
 is that this mechanism is right
 now the back     backbone of 

01:47:19.003 --> 01:47:21.451
the new view model component 
that we've been talking about 

01:47:21.452 --> 01:47:26.373
early ier here, so the view 
models are actually saved within

01:47:26.556 --> 01:47:29.902
 a retain instance fragment to s
huffle them across from one acti

01:47:30.207 --> 01:47:33.761
vity to the next.
   And this just kind of goes to

01:47:33.905 --> 01:47:35.946
 show the types of 
infrastructure you can build on 

01:47:36.100 --> 01:47:38.522
top of a retain instance 
fragment, it's something a 

01:47:38.946 --> 01:47:41.579
little bit more on the abstract 
end of things, so we end up 

01:47:41.580 --> 01:47:44.592
getting questions about hey, 
what's this good for, and well 

01:47:44.672 --> 01:47:46.688
this is a pretty good example.
   Just like we talked about 

01:47:46.924 --> 01:47:49.183
with view models, it means that 
there is a few things that you 

01:47:49.341 --> 01:47:54.147
really need to avoid.  In this 
case, don't put views in or 

01:47:54.148 --> 01:47:56.821
retain instance fragment unless 
you want to do a lot of manual b

01:47:57.054 --> 01:47:59.474
ookkeeping.  Technically you can
 kind of get away with it if 

01:47:59.475 --> 01:48:02.562
you're really careful, but make 
sure you release all of your 

01:48:02.563 --> 01:48:05.417
references and on destroy view 
of that particular fragment, so 

01:48:05.418 --> 01:48:08.977
on and so forth, but really it 
ends up being best to just kind 

01:48:08.978 --> 01:48:12.563
of avoid it.  We'll do a few 
more patterns later in the talk 

01:48:12.683 --> 01:48:16.051
here on what you can do instead.
   Context, specifically 

01:48:16.628 --> 01:48:19.085
activity contexts.  We all know 
why you don't want to stave  

01:48:19.173 --> 01:48:21.638
     save an instance of the 
activity longer than the lifet

01:48:21.791 --> 01:48:24.341
ime of that activity itself, but
 the thing that really tends to 

01:48:24.342 --> 01:48:28.167
catch people is call-back 
reference, so if you register a 

01:48:28.620 --> 01:48:32.692
listener or some kind of call-
back with a fragment and that is

01:48:32.693 --> 01:48:36.275
 going to outlive the container,
 it's really easy to accidently 

01:48:36.276 --> 01:48:39.256
close over that context that you
 had and have the activity still

01:48:39.257 --> 01:48:48.206
 outlast the original host.So 
child fragments are something 

01:48:48.207 --> 01:48:51.501
that hit a lot of people hard a 
few years ago, because frankly, 

01:48:51.502 --> 01:48:53.987
we had a lot of bugs around 
them.  They were create ed to 

01:48:53.988 --> 01:48:56.417
solve a pick problem, and that 
was dependency management within

01:48:56.418 --> 01:49:00.879
 a particular activity.So, co
nsider this case.  You get a 

01:49:01.130 --> 01:49:04.952
fragment that has a view page 
er, pretty common, right.  The 

01:49:04.953 --> 01:49:08.434
viewpage er uses a fragment page
 er adapter because that's a 

01:49:08.435 --> 01:49:12.644
pretty easy way to use a viewp
age er, and then you remove the 

01:49:12.645 --> 01:49:14.163
page er fragment.  Now we have a
 problem.

01:49:14.164 --> 01:49:17.463
   So, what actually happens in 
that case?  You've got all the 

01:49:17.754 --> 01:49:21.669
fragments added by the page er 
adapter, but the host fragment 

01:49:22.300 --> 01:49:24.699
or conceptual host fragment that
 has the viewpage er itself was 

01:49:25.074 --> 01:49:27.236
removed, and now something has 
to be in charge of remove ing 

01:49:27.638 --> 01:49:29.723
the individual page fragments, 
and this was something that 

01:49:29.724 --> 01:49:32.510
really kind of meant to show 
that a single collection of 

01:49:32.646 --> 01:49:35.604
fragments is insufficient. fact,
 when the Fragment APIs were 

01:49:35.728 --> 01:49:38.752
first rolling out for a lot of 
internal developers around 

01:49:39.087 --> 01:49:40.934
honeycomb this is one of the 
first questions that we got, and

01:49:40.935 --> 01:49:43.938
 it took us quite a while to 
come back and address this.  Of 

01:49:44.059 --> 01:49:47.223
what happens when you do have 
dependencies in between fragment

01:49:47.340 --> 01:49:49.340
s?
   And part of the reason why 

01:49:49.730 --> 01:49:52.008
this was such a pain is because 
we didn't have any ordering 

01:49:52.216 --> 01:49:54.727
guarantees around fragments 
being createssed, and       

01:49:54.836 --> 01:49:57.768
          creates         
create ed, and what's worse is a

01:49:57.906 --> 01:50:00.763
 lot of times this would only 
come up much, much later in the 

01:50:00.764 --> 01:50:02.597
process.
   Just because you added 

01:50:02.598 --> 01:50:04.928
fragments in one particular 
order, you can control that 

01:50:05.058 --> 01:50:07.554
order as you're running that and
 kind of running the initial 

01:50:08.065 --> 01:50:10.844
transactions that build up that 
state, but when your process die

01:50:11.004 --> 01:50:15.278
, and we restore that fragments 
from instant state later, the 

01:50:15.409 --> 01:50:18.244
order of that recreation is 
always undefined, depending on 

01:50:18.464 --> 01:50:20.568
what all may have happened 
throughout the lifetime of your 

01:50:20.569 --> 01:50:23.738
activity before, just kind of do
 some artifacts of internal book

01:50:24.095 --> 01:50:26.149
keep         bookkeeping, this 
was something that could cause 

01:50:26.150 --> 01:50:30.654
these things to be reordered in 
terms of which one would get on 

01:50:30.655 --> 01:50:33.272
create first and so on and so 
forth and it made it difficult 

01:50:33.273 --> 01:50:35.273
to connect any sort of shared 
state.

01:50:35.723 --> 01:50:38.896
   The sort of shared state is 
easy ier to handle with the view

01:50:38.897 --> 01:50:41.292
 model system that we showed 
early ier, but at the time we 

01:50:41.422 --> 01:50:43.690
really didn't have a good 
solution to this problem.

01:50:43.691 --> 01:50:47.101
   So, one of the other things 
that was kind of a pain is the 

01:50:48.152 --> 01:50:50.555
deferred transaction commits 
that have been common ever since

01:50:50.773 --> 01:50:55.918
 -- or up until we added the C
ommit Now method on method 

01:50:55.919 --> 01:50:58.884
transaction, the nice thing and 
the     and the reason it was 

01:50:59.034 --> 01:51:02.624
done in the first place is to 
avoid re-enterrant calls.  You 

01:51:02.763 --> 01:51:04.942
didn't have to worry about one 
particular transaction being 

01:51:05.264 --> 01:51:07.313
half executed and then starting
          starting another 

01:51:07.314 --> 01:51:09.964
transaction as a result of it.
   But this really did have a 

01:51:10.051 --> 01:51:13.576
cost, and I think that if you're
 in this room right now, you've 

01:51:13.577 --> 01:51:15.635
probably experience ed some of 
the costs of this.  Raise your 

01:51:15.773 --> 01:51:18.859
hand if you called execute pendi
ng transactions to fix a bug?  

01:51:18.860 --> 01:51:23.173
Yeah.  That's a lot of hands.
   So, this is one of those 

01:51:23.174 --> 01:51:29.507
things that ends up being really
 kind of difficult to work with.

01:51:29.592 --> 01:51:34.498
  So, child fragment dependency
 ies work out really well 

01:51:34.724 --> 01:51:36.724
because they solve a lot of 
these particular issues.  It's a

01:51:36.951 --> 01:51:40.210
 separate fragment manager so 
you don't get the re-enterrant 

01:51:40.351 --> 01:51:43.090
cases no matter what.  If you go
 ahead and use commit now on a 

01:51:43.220 --> 01:51:45.612
bunch of these things, you don't
 have to worry about your parent

01:51:45.613 --> 01:51:47.703
 being in a potentially 
inconsistent state as you're 

01:51:47.914 --> 01:51:50.268
doing this because you're all 
working within your own local 

01:51:50.329 --> 01:51:51.574
unit.
   All of these things are added

01:51:51.575 --> 01:51:55.183
 and removed as a unit, which 
means it solves the viewpage er 

01:51:55.184 --> 01:51:57.613
problem.  It means if you remove
 the container           

01:51:57.614 --> 01:51:59.828
containing fragment you don't 
have to care about the 

01:51:59.829 --> 01:52:02.599
implementation details of the 
fragment.  This kind of seems 

01:52:02.714 --> 01:52:07.268
like one of those duh things in 
behind        behindsight,   

01:52:07.391 --> 01:52:09.499
           behind        
hindsight           hindsight 

01:52:09.847 --> 01:52:12.834
and it's guaranteed to be 
restored.  This is super 

01:52:13.357 --> 01:52:15.357
important because now you can 
rely on when things are actually

01:52:15.669 --> 01:52:17.937
 restored. don't have to worry 
about these ordering things that

01:52:17.938 --> 01:52:21.696
 are out of your control.
   But perhaps most importantly,

01:52:22.032 --> 01:52:24.677
 the implementation details, 
again, don't leak into your 

01:52:24.795 --> 01:52:26.795
surrounding containers

01:52:29.063 --> 01:52:32.271
           containers.  So, in 
conclusion, many of you may have

01:52:32.352 --> 01:52:37.331
 run into a lot of particular 
issues around child fragments.  

01:52:37.332 --> 01:52:40.559
Please go and try version 26.  
We have fixed more and more 

01:52:40.560 --> 01:52:43.200
issues around this, speferl  
       specifically around 

01:52:43.417 --> 01:52:46.545
inflate ing child fragments.his 
is one of my favorite uses of 

01:52:46.546 --> 01:52:49.656
this.  We talked early ier about
 using fragments as very course-

01:52:50.224 --> 01:52:52.307
grained applications within your
 destination, something that 

01:52:52.738 --> 01:52:57.036
takes up an entire UI pane of 
your app, but nesting within 

01:52:57.373 --> 01:52:59.764
other fragments, even if you 
inflate them from one of these 

01:53:00.091 --> 01:53:02.681
course er grained navigation 
destination, it just kind of 

01:53:02.682 --> 01:53:05.990
works, like you don't have to 
worry about taking care of all 

01:53:06.436 --> 01:53:09.287
these other sort of lifecycle 
issues, and it lets you build 

01:53:09.288 --> 01:53:11.935
smarter and encapsulate ed 
components.

01:53:12.215 --> 01:53:16.258
   We always get this question, 
too.  Hey, do I build a V group 

01:53:16.421 --> 01:53:19.691
or a fragment?  And there is a 
lot of ink spilled and keyboards

01:53:20.238 --> 01:53:24.544
 smashed making these particular
 arguments           arguments 

01:53:24.951 --> 01:53:28.655
online.I never know what to do 
with this, building a V group or

01:53:28.656 --> 01:53:32.316
 fragment, I always tell people,
 just use V groups.

01:53:32.317 --> 01:53:35.282
   &gt;&gt; ADAM POWELL:  Exactly so, 
you know, excuse me, you said 

01:53:35.424 --> 01:53:39.017
the cross on the streams was bad
, but so for this it's 

01:53:39.423 --> 01:53:44.156
essentially as follows for the 
rule of thumb.  Views should 

01:53:44.437 --> 01:53:46.850
only be responsible for 
displaying information and 

01:53:47.402 --> 01:53:50.000
publishing direct user 
interaction events.  These end 

01:53:50.253 --> 01:53:55.720
up being very low-level events, 
button was schikd or    clicked 

01:53:56.108 --> 01:53:59.143
or user scrolled something, or 
responsible for drawing text or 

01:53:59.144 --> 01:54:00.714
other parts that are user 
interaction.

01:54:00.715 --> 01:54:04.776
   Whereas fragments integrate 
with the surrounding life     

01:54:04.777 --> 01:54:06.782
lifecycle and may be aware of 
other app components.  This is 

01:54:06.874 --> 01:54:10.055
really what gives context to 
everything you're doing in your 

01:54:10.182 --> 01:54:13.840
UI, you mind bind to a service, 
you might communicate to the 

01:54:13.841 --> 01:54:17.377
data model, performing a 
database query, so on and so 

01:54:17.601 --> 01:54:19.601
forth.
   So, you should never use a 

01:54:19.789 --> 01:54:22.849
fragment when a view will do, 
but you also want to make sure 

01:54:23.069 --> 01:54:25.696
you're not adding outside 
dependency ies to your views.  

01:54:25.697 --> 01:54:28.082
That's definitely the code 
smell, if you ever find yourself

01:54:28.083 --> 01:54:30.927
 doing something like trying to 
bind to a service from a view 

01:54:31.362 --> 01:54:35.809
implementation or trying to make
 a network call, or again, 

01:54:35.810 --> 01:54:37.840
trying to integrate with 
anything that's outside of the 

01:54:37.841 --> 01:54:40.516
realm of just that one 
individual view.

01:54:40.517 --> 01:54:43.364
   But that means that there is 
a hole.  It means that you can't

01:54:43.365 --> 01:54:46.888
 build just something that's 
simple as like a completely 

01:54:49.106 --> 01:54:51.843
self-contained "like" button 
that you can stick in the middle

01:54:52.063 --> 01:54:55.429
 of one of your layouts and 
treat it and forget.  Give it 

01:54:55.774 --> 01:54:58.179
some parameters and go.
   Well, this is one of the r

01:54:58.428 --> 01:55:02.256
easons why you can inflate 
fragments.  In this case, we're 

01:55:02.257 --> 01:55:05.661
showing that you can define 
parameters to these that you can

01:55:05.751 --> 01:55:09.838
 place in line.  We can go ahead
 and inflate arguments in a way 

01:55:10.109 --> 01:55:14.407
that -- excuse me -- in a way 
that allows you to do this 

01:55:14.408 --> 01:55:16.762
without having a lot of very 
heavy weight integration.  You 

01:55:16.763 --> 01:55:19.103
don't have to go and find it, 
configure it separately.  You 

01:55:19.257 --> 01:55:22.075
can just do it in line.
   So one of the things that 

01:55:22.076 --> 01:55:25.087
made this really difficult to do
 in the past was kind of, again,

01:55:26.094 --> 01:55:29.096
 just artifact of history in 
that you couldn't actually set 

01:55:29.314 --> 01:55:31.314
fragment argument         
arguments           argument

01:55:31.562 --> 01:55:34.053
         arguments, that 
arguments bundle, after the 

01:55:34.245 --> 01:55:37.303
fragment had been added to a 
fragment manager, so now we've 

01:55:37.304 --> 01:55:40.715
relaxed that and we've said that
 now fragment arguments can be 

01:55:40.716 --> 01:55:43.972
change ed any time the state 
isn't saved, include ing during 

01:55:43.973 --> 01:55:46.891
inflation, so there is a case 
where after you rotate or so on 

01:55:47.132 --> 01:55:50.030
and so forth, and we're 
reconnecting inflated fragments,

01:55:50.173 --> 01:55:53.882
 which is again something that 
we do automatically, then you 

01:55:54.069 --> 01:55:56.764
can run into this case where 
we've already restored that 

01:55:57.272 --> 01:55:59.514
fragment, we're trying to hook i
t back up again, but it's 

01:55:59.615 --> 01:56:02.399
already added, which means that 
you can't do what the natural 

01:56:02.525 --> 01:56:05.358
thing is, which is to represent 
all of those arguments that you 

01:56:05.728 --> 01:56:08.578
may inflate as arguments in the 
bundle, so that way you have, 

01:56:08.830 --> 01:56:11.196
basically, a single source of 
truth for all of the 

01:56:11.738 --> 01:56:13.397
configuration parameters of that
 fragment.

01:56:13.398 --> 01:56:19.340
   Well, now you can.ait a 
second here.  Go back.  This is 

01:56:20.122 --> 01:56:22.122
not a state safe thing 

01:56:25.619 --> 01:56:26.394
--
   &gt;&gt; ADAM POWELL:  Oh, yeah, so

01:56:26.395 --> 01:56:28.952
 I don't know where this comes 
from, but people apparently try 

01:56:28.953 --> 01:56:33.661
to commit transactions when the 
state is already saved.hy would 

01:56:33.662 --> 01:56:35.309
they do that?
   &gt;&gt; ADAM POWELL:  I don't know

01:56:35.310 --> 01:56:37.512
.  Because they can't tell.  
That might have been yet, yeah, 

01:56:37.759 --> 01:56:41.284
so we added a simple Git around 
this so you know when it happens

01:56:41.413 --> 01:56:45.165
, and it makes write ing lifec
ycle components that makes sure 

01:56:45.166 --> 01:56:47.619
that you don't try to commit 
fragment transactions when it's 

01:56:47.620 --> 01:56:50.489
not valid to do so.  There is  
          It's a whole electroof

01:56:50.647 --> 01:56:57.283
 a            heck of a lot easy
 ier.  Thank you..  

01:56:57.284 --> 01:56:59.692
   So again, part of what we're 
trying to do here is create a 

01:56:59.693 --> 01:57:01.802
much better layered 
infrastructure.  We've 

01:57:02.039 --> 01:57:04.341
traditionally hidden a lot of 
these internals in some of these

01:57:04.342 --> 01:57:07.491
 Android components such that 
only the internal components are

01:57:07.798 --> 01:57:10.957
 twittle ing them, which means 
as soon as you all have a more 

01:57:10.958 --> 01:57:13.608
complicate ed case you're trying
 to handle, we've made it very 

01:57:13.609 --> 01:57:15.416
difficult for you to do this in 
the past     past, so we tried 

01:57:15.417 --> 01:57:18.002
to open a lot more of those 
things up, make these a little 

01:57:18.690 --> 01:57:20.690
easy ier to inspect from your 
own code and deal with the cases

01:57:20.755 --> 01:57:24.506
 that arrived         arise that
 we didn't think of.So, in this 

01:57:24.715 --> 01:57:28.338
case, the pattern that we really
 kind of want to encourage is 

01:57:28.553 --> 01:57:31.583
mapping fragment arguments to 
attributes for those UI fragment

01:57:31.819 --> 01:57:34.533
s.  Again, this gives you kind 
of a single source of truth  

01:57:34.972 --> 01:57:37.039
     truth.
   So let's tb ahead and go     

01:57:37.187 --> 01:57:40.935
         go ahead to an example 
of this.  In this scais,   

01:57:41.087 --> 01:57:47.223
          case,       this case,
 we have a few column-base the 

01:57:47.224 --> 01:57:49.977
extensions that make this a 
little easy ier to handle.  In 

01:57:49.978 --> 01:57:54.116
this case, we have one utility 
method that is just with styled 

01:57:54.434 --> 01:57:56.845
attributes here, so many of you 
have dealt with inflate ing 

01:57:56.846 --> 01:58:01.962
attributes to views, and you 
know, you have to get it typed 

01:58:02.182 --> 01:58:05.315
away, recycle it afterwards, and
 it's easy to wrap these up 

01:58:05.440 --> 01:58:08.812
inside some extension functions,
 similarly, we have this simple 

01:58:08.979 --> 01:58:12.411
little thing.  Hey, is there a 
bundle there for arguments 

01:58:12.492 --> 01:58:15.850
already, if so, reuse it, 
otherwise, create a new one.

01:58:15.851 --> 01:58:21.713
   So, these are the sorts of 
things that it really adds to 

01:58:21.714 --> 01:58:24.665
the Fragment API, all of the 
kind of things that are kind of 

01:58:24.666 --> 01:58:27.166
a pain in the neck to do with 
fragment, you can make some 

01:58:27.536 --> 01:58:30.507
simple extensions that were 
really hard to do before, but 

01:58:31.591 --> 01:58:33.829
for example, one of my favorite 
features for something like this

01:58:34.000 --> 01:58:36.949
 is to use property delegates to
 deal with argument, and you can

01:58:37.168 --> 01:58:39.674
 wrap even more of this stuff 
and just basically treat them as

01:58:40.021 --> 01:58:47.041
 normal property ies on your 
fragment objects.So, putting a 

01:58:47.130 --> 01:58:51.522
bunch of this together, fragment
s help you maintain more of a 

01:58:51.523 --> 01:58:56.988
content and Chrome separation.  
Give you the ainlt       ability

01:58:56.989 --> 01:59:00.068
 to keep your content pages as 
fully encapsulate ed items 

01:59:00.361 --> 01:59:03.442
without disturbing the rest of 
the UI around it.  You get rich

01:59:03.648 --> 01:59:10.031
er transitions.  You bet better 
shared components because you 

01:59:10.376 --> 01:59:13.349
can reuse a lot of thee things 
and you don't have to reinitial 

01:59:13.702 --> 01:59:16.576
lies them all of them separately
 and you can better encapsulate 

01:59:16.577 --> 01:59:19.029
your dependency, so you don't 
necessarily have to leak all of 

01:59:19.030 --> 01:59:21.754
these things to the surrounding 
host.

01:59:25.953 --> 01:59:29.964
And, thank you very much for com
ing.  Anyone who has questions, 

01:59:30.218 --> 01:59:32.844
be please come to one of the 
mics up in the center aisles and

01:59:32.845 --> 01:59:36.944
 we'll be glad to take them.
   (Applause). 

01:59:36.945 --> 01:59:39.725
   &gt;&gt; AUDIENCE MEMBER:  Hello.  
Thank you for the great talk.  

01:59:39.726 --> 01:59:42.963
So, my question is about the 
first part of the presentation, 

01:59:43.091 --> 01:59:45.091
like for example,

01:59:48.782 --> 01:59:53.415
 the page where you talked about
 manage ing the best take, so to

01:59:53.682 --> 01:59:56.276
 be honest, I have not been 
using fragments a lot, and 

01:59:57.144 --> 02:00:00.923
recently, and I am doing the 
same thing with activities, you 

02:00:00.924 --> 02:00:06.665
know, manage ing the back stack 
and so you can compare a little 

02:00:06.816 --> 02:00:12.003
bit these two approaches?  Why 
should we use fragments for that

02:00:12.004 --> 02:00:18.507
 now but not just others.king 
sure you have any persistent 

02:00:18.508 --> 02:00:20.951
Chrome is obviously one item of 
it.  But one of the other things

02:00:21.026 --> 02:00:24.099
 that is convenient when you use
 fragments so this is the 

02:00:24.100 --> 02:00:27.693
ability to pop several layers of
 the stack at once.  We were 

02:00:27.811 --> 02:00:31.659
able to pop the entirety of the 
checkoutflow as one single unit 

02:00:31.757 --> 02:00:34.850
rather than having to, say, 
return are a result to eek prior

02:00:34.851 --> 02:00:37.653
 fragment to say, yep, I'm 
finished and you should finish t

02:00:37.777 --> 02:00:41.128
oo, yep, I'm finished and you 
should too, and it makes it 

02:00:41.227 --> 02:00:43.516
easy ier to handle those sort of
 cases.  Anything you want to 

02:00:43.632 --> 02:00:45.342
add to that.
   &gt;&gt; GEORGE MOUNT:  Resources 

02:00:45.343 --> 02:00:48.794
when you're dealing with just a 
single activity, because when 

02:00:48.795 --> 02:00:52.830
you have multiple activities 
they're all in the -- all in 

02:00:52.831 --> 02:00:56.425
memory while you're going 24R50U
 your             through your 

02:00:56.426 --> 02:00:57.768
whole application.
   &gt;&gt; AUDIENCE MEMBER:  Thank 

02:00:57.769 --> 02:01:01.392
you.You're welcome.
   &gt;&gt; AUDIENCE MEMBER:  Hi, .  I

02:01:01.462 --> 02:01:05.833
 would like to ask about the 
fragment transactions, so do you

02:01:05.834 --> 02:01:09.156
 guys have plans to use replace 
fragment instead of add 

02:01:09.878 --> 02:01:14.091
fragments?  Because the problem 
is, like sometimes I find out --

02:01:14.268 --> 02:01:18.061
 I mean, is this just similar --
 I mean, the behavior is 

02:01:18.062 --> 02:01:22.318
different, right, but the 
problem is when you do the pop 

02:01:22.558 --> 02:01:29.710
stack of the fragments, there is
 no good way to actually figure 

02:01:29.711 --> 02:01:33.916
like when you try to update a 
toolbar or action bar.  So I 

02:01:33.917 --> 02:01:37.270
just wonder, like, what's the --
 what's the recommendation in 

02:01:37.472 --> 02:01:44.314
terms of like manage ing when 
you pop up the stack from the 

02:01:44.315 --> 02:01:48.467
fragment manager, how to 
maintain, like, the changes when

02:01:48.952 --> 02:01:53.777
 you pop out -- like the changes
 with the toolbar

02:01:57.109 --> 02:02:00.578
.ke, I start using more of the 
replace fragment instead of like

02:02:00.741 --> 02:02:05.171
 add fragment mainly because of 
that, so I wonder if you guys 

02:02:05.172 --> 02:02:10.146
have some recommendation on how 
to handle the situation? &gt;&gt; ADAM

02:02:10.147 --> 02:02:12.302
 POWELL:  Yeah, I mean, if 
you're using the    the -- if 

02:02:12.420 --> 02:02:15.159
you're using the options menu 
from each of the fragments to 

02:02:15.224 --> 02:02:17.998
change some of the options items
 in the tool     toolbar, some 

02:02:18.116 --> 02:02:21.209
of that is kind of handle ed 
automatically for you.  I 

02:02:21.210 --> 02:02:23.691
believe there is still a API to 
change a title within the 

02:02:24.845 --> 02:02:27.840
transaction itself, so you can 
-- this is how we implemented 

02:02:27.941 --> 02:02:31.727
some of the fragment breadcrumbs
 widget, that I think is still 

02:02:31.728 --> 02:02:33.931
available in the source 
repository if you want to refer 

02:02:34.087 --> 02:02:36.957
to to in terms of change ing 
things like the title, but in c

02:02:37.686 --> 02:02:40.161
ases like that, it's basically 
what you can do is you can 

02:02:40.403 --> 02:02:44.386
listen to the -- you can add a 
back stack change listener to 

02:02:44.387 --> 02:02:46.867
the fragment list itself.  You 
get a call back any time the 

02:02:46.868 --> 02:02:50.520
back stack changes.  Of you can 
go and inspect the top-most 

02:02:50.703 --> 02:02:52.977
element of the back stack and 
make some changes based on that.

02:02:53.225 --> 02:02:55.634
  Alternatively, you can have 
the fragment publish a 

02:02:56.156 --> 02:02:59.258
particular event either using --
 by change ing a shared view 

02:02:59.362 --> 02:03:03.394
model, for example, to change a 
title or something as it starts 

02:03:03.395 --> 02:03:05.713
versus stops.
   &gt;&gt; AUDIENCE MEMBER:  Okay.  

02:03:05.714 --> 02:03:09.962
Yeah.  Thanks.
   &gt;&gt; AUDIENCE MEMBER:  So the 

02:03:10.323 --> 02:03:13.777
child fragment manager has a 
back stack of its own currently,

02:03:13.778 --> 02:03:16.399
 but by default it doesn't do 
anything when you press the back

02:03:16.637 --> 02:03:19.108
 button.  Have you given any 
thought of what you can do with 

02:03:19.338 --> 02:03:22.054
the back stack there or what 
you're supporting in terms of 

02:03:22.055 --> 02:03:29.111
the back stack?I could not have 
planted another question and 

02:03:29.736 --> 02:03:31.861
this is another thing this 
escape ed our slides.  We went 

02:03:31.862 --> 02:03:35.482
ahead and added a new method, 
should be in V26 called set 

02:03:35.483 --> 02:03:37.975
primary navigation fragment, and
 what that does is it's 

02:03:38.082 --> 02:03:40.716
something, you can actually 
         also fetch it back out 

02:03:41.063 --> 02:03:44.024
but it will debt gait things 
like the back button down to a 

02:03:44.025 --> 02:03:46.536
child fragment and that will 
train all the Charlie deep, so 

02:03:46.537 --> 02:03:49.665
as beep as you may want to go 
with that, then that attempt to 

02:03:49.848 --> 02:03:52.919
pop the back stack will 
propagate all the way down and 

02:03:53.005 --> 02:03:56.661
it won't be until the bottom-m
ost fragment has nothing else to

02:03:56.972 --> 02:04:00.378
 pop that the parent will be 
handle ing the pop operation.  

02:04:00.379 --> 02:04:04.764
You'd         Awd     Thanks.
   &gt;&gt; AUDIENCE MEMBER:  Thank 

02:04:04.765 --> 02:04:07.242
you so much for the amazing 
talk.  I did have a question 

02:04:07.580 --> 02:04:11.334
about child fragments, so in my 
previous attempt I tried to 

02:04:11.335 --> 02:04:15.424
inflate a map fragment inside a 
fragment, and it added it to the

02:04:15.842 --> 02:04:20.536
 fragment manager of the parent 
fragment.

02:04:20.623 --> 02:04:23.776
   &gt;&gt; ADAM POWELL:  So, there is
 -- when was previously  

02:04:23.943 --> 02:04:27.313
         previously, I'm curious
?Previously was about three 

02:04:27.455 --> 02:04:31.397
weeks ago.Three weeks ago?  
There are two fragment managers 

02:04:31.398 --> 02:04:35.093
that a fragment has.  One is its
 own fragment manager and one is

02:04:35.226 --> 02:04:39.096
 the child frag am manager.  
There is a Git fragment manager 

02:04:39.403 --> 02:04:42.923
and Git child fragment manager, 
so depending what you're looking

02:04:42.924 --> 02:04:49.548
 to do.ut if you use the load --
 if you use the on create view 

02:04:49.793 --> 02:04:52.661
method then any fragment tags 
that that creates should be 

02:04:52.889 --> 02:04:55.267
added to the child fragment m
anager, if you've come across a 

02:04:55.456 --> 02:04:58.914
case where that's not happening,
 please see me after because we 

02:04:59.090 --> 02:05:01.472
want to fix it.
   &gt;&gt; GEORGE MOUNT:  We will be 

02:05:01.473 --> 02:05:04.165
in the sandbox, if we don't get 
to questions, we'll be in the 

02:05:04.338 --> 02:05:07.689
sandbox in Building C.  Yeah.  
Definitely.

02:05:08.041 --> 02:05:10.195
   &gt;&gt; AUDIENCE MEMBER:  Thanks 
for an    an amazing talk, 

02:05:10.556 --> 02:05:13.227
first.  My question is more of a
 best practice question.  I have

02:05:13.228 --> 02:05:17.244
 like this big fragment that 
when a user pushes        pushes

02:05:17.487 --> 02:05:20.965
 a but the., inflates -- or you 
get a transaction and you get a 

02:05:20.966 --> 02:05:23.657
child fragment in the middle of 
the big practicing am    

02:05:23.768 --> 02:05:26.125
           fragment and then 
when the user pushes another 

02:05:26.266 --> 02:05:29.354
button, I replace the whole 
thing to get like to a 

02:05:29.577 --> 02:05:33.189
subscreen.  Right?  And as soon 
as I pop the subscreen I get 

02:05:33.372 --> 02:05:39.559
back to the main fragment, and 
my question is, I'm not too sure

02:05:39.560 --> 02:05:43.304
 how the best practice is to 
remove or prevent when popping 

02:05:43.517 --> 02:05:46.611
and coming from -- when pop    
popping and coming back to 

02:05:46.612 --> 02:05:53.199
restore the child fragment I 
just edit because, yeah, the 

02:05:53.330 --> 02:05:55.972
fragment -- the child fragment 
manager automatically reinflight

02:05:56.974 --> 02:06:00.702
         inflates and puts the 
small child fragment and I don't

02:06:00.923 --> 02:06:07.282
 want that, so what I do current
ly is on the view of my (?) 

02:06:07.283 --> 02:06:11.714
fragment, is I remove my child 
fragments with (?) and I don't 

02:06:11.715 --> 02:06:16.452
know what to do there so I'm not
 too sure how to prevent from 

02:06:17.845 --> 02:06:20.319
getting a new frag      
fragment.

02:06:20.320 --> 02:06:21.639
   &gt;&gt; ADAM POWELL:  Okay.  I'm 
trying to understand the case a 

02:06:21.640 --> 02:06:24.936
little beir      better.  So you
 have your overall hosts either 

02:06:24.937 --> 02:06:28.795
at your activity or some similar
 grandparent fragment.

02:06:28.796 --> 02:06:30.796
   &gt;&gt; AUDIENCE MEMBER:  Sleetly.
  Yeah.  &gt;&gt; ADAM POWELL:  You're

02:06:30.833 --> 02:06:33.896
 remove ing a fragment within 
that host.

02:06:34.009 --> 02:06:36.642
   &gt;&gt; AUDIENCE MEMBER:  Okay.  
Inflate a small fragment in my 

02:06:36.862 --> 02:06:39.270
big one, right.  Let's say it's 
just a view element or 

02:06:40.797 --> 02:06:43.270
something.
   &gt;&gt; ADAM POWELL:  Sure.ow I 

02:06:43.457 --> 02:06:46.189
change to another B fragment, 
like okay, I replace the whole 

02:06:47.018 --> 02:06:50.016
thing and pop and come back, and
 I don't want the small fragment

02:06:50.149 --> 02:06:54.074
s to reappear         reappear, 
and I'm not too sure how to 

02:06:54.239 --> 02:06:57.682
prevent the system from doing 
that.

02:06:57.885 --> 02:06:59.453
   &gt;&gt; GEORGE MOUNT:  I would say
 during navigation, that's when 

02:06:59.454 --> 02:07:02.388
you would remove that fragment 
from the child fragment manager,

02:07:02.661 --> 02:07:04.458
 right.
   &gt;&gt; AUDIENCE MEMBER:  Exactly.

02:07:04.459 --> 02:07:08.210
  Yeah. can do that in 
navigation when you're going out

02:07:08.703 --> 02:07:09.734
.
   &gt;&gt; AUDIENCE MEMBER:  Exactly,

02:07:09.735 --> 02:07:12.615
 but in that case usually I have
 to use committal line 

02:07:12.733 --> 02:07:17.858
statements because the fragment 
state is already statement, 

02:07:17.859 --> 02:07:22.387
right.If you ran on destroy, yes
.  I guess I'm a little curious 

02:07:22.724 --> 02:07:24.180
because it sounds like you 
specifically don't want the 

02:07:24.181 --> 02:07:28.617
smaller fragment to survive.  
You want it to be much more 

02:07:28.972 --> 02:07:31.301
ephemeral, essentially?
   &gt;&gt; AUDIENCE MEMBER:  I want 

02:07:31.417 --> 02:07:37.295
it to die, basically, when I 
leave the screen.kay.  I have to

02:07:37.296 --> 02:07:40.552
 say, I haven't run into that 
case before.

02:07:40.553 --> 02:07:43.305
   (laughter).
   &gt;&gt; GEORGE MOUNT:  Maybe we 

02:07:43.497 --> 02:07:46.640
can think about it a little bit 
and talk to you in the sandbox.

02:07:46.905 --> 02:07:49.756
So what you may want to do is 
you may want to remove that as 

02:07:49.865 --> 02:07:52.267
part of a separate transaction 
that's not part of the back 

02:07:52.417 --> 02:07:54.430
stack as you navigate, but that 
imply ies some knowledge of that

02:07:54.734 --> 02:07:56.769
 implementation detail, but it 
sounds like you probably want to

02:07:57.007 --> 02:07:59.610
 avoid, but let's talk about 
that a little deeper in the sand

02:08:00.048 --> 02:08:02.639
box if possible.  Great.  Last 
question?

02:08:02.734 --> 02:08:05.208
   &gt;&gt; AUDIENCE MEMBER:  So, I 
was hope ing you could shed a 

02:08:05.450 --> 02:08:07.309
little light on something you 
said in the beginning of the 

02:08:07.310 --> 02:08:10.475
talk.  You mentioned building up
 the back stack when, let's say,

02:08:10.656 --> 02:08:14.895
 you went in from a deep blink, 
but some of the U  UI gietd 

02:08:14.968 --> 02:08:19.319
      guidelines say there is a 
distinct difference between the 

02:08:19.423 --> 02:08:22.524
up navigation and the back but 
the         button.  When is the

02:08:22.699 --> 02:08:26.159
 right time to actually generate
 the back stack for the user?  

02:08:26.160 --> 02:08:29.202
Because right, we generally on 
deep link the expected behavior 

02:08:29.203 --> 02:08:33.087
is the Up button should take you
 up a level in your app, but the

02:08:33.446 --> 02:08:37.007
 back button should exit is what
 I understood.

02:08:37.008 --> 02:08:38.642
   &gt;&gt; ADAM POWELL:  To the 
previous context.  You're 

02:08:38.643 --> 02:08:40.388
absolutely right.  This is a 
wonderful question that I 

02:08:40.389 --> 02:08:44.324
couldn't have planted into the 
audience again.  So yes, secialg

02:08:44.555 --> 02:08:47.208
         essentially, when you 
start one of your activities on 

02:08:47.209 --> 02:08:49.993
the task of another application,
 say when you click a view link 

02:08:49.994 --> 02:08:52.655
or web link where you're viewing
 that content within your app, 

02:08:52.656 --> 02:08:56.229
then in those case ses you don't
 want the synthetic back stack 

02:08:56.684 --> 02:09:01.177
yet. you want to do, is in that 
case, the Up button is going to 

02:09:01.178 --> 02:09:04.219
jump you into your own task, so 
in that case that's going to be 

02:09:05.175 --> 02:09:09.517
using the Start activity flags, 
the flag activity new task, the 

02:09:09.803 --> 02:09:14.750
flag activity clear task, and 
flag activity task on home.  

02:09:14.751 --> 02:09:17.179
Happy to write all of this down 
for you in the sandbox if you're

02:09:17.180 --> 02:09:19.687
 interested, and then you want 
to go ahead and as you jump into

02:09:20.164 --> 02:09:22.808
 that new activity you create 
that synthetic back stack, so 

02:09:23.068 --> 02:09:25.566
that way that gets you deep into
 the navigation of your 

02:09:25.992 --> 02:09:28.883
application, but back on your 
own task.

02:09:28.968 --> 02:09:32.130
   &gt;&gt; AUDIENCE MEMBER:  Okay.  
So the key is to key off of the 

02:09:32.131 --> 02:09:33.048
task.
   &gt;&gt; GEORGE MOUNT:  Yes, 

02:09:33.049 --> 02:09:34.385
exactly.
   &gt;&gt; AUDIENCE MEMBER:  Awesome.

02:09:34.386 --> 02:09:35.696
  Thanks.
   &gt;&gt; ADAM POWELL:  Okay.  I 

02:09:35.697 --> 02:09:38.348
think that's about all of the 
time qeef we've got.           

02:09:38.498 --> 02:09:41.769
      we've got.  We'll be in 
the sandbox area if anyone else 

02:09:41.870 --> 02:09:44.316
wants to ask some questions, and
 thank you very much.

02:09:44.317 --> 02:09:48.415
   (Applause).

02:09:48.416 --> 02:09:50.416
   (s

02:09:53.761 --> 02:09:58.407
ession complete ed at     
         complete ed 11:10 a.m. 

02:09:58.408 --> 02:10:02.995
CS   )
   &gt;&gt; Thank you for joining this

02:10:03.106 --> 02:10:07.788
 session, we will assist to go 
through the registered exits to 

02:10:07.789 --> 02:10:10.740
make room for the next session. 
 If you rej     registered for 

02:10:11.498 --> 02:10:14.324
the next session in this room, 
we ask that you please clear the

02:10:14.325 --> 02:10:16.447
 room and return to the 
registration line outside.  

02:10:16.448 --> 02:10:24.764
Thank you.
   (session complete ed at 11:10

02:10:24.765 --> 02:10:28.523
 a.m. Pacific)

02:10:28.524 --> 02:10:32.057
   Services provided by:
         Caption First, Inc. 

02:10:28.524 --> 02:10:32.324
         P.O. Box 3066       
         Monument, CO  80132

02:10:28.524 --> 02:10:31.857
         800-825-5234
         www.captionfirst.com

02:10:28.524 --> 02:10:32.057
   This text is being provided 
in a realtime format. 

02:10:28.524 --> 02:10:32.324
      Communication Access 
Realtime Translation (CART) or

02:10:28.524 --> 02:10:31.990
      captioning are provided in
 order to facilitate

02:10:28.524 --> 02:10:31.924
      communication 
accessibility and may not be a 

02:10:28.524 --> 02:10:30.924
totally
      verbatim record of the 

02:10:28.524 --> 02:10:30.169
proceedings.
   ***

02:10:35.850 --> 02:10:39.878
           .

03:13:14.212 --> 03:13:20.641
 ing Android Studio   
May 18, 2017   

03:13:20.642 --> 03:13:28.074
San Jose, criminal          
criminal       

03:13:31.808 --> 03:13:37.152
   California   
2     

03:13:37.153 --> 03:13:40.817
1230  :30 p.m.

03:18:00.839 --> 03:18:02.839
 Smith    

03:18:05.037 --> 03:18:07.037
   Smith      

03:28:40.512 --> 03:28:42.512
 Chromium   e      

03:29:16.942 --> 03:29:19.026
 Good afternoon everyone.  
Houmentd          How's it going

03:29:20.222 --> 03:29:24.542
 so far no   ?  Come on comment 
on give me something.  There we 

03:29:24.543 --> 03:29:27.812
go.  Thank you so much for join
ing us.  My name is Dave Smith

03:29:31.491 --> 03:29:32.656
.  
   Â» RENATO MANGINI DIAS:  I am 

03:29:32.657 --> 03:29:36.720
a log projects engineer. 
   Â» DAVE SMITH:  We are hear to

03:29:36.876 --> 03:29:39.458
 talk to you today about how you
 easy ily get started developing

03:29:39.742 --> 03:29:42.431
 for Android things use ing a 
tool you probably already know 

03:29:42.432 --> 03:29:46.840
which is Android Studio.  So 
let's talk a little bit about 

03:29:46.841 --> 03:29:50.448
Android things for a minute.  It
 is an extension of the Android 

03:29:50.449 --> 03:29:53.563
platform to brand new form 
factor in this case for embedded

03:29:54.460 --> 03:29:57.059
 in I/O thshgs         T.  This 
is something                    

03:29:57.194 --> 03:29:59.867
 /O  oT.  This is something we 
have done in the past. 

03:29:59.868 --> 03:30:02.685
   &gt;&gt; LIZ ANDERSON:  Destroyed 
things is just yet another form 

03:30:02.686 --> 03:30:06.868
factor where we are bringing all
 the power of the Android plat 

03:30:06.869 --> 03:30:11.855
plarm      form    form to this 
new former   factor.  This is a 

03:30:11.856 --> 03:30:14.282
great things tore embedded in 
IoT compefk         specifically

03:30:14.595 --> 03:30:17.708
 because it brings Android's 
best-in-class tools to a space 

03:30:17.709 --> 03:30:21.625
that tra digsally nt        al 
li       digs           digs    

03:30:21.794 --> 03:30:26.285
      traditionally that hasn't 
had well integrated tools ing.  

03:30:26.286 --> 03:30:28.870
They are separated.  There is 
not real well integrated 

03:30:28.871 --> 03:30:31.514
experience in a who of        
lot of case and that's what 

03:30:31.515 --> 03:30:35.260
makes Android things and    . 
   &gt;&gt; LIZ ANDERSON:     

03:30:35.663 --> 03:30:39.316
                     and Android
 Studio so you a system.  You 

03:30:39.317 --> 03:30:43.537
can use these powerful tools to 
develop debug and deploy your 

03:30:43.538 --> 03:30:46.654
applications to your devices for
 development and then again in 

03:30:46.655 --> 03:30:50.774
to production.  Basically it 
makes embedded development as 

03:30:50.775 --> 03:30:54.553
sem PIM         sill pelt  
         SIM Pell as            

03:30:54.850 --> 03:30:58.184
 SIM Pell          simple very 
many           vement has become

03:30:58.712 --> 03:31:01.608
                   development 
has become.  How many you are 

03:31:01.609 --> 03:31:04.228
Android developers in the room? 
 How many of you use Android 

03:31:04.229 --> 03:31:08.689
Studio roughly every day?  Okay.
  Great.  So this is an awesome.

03:31:08.690 --> 03:31:11.831
  Because you guys already know 
this tool.  And you know all of 

03:31:11.832 --> 03:31:15.679
the amazing things that can do 
for you in terms of development 

03:31:15.680 --> 03:31:18.975
and deployment but just to give 
you some background or some idea

03:31:19.174 --> 03:31:23.214
 here this means that now you 
can use some of these amazing 

03:31:23.215 --> 03:31:27.537
Android sued      Studio feature
s that you are already familiar 

03:31:27.538 --> 03:31:32.156
instant run, UI layout blrs and 
all of these great tools to 

03:31:32.157 --> 03:31:35.796
about       build applications 
for erm     embedded devices.  

03:31:35.797 --> 03:31:38.810
You can leverage all the deep 
integrations that are already in

03:31:39.481 --> 03:31:42.136
 Android Studio for Google 
services.  Dep integrations for 

03:31:42.137 --> 03:31:47.571
things like Firebase as well as 
the Google Cloud flat form     

03:31:47.744 --> 03:31:51.326
      plarm       plat fofrl
                       Cloud 

03:31:51.327 --> 03:31:55.038
Platform.  You have this amazing
 step through debugger you that 

03:31:55.039 --> 03:32:00.858
can set watch points ex    
execute arbitrary code 

03:32:00.859 --> 03:32:02.859
expressions. 

03:32:04.655 --> 03:32:07.777
 But in addition we also have 
all of these new profile ing 

03:32:07.778 --> 03:32:11.197
tools.  You saw some of them 
just announced thatment     at 

03:32:11.198 --> 03:32:15.195
the developer keynote, memory, 
object allocations and tracking 

03:32:15.196 --> 03:32:17.976
down issues in your program and 
performance problems.  So all of

03:32:17.977 --> 03:32:21.313
 these tools that we have 
announced here at I/O as well as

03:32:21.515 --> 03:32:24.055
 the one thats you are 
particular familiar with use ing

03:32:24.226 --> 03:32:27.587
 an Android Studio you can apply
 those seament tools for 

03:32:27.588 --> 03:32:30.911
developing for embedded and IoT.
  All right.  So that's enough 

03:32:30.912 --> 03:32:34.749
about talking about what you 
probably already know.  Let's 

03:32:34.750 --> 03:32:37.328
talk about the new stuff.  As 
you probably heard yesterday we 

03:32:37.329 --> 03:32:42.169
announced the new preview of 
Android stew      Studio 3.30 

03:32:42.170 --> 03:32:45.266
and with you               0 and
 one of new futures is direct 

03:32:45.267 --> 03:32:49.029
support for Android things as a 
device form factsor.  Let's take

03:32:49.184 --> 03:32:53.287
 a look at what we have added.  
If you are use ing the preview 

03:32:53.288 --> 03:32:56.459
of Android Studio and you krooe 
Tate a              create a new

03:32:56.810 --> 03:33:00.006
 project, Android things is list
ed as one of those form nak     

03:33:00.007 --> 03:33:03.134
factors that you can select when
 you build a new project. Ing 

03:33:03.135 --> 03:33:06.720
this         Interesting things
        thing to note it is not 

03:33:06.721 --> 03:33:11.731
mutually ex-Clive      clusive 
will phone.  You can build an 

03:33:11.732 --> 03:33:16.333
application ha    that Dhar gets
           targets both phone 

03:33:16.334 --> 03:33:18.707
and tablet.  Maybe you want to 
build a companion application 

03:33:18.708 --> 03:33:21.241
that goes along with what's run
ning on Android things and you 

03:33:21.242 --> 03:33:24.839
would like to share as much code
 as possible you could actually 

03:33:24.840 --> 03:33:27.627
build them in to the same 
application project just use ing

03:33:28.080 --> 03:33:30.077
 different entry points via 
different activity ies and we 

03:33:30.078 --> 03:33:34.479
will talk a little bill      bit
 more about that.  When I check 

03:33:34.480 --> 03:33:37.875
that little Android things box 
what is being added to my 

03:33:37.876 --> 03:33:41.725
project?  So what that does is 
it walks through and when it kre

03:33:41.726 --> 03:33:46.042
 ates the new projejt it 
automatically adds the on 

03:33:46.043 --> 03:33:50.222
destroyed things                
     Android things support 

03:33:50.223 --> 03:33:52.613
library.  If you have been oug
     our document significance

03:33:52.904 --> 03:33:55.421
             ation you have seen
 us telling you to man qually 

03:33:55.422 --> 03:33:58.386
add these             ly        
ually to add these       these 

03:33:58.387 --> 03:34:00.131
things. 
   &gt;&gt; LIZ ANDERSON:  Destroy   

03:34:03.400 --> 03:34:07.802
Android things is going to add 
them.  The support library adds 

03:34:07.803 --> 03:34:13.278
a bunch of knewor P          
newer PIs with interacting with 

03:34:13.279 --> 03:34:18.592
low level peripheral devices.  
PWM, pie     spooi and all the

03:34:18.764 --> 03:34:20.764
                   spy.  Maybe 
you have heard of those things. 

03:34:21.119 --> 03:34:24.027
 But essentially they are all 
baer      interfaces that are 

03:34:24.028 --> 03:34:27.149
used to connect low level ard
     hairedware,      ware     

03:34:27.649 --> 03:34:30.060
        hardware.  Now you can 
commune kite      icate with 

03:34:30.061 --> 03:34:34.970
those inside your app and 
support library allows you to do

03:34:35.542 --> 03:34:35.921
. 
   &gt;&gt; LIZ ANDERSON:  Void      

03:34:35.922 --> 03:34:38.325
Destroyed                
                   and     

03:34:39.435 --> 03:34:42.834
Android Studio will tar get that
.  When you create a new project

03:34:42.969 --> 03:34:46.593
 targeting Android things is an 
activity dialogue to add a new 

03:34:46.594 --> 03:34:50.611
empty activity to your project. 
 This is also important because 

03:34:50.612 --> 03:34:53.862
in Android things application 
must haved a least          ed 

03:34:53.863 --> 03:34:56.628
a      at least one main entry 
point activity.  So to discuss 

03:34:56.629 --> 03:34:58.976
that a little bit let me kind of
 walk you through what happens 

03:34:58.977 --> 03:35:02.297
when Android things starts up 
for the first time.  So Android 

03:35:02.298 --> 03:35:04.809
things is a little bit different
 than that digsal Android and 

03:35:04.810 --> 03:35:09.126
that there is a launcher 
application on the device.  User

03:35:09.127 --> 03:35:11.869
 would choose to pick a 
particular app and then launch 

03:35:11.870 --> 03:35:15.802
that so that they can interact 
with it.  It is not to say that 

03:35:15.803 --> 03:35:18.237
Android things doesn't have a 
graphical display because it 

03:35:18.238 --> 03:35:21.450
might.  We have to somehow 
provide a mechanism so that ab  

03:35:21.877 --> 03:35:24.360
  Android can automatically 
launch whatever the primary 

03:35:24.361 --> 03:35:27.862
application is that you have 
developed once this system fully

03:35:28.059 --> 03:35:32.944
 boots.  Way way we do that, 
once it is finished bool        

03:35:32.945 --> 03:35:35.309
ed   ed booting there an 
intermediary app that is built 

03:35:35.310 --> 03:35:38.305
in to the system and that launch
er is looking for a very 

03:35:38.306 --> 03:35:41.544
specific activity of intent on 
the system that it can launch as

03:35:41.747 --> 03:35:44.327
 the first main amount Kaying
               application 

03:35:44.328 --> 03:35:47.344
that's ready to reason whatever 
code you have developed.  Now 

03:35:47.345 --> 03:35:50.343
again if you have done some 
Android things development 

03:35:50.344 --> 03:35:52.430
before you might have seen this 
in our documentation but 

03:35:52.431 --> 03:35:55.333
essentially it means that you 
are create ing an activity that 

03:35:55.334 --> 03:35:59.679
has an intent filter that 
includes this IoT launcher 

03:35:59.680 --> 03:36:03.761
category and the IoT launch
    wn  uncher app will look for

03:36:04.041 --> 03:36:07.407
 a can tift         n activity 
and lawn  unch it as the primary

03:36:07.659 --> 03:36:10.986
     y     pray mere           
primary application that on that

03:36:11.372 --> 03:36:13.589
 device.  You can launch other 
applications if you have 

03:36:13.590 --> 03:36:17.242
multiple APKs but sort of that 
single entry point that we 

03:36:17.243 --> 03:36:19.675
require to get your app up and 
running.  And again when you use

03:36:20.048 --> 03:36:23.172
 the new activity template in 
Android Studio what it is going 

03:36:23.173 --> 03:36:26.845
to do is automatically add all 
of that boilerplate to the 

03:36:26.846 --> 03:36:28.433
manifest for you so that you 
don't have to remember to could 

03:36:28.434 --> 03:36:32.364
that            do that for that
 specific activity.  All right. 

03:36:32.520 --> 03:36:36.338
 So one more thing about Android
 Studio.  I mentioned before 

03:36:36.339 --> 03:36:40.713
that there is a possibility for 
having a display on an Android 

03:36:40.714 --> 03:36:43.957
things device    vice but it is 
not required.  We say that 

03:36:43.958 --> 03:36:46.649
displays are optional in Android
 things.  Because of of that 

03:36:46.650 --> 03:36:50.406
there are so    some Android 
behaviors that work a little bit

03:36:51.106 --> 03:36:54.238
 different than traditional 
Android.  And one of those is 

03:36:54.239 --> 03:36:58.312
common is APIs that would show a
 dialogue it to a user.  One is 

03:36:58.313 --> 03:37:01.640
run time permissions, probably 
the most comoun.  Now the issue 

03:37:01.641 --> 03:37:05.168
is showing a run time permission
s dialogue to require access to 

03:37:05.169 --> 03:37:09.123
particular ape     API we can't 
necessary ily do that if there 

03:37:09.124 --> 03:37:13.386
is no display.  In Android 
things these dialogue does not 

03:37:13.387 --> 03:37:15.583
display and permissions are 
granted to applications by 

03:37:15.584 --> 03:37:18.839
default even if they are 
dangerous permissions.  We say 

03:37:18.840 --> 03:37:21.929
they are granted at install time
 will you it             but it 

03:37:21.930 --> 03:37:24.716
turns out there is a little bit 
of an implementation difference 

03:37:24.717 --> 03:37:27.079
in here that some of you may 
have experienced if you is

03:37:27.630 --> 03:37:29.684
      u you have done the 
development so far.  Those per 

03:37:29.685 --> 03:37:31.404
miles an houring   
              missions are grant

03:37:31.405 --> 03:37:36.469
ed when the device foos      
first buys.         boosts.  On 

03:37:36.470 --> 03:37:40.023
reboot it will grant application
 permissions.  There is no 

03:37:40.024 --> 03:37:43.080
dialogue but during development 
this creates a bit of a gap.  

03:37:43.081 --> 03:37:46.507
There is tul actually a period 
of time between when you install

03:37:46.676 --> 03:37:49.856
 your app on the device the 
first time and when it may or 

03:37:49.857 --> 03:37:52.903
may not have been rebooted where
 that permission is not granted 

03:37:52.904 --> 03:37:55.670
to and that can cause some 
friction when you are doing    

03:37:55.671 --> 03:37:57.772
ing    ing development.  There 
are ways around that by manually

03:37:57.956 --> 03:38:01.141
 rebooting the device or in some
 ways      cases you can manual

03:38:01.486 --> 03:38:05.475
ly installing the APK use ing 
the grant permissions flag to 

03:38:05.476 --> 03:38:07.322
override all of this. 
   &gt;&gt; LIZ ANDERSON:  Destroyed

03:38:09.518 --> 03:38:14.304
Android 3.    Studio 3.0 we do 
this for you.  And you download 

03:38:14.305 --> 03:38:17.246
your code out of Android Studio.
  We will automatically grant 

03:38:17.247 --> 03:38:20.724
those permissions after install 
time the way you expect so that 

03:38:20.725 --> 03:38:23.662
you don't have to do these 
manual work arounds or reboot 

03:38:23.663 --> 03:38:26.672
the device.  All this is now 
much smoother and much easier to

03:38:26.839 --> 03:38:30.276
 work with now that we got full 
integration with Android Studio.

03:38:33.267 --> 03:38:35.851
show you some of this stuff in 
practice.  So I'm going to hand 

03:38:35.852 --> 03:38:39.478
it over to Renato who is going 
to show you a demo.  Can we 

03:38:39.479 --> 03:38:42.807
switch to the demo, please?  Kis

03:38:42.808 --> 03:38:44.395
   Â» RENATO MANGINI DIAS:  Are 
you ready for a life code ing 

03:38:44.396 --> 03:38:46.396
demo?  
   (Applause.)

03:38:51.567 --> 03:38:56.957
just land      launched Android 
Studio 3 dm   .0 which we just 

03:38:56.958 --> 03:38:59.517
announced yesterday.  You can 
download it right now.  It is 

03:38:59.518 --> 03:39:06.187
public.  But it is on canary 
channel yet.  Sos  it is not 

03:39:06.188 --> 03:39:09.103
stable.  That means it is rigs
      risky.  I am going to 

03:39:09.104 --> 03:39:13.825
start a new project, Android 
things project from scratch use

03:39:13.966 --> 03:39:18.810
 ing the support that we just ed
    added and from there we are 

03:39:18.811 --> 03:39:20.811
going to do something else

03:39:25.981 --> 03:39:32.291
.  I would enable form factor 
support for Android things and I

03:39:32.292 --> 03:39:36.619
 will add an anti-activity just 
like Dave showed.  And I don't 

03:39:36.620 --> 03:39:40.722
want to do it UI now because 
this -- I will actually run this

03:39:41.028 --> 03:39:44.818
 app on this device as we    you
 can see here.  And this device 

03:39:44.819 --> 03:39:49.575
has no UI.  No traditional U 
ifrment        I.  So thaet's  

03:39:50.333 --> 03:39:53.323
       let's disable that.  Now 
it is generate ing a project.  I

03:39:53.324 --> 03:39:56.607
 will explain a little bit of 
what was     device is.  This is

03:39:56.727 --> 03:40:00.890
 one of the many boards that we 
support and on P   top of that 

03:40:00.891 --> 03:40:04.735
you can see a what we call a hat
 which just a board with a bunch

03:40:05.209 --> 03:40:09.721
 of sensors and buttons and 
display segment displays.  We 

03:40:09.722 --> 03:40:13.143
are going to play with that a 
little bit.  Okay.  Here we have

03:40:13.784 --> 03:40:21.165
 the activity.  If I switch to 
my view grader, you can see that

03:40:24.084 --> 03:40:28.626
 the -- library is added 
automatically.  So I'm ready to 

03:40:28.627 --> 03:40:31.474
do something.  What do you want 
me to do day?  

03:40:31.475 --> 03:40:33.115
   Â» DAVE SMITH:     
               Smith            

03:40:33.116 --> 03:40:34.303
 Dave?  
   Â» DAVE SMITH:  I guess the 

03:40:34.304 --> 03:40:36.456
first projeks that everyone    
              ject that everyone

03:40:37.010 --> 03:40:42.871
 does is a Blinking light.  
   Â» RENATO MANGINI DIAS:  We 

03:40:42.872 --> 03:40:48.636
have this notion of driver.  We 
don't want      want -- for 

03:40:48.637 --> 03:40:52.876
every standard peripheral       
 rif    ipheral, sensor or 

03:40:52.877 --> 03:40:55.543
display.  So we provide it and 
we count on the opportunity 

03:40:55.544 --> 03:40:57.229
community to provide           
                        he 

03:40:57.230 --> 03:41:00.296
community to provide more of 
those.  High level drivers for 

03:41:00.297 --> 03:41:04.602
the sensors.  So he don't have 
to square        keel      deal 

03:41:04.603 --> 03:41:08.424
with those low level protoll    
 toll     tocols you want to 

03:41:08.425 --> 03:41:13.670
blaing        link a        
Blink a light.  With this 

03:41:13.671 --> 03:41:17.684
particular bord      bee we cite
             board we created a 

03:41:17.685 --> 03:41:20.817
metadrivor that contains every 
sensor that has in that board.  

03:41:20.818 --> 03:41:23.181
So I will start by adding the 
dependency on that

03:41:27.220 --> 03:41:29.220
.  Driver

03:41:38.128 --> 03:41:41.423
.  Is it better?  Okay.   

03:41:50.787 --> 03:41:56.410
dependency.  This library is 
published on J standard.  When I

03:41:57.168 --> 03:42:03.311
 sync it will add all the 
dependency ies.  And why it does

03:42:03.312 --> 03:42:06.133
 that                  while it 
does that I will go back to my 

03:42:06.134 --> 03:42:08.134
activity.   

03:42:19.794 --> 03:42:27.020
 Now I start with open the LED. 
 Led     See there are three LE 

03:42:27.021 --> 03:42:32.132
deshgss        Ds here.  There 
is a red, yen     green and blue

03:42:32.283 --> 03:42:36.361
 and by sues      use ing this 
class fronted driver I can't 

03:42:36.362 --> 03:42:40.380
open if I of         any of 
those.  Open the red?  No.  

03:42:40.381 --> 03:42:44.022
There an exception.  I just -- 
the full way. 

03:42:49.415 --> 03:42:52.963
 And set the value.  I also    
    I will set the LED direction

03:42:53.486 --> 03:42:57.720
.    as out.  So this is 
something that we see in the

03:42:59.121 --> 03:43:01.577
            send the signal to 
and not something that we 

03:43:01.578 --> 03:43:06.194
collect the signal from.  And I 
do that in the loop.  I'm pretty

03:43:06.306 --> 03:43:10.164
 sure that Dave has something to
 tell -- to complain about that.

03:43:10.165 --> 03:43:12.165
  We will talk about that later

03:43:24.991 --> 03:43:28.551
.  Okay.  If you are an Android 
developeror you can see that

03:43:29.343 --> 03:43:33.734
                    you can see 
what we doing here.  E   We open

03:43:33.841 --> 03:43:37.138
 up the LED and we got in to a 
loop and we set the value every 

03:43:37.139 --> 03:43:42.688
300 seconds to an alternate 
value and now I will run the app

03:43:43.794 --> 03:43:46.462
.  Here are the devices I have. 
 The only device I have connect

03:43:46.585 --> 03:43:50.637
ed is the IX7D which is this 
board

03:43:55.258 --> 03:44:00.221
.  If cross our fingers, please,
 if all goes well after some 

03:44:00.222 --> 03:44:02.592
time the red LED will start 
Blinking

03:44:10.309 --> 03:44:13.461
.  
   (Applause.) 

03:44:13.462 --> 03:44:17.266
   Â» RENATO MANGINI DIAS:  
Awesome.  I'm done.  

03:44:17.267 --> 03:44:19.054
   Â» DAVE SMITH:  So it works.  
That's great.  But you are 

03:44:19.055 --> 03:44:21.617
pretty experienced Android 
developer.  I'm not real sure 

03:44:21.618 --> 03:44:25.588
that putting an infinite wire 
loop in uncreate is the best 

03:44:25.589 --> 03:44:28.393
weabl       way to handle this. 
 Do you think maybe we can fix 

03:44:28.394 --> 03:44:31.293
ha?       that?  
   Â» RENATO MANGINI DIAS:  I 

03:44:31.294 --> 03:44:33.881
knew he would combine         
complain about that.  That's a 

03:44:33.882 --> 03:44:37.885
very good point.  Despite having
 a UI and -- you have to follow 

03:44:37.886 --> 03:44:41.093
the same rules off Android.  You
 should not block the main tread

03:44:41.426 --> 03:44:46.234
.  Why?  If you don't have a why
 you dote          Y you don't

03:44:46.507 --> 03:44:49.955
                 Y you don't 
neat            don't need to 

03:44:49.956 --> 03:44:53.785
refresh your Y.  Keyboard events
 sent to your application and 

03:44:53.786 --> 03:44:57.923
you have sensor events.  So we 
is    have a bun of sduf        

03:44:58.091 --> 03:45:01.837
ch of stuff.  We sudden        
should not block the main track.

03:45:01.838 --> 03:45:04.132
  That's a main root for and 
Croyed          Android and 

03:45:04.133 --> 03:45:07.488
that's something we are doing 
here.  So let's fix that.  The 

03:45:07.489 --> 03:45:12.646
way I am going to fix this there
 are mull      multiple ways to 

03:45:12.647 --> 03:45:15.763
do it.  You can create a 
service.  You can create a 

03:45:15.764 --> 03:45:19.929
thread.  I would do simplest 
way, I create a hammer and 

03:45:19.930 --> 03:45:24.322
attach that hammer to the main 
thread and add each set value to

03:45:24.810 --> 03:45:29.005
 the end of the looper of the 
main thread        tread looper.

03:45:29.006 --> 03:45:32.007
  It is going to look less 
economy         complicated than

03:45:32.528 --> 03:45:34.528
 it sounds.   

03:45:57.565 --> 03:46:00.655
mentioned we are ensure ing that
 the main thread in Android 

03:46:00.656 --> 03:46:05.450
continues to remain free so that
 system events can still come in

03:46:05.548 --> 03:46:09.116
 to your application, clr     
whether life cycle events or 

03:46:09.117 --> 03:46:13.364
input events.  It hens         
It means in general if you have 

03:46:13.365 --> 03:46:15.809
to do any regular polling of an 
input or something along those 

03:46:15.810 --> 03:46:18.152
things you want to make sure you
 don't do that on the main 

03:46:18.153 --> 03:46:20.711
thread either.  We are schedule
 ing an output to the way we are

03:46:20.830 --> 03:46:24.228
 doing this is fine.  If we 
nutted        need to pull a 

03:46:24.229 --> 03:46:30.693
sensor or read some value from 
irn put     input we might want 

03:46:30.694 --> 03:46:33.036
to use a background thread.  
That      It could be a handling

03:46:33.200 --> 03:46:37.727
or thread                   
handler thread async task or 

03:46:37.728 --> 03:46:39.922
other things that suit your 
development work flow.  They 

03:46:39.923 --> 03:46:42.522
have all work the same way of 
you compm.  But it is im        

03:46:42.696 --> 03:46:44.720
              expect.  But it is
 important to realize when you 

03:46:44.721 --> 03:46:47.135
are working with some of this 
hardware it is still good to off

03:46:47.501 --> 03:46:50.997
load those regular repeated long
 running operations off the main

03:46:50.998 --> 03:46:53.534
 thread hone      even toe it is
 not               though it is 

03:46:53.535 --> 03:46:56.096
not a network access that you 
might traditionally consider as 

03:46:56.097 --> 03:46:59.249
one of those blocking 
applications.  Disokay.        

03:46:59.250 --> 03:46:59.972
okay        
   Â» RENATO MANGINI DIAS:  Okay.

03:46:59.973 --> 03:47:02.038
  Good job.  
   Â» DAVE SMITH:  Sorry.  

03:47:02.039 --> 03:47:04.935
   Â» RENATO MANGINI DIAS:  And 
now we have the code that 

03:47:04.936 --> 03:47:08.576
supposedly should work.  Again 
let's cross our fingers again.  

03:47:08.577 --> 03:47:12.312
Actually first let me just go 
over it very quickly.  I have 

03:47:12.313 --> 03:47:15.610
the handler.  The twifrns
         difference between now 

03:47:15.611 --> 03:47:21.252
and before is that now I have a 
handle r and the handler is -- 

03:47:21.253 --> 03:47:25.100
all the work that we    the 
looper was done ing,    e 

03:47:25.101 --> 03:47:27.819
ing          doing, run and re
schedule.  It does exactly the 

03:47:27.820 --> 03:47:31.229
same.  However at the end it 
posts itself at the end of the 

03:47:31.230 --> 03:47:37.690
looper.  So it can do whatever 
has to do like reading sensor or

03:47:37.691 --> 03:47:40.963
 reading keys processing any 
event that is coming to a new 

03:47:40.964 --> 03:47:44.409
thread and then it does another 
step and reschedules again.  It 

03:47:44.410 --> 03:47:48.624
is not specific for anti-things.
  This                d     

03:47:48.625 --> 03:47:52.968
Android things.  You won't know 
if it is working or not.  So -- 

03:47:52.969 --> 03:47:56.185
because of it was Blinking 
before.  I would change the LED 

03:47:56.186 --> 03:48:00.692
to the green one.  So we don't 
have to trust highway         me

03:48:19.358 --> 03:48:22.464
.  Done.  
   (Applause.) 

03:48:22.465 --> 03:48:24.032
   Â» RENATO MANGINI DIAS:  
Awesome.  

03:48:24.033 --> 03:48:26.430
   Â» DAVE SMITH:  That's good.  
It is good.  I think we are kind

03:48:26.913 --> 03:48:32.237
 of with -- we are following a 
good pattern.  Disbyte       

03:48:32.238 --> 03:48:34.817
   Â» RENATO MANGINI DIAS:  Byte 
byte           Bye-bye Smith 

03:48:34.818 --> 03:48:37.955
submit we                . 
   Â» DAVE SMITH:  We work for 

03:48:37.956 --> 03:48:42.343
Google.  Can you get something 
more interesting going?  

03:48:42.344 --> 03:48:44.115
   Â» RENATO MANGINI DIAS:  We 
can do that.  As I mechanicsed 

03:48:44.116 --> 03:48:47.656
there         ed              
mention thissed is one Blink 

03:48:47.657 --> 03:48:53.688
sensor in this board this tiny 
thing here.  Can you see right 

03:48:53.689 --> 03:49:00.616
here?  It is the BMP280.  It is 
temperature and ambient pressure

03:49:01.026 --> 03:49:03.721
 sensor.  And we can easy ily 
connect

03:49:07.928 --> 03:49:11.378
 to that.  Use ing the rainbow 
hat driver.  So let's do it

03:49:15.820 --> 03:49:19.122
.  And what I'm going to do did 
not         is not only read 

03:49:19.123 --> 03:49:22.624
from sensor, I will also show 
the results like the temperature

03:49:22.992 --> 03:49:26.752
 on this segment display here.  
Right?  

03:49:26.753 --> 03:49:29.171
   Â» DAVE SMITH:  I think that's
 a better demo.  

03:49:29.172 --> 03:49:33.296
   Â» RENATO MANGINI DIAS:  See. 
 And how many          how I'm 

03:49:33.297 --> 03:49:42.237
going to do that, that's really 
easy.  Did     Smith whatth  

03:49:43.547 --> 03:49:46.992
th            
   Â» DAVE SMITH:  What you may 

03:49:46.993 --> 03:49:50.272
have noticed,en   the reason for
 that is that the driver that we

03:49:50.644 --> 03:49:56.795
 have written for this specific 
peripheral rainbow hat ab tracts

03:49:56.966 --> 03:50:00.925
es         stracts that away.  
Use ing these drivers is a much 

03:50:00.926 --> 03:50:03.572
faster way of getting started 
without necessary ily having to 

03:50:03.573 --> 03:50:06.643
deal with with all those low 
level details but these drivers 

03:50:06.644 --> 03:50:10.692
are open source on github and we
 will mention a ling to that a 

03:50:10.693 --> 03:50:13.110
little bit later.  You can use 
them as a reference to see how 

03:50:13.111 --> 03:50:18.108
to build something with these 
abstract      stractions use ing

03:50:18.109 --> 03:50:21.196
 thoem         e ing     ing 
them directly and you can read 

03:50:21.197 --> 03:50:25.049
the code.  Are you done yet?  
   Â» RENATO MANGINI DIAS:  Yes. 

03:50:25.050 --> 03:50:29.520
 On create I initiate the driver
 and a few default values and 

03:50:29.521 --> 03:50:33.063
here in the loop I will keep the
 LED.  So you that it is process

03:50:33.385 --> 03:50:39.439
ing.  And I will display on the 
display the sensor

03:50:44.353 --> 03:50:46.353
 value.  And that's it

03:51:02.134 --> 03:51:03.180
.  
   Â» DAVE SMITH:  Done.  

03:51:03.181 --> 03:51:05.181
   (Applause.)

03:51:09.346 --> 03:51:14.430
is in sellous.            
celsius we have to do some 

03:51:14.431 --> 03:51:15.903
conversion.  
   Â» DAVE SMITH:  Back to the 

03:51:15.904 --> 03:51:23.756
slides real quick.  There we go.
  Awesome.  So you just seen how

03:51:23.975 --> 03:51:27.565
 easy it is to get started very 
quickly use ing the new Android 

03:51:27.566 --> 03:51:31.417
Studio to create a new project, 
add some code it and communicate

03:51:31.703 --> 03:51:35.334
 with peripherals and you have 
seen how tz    easy it is to in 

03:51:35.335 --> 03:51:38.269
the Java.  If you heard 
yesterday that Kotlin is a first

03:51:38.930 --> 03:51:42.629
 class citizen in Android Studio
 as part of the new prevent    

03:51:43.068 --> 03:51:45.992
view.  Can we use Kotlin to 
develop for Android nings       

03:51:45.993 --> 03:51:51.391
things?  I don't see why not.  
But a simple example of Java I 

03:51:51.392 --> 03:51:53.517
have flown       thrown up here 
to give an idea of what koom 

03:51:53.518 --> 03:51:55.914
have some of this code might 
look like if you are interacting

03:51:56.683 --> 03:52:01.503
 on interperipherals on the hat.
  Communicate ing with the 

03:52:01.504 --> 03:52:06.351
rainbow LED on the top and it is
 doing some base ic setup to 

03:52:06.352 --> 03:52:09.724
change the color.  This code 
snippet is fairly strealt 

03:52:09.725 --> 03:52:13.869
forward.  It is                 
straight forward.  What if we 

03:52:13.870 --> 03:52:20.598
were to same that sample and 
write it in Kotlin.  We have 

03:52:20.599 --> 03:52:24.273
dropped out a little more than 
than ten lines of code and you 

03:52:24.274 --> 03:52:26.652
can see some of the things that 
are gone with try catch blocks 

03:52:26.653 --> 03:52:29.434
are no longer there anymore and 
the call back is much cleaner 

03:52:29.435 --> 03:52:33.810
use ing a lamb ba and even the 
initializers are much more 

03:52:33.811 --> 03:52:37.612
expressive and easy to read and 
this code is a lot more concise 

03:52:37.613 --> 03:52:41.389
and a lot more of a join to even
 write.  So what do you think 

03:52:41.390 --> 03:52:44.937
Renato, can we show them cot 
line run     linen            

03:52:44.938 --> 03:52:50.009
lin         Kotlin running on 
the Android things board Smith 

03:52:50.166 --> 03:52:54.564
            dis     board.  
   Â» RENATO MANGINI DIAS:  This 

03:52:54.565 --> 03:52:57.489
was launched.  What we are going
 to could       do here we are 

03:52:57.490 --> 03:53:02.201
going to start a new project.  
You can comp support on one 

03:53:02.202 --> 03:53:07.715
Android Studio.  You can add 
kwot Lynn           Kotlin and 

03:53:07.716 --> 03:53:09.992
Java at the same time and the 
same project.  And you know that

03:53:10.356 --> 03:53:15.100
 auto aim'           I'm not 
cheating here.  I will start a 

03:53:15.101 --> 03:53:17.101
new project

03:53:26.431 --> 03:53:27.442
.  
   Â» DAVE SMITH:  I will add 

03:53:27.443 --> 03:53:29.443
Kotlin      cot               
                   Smith      

03:53:29.771 --> 03:53:34.766
  .  I will add Kotlin support 
obviously.  Again that's let's 

03:53:34.767 --> 03:53:39.476
not do a form of tablet.  Let's 
do Ann destroyed things       

03:53:39.630 --> 03:53:44.941
               Android things.  
Same activity.  Same layout

03:53:50.472 --> 03:53:55.790
.  Same U   no UI layout.  
   Â» DAVE SMITH:  So one of the 

03:53:55.791 --> 03:53:58.329
things that you can see if you 
haven't seen this demo yet when 

03:53:58.330 --> 03:54:01.711
you include Kotlin support by 
default that it maniac tift is 

03:54:01.712 --> 03:54:05.161
create      kre              
  in activity is created in 

03:54:05.162 --> 03:54:08.033
Kotlin but we are automatically 
in Kotlin already.  

03:54:08.034 --> 03:54:10.433
   Â» RENATO MANGINI DIAS:  Yes,
 .  This is the main activity 

03:54:10.434 --> 03:54:14.985
and it is in Kotlin and it does 
nothing.  So now it is my job to

03:54:14.986 --> 03:54:22.522
 do something with that.  First 
I will add the dependency on if 

03:54:22.523 --> 03:54:25.612
you I goes remember             
      u you guys remember

03:54:38.232 --> 03:54:42.009
 well.  The same compend        
 dpi sendsy   sy             

03:54:42.010 --> 03:54:45.554
dependency our driver is written
 in    gentleman have.  It is

03:54:45.766 --> 03:54:47.602
                      Java.  It 
is open source and it is pub lir

03:54:47.603 --> 03:54:53.768
ed   ed       lished as a Java A
R.  And the fact that in Kotlin 

03:54:53.769 --> 03:54:58.745
you can add the dependency and 
use it for free, there is no 

03:54:58.746 --> 03:55:02.609
extra steps.  That's really a
maze ing

03:55:06.749 --> 03:55:08.749
.  You know what,

03:55:10.641 --> 03:55:13.243
 I jers      just remembered 
somethingism auto' not          

03:55:13.534 --> 03:55:16.057
    ism     I'm not a Kotlin 
developer.  

03:55:16.058 --> 03:55:18.226
   Â» DAVE SMITH:  Is there 
something in the IDE that we can

03:55:18.343 --> 03:55:20.259
 use to help you around?  
   Â» RENATO MANGINI DIAS:  Yes,

03:55:20.260 --> 03:55:26.727
 .   ,.    .  Lucky ily I kept 
it class here.  I add a little 

03:55:26.728 --> 03:55:33.975
bit more of correctness to it.  
And I will copy my class control

03:55:34.312 --> 03:55:39.177
 C, alt tab, select everything 
on the Kotlin side.  This is 

03:55:39.178 --> 03:55:47.433
copy file, okay?  And I will 
control V.  And boom.  Here it 

03:55:47.434 --> 03:55:50.135
is.  
   Â» DAVE SMITH:  Automatically 

03:55:50.136 --> 03:55:54.792
converted in to Kotlin.  You are
 a Kotlin developer you just 

03:55:54.793 --> 03:55:56.895
didn't know.  
   Â» RENATO MANGINI DIAS:  I 

03:55:56.896 --> 03:56:00.432
just came a Kotlin developer.  
This is great.  You don't trust 

03:56:00.433 --> 03:56:04.212
me, right?  Of course, you don't
.  I wouldn't trust myself.  

03:56:04.213 --> 03:56:09.600
Let's confer that it is working.
  Currently I have the blue LED 

03:56:09.601 --> 03:56:13.710
here.  So let me change that to 
the what color do you want?  

03:56:13.711 --> 03:56:21.387
Red?  Okay.  Let's do red.  It 
shows better on the TV.  See I'm

03:56:21.618 --> 03:56:23.785
 learning the Kotlin      cot   
         ing           running 

03:56:23.786 --> 03:56:28.202
the Kotlin app.  I'm not running
 the Java app

03:56:40.383 --> 03:56:42.383
.  Launching

03:56:47.005 --> 03:56:50.550
.  Boom.  They we go.  
   (Applause.) 

03:56:50.551 --> 03:56:53.412
   Â» DAVE SMITH:  Anies       
Nicely done sir.  Let's switch 

03:56:53.413 --> 03:56:55.413
back to the slides please

03:56:57.683 --> 03:57:03.423
.  Okay.  So we have given you a
 very quick tour today of the 

03:57:03.424 --> 03:57:06.004
new features in Android Studio 
that are specific to Android 

03:57:06.005 --> 03:57:09.795
things as well as just a very 
simple walk through of how you 

03:57:09.796 --> 03:57:12.703
can get started and how quick 
and easy it is to get up and run

03:57:13.030 --> 03:57:16.148
ning from 0 to a working project
 use ing all the tools that are 

03:57:16.149 --> 03:57:18.355
available here.  A couple of 
things while you are here at the

03:57:18.356 --> 03:57:20.662
 conference that I think you sh 
you had check out first all we 

03:57:20.663 --> 03:57:23.663
are going to be in office hours 
immediately after this.  So if 

03:57:23.664 --> 03:57:28.028
we don't have an opportunity to 
answer your questions during Q 

03:57:28.029 --> 03:57:30.990
and A, you can follow us over 
there and we can continue the 

03:57:30.991 --> 03:57:33.402
discussion.  We have a bunch of 
and Croyed          Android 

03:57:33.403 --> 03:57:37.634
things in the weed      code lab
 special         session.   

03:57:37.772 --> 03:57:41.707
         section.  So check 
dhoes       those out.  Once you

03:57:41.888 --> 03:57:43.879
 get home and you want to start 
doing some of this development 

03:57:43.880 --> 03:57:47.212
for yourself check out the 
Android things documentation 

03:57:47.213 --> 03:57:51.482
which is on the  he Android dev 
website.  Down Joed the         

03:57:51.606 --> 03:57:56.624
        joun     .  Download the
 new and dread         Android 

03:57:56.625 --> 03:58:02.931
Studio Canary and joint IoT 
developers community, us and 

03:58:02.932 --> 03:58:06.062
other effects         folks from
 the other team, are on this 

03:58:06.063 --> 03:58:10.345
answering questions and pep     
helping folks out and watching 

03:58:10.346 --> 03:58:15.215
you shaur       share your cool 
projects.  Check that out as 

03:58:15.216 --> 03:58:17.216
well.  It looks like we have 
some time for questions.  If you

03:58:17.670 --> 03:58:21.747
 do have queues        questions
 feel free to come up to the 

03:58:21.748 --> 03:58:25.138
mics.  Otherwise thank you very 
much for your time today.  

03:58:25.139 --> 03:58:27.139
   (Applause.)

03:58:29.518 --> 03:58:31.518
 questions?  Okay.  We got one 
come ing down

03:58:34.414 --> 03:58:36.490
.  
   &gt;&gt; Hey.  Unless I missed 

03:58:36.491 --> 03:58:40.431
something, when you took the 
temperature from the sensor you 

03:58:40.432 --> 03:58:44.172
didn't -- there was no middle 
step between putting it in to 

03:58:44.173 --> 03:58:48.863
the display.  So I didn't see a 
cast to a string, figure ing out

03:58:48.968 --> 03:58:51.632
 where the floating point went. 

03:58:51.633 --> 03:58:54.232
   (Talking at the same time). 
   &gt;&gt; How did that go from the 

03:58:54.233 --> 03:58:59.785
sensor which is probably a 
decimal to the -- to that -- 

03:58:59.786 --> 03:59:03.340
   Â» RENATO MANGINI DIAS:  
Display is also a dryer we 

03:59:03.341 --> 03:59:05.989
provided  ed                    
 driver we provided and it has 

03:59:05.990 --> 03:59:08.778
several joe     overrides of the
 method.  It has one tore a 

03:59:08.779 --> 03:59:12.137
string which                    
 for a string.  It gets furs

03:59:12.261 --> 03:59:14.899
      first four characters of 
the string but it also has one 

03:59:14.900 --> 03:59:18.452
-- one for double, for INT and 
for some other data stipes 

03:59:18.591 --> 03:59:20.174
       types. 
   &gt;&gt; That's dak     exactly 

03:59:20.175 --> 03:59:23.291
what I wanted.  Thank you.  
   Â» DAVE SMITH:  One other here

03:59:23.547 --> 03:59:25.802
.  Stay over here. 
   &gt;&gt; Quick question.  If I want

03:59:26.270 --> 03:59:32.022
 to customize the OSP version of
 Android things to my customer 

03:59:32.023 --> 03:59:38.082
hardware how much work do I have
 to put in the row to connect 

03:59:38.083 --> 03:59:43.039
things up to the Java API. 
   Â» DAVE SMITH:  Could you ask 

03:59:43.040 --> 03:59:46.253
the question again?  
   &gt;&gt; How much -- low end 

03:59:46.254 --> 03:59:50.192
interfaces and drivers for the I
TC or other per rif kals that I 

03:59:50.193 --> 03:59:54.477
have in order to connect to my 
upper layer APIs if I have a 

03:59:54.478 --> 03:59:56.982
custom hardware?  
   Â» DAVE SMITH:  You are talk

03:59:57.124 --> 04:00:01.650
ing about a custom peripheral?  
   &gt;&gt; Personal box that has one 

04:00:01.651 --> 04:00:05.860
CPU and a bunch of peripherals 
that are attached to it. 

04:00:05.861 --> 04:00:08.045
   Â» DAVE SMITH:  Probably the 
most common way that we see 

04:00:08.046 --> 04:00:14.440
folks doing that is either 
implimenting a UR interface or S

04:00:14.569 --> 04:00:17.067
PI interface and the anythings
           nice things about 

04:00:17.068 --> 04:00:20.103
those they are blank sheet pro
could tolls that you          

04:00:20.265 --> 04:00:23.171
           could           to   
       protocol      to        

04:00:23.172 --> 04:00:30.366
sheet protoll     toll     tocol
s that you can use.  

04:00:30.367 --> 04:00:33.644
   &gt;&gt; Krooifror           Driver
 hardware will cover Android 

04:00:33.645 --> 04:00:36.881
things or do I have to develop 
everything myself or only part 

04:00:36.882 --> 04:00:39.824
of the AOSB version. 
   Â» DAVE SMITH:  All the 

04:00:39.825 --> 04:00:43.185
functionality to actually 
connect to the physical pins on 

04:00:43.186 --> 04:00:47.470
the device, for instance, the UR
 those ooin      APIs are bubble

04:00:47.756 --> 04:00:51.869
d all the wail      way up to 
Java.  You is    have to define 

04:00:51.870 --> 04:00:54.557
how the want the data to 
transeak between two            

04:00:54.736 --> 04:00:58.800
          transblgt    act twoen
 the two         between        

04:00:58.801 --> 04:01:01.036
 between               between 
the two. 

04:01:01.037 --> 04:01:05.934
   &gt;&gt; Standard Android apes, ape
           APIs, APIs would have

04:01:06.309 --> 04:01:08.506
 more stuff especially if you 
don't have a dpis play.  Seems

04:01:08.655 --> 04:01:13.208
                   diss gs   
      display.  There may be 

04:01:13.209 --> 04:01:16.447
standard everies that may not 
apply -- your tishgs, developer

04:01:17.034 --> 04:01:19.587
                        IT 
developer and use ing that's 

04:01:19.588 --> 04:01:22.240
standard ape     APIs how do I 
know what methods are live 

04:01:22.241 --> 04:01:27.638
versus what are only for other 
deviceses   that are bigger?  

04:01:27.639 --> 04:01:30.361
   Â» DAVE SMITH:  So I would say
 bedy fault         dy   dy   dy

04:01:30.540 --> 04:01:35.383
    default assume it all works.
  There is nothing that we have 

04:01:35.384 --> 04:01:42.297
Is abled  ed            disabled
  ed   d out Android API area.  

04:01:42.298 --> 04:01:46.271
With the exception of any APIs 
that require some sort of UI 

04:01:46.272 --> 04:01:49.769
dialogue to display.  So things 
like run time permissions, 

04:01:49.770 --> 04:01:53.415
another API that's nonfunctional
 is owl the         all the 

04:01:53.416 --> 04:01:58.506
notification I ams       I ams. 
         APIs.  There is no 

04:01:58.507 --> 04:02:02.799
system API to display.  So out
side of those display sent treak

04:02:03.078 --> 04:02:05.955
          centric APIs 
everything that you are used to 

04:02:05.956 --> 04:02:12.199
developing for oncore should 
function on Android as well.  

04:02:12.200 --> 04:02:18.158
   &gt;&gt; So the APK runs as a 
launcher.  How do you manage if 

04:02:18.159 --> 04:02:25.256
you want to have multiple apps? 
 Your own lawn  uncher has to 

04:02:25.257 --> 04:02:26.708
code other apps. 
   &gt;&gt;         ?  

04:02:26.709 --> 04:02:30.591
   &gt;&gt; Yes the way the system is 
designed there is a main sbri 

04:02:30.592 --> 04:02:34.207
point            bri     entry 
pount       point because of 

04:02:34.208 --> 04:02:37.534
that one activity.  The system 
will pick one for you.  You want

04:02:37.649 --> 04:02:39.784
 to make sure that you choose 
one entry point in to there and 

04:02:39.785 --> 04:02:43.740
then from your code you can 
expand that out.  Now as far as 

04:02:43.741 --> 04:02:46.449
getting them installed right now
 it is a bit of a manual process

04:02:47.667 --> 04:02:50.482
.  So you could build those 
multiple APKs and then essential

04:02:51.541 --> 04:02:56.242
ly A to B install all of they
      them or if you have 

04:02:56.243 --> 04:03:01.600
multiple modules in to the AP 
studio.  When we could       do 

04:03:01.601 --> 04:03:05.256
some introductions with the 
developer consoles laid inner   

04:03:05.402 --> 04:03:08.669
         later in the year.  You
 have to manually install them 

04:03:08.670 --> 04:03:11.291
if you were doing them on a 
regular Android device.  From a 

04:03:11.292 --> 04:03:15.377
launching perspective we give 
you that one instent         

04:03:15.378 --> 04:03:19.123
intent and then you fan it out 
in your code from there.  Any --

04:03:19.449 --> 04:03:24.613
    other questions?  All right.
  Thanks everyone.  

04:03:24.614 --> 04:03:25.300
   Â» RENATO MANGINI DIAS:  Thank
 you.  

04:03:25.301 --> 04:03:31.999
   (Applause.)                  

04:03:32.000 --> 04:03:35.266
Judge. 
   &gt;&gt;                 

04:03:35.267 --> 04:03:35.576
   &gt;&gt;. 
   &gt;&gt;. 

04:03:35.577 --> 04:03:35.822
   &gt;&gt;. 
   &gt;&gt;. 

04:03:35.823 --> 04:03:36.105
   &gt;&gt;. 
   &gt;&gt;. 

04:03:36.106 --> 04:03:36.369
   &gt;&gt;. 
   &gt;&gt;. 

04:03:36.370 --> 04:03:36.660
   &gt;&gt;. 
   &gt;&gt;. 

04:03:36.661 --> 04:03:36.971
   &gt;&gt;. 
   &gt;&gt;. 

04:03:36.972 --> 04:03:38.972
   &gt;&gt;. 
   &gt;&gt;

04:08:25.351 --> 04:08:26.351
RAW FILE

04:08:25.351 --> 04:08:27.684
GOOGLE I/O 2017
SAN JOSE, CALIFORNIA

04:08:25.351 --> 04:08:27.017
MAY 18, 2017
3:30 P.M. CST

04:08:25.351 --> 04:08:27.217
STAGE 3 
DEFINING MULTIMODAL 

04:08:25.351 --> 04:08:28.217
INTERACTIONS:  ONE SIZE DOES NOT
 FIT ALL   

04:08:25.351 --> 04:08:28.617
Services provided by:
         Caption First, Inc.

04:08:25.351 --> 04:08:28.617
         P.O. Box 3066
         Monument, CO 80132

04:08:25.351 --> 04:08:28.617
         1-877-825-5234
         +001-719-481-9835

04:08:25.351 --> 04:08:27.284
         Www.captionfirst.com

04:08:25.351 --> 04:08:27.684
***
This text is being provided in a

04:08:25.351 --> 04:08:28.817
 rough draft format.  
Communication Access Realtime 

04:08:25.351 --> 04:08:28.951
Translation (CART) is provided 
in order to facilitate 

04:08:25.351 --> 04:08:29.484
communication accessibility and 
may not be a totally verbatim 

04:08:25.351 --> 04:08:27.417
record of the proceedings. 
*** 

04:08:25.351 --> 04:08:27.351
&gt;&gt;  
   &gt;&gt;

04:08:30.217 --> 04:08:34.093
 Straw       Ol    Mull

04:08:38.977 --> 04:08:40.977
 timodal

04:28:08.918 --> 04:28:10.918
        . 
   &gt;&gt;

04:28:13.741 --> 04:28:15.741
         . 
   &gt;&gt;

04:29:20.794 --> 04:29:22.794
 Where is the other clicker? 

04:29:34.810 --> 04:29:41.806
 Oh, .  Thank you.  No problem. 
 No problem.  Okay.  

04:29:41.807 --> 04:29:43.385
   Â» ADRIANA OLMOS ANTILLON:  
Hell le everyone.               

04:29:43.386 --> 04:29:45.944
o everyone.  Thank you so much 
for join our session.  It is 

04:29:45.945 --> 04:29:49.238
excite ing to be here and 
welcome to our session on 

04:29:49.239 --> 04:29:53.317
multimodal interactions.  So we 
would like to start introducing 

04:29:53.318 --> 04:29:56.761
my colleague Jared Strawderman. 
 He is part of the 

04:29:56.762 --> 04:30:01.274
conversational design team and 
he is designer for the Google a

04:30:01.988 --> 04:30:04.416
ssistant.  
   Â» JARED STRAWDERMAN:  And 

04:30:04.417 --> 04:30:10.071
this is my e stemmed colleague 
Adriana Olmos Antillon.  She a 

04:30:10.072 --> 04:30:13.221
productor designer where she is 
in charge of the design effort 

04:30:13.222 --> 04:30:18.271
for third party multimodal 
experiences.  Before we dive 

04:30:18.272 --> 04:30:22.666
right in I wanted to share a 
spernl        personal store y, 

04:30:22.667 --> 04:30:26.597
a story that I feel capture as 
real world example of the moil

04:30:26.870 --> 04:30:30.921
      multimodal.  I was trifr
       traveling to Asheville 

04:30:30.922 --> 04:30:32.982
north Carol lie in October to   
                    kearl 

04:30:32.983 --> 04:30:35.343
li              North Carolina 
to attend a wedding of two of my

04:30:35.487 --> 04:30:39.464
 friends.  I am originally from 
West Virginia and north Carol 

04:30:39.465 --> 04:30:40.527
lie in            kearl 
li              North Carolina 

04:30:40.528 --> 04:30:44.549
is not that far away.  I didn't 
have a good idea where to get 

04:30:44.550 --> 04:30:50.140
dinner.  My hotel had a concierg
e desk and I talked to the conci

04:30:50.299 --> 04:30:53.926
erge about what you liked and 
didn't like.  We went back and 

04:30:53.927 --> 04:30:57.293
forth and he was asking me 
questions about how far I was 

04:30:57.294 --> 04:31:00.209
willing to go and whether I had 
a car and after he talked to me

04:31:00.705 --> 04:31:03.710
    for     me for awhile, he 
did something bre interest

04:31:04.300 --> 04:31:07.344
              very interesting. 
 He narrowed it down to a few 

04:31:07.345 --> 04:31:09.486
strunt        straunts and then
                   straunts and 

04:31:09.487 --> 04:31:13.515
then                   
restaurants and then handed over

04:31:13.516 --> 04:31:16.523
 the menus to those restaurants 
and I made a decision and I told

04:31:17.522 --> 04:31:21.464
 the cocierge that we had decide
d to go to this southern 

04:31:21.465 --> 04:31:24.610
restaurant at which time he 
actually resumed the dialogue 

04:31:24.611 --> 04:31:27.464
between me and him and he said 
when you want to go how many 

04:31:27.465 --> 04:31:29.685
people are going and he made the
 is he rememberization       

04:31:29.828 --> 04:31:33.880
                reservation for 
me.  The Voice part is represent

04:31:34.021 --> 04:31:40.644
ed by the dialogue between me 
and the concierge and the I have

04:31:40.645 --> 04:31:46.995
 sthal            visual part 
represented by the menus.    

04:31:47.174 --> 04:31:51.314
Designing multimodal experiences
 is an interdisciplinary effort.

04:31:51.315 --> 04:31:55.179
  My background is in Voice 
design.  So I have been design

04:31:55.672 --> 04:31:58.522
ing conversational interfaceor  
s for several years.  Anything 

04:31:58.523 --> 04:32:02.023
that involves spoken input and 
the things that you hear, that's

04:32:02.507 --> 04:32:08.069
 my area of expertise.  Adre    
dre    dre    dre    driana 

04:32:08.070 --> 04:32:11.524
comes from a more traditional 
web design act ground           

04:32:11.884 --> 04:32:15.439
 background.  But it takes 
combine ing these bo    two erts

04:32:15.816 --> 04:32:20.094
      efforts along with things 
like motion design, UX write ing

04:32:20.479 --> 04:32:28.854
 and visual design to create a 
really cohesive monothyic 

04:32:28.855 --> 04:32:32.846
experience.  Before        Let's
 take a quick step back and talk

04:32:33.156 --> 04:32:37.984
 about how we as humanings     
ing     beings experience things

04:32:38.150 --> 04:32:40.279
 in the real world.  
   Â» ADRIANA OLMOS ANTILLON:  

04:32:40.280 --> 04:32:42.886
Imagine the last time you were 
walking on the beach.  You could

04:32:43.030 --> 04:32:48.850
 hear the oceans and touch it.  
And it is only senses trigger 

04:32:48.851 --> 04:32:56.788
that -- it makes it compelling 
experience.  Flight controls is 

04:32:56.789 --> 04:33:03.223
not -- mostly three main senses.
  Site, hearing    g        

04:33:04.060 --> 04:33:08.490
      Sight hearing and touch.  
We consume controls is based on 

04:33:08.491 --> 04:33:12.889
sight and hearing.  So we are 
going to be focusing in these 

04:33:12.890 --> 04:33:18.123
two.     
   Â» JARED STRAWDERMAN:  In 

04:33:18.124 --> 04:33:21.767
order to have any chance at all 
of designing a compelling 

04:33:21.768 --> 04:33:25.950
multimodal experience an 
absolute prerequisite for you to

04:33:26.083 --> 04:33:29.971
 know what modallity does well 
and what it does poorly.  For 

04:33:29.972 --> 04:33:34.108
example, Voice does some things 
really really extremely well and

04:33:34.390 --> 04:33:38.266
 other things it is abjectly   
ly   ly table         ly   ly 

04:33:38.267 --> 04:33:41.652
terrible at.  And it is really 
important for you to recognize 

04:33:41.653 --> 04:33:44.033
what those are.  You can re
letter vaj           

04:33:44.034 --> 04:33:47.458
letter           leverage the 
strengths and avoid the 

04:33:47.459 --> 04:33:49.672
availability              
liability ies.  So let's start 

04:33:49.673 --> 04:33:58.069
with Voice.  So Voice is very, 
very good at having a menu 

04:33:58.070 --> 04:34:00.070
structure and provide ing 
directs access    

04:34:05.091 --> 04:34:09.224
t               e ing     ing 
direct access to what you need. 

04:34:05.091 --> 04:34:05.482
 I used to think that the mobile
 bsh     -- my mobile device was

04:34:05.483 --> 04:34:11.150
 the epitomy of convenience and 
I have really quick access to 

04:34:11.151 --> 04:34:14.357
information and every facet of 
my life is on this gut     

04:34:14.358 --> 04:34:17.213
beautiful device but then when I
 started   ed   ed interacting 

04:34:17.214 --> 04:34:23.936
with going get         Google 
Home across the room I was able 

04:34:23.937 --> 04:34:28.762
to ask it across the room what's
 the score of Virginia 

04:34:28.763 --> 04:34:32.856
basketball and it would give it 
to me.  Compare ing it to pull

04:34:33.009 --> 04:34:37.663
ing my phone out of my pocket 
and unlock eking     ing       

04:34:37.909 --> 04:34:39.978
    lock     locking it and -- 
there is the score.  When you do

04:34:39.979 --> 04:34:42.975
 that with a far field 
interaction it makes pulling the

04:34:43.426 --> 04:34:49.535
 phone out of your pocket seem 
intoo       too inconvenient   

04:34:49.901 --> 04:34:51.931
       vein.        vein  
   vooent.  As compel          

04:34:52.073 --> 04:34:55.749
        convenients  as compel
ling and excite ing as the 

04:34:55.750 --> 04:34:58.407
benefits Voice are it doesn't 
woman without         come 

04:34:58.408 --> 04:35:01.465
without                    
comwithout            come 

04:35:01.466 --> 04:35:07.488
without Is    its draw whacks. 
         back.  Usersen   can 

04:35:07.489 --> 04:35:12.497
only attain a finite amount of 
content in their memories.  Is

04:35:13.206 --> 04:35:16.278
    You have to manage that.  So
 for those of you who may have a

04:35:16.651 --> 04:35:19.653
 visual design background or for
 those of you who have developed

04:35:19.811 --> 04:35:24.209
 websites and mobile application
s imagine if the only visual 

04:35:24.210 --> 04:35:27.165
affordance that you had to 
present content to your users 

04:35:27.166 --> 04:35:31.444
was a scrolling ticker that goes
 across the screen and the user 

04:35:31.445 --> 04:35:36.889
can only remember that text that
 just e var possible        

04:35:37.043 --> 04:35:39.800
      vaP pore right       e 
rated on the edge of the sken

04:35:40.637 --> 04:35:43.776
      screen to help them get 
through the interaction and this

04:35:43.906 --> 04:35:47.325
 is what we as designers have to
 manage.  And I'm not even sure 

04:35:47.326 --> 04:35:50.209
if it had a chance to cycle all 
the way through but that's what 

04:35:50.210 --> 04:35:53.879
the ticker said.  So lufrs      
ously content           ly      

04:35:54.613 --> 04:35:59.233
 big chunks of content are 
better presented and lot easier 

04:35:59.234 --> 04:36:01.605
for user  r  rs to absorb on a

04:36:06.404 --> 04:36:10.070
 static screen.  Say I want to 
ask for the hours for a 

04:36:06.404 --> 04:36:10.187
restaurant in and     San hey 
sew.            Jose.  Here is 

04:36:10.188 --> 04:36:13.518
one approach to answering that 
question.  

04:36:13.519 --> 04:36:17.612
   &gt;&gt; Black sheep is open today 
from 5 o'clock to 930  :30 p.m. 

04:36:17.613 --> 04:36:21.356
and tomorrow from 5 o'clock to 
10 p.m.  On Saturday from 0   5 

04:36:21.357 --> 04:36:26.071
o'clock to 10 p.m.  On Sunday 
from 10 ament       a.m. do 2 

04:36:26.072 --> 04:36:31.323
p.m. and again from 5 o'clock to
 9 p.m.  And they are closed on 

04:36:31.324 --> 04:36:34.154
Monday.  
   Â» JARED STRAWDERMAN:  While 

04:36:34.155 --> 04:36:37.366
it is a good idea -- when you 
present so much content that the

04:36:37.367 --> 04:36:39.874
 user can't block any of it 
becomes

04:36:43.383 --> 04:36:46.716
 meaningless.  Here is another 
approach to that.  

04:36:43.383 --> 04:36:47.546
   &gt;&gt; Black sheep is open today 
from 5 o'clock to 930  :30 p.m. 

04:36:47.698 --> 04:36:50.919
 Here are the hours for the rest
 of the weekT so   . 

04:36:50.920 --> 04:36:54.000
   Â» JARED STRAWDERMAN:  Do you 
give the more salient 

04:36:54.001 --> 04:36:56.978
informations              pieces
 of informations up sfront

04:36:57.394 --> 04:37:02.318
        front and you refer to 
the deans       screen for more 

04:37:02.319 --> 04:37:05.998
dense content that the user can 
use ats their leisure and what 

04:37:05.999 --> 04:37:09.604
are the drawbacks of use ing 
Voices and interfaces is when I 

04:37:09.605 --> 04:37:13.916
talk to Google assistant, people
 can hear me.  That's kind of 

04:37:13.917 --> 04:37:16.857
how talking worings            
ing    ing works.  Imagine if 

04:37:16.858 --> 04:37:21.015
the person next to you right 
here in the middle of Adrian na

04:37:21.775 --> 04:37:25.615
   a about to say something 
provide         profound and 

04:37:25.616 --> 04:37:30.438
anoise     maze ing and decides 
to pull out a phone and asks 

04:37:30.439 --> 04:37:34.128
Google assistant what the name 
of the bass ket   s            

04:37:34.311 --> 04:37:39.686
      score the bass kel     ket
ball game was on Tuesday.  And 

04:37:39.687 --> 04:37:43.605
even though the devices is cap
able of it is really mimics the 

04:37:43.606 --> 04:37:46.915
range and access of Voice 
interactions in public settings 

04:37:46.916 --> 04:37:50.316
like this.  By the way if you 
really interested in this topic 

04:37:50.317 --> 04:37:54.612
there is an incredible session 
hamming         happening at 330

04:37:54.995 --> 04:37:59.410
  :30 today on stage 5 and he is
 going to be talking about the 

04:37:59.411 --> 04:38:01.758
right use cases, right Voice 
interactions for your 

04:38:01.759 --> 04:38:03.759
application.  I highly recommend
 it

04:38:06.432 --> 04:38:07.586
.  
   Â» ADRIANA OLMOS ANTILLON:  

04:38:07.587 --> 04:38:12.135
Visual interfaces can be as 
permanent or complex and dynamic

04:38:12.307 --> 04:38:15.448
 as wes     we want it to be.  
In fact, it is a -- there is a 

04:38:15.449 --> 04:38:19.195
lot of information that can be 
delivered.  Take, for instance, 

04:38:19.196 --> 04:38:23.197
a sample as classic light and we
 can control the time ing of the

04:38:23.376 --> 04:38:26.931
 red to green in order to convey
 some meaning or be as 

04:38:26.932 --> 04:38:32.028
sophisticated as (inaudible) 
where you can consume, follow up

04:38:32.198 --> 04:38:37.668
 what is happening, what is 
trending and what is bad or not 

04:38:37.669 --> 04:38:39.997
bad video.  There are a lot 
things that you can do in one 

04:38:39.998 --> 04:38:45.565
screen.  Now the question is how
 are you go        you going to 

04:38:45.566 --> 04:38:47.957
be provide ing   e ing     ing 
visual information in a way that

04:38:48.158 --> 04:38:53.323
 is beyond passive consumption 
and that's actually for the 

04:38:53.324 --> 04:38:57.573
interactive experiences and one 
of those is true conversation 

04:38:57.574 --> 04:39:01.654
and in a natural conversation 
that we have with people we 

04:39:01.655 --> 04:39:05.530
point things, we describe things
.  And this is back and forth 

04:39:05.531 --> 04:39:11.278
among human beses   ings.  So 
just happen natural.  And the 

04:39:11.279 --> 04:39:14.430
thing is like we start thinking 
about applications and how map

04:39:14.800 --> 04:39:18.886
ping     ing             happen
ing on mobile, they throw a lot 

04:39:18.887 --> 04:39:22.157
of information and convey that 
but we have to be careful.  For 

04:39:22.158 --> 04:39:29.702
instance, l   the mobile app 
for, there are some things that 

04:39:29.703 --> 04:39:33.160
I can quickly do but if you 
remember the last time you are 

04:39:33.161 --> 04:39:36.327
walking to the store, we actual
ly have a conversation with the 

04:39:36.328 --> 04:39:40.448
person and then information, 
information that is delivered 

04:39:40.449 --> 04:39:44.281
back and forth.  So if you put 
those two together they real

04:39:44.776 --> 04:39:46.776
      look really different.  
And in fact,

04:39:49.443 --> 04:39:53.523
 probably small person would 
chat from experience with the 

04:39:53.524 --> 04:39:59.059
assistant.  So one important 
piece of information you take in

04:39:59.406 --> 04:40:03.993
 to account is the person have a
 oP   n app on the foint       

04:40:04.166 --> 04:40:07.325
 he phone, should be the start
ing point and remember you 

04:40:07.326 --> 04:40:10.718
should be -- in order to start 
building your applications

04:40:16.262 --> 04:40:20.759
.  So one of the directions is 
not something -- and it is -- 

04:40:20.760 --> 04:40:22.760
and how space in the past

04:40:26.299 --> 04:40:31.548
.  Found in the background and 
then you have the -- and then 

04:40:31.549 --> 04:40:34.977
you follow along.  So one of the
 things happening and multimodal

04:40:35.391 --> 04:40:40.183
 experience as well.  We also 
experience asking you for 

04:40:40.184 --> 04:40:49.005
questions and then -- but when 
we have to -- we have to think 

04:40:49.006 --> 04:40:52.409
how are you going to be combine
 ing these two modality ies in a

04:40:52.523 --> 04:41:01.207
 way that is not bad to the user
.  Sense of highways          

04:41:01.208 --> 04:41:08.749
these mow dality ies.  Various 
visual and this is going to the 

04:41:08.750 --> 04:41:13.551
tab -- because we -- we know how
 to design for all.  And that is

04:41:14.433 --> 04:41:17.944
 the decision this.  It is not 
that simple and there is a lot 

04:41:17.945 --> 04:41:20.062
of factors that we knee to take
              need to take in to

04:41:20.063 --> 04:41:24.507
 consideration.    
So we are going to be talking 

04:41:24.508 --> 04:41:28.493
about these factors that we want
ed to take and position, when we

04:41:28.886 --> 04:41:32.204
 think of all these platforms 
that we are going to be design

04:41:32.461 --> 04:41:34.882
ing for.  
   Â» JARED STRAWDERMAN:  We want

04:41:35.469 --> 04:41:37.386
ed to talk a little bit about 
the factors that we have 

04:41:37.387 --> 04:41:41.057
identify ied to help you think 
about how your experiences will 

04:41:41.058 --> 04:41:45.952
manifest as going gel a       
going             Google assist

04:41:46.290 --> 04:41:50.952
ant comes to more surfaces and 
the fact is device designed to 

04:41:50.953 --> 04:41:55.371
used at the used walking, run
ning or driving and some other 

04:41:55.372 --> 04:41:58.800
situation that makes the screen 
otherwise enact es sibl         

04:41:59.346 --> 04:42:00.974
    in ak ccess    
   accessible.  Think of your 

04:42:00.975 --> 04:42:04.669
phone as apposed to     ed
         pose        opposed to 

04:42:04.670 --> 04:42:08.477
the TV.  Is the device designed 
to be use in private or anywhere

04:42:08.606 --> 04:42:11.566
 or a one-to-one relationship 
between the user and the device 

04:42:11.567 --> 04:42:15.486
like your phone or is it design
ed to shared among a group of 

04:42:15.487 --> 04:42:21.449
users like the Google Home.  The
 next is prox yilt,      imity. 

04:42:21.604 --> 04:42:24.695
 So are you close enough to 
quickly tap on the device to 

04:42:24.696 --> 04:42:30.900
interact with it.  As opposed to
 something like the Google Home 

04:42:30.901 --> 04:42:35.410
or your TV it is optimized for 
far field interactions.  The 

04:42:35.411 --> 04:42:40.407
next is audio capability, does 
your device just have a very 

04:42:40.408 --> 04:42:42.740
small Mick that be              
mic that can capture speech from

04:42:43.008 --> 04:42:47.081
 a few feet away or does it have
 an entire array and designed to

04:42:47.225 --> 04:42:50.226
 capture speech from across the 
room and, of course, visual 

04:42:50.227 --> 04:42:54.377
capability, do you have a fall 
ergon

04:42:59.593 --> 04:43:03.126
omic kwar        ic   ic 
question            ic   ic 

04:42:59.593 --> 04:43:04.475
QWERTY key dward      board or 
something more primitive like a 

04:43:04.476 --> 04:43:09.304
V pad on a TV row mote and    
          remote and visual out

04:43:09.563 --> 04:43:12.739
put and that boils down to 
screen size.  So these are 

04:43:12.740 --> 04:43:18.015
factors that we want you to 
consider and keep in mind and we

04:43:18.698 --> 04:43:21.594
 are going to go through a few 
of these and where we anticipate

04:43:21.714 --> 04:43:25.221
 that it may show up.  So keep 
in mind this is kind of a future

04:43:26.379 --> 04:43:30.740
 looking forward looking 
presentation to give you some 

04:43:30.741 --> 04:43:34.154
guidelines by which to 
anticipate how to deploy your 

04:43:34.155 --> 04:43:39.895
actions on other surfaces.  So 
let's talk about Google Home 

04:43:39.896 --> 04:43:43.488
since it was stuch       such 
prominute in any eventually     

04:43:43.489 --> 04:43:46.463
 ly                       
min         prominently in 

04:43:46.464 --> 04:43:49.270
yesterday's keynote and it is 
going a lot of traction in the 

04:43:49.271 --> 04:43:54.076
marketplace.  I mentioned before
 how Voice is really incredible 

04:43:54.077 --> 04:43:58.255
at flattening the infrastructure
 and there is another upside of 

04:43:58.256 --> 04:44:00.640
speech is that I think is real 
ri   ly important to present in 

04:44:00.641 --> 04:44:04.337
the context of Google Home and 
it is that speech, what I am do

04:44:04.499 --> 04:44:06.499
ing right now that is the 
interface.  You are ability

04:44:07.321 --> 04:44:11.509
         able to interact with 
Google Home in way that you have

04:44:11.684 --> 04:44:14.407
 been doing since kwo     two 
years old.  There aren't any 

04:44:14.408 --> 04:44:17.960
manuals.  There is no tutorials 
and there is no learning curve. 

04:44:18.142 --> 04:44:21.654
 All you have to do is know what
 kinds of features going

04:44:21.976 --> 04:44:25.151
     Google assistant generally 
supports like weather and 

04:44:25.152 --> 04:44:30.706
supports.  And you just ask for 
those things the which       way

04:44:30.975 --> 04:44:33.429
 you would ask another person.  
So if we look at some of the 

04:44:33.430 --> 04:44:37.327
factors that I outlined earlier,
 if we look about whether the 

04:44:37.328 --> 04:44:40.868
users in motion they are not.  
You put --    your Google Home 

04:44:40.869 --> 04:44:45.136
on a kitchen counter or night 
stand and it is usually planted

04:44:45.307 --> 04:44:49.242
   ed   ed there for quite 
awhile.  Google Home is the 

04:44:49.243 --> 04:44:52.737
deplored in the private setting 
but it is shared among a group 

04:44:52.738 --> 04:44:55.846
of users.  So it is somewhat 
private.  And you don't have to 

04:44:55.847 --> 04:44:58.676
be close enough to interact with
 it.  It is hospitalize      

04:44:59.334 --> 04:45:02.214
       optimized for far field 
interaction and if we look at 

04:45:02.215 --> 04:45:07.097
input, output capability ies it 
has strong capability ies for 

04:45:07.098 --> 04:45:11.078
audio book, input andout    out
put but very little on the 

04:45:11.079 --> 04:45:16.106
visual side.  We three kind of 
overarching guidelines for how 

04:45:16.107 --> 04:45:20.194
to design for assistant in 
action on Google Home.  And the 

04:45:20.195 --> 04:45:27.570
first one is don't read, listen 
and what I mean by that is as 

04:45:27.571 --> 04:45:30.980
you build actions and as you 
develop experiences on Google 

04:45:30.981 --> 04:45:35.667
Home you may be pulling content 
from some online source or 

04:45:35.668 --> 04:45:39.550
something and a lot of resources
 are optimized for writ content,

04:45:39.788 --> 04:45:44.041
         ten content.  They are 
designed   ed   ed to be read 

04:45:44.042 --> 04:45:48.165
and you maybe something to think
 you can just sake      take 

04:45:48.166 --> 04:45:51.096
these sources and run them 
through a text-to-speech engine 

04:45:51.097 --> 04:45:53.523
and you have your Voice 
interface.  It is no, the that 

04:45:53.524 --> 04:45:56.788
simple.  Let's           ilar
                            It 

04:45:56.789 --> 04:46:01.167
is not that simple.  Weather 
boer cast           forecast 

04:46:01.168 --> 04:46:04.759
this string of text makes 
perfect sense to you.  If I were

04:46:04.760 --> 04:46:09.512
 to Translate this since       
sing      string of text in to 

04:46:09.513 --> 04:46:13.895
something that is appropriate 
for spokesen language.  In 

04:46:13.896 --> 04:46:20.451
Mountain View it is sunny 77 
degrees and winds knot      knot

04:46:21.394 --> 04:46:28.525
      north nert      north west
 10 to 15 miles an hour.  

04:46:28.526 --> 04:46:31.186
   &gt;&gt; (Off microphone). 
   Â» JARED STRAWDERMAN:  Totally

04:46:31.711 --> 04:46:36.489
 incomprehensible.  So just -- 
when you get a data source and 

04:46:36.490 --> 04:46:39.698
you run it through make sure it 
is appropriate for spoken 

04:46:39.699 --> 04:46:42.557
content.  Just take a few 
samples and run them through the

04:46:42.941 --> 04:46:47.143
 text-to-speech engine and don't
 look at the text.  Listen to it

04:46:47.344 --> 04:46:50.881
 to see if you can understand it
.  The next one is avoid 

04:46:50.882 --> 04:46:54.626
information overload.  I have 
already kind of lamented about 

04:46:54.627 --> 04:46:59.181
the e femorale nature of speech.
  Just be careful how much 

04:46:59.182 --> 04:47:05.342
content you present to the user.
  So I ask Google assist anlt on

04:47:05.531 --> 04:47:11.151
 home              ant        
 ssistant on home, this is one 

04:47:11.152 --> 04:47:15.798
abroach      pproach. 
   &gt;&gt; One is what's movies are 

04:47:15.799 --> 04:47:20.914
out in your favorite theater.  
Pay field           Faye maled

04:47:21.353 --> 04:47:26.523
            May field.  Snatched
.  The fast and furious.  Smur

04:47:27.600 --> 04:47:33.554
fes, in a circle.  Do anies of
      y of those sound good.  

04:47:33.555 --> 04:47:36.741
   Â» JARED STRAWDERMAN:  Not 
only does it bombard you with 12

04:47:36.965 --> 04:47:41.102
 movies but it force yous     s 
you to make a decision. 

04:47:41.103 --> 04:47:46.807
   &gt;&gt; 12 m   movies playing at 
your favorite theater.  Dial

04:47:47.675 --> 04:47:51.903
      Doo ri of a         diary 
of a women P kid, should        

04:47:52.077 --> 04:47:56.900
             women P         wim
py kid, sh should I tell you 

04:47:56.901 --> 04:48:00.819
about them or keep going?  
   Â» JARED STRAWDERMAN:  Answer 

04:48:00.820 --> 04:48:04.646
the question.  So here is what I
 mean.  If you have something 

04:48:04.647 --> 04:48:08.936
like a map or the user is asking
 for directions or navigation, a

04:48:08.937 --> 04:48:13.016
 map really is efficient as 
communicate ing information in 

04:48:13.017 --> 04:48:17.779
this really nice come pablgt
        pact reck tan     

04:48:18.298 --> 04:48:21.362
tangular shape.  It conveys how 
far you are from your 

04:48:21.363 --> 04:48:24.253
destination and what the prefer
red route is and what traffic 

04:48:24.254 --> 04:48:27.268
looks like all that kind of 
stuff.  So it may be tempting to

04:48:27.690 --> 04:48:30.895
 just punt to the screen on 
interactions like this.  So

04:48:34.265 --> 04:48:35.178
 when Google Home was first 
dy    ke    deemployed and 

04:48:35.179 --> 04:48:37.978
people    ep            ed    
      ploi      deployed and 

04:48:37.979 --> 04:48:39.991
people were asking questions 
about navigation. 

04:48:39.992 --> 04:48:43.359
   &gt;&gt; I don't have a screen.  So
 I can't do that for you.  

04:48:43.360 --> 04:48:45.523
   Â» JARED STRAWDERMAN:  So 
pretty disapointing and un

04:48:45.667 --> 04:48:48.688
helpful.  So we learned our 
lesson.  We thought about why 

04:48:48.689 --> 04:48:52.735
people are asking Google Home 
these questions and we kind.  

04:48:52.736 --> 04:48:55.676
Distilled a few salient points 
about what beepel are asking

04:48:56.317 --> 04:48:59.015
              el         pem    
 people are asking for.  In the 

04:48:59.016 --> 04:49:02.555
Bay Area the kwint sent tell 
question, what's traffic look 

04:49:02.556 --> 04:49:04.679
like.  How longs is it     
            How long is it going

04:49:04.874 --> 04:49:07.315
 to take me to get.  We took 
this approach insend it      

04:49:07.545 --> 04:49:09.234
 stead. 
   &gt;&gt; The best way to get to 

04:49:09.235 --> 04:49:13.533
work by car is trueing         
through 87 and is 0      101 

04:49:13.534 --> 04:49:16.168
north and it will take 19 
minutes in light traffic. 

04:49:16.169 --> 04:49:17.498
   &gt;&gt;. 
   Â» JARED STRAWDERMAN:  The 

04:49:17.499 --> 04:49:21.134
image of a map is much more 
efficient and convey a lot more 

04:49:21.135 --> 04:49:24.149
information to the user, there 
is nofr      no reason why you 

04:49:24.150 --> 04:49:28.620
can't distill the most sail jent
       lient piece of 

04:49:28.621 --> 04:49:31.838
information in to a verbal 
summary.  Let's talk about 

04:49:31.839 --> 04:49:34.246
Smartphones.  
   &gt;&gt;         

04:49:34.247 --> 04:49:36.247
   Â» ADRIANA OLMOS ANTILLON:  
Mart      Smartphone is a within

04:49:36.497 --> 04:49:39.852
        wonderful Finance
         machine that we take 

04:49:39.853 --> 04:49:41.853
everywhere in our lifrs

04:49:43.907 --> 04:49:46.427
.  Volume would be up one minute
 and next timing it goings

04:49:47.378 --> 04:49:51.020
        going to be dub and run
             done and running 

04:49:51.021 --> 04:49:56.948
through a session and headphones
.  This is, for instance, this 

04:49:56.949 --> 04:50:02.186
example, as you see in Canada 
and I was up there,  in the ski 

04:50:02.187 --> 04:50:07.241
slopes and we needed that -- we 
knew there was going to be a 

04:50:07.242 --> 04:50:09.994
snowstorm and we needed to know 
what time to get down from the 

04:50:09.995 --> 04:50:14.397
highly        hills P and it was
              and it was at a 

04:50:14.398 --> 04:50:17.224
time that we could ask the phone
 and hey when the snow gorm     

04:50:17.345 --> 04:50:20.594
 starm      storm going to start
 and because the last thing we 

04:50:20.595 --> 04:50:26.138
wanted to do is take out our mit
             off our mit tens 

04:50:26.316 --> 04:50:31.391
     mit tens              miten
s.  This is a time where we 

04:50:31.392 --> 04:50:36.121
could use our phone as a little 
phone to carry in our pocket.  

04:50:36.122 --> 04:50:38.109
There were times that we were 
running and navigate ing in 

04:50:38.110 --> 04:50:43.992
traffic and you wish you could 
speak to your phone and answer 

04:50:43.993 --> 04:50:47.367
your question.  In that example 
the last thing we want to do is 

04:50:47.368 --> 04:50:52.051
have this information be blit
      blit you want         

04:50:52.337 --> 04:50:56.545
      built.  So you they need 
to (cutting snuchlt             

04:50:56.546 --> 04:51:00.344
ing    ting out).  We can be 
starting in one position and 

04:51:00.345 --> 04:51:04.395
then other things        times 
we are running to places and we 

04:51:04.396 --> 04:51:08.004
can send a very private or 
public context and what is 

04:51:08.005 --> 04:51:14.227
wonderful about we can rich 
interactions with them.  What is

04:51:14.633 --> 04:51:18.679
 more compelling is that there 
is a lot of capability ies at 

04:51:18.680 --> 04:51:22.884
the       .  At the keynote we 
saw this excite ing demo 

04:51:22.885 --> 04:51:26.125
westbound           woor      
where e can use camera         

04:51:26.297 --> 04:51:29.803
         we can use the camera 
as a form of input.  We came up 

04:51:29.804 --> 04:51:33.502
with three guidelines that we 
have been oef   (Off 

04:51:33.503 --> 04:51:35.503
microphone)   
             oef     observe 

04:51:35.641 --> 04:51:39.571
ing.  In one mode goes away they
 are the              the other 

04:51:39.572 --> 04:51:46.474
one should take over.  Say I was
 sending a third party 

04:51:46.475 --> 04:51:50.932
application and what kipling it 
tells me facts about numbers.  I

04:51:51.206 --> 04:51:57.669
 pull up the phone and it greets
 me and is there in person and 

04:51:57.670 --> 04:52:00.269
enter the conversation.  And it 
gives me suggestions of what I 

04:52:00.270 --> 04:52:04.366
could say or I can say 
(inaudible). 

04:52:07.500 --> 04:52:11.111
 It is kind of like -- never pay
ing attention to the screen.  

04:52:11.112 --> 04:52:13.112
   &gt;&gt; Howdy this is

04:52:15.923 --> 04:52:16.905
 Kipling.  I can tell you facts 
and trivia.  What number you 

04:52:16.906 --> 04:52:20.956
would like to know about.  
   Â» ADRIANA OLMOS ANTILLON:  

04:52:20.957 --> 04:52:24.539
This is the random response and 
if you   u you pay attention,

04:52:27.881 --> 04:52:29.881
 introduce things like this is 
the --

04:52:33.252 --> 04:52:38.581
 because we didn't have an 
artificial key and we add little

04:52:38.582 --> 04:52:43.921
 situations as part of dialogue 
to come to the kals      values 

04:52:43.922 --> 04:52:46.604
that I could say and give them 
ideas and --

04:52:50.883 --> 04:52:57.315
 because you already have a 
suggestion to chat bubble.  It 

04:52:57.316 --> 04:53:02.318
is very interesting that we 
optimize the mode that allows 

04:53:02.319 --> 04:53:07.220
for both.  Let's see another 
example.  It is time and those 

04:53:07.221 --> 04:53:12.342
things that wanted to do at 
beginning of this month.  And 

04:53:12.343 --> 04:53:17.836
then we can ask -- to deliver 
the assistance for the

04:53:21.602 --> 04:53:27.679
 next -- and it is simple and 
normal to see -- free up in 

04:53:27.680 --> 04:53:34.833
every website and this is -- we 
can quickly scan things.  Then 

04:53:34.834 --> 04:53:38.625
the question is like how is it 
going to be presenting this to 

04:53:38.626 --> 04:53:40.626
auditory content

04:53:42.282 --> 04:53:45.396
.  
   &gt;&gt; Okay.  Theware yors have

04:53:47.038 --> 04:53:49.899
               ware      warrior
s have a (inaudible).  Which one

04:53:50.094 --> 04:53:52.094
 do we want tickets for? 

04:53:58.302 --> 04:54:03.585
 say things like okay.  We are 
having this conversation and --

04:55:05.949 --> 04:55:08.370
 a little bit about what is 
going to show up in a little bit

04:55:08.477 --> 04:55:12.691
 and I won't start by a surface 
that was mentioned in yesterday

04:55:12.953 --> 04:55:18.421
's keynote to TV.  So if we 
quickly look at some of the 

04:55:18.422 --> 04:55:24.937
conditions around how to do the 
-- TV is deployed.  It is a 

04:55:24.938 --> 04:55:27.996
staticky advice.           did
       device.  It is not move

04:55:28.150 --> 04:55:30.903
 ing and even though there is --
 it is not going to move with it

04:55:33.241 --> 04:55:36.505
.  It was design and used in a 
private setting among the group 

04:55:36.506 --> 04:55:40.698
of users much like Google Home 
and it is too far away to touch 

04:55:40.699 --> 04:55:43.965
to interact with it.  Now this 
is the interesting thing about 

04:55:43.966 --> 04:55:47.765
the TV.  Look at the where this 
is on the output scale compared 

04:55:47.766 --> 04:55:51.969
to the input scale.  Very, very 
rich audio and visual output 

04:55:51.970 --> 04:55:55.622
capability but quite mod l  
erate or limited to input 

04:55:55.623 --> 04:55:58.964
capability ies.  What does that 
tell us?  That tell us that the 

04:55:58.965 --> 04:56:05.267
TV is is a consumption device 
and not really anything sense 

04:56:05.268 --> 04:56:07.743
interaction device and I think 
the reason that we are kind of 

04:56:07.744 --> 04:56:11.441
bringing this up as you 
anticipate your actions come ing

04:56:11.442 --> 04:56:16.152
 to life, through the real 
assistant on TV, know that we 

04:56:16.153 --> 04:56:18.777
have to kind of minimize it on 
to a banner

04:56:22.908 --> 04:56:26.774
 on about a the bol      he 
bottom third of the kren      

04:56:22.908 --> 04:56:27.002
screen so not disrupt active 
prom      programming going on 

04:56:27.003 --> 04:56:32.218
as the TV is being played.  
Because it is primary ily a 

04:56:32.219 --> 04:56:34.695
consumption device and people 
watch programs and weigh want

04:56:35.224 --> 04:56:39.888
            we want to leverage 
that bottom field ael estate    

04:56:40.017 --> 04:56:45.332
        real estate.  And 
because we have a few car people

04:56:45.333 --> 04:56:48.073
 in the audience I wanted to 
touch a little bit on cars in

04:56:51.201 --> 04:56:55.889
 Google assistant on cars and
     Andrew is -- it does a yut

04:56:56.025 --> 04:57:00.836
     but job of audio rich 
content by way of projex of 

04:57:00.837 --> 04:57:03.057
phone                 jex of 
phone on to your car's

04:57:09.213 --> 04:57:13.103
 interface.  It was move ing 
around, it is carrying you 

04:57:13.104 --> 04:57:17.607
around at 80  #0   0 miles an 
hour.  Drivers shouldn't me be 

04:57:17.608 --> 04:57:23.488
looking at the screen a lot.  
And even though cars are out and

04:57:24.369 --> 04:57:29.918
 about -- the kind of a private 
setting.  And users generally 

04:57:29.919 --> 04:57:33.916
have access to quick touch 
interaction in a car          

04:57:33.917 --> 04:57:36.949
from a car to adjust their 
temperature or change the 

04:57:36.950 --> 04:57:40.766
station or something like that 
but you don't want the driver 

04:57:40.767 --> 04:57:42.805
interest,  beshg agt        
            interacting with 

04:57:42.806 --> 04:57:45.205
things a lot.  Should be drive
 ing erment          e ing     

04:57:45.697 --> 04:57:51.340
ing.  In terms of ifrn put    
      inn     input output    

04:57:51.341 --> 04:57:53.948
put    put capability.  There is
 nothing wrong with a lot of 

04:57:53.949 --> 04:57:59.947
spoken output and they have 
pretty decent mic and sometimes 

04:57:59.948 --> 04:58:03.070
recognition is a challenge of 
that am pee yent         bient 

04:58:03.071 --> 04:58:08.030
noise.  If we overlay Google 
Home on top of the car they are 

04:58:08.031 --> 04:58:11.636
strike ingly similar in terms of
 where they fall on this matrix.

04:58:11.637 --> 04:58:15.206
  What does that tell us?  That 
tells us that Google Home is a 

04:58:15.207 --> 04:58:20.457
very, very Voice only device.  
And that tells us that the car 

04:58:20.458 --> 04:58:25.969
probably should be somewhere in 
that range as well.  So a few 

04:58:25.970 --> 04:58:31.626
take-aways as we kind of 
summarize here.  If you don't 

04:58:31.627 --> 04:58:35.381
take anything away from today's 
talk, please take this away.  

04:58:35.382 --> 04:58:38.954
Know the strengths and weakness
es of Voice as opposed to 

04:58:38.955 --> 04:58:41.357
visuals.  Leverage what's    
       age    age what speech 

04:58:41.358 --> 04:58:44.965
does well, leverage what the 
screen does really well and voi

04:58:45.293 --> 04:58:47.258
     void      avoid the 
liability ies that we talked 

04:58:47.259 --> 04:58:50.832
about.  Optimize for the 
strongest mode but allow both.  

04:58:50.833 --> 04:58:53.661
If the skreb       screen does 
something better point the views

04:58:53.786 --> 04:58:58.175
or         user to the screen 
but still let them do it in 

04:58:58.176 --> 04:59:02.237
Voice and even though these 
interactions involve both visual

04:59:02.904 --> 04:59:08.501
 and auditory modes they usually
 invoked by a spoken input.  So 

04:59:08.502 --> 04:59:12.525
make sure that the first bit of 
content that you are hearing is 

04:59:12.526 --> 04:59:19.042
appropriate for spoken language.
  And one of the overarching 

04:59:19.043 --> 04:59:24.015
principles of use ing Google 
agel   ssist ants when it       

04:59:24.158 --> 04:59:30.114
       ant is we want them to be
 efficient.  And each turn in a 

04:59:30.115 --> 04:59:33.537
conversational dialogue should 
be really short and sweet and 

04:59:33.538 --> 04:59:37.796
easy for the user to absorb and 
consume and help them get 

04:59:37.797 --> 04:59:41.001
through their interaction.  
   Â» ADRIANA OLMOS ANTILLON:  So

04:59:41.228 --> 04:59:45.663
 we talked a lot today about how
 to package a response and make

04:59:45.934 --> 04:59:52.760
 ing sure that all these 
modality ies cohesively make a 

04:59:52.761 --> 04:59:58.370
compelling a response and there 
to say this one is absent.  And 

04:59:58.371 --> 05:00:00.801
we also talk about 
conversational design and how 

05:00:00.802 --> 05:00:04.173
many important is to be inspired
 from having a conversation with

05:00:04.314 --> 05:00:09.247
 a human before we jump in to 
which is a sign of     n     

05:00:09.248 --> 05:00:14.071
sign in application but the work
 did     -- there is a lot of 

05:00:14.072 --> 05:00:17.916
Google we need to get moving.  
Someones          Once we have 

05:00:17.917 --> 05:00:21.685
our response, how is that -- we 
are going to be representing 

05:00:21.686 --> 05:00:24.866
this response automatically, 
that it is take ing in to 

05:00:24.867 --> 05:00:28.805
account the cop     context in 
which the use, whether they are 

05:00:28.806 --> 05:00:31.518
running, how we present that 
snfgs       information or if 

05:00:31.519 --> 05:00:36.592
they are passive, sitting on the
 couch.  So how -- more and more

05:00:36.825 --> 05:00:41.224
 can do these changes between 
one type of service in to 

05:00:41.225 --> 05:00:44.322
another in a matter that is 
almost magical and the use offer

05:00:44.545 --> 05:00:48.181
 doesn't              r doesn't 
vunt      have to skr for it   

05:00:48.321 --> 05:00:52.666
         ask for it.  Multimodal
 interactions on the phone how 

05:00:52.667 --> 05:00:58.689
we can make these interactions 
like these in cars and thaul 

05:00:58.690 --> 05:01:02.505
these things that people can 
interact with more dynamic to 

05:01:02.506 --> 05:01:08.405
allow for more complacent 
tractions in a way that is more 

05:01:08.406 --> 05:01:11.804
rich and introduced.  So we are 
very excited that you guys are 

05:01:11.805 --> 05:01:14.727
joining the journey and start 
building your applications with 

05:01:14.728 --> 05:01:18.682
us.  There is going to be a lot 
of other talks happening today 

05:01:18.683 --> 05:01:22.113
and tomorrow.  You are welcome 
to join in case you are interest

05:01:22.409 --> 05:01:29.837
ed in the talk for the Google 
assist antd     ant and there is

05:01:30.041 --> 05:01:33.148
 is a challenge and we can work 
to see all the things that you 

05:01:33.149 --> 05:01:35.375
will be submitting     ing
    ting to it.  Thank you very 

05:01:35.376 --> 05:01:37.376
much.  
   (Applause.)

05:01:46.520 --> 05:01:51.979
Since we have five minutes of 
time, if one person has a 

05:01:51.980 --> 05:01:53.980
question, feel free to ask

05:01:57.766 --> 05:02:00.834
.  
   &gt;&gt; Hi.  I saw from the 

05:02:00.835 --> 05:02:05.230
presentation that you did a 
context and show for the maps 

05:02:05.231 --> 05:02:09.489
experience where -- because the 
person lives in Bay Area, just 

05:02:09.490 --> 05:02:12.251
give ing that direction, based 
on what the Bay Area people use.

05:02:12.252 --> 05:02:16.975
  But for other countries, do 
you currently allow multi 

05:02:16.976 --> 05:02:20.123
contextual responses?  
   Â» JARED STRAWDERMAN:  I'm 

05:02:20.124 --> 05:02:21.314
sorry could you are y Pete the 
question?  

05:02:21.315 --> 05:02:24.496
   &gt;&gt;                       
      e y   refeet    peat the 

05:02:24.497 --> 05:02:25.972
question?  
   &gt;&gt; For the Bay Area people 

05:02:25.973 --> 05:02:31.442
understand what these two 
highways mean but for -- Korea 

05:02:31.443 --> 05:02:36.927
or somewhere, this is my -- it 
would be meaningful to them.  

05:02:36.928 --> 05:02:41.757
Does the current technology 
allow us to give context depend

05:02:41.972 --> 05:02:45.471
ing on what the user  r  r?  
   &gt;&gt; For third party 

05:02:45.472 --> 05:02:47.263
experiences I don't believe so. 

05:02:47.264 --> 05:02:51.573
   &gt;&gt; Contextual. 
   Â» JARED STRAWDERMAN:  Can you

05:02:52.079 --> 05:02:55.377
 elaborate?  
   &gt;&gt; You said if the user is --

05:02:57.411 --> 05:03:02.339
The map am    example should 
apply ever where.  We are trying

05:03:02.607 --> 05:03:05.737
 to kun Kated do              
communicate to the user what the

05:03:05.879 --> 05:03:09.617
 referred route is.  The trooifl
         travel time that allies

05:03:09.996 --> 05:03:13.934
 to      y   pply ies anywhere 
where you live.  The bus route. 

05:03:13.935 --> 05:03:17.308
 It is not -- I was only -- 
because one of the key decisions

05:03:17.397 --> 05:03:22.520
 that travellers like commuters 
in the Bay Area have to make is 

05:03:22.521 --> 05:03:28.151
280 or 101.  I'm give ing that 
as an example.  Sorry for the 

05:03:28.152 --> 05:03:29.972
confusion.  
   &gt;&gt; Thank you.  

05:03:29.973 --> 05:03:34.265
   &gt;&gt; Great presentation.  One 
of the things that I was really 

05:03:34.266 --> 05:03:38.130
disapointed to see when I was 
bigs      digging in on aist   

05:03:38.278 --> 05:03:42.085
ssistant actions some actions 
are not supported on certain 

05:03:42.086 --> 05:03:46.300
kinds of devices.  I was wonder
ing it strikes it mae     makes 

05:03:46.301 --> 05:03:49.517
it hard to like make user aware 
of your app, for example, and 

05:03:49.518 --> 05:03:52.367
what it can do.  I was wondering
 if you had any thoughts about 

05:03:52.368 --> 05:03:56.837
even if you could be something 
better, like you talked about, 

05:03:56.838 --> 05:04:00.211
still probably need to support 
all the same use cases across 

05:04:00.212 --> 05:04:04.520
those different surfaces.  Any 
reaction to is that?            

05:04:04.521 --> 05:04:06.247
that?  
   Â» ADRIANA OLMOS ANTILLON:  So

05:04:06.248 --> 05:04:10.485
 first of all you are right.  We
 are starting to make sure there

05:04:11.294 --> 05:04:15.280
 is -- across --    surfaces and
 it is something that is very 

05:04:15.281 --> 05:04:18.880
important to us.  In terms of 
the survey and make ing your 

05:04:18.881 --> 05:04:22.489
users aware of what      whether
 these apps are available there 

05:04:22.490 --> 05:04:26.054
is a talk on cover       
discovery that is going to be 

05:04:26.055 --> 05:04:30.431
talking about in order to have 
to make your apps discovery on 

05:04:30.432 --> 05:04:33.673
other surfaces.  And the third 
waun that           one that we 

05:04:33.674 --> 05:04:38.454
touch upon, we are ston      con
stantly working to make sure the

05:04:38.622 --> 05:04:43.384
 way we are code ing your 
application is not -- response 

05:04:43.385 --> 05:04:47.617
that mannest    ifests on 
different surfaces.  So the 

05:04:47.618 --> 05:04:50.794
probable    lem you are having 
is also we are having at the 

05:04:50.795 --> 05:04:54.467
moment because we have to 
support all these multiple -- it

05:04:54.468 --> 05:04:57.419
 is something that we are 
trooifr strooi                

05:04:57.420 --> 05:04:59.880
strooiing for        ing    
        strive ing for.  You are

05:05:00.021 --> 05:05:01.397
 not alone. 
   Â» JARED STRAWDERMAN:  By the 

05:05:01.398 --> 05:05:04.743
way did you see the session is I
 think was this morning dedicate

05:05:05.007 --> 05:05:09.287
d for discovery of your app?  
You missed it.  Okay.  Just 

05:05:09.288 --> 05:05:11.288
watch it on Youtube

05:05:14.070 --> 05:05:15.078
.  
   &gt;&gt; It was interesting to see 

05:05:15.079 --> 05:05:19.319
that, you know, the user 
considerations for home for 

05:05:19.320 --> 05:05:23.041
Google Home and for the car were
 very similar.  That said there 

05:05:23.042 --> 05:05:26.616
are things in the car that, you 
know, have legal considerations 

05:05:26.617 --> 05:05:28.881
you don't want to have them look
ing ats        ing    ing at the

05:05:28.882 --> 05:05:32.642
 screen and things like that.  
Does the developer know that the

05:05:32.756 --> 05:05:35.938
 person is going -- in the car 
or how is it that the developer 

05:05:35.939 --> 05:05:39.970
is going to know where --    the
 context is?  

05:05:39.971 --> 05:05:41.971
   Â» JARED STRAWDERMAN:  Yeah, 
there was a session in the queue

05:05:42.172 --> 05:05:44.640
       key foet     note this 
northerning             morning 

05:05:44.641 --> 05:05:46.926
where you get a signal wlrl a 
screen is available

05:05:48.408 --> 05:05:51.008
 not.  We have to look in to see
 whether you are getting some 

05:05:51.009 --> 05:05:56.448
surface information.  But those 
-- there is a community in G 

05:05:56.449 --> 05:06:01.256
plus called actions on Google.  
And you can kind of go there and

05:06:01.257 --> 05:06:05.866
 ask questions but that's one of
 the things that Adriana was 

05:06:05.867 --> 05:06:09.463
talking about.  We want to do a 
better job provide ing just in 

05:06:09.464 --> 05:06:12.137
time signals for you to know the
 user's conditions wet ter. 

05:06:12.138 --> 05:06:14.116
   &gt;&gt;                  better. 
   &gt;&gt; That won't be enough that 

05:06:14.117 --> 05:06:17.022
the screen is available or not 
because there is a screen in the

05:06:17.768 --> 05:06:18.586
 car. 
   &gt;&gt;         . 

05:06:18.587 --> 05:06:19.286
   Â» JARED STRAWDERMAN:  Right. 

05:06:19.287 --> 05:06:21.647
   Â» ADRIANA OLMOS ANTILLON:  
Yeah, and also to build on your 

05:06:21.648 --> 05:06:25.814
concern like also it is 
important to take in to 

05:06:25.815 --> 05:06:28.188
consideration where in that 
country is going running because

05:06:28.477 --> 05:06:32.203
 the policies of make ing the 
screen available changes from 

05:06:32.204 --> 05:06:35.017
place to place.  
   Â» JARED STRAWDERMAN:  But as 

05:06:35.018 --> 05:06:37.844
we firm up kind of how we are 
dealing with the car there are 

05:06:37.845 --> 05:06:40.782
probably going to be restriction
s about what you are going to be

05:06:40.783 --> 05:06:44.439
 able to present as a developer 
on the  he car screen.  So I 

05:06:44.440 --> 05:06:46.934
don't think you are going to 
even be allowed to do some of 

05:06:46.935 --> 05:06:50.646
the things that you are talking.
  Just because of all the reason

05:06:50.780 --> 05:06:53.073
s that you mentioned.  It is a 
good question and then, of 

05:06:53.074 --> 05:06:58.112
course, there are some fends 
      frendz tsz            

05:06:58.113 --> 05:07:01.892
frends        friends of mine, 
what happens when you move in to

05:07:03.140 --> 05:07:05.276
 the realm that the cars are 
drive ing themselves.  That whoa

05:07:05.449 --> 05:07:07.363
      whole equation goes out 
the window.  

05:07:07.364 --> 05:07:09.118
   &gt;&gt; Thank you.  
   Â» JARED STRAWDERMAN:  I think

05:07:09.119 --> 05:07:13.241
 -- we will try to do two.  
   &gt;&gt; One quick question.  Do 

05:07:13.242 --> 05:07:16.087
you have experience with longer 
conversations, for example, I 

05:07:16.088 --> 05:07:18.622
wanted someone to fill out a 
form. 

05:07:18.623 --> 05:07:18.980
   Â» JARED STRAWDERMAN:  Yes, . 

05:07:18.981 --> 05:07:23.540
   &gt;&gt; This is not a Dirk give me
 the                  -- give me

05:07:23.729 --> 05:07:27.902
 a web information.  But two, 
three paining         pages -- 

05:07:27.903 --> 05:07:28.985
   Â» ADRIANA OLMOS ANTILLON:  
Yeah, .  

05:07:28.986 --> 05:07:31.361
   &gt;&gt; Maybe pick it up. 
   Â» JARED STRAWDERMAN:  Yeah, .

05:07:31.979 --> 05:07:38.512
Yeah, .  Actions require an lot 
of turn take ing and just -- we 

05:07:38.513 --> 05:07:44.575
just released on this session 
with I/O documentation provided 

05:07:44.576 --> 05:07:48.765
examples and how you can have a 
kvrngs        conversation with 

05:07:48.766 --> 05:07:52.397
transactions for when      what 
you have to do if you have to 

05:07:52.398 --> 05:07:56.760
buy flowers or    what's        
or what's all steps if you have 

05:07:56.761 --> 05:08:01.215
to buy shoes.  First approach is
 to multi but definitely you can

05:08:01.216 --> 05:08:04.114
 find information there in 
examples to get inspired.  

05:08:04.115 --> 05:08:07.003
   &gt;&gt; So you don't think it is 
out of the realm of having 

05:08:07.004 --> 05:08:09.280
longer discussions and ongoing 
sdugs            

05:08:09.281 --> 05:08:11.851
going      going discussions 
about the certain topic?  

05:08:11.852 --> 05:08:15.436
   Â» JARED STRAWDERMAN:  Go a
head.  I think that as long as 

05:08:15.437 --> 05:08:19.254
we have kind of pause and resume
 type model I don't think that's

05:08:19.598 --> 05:08:23.037
 out of the question.  But if 
you are trying to do it on fell 

05:08:23.038 --> 05:08:25.607
swoop it is             sweep
       swoop it is not advise

05:08:25.766 --> 05:08:26.610
 able.  Yeah, .  
   &gt;&gt; Thanks. 

05:08:26.611 --> 05:08:30.640
   &gt;&gt; Thank you. 
   &gt;&gt; I just had a question 

05:08:30.641 --> 05:08:34.174
about these abilities on 
different platforms and types of

05:08:34.485 --> 05:08:36.303
 interactions you are talking 
about Voice and you are talking 

05:08:36.304 --> 05:08:40.951
about images.  And visuals.  I 
know gesture control isn't 

05:08:40.952 --> 05:08:43.193
either of your areas of 
specialty.  But do you have any 

05:08:43.194 --> 05:08:48.160
kind of insights on what you 
guys' thoughts are on gesture 

05:08:48.161 --> 05:08:50.810
control and where you plan to go
 with that in the future and how

05:08:50.996 --> 05:08:54.267
 important that is for the flat 
orm          plart       

05:08:54.268 --> 05:08:56.533
platform?  
   Â» ADRIANA OLMOS ANTILLON:  

05:08:56.534 --> 05:09:00.193
Gesture control is not something
 we have been focusing about.  I

05:09:00.194 --> 05:09:03.685
 would be going out of the area 
but definitely something worth 

05:09:03.686 --> 05:09:06.422
explore ing a lot more. 
   Â» JARED STRAWDERMAN:  And 

05:09:06.423 --> 05:09:09.875
haptics is one thing that we 
very, very every so delicately 

05:09:09.876 --> 05:09:13.441
touched on in this presentation.
  That's another factor, too.  

05:09:13.442 --> 05:09:16.737
   &gt;&gt; Okay.  Thank you.  
   Â» JARED STRAWDERMAN:  Thanks.

05:09:17.454 --> 05:09:19.454
Okay.  Thanks.  AvP     
   (Applause.)

05:09:54.458 --> 05:09:54.761
   &gt;&gt;. 
   &gt;&gt;. 

05:09:54.762 --> 05:09:55.017
   &gt;&gt;. 
   &gt;&gt;. 

05:09:55.018 --> 05:09:57.018
   &gt;&gt;

05:15:15.450 --> 05:15:15.533
RAW FILE

05:15:15.534 --> 05:15:17.867
GOOGLE I/O 2017
SAN JOSE, CALIFORNIA

05:15:15.534 --> 05:15:17.000
DATE
TIME AND TIME ZONE

05:15:15.534 --> 05:15:18.000
STAGE NUMBER OR ROOM NAME
SESSION NAME

05:15:15.534 --> 05:15:16.534
SESSION NUMBER

05:15:15.534 --> 05:15:18.800
Services provided by:
         Caption First, Inc.

05:15:15.534 --> 05:15:18.800
         P.O. Box 3066
         Monument, CO 80132

05:15:15.534 --> 05:15:18.800
         1-877-825-5234
         +001-719-481-9835

05:15:15.534 --> 05:15:17.467
         Www.captionfirst.com

05:15:15.534 --> 05:15:17.867
***
This text is being provided in a

05:15:15.534 --> 05:15:19.000
 rough draft format.  
Communication Access Realtime 

05:15:15.534 --> 05:15:19.134
Translation (CART) is provided 
in order to facilitate 

05:15:15.534 --> 05:15:15.933
communication accessibility and 
may not be a totally verbatim 

05:15:15.934 --> 05:15:17.934
record of the proceedings. 
***

05:15:15.934 --> 05:15:17.934
&gt;&gt;  
   &gt;&gt;  

05:24:54.203 --> 05:24:56.203
   &gt;&gt;

05:29:28.519 --> 05:29:32.486
   &gt;&gt; Thanks.  
   &gt;&gt; Is it silenced? 

05:29:41.396 --> 05:29:47.204
and I work on security research 
and today with you we work on 

05:29:47.205 --> 05:29:51.252
web security research and Eric 
who works on webmaster 

05:29:51.253 --> 05:29:54.055
relationship.  We are going to 
tern      tell you about how we 

05:29:54.056 --> 05:29:57.744
can learn about web security 
with Google.  Let's do a quick 

05:29:57.745 --> 05:30:01.777
show of hands.  How many of had 
website compromised or know 

05:30:01.778 --> 05:30:05.505
someone who has a website hack
ed?  Come on.  Don't be 

05:30:05.506 --> 05:30:07.644
Shea      shy.  Raise your hand

05:30:10.744 --> 05:30:15.013
.  This is not -- almost        
most of you raise your hands.  

05:30:15.014 --> 05:30:19.920
It is not surprise willing
         ing.  In 2016 hacking 

05:30:19.921 --> 05:30:24.655
has never been so prevalent.  We
 found 32% more websites 

05:30:24.656 --> 05:30:30.517
compromised than ever.  Try to 
hack your sweb site for many 

05:30:30.518 --> 05:30:33.524
years from attacking your user 
by sending malware to them or 

05:30:33.525 --> 05:30:40.989
try to phic sh to use ing   e 
ing     ing resources to try to 

05:30:40.990 --> 05:30:44.350
steal your data and expose them.
  Either when you get hacked, 

05:30:44.351 --> 05:30:50.534
the consequences are pretty dear
.  You are also      lose ing 

05:30:50.535 --> 05:30:51.612
the trust of your user and 
potentially financial loss.  

05:30:51.613 --> 05:30:54.370
Solve       Some of the lasting 
efrt         ing    ing effort  

05:30:54.732 --> 05:30:57.493
         ing    ing effects user
 trust can take years to cover 

05:30:57.494 --> 05:30:59.892
ever recover                    
recover.  This is why it is 

05:30:59.893 --> 05:31:03.479
essential to keep security at 
the forefront of your web 

05:31:03.480 --> 05:31:06.304
strategy and make sure you in
vest in security from when you 

05:31:06.305 --> 05:31:08.795
develop new things, what you 
maintain it and when you create 

05:31:08.796 --> 05:31:13.179
it.  I'm prit      pretty sure 
you already know that ouz 

05:31:13.180 --> 05:31:16.367
otherwise you would not be here 
today.  Today what we are 

05:31:16.368 --> 05:31:18.970
interesting             going to
 do we are going to wouk      

05:31:18.971 --> 05:31:22.216
walk you through the resource 
that going bell provides        

05:31:22.365 --> 05:31:25.683
           Google provides and 
help defend against hackers.  

05:31:25.684 --> 05:31:30.380
First Eric will cover how you 
can get help from Google when 

05:31:30.381 --> 05:31:34.196
you get hacked.  What are the 
resources we have to help you 

05:31:34.197 --> 05:31:37.384
clean up and to help you secure 
your website and then with you 

05:31:37.385 --> 05:31:41.552
on we are going to give you a 
sneak preview of our upcome ing 

05:31:41.553 --> 05:31:44.731
web security source        
courses and to make it very 

05:31:44.732 --> 05:31:47.281
practical and give you a sense 
of what you are going to learn 

05:31:47.282 --> 05:31:50.694
we are going to tifr      give 
you a short yoer      overview 

05:31:50.695 --> 05:31:54.122
followed by a sneak preview of 
one of the lectures and because 

05:31:54.123 --> 05:31:56.608
we wanted to have something 
which is very hands on we have a

05:31:56.609 --> 05:32:01.328
 lot of demos today that is --
    if it would beingers        

05:32:01.665 --> 05:32:06.562
        works and jump right in.

05:32:06.563 --> 05:32:09.761
   Â» ERIC KUAN:  First off hi 
mom.  I'm on live stream right 

05:32:09.762 --> 05:32:13.575
now and my mom is watching so
       ing    ing.  So I'm super

05:32:13.906 --> 05:32:16.203
 excited about that.  
   (Applause.) 

05:32:16.204 --> 05:32:19.361
   Â» ERIC KUAN:  Hi mom.  Let's 
jump in to what you should do if

05:32:19.641 --> 05:32:22.383
 your site gets hacked.  You are
 going to get some type of 

05:32:22.384 --> 05:32:26.813
notification from Google's 
perspective that notification is

05:32:26.814 --> 05:32:30.677
 e-mail that you have may have 
seen or some type of 

05:32:30.678 --> 05:32:34.646
notification in search results. 
 They don't have to come from 

05:32:34.647 --> 05:32:39.630
geg     Google.  In your suesor
        user are e-mailing you 

05:32:39.631 --> 05:32:45.462
and saying there is something 
wrong with your site.  You want 

05:32:45.463 --> 05:32:49.498
to check dhoes out           
chose       those out.  If your 

05:32:49.499 --> 05:32:53.870
site is compromised it is really
 annoying and worth of all your 

05:32:53.871 --> 05:32:55.666
users are trying to get to your 
site and they can't get to your 

05:32:55.667 --> 05:32:58.349
site.  So it is in your best 
interest to keen      clean up 

05:32:58.350 --> 05:33:05.166
as soon as possible.  Now the 
process of cleaning up it can be

05:33:05.544 --> 05:33:08.841
 quite daunting.  It is going to
 take some time.  But if you 

05:33:08.842 --> 05:33:13.008
follow these steps methodically 
is there is a high chance that 

05:33:13.009 --> 05:33:15.815
you can clean your site.  The 
first thing is to quarantine

05:33:16.002 --> 05:33:19.220
          kwarn     quarantine 
your site.  Taking it offline or

05:33:19.221 --> 05:33:21.911
 site      isolate it to certain
 parts take certain parts off

05:33:22.189 --> 05:33:25.875
line.  If    You want to change 
any user maim       r  r names 

05:33:25.876 --> 05:33:28.403
passwords the whole being you 
don't want to be hacked while 

05:33:28.404 --> 05:33:31.159
you are trying to fiks      fix 
your site and don't       you 

05:33:31.160 --> 05:33:33.962
don't want your users trying to 
get to your site while it is 

05:33:33.963 --> 05:33:38.662
compromised.  Take ing your site
 offline temporary ily is the 

05:33:38.663 --> 05:33:45.548
best move want           you aen
         move and you want to 

05:33:45.549 --> 05:33:48.884
start building your team.  
Identification, this is probably

05:33:49.372 --> 05:33:52.765
 the most difficult part and the
 most time consume ing.  Hackers

05:33:53.146 --> 05:33:56.350
 are constantly trying to 
prevent you from remove ing the 

05:33:56.351 --> 05:34:00.811
hack on your site.  So they will
 do weird little tricky things 

05:34:00.812 --> 05:34:03.660
like clicking ab you     and you
 are go where this page is show

05:34:03.886 --> 05:34:09.378
ing an http404 and it is serve
 ing Spam to your users and 

05:34:09.379 --> 05:34:11.991
search engines.  Identification 
is important.  But at this phase

05:34:12.816 --> 05:34:15.295
 you will also want to identify 
the vulnerability because you 

05:34:15.296 --> 05:34:18.428
want to understand how hackers 
got in to your site.  Cleaning 

05:34:18.429 --> 05:34:21.885
up is just about remove ing 
those files and then testing 

05:34:21.886 --> 05:34:25.956
make ing sure that your site is 
running low again.  That's the 

05:34:25.957 --> 05:34:28.394
main part of cleaning up and 
that's really all you need to do

05:34:28.749 --> 05:34:32.849
.  Match       Patching is about
 close ing those vul 

05:34:32.850 --> 05:34:34.755
negotiatibility ies   y       e
          nerability           

05:34:34.756 --> 05:34:38.130
nerability ies that you 
identified earlier.  A lot of 

05:34:38.131 --> 05:34:41.076
people miss this and their sites
 do get compromised again.  

05:34:41.077 --> 05:34:44.283
Don't fore get to close those 
vulnerability ies.  You can just

05:34:44.438 --> 05:34:49.750
 update your site software, CMSs
or   your plug-ins things like 

05:34:49.751 --> 05:34:53.277
that.  And they will close a lot
 of vulnerability ies.  Finally 

05:34:53.278 --> 05:34:57.159
if your site was flagged by 
Google and you saw those red 

05:34:57.160 --> 05:35:01.143
initials on your site or some 
warnings in search results you 

05:35:01.144 --> 05:35:04.563
want to tell gook that your     
           Google that your site

05:35:05.398 --> 05:35:08.321
 was cleaned   ed   ed and they 
can remove those flaegs        

05:35:08.322 --> 05:35:15.899
flags.  The steps works for most
 types of hacks and we realized 

05:35:15.900 --> 05:35:19.505
that a lot of hacking campaigns 
they work in very, very similar 

05:35:19.506 --> 05:35:23.205
ways and this helps us under 
stand how attackers are scale

05:35:23.361 --> 05:35:26.387
 ing their attacks.  How they 
are trying to fly under the 

05:35:26.388 --> 05:35:32.152
radar, go against detection and 
this also helps build better 

05:35:32.153 --> 05:35:35.420
detik   tection systems and we 
have identify ied three major 

05:35:35.421 --> 05:35:39.807
hacking campaigns so far the 
cloaked key words where they 

05:35:39.808 --> 05:35:45.184
create cloaked pages and drop 
key woords        words on the 

05:35:45.185 --> 05:35:48.974
pages.  Gibberish attack,      
      ish    ish hack, use ing

05:35:49.214 --> 05:35:54.232
   e ing     and when users 
click in they get redirected to 

05:35:54.233 --> 05:35:58.617
Spammy   y  my malware sites.  
The finally the Japanese key 

05:35:58.618 --> 05:36:04.880
woords injection and this tar 
gerts Japanese brand name goods 

05:36:04.881 --> 05:36:08.435
and attempts to sell them fake 
goods.  We have been able to 

05:36:08.436 --> 05:36:11.877
create really great         
ly   ly great documentation step

05:36:11.878 --> 05:36:14.540
 by step guides for each one of 
these hacks.  I will link you to

05:36:14.720 --> 05:36:16.980
 the documents in a second 
because I think it will help if 

05:36:16.981 --> 05:36:20.066
you or your friendsor someone 
that you                    or 

05:36:20.067 --> 05:36:22.508
someone that you know has been 
hacked or will be hacked in the 

05:36:22.509 --> 05:36:25.553
future.  First though I want to 
talk you through the Gibber hack

05:36:25.770 --> 05:36:28.672
.  Understanding how these hacks
 works are super interesting 

05:36:28.673 --> 05:36:32.583
because they had Lep you with 
remediation in the future.  Now 

05:36:32.584 --> 05:36:35.495
this is what the Gibber hack 
looks like.  It is realingly 

05:36:35.496 --> 05:36:39.532
plain         ly   ly           
really plain and trying to use 

05:36:39.533 --> 05:36:45.242
the domain to link well.  The 
underlie  ying mechanics behind 

05:36:45.243 --> 05:36:48.792
it are also pretty simple when 
you put it in to three separate 

05:36:48.793 --> 05:36:52.445
pieces.  The user clicks on the 
site, redirected in some way or 

05:36:52.446 --> 05:36:58.736
fashion to a Spam page, to a PHP
 jaen      ask     generate or 

05:36:58.737 --> 05:37:02.687
script and then users are retlek
    directed to the Spam.  So 

05:37:02.688 --> 05:37:06.765
the first important part of this
 whole chain is this redirect.  

05:37:06.766 --> 05:37:09.044
If you can identify how that re
direct is happening, where it is

05:37:09.400 --> 05:37:11.920
 happening, you can identify the
 other parts of the your site 

05:37:11.921 --> 05:37:15.947
that have been comoms        
compromised as well.  And this 

05:37:15.948 --> 05:37:19.089
example the HT access file has 
been compromised.  Through

05:37:19.581 --> 05:37:22.081
         Three lines of code it 
is going row direct your users 

05:37:22.082 --> 05:37:26.224
come ing from major search 
engines and then send them to 

05:37:26.225 --> 05:37:34.100
this page right here, the Spam.h
p p  php page.  This is the 

05:37:34.101 --> 05:37:36.565
piece that you want to identify 
later.  It is not going to be 

05:37:36.566 --> 05:37:41.796
called   ed   ed Spam.php.  We 
have seen hackers call things 

05:37:41.797 --> 05:37:47.802
called horse duck 2 and try to 
mask as core files instead of W

05:37:48.093 --> 05:37:52.686
P-config.  They are trying to 
trick users from accurately   ly

05:37:52.910 --> 05:37:57.055
   ly fixing their sites.  Okay.
  So from the redirect we see 

05:37:57.056 --> 05:38:02.134
that you are sent to the page 
generate or.  Now you are 

05:38:02.135 --> 05:38:04.135
probably going to open this file
.  You want to figure out what's

05:38:04.426 --> 05:38:07.563
 going on.  You are curious.  
You are curious you had         

05:38:07.564 --> 05:38:10.125
how they are doing all this dpaj
 and you are going              

05:38:10.275 --> 05:38:13.098
          damage and you are 
going to get something like.  

05:38:13.099 --> 05:38:15.588
They have enscript       
script       crypt.  They don't

05:38:15.796 --> 05:38:18.845
            It is really 
difficult to understand what a 

05:38:18.846 --> 05:38:23.299
lot of these scripts are doing. 
 Even if you do you take the 

05:38:23.300 --> 05:38:25.725
time to figure out, you know, 
this is exactly what the code 

05:38:25.726 --> 05:38:30.073
is, it is still not really human
 readable.  This is not code ing

05:38:30.317 --> 05:38:34.725
   e ing     ing best practices.
  Your CS professors would be 

05:38:34.726 --> 05:38:38.849
appalled by looking at this.  
You need to remove this file.  I

05:38:38.850 --> 05:38:42.408
 would ask that you back up 
these files just in case just in

05:38:42.624 --> 05:38:45.255
 case they are good files and 
later on if you do want to do 

05:38:45.256 --> 05:38:50.405
some forensic work it would be 
helpful to have these back up 

05:38:50.406 --> 05:38:53.496
files.  You can see these two 
files that      they have done a

05:38:53.497 --> 05:38:57.240
 lot of damage to a website.  
And so that's why you don't even

05:38:57.562 --> 05:39:00.214
 want to be in the phase of 
cleaning up a website.  Cleaning

05:39:00.576 --> 05:39:03.475
 a website is difficult.  It is 
especially financially costly 

05:39:03.476 --> 05:39:07.028
and it is annoy no, Iing.  You
          ing           ing.  

05:39:07.029 --> 05:39:10.597
You have brand reputation on the
 line and that's why the key 

05:39:10.598 --> 05:39:13.967
take away is that prevention is 
key.  So let's talk about a 

05:39:13.968 --> 05:39:16.995
couple of quick things that you 
can do today right after the 

05:39:16.996 --> 05:39:19.523
session in order to meP     help
 with revengs         prevention

05:39:19.634 --> 05:39:23.181
.  Back up your site.  There is 
a lot of people that don't back 

05:39:23.182 --> 05:39:27.479
up their site and that's baffle
 ing to me.  Pack P        Back 

05:39:27.480 --> 05:39:30.432
up your site as often as 
possible.  If you get compromise

05:39:30.791 --> 05:39:33.474
d one of the easy yes, sir ways 
to over              ier    

05:39:33.632 --> 05:39:38.009
               easier ways to 
recover restore the backed up 

05:39:38.010 --> 05:39:41.267
version of your site.  The 
vulnerable that the hackers got 

05:39:41.268 --> 05:39:45.064
to probably still exist.  So you
 want to fix that.  Sekdzly 

05:39:45.065 --> 05:39:47.620
signed up for                 
ly          Sekdzly   ly   

05:39:47.992 --> 05:39:53.483
       Secondly in up for search
 cob     console.  This is one 

05:39:53.484 --> 05:39:57.404
of the ways that Google 
communicates with webmasters.  

05:39:57.405 --> 05:40:01.259
And finally update your code, 
your themes like I said before 

05:40:01.260 --> 05:40:04.613
this is one of the most common 
ways that attackers compromise a

05:40:04.614 --> 05:40:08.246
 site.  And I know this is 
difficult because I have talked 

05:40:08.247 --> 05:40:11.749
to a developer before and she 
said my client they don't want 

05:40:11.750 --> 05:40:17.777
to update their site because if 
we update the core CMS files 

05:40:17.778 --> 05:40:21.786
they are going to mess up a 
whole bun P of plug-ins.  But it

05:40:21.787 --> 05:40:24.885
 is in your client's best 
interest to update and you have 

05:40:24.886 --> 05:40:26.945
to convince them.  You have to 
talk to them about make ing a 

05:40:26.946 --> 05:40:30.268
site that is boths secure       
       both skwuren         

05:40:30.269 --> 05:40:32.482
secure and still works for them.
  That's the really important 

05:40:32.483 --> 05:40:36.684
bees      piece.  As I said 
earlier there is a lot of 

05:40:36.685 --> 05:40:40.385
documentation that going gem   
      Google can give to help 

05:40:40.386 --> 05:40:44.083
you.  And that's where our 
security guides are.  The ones 

05:40:44.084 --> 05:40:47.542
for the specific hack campaigns 
that we have identify ied and we

05:40:47.874 --> 05:40:50.243
 are con stontly building more 
of these guides for different 

05:40:50.244 --> 05:40:52.871
types of hacking things that we 
have identify ied.  The second 

05:40:52.872 --> 05:40:57.633
thing is the webmaster help 
forums.  We have a lot of 

05:40:57.634 --> 05:41:02.107
awesome top krk     krsh      
krb     krshtors          

05:41:02.108 --> 05:41:05.371
contribute or to help you re
mediate your site and identify 

05:41:05.372 --> 05:41:08.512
any vulnerables         
nerability ies and follow us on 

05:41:08.513 --> 05:41:11.909
Twitter.  We will give you up
dates about search and security.

05:41:11.910 --> 05:41:15.159
  I am going to hand it back to 
Elie to talk to you about the 

05:41:15.160 --> 05:41:17.160
second part of secure ing your 
site and that's building a safer

05:41:17.771 --> 05:41:20.761
 website.  
  Â» ELIE BURSZTEIN:  Thank you. 

05:41:28.402 --> 05:41:34.339
said when it comes to security 
prevention is key and so far at 

05:41:34.340 --> 05:41:38.122
Google we didn't have much of a 
public course to help you out.  

05:41:38.123 --> 05:41:41.893
So we did     decided in the 
last year and a half to develop 

05:41:41.894 --> 05:41:44.358
a new security force which is 
meant to be very hands on so you

05:41:44.435 --> 05:41:46.691
 can have a very practical 
knowledge that you can apply to 

05:41:46.692 --> 05:41:50.355
security your website.  The core
 idea whined        behind the 

05:41:50.356 --> 05:41:52.356
koes       he course

05:41:57.116 --> 05:42:01.116
 to have a short focus lecture 
on core concept and a lot of 

05:41:57.116 --> 05:41:59.571
your site sko cow         so you
 can have hands-on experience 

05:41:59.572 --> 05:42:02.554
and knowledge to help protect 
your site.  So last week it was 

05:42:02.555 --> 05:42:06.221
-- I will do what the course 
looks lib     like.  The course 

05:42:06.222 --> 05:42:09.821
will be a set of 12 lek turs 
which will be grouped in to 

05:42:09.822 --> 05:42:13.141
three main categories.  First 
thing we are going to discuss 

05:42:13.142 --> 05:42:16.500
how to handle user data safely  
 ly   ly from how do I 

05:42:16.501 --> 05:42:21.000
authenticate my use     user, 
how do I maintain safely and how

05:42:21.126 --> 05:42:25.099
 do I encrypt my communication 
so that when they interact with 

05:42:25.100 --> 05:42:29.050
website your use the site.  The 
second thing we are going to 

05:42:29.051 --> 05:42:31.476
cover is web attacks.  These are
 attacks that are specific to 

05:42:31.477 --> 05:42:34.424
web security and you need to 
know to make sure they -- you 

05:42:34.425 --> 05:42:37.006
are noul      not vul ner ebl   
     nerable to them.  We are 

05:42:37.007 --> 05:42:42.079
going to cover the four big ones
 which is comshgs         XSS 

05:42:42.080 --> 05:42:51.036
and CSRF and S   SQL injection 
and click jacking.  Embed a

05:42:52.724 --> 05:42:56.440
 widget from a third party 
website and if you get hacked to

05:42:56.593 --> 05:42:59.705
 how do you deal with user 
content and how do I make sure 

05:42:59.706 --> 05:43:03.244
that I don't have toxic content 
on my website and doiPt       

05:43:03.245 --> 05:43:08.611
don't famous a picture in to my 
beautiful stream and as Eric 

05:43:08.612 --> 05:43:11.395
said when you get haked it is 
difficult                   

05:43:11.396 --> 05:43:15.325
ed        hacked it is difficult
 to recover and you concrete 

05:43:15.326 --> 05:43:18.147
case of hacking so you can learn
 how to investigate them and 

05:43:18.148 --> 05:43:21.460
clean up.  So if the event that 
you get hacked, you already 

05:43:21.461 --> 05:43:24.730
prepared.  So for each lek is 
your we            cture we are 

05:43:24.731 --> 05:43:27.843
going to provide you a few 
materials.  We are going to give

05:43:28.094 --> 05:43:31.223
 you slides where we can review 
the lecture, we will do a video 

05:43:31.224 --> 05:43:34.337
of the slide with some 
explanation and the most impart

05:43:35.433 --> 05:43:38.678
    portant part we will give 
you exercises and quizzes so you

05:43:38.883 --> 05:43:41.146
 know how well you are doing and
 if you have understood the 

05:43:41.147 --> 05:43:47.488
concept.  So it was a real 
development point we have built 

05:43:47.489 --> 05:43:49.914
a ton of those.  We have over 50
 compersz          exercises for

05:43:50.016 --> 05:43:54.723
 you.  They are going to be in 
beautiful aspect, web security. 

05:43:54.724 --> 05:43:59.152
 First you have attack exercise 
where you wear your black hat 

05:43:59.153 --> 05:44:02.297
and you try to attack website 
and you get in to the mind set 

05:44:02.298 --> 05:44:06.058
of the attacker and then, of 
course, we go to defense where 

05:44:06.059 --> 05:44:09.510
you know how to apply the best 
set of techniques to protect 

05:44:09.511 --> 05:44:12.180
your website and you really 
understand what is the mechanism

05:44:12.905 --> 05:44:15.660
 or how you can apply them 
successfully and for some of 

05:44:15.661 --> 05:44:19.079
those things, especially for 
hacking we will cover 

05:44:19.080 --> 05:44:22.333
investigation and give you some 
puzzle and interesting hacks to 

05:44:22.334 --> 05:44:26.371
look and understand if you can 
figure them out.  One of the 

05:44:26.372 --> 05:44:29.148
essential challenges we had to 
overcome     come     come was 

05:44:29.149 --> 05:44:33.007
it is not easy to teach web 
security because you manipulate 

05:44:33.008 --> 05:44:37.895
useable code.  We can't put it 
online and how you do that?  You

05:44:37.896 --> 05:44:41.372
 oshlgly people    ep        
ly    originally people come up 

05:44:41.373 --> 05:44:44.732
with the idea of use ing virtual
 machine and you have to run 

05:44:44.733 --> 05:44:47.723
things.  This is not very ideal 
bau it is           because it 

05:44:47.724 --> 05:44:51.988
is very resource intensetive.  
It is on your computer and 

05:44:51.989 --> 05:44:56.398
limits the amount of device you 
can use.  So about a year ago we

05:44:56.399 --> 05:45:00.775
 were thinking of a problem and 
we say well, what technology has

05:45:01.074 --> 05:45:04.568
 so much evolved.  Let's try to 
do something different.  Let's 

05:45:04.569 --> 05:45:09.912
try to use a web hack technology
 and the crazy idea we had let's

05:45:10.021 --> 05:45:13.696
 br    build a web server in to 
the Web page.  I know that 

05:45:13.697 --> 05:45:17.120
sounds crazy but the idea was we
 have sweb service              

05:45:17.121 --> 05:45:21.599
web service worker.  We can make
 it intercepting a request and 

05:45:21.600 --> 05:45:27.452
respond to that.  And let's 
throw in a web SQL in    

05:45:27.453 --> 05:45:32.597
database and see if it works.  
We try ied it and it works real

05:45:32.760 --> 05:45:36.000
ly now.  Now what we have for 
you is a test bed where you just

05:45:36.173 --> 05:45:38.672
 go to the website and then 
everything happens to your 

05:45:38.673 --> 05:45:42.074
browser, nothing to install.  
You get --    so it is very easy

05:45:42.650 --> 05:45:45.965
 ands  it is       all happens 
as you aren a real website.  

05:45:45.966 --> 05:45:49.822
That being said this is our 
world and you want to show -- to

05:45:49.939 --> 05:45:52.799
 see it?  Yes?  
   &gt;&gt;         

05:45:52.800 --> 05:45:56.526
   (Applause.) Can     
  Â» ELIE BURSZTEIN:  Let's jump 

05:45:56.527 --> 05:45:59.815
to the first demo that will show
 you the framework.  So we are 

05:45:59.816 --> 05:46:04.299
going to do a simple website 
which going through logging our 

05:46:04.300 --> 05:46:08.640
users.  So it    to do that we 
are going to first need to have 

05:46:08.641 --> 05:46:13.616
a server system.  As everything 
and really look like with 

05:46:13.617 --> 05:46:18.285
express.  We recognize syntax.  
We need to declare our world.  

05:46:18.286 --> 05:46:22.406
When you log-in page we need 
would       two pages.  We need 

05:46:22.407 --> 05:46:25.818
somewhere where the user will 
land and we have a form.  Let's 

05:46:25.819 --> 05:46:30.495
create that.  And then let's add
 a second which would be process

05:46:30.859 --> 05:46:32.783
ing information and decide 
whether or not you try to log in

05:46:32.784 --> 05:46:39.509
.  So we are going to create two
 words.  One is a get and the 

05:46:39.510 --> 05:46:43.049
other one is (inaudible) and for
 now which is going to say LOL 

05:46:43.050 --> 05:46:46.711
just to see if it works.  
Remember this always -- you can 

05:46:46.712 --> 05:46:49.570
see it on the bar.  This is all 
across.  No connection.  All off

05:46:49.912 --> 05:46:57.452
line.  And we hope it is going 
to work.  All right.  So let's 

05:46:57.453 --> 05:47:00.412
look the other side, we load the
 framework and go to the page 

05:47:00.413 --> 05:47:04.129
and see if it works.    
And here you have it.  We have a

05:47:04.130 --> 05:47:09.064
 working Web page in to our 
browser.  Now let's add a little

05:47:09.252 --> 05:47:12.562
 bit more things because it is a
 log-in page.  So we need a form

05:47:12.993 --> 05:47:15.997
.  Add a form.  Unfortunately
               Fortunately 

05:47:15.998 --> 05:47:21.967
support templates like any 
normal web form.  Let's add -- 

05:47:21.968 --> 05:47:25.911
password and a log in fee and 
let's reload to make sure we see

05:47:26.194 --> 05:47:28.194
 our log in form

05:47:30.144 --> 05:47:33.557
.  
   &gt;&gt; Hole on         Hold on.  

05:47:33.558 --> 05:47:36.424
  Â» ELIE BURSZTEIN:  To add the 
template, I fore -- we have to 

05:47:36.425 --> 05:47:40.032
add the indexing and we are 
going to load the template and 

05:47:40.033 --> 05:47:44.479
we load -- and mopefully you 
have                    

05:47:44.480 --> 05:47:48.604
hopefully you have a nice GUI 
layer form.  That's great.  It 

05:47:48.605 --> 05:47:51.458
didn't do much.  We need to 
process it.  So let's have a 

05:47:51.459 --> 05:47:54.317
bunch of users.  So here what we
 are going to do is we are going

05:47:54.679 --> 05:47:58.900
 to add a database.  So adding a
 database in the framework is 

05:47:58.901 --> 05:48:02.109
very uz    easy.  All you have 
to do is create a database one 

05:48:02.110 --> 05:48:06.033
line of code, do automatic for 
us.  And then we are going to 

05:48:06.034 --> 05:48:10.506
add a user, so let's create a 
user table which just contain a 

05:48:10.507 --> 05:48:16.471
log and password.  All right.  
Let's add a user, Google user 

05:48:16.472 --> 05:48:22.936
for the demo.  And by the way, 
do not store your password.  Do 

05:48:22.937 --> 05:48:27.879
not do this.  This is a demo.  
This isn't secure.  So let's add

05:48:27.880 --> 05:48:32.809
 that and add a little bit of 
Java code to check where 

05:48:32.810 --> 05:48:34.810
database and collect if it 
happened.      ed             

05:48:34.934 --> 05:48:39.614
            check if it happen
ed.  Run it in to a SQL query 

05:48:39.615 --> 05:48:42.118
and test if it is correct and we
 have you had everything

05:48:42.724 --> 05:48:45.991
                         should 
have everything.  Let's try it. 

05:48:46.217 --> 05:48:49.608
 Reload.  Now we have a page.  
Let's try with a wrong password.

05:48:49.609 --> 05:48:53.099
  So Google I/O A password 1, 2,
 3

05:48:56.315 --> 05:49:04.641
.  Yes.  User network and works 
as intended and try again.  

05:49:04.642 --> 05:49:09.293
Google I/O as a cuesor        
user.  And password and click on

05:49:09.384 --> 05:49:14.515
 it.  Whoo hoo we are logged in.
  So we have a fully functional 

05:49:14.516 --> 05:49:17.984
log in system with database 
website few lines of code.  This

05:49:18.065 --> 05:49:21.146
 is a form we built         
      framework we built and 

05:49:21.147 --> 05:49:23.706
this is the framework that we 
used to create a cherz      n 

05:49:23.707 --> 05:49:26.881
exercise.  Yes?  
   (Applause.) 

05:49:26.882 --> 05:49:29.374
  Â» ELIE BURSZTEIN:  All right. 
 Let's go back to the slide and 

05:49:29.375 --> 05:49:34.648
talk a little bit more about the
 contents.  So we show the 

05:49:34.649 --> 05:49:37.452
technical framework we have 
behind it.  Framework is great. 

05:49:37.606 --> 05:49:41.887
 Content is better.  You need it
.  So laets jum           let's 

05:49:41.888 --> 05:49:44.417
jump in to one of the SQL 
injection and show you what kind

05:49:45.807 --> 05:49:50.865
 of content you will learn.  You
 can attack from                

05:49:51.301 --> 05:49:54.546
     Attack that you can suffer 
from.  And how to prevent them 

05:49:54.547 --> 05:49:59.681
and after that Yuan will do a 
few exercises of how you can 

05:49:59.682 --> 05:50:05.564
learn it hands off.  So why do 
SQL injections exist?  During 

05:50:05.565 --> 05:50:08.388
our little demo we introduced a 
vulnerability           ner    

05:50:08.789 --> 05:50:11.561
nerability.  Because when you 
have a SQL statement and skl 

05:50:11.562 --> 05:50:15.335
contains both key words which 
tell you what to do and 

05:50:15.336 --> 05:50:17.933
parameter will tell you what to 
look for.  If attacker is to 

05:50:17.934 --> 05:50:21.264
control one of the parameters 
you can inject key words and the

05:50:21.416 --> 05:50:24.122
 server have no way to 
distinguish between two the and 

05:50:24.123 --> 05:50:29.137
we have this any verse in   
                universe in our 

05:50:29.138 --> 05:50:34.624
very own code.  It make injeblgt
ion         jeksion possible.  

05:50:34.625 --> 05:50:37.460
Attacker with basis control 
skwool query  er       SQL    

05:50:37.615 --> 05:50:43.132
        SQL query will bypass 
any security check you have.  

05:50:43.133 --> 05:50:46.756
And delete ing the database 
encrypting it and do other 

05:50:46.757 --> 05:50:53.381
things.  Norm      Formally the 
consequences of an attack, it 

05:50:53.382 --> 05:50:57.482
brinls        brijs       
bridges confidential yt and also

05:50:58.377 --> 05:51:01.644
         ity       ity and it 
authenticate without knowing the

05:51:01.841 --> 05:51:03.841
 password.  You can defeat any 
type of check. 

05:51:06.753 --> 05:51:11.316
 So there is really type of SQL 
injection.  Classic one we are 

05:51:11.317 --> 05:51:15.025
going to demonstrate one today 
and there is more advanced one 

05:51:15.026 --> 05:51:20.644
and second sword       order 
injection and the blind 

05:51:20.645 --> 05:51:23.879
injection.  So the class can one
 as I explained works very 

05:51:23.880 --> 05:51:27.503
simply the attacker instead of 
sending what you expect, will do

05:51:28.400 --> 05:51:32.534
 the unexpectible and try to 
manipulate the SQL query by send

05:51:33.127 --> 05:51:36.100
ing specific payloads and you 
your data business will happy

05:51:36.486 --> 05:51:43.102
 ily do whatever wants and here 
is a concrete example.  Right?  

05:51:43.103 --> 05:51:46.616
If the attacker can inject the 
user name then he can decide and

05:51:46.891 --> 05:51:51.527
 say user name to say say gooeg
       Google allege        then

05:51:51.746 --> 05:51:55.482
      and then close the field 
and add dash dash and which -- 

05:51:55.483 --> 05:52:00.580
you can see on the screen well, 
you are basically bypassing 

05:52:00.581 --> 05:52:04.615
authentication.  So to make it 
more concrete let aets     's 

05:52:04.616 --> 05:52:07.124
jump to our second demo.  We 
will show the attack live 

05:52:07.125 --> 05:52:15.160
hopefully.  Demo, please.    
All right.  So with that      

05:52:15.161 --> 05:52:19.850
tsh we are        --        -- 
we are back to our demo.  Can 

05:52:19.851 --> 05:52:24.247
you going ba to the code, if you
 remember we put the user name 

05:52:24.248 --> 05:52:30.105
and put it in to our query.  You
 can see it on the  he screen.  

05:52:30.106 --> 05:52:34.534
We user input and be able to log
 to the website without the 

05:52:34.535 --> 05:52:38.435
password.  So let's demonstrate 
that.  So the way to do that is 

05:52:38.436 --> 05:52:42.904
as we explained is you use user 
nim.         r  r name.  And 

05:52:42.905 --> 05:52:46.078
then instead of doing what 
expected we are going to add a 

05:52:46.079 --> 05:52:50.740
quote to close the parameters 
and then we are going to escape.

05:52:50.741 --> 05:52:54.853
  And the -- escape and SQL is 
just this.  How many of thinking

05:52:54.854 --> 05:52:58.590
 it goes      going to work?  
One person.  You have no faith m

05:52:59.168 --> 05:53:04.640
 in moo          in me.  We are 
going to do it.  Let's try.  All

05:53:04.641 --> 05:53:09.423
 right.  So here it is.  We will
 log to website without any 

05:53:09.424 --> 05:53:13.994
password because we let the 
attacker manip put lay        

05:53:15.988 --> 05:53:19.077
ulate the input which you should
 never do.  Go back to the slide

05:53:19.932 --> 05:53:23.255
.  Is how do you prevent that?  
There is a simple way to defend 

05:53:23.256 --> 05:53:27.308
against that.  This is called 
parameterized query and also 

05:53:27.309 --> 05:53:30.324
known as prepared statement.  
Instead of use ing the value

05:53:30.450 --> 05:53:33.642
 able in to your query you are 
going to write a query and 

05:53:33.643 --> 05:53:36.524
specific what is the pa ra
   rameter should do and then 

05:53:36.525 --> 05:53:41.232
put in afterwards.  That will 
prevent SQL injection and you 

05:53:41.233 --> 05:53:44.556
should escape the user input.  
You should not trust them.  Such

05:53:44.882 --> 05:53:52.356
     .    So that concludes our 
short demo of SQL inject shub

05:53:52.704 --> 05:53:54.704
     ion.  We are going to show 
you how the exercise

05:53:58.592 --> 05:53:59.198
 works and how the frameworks 
works.  How many of you would 

05:53:59.199 --> 05:54:03.020
like to get early access to the 
course.  That's brilliant.  All 

05:54:03.021 --> 05:54:07.009
of you.  
   Â» YUAN NIU:  All right.  So 

05:54:07.010 --> 05:54:10.831
so signing up is very easy.  You
 have to register use ing the 

05:54:10.832 --> 05:54:20.057
link on the screen starting 
today.  G.co/learnwebtech.  

05:54:20.058 --> 05:54:24.789
Let's switch to the demo mow    
   mo   mo.  Since we are 

05:54:24.790 --> 05:54:27.433
familiar with SQL injection 
already we are kept      skip to

05:54:27.434 --> 05:54:31.232
 that.  As I willy mentioned 
each        ed             ly   

05:54:32.040 --> 05:54:36.292
        Elie mentioned each top
ic   ic   ic   ic   ic will have

05:54:37.056 --> 05:54:40.541
 material and quizzes and, of 
course, the exercises that are 

05:54:40.542 --> 05:54:44.043
going to give you some hands-on 
experience so that you can 

05:54:44.044 --> 05:54:47.365
reinforce what you have been 
learning.  You will be attacking

05:54:47.876 --> 05:54:51.094
 defending and investigating 
sites and to make it a little 

05:54:51.095 --> 05:54:54.943
more fun we are take ing 
inspiration from the power 

05:54:54.944 --> 05:54:59.943
versus cake more to kraPt       
vaft      draft some of your 

05:54:59.944 --> 05:55:04.722
scenarios.  In our world the pi 
sin ate         inned Kate is   

05:55:04.900 --> 05:55:09.448
               sind Kate is a  
              syndicate is a 

05:55:09.449 --> 05:55:14.096
little worry ied.  They are 
going to try to attack the rival

05:55:14.249 --> 05:55:19.568
's website.  So we will be tick
      steking with the base ic 

05:55:19.569 --> 05:55:23.314
exercises today and since we 
have pretty much done attack No.

05:55:23.783 --> 05:55:28.464
 1 with Elie we will skip to No.
 2 and for this I will need my 

05:55:28.465 --> 05:55:33.781
black hat.  Okay.  All right.  
So we have an objective on the 

05:55:33.782 --> 05:55:38.808
left.  Hey pie, that cake shop 
is still in business.  We can't 

05:55:38.809 --> 05:55:42.528
keep lose ing slices of our 
territory to rival industries.  

05:55:42.529 --> 05:55:46.510
They still have a most on   ly 
online operation for now but we 

05:55:46.511 --> 05:55:50.118
must acts quickly.  They are 
still vulnerable to skwg      

05:55:50.119 --> 05:55:54.526
SQL injections.  We have gotten 
a leaked copy of their server 

05:55:54.527 --> 05:55:58.467
owed code but               code
 but no idea who the user could 

05:55:58.468 --> 05:56:01.740
be.  We need to you get their 
customer list and get to it.  Pi

05:56:01.892 --> 05:56:06.410
 boss.  So very hopefully we 
have a direct link to the page 

05:56:06.411 --> 05:56:11.230
that we are going to attack.  
And we have a copy of the server

05:56:11.988 --> 05:56:15.777
 code.  So we have the same 
vulnerable        

05:56:15.778 --> 05:56:18.713
ner    nerability as before but 
because we don't know the user 

05:56:18.714 --> 05:56:20.714
name

05:56:22.434 --> 05:56:27.965
 we -- our previous bad input 
won't work.  So let's take a 

05:56:27.966 --> 05:56:31.897
look at the code.  And on    on 
line 12 we see that actually it 

05:56:31.898 --> 05:56:36.886
doesn't really matter what the 
select statement returns as long

05:56:36.987 --> 05:56:41.016
 as it returns anything at all. 
 So this is where we will be 

05:56:41.017 --> 05:56:46.056
targeting our new traft       
crafted query.  We need to get 

05:56:46.057 --> 05:56:49.556
the where statement to return 
true ats all times.  And to do 

05:56:49.557 --> 05:56:53.918
that, we will just add let's 
see,

05:56:57.626 --> 05:57:02.710
 1 equals 1 and this has an 
affect of saying choose -- 

05:57:02.711 --> 05:57:09.406
select from users where user 
name equals admin or true.  And 

05:57:09.407 --> 05:57:14.959
so now we are going to force the
 statement to true and now we 

05:57:14.960 --> 05:57:18.809
have access to their customer 
list.  And that popup means that

05:57:19.176 --> 05:57:24.928
 we succeeded.  So we can move 
on to the defense.  Okay.    

05:57:25.084 --> 05:57:27.084
Close this

05:57:28.913 --> 05:57:35.258
.  Okay.  For this I'm back on 
to cake.  And I have got my 

05:57:35.259 --> 05:57:41.569
white hat for that.  So our 
mission once again greetings 

05:57:41.570 --> 05:57:46.334
fellow baker.  As you know this 
one chatter of an upstart pie 

05:57:46.335 --> 05:57:50.364
maker with crusty connections.  
We spP     suspect they have 

05:57:50.365 --> 05:57:54.896
been trying to attack cake shops
.  Your site has been identify

05:57:55.109 --> 05:57:58.976
 ied as one of these targets.  
In particular it seems log-in 

05:57:58.977 --> 05:58:03.417
page leaves vulnerable to SQL 
injection.  Please fix it at 

05:58:03.418 --> 05:58:06.949
your earliest con convenience 
cake boss.  So this time we are 

05:58:06.950 --> 05:58:13.501
going to use the editor and 
let's see, I'm going to refresh.

05:58:13.502 --> 05:58:18.928
  Let's see, oops.  Refresh 
again.  Sometimes the server 

05:58:18.929 --> 05:58:22.509
need o to get updated properly. 
 So it takes a little bit of 

05:58:22.510 --> 05:58:29.640
time.  Okay.  There we go.  And 
let's verify first that we are 

05:58:29.641 --> 05:58:36.525
still vulnerable to the SQL 
injection attack.  And indeed we

05:58:36.693 --> 05:58:43.234
 are.  Okay.  So all right.  We 
are going to use our edit tore 

05:58:43.395 --> 05:58:48.374
    or to fix things and this 
editor comes with hiring, all 

05:58:48.375 --> 05:58:53.121
the nice stuff.  And we are also
 need these three buttons on the

05:58:53.296 --> 05:58:56.396
 side.  The first one will run 
our code against the test 

05:58:56.397 --> 05:59:00.965
framework and make sure that 
what we are doing will succeed, 

05:59:00.966 --> 05:59:04.747
will not succeed and just tells 
us when we finish the exercise. 

05:59:05.020 --> 05:59:08.030
 And in this case we failed 
because we haven't actually fix

05:59:08.246 --> 05:59:14.659
ed anything.  The second button 
is going to give us a hint.  And

05:59:14.810 --> 05:59:20.730
 finally the third one will re
set everything and sosh      

05:59:20.731 --> 05:59:23.152
sdosh that we can rt          
            -- so that we can 

05:59:23.153 --> 05:59:25.734
start from scratch.  To go about
 actual tli fixing    ing    

05:59:25.859 --> 05:59:30.155
         ly fixing this we will 
use parameterized query ies and 

05:59:30.156 --> 05:59:33.825
has     has     it is lot called
 a prepared statement.  We are 

05:59:33.826 --> 05:59:37.282
not spelgs        supposed to 
use user input directly we will 

05:59:37.283 --> 05:59:42.559
sell the tell the SQL prepare a 
statement that has specify ied 

05:59:42.560 --> 05:59:49.986
exactly when to expect external 
input.  So here this is the 

05:59:49.987 --> 05:59:53.631
parameterized statement and then
 give it the user name A.    and

05:59:53.977 --> 06:00:01.874
 password here.  Let's see,  if 
that passes our test.  Okay.  So

06:00:02.204 --> 06:00:05.956
 there       this should be 
good.  Let     Now let's refresh

06:00:06.340 --> 06:00:09.015
 and double check that we have 
-- it actually works -- oops

06:00:16.029 --> 06:00:21.655
.  And we have successfully be
    defends ourselves against 

06:00:21.656 --> 06:00:25.028
this particular SQL attack.  
Remember that is just the base

06:00:25.356 --> 06:00:29.392
 ic exercise.  In practice in 
create ing actual websites in 

06:00:29.393 --> 06:00:38.310
the view it sanitizer s rs user 
input.  Never trust external 

06:00:38.311 --> 06:00:43.530
input.  That's it for the demo 
today.  Let's not tempt the demo

06:00:43.696 --> 06:00:46.229
 Gods any further.  Back to the 
slides, please.  

06:00:46.230 --> 06:00:51.821
   (Applause.) 
   Â» YUAN NIU:  Okay.  So thank 

06:00:51.822 --> 06:00:54.945
you for attending our sense
       session.  Even you can 

06:00:54.946 --> 06:00:58.431
sign up for act     early access
 to the course which will be 

06:00:58.432 --> 06:01:01.658
released this summer and if you 
are interested in learning more 

06:01:01.659 --> 06:01:08.521
about web tech or maps or    
head haefr       over to some of

06:01:08.961 --> 06:01:12.510
 sandboxes.  Interest is    
there                There is 

06:01:12.511 --> 06:01:17.524
one by stage 6 and thank you 
again and enjoy the rest of I/O.

06:01:17.525 --> 06:01:20.262
  We will stick around for 
questions.  

06:01:20.263 --> 06:01:22.263
   (Applause.) 
   &gt;&gt;

06:01:26.655 --> 06:01:30.266
 Should we go down for questions
?  

06:01:30.267 --> 06:01:38.137
   &gt;&gt; Hi.  This is    is one of 
first       very first thing 

06:01:38.138 --> 06:01:42.808
that hacker start doing.  The 
main problem with      what we 

06:01:42.809 --> 06:01:46.768
face is how that website gets 
hacked and it keeps sending 

06:01:46.769 --> 06:01:51.301
e-mails to a thousand other 
persons and we never knew until 

06:01:51.302 --> 06:01:56.492
website host actually what's -- 
brings down our host ser vefr

06:01:57.230 --> 06:02:00.541
     ver.  Do you know what is a
 best practice to start sending 

06:02:00.542 --> 06:02:04.127
any kind of e-mail from one web 
hosting server or I don't know 

06:02:04.128 --> 06:02:08.282
-- how do you like -- just a 
suggestion for that. 

06:02:08.283 --> 06:02:09.634
  Â» ELIE BURSZTEIN:  There are 
many of those.  One other thing 

06:02:09.635 --> 06:02:13.220
that we recommend is if you 
don't need the mail function

06:02:13.418 --> 06:02:18.916
ality to remove it from PHP as a
 configuration level and also 

06:02:18.917 --> 06:02:25.328
add firewall --   s will deny 
any connection to port 25.  If 

06:02:25.329 --> 06:02:29.113
you don't sending mail from your
 code just prevent it at the 

06:02:29.114 --> 06:02:32.159
Linux or the operating system 
level.  

06:02:32.160 --> 06:02:36.798
   &gt;&gt; But you know, when we are 
in a shared server, so maybe 

06:02:36.799 --> 06:02:40.591
like other users.  So the host 
don't give the access to do that

06:02:42.063 --> 06:02:42.720
.  
  Â» ELIE BURSZTEIN:  I ginned 

06:02:42.721 --> 06:02:43.648
stand. 
   &gt;&gt; That's          

06:02:43.649 --> 06:02:46.962
                      I under
stand.  That's why it is hard.  

06:02:46.963 --> 06:02:50.700
No magic wand.  The best thing 
is to disable the mail function

06:02:50.927 --> 06:02:54.221
al yiment          al   ality if
 you can.  

06:02:54.222 --> 06:02:57.141
   Â» YUAN NIU:  Keep an eye on 
your logs and look for spikes in

06:02:57.142 --> 06:02:59.369
 traffic and that's usually the 
first time      sign. 

06:02:59.370 --> 06:03:01.370
   &gt;&gt; All right.  Thank you.  
   &gt;&gt;

06:03:10.346 --> 06:03:10.594
   &gt;&gt;. 
   &gt;&gt;. 

06:03:10.595 --> 06:03:10.886
   &gt;&gt;. 
   &gt;&gt;. 

06:03:10.887 --> 06:03:11.131
   &gt;&gt;. 
   &gt;&gt;. 

06:03:11.132 --> 06:03:11.412
   &gt;&gt;. 
   &gt;&gt;. 

06:03:11.413 --> 06:03:11.731
   &gt;&gt;. 
   &gt;&gt;. 

06:03:11.732 --> 06:03:13.732
   &gt;&gt;

06:04:11.148 --> 06:04:12.148
RAW FILE

06:04:11.148 --> 06:04:12.417
GOOGLE I/O 2017
SAN JOSE, CALIFORNIA

06:04:12.418 --> 06:04:14.084
MAY 18, 2017
5:30 P.M. CST

06:04:12.418 --> 06:04:14.418
STAGE 3
USING GOOGLE CLOUD AND 

06:04:12.418 --> 06:04:15.818
TENSORFLOW ON ANDROID THINGS  
Services provided by:

06:04:12.418 --> 06:04:15.751
         Caption First, Inc.
         P.O. Box 3066

06:04:12.418 --> 06:04:15.751
         Monument, CO 80132
         1-877-825-5234

06:04:12.418 --> 06:04:16.084
         +001-719-481-9835
         Www.captionfirst.com

06:04:12.418 --> 06:04:16.018
This text is being provided in a
 rough draft format.  

06:04:12.418 --> 06:04:16.484
Communication Access Realtime 
Translation (CART) is provided 

06:04:12.418 --> 06:04:16.084
in order to facilitate 
communication accessibility and 

06:04:12.418 --> 06:04:16.218
may not be a totally verbatim 
record of the proceedings. 

06:04:12.418 --> 06:04:14.418
***. 
   &gt;&gt; Tennessee

06:04:23.025 --> 06:04:25.025
      sorFlow

06:17:03.435 --> 06:17:05.435
                  &gt;&gt;

06:17:08.248 --> 06:17:10.248
. 
   &gt;&gt;

06:26:35.462 --> 06:26:38.178
 Bed     Sent      TensorFlow

06:29:21.923 --> 06:29:24.022
. 
   &gt;&gt; Hi everyone.  My name is 

06:29:24.023 --> 06:29:26.023
Sam Beder

06:29:27.437 --> 06:29:30.496
 and I'm a product manager on 
Android things.  So I want to 

06:29:30.497 --> 06:29:33.725
talk about Google services on 
Android things and adding these 

06:29:33.726 --> 06:29:37.850
services to the device and your 
device's potential.  What I real

06:29:38.459 --> 06:29:43.771
ly want to convince of you today
 is not only Google services on 

06:29:43.772 --> 06:29:46.679
adestroyed things       
            Android things easy 

06:29:46.680 --> 06:29:50.236
and semless but it can make a 
huge difference in the use cases

06:29:50.333 --> 06:29:55.294
 that you can put as well as for
 your end users.  We have many 

06:29:55.295 --> 06:29:59.746
sessions on Android things as 
well as demos in the sanld      

06:29:59.747 --> 06:30:04.347
 sanldz        sandz       
sandbox area and code labs for 

06:30:04.348 --> 06:30:06.348
you

06:30:08.837 --> 06:30:12.837
 to learn more things.  Many of 
you are can being           

06:30:08.837 --> 06:30:10.198
come ing to this session with 
ideas of devices that you want 

06:30:10.199 --> 06:30:14.652
to make on Android things or for
 I/O  oT devices in general and 

06:30:14.653 --> 06:30:17.927
I want to show you today all the
 compelling use cases pa that 

06:30:17.928 --> 06:30:20.035
you             that you can get
 when you int skrit      egrate 

06:30:20.036 --> 06:30:23.039
some of these Google services.  
So I'm going to go through a 

06:30:23.040 --> 06:30:26.493
number of services today.  First
 I'm going to talk about Google 

06:30:26.494 --> 06:30:31.547
Play services which includes a 
whole suite of tools such as the

06:30:31.807 --> 06:30:36.527
 mobile voois API           
vision APIs, location services 

06:30:36.528 --> 06:30:39.223
as well as Firebase.  After that
 I'm going to gooif       dive 

06:30:39.224 --> 06:30:40.818
in to Firebase        
fire    Firebase in a little 

06:30:40.819 --> 06:30:43.669
more detail to show you how the 
realtime data that Is     

06:30:43.821 --> 06:30:47.737
   base that Firebase provides 
can allow you to publish and 

06:30:47.738 --> 06:30:51.408
persistent data and events in 
interesting ways.  After that 

06:30:51.409 --> 06:30:56.261
I'm going to in to TensorFlow 
and how TensorFlow we think is 

06:30:56.262 --> 06:30:58.262
the perfect application of a 
powerful

06:31:01.251 --> 06:31:03.273
 on device processing of your 
Android things device to really 

06:31:03.274 --> 06:31:08.546
add intelligence to that device.
  Next I want to talk about 

06:31:08.547 --> 06:31:12.183
Cloud Platform and how use ing 
Google Cloud            Cloud 

06:31:12.184 --> 06:31:15.921
Platform I   you can train and 
visualize and take action on 

06:31:15.922 --> 06:31:20.374
your device    ve   ve   vices 
in the field be and I am going 

06:31:20.375 --> 06:31:25.516
to touch on the Google assist 
ansz     ant and I   all the 

06:31:25.517 --> 06:31:29.726
things you can get.  Before I 
dives in to services I am going 

06:31:29.727 --> 06:31:34.638
to quickly gefr      over things
.  A system on molled        

06:31:34.639 --> 06:31:39.416
module design.  This means that 
we work really closely with our 

06:31:39.417 --> 06:31:42.466
silicon partners to bring you 
modules which you can place 

06:31:42.467 --> 06:31:47.073
directly in to your IoT devices.
  Now these modules are sech   

06:31:47.260 --> 06:31:50.345
   such that it is economical to
 put them in to devices when you

06:31:50.471 --> 06:31:56.407
 are make ing millions of device
s or if you have a very small 

06:31:56.408 --> 06:32:01.437
one or if you are prototype ing 
device.  E   We had a session 

06:32:01.438 --> 06:32:07.425
earlier today specifically going
 from Poe     prototype to 

06:32:07.426 --> 06:32:11.104
Android things and give you more
 details and bring your devigs

06:32:11.660 --> 06:32:14.699
    vice to production on 
Android things.  The Android 

06:32:14.700 --> 06:32:18.266
things separate ing   e ing
              operating system a

06:32:18.393 --> 06:32:21.549
 placed on top of these modules.
  So Android things is a new 

06:32:21.550 --> 06:32:27.781
vertical of Android built for 
IoT devices.  Since we work so 

06:32:27.782 --> 06:32:31.589
closely with our silicon partner
s we are able to maintain these 

06:32:31.590 --> 06:32:36.622
modules in new ways.  It allows 
these devices toor   be more 

06:32:36.623 --> 06:32:41.292
secure and update ible.  Also 
since it is an Android vertical 

06:32:41.293 --> 06:32:45.788
you get all the Android APIs 
they are used to for Android 

06:32:45.789 --> 06:32:49.727
development as well as the 
developer tools and the Android 

06:32:49.728 --> 06:32:54.301
ecosystem.  In addition on 
Android things we have added 

06:32:54.302 --> 06:32:59.637
some new APIs.  Such as 
peripheral I/O and user driver 

06:32:59.638 --> 06:33:03.783
thatly   ly    allow to you 
control                    to 

06:33:03.784 --> 06:33:08.922
you       llow you to control 
the hardware     on   ware on 

06:33:08.923 --> 06:33:13.721
your device in different ways.  
Really the queue       key piece

06:33:14.032 --> 06:33:18.357
 of Android things I believe is 
the services on top.  Because of

06:33:18.358 --> 06:33:23.102
 the API surface that Android 
things provides, it makes it 

06:33:23.103 --> 06:33:27.319
much easier for Google to put 
our services on top of Android 

06:33:27.320 --> 06:33:31.627
things.  I say endless 
possibility ies here because not

06:33:31.893 --> 06:33:34.134
 only does going gl          
Google already support all the 

06:33:34.135 --> 06:33:37.042
services I'm going to walk you 
through today, but any services 

06:33:37.043 --> 06:33:41.997
that Google makes in the future 
will be much more portable on 

06:33:41.998 --> 06:33:46.336
Android things because of this 
API service.    

06:33:46.337 --> 06:33:49.553
So now I start dive ing in to 
some of these services let's guk

06:33:49.656 --> 06:33:52.447
     talk about Google Play 
services and the useful tools 

06:33:52.448 --> 06:33:56.250
that it provides.  Google Play 
services gives you access to a 

06:33:56.251 --> 06:33:59.128
skwooet         suite of tools 
some of which you see here.  So 

06:33:59.129 --> 06:34:04.095
you get things like the mobile 
vision APIs, which allow you to 

06:34:04.096 --> 06:34:06.491
leverage the in  Intel    
 intelligence in your Android am

06:34:06.837 --> 06:34:11.236
    camera, to identify people 
in an image as well as faces and

06:34:11.237 --> 06:34:17.732
 their expressions.  You also 
get the nearby APIs which lets 

06:34:17.733 --> 06:34:21.691
when you have two devices near 
each other as those devices 

06:34:21.692 --> 06:34:25.654
interact with each other in 
interesting ways.  You get all 

06:34:25.655 --> 06:34:28.400
the cast pooiP       APIs which 
lets you from your Android 

06:34:28.401 --> 06:34:32.714
things device cast to a cast 
enabled device swir      

06:34:32.715 --> 06:34:37.709
somewhere else.  Next you have a
 location services, which lets 

06:34:37.710 --> 06:34:42.780
you query things like what are 
the cafes near highway         

06:34:42.781 --> 06:34:47.026
me and what are their hours.  
You also get the Google fit ain

06:34:47.146 --> 06:34:52.673
     APIs aallow you to attach 
sentors         sensors to your 

06:34:52.674 --> 06:34:55.752
device and then visualize this 
dethat as accept               

06:34:55.753 --> 06:34:58.916
that         data as steps or 
other activity ies in interest

06:34:59.172 --> 06:35:02.096
ing ways.  Finally you get 
Firebase we will talk about more

06:35:02.219 --> 06:35:08.034
 in a minute.  Some of you might
 know about CTS certification 

06:35:08.035 --> 06:35:12.601
and how CTS certification is a 
necessary step in order to get 

06:35:12.602 --> 06:35:17.248
these Google Play services.  
With Android things because of a

06:35:17.476 --> 06:35:20.749
 hardware model that I just talk
ed about, these modules actually

06:35:21.599 --> 06:35:26.397
 come precertified.  So they are
 all pre-CTS certified meaning

06:35:27.410 --> 06:35:29.477
    ing    ing Google Play 
services will work right out of 

06:35:29.478 --> 06:35:32.261
the box.  Gives have you 
absolute                   you

06:35:32.658 --> 06:35:36.720
      you absolutely no work to 
get those things on your Android

06:35:36.721 --> 06:35:39.495
 things devies.        vie  
  vie advice.  We also          

06:35:39.648 --> 06:35:45.837
           vie    vice.  We have
 a custom IoT variant of Google 

06:35:45.838 --> 06:35:48.688
Play services.  This allows us 
to make Google Play services 

06:35:48.689 --> 06:35:52.893
more lightweight by take ing out
 things like phone specific UI 

06:35:52.894 --> 06:35:56.272
elements and game libraries that
 we don't think are relevant for

06:35:56.602 --> 06:36:00.773
 IoT devices.  We also give you 
a signed out experience of 

06:36:00.774 --> 06:36:05.910
Google Play services.  So no un
authenticated APIs because these

06:36:06.253 --> 06:36:11.247
 just aren't relevant for many 
IoT devices.  So now let's dive 

06:36:11.248 --> 06:36:14.211
in to Firebase in for detail.  I
 want to walk you through one of

06:36:14.549 --> 06:36:18.650
 our code samples.  This is a 
code sample for a smart doorbell

06:36:19.030 --> 06:36:20.853
 use ing fire because.  It 
involve                

06:36:20.854 --> 06:36:22.387
             e ing     ing 
basement            e ing     

06:36:22.388 --> 06:36:25.565
ing fair        e ing     ing 
Firebase.  So walk you through 

06:36:25.566 --> 06:36:30.516
this diagram.  On the left you 
see a user interacting with the 

06:36:30.517 --> 06:36:35.313
smart doorbell.  What happens 
they press the button on the 

06:36:35.314 --> 06:36:39.259
smart doorbell and l   the 
camera takes a picture of 

06:36:39.260 --> 06:36:43.158
themmen   .  On the right there 
is another user in the Android 

06:36:43.159 --> 06:36:45.426
phone they can use an app to 
connect to a Firebase database 

06:36:45.427 --> 06:36:48.245
thatty can       y   can 
retrieve that image in realtime.

06:36:48.246 --> 06:36:52.192
  So how does this work?  When 
you press the button on the 

06:36:52.193 --> 06:36:56.378
smart camera and the camera 
takes a picture of you.  Then 

06:36:56.379 --> 06:37:00.233
use ing the Android Firebase SDK
 which use ing the Google place 

06:37:00.234 --> 06:37:04.877
services APIs all on the device 
it sends this image to the 

06:37:04.878 --> 06:37:08.521
Firebase database in the cloud. 
 The user on the  he other 

06:37:08.522 --> 06:37:10.522
hand,               oer    he 
other end can then use the exact

06:37:10.527 --> 06:37:12.527
 same Google Play services. 
   &gt;&gt; LIZ ANDERSON:  Destroyed

06:37:13.730 --> 06:37:18.151
      Android Firebase SDK on 
their phone and retrieve that 

06:37:18.152 --> 06:37:22.293
image.  In our code sample we 
also send this image to the 

06:37:22.294 --> 06:37:25.982
cloud vision APIs to get 
additional annotations about 

06:37:25.983 --> 06:37:29.988
what's in the image.  So these 
annotations could be something 

06:37:29.989 --> 06:37:34.378
like in this image there is a 
person holding a package.  So I 

06:37:34.379 --> 06:37:37.723
can give you an additional 
context about what's going on.  

06:37:37.724 --> 06:37:40.426
It is pretty gool      cool.  If
 you go and build this demo, you

06:37:41.662 --> 06:37:44.961
 can see when you press the 
button and takes a picture, in 

06:37:44.962 --> 06:37:47.913
less than a second the picture 
will appear and then a few 

06:37:47.914 --> 06:37:51.021
seconds later after the image is
 propagate the through        

06:37:51.152 --> 06:37:55.479
    d through the cloud vigs ape
s           vision APIs the 

06:37:55.480 --> 06:37:57.845
annotations will appear as well.
  I want to walk through some of

06:37:57.846 --> 06:38:03.659
 the code that pushes this data 
to Firebase.    

06:38:03.660 --> 06:38:07.289
So the first line you see here 
is just krooe Kate ing   e 

06:38:07.290 --> 06:38:10.281
ing              create ing a 
new door ring instance that we 

06:38:10.282 --> 06:38:14.697
are going to use in our Firebase
 database.  Then all we need to 

06:38:14.698 --> 06:38:18.659
do to make this data appear in 
our Firebase database is set the

06:38:19.060 --> 06:38:23.812
 appropriate fields of our door 
ring instance.  So here you can 

06:38:23.813 --> 06:38:27.207
see in the highlighted portion 
we are setting the time      

06:38:27.208 --> 06:38:30.805
time many P and the          
     stamp and the image fields 

06:38:30.806 --> 06:38:34.932
with the server time P stamp 
      stamp and l   the image 

06:38:34.933 --> 06:38:40.649
URL and the images  will appear 
in a Firebase database to be 

06:38:40.650 --> 06:38:45.119
retrieve by    ed by the user on
 the other side.  We send our 

06:38:45.120 --> 06:38:48.289
images to the cloud vision ape  
   APIs to get those annotations

06:38:48.414 --> 06:38:52.065
.  So we do that by kaud      
calling the cloud vision APIs 

06:38:52.066 --> 06:38:54.771
and then setting the appropriate
 field for those and know teagss

06:38:55.435 --> 06:38:58.443
                 and flow teags
            notation so that 

06:38:58.444 --> 06:39:01.674
additional context will company
         appears with       ass 

06:39:01.675 --> 06:39:05.361
well for the user  r          
              as well on the 

06:39:05.362 --> 06:39:09.720
user on the other en            
oer    he other ind     end.  I 

06:39:09.721 --> 06:39:13.013
can't talk about all the Google 
Play services.  So instead I 

06:39:13.014 --> 06:39:17.424
want to move on to ens     
TensorFlow.  We really think 

06:39:17.425 --> 06:39:21.791
that TensorFlow is the perfect 
application for the ondevice 

06:39:21.792 --> 06:39:25.693
processing of your Android 
things device.  So as you have 

06:39:25.694 --> 06:39:29.731
heard from some of the previous 
talks on Android things Android 

06:39:29.732 --> 06:39:33.229
things is not really well suited
 if you are just make ing a 

06:39:33.230 --> 06:39:36.715
simple sensor.  To fully utilize
 the and void droid things  

06:39:36.876 --> 06:39:40.562
                   Android 
things Pratt       platform 

06:39:40.563 --> 06:39:42.668
there should be some 
intelligence on this device.  

06:39:42.669 --> 06:39:45.543
You might wonder though if you 
are make ing an Internet connect

06:39:45.746 --> 06:39:51.866
ed device IoT device why do you 
need this ondevice processing.  

06:39:51.867 --> 06:39:55.585
There is several reasons why 
this could be really important. 

06:39:55.856 --> 06:39:59.439
 One reason has to do with 
bandwidth.  If, for example, you

06:39:59.620 --> 06:40:02.999
 are make ing a camera that's 
counting the number of people in

06:40:03.148 --> 06:40:08.105
 a line, and you just care about
 that number, only propagate out

06:40:08.106 --> 06:40:10.755
 that number you save huge 
amounts on bhand       badged

06:40:11.315 --> 06:40:17.802
        band wit    width but
     by not needing to send that

06:40:17.803 --> 06:40:21.156
 anywhere.  When you have br mit
        intermittent connective

06:40:21.429 --> 06:40:23.998
 ity.  If your device is only 
sometimes connected to the 

06:40:23.999 --> 06:40:28.444
Internet, for it to be really 
functional it needs to have an 

06:40:28.445 --> 06:40:31.520
on deves   vice processing for 
when it is offline.  The next 

06:40:31.521 --> 06:40:35.925
reason for ondevice processing 
has too     to do with the 

06:40:35.926 --> 06:40:39.345
principle of least privilege.  
So if you again have that camera

06:40:40.905 --> 06:40:44.564
 where you all you care about is
 the number of people standing 

06:40:44.565 --> 06:40:48.292
in a line, by principle of least
 privilege you should only be 

06:40:48.293 --> 06:40:51.339
propagate ing that number even 
if you trust the other end where

06:40:51.714 --> 06:40:55.237
 you are sending it.  There is 
also some regulatory reasons 

06:40:55.238 --> 06:40:59.459
where this could be important 
for your use case.  The final 

06:40:59.460 --> 06:41:03.506
reason for ondevice processing 
has to do with realtime 

06:41:03.507 --> 06:41:06.463
applications.  So if you are, 
for example, make ing a robot 

06:41:06.464 --> 06:41:11.307
that has to navigate through an 
environment, you want to have on

06:41:11.308 --> 06:41:13.676
 device processing.  So if 
something comes in front of that

06:41:13.677 --> 06:41:18.267
 robot you will be able to react
 to the situation.  Again I want

06:41:18.499 --> 06:41:21.752
 to mention that we have have 
code lab for TensorFlow and 

06:41:21.753 --> 06:41:22.894
troin          . 
   &gt;&gt; LIZ ANDERSON:  Destroyed

06:41:24.146 --> 06:41:28.049
things and you can try it out in
 code lab area or at home.  I 

06:41:28.050 --> 06:41:32.859
want to do a live demo so we can
 really see how it works.    

06:41:33.051 --> 06:41:36.581
So what I have here it is a 
pretty simple setup.  We have 

06:41:36.582 --> 06:41:41.078
one of our supported boards 
which is a raspberry pie in this

06:41:41.331 --> 06:41:44.644
 case as well as a wut     
button a camera and a speaker.  

06:41:44.645 --> 06:41:51.032
The button here is on top and 
camera is located in this 

06:41:51.033 --> 06:41:54.862
Android head's eye.  And then 
the speaker is in its mouth.  

06:41:54.863 --> 06:41:58.107
What what's going to happen is 
when I press the button the 

06:41:58.108 --> 06:42:01.877
camera will take a picture.  
That image is then sent through 

06:42:01.878 --> 06:42:06.140
a TensorFlow model located local
ly on the device and in the 

06:42:06.141 --> 06:42:10.609
speaker will then say what that 
TensorFlow model thinks it saw. 

06:42:11.659 --> 06:42:16.184
 So for you here today I have 
various dog breeds.  Because 

06:42:16.185 --> 06:42:19.271
locally on this TensorFlow model
 I have what's called the 

06:42:19.272 --> 06:42:23.259
inception model.  Now that 
inception model is a model 

06:42:23.260 --> 06:42:27.328
provided by Google that's able 
to identify thousands of objects

06:42:28.238 --> 06:42:33.560
.  Include ing dog breeds.  So 
let's see if we can do it.  I 

06:42:33.561 --> 06:42:37.735
just need to line up the image. 
 And. 

06:42:37.736 --> 06:42:41.636
   &gt;&gt; I see a Dalmatian.  
   Â» SAM BEDER:  All right.  For

06:42:41.637 --> 06:42:43.869
 those of you who couldn't see. 

06:42:43.870 --> 06:42:46.054
   (Applause.) 
   Â» SAM BEDER:  Yeah, .  It is 

06:42:46.055 --> 06:42:50.645
in fact, a Dalmatian.  But let's
 do it one more time.    to show

06:42:51.749 --> 06:42:55.219
 you can do more than just one 
dog breed.  So this time I have 

06:42:55.220 --> 06:43:02.399
a French bull dog.  All right.  
Line it up again.  Hope for the 

06:43:02.400 --> 06:43:06.402
best.  
   &gt;&gt; Hey that bhooks        

06:43:06.403 --> 06:43:10.634
looks like me.  Just kidding.  I
 see a French bull dog.  Rt    

06:43:10.635 --> 06:43:11.508
   Â» SAM BEDER:  All right.  
Yeah, .  

06:43:11.509 --> 06:43:13.509
   (Applause.) 
   Â» SAM BEDER:  Good job little

06:43:13.543 --> 06:43:15.810
 guy.  So as I tension         
mentioned this is already

06:43:16.605 --> 06:43:19.754
         all running locally.  
This is not connected to the 

06:43:19.755 --> 06:43:23.073
Internet at all and this is 
battery powered.  It is totally 

06:43:23.074 --> 06:43:28.602
portable.  So I think that this 
example really shows some of the

06:43:28.891 --> 06:43:31.731
 power you can get with 
TensorFlow.  Now it is walk 

06:43:31.732 --> 06:43:34.886
through some of the code that 
makes this integrate ion 

06:43:34.887 --> 06:43:39.142
possible.  This first page as 
you can see is pretty simple.  

06:43:39.143 --> 06:43:43.486
In    And this just shows um 
load         up loading the 

06:43:43.487 --> 06:43:46.306
appropriate TensorFlow lie braeb
       brary to be used by our 

06:43:46.307 --> 06:43:48.639
defies    vice.  The first thing
 I want you to note here is that

06:43:49.703 --> 06:43:53.876
 we are actually only loading 
the same libraries as is used by

06:43:54.275 --> 06:43:59.041
 Android.  So all the TensorFlow
 code that works on Android will

06:43:59.042 --> 06:44:03.203
 also work on Android things.  
All the samples that all you 

06:44:03.204 --> 06:44:06.462
have on Android for TensorFlow 
you can port immediately to and 

06:44:06.463 --> 06:44:08.846
dried things             
   Android things.  The second 

06:44:08.847 --> 06:44:13.917
thing I want you to note is that
 actually load in the inference 

06:44:13.918 --> 06:44:18.121
libraries of TensorFlow.  
TensorFlow is basically composed

06:44:18.453 --> 06:44:22.986
 of two sets of libraries.  
There is training, which is 

06:44:22.987 --> 06:44:25.992
where you give it thousands of 
images along with labor bl   

06:44:26.664 --> 06:44:31.928
       labels.  So you can make 
that model that can make those 

06:44:31.929 --> 06:44:34.584
predictions and then there is 
the inference libraries where 

06:44:34.585 --> 06:44:38.839
use ing that model   del that 
you trained to theak       make 

06:44:38.840 --> 06:44:43.639
those predictions.  Let gaes to 
many             's to the core 

06:44:43.640 --> 06:44:46.306
functionality.  These are the 
steps to run input data through 

06:44:46.307 --> 06:44:50.784
a TensorFlow model.  The first 
method you see there the feed 

06:44:50.785 --> 06:44:55.952
method is we are loading in your
 input data.  So we have three 

06:44:55.953 --> 06:44:59.955
arguments.  Inpull     pull     
put layer name which is the 

06:44:59.956 --> 06:45:04.150
first layer of TensorFlow model 
where you are going to put your 

06:45:04.151 --> 06:45:07.343
input data and next there is 
tensordy vengs         

06:45:07.344 --> 06:45:09.660
dy imensions which describes the
 structure of your input layer 

06:45:09.661 --> 06:45:13.414
so you you can understand what's
 going in to your mod did    el 

06:45:13.415 --> 06:45:15.415
and then you have iment imagine 
pixels

06:45:17.752 --> 06:45:20.885
 which is 
the                 cks              

06:45:17.752 --> 06:45:20.250
 imagine pick 
sells                              

06:45:20.251 --> 06:45:24.303
 im    have image pick sells 
           pixels.  The input 

06:45:24.304 --> 06:45:28.738
data is pixels.  But this same 
type of tense TensorFlow model 

06:45:28.739 --> 06:45:33.587
will work across many use cases.
  So if instead you had just 

06:45:33.588 --> 06:45:37.737
sensor data or a combination of 
sensor data and camera data, you

06:45:37.934 --> 06:45:40.759
 could use the same type of 
TensorFlow model and it would 

06:45:40.760 --> 06:45:45.855
still work.  So the next slide, 
the actual highlighted portion 

06:45:45.856 --> 06:45:50.136
is really actual work gets done.
  So we call the one method.  To

06:45:50.293 --> 06:45:53.611
 run this input data through our
 TensorFlow model to get that 

06:45:53.612 --> 06:45:57.857
retriks         prethikion   
         dikion on t         

06:45:57.858 --> 06:46:01.848
prediction on the other side.  
Finally we need a fetch our data

06:46:02.040 --> 06:46:05.739
 so we can use it.  We call 
fetch along with output array to

06:46:05.896 --> 06:46:10.318
 store our data.  Now this out
put array is composed of 

06:46:10.319 --> 06:46:16.089
elements that correspond to the 
confidence that an object is 

06:46:16.090 --> 06:46:20.685
what we saw on the image.  So in
 our first example we predicted 

06:46:20.686 --> 06:46:25.694
Dalmatian.  That means that the 
element         and     element 

06:46:25.695 --> 06:46:32.250
with highest confidence was that
 that core y e y   re         

06:46:32.251 --> 06:46:35.791
corresponded to Dalmatian.  For 
example, if there is two results

06:46:36.313 --> 06:46:39.020
 that both were highly 
confidence            confident 

06:46:39.021 --> 06:46:43.696
you could say, I think it is one
 of these two things.  And if 

06:46:43.697 --> 06:46:48.181
there were no results -- there 
is no results above a certain 

06:46:48.182 --> 06:46:51.222
threshold of conferred          
 confidence you can say I don't 

06:46:51.223 --> 06:46:55.193
know what's in in image.  Once 
you have output of confidences 

06:46:55.194 --> 06:46:58.928
you can do extra gePd depend    
         genldzing on       ing

06:46:59.134 --> 06:47:01.680
            depending    
ing    ing us       ing    ing 

06:47:01.681 --> 06:47:05.843
your use case but I think there 
is more zing    ing     interest

06:47:06.147 --> 06:47:08.956
ing things that we can do.  Once
 we connect devices like this to

06:47:09.301 --> 06:47:12.795
 the cloud.  So next I want to 
talk about Google Claude 

06:47:12.796 --> 06:47:15.505
platform                 Cloud
            Cloud Platform and 

06:47:15.506 --> 06:47:19.336
specifically cloud IoT core.  So
 cloud IoT core is a new offer

06:47:19.891 --> 06:47:25.237
ing that we are anouns     nows
    nnounce ing here at I/O for 

06:47:25.238 --> 06:47:30.232
connecting IoT devices to the 
Cloud Platform.  It has a number

06:47:30.605 --> 06:47:37.284
 of services.  You can do thing 
likes      s like MQTT, MQTT is 

06:47:37.285 --> 06:47:41.990
a looit       lightweight fro to
 kol that                 proto 

06:47:41.991 --> 06:47:47.756
kwol        to   tocol.  Card de
coder is 100% managed service.  

06:47:47.757 --> 06:47:51.217
It get things like automatic 
load balance ing and resource 

06:47:51.218 --> 06:47:52.703
propositioning            
position              pre

06:47:52.704 --> 06:47:56.773
positioning and you can connect 
one device of cloud IoT core or 

06:47:56.774 --> 06:48:01.375
a million devices and all these 
things still work the aim     

06:48:01.376 --> 06:48:05.414
same way.  Global access point, 
no matter what region your 

06:48:05.415 --> 06:48:08.490
device is in you can use the 
same configure ation and connect

06:48:08.491 --> 06:48:11.632
 to the same Google Cloud.  
Cloud

06:48:14.699 --> 06:48:21.275
 I.D.      oishgs T          IoT
 wof     cores  -- -- you can 

06:48:21.276 --> 06:48:23.077
configure individual devices 
that you have in the field as 

06:48:23.078 --> 06:48:29.347
well as control those devices 
set up alerts and set out role 

06:48:29.348 --> 06:48:33.210
level access controls.  Allowing
 one user to be able to have 

06:48:33.211 --> 06:48:37.537
read and write access over a set
 of devices.  And another user 

06:48:37.538 --> 06:48:40.678
to could only have one read 
access or a subset of those 

06:48:40.679 --> 06:48:47.190
devices.  So as I mentioned 
cloud IoT core connects you to 

06:48:47.191 --> 06:48:51.712
all the benefits of Google 
platform.  This diagram shows 

06:48:51.713 --> 06:48:56.030
you a bunch of benefits that 
Cloud Platform provides and I'm 

06:48:56.031 --> 06:48:58.211
not going to go through all of 
them but just to point out a few

06:48:58.727 --> 06:49:01.763
.  You get things like big query
 and big table that allow you to

06:49:02.044 --> 06:49:05.913
 input all the data that you are
 gathering from your Android 

06:49:05.914 --> 06:49:09.888
things devices and visualize and
 query over that data.  You also

06:49:10.124 --> 06:49:14.577
 get cloud ML to make even more 
complicated machine learning 

06:49:14.578 --> 06:49:18.749
models with based on alling the 
data you that that you have 

06:49:18.750 --> 06:49:21.938
collected use ing the power of 
the cloud.  Finally you get all 

06:49:21.939 --> 06:49:26.359
the Analytics tools that Cloud 
Platform provides to visualize 

06:49:26.360 --> 06:49:30.479
and sample alerts on your data 
and take action on the devices 

06:49:30.480 --> 06:49:36.143
out in the field.  So understand
 these Analytics a little bit 

06:49:36.144 --> 06:49:39.977
befrt       Bert      better I 
want to go through one more demo

06:49:40.072 --> 06:49:43.463
.  This demo is running live in 
our sandz box area        

06:49:43.599 --> 06:49:47.581
        sanldz        and     
sandz box area.  We have set up 

06:49:47.582 --> 06:49:50.931
a bunch of environmental 
stations running on Android 

06:49:50.932 --> 06:49:56.745
things and sped      spread them
 around campus.  Now -- bunch of

06:49:56.903 --> 06:50:01.888
 sensors on them.  Things like 
humidity sense Sr.     or, tem

06:50:02.330 --> 06:50:07.028
per tir,     ature, motion 
detection and then we are able 

06:50:07.029 --> 06:50:11.861
to add all of this data in the 
cloud by connecting it through 

06:50:11.862 --> 06:50:14.754
cloud IoT core.  You can see 
some of the data from some of 

06:50:14.755 --> 06:50:18.892
these devices that are the ing a
 gre gait and also             

06:50:19.024 --> 06:50:24.047
          e ing a           the 
aggregate.  You can also dive in

06:50:25.200 --> 06:50:29.273
 to one specific device to see 
more data on what's going on 

06:50:29.274 --> 06:50:33.582
with that device as well as more
 time series data on how that 

06:50:33.583 --> 06:50:38.300
device is performed over time.  
You might notice though that 

06:50:38.301 --> 06:50:42.874
this demoef shows you really 
well that you can connect these 

06:50:42.875 --> 06:50:49.142
de advices to Google Cloud but 
it doesn't really utilize the on

06:50:49.143 --> 06:50:53.164
 device processing that I talk
ed.  I want to go over a few 

06:50:53.165 --> 06:50:55.347
more examples that show you 
these two services working 

06:50:55.348 --> 06:51:00.907
together.  Because when you 
combine TensorFlow and Google 

06:51:00.908 --> 06:51:05.809
Cloud            Cloud Platform 
you can do some amazingly power

06:51:06.102 --> 06:51:09.928
ful things.  So my first example
 kind of extends this 

06:51:09.929 --> 06:51:13.234
environmental station demo that 
I just walked you through.  

06:51:13.235 --> 06:51:16.498
Imagine instead of just putting 
in environmental stations around

06:51:16.897 --> 06:51:22.438
, we actually connected them to 
a smart vending machine.  We 

06:51:22.439 --> 06:51:25.761
were then able to use all the 
input data from our 

06:51:25.762 --> 06:51:29.227
environmental station to have a 
machine learning model use ing 

06:51:29.228 --> 06:51:33.514
TensorFlow running locally on 
this device.  You could predict 

06:51:33.515 --> 06:51:38.409
things like supply and demand 
based on vendzing machines' 

06:51:38.410 --> 06:51:40.783
environment and optimize when 
this vendzing machine would be 

06:51:40.784 --> 06:51:44.977
restocked.  You could also 
connect all vented        vend

06:51:46.000 --> 06:51:50.495
ing machines to the cloud and do
 even more complicated analysis 

06:51:50.496 --> 06:51:53.366
on those vendzing machines.  You
 can do inventory analysis to 

06:51:53.367 --> 06:51:55.951
figure out which items are 
performing best in which 

06:51:55.952 --> 06:51:59.096
environmenteds.  And            
          environments and you 

06:51:59.097 --> 06:52:03.291
do even better prediction models
 based on all the the data you 

06:52:03.292 --> 06:52:06.799
are collects ing.  This is a 
perfect example to do what we 

06:52:06.800 --> 06:52:10.207
call federated learning.  So 
federate ing   e ing    d learn

06:52:10.295 --> 06:52:13.658
ing is when we have multiple 
machines that are alling able to

06:52:14.385 --> 06:52:17.490
 learn role      locally but 
based on those local learning we

06:52:17.865 --> 06:52:22.484
 can aggregate that data to make
 even better machine learning   

06:52:22.485 --> 06:52:26.019
 ing    ing model in the cloud. 
 So here you can imagine having 

06:52:26.020 --> 06:52:30.013
one vendzing machine in a school
 and another vending machine in 

06:52:30.014 --> 06:52:33.564
a stayed yument          dium 
and both vending machines would 

06:52:33.565 --> 06:52:36.933
have very personalized models 
based on their environment.  But

06:52:36.934 --> 06:52:41.096
 also both benefit from each 
other bying a gref gait      gre

06:52:41.634 --> 06:52:44.259
               ing a      ing a 
gre gaiting their data in cloud 

06:52:44.260 --> 06:52:47.512
and there is a good example that
 shows you can do spr     

06:52:47.513 --> 06:52:50.281
interesting things without a 
camera.  But my next example 

06:52:50.282 --> 06:52:54.563
goes over a camera use case.  
Because I think that cameras are

06:52:54.724 --> 06:52:57.746
 perfect applications for doing 
some of this on device process

06:52:58.062 --> 06:53:02.584
ing.  So imagine you have a 
grocery store and the grocery 

06:53:02.585 --> 06:53:05.701
store puts up cameras to count 
the number of people standing in

06:53:05.914 --> 06:53:09.986
 line.  This camera would use a 
TensorFlow model that's lobing

06:53:10.130 --> 06:53:13.190
        locally able to count 
that number of peep elt in the 

06:53:13.191 --> 06:53:16.531
image and propagate that number 
to the cloud.  You could use 

06:53:16.532 --> 06:53:21.261
this data to open the optimal 
number of registers at any given

06:53:21.709 --> 06:53:24.296
 time.  So you never have to 
wait in line at the grocery 

06:53:24.297 --> 06:53:28.708
store again.  With all of your 
aggregated data you also do more

06:53:28.808 --> 06:53:33.052
 complicated machine learning 
models.  You could predict how 

06:53:33.053 --> 06:53:38.822
many people you should staff at 
your groer ri          grocery 

06:53:38.823 --> 06:53:42.264
store ain the         at any 
given day and the differences 

06:53:42.265 --> 06:53:46.873
between grocery stores.  You 
could be useful for the shoppers

06:53:47.014 --> 06:53:51.189
, the end users.  You could 
imagine make ing a mobile app 

06:53:51.190 --> 06:53:56.471
where at home you can check how 
long the gresh grocery store 

06:53:56.472 --> 06:53:58.472
line is so you are never fruf 
straighted   ed                 

06:53:58.566 --> 06:54:01.563
 fru straighted   ed            
     frustrated by having to 

06:54:01.564 --> 06:54:05.571
wait in line.  The next use case
 I want to go over is the 

06:54:05.572 --> 06:54:09.420
broadens this camera cam Pell a
            example a little bit

06:54:09.593 --> 06:54:14.306
 more and apply ies it to an 
industrial use case.  So imagine

06:54:14.957 --> 06:54:19.452
 we have a factory that makes pi
 zas and we add a camera that's 

06:54:19.453 --> 06:54:24.135
able to do quality control to 
increase both the quality and 

06:54:24.136 --> 06:54:28.210
the efficiency for this 
industrial application.  I 

06:54:28.211 --> 06:54:32.590
should note that we have another
 talk that's specifically on 

06:54:32.591 --> 06:54:35.909
enterprise use cases on Android 
things.  So we should listen to 

06:54:35.910 --> 06:54:39.839
that talk if you want to know 
more about what's possible on 

06:54:39.840 --> 06:54:44.074
Android things for some of these
 industrial applications.  So in

06:54:44.247 --> 06:54:47.747
 this case we would have a 
TensorFlow model that's locally 

06:54:47.748 --> 06:54:51.419
ability           ly   ly able 
to learn how to ePt     accept 

06:54:51.420 --> 06:54:54.018
and reject pi. 
   &gt;&gt;         zzas by koint

06:54:55.010 --> 06:54:57.783
       koument         kounltd
ing the number of toppings of 

06:54:57.784 --> 06:55:02.762
each pizza.  Most of them we 
will see how have six tomatoes 

06:55:02.763 --> 06:55:08.158
and five olives.  So they are 
accepted and we will come to one

06:55:08.159 --> 06:55:14.970
 that has too     two,      too 
many tomatoes -- too few toe 

06:55:14.971 --> 06:55:19.225
mays and too           ea     
mate toes and too few olives and

06:55:19.770 --> 06:55:23.964
 we reject that pizza.  You can 
do more analysis such      such 

06:55:23.965 --> 06:55:28.244
as strak       track our through
 put and flag if our error rate 

06:55:28.245 --> 06:55:32.844
goes above a certain tlesh holds
          hreshold.  One more 

06:55:32.845 --> 06:55:35.897
use case I want to go over that 
uses machine learning in a 

06:55:35.898 --> 06:55:40.922
slightly different way.  So 
that's going to be reiners      

06:55:40.923 --> 06:55:44.547
in   inforcement learning apply
 ied to an agricultural use case

06:55:45.774 --> 06:55:50.978
.  So imagine we have a field 
that has a bunch of moisture 

06:55:50.979 --> 06:55:54.592
sensors in the ground as well as
 spin sprin               l 

06:55:54.593 --> 06:55:57.890
sprinklers and these are all 
connected to a central hub run

06:55:58.286 --> 06:56:02.014
ning and groid         Android 
things.  This hub could do some 

06:56:02.015 --> 06:56:07.006
machine learning to optimize 
exactly what the output of when 

06:56:07.007 --> 06:56:11.717
and how much water each sprinkle
r should output to optimize our 

06:56:11.718 --> 06:56:18.188
crop growth.  You may have 
haerdz of DeepMind, as a company

06:56:18.908 --> 06:56:25.277
 at alphabet that recently made 
Alpha ge   Go but this used 

06:56:25.278 --> 06:56:27.591
re-enforce         en   en   en
   enP    en   eniners      in

06:56:27.748 --> 06:56:32.589
      en    iners      inforce
ment learning.  It an amazing 

06:56:32.590 --> 06:56:36.628
tool that be used on Android 
things really well.  With 

06:56:36.629 --> 06:56:40.822
reinforcement learning you 
discover sod nuanced use cases 

06:56:40.823 --> 06:56:45.502
such as imagine your hill had a 
hill on it.  And in in    that 

06:56:45.503 --> 06:56:47.939
case you may want to water the 
crops at the bot tonl of the

06:56:48.716 --> 06:56:51.178
            tom of the hill less
 than those at the top of the 

06:56:51.179 --> 06:56:53.640
hail      hill because the sfrin
 kelt            rin     

06:56:53.641 --> 06:56:58.197
sprinklers the a the tomb of the
 hill                        top

06:56:58.198 --> 06:57:02.928
 of the hill might have runoff 
water.  Android things makes 

06:57:02.929 --> 06:57:05.380
integrations things like that 
seamless and provides you the 

06:57:05.381 --> 06:57:11.641
tools to do anything that you 
imagine.  I think that use ing 

06:57:11.642 --> 06:57:15.035
things like TensorFlow and cloud
 together can also do some real

06:57:15.228 --> 06:57:18.873
ly amazing use cases that you 
can't do with just one.  Kwin

06:57:19.411 --> 06:57:22.909
      Combine ing these services
 could do so much more four     

06:57:23.192 --> 06:57:26.409
 for your device and end users. 
 There is one more service I 

06:57:26.410 --> 06:57:29.257
want to talk about today and 
that's the Google asaves     

06:57:29.397 --> 06:57:33.362
ssistant.  So Android things 
supports the Google assistant   

06:57:33.363 --> 06:57:37.183
 ant    ant SDK.  There was a 
huge number of use cases that we

06:57:37.415 --> 06:57:41.901
 think that assistant can do for
 you.  Apply    llows you to 

06:57:41.902 --> 06:57:45.363
connect to all the knowledge of 
Google as well as allows you to 

06:57:45.364 --> 06:57:50.899
control the devices in your home
.  Again we have a co    code 

06:57:50.900 --> 06:57:53.678
lab that goes over getting 
Android things to worning    

06:57:54.061 --> 06:57:58.073
     work with the Google assist
 anlt     ant.  You can do it at

06:57:58.263 --> 06:58:02.390
 home or in our sandbox area.  
We partnered with AIY which is a

06:58:02.533 --> 06:58:07.006
 group at Google that makes kits
 for do it yourself artificial 

06:58:07.007 --> 06:58:10.187
intelligence makers.  What you 
see on the screen here is the 

06:58:10.188 --> 06:58:13.956
kit that they recently released 
which is the Voice kit which is 

06:58:13.957 --> 06:58:16.884
one of the easiest ways that you
 can get started with and droigs

06:58:17.514 --> 06:58:20.178
        droid things working 
with the Google ahh cystant    

06:58:20.179 --> 06:58:23.195
ant              assistant.  I 
want to go over one more feature

06:58:23.885 --> 06:58:28.281
 of Android things and that's 
the Android things developer 

06:58:28.282 --> 06:58:32.002
console.  The Android things 
developer console brings all 

06:58:32.003 --> 06:58:37.602
these services together.  Tr    
It is our new developer portal 

06:58:37.603 --> 06:58:40.648
that lets you add all these 
thvrgs        services to your 

06:58:40.649 --> 06:58:45.050
device in a really simple way.  
The key with the Android things 

06:58:45.051 --> 06:58:49.086
developer console is 
customization.  You get all the 

06:58:51.031 --> 06:58:53.966
ult mealt coal of              
imate control of what services 

06:58:53.967 --> 06:58:57.950
will go on your device.  You 
also get device management and 

06:58:57.951 --> 06:59:02.581
jum dates           updates.  
Allows you to create your 

06:59:02.582 --> 06:59:07.896
projects as wills       well as 
upload your own APKs and push 

06:59:07.897 --> 06:59:12.045
fees tee          those feature 
updates to the device in the 

06:59:12.046 --> 06:59:15.972
field.  The also where you get 
all the updates from Google.  So

06:59:15.973 --> 06:59:19.180
 these are the security updates 
and the feature updates that 

06:59:19.181 --> 06:59:21.181
will make your devices secure

06:59:24.515 --> 06:59:28.941
.  Sichbs you            Sibs
      Since you get cotal    

06:59:28.942 --> 06:59:33.380
tal        cotal    tal        
total control.  Believe the 

06:59:33.381 --> 06:59:35.720
custom meags of the             
ization of the developer console

06:59:36.049 --> 06:59:39.683
 gives you the control to create
 anything that you can imagine. 

06:59:40.153 --> 06:59:43.241
 A lock     n unlocking this 
limited potential of what we 

06:59:43.242 --> 06:59:46.557
think is possible of Android 
things especially when combined 

06:59:46.558 --> 06:59:53.378
with Google services.  So the
     to summarize things        

06:59:53.379 --> 06:59:55.991
Android things gives that 
platform that makes hardware 

06:59:55.992 --> 06:59:59.599
development feasible.  It gives 
all the Android APIs to make the

06:59:59.748 --> 07:00:03.057
 development process easy, 
combined with the system on 

07:00:03.058 --> 07:00:07.415
module design to make it quick 
and economical to make a 

07:00:07.416 --> 07:00:11.244
prototype and also bring that 
device to production.  But the 

07:00:11.245 --> 07:00:17.223
services on top I believe are 
the huge factsor that allows to 

07:00:17.224 --> 07:00:19.884
innovate and enhance your device
 as well as bring new features 

07:00:19.885 --> 07:00:24.961
to your users.  So Google Play 
services which twi     gives you

07:00:25.236 --> 07:00:29.069
 the tweet of              the 
suite of tools location services

07:00:29.846 --> 07:00:33.680
 as well as Firebase.  You get 
TensorFlow which us use the 

07:00:33.681 --> 07:00:36.980
powerful on device processing of
 your Android things device to 

07:00:36.981 --> 07:00:42.148
add that intelligence to your 
device.  You also get Cloud 

07:00:42.149 --> 07:00:46.077
Platform and specifically cloud 
IoT core to connect your device 

07:00:46.078 --> 07:00:50.786
to the even greater intelligence
 of the cloud.  And finally you 

07:00:50.787 --> 07:00:53.966
get the Google ahh cystant    
ant              assistant the 

07:00:53.967 --> 07:00:58.136
latest and greatst  est in 
Google's personal assistant tech

07:00:58.888 --> 07:01:01.181
nology.  All these haveses is  
          services and anything 

07:01:01.182 --> 07:01:04.562
that comes in the future will 
fit     fit on top of Android 

07:01:04.563 --> 07:01:08.394
things.  I want to leave you 
with      tud with my call to 

07:01:08.395 --> 07:01:11.544
action.  We have huge number of 
session         sessions on 

07:01:11.545 --> 07:01:16.915
Android things this year and 
demos and code labs to learn 

07:01:16.916 --> 07:01:20.488
more of what's Bob     possible 
on Android things.  We have a 

07:01:20.489 --> 07:01:24.816
developer site to download the 
latest Android image and start 

07:01:24.817 --> 07:01:28.978
make ing your idea.  I encourage
 you to add some these Google 

07:01:28.979 --> 07:01:33.353
devices         services to your
 device to see how powerful this

07:01:33.455 --> 07:01:36.010
 can be.  Tell us about it.  
Join our developer community 

07:01:36.011 --> 07:01:39.113
where thousands of people are 
already asking questions share

07:01:39.283 --> 07:01:43.378
 ing their ideas, share ing 
their prototypes and getting 

07:01:43.379 --> 07:01:48.004
feedback.  Again I'm Sam Beder 
and I look forward to hearing 

07:01:48.005 --> 07:01:53.101
about all the amazing devices 
that you are building on Android

07:01:53.102 --> 07:01:55.467
 things that             things 
that intd great these           

07:01:55.620 --> 07:01:59.478
       int great that's       
           integrate these 

07:01:59.479 --> 07:02:01.565
powerful Google services.  Thank
 you.  

07:02:01.566 --> 07:02:03.296
   (Applause.) 
   Â» SAM BEDER:  I think I have 

07:02:03.297 --> 07:02:06.607
a few minutes for questions if 
anyone wants to come up to the 

07:02:06.608 --> 07:02:08.723
microphones

07:02:19.654 --> 07:02:22.617
.  
   &gt;&gt; Hardware and (Off 

07:02:22.618 --> 07:02:29.625
microphone).  Do you have a -- 
(Off microphone).  

07:02:29.626 --> 07:02:34.420
   Â» SAM BEDER:  So you mean -- 
(Off microphone)

07:03:02.746 --> 07:03:04.746
. 

07:25:48.200 --> 07:25:49.200
&gt;&gt; 
&gt;&gt; 

07:25:48.200 --> 07:25:49.200
&gt;&gt; 
&gt;&gt; 

07:25:48.200 --> 07:25:51.174
&gt;&gt;  
&gt;&gt; 

07:25:51.175 --> 07:25:53.175
&gt;&gt; 
&gt;&gt;

07:29:33.529 --> 07:29:38.512
so much, for coming to the smart
 home talk.  The goal here is 

07:29:38.513 --> 07:29:42.575
really to give you guys a little
 bit of understanding and 

07:29:42.576 --> 07:29:47.678
background on how do you connect
 to IOT device to Google 

07:29:47.679 --> 07:29:50.788
Assistant so you can allow that 
device to be controlled by the 

07:29:50.789 --> 07:29:57.049
Google Assistant.  I'm Mark Spai
ts, the product lead for smart 

07:29:57.050 --> 07:30:00.405
home and the Google Assistant.  
This is David Shyer, kind of my 

07:30:00.406 --> 07:30:04.907
partner in crime.  He is the 
engineering lead for the Smart 

07:30:04.908 --> 07:30:09.116
Home Google Assistant.  I think 
when you start to look at some 

07:30:09.117 --> 07:30:15.408
of the things that are happening
 in this space, it's really 

07:30:15.409 --> 07:30:19.186
clear that having assistant-
controlled physical space is 

07:30:19.187 --> 07:30:20.774
going to be extremely important 
moving forward.  So when we 

07:30:20.775 --> 07:30:26.397
start to look at Smart Home and 
Google Assistant, it was clear 

07:30:26.398 --> 07:30:30.253
this was a feature we had to 
have when Google Home launched 

07:30:30.254 --> 07:30:35.323
last year.  The feature has 
become a pillar of the Google 

07:30:35.324 --> 07:30:39.459
Home experience and what YUZers 
come to expect when they're 

07:30:39.460 --> 07:30:42.672
interacting with the Assistant. 
 The other thing is the IOT 

07:30:42.673 --> 07:30:45.800
market which you guys have heard
 a thousand times, it's one of 

07:30:45.801 --> 07:30:49.299
the biggest buzz words of the 
last three years, it's actually 

07:30:49.300 --> 07:30:52.046
finally happening, and the 
assistants are part of that, the

07:30:52.404 --> 07:30:56.284
 interaction with these devices.
  So for us, we knew there's a 

07:30:56.285 --> 07:30:59.719
unique opportunity for the 
Google Assistant as relates to 

07:30:59.720 --> 07:31:01.720
the Smart Home space. 

07:31:05.002 --> 07:31:09.835
 Just basic numbers.  These are 
numbers you've seen a thousand 

07:31:09.836 --> 07:31:14.386
times.  IoT is going and there's
 a thousand devices.  I want to 

07:31:14.387 --> 07:31:17.609
look at 2017.  There's 8.4 
billion connected devices, and 

07:31:17.610 --> 07:31:21.881
out of that, you have 5.2 that 
are actually consumer segmented 

07:31:21.882 --> 07:31:26.919
devices.  It's huge.  This means
 that having that physical thing

07:31:27.157 --> 07:31:31.161
 in the space that's connected 
to the cloud is actually a big 

07:31:31.162 --> 07:31:33.165
enough penetration rate that 
having just to control it 

07:31:33.166 --> 07:31:35.166
actually makes sense to a user. 

07:31:40.213 --> 07:31:42.648
 And those devices are super 
diverse, right.  You have things

07:31:42.807 --> 07:31:48.642
 from cars and lights and fans 
and robot vacuums.  I just got a

07:31:49.381 --> 07:31:53.348
 connected machine delivered to 
my desk so I could test my 

07:31:53.349 --> 07:31:56.229
barbecue this weekend.  That's 
how far we've come.  Everything 

07:31:56.230 --> 07:32:01.579
will be connected and if it's 
connected, it should be 

07:32:01.580 --> 07:32:06.021
controlled at some level by the 
Assistant.  The next thing that 

07:32:06.022 --> 07:32:09.377
we really start to look at is 
where does the Assistant play in

07:32:09.562 --> 07:32:13.603
 this user interaction?   For 
us, it was always, the Assistant

07:32:13.773 --> 07:32:17.651
 will be at the center of these 
intelligent interactions with 

07:32:17.652 --> 07:32:22.640
these IoT devices.  And we put 
the word "intelligent" in there 

07:32:22.641 --> 07:32:25.072
for a specific reason.  Today, a
 lot of the ways that we control

07:32:25.540 --> 07:32:29.912
 these things are simple on and 
off switches.  They're actually 

07:32:29.913 --> 07:32:32.653
not intelligent.  It's simply an
 on and off command and the 

07:32:32.654 --> 07:32:37.373
thing goes on and off, but it 
doesn't take into consideration 

07:32:37.374 --> 07:32:40.173
context, device type, and all 
these things that a user would 

07:32:40.174 --> 07:32:42.174
come to expect. 

07:32:45.142 --> 07:32:48.115
 Which got us to this point in 
our development, and we said, 

07:32:48.116 --> 07:32:51.247
it's about conversations, and 
not about demands, and this is a

07:32:51.401 --> 07:32:58.075
 core philosophy that our team 
looks at and we make product 

07:32:58.076 --> 07:32:59.654
decisions and engineering 
decisions based on this 

07:32:59.655 --> 07:33:02.744
philosophy.  A user should be 
able to say multiple things to a

07:33:03.017 --> 07:33:07.047
 device, right, not just turn 
this device on.  But if you look

07:33:07.393 --> 07:33:10.261
 at a light and all the vast 
commands you can give it, just 

07:33:10.262 --> 07:33:14.023
to simply control it, it's 
amazing, so you can change the 

07:33:14.024 --> 07:33:18.246
color, you can turn them on and 
off, you can do things like make

07:33:18.410 --> 07:33:21.092
 the bedroom brighter.  Imagine 
yourself sitting there with your

07:33:21.280 --> 07:33:23.514
 spouse, your roommate or your 
best friend.  Think about all 

07:33:23.515 --> 07:33:25.847
the ways that you tell that 
person to turn the light on or 

07:33:25.848 --> 07:33:29.092
control the light.  It's 
extremely different, if you're 

07:33:29.093 --> 07:33:31.848
talking to your mom versus your 
girlfriend versus your boyfriend

07:33:32.074 --> 07:33:34.844
.  All these things we need to 
be able to understand so we can 

07:33:34.845 --> 07:33:36.845
do what the user wants. 

07:33:42.969 --> 07:33:47.083
 So to do this, we had to get 
context.  We had to understand 

07:33:47.084 --> 07:33:49.073
things like what is in the home?
   What are the rooms in the 

07:33:49.074 --> 07:33:52.290
home?   Who is in the home?   
This is the key reason our team 

07:33:52.291 --> 07:33:58.168
decided to create the Google 
Home graph.  The Google Home 

07:33:58.169 --> 07:34:02.037
graph stores and provides the 
convectual data about the 

07:34:02.038 --> 07:34:05.847
devices in the homes to the 
Google Assistant.  Now, this may

07:34:05.971 --> 07:34:08.408
 sound very similar.  You've 
heard these things, right, 

07:34:08.409 --> 07:34:11.445
there's knowledge graph, a graph
 for this, a graph for that.  

07:34:11.446 --> 07:34:14.887
But, actually, the home is one 
of the last frontiers.  If you 

07:34:14.888 --> 07:34:18.181
look at yourself in your day-to-
day, if you walk out of here, we

07:34:18.412 --> 07:34:20.673
 pretty much know that you've 
got a mobile phone, this is your

07:34:20.879 --> 07:34:24.640
 GPS locations, and this is 
where you are.  As soon as you 

07:34:24.641 --> 07:34:26.808
walk in the home, a lot of us 
know that you walked in the home

07:34:27.372 --> 07:34:34.672
, but we have no idea what 
happens after that.  Are you in 

07:34:34.673 --> 07:34:37.733
the living room?   Bedroom?   
Watching TV?   Your phone may be

07:34:37.999 --> 07:34:40.687
 in the basement and you may be 
upstairs.  We have to have a 

07:34:40.688 --> 07:34:43.452
contextual understanding of the 
home to have a good experience. 

07:34:45.133 --> 07:34:49.826
graph really quickly.  We look 
at it as properties, and there's

07:34:49.827 --> 07:34:52.273
 kind of three big sets of 
properties and a lot of things 

07:34:52.274 --> 07:34:55.012
that kind of build upon these 
properties.  So there's a 

07:34:55.013 --> 07:34:59.089
structure.  That structure has 
an address.  It has managers, it

07:34:59.295 --> 07:35:03.010
 has rooms, it has labels.  Do 
you have rooms?   Because rooms 

07:35:03.011 --> 07:35:06.860
are very specific.  What I do in
 the bedroom and what I do in 

07:35:06.861 --> 07:35:11.433
the living room, saying the 
exact same thing could mean 

07:35:11.434 --> 07:35:14.608
totally different in the context
.  So you have to understand 

07:35:14.609 --> 07:35:17.127
where you actually are in the 
home.  And there's devices.  

07:35:17.128 --> 07:35:20.007
Devices are extremely unique, 
and we have to know what type of

07:35:20.611 --> 07:35:25.563
 device is it, what are the 
capabilities of the device?   

07:35:25.564 --> 07:35:28.120
What are the attributes?   
What's the current state?   And 

07:35:28.121 --> 07:35:31.857
the reason is, there are 
situations like this.  Let's go 

07:35:31.858 --> 07:35:34.522
back to my example.  If you're 
sitting on the couch and you say

07:35:34.737 --> 07:35:38.775
 "dim the lights in the living 
room a little bit."  That's a 

07:35:38.776 --> 07:35:43.210
super complex command or 
conversation to even have with 

07:35:43.211 --> 07:35:45.211
someone sitting right next to 
you. 

07:35:48.796 --> 07:35:50.796
 Using the home graph, this is 
what we first

07:35:54.018 --> 07:35:56.168
 do.  We say "are there any 
lights in the living room?"  

07:35:56.169 --> 07:35:58.536
Basic question, yes, there are 
lights in the living room.  Okay

07:35:58.701 --> 07:36:01.277
.  Are the lights on?   Yes, 
they're on, that's awesome.  

07:36:01.278 --> 07:36:04.488
What are they set to?   Oh, 
these lights are on and set to 

07:36:04.489 --> 07:36:09.580
50 percent.  What does "a little
 bit" mean?   In this case, "a 

07:36:09.581 --> 07:36:12.719
little bit" may mean 3%.  It's a
 default thing we put in there. 

07:36:12.951 --> 07:36:20.596
 We support things like little 
bit, a lot, our interns put "a" 

07:36:24.008 --> 07:36:27.318
hella" in there because they're 
from California.  We take that 

07:36:27.319 --> 07:36:30.405
data, package it up, and pass it
 to the Google Assistant and the

07:36:30.804 --> 07:36:33.452
 assistant says, all right, got 
it.  I will change these lights 

07:36:33.453 --> 07:36:37.616
from 50% to 53%.  That's how the
 data from home graph is 

07:36:37.617 --> 07:36:39.617
actually being used in real 
time. 

07:36:41.530 --> 07:36:44.142
 But it was awesome as we were 
building this, and we were 

07:36:44.143 --> 07:36:47.964
saying to ourselves, I think we 
stumbled upon what's going to un

07:36:48.212 --> 07:36:50.680
lock this market for everyone 
when it comes to controlling 

07:36:50.681 --> 07:36:53.642
devices in the house.  So we 
have to get this to

07:36:57.160 --> 07:36:59.160
 developers.  How do we allow 
developers to build interactions

07:36:59.415 --> 07:37:03.013
 that leverage Google Assistant 
in the home graph?   So today, 

07:37:03.014 --> 07:37:08.565
I'm really excited to introduce 
smart-home Apps.  Smart-Home 

07:37:08.566 --> 07:37:12.194
Apps is an experience that you 
can build using actions on 

07:37:12.195 --> 07:37:16.479
Google.  I'm sure you guys have 
heard tons of actions about 

07:37:16.480 --> 07:37:19.434
Google.  It's my favorite 
platform Google has made.  But 

07:37:19.435 --> 07:37:25.833
it's going to be the way that we
 go from this being an adaptive 

07:37:25.834 --> 07:37:28.151
platform to everyone in the 
audience being able to hook up 

07:37:28.152 --> 07:37:31.048
to the assistant, leverage the 
home graph and control it in a 

07:37:31.049 --> 07:37:34.172
very conversational way.  
    But that's enough about me 

07:37:34.173 --> 07:37:37.038
talking.  I think most of you 
want to see how do you actually 

07:37:37.039 --> 07:37:40.298
build one of these things, and 
with that, I'll turn it over to 

07:37:40.299 --> 07:37:45.348
David to give you guys a 
developer experience.  

07:37:45.349 --> 07:37:52.204
&gt;&gt;  David:  thanks, mark.
[applause].  as mark said, most 

07:37:52.205 --> 07:37:54.537
of you have. 
&gt;&gt; probably seen actions on 

07:37:54.538 --> 07:37:58.891
Google right now.  it's our new 
platform to let you extend the 

07:37:58.892 --> 07:38:02.363
assistant directly to your 
applications, to your services, 

07:38:02.364 --> 07:38:06.239
and in this case, to your 
hardware.  so we brought -- with

07:38:06.408 --> 07:38:11.197
 this launch, we're bringing 
smarthome devices into the 

07:38:11.198 --> 07:38:14.162
actions on Google platform.  you
 register the devices to the 

07:38:14.163 --> 07:38:17.717
home graph, and rather than 
having the actions on Google 

07:38:17.718 --> 07:38:23.709
model where you talk to your App
, you change the voice, you can 

07:38:23.710 --> 07:38:26.009
have direct actions that 
directly communicate with your 

07:38:26.010 --> 07:38:30.408
devices and everything else in 
the home.  if you have lights, 

07:38:30.409 --> 07:38:36.614
you register to the in the 
living room.  It turns on your 

07:38:36.615 --> 07:38:40.260
lights and other vendors' lights
.  It works seamlessly.  It's 

07:38:40.261 --> 07:38:45.553
the descriptive grammar that 
lets the user interact.  No one 

07:38:45.554 --> 07:38:48.525
lights a light bulb that asks 
too many questions so our system

07:38:48.689 --> 07:38:50.689
 is designed

07:38:54.054 --> 07:38:55.477
 for one-shot single actions, if
 I don't forget, everything just

07:38:55.478 --> 07:38:59.888
 works.  How do we do this?   So
 you guys, the folks that are 

07:38:59.889 --> 07:39:04.595
building hardware, building 
smart-home devices, light bulbs,

07:39:05.565 --> 07:39:09.568
 thermostats, micro waves, 
sprinklers, you're building 

07:39:09.569 --> 07:39:13.362
hardware.  We make it really 
easy to build great hardware.  

07:39:13.363 --> 07:39:16.349
You provide a light-weight 
infrastructure on top of what 

07:39:16.350 --> 07:39:20.290
you're already doing.  You've 
got cloud control on top of 

07:39:20.291 --> 07:39:24.127
these devices.  Add in some 
basic integration protocols.  

07:39:24.128 --> 07:39:27.880
All of these are stock, trivial 
stuff implemented and we can add

07:39:28.011 --> 07:39:31.443
 on top of that all of the stuff
 that Google is good at, the 

07:39:31.444 --> 07:39:34.616
natural language understanding, 
the speech generation, the 

07:39:34.617 --> 07:39:38.045
personality, the home      home 
graph Mark talked about, INTRT

07:39:38.270 --> 07:39:41.663
ization, context, management, 
and all of these complex schemas

07:39:41.863 --> 07:39:47.042
 of what does it mean to be a 
washing machine and how do users

07:39:47.457 --> 07:39:50.785
 interact with washing machines?
   We apply our learning to 

07:39:50.786 --> 07:39:55.283
these engines so they keep 
getting better and everything we

07:39:55.440 --> 07:39:59.563
 improve you get the 
improvements on as well.  

07:39:59.564 --> 07:40:02.258
    We basically integrate in 
two ways.  We have a flow for 

07:40:02.259 --> 07:40:04.915
device setup and a flow for 
execution.  This is a setup flow

07:40:05.064 --> 07:40:07.789
.  Very simple.  Once you have 
registered, I want to show you 

07:40:07.790 --> 07:40:12.291
all of this end to end.  Once 
you've registered, you simply --

07:40:12.292 --> 07:40:15.751
 your App shows up in our list 
of smart-home Apps and the user 

07:40:15.752 --> 07:40:23.791
clicks on it.  Woe send them off
 to you for registration.  Send 

07:40:23.792 --> 07:40:27.389
it back to us, give a request 
for the devices.  Any data you 

07:40:27.390 --> 07:40:30.674
want, it's a simple protocol.  
They have 17 lights that are 

07:40:30.675 --> 07:40:33.948
called these things in these 
rooms, and they have these 

07:40:33.949 --> 07:40:39.054
traits associated with them and 
what have you.  That's a full 

07:40:39.055 --> 07:40:42.009
sync each time.  You don't need 
to do Delta management.  We do 

07:40:42.010 --> 07:40:46.238
that for you.  We take each 
thing and put it in the home 

07:40:46.239 --> 07:40:49.629
graph.  Then in execution time, 
we use our assistant stack to do

07:40:49.797 --> 07:40:52.994
 all the heavy lifting.  We've 
gotten your state from your 

07:40:52.995 --> 07:40:55.824
devices.  We know what those 
things are called and what the 

07:40:55.825 --> 07:40:58.699
capabilities are.  We field that
 into our real-time speech 

07:40:58.700 --> 07:41:01.777
recognition engine.  If the 
users named their light 

07:41:01.778 --> 07:41:05.754
something weird, we understand 
it.  If it's chandelier American

07:41:06.539 --> 07:41:09.483
 gazebo, it understands it.  The
 language knows it, and the 

07:41:09.484 --> 07:41:12.763
smart-home engine knows it.  All
 of that stuff that lets us 

07:41:12.764 --> 07:41:16.942
build the query semantics we 
give you, give those to you, do 

07:41:16.943 --> 07:41:20.766
your tasks, simple stuff, re
generate the text response and 

07:41:20.767 --> 07:41:22.767
speech response to the user, and
 it works. 

07:41:27.407 --> 07:41:34.002
 We have built some basic device
 types.  We're building a lot 

07:41:34.003 --> 07:41:37.970
more over the coming weeks and 
months.  Traits are where 

07:41:37.971 --> 07:41:40.518
functionality occurs.  You have 
a simplest trait ever, on and 

07:41:40.519 --> 07:41:44.399
off.  This device has a switch. 
 Those traits then are made of 

07:41:44.400 --> 07:41:47.519
attributes, states and commands.
  On and off is pretty simple.  

07:41:47.520 --> 07:41:51.218
No attributes.  One state.  I 
bet you can guess what it is.  

07:41:51.219 --> 07:41:53.633
Pretty much one command that 
just is turning things on and 

07:41:53.634 --> 07:41:57.463
off.  That trait then can be 
composited into whatever devices

07:41:57.464 --> 07:42:01.044
 you want to make.  Right now, 
we've launched publicly, those 

07:42:01.045 --> 07:42:04.787
are lights and switches and 
thermostats and the like.  You 

07:42:04.788 --> 07:42:08.115
build a robot, you can reuse 
that trait and make your robot 

07:42:08.116 --> 07:42:12.329
have an on-off trait.  Generally
 speaking, all your robots 

07:42:12.330 --> 07:42:15.768
should have an on-off trait, 
highly recommended, otherwise 

07:42:15.769 --> 07:42:18.196
problems occur.  So you'll be 
able to build as we have more 

07:42:18.197 --> 07:42:22.165
and more traits, you can 
composite your own device types,

07:42:22.523 --> 07:42:25.932
 whatever you want.  Maybe it's 
a clock radio with clock and 

07:42:25.933 --> 07:42:29.741
radio functionality and all of 
that stuff.  Maybe it's a robot 

07:42:29.742 --> 07:42:34.944
that combines custom traits you 
have, traits we build and custom

07:42:35.155 --> 07:42:38.261
 traits that you can build on 
top of this platform.  I'm going

07:42:38.262 --> 07:42:41.911
 to walk through the demo.  It's
 really simple.  I want to do 

07:42:41.912 --> 07:42:45.736
this in six steps.  Register 
your project on Google platform.

07:42:45.737 --> 07:42:52.598
  We'll set up alof.  We'll 
alignment the smarthome App.  

07:42:52.599 --> 07:42:56.004
We'll use the gactions command 
tool to test that package.  Once

07:42:56.232 --> 07:43:00.413
 you do that, you go to the real
 App, production level, nothing 

07:43:00.414 --> 07:43:04.769
special, production level 
assistant App, in-home control, 

07:43:04.770 --> 07:43:08.047
connect to your App, set up your
 devices and start talking to 

07:43:08.048 --> 07:43:10.048
them. 

07:43:12.082 --> 07:43:14.082
 So let's start the demo. 

07:43:19.892 --> 07:43:22.606
 This is the actions on Google 
Console.  This is the new con

07:43:22.783 --> 07:43:25.569
sole we launched yesterday.  I'm
 going to create a project, give

07:43:25.727 --> 07:43:30.350
 it some name.  Doesn't really 
matter.  For here, I'm going to 

07:43:30.351 --> 07:43:33.643
call it Sheep Project.  See if 
it lets me do that. 

07:43:37.604 --> 07:43:40.238
 This will take a few seconds.  
What we're doing is creating the

07:43:40.618 --> 07:43:44.017
 projects inside the Google 
system, assigning a project ID 

07:43:44.018 --> 07:43:46.991
giving you the tools you need.  
You may have seen the API 

07:43:46.992 --> 07:43:49.722
discussions we had earlier today
.  Actually, today, we are not 

07:43:49.723 --> 07:43:55.382
using APIAI for the SmartHome 
stuff, because we've written all

07:43:55.383 --> 07:43:59.990
 the grammar.  You don't need to
 write any grammar for these 

07:43:59.991 --> 07:44:04.900
actions.  We provide it for you.
  Actions SDk, we skip leading 

07:44:04.901 --> 07:44:10.093
the docs, because we're 
developers, and let's go and set

07:44:10.094 --> 07:44:11.576
 up the App information.  A lot 
of the stuff on this page, 

07:44:11.577 --> 07:44:21.009
honestly, we don't need for home
 automation for SmartHome 

07:44:21.010 --> 07:44:23.800
projects, but we will anyway 
because the application wants it

07:44:23.953 --> 07:44:26.763
.  For example, the assistant 
voice, because everything you do

07:44:26.943 --> 07:44:30.096
 here runs as a native Google 
App, it's running native 

07:44:30.097 --> 07:44:32.658
understanding, we can use the 
natural voice.  We don't need to

07:44:33.729 --> 07:44:39.739
 change the voice.  So we'll 
just say home control demo, full

07:44:39.740 --> 07:44:42.561
 description, demo, we don't 
really care.  Category, let's 

07:44:42.562 --> 07:44:50.366
click "home control" down here 
at the bottom, and what did I 

07:44:50.367 --> 07:44:54.321
miss, to control some stuff.  
Obviously, when you do this for 

07:44:54.322 --> 07:44:57.694
real, since eventually, this 
will be building in your 

07:44:57.695 --> 07:45:00.677
registry item, you'll want real 
text there.  It's asking for 

07:45:00.678 --> 07:45:05.491
icons, same thing.  I'm going to
 load up some dummy ones.  And 

07:45:05.492 --> 07:45:13.260
eventually, these will be used 
when you submit your App.  Away 

07:45:13.261 --> 07:45:18.363
we go.  Testing instructions we 
can skip.  It is called Sheep 

07:45:18.364 --> 07:45:24.417
Company.  Let's not think about 
this too hard.  And feel free to

07:45:24.418 --> 07:45:34.298
 spam me there.  Privacy policy.
  Just a dummy UR

07:45:34.488 --> 07:45:36.488
L for now. 

07:45:38.040 --> 07:45:42.712
 Great.  We've now created our 
project.  One more thing to do, 

07:45:42.713 --> 07:45:50.887
number 2 on that list, account 
linking.  So let's add account 

07:45:50.888 --> 07:45:55.475
linking.  Authorization code.  
Let me go and grab my keys here.

07:45:55.476 --> 07:45:59.679
  These are keys in the demo App
 we have put on the hub.  Please

07:45:59.852 --> 07:46:04.196
 do not use.  These are our keys
 in your actually App.  I should

07:46:04.471 --> 07:46:06.471
 not have to tell you why. 

07:46:11.120 --> 07:46:17.305
 I'm going to set this up, stock
, right off the shelf.  So I'm 

07:46:17.306 --> 07:46:21.822
not doing anything funky.  Test,
 instructions, demo. 

07:46:27.285 --> 07:46:31.992
 OLOF should now be set up.  
Over here, this is our stock 

07:46:31.993 --> 07:46:40.384
example App, and all I'm going 
to do is start this App and 

07:46:40.385 --> 07:46:43.680
standard proxy SSL stuff, so 
start this running now.  Away we

07:46:43.841 --> 07:46:49.668
 go.  Now, when I load this, I 
should be able to go

07:46:54.692 --> 07:46:58.194
 here and please don't hack into
 my demo while I'm doing it.  

07:46:58.195 --> 07:47:02.154
There.  Now, this is a -- I know
, I shouldn't have said that.  

07:47:02.155 --> 07:47:08.936
You're doing it now.  I know I'm
 not crazy.  It's one of you.  

07:47:08.937 --> 07:47:13.354
This is our example App.  We've 
used this App for testing out 

07:47:13.355 --> 07:47:17.073
the application.  These are 
virtual lights.  We use this in 

07:47:17.074 --> 07:47:21.167
our own development.  I can't 
get 100 light bulbs at my desk, 

07:47:21.168 --> 07:47:24.344
people complain so we need to do
 virtual testing.  Turn them on 

07:47:24.345 --> 07:47:27.559
and off and set them up for 
cloud registration.  Now I have 

07:47:27.560 --> 07:47:32.695
an App running.  My next step, 
I'm going to hop over here and I

07:47:32.696 --> 07:47:38.092
 am going to find the action.  
We have this gactions command 

07:47:38.093 --> 07:47:41.398
here, which simply

07:47:45.434 --> 07:47:48.379
 -- woops -- this takes the 
action -- actually, before I do 

07:47:48.380 --> 07:47:53.151
that, let me show you the action
 package.  So you may have seen 

07:47:53.152 --> 07:47:55.994
action packages in other demos 
that have lots and lots of other

07:47:56.169 --> 07:47:59.007
 stuff in them.  Ours is really 
simple.  That's all it is.  You 

07:47:59.008 --> 07:48:03.650
put the URL at use of execution 
in there, execution of sync, 

07:48:03.651 --> 07:48:07.282
everything else is stock.  And 
then I can run this and go and 

07:48:07.283 --> 07:48:10.284
grab my project ID, which 
happens to be easily right here.

07:48:13.745 --> 07:48:18.503
 And if I didn't forget 
something because I'm on stage, 

07:48:18.504 --> 07:48:22.099
I can do that.  Of course it 
asks me to update when I'm on 

07:48:22.100 --> 07:48:25.848
stage because Apps know when I'm
 on stage.  Skip that.  Push the

07:48:25.986 --> 07:48:30.833
 App and now, it should be live.
  I'm going to go over to the 

07:48:30.834 --> 07:48:35.853
phone.  Here on the phone, we 
start the Assistant.  Go into 

07:48:35.854 --> 07:48:43.143
settings.  Home control.  I have
 no devices.  There is my App.  

07:48:43.144 --> 07:48:46.963
So my App I just created and ran
 is now available just like all 

07:48:46.964 --> 07:48:52.745
of our production partners here.
  Click on that App, and

07:48:58.587 --> 07:49:03.763
 -- what we should probably see 
-- woops -- yeah, yeah, yeah.  

07:49:03.764 --> 07:49:10.199
If we did that right, I've got 
my devices, and these fill 

07:49:10.200 --> 07:49:13.150
lights that I put up here are 
now available on the phone.  I'm

07:49:13.403 --> 07:49:16.713
 going to skip them because I'm 
not going to cover that right 

07:49:16.714 --> 07:49:23.478
now, and I can say -- go back to
 the Assistant, "turn on all my 

07:49:23.479 --> 07:49:25.479
lights." 

07:49:28.173 --> 07:49:32.403
 All right.  Two of those 
decided to get knocked off the 

07:49:32.404 --> 07:49:34.404
cloud. 

07:49:35.896 --> 07:49:40.222
 Turn on all of my lights.
[applause] 

07:49:40.223 --> 07:49:43.761
&gt;&gt; Make my lights green.  So 
pretty simple stuff.  We have 

07:49:43.762 --> 07:49:47.286
lots of other device types, 
thermostats, more complex things

07:49:47.610 --> 07:49:51.360
.  This is the base case, and 
you saw, yes, I did cheat.  We 

07:49:51.361 --> 07:49:54.438
have a little instance over here
, but that's all it takes.  So 

07:49:54.439 --> 07:49:56.925
with that, I will turn it back 
to Mark.  

07:49:56.926 --> 07:50:01.171
&gt;&gt; Awesome.  Great demo, David.
[applause]. 

07:50:06.461 --> 07:50:09.522
 So you go and crush it like 
David just did, build your stuff

07:50:09.729 --> 07:50:12.569
 in like 36 hours and you're 
ready to go but there's still a 

07:50:12.570 --> 07:50:14.918
couple of more things you have 
to do to launch it.  Get a 

07:50:14.919 --> 07:50:18.964
device, because I have to test 
it.  But then once you send the 

07:50:18.965 --> 07:50:22.964
device over to Google and you de
ploy your action, we will then 

07:50:22.965 --> 07:50:25.437
do a certification process.  And
 the certification process is 

07:50:25.438 --> 07:50:29.618
really simple.  We do have a few
 testers go through, test basic 

07:50:29.619 --> 07:50:38.590
things,alatency,     ence     
      late      latency, check 

07:50:38.591 --> 07:50:41.530
the privacy, and say, all right,
 this is good, it's rate to go 

07:50:41.531 --> 07:50:43.822
into production, certify it and 
launch it into production.  It's

07:50:44.141 --> 07:50:46.454
 a really simple process.  We 
are making sure that the 

07:50:46.455 --> 07:50:50.129
experience that the end user is 
getting is really good so that's

07:50:50.357 --> 07:50:52.770
 where the certification process
 comes in, just to make sure 

07:50:52.771 --> 07:50:57.116
things like the right grammars 
work and the right expectations 

07:50:57.117 --> 07:51:00.635
around latency are set.  
    What a bunch of partners who

07:51:00.636 --> 07:51:03.089
 have been working with us.  
They've helped us build this 

07:51:03.090 --> 07:51:06.842
process, and we are super 
excited, because they've helped 

07:51:06.843 --> 07:51:10.236
us learn a lot about what we can
 do better, but more importantly

07:51:10.639 --> 07:51:16.919
, I think the rap id        
rapid pace in which even adding 

07:51:16.920 --> 07:51:19.795
SmartHome integrations has been 
amazing.  We started with three 

07:51:19.796 --> 07:51:22.445
integrations.  In the keynote, 
you heard our team say we have 

07:51:22.446 --> 07:51:28.272
70 now.  We did most of those in
 the last six weeks using this 

07:51:28.273 --> 07:51:31.867
process.  So we are extremely 
excited to open this up to 

07:51:31.868 --> 07:51:35.086
everyone so we can go even 
faster.  So you may say, like 

07:51:35.087 --> 07:51:38.144
what's next?   The first thing 
is everyone leave here, don't go

07:51:38.433 --> 07:51:42.250
 to the concert.  Build a 
SmartHome App, and then go to 

07:51:42.251 --> 07:51:46.058
the concert.  Right, but there's
 other things you may want to 

07:51:46.059 --> 07:51:50.311
check out.  There are going to 
be more device support and 

07:51:50.312 --> 07:51:52.567
features coming in the next 
couple of months as David said. 

07:51:52.747 --> 07:51:56.393
 All of these are on display in 
the sand box.  If you go to the 

07:51:56.394 --> 07:51:59.882
Assistant sand box, the IoT sand
 box, they're already on display

07:52:00.393 --> 07:52:03.091
 and running in production which
 is awesome.  And the last one 

07:52:03.092 --> 07:52:07.644
is that we work really closely 
with the Assistant SDk team.  If

07:52:07.857 --> 07:52:11.431
 you're thinking about how do I 
actually imbed the Assistant 

07:52:11.432 --> 07:52:18.325
into my device, check out the 
Assistant SDK.  I think we flew 

07:52:18.326 --> 07:52:20.962
through this quickly so we have 
a couple of minutes left, so 

07:52:20.963 --> 07:52:23.183
we're more than happy to answer 
any questions you guys may have.

07:52:29.725 --> 07:52:31.376
side.  
&gt;&gt; Microphone's right here if 

07:52:31.377 --> 07:52:34.593
you want to ask a question. 

07:52:44.566 --> 07:52:49.391
Assistant to open the slide, 
like PPT. 

07:52:49.392 --> 07:52:50.033
&gt;&gt; Repeat the question one more 
time. 

07:52:50.034 --> 07:52:53.312
&gt;&gt; Use the Google Assistant like
, show me new slide.  

07:52:53.313 --> 07:52:58.871
&gt;&gt; Oh, yeah.  So for on our side
, we more think about the 

07:52:58.872 --> 07:53:01.528
hardware, not the actual 
software piece, but that's a 

07:53:01.529 --> 07:53:05.765
great thing you should think 
about building and actions on 

07:53:05.766 --> 07:53:07.805
Google platform allow you to do 
that.  

07:53:07.806 --> 07:53:09.806
&gt;&gt; Okay, thank you. 

07:53:12.120 --> 07:53:14.254
 Cool.  Well, thank you, guys, 
so much for coming out.

07:53:14.255 --> 07:53:19.125
[applause] 
&gt;&gt; Have a great IO. 

08:14:44.095 --> 08:14:46.095
Services Provided By:
     Caption First, Inc.

08:14:48.570 --> 08:14:51.036
     P.O. Box 3066
Monument, CO  80132

08:14:48.570 --> 08:14:51.436
     800-825-5234
     www.captionfirst.com 

08:14:48.570 --> 08:14:50.903
***
This text is being provided in a

08:14:48.570 --> 08:14:52.636
 realtime format.  Communication
 Access Realtime Translation 

08:14:48.570 --> 08:14:52.370
(CART) or captioning are 
provided in order to facilitate 

08:14:48.570 --> 08:14:52.703
communication accessibility and 
may not be a totally verbatim 

08:14:48.570 --> 08:14:50.570
record of the proceedings.
*** 

08:14:48.570 --> 08:14:50.570
&gt;&gt;

08:18:14.731 --> 08:18:16.731
&gt;&gt;

08:18:19.641 --> 08:18:21.641
 I

08:23:43.999 --> 08:23:46.370
        Â»  
Â». 

08:23:46.371 --> 08:23:48.371
Â»

08:23:50.174 --> 08:23:51.107
Â» 
&gt;&gt;&gt; 

08:23:51.108 --> 08:23:53.108
Â» 
&gt;&gt;&gt;

08:23:57.202 --> 08:23:59.202
Â»    

08:24:41.764 --> 08:24:43.764
Â»

08:24:46.647 --> 08:24:47.647
Â».  
Â».  

08:24:46.647 --> 08:24:48.647
Â»

08:27:29.218 --> 08:27:35.337
    SAN JOSE, CALIFORNIA 
    MAY 18, 2017 

08:27:39.126 --> 08:27:41.126
 5:30

08:27:45.237 --> 08:27:49.062
 PT 
    STAGE 3 

08:29:02.587 --> 08:29:03.587
5:30 PT 

08:29:02.587 --> 08:29:04.587
STAGE 3 
Services provided by: 

08:29:02.587 --> 08:29:06.320
           Caption First, Inc. 
           P.O. Box 3066 

08:29:02.587 --> 08:29:05.520
Monument, CO 80132 
           1-877-825-5234

08:29:02.587 --> 08:29:06.587
           +001-719-481-9835
           www.captionfirst.com 

08:29:02.587 --> 08:29:06.853
This text is being provided in a
 realtime format.  Communication

08:29:02.587 --> 08:29:06.187
 Access Realtime Translation 
(CART) or captioning are 

08:29:02.587 --> 08:29:06.853
provided in order to facilitate 
communication accessibility and 

08:29:02.587 --> 08:29:06.387
may not be a totally verbatim 
record of the proceedings. 

08:29:02.587 --> 08:29:04.187
                    *** 

08:31:23.354 --> 08:31:25.354
       Test.  

08:34:47.797 --> 08:34:49.797
 Coming up - Google Play Awards 
at 6:30 p.m.

08:34:53.643 --> 08:34:55.643
at 6:30 p.m.

08:42:27.392 --> 08:42:29.392
 Coming up - Google Play Awards 
at 6:30 p.m.

08:50:45.484 --> 08:50:47.484
at 6:30 p.m.

08:55:02.395 --> 08:55:04.395
at 6:30 p.m.

09:01:38.036 --> 09:01:40.036
at 6:30 p.m.

09:12:00.768 --> 09:12:02.768
at 6:30 p.m.

09:12:05.659 --> 09:12:07.659
at 6:30 p.m.

09:17:30.478 --> 09:17:32.478
at 6:30 p.m.

09:17:36.584 --> 09:17:43.757
Google I/O 2017   
San Jose, California.   

09:17:43.758 --> 09:17:46.384
Â» All right.  Who's ready for 
tonight?   [Cheering and 

09:17:46.385 --> 09:17:50.854
applause]. 
Â» There's no winners here.  All 

09:17:50.855 --> 09:17:53.692
right.  Thank you guys for 
coming.  We're super excited for

09:17:53.693 --> 09:17:56.667
 you, and congratulations on 
being nominees.  Tonight should 

09:17:56.668 --> 09:17:58.668
be super

09:18:00.376 --> 09:18:02.376
 fun.  We're really excited and 
we hope you guys are too.  Quick

09:18:02.780 --> 09:18:06.328
 logistics for this evening, 
when or if you hear your name 

09:18:06.329 --> 09:18:10.484
called as a winner, please come 
up to this side of the stage 

09:18:10.485 --> 09:18:13.345
here.  The presenter will hand 
you the award

09:18:16.854 --> 09:18:18.854
.  Be prepared.  It's heavy. 

09:18:24.697 --> 09:18:29.945
 You'll stop, get a good look at
 the photographer, and exit the 

09:18:29.946 --> 09:18:32.371
side of the stage, and we'll 
actually take the award for you,

09:18:32.597 --> 09:18:35.705
 and you can go back to your 
seat, and then afterwards, we'll

09:18:36.495 --> 09:18:45.395
 rightfully give you your award 
back.  So enter, exit, and good 

09:18:45.396 --> 09:18:49.669
luck to everyone, if there are 
any questions. 

09:18:54.510 --> 09:18:56.510
 Good luck, everyone.  Thank 
you. 

09:19:03.917 --> 09:19:08.453
 So, yeah, please only use this 
stairway, just because this one 

09:19:08.454 --> 09:19:12.493
is going to be really hard to 
use.  Okay. 

09:19:39.702 --> 09:19:42.338
GOOGLE I/O 2017   
SAN JOSE, CALIFORNIA   

09:19:42.339 --> 09:19:52.299
MAY 18, 2017   
6:30 P.M. PASK TIME   

09:19:52.300 --> 09:19:55.367
STAGE 3   
GOOGLE PLAY

09:19:58.751 --> 09:20:00.751
 AWARDS

09:21:19.531 --> 09:21:21.531
Services provided by: 

09:22:30.376 --> 09:22:34.109
           Caption First, Inc. 
           P.O. Box 3066 

09:22:30.376 --> 09:22:33.309
Monument, CO 80132 
           1-877-825-5234

09:22:30.376 --> 09:22:34.376
           +001-719-481-9835
           www.captionfirst.com 

09:22:30.376 --> 09:22:34.642
This text is being provided in a
 realtime format.  Communication

09:22:30.376 --> 09:22:33.976
 Access Realtime Translation 
(CART) or captioning are 

09:22:30.376 --> 09:22:34.642
provided in order to facilitate 
communication accessibility and 

09:22:30.376 --> 09:22:34.176
may not be a totally verbatim 
record of the proceedings. 

09:22:30.376 --> 09:22:32.376
                    ***  

09:22:40.104 --> 09:22:42.104
Â»

09:23:30.186 --> 09:23:32.652
GOOGLE I/O 2017 
SAN JOSE, CALIFORNIA 

09:23:30.186 --> 09:23:31.271
MAY 18, 2017 
6:30 P.M. PASK TIME 

09:23:31.272 --> 09:23:33.072
STAGE 3 
GOOGLE PLAY AWARDS 

09:23:31.272 --> 09:23:34.805
Services provided by: 
           Caption First, Inc. 

09:23:31.272 --> 09:23:34.205
           P.O. Box 3066 
Monument, CO 80132 

09:23:31.272 --> 09:23:34.805
           1-877-825-5234
           +001-719-481-9835

09:23:31.272 --> 09:23:33.405
           www.captionfirst.com 

09:23:31.272 --> 09:23:33.605
***
This text is being provided in a

09:23:31.272 --> 09:23:35.338
 realtime format.  Communication
 Access Realtime Translation 

09:23:31.272 --> 09:23:35.072
(CART) or captioning are 
provided in order to facilitate 

09:23:31.272 --> 09:23:35.405
communication accessibility and 
may not be a totally verbatim 

09:23:31.272 --> 09:23:33.272
record of the proceedings.
*** 

09:24:41.473 --> 09:24:43.473
                        *** 

09:32:19.440 --> 09:32:21.770
Â» Welcome to the 2017 Google 
Play A wards. 

09:32:26.339 --> 09:32:33.271
 Please welcome Purnima Kochikar
, director of Apps and games 

09:32:33.272 --> 09:32:35.272
business development. 

09:32:37.604 --> 09:32:43.416
Â» Good evening, and welcome to 
the second annual Google Play A

09:32:44.959 --> 09:32:47.889
wards.  
    [Cheering and applause] 

09:32:50.162 --> 09:32:54.311
year at I/O to celebrate your 
amazing work.  Behind every 

09:32:54.312 --> 09:32:59.027
great App is a creative vision 
and a remarkable team.  Today, 

09:32:59.028 --> 09:33:07.049
we celebrate you, your vision 
and your teams.  

09:33:07.050 --> 09:33:11.622
    It's a privilege for us at 
Google to be part of your 

09:33:11.623 --> 09:33:15.533
amazing work.  You build 
beautiful apps, successful 

09:33:15.534 --> 09:33:20.153
businesses, and touch lives of 
people around the world, and you

09:33:20.435 --> 09:33:24.151
 challenge us to innovative on 
our platforms and keep pace with

09:33:24.418 --> 09:33:26.418
 your imagination. 

09:33:30.980 --> 09:33:34.482
about the diversity of the 
nominees in today's categories. 

09:33:34.663 --> 09:33:39.108
 From Apps that teach kids to 
code to ones that allow you to 

09:33:39.109 --> 09:33:44.749
play with friends around the 
world, from Think Tank to 

09:33:44.750 --> 09:33:47.414
feeding the hungry, it is 
amazing to see the many 

09:33:47.415 --> 09:33:50.088
different countries you come 
from and the many, many 

09:33:50.089 --> 09:33:52.089
different apps that you are 
building. 

09:33:56.131 --> 09:34:01.235
 And as where I stand, it is 
exciting for me to also see all 

09:34:01.236 --> 09:34:04.944
the wonderful things that 
connect you.  You have a 

09:34:04.945 --> 09:34:12.706
relentless focus on your users, 
innovation hunger to pick up the

09:34:12.828 --> 09:34:17.226
 latest features and 
capabilities, and a dedication 

09:34:17.227 --> 09:34:20.209
to build beautiful apps that 
engage.  

09:34:20.210 --> 09:34:27.896
    In looking at your apps, the
 judging panel, of course, took 

09:34:27.897 --> 09:34:32.538
into account innovation and 
design, but also thought about 

09:34:32.539 --> 09:34:36.905
things like app quality that 
actually lead to user happiness.

09:34:36.906 --> 09:34:42.467
  Things like, does your app 
drain battery?   None of us 

09:34:42.468 --> 09:34:48.988
likes that, do we?   And judging
 by the ratings and reviews on 

09:34:48.989 --> 09:34:53.418
Google Play, we are sure that 
our users and your users agree 

09:34:53.419 --> 09:34:58.863
that your apps exemplify the 
best that is there in Android 

09:34:58.864 --> 09:35:05.471
and Play.  So with no further 
ado, let's get the show started!

09:35:36.322 --> 09:35:45.191
 standout Indie.  Please welcome
 Jamil Moledina, game strategic 

09:35:45.192 --> 09:35:47.192
lead, Google Play. 

09:35:54.116 --> 09:35:58.782
 I ran into an indie games 
startup.  I learned firsthand 

09:35:58.783 --> 09:36:01.900
how risky innovation is for a 
small studio, but at the same 

09:36:01.901 --> 09:36:07.541
time, innovation may be all you 
have to stand out.  It's then 

09:36:07.542 --> 09:36:12.155
incumbent upon platforms to 
shine a spotlight on those 

09:36:12.156 --> 09:36:15.305
developers that dare to try 
something new, and helping 

09:36:15.306 --> 09:36:19.073
operate that spotlight at Google
 is one way that I've been able 

09:36:19.074 --> 09:36:26.589
to give back to this rich, 
diverse community.  Indis have 

09:36:26.590 --> 09:36:29.643
inherent value in that they 
demonstrate the endless 

09:36:29.644 --> 09:36:33.277
capabilities of what small teams
 can build.  They pour their 

09:36:33.278 --> 09:36:38.880
heart and souls into their work.
  They embody diversity, and 

09:36:38.881 --> 09:36:42.378
often, they take unexpected 
leaps introducing us to unique 

09:36:42.379 --> 09:36:46.559
game controls and breakthrough 
story ideas, all stemming from a

09:36:46.744 --> 09:36:50.675
 deep passion for their art 
while using games as a medium to

09:36:51.155 --> 09:36:55.772
 express the human condition.  
This year's nominees deliver on 

09:36:55.773 --> 09:37:02.938
all counts.  Let's take a look. 

09:37:02.939 --> 09:37:06.752
Â» Standout Indie nominees are: 

09:37:09.795 --> 09:37:13.075
 Causality.  KINGD:  New Lands. 

09:37:19.286 --> 09:37:25.188
                  ingdom:  New 
Lands.  Mars Mars.  Mushroom 11.

09:37:32.607 --> 09:37:34.607
 Reigns. 

09:37:39.384 --> 09:37:44.174
 Standout Indie.  
Â» The winner of this year's 

09:37:44.175 --> 09:37:48.620
award is the epitome of a 
beautiful game experience on 

09:37:48.621 --> 09:37:53.420
mobile.  Itself stunning 
graphics, melancholic soundtrack

09:37:53.585 --> 09:37:57.475
 and unique and native game 
controls give gamers the perfect

09:37:57.476 --> 09:38:02.487
 immersion into the challenges 
and outcomes of this world.  I 

09:38:02.488 --> 09:38:05.510
fell in love the first time I 
played the early version of this

09:38:06.907 --> 09:38:10.202
 game and am thrilled that we 
can share it with everyone on 

09:38:10.203 --> 09:38:15.834
Google Play.  The winner of this
 year's Standout indie award is 

09:38:15.835 --> 09:38:17.835
Mushroom 11 by Untame.  
    [Cheering and applause]

09:38:58.132 --> 09:39:02.230
welcome Larissa Fonaine, 
director and global head of apps

09:39:02.468 --> 09:39:04.468
 business development, Google 
Play. 

09:39:08.953 --> 09:39:10.953
[Applause]

09:39:17.888 --> 09:39:21.028
about taking risks and fuelling 
innovation.  Small and scrappy, 

09:39:21.029 --> 09:39:24.662
the most exciting startups 
inspire all of us by taking 

09:39:24.663 --> 09:39:29.651
great ideas and turning them 
into breakout success stories.  

09:39:29.652 --> 09:39:32.795
At Play, we care a lot about 
making sure that startups can 

09:39:32.796 --> 09:39:37.091
find their audience and that 
users can find the great and 

09:39:37.092 --> 09:39:40.017
exciting apps that are coming 
from this community.  In 

09:39:40.018 --> 09:39:44.168
addition to innovating inside 
their own apps, startups are 

09:39:44.169 --> 09:39:47.494
often early adopters of new 
platforms and new technology 

09:39:47.495 --> 09:39:51.061
features, which means they're 
creating some of the most 

09:39:51.062 --> 09:39:54.334
interesting Android experiences 
today, and they're also becoming

09:39:54.629 --> 09:39:57.818
 some of our best partners.  So 
now that we've set that bar 

09:39:57.819 --> 09:39:59.819
really high, let's take a look 
at the

09:40:02.534 --> 09:40:07.595
 nominees.  
Â» Standout Startup nominees are:

09:40:07.596 --> 09:40:09.596
  Cast

09:40:11.346 --> 09:40:13.706
Box.  Digit. 

09:40:19.793 --> 09:40:21.793
 Discord. 

09:40:26.975 --> 09:40:28.975
 HOOKED. 

09:40:33.092 --> 09:40:35.092
 Simple Habit. 

09:40:41.212 --> 09:40:43.784
 Standout Startup.  
Â» This

09:40:47.051 --> 09:40:49.617
 year's winner built an original
 experience by rethinking 

09:40:49.618 --> 09:40:53.314
fiction for the texting 
generation.  They use an every

09:40:53.557 --> 09:40:57.597
day mobile behavior to deliver 
creative and captivating stories

09:40:57.784 --> 09:41:02.646
 that immerse the user in the 
narrative in real time.  As a 

09:41:02.647 --> 09:41:07.321
lifelong bookworm, I'm thrilled 
to announce that this year's 

09:41:07.322 --> 09:41:10.350
standout startup award winner is
 HOOKED by Telepathic.  

09:41:10.351 --> 09:41:12.351
    [Cheering and applause]

09:42:19.633 --> 09:42:22.860
 Please welcome David Singleton,
 VP, Engineering. 

09:42:37.882 --> 09:42:38.859
developers to reach users with 
glanceable information 

09:42:38.860 --> 09:42:43.948
throughout their day.  With Wear
 2.0, our latest build, we 

09:42:43.949 --> 09:42:48.262
introduced standalone apps.  
These allow developers to build 

09:42:48.263 --> 09:42:50.671
experiences that operate 
independently without requiring 

09:42:50.672 --> 09:42:54.384
the phone nearby.  The new apps 
being created helped simplify 

09:42:54.385 --> 09:42:57.696
life's daily activities, such as
 staying informed, exploring 

09:42:57.697 --> 09:43:01.503
what's nearby, and accessing 
guides and metrics to improve 

09:43:01.504 --> 09:43:04.956
your personal health and workout
 routines.  And while Android 

09:43:04.957 --> 09:43:08.666
Wear is still a platform in 
itself infancy, we are so 

09:43:08.667 --> 09:43:11.707
excited by the support from both
 developers and hardware 

09:43:11.708 --> 09:43:14.309
manufacturers and I hope more of
 you will try it out.  Let's 

09:43:14.310 --> 09:43:16.310
take a look at this year's 
nominees. 

09:43:24.453 --> 09:43:26.453
nominees are Bring!  

09:43:31.527 --> 09:43:33.527
 Foursquare. 

09:43:38.090 --> 09:43:40.090
 Lifesum. 

09:43:44.037 --> 09:43:49.673
 Runtastic Running and Fitness. 
 Seven. 

09:43:56.972 --> 09:44:01.671
 Best Android Wear experience.  
Â» The winner of this year's 

09:44:01.672 --> 09:44:05.469
award offers a smart and sleek 
experience utilizing the 

09:44:05.470 --> 09:44:13.238
convenience of GPS and other key
 sensors.  This year's winner of

09:44:13.433 --> 09:44:19.113
 best Android Wear Experience is
 Runtastic Running&amp;Fitness. 

09:44:49.741 --> 09:44:58.532
welcome s   Sascha Prueter, 
Director, Android TV. 

09:45:03.263 --> 09:45:06.144
photo.  {ENTER}  
[Laughter] 

09:45:06.145 --> 09:45:09.999
Â» So while many mobile 
developers built for the small

09:45:13.469 --> 09:45:16.869
 screen such as ones just 
presented, this category 

09:45:13.469 --> 09:45:15.760
celebrates audiences through 
Android TV and take advantage of

09:45:15.761 --> 09:45:19.019
 the larger screen in the house.
  Building for the large screen 

09:45:19.020 --> 09:45:23.767
allows developers to explore new
 menu and UI options to create 

09:45:23.768 --> 09:45:27.433
rich media experiences that 
drive really long session times.

09:45:27.434 --> 09:45:31.947
  And thanks to a strong 
developer community -- so thanks

09:45:32.186 --> 09:45:35.615
 to you -- the TV app section is
 fast growing and a successful 

09:45:35.616 --> 09:45:40.769
category.  The number of TV apps
 in the Play Store on Android TV

09:45:41.614 --> 09:45:45.190
 have doubled since Google I/O 
last year and now exceeding 

09:45:45.191 --> 09:45:49.381
3,000 apps and games.  So let's 
look at the nominees for this 

09:45:49.382 --> 09:45:55.626
year's Best TV Experience.  
Â» Best TV Experience nominees 

09:45:55.627 --> 09:45:57.627
are:  AbemaTV. 

09:46:01.557 --> 09:46:03.557
 Haystack TV. 

09:46:07.031 --> 09:46:09.031
 KkBOX. 

09:46:15.867 --> 09:46:17.867
  NetFlix. 

09:46:22.674 --> 09:46:24.674
 Red Bull TV. 

09:46:29.450 --> 09:46:34.257
 Best TV Experience.  
Â» This year's winner has 

09:46:34.258 --> 09:46:38.585
completely updated their UI to 
provide a fresh, best-in-class 

09:46:38.586 --> 09:46:41.620
TV user experience, using simple
 controls and beautiful designs,

09:46:42.482 --> 09:46:44.482
 they give

09:46:47.628 --> 09:46:49.906
 users a content-rich offering 
with high quality, live, and on-

09:46:49.994 --> 09:46:53.328
demand content.  The winner of 
this year's Best TV Experience 

09:46:53.329 --> 09:46:55.619
is Red Bull TV by Red Bull. 

09:48:03.462 --> 09:48:10.996
 Please welcome Clay Bavor, VP 
Virtual Reality. 

09:48:10.997 --> 09:48:16.132
Â» So VR is cool because it can, 
like that guy, make you feel 

09:48:16.133 --> 09:48:19.188
like you're somewhere else, 
whether you're on a beach with 

09:48:19.189 --> 09:48:23.280
scary crab zombies or searching 
an ancient ship wreck for VR 

09:48:23.281 --> 09:48:25.949
treasure.  It really puts you 
right in the action, and you 

09:48:25.950 --> 09:48:28.572
don't just get to see what it's 
like to be somewhere else, but 

09:48:28.573 --> 09:48:32.884
really experience it.  So Day
dream is our platform for mobile

09:48:33.155 --> 09:48:36.077
 virtual reality, and thanks to 
the passion and creativity of 

09:48:36.078 --> 09:48:40.430
some amazing developers, there's
 a large and growing library of 

09:48:40.431 --> 09:48:44.039
really cool things to experience
 and do.  You can explore 

09:48:44.040 --> 09:48:47.741
different worlds.  You can step 
inside games.  You can just kick

09:48:47.979 --> 09:48:52.039
 back and watch your own 
personal cinema.  We've been so 

09:48:52.040 --> 09:48:55.187
impressed with what we've seen 
so far.  And so it's my huge 

09:48:55.188 --> 09:49:01.910
pleasure to announce the 
nominees for Best VR Experience.

09:49:05.517 --> 09:49:08.042
are:  The Arcslinger. 

09:49:14.293 --> 09:49:20.257
 Gunjack 2:  End of Shift.  Meko
rama VR. 

09:49:24.635 --> 09:49:26.635
 The Turning Forest. 

09:49:34.558 --> 09:49:36.558
 Virtual Virtual Reality. 

09:49:40.072 --> 09:49:45.067
 Best VR Experience. 
Â» I love them all.  But the 

09:49:45.068 --> 09:49:49.466
winner -- it's hard to describe 
the kind of crazy off-the-wall 

09:49:49.467 --> 09:49:54.415
experience of exploring 50 
different alternate realities 

09:49:54.416 --> 09:49:59.405
doing weird jobs for bored art 
official intelligences, all 

09:49:59.406 --> 09:50:02.027
while trying to uncover the back
 story of the kind of

09:50:07.029 --> 09:50:08.580
 shady company apativeitude, the
 virtual later system of the 

09:50:08.581 --> 09:50:12.253
future.  You'll just have to try
 it.  The winner of this year's 

09:50:12.254 --> 09:50:17.240
VR Experience is Virtual Virtual
 Reality by Tender Claws. 

09:50:45.550 --> 09:50:54.750
                                                                                                 tivitude,
 the virtual later system of the

09:50:45.550 --> 09:50:49.416
 future.  You'll just have to 
try it.  The winner of this 

09:50:45.550 --> 09:50:49.816
year's VR Experience is Virtual 
Virtual Reality by Tender Claws.

09:50:49.749 --> 09:50:55.849
welcome Amit Singh, VP of 
Business Operations, VR. 

09:51:05.202 --> 09:51:10.772
Clay was talking about, virtual 
reality can take you anywhere.  

09:51:10.773 --> 09:51:16.447
Augmented reality, AR, can bring
 anything to you, as if it was 

09:51:16.448 --> 09:51:19.884
there.  And we've been working 
on a project for a while called 

09:51:19.885 --> 09:51:28.012
Tango.  It allows phones to send
 just like we do, depth, scale, 

09:51:28.013 --> 09:51:31.869
perception, precision.  It can 
really bring objects as if they 

09:51:31.870 --> 09:51:37.167
were right there.  And people 
have done amazing things with it

09:51:38.473 --> 09:51:42.295
.  You can shop for a couch, 
make sure it fits the 

09:51:42.296 --> 09:51:46.134
environment you're in, or you 
can invite dinosaurs and play 

09:51:46.135 --> 09:51:49.960
with them in your kitchen.  And 
so let's take a look at the 

09:51:49.961 --> 09:51:55.233
nominees who have built these 
amazing experiences powered by 

09:51:55.234 --> 09:51:59.269
Tango.  
Â» Best AR Experience nominees 

09:51:59.270 --> 09:52:01.999
are:  Crayolea Color Blaster. 

09:52:07.742 --> 09:52:09.742
                  a Color 
Blaster. 

09:52:10.784 --> 09:52:13.967
 Dinosaurs Among Us.  Holo. 

09:52:20.949 --> 09:52:22.949
 Wayfair View. 

09:52:26.899 --> 09:52:28.899
 WOORLD. 

09:52:33.235 --> 09:52:38.146
 Best AR Experience.  
Â» Very, very tough choice.  

09:52:38.147 --> 09:52:41.479
These are all great.  You must 
try them out.  They're

09:52:44.512 --> 09:52:48.843
 all actually in the part over 
there with the Daydream and 

09:52:48.844 --> 09:52:54.946
Tango experience.  The one 
that's the winner really brings 

09:52:54.947 --> 09:52:58.353
whimsey fancifulness.  It really
 lets you be in the your space 

09:52:58.354 --> 09:53:03.172
and decorate the wall.  It's 
really fun.  Super fun to play. 

09:53:03.703 --> 09:53:07.474
 The winner is WOORLD by Funome
na. 

09:54:03.447 --> 09:54:11.499
 Please welcome Shazia Makhdumi,
 Global Head of Family Education

09:54:11.685 --> 09:54:14.419
 and Partnerships, Google Play. 

09:54:14.420 --> 09:54:21.795
Â» Hi, everyone.  So I was the 
mom of two boys age 9 and 10, 

09:54:21.796 --> 09:54:26.877
and who are captivated by worlds
 of harry Potter and Minecraft. 

09:54:27.217 --> 09:54:30.989
 I love how great apps and games
 can capture kids' imagination 

09:54:30.990 --> 09:54:34.587
and fire their creativity.  But,
 in addition, the right apps 

09:54:34.588 --> 09:54:38.645
also go beyond that.  They help 
change parents' perception of 

09:54:38.646 --> 09:54:43.376
mobile devices, beyond 
electronic babysitters to tools 

09:54:43.377 --> 09:54:46.687
that help their kids develop 
skills, to explore, to thrive, 

09:54:46.688 --> 09:54:51.436
and to learn.  Now, if only 
someone could build an app that 

09:54:51.437 --> 09:54:54.106
could keep my kids that same age
 for.  

09:54:54.107 --> 09:54:57.321
    However, developers in our 
Designed for Families program, 

09:54:57.322 --> 09:55:00.738
while they don't do that, they 
use intuitive and kid-friendly 

09:55:00.739 --> 09:55:05.529
design, together with age-
appropriate content to engage 

09:55:05.530 --> 09:55:09.869
and inspire kids, with colorful 
characters, creative visuals, 

09:55:09.870 --> 09:55:14.716
and realistic sounds, they build
 fun, educational, and safe 

09:55:14.717 --> 09:55:19.502
experiences on mobile devices.  
So this year's nominees offer a 

09:55:19.503 --> 09:55:22.626
diverse lineup sure to appeal to
 any household with kids.  Let's

09:55:22.832 --> 09:55:30.243
 take a look.  
Â» Best App for Kids nominees are

09:55:30.997 --> 09:55:34.059
:  Animal Jam-Play Wild!  

09:55:41.488 --> 09:55:45.690
 Hot Wheels, Race Off.  Teeny 
Titans. 

09:55:51.656 --> 09:55:53.656
 Think!   Think!  

09:55:56.025 --> 09:56:05.775
 Toca Life:  Vacation.  Best App
 for Kids. 

09:56:05.776 --> 09:56:11.629
Â» So just like it's really hard,
 as any parent would know to 

09:56:11.630 --> 09:56:14.888
pick your favorite child, you 
know, we've had to make a choice

09:56:15.081 --> 09:56:18.161
 here.  We love them all.  But 
can you imagine anything more 

09:56:18.162 --> 09:56:22.547
fun than showing off your style 
with characters that express the

09:56:23.110 --> 09:56:27.864
 real you?   This year's winner 
teaches kids how to use their 

09:56:27.865 --> 09:56:32.341
creativity to build, explore, 
and share, all while learning 

09:56:32.342 --> 09:56:36.863
about science.  The winner of 
this year's Best App for Kids is

09:56:37.603 --> 09:56:42.945
 Animal Jam-Play Wild!   By Wild
Works. 

09:57:08.702 --> 09:57:13.521
 welcome Jason Titus, VP of 
Engineering, Developer Product 

09:57:13.522 --> 09:57:15.522
Group. 

09:57:23.153 --> 09:57:28.458
about mobile phones is how they 
let us play together across 

09:57:28.459 --> 09:57:30.616
continents and take time, 
whether it's in line or on the 

09:57:30.617 --> 09:57:35.462
bus, and actually make time 
playing with your friends.  In 

09:57:35.463 --> 09:57:39.758
recent years, we've seen amazing
 improvements with multiplayer 

09:57:39.759 --> 09:57:43.267
games taking advantage of the 
huge numbers of mobile users, as

09:57:43.268 --> 09:57:48.646
 well as the advanced technology
 in today's phones.  Multiplayer

09:57:48.647 --> 09:57:52.385
 games come in all genres and 
sizes.  But the thing that they 

09:57:52.386 --> 09:57:56.151
have in common is the amazing 
ability to bring us together.  A

09:57:56.444 --> 09:57:59.490
 true multiplayer game is built 
from the ground up, and this 

09:57:59.491 --> 09:58:05.300
year's nominees are some of the 
best.  Let's take a look.  

09:58:05.301 --> 09:58:11.094
Â» Best Multiplayer Game nominees
 are:  Dawn of Titans. 

09:58:14.635 --> 09:58:16.635
 FIFA Mobile. 

09:58:22.664 --> 09:58:24.664
 Hearthstone. 

09:58:27.368 --> 09:58:29.368
 Lords Mobile. 

09:58:36.410 --> 09:58:38.410
 Modern Strike Online!  

09:58:43.735 --> 09:58:48.028
 Best Multiplayer Game. 
Â» This year's winner reaches a 

09:58:48.029 --> 09:58:51.709
global audience of nearly 190 
countries.  It's developed by a 

09:58:51.710 --> 09:58:55.500
team of 30 different 
nationalities, which seems so 

09:58:55.501 --> 09:58:58.427
appropriate.  Through the 
developer's continual push for 

09:58:58.428 --> 09:59:01.867
excellence through iteration and
 experimentation, this app is 

09:59:01.868 --> 09:59:07.219
constantly evolving to make 
learning one of your favorite 

09:59:07.220 --> 09:59:10.145
leisure activities -- to make 
learning one of your favorite 

09:59:10.146 --> 09:59:15.228
leisure activities.  The winner 
of this year's Best Multiplayer

09:59:34.827 --> 09:59:36.827
 Game is Hearthstone by Blizzard
 Entertainment. 

09:59:44.191 --> 09:59:47.503
Jamie Rosenberg, VP Android and 
Play business. 

09:59:54.595 --> 09:59:58.203
have all of you here.  It's 
amazing to think about the 

09:59:58.204 --> 10:00:02.117
innovation in mobile apps over 
the past few years.  We've seen 

10:00:02.118 --> 10:00:04.922
so many great examples of that 
already tonight.  As smartphones

10:00:05.968 --> 10:00:08.805
 have become more powerful, you 
all have kept pace by finding 

10:00:08.806 --> 10:00:13.946
more ways for our phones to help
 us in our daily lives.  Great 

10:00:13.947 --> 10:00:18.747
apps help us create, explore, 
stay fit, organize, learn, and 

10:00:18.748 --> 10:00:22.337
so much more.  And the very best
 of these do so through 

10:00:22.338 --> 10:00:25.071
excellence in design and 
performance, thoughtful use of 

10:00:25.072 --> 10:00:28.757
the capabilities of our devices,
 and often a bit of fun.  Let's 

10:00:28.758 --> 10:00:34.856
take a look at the nominees for 
Best App.  

10:00:34.857 --> 10:00:41.414
Â» Best App nominees are:  City
mapper. 

10:00:45.485 --> 10:00:47.485
 Fabulous. 

10:00:51.314 --> 10:00:53.314
 Memrise. 

10:00:57.993 --> 10:00:59.993
 Money Lover. 

10:01:04.916 --> 10:01:06.916
 Quik. 

10:01:10.971 --> 10:01:17.765
 Best App.  
Â» So I'm just going to say, this

10:01:18.114 --> 10:01:21.227
 app takes an activity that can 
be a drag and makes it a ton of 

10:01:21.228 --> 10:01:27.346
fun.  The Google Play award for 
Best App goes to Memrise. 

10:02:45.138 --> 10:02:47.138
Sameer Samat, VP Play and 
Android. 

10:02:57.998 --> 10:03:03.140
smartphones for a very long time
, and I think we can all agree 

10:03:03.141 --> 10:03:06.797
that games have come a long way 
on mobile.  It's exciting to see

10:03:06.971 --> 10:03:11.455
 so many of you using 
capabilities on the platform to 

10:03:11.456 --> 10:03:14.353
bring amazing experiences.  You 
have changed the way people 

10:03:14.354 --> 10:03:17.659
think about mobile gaming, by 
presenting rich storylines, mind

10:03:17.875 --> 10:03:21.047
-blowing graphics, and bringing 
out the competitor in each of us

10:03:21.983 --> 10:03:25.263
.  With 2 billion Android 
devices, developers have the 

10:03:25.264 --> 10:03:27.688
freedom to build fun and 
engaging experiences knowing 

10:03:27.689 --> 10:03:30.380
that an audience is just one tap
 away.  Let's take a look at 

10:03:30.381 --> 10:03:36.982
this year's nominees.  
Â» Best Game nominees are:  

10:03:36.983 --> 10:03:38.983
Choices. 

10:03:43.709 --> 10:03:45.709
 Fire Emblem Heroes. 

10:03:51.557 --> 10:03:53.557
 Lineage 2 Revolution. 

10:03:57.128 --> 10:03:59.128
 Pokemon Go. 

10:04:03.863 --> 10:04:05.863
 Transformers:  Forged to Fight.

10:04:10.184 --> 10:04:13.856
 Best Game.  
Â» Now, all these titles are in

10:04:14.518 --> 10:04:18.665
spiring.  This year's winner 
brings console quality graphics 

10:04:18.666 --> 10:04:23.199
to mobile, showcasing gaming on 
Android.  Through stunning 3D 

10:04:23.200 --> 10:04:25.710
graphics and incredible 
technical performance, they are 

10:04:25.711 --> 10:04:27.711
bringing iconic characters to

10:04:31.305 --> 10:04:33.070
 life and offering an 
inspiration of how gaming can 

10:04:33.071 --> 10:04:36.944
truly be on mobile.  The winner 
of this year's Best Game award 

10:04:36.945 --> 10:04:37.829
is Transformers:  Forged to 
Fight.  

10:04:37.830 --> 10:04:39.830
    [Cheering and applause]

10:05:13.696 --> 10:05:19.964
  Please welcome Hiroshi 
Lockheimer.  SVP Platforms and 

10:05:19.965 --> 10:05:24.139
Ecosystems.  
Â» How's everyone doing?   

10:05:24.950 --> 10:05:27.237
Â» How's everyone doing, having 
fun?   

10:05:27.238 --> 10:05:29.025
    [Cheering and applause] 
Â» That's good.  Before we get to

10:05:29.026 --> 10:05:32.663
 this, I just wanted to say a 
quick thank you, you know, 

10:05:32.664 --> 10:05:36.566
Android, Google Play, we would 
be nowhere without you, so a big

10:05:36.746 --> 10:05:39.049
 thank you to the developer 
community.  Thank you very much

10:05:43.482 --> 10:05:45.548
.  
    [Cheering and applause] 

10:05:43.482 --> 10:05:46.635
Â» All right.  Well, at Google, 
our mission is to organize the 

10:05:46.636 --> 10:05:51.692
world's information and make it 
universally accessible and 

10:05:51.693 --> 10:05:54.796
useful.  Universally accessible.
  With this mission in mind and 

10:05:54.797 --> 10:05:57.662
that phrase in mind, it's with 
great pleasure I get to 

10:05:57.663 --> 10:06:01.104
introduce this new category Best
 Accessibility Experience.  Here

10:06:01.425 --> 10:06:07.870
, we will highlight developers 
that offer innovate ive 

10:06:07.871 --> 10:06:12.598
solutions to assist in different
 disability needs and overcoming

10:06:14.455 --> 10:06:17.509
 challenges.  They deliver 
intuitive experiences and 

10:06:17.510 --> 10:06:20.362
empower individuals through 
mobile apps.  They foster 

10:06:20.363 --> 10:06:21.879
communication, build 
independence and have the 

10:06:21.880 --> 10:06:25.050
capability of connecting users 
in very meaningful ways.  Let's 

10:06:25.051 --> 10:06:28.620
take a look at the nominees.  
Â» Best Accessibility Experience 

10:06:28.621 --> 10:06:31.245
nominees are:  A Blind Legend. 

10:06:36.575 --> 10:06:38.575
 Eye-D. 

10:06:41.934 --> 10:06:43.934
 IFTTT. 

10:06:49.101 --> 10:06:51.101
 Open Sesame!  

10:06:56.417 --> 10:06:58.417
 SwiftKey Symbols. 

10:07:02.391 --> 10:07:04.279
 Best Accessibility Experience. 

10:07:04.280 --> 10:07:07.398
Â» All right.  Well, the winner 
of this year's award is a brill

10:07:08.148 --> 10:07:10.148
iantly designed platform 
offering an experience inclusive

10:07:10.221 --> 10:07:13.251
 for users and developers with 
various needs.  They simplify 

10:07:13.252 --> 10:07:16.351
daily tasks, especially for 
those with vision and motor im

10:07:17.109 --> 10:07:19.806
pairments to increase 
productivity and independence.  

10:07:19.807 --> 10:07:24.399
Please join me in congratulating
 this year's winner of this Best

10:07:25.228 --> 10:07:26.973
 Accessibility Experience, IFTTT
.  

10:08:09.945 --> 10:08:13.065
    I'm back.  I was really 
hoping for my head shot again, 

10:08:13.066 --> 10:08:18.707
but you'll get it live instead. 
 So developer ecosystem has an 

10:08:18.708 --> 10:08:21.420
extremely diverse makeup.  The 
product of this breadth of 

10:08:21.421 --> 10:08:24.122
culture, personal interests, and
 creative vision produces a lot 

10:08:24.123 --> 10:08:26.576
of truly amazing work.  You make
 a lot of amazing work, thank 

10:08:26.577 --> 10:08:29.611
you.  This category looks for 
apps that create meaningful 

10:08:29.612 --> 10:08:32.314
social impact for a broad 
spectrum of people around the 

10:08:32.315 --> 10:08:35.323
world while taking full 
advantage of the platform.  It 

10:08:35.324 --> 10:08:38.029
rewards developers who challenge
 themselves to promote themes of

10:08:38.472 --> 10:08:42.036
 contribution, accessibility, 
and knowledge sharing, through 

10:08:42.037 --> 10:08:45.105
creative solutions that address 
issues locally, regionally, and 

10:08:45.106 --> 10:08:51.232
even globally.  So let's take a 
look at the nominees.  

10:08:51.233 --> 10:08:54.796
Â» Best Social Impact nominees 
are:  Charity Miles. 

10:09:02.360 --> 10:09:04.360
 Peek Acuity. 

10:09:08.145 --> 10:09:10.145
 ProDeaf. 

10:09:15.381 --> 10:09:17.381
 Sea Hero Quest. 

10:09:21.059 --> 10:09:23.059
 ShareTheMeal. 

10:09:27.071 --> 10:09:31.216
 Best Social Impact.  
Â» This year's winner generates 

10:09:31.217 --> 10:09:35.098
large-scale reach to fight a 
major global issue.  The app 

10:09:35.099 --> 10:09:38.549
uses a simple interface to drive
 awareness and engagement of a 

10:09:38.550 --> 10:09:40.784
major cause.  They are a 
tremendous partner, and I 

10:09:40.785 --> 10:09:44.378
encourage you all to try out 
their new Instant App launching 

10:09:44.379 --> 10:09:50.011
here at I/O.  The winner of this
 year's Best Social Impact award

10:09:50.275 --> 10:09:53.189
 is Share the Meal. 

10:10:18.963 --> 10:10:20.963
Kochikar. 

10:10:28.330 --> 10:10:30.330
it?   
    [Cheering and applause]

10:10:33.956 --> 10:10:36.979
 to all the nominees and the 
winners!   

10:10:36.980 --> 10:10:38.980
    [Cheering and applause]

10:10:54.708 --> 10:10:59.030
when he said, without you, tools
 and our platforms are nothing, 

10:10:59.031 --> 10:11:01.384
so we thank you for your 
commitment, for your innovation,

10:11:01.538 --> 10:11:04.853
 and I can't wait to see you 
here next year to see what you 

10:11:04.854 --> 10:11:07.832
will have built between now and 
then.  So thank you all for 

10:11:07.833 --> 10:11:12.182
coming.  I hope you enjoy the 
rest of the show.  There's a big

10:11:12.551 --> 10:11:17.663
 show at the amphitheater at 
8:00.  We hope to see you there.

10:11:17.664 --> 10:11:19.664
  Thank you very much. 

