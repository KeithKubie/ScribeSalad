WEBVTT
Kind: captions
Language: en

00:00:02.167 --> 00:00:04.467
Hi, I'm Andrew Bowers,
product manager

00:00:04.467 --> 00:00:06.200
for developer products
at Google.

00:00:06.200 --> 00:00:09.067
I'd like to talk to you
about Google Web Toolkit.

00:00:09.067 --> 00:00:11.100
Browsers are capable
of a lot these days,

00:00:11.100 --> 00:00:13.100
but to take full advantage
of the browser

00:00:13.100 --> 00:00:14.834
you need to be an expert
in JavaScript

00:00:14.834 --> 00:00:17.167
and three or more browsers
and their quirks,

00:00:17.167 --> 00:00:19.300
and potentially have
a lot of time on your hands.

00:00:19.300 --> 00:00:21.667
Alternatively, you could
have a good set of tools

00:00:21.667 --> 00:00:23.100
to help you out.

00:00:23.100 --> 00:00:26.467
Google Web Toolkit provides
a set of tools for just that.

00:00:26.467 --> 00:00:28.767
It lets a developer write
an AJAX application

00:00:28.767 --> 00:00:30.367
in the Java programming
language,

00:00:30.367 --> 00:00:33.167
taking advantage of all the
tools available for Java,

00:00:33.167 --> 00:00:36.133
and then cross-compiles that
code into highly optimized,

00:00:36.133 --> 00:00:37.667
plain old JavaScript.

00:00:37.667 --> 00:00:40.434
JavaScript that's not only
optimized per browser,

00:00:40.434 --> 00:00:42.734
but can be served
from any web server.

00:00:42.734 --> 00:00:47.801
Let's see what development with
Google Web Toolkit looks like.

00:00:47.801 --> 00:00:50.067
Let's look at one of the
App Engine demo applications

00:00:50.067 --> 00:00:53.300
that uses Google Web Toolkit,
or GWT for short.

00:00:53.300 --> 00:00:55.801
It's a sticky note application
that allows surfaces

00:00:55.801 --> 00:00:57.734
to be shared among
logged-in users.

00:00:57.734 --> 00:01:01.100
I'll go into Eclipse
and open up this project.

00:01:01.100 --> 00:01:02.767
The source package structure
is divided

00:01:02.767 --> 00:01:04.767
into client
and server packages.

00:01:04.767 --> 00:01:07.367
At deploy time, Java files
in the client directory

00:01:07.367 --> 00:01:09.767
will be cross-compiled
into JavaScript,

00:01:09.767 --> 00:01:12.200
and run
in our users' browsers.

00:01:12.200 --> 00:01:13.968
Files in the server directory

00:01:13.968 --> 00:01:15.834
will be run as bytecode
on the server.

00:01:15.834 --> 00:01:19.133
Because my client code
is also modeled in Java,

00:01:19.133 --> 00:01:21.234
I have the option
of using the same objects

00:01:21.234 --> 00:01:24.667
across both my server
and my JavaScript client.

00:01:24.667 --> 00:01:27.000
GWT provides higher-level
abstraction

00:01:27.000 --> 00:01:29.601
on top of JavaScript,
enabling developers

00:01:29.601 --> 00:01:31.934
to be more productive
by coding against widgets

00:01:31.934 --> 00:01:36.067
and events that work across
all major browsers.

00:01:36.067 --> 00:01:38.234
It's worth noting
that you can also mix

00:01:38.234 --> 00:01:41.367
handwritten JavaScript
into GWT source code easily.

00:01:41.367 --> 00:01:45.033
But for now, I'm just focusing
on the Java aspects.

00:01:45.033 --> 00:01:47.701
Part of the development-time
magic of GWT

00:01:47.701 --> 00:01:49.367
is the hosted mode browser.

00:01:49.367 --> 00:01:51.868
During development, you interact
with your application

00:01:51.868 --> 00:01:54.400
in the hosted mode browser,
which runs your Java bytecode

00:01:54.400 --> 00:01:57.367
on the backend to render
your user interface

00:01:57.367 --> 00:01:59.567
in an embedded browser.

00:01:59.567 --> 00:02:01.267
This has two benefits.

00:02:01.267 --> 00:02:03.968
First, because we're running
Java bytecode,

00:02:03.968 --> 00:02:06.767
it means you can debug as you
would any Java applications,

00:02:06.767 --> 00:02:09.067
setting breakpoints,
inspecting variables,

00:02:09.067 --> 00:02:10.801
and stepping through code.

00:02:10.801 --> 00:02:14.200
I'll set break points...

00:02:14.200 --> 00:02:16.934
create a new note
to trigger one of them...

00:02:16.934 --> 00:02:23.534
and then inspect the variable
containing the note contents.

00:02:23.534 --> 00:02:26.033
Second, you can develop
using the familiar

00:02:26.033 --> 00:02:29.567
edit-refresh-view
programming model of JavaScript.

00:02:29.567 --> 00:02:31.667
You don't have to compile your
Java source

00:02:31.667 --> 00:02:34.234
into JavaScript to see changes
in the browser.

00:02:34.234 --> 00:02:38.467
I'll change the size of a sticky
note in my code...

00:02:38.467 --> 00:02:41.133
refresh the hosted mode
browser...

00:02:41.133 --> 00:02:45.701
and create a note
with the new dimensions.

00:02:45.701 --> 00:02:49.200
Google Web Toolkit provides
an optimized RPC mechanism

00:02:49.200 --> 00:02:51.501
for Java, which means
you don't have to worry

00:02:51.501 --> 00:02:55.267
about the complexity
of low-level HTTP interactions.

00:02:55.267 --> 00:02:58.400
Alternatively, you can also
easily use JSON

00:02:58.400 --> 00:03:01.200
to communicate
with the server.

00:03:01.200 --> 00:03:03.334
When you're ready
to see what your application

00:03:03.334 --> 00:03:05.033
will look like in production,

00:03:05.033 --> 00:03:07.567
you compile your source code
into JavaScript.

00:03:07.567 --> 00:03:09.834
Google Web Toolkit handles
the browser implementation

00:03:09.834 --> 00:03:13.434
differences for you, and creates
an optimized JavaScript file

00:03:13.434 --> 00:03:15.167
per major browser.

00:03:15.167 --> 00:03:18.667
The code is contained
in the cache.html files.

00:03:18.667 --> 00:03:20.934
Browser-specific JavaScript
means a user

00:03:20.934 --> 00:03:22.834
downloads only what they need.

00:03:22.834 --> 00:03:25.334
An Internet Explorer user
doesn't download code

00:03:25.334 --> 00:03:27.534
needed for Firefox.

00:03:27.534 --> 00:03:29.634
The compiled script
is heavily optimized,

00:03:29.634 --> 00:03:32.901
including compiler optimizations
like method inlining,

00:03:32.901 --> 00:03:35.334
code size reduction,
such as removal of comments

00:03:35.334 --> 00:03:38.234
and unused code,
and of course, the final script

00:03:38.234 --> 00:03:40.300
is obfuscated and minified.

00:03:40.300 --> 00:03:42.934
Now, if you want to inspect
the final JavaScript

00:03:42.934 --> 00:03:44.734
in a human-readable form,

00:03:44.734 --> 00:03:47.367
simply compile with the "pretty"
option selected.

00:03:47.367 --> 00:03:50.601
Just be sure to switch back
to obfuscated before deploying,

00:03:50.601 --> 00:03:53.634
as this results in faster code
and less JavaScript

00:03:53.634 --> 00:03:55.334
for the user to download.

00:03:55.334 --> 00:03:57.067
I've shown you the basics
of developing

00:03:57.067 --> 00:03:58.467
with Google Web Toolkit,

00:03:58.467 --> 00:03:59.767
the benefit these tools
can have

00:03:59.767 --> 00:04:01.501
on a web developer's
productivity,

00:04:01.501 --> 00:04:03.601
and the performance gains
you can achieve

00:04:03.601 --> 00:04:05.100
in your AJAX application.

00:04:05.100 --> 00:04:06.133
To learn more,

00:04:06.133 --> 00:04:08.801
visit
code.google.com/webtoolkit.

