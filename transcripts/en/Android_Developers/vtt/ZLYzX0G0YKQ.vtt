WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:01.640
LUIS HECTOR CHAVEZ:
Hello, everyone.

00:00:01.640 --> 00:00:04.380
Welcome to Google I/O. My
name is Luis Hector Chavez

00:00:04.380 --> 00:00:07.290
and I'm one of the engineers
in the Chrome OS team.

00:00:07.290 --> 00:00:09.040
Maybe you saw today's
earlier announcement

00:00:09.040 --> 00:00:11.095
that we're bringing Android
apps to Chrome books.

00:00:13.590 --> 00:00:14.090
Yay.

00:00:18.310 --> 00:00:20.590
So I'm super excited to be
here because I can finally

00:00:20.590 --> 00:00:22.690
tell you guys what
we've been working on

00:00:22.690 --> 00:00:23.810
for the last few months.

00:00:23.810 --> 00:00:26.094
So it's not a secret anymore.

00:00:26.094 --> 00:00:29.670
All right, so
first of all, let's

00:00:29.670 --> 00:00:32.200
talk a little bit about
why we're doing this

00:00:32.200 --> 00:00:34.570
and why it should be
interesting to you.

00:00:34.570 --> 00:00:37.140
First of all, Chrome OS
is a growing platform.

00:00:37.140 --> 00:00:39.790
While overall PC
shipments are declining,

00:00:39.790 --> 00:00:41.530
Chrome OS continues to grow.

00:00:41.530 --> 00:00:45.460
In fact, last year we had
32% year over year growth.

00:00:45.460 --> 00:00:47.860
The numbers get even
better in certain segments.

00:00:47.860 --> 00:00:50.210
For instance, Chromebooks
are the number one device

00:00:50.210 --> 00:00:51.870
in K-12 edu in the US.

00:00:54.410 --> 00:00:56.130
There are millions
of active users

00:00:56.130 --> 00:00:58.980
with more than 50 different
devices from 13 OEMs in 44

00:00:58.980 --> 00:01:02.400
countries, and we've got lots of
amazing Chromebooks coming out.

00:01:05.090 --> 00:01:07.680
OK, so we have a
large, growing platform

00:01:07.680 --> 00:01:10.450
with a large number of
potentially new users.

00:01:10.450 --> 00:01:12.030
This is where you
Android Developers

00:01:12.030 --> 00:01:14.970
come into the picture.

00:01:14.970 --> 00:01:18.990
All Android developers
want more users.

00:01:18.990 --> 00:01:20.890
All Chromebook users
want more apps,

00:01:20.890 --> 00:01:22.720
but they just
don't want any app.

00:01:22.720 --> 00:01:26.019
They want the apps
they know and love.

00:01:26.019 --> 00:01:28.310
So we believe that bringing
Android apps to Chromebooks

00:01:28.310 --> 00:01:32.960
provides a middle ground that
helps both groups of people.

00:01:32.960 --> 00:01:35.650
OK if a developer wanted
to bring their application

00:01:35.650 --> 00:01:39.120
in Chromebooks, what
are their options?

00:01:39.120 --> 00:01:41.000
Let's start with a non-solution.

00:01:41.000 --> 00:01:43.100
You can write a Chrome OS app.

00:01:43.100 --> 00:01:45.830
This is essentially writing
your application twice.

00:01:45.830 --> 00:01:49.470
This requires you to learn
a new platform, which

00:01:49.470 --> 00:01:52.610
might yield an application
that looks more native,

00:01:52.610 --> 00:01:53.680
but it's a lot of work.

00:01:53.680 --> 00:01:55.096
It's a lot of
upkeep, and you need

00:01:55.096 --> 00:01:57.187
to maintain two potentially
separate code bases.

00:01:57.187 --> 00:01:58.770
So it's not an option
for most people.

00:02:01.700 --> 00:02:05.660
Another option was to
build an HTML5 application.

00:02:05.660 --> 00:02:08.470
This might yield an application
that looks and feels

00:02:08.470 --> 00:02:10.449
native in Chrome
OS, but you would

00:02:10.449 --> 00:02:13.130
need an Android
HTML wrapper, which

00:02:13.130 --> 00:02:15.180
doesn't look super native.

00:02:15.180 --> 00:02:18.280
It also doesn't take a lot
of advantage of the Android

00:02:18.280 --> 00:02:19.550
platform.

00:02:19.550 --> 00:02:21.464
So it's still not
a great option.

00:02:24.380 --> 00:02:26.810
Another option was App
Runtime for Chrome.

00:02:26.810 --> 00:02:28.700
We in the Chrome OS
team released this

00:02:28.700 --> 00:02:32.030
2 years ago in 2014 as a way
to run Android applications

00:02:32.030 --> 00:02:33.980
in Chromebooks.

00:02:33.980 --> 00:02:36.010
We're running full
Android instances

00:02:36.010 --> 00:02:38.067
in a Native Client sandbox.

00:02:38.067 --> 00:02:40.275
Unfortunately, it had some
challenges for developers.

00:02:44.177 --> 00:02:45.760
Access to some of
the system resources

00:02:45.760 --> 00:02:47.740
were restricted due
to the advanced nature

00:02:47.740 --> 00:02:49.715
of Native Client sandbox.

00:02:49.715 --> 00:02:51.590
For instance, we had to
do a full file system

00:02:51.590 --> 00:02:54.090
emulation because it
was not available to us.

00:02:54.090 --> 00:02:56.010
And some apps didn't
work great with this.

00:02:58.870 --> 00:03:02.700
Native Client also had a
single process execution model,

00:03:02.700 --> 00:03:06.609
which caused some applications
to not work great, especially

00:03:06.609 --> 00:03:07.525
the Google Play Store.

00:03:10.140 --> 00:03:12.970
Finally, some of
the features that

00:03:12.970 --> 00:03:15.370
are critical for developers,
like in-app payments,

00:03:15.370 --> 00:03:17.560
required extra work
on your behalf.

00:03:20.450 --> 00:03:22.240
Having said all that,
we still believe

00:03:22.240 --> 00:03:23.980
that getting Android
applications running

00:03:23.980 --> 00:03:26.430
as a fully integrated
native Chrome OS apps

00:03:26.430 --> 00:03:30.630
was the right idea, so we
made a lot of improvements

00:03:30.630 --> 00:03:33.720
and we're building a
whole new platform to run

00:03:33.720 --> 00:03:36.966
Android apps on Chromebooks.

00:03:36.966 --> 00:03:39.090
All right, so many
of you might have

00:03:39.090 --> 00:03:43.450
missed today's earlier demo,
so I'm going to give a shorter

00:03:43.450 --> 00:03:44.260
one right now.

00:03:46.840 --> 00:03:51.670
OK, so first of all, this is
standard Chrome OS desktop,

00:03:51.670 --> 00:03:53.524
but you can see we have
the Play Store now.

00:03:53.524 --> 00:03:54.024
Yay.

00:03:57.849 --> 00:03:59.390
And, of course, I
don't have internet

00:03:59.390 --> 00:04:02.220
so there's no Play Store.

00:04:02.220 --> 00:04:05.750
But fortunately I already
installed a few apps

00:04:05.750 --> 00:04:07.620
like Gmail.

00:04:07.620 --> 00:04:08.880
Ta-da.

00:04:08.880 --> 00:04:10.650
So one of things
we're doing here

00:04:10.650 --> 00:04:12.760
is that we do have
multi-window support.

00:04:21.160 --> 00:04:24.550
And not only that, we can also
change the size of the window.

00:04:24.550 --> 00:04:28.480
We can also maximize
it, stuff like that.

00:04:28.480 --> 00:04:28.980
Neat things.

00:04:34.040 --> 00:04:37.680
We also support integration
with some Chrome OS

00:04:37.680 --> 00:04:47.660
native notifications-- for
instance, hello, world!

00:04:50.499 --> 00:04:53.040
And, of course, as I mentioned
before, I don't have internet,

00:04:53.040 --> 00:04:54.890
so let's skip that.

00:04:54.890 --> 00:04:56.880
Oh, there you go.

00:04:56.880 --> 00:04:59.760
So as we see, we can have
offline access in Android apps

00:04:59.760 --> 00:05:00.260
now.

00:05:04.888 --> 00:05:06.304
Right let's go
back to the slides.

00:05:10.590 --> 00:05:12.688
OK, we already saw
what it looks like,

00:05:12.688 --> 00:05:15.146
so let's talk a little bit more
about how it's implemented.

00:05:18.440 --> 00:05:21.408
First of all, we're not
using Native Client anymore.

00:05:21.408 --> 00:05:23.282
We're using a brand new
sandboxing mechanism.

00:05:27.310 --> 00:05:30.020
It uses existing
Linux namespaces

00:05:30.020 --> 00:05:32.800
to isolate Android
and Chrome OS.

00:05:32.800 --> 00:05:34.460
These are you already
used in Chrome OS

00:05:34.460 --> 00:05:36.810
and in some of our
cloud offerings.

00:05:36.810 --> 00:05:39.749
We're using that mount,
process, user, network,

00:05:39.749 --> 00:05:40.540
and IPC namespaces.

00:05:43.930 --> 00:05:46.240
The core security team
also developed new features

00:05:46.240 --> 00:05:47.840
for this.

00:05:47.840 --> 00:05:49.230
Since Android is
running directly

00:05:49.230 --> 00:05:52.500
on top of the Linux kernel, this
increased the attack surface

00:05:52.500 --> 00:05:56.400
a little bit more than
we were comfortable with,

00:05:56.400 --> 00:06:00.420
so the Chome OS security team
developed a new way to add

00:06:00.420 --> 00:06:02.570
alternate sys call tables.

00:06:02.570 --> 00:06:04.610
This is more efficient
and configurable

00:06:04.610 --> 00:06:06.690
than existing system
call filtering techniques

00:06:06.690 --> 00:06:10.240
like seccomp-bpf, which, by
the way, the Chrome OS team

00:06:10.240 --> 00:06:10.940
also developed.

00:06:13.906 --> 00:06:15.280
Having both Android
and Chrome OS

00:06:15.280 --> 00:06:18.115
do their own compositing
would make everything slower,

00:06:18.115 --> 00:06:20.490
so we have a shared compositing
model where there is only

00:06:20.490 --> 00:06:22.217
one overall compositor.

00:06:22.217 --> 00:06:24.341
This makes things a lot
faster and more responsive.

00:06:26.990 --> 00:06:31.640
Finally, since we know that
a lot of developers target

00:06:31.640 --> 00:06:34.970
indicate for arm only, we're
providing just-in-time binary

00:06:34.970 --> 00:06:37.430
translation so that their
already existing arm

00:06:37.430 --> 00:06:40.280
applications can run on
x86 devices like the Google

00:06:40.280 --> 00:06:44.296
Chromebook Pixel with no
work required on your part.

00:06:47.939 --> 00:06:49.980
So this new approach still
maintains a high level

00:06:49.980 --> 00:06:52.520
of security in both
operating systems.

00:06:52.520 --> 00:06:54.920
You get to keep all of
Chrome OS' security features

00:06:54.920 --> 00:06:59.085
like verified root, user data
encryption, continuous updates,

00:06:59.085 --> 00:07:01.085
and Android still has
[INAUDIBLE] Linux running.

00:07:04.060 --> 00:07:06.330
There are no virtual machines
or emulation going on,

00:07:06.330 --> 00:07:07.788
so you get full
native performance.

00:07:10.340 --> 00:07:14.650
And finally, since we're running
the whole Android system,

00:07:14.650 --> 00:07:17.431
you get to run all of Android
Marshmallow within Chrome OS.

00:07:17.431 --> 00:07:18.930
This includes the
Google Play Store.

00:07:21.840 --> 00:07:25.200
So something that we learned
with App Runtime for Chrome

00:07:25.200 --> 00:07:26.545
is that integration matters.

00:07:26.545 --> 00:07:29.170
The more integrated the apps are
with the rest of the operating

00:07:29.170 --> 00:07:32.210
system, the better
they look and feel.

00:07:32.210 --> 00:07:34.340
So we only grant
direct hardware access

00:07:34.340 --> 00:07:35.864
to Android in very
few locations.

00:07:35.864 --> 00:07:37.280
The rest of the
time, the hardware

00:07:37.280 --> 00:07:39.620
is still managed by Chrome OS.

00:07:39.620 --> 00:07:41.740
But still, we had a lot
of integration points

00:07:41.740 --> 00:07:45.260
so that Android developers
can still call the same APIs,

00:07:45.260 --> 00:07:49.790
and those APIs underneath
will make calls to Chrome OS.

00:07:49.790 --> 00:07:51.207
This allows both
operating systems

00:07:51.207 --> 00:07:52.706
to share the same
view of the system

00:07:52.706 --> 00:07:53.962
instead of having split views.

00:07:56.620 --> 00:07:58.517
OK, so what does it
all translate into,

00:07:58.517 --> 00:08:00.225
and how does it impact
your applications?

00:08:03.217 --> 00:08:05.050
Because we're running
a full Android system,

00:08:05.050 --> 00:08:06.660
it means that most
applications can

00:08:06.660 --> 00:08:09.920
be running Chrome OS without
any code changes at all.

00:08:09.920 --> 00:08:12.310
Of course, since this
is a new platform,

00:08:12.310 --> 00:08:14.290
you might want to still
make some optimizations

00:08:14.290 --> 00:08:15.540
and small tweaks.

00:08:18.970 --> 00:08:23.690
But your app works
like a Chrome OS app.

00:08:23.690 --> 00:08:25.940
Most of the things you expect
the Android system to do

00:08:25.940 --> 00:08:29.930
will be now provided by Chrome
OS instead of being constrained

00:08:29.930 --> 00:08:31.990
to a little window.

00:08:31.990 --> 00:08:34.110
Every task runs
in its own window.

00:08:34.110 --> 00:08:37.440
You get Android notifications
together with Chrome OS'.

00:08:37.440 --> 00:08:40.373
There's just one App
Launcher in shelf.

00:08:40.373 --> 00:08:41.789
Sign-in information
will be shared

00:08:41.789 --> 00:08:46.360
between operating systems, so
you don't have to log in twice.

00:08:46.360 --> 00:08:48.960
You're also able to share
files in the Downloads folder,

00:08:48.960 --> 00:08:49.460
as well.

00:08:52.380 --> 00:08:55.110
Hardware is also integrated
so you still get connectivity

00:08:55.110 --> 00:08:57.730
to Wi-Fi and Bluetooth.

00:08:57.730 --> 00:09:01.306
Camera, microphone, audio,
and video still work.

00:09:04.260 --> 00:09:06.070
All of Chrome OS'
input mechanisms

00:09:06.070 --> 00:09:08.510
are still plumbed
through the application,

00:09:08.510 --> 00:09:10.320
so keyboard and
trackpad events will

00:09:10.320 --> 00:09:12.950
be delivered to
your application,

00:09:12.950 --> 00:09:17.720
and also touch events if
the Chromebook supports it.

00:09:17.720 --> 00:09:19.240
Meanwhile, your
application still

00:09:19.240 --> 00:09:22.540
behaves like an
Android application.

00:09:22.540 --> 00:09:24.480
Since we're running
a full Android stack,

00:09:24.480 --> 00:09:27.230
the whole Marshmallow
API is available to you.

00:09:27.230 --> 00:09:29.090
This includes Google
Play services,

00:09:29.090 --> 00:09:30.900
so things like
in-app payments will

00:09:30.900 --> 00:09:33.430
be available in
consumer Chromebooks.

00:09:33.430 --> 00:09:35.290
We're also not
adding any new APIs,

00:09:35.290 --> 00:09:37.272
so there's nothing for
you to learn this time.

00:09:40.400 --> 00:09:43.160
All system services are running,
and all the interactions

00:09:43.160 --> 00:09:45.160
between the system services
and your application

00:09:45.160 --> 00:09:47.300
are exactly like
you would expect.

00:09:47.300 --> 00:09:50.356
This includes things like the
application lifecycle events.

00:09:53.220 --> 00:09:55.600
Finally, the hardware is
abstracted so that you don't

00:09:55.600 --> 00:09:56.910
need to worry about anything.

00:10:00.330 --> 00:10:02.890
And I'm going to be
clear-- while apps

00:10:02.890 --> 00:10:05.080
can be run in
Chrome OS, we still

00:10:05.080 --> 00:10:08.232
require Chrome OS users to
opt in to use this feature.

00:10:08.232 --> 00:10:10.690
We understand that there are
some scenarios in which people

00:10:10.690 --> 00:10:13.780
don't want to enable
this just yet.

00:10:13.780 --> 00:10:16.290
We're also providing
enterprise and education users

00:10:16.290 --> 00:10:19.540
with additional policies
that can enforce if and which

00:10:19.540 --> 00:10:23.440
applications can run on
the devices they manage.

00:10:23.440 --> 00:10:25.660
All right, when is this
going to be available?

00:10:25.660 --> 00:10:29.710
For you developers, we're
enabling this feature on Chrome

00:10:29.710 --> 00:10:30.950
OS 53.

00:10:30.950 --> 00:10:34.960
This should be available
in the DEV channel in June,

00:10:34.960 --> 00:10:37.050
and 53 should be
generally available

00:10:37.050 --> 00:10:39.346
for all users in the stable
channel in September,

00:10:39.346 --> 00:10:40.970
so you still have
some time to prepare.

00:10:43.670 --> 00:10:45.790
We'll start by supporting
three devices-- the Asus

00:10:45.790 --> 00:10:48.420
10-inch Flip, the
Acer Chromebook R11,

00:10:48.420 --> 00:10:51.106
and the Chromebook Pixel 2015.

00:10:51.106 --> 00:10:52.980
We'll gradually bring
support to more devices

00:10:52.980 --> 00:10:54.920
in later milestones,
so stay tuned.

00:10:54.920 --> 00:10:56.950
And that's the URL
where you can check

00:10:56.950 --> 00:11:01.220
which devices will be getting
support on which releases.

00:11:01.220 --> 00:11:04.140
So stay tuned.

00:11:04.140 --> 00:11:06.820
OK, it's great that most
applications will work out

00:11:06.820 --> 00:11:08.432
of the box without
any node changes,

00:11:08.432 --> 00:11:13.080
but let's take a look
at the best practices

00:11:13.080 --> 00:11:17.036
you can take into account
so your application works

00:11:17.036 --> 00:11:18.160
even better on Chromebooks.

00:11:22.830 --> 00:11:25.640
There's a wide variety of
Chromebook form factors.

00:11:25.640 --> 00:11:28.464
All of them have a physical
keyboard and trackpad.

00:11:28.464 --> 00:11:30.130
Most of the advices
we'll be rolling out

00:11:30.130 --> 00:11:32.640
support to have a
touch screen, as well.

00:11:32.640 --> 00:11:34.380
Some of them are even
convertible so they

00:11:34.380 --> 00:11:38.470
can switch between a laptop
and a tablet form factor.

00:11:38.470 --> 00:11:41.005
While we're testing
applications, most of them,

00:11:41.005 --> 00:11:43.130
we found out that they
already work pretty well

00:11:43.130 --> 00:11:45.100
with keyboard and mouse.

00:11:45.100 --> 00:11:47.540
Still, not all of them did.

00:11:47.540 --> 00:11:51.140
So it's better
that you developers

00:11:51.140 --> 00:11:55.230
take into account testing
with a keyboard and mouse.

00:11:55.230 --> 00:11:58.830
Also, since there's essentially
new hardware available to you,

00:11:58.830 --> 00:12:02.180
might as well make
the best of it.

00:12:02.180 --> 00:12:04.850
So productivity
applications can have

00:12:04.850 --> 00:12:08.580
things like hotkey support.

00:12:08.580 --> 00:12:11.451
That'll make users
even more productive.

00:12:11.451 --> 00:12:13.450
Some games even lend
themselves to be controlled

00:12:13.450 --> 00:12:14.990
using a keyboard and mouse.

00:12:26.280 --> 00:12:29.610
OK, now for the
important coding part.

00:12:29.610 --> 00:12:31.490
By default, all
Android applications

00:12:31.490 --> 00:12:35.550
set the touchscreen hardware
feature to be required.

00:12:35.550 --> 00:12:38.260
Now, I mentioned before
that not all Chromebooks

00:12:38.260 --> 00:12:40.510
will provide touchscreen.

00:12:40.510 --> 00:12:45.060
So it's very important that
on your AndroidManifest.xml

00:12:45.060 --> 00:12:48.230
you set the
android.hardware.touchscreen

00:12:48.230 --> 00:12:51.071
feature to be not required.

00:12:51.071 --> 00:12:52.820
This will allow your
application to appear

00:12:52.820 --> 00:12:54.640
in the Play Store
for all Chromebooks

00:12:54.640 --> 00:12:57.850
instead of just for the
Chromebooks that support touch.

00:12:57.850 --> 00:12:59.850
If you go out of this
presentation with just one

00:12:59.850 --> 00:13:01.190
thing in mind, let it be this.

00:13:04.650 --> 00:13:07.220
All right, best practices
for multi-windows.

00:13:07.220 --> 00:13:09.260
On laptops, everybody
uses multiple windows

00:13:09.260 --> 00:13:11.860
for productivity given that
there are more pixels available

00:13:11.860 --> 00:13:14.400
on the screen.

00:13:14.400 --> 00:13:15.900
Now, I did mention
a couple of times

00:13:15.900 --> 00:13:19.080
before that we're
supporting Marshmallow API,

00:13:19.080 --> 00:13:22.810
and Marshmallow doesn't have
the APIs for multi-window.

00:13:22.810 --> 00:13:25.410
I also mentioned that we
are not adding any new APIs,

00:13:25.410 --> 00:13:28.329
so how does it work?

00:13:28.329 --> 00:13:30.870
In order to minimize the amount
of work needed for everybody,

00:13:30.870 --> 00:13:32.600
we are only supporting
a few layouts

00:13:32.600 --> 00:13:35.030
that your application
already most likely supports.

00:13:39.360 --> 00:13:40.960
First of all, we
have a landscape.

00:13:40.960 --> 00:13:42.820
This is the default layout.

00:13:42.820 --> 00:13:47.590
This uses a Nexus 9 aspect
ratio and device [INAUDIBLE].

00:13:50.450 --> 00:13:53.560
We also support portrait,
which runs just like a Nexus 5.

00:13:56.120 --> 00:13:57.800
We also have maximized
windows, which

00:13:57.800 --> 00:14:03.160
take up all available
pixels in the screen.

00:14:03.160 --> 00:14:04.730
Finally, for
convertibles, we have

00:14:04.730 --> 00:14:08.540
touch me mode, which is more
or less the same as maximize,

00:14:08.540 --> 00:14:11.730
but hides the window decorations
and the shelf at the bottom,

00:14:11.730 --> 00:14:13.670
so it's similar to
Android's immersive mode.

00:14:16.930 --> 00:14:19.590
We added some window controls
to toggle between all

00:14:19.590 --> 00:14:21.300
the available layouts.

00:14:21.300 --> 00:14:24.900
This allows both
users and developers

00:14:24.900 --> 00:14:27.002
to choose the right balance
of information density

00:14:27.002 --> 00:14:29.460
in the sizes and layouts their
applications were originally

00:14:29.460 --> 00:14:31.100
designed for.

00:14:31.100 --> 00:14:34.650
Now, some things you
need to be aware of.

00:14:34.650 --> 00:14:37.430
Similar to [INAUDIBLE]
multi-window implementation,

00:14:37.430 --> 00:14:40.650
we're not changing the
application lifecycle model.

00:14:40.650 --> 00:14:43.030
Exactly one application will
be on the onResume state,

00:14:43.030 --> 00:14:45.717
and this is the window
that's currently focused.

00:14:45.717 --> 00:14:47.550
All the rest of the
windows and applications

00:14:47.550 --> 00:14:50.950
are in the onPause state.

00:14:50.950 --> 00:14:53.140
Also, the out-of-memory
killer is integrated

00:14:53.140 --> 00:14:55.110
with the rest of the
operating system,

00:14:55.110 --> 00:14:57.010
and it takes the z
order of the windows

00:14:57.010 --> 00:15:00.900
into account when
calculating the final score.

00:15:00.900 --> 00:15:04.420
So applications that have
been least recently used

00:15:04.420 --> 00:15:05.380
will be killed first.

00:15:08.810 --> 00:15:14.550
OK, so since changing
orientation also

00:15:14.550 --> 00:15:18.504
changes the physical size of
your window or of the device,

00:15:18.504 --> 00:15:20.420
you need to declare the
correct Android screen

00:15:20.420 --> 00:15:23.432
orientation so that it only
uses the ones it supports.

00:15:27.010 --> 00:15:28.770
Now, it's also
important that you

00:15:28.770 --> 00:15:30.840
go read this document,
the Handle Runtime

00:15:30.840 --> 00:15:32.815
Changes in the official
Android documentation.

00:15:36.450 --> 00:15:38.290
There will be some
things that you

00:15:38.290 --> 00:15:42.630
don't expect to change
whenever changing orientation.

00:15:42.630 --> 00:15:44.410
For instance, the
screen width and height

00:15:44.410 --> 00:15:46.510
will change in ways
you don't necessarily

00:15:46.510 --> 00:15:48.470
expect because on
normal devices,

00:15:48.470 --> 00:15:50.830
they only flip
between them, and here

00:15:50.830 --> 00:15:53.780
you can have totally
different values.

00:15:53.780 --> 00:15:57.010
Also, the density DPI
setting can change

00:15:57.010 --> 00:15:59.900
when you switch orientation.

00:15:59.900 --> 00:16:02.580
Also, very important-- make
sure you invalidate any cache

00:16:02.580 --> 00:16:03.914
resources.

00:16:03.914 --> 00:16:05.330
Since once you
change orientation,

00:16:05.330 --> 00:16:08.050
you're effectively
changing device,

00:16:08.050 --> 00:16:10.710
you need to make sure that
you load the correct resources

00:16:10.710 --> 00:16:13.910
after the orientation
has changed.

00:16:13.910 --> 00:16:16.760
Now, these two things are
still important for Android

00:16:16.760 --> 00:16:18.920
[INAUDIBLE], so might as
well do them right now.

00:16:23.590 --> 00:16:26.366
Also, use the correct
task affinities.

00:16:26.366 --> 00:16:30.410
As I showed in the demo,
it's possible for a task

00:16:30.410 --> 00:16:33.370
to launch another
activity in a new task.

00:16:33.370 --> 00:16:35.370
This will render a new window.

00:16:35.370 --> 00:16:37.890
But if your intention was to
have a [? modal ?] window,

00:16:37.890 --> 00:16:41.810
you should put that
activity in the same task.

00:16:41.810 --> 00:16:45.245
Otherwise, you might get
into application faults

00:16:45.245 --> 00:16:46.370
that you weren't expecting.

00:16:49.480 --> 00:16:52.450
Finally, respect
the onPaused state.

00:16:52.450 --> 00:16:54.110
While your application
might be paused,

00:16:54.110 --> 00:16:56.207
it's still visible, so
make sure you're not

00:16:56.207 --> 00:16:57.790
doing any rendering
because that might

00:16:57.790 --> 00:16:59.100
look awkward for the user.

00:16:59.100 --> 00:17:00.918
And it will also consume
a lot of battery.

00:17:05.491 --> 00:17:06.990
Using backup and
restore effectively

00:17:06.990 --> 00:17:08.781
is also very important.

00:17:08.781 --> 00:17:10.530
One of the best features
about Chromebooks

00:17:10.530 --> 00:17:14.800
is that users can just throw out
their machines, get a new one,

00:17:14.800 --> 00:17:17.310
login, and all their
applications and settings

00:17:17.310 --> 00:17:18.849
will be there.

00:17:18.849 --> 00:17:22.589
So it's not totally required
to support backup and restore,

00:17:22.589 --> 00:17:25.690
but it's a very good idea
and users will love it.

00:17:25.690 --> 00:17:27.564
Make sure you read the
official documentation

00:17:27.564 --> 00:17:30.770
in Backup &amp; Restore.

00:17:30.770 --> 00:17:33.561
There are also some
scenarios in which

00:17:33.561 --> 00:17:35.560
Chromebooks can be shared
amongst a large number

00:17:35.560 --> 00:17:36.750
of users.

00:17:36.750 --> 00:17:38.750
For instance, in
education, students

00:17:38.750 --> 00:17:40.880
don't get their own
personal Chromebooks.

00:17:40.880 --> 00:17:43.230
They are shared
between students.

00:17:43.230 --> 00:17:45.610
So if you're writing
applications for education

00:17:45.610 --> 00:17:48.080
purposes, make sure to take
this scenario into account

00:17:48.080 --> 00:17:50.310
and be mindful of the
local storage you use.

00:17:54.107 --> 00:17:56.440
In general, Chromebooks support
a less amount of sensors

00:17:56.440 --> 00:17:58.620
compared to mobile devices.

00:17:58.620 --> 00:18:01.370
For instance, most
Android developers

00:18:01.370 --> 00:18:04.750
are used to having a GPS
device to get accurate location

00:18:04.750 --> 00:18:06.398
information.

00:18:06.398 --> 00:18:08.094
Chromebooks don't
have a GPS device,

00:18:08.094 --> 00:18:09.510
but they can still
get [INAUDIBLE]

00:18:09.510 --> 00:18:12.270
location information
through the use of Wi-Fi.

00:18:12.270 --> 00:18:15.900
This might be enough to get the
best restaurants around you,

00:18:15.900 --> 00:18:18.962
but it might not be enough
to just grab a Chromebook,

00:18:18.962 --> 00:18:21.420
put it in your car, expect to
have turn-by-turn navigation.

00:18:24.220 --> 00:18:27.590
So the recommendation is to make
sure you don't require hardware

00:18:27.590 --> 00:18:30.002
that might not be available.

00:18:30.002 --> 00:18:31.460
Of course, if your
application does

00:18:31.460 --> 00:18:33.480
require some piece
of hardware that's

00:18:33.480 --> 00:18:36.340
not available on Chromebooks,
we'll respect your decision

00:18:36.340 --> 00:18:39.278
and not show that application on
the Play Store for Chromebooks.

00:18:46.267 --> 00:18:47.850
There are some other
software features

00:18:47.850 --> 00:18:52.710
that are not going to be
supported in Chrome OS.

00:18:52.710 --> 00:18:55.680
Since we want users to have
the full Chrome OS experience,

00:18:55.680 --> 00:18:57.740
applications that customize
some parts of the UI

00:18:57.740 --> 00:18:59.700
will not be available.

00:18:59.700 --> 00:19:03.620
Applications that provide custom
input methods, app widgets,

00:19:03.620 --> 00:19:05.970
live wallpapers, or home
screens won't be supported.

00:19:08.670 --> 00:19:11.725
Also, Chrome OS is going to be
the device manager for Android,

00:19:11.725 --> 00:19:13.350
so applications that
declare themselves

00:19:13.350 --> 00:19:16.131
to be the device
admins or manage users

00:19:16.131 --> 00:19:17.130
also won't be supported.

00:19:23.700 --> 00:19:26.860
We will be shipping initially
with Android Marshmallow,

00:19:26.860 --> 00:19:31.040
but it's still a good idea to
focus some efforts in upgrading

00:19:31.040 --> 00:19:33.480
to N eventually
because you'll bring

00:19:33.480 --> 00:19:35.250
a lot of features
that will improve

00:19:35.250 --> 00:19:37.820
desktop productivity to users.

00:19:37.820 --> 00:19:40.270
For instance, you
will have the ability

00:19:40.270 --> 00:19:41.750
to fully resize
activities instead

00:19:41.750 --> 00:19:43.840
of being constrained to
one of the four layouts

00:19:43.840 --> 00:19:45.670
we support right now.

00:19:45.670 --> 00:19:49.276
You'll also be able to use drag
and drop between applications.

00:19:49.276 --> 00:19:51.650
And there's going to be a new
mouse cursor API available.

00:19:54.270 --> 00:19:55.900
So in order to
learn more about N,

00:19:55.900 --> 00:19:59.500
you can watch these
two presentations

00:19:59.500 --> 00:20:02.720
that aired yesterday
today here in I/O,

00:20:02.720 --> 00:20:05.800
the What's new in Android
and Multi-Window Mode.

00:20:05.800 --> 00:20:08.760
Also, you can consult the
official Android N Developer

00:20:08.760 --> 00:20:09.921
Preview documentation.

00:20:12.690 --> 00:20:15.800
OK, if we have any more
questions about this,

00:20:15.800 --> 00:20:17.550
you can consult the
official documentation

00:20:17.550 --> 00:20:20.150
for Android Apps
for Chromebooks.

00:20:20.150 --> 00:20:22.710
You can also ask questions
in Stack Overflow or post

00:20:22.710 --> 00:20:24.390
questions on the
Android G+ Community.

00:20:29.500 --> 00:20:32.990
Now, before I go,
a lot of you tried

00:20:32.990 --> 00:20:35.060
to get to today's
earlier announcement

00:20:35.060 --> 00:20:37.780
but couldn't get to
it, so we're going

00:20:37.780 --> 00:20:40.970
to redo the demo that
we gave earlier today.

00:20:40.970 --> 00:20:43.311
So here's Katie that will
present to you the earlier

00:20:43.311 --> 00:20:43.810
demo.

00:20:50.920 --> 00:20:52.820
KATIE: All right,
thanks a lot Luis.

00:20:52.820 --> 00:20:54.736
LUIS HECTOR CHAVEZ: Can
we switch to the demo?

00:20:57.740 --> 00:20:59.310
KATIE: All right, very good.

00:20:59.310 --> 00:21:03.079
So apologies this morning that
we are a little short on space.

00:21:03.079 --> 00:21:04.870
So we thought with
these extra few minutes,

00:21:04.870 --> 00:21:08.520
we could go back
through our demo flow.

00:21:08.520 --> 00:21:12.750
So unfortunately, it'll
be a mild different second

00:21:12.750 --> 00:21:13.250
rendition.

00:21:13.250 --> 00:21:14.500
Hopefully a little bit better.

00:21:14.500 --> 00:21:19.480
But here we've got a Pixel 2.

00:21:19.480 --> 00:21:21.770
It looks like a
regular Chromebook.

00:21:21.770 --> 00:21:23.270
Got our Chrome browser here.

00:21:23.270 --> 00:21:27.140
But you obviously now have the
Play Store on the shelf here.

00:21:27.140 --> 00:21:29.570
So we'll go ahead
and launch that.

00:21:29.570 --> 00:21:31.963
So here we can actually
browse through our apps.

00:21:34.307 --> 00:21:36.890
This looks just like the regular
Play Store, so let's go ahead

00:21:36.890 --> 00:21:38.220
and install something.

00:21:38.220 --> 00:21:41.720
So I think we decided Bejeweled
is a pretty good game.

00:21:41.720 --> 00:21:45.220
Let's search for that, and
we'll go ahead and install.

00:21:50.240 --> 00:21:51.740
Oh, and look at that.

00:21:51.740 --> 00:21:54.080
Coincidentally,
apparently Kan's wife

00:21:54.080 --> 00:21:58.190
is asking me to make a poster
for Kan's child's birthday

00:21:58.190 --> 00:21:59.990
party.

00:21:59.990 --> 00:22:02.510
So being a good
employee, let's go ahead

00:22:02.510 --> 00:22:08.930
and reply to Kan's
wife-- I'd love to.

00:22:08.930 --> 00:22:12.230
The great thing about the
way we've integrated Android

00:22:12.230 --> 00:22:14.290
is we get the nice
in-line reply that you'd

00:22:14.290 --> 00:22:15.815
expect on your
tablets and phones,

00:22:15.815 --> 00:22:18.860
so I'll go ahead and
send that off now.

00:22:18.860 --> 00:22:19.360
Great.

00:22:19.360 --> 00:22:21.530
So let's go ahead and do that.

00:22:21.530 --> 00:22:25.240
I've already installed Photoshop
Mix from the Play Store,

00:22:25.240 --> 00:22:26.840
so we'll go ahead
and launch that now.

00:22:26.840 --> 00:22:29.830
So that's actually a
picture of Kan's kid,

00:22:29.830 --> 00:22:33.750
I think, feeding
a pen to Piglet.

00:22:33.750 --> 00:22:34.750
Odd.

00:22:34.750 --> 00:22:36.660
Anyway, I've been
told that it would

00:22:36.660 --> 00:22:40.210
be more appropriate to put
ice cream there instead.

00:22:40.210 --> 00:22:43.050
So we'll go ahead and try
to find some ice cream here.

00:22:43.050 --> 00:22:45.760
So luckily from
Adobe stock, they've

00:22:45.760 --> 00:22:47.740
got some great
photos of ice cream.

00:22:47.740 --> 00:22:50.197
It's actually very bizarre,
like half neapolitan ice

00:22:50.197 --> 00:22:51.280
cream with some pistachio.

00:22:54.320 --> 00:22:56.390
But that looks kind of
big, so why don't we

00:22:56.390 --> 00:22:58.854
go ahead-- we can
use the touchscreen

00:22:58.854 --> 00:22:59.770
just like we'd expect.

00:22:59.770 --> 00:23:03.910
We can go ahead and shrink
our ice cream cone down.

00:23:03.910 --> 00:23:07.557
That's a little bit better
than a pen, I suppose.

00:23:07.557 --> 00:23:09.640
One of the problems here,
though, is obviously now

00:23:09.640 --> 00:23:12.370
our cone is kind
of over her hand,

00:23:12.370 --> 00:23:14.650
so we'll go ahead
and cut out that.

00:23:14.650 --> 00:23:17.430
We can zoom in and zoom
in a little bit more.

00:23:17.430 --> 00:23:20.360
We can go ahead again,
use the touchscreen.

00:23:20.360 --> 00:23:21.860
That was a chunk
out we didn't want.

00:23:21.860 --> 00:23:26.790
We'll go ahead [INAUDIBLE] that.

00:23:26.790 --> 00:23:27.480
There we go.

00:23:30.630 --> 00:23:33.990
That Photoshopping live,
not my finest work.

00:23:40.370 --> 00:23:43.060
Probably come up in my
next performance review,

00:23:43.060 --> 00:23:45.004
but OK, let's go ahead
and save that anyway.

00:23:48.636 --> 00:23:49.970
All right, we're saving that.

00:23:49.970 --> 00:23:52.990
That looks great.

00:23:52.990 --> 00:23:56.240
So I've been told that he wants
a poster, so let's go ahead

00:23:56.240 --> 00:23:58.840
and open up Word for that.

00:23:58.840 --> 00:24:01.100
What's really nice about
this is I can now just go--

00:24:01.100 --> 00:24:04.860
and I've got regular Word
here, throw in some photos

00:24:04.860 --> 00:24:06.650
for Leanne's birthday party.

00:24:06.650 --> 00:24:07.980
There we go.

00:24:07.980 --> 00:24:10.570
That looks pretty good.

00:24:10.570 --> 00:24:14.102
So I want to now give
this back to Kan's wife.

00:24:14.102 --> 00:24:17.020
So let's go ahead and we
can click that we want

00:24:17.020 --> 00:24:20.180
to share this as an attachment.

00:24:20.180 --> 00:24:22.080
Go ahead, open up the Gmail.

00:24:22.080 --> 00:24:24.270
We hear that's a
pretty good product.

00:24:24.270 --> 00:24:26.213
And go ahead and
send this off to Nan.

00:24:29.810 --> 00:24:30.720
That looks great.

00:24:30.720 --> 00:24:33.681
Let's go ahead
and send that off.

00:24:33.681 --> 00:24:34.555
Oh, what do you know?

00:24:34.555 --> 00:24:38.610
Just coincidentally, someone is
attacking me on Clash of Clans.

00:24:38.610 --> 00:24:43.180
So again, with how we've
integrated the Android

00:24:43.180 --> 00:24:45.680
framework, chat has just worked.

00:24:45.680 --> 00:24:49.030
This is Shahid right here.

00:24:49.030 --> 00:24:53.800
We'll go ahead-- we better
go check out our village.

00:24:53.800 --> 00:24:55.730
So Clash of Clans.

00:24:55.730 --> 00:24:57.070
We go ahead and close Photoshop.

00:24:57.070 --> 00:24:58.195
We don't need that anymore.

00:25:01.700 --> 00:25:04.070
Go ahead, get Clash of
Clans rolling for us.

00:25:04.070 --> 00:25:06.570
Oh dear.

00:25:06.570 --> 00:25:09.231
You guys have never, ever
seen a demo not work on stage.

00:25:13.160 --> 00:25:18.400
We'll go ahead-- we actually
have a slight known bug here.

00:25:18.400 --> 00:25:23.484
Any case, though, we'll go
ahead and continue on from that.

00:25:23.484 --> 00:25:24.280
Apologies there.

00:25:24.280 --> 00:25:26.280
Another great game other
than Clash of Clans,

00:25:26.280 --> 00:25:29.940
which I also like a
lot, is Galaxy on Fire.

00:25:29.940 --> 00:25:34.577
Here we're able to get the
nice use of a desktop GPU.

00:25:34.577 --> 00:25:35.660
Everything's super smooth.

00:25:35.660 --> 00:25:38.020
I don't know if it looks
super nauseating to you

00:25:38.020 --> 00:25:41.930
all in the audience, but anyway,
very good performance here

00:25:41.930 --> 00:25:44.220
as well.

00:25:44.220 --> 00:25:47.980
With that, I can also do
in-app purchase, as well.

00:25:47.980 --> 00:25:51.756
So we can go direct, we
can go into buy an add-on.

00:25:51.756 --> 00:25:53.980
And go ahead and click Buy.

00:25:53.980 --> 00:25:57.006
And now this will be
available on my phone--

00:25:57.006 --> 00:26:03.420
payment successful, great--
as well as my tablet, as well.

00:26:03.420 --> 00:26:06.150
So again, this was just a
quick view of what we also

00:26:06.150 --> 00:26:07.330
showed this morning.

00:26:07.330 --> 00:26:10.390
We are, of course, very excited
to be working with all of you

00:26:10.390 --> 00:26:11.823
to bring your apps
to Chromebooks.

00:26:11.823 --> 00:26:12.781
So thank you very much.

00:26:21.176 --> 00:26:23.550
LUIS HECTOR CHAVEZ: All right,
that's it from both of us.

00:26:23.550 --> 00:26:24.860
Enjoy the rest of the show.

00:26:24.860 --> 00:26:27.110
If you have any questions,
ask them of the Spaces app,

00:26:27.110 --> 00:26:29.280
or we'll be hanging
around down the stage.

00:26:29.280 --> 00:26:29.780
Thank you.

00:26:29.780 --> 00:26:31.330
Bye.

