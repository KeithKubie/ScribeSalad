WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:03.070
Ã¯Â»Â¿This question asks you to implement a cache

00:00:03.070 --> 00:00:05.402
and to show you why we might need a cache;

00:00:05.402 --> 00:00:07.813
I am going to run the code without one

00:00:07.863 --> 00:00:10.475
but for 40 instead of 100.

00:00:10.475 --> 00:00:14.064
So letÃ¢Â€Â™s see how long it takes.

00:00:14.064 --> 00:00:19.799
So while thatÃ¢Â€Â™s running, weÃ¢Â€Â™ll look at the code to execute the cache.

00:00:19.799 --> 00:00:21.746
What the format of the cache will be,

00:00:21.746 --> 00:00:24.305
which is a dictionary is as its key values

00:00:24.305 --> 00:00:29.261
it will have the inputs and the value associated

00:00:29.261 --> 00:00:31.989
with that key will be the output.

00:00:31.989 --> 00:00:34.043
So it will be an input output pair,

00:00:34.043 --> 00:00:38.701
we donÃ¢Â€Â™t want to evaluate the code more than once for any given input,

00:00:38.701 --> 00:00:45.191
so what weÃ¢Â€Â™re going to do is check whether the input is in the cache or not.

00:00:45.191 --> 00:00:49.386
If it isnÃ¢Â€Â™t in the cache, weÃ¢Â€Â™ll add it to the cache.

00:00:49.386 --> 00:00:52.611
So weÃ¢Â€Â™re now ready to return it.

00:00:52.611 --> 00:00:57.100
So for the input, we return the value of the cache.

00:00:57.100 --> 00:01:00.502
If itÃ¢Â€Â™s not in there, we add it; if it is in there, we just return it,

00:01:00.502 --> 00:01:04.779
and letÃ¢Â€Â™s see if that runs. And it does fairly quickly.

00:01:05.429 --> 00:01:09.382
So now letÃ¢Â€Â™s go back to the un-cached version

00:01:09.382 --> 00:01:14.544
and see how that runs for just an input value of 40.

00:01:14.544 --> 00:01:17.856
And now we have a solution.

00:01:17.856 --> 00:01:24.229
The answer to the 40th Fibonacci number and thatÃ¢Â€Â™s what it calculates,

00:01:24.229 --> 00:01:25.001
cache fibo is actually Fibonacci numbers

00:01:25.001 --> 00:01:27.447
and youÃ¢Â€Â™ll learn more about those in unit six.

00:01:27.447 --> 00:01:30.420
First number is the answer and the second number is

00:01:30.420 --> 00:01:34.717
the amount of time it took in seconds to calculate that number.

00:01:34.717 --> 00:01:38.294
So thatÃ¢Â€Â™s without the cache. Now letÃ¢Â€Â™s have a look at the cache,

00:01:38.294 --> 00:01:42.001
at the same version with the cache and IÃ¢Â€Â™ll run that

00:01:42.001 --> 00:01:48.527
and you can see that itÃ¢Â€Â™s done in about point one milliseconds.

00:01:48.527 --> 00:01:52.527
So there is a huge difference there, two minutes or point one milliseconds.

