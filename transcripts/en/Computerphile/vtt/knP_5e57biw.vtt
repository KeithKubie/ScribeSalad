WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:01.700
So without pointers

00:00:01.700 --> 00:00:03.960
we would find it really difficult to build a general purpose CPU

00:00:03.980 --> 00:00:05.980
that can do anything

00:00:07.640 --> 00:00:08.640
rather me drawing it

00:00:08.640 --> 00:00:13.740
let me get out my book  of the original IBM PC's 8088

00:00:13.740 --> 00:00:15.600
and effectively when the mac boot up

00:00:15.620 --> 00:00:17.080
when the pc boot up

00:00:17.080 --> 00:00:18.780
they boot up like this

00:00:18.780 --> 00:00:20.520
now what we have inside the CPU

00:00:20.520 --> 00:00:25.320
well is a bit of it witch will do the arithmetic, do the logic, add numbers together

00:00:25.320 --> 00:00:28.860
do various Boolean algebra, will forget about them for now

00:00:28.860 --> 00:00:31.720
will talk about them some other time probably already talk about them

00:00:31.720 --> 00:00:36.040
the other thing you got are registers, so registers are literally

00:00:36.040 --> 00:00:38.840
a small where you can store a bit of information

00:00:38.840 --> 00:00:41.980
well some of them do store a bit but actually store few more bits

00:00:41.980 --> 00:00:43.980
and then you will get a Byte or maybe two Bytes worth

00:00:43.980 --> 00:00:47.020
so let's go in what the 8088 had

00:00:47.020 --> 00:00:50.480
and it can store generally in the register eater a Byte or two Bytes

00:00:50.480 --> 00:00:53.980
if you have a look on this book "THE 8088 Project Book"

00:00:53.980 --> 00:00:56.880
It's got a list in here of the various bits inside it

00:00:56.880 --> 00:00:59.540
so we have got the arithmetic logic unit

00:01:00.200 --> 00:01:03.000
some registers here, some more temporary registers

00:01:03.000 --> 00:01:05.000
and then these general one's here

00:01:05.000 --> 00:01:06.640
and a few more that we have got around

00:01:06.640 --> 00:01:09.300
so we have got some 8 bit and 16 bit ?
 combined

00:01:09.300 --> 00:01:11.700
to use eater way and then we have got the 16 bit

00:01:11.700 --> 00:01:13.860
pointers will come back to that

00:01:13.860 --> 00:01:16.980
so what all these registers do is allowing to store a 16 bit value

00:01:17.040 --> 00:01:18.280
or an 8 bit value

00:01:19.200 --> 00:01:22.640
so they are built into the cpu and the instruction in the cpu

00:01:22.640 --> 00:01:24.400
will let you set a value in them

00:01:24.400 --> 00:01:28.900
add a value to what is inside or read a value from one of them

00:01:28.900 --> 00:01:30.440
that's fine

00:01:30.440 --> 00:01:33.180
you have got one,two,three,four

00:01:34.000 --> 00:01:35.180
16 bit or 8

00:01:36.260 --> 00:01:37.180
8 bit values

00:01:37.180 --> 00:01:38.620
that is not much data

00:01:39.340 --> 00:01:40.960
and you have got the problem

00:01:40.960 --> 00:01:43.180
where do you get the program from

00:01:43.180 --> 00:01:45.180
how to you get more data out of your memory

00:01:45.180 --> 00:01:47.180
to a? it, well the way you do that

00:01:47.180 --> 00:01:49.180
is if you look you have other registers

00:01:49.180 --> 00:01:52.380
witch are called pointer and index registers

00:01:52.380 --> 00:01:55.500
and this why you need pointers or you cant build a computer

00:01:55.500 --> 00:01:57.500
because what these are used for

00:01:57.500 --> 00:02:04.140
is these say, well ok I dont have this value here but I am gonna store here where it is in memory

00:02:04.140 --> 00:02:06.980
so I am gonna store for example

00:02:06.980 --> 00:02:12.520
a stack pointer, not the stack but I am gonna store a value that points where the stack is in memory

00:02:12.520 --> 00:02:15.100
now , really easy way to understand how pointers work

00:02:16.540 --> 00:02:18.180
think it like the index of the book

00:02:18.180 --> 00:02:20.540
so if I want to know about stack pointer

00:02:20.880 --> 00:02:22.880
I will go to the index, if I can find the index

00:02:24.500 --> 00:02:26.500
and somewhere it says stack pointer

00:02:27.140 --> 00:02:30.260
here we are, stack pointer, see page 9-10

00:02:30.780 --> 00:02:34.580
So if i want to find out something I do not go to page 9-10 where it is

00:02:34.580 --> 00:02:36.580
I go to the index and it tell's me

00:02:36.580 --> 00:02:38.860
where it is and then go page 9-10

00:02:38.860 --> 00:02:40.860
pointers work exactly like that

00:02:40.860 --> 00:02:42.560
they tell you where to find the information

00:02:42.560 --> 00:02:44.560
just like and index in a book, simple

00:02:45.120 --> 00:02:47.820
Right, now why do we need them to make the computer work

00:02:47.820 --> 00:02:48.560
there is two reasons why

00:02:48.560 --> 00:02:50.560
firstly how do we execute code

00:02:51.480 --> 00:02:53.480
the code, the program, the instruction that it is going to execute

00:02:53.480 --> 00:02:56.760
stored in memory and you need to know where that is

00:02:57.120 --> 00:02:59.120
how the CPU does that

00:02:59.120 --> 00:03:01.120
go back to are thing

00:03:01.120 --> 00:03:04.820
and if we look carefully, we find among these registers we talked about

00:03:04.820 --> 00:03:06.820
16 bit points to registers

00:03:06.820 --> 00:03:11.000
look over here "16 bit segment registers and the instruction pointer"

00:03:11.000 --> 00:03:13.000
an other pointer, a special register

00:03:13.000 --> 00:03:18.860
and all this is doing is storing the value of where in memory to find the instruction you can execute

00:03:18.880 --> 00:03:22.000
so when the CPU wants to execute an instruction

00:03:22.000 --> 00:03:23.440
witch is what it does all the time

00:03:23.440 --> 00:03:25.440
it goes to the instruction pointer

00:03:25.440 --> 00:03:28.480
and it has got  the address of where that instruction is

00:03:28.480 --> 00:03:30.480
so it will look in the instruction pointer

00:03:30.480 --> 00:03:33.340
and it will contain say : FFF ,0 in HEX

00:03:33.340 --> 00:03:37.440
That is the initial point where a PC will start executing code when you witch it on

00:03:37.680 --> 00:03:39.680
So it goes to that address

00:03:39.680 --> 00:03:41.680
looks it up in memory

00:03:41.680 --> 00:03:44.020
and get the value that is in memory and reads it into

00:03:44.020 --> 00:03:46.020
the CPU where is can start processing it

00:03:46.020 --> 00:03:49.160
and it will get that instruction, execute it whatever it is

00:03:49.360 --> 00:03:53.740
and then it will increment the instruction pointer by how over big that instruction was

00:03:54.560 --> 00:03:58.700
8088 instruction get very in size every one bye, two bytes

00:03:58.740 --> 00:04:04.800
these days it can go up to 16 bytes on x86 chip

00:04:04.800 --> 00:04:09.400
it will increase the instruction pointer to point to the next instruction and does the same things

00:04:09.420 --> 00:04:13.100
it looks up where the instruction is in memory, fetch is it, and so one, and so one

00:04:13.100 --> 00:04:15.100
so if we do not have pointers

00:04:15.100 --> 00:04:17.500
we can't even execute code

00:04:17.500 --> 00:04:22.320
we need that instruction pointer or what it is called on other processors program counter, same thing

00:04:22.320 --> 00:04:24.320
just clear where on the x86

00:04:24.320 --> 00:04:28.380
this instruction pointer we need that to know where to go to get the instruction

00:04:28.380 --> 00:04:30.980
so without pointers you can't make a CPU work

00:04:30.980 --> 00:04:32.840
or get values from memory at least

00:04:32.840 --> 00:04:34.840
that is fine for executing code

00:04:34.840 --> 00:04:36.840
but this thing is execute on data

00:04:36.840 --> 00:04:38.840
how do we get the data in, the same thing

00:04:39.580 --> 00:04:45.600
we have pointers that contains the address or registers that contain the address of where data is in memory

00:04:46.320 --> 00:04:49.120
So every time you access a variable in C

00:04:50.080 --> 00:04:53.360
the assembly that is generated is almost certainly getting to re getting

00:04:53.360 --> 00:04:57.200
that ? from memory putting it into a register in the CPU

00:04:57.200 --> 00:05:00.400
and that will be done with having a pointer value where this is in memory

00:05:00.400 --> 00:05:02.400
going and fetching it and then using that

00:05:02.400 --> 00:05:04.400
in the instruction that is being executed where ever that might be

00:05:04.400 --> 00:05:08.720
to add say : on to an other register or where the CPU needs doing

00:05:08.720 --> 00:05:14.640
so, again without pointers you can not get data  from memory you can not store data back into memory

00:05:14.640 --> 00:05:16.640
so you can not build a computer !

00:05:16.640 --> 00:05:18.620
without computers you can forget your

00:05:18.620 --> 00:05:21.440
functional program you can forget your hash tables

00:05:21.440 --> 00:05:24.840
your link list anything, you cannot build a computer without pointers

