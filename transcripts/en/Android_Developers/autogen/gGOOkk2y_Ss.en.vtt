WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.130 align:start position:0%
 
[Music]

00:00:06.130 --> 00:00:06.140 align:start position:0%
[Music]
 

00:00:06.140 --> 00:00:08.960 align:start position:0%
[Music]
good<00:00:07.140><c> afternoon</c><00:00:07.379><c> I'm</c><00:00:07.830><c> Jeffrey</c><00:00:08.220><c> phango</c><00:00:08.519><c> I'm</c><00:00:08.880><c> a</c>

00:00:08.960 --> 00:00:08.970 align:start position:0%
good afternoon I'm Jeffrey phango I'm a
 

00:00:08.970 --> 00:00:10.490 align:start position:0%
good afternoon I'm Jeffrey phango I'm a
technique<00:00:09.420><c> manager</c><00:00:09.780><c> on</c><00:00:09.990><c> the</c><00:00:10.110><c> Android</c><00:00:10.380><c> studio</c>

00:00:10.490 --> 00:00:10.500 align:start position:0%
technique manager on the Android studio
 

00:00:10.500 --> 00:00:12.799 align:start position:0%
technique manager on the Android studio
team<00:00:10.860><c> where</c><00:00:11.519><c> I'm</c><00:00:11.610><c> in</c><00:00:11.700><c> charge</c><00:00:12.000><c> of</c><00:00:12.210><c> the</c><00:00:12.330><c> D</c><00:00:12.420><c> 8</c><00:00:12.540><c> r8</c>

00:00:12.799 --> 00:00:12.809 align:start position:0%
team where I'm in charge of the D 8 r8
 

00:00:12.809 --> 00:00:16.460 align:start position:0%
team where I'm in charge of the D 8 r8
compiler<00:00:13.320><c> project</c><00:00:14.420><c> so</c><00:00:15.420><c> last</c><00:00:15.719><c> year</c><00:00:16.049><c> a</c><00:00:16.260><c> lot</c>

00:00:16.460 --> 00:00:16.470 align:start position:0%
compiler project so last year a lot
 

00:00:16.470 --> 00:00:19.400 align:start position:0%
compiler project so last year a lot
happens<00:00:16.830><c> in</c><00:00:17.039><c> compiler</c><00:00:17.490><c> space</c><00:00:18.140><c> we</c><00:00:19.140><c> added</c>

00:00:19.400 --> 00:00:19.410 align:start position:0%
happens in compiler space we added
 

00:00:19.410 --> 00:00:21.080 align:start position:0%
happens in compiler space we added
incremental<00:00:19.890><c> dexing</c><00:00:20.250><c> which</c><00:00:20.580><c> makes</c><00:00:20.939><c> your</c>

00:00:21.080 --> 00:00:21.090 align:start position:0%
incremental dexing which makes your
 

00:00:21.090 --> 00:00:23.660 align:start position:0%
incremental dexing which makes your
debugger<00:00:21.359><c> built</c><00:00:21.449><c> faster</c><00:00:22.189><c> we</c><00:00:23.189><c> added</c><00:00:23.430><c> these</c>

00:00:23.660 --> 00:00:23.670 align:start position:0%
debugger built faster we added these
 

00:00:23.670 --> 00:00:25.340 align:start position:0%
debugger built faster we added these
sugaring<00:00:23.939><c> of</c><00:00:24.090><c> Java</c><00:00:24.300><c> 8</c><00:00:24.480><c> language</c><00:00:24.810><c> features</c><00:00:25.140><c> so</c>

00:00:25.340 --> 00:00:25.350 align:start position:0%
sugaring of Java 8 language features so
 

00:00:25.350 --> 00:00:27.439 align:start position:0%
sugaring of Java 8 language features so
you<00:00:25.410><c> can</c><00:00:25.680><c> now</c><00:00:25.800><c> use</c><00:00:25.980><c> Java</c><00:00:26.490><c> 8</c><00:00:26.730><c> features</c><00:00:27.119><c> like</c>

00:00:27.439 --> 00:00:27.449 align:start position:0%
you can now use Java 8 features like
 

00:00:27.449 --> 00:00:29.650 align:start position:0%
you can now use Java 8 features like
lambdas<00:00:27.900><c> in</c><00:00:28.590><c> all</c><00:00:28.769><c> the</c><00:00:28.859><c> versions</c><00:00:28.980><c> of</c><00:00:29.160><c> Android</c>

00:00:29.650 --> 00:00:29.660 align:start position:0%
lambdas in all the versions of Android
 

00:00:29.660 --> 00:00:32.900 align:start position:0%
lambdas in all the versions of Android
we<00:00:30.660><c> added</c><00:00:30.810><c> a</c><00:00:31.109><c> new</c><00:00:31.289><c> deck</c><00:00:31.650><c> sir</c><00:00:31.859><c> which</c><00:00:32.579><c> compiles</c>

00:00:32.900 --> 00:00:32.910 align:start position:0%
we added a new deck sir which compiles
 

00:00:32.910 --> 00:00:34.639 align:start position:0%
we added a new deck sir which compiles
your<00:00:33.120><c> Java</c><00:00:33.390><c> bytecode</c><00:00:33.630><c> to</c><00:00:33.960><c> Delphic</c><00:00:34.260><c> byte</c><00:00:34.410><c> code</c>

00:00:34.639 --> 00:00:34.649 align:start position:0%
your Java bytecode to Delphic byte code
 

00:00:34.649 --> 00:00:38.090 align:start position:0%
your Java bytecode to Delphic byte code
that<00:00:34.829><c> runs</c><00:00:34.950><c> from</c><00:00:35.130><c> the</c><00:00:35.219><c> art</c><00:00:36.210><c> runtime</c><00:00:36.690><c> we</c><00:00:37.680><c> added</c>

00:00:38.090 --> 00:00:38.100 align:start position:0%
that runs from the art runtime we added
 

00:00:38.100 --> 00:00:41.750 align:start position:0%
that runs from the art runtime we added
a<00:00:38.219><c> new</c><00:00:38.250><c> shrink</c><00:00:39.149><c> and</c><00:00:39.300><c> optimizer</c><00:00:39.690><c> called</c><00:00:39.899><c> r8</c><00:00:40.760><c> and</c>

00:00:41.750 --> 00:00:41.760 align:start position:0%
a new shrink and optimizer called r8 and
 

00:00:41.760 --> 00:00:43.549 align:start position:0%
a new shrink and optimizer called r8 and
we<00:00:42.000><c> added</c><00:00:42.120><c> :</c><00:00:42.660><c> specific</c><00:00:43.020><c> optimizations</c>

00:00:43.549 --> 00:00:43.559 align:start position:0%
we added : specific optimizations
 

00:00:43.559 --> 00:00:46.670 align:start position:0%
we added : specific optimizations
Internet<00:00:43.920><c> as</c><00:00:44.010><c> well</c><00:00:44.190><c> and</c><00:00:44.489><c> then</c><00:00:45.300><c> today</c><00:00:45.780><c> we</c><00:00:46.559><c> also</c>

00:00:46.670 --> 00:00:46.680 align:start position:0%
Internet as well and then today we also
 

00:00:46.680 --> 00:00:48.319 align:start position:0%
Internet as well and then today we also
have<00:00:46.920><c> the</c><00:00:47.039><c> Android</c><00:00:47.309><c> app</c><00:00:47.460><c> bundle</c><00:00:47.640><c> and</c><00:00:48.000><c> so</c><00:00:48.300><c> I</c>

00:00:48.319 --> 00:00:48.329 align:start position:0%
have the Android app bundle and so I
 

00:00:48.329 --> 00:00:50.750 align:start position:0%
have the Android app bundle and so I
want<00:00:48.719><c> to</c><00:00:48.809><c> talk</c><00:00:49.230><c> to</c><00:00:49.379><c> you</c><00:00:49.500><c> about</c><00:00:50.100><c> all</c><00:00:50.430><c> of</c><00:00:50.550><c> these</c>

00:00:50.750 --> 00:00:50.760 align:start position:0%
want to talk to you about all of these
 

00:00:50.760 --> 00:00:53.990 align:start position:0%
want to talk to you about all of these
show<00:00:51.270><c> how</c><00:00:51.660><c> it</c><00:00:51.840><c> works</c><00:00:52.079><c> inside</c><00:00:52.379><c> Gradle</c><00:00:52.920><c> and</c><00:00:53.160><c> give</c>

00:00:53.990 --> 00:00:54.000 align:start position:0%
show how it works inside Gradle and give
 

00:00:54.000 --> 00:00:55.520 align:start position:0%
show how it works inside Gradle and give
you<00:00:54.090><c> some</c><00:00:54.270><c> tips</c><00:00:54.570><c> of</c><00:00:54.840><c> things</c><00:00:55.050><c> you</c><00:00:55.260><c> need</c><00:00:55.410><c> to</c><00:00:55.440><c> know</c>

00:00:55.520 --> 00:00:55.530 align:start position:0%
you some tips of things you need to know
 

00:00:55.530 --> 00:00:59.540 align:start position:0%
you some tips of things you need to know
when<00:00:55.829><c> you</c><00:00:55.920><c> start</c><00:00:56.190><c> using</c><00:00:56.340><c> these</c><00:00:56.579><c> new</c><00:00:56.760><c> tools</c><00:00:58.550><c> so</c>

00:00:59.540 --> 00:00:59.550 align:start position:0%
when you start using these new tools so
 

00:00:59.550 --> 00:01:01.250 align:start position:0%
when you start using these new tools so
let's<00:00:59.789><c> first</c><00:00:59.969><c> start</c><00:01:00.090><c> looking</c><00:01:00.480><c> at</c><00:01:00.600><c> incremental</c>

00:01:01.250 --> 00:01:01.260 align:start position:0%
let's first start looking at incremental
 

00:01:01.260 --> 00:01:06.080 align:start position:0%
let's first start looking at incremental
dexing<00:01:02.149><c> so</c><00:01:03.799><c> here</c><00:01:04.799><c> you</c><00:01:05.159><c> have</c><00:01:05.280><c> a</c><00:01:05.309><c> very</c><00:01:05.610><c> very</c>

00:01:06.080 --> 00:01:06.090 align:start position:0%
dexing so here you have a very very
 

00:01:06.090 --> 00:01:08.120 align:start position:0%
dexing so here you have a very very
simplified<00:01:06.540><c> version</c><00:01:07.229><c> of</c><00:01:07.350><c> what</c><00:01:07.409><c> happens</c><00:01:07.860><c> in</c>

00:01:08.120 --> 00:01:08.130 align:start position:0%
simplified version of what happens in
 

00:01:08.130 --> 00:01:11.990 align:start position:0%
simplified version of what happens in
Gradle<00:01:08.880><c> when</c><00:01:09.720><c> the</c><00:01:09.869><c> compiler</c><00:01:10.140><c> runs</c><00:01:10.520><c> so</c><00:01:11.520><c> first</c>

00:01:11.990 --> 00:01:12.000 align:start position:0%
Gradle when the compiler runs so first
 

00:01:12.000 --> 00:01:14.690 align:start position:0%
Gradle when the compiler runs so first
we<00:01:12.270><c> run</c><00:01:12.450><c> either</c><00:01:12.840><c> Java</c><00:01:13.229><c> C</c><00:01:13.500><c> or</c><00:01:13.680><c> Kotlin</c><00:01:14.010><c> C</c><00:01:14.220><c> to</c><00:01:14.520><c> take</c>

00:01:14.690 --> 00:01:14.700 align:start position:0%
we run either Java C or Kotlin C to take
 

00:01:14.700 --> 00:01:16.520 align:start position:0%
we run either Java C or Kotlin C to take
your<00:01:14.880><c> Java</c><00:01:15.150><c> or</c><00:01:15.450><c> Copeland</c><00:01:15.750><c> source</c><00:01:15.960><c> code</c><00:01:16.229><c> and</c>

00:01:16.520 --> 00:01:16.530 align:start position:0%
your Java or Copeland source code and
 

00:01:16.530 --> 00:01:19.820 align:start position:0%
your Java or Copeland source code and
generate<00:01:17.040><c> Java</c><00:01:17.880><c> bytecode</c><00:01:18.180><c> and</c><00:01:18.720><c> then</c><00:01:19.500><c> we</c><00:01:19.650><c> run</c>

00:01:19.820 --> 00:01:19.830 align:start position:0%
generate Java bytecode and then we run
 

00:01:19.830 --> 00:01:22.910 align:start position:0%
generate Java bytecode and then we run
DX<00:01:20.600><c> that</c><00:01:21.600><c> takes</c><00:01:21.810><c> the</c><00:01:21.930><c> Java</c><00:01:22.140><c> bytecode</c><00:01:22.409><c> and</c>

00:01:22.910 --> 00:01:22.920 align:start position:0%
DX that takes the Java bytecode and
 

00:01:22.920 --> 00:01:27.260 align:start position:0%
DX that takes the Java bytecode and
produces<00:01:23.490><c> Delphic</c><00:01:23.880><c> bytecode</c><00:01:25.159><c> now</c><00:01:26.159><c> nice</c><00:01:27.000><c> thing</c>

00:01:27.260 --> 00:01:27.270 align:start position:0%
produces Delphic bytecode now nice thing
 

00:01:27.270 --> 00:01:29.660 align:start position:0%
produces Delphic bytecode now nice thing
that<00:01:27.540><c> in</c><00:01:27.720><c> Gradle</c><00:01:28.140><c> because</c><00:01:28.680><c> of</c><00:01:28.890><c> Gradle</c><00:01:29.490><c> and</c>

00:01:29.660 --> 00:01:29.670 align:start position:0%
that in Gradle because of Gradle and
 

00:01:29.670 --> 00:01:32.600 align:start position:0%
that in Gradle because of Gradle and
JetBrains<00:01:30.119><c> work</c><00:01:30.360><c> Java</c><00:01:31.229><c> C</c><00:01:31.500><c> and</c><00:01:31.740><c> Colton</c><00:01:32.100><c> see</c><00:01:32.310><c> are</c>

00:01:32.600 --> 00:01:32.610 align:start position:0%
JetBrains work Java C and Colton see are
 

00:01:32.610 --> 00:01:35.179 align:start position:0%
JetBrains work Java C and Colton see are
actually<00:01:32.810><c> incremental</c><00:01:33.810><c> and</c><00:01:34.590><c> that</c><00:01:34.740><c> means</c><00:01:34.920><c> that</c>

00:01:35.179 --> 00:01:35.189 align:start position:0%
actually incremental and that means that
 

00:01:35.189 --> 00:01:37.880 align:start position:0%
actually incremental and that means that
if<00:01:35.280><c> you</c><00:01:35.430><c> change</c><00:01:35.729><c> one</c><00:01:36.119><c> source</c><00:01:36.420><c> file</c><00:01:36.720><c> it</c><00:01:37.710><c> only</c>

00:01:37.880 --> 00:01:37.890 align:start position:0%
if you change one source file it only
 

00:01:37.890 --> 00:01:39.410 align:start position:0%
if you change one source file it only
compiles<00:01:38.369><c> that</c><00:01:38.490><c> one</c><00:01:38.640><c> source</c><00:01:38.939><c> file</c><00:01:39.180><c> and</c>

00:01:39.410 --> 00:01:39.420 align:start position:0%
compiles that one source file and
 

00:01:39.420 --> 00:01:42.109 align:start position:0%
compiles that one source file and
potentially<00:01:40.110><c> any</c><00:01:40.470><c> sources</c><00:01:41.310><c> that</c><00:01:41.520><c> have</c>

00:01:42.109 --> 00:01:42.119 align:start position:0%
potentially any sources that have
 

00:01:42.119 --> 00:01:43.810 align:start position:0%
potentially any sources that have
different<00:01:42.570><c> semantics</c><00:01:43.020><c> based</c><00:01:43.229><c> on</c><00:01:43.350><c> that</c><00:01:43.470><c> change</c>

00:01:43.810 --> 00:01:43.820 align:start position:0%
different semantics based on that change
 

00:01:43.820 --> 00:01:47.120 align:start position:0%
different semantics based on that change
now<00:01:44.820><c> unfortunately</c><00:01:45.119><c> in</c><00:01:46.049><c> Android</c><00:01:46.439><c> studio</c><00:01:46.470><c> and</c>

00:01:47.120 --> 00:01:47.130 align:start position:0%
now unfortunately in Android studio and
 

00:01:47.130 --> 00:01:51.319 align:start position:0%
now unfortunately in Android studio and
Gradle<00:01:47.520><c> before</c><00:01:48.270><c> 3.0</c><00:01:49.250><c> DX</c><00:01:50.250><c> didn't</c><00:01:51.090><c> do</c><00:01:51.180><c> any</c>

00:01:51.319 --> 00:01:51.329 align:start position:0%
Gradle before 3.0 DX didn't do any
 

00:01:51.329 --> 00:01:53.330 align:start position:0%
Gradle before 3.0 DX didn't do any
incremental<00:01:51.899><c> work</c><00:01:52.049><c> so</c><00:01:52.380><c> it</c><00:01:52.560><c> still</c><00:01:52.979><c> took</c><00:01:53.130><c> all</c>

00:01:53.330 --> 00:01:53.340 align:start position:0%
incremental work so it still took all
 

00:01:53.340 --> 00:01:56.450 align:start position:0%
incremental work so it still took all
your<00:01:53.490><c> Java</c><00:01:53.790><c> class</c><00:01:54.180><c> files</c><00:01:54.509><c> and</c><00:01:55.250><c> compiled</c><00:01:56.250><c> each</c>

00:01:56.450 --> 00:01:56.460 align:start position:0%
your Java class files and compiled each
 

00:01:56.460 --> 00:01:58.639 align:start position:0%
your Java class files and compiled each
one<00:01:56.670><c> of</c><00:01:56.759><c> them</c><00:01:56.909><c> two</c><00:01:57.360><c> dalvik</c><00:01:57.780><c> bytecode</c><00:01:57.810><c> even</c><00:01:58.560><c> if</c>

00:01:58.639 --> 00:01:58.649 align:start position:0%
one of them two dalvik bytecode even if
 

00:01:58.649 --> 00:02:02.359 align:start position:0%
one of them two dalvik bytecode even if
those<00:01:58.890><c> class</c><00:01:59.130><c> files</c><00:01:59.430><c> hadn't</c><00:01:59.850><c> changed</c><00:02:01.159><c> so</c><00:02:02.159><c> in</c>

00:02:02.359 --> 00:02:02.369 align:start position:0%
those class files hadn't changed so in
 

00:02:02.369 --> 00:02:05.389 align:start position:0%
those class files hadn't changed so in
Android<00:02:02.700><c> studio</c><00:02:02.729><c> 3.0</c><00:02:03.570><c> and</c><00:02:03.689><c> above</c><00:02:04.070><c> we</c><00:02:05.070><c> actually</c>

00:02:05.389 --> 00:02:05.399 align:start position:0%
Android studio 3.0 and above we actually
 

00:02:05.399 --> 00:02:07.690 align:start position:0%
Android studio 3.0 and above we actually
changed<00:02:05.790><c> it</c><00:02:05.909><c> so</c><00:02:06.149><c> that</c><00:02:06.329><c> we</c><00:02:06.479><c> can</c><00:02:06.689><c> be</c><00:02:06.869><c> incremental</c>

00:02:07.690 --> 00:02:07.700 align:start position:0%
changed it so that we can be incremental
 

00:02:07.700 --> 00:02:12.020 align:start position:0%
changed it so that we can be incremental
so<00:02:08.700><c> we'd</c><00:02:08.879><c> split</c><00:02:09.390><c> DX</c><00:02:09.869><c> into</c><00:02:10.170><c> two</c><00:02:10.410><c> steps</c><00:02:10.619><c> one</c><00:02:11.520><c> that</c>

00:02:12.020 --> 00:02:12.030 align:start position:0%
so we'd split DX into two steps one that
 

00:02:12.030 --> 00:02:12.309 align:start position:0%
so we'd split DX into two steps one that
take

00:02:12.309 --> 00:02:12.319 align:start position:0%
take
 

00:02:12.319 --> 00:02:14.709 align:start position:0%
take
the<00:02:12.980><c> Java</c><00:02:13.219><c> bytecode</c><00:02:13.459><c> and</c><00:02:13.819><c> compiles</c><00:02:14.299><c> it</c><00:02:14.420><c> to</c><00:02:14.540><c> the</c>

00:02:14.709 --> 00:02:14.719 align:start position:0%
the Java bytecode and compiles it to the
 

00:02:14.719 --> 00:02:16.000 align:start position:0%
the Java bytecode and compiles it to the
Delphic<00:02:15.019><c> bytecode</c><00:02:15.379><c> and</c><00:02:15.560><c> we</c><00:02:15.620><c> do</c><00:02:15.709><c> that</c><00:02:15.829><c> per</c>

00:02:16.000 --> 00:02:16.010 align:start position:0%
Delphic bytecode and we do that per
 

00:02:16.010 --> 00:02:18.309 align:start position:0%
Delphic bytecode and we do that per
class<00:02:16.340><c> file</c><00:02:16.609><c> so</c><00:02:17.359><c> we</c><00:02:17.480><c> actually</c><00:02:17.599><c> generate</c><00:02:17.900><c> now</c>

00:02:18.309 --> 00:02:18.319 align:start position:0%
class file so we actually generate now
 

00:02:18.319 --> 00:02:21.509 align:start position:0%
class file so we actually generate now
one<00:02:18.709><c> dex</c><00:02:19.099><c> file</c><00:02:19.310><c> per</c><00:02:19.519><c> class</c><00:02:19.760><c> file</c><00:02:20.090><c> and</c><00:02:20.359><c> that</c><00:02:20.389><c> way</c>

00:02:21.509 --> 00:02:21.519 align:start position:0%
one dex file per class file and that way
 

00:02:21.519 --> 00:02:25.089 align:start position:0%
one dex file per class file and that way
that<00:02:22.519><c> step</c><00:02:22.790><c> can</c><00:02:23.090><c> be</c><00:02:23.120><c> incremental</c><00:02:23.950><c> and</c><00:02:24.950><c> then</c>

00:02:25.089 --> 00:02:25.099 align:start position:0%
that step can be incremental and then
 

00:02:25.099 --> 00:02:28.390 align:start position:0%
that step can be incremental and then
after<00:02:25.760><c> that</c><00:02:25.909><c> we</c><00:02:26.420><c> take</c><00:02:26.719><c> all</c><00:02:27.109><c> those</c><00:02:27.349><c> codex</c><00:02:28.129><c> files</c>

00:02:28.390 --> 00:02:28.400 align:start position:0%
after that we take all those codex files
 

00:02:28.400 --> 00:02:30.940 align:start position:0%
after that we take all those codex files
and<00:02:28.760><c> merge</c><00:02:29.209><c> them</c><00:02:29.480><c> into</c><00:02:29.569><c> a</c><00:02:29.810><c> single</c><00:02:29.930><c> or</c><00:02:30.439><c> multiple</c>

00:02:30.940 --> 00:02:30.950 align:start position:0%
and merge them into a single or multiple
 

00:02:30.950 --> 00:02:33.940 align:start position:0%
and merge them into a single or multiple
Dex<00:02:31.340><c> files</c><00:02:31.549><c> if</c><00:02:31.730><c> needed</c><00:02:32.379><c> and</c><00:02:33.379><c> the</c><00:02:33.560><c> reason</c><00:02:33.829><c> this</c>

00:02:33.940 --> 00:02:33.950 align:start position:0%
Dex files if needed and the reason this
 

00:02:33.950 --> 00:02:36.940 align:start position:0%
Dex files if needed and the reason this
works<00:02:34.250><c> is</c><00:02:34.579><c> that</c><00:02:34.790><c> most</c><00:02:35.420><c> of</c><00:02:35.659><c> the</c><00:02:35.989><c> time</c><00:02:36.530><c> spent</c>

00:02:36.940 --> 00:02:36.950 align:start position:0%
works is that most of the time spent
 

00:02:36.950 --> 00:02:39.069 align:start position:0%
works is that most of the time spent
indexing<00:02:37.579><c> is</c><00:02:37.760><c> actually</c><00:02:38.569><c> in</c><00:02:38.719><c> the</c><00:02:38.810><c> compilation</c>

00:02:39.069 --> 00:02:39.079 align:start position:0%
indexing is actually in the compilation
 

00:02:39.079 --> 00:02:41.860 align:start position:0%
indexing is actually in the compilation
space<00:02:39.650><c> where</c><00:02:40.159><c> we</c><00:02:40.310><c> take</c><00:02:40.489><c> the</c><00:02:41.269><c> Java</c><00:02:41.540><c> bytecode</c>

00:02:41.860 --> 00:02:41.870 align:start position:0%
space where we take the Java bytecode
 

00:02:41.870 --> 00:02:44.679 align:start position:0%
space where we take the Java bytecode
which<00:02:42.469><c> is</c><00:02:42.769><c> a</c><00:02:42.799><c> stack</c><00:02:43.489><c> based</c><00:02:43.700><c> machine</c><00:02:44.120><c> to</c>

00:02:44.679 --> 00:02:44.689 align:start position:0%
which is a stack based machine to
 

00:02:44.689 --> 00:02:46.509 align:start position:0%
which is a stack based machine to
Delphic<00:02:45.079><c> bytecode</c><00:02:45.500><c> which</c><00:02:45.680><c> is</c><00:02:45.859><c> register</c><00:02:46.340><c> base</c>

00:02:46.509 --> 00:02:46.519 align:start position:0%
Delphic bytecode which is register base
 

00:02:46.519 --> 00:02:49.390 align:start position:0%
Delphic bytecode which is register base
and<00:02:46.819><c> then</c><00:02:47.540><c> the</c><00:02:47.569><c> Dex</c><00:02:47.840><c> merging</c><00:02:48.349><c> is</c><00:02:48.530><c> more</c><00:02:49.280><c> or</c><00:02:49.370><c> less</c>

00:02:49.390 --> 00:02:49.400 align:start position:0%
and then the Dex merging is more or less
 

00:02:49.400 --> 00:02:52.209 align:start position:0%
and then the Dex merging is more or less
like<00:02:49.909><c> a</c><00:02:49.939><c> fancy</c><00:02:50.449><c> concat</c><00:02:51.079><c> and</c><00:02:51.290><c> so</c><00:02:51.859><c> that's</c><00:02:52.040><c> a</c><00:02:52.099><c> lot</c>

00:02:52.209 --> 00:02:52.219 align:start position:0%
like a fancy concat and so that's a lot
 

00:02:52.219 --> 00:02:55.869 align:start position:0%
like a fancy concat and so that's a lot
faster<00:02:52.870><c> and</c><00:02:53.870><c> so</c><00:02:54.139><c> we</c><00:02:54.980><c> enabled</c><00:02:55.370><c> this</c><00:02:55.489><c> by</c><00:02:55.699><c> default</c>

00:02:55.869 --> 00:02:55.879 align:start position:0%
faster and so we enabled this by default
 

00:02:55.879 --> 00:02:58.929 align:start position:0%
faster and so we enabled this by default
in<00:02:56.389><c> your</c><00:02:56.870><c> debug</c><00:02:57.260><c> built</c><00:02:57.530><c> in</c><00:02:58.219><c> release</c><00:02:58.519><c> builds</c><00:02:58.819><c> we</c>

00:02:58.929 --> 00:02:58.939 align:start position:0%
in your debug built in release builds we
 

00:02:58.939 --> 00:03:02.110 align:start position:0%
in your debug built in release builds we
don't<00:02:59.120><c> do</c><00:02:59.269><c> that</c><00:02:59.449><c> and</c><00:03:00.409><c> so</c><00:03:00.680><c> you</c><00:03:01.549><c> pay</c><00:03:01.909><c> a</c><00:03:01.939><c> little</c>

00:03:02.110 --> 00:03:02.120 align:start position:0%
don't do that and so you pay a little
 

00:03:02.120 --> 00:03:04.089 align:start position:0%
don't do that and so you pay a little
bit<00:03:02.269><c> extra</c><00:03:02.389><c> for</c><00:03:03.019><c> the</c><00:03:03.290><c> initial</c><00:03:03.650><c> build</c><00:03:03.859><c> because</c>

00:03:04.089 --> 00:03:04.099 align:start position:0%
bit extra for the initial build because
 

00:03:04.099 --> 00:03:06.729 align:start position:0%
bit extra for the initial build because
we<00:03:04.370><c> need</c><00:03:04.519><c> to</c><00:03:04.609><c> generate</c><00:03:04.790><c> more</c><00:03:05.239><c> files</c><00:03:05.620><c> but</c><00:03:06.620><c> then</c>

00:03:06.729 --> 00:03:06.739 align:start position:0%
we need to generate more files but then
 

00:03:06.739 --> 00:03:08.229 align:start position:0%
we need to generate more files but then
each<00:03:06.919><c> incremental</c><00:03:07.639><c> build</c><00:03:07.879><c> that</c><00:03:08.060><c> you</c><00:03:08.150><c> do</c>

00:03:08.229 --> 00:03:08.239 align:start position:0%
each incremental build that you do
 

00:03:08.239 --> 00:03:10.559 align:start position:0%
each incremental build that you do
afterwards<00:03:08.590><c> it's</c><00:03:09.590><c> a</c><00:03:09.709><c> lot</c><00:03:09.829><c> faster</c><00:03:10.040><c> just</c>

00:03:10.559 --> 00:03:10.569 align:start position:0%
afterwards it's a lot faster just
 

00:03:10.569 --> 00:03:13.599 align:start position:0%
afterwards it's a lot faster just
because<00:03:11.569><c> we</c><00:03:11.659><c> have</c><00:03:11.750><c> to</c><00:03:11.810><c> do</c><00:03:11.900><c> less</c><00:03:12.079><c> work</c><00:03:12.609><c> there</c>

00:03:13.599 --> 00:03:13.609 align:start position:0%
because we have to do less work there
 

00:03:13.609 --> 00:03:14.740 align:start position:0%
because we have to do less work there
are<00:03:13.669><c> some</c><00:03:13.819><c> things</c><00:03:14.000><c> you</c><00:03:14.150><c> need</c><00:03:14.239><c> to</c><00:03:14.359><c> be</c><00:03:14.449><c> aware</c><00:03:14.689><c> of</c>

00:03:14.740 --> 00:03:14.750 align:start position:0%
are some things you need to be aware of
 

00:03:14.750 --> 00:03:19.179 align:start position:0%
are some things you need to be aware of
though<00:03:15.310><c> so</c><00:03:16.419><c> Java</c><00:03:17.419><c> C</c><00:03:17.689><c> and</c><00:03:17.840><c> cotton</c><00:03:18.169><c> C</c><00:03:18.349><c> are</c><00:03:18.680><c> only</c>

00:03:19.179 --> 00:03:19.189 align:start position:0%
though so Java C and cotton C are only
 

00:03:19.189 --> 00:03:21.249 align:start position:0%
though so Java C and cotton C are only
incremental<00:03:19.659><c> when</c><00:03:20.659><c> you</c><00:03:20.810><c> are</c><00:03:20.900><c> not</c><00:03:21.019><c> using</c>

00:03:21.249 --> 00:03:21.259 align:start position:0%
incremental when you are not using
 

00:03:21.259 --> 00:03:24.219 align:start position:0%
incremental when you are not using
annotation<00:03:21.859><c> processors</c><00:03:22.780><c> anytime</c><00:03:23.780><c> you</c><00:03:23.900><c> enable</c>

00:03:24.219 --> 00:03:24.229 align:start position:0%
annotation processors anytime you enable
 

00:03:24.229 --> 00:03:26.649 align:start position:0%
annotation processors anytime you enable
annotation<00:03:24.709><c> processors</c><00:03:25.159><c> these</c><00:03:25.699><c> annotation</c>

00:03:26.649 --> 00:03:26.659 align:start position:0%
annotation processors these annotation
 

00:03:26.659 --> 00:03:28.689 align:start position:0%
annotation processors these annotation
processors<00:03:27.019><c> can</c><00:03:27.349><c> reach</c><00:03:27.859><c> into</c><00:03:28.129><c> any</c><00:03:28.280><c> part</c><00:03:28.609><c> of</c>

00:03:28.689 --> 00:03:28.699 align:start position:0%
processors can reach into any part of
 

00:03:28.699 --> 00:03:31.839 align:start position:0%
processors can reach into any part of
your<00:03:28.849><c> source</c><00:03:29.150><c> and</c><00:03:29.419><c> so</c><00:03:30.079><c> we</c><00:03:30.650><c> cannot</c><00:03:30.949><c> make</c><00:03:31.819><c> that</c>

00:03:31.839 --> 00:03:31.849 align:start position:0%
your source and so we cannot make that
 

00:03:31.849 --> 00:03:34.659 align:start position:0%
your source and so we cannot make that
incremental<00:03:32.599><c> now</c><00:03:33.470><c> Gradle</c><00:03:34.009><c> is</c><00:03:34.099><c> working</c><00:03:34.430><c> hard</c>

00:03:34.659 --> 00:03:34.669 align:start position:0%
incremental now Gradle is working hard
 

00:03:34.669 --> 00:03:37.210 align:start position:0%
incremental now Gradle is working hard
to<00:03:34.970><c> make</c><00:03:35.540><c> that</c><00:03:35.689><c> support</c><00:03:36.139><c> it</c><00:03:36.259><c> and</c><00:03:36.560><c> so</c><00:03:36.829><c> in</c><00:03:36.949><c> Gradle</c>

00:03:37.210 --> 00:03:37.220 align:start position:0%
to make that support it and so in Gradle
 

00:03:37.220 --> 00:03:40.089 align:start position:0%
to make that support it and so in Gradle
4.7<00:03:38.060><c> they</c><00:03:38.810><c> introduced</c><00:03:39.290><c> a</c><00:03:39.680><c> preliminary</c>

00:03:40.089 --> 00:03:40.099 align:start position:0%
4.7 they introduced a preliminary
 

00:03:40.099 --> 00:03:42.249 align:start position:0%
4.7 they introduced a preliminary
support<00:03:40.790><c> for</c><00:03:40.970><c> incremental</c><00:03:41.750><c> annotation</c>

00:03:42.249 --> 00:03:42.259 align:start position:0%
support for incremental annotation
 

00:03:42.259 --> 00:03:46.210 align:start position:0%
support for incremental annotation
processors<00:03:43.239><c> this</c><00:03:44.239><c> requires</c><00:03:44.629><c> some</c><00:03:44.750><c> work</c><00:03:45.220><c> by</c>

00:03:46.210 --> 00:03:46.220 align:start position:0%
processors this requires some work by
 

00:03:46.220 --> 00:03:48.099 align:start position:0%
processors this requires some work by
the<00:03:46.280><c> annotation</c><00:03:46.909><c> processor</c><00:03:47.359><c> to</c><00:03:47.569><c> support</c><00:03:47.930><c> that</c>

00:03:48.099 --> 00:03:48.109 align:start position:0%
the annotation processor to support that
 

00:03:48.109 --> 00:03:49.839 align:start position:0%
the annotation processor to support that
because<00:03:48.229><c> annotation</c><00:03:49.009><c> processor</c><00:03:49.459><c> needs</c><00:03:49.729><c> to</c>

00:03:49.839 --> 00:03:49.849 align:start position:0%
because annotation processor needs to
 

00:03:49.849 --> 00:03:52.780 align:start position:0%
because annotation processor needs to
tell<00:03:50.030><c> Gradle</c><00:03:50.509><c> how</c><00:03:51.409><c> incremental</c><00:03:51.919><c> it</c><00:03:52.310><c> can</c><00:03:52.579><c> be</c>

00:03:52.780 --> 00:03:52.790 align:start position:0%
tell Gradle how incremental it can be
 

00:03:52.790 --> 00:03:55.749 align:start position:0%
tell Gradle how incremental it can be
and<00:03:53.060><c> so</c><00:03:53.930><c> what</c><00:03:54.709><c> I'd</c><00:03:54.799><c> like</c><00:03:54.919><c> to</c><00:03:54.979><c> ask</c><00:03:55.219><c> you</c><00:03:55.459><c> all</c><00:03:55.549><c> is</c>

00:03:55.749 --> 00:03:55.759 align:start position:0%
and so what I'd like to ask you all is
 

00:03:55.759 --> 00:03:57.399 align:start position:0%
and so what I'd like to ask you all is
if<00:03:55.939><c> you</c><00:03:56.090><c> are</c><00:03:56.329><c> an</c><00:03:56.509><c> annotation</c><00:03:56.840><c> processor</c>

00:03:57.399 --> 00:03:57.409 align:start position:0%
if you are an annotation processor
 

00:03:57.409 --> 00:03:59.920 align:start position:0%
if you are an annotation processor
writer<00:03:57.729><c> look</c><00:03:58.729><c> at</c><00:03:58.909><c> the</c><00:03:59.060><c> stuff</c><00:03:59.269><c> that</c><00:03:59.299><c> Gradle</c><00:03:59.840><c> is</c>

00:03:59.920 --> 00:03:59.930 align:start position:0%
writer look at the stuff that Gradle is
 

00:03:59.930 --> 00:04:01.749 align:start position:0%
writer look at the stuff that Gradle is
doing<00:04:00.259><c> and</c><00:04:00.439><c> see</c><00:04:00.889><c> if</c><00:04:01.009><c> you</c><00:04:01.129><c> can</c><00:04:01.280><c> support</c><00:04:01.669><c> that</c>

00:04:01.749 --> 00:04:01.759 align:start position:0%
doing and see if you can support that
 

00:04:01.759 --> 00:04:03.670 align:start position:0%
doing and see if you can support that
and<00:04:02.120><c> if</c><00:04:02.810><c> you're</c><00:04:02.989><c> using</c><00:04:03.169><c> annotation</c>

00:04:03.670 --> 00:04:03.680 align:start position:0%
and if you're using annotation
 

00:04:03.680 --> 00:04:05.679 align:start position:0%
and if you're using annotation
processors<00:04:04.129><c> please</c><00:04:04.549><c> read</c><00:04:04.819><c> out</c><00:04:04.939><c> to</c><00:04:05.389><c> the</c>

00:04:05.679 --> 00:04:05.689 align:start position:0%
processors please read out to the
 

00:04:05.689 --> 00:04:07.030 align:start position:0%
processors please read out to the
developers<00:04:06.109><c> of</c><00:04:06.259><c> those</c><00:04:06.469><c> that</c><00:04:06.739><c> they</c><00:04:06.829><c> should</c>

00:04:07.030 --> 00:04:07.040 align:start position:0%
developers of those that they should
 

00:04:07.040 --> 00:04:08.770 align:start position:0%
developers of those that they should
look<00:04:07.219><c> at</c><00:04:07.340><c> this</c><00:04:07.489><c> because</c><00:04:08.090><c> it</c><00:04:08.239><c> will</c><00:04:08.449><c> really</c>

00:04:08.770 --> 00:04:08.780 align:start position:0%
look at this because it will really
 

00:04:08.780 --> 00:04:14.439 align:start position:0%
look at this because it will really
really<00:04:09.259><c> speed</c><00:04:09.500><c> up</c><00:04:09.530><c> your</c><00:04:09.709><c> builds</c><00:04:12.430><c> ok</c><00:04:13.430><c> so</c><00:04:13.489><c> let's</c>

00:04:14.439 --> 00:04:14.449 align:start position:0%
really speed up your builds ok so let's
 

00:04:14.449 --> 00:04:18.819 align:start position:0%
really speed up your builds ok so let's
go<00:04:14.629><c> on</c><00:04:14.659><c> to</c><00:04:14.959><c> the</c><00:04:15.199><c> sugaring</c><00:04:17.289><c> what</c><00:04:18.289><c> is</c><00:04:18.409><c> the</c><00:04:18.590><c> sugar</c>

00:04:18.819 --> 00:04:18.829 align:start position:0%
go on to the sugaring what is the sugar
 

00:04:18.829 --> 00:04:19.750 align:start position:0%
go on to the sugaring what is the sugar
ring

00:04:19.750 --> 00:04:19.760 align:start position:0%
ring
 

00:04:19.760 --> 00:04:21.880 align:start position:0%
ring
we<00:04:20.210><c> hear</c><00:04:20.420><c> from</c><00:04:20.630><c> all</c><00:04:20.810><c> people</c><00:04:21.140><c> they</c><00:04:21.710><c> have</c><00:04:21.800><c> it</c>

00:04:21.880 --> 00:04:21.890 align:start position:0%
we hear from all people they have it
 

00:04:21.890 --> 00:04:23.860 align:start position:0%
we hear from all people they have it
many<00:04:22.070><c> times</c><00:04:22.400><c> that</c><00:04:22.670><c> they</c><00:04:22.850><c> want</c><00:04:23.000><c> to</c><00:04:23.090><c> use</c><00:04:23.210><c> modern</c>

00:04:23.860 --> 00:04:23.870 align:start position:0%
many times that they want to use modern
 

00:04:23.870 --> 00:04:26.820 align:start position:0%
many times that they want to use modern
Java<00:04:24.320><c> features</c><00:04:24.830><c> and</c><00:04:25.190><c> Java</c><00:04:25.700><c> aid</c><00:04:25.910><c> like</c><00:04:26.270><c> lambdas</c>

00:04:26.820 --> 00:04:26.830 align:start position:0%
Java features and Java aid like lambdas
 

00:04:26.830 --> 00:04:30.100 align:start position:0%
Java features and Java aid like lambdas
default<00:04:27.830><c> methods</c><00:04:28.250><c> in</c><00:04:28.490><c> interfaces</c><00:04:29.210><c> try</c><00:04:29.900><c> with</c>

00:04:30.100 --> 00:04:30.110 align:start position:0%
default methods in interfaces try with
 

00:04:30.110 --> 00:04:33.430 align:start position:0%
default methods in interfaces try with
resources<00:04:30.250><c> etc</c><00:04:31.750><c> unfortunately</c><00:04:32.750><c> a</c><00:04:33.170><c> lot</c><00:04:33.320><c> of</c>

00:04:33.430 --> 00:04:33.440 align:start position:0%
resources etc unfortunately a lot of
 

00:04:33.440 --> 00:04:35.800 align:start position:0%
resources etc unfortunately a lot of
these<00:04:33.530><c> features</c><00:04:33.970><c> require</c><00:04:34.970><c> a</c><00:04:35.000><c> new</c><00:04:35.300><c> bytecode</c>

00:04:35.800 --> 00:04:35.810 align:start position:0%
these features require a new bytecode
 

00:04:35.810 --> 00:04:38.740 align:start position:0%
these features require a new bytecode
and<00:04:36.050><c> language</c><00:04:36.500><c> API</c><00:04:36.860><c> to</c><00:04:37.190><c> support</c><00:04:37.580><c> them</c><00:04:37.760><c> and</c><00:04:38.090><c> of</c>

00:04:38.740 --> 00:04:38.750 align:start position:0%
and language API to support them and of
 

00:04:38.750 --> 00:04:40.990 align:start position:0%
and language API to support them and of
course<00:04:38.780><c> a</c><00:04:39.290><c> lot</c><00:04:39.560><c> of</c><00:04:39.590><c> Android</c><00:04:40.160><c> device</c><00:04:40.430><c> out</c><00:04:40.730><c> there</c>

00:04:40.990 --> 00:04:41.000 align:start position:0%
course a lot of Android device out there
 

00:04:41.000 --> 00:04:44.110 align:start position:0%
course a lot of Android device out there
run<00:04:41.840><c> all</c><00:04:41.990><c> the</c><00:04:42.140><c> versions</c><00:04:42.320><c> of</c><00:04:42.800><c> the</c><00:04:43.220><c> dalvik</c><00:04:43.670><c> VM</c>

00:04:44.110 --> 00:04:44.120 align:start position:0%
run all the versions of the dalvik VM
 

00:04:44.120 --> 00:04:47.680 align:start position:0%
run all the versions of the dalvik VM
that<00:04:44.690><c> doesn't</c><00:04:45.080><c> yet</c><00:04:45.260><c> support</c><00:04:45.620><c> these</c><00:04:46.210><c> and</c><00:04:47.210><c> but</c>

00:04:47.680 --> 00:04:47.690 align:start position:0%
that doesn't yet support these and but
 

00:04:47.690 --> 00:04:48.700 align:start position:0%
that doesn't yet support these and but
developers<00:04:48.050><c> really</c><00:04:48.290><c> want</c><00:04:48.440><c> to</c><00:04:48.500><c> use</c><00:04:48.590><c> these</c>

00:04:48.700 --> 00:04:48.710 align:start position:0%
developers really want to use these
 

00:04:48.710 --> 00:04:50.320 align:start position:0%
developers really want to use these
features<00:04:48.890><c> especially</c><00:04:49.340><c> as</c><00:04:49.700><c> you</c><00:04:49.850><c> start</c><00:04:49.880><c> using</c>

00:04:50.320 --> 00:04:50.330 align:start position:0%
features especially as you start using
 

00:04:50.330 --> 00:04:52.840 align:start position:0%
features especially as you start using
new<00:04:51.260><c> frameworks</c><00:04:51.770><c> like</c><00:04:52.010><c> reactive</c><00:04:52.460><c> extensions</c>

00:04:52.840 --> 00:04:52.850 align:start position:0%
new frameworks like reactive extensions
 

00:04:52.850 --> 00:04:54.850 align:start position:0%
new frameworks like reactive extensions
now<00:04:53.660><c> I'm</c><00:04:53.780><c> not</c><00:04:53.930><c> sure</c><00:04:53.960><c> exactly</c><00:04:54.380><c> what</c><00:04:54.710><c> these</c>

00:04:54.850 --> 00:04:54.860 align:start position:0%
now I'm not sure exactly what these
 

00:04:54.860 --> 00:04:56.110 align:start position:0%
now I'm not sure exactly what these
libraries<00:04:55.250><c> do</c><00:04:55.400><c> but</c><00:04:55.640><c> they</c><00:04:55.730><c> use</c><00:04:55.880><c> a</c><00:04:55.910><c> lot</c><00:04:56.090><c> of</c>

00:04:56.110 --> 00:04:56.120 align:start position:0%
libraries do but they use a lot of
 

00:04:56.120 --> 00:04:58.810 align:start position:0%
libraries do but they use a lot of
callbacks<00:04:56.650><c> and</c><00:04:57.650><c> would</c><00:04:57.980><c> be</c><00:04:58.100><c> much</c><00:04:58.310><c> nicer</c><00:04:58.340><c> if</c><00:04:58.790><c> you</c>

00:04:58.810 --> 00:04:58.820 align:start position:0%
callbacks and would be much nicer if you
 

00:04:58.820 --> 00:05:02.950 align:start position:0%
callbacks and would be much nicer if you
can<00:04:59.060><c> use</c><00:04:59.210><c> lambdas</c><00:04:59.660><c> there</c><00:05:00.310><c> and</c><00:05:01.310><c> so</c><00:05:01.880><c> what</c><00:05:02.630><c> we</c><00:05:02.810><c> do</c>

00:05:02.950 --> 00:05:02.960 align:start position:0%
can use lambdas there and so what we do
 

00:05:02.960 --> 00:05:05.440 align:start position:0%
can use lambdas there and so what we do
with<00:05:03.080><c> the</c><00:05:03.260><c> sugar</c><00:05:03.590><c> is</c><00:05:04.100><c> we</c><00:05:04.310><c> take</c><00:05:04.520><c> the</c><00:05:05.210><c> bytecode</c>

00:05:05.440 --> 00:05:05.450 align:start position:0%
with the sugar is we take the bytecode
 

00:05:05.450 --> 00:05:07.810 align:start position:0%
with the sugar is we take the bytecode
and<00:05:05.750><c> calls</c><00:05:06.560><c> that</c><00:05:06.770><c> are</c><00:05:06.860><c> generated</c><00:05:07.310><c> by</c><00:05:07.520><c> these</c>

00:05:07.810 --> 00:05:07.820 align:start position:0%
and calls that are generated by these
 

00:05:07.820 --> 00:05:10.750 align:start position:0%
and calls that are generated by these
new<00:05:08.000><c> features</c><00:05:08.330><c> in</c><00:05:08.540><c> the</c><00:05:08.600><c> Java</c><00:05:08.840><c> compiler</c><00:05:09.550><c> and</c><00:05:10.550><c> we</c>

00:05:10.750 --> 00:05:10.760 align:start position:0%
new features in the Java compiler and we
 

00:05:10.760 --> 00:05:12.130 align:start position:0%
new features in the Java compiler and we
convert<00:05:11.150><c> them</c><00:05:11.270><c> to</c><00:05:11.510><c> something</c><00:05:11.750><c> that</c><00:05:12.020><c> is</c>

00:05:12.130 --> 00:05:12.140 align:start position:0%
convert them to something that is
 

00:05:12.140 --> 00:05:14.500 align:start position:0%
convert them to something that is
supported<00:05:12.410><c> in</c><00:05:12.590><c> the</c><00:05:12.680><c> old</c><00:05:12.800><c> system</c><00:05:13.120><c> so</c><00:05:14.120><c> for</c>

00:05:14.500 --> 00:05:14.510 align:start position:0%
supported in the old system so for
 

00:05:14.510 --> 00:05:16.620 align:start position:0%
supported in the old system so for
instance<00:05:14.840><c> if</c><00:05:15.140><c> you</c><00:05:15.350><c> use</c><00:05:15.470><c> a</c><00:05:15.500><c> lambda</c><00:05:15.890><c> and</c><00:05:15.980><c> Java</c><00:05:16.220><c> 8</c>

00:05:16.620 --> 00:05:16.630 align:start position:0%
instance if you use a lambda and Java 8
 

00:05:16.630 --> 00:05:20.530 align:start position:0%
instance if you use a lambda and Java 8
we<00:05:17.630><c> can</c><00:05:17.870><c> take</c><00:05:18.140><c> that</c><00:05:18.350><c> and</c><00:05:18.700><c> replace</c><00:05:19.700><c> it</c><00:05:19.880><c> with</c><00:05:19.910><c> a</c>

00:05:20.530 --> 00:05:20.540 align:start position:0%
we can take that and replace it with a
 

00:05:20.540 --> 00:05:22.960 align:start position:0%
we can take that and replace it with a
class<00:05:21.050><c> as</c><00:05:21.350><c> if</c><00:05:21.500><c> you</c><00:05:21.620><c> her</c><00:05:21.770><c> to</c><00:05:21.980><c> handwrite</c><00:05:22.400><c> it</c><00:05:22.430><c> so</c>

00:05:22.960 --> 00:05:22.970 align:start position:0%
class as if you her to handwrite it so
 

00:05:22.970 --> 00:05:24.340 align:start position:0%
class as if you her to handwrite it so
that<00:05:23.150><c> you</c><00:05:23.270><c> don't</c><00:05:23.480><c> have</c><00:05:23.630><c> to</c><00:05:23.750><c> handwrite</c><00:05:24.050><c> it</c><00:05:24.170><c> and</c>

00:05:24.340 --> 00:05:24.350 align:start position:0%
that you don't have to handwrite it and
 

00:05:24.350 --> 00:05:27.340 align:start position:0%
that you don't have to handwrite it and
we<00:05:24.440><c> do</c><00:05:24.530><c> it</c><00:05:24.560><c> for</c><00:05:24.860><c> you</c>

00:05:27.340 --> 00:05:27.350 align:start position:0%
 
 

00:05:27.350 --> 00:05:28.870 align:start position:0%
 
so<00:05:27.770><c> let's</c><00:05:27.980><c> take</c><00:05:28.130><c> a</c><00:05:28.160><c> look</c><00:05:28.310><c> at</c><00:05:28.460><c> how</c><00:05:28.640><c> that</c><00:05:28.700><c> works</c>

00:05:28.870 --> 00:05:28.880 align:start position:0%
so let's take a look at how that works
 

00:05:28.880 --> 00:05:32.520 align:start position:0%
so let's take a look at how that works
in<00:05:29.270><c> practice</c><00:05:29.450><c> and</c><00:05:30.050><c> so</c><00:05:30.470><c> let's</c><00:05:30.620><c> switch</c><00:05:30.770><c> the</c><00:05:30.920><c> demo</c>

00:05:32.520 --> 00:05:32.530 align:start position:0%
in practice and so let's switch the demo
 

00:05:32.530 --> 00:05:34.810 align:start position:0%
in practice and so let's switch the demo
ok<00:05:33.530><c> so</c><00:05:33.590><c> here</c><00:05:33.950><c> I</c><00:05:33.980><c> have</c><00:05:34.190><c> an</c><00:05:34.310><c> Android</c><00:05:34.460><c> studio</c>

00:05:34.810 --> 00:05:34.820 align:start position:0%
ok so here I have an Android studio
 

00:05:34.820 --> 00:05:37.840 align:start position:0%
ok so here I have an Android studio
project<00:05:35.890><c> that</c><00:05:36.890><c> is</c><00:05:37.010><c> just</c><00:05:37.280><c> created</c><00:05:37.760><c> by</c>

00:05:37.840 --> 00:05:37.850 align:start position:0%
project that is just created by
 

00:05:37.850 --> 00:05:40.120 align:start position:0%
project that is just created by
following<00:05:38.240><c> the</c><00:05:38.600><c> wizards</c><00:05:38.930><c> and</c><00:05:39.590><c> selecting</c><00:05:40.070><c> a</c>

00:05:40.120 --> 00:05:40.130 align:start position:0%
following the wizards and selecting a
 

00:05:40.130 --> 00:05:44.760 align:start position:0%
following the wizards and selecting a
basic<00:05:40.460><c> activity</c><00:05:41.290><c> and</c><00:05:42.290><c> so</c><00:05:43.040><c> if</c><00:05:43.310><c> you</c><00:05:43.460><c> go</c><00:05:43.610><c> to</c><00:05:43.670><c> the</c>

00:05:44.760 --> 00:05:44.770 align:start position:0%
basic activity and so if you go to the
 

00:05:44.770 --> 00:05:48.220 align:start position:0%
basic activity and so if you go to the
module<00:05:45.770><c> in</c><00:05:46.280><c> the</c><00:05:46.520><c> module</c><00:05:46.610><c> settings</c><00:05:47.050><c> you</c><00:05:48.050><c> see</c>

00:05:48.220 --> 00:05:48.230 align:start position:0%
module in the module settings you see
 

00:05:48.230 --> 00:05:49.900 align:start position:0%
module in the module settings you see
that<00:05:48.350><c> I</c><00:05:48.380><c> have</c><00:05:48.500><c> set</c><00:05:48.740><c> the</c><00:05:48.890><c> source</c><00:05:49.100><c> language</c><00:05:49.550><c> to</c>

00:05:49.900 --> 00:05:49.910 align:start position:0%
that I have set the source language to
 

00:05:49.910 --> 00:05:54.190 align:start position:0%
that I have set the source language to
1.8<00:05:50.680><c> and</c><00:05:51.680><c> now</c><00:05:52.160><c> it</c><00:05:53.000><c> will</c><00:05:53.270><c> allow</c><00:05:53.720><c> me</c><00:05:53.900><c> to</c><00:05:53.930><c> write</c>

00:05:54.190 --> 00:05:54.200 align:start position:0%
1.8 and now it will allow me to write
 

00:05:54.200 --> 00:05:56.680 align:start position:0%
1.8 and now it will allow me to write
Java<00:05:54.770><c> 8</c><00:05:54.980><c> language</c><00:05:55.310><c> features</c><00:05:55.670><c> and</c><00:05:56.270><c> if</c><00:05:56.510><c> you</c><00:05:56.600><c> do</c>

00:05:56.680 --> 00:05:56.690 align:start position:0%
Java 8 language features and if you do
 

00:05:56.690 --> 00:05:58.720 align:start position:0%
Java 8 language features and if you do
this<00:05:56.810><c> Gradle</c><00:05:57.530><c> automatically</c><00:05:58.190><c> figures</c><00:05:58.610><c> out</c>

00:05:58.720 --> 00:05:58.730 align:start position:0%
this Gradle automatically figures out
 

00:05:58.730 --> 00:06:00.340 align:start position:0%
this Gradle automatically figures out
that<00:05:58.940><c> it</c><00:05:59.030><c> needs</c><00:05:59.240><c> to</c><00:05:59.450><c> run</c><00:05:59.600><c> this</c><00:05:59.750><c> sugar</c><00:06:00.020><c> for</c><00:06:00.260><c> you</c>

00:06:00.340 --> 00:06:00.350 align:start position:0%
that it needs to run this sugar for you
 

00:06:00.350 --> 00:06:03.520 align:start position:0%
that it needs to run this sugar for you
and<00:06:00.650><c> so</c><00:06:01.460><c> here</c><00:06:01.730><c> I</c><00:06:01.760><c> have</c><00:06:01.850><c> some</c><00:06:02.090><c> code</c><00:06:02.300><c> I</c><00:06:02.660><c> have</c><00:06:03.440><c> a</c>

00:06:03.520 --> 00:06:03.530 align:start position:0%
and so here I have some code I have a
 

00:06:03.530 --> 00:06:05.110 align:start position:0%
and so here I have some code I have a
floating<00:06:03.860><c> action</c><00:06:03.950><c> button</c><00:06:04.520><c> that</c><00:06:04.730><c> I</c><00:06:04.760><c> want</c><00:06:05.000><c> to</c>

00:06:05.110 --> 00:06:05.120 align:start position:0%
floating action button that I want to
 

00:06:05.120 --> 00:06:06.700 align:start position:0%
floating action button that I want to
hook<00:06:05.240><c> up</c><00:06:05.420><c> some</c><00:06:05.630><c> code</c><00:06:05.810><c> to</c><00:06:05.840><c> but</c><00:06:06.290><c> when</c><00:06:06.440><c> you</c><00:06:06.530><c> click</c>

00:06:06.700 --> 00:06:06.710 align:start position:0%
hook up some code to but when you click
 

00:06:06.710 --> 00:06:09.940 align:start position:0%
hook up some code to but when you click
it<00:06:06.890><c> and</c><00:06:07.670><c> now</c><00:06:08.030><c> because</c><00:06:08.360><c> I</c><00:06:08.450><c> use</c><00:06:08.630><c> Java</c><00:06:08.960><c> 8</c><00:06:09.230><c> I</c><00:06:09.590><c> don't</c>

00:06:09.940 --> 00:06:09.950 align:start position:0%
it and now because I use Java 8 I don't
 

00:06:09.950 --> 00:06:12.250 align:start position:0%
it and now because I use Java 8 I don't
have<00:06:10.100><c> to</c><00:06:10.280><c> write</c><00:06:10.490><c> new</c><00:06:10.940><c> onclicklistener</c><00:06:11.540><c> and</c>

00:06:12.250 --> 00:06:12.260 align:start position:0%
have to write new onclicklistener and
 

00:06:12.260 --> 00:06:14.800 align:start position:0%
have to write new onclicklistener and
implement<00:06:12.830><c> the</c><00:06:12.890><c> whole</c><00:06:13.040><c> interface</c><00:06:13.750><c> instead</c><00:06:14.750><c> I</c>

00:06:14.800 --> 00:06:14.810 align:start position:0%
implement the whole interface instead I
 

00:06:14.810 --> 00:06:17.860 align:start position:0%
implement the whole interface instead I
can<00:06:15.050><c> just</c><00:06:15.260><c> write</c><00:06:15.410><c> a</c><00:06:15.470><c> lambda</c><00:06:15.800><c> and</c><00:06:16.510><c> have</c><00:06:17.510><c> it</c><00:06:17.690><c> in</c>

00:06:17.860 --> 00:06:17.870 align:start position:0%
can just write a lambda and have it in
 

00:06:17.870 --> 00:06:22.030 align:start position:0%
can just write a lambda and have it in
be<00:06:18.080><c> invoked</c><00:06:18.970><c> so</c><00:06:19.970><c> if</c><00:06:20.150><c> I</c><00:06:20.300><c> go</c><00:06:21.260><c> and</c><00:06:21.560><c> look</c><00:06:21.620><c> at</c><00:06:21.890><c> the</c>

00:06:22.030 --> 00:06:22.040 align:start position:0%
be invoked so if I go and look at the
 

00:06:22.040 --> 00:06:26.249 align:start position:0%
be invoked so if I go and look at the
output<00:06:22.400><c> of</c><00:06:22.430><c> the</c><00:06:22.760><c> Java</c><00:06:22.970><c> C</c><00:06:23.300><c> compiler</c><00:06:23.740><c> there's</c><00:06:24.740><c> a</c>

00:06:26.249 --> 00:06:26.259 align:start position:0%
output of the Java C compiler there's a
 

00:06:26.259 --> 00:06:28.480 align:start position:0%
output of the Java C compiler there's a
mainactivity<00:06:27.259><c> look</c><00:06:27.409><c> glass</c><00:06:27.620><c> and</c><00:06:27.919><c> I</c><00:06:27.979><c> can</c><00:06:28.159><c> copy</c>

00:06:28.480 --> 00:06:28.490 align:start position:0%
mainactivity look glass and I can copy
 

00:06:28.490 --> 00:06:31.950 align:start position:0%
mainactivity look glass and I can copy
that<00:06:28.610><c> path</c><00:06:29.169><c> there</c><00:06:30.169><c> is</c><00:06:30.259><c> a</c><00:06:30.289><c> tool</c><00:06:30.590><c> in</c><00:06:30.830><c> a</c><00:06:30.919><c> Java</c><00:06:31.189><c> JDK</c>

00:06:31.950 --> 00:06:31.960 align:start position:0%
that path there is a tool in a Java JDK
 

00:06:31.960 --> 00:06:35.080 align:start position:0%
that path there is a tool in a Java JDK
called<00:06:32.960><c> Java</c><00:06:33.199><c> P</c><00:06:33.530><c> which</c><00:06:34.099><c> allows</c><00:06:34.430><c> you</c><00:06:34.639><c> to</c><00:06:34.669><c> take</c><00:06:35.060><c> a</c>

00:06:35.080 --> 00:06:35.090 align:start position:0%
called Java P which allows you to take a
 

00:06:35.090 --> 00:06:37.360 align:start position:0%
called Java P which allows you to take a
class<00:06:35.389><c> file</c><00:06:35.719><c> and</c><00:06:36.020><c> look</c><00:06:36.770><c> at</c><00:06:36.949><c> the</c><00:06:37.129><c> byte</c><00:06:37.340><c> code</c>

00:06:37.360 --> 00:06:37.370 align:start position:0%
class file and look at the byte code
 

00:06:37.370 --> 00:06:40.809 align:start position:0%
class file and look at the byte code
that's<00:06:37.909><c> in</c><00:06:38.060><c> there</c><00:06:38.210><c> and</c><00:06:38.360><c> so</c><00:06:38.569><c> I'll</c><00:06:39.259><c> run</c><00:06:39.590><c> that</c><00:06:39.819><c> and</c>

00:06:40.809 --> 00:06:40.819 align:start position:0%
that's in there and so I'll run that and
 

00:06:40.819 --> 00:06:42.100 align:start position:0%
that's in there and so I'll run that and
because<00:06:41.150><c> it</c><00:06:41.270><c> generates</c><00:06:41.629><c> a</c><00:06:41.689><c> lot</c><00:06:41.719><c> of</c><00:06:41.870><c> output</c>

00:06:42.100 --> 00:06:42.110 align:start position:0%
because it generates a lot of output
 

00:06:42.110 --> 00:06:44.260 align:start position:0%
because it generates a lot of output
I'll<00:06:42.349><c> pipe</c><00:06:42.710><c> it</c><00:06:42.889><c> to</c><00:06:43.009><c> a</c><00:06:43.039><c> file</c><00:06:43.340><c> and</c><00:06:43.789><c> then</c><00:06:44.060><c> I'm</c>

00:06:44.260 --> 00:06:44.270 align:start position:0%
I'll pipe it to a file and then I'm
 

00:06:44.270 --> 00:06:46.869 align:start position:0%
I'll pipe it to a file and then I'm
opening<00:06:44.900><c> it</c><00:06:44.990><c> in</c><00:06:45.139><c> my</c><00:06:45.229><c> favorite</c><00:06:45.740><c> IDE</c><00:06:46.219><c> Android</c>

00:06:46.869 --> 00:06:46.879 align:start position:0%
opening it in my favorite IDE Android
 

00:06:46.879 --> 00:06:50.559 align:start position:0%
opening it in my favorite IDE Android
studio<00:06:47.029><c> and</c><00:06:47.979><c> so</c><00:06:48.979><c> if</c><00:06:49.819><c> you</c><00:06:50.029><c> haven't</c><00:06:50.150><c> looked</c><00:06:50.300><c> at</c>

00:06:50.559 --> 00:06:50.569 align:start position:0%
studio and so if you haven't looked at
 

00:06:50.569 --> 00:06:53.200 align:start position:0%
studio and so if you haven't looked at
Java<00:06:51.080><c> bytecode</c><00:06:51.349><c> don't</c><00:06:52.249><c> be</c><00:06:52.370><c> afraid</c><00:06:52.729><c> it's</c><00:06:53.150><c> still</c>

00:06:53.200 --> 00:06:53.210 align:start position:0%
Java bytecode don't be afraid it's still
 

00:06:53.210 --> 00:06:55.629 align:start position:0%
Java bytecode don't be afraid it's still
pretty<00:06:53.509><c> high</c><00:06:53.599><c> level</c><00:06:53.979><c> it's</c><00:06:54.979><c> kind</c><00:06:55.159><c> of</c><00:06:55.219><c> readable</c>

00:06:55.629 --> 00:06:55.639 align:start position:0%
pretty high level it's kind of readable
 

00:06:55.639 --> 00:06:57.730 align:start position:0%
pretty high level it's kind of readable
the<00:06:56.210><c> only</c><00:06:56.419><c> thing</c><00:06:56.539><c> that's</c><00:06:56.719><c> not</c><00:06:56.810><c> there</c><00:06:57.139><c> is</c><00:06:57.379><c> for</c>

00:06:57.730 --> 00:06:57.740 align:start position:0%
the only thing that's not there is for
 

00:06:57.740 --> 00:07:00.249 align:start position:0%
the only thing that's not there is for
loops<00:06:57.979><c> if</c><00:06:58.279><c> statements</c><00:06:58.969><c> and</c><00:06:59.120><c> so</c><00:06:59.240><c> on</c><00:06:59.330><c> but</c><00:06:59.569><c> like</c>

00:07:00.249 --> 00:07:00.259 align:start position:0%
loops if statements and so on but like
 

00:07:00.259 --> 00:07:01.959 align:start position:0%
loops if statements and so on but like
if<00:07:00.379><c> you</c><00:07:00.500><c> read</c><00:07:00.710><c> through</c><00:07:00.860><c> it</c><00:07:01.009><c> is</c><00:07:01.099><c> still</c><00:07:01.310><c> pretty</c>

00:07:01.959 --> 00:07:01.969 align:start position:0%
if you read through it is still pretty
 

00:07:01.969 --> 00:07:03.369 align:start position:0%
if you read through it is still pretty
understandable<00:07:02.479><c> so</c><00:07:02.750><c> there's</c><00:07:03.080><c> a</c><00:07:03.139><c> lot</c><00:07:03.259><c> of</c>

00:07:03.369 --> 00:07:03.379 align:start position:0%
understandable so there's a lot of
 

00:07:03.379 --> 00:07:04.629 align:start position:0%
understandable so there's a lot of
constants<00:07:03.919><c> that</c><00:07:04.009><c> we're</c><00:07:04.129><c> just</c><00:07:04.250><c> gonna</c><00:07:04.400><c> skip</c>

00:07:04.629 --> 00:07:04.639 align:start position:0%
constants that we're just gonna skip
 

00:07:04.639 --> 00:07:07.149 align:start position:0%
constants that we're just gonna skip
over<00:07:04.789><c> and</c><00:07:05.419><c> then</c><00:07:06.259><c> here</c><00:07:06.439><c> we</c><00:07:06.560><c> have</c><00:07:06.590><c> the</c><00:07:06.889><c> oncreate</c>

00:07:07.149 --> 00:07:07.159 align:start position:0%
over and then here we have the oncreate
 

00:07:07.159 --> 00:07:09.760 align:start position:0%
over and then here we have the oncreate
method<00:07:07.310><c> that</c><00:07:07.759><c> we</c><00:07:07.879><c> were</c><00:07:08.060><c> looking</c><00:07:08.180><c> at</c><00:07:08.449><c> and</c><00:07:08.990><c> in</c>

00:07:09.760 --> 00:07:09.770 align:start position:0%
method that we were looking at and in
 

00:07:09.770 --> 00:07:12.249 align:start position:0%
method that we were looking at and in
first<00:07:10.009><c> school</c><00:07:10.159><c> here</c><00:07:10.719><c> you</c><00:07:11.719><c> see</c><00:07:11.870><c> that</c><00:07:11.990><c> there's</c><00:07:12.199><c> a</c>

00:07:12.249 --> 00:07:12.259 align:start position:0%
first school here you see that there's a
 

00:07:12.259 --> 00:07:15.399 align:start position:0%
first school here you see that there's a
virtual<00:07:12.979><c> call</c><00:07:13.569><c> to</c><00:07:14.569><c> the</c><00:07:14.750><c> set</c><00:07:14.960><c> onclicklistener</c>

00:07:15.399 --> 00:07:15.409 align:start position:0%
virtual call to the set onclicklistener
 

00:07:15.409 --> 00:07:17.829 align:start position:0%
virtual call to the set onclicklistener
that's<00:07:16.069><c> the</c><00:07:16.189><c> thing</c><00:07:16.340><c> where</c><00:07:16.550><c> we</c><00:07:16.699><c> passed</c><00:07:17.599><c> our</c>

00:07:17.829 --> 00:07:17.839 align:start position:0%
that's the thing where we passed our
 

00:07:17.839 --> 00:07:20.200 align:start position:0%
that's the thing where we passed our
lambda<00:07:18.050><c> two</c><00:07:18.409><c> and</c><00:07:18.650><c> then</c><00:07:19.550><c> see</c><00:07:19.819><c> that</c><00:07:20.120><c> the</c>

00:07:20.200 --> 00:07:20.210 align:start position:0%
lambda two and then see that the
 

00:07:20.210 --> 00:07:21.909 align:start position:0%
lambda two and then see that the
argument<00:07:20.629><c> before</c><00:07:20.990><c> that</c><00:07:21.169><c> is</c><00:07:21.620><c> this</c>

00:07:21.909 --> 00:07:21.919 align:start position:0%
argument before that is this
 

00:07:21.919 --> 00:07:25.989 align:start position:0%
argument before that is this
invokedynamic<00:07:22.569><c> instruction</c><00:07:24.069><c> and</c><00:07:25.069><c> it</c><00:07:25.789><c> tells</c>

00:07:25.989 --> 00:07:25.999 align:start position:0%
invokedynamic instruction and it tells
 

00:07:25.999 --> 00:07:27.399 align:start position:0%
invokedynamic instruction and it tells
us<00:07:26.210><c> that</c><00:07:26.330><c> it's</c><00:07:26.479><c> gonna</c><00:07:26.689><c> pass</c><00:07:27.229><c> this</c>

00:07:27.399 --> 00:07:27.409 align:start position:0%
us that it's gonna pass this
 

00:07:27.409 --> 00:07:30.459 align:start position:0%
us that it's gonna pass this
onclicklistener<00:07:28.810><c> so</c><00:07:29.810><c> what</c><00:07:29.930><c> is</c><00:07:30.050><c> invoke</c>

00:07:30.459 --> 00:07:30.469 align:start position:0%
onclicklistener so what is invoke
 

00:07:30.469 --> 00:07:33.550 align:start position:0%
onclicklistener so what is invoke
dynamic<00:07:30.939><c> it's</c><00:07:31.939><c> a</c><00:07:32.089><c> nice</c><00:07:32.300><c> feature</c><00:07:32.779><c> in</c><00:07:33.139><c> the</c><00:07:33.319><c> java</c>

00:07:33.550 --> 00:07:33.560 align:start position:0%
dynamic it's a nice feature in the java
 

00:07:33.560 --> 00:07:38.019 align:start position:0%
dynamic it's a nice feature in the java
vm<00:07:34.479><c> that</c><00:07:35.479><c> is</c><00:07:35.629><c> kind</c><00:07:35.839><c> of</c><00:07:35.960><c> reflective</c><00:07:36.729><c> so</c><00:07:37.729><c> instead</c>

00:07:38.019 --> 00:07:38.029 align:start position:0%
vm that is kind of reflective so instead
 

00:07:38.029 --> 00:07:40.329 align:start position:0%
vm that is kind of reflective so instead
of<00:07:38.210><c> the</c><00:07:38.990><c> vm</c><00:07:39.259><c> immediately</c><00:07:39.889><c> invoking</c><00:07:40.189><c> your</c>

00:07:40.329 --> 00:07:40.339 align:start position:0%
of the vm immediately invoking your
 

00:07:40.339 --> 00:07:43.389 align:start position:0%
of the vm immediately invoking your
method<00:07:40.789><c> it</c><00:07:41.779><c> allows</c><00:07:42.139><c> the</c><00:07:42.770><c> application</c><00:07:42.919><c> to</c>

00:07:43.389 --> 00:07:43.399 align:start position:0%
method it allows the application to
 

00:07:43.399 --> 00:07:46.450 align:start position:0%
method it allows the application to
provide<00:07:43.669><c> a</c><00:07:44.060><c> hook</c><00:07:44.389><c> in</c><00:07:44.659><c> there</c><00:07:44.960><c> and</c><00:07:45.199><c> dispatch</c><00:07:46.189><c> the</c>

00:07:46.450 --> 00:07:46.460 align:start position:0%
provide a hook in there and dispatch the
 

00:07:46.460 --> 00:07:50.200 align:start position:0%
provide a hook in there and dispatch the
method<00:07:46.729><c> any</c><00:07:46.879><c> way</c><00:07:47.089><c> you</c><00:07:47.689><c> want</c><00:07:47.960><c> and</c><00:07:48.229><c> so</c><00:07:49.069><c> and</c><00:07:49.339><c> in</c>

00:07:50.200 --> 00:07:50.210 align:start position:0%
method any way you want and so and in
 

00:07:50.210 --> 00:07:53.050 align:start position:0%
method any way you want and so and in
Java<00:07:50.479><c> they</c><00:07:51.229><c> have</c><00:07:51.409><c> these</c><00:07:52.279><c> things</c><00:07:52.520><c> called</c><00:07:52.669><c> meta</c>

00:07:53.050 --> 00:07:53.060 align:start position:0%
Java they have these things called meta
 

00:07:53.060 --> 00:07:54.730 align:start position:0%
Java they have these things called meta
factories<00:07:53.599><c> that</c><00:07:53.870><c> they</c><00:07:53.990><c> use</c><00:07:54.139><c> to</c><00:07:54.529><c> implement</c>

00:07:54.730 --> 00:07:54.740 align:start position:0%
factories that they use to implement
 

00:07:54.740 --> 00:07:57.309 align:start position:0%
factories that they use to implement
these<00:07:55.099><c> features</c><00:07:55.430><c> and</c><00:07:56.300><c> so</c><00:07:56.870><c> there</c><00:07:57.080><c> is</c><00:07:57.139><c> this</c>

00:07:57.309 --> 00:07:57.319 align:start position:0%
these features and so there is this
 

00:07:57.319 --> 00:08:00.189 align:start position:0%
these features and so there is this
specific<00:07:57.529><c> lambda</c><00:07:58.310><c> meta</c><00:07:58.520><c> Factory</c><00:07:59.029><c> and</c><00:07:59.899><c> you</c><00:08:00.020><c> see</c>

00:08:00.189 --> 00:08:00.199 align:start position:0%
specific lambda meta Factory and you see
 

00:08:00.199 --> 00:08:03.339 align:start position:0%
specific lambda meta Factory and you see
that<00:08:00.319><c> here</c><00:08:00.529><c> in</c><00:08:00.620><c> the</c><00:08:00.680><c> bottom</c><00:08:00.919><c> of</c><00:08:01.009><c> the</c><00:08:01.129><c> file</c><00:08:02.349><c> that</c>

00:08:03.339 --> 00:08:03.349 align:start position:0%
that here in the bottom of the file that
 

00:08:03.349 --> 00:08:05.920 align:start position:0%
that here in the bottom of the file that
scatters<00:08:03.800><c> argument</c><00:08:04.219><c> the</c><00:08:04.339><c> view</c><00:08:04.580><c> and</c><00:08:04.849><c> then</c><00:08:05.629><c> it</c>

00:08:05.920 --> 00:08:05.930 align:start position:0%
scatters argument the view and then it
 

00:08:05.930 --> 00:08:08.550 align:start position:0%
scatters argument the view and then it
passes<00:08:06.139><c> to</c><00:08:06.529><c> this</c><00:08:06.649><c> lambda</c><00:08:06.889><c> oncreate</c><00:08:07.520><c> method</c>

00:08:08.550 --> 00:08:08.560 align:start position:0%
passes to this lambda oncreate method
 

00:08:08.560 --> 00:08:12.850 align:start position:0%
passes to this lambda oncreate method
which<00:08:09.560><c> we</c><00:08:09.740><c> can</c><00:08:09.889><c> see</c><00:08:10.149><c> here</c><00:08:11.149><c> as</c><00:08:11.240><c> well</c><00:08:11.479><c> and</c><00:08:11.770><c> if</c><00:08:12.770><c> you</c>

00:08:12.850 --> 00:08:12.860 align:start position:0%
which we can see here as well and if you
 

00:08:12.860 --> 00:08:15.730 align:start position:0%
which we can see here as well and if you
look<00:08:13.009><c> carefully</c><00:08:13.189><c> you</c><00:08:14.169><c> see</c><00:08:15.169><c> that</c><00:08:15.349><c> it</c><00:08:15.560><c> actually</c>

00:08:15.730 --> 00:08:15.740 align:start position:0%
look carefully you see that it actually
 

00:08:15.740 --> 00:08:18.070 align:start position:0%
look carefully you see that it actually
has<00:08:16.039><c> the</c><00:08:16.339><c> the</c><00:08:16.550><c> snack</c><00:08:16.789><c> bar</c><00:08:17.029><c> codes</c><00:08:17.360><c> that</c><00:08:17.719><c> we</c><00:08:17.930><c> had</c>

00:08:18.070 --> 00:08:18.080 align:start position:0%
has the the snack bar codes that we had
 

00:08:18.080 --> 00:08:20.829 align:start position:0%
has the the snack bar codes that we had
in<00:08:18.379><c> the</c><00:08:18.589><c> body</c><00:08:18.770><c> of</c><00:08:18.919><c> our</c><00:08:19.069><c> lambda</c><00:08:19.659><c> so</c><00:08:20.659><c> what's</c>

00:08:20.829 --> 00:08:20.839 align:start position:0%
in the body of our lambda so what's
 

00:08:20.839 --> 00:08:22.809 align:start position:0%
in the body of our lambda so what's
going<00:08:21.050><c> on</c><00:08:21.139><c> here</c><00:08:21.409><c> is</c><00:08:21.560><c> that</c><00:08:21.770><c> the</c><00:08:21.919><c> first</c><00:08:22.099><c> time</c><00:08:22.399><c> the</c>

00:08:22.809 --> 00:08:22.819 align:start position:0%
going on here is that the first time the
 

00:08:22.819 --> 00:08:26.409 align:start position:0%
going on here is that the first time the
app<00:08:22.939><c> is</c><00:08:23.180><c> run</c><00:08:23.419><c> on</c><00:08:23.689><c> the</c><00:08:23.779><c> JVM</c><00:08:24.909><c> it</c><00:08:25.909><c> knows</c><00:08:26.149><c> that</c><00:08:26.180><c> it</c>

00:08:26.409 --> 00:08:26.419 align:start position:0%
app is run on the JVM it knows that it
 

00:08:26.419 --> 00:08:27.969 align:start position:0%
app is run on the JVM it knows that it
needs<00:08:26.479><c> to</c><00:08:26.599><c> call</c><00:08:26.810><c> this</c><00:08:26.960><c> lambda</c><00:08:27.169><c> meta</c><00:08:27.560><c> Factory</c>

00:08:27.969 --> 00:08:27.979 align:start position:0%
needs to call this lambda meta Factory
 

00:08:27.979 --> 00:08:29.920 align:start position:0%
needs to call this lambda meta Factory
and<00:08:28.279><c> that</c><00:08:29.060><c> thing</c><00:08:29.210><c> will</c><00:08:29.330><c> actually</c><00:08:29.719><c> generate</c>

00:08:29.920 --> 00:08:29.930 align:start position:0%
and that thing will actually generate
 

00:08:29.930 --> 00:08:32.319 align:start position:0%
and that thing will actually generate
the<00:08:30.529><c> class</c><00:08:31.310><c> that</c><00:08:31.580><c> implements</c><00:08:31.939><c> the</c><00:08:32.300><c> interface</c>

00:08:32.319 --> 00:08:32.329 align:start position:0%
the class that implements the interface
 

00:08:32.329 --> 00:08:35.949 align:start position:0%
the class that implements the interface
on<00:08:33.110><c> the</c><00:08:33.380><c> fly</c><00:08:34.180><c> and</c><00:08:35.180><c> then</c><00:08:35.300><c> it</c><00:08:35.419><c> will</c><00:08:35.630><c> call</c><00:08:35.810><c> that</c>

00:08:35.949 --> 00:08:35.959 align:start position:0%
on the fly and then it will call that
 

00:08:35.959 --> 00:08:37.920 align:start position:0%
on the fly and then it will call that
for<00:08:36.140><c> the</c><00:08:36.199><c> rest</c><00:08:36.289><c> of</c><00:08:36.440><c> the</c><00:08:36.529><c> program</c>

00:08:37.920 --> 00:08:37.930 align:start position:0%
for the rest of the program
 

00:08:37.930 --> 00:08:41.430 align:start position:0%
for the rest of the program
now<00:08:38.670><c> the</c><00:08:39.670><c> parameters</c><00:08:40.090><c> that</c><00:08:40.330><c> that</c><00:08:40.930><c> takes</c><00:08:41.170><c> time</c>

00:08:41.430 --> 00:08:41.440 align:start position:0%
now the parameters that that takes time
 

00:08:41.440 --> 00:08:43.890 align:start position:0%
now the parameters that that takes time
at<00:08:41.770><c> run</c><00:08:41.980><c> time</c><00:08:42.090><c> adds</c><00:08:43.090><c> more</c><00:08:43.300><c> memory</c><00:08:43.630><c> at</c><00:08:43.720><c> runtime</c>

00:08:43.890 --> 00:08:43.900 align:start position:0%
at run time adds more memory at runtime
 

00:08:43.900 --> 00:08:48.000 align:start position:0%
at run time adds more memory at runtime
so<00:08:44.790><c> we</c><00:08:45.790><c> don't</c><00:08:46.000><c> do</c><00:08:46.120><c> that</c><00:08:46.240><c> on</c><00:08:46.360><c> Android</c><00:08:47.110><c> even</c><00:08:47.950><c> a</c>

00:08:48.000 --> 00:08:48.010 align:start position:0%
so we don't do that on Android even a
 

00:08:48.010 --> 00:08:50.430 align:start position:0%
so we don't do that on Android even a
newer<00:08:48.250><c> version</c><00:08:48.400><c> of</c><00:08:48.640><c> Android</c><00:08:49.110><c> and</c><00:08:50.110><c> of</c><00:08:50.200><c> course</c>

00:08:50.430 --> 00:08:50.440 align:start position:0%
newer version of Android and of course
 

00:08:50.440 --> 00:08:52.230 align:start position:0%
newer version of Android and of course
an<00:08:50.620><c> old</c><00:08:50.830><c> version</c><00:08:51.070><c> of</c><00:08:51.220><c> Android</c><00:08:51.610><c> they</c><00:08:52.030><c> don't</c>

00:08:52.230 --> 00:08:52.240 align:start position:0%
an old version of Android they don't
 

00:08:52.240 --> 00:08:53.340 align:start position:0%
an old version of Android they don't
know<00:08:52.390><c> about</c><00:08:52.510><c> this</c><00:08:52.810><c> invoke</c><00:08:53.170><c> dynamic</c>

00:08:53.340 --> 00:08:53.350 align:start position:0%
know about this invoke dynamic
 

00:08:53.350 --> 00:08:57.390 align:start position:0%
know about this invoke dynamic
instruction<00:08:54.270><c> or</c><00:08:55.270><c> the</c><00:08:55.330><c> meta</c><00:08:55.750><c> Factory</c><00:08:56.400><c> so</c>

00:08:57.390 --> 00:08:57.400 align:start position:0%
instruction or the meta Factory so
 

00:08:57.400 --> 00:08:59.250 align:start position:0%
instruction or the meta Factory so
instead<00:08:57.730><c> the</c><00:08:58.000><c> sugar</c><00:08:58.270><c> will</c><00:08:58.630><c> take</c><00:08:58.840><c> care</c><00:08:59.020><c> of</c><00:08:59.110><c> this</c>

00:08:59.250 --> 00:08:59.260 align:start position:0%
instead the sugar will take care of this
 

00:08:59.260 --> 00:09:02.280 align:start position:0%
instead the sugar will take care of this
so<00:09:00.150><c> let's</c><00:09:01.150><c> take</c><00:09:01.330><c> a</c><00:09:01.360><c> look</c><00:09:01.540><c> at</c><00:09:01.690><c> what</c><00:09:01.870><c> happened</c><00:09:02.260><c> in</c>

00:09:02.280 --> 00:09:02.290 align:start position:0%
so let's take a look at what happened in
 

00:09:02.290 --> 00:09:05.910 align:start position:0%
so let's take a look at what happened in
this<00:09:02.440><c> project</c><00:09:02.620><c> when</c><00:09:02.890><c> we</c><00:09:02.950><c> built</c><00:09:03.220><c> it</c><00:09:04.800><c> using</c><00:09:05.800><c> the</c>

00:09:05.910 --> 00:09:05.920 align:start position:0%
this project when we built it using the
 

00:09:05.920 --> 00:09:08.810 align:start position:0%
this project when we built it using the
sugar<00:09:06.190><c> so</c><00:09:06.510><c> I'm</c><00:09:07.510><c> going</c><00:09:07.750><c> to</c><00:09:07.810><c> open</c><00:09:07.870><c> the</c><00:09:08.170><c> apk</c>

00:09:08.810 --> 00:09:08.820 align:start position:0%
sugar so I'm going to open the apk
 

00:09:08.820 --> 00:09:11.100 align:start position:0%
sugar so I'm going to open the apk
there's<00:09:09.820><c> this</c><00:09:10.000><c> tool</c><00:09:10.300><c> since</c><00:09:10.630><c> in</c><00:09:10.870><c> Android</c>

00:09:11.100 --> 00:09:11.110 align:start position:0%
there's this tool since in Android
 

00:09:11.110 --> 00:09:13.470 align:start position:0%
there's this tool since in Android
studio<00:09:11.260><c> 3.0</c><00:09:11.830><c> above</c><00:09:12.130><c> called</c><00:09:12.550><c> the</c><00:09:12.640><c> apk</c><00:09:13.060><c> analyzer</c>

00:09:13.470 --> 00:09:13.480 align:start position:0%
studio 3.0 above called the apk analyzer
 

00:09:13.480 --> 00:09:16.430 align:start position:0%
studio 3.0 above called the apk analyzer
and<00:09:14.470><c> it</c><00:09:14.590><c> allows</c><00:09:14.800><c> you</c><00:09:14.980><c> to</c><00:09:15.100><c> look</c><00:09:15.220><c> inside</c><00:09:15.430><c> the</c><00:09:15.700><c> apk</c>

00:09:16.430 --> 00:09:16.440 align:start position:0%
and it allows you to look inside the apk
 

00:09:16.440 --> 00:09:20.340 align:start position:0%
and it allows you to look inside the apk
both<00:09:17.440><c> for</c><00:09:17.740><c> file</c><00:09:18.160><c> size</c><00:09:18.490><c> of</c><00:09:19.000><c> your</c><00:09:19.360><c> resources</c><00:09:19.840><c> but</c>

00:09:20.340 --> 00:09:20.350 align:start position:0%
both for file size of your resources but
 

00:09:20.350 --> 00:09:22.980 align:start position:0%
both for file size of your resources but
also<00:09:20.500><c> to</c><00:09:21.340><c> see</c><00:09:21.550><c> what's</c><00:09:21.760><c> inside</c><00:09:22.120><c> the</c><00:09:22.360><c> the</c><00:09:22.720><c> Dex</c>

00:09:22.980 --> 00:09:22.990 align:start position:0%
also to see what's inside the the Dex
 

00:09:22.990 --> 00:09:25.520 align:start position:0%
also to see what's inside the the Dex
code<00:09:23.260><c> that's</c><00:09:23.530><c> going</c><00:09:24.160><c> to</c><00:09:24.310><c> run</c><00:09:24.370><c> on</c><00:09:24.490><c> the</c><00:09:24.580><c> device</c>

00:09:25.520 --> 00:09:25.530 align:start position:0%
code that's going to run on the device
 

00:09:25.530 --> 00:09:29.520 align:start position:0%
code that's going to run on the device
so<00:09:26.530><c> here</c><00:09:26.950><c> I</c><00:09:27.010><c> see</c><00:09:27.250><c> all</c><00:09:28.180><c> the</c><00:09:28.390><c> packages</c><00:09:29.260><c> in</c><00:09:29.440><c> the</c>

00:09:29.520 --> 00:09:29.530 align:start position:0%
so here I see all the packages in the
 

00:09:29.530 --> 00:09:31.170 align:start position:0%
so here I see all the packages in the
Dex<00:09:29.710><c> codes</c><00:09:29.980><c> and</c><00:09:30.400><c> I'm</c><00:09:30.520><c> going</c><00:09:30.700><c> to</c><00:09:30.790><c> navigate</c><00:09:30.940><c> to</c>

00:09:31.170 --> 00:09:31.180 align:start position:0%
Dex codes and I'm going to navigate to
 

00:09:31.180 --> 00:09:35.610 align:start position:0%
Dex codes and I'm going to navigate to
my<00:09:32.070><c> main</c><00:09:33.070><c> activity</c><00:09:33.220><c> and</c><00:09:34.110><c> then</c><00:09:35.110><c> on</c><00:09:35.320><c> create</c>

00:09:35.610 --> 00:09:35.620 align:start position:0%
my main activity and then on create
 

00:09:35.620 --> 00:09:38.000 align:start position:0%
my main activity and then on create
method<00:09:35.830><c> and</c><00:09:36.280><c> I'm</c><00:09:36.370><c> gonna</c><00:09:36.580><c> say</c><00:09:36.820><c> show</c><00:09:37.000><c> byte</c><00:09:37.210><c> code</c>

00:09:38.000 --> 00:09:38.010 align:start position:0%
method and I'm gonna say show byte code
 

00:09:38.010 --> 00:09:40.920 align:start position:0%
method and I'm gonna say show byte code
so<00:09:39.010><c> you</c><00:09:39.040><c> see</c><00:09:39.400><c> byte</c><00:09:39.730><c> code</c><00:09:39.970><c> that</c><00:09:40.240><c> is</c><00:09:40.390><c> kind</c><00:09:40.840><c> of</c>

00:09:40.920 --> 00:09:40.930 align:start position:0%
so you see byte code that is kind of
 

00:09:40.930 --> 00:09:43.650 align:start position:0%
so you see byte code that is kind of
similar<00:09:41.140><c> to</c><00:09:41.620><c> Java</c><00:09:42.010><c> byte</c><00:09:42.280><c> code</c><00:09:42.600><c> there's</c><00:09:43.600><c> a</c>

00:09:43.650 --> 00:09:43.660 align:start position:0%
similar to Java byte code there's a
 

00:09:43.660 --> 00:09:45.870 align:start position:0%
similar to Java byte code there's a
couple<00:09:43.810><c> differences</c><00:09:44.550><c> instead</c><00:09:45.550><c> of</c><00:09:45.670><c> using</c>

00:09:45.870 --> 00:09:45.880 align:start position:0%
couple differences instead of using
 

00:09:45.880 --> 00:09:48.150 align:start position:0%
couple differences instead of using
stack<00:09:46.360><c> based</c><00:09:46.870><c> machines</c><00:09:47.260><c> we</c><00:09:47.440><c> have</c><00:09:47.500><c> registers</c>

00:09:48.150 --> 00:09:48.160 align:start position:0%
stack based machines we have registers
 

00:09:48.160 --> 00:09:50.130 align:start position:0%
stack based machines we have registers
but<00:09:48.910><c> if</c><00:09:49.060><c> you</c><00:09:49.150><c> don't</c><00:09:49.300><c> are</c><00:09:49.570><c> not</c><00:09:49.720><c> familiar</c><00:09:49.870><c> with</c>

00:09:50.130 --> 00:09:50.140 align:start position:0%
but if you don't are not familiar with
 

00:09:50.140 --> 00:09:52.920 align:start position:0%
but if you don't are not familiar with
that<00:09:50.290><c> don't</c><00:09:50.560><c> worry</c><00:09:50.680><c> about</c><00:09:50.950><c> that</c><00:09:51.630><c> so</c><00:09:52.630><c> at</c><00:09:52.810><c> the</c>

00:09:52.920 --> 00:09:52.930 align:start position:0%
that don't worry about that so at the
 

00:09:52.930 --> 00:09:54.720 align:start position:0%
that don't worry about that so at the
end<00:09:53.020><c> of</c><00:09:53.170><c> the</c><00:09:53.350><c> method</c><00:09:53.530><c> we</c><00:09:53.830><c> see</c><00:09:54.040><c> the</c><00:09:54.160><c> same</c><00:09:54.370><c> call</c>

00:09:54.720 --> 00:09:54.730 align:start position:0%
end of the method we see the same call
 

00:09:54.730 --> 00:09:58.110 align:start position:0%
end of the method we see the same call
to<00:09:55.060><c> the</c><00:09:55.180><c> set</c><00:09:55.390><c> onclicklistener</c><00:09:56.850><c> but</c><00:09:57.850><c> the</c><00:09:57.940><c> big</c>

00:09:58.110 --> 00:09:58.120 align:start position:0%
to the set onclicklistener but the big
 

00:09:58.120 --> 00:10:00.570 align:start position:0%
to the set onclicklistener but the big
difference<00:09:58.240><c> is</c><00:09:58.570><c> that</c><00:09:58.800><c> one</c><00:09:59.800><c> line</c><00:10:00.040><c> above</c><00:10:00.310><c> it</c>

00:10:00.570 --> 00:10:00.580 align:start position:0%
difference is that one line above it
 

00:10:00.580 --> 00:10:02.280 align:start position:0%
difference is that one line above it
doesn't<00:10:00.850><c> show</c><00:10:00.970><c> invoke</c><00:10:01.330><c> dynamic</c><00:10:01.720><c> or</c><00:10:01.900><c> invoke</c>

00:10:02.280 --> 00:10:02.290 align:start position:0%
doesn't show invoke dynamic or invoke
 

00:10:02.290 --> 00:10:03.840 align:start position:0%
doesn't show invoke dynamic or invoke
custom<00:10:02.650><c> as</c><00:10:02.770><c> it</c><00:10:02.890><c> would</c><00:10:03.040><c> be</c><00:10:03.070><c> on</c><00:10:03.190><c> Android</c>

00:10:03.840 --> 00:10:03.850 align:start position:0%
custom as it would be on Android
 

00:10:03.850 --> 00:10:07.530 align:start position:0%
custom as it would be on Android
instead<00:10:04.660><c> it</c><00:10:04.930><c> calls</c><00:10:05.290><c> this</c><00:10:05.680><c> magic</c><00:10:06.550><c> class</c><00:10:06.820><c> -</c><00:10:07.270><c> -</c>

00:10:07.530 --> 00:10:07.540 align:start position:0%
instead it calls this magic class - -
 

00:10:07.540 --> 00:10:09.660 align:start position:0%
instead it calls this magic class - -
dollar<00:10:07.750><c> lambda</c><00:10:08.200><c> and</c><00:10:08.410><c> then</c><00:10:09.160><c> it</c><00:10:09.310><c> gets</c><00:10:09.430><c> the</c>

00:10:09.660 --> 00:10:09.670 align:start position:0%
dollar lambda and then it gets the
 

00:10:09.670 --> 00:10:12.390 align:start position:0%
dollar lambda and then it gets the
interface<00:10:10.090><c> field</c><00:10:10.390><c> of</c><00:10:10.570><c> that</c><00:10:11.040><c> so</c><00:10:12.040><c> let's</c><00:10:12.220><c> take</c><00:10:12.370><c> a</c>

00:10:12.390 --> 00:10:12.400 align:start position:0%
interface field of that so let's take a
 

00:10:12.400 --> 00:10:18.420 align:start position:0%
interface field of that so let's take a
look<00:10:12.610><c> at</c><00:10:12.840><c> that</c><00:10:13.840><c> class</c><00:10:16.980><c> so</c><00:10:17.980><c> you</c><00:10:18.070><c> see</c><00:10:18.220><c> that</c><00:10:18.370><c> the</c>

00:10:18.420 --> 00:10:18.430 align:start position:0%
look at that class so you see that the
 

00:10:18.430 --> 00:10:21.870 align:start position:0%
look at that class so you see that the
class<00:10:18.640><c> is</c><00:10:18.880><c> right</c><00:10:19.390><c> along</c><00:10:19.630><c> there</c><00:10:19.870><c> and</c><00:10:20.460><c> so</c><00:10:21.460><c> what</c>

00:10:21.870 --> 00:10:21.880 align:start position:0%
class is right along there and so what
 

00:10:21.880 --> 00:10:23.220 align:start position:0%
class is right along there and so what
we<00:10:22.000><c> see</c><00:10:22.120><c> in</c><00:10:22.180><c> the</c><00:10:22.270><c> class</c><00:10:22.480><c> is</c><00:10:22.870><c> that</c><00:10:23.140><c> it</c>

00:10:23.220 --> 00:10:23.230 align:start position:0%
we see in the class is that it
 

00:10:23.230 --> 00:10:24.930 align:start position:0%
we see in the class is that it
implements<00:10:23.680><c> the</c><00:10:24.100><c> own</c><00:10:24.340><c> click</c><00:10:24.580><c> listener</c>

00:10:24.930 --> 00:10:24.940 align:start position:0%
implements the own click listener
 

00:10:24.940 --> 00:10:28.670 align:start position:0%
implements the own click listener
interface<00:10:25.560><c> it</c><00:10:26.560><c> has</c><00:10:26.770><c> a</c><00:10:26.800><c> static</c><00:10:27.130><c> field</c><00:10:27.280><c> instance</c>

00:10:28.670 --> 00:10:28.680 align:start position:0%
interface it has a static field instance
 

00:10:28.680 --> 00:10:32.760 align:start position:0%
interface it has a static field instance
and<00:10:29.680><c> then</c><00:10:30.270><c> it</c><00:10:31.270><c> has</c><00:10:31.480><c> the</c><00:10:31.660><c> onclick</c><00:10:31.960><c> method</c><00:10:32.230><c> for</c>

00:10:32.760 --> 00:10:32.770 align:start position:0%
and then it has the onclick method for
 

00:10:32.770 --> 00:10:35.880 align:start position:0%
and then it has the onclick method for
the<00:10:33.010><c> onclick</c><00:10:33.640><c> listener</c><00:10:33.880><c> interface</c><00:10:34.590><c> and</c><00:10:35.590><c> all</c>

00:10:35.880 --> 00:10:35.890 align:start position:0%
the onclick listener interface and all
 

00:10:35.890 --> 00:10:38.400 align:start position:0%
the onclick listener interface and all
it<00:10:36.070><c> does</c><00:10:36.250><c> it's</c><00:10:36.460><c> called</c><00:10:36.700><c> the</c><00:10:37.080><c> generated</c><00:10:38.080><c> method</c>

00:10:38.400 --> 00:10:38.410 align:start position:0%
it does it's called the generated method
 

00:10:38.410 --> 00:10:40.710 align:start position:0%
it does it's called the generated method
that<00:10:38.530><c> contains</c><00:10:39.060><c> method</c><00:10:40.060><c> body</c><00:10:40.180><c> of</c><00:10:40.390><c> our</c><00:10:40.540><c> lambda</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
that contains method body of our lambda
 

00:10:40.720 --> 00:10:45.120 align:start position:0%
that contains method body of our lambda
and<00:10:41.620><c> so</c><00:10:41.830><c> now</c><00:10:42.450><c> there's</c><00:10:43.450><c> no</c><00:10:43.540><c> Java</c><00:10:43.960><c> 8</c><00:10:44.170><c> features</c><00:10:44.620><c> no</c>

00:10:45.120 --> 00:10:45.130 align:start position:0%
and so now there's no Java 8 features no
 

00:10:45.130 --> 00:10:46.759 align:start position:0%
and so now there's no Java 8 features no
Java<00:10:45.610><c> 8</c><00:10:45.760><c> byte</c><00:10:45.970><c> code</c><00:10:46.240><c> in</c>

00:10:46.759 --> 00:10:46.769 align:start position:0%
Java 8 byte code in
 

00:10:46.769 --> 00:10:49.210 align:start position:0%
Java 8 byte code in
code<00:10:47.129><c> and</c><00:10:47.459><c> we</c><00:10:48.059><c> can</c><00:10:48.089><c> execute</c><00:10:48.540><c> it</c><00:10:48.749><c> on</c><00:10:48.869><c> any</c>

00:10:49.210 --> 00:10:49.220 align:start position:0%
code and we can execute it on any
 

00:10:49.220 --> 00:10:51.859 align:start position:0%
code and we can execute it on any
Android<00:10:50.220><c> version</c><00:10:50.579><c> even</c><00:10:51.029><c> as</c><00:10:51.209><c> low</c><00:10:51.329><c> as</c><00:10:51.480><c> Ice</c><00:10:51.629><c> Cream</c>

00:10:51.859 --> 00:10:51.869 align:start position:0%
Android version even as low as Ice Cream
 

00:10:51.869 --> 00:10:52.479 align:start position:0%
Android version even as low as Ice Cream
Sandwich

00:10:52.479 --> 00:10:52.489 align:start position:0%
Sandwich
 

00:10:52.489 --> 00:10:56.499 align:start position:0%
Sandwich
okay<00:10:53.489><c> so</c><00:10:53.550><c> let's</c><00:10:53.819><c> switch</c><00:10:53.879><c> back</c><00:10:54.149><c> to</c><00:10:54.179><c> the</c><00:10:54.360><c> slides</c>

00:10:56.499 --> 00:10:56.509 align:start position:0%
okay so let's switch back to the slides
 

00:10:56.509 --> 00:11:00.049 align:start position:0%
okay so let's switch back to the slides
so<00:10:57.509><c> this</c><00:10:57.749><c> is</c><00:10:57.869><c> how</c><00:10:58.189><c> that</c><00:10:59.189><c> is</c><00:10:59.339><c> integrated</c><00:10:59.790><c> into</c>

00:11:00.049 --> 00:11:00.059 align:start position:0%
so this is how that is integrated into
 

00:11:00.059 --> 00:11:02.809 align:start position:0%
so this is how that is integrated into
the<00:11:00.209><c> Gradle</c><00:11:00.540><c> build</c><00:11:00.569><c> system</c><00:11:00.860><c> after</c><00:11:01.860><c> the</c><00:11:02.369><c> Java</c><00:11:02.610><c> C</c>

00:11:02.809 --> 00:11:02.819 align:start position:0%
the Gradle build system after the Java C
 

00:11:02.819 --> 00:11:05.539 align:start position:0%
the Gradle build system after the Java C
compiler<00:11:03.119><c> runs</c><00:11:03.829><c> we</c><00:11:04.829><c> run</c><00:11:05.040><c> the</c><00:11:05.189><c> separate</c>

00:11:05.539 --> 00:11:05.549 align:start position:0%
compiler runs we run the separate
 

00:11:05.549 --> 00:11:07.819 align:start position:0%
compiler runs we run the separate
process<00:11:05.910><c> called</c><00:11:06.179><c> D</c><00:11:06.329><c> sugar</c><00:11:06.660><c> all</c><00:11:07.439><c> right</c><00:11:07.559><c> what</c><00:11:07.739><c> it</c>

00:11:07.819 --> 00:11:07.829 align:start position:0%
process called D sugar all right what it
 

00:11:07.829 --> 00:11:09.289 align:start position:0%
process called D sugar all right what it
does<00:11:07.980><c> it</c><00:11:08.189><c> reads</c><00:11:08.399><c> the</c><00:11:08.489><c> Java</c><00:11:08.699><c> bytecode</c>

00:11:09.289 --> 00:11:09.299 align:start position:0%
does it reads the Java bytecode
 

00:11:09.299 --> 00:11:11.600 align:start position:0%
does it reads the Java bytecode
it<00:11:10.139><c> takes</c><00:11:10.470><c> out</c><00:11:10.619><c> all</c><00:11:10.769><c> these</c><00:11:10.949><c> functions</c><00:11:11.429><c> that</c>

00:11:11.600 --> 00:11:11.610 align:start position:0%
it takes out all these functions that
 

00:11:11.610 --> 00:11:13.699 align:start position:0%
it takes out all these functions that
are<00:11:11.730><c> not</c><00:11:11.879><c> supported</c><00:11:12.360><c> emits</c><00:11:12.989><c> new</c><00:11:13.170><c> byte</c><00:11:13.410><c> codes</c>

00:11:13.699 --> 00:11:13.709 align:start position:0%
are not supported emits new byte codes
 

00:11:13.709 --> 00:11:16.729 align:start position:0%
are not supported emits new byte codes
and<00:11:14.009><c> then</c><00:11:14.639><c> we</c><00:11:14.790><c> pass</c><00:11:14.939><c> it</c><00:11:15.119><c> on</c><00:11:15.239><c> to</c><00:11:15.420><c> DX</c><00:11:15.720><c> and</c><00:11:16.110><c> so</c><00:11:16.499><c> the</c>

00:11:16.729 --> 00:11:16.739 align:start position:0%
and then we pass it on to DX and so the
 

00:11:16.739 --> 00:11:18.619 align:start position:0%
and then we pass it on to DX and so the
rest<00:11:16.889><c> of</c><00:11:17.009><c> the</c><00:11:17.069><c> pipeline</c><00:11:17.420><c> doesn't</c><00:11:18.420><c> have</c><00:11:18.509><c> to</c>

00:11:18.619 --> 00:11:18.629 align:start position:0%
rest of the pipeline doesn't have to
 

00:11:18.629 --> 00:11:22.129 align:start position:0%
rest of the pipeline doesn't have to
know<00:11:18.720><c> anything</c><00:11:18.929><c> about</c><00:11:19.139><c> the</c><00:11:19.410><c> sugaring</c><00:11:20.839><c> so</c><00:11:21.839><c> this</c>

00:11:22.129 --> 00:11:22.139 align:start position:0%
know anything about the sugaring so this
 

00:11:22.139 --> 00:11:23.650 align:start position:0%
know anything about the sugaring so this
is<00:11:22.199><c> nice</c><00:11:22.319><c> you</c><00:11:22.559><c> can</c><00:11:22.589><c> use</c><00:11:22.860><c> new</c><00:11:23.040><c> Java</c><00:11:23.279><c> 8</c><00:11:23.459><c> features</c>

00:11:23.650 --> 00:11:23.660 align:start position:0%
is nice you can use new Java 8 features
 

00:11:23.660 --> 00:11:25.519 align:start position:0%
is nice you can use new Java 8 features
there's<00:11:24.660><c> a</c><00:11:24.720><c> couple</c><00:11:24.869><c> things</c><00:11:25.049><c> you</c><00:11:25.199><c> need</c><00:11:25.350><c> to</c><00:11:25.439><c> be</c>

00:11:25.519 --> 00:11:25.529 align:start position:0%
there's a couple things you need to be
 

00:11:25.529 --> 00:11:27.619 align:start position:0%
there's a couple things you need to be
aware<00:11:25.769><c> of</c><00:11:25.829><c> if</c><00:11:26.160><c> you</c><00:11:26.369><c> do</c><00:11:26.819><c> your</c><00:11:26.999><c> own</c><00:11:27.029><c> bytecode</c>

00:11:27.619 --> 00:11:27.629 align:start position:0%
aware of if you do your own bytecode
 

00:11:27.629 --> 00:11:29.780 align:start position:0%
aware of if you do your own bytecode
transformations<00:11:28.350><c> so</c><00:11:29.100><c> there's</c><00:11:29.279><c> people</c><00:11:29.369><c> who</c><00:11:29.579><c> do</c>

00:11:29.780 --> 00:11:29.790 align:start position:0%
transformations so there's people who do
 

00:11:29.790 --> 00:11:32.239 align:start position:0%
transformations so there's people who do
their<00:11:30.149><c> own</c><00:11:30.179><c> bytecode</c><00:11:30.660><c> transformations</c><00:11:31.259><c> for</c>

00:11:32.239 --> 00:11:32.249 align:start position:0%
their own bytecode transformations for
 

00:11:32.249 --> 00:11:35.410 align:start position:0%
their own bytecode transformations for
code<00:11:32.939><c> injection</c><00:11:33.119><c> crash</c><00:11:34.049><c> reporting</c><00:11:34.559><c> etc</c>

00:11:35.410 --> 00:11:35.420 align:start position:0%
code injection crash reporting etc
 

00:11:35.420 --> 00:11:38.689 align:start position:0%
code injection crash reporting etc
because<00:11:36.420><c> we</c><00:11:36.509><c> run</c><00:11:36.749><c> the</c><00:11:36.869><c> sugar</c><00:11:37.199><c> we</c><00:11:38.100><c> run</c><00:11:38.279><c> your</c>

00:11:38.689 --> 00:11:38.699 align:start position:0%
because we run the sugar we run your
 

00:11:38.699 --> 00:11:40.759 align:start position:0%
because we run the sugar we run your
bytecode<00:11:39.089><c> transformations</c><00:11:39.720><c> after</c><00:11:40.290><c> the</c><00:11:40.470><c> sugar</c>

00:11:40.759 --> 00:11:40.769 align:start position:0%
bytecode transformations after the sugar
 

00:11:40.769 --> 00:11:44.059 align:start position:0%
bytecode transformations after the sugar
which<00:11:41.639><c> means</c><00:11:41.910><c> that</c><00:11:42.149><c> you</c><00:11:42.269><c> see</c><00:11:42.480><c> all</c><00:11:42.689><c> our</c><00:11:43.110><c> crazy</c>

00:11:44.059 --> 00:11:44.069 align:start position:0%
which means that you see all our crazy
 

00:11:44.069 --> 00:11:46.160 align:start position:0%
which means that you see all our crazy
patterns<00:11:44.489><c> like</c><00:11:44.730><c> the</c><00:11:44.910><c> the</c><00:11:45.269><c> dollar</c><00:11:45.449><c> lambda</c><00:11:45.899><c> code</c>

00:11:46.160 --> 00:11:46.170 align:start position:0%
patterns like the the dollar lambda code
 

00:11:46.170 --> 00:11:49.009 align:start position:0%
patterns like the the dollar lambda code
when<00:11:46.949><c> you're</c><00:11:47.100><c> doing</c><00:11:47.309><c> your</c><00:11:47.459><c> own</c><00:11:47.579><c> processing</c><00:11:48.149><c> so</c>

00:11:49.009 --> 00:11:49.019 align:start position:0%
when you're doing your own processing so
 

00:11:49.019 --> 00:11:50.299 align:start position:0%
when you're doing your own processing so
be<00:11:49.350><c> aware</c><00:11:49.439><c> of</c><00:11:49.619><c> that</c><00:11:49.709><c> if</c><00:11:49.949><c> you're</c><00:11:50.069><c> doing</c><00:11:50.189><c> your</c>

00:11:50.299 --> 00:11:50.309 align:start position:0%
be aware of that if you're doing your
 

00:11:50.309 --> 00:11:55.100 align:start position:0%
be aware of that if you're doing your
own<00:11:50.369><c> bytecode</c><00:11:50.819><c> transformations</c><00:11:53.059><c> ok</c><00:11:54.059><c> so</c><00:11:54.119><c> let's</c>

00:11:55.100 --> 00:11:55.110 align:start position:0%
own bytecode transformations ok so let's
 

00:11:55.110 --> 00:12:00.079 align:start position:0%
own bytecode transformations ok so let's
move<00:11:55.199><c> on</c><00:11:55.439><c> to</c><00:11:55.529><c> da</c><00:11:57.799><c> da</c><00:11:58.799><c> it</c><00:11:58.920><c> is</c><00:11:59.069><c> our</c><00:11:59.309><c> new</c><00:11:59.459><c> texture</c>

00:12:00.079 --> 00:12:00.089 align:start position:0%
move on to da da it is our new texture
 

00:12:00.089 --> 00:12:03.319 align:start position:0%
move on to da da it is our new texture
as<00:12:00.389><c> I</c><00:12:00.540><c> said</c><00:12:00.920><c> Android</c><00:12:01.920><c> it</c><00:12:02.429><c> runs</c><00:12:02.730><c> just</c><00:12:02.819><c> a</c><00:12:03.119><c> dell</c>

00:12:03.319 --> 00:12:03.329 align:start position:0%
as I said Android it runs just a dell
 

00:12:03.329 --> 00:12:05.150 align:start position:0%
as I said Android it runs just a dell
'fuck<00:12:03.480><c> bytecode</c><00:12:03.899><c> not</c><00:12:04.170><c> Java</c><00:12:04.410><c> bytecode</c><00:12:04.679><c> and</c>

00:12:05.150 --> 00:12:05.160 align:start position:0%
'fuck bytecode not Java bytecode and
 

00:12:05.160 --> 00:12:07.340 align:start position:0%
'fuck bytecode not Java bytecode and
Dextre<00:12:05.699><c> is</c><00:12:05.999><c> the</c><00:12:06.269><c> tool</c><00:12:06.480><c> that</c><00:12:06.720><c> takes</c><00:12:06.929><c> java</c>

00:12:07.340 --> 00:12:07.350 align:start position:0%
Dextre is the tool that takes java
 

00:12:07.350 --> 00:12:08.059 align:start position:0%
Dextre is the tool that takes java
bytecodes

00:12:08.059 --> 00:12:08.069 align:start position:0%
bytecodes
 

00:12:08.069 --> 00:12:10.009 align:start position:0%
bytecodes
from<00:12:08.369><c> the</c><00:12:08.519><c> stack</c><00:12:08.730><c> based</c><00:12:08.879><c> machine</c><00:12:09.329><c> and</c>

00:12:10.009 --> 00:12:10.019 align:start position:0%
from the stack based machine and
 

00:12:10.019 --> 00:12:12.590 align:start position:0%
from the stack based machine and
converts<00:12:10.350><c> it</c><00:12:10.470><c> into</c><00:12:10.559><c> dalvik</c><00:12:11.009><c> bytecode</c><00:12:11.600><c> which</c>

00:12:12.590 --> 00:12:12.600 align:start position:0%
converts it into dalvik bytecode which
 

00:12:12.600 --> 00:12:15.230 align:start position:0%
converts it into dalvik bytecode which
is<00:12:12.749><c> register</c><00:12:13.170><c> base</c><00:12:13.610><c> we</c><00:12:14.610><c> had</c><00:12:14.730><c> this</c><00:12:14.819><c> tool</c><00:12:15.059><c> before</c>

00:12:15.230 --> 00:12:15.240 align:start position:0%
is register base we had this tool before
 

00:12:15.240 --> 00:12:19.720 align:start position:0%
is register base we had this tool before
called<00:12:15.660><c> DX</c><00:12:16.850><c> but</c><00:12:17.850><c> it's</c><00:12:18.119><c> been</c><00:12:18.269><c> was</c><00:12:18.869><c> pretty</c><00:12:19.079><c> old</c>

00:12:19.720 --> 00:12:19.730 align:start position:0%
called DX but it's been was pretty old
 

00:12:19.730 --> 00:12:22.309 align:start position:0%
called DX but it's been was pretty old
people<00:12:20.730><c> had</c><00:12:20.850><c> problems</c><00:12:21.209><c> with</c><00:12:21.360><c> it</c><00:12:21.540><c> and</c><00:12:21.929><c> so</c><00:12:22.230><c> we</c>

00:12:22.309 --> 00:12:22.319 align:start position:0%
people had problems with it and so we
 

00:12:22.319 --> 00:12:25.179 align:start position:0%
people had problems with it and so we
decided<00:12:22.619><c> to</c><00:12:23.009><c> build</c><00:12:23.369><c> a</c><00:12:23.519><c> new</c><00:12:23.549><c> version</c><00:12:24.089><c> called</c><00:12:24.420><c> d8</c>

00:12:25.179 --> 00:12:25.189 align:start position:0%
decided to build a new version called d8
 

00:12:25.189 --> 00:12:28.609 align:start position:0%
decided to build a new version called d8
and<00:12:26.189><c> so</c><00:12:26.449><c> the</c><00:12:27.449><c> reason</c><00:12:27.689><c> we</c><00:12:27.779><c> build</c><00:12:27.959><c> it</c><00:12:28.079><c> is</c><00:12:28.199><c> we</c><00:12:28.439><c> want</c>

00:12:28.609 --> 00:12:28.619 align:start position:0%
and so the reason we build it is we want
 

00:12:28.619 --> 00:12:30.499 align:start position:0%
and so the reason we build it is we want
to<00:12:28.679><c> have</c><00:12:28.829><c> faster</c><00:12:29.220><c> compilation</c><00:12:29.759><c> because</c>

00:12:30.499 --> 00:12:30.509 align:start position:0%
to have faster compilation because
 

00:12:30.509 --> 00:12:33.439 align:start position:0%
to have faster compilation because
everybody<00:12:30.959><c> always</c><00:12:31.439><c> wants</c><00:12:31.559><c> faster</c><00:12:32.100><c> builds</c><00:12:32.449><c> we</c>

00:12:33.439 --> 00:12:33.449 align:start position:0%
everybody always wants faster builds we
 

00:12:33.449 --> 00:12:36.079 align:start position:0%
everybody always wants faster builds we
wanted<00:12:33.689><c> to</c><00:12:33.749><c> generate</c><00:12:33.869><c> smaller</c><00:12:34.379><c> code</c><00:12:34.709><c> and</c><00:12:35.089><c> give</c>

00:12:36.079 --> 00:12:36.089 align:start position:0%
wanted to generate smaller code and give
 

00:12:36.089 --> 00:12:38.449 align:start position:0%
wanted to generate smaller code and give
people<00:12:36.389><c> better</c><00:12:36.600><c> Diagnostics</c><00:12:37.319><c> by</c><00:12:38.160><c> better</c>

00:12:38.449 --> 00:12:38.459 align:start position:0%
people better Diagnostics by better
 

00:12:38.459 --> 00:12:41.720 align:start position:0%
people better Diagnostics by better
Diagnostics<00:12:39.029><c> I</c><00:12:39.149><c> mean</c><00:12:39.329><c> both</c><00:12:39.600><c> the</c><00:12:40.730><c> error</c>

00:12:41.720 --> 00:12:41.730 align:start position:0%
Diagnostics I mean both the error
 

00:12:41.730 --> 00:12:43.129 align:start position:0%
Diagnostics I mean both the error
messages<00:12:42.269><c> that</c><00:12:42.299><c> you</c><00:12:42.629><c> get</c><00:12:42.809><c> when</c><00:12:43.049><c> you're</c>

00:12:43.129 --> 00:12:43.139 align:start position:0%
messages that you get when you're
 

00:12:43.139 --> 00:12:45.369 align:start position:0%
messages that you get when you're
running<00:12:43.319><c> the</c><00:12:43.439><c> compiler</c><00:12:43.739><c> as</c><00:12:44.579><c> well</c><00:12:44.850><c> as</c><00:12:44.999><c> better</c>

00:12:45.369 --> 00:12:45.379 align:start position:0%
running the compiler as well as better
 

00:12:45.379 --> 00:12:47.720 align:start position:0%
running the compiler as well as better
debug<00:12:46.379><c> information</c><00:12:46.649><c> that</c><00:12:47.459><c> when</c><00:12:47.610><c> you're</c>

00:12:47.720 --> 00:12:47.730 align:start position:0%
debug information that when you're
 

00:12:47.730 --> 00:12:50.299 align:start position:0%
debug information that when you're
running<00:12:47.910><c> your</c><00:12:48.389><c> app</c><00:12:48.899><c> in</c><00:12:49.199><c> the</c><00:12:49.259><c> debugger</c><00:12:49.559><c> that</c>

00:12:50.299 --> 00:12:50.309 align:start position:0%
running your app in the debugger that
 

00:12:50.309 --> 00:12:51.619 align:start position:0%
running your app in the debugger that
you<00:12:50.429><c> have</c><00:12:50.549><c> a</c><00:12:50.610><c> better</c><00:12:50.759><c> understanding</c><00:12:50.879><c> of</c><00:12:51.449><c> what</c>

00:12:51.619 --> 00:12:51.629 align:start position:0%
you have a better understanding of what
 

00:12:51.629 --> 00:12:56.239 align:start position:0%
you have a better understanding of what
is<00:12:51.749><c> going</c><00:12:51.839><c> on</c><00:12:53.629><c> ok</c><00:12:54.629><c> so</c><00:12:54.660><c> how</c><00:12:55.079><c> is</c><00:12:55.139><c> d8</c><00:12:55.709><c> integrated</c>

00:12:56.239 --> 00:12:56.249 align:start position:0%
is going on ok so how is d8 integrated
 

00:12:56.249 --> 00:12:58.090 align:start position:0%
is going on ok so how is d8 integrated
into<00:12:56.490><c> the</c><00:12:56.579><c> Gradle</c><00:12:56.850><c> build</c><00:12:56.879><c> system</c>

00:12:58.090 --> 00:12:58.100 align:start position:0%
into the Gradle build system
 

00:12:58.100 --> 00:13:00.400 align:start position:0%
into the Gradle build system
it's<00:12:58.519><c> actually</c><00:12:58.910><c> quite</c><00:12:59.120><c> similar</c><00:12:59.600><c> to</c><00:12:59.720><c> what</c><00:12:59.930><c> DX</c>

00:13:00.400 --> 00:13:00.410 align:start position:0%
it's actually quite similar to what DX
 

00:13:00.410 --> 00:13:04.180 align:start position:0%
it's actually quite similar to what DX
is<00:13:00.589><c> we</c><00:13:01.550><c> just</c><00:13:01.730><c> swap</c><00:13:02.000><c> out</c><00:13:02.120><c> the</c><00:13:02.300><c> x-48</c><00:13:03.190><c> the</c>

00:13:04.180 --> 00:13:04.190 align:start position:0%
is we just swap out the x-48 the
 

00:13:04.190 --> 00:13:05.590 align:start position:0%
is we just swap out the x-48 the
interesting<00:13:04.580><c> thing</c><00:13:04.790><c> there</c><00:13:05.000><c> is</c><00:13:05.209><c> that</c><00:13:05.240><c> in</c>

00:13:05.590 --> 00:13:05.600 align:start position:0%
interesting thing there is that in
 

00:13:05.600 --> 00:13:09.579 align:start position:0%
interesting thing there is that in
Android<00:13:05.839><c> Co</c><00:13:06.260><c> 3.2</c><00:13:07.209><c> we</c><00:13:08.209><c> also</c><00:13:08.450><c> integrate</c><00:13:09.200><c> the</c><00:13:09.440><c> D</c>

00:13:09.579 --> 00:13:09.589 align:start position:0%
Android Co 3.2 we also integrate the D
 

00:13:09.589 --> 00:13:14.769 align:start position:0%
Android Co 3.2 we also integrate the D
sugaring<00:13:09.890><c> step</c><00:13:10.250><c> into</c><00:13:10.910><c> D</c><00:13:11.149><c> 8</c><00:13:11.980><c> so</c><00:13:12.980><c> that's</c><00:13:13.820><c> saves</c>

00:13:14.769 --> 00:13:14.779 align:start position:0%
sugaring step into D 8 so that's saves
 

00:13:14.779 --> 00:13:16.690 align:start position:0%
sugaring step into D 8 so that's saves
us<00:13:15.050><c> a</c><00:13:15.260><c> round</c><00:13:15.529><c> trip</c><00:13:15.829><c> between</c><00:13:15.860><c> write</c><00:13:16.490><c> the</c>

00:13:16.690 --> 00:13:16.700 align:start position:0%
us a round trip between write the
 

00:13:16.700 --> 00:13:18.430 align:start position:0%
us a round trip between write the
reading<00:13:17.000><c> and</c><00:13:17.089><c> writing</c><00:13:17.269><c> the</c><00:13:17.540><c> class</c><00:13:17.750><c> files</c><00:13:18.079><c> and</c>

00:13:18.430 --> 00:13:18.440 align:start position:0%
reading and writing the class files and
 

00:13:18.440 --> 00:13:20.949 align:start position:0%
reading and writing the class files and
so<00:13:18.829><c> it</c><00:13:19.070><c> will</c><00:13:19.190><c> provide</c><00:13:19.339><c> provides</c><00:13:19.970><c> more</c><00:13:20.480><c> speed</c>

00:13:20.949 --> 00:13:20.959 align:start position:0%
so it will provide provides more speed
 

00:13:20.959 --> 00:13:23.530 align:start position:0%
so it will provide provides more speed
up<00:13:21.399><c> the</c><00:13:22.399><c> side-effect</c><00:13:22.910><c> of</c><00:13:23.000><c> death</c><00:13:23.180><c> though</c><00:13:23.360><c> is</c>

00:13:23.530 --> 00:13:23.540 align:start position:0%
up the side-effect of death though is
 

00:13:23.540 --> 00:13:24.940 align:start position:0%
up the side-effect of death though is
that<00:13:23.690><c> if</c><00:13:23.870><c> you're</c><00:13:24.079><c> writing</c><00:13:24.410><c> your</c><00:13:24.620><c> own</c><00:13:24.709><c> byte</c>

00:13:24.940 --> 00:13:24.950 align:start position:0%
that if you're writing your own byte
 

00:13:24.950 --> 00:13:28.389 align:start position:0%
that if you're writing your own byte
code<00:13:25.160><c> rewriters</c><00:13:25.720><c> we</c><00:13:26.720><c> now</c><00:13:26.870><c> run</c><00:13:27.110><c> them</c><00:13:27.290><c> before</c><00:13:27.680><c> d8</c>

00:13:28.389 --> 00:13:28.399 align:start position:0%
code rewriters we now run them before d8
 

00:13:28.399 --> 00:13:30.160 align:start position:0%
code rewriters we now run them before d8
which<00:13:29.209><c> means</c><00:13:29.450><c> that</c><00:13:29.630><c> your</c><00:13:29.750><c> byte</c><00:13:29.930><c> code</c>

00:13:30.160 --> 00:13:30.170 align:start position:0%
which means that your byte code
 

00:13:30.170 --> 00:13:32.230 align:start position:0%
which means that your byte code
rewriters<00:13:30.649><c> have</c><00:13:30.890><c> to</c><00:13:31.010><c> support</c><00:13:31.399><c> the</c><00:13:31.760><c> Java</c><00:13:32.000><c> 8</c>

00:13:32.230 --> 00:13:32.240 align:start position:0%
rewriters have to support the Java 8
 

00:13:32.240 --> 00:13:37.269 align:start position:0%
rewriters have to support the Java 8
language<00:13:34.480><c> okay</c><00:13:35.480><c> so</c><00:13:35.649><c> let's</c><00:13:36.649><c> look</c><00:13:36.769><c> at</c><00:13:36.890><c> a</c><00:13:36.920><c> demo</c><00:13:37.190><c> of</c>

00:13:37.269 --> 00:13:37.279 align:start position:0%
language okay so let's look at a demo of
 

00:13:37.279 --> 00:13:43.970 align:start position:0%
language okay so let's look at a demo of
D<00:13:37.579><c> 8</c><00:13:37.700><c> in</c><00:13:37.880><c> action</c>

00:13:43.970 --> 00:13:43.980 align:start position:0%
 
 

00:13:43.980 --> 00:13:47.700 align:start position:0%
 
okay<00:13:44.980><c> so</c><00:13:45.240><c> here</c><00:13:46.240><c> have</c><00:13:46.360><c> another</c><00:13:46.840><c> project</c><00:13:47.290><c> that</c><00:13:47.650><c> I</c>

00:13:47.700 --> 00:13:47.710 align:start position:0%
okay so here have another project that I
 

00:13:47.710 --> 00:13:50.300 align:start position:0%
okay so here have another project that I
just<00:13:47.740><c> created</c><00:13:48.130><c> using</c><00:13:48.460><c> the</c><00:13:48.850><c> project</c><00:13:49.750><c> Wizards</c>

00:13:50.300 --> 00:13:50.310 align:start position:0%
just created using the project Wizards
 

00:13:50.310 --> 00:13:53.690 align:start position:0%
just created using the project Wizards
and<00:13:51.310><c> because</c><00:13:51.970><c> I'm</c><00:13:52.090><c> using</c><00:13:52.210><c> Android</c><00:13:52.690><c> studio</c><00:13:52.720><c> 3.2</c>

00:13:53.690 --> 00:13:53.700 align:start position:0%
and because I'm using Android studio 3.2
 

00:13:53.700 --> 00:13:56.250 align:start position:0%
and because I'm using Android studio 3.2
d8<00:13:54.700><c> is</c><00:13:54.730><c> already</c><00:13:55.120><c> enabled</c><00:13:55.330><c> by</c><00:13:55.630><c> default</c>

00:13:56.250 --> 00:13:56.260 align:start position:0%
d8 is already enabled by default
 

00:13:56.260 --> 00:13:58.260 align:start position:0%
d8 is already enabled by default
so<00:13:56.770><c> I</c><00:13:56.800><c> ever</c><00:13:57.040><c> went</c><00:13:57.250><c> into</c><00:13:57.430><c> the</c><00:13:57.670><c> Gradle</c><00:13:57.940><c> property</c>

00:13:58.260 --> 00:13:58.270 align:start position:0%
so I ever went into the Gradle property
 

00:13:58.270 --> 00:14:00.570 align:start position:0%
so I ever went into the Gradle property
files<00:13:58.540><c> and</c><00:13:58.870><c> I</c><00:13:58.960><c> explicitly</c><00:13:59.500><c> disable</c><00:14:00.310><c> d8</c>

00:14:00.570 --> 00:14:00.580 align:start position:0%
files and I explicitly disable d8
 

00:14:00.580 --> 00:14:03.450 align:start position:0%
files and I explicitly disable d8
because<00:14:00.880><c> I</c><00:14:00.970><c> want</c><00:14:01.120><c> to</c><00:14:01.270><c> show</c><00:14:01.450><c> you</c><00:14:02.100><c> behavior</c><00:14:03.100><c> of</c>

00:14:03.450 --> 00:14:03.460 align:start position:0%
because I want to show you behavior of
 

00:14:03.460 --> 00:14:08.010 align:start position:0%
because I want to show you behavior of
DX<00:14:03.820><c> before</c><00:14:04.270><c> we</c><00:14:04.810><c> use</c><00:14:04.930><c> da</c><00:14:06.060><c> so</c><00:14:07.060><c> in</c><00:14:07.780><c> my</c><00:14:07.840><c> main</c>

00:14:08.010 --> 00:14:08.020 align:start position:0%
DX before we use da so in my main
 

00:14:08.020 --> 00:14:08.910 align:start position:0%
DX before we use da so in my main
application

00:14:08.910 --> 00:14:08.920 align:start position:0%
application
 

00:14:08.920 --> 00:14:11.070 align:start position:0%
application
I<00:14:08.950><c> added</c><00:14:09.490><c> some</c><00:14:09.880><c> code</c><00:14:10.090><c> to</c><00:14:10.330><c> my</c><00:14:10.510><c> own</c><00:14:10.780><c> click</c>

00:14:11.070 --> 00:14:11.080 align:start position:0%
I added some code to my own click
 

00:14:11.080 --> 00:14:14.280 align:start position:0%
I added some code to my own click
listener<00:14:11.440><c> to</c><00:14:12.400><c> have</c><00:14:13.060><c> the</c><00:14:13.210><c> snack</c><00:14:13.450><c> bar</c><00:14:13.660><c> print</c><00:14:13.990><c> a</c>

00:14:14.280 --> 00:14:14.290 align:start position:0%
listener to have the snack bar print a
 

00:14:14.290 --> 00:14:16.820 align:start position:0%
listener to have the snack bar print a
custom<00:14:14.680><c> message</c><00:14:14.980><c> and</c><00:14:15.460><c> then</c><00:14:15.970><c> I</c><00:14:16.060><c> have</c><00:14:16.150><c> a</c><00:14:16.240><c> method</c>

00:14:16.820 --> 00:14:16.830 align:start position:0%
custom message and then I have a method
 

00:14:16.830 --> 00:14:20.310 align:start position:0%
custom message and then I have a method
get<00:14:17.830><c> message</c><00:14:18.220><c> and</c><00:14:18.490><c> I</c><00:14:18.820><c> set</c><00:14:19.120><c> a</c><00:14:19.150><c> breakpoint</c><00:14:19.390><c> and</c>

00:14:20.310 --> 00:14:20.320 align:start position:0%
get message and I set a breakpoint and
 

00:14:20.320 --> 00:14:22.080 align:start position:0%
get message and I set a breakpoint and
so<00:14:20.500><c> let's</c><00:14:20.710><c> look</c><00:14:20.890><c> at</c><00:14:21.010><c> that</c><00:14:21.160><c> when</c><00:14:21.370><c> I</c><00:14:21.460><c> run</c><00:14:21.700><c> it</c><00:14:21.850><c> in</c>

00:14:22.080 --> 00:14:22.090 align:start position:0%
so let's look at that when I run it in
 

00:14:22.090 --> 00:14:28.570 align:start position:0%
so let's look at that when I run it in
the<00:14:22.720><c> emulator</c><00:14:22.750><c> on</c><00:14:23.140><c> the</c><00:14:23.380><c> debugger</c>

00:14:28.570 --> 00:14:28.580 align:start position:0%
 
 

00:14:28.580 --> 00:14:31.509 align:start position:0%
 
okay<00:14:29.360><c> so</c><00:14:29.480><c> the</c><00:14:29.630><c> app</c><00:14:29.750><c> is</c><00:14:29.899><c> running</c><00:14:30.080><c> I'm</c><00:14:30.980><c> gonna</c><00:14:31.250><c> hit</c>

00:14:31.509 --> 00:14:31.519 align:start position:0%
okay so the app is running I'm gonna hit
 

00:14:31.519 --> 00:14:35.500 align:start position:0%
okay so the app is running I'm gonna hit
the<00:14:31.700><c> button</c><00:14:32.000><c> so</c><00:14:32.300><c> that</c><00:14:32.330><c> I</c><00:14:33.880><c> get</c><00:14:34.880><c> hit</c><00:14:35.390><c> the</c>

00:14:35.500 --> 00:14:35.510 align:start position:0%
the button so that I get hit the
 

00:14:35.510 --> 00:14:39.310 align:start position:0%
the button so that I get hit the
breakpoint<00:14:35.890><c> so</c><00:14:36.890><c> I</c><00:14:37.480><c> initialize</c><00:14:38.480><c> X</c><00:14:38.779><c> to</c><00:14:39.080><c> be</c><00:14:39.200><c> the</c>

00:14:39.310 --> 00:14:39.320 align:start position:0%
breakpoint so I initialize X to be the
 

00:14:39.320 --> 00:14:40.630 align:start position:0%
breakpoint so I initialize X to be the
length<00:14:39.500><c> of</c><00:14:39.709><c> the</c><00:14:39.830><c> empty</c><00:14:40.100><c> string</c><00:14:40.310><c> so</c><00:14:40.610><c> that</c>

00:14:40.630 --> 00:14:40.640 align:start position:0%
length of the empty string so that
 

00:14:40.640 --> 00:14:42.910 align:start position:0%
length of the empty string so that
should<00:14:41.149><c> be</c><00:14:41.209><c> zero</c><00:14:41.420><c> and</c><00:14:41.720><c> so</c><00:14:41.779><c> in</c><00:14:42.740><c> the</c><00:14:42.800><c> if</c>

00:14:42.910 --> 00:14:42.920 align:start position:0%
should be zero and so in the if
 

00:14:42.920 --> 00:14:45.639 align:start position:0%
should be zero and so in the if
statement<00:14:42.950><c> I</c><00:14:43.550><c> expect</c><00:14:44.089><c> to</c><00:14:44.450><c> step</c><00:14:44.720><c> through</c><00:14:45.019><c> the</c>

00:14:45.639 --> 00:14:45.649 align:start position:0%
statement I expect to step through the
 

00:14:45.649 --> 00:14:48.819 align:start position:0%
statement I expect to step through the
true<00:14:45.890><c> case</c><00:14:46.899><c> and</c><00:14:47.899><c> of</c><00:14:48.260><c> course</c><00:14:48.290><c> that's</c><00:14:48.620><c> what</c>

00:14:48.819 --> 00:14:48.829 align:start position:0%
true case and of course that's what
 

00:14:48.829 --> 00:14:52.569 align:start position:0%
true case and of course that's what
happens<00:14:49.130><c> and</c><00:14:49.430><c> I'm</c><00:14:50.269><c> gonna</c><00:14:50.420><c> step</c><00:14:50.690><c> further</c><00:14:51.579><c> this</c>

00:14:52.569 --> 00:14:52.579 align:start position:0%
happens and I'm gonna step further this
 

00:14:52.579 --> 00:14:55.630 align:start position:0%
happens and I'm gonna step further this
is<00:14:52.700><c> bizarre</c><00:14:53.060><c> right</c><00:14:53.779><c> like</c><00:14:54.589><c> I</c><00:14:54.769><c> don't</c><00:14:55.040><c> expect</c><00:14:55.459><c> my</c>

00:14:55.630 --> 00:14:55.640 align:start position:0%
is bizarre right like I don't expect my
 

00:14:55.640 --> 00:14:57.610 align:start position:0%
is bizarre right like I don't expect my
code<00:14:55.940><c> to</c><00:14:55.970><c> evaluate</c><00:14:56.630><c> both</c><00:14:56.810><c> the</c><00:14:57.079><c> true</c><00:14:57.350><c> and</c><00:14:57.589><c> false</c>

00:14:57.610 --> 00:14:57.620 align:start position:0%
code to evaluate both the true and false
 

00:14:57.620 --> 00:15:02.860 align:start position:0%
code to evaluate both the true and false
case<00:14:58.600><c> so</c><00:14:59.600><c> that's</c><00:15:00.019><c> kind</c><00:15:00.170><c> of</c><00:15:00.200><c> weird</c><00:15:00.910><c> so</c><00:15:01.910><c> let's</c>

00:15:02.860 --> 00:15:02.870 align:start position:0%
case so that's kind of weird so let's
 

00:15:02.870 --> 00:15:04.569 align:start position:0%
case so that's kind of weird so let's
see<00:15:03.019><c> what</c><00:15:03.230><c> happens</c><00:15:03.500><c> if</c><00:15:03.620><c> I</c><00:15:03.740><c> run</c><00:15:04.100><c> and</c><00:15:04.339><c> see</c><00:15:04.459><c> what</c>

00:15:04.569 --> 00:15:04.579 align:start position:0%
see what happens if I run and see what
 

00:15:04.579 --> 00:15:07.750 align:start position:0%
see what happens if I run and see what
the<00:15:04.640><c> output</c><00:15:04.760><c> is</c><00:15:05.380><c> so</c><00:15:06.380><c> luckily</c><00:15:06.829><c> the</c><00:15:07.190><c> output</c><00:15:07.550><c> on</c>

00:15:07.750 --> 00:15:07.760 align:start position:0%
the output is so luckily the output on
 

00:15:07.760 --> 00:15:09.940 align:start position:0%
the output is so luckily the output on
the<00:15:07.850><c> screen</c><00:15:07.940><c> is</c><00:15:08.420><c> hello</c><00:15:09.200><c> there</c><00:15:09.410><c> what</c><00:15:09.920><c> I</c>

00:15:09.940 --> 00:15:09.950 align:start position:0%
the screen is hello there what I
 

00:15:09.950 --> 00:15:12.490 align:start position:0%
the screen is hello there what I
expected<00:15:10.579><c> but</c><00:15:10.930><c> there</c><00:15:11.930><c> was</c><00:15:12.050><c> something</c><00:15:12.320><c> weird</c>

00:15:12.490 --> 00:15:12.500 align:start position:0%
expected but there was something weird
 

00:15:12.500 --> 00:15:13.960 align:start position:0%
expected but there was something weird
going<00:15:12.589><c> on</c><00:15:12.860><c> what</c><00:15:13.040><c> what</c><00:15:13.279><c> was</c><00:15:13.399><c> going</c><00:15:13.610><c> on</c>

00:15:13.960 --> 00:15:13.970 align:start position:0%
going on what what was going on
 

00:15:13.970 --> 00:15:19.630 align:start position:0%
going on what what was going on
okay<00:15:14.660><c> so</c><00:15:14.720><c> let's</c><00:15:16.990><c> remove</c><00:15:17.990><c> this</c><00:15:18.260><c> and</c><00:15:18.640><c> sinker</c>

00:15:19.630 --> 00:15:19.640 align:start position:0%
okay so let's remove this and sinker
 

00:15:19.640 --> 00:15:21.310 align:start position:0%
okay so let's remove this and sinker
Gradle<00:15:20.029><c> build</c><00:15:20.089><c> so</c><00:15:20.540><c> that</c><00:15:20.570><c> we're</c><00:15:20.870><c> switching</c><00:15:21.140><c> to</c>

00:15:21.310 --> 00:15:21.320 align:start position:0%
Gradle build so that we're switching to
 

00:15:21.320 --> 00:15:27.360 align:start position:0%
Gradle build so that we're switching to
d8<00:15:21.560><c> and</c><00:15:22.390><c> let's</c><00:15:24.070><c> stop</c><00:15:25.070><c> that</c><00:15:25.339><c> and</c><00:15:25.610><c> redeploy</c><00:15:26.510><c> it</c>

00:15:27.360 --> 00:15:27.370 align:start position:0%
d8 and let's stop that and redeploy it
 

00:15:27.370 --> 00:15:31.720 align:start position:0%
d8 and let's stop that and redeploy it
so<00:15:28.370><c> while</c><00:15:28.519><c> this</c><00:15:28.610><c> is</c><00:15:28.700><c> going</c><00:15:28.790><c> on</c><00:15:28.940><c> so</c><00:15:29.149><c> in</c><00:15:29.269><c> DX</c><00:15:30.730><c> we</c>

00:15:31.720 --> 00:15:31.730 align:start position:0%
so while this is going on so in DX we
 

00:15:31.730 --> 00:15:32.949 align:start position:0%
so while this is going on so in DX we
had<00:15:31.850><c> this</c><00:15:31.970><c> issue</c><00:15:32.180><c> and</c><00:15:32.360><c> it</c><00:15:32.480><c> was</c><00:15:32.570><c> actually</c><00:15:32.870><c> a</c>

00:15:32.949 --> 00:15:32.959 align:start position:0%
had this issue and it was actually a
 

00:15:32.959 --> 00:15:37.480 align:start position:0%
had this issue and it was actually a
very<00:15:33.459><c> high</c><00:15:34.459><c> start</c><00:15:34.850><c> bug</c><00:15:35.420><c> report</c><00:15:36.430><c> and</c><00:15:37.430><c> the</c>

00:15:37.480 --> 00:15:37.490 align:start position:0%
very high start bug report and the
 

00:15:37.490 --> 00:15:39.730 align:start position:0%
very high start bug report and the
reason<00:15:37.730><c> it</c><00:15:37.820><c> was</c><00:15:37.880><c> happening</c><00:15:38.300><c> is</c><00:15:38.420><c> that</c><00:15:38.660><c> not</c><00:15:39.560><c> only</c>

00:15:39.730 --> 00:15:39.740 align:start position:0%
reason it was happening is that not only
 

00:15:39.740 --> 00:15:42.069 align:start position:0%
reason it was happening is that not only
is<00:15:40.100><c> the</c><00:15:40.399><c> the</c><00:15:40.970><c> VM</c><00:15:41.270><c> very</c><00:15:41.570><c> different</c><00:15:41.930><c> between</c>

00:15:42.069 --> 00:15:42.079 align:start position:0%
is the the VM very different between
 

00:15:42.079 --> 00:15:45.220 align:start position:0%
is the the VM very different between
stack<00:15:42.980><c> and</c><00:15:43.220><c> register</c><00:15:43.700><c> the</c><00:15:44.600><c> way</c><00:15:44.750><c> that</c><00:15:44.930><c> debug</c>

00:15:45.220 --> 00:15:45.230 align:start position:0%
stack and register the way that debug
 

00:15:45.230 --> 00:15:48.130 align:start position:0%
stack and register the way that debug
information<00:15:45.470><c> is</c><00:15:45.920><c> stored</c><00:15:46.160><c> in</c><00:15:46.810><c> Java</c><00:15:47.810><c> the</c><00:15:47.959><c> class</c>

00:15:48.130 --> 00:15:48.140 align:start position:0%
information is stored in Java the class
 

00:15:48.140 --> 00:15:50.500 align:start position:0%
information is stored in Java the class
files<00:15:48.440><c> in</c><00:15:48.649><c> dalvik</c><00:15:48.829><c> is</c><00:15:49.220><c> very</c><00:15:49.430><c> different</c><00:15:49.820><c> and</c><00:15:50.089><c> in</c>

00:15:50.500 --> 00:15:50.510 align:start position:0%
files in dalvik is very different and in
 

00:15:50.510 --> 00:15:52.900 align:start position:0%
files in dalvik is very different and in
Java<00:15:50.810><c> it</c><00:15:51.050><c> starts</c><00:15:51.470><c> with</c><00:15:51.950><c> the</c><00:15:52.100><c> instructions</c><00:15:52.700><c> and</c>

00:15:52.900 --> 00:15:52.910 align:start position:0%
Java it starts with the instructions and
 

00:15:52.910 --> 00:15:55.420 align:start position:0%
Java it starts with the instructions and
in<00:15:53.660><c> dalvik</c><00:15:53.959><c> it's</c><00:15:54.380><c> a</c><00:15:54.500><c> state</c><00:15:54.680><c> machine</c><00:15:54.890><c> and</c><00:15:55.250><c> so</c><00:15:55.339><c> we</c>

00:15:55.420 --> 00:15:55.430 align:start position:0%
in dalvik it's a state machine and so we
 

00:15:55.430 --> 00:15:57.610 align:start position:0%
in dalvik it's a state machine and so we
had<00:15:55.550><c> to</c><00:15:55.579><c> translate</c><00:15:56.050><c> bolts</c><00:15:57.050><c> from</c><00:15:57.140><c> register</c>

00:15:57.610 --> 00:15:57.620 align:start position:0%
had to translate bolts from register
 

00:15:57.620 --> 00:15:59.170 align:start position:0%
had to translate bolts from register
stack<00:15:57.890><c> to</c><00:15:58.010><c> register</c><00:15:58.399><c> and</c><00:15:58.610><c> the</c><00:15:58.910><c> debug</c>

00:15:59.170 --> 00:15:59.180 align:start position:0%
stack to register and the debug
 

00:15:59.180 --> 00:16:01.840 align:start position:0%
stack to register and the debug
information<00:15:59.420><c> and</c><00:15:59.930><c> so</c><00:16:00.620><c> sometimes</c><00:16:01.040><c> information</c>

00:16:01.840 --> 00:16:01.850 align:start position:0%
information and so sometimes information
 

00:16:01.850 --> 00:16:04.990 align:start position:0%
information and so sometimes information
got<00:16:02.270><c> lost</c><00:16:02.800><c> so</c><00:16:03.800><c> like</c><00:16:04.190><c> it</c><00:16:04.339><c> might</c><00:16:04.520><c> end</c><00:16:04.550><c> up</c><00:16:04.820><c> with</c><00:16:04.970><c> a</c>

00:16:04.990 --> 00:16:05.000 align:start position:0%
got lost so like it might end up with a
 

00:16:05.000 --> 00:16:07.449 align:start position:0%
got lost so like it might end up with a
single<00:16:05.209><c> return</c><00:16:05.630><c> statements</c><00:16:06.290><c> in</c><00:16:06.440><c> the</c><00:16:07.130><c> Delphic</c>

00:16:07.449 --> 00:16:07.459 align:start position:0%
single return statements in the Delphic
 

00:16:07.459 --> 00:16:09.040 align:start position:0%
single return statements in the Delphic
bytecode<00:16:07.880><c> and</c><00:16:07.910><c> then</c><00:16:08.180><c> we</c><00:16:08.329><c> couldn't</c><00:16:08.570><c> map</c><00:16:08.779><c> that</c>

00:16:09.040 --> 00:16:09.050 align:start position:0%
bytecode and then we couldn't map that
 

00:16:09.050 --> 00:16:13.449 align:start position:0%
bytecode and then we couldn't map that
in<00:16:09.410><c> the</c><00:16:09.890><c> debug</c><00:16:10.100><c> information</c><00:16:10.399><c> in</c><00:16:11.240><c> d8</c><00:16:12.170><c> we</c><00:16:13.130><c> track</c>

00:16:13.449 --> 00:16:13.459 align:start position:0%
in the debug information in d8 we track
 

00:16:13.459 --> 00:16:15.010 align:start position:0%
in the debug information in d8 we track
all<00:16:13.610><c> the</c><00:16:13.730><c> debug</c><00:16:13.970><c> information</c><00:16:14.180><c> carefully</c><00:16:14.660><c> and</c>

00:16:15.010 --> 00:16:15.020 align:start position:0%
all the debug information carefully and
 

00:16:15.020 --> 00:16:16.750 align:start position:0%
all the debug information carefully and
we<00:16:15.140><c> have</c><00:16:15.230><c> a</c><00:16:15.260><c> whole</c><00:16:15.440><c> system</c><00:16:15.800><c> of</c><00:16:16.040><c> assertions</c><00:16:16.610><c> to</c>

00:16:16.750 --> 00:16:16.760 align:start position:0%
we have a whole system of assertions to
 

00:16:16.760 --> 00:16:18.130 align:start position:0%
we have a whole system of assertions to
make<00:16:16.880><c> sure</c><00:16:17.060><c> that</c><00:16:17.240><c> we</c><00:16:17.390><c> don't</c><00:16:17.600><c> lose</c><00:16:17.779><c> debug</c>

00:16:18.130 --> 00:16:18.140 align:start position:0%
make sure that we don't lose debug
 

00:16:18.140 --> 00:16:21.880 align:start position:0%
make sure that we don't lose debug
information<00:16:18.760><c> so</c><00:16:19.760><c> let's</c><00:16:19.970><c> hit</c><00:16:20.180><c> the</c><00:16:20.620><c> button</c><00:16:21.620><c> here</c>

00:16:21.880 --> 00:16:21.890 align:start position:0%
information so let's hit the button here
 

00:16:21.890 --> 00:16:24.730 align:start position:0%
information so let's hit the button here
we're<00:16:22.339><c> hitting</c><00:16:22.850><c> the</c><00:16:22.940><c> breakpoint</c><00:16:23.449><c> again</c><00:16:23.740><c> we</c>

00:16:24.730 --> 00:16:24.740 align:start position:0%
we're hitting the breakpoint again we
 

00:16:24.740 --> 00:16:26.590 align:start position:0%
we're hitting the breakpoint again we
step<00:16:25.040><c> through</c><00:16:25.070><c> we</c><00:16:25.760><c> get</c><00:16:25.910><c> into</c><00:16:26.209><c> the</c><00:16:26.300><c> truth</c>

00:16:26.590 --> 00:16:26.600 align:start position:0%
step through we get into the truth
 

00:16:26.600 --> 00:16:31.860 align:start position:0%
step through we get into the truth
branch<00:16:27.560><c> and</c><00:16:27.860><c> we</c><00:16:28.459><c> jump</c><00:16:28.640><c> out</c><00:16:28.760><c> of</c><00:16:28.790><c> it</c>

00:16:31.860 --> 00:16:31.870 align:start position:0%
 
 

00:16:31.870 --> 00:16:33.269 align:start position:0%
 
thank<00:16:32.870><c> you</c>

00:16:33.269 --> 00:16:33.279 align:start position:0%
thank you
 

00:16:33.279 --> 00:16:35.769 align:start position:0%
thank you
okay<00:16:34.279><c> so</c><00:16:34.340><c> let's</c><00:16:34.820><c> switch</c><00:16:34.910><c> back</c><00:16:35.210><c> to</c><00:16:35.240><c> the</c><00:16:35.390><c> slides</c>

00:16:35.769 --> 00:16:35.779 align:start position:0%
okay so let's switch back to the slides
 

00:16:35.779 --> 00:16:43.060 align:start position:0%
okay so let's switch back to the slides
so<00:16:38.050><c> we</c><00:16:39.130><c> have</c><00:16:40.130><c> done</c><00:16:40.279><c> a</c><00:16:40.310><c> lot</c><00:16:40.430><c> of</c><00:16:40.460><c> work</c><00:16:40.580><c> on</c><00:16:40.760><c> d8</c><00:16:42.070><c> it</c>

00:16:43.060 --> 00:16:43.070 align:start position:0%
so we have done a lot of work on d8 it
 

00:16:43.070 --> 00:16:45.250 align:start position:0%
so we have done a lot of work on d8 it
has<00:16:43.279><c> better</c><00:16:43.790><c> debug</c><00:16:44.150><c> information</c><00:16:44.390><c> but</c><00:16:45.140><c> it's</c>

00:16:45.250 --> 00:16:45.260 align:start position:0%
has better debug information but it's
 

00:16:45.260 --> 00:16:49.019 align:start position:0%
has better debug information but it's
also<00:16:45.380><c> faster</c><00:16:46.150><c> so</c><00:16:47.150><c> here</c><00:16:47.390><c> is</c><00:16:47.510><c> some</c><00:16:47.690><c> data</c><00:16:47.839><c> around</c>

00:16:49.019 --> 00:16:49.029 align:start position:0%
also faster so here is some data around
 

00:16:49.029 --> 00:16:53.050 align:start position:0%
also faster so here is some data around
build<00:16:50.029><c> time</c><00:16:50.270><c> on</c><00:16:50.480><c> the</c><00:16:50.750><c> Google</c><00:16:50.990><c> nest</c><00:16:51.170><c> app</c><00:16:51.640><c> so</c><00:16:52.640><c> we</c>

00:16:53.050 --> 00:16:53.060 align:start position:0%
build time on the Google nest app so we
 

00:16:53.060 --> 00:16:56.340 align:start position:0%
build time on the Google nest app so we
ship<00:16:53.270><c> d8</c><00:16:53.660><c> as</c><00:16:53.960><c> a</c><00:16:54.020><c> preview</c><00:16:54.620><c> in</c><00:16:54.830><c> under</c><00:16:55.610><c> studio</c><00:16:55.850><c> 3.1</c>

00:16:56.340 --> 00:16:56.350 align:start position:0%
ship d8 as a preview in under studio 3.1
 

00:16:56.350 --> 00:16:59.650 align:start position:0%
ship d8 as a preview in under studio 3.1
there<00:16:57.350><c> were</c><00:16:57.529><c> not</c><00:16:57.740><c> always</c><00:16:57.890><c> faster</c><00:16:58.520><c> but</c><00:16:59.420><c> we</c><00:16:59.570><c> had</c>

00:16:59.650 --> 00:16:59.660 align:start position:0%
there were not always faster but we had
 

00:16:59.660 --> 00:17:03.130 align:start position:0%
there were not always faster but we had
a<00:16:59.690><c> lot</c><00:16:59.779><c> more</c><00:16:59.810><c> work</c><00:16:59.960><c> since</c><00:17:00.380><c> 3.1</c><00:17:01.420><c> and</c><00:17:02.420><c> so</c><00:17:02.660><c> in</c><00:17:02.750><c> 3.2</c>

00:17:03.130 --> 00:17:03.140 align:start position:0%
a lot more work since 3.1 and so in 3.2
 

00:17:03.140 --> 00:17:05.679 align:start position:0%
a lot more work since 3.1 and so in 3.2
on<00:17:03.680><c> average</c><00:17:04.310><c> were</c><00:17:04.459><c> about</c><00:17:04.640><c> 16</c><00:17:05.089><c> percent</c><00:17:05.240><c> faster</c>

00:17:05.679 --> 00:17:05.689 align:start position:0%
on average were about 16 percent faster
 

00:17:05.689 --> 00:17:08.110 align:start position:0%
on average were about 16 percent faster
in<00:17:06.199><c> clean</c><00:17:06.860><c> builds</c><00:17:07.160><c> and</c><00:17:07.339><c> of</c><00:17:07.939><c> course</c>

00:17:08.110 --> 00:17:08.120 align:start position:0%
in clean builds and of course
 

00:17:08.120 --> 00:17:09.910 align:start position:0%
in clean builds and of course
incremental<00:17:08.510><c> builds</c><00:17:09.110><c> like</c><00:17:09.380><c> the</c><00:17:09.560><c> Delta</c><00:17:09.740><c> is</c>

00:17:09.910 --> 00:17:09.920 align:start position:0%
incremental builds like the Delta is
 

00:17:09.920 --> 00:17:11.230 align:start position:0%
incremental builds like the Delta is
smaller<00:17:10.160><c> because</c><00:17:10.370><c> there's</c><00:17:10.670><c> less</c><00:17:10.819><c> code</c><00:17:11.089><c> to</c>

00:17:11.230 --> 00:17:11.240 align:start position:0%
smaller because there's less code to
 

00:17:11.240 --> 00:17:14.679 align:start position:0%
smaller because there's less code to
compile<00:17:11.920><c> so</c><00:17:12.920><c> still</c><00:17:13.850><c> 16</c><00:17:14.209><c> percent</c><00:17:14.480><c> this</c><00:17:14.630><c> is</c>

00:17:14.679 --> 00:17:14.689 align:start position:0%
compile so still 16 percent this is
 

00:17:14.689 --> 00:17:20.020 align:start position:0%
compile so still 16 percent this is
pretty<00:17:15.020><c> nice</c><00:17:16.420><c> so</c><00:17:17.770><c> d8</c><00:17:18.770><c> is</c><00:17:18.800><c> already</c><00:17:19.370><c> widely</c><00:17:19.640><c> used</c>

00:17:20.020 --> 00:17:20.030 align:start position:0%
pretty nice so d8 is already widely used
 

00:17:20.030 --> 00:17:22.750 align:start position:0%
pretty nice so d8 is already widely used
if<00:17:20.750><c> you're</c><00:17:20.959><c> using</c><00:17:21.170><c> Android</c><00:17:21.740><c> P</c><00:17:22.040><c> beta</c><00:17:22.310><c> that</c><00:17:22.640><c> was</c>

00:17:22.750 --> 00:17:22.760 align:start position:0%
if you're using Android P beta that was
 

00:17:22.760 --> 00:17:26.559 align:start position:0%
if you're using Android P beta that was
released<00:17:23.089><c> yesterday</c><00:17:25.270><c> Android</c><00:17:26.270><c> T</c><00:17:26.449><c> is</c>

00:17:26.559 --> 00:17:26.569 align:start position:0%
released yesterday Android T is
 

00:17:26.569 --> 00:17:30.100 align:start position:0%
released yesterday Android T is
completely<00:17:27.319><c> built</c><00:17:27.439><c> with</c><00:17:27.800><c> d8</c><00:17:28.660><c> the</c><00:17:29.660><c> Google</c><00:17:29.930><c> Docs</c>

00:17:30.100 --> 00:17:30.110 align:start position:0%
completely built with d8 the Google Docs
 

00:17:30.110 --> 00:17:32.200 align:start position:0%
completely built with d8 the Google Docs
app<00:17:30.290><c> is</c><00:17:30.560><c> already</c><00:17:31.250><c> built</c><00:17:31.400><c> with</c><00:17:31.550><c> the</c><00:17:31.670><c> AIDS</c><00:17:31.820><c> and</c>

00:17:32.200 --> 00:17:32.210 align:start position:0%
app is already built with the AIDS and
 

00:17:32.210 --> 00:17:33.790 align:start position:0%
app is already built with the AIDS and
then<00:17:32.450><c> Google</c><00:17:32.780><c> Photos</c><00:17:33.170><c> is</c><00:17:33.380><c> right</c><00:17:33.560><c> now</c><00:17:33.680><c> in</c>

00:17:33.790 --> 00:17:33.800 align:start position:0%
then Google Photos is right now in
 

00:17:33.800 --> 00:17:36.640 align:start position:0%
then Google Photos is right now in
canary<00:17:34.220><c> using</c><00:17:34.820><c> d8</c><00:17:35.090><c> and</c><00:17:35.480><c> many</c><00:17:36.140><c> more</c><00:17:36.290><c> Google</c>

00:17:36.640 --> 00:17:36.650 align:start position:0%
canary using d8 and many more Google
 

00:17:36.650 --> 00:17:42.100 align:start position:0%
canary using d8 and many more Google
Apps<00:17:36.770><c> will</c><00:17:37.040><c> follow</c><00:17:37.370><c> soon</c><00:17:40.179><c> okay</c><00:17:41.179><c> so</c><00:17:41.240><c> let's</c><00:17:41.990><c> move</c>

00:17:42.100 --> 00:17:42.110 align:start position:0%
Apps will follow soon okay so let's move
 

00:17:42.110 --> 00:17:44.970 align:start position:0%
Apps will follow soon okay so let's move
over<00:17:42.290><c> to</c><00:17:42.500><c> RA</c>

00:17:44.970 --> 00:17:44.980 align:start position:0%
 
 

00:17:44.980 --> 00:17:49.030 align:start position:0%
 
all<00:17:45.980><c> right</c><00:17:46.160><c> is</c><00:17:46.310><c> our</c><00:17:46.460><c> new</c><00:17:46.610><c> shrinker</c><00:17:47.030><c> so</c><00:17:47.980><c> why</c><00:17:48.980><c> you</c>

00:17:49.030 --> 00:17:49.040 align:start position:0%
all right is our new shrinker so why you
 

00:17:49.040 --> 00:17:52.510 align:start position:0%
all right is our new shrinker so why you
want<00:17:49.340><c> to</c><00:17:49.429><c> shrink</c><00:17:49.580><c> ur</c><00:17:49.840><c> so</c><00:17:50.950><c> most</c><00:17:51.950><c> people</c><00:17:52.310><c> who</c>

00:17:52.510 --> 00:17:52.520 align:start position:0%
want to shrink ur so most people who
 

00:17:52.520 --> 00:17:53.740 align:start position:0%
want to shrink ur so most people who
build<00:17:52.700><c> apps</c><00:17:52.880><c> they</c><00:17:53.150><c> use</c><00:17:53.270><c> a</c><00:17:53.300><c> lot</c><00:17:53.480><c> of</c><00:17:53.510><c> libraries</c>

00:17:53.740 --> 00:17:53.750 align:start position:0%
build apps they use a lot of libraries
 

00:17:53.750 --> 00:17:57.400 align:start position:0%
build apps they use a lot of libraries
like<00:17:54.590><c> Google</c><00:17:55.010><c> guava</c><00:17:55.310><c> Apache</c><00:17:56.090><c> Commons</c><00:17:56.410><c> Arak</c>

00:17:57.400 --> 00:17:57.410 align:start position:0%
like Google guava Apache Commons Arak
 

00:17:57.410 --> 00:18:00.070 align:start position:0%
like Google guava Apache Commons Arak
Java<00:17:57.850><c> and</c><00:17:58.850><c> you</c><00:17:58.880><c> usually</c><00:17:59.090><c> don't</c><00:17:59.420><c> use</c><00:17:59.540><c> that</c><00:17:59.870><c> full</c>

00:18:00.070 --> 00:18:00.080 align:start position:0%
Java and you usually don't use that full
 

00:18:00.080 --> 00:18:01.960 align:start position:0%
Java and you usually don't use that full
library<00:18:00.260><c> you</c><00:18:00.530><c> might</c><00:18:00.890><c> use</c><00:18:01.100><c> maybe</c><00:18:01.400><c> 10</c><00:18:01.700><c> 15</c>

00:18:01.960 --> 00:18:01.970 align:start position:0%
library you might use maybe 10 15
 

00:18:01.970 --> 00:18:04.630 align:start position:0%
library you might use maybe 10 15
percent<00:18:02.480><c> of</c><00:18:02.570><c> the</c><00:18:02.660><c> library</c><00:18:03.050><c> yet</c><00:18:04.040><c> if</c><00:18:04.220><c> you</c><00:18:04.370><c> ship</c>

00:18:04.630 --> 00:18:04.640 align:start position:0%
percent of the library yet if you ship
 

00:18:04.640 --> 00:18:06.250 align:start position:0%
percent of the library yet if you ship
it<00:18:04.790><c> as</c><00:18:04.940><c> is</c><00:18:05.090><c> you</c><00:18:05.420><c> would</c><00:18:05.570><c> be</c><00:18:05.810><c> shipping</c><00:18:06.020><c> all</c><00:18:06.230><c> that</c>

00:18:06.250 --> 00:18:06.260 align:start position:0%
it as is you would be shipping all that
 

00:18:06.260 --> 00:18:09.100 align:start position:0%
it as is you would be shipping all that
code<00:18:06.830><c> that</c><00:18:07.010><c> you</c><00:18:07.130><c> don't</c><00:18:07.310><c> use</c><00:18:07.630><c> and</c><00:18:08.630><c> application</c>

00:18:09.100 --> 00:18:09.110 align:start position:0%
code that you don't use and application
 

00:18:09.110 --> 00:18:11.560 align:start position:0%
code that you don't use and application
size<00:18:09.620><c> is</c><00:18:09.740><c> important</c><00:18:10.250><c> right</c><00:18:10.520><c> people</c><00:18:11.420><c> don't</c>

00:18:11.560 --> 00:18:11.570 align:start position:0%
size is important right people don't
 

00:18:11.570 --> 00:18:13.870 align:start position:0%
size is important right people don't
want<00:18:11.720><c> to</c><00:18:11.780><c> pay</c><00:18:12.020><c> for</c><00:18:12.050><c> it</c><00:18:12.410><c> in</c><00:18:12.560><c> their</c><00:18:12.679><c> bandwidth</c><00:18:13.130><c> it</c>

00:18:13.870 --> 00:18:13.880 align:start position:0%
want to pay for it in their bandwidth it
 

00:18:13.880 --> 00:18:17.080 align:start position:0%
want to pay for it in their bandwidth it
uses<00:18:14.270><c> disk</c><00:18:14.480><c> space</c><00:18:14.780><c> on</c><00:18:14.990><c> the</c><00:18:15.080><c> device</c><00:18:15.610><c> and</c><00:18:16.610><c> so</c><00:18:16.790><c> the</c>

00:18:17.080 --> 00:18:17.090 align:start position:0%
uses disk space on the device and so the
 

00:18:17.090 --> 00:18:19.300 align:start position:0%
uses disk space on the device and so the
smaller<00:18:17.300><c> app</c><00:18:17.510><c> the</c><00:18:17.690><c> better</c><00:18:17.870><c> and</c><00:18:18.350><c> there</c><00:18:19.160><c> was</c><00:18:19.280><c> a</c>

00:18:19.300 --> 00:18:19.310 align:start position:0%
smaller app the better and there was a
 

00:18:19.310 --> 00:18:21.400 align:start position:0%
smaller app the better and there was a
previous<00:18:19.880><c> solution</c><00:18:20.270><c> to</c><00:18:20.390><c> this</c><00:18:20.480><c> the</c><00:18:21.050><c> ProGuard</c>

00:18:21.400 --> 00:18:21.410 align:start position:0%
previous solution to this the ProGuard
 

00:18:21.410 --> 00:18:24.220 align:start position:0%
previous solution to this the ProGuard
tool<00:18:21.820><c> but</c><00:18:22.820><c> we</c><00:18:22.940><c> heard</c><00:18:23.030><c> some</c><00:18:23.210><c> people</c><00:18:23.330><c> that</c><00:18:23.660><c> they</c>

00:18:24.220 --> 00:18:24.230 align:start position:0%
tool but we heard some people that they
 

00:18:24.230 --> 00:18:25.990 align:start position:0%
tool but we heard some people that they
had<00:18:24.410><c> issues</c><00:18:24.710><c> with</c><00:18:24.860><c> it</c><00:18:25.040><c> it</c><00:18:25.130><c> was</c><00:18:25.250><c> taking</c><00:18:25.730><c> a</c><00:18:25.820><c> long</c>

00:18:25.990 --> 00:18:26.000 align:start position:0%
had issues with it it was taking a long
 

00:18:26.000 --> 00:18:28.090 align:start position:0%
had issues with it it was taking a long
time<00:18:26.240><c> the</c><00:18:26.870><c> code</c><00:18:27.050><c> wasn't</c><00:18:27.230><c> as</c><00:18:27.440><c> small</c><00:18:27.679><c> as</c><00:18:27.860><c> they</c>

00:18:28.090 --> 00:18:28.100 align:start position:0%
time the code wasn't as small as they
 

00:18:28.100 --> 00:18:30.030 align:start position:0%
time the code wasn't as small as they
wish<00:18:28.250><c> it</c><00:18:28.550><c> didn't</c><00:18:28.820><c> really</c><00:18:29.060><c> understand</c><00:18:29.420><c> Android</c>

00:18:30.030 --> 00:18:30.040 align:start position:0%
wish it didn't really understand Android
 

00:18:30.040 --> 00:18:32.440 align:start position:0%
wish it didn't really understand Android
and<00:18:31.040><c> so</c><00:18:31.190><c> we</c><00:18:31.340><c> invested</c><00:18:31.850><c> in</c><00:18:31.940><c> building</c><00:18:32.090><c> a</c><00:18:32.330><c> new</c>

00:18:32.440 --> 00:18:32.450 align:start position:0%
and so we invested in building a new
 

00:18:32.450 --> 00:18:35.800 align:start position:0%
and so we invested in building a new
shrinker<00:18:32.900><c> we</c><00:18:33.830><c> also</c><00:18:33.950><c> made</c><00:18:34.400><c> the</c><00:18:34.429><c> error</c><00:18:35.330><c> messages</c>

00:18:35.800 --> 00:18:35.810 align:start position:0%
shrinker we also made the error messages
 

00:18:35.810 --> 00:18:38.470 align:start position:0%
shrinker we also made the error messages
clearer<00:18:36.620><c> and</c><00:18:36.980><c> of</c><00:18:37.550><c> course</c><00:18:37.760><c> we</c><00:18:38.000><c> understood</c><00:18:38.420><c> that</c>

00:18:38.470 --> 00:18:38.480 align:start position:0%
clearer and of course we understood that
 

00:18:38.480 --> 00:18:41.080 align:start position:0%
clearer and of course we understood that
people<00:18:38.960><c> are</c><00:18:39.440><c> already</c><00:18:39.560><c> using</c><00:18:39.830><c> ProGuard</c><00:18:40.400><c> and</c><00:18:40.550><c> so</c>

00:18:41.080 --> 00:18:41.090 align:start position:0%
people are already using ProGuard and so
 

00:18:41.090 --> 00:18:42.630 align:start position:0%
people are already using ProGuard and so
we<00:18:41.210><c> decided</c><00:18:41.540><c> that</c><00:18:41.660><c> we</c><00:18:41.870><c> wanted</c><00:18:41.990><c> to</c><00:18:42.290><c> be</c>

00:18:42.630 --> 00:18:42.640 align:start position:0%
we decided that we wanted to be
 

00:18:42.640 --> 00:18:44.700 align:start position:0%
we decided that we wanted to be
are<00:18:42.700><c> compatible</c><00:18:43.090><c> and</c><00:18:43.570><c> so</c><00:18:43.990><c> we</c><00:18:44.140><c> understand</c><00:18:44.530><c> all</c>

00:18:44.700 --> 00:18:44.710 align:start position:0%
are compatible and so we understand all
 

00:18:44.710 --> 00:18:49.740 align:start position:0%
are compatible and so we understand all
of<00:18:44.890><c> programs</c><00:18:45.640><c> keep</c><00:18:45.820><c> rules</c><00:18:48.540><c> so</c><00:18:49.540><c> how</c><00:18:49.690><c> does</c>

00:18:49.740 --> 00:18:49.750 align:start position:0%
of programs keep rules so how does
 

00:18:49.750 --> 00:18:52.440 align:start position:0%
of programs keep rules so how does
ProGuard<00:18:50.320><c> work</c><00:18:50.740><c> so</c><00:18:51.010><c> before</c><00:18:51.370><c> so</c><00:18:51.910><c> whoever</c><00:18:52.270><c> ate</c>

00:18:52.440 --> 00:18:52.450 align:start position:0%
ProGuard work so before so whoever ate
 

00:18:52.450 --> 00:18:55.140 align:start position:0%
ProGuard work so before so whoever ate
works<00:18:52.690><c> so</c><00:18:52.840><c> before</c><00:18:53.170><c> in</c><00:18:53.500><c> Gradle</c><00:18:54.190><c> we</c><00:18:54.820><c> would</c><00:18:54.970><c> run</c>

00:18:55.140 --> 00:18:55.150 align:start position:0%
works so before in Gradle we would run
 

00:18:55.150 --> 00:18:58.020 align:start position:0%
works so before in Gradle we would run
ProGuard<00:18:56.070><c> between</c><00:18:57.070><c> your</c><00:18:57.190><c> java</c><00:18:57.400><c> compilation</c>

00:18:58.020 --> 00:18:58.030 align:start position:0%
ProGuard between your java compilation
 

00:18:58.030 --> 00:19:00.060 align:start position:0%
ProGuard between your java compilation
and<00:18:58.270><c> the</c><00:18:58.600><c> next</c><00:18:58.930><c> generation</c><00:18:59.380><c> and</c><00:18:59.680><c> the</c><00:18:59.800><c> reason</c>

00:19:00.060 --> 00:19:00.070 align:start position:0%
and the next generation and the reason
 

00:19:00.070 --> 00:19:02.970 align:start position:0%
and the next generation and the reason
for<00:19:00.250><c> that</c><00:19:00.400><c> is</c><00:19:00.640><c> that</c><00:19:00.990><c> ProGuard</c><00:19:01.990><c> is</c><00:19:02.140><c> a</c><00:19:02.200><c> java</c><00:19:02.590><c> to</c>

00:19:02.970 --> 00:19:02.980 align:start position:0%
for that is that ProGuard is a java to
 

00:19:02.980 --> 00:19:06.900 align:start position:0%
for that is that ProGuard is a java to
java<00:19:03.720><c> compilation</c><00:19:05.010><c> and</c><00:19:06.010><c> so</c><00:19:06.190><c> this</c><00:19:06.370><c> added</c><00:19:06.700><c> more</c>

00:19:06.900 --> 00:19:06.910 align:start position:0%
java compilation and so this added more
 

00:19:06.910 --> 00:19:10.920 align:start position:0%
java compilation and so this added more
time<00:19:07.150><c> to</c><00:19:07.330><c> your</c><00:19:07.450><c> build</c><00:19:08.640><c> in</c><00:19:09.640><c> Android</c><00:19:09.970><c> studio</c><00:19:10.000><c> 3.2</c>

00:19:10.920 --> 00:19:10.930 align:start position:0%
time to your build in Android studio 3.2
 

00:19:10.930 --> 00:19:13.950 align:start position:0%
time to your build in Android studio 3.2
you<00:19:11.500><c> can</c><00:19:11.710><c> enable</c><00:19:11.950><c> our</c><00:19:12.280><c> eight</c><00:19:12.600><c> it's</c><00:19:13.600><c> still</c>

00:19:13.950 --> 00:19:13.960 align:start position:0%
you can enable our eight it's still
 

00:19:13.960 --> 00:19:16.140 align:start position:0%
you can enable our eight it's still
experimental<00:19:14.260><c> you</c><00:19:14.680><c> can</c><00:19:14.800><c> enable</c><00:19:14.950><c> it</c><00:19:15.250><c> using</c>

00:19:16.140 --> 00:19:16.150 align:start position:0%
experimental you can enable it using
 

00:19:16.150 --> 00:19:18.450 align:start position:0%
experimental you can enable it using
this<00:19:16.240><c> setting</c><00:19:16.480><c> and</c><00:19:17.200><c> what</c><00:19:17.770><c> will</c><00:19:17.890><c> happen</c><00:19:18.160><c> is</c><00:19:18.280><c> it</c>

00:19:18.450 --> 00:19:18.460 align:start position:0%
this setting and what will happen is it
 

00:19:18.460 --> 00:19:22.350 align:start position:0%
this setting and what will happen is it
will<00:19:18.490><c> replace</c><00:19:18.910><c> ProGuard</c><00:19:19.840><c> G</c><00:19:20.260><c> sugar</c><00:19:20.580><c> d8</c><00:19:21.580><c> with</c>

00:19:22.350 --> 00:19:22.360 align:start position:0%
will replace ProGuard G sugar d8 with
 

00:19:22.360 --> 00:19:25.080 align:start position:0%
will replace ProGuard G sugar d8 with
one<00:19:22.570><c> single</c><00:19:22.930><c> process</c><00:19:23.140><c> r8</c><00:19:23.800><c> that</c><00:19:24.730><c> does</c><00:19:24.880><c> all</c><00:19:25.060><c> of</c>

00:19:25.080 --> 00:19:25.090 align:start position:0%
one single process r8 that does all of
 

00:19:25.090 --> 00:19:32.460 align:start position:0%
one single process r8 that does all of
those<00:19:25.270><c> steps</c><00:19:25.510><c> in</c><00:19:25.870><c> one</c><00:19:26.050><c> go</c><00:19:29.310><c> so</c><00:19:30.310><c> we</c><00:19:31.060><c> ran</c><00:19:31.330><c> r8</c><00:19:32.290><c> on</c>

00:19:32.460 --> 00:19:32.470 align:start position:0%
those steps in one go so we ran r8 on
 

00:19:32.470 --> 00:19:35.250 align:start position:0%
those steps in one go so we ran r8 on
several<00:19:32.800><c> taps</c><00:19:33.070><c> internally</c><00:19:33.780><c> this</c><00:19:34.780><c> is</c><00:19:34.930><c> the</c><00:19:35.050><c> nest</c>

00:19:35.250 --> 00:19:35.260 align:start position:0%
several taps internally this is the nest
 

00:19:35.260 --> 00:19:37.800 align:start position:0%
several taps internally this is the nest
app<00:19:35.500><c> data</c><00:19:35.740><c> so</c><00:19:36.370><c> by</c><00:19:36.730><c> just</c><00:19:36.790><c> swapping</c><00:19:37.120><c> ProGuard</c>

00:19:37.800 --> 00:19:37.810 align:start position:0%
app data so by just swapping ProGuard
 

00:19:37.810 --> 00:19:41.790 align:start position:0%
app data so by just swapping ProGuard
for<00:19:38.140><c> RA</c><00:19:38.460><c> we're</c><00:19:39.460><c> able</c><00:19:39.580><c> to</c><00:19:39.790><c> save</c><00:19:39.940><c> 100k</c><00:19:40.690><c> on</c><00:19:41.050><c> the</c>

00:19:41.790 --> 00:19:41.800 align:start position:0%
for RA we're able to save 100k on the
 

00:19:41.800 --> 00:19:46.020 align:start position:0%
for RA we're able to save 100k on the
Dex<00:19:42.010><c> file</c><00:19:42.220><c> size</c><00:19:42.570><c> and</c><00:19:43.570><c> save</c><00:19:44.050><c> our</c><00:19:44.310><c> 25%</c><00:19:45.310><c> in</c>

00:19:46.020 --> 00:19:46.030 align:start position:0%
Dex file size and save our 25% in
 

00:19:46.030 --> 00:19:48.750 align:start position:0%
Dex file size and save our 25% in
compilation<00:19:46.600><c> time</c><00:19:46.870><c> now</c><00:19:47.770><c> the</c><00:19:47.830><c> nest</c><00:19:48.190><c> app</c><00:19:48.430><c> is</c>

00:19:48.750 --> 00:19:48.760 align:start position:0%
compilation time now the nest app is
 

00:19:48.760 --> 00:19:51.480 align:start position:0%
compilation time now the nest app is
highly<00:19:49.600><c> optimized</c><00:19:50.110><c> it</c><00:19:50.380><c> has</c><00:19:50.530><c> very</c><00:19:50.890><c> specific</c>

00:19:51.480 --> 00:19:51.490 align:start position:0%
highly optimized it has very specific
 

00:19:51.490 --> 00:19:53.520 align:start position:0%
highly optimized it has very specific
program<00:19:51.670><c> keep</c><00:19:52.060><c> rules</c><00:19:52.300><c> and</c><00:19:52.570><c> still</c><00:19:53.260><c> we're</c><00:19:53.440><c> able</c>

00:19:53.520 --> 00:19:53.530 align:start position:0%
program keep rules and still we're able
 

00:19:53.530 --> 00:19:56.520 align:start position:0%
program keep rules and still we're able
to<00:19:53.740><c> save</c><00:19:53.920><c> quite</c><00:19:54.040><c> a</c><00:19:54.220><c> bit</c><00:19:54.340><c> of</c><00:19:54.460><c> space</c><00:19:55.120><c> we</c><00:19:56.050><c> also</c><00:19:56.170><c> run</c>

00:19:56.520 --> 00:19:56.530 align:start position:0%
to save quite a bit of space we also run
 

00:19:56.530 --> 00:19:58.410 align:start position:0%
to save quite a bit of space we also run
this<00:19:56.680><c> on</c><00:19:56.950><c> some</c><00:19:57.160><c> of</c><00:19:57.250><c> the</c><00:19:57.460><c> system</c><00:19:57.880><c> apps</c><00:19:58.060><c> that</c><00:19:58.330><c> are</c>

00:19:58.410 --> 00:19:58.420 align:start position:0%
this on some of the system apps that are
 

00:19:58.420 --> 00:20:00.960 align:start position:0%
this on some of the system apps that are
shipping<00:19:58.750><c> with</c><00:19:58.900><c> the</c><00:19:59.110><c> Android</c><00:19:59.440><c> OS</c><00:19:59.850><c> and</c><00:20:00.850><c> on</c>

00:20:00.960 --> 00:20:00.970 align:start position:0%
shipping with the Android OS and on
 

00:20:00.970 --> 00:20:04.650 align:start position:0%
shipping with the Android OS and on
average<00:20:01.150><c> were</c><00:20:01.510><c> able</c><00:20:01.780><c> to</c><00:20:01.810><c> save</c><00:20:02.080><c> 25%</c><00:20:02.740><c> of</c><00:20:03.480><c> the</c><00:20:04.480><c> Dex</c>

00:20:04.650 --> 00:20:04.660 align:start position:0%
average were able to save 25% of the Dex
 

00:20:04.660 --> 00:20:06.840 align:start position:0%
average were able to save 25% of the Dex
file<00:20:04.870><c> size</c><00:20:05.110><c> by</c><00:20:05.470><c> just</c><00:20:05.740><c> swapping</c><00:20:05.950><c> ProGuard</c><00:20:06.550><c> with</c>

00:20:06.840 --> 00:20:06.850 align:start position:0%
file size by just swapping ProGuard with
 

00:20:06.850 --> 00:20:13.650 align:start position:0%
file size by just swapping ProGuard with
r8<00:20:10.830><c> so</c><00:20:11.830><c> of</c><00:20:12.160><c> course</c><00:20:12.340><c> last</c><00:20:12.700><c> year</c><00:20:13.060><c> we</c><00:20:13.480><c> announced</c>

00:20:13.650 --> 00:20:13.660 align:start position:0%
r8 so of course last year we announced
 

00:20:13.660 --> 00:20:15.810 align:start position:0%
r8 so of course last year we announced
that<00:20:14.020><c> Coplin</c><00:20:14.380><c> is</c><00:20:14.470><c> now</c><00:20:14.650><c> a</c><00:20:14.680><c> support</c><00:20:15.310><c> language</c><00:20:15.490><c> on</c>

00:20:15.810 --> 00:20:15.820 align:start position:0%
that Coplin is now a support language on
 

00:20:15.820 --> 00:20:18.000 align:start position:0%
that Coplin is now a support language on
Android<00:20:16.150><c> and</c><00:20:16.420><c> so</c><00:20:16.930><c> we</c><00:20:17.140><c> figured</c><00:20:17.440><c> we</c><00:20:17.590><c> need</c><00:20:17.740><c> to</c><00:20:17.890><c> do</c>

00:20:18.000 --> 00:20:18.010 align:start position:0%
Android and so we figured we need to do
 

00:20:18.010 --> 00:20:20.790 align:start position:0%
Android and so we figured we need to do
something<00:20:18.430><c> for</c><00:20:18.640><c> Koplin</c><00:20:19.150><c> as</c><00:20:19.270><c> well</c><00:20:19.710><c> Copelan</c><00:20:20.710><c> is</c>

00:20:20.790 --> 00:20:20.800 align:start position:0%
something for Koplin as well Copelan is
 

00:20:20.800 --> 00:20:22.740 align:start position:0%
something for Koplin as well Copelan is
an<00:20:20.920><c> amazing</c><00:20:21.370><c> language</c><00:20:21.700><c> it</c><00:20:22.150><c> allows</c><00:20:22.360><c> you</c><00:20:22.570><c> to</c>

00:20:22.740 --> 00:20:22.750 align:start position:0%
an amazing language it allows you to
 

00:20:22.750 --> 00:20:26.820 align:start position:0%
an amazing language it allows you to
write<00:20:22.960><c> very</c><00:20:23.140><c> succinctly</c><00:20:25.260><c> in</c><00:20:26.260><c> code</c><00:20:26.500><c> and</c><00:20:26.530><c> it's</c>

00:20:26.820 --> 00:20:26.830 align:start position:0%
write very succinctly in code and it's
 

00:20:26.830 --> 00:20:28.500 align:start position:0%
write very succinctly in code and it's
so<00:20:26.980><c> powerful</c><00:20:27.130><c> it</c><00:20:27.550><c> needs</c><00:20:27.730><c> to</c><00:20:27.880><c> generate</c><00:20:28.000><c> a</c><00:20:28.360><c> lot</c>

00:20:28.500 --> 00:20:28.510 align:start position:0%
so powerful it needs to generate a lot
 

00:20:28.510 --> 00:20:31.920 align:start position:0%
so powerful it needs to generate a lot
of<00:20:28.540><c> bytecode</c><00:20:29.100><c> and</c><00:20:30.100><c> so</c><00:20:30.910><c> we</c><00:20:31.060><c> looked</c><00:20:31.270><c> into</c><00:20:31.390><c> places</c>

00:20:31.920 --> 00:20:31.930 align:start position:0%
of bytecode and so we looked into places
 

00:20:31.930 --> 00:20:34.890 align:start position:0%
of bytecode and so we looked into places
with<00:20:32.110><c> we</c><00:20:32.290><c> could</c><00:20:32.500><c> shrink</c><00:20:32.740><c> that</c><00:20:33.070><c> further</c><00:20:33.900><c> than</c>

00:20:34.890 --> 00:20:34.900 align:start position:0%
with we could shrink that further than
 

00:20:34.900 --> 00:20:38.310 align:start position:0%
with we could shrink that further than
the<00:20:35.020><c> standard</c><00:20:35.380><c> and</c><00:20:36.210><c> analysis</c><00:20:37.210><c> and</c><00:20:37.480><c> so</c><00:20:38.110><c> we</c>

00:20:38.310 --> 00:20:38.320 align:start position:0%
the standard and analysis and so we
 

00:20:38.320 --> 00:20:40.940 align:start position:0%
the standard and analysis and so we
found<00:20:38.560><c> a</c><00:20:38.650><c> couple</c><00:20:38.770><c> places</c><00:20:39.040><c> where</c><00:20:39.280><c> we</c><00:20:39.580><c> could</c><00:20:39.850><c> do</c>

00:20:40.940 --> 00:20:40.950 align:start position:0%
found a couple places where we could do
 

00:20:40.950 --> 00:20:43.890 align:start position:0%
found a couple places where we could do
things<00:20:41.950><c> like</c><00:20:42.220><c> class</c><00:20:42.520><c> merging</c><00:20:43.030><c> especially</c>

00:20:43.890 --> 00:20:43.900 align:start position:0%
things like class merging especially
 

00:20:43.900 --> 00:20:46.830 align:start position:0%
things like class merging especially
around<00:20:43.990><c> lambdas</c><00:20:45.000><c> we</c><00:20:46.000><c> do</c><00:20:46.210><c> more</c><00:20:46.570><c> enormous</c>

00:20:46.830 --> 00:20:46.840 align:start position:0%
around lambdas we do more enormous
 

00:20:46.840 --> 00:20:49.740 align:start position:0%
around lambdas we do more enormous
analysis<00:20:47.470><c> etc</c><00:20:47.890><c> and</c><00:20:48.880><c> so</c><00:20:49.030><c> let's</c><00:20:49.240><c> take</c><00:20:49.390><c> a</c><00:20:49.420><c> look</c><00:20:49.600><c> at</c>

00:20:49.740 --> 00:20:49.750 align:start position:0%
analysis etc and so let's take a look at
 

00:20:49.750 --> 00:20:53.700 align:start position:0%
analysis etc and so let's take a look at
that<00:20:49.870><c> in</c><00:20:50.320><c> a</c><00:20:50.440><c> demo</c>

00:20:53.700 --> 00:20:53.710 align:start position:0%
 
 

00:20:53.710 --> 00:20:59.410 align:start position:0%
 
okay<00:20:54.710><c> so</c><00:20:57.760><c> here</c><00:20:58.760><c> I</c><00:20:58.850><c> have</c><00:20:58.940><c> a</c><00:20:59.210><c> Copeland</c>

00:20:59.410 --> 00:20:59.420 align:start position:0%
okay so here I have a Copeland
 

00:20:59.420 --> 00:21:02.950 align:start position:0%
okay so here I have a Copeland
application<00:21:01.420><c> for</c><00:21:02.420><c> those</c><00:21:02.510><c> of</c><00:21:02.660><c> you</c><00:21:02.750><c> haven't</c>

00:21:02.950 --> 00:21:02.960 align:start position:0%
application for those of you haven't
 

00:21:02.960 --> 00:21:05.160 align:start position:0%
application for those of you haven't
programmed<00:21:03.170><c> Copeland</c><00:21:03.830><c> this</c><00:21:03.980><c> is</c><00:21:04.130><c> a</c><00:21:04.160><c> data</c><00:21:04.730><c> class</c>

00:21:05.160 --> 00:21:05.170 align:start position:0%
programmed Copeland this is a data class
 

00:21:05.170 --> 00:21:08.500 align:start position:0%
programmed Copeland this is a data class
which<00:21:06.170><c> is</c><00:21:06.290><c> a</c><00:21:06.320><c> class</c><00:21:06.410><c> that</c><00:21:07.100><c> it</c><00:21:07.640><c> generates</c><00:21:08.420><c> a</c><00:21:08.480><c> lot</c>

00:21:08.500 --> 00:21:08.510 align:start position:0%
which is a class that it generates a lot
 

00:21:08.510 --> 00:21:11.290 align:start position:0%
which is a class that it generates a lot
of<00:21:08.600><c> code</c><00:21:08.810><c> for</c><00:21:09.050><c> you</c><00:21:09.170><c> so</c><00:21:09.530><c> you</c><00:21:10.190><c> have</c><00:21:10.400><c> a</c><00:21:10.910><c> couple</c>

00:21:11.290 --> 00:21:11.300 align:start position:0%
of code for you so you have a couple
 

00:21:11.300 --> 00:21:13.720 align:start position:0%
of code for you so you have a couple
fields<00:21:12.290><c> here</c><00:21:12.680><c> that</c><00:21:12.920><c> are</c><00:21:13.040><c> really</c><00:21:13.160><c> properties</c>

00:21:13.720 --> 00:21:13.730 align:start position:0%
fields here that are really properties
 

00:21:13.730 --> 00:21:15.750 align:start position:0%
fields here that are really properties
so<00:21:14.090><c> it</c><00:21:14.210><c> generates</c><00:21:14.600><c> getters</c><00:21:14.960><c> and</c><00:21:15.050><c> setters</c>

00:21:15.750 --> 00:21:15.760 align:start position:0%
so it generates getters and setters
 

00:21:15.760 --> 00:21:19.600 align:start position:0%
so it generates getters and setters
equals<00:21:16.760><c> get</c><00:21:17.030><c> hash</c><00:21:17.210><c> code</c><00:21:17.420><c> etc</c><00:21:17.570><c> and</c><00:21:18.280><c> then</c><00:21:19.280><c> here</c><00:21:19.580><c> I</c>

00:21:19.600 --> 00:21:19.610 align:start position:0%
equals get hash code etc and then here I
 

00:21:19.610 --> 00:21:21.490 align:start position:0%
equals get hash code etc and then here I
have<00:21:19.700><c> an</c><00:21:19.940><c> extension</c><00:21:20.300><c> method</c><00:21:20.780><c> that</c><00:21:21.080><c> tells</c><00:21:21.320><c> it</c>

00:21:21.490 --> 00:21:21.500 align:start position:0%
have an extension method that tells it
 

00:21:21.500 --> 00:21:24.580 align:start position:0%
have an extension method that tells it
that<00:21:21.710><c> if</c><00:21:22.310><c> I</c><00:21:22.550><c> see</c><00:21:22.730><c> a</c><00:21:22.760><c> collection</c><00:21:23.060><c> of</c><00:21:23.630><c> that's</c>

00:21:24.580 --> 00:21:24.590 align:start position:0%
that if I see a collection of that's
 

00:21:24.590 --> 00:21:27.520 align:start position:0%
that if I see a collection of that's
instantiated<00:21:25.220><c> to</c><00:21:25.490><c> the</c><00:21:25.670><c> type</c><00:21:25.880><c> class</c><00:21:26.180><c> car</c><00:21:26.570><c> add</c>

00:21:27.520 --> 00:21:27.530 align:start position:0%
instantiated to the type class car add
 

00:21:27.530 --> 00:21:29.620 align:start position:0%
instantiated to the type class car add
this<00:21:27.860><c> extra</c><00:21:28.040><c> method</c><00:21:28.550><c> that</c><00:21:29.180><c> allows</c><00:21:29.390><c> me</c><00:21:29.600><c> to</c>

00:21:29.620 --> 00:21:29.630 align:start position:0%
this extra method that allows me to
 

00:21:29.630 --> 00:21:32.500 align:start position:0%
this extra method that allows me to
search<00:21:29.900><c> for</c><00:21:30.170><c> make</c><00:21:30.350><c> and</c><00:21:30.530><c> model</c><00:21:31.030><c> and</c><00:21:32.030><c> so</c><00:21:32.300><c> in</c><00:21:32.420><c> the</c>

00:21:32.500 --> 00:21:32.510 align:start position:0%
search for make and model and so in the
 

00:21:32.510 --> 00:21:35.560 align:start position:0%
search for make and model and so in the
class<00:21:32.750><c> I'm</c><00:21:33.050><c> using</c><00:21:33.910><c> like</c><00:21:34.910><c> the</c><00:21:35.090><c> sequence</c>

00:21:35.560 --> 00:21:35.570 align:start position:0%
class I'm using like the sequence
 

00:21:35.570 --> 00:21:38.110 align:start position:0%
class I'm using like the sequence
operators<00:21:36.140><c> of</c><00:21:36.170><c> Copeland</c><00:21:36.740><c> to</c><00:21:37.250><c> do</c><00:21:37.670><c> a</c><00:21:37.700><c> couple</c>

00:21:38.110 --> 00:21:38.120 align:start position:0%
operators of Copeland to do a couple
 

00:21:38.120 --> 00:21:40.570 align:start position:0%
operators of Copeland to do a couple
filters<00:21:38.450><c> and</c><00:21:38.630><c> group</c><00:21:38.780><c> eyes</c><00:21:39.130><c> now</c><00:21:40.130><c> normally</c><00:21:40.490><c> you</c>

00:21:40.570 --> 00:21:40.580 align:start position:0%
filters and group eyes now normally you
 

00:21:40.580 --> 00:21:42.940 align:start position:0%
filters and group eyes now normally you
wouldn't<00:21:40.850><c> write</c><00:21:41.150><c> these</c><00:21:41.990><c> many</c><00:21:42.230><c> filters</c><00:21:42.530><c> in</c><00:21:42.860><c> a</c>

00:21:42.940 --> 00:21:42.950 align:start position:0%
wouldn't write these many filters in a
 

00:21:42.950 --> 00:21:44.800 align:start position:0%
wouldn't write these many filters in a
row<00:21:43.160><c> you</c><00:21:43.880><c> would</c><00:21:43.970><c> for</c><00:21:44.180><c> you</c><00:21:44.240><c> just</c><00:21:44.420><c> put</c><00:21:44.570><c> all</c><00:21:44.690><c> the</c>

00:21:44.800 --> 00:21:44.810 align:start position:0%
row you would for you just put all the
 

00:21:44.810 --> 00:21:47.200 align:start position:0%
row you would for you just put all the
boolean<00:21:45.080><c> logic</c><00:21:45.200><c> in</c><00:21:45.530><c> one</c><00:21:45.710><c> filter</c><00:21:45.950><c> but</c><00:21:46.940><c> I</c><00:21:46.970><c> wanted</c>

00:21:47.200 --> 00:21:47.210 align:start position:0%
boolean logic in one filter but I wanted
 

00:21:47.210 --> 00:21:49.210 align:start position:0%
boolean logic in one filter but I wanted
to<00:21:47.300><c> show</c><00:21:47.510><c> you</c><00:21:47.540><c> what</c><00:21:48.290><c> happens</c><00:21:48.620><c> with</c><00:21:48.740><c> multiple</c>

00:21:49.210 --> 00:21:49.220 align:start position:0%
to show you what happens with multiple
 

00:21:49.220 --> 00:21:51.250 align:start position:0%
to show you what happens with multiple
filters<00:21:49.580><c> so</c><00:21:50.270><c> normally</c><00:21:50.660><c> Copeland</c><00:21:51.110><c> will</c>

00:21:51.250 --> 00:21:51.260 align:start position:0%
filters so normally Copeland will
 

00:21:51.260 --> 00:21:53.980 align:start position:0%
filters so normally Copeland will
compile<00:21:51.650><c> each</c><00:21:52.280><c> of</c><00:21:52.550><c> these</c><00:21:52.700><c> lambdas</c><00:21:53.210><c> into</c><00:21:53.840><c> its</c>

00:21:53.980 --> 00:21:53.990 align:start position:0%
compile each of these lambdas into its
 

00:21:53.990 --> 00:21:57.010 align:start position:0%
compile each of these lambdas into its
own<00:21:54.110><c> class</c><00:21:54.350><c> and</c><00:21:54.970><c> so</c><00:21:55.970><c> each</c><00:21:56.150><c> Lam</c><00:21:56.450><c> that</c><00:21:56.660><c> you</c><00:21:56.810><c> use</c>

00:21:57.010 --> 00:21:57.020 align:start position:0%
own class and so each Lam that you use
 

00:21:57.020 --> 00:22:00.310 align:start position:0%
own class and so each Lam that you use
at<00:21:57.350><c> a</c><00:21:57.950><c> new</c><00:21:58.850><c> class</c><00:21:59.120><c> and</c><00:21:59.540><c> that's</c><00:21:59.930><c> not</c><00:22:00.110><c> really</c>

00:22:00.310 --> 00:22:00.320 align:start position:0%
at a new class and that's not really
 

00:22:00.320 --> 00:22:02.590 align:start position:0%
at a new class and that's not really
what<00:22:00.410><c> you</c><00:22:00.440><c> want</c><00:22:00.650><c> in</c><00:22:00.770><c> a</c><00:22:00.860><c> dex</c><00:22:01.040><c> file</c><00:22:01.510><c> because</c><00:22:02.510><c> you</c>

00:22:02.590 --> 00:22:02.600 align:start position:0%
what you want in a dex file because you
 

00:22:02.600 --> 00:22:03.610 align:start position:0%
what you want in a dex file because you
always<00:22:02.780><c> want</c><00:22:02.930><c> to</c><00:22:02.960><c> keep</c><00:22:03.080><c> the</c><00:22:03.230><c> methods</c>

00:22:03.610 --> 00:22:03.620 align:start position:0%
always want to keep the methods
 

00:22:03.620 --> 00:22:07.090 align:start position:0%
always want to keep the methods
reference<00:22:04.010><c> count</c><00:22:04.220><c> low</c><00:22:05.500><c> so</c><00:22:06.500><c> let's</c><00:22:06.710><c> take</c><00:22:06.890><c> a</c><00:22:06.920><c> look</c>

00:22:07.090 --> 00:22:07.100 align:start position:0%
reference count low so let's take a look
 

00:22:07.100 --> 00:22:09.700 align:start position:0%
reference count low so let's take a look
at<00:22:07.280><c> what</c><00:22:07.490><c> happens</c><00:22:07.790><c> when</c><00:22:08.290><c> we</c><00:22:09.290><c> do</c><00:22:09.410><c> with</c><00:22:09.560><c> our</c>

00:22:09.700 --> 00:22:09.710 align:start position:0%
at what happens when we do with our
 

00:22:09.710 --> 00:22:12.310 align:start position:0%
at what happens when we do with our
eight<00:22:09.830><c> so</c><00:22:10.130><c> in</c><00:22:11.090><c> this</c><00:22:11.210><c> project</c><00:22:11.450><c> enabled</c><00:22:12.140><c> our</c>

00:22:12.310 --> 00:22:12.320 align:start position:0%
eight so in this project enabled our
 

00:22:12.320 --> 00:22:15.090 align:start position:0%
eight so in this project enabled our
eight<00:22:12.500><c> we're</c><00:22:12.920><c> setting</c><00:22:13.250><c> this</c><00:22:13.370><c> property</c><00:22:13.760><c> and</c>

00:22:15.090 --> 00:22:15.100 align:start position:0%
eight we're setting this property and
 

00:22:15.100 --> 00:22:17.200 align:start position:0%
eight we're setting this property and
let's<00:22:16.100><c> take</c><00:22:16.220><c> a</c><00:22:16.280><c> look</c><00:22:16.460><c> what</c><00:22:16.580><c> happens</c><00:22:16.610><c> in</c><00:22:17.090><c> the</c>

00:22:17.200 --> 00:22:17.210 align:start position:0%
let's take a look what happens in the
 

00:22:17.210 --> 00:22:21.160 align:start position:0%
let's take a look what happens in the
output<00:22:17.600><c> apk</c><00:22:18.220><c> so</c><00:22:19.220><c> here</c><00:22:19.730><c> Mike</c><00:22:20.170><c> classes.dex</c>

00:22:21.160 --> 00:22:21.170 align:start position:0%
output apk so here Mike classes.dex
 

00:22:21.170 --> 00:22:26.560 align:start position:0%
output apk so here Mike classes.dex
again<00:22:22.090><c> the</c><00:22:23.090><c> main</c><00:22:23.270><c> activity</c><00:22:24.580><c> and</c><00:22:25.580><c> I</c><00:22:25.700><c> I</c><00:22:26.000><c> added</c><00:22:26.510><c> a</c>

00:22:26.560 --> 00:22:26.570 align:start position:0%
again the main activity and I I added a
 

00:22:26.570 --> 00:22:28.660 align:start position:0%
again the main activity and I I added a
call<00:22:26.780><c> to</c><00:22:26.960><c> that</c><00:22:27.050><c> method</c><00:22:27.130><c> in</c><00:22:28.130><c> the</c><00:22:28.400><c> oncreate</c>

00:22:28.660 --> 00:22:28.670 align:start position:0%
call to that method in the oncreate
 

00:22:28.670 --> 00:22:32.290 align:start position:0%
call to that method in the oncreate
method<00:22:28.820><c> and</c><00:22:29.740><c> so</c><00:22:30.740><c> here</c><00:22:31.280><c> in</c><00:22:31.460><c> the</c><00:22:32.030><c> oncreate</c>

00:22:32.290 --> 00:22:32.300 align:start position:0%
method and so here in the oncreate
 

00:22:32.300 --> 00:22:35.170 align:start position:0%
method and so here in the oncreate
method<00:22:33.160><c> you</c><00:22:34.160><c> see</c><00:22:34.190><c> that</c><00:22:34.460><c> there</c><00:22:34.610><c> is</c><00:22:34.640><c> this</c><00:22:34.820><c> new</c>

00:22:35.170 --> 00:22:35.180 align:start position:0%
method you see that there is this new
 

00:22:35.180 --> 00:22:37.950 align:start position:0%
method you see that there is this new
instance<00:22:35.570><c> to</c><00:22:35.840><c> this</c><00:22:36.020><c> lambda</c><00:22:36.860><c> group</c><00:22:37.310><c> class</c><00:22:37.580><c> and</c>

00:22:37.950 --> 00:22:37.960 align:start position:0%
instance to this lambda group class and
 

00:22:37.960 --> 00:22:40.180 align:start position:0%
instance to this lambda group class and
the<00:22:38.960><c> interesting</c><00:22:39.410><c> is</c><00:22:39.530><c> that</c><00:22:39.560><c> that</c><00:22:39.770><c> lambda</c>

00:22:40.180 --> 00:22:40.190 align:start position:0%
the interesting is that that lambda
 

00:22:40.190 --> 00:22:42.610 align:start position:0%
the interesting is that that lambda
group<00:22:40.520><c> class</c><00:22:40.700><c> is</c><00:22:40.940><c> not</c><00:22:41.360><c> defined</c><00:22:41.840><c> in</c><00:22:42.170><c> a</c><00:22:42.290><c> package</c>

00:22:42.610 --> 00:22:42.620 align:start position:0%
group class is not defined in a package
 

00:22:42.620 --> 00:22:46.720 align:start position:0%
group class is not defined in a package
it's<00:22:42.980><c> defined</c><00:22:43.400><c> at</c><00:22:43.610><c> the</c><00:22:44.150><c> top</c><00:22:44.300><c> level</c><00:22:45.520><c> so</c><00:22:46.520><c> let's</c>

00:22:46.720 --> 00:22:46.730 align:start position:0%
it's defined at the top level so let's
 

00:22:46.730 --> 00:22:49.990 align:start position:0%
it's defined at the top level so let's
take<00:22:46.910><c> a</c><00:22:46.940><c> look</c><00:22:47.090><c> at</c><00:22:47.240><c> that</c><00:22:47.450><c> here</c><00:22:48.140><c> in</c><00:22:48.320><c> the</c><00:22:48.790><c> apx</c><00:22:49.790><c> file</c>

00:22:49.990 --> 00:22:50.000 align:start position:0%
take a look at that here in the apx file
 

00:22:50.000 --> 00:22:53.790 align:start position:0%
take a look at that here in the apx file
there<00:22:50.240><c> is</c><00:22:50.330><c> this</c><00:22:50.540><c> todo</c><00:22:51.410><c> lambda</c><00:22:51.710><c> file</c><00:22:52.520><c> a</c><00:22:52.820><c> class</c>

00:22:53.790 --> 00:22:53.800 align:start position:0%
there is this todo lambda file a class
 

00:22:53.800 --> 00:22:56.500 align:start position:0%
there is this todo lambda file a class
and<00:22:54.800><c> you</c><00:22:54.920><c> see</c><00:22:55.100><c> it</c><00:22:55.250><c> implements</c><00:22:55.760><c> the</c><00:22:55.790><c> Copeland</c>

00:22:56.500 --> 00:22:56.510 align:start position:0%
and you see it implements the Copeland
 

00:22:56.510 --> 00:22:59.680 align:start position:0%
and you see it implements the Copeland
function<00:22:56.990><c> one</c><00:22:57.200><c> interface</c><00:22:58.180><c> and</c><00:22:59.180><c> it</c><00:22:59.300><c> has</c><00:22:59.420><c> two</c>

00:22:59.680 --> 00:22:59.690 align:start position:0%
function one interface and it has two
 

00:22:59.690 --> 00:23:02.650 align:start position:0%
function one interface and it has two
instance<00:23:00.050><c> fields</c><00:23:00.460><c> one</c><00:23:01.460><c> which</c><00:23:02.150><c> is</c><00:23:02.300><c> of</c><00:23:02.450><c> type</c>

00:23:02.650 --> 00:23:02.660 align:start position:0%
instance fields one which is of type
 

00:23:02.660 --> 00:23:05.090 align:start position:0%
instance fields one which is of type
object<00:23:02.890><c> is</c><00:23:03.890><c> named</c><00:23:04.220><c> capture</c>

00:23:05.090 --> 00:23:05.100 align:start position:0%
object is named capture
 

00:23:05.100 --> 00:23:08.480 align:start position:0%
object is named capture
and<00:23:05.250><c> the</c><00:23:05.820><c> other</c><00:23:05.940><c> one</c><00:23:06.060><c> is</c><00:23:06.210><c> ID</c><00:23:06.510><c> and</c><00:23:07.460><c> then</c><00:23:08.460><c> the</c>

00:23:08.480 --> 00:23:08.490 align:start position:0%
and the other one is ID and then the
 

00:23:08.490 --> 00:23:11.780 align:start position:0%
and the other one is ID and then the
constructor<00:23:09.180><c> takes</c><00:23:09.450><c> both</c><00:23:10.160><c> the</c><00:23:11.160><c> ID</c><00:23:11.340><c> and</c><00:23:11.730><c> the</c>

00:23:11.780 --> 00:23:11.790 align:start position:0%
constructor takes both the ID and the
 

00:23:11.790 --> 00:23:15.400 align:start position:0%
constructor takes both the ID and the
objects<00:23:12.330><c> and</c><00:23:12.480><c> sets</c><00:23:12.690><c> the</c><00:23:12.810><c> variables</c><00:23:13.290><c> and</c><00:23:14.270><c> then</c>

00:23:15.400 --> 00:23:15.410 align:start position:0%
objects and sets the variables and then
 

00:23:15.410 --> 00:23:20.150 align:start position:0%
objects and sets the variables and then
here<00:23:16.410><c> in</c><00:23:16.710><c> the</c><00:23:16.920><c> invoke</c><00:23:17.280><c> method</c><00:23:18.560><c> we</c><00:23:19.560><c> see</c><00:23:19.800><c> that</c><00:23:19.980><c> it</c>

00:23:20.150 --> 00:23:20.160 align:start position:0%
here in the invoke method we see that it
 

00:23:20.160 --> 00:23:23.210 align:start position:0%
here in the invoke method we see that it
has<00:23:20.640><c> this</c><00:23:20.820><c> packed</c><00:23:21.180><c> switch</c><00:23:21.600><c> and</c><00:23:22.140><c> so</c><00:23:22.860><c> what</c><00:23:23.040><c> we're</c>

00:23:23.210 --> 00:23:23.220 align:start position:0%
has this packed switch and so what we're
 

00:23:23.220 --> 00:23:25.310 align:start position:0%
has this packed switch and so what we're
doing<00:23:23.250><c> is</c><00:23:23.610><c> we</c><00:23:23.820><c> were</c><00:23:24.420><c> generating</c><00:23:24.600><c> basically</c>

00:23:25.310 --> 00:23:25.320 align:start position:0%
doing is we were generating basically
 

00:23:25.320 --> 00:23:27.350 align:start position:0%
doing is we were generating basically
the<00:23:25.800><c> byte</c><00:23:26.010><c> code</c><00:23:26.040><c> equivalent</c><00:23:26.790><c> of</c><00:23:27.000><c> a</c><00:23:27.090><c> switch</c>

00:23:27.350 --> 00:23:27.360 align:start position:0%
the byte code equivalent of a switch
 

00:23:27.360 --> 00:23:30.200 align:start position:0%
the byte code equivalent of a switch
statement<00:23:27.890><c> we</c><00:23:28.890><c> switch</c><00:23:29.190><c> over</c><00:23:29.400><c> the</c><00:23:29.730><c> ID</c><00:23:29.880><c> that</c><00:23:30.150><c> was</c>

00:23:30.200 --> 00:23:30.210 align:start position:0%
statement we switch over the ID that was
 

00:23:30.210 --> 00:23:32.510 align:start position:0%
statement we switch over the ID that was
passed<00:23:30.450><c> into</c><00:23:30.720><c> the</c><00:23:30.870><c> constructor</c><00:23:31.260><c> to</c><00:23:32.220><c> figure</c>

00:23:32.510 --> 00:23:32.520 align:start position:0%
passed into the constructor to figure
 

00:23:32.520 --> 00:23:34.610 align:start position:0%
passed into the constructor to figure
out<00:23:32.610><c> which</c><00:23:32.790><c> piece</c><00:23:33.000><c> of</c><00:23:33.150><c> code</c><00:23:33.300><c> to</c><00:23:33.480><c> call</c><00:23:33.630><c> and</c><00:23:34.020><c> so</c>

00:23:34.610 --> 00:23:34.620 align:start position:0%
out which piece of code to call and so
 

00:23:34.620 --> 00:23:35.930 align:start position:0%
out which piece of code to call and so
if<00:23:34.710><c> you</c><00:23:34.830><c> scroll</c><00:23:35.070><c> through</c><00:23:35.130><c> here</c><00:23:35.550><c> you'll</c><00:23:35.730><c> see</c>

00:23:35.930 --> 00:23:35.940 align:start position:0%
if you scroll through here you'll see
 

00:23:35.940 --> 00:23:40.430 align:start position:0%
if you scroll through here you'll see
that<00:23:36.060><c> the</c><00:23:36.840><c> call</c><00:23:37.050><c> to</c><00:23:37.080><c> get</c><00:23:37.410><c> here</c><00:23:39.110><c> the</c><00:23:40.110><c> the</c>

00:23:40.430 --> 00:23:40.440 align:start position:0%
that the call to get here the the
 

00:23:40.440 --> 00:23:43.460 align:start position:0%
that the call to get here the the
property<00:23:41.040><c> read</c><00:23:41.220><c> it</c><00:23:41.340><c> model</c><00:23:41.990><c> are</c><00:23:42.990><c> all</c><00:23:43.170><c> in</c><00:23:43.350><c> this</c>

00:23:43.460 --> 00:23:43.470 align:start position:0%
property read it model are all in this
 

00:23:43.470 --> 00:23:45.620 align:start position:0%
property read it model are all in this
piece<00:23:43.740><c> of</c><00:23:43.860><c> code</c><00:23:44.070><c> and</c><00:23:44.400><c> then</c><00:23:45.000><c> you</c><00:23:45.150><c> see</c><00:23:45.330><c> here</c><00:23:45.480><c> that</c>

00:23:45.620 --> 00:23:45.630 align:start position:0%
piece of code and then you see here that
 

00:23:45.630 --> 00:23:48.320 align:start position:0%
piece of code and then you see here that
we<00:23:45.810><c> have</c><00:23:45.990><c> the</c><00:23:46.140><c> switch</c><00:23:46.620><c> and</c><00:23:47.610><c> so</c><00:23:47.910><c> what's</c><00:23:48.060><c> going</c>

00:23:48.320 --> 00:23:48.330 align:start position:0%
we have the switch and so what's going
 

00:23:48.330 --> 00:23:52.790 align:start position:0%
we have the switch and so what's going
on<00:23:48.450><c> is</c><00:23:48.660><c> we</c><00:23:48.690><c> find</c><00:23:49.170><c> that</c><00:23:50.240><c> we</c><00:23:51.240><c> have</c><00:23:51.590><c> lambdas</c><00:23:52.590><c> that</c>

00:23:52.790 --> 00:23:52.800 align:start position:0%
on is we find that we have lambdas that
 

00:23:52.800 --> 00:23:54.980 align:start position:0%
on is we find that we have lambdas that
are<00:23:52.950><c> of</c><00:23:53.250><c> the</c><00:23:53.400><c> same</c><00:23:53.610><c> signature</c><00:23:54.000><c> basically</c><00:23:54.870><c> they</c>

00:23:54.980 --> 00:23:54.990 align:start position:0%
are of the same signature basically they
 

00:23:54.990 --> 00:23:57.710 align:start position:0%
are of the same signature basically they
implement<00:23:55.890><c> the</c><00:23:55.980><c> same</c><00:23:56.130><c> interface</c><00:23:56.610><c> and</c><00:23:56.910><c> they</c>

00:23:57.710 --> 00:23:57.720 align:start position:0%
implement the same interface and they
 

00:23:57.720 --> 00:24:00.980 align:start position:0%
implement the same interface and they
have<00:23:57.840><c> the</c><00:23:58.020><c> same</c><00:23:58.250><c> capture</c><00:23:59.250><c> variables</c><00:23:59.850><c> and</c><00:24:00.120><c> so</c>

00:24:00.980 --> 00:24:00.990 align:start position:0%
have the same capture variables and so
 

00:24:00.990 --> 00:24:03.110 align:start position:0%
have the same capture variables and so
we<00:24:01.110><c> can</c><00:24:01.320><c> take</c><00:24:02.130><c> all</c><00:24:02.370><c> the</c><00:24:02.520><c> different</c><00:24:02.610><c> lambdas</c>

00:24:03.110 --> 00:24:03.120 align:start position:0%
we can take all the different lambdas
 

00:24:03.120 --> 00:24:05.630 align:start position:0%
we can take all the different lambdas
and<00:24:03.270><c> merge</c><00:24:03.510><c> them</c><00:24:03.720><c> into</c><00:24:03.750><c> one</c><00:24:03.960><c> class</c><00:24:04.640><c> which</c>

00:24:05.630 --> 00:24:05.640 align:start position:0%
and merge them into one class which
 

00:24:05.640 --> 00:24:07.760 align:start position:0%
and merge them into one class which
allows<00:24:05.970><c> you</c><00:24:06.180><c> to</c><00:24:06.300><c> have</c><00:24:06.420><c> less</c><00:24:06.750><c> metadata</c><00:24:07.470><c> and</c>

00:24:07.760 --> 00:24:07.770 align:start position:0%
allows you to have less metadata and
 

00:24:07.770 --> 00:24:09.020 align:start position:0%
allows you to have less metadata and
less<00:24:07.980><c> method</c><00:24:08.310><c> references</c>

00:24:09.020 --> 00:24:09.030 align:start position:0%
less method references
 

00:24:09.030 --> 00:24:13.930 align:start position:0%
less method references
okay<00:24:09.960><c> so</c><00:24:10.050><c> let's</c><00:24:10.320><c> switch</c><00:24:10.380><c> back</c><00:24:10.620><c> to</c><00:24:10.650><c> the</c><00:24:10.800><c> slides</c>

00:24:13.930 --> 00:24:13.940 align:start position:0%
 
 

00:24:13.940 --> 00:24:19.750 align:start position:0%
 
so<00:24:14.940><c> yeah</c><00:24:15.060><c> Kotlin</c><00:24:15.510><c> is</c><00:24:16.320><c> let's</c><00:24:16.830><c> go</c><00:24:16.980><c> back</c><00:24:17.400><c> one</c><00:24:18.290><c> so</c>

00:24:19.750 --> 00:24:19.760 align:start position:0%
so yeah Kotlin is let's go back one so
 

00:24:19.760 --> 00:24:22.370 align:start position:0%
so yeah Kotlin is let's go back one so
Koplin<00:24:20.790><c> is</c><00:24:21.090><c> something</c><00:24:21.930><c> we</c><00:24:22.050><c> were</c><00:24:22.140><c> very</c>

00:24:22.370 --> 00:24:22.380 align:start position:0%
Koplin is something we were very
 

00:24:22.380 --> 00:24:24.410 align:start position:0%
Koplin is something we were very
important<00:24:22.770><c> insight</c><00:24:23.670><c> about</c><00:24:23.970><c> and</c><00:24:24.270><c> it's</c>

00:24:24.410 --> 00:24:24.420 align:start position:0%
important insight about and it's
 

00:24:24.420 --> 00:24:26.120 align:start position:0%
important insight about and it's
becoming<00:24:24.690><c> more</c><00:24:24.840><c> and</c><00:24:24.900><c> more</c><00:24:25.080><c> important</c><00:24:25.620><c> and</c><00:24:25.830><c> so</c>

00:24:26.120 --> 00:24:26.130 align:start position:0%
becoming more and more important and so
 

00:24:26.130 --> 00:24:28.190 align:start position:0%
becoming more and more important and so
with<00:24:26.310><c> our</c><00:24:26.460><c> rate</c><00:24:26.670><c> we're</c><00:24:27.090><c> going</c><00:24:27.300><c> to</c><00:24:27.480><c> keep</c><00:24:27.720><c> adding</c>

00:24:28.190 --> 00:24:28.200 align:start position:0%
with our rate we're going to keep adding
 

00:24:28.200 --> 00:24:30.680 align:start position:0%
with our rate we're going to keep adding
new<00:24:28.230><c> optimizations</c><00:24:29.190><c> for</c><00:24:29.370><c> Copland</c><00:24:29.880><c> we're</c>

00:24:30.680 --> 00:24:30.690 align:start position:0%
new optimizations for Copland we're
 

00:24:30.690 --> 00:24:34.250 align:start position:0%
new optimizations for Copland we're
doing<00:24:30.960><c> said</c><00:24:31.800><c> the</c><00:24:32.130><c> lambda</c><00:24:32.820><c> merging</c><00:24:33.270><c> no</c>

00:24:34.250 --> 00:24:34.260 align:start position:0%
doing said the lambda merging no
 

00:24:34.260 --> 00:24:36.890 align:start position:0%
doing said the lambda merging no
reference<00:24:34.860><c> no</c><00:24:35.270><c> analysis</c><00:24:36.270><c> and</c><00:24:36.570><c> we're</c><00:24:36.750><c> adding</c>

00:24:36.890 --> 00:24:36.900 align:start position:0%
reference no analysis and we're adding
 

00:24:36.900 --> 00:24:40.010 align:start position:0%
reference no analysis and we're adding
many<00:24:37.200><c> more</c><00:24:37.290><c> and</c><00:24:37.800><c> so</c><00:24:38.640><c> hopefully</c><00:24:38.850><c> our</c><00:24:39.660><c> rate</c><00:24:39.840><c> will</c>

00:24:40.010 --> 00:24:40.020 align:start position:0%
many more and so hopefully our rate will
 

00:24:40.020 --> 00:24:41.360 align:start position:0%
many more and so hopefully our rate will
really<00:24:40.260><c> help</c><00:24:40.350><c> you</c><00:24:40.560><c> get</c><00:24:40.770><c> your</c><00:24:40.890><c> cotton</c><00:24:41.100><c> code</c>

00:24:41.360 --> 00:24:41.370 align:start position:0%
really help you get your cotton code
 

00:24:41.370 --> 00:24:47.420 align:start position:0%
really help you get your cotton code
even<00:24:41.550><c> smaller</c><00:24:45.380><c> actually</c><00:24:46.380><c> we</c><00:24:46.980><c> announced</c>

00:24:47.420 --> 00:24:47.430 align:start position:0%
even smaller actually we announced
 

00:24:47.430 --> 00:24:51.080 align:start position:0%
even smaller actually we announced
Android<00:24:47.880><c> app</c><00:24:48.090><c> bundle</c><00:24:48.360><c> yesterday</c><00:24:49.880><c> one</c><00:24:50.880><c> of</c><00:24:50.970><c> the</c>

00:24:51.080 --> 00:24:51.090 align:start position:0%
Android app bundle yesterday one of the
 

00:24:51.090 --> 00:24:52.340 align:start position:0%
Android app bundle yesterday one of the
things<00:24:51.270><c> that</c><00:24:51.450><c> comes</c><00:24:51.660><c> with</c><00:24:51.870><c> Android</c><00:24:52.200><c> app</c>

00:24:52.340 --> 00:24:52.350 align:start position:0%
things that comes with Android app
 

00:24:52.350 --> 00:24:57.590 align:start position:0%
things that comes with Android app
bundle<00:24:52.560><c> is</c><00:24:53.900><c> dynamic</c><00:24:54.900><c> features</c><00:24:55.260><c> and</c><00:24:56.010><c> so</c><00:24:56.600><c> you</c>

00:24:57.590 --> 00:24:57.600 align:start position:0%
bundle is dynamic features and so you
 

00:24:57.600 --> 00:25:00.470 align:start position:0%
bundle is dynamic features and so you
cannot<00:24:57.900><c> only</c><00:24:58.260><c> split</c><00:24:58.560><c> your</c><00:24:58.830><c> apk</c><00:24:59.520><c> by</c><00:24:59.790><c> resources</c>

00:25:00.470 --> 00:25:00.480 align:start position:0%
cannot only split your apk by resources
 

00:25:00.480 --> 00:25:03.920 align:start position:0%
cannot only split your apk by resources
languages<00:25:01.350><c> etc</c><00:25:01.940><c> you</c><00:25:02.940><c> can</c><00:25:03.120><c> now</c><00:25:03.210><c> also</c><00:25:03.450><c> split</c>

00:25:03.920 --> 00:25:03.930 align:start position:0%
languages etc you can now also split
 

00:25:03.930 --> 00:25:08.750 align:start position:0%
languages etc you can now also split
your<00:25:04.050><c> features</c><00:25:04.410><c> into</c><00:25:05.870><c> multiple</c><00:25:06.870><c> apks</c><00:25:07.760><c> and</c>

00:25:08.750 --> 00:25:08.760 align:start position:0%
your features into multiple apks and
 

00:25:08.760 --> 00:25:09.860 align:start position:0%
your features into multiple apks and
that's<00:25:08.910><c> of</c><00:25:09.000><c> course</c><00:25:09.210><c> great</c><00:25:09.390><c> because</c><00:25:09.720><c> not</c>

00:25:09.860 --> 00:25:09.870 align:start position:0%
that's of course great because not
 

00:25:09.870 --> 00:25:11.780 align:start position:0%
that's of course great because not
everybody<00:25:10.320><c> uses</c><00:25:10.650><c> every</c><00:25:11.010><c> feature</c><00:25:11.190><c> of</c><00:25:11.340><c> your</c><00:25:11.610><c> app</c>

00:25:11.780 --> 00:25:11.790 align:start position:0%
everybody uses every feature of your app
 

00:25:11.790 --> 00:25:14.510 align:start position:0%
everybody uses every feature of your app
and<00:25:12.060><c> not</c><00:25:12.990><c> a</c><00:25:13.050><c> downside</c><00:25:13.650><c> and</c><00:25:13.980><c> we</c><00:25:14.220><c> heard</c><00:25:14.370><c> this</c>

00:25:14.510 --> 00:25:14.520 align:start position:0%
and not a downside and we heard this
 

00:25:14.520 --> 00:25:16.400 align:start position:0%
and not a downside and we heard this
already<00:25:14.730><c> with</c><00:25:15.120><c> instant</c><00:25:15.690><c> apps</c><00:25:15.810><c> last</c><00:25:16.110><c> year</c>

00:25:16.400 --> 00:25:16.410 align:start position:0%
already with instant apps last year
 

00:25:16.410 --> 00:25:18.500 align:start position:0%
already with instant apps last year
instead<00:25:17.250><c> it</c><00:25:17.370><c> makes</c><00:25:17.580><c> it</c><00:25:17.730><c> harder</c><00:25:18.060><c> to</c>

00:25:18.500 --> 00:25:18.510 align:start position:0%
instead it makes it harder to
 

00:25:18.510 --> 00:25:22.340 align:start position:0%
instead it makes it harder to
run<00:25:19.230><c> ProGuard</c><00:25:19.710><c> or</c><00:25:19.919><c> r8</c><00:25:20.549><c> over</c><00:25:21.090><c> your</c><00:25:21.270><c> app</c><00:25:21.510><c> because</c>

00:25:22.340 --> 00:25:22.350 align:start position:0%
run ProGuard or r8 over your app because
 

00:25:22.350 --> 00:25:23.960 align:start position:0%
run ProGuard or r8 over your app because
these<00:25:22.500><c> tools</c><00:25:22.770><c> they</c><00:25:23.309><c> are</c><00:25:23.370><c> based</c><00:25:23.610><c> on</c><00:25:23.820><c> doing</c>

00:25:23.960 --> 00:25:23.970 align:start position:0%
these tools they are based on doing
 

00:25:23.970 --> 00:25:26.690 align:start position:0%
these tools they are based on doing
whole<00:25:24.179><c> program</c><00:25:24.510><c> analysis</c><00:25:25.049><c> and</c><00:25:25.290><c> now</c><00:25:26.130><c> you</c><00:25:26.549><c> don't</c>

00:25:26.690 --> 00:25:26.700 align:start position:0%
whole program analysis and now you don't
 

00:25:26.700 --> 00:25:29.150 align:start position:0%
whole program analysis and now you don't
have<00:25:26.760><c> a</c><00:25:26.820><c> single</c><00:25:26.970><c> program</c><00:25:27.240><c> anymore</c><00:25:27.980><c> and</c><00:25:28.980><c> so</c>

00:25:29.150 --> 00:25:29.160 align:start position:0%
have a single program anymore and so
 

00:25:29.160 --> 00:25:31.010 align:start position:0%
have a single program anymore and so
what<00:25:29.400><c> we</c><00:25:29.520><c> came</c><00:25:29.640><c> up</c><00:25:29.700><c> with</c><00:25:30.000><c> is</c><00:25:30.210><c> a</c><00:25:30.240><c> way</c><00:25:30.450><c> to</c><00:25:30.630><c> take</c>

00:25:31.010 --> 00:25:31.020 align:start position:0%
what we came up with is a way to take
 

00:25:31.020 --> 00:25:34.909 align:start position:0%
what we came up with is a way to take
all<00:25:31.290><c> your</c><00:25:31.320><c> different</c><00:25:31.919><c> features</c><00:25:32.299><c> add</c><00:25:33.350><c> them</c><00:25:34.350><c> and</c>

00:25:34.909 --> 00:25:34.919 align:start position:0%
all your different features add them and
 

00:25:34.919 --> 00:25:36.799 align:start position:0%
all your different features add them and
pass<00:25:35.580><c> them</c><00:25:35.610><c> as</c><00:25:35.820><c> one</c><00:25:36.000><c> command</c><00:25:36.299><c> line</c><00:25:36.480><c> into</c>

00:25:36.799 --> 00:25:36.809 align:start position:0%
pass them as one command line into
 

00:25:36.809 --> 00:25:39.470 align:start position:0%
pass them as one command line into
ProGuard<00:25:37.200><c> or</c><00:25:37.380><c> r8</c><00:25:37.770><c> so</c><00:25:38.640><c> that</c><00:25:38.850><c> it</c><00:25:38.940><c> is</c><00:25:39.030><c> effectively</c>

00:25:39.470 --> 00:25:39.480 align:start position:0%
ProGuard or r8 so that it is effectively
 

00:25:39.480 --> 00:25:42.710 align:start position:0%
ProGuard or r8 so that it is effectively
a<00:25:39.600><c> whole</c><00:25:39.809><c> program</c><00:25:40.049><c> and</c><00:25:40.700><c> then</c><00:25:41.700><c> progitarr</c><00:25:42.240><c> a</c><00:25:42.600><c> it</c>

00:25:42.710 --> 00:25:42.720 align:start position:0%
a whole program and then progitarr a it
 

00:25:42.720 --> 00:25:46.480 align:start position:0%
a whole program and then progitarr a it
will<00:25:42.900><c> spit</c><00:25:43.559><c> out</c><00:25:43.590><c> a</c><00:25:43.710><c> single</c><00:25:44.419><c> jar</c><00:25:45.419><c> or</c><00:25:45.630><c> dex</c><00:25:45.870><c> file</c>

00:25:46.480 --> 00:25:46.490 align:start position:0%
will spit out a single jar or dex file
 

00:25:46.490 --> 00:25:49.700 align:start position:0%
will spit out a single jar or dex file
and<00:25:47.690><c> then</c><00:25:48.690><c> we</c><00:25:48.900><c> can</c><00:25:49.080><c> take</c><00:25:49.350><c> that</c><00:25:49.410><c> information</c>

00:25:49.700 --> 00:25:49.710 align:start position:0%
and then we can take that information
 

00:25:49.710 --> 00:25:52.909 align:start position:0%
and then we can take that information
the<00:25:50.580><c> ProGuard</c><00:25:50.970><c> mapping</c><00:25:51.540><c> file</c><00:25:51.809><c> and</c><00:25:52.110><c> the</c>

00:25:52.909 --> 00:25:52.919 align:start position:0%
the ProGuard mapping file and the
 

00:25:52.919 --> 00:25:55.280 align:start position:0%
the ProGuard mapping file and the
original<00:25:53.340><c> feature</c><00:25:53.520><c> jars</c><00:25:53.880><c> and</c><00:25:54.179><c> bit</c><00:25:55.110><c> that</c>

00:25:55.280 --> 00:25:55.290 align:start position:0%
original feature jars and bit that
 

00:25:55.290 --> 00:25:57.110 align:start position:0%
original feature jars and bit that
information<00:25:55.770><c> you</c><00:25:55.860><c> have</c><00:25:55.950><c> enough</c><00:25:56.460><c> data</c><00:25:56.940><c> to</c>

00:25:57.110 --> 00:25:57.120 align:start position:0%
information you have enough data to
 

00:25:57.120 --> 00:26:00.320 align:start position:0%
information you have enough data to
reconstitute<00:25:57.780><c> the</c><00:25:58.590><c> different</c><00:25:58.919><c> Dex</c><00:25:59.070><c> files</c><00:25:59.330><c> and</c>

00:26:00.320 --> 00:26:00.330 align:start position:0%
reconstitute the different Dex files and
 

00:26:00.330 --> 00:26:01.850 align:start position:0%
reconstitute the different Dex files and
so<00:26:00.419><c> we</c><00:26:00.510><c> have</c><00:26:00.600><c> this</c><00:26:00.720><c> new</c><00:26:00.870><c> deck</c><00:26:01.080><c> splitter</c><00:26:01.380><c> which</c>

00:26:01.850 --> 00:26:01.860 align:start position:0%
so we have this new deck splitter which
 

00:26:01.860 --> 00:26:05.060 align:start position:0%
so we have this new deck splitter which
is<00:26:02.010><c> based</c><00:26:02.280><c> on</c><00:26:02.490><c> the</c><00:26:02.700><c> da</c><00:26:02.850><c> gate</c><00:26:03.330><c> code</c><00:26:03.540><c> base</c><00:26:03.950><c> and</c><00:26:04.950><c> it</c>

00:26:05.060 --> 00:26:05.070 align:start position:0%
is based on the da gate code base and it
 

00:26:05.070 --> 00:26:06.890 align:start position:0%
is based on the da gate code base and it
will<00:26:05.160><c> spit</c><00:26:05.400><c> out</c><00:26:05.429><c> that</c><00:26:05.790><c> whole</c><00:26:06.179><c> program</c><00:26:06.600><c> again</c>

00:26:06.890 --> 00:26:06.900 align:start position:0%
will spit out that whole program again
 

00:26:06.900 --> 00:26:09.530 align:start position:0%
will spit out that whole program again
into<00:26:07.230><c> different</c><00:26:07.590><c> modules</c><00:26:07.980><c> and</c><00:26:08.370><c> now</c><00:26:09.120><c> you</c><00:26:09.179><c> can</c>

00:26:09.530 --> 00:26:09.540 align:start position:0%
into different modules and now you can
 

00:26:09.540 --> 00:26:12.130 align:start position:0%
into different modules and now you can
apply<00:26:09.750><c> shrinking</c><00:26:10.620><c> and</c><00:26:10.799><c> optimizations</c><00:26:11.429><c> to</c>

00:26:12.130 --> 00:26:12.140 align:start position:0%
apply shrinking and optimizations to
 

00:26:12.140 --> 00:26:16.130 align:start position:0%
apply shrinking and optimizations to
your<00:26:13.140><c> features</c><00:26:13.500><c> as</c><00:26:13.830><c> well</c><00:26:14.750><c> so</c><00:26:15.750><c> this</c><00:26:15.870><c> is</c><00:26:15.929><c> coming</c>

00:26:16.130 --> 00:26:16.140 align:start position:0%
your features as well so this is coming
 

00:26:16.140 --> 00:26:18.590 align:start position:0%
your features as well so this is coming
soon<00:26:16.470><c> it</c><00:26:17.100><c> will</c><00:26:17.280><c> be</c><00:26:17.429><c> in</c><00:26:17.460><c> Androids</c><00:26:17.940><c> you</c><00:26:18.150><c> have</c><00:26:18.240><c> 3.2</c>

00:26:18.590 --> 00:26:18.600 align:start position:0%
soon it will be in Androids you have 3.2
 

00:26:18.600 --> 00:26:25.700 align:start position:0%
soon it will be in Androids you have 3.2
by<00:26:19.290><c> the</c><00:26:19.350><c> time</c><00:26:19.590><c> it</c><00:26:19.770><c> reaches</c><00:26:20.130><c> stable</c><00:26:23.900><c> so</c><00:26:24.900><c> we</c>

00:26:25.700 --> 00:26:25.710 align:start position:0%
by the time it reaches stable so we
 

00:26:25.710 --> 00:26:26.830 align:start position:0%
by the time it reaches stable so we
looked<00:26:25.860><c> at</c><00:26:25.980><c> a</c><00:26:26.010><c> whole</c><00:26:26.130><c> bunch</c><00:26:26.190><c> of</c><00:26:26.490><c> different</c>

00:26:26.830 --> 00:26:26.840 align:start position:0%
looked at a whole bunch of different
 

00:26:26.840 --> 00:26:29.030 align:start position:0%
looked at a whole bunch of different
compiler<00:26:27.840><c> work</c><00:26:28.110><c> that</c><00:26:28.410><c> we've</c><00:26:28.559><c> done</c><00:26:28.590><c> over</c><00:26:28.799><c> the</c>

00:26:29.030 --> 00:26:29.040 align:start position:0%
compiler work that we've done over the
 

00:26:29.040 --> 00:26:32.320 align:start position:0%
compiler work that we've done over the
last<00:26:29.100><c> year</c><00:26:29.540><c> some</c><00:26:30.540><c> of</c><00:26:30.630><c> it</c><00:26:30.809><c> is</c><00:26:30.990><c> already</c><00:26:31.169><c> stable</c>

00:26:32.320 --> 00:26:32.330 align:start position:0%
last year some of it is already stable
 

00:26:32.330 --> 00:26:34.789 align:start position:0%
last year some of it is already stable
incremental<00:26:33.330><c> dexing</c><00:26:33.750><c> it</c><00:26:34.080><c> was</c><00:26:34.380><c> introduced</c>

00:26:34.789 --> 00:26:34.799 align:start position:0%
incremental dexing it was introduced
 

00:26:34.799 --> 00:26:37.669 align:start position:0%
incremental dexing it was introduced
Android<00:26:34.980><c> 3.0</c><00:26:35.790><c> the</c><00:26:36.210><c> sugar</c><00:26:37.110><c> stand</c><00:26:37.380><c> alone</c><00:26:37.559><c> was</c>

00:26:37.669 --> 00:26:37.679 align:start position:0%
Android 3.0 the sugar stand alone was
 

00:26:37.679 --> 00:26:40.430 align:start position:0%
Android 3.0 the sugar stand alone was
introduced<00:26:38.010><c> in</c><00:26:38.130><c> 3.0</c><00:26:38.669><c> in</c><00:26:39.660><c> Android</c><00:26:40.140><c> studio</c><00:26:40.169><c> at</c>

00:26:40.430 --> 00:26:40.440 align:start position:0%
introduced in 3.0 in Android studio at
 

00:26:40.440 --> 00:26:45.320 align:start position:0%
introduced in 3.0 in Android studio at
3.2<00:26:41.130><c> we're</c><00:26:41.850><c> enabling</c><00:26:42.240><c> d8</c><00:26:42.809><c> and</c><00:26:43.790><c> D</c><00:26:44.790><c> sugaring</c><00:26:45.090><c> as</c>

00:26:45.320 --> 00:26:45.330 align:start position:0%
3.2 we're enabling d8 and D sugaring as
 

00:26:45.330 --> 00:26:47.360 align:start position:0%
3.2 we're enabling d8 and D sugaring as
part<00:26:45.600><c> of</c><00:26:45.660><c> that</c><00:26:45.720><c> and</c><00:26:46.080><c> then</c><00:26:46.799><c> in</c><00:26:46.919><c> hundred</c><00:26:47.220><c> series</c>

00:26:47.360 --> 00:26:47.370 align:start position:0%
part of that and then in hundred series
 

00:26:47.370 --> 00:26:49.580 align:start position:0%
part of that and then in hundred series
3.2<00:26:47.880><c> we're</c><00:26:48.090><c> introducing</c><00:26:48.720><c> r8</c><00:26:49.230><c> as</c><00:26:49.470><c> an</c>

00:26:49.580 --> 00:26:49.590 align:start position:0%
3.2 we're introducing r8 as an
 

00:26:49.590 --> 00:26:53.840 align:start position:0%
3.2 we're introducing r8 as an
experimental<00:26:49.890><c> feature</c><00:26:51.590><c> please</c><00:26:52.590><c> use</c><00:26:52.950><c> it</c><00:26:52.980><c> we</c>

00:26:53.840 --> 00:26:53.850 align:start position:0%
experimental feature please use it we
 

00:26:53.850 --> 00:26:56.270 align:start position:0%
experimental feature please use it we
announced<00:26:54.330><c> that</c><00:26:54.450><c> DX</c><00:26:54.870><c> will</c><00:26:55.140><c> be</c><00:26:55.169><c> deprecated</c><00:26:55.770><c> as</c>

00:26:56.270 --> 00:26:56.280 align:start position:0%
announced that DX will be deprecated as
 

00:26:56.280 --> 00:26:58.490 align:start position:0%
announced that DX will be deprecated as
soon<00:26:56.520><c> as</c><00:26:56.730><c> we</c><00:26:56.910><c> find</c><00:26:57.179><c> no</c><00:26:57.419><c> more</c><00:26:57.690><c> major</c><00:26:57.900><c> issues</c><00:26:58.320><c> in</c>

00:26:58.490 --> 00:26:58.500 align:start position:0%
soon as we find no more major issues in
 

00:26:58.500 --> 00:27:03.650 align:start position:0%
soon as we find no more major issues in
NDA<00:26:59.960><c> so</c><00:27:00.960><c> for</c><00:27:01.860><c> you</c><00:27:01.950><c> in</c><00:27:02.100><c> a</c><00:27:02.190><c> year</c><00:27:02.340><c> or</c><00:27:02.400><c> so</c><00:27:02.669><c> DX</c><00:27:03.450><c> will</c>

00:27:03.650 --> 00:27:03.660 align:start position:0%
NDA so for you in a year or so DX will
 

00:27:03.660 --> 00:27:09.159 align:start position:0%
NDA so for you in a year or so DX will
be<00:27:03.840><c> gone</c><00:27:04.470><c> so</c><00:27:05.460><c> we'd</c><00:27:05.669><c> like</c><00:27:05.820><c> you</c><00:27:06.000><c> to</c><00:27:06.059><c> try</c><00:27:06.360><c> it</c><00:27:06.419><c> out</c>

00:27:09.159 --> 00:27:09.169 align:start position:0%
 
 

00:27:09.169 --> 00:27:12.260 align:start position:0%
 
file<00:27:10.169><c> box</c><00:27:10.470><c> so</c><00:27:11.130><c> if</c><00:27:11.460><c> you</c><00:27:11.580><c> go</c><00:27:11.700><c> in</c><00:27:11.940><c> Android</c><00:27:12.240><c> studio</c>

00:27:12.260 --> 00:27:12.270 align:start position:0%
file box so if you go in Android studio
 

00:27:12.270 --> 00:27:14.270 align:start position:0%
file box so if you go in Android studio
to<00:27:12.900><c> the</c><00:27:13.080><c> help</c><00:27:13.260><c> menu</c><00:27:13.320><c> there</c><00:27:13.740><c> is</c><00:27:13.770><c> a</c><00:27:13.860><c> submit</c>

00:27:14.270 --> 00:27:14.280 align:start position:0%
to the help menu there is a submit
 

00:27:14.280 --> 00:27:16.580 align:start position:0%
to the help menu there is a submit
feedback<00:27:14.490><c> option</c><00:27:15.450><c> which</c><00:27:16.020><c> will</c><00:27:16.230><c> immediately</c>

00:27:16.580 --> 00:27:16.590 align:start position:0%
feedback option which will immediately
 

00:27:16.590 --> 00:27:19.039 align:start position:0%
feedback option which will immediately
jump<00:27:17.070><c> you</c><00:27:17.190><c> dump</c><00:27:17.520><c> you</c><00:27:17.610><c> into</c><00:27:17.760><c> the</c><00:27:18.059><c> issue</c><00:27:18.660><c> tracker</c>

00:27:19.039 --> 00:27:19.049 align:start position:0%
jump you dump you into the issue tracker
 

00:27:19.049 --> 00:27:21.560 align:start position:0%
jump you dump you into the issue tracker
and<00:27:19.830><c> then</c><00:27:20.220><c> you</c><00:27:20.340><c> can</c><00:27:20.520><c> easily</c><00:27:20.910><c> file</c><00:27:21.059><c> bug</c><00:27:21.299><c> our</c>

00:27:21.560 --> 00:27:21.570 align:start position:0%
and then you can easily file bug our
 

00:27:21.570 --> 00:27:24.100 align:start position:0%
and then you can easily file bug our
team<00:27:21.809><c> is</c><00:27:21.929><c> very</c><00:27:21.960><c> responsive</c><00:27:22.740><c> to</c><00:27:23.309><c> these</c><00:27:23.400><c> bugs</c>

00:27:24.100 --> 00:27:24.110 align:start position:0%
team is very responsive to these bugs
 

00:27:24.110 --> 00:27:26.270 align:start position:0%
team is very responsive to these bugs
there<00:27:25.110><c> is</c><00:27:25.200><c> another</c><00:27:25.410><c> session</c><00:27:25.679><c> tomorrow</c>

00:27:26.270 --> 00:27:26.280 align:start position:0%
there is another session tomorrow
 

00:27:26.280 --> 00:27:28.370 align:start position:0%
there is another session tomorrow
that's<00:27:26.970><c> called</c><00:27:27.270><c> effective</c><00:27:27.570><c> program</c><00:27:28.200><c> keep</c>

00:27:28.370 --> 00:27:28.380 align:start position:0%
that's called effective program keep
 

00:27:28.380 --> 00:27:30.380 align:start position:0%
that's called effective program keep
rules<00:27:28.620><c> for</c><00:27:28.890><c> smaller</c><00:27:29.130><c> applications</c>

00:27:30.380 --> 00:27:30.390 align:start position:0%
rules for smaller applications
 

00:27:30.390 --> 00:27:32.930 align:start position:0%
rules for smaller applications
and<00:27:30.540><c> it's</c><00:27:30.810><c> basically</c><00:27:31.230><c> how</c><00:27:31.680><c> to</c><00:27:32.130><c> on</c><00:27:32.730><c> how</c><00:27:32.880><c> to</c>

00:27:32.930 --> 00:27:32.940 align:start position:0%
and it's basically how to on how to
 

00:27:32.940 --> 00:27:36.830 align:start position:0%
and it's basically how to on how to
start<00:27:33.210><c> using</c><00:27:33.450><c> ProGuard</c><00:27:33.990><c> or</c><00:27:34.140><c> RA</c><00:27:35.480><c> by</c><00:27:36.480><c> one</c><00:27:36.630><c> of</c><00:27:36.750><c> the</c>

00:27:36.830 --> 00:27:36.840 align:start position:0%
start using ProGuard or RA by one of the
 

00:27:36.840 --> 00:27:38.950 align:start position:0%
start using ProGuard or RA by one of the
developers<00:27:37.230><c> of</c><00:27:37.350><c> the</c><00:27:37.410><c> are</c><00:27:37.830><c> on</c><00:27:37.950><c> the</c><00:27:38.040><c> Irate</c><00:27:38.310><c> team</c>

00:27:38.950 --> 00:27:38.960 align:start position:0%
developers of the are on the Irate team
 

00:27:38.960 --> 00:27:41.570 align:start position:0%
developers of the are on the Irate team
please<00:27:39.960><c> fill</c><00:27:40.200><c> out</c><00:27:40.230><c> the</c><00:27:40.680><c> survey</c><00:27:40.710><c> on</c><00:27:41.160><c> google</c>

00:27:41.570 --> 00:27:41.580 align:start position:0%
please fill out the survey on google
 

00:27:41.580 --> 00:27:43.280 align:start position:0%
please fill out the survey on google
chrome<00:27:41.670><c> IO</c><00:27:42.090><c> scheduled</c><00:27:42.660><c> about</c><00:27:42.750><c> this</c><00:27:42.960><c> talk</c><00:27:43.140><c> as</c>

00:27:43.280 --> 00:27:43.290 align:start position:0%
chrome IO scheduled about this talk as
 

00:27:43.290 --> 00:27:45.870 align:start position:0%
chrome IO scheduled about this talk as
well<00:27:43.440><c> thanks</c><00:27:44.100><c> everybody</c>

00:27:45.870 --> 00:27:45.880 align:start position:0%
well thanks everybody
 

00:27:45.880 --> 00:28:07.099 align:start position:0%
well thanks everybody
[Music]

