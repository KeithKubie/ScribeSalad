WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.040
As we just learned,
requests that

00:00:02.040 --> 00:00:05.310
looked just like they came from
a form will not be preflighted.

00:00:05.309 --> 00:00:08.160
You can't read the response
if course doesn't allow it.

00:00:08.160 --> 00:00:10.589
But sometimes you might not
need to see the response

00:00:10.589 --> 00:00:11.910
to wreak havoc.

00:00:11.910 --> 00:00:14.580
Imagine a bank that has
a form to transfer money.

00:00:14.580 --> 00:00:17.820
If you are not a good
person, all you want to do

00:00:17.820 --> 00:00:19.769
is wire the money
to your own account.

00:00:19.769 --> 00:00:22.169
You don't care about
what the server answers.

00:00:22.170 --> 00:00:23.820
So you set up a
website that forges

00:00:23.820 --> 00:00:26.490
a request of the same
URL the form uses and set

00:00:26.489 --> 00:00:28.649
the parameters so that
the money is wired to you

00:00:28.649 --> 00:00:30.839
and the user won't even notice.

00:00:30.839 --> 00:00:33.420
That's why this kind of attack
is called Cross-Site Request

00:00:33.420 --> 00:00:35.730
Forgery or CSRF.

00:00:35.729 --> 00:00:38.039
Of course, banks have
sophisticated protection

00:00:38.039 --> 00:00:38.640
mechanisms.

00:00:38.640 --> 00:00:42.140
But for most purposes, a CSFR
token is protection enough.

00:00:42.140 --> 00:00:44.439
A CSFR token is an
additional field appended

00:00:44.439 --> 00:00:47.140
to a form that has been
put there by the server,

00:00:47.140 --> 00:00:49.170
and it's stored
server site as well.

00:00:49.170 --> 00:00:51.090
If someone is
submitting a request,

00:00:51.090 --> 00:00:53.640
the CSFR checks that token
against the one it has stored

00:00:53.640 --> 00:00:57.619
and only executes requests
if these tokens match.

