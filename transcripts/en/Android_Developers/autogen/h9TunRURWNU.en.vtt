WEBVTT
Kind: captions
Language: en

00:00:00.740 --> 00:00:02.580
 This small icon means participation. 

00:00:02.580 --> 00:00:04.400
 This is a great system in Android. 

00:00:04.400 --> 00:00:06.330
 You can create action_send intent yourself, 

00:00:06.330 --> 00:00:09.260
 But better use ShareCompat and share text using 

00:00:09.260 --> 00:00:10.707
 Only one order. 

00:00:10.707 --> 00:00:12.290
 I mean like - I will explain what is necessary 

00:00:12.290 --> 00:00:15.080
 To share content correctly with other apps, 

00:00:15.080 --> 00:00:17.110
 As well as receiving content. 

00:00:17.110 --> 00:00:18.330
 What types of content? 

00:00:18.330 --> 00:00:21.690
 We've seen the text, but what about HTML-formatted text 

00:00:21.690 --> 00:00:25.210
 Files and images, is anything like this possible? 

00:00:25.210 --> 00:00:26.750
 Yes, possible. 

00:00:26.750 --> 00:00:27.840
 So let's do it. 

00:00:27.840 --> 00:00:28.960
 Let's share some texts. 

00:00:28.960 --> 00:00:32.290
 ShareCompat does the hard work of building intent. 

00:00:32.290 --> 00:00:34.660
 We just make sure you set the MIME type. 

00:00:34.660 --> 00:00:37.440
 The app filters the content type 

00:00:37.440 --> 00:00:38.930
 Who can receive it. 

00:00:38.930 --> 00:00:40.770
 Then we call startActivity . 

00:00:40.770 --> 00:00:42.830
 And we surround it with resolveActivity . 

00:00:42.830 --> 00:00:45.560
 This prevents the activity from finding exceptions to situations 

00:00:45.560 --> 00:00:47.390
 They do not already have any apps 

00:00:47.390 --> 00:00:49.060
 You can handle what we share. 

00:00:49.060 --> 00:00:51.080
 Caution is better than remorse. 

00:00:51.080 --> 00:00:52.400
 But that was very easy. 

00:00:52.400 --> 00:00:56.340
 We implement HTML text - as an e-mail message. 

00:00:56.340 --> 00:00:57.790
 Well, there is not much to do. 

00:00:57.790 --> 00:01:00.340
 HTML text uses setHtmlText . 

00:01:00.340 --> 00:01:01.670
 That's logical. 

00:01:01.670 --> 00:01:05.000
 Add topic and we can add address fields to " 

00:01:05.000 --> 00:01:07.090
 And a copy to a Bcc and multiple Bcc. 

00:01:07.090 --> 00:01:09.690
 It applies only to mail applications, but it is OK. 

00:01:09.690 --> 00:01:11.610
 The receiving applications can ignore it if desired. 

00:01:11.610 --> 00:01:14.060
 Just provide all you have. 

00:01:14.060 --> 00:01:16.120
 But talk about the sender side, 

00:01:16.120 --> 00:01:18.311
 Without talking about the future side, 

00:01:18.311 --> 00:01:20.560
 Like talking about peanut butter without mention 

00:01:20.560 --> 00:01:23.470
 Jelly candy, or something like that. 

00:01:23.470 --> 00:01:26.100
 Future activity will need an intent filter 

00:01:26.100 --> 00:01:27.880
 With the appropriate MIME type. 

00:01:27.880 --> 00:01:30.740
 We will note that we have added the category.DEFAULT. 

00:01:30.740 --> 00:01:33.430
 We will not get any of the implicit intent mechanisms to startActivity 

00:01:33.430 --> 00:01:35.200
 Which we created without it. 

00:01:35.200 --> 00:01:37.485
 category.BROWSABLE is what allows for sites 

00:01:37.485 --> 00:01:40.300
 Share directly within the app. 

00:01:40.300 --> 00:01:43.100
 Then, whether you use the SharedCompat sender or not, 

00:01:43.100 --> 00:01:45.510
 You can use the intentReader to extract 

00:01:45.510 --> 00:01:47.590
 The information you need. 

00:01:47.590 --> 00:01:50.860
 But the text, whether coordinated or not, is somewhat primitive. 

00:01:50.860 --> 00:01:54.660
 Let's move on to the fun part - sharing an image, for example. 

00:01:54.660 --> 00:01:56.320
 Now we are approaching our goal. 

00:01:56.320 --> 00:01:59.400
 Well, if setStream is new. 

00:01:59.400 --> 00:02:02.750
 Except where do we get uriToImage ? 

00:02:02.750 --> 00:02:04.080
 Here comes the interesting part. 

00:02:04.080 --> 00:02:07.710
 You may think this can be the path of the file that performs the image itself. 

00:02:07.710 --> 00:02:09.943
 This is really a bad idea. 

00:02:09.943 --> 00:02:12.360
 This means that the file must be written in an accessible location 

00:02:12.360 --> 00:02:14.120
 From other applications, which may require 

00:02:14.120 --> 00:02:16.970
 WRITE_STORAGE permission, and the future application will need 

00:02:16.970 --> 00:02:20.010
 Sure to READ_STORAGE permission. 

00:02:20.010 --> 00:02:22.110
 With Android Marshmallow 6.0, 

00:02:22.110 --> 00:02:24.120
 These are serious permissions 

00:02:24.120 --> 00:02:26.140
 Request during run-time. 

00:02:26.140 --> 00:02:27.840
 Do not be such applications. 

00:02:27.840 --> 00:02:29.875
 Instead, we have a full training document 

00:02:29.875 --> 00:02:33.200
 Sharing files correctly does not require any permission 

00:02:33.200 --> 00:02:36.180
 Store using FileProvider. 

00:02:36.180 --> 00:02:39.920
 Check out the publications and documents on our blog to learn how to set up everything first. 

00:02:39.920 --> 00:02:42.020
 So how does our code look now? 

00:02:42.020 --> 00:02:44.720
 We have used getUriForFile for the file provider 

00:02:44.720 --> 00:02:48.576
 For a URI that can be shared and suitable for scrolling to another application. 

00:02:48.576 --> 00:02:49.075
 Wonderful. 

00:02:49.075 --> 00:02:52.400
 We can even get a way to select the type automatically 

00:02:52.400 --> 00:02:53.750
 Of the file. 

00:02:53.750 --> 00:02:55.780
 Inside, this so-called method is used 

00:02:55.780 --> 00:02:58.420
 With URI-based permissions. 

00:02:58.420 --> 00:03:00.400
 The application gives the sender permission 

00:03:00.400 --> 00:03:03.180
 For only one URI. 

00:03:03.180 --> 00:03:06.510
 We grant permission to call setData through a URI, 

00:03:06.510 --> 00:03:09.930
 Then add FLAG_GRANT_READ_URI_PERMISSION. 

00:03:09.930 --> 00:03:11.550
 That's all. 

00:03:11.550 --> 00:03:15.220
 Now the future side can use getContentResolver 

00:03:15.220 --> 00:03:18.680
 openInputStream to get the image. 

00:03:18.680 --> 00:03:21.890
 If we know how to share texts and files with other applications, 

00:03:21.890 --> 00:03:24.000
 As well as receiving these files, all this 

00:03:24.000 --> 00:03:26.100
 Without serious permissions. 

00:03:26.100 --> 00:03:28.680
 I hope this helps you to cooperate with others 

00:03:28.680 --> 00:03:30.770
 And better apps. 

