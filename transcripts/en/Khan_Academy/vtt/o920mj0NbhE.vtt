WEBVTT
Kind: captions
Language: en

00:00:00.630 --> 00:00:03.010
What I want to do in this
video is introduce you

00:00:03.010 --> 00:00:07.660
to what I think is one of
the neatest ideas in computer

00:00:07.660 --> 00:00:09.620
science, and that is recursion.

00:00:09.620 --> 00:00:11.984
So the way that we've defined
this factorial function

00:00:11.984 --> 00:00:13.400
in the last few
videos is actually

00:00:13.400 --> 00:00:15.060
an iterative definition.

00:00:15.060 --> 00:00:18.470
We are iterating
through different values

00:00:18.470 --> 00:00:20.250
for this variable
i, and then we're

00:00:20.250 --> 00:00:22.880
essentially taking those values,
adding one, then multiplying

00:00:22.880 --> 00:00:24.542
those times our
original product.

00:00:24.542 --> 00:00:26.500
And when we keep iterating
through all of that,

00:00:26.500 --> 00:00:29.190
our eventual product
has all of the values

00:00:29.190 --> 00:00:32.340
from 1 through the number
multiplied by each other,

00:00:32.340 --> 00:00:34.447
and they're all sitting
in this variable product.

00:00:34.447 --> 00:00:36.530
What I'm going to do here
is rewrite this program.

00:00:36.530 --> 00:00:38.242
And what's cool
about functions--

00:00:38.242 --> 00:00:39.700
I'm going to rewrite
this function.

00:00:39.700 --> 00:00:42.450
What's cool about functions
are this function,

00:00:42.450 --> 00:00:44.860
we just say, look, it returns
a factorial of a number.

00:00:44.860 --> 00:00:47.291
We don't care how this
is actually written.

00:00:47.291 --> 00:00:49.290
And so anything that's
using this function call,

00:00:49.290 --> 00:00:51.581
no matter how I implement
it, as long as I implement it

00:00:51.581 --> 00:00:53.510
correctly, it shouldn't
worry about it.

00:00:53.510 --> 00:00:57.170
So as long as I implement the
guts of this function right,

00:00:57.170 --> 00:00:59.160
even if I do it in a
very different way,

00:00:59.160 --> 00:01:02.240
it shouldn't affect the
behavior of any of the functions

00:01:02.240 --> 00:01:03.210
that call it.

00:01:03.210 --> 00:01:06.200
So let's go ahead and try
to define this function

00:01:06.200 --> 00:01:07.610
recursively.

00:01:07.610 --> 00:01:10.586
And I think you're going to
find this slightly fascinating.

00:01:10.586 --> 00:01:12.460
So I'm going to do it
a little bit different.

00:01:12.460 --> 00:01:15.660
We're going to put some
conditionals in here as well.

00:01:15.660 --> 00:01:18.840
So I'm going to say-- so
it's almost-- in some ways,

00:01:18.840 --> 00:01:20.720
recursion is really
deep and complicated,

00:01:20.720 --> 00:01:23.840
and on some levels, it's way
simpler than anything else.

00:01:23.840 --> 00:01:27.200
So let me just put all
of this stuff down there.

00:01:27.200 --> 00:01:29.520
So I'm going to say, look,
if the number-- you always

00:01:29.520 --> 00:01:30.853
want to think about a base case.

00:01:30.853 --> 00:01:35.340
What's a situation where kind
of the nugget or the smallest

00:01:35.340 --> 00:01:37.730
values we can put into
for a number that'll

00:01:37.730 --> 00:01:39.450
give us a decent response?

00:01:39.450 --> 00:01:45.810
So we'll say, look,
if number is--

00:01:45.810 --> 00:01:49.920
let's say if it's less
than or equal to 1,

00:01:49.920 --> 00:01:53.420
so if it's less than or equal
to 1, let's just return.

00:01:53.420 --> 00:01:54.620
Well, then it's factorial.

00:01:54.620 --> 00:01:56.161
Let's just return
1, especially if we

00:01:56.161 --> 00:01:58.440
want to have the same
behavior as the old function.

00:01:58.440 --> 00:02:00.330
The old function,
regardless of whether we

00:02:00.330 --> 00:02:02.050
put a 1 there, a 0
there, or actually,

00:02:02.050 --> 00:02:04.050
even if we put a negative
1 or negative 2 there,

00:02:04.050 --> 00:02:07.390
it always gave us the
factorial being equal to 1.

00:02:07.390 --> 00:02:09.289
So that's exactly what
we're doing over here.

00:02:09.289 --> 00:02:11.730
We're returning 1 if the
number is less than 1.

00:02:11.730 --> 00:02:14.900
And this also defines
our base case.

00:02:14.900 --> 00:02:16.420
I can even label it here.

00:02:16.420 --> 00:02:20.570
So let me label--
this is our base case.

00:02:20.570 --> 00:02:23.770
And you'll see what I mean
for a second by base case.

00:02:23.770 --> 00:02:25.470
And what I'm about
to do now, this

00:02:25.470 --> 00:02:28.160
is the really exciting
part about recursion.

00:02:28.160 --> 00:02:32.990
If the number is not
less than or equal to 1,

00:02:32.990 --> 00:02:36.680
so I could write
l if-- well, maybe

00:02:36.680 --> 00:02:38.480
I'll just write l, actually.

00:02:38.480 --> 00:02:40.960
So if the number is not
less than or equal to 1,

00:02:40.960 --> 00:02:43.470
I'm going to return
something different.

00:02:43.470 --> 00:02:47.300
And what I'm going to
return is that number

00:02:47.300 --> 00:02:53.160
times the factorial--
times the factorial of one

00:02:53.160 --> 00:02:55.090
less than that number.

00:02:55.090 --> 00:02:57.790
Now, the reason why this
is fascinating and cool

00:02:57.790 --> 00:03:01.120
and all the rest is I
just defined something

00:03:01.120 --> 00:03:02.990
using that something.

00:03:02.990 --> 00:03:05.670
So I just defined a
function called factorial,

00:03:05.670 --> 00:03:08.535
and I defined it using the
definition of the function

00:03:08.535 --> 00:03:09.035
factorial.

00:03:09.035 --> 00:03:10.940
It is referring to itself.

00:03:10.940 --> 00:03:12.815
This is what recursive
functions do.

00:03:12.815 --> 00:03:14.940
But if you think about it--
and I'll diagram it out

00:03:14.940 --> 00:03:16.250
in more detail in
the next video,

00:03:16.250 --> 00:03:18.230
so hopefully it makes a
little bit more sense--

00:03:18.230 --> 00:03:20.230
it should kind of work.

00:03:20.230 --> 00:03:23.850
Because if you put a 1
or a 0 in for a number,

00:03:23.850 --> 00:03:25.020
it'll just return 1.

00:03:25.020 --> 00:03:27.170
What happens if the number is 2?

00:03:27.170 --> 00:03:29.310
Well, if the number
is 2, it'll say, look,

00:03:29.310 --> 00:03:31.643
the number is not less than
our 1, so I'll go over here.

00:03:31.643 --> 00:03:37.540
So it says it'll return 2
times factorial of 2 minus 1,

00:03:37.540 --> 00:03:39.190
or factorial of 1.

00:03:39.190 --> 00:03:42.580
And then it'll call factorial
again, and factorial of 1

00:03:42.580 --> 00:03:44.980
is just 1, so it'll
return 2 times 1.

00:03:44.980 --> 00:03:46.660
So that'll work out for 2.

00:03:46.660 --> 00:03:47.880
Try it for 3.

00:03:47.880 --> 00:03:50.686
If you do a
factorial of 3, it'll

00:03:50.686 --> 00:03:52.060
go down to this
clause over here,

00:03:52.060 --> 00:03:53.768
because 3 is not less
than or equal to 1,

00:03:53.768 --> 00:03:58.340
and it'll return 3 times
the factorial of 3 minus 1,

00:03:58.340 --> 00:03:59.719
which is 2, the factorial of 2.

00:03:59.719 --> 00:04:01.760
Well, we know it already
returns the right answer

00:04:01.760 --> 00:04:04.480
for the factorial of 2, so
it'll return 3 times 2, which

00:04:04.480 --> 00:04:06.379
is 6, which is a factorial of 3.

00:04:06.379 --> 00:04:08.170
So hopefully you're
getting the gist of it.

00:04:08.170 --> 00:04:10.586
Factorial of 4 is going to
work for the exact same reason.

00:04:10.586 --> 00:04:12.990
It's going to boil down to
4 times the factorial of 3.

00:04:12.990 --> 00:04:15.209
We know that it works
for the factorial of 3.

00:04:15.209 --> 00:04:16.750
And just to prove
to you that I'm not

00:04:16.750 --> 00:04:19.410
doing some type of crazy voodoo,
and that this will actually

00:04:19.410 --> 00:04:22.070
work, let's try to
run the program.

00:04:22.070 --> 00:04:26.130
Let's try to run the
program right here.

00:04:26.130 --> 00:04:28.425
This is some stuff that
I was doing beforehand.

00:04:28.425 --> 00:04:30.170
Let me just get rid of that.

00:04:30.170 --> 00:04:31.710
So let's just run the program.

00:04:31.710 --> 00:04:33.470
So all I've done
is I've redefined

00:04:33.470 --> 00:04:39.210
the factorial function, but
I've redefined it recursively.

00:04:39.210 --> 00:04:40.710
I won't have to
change the comments.

00:04:40.710 --> 00:04:45.050
So let me save it, and let's
interpret this program.

00:04:45.050 --> 00:04:48.540
Let's execute it and see if
it does what we need it to do.

00:04:48.540 --> 00:04:50.790
All right.

00:04:50.790 --> 00:04:52.550
So they're prompting
us for something.

00:04:52.550 --> 00:04:55.920
Let's take the
factorial of 5-- 120.

00:04:55.920 --> 00:04:58.179
And so once again,
our factorial program,

00:04:58.179 --> 00:05:00.720
no matter what we put in there,
it gives us the right answer.

00:05:00.720 --> 00:05:03.410
But what's really cool is
it's now doing it recursively.

00:05:03.410 --> 00:05:06.910
When I do factorial of 6,
say, OK, factorial of 6.

00:05:06.910 --> 00:05:08.560
Is 6 less than or equal to 1?

00:05:08.560 --> 00:05:10.620
Well, no it's not, so
it goes to this else

00:05:10.620 --> 00:05:11.990
clause right over here.

00:05:11.990 --> 00:05:15.200
So then it says return 6
times the factorial of 5.

00:05:15.200 --> 00:05:17.150
Then it says, OK,
let me remember

00:05:17.150 --> 00:05:18.420
6 times the factorial of 5.

00:05:18.420 --> 00:05:20.253
Let's figure out what
the factorial of 5 is.

00:05:20.253 --> 00:05:24.410
Well, factorial of 5 is going to
be 5 times the factorial of 4.

00:05:24.410 --> 00:05:26.900
And then that factorial of 4
is 4 times the factorial of 3,

00:05:26.900 --> 00:05:29.160
all the way down to the
factorial of 1, which is 1.

00:05:29.160 --> 00:05:32.440
And so it'll actually return 6
times 5 times 4 times 3 times

00:05:32.440 --> 00:05:35.180
2 times 1.

