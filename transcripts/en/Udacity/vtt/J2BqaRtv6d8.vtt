WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Back to the code. That's our post object.

00:00:03.000 --> 00:00:08.000
Let's get to the actual main handler. Blog front is the handler for just /blog.

00:00:08.000 --> 00:00:10.000
The first thing we do is we look up all of the posts.

00:00:10.000 --> 00:00:15.000
This is blog front. This is our handler for the main blog URL.

00:00:15.000 --> 00:00:18.000
The first thing it does--actually there's some leftover development code here.

00:00:18.000 --> 00:00:20.000
Let's get rid of that.

00:00:20.000 --> 00:00:23.000
The first thing this does is looks up all of the posts.

00:00:23.000 --> 00:00:27.000
We've been using GQL to do queries against the Google datastore.

00:00:27.000 --> 00:00:31.000
I was playing around here, and I used Google's procedural language for writing a query.

00:00:31.000 --> 00:00:37.000
This looks at all of the posts ordered by creation time and stores them in the post object.

00:00:37.000 --> 00:00:41.000
We could have done GQL just as easily to get our posts. I was playing around with something new.

00:00:41.000 --> 00:00:43.000
That's what I did here.

00:00:43.000 --> 00:00:49.000
This renders the front HTML template with this query, the result of this query, and the variable posts.

00:00:49.000 --> 00:00:51.000
I'll show you all of the templates when we're done.

00:00:51.000 --> 00:00:54.000
I can also show you what the GQL for this line would look like.

00:00:54.000 --> 00:00:56.000
Let me go ahead and give that a try.

00:00:56.000 --> 00:01:00.000
I've changed that line to use GQL--the SQL that we've been playing around with.

00:01:00.000 --> 00:01:04.000
That just looks something like this--select * from Post order by created descending.

00:01:04.000 --> 00:01:10.000
Actually, I think I said 10 most recent, so it would be limit 10 as the SQL for doing a limit of 10.

00:01:10.000 --> 00:01:13.000
Let's go ahead and give this a try in the browser to make sure it behaves the same.

00:01:13.000 --> 00:01:17.000
I'll reload this page, and it does. Okay, cool.

00:01:17.000 --> 00:01:20.000
We used front.html to render our posts. Let's move onto the next one.

00:01:20.000 --> 00:01:25.000
This next handler is the PostPage. This is the page for a particular post.

00:01:25.000 --> 00:01:29.000
The way you look up the particular post in the Google datastore,

00:01:29.000 --> 00:01:34.000
is you first make a key, and in this case I used the from_path() function.

00:01:34.000 --> 00:01:40.000
It says find the post with the ID post_id, which gets passed in from the URL--

00:01:40.000 --> 00:01:44.000
I'll show you that in the handler definition--whose parent is blog_key().

00:01:44.000 --> 00:01:47.000
Now you don't need to do this parent part.

00:01:47.000 --> 00:01:50.000
Because I create the blog with the parent, I have to look it up with the parent as well.

00:01:50.000 --> 00:01:54.000
This is how I did it--we called db.get(), which is how you look up a particular item.

00:01:54.000 --> 00:01:58.000
We stored that in post. Now we see if there's not a post just return 404.

00:01:58.000 --> 00:02:00.000
Basically, if the user typed in garbage in the URL

00:02:00.000 --> 00:02:05.000
If there is a post, return permalink.html with post equals post.

00:02:05.000 --> 00:02:09.000
There's a lot there. Let's talk about how post ID gets into this function first.

00:02:09.000 --> 00:02:12.000
If we go down to the bottom past homework 2.

00:02:12.000 --> 00:02:15.000
You can see I have defined a couple of URL handlers.

00:02:15.000 --> 00:02:17.000
The main one blog is simple. It goes to BlogFront.

00:02:17.000 --> 00:02:20.000
/Blog/newpost goes to the NewPost handler.

00:02:20.000 --> 00:02:22.000
We haven't talked that yet, but that's all fairly straightforward.

00:02:22.000 --> 00:02:29.000
/Blog/ and then a number, 0-9+, this is a regular expression for how

00:02:29.000 --> 00:02:31.000
to describe basically an integer.

00:02:31.000 --> 00:02:33.000
This goes to the PostPage handler.

00:02:33.000 --> 00:02:36.000
This is how in App Engine you pass a parameter into the PostPage handler.

00:02:36.000 --> 00:02:39.000
You may have done this differently, but this is how I've done it.

00:02:39.000 --> 00:02:42.000
This basically says anything in parentheses here will be passed as a parameter

00:02:42.000 --> 00:02:45.000
into either the get or post function for PostPage.

00:02:45.000 --> 00:02:49.000
If we go back up to PostPage, a string representing that number gets passed in.

00:02:49.000 --> 00:02:53.000
That's why I call int on it. I turn that into key, and then I do the lookup.

00:02:53.000 --> 00:02:56.000
Then we call permalink.html. Let's see how that looks in practice.

00:02:56.000 --> 00:03:01.000
Here I've gone on blog/3, which was the ID of the last post we just entered.

00:03:01.000 --> 00:03:05.000
This 3 gets sent into our function as post_ID. We convert it into an integer.

00:03:05.000 --> 00:03:08.000
We make a key, and then we look up that key.

00:03:08.000 --> 00:03:11.000
If I were to type in an ID that doesn't exist here, I get an error page.

00:03:11.000 --> 00:03:16.000
Now this is a 404, but Chrome is using this error page, because I didn't send any content.

00:03:16.000 --> 00:03:21.000
You can make a special 404 page, but I haven't done that, so this is what we see.

00:03:21.000 --> 00:03:25.000
If I were to type other junk that's not an integer, we get this different 404 page.

00:03:25.000 --> 00:03:28.000
Now, why did we get two different 404 pages?

00:03:28.000 --> 00:03:31.000
Well, because it went through two different 404 handlers.

00:03:31.000 --> 00:03:33.000
I'll show you that here in our editor.

00:03:33.000 --> 00:03:36.000
If we go down to our URL handler, this regular expression only matches numbers--

00:03:36.000 --> 00:03:39.000
0 through 9 and then 1 or more of them. That's what the plus means.

00:03:39.000 --> 00:03:42.000
That means that's going to go to PostPage.

00:03:42.000 --> 00:03:45.000
Now, when I just typed in the letters, this URL didn't match at all,

00:03:45.000 --> 00:03:49.000
and this whole block of code kind of fell through. None of these URLs matched.

00:03:49.000 --> 00:03:54.000
The WSGI application, the kind of webapp2 handler--the default handler, printed their 404 page,

00:03:54.000 --> 00:03:56.000
which says "404 Not Found."

00:03:56.000 --> 00:03:58.000
We'll go up to my 404 handler.

00:03:58.000 --> 00:04:01.000
If an integer is passed into the URL, we'll make it this far,

00:04:01.000 --> 00:04:04.000
and we won't be able to look up a post.

00:04:04.000 --> 00:04:09.000
Instead we'll just return error 404, but with no content. That's why we saw that empty Chrome page.

00:04:09.000 --> 00:04:12.000
Normally, we'd probably have a function called send 404 or something

00:04:12.000 --> 00:04:16.000
that has a prettier 404 with an image or that sort of thing.

00:04:16.000 --> 00:04:19.000
We'll go through all the templates at once.

