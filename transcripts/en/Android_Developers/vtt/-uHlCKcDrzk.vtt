WEBVTT
Kind: captions
Language: en

00:00:03.149 --> 00:00:06.359
&gt;&gt;Joe Malin: Hello and welcome once again
to Android Developer Office Hours.

00:00:06.359 --> 00:00:08.639
I'm your moderator, Joe Malin.

00:00:08.639 --> 00:00:14.200
With me today from Android Developer Relations
are Reto Meier, world famous author, and next

00:00:14.200 --> 00:00:15.419
to me Trevor Johns.

00:00:15.419 --> 00:00:17.050
&gt;&gt;Trevor Johns: Hello.

00:00:17.050 --> 00:00:18.140
&gt;&gt;Joe: Sorry.

00:00:18.140 --> 00:00:22.070
And also three gentlemen from engineering.

00:00:22.070 --> 00:00:25.550
From your right to left we have, go ahead.

00:00:25.550 --> 00:00:28.130
&gt;&gt;Chet Haase: I don't know where we're supposed
to start.

00:00:28.130 --> 00:00:29.130
I'm Chet.

00:00:29.130 --> 00:00:32.810
I work on the UI Toolkit Team on graphics
and animation and stuff.

00:00:32.810 --> 00:00:33.960
&gt;&gt;Romain Guy: and I'm Romain.

00:00:33.960 --> 00:00:37.410
I also work on the UI Toolkit Team on graphics
and animations.

00:00:37.410 --> 00:00:42.240
&gt;&gt;Xavier Ducrohet: I work on Developer Tools
and SDK.

00:00:42.240 --> 00:00:45.060
&gt;&gt;Joe: Thank you.

00:00:45.060 --> 00:00:47.810
Well let's get right to it.

00:00:47.810 --> 00:00:53.500
We have some questions in Moderator that we'll
start repeating and give you some answers

00:00:53.500 --> 00:00:55.020
if we can.

00:00:55.020 --> 00:00:56.040
First one.

00:00:56.040 --> 00:01:00.040
Using fragments in an application that reorders
them visually in portrait and landscape.

00:01:00.040 --> 00:01:05.689
Is there a best policy to avoid java dot lang
dot illegalstateexception or cursive entry

00:01:05.689 --> 00:01:11.180
to execute pending transaction after multiple
rotations in a short interval?

00:01:11.180 --> 00:01:14.600
&gt;&gt;Trevor: [laughs] That's a good questions
actually.

00:01:14.600 --> 00:01:15.600
I'm not sure.

00:01:15.600 --> 00:01:18.960
Uh, do any of you up here know?

00:01:18.960 --> 00:01:19.960
No.

00:01:19.960 --> 00:01:20.960
OK.

00:01:20.960 --> 00:01:22.890
[laughs] Um, yeah, honestly I've never gotten
that error.

00:01:22.890 --> 00:01:29.170
So I'm not quite sure or, I mean, I think
the problem here is.

00:01:29.170 --> 00:01:34.330
I mean, well, you're probably, you're, uh,
just trying to think.

00:01:34.330 --> 00:01:35.330
It, it.

00:01:35.330 --> 00:01:46.840
Hm. [laughs] I think the important thing would
be to make sure that you're not performing

00:01:46.840 --> 00:01:52.049
fragment transactions right during the rotation.

00:01:52.049 --> 00:01:58.970
So, if there's some way that you could avoid
that, I'd probably wanna see your code to

00:01:58.970 --> 00:02:00.369
see what exactly you're doing.

00:02:00.369 --> 00:02:04.200
Most of the time, this shouldn't happen.

00:02:04.200 --> 00:02:06.790
So I'm really curious what in your code you're
doing.

00:02:06.790 --> 00:02:11.330
If you happen to be watching live, feel free
to hop on the air via our Hangout.

00:02:11.330 --> 00:02:15.120
And we'd love to talk with you a bit more
and figure out what exactly you're doing.

00:02:15.120 --> 00:02:18.989
But I think without seeing your code, none
of us have a good answer off the top of our

00:02:18.989 --> 00:02:19.989
heads.

00:02:19.989 --> 00:02:20.989
&gt;&gt;Joe: Right.

00:02:20.989 --> 00:02:24.150
I would agree with that.

00:02:24.150 --> 00:02:28.659
Based on what everybody has said so far it's
probably best if you do something like post

00:02:28.659 --> 00:02:32.569
part of your code to stack overflow so that
we can see what's going on.

00:02:32.569 --> 00:02:36.079
There may be another reason that this is happening.

00:02:36.079 --> 00:02:43.390
You can't, I wouldn't just offhand assume
that the problem is because of a change in

00:02:43.390 --> 00:02:44.480
orientation.

00:02:44.480 --> 00:02:49.169
So go ahead and post something to stack overflow
and we'll take a look at it.

00:02:49.169 --> 00:02:52.329
Well, let's move on.

00:02:52.329 --> 00:02:56.750
We have a link here that says, launcher icons
should use a distinct silhouette.

00:02:56.750 --> 00:03:01.829
If this is desired, its' very difficult to
sell the idea to PMs and designers.

00:03:01.829 --> 00:03:05.349
As long as Google apps uses squares with rounded
corners.

00:03:05.349 --> 00:03:07.040
Any plans to change these?

00:03:07.040 --> 00:03:08.249
&gt;&gt;Trevor: [laughs]

00:03:08.249 --> 00:03:12.299
&gt;&gt;Romain: Well, what apps do use rounded corners?

00:03:12.299 --> 00:03:14.569
'Cause I can think of only G plus.

00:03:14.569 --> 00:03:22.590
All the standards apps that we ship like Google
Playstore, Gmail, they use the silhouette

00:03:22.590 --> 00:03:23.590
icon.

00:03:23.590 --> 00:03:24.590
&gt;&gt;Trevor: Yep.

00:03:24.590 --> 00:03:25.780
Maps as well.

00:03:25.780 --> 00:03:31.810
Google plus is pretty much the only app I
can think of as well that uses the rounded

00:03:31.810 --> 00:03:32.810
rectangle.

00:03:32.810 --> 00:03:36.790
And in that case that's essentially part of
their logo.

00:03:36.790 --> 00:03:37.790
So.

00:03:37.790 --> 00:03:38.790
Yeah.

00:03:38.790 --> 00:03:44.930
&gt;&gt;Joe: I can comment that this may be that
a confusion about what's in the design guide

00:03:44.930 --> 00:03:46.180
versus what we use.

00:03:46.180 --> 00:03:54.040
As I remember the design guide has an example
in which there's a sort of three dimensional

00:03:54.040 --> 00:03:58.340
aspect to the icon with a dropped shadow.

00:03:58.340 --> 00:04:00.700
And we're not using that right now.

00:04:00.700 --> 00:04:12.060
So I would say that you should use something
that is distinct, that has a distinct background

00:04:12.060 --> 00:04:16.590
so that it'll appear correctly regardless
of what the device background is.

00:04:16.590 --> 00:04:20.590
Other than that, I, we probably have to look
more into this.

00:04:20.590 --> 00:04:25.690
&gt;&gt;Trevor: Yeah, I mean, generally speaking
the goal should be to try and make your icons

00:04:25.690 --> 00:04:27.419
match the system icons.

00:04:27.419 --> 00:04:30.220
I'll also add one other thing.

00:04:30.220 --> 00:04:34.150
Some device manufactures do change the default
icon themes.

00:04:34.150 --> 00:04:41.270
So make sure you're actually looking at the
icon theme as they're distributed with, the

00:04:41.270 --> 00:04:43.300
stock version of Android.

00:04:43.300 --> 00:04:47.760
So, a good way to do it is just to go and
download the emulator and take a look at what

00:04:47.760 --> 00:04:49.139
the icons look like there.

00:04:49.139 --> 00:04:54.300
Just so you're not confused by any of the
theming that gets applied by boolean modifications.

00:04:54.300 --> 00:04:55.500
&gt;&gt;Joe: Yes.

00:04:55.500 --> 00:04:57.889
That's a good point.

00:04:57.889 --> 00:04:58.889
OK.

00:04:58.889 --> 00:04:59.889
Next question.

00:04:59.889 --> 00:05:05.280
Both Dr. Sandler and the Jellybean Overview
say you can add up to three notification actions,

00:05:05.280 --> 00:05:09.270
but the API Overview says you can add up to
two.

00:05:09.270 --> 00:05:11.590
Which one is correct?

00:05:11.590 --> 00:05:17.870
Actually I looked into this just before we
started today and the answer is, three.

00:05:17.870 --> 00:05:25.460
You can add up to three icons with text and
intense, that will display when you display

00:05:25.460 --> 00:05:26.460
the notification.

00:05:26.460 --> 00:05:31.500
&gt;&gt;Chet: Yeah, I would definitely trust Dr.
Sandler 'cause he has a PhD.

00:05:31.500 --> 00:05:32.500
[laughter]

00:05:32.500 --> 00:05:33.650
&gt;&gt;Joe: Right.

00:05:33.650 --> 00:05:38.169
Well, I'm not sure that I trust somebody just
because they have a PhD.

00:05:38.169 --> 00:05:41.850
But in addition Dr. Sandler is the person
who actually developed this feature.

00:05:41.850 --> 00:05:46.780
So I would say that if he's mistaken, we have
bigger problems.

00:05:46.780 --> 00:05:48.089
So yeah, the answer is three.

00:05:48.089 --> 00:05:49.089
&gt;&gt; male panelist: Yeah.

00:05:49.089 --> 00:05:52.569
That sounds like a doc bug we should fix.

00:05:52.569 --> 00:05:53.849
&gt;&gt;Joe: Yeah, I'll have to look into that.

00:05:53.849 --> 00:06:00.770
The API Overview is basically something that
says here's what's new in Android 4.1.

00:06:00.770 --> 00:06:05.630
I don't think we're saying in anything about
either ICS or Jellybean in the API guide itself

00:06:05.630 --> 00:06:06.630
yet.

00:06:06.630 --> 00:06:08.520
You know, it happens that I work on that.

00:06:08.520 --> 00:06:12.340
So I'll go back in and take a look at that
as well.

00:06:12.340 --> 00:06:16.009
&gt;&gt;Trevor: We have a question from Ed Burnett
in the Hangout.

00:06:16.009 --> 00:06:17.009
OK.

00:06:17.009 --> 00:06:19.939
Go ahead, Ed.

00:06:19.939 --> 00:06:24.220
I think you muted it.

00:06:24.220 --> 00:06:25.259
&gt;&gt;Joe: Maybe muted

00:06:25.259 --> 00:06:26.259
&gt;&gt;Trevor: Or I've muted it.

00:06:26.259 --> 00:06:27.259
Let's try again.

00:06:27.259 --> 00:06:28.259
&gt;&gt;Ed: Can you hear me now?

00:06:28.259 --> 00:06:29.259
&gt;&gt;Trevor: Yeah.

00:06:29.259 --> 00:06:30.259
&gt;&gt;Joe: Mm-hm.

00:06:30.259 --> 00:06:32.349
&gt;&gt;Ed: OK, so I have a program which uses JNI.

00:06:32.349 --> 00:06:41.180
And, you know it works fine on Gingerbread,
Honeycomb and Ice Cream Sandwich.

00:06:41.180 --> 00:06:46.379
But on Jellybean I get an error that I put
in the Moderator.

00:06:46.379 --> 00:06:50.580
Says "attempt to use stale local reference."

00:06:50.580 --> 00:06:53.020
And I'd like your advice on how to debug that.

00:06:53.020 --> 00:06:55.629
&gt;&gt;Trevor: Alright, sorry.

00:06:55.629 --> 00:07:01.180
So what exactly, so what are you doing when
you get this error, one more time?

00:07:01.180 --> 00:07:04.539
&gt;&gt;Ed: I'm making a call to a native function.

00:07:04.539 --> 00:07:06.430
&gt;&gt;Trevor: Humm.

00:07:06.430 --> 00:07:07.430
Um.

00:07:07.430 --> 00:07:08.430
So.

00:07:08.430 --> 00:07:14.280
Ed, does it occur all the time or is it only
under certain conditions?

00:07:14.280 --> 00:07:17.599
&gt;&gt;Ed: It occurs all the time.

00:07:17.599 --> 00:07:18.699
On Jellybean.

00:07:18.699 --> 00:07:21.460
&gt;&gt;Trevor: Only on Jellybean?

00:07:21.460 --> 00:07:22.710
Um, that's interesting.

00:07:22.710 --> 00:07:28.180
[laughs] Unfortunately I don't have too much
experience using the NDK myself.

00:07:28.180 --> 00:07:33.069
Most of the work I do is you know, using,
is entirely in the Java language.

00:07:33.069 --> 00:07:38.040
So, I can't, I'm not sure that I'm probably
the best person to ask.

00:07:38.040 --> 00:07:42.760
But I'm not sure we have any NDK experts with
us right now who could actually answer that.

00:07:42.760 --> 00:07:48.430
&gt;&gt;Romain: Actually, this kind of error looks
like what happens when you, goes from JNI

00:07:48.430 --> 00:07:53.650
codes or from native codes you can grab references
to the data that is on the data heap.

00:07:53.650 --> 00:07:58.199
And if you don't do it properly for instance,
if you grab a reference and you don't release

00:07:58.199 --> 00:08:00.039
it, you might run into that kind of issues.

00:08:00.039 --> 00:08:06.629
I know that we had a bunch of applications
that were not using JNI properly, so there's

00:08:06.629 --> 00:08:08.659
this feature that you can use to check JNI.

00:08:08.659 --> 00:08:10.590
I don't know how to enable it.

00:08:10.590 --> 00:08:13.629
I think it's in Developer Settings or maybe
the [indistinct] option.

00:08:13.629 --> 00:08:18.330
But it definitely sounds like you're trying
to access data improperly.

00:08:18.330 --> 00:08:23.909
Maybe you kept reference on the native side
longer than you should have.

00:08:23.909 --> 00:08:27.370
But it's hard to say without seeing code or
anything like that.

00:08:27.370 --> 00:08:31.490
&gt;&gt;Ed: That's what I figured and I did enable
"check JNI".

00:08:31.490 --> 00:08:34.450
Uh, so, it didn't really any extra information.

00:08:34.450 --> 00:08:38.690
&gt;&gt;Romain: So if you can post the question
somewhere on stack overflow, or firebug, maybe

00:08:38.690 --> 00:08:41.180
we can route that to the data guys.

00:08:41.180 --> 00:08:46.230
And they might be able to tell you, if you're
doing something wrong or maybe there's a bug.

00:08:46.230 --> 00:08:52.450
But I know that we have tons of JNI code in
the platform and we have not seen this error,

00:08:52.450 --> 00:08:55.440
so and I don't believe we have changed many
things with JNI.

00:08:55.440 --> 00:09:01.320
So yeah, show us your code and we'll try to
figure it out.

00:09:01.320 --> 00:09:02.450
&gt;&gt;Ed: OK.

00:09:02.450 --> 00:09:03.590
&gt;&gt;Joe: OK.

00:09:03.590 --> 00:09:05.290
Thank you, Romain.

00:09:05.290 --> 00:09:11.770
Our next question is "What is the best way
to play short endgame sounds.

00:09:11.770 --> 00:09:15.060
Soundpool crashes on dual core phones.

00:09:15.060 --> 00:09:18.370
Media player has 200 millisecond plus delays.

00:09:18.370 --> 00:09:22.120
Open SL requires SPK9+.

00:09:22.120 --> 00:09:23.790
That leaves Audio Track.

00:09:23.790 --> 00:09:27.310
Are there any examples for this at API with
static sounds?"

00:09:27.310 --> 00:09:29.030
&gt;&gt;Trevor: Alright, I can take that one.

00:09:29.030 --> 00:09:32.370
First off, a bit of a clarification.

00:09:32.370 --> 00:09:35.950
Soundpool does not crash on all dual core
phones.

00:09:35.950 --> 00:09:43.250
It crashes on a subset of dual core phones,
which are running Gingerbread.

00:09:43.250 --> 00:09:45.540
So not all dual core phones running Gingerbread.

00:09:45.540 --> 00:09:46.540
Just some of them.

00:09:46.540 --> 00:09:55.030
Unfortunately this is a bug in the way Gingerbread
was ported to run on dual core devices.

00:09:55.030 --> 00:09:59.430
Unfortunately there's not really a good solution
I can recommend.

00:09:59.430 --> 00:10:02.410
Unfortunately Audio Track will, if you actually
try and use that you'll find it has the exact

00:10:02.410 --> 00:10:03.410
same bug.

00:10:03.410 --> 00:10:09.560
So, the work-around here is really, yeah,
the best case is to try and encourage your

00:10:09.560 --> 00:10:12.880
users to upgrade to Ice Cream Sandwich on
those devices.

00:10:12.880 --> 00:10:18.420
I believe specifically this is an issue on
Samsung Galaxy S2 devices.

00:10:18.420 --> 00:10:25.180
And unfortunately upgrading to Ice cream Sandwich
on those I'm told does require updating UPA

00:10:25.180 --> 00:10:29.400
USB cable which also makes it a bit difficult
for them to actually update.

00:10:29.400 --> 00:10:36.630
But if they're on Gingerbread, probably the,
if you do insist on trying to get this to

00:10:36.630 --> 00:10:44.230
work, pretty much the only option available
to you is to write your own mixer as a native

00:10:44.230 --> 00:10:45.230
library.

00:10:45.230 --> 00:10:47.780
Which admittedly is quite a bit of work.

00:10:47.780 --> 00:10:52.990
So, most likely on those devices, if you're,
if you don't feel confident or you don't have

00:10:52.990 --> 00:10:58.240
time to go and do that level of work, would
be to go and detect when you're on those,

00:10:58.240 --> 00:11:02.920
that specific subset of devices and display
dialog saying "unfortunately this app is not

00:11:02.920 --> 00:11:09.910
compatible with your device, please contact
the manufacturer regarding any former updates."

00:11:09.910 --> 00:11:11.410
Unfortunately that's really the best answer
we can give you.

00:11:11.410 --> 00:11:12.410
[feedback]

00:11:12.410 --> 00:11:13.410
&gt;&gt;Joe: OK

00:11:13.410 --> 00:11:14.500
&gt;&gt;Reto: OK.

00:11:14.500 --> 00:11:18.140
We have another question on the Hangout from
Pieter.

00:11:18.140 --> 00:11:19.300
&gt;&gt;Joe: Great.

00:11:19.300 --> 00:11:21.040
&gt;&gt;Reto: about fragments.

00:11:21.040 --> 00:11:22.780
&gt;&gt;Joe: Fire away.

00:11:22.780 --> 00:11:26.250
&gt;&gt;Joe: Hello, can you hear us.

00:11:26.250 --> 00:11:29.290
&gt;&gt;[Pedro]: So, are you hearing me OK?

00:11:29.290 --> 00:11:30.290
&gt;&gt;Trevor: Yes.

00:11:30.290 --> 00:11:31.290
&gt;&gt;Joe: Mm-hmm.

00:11:31.290 --> 00:11:33.410
&gt;&gt;[Pedro]: I'm having a little, jumps, OK.

00:11:33.410 --> 00:11:38.020
So I have an application that has like a dashboard.

00:11:38.020 --> 00:11:43.010
With some buttons that have a lot of information.

00:11:43.010 --> 00:11:44.010
So the

00:11:44.010 --> 00:11:45.510
[feedback]

00:11:45.510 --> 00:11:49.500
UI is kind of complicated.

00:11:49.500 --> 00:11:57.710
The fragment that kept the UI logic and kept
it really tight.

00:11:57.710 --> 00:12:04.890
So each time the application rotates, in portrait
it has four buttons.

00:12:04.890 --> 00:12:09.470
But in landscape it only presents three for
each screen.

00:12:09.470 --> 00:12:14.610
So each time I rotate, I have to remove the
fragments and re-add them.

00:12:14.610 --> 00:12:20.890
So the problem that I'm having is that if
I rotate really quickly, from portrait to

00:12:20.890 --> 00:12:31.430
landscape, and all that, [ inaudible] crash,
that I actually, because I read in the documentation

00:12:31.430 --> 00:12:35.890
that the removal of fragments its operation.

00:12:35.890 --> 00:12:45.860
So, I didn't, I tried to execute that transaction
to be sure that all the pinging transactions

00:12:45.860 --> 00:12:48.740
of adding or removing fragments are done.

00:12:48.740 --> 00:12:56.560
But the [inaudible], means so little time.

00:12:56.560 --> 00:13:02.920
So I don't know what the best policy, you
have have cross that problem already, better.

00:13:02.920 --> 00:13:03.920
So any suggestion is welcome.

00:13:03.920 --> 00:13:04.920
&gt;&gt;Trevor: OK.

00:13:04.920 --> 00:13:14.570
Do one of you have a good suggestion for how
to handle this? [laughs] No?

00:13:14.570 --> 00:13:15.840
Alright.

00:13:15.840 --> 00:13:21.620
Yeah, I think probably we need to go and actually
run this by somebody else on our team to have

00:13:21.620 --> 00:13:23.720
them take a detailed look at your code.

00:13:23.720 --> 00:13:31.130
If you wanna go ahead and post a code snippet
of the code that handles your fragment transaction,

00:13:31.130 --> 00:13:38.450
onto stack overflow, and then just post it
as a comment on the G plus post, we can go

00:13:38.450 --> 00:13:42.390
and take a look at that after the show and
try and get your answer.

00:13:42.390 --> 00:13:44.730
Yeah, unfortunately nobody here on the set
right now knows the answer but I'm sure we

00:13:44.730 --> 00:13:45.920
can find one for you.

00:13:45.920 --> 00:13:47.220
&gt;&gt;Pieter: OK.

00:13:47.220 --> 00:13:48.510
Thank you.

00:13:48.510 --> 00:13:50.460
&gt;&gt;Trevor: you're welcome.

00:13:50.460 --> 00:13:52.400
&gt;&gt;Joe: Thank you.

00:13:52.400 --> 00:13:57.260
OK, let's go back to Moderator unless we've
got other live questions?

00:13:57.260 --> 00:13:58.260
Nope.

00:13:58.260 --> 00:13:59.260
Go back to Moderator.

00:13:59.260 --> 00:14:04.580
"Is there a way to integrate an app into the
new radial menu introduced for Google Now?"

00:14:04.580 --> 00:14:06.320
&gt;&gt;Reto: No.

00:14:06.320 --> 00:14:13.080
&gt;&gt;Trevor: [laughs] At least not without modifying
the source code for the short system.

00:14:13.080 --> 00:14:17.320
But as an app developer, no.

00:14:17.320 --> 00:14:18.740
&gt;&gt;Joe: OK.

00:14:18.740 --> 00:14:23.140
Next question I have is "Jellybean boasts
that view stub is remotable.

00:14:23.140 --> 00:14:28.570
Does this mean that a non-remotable view can
be lazy inflated into this placeholder?"

00:14:28.570 --> 00:14:29.820
&gt;&gt;Reto: No.

00:14:29.820 --> 00:14:34.490
&gt;&gt;Trevor: [laughs] I mean to go into a bit
more detail, you know remote views have a

00:14:34.490 --> 00:14:36.030
bit of restriction as to what they can do.

00:14:36.030 --> 00:14:42.350
And so just thinking about this for a second,
if you could place a regular view inside of

00:14:42.350 --> 00:14:48.130
a remotable view stub, that's not remotable,
you could probably do a lot of things that

00:14:48.130 --> 00:14:50.350
you shouldn't be able to do inside a remote
feeder.

00:14:50.350 --> 00:14:55.260
So just from that standpoint it doesn't make
sense to be able to do that.

00:14:55.260 --> 00:14:57.770
&gt;&gt;Joe: OK.

00:14:57.770 --> 00:14:58.770
Thank you.

00:14:58.770 --> 00:15:00.290
&gt;&gt;male off mic : Loophole.

00:15:00.290 --> 00:15:01.810
&gt;&gt;Joe: Next question.

00:15:01.810 --> 00:15:05.230
[laughs] Sorry, that loophole is closed.

00:15:05.230 --> 00:15:07.000
Next question from Moderator.

00:15:07.000 --> 00:15:11.610
"Expandable notifications currently have a
fairly large discoverability issue.

00:15:11.610 --> 00:15:16.700
Is there a way to make them, make it more
visible that the notification is expandable?

00:15:16.700 --> 00:15:20.460
And is it a way to expand it while using the
phone one handed?

00:15:20.460 --> 00:15:22.430
That is, not using multi touch?"

00:15:22.430 --> 00:15:26.480
&gt;&gt;Chet: Actually, don't they auto expand when
they become the top notification?

00:15:26.480 --> 00:15:27.670
That's part of the discoverability.

00:15:27.670 --> 00:15:28.950
&gt;&gt;Trevor: Right.

00:15:28.950 --> 00:15:30.230
So yes.

00:15:30.230 --> 00:15:33.430
The system does automatically expand them.

00:15:33.430 --> 00:15:38.250
But the ones that are closed, I mean, if you
really wanted to go and give somebody a visual

00:15:38.250 --> 00:15:41.770
cue you could go and add some small text there
saying "Drag to expand."

00:15:41.770 --> 00:15:45.900
I wouldn't recommend doing that because none
of the system apps do it which means your

00:15:45.900 --> 00:15:48.070
app's gonna feel out of place.

00:15:48.070 --> 00:15:53.060
And generally speaking you should try and
make your apps blend in with the style that's

00:15:53.060 --> 00:15:55.250
provided by the system apps.

00:15:55.250 --> 00:16:00.110
So, given that none of our apps actually go
and provide any additional clues behind, aside

00:16:00.110 --> 00:16:04.360
from what the notification floor already does
I wouldn't do anything extra.

00:16:04.360 --> 00:16:09.060
I'm also not aware of any way to go and manually
expand them without using multitouch.

00:16:09.060 --> 00:16:12.660
But again, the system will automatically expand
them under certain circumstances.

00:16:12.660 --> 00:16:15.210
&gt;&gt;Joe: thank you.

00:16:15.210 --> 00:16:18.760
&gt;&gt;Trevor: And of course you can always tap
on them, too, if you want to actually open

00:16:18.760 --> 00:16:19.760
them.

00:16:19.760 --> 00:16:20.760
&gt;&gt;Joe: Right.

00:16:20.760 --> 00:16:21.760
Yeah.

00:16:21.760 --> 00:16:25.630
I would say that probably the best thing is
to assume that, in most cases, the user's

00:16:25.630 --> 00:16:32.730
gonna wanna tap on the notification and actually
go to the application that was responsible

00:16:32.730 --> 00:16:34.590
for issuing it to begin with.

00:16:34.590 --> 00:16:36.600
That's what users expect.

00:16:36.600 --> 00:16:41.110
There's certainly a lot of information now
that became from looking at notifications.

00:16:41.110 --> 00:16:42.370
In the current releases.

00:16:42.370 --> 00:16:49.030
But still we wanna encourage users to, we
wanna encourage you to have your users go

00:16:49.030 --> 00:16:52.280
back to the application to get more information.

00:16:52.280 --> 00:16:54.910
That's the best way of handling it with an
app.

00:16:54.910 --> 00:16:57.760
I think.

00:16:57.760 --> 00:16:59.020
Next question.

00:16:59.020 --> 00:17:01.690
"Regarding bitmap dot recycle.

00:17:01.690 --> 00:17:05.640
Recently I have noticed heap memory corruption
error occurs.

00:17:05.640 --> 00:17:09.920
Is it true that in ICS that we should not
be calling bitmap dot recycle?

00:17:09.920 --> 00:17:13.070
I saw this entry but no other documentation."

00:17:13.070 --> 00:17:14.750
And then there's a link to stack overflow.

00:17:14.750 --> 00:17:18.500
&gt;&gt;Romain: No, it's not true that you should
not call bitmap dot recycle.

00:17:18.500 --> 00:17:19.720
you can call it.

00:17:19.720 --> 00:17:25.900
But actually as of Honeycomb, so Android 3.0,
calling bitmap dot recycle will not do much.

00:17:25.900 --> 00:17:31.130
It will simply set an internal byte rate to
null on the dalvik side.

00:17:31.130 --> 00:17:36.120
So it's gonna help a little bit to reclaim
the memory faster as soon as the GC can do

00:17:36.120 --> 00:17:37.480
it.

00:17:37.480 --> 00:17:39.550
But it's not gonna make a big difference.

00:17:39.550 --> 00:17:43.960
So if you're running into issues because of
bitmap dot recycle you can avoid calling it.

00:17:43.960 --> 00:17:46.700
It's not going to do anything bad to your
application.

00:17:46.700 --> 00:17:49.050
But it's perfectly safe to call it.

00:17:49.050 --> 00:17:52.890
Now, I don't know why you're wanting it to
crash when calling bitmap dot recycle.

00:17:52.890 --> 00:17:55.350
I'm sure there was some sort of a bug in the
ICS.

00:17:55.350 --> 00:18:00.320
And if you have a repro case or you can Firebug,
we'll take a look at it and see what's going

00:18:00.320 --> 00:18:03.700
on and make sure that it doesn't happen in
Jellybean or future versions of Android.

00:18:03.700 --> 00:18:12.280
And I think there was a follow up to the question,
asking how you can avoid out of memory errors.

00:18:12.280 --> 00:18:17.130
So what we've done in Android 3.0 is we added
a new feature in bitmapfactory dot options.

00:18:17.130 --> 00:18:19.200
where you can reuse bitmaps.

00:18:19.200 --> 00:18:21.720
So you already have a bitmap already in memory.

00:18:21.720 --> 00:18:24.340
You can pass it to the bitmap factory so it's
reused.

00:18:24.340 --> 00:18:26.610
So we'll reuse the allocated memory.

00:18:26.610 --> 00:18:29.340
And you can pre-allocate your bitmaps ahead
of time.

00:18:29.340 --> 00:18:34.370
And reuse them as you go so that you don't,
you don't need more memory when you're on

00:18:34.370 --> 00:18:35.370
your app.

00:18:35.370 --> 00:18:38.250
&gt;&gt;Joe: Thank you, Romain.

00:18:38.250 --> 00:18:39.250
Next.

00:18:39.250 --> 00:18:44.770
&gt;&gt;Reto: There's a couple of questions from
people in noisy environments on the hangout.

00:18:44.770 --> 00:18:47.130
So I'm going to read them out to you.

00:18:47.130 --> 00:18:48.130
&gt;&gt;Joe: Please.

00:18:48.130 --> 00:18:49.900
&gt;&gt;Reto: This is from Anush Goral.

00:18:49.900 --> 00:18:55.310
He says "Is there a way to add the Google
Maps API to the Intel Exit Six Android Emulator?

00:18:55.310 --> 00:18:59.890
And I don't want to build a system image from
scratch as mentioned in the stack overflow

00:18:59.890 --> 00:19:00.890
question."

00:19:00.890 --> 00:19:04.970
&gt;&gt;Xavier: So you can't really do that yourself
anyway.

00:19:04.970 --> 00:19:06.980
We do plan on doing it at some point.

00:19:06.980 --> 00:19:08.960
We just haven't had time yet.

00:19:08.960 --> 00:19:12.090
But it's high on our priority list.

00:19:12.090 --> 00:19:13.210
&gt;&gt;Reto: Excellent.

00:19:13.210 --> 00:19:14.330
Thank you.

00:19:14.330 --> 00:19:17.520
And I have another question from, we can scroll
up here.

00:19:17.520 --> 00:19:23.890
From Mark, who says "On Windows XP", and he
apologizes for that knowingly, "Is it possible

00:19:23.890 --> 00:19:31.140
to run NTP mode while USB debugging is turned
on, when the next server running Android running

00:19:31.140 --> 00:19:32.440
4.1.1?"

00:19:32.440 --> 00:19:36.490
&gt;&gt;Romain: Can you repeat the question?

00:19:36.490 --> 00:19:39.360
&gt;&gt;Reto: I can repeat the question.

00:19:39.360 --> 00:19:41.530
Is it possible to run NTP mode.

00:19:41.530 --> 00:19:42.530
Uh.

00:19:42.530 --> 00:19:43.530
Oops.

00:19:43.530 --> 00:19:44.530
&gt;&gt;Joe: NTP.

00:19:44.530 --> 00:19:47.890
&gt;&gt;Romain: So NTP at the same time as you're
doing debugging?

00:19:47.890 --> 00:19:49.520
&gt;&gt;Reto: that is correct.

00:19:49.520 --> 00:19:53.350
&gt;&gt;Romain: It should work 'cause that's what
happens every time I plug in my device on

00:19:53.350 --> 00:19:54.500
my desk computer.

00:19:54.500 --> 00:19:55.660
&gt;&gt;Xavier: Windows XP.

00:19:55.660 --> 00:19:57.210
&gt;&gt;Romain: on Windows XP?

00:19:57.210 --> 00:19:59.310
Uh, I don't, do you know about?

00:19:59.310 --> 00:20:00.310
Sure.

00:20:00.310 --> 00:20:01.910
&gt;&gt;Reto: I've never tried it on XP either.

00:20:01.910 --> 00:20:02.910
So.

00:20:02.910 --> 00:20:04.310
I know it works on the Mac, but.

00:20:04.310 --> 00:20:07.430
&gt;&gt;Romain: Yeah, it works on the Mac.

00:20:07.430 --> 00:20:10.250
It works on Linux, I presume

00:20:10.250 --> 00:20:11.250
[laughter]

00:20:11.250 --> 00:20:12.370
&gt;&gt;Joe: it works on Linux, You just need to
install some stuff.

00:20:12.370 --> 00:20:13.370
&gt;&gt;Romain: OK.

00:20:13.370 --> 00:20:16.080
So it works on the Linux, works on Mac, don't
know about Windows XP.

00:20:16.080 --> 00:20:17.080
We should try it.

00:20:17.080 --> 00:20:18.080
Do we have a Windows XP Machine?

00:20:18.080 --> 00:20:19.080
&gt;&gt;Xavier: [inaudible]

00:20:19.080 --> 00:20:20.080
&gt;&gt;Romain: OK.

00:20:20.080 --> 00:20:23.480
&gt;&gt;Reto: We should be able to dig one up somewhere.

00:20:23.480 --> 00:20:25.570
&gt;&gt;Joe: Any others?

00:20:25.570 --> 00:20:26.570
OK.

00:20:26.570 --> 00:20:28.330
Let's go back to Moderator.

00:20:28.330 --> 00:20:33.750
"How can I expand the collapse notification
from Jellybean in the emulator?

00:20:33.750 --> 00:20:38.010
Is there a simpler way other than tethering
the device to the emulator to send those multitouch

00:20:38.010 --> 00:20:39.130
gestures?"

00:20:39.130 --> 00:20:45.880
&gt;&gt;Xavier: No. there's no way right now to
emulate multitouch without that.

00:20:45.880 --> 00:20:48.300
&gt;&gt;Chet: Two mice?

00:20:48.300 --> 00:20:50.710
&gt;&gt;Xavier: Two mice won't work on all OS.

00:20:50.710 --> 00:20:53.480
I think it works on some, but not all of them.

00:20:53.480 --> 00:20:55.561
Yeah, we don't really have a solution for
that right now?

00:20:55.561 --> 00:20:57.540
&gt;&gt;Trevor: Can you do multitouch via Monkey?

00:20:57.540 --> 00:20:58.940
&gt;&gt;Romain: [inaudible]

00:20:58.940 --> 00:21:01.700
&gt;&gt;Xavier: I guess you could.

00:21:01.700 --> 00:21:05.210
&gt;&gt;Trevor: Yeah, so you can probably run a
script to do it.

00:21:05.210 --> 00:21:06.210
Um.

00:21:06.210 --> 00:21:09.770
I can't remember what the exact commands are
off the top of my head, but if you take a

00:21:09.770 --> 00:21:14.640
look at the documentation for Monkey Runner
on the Android Dev site.

00:21:14.640 --> 00:21:19.540
You'll see that you can basically send program,
mouse gestures, key events, things like that.

00:21:19.540 --> 00:21:22.730
And then you can use that to go and write
a little script that generates your multitouch

00:21:22.730 --> 00:21:25.300
events for you.

00:21:25.300 --> 00:21:29.420
&gt;&gt;Joe: OK.

00:21:29.420 --> 00:21:30.420
Next question.

00:21:30.420 --> 00:21:36.990
"How can one load data on fragments, not creating
them, in a view pager when changing pages,

00:21:36.990 --> 00:21:39.710
and avoid destroying the fragments.

00:21:39.710 --> 00:21:41.520
Like lazy-loading the fragments data."

00:21:41.520 --> 00:21:46.360
&gt;&gt;Trevor: [laughs] Silence.

00:21:46.360 --> 00:21:47.970
Um.

00:21:47.970 --> 00:21:50.890
&gt;&gt;Joe: We've stumped the panel.

00:21:50.890 --> 00:21:52.450
&gt;&gt;Trevor: Yeah.

00:21:52.450 --> 00:21:53.450
Um.

00:21:53.450 --> 00:21:54.450
That's a good question.

00:21:54.450 --> 00:21:57.580
I mean there is a [indistinct] then that gets
called when the fragment comes visible, right?

00:21:57.580 --> 00:22:00.020
So you could go and try and do it there.

00:22:00.020 --> 00:22:04.470
Just listen for when your fragment's actually
on the screen.

00:22:04.470 --> 00:22:07.450
&gt;&gt;Trevor: That's probably the best way to
do it.

00:22:07.450 --> 00:22:08.450
Yeah.

00:22:08.450 --> 00:22:09.910
&gt;&gt;Joe: [sighs]

00:22:09.910 --> 00:22:16.940
&gt;&gt;Reto: I have a question this time from Trevor
Solomon on the Android Developers stream.

00:22:16.940 --> 00:22:20.960
And he asks, or he says he's pretty new to
Android Development and would like to avoid

00:22:20.960 --> 00:22:23.430
using Eclipse, due to the many quirks it has.

00:22:23.430 --> 00:22:25.610
Strange, I've never heard that before.

00:22:25.610 --> 00:22:27.660
Instead, he's learned about IntelliJ.

00:22:27.660 --> 00:22:30.850
However, version 11 does not have a UI designer.

00:22:30.850 --> 00:22:34.190
Are there any third party external tools to
help with your UI design.

00:22:34.190 --> 00:22:36.340
Preferably free or hobbyist levels.

00:22:36.340 --> 00:22:37.850
&gt;&gt;Xavier: Not that I know.

00:22:37.850 --> 00:22:42.130
At least not ones that are really go.

00:22:42.130 --> 00:22:44.920
IntelliJ 12 will have a UI designer though.

00:22:44.920 --> 00:22:46.870
So there is a think a preview version of it.

00:22:46.870 --> 00:22:49.090
I don't know how stable it is.

00:22:49.090 --> 00:22:52.320
But I think you can download it and try it.

00:22:52.320 --> 00:22:53.372
&gt;&gt;Chet: They were showing it at IO.

00:22:53.372 --> 00:22:54.372
&gt;&gt;Xavier: Yeah, they were showing it.

00:22:54.372 --> 00:22:56.809
But I don't know if it's completely finished
and polished.

00:22:56.809 --> 00:22:57.809
It's probably still buggy.

00:22:57.809 --> 00:23:01.210
I don't know when it's supposed to be released
and

00:23:01.210 --> 00:23:02.872
&gt;&gt;Chet: You could also not use a designer.

00:23:02.872 --> 00:23:06.690
&gt;&gt;Xavier: And you could also not use a designer,
yes.

00:23:06.690 --> 00:23:08.330
&gt;&gt;Trevor: and it does UI preview.

00:23:08.330 --> 00:23:13.560
So if you're comfortable editing XML and you
should be because at some level you probably

00:23:13.560 --> 00:23:17.650
will have to edit some XML, you can at least
display what your changes are, even though

00:23:17.650 --> 00:23:19.880
you can't drag and drop things around.

00:23:19.880 --> 00:23:22.000
&gt;&gt;Joe: OK.

00:23:22.000 --> 00:23:25.190
Any other comments?

00:23:25.190 --> 00:23:31.090
At an IO session a new version of the support
library was discussed.

00:23:31.090 --> 00:23:34.120
That would have a support for the action bar.

00:23:34.120 --> 00:23:36.700
Is there a general estimate when this will
be released?

00:23:36.700 --> 00:23:41.930
&gt;&gt;Trevor: I can take that one and the answer
is, soon.

00:23:41.930 --> 00:23:44.130
I don't wanna get more specific than that.

00:23:44.130 --> 00:23:48.690
But hopefully sometime in the near future.

00:23:48.690 --> 00:23:50.900
&gt;&gt;Joe: OK.

00:23:50.900 --> 00:23:55.950
In the IO session and then there's a link,
Reto talks about dynamically adjusting periodic

00:23:55.950 --> 00:23:58.360
transfers and batching transfers.

00:23:58.360 --> 00:24:02.510
I'm wondering how his examples can be applied
to the sync adapter.

00:24:02.510 --> 00:24:06.520
Like, can I get it to piggyback on a time
sensitive transfer?

00:24:06.520 --> 00:24:09.550
Reto, do you wanna answer that one?

00:24:09.550 --> 00:24:10.550
&gt;&gt;Reto: Uh.

00:24:10.550 --> 00:24:14.340
Let's see, if I'm very lucky this camera will
be pointing at me.

00:24:14.340 --> 00:24:15.340
No. let me try again.

00:24:15.340 --> 00:24:17.190
Point it at the camera.

00:24:17.190 --> 00:24:21.100
&gt;&gt;Chet: I can always tell the audience what
you look like.

00:24:21.100 --> 00:24:23.590
&gt;&gt;Reto: That could work.

00:24:23.590 --> 00:24:24.750
&gt;&gt;Chet: Wooooo.

00:24:24.750 --> 00:24:26.130
Wow was that fancy.

00:24:26.130 --> 00:24:27.500
&gt;&gt;Reto: That was fancy, and would have worked.

00:24:27.500 --> 00:24:30.090
To go to the site, I don't really have the
answer.

00:24:30.090 --> 00:24:31.570
At least not a good one.

00:24:31.570 --> 00:24:36.800
I'm not aware of a way that you can piggy
back on top of sync adapter.

00:24:36.800 --> 00:24:40.890
So you can trigger the sync adapter to do
a refresh if I'm not mistaken.

00:24:40.890 --> 00:24:43.920
So you would probably be wanting to do that.

00:24:43.920 --> 00:24:49.700
At the same time as any other, as a way to
bundle those sync adapter updates with any

00:24:49.700 --> 00:24:52.420
time scan sort of transfers that you wanna
do within your application.

00:24:52.420 --> 00:24:55.090
But I'm not sure of away you can do it the
other way around.

00:24:55.090 --> 00:24:59.320
So listen for a sync adapter update and piggy
back the rest of your updates that way.

00:24:59.320 --> 00:25:01.430
Does anyone else have any insight there?

00:25:01.430 --> 00:25:06.520
&gt;&gt;Joe: It's kind of, my feeling is that it's
kind of at cross purposes to the whole idea

00:25:06.520 --> 00:25:07.800
of sync adapter.

00:25:07.800 --> 00:25:14.400
Because sync adapter is supposed to control
a lot of that stuff for you for things where

00:25:14.400 --> 00:25:17.559
you don't have something that's really that
time sensitive.

00:25:17.559 --> 00:25:24.440
On sync adapters, in a certain extent, takes
over all of the stuff that you normally have

00:25:24.440 --> 00:25:27.809
to write to figure out when to do something.

00:25:27.809 --> 00:25:31.210
Check to see if there's a connectivity, etcetera.

00:25:31.210 --> 00:25:34.910
And it's for things that you are willing to
allow on the background.

00:25:34.910 --> 00:25:36.840
On a periodic basis.

00:25:36.840 --> 00:25:40.010
But not necessarily immediately.

00:25:40.010 --> 00:25:45.390
And unfortunately if you've got something
that's really time sensitive, you probably

00:25:45.390 --> 00:25:51.210
have to step in and do the handling of the
transfer yourself.

00:25:51.210 --> 00:25:55.929
&gt;&gt;Reto: Quick follow up as well from Trevor
who says "Thank you for the answer."

00:25:55.929 --> 00:25:59.260
For what it's worth, he's comfortable with
XML but that doesn't necessarily mean that

00:25:59.260 --> 00:26:00.260
it's fun either.

00:26:00.260 --> 00:26:01.260
&gt;&gt;Trevor: Oh no.

00:26:01.260 --> 00:26:02.260
I totally agree.

00:26:02.260 --> 00:26:03.260
[laughs]

00:26:03.260 --> 00:26:07.640
&gt;&gt;Reto: He'd also like to point out that it'd
be cool if Google released some sort of UI

00:26:07.640 --> 00:26:08.820
toolkit to make it easier.

00:26:08.820 --> 00:26:11.929
&gt;&gt;Xavier: What kind of toolkit is he talking
about?

00:26:11.929 --> 00:26:13.720
&gt;&gt;Reto: That's a good question.

00:26:13.720 --> 00:26:16.270
I will ask him and get back to you.

00:26:16.270 --> 00:26:18.470
&gt;&gt;Joe: OK.

00:26:18.470 --> 00:26:19.580
Great.

00:26:19.580 --> 00:26:20.679
Super.

00:26:20.679 --> 00:26:23.980
Um, Let's move on.

00:26:23.980 --> 00:26:28.790
Why doesn't Listview support drag and drop
reordering of its items.

00:26:28.790 --> 00:26:32.340
Can you consider adding support for this in
the support library?

00:26:32.340 --> 00:26:37.100
All the current third party implementations
feel very janky and subpar.

00:26:37.100 --> 00:26:42.660
&gt;&gt;Romain: There is currently no plan to add
it to add this feature to the support library

00:26:42.660 --> 00:26:44.340
or in listview.

00:26:44.340 --> 00:26:47.220
Mostly because it's not a feature that many
apps need.

00:26:47.220 --> 00:26:50.620
We have an implementation in our source library
that you can use.

00:26:50.620 --> 00:26:54.310
I think it's the music application.

00:26:54.310 --> 00:26:58.380
And frankly, it's not high on the list of
priority of things that we have to do.

00:26:58.380 --> 00:27:01.610
Our engineers are pretty busy at the moment.

00:27:01.610 --> 00:27:05.660
&gt;&gt;Joe: OK.

00:27:05.660 --> 00:27:07.690
Alright.

00:27:07.690 --> 00:27:08.690
Next question.

00:27:08.690 --> 00:27:14.770
"Is it acceptable to wrap SQ like open helpers
as a singleton object as long as the context

00:27:14.770 --> 00:27:18.790
being used is the application context?"

00:27:18.790 --> 00:27:24.230
&gt;&gt;Trevor: So I think that's probably OK.

00:27:24.230 --> 00:27:27.549
I definitely wouldn't do it with the activity
context, 'cause your activity can get destroyed.

00:27:27.549 --> 00:27:33.960
But if you use the application context though
you're most likely going to be OK.

00:27:33.960 --> 00:27:39.800
The only thing that you could run into is
if somehow the application context becomes

00:27:39.800 --> 00:27:42.480
invalid but your process doesn't get destroyed.

00:27:42.480 --> 00:27:44.300
Which shouldn't happen normally.

00:27:44.300 --> 00:27:45.300
But yeah.

00:27:45.300 --> 00:27:46.320
That can't happen, right?

00:27:46.320 --> 00:27:48.670
&gt;&gt;Romain: I don't think so.

00:27:48.670 --> 00:27:49.670
&gt;&gt;Trevor: Yeah.

00:27:49.670 --> 00:27:52.020
So you're probably OK.

00:27:52.020 --> 00:27:55.800
&gt;&gt;Joe: Alright.

00:27:55.800 --> 00:28:03.910
[pause] "Lock canvas call causing a DQ buffer
fail error.

00:28:03.910 --> 00:28:09.460
Got around it by introducing a 20 millisecond
sleep on resume coming from home launcher

00:28:09.460 --> 00:28:10.460
screen.

00:28:10.460 --> 00:28:15.309
Question, do we need to worry about DQ buffers
or is this just a freak OEM error?"

00:28:15.309 --> 00:28:17.910
&gt;&gt;Romain: You should never have to worry about
DQ buffers.

00:28:17.910 --> 00:28:19.799
You shouldn't have to know that it's there.

00:28:19.799 --> 00:28:22.160
You shouldn't need to understand what it does.

00:28:22.160 --> 00:28:26.840
So without, I will have to look more about,
at your error and your code to understand

00:28:26.840 --> 00:28:27.840
what's going on.

00:28:27.840 --> 00:28:32.440
Let's see, it's in surface texture, yeah,
you don't have code in stack overflow.

00:28:32.440 --> 00:28:34.360
Oh, there is code in the stack overflow.

00:28:34.360 --> 00:28:37.200
So you're doing that on the surface view apparently.

00:28:37.200 --> 00:28:42.910
Um, yeah, we have to look into more in details,
but it's not something you should have to

00:28:42.910 --> 00:28:44.049
worry about normally.

00:28:44.049 --> 00:28:46.200
It's too buggy.

00:28:46.200 --> 00:28:48.360
There are bugs.

00:28:48.360 --> 00:28:49.360
[laughter]

00:28:49.360 --> 00:28:50.520
&gt;&gt;Joe: Great.

00:28:50.520 --> 00:28:51.520
Thank you Romain.

00:28:51.520 --> 00:28:53.100
&gt;&gt;Reto: I've got a follow up from Trevor.

00:28:53.100 --> 00:28:56.060
In response to what kind of toolkit is he
after.

00:28:56.060 --> 00:29:00.600
He said "A toolkit is a UI tool that would
generate and or modify the XML.

00:29:00.600 --> 00:29:06.600
Similar to visual studios, [ indistinct] designer
for WPF/similar applications and metro UI

00:29:06.600 --> 00:29:07.760
applications in Win Et.

00:29:07.760 --> 00:29:10.920
&gt;&gt;Xavier: Well that's exactly what we have
in Eclipse.

00:29:10.920 --> 00:29:12.670
Of course, you don't like Eclipse.

00:29:12.670 --> 00:29:16.049
So, I don't know what we can do for you.

00:29:16.049 --> 00:29:17.049
&gt;&gt;Trevor: [laughs]

00:29:17.049 --> 00:29:18.420
&gt;&gt;Xavier: I mean, our goal is to make it better.

00:29:18.420 --> 00:29:19.420
More usable.

00:29:19.420 --> 00:29:23.220
How we're going to get past people who don't
like Eclipse, that's another question and

00:29:23.220 --> 00:29:28.110
we don't have anything to say at the moment.

00:29:28.110 --> 00:29:30.130
&gt;&gt;Joe: OK.

00:29:30.130 --> 00:29:36.190
"Does the use of listview provide any benefits
performance or otherwise over a single column

00:29:36.190 --> 00:29:37.190
grid view?"

00:29:37.190 --> 00:29:41.720
&gt;&gt;Romain: There would be, slight performance
benefits to it because there's, listview is

00:29:41.720 --> 00:29:43.370
less work to do.

00:29:43.370 --> 00:29:49.170
And also listview is much better and hanging
things like input fields, focus, items of

00:29:49.170 --> 00:29:50.170
different types.

00:29:50.170 --> 00:29:51.171
Items of different heights.

00:29:51.171 --> 00:29:57.191
I mean, gridview, really you should not use
gridview if you're doing a single column and

00:29:57.191 --> 00:29:59.920
that's what listview is for.

00:29:59.920 --> 00:30:01.650
&gt;&gt;Joe: Alright.

00:30:01.650 --> 00:30:02.650
Good.

00:30:02.650 --> 00:30:03.650
Excellent.

00:30:03.650 --> 00:30:08.290
&gt;&gt;Joe: "This is a more userland question but
it drives me nuts."

00:30:08.290 --> 00:30:09.290
Alright.

00:30:09.290 --> 00:30:16.080
"I have no clue what I keep doing, but I get
a choice intent Drive or Gmail, when I select

00:30:16.080 --> 00:30:18.380
Drive, it goes boom.

00:30:18.380 --> 00:30:23.309
When I select Gmail it asks me who to mail
an email a bug report to.

00:30:23.309 --> 00:30:24.309
WTF?"

00:30:24.309 --> 00:30:25.320
Which I won't translate.

00:30:25.320 --> 00:30:26.570
&gt;&gt;Trevor: [laughs] Alright.

00:30:26.570 --> 00:30:33.330
So that one is, I assume you're on a, doesn't
say here but I assume he's probably using

00:30:33.330 --> 00:30:34.330
a Galaxy Nexus.

00:30:34.330 --> 00:30:40.570
Many of the, what you're seeing here most
likely is a debug feature that gets activated

00:30:40.570 --> 00:30:45.470
when you push volume up, volume down and power
all at the same time.

00:30:45.470 --> 00:30:47.840
And that's equivalent to running a debug report.

00:30:47.840 --> 00:30:53.660
But rather than sending the bug report date
off via usb, it creates a file and then sends

00:30:53.660 --> 00:30:57.200
off a share intent asking what devices would
like to receive it.

00:30:57.200 --> 00:31:01.390
Which, would likely be Gmail or Drive and
possibly anything else he installed that can

00:31:01.390 --> 00:31:02.460
handle attachments.

00:31:02.460 --> 00:31:07.860
So, the short answer, if it, you know, don't
do that.

00:31:07.860 --> 00:31:10.550
Don't push volume up, volume down, and power
at the same time.

00:31:10.550 --> 00:31:15.320
If you are using another device, these, the
sequence of keys you have to press does get

00:31:15.320 --> 00:31:19.090
changed depending on what keys are available
on the device, right?

00:31:19.090 --> 00:31:24.870
I, you know, back in Galaxy, or in the Nexus
1 day, I think it might have involved the

00:31:24.870 --> 00:31:25.870
trackball.

00:31:25.870 --> 00:31:26.890
I can't remember.

00:31:26.890 --> 00:31:31.429
But yeah, in, that sequence of keys, unfortunately,
is a little bit easy to press.

00:31:31.429 --> 00:31:34.550
So you're not the first one who has asked
me that.

00:31:34.550 --> 00:31:37.220
That being said, if you, it's harmless.

00:31:37.220 --> 00:31:39.290
It's just a debug thought that gets generated.

00:31:39.290 --> 00:31:43.410
So you know, if you just hit back, the, no
harm done.

00:31:43.410 --> 00:31:44.910
If you send it, no harm done.

00:31:44.910 --> 00:31:46.760
It's just an attachment.

00:31:46.760 --> 00:31:49.400
Then whoever does receive it will get to see
your system log, so you might not want to

00:31:49.400 --> 00:31:51.280
send it to random strangers.

00:31:51.280 --> 00:31:53.090
&gt;&gt;Joe: right.

00:31:53.090 --> 00:31:56.870
And it happens to me on the fairly often.

00:31:56.870 --> 00:32:00.200
It just depends on what your tolerance level
is for that.

00:32:00.200 --> 00:32:01.200
So.

00:32:01.200 --> 00:32:05.420
&gt;&gt;Reto: I have a question from Mauritz Post
on the G plus stream.

00:32:05.420 --> 00:32:07.880
He has a question regarding lint.

00:32:07.880 --> 00:32:13.700
Should Lint be able to dish up errors if an
application references at android colon attributes

00:32:13.700 --> 00:32:16.610
that are introduced after the minimal SDK
version?

00:32:16.610 --> 00:32:22.330
&gt;&gt;Xavier: So, Lint, I don't think we do any
check of that sort at the moment.

00:32:22.330 --> 00:32:28.070
The issue is that it's perfectly valid to
actually reference some attributes that on

00:32:28.070 --> 00:32:30.240
higher than your particular version.

00:32:30.240 --> 00:32:35.980
It's just that on lower API level, the application
will just ignore them.

00:32:35.980 --> 00:32:42.000
And application running on a version where,
that actually exits, then it would be used.

00:32:42.000 --> 00:32:45.549
So at least you should probably put a warning.

00:32:45.549 --> 00:32:50.240
But then if you actually want to do that,
you would have to have better was of ignoring

00:32:50.240 --> 00:32:52.130
that warning, there are attributes.

00:32:52.130 --> 00:32:54.530
But we'll see what we can do.

00:32:54.530 --> 00:32:57.150
It's a good idea.

00:32:57.150 --> 00:32:59.400
&gt;&gt;Joe: OK.

00:32:59.400 --> 00:33:00.530
Great.

00:33:00.530 --> 00:33:01.530
Next question.

00:33:01.530 --> 00:33:05.780
"There seems to be a bit of overlap between
the upcoming Google Play services library

00:33:05.780 --> 00:33:07.410
and account manager.

00:33:07.410 --> 00:33:11.880
Has the latter been, from a practical point
of view, deprecated?

00:33:11.880 --> 00:33:15.910
If not, can you give any insight on the use
cases where one should be picked over the

00:33:15.910 --> 00:33:17.080
other?"

00:33:17.080 --> 00:33:19.420
&gt;&gt;Trevor: OK.

00:33:19.420 --> 00:33:24.790
[laughs] So, account manager has not been
deprecated.

00:33:24.790 --> 00:33:30.040
As for the rationale as to why Google Play
services is not using account manager, if

00:33:30.040 --> 00:33:33.950
I remember correctly there were some features
that they wanted to introduce that weren't

00:33:33.950 --> 00:33:38.540
compatible with the API service that account
manager exposes.

00:33:38.540 --> 00:33:42.540
And so because of that they decided to do
it as a separate library.

00:33:42.540 --> 00:33:49.150
As a application developer, if you're creating
your own account provider, I would definitely

00:33:49.150 --> 00:33:51.020
use account manager whenever possible.

00:33:51.020 --> 00:33:55.570
In fact I think we still will be using account
manager even internally just because we have

00:33:55.570 --> 00:33:58.340
to go and keep track of the Google account
you register on your phone.

00:33:58.340 --> 00:34:01.850
I think Google Play services just drops that.

00:34:01.850 --> 00:34:04.190
As a, an API consumer.

00:34:04.190 --> 00:34:08.669
If you're writing your own Android app that
just needs to go and access an account, you

00:34:08.669 --> 00:34:13.249
know, decide, basically you have to look at
the API when it's published and determine

00:34:13.249 --> 00:34:15.809
which one has the features you need.

00:34:15.809 --> 00:34:19.279
If account manager does everything you need
to do, then you're fine.

00:34:19.279 --> 00:34:24.130
If you wanna use the new features to get introduced
as part of the Google Play services, then

00:34:24.130 --> 00:34:26.279
you know, of course you'll have to use that.

00:34:26.279 --> 00:34:28.210
It's really just a matter of what it is you
want.

00:34:28.210 --> 00:34:29.759
&gt;&gt;Joe: OK.

00:34:29.759 --> 00:34:32.079
Any other comments?

00:34:32.079 --> 00:34:37.409
&gt;&gt;Reto: So I have a question from Chris Hall
in the Hangout, who asks "What is the best

00:34:37.409 --> 00:34:40.179
way to implement landscape to portrait switching?"

00:34:40.179 --> 00:34:42.369
&gt;&gt;Trevor: Rotate your phone?

00:34:42.369 --> 00:34:43.369
[laughs]

00:34:43.369 --> 00:34:48.690
&gt;&gt;Joe: I'm assuming that, well, that's an
interesting question because I'm not sure

00:34:48.690 --> 00:34:50.250
what he's trying to do.

00:34:50.250 --> 00:34:55.259
&gt;&gt;Reto: So I'm gonna ask Chris if he can give
us a little bit more data as to what you mean

00:34:55.259 --> 00:34:57.569
by implementing landscape to portrait switching.

00:34:57.569 --> 00:34:59.980
In that, normally this would just happen by
default.

00:34:59.980 --> 00:35:05.160
So I guess we wanna know what is the specific
use case that we're trying to implement.

00:35:05.160 --> 00:35:08.869
&gt;&gt;Joe: While we're doing that, let's move
to the next question.

00:35:08.869 --> 00:35:10.829
It should be pretty easy to answer.

00:35:10.829 --> 00:35:16.880
"I thought I'd mention this, the API reference
docs on developer dot Android dot com are

00:35:16.880 --> 00:35:20.190
pretty much unusable on a tablet or phone.

00:35:20.190 --> 00:35:24.259
I was wondering if this could be fixed for
those of us who are curious about the AP stuff

00:35:24.259 --> 00:35:26.880
as, API stuff as light reading.

00:35:26.880 --> 00:35:32.180
&gt;&gt;Romain: So here's the good news, on Jellybean,
we just tried with the standard browser it

00:35:32.180 --> 00:35:33.299
works really well.

00:35:33.299 --> 00:35:37.730
&gt;&gt;Trevor: Yeah, there is one catch and it
is if you're on a phone, I don't think it's

00:35:37.730 --> 00:35:42.880
so much a tablet issue but it just a screen
size issue.

00:35:42.880 --> 00:35:50.310
If you are on a phone, the video part's a
bit small compared to how the, the size at

00:35:50.310 --> 00:35:52.670
which the docs are easily readable.

00:35:52.670 --> 00:35:53.989
It's a known bug with the docs.

00:35:53.989 --> 00:35:56.790
In fact, I filed it the moment the docs launched.

00:35:56.790 --> 00:36:00.589
So, it s something that I think we wanna go
and address.

00:36:00.589 --> 00:36:05.109
It just didn't make the cut for the first
release of the site redesign.

00:36:05.109 --> 00:36:07.589
So we'll probably get there eventually.

00:36:07.589 --> 00:36:09.220
In the mean time, sorry about that.

00:36:09.220 --> 00:36:15.940
I will add also, if somebody feels really
adventurous, and wants to write a Android

00:36:15.940 --> 00:36:21.200
API viewer that runs as a native app, I'd
totally love you for it.

00:36:21.200 --> 00:36:25.670
[laughs] All the docs actually that we publish
as part of the developer dot Android dot com

00:36:25.670 --> 00:36:28.170
site are actually checked into the open source
tree.

00:36:28.170 --> 00:36:33.880
I believe most of them are in framework space
docs html.

00:36:33.880 --> 00:36:37.210
So if you really wanted you could actually
go and extract everything there, make your

00:36:37.210 --> 00:36:39.749
own nice pretty doc viewer that runs natively.

00:36:39.749 --> 00:36:43.500
But if nobody gets around to that, we'll eventually
fix the html site.

00:36:43.500 --> 00:36:46.289
And I'm not even sure fix is the right word.

00:36:46.289 --> 00:36:49.630
We will improve the site to go and have a
more responsive layout.

00:36:49.630 --> 00:36:52.079
&gt;&gt;Joe: it's a great question.

00:36:52.079 --> 00:36:57.749
I don't personally, I'm a technical writer
for Android developer relations.

00:36:57.749 --> 00:37:03.549
And I don't consider reading the API reference
necessarily as light reading.

00:37:03.549 --> 00:37:09.119
But it's an excellent question and I'll take
it back to our team to take a look into more.

00:37:09.119 --> 00:37:15.119
As far as I know, all the documentation is
in frameworks based docs html.

00:37:15.119 --> 00:37:17.039
Certainly all the API reference docs are there.

00:37:17.039 --> 00:37:18.039
&gt;&gt;Trevor: Yeah.

00:37:18.039 --> 00:37:25.710
&gt;&gt;Joe: and so if you wanted to write, or a
doc with a, to handle that, it would be fine.

00:37:25.710 --> 00:37:30.759
I can't offhand remember where our existing
doclet resides.

00:37:30.759 --> 00:37:36.230
And, ahhh, so, unfortunately I can't remember
that.

00:37:36.230 --> 00:37:37.230
But it certainly

00:37:37.230 --> 00:37:39.249
&gt;&gt;Trevor: Actually, I will say, the API reference
I think.

00:37:39.249 --> 00:37:41.730
That's actually generated by a Droid doc,
right?

00:37:41.730 --> 00:37:42.730
&gt;&gt;Joe: it's generate, well,

00:37:42.730 --> 00:37:43.730
&gt;&gt;Trevor: [unintelligible]

00:37:43.730 --> 00:37:44.920
&gt;&gt;Joe: it's generated by Droid doc.

00:37:44.920 --> 00:37:50.269
Which is a bunch of things that include doclet
functionality.

00:37:50.269 --> 00:37:51.269
So.

00:37:51.269 --> 00:37:52.269
&gt;&gt;Trevor: Right.

00:37:52.269 --> 00:37:53.269
But yeah.

00:37:53.269 --> 00:37:54.369
So part of the API references are auto generated.

00:37:54.369 --> 00:37:55.369
&gt;&gt;Joe: Right.

00:37:55.369 --> 00:37:56.599
&gt;&gt;Trevor: So watch out for that.

00:37:56.599 --> 00:37:57.599
&gt;&gt;Joe: Yeah.

00:37:57.599 --> 00:38:01.499
You will have to consider the fact that we
auto generate them from the code.

00:38:01.499 --> 00:38:02.539
&gt;&gt;Trevor: Yeah.

00:38:02.539 --> 00:38:08.930
If you do wanna play around with this, just
run "make offline SDK docs" as the target.

00:38:08.930 --> 00:38:12.079
And that'll run through the whole doc building
process and you can play around with it.

00:38:12.079 --> 00:38:13.200
&gt;&gt;Joe: Right.

00:38:13.200 --> 00:38:14.200
OK?

00:38:14.200 --> 00:38:19.930
&gt;&gt;Reto: OK, we have a question from, let me
see, who was he?

00:38:19.930 --> 00:38:21.390
From Joram in the Hangout.

00:38:21.390 --> 00:38:22.390
&gt;&gt;Joe: OK.

00:38:22.390 --> 00:38:26.530
&gt;&gt;Joram: Yeah, I have a quick question about
portrait nomenclature and stuff.

00:38:26.530 --> 00:38:32.460
I mean, the, if you proof the word performance
in the system, however, if you want to load

00:38:32.460 --> 00:38:35.690
images while scrolling there is still some
jank.

00:38:35.690 --> 00:38:41.819
I actually analyzed it with sys trace, and
it seems that process called "image cache"

00:38:41.819 --> 00:38:47.640
sucks up all the [ indistinct ] cycles and
the other thread, the other process blocks

00:38:47.640 --> 00:38:48.640
in there.

00:38:48.640 --> 00:38:51.619
So, why is that exactly, is that a boss problem?

00:38:51.619 --> 00:38:54.410
Or it happened on my on the Galaxy Nexus.

00:38:54.410 --> 00:38:56.400
&gt;&gt;Romain: What is image cache?

00:38:56.400 --> 00:38:58.849
What application on what device?

00:38:58.849 --> 00:39:04.140
&gt;&gt;Joram: It's a Galaxy Nexus running Jellybean
stock.

00:39:04.140 --> 00:39:12.349
And, basically some frames get dropped off
if you want to try to load an image while

00:39:12.349 --> 00:39:13.349
scrolling.

00:39:13.349 --> 00:39:15.119
In the background [inaudible]

00:39:15.119 --> 00:39:17.329
&gt;&gt;Romain: In what application?

00:39:17.329 --> 00:39:18.839
&gt;&gt;Joram: It happens in all applications.

00:39:18.839 --> 00:39:23.380
Specifically, with the Google plus set, for
example.

00:39:23.380 --> 00:39:25.009
&gt;&gt;Romain: Well, so yes.

00:39:25.009 --> 00:39:31.290
I mean Google plus, we knew there was a fluency
issues and people are working on it to fix

00:39:31.290 --> 00:39:32.290
them.

00:39:32.290 --> 00:39:33.950
It's just a problem with the app.

00:39:33.950 --> 00:39:36.180
There's nothing wrong with the system or anything.

00:39:36.180 --> 00:39:41.359
If the app is blocking the, there's nothing
we can do about it.

00:39:41.359 --> 00:39:43.670
&gt;&gt;Joram: So, a development rich app.

00:39:43.670 --> 00:39:49.910
It happens, I mean it happens on YouTube,
in my own apps, on Google plus, every time

00:39:49.910 --> 00:39:55.730
you try to load an image in the background
thread, then it blocks the directory thread.

00:39:55.730 --> 00:39:59.950
&gt;&gt;Romain: No, it won't unless you are blocking
the rendering thread by doing something else

00:39:59.950 --> 00:40:02.420
or waiting on another thread.

00:40:02.420 --> 00:40:07.789
&gt;&gt;Trevor: Yeah, I did some demo of this for
Google IO.

00:40:07.789 --> 00:40:11.859
Yeah, if you're loading all of your images
you know say in the background thread.

00:40:11.859 --> 00:40:16.269
And you're really absolutely sure that you're
not doing any heavy lifting as part of your

00:40:16.269 --> 00:40:19.969
UI thread, at least as far as my eyes could
tell there wasn't any jank.

00:40:19.969 --> 00:40:20.969
[laughter]

00:40:20.969 --> 00:40:25.771
&gt;&gt;Trevor: it's possible there's a common pattern
being used that, [laughs] Wow there's some

00:40:25.771 --> 00:40:26.809
good noise on the Hangout.

00:40:26.809 --> 00:40:30.660
It's possible there's a common pattern a developer
is using that just happens to introduce jank

00:40:30.660 --> 00:40:32.530
frequently.

00:40:32.530 --> 00:40:38.029
But as far as I can tell I haven't noticed
anything wrong with the system itself but

00:40:38.029 --> 00:40:41.690
then again, it's entirely possible you're
seeing something we missed.

00:40:41.690 --> 00:40:46.839
You know, if you wanna, like we say record
a video or something and send that to us.

00:40:46.839 --> 00:40:48.710
We can always take a look at it.

00:40:48.710 --> 00:40:51.489
But at least as far as our experience has
been we haven't seen this.

00:40:51.489 --> 00:40:54.549
I'd love to see some more details as to what
you're saying.

00:40:54.549 --> 00:40:59.520
&gt;&gt;Joram: I posted the sys trace, sys trace
to html.

00:40:59.520 --> 00:41:04.599
And here you can clearly see that the process
called "image cache" sucks up the CPO cycles

00:41:04.599 --> 00:41:08.059
and the rendering process doesn't get the
CPO cycle.

00:41:08.059 --> 00:41:10.119
So it might be a scheduling problem or--

00:41:10.119 --> 00:41:11.259
&gt;&gt;Romain: It could be a scheduling problem.

00:41:11.259 --> 00:41:12.359
It could be many other things.

00:41:12.359 --> 00:41:17.240
It could be the, the image cache whatever
that is 'cause that's not part of the framework.

00:41:17.240 --> 00:41:22.180
Maybe reading something after the file system
and the rendering thread for whatever reason

00:41:22.180 --> 00:41:24.430
is trying to access the file system as well.

00:41:24.430 --> 00:41:26.930
So the, one of them is blocked on the other
one.

00:41:26.930 --> 00:41:28.609
I mean there can be many, many different reasons.

00:41:28.609 --> 00:41:29.609
&gt;&gt;Joram: OK

00:41:29.609 --> 00:41:31.680
&gt;&gt;Romain: And I don't think there's one explanation
for all the issues.

00:41:31.680 --> 00:41:35.859
But you know, in Jellybean we've improved
performance throughout the system.

00:41:35.859 --> 00:41:38.180
But we're still working on that.

00:41:38.180 --> 00:41:41.920
So we'll definitely look into that and I know
that the G plus guys are looking into those

00:41:41.920 --> 00:41:42.920
problems already.

00:41:42.920 --> 00:41:43.920
&gt;&gt;Joram: OK.

00:41:43.920 --> 00:41:44.920
Thank you.

00:41:44.920 --> 00:41:49.960
&gt;&gt;Joe: yeah, I think a key thing here as far
as I can hear is that this image cache process

00:41:49.960 --> 00:41:53.880
that he's talking about is not part of the
system framework.

00:41:53.880 --> 00:41:59.250
So it's important to figure out what exactly
that is, where it's coming from.

00:41:59.250 --> 00:42:05.089
'Cause if it is something that's been installed
or running for some reason, that could cause

00:42:05.089 --> 00:42:07.960
problems in the entire system.

00:42:07.960 --> 00:42:11.049
Although it's not something that comes with
the framework.

00:42:11.049 --> 00:42:14.911
&gt;&gt;Reto: OK, we have another Hangout question.

00:42:14.911 --> 00:42:15.911
&gt;&gt;Joe: Great.

00:42:15.911 --> 00:42:16.911
&gt;&gt;Reto: This one is from Matthew.

00:42:16.911 --> 00:42:17.911
&gt;&gt;Joe: OK.

00:42:17.911 --> 00:42:18.911
Hello Matthew.

00:42:18.911 --> 00:42:24.670
&gt;&gt;Reto: I think 
you muted Matthew.

00:42:24.670 --> 00:42:26.260
&gt;&gt;Joe: Matthew are you muted?

00:42:26.260 --> 00:42:27.260
[feedback noises]

00:42:27.260 --> 00:42:28.260
&gt;&gt;Joe: Hello?

00:42:28.260 --> 00:42:29.260
[feedback noises]

00:42:29.260 --> 00:42:30.260
&gt;&gt;Joe: No?

00:42:30.260 --> 00:42:31.260
Yes?

00:42:31.260 --> 00:42:32.260
&gt;&gt;Reto: Yeah, if you can unmute yourself.

00:42:32.260 --> 00:42:33.260
[feedback noises]

00:42:33.260 --> 00:42:34.260
&gt;&gt;Trevor: [laughs]

00:42:34.260 --> 00:42:46.891
&gt;&gt;Reto: I don't see on

00:42:46.891 --> 00:42:47.891
&gt;&gt;Trevor: Oh wait

00:42:47.891 --> 00:42:48.891
&gt;&gt;Matthew: I unmuted it as far as I can tell.

00:42:48.891 --> 00:42:49.891
&gt;&gt;Trevor: There you go.

00:42:49.891 --> 00:42:50.891
&gt;&gt;Joe: There you go.

00:42:50.891 --> 00:42:52.030
&gt;&gt;Matthew: I'm sorry.

00:42:52.030 --> 00:42:55.920
I had a question on the smart app update.

00:42:55.920 --> 00:42:59.849
Trying to get it to work to see what kind
of impact it has on the application side.

00:42:59.849 --> 00:43:06.180
I just updated the Android manifest updated
version, it still downloads the full, you

00:43:06.180 --> 00:43:09.390
know, three megs of the app.

00:43:09.390 --> 00:43:18.329
I'm using the latest Google Play that I can
see, it's three, 13 dot7 of Google Play.

00:43:18.329 --> 00:43:22.530
&gt;&gt;Trevor: Yeah, so there's no one here from
the market team.

00:43:22.530 --> 00:43:27.970
So I'm not sure if any of us are gonna know
exactly why that might be happening.

00:43:27.970 --> 00:43:30.890
To my knowledge the smart updates are just
supposed to happen automatically.

00:43:30.890 --> 00:43:31.890
There's nothing

00:43:31.890 --> 00:43:32.890
&gt;&gt;Matthew: [inaudible]

00:43:32.890 --> 00:43:33.890
&gt;&gt;Trevor: you need to do as a developer to
take advantage of that.

00:43:33.890 --> 00:43:34.890
Um

00:43:34.890 --> 00:43:35.890
&gt;&gt;Chet: [inaudible] version of Monarch that
you have right now?

00:43:35.890 --> 00:43:41.599
&gt;&gt;Matthew: And then it was, was it gonna impact
the application side at all, 'cause you have

00:43:41.599 --> 00:43:45.259
ea signed file that they're somewhat pushing
bytes into it or something.

00:43:45.259 --> 00:43:48.549
&gt;&gt;Trevor: No, it shouldn't make a difference
because the signature will get sent along

00:43:48.549 --> 00:43:49.549
with it as well.

00:43:49.549 --> 00:43:50.549
The updated signature.

00:43:50.549 --> 00:43:51.549
&gt;&gt;Matthew: OK.

00:43:51.549 --> 00:43:54.719
&gt;&gt;Trevor: Of course, you don't wanna go and
change your signing signature between releases.

00:43:54.719 --> 00:43:55.719
&gt;&gt;Matthew: Right, definitely not.

00:43:55.719 --> 00:43:59.430
&gt;&gt;Trevor: 'Cause if you do that Google Play
won't accept the update anyway.

00:43:59.430 --> 00:44:02.619
And even without smart updates that would
get you in trouble.

00:44:02.619 --> 00:44:03.619
So.

00:44:03.619 --> 00:44:04.619
&gt;&gt;Matthew: Right.

00:44:04.619 --> 00:44:06.599
&gt;&gt;Trevor: So to my knowledge there's really
nothing you have to take advantage of as a

00:44:06.599 --> 00:44:08.009
developer.

00:44:08.009 --> 00:44:11.160
It's possible that for some reason it's been
temporarily disabled on your phone.

00:44:11.160 --> 00:44:13.940
Or there might be some edge case where it
automatically turns itself off.

00:44:13.940 --> 00:44:16.309
I'm not sure of the details of how that mechanism
works.

00:44:16.309 --> 00:44:17.309
&gt;&gt;Matthew: OK.

00:44:17.309 --> 00:44:18.559
&gt;&gt;Trevor: It should just work though.

00:44:18.559 --> 00:44:20.539
So, I wouldn't worry about it too much.

00:44:20.539 --> 00:44:24.009
&gt;&gt;Romain: And it's the mechanism we use for
our OTS.

00:44:24.009 --> 00:44:27.440
We use the same smart updates when we update
the whole system.

00:44:27.440 --> 00:44:30.450
And where the system sign in works just fine.

00:44:30.450 --> 00:44:31.710
&gt;&gt;Joe: Great.

00:44:31.710 --> 00:44:32.710
Hm.

00:44:32.710 --> 00:44:33.710
OK.

00:44:33.710 --> 00:44:35.130
&gt;&gt;Reto: We have another person on the Hangout.

00:44:35.130 --> 00:44:36.130
&gt;&gt;Joe: Wow.

00:44:36.130 --> 00:44:38.970
&gt;&gt;Reto: It's very dark where Ismael is, but
I'm gonna put him on anyway.

00:44:38.970 --> 00:44:42.430
And, hopefully we'll at least be able to hear
him.

00:44:42.430 --> 00:44:43.680
&gt;&gt;Joe: Alright.

00:44:43.680 --> 00:44:46.810
&gt;&gt;Reto: Ismael, when you're ready.

00:44:46.810 --> 00:44:47.810
[pause]

00:44:47.810 --> 00:44:48.810
[feedback sounds]

00:44:48.810 --> 00:44:50.570
&gt;&gt;Reto: Um, nope.

00:44:50.570 --> 00:44:51.829
&gt;&gt;Joe: [inaudible]

00:44:51.829 --> 00:44:54.329
&gt;&gt;Reto: Doesn't sound good.

00:44:54.329 --> 00:44:56.839
&gt;&gt;Joe: There is [inaudible]

00:44:56.839 --> 00:44:58.719
&gt;&gt;Reto: [laughs] Indeed.

00:44:58.719 --> 00:45:02.059
Perhaps we'll go to the next one.

00:45:02.059 --> 00:45:03.059
A Moderator question.

00:45:03.059 --> 00:45:04.059
&gt;&gt;Trevor: Been eaten by a monster.

00:45:04.059 --> 00:45:05.930
&gt;&gt;Reto: Eaten by glue.

00:45:05.930 --> 00:45:06.930
Really.

00:45:06.930 --> 00:45:07.930
&gt;&gt;Joe: OK.

00:45:07.930 --> 00:45:08.930
Next question.

00:45:08.930 --> 00:45:11.069
"My developer's console is a bit messy.

00:45:11.069 --> 00:45:13.660
And I need to take off the unpublished apps.

00:45:13.660 --> 00:45:15.450
Is there any way to do this?"

00:45:15.450 --> 00:45:20.029
&gt;&gt;Trevor: So, it depends on what you mean
by unpublished.

00:45:20.029 --> 00:45:26.039
If the apps have just been uploaded as drafts
and you're doing, say debugging for license

00:45:26.039 --> 00:45:29.380
verification or enact billing, something like
that.

00:45:29.380 --> 00:45:30.880
Then there's the delete button.

00:45:30.880 --> 00:45:35.870
However, once you published your application,
if you later resend it, if you unpublish your

00:45:35.870 --> 00:45:39.829
application later after it's been published,
there is no longer the option to delete an

00:45:39.829 --> 00:45:41.450
app and that's by design.

00:45:41.450 --> 00:45:46.270
So the reason behind that is because, you
know, there could be purchase history associated

00:45:46.270 --> 00:45:50.729
with the app, the package name is permanently
reserved as well, so if you deleted it you

00:45:50.729 --> 00:45:51.900
lose the package name.

00:45:51.900 --> 00:45:57.890
there's a lot of reasons as to why deleting
a previously published APK or a previously

00:45:57.890 --> 00:46:00.309
published application is not allowed.

00:46:00.309 --> 00:46:04.880
That being said, there is a UI redesign happening
for Google Play.

00:46:04.880 --> 00:46:06.170
For the dev console.

00:46:06.170 --> 00:46:09.680
So hopefully that'll go and help clean clutter
up a bit.

00:46:09.680 --> 00:46:13.599
But right now, there's not much you can do
to remove those if they've been published.

00:46:13.599 --> 00:46:17.469
And if they haven't, you know, check in the
details page and you'll find the delete button

00:46:17.469 --> 00:46:19.630
at the bottom.

00:46:19.630 --> 00:46:21.710
&gt;&gt;Joe: OK.

00:46:21.710 --> 00:46:23.849
Thank you.

00:46:23.849 --> 00:46:28.119
This "During this Google IO we heard a lot
about the use of cards.

00:46:28.119 --> 00:46:32.529
Is there a standard or best way to try to
use these?"

00:46:32.529 --> 00:46:37.660
&gt;&gt;Trevor: Um, is this, I assume this is referring
to the cards in Google Now?

00:46:37.660 --> 00:46:40.240
&gt;&gt;Chet: that's the only cards I have.

00:46:40.240 --> 00:46:41.240
Those apps specifically.

00:46:41.240 --> 00:46:46.039
&gt;&gt;Trevor: So inside of Google Now, there's
you know, the cards are provided by the Google

00:46:46.039 --> 00:46:47.039
search app.

00:46:47.039 --> 00:46:50.089
So there's really no way to go and create
additional ads.

00:46:50.089 --> 00:46:52.259
There's no API for example.

00:46:52.259 --> 00:46:58.859
Now, if you wanted to go and try and emulate
the card UI design pattern within your app,

00:46:58.859 --> 00:47:01.269
we don't have any published standards on that
yet.

00:47:01.269 --> 00:47:03.089
It's still very new.

00:47:03.089 --> 00:47:06.890
I'd just try and you know, take a look at
how the app works and emulate it based on

00:47:06.890 --> 00:47:08.210
what you see there.

00:47:08.210 --> 00:47:13.019
It's not a pattern we're necessarily recommending
to developers yet.

00:47:13.019 --> 00:47:18.910
So, yeah, if you decide you know what goes
into your app, you're on the bleeding edge

00:47:18.910 --> 00:47:19.910
of things.

00:47:19.910 --> 00:47:24.079
&gt;&gt;Romain: And if you want to try to use the
cards as a user, you should go to Google Now.

00:47:24.079 --> 00:47:28.089
At the bottom there will be a small button
that says "Show sample cards" if there's no

00:47:28.089 --> 00:47:29.109
cards showing.

00:47:29.109 --> 00:47:33.950
So you can click on that and Google Now will
generate a bunch of cards so you can get an

00:47:33.950 --> 00:47:36.180
idea of what they look like and how you can
talk with them.

00:47:36.180 --> 00:47:37.180
&gt;&gt;Trevor: Oh.

00:47:37.180 --> 00:47:38.180
Yes.

00:47:38.180 --> 00:47:39.180
That.

00:47:39.180 --> 00:47:40.180
Yeah.

00:47:40.180 --> 00:47:41.180
I didn't think about it from a user point
of view.

00:47:41.180 --> 00:47:42.180
If you are a user definitely take a look at
the sample cards.

00:47:42.180 --> 00:47:44.329
It'll even tell you some of the ways it gets
triggered.

00:47:44.329 --> 00:47:48.420
For example the flight status gets triggered
when you search for a flight.

00:47:48.420 --> 00:47:55.959
Most of the time though I found that they
just tend to work properly if you use Google.

00:47:55.959 --> 00:47:59.950
&gt;&gt;Joe: Any other comments?

00:47:59.950 --> 00:48:00.950
OK.

00:48:00.950 --> 00:48:03.229
This is also about Google now.

00:48:03.229 --> 00:48:05.839
"Does Google now replace the standard search
app?

00:48:05.839 --> 00:48:09.940
And does it search inside third party search
interfaces?

00:48:09.940 --> 00:48:14.390
What happens when Jellybean reaches devices
and you press the search button?

00:48:14.390 --> 00:48:16.039
Will Google Now start?"

00:48:16.039 --> 00:48:21.809
&gt;&gt;Romain: So in the developer preview of Jellybean
that we gave out at the Google IO, you should

00:48:21.809 --> 00:48:26.930
go to the settings in Google Now, you can
add initial search sources.

00:48:26.930 --> 00:48:32.239
So by default, only some of the built in apps
will be used as sources for searches.

00:48:32.239 --> 00:48:36.309
So there will be Google Music, Google Play,
your list of installed apps.

00:48:36.309 --> 00:48:42.670
But you can also enable search for other apps
so for instance you search an Evernote, Kindle,

00:48:42.670 --> 00:48:45.299
Spotify, that kind of apps.

00:48:45.299 --> 00:48:47.270
But you have to go enable them yourself.

00:48:47.270 --> 00:48:48.270
&gt;&gt;Trevor: Yeah.

00:48:48.270 --> 00:48:50.220
Even the little quick search box had that
same requirement.

00:48:50.220 --> 00:48:54.609
There was a menu buried somewhere that would
let you go and toggle which apps were indexed.

00:48:54.609 --> 00:48:55.609
&gt;&gt;Romain: Yeah.

00:48:55.609 --> 00:48:58.480
But they used to be all enabled by default.

00:48:58.480 --> 00:48:59.589
&gt;&gt;Trevor: Ah.

00:48:59.589 --> 00:49:00.589
Gotcha.

00:49:00.589 --> 00:49:01.589
OK.

00:49:01.589 --> 00:49:03.710
&gt;&gt;Reto: Got a couple of question in Hangout.

00:49:03.710 --> 00:49:04.710
&gt;&gt;Joe: Go ahead.

00:49:04.710 --> 00:49:08.150
&gt;&gt;Reto: so I'm going to, think I'm going to
read them out.

00:49:08.150 --> 00:49:11.009
There seems to be someone playing music aggressively.

00:49:11.009 --> 00:49:12.009
[laughter]

00:49:12.009 --> 00:49:13.599
I'll try and sort that out.

00:49:13.599 --> 00:49:20.200
In the mean time, Ismael, his question was,
let me see if I can find it here.

00:49:20.200 --> 00:49:25.809
"Is it possible to use a USSD code in call
intent?

00:49:25.809 --> 00:49:28.489
For example, hash one two two hash."

00:49:28.489 --> 00:49:34.099
He's tried to use it in his app but he gets
an error USSD connection problem invalid.

00:49:34.099 --> 00:49:35.619
NMI code.

00:49:35.619 --> 00:49:38.469
Does that mean anything to anyone.

00:49:38.469 --> 00:49:39.469
&gt;&gt;Trevor: Yeah.

00:49:39.469 --> 00:49:40.469
So.

00:49:40.469 --> 00:49:46.249
The USSD codes are carrier specific codes
to go and do things.

00:49:46.249 --> 00:49:47.619
So they have a very odd format.

00:49:47.619 --> 00:49:54.670
Now as to why the dialer app isn't accepting
them, it, honestly it sounds like it's either

00:49:54.670 --> 00:49:59.920
a bug with the dialer or it's possible that
they might need to be encoded in SIM card

00:49:59.920 --> 00:50:02.010
somewhere to be recognized as valid.

00:50:02.010 --> 00:50:04.229
But that seems a little off to me.

00:50:04.229 --> 00:50:07.839
Without knowing more about the [indistinct]
stack, I can't give you a definitive answer

00:50:07.839 --> 00:50:08.900
there.

00:50:08.900 --> 00:50:12.299
Yeah, you could go and search through the
source code and see where that error message

00:50:12.299 --> 00:50:14.799
is being generated.

00:50:14.799 --> 00:50:16.729
I mean it sounds like something that should
work.

00:50:16.729 --> 00:50:18.519
&gt;&gt;Joe: Chet?

00:50:18.519 --> 00:50:20.309
&gt;&gt;Chet: Nothing.

00:50:20.309 --> 00:50:27.279
&gt;&gt;Trevor: Yeah, I mean the [indistinct] stack
is definitely all up there as part of Android

00:50:27.279 --> 00:50:28.279
open source.

00:50:28.279 --> 00:50:30.180
So you know, take a look through the source
code.

00:50:30.180 --> 00:50:32.420
See if you can find where that error is generated.

00:50:32.420 --> 00:50:36.849
And that should give you some clues as to
why you're getting the error that you are.

00:50:36.849 --> 00:50:40.059
&gt;&gt;Joe: Alright.

00:50:40.059 --> 00:50:43.940
Did we have anything else hanging out there,
Reto?

00:50:43.940 --> 00:50:46.569
&gt;&gt;Reto: I'm just gonna check to see whether
Simon.

00:50:46.569 --> 00:50:48.650
Yeah, Simon does wanna ask it.

00:50:48.650 --> 00:50:50.609
So I'm gonna put him on now.

00:50:50.609 --> 00:50:52.259
&gt;&gt;Joe: Go ahead.

00:50:52.259 --> 00:50:53.369
&gt;&gt;Reto: OK.

00:50:53.369 --> 00:50:55.019
You're up Simon.

00:50:55.019 --> 00:50:56.680
&gt;&gt;Joe: Hello Simon.

00:50:56.680 --> 00:50:57.779
&gt;&gt;Simon: Hello.

00:50:57.779 --> 00:51:04.940
[clears throat] Just wanted to ask about STSL
certificate authorities across the [indistinct]

00:51:04.940 --> 00:51:06.079
system.

00:51:06.079 --> 00:51:10.479
So, across the tel coms, you know, they change.

00:51:10.479 --> 00:51:17.569
So mostly what happens is everything happens,
you begin the cell connection and then some

00:51:17.569 --> 00:51:19.880
devices just give up because they can't handshake.

00:51:19.880 --> 00:51:28.130
And the pattern of the [indistinct] that have
a number of different landing URLs and I just

00:51:28.130 --> 00:51:30.900
fail gracefully until you get to a decent
connection.

00:51:30.900 --> 00:51:35.540
And the one that seems to fail is Komodo,
mostly, across devices.

00:51:35.540 --> 00:51:41.069
So I just wondered what the best approach
was or if you guys recommend it.

00:51:41.069 --> 00:51:43.609
A CA to actually assign with.

00:51:43.609 --> 00:51:47.959
&gt;&gt;Trevor: so just to make sure, you're not
writing a browser or something big like that.

00:51:47.959 --> 00:51:52.390
It's more you could encounter any certificate
actually like access an API endpoint right?

00:51:52.390 --> 00:51:55.450
So you do control both the application and
the server?

00:51:55.450 --> 00:51:56.450
Correct?

00:51:56.450 --> 00:52:00.301
&gt;&gt;Simon: Just making the cell connection to
make sure that most [unintelligible] are in

00:52:00.301 --> 00:52:01.301
play.

00:52:01.301 --> 00:52:05.190
And it works like 99 percent of the time.

00:52:05.190 --> 00:52:07.539
But I do all my work with tel cos.

00:52:07.539 --> 00:52:14.690
But eventually one of the tel com releases
a device and it's got some, basically just

00:52:14.690 --> 00:52:19.390
removed some stuff from the [indistinct ] list
and burned it onto the device.

00:52:19.390 --> 00:52:22.440
And you're left going, oh, I can't make a
connection.

00:52:22.440 --> 00:52:24.150
So I know I can't avoid it.

00:52:24.150 --> 00:52:28.779
But it's just a case of you guys recommend,
just go with their sign?

00:52:28.779 --> 00:52:34.589
Or just or is there a pattern to go for, you
know, a stack, or attempting multiple connections?

00:52:34.589 --> 00:52:39.039
'Cause the pattern I go with is just multiple
end points until one works.

00:52:39.039 --> 00:52:41.910
And then I stick with it until it keeps working.

00:52:41.910 --> 00:52:47.950
&gt;&gt;Trevor: I mean, I'll certainly add, you
probably can't go wrong with their sign.

00:52:47.950 --> 00:52:53.690
If somebody shipped a phone without support
for your Verisign, I suspect a lot of websites

00:52:53.690 --> 00:52:54.859
would be broken too.

00:52:54.859 --> 00:53:01.900
So the same goes for you know, GoDaddy or
Thought, or any of the other really big CAs.

00:53:01.900 --> 00:53:06.670
Now, that being said, we do have an API that'll
this is why I was asking if you controlled

00:53:06.670 --> 00:53:07.670
both ends.

00:53:07.670 --> 00:53:13.099
We have an API that will go and let you register
additional CAs within your application.

00:53:13.099 --> 00:53:18.079
So if you know there is a preferred certificate
you'd like to use, you could use that API

00:53:18.079 --> 00:53:22.440
call in, say the, explicitly add this to the
trust chain.

00:53:22.440 --> 00:53:23.599
&gt;&gt;Simon: OK.

00:53:23.599 --> 00:53:24.599
OK.

00:53:24.599 --> 00:53:25.599
I'll go looking at that.

00:53:25.599 --> 00:53:27.209
I've just been racing by that, not looking.

00:53:27.209 --> 00:53:29.270
To be honest.

00:53:29.270 --> 00:53:31.770
It didn't handshake so let's move on to the
next one.

00:53:31.770 --> 00:53:32.770
But yeah.

00:53:32.770 --> 00:53:33.770
OK, I'll go look.

00:53:33.770 --> 00:53:37.800
&gt;&gt;Trevor: Yeah, and then since the app is,
I assume it's either preloaded or distributed

00:53:37.800 --> 00:53:38.800
through Google Play, correct?

00:53:38.800 --> 00:53:39.800
&gt;&gt;Simon: yeah.

00:53:39.800 --> 00:53:40.800
&gt;&gt;Trevor: Yeah.

00:53:40.800 --> 00:53:44.109
Just as long as the app's coming from a trusted
channel you should be OK there.

00:53:44.109 --> 00:53:49.329
The thing you wanna make sure is, you know,
if a user does manage to, if they're side

00:53:49.329 --> 00:53:51.719
loading this app for some reason.

00:53:51.719 --> 00:53:52.719
Hopefully that's not the case.

00:53:52.719 --> 00:53:53.719
But.

00:53:53.719 --> 00:53:57.329
Since you are registering additional trust
routes.

00:53:57.329 --> 00:54:01.829
If these are just apps from an untrusted source,
an attacker could modify that.

00:54:01.829 --> 00:54:05.460
Just make sure that however the user is getting
the APK is from a trusted source and there's

00:54:05.460 --> 00:54:06.460
not tampered with

00:54:06.460 --> 00:54:07.460
&gt;&gt;Simon: Yeah.

00:54:07.460 --> 00:54:16.019
I mean, the other way I did it was to self
sign on both ends and then borrow an encoded

00:54:16.019 --> 00:54:19.650
cert onto the app itself.

00:54:19.650 --> 00:54:22.910
But it was just too, it wasn't real enough
basically.

00:54:22.910 --> 00:54:28.380
And it means that you were permanently in
the state of not really trusting the connection.

00:54:28.380 --> 00:54:36.779
&gt;&gt;Trevor: Well, self signed cert isn't bad
as long as the, both ends, both pairs of that

00:54:36.779 --> 00:54:39.959
certificate are under your control.

00:54:39.959 --> 00:54:44.039
If you control the client, you can use a self-signed
cert. and there's no harm in that.

00:54:44.039 --> 00:54:46.940
You're subject to the exact same caveat I
just mentioned that you need to make sure

00:54:46.940 --> 00:54:51.400
that the APK is delivered through a trusted
mechanism.

00:54:51.400 --> 00:54:54.039
I mean you're only self-signing the cert used
to sign your application.

00:54:54.039 --> 00:54:55.039
So.

00:54:55.039 --> 00:55:00.880
&gt;&gt;Simon: Well, yeah I just fall into this
kind of crazy elliptical situation with tel

00:55:00.880 --> 00:55:06.229
coms where they just say "We gotta go via
some paid for rather than a bunch of dudes."

00:55:06.229 --> 00:55:07.380
And that stuff.

00:55:07.380 --> 00:55:08.529
&gt;&gt;Trevor: Understandable.

00:55:08.529 --> 00:55:09.690
&gt;&gt;Joe: OK.

00:55:09.690 --> 00:55:14.559
&gt;&gt;Simon: OK so I don’t' feel like I'm doing
anything wrong then by going through multiple

00:55:14.559 --> 00:55:17.089
landing URLs to get to a decent site.

00:55:17.089 --> 00:55:19.459
&gt;&gt;Trevor: I'm not saying that.

00:55:19.459 --> 00:55:21.289
Honestly, you shouldn't have to.

00:55:21.289 --> 00:55:26.589
The list of trusted CAs shouldn't change that
dramatically between releases and between

00:55:26.589 --> 00:55:27.680
phones.

00:55:27.680 --> 00:55:33.029
There is a canonical list of trusted CAs that
is distributed as part of Android Open Source.

00:55:33.029 --> 00:55:38.859
And honestly I'd start with that and that
should give you a list of who we say is the

00:55:38.859 --> 00:55:40.089
trusted CAs.

00:55:40.089 --> 00:55:43.759
And of course there's nothing stopping an
OEM from modifying that list.

00:55:43.759 --> 00:55:47.299
But you know, if you go with the common CAs

00:55:47.299 --> 00:55:48.299
&gt;&gt;Joe: Yeah.

00:55:48.299 --> 00:55:54.210
&gt;&gt;Trevor: If they start taking those out it's
not just going to be your app that fails,

00:55:54.210 --> 00:55:55.210
it's going to be the whole web.

00:55:55.210 --> 00:55:56.210
&gt;&gt;Simon: Yeah.

00:55:56.210 --> 00:55:57.839
I mean, not to keep the whole Hangout on that,
but I, basically

00:55:57.839 --> 00:55:58.839
&gt;&gt;Joe: Right.

00:55:58.839 --> 00:56:00.309
&gt;&gt;Simon: That's been the case.

00:56:00.309 --> 00:56:03.039
You know, your banking would stop working
when they take some out.

00:56:03.039 --> 00:56:04.959
But it was basically Komodo got taken out.

00:56:04.959 --> 00:56:06.680
Couple devices.

00:56:06.680 --> 00:56:07.770
Non-routed.

00:56:07.770 --> 00:56:13.430
Regular devices that carriers they shouldn't
just go to [indistinct] to over CAs went missing.

00:56:13.430 --> 00:56:14.430
Anyway, that's great.

00:56:14.430 --> 00:56:15.430
Thanks so much.

00:56:15.430 --> 00:56:16.430
&gt;&gt;Joe: Thank you.

00:56:16.430 --> 00:56:19.660
&gt;&gt;Reto: Yeah, we have a couple of quick questions
because we're just about out of time.

00:56:19.660 --> 00:56:20.660
&gt;&gt;Joe: OK.

00:56:20.660 --> 00:56:21.660
Go ahead.

00:56:21.660 --> 00:56:22.660
&gt;&gt;Reto: a couple in the ES room and the Hangout.

00:56:22.660 --> 00:56:26.949
So Mario would like to know "Will there be
more templates for activity creation in the

00:56:26.949 --> 00:56:28.109
Android developer tools?

00:56:28.109 --> 00:56:32.329
And will they support the compatibility library
in order to develop consistent apps for Android

00:56:32.329 --> 00:56:34.539
versions prior to ICS?"

00:56:34.539 --> 00:56:35.940
&gt;&gt;Xavier: Yes.

00:56:35.940 --> 00:56:36.940
Definitely.

00:56:36.940 --> 00:56:39.529
Actually the current templates do use the
compatibility library.

00:56:39.529 --> 00:56:41.579
But they also use the action bar.

00:56:41.579 --> 00:56:44.049
So since we don't have support for the action
bar yet.

00:56:44.049 --> 00:56:45.720
I'm looking at you, Trevor.

00:56:45.720 --> 00:56:46.720
&gt;&gt;Trevor: Yeah.

00:56:46.720 --> 00:56:47.720
[laughs]

00:56:47.720 --> 00:56:52.670
&gt;&gt;Xavier: But as soon as we have that then
we'll definitely use the support library and

00:56:52.670 --> 00:56:55.789
we are planning on adding a lot more templates,
too.

00:56:55.789 --> 00:56:56.910
&gt;&gt;Reto: Excellent.

00:56:56.910 --> 00:56:58.029
Thank you.

00:56:58.029 --> 00:56:59.029
And.

00:56:59.029 --> 00:57:00.029
One more question.

00:57:00.029 --> 00:57:02.930
So this is a follow up from Chris Cole who
was asking the portrait to landscape question

00:57:02.930 --> 00:57:03.930
earlier.

00:57:03.930 --> 00:57:07.470
He says he's writing a note taking app for
Jellybean.

00:57:07.470 --> 00:57:11.299
And people keep typing, it scrolls my things
away.

00:57:11.299 --> 00:57:15.380
And he's trying to figure out the best way
to initiate the switch to landscape mode for

00:57:15.380 --> 00:57:16.380
easier typing.

00:57:16.380 --> 00:57:21.630
So I think what Chris is trying to do here
is manually decide whether the user should

00:57:21.630 --> 00:57:25.680
be looking at the app in landscape or portrait
mode based on his activities.

00:57:25.680 --> 00:57:26.800
Sort of, interaction.

00:57:26.800 --> 00:57:27.800
&gt;&gt;Trevor: OK.

00:57:27.800 --> 00:57:30.900
So he basically wants to programmatically
switch to landscape.

00:57:30.900 --> 00:57:31.900
&gt;&gt;Reto: Yeah.

00:57:31.900 --> 00:57:35.640
Or what least he's trying to figure out if
that is the best case scenario.

00:57:35.640 --> 00:57:38.290
Which I would probably hasten to say isn't.

00:57:38.290 --> 00:57:40.660
Anybody wanna go into more detail?

00:57:40.660 --> 00:57:47.240
&gt;&gt;Trevor: So, if I were to, probably the best
way to do this.

00:57:47.240 --> 00:57:52.930
Well I was gonna say you could go and tell
layout inflator that you wanna put a landscape

00:57:52.930 --> 00:57:53.930
constraint on there.

00:57:53.930 --> 00:57:57.690
But then you have the issues like the keyboard
and things like that.

00:57:57.690 --> 00:58:01.930
Yeah, I'm not sure how you actually go and
tell the keyboard you want to be in landscape

00:58:01.930 --> 00:58:02.930
mode.

00:58:02.930 --> 00:58:03.930
&gt;&gt;Romain: You can.

00:58:03.930 --> 00:58:08.430
I don't really know the exact API but there
is a way for the app to request a configuration

00:58:08.430 --> 00:58:09.430
change.

00:58:09.430 --> 00:58:10.810
I don't remember exactly where it is.

00:58:10.810 --> 00:58:13.130
Only in the [indistinct ] class somewhere
which can.

00:58:13.130 --> 00:58:15.150
Actually a lot of games do that.

00:58:15.150 --> 00:58:17.829
They request the, the, landscape rotation.

00:58:17.829 --> 00:58:22.690
Now, it might be a little confusing for the
user 'cause you're holding your develops in

00:58:22.690 --> 00:58:24.940
portrait and [indistinct ] your [ indistinct
] in landscape.

00:58:24.940 --> 00:58:29.599
If the user wants to go in landscape, they
can just turn the device which they will have

00:58:29.599 --> 00:58:31.359
to do anyway if you do it for them.

00:58:31.359 --> 00:58:34.119
But if they want to stay in portrait then
they can't.

00:58:34.119 --> 00:58:41.200
so I think you should let the user decide
what they want and it's less work for you.

00:58:41.200 --> 00:58:42.200
So that's probably the best solution.

00:58:42.200 --> 00:58:46.799
&gt;&gt;Trevor: I mean, like you said, there are
several apps out there that do do this.

00:58:46.799 --> 00:58:48.759
Games, Netflix does it.

00:58:48.759 --> 00:58:52.690
But you know, an example of just compare Netflix
and YouTube.

00:58:52.690 --> 00:58:53.690
Right.

00:58:53.690 --> 00:58:55.890
YouTube, if you're in portrait mode it finds
a way to play the video in portrait.

00:58:55.890 --> 00:58:59.359
And I think that's a good model to follow
whenever possible.

00:58:59.359 --> 00:59:03.900
&gt;&gt;Joe: I'm familiar with several note taking
apps that are currently available for Android

00:59:03.900 --> 00:59:08.949
and none of them force you to go into portrait
or landscape.

00:59:08.949 --> 00:59:14.539
You might find that in portrait it's much
more difficult to write your notes.

00:59:14.539 --> 00:59:20.609
But certainly if you choose to do that it's
easier than if the application forces you

00:59:20.609 --> 00:59:21.609
to go one way or another.

00:59:21.609 --> 00:59:22.609
&gt;&gt;Trevor: Yep.

00:59:22.609 --> 00:59:24.650
&gt;&gt;Romain: And look what happened with the
launcher on Nexus 7.

00:59:24.650 --> 00:59:28.359
It's always in portrait and so the number
one feature request we get is can we get the

00:59:28.359 --> 00:59:30.569
launcher to go in landscape as well.

00:59:30.569 --> 00:59:35.140
So I think users don't really like it when
you choose the orientation for them.

00:59:35.140 --> 00:59:38.259
&gt;&gt;Joe: OK.

00:59:38.259 --> 00:59:41.119
I think we have unfortunately run out of time.

00:59:41.119 --> 00:59:45.410
I'm really happy that we got so much participation
live from our Hangout.

00:59:45.410 --> 00:59:46.579
Thank you very much.

00:59:46.579 --> 00:59:49.890
I hope people will stop in again next week.

00:59:49.890 --> 00:59:51.599
And until then, we'll all say goodbye.

00:59:51.599 --> 00:59:52.940
&gt;&gt;Trevor: Alright, we'll see ya everyone.

00:59:52.940 --> 00:59:53.619
[techno music plays]

