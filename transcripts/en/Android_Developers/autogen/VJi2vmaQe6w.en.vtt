WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:03.610
 
[Music]

00:00:03.610 --> 00:00:03.620
[Music]
 

00:00:03.620 --> 00:00:06.559
[Music]
hello good morning and welcome my name

00:00:06.559 --> 00:00:06.569
hello good morning and welcome my name
 

00:00:06.569 --> 00:00:08.150
hello good morning and welcome my name
is Jonathan and I'm an engineer at

00:00:08.150 --> 00:00:08.160
is Jonathan and I'm an engineer at
 

00:00:08.160 --> 00:00:11.570
is Jonathan and I'm an engineer at
Google and welcome to today's session

00:00:11.570 --> 00:00:11.580
Google and welcome to today's session
 

00:00:11.580 --> 00:00:13.549
Google and welcome to today's session
and we're going to talk about how to

00:00:13.549 --> 00:00:13.559
and we're going to talk about how to
 

00:00:13.559 --> 00:00:19.340
and we're going to talk about how to
build testable apps for Android so

00:00:19.340 --> 00:00:19.350
build testable apps for Android so
 

00:00:19.350 --> 00:00:22.040
build testable apps for Android so
through the history of time architecture

00:00:22.040 --> 00:00:22.050
through the history of time architecture
 

00:00:22.050 --> 00:00:24.800
through the history of time architecture
has continually evolved in style and

00:00:24.800 --> 00:00:24.810
has continually evolved in style and
 

00:00:24.810 --> 00:00:29.450
has continually evolved in style and
ambition to fit our expanding visions in

00:00:29.450 --> 00:00:29.460
ambition to fit our expanding visions in
 

00:00:29.460 --> 00:00:30.919
ambition to fit our expanding visions in
order to build these increasingly

00:00:30.919 --> 00:00:30.929
order to build these increasingly
 

00:00:30.929 --> 00:00:33.020
order to build these increasingly
complex architectures we've needed to

00:00:33.020 --> 00:00:33.030
complex architectures we've needed to
 

00:00:33.030 --> 00:00:35.330
complex architectures we've needed to
also innovate new tools and patterns and

00:00:35.330 --> 00:00:35.340
also innovate new tools and patterns and
 

00:00:35.340 --> 00:00:37.280
also innovate new tools and patterns and
methods to meet the demands of building

00:00:37.280 --> 00:00:37.290
methods to meet the demands of building
 

00:00:37.290 --> 00:00:40.340
methods to meet the demands of building
them and just like in the real world in

00:00:40.340 --> 00:00:40.350
them and just like in the real world in
 

00:00:40.350 --> 00:00:42.979
them and just like in the real world in
software - we've all had our own

00:00:42.979 --> 00:00:42.989
software - we've all had our own
 

00:00:42.989 --> 00:00:47.090
software - we've all had our own
evolutionary past we've seen this in

00:00:47.090 --> 00:00:47.100
evolutionary past we've seen this in
 

00:00:47.100 --> 00:00:50.360
evolutionary past we've seen this in
Android development - who remembers

00:00:50.360 --> 00:00:50.370
Android development - who remembers
 

00:00:50.370 --> 00:00:52.389
Android development - who remembers
building small applications in Eclipse

00:00:52.389 --> 00:00:52.399
building small applications in Eclipse
 

00:00:52.399 --> 00:00:56.420
building small applications in Eclipse
yeah and Newseum complexity of

00:00:56.420 --> 00:00:56.430
yeah and Newseum complexity of
 

00:00:56.430 --> 00:00:58.939
yeah and Newseum complexity of
applications grew so did the needed for

00:00:58.939 --> 00:00:58.949
applications grew so did the needed for
 

00:00:58.949 --> 00:01:02.119
applications grew so did the needed for
better tools and testing tools and now

00:01:02.119 --> 00:01:02.129
better tools and testing tools and now
 

00:01:02.129 --> 00:01:04.070
better tools and testing tools and now
today were building out quite complex

00:01:04.070 --> 00:01:04.080
today were building out quite complex
 

00:01:04.080 --> 00:01:07.810
today were building out quite complex
applications within Android studio and

00:01:07.810 --> 00:01:07.820
applications within Android studio and
 

00:01:07.820 --> 00:01:10.370
applications within Android studio and
last year there was jetpack which

00:01:10.370 --> 00:01:10.380
last year there was jetpack which
 

00:01:10.380 --> 00:01:12.350
last year there was jetpack which
included a lot of great libraries to

00:01:12.350 --> 00:01:12.360
included a lot of great libraries to
 

00:01:12.360 --> 00:01:14.600
included a lot of great libraries to
abstract some of the details allowing

00:01:14.600 --> 00:01:14.610
abstract some of the details allowing
 

00:01:14.610 --> 00:01:16.310
abstract some of the details allowing
those developers to focus on writing

00:01:16.310 --> 00:01:16.320
those developers to focus on writing
 

00:01:16.320 --> 00:01:21.050
those developers to focus on writing
great features but sometimes the

00:01:21.050 --> 00:01:21.060
great features but sometimes the
 

00:01:21.060 --> 00:01:23.230
great features but sometimes the
evolution hasn't always been easy and

00:01:23.230 --> 00:01:23.240
evolution hasn't always been easy and
 

00:01:23.240 --> 00:01:25.219
evolution hasn't always been easy and
choices developers have had to make

00:01:25.219 --> 00:01:25.229
choices developers have had to make
 

00:01:25.229 --> 00:01:28.609
choices developers have had to make
haven't always been so clear so how do

00:01:28.609 --> 00:01:28.619
haven't always been so clear so how do
 

00:01:28.619 --> 00:01:31.280
haven't always been so clear so how do
you answer questions such as how should

00:01:31.280 --> 00:01:31.290
you answer questions such as how should
 

00:01:31.290 --> 00:01:34.160
you answer questions such as how should
I architect my application or how do I

00:01:34.160 --> 00:01:34.170
I architect my application or how do I
 

00:01:34.170 --> 00:01:37.460
I architect my application or how do I
organize my codebase what library should

00:01:37.460 --> 00:01:37.470
organize my codebase what library should
 

00:01:37.470 --> 00:01:40.990
organize my codebase what library should
I choose and what tools should I pick

00:01:40.990 --> 00:01:41.000
I choose and what tools should I pick
 

00:01:41.000 --> 00:01:43.310
I choose and what tools should I pick
the choices that you make early on in

00:01:43.310 --> 00:01:43.320
the choices that you make early on in
 

00:01:43.320 --> 00:01:45.590
the choices that you make early on in
development have a long lasting impact

00:01:45.590 --> 00:01:45.600
development have a long lasting impact
 

00:01:45.600 --> 00:01:47.600
development have a long lasting impact
on the testability of your app and

00:01:47.600 --> 00:01:47.610
on the testability of your app and
 

00:01:47.610 --> 00:01:50.149
on the testability of your app and
thereby your development velocity and

00:01:50.149 --> 00:01:50.159
thereby your development velocity and
 

00:01:50.159 --> 00:01:51.969
thereby your development velocity and
your ability to add new features

00:01:51.969 --> 00:01:51.979
your ability to add new features
 

00:01:51.979 --> 00:01:55.550
your ability to add new features
sustainably well today we're going to

00:01:55.550 --> 00:01:55.560
sustainably well today we're going to
 

00:01:55.560 --> 00:01:57.310
sustainably well today we're going to
show you with some real-world examples

00:01:57.310 --> 00:01:57.320
show you with some real-world examples
 

00:01:57.320 --> 00:02:00.080
show you with some real-world examples
how to make the pragmatic decisions in

00:02:00.080 --> 00:02:00.090
how to make the pragmatic decisions in
 

00:02:00.090 --> 00:02:02.899
how to make the pragmatic decisions in
how you build your applications in order

00:02:02.899 --> 00:02:02.909
how you build your applications in order
 

00:02:02.909 --> 00:02:07.950
how you build your applications in order
to build a long-term testing strategy

00:02:07.950 --> 00:02:07.960
 
 

00:02:07.960 --> 00:02:10.590
 
and testing the key attribute to

00:02:10.590 --> 00:02:10.600
and testing the key attribute to
 

00:02:10.600 --> 00:02:14.250
and testing the key attribute to
consider is scope now scope means how

00:02:14.250 --> 00:02:14.260
consider is scope now scope means how
 

00:02:14.260 --> 00:02:16.320
consider is scope now scope means how
much of my applications in my test

00:02:16.320 --> 00:02:16.330
much of my applications in my test
 

00:02:16.330 --> 00:02:19.350
much of my applications in my test
covering and test could run in on just a

00:02:19.350 --> 00:02:19.360
covering and test could run in on just a
 

00:02:19.360 --> 00:02:21.930
covering and test could run in on just a
single method or they could span

00:02:21.930 --> 00:02:21.940
single method or they could span
 

00:02:21.940 --> 00:02:24.500
single method or they could span
multiple features multiple screens and

00:02:24.500 --> 00:02:24.510
multiple features multiple screens and
 

00:02:24.510 --> 00:02:26.940
multiple features multiple screens and
scope directly impacts to other

00:02:26.940 --> 00:02:26.950
scope directly impacts to other
 

00:02:26.950 --> 00:02:31.770
scope directly impacts to other
attributes of testing speed how fast

00:02:31.770 --> 00:02:31.780
attributes of testing speed how fast
 

00:02:31.780 --> 00:02:34.830
attributes of testing speed how fast
does your test run and some can take

00:02:34.830 --> 00:02:34.840
does your test run and some can take
 

00:02:34.840 --> 00:02:36.420
does your test run and some can take
from the order of milliseconds and

00:02:36.420 --> 00:02:36.430
from the order of milliseconds and
 

00:02:36.430 --> 00:02:38.130
from the order of milliseconds and
others all the way up to minutes or

00:02:38.130 --> 00:02:38.140
others all the way up to minutes or
 

00:02:38.140 --> 00:02:43.740
others all the way up to minutes or
maybe more and fidelity how close does

00:02:43.740 --> 00:02:43.750
maybe more and fidelity how close does
 

00:02:43.750 --> 00:02:46.110
maybe more and fidelity how close does
it to real-world scenarios does your

00:02:46.110 --> 00:02:46.120
it to real-world scenarios does your
 

00:02:46.120 --> 00:02:49.800
it to real-world scenarios does your
tests at case simulate an increasing

00:02:49.800 --> 00:02:49.810
tests at case simulate an increasing
 

00:02:49.810 --> 00:02:52.350
tests at case simulate an increasing
scope typically increases the fidelity

00:02:52.350 --> 00:02:52.360
scope typically increases the fidelity
 

00:02:52.360 --> 00:02:55.020
scope typically increases the fidelity
of your tests but it does so at the

00:02:55.020 --> 00:02:55.030
of your tests but it does so at the
 

00:02:55.030 --> 00:02:59.100
of your tests but it does so at the
expense of speed and vice versa and you

00:02:59.100 --> 00:02:59.110
expense of speed and vice versa and you
 

00:02:59.110 --> 00:03:01.199
expense of speed and vice versa and you
can't actually have a single test that

00:03:01.199 --> 00:03:01.209
can't actually have a single test that
 

00:03:01.209 --> 00:03:04.470
can't actually have a single test that
gives you the best of everything so the

00:03:04.470 --> 00:03:04.480
gives you the best of everything so the
 

00:03:04.480 --> 00:03:07.490
gives you the best of everything so the
question is when is good good enough

00:03:07.490 --> 00:03:07.500
question is when is good good enough
 

00:03:07.500 --> 00:03:11.250
question is when is good good enough
when do you really need perfect and how

00:03:11.250 --> 00:03:11.260
when do you really need perfect and how
 

00:03:11.260 --> 00:03:16.080
when do you really need perfect and how
do you achieve the right balance the

00:03:16.080 --> 00:03:16.090
do you achieve the right balance the
 

00:03:16.090 --> 00:03:18.120
do you achieve the right balance the
testing pyramid is used as a guide to

00:03:18.120 --> 00:03:18.130
testing pyramid is used as a guide to
 

00:03:18.130 --> 00:03:21.390
testing pyramid is used as a guide to
help you create that balance as you go

00:03:21.390 --> 00:03:21.400
help you create that balance as you go
 

00:03:21.400 --> 00:03:23.460
help you create that balance as you go
up the pyramid you improve on fidelity

00:03:23.460 --> 00:03:23.470
up the pyramid you improve on fidelity
 

00:03:23.470 --> 00:03:27.449
up the pyramid you improve on fidelity
by increasing the scope but remember

00:03:27.449 --> 00:03:27.459
by increasing the scope but remember
 

00:03:27.459 --> 00:03:30.840
by increasing the scope but remember
this comes at the price of speed focus

00:03:30.840 --> 00:03:30.850
this comes at the price of speed focus
 

00:03:30.850 --> 00:03:36.360
this comes at the price of speed focus
and scalability unit tests they've got

00:03:36.360 --> 00:03:36.370
and scalability unit tests they've got
 

00:03:36.370 --> 00:03:40.020
and scalability unit tests they've got
to be fast lightweight highly focused in

00:03:40.020 --> 00:03:40.030
to be fast lightweight highly focused in
 

00:03:40.030 --> 00:03:41.520
to be fast lightweight highly focused in
order that they can achieve high

00:03:41.520 --> 00:03:41.530
order that they can achieve high
 

00:03:41.530 --> 00:03:44.580
order that they can achieve high
scalability they're really easy to

00:03:44.580 --> 00:03:44.590
scalability they're really easy to
 

00:03:44.590 --> 00:03:46.890
scalability they're really easy to
define because most of the time we're

00:03:46.890 --> 00:03:46.900
define because most of the time we're
 

00:03:46.900 --> 00:03:49.050
define because most of the time we're
just testing a single method in a single

00:03:49.050 --> 00:03:49.060
just testing a single method in a single
 

00:03:49.060 --> 00:03:52.590
just testing a single method in a single
class within our application and this

00:03:52.590 --> 00:03:52.600
class within our application and this
 

00:03:52.600 --> 00:03:53.699
class within our application and this
means that they're going to give you

00:03:53.699 --> 00:03:53.709
means that they're going to give you
 

00:03:53.709 --> 00:03:58.289
means that they're going to give you
really high degree of focus to the

00:03:58.289 --> 00:03:58.299
really high degree of focus to the
 

00:03:58.299 --> 00:04:03.539
really high degree of focus to the
origin of a failure integration tests

00:04:03.539 --> 00:04:03.549
origin of a failure integration tests
 

00:04:03.549 --> 00:04:06.150
origin of a failure integration tests
are the next category of tests and here

00:04:06.150 --> 00:04:06.160
are the next category of tests and here
 

00:04:06.160 --> 00:04:07.800
are the next category of tests and here
we're trying to bring together several

00:04:07.800 --> 00:04:07.810
we're trying to bring together several
 

00:04:07.810 --> 00:04:10.199
we're trying to bring together several
units within our application and we're

00:04:10.199 --> 00:04:10.209
units within our application and we're
 

00:04:10.209 --> 00:04:11.490
units within our application and we're
interested in verifying their

00:04:11.490 --> 00:04:11.500
interested in verifying their
 

00:04:11.500 --> 00:04:13.949
interested in verifying their
collaboration making sure that when we

00:04:13.949 --> 00:04:13.959
collaboration making sure that when we
 

00:04:13.959 --> 00:04:15.870
collaboration making sure that when we
bring them together that they all behave

00:04:15.870 --> 00:04:15.880
bring them together that they all behave
 

00:04:15.880 --> 00:04:19.970
bring them together that they all behave
expected as a whole

00:04:19.970 --> 00:04:19.980
 
 

00:04:19.980 --> 00:04:22.640
 
and end-to-end tests they step through

00:04:22.640 --> 00:04:22.650
and end-to-end tests they step through
 

00:04:22.650 --> 00:04:24.680
and end-to-end tests they step through
key paths in our application after

00:04:24.680 --> 00:04:24.690
key paths in our application after
 

00:04:24.690 --> 00:04:27.170
key paths in our application after
uncovering multiple screens and features

00:04:27.170 --> 00:04:27.180
uncovering multiple screens and features
 

00:04:27.180 --> 00:04:29.690
uncovering multiple screens and features
and these are also really easy to define

00:04:29.690 --> 00:04:29.700
and these are also really easy to define
 

00:04:29.700 --> 00:04:31.670
and these are also really easy to define
because at this stage we know what

00:04:31.670 --> 00:04:31.680
because at this stage we know what
 

00:04:31.680 --> 00:04:36.590
because at this stage we know what
testing our whole application today

00:04:36.590 --> 00:04:36.600
testing our whole application today
 

00:04:36.600 --> 00:04:39.070
testing our whole application today
we're launching a new to do application

00:04:39.070 --> 00:04:39.080
we're launching a new to do application
 

00:04:39.080 --> 00:04:41.780
we're launching a new to do application
well it's not really an official Google

00:04:41.780 --> 00:04:41.790
well it's not really an official Google
 

00:04:41.790 --> 00:04:44.530
well it's not really an official Google
product but it is a real application

00:04:44.530 --> 00:04:44.540
product but it is a real application
 

00:04:44.540 --> 00:04:46.970
product but it is a real application
it's part of the refreshed Android

00:04:46.970 --> 00:04:46.980
it's part of the refreshed Android
 

00:04:46.980 --> 00:04:48.560
it's part of the refreshed Android
testing code lab that we're launching

00:04:48.560 --> 00:04:48.570
testing code lab that we're launching
 

00:04:48.570 --> 00:04:52.130
testing code lab that we're launching
today so you can go ahead check it out

00:04:52.130 --> 00:04:52.140
today so you can go ahead check it out
 

00:04:52.140 --> 00:04:54.980
today so you can go ahead check it out
build test work through all the examples

00:04:54.980 --> 00:04:54.990
build test work through all the examples
 

00:04:54.990 --> 00:04:56.600
build test work through all the examples
that you'll see right here in this

00:04:56.600 --> 00:04:56.610
that you'll see right here in this
 

00:04:56.610 --> 00:04:59.810
that you'll see right here in this
session today now we're going to work

00:04:59.810 --> 00:04:59.820
session today now we're going to work
 

00:04:59.820 --> 00:05:01.010
session today now we're going to work
through building this application

00:05:01.010 --> 00:05:01.020
through building this application
 

00:05:01.020 --> 00:05:03.290
through building this application
together and in doing so

00:05:03.290 --> 00:05:03.300
together and in doing so
 

00:05:03.300 --> 00:05:05.660
together and in doing so
along the way we'll discuss some of the

00:05:05.660 --> 00:05:05.670
along the way we'll discuss some of the
 

00:05:05.670 --> 00:05:07.850
along the way we'll discuss some of the
challenges and the choices that will be

00:05:07.850 --> 00:05:07.860
challenges and the choices that will be
 

00:05:07.860 --> 00:05:13.460
challenges and the choices that will be
faced building an application usually

00:05:13.460 --> 00:05:13.470
faced building an application usually
 

00:05:13.470 --> 00:05:15.530
faced building an application usually
starts by defining some key critical

00:05:15.530 --> 00:05:15.540
starts by defining some key critical
 

00:05:15.540 --> 00:05:19.310
starts by defining some key critical
user journeys and a critical user

00:05:19.310 --> 00:05:19.320
user journeys and a critical user
 

00:05:19.320 --> 00:05:21.980
user journeys and a critical user
journey is a step by step path that the

00:05:21.980 --> 00:05:21.990
journey is a step by step path that the
 

00:05:21.990 --> 00:05:24.610
journey is a step by step path that the
user takes through an application and

00:05:24.610 --> 00:05:24.620
user takes through an application and
 

00:05:24.620 --> 00:05:28.270
user takes through an application and
the idea is in order to meet a

00:05:28.270 --> 00:05:28.280
the idea is in order to meet a
 

00:05:28.280 --> 00:05:34.010
the idea is in order to meet a
predefined end goal the journey may span

00:05:34.010 --> 00:05:34.020
predefined end goal the journey may span
 

00:05:34.020 --> 00:05:36.530
predefined end goal the journey may span
multiple screens and decision points to

00:05:36.530 --> 00:05:36.540
multiple screens and decision points to
 

00:05:36.540 --> 00:05:39.080
multiple screens and decision points to
get to that end goal and they're often

00:05:39.080 --> 00:05:39.090
get to that end goal and they're often
 

00:05:39.090 --> 00:05:41.530
get to that end goal and they're often
sketched out by a series of mock-ups and

00:05:41.530 --> 00:05:41.540
sketched out by a series of mock-ups and
 

00:05:41.540 --> 00:05:43.910
sketched out by a series of mock-ups and
let's take a look at some that our UX

00:05:43.910 --> 00:05:43.920
let's take a look at some that our UX
 

00:05:43.920 --> 00:05:47.390
let's take a look at some that our UX
designers just sent us our first user

00:05:47.390 --> 00:05:47.400
designers just sent us our first user
 

00:05:47.400 --> 00:05:50.380
designers just sent us our first user
journey is that of creating a new task

00:05:50.380 --> 00:05:50.390
journey is that of creating a new task
 

00:05:50.390 --> 00:05:52.880
journey is that of creating a new task
users arrive on the home screen which

00:05:52.880 --> 00:05:52.890
users arrive on the home screen which
 

00:05:52.890 --> 00:05:55.160
users arrive on the home screen which
shows a list of tasks the first time

00:05:55.160 --> 00:05:55.170
shows a list of tasks the first time
 

00:05:55.170 --> 00:05:57.160
shows a list of tasks the first time
they get there is going to be empty

00:05:57.160 --> 00:05:57.170
they get there is going to be empty
 

00:05:57.170 --> 00:05:59.570
they get there is going to be empty
there's a floating action button that

00:05:59.570 --> 00:05:59.580
there's a floating action button that
 

00:05:59.580 --> 00:06:01.460
there's a floating action button that
they can click it takes them to the next

00:06:01.460 --> 00:06:01.470
they can click it takes them to the next
 

00:06:01.470 --> 00:06:03.530
they can click it takes them to the next
screen where they can enter details for

00:06:03.530 --> 00:06:03.540
screen where they can enter details for
 

00:06:03.540 --> 00:06:06.680
screen where they can enter details for
their tasks they can click Save and they

00:06:06.680 --> 00:06:06.690
their tasks they can click Save and they
 

00:06:06.690 --> 00:06:09.140
their tasks they can click Save and they
return back to the home screen and the

00:06:09.140 --> 00:06:09.150
return back to the home screen and the
 

00:06:09.150 --> 00:06:14.270
return back to the home screen and the
new task should show up our second user

00:06:14.270 --> 00:06:14.280
new task should show up our second user
 

00:06:14.280 --> 00:06:16.430
new task should show up our second user
journey is about checking our progress

00:06:16.430 --> 00:06:16.440
journey is about checking our progress
 

00:06:16.440 --> 00:06:19.900
journey is about checking our progress
so users can select an existing task

00:06:19.900 --> 00:06:19.910
so users can select an existing task
 

00:06:19.910 --> 00:06:23.420
so users can select an existing task
they can mark it is completed and then

00:06:23.420 --> 00:06:23.430
they can mark it is completed and then
 

00:06:23.430 --> 00:06:25.070
they can mark it is completed and then
they can go and view their progress on a

00:06:25.070 --> 00:06:25.080
they can go and view their progress on a
 

00:06:25.080 --> 00:06:27.320
they can go and view their progress on a
statistic screen that shows them just

00:06:27.320 --> 00:06:27.330
statistic screen that shows them just
 

00:06:27.330 --> 00:06:31.270
statistic screen that shows them just
how productive they are

00:06:31.270 --> 00:06:31.280
 
 

00:06:31.280 --> 00:06:34.420
 
now every project starts off small but

00:06:34.420 --> 00:06:34.430
now every project starts off small but
 

00:06:34.430 --> 00:06:36.740
now every project starts off small but
if careful attention isn't paid to

00:06:36.740 --> 00:06:36.750
if careful attention isn't paid to
 

00:06:36.750 --> 00:06:40.700
if careful attention isn't paid to
design architecture organization join

00:06:40.700 --> 00:06:40.710
design architecture organization join
 

00:06:40.710 --> 00:06:43.460
design architecture organization join
the growth of that codebase development

00:06:43.460 --> 00:06:43.470
the growth of that codebase development
 

00:06:43.470 --> 00:06:45.410
the growth of that codebase development
can quickly spiral out of control as

00:06:45.410 --> 00:06:45.420
can quickly spiral out of control as
 

00:06:45.420 --> 00:06:48.670
can quickly spiral out of control as
your application grows uncontrollably

00:06:48.670 --> 00:06:48.680
your application grows uncontrollably
 

00:06:48.680 --> 00:06:51.470
your application grows uncontrollably
without any thought your codebase can

00:06:51.470 --> 00:06:51.480
without any thought your codebase can
 

00:06:51.480 --> 00:06:53.650
without any thought your codebase can
quickly turn to a huge monolith a

00:06:53.650 --> 00:06:53.660
quickly turn to a huge monolith a
 

00:06:53.660 --> 00:06:56.000
quickly turn to a huge monolith a
spaghetti-like ball of incoherent

00:06:56.000 --> 00:06:56.010
spaghetti-like ball of incoherent
 

00:06:56.010 --> 00:06:58.760
spaghetti-like ball of incoherent
dependencies they're not only hard to

00:06:58.760 --> 00:06:58.770
dependencies they're not only hard to
 

00:06:58.770 --> 00:07:00.500
dependencies they're not only hard to
reason about but they're difficult to

00:07:00.500 --> 00:07:00.510
reason about but they're difficult to
 

00:07:00.510 --> 00:07:04.550
reason about but they're difficult to
test as well if individual units don't

00:07:04.550 --> 00:07:04.560
test as well if individual units don't
 

00:07:04.560 --> 00:07:07.010
test as well if individual units don't
follow key principles such as that of

00:07:07.010 --> 00:07:07.020
follow key principles such as that of
 

00:07:07.020 --> 00:07:10.940
follow key principles such as that of
high cohesion and low coupling they

00:07:10.940 --> 00:07:10.950
high cohesion and low coupling they
 

00:07:10.950 --> 00:07:13.130
high cohesion and low coupling they
become really difficult to test alone in

00:07:13.130 --> 00:07:13.140
become really difficult to test alone in
 

00:07:13.140 --> 00:07:16.340
become really difficult to test alone in
isolation and furthermore with a

00:07:16.340 --> 00:07:16.350
isolation and furthermore with a
 

00:07:16.350 --> 00:07:19.130
isolation and furthermore with a
monolithic codebase like this any time

00:07:19.130 --> 00:07:19.140
monolithic codebase like this any time
 

00:07:19.140 --> 00:07:20.420
monolithic codebase like this any time
you make a single change to your

00:07:20.420 --> 00:07:20.430
you make a single change to your
 

00:07:20.430 --> 00:07:22.460
you make a single change to your
application you have to rebuild

00:07:22.460 --> 00:07:22.470
application you have to rebuild
 

00:07:22.470 --> 00:07:26.690
application you have to rebuild
everything and these factors force the

00:07:26.690 --> 00:07:26.700
everything and these factors force the
 

00:07:26.700 --> 00:07:30.260
everything and these factors force the
majority of tests to end up being large

00:07:30.260 --> 00:07:30.270
majority of tests to end up being large
 

00:07:30.270 --> 00:07:33.740
majority of tests to end up being large
end-to-end tests how does this affect

00:07:33.740 --> 00:07:33.750
end-to-end tests how does this affect
 

00:07:33.750 --> 00:07:37.400
end-to-end tests how does this affect
our pyramid well with such resulting

00:07:37.400 --> 00:07:37.410
our pyramid well with such resulting
 

00:07:37.410 --> 00:07:39.890
our pyramid well with such resulting
chaos you can see that our pyramid is

00:07:39.890 --> 00:07:39.900
chaos you can see that our pyramid is
 

00:07:39.900 --> 00:07:41.780
chaos you can see that our pyramid is
now completely disproportional to how

00:07:41.780 --> 00:07:41.790
now completely disproportional to how
 

00:07:41.790 --> 00:07:46.820
now completely disproportional to how
we'd like it to look if we do try to

00:07:46.820 --> 00:07:46.830
we'd like it to look if we do try to
 

00:07:46.830 --> 00:07:48.560
we'd like it to look if we do try to
think about organization from when we

00:07:48.560 --> 00:07:48.570
think about organization from when we
 

00:07:48.570 --> 00:07:50.630
think about organization from when we
start out our first thought might be

00:07:50.630 --> 00:07:50.640
start out our first thought might be
 

00:07:50.640 --> 00:07:53.690
start out our first thought might be
following a layered architecture at this

00:07:53.690 --> 00:07:53.700
following a layered architecture at this
 

00:07:53.700 --> 00:07:55.480
following a layered architecture at this
stage in development it's the only

00:07:55.480 --> 00:07:55.490
stage in development it's the only
 

00:07:55.490 --> 00:07:58.640
stage in development it's the only
dimension that's visible to us and there

00:07:58.640 --> 00:07:58.650
dimension that's visible to us and there
 

00:07:58.650 --> 00:08:00.260
dimension that's visible to us and there
are also Android concepts that map

00:08:00.260 --> 00:08:00.270
are also Android concepts that map
 

00:08:00.270 --> 00:08:02.810
are also Android concepts that map
neatly to each layers so maybe this

00:08:02.810 --> 00:08:02.820
neatly to each layers so maybe this
 

00:08:02.820 --> 00:08:06.410
neatly to each layers so maybe this
makes sense and by structuring our code

00:08:06.410 --> 00:08:06.420
makes sense and by structuring our code
 

00:08:06.420 --> 00:08:08.690
makes sense and by structuring our code
this way we can slash dependencies

00:08:08.690 --> 00:08:08.700
this way we can slash dependencies
 

00:08:08.700 --> 00:08:11.360
this way we can slash dependencies
follow those principles of high cohesion

00:08:11.360 --> 00:08:11.370
follow those principles of high cohesion
 

00:08:11.370 --> 00:08:14.060
follow those principles of high cohesion
low coupling may be introduced

00:08:14.060 --> 00:08:14.070
low coupling may be introduced
 

00:08:14.070 --> 00:08:16.520
low coupling may be introduced
dependency injection and now we can see

00:08:16.520 --> 00:08:16.530
dependency injection and now we can see
 

00:08:16.530 --> 00:08:21.140
dependency injection and now we can see
that unit tests are possible but as our

00:08:21.140 --> 00:08:21.150
that unit tests are possible but as our
 

00:08:21.150 --> 00:08:24.140
that unit tests are possible but as our
application grows in complexity we start

00:08:24.140 --> 00:08:24.150
application grows in complexity we start
 

00:08:24.150 --> 00:08:26.180
application grows in complexity we start
to notice that it grows by the dimension

00:08:26.180 --> 00:08:26.190
to notice that it grows by the dimension
 

00:08:26.190 --> 00:08:28.520
to notice that it grows by the dimension
of features rather than architectural

00:08:28.520 --> 00:08:28.530
of features rather than architectural
 

00:08:28.530 --> 00:08:31.760
of features rather than architectural
layers so even if we did marginalize our

00:08:31.760 --> 00:08:31.770
layers so even if we did marginalize our
 

00:08:31.770 --> 00:08:35.390
layers so even if we did marginalize our
code this way a small change high up in

00:08:35.390 --> 00:08:35.400
code this way a small change high up in
 

00:08:35.400 --> 00:08:37.400
code this way a small change high up in
the tech stack is only gonna save a

00:08:37.400 --> 00:08:37.410
the tech stack is only gonna save a
 

00:08:37.410 --> 00:08:40.030
the tech stack is only gonna save a
couple of layers of modules of rebuilds

00:08:40.030 --> 00:08:40.040
couple of layers of modules of rebuilds
 

00:08:40.040 --> 00:08:42.890
couple of layers of modules of rebuilds
whereas something lower down still

00:08:42.890 --> 00:08:42.900
whereas something lower down still
 

00:08:42.900 --> 00:08:44.340
whereas something lower down still
causes a complete rebuild

00:08:44.340 --> 00:08:44.350
causes a complete rebuild
 

00:08:44.350 --> 00:08:47.940
causes a complete rebuild
the hold application furthermore the

00:08:47.940 --> 00:08:47.950
the hold application furthermore the
 

00:08:47.950 --> 00:08:49.820
the hold application furthermore the
layers themselves become monolithic and

00:08:49.820 --> 00:08:49.830
layers themselves become monolithic and
 

00:08:49.830 --> 00:08:53.040
layers themselves become monolithic and
so we still end up writing so many large

00:08:53.040 --> 00:08:53.050
so we still end up writing so many large
 

00:08:53.050 --> 00:08:58.830
so we still end up writing so many large
end-to-end tests now well the ability to

00:08:58.830 --> 00:08:58.840
end-to-end tests now well the ability to
 

00:08:58.840 --> 00:09:01.790
end-to-end tests now well the ability to
start writing unit tests is really good

00:09:01.790 --> 00:09:01.800
start writing unit tests is really good
 

00:09:01.800 --> 00:09:04.050
start writing unit tests is really good
projects are still left with a pyramid

00:09:04.050 --> 00:09:04.060
projects are still left with a pyramid
 

00:09:04.060 --> 00:09:07.200
projects are still left with a pyramid
that doesn't quietly look right and the

00:09:07.200 --> 00:09:07.210
that doesn't quietly look right and the
 

00:09:07.210 --> 00:09:09.240
that doesn't quietly look right and the
problem with this setup is that in order

00:09:09.240 --> 00:09:09.250
problem with this setup is that in order
 

00:09:09.250 --> 00:09:11.310
problem with this setup is that in order
to compensate for our fidelity gap in

00:09:11.310 --> 00:09:11.320
to compensate for our fidelity gap in
 

00:09:11.320 --> 00:09:14.490
to compensate for our fidelity gap in
unit tests were overcompensating

00:09:14.490 --> 00:09:14.500
unit tests were overcompensating
 

00:09:14.500 --> 00:09:17.460
unit tests were overcompensating
dramatically in end-to-end tests which

00:09:17.460 --> 00:09:17.470
dramatically in end-to-end tests which
 

00:09:17.470 --> 00:09:21.240
dramatically in end-to-end tests which
are slow and heavyweight there's nothing

00:09:21.240 --> 00:09:21.250
are slow and heavyweight there's nothing
 

00:09:21.250 --> 00:09:23.670
are slow and heavyweight there's nothing
here that's guiding us so far in order

00:09:23.670 --> 00:09:23.680
here that's guiding us so far in order
 

00:09:23.680 --> 00:09:29.400
here that's guiding us so far in order
to make a balance pyramid so a poorly

00:09:29.400 --> 00:09:29.410
to make a balance pyramid so a poorly
 

00:09:29.410 --> 00:09:31.620
to make a balance pyramid so a poorly
organized and architected codebase can

00:09:31.620 --> 00:09:31.630
organized and architected codebase can
 

00:09:31.630 --> 00:09:33.360
organized and architected codebase can
quickly lead to severe bottlenecks in

00:09:33.360 --> 00:09:33.370
quickly lead to severe bottlenecks in
 

00:09:33.370 --> 00:09:36.450
quickly lead to severe bottlenecks in
your development workflow by over

00:09:36.450 --> 00:09:36.460
your development workflow by over
 

00:09:36.460 --> 00:09:38.520
your development workflow by over
relying on these large end-to-end tests

00:09:38.520 --> 00:09:38.530
relying on these large end-to-end tests
 

00:09:38.530 --> 00:09:40.050
relying on these large end-to-end tests
we'll face with test Suites

00:09:40.050 --> 00:09:40.060
we'll face with test Suites
 

00:09:40.060 --> 00:09:42.690
we'll face with test Suites
that take far too long to run and the

00:09:42.690 --> 00:09:42.700
that take far too long to run and the
 

00:09:42.700 --> 00:09:44.820
that take far too long to run and the
lack of focus in them mean the bugs are

00:09:44.820 --> 00:09:44.830
lack of focus in them mean the bugs are
 

00:09:44.830 --> 00:09:47.790
lack of focus in them mean the bugs are
really hard to track down without

00:09:47.790 --> 00:09:47.800
really hard to track down without
 

00:09:47.800 --> 00:09:50.430
really hard to track down without
effective motorisation every change we

00:09:50.430 --> 00:09:50.440
effective motorisation every change we
 

00:09:50.440 --> 00:09:52.500
effective motorisation every change we
made to the app causes large swathes of

00:09:52.500 --> 00:09:52.510
made to the app causes large swathes of
 

00:09:52.510 --> 00:09:55.560
made to the app causes large swathes of
it to be rebuilt and all the tests must

00:09:55.560 --> 00:09:55.570
it to be rebuilt and all the tests must
 

00:09:55.570 --> 00:09:59.190
it to be rebuilt and all the tests must
be rerun these key points can cripple

00:09:59.190 --> 00:09:59.200
be rerun these key points can cripple
 

00:09:59.200 --> 00:10:02.970
be rerun these key points can cripple
your team's velocity but organizing your

00:10:02.970 --> 00:10:02.980
your team's velocity but organizing your
 

00:10:02.980 --> 00:10:04.950
your team's velocity but organizing your
code correctly has a big impact on

00:10:04.950 --> 00:10:04.960
code correctly has a big impact on
 

00:10:04.960 --> 00:10:08.550
code correctly has a big impact on
testability and development velocity so

00:10:08.550 --> 00:10:08.560
testability and development velocity so
 

00:10:08.560 --> 00:10:09.950
testability and development velocity so
we want to get it right from the get-go

00:10:09.950 --> 00:10:09.960
we want to get it right from the get-go
 

00:10:09.960 --> 00:10:12.450
we want to get it right from the get-go
we want to create a way that's going to

00:10:12.450 --> 00:10:12.460
we want to create a way that's going to
 

00:10:12.460 --> 00:10:14.610
we want to create a way that's going to
be scalable as we move forward and our

00:10:14.610 --> 00:10:14.620
be scalable as we move forward and our
 

00:10:14.620 --> 00:10:19.260
be scalable as we move forward and our
application grows over time so let's

00:10:19.260 --> 00:10:19.270
application grows over time so let's
 

00:10:19.270 --> 00:10:21.090
application grows over time so let's
think about how we may decompose our

00:10:21.090 --> 00:10:21.100
think about how we may decompose our
 

00:10:21.100 --> 00:10:24.720
think about how we may decompose our
project at the top we've got our

00:10:24.720 --> 00:10:24.730
project at the top we've got our
 

00:10:24.730 --> 00:10:28.110
project at the top we've got our
application and one of the key areas of

00:10:28.110 --> 00:10:28.120
application and one of the key areas of
 

00:10:28.120 --> 00:10:32.610
application and one of the key areas of
functionalities is managing tasks we

00:10:32.610 --> 00:10:32.620
functionalities is managing tasks we
 

00:10:32.620 --> 00:10:34.770
functionalities is managing tasks we
also have a progress module that has a

00:10:34.770 --> 00:10:34.780
also have a progress module that has a
 

00:10:34.780 --> 00:10:39.540
also have a progress module that has a
dependency on tasks and as we dive in we

00:10:39.540 --> 00:10:39.550
dependency on tasks and as we dive in we
 

00:10:39.550 --> 00:10:40.860
dependency on tasks and as we dive in we
notice that tasks is a really big

00:10:40.860 --> 00:10:40.870
notice that tasks is a really big
 

00:10:40.870 --> 00:10:43.320
notice that tasks is a really big
feature we can further decompose it with

00:10:43.320 --> 00:10:43.330
feature we can further decompose it with
 

00:10:43.330 --> 00:10:47.940
feature we can further decompose it with
add edit list view and organizing our

00:10:47.940 --> 00:10:47.950
add edit list view and organizing our
 

00:10:47.950 --> 00:10:50.250
add edit list view and organizing our
code this way allows our development to

00:10:50.250 --> 00:10:50.260
code this way allows our development to
 

00:10:50.260 --> 00:10:52.320
code this way allows our development to
scale as our application grows and new

00:10:52.320 --> 00:10:52.330
scale as our application grows and new
 

00:10:52.330 --> 00:10:56.460
scale as our application grows and new
features are added and we're also able

00:10:56.460 --> 00:10:56.470
features are added and we're also able
 

00:10:56.470 --> 00:10:57.840
features are added and we're also able
to scale in debt

00:10:57.840 --> 00:10:57.850
to scale in debt
 

00:10:57.850 --> 00:11:00.480
to scale in debt
of complexity to as features become more

00:11:00.480 --> 00:11:00.490
of complexity to as features become more
 

00:11:00.490 --> 00:11:02.670
of complexity to as features become more
complex we can continue breaking them

00:11:02.670 --> 00:11:02.680
complex we can continue breaking them
 

00:11:02.680 --> 00:11:06.090
complex we can continue breaking them
down adding more modules and this

00:11:06.090 --> 00:11:06.100
down adding more modules and this
 

00:11:06.100 --> 00:11:08.009
down adding more modules and this
approach to organization makes sense

00:11:08.009 --> 00:11:08.019
approach to organization makes sense
 

00:11:08.019 --> 00:11:10.170
approach to organization makes sense
since two components in the same domain

00:11:10.170 --> 00:11:10.180
since two components in the same domain
 

00:11:10.180 --> 00:11:12.660
since two components in the same domain
are much more related in function than

00:11:12.660 --> 00:11:12.670
are much more related in function than
 

00:11:12.670 --> 00:11:14.670
are much more related in function than
two components that might just happen to

00:11:14.670 --> 00:11:14.680
two components that might just happen to
 

00:11:14.680 --> 00:11:17.939
two components that might just happen to
be an activity we can implement this

00:11:17.939 --> 00:11:17.949
be an activity we can implement this
 

00:11:17.949 --> 00:11:19.410
be an activity we can implement this
kind of organization both through

00:11:19.410 --> 00:11:19.420
kind of organization both through
 

00:11:19.420 --> 00:11:22.259
kind of organization both through
language features such as packaging but

00:11:22.259 --> 00:11:22.269
language features such as packaging but
 

00:11:22.269 --> 00:11:23.879
language features such as packaging but
also through our build system like

00:11:23.879 --> 00:11:23.889
also through our build system like
 

00:11:23.889 --> 00:11:30.509
also through our build system like
Gradle modules or basil libraries we can

00:11:30.509 --> 00:11:30.519
Gradle modules or basil libraries we can
 

00:11:30.519 --> 00:11:32.160
Gradle modules or basil libraries we can
have two main orientated modules now to

00:11:32.160 --> 00:11:32.170
have two main orientated modules now to
 

00:11:32.170 --> 00:11:34.620
have two main orientated modules now to
the application and define clear API

00:11:34.620 --> 00:11:34.630
the application and define clear API
 

00:11:34.630 --> 00:11:36.809
the application and define clear API
boundaries to contractual eyes their

00:11:36.809 --> 00:11:36.819
boundaries to contractual eyes their
 

00:11:36.819 --> 00:11:39.240
boundaries to contractual eyes their
interactions so now we have a way to

00:11:39.240 --> 00:11:39.250
interactions so now we have a way to
 

00:11:39.250 --> 00:11:41.639
interactions so now we have a way to
shard our application which makes it

00:11:41.639 --> 00:11:41.649
shard our application which makes it
 

00:11:41.649 --> 00:11:44.100
shard our application which makes it
possible for the isolate the components

00:11:44.100 --> 00:11:44.110
possible for the isolate the components
 

00:11:44.110 --> 00:11:47.129
possible for the isolate the components
for more focused testing finally we can

00:11:47.129 --> 00:11:47.139
for more focused testing finally we can
 

00:11:47.139 --> 00:11:49.759
for more focused testing finally we can
see blueprints for integration tests and

00:11:49.759 --> 00:11:49.769
see blueprints for integration tests and
 

00:11:49.769 --> 00:11:52.410
see blueprints for integration tests and
of course all these module is going to

00:11:52.410 --> 00:11:52.420
of course all these module is going to
 

00:11:52.420 --> 00:11:55.999
of course all these module is going to
be decomposed and be unit testable and

00:11:55.999 --> 00:11:56.009
be decomposed and be unit testable and
 

00:11:56.009 --> 00:11:58.559
be decomposed and be unit testable and
we can still write a large end-to-end

00:11:58.559 --> 00:11:58.569
we can still write a large end-to-end
 

00:11:58.569 --> 00:12:02.670
we can still write a large end-to-end
tests furthermore this organization

00:12:02.670 --> 00:12:02.680
tests furthermore this organization
 

00:12:02.680 --> 00:12:04.920
tests furthermore this organization
allows us to scale as we add new

00:12:04.920 --> 00:12:04.930
allows us to scale as we add new
 

00:12:04.930 --> 00:12:09.559
allows us to scale as we add new
features the test scale along with them

00:12:09.559 --> 00:12:09.569
features the test scale along with them
 

00:12:09.569 --> 00:12:11.879
features the test scale along with them
you can use this guide as a starting

00:12:11.879 --> 00:12:11.889
you can use this guide as a starting
 

00:12:11.889 --> 00:12:13.889
you can use this guide as a starting
point and of course you can decompose

00:12:13.889 --> 00:12:13.899
point and of course you can decompose
 

00:12:13.899 --> 00:12:15.660
point and of course you can decompose
further or in different ways that make

00:12:15.660 --> 00:12:15.670
further or in different ways that make
 

00:12:15.670 --> 00:12:18.809
further or in different ways that make
sense for your application the key thing

00:12:18.809 --> 00:12:18.819
sense for your application the key thing
 

00:12:18.819 --> 00:12:20.759
sense for your application the key thing
here though is to remember to provide

00:12:20.759 --> 00:12:20.769
here though is to remember to provide
 

00:12:20.769 --> 00:12:23.160
here though is to remember to provide
natural guides and templates for

00:12:23.160 --> 00:12:23.170
natural guides and templates for
 

00:12:23.170 --> 00:12:24.660
natural guides and templates for
different categories of tests for your

00:12:24.660 --> 00:12:24.670
different categories of tests for your
 

00:12:24.670 --> 00:12:29.999
different categories of tests for your
application to build our to do

00:12:29.999 --> 00:12:30.009
application to build our to do
 

00:12:30.009 --> 00:12:31.860
application to build our to do
application we're going to be using some

00:12:31.860 --> 00:12:31.870
application we're going to be using some
 

00:12:31.870 --> 00:12:33.389
application we're going to be using some
of the architecture component libraries

00:12:33.389 --> 00:12:33.399
of the architecture component libraries
 

00:12:33.399 --> 00:12:37.559
of the architecture component libraries
from jetpack such as data binding view

00:12:37.559 --> 00:12:37.569
from jetpack such as data binding view
 

00:12:37.569 --> 00:12:44.870
from jetpack such as data binding view
model live data navigation and room

00:12:44.870 --> 00:12:44.880
 
 

00:12:44.880 --> 00:12:47.009
 
we're going to follow the model view

00:12:47.009 --> 00:12:47.019
we're going to follow the model view
 

00:12:47.019 --> 00:12:50.670
we're going to follow the model view
viewmodel pattern or mvvm to architect

00:12:50.670 --> 00:12:50.680
viewmodel pattern or mvvm to architect
 

00:12:50.680 --> 00:12:53.309
viewmodel pattern or mvvm to architect
our application this provides a really

00:12:53.309 --> 00:12:53.319
our application this provides a really
 

00:12:53.319 --> 00:12:55.220
our application this provides a really
clear separation of concerns and

00:12:55.220 --> 00:12:55.230
clear separation of concerns and
 

00:12:55.230 --> 00:12:57.329
clear separation of concerns and
jetpacks architecture component

00:12:57.329 --> 00:12:57.339
jetpacks architecture component
 

00:12:57.339 --> 00:12:59.340
jetpacks architecture component
libraries really fit in well neatly with

00:12:59.340 --> 00:12:59.350
libraries really fit in well neatly with
 

00:12:59.350 --> 00:13:02.819
libraries really fit in well neatly with
this when a start with a single activity

00:13:02.819 --> 00:13:02.829
this when a start with a single activity
 

00:13:02.829 --> 00:13:05.850
this when a start with a single activity
that uses the navigation component to

00:13:05.850 --> 00:13:05.860
that uses the navigation component to
 

00:13:05.860 --> 00:13:07.949
that uses the navigation component to
map the users throws through a series of

00:13:07.949 --> 00:13:07.959
map the users throws through a series of
 

00:13:07.959 --> 00:13:10.769
map the users throws through a series of
fragments each one managing its own

00:13:10.769 --> 00:13:10.779
fragments each one managing its own
 

00:13:10.779 --> 00:13:12.090
fragments each one managing its own
screen

00:13:12.090 --> 00:13:12.100
screen
 

00:13:12.100 --> 00:13:15.160
screen
each fragment has its own XML layout

00:13:15.160 --> 00:13:15.170
each fragment has its own XML layout
 

00:13:15.170 --> 00:13:18.119
each fragment has its own XML layout
this map directly to its own view model

00:13:18.119 --> 00:13:18.129
this map directly to its own view model
 

00:13:18.129 --> 00:13:21.059
this map directly to its own view model
use the datum using data binding our

00:13:21.059 --> 00:13:21.069
use the datum using data binding our
 

00:13:21.069 --> 00:13:22.720
use the datum using data binding our
architecture component

00:13:22.720 --> 00:13:22.730
architecture component
 

00:13:22.730 --> 00:13:25.179
architecture component
it'll also use live data to reflect

00:13:25.179 --> 00:13:25.189
it'll also use live data to reflect
 

00:13:25.189 --> 00:13:30.879
it'll also use live data to reflect
changes back up into the view and our

00:13:30.879 --> 00:13:30.889
changes back up into the view and our
 

00:13:30.889 --> 00:13:33.009
changes back up into the view and our
model a is going to be abstracted under

00:13:33.009 --> 00:13:33.019
model a is going to be abstracted under
 

00:13:33.019 --> 00:13:35.499
model a is going to be abstracted under
a repository that contains both a remote

00:13:35.499 --> 00:13:35.509
a repository that contains both a remote
 

00:13:35.509 --> 00:13:37.749
a repository that contains both a remote
data source and a local data source

00:13:37.749 --> 00:13:37.759
data source and a local data source
 

00:13:37.759 --> 00:13:40.840
data source and a local data source
that's backed by sequel Lite and using

00:13:40.840 --> 00:13:40.850
that's backed by sequel Lite and using
 

00:13:40.850 --> 00:13:46.449
that's backed by sequel Lite and using
room architecture component on Android

00:13:46.449 --> 00:13:46.459
room architecture component on Android
 

00:13:46.459 --> 00:13:48.369
room architecture component on Android
the user interface is updated on the UI

00:13:48.369 --> 00:13:48.379
the user interface is updated on the UI
 

00:13:48.379 --> 00:13:51.280
the user interface is updated on the UI
thread and so so long as the events that

00:13:51.280 --> 00:13:51.290
thread and so so long as the events that
 

00:13:51.290 --> 00:13:54.069
thread and so so long as the events that
we post there are nice short tasks are

00:13:54.069 --> 00:13:54.079
we post there are nice short tasks are
 

00:13:54.079 --> 00:13:57.579
we post there are nice short tasks are
you I say snappy and responsive in our

00:13:57.579 --> 00:13:57.589
you I say snappy and responsive in our
 

00:13:57.589 --> 00:13:59.889
you I say snappy and responsive in our
application however everything's not

00:13:59.889 --> 00:13:59.899
application however everything's not
 

00:13:59.899 --> 00:14:03.009
application however everything's not
gonna fit that criteria we use both a

00:14:03.009 --> 00:14:03.019
gonna fit that criteria we use both a
 

00:14:03.019 --> 00:14:05.829
gonna fit that criteria we use both a
local database and we make crests to a

00:14:05.829 --> 00:14:05.839
local database and we make crests to a
 

00:14:05.839 --> 00:14:08.350
local database and we make crests to a
remote REST API for dealing with task

00:14:08.350 --> 00:14:08.360
remote REST API for dealing with task
 

00:14:08.360 --> 00:14:10.960
remote REST API for dealing with task
data operations to both of these

00:14:10.960 --> 00:14:10.970
data operations to both of these
 

00:14:10.970 --> 00:14:16.299
data operations to both of these
components take a long time and if we

00:14:16.299 --> 00:14:16.309
components take a long time and if we
 

00:14:16.309 --> 00:14:18.610
components take a long time and if we
were to run these on the UI thread we

00:14:18.610 --> 00:14:18.620
were to run these on the UI thread we
 

00:14:18.620 --> 00:14:20.379
were to run these on the UI thread we
quickly see that our application becomes

00:14:20.379 --> 00:14:20.389
quickly see that our application becomes
 

00:14:20.389 --> 00:14:25.420
quickly see that our application becomes
slow or even unresponsive so of course

00:14:25.420 --> 00:14:25.430
slow or even unresponsive so of course
 

00:14:25.430 --> 00:14:27.100
slow or even unresponsive so of course
we need to make sure that these

00:14:27.100 --> 00:14:27.110
we need to make sure that these
 

00:14:27.110 --> 00:14:28.780
we need to make sure that these
long-running operations occur

00:14:28.780 --> 00:14:28.790
long-running operations occur
 

00:14:28.790 --> 00:14:31.059
long-running operations occur
asynchronously in the background somehow

00:14:31.059 --> 00:14:31.069
asynchronously in the background somehow
 

00:14:31.069 --> 00:14:33.189
asynchronously in the background somehow
so that we're not blocking our UI thread

00:14:33.189 --> 00:14:33.199
so that we're not blocking our UI thread
 

00:14:33.199 --> 00:14:35.319
so that we're not blocking our UI thread
from responding while waiting for these

00:14:35.319 --> 00:14:35.329
from responding while waiting for these
 

00:14:35.329 --> 00:14:39.759
from responding while waiting for these
tasks to complete in our application

00:14:39.759 --> 00:14:39.769
tasks to complete in our application
 

00:14:39.769 --> 00:14:41.230
tasks to complete in our application
we're going to make use of Kotlin zko

00:14:41.230 --> 00:14:41.240
we're going to make use of Kotlin zko
 

00:14:41.240 --> 00:14:44.379
we're going to make use of Kotlin zko
routines for asynchronous operations you

00:14:44.379 --> 00:14:44.389
routines for asynchronous operations you
 

00:14:44.389 --> 00:14:45.519
routines for asynchronous operations you
can think of co-routines

00:14:45.519 --> 00:14:45.529
can think of co-routines
 

00:14:45.529 --> 00:14:48.759
can think of co-routines
as lightweight threads and although

00:14:48.759 --> 00:14:48.769
as lightweight threads and although
 

00:14:48.769 --> 00:14:50.049
as lightweight threads and although
they've been stable for only a

00:14:50.049 --> 00:14:50.059
they've been stable for only a
 

00:14:50.059 --> 00:14:52.230
they've been stable for only a
relatively short amount of time the

00:14:52.230 --> 00:14:52.240
relatively short amount of time the
 

00:14:52.240 --> 00:14:54.519
relatively short amount of time the
community has adopted them very quickly

00:14:54.519 --> 00:14:54.529
community has adopted them very quickly
 

00:14:54.529 --> 00:14:56.710
community has adopted them very quickly
and they've become a clear trend in

00:14:56.710 --> 00:14:56.720
and they've become a clear trend in
 

00:14:56.720 --> 00:15:02.169
and they've become a clear trend in
android development a KO routine scope

00:15:02.169 --> 00:15:02.179
android development a KO routine scope
 

00:15:02.179 --> 00:15:03.910
android development a KO routine scope
keeps track of all the ko routines it

00:15:03.910 --> 00:15:03.920
keeps track of all the ko routines it
 

00:15:03.920 --> 00:15:06.970
keeps track of all the ko routines it
creates and if you cancel a scope it

00:15:06.970 --> 00:15:06.980
creates and if you cancel a scope it
 

00:15:06.980 --> 00:15:08.829
creates and if you cancel a scope it
thereby cancels all of the kuroh teens

00:15:08.829 --> 00:15:08.839
thereby cancels all of the kuroh teens
 

00:15:08.839 --> 00:15:12.280
thereby cancels all of the kuroh teens
that were created in that scope in our

00:15:12.280 --> 00:15:12.290
that were created in that scope in our
 

00:15:12.290 --> 00:15:14.769
that were created in that scope in our
application kuroh teens are launched

00:15:14.769 --> 00:15:14.779
application kuroh teens are launched
 

00:15:14.779 --> 00:15:17.199
application kuroh teens are launched
from the view model objects using a

00:15:17.199 --> 00:15:17.209
from the view model objects using a
 

00:15:17.209 --> 00:15:21.040
from the view model objects using a
special view model scope this is

00:15:21.040 --> 00:15:21.050
special view model scope this is
 

00:15:21.050 --> 00:15:22.929
special view model scope this is
particularly useful when our view model

00:15:22.929 --> 00:15:22.939
particularly useful when our view model
 

00:15:22.939 --> 00:15:25.660
particularly useful when our view model
gets destroyed because it automatically

00:15:25.660 --> 00:15:25.670
gets destroyed because it automatically
 

00:15:25.670 --> 00:15:27.880
gets destroyed because it automatically
cancels all of those existing child care

00:15:27.880 --> 00:15:27.890
cancels all of those existing child care
 

00:15:27.890 --> 00:15:30.580
cancels all of those existing child care
routines it's gonna save resources and

00:15:30.580 --> 00:15:30.590
routines it's gonna save resources and
 

00:15:30.590 --> 00:15:32.410
routines it's gonna save resources and
avoid potential memory leaks along the

00:15:32.410 --> 00:15:32.420
avoid potential memory leaks along the
 

00:15:32.420 --> 00:15:35.620
avoid potential memory leaks along the
way and for women is scope we can call

00:15:35.620 --> 00:15:35.630
way and for women is scope we can call
 

00:15:35.630 --> 00:15:41.320
way and for women is scope we can call
down to our tasks repository the

00:15:41.320 --> 00:15:41.330
down to our tasks repository the
 

00:15:41.330 --> 00:15:43.090
down to our tasks repository the
co-routine scope created our task

00:15:43.090 --> 00:15:43.100
co-routine scope created our task
 

00:15:43.100 --> 00:15:45.700
co-routine scope created our task
repository is concerned for parallel

00:15:45.700 --> 00:15:45.710
repository is concerned for parallel
 

00:15:45.710 --> 00:15:48.490
repository is concerned for parallel
decomposition of work when any child

00:15:48.490 --> 00:15:48.500
decomposition of work when any child
 

00:15:48.500 --> 00:15:50.830
decomposition of work when any child
co-routine in this scope fails the

00:15:50.830 --> 00:15:50.840
co-routine in this scope fails the
 

00:15:50.840 --> 00:15:53.050
co-routine in this scope fails the
entire scope fails and all of the

00:15:53.050 --> 00:15:53.060
entire scope fails and all of the
 

00:15:53.060 --> 00:15:55.990
entire scope fails and all of the
remaining co-routines are canceled this

00:15:55.990 --> 00:15:56.000
remaining co-routines are canceled this
 

00:15:56.000 --> 00:15:58.000
remaining co-routines are canceled this
function returns as soon as it's given

00:15:58.000 --> 00:15:58.010
function returns as soon as it's given
 

00:15:58.010 --> 00:16:00.220
function returns as soon as it's given
block and all of the child care routines

00:16:00.220 --> 00:16:00.230
block and all of the child care routines
 

00:16:00.230 --> 00:16:03.820
block and all of the child care routines
are both complete kuroh teens can

00:16:03.820 --> 00:16:03.830
are both complete kuroh teens can
 

00:16:03.830 --> 00:16:05.800
are both complete kuroh teens can
certainly make developing asynchronous

00:16:05.800 --> 00:16:05.810
certainly make developing asynchronous
 

00:16:05.810 --> 00:16:10.600
certainly make developing asynchronous
code a lot simpler so let's start by

00:16:10.600 --> 00:16:10.610
code a lot simpler so let's start by
 

00:16:10.610 --> 00:16:12.370
code a lot simpler so let's start by
implementing our first critical user

00:16:12.370 --> 00:16:12.380
implementing our first critical user
 

00:16:12.380 --> 00:16:16.540
implementing our first critical user
journey just to recap we start on the

00:16:16.540 --> 00:16:16.550
journey just to recap we start on the
 

00:16:16.550 --> 00:16:19.420
journey just to recap we start on the
home screen we click a floating action

00:16:19.420 --> 00:16:19.430
home screen we click a floating action
 

00:16:19.430 --> 00:16:20.950
home screen we click a floating action
button which takes us to the detail

00:16:20.950 --> 00:16:20.960
button which takes us to the detail
 

00:16:20.960 --> 00:16:25.860
button which takes us to the detail
screen here we enter text for a new task

00:16:25.860 --> 00:16:25.870
screen here we enter text for a new task
 

00:16:25.870 --> 00:16:28.540
screen here we enter text for a new task
save and we're back to the home screen

00:16:28.540 --> 00:16:28.550
save and we're back to the home screen
 

00:16:28.550 --> 00:16:33.780
save and we're back to the home screen
where we can see our newly created note

00:16:33.780 --> 00:16:33.790
 
 

00:16:33.790 --> 00:16:36.100
 
we're going to develop our application

00:16:36.100 --> 00:16:36.110
we're going to develop our application
 

00:16:36.110 --> 00:16:38.710
we're going to develop our application
using test-driven development and this

00:16:38.710 --> 00:16:38.720
using test-driven development and this
 

00:16:38.720 --> 00:16:40.540
using test-driven development and this
is a school of thought where we first

00:16:40.540 --> 00:16:40.550
is a school of thought where we first
 

00:16:40.550 --> 00:16:42.910
is a school of thought where we first
codify the specification of our

00:16:42.910 --> 00:16:42.920
codify the specification of our
 

00:16:42.920 --> 00:16:45.400
codify the specification of our
application in tests first of all and

00:16:45.400 --> 00:16:45.410
application in tests first of all and
 

00:16:45.410 --> 00:16:47.530
application in tests first of all and
only then do we write the production

00:16:47.530 --> 00:16:47.540
only then do we write the production
 

00:16:47.540 --> 00:16:49.630
only then do we write the production
code in order to satisfy that

00:16:49.630 --> 00:16:49.640
code in order to satisfy that
 

00:16:49.640 --> 00:16:52.960
code in order to satisfy that
specification we're also going to do all

00:16:52.960 --> 00:16:52.970
specification we're also going to do all
 

00:16:52.970 --> 00:16:55.030
specification we're also going to do all
this top-down starting from the

00:16:55.030 --> 00:16:55.040
this top-down starting from the
 

00:16:55.040 --> 00:16:57.790
this top-down starting from the
end-to-end test and in breaking this

00:16:57.790 --> 00:16:57.800
end-to-end test and in breaking this
 

00:16:57.800 --> 00:17:00.220
end-to-end test and in breaking this
down and decomposing further and further

00:17:00.220 --> 00:17:00.230
down and decomposing further and further
 

00:17:00.230 --> 00:17:02.470
down and decomposing further and further
until we finally reach the individual

00:17:02.470 --> 00:17:02.480
until we finally reach the individual
 

00:17:02.480 --> 00:17:05.440
until we finally reach the individual
units that are required to satisfy the

00:17:05.440 --> 00:17:05.450
units that are required to satisfy the
 

00:17:05.450 --> 00:17:09.520
units that are required to satisfy the
feature were building so let's start by

00:17:09.520 --> 00:17:09.530
feature were building so let's start by
 

00:17:09.530 --> 00:17:12.700
feature were building so let's start by
writing an end-to-end test it's going to

00:17:12.700 --> 00:17:12.710
writing an end-to-end test it's going to
 

00:17:12.710 --> 00:17:15.100
writing an end-to-end test it's going to
be failing first but we know that by the

00:17:15.100 --> 00:17:15.110
be failing first but we know that by the
 

00:17:15.110 --> 00:17:17.230
be failing first but we know that by the
time we make it pass our feature is

00:17:17.230 --> 00:17:17.240
time we make it pass our feature is
 

00:17:17.240 --> 00:17:20.110
time we make it pass our feature is
complete it's a good signal for the end

00:17:20.110 --> 00:17:20.120
complete it's a good signal for the end
 

00:17:20.120 --> 00:17:23.410
complete it's a good signal for the end
state let's review some key qualities of

00:17:23.410 --> 00:17:23.420
state let's review some key qualities of
 

00:17:23.420 --> 00:17:25.900
state let's review some key qualities of
end-to-end tests the main thing we're

00:17:25.900 --> 00:17:25.910
end-to-end tests the main thing we're
 

00:17:25.910 --> 00:17:27.820
end-to-end tests the main thing we're
looking for here is that we've got

00:17:27.820 --> 00:17:27.830
looking for here is that we've got
 

00:17:27.830 --> 00:17:30.640
looking for here is that we've got
confidence in the final application when

00:17:30.640 --> 00:17:30.650
confidence in the final application when
 

00:17:30.650 --> 00:17:31.770
confidence in the final application when
it's finished

00:17:31.770 --> 00:17:31.780
it's finished
 

00:17:31.780 --> 00:17:35.230
it's finished
therefore these kinds of tests should

00:17:35.230 --> 00:17:35.240
therefore these kinds of tests should
 

00:17:35.240 --> 00:17:38.580
therefore these kinds of tests should
run on a real or a virtual device

00:17:38.580 --> 00:17:38.590
run on a real or a virtual device
 

00:17:38.590 --> 00:17:41.409
run on a real or a virtual device
and to make sure that our code interacts

00:17:41.409 --> 00:17:41.419
and to make sure that our code interacts
 

00:17:41.419 --> 00:17:43.240
and to make sure that our code interacts
with the Android and Fire agreement as

00:17:43.240 --> 00:17:43.250
with the Android and Fire agreement as
 

00:17:43.250 --> 00:17:47.619
with the Android and Fire agreement as
expected our application should also

00:17:47.619 --> 00:17:47.629
expected our application should also
 

00:17:47.629 --> 00:17:49.419
expected our application should also
look as close to the final application

00:17:49.419 --> 00:17:49.429
look as close to the final application
 

00:17:49.429 --> 00:17:52.560
look as close to the final application
as possible that will go into ship and

00:17:52.560 --> 00:17:52.570
as possible that will go into ship and
 

00:17:52.570 --> 00:17:55.330
as possible that will go into ship and
we should test it in the very same way

00:17:55.330 --> 00:17:55.340
we should test it in the very same way
 

00:17:55.340 --> 00:17:56.440
we should test it in the very same way
that our users are going to interact

00:17:56.440 --> 00:17:56.450
that our users are going to interact
 

00:17:56.450 --> 00:17:59.080
that our users are going to interact
with it this means we're doing blackbox

00:17:59.080 --> 00:17:59.090
with it this means we're doing blackbox
 

00:17:59.090 --> 00:18:02.289
with it this means we're doing blackbox
testing and here we don't need to be

00:18:02.289 --> 00:18:02.299
testing and here we don't need to be
 

00:18:02.299 --> 00:18:04.899
testing and here we don't need to be
exhaustive with all the tests that's the

00:18:04.899 --> 00:18:04.909
exhaustive with all the tests that's the
 

00:18:04.909 --> 00:18:10.240
exhaustive with all the tests that's the
job of tests at other layers now let's

00:18:10.240 --> 00:18:10.250
job of tests at other layers now let's
 

00:18:10.250 --> 00:18:12.730
job of tests at other layers now let's
examine the scope of the code and see

00:18:12.730 --> 00:18:12.740
examine the scope of the code and see
 

00:18:12.740 --> 00:18:15.430
examine the scope of the code and see
what we know exercise in our test it

00:18:15.430 --> 00:18:15.440
what we know exercise in our test it
 

00:18:15.440 --> 00:18:18.570
what we know exercise in our test it
looks like for our our first test Coast

00:18:18.570 --> 00:18:18.580
looks like for our our first test Coast
 

00:18:18.580 --> 00:18:21.519
looks like for our our first test Coast
the add/edit task fragment screen and

00:18:21.519 --> 00:18:21.529
the add/edit task fragment screen and
 

00:18:21.529 --> 00:18:23.619
the add/edit task fragment screen and
the tasks fragment screen are what's

00:18:23.619 --> 00:18:23.629
the tasks fragment screen are what's
 

00:18:23.629 --> 00:18:25.419
the tasks fragment screen are what's
important so for this particular

00:18:25.419 --> 00:18:25.429
important so for this particular
 

00:18:25.429 --> 00:18:27.610
important so for this particular
end-to-end test we're just going to

00:18:27.610 --> 00:18:27.620
end-to-end test we're just going to
 

00:18:27.620 --> 00:18:29.769
end-to-end test we're just going to
discard ignore task details for the

00:18:29.769 --> 00:18:29.779
discard ignore task details for the
 

00:18:29.779 --> 00:18:34.840
discard ignore task details for the
moment we can start on the home screen

00:18:34.840 --> 00:18:34.850
moment we can start on the home screen
 

00:18:34.850 --> 00:18:37.389
moment we can start on the home screen
by using activity scenario to launch the

00:18:37.389 --> 00:18:37.399
by using activity scenario to launch the
 

00:18:37.399 --> 00:18:41.919
by using activity scenario to launch the
test activity class then we can click on

00:18:41.919 --> 00:18:41.929
test activity class then we can click on
 

00:18:41.929 --> 00:18:43.930
test activity class then we can click on
the floating action button which should

00:18:43.930 --> 00:18:43.940
the floating action button which should
 

00:18:43.940 --> 00:18:49.899
the floating action button which should
take us to the next screen and here we

00:18:49.899 --> 00:18:49.909
take us to the next screen and here we
 

00:18:49.909 --> 00:18:52.690
take us to the next screen and here we
can use espresso to enter text into the

00:18:52.690 --> 00:18:52.700
can use espresso to enter text into the
 

00:18:52.700 --> 00:18:56.230
can use espresso to enter text into the
detail screen and one more time with

00:18:56.230 --> 00:18:56.240
detail screen and one more time with
 

00:18:56.240 --> 00:18:58.480
detail screen and one more time with
espresso to click the button which is

00:18:58.480 --> 00:18:58.490
espresso to click the button which is
 

00:18:58.490 --> 00:19:01.799
espresso to click the button which is
send us back to the first screen and

00:19:01.799 --> 00:19:01.809
send us back to the first screen and
 

00:19:01.809 --> 00:19:05.680
send us back to the first screen and
here make a simple assertion to check

00:19:05.680 --> 00:19:05.690
here make a simple assertion to check
 

00:19:05.690 --> 00:19:08.529
here make a simple assertion to check
that the newly added task appears on the

00:19:08.529 --> 00:19:08.539
that the newly added task appears on the
 

00:19:08.539 --> 00:19:12.820
that the newly added task appears on the
home screen now we're not using any

00:19:12.820 --> 00:19:12.830
home screen now we're not using any
 

00:19:12.830 --> 00:19:17.039
home screen now we're not using any
special api's or any hooks or backdoors

00:19:17.039 --> 00:19:17.049
special api's or any hooks or backdoors
 

00:19:17.049 --> 00:19:20.340
special api's or any hooks or backdoors
this is known as blackbox testing and

00:19:20.340 --> 00:19:20.350
this is known as blackbox testing and
 

00:19:20.350 --> 00:19:22.210
this is known as blackbox testing and
interacting with the application this

00:19:22.210 --> 00:19:22.220
interacting with the application this
 

00:19:22.220 --> 00:19:25.570
interacting with the application this
way gives us the confidence it'll still

00:19:25.570 --> 00:19:25.580
way gives us the confidence it'll still
 

00:19:25.580 --> 00:19:27.940
way gives us the confidence it'll still
work if a real user were to step through

00:19:27.940 --> 00:19:27.950
work if a real user were to step through
 

00:19:27.950 --> 00:19:33.490
work if a real user were to step through
the flow in exactly the same way so now

00:19:33.490 --> 00:19:33.500
the flow in exactly the same way so now
 

00:19:33.500 --> 00:19:35.860
the flow in exactly the same way so now
we need to add some integration tests in

00:19:35.860 --> 00:19:35.870
we need to add some integration tests in
 

00:19:35.870 --> 00:19:37.659
we need to add some integration tests in
order to bridge the gap between those

00:19:37.659 --> 00:19:37.669
order to bridge the gap between those
 

00:19:37.669 --> 00:19:39.340
order to bridge the gap between those
large end-to-end tests that we've just

00:19:39.340 --> 00:19:39.350
large end-to-end tests that we've just
 

00:19:39.350 --> 00:19:41.639
large end-to-end tests that we've just
written and the smaller faster

00:19:41.639 --> 00:19:41.649
written and the smaller faster
 

00:19:41.649 --> 00:19:43.659
written and the smaller faster
exhaustive unit tests that we'll be

00:19:43.659 --> 00:19:43.669
exhaustive unit tests that we'll be
 

00:19:43.669 --> 00:19:47.230
exhaustive unit tests that we'll be
adding later here we're looking for

00:19:47.230 --> 00:19:47.240
adding later here we're looking for
 

00:19:47.240 --> 00:19:48.940
adding later here we're looking for
something that gives us a good clue that

00:19:48.940 --> 00:19:48.950
something that gives us a good clue that
 

00:19:48.950 --> 00:19:51.080
something that gives us a good clue that
all of the individual units

00:19:51.080 --> 00:19:51.090
all of the individual units
 

00:19:51.090 --> 00:19:53.210
all of the individual units
that were bringing together collaborate

00:19:53.210 --> 00:19:53.220
that were bringing together collaborate
 

00:19:53.220 --> 00:19:55.160
that were bringing together collaborate
as planned that's where the focus should

00:19:55.160 --> 00:19:55.170
as planned that's where the focus should
 

00:19:55.170 --> 00:19:58.460
as planned that's where the focus should
be here these tests should be relatively

00:19:58.460 --> 00:19:58.470
be here these tests should be relatively
 

00:19:58.470 --> 00:20:01.100
be here these tests should be relatively
scalable and providing enough coverage

00:20:01.100 --> 00:20:01.110
scalable and providing enough coverage
 

00:20:01.110 --> 00:20:03.350
scalable and providing enough coverage
at this level means we need to lean less

00:20:03.350 --> 00:20:03.360
at this level means we need to lean less
 

00:20:03.360 --> 00:20:05.360
at this level means we need to lean less
and less on those large heavyweight and

00:20:05.360 --> 00:20:05.370
and less on those large heavyweight and
 

00:20:05.370 --> 00:20:09.680
and less on those large heavyweight and
when tests here it's kind of less

00:20:09.680 --> 00:20:09.690
when tests here it's kind of less
 

00:20:09.690 --> 00:20:11.480
when tests here it's kind of less
important that we're using all real

00:20:11.480 --> 00:20:11.490
important that we're using all real
 

00:20:11.490 --> 00:20:14.870
important that we're using all real
components and it's okay to make to just

00:20:14.870 --> 00:20:14.880
components and it's okay to make to just
 

00:20:14.880 --> 00:20:19.880
components and it's okay to make to just
judicious use of testing api's but what

00:20:19.880 --> 00:20:19.890
judicious use of testing api's but what
 

00:20:19.890 --> 00:20:21.530
judicious use of testing api's but what
exactly kind of test should we be

00:20:21.530 --> 00:20:21.540
exactly kind of test should we be
 

00:20:21.540 --> 00:20:26.300
exactly kind of test should we be
writing at this level when we introduce

00:20:26.300 --> 00:20:26.310
writing at this level when we introduce
 

00:20:26.310 --> 00:20:28.640
writing at this level when we introduce
scope earlier in a session we define it

00:20:28.640 --> 00:20:28.650
scope earlier in a session we define it
 

00:20:28.650 --> 00:20:29.960
scope earlier in a session we define it
as the amount of real code that's

00:20:29.960 --> 00:20:29.970
as the amount of real code that's
 

00:20:29.970 --> 00:20:32.750
as the amount of real code that's
exercised by the test and in the

00:20:32.750 --> 00:20:32.760
exercised by the test and in the
 

00:20:32.760 --> 00:20:34.400
exercised by the test and in the
end-to-end test we've already seen that

00:20:34.400 --> 00:20:34.410
end-to-end test we've already seen that
 

00:20:34.410 --> 00:20:37.280
end-to-end test we've already seen that
scopes pretty large with integration

00:20:37.280 --> 00:20:37.290
scopes pretty large with integration
 

00:20:37.290 --> 00:20:40.160
scopes pretty large with integration
tests it's a little more nuanced luckily

00:20:40.160 --> 00:20:40.170
tests it's a little more nuanced luckily
 

00:20:40.170 --> 00:20:42.320
tests it's a little more nuanced luckily
our architecture and code organization

00:20:42.320 --> 00:20:42.330
our architecture and code organization
 

00:20:42.330 --> 00:20:44.540
our architecture and code organization
leads us straight to some good

00:20:44.540 --> 00:20:44.550
leads us straight to some good
 

00:20:44.550 --> 00:20:47.420
leads us straight to some good
candidates let's approach this by

00:20:47.420 --> 00:20:47.430
candidates let's approach this by
 

00:20:47.430 --> 00:20:50.900
candidates let's approach this by
decomposition if the previous end-to-end

00:20:50.900 --> 00:20:50.910
decomposition if the previous end-to-end
 

00:20:50.910 --> 00:20:53.870
decomposition if the previous end-to-end
tests just focused on the edited task

00:20:53.870 --> 00:20:53.880
tests just focused on the edited task
 

00:20:53.880 --> 00:20:56.450
tests just focused on the edited task
fragment screen and the tasks fragment

00:20:56.450 --> 00:20:56.460
fragment screen and the tasks fragment
 

00:20:56.460 --> 00:20:59.570
fragment screen and the tasks fragment
screen we already know that this next

00:20:59.570 --> 00:20:59.580
screen we already know that this next
 

00:20:59.580 --> 00:21:01.460
screen we already know that this next
integration test has got to be a smaller

00:21:01.460 --> 00:21:01.470
integration test has got to be a smaller
 

00:21:01.470 --> 00:21:04.550
integration test has got to be a smaller
scope than that and looking at our

00:21:04.550 --> 00:21:04.560
scope than that and looking at our
 

00:21:04.560 --> 00:21:07.160
scope than that and looking at our
architecture diagram I can already see

00:21:07.160 --> 00:21:07.170
architecture diagram I can already see
 

00:21:07.170 --> 00:21:11.960
architecture diagram I can already see
the first candidate let's start by

00:21:11.960 --> 00:21:11.970
the first candidate let's start by
 

00:21:11.970 --> 00:21:14.000
the first candidate let's start by
writing an integration tests for the

00:21:14.000 --> 00:21:14.010
writing an integration tests for the
 

00:21:14.010 --> 00:21:16.100
writing an integration tests for the
entire tech stack that supports the add

00:21:16.100 --> 00:21:16.110
entire tech stack that supports the add
 

00:21:16.110 --> 00:21:20.330
entire tech stack that supports the add
new task stream so we remove the task

00:21:20.330 --> 00:21:20.340
new task stream so we remove the task
 

00:21:20.340 --> 00:21:23.360
new task stream so we remove the task
list screen from the equation do you see

00:21:23.360 --> 00:21:23.370
list screen from the equation do you see
 

00:21:23.370 --> 00:21:25.610
list screen from the equation do you see
any other candidates here where we might

00:21:25.610 --> 00:21:25.620
any other candidates here where we might
 

00:21:25.620 --> 00:21:31.040
any other candidates here where we might
want to limit their scope of some of the

00:21:31.040 --> 00:21:31.050
want to limit their scope of some of the
 

00:21:31.050 --> 00:21:32.690
want to limit their scope of some of the
objects in the scope of your test might

00:21:32.690 --> 00:21:32.700
objects in the scope of your test might
 

00:21:32.700 --> 00:21:34.900
objects in the scope of your test might
have some undesirable characteristics

00:21:34.900 --> 00:21:34.910
have some undesirable characteristics
 

00:21:34.910 --> 00:21:38.660
have some undesirable characteristics
perhaps one of them is too slow maybe it

00:21:38.660 --> 00:21:38.670
perhaps one of them is too slow maybe it
 

00:21:38.670 --> 00:21:42.260
perhaps one of them is too slow maybe it
reads a large file at startup perhaps

00:21:42.260 --> 00:21:42.270
reads a large file at startup perhaps
 

00:21:42.270 --> 00:21:43.520
reads a large file at startup perhaps
another is a really heavyweight

00:21:43.520 --> 00:21:43.530
another is a really heavyweight
 

00:21:43.530 --> 00:21:45.200
another is a really heavyweight
dependency that takes a long time to

00:21:45.200 --> 00:21:45.210
dependency that takes a long time to
 

00:21:45.210 --> 00:21:48.830
dependency that takes a long time to
build perhaps it makes an arbitrary

00:21:48.830 --> 00:21:48.840
build perhaps it makes an arbitrary
 

00:21:48.840 --> 00:21:51.140
build perhaps it makes an arbitrary
network connections causing our test to

00:21:51.140 --> 00:21:51.150
network connections causing our test to
 

00:21:51.150 --> 00:21:55.580
network connections causing our test to
be flaky and some dependencies they just

00:21:55.580 --> 00:21:55.590
be flaky and some dependencies they just
 

00:21:55.590 --> 00:21:57.530
be flaky and some dependencies they just
can't be controlled in the way that we

00:21:57.530 --> 00:21:57.540
can't be controlled in the way that we
 

00:21:57.540 --> 00:22:00.769
can't be controlled in the way that we
need to simulate within our tests

00:22:00.769 --> 00:22:00.779
need to simulate within our tests
 

00:22:00.779 --> 00:22:04.049
need to simulate within our tests
in such cases you may want to consider

00:22:04.049 --> 00:22:04.059
in such cases you may want to consider
 

00:22:04.059 --> 00:22:06.449
in such cases you may want to consider
replacing that original dependency with

00:22:06.449 --> 00:22:06.459
replacing that original dependency with
 

00:22:06.459 --> 00:22:09.509
replacing that original dependency with
a test double test doubles our standings

00:22:09.509 --> 00:22:09.519
a test double test doubles our standings
 

00:22:09.519 --> 00:22:12.449
a test double test doubles our standings
for the real objects there are several

00:22:12.449 --> 00:22:12.459
for the real objects there are several
 

00:22:12.459 --> 00:22:16.469
for the real objects there are several
categories of test doubles each of them

00:22:16.469 --> 00:22:16.479
categories of test doubles each of them
 

00:22:16.479 --> 00:22:20.999
categories of test doubles each of them
range in fidelity dummies these are just

00:22:20.999 --> 00:22:21.009
range in fidelity dummies these are just
 

00:22:21.009 --> 00:22:23.219
range in fidelity dummies these are just
intended for stand-in for the real

00:22:23.219 --> 00:22:23.229
intended for stand-in for the real
 

00:22:23.229 --> 00:22:26.570
intended for stand-in for the real
behavior just to satisfy dependencies

00:22:26.570 --> 00:22:26.580
behavior just to satisfy dependencies
 

00:22:26.580 --> 00:22:30.149
behavior just to satisfy dependencies
then stubs which aim to offer one-off

00:22:30.149 --> 00:22:30.159
then stubs which aim to offer one-off
 

00:22:30.159 --> 00:22:32.279
then stubs which aim to offer one-off
specific behavior that allow you to

00:22:32.279 --> 00:22:32.289
specific behavior that allow you to
 

00:22:32.289 --> 00:22:34.609
specific behavior that allow you to
configure it for the needs of your test

00:22:34.609 --> 00:22:34.619
configure it for the needs of your test
 

00:22:34.619 --> 00:22:37.019
configure it for the needs of your test
either these could be hand rolled or

00:22:37.019 --> 00:22:37.029
either these could be hand rolled or
 

00:22:37.029 --> 00:22:39.149
either these could be hand rolled or
they could be provided by your mocking

00:22:39.149 --> 00:22:39.159
they could be provided by your mocking
 

00:22:39.159 --> 00:22:43.739
they could be provided by your mocking
libraries such as mojito or consider

00:22:43.739 --> 00:22:43.749
libraries such as mojito or consider
 

00:22:43.749 --> 00:22:45.719
libraries such as mojito or consider
fakes which aim to be a more accurate

00:22:45.719 --> 00:22:45.729
fakes which aim to be a more accurate
 

00:22:45.729 --> 00:22:47.819
fakes which aim to be a more accurate
yet lightweight substitute for the real

00:22:47.819 --> 00:22:47.829
yet lightweight substitute for the real
 

00:22:47.829 --> 00:22:51.449
yet lightweight substitute for the real
thing and you may be surprised to still

00:22:51.449 --> 00:22:51.459
thing and you may be surprised to still
 

00:22:51.459 --> 00:22:54.899
thing and you may be surprised to still
see real objects up here sometimes

00:22:54.899 --> 00:22:54.909
see real objects up here sometimes
 

00:22:54.909 --> 00:22:56.579
see real objects up here sometimes
though it makes sense to use real

00:22:56.579 --> 00:22:56.589
though it makes sense to use real
 

00:22:56.589 --> 00:22:59.310
though it makes sense to use real
objects in your tests if it avoids any

00:22:59.310 --> 00:22:59.320
objects in your tests if it avoids any
 

00:22:59.320 --> 00:23:01.019
objects in your tests if it avoids any
of those criteria that we consider

00:23:01.019 --> 00:23:01.029
of those criteria that we consider
 

00:23:01.029 --> 00:23:03.810
of those criteria that we consider
before and where it makes the test more

00:23:03.810 --> 00:23:03.820
before and where it makes the test more
 

00:23:03.820 --> 00:23:06.859
before and where it makes the test more
readable and robust over the alternative

00:23:06.859 --> 00:23:06.869
readable and robust over the alternative
 

00:23:06.869 --> 00:23:09.509
readable and robust over the alternative
value objects are just one example of

00:23:09.509 --> 00:23:09.519
value objects are just one example of
 

00:23:09.519 --> 00:23:11.669
value objects are just one example of
where you should always prefer using a

00:23:11.669 --> 00:23:11.679
where you should always prefer using a
 

00:23:11.679 --> 00:23:18.329
where you should always prefer using a
real object taking a closer look then

00:23:18.329 --> 00:23:18.339
real object taking a closer look then
 

00:23:18.339 --> 00:23:20.310
real object taking a closer look then
now some candidates where we might want

00:23:20.310 --> 00:23:20.320
now some candidates where we might want
 

00:23:20.320 --> 00:23:23.029
now some candidates where we might want
to start increasing removing the scope

00:23:23.029 --> 00:23:23.039
to start increasing removing the scope
 

00:23:23.039 --> 00:23:25.379
to start increasing removing the scope
we could drive our tests through task

00:23:25.379 --> 00:23:25.389
we could drive our tests through task
 

00:23:25.389 --> 00:23:28.379
we could drive our tests through task
activity but this is concerned with the

00:23:28.379 --> 00:23:28.389
activity but this is concerned with the
 

00:23:28.389 --> 00:23:30.479
activity but this is concerned with the
navigation between screens and we don't

00:23:30.479 --> 00:23:30.489
navigation between screens and we don't
 

00:23:30.489 --> 00:23:32.519
navigation between screens and we don't
need to test this at this level that's

00:23:32.519 --> 00:23:32.529
need to test this at this level that's
 

00:23:32.529 --> 00:23:35.430
need to test this at this level that's
more of an end-to-end test so instead

00:23:35.430 --> 00:23:35.440
more of an end-to-end test so instead
 

00:23:35.440 --> 00:23:37.799
more of an end-to-end test so instead
we're gonna reach for fragment scenario

00:23:37.799 --> 00:23:37.809
we're gonna reach for fragment scenario
 

00:23:37.809 --> 00:23:40.259
we're gonna reach for fragment scenario
and use this press o to test the UI

00:23:40.259 --> 00:23:40.269
and use this press o to test the UI
 

00:23:40.269 --> 00:23:43.379
and use this press o to test the UI
directly we're going to need to switch

00:23:43.379 --> 00:23:43.389
directly we're going to need to switch
 

00:23:43.389 --> 00:23:45.359
directly we're going to need to switch
in a test double for our navigation

00:23:45.359 --> 00:23:45.369
in a test double for our navigation
 

00:23:45.369 --> 00:23:49.619
in a test double for our navigation
controller however and we can use this

00:23:49.619 --> 00:23:49.629
controller however and we can use this
 

00:23:49.629 --> 00:23:52.049
controller however and we can use this
to verify that our navigation is working

00:23:52.049 --> 00:23:52.059
to verify that our navigation is working
 

00:23:52.059 --> 00:23:54.169
to verify that our navigation is working
as expected

00:23:54.169 --> 00:23:54.179
as expected
 

00:23:54.179 --> 00:23:57.359
as expected
tasks repository it presents a clear and

00:23:57.359 --> 00:23:57.369
tasks repository it presents a clear and
 

00:23:57.369 --> 00:24:00.060
tasks repository it presents a clear and
well-defined API to all the layers above

00:24:00.060 --> 00:24:00.070
well-defined API to all the layers above
 

00:24:00.070 --> 00:24:02.969
well-defined API to all the layers above
so it's good practice to make use of

00:24:02.969 --> 00:24:02.979
so it's good practice to make use of
 

00:24:02.979 --> 00:24:05.729
so it's good practice to make use of
this API from tests and to use that to

00:24:05.729 --> 00:24:05.739
this API from tests and to use that to
 

00:24:05.739 --> 00:24:08.339
this API from tests and to use that to
check to see if our tests had saved the

00:24:08.339 --> 00:24:08.349
check to see if our tests had saved the
 

00:24:08.349 --> 00:24:12.479
check to see if our tests had saved the
task correctly but look including a

00:24:12.479 --> 00:24:12.489
task correctly but look including a
 

00:24:12.489 --> 00:24:13.330
task correctly but look including a
remote data

00:24:13.330 --> 00:24:13.340
remote data
 

00:24:13.340 --> 00:24:14.950
remote data
which connects to an external server

00:24:14.950 --> 00:24:14.960
which connects to an external server
 

00:24:14.960 --> 00:24:16.960
which connects to an external server
that's gonna make our tests slow and

00:24:16.960 --> 00:24:16.970
that's gonna make our tests slow and
 

00:24:16.970 --> 00:24:20.170
that's gonna make our tests slow and
flaky so let's switch that out also for

00:24:20.170 --> 00:24:20.180
flaky so let's switch that out also for
 

00:24:20.180 --> 00:24:26.500
flaky so let's switch that out also for
a test double so first we're using

00:24:26.500 --> 00:24:26.510
a test double so first we're using
 

00:24:26.510 --> 00:24:30.960
a test double so first we're using
fragment scenario to launch our fragment

00:24:30.960 --> 00:24:30.970
fragment scenario to launch our fragment
 

00:24:30.970 --> 00:24:33.220
fragment scenario to launch our fragment
and we need to verify that our floating

00:24:33.220 --> 00:24:33.230
and we need to verify that our floating
 

00:24:33.230 --> 00:24:34.990
and we need to verify that our floating
action button sends us to the right

00:24:34.990 --> 00:24:35.000
action button sends us to the right
 

00:24:35.000 --> 00:24:37.720
action button sends us to the right
screen and the navigation controller

00:24:37.720 --> 00:24:37.730
screen and the navigation controller
 

00:24:37.730 --> 00:24:40.930
screen and the navigation controller
handles this kind of thing we don't

00:24:40.930 --> 00:24:40.940
handles this kind of thing we don't
 

00:24:40.940 --> 00:24:42.490
handles this kind of thing we don't
actually need to go to that new screen

00:24:42.490 --> 00:24:42.500
actually need to go to that new screen
 

00:24:42.500 --> 00:24:45.190
actually need to go to that new screen
for this kind of test we just need to

00:24:45.190 --> 00:24:45.200
for this kind of test we just need to
 

00:24:45.200 --> 00:24:48.760
for this kind of test we just need to
record that we went there so we can swap

00:24:48.760 --> 00:24:48.770
record that we went there so we can swap
 

00:24:48.770 --> 00:24:50.440
record that we went there so we can swap
out the navigation controller for a test

00:24:50.440 --> 00:24:50.450
out the navigation controller for a test
 

00:24:50.450 --> 00:24:53.170
out the navigation controller for a test
double there isn't actually a fake

00:24:53.170 --> 00:24:53.180
double there isn't actually a fake
 

00:24:53.180 --> 00:24:55.840
double there isn't actually a fake
version provided so in this case I think

00:24:55.840 --> 00:24:55.850
version provided so in this case I think
 

00:24:55.850 --> 00:24:58.030
version provided so in this case I think
it's perfectly acceptable just to ship

00:24:58.030 --> 00:24:58.040
it's perfectly acceptable just to ship
 

00:24:58.040 --> 00:25:04.090
it's perfectly acceptable just to ship
in a mock like this and now we can use

00:25:04.090 --> 00:25:04.100
in a mock like this and now we can use
 

00:25:04.100 --> 00:25:06.070
in a mock like this and now we can use
the espresso api's to enter some text in

00:25:06.070 --> 00:25:06.080
the espresso api's to enter some text in
 

00:25:06.080 --> 00:25:09.370
the espresso api's to enter some text in
the fields as we did before clicking the

00:25:09.370 --> 00:25:09.380
the fields as we did before clicking the
 

00:25:09.380 --> 00:25:12.120
the fields as we did before clicking the
floating action button to save the tasks

00:25:12.120 --> 00:25:12.130
floating action button to save the tasks
 

00:25:12.130 --> 00:25:15.970
floating action button to save the tasks
and for the final part of the test we

00:25:15.970 --> 00:25:15.980
and for the final part of the test we
 

00:25:15.980 --> 00:25:19.540
and for the final part of the test we
need to check two things first what the

00:25:19.540 --> 00:25:19.550
need to check two things first what the
 

00:25:19.550 --> 00:25:22.570
need to check two things first what the
tasks save correctly so we can do this

00:25:22.570 --> 00:25:22.580
tasks save correctly so we can do this
 

00:25:22.580 --> 00:25:24.910
tasks save correctly so we can do this
by obtaining the tasks service or the

00:25:24.910 --> 00:25:24.920
by obtaining the tasks service or the
 

00:25:24.920 --> 00:25:26.290
by obtaining the tasks service or the
tasks repository from the service

00:25:26.290 --> 00:25:26.300
tasks repository from the service
 

00:25:26.300 --> 00:25:29.980
tasks repository from the service
locator and we can use its api's to get

00:25:29.980 --> 00:25:29.990
locator and we can use its api's to get
 

00:25:29.990 --> 00:25:32.970
locator and we can use its api's to get
a list of the tasks that were saved and

00:25:32.970 --> 00:25:32.980
a list of the tasks that were saved and
 

00:25:32.980 --> 00:25:37.150
a list of the tasks that were saved and
then we can make sure it contains one

00:25:37.150 --> 00:25:37.160
then we can make sure it contains one
 

00:25:37.160 --> 00:25:39.400
then we can make sure it contains one
that was saved the match is the one we

00:25:39.400 --> 00:25:39.410
that was saved the match is the one we
 

00:25:39.410 --> 00:25:44.500
that was saved the match is the one we
tried to save through the UI the next

00:25:44.500 --> 00:25:44.510
tried to save through the UI the next
 

00:25:44.510 --> 00:25:46.870
tried to save through the UI the next
assertion is did we get back to the

00:25:46.870 --> 00:25:46.880
assertion is did we get back to the
 

00:25:46.880 --> 00:25:49.960
assertion is did we get back to the
right screen okay we can check with our

00:25:49.960 --> 00:25:49.970
right screen okay we can check with our
 

00:25:49.970 --> 00:25:52.030
right screen okay we can check with our
mark navigation controller to make sure

00:25:52.030 --> 00:25:52.040
mark navigation controller to make sure
 

00:25:52.040 --> 00:25:53.830
mark navigation controller to make sure
that the right navigation event was sent

00:25:53.830 --> 00:25:53.840
that the right navigation event was sent
 

00:25:53.840 --> 00:25:55.810
that the right navigation event was sent
that would have directed us to the right

00:25:55.810 --> 00:25:55.820
that would have directed us to the right
 

00:25:55.820 --> 00:26:00.880
that would have directed us to the right
screen

00:26:00.880 --> 00:26:00.890
 
 

00:26:00.890 --> 00:26:03.310
 
and we can be composed further and look

00:26:03.310 --> 00:26:03.320
and we can be composed further and look
 

00:26:03.320 --> 00:26:04.840
and we can be composed further and look
for other ways that we may want to limit

00:26:04.840 --> 00:26:04.850
for other ways that we may want to limit
 

00:26:04.850 --> 00:26:08.470
for other ways that we may want to limit
scope in order to create smaller and

00:26:08.470 --> 00:26:08.480
scope in order to create smaller and
 

00:26:08.480 --> 00:26:11.560
scope in order to create smaller and
smaller integration tests let's take

00:26:11.560 --> 00:26:11.570
smaller integration tests let's take
 

00:26:11.570 --> 00:26:14.140
smaller integration tests let's take
test repository for example it resent it

00:26:14.140 --> 00:26:14.150
test repository for example it resent it
 

00:26:14.150 --> 00:26:16.270
test repository for example it resent it
represents our model it's got a well

00:26:16.270 --> 00:26:16.280
represents our model it's got a well
 

00:26:16.280 --> 00:26:18.789
represents our model it's got a well
defined API that supports all the tasks

00:26:18.789 --> 00:26:18.799
defined API that supports all the tasks
 

00:26:18.799 --> 00:26:21.310
defined API that supports all the tasks
UI features as well as features in other

00:26:21.310 --> 00:26:21.320
UI features as well as features in other
 

00:26:21.320 --> 00:26:23.610
UI features as well as features in other
modules like the progress module and

00:26:23.610 --> 00:26:23.620
modules like the progress module and
 

00:26:23.620 --> 00:26:26.110
modules like the progress module and
it's also likely to contain large

00:26:26.110 --> 00:26:26.120
it's also likely to contain large
 

00:26:26.120 --> 00:26:28.870
it's also likely to contain large
amounts of complexity and business value

00:26:28.870 --> 00:26:28.880
amounts of complexity and business value
 

00:26:28.880 --> 00:26:30.640
amounts of complexity and business value
and includes a good deal of

00:26:30.640 --> 00:26:30.650
and includes a good deal of
 

00:26:30.650 --> 00:26:32.919
and includes a good deal of
collaborators and this makes it a great

00:26:32.919 --> 00:26:32.929
collaborators and this makes it a great
 

00:26:32.929 --> 00:26:34.600
collaborators and this makes it a great
candidate for covering with an

00:26:34.600 --> 00:26:34.610
candidate for covering with an
 

00:26:34.610 --> 00:26:37.810
candidate for covering with an
integration test so let's remove all of

00:26:37.810 --> 00:26:37.820
integration test so let's remove all of
 

00:26:37.820 --> 00:26:41.740
integration test so let's remove all of
the UI from the scope of this test now

00:26:41.740 --> 00:26:41.750
the UI from the scope of this test now
 

00:26:41.750 --> 00:26:43.990
the UI from the scope of this test now
we can proceed to directly test this

00:26:43.990 --> 00:26:44.000
we can proceed to directly test this
 

00:26:44.000 --> 00:26:46.090
we can proceed to directly test this
well-defined API of our task repository

00:26:46.090 --> 00:26:46.100
well-defined API of our task repository
 

00:26:46.100 --> 00:26:48.880
well-defined API of our task repository
and here we'll make similar choices when

00:26:48.880 --> 00:26:48.890
and here we'll make similar choices when
 

00:26:48.890 --> 00:26:50.860
and here we'll make similar choices when
it comes to fidelity telematic

00:26:50.860 --> 00:26:50.870
it comes to fidelity telematic
 

00:26:50.870 --> 00:26:53.409
it comes to fidelity telematic
principles and speed trade-offs just

00:26:53.409 --> 00:26:53.419
principles and speed trade-offs just
 

00:26:53.419 --> 00:26:57.100
principles and speed trade-offs just
like we did in the last test we'll keep

00:26:57.100 --> 00:26:57.110
like we did in the last test we'll keep
 

00:26:57.110 --> 00:26:58.870
like we did in the last test we'll keep
using a fake to stand in for the real

00:26:58.870 --> 00:26:58.880
using a fake to stand in for the real
 

00:26:58.880 --> 00:27:01.539
using a fake to stand in for the real
data source and as well as providing us

00:27:01.539 --> 00:27:01.549
data source and as well as providing us
 

00:27:01.549 --> 00:27:03.789
data source and as well as providing us
for repeatable tests a fake here allows

00:27:03.789 --> 00:27:03.799
for repeatable tests a fake here allows
 

00:27:03.799 --> 00:27:06.100
for repeatable tests a fake here allows
us to configure all kinds of test data

00:27:06.100 --> 00:27:06.110
us to configure all kinds of test data
 

00:27:06.110 --> 00:27:08.770
us to configure all kinds of test data
sets that we might want to wire up for

00:27:08.770 --> 00:27:08.780
sets that we might want to wire up for
 

00:27:08.780 --> 00:27:10.450
sets that we might want to wire up for
certain conditions testing in different

00:27:10.450 --> 00:27:10.460
certain conditions testing in different
 

00:27:10.460 --> 00:27:14.080
certain conditions testing in different
ways having a well-defined API the model

00:27:14.080 --> 00:27:14.090
ways having a well-defined API the model
 

00:27:14.090 --> 00:27:15.880
ways having a well-defined API the model
layer also allows us to do something

00:27:15.880 --> 00:27:15.890
layer also allows us to do something
 

00:27:15.890 --> 00:27:19.750
layer also allows us to do something
else that's really cool what if we take

00:27:19.750 --> 00:27:19.760
else that's really cool what if we take
 

00:27:19.760 --> 00:27:22.270
else that's really cool what if we take
our task repository and extract away an

00:27:22.270 --> 00:27:22.280
our task repository and extract away an
 

00:27:22.280 --> 00:27:26.169
our task repository and extract away an
interface now we can create a fake

00:27:26.169 --> 00:27:26.179
interface now we can create a fake
 

00:27:26.179 --> 00:27:29.500
interface now we can create a fake
version and by running the same test

00:27:29.500 --> 00:27:29.510
version and by running the same test
 

00:27:29.510 --> 00:27:31.720
version and by running the same test
against the fake that we run against our

00:27:31.720 --> 00:27:31.730
against the fake that we run against our
 

00:27:31.730 --> 00:27:35.440
against the fake that we run against our
production repository our fate becomes a

00:27:35.440 --> 00:27:35.450
production repository our fate becomes a
 

00:27:35.450 --> 00:27:37.960
production repository our fate becomes a
verified fake and what we're doing is

00:27:37.960 --> 00:27:37.970
verified fake and what we're doing is
 

00:27:37.970 --> 00:27:40.360
verified fake and what we're doing is
guaranteeing its behavior meets the same

00:27:40.360 --> 00:27:40.370
guaranteeing its behavior meets the same
 

00:27:40.370 --> 00:27:43.330
guaranteeing its behavior meets the same
specification as our real production

00:27:43.330 --> 00:27:43.340
specification as our real production
 

00:27:43.340 --> 00:27:47.080
specification as our real production
code and if we create separate modules

00:27:47.080 --> 00:27:47.090
code and if we create separate modules
 

00:27:47.090 --> 00:27:49.870
code and if we create separate modules
for both our api's and our fakes

00:27:49.870 --> 00:27:49.880
for both our api's and our fakes
 

00:27:49.880 --> 00:27:52.600
for both our api's and our fakes
other modules that we interact with will

00:27:52.600 --> 00:27:52.610
other modules that we interact with will
 

00:27:52.610 --> 00:27:54.789
other modules that we interact with will
seed faster build times and more

00:27:54.789 --> 00:27:54.799
seed faster build times and more
 

00:27:54.799 --> 00:27:58.090
seed faster build times and more
lightweight tests so here we have a fate

00:27:58.090 --> 00:27:58.100
lightweight tests so here we have a fate
 

00:27:58.100 --> 00:27:59.620
lightweight tests so here we have a fate
for our model layer that were confident

00:27:59.620 --> 00:27:59.630
for our model layer that were confident
 

00:27:59.630 --> 00:28:01.720
for our model layer that were confident
in and we can start to use it in other

00:28:01.720 --> 00:28:01.730
in and we can start to use it in other
 

00:28:01.730 --> 00:28:05.289
in and we can start to use it in other
tests coming back to the first

00:28:05.289 --> 00:28:05.299
tests coming back to the first
 

00:28:05.299 --> 00:28:07.000
tests coming back to the first
integration test we wrote for the

00:28:07.000 --> 00:28:07.010
integration test we wrote for the
 

00:28:07.010 --> 00:28:08.580
integration test we wrote for the
add/edit task cream

00:28:08.580 --> 00:28:08.590
add/edit task cream
 

00:28:08.590 --> 00:28:10.540
add/edit task cream
we could have equally written this

00:28:10.540 --> 00:28:10.550
we could have equally written this
 

00:28:10.550 --> 00:28:12.340
we could have equally written this
integration test with a fake task

00:28:12.340 --> 00:28:12.350
integration test with a fake task
 

00:28:12.350 --> 00:28:13.520
integration test with a fake task
repository

00:28:13.520 --> 00:28:13.530
repository
 

00:28:13.530 --> 00:28:16.160
repository
we trust our fake because it's a

00:28:16.160 --> 00:28:16.170
we trust our fake because it's a
 

00:28:16.170 --> 00:28:19.160
we trust our fake because it's a
verified fake and it's really fast - it

00:28:19.160 --> 00:28:19.170
verified fake and it's really fast - it
 

00:28:19.170 --> 00:28:20.780
verified fake and it's really fast - it
probably stores its data in an in-memory

00:28:20.780 --> 00:28:20.790
probably stores its data in an in-memory
 

00:28:20.790 --> 00:28:24.440
probably stores its data in an in-memory
hash map we can apply that same testing

00:28:24.440 --> 00:28:24.450
hash map we can apply that same testing
 

00:28:24.450 --> 00:28:25.850
hash map we can apply that same testing
blueprint across all of the other

00:28:25.850 --> 00:28:25.860
blueprint across all of the other
 

00:28:25.860 --> 00:28:28.420
blueprint across all of the other
modules in the tasks UI

00:28:28.420 --> 00:28:28.430
modules in the tasks UI
 

00:28:28.430 --> 00:28:31.550
modules in the tasks UI
these UI models modules are another

00:28:31.550 --> 00:28:31.560
these UI models modules are another
 

00:28:31.560 --> 00:28:33.440
these UI models modules are another
group of components whose integration

00:28:33.440 --> 00:28:33.450
group of components whose integration
 

00:28:33.450 --> 00:28:36.170
group of components whose integration
were really concerned with we want to be

00:28:36.170 --> 00:28:36.180
were really concerned with we want to be
 

00:28:36.180 --> 00:28:37.790
were really concerned with we want to be
sure that view models collaborate

00:28:37.790 --> 00:28:37.800
sure that view models collaborate
 

00:28:37.800 --> 00:28:39.710
sure that view models collaborate
correctly with our fragments is our data

00:28:39.710 --> 00:28:39.720
correctly with our fragments is our data
 

00:28:39.720 --> 00:28:42.020
correctly with our fragments is our data
binding wired up our all the possible

00:28:42.020 --> 00:28:42.030
binding wired up our all the possible
 

00:28:42.030 --> 00:28:44.170
binding wired up our all the possible
input validation cases handled correctly

00:28:44.170 --> 00:28:44.180
input validation cases handled correctly
 

00:28:44.180 --> 00:28:50.360
input validation cases handled correctly
and unit tests these verify the

00:28:50.360 --> 00:28:50.370
and unit tests these verify the
 

00:28:50.370 --> 00:28:52.210
and unit tests these verify the
operations of very small units of code

00:28:52.210 --> 00:28:52.220
operations of very small units of code
 

00:28:52.220 --> 00:28:55.250
operations of very small units of code
the scope of these kinds of tests is as

00:28:55.250 --> 00:28:55.260
the scope of these kinds of tests is as
 

00:28:55.260 --> 00:28:57.440
the scope of these kinds of tests is as
small as possible so the code can be

00:28:57.440 --> 00:28:57.450
small as possible so the code can be
 

00:28:57.450 --> 00:29:00.500
small as possible so the code can be
tested exco exhaustively and give very

00:29:00.500 --> 00:29:00.510
tested exco exhaustively and give very
 

00:29:00.510 --> 00:29:02.840
tested exco exhaustively and give very
fast and very specific feedback on

00:29:02.840 --> 00:29:02.850
fast and very specific feedback on
 

00:29:02.850 --> 00:29:06.320
fast and very specific feedback on
failures a large project is going to

00:29:06.320 --> 00:29:06.330
failures a large project is going to
 

00:29:06.330 --> 00:29:08.090
failures a large project is going to
have thousands of these so they should

00:29:08.090 --> 00:29:08.100
have thousands of these so they should
 

00:29:08.100 --> 00:29:11.660
have thousands of these so they should
run in milliseconds it's totally ok to

00:29:11.660 --> 00:29:11.670
run in milliseconds it's totally ok to
 

00:29:11.670 --> 00:29:14.480
run in milliseconds it's totally ok to
swap out production dependencies but

00:29:14.480 --> 00:29:14.490
swap out production dependencies but
 

00:29:14.490 --> 00:29:16.190
swap out production dependencies but
they should still be black box in nature

00:29:16.190 --> 00:29:16.200
they should still be black box in nature
 

00:29:16.200 --> 00:29:18.470
they should still be black box in nature
we want to be testing behavior not

00:29:18.470 --> 00:29:18.480
we want to be testing behavior not
 

00:29:18.480 --> 00:29:23.060
we want to be testing behavior not
implementation and the line between the

00:29:23.060 --> 00:29:23.070
implementation and the line between the
 

00:29:23.070 --> 00:29:24.530
implementation and the line between the
categories of tests here can get a

00:29:24.530 --> 00:29:24.540
categories of tests here can get a
 

00:29:24.540 --> 00:29:27.620
categories of tests here can get a
little blurry let's consider writing a

00:29:27.620 --> 00:29:27.630
little blurry let's consider writing a
 

00:29:27.630 --> 00:29:31.400
little blurry let's consider writing a
task for our tasks local datastore tests

00:29:31.400 --> 00:29:31.410
task for our tasks local datastore tests
 

00:29:31.410 --> 00:29:33.590
task for our tasks local datastore tests
local datastore takes a desk tasks Tao

00:29:33.590 --> 00:29:33.600
local datastore takes a desk tasks Tao
 

00:29:33.600 --> 00:29:36.320
local datastore takes a desk tasks Tao
as a dependency and in a real system

00:29:36.320 --> 00:29:36.330
as a dependency and in a real system
 

00:29:36.330 --> 00:29:38.960
as a dependency and in a real system
this is provided by the to do database a

00:29:38.960 --> 00:29:38.970
this is provided by the to do database a
 

00:29:38.970 --> 00:29:41.300
this is provided by the to do database a
class generated by room which is backed

00:29:41.300 --> 00:29:41.310
class generated by room which is backed
 

00:29:41.310 --> 00:29:44.660
class generated by room which is backed
by Android sequel ID and if we follow

00:29:44.660 --> 00:29:44.670
by Android sequel ID and if we follow
 

00:29:44.670 --> 00:29:46.580
by Android sequel ID and if we follow
the classic principles of unit testing

00:29:46.580 --> 00:29:46.590
the classic principles of unit testing
 

00:29:46.590 --> 00:29:49.010
the classic principles of unit testing
we can ask Marketo to provide as a mock

00:29:49.010 --> 00:29:49.020
we can ask Marketo to provide as a mock
 

00:29:49.020 --> 00:29:54.620
we can ask Marketo to provide as a mock
for our tasks now instead here in our

00:29:54.620 --> 00:29:54.630
for our tasks now instead here in our
 

00:29:54.630 --> 00:29:56.990
for our tasks now instead here in our
tests we can create that mock and then

00:29:56.990 --> 00:29:57.000
tests we can create that mock and then
 

00:29:57.000 --> 00:29:59.360
tests we can create that mock and then
pass it in as a dependency twelve tasks

00:29:59.360 --> 00:29:59.370
pass it in as a dependency twelve tasks
 

00:29:59.370 --> 00:30:03.020
pass it in as a dependency twelve tasks
local datastore we can create a new task

00:30:03.020 --> 00:30:03.030
local datastore we can create a new task
 

00:30:03.030 --> 00:30:07.610
local datastore we can create a new task
and then save it in the repository and

00:30:07.610 --> 00:30:07.620
and then save it in the repository and
 

00:30:07.620 --> 00:30:09.920
and then save it in the repository and
then finally we can validate the insert'

00:30:09.920 --> 00:30:09.930
then finally we can validate the insert'
 

00:30:09.930 --> 00:30:12.560
then finally we can validate the insert'
task coil call was in vote on our test

00:30:12.560 --> 00:30:12.570
task coil call was in vote on our test
 

00:30:12.570 --> 00:30:16.350
task coil call was in vote on our test
ow but wait

00:30:16.350 --> 00:30:16.360
ow but wait
 

00:30:16.360 --> 00:30:18.720
ow but wait
this test here already knows too much

00:30:18.720 --> 00:30:18.730
this test here already knows too much
 

00:30:18.730 --> 00:30:20.460
this test here already knows too much
about the implementation details of save

00:30:20.460 --> 00:30:20.470
about the implementation details of save
 

00:30:20.470 --> 00:30:23.850
about the implementation details of save
tasks how it's implemented if we were

00:30:23.850 --> 00:30:23.860
tasks how it's implemented if we were
 

00:30:23.860 --> 00:30:25.340
tasks how it's implemented if we were
ever gonna change that implementation

00:30:25.340 --> 00:30:25.350
ever gonna change that implementation
 

00:30:25.350 --> 00:30:27.750
ever gonna change that implementation
then the test is gonna need updating as

00:30:27.750 --> 00:30:27.760
then the test is gonna need updating as
 

00:30:27.760 --> 00:30:30.419
then the test is gonna need updating as
well even if the behavior was supposed

00:30:30.419 --> 00:30:30.429
well even if the behavior was supposed
 

00:30:30.429 --> 00:30:33.509
well even if the behavior was supposed
to remain the same this is what is known

00:30:33.509 --> 00:30:33.519
to remain the same this is what is known
 

00:30:33.519 --> 00:30:35.940
to remain the same this is what is known
as a change detector test and it's

00:30:35.940 --> 00:30:35.950
as a change detector test and it's
 

00:30:35.950 --> 00:30:38.250
as a change detector test and it's
burdensome maintenance can start to

00:30:38.250 --> 00:30:38.260
burdensome maintenance can start to
 

00:30:38.260 --> 00:30:41.970
burdensome maintenance can start to
quickly outgrow its usefulness effective

00:30:41.970 --> 00:30:41.980
quickly outgrow its usefulness effective
 

00:30:41.980 --> 00:30:43.560
quickly outgrow its usefulness effective
unit tests should really focus on

00:30:43.560 --> 00:30:43.570
unit tests should really focus on
 

00:30:43.570 --> 00:30:47.310
unit tests should really focus on
testing behavior instead but how should

00:30:47.310 --> 00:30:47.320
testing behavior instead but how should
 

00:30:47.320 --> 00:30:51.539
testing behavior instead but how should
we do that we can do that by ignoring

00:30:51.539 --> 00:30:51.549
we do that we can do that by ignoring
 

00:30:51.549 --> 00:30:54.029
we do that we can do that by ignoring
the internal implementation and focusing

00:30:54.029 --> 00:30:54.039
the internal implementation and focusing
 

00:30:54.039 --> 00:30:57.210
the internal implementation and focusing
on the API contracts instead take test

00:30:57.210 --> 00:30:57.220
on the API contracts instead take test
 

00:30:57.220 --> 00:31:00.600
on the API contracts instead take test
data source the contract states that

00:31:00.600 --> 00:31:00.610
data source the contract states that
 

00:31:00.610 --> 00:31:02.639
data source the contract states that
when I save a task through the save task

00:31:02.639 --> 00:31:02.649
when I save a task through the save task
 

00:31:02.649 --> 00:31:05.460
when I save a task through the save task
method I should still then be able to

00:31:05.460 --> 00:31:05.470
method I should still then be able to
 

00:31:05.470 --> 00:31:07.710
method I should still then be able to
retrieve that same task by looking it up

00:31:07.710 --> 00:31:07.720
retrieve that same task by looking it up
 

00:31:07.720 --> 00:31:12.810
retrieve that same task by looking it up
by ID so our test should acts to

00:31:12.810 --> 00:31:12.820
by ID so our test should acts to
 

00:31:12.820 --> 00:31:14.700
by ID so our test should acts to
exercise that contract rather than

00:31:14.700 --> 00:31:14.710
exercise that contract rather than
 

00:31:14.710 --> 00:31:16.470
exercise that contract rather than
concerning itself with implementation

00:31:16.470 --> 00:31:16.480
concerning itself with implementation
 

00:31:16.480 --> 00:31:17.750
concerning itself with implementation
details

00:31:17.750 --> 00:31:17.760
details
 

00:31:17.760 --> 00:31:21.210
details
so we'll exercise the save test method

00:31:21.210 --> 00:31:21.220
so we'll exercise the save test method
 

00:31:21.220 --> 00:31:24.060
so we'll exercise the save test method
on a local test data saw but we won't be

00:31:24.060 --> 00:31:24.070
on a local test data saw but we won't be
 

00:31:24.070 --> 00:31:25.470
on a local test data saw but we won't be
concerned with the fact that it calls

00:31:25.470 --> 00:31:25.480
concerned with the fact that it calls
 

00:31:25.480 --> 00:31:29.399
concerned with the fact that it calls
insert tasks on the Dow then we'll call

00:31:29.399 --> 00:31:29.409
insert tasks on the Dow then we'll call
 

00:31:29.409 --> 00:31:32.549
insert tasks on the Dow then we'll call
get tasks on a datastore again again

00:31:32.549 --> 00:31:32.559
get tasks on a datastore again again
 

00:31:32.559 --> 00:31:35.340
get tasks on a datastore again again
forgetting about the implementation and

00:31:35.340 --> 00:31:35.350
forgetting about the implementation and
 

00:31:35.350 --> 00:31:37.860
forgetting about the implementation and
one thing to bear in mind when writing

00:31:37.860 --> 00:31:37.870
one thing to bear in mind when writing
 

00:31:37.870 --> 00:31:39.779
one thing to bear in mind when writing
tests like this where the code under

00:31:39.779 --> 00:31:39.789
tests like this where the code under
 

00:31:39.789 --> 00:31:41.370
tests like this where the code under
test makes use of co-routines

00:31:41.370 --> 00:31:41.380
test makes use of co-routines
 

00:31:41.380 --> 00:31:43.019
test makes use of co-routines
is that we need to make these

00:31:43.019 --> 00:31:43.029
is that we need to make these
 

00:31:43.029 --> 00:31:44.879
is that we need to make these
asynchronous operations appear

00:31:44.879 --> 00:31:44.889
asynchronous operations appear
 

00:31:44.889 --> 00:31:47.129
asynchronous operations appear
synchronous so that our tests are going

00:31:47.129 --> 00:31:47.139
synchronous so that our tests are going
 

00:31:47.139 --> 00:31:50.639
synchronous so that our tests are going
to remain deterministic if we were to

00:31:50.639 --> 00:31:50.649
to remain deterministic if we were to
 

00:31:50.649 --> 00:31:52.230
to remain deterministic if we were to
get the if we were to call a get task

00:31:52.230 --> 00:31:52.240
get the if we were to call a get task
 

00:31:52.240 --> 00:31:54.779
get the if we were to call a get task
function and execute it and sometimes

00:31:54.779 --> 00:31:54.789
function and execute it and sometimes
 

00:31:54.789 --> 00:31:57.269
function and execute it and sometimes
the save task function hadn't completed

00:31:57.269 --> 00:31:57.279
the save task function hadn't completed
 

00:31:57.279 --> 00:32:00.649
the save task function hadn't completed
in time we'd end up with a flaky test

00:32:00.649 --> 00:32:00.659
in time we'd end up with a flaky test
 

00:32:00.659 --> 00:32:03.450
in time we'd end up with a flaky test
luckily doing so is rather

00:32:03.450 --> 00:32:03.460
luckily doing so is rather
 

00:32:03.460 --> 00:32:06.090
luckily doing so is rather
straightforward by asking our test to

00:32:06.090 --> 00:32:06.100
straightforward by asking our test to
 

00:32:06.100 --> 00:32:11.129
straightforward by asking our test to
run blocking one of the first tools you

00:32:11.129 --> 00:32:11.139
run blocking one of the first tools you
 

00:32:11.139 --> 00:32:13.200
run blocking one of the first tools you
learn to write tests that uses

00:32:13.200 --> 00:32:13.210
learn to write tests that uses
 

00:32:13.210 --> 00:32:13.919
learn to write tests that uses
co-routines

00:32:13.919 --> 00:32:13.929
co-routines
 

00:32:13.929 --> 00:32:17.580
co-routines
is the run blocking construct in the

00:32:17.580 --> 00:32:17.590
is the run blocking construct in the
 

00:32:17.590 --> 00:32:19.379
is the run blocking construct in the
context of run blocking the given

00:32:19.379 --> 00:32:19.389
context of run blocking the given
 

00:32:19.389 --> 00:32:21.870
context of run blocking the given
suspend function and all of the calls

00:32:21.870 --> 00:32:21.880
suspend function and all of the calls
 

00:32:21.880 --> 00:32:23.730
suspend function and all of the calls
children in the call hierarchy are

00:32:23.730 --> 00:32:23.740
children in the call hierarchy are
 

00:32:23.740 --> 00:32:25.169
children in the call hierarchy are
effectively going to block the main

00:32:25.169 --> 00:32:25.179
effectively going to block the main
 

00:32:25.179 --> 00:32:28.169
effectively going to block the main
thread until it finishes executing and

00:32:28.169 --> 00:32:28.179
thread until it finishes executing and
 

00:32:28.179 --> 00:32:29.370
thread until it finishes executing and
you're going to find this a really too

00:32:29.370 --> 00:32:29.380
you're going to find this a really too
 

00:32:29.380 --> 00:32:30.060
you're going to find this a really too
useful tool

00:32:30.060 --> 00:32:30.070
useful tool
 

00:32:30.070 --> 00:32:33.030
useful tool
when exercising code whose behavior

00:32:33.030 --> 00:32:33.040
when exercising code whose behavior
 

00:32:33.040 --> 00:32:35.370
when exercising code whose behavior
relies on co-routines and needs to be

00:32:35.370 --> 00:32:35.380
relies on co-routines and needs to be
 

00:32:35.380 --> 00:32:40.620
relies on co-routines and needs to be
highly deterministic so the test we

00:32:40.620 --> 00:32:40.630
highly deterministic so the test we
 

00:32:40.630 --> 00:32:42.360
highly deterministic so the test we
actually want to look right is gonna

00:32:42.360 --> 00:32:42.370
actually want to look right is gonna
 

00:32:42.370 --> 00:32:44.730
actually want to look right is gonna
look something like this we create a

00:32:44.730 --> 00:32:44.740
look something like this we create a
 

00:32:44.740 --> 00:32:49.320
look something like this we create a
task save it to the data source then we

00:32:49.320 --> 00:32:49.330
task save it to the data source then we
 

00:32:49.330 --> 00:32:51.240
task save it to the data source then we
ask the local data source to retrieve

00:32:51.240 --> 00:32:51.250
ask the local data source to retrieve
 

00:32:51.250 --> 00:32:55.410
ask the local data source to retrieve
that task back for us and finally we can

00:32:55.410 --> 00:32:55.420
that task back for us and finally we can
 

00:32:55.420 --> 00:32:57.540
that task back for us and finally we can
make an assertion that we got what we

00:32:57.540 --> 00:32:57.550
make an assertion that we got what we
 

00:32:57.550 --> 00:33:00.200
make an assertion that we got what we
expected

00:33:00.200 --> 00:33:00.210
 
 

00:33:00.210 --> 00:33:03.060
 
in fact Google and JetBrains have just

00:33:03.060 --> 00:33:03.070
in fact Google and JetBrains have just
 

00:33:03.070 --> 00:33:05.640
in fact Google and JetBrains have just
recently collaborated to just launch the

00:33:05.640 --> 00:33:05.650
recently collaborated to just launch the
 

00:33:05.650 --> 00:33:08.010
recently collaborated to just launch the
run blocking test co-routine builder and

00:33:08.010 --> 00:33:08.020
run blocking test co-routine builder and
 

00:33:08.020 --> 00:33:10.800
run blocking test co-routine builder and
this makes test for unko routines even

00:33:10.800 --> 00:33:10.810
this makes test for unko routines even
 

00:33:10.810 --> 00:33:13.560
this makes test for unko routines even
easier it's currently marked as an

00:33:13.560 --> 00:33:13.570
easier it's currently marked as an
 

00:33:13.570 --> 00:33:16.500
easier it's currently marked as an
experimental co-routines API so please

00:33:16.500 --> 00:33:16.510
experimental co-routines API so please
 

00:33:16.510 --> 00:33:18.450
experimental co-routines API so please
go and check it out and give us some

00:33:18.450 --> 00:33:18.460
go and check it out and give us some
 

00:33:18.460 --> 00:33:19.980
go and check it out and give us some
feedback and any bugs that you might

00:33:19.980 --> 00:33:19.990
feedback and any bugs that you might
 

00:33:19.990 --> 00:33:25.230
feedback and any bugs that you might
find so in order to write this test it's

00:33:25.230 --> 00:33:25.240
find so in order to write this test it's
 

00:33:25.240 --> 00:33:26.910
find so in order to write this test it's
important that our datastore maintain

00:33:26.910 --> 00:33:26.920
important that our datastore maintain
 

00:33:26.920 --> 00:33:29.070
important that our datastore maintain
state and it does this through its

00:33:29.070 --> 00:33:29.080
state and it does this through its
 

00:33:29.080 --> 00:33:33.990
state and it does this through its
dependency task Tao so the problem is

00:33:33.990 --> 00:33:34.000
dependency task Tao so the problem is
 

00:33:34.000 --> 00:33:36.300
dependency task Tao so the problem is
with using Marketo trying to maintain

00:33:36.300 --> 00:33:36.310
with using Marketo trying to maintain
 

00:33:36.310 --> 00:33:38.340
with using Marketo trying to maintain
state through these one-off stubbing

00:33:38.340 --> 00:33:38.350
state through these one-off stubbing
 

00:33:38.350 --> 00:33:42.690
state through these one-off stubbing
calls can get messy really fast so we

00:33:42.690 --> 00:33:42.700
calls can get messy really fast so we
 

00:33:42.700 --> 00:33:44.810
calls can get messy really fast so we
could instead implement our fake using

00:33:44.810 --> 00:33:44.820
could instead implement our fake using
 

00:33:44.820 --> 00:33:48.120
could instead implement our fake using
implement are tossed out using a fake

00:33:48.120 --> 00:33:48.130
implement are tossed out using a fake
 

00:33:48.130 --> 00:33:51.240
implement are tossed out using a fake
like we did earlier with repository but

00:33:51.240 --> 00:33:51.250
like we did earlier with repository but
 

00:33:51.250 --> 00:33:52.500
like we did earlier with repository but
we're gonna choose not to go down that

00:33:52.500 --> 00:33:52.510
we're gonna choose not to go down that
 

00:33:52.510 --> 00:33:55.890
we're gonna choose not to go down that
route for some good reasons firstly it

00:33:55.890 --> 00:33:55.900
route for some good reasons firstly it
 

00:33:55.900 --> 00:33:57.690
route for some good reasons firstly it
doesn't seem that the test our interface

00:33:57.690 --> 00:33:57.700
doesn't seem that the test our interface
 

00:33:57.700 --> 00:33:59.040
doesn't seem that the test our interface
is going to be part of our modules

00:33:59.040 --> 00:33:59.050
is going to be part of our modules
 

00:33:59.050 --> 00:34:02.190
is going to be part of our modules
public API and so no one else is going

00:34:02.190 --> 00:34:02.200
public API and so no one else is going
 

00:34:02.200 --> 00:34:04.430
public API and so no one else is going
to benefit from reusing that fake and

00:34:04.430 --> 00:34:04.440
to benefit from reusing that fake and
 

00:34:04.440 --> 00:34:07.170
to benefit from reusing that fake and
secondly right now I can't think of

00:34:07.170 --> 00:34:07.180
secondly right now I can't think of
 

00:34:07.180 --> 00:34:08.670
secondly right now I can't think of
another part of our code that would

00:34:08.670 --> 00:34:08.680
another part of our code that would
 

00:34:08.680 --> 00:34:12.030
another part of our code that would
benefit from that fake two and this is

00:34:12.030 --> 00:34:12.040
benefit from that fake two and this is
 

00:34:12.040 --> 00:34:13.440
benefit from that fake two and this is
one of those cases where it actually

00:34:13.440 --> 00:34:13.450
one of those cases where it actually
 

00:34:13.450 --> 00:34:15.380
one of those cases where it actually
makes sense to make use of the real

00:34:15.380 --> 00:34:15.390
makes sense to make use of the real
 

00:34:15.390 --> 00:34:19.380
makes sense to make use of the real
objects rather than putting in a fake in

00:34:19.380 --> 00:34:19.390
objects rather than putting in a fake in
 

00:34:19.390 --> 00:34:21.390
objects rather than putting in a fake in
this case room provides some really

00:34:21.390 --> 00:34:21.400
this case room provides some really
 

00:34:21.400 --> 00:34:26.250
this case room provides some really
useful testing infrastructure for us we

00:34:26.250 --> 00:34:26.260
useful testing infrastructure for us we
 

00:34:26.260 --> 00:34:28.440
useful testing infrastructure for us we
can ask room to build us an in memory to

00:34:28.440 --> 00:34:28.450
can ask room to build us an in memory to
 

00:34:28.450 --> 00:34:31.560
can ask room to build us an in memory to
do database and then we can use that to

00:34:31.560 --> 00:34:31.570
do database and then we can use that to
 

00:34:31.570 --> 00:34:34.620
do database and then we can use that to
obtain the tostão backed by that

00:34:34.620 --> 00:34:34.630
obtain the tostão backed by that
 

00:34:34.630 --> 00:34:37.290
obtain the tostão backed by that
in-memory database and provide it to our

00:34:37.290 --> 00:34:37.300
in-memory database and provide it to our
 

00:34:37.300 --> 00:34:40.149
in-memory database and provide it to our
local datastore

00:34:40.149 --> 00:34:40.159
 
 

00:34:40.159 --> 00:34:42.769
 
of course would clean it up after tests

00:34:42.769 --> 00:34:42.779
of course would clean it up after tests
 

00:34:42.779 --> 00:34:45.379
of course would clean it up after tests
but in all of the senses is the same as

00:34:45.379 --> 00:34:45.389
but in all of the senses is the same as
 

00:34:45.389 --> 00:34:47.960
but in all of the senses is the same as
the production database but is faster as

00:34:47.960 --> 00:34:47.970
the production database but is faster as
 

00:34:47.970 --> 00:34:51.109
the production database but is faster as
it doesn't write data to files on the

00:34:51.109 --> 00:34:51.119
it doesn't write data to files on the
 

00:34:51.119 --> 00:34:53.599
it doesn't write data to files on the
file system and therefore it also

00:34:53.599 --> 00:34:53.609
file system and therefore it also
 

00:34:53.609 --> 00:34:55.930
file system and therefore it also
provides better isolation through tests

00:34:55.930 --> 00:34:55.940
provides better isolation through tests
 

00:34:55.940 --> 00:35:00.019
provides better isolation through tests
so is this still a unit test or is it

00:35:00.019 --> 00:35:00.029
so is this still a unit test or is it
 

00:35:00.029 --> 00:35:01.880
so is this still a unit test or is it
now an integration test because we're

00:35:01.880 --> 00:35:01.890
now an integration test because we're
 

00:35:01.890 --> 00:35:05.289
now an integration test because we're
using real objects rather than just mugs

00:35:05.289 --> 00:35:05.299
using real objects rather than just mugs
 

00:35:05.299 --> 00:35:08.390
using real objects rather than just mugs
it's a good question and one many people

00:35:08.390 --> 00:35:08.400
it's a good question and one many people
 

00:35:08.400 --> 00:35:12.049
it's a good question and one many people
who will disagree on and it's true the

00:35:12.049 --> 00:35:12.059
who will disagree on and it's true the
 

00:35:12.059 --> 00:35:15.140
who will disagree on and it's true the
lines can become blurry at times but the

00:35:15.140 --> 00:35:15.150
lines can become blurry at times but the
 

00:35:15.150 --> 00:35:16.880
lines can become blurry at times but the
key takeaway here is that you shouldn't

00:35:16.880 --> 00:35:16.890
key takeaway here is that you shouldn't
 

00:35:16.890 --> 00:35:18.259
key takeaway here is that you shouldn't
ever be afraid of using real

00:35:18.259 --> 00:35:18.269
ever be afraid of using real
 

00:35:18.269 --> 00:35:20.509
ever be afraid of using real
dependencies in your tests where it

00:35:20.509 --> 00:35:20.519
dependencies in your tests where it
 

00:35:20.519 --> 00:35:22.579
dependencies in your tests where it
makes sense where they're more readable

00:35:22.579 --> 00:35:22.589
makes sense where they're more readable
 

00:35:22.589 --> 00:35:28.160
makes sense where they're more readable
more lightweight and robust so let's

00:35:28.160 --> 00:35:28.170
more lightweight and robust so let's
 

00:35:28.170 --> 00:35:30.319
more lightweight and robust so let's
just recap the times of tests that we

00:35:30.319 --> 00:35:30.329
just recap the times of tests that we
 

00:35:30.329 --> 00:35:34.039
just recap the times of tests that we
wrote today we added an end-to-end test

00:35:34.039 --> 00:35:34.049
wrote today we added an end-to-end test
 

00:35:34.049 --> 00:35:36.319
wrote today we added an end-to-end test
that covers a critical key user journey

00:35:36.319 --> 00:35:36.329
that covers a critical key user journey
 

00:35:36.329 --> 00:35:39.710
that covers a critical key user journey
through our application we decompose the

00:35:39.710 --> 00:35:39.720
through our application we decompose the
 

00:35:39.720 --> 00:35:41.990
through our application we decompose the
feature to add an integration test the

00:35:41.990 --> 00:35:42.000
feature to add an integration test the
 

00:35:42.000 --> 00:35:43.970
feature to add an integration test the
tests entire vertical slice through our

00:35:43.970 --> 00:35:43.980
tests entire vertical slice through our
 

00:35:43.980 --> 00:35:46.640
tests entire vertical slice through our
application from the UI down to the data

00:35:46.640 --> 00:35:46.650
application from the UI down to the data
 

00:35:46.650 --> 00:35:49.819
application from the UI down to the data
layer and we also added an integration

00:35:49.819 --> 00:35:49.829
layer and we also added an integration
 

00:35:49.829 --> 00:35:52.460
layer and we also added an integration
test that verifies our model which is

00:35:52.460 --> 00:35:52.470
test that verifies our model which is
 

00:35:52.470 --> 00:35:54.380
test that verifies our model which is
key because other modules are going to

00:35:54.380 --> 00:35:54.390
key because other modules are going to
 

00:35:54.390 --> 00:35:57.410
key because other modules are going to
be depending on our and finally we're

00:35:57.410 --> 00:35:57.420
be depending on our and finally we're
 

00:35:57.420 --> 00:35:58.999
be depending on our and finally we're
able to decompose and write smaller

00:35:58.999 --> 00:35:59.009
able to decompose and write smaller
 

00:35:59.009 --> 00:36:00.859
able to decompose and write smaller
groups of integration and unit tests

00:36:00.859 --> 00:36:00.869
groups of integration and unit tests
 

00:36:00.869 --> 00:36:03.259
groups of integration and unit tests
such as the ones for the UI or the local

00:36:03.259 --> 00:36:03.269
such as the ones for the UI or the local
 

00:36:03.269 --> 00:36:07.609
such as the ones for the UI or the local
data store marginalization of your

00:36:07.609 --> 00:36:07.619
data store marginalization of your
 

00:36:07.619 --> 00:36:10.099
data store marginalization of your
codebase with clearly defined intimate

00:36:10.099 --> 00:36:10.109
codebase with clearly defined intimate
 

00:36:10.109 --> 00:36:12.559
codebase with clearly defined intimate
rural contracts allow you to streamline

00:36:12.559 --> 00:36:12.569
rural contracts allow you to streamline
 

00:36:12.569 --> 00:36:15.799
rural contracts allow you to streamline
your project build create compile time

00:36:15.799 --> 00:36:15.809
your project build create compile time
 

00:36:15.809 --> 00:36:18.289
your project build create compile time
dependencies against small API modules

00:36:18.289 --> 00:36:18.299
dependencies against small API modules
 

00:36:18.299 --> 00:36:20.240
dependencies against small API modules
leading to faster build times on each

00:36:20.240 --> 00:36:20.250
leading to faster build times on each
 

00:36:20.250 --> 00:36:24.680
leading to faster build times on each
change an export testing infrastructure

00:36:24.680 --> 00:36:24.690
change an export testing infrastructure
 

00:36:24.690 --> 00:36:27.440
change an export testing infrastructure
such as lightweight verified fakes that

00:36:27.440 --> 00:36:27.450
such as lightweight verified fakes that
 

00:36:27.450 --> 00:36:29.569
such as lightweight verified fakes that
other modules can swap in and thereby

00:36:29.569 --> 00:36:29.579
other modules can swap in and thereby
 

00:36:29.579 --> 00:36:30.920
other modules can swap in and thereby
decomp decouple

00:36:30.920 --> 00:36:30.930
decomp decouple
 

00:36:30.930 --> 00:36:32.930
decomp decouple
their tests from your heavyweight

00:36:32.930 --> 00:36:32.940
their tests from your heavyweight
 

00:36:32.940 --> 00:36:37.309
their tests from your heavyweight
production dependencies so while you can

00:36:37.309 --> 00:36:37.319
production dependencies so while you can
 

00:36:37.319 --> 00:36:39.349
production dependencies so while you can
and should have end-to-end tests to give

00:36:39.349 --> 00:36:39.359
and should have end-to-end tests to give
 

00:36:39.359 --> 00:36:41.420
and should have end-to-end tests to give
you confidence in your app the vast

00:36:41.420 --> 00:36:41.430
you confidence in your app the vast
 

00:36:41.430 --> 00:36:43.039
you confidence in your app the vast
majority of tests should not be in this

00:36:43.039 --> 00:36:43.049
majority of tests should not be in this
 

00:36:43.049 --> 00:36:46.970
majority of tests should not be in this
category motorizing your app like this

00:36:46.970 --> 00:36:46.980
category motorizing your app like this
 

00:36:46.980 --> 00:36:48.920
category motorizing your app like this
allows you to push down many of those

00:36:48.920 --> 00:36:48.930
allows you to push down many of those
 

00:36:48.930 --> 00:36:51.799
allows you to push down many of those
large end to end tests to more focused

00:36:51.799 --> 00:36:51.809
large end to end tests to more focused
 

00:36:51.809 --> 00:36:52.680
large end to end tests to more focused
smaller

00:36:52.680 --> 00:36:52.690
smaller
 

00:36:52.690 --> 00:36:56.609
smaller
tests at the module level and each one

00:36:56.609 --> 00:36:56.619
tests at the module level and each one
 

00:36:56.619 --> 00:37:02.279
tests at the module level and each one
is decoupled from the next finally this

00:37:02.279 --> 00:37:02.289
is decoupled from the next finally this
 

00:37:02.289 --> 00:37:03.930
is decoupled from the next finally this
allows us to build a whirly

00:37:03.930 --> 00:37:03.940
allows us to build a whirly
 

00:37:03.940 --> 00:37:07.109
allows us to build a whirly
well-balanced pyramid and through this

00:37:07.109 --> 00:37:07.119
well-balanced pyramid and through this
 

00:37:07.119 --> 00:37:08.339
well-balanced pyramid and through this
success through this thoughtful

00:37:08.339 --> 00:37:08.349
success through this thoughtful
 

00:37:08.349 --> 00:37:10.440
success through this thoughtful
architecture there's a number of obvious

00:37:10.440 --> 00:37:10.450
architecture there's a number of obvious
 

00:37:10.450 --> 00:37:12.390
architecture there's a number of obvious
cutoff points that have surfaced

00:37:12.390 --> 00:37:12.400
cutoff points that have surfaced
 

00:37:12.400 --> 00:37:15.450
cutoff points that have surfaced
naturally within the pyramid you'll need

00:37:15.450 --> 00:37:15.460
naturally within the pyramid you'll need
 

00:37:15.460 --> 00:37:17.430
naturally within the pyramid you'll need
to identify the right spots for testing

00:37:17.430 --> 00:37:17.440
to identify the right spots for testing
 

00:37:17.440 --> 00:37:20.099
to identify the right spots for testing
in your own application what works for

00:37:20.099 --> 00:37:20.109
in your own application what works for
 

00:37:20.109 --> 00:37:22.220
in your own application what works for
one project might not work for another

00:37:22.220 --> 00:37:22.230
one project might not work for another
 

00:37:22.230 --> 00:37:24.779
one project might not work for another
so it's really important that whatever

00:37:24.779 --> 00:37:24.789
so it's really important that whatever
 

00:37:24.789 --> 00:37:27.420
so it's really important that whatever
you choose you document it clearly so

00:37:27.420 --> 00:37:27.430
you choose you document it clearly so
 

00:37:27.430 --> 00:37:29.309
you choose you document it clearly so
that all collaborators on your team are

00:37:29.309 --> 00:37:29.319
that all collaborators on your team are
 

00:37:29.319 --> 00:37:34.049
that all collaborators on your team are
on the same page in Android development

00:37:34.049 --> 00:37:34.059
on the same page in Android development
 

00:37:34.059 --> 00:37:36.809
on the same page in Android development
there's two kinds of tests local tests

00:37:36.809 --> 00:37:36.819
there's two kinds of tests local tests
 

00:37:36.819 --> 00:37:39.779
there's two kinds of tests local tests
that run on the VM level JVM they can be

00:37:39.779 --> 00:37:39.789
that run on the VM level JVM they can be
 

00:37:39.789 --> 00:37:42.240
that run on the VM level JVM they can be
just pure J unit tests or they can use

00:37:42.240 --> 00:37:42.250
just pure J unit tests or they can use
 

00:37:42.250 --> 00:37:44.010
just pure J unit tests or they can use
robolectric two pi to provide a

00:37:44.010 --> 00:37:44.020
robolectric two pi to provide a
 

00:37:44.020 --> 00:37:46.380
robolectric two pi to provide a
simulation of Android they're much

00:37:46.380 --> 00:37:46.390
simulation of Android they're much
 

00:37:46.390 --> 00:37:50.099
simulation of Android they're much
faster they're highly scalable but they

00:37:50.099 --> 00:37:50.109
faster they're highly scalable but they
 

00:37:50.109 --> 00:37:51.660
faster they're highly scalable but they
don't offer the same confidence that a

00:37:51.660 --> 00:37:51.670
don't offer the same confidence that a
 

00:37:51.670 --> 00:37:55.799
don't offer the same confidence that a
real device would on the other hand is

00:37:55.799 --> 00:37:55.809
real device would on the other hand is
 

00:37:55.809 --> 00:37:57.930
real device would on the other hand is
instrumentation tests that run on a real

00:37:57.930 --> 00:37:57.940
instrumentation tests that run on a real
 

00:37:57.940 --> 00:38:01.859
instrumentation tests that run on a real
or a virtual device while slower lacking

00:38:01.859 --> 00:38:01.869
or a virtual device while slower lacking
 

00:38:01.869 --> 00:38:04.740
or a virtual device while slower lacking
scalability they are true to the

00:38:04.740 --> 00:38:04.750
scalability they are true to the
 

00:38:04.750 --> 00:38:09.210
scalability they are true to the
behavior of real Android last year we

00:38:09.210 --> 00:38:09.220
behavior of real Android last year we
 

00:38:09.220 --> 00:38:11.819
behavior of real Android last year we
launched jetpack Android X test which

00:38:11.819 --> 00:38:11.829
launched jetpack Android X test which
 

00:38:11.829 --> 00:38:14.039
launched jetpack Android X test which
brought together a unified set of api's

00:38:14.039 --> 00:38:14.049
brought together a unified set of api's
 

00:38:14.049 --> 00:38:16.440
brought together a unified set of api's
that will work on both kinds of tests

00:38:16.440 --> 00:38:16.450
that will work on both kinds of tests
 

00:38:16.450 --> 00:38:19.769
that will work on both kinds of tests
and these api's allow us to focus on

00:38:19.769 --> 00:38:19.779
and these api's allow us to focus on
 

00:38:19.779 --> 00:38:22.289
and these api's allow us to focus on
writing Android tests without thinking

00:38:22.289 --> 00:38:22.299
writing Android tests without thinking
 

00:38:22.299 --> 00:38:23.880
writing Android tests without thinking
about the tools that were using

00:38:23.880 --> 00:38:23.890
about the tools that were using
 

00:38:23.890 --> 00:38:26.250
about the tools that were using
underneath or where the test is going to

00:38:26.250 --> 00:38:26.260
underneath or where the test is going to
 

00:38:26.260 --> 00:38:29.160
underneath or where the test is going to
be executed and at the heart of what we

00:38:29.160 --> 00:38:29.170
be executed and at the heart of what we
 

00:38:29.170 --> 00:38:31.559
be executed and at the heart of what we
relent releasing today is increased

00:38:31.559 --> 00:38:31.569
relent releasing today is increased
 

00:38:31.569 --> 00:38:33.779
relent releasing today is increased
stability improved interoperation with

00:38:33.779 --> 00:38:33.789
stability improved interoperation with
 

00:38:33.789 --> 00:38:36.480
stability improved interoperation with
Android studio better off device support

00:38:36.480 --> 00:38:36.490
Android studio better off device support
 

00:38:36.490 --> 00:38:39.809
Android studio better off device support
for espresso resources and the UI thread

00:38:39.809 --> 00:38:39.819
for espresso resources and the UI thread
 

00:38:39.819 --> 00:38:42.900
for espresso resources and the UI thread
control and a course of support for the

00:38:42.900 --> 00:38:42.910
control and a course of support for the
 

00:38:42.910 --> 00:38:46.309
control and a course of support for the
latest jetpack architecture components

00:38:46.309 --> 00:38:46.319
latest jetpack architecture components
 

00:38:46.319 --> 00:38:48.930
latest jetpack architecture components
while tests of all sizes can run on a

00:38:48.930 --> 00:38:48.940
while tests of all sizes can run on a
 

00:38:48.940 --> 00:38:50.880
while tests of all sizes can run on a
real or a virtual device these

00:38:50.880 --> 00:38:50.890
real or a virtual device these
 

00:38:50.890 --> 00:38:53.039
real or a virtual device these
improvements have made it possible to

00:38:53.039 --> 00:38:53.049
improvements have made it possible to
 

00:38:53.049 --> 00:38:54.660
improvements have made it possible to
run increasingly larger integration

00:38:54.660 --> 00:38:54.670
run increasingly larger integration
 

00:38:54.670 --> 00:38:59.400
run increasingly larger integration
tests faster on the local JVM all of the

00:38:59.400 --> 00:38:59.410
tests faster on the local JVM all of the
 

00:38:59.410 --> 00:39:00.809
tests faster on the local JVM all of the
integration tests that we've documented

00:39:00.809 --> 00:39:00.819
integration tests that we've documented
 

00:39:00.819 --> 00:39:03.120
integration tests that we've documented
today and in the code lab will run

00:39:03.120 --> 00:39:03.130
today and in the code lab will run
 

00:39:03.130 --> 00:39:06.060
today and in the code lab will run
equally well on both the local tree VM

00:39:06.060 --> 00:39:06.070
equally well on both the local tree VM
 

00:39:06.070 --> 00:39:10.830
equally well on both the local tree VM
on a real or a virtual device project

00:39:10.830 --> 00:39:10.840
on a real or a virtual device project
 

00:39:10.840 --> 00:39:12.720
on a real or a virtual device project
nitrogen is our vision for a unified

00:39:12.720 --> 00:39:12.730
nitrogen is our vision for a unified
 

00:39:12.730 --> 00:39:15.420
nitrogen is our vision for a unified
test execution platform it brings

00:39:15.420 --> 00:39:15.430
test execution platform it brings
 

00:39:15.430 --> 00:39:17.370
test execution platform it brings
together all these many disparate tools

00:39:17.370 --> 00:39:17.380
together all these many disparate tools
 

00:39:17.380 --> 00:39:21.390
together all these many disparate tools
and environments with nitrogen any test

00:39:21.390 --> 00:39:21.400
and environments with nitrogen any test
 

00:39:21.400 --> 00:39:24.140
and environments with nitrogen any test
that's written with the unified API

00:39:24.140 --> 00:39:24.150
that's written with the unified API
 

00:39:24.150 --> 00:39:27.150
that's written with the unified API
using Android X test can be run on any

00:39:27.150 --> 00:39:27.160
using Android X test can be run on any
 

00:39:27.160 --> 00:39:29.130
using Android X test can be run on any
of these execution platforms seamlessly

00:39:29.130 --> 00:39:29.140
of these execution platforms seamlessly
 

00:39:29.140 --> 00:39:31.920
of these execution platforms seamlessly
from Android studio or your continuous

00:39:31.920 --> 00:39:31.930
from Android studio or your continuous
 

00:39:31.930 --> 00:39:34.200
from Android studio or your continuous
build system you've got to up the option

00:39:34.200 --> 00:39:34.210
build system you've got to up the option
 

00:39:34.210 --> 00:39:36.330
build system you've got to up the option
to run any Android test and a variety of

00:39:36.330 --> 00:39:36.340
to run any Android test and a variety of
 

00:39:36.340 --> 00:39:38.760
to run any Android test and a variety of
these platforms such as virtual devices

00:39:38.760 --> 00:39:38.770
these platforms such as virtual devices
 

00:39:38.770 --> 00:39:40.260
these platforms such as virtual devices
cloud farms

00:39:40.260 --> 00:39:40.270
cloud farms
 

00:39:40.270 --> 00:39:43.230
cloud farms
simulated devices and while a team is

00:39:43.230 --> 00:39:43.240
simulated devices and while a team is
 

00:39:43.240 --> 00:39:44.700
simulated devices and while a team is
still working hard to bring this vision

00:39:44.700 --> 00:39:44.710
still working hard to bring this vision
 

00:39:44.710 --> 00:39:47.160
still working hard to bring this vision
to reality in the meantime we'll share a

00:39:47.160 --> 00:39:47.170
to reality in the meantime we'll share a
 

00:39:47.170 --> 00:39:50.820
to reality in the meantime we'll share a
little trick with you normally local

00:39:50.820 --> 00:39:50.830
little trick with you normally local
 

00:39:50.830 --> 00:39:52.500
little trick with you normally local
tests would be placed in the test source

00:39:52.500 --> 00:39:52.510
tests would be placed in the test source
 

00:39:52.510 --> 00:39:56.250
tests would be placed in the test source
route instrumentation tests go in the

00:39:56.250 --> 00:39:56.260
route instrumentation tests go in the
 

00:39:56.260 --> 00:39:58.830
route instrumentation tests go in the
Android test source route but to show

00:39:58.830 --> 00:39:58.840
Android test source route but to show
 

00:39:58.840 --> 00:40:00.480
Android test source route but to show
you what's possible with a unified API

00:40:00.480 --> 00:40:00.490
you what's possible with a unified API
 

00:40:00.490 --> 00:40:02.940
you what's possible with a unified API
in this code lab we're using a little

00:40:02.940 --> 00:40:02.950
in this code lab we're using a little
 

00:40:02.950 --> 00:40:05.460
in this code lab we're using a little
trick to create a shared test route

00:40:05.460 --> 00:40:05.470
trick to create a shared test route
 

00:40:05.470 --> 00:40:08.730
trick to create a shared test route
sauce root folder and here we can place

00:40:08.730 --> 00:40:08.740
sauce root folder and here we can place
 

00:40:08.740 --> 00:40:11.510
sauce root folder and here we can place
tests that written with the unified API

00:40:11.510 --> 00:40:11.520
tests that written with the unified API
 

00:40:11.520 --> 00:40:15.860
tests that written with the unified API
run on both device and off device and

00:40:15.860 --> 00:40:15.870
run on both device and off device and
 

00:40:15.870 --> 00:40:18.210
run on both device and off device and
how and where you decide to run them

00:40:18.210 --> 00:40:18.220
how and where you decide to run them
 

00:40:18.220 --> 00:40:19.530
how and where you decide to run them
really depends on your project's

00:40:19.530 --> 00:40:19.540
really depends on your project's
 

00:40:19.540 --> 00:40:21.690
really depends on your project's
philosophies or needs but here you can

00:40:21.690 --> 00:40:21.700
philosophies or needs but here you can
 

00:40:21.700 --> 00:40:26.460
philosophies or needs but here you can
start see the possibilities today we're

00:40:26.460 --> 00:40:26.470
start see the possibilities today we're
 

00:40:26.470 --> 00:40:28.020
start see the possibilities today we're
also launching an early access program

00:40:28.020 --> 00:40:28.030
also launching an early access program
 

00:40:28.030 --> 00:40:31.560
also launching an early access program
for nitrogen for tools integrators so if

00:40:31.560 --> 00:40:31.570
for nitrogen for tools integrators so if
 

00:40:31.570 --> 00:40:32.970
for nitrogen for tools integrators so if
you're a developer that maintains

00:40:32.970 --> 00:40:32.980
you're a developer that maintains
 

00:40:32.980 --> 00:40:36.140
you're a developer that maintains
monitoring profiling performance tools

00:40:36.140 --> 00:40:36.150
monitoring profiling performance tools
 

00:40:36.150 --> 00:40:38.190
monitoring profiling performance tools
you provide continuous integration

00:40:38.190 --> 00:40:38.200
you provide continuous integration
 

00:40:38.200 --> 00:40:41.940
you provide continuous integration
platforms you build real or device

00:40:41.940 --> 00:40:41.950
platforms you build real or device
 

00:40:41.950 --> 00:40:46.290
platforms you build real or device
services for developers you make IDs or

00:40:46.290 --> 00:40:46.300
services for developers you make IDs or
 

00:40:46.300 --> 00:40:49.260
services for developers you make IDs or
build farms we're looking to hear from

00:40:49.260 --> 00:40:49.270
build farms we're looking to hear from
 

00:40:49.270 --> 00:40:52.200
build farms we're looking to hear from
you and get your feedback on our early

00:40:52.200 --> 00:40:52.210
you and get your feedback on our early
 

00:40:52.210 --> 00:40:57.090
you and get your feedback on our early
access so please go ahead check out the

00:40:57.090 --> 00:40:57.100
access so please go ahead check out the
 

00:40:57.100 --> 00:40:59.160
access so please go ahead check out the
code in the code lab you can see the

00:40:59.160 --> 00:40:59.170
code in the code lab you can see the
 

00:40:59.170 --> 00:41:01.050
code in the code lab you can see the
great examples for project structure and

00:41:01.050 --> 00:41:01.060
great examples for project structure and
 

00:41:01.060 --> 00:41:03.240
great examples for project structure and
blueprints examples of the kinds of

00:41:03.240 --> 00:41:03.250
blueprints examples of the kinds of
 

00:41:03.250 --> 00:41:04.710
blueprints examples of the kinds of
tests you should be writing at different

00:41:04.710 --> 00:41:04.720
tests you should be writing at different
 

00:41:04.720 --> 00:41:07.980
tests you should be writing at different
level using the unified API and see just

00:41:07.980 --> 00:41:07.990
level using the unified API and see just
 

00:41:07.990 --> 00:41:09.750
level using the unified API and see just
what kind of tests are possible to run

00:41:09.750 --> 00:41:09.760
what kind of tests are possible to run
 

00:41:09.760 --> 00:41:12.330
what kind of tests are possible to run
on an off device which leads the way to

00:41:12.330 --> 00:41:12.340
on an off device which leads the way to
 

00:41:12.340 --> 00:41:14.910
on an off device which leads the way to
project nitrogen this is all available

00:41:14.910 --> 00:41:14.920
project nitrogen this is all available
 

00:41:14.920 --> 00:41:17.760
project nitrogen this is all available
online now and is right available right

00:41:17.760 --> 00:41:17.770
online now and is right available right
 

00:41:17.770 --> 00:41:18.550
online now and is right available right
here in the

00:41:18.550 --> 00:41:18.560
here in the
 

00:41:18.560 --> 00:41:21.190
here in the
whole other section for you to check out

00:41:21.190 --> 00:41:21.200
whole other section for you to check out
 

00:41:21.200 --> 00:41:42.590
whole other section for you to check out
[Music]

