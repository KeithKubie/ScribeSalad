WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.994
[THEME MUSIC]

00:00:05.619 --> 00:00:07.660
ANDREW BROGDON: All right,
everybody, we're back,

00:00:07.660 --> 00:00:10.497
and we have Ian Hickson, tech
lead for the Flutter team.

00:00:10.497 --> 00:00:12.580
And we got a bunch of
questions people have asked,

00:00:12.580 --> 00:00:14.540
so let's get right to it.

00:00:14.540 --> 00:00:16.219
So this one came
in from Twitter,

00:00:16.219 --> 00:00:22.540
from M3CT in Islamabad, so
a salaam aleikum, Pakistan.

00:00:22.540 --> 00:00:27.490
He wrote, a column with unfixed
hype and a hundred plus list

00:00:27.490 --> 00:00:28.974
tiles is a problem.

00:00:28.974 --> 00:00:30.140
Do you have any suggestions?

00:00:30.140 --> 00:00:33.550
So I'm guessing this is
a performance situation.

00:00:33.550 --> 00:00:36.207
If you just put a bunch of
list tiles in a column, and--

00:00:36.207 --> 00:00:38.540
that's a lot of work that
Flutter's doing at that point.

00:00:38.540 --> 00:00:40.000
IAN HICKSON: Yeah, you
really, really want

00:00:40.000 --> 00:00:41.590
to only be building
the widgets that

00:00:41.590 --> 00:00:43.720
are actually on the screen.

00:00:43.720 --> 00:00:46.480
That way, we don't
waste any CPU cycles

00:00:46.480 --> 00:00:48.520
building things, laying
them out, painting them,

00:00:48.520 --> 00:00:50.020
if they're not on the screen.

00:00:50.020 --> 00:00:53.140
So the easiest way to do
that-- listview.builder.

00:00:53.140 --> 00:00:55.590
You literally just tell it
how many items you have,

00:00:55.590 --> 00:00:57.880
and it will just call
you for each item.

00:00:57.880 --> 00:00:59.320
And you build that
item, and then

00:00:59.320 --> 00:01:03.082
we won't even call you
again unless it changes

00:01:03.082 --> 00:01:04.540
until the thing
goes off the screen

00:01:04.540 --> 00:01:05.690
and then comes back
on the screen later,

00:01:05.690 --> 00:01:06.565
we'll call you again.

00:01:06.565 --> 00:01:08.148
ANDREW BROGDON: And
so with that, it's

00:01:08.148 --> 00:01:09.860
not recycling anything
the way that a lot

00:01:09.860 --> 00:01:11.818
of-- like Recycler View
on Android, and there's

00:01:11.818 --> 00:01:13.609
a similar control on iOS.

00:01:13.609 --> 00:01:15.150
It's not recycling
any widgets there.

00:01:15.150 --> 00:01:16.740
It's rebuilding when necessary.

00:01:16.740 --> 00:01:17.200
IAN HICKSON: That's right.

00:01:17.200 --> 00:01:19.241
We don't actually need to
keep any of the objects

00:01:19.241 --> 00:01:21.730
around because Dart's
garbage collection basically

00:01:21.730 --> 00:01:24.070
makes that very efficient.

00:01:24.070 --> 00:01:26.140
We just allocate the
objects we need on the frame

00:01:26.140 --> 00:01:27.980
when we need them,
and then we use them.

00:01:27.980 --> 00:01:30.496
And then when they go off
screen, we get rid of them.

00:01:30.496 --> 00:01:31.470
ANDREW BROGDON: Cool.

00:01:31.470 --> 00:01:35.360
All right, so hopefully,
that helps out.

00:01:35.360 --> 00:01:36.740
Oh, here's an interesting one.

00:01:36.740 --> 00:01:41.830
This one comes from Sudan,
so salaam aleikum again.

00:01:41.830 --> 00:01:46.630
This is from
[INAUDIBLE],, I think.

00:01:46.630 --> 00:01:48.592
Hopefully, I got a good
pronunciation of that.

00:01:48.592 --> 00:01:51.175
Can we build games with Flutter,
and how would the performance

00:01:51.175 --> 00:01:51.830
be?

00:01:51.830 --> 00:01:53.920
IAN HICKSON: Ah, depends
on the kind of game.

00:01:53.920 --> 00:01:56.740
You can't really build a 3D game
with Flutter, like "Quake" or--

00:01:56.740 --> 00:01:58.990
ANDREW BROGDON: So Flutter
doesn't expose 3D sort of--

00:01:58.990 --> 00:01:59.230
IAN HICKSON: Right.

00:01:59.230 --> 00:02:00.605
ANDREW BROGDON:
Things like that.

00:02:00.605 --> 00:02:01.240
Right?

00:02:01.240 --> 00:02:02.720
IAN HICKSON: You
can do 2D games.

00:02:02.720 --> 00:02:05.560
In fact, one of our earliest
demos was a 2D game.

00:02:05.560 --> 00:02:07.480
You may have seen it
in some of the screen--

00:02:07.480 --> 00:02:10.579
some of the videos
during the keynote today.

00:02:10.579 --> 00:02:12.370
ANDREW BROGDON: Oh,
the sliding title game?

00:02:12.370 --> 00:02:13.110
IAN HICKSON: That's right.

00:02:13.110 --> 00:02:13.901
ANDREW BROGDON: OK.

00:02:13.901 --> 00:02:15.700
IAN HICKSON: And
also another one--

00:02:15.700 --> 00:02:17.845
much earlier one
that we had was the--

00:02:17.845 --> 00:02:20.175
another space shooter game.

00:02:20.175 --> 00:02:20.800
That was also--

00:02:20.800 --> 00:02:22.060
ANDREW BROGDON: I think I've
also seen that in the keynote

00:02:22.060 --> 00:02:22.400
as well.

00:02:22.400 --> 00:02:22.913
IAN HICKSON: Right.

00:02:22.913 --> 00:02:23.620
ANDREW BROGDON: OK.

00:02:23.620 --> 00:02:25.369
IAN HICKSON: We don't
support that really,

00:02:25.369 --> 00:02:27.592
as a first class citizen.

00:02:27.592 --> 00:02:29.300
We don't have a
framework built for that.

00:02:29.300 --> 00:02:32.340
But there are frameworks
in the community,

00:02:32.340 --> 00:02:35.246
the community's provided,
to do exactly that.

00:02:35.246 --> 00:02:37.120
I think Flutter Sprites,
I think it's called.

00:02:37.120 --> 00:02:37.330
It's one of them.

00:02:37.330 --> 00:02:39.250
ANDREW BROGDON: I've
seen that package, yeah.

00:02:39.250 --> 00:02:40.958
IAN HICKSON: And the
performance is fine.

00:02:40.958 --> 00:02:44.560
I mean, we're designed to
render pixels on the screen,

00:02:44.560 --> 00:02:46.777
and games do that
just like UIs do that.

00:02:46.777 --> 00:02:49.360
There's not really a difference
from the engine's perspective.

00:02:49.360 --> 00:02:51.984
ANDREW BROGDON: I've heard that,
that the actual under the hood

00:02:51.984 --> 00:02:53.920
architecture, a
built-for-release Flutter

00:02:53.920 --> 00:02:55.390
app actually isn't
that different

00:02:55.390 --> 00:02:57.121
than a typical mobile game.

00:02:57.121 --> 00:02:57.620
Is that--

00:02:57.620 --> 00:02:59.161
IAN HICKSON: Yeah,
it's actually very

00:02:59.161 --> 00:03:00.610
similar to-- the
way Flutter apps

00:03:00.610 --> 00:03:02.068
work is very similar,
in many ways,

00:03:02.068 --> 00:03:03.670
to how a Unity game would work.

00:03:03.670 --> 00:03:05.440
We literally just
drive all the pixels,

00:03:05.440 --> 00:03:12.190
and we update the parts of the
2D scene, which under the hood,

00:03:12.190 --> 00:03:14.620
is a 3D scene in the GPU.

00:03:14.620 --> 00:03:16.690
We update that when
it changes, and we

00:03:16.690 --> 00:03:19.154
leave the stuff that hasn't
changed when [INAUDIBLE]..

00:03:19.154 --> 00:03:20.320
ANDREW BROGDON: Interesting.

00:03:20.320 --> 00:03:22.420
In Unity, everything built
on top of the renderer

00:03:22.420 --> 00:03:25.660
is going toward the use case of
games and optimized for that,

00:03:25.660 --> 00:03:27.530
and Flutter is going
mostly toward apps

00:03:27.530 --> 00:03:29.290
and those sorts of use cases.

00:03:29.290 --> 00:03:31.720
That's really interesting.

00:03:31.720 --> 00:03:34.480
All right, let me see
what else we have.

00:03:34.480 --> 00:03:35.230
Here's a good one.

00:03:35.230 --> 00:03:40.000
This is from
[INAUDIBLE] in Brazil,

00:03:40.000 --> 00:03:42.220
and it's a question
about, when would you

00:03:42.220 --> 00:03:45.860
build a Flutter app versus
a mobile friendly website?

00:03:45.860 --> 00:03:49.990
So what is actually harder
with HTML, CSS, and JavaScript

00:03:49.990 --> 00:03:51.400
that would be easier in Flutter?

00:03:51.400 --> 00:03:53.970
Why would you prefer
one to the other?

00:03:53.970 --> 00:03:55.720
IAN HICKSON: So I mean
that really depends

00:03:55.720 --> 00:03:58.750
on who your target audience is.

00:03:58.750 --> 00:04:02.137
And honestly, if you're a big
company writing a big app,

00:04:02.137 --> 00:04:03.220
you might want to do both.

00:04:03.220 --> 00:04:04.390
You might want to
have your mobile web

00:04:04.390 --> 00:04:06.944
app for those people who
haven't downloaded your app.

00:04:06.944 --> 00:04:08.110
ANDREW BROGDON: That's true.

00:04:08.110 --> 00:04:12.160
IAN HICKSON: Or who
are on a device like--

00:04:12.160 --> 00:04:14.830
[INAUDIBLE] device or a laptop
or something-- whatever.

00:04:14.830 --> 00:04:17.269
And then you might also
want your mobile app

00:04:17.269 --> 00:04:21.029
for people who want the
more native experience.

00:04:21.029 --> 00:04:22.690
With Butterfly--
sorry, not Butterfly.

00:04:22.690 --> 00:04:27.341
With Hummingbird, we are maybe
going to make that easier.

00:04:27.341 --> 00:04:28.340
We'll see how that goes.

00:04:28.340 --> 00:04:28.730
ANDREW BROGDON: Awesome.

00:04:28.730 --> 00:04:30.430
Yeah, I'm looking forward to
seeing where that project goes.

00:04:30.430 --> 00:04:31.270
WM LELER: I've got a couple--

00:04:31.270 --> 00:04:33.160
I've got a couple of
questions that came in.

00:04:33.160 --> 00:04:33.900
ANDREW BROGDON: Fire away, yeah.

00:04:33.900 --> 00:04:35.900
WM LELER: So we have a
couple of live questions.

00:04:35.900 --> 00:04:38.290
The first one is, in
the future, are we

00:04:38.290 --> 00:04:41.980
going to have support for
Android or Apple Watch?

00:04:41.980 --> 00:04:43.200
IAN HICKSON: I have no idea.

00:04:43.200 --> 00:04:44.671
[LAUGHS]

00:04:44.671 --> 00:04:45.920
WM LELER: But we could, right?

00:04:45.920 --> 00:04:46.450
IAN HICKSON: We could.

00:04:46.450 --> 00:04:48.533
I mean, there's no reason
why we couldn't do that.

00:04:48.533 --> 00:04:50.890
We're really targeting
mobile right now.

00:04:50.890 --> 00:04:52.710
We're starting to
look at desktop.

00:04:52.710 --> 00:04:54.020
WM LELER: Watches are mobile.

00:04:54.020 --> 00:04:56.170
IAN HICKSON: Well, it's true.

00:04:56.170 --> 00:05:00.190
One thing we have done, we
have a demo, very early demo

00:05:00.190 --> 00:05:05.260
we did, to prove that we are not
fixed to Cartesian coordinates.

00:05:05.260 --> 00:05:09.890
We have a sector demo,
which renders UI using--

00:05:09.890 --> 00:05:11.880
literally using
polar coordinates,

00:05:11.880 --> 00:05:15.044
which if you have a round
clock face, would be perfect.

00:05:15.044 --> 00:05:16.460
WM LELER: An analog
watch-- that's

00:05:16.460 --> 00:05:17.570
all on polar coordinates.

00:05:17.570 --> 00:05:18.736
ANDREW BROGDON: So no boxes.

00:05:18.736 --> 00:05:22.200
Just sectors of a circle and
truncated them as they go.

00:05:22.200 --> 00:05:23.600
WM LELER: Ah, wow.

00:05:23.600 --> 00:05:24.470
ANDREW BROGDON: OK.

00:05:24.470 --> 00:05:25.760
WM LELER: So what
we're saying is

00:05:25.760 --> 00:05:27.220
we don't know if
we're going to--

00:05:27.220 --> 00:05:29.344
we're probably not going
to do something like that,

00:05:29.344 --> 00:05:31.200
but we would love it
if somebody else tried

00:05:31.200 --> 00:05:32.000
to do something like that.

00:05:32.000 --> 00:05:33.860
IAN HICKSON: I certainly would
love contributions to do that.

00:05:33.860 --> 00:05:36.410
We don't have anything on our
roadmap right now for a watch.

00:05:36.410 --> 00:05:37.880
WM LELER: But it certainly
is something that

00:05:37.880 --> 00:05:40.296
there's-- there's a reason why
it might actually be a good

00:05:40.296 --> 00:05:43.360
thing to do in Flutter if
you can do polar coordinates,

00:05:43.360 --> 00:05:44.520
so that sounds great.

00:05:44.520 --> 00:05:46.550
ANDREW BROGDON: And so you have
one more, and I have one more.

00:05:46.550 --> 00:05:48.100
And then I think we're
going to let you go.

00:05:48.100 --> 00:05:48.590
IAN HICKSON: All right.

00:05:48.590 --> 00:05:49.670
ANDREW BROGDON: What's
your other question?

00:05:49.670 --> 00:05:51.770
WM LELER: My other
question is, we all

00:05:51.770 --> 00:05:53.870
know that Flutter
came from Chrome,

00:05:53.870 --> 00:05:58.190
and the question was, how
has the original team used

00:05:58.190 --> 00:06:01.720
their previous knowledge
from Chrome to build Flutter?

00:06:01.720 --> 00:06:03.410
And which features
were inherited

00:06:03.410 --> 00:06:05.585
from Chrome to Flutter, if any?

00:06:05.585 --> 00:06:07.460
IAN HICKSON: Well, from
the code perspective,

00:06:07.460 --> 00:06:09.560
we literally started from Blink.

00:06:09.560 --> 00:06:12.260
We forked Blink and
then basically started

00:06:12.260 --> 00:06:13.440
deleting code.

00:06:13.440 --> 00:06:15.840
And I think, at this point,
there's no code left.

00:06:15.840 --> 00:06:17.180
We literally have no code left.

00:06:17.180 --> 00:06:21.200
We still use the same
graphics engine, Skia.

00:06:21.200 --> 00:06:23.160
I think there's literally
nothing else left.

00:06:23.160 --> 00:06:25.070
We don't use the same
scripting engine.

00:06:25.070 --> 00:06:26.900
We don't use the same
text layout anymore.

00:06:26.900 --> 00:06:27.920
WM LELER: But it's
fair to say that there

00:06:27.920 --> 00:06:30.060
was some experience
you had with Chrome

00:06:30.060 --> 00:06:33.040
that sort of informed how
you went about building this.

00:06:33.040 --> 00:06:34.040
IAN HICKSON: Absolutely.

00:06:34.040 --> 00:06:37.040
If you look at our
internal style guide--

00:06:37.040 --> 00:06:38.300
it's on our wiki somewhere.

00:06:38.300 --> 00:06:40.550
There's a document
that talks about how

00:06:40.550 --> 00:06:42.769
you should design, our
design philosophy, and so on.

00:06:42.769 --> 00:06:44.810
If you look at some of
our earliest bullet points

00:06:44.810 --> 00:06:46.610
on there, it specifically
talks about how

00:06:46.610 --> 00:06:48.776
to avoid some of the mistakes
we had made on the web

00:06:48.776 --> 00:06:50.450
before using--

00:06:50.450 --> 00:06:52.450
mentioning document.write,
for example.

00:06:52.450 --> 00:06:56.027
Avoid document.write style APIs.

00:06:56.027 --> 00:06:57.860
So yeah, we're very
much learning from that.

00:06:57.860 --> 00:06:59.584
We've also hired
plenty of people from--

00:06:59.584 --> 00:07:02.000
people who've worked on the
Android team and people who've

00:07:02.000 --> 00:07:04.550
worked on other
platforms, and we're

00:07:04.550 --> 00:07:05.970
using everyone's knowledge.

00:07:05.970 --> 00:07:09.230
We're really trying to learn
from all of our experiences.

00:07:09.230 --> 00:07:09.897
WM LELER: Great.

00:07:09.897 --> 00:07:11.646
ANDREW BROGDON: Yeah,
so we have one more,

00:07:11.646 --> 00:07:14.360
and then we're going to let you
get back to enjoying the party.

00:07:14.360 --> 00:07:15.990
What feedback does
the engineering

00:07:15.990 --> 00:07:19.370
team most value coming from
the developer community?

00:07:19.370 --> 00:07:21.650
Because as we asked
Eric, what can

00:07:21.650 --> 00:07:24.290
developers who want to
get involved do to make--

00:07:24.290 --> 00:07:26.672
have a chance at some
really going to impact.

00:07:26.672 --> 00:07:28.130
Developers that
are using Flutter--

00:07:28.130 --> 00:07:30.570
what are some of the
things you need from them?

00:07:30.570 --> 00:07:32.294
IAN HICKSON: All
feedback is great.

00:07:32.294 --> 00:07:33.460
We really love all feedback.

00:07:33.460 --> 00:07:33.850
ANDREW BROGDON: Done.

00:07:33.850 --> 00:07:35.350
IAN HICKSON: Even
positive feedback.

00:07:35.350 --> 00:07:38.060
I don't mind if you file a
bug that says, "You're great."

00:07:38.060 --> 00:07:42.320
But when you do file a bug,
the most useful thing for us

00:07:42.320 --> 00:07:45.270
is make sure there's
reproducible test cases.

00:07:45.270 --> 00:07:46.940
Make sure you have
a piece of code

00:07:46.940 --> 00:07:48.920
that we can just
download and run

00:07:48.920 --> 00:07:51.440
that shows the bug
really clearly.

00:07:51.440 --> 00:07:53.070
That's really useful for us.

00:07:53.070 --> 00:07:56.720
If we just have a vague
comment-- like, hey, sometimes

00:07:56.720 --> 00:07:58.100
my app crashes.

00:07:58.100 --> 00:07:59.480
I don't know what your app does.

00:07:59.480 --> 00:08:01.105
I don't know what
device it crashes on.

00:08:01.105 --> 00:08:02.570
I don't know what's going on.

00:08:02.570 --> 00:08:05.780
But if you tell me, hey, when I
run this specific function on--

00:08:05.780 --> 00:08:09.321
I don't know-- a Samsung
G5 or whatever, crashes,

00:08:09.321 --> 00:08:10.570
then that's much more helpful.

00:08:10.570 --> 00:08:11.569
I can go get that phone.

00:08:11.569 --> 00:08:13.970
I can go run that app, and
I can test it and reproduce

00:08:13.970 --> 00:08:15.537
the problem and try to fix it.

00:08:15.537 --> 00:08:18.120
WM LELER: You have to be able
to reproduce it, in other words?

00:08:18.120 --> 00:08:20.160
IAN HICKSON: It is very helpful.

00:08:20.160 --> 00:08:22.430
I should say, if you
can't reproduce it,

00:08:22.430 --> 00:08:27.230
it's still worth filing the
bug because if 10 people file

00:08:27.230 --> 00:08:32.140
10 vague bugs that all say,
hey, when I do this, it crashes,

00:08:32.140 --> 00:08:33.350
we might notice a pattern.

00:08:33.350 --> 00:08:35.240
For example, there's one bug
that we're still dealing with.

00:08:35.240 --> 00:08:37.440
We haven't figured out
exactly what's going on.

00:08:37.440 --> 00:08:41.630
We figured out it only happens
with Windows 10 in China.

00:08:41.630 --> 00:08:43.880
I think it's when you're
doing a hot reload, something

00:08:43.880 --> 00:08:45.734
like that.

00:08:45.734 --> 00:08:47.400
But we were only able
to figure that out

00:08:47.400 --> 00:08:49.149
because we looked at
a whole bunch of bugs

00:08:49.149 --> 00:08:52.160
that were filed at different
times, and 90% of them

00:08:52.160 --> 00:08:54.560
mentioned Windows,
and 90% of mentioned,

00:08:54.560 --> 00:08:57.010
oh, it's a problem with China--

00:08:57.010 --> 00:08:58.760
or it mentioned that
they were in China.

00:08:58.760 --> 00:09:00.176
And then we noticed,
we don't have

00:09:00.176 --> 00:09:01.440
any of this bug outside China.

00:09:01.440 --> 00:09:03.170
So file the bug.

00:09:03.170 --> 00:09:05.160
That's the most important thing.

00:09:05.160 --> 00:09:07.070
And then once you file
the bug, if you can,

00:09:07.070 --> 00:09:09.252
provide reproducible steps.

00:09:09.252 --> 00:09:10.460
ANDREW BROGDON: That's great.

00:09:10.460 --> 00:09:11.400
Thank you so much for--

00:09:11.400 --> 00:09:11.960
IAN HICKSON: You're welcome.

00:09:11.960 --> 00:09:12.530
ANDREW BROGDON:
Thanks for coming.

00:09:12.530 --> 00:09:14.400
I hope everybody out
there enjoyed it.

00:09:14.400 --> 00:09:15.650
You can go-- head
straight out that way

00:09:15.650 --> 00:09:16.850
and take the
microphone with you.

00:09:16.850 --> 00:09:17.990
We're going to answer
some more questions.

00:09:17.990 --> 00:09:18.740
IAN HICKSON: Goodbye, folks.

00:09:18.740 --> 00:09:19.310
ANDREW BROGDON: All right.

00:09:19.310 --> 00:09:20.310
WM LELER: Thanks, again.

00:09:20.310 --> 00:09:22.060
ANDREW BROGDON: Ian
Hickson, everybody.

00:09:22.060 --> 00:09:23.300
WM LELER: That was great.

00:09:23.300 --> 00:09:25.490
ANDREW BROGDON: All right,
let's do livestream.

00:09:25.490 --> 00:09:27.020
WM LELER: Yeah, let's
look at the livestream.

00:09:27.020 --> 00:09:29.430
We haven't done very much
livestream recently, so let's--

00:09:29.430 --> 00:09:31.680
ANDREW BROGDON: We're getting
livestream from Twitter.

00:09:31.680 --> 00:09:34.740
Let's go-- let's get back
into the YouTube livestream

00:09:34.740 --> 00:09:37.346
and see what I have here.

00:09:42.742 --> 00:09:44.700
WM LELER: Well, if you're
looking for a second,

00:09:44.700 --> 00:09:47.060
I've got a question that
I can answer really fast.

00:09:47.060 --> 00:09:47.550
ANDREW BROGDON: Go for it.

00:09:47.550 --> 00:09:48.925
WM LELER: So we
just had somebody

00:09:48.925 --> 00:09:50.820
who wrote in just
a few minutes ago.

00:09:50.820 --> 00:09:54.300
They said, is there any chance
of having Kotlin on Flutter?

00:09:54.300 --> 00:09:56.610
And I have a stock
answer for that one,

00:09:56.610 --> 00:09:59.970
which is, if you're willing
to give up hot reload, sure.

00:09:59.970 --> 00:10:02.710
But so far, nobody's
taken me up on that.

00:10:02.710 --> 00:10:04.140
ANDREW BROGDON: Yeah, so hot--

00:10:04.140 --> 00:10:05.889
stateful hot reload
is one of the features

00:10:05.889 --> 00:10:07.800
that Flutter can
get with Dart that's

00:10:07.800 --> 00:10:10.860
not easy to find in
a lot of languages.

00:10:10.860 --> 00:10:16.100
Hot loading code with
Kotlin into a running JVM.

00:10:16.100 --> 00:10:17.924
Dart is built for
that kind of thing,

00:10:17.924 --> 00:10:20.340
with its just-in-time compiler
and all of the other stuff.

00:10:20.340 --> 00:10:23.865
They can still compile the
native code at the end.

00:10:23.865 --> 00:10:26.190
And so there is still Kotlin
code in a Flutter app.

00:10:26.190 --> 00:10:28.000
If you want to, you could
build platform channels code

00:10:28.000 --> 00:10:29.041
with Kotlin, for example.

00:10:29.041 --> 00:10:32.670
You're not tied to
Java necessarily there.

00:10:32.670 --> 00:10:34.640
But the particular features
that Flutter needs,

00:10:34.640 --> 00:10:35.681
it really gets from Dart.

00:10:38.400 --> 00:10:41.400
WM LELER: There's actually
an article that I wrote--

00:10:41.400 --> 00:10:42.750
self plug right here--

00:10:42.750 --> 00:10:44.730
called "Why Flutter Uses Dart."

00:10:44.730 --> 00:10:47.250
And if you're curious about
what are the advantages of Dart,

00:10:47.250 --> 00:10:48.120
you can read that.

00:10:48.120 --> 00:10:48.840
It's on the web.

00:10:48.840 --> 00:10:50.650
Just search for what--

00:10:50.650 --> 00:10:52.740
"Why Flutter Uses
Dart," and that'll help

00:10:52.740 --> 00:10:54.851
answer that question.

00:10:54.851 --> 00:10:55.850
Have you found anything?

00:10:55.850 --> 00:10:57.020
ANDREW BROGDON: Yeah,
we've had a couple here.

00:10:57.020 --> 00:10:57.750
WM LELER: Go for it.

00:10:57.750 --> 00:10:59.333
ANDREW BROGDON: We
have one from Pedro

00:10:59.333 --> 00:11:02.227
who posted, is Flutter IO
going to replace Android?

00:11:02.227 --> 00:11:03.310
WM LELER: Is Flutter what?

00:11:03.310 --> 00:11:05.476
ANDREW BROGDON: Is Flutter
going to replace Android?

00:11:05.476 --> 00:11:06.770
Will Android development be--

00:11:06.770 --> 00:11:08.640
WM LELER: So this is
just like the question

00:11:08.640 --> 00:11:10.598
we answered earlier, when
people were asking us

00:11:10.598 --> 00:11:12.540
about React native
and stuff like that.

00:11:12.540 --> 00:11:15.762
No, Flutter is not going
to replace Android.

00:11:15.762 --> 00:11:16.595
That's like asking--

00:11:16.595 --> 00:11:17.540
ANDREW BROGDON: They're
two very different things.

00:11:17.540 --> 00:11:19.410
Android's an operating
system, and Flutter

00:11:19.410 --> 00:11:20.940
is a software development kit--

00:11:20.940 --> 00:11:21.795
WM LELER: They're
not even related.

00:11:21.795 --> 00:11:22.540
ANDREW BROGDON: --to help
people build apps, right?

00:11:22.540 --> 00:11:23.030
WM LELER: Yeah.

00:11:23.030 --> 00:11:24.960
ANDREW BROGDON: Yeah, so
they're two different masters,

00:11:24.960 --> 00:11:25.310
and they're--

00:11:25.310 --> 00:11:27.643
WM LELER: And even if you're
wondering if straight ahead

00:11:27.643 --> 00:11:29.490
Android development
is going to replay--

00:11:29.490 --> 00:11:32.111
be replaced by
Flutter, none of us

00:11:32.111 --> 00:11:33.610
think that's going
to happen either.

00:11:33.610 --> 00:11:37.650
I mean, it's not like
something new comes along,

00:11:37.650 --> 00:11:39.610
and it gets rid
of something else.

00:11:39.610 --> 00:11:42.120
There are things that
Android does really well

00:11:42.120 --> 00:11:45.180
and that it would be hard to do
in a cross platform type tool.

00:11:45.180 --> 00:11:48.270
So there's definitely use
cases that will always

00:11:48.270 --> 00:11:50.430
be valuable for that.

00:11:50.430 --> 00:11:52.020
I mean, we can name
examples of that,

00:11:52.020 --> 00:11:53.520
but I think they've
gotten the idea.

00:11:53.520 --> 00:11:54.930
Let's go on to the next one.

00:11:54.930 --> 00:11:58.110
ANDREW BROGDON: Yeah, I just
skipped past a question asking

00:11:58.110 --> 00:12:00.325
about background
tasks and Flutter

00:12:00.325 --> 00:12:03.840
and some things like that, which
we can touch on a little bit.

00:12:03.840 --> 00:12:06.830
So certainly,
again, a Flutter app

00:12:06.830 --> 00:12:08.580
built for Android is
still an Android app,

00:12:08.580 --> 00:12:10.890
and a Flutter app
built for iOS is still

00:12:10.890 --> 00:12:12.490
just a typical iOS app.

00:12:12.490 --> 00:12:15.540
And you can add code to do
a number of things that way

00:12:15.540 --> 00:12:17.180
on the platform side.

00:12:17.180 --> 00:12:20.010
We use platform channels
to talk back and forth.

00:12:20.010 --> 00:12:21.780
But speaking of
background tasks,

00:12:21.780 --> 00:12:25.389
I was talking with
Ben the other day.

00:12:25.389 --> 00:12:27.180
Have you seen Ben's
background task article

00:12:27.180 --> 00:12:31.650
that he wrote about geofencing
and scheduled tasks?

00:12:31.650 --> 00:12:33.670
If you haven't seen
it, it's great.

00:12:33.670 --> 00:12:37.470
He wrote a very detailed
example and had source code up

00:12:37.470 --> 00:12:40.225
on GitHub for how to
make a Flutter app

00:12:40.225 --> 00:12:43.560
that used geofencing to do
certain things in response

00:12:43.560 --> 00:12:44.536
to GPS events.

00:12:44.536 --> 00:12:45.160
And so he had--

00:12:45.160 --> 00:12:47.160
WM LELER: That's definitely
a need for background tasks.

00:12:47.160 --> 00:12:48.618
ANDREW BROGDON:
Exactly, and he had

00:12:48.618 --> 00:12:51.870
an app that was opening
his garage door when he

00:12:51.870 --> 00:12:54.870
arrived home with his bicycle.

00:12:54.870 --> 00:12:57.060
And so the source for that
is actually on GitHub.

00:12:57.060 --> 00:13:00.000
If you do a search for it,
background-- geofencing

00:13:00.000 --> 00:13:01.549
and Flutter, you'll find did.

00:13:01.549 --> 00:13:03.840
He did great job in the
article and put all the code up

00:13:03.840 --> 00:13:05.250
where people can see it.

00:13:05.250 --> 00:13:07.410
So that might well
answer your question

00:13:07.410 --> 00:13:10.230
and show you how to
get started with that.

00:13:10.230 --> 00:13:12.300
WM LELER: I've got
another question here.

00:13:12.300 --> 00:13:13.120
It's from somebody.

00:13:13.120 --> 00:13:15.630
They're asking
what are the tools

00:13:15.630 --> 00:13:17.070
and what are the
processes I could

00:13:17.070 --> 00:13:19.860
use to optimize my Flutter app?

00:13:19.860 --> 00:13:22.360
And they're talking about--
they were working on an app,

00:13:22.360 --> 00:13:25.320
and it took up more
space than they wanted.

00:13:25.320 --> 00:13:27.405
And the performance was
not where they want it.

00:13:27.405 --> 00:13:28.780
ANDREW BROGDON:
I just saw Devon.

00:13:28.780 --> 00:13:29.620
This is perfect.

00:13:29.620 --> 00:13:31.860
WM LELER: You saw-- yeah,
exactly, I saw Devon, too.

00:13:31.860 --> 00:13:34.110
So we actually
have the guy who's

00:13:34.110 --> 00:13:36.190
in charge of Flutter tooling.

00:13:36.190 --> 00:13:37.697
Devon, would you come on up?

00:13:37.697 --> 00:13:39.780
ANDREW BROGDON: We're going
to spend a little time

00:13:39.780 --> 00:13:40.650
on my laptop here.

00:13:40.650 --> 00:13:42.699
Let me get back to you--

00:13:42.699 --> 00:13:43.240
back into it.

00:13:43.240 --> 00:13:44.820
This is just my scratchpad app.

00:13:44.820 --> 00:13:47.040
Ladies and gentlemen,
Devon Carew

00:13:47.040 --> 00:13:51.390
from the tooling team
and our Portland office.

00:13:51.390 --> 00:13:53.890
Real quick, what are all the
responsibilities that you have?

00:13:53.890 --> 00:13:56.540
What are some of the things
that you cover in your work?

00:13:56.540 --> 00:13:59.525
DEVON CAREW: We do cover a bunch
of things on the tooling team.

00:13:59.525 --> 00:14:03.780
We make plugins for the
major IDEs we support.

00:14:03.780 --> 00:14:07.770
IntelliJ and Android Studio
both, and Visual Studio Code

00:14:07.770 --> 00:14:09.720
as well.

00:14:09.720 --> 00:14:11.720
We work on static
analysis tooling,

00:14:11.720 --> 00:14:16.599
so that is a command line
tool and a language server.

00:14:16.599 --> 00:14:19.015
Command line tools that Dart
analyzed with language server

00:14:19.015 --> 00:14:20.440
is actually interesting.

00:14:20.440 --> 00:14:23.180
It's a separate process
which powers support and IDEs

00:14:23.180 --> 00:14:25.580
through a protocol,
so it's how we're

00:14:25.580 --> 00:14:28.160
able to provide support
for multiple IDEs

00:14:28.160 --> 00:14:30.200
in an economic way.

00:14:30.200 --> 00:14:33.330
We support some other tools
like DartDoc and DartPad

00:14:33.330 --> 00:14:34.995
and the language playground.

00:14:34.995 --> 00:14:37.500
ANDREW BROGDON: Of course,
I use DartPad all the time.

00:14:37.500 --> 00:14:39.260
So a lot of the
things that we think

00:14:39.260 --> 00:14:42.110
of as making developers'
lives easier,

00:14:42.110 --> 00:14:45.360
you are the one overseeing
production of those?

00:14:45.360 --> 00:14:48.640
DEVON CAREW: Yes,
for much of it, yeah.

00:14:48.640 --> 00:14:51.440
ANDREW BROGDON: So
I use IntelliJ IDEA.

00:14:51.440 --> 00:14:51.950
I use that.

00:14:51.950 --> 00:14:53.450
That's what I like to use.

00:14:53.450 --> 00:14:55.010
If I had, say, this--

00:14:55.010 --> 00:14:57.464
let me get an app going here.

00:14:57.464 --> 00:14:59.380
Say it was misbehaving,
and I didn't know why.

00:14:59.380 --> 00:15:01.790
It was dropping frames
or something like that,

00:15:01.790 --> 00:15:05.420
or chewing up gigabytes
of RAM on my phone

00:15:05.420 --> 00:15:07.916
and heating it up so I
could fry an egg on it.

00:15:07.916 --> 00:15:09.290
What are some of
the tools that I

00:15:09.290 --> 00:15:12.680
can start looking into to
get a handle on that problem?

00:15:12.680 --> 00:15:14.210
DEVON CAREW: Yeah,
so that's an area

00:15:14.210 --> 00:15:17.260
that we've been working on
more in the past quarter 2

00:15:17.260 --> 00:15:20.300
and going forward as
well, performance tooling.

00:15:20.300 --> 00:15:22.520
We want to make it so that--

00:15:22.520 --> 00:15:24.200
when Flutter was
very small, users,

00:15:24.200 --> 00:15:25.220
if they had
performance problems,

00:15:25.220 --> 00:15:26.840
they could come to
the Flutter team,

00:15:26.840 --> 00:15:28.440
and we could help solve
their performance problems.

00:15:28.440 --> 00:15:29.475
ANDREW BROGDON: It doesn't
quite scale that way.

00:15:29.475 --> 00:15:30.970
DEVON CAREW: As
Flutter gets bigger,

00:15:30.970 --> 00:15:33.011
we want to make it so they
can solve the problems

00:15:33.011 --> 00:15:36.350
themselves through either good
documentation or good tooling.

00:15:36.350 --> 00:15:38.210
And if you go to
the Flutter website,

00:15:38.210 --> 00:15:40.670
we already have
some docs about ways

00:15:40.670 --> 00:15:42.620
you can make your
apps more performant,

00:15:42.620 --> 00:15:45.245
best practices, Flutter.IO.

00:15:45.245 --> 00:15:47.370
ANDREW BROGDON: So just
performance maybe off that?

00:15:47.370 --> 00:15:49.420
DEVON CAREW: I-- yeah.

00:15:49.420 --> 00:15:50.750
ANDREW BROGDON: There we are.

00:15:50.750 --> 00:15:53.270
DEVON CAREW: And we're
also in parallel,

00:15:53.270 --> 00:15:56.250
building out new tooling as
well to help you with that.

00:15:56.250 --> 00:15:58.970
And we're concentrating
mostly on UI jank tooling--

00:15:58.970 --> 00:16:00.920
so, "my app is missing frames."

00:16:00.920 --> 00:16:04.161
Basically to help people be
better aware when they're

00:16:04.161 --> 00:16:06.410
missing frames, and then
why-- if they missed a frame,

00:16:06.410 --> 00:16:08.190
why are they doing that.

00:16:08.190 --> 00:16:11.150
And then the other side is
we're looking at memory tooling

00:16:11.150 --> 00:16:13.850
as well to give people a better
sense of their memory usage,

00:16:13.850 --> 00:16:15.870
and if they're using a
lot, where's it going?

00:16:15.870 --> 00:16:20.480
Is it a leak, or is it
just a lot of resources?

00:16:20.480 --> 00:16:23.090
So some of that
tooling is shipped now

00:16:23.090 --> 00:16:26.480
and available in IntelliJ
and Android Studio,

00:16:26.480 --> 00:16:28.397
and some will be coming
out in a few quarters.

00:16:28.397 --> 00:16:29.938
ANDREW BROGDON: In
the pipeline and I

00:16:29.938 --> 00:16:32.380
think I have the latest version
of the plugin right here

00:16:32.380 --> 00:16:33.900
and the latest
version of IntelliJ.

00:16:33.900 --> 00:16:34.630
I just updated.

00:16:34.630 --> 00:16:35.130
So--

00:16:35.130 --> 00:16:35.860
DEVON CAREW: Yeah,
so if you have--

00:16:35.860 --> 00:16:38.151
ANDREW BROGDON: There are
some things on the sides here

00:16:38.151 --> 00:16:39.452
that I can see, and what--

00:16:39.452 --> 00:16:41.990
where am I going first, do
you think, to find some jank?

00:16:41.990 --> 00:16:43.850
DEVON CAREW: For
performance, you

00:16:43.850 --> 00:16:47.990
want to go to our
Flutter Performance tab.

00:16:47.990 --> 00:16:49.310
It's on the bottom.

00:16:49.310 --> 00:16:50.840
It's active.

00:16:50.840 --> 00:16:55.190
Whenever an app is running,
you'll have this available.

00:16:55.190 --> 00:16:56.930
There's some simple
options we have,

00:16:56.930 --> 00:17:00.560
which are useful, that are just
enabling features, performance

00:17:00.560 --> 00:17:02.580
features already in
the Flutter framework,

00:17:02.580 --> 00:17:05.288
so if you toggle on the
performance overlay--

00:17:05.288 --> 00:17:06.829
ANDREW BROGDON: Oh,
I got some stuff.

00:17:06.829 --> 00:17:08.870
DEVON CAREW: And then you
interact with your app,

00:17:08.870 --> 00:17:10.339
you can see your frame rate.

00:17:10.339 --> 00:17:12.319
We have the same
information available Inline

00:17:12.319 --> 00:17:14.609
and IntelliJ as well.

00:17:14.609 --> 00:17:16.220
And if you toggle
that off, there's

00:17:16.220 --> 00:17:18.500
another one, which is useful.

00:17:18.500 --> 00:17:21.740
It's the debug drawing toggle.

00:17:21.740 --> 00:17:25.322
It's, I think, the
second-- yeah, third one.

00:17:25.322 --> 00:17:27.530
It just sort of shows you
the outline of your widgets

00:17:27.530 --> 00:17:28.904
and gives you a
sense of-- that's

00:17:28.904 --> 00:17:31.040
more for debugging layout.

00:17:31.040 --> 00:17:32.150
ANDREW BROGDON: So if I have
something that's not where it

00:17:32.150 --> 00:17:34.830
needs to be, I can quickly come
in here with this and just--

00:17:34.830 --> 00:17:36.885
it's like putting Border
equals 1 on something--

00:17:36.885 --> 00:17:38.600
DEVON CAREW: It's a good way of
just getting an overall sense

00:17:38.600 --> 00:17:39.224
of your layout.

00:17:39.224 --> 00:17:42.350
We also have Flutter Inspector
for a very detailed knowledge,

00:17:42.350 --> 00:17:45.200
but a performance
feature we just

00:17:45.200 --> 00:17:48.080
launched-- if you want
to toggle off Debug Draw

00:17:48.080 --> 00:17:51.650
and check this Show
Widget Rebuild Information

00:17:51.650 --> 00:17:53.360
and give your code.

00:17:53.360 --> 00:17:57.110
So what we've done is we've
instrumented your code

00:17:57.110 --> 00:18:02.530
at runtime to display
inline in the editor, which

00:18:02.530 --> 00:18:04.190
widgets are rebuilding.

00:18:04.190 --> 00:18:06.690
It's really magical if you've
been doing Flutter for a while

00:18:06.690 --> 00:18:08.780
and haven't had this feature.

00:18:08.780 --> 00:18:11.630
So as you interact,
we'll show you

00:18:11.630 --> 00:18:13.455
which widgets are rebuilding.

00:18:13.455 --> 00:18:15.830
If widgets are rebuilding much
more than you-- sometimes,

00:18:15.830 --> 00:18:18.080
having them rebuild
is perfectly natural.

00:18:18.080 --> 00:18:20.900
But sometimes, you can end
up rebuilding much more

00:18:20.900 --> 00:18:24.290
than you expect, and that could
indicate a performance issue.

00:18:24.290 --> 00:18:25.457
It doesn't mean it is, but--

00:18:25.457 --> 00:18:27.540
ANDREW BROGDON: And so
that was just that little--

00:18:27.540 --> 00:18:29.490
on line 32, I think it
was, I saw that text

00:18:29.490 --> 00:18:30.831
widget as it was building.

00:18:30.831 --> 00:18:32.330
DEVON CAREW: Yeah,
but we have the--

00:18:32.330 --> 00:18:35.950
If you give that a bit
more space on the bottom,

00:18:35.950 --> 00:18:38.510
you can see a table
of widget rebuilds.

00:18:38.510 --> 00:18:40.532
This app is not
doing a whole lot.

00:18:40.532 --> 00:18:41.990
If your app was
more sophisticated,

00:18:41.990 --> 00:18:45.290
you'd see the widgets that were
rebuilt, how many times they

00:18:45.290 --> 00:18:48.360
were rebuilt, and if you
double-click on that widget,

00:18:48.360 --> 00:18:51.019
it'll take you to where in
the source it was created.

00:18:51.019 --> 00:18:53.060
So then you need to give
your source of that one.

00:18:53.060 --> 00:18:55.143
ANDREW BROGDON: Oh, yeah,
it helps if you actually

00:18:55.143 --> 00:18:56.112
show the source window.

00:18:56.112 --> 00:18:57.070
DEVON CAREW: Yeah, so--

00:18:57.070 --> 00:18:57.560
ANDREW BROGDON: And there it is.

00:18:57.560 --> 00:18:58.060
[INAUDIBLE]

00:18:58.060 --> 00:19:00.110
DEVON CAREW: This
is all just launched

00:19:00.110 --> 00:19:02.360
in last month's release
and this month's release,

00:19:02.360 --> 00:19:06.680
and we actively use
a lot of user studies

00:19:06.680 --> 00:19:08.340
to tweak this,
and user feedback.

00:19:08.340 --> 00:19:11.570
So this last release, I
think the changes we made

00:19:11.570 --> 00:19:14.750
were just driven by
user studies of trying

00:19:14.750 --> 00:19:17.517
to validate that the
tooling we'd shipped

00:19:17.517 --> 00:19:19.850
was actually solving the
performance problems users were

00:19:19.850 --> 00:19:20.780
having.

00:19:20.780 --> 00:19:23.030
ANDREW BROGDON: I mean,
the rebuild indication

00:19:23.030 --> 00:19:25.729
of the widgets is great not only
for performance information,

00:19:25.729 --> 00:19:27.770
but also as people are
probably learning Flutter.

00:19:27.770 --> 00:19:27.950
DEVON CAREW: Well.

00:19:27.950 --> 00:19:30.545
It gives you a better insight
to what your app is doing.

00:19:30.545 --> 00:19:32.830
Not performance
related, but just--

00:19:32.830 --> 00:19:33.820
so yeah.

00:19:33.820 --> 00:19:36.320
ANDREW BROGDON: So one of the
other questions-- we got this,

00:19:36.320 --> 00:19:37.611
I think, a little bit earlier--

00:19:37.611 --> 00:19:41.720
was relating to Observatory,
which I know is, at the moment,

00:19:41.720 --> 00:19:43.170
a bit of an advanced tool.

00:19:43.170 --> 00:19:44.390
But can we take a look
at that, and maybe

00:19:44.390 --> 00:19:46.070
you show me some of the
things that are going on

00:19:46.070 --> 00:19:47.400
with Observatory as well?

00:19:47.400 --> 00:19:51.440
DEVON CAREW: Well, I think one
of the main features you should

00:19:51.440 --> 00:19:54.500
use observatory for,
in a Flutter context,

00:19:54.500 --> 00:19:57.650
is their timeline
view, which gives you

00:19:57.650 --> 00:20:03.194
a very detailed view of the
events that your app is going

00:20:03.194 --> 00:20:04.610
through, and in
particular, it can

00:20:04.610 --> 00:20:09.140
help you identify slow frames
and why those frames are slow.

00:20:09.140 --> 00:20:11.810
This is some of the tooling
we're actually rebuilding

00:20:11.810 --> 00:20:14.030
to make it more user
friendly, but right now

00:20:14.030 --> 00:20:16.952
is the only way, really, to
debug UI jank in your app.

00:20:16.952 --> 00:20:18.410
But it's one of
the ones that we do

00:20:18.410 --> 00:20:20.370
want to make basically
more approachable

00:20:20.370 --> 00:20:22.020
to your typical user.

00:20:22.020 --> 00:20:26.570
So if you go into
this View Timeline

00:20:26.570 --> 00:20:28.025
and then check all these boxes--

00:20:32.270 --> 00:20:33.560
you're going to check those.

00:20:33.560 --> 00:20:35.270
Go back to your application.

00:20:35.270 --> 00:20:37.550
Interact with it a little bit.

00:20:37.550 --> 00:20:41.360
Click a button or two,
and then if you go back

00:20:41.360 --> 00:20:46.660
to the timeline view
and choose Refresh.

00:20:46.660 --> 00:20:49.270
So in a new version
of this app, you

00:20:49.270 --> 00:20:51.900
wouldn't have to toggle
those options on or refresh.

00:20:51.900 --> 00:20:54.850
It would just be
streaming data live.

00:20:54.850 --> 00:20:58.835
But you can now see,
in the timeline view--

00:20:58.835 --> 00:21:01.210
and we don't need to get into
much more detail than this,

00:21:01.210 --> 00:21:01.710
I think.

00:21:01.710 --> 00:21:05.110
But you can see events for
when frames were created,

00:21:05.110 --> 00:21:06.820
when your build
method was running,

00:21:06.820 --> 00:21:09.340
what was happening
in that build method,

00:21:09.340 --> 00:21:12.730
and basically, in an
iteration of this,

00:21:12.730 --> 00:21:15.580
we hope to make it much
more actual for users.

00:21:15.580 --> 00:21:17.261
Once they see this
data, what does it

00:21:17.261 --> 00:21:19.760
mean they should do to their
app to make it more performant?

00:21:19.760 --> 00:21:21.640
Or is there a performance
problem at all,

00:21:21.640 --> 00:21:24.070
or would they just
be optimizing where

00:21:24.070 --> 00:21:25.695
it's not really necessary?

00:21:25.695 --> 00:21:27.070
ANDREW BROGDON:
And so I got here

00:21:27.070 --> 00:21:29.400
through a link in IntelliJ.

00:21:29.400 --> 00:21:33.110
This is a web server that's
just running on my machine.

00:21:33.110 --> 00:21:34.677
DEVON CAREW: Exactly, yeah.

00:21:34.677 --> 00:21:36.760
ANDREW BROGDON: But I'm
afraid we've hit our time.

00:21:36.760 --> 00:21:40.750
We do need to say goodbye to you
and answer some more questions

00:21:40.750 --> 00:21:42.084
here before we end our Q&amp;A.

00:21:42.084 --> 00:21:44.500
WM LELER: We've got a couple
of coming in, so that's good.

00:21:44.500 --> 00:21:45.370
Thanks for coming out.

00:21:45.370 --> 00:21:45.640
DEVON CAREW: Absolutely.

00:21:45.640 --> 00:21:45.910
Np problem.

00:21:45.910 --> 00:21:46.820
ANDREW BROGDON:
Thank you so much.

00:21:46.820 --> 00:21:47.900
That was really great.

00:21:47.900 --> 00:21:49.110
DEVON CAREW: All right.

00:21:49.110 --> 00:21:50.110
ANDREW BROGDON: Awesome.

00:21:50.110 --> 00:21:51.430
Devon Carew, everybody.

00:21:51.430 --> 00:21:54.040
WM LELER: So I got a
couple of questions.

00:21:54.040 --> 00:21:55.780
First one should be
a pretty easy one.

00:21:55.780 --> 00:21:59.200
The question is-- well, I
like the way they said it.

00:21:59.200 --> 00:22:01.370
They said, it's time
to end the debate.

00:22:01.370 --> 00:22:05.290
Which is better-- VSCode
or IntelliJ/Android Studio?

00:22:05.290 --> 00:22:07.797
ANDREW BROGDON: Well, I mean,
I think we just saw there,

00:22:07.797 --> 00:22:09.880
all of those are supported
for Flutter development

00:22:09.880 --> 00:22:11.500
by Devon and his team.

00:22:11.500 --> 00:22:15.370
There's a bunch of
engineers working on them.

00:22:15.370 --> 00:22:17.710
I think they're all going
to end up coexisting.

00:22:17.710 --> 00:22:18.855
Everybody likes their--

00:22:18.855 --> 00:22:19.480
WM LELER: Yeah.

00:22:19.480 --> 00:22:22.150
I mean, I think, during the
keynote, most of the demos

00:22:22.150 --> 00:22:23.290
were on the VSCode.

00:22:23.290 --> 00:22:26.275
A lot of people internal
in Flutter use VSCode.

00:22:26.275 --> 00:22:28.150
ANDREW BROGDON: And
there's a lot of people--

00:22:28.150 --> 00:22:30.550
Phillip, I think, likes
Android Studio normally.

00:22:30.550 --> 00:22:32.310
I use IntelliJ.

00:22:32.310 --> 00:22:34.960
There are people,
engineers on the team that

00:22:34.960 --> 00:22:37.922
use the text editor,
that use VI or Emacs or--

00:22:37.922 --> 00:22:39.630
WM LELER: Yeah, you
have to mention Emacs

00:22:39.630 --> 00:22:40.080
or you'll be in trouble.

00:22:40.080 --> 00:22:41.207
ANDREW BROGDON: You
got to use both.

00:22:41.207 --> 00:22:42.141
WM LELER: Exactly.

00:22:42.141 --> 00:22:45.040
But I think one of the
differences is, I think,

00:22:45.040 --> 00:22:49.320
some of the new features do
appear on IntelliJ first,

00:22:49.320 --> 00:22:53.210
but they get to
VSCode very quickly.

00:22:53.210 --> 00:22:56.410
So I think this is going to be
just like every other question

00:22:56.410 --> 00:22:57.490
people ask us about this.

00:22:57.490 --> 00:22:59.060
It's like-- which
one's the best?

00:22:59.060 --> 00:23:00.820
The best is the one
that you already know

00:23:00.820 --> 00:23:03.160
how to use, and just use it.

00:23:03.160 --> 00:23:05.410
I happen to use
IntelliJ just because I

00:23:05.410 --> 00:23:08.140
have to end up testing a lot of
the new features that come out.

00:23:08.140 --> 00:23:13.420
I actually work with Devon and
the rest of the tooling team,

00:23:13.420 --> 00:23:15.370
so they throw a
lot of things at me

00:23:15.370 --> 00:23:17.860
because I'm a good
idiot for idiot testing.

00:23:17.860 --> 00:23:22.180
But it really depends on
what's important to you,

00:23:22.180 --> 00:23:24.550
but it really is up
to you what you use.

00:23:24.550 --> 00:23:27.920
There's not really a huge
difference between them.

00:23:27.920 --> 00:23:29.889
So I've got one more
that I have to ask.

00:23:29.889 --> 00:23:31.430
ANDREW BROGDON: All
right, go for it.

00:23:31.430 --> 00:23:33.263
WM LELER: Because we're
running out of time.

00:23:34.840 --> 00:23:37.060
The question is-- and
it's a great question

00:23:37.060 --> 00:23:38.350
because it answers itself.

00:23:38.350 --> 00:23:41.654
The question is, how do
you pronounce Fuchsia?

00:23:41.654 --> 00:23:45.870
ANDREW BROGDON: [LAUGHS]
A question about Fuchsia

00:23:45.870 --> 00:23:47.206
I actually know how to answer.

00:23:47.206 --> 00:23:48.330
You've already answered it.

00:23:48.330 --> 00:23:50.130
WM LELER: That's one of the
few questions about Fuchsia

00:23:50.130 --> 00:23:51.314
that we can actually answer.

00:23:51.314 --> 00:23:52.730
ANDREW BROGDON:
Yes, that's right.

00:23:52.730 --> 00:23:55.313
WM LELER: If you don't know what
Fuchsia is, it's open source.

00:23:55.313 --> 00:23:56.484
You can go look at it.

00:23:56.484 --> 00:23:58.150
That's about all we
should say about it.

00:23:58.150 --> 00:23:59.830
ANDREW BROGDON: That's
about all I know about it.

00:23:59.830 --> 00:24:01.954
One of the reasons I like
working on an open source

00:24:01.954 --> 00:24:04.060
project is that I'm not
good at keeping secrets,

00:24:04.060 --> 00:24:06.160
so I just don't learn
them in the first place.

00:24:06.160 --> 00:24:07.990
Everything with
Flutter is in the open,

00:24:07.990 --> 00:24:09.880
so it's very easy to talk about.

00:24:09.880 --> 00:24:11.334
Don't ever have
to worry about it.

00:24:11.334 --> 00:24:13.750
WM LELER: Do you have anything
coming from the livestream?

00:24:13.750 --> 00:24:15.070
ANDREW BROGDON: Let me
double check real quick.

00:24:15.070 --> 00:24:17.100
WM LELER: Because we're
kind of running out of time.

00:24:17.100 --> 00:24:18.100
ANDREW BROGDON: I
know, we're going

00:24:18.100 --> 00:24:19.766
to have to let everybody
go in a minute.

00:24:22.429 --> 00:24:23.155
Let's see.

00:24:26.249 --> 00:24:27.540
WM LELER: Anything interesting?

00:24:27.540 --> 00:24:29.220
ANDREW BROGDON: There's a
question about accessibility

00:24:29.220 --> 00:24:30.090
that just came up.

00:24:30.090 --> 00:24:31.850
Of course, accessibility
is a big concern.

00:24:31.850 --> 00:24:34.350
When I joined the team, one of
my first meetings on the team

00:24:34.350 --> 00:24:36.570
was an accessibility--

00:24:36.570 --> 00:24:39.330
not a review, but the person
who does accessibility reviews

00:24:39.330 --> 00:24:42.037
came in and talked to us
about the tools that we have

00:24:42.037 --> 00:24:43.620
and how to use-- how
to take advantage

00:24:43.620 --> 00:24:46.140
of the native ones
in Android and iOS.

00:24:46.140 --> 00:24:49.020
There is an accessibility that
Symantec Tree and Flutter--

00:24:49.020 --> 00:24:50.880
if you ever see that
referenced, that is,

00:24:50.880 --> 00:24:52.740
in part, for accessibility.

00:24:52.740 --> 00:24:54.780
It's a feature that's
been designed into Flutter

00:24:54.780 --> 00:24:58.100
from very early on.

00:24:58.100 --> 00:25:01.490
What else do we have here?

00:25:01.490 --> 00:25:04.165
Someone noted that they're
installing Flutter right now.

00:25:04.165 --> 00:25:04.790
WM LELER: Yeah!

00:25:04.790 --> 00:25:05.873
ANDREW BROGDON: Well done.

00:25:05.873 --> 00:25:07.316
Good on you.

00:25:07.316 --> 00:25:09.690
WM LELER: You're obviously
not here at the party, though.

00:25:09.690 --> 00:25:12.254
ANDREW BROGDON: Somebody was
wondering about Positioned,

00:25:12.254 --> 00:25:13.170
which was a widget I--

00:25:13.170 --> 00:25:13.410
WM LELER: What?

00:25:13.410 --> 00:25:15.330
ANDREW BROGDON: Positioned,
which was a widget

00:25:15.330 --> 00:25:17.550
that I used earlier.

00:25:17.550 --> 00:25:20.220
Positioned is a widget used with
stacks, sort of like Expanded

00:25:20.220 --> 00:25:21.200
is used with a row.

00:25:21.200 --> 00:25:23.460
So with a stack,
you are stacking up

00:25:23.460 --> 00:25:28.579
children one on top of each
other, and you use Positioned,

00:25:28.579 --> 00:25:30.870
maybe you want to have a
small one on top of a big one,

00:25:30.870 --> 00:25:32.797
and you want it in the
lower left-hand corner.

00:25:32.797 --> 00:25:34.380
Or you want to make
sure it completely

00:25:34.380 --> 00:25:38.280
stretches to fill the entire
height and width of the stack.

00:25:38.280 --> 00:25:41.340
That's what Positioned is
for, and it's meant-- usually,

00:25:41.340 --> 00:25:46.400
it's the first order
child of a stack.

00:25:46.400 --> 00:25:48.306
WM LELER: Awesome.

00:25:48.306 --> 00:25:51.120
ANDREW BROGDON: Some people
calling out issue numbers.

00:25:51.120 --> 00:25:52.375
So they're looking at the--

00:25:52.375 --> 00:25:52.958
WM LELER: App?

00:25:52.958 --> 00:25:54.270
ANDREW BROGDON: Yeah.

00:25:54.270 --> 00:25:56.640
Somebody's asking about
the impact of Flutter

00:25:56.640 --> 00:25:57.592
on the app size.

00:25:57.592 --> 00:25:59.550
That is something that
matters a lot, certainly

00:25:59.550 --> 00:26:01.740
in certain parts of the world.

00:26:01.740 --> 00:26:05.250
Right now on Android, another
number is just over 4 megs

00:26:05.250 --> 00:26:08.250
to get you just the engine
and the basic widgets.

00:26:08.250 --> 00:26:09.750
That number was
much higher when--

00:26:09.750 --> 00:26:11.020
just when I joined the team.

00:26:11.020 --> 00:26:13.320
I think it was like 6
or 8 or something like.

00:26:13.320 --> 00:26:15.610
WM LELER: It was
6.7 for a while,

00:26:15.610 --> 00:26:18.060
and they actually had
not done any work trying

00:26:18.060 --> 00:26:18.786
to get that down.

00:26:18.786 --> 00:26:20.160
And finally,
somebody said, well,

00:26:20.160 --> 00:26:22.830
let me play with it a little
bit, and it dropped down to 4.

00:26:22.830 --> 00:26:23.760
ANDREW BROGDON: They're
like, this is it.

00:26:23.760 --> 00:26:24.950
Now it's time to
do the shrinking.

00:26:24.950 --> 00:26:27.533
WM LELER: And they're not even
willing to say that it would be

00:26:27.533 --> 00:26:29.900
that hard to do it even better.

00:26:29.900 --> 00:26:32.460
They got rid of that much
just by eliminating things

00:26:32.460 --> 00:26:37.080
that were naturally being
generated by the build process,

00:26:37.080 --> 00:26:38.490
but weren't being used.

00:26:38.490 --> 00:26:40.260
He just figured that
out and stopped those

00:26:40.260 --> 00:26:41.186
from being emitted.

00:26:41.186 --> 00:26:42.810
So there's almost
certainly more things

00:26:42.810 --> 00:26:44.550
that they can do to
get the space down,

00:26:44.550 --> 00:26:46.560
and I know that's something
they're still working on.

00:26:46.560 --> 00:26:47.460
ANDREW BROGDON: I think
it's actually part

00:26:47.460 --> 00:26:49.330
of the CI process for the SDK.

00:26:49.330 --> 00:26:51.810
I think they build an app just
to see if they've bloated it

00:26:51.810 --> 00:26:54.360
at all, and look at that
as one of the metrics

00:26:54.360 --> 00:26:56.180
every time they make a change.

00:26:56.180 --> 00:26:58.660
So it's definitely on the
team's mind and something

00:26:58.660 --> 00:27:00.010
that's very important.

00:27:00.010 --> 00:27:02.550
I think we're going to be
running out of time here quite

00:27:02.550 --> 00:27:03.050
soon.

00:27:03.050 --> 00:27:05.730
Maybe we have time for one more.

00:27:05.730 --> 00:27:08.225
Do you have one more from
Twitter maybe we can cover?

00:27:08.225 --> 00:27:08.850
WM LELER: Sure.

00:27:08.850 --> 00:27:11.820
Can you talk about artificial
intelligence and machine

00:27:11.820 --> 00:27:13.850
learning integration on Flutter?

00:27:13.850 --> 00:27:15.610
ANDREW BROGDON: Sure.

00:27:15.610 --> 00:27:17.790
Well, you had a great
demonstration, obviously,

00:27:17.790 --> 00:27:19.980
with what you saw
in the keynote.

00:27:19.980 --> 00:27:21.750
Maurice is working
on some great things.

00:27:21.750 --> 00:27:23.730
We're hoping to have
a devrel sample for ML

00:27:23.730 --> 00:27:26.010
in Flutter in the
coming quarter,

00:27:26.010 --> 00:27:29.250
in part because we just
really want to build it.

00:27:29.250 --> 00:27:31.987
I mean, who doesn't want to
build something like that?

00:27:31.987 --> 00:27:32.820
And so that's there.

00:27:32.820 --> 00:27:35.790
For more advanced
ML cases, where

00:27:35.790 --> 00:27:38.850
you might want more direct
access to TFLite or something

00:27:38.850 --> 00:27:43.150
like that, platform channels is
a way that you can go as well.

00:27:43.150 --> 00:27:45.210
So like I said--

00:27:45.210 --> 00:27:46.860
we've been saying
for a while now.

00:27:46.860 --> 00:27:48.690
With Flutter, you
have a great degree

00:27:48.690 --> 00:27:52.530
of freedom for things
with platform channels.

00:27:52.530 --> 00:27:55.260
And so if you ever see a plugin
that's not quite your use case,

00:27:55.260 --> 00:27:58.480
or you don't see a plugin for
a tool that you want to use,

00:27:58.480 --> 00:28:00.120
you can always go
use it yourself.

00:28:00.120 --> 00:28:03.330
You can always build that
bridge yourself and get access

00:28:03.330 --> 00:28:04.540
to it that way.

00:28:04.540 --> 00:28:06.450
And when you do, please
post it on GitHub.

00:28:06.450 --> 00:28:10.652
Make a package out of it so the
next person can use it as well.

00:28:10.652 --> 00:28:11.610
WM LELER: That's right.

00:28:11.610 --> 00:28:13.235
ANDREW BROGDON: All
right, I think we--

00:28:13.235 --> 00:28:15.310
WM LELER: I've got one more.

00:28:15.310 --> 00:28:16.560
What about Code Push?

00:28:16.560 --> 00:28:18.160
Is there going to
be a Code Push, sort

00:28:18.160 --> 00:28:19.560
of like Microsoft Code Push?

00:28:19.560 --> 00:28:21.150
ANDREW BROGDON: Code Push?

00:28:21.150 --> 00:28:21.720
Sure.

00:28:21.720 --> 00:28:23.520
WM LELER: Might want to define
it because not everybody knows

00:28:23.520 --> 00:28:23.790
what Code Push is.

00:28:23.790 --> 00:28:25.920
ANDREW BROGDON: Code Push
is a very popular piece

00:28:25.920 --> 00:28:28.560
of technology that Microsoft,
I believe, has made and--

00:28:28.560 --> 00:28:30.390
open sourced I think--

00:28:30.390 --> 00:28:34.770
to push live code to an
app that has been released.

00:28:34.770 --> 00:28:37.210
I think, with React
Native for example,

00:28:37.210 --> 00:28:39.090
because they're
using a JS VM, you

00:28:39.090 --> 00:28:44.020
can push new JS code
to the VM using this.

00:28:44.020 --> 00:28:46.650
And so this is something--
the way Dart works in debug,

00:28:46.650 --> 00:28:49.630
is you have a VM, and you
have just-in-time compilation.

00:28:49.630 --> 00:28:51.540
But when you build
for release, you

00:28:51.540 --> 00:28:53.030
are compiling a
native [INAUDIBLE]

00:28:53.030 --> 00:28:55.590
binary to a static
[INAUDIBLE],, and so you are not

00:28:55.590 --> 00:28:58.060
using a just-in-time
compiler at that point.

00:28:58.060 --> 00:29:01.020
And so it's not something
that's supported yet,

00:29:01.020 --> 00:29:03.810
but I've heard this--
like, hallway conversations

00:29:03.810 --> 00:29:04.966
about this.

00:29:04.966 --> 00:29:06.090
So it's the kind of thing--

00:29:06.090 --> 00:29:08.010
I don't know if it has a
definite place on the roadmap,

00:29:08.010 --> 00:29:09.820
but it's definitely
in people's heads.

00:29:09.820 --> 00:29:11.320
And I think we'll
end up there soon.

00:29:11.320 --> 00:29:14.010
WM LELER: I know that
people are looking at it.

00:29:14.010 --> 00:29:16.056
I just don't know if
it's on the schedule yet.

00:29:16.056 --> 00:29:17.430
I have to say, I
see that they're

00:29:17.430 --> 00:29:20.730
going to take a group photo
of everybody who's here,

00:29:20.730 --> 00:29:24.259
so I think this is a great time
for us to say goodbye and get

00:29:24.259 --> 00:29:25.050
in the group photo.

00:29:25.050 --> 00:29:26.049
ANDREW BROGDON: So yeah.

00:29:26.049 --> 00:29:28.307
So obviously, we weren't
able to get all--

00:29:28.307 --> 00:29:29.890
we had a lot of great
questions today.

00:29:29.890 --> 00:29:31.473
We weren't able to
get to all of them.

00:29:31.473 --> 00:29:33.200
So if we didn't get
to your question,

00:29:33.200 --> 00:29:35.170
we will try to get to
them all after the fact

00:29:35.170 --> 00:29:36.944
and go in and answer on Twitter.

00:29:36.944 --> 00:29:38.860
If we saw one on YouTube,
we'll try and get it

00:29:38.860 --> 00:29:39.700
on the "Boring Show."

00:29:39.700 --> 00:29:42.033
If you've ever seen that,
it's sort of our video podcast

00:29:42.033 --> 00:29:45.526
where we answer questions
and hack on things.

00:29:45.526 --> 00:29:47.650
We also want to leave you
with a bunch of resources

00:29:47.650 --> 00:29:49.540
that we have to grow
as a Flutter developer.

00:29:49.540 --> 00:29:51.665
Some of them-- there's a
ton made by the community,

00:29:51.665 --> 00:29:54.123
and we on the Flutter team have
some that we can offer you.

00:29:54.123 --> 00:29:55.900
We have the Flutter
Samples repo.

00:29:55.900 --> 00:29:57.085
We have the Docs.

00:29:57.085 --> 00:29:58.861
CROWD: Woo!

00:29:58.861 --> 00:30:00.860
ANDREW BROGDON: We have
the Docs, the Code Labs,

00:30:00.860 --> 00:30:02.770
the Flutter Cookbook,
and Flutter.IO.

00:30:05.170 --> 00:30:06.170
WM LELER: I think they--

00:30:06.170 --> 00:30:06.910
ANDREW BROGDON:
They're clapping for us

00:30:06.910 --> 00:30:08.270
WM LELER: [INAUDIBLE].

00:30:08.270 --> 00:30:09.770
ANDREW BROGDON: You
can come join us

00:30:09.770 --> 00:30:12.830
on Gitter on our Flutter
slash Flutter channel,

00:30:12.830 --> 00:30:14.540
on Twitter @FLUTTER.IO.

00:30:14.540 --> 00:30:16.610
We also have a big
playlist of YouTube videos

00:30:16.610 --> 00:30:19.450
we've made, like the "Boring
Show" and "Widget of the Week."

00:30:19.450 --> 00:30:23.707
And speaking of YouTube, I
need to thank the small army

00:30:23.707 --> 00:30:25.540
of people behind the
scenes tonight who have

00:30:25.540 --> 00:30:26.707
helped us put this together.

00:30:26.707 --> 00:30:27.956
Let me just name some of them.

00:30:27.956 --> 00:30:30.620
We have John and Adam as
tech lead and tech support.

00:30:30.620 --> 00:30:32.420
We've got Simon to
the back on audio.

00:30:32.420 --> 00:30:34.140
Neil is the project manager.

00:30:34.140 --> 00:30:36.620
Derek, Daniel, Luke, and
Rick are on graphics.

00:30:36.620 --> 00:30:39.740
The social team are
Robert, Justin, and David.

00:30:39.740 --> 00:30:42.410
Crystal, Gabe, and
Phil are producing.

00:30:42.410 --> 00:30:43.590
Ash is directing.

00:30:43.590 --> 00:30:44.840
He is Wm Leler.

00:30:44.840 --> 00:30:46.360
I am Andrew Brogdon.

00:30:46.360 --> 00:30:48.452
Good night from Flutter
Live and happy coding.

00:30:48.452 --> 00:30:49.910
WM LELER: We have
had a great time.

00:30:49.910 --> 00:30:51.410
Thank you, all.

00:30:51.410 --> 00:30:54.460
[THEME MUSIC]

