WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.874
[MUSIC PLAYING]

00:00:02.874 --> 00:00:04.290
CHRIS BANES: So,
hello Android Dev

00:00:04.290 --> 00:00:08.130
Summit and welcome to the
Support Library Guts and Glory.

00:00:08.130 --> 00:00:11.010
My name is Chris Banes and I'm
an engineer on the developer

00:00:11.010 --> 00:00:11.969
relations team.

00:00:11.969 --> 00:00:14.260
I've been at Google now for
roughly three years, always

00:00:14.260 --> 00:00:16.050
working on support libraries.

00:00:16.050 --> 00:00:17.480
ADAM POWELL: And
I'm Adam Powell.

00:00:17.480 --> 00:00:20.090
You may have seen me
earlier this morning.

00:00:20.090 --> 00:00:23.670
I've been at Google for
five, six years now,

00:00:23.670 --> 00:00:26.990
working on Android UI
toolkit and framework.

00:00:26.990 --> 00:00:28.670
CHRIS BANES: Right,
so when I first

00:00:28.670 --> 00:00:30.870
started thinking about
this talk It was originally

00:00:30.870 --> 00:00:33.590
going to be like a deep dive
on sort of the internals, sort

00:00:33.590 --> 00:00:35.883
of support libraries, how
we've implemented them

00:00:35.883 --> 00:00:37.470
and all that kind of stuff.

00:00:37.470 --> 00:00:40.053
But then I realized that there's
a lot of developers out there

00:00:40.053 --> 00:00:42.620
that don't actually know some
of the basics, how we actually

00:00:42.620 --> 00:00:44.140
architect it.

00:00:44.140 --> 00:00:46.410
So how you actually use it
and why you would use it.

00:00:46.410 --> 00:00:49.105
So we've got these
five questions of why--

00:00:49.105 --> 00:00:50.890
around the support library.

00:00:50.890 --> 00:00:54.730
So what it is, why you use it,
some implications of using it,

00:00:54.730 --> 00:00:57.980
how, and then some bugs.

00:00:57.980 --> 00:01:01.262
So let's first about
what it actually is.

00:01:01.262 --> 00:01:01.970
ADAM POWELL: So--

00:01:01.970 --> 00:01:03.011
CHRIS BANES: Yeah, go on.

00:01:03.011 --> 00:01:04.390
ADAM POWELL: Sure.

00:01:04.390 --> 00:01:06.050
So, what's included?

00:01:06.050 --> 00:01:08.890
The support library started out
as this very small component.

00:01:08.890 --> 00:01:10.500
We had the support-v4.jar.

00:01:10.500 --> 00:01:12.902
It was a very simple
piece, no resources, just

00:01:12.902 --> 00:01:14.360
a little bit of
code that you could

00:01:14.360 --> 00:01:17.110
add into your applications and
it provided some extra stuff

00:01:17.110 --> 00:01:19.980
that you could statically
link in your applications

00:01:19.980 --> 00:01:22.330
to gain more functionality.

00:01:22.330 --> 00:01:24.020
Over time, it's grown.

00:01:24.020 --> 00:01:26.150
It's grown into a number
of other libraries

00:01:26.150 --> 00:01:28.930
so saying the Android support
library hasn't really been

00:01:28.930 --> 00:01:31.230
accurate for several years now.

00:01:31.230 --> 00:01:33.560
And so we started growing
all these extra features,

00:01:33.560 --> 00:01:35.685
we've started adding
resources, and today this

00:01:35.685 --> 00:01:38.060
is really an integral part of
building any modern Android

00:01:38.060 --> 00:01:40.460
application.

00:01:40.460 --> 00:01:43.920
So the rough layout
or diagram of how

00:01:43.920 --> 00:01:45.580
the support
libraries look today,

00:01:45.580 --> 00:01:47.520
looks something like this.

00:01:47.520 --> 00:01:51.530
So, off to one side, we have
a series of feature libraries

00:01:51.530 --> 00:01:53.050
that are really
pretty standalone.

00:01:53.050 --> 00:01:56.210
They don't have a whole lot
of extra interdependencies.

00:01:56.210 --> 00:01:59.160
We've got stuff like the new
customtabs library for browsers

00:01:59.160 --> 00:02:02.894
to use, we have GridLayout,
cardview stands on its own,

00:02:02.894 --> 00:02:05.310
and we have the palette library
for extracting information

00:02:05.310 --> 00:02:06.365
from images.

00:02:06.365 --> 00:02:07.990
There are probably
a few more in there,

00:02:07.990 --> 00:02:10.900
but this kind of gives
you the basic idea.

00:02:10.900 --> 00:02:14.180
We have the core that is still
this basic support v4 library

00:02:14.180 --> 00:02:16.580
that we have from
the very beginning.

00:02:16.580 --> 00:02:19.480
Now, this really provides
a number of API shims

00:02:19.480 --> 00:02:21.090
for newer APIs that
have been added

00:02:21.090 --> 00:02:23.860
to the platform since
a given release.

00:02:23.860 --> 00:02:26.397
A lot of people
ask, OK, well YV4.

00:02:26.397 --> 00:02:27.480
where does this come from.

00:02:27.480 --> 00:02:29.510
Well, it comes from
what the min SDK

00:02:29.510 --> 00:02:34.104
level is for your application
when you use this library.

00:02:34.104 --> 00:02:35.770
So we support all the
way back to donut,

00:02:35.770 --> 00:02:38.720
which is I understand
still has many users today.

00:02:38.720 --> 00:02:40.450
Wait, no.

00:02:40.450 --> 00:02:43.700
So again, we've had
some legacy in here

00:02:43.700 --> 00:02:46.790
and you'll start to see that
in some of this as well.

00:02:46.790 --> 00:02:49.370
Some of the reasons for the
design of the support library

00:02:49.370 --> 00:02:50.640
and kind of how it's grown.

00:02:50.640 --> 00:02:53.720
It's grown very organically.

00:02:53.720 --> 00:02:56.470
So in addition to API
shins for new things,

00:02:56.470 --> 00:02:58.560
we've got back ports
of several items.

00:02:58.560 --> 00:03:01.530
So for example, the fragment
library from the fragment

00:03:01.530 --> 00:03:05.140
system that was introduced
in Android 3.0 Honeycomb,

00:03:05.140 --> 00:03:07.800
is available to
all applications.

00:03:07.800 --> 00:03:10.050
Even before that,
as and again we

00:03:10.050 --> 00:03:13.620
have a large, large number
of users on devices that old

00:03:13.620 --> 00:03:14.340
these days.

00:03:14.340 --> 00:03:16.440
However the fragment
support library

00:03:16.440 --> 00:03:19.530
has kept up to date with newer
features such as embedded child

00:03:19.530 --> 00:03:22.801
fragments and similar features.

00:03:22.801 --> 00:03:24.300
We've got other
standalone features,

00:03:24.300 --> 00:03:25.760
things like Viewpager.

00:03:25.760 --> 00:03:28.450
You'll recognize Viewpager
from any sort of tab

00:03:28.450 --> 00:03:29.752
UI across Android these days.

00:03:29.752 --> 00:03:31.960
This component doesn't
actually have a representation

00:03:31.960 --> 00:03:33.919
in the Android framework
as a public API,

00:03:33.919 --> 00:03:36.210
instead this just exists as
part of the support library

00:03:36.210 --> 00:03:37.350
that you can use anywhere.

00:03:37.350 --> 00:03:42.230
This is a feature that's
become very stable over time.

00:03:42.230 --> 00:03:44.220
On top of the support-v4
libraries and sort

00:03:44.220 --> 00:03:46.600
of the infrastructural
shims that they support,

00:03:46.600 --> 00:03:48.250
you've got items
like RecyclerView.

00:03:48.250 --> 00:03:50.630
So, you just sat through
a wonderful presentation

00:03:50.630 --> 00:03:52.410
about RecyclerView here.

00:03:52.410 --> 00:03:56.180
RecyclerView, internally
uses a lot of those API shims

00:03:56.180 --> 00:03:58.030
to access functionality
that may or may not

00:03:58.030 --> 00:03:59.500
be available under the hood.

00:03:59.500 --> 00:04:01.291
It's the sort of layering
that we've really

00:04:01.291 --> 00:04:05.020
tried to set up across some of
the support librarries so far.

00:04:05.020 --> 00:04:07.650
Going a step further,
we have some polyfills.

00:04:07.650 --> 00:04:11.560
So we have backported large
chunks of the UI toolkit

00:04:11.560 --> 00:04:15.530
as it's advanced forward
in terms of material design

00:04:15.530 --> 00:04:18.110
and even hollow before it, in
the form of the app compiled

00:04:18.110 --> 00:04:18.820
library.

00:04:18.820 --> 00:04:21.519
Now, this really tries to track
a lot of the other framework

00:04:21.519 --> 00:04:23.220
changes that have had.

00:04:23.220 --> 00:04:26.404
So it just sort of fills in
any missing functionality

00:04:26.404 --> 00:04:27.820
in older versions
of the platform.

00:04:30.500 --> 00:04:33.310
Now with that as a base, we've
built some other components

00:04:33.310 --> 00:04:35.057
that sit on top of these layers.

00:04:35.057 --> 00:04:36.640
We have things like
Mediarouter, which

00:04:36.640 --> 00:04:38.840
services all of
the cast endpoints

00:04:38.840 --> 00:04:42.400
for talking to Chromecast
devices and similar.

00:04:42.400 --> 00:04:44.360
We have the design
libraries which

00:04:44.360 --> 00:04:46.990
provide all sorts of modern
material design components

00:04:46.990 --> 00:04:49.840
on top of the basis that
AppCompat has created.

00:04:49.840 --> 00:04:53.229
We have preferences system which
updates the preferences system

00:04:53.229 --> 00:04:55.270
that you know and love
from the Android framework

00:04:55.270 --> 00:04:57.850
to also work on
other form factors.

00:04:57.850 --> 00:04:59.442
And we've got the
Leanback Library,

00:04:59.442 --> 00:05:01.775
which allows you to create
great 10-foot UI experiences.

00:05:04.340 --> 00:05:07.930
So, why do we have all this?

00:05:07.930 --> 00:05:09.916
Well, part of this was
about the release cycle.

00:05:09.916 --> 00:05:12.040
So we want to be able to
do some unbundled releases

00:05:12.040 --> 00:05:14.484
and get more of these features
out to developers sooner.

00:05:14.484 --> 00:05:16.400
We also wanted to be
able to get bug fixes out

00:05:16.400 --> 00:05:19.330
on an app developer's schedule,
not on a platform release

00:05:19.330 --> 00:05:20.020
schedule.

00:05:20.020 --> 00:05:22.061
And we also wanted to make
new features available

00:05:22.061 --> 00:05:23.930
in between these
releases, as well.

00:05:23.930 --> 00:05:26.230
So in this case,
a static library

00:05:26.230 --> 00:05:28.190
is really more the
tool to use here.

00:05:28.190 --> 00:05:30.500
You, as the app developer,
are in alternate control

00:05:30.500 --> 00:05:32.390
of when you update this code.

00:05:32.390 --> 00:05:35.070
However, that also means
that you don't automatically

00:05:35.070 --> 00:05:37.620
take advantage of
updates and bug fixes

00:05:37.620 --> 00:05:40.290
that are released perhaps
off cadence from your own app

00:05:40.290 --> 00:05:41.046
releases.

00:05:41.046 --> 00:05:41.920
So it's double edged.

00:05:41.920 --> 00:05:42.670
CHRIS BANES: Yeah.

00:05:42.670 --> 00:05:45.100
So hopefully, over the
past couple of releases

00:05:45.100 --> 00:05:46.699
you've seen that
we've been doing

00:05:46.699 --> 00:05:47.990
more and more interim releases.

00:05:47.990 --> 00:05:49.406
So previously, the
support library

00:05:49.406 --> 00:05:51.560
has always tied to
platform release.

00:05:51.560 --> 00:05:54.330
But since 21, I
was the last one,

00:05:54.330 --> 00:05:56.330
we've been doing more and
more interim releases.

00:05:56.330 --> 00:05:58.496
And that's because the
support libraries have become

00:05:58.496 --> 00:06:00.660
more and more important
to you guys, which

00:06:00.660 --> 00:06:02.912
means that we need to
start fixing things quicker

00:06:02.912 --> 00:06:03.620
and we know that.

00:06:06.670 --> 00:06:09.362
ADAM POWELL: So RecyclerView is
one example of the components

00:06:09.362 --> 00:06:10.320
that we've got in here.

00:06:10.320 --> 00:06:13.940
Again, we just sat through a
whole talk based on that alone.

00:06:13.940 --> 00:06:17.430
We've got data-set windowing
within a larger data set.

00:06:17.430 --> 00:06:20.060
Improves upon similar framework
components such ListView.

00:06:20.060 --> 00:06:23.970
And it also supports nested
scrolling by way of the V4 ship

00:06:23.970 --> 00:06:25.320
APIs we've made available.

00:06:27.850 --> 00:06:29.691
So, just a quick run
through since you

00:06:29.691 --> 00:06:31.065
just saw a bunch
of this content.

00:06:33.572 --> 00:06:35.030
Plug the talk that
was here before,

00:06:35.030 --> 00:06:37.950
if you missed it go ahead
and go watch the video.

00:06:37.950 --> 00:06:40.467
Animations are prime
example of something

00:06:40.467 --> 00:06:42.550
that we were able to offer
in RecyclerView that we

00:06:42.550 --> 00:06:44.300
couldn't necessarily
back port to existing

00:06:44.300 --> 00:06:45.710
versions of ListView.

00:06:45.710 --> 00:06:49.260
Being able to make this
available to previous platform

00:06:49.260 --> 00:06:52.185
versions was one of the reasons
RecyclerView was developed

00:06:52.185 --> 00:06:54.350
in the manner that it was.

00:06:54.350 --> 00:06:55.320
It's pluggable.

00:06:55.320 --> 00:06:59.450
So you can provide your
own components and pieces.

00:06:59.450 --> 00:07:01.896
Layout managers,
item decorations,

00:07:01.896 --> 00:07:03.270
treatment of
recycled view pools,

00:07:03.270 --> 00:07:07.790
all the complexity that you
may want to add to this or not.

00:07:07.790 --> 00:07:10.990
And it really tries to enforce
some better practices that

00:07:10.990 --> 00:07:13.240
built up around something
like ListView over time.

00:07:16.523 --> 00:07:17.442
AppCompat.

00:07:17.442 --> 00:07:18.400
CHRIS BANES: AppCompat.

00:07:18.400 --> 00:07:18.790
So, AppCompat--

00:07:18.790 --> 00:07:19.280
ADAM POWELL: It's his baby.

00:07:19.280 --> 00:07:20.031
CHRIS BANES: Yeah.

00:07:20.031 --> 00:07:21.738
So this is the thing
I've been working on

00:07:21.738 --> 00:07:22.660
since I joined Google.

00:07:22.660 --> 00:07:25.110
It's my starter
project, actually.

00:07:25.110 --> 00:07:28.270
And it generally trying to be
a massive polyfill of the UI

00:07:28.270 --> 00:07:29.430
toolkit.

00:07:29.430 --> 00:07:31.330
Now, as the UI
toolkit has changed

00:07:31.330 --> 00:07:33.230
over the different
platform releases,

00:07:33.230 --> 00:07:34.960
we tried to keep
AppCompat up to date.

00:07:34.960 --> 00:07:38.830
So, originally it started out
as an action bar backport.

00:07:38.830 --> 00:07:40.825
And I'm sure you were
all using the action bar

00:07:40.825 --> 00:07:43.110
shell at the time.

00:07:43.110 --> 00:07:45.800
Now, and many question why we
actually released an action bar

00:07:45.800 --> 00:07:47.440
compact, which is this.

00:07:47.440 --> 00:07:49.410
And now the reason
why we did that

00:07:49.410 --> 00:07:51.700
is so that we can give
you what it is today.

00:07:51.700 --> 00:07:54.020
So that's a base that
we built and now we've

00:07:54.020 --> 00:07:56.050
kept outside the framework.

00:07:56.050 --> 00:07:56.610
And, so yeah.

00:07:56.610 --> 00:07:59.151
It backports framework features,
but one thing you'll notice,

00:07:59.151 --> 00:08:00.190
it goes no further.

00:08:00.190 --> 00:08:03.340
It will never add new features
that aren't in the framework.

00:08:03.340 --> 00:08:07.740
And its goal is to always stay
up to date with the framework.

00:08:07.740 --> 00:08:10.010
We may be a release sort
of behind, but with those

00:08:10.010 --> 00:08:11.926
interim releases that
we talked about earlier.

00:08:11.926 --> 00:08:14.501
We will never be too far.

00:08:14.501 --> 00:08:16.000
So there are three
main things which

00:08:16.000 --> 00:08:17.780
I think AppCompat gives you.

00:08:17.780 --> 00:08:18.915
The first, is it's themes.

00:08:18.915 --> 00:08:22.282
It gives you one theme
to extend or use,

00:08:22.282 --> 00:08:24.740
which works and looks most of
the same across all different

00:08:24.740 --> 00:08:25.445
API levels.

00:08:25.445 --> 00:08:26.820
So, that's including
Gingerbread,

00:08:26.820 --> 00:08:28.361
if it's a hollow,
if it's a material.

00:08:28.361 --> 00:08:31.110
It gives you one thing to use.

00:08:31.110 --> 00:08:32.789
Second, is Toolbar.

00:08:32.789 --> 00:08:34.650
Now, as we said
earlier we give you

00:08:34.650 --> 00:08:36.295
the action bar and in API 11.

00:08:36.295 --> 00:08:37.970
But there was always
this black box.

00:08:37.970 --> 00:08:38.120
Right?

00:08:38.120 --> 00:08:39.460
You couldn't really control it.

00:08:39.460 --> 00:08:41.200
You can Animate it,
you never really

00:08:41.200 --> 00:08:42.799
had much control over it.

00:08:42.799 --> 00:08:44.380
And so toolbar is
the manifestation

00:08:44.380 --> 00:08:46.144
of that as an actual widget.

00:08:46.144 --> 00:08:47.560
You control it
from top to bottom.

00:08:47.560 --> 00:08:48.750
Vary it's new hierarchy.

00:08:48.750 --> 00:08:50.520
You can animate it,
you can scroll it,

00:08:50.520 --> 00:08:53.230
you can do whatever
you want with it.

00:08:53.230 --> 00:08:54.544
And secondly, Tinting.

00:08:54.544 --> 00:08:55.960
It's probably wrong
time for this,

00:08:55.960 --> 00:08:58.750
but in [INAUDIBLE] .material,
we've given these new

00:08:58.750 --> 00:09:01.990
attributes, which can control
the look and feel of your app.

00:09:01.990 --> 00:09:03.270
Frees colors and stuff.

00:09:03.270 --> 00:09:06.600
Now, AppCompat tries
to do that as well,

00:09:06.600 --> 00:09:08.510
using its own attributes.

00:09:08.510 --> 00:09:12.730
There are certain things,
which before don't quite work,

00:09:12.730 --> 00:09:16.810
so it's really important to
test and make sure it does.

00:09:16.810 --> 00:09:18.550
So we'll move on
to Design library.

00:09:18.550 --> 00:09:21.020
Which is kind of the library
above AppCompat, which means

00:09:21.020 --> 00:09:23.380
it goes beyond the framework.

00:09:23.380 --> 00:09:24.880
Anything in Design
library, is stuff

00:09:24.880 --> 00:09:26.985
that isn't in the framework.

00:09:26.985 --> 00:09:29.110
It's a UI feature library,
which tries to implement

00:09:29.110 --> 00:09:30.930
material design instructions.

00:09:30.930 --> 00:09:33.140
And so the stuff that
we think it is stable

00:09:33.140 --> 00:09:34.724
and that are good
instructions to use.

00:09:34.724 --> 00:09:35.473
ADAM POWELL: Yeah.

00:09:35.473 --> 00:09:37.020
More specifically,
the Design library

00:09:37.020 --> 00:09:39.270
offers us an outlet for
all of these components

00:09:39.270 --> 00:09:41.100
that may have sort
of a fashion life

00:09:41.100 --> 00:09:42.751
cycle associated with them.

00:09:42.751 --> 00:09:44.750
You can probably think
of a number of components

00:09:44.750 --> 00:09:46.333
over the years, that
we've introduced,

00:09:46.333 --> 00:09:48.979
that maybe haven't
stood the test of time.

00:09:48.979 --> 00:09:51.020
Some of these components
in the Android framework

00:09:51.020 --> 00:09:52.561
today have been
marked as deprecated,

00:09:52.561 --> 00:09:56.260
such as Android.Widget.Gallery
and some similar things

00:09:56.260 --> 00:09:59.470
that you may be able to recall.

00:09:59.470 --> 00:10:01.360
This basically
gives us an ability

00:10:01.360 --> 00:10:05.730
to still iterate, follow
some of these other trends

00:10:05.730 --> 00:10:08.040
as they move forward, but
still give you something

00:10:08.040 --> 00:10:09.740
that you can reasonably rely on.

00:10:12.429 --> 00:10:14.220
CHRIS BANES: So there's
four things which I

00:10:14.220 --> 00:10:16.060
think Design library gives you.

00:10:16.060 --> 00:10:19.740
The high value stuff basically.

00:10:19.740 --> 00:10:22.430
FloatingActionButton is probably
the most ubiquitous one.

00:10:22.430 --> 00:10:24.388
It's the thing where you
think material design.

00:10:24.388 --> 00:10:26.080
It's that circular button.

00:10:26.080 --> 00:10:29.550
Now there are some nuances
to how the UX spec is done.

00:10:29.550 --> 00:10:32.329
Which FloatingActionButton
actually sort of does for you.

00:10:32.329 --> 00:10:32.870
It's really--

00:10:32.870 --> 00:10:33.955
ADAM POWELL: It's just
an image button, though?

00:10:33.955 --> 00:10:34.410
Right?

00:10:34.410 --> 00:10:35.160
I mean, how hard could it be?

00:10:35.160 --> 00:10:35.860
CHRIS BANES: Well,
its just-- yeah.

00:10:35.860 --> 00:10:36.360
Exactly.

00:10:36.360 --> 00:10:38.751
The shadows really..

00:10:38.751 --> 00:10:40.250
So it's just--
Yeah-- Going on that,

00:10:40.250 --> 00:10:41.685
actually, so it won't
be probably don't

00:10:41.685 --> 00:10:44.350
know is that there's actually
a small little machine on FAB.

00:10:44.350 --> 00:10:45.891
It took me about a
week to implement.

00:10:47.410 --> 00:10:49.232
So you-- to actually
use it is really easy.

00:10:49.232 --> 00:10:50.690
Just place it into
your layout, you

00:10:50.690 --> 00:10:52.315
can change the icon
which is displayed.

00:10:52.315 --> 00:10:54.564
And there's some other stuff
that you can do, as well.

00:10:54.564 --> 00:10:56.750
But FloatingActionButton
handles certain stuff

00:10:56.750 --> 00:10:59.310
like it has the correct
Show and Hide animation,

00:10:59.310 --> 00:11:01.390
it handles itself
nicely with SnapBar.

00:11:01.390 --> 00:11:02.890
There's quite a lot
of functionality

00:11:02.890 --> 00:11:05.200
built straight into it.

00:11:05.200 --> 00:11:07.420
Secondly, is NavigationView.

00:11:07.420 --> 00:11:11.230
Now, material design is
quite prescriptive about how

00:11:11.230 --> 00:11:13.734
the site nav is displayed
and how it's laid out.

00:11:13.734 --> 00:11:15.650
And we've tried to give
you this sort of stock

00:11:15.650 --> 00:11:16.650
off the shelf component.

00:11:16.650 --> 00:11:20.177
Which you can drag straight into
draw layout and it just works.

00:11:20.177 --> 00:11:22.010
What it is the new
layout, it's pretty easy.

00:11:22.010 --> 00:11:23.593
There's two things
you should look at.

00:11:23.593 --> 00:11:25.230
The first is header layout.

00:11:25.230 --> 00:11:26.720
So that is the sort of header.

00:11:26.720 --> 00:11:29.130
It's a reference to
another layout, which

00:11:29.130 --> 00:11:30.451
will be displayed as a header.

00:11:30.451 --> 00:11:32.200
Usually, it'll be like
some kind of switch

00:11:32.200 --> 00:11:34.560
up some kind of branding.

00:11:34.560 --> 00:11:35.630
The second thing is menu.

00:11:35.630 --> 00:11:37.630
So that is actually
what gets populated

00:11:37.630 --> 00:11:39.501
into the NavigationView.

00:11:39.501 --> 00:11:40.875
Now we're using
menu because it's

00:11:40.875 --> 00:11:42.310
something you've already used.

00:11:42.310 --> 00:11:43.562
It's been there since API one.

00:11:43.562 --> 00:11:45.270
You've probably used
it for options menu,

00:11:45.270 --> 00:11:46.061
that kind of stuff.

00:11:46.061 --> 00:11:47.620
So you know exactly
how to use it.

00:11:47.620 --> 00:11:48.910
ADAM POWELL: More
specifically, it's declared.

00:11:48.910 --> 00:11:50.470
So it's easy for
tools to access.

00:11:50.470 --> 00:11:52.780
CHRIS BANES: Exactly.

00:11:52.780 --> 00:11:54.856
Snackbar, which is
the kind of new way

00:11:54.856 --> 00:11:56.752
to show temporary information.

00:11:56.752 --> 00:11:58.710
It's a bit different to
Toast in that it allows

00:11:58.710 --> 00:12:00.710
you to add an action to it.

00:12:00.710 --> 00:12:02.371
And also, it's swappable.

00:12:02.371 --> 00:12:03.870
There's a small
thing here where you

00:12:03.870 --> 00:12:06.992
can see that the FAB moves
up as the Snackbar comes in.

00:12:06.992 --> 00:12:08.575
That's all inbuilt
functionality, that

00:12:08.575 --> 00:12:10.490
just happens automatically.

00:12:10.490 --> 00:12:12.540
See here.

00:12:12.540 --> 00:12:14.480
And then lastly, this Tablayer.

00:12:14.480 --> 00:12:16.150
Now there are two types of tabs.

00:12:16.150 --> 00:12:18.080
Which is quite a mouthful.

00:12:18.080 --> 00:12:20.560
So there's fixed tabs on the
left, where each tab takes

00:12:20.560 --> 00:12:22.140
the same amount of space.

00:12:22.140 --> 00:12:24.747
And I'm grateful when you
have a small number of tabs,

00:12:24.747 --> 00:12:26.830
so you know there's going
to be three or four that

00:12:26.830 --> 00:12:28.382
are going to fit.

00:12:28.382 --> 00:12:29.840
On my right, you've
got scrollable.

00:12:29.840 --> 00:12:35.660
So they're for times when
you have an unknown number.

00:12:35.660 --> 00:12:37.980
So [INAUDIBLE] layout,
again, just tab layout.

00:12:37.980 --> 00:12:40.030
The attribute here to
look at is Tab Mode

00:12:40.030 --> 00:12:44.460
and you can switch between
scrollable and fixed.

00:12:44.460 --> 00:12:46.710
Now that we know that most
people using TabLayout

00:12:46.710 --> 00:12:48.251
are going to use it
with a ViewPager.

00:12:48.251 --> 00:12:51.080
So we have this method set
up with ViewPager, which

00:12:51.080 --> 00:12:52.170
handles all of it for you.

00:12:52.170 --> 00:12:55.480
Populates the TabLayout,
it sets the listeners

00:12:55.480 --> 00:12:57.430
so they all interact together.

00:12:57.430 --> 00:13:00.355
Works quite nicely.

00:13:00.355 --> 00:13:02.000
ADAM POWELL: All right.

00:13:02.000 --> 00:13:05.630
So we've added some other
things more recently, as well.

00:13:05.630 --> 00:13:07.499
Inspired by Android
Wear and really

00:13:07.499 --> 00:13:09.540
trying to get a lot of
other proportional layouts

00:13:09.540 --> 00:13:11.030
on a very small screen.

00:13:11.030 --> 00:13:14.120
We've got several variants on
existing layout managers that

00:13:14.120 --> 00:13:17.260
have been in the framework
for a while that now accepts

00:13:17.260 --> 00:13:20.750
percentages, as well as
the standard measurements

00:13:20.750 --> 00:13:22.440
that you know and love.

00:13:22.440 --> 00:13:25.390
So we've got frame layout
and relative layout here.

00:13:25.390 --> 00:13:29.020
And you can define
sizes of elements

00:13:29.020 --> 00:13:32.870
as a percentage of their parent,
rather than just as a wrap

00:13:32.870 --> 00:13:35.080
content or specific sizes.

00:13:35.080 --> 00:13:37.490
This differs from weight
in a few important ways.

00:13:37.490 --> 00:13:40.240
Just in terms of how it adds
up over time as elements

00:13:40.240 --> 00:13:41.310
come and go.

00:13:41.310 --> 00:13:43.350
So weight, it's
oftentimes a little bit

00:13:43.350 --> 00:13:47.490
awkward to go ahead
and sort of remeasure

00:13:47.490 --> 00:13:49.950
and rethink how some of
the stuff would layout.

00:13:49.950 --> 00:13:54.840
Where as the percentage makes it
much easier to express in line.

00:13:54.840 --> 00:13:57.380
So, this adds a couple of
specific layout params,

00:13:57.380 --> 00:13:59.180
attributes that you'll
want to know about.

00:13:59.180 --> 00:14:01.020
They work about how
they sound like they

00:14:01.020 --> 00:14:03.630
should from the description.

00:14:03.630 --> 00:14:05.800
So we have some Gotchas
in the support libraries.

00:14:05.800 --> 00:14:06.704
CHRIS BANES: No.

00:14:06.704 --> 00:14:07.370
ADAM POWELL: No.

00:14:07.370 --> 00:14:07.869
Never.

00:14:10.220 --> 00:14:14.620
So, when you're building
against the support libraries,

00:14:14.620 --> 00:14:16.560
the library major
version number really

00:14:16.560 --> 00:14:18.460
is the minimum
Compile SDK version

00:14:18.460 --> 00:14:20.350
that you need to declare.

00:14:20.350 --> 00:14:22.820
This is something that trips
up a number of developers

00:14:22.820 --> 00:14:25.030
and this is something
that isn't always clear

00:14:25.030 --> 00:14:26.295
just from the outset.

00:14:26.295 --> 00:14:28.706
We get a lot of variants
on this question

00:14:28.706 --> 00:14:30.830
as people move over to a
new release of the support

00:14:30.830 --> 00:14:31.330
libraries.

00:14:31.330 --> 00:14:33.100
Hey, my builds broken, why?

00:14:33.100 --> 00:14:35.590
This is probably why.

00:14:35.590 --> 00:14:39.260
So as we increment the
library major version number,

00:14:39.260 --> 00:14:42.910
you also need to compile against
the latest SDK in addition

00:14:42.910 --> 00:14:43.530
to that.

00:14:43.530 --> 00:14:46.512
CHRIS BANES: Have we
just leaked API 24?

00:14:46.512 --> 00:14:48.720
ADAM POWELL: There's going
to be an API 24 everybody,

00:14:48.720 --> 00:14:49.720
you heard it here first.

00:14:51.549 --> 00:14:54.090
So this is another number that
you're probably familiar with.

00:14:54.090 --> 00:14:57.300
Not only is it a handy
dandy power of two,

00:14:57.300 --> 00:15:00.540
it's also the decks
method reference limit.

00:15:00.540 --> 00:15:03.310
So, how big are all these
support libraries anyway?

00:15:03.310 --> 00:15:08.380
Well AppCompat is kind of a
few in terms of that method.

00:15:08.380 --> 00:15:09.730
v4 libaries, hmm OK.

00:15:09.730 --> 00:15:11.370
Well, that's a
little bit bigger.

00:15:14.500 --> 00:15:19.100
Design library and
RecyclerView too.

00:15:19.100 --> 00:15:19.600
OK.

00:15:19.600 --> 00:15:22.350
Well, that's kind
of a big number.

00:15:22.350 --> 00:15:24.840
That's also a lot to
ask developers to devote

00:15:24.840 --> 00:15:27.791
to some of these components.

00:15:27.791 --> 00:15:28.290
So--

00:15:28.290 --> 00:15:29.080
CHRIS BANES: Sorry,
one thing to notice

00:15:29.080 --> 00:15:30.830
that is that that's a
theoretical maximum.

00:15:30.830 --> 00:15:33.288
There will actually be some
double accounts in that number,

00:15:33.288 --> 00:15:34.080
as well.

00:15:34.080 --> 00:15:36.080
Just because like
those support libraries

00:15:36.080 --> 00:15:37.930
will be referenced
in framework methods.

00:15:37.930 --> 00:15:39.650
Now, if you use
those same methods,

00:15:39.650 --> 00:15:41.539
they won't be counted twice.

00:15:41.539 --> 00:15:42.330
ADAM POWELL: Right.

00:15:42.330 --> 00:15:44.538
So there's a little bit of
folding that happens here,

00:15:44.538 --> 00:15:49.050
but it also starts incrementing
the count pretty quickly.

00:15:49.050 --> 00:15:50.869
So, many of you have
probably already

00:15:50.869 --> 00:15:53.160
figured out that you can use
handy dandy proguard tools

00:15:53.160 --> 00:15:55.180
to take care of some
of this problem.

00:15:55.180 --> 00:15:57.800
You can set
minifyEnabled to true

00:15:57.800 --> 00:15:59.259
across the
Android.support package.

00:15:59.259 --> 00:16:01.550
And well, that's a little
bit more manageable than what

00:16:01.550 --> 00:16:02.500
we had before.

00:16:02.500 --> 00:16:05.120
Of course, the more of the
support libraries you use,

00:16:05.120 --> 00:16:06.745
the more you're going
to be pulling in.

00:16:06.745 --> 00:16:08.700
The Cheesesquare
example app, so far we

00:16:08.700 --> 00:16:10.590
were able to cut down
over half of that

00:16:10.590 --> 00:16:14.400
and it still uses a fair number
of the pieces of functionality

00:16:14.400 --> 00:16:15.072
available.

00:16:15.072 --> 00:16:16.780
CHRIS BANES: Yeah, I
wanted to know that.

00:16:16.780 --> 00:16:19.140
That is the very
basic proguard config.

00:16:19.140 --> 00:16:21.817
You could go further into that
and start stripping more stuff.

00:16:21.817 --> 00:16:22.900
ADAM POWELL: That's right.

00:16:22.900 --> 00:16:24.720
So of course, proguard
isn't optimal.

00:16:24.720 --> 00:16:29.940
Especially when you're in a
sort of very tight modify,

00:16:29.940 --> 00:16:33.732
compile, debug, run, test
type of development cycle.

00:16:33.732 --> 00:16:35.440
At that point, you'll
have plenty of time

00:16:35.440 --> 00:16:37.148
to check your favorite
social media sites

00:16:37.148 --> 00:16:40.010
before that has done and
installs on your device.

00:16:40.010 --> 00:16:42.590
However, I think that there was
this really cool demo earlier

00:16:42.590 --> 00:16:45.345
this morning that might be able
to help out with some of that.

00:16:45.345 --> 00:16:48.180
Now that we have the
new features in studio

00:16:48.180 --> 00:16:51.550
to shorten that cycle, that'll
help out with this as well.

00:16:51.550 --> 00:16:54.190
So whereas before,
it wasn't really

00:16:54.190 --> 00:16:56.240
something that you
wanted to do to enable

00:16:56.240 --> 00:16:58.800
this type of stripping
just straight

00:16:58.800 --> 00:17:00.544
out of the box on every build.

00:17:00.544 --> 00:17:02.960
Now, it's at least a little
bit more of a palatable option

00:17:02.960 --> 00:17:04.793
if your application's
starting to get large.

00:17:04.793 --> 00:17:07.230
CHRIS BANES: So one thing
that one sort of strategy I've

00:17:07.230 --> 00:17:08.790
heard from some of
you guys really,

00:17:08.790 --> 00:17:12.310
is that most engineers
will use a multidex for day

00:17:12.310 --> 00:17:13.410
to day development.

00:17:13.410 --> 00:17:15.345
Just to quicken proguard
for the deeper build

00:17:15.345 --> 00:17:17.220
and then when you actually
wanted to release,

00:17:17.220 --> 00:17:19.210
that's when you
turn on proguard.

00:17:19.210 --> 00:17:21.500
And so that tends to be
a strategy, which sounds

00:17:21.500 --> 00:17:22.650
like it should work well.

00:17:22.650 --> 00:17:23.400
ADAM POWELL: Yeah.

00:17:23.400 --> 00:17:25.067
It comes along with
other costs as well.

00:17:25.067 --> 00:17:27.191
Especially if you're doing
any sort of optimization

00:17:27.191 --> 00:17:29.560
of startup time, that comes
at some other costs as well.

00:17:29.560 --> 00:17:31.160
Anyway, there's a
lot of trade offs,

00:17:31.160 --> 00:17:32.510
but there are options available.

00:17:32.510 --> 00:17:34.130
So don't think you're
stuck when you run up

00:17:34.130 --> 00:17:35.480
against some of these problems.

00:17:35.480 --> 00:17:37.230
CHRIS BANES: And one
thing to actually say

00:17:37.230 --> 00:17:39.010
that we know that
this is problem.

00:17:39.010 --> 00:17:42.090
Like, we know that
support-v4 is quite large.

00:17:42.090 --> 00:17:44.900
And we are thinking of ways
to improve the situation.

00:17:44.900 --> 00:17:45.690
Like we know.

00:17:45.690 --> 00:17:47.190
ADAM POWELL: The
short version of it

00:17:47.190 --> 00:17:49.768
is, we're going to
delete a lot of code.

00:17:49.768 --> 00:17:51.110
OK.

00:17:51.110 --> 00:17:53.060
So, how are we going to
delete a lot of code?

00:17:53.060 --> 00:17:55.400
No, how do we use--

00:17:55.400 --> 00:17:57.090
CHRIS BANES: How do we use it?

00:17:57.090 --> 00:18:00.145
So, we all I'm guessing we're
using Gradle these days,

00:18:00.145 --> 00:18:03.559
and so we just add the
library to your dependency.

00:18:03.559 --> 00:18:06.100
But one thing I've seen sort of
in quite a lot of open source

00:18:06.100 --> 00:18:08.667
apps, is that you'll be using
more than one support library.

00:18:08.667 --> 00:18:10.500
And then you'll forget
to update the version

00:18:10.500 --> 00:18:12.583
number on one of them and
then it'll get out sync.

00:18:12.583 --> 00:18:14.800
And then bad stuff can happen.

00:18:14.800 --> 00:18:17.290
So this is just a small tip
and I'm sure most of you

00:18:17.290 --> 00:18:18.350
are using this anyway.

00:18:18.350 --> 00:18:20.766
Is that you can extract the
version number into a variable

00:18:20.766 --> 00:18:21.600
in your Gradle file.

00:18:21.600 --> 00:18:23.474
And then you can use
it, you can reference it

00:18:23.474 --> 00:18:24.700
in that dependency line.

00:18:24.700 --> 00:18:29.030
So after that, actually
clicked, there you go.

00:18:29.030 --> 00:18:30.520
Your dependencies [INAUDIBLE].

00:18:30.520 --> 00:18:33.210
What it means is that whenever
you want to update your version

00:18:33.210 --> 00:18:35.010
number, whenever
you want to move up

00:18:35.010 --> 00:18:36.570
to a new version
of support library,

00:18:36.570 --> 00:18:39.659
you can change just one line and
it works for everything else.

00:18:39.659 --> 00:18:41.450
And it means you're
going hit less problems

00:18:41.450 --> 00:18:45.512
and also less time mindly
editing Gradle files.

00:18:45.512 --> 00:18:46.720
ADAM POWELL: Which, you know.

00:18:46.720 --> 00:18:48.640
Everyone wants to
spend less time there.

00:18:48.640 --> 00:18:49.140
OK.

00:18:49.140 --> 00:18:51.950
So, bugs in the support library.

00:18:51.950 --> 00:18:53.450
CHRIS BANES: There's
never any bugs.

00:18:53.450 --> 00:18:54.330
ADAM POWELL: No.

00:18:54.330 --> 00:18:58.230
CHRIS BANES: So, [INAUDIBLE].

00:18:58.230 --> 00:18:59.340
We know there are bugs.

00:18:59.340 --> 00:19:01.640
They're always going to be
bugs in the support library.

00:19:01.640 --> 00:19:05.360
Just because the-- just
the nature of what it is,

00:19:05.360 --> 00:19:08.070
we have to support all the
way back to API version four,

00:19:08.070 --> 00:19:11.560
and support v4, AppCompat
v7, all the others.

00:19:11.560 --> 00:19:14.420
So there are some times going
to be bugs, we know that.

00:19:14.420 --> 00:19:17.815
And so, we are very grateful for
when you actually submit stuff.

00:19:17.815 --> 00:19:19.940
Hopefully, you'll see that
we're pretty hard on it.

00:19:19.940 --> 00:19:22.642
We will assign stuff
pretty quickly.

00:19:22.642 --> 00:19:25.100
Even though we don't release
as quickly as what some of you

00:19:25.100 --> 00:19:27.810
would like, we know
that it's something

00:19:27.810 --> 00:19:29.054
that we should improve.

00:19:29.054 --> 00:19:30.470
ADAM POWELL: And
this is something

00:19:30.470 --> 00:19:32.428
where we've got a number
of things in progress.

00:19:32.428 --> 00:19:33.760
We have heard you.

00:19:33.760 --> 00:19:36.360
We got a lot of feedback from
the last couple of releases

00:19:36.360 --> 00:19:38.120
that we had that were maybe
a little bit rougher than we

00:19:38.120 --> 00:19:39.190
would have preferred.

00:19:39.190 --> 00:19:41.460
And we're working on it.

00:19:41.460 --> 00:19:44.040
So this is something that if
there's some more stuff that we

00:19:44.040 --> 00:19:46.590
missed, please submit them.

00:19:46.590 --> 00:19:48.930
This is not just a
black box that you're

00:19:48.930 --> 00:19:51.180
going to throw stuff,
throw reports down into

00:19:51.180 --> 00:19:52.610
and we won't read.

00:19:52.610 --> 00:19:54.830
We do keep an eye
on these things.

00:19:54.830 --> 00:19:57.020
CHRIS BANES: One thing to
know as well, actually,

00:19:57.020 --> 00:19:59.100
when you open a bug
on AOSP, there's

00:19:59.100 --> 00:20:01.070
a little box at the
top, which allows

00:20:01.070 --> 00:20:02.617
you to change what type of bug.

00:20:02.617 --> 00:20:03.950
When you select support library.

00:20:03.950 --> 00:20:05.390
It'll come with a template.

00:20:05.390 --> 00:20:06.830
Please follow the template.

00:20:06.830 --> 00:20:09.310
For things like design library,
where a lot of the bugs

00:20:09.310 --> 00:20:12.620
tend to be with scrolling,
you trying to describe in text

00:20:12.620 --> 00:20:15.450
isn't going to really--
like it doesn't help me.

00:20:15.450 --> 00:20:17.780
You giving me a screen record
of how it actually looks

00:20:17.780 --> 00:20:19.946
is much easier for me to
actually debug and work out

00:20:19.946 --> 00:20:20.710
what's happening.

00:20:20.710 --> 00:20:23.790
And just saves me time, and it
saves you guys time as well.

00:20:23.790 --> 00:20:25.320
ADAM POWELL: All right.

00:20:25.320 --> 00:20:29.302
So, we have saved plenty of
time because support library

00:20:29.302 --> 00:20:31.010
is one of those topics
that everybody has

00:20:31.010 --> 00:20:32.420
something to talk about for.

00:20:32.420 --> 00:20:40.166
So we'd like to open
up the floor for Q&amp;A.

00:20:40.166 --> 00:20:41.130
CHRIS BANES: Maybe not.

00:20:41.130 --> 00:20:42.549
No.

00:20:42.549 --> 00:20:44.840
ADAM POWELL: We've got one
over here and one over here.

00:20:48.200 --> 00:20:50.182
We have the mics up?

00:20:50.182 --> 00:20:50.980
OK, they're coming.

00:20:56.536 --> 00:20:59.785
AUDIENCE: Hi, so we have the
very nice FloatingActionButton

00:20:59.785 --> 00:21:02.680
in this design library.

00:21:02.680 --> 00:21:06.237
Is the FloatingActionButton
menu coming soon?

00:21:06.237 --> 00:21:07.820
CHRIS BANES: You
mean like speed dial?

00:21:07.820 --> 00:21:09.344
Like inbox style

00:21:09.344 --> 00:21:10.010
AUDIENCE: Sorry?

00:21:10.010 --> 00:21:11.718
CHRIS BANES: Do you
mean like speed dial?

00:21:11.718 --> 00:21:13.200
The inbox style
of when it pops up

00:21:13.200 --> 00:21:14.290
with a little floating badge?

00:21:14.290 --> 00:21:16.373
AUDIENCE: Yeah, the plus
that changes into a cross

00:21:16.373 --> 00:21:18.600
and pops up the items.

00:21:18.600 --> 00:21:19.644
CHRIS BANES: [INAUDIBLE]

00:21:19.644 --> 00:21:21.560
ADAM POWELL: The design
team is playing around

00:21:21.560 --> 00:21:23.540
with a bunch of other
ideas around this.

00:21:23.540 --> 00:21:25.910
one of the things that
tends to happen, especially

00:21:25.910 --> 00:21:29.550
with the design library,
is-- Well, let me back up

00:21:29.550 --> 00:21:30.640
for a second.

00:21:30.640 --> 00:21:34.134
We mentioned before that when
we put a component into the AOSB

00:21:34.134 --> 00:21:36.300
support libraries, we really
want it to be something

00:21:36.300 --> 00:21:39.320
that we're fully
willing to endorse

00:21:39.320 --> 00:21:40.630
this particular pattern.

00:21:40.630 --> 00:21:42.560
A lot of the Google
applications such as inbox

00:21:42.560 --> 00:21:46.320
have done a bunch of their own
explorations, down one path

00:21:46.320 --> 00:21:48.970
or another, that kind of extend
some of these basic ideas

00:21:48.970 --> 00:21:49.930
so far.

00:21:49.930 --> 00:21:52.640
The design team hasn't been
willing to entirely put

00:21:52.640 --> 00:21:55.330
their stamp of approval on
this to the point of saying,

00:21:55.330 --> 00:21:57.470
hey we want to see this
in every Android app

00:21:57.470 --> 00:21:59.764
and we think that this
and all of the details

00:21:59.764 --> 00:22:01.680
behind this pattern are
something that we want

00:22:01.680 --> 00:22:04.350
to really standardize
on and give

00:22:04.350 --> 00:22:08.274
to developers as this sort of
full story for the platform.

00:22:08.274 --> 00:22:09.690
So, as soon as
that happens you'll

00:22:09.690 --> 00:22:12.124
see this showing up in the
design support library.

00:22:12.124 --> 00:22:14.540
CHRIS BANES: Yeah, and if you
look at this material design

00:22:14.540 --> 00:22:17.280
spec, it doesn't really
mention the speed dial anymore.

00:22:17.280 --> 00:22:19.220
It mentions, it's
quite general like,

00:22:19.220 --> 00:22:20.889
transitions I
think they call it.

00:22:20.889 --> 00:22:22.430
And so we are looking
at writing some

00:22:22.430 --> 00:22:24.020
of the transitions
between things,

00:22:24.020 --> 00:22:25.180
but it's still early days.

00:22:25.180 --> 00:22:26.080
We're not there yet.

00:22:26.080 --> 00:22:26.910
AUDIENCE: Can't they
watch the space.

00:22:26.910 --> 00:22:27.660
CHRIS BANES: Yeah.

00:22:30.960 --> 00:22:33.260
ADAM POWELL: Got one up
front, or another over--

00:22:36.260 --> 00:22:40.330
AUDIENCE: What's your policy
on trying to resolve or if you

00:22:40.330 --> 00:22:45.220
want to resolve crashes that
come up from manufacturers such

00:22:45.220 --> 00:22:46.647
as Samsung or HTC that's--

00:22:46.647 --> 00:22:47.480
[INTERPOSING VOICES]

00:22:51.110 --> 00:22:53.580
ADAM POWELL: So,
I believe what it

00:22:53.580 --> 00:22:56.420
is that you're referring to
is that on some devices that

00:22:56.420 --> 00:22:59.085
are out there, there
is a potentially

00:22:59.085 --> 00:23:00.710
older version of
support libraries that

00:23:00.710 --> 00:23:03.120
are on the default classpath.

00:23:03.120 --> 00:23:07.640
This is something that we're
working with manufacturers on.

00:23:07.640 --> 00:23:08.925
To try and help with this.

00:23:08.925 --> 00:23:11.300
And in the meantime, we're
going to offer some other work

00:23:11.300 --> 00:23:12.730
arounds that will
hopefully make your lives,

00:23:12.730 --> 00:23:14.188
as developers, a
little bit easier.

00:23:20.500 --> 00:23:22.250
AUDIENCE: With like
the Gradle build

00:23:22.250 --> 00:23:24.500
tool or the other
libraries in there,

00:23:24.500 --> 00:23:27.202
like Maven repo online
or anything like that.

00:23:27.202 --> 00:23:28.660
And the support
libraries, you have

00:23:28.660 --> 00:23:30.400
to download it to
your local machine

00:23:30.400 --> 00:23:32.520
and trying to keep
that up to date

00:23:32.520 --> 00:23:35.950
has been very frustrating
and hard at times.

00:23:35.950 --> 00:23:38.580
Is there a way to move that
to a centralized repo, where

00:23:38.580 --> 00:23:41.104
we can just get access to, or--

00:23:41.104 --> 00:23:42.770
ADAM POWELL: So, I
think that's probably

00:23:42.770 --> 00:23:46.250
a good question for some
of the Android tools team.

00:23:46.250 --> 00:23:50.495
They'll be outside available
at probably the kiosk that

00:23:50.495 --> 00:23:51.901
says Android Studio.

00:23:51.901 --> 00:23:53.650
Also probably a great
question to bring up

00:23:53.650 --> 00:23:55.649
at like the fireside chat
around tools, as well.

00:24:07.070 --> 00:24:09.150
AUDIENCE: Are there
any plan of bringing

00:24:09.150 --> 00:24:12.540
animations to GridView,
similar to RecyclerView?

00:24:12.540 --> 00:24:16.150
ADAM POWELL: To GridView
similar to a RecyclerView.

00:24:16.150 --> 00:24:19.010
I believe that the plan on that
is to build more grid layout

00:24:19.010 --> 00:24:20.696
managers for
RecyclerView so that it

00:24:20.696 --> 00:24:22.320
inherits all the
animation capabilities

00:24:22.320 --> 00:24:23.850
the RecyclerView has.

00:24:23.850 --> 00:24:26.180
GridView right now is
based on the same internals

00:24:26.180 --> 00:24:28.030
that ListView is,
within the framework,

00:24:28.030 --> 00:24:31.140
and for all the same
reasons it's basically

00:24:31.140 --> 00:24:34.270
hit its complexity
budget in terms of this.

00:24:34.270 --> 00:24:35.770
There's a number
of tactics that you

00:24:35.770 --> 00:24:37.730
can use to try to do
similar animations

00:24:37.730 --> 00:24:39.380
in GridView and in ListView.

00:24:39.380 --> 00:24:43.140
And all of them end up having
some pretty drastic downsides

00:24:43.140 --> 00:24:47.920
to them, in terms of what you're
able to do from an application

00:24:47.920 --> 00:24:50.360
code or from something like
a support library in there.

00:24:50.360 --> 00:24:53.830
So we would really suggest
using a RecyclerView layout

00:24:53.830 --> 00:24:56.170
manager meant to
layout within a grid

00:24:56.170 --> 00:24:57.886
to get that type
of functionality.

00:24:57.886 --> 00:24:59.510
CHRIS BANES: Yeah,
there's already two,

00:24:59.510 --> 00:25:01.135
off the top of my
head, there's already

00:25:01.135 --> 00:25:03.270
two grid layout managers
bundled with RecyclerView.

00:25:03.270 --> 00:25:04.910
There's GridLayout manager and
there's Staggered GridLayout

00:25:04.910 --> 00:25:07.370
manager, and they both do
slightly different things

00:25:07.370 --> 00:25:09.727
in terms of how they
deal with spacing.

00:25:09.727 --> 00:25:11.060
But yeah, they're already there.

00:25:11.060 --> 00:25:12.121
So you can have a look.

00:25:14.686 --> 00:25:17.060
AUDIENCE: So RecyclerView is
its own standalone component

00:25:17.060 --> 00:25:18.950
and has its own
standalone library

00:25:18.950 --> 00:25:20.730
or is, like you
mentioned before,

00:25:20.730 --> 00:25:23.530
something like Viewpager, which
doesn't exist in the framework,

00:25:23.530 --> 00:25:25.940
but it's just part of the core.

00:25:25.940 --> 00:25:28.110
In the future, can
we expect to see

00:25:28.110 --> 00:25:30.220
things like that that
aren't in the framework,

00:25:30.220 --> 00:25:33.670
but are standalone in
their own libraries?

00:25:33.670 --> 00:25:35.670
ADAM POWELL: You also saw
this with Grid Layout,

00:25:35.670 --> 00:25:38.360
as an example of something else
that kind of sat on its own.

00:25:38.360 --> 00:25:41.280
Most of the reason for
this is kind of historical.

00:25:41.280 --> 00:25:44.360
We started off with
the v4 support library

00:25:44.360 --> 00:25:46.691
and due to some
limitations in our internal

00:25:46.691 --> 00:25:47.690
build tools at the time.

00:25:47.690 --> 00:25:50.980
This was all like pre-Gradle,
pre-AAR, and things like that.

00:25:50.980 --> 00:25:52.480
We couldn't have
resources in there,

00:25:52.480 --> 00:25:54.040
so we had a bunch
of other pieces.

00:25:54.040 --> 00:25:55.456
I mean, this is
part of the reason

00:25:55.456 --> 00:25:58.110
why you can't do nice things
with attributes in your layouts

00:25:58.110 --> 00:25:59.300
for things like Viewpager.

00:25:59.300 --> 00:26:00.800
Whereas, if we were
doing that today

00:26:00.800 --> 00:26:04.800
we would totally add all
these additional pieces.

00:26:04.800 --> 00:26:06.720
So now we basically
have this issue

00:26:06.720 --> 00:26:08.220
of like keeping
source compatibility

00:26:08.220 --> 00:26:10.130
with a lot of current
developer's builds

00:26:10.130 --> 00:26:13.330
and so on and so
forth around that.

00:26:13.330 --> 00:26:16.450
I think that the design
library approach is probably

00:26:16.450 --> 00:26:19.250
the one to expect with things
with a forward facing UI

00:26:19.250 --> 00:26:20.220
component.

00:26:20.220 --> 00:26:21.710
RecyclerView is a
little bit unique

00:26:21.710 --> 00:26:24.790
in that it's
basically a framework

00:26:24.790 --> 00:26:26.470
for writing ListViews.

00:26:26.470 --> 00:26:29.682
And to that end, it
kind of sits on its own

00:26:29.682 --> 00:26:32.140
just because it's a little bit
more infrastructural instead

00:26:32.140 --> 00:26:35.120
of the full, out of the
box, turnkey components.

00:26:35.120 --> 00:26:37.305
I would probably expect
to see some things based

00:26:37.305 --> 00:26:38.930
on RecyclerView start
making their way

00:26:38.930 --> 00:26:40.680
into some other libraries
that kind of sit

00:26:40.680 --> 00:26:42.330
on that layer of
abstraction above.

00:26:42.330 --> 00:26:43.705
CHRIS BANES:
[INAUDIBLE] backward

00:26:43.705 --> 00:26:45.197
makes huge use of RecyclerView.

00:26:45.197 --> 00:26:46.780
ADAM POWELL: That's
a perfect example.

00:26:46.780 --> 00:26:47.280
Yeah.

00:26:54.460 --> 00:26:55.910
AUDIENCE: Hi.

00:26:55.910 --> 00:26:59.490
Any plans or suggestions for
doing animations in Viewpagers?

00:26:59.490 --> 00:27:03.510
Specifically, like remove
and add animations there?

00:27:03.510 --> 00:27:05.722
ADAM POWELL: That's
also a great question.

00:27:05.722 --> 00:27:07.930
So, I've kind of had this
idea kicking around my head

00:27:07.930 --> 00:27:10.650
for awhile that at
some point Viewpager

00:27:10.650 --> 00:27:13.210
would be updated into
sort of the New World

00:27:13.210 --> 00:27:17.710
into kind of a new Viewpager
two based on top RecyclerView.

00:27:17.710 --> 00:27:20.382
In which case, again,
just like with GridView,

00:27:20.382 --> 00:27:22.840
you'd kind of inherit a lot of
that functionality for free.

00:27:22.840 --> 00:27:25.215
We haven't gotten around to
doing that sort of thing yet.

00:27:25.215 --> 00:27:27.349
But if you were
feeling so inclined

00:27:27.349 --> 00:27:28.890
to build something
kind of like that,

00:27:28.890 --> 00:27:32.180
and you feel like you want
to take a crack at it,

00:27:32.180 --> 00:27:34.330
that's probably
how I would start.

00:27:34.330 --> 00:27:36.280
In terms of Viewpager's
current system,

00:27:36.280 --> 00:27:37.770
what types of animations
are you thinking of?

00:27:37.770 --> 00:27:39.978
I mean we do have a little
bit of capability in there

00:27:39.978 --> 00:27:41.670
around the lines of
page transformers.

00:27:41.670 --> 00:27:44.020
And that allows you to
get kind of what we always

00:27:44.020 --> 00:27:46.720
called the cafeteria tray
style, that we used to use

00:27:46.720 --> 00:27:50.750
in the paged launcher all apps.

00:27:50.750 --> 00:27:52.420
Couple of versions ago.

00:27:52.420 --> 00:27:55.450
You can also use it to get quite
a few other effects as you're

00:27:55.450 --> 00:27:56.489
paging through things.

00:27:56.489 --> 00:27:58.530
So, what were you thinking
of, more specifically?

00:28:02.660 --> 00:28:03.379
Oh, sorry.

00:28:03.379 --> 00:28:04.170
They took your mic.

00:28:07.210 --> 00:28:10.170
AUDIENCE: Specifically, actually
add and remove animations.

00:28:10.170 --> 00:28:12.030
So removing pages from it.

00:28:12.030 --> 00:28:16.745
And also being, maybe this is
a little too far out, but--

00:28:16.745 --> 00:28:18.120
ADAM POWELL: Be
far out, come on.

00:28:18.120 --> 00:28:20.750
AUDIENCE: Being able to
fling multiple pages.

00:28:20.750 --> 00:28:23.120
But land on page boundaries.

00:28:23.120 --> 00:28:23.920
ADAM POWELL: I see.

00:28:23.920 --> 00:28:24.935
Yeah, this--

00:28:24.935 --> 00:28:26.310
CHRIS BANES: Sounds
like Gallery.

00:28:26.310 --> 00:28:27.430
AUDIENCE: Yeah,
it actually does.

00:28:27.430 --> 00:28:29.150
And so we have this
wonderful deprecated widget

00:28:29.150 --> 00:28:30.900
in the framework that
you can take a look.

00:28:30.900 --> 00:28:32.740
No.

00:28:32.740 --> 00:28:35.040
So, again, this is one
of those features that's

00:28:35.040 --> 00:28:38.400
kind of a well known feature
request for RecyclerView

00:28:38.400 --> 00:28:40.460
in general, which is
being able to stop

00:28:40.460 --> 00:28:42.890
on item [INAUDIBLE] boundaries.

00:28:42.890 --> 00:28:44.950
This is something
that a number of teams

00:28:44.950 --> 00:28:47.682
have wanted for a number of
other types of applications,

00:28:47.682 --> 00:28:49.140
but the core piece
of functionality

00:28:49.140 --> 00:28:50.431
remains the same for all of it.

00:28:50.431 --> 00:28:52.160
It's just kind of
like spin it around

00:28:52.160 --> 00:28:54.110
along on the other,
access of scrolling,

00:28:54.110 --> 00:28:56.790
make the item sizes
either uniform or not,

00:28:56.790 --> 00:28:59.480
it all kind of boils down to
the same thing in the end.

00:28:59.480 --> 00:29:00.700
So that's something
that we're definitely

00:29:00.700 --> 00:29:02.410
thinking about in
terms of RecyclerView

00:29:02.410 --> 00:29:03.701
as an infrastructure component.

00:29:07.520 --> 00:29:08.846
CHRIS BANES: Anyone else?

00:29:08.846 --> 00:29:09.798
AUDIENCE: Over here.

00:29:13.130 --> 00:29:17.600
Hello, could we expect some of
the material spec components

00:29:17.600 --> 00:29:18.960
to be out at any time soon?

00:29:18.960 --> 00:29:20.310
Something like the bottom sheet?

00:29:24.050 --> 00:29:25.414
CHRIS BANES: Maybe.

00:29:25.414 --> 00:29:26.860
ADAM POWELL: Yes, so--

00:29:26.860 --> 00:29:29.276
CHRIS BANES: So bottom sheet's
a weird one in that there's

00:29:29.276 --> 00:29:30.416
two types of bottom sheets.

00:29:30.416 --> 00:29:31.790
From what I remember
of the spec,

00:29:31.790 --> 00:29:34.580
they're not too prescriptive
about what the content is.

00:29:34.580 --> 00:29:36.480
It's more the interaction.

00:29:36.480 --> 00:29:38.300
So the thing it will
be concentrated on

00:29:38.300 --> 00:29:40.080
is the interaction as that's
probably the most difficult

00:29:40.080 --> 00:29:40.640
thing to get.

00:29:40.640 --> 00:29:42.010
Right?

00:29:42.010 --> 00:29:44.056
So that might be coming soon.

00:29:44.056 --> 00:29:49.010
ADAM POWELL: Yeah, so,
Chris is being very cagey.

00:29:49.010 --> 00:29:51.710
Basically, I would say that
in the fullness of time,

00:29:51.710 --> 00:29:54.540
I think it's our ideal that the
designer library would reflect

00:29:54.540 --> 00:29:57.022
the contents of the
material design spec.

00:29:57.022 --> 00:29:59.230
CHRIS BANES: The important
bits, the high-- the stuff

00:29:59.230 --> 00:29:59.890
you're going to use.

00:29:59.890 --> 00:30:01.010
ADAM POWELL: So
the parts we like?

00:30:01.010 --> 00:30:01.780
CHRIS BANES: Yeah.

00:30:01.780 --> 00:30:03.170
It might be.

00:30:03.170 --> 00:30:05.120
Well the stuff that
we want people to use.

00:30:05.120 --> 00:30:06.310
ADAM POWELL: Yes.

00:30:06.310 --> 00:30:07.336
Which, again--

00:30:07.336 --> 00:30:09.420
CHRIS BANES: All of it, I guess.

00:30:09.420 --> 00:30:09.920
OK.

00:30:09.920 --> 00:30:10.461
I'll shut up.

00:30:18.830 --> 00:30:21.050
AUDIENCE: Hi, I'm
wondering if there

00:30:21.050 --> 00:30:26.030
are any plans for like
supporting font features

00:30:26.030 --> 00:30:28.010
in the support library?

00:30:28.010 --> 00:30:31.180
So on newer versions
of the Android,

00:30:31.180 --> 00:30:32.720
there's the Roboto font.

00:30:32.720 --> 00:30:37.970
So for example, in a navigation
view, for example, in the spec

00:30:37.970 --> 00:30:40.520
it's supposed to be a
medium font which does not

00:30:40.520 --> 00:30:42.330
exist on older API levels.

00:30:42.330 --> 00:30:45.800
So, or like in the
toolbar, so are there

00:30:45.800 --> 00:30:48.930
any plans for supporting
fonts in that kind of way?

00:30:48.930 --> 00:30:52.360
ADAM POWELL: You went to Rey's
talk earlier, didn't you?

00:30:52.360 --> 00:30:53.740
On the typography?

00:30:53.740 --> 00:30:55.290
Yeah.

00:30:55.290 --> 00:30:57.500
So yeah, that was a
good piece of feedback

00:30:57.500 --> 00:31:01.060
especially from within
that talk's Q&amp;A, as well.

00:31:01.060 --> 00:31:04.000
So thank you for that, we'll try
and make that a little bit more

00:31:04.000 --> 00:31:04.540
extensible.

00:31:04.540 --> 00:31:06.440
At least so that you can get
those sorts of things plummed

00:31:06.440 --> 00:31:08.830
down into those widgets
that do sort of generate

00:31:08.830 --> 00:31:10.742
their own items
that contain text.

00:31:10.742 --> 00:31:12.450
I think that's a great
piece of feedback.

00:31:12.450 --> 00:31:16.317
One of the other things that
some people found pretty early

00:31:16.317 --> 00:31:18.400
after the introduction of
the data binding system,

00:31:18.400 --> 00:31:20.600
and this may not
apply necessarily

00:31:20.600 --> 00:31:22.480
to like the navigation
of your toolbar issues

00:31:22.480 --> 00:31:25.860
that you're bringing forth here,
but with regard to other font

00:31:25.860 --> 00:31:28.560
features people
found that they can

00:31:28.560 --> 00:31:31.270
use a couple little snippets
of code within the data binding

00:31:31.270 --> 00:31:34.710
system to apply some
pretty interesting font

00:31:34.710 --> 00:31:36.260
tricks to existing views.

00:31:36.260 --> 00:31:39.090
So I would probably use
your favorite search engine

00:31:39.090 --> 00:31:41.050
and try and dig up
some of those posts.

00:31:41.050 --> 00:31:42.802
And take a look at
some of the stuff

00:31:42.802 --> 00:31:44.260
that they've done
because it really

00:31:44.260 --> 00:31:46.290
does help to fill some of
those gaps around font features

00:31:46.290 --> 00:31:46.873
in particular.

00:31:51.710 --> 00:31:52.605
Got one back here.

00:31:58.480 --> 00:32:02.680
AUDIENCE: I really liked
the nested scrolling concept

00:32:02.680 --> 00:32:04.950
that like we're seeing now.

00:32:04.950 --> 00:32:10.470
So my question is, do you
have any tips or tricks

00:32:10.470 --> 00:32:12.640
on developing,
debugging, testing,

00:32:12.640 --> 00:32:16.430
like code that's related
to gesture handling?

00:32:16.430 --> 00:32:18.520
Cause there was a bug
in nested scrolling

00:32:18.520 --> 00:32:20.620
I think in the
RecyclerView and that

00:32:20.620 --> 00:32:21.870
was really difficult to debug.

00:32:21.870 --> 00:32:24.161
CHRIS BANES: If only the man
who wrote nested scrolling

00:32:24.161 --> 00:32:24.880
was here.

00:32:24.880 --> 00:32:27.370
ADAM POWELL: Oh, now you're
just reusing Chet's jokes.

00:32:27.370 --> 00:32:28.120
CHRIS BANES: Good.

00:32:30.710 --> 00:32:33.070
ADAM POWELL: So, which
bug are you referring to?

00:32:33.070 --> 00:32:36.220
I mean I guess yes
it can definitely

00:32:36.220 --> 00:32:40.370
be a little bit brain bending to
deal with the nested scrolling

00:32:40.370 --> 00:32:41.350
stuff.

00:32:41.350 --> 00:32:42.725
It's part of the
reason why we're

00:32:42.725 --> 00:32:45.769
trying to make a little bit
more turnkey in general.

00:32:45.769 --> 00:32:47.310
Just with some of
the components that

00:32:47.310 --> 00:32:49.770
are part of the design library,
and so on and so forth.

00:32:49.770 --> 00:32:51.560
So what were some of
the specific issues

00:32:51.560 --> 00:32:54.276
that you ran into and we can
try and take that into account

00:32:54.276 --> 00:32:54.900
for the future?

00:32:54.900 --> 00:32:57.710
AUDIENCE: Well,
the example it was

00:32:57.710 --> 00:33:03.930
when you're fleeing a
RecyclerView and I had another,

00:33:03.930 --> 00:33:06.660
I've forgotten the name
of it, but basically

00:33:06.660 --> 00:33:08.320
implementing a parallax effect.

00:33:08.320 --> 00:33:09.230
For example.

00:33:09.230 --> 00:33:13.490
The fleeing was actually
at the velocity lessened

00:33:13.490 --> 00:33:17.260
to the point view that was
being parallax animated

00:33:17.260 --> 00:33:19.690
was the wrong direction.

00:33:19.690 --> 00:33:20.710
Things like that.

00:33:20.710 --> 00:33:23.152
And it was like when you scroll
thing, when you fling it,

00:33:23.152 --> 00:33:25.740
it was like it was
moving along nicely

00:33:25.740 --> 00:33:27.470
and then it just went to the--

00:33:27.470 --> 00:33:29.365
ADAM POWELL: Bounces back the
completely opposite direction.

00:33:29.365 --> 00:33:29.680
AUDIENCE: Yes.

00:33:29.680 --> 00:33:30.980
And we see in the Cheesesquare.

00:33:30.980 --> 00:33:32.680
If you haven't tried
the latest version

00:33:32.680 --> 00:33:35.570
of RecyclerView or of
the support v7 libraries.

00:33:35.570 --> 00:33:37.250
But supposedly, it's fixed.

00:33:37.250 --> 00:33:39.670
I haven't tried it yet though.

00:33:39.670 --> 00:33:41.006
CHRIS BANES: We know the issue.

00:33:41.006 --> 00:33:42.630
AUDIENCE: So I'm just
wondering like do

00:33:42.630 --> 00:33:45.088
you have any tips and tricks
in terms of when you developed

00:33:45.088 --> 00:33:46.450
this kind of thing.

00:33:46.450 --> 00:33:47.260
CHRIS BANES: So the
difficulty with debugging

00:33:47.260 --> 00:33:48.640
this kind of stuff, is
when you start moving

00:33:48.640 --> 00:33:49.723
the view at the same time.

00:33:49.723 --> 00:33:51.530
So that's when it
gets more difficult.

00:33:51.530 --> 00:33:53.790
Which is why this
particular bug has

00:33:53.790 --> 00:33:55.500
been quite hard to track down.

00:33:55.500 --> 00:33:58.660
We think we're there now.

00:33:58.660 --> 00:33:59.701
We think we're there.

00:33:59.701 --> 00:34:00.200
Basically--

00:34:00.200 --> 00:34:01.430
ADAM POWELL: Chris is
being cagey about it,

00:34:01.430 --> 00:34:03.510
but yes we were actually
looking at exactly this problem

00:34:03.510 --> 00:34:04.040
last week.

00:34:04.040 --> 00:34:04.748
CHRIS BANES: Yes.

00:34:07.270 --> 00:34:08.920
ADAM POWELL: This
bug in particular.

00:34:08.920 --> 00:34:09.850
So yes, we're sorry.

00:34:12.368 --> 00:34:13.909
CHRIS BANES: That's
one of the things

00:34:13.909 --> 00:34:15.867
with nested scrolling
actually because, I mean,

00:34:15.867 --> 00:34:16.889
the API is great.

00:34:16.889 --> 00:34:19.239
But each view which
implements it,

00:34:19.239 --> 00:34:21.320
does it slightly differently.

00:34:21.320 --> 00:34:23.350
That's one of the reasons
why this kind of issue

00:34:23.350 --> 00:34:24.775
is so crop up.

00:34:24.775 --> 00:34:26.400
ADAM POWELL: Cause
I mean, some of this

00:34:26.400 --> 00:34:29.254
is just kind of goes to the
way that RecyclerView is

00:34:29.254 --> 00:34:31.239
a really great example of this.

00:34:31.239 --> 00:34:33.989
If one piece of scrolling code
covered every possible use

00:34:33.989 --> 00:34:36.980
case, then we would have
been done with ScrollView.

00:34:36.980 --> 00:34:39.460
So RecyclerView and
other things scroll

00:34:39.460 --> 00:34:41.000
by completely
different mechanisms

00:34:41.000 --> 00:34:43.690
for one reason or
another, and it ends up

00:34:43.690 --> 00:34:47.524
leading to bugs that hopefully
you never see externally.

00:34:47.524 --> 00:34:49.190
And unfortunately,
this one made it out.

00:34:52.929 --> 00:34:53.970
CHRIS BANES: Anyone else?

00:34:59.570 --> 00:35:00.070
No more?

00:35:00.070 --> 00:35:01.620
ADAM POWELL: Going
once, going twice.

00:35:01.620 --> 00:35:02.120
OK.

00:35:02.120 --> 00:35:02.390
CHRIS BANES: Thank you.

00:35:02.390 --> 00:35:03.765
ADAM POWELL: Thank
you very much.

00:35:03.765 --> 00:35:05.150
[APPLAUSE]

00:35:05.150 --> 00:35:08.800
[MUSIC PLAYING]

