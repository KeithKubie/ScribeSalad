WEBVTT
Kind: captions
Language: en

00:01:34.098 --> 00:01:37.630
&gt;&gt; Google I/O 2016

00:08:52.709 --> 00:08:58.004
Machine learning:  Google's 
Vision

00:09:09.057 --> 00:09:12.881
&gt;&gt; Good morning, welcome to day 
three of Google I/O and what 

00:09:12.882 --> 00:09:16.403
should be a fun conversation 
about machine learning and 

00:09:16.404 --> 00:09:20.934
artificial intelligence.  My 
time is Tom Simon.  And like all

00:09:21.228 --> 00:09:24.243
 of you I have been hearing 
recently about the growing power

00:09:24.566 --> 00:09:28.375
 of machine learning.  We have 
seen striking results come out 

00:09:28.376 --> 00:09:35.403
of academic and research lab and
 they move is quickly into the 

00:09:35.404 --> 00:09:39.430
hands of developers who have 
been used to make products and 

00:09:39.431 --> 00:09:42.155
services and companies.  I'm 
joined by three people who can 

00:09:42.156 --> 00:09:45.384
tell us about the new technology
 an the capabilities it brings 

00:09:45.385 --> 00:09:54.450
come out into the chorld.  They 
are Chen who  Aparna, Jeff dean 

00:09:54.451 --> 00:09:58.077
who leads the Google brain 
research group here in  mountain

00:09:58.792 --> 00:10:05.832
 view, and John Giannandrea who 
is head of search and machine 

00:10:05.833 --> 00:10:08.643
intelligence.  We are going to 
talk for about 30 minutes and 

00:10:08.644 --> 00:10:12.978
there will be time for questions
 from the floor.  John, why 

00:10:12.979 --> 00:10:18.118
don't we start with you, you 
could set the scene for us.  

00:10:18.119 --> 00:10:20.218
Artificial intelligence and 
machine learning are not brand 

00:10:20.219 --> 00:10:23.346
new concepts.  They have been 
around a long time but we are 

00:10:23.347 --> 00:10:29.596
certainly  hearing more about 
them.  Large and small companies

00:10:29.597 --> 00:10:31.913
 are i nvesting and there is 
excitement.  You can get a large

00:10:31.996 --> 00:10:35.021
 number of people come to a talk
 about this early in the morning

00:10:35.228 --> 00:10:37.228
 so what's going

00:10:39.455 --> 00:10:40.752
 on in? 
&gt;&gt; JOHN GIANNANDREA:  I think 

00:10:40.753 --> 00:10:45.594
the last few years we have seen 
extraordinary results in fields 

00:10:45.595 --> 00:10:48.695
that hadn't really moved the 
needle for many years like 

00:10:48.696 --> 00:10:51.626
speech recognition and image 
understanding.  The error rates 

00:10:51.627 --> 00:10:57.174
are falling dramatically mostly 
because of advancements in deep 

00:10:57.175 --> 00:11:01.302
learning.  I think these 
techniques are not new.  People 

00:11:01.303 --> 00:11:05.326
have been using networks for 
many, many years, but a 

00:11:05.327 --> 00:11:09.545
combination of events over the 
last few years has made them 

00:11:09.546 --> 00:11:13.600
more effective and caused us to 
get them into the hands of 

00:11:13.601 --> 00:11:16.703
developers. 
People talk in terms of AI 

00:11:16.704 --> 00:11:22.025
winters and things like this.  I
 think we are kind of in an AI 

00:11:22.026 --> 00:11:25.365
spring where we are seeing 
remarkable progress across a 

00:11:25.366 --> 00:11:28.076
huge number of fields.
&gt;&gt; TOM SIMONITE:  How long have 

00:11:28.077 --> 00:11:31.498
you worked in artificial 
intelligence. 

00:11:31.499 --> 00:11:35.611
&gt;&gt; JOHN GIANNANDREA:  We started
  investing heavily four years a

00:11:35.612 --> 00:11:38.453
 go.  We got serious about our 
investments about four years ago

00:11:38.749 --> 00:11:42.693
 and getting organized to do 
things ultimately resulted in 

00:11:42.694 --> 00:11:46.811
the release of things like t 
enser flow, which Jeff's team 

00:11:46.812 --> 00:11:48.799
worked on. 
&gt;&gt; TOM SIMONITE:  We will talk 

00:11:48.800 --> 00:11:53.954
about that later for sure.  A 
parna, give us perspective from 

00:11:53.955 --> 00:11:56.765
the view of someone who builds 
plucks.  John says this 

00:11:56.766 --> 00:11:59.949
technology has become more p 
owerful and accurate and u 

00:11:59.950 --> 00:12:03.315
seful.  Does that open up new 
horizons for you when you are 

00:12:03.316 --> 00:12:06.712
thinking about what you could 
build? 

00:12:06.713 --> 00:12:08.065
&gt;&gt; APARNA CHENNAPRAGADA:  Absolu
 tely.  For me, these are great 

00:12:08.066 --> 00:12:11.887
as a technology, but as a means 
to an end they are powerful tool

00:12:12.187 --> 00:12:15.513
 kits but to solve real 
problems.  And for us as 

00:12:15.514 --> 00:12:18.935
building products and you guys 
too, there is two ways that 

00:12:18.936 --> 00:12:22.238
machine learning changes the 
game.  One is that it can turbo 

00:12:22.239 --> 00:12:25.873
charge existing use cases, that 
is existing problems like, you 

00:12:25.874 --> 00:12:29.921
know, speech recognition by 
dramatically changing technical 

00:12:29.922 --> 00:12:34.332
components that power the 
product.  If you are building a 

00:12:34.333 --> 00:12:37.964
wire to enable a system.  As 
soon as it dropped we saw the 

00:12:37.965 --> 00:12:41.685
usage go up.  So the product 
gets more useable as machine 

00:12:41.686 --> 00:12:44.898
learning improves the underlying
 engine.  Same thing with 

00:12:44.899 --> 00:12:48.027
translation.  As translation 
gets better, Google translate, 

00:12:48.028 --> 00:12:55.277
if scales to 100 plus languages 
and photos is a great example.  

00:12:55.278 --> 00:12:56.889
You have heard someone talk 
about it too that as soon as you

00:12:56.890 --> 00:13:00.438
 have better image understanding
 the photo labeling gets better 

00:13:00.439 --> 00:13:03.345
and I can organize photos.  
That's one way we have seen, but

00:13:03.545 --> 00:13:07.478
 I think the second way that's 
personally far more exciting to 

00:13:07.479 --> 00:13:12.196
see is where it can unlock new 
product use cases, so turbo 

00:13:12.197 --> 00:13:16.033
charging existing use cases is 
one thing but where can you see 

00:13:16.034 --> 00:13:20.050
problems that really weren't 
thought of as AI or data 

00:13:20.051 --> 00:13:24.983
problems.  And thanks to mobile,
 3 billion phones a lot of the 

00:13:24.984 --> 00:13:29.914
real world problems are turning 
into AI problems, like 

00:13:29.915 --> 00:13:33.336
transportation, health, that's 
exciting too. 

00:13:33.337 --> 00:13:40.072
&gt;&gt; TOM SIMONITE:  So we can make
 computers, we have had this 

00:13:40.073 --> 00:13:43.398
experience of where you have a 
clear idea of what  you are 

00:13:43.399 --> 00:13:46.326
trying to do but it feels like 
the software is doing everything

00:13:46.407 --> 00:13:49.530
 to stop you.  Maybe that's a 
form of artificial intelligence 

00:13:49.531 --> 00:13:53.978
too.  Can you make more seamless
 experience that's make life 

00:13:53.979 --> 00:13:54.257
easier? 
&gt;&gt; APARNA CHENNAPRAGADA:  In 

00:13:54.258 --> 00:13:56.258
this case, again, one of the 
things to

00:13:58.903 --> 00:14:00.410
 think about is how do you make 
sure as you build products how 

00:14:00.411 --> 00:14:03.951
do you make sure your interface 
scales with intelligence.  The 

00:14:03.952 --> 00:14:08.495
UI needs to be proportional to 
AI.  I can't believe I said some

00:14:09.385 --> 00:14:13.107
 oud pseudoformula in front of 
Jeff dean, but I think that's 

00:14:13.108 --> 00:14:17.743
important to make sure that the 
UI scales with the AI. 

00:14:17.744 --> 00:14:21.955
&gt;&gt; TOM SIMONITE:  And, Jeff, for
 people like Aparna that are 

00:14:21.956 --> 00:14:26.196
building products to do that, we
 need this translation step.  

00:14:26.197 --> 00:14:31.839
Google brain, there a research 
group that work on  fundamental 

00:14:31.840 --> 00:14:34.967
question in this field but you 
build this infrastructure that 

00:14:34.968 --> 00:14:37.290
you are inventing from scratch 
that makes it possible to use 

00:14:37.291 --> 00:14:40.393
this stuff. 
&gt;&gt; JEFF DEAN:  Yes, I think, 

00:14:40.394 --> 00:14:42.908
obviously in order to make 
progress on these kinds of 

00:14:42.909 --> 00:14:47.058
problems, it's really important 
to be able to try lots of 

00:14:47.059 --> 00:14:50.064
experiments and do that as 
quickly as you can.  There is a 

00:14:50.065 --> 00:14:53.595
very sort of fundamental 
difference between having an 

00:14:53.596 --> 00:14:56.918
experiment take a few hours 
versus something that takes six 

00:14:56.919 --> 00:14:59.835
weeks.  It's just a very 
different model of doing s 

00:14:59.836 --> 00:15:05.766
cience, and so one of the things
 pee work on  -- we work on is 

00:15:05.767 --> 00:15:10.402
trying to build scalable systems
 that are flexible and easy to 

00:15:10.403 --> 00:15:13.814
express new kinds of machine 
learning ideas.  That's how 

00:15:13.815 --> 00:15:17.742
tenser flow came about.  It's 
our internal research vehicle 

00:15:17.743 --> 00:15:20.174
but robust enough to take 
something you have done and done

00:15:20.364 --> 00:15:23.186
 lots of experiments on, and 
then when you get something that

00:15:23.599 --> 00:15:29.640
 works well, you move that into 
a production environment, on p 

00:15:29.641 --> 00:15:34.262
hones, data centers on RTPUs we 
announced a few days ago, and 

00:15:34.263 --> 00:15:37.987
that seamless transition from 
research to like putting things 

00:15:37.988 --> 00:15:41.495
into real products is what we 
are all about. 

00:15:41.496 --> 00:15:44.830
&gt;&gt; TOM SIMONITE:  So tenser flow
 is this very flexible package, 

00:15:44.831 --> 00:15:47.637
it's very valuable to Google, 
you are building a lot on top of

00:15:47.946 --> 00:15:51.080
 it, but you are giving it away 
for free.  Have you thought this

00:15:51.574 --> 00:15:56.316
 through?  Isn't this something 
you should be keeping closely 

00:15:56.317 --> 00:15:56.896
held? 
&gt;&gt; JEFF DEAN:  There was a 

00:15:56.897 --> 00:16:00.943
little bit of debate internally.
  We decided to open source it 

00:16:00.944 --> 00:16:07.578
and it has a nice patch  Apache 
license which means you can take

00:16:07.769 --> 00:16:10.896
 it and do what you want with 
it, and the reason we did that 

00:16:10.897 --> 00:16:14.639
is several fold.  One is we 
think it's a good way of making 

00:16:14.640 --> 00:16:19.258
research ideas and machine 
learning propagate more quickly 

00:16:19.259 --> 00:16:21.863
throughout the community.  
People can publish existing of 

00:16:21.864 --> 00:16:25.298
something they have done and 
people can pick up that thing 

00:16:25.299 --> 00:16:28.019
and reproduce those people's 
results or build on them, and, 

00:16:28.020 --> 00:16:33.561
you know F. you look on github 
there are 1500 repos fors that 

00:16:33.562 --> 00:16:37.188
mention tenser flow and only 
five are from Google.  So it's 

00:16:37.189 --> 00:16:42.623
people doing all kinds of stuff 
with  tenser

00:16:46.869 --> 00:16:47.850
 flow. 
&gt;&gt; TOM SIMONITE:  Where is this 

00:16:47.851 --> 00:16:51.583
going?  I imagine now that t 
enser flow is mostly used with 

00:16:51.584 --> 00:16:54.509
people who are quite familiar 
with machine learning, but 

00:16:54.510 --> 00:16:57.420
ultimately the way I hear people
 talk about machine learning is 

00:16:57.421 --> 00:17:01.763
it's just going to be used by 
everyone, everywhere.  So can 

00:17:01.764 --> 00:17:03.955
developers who don't have much 
of a background in this stuff 

00:17:03.956 --> 00:17:07.076
pick it up yet?  Is that 
possible? 

00:17:07.077 --> 00:17:09.077
&gt;&gt; JEFF DEAN:  Yes, I think 
actually there is a whole set of

00:17:09.284 --> 00:17:12.205
 ways in which people can take 
advantage of machine learning.  

00:17:12.206 --> 00:17:16.852
One is as a fundamental machine 
learning researcher you want to 

00:17:16.853 --> 00:17:19.980
develop new algorithms and that 
will be a relatively small 

00:17:19.981 --> 00:17:23.901
fraction of people in the world.
  As new algorithms and models 

00:17:23.902 --> 00:17:26.022
are developed to solve 
particular problems, those 

00:17:26.023 --> 00:17:29.070
models can be applied in lots of
 different things.  If you look 

00:17:29.071 --> 00:17:35.874
at the use of machine learning 
in the diabetic retinopathy 

00:17:35.875 --> 00:17:38.791
stuff, that's a similar problem 
to a lot of other problems where

00:17:38.792 --> 00:17:43.528
 you are trying to look at an 
image and detect some part 

00:17:43.529 --> 00:17:46.557
that's unusual.  We have a 
similar problem of finding text 

00:17:46.558 --> 00:17:49.887
in street view images so we can 
read the text. 

00:17:49.888 --> 00:17:54.100
That looks similar to a model to
 detect disease parts of an eye,

00:17:54.688 --> 00:17:58.120
 just different training data, 
but the same model.  So I think 

00:17:58.121 --> 00:18:01.539
the broader set of models will 
be accessible to more and more 

00:18:01.540 --> 00:18:04.478
people, and then there is even 
an easier way where you don't 

00:18:04.479 --> 00:18:07.367
really need much machine 
learning knowledge at all and 

00:18:09.514 --> 00:18:12.612
that is to use pre trained APIs.
  You can use our Cloud vision 

00:18:12.613 --> 00:18:17.466
API or speech API simply, just 
give us an image and we give you

00:18:18.089 --> 00:18:21.717
 back good stuff and as part of 
the tenser flow open source we 

00:18:21.718 --> 00:18:25.004
released, for example, an 
inception model that does image 

00:18:25.005 --> 00:18:29.478
classification that's the same 
model that under lies Google 

00:18:29.479 --> 00:18:30.946
photos. 
&gt;&gt; TOM SIMONITE:  So it will be 

00:18:30.947 --> 00:18:34.281
possible for someone, maybe they
 are an experienced builder of 

00:18:34.282 --> 00:18:36.791
apps but don't know much about 
machine learning they could have

00:18:37.501 --> 00:18:42.031
 an idea and use the building 
blocks together. 

00:18:42.032 --> 00:18:43.663
&gt;&gt; JEFF DEAN:  One of the 
republicans tenser flow has 

00:18:43.664 --> 00:18:49.187
taken off is tutorials in  
tenser flow are quite good in i 

00:18:49.188 --> 00:18:51.996
dentifying six or seven 
different kinds of models in 

00:18:51.997 --> 00:18:54.722
machine learning and showing 
people how they work, stepping 

00:18:55.335 --> 00:18:57.454
through both the machine 
learning going on underneath and

00:18:57.660 --> 00:19:00.371
 how you express them in tenser 
flow.  It's been pretty well

00:19:03.746 --> 00:19:04.298
 received. 
&gt;&gt; TOM SIMONITE:  I think we 

00:19:04.299 --> 00:19:08.032
have seen in the past that when 
a new platform of mode or 

00:19:08.033 --> 00:19:10.231
interaction comes forward, we 
have to experiment for some time

00:19:10.635 --> 00:19:13.049
 before we figure out what 
works, right?  And sometimes 

00:19:13.050 --> 00:19:17.500
when we look back, we might 
think, oh, those first 

00:19:17.501 --> 00:19:21.206
generation mobile apps were 
clunky and not so smart.  How 

00:19:21.207 --> 00:19:24.515
are we going with that process 
here?  We are starting to have 

00:19:24.516 --> 00:19:28.256
to understand how, what types of
 interaction work? 

00:19:28.257 --> 00:19:30.372
&gt;&gt; APARNA CHENNAPRAGADA:  And I 
think that's, it's one of the 

00:19:30.373 --> 00:19:33.691
things that's not intuitive when
 you start out.  You rush out 

00:19:33.692 --> 00:19:37.713
into a new area like we have all
 done.  One experience when we 

00:19:37.714 --> 00:19:41.945
started working on Google now, 
one thing we realized is it's 

00:19:41.946 --> 00:19:44.563
really important to make sure 
that depending on the product 

00:19:44.564 --> 00:19:46.654
domain, some then of the these 
user black box is systems, like 

00:19:46.655 --> 00:19:47.873
all you need to right, I pay 
attention should refresh to what

00:19:47.874 --> 00:19:49.728
 myself because we the data call
 I'm internally displaying as 

00:19:49.729 --> 00:19:53.935
has changed the wow! .  So you 
go there, To it refreshes WDH 

00:19:53.936 --> 00:19:55.851
ratio.  As soon, as this you is 
when say it there is is yellow 

00:19:55.852 --> 00:19:57.348
delight because you know data is
 pending fall magical, it's 

00:19:57.349 --> 00:20:01.798
moments, right, not but s then 
ify youn getc it wrong, there is

00:20:01.799 --> 00:20:01.856
 a high cost to the user.  So to
 give you ed yet.  Then when the

00:20:01.857 --> 00:20:02.945
 application logic finally sinks
,an maybe three example days 

00:20:02.946 --> 00:20:04.586
later, in who cares, Google 
search it let's up saydates you 

00:20:04.587 --> 00:20:06.442
the model again search, and for 
if you're Justin really 

00:20:06.443 --> 00:20:09.443
Timberlake still and we got a 
there slightly less relevant 

00:20:09.444 --> 00:20:12.166
answer, not a big, deal, it's 
going to re but then if   the 

00:20:12.167 --> 00:20:13.483
assistant told   refreshyou 
itself to. sit in  the The views

00:20:13.484 --> 00:20:15.000
, represent the car model go and
 drive nothing to else. the 

00:20:15.001 --> 00:20:18.816
airport and you missed your 
flight, what  the hell?  Right, 

00:20:18.817 --> 00:20:20.933
so I think it's important to get
 Of course, the temporary U 

00:20:20.934 --> 00:20:24.002
ratioI states.

00:20:37.504 --> 00:20:39.504
  I was on the application

00:20:42.058 --> 00:20:48.546
 two minutes ago, it says the 
list is there.  You fetch the 

00:20:48.547 --> 00:20:57.457
list much users.  Fetch the data
, if the user liked this.  

00:20:57.458 --> 00:20:59.529
Multiple workers, so after 
refreshing user data from 

00:20:59.530 --> 00:21:06.384
network, the other one sends the
 user stats, and like you went 

00:21:06.385 --> 00:21:10.407
back, you want to read the list 
of users from the disc, so you 

00:21:10.408 --> 00:21:14.315
are trying to load it from the 
disc, but the problem is your 

00:21:14.316 --> 00:21:17.788
background turns out busy trying
 to make a network request.  

00:21:17.789 --> 00:21:21.728
Like this is so bad because you 
know you won't be able to access

00:21:21.833 --> 00:21:26.111
 it, but the network you don't 
know,

00:21:26.321 --> 00:21:29.371
and you're making the user wait 
for no reason.  The solution for

00:21:29.591 --> 00:21:35.154
 this is very simple, you just 
have different queues, you 

00:21:35.155 --> 00:21:38.288
cannot just create a queue for 
every type of run, but usually 

00:21:38.289 --> 00:21:41.232
at least you should have one for
 your network related stuff and 

00:21:41.233 --> 00:21:48.567
one for your local access.  Even
 for local access, you probably 

00:21:48.568 --> 00:21:52.390
just, those things are under 
200, 300 milliseconds, very fast

00:21:52.606 --> 00:21:57.306
.  So once we do this, we have 
these tests because you want to 

00:21:57.307 --> 00:22:05.656
get data, they get in different 
queues.  So even if the network 

00:22:05.657 --> 00:22:09.577
is slow, locally everything is 
working.  This is what we call 

00:22:09.578 --> 00:22:12.208
applications should work offline
, everything just works, then 

00:22:12.209 --> 00:22:17.921
you're trying to sync it later 
on.  So we'll look at the other 

00:22:17.922 --> 00:22:22.411
section, how you optimize for 
the next billion.  Next billion 

00:22:22.412 --> 00:22:24.750
looks like this.

00:22:29.473 --> 00:22:32.433
  So this you need to translate 
your application.  If you want 

00:22:32.434 --> 00:22:36.128
people to use it in other areas 
of the world, you want it to be 

00:22:36.129 --> 00:22:40.528
translated.  So you translate 
the application, you translate 

00:22:40.529 --> 00:22:45.324
your assets because you may have
 text there, and you also 

00:22:45.325 --> 00:22:50.112
translate your purchases so they
 can spend -- their in app 

00:22:50.113 --> 00:22:52.711
purchases so they can spend 
money.  This is not completely 

00:22:52.712 --> 00:22:56.377
true.  Translate ing is not the 
right word.  The right thing you

00:22:56.600 --> 00:22:59.567
 should do is localize.  So 
localize your application.  

00:22:59.568 --> 00:23:02.070
Don't just translate it because 
let's say you have an 

00:23:02.071 --> 00:23:09.596
application about the family 
communicate ing with their kids,

00:23:10.693 --> 00:23:14.395
 on the place or page, if you 
have American Family, you put 

00:23:14.396 --> 00:23:18.100
Indonesian family, or the 
Chinese family, you should 

00:23:18.101 --> 00:23:20.382
localize your assets also in the
 application because this is 

00:23:20.383 --> 00:23:23.528
what will make sense to that 
user.  Every culture has their 

00:23:23.529 --> 00:23:26.133
differences, and if you want to 
make the best of localization, 

00:23:26.134 --> 00:23:32.697
this is what you should be doing
.  The other thing is text free 

00:23:32.698 --> 00:23:35.524
layouts.  The way you can do 
this is really useful.  For 

00:23:35.525 --> 00:23:38.248
example, if you're a message ing
 app, if you just want to say 

00:23:38.249 --> 00:23:46.194
send, don't say send.  Put check
 marks.  If it's red, put 

00:23:46.195 --> 00:23:50.771
double-check marks.  This helps 
you so you don't need to 

00:23:50.772 --> 00:23:55.107
translate it, it's fairly global
, your users learn it, and even 

00:23:55.108 --> 00:24:01.760
if your application is not 
message ing something, the 

00:24:01.761 --> 00:24:05.022
literature rate may not be very 
good in that area, this will 

00:24:05.023 --> 00:24:08.940
help more users be able to use 
your application.  If you have 

00:24:08.941 --> 00:24:13.939
no WiFi, don't just put wa no 
WiFi, people learn this.  If you

00:24:13.940 --> 00:24:17.428
 use the material team and stuff
, user lands your application 

00:24:17.429 --> 00:24:23.108
and actual knows it, this is 
very important.  The other thing

00:24:23.548 --> 00:24:26.492
 is about adaptive content 
fetching.  Let's say it's an 

00:24:26.493 --> 00:24:32.233
application that shows photos, 
and this is the same UI.  It 

00:24:32.234 --> 00:24:35.058
looks the same.  Of course the 
one on the right is kind of low 

00:24:35.059 --> 00:24:40.911
quality.  But the one on the 
left is 100% J peculiar 

00:24:41.780 --> 00:24:46.485
           JPEG and the right is
 10% JPEG.  Almost one-tenth of 

00:24:46.486 --> 00:24:49.420
it in terms of size and it looks
 okay.  Of course you don't want

00:24:49.733 --> 00:24:54.620
 to show a lower color image to 
your users, but you need to 

00:24:54.621 --> 00:24:57.759
think about, they either see the
 lower quality image or a blank 

00:24:57.760 --> 00:25:00.229
screen.  There's a big 
difference between seeing a 

00:25:00.230 --> 00:25:04.256
blank screen and a low quality 
image.  Bonus points, you can 

00:25:04.257 --> 00:25:07.083
refresh the content so you 
realize the network is not very 

00:25:07.084 --> 00:25:10.474
good, you refresh the lower 
quality image and once you 

00:25:10.475 --> 00:25:13.629
figure out someone else network 
recovers, you refresh those 

00:25:13.630 --> 00:25:20.591
images, especially if it is free
, you should do that.  Like the 

00:25:20.592 --> 00:25:23.927
connectivity API, it tells you 
if the network is metered or not

00:25:24.284 --> 00:25:27.212
.  So I want to give you some 
examples what we do at Google 

00:25:27.213 --> 00:25:31.017
about this.  For example, if 
you're using Google+ in the 

00:25:31.018 --> 00:25:36.778
settings there's a way to say 
okay, data usage.  If you're 

00:25:36.779 --> 00:25:38.974
even living in the United 
States, you

00:25:42.908 --> 00:25:45.198
 don't appreciate it because you
 have the data, but the rest of 

00:25:45.199 --> 00:25:47.453
the people pay premiums for 
their data, so they're very, 

00:25:47.454 --> 00:25:50.497
very cautious about it.  So you 
put the settings like that.  And

00:25:50.498 --> 00:25:54.300
 in Google+, these are what we 
actually do.  If the network is 

00:25:54.301 --> 00:25:58.675
fast, we fetch a high quality EG
.  Appears the network         

00:25:58.777 --> 00:26:04.874
                 JPEG.  As the 
network goes slower, so like 

00:26:04.875 --> 00:26:09.209
instead of user seeing a blank, 
the user sees some data, they 

00:26:09.210 --> 00:26:14.522
get a better user experience.  
We also educate use ers.  This 

00:26:14.523 --> 00:26:18.897
is also important.  What does it
 mean to conservative data, why 

00:26:18.898 --> 00:26:22.372
don't you always do it?  Like 
why waste my data?  Users click 

00:26:22.373 --> 00:26:25.335
on there and we explain to them,
 this is what it means to save 

00:26:25.336 --> 00:26:29.670
data.  Another part is adaptive 
behavior.  It's very common in 

00:26:29.671 --> 00:26:33.272
applications to have like auto 
playing games or auto playing 

00:26:33.273 --> 00:26:36.082
videos.  What you should do is  
 is, okay, at this point my user

00:26:36.957 --> 00:26:39.891
 is showing my feed, is the 
network fast?  If the network is

00:26:40.661 --> 00:26:44.237
 fast, just go auto play the 
video.  But if the network is 

00:26:44.238 --> 00:26:48.168
slow, don't do that.  Just put 
the play button.  Don't waste 

00:26:48.169 --> 00:26:51.864
the network just because they 
may want to watch that video.  

00:26:51.865 --> 00:26:55.700
That's a bad thing for your 
users.  And I have good network 

00:26:55.701 --> 00:27:01.048
here, so I will play this video.
          &gt;&gt; Yes.

00:27:04.465 --> 00:27:06.465
irl.

00:27:07.913 --> 00:27:10.046
.
          &gt;&gt; YIGIT BOYAR:  For 

00:27:07.913 --> 00:27:11.493
example, this is what we do in 
YouTube, right?  In YouTube, if 

00:27:11.494 --> 00:27:14.556
you go to call the settings, 
there's an answer that says 

00:27:14.557 --> 00:27:17.806
auto.  Essential what it does,  

00:27:17.807 --> 00:27:21.289
Essentially what it does, by 
checking the network quality, we

00:27:21.736 --> 00:27:24.763
 adjust your bit rate.  You 
probably don't even notice, but 

00:27:25.433 --> 00:27:32.609
    but it takes time to 
implement.  Google spghts dash 

00:27:32.610 --> 00:27:35.647
and streaming.  All you have to 
do is use this library and let 

00:27:35.648 --> 00:27:39.885
it handle the different network 
protocols.  Of course also your 

00:27:39.886 --> 00:27:49.378
server side needs to support it.
  This is important.  Okay.  So 

00:27:49.379 --> 00:27:54.044
another use case, we'll look at 
Uncle Bob.  So this guy goes to 

00:27:54.045 --> 00:27:58.920
work every morning, takes the 
bus, Google bus, reads his news 

00:27:58.921 --> 00:28:02.272
on the bus, does the same thing 
on the way back.  This happens 

00:28:02.273 --> 00:28:07.828
all the time.  But what also 
happens all the time is this, 

00:28:07.829 --> 00:28:10.864
he's seeing a loading dialogue 
when he tries to read his 

00:28:10.865 --> 00:28:14.669
network, read his news, because 
there's another of 0 people in 

00:28:14.670 --> 00:28:17.261
the same bus trying to use the 
same internet connection and 

00:28:17.262 --> 00:28:20.418
there's -- there's another 60 
people in the same bus trying to

00:28:20.528 --> 00:28:22.959
 use the same internet 
connection and there's other 

00:28:22.960 --> 00:28:26.009
cars there and it gets congested
 and no one gets a good 

00:28:26.010 --> 00:28:29.372
experience.  How can we fix this
?  The good news is that this 

00:28:29.373 --> 00:28:31.842
guy goes to work at the same 
time every morning        

00:28:31.843 --> 00:28:35.469
morning, he wakes up at 6:30, 
no-brainer, set an alarm.  

00:28:35.470 --> 00:28:38.233
Right?  We can set an alarm to 
prepare the content for him, and

00:28:38.548 --> 00:28:43.127
 also maybe he leaves work at 
like 5:30 every night.  Set an 

00:28:43.128 --> 00:28:46.204
alrm for that and prepare the 
content so that they get some

00:28:49.213 --> 00:28:53.038
 content when they open the 
application.  The way we can do 

00:28:53.039 --> 00:28:57.699
this, help you wake up your 
application every morning 6:30 

00:28:57.700 --> 00:29:02.693
so you can prefetch your content
.  Let's say we implemented, all

00:29:02.910 --> 00:29:05.852
 these users have a good 
experience every morning at 6:30

00:29:05.853 --> 00:29:09.991
 they get the latest news and 
they are happy.  But then we get

00:29:10.191 --> 00:29:14.757
 more users and more users make 
this request at 6:30 and then 

00:29:14.758 --> 00:29:18.153
this is what happens, your Cloud
 goes down.  You know what comes

00:29:18.466 --> 00:29:26.652
 up when your Cloud goes down?  
Your system admin.  Bad guy 

00:29:26.653 --> 00:29:31.211
slept at like 4:30 in the 
morning, you woke him up at 6:30

00:29:31.212 --> 00:29:36.935
 with a pager.  It's a real 
story actually

00:29:40.037 --> 00:29:42.330
         actually, topts see a 
podcast from a provider, they 

00:29:42.331 --> 00:29:44.745
say there's a bug with Android 
phones every morning at this 

00:29:44.746 --> 00:29:47.243
time we are getting so many 
requests.  Turns out it was an 

00:29:47.244 --> 00:29:50.061
application like this.  So we 
don't do that.  How do we fix 

00:29:50.062 --> 00:29:57.113
this?  Super-simple.  So instead
 of just waking up at 6:30, you 

00:29:57.114 --> 00:30:00.943
randomize it, wake up between 
6:00 and 7:00 and then you wake 

00:30:00.944 --> 00:30:06.260
up each application in that 
random time.  And then

00:30:10.025 --> 00:30:15.459
 you're happy.  But then we are 
unhappy.  Seriously, 2016.  Come

00:30:15.460 --> 00:30:20.124
 o how do we do this?  We do 
this with job scierl or you can 

00:30:20.125 --> 00:30:26.352
use GCR network manager for the 
older API versions.  We want to 

00:30:26.353 --> 00:30:29.395
do this with job schedule er, 
you create a job, you say okay, 

00:30:29.396 --> 00:30:32.449
this is my service, you say we 
want the un   unmetered network,

00:30:32.648 --> 00:30:35.933
 there's no reason to cache the 
data if user is going to pay for

00:30:36.041 --> 00:30:41.367
 it.  Then we say, okay, start 
the earliest around 6:30 and 

00:30:41.368 --> 00:30:46.611
then make it only if the device 
is idle.  And you say if it's 

00:30:46.612 --> 00:30:50.616
only charging.  Like these are 
all optional things.  Say all 

00:30:50.617 --> 00:30:53.673
right, these are all optional 
things that you can do depending

00:30:53.999 --> 00:30:59.198
 on your use case.  What does 
this override deadline mean?  

00:30:59.199 --> 00:31:01.794
The idea here is that let's say 
we have this thing and the user 

00:31:01.795 --> 00:31:05.266
forgot to charge their phone, so
 they'll never wake up in the 

00:31:05.267 --> 00:31:09.338
morning, but what will happen is
 it will be waiting there 

00:31:09.339 --> 00:31:12.477
sitting idle, maybe he'll go to 
work and then they will plug in 

00:31:12.478 --> 00:31:15.937
their phone and then fetch the 
content.  It's already past, 

00:31:15.938 --> 00:31:19.189
like we missed the deadline, why
 would you do this?  We tell the

00:31:19.412 --> 00:31:23.316
 job schedule er, hey, if you 
cannot do this until 7:30, wake 

00:31:23.317 --> 00:31:29.713
me up.  So what we can do is 
when the job is started, you can

00:31:29.714 --> 00:31:34.053
 simply check, okay, did I get 
the dateline?  Did the dateline 

00:31:34.370 --> 00:31:37.859
                            date
 deadline?  Did the deadline 

00:31:37.860 --> 00:31:41.337
expire?  If the deadline expired
, this is why I was woken up.  

00:31:41.338 --> 00:31:44.060
If the connection is limited, if
 it is not, I don't want it on 

00:31:44.061 --> 00:31:48.531
this job anymore.  Or if you can
 say something like if the 

00:31:48.532 --> 00:31:53.192
battery is charging or is like 
at least 75%, otherwise, I will 

00:31:53.193 --> 00:31:57.338
not run this job.  So this 
completely depends on your use 

00:31:57.339 --> 00:32:02.887
case, but you get the idea.  
Like I think we provide enough 

00:32:02.888 --> 00:32:06.422
APIs on the framework side to be
 able to implement these things.

00:32:06.510 --> 00:32:10.667
  And it's not hard.  And your 
user receives a really good user

00:32:11.095 --> 00:32:16.283
 experience.  It's important.  
So for example, in YouTube, you 

00:32:16.284 --> 00:32:20.003
you can         can go ahead and
 download the video for offline.

00:32:20.181 --> 00:32:22.926
  At home you watch the TV 
series, you download it, and 

00:32:22.927 --> 00:32:26.520
while on the bus you can watch 
it.  Or in maps, like recently I

00:32:26.745 --> 00:32:30.214
 was on vacation outside the 
country and I just downloaded he

00:32:30.542 --> 00:32:33.586
 the area on Google maps and 
even though I didn't have data 

00:32:33.587 --> 00:32:37.393
there, I could use my phone to 
navigate.  It was so nice.  So 

00:32:37.394 --> 00:32:40.231
these are like little things 
that make a huge user experience

00:32:42.224 --> 00:32:44.224
 difference

00:32:45.902 --> 00:32:49.727
.  Another example of prefetch
ing, this is slightly different 

00:32:49.728 --> 00:32:52.773
but this is what we do in 
Google+.  Whenever there is a 

00:32:52.774 --> 00:32:56.261
new post, we show like little 
touch button that you can tap to

00:32:56.574 --> 00:33:03.060
 refresh.  So in there what 
happens behind the scenes is we 

00:33:03.061 --> 00:33:05.985
detect there are new posts, we 
let the user know, and if the 

00:33:05.986 --> 00:33:09.797
user taps, we are going to go 
ahead and fetch the content and 

00:33:09.798 --> 00:33:13.832
then refresh the UI.  Now, we 
changed this a little bit.  This

00:33:13.833 --> 00:33:17.926
 is what we did.  When we did a 
new post now, we actually go 

00:33:17.927 --> 00:33:21.868
ahead and fetch it because users
 in the application with new 

00:33:21.869 --> 00:33:25.107
posts, they want to see, we are 
fairly comfortable that they 

00:33:25.108 --> 00:33:28.912
want that content, so we fetch 
it for them.  Then we leapt the 

00:33:28.913 --> 00:33:31.407
user know that there's new 
content of the look, we don't 

00:33:31.408 --> 00:33:33.785
just refresh it because they 
might be doing something else 

00:33:33.786 --> 00:33:36.512
and it will be a bad user 
experience.  Instead, we just 

00:33:36.513 --> 00:33:40.971
notify the user there is new 
content.  And if they tap, we'll

00:33:41.296 --> 00:33:44.984
 refresh the data.  Now, the 
difference between these two 

00:33:44.985 --> 00:33:48.686
user experience flaws is the 
first one takes around three 

00:33:48.687 --> 00:33:55.656
seconds, the second one takes .3
 seconds.  This is a 9X 

00:33:55.657 --> 00:33:58.355
difference, just change the 
order of two operations, a huge 

00:33:58.356 --> 00:34:02.836
user experience improvement with
 very, very little.  It's 

00:34:02.837 --> 00:34:07.871
important.  But if you're doing 
prefetching, it's a very 

00:34:07.872 --> 00:34:10.653
dangerous thing.  It's really 
good for users, but it also 

00:34:10.654 --> 00:34:12.840
might be really bad.  So you 
have to be careful.  The first 

00:34:12.841 --> 00:34:15.675
thing you should be doing is 
balance for the available 

00:34:15.676 --> 00:34:18.406
storage.  Just don't fill up 
their phone, especially in the 

00:34:18.407 --> 00:34:21.836
rest of the world, the phones 
have lower memory, so you 

00:34:21.837 --> 00:34:26.950
shouldn't be filling it up with 
prefetched content.  Or if you 

00:34:26.951 --> 00:34:31.600
are going to fetch some data 
that's expensive, let user know 

00:34:31.601 --> 00:34:34.552
like, you know, I want to do 
this update, provide them the 

00:34:34.553 --> 00:34:39.421
settings for these things.  Like
 these people are really, really

00:34:39.742 --> 00:34:45.508
, like they care about their 
data, so you should give them 

00:34:45.509 --> 00:34:52.033
options and they will use them. 
 The other part is, so I always 

00:34:52.034 --> 00:34:56.514
get this thing rs oh, now the 
Android devices have 3 gigabytes

00:34:56.515 --> 00:35:00.380
 of memory, we don't need to 
care about it.  Wrong.  The 

00:35:00.381 --> 00:35:08.740
screen has got a lot bigger, so 
we need to use a lot more memory

00:35:08.741 --> 00:35:12.886
 and better quality.  We try to 
run many more applications 

00:35:12.887 --> 00:35:15.587
because it's best for the user. 
 So always measure your memory. 

00:35:15.926 --> 00:35:19.606
 Like in the latest versions of 
Android, this is so easy, you 

00:35:19.607 --> 00:35:23.189
tap on a button.  Remember 
before you need to get the 

00:35:23.190 --> 00:35:27.958
memory from DDMS and then 
convert it and it was a mess.  

00:35:27.959 --> 00:35:33.841
Now in Android Studio, you just 
click on a button, it opens in 

00:35:33.842 --> 00:35:37.543
this nice UI and you know 
there's the usual suspects there

00:35:37.761 --> 00:35:41.537
.  So just click on that, it 
will show you all this.  You can

00:35:43.234 --> 00:35:45.943
 check, okay, why am I retaining
 this object?  The coolest 

00:35:45.944 --> 00:35:48.939
thing, I love this thing, you 
can just right click on the 

00:35:48.940 --> 00:35:53.312
selected title.  Like how cool 
is that?  You know what you 

00:35:53.313 --> 00:35:55.796
have, this is so much faster 
than what you were able to do 

00:35:55.797 --> 00:35:58.463
before.  So we are always 
spending time making these tools

00:35:59.098 --> 00:36:02.523
 better and should take 
advantage of them.

00:36:05.643 --> 00:36:11.083
  So you guys have seen in N 
we're spending a lot of time in 

00:36:11.084 --> 00:36:14.912
battery life.  This is very 
important for us.  We cannot do 

00:36:14.913 --> 00:36:18.852
this without your help.  So in N
, we also introduce this new 

00:36:18.853 --> 00:36:22.227
feature called data saver where 
user can say, you know what, 

00:36:22.228 --> 00:36:25.273
iment       I want to limit the 
application data for the 

00:36:25.274 --> 00:36:28.627
background apps, they don't get 
any data unless the network is 

00:36:28.628 --> 00:36:33.410
limited.  But if you're a good 
application, the user white 

00:36:33.411 --> 00:36:38.956
whitelist you               
      might whitelist you, so 

00:36:38.957 --> 00:36:42.781
you'll get the data while your 
competitor doesn't.  And it only

00:36:42.891 --> 00:36:46.571
 works in metered networks.  So 
we only block you if we have a 

00:36:46.572 --> 00:36:50.598
reason to do so.  So how to use 
it   it?  The connectivity 

00:36:50.599 --> 00:36:52.599
manager now has this new

00:36:56.040 --> 00:36:59.973
 API that can say is the active 
network metered?  If it is 

00:36:56.040 --> 00:36:59.292
metered, you can get the 
background status, like if it is

00:36:59.293 --> 00:37:05.343
 enable ed or if you are 
whitelist          whitelisted 

00:37:05.344 --> 00:37:09.475
or you are disabled.  So the 
idea is even if the user put 

00:37:09.476 --> 00:37:12.531
data saver on but you are 
whitelisted, you should still be

00:37:12.730 --> 00:37:16.919
 cautious about okay, I don't 
want to spend too much data, I 

00:37:16.920 --> 00:37:24.276
have use            , you don't 
need to send it now, you can 

00:37:24.277 --> 00:37:28.844
send it later.  Going to some 
offline use cases and I want you

00:37:29.058 --> 00:37:31.873
 to start thinking about, okay, 
how can I make my application 

00:37:31.874 --> 00:37:36.883
more offline?  So one use case, 
the first time we give it a year

00:37:37.088 --> 00:37:40.389
 ago, people said okay, for 
commercial app, there's a place 

00:37:40.390 --> 00:37:44.088
where people buy products, I 
cannot make it offline, which is

00:37:45.828 --> 00:37:46.788
 true, you cannot make it 
offline because the price 

00:37:46.789 --> 00:37:49.824
changes.  There's no way you'll 
tell them, hey, you bought this 

00:37:49.825 --> 00:37:53.517
for $500 and then one day later 
you charge them $700.  You 

00:37:53.518 --> 00:37:56.997
cannot do that.  That would be 
rude.  But there are still 

00:37:56.998 --> 00:38:02.457
things you can do.  In your 
application, like product 

00:38:02.458 --> 00:38:04.638
information, when you buy 
something, when I'm going buy 

00:38:04.639 --> 00:38:07.356
something          something, 
like I go to the same page again

00:38:07.570 --> 00:38:11.242
 and again and again, this 
happens, this is user behavior. 

00:38:11.472 --> 00:38:16.497
 So optimize for that.  Keep the
 user data.  Let them search.  I

00:38:16.498 --> 00:38:19.867
 will probably search for the 
same products, let them do local

00:38:19.970 --> 00:38:23.332
 search.  Remember when we 
talked about having the proper 

00:38:23.333 --> 00:38:25.657
model?  It helps them here 
because you can let them search 

00:38:25.658 --> 00:38:31.315
locally plus to let them know I 
am showing the local.  If they 

00:38:31.316 --> 00:38:33.964
go to the product page, show 
some sort of animation saying 

00:38:33.965 --> 00:38:39.289
you can't buy this right now, 
I'm fetching the price, and then

00:38:39.617 --> 00:38:43.226
 when the price comes, you show 
it to them.  So you don't block 

00:38:43.227 --> 00:38:47.147
the user, but for important data
, you just

00:38:47.148 --> 00:38:52.131
don't show it, or show it grade 
out           grayed out.  I 

00:38:52.132 --> 00:38:54.853
know.  But think about this.  
Another example is a message ing

00:38:54.854 --> 00:39:03.890
 app.  So say Jenny and Michael.
  This is fine, pick me up at

00:39:04.879 --> 00:39:09.983
 7:00.  Okay.  We'll meet at 
7:00.  But around 6:30, Michael 

00:39:09.984 --> 00:39:11.984
realizes that hey, his dog is

00:39:14.423 --> 00:39:15.313
 sick, he doesn't want to leave 
the dog home.  So he says hey, 

00:39:15.314 --> 00:39:18.896
Jenny, my dog is sick.  Well, 
how about you come over, we hang

00:39:19.097 --> 00:39:24.233
 out at home.  That's so cool.  
Unless, you know, well, the mess

00:39:24.551 --> 00:39:27.470
 sang couldn't be sent for 
whatever reason.  Failed.  So as

00:39:27.807 --> 00:39:32.590
 a developer, I let the user 
know, you're actually not done, 

00:39:32.591 --> 00:39:35.639
because Michael, well, he wants 
to call his vet to get some tips

00:39:35.761 --> 00:39:38.997
 and stuff, so he already left 
the application.  So Michael did

00:39:39.338 --> 00:39:43.568
 not know that he could not send
 the message.  Michael couldn't 

00:39:43.569 --> 00:39:46.312
know that he didn't send the 
message, Jenny never saw the 

00:39:46.313 --> 00:39:48.313
message

00:39:49.462 --> 00:39:52.496
, and this is Jenny      Jenny's
 heart, it's broken because of 

00:39:52.497 --> 00:39:54.497
you.
          (laughter)

00:39:59.715 --> 00:40:00.700
.
          What can you do?  You 

00:40:00.701 --> 00:40:03.861
can do something better.  It's 
important          important.  

00:40:03.862 --> 00:40:05.295
If you like the dating profile 
and you couldn't send it to the 

00:40:05.296 --> 00:40:08.339
user now, it's fine, it's not 
that important.  Message        

00:40:08.340 --> 00:40:10.829
Messaging application, instant 
message ing application, you 

00:40:10.830 --> 00:40:14.530
have some responsibilities.  So 
if you couldn't send the message

00:40:14.963 --> 00:40:18.005
 and you know the user didn't 
see t let them know.  Show a 

00:40:18.006 --> 00:40:20.186
notification, because you 
already know that user is not in

00:40:20.504 --> 00:40:23.222
 your activity, you already know
 that they did not see the 

00:40:23.223 --> 00:40:29.746
message.  So instead, show the 
notification, Michael calls his 

00:40:29.747 --> 00:40:34.623
girlfriend and they're a happy 
couple thanks to you.  Another 

00:40:34.624 --> 00:40:37.640
thing that you can like further 
improve the user experience is 

00:40:37.641 --> 00:40:41.477
you can always let them know, 
like if you're in the screen, 

00:40:41.478 --> 00:40:43.770
they're message ing, if you know
 there's no internet connection,

00:40:44.089 --> 00:40:49.025
 just put it.  If you're 
listening for internet 

00:40:49.026 --> 00:40:54.116
connection in N, you only 
receive that broadcast if you're

00:40:55.402 --> 00:41:00.854
 in the application, like don't 
register for that broadcast, you

00:41:01.278 --> 00:41:04.306
 can try, it's not going on work
.  But your application, you can

00:41:04.307 --> 00:41:09.215
 still use the connectivity 
measure and broadcast.  So the 

00:41:09.216 --> 00:41:13.012
other example, if you like TV 
schedule application, of course 

00:41:13.013 --> 00:41:16.463
they cannot watch TV offline, 
but you can do some stuff, you 

00:41:16.464 --> 00:41:21.263
can let them click on a button 
and schedule an larm.  Right?  

00:41:21.264 --> 00:41:24.734
There are still things you can 
do because you can implant this 

00:41:24.735 --> 00:41:29.132
all within the device without 
requiring network communication.

00:41:29.498 --> 00:41:32.329
  So the idea is if you start 
thinking about what can I do off

00:41:32.761 --> 00:41:36.133
line, you will find really, 
really good use cases and it's 

00:41:36.134 --> 00:41:38.832
going differ he be yait your 
application.  So even though we 

00:41:38.833 --> 00:41:43.610
are talking about this, we say 
the next billion users, it helps

00:41:44.040 --> 00:41:47.734
 the users, everybody around the
 world.  It's not only for them.

00:41:47.923 --> 00:41:52.021
  Okay.  So I want to quickly go
 through this

00:41:55.239 --> 00:41:59.369
, you synchronize the data.  
Update the model and synchronize

00:41:59.370 --> 00:42:03.185
 the data.  How do I do this?  
Molecular scientist is work og 

00:42:03.186 --> 00:42:06.972
this problem, they don't have to
 sfl it, there's something 

00:42:06.973 --> 00:42:09.050
called operational transforming 
            transforming, things

00:42:09.810 --> 00:42:13.165
 like Google Docs users, a bunch
 of things I don't know, other 

00:42:13.166 --> 00:42:17.548
articles, but you don't need 
them.  What we apply is the 

00:42:17.549 --> 00:42:23.039
Pareto principal.  We'll do    
                         Pareto 

00:42:23.040 --> 00:42:28.774
principle, we'll do 20% of the 
work, get 80% of the benefits 

00:42:28.775 --> 00:42:32.030
and run away.  You have 
something a user likes, when 

00:42:32.031 --> 00:42:36.379
your user likes t marketers like
 it, you update the model.  But 

00:42:36.380 --> 00:42:38.743
what happens is next time like 
there was another request 

00:42:38.744 --> 00:42:43.449
running and it fetches a list 
again, overwrites what you have 

00:42:43.450 --> 00:42:48.209
put there.  That's a bad problem
.  How do you solve this?  Very 

00:42:48.210 --> 00:42:51.032
easy.  You add another field 
that you only modify locally, so

00:42:51.779 --> 00:42:54.845
 it's yours      yours.  I call 
this like ed local here.  So 

00:42:54.846 --> 00:42:57.904
when you want to check if user 
liked the post, you do this, hey

00:42:57.986 --> 00:43:03.973
, you update that field.  When 
you fetch the feed, it doesn't 

00:43:03.974 --> 00:43:06.356
overwrite because the field 
doesn't exist on the server side

00:43:06.575 --> 00:43:10.245
.  And if you want to get, like 
when you're putting the UI, if 

00:43:10.246 --> 00:43:15.309
you want to check if the user 
liked this, it's simple, you 

00:43:15.310 --> 00:43:19.215
check if there's a local value, 
show it.  Otherwise, use the 

00:43:19.216 --> 00:43:24.339
value from the server.  Very 
simple, super-easy to implement 

00:43:24.340 --> 00:43:31.217
and it gives you most of the 
benefits.  So another example, 

00:43:31.218 --> 00:43:35.452
let's say you're fetching posts,
 posts have been deleted on the 

00:43:35.453 --> 00:43:39.371
server.  Tell your server guys, 
let them send you the list of 

00:43:39.372 --> 00:43:42.611
delete ed poassmentsz it's so 
easy for them to do.  This way 

00:43:42.612 --> 00:43:45.895
you can locally cache everything
, show everything locally, and 

00:43:45.896 --> 00:43:50.398
if something has been delete ed 
on the serve,        server, 

00:43:50.399 --> 00:43:56.642
you'll eventually get updated 
about it.  This is easy for them

00:43:56.732 --> 00:43:59.488
 to do.  If you get another 
example, you can be sending the 

00:43:59.489 --> 00:44:05.615
server, hey, I have the post, 
you make a call to get new posts

00:44:07.628 --> 00:44:13.128
.  Now the server cannot send 
you which items from the trench 

00:44:13.129 --> 00:44:18.992
have been deleted -- now the 
server can send you which items 

00:44:18.993 --> 00:44:20.993
from the trench have been 
deleted.  I know there's a clash

00:44:21.616 --> 00:44:24.667
, you want other people topped 
the work.  I have a perfect rest

00:44:24.892 --> 00:44:27.917
 API, so you make 25 requests 
just to fetch a feed.  Don't let

00:44:28.141 --> 00:44:31.396
 them do that.  Like fight for T
 it's important                 

00:44:32.265 --> 00:44:35.207
 it   it.  It's important they 
provide you the right APIs for 

00:44:35.208 --> 00:44:37.694
your application.  Another case 
here, I was trying to update the

00:44:37.919 --> 00:44:41.472
 profile page, I have two 
different

00:44:44.927 --> 00:44:49.597
, one changes favorite color, 
one changes name.  How do you 

00:44:49.598 --> 00:44:52.193
solve the conflicts?  Add a 
version        version.  Now 

00:44:52.194 --> 00:44:54.704
your data is versioned, so when 
you make a request, client says 

00:44:54.705 --> 00:44:58.599
okay, change the favorite color 
to this one on top of version 10

00:44:58.719 --> 00:45:02.724
 and then the server can say 
okay, since this version, I can 

00:45:02.725 --> 00:45:06.109
apply this diff and do it or 
decide whether you want to, 

00:45:06.110 --> 00:45:08.827
maybe you don't want them to do 
that.  The thing is it will 

00:45:08.828 --> 00:45:15.062
happen very, very rarely and you
 will be handling that case.  So

00:45:15.063 --> 00:45:18.017
 these won't overwrite each 
other.  If you start versioning 

00:45:18.018 --> 00:45:21.275
your objects, your value objects
, you get this nice thing where 

00:45:21.276 --> 00:45:24.307
like hey, you made it fetch, you
 made the request to fetch posts

00:45:24.415 --> 00:45:28.122
, some of them were updated, 
server already knows you told 

00:45:28.123 --> 00:45:31.484
the server I have these items 
with these versions.  The stuff 

00:45:31.485 --> 00:45:34.303
that has been changed, they can 
tell hey, hey, these are the 

00:45:34.304 --> 00:45:37.907
posts that have been updated and
 here is their new data.  You 

00:45:37.908 --> 00:45:41.354
want a request, you get all of 
the diff.  I'm not telling you 

00:45:41.355 --> 00:45:45.555
to do things this way, this is 
just a way of doing things, it 

00:45:45.556 --> 00:45:51.886
is very simple and it is 
effective.  Okay.  So if you 

00:45:51.887 --> 00:45:56.679
want to read more about this 
topic, you can go learn about 

00:45:56.680 --> 00:46:01.589
multiple version control, like 
maybe some really really 

00:46:01.590 --> 00:46:04.390
important learn about operation,
 transform, if this is really 

00:46:04.391 --> 00:46:06.886
important for you to do, like 
multiple clients, changing the 

00:46:06.887 --> 00:46:12.860
same data.  These problems, you 
just need to go ahead and check 

00:46:12.861 --> 00:46:16.877
them.  I'll go through some 
quick tips and tricks       

00:46:16.878 --> 00:46:20.263
tricks, little bite size 
information.  As I said before, 

00:46:20.264 --> 00:46:24.985
when we talk about network, 
design your API for your client.

00:46:25.455 --> 00:46:30.380
  Like I have a perfect risk API
.  No, it doesn't matter.  The 

00:46:30.381 --> 00:46:33.826
perfect API is the one that my 
user experience fit the best.  

00:46:33.827 --> 00:46:38.400
Like this is what you want.  So 
do it.  Tell them to do it for 

00:46:38.401 --> 00:46:42.925
you.  But your API should be for
 your application.  Whatever you

00:46:43.141 --> 00:46:47.796
 can do on the server, do it on 
the server.  Like if they can 

00:46:47.797 --> 00:46:50.475
pass metadata, anything that 
will help you, do it there, 

00:46:50.476 --> 00:46:53.854
because it's much easier to 
scale than the tiny device you 

00:46:53.855 --> 00:46:58.566
have in your pocket.  And one 
more thing you do is batch your 

00:46:58.567 --> 00:47:02.458
requests.  Now, again and again 
we say battery life is very 

00:47:02.459 --> 00:47:05.008
important, data is very 
important.  If you batch your 

00:47:05.009 --> 00:47:08.709
requests, the battery life will 
improve a lot.  Job schedule er 

00:47:08.710 --> 00:47:12.946
does it for you.  So just use 
job schedule error GCN network 

00:47:12.947 --> 00:47:17.976
manager.  We will love you.  
These are good things.  For 

00:47:17.977 --> 00:47:21.254
example, this is an example, 
like a bad API.  This is a 

00:47:21.255 --> 00:47:25.050
terrible API.  It gives me a 
user, a name and filter UR   

00:47:25.051 --> 00:47:29.977
URL.  I have no idea what that 
filter URL represents.  You put 

00:47:29.978 --> 00:47:36.755
in a grid, the filter, it starts
 moving, because you doan know 

00:47:36.756 --> 00:47:39.918
how big the image is.  You put 
something random there, the 

00:47:39.919 --> 00:47:44.160
image turned out to be a really 
weird one.  It's terrible for 

00:47:44.161 --> 00:47:48.707
the user.  It's very easy to fix
.  Tell your sender to send  

00:47:48.933 --> 00:47:53.534
              send      server 
to send you are the height and 

00:47:53.535 --> 00:47:56.345
width.  They want to have the 
final size.  If your server 

00:47:56.346 --> 00:48:03.325
sends it to you, you have the 
final size.  You can even send, 

00:48:03.326 --> 00:48:06.479
there's ways to calculate on the
 server side instead of the 

00:48:06.480 --> 00:48:11.946
device.  They send you the pal 
let picture                 cr p

00:48:12.368 --> 00:48:17.280
alette of the picture, it has a 
same background color.  This 

00:48:17.281 --> 00:48:23.175
user experience is very 
important.  So to sum up 

00:48:23.176 --> 00:48:26.554
everything, the main goal here 
is you architecture your 

00:48:26.555 --> 00:48:28.914
application for the user 
experience, they can be in the 

00:48:28.915 --> 00:48:31.879
United States, Indonesia, China,
 it doesn't matter.  The 

00:48:31.880 --> 00:48:34.249
important sthing the user 
experience                 

00:48:34.805 --> 00:48:38.307
           thing is the user 
experience is your important.  

00:48:38.308 --> 00:48:46.556
Local model, don't keep things 
in hatch maps.  Put it on disc. 

00:48:46.781 --> 00:48:49.613
 When you write your application
, don't think, okay, now I get 

00:48:49.614 --> 00:48:52.432
this data from the server and I 
update this UI and the user 

00:48:52.433 --> 00:48:55.154
clicks on this, I make this 
other request.  Don't do that.  

00:48:55.155 --> 00:48:58.308
Think about I have the data on 
the disc, that's what I show to 

00:48:58.309 --> 00:49:02.424
the user, my user reacts, I have
 some logic to update the data 

00:49:02.425 --> 00:49:06.034
on the disc and I show it all 
the time.  Some other 

00:49:06.035 --> 00:49:08.877
application logic that tries to 
synchronize the data with the 

00:49:08.878 --> 00:49:16.167
server.  It makes it a lot 
easier.  Decouple.  You should 

00:49:16.168 --> 00:49:18.937
decouple these things.  The part
 that's related to the UI and 

00:49:18.938 --> 00:49:21.180
the disc, they know each other, 
you have an application logic 

00:49:21.181 --> 00:49:23.658
that talks to the network.  When
 you de   decouple things, it 

00:49:23.659 --> 00:49:30.862
makes it a lot easier to test, 
but don't over     overdo it.  

00:49:30.863 --> 00:49:33.358
Architecture stuff, hey, I 
created interface and interface 

00:49:33.359 --> 00:49:36.772
for the factories and the 
interface of the factory 

00:49:36.773 --> 00:49:39.807
factories.  Don't do that.  This
 is still a form.  If you look 

00:49:39.808 --> 00:49:44.494
at the framework code, we still 
write it as we write C.  You 

00:49:44.495 --> 00:49:49.296
don't have to write it like that
.  Use it if it makes your 

00:49:49.297 --> 00:49:52.554
application better.  But like 
don't overarchitect.  It's still

00:49:52.666 --> 00:49:55.610
 a mobile form, we are trying to
 run many, many applications on 

00:49:55.611 --> 00:50:01.041
the same device.  And even if 
the device has four or eight 

00:50:01.042 --> 00:50:03.662
course, most of the time only 
one or two of those codes are 

00:50:03.663 --> 00:50:09.056
really capable of doing anything
, plus we try to keep them low 

00:50:09.057 --> 00:50:14.528
and not         or not run them 
at all to save battery.  Act 

00:50:14.529 --> 00:50:18.526
early.  This is important.  In a
 previous job I worked, if you 

00:50:18.527 --> 00:50:20.819
have this kind of technical 
depth, it's really, really hard 

00:50:20.820 --> 00:50:26.656
to pay.  So the sooner you start
, the better it is.  Something 

00:50:26.657 --> 00:50:31.128
to remember, know your enemies. 
 Network is unreliable.  You 

00:50:31.129 --> 00:50:34.296
don't want to be doing a network
 request.  Every time you should

00:50:34.297 --> 00:50:39.063
 make a network request, you 
should feel uncomfortable.  And 

00:50:39.064 --> 00:50:42.449
know your friends.  Disc is your
 friend.  It's very reliable.  

00:50:42.450 --> 00:50:45.394
If the disc is broken, the phone
 is already broken, so you don't

00:50:45.516 --> 00:50:52.811
 need to worry about it.  So is 
your friend, it's actually your 

00:50:52.812 --> 00:50:54.812
best friend.  Thank you.
          (applause)

00:51:00.526 --> 00:51:01.858
.
          I have like two and a 

00:51:01.859 --> 00:51:04.883
half minutes for questions.  
Maybe I can take one or two 

00:51:04.884 --> 00:51:07.702
questions, and then I will be 
outside there if there are more.

00:51:18.757 --> 00:51:22.104
          &gt;&gt; My question is, in 
the like application where you 

00:51:22.105 --> 00:51:26.019
had the heart, what's the need 
to have the yellow heart to show

00:51:26.351 --> 00:51:29.162
 that you    you -- couldn't you
 just show the red one right 

00:51:29.163 --> 00:51:33.530
away and then do your stuff in 
the background?  Yig yipg the 

00:51:33.531 --> 00:51:35.717
problem                      
          &gt;&gt; YIGIT BOYAR:  The 

00:51:35.718 --> 00:51:38.846
problem with showing the red one
 is if you can't send t user 

00:51:38.847 --> 00:51:42.262
does not know.  Maybe for a 
dating application, you can show

00:51:42.473 --> 00:51:47.049
 the red one, but it's better to
 have two states, like the 

00:51:47.050 --> 00:51:49.869
example, you first send a 
message, it's gray     gray, 

00:51:49.870 --> 00:51:53.231
they send it to server, and it's
 check mark when they send it to

00:51:53.450 --> 00:51:56.618
 the other user, so it's good to
 let them know.  They learn 

00:51:56.619 --> 00:52:00.570
about these things.
          &gt;&gt; Thank you.

00:52:04.000 --> 00:52:09.554
          &gt;&gt; Sync it up eumpsed 
to be a                 used to 

00:52:09.555 --> 00:52:13.926
be a great tool to do offline 
apps.  Is it still one and is 

00:52:13.927 --> 00:52:16.402
the job scale er maybe a better 
one in.

00:52:18.052 --> 00:52:19.700
          &gt;&gt; YIGIT BOYAR:  
Actually I think starting, I'm 

00:52:19.701 --> 00:52:25.006
not sure which one, sync it up 
actually uses job schedule er 

00:52:25.007 --> 00:52:28.401
behind the scenes.  I personally
 find job schedule er much 

00:52:28.402 --> 00:52:31.542
better API, a lot more 
convenient to use, but you can 

00:52:31.543 --> 00:52:36.443
use sync it up.  That's fine.
          &gt;&gt; Like the same 

00:52:36.444 --> 00:52:42.904
question, so sync it up, we are 
in the emerging market.  It 

00:52:42.905 --> 00:52:47.674
probably sinks                
probably syncs it up with the 

00:52:47.675 --> 00:52:50.139
content provider.  The 
background creates a lot of 

00:52:50.140 --> 00:52:52.140
problem for us because of

01:17:41.029 --> 01:17:46.218
 our virtual cat, and we want to
 place it on the on the man and 

01:17:46.219 --> 01:17:51.129
the                    ottoman 
and the cat should stay fixed in

01:17:51.380 --> 01:17:53.657
 the environment as we move 
around it and ideally it would 

01:17:53.658 --> 01:17:56.121
even interact with the 
environment a little bit.  Maybe

01:17:56.122 --> 01:17:59.799
 the cat jumps down from the 
ottoman to the floor or jumps up

01:18:00.001 --> 01:18:02.974
 on the table, just a little bit
 of playfulness.  So easy enough

01:18:04.968 --> 01:18:08.252
.  All right.  We've got a 
couple of things going on here 

01:18:08.253 --> 01:18:12.179
that we need to cover first.  
We've got the camera feed.  So 

01:18:12.180 --> 01:18:18.867
the camera is the 2D projection 
of the 3D world onto an image 

01:18:18.868 --> 01:18:23.668
plane as seen through the lens, 
and it comes in at 30 frames a 

01:18:23.669 --> 01:18:27.370
second on Tango devices.  So as 
I move my camera around the 

01:18:27.371 --> 01:18:31.845
world      world, I might get a 
different view of the sofa, of 

01:18:31.846 --> 01:18:34.896
the fireplace          
fireplace, of the TV and the 

01:18:34.897 --> 01:18:40.360
table, and that 3D view is 
compressed onto this 2D image 

01:18:40.361 --> 01:18:44.406
plane, and it's in color.  In 
the real world when you're 

01:18:44.407 --> 01:18:47.484
walking around, you don't have 
to worry about much beyond this,

01:18:47.592 --> 01:18:51.172
 right?  Physics takes care of 
it.  Physics is awesome.  And 

01:18:51.173 --> 01:18:54.585
the light comes in, and you just
 get different perspectives 

01:18:54.586 --> 01:18:58.603
based on how you walk around.  
But now we're talking about 

01:18:58.604 --> 01:19:03.425
compositing a virtual character 
into this physical scene, and it

01:19:03.664 --> 01:19:06.584
 gets a little bit more 
complicated.  The cat doesn't 

01:19:06.585 --> 01:19:10.744
actually exist in the real world
.  So to understand how we 

01:19:10.745 --> 01:19:14.373
render this cat as if it's in 
the real world, let's forget 

01:19:14.374 --> 01:19:18.605
about the real world entirely 
for just a moment and explore 

01:19:18.606 --> 01:19:22.977
this problem.  So say instead of
 in the real world we've got a 

01:19:22.978 --> 01:19:25.925
virtual cat and we want to 
render it on the screen of our 

01:19:25.926 --> 01:19:29.505
device, we want to place it 
approximately 2 meters in front 

01:19:29.506 --> 01:19:34.988
of the device and hold it fixed 
and just move around it.  For 

01:19:34.989 --> 01:19:38.148
those who are familiar with 
building 3D games, this is very,

01:19:38.484 --> 01:19:42.736
 very similar to how a camera 
system in a standard rendering 

01:19:42.737 --> 01:19:46.121
engine works.  We're going to 
place our object in a coordinate

01:19:46.770 --> 01:19:50.381
 frame called the world frame of
 the game, and then we're going 

01:19:50.382 --> 01:19:54.637
on render it relative   
                    to render it

01:19:54.968 --> 01:19:58.243
 relative to the frame of our 
camera as we move around it.  At

01:19:58.244 --> 01:20:01.302
 the start we'll view the cat 
from the left and at the end of 

01:20:01.303 --> 01:20:03.811
our motion round of the cat we 
want to see it from the right, 

01:20:03.812 --> 01:20:09.805
and it always stays fixed.  So 
with Tango, this is exactly what

01:20:10.040 --> 01:20:16.045
 we'll do, just instead of 
programmatically setting the 

01:20:16.046 --> 01:20:20.869
transform of the camera as it 
moves in the world, we'll get it

01:20:21.291 --> 01:20:25.068
 from
the Tango device itself.  Tango 

01:20:25.069 --> 01:20:27.998
has a couple of coordinate 
frames I'll talk about that are 

01:20:27.999 --> 01:20:30.936
relevant for this.  So the world
 frame for Tango is remitted as 

01:20:30.937 --> 01:20:34.433
start of service, and it's 
wherever you started with the 

01:20:34.434 --> 01:20:37.735
device.  The device frame

01:20:41.622 --> 01:20:43.912
 is wherever you currently are 
with the device.  If I start 

01:20:43.913 --> 01:20:47.173
here, that defines start of 
service.  If I ask for the 

01:20:47.351 --> 01:20:50.207
transform between start of 
service and device, when device 

01:20:50.208 --> 01:20:56.964
is here, it will give me sort of
 two meters.  So now to show 

01:20:56.965 --> 01:21:01.195
this a little bit, I'm going to 
give a demo of what this looks 

01:21:01.196 --> 01:21:04.595
like in action.

01:21:13.815 --> 01:21:17.119
  So here I've got a completely 
virtual world, and I've got this

01:21:17.331 --> 01:21:21.625
 cat, we'll call him Mittens, I 
guess.  And as I move

01:21:24.755 --> 01:21:27.798
 around Mittens, he stays fixed 
in the virtual world      world.

01:21:27.799 --> 01:21:30.957
  But he's not tied to my 
physical space in any way.  I 

01:21:30.958 --> 01:21:36.299
can make him walk, but it's just
 on a plane that exists in space

01:21:36.521 --> 01:21:40.184
, and he can also, I guess, paw 
in the camera when I get close 

01:21:40.185 --> 01:21:42.185
to him.
          (applause)

01:21:44.870 --> 01:21:45.870
.
          It gets better, I 

01:21:45.871 --> 01:21:47.092
promise.
          (laughter).

01:21:47.093 --> 01:21:50.049
          All right.  We'll go 
back.

01:21:56.216 --> 01:21:59.260
  So to make this a little more 
concrete, I want to just show 

01:21:59.261 --> 01:22:03.907
the calls that you need to make 
in our APIs to be able to do 

01:22:03.908 --> 01:22:08.908
this.  So Tango provides a 
function called get pose at time

01:22:08.993 --> 01:22:13.341
, and you can pass it, the base 
coordinate frame that you would 

01:22:13.342 --> 01:22:17.045
like as well as the target 
coordinate frame that you would 

01:22:17.046 --> 01:22:20.004
like and it will return you the 
transform at that point in time.

01:22:20.291 --> 01:22:24.817
  So here you can see I'm 
defining a frame pair where I 

01:22:24.818 --> 01:22:28.717
want to ask where is the device 
relative to the start of service

01:22:28.941 --> 01:22:34.156
.  So my base frame is start of 
service, and my target frame is 

01:22:34.157 --> 01:22:39.185
device, and I say get me the 
transform at time T, where maybe

01:22:39.413 --> 01:22:44.839
 time is now.  And the time 
stamp actually turns out to be 

01:22:44.840 --> 01:22:47.317
really important when you're 
trying to do things like 

01:22:47.318 --> 01:22:52.451
composites onto an image because
 the camera takes an image at a 

01:22:52.452 --> 01:22:56.355
very particular point in time, 
so that's something that will 

01:22:56.356 --> 01:23:00.414
be         we'll be coming back 
to to make sure that the cat is 

01:23:00.415 --> 01:23:02.475
well registered with the 
environment when we go to 

01:23:02.476 --> 01:23:05.306
composit it.  But overall this 
is pretty simple, right?  You 

01:23:05.307 --> 01:23:08.453
can just at any time ask for 
where the device is in the world

01:23:08.559 --> 01:23:15.081
, and boom, you know, you've got
 a handheld AR cat viewer.  So 

01:23:15.082 --> 01:23:17.887
it's not exact what will we're 
looking for                   

01:23:19.009 --> 01:23:21.473
          what we're looking for
.  The goal is to place the 

01:23:21.474 --> 01:23:24.822
virtual cat on the ottoman in 
the physical world.  The first 

01:23:24.823 --> 01:23:27.648
thing you might think of doing 
is just taking the RGB image ask

01:23:27.865 --> 01:23:31.567
 we're just going to slap the 
cat onto the RGB image and it 

01:23:31.568 --> 01:23:35.404
will be fine, we'll just use 
that as the background, but it's

01:23:35.746 --> 01:23:39.335
 not going on look quite right. 
 This slide demonstrates it, but

01:23:39.564 --> 01:23:44.264
 I'll go to a demo again just to
 make it a little more clear.

01:23:51.517 --> 01:23:57.278
  Now we've got Mittens, but 
he's not looking super-awesome 

01:23:57.606 --> 01:23:59.458
             super-awesome.  
He's just floating in space in 

01:23:59.459 --> 01:24:08.888
front of me.  And here I really 
would rather he be on the ground

01:24:09.399 --> 01:24:13.509
, so that's what we're going to 
work to do.  But if you would 

01:24:13.510 --> 01:24:17.746
build an application like, say, 
a sun with planets orbiting 

01:24:17.747 --> 01:24:20.021
around it, this could be an 
appropriate visualization, but 

01:24:20.022 --> 01:24:27.418
for Mittens it's all wrong.  So 
we'll go back to our slides and 

01:24:27.419 --> 01:24:32.635
we'll see that it is really, 
really wrong.  All right.  

01:24:32.636 --> 01:24:36.776
Really, I hadn't looked at that 
image in a while, so I like it. 

01:24:36.992 --> 01:24:40.017
 All right.  So what can we do 
to fix this?  There are a couple

01:24:40.439 --> 01:24:42.827
 of things that we can try.  
Before we go down this road, 

01:24:42.828 --> 01:24:46.766
though, it's worth mentioning 
again that perfect augmented 

01:24:46.767 --> 01:24:49.783
reality is largely an uninvolved
 problem, so we're going to talk

01:24:50.018 --> 01:24:51.963
 about some things to make the 
cat look better       better, 

01:24:51.964 --> 01:24:54.905
but it's not going to be perfect
.  I've learned to manage 

01:24:54.906 --> 01:24:58.257
expectations, so you'll see me 
do this throughout the talk, but

01:24:58.468 --> 01:25:02.166
 we're going to get better, and 
we'll talk about the limitations

01:25:02.378 --> 01:25:10.319
 in detail at the end.  So with 
that public service announcement

01:25:10.638 --> 01:25:16.253
 out of the way, how far down 
the road can we go with Tango?  

01:25:16.254 --> 01:25:18.888
Step 1 is that we can tie the 
cat into the environment using 

01:25:18.889 --> 01:25:22.790
Tango's depth-sensing APIs.  So 
I mentioned before that the 

01:25:22.791 --> 01:25:26.165
device doesn't just understand 
its position in space, it also 

01:25:26.166 --> 01:25:29.433
understands the geometry of the 
environment.  So maybe we can 

01:25:29.434 --> 01:25:35.506
use the Tango device to actually
 decide where to place the cat 

01:25:35.507 --> 01:25:38.208
to recognize surfaces in the 
environment and then we can tie 

01:25:38.209 --> 01:25:44.096
it to the floor at the correct 
size and scale.  And Tango 

01:25:44.097 --> 01:25:47.128
provides exactly these 
capabilities through our support

01:25:47.782 --> 01:25:50.718
 library ies to developers.  You
 can essentially ask for a given

01:25:51.030 --> 01:25:56.829
 pixel in an image, give me the 
point and normal in the world 

01:25:56.830 --> 01:26:06.521
frame of that pixel, and then we
 can place the cat there.  And 

01:26:06.522 --> 01:26:13.099
to show this, you can see that 
this is the code needed to 

01:26:13.100 --> 01:26:19.620
compute that point and normal in
 space.  So the first thing we 

01:26:19.621 --> 01:26:25.484
do is we need to get the 
relative pose of the depth to 

01:26:25.485 --> 01:26:29.728
the RGB image.  This is a little
 bit subtle.  So as you're 

01:26:29.729 --> 01:26:33.854
walking around, we're taking RGB
 images all the time, but we're 

01:26:33.855 --> 01:26:36.449
also firing the depth camera, 
but they're not actually taken 

01:26:36.450 --> 01:26:39.290
at the exact same time.  There's
 a little bit of an offset there

01:26:39.495 --> 01:26:44.592
.  So if I naively took the 
point Cloud at the time stamp of

01:26:44.821 --> 01:26:49.719
 the RGB camera and just select
ed a point, it would be off a 

01:26:49.720 --> 01:26:52.553
little bit.  It wouldn't look 
correct.  What I need to do is 

01:26:52.554 --> 01:26:56.491
actually transform the depth 
information into the frame of 

01:26:56.492 --> 01:27:01.232
the RGB camera.  Here what you 
can see is we're calling a 

01:27:01.233 --> 01:27:03.644
support function that says 
calculate the relative pose 

01:27:03.645 --> 01:27:07.962
between the color camera and the
 depth camera at the last time I

01:27:08.282 --> 01:27:13.645
 had a color image and the last 
time I had a point Cloud, and 

01:27:13.646 --> 01:27:16.887
then from there we call fit 
plane model near click and we 

01:27:16.888 --> 01:27:20.909
pass in the point Cloud, we pass
 in the color image, and we pass

01:27:21.315 --> 01:27:24.920
 in the relative transform 
between the two, which helps us 

01:27:24.921 --> 01:27:30.063
do that alignment, and then we 
get back a point and a plane 

01:27:30.064 --> 01:27:34.910
model for that pixel in the 
image.

01:27:40.612 --> 01:27:42.612
  After this call we've got a 
point and a normal that

01:27:44.516 --> 01:27:45.660
 we can use to place the cat on 
the correct surface in the 

01:27:45.661 --> 01:27:49.814
environment and we can put it in
 the real world.  So I'm going 

01:27:49.815 --> 01:27:55.042
on    to show a demo of that 
now.

01:28:03.932 --> 01:28:07.161
  So here you'll see that  
Mittens is actually looking 

01:28:07.162 --> 01:28:13.032
pretty good.  He can move around
 the world, and every time I tap

01:28:13.351 --> 01:28:19.933
, I'm getting that detection, 
and you can see that I can make 

01:28:20.256 --> 01:28:22.556
Mittens sort of interact with 
the surface        surfaces and 

01:28:22.557 --> 01:28:24.557
the geometry of the environment.
          (applause)

01:28:30.617 --> 01:28:31.504
.
          S we'll still get 

01:28:31.505 --> 01:28:36.181
cooler                        
We'll still get cooler.  I like 

01:28:36.182 --> 01:28:39.120
the enthusiasm, though.  It's 
sort of building over time.  I 

01:28:39.121 --> 01:28:42.350
can have Mittens jump on this as
 well, and he can jump down.  

01:28:42.351 --> 01:28:46.714
And if we like, we can also 
change  Mittens to Rufus.  All 

01:28:46.715 --> 01:28:49.923
right.  Let's go back to the 
slides.

01:28:53.551 --> 01:28:56.068
  So we're getting better, but 
you'll notice that I didn't have

01:28:56.380 --> 01:29:02.348
 the cat go behind anything, and
 the reason I didn't do that is 

01:29:02.349 --> 01:29:07.371
because we don't have support in
 that demo for occlusion.  What 

01:29:07.372 --> 01:29:11.296
that means is if I had placed 
Mittens behind the podium and 

01:29:11.297 --> 01:29:15.417
looked at it from kind of the 
incorrect angle, I would have 

01:29:15.418 --> 01:29:19.649
seen through the podium and 
Mittens wouldn't have rendered 

01:29:19.650 --> 01:29:26.179
realistically.  So what can we 
do along the way to maybe do 

01:29:26.180 --> 01:29:29.650
more about understanding our 
scene and our geometry and our 

01:29:29.651 --> 01:29:33.121
environment to make Mittens look
 even better and even more 

01:29:33.122 --> 01:29:39.365
realistic?  Well, Tango can 
create rough 3D reconstructions 

01:29:39.366 --> 01:29:42.298
of the world environment, and it
 provides developers with these 

01:29:42.299 --> 01:29:45.915
meshes in realtime, which is 
really kind of crazy when you 

01:29:45.916 --> 01:29:53.551
think about it.  And perhaps we 
can use these meshes to help a 

01:29:53.552 --> 01:29:56.924
little bit with our occlusion 
problem.  So now instead of 

01:29:56.925 --> 01:30:00.371
using a single point to 
determine how to render the cat 

01:30:00.372 --> 01:30:03.209
and to have Mittens jump from 
the table to the chair to the 

01:30:03.210 --> 01:30:07.659
floor, we can use like the full 
3D structure of the environment 

01:30:07.660 --> 01:30:12.589
and aggregate many points over 
time.  So under the hood what 

01:30:12.590 --> 01:30:15.638
Tango is meshing, it's actually 
taking many, many different 

01:30:15.639 --> 01:30:18.681
viewpoints, doing sort of that 
same transform I talked about to

01:30:18.787 --> 01:30:25.248
 get the point Cloud into the 
world frame and binning them 

01:30:25.249 --> 01:30:27.745
over time and creating a 
representation of this surface 

01:30:27.746 --> 01:30:30.873
that gets better actually the 
more that you look at a surface 

01:30:30.874 --> 01:30:35.243
because you get more points of 
data and a better accurate of 

01:30:35.244 --> 01:30:37.268
the surface.

01:30:42.593 --> 01:30:45.759
  This process is pretty complex
 but it is again abstracted for 

01:30:45.760 --> 01:30:49.016
us by the SDK, and we've got a 
meshing library that you can use

01:30:49.771 --> 01:30:55.014
 in C plus plus or we've hacked 
it up              hooked it 

01:30:55.015 --> 01:30:58.483
directly up to Unity that gives 
you the mesh inside the game 

01:30:58.484 --> 01:31:01.438
engine in realtime and makes it 
really easy to use it in our 

01:31:01.439 --> 01:31:04.478
depth buffer as we render.  So 
to see this, we'll check out 

01:31:04.479 --> 01:31:06.479
another demo

01:31:14.992 --> 01:31:18.330
.  All right.  So we'll put 
Mittens over here for now    

01:31:18.331 --> 01:31:23.458
now.  So you can see that as I 
move around the podium, I'm 

01:31:23.459 --> 01:31:30.532
starting to build up a rough 
mesh of it.  That's probably 

01:31:30.533 --> 01:31:35.084
good enough for now.  We'll put 
Mittens sort of in the 

01:31:35.085 --> 01:31:43.561
background.  And as I move, you 
can see he becomes occluded.  We

01:31:43.562 --> 01:31:49.661
 think that this is a really 
powerful thing for building AR 

01:31:49.662 --> 01:31:52.464
applications.  We can sort of 
bring him out.

01:31:52.543 --> 01:31:54.543
          (applause)

01:31:58.926 --> 01:31:59.787
.
          One thing that you'll 

01:31:59.788 --> 01:32:02.263
notice is that the mesh isn't 
perfect, so we'll play some 

01:32:02.264 --> 01:32:07.579
tricks, like we actually alpha
blend on the edge of Mittens as 

01:32:07.580 --> 01:32:12.579
he goes behind and here we've 
even show you his silhouette 

01:32:12.580 --> 01:32:15.061
when he's behind the podium to 
give you a sense that he's still

01:32:15.290 --> 01:32:17.685
 there.  I'm going to show 
another version right now that 

01:32:17.686 --> 01:32:22.189
does a similar thing but it's 
not going to show the silhouette

01:32:24.148 --> 01:32:28.061
s, so Mittens will be fully 
occlude and had you'll get to 

01:32:28.062 --> 01:32:30.944
see how that looks as well.

01:32:37.655 --> 01:32:41.669
  So probably good enough.  Now 
we'll put Mittens behind again 

01:32:41.670 --> 01:32:48.373
and you can see as I go, you 
know, he kind of pops out over 

01:32:48.374 --> 01:32:50.374
time

01:32:51.476 --> 01:32:54.410
 and there's Alpha blending on 
the edges we're use to go sort 

01:32:54.411 --> 01:32:59.797
of make him fade in and out.  So
 it's not perfect, but it does 

01:32:59.798 --> 01:33:04.991
give the illusion of a more real
 experience.  All right.  Let's 

01:33:04.992 --> 01:33:07.663
go back to the slides.

01:33:15.969 --> 01:33:19.139
  At this point we've created a 
pretty compelling augmented 

01:33:19.140 --> 01:33:23.153
reality application, I would say
.  We've taken Mittens, we've 

01:33:23.154 --> 01:33:27.278
placed him in the world, he can 
walk on surfaces, he can jump on

01:33:27.386 --> 01:33:30.848
 chairs, and now he can actually
 be occluded by objects in the 

01:33:30.849 --> 01:33:32.849
scene.  So you've

01:33:34.650 --> 01:33:35.215
 got a lot of the components of 
making a compelling augment 

01:33:35.216 --> 01:33:37.808
       augmented reality 
experience right there in front 

01:33:37.809 --> 01:33:43.577
of you.  But it can be a lot 
better and one thing I'll say, 

01:33:43.578 --> 01:33:45.967
have you guys noticed anything 
weird about this picture up here

01:33:47.979 --> 01:33:49.979
? 

01:33:56.728 --> 01:34:00.655
 Does something look fake to you
 maybe?  Yeah?  People are -- 

01:34:00.656 --> 01:34:05.432
audience participation?  The 
Lamborghini is fake.  The front 

01:34:05.433 --> 01:34:08.711
one is actually not a real car 
and the reason that this looks 

01:34:08.712 --> 01:34:11.765
so good is that we're doing a 
lot in terms lighting and 

01:34:11.766 --> 01:34:13.766
reflection

01:34:15.785 --> 01:34:19.891
, we've placed it exactly where 
we want and done very detailed 

01:34:19.892 --> 01:34:23.580
composite ing of it.  This is 
the holy grail of AR, and this 

01:34:23.581 --> 01:34:28.998
slide is really just to say that
 this is a journey and we're 

01:34:28.999 --> 01:34:31.961
moving along this path, moving 
towards things awe hope someday 

01:34:31.962 --> 01:34:38.389
can look like this, but this is 
not itionz the expectation to 

01:34:38.390 --> 01:34:42.319
have today -- but this is not I 
guess the expectation to have 

01:34:42.320 --> 01:34:45.340
today for where we are.  As an 
application developer, it's 

01:34:45.341 --> 01:34:47.907
important to remember that

01:34:54.109 --> 01:34:54.827
     that, and in building 
something you want to ask 

01:34:54.828 --> 01:34:57.735
yourself, is it appropriate for 
the technology I have at hand?  

01:34:57.736 --> 01:35:00.035
Everything from the art assets 
that you use to the game play 

01:35:00.036 --> 01:35:07.790
that you design can help to set 
exchtionz for               

01:35:07.791 --> 01:35:10.297
expectations for your users, and
 you can still make really 

01:35:10.298 --> 01:35:12.298
compelling experience

01:35:14.603 --> 01:35:18.558
s that use maybe a subset of the
 technology as well.  So you 

01:35:18.559 --> 01:35:22.792
could put a solar system in 
space, you could have your 

01:35:22.793 --> 01:35:27.044
catwalk on planes but not be 
occluded, or you could have, you

01:35:27.372 --> 01:35:30.512
 know, objects and games that 
take advantage of the scene 

01:35:30.513 --> 01:35:33.978
geometry, but all of them are 
compelling in their own right 

01:35:34.225 --> 01:35:36.514
     right, and with a little 
bit of creativity, you can 

01:35:36.515 --> 01:35:39.226
actually make experiences that 
feel really good to people even 

01:35:39.227 --> 01:35:42.587
if you're not leveraging the 
full capabilities of AR and even

01:35:42.887 --> 01:35:50.960
 if you don't get to the holy 
grail of Lamborghini rendering. 

01:35:51.270 --> 01:35:53.668
 To illustrate this, I guess 
I'll provide two examples of 

01:35:53.669 --> 01:35:58.252
augmented reality applications 
that I really like that don't 

01:35:58.253 --> 01:36:02.728
even use depth.  So the first 
one I've been alluding to for a 

01:36:02.729 --> 01:36:05.967
while.  This was done by some of
 our friends at San Francisco 

01:36:06.411 --> 01:36:10.869
State University and it allows 
you to explore the solar system 

01:36:10.870 --> 01:36:15.080
by placing planets in a line in 
your room, and I'll show a demo 

01:36:15.081 --> 01:36:17.427
of that now.

01:36:31.440 --> 01:36:37.655
  So here I'm going to tap to 
place the sun, and now I'm going

01:36:37.656 --> 01:36:41.150
 to walk and I guess it 
recommends I go further than 

01:36:41.151 --> 01:36:47.351
this, but this is about as far 
as I get.  And I will tap to 

01:36:47.352 --> 01:36:51.981
place Neptune.  So now as I walk
 back towards the sun rgs I can 

01:36:52.091 --> 01:36:58.604
              sun, I can see the
 scale of the planets relative 

01:36:58.605 --> 01:37:00.605
to each other, and it's

01:37:01.819 --> 01:37:02.174
 actually correct, and I can 
zoom in to each one of the 

01:37:02.175 --> 01:37:09.955
planets, and if I want, I can 
start to see how orbits work.  

01:37:09.956 --> 01:37:14.438
And as an educational tool, this
 is spectacular.  And from an 

01:37:14.439 --> 01:37:17.368
augmented reality perspective, 
it's actually remarkably simple.

01:37:17.448 --> 01:37:22.019
  I mean, this is the floating 
cat that we all laughed at 

01:37:22.020 --> 01:37:24.566
before, but for the appropriate 
application, it's actually quite

01:37:25.000 --> 01:37:27.000
 compelling

01:37:32.288 --> 01:37:35.998
.  All right.  We'll go back to 
the slides for a second.  The 

01:37:35.999 --> 01:37:40.133
second application I want to 
talk about is a game from our 

01:37:40.134 --> 01:37:46.859
friends at Trixi Studios, and 
it's called phan     phanaguys. 

01:37:47.289 --> 01:37:49.994
 How many of you actually went 
to our after-hours event and got

01:37:50.334 --> 01:37:57.832
 to play Phantaguys?  Way too 
few of you.  So Phanta       

01:37:57.833 --> 01:38:00.765
Phantaguys is a game and the 
premise is that aliens have 

01:38:00.766 --> 01:38:03.796
invaded your world and you need 
to zap them before they take 

01:38:03.797 --> 01:38:06.834
over the world, and it's not 
good for us at the end.  But 

01:38:06.835 --> 01:38:10.432
anyway, there are a bunch of 
design considerations that went 

01:38:10.433 --> 01:38:13.143
into this game that I really 
like, so the characters are 

01:38:13.144 --> 01:38:18.417
actually semi transparent, they 
feel like they're coming out of 

01:38:18.418 --> 01:38:22.440
the wall, and they're very 
clever about using the position 

01:38:22.441 --> 01:38:26.939
of the device and making 
assumptions about free pace     

01:38:28.236 --> 01:38:31.371
 space to interact with the 
world even though they don't 

01:38:31.372 --> 01:38:38.220
know where surfaces are.  I will
 show a brief demo of this, 

01:38:38.221 --> 01:38:45.842
actually.  I'm going to go to 
bonus content.  We'll do a giant

01:38:46.170 --> 01:38:50.525
 worm thing.  All right.  So you
 can tell they're already 

01:38:50.526 --> 01:38:54.750
setting the mood with the music 
that they have for this, and 

01:38:54.751 --> 01:39:00.965
what happens is as I start, the 
devices records my position in 

01:39:00.966 --> 01:39:06.971
space.  Can we turn down the 
lights?  Awesome.  So we'll get 

01:39:06.972 --> 01:39:10.865
a brief text message that says 
something like the aliens will 

01:39:10.866 --> 01:39:19.447
get you, or clear the area.  So 
as I move, you'll see kind of 

01:39:19.448 --> 01:39:22.335
something strange happens.

01:39:25.779 --> 01:39:29.718
          (Buzzing, beeping)

01:39:33.685 --> 01:39:39.208
.
          (Boom) so here we've 

01:39:39.209 --> 01:39:43.935
ripped a hole in the actual 
floor and we can see -- whoa.

01:39:47.588 --> 01:39:51.133
          (Various game noises)

01:40:02.334 --> 01:40:08.686
 all right.  We're safe.  So if 
we switch back to the slides 

01:40:08.687 --> 01:40:11.196
real quick.

01:40:16.937 --> 01:40:19.055
I think it's pretty cool.  All 
right.  So everything that you 

01:40:19.056 --> 01:40:21.056
saw there

01:40:22.663 --> 01:40:28.619
 used only motion tracking.  
There was no decht,        depth

01:40:29.596 --> 01:40:32.648
, there was no occlusion.  It's 
kind of shocking.  I'm actually 

01:40:32.649 --> 01:40:36.151
impressed with how well they 
pulled it off.  But they're 

01:40:36.152 --> 01:40:39.267
playing tricks.  They're making 
some assumptions and building 

01:40:39.268 --> 01:40:41.639
game play that just works for 
the environment.  So really this

01:40:41.882 --> 01:40:46.546
 is to say that, you know, there
 are ways in game play to make 

01:40:46.547 --> 01:40:51.204
things feel real and immersive 
even with our most basic API, 

01:40:51.205 --> 01:40:56.196
and as you start to move down 
the road, it gets just better.  

01:40:56.197 --> 01:41:00.240
With all that said, I've said a 
lot of managing expectations 

01:41:00.241 --> 01:41:03.381
type stuff, but we're continuing
 to improve, we're always 

01:41:03.382 --> 01:41:11.338
working on new things, and, in 
fact, we're rolling out some 

01:41:11.339 --> 01:41:15.991
drift correction code into our S
D   SDK's over the next couple 

01:41:15.992 --> 01:41:19.168
months.  So Wim talked about 
this before, but another problem

01:41:19.266 --> 01:41:23.150
 that you have with augmented 
reality is that when I place the

01:41:23.406 --> 01:41:28.072
 cats in the world, actual let's
 switch back to the demo just 

01:41:28.073 --> 01:41:31.380
real quick.  I think it's easy 
to show.

01:41:39.389 --> 01:41:43.082
  So you can see that the cat is
 on a surface, it's relatively 

01:41:43.083 --> 01:41:48.184
robust to when I move the device
 around because our tracking is 

01:41:48.185 --> 01:41:54.177
relatively good, but if I'm 
really mean, okay, the cat is 

01:41:54.178 --> 01:41:57.871
gone, right?  It drifted off 
into space.  So we can go back 

01:41:57.872 --> 01:42:04.943
to the slides.  So we've 
actually built software that 

01:42:04.944 --> 01:42:08.851
allows us to correct for that, 
so when the cat goes drifting 

01:42:08.852 --> 01:42:12.787
off into space, we recover very,
 very quickly.  It takes about a

01:42:13.306 --> 01:42:16.243
 second.  But you stop, look at 
the world, and the cat shows up 

01:42:16.244 --> 01:42:19.291
back in the correct place.  This
 is really just one of the 

01:42:19.292 --> 01:42:22.234
improvements that we're working 
to roll out and that we're 

01:42:22.235 --> 01:42:24.864
working to bring to you, our 
developer community.  We're 

01:42:24.865 --> 01:42:27.589
working on things like modeling 
the lighting in the room to give

01:42:27.924 --> 01:42:32.284
 you realistic shadows, things 
like improving our meshing and 

01:42:32.285 --> 01:42:37.090
doing texture ing as well to 
give realistic texture ed meshes

01:42:37.183 --> 01:42:41.237
 inside of Unity that maybe you 
could use in other games and 

01:42:41.238 --> 01:42:44.295
maybe even import them into 
different game worlds.  We're 

01:42:44.296 --> 01:42:48.081
just taking steps along this 
journey to getting to that 

01:42:48.082 --> 01:42:50.586
Lamborghini, to getting to 
really, really good and 

01:42:50.587 --> 01:42:54.159
immersive and solid augmented 
reality, but we don't have to 

01:42:54.160 --> 01:42:58.202
wait.  We can already do a lot 
right now and build compelling 

01:42:58.203 --> 01:43:03.889
experiences today      today.  I
 also want to talk a little bit 

01:43:03.890 --> 01:43:06.712
about the trade-offs that you 
make as you start to use more 

01:43:06.713 --> 01:43:11.841
and more of this technology.  So
 heat is your enemy on a mobile 

01:43:11.842 --> 01:43:14.873
device.  If any of you have used
 a mobile phone before, you know

01:43:14.874 --> 01:43:19.427
 it gets hot.  It's hot in your 
pocket.  You're using Google 

01:43:19.428 --> 01:43:25.618
Maps and it's just like burning 
up, and it is a very real 

01:43:25.619 --> 01:43:31.506
trade-off.  So we've worked hard
 to optimize our algorithms, to 

01:43:31.507 --> 01:43:34.891
optimize our computer vision 
software and to make it run as 

01:43:34.892 --> 01:43:39.783
quickly and efficiently as 
possible, but more capabilities 

01:43:39.784 --> 01:43:46.850
you use, the more CPU and 
compute you use as well.  So if 

01:43:46.851 --> 01:43:49.580
you can make an experience work 
with motion tracking, then you 

01:43:49.581 --> 01:43:52.543
have a lot more that you can 
throw at your game.  But if you 

01:43:52.544 --> 01:43:56.759
go all the way to full meshing, 
maybe you should be using some 

01:43:56.760 --> 01:44:00.478
low poly models.  It's just 
important to be aware of the 

01:44:00.479 --> 01:44:03.072
trade-offs that you make when 
you think about the applications

01:44:03.409 --> 01:44:06.725
 that you could build.

01:44:09.822 --> 01:44:14.753
  If I could sum up my talk with
 one cheesy statement, I would 

01:44:14.754 --> 01:44:19.497
do it with creativity is king.  
When you're developing for a 

01:44:19.498 --> 01:44:22.906
newspaper platform, you know, 
there are limitations -- when 

01:44:22.907 --> 01:44:25.742
you're developing for a new 
platform, there are limitations 

01:44:25.743 --> 01:44:29.225
and we're super-fortunate to 
partner with people who can be 

01:44:29.226 --> 01:44:31.392
creative and who have worked 
around the different 

01:44:31.393 --> 01:44:33.239
capabilities and technologies of
 the device as well as their 

01:44:33.240 --> 01:44:36.195
limitations, and we're really 
looking forward to seeing what 

01:44:36.196 --> 01:44:41.076
kind of creative applications 
can be enable ed, but      

01:44:41.314 --> 01:44:43.463
        enabled by what is super
-powerful technology over the 

01:44:43.464 --> 01:44:48.513
coming months.  There's a bunch 
that you should check out at our

01:44:48.734 --> 01:44:51.357
 sandbox to get a picture of 
what developers are up to.  If 

01:44:51.358 --> 01:44:55.143
you haven't done that, I really 
encourage it, and there are a 

01:44:55.144 --> 01:44:58.714
couple of things awe've done 
that are really exciting at the 

01:44:58.715 --> 01:45:03.486
platform, too, looking forward. 
 So first, we believe that 

01:45:03.487 --> 01:45:05.994
Project Tango technology should 
become ubiquitous, all devices 

01:45:05.995 --> 01:45:09.388
should have the ability to 
understand where they are in 

01:45:09.389 --> 01:45:11.670
space and to understand the 
geometry of their environments, 

01:45:11.671 --> 01:45:15.371
and one thing that we've done is
 we've worked closely with our 

01:45:15.372 --> 01:45:20.592
friends at the Android team to 
start moving some of Tango's API

01:45:20.921 --> 01:45:24.498
's into core Android.  So in 
Android N you can actually ask 

01:45:24.499 --> 01:45:28.094
for the 6 degree of freedom pose
 of the device through Android 

01:45:28.095 --> 01:45:32.426
APIs and Android N also supports
 depth sensors.  Over time we 

01:45:32.427 --> 01:45:40.261
hope to expose more of Tango's 
capabilities in this way and 

01:45:40.262 --> 01:45:42.327
we're at the beginning of a 
very, very exciting journey on 

01:45:42.328 --> 01:45:44.773
the consumer front.  So we have 
announced a

01:45:48.545 --> 01:45:51.521
 partnership with Lenovo where 
we'll be shipping Project Tango 

01:45:51.522 --> 01:45:54.559
Smartphones later this summer.  
This is huge.  This says a big 

01:45:54.560 --> 01:45:57.698
deal.  This has been a three-
year journey for us to take this

01:45:58.029 --> 01:46:02.170
 technology from the prototype 
stage all the way to something 

01:46:02.171 --> 01:46:04.769
that you can actually hold in 
your hands, and a lot of the 

01:46:04.770 --> 01:46:07.147
applications we're showing here 
start to show the power of these

01:46:07.493 --> 01:46:13.464
 devices for consumers.  So now 
is really the time to get on 

01:46:13.465 --> 01:46:16.822
board, like the train is sort of
 like leaving the proverbial 

01:46:16.823 --> 01:46:19.764
station, and I'm really excited 
to see what we can build 

01:46:19.765 --> 01:46:21.800
together         together.  It's
 a great time to get your foot 

01:46:21.801 --> 01:46:25.839
in the door if you haven't been 
thinking about augmented reality

01:46:26.391 --> 01:46:29.547
 applications, I encourage you 
to do so, expit also a unique 

01:46:29.548 --> 01:46:32.161
opportunity to partner with 
Google.  So we're always looking

01:46:32.482 --> 01:46:37.577
 for interesting ideas.  We like
 to feature or partners with 

01:46:37.578 --> 01:46:40.413
things like talks, and on 
occasion we even put out like RF

01:46:40.645 --> 01:46:45.305
P's for unique augmented reality
 content.  This all happens 

01:46:45.306 --> 01:46:48.240
because it's a new and budding 
eke system, it's              

01:46:48.693 --> 01:46:51.198
            budding ecosystem, 
it's an exciting time to take 

01:46:51.199 --> 01:46:56.722
the first step in this journey 
together.  With that, I'm ending

01:46:56.846 --> 01:47:00.237
 my talk.  Hopefully this gave 
you an idea of the kind of 

01:47:00.238 --> 01:47:03.875
applications that are possible 
with Project Tango as well as 

01:47:03.876 --> 01:47:08.590
some of the considerations that 
you need to be aware of when 

01:47:08.591 --> 01:47:11.420
you're building augmented 
reality content.  I think it's a

01:47:11.607 --> 01:47:17.925
 really exciting time.  I'm 
really happy to be here.  I feel

01:47:17.926 --> 01:47:19.683
 fortunate to be on the team.  
Thank you guys so much for your 

01:47:19.684 --> 01:47:26.280
time this morning, and I hope 
you enjoy the rest of I/O.  

01:47:26.281 --> 01:47:28.116
Thank you very much.
          (applause).

01:47:31.947 --> 01:47:33.947
10:38 a.m.)

01:51:41.525 --> 01:51:42.035
          &gt;&gt;  
          &gt;&gt;  

01:51:42.036 --> 01:51:43.587
          &gt;&gt;  
          &gt;&gt;  

01:51:43.588 --> 01:51:45.588
          &gt;&gt;  
          &gt;&gt;  

01:51:50.622 --> 01:51:55.290
          &gt;&gt;  
          May 20, 2016.

01:51:55.530 --> 01:52:03.129
          Live coding:  Make a 
virtual reality game.

01:56:28.903 --> 01:56:30.903
.

02:03:56.891 --> 02:03:59.059
.. 

02:08:44.330 --> 02:08:47.769
          &gt;&gt; SHANEE NISHRY:  Hi,
 everyone, my name is Shanee 

02:08:47.770 --> 02:08:51.250
Nishry, I am a software engineer
.  I hope you're all as excited 

02:08:51.251 --> 02:08:54.411
as I am about the Daydream 
announcement two days ago and I 

02:08:54.412 --> 02:08:58.737
hope many of you developers out 
here and online are eager to 

02:08:58.738 --> 02:09:04.428
join us and develop for Daydream
.  So I figured a lot of you 

02:09:04.429 --> 02:09:10.074
developers might come from a 
more traditional graphics 

02:09:10.075 --> 02:09:12.798
development and I thought it 
would be really fun to teach how

02:09:13.236 --> 02:09:19.003
 to develop for Daydream by 
making a game.  So this is what 

02:09:19.004 --> 02:09:23.177
we are going to do today.  We 
are going to learn some very 

02:09:23.178 --> 02:09:30.535
basic Unity3D skills.  We'll add
 the Google VR SDK, some gay 

02:09:30.536 --> 02:09:34.109
play and have fun and play.  
Now, if you have Unity on your 

02:09:34.110 --> 02:09:38.972
laptop, feel free to join me and
 develop with me.  You can get 

02:09:38.973 --> 02:09:47.240
the SDK on the link above and 
the games asset on the link 

02:09:47.241 --> 02:09:48.977
underneath.  If you are online 
and you don't have Unity, get it

02:09:48.978 --> 02:09:52.774
 off Unity3D.com.  I'm just 
going on leave this slide   

02:09:53.007 --> 02:09:57.516
                  to leave this 
slide for a moment.

02:10:01.267 --> 02:10:04.779
  I'm going to keep going.  So 
this is what we are going to do 

02:10:04.780 --> 02:10:08.885
today.  Let's meet our gaism the
 we are going                  

02:10:09.655 --> 02:10:12.693
      game.  We are going to 
make a very simple defend the 

02:10:12.694 --> 02:10:17.037
castle game.  This is also 
online right now on Git hub in 

02:10:17.038 --> 02:10:19.861
our samples folder.  There are 
going to be three bridges 

02:10:19.862 --> 02:10:23.435
connecting the island from one 
side to the other.  We'll have 

02:10:23.436 --> 02:10:29.072
Androids made of Cardboard 
follow a path, on bridges, and 

02:10:29.073 --> 02:10:34.508
onto a castle, trying toin Vader
 T we'll be adding rendering 

02:10:34.509 --> 02:10:41.362
later.  We'll be adding binaural
 audio.  Now, audio is really 

02:10:41.363 --> 02:10:48.340
important for completely 
immersive experience.  3D 

02:10:48.341 --> 02:10:51.799
auditory cues will tell you when
 a canon is being shot over your

02:10:52.046 --> 02:10:56.267
 head and where to look.  
Finally, we'll add some 

02:10:56.268 --> 02:10:58.268
interaction using the input

02:11:00.317 --> 02:11:05.654
 and this will work both for the
 old Cardboard and for the 

02:11:05.655 --> 02:11:10.109
controller on day dreevment oh, 
and this.  How many of you have 

02:11:10.110 --> 02:11:14.466
made games?  Put up your hands 
if you're a game developer.  Did

02:11:14.467 --> 02:11:22.200
 you ever run into are your CPU 
went too hard and you need to do

02:11:22.201 --> 02:11:24.201
 take a break until you can keep
 working

02:11:26.536 --> 02:11:29.582
, or maybe you're like me and 
you just put your phone into the

02:11:29.810 --> 02:11:32.947
 fridge for it to cool down?  
We'll look into some 

02:11:32.948 --> 02:11:41.223
optimisation tips so you can get
 a 6PS.  These will be assets in

02:11:41.224 --> 02:11:46.996
 the game, as eghts we've made 
before.  We have the cann     

02:11:46.997 --> 02:11:51.479
cannon and the castle and some I
 took from the Cardboard design 

02:11:51.480 --> 02:11:54.836
lab, which is also online.  This
 is how we are going to make 

02:11:54.837 --> 02:11:58.176
this     this.  To make the game
, I have usmsed Unity and     

02:11:58.511 --> 02:12:02.450
             used Unity and 
blender but you can use any tool

02:12:02.646 --> 02:12:05.482
 on the market and whatever you 
like, even if you have your own 

02:12:05.483 --> 02:12:13.962
engine, there is a C plus plus 
which will be in more detail a a

02:12:14.414 --> 02:12:19.584
 talk later.  A quick overview 
into Unity if you've never used 

02:12:19.585 --> 02:12:22.767
it before I'll go over it 
briefly.  This is how a Unity 

02:12:22.768 --> 02:12:27.864
game editor looks like.  At the 
center we just have our scene, 

02:12:27.865 --> 02:12:33.253
we can move it and look around 
using a virtual camera.  We can 

02:12:33.254 --> 02:12:40.043
also use drag and drop engines 
around.  On the left is the 

02:12:40.044 --> 02:12:43.985
objects that we have inside the 
scene.  The on the right is the 

02:12:43.986 --> 02:12:46.803
inspector.  You can look at any 
object and see what it is made 

02:12:46.804 --> 02:12:50.502
of   of.  Every object is made 
of several components.  For 

02:12:50.503 --> 02:12:52.998
example, here on the top is the 
transform component

02:12:56.052 --> 02:12:59.047
 saying what's our position and 
scale.  At the bottom is the 

02:12:59.048 --> 02:13:03.337
project assets.  That's all of 
the scripts, models and textures

02:13:03.546 --> 02:13:07.686
 inside our project.  Now, a 
very quick word about Blender.  

02:13:07.687 --> 02:13:11.906
As a game developer for many 
years, I've found that having 

02:13:11.907 --> 02:13:17.084
some 3D editing skill really 
empowers you because it means 

02:13:17.085 --> 02:13:19.711
you can make your own models and
 experiment and make your own 

02:13:19.712 --> 02:13:24.289
game if you want.  However, this
 is how Blender looks like.  

02:13:24.290 --> 02:13:28.001
Now, Blender is an Open Source 
project which is free for 

02:13:28.002 --> 02:13:31.251
everyone to use, which is why I 
picked it, and this is how it 

02:13:31.252 --> 02:13:34.313
looks, and it can be a bit 
intimidate ing.  I've learnld 

02:13:34.314 --> 02:13:38.002
how to use it through this site,
 but I'm pretty sure there are 

02:13:38.003 --> 02:13:44.523
many other websites out there.  
Okay.  Let's get to work very 

02:13:44.524 --> 02:13:47.770
quick and will see how far we 
can go                        

02:13:47.869 --> 02:13:52.251
              quick and will see
 how far we can go.  I'll just 

02:13:52.252 --> 02:13:56.920
open Unity, and if you have it, 
if you've downloaded the project

02:13:57.029 --> 02:14:02.442
, feel free to do so.  So just 
to show you the basics, really. 

02:14:02.688 --> 02:14:05.833
 This is how a new project looks
 like.  I have the scene, I can 

02:14:05.834 --> 02:14:11.261
press alt and look around or 
with the mouse wheel button and 

02:14:11.262 --> 02:14:18.149
I can go to the game object menu
 at the top and maybe add a 

02:14:18.150 --> 02:14:23.904
plane to use as my ground, now 
it's inside the scene.  I have 

02:14:23.905 --> 02:14:27.152
beginning camera, the main 
camera which I can move around. 

02:14:27.386 --> 02:14:31.730
 On the bottom right you can see
 that the camera preview and 

02:14:31.731 --> 02:14:35.751
what it will see.  Now, if I add
 just a cube, I'm starting very 

02:14:35.752 --> 02:14:39.774
basic and we'll go on in a bit 
   bit.  So now I have a cube in

02:14:40.001 --> 02:14:43.372
 the scene and I can press plail
 here at the top and basically 

02:14:43.373 --> 02:14:46.747
-- and I can press play here at 
the top and basically what we 

02:14:46.748 --> 02:14:49.444
see is what we get.  However, 
there are some problems here, 

02:14:49.445 --> 02:14:54.245
the biggest of we don't have 
stereoscopic rendering.  Luckily

02:14:54.246 --> 02:14:57.823
 it is really simple to get it 
with our SDK.  Now, I have 

02:14:57.824 --> 02:14:59.824
downloaded

02:15:01.224 --> 02:15:06.415
 the package for importing the 
Google VR SD      VR SDK before,

02:15:06.745 --> 02:15:11.400
 and this is simply a Unity 
package.  I can double click on 

02:15:11.401 --> 02:15:16.025
it and it will load all the 
relevant as etsz         assets 

02:15:16.026 --> 02:15:23.021
into our project.  Now, next I'm
 just going to delete the main 

02:15:23.022 --> 02:15:25.949
camera because we no longer need
 it.  We want to have 

02:15:25.950 --> 02:15:30.810
stereoscopic view.  So I'm 
delete ing that.  And as you may

02:15:31.355 --> 02:15:34.616
 see here down at the project 
assets we have the Google VR 

02:15:34.617 --> 02:15:39.113
folder now.  So going to it, and
 I'll employ to prefabs, and 

02:15:39.114 --> 02:15:43.668
then I will drag the Google VR 
main into the scene and place it

02:15:43.983 --> 02:15:48.986
 just here at the back.  Now, 
basically a collection of game 

02:15:48.987 --> 02:15:52.816
objects already set up with 
components is a prefab.  In this

02:15:53.251 --> 02:15:56.273
 case this is what we need to do
 stereoscopic rendering.  I can 

02:15:56.274 --> 02:16:01.737
press play and now we have all 
we need for VR.  If I press alt,

02:16:01.738 --> 02:16:06.305
 I can simulate head movement, 
use my mouse and look around.  

02:16:06.306 --> 02:16:10.184
The stereoscopic camera 
basically works if I open up it 

02:16:10.185 --> 02:16:15.550
on the left in the arrow key, it
 has a head and a stereo, head 

02:16:15.551 --> 02:16:18.495
also has a camera which is a 
template camera for two 

02:16:18.496 --> 02:16:21.868
different cameras.  One camera 
for HI simulate ing the distance

02:16:22.037 --> 02:16:25.686
 between our two eyes -- for 
each eye, simulate ing the 

02:16:25.687 --> 02:16:28.297
distance between our two eyes.  
This is how we do the illusion 

02:16:28.298 --> 02:16:32.072
of depth and depth sensation so 
we know how far someone on the 

02:16:32.073 --> 02:16:37.925
Cloud is from me or I am from 
you.  Okay.  Now let's open up a

02:16:38.303 --> 02:16:40.902
 project I have prepared 
beforehand so we can get started

02:16:41.229 --> 02:16:44.065
 because if I start make ing the
 entire scene from scratch, it's

02:16:44.175 --> 02:16:50.907
 going on take quite        
       to take quite a while.  

02:16:50.908 --> 02:16:55.016
So this is the very basic scene.
  I can move inside by zooming 

02:16:55.017 --> 02:16:59.751
in using the scroll wheel or the
 touch pad and I can look around

02:16:59.965 --> 02:17:05.502
.  Let's see what we are going 
to do.  So we have our castle 

02:17:05.503 --> 02:17:08.685
made of cardboard and on the 
other side of the island we have

02:17:08.686 --> 02:17:12.483
 the little Android statue 
signifying where the in   

02:17:12.484 --> 02:17:16.089
invaiding Androids will come 
from.  Here on top of the castle

02:17:16.210 --> 02:17:20.880
 we also have our cannon that 
we'll be using to fire at the 

02:17:20.881 --> 02:17:25.433
Androids.  And again, all the 
assets here including the scenes

02:17:25.886 --> 02:17:30.312
 are already ready for you to 
download off GitHub.  If I press

02:17:30.434 --> 02:17:33.684
 play, I've already prepared the
 camera on top of one of the 

02:17:33.685 --> 02:17:37.594
towers, so I can look around and
 see where the Androids come 

02:17:37.595 --> 02:17:40.904
from.  However, nothing is 
happening at the moment, so 

02:17:40.905 --> 02:17:44.836
we'll need to add some game play
.  Let's see how we are going to

02:17:45.381 --> 02:17:50.494
 add Androids to span from 
somewhere in the island.  So I'm

02:17:50.712 --> 02:17:54.417
 just going to disable a few 
scenes on the left.  I'm going 

02:17:54.629 --> 02:17:58.412
to collect a new game object.  
Let's say just an empty one.  

02:17:58.413 --> 02:18:03.429
And I'm going on call it spawn L
 because this is what I'm going 

02:18:03.430 --> 02:18:08.206
on spawn my Androids from.  So 
I'm going on create a new 

02:18:08.207 --> 02:18:15.982
component and I'll just call it 
spawn L because it's simple.  

02:18:15.983 --> 02:18:21.982
Then I can double click on the 
inspector to open and tap and 

02:18:21.983 --> 02:18:31.548
develop or whatever scape you 
want to use.  I'm going to add a

02:18:31.877 --> 02:18:40.190
 short timer, I'll start it at 
maybe one second to begin with

02:18:43.198 --> 02:18:50.397
 and let's add another one for 
respond time.  We'll set it up 

02:18:50.398 --> 02:18:59.671
to 5 seconds.  Now on the app 
date what we should be doing

02:19:00.937 --> 02:19:04.072
 is decrease our timer so we can
 get new Androids into our scene

02:19:05.278 --> 02:19:09.928
.  So we'll use time delta time

02:19:13.400 --> 02:19:15.400
 and then if our timer

02:19:18.820 --> 02:19:20.958
 is 

02:19:25.425 --> 02:19:28.695
-- oh, before I can span 
Androids, I need to have some 

02:19:29.004 --> 02:19:35.099
locations I can spawn them from.
  So let's add a list of 

02:19:35.100 --> 02:19:43.528
transformations, correspond 
points, and just initialize it

02:19:45.530 --> 02:19:47.530
 here

02:19:51.952 --> 02:19:58.583
.  So now if I look into the 
scene, you see that the final 

02:19:58.584 --> 02:20:01.714
step is it going to update in 
just a moment.  There we go.  

02:20:01.715 --> 02:20:06.091
Now we have the time and her 
respond timer, and we'll be able

02:20:06.301 --> 02:20:08.301
 to

02:20:10.256 --> 02:20:12.520
 add some points to let the skip
 know where to place Androids at

02:20:12.852 --> 02:20:16.221
.  We also need to create a path
 into the island, so for that 

02:20:16.222 --> 02:20:22.189
what we can do just to make it 
simple again      again, I will 

02:20:22.190 --> 02:20:25.040
create a new game object that 
will be a sphere and I can place

02:20:25.565 --> 02:20:30.040
 it somewhere inside the scene, 
and this signifies a point in 

02:20:30.041 --> 02:20:37.305
space at the moment.  Sphere 
collide er so objects do not 

02:20:37.306 --> 02:20:40.483
collide with it later on.  Then 
I will add way points which I've

02:20:41.249 --> 02:20:46.986
 prepared beforehand, a list of 
what the next point is going to 

02:20:46.987 --> 02:20:50.570
be.  And then I can duplicate 
this, just comment C, comment V,

02:20:50.792 --> 02:20:57.221
 and I can go into the first 
scweer and drag and drop the 

02:20:57.222 --> 02:21:02.235
sphere from the air     arrow 
key into the next.  So I can 

02:21:02.236 --> 02:21:05.166
have them linked to each other. 
 Then I have to keep doing it 

02:21:05.167 --> 02:21:09.741
until they cross over the bridge
 and go to the castle, but this 

02:21:09.742 --> 02:21:18.142
is just a way to start.  So now 
that we have some objects and 

02:21:18.143 --> 02:21:23.040
we'll go and add the initial 
point into the spawn points, and

02:21:26.047 --> 02:21:28.943
 now if the timer is less than 
zero, then we'll just Seth the 

02:21:28.944 --> 02:21:32.945
timer back                     
set the timer back to the 

02:21:32.946 --> 02:21:37.189
respond timer, and we'll go to 
an Android pool, which I will go

02:21:37.411 --> 02:21:42.641
 into more detail later, and 
I'll create the position that is

02:21:42.858 --> 02:21:48.559
 my position, I'm going to do a 
transform, create, transform

02:22:06.446 --> 02:22:13.996
, and I'll use this size of the 
elements inside my list.

02:22:23.957 --> 02:22:28.930
  There we go.  Have I missed a 
bracket somewhere?

02:22:32.060 --> 02:22:36.071
  Good.  Okay.  Now that we have
 the two set up and we'll press 

02:22:36.072 --> 02:22:41.190
play again.  If we go over to 
the scene view, we'll see every 

02:22:41.191 --> 02:22:43.910
few seconds, every five seconds 
specifically, we'll have an 

02:22:43.911 --> 02:22:47.486
Android coming up.  Now, I'm not
 going on create the entire path

02:22:48.151 --> 02:22:51.612
 here because I think that 
everything should be done later.

02:22:51.917 --> 02:22:56.831
  It's not very interesting.  So
 I do have an my's path        

02:22:57.380 --> 02:23:00.954
      enemy patz, and if I go to
 layer up here at the right and 

02:23:00.955 --> 02:23:03.905
mark invisible to enable it, we 
can see it in here,

02:23:03.906 --> 02:23:09.873
and I'll just collapse it, I'll 
collapse this one, I'll go to 

02:23:09.874 --> 02:23:14.969
the spanner and drag and drop 
any way points here from the 

02:23:14.970 --> 02:23:23.672
left and onto the list.  Now 
that I press play again, we'll 

02:23:23.673 --> 02:23:29.004
have Android spawning from virus
 spawn points here on the scene 

02:23:29.005 --> 02:23:33.323
and will go over to the castle.

02:23:37.620 --> 02:23:40.671
  So the different path.  So we 
have basic Androids coming to 

02:23:40.672 --> 02:23:44.139
the scene.  We can look at them 
from the game.  I can also 

02:23:44.140 --> 02:23:50.246
maximize, say you might be able 
to    to see it, but we don't 

02:23:50.247 --> 02:23:53.502
have any way to interact with 
them.  We need some kind of a 

02:23:53.503 --> 02:23:56.789
way to shoot them off our island
 so they don't get to the castle

02:23:57.646 --> 02:24:01.765
.  So let's look into our ground
.  Let's look at how we are 

02:24:01.766 --> 02:24:06.866
going to shoot with the cannon 
onto the ground somehow.  So 

02:24:06.867 --> 02:24:09.783
select egg the terrain         
               selecting the 

02:24:09.784 --> 02:24:12.816
train, I'll go to add component 
and I'll add a target behavior

02:24:20.449 --> 02:24:25.563
 and we'll make a quick strip so
 we can shoot onto the cannons. 

02:24:25.932 --> 02:24:28.639
 I don't need the star to update
 here, so I will make a new 

02:24:28.640 --> 02:24:36.053
function on   , one click, then 
I will use the base event data 

02:24:36.054 --> 02:24:38.168
from Unity

02:24:42.166 --> 02:24:49.416
 and then I will appoint an 
event data

02:24:58.012 --> 02:25:07.086
 maybe I will actually name this
.  But before that, I need to 

02:25:07.087 --> 02:25:11.530
make sure I actual have a Kansas
 on inside                  cann

02:25:11.667 --> 02:25:15.003
on inside the scene.  I did add 
one beforehand, so just make 

02:25:15.004 --> 02:25:18.533
sure it actually exists.

02:25:27.444 --> 02:25:34.199
  And now we'll make the can on 
shoot -- we'll make the cannon 

02:25:34.200 --> 02:25:36.200
shoot from the can

02:25:38.288 --> 02:25:40.422
non side of the scene onto the 
intersection point.

02:25:46.205 --> 02:25:48.996
  What am I missing here?

02:25:53.852 --> 02:25:55.852
  One of those brackets.

02:26:00.390 --> 02:26:07.538
  Oh, sorry about that.  I'm 
using the wrong script.  All I'm

02:26:07.539 --> 02:26:14.318
 going to do is use the 
transformation from the cast sp 

02:26:14.542 --> 02:26:18.447
I'll get to more detail         
                   and I'll get 

02:26:18.677 --> 02:26:21.606
to more detail on that in a 
moment.  Let's see what position

02:26:21.820 --> 02:26:25.536
.  That sounds about right.  
Okay.  But even now, if I press 

02:26:25.537 --> 02:26:29.556
onto the terrain, nothing will 
happen.  We need to add a few 

02:26:29.889 --> 02:26:33.245
more interactions here.  The 
first thing we need to do is add

02:26:33.246 --> 02:26:40.450
 a way to receive events from 
Unity and from our Google VR SDK

02:26:41.098 --> 02:26:44.771
 so we know when an object has 
actually been clicked anyway.  

02:26:44.772 --> 02:26:50.668
So I'm going to add an event 
system from Unity.  The event 

02:26:50.858 --> 02:26:57.311
system, all it does is relay the
 events between objects, so it 

02:26:57.505 --> 02:27:00.375
comes with a stand alone input 
module which I'm going to remove

02:27:00.695 --> 02:27:05.042
 wawz      because we're not 
going to use it and I'll add a g

02:27:05.238 --> 02:27:08.512
aze input module, which will 
basically take the orientation 

02:27:08.727 --> 02:27:13.734
of our camera and transform it 
into the events.  At the moment 

02:27:14.052 --> 02:27:17.637
there is not such element for 
the controller, but this will be

02:27:17.638 --> 02:27:26.112
 coming soon.  So the next thing
 I need to do is go to my camera

02:27:26.113 --> 02:27:30.466
 and say Google VR main, go to 
the main camera template, and 

02:27:31.807 --> 02:27:36.360
we'll add physics castle.  Now 
on its own, the event system 

02:27:37.026 --> 02:27:40.582
will allow you to interact with 
UI canvas elements, but if you 

02:27:40.583 --> 02:27:44.421
want to interact with objects 
inside the scene, you need to 

02:27:44.610 --> 02:27:48.972
add a physics ray caster to 
interact with T I'll set the 

02:27:48.973 --> 02:27:51.446
event mask which basically says 
which layers in the scene are 

02:27:51.447 --> 02:27:55.832
interactable, I'll set it up and
 then I will set it again to the

02:27:55.833 --> 02:27:58.876
 grade.  The grade is the name 
it shows for the terrain.  You 

02:27:58.877 --> 02:28:03.078
can see it here on layer, it is 
selected as grade, and that 

02:28:03.079 --> 02:28:07.990
means that when the gaze input 
module is looking into the 

02:28:07.991 --> 02:28:11.777
camera, finding its views, it's 
going on find exactly which 

02:28:11.970 --> 02:28:14.707
object it is looking on but only
 from the layers that you have 

02:28:14.708 --> 02:28:18.827
enable ed.  So the next thing we
 need to do, okay, now we have 

02:28:18.828 --> 02:28:22.723
everything kind of working and 
interactable but we never 

02:28:22.842 --> 02:28:26.093
actually call our script from 
anywhere.  Going tbook our 

02:28:26.094 --> 02:28:30.957
terrain, I just click on it here
 in the editor, what we need to 

02:28:30.958 --> 02:28:34.553
do, and this is our water, so 
click again Otter ain,      

02:28:36.304 --> 02:28:39.673
      on the terrain, is click 
an event trigger.  The event 

02:28:40.432 --> 02:28:43.482
trigger basically says that this
 object is listening for the 

02:28:44.018 --> 02:28:51.736
following events, and I will add
 a pointer click event and then 

02:28:51.957 --> 02:28:54.774
I will select the aim object, I 
can just drag and drop it from 

02:28:54.987 --> 02:28:59.456
here, from the scene on the left
 into the missing component, and

02:28:59.567 --> 02:29:05.540
 then it shows me all the 
components that are on this 

02:29:05.541 --> 02:29:10.021
object and I can select the one 
I want.  So I've made a target 

02:29:10.337 --> 02:29:14.292
behavior.  So I will just select
 on click, and when I press play

02:29:14.488 --> 02:29:20.911
 the next time and I look around
, I will be able to activate the

02:29:20.912 --> 02:29:24.173
 cannon and we'll be able to 
fire onto the Android.  However,

02:29:24.405 --> 02:29:30.716
 it's actually really difficult 
and I will just put it first 

02:29:31.019 --> 02:29:33.948
game actually, it is actually r
eally difficult to aim this way.

02:29:34.269 --> 02:29:37.094
  I have no idea what I'm 
pointing at.  I'm just doing 

02:29:37.095 --> 02:29:42.992
this in tandem almost.  So what 
I'm going to do is add a 

02:29:42.993 --> 02:29:46.839
vertical.  So search here in the
 project assets and I will find 

02:29:47.693 --> 02:29:51.701
the Google VR vertical.  What 
I'm going to do is drag it down 

02:29:51.702 --> 02:29:55.593
onto the head and I'll make sure
 that its position is reset here

02:29:55.594 --> 02:29:59.308
 in the inspector, it already is
, so that's good, and the next 

02:29:59.309 --> 02:30:03.130
time I start my scene      
scene, you see there is a little

02:30:03.131 --> 02:30:06.605
 point in the middle of the 
screen which is telling me where

02:30:06.606 --> 02:30:10.504
 I'm looking at.  Now, if it 
looks at an object that is 

02:30:10.505 --> 02:30:14.944
marked as interactable, it will 
grow to signify that the object 

02:30:15.296 --> 02:30:23.762
can be interacted in some way 
and I can shoot there.  However,

02:30:24.214 --> 02:30:28.653
 once again, we have game play, 
we have some minimal 

02:30:28.971 --> 02:30:33.554
interaction, but the game field 
is empty.  I mention        

02:30:33.555 --> 02:30:35.555
mentioned before in the 
presentation that to make a 

02:30:36.403 --> 02:30:39.201
really good virtual reality 
experience, you want to have 

02:30:39.403 --> 02:30:44.187
sound, so let's look into how we
 are going to add some sound in.

02:30:46.146 --> 02:30:50.399
  So I want to have an epic 
sound for the cannon whenever I 

02:30:50.400 --> 02:30:55.657
shoot at the Androids, so I'm 
going to look into my cannonball

02:30:55.658 --> 02:31:01.545
 object.  The cannonball object 
is found every time where I 

02:31:01.873 --> 02:31:05.886
select to shoot somewhere into 
the scene.  The first thing it 

02:31:05.887 --> 02:31:13.147
will do is I will add in audio 
source.  If you have listened to

02:31:13.148 --> 02:31:16.206
 the binaural audio presentation
 earlier, you might be familiar 

02:31:16.310 --> 02:31:22.479
with it, but this is our Google 
VR implementation of 3D binaural

02:31:22.480 --> 02:31:24.480
 audio, and you

02:31:26.216 --> 02:31:27.632
 can use it just like this.  Now
 it's on the object.  I'm going 

02:31:27.633 --> 02:31:34.900
to select a specific sound.  The
 cannonball fire sound.  I've 

02:31:34.901 --> 02:31:41.550
also prepared the cannonball 
behavior which is what controls 

02:31:41.551 --> 02:31:44.387
the flight of the cannon and 
then the explosion at the end, 

02:31:44.388 --> 02:31:49.274
and it has another element here 
for the impact audio.  So just 

02:31:49.721 --> 02:31:53.529
going here and I will select the
 canon impact here on the left, 

02:31:53.832 --> 02:31:59.255
and if you look quickly on the 
cannonball behavior, will see on

02:31:59.597 --> 02:32:03.730
 impact here at the bottom      
 bottom, and what it does is 

02:32:04.283 --> 02:32:07.932
select the variable which I have
 just filled in and it will play

02:32:07.933 --> 02:32:11.536
 it once our cannonball is just 
about to hit the ground

02:32:15.973 --> 02:32:20.147
.  If you're following on the 
YouTube video later, you can 

02:32:20.148 --> 02:32:26.604
easily find it all.  Now here 
are additional settings for the 

02:32:26.605 --> 02:32:30.108
sounds.  In this case I want it 
to be an epic explosion, so I'm 

02:32:30.109 --> 02:32:34.348
just going to put the game in 
and hope it will all work well 

02:32:34.349 --> 02:32:41.035
on these speakers here, but you 
also have settings for direct 

02:32:41.036 --> 02:32:44.380
activity, which is how the sound
 is going to distribute and 

02:32:44.381 --> 02:32:52.221
spread out in space.  If I set 
this here, it will show how the 

02:32:52.222 --> 02:32:59.672
sun will spread.  If I use 
larger on the font, it will 

02:32:59.673 --> 02:33:03.123
spread more towards the back.  
If I use the sharpness, it will 

02:33:03.124 --> 02:33:07.465
make it more sharp, as you would
 expect, so give it more for 

02:33:07.466 --> 02:33:13.127
direction.  For the cannonball I
 will use sound that spreads in 

02:33:13.128 --> 02:33:17.067
everywhere at the same time.  
You can also enable occlusion 

02:33:17.068 --> 02:33:20.878
for the sound to bounce off 
elements into the scene, from 

02:33:20.879 --> 02:33:24.775
the scene, but I'm going on skip
 that at the moment.  Now, I 

02:33:24.776 --> 02:33:28.239
kind of want to press play and 
just see how the sound is 

02:33:28.240 --> 02:33:31.636
working, but it will not work.  
There's one more step we need to

02:33:31.843 --> 02:33:36.632
 do.  If I go edit here on the 
top and to project settings and 

02:33:36.633 --> 02:33:41.629
go to audio, we need to set the 
specialized plug in here on the 

02:33:41.630 --> 02:33:47.816
right from none to Google VR 
specialized.  And once again, 

02:33:47.817 --> 02:33:51.076
all these instructions will be 
in the GitHub read me file.  

02:33:51.077 --> 02:33:59.803
Now, the next time I press play,
 when I fire at Androids, and I 

02:33:59.804 --> 02:34:07.026
will maximize this again, here 
is one, it's coming, there we go

02:34:08.505 --> 02:34:12.867
, we'll have some 3D audio.  
Now, if you're with speakers on 

02:34:12.868 --> 02:34:16.951
a device or even on the computer
, you will find out that when 

02:34:16.952 --> 02:34:19.836
you look in different directions
, the stereo sound will come as 

02:34:19.837 --> 02:34:26.948
you would expect it to come from
.  I also want to add some 

02:34:26.949 --> 02:34:34.156
sounds to the Androids, but I'm 
going to here have a lot to 

02:34:34.157 --> 02:34:36.854
cover, so I have all this 
prepared beforehand, I'll look 

02:34:36.855 --> 02:34:39.665
for Android and search it in the
 project and find the Android 

02:34:39.666 --> 02:34:45.208
prefab and I'm going to add 
another Google VR audio source 

02:34:45.209 --> 02:34:49.143
component.  Now, I'm not going 
to set any sound in here.  I'm 

02:34:49.144 --> 02:34:54.604
going to disable the player, 
this is because I've already set

02:34:54.948 --> 02:34:57.439
 some sounds here in different 
lists and if we go into the 

02:34:57.440 --> 02:35:02.870
script itself, you will notice 
there are multiple lis of audio 

02:35:03.100 --> 02:35:06.643
clips -- multiple lists of audio
 clips, and when we enable the 

02:35:06.644 --> 02:35:09.703
Android, it will play the charge
 sound, and when it's going to 

02:35:09.704 --> 02:35:13.059
be exploded away by the cannon, 
it will play an impact sound, 

02:35:13.060 --> 02:35:16.631
just as an example.  Now, when I
 press play, every time an 

02:35:16.632 --> 02:35:20.787
Android responds, it will have 
some kind of a charge, and when 

02:35:20.788 --> 02:35:27.445
I shoot towards it and hit it, 
it will have an oh-oh sound and 

02:35:27.446 --> 02:35:30.170
fly away.  You'll probably hear 
it better on a device.  You can 

02:35:30.171 --> 02:35:38.117
get the APK from the GitHub, 
it's online right now.  So this 

02:35:38.118 --> 02:35:44.519
is the Google VR interaction, 
the stereoscopic rendering and 

02:35:44.520 --> 02:35:51.923
the audio.  A few quick more 
words about the interaction.  

02:35:51.924 --> 02:35:55.121
When you're pointing at an 
element, let's do it as an 

02:35:55.122 --> 02:36:02.079
example, I'm going to maximize 
it, it's quite smart actually.  

02:36:02.080 --> 02:36:05.022
In VR you really need to be able
 to converge exactly where 

02:36:05.023 --> 02:36:09.290
you're looking at and it tends 
to take the depth of the element

02:36:09.367 --> 02:36:14.268
 that you are pointing at.  So 
if we are pointing at the 

02:36:14.269 --> 02:36:16.269
terrain here, it's

02:36:18.751 --> 02:36:22.217
 not only spreading out to show 
that the terrain is 

02:36:18.751 --> 02:36:23.553
interactable, but it's actually 
casting its position onto the 

02:36:23.554 --> 02:36:29.934
depth of the terrain itself.  
However, in this case, I've not 

02:36:29.935 --> 02:36:33.073
set trees to be occlude ers 
inside the event as well as the 

02:36:33.074 --> 02:36:37.413
tower, which means that the 
theoretical is probably render

02:36:37.737 --> 02:36:40.495
       rendering in front of 
them but still being visible, 

02:36:40.496 --> 02:36:44.088
which can make some issues with 
convergence, especially if I 

02:36:44.089 --> 02:36:50.543
look down here onto the terrain 
but also onto the tower.  So 

02:36:50.544 --> 02:36:55.967
what you want to do in these 
cases is go to your main camera 

02:36:55.968 --> 02:37:00.436
and add some more elements into 
the event down here.  For 

02:37:00.437 --> 02:37:03.149
example f we add the default, 
you'll notice that whenever we 

02:37:03.150 --> 02:37:05.877
are looking onto a tower or a 
tree, it will no longer

02:37:10.072 --> 02:37:14.923
 glow and it will be cast 
properly.  Now, I have just 

02:37:14.924 --> 02:37:16.924
about

02:37:19.602 --> 02:37:21.175
 15 minutes, and this is a very 
basic game, but I

02:37:21.176 --> 02:37:25.367
really want to talk about 
performance here.  When I was 

02:37:25.661 --> 02:37:28.488
making this demo, I had about 
two and a half weeks to do it, 

02:37:28.489 --> 02:37:30.885
and I was trying to do some 
really fancy stuff.  However, 

02:37:30.886 --> 02:37:34.790
doing work and work ng a game 
demo -- and working in a game 

02:37:34.791 --> 02:37:37.161
demo at the same time actually 
turned out to be pretty 

02:37:37.162 --> 02:37:42.177
difficult and after the game was
 finished, it maybe ran at like 

02:37:42.178 --> 02:37:47.513
45 per second, which is not 
great.  Now it's running at 60 S

02:37:48.645 --> 02:37:52.903
PS on the device at full 
resolution.  But this gave me 

02:37:52.904 --> 02:37:56.820
even more firsthand experience 
to give you some performance 

02:37:56.821 --> 02:38:00.005
tips, so let's look into them.  
If you look into the Google VR, 

02:38:00.006 --> 02:38:05.694
we will notice that we have VR 
mode enable ed, which is what we

02:38:05.786 --> 02:38:09.956
 want to do, but we also have 
distortion correction.  If we 

02:38:09.957 --> 02:38:13.291
press play and we look into the 
distortion, you can set it to 

02:38:13.292 --> 02:38:16.984
none, which means it's not going
 to if I can the distortion.  

02:38:16.985 --> 02:38:21.233
The distortion has been 
distortion caused by the lenses 

02:38:21.234 --> 02:38:24.730
when you're looking through them
 onto the skin.  You want to use

02:38:24.941 --> 02:38:27.235
 distortion correction.  
However, there are several ways 

02:38:27.236 --> 02:38:32.901
to do so.  If you have watched 
the vertex distortion correction

02:38:33.003 --> 02:38:36.594
 presentation, I'm not sure if 
it was before mine or after, but

02:38:36.816 --> 02:38:39.135
 it mentions a way to do 
correction

02:38:42.714 --> 02:38:44.010
 without processing.  The way we
 do it here is by doing it on a 

02:38:44.011 --> 02:38:47.593
post process, which means we'll 
need to draw every pixel again 

02:38:47.594 --> 02:38:51.957
with the correction.  The vertex
 correction happens when you are

02:38:51.958 --> 02:38:55.194
 drawght objects themselves onto
 the screen, and it will distort

02:38:56.192 --> 02:39:00.967
 them to fit and look how they 
should do so you don't need to 

02:39:00.968 --> 02:39:05.666
use additional pixel rendering 
time and waste more of your GPU 

02:39:05.667 --> 02:39:09.724
bandwidth because that tends to 
be one of the more expensive 

02:39:09.725 --> 02:39:16.360
things, so if I'm not using the 
vertex base correction rs I'll 

02:39:16.361 --> 02:39:19.819
use either native or Unity n 
this case I'm using Unity, and 

02:39:19.820 --> 02:39:23.422
you can play with the stereo 
screen scale.  That changes the 

02:39:23.423 --> 02:39:29.616
virtual display that we are 
drawing to.  When we are drawing

02:39:29.843 --> 02:39:33.648
 our scene, game or application,
 we're actually drawing it into 

02:39:33.649 --> 02:39:38.681
an offskin backfill which is the
 larger size of our real scene

02:39:41.704 --> 02:39:45.173
.  We're doing it so we can 
remove any artifacts or 

02:39:45.174 --> 02:39:48.205
distortion and not lose any 
details.  So we are fixing the 

02:39:48.206 --> 02:39:53.203
pixel error by drawing on high 
resolution.  But sometimes 

02:39:53.204 --> 02:39:55.733
depending on the device you'll 
find that the generate ed 

02:39:55.734 --> 02:39:58.339
resolution is too high and you 
might want to change it from one

02:39:58.674 --> 02:40:00.674
 to maybe 0.9

02:40:02.891 --> 02:40:07.717
 or 0.8.  I will leave it at 1 
here because it's working quite 

02:40:07.718 --> 02:40:12.965
well.  The other thing you can 
do is go into your edit menu and

02:40:13.165 --> 02:40:15.380
 go into project

02:40:18.515 --> 02:40:21.535
 and we'll look into quality 
here.  So I would like to make a

02:40:21.881 --> 02:40:28.841
 new quality level, I call it 
Google VR or GVR for short and I

02:40:28.842 --> 02:40:32.227
 set Android to be the 
defaulted, use it by default.  

02:40:32.228 --> 02:40:37.543
Now, depending on your scene, if
 you're using a lot of lighting,

02:40:38.082 --> 02:40:42.005
 I would suggest to bake all 
your lighting into a texture.  

02:40:42.006 --> 02:40:45.170
I'm not going to go over how to 
do it now.  There's enough 

02:40:45.171 --> 02:40:51.950
information on it online.  It 
takes into account, and 

02:40:51.951 --> 02:40:55.754
depending on your scene, you 
might even be able to move to 

02:40:55.755 --> 02:40:59.242
vertex lighting, but that's in a
 different menu, so go to it 

02:40:59.243 --> 02:41:02.796
later.  If you are not using 
soft particles or any reflection

02:41:03.132 --> 02:41:08.129
s, you might want to disable 
this.  I do suggest keeping 

02:41:08.130 --> 02:41:12.966
multisample ing at least at two.
  When you're looking into the 

02:41:12.967 --> 02:41:15.580
screen through the lenses and 
you don't have multisample ing 

02:41:15.581 --> 02:41:21.341
on, then you will see all the 
area scene and jagged edges and 

02:41:21.342 --> 02:41:24.266
that's not a pretty experience 
on your eyes to see all these 

02:41:24.267 --> 02:41:26.759
jagged edges.  So try to make 
sure that your game or 

02:41:26.760 --> 02:41:32.652
application is performing well 
enough to enable listening at 

02:41:32.653 --> 02:41:34.653
least 2X because

02:41:37.571 --> 02:41:40.679
 otherwise it's just not going 
to look as great unless you're 

02:41:40.680 --> 02:41:43.275
render egg at much higher 
resolution.  Now, as I mentioned

02:41:43.731 --> 02:41:48.180
, if you can, play with your 
shadows, play with your lights, 

02:41:48.181 --> 02:41:53.344
try to bake your shad dose if 
you can and then if you can, you

02:41:53.345 --> 02:41:55.756
 can disable your realtime 
shadows, and another thing you 

02:41:55.757 --> 02:42:00.513
can do is change the shadow 
cascades instead.  Now, if we go

02:42:00.837 --> 02:42:05.611
 into -- oh, and 145D dough 
cascades -- oh   oh, and shadow 

02:42:05.612 --> 02:42:08.875
cascades is multiple shadow maps
 to have different qualities 

02:42:08.876 --> 02:42:12.738
between shadows near the camera 
or further away because the 

02:42:12.739 --> 02:42:16.156
shadows near the camera are 
higher quality because the 

02:42:16.157 --> 02:42:20.204
player can see all of the 
artifacts happening.  Now, 

02:42:20.205 --> 02:42:27.102
another thing we can do is go 
here into player.  You have to 

02:42:27.103 --> 02:42:33.451
set your default orientation to 
landscape left to work with the 

02:42:33.452 --> 02:42:37.336
viewer.  Another thing you might
 be able to do to gain more 

02:42:37.337 --> 02:42:42.491
performance and sound quality 
over mobile is disable the 3D 

02:42:42.492 --> 02:42:47.301
display buffer.  The reason for 
it is because some phones do not

02:42:47.302 --> 02:42:55.160
 actually have 32 bit support
        support.  So on some 

02:42:55.161 --> 02:42:58.314
Galaxy phones, for example, you 
will get more shadow artifacts 

02:42:58.315 --> 02:43:02.235
without it because of the 
emulation layer, and then if 

02:43:02.236 --> 02:43:09.235
you're using only 16 bits, 
you're getting less bandwidth 

02:43:09.563 --> 02:43:12.046
usage, which means you're gect 
less performance and less hit 

02:43:12.047 --> 02:43:17.074
has been generated on the 
hardware itself.  If you go to 

02:43:17.075 --> 02:43:20.423
auto setting, as I mentioned 
earlier, you can change to 

02:43:20.424 --> 02:43:25.539
vertex lighting, or you can keep
 it at forward if you have good 

02:43:25.540 --> 02:43:28.137
enough performance, depending on
 how you have made your scene 

02:43:28.138 --> 02:43:34.379
and your game.  I do very much 
recommend enabling multisyllabic

02:43:34.818 --> 02:43:38.476
 rendering because that will 
take a big chunk of your C   CPU

02:43:38.697 --> 02:43:44.036
 usage to another thread.  
Multiit threadI can and you will

02:43:44.365 --> 02:43:49.058
 not be as CPU later for hitting
 up one code, using up all the 

02:43:49.059 --> 02:43:51.059
bandwidth there

02:43:53.080 --> 02:43:57.146
.  You should uses static and 
dynamic bachg.  What that does 

02:43:53.080 --> 02:43:55.080
-- batching

02:43:57.092 --> 02:44:00.958
         batching.  What does 
does is reduce your dropped 

02:43:57.092 --> 02:43:59.713
calls.  Say I go to the game and
 I press on the stats over here,

02:44:00.335 --> 02:44:03.580
 you can see that I have about

02:44:08.000 --> 02:44:11.770
 16 drop cores inside the scene 
approximate 162 vertices.  If I 

02:44:11.771 --> 02:44:15.897
press play, I will have just 
about double that amount because

02:44:16.231 --> 02:44:20.129
 Unity is going to be able to 
opt mieps the sound level.  The 

02:44:20.130 --> 02:44:23.812
reason for it is because we are 
drawing the scene twice, so it's

02:44:24.169 --> 02:44:27.468
 doing double the work, and you 
need to make sure that you are 

02:44:27.469 --> 02:44:30.939
not having too many verdict sees
 in the scene or too many 

02:44:30.940 --> 02:44:36.300
triangles.  Another thing that I
 have noticed with Unity, and 

02:44:36.301 --> 02:44:38.725
you might be familiar with it, 
especially if you have worked 

02:44:38.726 --> 02:44:42.837
with C++, is that it doesn't 
really like instantiate ing 

02:44:42.838 --> 02:44:46.400
objects, that means a lot of 
memorial locations, and for that

02:44:46.716 --> 02:44:50.759
 I have made a specific memory 
pool.  So if you look at the 

02:44:50.760 --> 02:44:55.794
memory pull      pool in here, 
you'll see it has two scapes, 

02:44:55.795 --> 02:44:59.328
one for the cannonballs and one 
for the Androids.  As I press 

02:44:59.329 --> 02:45:02.186
play, as this object has been 
initialize ed, it's creating all

02:45:02.701 --> 02:45:06.350
 these unused cannonballs and 
aims at the Androids which are 

02:45:06.351 --> 02:45:11.684
slowly being used.  When I shoot
 a scan on ball, let's say over 

02:45:11.685 --> 02:45:15.594
here (Explosion sound), you see 
one cannonball has been used at 

02:45:15.595 --> 02:45:18.721
the top and in a few seconds it 
will be disable ed and ready to 

02:45:18.722 --> 02:45:22.743
be used again.  This is to avoid
 heavy memorial locations which 

02:45:22.744 --> 02:45:29.126
can be very expensive at run 
time.  So the way I make a scape

02:45:29.346 --> 02:45:34.020
 like that is by creating a 
single tone and then having a 

02:45:34.021 --> 02:45:39.987
couple of static functions, one 
to create an element and one to 

02:45:39.988 --> 02:45:43.704
destroy.  On the initialization 
of the script, it's going on 

02:45:43.705 --> 02:45:48.024
make sure if there is no single 
tone, to set its own, and then 

02:45:48.025 --> 02:45:52.716
it will create however many 
instances of the object that I 

02:45:52.717 --> 02:45:55.958
set it to do.  In this case I've
 put it on the code, you should 

02:45:55.959 --> 02:46:01.297
put     put it as a variable 
instead.  So I've managed to 

02:46:01.298 --> 02:46:04.780
finish a little bit ahead of 
time, which never happened when 

02:46:04.781 --> 02:46:08.126
I tried to do before.  So if you
 have any questions, this is a 

02:46:08.127 --> 02:46:10.500
good time for it   it.
          (applause)

02:46:19.947 --> 02:46:21.947
.

02:46:24.966 --> 02:46:26.966
          (The    

02:47:06.274 --> 02:47:12.210
(The session concluded at 11:38 
a.m.)

04:02:45.454 --> 04:02:54.421
VR18-distortion correction use 
ing 

04:05:26.265 --> 04:05:28.265
vertex 

04:05:34.680 --> 04:05:36.680
Kerrer 

04:08:45.910 --> 04:08:50.395
   &gt;&gt; Hello, everyone.  I'm 
Nathan Marks for the Daydream   

04:08:50.396 --> 04:08:54.206
I am here to talk to you about 
enhance ing applicationswebsites

04:08:56.028 --> 04:09:05.896
 with BV         VR views.  Now,
 Daydream is amaze ing and heard

04:09:05.897 --> 04:09:09.837
 a lot about it, but today I'm 
going to talk to you a different

04:09:09.838 --> 04:09:19.449
 VR platform from Google called 
Cardboard. alive and well. 

04:09:19.852 --> 04:09:23.360
 In part because it has some 
really property ies.  Cardboard 

04:09:23.640 --> 04:09:28.195
still is the world's most  and 
most widely distributed VR 

04:09:28.320 --> 04:09:33.391
platform.  It's good at byte 
size experiences.  It's you can 

04:09:33.677 --> 04:09:38.568
drop into and drop out of 
really, really  ly.  It also 

04:09:41.738 --> 04:09:45.782
works on Android.  It is brandd 
in a  campaign or give away.  

04:09:45.783 --> 04:09:51.708
And especially nature of the 
content, the fact that you're 

04:09:51.928 --> 04:09:57.051
not lockd for a long time with 
cardboard makes us think of  

04:09:57.190 --> 04:10:00.731
applications.  That's what I 
want to talk to you   The heart 

04:10:01.004 --> 04:10:06.736
of Cardboard is this idea of VR 
for   And when we say that, we 

04:10:07.023 --> 04:10:11.166
mean not just for VR for use er,
 but actually for every 

04:10:11.445 --> 04:10:14.914
developer and hopefully every 
business.  Google is investing 

04:10:14.915 --> 04:10:18.372
in VR because we it is 
transformative technology.  

04:10:18.373 --> 04:10:21.559
We're also thinking ways to 
apply that technology outside of

04:10:21.560 --> 04:10:25.747
 the most obvious  of games and 
media into the real world, into 

04:10:26.164 --> 04:10:31.264
businesses that most of us run 
and support.  With that, would 

04:10:31.554 --> 04:10:35.478
like to talk to you about a 
specific insight, a opportunity 

04:10:35.760 --> 04:10:39.698
we will talk about.   Imagine 
you have a travel website.  Now 

04:10:39.699 --> 04:10:43.293
travel is a huge of internet 
search and commerce.  People 

04:10:43.829 --> 04:10:48.854
spend amounts of time and money 
when they try to  vacations.  

04:10:48.855 --> 04:10:52.234
When it's an app or website, we 
do the with the tools available.

04:10:52.533 --> 04:10:58.713
  We will talk about MACHU ICH  
 We have text and cops that try

04:11:01.309 --> 04:11:08.117
charts and graphs.  But if 
you're traveling to chew  , you 

04:11:08.245 --> 04:11:13.062
would like to know what it is 
like to be the ruins.  You feel 

04:11:13.593 --> 04:11:17.919
you're immersed in that space, 
If you plan the trip, you say 

04:11:18.193 --> 04:11:21.813
that's so amaze ing. might be 
more likely to travel there.  

04:11:21.814 --> 04:11:27.083
And this idea of  immerse ive 
media into more traditional 

04:11:27.647 --> 04:11:29.647
websites and , 

04:11:34.051 --> 04:11:38.090
 maybe you're a home , your 
whole business is yet to sell  

04:11:38.091 --> 04:11:41.410
been built yet.  And some people
 are going to come your and was 

04:11:41.411 --> 04:11:43.779
they're going to be excited 
about your home, they're going 

04:11:43.916 --> 04:11:47.543
to walk out the door because 
they have  time buying a house 

04:11:47.822 --> 04:11:52.741
if they can't look around  and 
walk to the living room.  Well, 

04:11:52.742 --> 04:11:57.875
embeddable media can let you do 
that.  If you're in retail  

04:11:58.014 --> 04:12:04.639
retail, you want someone to 
design a room or look  room, you

04:12:04.640 --> 04:12:09.869
 can do that with immerse ive 
media. work in news and you want

04:12:09.870 --> 04:12:14.361
 to power to bring people into 
story ies and really remarkable 

04:12:14.515 --> 04:12:18.948
ways, immerse ive media can that
 as well.  Of course, education 

04:12:18.949 --> 04:12:22.031
is another   You take your 
students and teach them world, 

04:12:22.032 --> 04:12:26.176
take them to places they can 
never go that are  or millions 

04:12:26.314 --> 04:12:30.838
of miles away.  This is all 
possible.  we know that even 

04:12:31.129 --> 04:12:34.338
though there's this great 
potential, and most developers 

04:12:34.614 --> 04:12:39.333
don't have a large team of VR   
on stand by just waiting for 

04:12:39.738 --> 04:12:44.692
this stuff to halfapp is 
expensive, but we want to make 

04:12:44.843 --> 04:12:50.826
it .  That's why I want to talk 
to you about a release called V,

04:12:50.964 --> 04:12:58.923
 Mr. Views.               VR 
views.  It's much easier to R 

04:12:59.216 --> 04:13:03.271
views than it is just to talk 
about them.  So, anyone has a 

04:13:03.857 --> 04:13:07.896
Smartphone, I suspect a few of 
you  crazy things called 

04:13:08.162 --> 04:13:12.839
smartfons, there's a short URL  
will take you to a live version 

04:13:13.118 --> 04:13:17.161
of this demo. it out.  I will 
leave the URL up for another 

04:13:17.447 --> 04:13:24.889
second. pretty freakin' cool and
 bonus points if you brought a  

04:13:25.280 --> 04:13:29.828
or VR of your choice.   Starting
 point is an embedded window.  

04:13:29.829 --> 04:13:34.863
We know that most  not going to 
start use ers in VR.  You will 

04:13:35.394 --> 04:13:39.535
start D.  You want to bring the 
window ready -- you want to it 

04:13:39.821 --> 04:13:43.060
to use ers even before they 
entered VR.  We know that of 

04:13:43.357 --> 04:13:47.506
course, not everyone has a Card
board with them all time.  If 

04:13:47.507 --> 04:13:50.714
you build this technology and 
integrate it the site, you want 

04:13:50.846 --> 04:13:55.846
it to work in VR and outside of 
VR. cool thing with the embedded

04:13:55.847 --> 04:14:00.017
 magic window on mobile when 
move your phone around, the 

04:14:00.143 --> 04:14:04.599
phone responds and it's live  
through the magic window into 

04:14:04.869 --> 04:14:08.197
this other wording. you have a 
couple of choices.  There's a 

04:14:08.345 --> 04:14:12.101
full button on the lower right. 
 If you press that, you magic 

04:14:12.271 --> 04:14:16.444
window, but in full screen.  
It's the most you can get 

04:14:16.899 --> 04:14:21.022
without Card board.  Now, of 
course, best option is the VR 

04:14:21.294 --> 04:14:26.364
option.  If you press that, 
stereoscopic real time viewing 

04:14:27.035 --> 04:14:33.410
designed to be with all our 
cardboard viewers.  VR is the 

04:14:33.687 --> 04:14:38.614
most immerse ive if you have 
stereo 360 content.  We will 

04:14:38.893 --> 04:14:45.369
show you to capture stereo 360 
content in just a minute.   It 

04:14:45.633 --> 04:14:51.341
is great to talk about what it 
can do.  You say how I get this 

04:14:51.625 --> 04:14:55.913
into my application.  I am 
really you that everywhere you 

04:14:55.914 --> 04:15:01.300
want to be, VR views already .  
We have web GL based 

04:15:01.587 --> 04:15:04.732
implementation that works on top
 and mobile browse ers.  We 

04:15:05.008 --> 04:15:13.363
haveinate ive Android  through 
our Google SDRK  .  So roadless 

04:15:13.507 --> 04:15:17.912
of you have an app or a website 
whether desk top or  you can use

04:15:17.913 --> 04:15:23.092
 this technology, use the same 
content integrate it with a 

04:15:23.755 --> 04:15:27.640
minimum of effort.  1 of the 
hard  with VR views is actually 

04:15:27.904 --> 04:15:31.011
compatibility.  Right?  When 
talk about browse ers alone, 

04:15:31.132 --> 04:15:34.767
there's lots of different   We 
support all of the leading 

04:15:34.768 --> 04:15:37.417
browse ers across all major 
operate ing systems as long as 

04:15:37.578 --> 04:15:42.004
you have a relate ively version 
of the browser.  I am sorry.  IE

04:15:42.536 --> 04:15:46.942
6 not   Otherwise, we're pretty 
good.  On Android, wesupport 

04:15:47.361 --> 04:15:53.475
from everything on Kit Kat on up
 and everything IOS 5.0 and up. 

04:15:53.621 --> 04:15:56.980
 Really wide range.  Majority of
 use ers want to reach, we have 

04:15:57.130 --> 04:16:00.654
didn't hard work to do the 
compatnot just the compate

04:16:00.906 --> 04:16:04.259
 ibility.  Also the work to make
 sure the decisions work and it 

04:16:04.260 --> 04:16:09.262
is and response ive, which is 
super important especially in . 

04:16:09.668 --> 04:16:13.140
 Inlet aggression are super 
simple.  If you want to  view 

04:16:13.447 --> 04:16:18.588
into your website, it is 
basically like atube video.  The

04:16:18.589 --> 04:16:21.352
 most important field is that 
field where you can reference 

04:16:21.647 --> 04:16:24.939
either scripts that we  and 
hosted on Google Cloud storage 

04:16:25.046 --> 04:16:28.253
or scripts that host yourself.  
It is sail the web version all 

04:16:28.538 --> 04:16:33.497
up in   Super simple.  The get 
hub blink is at the  page.  Then

04:16:33.498 --> 04:16:38.504
 you tell us where to find the 
360 degree and there you go.  We

04:16:38.505 --> 04:16:42.496
 do recommend if you're trying 
out for the first time use ing 

04:16:42.643 --> 04:16:47.103
our scripts that we host great. 
 But you'll run into things like

04:16:47.104 --> 04:16:50.070
 cross site core .  You will 
have to think about things like 

04:16:50.634 --> 04:16:56.232
browser ibility in way couple of
 cases.  It is much easier. 

04:16:56.918 --> 04:17:01.530
highly recommend do you that in 
any production    On Android, it

04:17:01.531 --> 04:17:06.000
 is also super simple.ure will 
add your  layout XML file.  In 

04:17:06.311 --> 04:17:11.027
code, you find that layout. case
 of an image, you create the map

04:17:11.028 --> 04:17:14.383
 factory, tell it file to open 
and then you just need to get 

04:17:14.659 --> 04:17:20.223
the options the VR view.  In 
this case the VR Panorama view. 

04:17:21.456 --> 04:17:27.555
whether it is stereo or mono 
image and hand it  widget.  Just

04:17:27.556 --> 04:17:31.483
 that simple.  In IOS, very 
similarly.  All to do is 

04:17:32.524 --> 04:17:37.261
allocate as new VR view, tell it
 what to load and add the VR 

04:17:37.535 --> 04:17:42.391
view as a sub-view to whatever 
container it is.  I try very 

04:17:42.516 --> 04:17:47.282
hard to make sure this is simple
, but natural for the platform 

04:17:47.561 --> 04:17:51.877
you're develop for.  In all of 
these slides, we have Github 

04:17:52.672 --> 04:17:56.670
link  again at the end of the 
talk.   So one of the questions 

04:17:56.950 --> 04:18:02.266
we get is okay, great.  VR is 
awe and it seems really easy to 

04:18:02.821 --> 04:18:06.377
integrate.  But howget the 
content.  Capture ing in 360 is 

04:18:06.629 --> 04:18:14.211
relate ively new. is extremely 
affordable options today.  

04:18:14.212 --> 04:18:18.562
Before I talk specific capture, 
I want to get laments 

04:18:18.563 --> 04:18:20.612
terminology, is different 
between 

04:18:24.045 --> 04:18:26.843
inside out capture and inside 
out  The capture is taken from a

04:18:26.844 --> 04:18:31.739
 single point looking  and just 
like when you're in VR or Card

04:18:32.132 --> 04:18:39.024
board, it is  in a point look 
     looking out into the 

04:18:39.025 --> 04:18:42.349
wonder.  It      It is  
configuration, you but you 

04:18:42.495 --> 04:18:48.217
really want to be use ing out 
capture, not outside in capture.

04:18:48.495 --> 04:18:52.490
  You want them out rather than 
inside in.  In retail, something

04:18:52.743 --> 04:18:56.643
 like room for home decorate 
ing, that's inside out.  You're 

04:18:56.935 --> 04:19:02.790
 in the room looking at the 
drains and the like shopping for

04:19:02.791 --> 04:19:07.235
 shoes is more outside in where 
want to look at shoe, rotate in 

04:19:07.535 --> 04:19:10.958
your hand and you're ing around 
the object rather than looking 

04:19:11.374 --> 04:19:16.225
from the inside   So, one of the
 cheapest because it's free and 

04:19:16.226 --> 04:19:22.890
awesome is to       to capture 
stereo 360 is use our cardboard 

04:19:23.745 --> 04:19:27.209
camera app Android.  It is super
 easy to use and one of the best

04:19:27.210 --> 04:19:33.717
 way capture 360 stereo imagery.
  There's a gown load           

04:19:34.408 --> 04:19:39.004
download link short URL.  If you
 want to use the Cardboard 

04:19:39.552 --> 04:19:43.935
camera  you need a conversion T.
 packs the left eye and right 

04:19:44.510 --> 04:19:48.244
data together in a way you need 
to unpack in order to in VR view

04:19:48.501 --> 04:19:53.135
.  So we have a really simple 
website we put that let's you 

04:19:53.375 --> 04:19:57.873
drag and drop an image from card
  and will automatically format 

04:19:59.216 --> 04:20:03.544
it for what V view can take.  
Super simple.  Use the app.  Use

04:20:03.545 --> 04:20:06.490
 the con  and you're ready to go
 for VR view.

04:20:11.437 --> 04:20:17.782
   Another great affordable is 
the 360 options.  The it is 

04:20:17.907 --> 04:20:24.317
monoscopic.  So, in a way that 
card  supports stereo 360, Rico 

04:20:25.136 --> 04:20:30.475
supports mono360, support 
capture ing video and still 

04:20:30.728 --> 04:20:33.511
photography.  Now, course we 
talked about real world context,

04:20:33.787 --> 04:20:39.329
 but -- sorry.  er is not 
limited to the real world.  CG 

04:20:39.498 --> 04:20:44.791
is a source.  They want to show 
people what the home will look  

04:20:44.910 --> 04:20:48.335
 You are probably going to be 
capture ing your 360 views 

04:20:49.307 --> 04:20:52.586
renders of your architectural 
drawings and there's a of great 

04:20:53.127 --> 04:20:57.370
plug ins from game engines like 
on real engine unit to more 

04:20:57.652 --> 04:21:04.626
traditional offline like Rend
erman and Mea. is the same form 

04:21:04.751 --> 04:21:08.588
that VR view supports.   So 
let's talk a little bit about 

04:21:08.859 --> 04:21:14.037
the specifics of the for  that 
work in VR view.  So, we support

04:21:14.038 --> 04:21:19.989
 -- it was base format a mono360
 piano.  It looks like that.  

04:21:19.990 --> 04:21:26.156
People call it a late long 
image.  It is a very serious 

04:21:26.689 --> 04:21:32.974
format  We also support its 
stereo cousin which you will is 

04:21:33.114 --> 04:21:37.550
ADS which is really just two 
pianos.  One for each stacked on

04:21:37.551 --> 04:21:44.533
 top of each other.  A stereo 
image looks very like a mono im

04:21:45.031 --> 04:21:50.185
age.  We also support in the 
first both images and videos.  

04:21:50.186 --> 04:21:54.640
So, 360 stills, 360 videos  of 
course,

04:21:57.864 --> 04:22:04.028
 mono and stereo on both of 
them.  If you a Mono 360 image, 

04:22:04.424 --> 04:22:07.519
you want your ratio to be 1021.
good 

04:22:10.651 --> 04:22:14.234
baseline for mono 360N. stereo, 
it's a square you're stacking 

04:22:14.507 --> 04:22:19.046
two of the one image on top of  
by one image.  For performance 

04:22:19.769 --> 04:22:28.619
and compatibility the maximum 
dimensions are 496 by 4096.  We 

04:22:29.464 --> 04:22:33.499
support JPEG and GMP.  This s 
especially for anything that 

04:22:35.009 --> 04:22:38.336
very traffic.  On the video side
 of things, we strong recommend 

04:22:38.630 --> 04:22:46.140
you stick to MP4, H264 with a 6 
by 9 interesting thing on video 

04:22:46.673 --> 04:22:50.677
is that this device for video is
 much more varied especially on 

04:22:50.959 --> 04:23:00.050
mobile it is for imagery.  It is
 on any modern phone 4096 .  You

04:23:00.051 --> 04:23:04.766
 will find with video is that 
some phones cap out 10 ADP.  And

04:23:04.767 --> 04:23:09.052
 others will decode at 4K.  If 
you want one works everywhere 

04:23:09.331 --> 04:23:17.334
uses a mono10 ADP 699 for your .
  If you want to target hire ing

04:23:17.335 --> 04:23:22.623
 devices and you would now have 
four versions that it works and 

04:23:22.788 --> 04:23:29.483
then a higher Fidelity ideally 
216 DP deliver the devices that 

04:23:29.746 --> 04:23:36.806
you know support it.   One last 
walk with video is there's a 

04:23:37.606 --> 04:23:39.609
wide variety of  that work.

04:23:43.384 --> 04:23:48.496
  They're always divisible by 
16.   So, I think that's a 

04:23:48.497 --> 04:23:52.902
really great overview of how all
 of stuff works.  We talked 

04:23:53.827 --> 04:23:57.570
about the applications whether a
 home buildinger or a journalist

04:23:57.710 --> 04:24:02.417
 or in retail.  And got a lot of
 great resources if you want to 

04:24:02.697 --> 04:24:06.736
learn more. have a getting 
started guide on developers.

04:24:08.744 --> 04:24:15.504
google.com/VR. only have a few 
hours left, but I highly 

04:24:15.789 --> 04:24:19.489
encourage check out one of the 
kiosks.  If they're not able to 

04:24:19.777 --> 04:24:24.787
get it in time for today's IO, 
they'll be available online  

04:24:25.067 --> 04:24:28.319
help you understand the base ics
 of getting in  create ing an 

04:24:28.593 --> 04:24:34.759
app and create ing a website and
 make it with embeddable VR 

04:24:34.894 --> 04:24:42.762
media.  I want to leave plenty 
of for Q&amp;A if you have any 

04:24:42.916 --> 04:24:48.229
questions or thoughts.  Please 
up.   &gt;&gt; I am Ben.  Two quick 

04:24:48.760 --> 04:24:56.122
questions.  One is will we see 
Cardboard camera for IOS and two

04:24:56.123 --> 04:25:01.441
 is -- well not a question much.
  There's an issue with VR view 

04:25:01.716 --> 04:25:10.590
in IOS right now 9.0 Chrome of 
the browser is always there when

04:25:10.591 --> 04:25:16.243
 you're Cardboard view.  And one
 more question.  Will Daydream  

04:25:16.492 --> 04:25:21.043
be able to access these views?  
 &gt;&gt; Nathan:  Number 1.  No 

04:25:21.044 --> 04:25:24.679
additional product announcement 
right now.  Number 2, thank you 

04:25:24.966 --> 04:25:30.562
for the bug   If you haven't 
fileed it on Github, that's how 

04:25:30.696 --> 04:25:35.364
we all of these things.  If 
anyone uses things and has , we 

04:25:35.503 --> 04:25:38.543
just launched this a couple of 
months ago.  File , file tickets

04:25:38.685 --> 04:25:42.560
.  We will get them addressed as
 quicklypossible.  I'm sorry.  I

04:25:42.702 --> 04:25:47.102
 forgot your third.  Oh, yeah. 
the question is:  Will Daydream 

04:25:47.385 --> 04:25:53.783
devices be able to  views?  
Basically the short is very 

04:25:53.784 --> 04:25:59.639
focused on cardboard.  Daydream 
 them like a card board in the 

04:25:59.778 --> 04:26:03.763
sense you put a phone it and 
look through it, but I don't 

04:26:03.904 --> 04:26:08.978
want to give that VR view will 
make your website or 

04:26:10.062 --> 04:26:12.716
automatically Daydream ready.  
One of the things I think is 

04:26:13.241 --> 04:26:17.534
really cool about VR view is 
they don't to you build a VR app

04:26:17.535 --> 04:26:23.564
 from the ground up.  You can 
use app with traditional 2D X 

04:26:23.706 --> 04:26:27.962
and drop it into immerse ive if 
you want.  We call it self-

04:26:28.117 --> 04:26:35.494
contained view VRthey can stay 
in VR to access all the your VR 

04:26:35.617 --> 04:26:40.809
content and that's a fundamental
 change.  It's of the lead from 

04:26:41.070 --> 04:26:46.599
snackable VR to long form VR.  
It is designed to solve for.   

04:26:46.600 --> 04:26:53.407
&gt;&gt; Hi.  Thanks for that.  That  
any plans on fallback for 

04:26:53.688 --> 04:26:58.714
devices alterd in Kit Kat?   &gt;&gt; 
Nathan:  So, not currently.  The

04:26:59.010 --> 04:27:03.723
 question is about  for older 
devices in Kit Kat?  Right now, 

04:58:49.499 --> 04:58:55.521
  May 20, 2016.
          Improve user 

04:58:55.522 --> 04:59:00.241
acquisition campaigns with 
analytics.

05:02:07.593 --> 05:02:09.593
.

05:04:09.404 --> 05:04:11.404
.

05:04:13.429 --> 05:04:15.883
.  

05:05:45.423 --> 05:05:47.423
..

05:06:35.147 --> 05:06:37.646
.    

05:06:41.151 --> 05:06:43.151
.

05:07:49.149 --> 05:07:51.372
..

05:09:03.603 --> 05:09:08.587
          &gt;&gt; So like one big 
launch this week wasn't enough. 

05:09:09.040 --> 05:09:12.962
 So I'll be flying solo, so 
you'll have to bear with me.  

05:09:12.963 --> 05:09:16.477
We're going to be talking about 
Firebase Analytics and we'll be 

05:09:16.478 --> 05:09:19.396
talking about it in the context 
of growth.  So actually growing 

05:09:19.397 --> 05:09:22.680
our user base, trying to get 
more users into your app and 

05:09:22.681 --> 05:09:28.324
then keeping them there.  And 
I'm going to talk about Firebase

05:09:28.894 --> 05:09:32.362
 Analytics in three sections.  
First I'll give a quick overview

05:09:32.807 --> 05:09:35.080
 of Firebase Analytics, 
hopefully some of you guys can 

05:09:35.081 --> 05:09:38.228
stop by our sandbox or attend 
some of the other sessions, so 

05:09:38.229 --> 05:09:42.445
it might not be new, but I'll go
 ahead and give a quick recap.  

05:09:42.446 --> 05:09:47.796
Then I will be talking about 
using Analytics to actual track 

05:09:47.797 --> 05:09:50.619
your paid acquisition campaigns,
 so looking at advertising and 

05:09:50.620 --> 05:09:53.973
tracking advertising with 
Firebase Analytics.  And then 

05:09:53.974 --> 05:09:59.828
finally we're going to touch on 
organic growth, so actual a 

05:09:59.829 --> 05:10:03.625
couple of tools that you can use
 Firebase, use with Firebase, 

05:10:03.626 --> 05:10:06.032
and track using Firebase 
Analytics, since we know that as

05:10:06.366 --> 05:10:09.489
 a marketer, advertising is only
 one of the tools that you're 

05:10:09.490 --> 05:10:12.659
using.  And when we're actually 
going through this, I'll be 

05:10:12.660 --> 05:10:20.521
using a hypothetical marketer 
named Mike.  Now, let's start 

05:10:20.522 --> 05:10:23.381
with the reason why so many of 
us are here.  We've got 

05:10:23.382 --> 05:10:27.189
consumers spending a lot of time
 in mobile apps when they're on 

05:10:27.190 --> 05:10:31.433
their phones.  So between Google
 Play and the app store, we've 

05:10:31.434 --> 05:10:35.355
got millions          Mill      
millions of apps that are 

05:10:35.356 --> 05:10:41.002
generate ing north of $50 
billion annually.  So that is a 

05:10:41.003 --> 05:10:46.763
lot of value coming from a lot 
of users.  How do we actually 

05:10:46.764 --> 05:10:49.605
reach those users?  How do we 
present opportunities for those 

05:10:49.606 --> 05:10:52.476
users to discover our apps?

05:10:56.574 --> 05:11:01.276
  Wern that on                We
 know that on average, a use ser

05:11:01.277 --> 05:11:05.831
 unlocking their phone 150 times
 a day.  They're usually doing 

05:11:05.832 --> 05:11:09.416
specific tasks are like calling 
an Uber or looking for a nearby 

05:11:09.417 --> 05:11:12.350
coffee shop, looking for a game 
to download when they're waiting

05:11:12.575 --> 05:11:16.474
 for the bus.  I like to think 
of these as 150 opportunities 

05:11:16.475 --> 05:11:19.338
for us as marketers, different 
chances we can get in front of 

05:11:19.339 --> 05:11:22.031
our users and show them content 
that they could be interested in

05:11:24.010 --> 05:11:29.644
.  But even though we have these
 150 opportunities a day, the 

05:11:29.645 --> 05:11:33.539
ecosystem has created a lot of 
challenges for us as marketers, 

05:11:33.540 --> 05:11:38.112
so a couple quick highlights.  
First, it can be hard to actual 

05:11:38.113 --> 05:11:42.150
find the right user in your app,
 so figuring out who that target

05:11:42.354 --> 05:11:45.153
 audience should be and making 
sure it's a relevant market, 

05:11:45.154 --> 05:11:48.324
making sure you're finding them 
on the correct devices, at the 

05:11:48.325 --> 05:11:56.627
right time, eghts accidents 
thaidz                 , that's 

05:11:56.628 --> 05:11:58.773
always an issue.  Secondly, 
mobile technology is just hard. 

05:11:58.902 --> 05:12:01.519
 People who are new to marketing
 on apps I feel like are always 

05:12:01.520 --> 05:12:04.875
surprised when they realize 
there aren't cookies on apps.  

05:12:04.876 --> 05:12:09.020
You've got advertising 
identifiers, IDFA's, they don't 

05:12:09.021 --> 05:12:11.198
work well with cookies on mobile
 web, so the technology that was

05:12:11.199 --> 05:12:14.449
 designed to help us connect 
with our users often actually 

05:12:14.450 --> 05:12:18.027
ends up getting in the way, and 
not to mention of course the App

05:12:18.373 --> 05:12:21.511
 Stores, right?  Google Play and
 the App Store, they add a step 

05:12:21.512 --> 05:12:26.653
in between giving our users an 
ad or something like that and 

05:12:26.654 --> 05:12:30.788
actually discovering the app, so
 it's one step or three 

05:12:30.789 --> 05:12:34.629
depending on how you look at it.
  So this creates a Clouding 

05:12:34.630 --> 05:12:42.380
marketing picture at best.  And 
then finally, I feel like we're 

05:12:42.381 --> 05:12:45.220
drowning in tools.  Every time I
 meet a developer, I always ask 

05:12:45.221 --> 05:12:48.816
them, what Analytics tools are 
they using?  Almost certainly 

05:12:48.817 --> 05:12:51.196
they rattle off four or five 
different Analytics tools 

05:12:51.197 --> 05:12:54.257
they're using, and they're using
 all of them, they're just using

05:12:54.589 --> 05:12:57.736
 them for different things.  So 
they could have an SDK for 

05:12:57.737 --> 05:13:01.227
tracking crash reporting or one 
for tracking push notifications 

05:13:01.228 --> 05:13:05.806
or behavioral in-app Analytics 
or conversion tracking.  So each

05:13:06.015 --> 05:13:10.392
 one of these SDK's in and of 
themselves aren't that big, 

05:13:10.393 --> 05:13:12.985
aren't that much work to add, 
but when you start adding them 

05:13:12.986 --> 05:13:16.775
all together, that's four or 
five SDK    SDK's for different 

05:13:16.776 --> 05:13:20.788
types of Analytics that you're 
use ng your app.  -- use ng your

05:13:21.002 --> 05:13:23.835
 app.  When you look at them all
 together, they could add bloat 

05:13:23.836 --> 05:13:26.253
to app, and certainly as 
developers I know we don't like 

05:13:26.254 --> 05:13:29.381
adding extra code every time a 
marketer asks for another tool. 

05:13:29.515 --> 05:13:31.700
 That's just looking on the 
development side, but when 

05:13:31.701 --> 05:13:33.701
you're actually

05:13:35.265 --> 05:13:36.553
 consuming that data in the UI, 
you've got different databases, 

05:13:36.554 --> 05:13:40.840
different systems and these 
different data silos don't speak

05:13:41.053 --> 05:13:43.445
 well together.  They were never
 designed to work together, so 

05:13:43.446 --> 05:13:46.600
you end up making your decisions
 in a couple of different 

05:13:46.601 --> 05:13:53.439
disparate places.  And that's 
why we are bringing to you 

05:13:53.440 --> 05:13:56.722
Firebase Analytics and Firebase,
 because we're really trying to 

05:13:56.723 --> 05:14:02.374
do something different by 
offering this platform.  So 

05:14:02.375 --> 05:14:04.951
unless you've been living under 
a rock for the last few days, 

05:14:04.952 --> 05:14:09.339
you should know that Firebase is
 a suite of integrate ed 

05:14:09.340 --> 05:14:11.340
products that we're introducing

05:14:14.545 --> 05:14:15.545
 to help you develop your app, 
grow your user base, and earn 

05:14:15.546 --> 05:14:21.342
money.  And Firebase Analytics 
is really at the core of this 

05:14:21.343 --> 05:14:24.142
platform.  I thought it was 
pretty impressive the way that 

05:14:24.143 --> 05:14:28.709
this designer designed this 
graphic, quite literally 

05:14:28.710 --> 05:14:32.626
Analytics is at the core of this
 image, but not only is it 

05:14:32.627 --> 05:14:35.786
connecting all of the different 
products within Firebase 

05:14:35.787 --> 05:14:39.072
Analytics, but it helps you 
understand each phase of the 

05:14:39.073 --> 05:14:42.118
customer journey so that you can
 really get an end to end 

05:14:42.119 --> 05:14:50.723
picture of what's going on in 
your app.  Now, adding Firebase 

05:14:50.724 --> 05:14:55.609
to your app is as simple as 1, 
2, 3.  1 is registering your app

05:14:57.559 --> 05:14:59.543
 on Firebase.com so you can 
actually create that instance 

05:14:59.544 --> 05:15:02.474
within our second.  Secondly, 
you're given a configuration 

05:15:02.475 --> 05:15:05.937
file which you'll be adding to 
the app.  And third, you add two

05:15:06.161 --> 05:15:09.968
 lines of code on iOS and you 
just adjust your configuration 

05:15:09.969 --> 05:15:12.683
file on Android and just like 
that you're up and running with 

05:15:12.684 --> 05:15:16.681
Firebase.  This is a one-time 
task that you would do to 

05:15:16.682 --> 05:15:20.826
instrument any of the features 
in Firebase, but no matter which

05:15:21.151 --> 05:15:24.293
 feature you're implementing, 
you will get Firebase Analytics 

05:15:24.294 --> 05:15:27.462
by default, so it's a pretty 
easy way to get up and running 

05:15:27.463 --> 05:15:34.614
to immediately start asking 
questions of your data.  Now, I 

05:15:34.615 --> 05:15:37.331
see Firebase Analytics being 
particularly helpful in three 

05:15:37.332 --> 05:15:41.348
different ways.  First of all, 
it's completely free and 

05:15:41.349 --> 05:15:44.517
unlimited          unlimited.  
When we set out a while ago to 

05:15:44.518 --> 05:15:48.539
completely redesign an app 
Analytics product from the 

05:15:48.540 --> 05:15:51.979
ground up, free and unlimited 
was one of our founding tenets. 

05:15:52.117 --> 05:15:55.024
 We wanted to make sure that you
 as developers had access to all

05:15:55.381 --> 05:15:59.926
 of your data without compromise
, so no hit limits, no sample 

05:16:00.067 --> 05:16:06.274
ing, and it's your data.  This 
was built by the knowledge of 

05:16:06.275 --> 05:16:10.630
the developers and product 
managers of Google Analytics for

05:16:10.850 --> 05:16:13.537
 apps, so we were able to take 
learnings from several years and

05:16:13.794 --> 05:16:16.945
 hundreds of thousands of apps 
to take what we have and the 

05:16:16.946 --> 05:16:20.866
feedback that we've been getting
 from our users to truly build 

05:16:20.867 --> 05:16:25.626
an app Analytics product that is
 built for app developers.  And 

05:16:25.627 --> 05:16:29.111
then we have automatic event 
reporting.  So with Firebase 

05:16:29.112 --> 05:16:31.781
Analytics, immediately after 
plugging in the SD-K you're 

05:16:31.782 --> 05:16:37.598
getting over -- plugging in the 
SDK, you're getting over 12 

05:16:37.599 --> 05:16:39.599
automatic events captured 
automatically.  You can log into

05:16:39.760 --> 05:16:42.155
 your dashboard and see a bunch 
of information without logging 

05:16:42.156 --> 05:16:45.125
any additional information.  But
 if you're new to Analytics, 

05:16:45.126 --> 05:16:47.845
maybe you don't know exactly how
 to instrument your app, we also

05:16:48.065 --> 05:16:51.113
 give you guides for different 
verticals about what we 

05:16:51.114 --> 05:16:53.831
recommend to instrument in your 
app.  Different events that we 

05:16:53.832 --> 05:16:57.055
suggest you captured          
capture.  And this can be used, 

05:16:57.056 --> 05:17:00.571
of course, as a guide if you're 
new tolytic, but it is also 

05:17:00.572 --> 05:17:05.148
helpful because we give -- if 
you're new to Analytics, but it 

05:17:05.149 --> 05:17:08.615
is also helpful because we give 
you dedicated reporting for 

05:17:08.616 --> 05:17:10.931
specific events.  If you have a 
specific retail event, we'll 

05:17:10.932 --> 05:17:14.399
give you a report for that, or a
 specific game event, again, 

05:17:14.400 --> 05:17:16.784
we'll give you a dedicated 
report for that since we 

05:17:16.785 --> 05:17:19.275
understand the context, the 
syntax of that event, those 

05:17:19.276 --> 05:17:22.231
parameters, we'll make sure to 
give a report that makes sense 

05:17:22.232 --> 05:17:28.034
in the context of that event.  
And then finally, Firebase 

05:17:28.035 --> 05:17:31.400
Analytics is seamlessly 
integrate ed with the rest of 

05:17:31.401 --> 05:17:34.425
Firebase, and it's not just seam
less p integrated with the rest 

05:17:34.426 --> 05:17:37.941
of Firebase, it's also integrate
 ed across Google.  Again, 

05:17:37.942 --> 05:17:42.051
integration was one of our 
founding tenets of Firebase 

05:17:42.052 --> 05:17:44.318
Analytics, isn't we knew that 
developers are instrumenting, 

05:17:44.319 --> 05:17:47.149
you know, they could have 14 
different developer tools in 

05:17:47.150 --> 05:17:50.277
their app, again, they don't 
speak to each other, and what we

05:17:50.492 --> 05:17:55.202
 wanted to do with faibdz was 
have a single -- with Firebase 

05:17:55.203 --> 05:17:58.029
was to have a single platform 
where you could come to one 

05:17:58.030 --> 05:18:00.218
single place to do all the 
developer tasks.  Integration is

05:18:00.434 --> 05:18:06.517
 a key point I'll dive into a 
little more later.  And of 

05:18:06.518 --> 05:18:09.357
course Firebase Analytics works 
on both iOS and Android.  Since 

05:18:09.358 --> 05:18:12.533
we know that successful app 
developers are building on both 

05:18:12.534 --> 05:18:16.705
platforms and we are committed 
to being platform agnostic

05:18:20.189 --> 05:18:23.791
.  Now, if you attended our 
session on Wednesday, you saw 

05:18:23.792 --> 05:18:26.610
that Firebase Analytics can be 
used to help develop your app, 

05:18:26.611 --> 05:18:30.877
grow your user base and earn 
money, and this is really not a 

05:18:30.878 --> 05:18:33.894
linear path, right?  It's a 
cycle.  So you'll be taking each

05:18:34.116 --> 05:18:38.165
 one of these actions over and 
over, rinse, repeat.  But right 

05:18:38.166 --> 05:18:40.452
now in this session we'll be 
talking about Firebase Analytics

05:18:40.453 --> 05:18:43.738
 in the context of growth and 
how you can actually use it to 

05:18:43.739 --> 05:18:45.739
augment your marketing strategy

05:18:47.692 --> 05:18:53.190
.  We're going on look at it in 
the context of a real app.  So 

05:18:53.191 --> 05:18:56.804
we've got this app Transworld 
endless skate er.  It's 

05:18:56.805 --> 05:19:02.564
available on both iOS and 
Android, and it allows users to 

05:19:02.565 --> 05:19:05.713
try to attempt the longest runs 
in the game, and they can select

05:19:06.154 --> 05:19:08.980
 from five different pro skate 
ers that have different skills 

05:19:08.981 --> 05:19:16.660
and tricks that they have access
 to.  Another thing that you can

05:19:16.661 --> 05:19:21.581
 do in this game is you can 
spend on in-app purchases to 

05:19:21.582 --> 05:19:24.557
purchase virtual currency in the
 game, and then once you're in 

05:19:24.558 --> 05:19:27.266
the game, you can spend that 
virtual currency on other tricks

05:19:27.473 --> 05:19:33.162
, unlock new levels or whatever.
  But the important part to note

05:19:33.387 --> 05:19:38.723
 is that skates in-game 
committee works.  So if we can 

05:19:38.724 --> 05:19:42.318
find more users, bring them into
 the app, then Transworld end

05:19:42.628 --> 05:19:47.299
less skate er should make more 
money.  That's why we hired Mike

05:19:47.426 --> 05:19:53.189
, this marketer.  Now, Mike 
decides, Mike is responsible for

05:19:53.404 --> 05:19:56.118
 growing Transworld endless 
skate er and he decides that now

05:19:56.320 --> 05:20:00.367
 is the right time to get the 
app in the hands of his users. 

05:20:00.368 --> 05:20:03.087
It's right around finals time, 
maybe he's looking to take 

05:20:03.088 --> 05:20:06.430
advantage of some folks who are 
just getting off school and 

05:20:06.431 --> 05:20:09.262
looking to find a new game for 
the summer or maybe they just 

05:20:09.263 --> 05:20:12.680
need something to procrastinate 
while they're studying.  But he 

05:20:12.681 --> 05:20:21.389
thinks now is the time and he 
sets a pretty ambitious goal of

05:20:24.312 --> 05:20:27.840
 300,000 installs k he's driving
 around 10,000 installs, so he 

05:20:27.841 --> 05:20:30.761
has a lot of work ahead of him. 
 And he thinks Firebase 

05:20:30.762 --> 05:20:33.673
Analytics can help.  So he logs 
into the Firebase console and 

05:20:33.674 --> 05:20:37.175
immediately when he gets here, 
he notices a ton of data is 

05:20:37.176 --> 05:20:41.015
already available for him, and 
this is because Mike's developer

05:20:41.325 --> 05:20:44.800
 named Andy had actually already
 been using the Firebase product

05:20:45.221 --> 05:20:48.945
 for a series of other features,
 so Mike never had to ask Andy 

05:20:48.946 --> 05:20:53.733
to add any new SDK because it 
was already there for him, the 

05:20:53.734 --> 05:20:56.333
Analytics is already available 
to him.  So he logs in, he sees 

05:20:56.334 --> 05:20:59.931
a ton of rich data, a bunch of 
events are being captured 

05:20:59.932 --> 05:21:03.367
automatically, he can see his 
monthly active users      users,

05:21:03.368 --> 05:21:10.002
 he can see his revenue numbers,
 et cetera.  Now, he navigates 

05:21:10.003 --> 05:21:12.926
to the events section of the app
.  I like to think of event as 

05:21:12.927 --> 05:21:17.490
like the currency that Firebase 
Analytics actually runs on.  

05:21:17.491 --> 05:21:20.119
These are also what I like to 
describe as the verbs or action 

05:21:20.120 --> 05:21:24.691
words in the app, so things like
 level up or in-app purchase, 

05:21:24.692 --> 05:21:28.188
whatever these are, and he 
notices a lot of the events that

05:21:28.476 --> 05:21:32.929
 have been logged automatically 
by just plugging in the SDK, so 

05:21:32.930 --> 05:21:39.682
he can see app update, he can 
see OS update, session start, et

05:21:40.037 --> 05:21:44.044
 cetera, even in-app purchase, 
since this is a game and 

05:21:44.045 --> 05:21:46.863
Firebase Analytics captures in-
app purchases automatically on 

05:21:46.864 --> 05:21:55.580
both iOS and Android.  And he 
also notices a couple of events 

05:21:55.581 --> 05:21:58.952
that were captured by Andy that 
are specific to games, so you 

05:21:58.953 --> 05:22:01.518
can see at the bottom there 
spend virtual currency and 

05:22:01.519 --> 05:22:04.613
unlock achievement.  These are 
two games that are specific to 

05:22:04.614 --> 05:22:09.977
games that Andy had registered, 
logged in the code with just a 

05:22:09.978 --> 05:22:13.787
line or two of code, and these 
actually contain pretty rich 

05:22:13.788 --> 05:22:16.766
information about games 
specifically.  I had highlighted

05:22:17.176 --> 05:22:20.333
 those different vertical 
specific events earlier.  These 

05:22:20.334 --> 05:22:23.502
are some examples of those.  So 
if you were to click into them, 

05:22:23.503 --> 05:22:29.834
you would actually see some 
reporting around them.  And then

05:22:30.172 --> 05:22:35.749
 Mike navigates to the 
attribution tab, so in the 

05:22:35.750 --> 05:22:38.461
attribution tab he can see his 
conversions.  The con verges are

05:22:38.688 --> 05:22:41.729
 the business drivers in his app
 that he's really looking to opt

05:22:41.820 --> 05:22:46.092
 miedz his business around.  
First ohm an in-app purchase, we

05:22:46.202 --> 05:22:50.893
 know these are really common in
-app event, we'll enable those, 

05:22:50.894 --> 05:22:52.961
but Mike happens the opportunity
 to enable any of the events 

05:22:52.962 --> 05:22:56.547
that he has access to to be 
conversions and he can do this 

05:22:56.548 --> 05:22:59.498
in the events tab on the far 
right column there is an enable 

05:22:59.499 --> 05:23:02.752
conversion toggle.  By turning 
those o they will add those 

05:23:02.753 --> 05:23:07.336
events to the attribution table.
  Marking something as a 

05:23:07.337 --> 05:23:10.521
conversion, basically unlocks 
some features and functionality 

05:23:10.522 --> 05:23:13.685
for that event.  You can do 
attribution reporting, so you 

05:23:13.686 --> 05:23:16.528
can see cross-channel campaign 
performance for your different 

05:23:16.529 --> 05:23:20.794
conversions.  We talked about 
Mike had automatically gotten 

05:23:20.795 --> 05:23:24.922
in-app purchase and first open 
but he decides to go ahead and 

05:23:24.923 --> 05:23:30.297
indicate spend virtual currency 
to also be one of the conversion

05:23:30.600 --> 05:23:33.896
 tion that he wants to optimize
                               s

05:23:34.108 --> 05:23:38.368
 that he wants to optimize 
towards.  So I want to step back

05:23:38.658 --> 05:23:41.383
 really quickly and talk about, 
we've talked about the 

05:23:41.384 --> 05:23:44.205
attribution section and 
generally what you can do within

05:23:44.434 --> 05:23:46.811
 Firebase Analytics but now I 
want to talk about the paid part

05:23:48.552 --> 05:23:51.044
 of marketing          
marketing, look at how you can 

05:23:51.045 --> 05:23:54.594
integrate Firebase Analytics 
with your advertising efforts.

05:23:59.129 --> 05:24:03.672
  So Mike thans he's going to be
 driving 300,000 installs, if 

05:24:03.673 --> 05:24:06.334
he's going to be spending that 
much money, then he really wants

05:24:06.524 --> 05:24:09.380
 to make sure he understands the
 tools that he has access to, so

05:24:09.582 --> 05:24:13.730
 that is why he wants to 
basically understand what 

05:24:13.731 --> 05:24:16.742
Firebase Analytics can actually 
do for him.

05:24:21.917 --> 05:24:26.720
  Now, a key part of our 
integration with Firebase 

05:24:26.721 --> 05:24:29.679
Analytics has been being able to
 integrate across other Google 

05:24:29.680 --> 05:24:33.856
products.  And with Firebase 
Analytics, one of our most 

05:24:33.857 --> 05:24:35.842
important integrations  
            integrations from 

05:24:35.843 --> 05:24:39.861
day 1 has been our integration 
with AdWords.  We know that if 

05:24:39.862 --> 05:24:44.440
you've run marketing cam bains 
AdWords in the past,  -- 

05:24:44.441 --> 05:24:47.017
campaigns with add wards in the 
past, it can be difficult to 

05:24:47.018 --> 05:24:49.848
track your conversions.  We know
 you have to keep track of your 

05:24:49.849 --> 05:24:53.017
conversion ID, conversion labels
, it can be a headache, 

05:24:53.018 --> 05:24:55.619
oftentimes you had to make code 
changes to run a marketing 

05:24:55.620 --> 05:24:58.020
campaign and this can often 
sometimes create friction 

05:24:58.021 --> 05:25:01.603
between the marketers and the 
developers in a product.  So 

05:25:01.604 --> 05:25:03.938
we've been very deliberate about
 actually shaping our 

05:25:03.939 --> 05:25:08.058
integration between AdWords and 
Firebase.  So it comes in a 

05:25:08.059 --> 05:25:11.428
couple of different parts.  The 
first part is you establish a 

05:25:11.429 --> 05:25:17.784
link between your Firebase app 
and your AdWords account.  By 

05:25:17.785 --> 05:25:19.489
establishing that link, that 
handshake, a bunch of features 

05:25:19.490 --> 05:25:23.517
get unlocked.  For example, you 
get conversion tracking and you 

05:25:23.518 --> 05:25:26.874
can import any of the conversion
s that you had access to in 

05:25:26.875 --> 05:25:30.674
Firebase, you can track your 
AdWords campaigns against them. 

05:25:30.905 --> 05:25:33.196
 Then secondly         secondly,
 you can also target the 

05:25:33.197 --> 05:25:36.904
audiences that you've created 
using your Firebase Analytics 

05:25:36.905 --> 05:25:41.163
data in AdWords.  So a really 
powerful way that shouldn't 

05:25:41.164 --> 05:25:44.980
require any code changes from 
the marketing perspective, you 

05:25:44.981 --> 05:25:47.788
should be able to do everything 
you need as a marketer directly 

05:25:47.789 --> 05:25:56.179
from the UI.  All right.  So 
Mike decides to run some 

05:25:56.180 --> 05:26:00.436
universal app campaigns, and 
universal app campaigns are an 

05:26:00.437 --> 05:26:03.915
AdWords feature that were launch
ed last year to basically make 

05:26:03.916 --> 05:26:07.902
your life as an app marketer a 
lot easier.  So Google has 

05:26:07.903 --> 05:26:11.271
access to all these touch points
 when users are on their mobile 

05:26:11.272 --> 05:26:14.517
phones.  Right?  There's Google
.com and users searching for 

05:26:14.518 --> 05:26:17.581
apps in Google.com.  Of course, 
there's Google Play and actually

05:26:17.912 --> 05:26:22.271
 discovering those apps in the 
Play Store.  We have the mobile 

05:26:22.272 --> 05:26:27.358
display network, so both on 
mobile web and across other apps

05:26:27.898 --> 05:26:31.642
 and inventory and AdMob, and 
then finally of course YouTube, 

05:26:31.643 --> 05:26:34.247
right?  So we have all these 
different touch points and 

05:26:34.248 --> 05:26:37.532
instead of asking you as a 
marketer to continue to maintain

05:26:37.958 --> 05:26:42.306
 each one of these channels and 
have individual strategies for 

05:26:42.307 --> 05:26:46.146
each one of these, you can book 
a campaign once with universal 

05:26:46.147 --> 05:26:50.736
app campaigns and then we will 
deploy those campaigns across 

05:26:50.737 --> 05:26:53.554
all these different touch points
 to remove some of the burden on

05:26:53.780 --> 05:27:01.577
 you as a marketer.  So from 
past experience, Mike knows that

05:27:02.243 --> 05:27:07.346
 universal app campaigns are 
pretty effective at running cost

05:27:08.450 --> 05:27:10.450
-      cost-efficient CPI's,

05:27:14.653 --> 05:27:15.602
 but basically he knows this 
could be a good approach to 

05:27:15.603 --> 05:27:19.829
actually acquiring some of those
 300,000 users that he has as a 

05:27:19.830 --> 05:27:23.081
goal.  So the first thing ahe's 
going to do, as we talked about 

05:27:23.082 --> 05:27:27.467
earlier, log into AdWords, he's 
going on link his AdWords 

05:27:27.468 --> 05:27:30.601
campaign with his Firebase, he's
 going to link his AdWords 

05:27:30.602 --> 05:27:33.538
account with his Firebase 
project.  So this is a one-time 

05:27:33.539 --> 05:27:36.276
task and then the rest of his 
campaigns and data will flow 

05:27:36.277 --> 05:27:39.394
seam     seamlessly.  He's going
 to select which conversions to 

05:27:39.395 --> 05:27:43.789
import into AdWords and as we 
highlighted on the attribution 

05:27:43.790 --> 05:27:47.153
tab, we're going to have the 
first open, which is baiivelg 

05:27:47.154 --> 05:27:50.761
like installs,                 
        basically like installs,

05:27:50.970 --> 05:27:53.905
 driving installs, secondly, 
he's going to be reporting his 

05:27:53.906 --> 05:27:56.124
in-app purchases, so it's the 
items being purchased in the app

05:27:56.350 --> 05:27:59.818
, then finally it's that third 
conversion, the spend virtual 

05:27:59.819 --> 05:28:04.095
currency conversion.  Even 
though he's focused on driving 

05:28:04.096 --> 05:28:07.776
installs, those are like first 
opens, he still wants to import 

05:28:07.777 --> 05:28:11.014
all of the conversions that he 
has access to since those are 

05:28:11.015 --> 05:28:13.392
good signs of engagement and he 
would like to measure the 

05:28:13.393 --> 05:28:17.915
performance of his ad campaigns 
across those in-app events as 

05:28:17.916 --> 05:28:23.247
well as his first opens.  So 
he's linked a AdWords account, 

05:28:23.248 --> 05:28:27.270
he's imported the conversions he
 cares about, and then finally 

05:28:27.271 --> 05:28:31.822
later on we'll look at an 
example of him actually using re

05:28:32.048 --> 05:28:36.906
-marketing campaigns for the 
audiences that he has access to.

05:28:40.445 --> 05:28:42.650
  All right.  But Mike also 
knows that he doesn't want to 

05:28:42.651 --> 05:28:45.736
put all of his eggs in one 
basket.  He thinks that AdWords 

05:28:45.737 --> 05:28:48.985
will be powerful, but he doesn't
 want to bet on that entirely.  

05:28:48.986 --> 05:28:52.018
So that's why he's also running 
campaigns with a couple of other

05:28:52.256 --> 05:28:55.295
 networks.  So within Firebase 
Analytics on the attribution 

05:28:55.296 --> 05:28:57.684
section, which is going to be 
the homepage basically for any 

05:28:57.685 --> 05:29:01.306
marketer using the product, he 
can go into the network settings

05:29:01.416 --> 05:29:05.317
 tab and access over 20 major ad
 networks to run campaigns with,

05:29:05.443 --> 05:29:08.275
 so they don't have to be Google
 networks.  These are other 

05:29:08.276 --> 05:29:11.314
networks that we as Firebase are
 partnering with.  He goes ahead

05:29:11.638 --> 05:29:16.417
 and sets up a campaign for 
advise.  Now, advise is a 

05:29:16.418 --> 05:29:19.921
hypothetical ad network, but he 
knows or he thinks it could be 

05:29:19.922 --> 05:29:22.498
successful, and there's a couple
 of different steps.  First of 

05:29:22.499 --> 05:29:27.982
all, he's going to generate a 
tracking URL that's available to

05:29:28.209 --> 05:29:33.330
 him within the Firebase URI and
 this tracking URL he'll be able

05:29:33.538 --> 05:29:36.022
 to send over to Advise and it 
will include a lot of the 

05:29:36.023 --> 05:29:39.728
metadata that we need to do 
click tracking with Advise.  If 

05:29:39.729 --> 05:29:42.560
you ever tried to track 
acquisition campaigns before, 

05:29:42.561 --> 05:29:46.902
especially if you tried to do it
 with Googlelytic, this was a   

05:29:47.001 --> 05:29:49.526
                      Google 
Analytics, this was a lot harder

05:29:49.838 --> 05:29:54.523
 to do.  Now we've embedded this
 into the product and have the 

05:29:54.524 --> 05:29:57.764
integrations with a bunch of 
different networks.  All you 

05:29:57.765 --> 05:30:01.731
have to do is copy and paste 
this URL, put it in your ad 

05:30:01.732 --> 05:30:04.444
netted work when you're running 
the campaigns and this will be 

05:30:04.445 --> 05:30:06.823
the destination, we'll do the 
rest of the processing from here

05:30:07.259 --> 05:30:12.728
.  This is for attribution 
tracking.  When he logs in 

05:30:12.729 --> 05:30:15.793
attribution section later, he 
would be able to see basically 

05:30:15.794 --> 05:30:18.931
all the advise installs that 
he's brought in.  But if he's 

05:30:18.932 --> 05:30:24.362
doing this, then he's not 
putting the Advise SDK in his 

05:30:24.363 --> 05:30:27.198
app which is of course one of 
the main reasons why he's using 

05:30:27.199 --> 05:30:29.808
Firebase Analytics.  But he 
knows that in order to best work

05:30:30.127 --> 05:30:34.281
 with Advise, it usually helps 
if he sends data back to  Advise

05:30:34.377 --> 05:30:37.212
, some of his conversion data so
 they can actually do 

05:30:37.213 --> 05:30:43.846
optimisation in their systems.  
So this is where post backs come

05:30:43.971 --> 05:30:46.558
 in, which is the ability for an
 advertise er to send their 

05:30:46.559 --> 05:30:50.315
conversion data back to the ad 
networks they work with.  This 

05:30:50.316 --> 05:30:53.559
is one of the main reasons you 
can replace all of these ad 

05:30:53.560 --> 05:30:57.430
network S  SDK's with a single 
Firebase SDK.

05:30:57.678 --> 05:31:00.487
In Firebase you're cleking all 
the data but with postbacks 

05:31:00.488 --> 05:31:02.849
you're sending it back to the 
network that you're working with

05:31:02.982 --> 05:31:06.238
.  Here in the postback section 
at the bottom he slectsz the 

05:31:06.239 --> 05:31:09.189
conversions -- selects the 
conversions he wants to send 

05:31:09.190 --> 05:31:12.358
back.  He's going on select all 
three conversions, first opened,

05:31:12.799 --> 05:31:15.842
 spend virtual currency and in-
app purchase, and then also he 

05:31:15.843 --> 05:31:20.521
hassed option to send just the 
con -- he heaps the option to 

05:31:20.522 --> 05:31:24.445
send just the conversions that 
Advise is responsible for 

05:31:24.446 --> 05:31:29.235
sending him or all the 
conversions with his app.  He's 

05:31:29.236 --> 05:31:32.839
feeling generous and will send 
all the conversions because he 

05:31:32.840 --> 05:31:35.992
knows Advise will do the best 
job optimize ing when they have 

05:31:35.993 --> 05:31:38.109
more information.

05:31:41.813 --> 05:31:44.441
  Lmplet another thing I   
                       Another 

05:31:44.442 --> 05:31:47.054
thing I didn't tell you when he 
was setting up the universal app

05:31:47.387 --> 05:31:50.421
 campaign is when he set up his 
app campaign he decided to 

05:31:50.422 --> 05:31:54.158
target the U.S. and Australia, 
and the reason why he did that 

05:31:54.159 --> 05:31:58.044
was because last week when Mike 
was on Twitter, he saw a couple 

05:31:58.045 --> 05:32:02.863
folks in Australia mentioning 
Transworld endless skate er.  

05:32:02.864 --> 05:32:05.369
When he clicked around, he was 
explore ing, it turns out 

05:32:05.370 --> 05:32:11.456
there's a pretty engaged gaming 
community in Australia that had 

05:32:11.457 --> 05:32:14.836
discovered Transworld endless 
skate er and was pretty excited 

05:32:14.837 --> 05:32:18.104
about T however, when he 
                         about 

05:32:18.105 --> 05:32:20.724
it.  However, when he looked at 
the performance of the app in 

05:32:20.725 --> 05:32:25.062
Australia, he noticed that only 
less than 10% of his users are 

05:32:25.063 --> 05:32:29.497
actually coming from Australia, 
so this basically led him to 

05:32:29.498 --> 05:32:33.833
believe that maybe there's this 
untapped market in Australia, 

05:32:33.834 --> 05:32:36.938
that maybe he should actually be
 running more campaigns there.  

05:32:36.939 --> 05:32:40.972
Hence, why he had targeted his 
universal app campaign at 

05:32:40.973 --> 05:32:45.079
Australia specifically.  To test
 this hypothesis, he goes into 

05:32:45.080 --> 05:32:48.886
the audience spheafngz and 
creates               

05:32:53.605 --> 05:32:56.670
        and creates an audience 
in Australia because efts to 

05:32:56.671 --> 05:32:59.592
analyze this segment of use ers 
and see if he was right that 

05:32:59.593 --> 05:33:02.311
this could be potentially a high
 value segment.  You can see 

05:33:02.312 --> 05:33:05.240
here the list of the audiences 
he has access to, he just 

05:33:05.241 --> 05:33:09.381
recently created this awses 
Australian users one and next 

05:33:09.382 --> 05:33:12.966
time he comes into the 
experiences, he can see if his 

05:33:12.967 --> 05:33:19.503
hypothesis was, in fact, correct
.  All right.  So at this point 

05:33:19.504 --> 05:33:22.328
I want to talk about moving the 
needle or moving the bottom line

05:33:22.552 --> 05:33:25.799
.  So up until this point, I've 
just been talking about more 

05:33:25.800 --> 05:33:28.293
installs, but something we 
haven't been talking about is 

05:33:28.294 --> 05:33:33.107
around monetization, and 
currently with Firebase 

05:33:33.108 --> 05:33:37.462
Analytics, we track revenue for 
you, for the in-app purchase 

05:33:37.463 --> 05:33:40.646
event and the e-commerce 
purchase event.  Threes the 

05:33:40.647 --> 05:33:43.708
transactional events we know are
 revenue based so that's what's 

05:33:43.709 --> 05:33:51.349
factoring into our ARPU or into 
our LTD metrics.  So Mike here 

05:33:51.350 --> 05:33:55.268
has two additional goals beyond 
the installs goals that I talked

05:33:55.393 --> 05:33:59.528
 about earlier.  We had that 
300,000 installs goals but he 

05:33:59.529 --> 05:34:02.712
also has an engagement metric 
that he's trying to drive of 

05:34:02.713 --> 05:34:07.185
moving the daily nch aengagement
             a       average 

05:34:07.186 --> 05:34:10.429
engagement up from 15 minimum  
       minutes to 20 minutes and

05:34:10.519 --> 05:34:13.933
 secondly has a monetization 
goal of moving his ARPU from 

05:34:13.934 --> 05:34:17.094
what was originally 90 cents to 
$3.  When he checks in after 

05:34:17.095 --> 05:34:20.148
he's been running these ad 
campaigns, he was able to move 

05:34:20.149 --> 05:34:24.543
it up to at least $1.50, so it's
 made some move am, but between

05:34:25.158 --> 05:34:29.760
                      movement, 
but between $1.50 and $3, he has

05:34:29.838 --> 05:34:34.281
 a lot of work to do.  So to 
actually dig into figuring out 

05:34:34.282 --> 05:34:37.157
how he would better move the 
needle and figure out how he 

05:34:37.158 --> 05:34:41.199
could drive up that ARPU, he 
clicks into the funnel section 

05:34:41.200 --> 05:34:43.928
of Firebase Analytics and in 
funnels you can create baiivelg 

05:34:43.929 --> 05:34:47.094
a visualization of -- basically 
a visualization of different 

05:34:47.095 --> 05:34:50.366
events in your app and how they 
relate to one another, see how 

05:34:50.367 --> 05:34:52.841
users are moving through 
different parts of your user 

05:34:52.842 --> 05:34:55.467
journey.  He creates a pretty 
simple funnel, this one is 

05:34:55.468 --> 05:34:58.179
called purchasers, it has only 
two steps.  The first step is 

05:34:58.180 --> 05:35:05.914
users who basically ever launch
ed the appear, first open.  

05:35:05.915 --> 05:35:09.247
Second step is users who went on
 to make an in app purchase.  He

05:35:09.248 --> 05:35:11.538
 creates this funnel and 
realizes his conversion rate is 

05:35:11.539 --> 05:35:15.521
a very measly .3%, so not very 
many people are actually place 

05:35:15.866 --> 05:35:19.012
ing purchases.  So definitely 
room for improvement, he's 

05:35:19.013 --> 05:35:21.301
trying to figure out basically 
how he could make a difference 

05:35:21.302 --> 05:35:27.350
on this front.  And to do this, 
he comes back to the attribution

05:35:27.772 --> 05:35:32.575
 tab, he's looking at all the 
relative campaign performance 

05:35:32.576 --> 05:35:35.820
next to each other and he sees 
that there's one network I'm 

05:35:35.821 --> 05:35:39.078
calling stomp network here that 
is performing much lower than 

05:35:39.079 --> 05:35:42.565
some of the other ones.  So it 
is bringing in a couple hundred 

05:35:42.566 --> 05:35:45.715
installs, so good volume, but 
when he looks at the lifetime 

05:35:45.716 --> 05:35:50.186
value metric for this particular
 network, he realizes it's at 

05:35:50.187 --> 05:35:52.187
zero.

05:35:54.431 --> 05:35:58.097
  So they're bringing in 
installs, but it's not really 

05:35:54.431 --> 05:35:55.738
the installs he's looking for.  
So he decides to go ahead and 

05:35:55.739 --> 05:35:59.251
reallocate his funds away from 
stomp network and invest them in

05:35:59.437 --> 05:36:06.235
 another place.  So that's one 
thing he did to actually 

05:36:06.236 --> 05:36:09.284
hopefully bump up that ARPU 
number.  We'll talk about a 

05:36:09.285 --> 05:36:12.534
couple more in a few minutes.  
Now, another thing he notices is

05:36:12.841 --> 05:36:16.874
 he had run that AdWords 
campaign, and over the last week

05:36:17.221 --> 05:36:21.010
 he has seen over 50% of the new
 users he's been acquiring have 

05:36:21.011 --> 05:36:24.401
been from Australia, so that's 
comforting, it looks like maybe,

05:36:24.609 --> 05:36:27.772
 in fact, that hypothesis was a 
reasonable hypothesis that 

05:36:27.773 --> 05:36:32.444
Australia could be an untapped 
market for him.  Then there's a 

05:36:32.445 --> 05:36:35.381
couple more ways that he's going
 to try to move that ARPU metric

05:36:35.926 --> 05:36:39.504
 up a little bit more.  The 
first is when he came into the 

05:36:39.505 --> 05:36:42.890
audience's section, he found 
there was an audience named 

05:36:42.891 --> 05:36:46.314
purchasers, so this is basically
 any of the users that were 

05:36:46.315 --> 05:36:50.000
purchasing in his app.  When he 
clicked in, he realized that 

05:36:50.001 --> 05:36:53.273
there was actually a pretty high
 distrib Ewing of his purchasers

05:36:56.633 --> 05:36:59.943
in Japan.  This is interesting 
because A, the app is not 

05:36:59.944 --> 05:37:02.441
localized in Japan, he's not 
trying to do anything to drive 

05:37:02.442 --> 05:37:05.580
users in Japan specifically, and
 then when he looks at just his 

05:37:05.581 --> 05:37:09.863
plain usage numbers, the 
distribution of users in Japan 

05:37:09.864 --> 05:37:12.155
wasn't particularly high, but 
for some reason it seems like 

05:37:12.156 --> 05:37:15.076
the users who are in Japan are 
more inclined to actual purchase

05:37:17.092 --> 05:37:21.427
.  So he decides to go ahead and
 run a campaign, an acquisition 

05:37:21.428 --> 05:37:25.466
campaign, with creative 
localized in Japanese, so even 

05:37:25.467 --> 05:37:28.721
though the app isn't localized 
in Japanese, he wants to see if 

05:37:28.722 --> 05:37:33.749
potentially localizing his 
creative in Japanese and his ad 

05:37:33.750 --> 05:37:36.162
campaigns might make a 
difference to actual bring in 

05:37:36.163 --> 05:37:38.163
more Japanese users. 

05:37:40.769 --> 05:37:42.010
 The second thing that he does 
is creates a re   reengagement 

05:37:42.011 --> 05:37:45.388
campaign using his purchaser's 
audience.

05:37:49.448 --> 05:37:53.181
  So in AdWords he setsz up a 
reengagement campaign and 

05:37:49.448 --> 05:37:52.989
targets those that he already 
knows have actually purchased in

05:37:53.668 --> 05:37:57.140
 the app.  So they're known 
purchasers, they're users he 

05:37:57.141 --> 05:37:59.980
wants to continue to foster a 
relationship with, so he sets up

05:38:00.175 --> 05:38:03.249
 a retargeting campaign for 
these users specifically.  So 

05:38:03.250 --> 05:38:08.798
those are two additional things 
beyond taking funds away from 

05:38:08.799 --> 05:38:11.955
stomp netted work that he's 
trying to do to optimize his 

05:38:11.956 --> 05:38:18.403
ARPU.  Now it's at the end of 
the month and I'm happy to 

05:38:18.404 --> 05:38:22.099
report that Mike has succeeded 
in many of his goals.  So first 

05:38:22.100 --> 05:38:26.251
of all, he was able to exceed 
the 300,000 installs goal that 

05:38:26.252 --> 05:38:29.661
we set out at the beginning of 
the session, he was also able to

05:38:30.183 --> 05:38:33.320
 move the needle on the daily 
average engagement metric, so it

05:38:33.651 --> 05:38:37.134
 had started off at 15 minutes 
and now we're at 23 minutes, and

05:38:37.364 --> 05:38:40.530
 then finally for the ARPU 
metric where we listed out those

05:38:41.055 --> 05:38:44.002
 couple of different things we 
did to try to move the needle on

05:38:44.219 --> 05:38:48.578
 that front, he was able to move
 it up to $3.30 when his initial

05:38:48.674 --> 05:38:54.120
 goal was $3.  So I'm happy to 
report that Mike and his team 

05:38:54.121 --> 05:38:57.707
will be able to celebrate with 
drinks tonight, much like I hope

05:38:57.708 --> 05:39:00.316
 that me and my team will be 
able to celebrate with drinks 

05:39:00.317 --> 05:39:03.761
tonight asp this week      
         after this week.  All 

05:39:03.762 --> 05:39:07.357
right.  We talked a lot about 
advertising and how Firebase 

05:39:07.358 --> 05:39:09.977
Analytics can be used for 
advertising, but I also want to 

05:39:09.978 --> 05:39:11.978
highlight a couple of

05:39:14.985 --> 05:39:18.918
 ways that it can be used in 
conjunction with some of your 

05:39:14.985 --> 05:39:17.162
organic tools since we know that
 as a marketer you're probably 

05:39:17.163 --> 05:39:20.101
not just running ad campaigns.  
That's just one of the tools 

05:39:20.102 --> 05:39:23.346
that you're use ng your toolbox,
 but you've got a couple other 

05:39:23.347 --> 05:39:29.354
channels as well.  So first I 
want to touch on Firebase 

05:39:29.355 --> 05:39:32.629
notifications.  Notifications 
are a great way to engage in a 

05:39:32.630 --> 05:39:36.651
conversation with your users 
directly, and on Firebase 

05:39:36.652 --> 05:39:40.853
Analytics they're supported on 
both iOS and Android and like 

05:39:40.854 --> 05:39:45.329
Firebase Analytics they're 
totally free and unlimited, so a

05:39:45.548 --> 05:39:47.571
 really powerful way tone gauge 
in a conversation with your 

05:39:47.572 --> 05:39:51.066
users      users -- to engage in
 a conversation with your users 

05:39:51.067 --> 05:39:53.561
directly for reengagement 
purposes.  There's two 

05:39:53.562 --> 05:39:59.007
integration purposes with 
analytics I want to highlight.  

05:39:59.008 --> 05:40:01.241
You can target the audience in 
Firebase Analytics within 

05:40:01.242 --> 05:40:05.424
notifications, so you can be 
serving them experiences that 

05:40:05.425 --> 05:40:10.559
make sense in that context.  
Then also you can use Firebase 

05:40:10.560 --> 05:40:14.385
Analytics to actually understand
 how your campaigns performed.  

05:40:14.386 --> 05:40:17.512
So how many notification opens 
did you get?  How many opens did

05:40:18.272 --> 05:40:21.313
 you actually drive with a 
particular push notification?  

05:40:21.314 --> 05:40:24.956
Or for users that came in on a 
particular campaign         

05:40:24.957 --> 05:40:27.537
campaign, what did their 
behavior look like once they 

05:40:27.538 --> 05:40:32.040
entered the app?  You can apply 
that as a filter throughout the 

05:40:32.041 --> 05:40:34.617
Firebase experience, throughout 
the Firebase Analytics 

05:40:34.618 --> 05:40:38.879
experience, to actually stee how
 users who came from a 

05:40:38.880 --> 05:40:41.579
particular notification then 
went on to navigate your app.  

05:40:41.580 --> 05:40:44.296
You can also measure it against 
your conversions, so how many in

05:40:44.621 --> 05:40:54.027
-app purchases did a particular 
campaign drive.  Second type of 

05:40:54.028 --> 05:40:57.891
organic channel I want to 
highlight is the app invites.  

05:40:57.892 --> 05:41:00.962
App invites are a great way to 
facilitate the relationship 

05:41:00.963 --> 05:41:03.777
between your users and their 
contacts         contacts, so 

05:41:03.778 --> 05:41:06.824
it's not just about you and your
 users and that relationship but

05:41:07.150 --> 05:41:10.618
 actually facilitate ing a 
bigger network.  So again, you 

05:41:10.619 --> 05:41:13.580
can use Firebase Analytics to 
identify groups that you would 

05:41:13.581 --> 05:41:18.897
want to actually notify, reach 
out to, target those users, and 

05:41:18.898 --> 05:41:25.229
then give them the opportunity 
to share the app using SMS or 

05:41:25.230 --> 05:41:29.108
e-mail to bring in their most 
frequently contacted users.  Of 

05:41:29.109 --> 05:41:31.629
course you can pair this with 
dynamic links, which I know 

05:41:31.630 --> 05:41:34.360
there's been a couple other 
sessions for, where you could 

05:41:34.361 --> 05:41:37.312
actually take users to a 
specific screen in the app once 

05:41:37.313 --> 05:41:45.806
they've clicked through on a 
download.  Then finally, we

05:41:45.807 --> 05:41:52.259
have app indexing.  So Google 
has indexed over 100 billion 

05:41:52.260 --> 05:41:57.394
deep links and 40% of all 
Android query ies return app 

05:41:57.395 --> 05:42:00.917
links.  So basically this is an 
incredible opportunity for 

05:42:00.918 --> 05:42:04.443
exposure for marketers to 
actually help users find content

05:42:04.985 --> 05:42:10.638
 within their apps.  So you can 
imagine initially when apps were

05:42:10.722 --> 05:42:14.660
 create ed, apps were very much 
walled gardens and in some cases

05:42:14.862 --> 05:42:17.735
 they still can be, but with 
features like app inteking, 

05:42:17.736 --> 05:42:20.334
we're really looking to help our
 users discover the content 

05:42:20.335 --> 05:42:25.035
within the app without actually 
having to navigate through the 

05:42:25.036 --> 05:42:29.258
full app to experience that.  
This is particularly powerful 

05:42:29.259 --> 05:42:32.215
when it comes to reengagement 
and trying to get your known 

05:42:32.216 --> 05:42:39.627
users back into the app.  
There's a couple of different 

05:42:39.628 --> 05:42:42.365
companies that I think have done
 this really well that I want to

05:42:44.079 --> 05:42:46.810
 highlight.  These are three 
different examples of apps and 

05:42:46.811 --> 05:42:49.189
these are all search engine 
results page.  So you can 

05:42:49.190 --> 05:42:52.468
imagine this is basically what a
 user would see, and here are 

05:42:52.469 --> 05:43:00.333
these blue dots, are aware the 
user would actually be using.  

05:43:00.334 --> 05:43:03.499
First we have the realtor.com 
app and the query in Google here

05:43:03.613 --> 05:43:08.298
 is I think homes for sale in 
Sunnyvale, so when I click on 

05:43:08.299 --> 05:43:13.072
that line item at the top here, 
I get taken inside the realtor

05:43:13.716 --> 05:43:18.629
.com app to a map focused on 
Sunnyvale, able to see all of 

05:43:18.630 --> 05:43:22.226
the homes for sable.  So pretty 
cool that I as a user had to do 

05:43:22.227 --> 05:43:24.941
no additional work beyond 
clicking, and I'm in the app, 

05:43:24.942 --> 05:43:28.317
it's a much more rich experience
 and it's exactly what I set out

05:43:28.423 --> 05:43:32.209
 to look for in the first place.
  All right.  Here in the middle

05:43:32.415 --> 05:43:35.789
 I have an example of me 
searching for the restaurant 

05:43:35.996 --> 05:43:40.142
Cook ri in San Francisco and 
when I click on the trip advisor

05:43:40.690 --> 05:43:45.135
 link I'm taken directly to that
 listing in the  Trip Advisor 

05:43:45.136 --> 05:43:48.296
app, I can see the reviews for 
that particular restaurant.  

05:43:48.297 --> 05:43:51.037
Then finally on the right I have
 the Expedia app, I'm looking at

05:43:51.120 --> 05:43:56.761
 hotels in Tokyo and similar to 
the homes in Sunnyv       

05:43:56.762 --> 05:44:01.080
Sunnyvale, I'm taken into the 
app and can see a map with all 

05:44:01.081 --> 05:44:04.802
of the available hotels.  So 
pretty powerful way to get our 

05:44:04.803 --> 05:44:09.276
users exactly what they want 
with a ton of context while 

05:44:09.277 --> 05:44:17.884
making them do very little work.
  So enough from the PM on 

05:44:17.885 --> 05:44:19.957
Firebase Analytics about why 
Firebase is so great.  I want to

05:44:20.392 --> 05:44:22.769
 let you hear from a couple of 
our app developers who have been

05:44:22.770 --> 05:44:25.471
 using some of the tools as well
.  So I think actually Joe is 

05:44:25.472 --> 05:44:29.088
here in the audience, he's from 
Spark People.  Joe is right over

05:44:29.183 --> 05:44:35.412
 here.  So Joe shared with us 
the ability to sync his AdWords 

05:44:35.413 --> 05:44:38.026
data to Firebase Analytics has 
simplified his daily management 

05:44:38.027 --> 05:44:41.194
and optimisation from hours to 
minutes.  So he can spend more 

05:44:41.195 --> 05:44:45.521
time building an app that his 
users will love.  I would love 

05:44:45.522 --> 05:44:49.964
to have hours back in my day, so
 I wish somebody would do this 

05:44:49.965 --> 05:44:53.774
for my job.  Pretty cool to see 
how building these types of 

05:44:53.775 --> 05:45:01.280
tools can make      basically 
create more time for the app 

05:45:01.281 --> 05:45:04.048
developers to do the thing they 
actually want to do rather than 

05:45:04.049 --> 05:45:06.355
the thing they need to do 
because tools are making them do

05:45:06.674 --> 05:45:10.566
 T we also had recruit, which is
 a Japanese company, using the 

05:45:10.567 --> 05:45:13.971
integration between AdWords and 
Firebase and one of the 

05:45:13.972 --> 05:45:16.567
marketing managers over on that 
front had e-mailed us that 

05:45:16.568 --> 05:45:21.629
AdWords and Firebase Analytics 
just work better together.

05:45:25.260 --> 05:45:28.114
  So we difficulty Firebase 
Analytics to be a great engine 

05:45:28.115 --> 05:45:32.923
for you guys as marketers, so 
you can develop and grow your 

05:45:32.924 --> 05:45:36.183
user base whether you consider 
yourself a developer or a 

05:45:36.184 --> 05:45:41.943
marketer.  As a quick recap of 
this conversation, I covered a 

05:45:41.944 --> 05:45:46.077
couple of different things.  
First I highlighted Firebase 

05:45:46.078 --> 05:45:48.155
Analytics in general, then we 
talked about how you could 

05:45:48.156 --> 05:45:52.213
actually use it to track your 
tition or paid channels, and 

05:45:52.214 --> 05:45:55.718
then -- your advertising or paid
 channels, and finally we 

05:45:55.719 --> 05:45:57.789
wrapped up by talking about some
 of the organic or non

05:45:58.010 --> 05:46:00.290
advertising channels that you 
could use Firebase Analytics 

05:46:00.291 --> 05:46:03.555
with.  So as we've been crafting
 Firebase Analytics, we've been 

05:46:03.556 --> 05:46:06.268
very deliberate about building a
 tool that would work well not 

05:46:06.269 --> 05:46:09.639
just for developers but also for
 marketers, so we're really 

05:46:09.640 --> 05:46:12.585
excited to see what you guys 
will do with this.  Thank you   

05:46:13.341 --> 05:46:15.341
 you.
          (applause)

05:46:21.859 --> 05:46:23.282
.
          So I have about five 

05:46:23.283 --> 05:46:26.537
minutes in case anybody wants to
 ask questions.  I think you can

05:46:26.538 --> 05:46:28.918
 use the mic if you want to come
 and ask a question.

05:46:33.255 --> 05:46:39.715
          &gt;&gt; Hello.  We used the
 Firebase SDK about two months 

05:46:39.716 --> 05:46:45.489
ago and launched one month ago. 
 After I connected, I found a 

05:46:45.490 --> 05:46:50.640
problem that it only connects 
with the Android account under 

05:46:50.641 --> 05:46:56.084
my Gmail.  So it's one to one, 
not one to many, because in 

05:46:56.085 --> 05:46:59.125
China, for example, developers, 
we have a lot of agencies to run

05:46:59.578 --> 05:47:04.993
 campaigns in different accounts
, so what I want is one account,

05:47:05.422 --> 05:47:13.136
 one Firebase account to reflect
 to many, many accounts but I 

05:47:13.137 --> 05:47:15.645
don't want to give permission to
 Firebase.  So that's my 

05:47:15.646 --> 05:47:21.292
question.  I don't know when we 
are part of this venture.

05:47:21.293 --> 05:47:22.070
          &gt;&gt; FONTAINE FOXWORTH: 
 Great question.  I have a 

05:47:22.071 --> 05:47:25.914
couple answers to it.  First, 
you should be able to link a 

05:47:25.915 --> 05:47:28.625
Firebase account to multiple 
AdWords account.  It is not one 

05:47:28.626 --> 05:47:30.801
to one.  It is one to many.  And
 you should be able to thring on

05:47:31.021 --> 05:47:33.021
 a bunch.  We also have

05:56:22.971 --> 05:56:29.481
    (Please stand by for the 
Google I/O session A

05:56:29.482 --> 05:56:31.482
 Window into Transitions.)

05:58:43.929 --> 05:58:51.156
    (Standing by for the Google 
I/O session A Window

05:58:51.157 --> 05:58:53.157
 into Transitions.)

06:02:38.250 --> 06:02:42.061
    (Please stand by.  The 
Google I/O session A Window

06:02:42.062 --> 06:02:44.062
 into Transitions will begin 
shortly.)

06:08:20.558 --> 06:08:26.175
    (Please stand by.  The 
session is about to begin.)

06:08:48.680 --> 06:08:50.679
(Applause.)
    &gt;&gt; Hello, everyone.  Thank 

06:08:50.680 --> 06:08:53.180
you very much for
 coming to this talk, A Window 

06:08:53.181 --> 06:08:55.989
into Transitions.  It's
 one of the last talks of I/O or

06:08:56.188 --> 06:08:59.388
 the ultimate talk. 
 My name is Nick Butcher.  I'm 

06:08:59.389 --> 06:09:04.581
joined by Ben Weiss and
 George Mount.  We are on the 

06:09:04.582 --> 06:09:10.361
Android engineering team    
 team.  Okay?

06:09:10.362 --> 06:09:11.686
    (Applause.)
    &gt;&gt; NICK BUTCHER:  We are 

06:09:11.687 --> 06:09:16.690
here today to talk about
 the Android Transition API.  We

06:09:16.691 --> 06:09:19.494
 have a lot to cover. 
 We will jump into the topic and

06:09:19.895 --> 06:09:22.979
 get going.  First up,
 Transitions, what are they?  

06:09:22.980 --> 06:09:27.590
The basic idea of the
 Transition API is to help you 

06:09:27.591 --> 06:09:30.587
whenever there is a
 scene where it is a view 

06:09:30.588 --> 06:09:33.792
hierarchy on screen.  The
 idea is that when a scene 

06:09:33.793 --> 06:09:36.482
changes, my animation
 doesn't work properly, iron

06:09:36.683 --> 06:09:41.206
ically, and we perform a
 Transition, Transition being 

06:09:41.207 --> 06:09:44.379
look at what has changed
 and an mate that difference.

06:09:44.380 --> 06:09:47.877
    So the API for the 
Transition is pretty simple. 

06:09:48.093 --> 06:09:52.079
 It is exactly this thing.  What
 has changed?  Firstly

06:09:52.080 --> 06:09:54.286
 there will be two call backs 
into your Transition

06:09:54.287 --> 06:10:00.694
 which is capture stop values 
and capture end values. 

06:10:00.695 --> 06:10:04.506
 This is a value object.  This 
object has the view. 

06:10:04.507 --> 06:10:06.284
 You can look at the view and 
capture properties about

06:10:06.285 --> 06:10:09.698
 it and save it into the map.  
And I do that in a

06:10:09.699 --> 06:10:12.765
 start state and end state and 
then we will call the

06:10:12.766 --> 06:10:16.878
 create an mate er method giving
 those two states and

06:10:16.879 --> 06:10:20.285
 you create an mate ors to an 
mate the change between

06:10:20.286 --> 06:10:26.305
 the two states.  So that's the 
very basic API.  There     

06:10:26.306 --> 06:10:30.490
 There's a bunch of trgs which 
come in the Android

06:10:30.491 --> 06:10:34.382
 framework which you can and 
should use.  You can see

06:10:34.383 --> 06:10:38.283
 what the primitives you can 
build with are.  The

06:10:38.284 --> 06:10:40.881
 change balance Transition is 
the first.  This will

06:10:40.882 --> 06:10:43.482
 help you out whenever you are 
moving or resizing a

06:10:43.483 --> 06:10:49.298
 view.  It will an    an mate 
the first and cop properties. 

06:10:50.387 --> 06:10:53.987
 Crucially this helps suppress 
layout.  You don't want

06:10:53.988 --> 06:10:58.814
 to call request layout parole. 
 Change balance will

06:10:58.815 --> 06:11:02.490
 do this in a performing way.  
Secondly, fade

06:11:02.491 --> 06:11:06.288
 transition, which helps fades 
in and out.  Any time

06:11:06.289 --> 06:11:10.499
 an object visibility changed or
 gets added or removed

06:11:10.500 --> 06:11:13.892
 from the hierarchy you can do a
 fade.

06:11:13.893 --> 06:11:16.600
    There is an auto transition 
which puts some of

06:11:16.889 --> 06:11:19.399
 those things together.  When a 
hierarchy changes

06:11:24.030 --> 06:11:26.430
 you
 fade newly arriving things in, 

06:11:24.030 --> 06:11:26.030
move and resize items
 in a changing position and fade

06:11:26.293 --> 06:11:28.792
 out anything that is
 disappearing.

06:11:29.097 --> 06:11:32.697
    In API 21, lollipop, 
Transition API got a bunch of

06:11:32.698 --> 06:11:36.598
 new and exciting additions.  
First was the slide.  So

06:11:36.599 --> 06:11:40.289
 you can, any time anything is 
entering or exiting a

06:11:40.290 --> 06:11:43.389
 scene you can do it from the 
edge in a staggered

06:11:43.390 --> 06:11:46.384
 manner.  There are a bunch of 
transforms whenever you

06:11:46.385 --> 06:11:49.189
 are changing the bounds.  You 
can click the bounds of

06:11:49.506 --> 06:11:52.298
 something changing size or with
 doing a change

06:11:52.299 --> 06:11:55.091
 transform which will affect the
 rotation and scale of

06:11:55.092 --> 06:12:00.478
 a view or doing an image, say 
you're changing from

06:12:00.479 --> 06:12:03.294
 one scale type to another, this
 changes the matrix of

06:12:03.295 --> 06:12:06.999
 the view between those scales.
    The transitions object 

06:12:07.000 --> 06:12:11.305
itself got upgrades in 21. 
 Firstly it got this thing 

06:12:11.306 --> 06:12:13.882
called path motion which
 allows you to control the 

06:12:13.883 --> 06:12:16.799
movement along a path.  So
 here, for example, we are look

06:12:17.083 --> 06:12:20.017
ing at a transition
 which is a shared element.  We 

06:12:20.018 --> 06:12:22.292
can control the path
 that it follows when moving 

06:12:22.293 --> 06:12:24.819
from one state to another       
 another.  Don't do this 

06:12:24.820 --> 06:12:28.314
horrible loopy thing.  This
 is exaggerated for effect.  

06:12:28.315 --> 06:12:31.014
Please don't do that.
    The class you'll probably 

06:12:31.015 --> 06:12:34.404
want to look at when
 doing this control the path is 

06:12:34.405 --> 06:12:39.313
called arc motion and
 pattern park motion and we'll 

06:12:39.314 --> 06:12:42.899
get to those later.
    Now we have the controlled 

06:12:42.900 --> 06:12:46.216
propagation and Epi
 center.  What the properties 

06:12:46.217 --> 06:12:50.504
let you do is core graph
 the way things will move.  In 

06:12:50.505 --> 06:12:53.793
this example when I
 click on an item, see how the 

06:12:53.794 --> 06:12:56.718
views around the grade
 move together.  This is called 

06:12:56.719 --> 06:13:00.810
explode transition. 
 Basically by passing in the ep 

06:13:00.811 --> 06:13:05.210
center, you can set
 the start glades on the other 

06:13:05.211 --> 06:13:07.608
views in order to have
 a coordinated movement.  These 

06:13:07.609 --> 06:13:10.715
are the APIs to look
 for if you try to build this 

06:13:10.716 --> 06:13:13.013
kind of transition
 yourself.

06:13:13.014 --> 06:13:16.090
    So that's Transitions.  It 
turns out that quite

06:13:16.091 --> 06:13:20.103
 frequently when changing scenes
, once you perform an

06:13:20.104 --> 06:13:23.794
 animation on those changes, it 
is activity boundary. 

06:13:23.795 --> 06:13:28.311
 Going from one to another.  API
 21 added new APIs to

06:13:28.312 --> 06:13:31.400
 do this kind of thing which we 
call Windows

06:13:31.401 --> 06:13:34.295
 Transitions.  There are two 
main types.  First is a

06:13:34.296 --> 06:13:38.109
 content Transition.  That's 
when a window exits or a

06:13:38.907 --> 06:13:42.288
 new window enters, you have an 
opportunity to run on

06:13:42.289 --> 06:13:45.089
 the content coming in.  We go 
from the grid and

06:13:45.090 --> 06:13:48.496
 launch into a detail screen, we
 enter animation on

06:13:48.497 --> 06:13:51.586
 the views coming into the 
details where they are

06:13:51.587 --> 06:13:55.802
 sliding in from the bottom.  
Second time is a shared

06:13:55.803 --> 06:13:59.297
 element Transition.  So this is
 where -- oops, went

06:13:59.298 --> 06:14:04.725
 too far.  Go back.
    There.  Okay.  Shared 

06:14:04.726 --> 06:14:07.615
element is where when you
 tap on one view, the element 

06:14:07.616 --> 06:14:11.005
transitions smoothly
 from one activity into the 

06:14:11.006 --> 06:14:14.711
second activity.  As you
 had a sneak peek those two 

06:14:14.712 --> 06:14:17.421
things aren't mutually
 exclusive.  You can, of course,

06:14:17.837 --> 06:14:20.527
 run a shared element
 and content and transition as 

06:14:20.528 --> 06:14:23.426
well.  Here we are
 sharing a view and also sliding

06:14:23.720 --> 06:14:26.404
 in the unshared
 content as it were.

06:14:26.405 --> 06:14:30.199
    Now I know on shared element
 views, shared element

06:14:30.200 --> 06:14:33.104
 Transitions, you can't actually
 share a view between

06:14:33.105 --> 06:14:37.204
 two activity ies.  You can't 
pick up one view from one

06:14:37.205 --> 06:14:40.615
 activity and surplant it into 
another one.  As many

06:14:40.616 --> 06:14:44.105
 APIs do, they fake it, allow 
you to give the

06:14:44.106 --> 06:14:47.115
 appearance of what is happening
 while maintaining

06:14:47.116 --> 06:14:49.518
 either one activity or another.
  The way we do it,

06:14:49.519 --> 06:14:52.609
 when you click on an image in 
the source activity we

06:14:52.610 --> 06:14:56.521
 record some information about 
that view.  This one,

06:14:56.522 --> 06:14:59.403
 there's position, bounds, a few
 other things.  We

06:14:59.404 --> 06:15:01.610
 pass that information over to 
the destination

06:15:01.611 --> 06:15:05.208
 activity.  So we then launch 
the destination activity

06:15:05.209 --> 06:15:09.510
 but don't show anything just 
yet.  Then we lay out a

06:15:09.511 --> 06:15:13.421
 and measure all the views in 
the destination activity

06:15:13.614 --> 06:15:16.417
 and lay out where that shared 
activity wants to end

06:15:16.418 --> 06:15:19.132
 up.
    Then we apply ied transforms

06:15:19.335 --> 06:15:22.818
 to the destination view
 to put it back into the 

06:15:22.819 --> 06:15:25.547
position it was in in the
 source view and then fade out 

06:15:25.548 --> 06:15:28.933
any unshared content. 
 So at this point, destination 

06:15:28.934 --> 06:15:32.434
activity is launched. 
 It is an activity on top, but 

06:15:32.435 --> 06:15:34.816
it appears as if you
 are still in the source 

06:15:34.817 --> 06:15:37.716
activity because it's being
 transformed.

06:15:38.027 --> 06:15:41.510
    Then we simply run animation
s to move the shared

06:15:41.511 --> 06:15:45.618
 element back into place and 
fade back up any unshared

06:15:45.619 --> 06:15:49.326
 content.  It looks like you sh
ared one activity to

06:15:49.327 --> 06:15:52.725
 another.  But this is important
 to remember,

06:15:52.726 --> 06:15:56.242
 everything happens in the 
destination activity.  You

06:15:56.243 --> 06:15:58.727
 are never changing the view in 
the source activity

06:15:58.728 --> 06:16:02.550
 other than hiding it.
    So shared element and 

06:16:02.551 --> 06:16:05.943
content Transitions can run
 a number of points.  So there's

06:16:06.226 --> 06:16:09.080
 a kind of lifecycle
 to think about here.  Go from

06:16:12.438 --> 06:16:12.865
 one screen to another,
 call start actively you have an

06:16:12.866 --> 06:16:15.858
 opportunity to run
 Transitions on the exiting 

06:16:15.859 --> 06:16:19.546
source activity and the
 entering destination activity. 

06:16:19.859 --> 06:16:25.155
 On the way back you
 can animate on the reenter.  

06:16:25.156 --> 06:16:28.762
These are the four
 points you can look at.  They 

06:16:28.763 --> 06:16:30.763
come in payers.  If

06:16:32.856 --> 06:16:34.989
 you
 set an exit Transition, do 

06:16:32.856 --> 06:16:34.856
something with the views
 on the way out, by default if 

06:16:34.857 --> 06:16:38.369
you don't specify a
 different reenter, it will run 

06:16:38.370 --> 06:16:42.272
the same Transition in
 reverse.  So bear in mind that

06:16:42.451 --> 06:16:44.462
's what is going on
 there.

06:16:44.463 --> 06:16:50.364
    That in a nutshell is what 
the Transition API is

06:16:50.365 --> 06:16:51.947
 trying to do.  To give you an 
example how to do it,

06:16:51.948 --> 06:16:54.459
 Ben will walk through an 
application that will

06:16:54.460 --> 06:16:57.356
 implement these APIs.
    &gt;&gt; BENJAMIN WEISS:  Thank 

06:16:57.357 --> 06:17:00.365
you, Nick.  We had a
 couple of Transitions going on 

06:17:00.366 --> 06:17:04.276
there.  And let's see
 what we are going to do now.  

06:17:04.277 --> 06:17:07.559
We will have an
 application having a mass 

06:17:07.560 --> 06:17:11.273
activity and a detail
 activity.  Once you tap on one 

06:17:11.274 --> 06:17:14.062
of the items it will
 move the image and promote a 

06:17:14.063 --> 06:17:17.639
couple other Transitions
 the let's get started.

06:17:17.640 --> 06:17:22.259
    We have the app.  Before we 
actually got started

06:17:22.260 --> 06:17:25.359
 with the Transitions, this is 
what system gives us. 

06:17:25.771 --> 06:17:29.040
 We tap upon the views.  And the
 detail activity

06:17:29.041 --> 06:17:33.638
 Slides and fades in.  Pretty 
cool.  But in order to

06:17:33.639 --> 06:17:36.355
 produce, use the Transitions 
API what we want to do

06:17:36.356 --> 06:17:39.748
 is first enable the window 
activity Transitions

06:17:39.749 --> 06:17:44.653
 within our app theme or simply 
from theme material or

06:17:44.654 --> 06:17:49.552
 as many of you use it, a.m. 
come Pat is also inherits

06:17:49.553 --> 06:17:53.560
 from theme material on lollipop
 and +

06:17:57.767 --> 06:17:59.900
.
    Once we got this we can go 

06:17:57.767 --> 06:17:58.175
to the next step and do
 the shared element Transition 

06:17:58.176 --> 06:18:02.053
for the image view.  In
 order to do this we set a 

06:18:02.054 --> 06:18:06.170
Transition name on both the
 starting and the target view 

06:18:06.171 --> 06:18:09.190
and remember those
 should be at least unique for 

06:18:09.191 --> 06:18:13.264
the view hierarchy ies in
 order to avoid lishes we will 

06:18:13.265 --> 06:18:17.976
talk about later on.
    After we have taken a look 

06:18:17.977 --> 06:18:21.066
into this we need to
 tell the system how to actually

06:18:21.175 --> 06:18:23.784
 deal with the shared
 element.  As we just learned 

06:18:23.785 --> 06:18:25.981
sharing the element is
 something that happens within 

06:18:25.982 --> 06:18:29.067
the receiving or detail
 activity.  So we have to tell 

06:18:29.068 --> 06:18:32.599
the system that at the
 point where we actually start 

06:18:32.600 --> 06:18:37.756
the new activity that a
 couple of things have changed. 

06:18:37.992 --> 06:18:41.676
 We make the scene
 animation pass the image that 

06:18:41.677 --> 06:18:44.366
we want to share as
 well as the identify ier for 

06:18:44.367 --> 06:18:48.070
the target view, the name
 that we set on there.  Cool, 

06:18:48.071 --> 06:18:50.560
straightforward and
 awesome to use.

06:18:50.773 --> 06:18:54.767
    After that, we add the 
exiting Transition for the

06:18:54.768 --> 06:18:57.557
 grid which is the explode that 
we just saw which is

06:18:57.558 --> 06:19:00.858
 probably one of the things that
 you should think

06:19:00.859 --> 06:19:04.266
 about if you actually want to 
do it.  It can confuse

06:19:04.267 --> 06:19:07.573
 users.  It can be very handy as
 well on the other

06:19:07.574 --> 06:19:11.363
 hand.  Don't throw explodes in 
everywhere because it

06:19:11.364 --> 06:19:14.262
 can be not helpful on the other
 hand as well.

06:19:14.263 --> 06:19:18.178
    So to do this we create a 
Transition in Transition  

06:19:19.680 --> 06:19:23.670
exit.  We just say
 explode and that's it from the 

06:19:23.671 --> 06:19:25.067
declaration of the
 transaction.

06:19:25.068 --> 06:19:28.948
    Pretty straightforward again
.  We then set that in  

06:19:28.949 --> 06:19:32.248
 in, we then have to declare the
 window exit

06:19:32.571 --> 06:19:36.468
 Transition within our home 
activity ies theme.  And as

06:19:36.469 --> 06:19:40.157
 we just learned this will be 
replayed, reversed on

06:19:40.158 --> 06:19:45.162
 the way back in when the 
activity, other entry

06:19:45.163 --> 06:19:48.260
 position when we press back 
from the detail activity.

06:19:48.261 --> 06:19:51.177
    Let's go and take the next 
step for the detail

06:19:51.178 --> 06:19:53.850
 activity.  We also want the 
content that is not

06:19:53.851 --> 06:19:57.859
 shared to be, to slide in from 
the bottom.  You can't

06:19:57.860 --> 06:20:02.256
 just create the transitions 
from XML.  You can do

06:20:02.257 --> 06:20:05.377
 this directly within code.  
Let's take a look how you

06:20:05.378 --> 06:20:08.786
 can do that.  We just created a
 new slide Transition. 

06:20:08.787 --> 06:20:11.267
 We want to have the contents 
slide in from the bottom      

06:20:11.268 --> 06:20:14.459
 bottom.  We want to have it 
enter full smeed and ease

06:20:14.460 --> 06:20:18.156
 up until it reaches the resting
 point.  To do this we

06:20:18.157 --> 06:20:22.055
 inflate an ininterpreter plate 
er to do that.  On the

06:20:22.056 --> 06:20:25.465
 window parse activity we setted
 the enter transition

06:20:25.466 --> 06:20:28.384
 to be the Transition we just 
created.  This can be a

06:20:28.385 --> 06:20:32.166
 lot more complex if you want to
, but we got started

06:20:32.167 --> 06:20:35.049
 with one Transition seeing if 
you have things in

06:20:35.050 --> 06:20:38.380
 place and it works pretty well.
    Since we are in the motion 

06:20:38.381 --> 06:20:41.781
of getting things feel
 more natural by having them 

06:20:41.782 --> 06:20:46.385
enter quickly, let's took
 a look at what Nick mentioned, 

06:20:46.386 --> 06:20:49.476
curve motion.  Usually
 you have one linear motion of 

06:20:49.477 --> 06:20:52.466
the shared element view    
 view, but we want to have this 

06:20:52.467 --> 06:20:55.779
motion so it feels
 while the -- while the view is 

06:20:55.780 --> 06:20:58.370
growing, it should
 also have a curved path that it

06:20:58.489 --> 06:21:00.271
 follows to make it
 more natural.

06:21:00.272 --> 06:21:03.172
    Let's take a look at one of 
the Transitions that

06:21:03.173 --> 06:21:08.059
 we used there.  We have a 
Transition set which is a

06:21:08.060 --> 06:21:09.971
 collection of different 
Transitions that will be run

06:21:09.972 --> 06:21:13.458
 at a point in the animation.  
And we basically just

06:21:13.459 --> 06:21:16.753
 have to do this on the set 
bounds.  We say we want to

06:21:16.754 --> 06:21:20.068
 add arc motion to that.  Pretty
 straightforward again     

06:21:20.069 --> 06:21:21.860
 again.
    And it helps to get exactly 

06:21:21.861 --> 06:21:25.494
this done.  You can
 also set maximum/minimum angle 

06:21:25.495 --> 06:21:27.967
for that and make sure
 that the user actually sees 

06:21:27.968 --> 06:21:32.068
what is going on.  You
 shouldn't exaggerate like Nick 

06:21:32.069 --> 06:21:36.105
earlier said.  But for
 development purposes this can 

06:21:36.106 --> 06:21:40.702
be pretty handy.
    So those are all build in 

06:21:40.703 --> 06:21:44.185
Transitions.  Let's look
 at what we can do to get into 

06:21:44.186 --> 06:21:46.599
custom Transitions.  We
 want to share the detailed text

06:21:46.780 --> 06:21:50.096
.  The title, the
 author of the picture.  We did 

06:21:50.097 --> 06:21:53.390
a couple of things
 there other than just growing, 

06:21:53.391 --> 06:21:58.293
just sharing that.  We
 also grow it and to do this 

06:21:58.294 --> 06:22:00.697
from the declaration
 point of view, we just go back 

06:22:00.698 --> 06:22:04.684
to the Transition that
 we already had, add a target to

06:22:04.887 --> 06:22:08.583
 both of the
 Transition to have the initial 

06:22:08.584 --> 06:22:11.493
Transition set only
 target the photo that we 

06:22:11.494 --> 06:22:17.189
already shared.  Then we go
 and add a second Transition set

06:22:17.605 --> 06:22:20.892
 targeting the author
 that we want to share as women 

06:22:20.893 --> 06:22:25.071
and add a text resize
 Transition to that which is a 

06:22:25.072 --> 06:22:29.173
custom transition that
 George will cover in a minute. 

06:22:29.692 --> 06:22:31.702
 And then, of course,
 we need to tell the system what

06:22:31.903 --> 06:22:34.388
 is going on and that
 things have changed.  So far we

06:22:34.595 --> 06:22:37.308
 shared the image and
 the target directly.  If you 

06:22:37.309 --> 06:22:40.409
only have one shared
 element, this is a good way to 

06:22:40.410 --> 06:22:42.988
actually get started
 with that, to share this 

06:22:42.989 --> 06:22:45.970
information with the detail
 activity.

06:22:45.971 --> 06:22:48.988
    If you have multiple shared 
elements, though, you

06:22:48.989 --> 06:22:53.594
 want to have pairs which can be
 traded in -- treated

06:22:53.595 --> 06:22:56.183
 in separate ways.  You create a
 pair which contains

06:22:56.184 --> 06:22:58.664
 the same information.  It 
contains the detail, the

06:22:58.665 --> 06:23:03.180
 starting view as well as the 
target transition name. 

06:23:03.181 --> 06:23:07.380
 And then instead of having this
 on here, you just

06:23:07.381 --> 06:23:11.275
 pass those two pairs in here 
and start the activity

06:23:11.276 --> 06:23:15.903
 as is.
    And after all this is done, 

06:23:15.904 --> 06:23:19.111
this is the nice
 Transitions that you get.  And 

06:23:19.112 --> 06:23:25.286
with that, let's take
 a look behind the curtain.

06:23:25.287 --> 06:23:27.579
    &gt;&gt; GEORGE MOUNT:  All right.
  How is that fire

06:23:27.580 --> 06:23:31.485
 host, everyone?  Good?  Let's 
drink some of more!  

06:23:31.486 --> 06:23:34.585
 Let's talk about making your 
own Transitions.  We saw

06:23:34.586 --> 06:23:38.083
 the built in ones, change bound
s, change, transform,

06:23:38.084 --> 06:23:41.088
 those ones.  Those are great 
basic Transitions.  If

06:23:41.089 --> 06:23:43.996
 you want to change the text 
size, for example, it is

06:23:43.997 --> 06:23:46.579
 not built in.  We have to do 
that ourselves.  Let's

06:23:46.580 --> 06:23:50.113
 see how we go about making this
.  Make resize text

06:23:50.114 --> 06:23:52.891
 Transition.
    All right.  So we need to 

06:23:52.892 --> 06:23:55.386
capture some data, right     
 right?  We need, of course, the

06:23:55.709 --> 06:23:58.786
 font size.  That's
 obvious, right, capture the 

06:23:58.787 --> 06:24:01.905
font size at the begin     
 beginning, the end, and we also

06:24:02.117 --> 06:24:05.009
 need other data.
    But when we return the data 

06:24:05.010 --> 06:24:08.309
set that we are going
 to track in our Transition, we 

06:24:08.310 --> 06:24:12.090
only want, only care
 about the font size.  If other 

06:24:12.091 --> 06:24:14.299
stuff changes, the
 bounds changes only on your 

06:24:14.300 --> 06:24:16.719
text view we are not
 going to do any Transition on 

06:24:16.720 --> 06:24:19.622
that.  We are only
 Transitioning when the text 

06:24:19.623 --> 06:24:22.189
size changes.  We ignore
 the rest of the data.  We still

06:24:22.407 --> 06:24:25.208
 want to capture it. 
 That's why we have those pieces

06:24:25.209 --> 06:24:27.306
 of information, that
 tag that we are going to use in

06:24:27.619 --> 06:24:30.092
 the Transition values      
 values.  But we don't want to 

06:24:30.093 --> 06:24:33.513
keep that for the
 Transition API, the Transition 

06:24:33.514 --> 06:24:37.109
framework.
    So when we capture our start

06:24:37.288 --> 06:24:39.612
 values and end values      
 values, remember from what Nick

06:24:39.819 --> 06:24:42.193
 said, we want to
 capture them.  This is the same

06:24:42.399 --> 06:24:45.005
 thing in both the
 start and the end.  We have a 

06:24:45.006 --> 06:24:49.599
common function to do. 
 And first thing we have to do, 

06:24:49.600 --> 06:24:52.408
we can throw away
 anything that is not in text 

06:24:52.409 --> 06:24:56.027
view, right?  We are
 only editing text views.  

06:24:56.028 --> 06:24:58.716
Anything else we ignore. 
 Of course we want to capture 

06:24:58.717 --> 06:25:01.894
the font size, text size
 here and some other data.  I 

06:25:01.895 --> 06:25:04.197
stuck it all in its own
 class and hide that information

06:25:04.293 --> 06:25:07.597
, but it's basic
 things like the bounds of the 

06:25:07.598 --> 06:25:10.904
text view.  We need
 that for the animation.  When 

06:25:10.905 --> 06:25:16.701
you animate text, what
 do we do?  An mate      animate

06:25:17.621 --> 06:25:21.315
 the font says?  Every font size
 between the start and the end 

06:25:21.316 --> 06:25:24.894
is going to be used and
 created in our font cache.  We 

06:25:24.895 --> 06:25:29.194
will have font size
 26.281.  And, you know, we are 

06:25:29.195 --> 06:25:32.103
never going to use
 that again.  It's going to 

06:25:32.104 --> 06:25:35.601
thrash our font cache.  We
 don't want to do that.

06:25:36.109 --> 06:25:39.393
    We'll capture a bitmap at 
the   front and end and

06:25:39.394 --> 06:25:43.191
 then animate.  If we animate 
just the start, it looks

06:25:43.192 --> 06:25:46.009
 terrible.  You see that thing 
blown up from the begin     

06:25:46.010 --> 06:25:48.498
 beginning.  And also if you 
animate just from the

06:25:48.904 --> 06:25:53.325
 large size down you end up with
 a little bit of churn     

06:25:53.326 --> 06:25:56.008
 churning error in the final 
text view.  You may not

06:25:56.009 --> 06:25:59.201
 see it on this slide but you 
definitely see it when

06:25:59.202 --> 06:26:01.901
 you look at the phone and you 
don't want your users

06:26:01.902 --> 06:26:05.092
 to see that effect.  You want 
to see a perfect

06:26:05.093 --> 06:26:07.492
 transition.  Instead of this 
what we are going to do,

06:26:07.493 --> 06:26:11.619
 we are going to animate piece-
wise.  We an mate a

06:26:11.620 --> 06:26:13.900
 little bit from the start.  You
 don't really see that

06:26:13.901 --> 06:26:17.413
 blown up image, right?  Then we
 are going to swap it

06:26:17.611 --> 06:26:21.513
 out for the final image, scale 
ed down, an animate the

06:26:21.514 --> 06:26:24.035
 rest of the way.
    Because it's done during the

06:26:24.506 --> 06:26:27.608
 motion, nobody will
 see that animation, that change

06:26:27.825 --> 06:26:30.203
, that swap there in
 the middle.

06:26:30.204 --> 06:26:35.110
    Okay?  Let's see how we do 
that.  Clear the

06:26:35.111 --> 06:26:39.907
 animateor.  We use our start 
values and end values,

06:26:39.908 --> 06:26:43.819
 but here we are checking the 
start values for null. 

06:26:43.820 --> 06:26:46.629
 What does null mean?  It means 
the view didn't exist. 

06:26:46.630 --> 06:26:50.011
 If the view didn't exist in the
 beginning or the en, we

06:26:50.012 --> 06:26:53.489
 don't want to animate size.  
That's for fade, right? 

06:26:53.490 --> 06:26:58.226
 The other transitions.
    Okay?  Next thing we have to

06:26:58.332 --> 06:27:01.614
 do, of course, is
 capture the start bitmap.  We 

06:27:01.615 --> 06:27:04.824
capture that bitmap. 
 That's where the extra data is 

06:27:04.825 --> 06:27:08.218
useful.  We have to
 capture the end state bitmap 

06:27:08.219 --> 06:27:12.416
and of course we have to
 say don't text view, don't draw

06:27:12.936 --> 06:27:15.739
 yourself.  Set
 yourself to transparent.  All 

06:27:15.740 --> 06:27:18.421
that text stuff, make
 it transapparent.  We don't 

06:27:18.422 --> 06:27:21.324
want you to draw it
 because what we are going to do

06:27:21.738 --> 06:27:25.014
 is creat a drawable
 with the bitmaps we capture ed 

06:27:25.015 --> 06:27:27.420
that is going to do the
 swapping for us.

06:27:27.712 --> 06:27:30.700
    So we need to an mate some t
hings on the drawable. 

06:27:30.944 --> 06:27:33.120
 One of them is the font size.  
We are going to have

06:27:33.121 --> 06:27:36.835
 the font size we're going to 
animate on the drawable. 

06:27:36.836 --> 06:27:39.404
 Animate all the other things, 
the data I capture ed. 

06:27:39.405 --> 06:27:42.095
 We need to know that stuff.  We
 get property value

06:27:42.096 --> 06:27:47.199
 holders for those and then we 
create the animateor,

06:27:47.200 --> 06:27:50.220
 right?  Then we're set to 
return, right?

06:27:50.221 --> 06:27:52.996
    Not quite.  Remember what we
 just did?  We set it

06:27:52.997 --> 06:27:56.904
 to be invisible.  No text?  
When the animation is

06:27:56.905 --> 06:28:00.224
 done, we want it to go back to 
the normal set.  We

06:28:00.225 --> 06:28:04.418
 set text color back to normal 
and remove the overlay

06:28:04.419 --> 06:28:08.209
 we just added.  So we're all 
set.  The transition

06:28:08.210 --> 06:28:11.308
 looks great.  All set.  Put it 
in activity Transition          

06:28:11.309 --> 06:28:13.309
 Transition.  What does it look 
like?

06:28:17.099 --> 06:28:21.214
    Holy molely!  Did you do 
this?  All right.  No, no  

06:28:21.215 --> 06:28:23.636
 no, okay.  Remember what 
happened, what Nick was

06:28:23.637 --> 06:28:27.817
 saying about this.  The values 
are capture ed in the

06:28:27.818 --> 06:28:31.204
 destination activity.  And when
 the values are

06:28:31.205 --> 06:28:34.224
 captured in the destination 
activity, text view

06:28:34.225 --> 06:28:37.212
 doesn't have the text size of 
the source activity's

06:28:37.213 --> 06:28:39.714
 text.  It doesn't even know 
that it was there.  It

06:28:39.715 --> 06:28:42.414
 doesn't know what that font 
size was.  What we have

06:28:42.415 --> 06:28:47.223
 to do is send that along as 
extra data.  Now, the

06:28:47.224 --> 06:28:50.122
 activity Transitions system 
will send the basic stuff

06:28:50.123 --> 06:28:55.120
 for you.  It will send you 
position, size, and image

06:28:55.121 --> 06:28:58.427
 scale, right?  Those are common
 things and things

06:28:58.428 --> 06:29:00.321
 built into the system.  The 
Transitions are built

06:29:00.322 --> 06:29:02.633
 into the system.  The other 
stuff, anything you need

06:29:02.634 --> 06:29:06.624
 to animate, you will have to 
send along as well.  So

06:29:06.625 --> 06:29:12.028
 we put those in as intent extra
s.  That's easy enough      

06:29:12.029 --> 06:29:14.626
 enough.  We get that intent 
extra in the target

06:29:14.627 --> 06:29:19.125
 activity and we get the font 
size and then we call

06:29:19.126 --> 06:29:22.925
 this shared element callback.  
The shared element

06:29:22.926 --> 06:29:26.722
 callback is where you put the 
complex part of your

06:29:26.723 --> 06:29:30.824
 activity transaction.  This is 
a callback that has

06:29:30.825 --> 06:29:34.217
 stuff for you to look into to 
do the tweaking you

06:29:34.218 --> 06:29:36.734
 need to do.  During the start 
what we have to do, of

06:29:36.735 --> 06:29:41.314
 course, is capture the text 
size of the current text

06:29:41.315 --> 06:29:43.930
 view and then set it to the one
 that we want it to be

06:29:43.931 --> 06:29:47.142
 in the start.
    And then in the end we have 

06:29:47.143 --> 06:29:50.345
to reset the text size
 back to what it was before.  

06:29:50.346 --> 06:29:53.143
Otherwise you just
 animate to the little tiny font

06:29:53.353 --> 06:29:57.027
 from the start.
    So what happens now?  You 

06:29:57.028 --> 06:30:00.256
end up with a beautiful
 transition from activity to 

06:30:00.257 --> 06:30:03.135
activity.
    Nice and smooth.

06:30:03.136 --> 06:30:05.948
    Now, we are going to come 
back and show this

06:30:06.944 --> 06:30:09.335
 awesome transition that he made
 up.  You guys have to

06:30:09.336 --> 06:30:11.566
 see this.

06:30:14.622 --> 06:30:16.419
    &gt;&gt; NICK BUTCHER:  Thanks, 
awesome.  Those are cool

06:30:16.420 --> 06:30:19.038
 Transitions we looked at so far
.  One of my favorite

06:30:19.039 --> 06:30:22.046
 things in the updated motions 
guidelines is the

06:30:22.047 --> 06:30:24.421
 section on transforming things.
  If you haven't seen

06:30:24.422 --> 06:30:27.239
 this I highly recommend you 
check out this and also

06:30:27.240 --> 06:30:31.532
 the awesome session in I/O on 
Wednesday about the

06:30:31.533 --> 06:30:35.312
 updated Transition guidelines. 
 This talks about

06:30:35.313 --> 06:30:39.529
 material design, sheets of 
digital paper and so on. 

06:30:39.530 --> 06:30:41.426
 Transforming from one thing to 
another.  This

06:30:41.427 --> 06:30:44.935
 Transition colt my eye which is
 a transforming a

06:30:44.936 --> 06:30:49.040
 floating action by in circular 
fab into a different

06:30:49.041 --> 06:30:51.444
 sheet of material.
    And I thought this was 

06:30:51.445 --> 06:30:56.447
pretty cool and want the to
 use this in an Open Source app 

06:30:56.448 --> 06:30:59.758
I built called plat
 and I wanted to transform from 

06:30:59.759 --> 06:31:03.163
this into this bottom
 sheet, essentially a linear 

06:31:03.164 --> 06:31:06.051
layout.  Unlike the
 Transitions we've looked at so 

06:31:06.052 --> 06:31:09.266
far which are acting
 on the same kind of view, 

06:31:09.267 --> 06:31:13.554
Transitions an image view
 in one window or text view to 

06:31:13.555 --> 06:31:15.555
text view, this is
 different, right?  We are going

06:31:15.637 --> 06:31:19.846
 to go from a floating
 or image button to a linear 

06:31:19.847 --> 06:31:23.335
layout essentially.  How
 do we do that?

06:31:23.336 --> 06:31:26.049
    So it is really important to
 remember as we talked

06:31:26.050 --> 06:31:27.724
 about before that everything 
happens in the

06:31:27.725 --> 06:31:30.650
 destination window.  In the 
window this with bottom

06:31:30.651 --> 06:31:33.241
 sheet here.
    So as with most animation 

06:31:33.242 --> 06:31:36.670
things we do some tricks
 to make it look like one thing 

06:31:36.671 --> 06:31:39.362
is transforming into
 the other.  What we do is in 

06:31:39.363 --> 06:31:44.765
the destination window
 we set translation X and Y.  

06:31:44.766 --> 06:31:47.344
Basically center the
 dialogue on the coordinates of 

06:31:47.345 --> 06:31:50.559
the fab, where it
 started from, translation X and

06:31:50.760 --> 06:31:53.668
 Y.  We use the view
 overlay again.  If you haven't 

06:31:53.669 --> 06:31:56.935
used it, this is the
 ability to add drawables on top

06:31:56.936 --> 06:32:01.064
 of the view.  We add
 a solid color drawable as well 

06:32:01.065 --> 06:32:03.169
as an icon on top of
 the view and locate that in the

06:32:03.975 --> 06:32:06.854
 center.  And then we
 run animations on this entire 

06:32:06.855 --> 06:32:11.675
view.  So first we fade
 out the color and the icon.  We

06:32:11.676 --> 06:32:14.875
 run a circular reveal
 animation that apply ies a 

06:32:14.876 --> 06:32:18.466
circular clipping mask and
 start from the size of the fab 

06:32:18.467 --> 06:32:22.287
and animate that clip
 mask out to show the whole 

06:32:22.288 --> 06:32:24.561
dialogue.
    And at the same time we move

06:32:24.966 --> 06:32:28.353
 a long a curved path
 using this motion thing.

06:32:28.354 --> 06:32:30.972
    So when we run all of those 
animations at the same

06:32:30.973 --> 06:32:34.251
 time, you get this effect.  It 
looks like you're

06:32:34.252 --> 06:32:36.769
 transforming from the fab to 
the dialogue.  So you

06:32:36.770 --> 06:32:41.881
 want to see how we build this?
    Okay.  About of we do, let's

06:32:42.068 --> 06:32:44.068
 think about what
 information we need to build it

06:32:44.169 --> 06:32:47.462
.  In order to build
 this transition we need to know

06:32:47.463 --> 06:32:50.260
 the positions, where
 the fab is to where the 

06:32:50.261 --> 06:32:54.062
dialogue is, we need to know
 the color and the icon.  As we 

06:32:54.063 --> 06:32:57.079
talked about and
 hammer on about, it all happens

06:32:57.490 --> 06:33:01.054
 in the destination
 window.  The sheet doesn't know

06:33:01.267 --> 06:33:03.791
 anything about the
 fab, right?  How do we get all 

06:33:03.792 --> 06:33:07.579
this information?
    So the position is pretty 

06:33:07.580 --> 06:33:10.264
easy.  As George said
 the position is one of the few 

06:33:10.265 --> 06:33:12.987
things that does
 actually get passed through.  

06:33:12.988 --> 06:33:17.483
In the capture star and
 capture end bounds we do the 

06:33:17.484 --> 06:33:21.178
same thing.  We have
 capture values and put those 

06:33:21.179 --> 06:33:23.580
bounds into the
 Transition values map and we 

06:33:23.581 --> 06:33:26.678
will get access to those
 a bit later on.  We have the 

06:33:26.679 --> 06:33:28.679
bounds

06:33:30.467 --> 06:33:33.467
 of the fab and
 the dialogue.  For the color 

06:33:30.467 --> 06:33:33.278
and the icon, I
 basically created a couple of 

06:33:33.279 --> 06:33:36.286
constructtors you can
 use.  So just like views, 

06:33:36.287 --> 06:33:41.286
Transitions can have, be
 inflated from XML.  When we 

06:33:41.287 --> 06:33:44.369
looked at the XML
 Transition sets we were showing

06:33:44.582 --> 06:33:47.489
 you before, define
 your own Transitions as we did 

06:33:47.490 --> 06:33:50.590
with the text resize
 but also add your own 

06:33:50.591 --> 06:33:55.786
attributes.  For example, we
 are doing contain start ats 

06:33:55.787 --> 06:33:59.894
abuse and you can define
 your class of style ables and 

06:33:59.895 --> 06:34:02.285
pull it out of the
 attribute.  We can pass in the 

06:34:02.286 --> 06:34:05.059
color and the icon for
 the attributes.

06:34:05.465 --> 06:34:07.581
    A quick note.  We are 
setting the path motion here    

06:34:07.582 --> 06:34:10.265
 here.  This is what we talked 
about before, adding a

06:34:10.266 --> 06:34:13.799
 path motion to control the end 
path which is going to

06:34:13.800 --> 06:34:16.783
 be along later.  We'll come 
back to using that in a

06:34:16.784 --> 06:34:17.891
 second.
    As an alternative, I also 

06:34:17.892 --> 06:34:21.013
added a dynamic way of
 determining this.  There is 

06:34:21.014 --> 06:34:23.402
actually different entry
 points that I have into the 

06:34:23.403 --> 06:34:26.590
screen.  So I couldn't
 statically declare in the 

06:34:26.591 --> 06:34:30.723
details activity what color
 an icon it it was going to come

06:34:30.918 --> 06:34:34.134
 from, because it can
 come from multiple places in 

06:34:34.135 --> 06:34:36.891
that screen.  I added a
 constructtor which will pass in

06:34:37.211 --> 06:34:39.211
 the colors the icons
 use

06:34:42.679 --> 06:34:43.803
.
    So we can do the tech yeek 

06:34:43.804 --> 06:34:46.802
that George talked
 about earlier, intent extras to

06:34:46.803 --> 06:34:50.924
 pass this -- here is
 the path I found helpful for 

06:34:50.925 --> 06:34:55.611
implementing this.  This
 isn't a path from the API 

06:34:55.612 --> 06:35:00.110
contract, this is on to the
 Transition it self, called 

06:35:00.111 --> 06:35:02.897
extras.  You can call this
 from the source activity, from 

06:35:02.898 --> 06:35:04.996
the activity which has
 the fab and knows about the 

06:35:04.997 --> 06:35:08.113
icon and the color.  So
 passing those things in a 

06:35:08.114 --> 06:35:11.003
static method and it will
 add them to the extras for you 

06:35:11.004 --> 06:35:13.915
and a corresponding
 setup method I called which you

06:35:14.126 --> 06:35:16.219
 call from the
 destination activity.  From the

06:35:16.600 --> 06:35:19.102
 activity with the
 bottom sheet which will then 

06:35:19.103 --> 06:35:22.214
pull those activity ies,
 those parameters out of the 

06:35:22.215 --> 06:35:26.885
intent extra fill fields
 and then it will actually 

06:35:26.886 --> 06:35:30.992
create an instance of this
 Transition object which I 

06:35:30.993 --> 06:35:34.100
called transform itself,
 set the target and set it on 

06:35:34.101 --> 06:35:38.554
the window has     as the shared
 element enter.  I like this 

06:35:38.555 --> 06:35:41.026
path because it means it
 keeps the keys and so on 

06:35:41.027 --> 06:35:45.028
private to the Transition. 
 You don't have to worry about 

06:35:45.029 --> 06:35:47.987
expose ing that.  It
 keeps it encapsulated.

06:35:48.205 --> 06:35:51.993
    Notice we are using shared 
element Transition.  If

06:35:51.994 --> 06:35:54.782
 you remember from the animation
 it goes from the fab

06:35:54.783 --> 06:35:57.703
 to sheet as well as an mating 
from the sheet back

06:35:57.704 --> 06:36:00.410
 down.
    What that means, the shared 

06:36:00.411 --> 06:36:02.720
enter Transition was
 going to get used on the return

06:36:03.013 --> 06:36:08.709
 Transition as well.
    So that is going to become 

06:36:08.710 --> 06:36:12.923
important in a second.
    We created a Transition 

06:36:12.924 --> 06:36:17.123
object itself.  How do we
 create the animate ers to make 

06:36:17.124 --> 06:36:20.118
this all happen.  We
 grab out the bounds that we 

06:36:20.119 --> 06:36:21.609
saved into the Transition  

06:36:21.610 --> 06:36:23.700
 Transitions values map and hold
 on to those.  I do

06:36:23.701 --> 06:36:27.496
 something, I check basically 
which of those is wider. 

06:36:27.497 --> 06:36:30.596
 Is it maybe not the most 
sophisticated method, but

06:36:30.597 --> 06:36:33.602
 that's how I work out if I'm 
going from the fab to

06:36:33.603 --> 06:36:38.204
 the dialogue or dialogue to the
 fab.  I'll use that

06:36:38.205 --> 06:36:40.710
 later on to set up the 
appropriate animation.  If

06:36:40.711 --> 06:36:43.902
 you're going from fab to sheet 
you do an expanding

06:36:44.919 --> 06:36:47.902
 circular view or there the 
sheet to the fab, you do a

06:36:47.903 --> 06:36:49.903
 contracting circular hide.

06:36:54.030 --> 06:36:57.917
    So next up, the view is 
always the end value view. 

06:36:57.918 --> 06:37:01.008
 Even though you give the start 
and end values you're

06:37:01.009 --> 06:37:03.316
 acting on the end values of 
view.  Something that

06:37:03.317 --> 06:37:06.398
 took me awhile to get my head 
around, that view is

06:37:06.399 --> 06:37:09.492
 always in the state that it 
ends up in which is to

06:37:09.493 --> 06:37:13.005
 say when we were going from the
 fab to the dialogue,

06:37:13.006 --> 06:37:15.393
 it was already laid out and 
positioned in the

06:37:15.394 --> 06:37:18.918
 dialogues position.  We 
reversed it by setting those

06:37:18.919 --> 06:37:22.337
 translations and so forth to 
put it back into the fab   

06:37:22.338 --> 06:37:24.793
 fabs position.  It's already in
 the end state.  The

06:37:24.794 --> 06:37:27.614
 same is true when I'm going 
back.  What that means,

06:37:27.615 --> 06:37:30.321
 when I'm about to do the 
animation from the dialogue

06:37:30.322 --> 06:37:33.236
 back to the fab, the dialogue 
is actually laid out

06:37:33.237 --> 06:37:37.296
 like this, in the exact same 
bounds as the fab.  What

06:37:37.297 --> 06:37:41.703
 you need to do is to manually 
call measure and layout

06:37:41.704 --> 06:37:44.912
 on to the dialogue in order to 
put it back into the

06:37:44.913 --> 06:37:48.416
 position that you want to 
animate from.  It may sound

06:37:48.417 --> 06:37:52.122
 counter intuitive that you have
 to call layout

06:37:52.123 --> 06:37:54.304
 yourself, but that's how the 
system works.  It was

06:37:54.305 --> 06:37:58.797
 easy for us on the way in, but 
we have to do a little

06:37:58.798 --> 06:38:01.541
 bit more work on the way back.
    I just want to highlight the

06:38:02.249 --> 06:38:05.838
 translation as well.  we use 
the path motion.  We set the 

06:38:05.839 --> 06:38:07.334
path
 motion in the constructtor 

06:38:07.335 --> 06:38:10.813
early on.  Here I'm using
 an over load of object an mate 

06:38:11.025 --> 06:38:14.338
er which will animate
 two properties as once.  Here X

06:38:14.751 --> 06:38:17.725
 and Y of the dialogue        
 dialogue.  We get hold of that 

06:38:17.726 --> 06:38:22.837
path motion again and
 call get path, that will 

06:38:22.838 --> 06:38:27.730
generate the curved path an
 an mate the translation on the 

06:38:27.731 --> 06:38:32.833
curved plus for us.
    We do more animateos and put

06:38:33.035 --> 06:38:35.835
 them in a set and
 that gives you that entire 

06:38:35.836 --> 06:38:38.541
animation.  That's how it  
 it's done.  This is all Open 

06:38:38.542 --> 06:38:41.734
Source as well.  There
 will be a link at the end if 

06:38:41.735 --> 06:38:44.624
that you can take a look
 at the end if you want to look 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:38:44.625 --> 06:38:49.819
at the nitty gritty
 details.

06:38:49.820 --> 06:38:52.398
    &gt;&gt; GEORGE MOUNT:  That was 
awesome!    

06:38:52.399 --> 06:38:53.025
    (Applause.)
    &gt;&gt; GEORGE MOUNT:  Let's talk

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:38:53.026 --> 06:38:55.426
 about a few things I
 think you guys will find useful

06:38:55.636 --> 06:38:59.134
 here.  Transition
 names.  Now, if you do things 

06:38:59.135 --> 06:39:01.743
well with Transition
 names, the system will work for

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:39:01.943 --> 06:39:06.649
 you.  That will help
 you a lot.  For example, we 

06:39:06.650 --> 06:39:08.924
have an animation here, a
 Transition to go from this 

06:39:08.925 --> 06:39:12.827
little guy to a big thing. 
 Actively Transition like that.

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:39:13.225 --> 06:39:15.503
    And what is happening in our
 activity Transition

06:39:15.504 --> 06:39:19.608
 is, of course, we call, make 
scene Transition

06:39:19.609 --> 06:39:22.303
 animation.  We have this view. 
 My view doesn't have

06:39:22.304 --> 06:39:25.915
 a Transition name here.  Or 
please don't do this. 

06:39:25.916 --> 06:39:30.517
 You call view.settransition 
name right here in this

06:39:30.518 --> 06:39:34.429
 call.  Don't do that!  I'll 
tell you why.

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:39:34.630 --> 06:39:37.140
    We have our activity here.  
We launch a new one. 

06:39:37.141 --> 06:39:41.033
 And then we change the or    
orientation of the phone. 

06:39:41.034 --> 06:39:44.013
 What happens now?  That's 
right, our activity gets

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:39:44.014 --> 06:39:48.328
 rebuilt.  But further, the 
thing underneath it gets

06:39:48.329 --> 06:39:53.418
 rebuilt too.  Even if you 
called view.settransition  

06:39:54.437 --> 06:39:57.132
just lost that.  It's
 gone.  Now when the view tries 

06:39:57.133 --> 06:40:00.541
to come back, it has
 no idea which is the shared e

06:40:02.062 --> 06:40:06.046
lement.  The Transition
 name is used to identify which 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:40:06.047 --> 06:40:08.932
-- going from the
 source to the target.  So it 

06:40:08.933 --> 06:40:12.037
can map those two.  If
 it loses that Transition name 

06:40:12.038 --> 06:40:15.633
it won't know what to
 do.  You of course can fix it 

06:40:15.634 --> 06:40:18.327
up and we'll talk about
 that later, but the Transition 

06:40:18.328 --> 06:40:21.639
name is your friend.
    So in a system like this 

06:40:21.640 --> 06:40:24.828
where you have a recycle er
 view, for example, when you 

06:40:24.829 --> 06:40:29.746
bind your view, that's
 when you set your Transition 

06:40:29.747 --> 06:40:32.451
name and it should be a
 unique name that you have for 

06:40:32.452 --> 06:40:35.449
that item.  It can be a
 URL or whatever you want.  It's

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:40:35.450 --> 06:40:38.535
 fine, as long as it's
 a string that is unique.  Here 

06:40:38.536 --> 06:40:44.751
I bound it to the
 position, in my position the 

06:40:44.752 --> 06:40:49.645
holder is unique.  Or in
 data binding, you can doit in 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:40:49.646 --> 06:40:52.932
the view too in data
 binding.  That's awesome.  I 

06:40:52.933 --> 06:40:55.031
know some guy that works
 on that.

06:40:55.230 --> 06:40:57.722
    Let's talk about changing 
the shared elements. 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:40:57.941 --> 06:40:59.924
 That means we have a different 
shared element than

06:40:59.925 --> 06:41:02.214
 you originally thought.  Here I
 have a view, an

06:41:02.215 --> 06:41:04.914
 activity that launches another 
one and we scroll in

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:04.915 --> 06:41:07.836
 the detailed view.  When we go 
back, we want to go

06:41:07.837 --> 06:41:12.231
 book to a different shared 
element, right?  Now, this

06:41:12.232 --> 06:41:14.145
 Transition system of course is 
going to try to go

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:14.146 --> 06:41:17.023
 back to the same one you had 
before.  We have to tell

06:41:17.024 --> 06:41:22.049
 it something else.  Step one, 
when you launch the

06:41:22.050 --> 06:41:25.032
 activity, ask for which shared 
element is coming back    

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:25.033 --> 06:41:30.341
 back.  So you start activity 
for result.  Step two,

06:41:30.342 --> 06:41:33.747
 before you go back, set the 
result.  Tell it which

06:41:33.748 --> 06:41:37.058
 shared element is going to come
 back to you.  Here I

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:37.059 --> 06:41:40.429
 have an ID I'm going to send 
back as a result.

06:41:41.044 --> 06:41:44.635
    Set three, on reactivity 
reenter, not on activity

06:41:44.636 --> 06:41:48.430
 result -- I've gotten bit by 
this just yesterday, I

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:48.431 --> 06:41:51.115
 think it was, when I was 
writing a demo.

06:41:51.339 --> 06:41:54.536
    On activity reenter, that's 
a new thing just for

06:41:54.537 --> 06:41:59.532
 activity trgs here.  It will be
 called before the

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:41:59.533 --> 06:42:01.841
 shared element comes back.  
This is where you can do

06:42:01.842 --> 06:42:05.030
 some tweaking.  Here I'm going 
to get the data, the

06:42:05.031 --> 06:42:07.536
 shared element.  Okay?  That's 
going to come back to

06:42:07.537 --> 06:42:10.935
 me.  All that data is coming 
back to me.  Then we can

06:42:10.936 --> 06:42:15.525
 also call a shared element exit
 element.  The shared

06:42:15.526 --> 06:42:17.628
 element for the exit?  The exit
 is used for the

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:42:17.629 --> 06:42:21.966
 exiting and also for reenter, 
same call back used for

06:42:21.967 --> 06:42:25.429
 both.  This is where we can 
switch up our activity ies,

06:42:25.430 --> 06:42:28.149
 our shared elements.  We can 
set our shared element

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:42:28.150 --> 06:42:31.828
 to whatever we want in our view
 hierarchy.  Here I

06:42:31.829 --> 06:42:36.131
 used the ID I just got before 
from the activity

06:42:36.132 --> 06:42:39.433
 reenter and used it right now 
for my, to change my

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:42:39.434 --> 06:42:42.752
 shared element.  And now it 
works perfectly.

06:42:42.753 --> 06:42:45.828
    Let's talk about overlays.  
Shared elements often

06:42:45.829 --> 06:42:49.340
 go into the overlay.  If it 
will go right into the

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:42:49.341 --> 06:42:51.436
 over      
 overlay unless we specifically 

06:42:51.437 --> 06:42:54.164
tell it not to.  The
 great thing about this, it is 

06:42:54.165 --> 06:42:56.252
thrown on top of
 everything, right?  You don't 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:42:56.253 --> 06:42:59.158
want to have your
 shared element drawn under 

06:42:59.159 --> 06:43:02.260
something over there,
 right?  It is also clipped by 

06:43:02.261 --> 06:43:04.261
the parent.  That's
 really important.

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:43:04.443 --> 06:43:07.457
    The problem is it's drawn on
 top of everything. 

06:43:07.458 --> 06:43:09.450
 When it's drawn on top of 
everything there's a little

06:43:09.451 --> 06:43:16.738
 bit of a problem.  And ... it 
is also not clipped by

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:43:16.739 --> 06:43:18.739
 the parent.

06:43:21.339 --> 06:43:25.467
    Sorry, it's ... all right.
    &gt;&gt; NICK BUTCHER:  Here is a 

06:43:25.468 --> 06:43:30.938
real example I of this
 issue.  In this screen when you

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:43:31.074 --> 06:43:34.579
 click on a list item,
 I want to have this expand and 

06:43:34.580 --> 06:43:36.656
grow out.  I had a
 shared element where

06:43:40.051 --> 06:43:42.717
 the back      background was 
one of the

06:43:40.051 --> 06:43:42.441
 shared element.  If you 
Transition two shared element  

06:43:43.946 --> 06:43:48.733
 from one to the other
 but the background positions to

06:43:48.734 --> 06:43:48.969
 give that growing
 effect.  This is all well and 

06:43:48.970 --> 06:43:51.859
good, but if you use
 the overlay to do the 

06:43:51.860 --> 06:43:55.162
Transition, if you put the
 background into the overlay it

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:43:55.471 --> 06:43:57.851
's on top of everything
 else.  You get a horrible 

06:43:57.852 --> 06:44:01.554
effect where it grows up
 and it snaps in.  That's not 

06:44:01.555 --> 06:44:05.362
what we want.  We want
 the content to come in on top 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:44:05.363 --> 06:44:07.470
of the background. 
 Hopefully we can control that, 

06:44:07.471 --> 06:44:10.845
George.  George George
 yes, we can.  All we have to do

06:44:11.051 --> 06:44:13.641
 to make the shared
 element do something different 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:44:13.642 --> 06:44:17.944
is tell it not to.  We
 set this value in your styles.

06:44:17.945 --> 06:44:20.242
    But you might end up with a 
little bit of a

06:44:21.953 --> 06:44:25.237
 problem.  Ugghh.  I think it 
was you, you did it,

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:44:25.238 --> 06:44:29.576
 right?  No.
    Well, the problem is this.  

06:44:29.577 --> 06:44:33.049
Let's see what's going
 on here.  The shared element is

06:44:33.347 --> 06:44:36.260
, of course, popped
 into the new activity.  And 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:44:36.261 --> 06:44:39.850
when that happens, it is
 being clipped by its parent and

06:44:40.074 --> 06:44:43.376
 it is only visible
 when the shared element slides 

06:44:43.377 --> 06:44:46.760
into the parent view.
    So what we can do, of 

06:44:46.761 --> 06:44:50.155
course, is tell the parent
 don't clip it.  You say tell 

06:44:50.156 --> 06:44:54.166
the parent, say set the
 children to false an also set 

06:44:54.167 --> 06:44:58.364
clip to padding false
 as well.  Now, this might cause

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:44:58.492 --> 06:45:00.977
 you a little bit of
 problem with your drawing.  Be 

06:45:00.978 --> 06:45:03.366
careful with this.  It  
 It's a performance issue.  You 

06:45:03.367 --> 06:45:05.448
might consider doing
 this oxygen during your 

06:45:05.449 --> 06:45:10.652
transition.
    But you can't do -- you you 

06:45:10.653 --> 06:45:13.366
have to go all the way
 up because the grand parent can

06:45:13.783 --> 06:45:16.981
 also clip the child
 and clip the shared element.  

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:45:16.982 --> 06:45:19.570
That's no good.  The
 other option is to do what Nick

06:45:19.660 --> 06:45:22.861
 did, put it right
 into the root, into the root of

06:45:23.286 --> 06:45:27.770
 his layout as the
 child of that.  Now it is not 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:45:27.771 --> 06:45:33.553
clipped by anything
 because the window is fine.

06:45:33.554 --> 06:45:36.558
    Now it has no clipping.  It 
comes in instead of a

06:45:36.559 --> 06:45:40.753
 flash, it comes in on top just 
like we want.

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:45:40.754 --> 06:45:45.390
    All right.  Ben?
    &gt;&gt; BENJAMIN WEISS:  Cool.

06:45:48.652 --> 06:45:51.773
  So I have seen within
 some of these Transitions, in 

06:45:51.774 --> 06:45:54.372
general if you work
 with Transitions you also have 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:45:54.373 --> 06:45:57.467
access to the window
 deck nation             

06:45:57.468 --> 06:46:02.578
 decorations.  Status bar, 
background navigations.

06:46:02.579 --> 06:46:05.592
    What you can do, you define 
the slide Transition

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:05.593 --> 06:46:08.150
 and what will happen with that 
is it Slides all the

06:46:08.151 --> 06:46:12.563
 content in.  We highlighted the
 status bar here to

06:46:12.564 --> 06:46:15.468
 show you what is going on.  So 
it Slides the status

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:15.469 --> 06:46:17.889
 bar in as well.  Actually we 
don't want to d

06:46:21.156 --> 06:46:23.822
o this. 
 As you can see on the bottom on

06:46:21.156 --> 06:46:24.057
 the navigation bar,
 the floor flash, it Slides up 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:24.058 --> 06:46:27.876
as well.  So in order
 to avoid this there's a couple 

06:46:27.877 --> 06:46:31.569
of ways to do this. 
 What you want to do is exclude 

06:46:31.570 --> 06:46:34.862
both the status bar
 background and the navigation 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:34.863 --> 06:46:37.967
bar background.  We
 provided IDs as well as 

06:46:37.968 --> 06:46:41.158
Transition names for those so
 you can work with them.  That 

06:46:41.159 --> 06:46:43.585
is one of the ways you
 can work with it.  Obviously 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:43.586 --> 06:46:47.376
you can do this not just
 in XML as we showed you before 

06:46:47.377 --> 06:46:50.072
but also when you do
 this within your code you 

06:46:50.073 --> 06:46:53.696
basically say on this
 Transition exclude the target 

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:46:53.697 --> 06:46:57.237
and set those values to
 true.

06:46:57.560 --> 06:46:59.846
    But you can also do 
something a little bit more

06:46:59.847 --> 06:47:03.166
 nifty.  You can add this to the
 shared element

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:03.167 --> 06:47:07.060
 Transitions.  You can have 
three colors in there or

06:47:07.061 --> 06:47:11.360
 fade out stuff.  Fade them out 
within a shared

06:47:11.361 --> 06:47:14.454
 element Transition.  To do this
 you go all the way up

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:14.455 --> 06:47:20.076
 in the hierarchy, get the D 
core and you create the

06:47:20.077 --> 06:47:23.763
 pairs.  This is the second way 
you can create pairs. 

06:47:23.764 --> 06:47:27.564
 It is another way into calling 
that.

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:27.565 --> 06:47:30.170
    And then adding them to the 
shared element

06:47:30.171 --> 06:47:34.055
 Transition to actually have the
 system being aware of

06:47:34.056 --> 06:47:37.477
 exactly that.  And then you get
 the desire ed behavior

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:37.478 --> 06:47:41.564
 of no flashes, no exploding or 
just moving a little

06:47:41.565 --> 06:47:46.345
 way status bar or navigation 
bar background.

06:47:46.346 --> 06:47:50.763
    And with that, we actually 
have a little room for

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:50.764 --> 06:47:53.159
 questions.  So you can start 
lining up if you have

06:47:53.160 --> 06:47:55.557
 questions.  About six minutes. 
 Thank you very much

06:47:55.558 --> 06:47:59.490
 for being here.  It has been a 
pleasure to talk to

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:47:59.491 --> 06:48:03.512
 you about Transitions and we 
have Open Source all the

06:48:03.513 --> 06:48:07.086
 code already for the samples 
that we gave here.  The

06:48:07.477 --> 06:48:11.474
 new one, the one with the image
s we just showed is on

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:48:11.475 --> 06:48:15.985
 splash.  You have to look in 
Nick Butcher's plat if

06:48:15.986 --> 06:48:19.374
 you want to go on the advanced 
things.  There's also

06:48:19.375 --> 06:48:23.670
 Topeka out there and another 
example called our

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:48:23.671 --> 06:48:25.671
 streets.
    Look at the training that we

06:48:26.109 --> 06:48:29.387
 have.  Yeah, thank
 you very much.  Questions?

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:48:39.570 --> 06:48:40.390
(Applause.)
    &gt;&gt; AUDIENCE:  I do have a 

06:48:40.391 --> 06:48:43.485
question.  What about
 shared element transition into 

06:48:43.486 --> 06:48:46.331
dialogue fragment?

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:48:49.768 --> 06:48:52.379
    Because I was not able to do
 that.  I tried that

06:48:52.380 --> 06:48:57.298
 and I wasn't.
    &gt;&gt; BENJAMIN WEISS:  I 

06:48:57.299 --> 06:49:01.109
haven't tried it.
    &gt;&gt; GEORGE MOUNT:  Dialogue 

06:49:01.110 --> 06:49:03.885
fragment is, the
 contents are controlled by you.

06:49:04.170 --> 06:49:07.084
  Make sure to set the
 style of the dialogue fragment.

06:49:07.357 --> 06:49:10.370
  I haven't tried it. 
 Start with that.  You should be

00:22:22.000 --> 00:22:24.000
    If we're competing with
 native, this is like an

06:49:10.371 --> 06:49:14.288
 able to set the style
 on fragment to enable activity 

06:49:14.289 --> 06:49:18.794
Transitions.  So if
 you do that, then you should be

06:49:18.795 --> 06:49:22.080
 able to do all the
 rest you need to do in order to

06:49:22.318 --> 06:49:26.873
 do the shared element
 Transition.

06:49:26.874 --> 06:49:33.791
    It should work.  I'm not 
sure why it is not.

06:49:33.792 --> 06:49:35.362
    &gt;&gt; AUDIENCE:  Hi, guys.  
Thank you for the

