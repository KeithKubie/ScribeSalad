WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.529
So we're doing this series Graham - thank you
for coming back to Computerphile - about the

00:00:04.529 --> 00:00:08.790
most important thing in computing, or one of
the most important things; have you got

00:00:08.790 --> 00:00:11.670
something for us? Yeah, I think so. So maybe
it's not the most important, but it's certainly

00:00:11.670 --> 00:00:14.639
one of the most interesting, and one of
the weirdest ideas in Computer

00:00:14.639 --> 00:00:21.930
Science, and that is the Y combinator. The
background to this, is that in the last

00:00:21.930 --> 00:00:25.470
video we did an introduction to the
Lambda Calculus, and this generated quite

00:00:25.470 --> 00:00:28.590
a lot of discussion and comments, which
was very nice, but it turned out that the

00:00:28.590 --> 00:00:32.790
top comment was "can we have more on the
Y combinator?" So that's what we're going

00:00:32.790 --> 00:00:37.200
to do today. So what the Y combinator
actually is, is a way of doing recursion

00:00:37.200 --> 00:00:40.739
in a language which doesn't have any
recursion, or any looping mechanism at

00:00:40.739 --> 00:00:44.820
all. So what we'll start off with is a
quick refresher about what recursion

00:00:44.820 --> 00:00:50.100
actually is. So recursion is the idea of
defining things in terms of themselves,

00:00:50.100 --> 00:00:54.059
and a simple example of this is the
well-known factorial function, so let's

00:00:54.059 --> 00:00:58.350
have a little look at this. The way
factorial works is you give it a number

00:00:58.350 --> 00:01:03.000
like 3, and it's going to count down from
3 to 1, and multiply up all the numbers

00:01:03.000 --> 00:01:09.299
in between. So for example, factorial of 3
then would be 3 times 2 times 1, which

00:01:09.299 --> 00:01:13.979
would give us the result 6. And then we
can think how do we actually define this

00:01:13.979 --> 00:01:17.729
function? And it turns out that the
factorial function has a very simple, and

00:01:17.729 --> 00:01:21.810
a very natural definition, using
recursion - defining things in terms of

00:01:21.810 --> 00:01:26.700
itself. So let's see how we can do that.
If you give the factorial function a

00:01:26.700 --> 00:01:31.650
number n, it's going to make a choice
between doing one of two things. If the

00:01:31.650 --> 00:01:35.280
number you give it is already 1, which is
the point where you're trying to count

00:01:35.280 --> 00:01:40.110
down to, then there's nothing to do. So if
the number equals 1, then we just return

00:01:40.110 --> 00:01:44.430
the result 1. Otherwise, what we're going
to do, is we'll take the number you're

00:01:44.430 --> 00:01:49.680
given, and we'll multiply it by the
factorial of its predecessor. So for

00:01:49.680 --> 00:01:55.619
example, if n was 3 we would take 3
times the factorial of 2. So this is a

00:01:55.619 --> 00:02:00.899
recursive function because we're
defining factorial in terms of itself -

00:02:00.899 --> 00:02:06.630
the factorial of any number n is defined
in terms of the factorial of n minus 1.

00:02:06.630 --> 00:02:09.179
So you can see the way that this is
going to work - if you give it a number

00:02:09.179 --> 00:02:13.159
like 3, it's going to loop round - two,
one, and so - on until it eventually

00:02:13.159 --> 00:02:16.970
gets to one, and then it will stop and do
all the multiplies. So let's do a little

00:02:16.970 --> 00:02:21.049
example of this running, to see that we
know how it actually works. If we take

00:02:21.049 --> 00:02:27.799
factorial of 3 - so factorial of any
number that's not 1 is going to be that

00:02:27.799 --> 00:02:30.530
number times the factorial
of its predecessor -

00:02:30.530 --> 00:02:36.590
so we'll take 3 times the factorial of 2.
And then what do we do now? Well, we just

00:02:36.590 --> 00:02:40.400
do the same thing again. We've worked out
what factorial of 3 is, now we need to

00:02:40.400 --> 00:02:42.920
work out what factorial of 2 is, and
we just run the definition again,

00:02:42.920 --> 00:02:48.079
recursively. So we copy down what we had
before. We have 3 times, and then we have

00:02:48.079 --> 00:02:53.810
2 times factorial of 1. And then the
final step is the base case - this is

00:02:53.810 --> 00:02:57.829
where the recursion stops - because
the factorial of 1, according to our

00:02:57.829 --> 00:03:04.730
definition, was just 1. So we're going
to get 3 times 2 times 1, which is 6. So

00:03:04.730 --> 00:03:10.310
that's a simple example of a recursive
function, and how it may run. So what

00:03:10.310 --> 00:03:14.810
we were looking at in the last video was
the Lambda Calculus, which is a minimal

00:03:14.810 --> 00:03:18.739
language for defining functions. And it's
only got three things in it - it's got

00:03:18.739 --> 00:03:23.090
variables, like X, Y and Z; it's got a
way of building functions, that's the

00:03:23.090 --> 00:03:26.780
lambda notation that we saw last day;
and it's got a way of applying functions,

00:03:26.780 --> 00:03:30.980
that's just putting two things next to
each other. And everything else in the

00:03:30.980 --> 00:03:36.769
Lambda Calculus is encoded in terms of
these three basic things. So an example

00:03:36.769 --> 00:03:40.879
which we did last day was the logical
values True and False, and I'll just

00:03:40.879 --> 00:03:44.540
refresh your memory about how we did
this last day. The two logical values are

00:03:44.540 --> 00:03:50.540
True and False, and how do you represent
these, or encode these, in the Lambda

00:03:50.540 --> 00:03:55.940
Calculus? You do it very simply as two
functions. So True is going to be encoded

00:03:55.940 --> 00:04:01.220
as the function that takes two things, x
and y, and just gives you back the first

00:04:01.220 --> 00:04:07.129
one, x. And then False is the opposite - it
takes two things, x and y, and it gives

00:04:07.129 --> 00:04:11.389
you back the second one. And these
encodings can then be used to define any

00:04:11.389 --> 00:04:14.840
other function which you'd like on the
logical values. Like, I think last day, we

00:04:14.840 --> 00:04:19.130
looked at Not, and we looked at And, and
we looked at Or. So any other function

00:04:19.130 --> 00:04:22.430
can be defined in terms of these two
encodings. And these encodings are very

00:04:22.430 --> 00:04:25.599
natural - they express the
idea that, in programming,

00:04:25.599 --> 00:04:30.400
True and False are often used to choose
between two different things. So if one

00:04:30.400 --> 00:04:34.660
thing is True, you do something; and if
it's False, then you do something else.

00:04:34.660 --> 00:04:38.349
And these two definitions just encode
this idea of choosing between one thing,

00:04:38.349 --> 00:04:43.720
or another thing. What we're thinking
about today is recursion. And you can ask

00:04:43.720 --> 00:04:49.240
yourself, if we have our definition like
the factorial function here, the key

00:04:49.240 --> 00:04:53.050
thing in the definition is that it's
recursive - we're defining the factorial

00:04:53.050 --> 00:04:58.270
function in terms of itself, recursively.
So how do we encode recursion in the

00:04:58.270 --> 00:05:02.080
Lambda Calculus, which doesn't have any
sophisticated feature like that at all?

00:05:02.080 --> 00:05:07.180
So let's start off by reducing the
problem a bit. Let me write down the very

00:05:07.180 --> 00:05:11.110
simplest recursive definition which I
can think of. And the simplest possible

00:05:11.110 --> 00:05:15.310
recursive definition is just a program
that loops - it doesn't do anything at all.

00:05:15.310 --> 00:05:20.440
So here would be the program. So I just
say loop equals loop. And if you think

00:05:20.440 --> 00:05:23.770
about running this thing, we say what's
the value of loop, or how do you execute

00:05:23.770 --> 00:05:27.190
loop? Well, you just go to the right-hand
side, and you say, well it's loop. So you

00:05:27.190 --> 00:05:29.710
go back to the left-hand side, and it's
just going to go around like this

00:05:29.710 --> 00:05:33.099
forever - it's just going to kind of spin
on the spot, without doing anything at

00:05:33.099 --> 00:05:37.389
all. So this is the simplest recursive
program which you could write down. So

00:05:37.389 --> 00:05:42.639
how could I encode this behavior in the
Lambda Calculus? And the key to this is

00:05:42.639 --> 00:05:47.590
something called self application - it's the
idea of applying something to itself - or

00:05:47.590 --> 00:05:52.120
in this case, applying a function to
itself. So let me show you how to encode

00:05:52.120 --> 00:05:58.630
loop. So the way this works is we will
define loop to be this function here. So

00:05:58.630 --> 00:06:02.919
the first thing to observe is that we
have two functions in here, and in fact

00:06:02.919 --> 00:06:07.270
two copies of the same function. If we look
at this function here, and this function

00:06:07.270 --> 00:06:11.650
here, they're both exactly the same. So
what we're doing here is we're applying

00:06:11.650 --> 00:06:15.729
this function to itself - it's the idea
of self application. And this actually

00:06:15.729 --> 00:06:18.789
occurs at another level as well. If we
look at what each of these functions

00:06:18.789 --> 00:06:24.039
actually does, it takes an input called x,
and then applies x to itself; so again,

00:06:24.039 --> 00:06:27.310
this is the idea of self application -
we're taking something in here, and then

00:06:27.310 --> 00:06:30.400
we're applying it to itself, and the
same is happening over here.

00:06:30.400 --> 00:06:34.930
And it turns out that this idea of self
application is the key to how you do

00:06:34.930 --> 00:06:38.330
looping, or recursion, in a
language which doesn't have support

00:06:38.330 --> 00:06:41.840
for that feature. So let's actually
check that this thing actually has the

00:06:41.840 --> 00:06:45.740
behavior that we'd like - check that it
actually performance looping. If we write

00:06:45.740 --> 00:06:53.030
down the same thing again, we have lambda x,
x x, and then we have lambda x, x x. Let's

00:06:53.030 --> 00:06:56.030
think about how we can actually run this
thing. So we need to remember what a

00:06:56.030 --> 00:07:00.830
function actually does. So a function
takes an input, like x, and then it tells

00:07:00.830 --> 00:07:03.290
you what to do with it - so in
this case it takes an x and just

00:07:03.290 --> 00:07:08.690
makes two copies of it side by side. And
in this case, the x is this thing here -

00:07:08.690 --> 00:07:13.310
this is the argument, or the input, to the
function - we're applying it to itself. So

00:07:13.310 --> 00:07:17.350
what's going to happen is that this
input is going to be plugged in, or

00:07:17.350 --> 00:07:21.590
substituted, for x and then we'll just
get two copies of the thing in the box.

00:07:21.590 --> 00:07:25.250
So that's how you would run the function.
So if we write this down, we're going to

00:07:25.250 --> 00:07:30.740
get two copies of the box, and inside the
box will be exactly the same thing. And

00:07:30.740 --> 00:07:35.480
what you see here, is that in going from
here to here, we've got exactly back to

00:07:35.480 --> 00:07:39.320
where we started. We started with this
expression here, which was the definition

00:07:39.320 --> 00:07:42.800
of loop, and we've ended up with exactly
the same thing. And of course if we do

00:07:42.800 --> 00:07:47.000
the same thing again, if we say this is a
function, this is its input, let's plug it

00:07:47.000 --> 00:07:51.860
in, in the two places where we see x, then
we'll get exactly the same thing again.

00:07:51.860 --> 00:07:55.100
So this thing is just going to go around
in circles. It will never get anywhere -

00:07:55.100 --> 00:07:58.730
every time you run one step of it, it
will go back to exactly the same point,

00:07:58.730 --> 00:08:05.210
so it encodes the idea of looping. So
that's a simple example. Let's have a

00:08:05.210 --> 00:08:10.790
more general example of recursion. So
here's a little recursive definition. I'm

00:08:10.790 --> 00:08:14.630
going to define a function called rec,
for recursion, and it's going to take

00:08:14.630 --> 00:08:18.740
another function as an input, and what
it's going to do is apply that function

00:08:18.740 --> 00:08:23.270
to rec of f. So what does this definition
actually do? Well, first of all, we can see

00:08:23.270 --> 00:08:27.680
that it's recursive, because rec of f is
defined in terms of rec of f. But it's

00:08:27.680 --> 00:08:31.220
not just looping around all the time -
it's got a function f here, sitting in

00:08:31.220 --> 00:08:36.980
the way. So if you think about unwinding
this definition, what you'll get is f of f of

00:08:36.980 --> 00:08:41.720
f of f, forever. If you run this recursive
program, it's just going to apply the

00:08:41.720 --> 00:08:46.610
function f infinitely often. And this
turns out to be the idea of what's

00:08:46.610 --> 00:08:50.880
called general recursion in Computer Science -
this is the most general pattern of

00:08:50.880 --> 00:08:55.680
recursion you can have, and any other
recursive function can be encoded in

00:08:55.680 --> 00:09:00.960
terms of this one. So if we can encode
rec in the Lambda Calculus, we can encode

00:09:00.960 --> 00:09:05.490
any recursive function. But let me set
you a couple of exercises at this point.

00:09:05.490 --> 00:09:10.770
Using the definition of rec, which is
recursive, how do you program loop? Define,

00:09:10.770 --> 00:09:16.290
or redefine, loop to be rec of some
function. So you've got to figure out

00:09:16.290 --> 00:09:21.030
what function to apply rec to here. It's
actually a very, very simple function -

00:09:21.030 --> 00:09:23.700
it's probably the simplest, or it is the
simplest function, you could write down

00:09:23.700 --> 00:09:26.730
in the Lambda Calculus, so don't try and
over complicate it - write down the

00:09:26.730 --> 00:09:30.570
simplest function you can here, work
through the definition of rec, and you'll

00:09:30.570 --> 00:09:33.810
see that it actually has the looping
behaviour. A slightly more interesting

00:09:33.810 --> 00:09:39.030
exercise, and a bit more challenging, is
how to define the factorial function using

00:09:39.030 --> 00:09:43.350
rec? And I'll give you a bit of a hint on
this one - what you need to do is pass it

00:09:43.350 --> 00:09:47.760
lambda f, lambda n, and then you need to
figure out what you write for the

00:09:47.760 --> 00:09:51.240
question mark here, okay. And what you'll
find, is that the function that you write

00:09:51.240 --> 00:09:56.580
in here is not recursive - it's the non-
recursive part of the factorial function.

00:09:56.580 --> 00:09:59.700
Okay, so that's a bit of a challenging
exercise. This one's quite easy,

00:09:59.700 --> 00:10:02.520
this one's a little bit more challenging,
but you'll learn a lot about the way

00:10:02.520 --> 00:10:06.660
recursion works in the Lambda Calculus
if you do these two exercises. So what

00:10:06.660 --> 00:10:11.790
we've reached now is the point where,
if we can encode rec, which is general

00:10:11.790 --> 00:10:15.000
recursion - any other recursive function
can be encoded in terms of that, or

00:10:15.000 --> 00:10:18.810
defined in terms of that - if we
can encode rec, then we're done,

00:10:18.810 --> 00:10:24.210
because that lets us do everything. So
it's a bit of a mouthful, so I haven't

00:10:24.210 --> 00:10:27.900
tried to memorise it - I've just got
a copy pre-prepared here. Here is the

00:10:27.900 --> 00:10:32.850
definition, or one possible definition,
of rec in the Lambda Calculus. And this is

00:10:32.850 --> 00:10:36.600
what's known as the Y combinator. And if
you look at this, I mean it looks like a

00:10:36.600 --> 00:10:40.620
jumble of symbols, but it's actually very
similar to loop. If we look back to see

00:10:40.620 --> 00:10:46.380
the definition of loop, it had the idea
of self application, so we applied a

00:10:46.380 --> 00:10:52.260
function to itself. And the function we
applied was lambda x, x x. And we saw, how

00:10:52.260 --> 00:10:55.320
when you run that, it will actually
achieve the looping behaviour. If you look

00:10:55.320 --> 00:11:00.000
at the definition of the Y combinator,
which is defined here, it's got exactly

00:11:00.000 --> 00:11:05.610
the same structure. Here we have a function,
and here we have another copy of the

00:11:05.610 --> 00:11:09.930
same function, so it's exactly the same
idea of self application. The only

00:11:09.930 --> 00:11:14.310
difference here, we haven't got lambda x,
x x, we've got an f in the way, and that's

00:11:14.310 --> 00:11:17.970
the f which we're going to be kind of
repeatedly applying when we do the

00:11:17.970 --> 00:11:22.410
recursion. So this is the Y combinator.
It's not recursive, but it encodes

00:11:22.410 --> 00:11:26.279
recursion. And this is a very simple but
powerful idea, and you can do this in

00:11:26.279 --> 00:11:29.519
most programming languages, unless you
have some kind of type system which

00:11:29.519 --> 00:11:33.420
would stop you from doing this. This
gives you a way of doing recursion in a

00:11:33.420 --> 00:11:36.600
language which doesn't have any
recursion at all. If you want to know

00:11:36.600 --> 00:11:40.410
where it comes from, it was invented by
a mathematician from the United States -

00:11:40.410 --> 00:11:44.790
Haskell Curry, and this is the Haskell
who gives his name to the Haskell

00:11:44.790 --> 00:11:48.930
programming language. So if anyone asks
you about the Y combinator, this is what

00:11:48.930 --> 00:11:53.550
it is. If you want to know a bit more
about the Y combinator, you can of

00:11:53.550 --> 00:11:57.360
course look online, and there's a very
nice Wikipedia page about this, where you

00:11:57.360 --> 00:12:00.810
can find more details about these kind
of things, and see how to do some of the

00:12:00.810 --> 00:12:04.529
calculations and proofs of some of the
things which I have been saying. But

00:12:04.529 --> 00:12:09.029
actually, it's interesting that the top
hit on Google for Y combinator is not

00:12:09.029 --> 00:12:13.170
this stuff. It's actually a company which
is called Y combinator. And you think, well

00:12:13.170 --> 00:12:16.440
why would anyone call their company Y
combinator? If you look at the company's

00:12:16.440 --> 00:12:19.589
web page, they've got a frequently asked
questions list, and one of the questions

00:12:19.589 --> 00:12:23.579
is - why did you choose the name Y
combinator for your company? And they say

00:12:23.579 --> 00:12:27.810
a number of things here - so Y combinator
is one of the coolest ideas in Computer

00:12:27.810 --> 00:12:30.510
Science, and of course I'm going to agree
with this, and I think this is a very nice,

00:12:30.510 --> 00:12:34.680
very interesting, fundamental idea
about how you do recursion in a language

00:12:34.680 --> 00:12:38.279
which doesn't have recursion. And it's
also a metaphor for what this company

00:12:38.279 --> 00:12:43.589
does. So the Y combinator is a
way of having programs that run

00:12:43.589 --> 00:12:46.980
other programs, and in this case it's a
way of doing recursion in a language

00:12:46.980 --> 00:12:50.160
which doesn't have recursion. And that's
basically what their company is doing -

00:12:50.160 --> 00:12:53.370
they're a company that helps start
companies - they're a startup incubator in

00:12:53.370 --> 00:12:56.699
Silicon Valley, and it's the same kind
of self application idea. They want

00:12:56.699 --> 00:13:00.720
to help someone to make a company,
and it's the same thing here - we

00:13:00.720 --> 00:13:05.490
want to have programs that run other
programs. So for me, this is certainly one

00:13:05.490 --> 00:13:10.579
of the coolest ideas in Computer Science.

00:13:10.579 --> 00:13:16.489
This is Alonzo Church, who was a mathematician
at Princeton University in the United

00:13:16.489 --> 00:13:21.980
States, and he was the person who
invented the Lambda Calculus, and what he

00:13:21.980 --> 00:13:27.519
was interested in, is what
is the notion of a function...

