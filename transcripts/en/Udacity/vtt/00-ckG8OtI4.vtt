WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Welcome to office hours, week 3.

00:00:03.000 --> 00:00:05.000
The first question we have from the forums is

00:00:05.000 --> 00:00:09.000
are the tools Lex and YACC that we use throughout lecture and in the homeworks

00:00:09.000 --> 00:00:11.000
used outside of the classroom?

00:00:11.000 --> 00:00:13.000
That's a good question, Peter.

00:00:13.000 --> 00:00:16.000
Actually, the answer is a resounding yes.

00:00:16.000 --> 00:00:20.000
A number of times in the real world as well as in my research career

00:00:20.000 --> 00:00:26.000
I have used tools like the lexer and parser generators we're learning about in this class,

00:00:26.000 --> 00:00:28.000
Programming Languages.

00:00:28.000 --> 00:00:31.000
And it turns out that there's effectively a standard,

00:00:31.000 --> 00:00:36.000
this notion of making lexical analyzers or making parsers.

00:00:36.000 --> 00:00:42.000
It's so common, it's so popular that there is support for it for almost every language.

00:00:42.000 --> 00:00:47.000
The original tool for this was called Lex, a lexical analyzer generator,

00:00:47.000 --> 00:00:50.000
and the name in there, generator, is important.

00:00:50.000 --> 00:00:53.000
The idea was you would just write out some regular expressions,

00:00:53.000 --> 00:00:58.000
and this tool would automatically make the finite state machine,

00:00:58.000 --> 00:01:00.000
the lexical analyzer, for you,

00:01:00.000 --> 00:01:03.000
saving you a lot of time and grungy implementation work

00:01:03.000 --> 00:01:07.000
of converting regular expressions down to finite state machines.

00:01:07.000 --> 00:01:11.000
It was called a lexical analyzer generator, but it was proprietary software at the time

00:01:11.000 --> 00:01:13.000
and it only worked for C.

00:01:13.000 --> 00:01:18.000
Similarly, there were many attempts to make compilers or interpreters,

00:01:18.000 --> 00:01:22.000
so it was really important to be able to write down a context-free grammar

00:01:22.000 --> 00:01:26.000
and spit out a parser, something that would recognize the language

00:01:26.000 --> 00:01:29.000
and make an abstract syntax tree or a parse tree.

00:01:29.000 --> 00:01:33.000
So there were a number of so-called compiler compilers,

00:01:33.000 --> 00:01:36.000
tools that would allow you to write your own compiler,

00:01:36.000 --> 00:01:43.000
and one of the most famous was known as Yet Another Compiler Compiler, or YACC.

00:01:43.000 --> 00:01:46.000
Both Lex and YACC were proprietary software,

00:01:46.000 --> 00:01:50.000
so the GNU Project made free versions of them called Flex,

00:01:50.000 --> 00:01:53.000
a fast lexical analyzer generator,

00:01:53.000 --> 00:01:59.000
and Bison, Bison being a pun on YACC, which were then very widely used.

00:01:59.000 --> 00:02:03.000
Initially, they only supported the languages C and C++.

00:02:03.000 --> 00:02:07.000
But as time has gone by, you can find them for many other languages,

00:02:07.000 --> 00:02:10.000
so for example, Ruby, a scripting language a bit like Python,

00:02:10.000 --> 00:02:13.000
as Ruby-Lex and Ruby-YACC.

00:02:13.000 --> 00:02:18.000
Python has things like PLY. Java has similar tools. CUP is an example of 1 of them.

00:02:18.000 --> 00:02:23.000
OCaml, a language near and dear to my heart that you may know as Microsoft's F#,

00:02:23.000 --> 00:02:26.000
has ocamllex and ocamlyacc.

00:02:26.000 --> 00:02:28.000
So exactly the same sorts of ideas.

00:02:28.000 --> 00:02:31.000
You write out a regular expression and then some code to do.

00:02:31.000 --> 00:02:33.000
You write out a grammar and then for each rule

00:02:33.000 --> 00:02:36.000
you write out how to build up the abstract syntax tree.

00:02:36.000 --> 00:02:40.000
That's exactly the same format that are used in the lexical analyzer

00:02:40.000 --> 00:02:43.000
and parser generator tools for all of the other languages.

00:02:43.000 --> 00:02:47.000
So the techniques that you're learning in this class really carry over directly.

00:02:47.000 --> 00:02:49.000
The next time you want to make a little scripting language

00:02:49.000 --> 00:02:52.000
you can use exactly the same sorts of things we've learned here.

00:02:52.000 --> 00:02:56.000
So yes, I and the real world use, more or less, exactly these tools

00:02:56.000 --> 09:59:59.000
depending on exactly the language we're targeting.

