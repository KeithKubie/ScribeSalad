WEBVTT
Kind: captions
Language: en

00:00:00.700 --> 00:00:03.939
Two-way associations are trickier than one-way association.

00:00:03.939 --> 00:00:08.330
One approach is to just duplicate the approach we had with one-way associations.

00:00:08.330 --> 00:00:15.300
That is have your attribute in class A pointing to an instance in class B and

00:00:15.300 --> 00:00:20.370
have in class B, an attribute which points to an instance in class A.

00:00:20.370 --> 00:00:21.428
Or you could do these with,

00:00:21.428 --> 00:00:24.300
with vectors if there's many, too many relationships.

00:00:24.300 --> 00:00:26.010
You can use this approach if

00:00:27.550 --> 00:00:30.260
if you don't run into referential integrity constraints.

00:00:30.260 --> 00:00:33.240
If you have referential integrity constraints, you have to make sure, for

00:00:33.240 --> 00:00:37.300
example, when you're deleting an element from a vector in instance of class A,

00:00:37.300 --> 00:00:41.220
that you also go over and find the instance in class B.

00:00:41.220 --> 00:00:44.950
And look in its vector to find the back pointer over to the instance in

00:00:44.950 --> 00:00:46.770
class A and make sure that's deleted.

00:00:46.770 --> 00:00:49.410
Puts an extra burden and complexity on your program.

00:00:49.410 --> 00:00:52.880
An alternative to having a symmetric solution is to

00:00:52.880 --> 00:00:56.200
just have pointers in one direction.

00:00:56.200 --> 00:01:00.996
If you want to traverse in the other direction, you have to do a search.

00:01:00.996 --> 00:01:04.160
So, let's say we'd like to go from an instance in class B

00:01:04.160 --> 00:01:06.200
to an instance in class A.

00:01:06.200 --> 00:01:09.430
First you have to find that instance in class B and

00:01:09.430 --> 00:01:14.030
from it go back and find the instance in class A.

00:01:14.030 --> 00:01:15.190
It's extra work.

00:01:15.190 --> 00:01:18.740
And a third approach I want to mention is to use associations themselves

00:01:18.740 --> 00:01:19.430
as objects.

