WEBVTT
Kind: captions
Language: en

00:00:11.856 --> 00:00:13.110
IKAI LAN: Oh, hey, we're live.

00:00:13.110 --> 00:00:15.030
[LAUGHTER]

00:00:15.030 --> 00:00:18.270
We have these new lights in the
studio, so I can't see the

00:00:18.270 --> 00:00:18.850
[? signalist. ?]

00:00:18.850 --> 00:00:20.060
And again, we're live.

00:00:20.060 --> 00:00:21.920
So I probably shouldn't
be saying all this.

00:00:21.920 --> 00:00:22.550
Hi, everybody.

00:00:22.550 --> 00:00:26.110
Welcome to another addition of
Google Developers Live, an

00:00:26.110 --> 00:00:26.830
Apps Script.

00:00:26.830 --> 00:00:27.840
My name's Ikai Lan.

00:00:27.840 --> 00:00:29.200
ARUN NAGARAJAN: Arun
Nagarajan here.

00:00:29.200 --> 00:00:32.130
And we're here to hold
office hours.

00:00:32.130 --> 00:00:34.795
So Arun and [? Killian, ?]

00:00:34.795 --> 00:00:36.630
who you can't see, is off
screen right now.

00:00:36.630 --> 00:00:38.310
They've been working on
some cool stuff that

00:00:38.310 --> 00:00:40.950
they want to demo.

00:00:40.950 --> 00:00:42.080
ARUN NAGARAJAN: We're not going
to show it right away,

00:00:42.080 --> 00:00:43.700
but we'll pre-announce
it, I guess.

00:00:43.700 --> 00:00:44.632
IKAI LAN: Not show It.

00:00:44.632 --> 00:00:45.100
[LAUGHTER]

00:00:45.100 --> 00:00:46.520
Oh.

00:00:46.520 --> 00:00:48.310
ARUN NAGARAJAN: We're going to
put it in an official blog

00:00:48.310 --> 00:00:52.170
post and launch it in that way,
that we can actually get

00:00:52.170 --> 00:00:54.170
our official stance out there.

00:00:54.170 --> 00:00:56.980
But we'll pre-announce it for
the folks that tune in--

00:00:56.980 --> 00:01:00.440
the loyal guys and girls
that listen in.

00:01:00.440 --> 00:01:03.100
So we're going to actually
working on a simple app that

00:01:03.100 --> 00:01:04.849
we're going to put
out very soon.

00:01:04.849 --> 00:01:07.845
It's around the election, so
obviously we have a week and a

00:01:07.845 --> 00:01:10.990
half to go to the election,
so a timely interesting

00:01:10.990 --> 00:01:11.415
application.

00:01:11.415 --> 00:01:13.950
And the idea is that we're going
to be using the Google

00:01:13.950 --> 00:01:18.790
Civic API, which lists your
polling place, based on where

00:01:18.790 --> 00:01:21.600
you're registered to vote, and
it'll show it in a map and

00:01:21.600 --> 00:01:24.600
allow you to create a calendar
event and other things that

00:01:24.600 --> 00:01:25.990
we'll walk through.

00:01:25.990 --> 00:01:29.250
But the basic idea is to build
a full-featured sample web

00:01:29.250 --> 00:01:32.120
application built on top
of Google Apps Script.

00:01:32.120 --> 00:01:34.330
And developer relations--

00:01:34.330 --> 00:01:35.750
we're developers ourselves--

00:01:35.750 --> 00:01:38.630
and the point is for us to go
through the exercise that you

00:01:38.630 --> 00:01:39.320
go through.

00:01:39.320 --> 00:01:42.590
It's got a lot of good value,
and then ultimately, we'll

00:01:42.590 --> 00:01:45.980
release the source code, as
well, for you guys to take and

00:01:45.980 --> 00:01:47.930
really tweak it and add
more features and

00:01:47.930 --> 00:01:49.350
capabilities to it.

00:01:49.350 --> 00:01:53.670
IKAI LAN: And I know that you
guys are working on a series

00:01:53.670 --> 00:01:57.930
of blog posts describing how it
was done, but what are some

00:01:57.930 --> 00:02:00.660
of the different services?

00:02:00.660 --> 00:02:02.410
I've seen some stuff
that's pretty good.

00:02:02.410 --> 00:02:05.570
It's a web UI, and there's some
cool stuff going on--

00:02:05.570 --> 00:02:06.760
integrates such Google
accounts.

00:02:06.760 --> 00:02:08.479
What are some different
services you're

00:02:08.479 --> 00:02:09.490
using to build this?

00:02:09.490 --> 00:02:11.750
ARUN NAGARAJAN: Yeah, so first
and foremost, it's an HTML

00:02:11.750 --> 00:02:15.550
Service application that uses
jQuery pretty extensively to

00:02:15.550 --> 00:02:20.140
do both Ajax calls to the
adjacent service, and also to

00:02:20.140 --> 00:02:23.750
build a fairly decent looking
UI, I would say, clean and

00:02:23.750 --> 00:02:26.210
concise but crisp, as well.

00:02:26.210 --> 00:02:29.800
And so that's the interface
aspect of it.

00:02:29.800 --> 00:02:33.730
HTML Service serving up a
jQuery, which does a bunch of

00:02:33.730 --> 00:02:35.150
stuff for the client
side, as well.

00:02:35.150 --> 00:02:38.120
But behind the scenes, we're
using the Map service to get a

00:02:38.120 --> 00:02:40.710
static map of where the
polling location is.

00:02:40.710 --> 00:02:43.730
We're using UserProperties to
store things about the user

00:02:43.730 --> 00:02:46.380
and their secure location, so
when they come back the next

00:02:46.380 --> 00:02:48.510
time, we remember the address.

00:02:48.510 --> 00:02:52.230
We're using the Document app
to create a document with

00:02:52.230 --> 00:02:55.220
driving direction to where
the polling place is.

00:02:55.220 --> 00:02:57.670
We're using the Calendar app
to create an event with a

00:02:57.670 --> 00:03:01.390
reminder and the location in
there, so you can get a

00:03:01.390 --> 00:03:04.170
reminder the day before the
election to go vote, and where

00:03:04.170 --> 00:03:05.510
you go vote.

00:03:05.510 --> 00:03:07.580
And we also give you the ability
to send yourself an

00:03:07.580 --> 00:03:11.180
email with the details on
where you got to go.

00:03:11.180 --> 00:03:12.730
So those are some of services
we're using.

00:03:12.730 --> 00:03:14.500
Let me see if I'm forgetting
anything.

00:03:14.500 --> 00:03:16.120
IKAI LAN: It's like you guys
are using every single API.

00:03:16.120 --> 00:03:16.550
[LAUGHTER]

00:03:16.550 --> 00:03:18.880
You just have to figure
out how to cram in

00:03:18.880 --> 00:03:20.640
URL Shortner, [LAUGHTER]

00:03:20.640 --> 00:03:23.390
Google Tasks and BigQuery.

00:03:23.390 --> 00:03:24.650
Oh my goodness, BigQuery.

00:03:24.650 --> 00:03:27.960
So if you haven't seen our
office hours, we did a

00:03:27.960 --> 00:03:32.130
BigQuery office hour live
session on Tuesday, and

00:03:32.130 --> 00:03:32.670
there's a video.

00:03:32.670 --> 00:03:35.820
So BigQuery is a tool that
allows you to do a daily

00:03:35.820 --> 00:03:37.310
analysis on very large
data sets.

00:03:37.310 --> 00:03:40.370
So I get an email sometimes
where people say hey, got a

00:03:40.370 --> 00:03:41.090
spreadsheet.

00:03:41.090 --> 00:03:43.270
It's got 50,000 rows.

00:03:43.270 --> 00:03:44.180
It's very large.

00:03:44.180 --> 00:03:46.460
Now, that is very
large by a lot.

00:03:46.460 --> 00:03:47.950
I certainly couldn't
do that by hand.

00:03:47.950 --> 00:03:49.830
But we're talking about
BigQuery, we're talking

00:03:49.830 --> 00:03:53.720
about-- let's say you've got a
data set that's terabytes of

00:03:53.720 --> 00:03:56.660
data, or even a couple hundred
of gigabytes of data.

00:03:56.660 --> 00:03:59.630
It's pretty large.

00:03:59.630 --> 00:04:01.050
You could put that in
the spreadsheet--

00:04:01.050 --> 00:04:02.760
I actually don't know
if you could.

00:04:02.760 --> 00:04:04.030
I think the answer's no.

00:04:04.030 --> 00:04:07.170
You can't put a couple
hundred terabytes.

00:04:07.170 --> 00:04:08.675
Your copy/paste buffer's
not that big.

00:04:08.675 --> 00:04:12.005
But if you wanted to write
scripts and build a UI for

00:04:12.005 --> 00:04:14.940
your big data, that's certainly
something worth

00:04:14.940 --> 00:04:15.530
looking into.

00:04:15.530 --> 00:04:19.790
So check us out at
developers.google.com/live,

00:04:19.790 --> 00:04:22.550
and go to our YouTube channel.

00:04:22.550 --> 00:04:26.640
Because we've recorded it at
youtube.com/googledevelopers,

00:04:26.640 --> 00:04:28.940
And just scroll down
a little bit.

00:04:28.940 --> 00:04:32.100
Unfortunately, YouTube always
picks the worst preview image.

00:04:32.100 --> 00:04:34.950
So they've got a picture
of me going [LAUGHTER]

00:04:34.950 --> 00:04:37.720
like this, and it's
like a DMV photo.

00:04:37.720 --> 00:04:39.600
So definitely check that out.

00:04:39.600 --> 00:04:41.100
ARUN NAGARAJAN: There's going
to be a way change that, no?

00:04:41.100 --> 00:04:42.540
IKAI LAN: There is, but
I'm in a bad mood--

00:04:42.540 --> 00:04:43.530
[INTERPOSING VOICES]

00:04:43.530 --> 00:04:44.830
I never have been accessed
to anything.

00:04:44.830 --> 00:04:49.310
People just keep taking away
my privileges around here.

00:04:49.310 --> 00:04:49.870
For good reason.

00:04:49.870 --> 00:04:50.790
Very good reason.

00:04:50.790 --> 00:04:56.900
So I want to talk about this
currently unnamed app, Because

00:04:56.900 --> 00:04:59.230
you guys should all keep a look
out for it on the blog.

00:04:59.230 --> 00:05:01.040
We have a blog post going
up very soon.

00:05:01.040 --> 00:05:02.120
That said, I think it's
googleappsdevelo

00:05:02.120 --> 00:05:04.700
per.blogspot.com.

00:05:04.700 --> 00:05:07.020
And if you're ever not sure how
to get to our blog, just

00:05:07.020 --> 00:05:10.180
go to your favorite search
engine and type in Google Apps

00:05:10.180 --> 00:05:12.050
Developer Blog.

00:05:12.050 --> 00:05:15.110
I don't know that that's
actually easier to remember.

00:05:15.110 --> 00:05:16.960
ARUN NAGARAJAN: Google Apps,
which is what we represent.

00:05:16.960 --> 00:05:17.540
IKAI LAN: Which is what we do.

00:05:17.540 --> 00:05:19.365
ARUN NAGARAJAN: Developers,
which is what you guys are,

00:05:19.365 --> 00:05:20.680
and blog, which is what
we're talking about.

00:05:20.680 --> 00:05:23.610
IKAI LAN: Which is what
the stuff is going on.

00:05:23.610 --> 00:05:25.520
So that's an announcement,
too.

00:05:25.520 --> 00:05:28.070
A third announcement is that we
still have spots in our Los

00:05:28.070 --> 00:05:28.970
Angeles Hackathon.

00:05:28.970 --> 00:05:30.890
I know that a lot of people
don't like to sign up for

00:05:30.890 --> 00:05:32.840
things way in advance.

00:05:32.840 --> 00:05:35.830
I know I have a friend that
goes hey, are you free in

00:05:35.830 --> 00:05:37.720
February for lunch.

00:05:37.720 --> 00:05:40.350
And I'm like what are you--

00:05:40.350 --> 00:05:40.940
what is this?

00:05:40.940 --> 00:05:42.090
I don't even--

00:05:42.090 --> 00:05:45.340
no, he's visiting from
some city or other.

00:05:45.340 --> 00:05:49.280
So I would that's coming
up on November 13.

00:05:49.280 --> 00:05:50.760
So we still have spots.

00:05:50.760 --> 00:05:53.020
I know it's still kind
of early, so we'll be

00:05:53.020 --> 00:05:54.200
periodically reminding you.

00:05:54.200 --> 00:05:54.980
I'll be there.

00:05:54.980 --> 00:05:56.150
Arun's going to be there.

00:05:56.150 --> 00:05:57.080
[? Killian's ?] going
to be there.

00:05:57.080 --> 00:05:59.210
And when you guys see this
Election app they're working

00:05:59.210 --> 00:06:01.510
on, you're going to want to be
there, because you want to bug

00:06:01.510 --> 00:06:03.920
them about it.

00:06:03.920 --> 00:06:06.240
I'm sure you guys love
hearing about it.

00:06:06.240 --> 00:06:08.495
No, you guys haven't even
started talking about it yet.

00:06:08.495 --> 00:06:08.830
You're not sick of it.

00:06:08.830 --> 00:06:10.290
ARUN NAGARAJAN: It's
a pre-announcement.

00:06:10.290 --> 00:06:11.680
Yeah, so check it out.

00:06:11.680 --> 00:06:14.670
And we're going to actually
release it to the Chrome Web

00:06:14.670 --> 00:06:19.120
Store, so we'll talk through the
process for releasing your

00:06:19.120 --> 00:06:20.990
web apps through the Chrome
Web Store, as well.

00:06:20.990 --> 00:06:24.240
So this blog post will cover
a lot of the mechanics.

00:06:24.240 --> 00:06:25.930
Obviously, we ran into some
interesting problems

00:06:25.930 --> 00:06:29.280
ourselves, which we'll bug our
engineers about, and hopefully

00:06:29.280 --> 00:06:32.170
it'll improve the whole product
and affect whole

00:06:32.170 --> 00:06:33.620
community in a positive way.

00:06:33.620 --> 00:06:36.300
So there's a lot of good
reasons why we do it.

00:06:36.300 --> 00:06:38.790
And if you have ideas for
other sample apps--

00:06:38.790 --> 00:06:41.400
this extensive sample app that
you want us to work on.

00:06:41.400 --> 00:06:44.750
Shoot us an idea, and maybe
we'll talk about it during

00:06:44.750 --> 00:06:47.640
office hours and see what
the interest level is.

00:06:47.640 --> 00:06:51.900
And we'd love to do one a
quarter, a few a year to keep

00:06:51.900 --> 00:06:54.720
the product moving forward, and
also to give you guys more

00:06:54.720 --> 00:06:56.826
sample code to work with.

00:06:56.826 --> 00:06:57.320
IKAI LAN: Right.

00:06:57.320 --> 00:07:01.700
And I think you guys are
planning on doing a special

00:07:01.700 --> 00:07:04.700
live show about this
application, how it's moved.

00:07:04.700 --> 00:07:06.390
It's going to be a very
technical deep dive.

00:07:06.390 --> 00:07:08.050
It's not scheduled, yet.

00:07:08.050 --> 00:07:10.750
And I'm sorry we're still
looking for a slot.

00:07:10.750 --> 00:07:15.720
But if you just keep looking at
developers.google.com/live,

00:07:15.720 --> 00:07:17.640
we will post when
that's going on.

00:07:17.640 --> 00:07:19.860
And don't worry if you miss it,
because we do record every

00:07:19.860 --> 00:07:21.650
single one of our shows.

00:07:21.650 --> 00:07:23.810
So that'll be up.

00:07:23.810 --> 00:07:25.920
These next few months, you're
going to be seeing a lot of

00:07:25.920 --> 00:07:27.970
these, what call
special shows.

00:07:27.970 --> 00:07:29.350
We're going to be one of these,
and we're going to have

00:07:29.350 --> 00:07:30.520
a few more interesting shows.

00:07:30.520 --> 00:07:32.320
But if you guys have any ideas
for shows you want

00:07:32.320 --> 00:07:33.920
to see, let us know.

00:07:33.920 --> 00:07:36.850
I had one idea, and I don't
know how it's going to go.

00:07:36.850 --> 00:07:38.360
It's the Reading Rainbow idea.

00:07:38.360 --> 00:07:41.050
I think the only one that's on
board, where we talk about

00:07:41.050 --> 00:07:42.280
some of the books we like.

00:07:42.280 --> 00:07:43.440
I don't know.

00:07:43.440 --> 00:07:43.730
[LAUGHTER]

00:07:43.730 --> 00:07:44.560
Let's just try it.

00:07:44.560 --> 00:07:45.670
I mean, what's the harm?

00:07:45.670 --> 00:07:48.600
ARUN NAGARAJAN: Yeah Well, in
all seriousness, we're going

00:07:48.600 --> 00:07:49.660
to show the code.

00:07:49.660 --> 00:07:52.540
We're going to walk down the
structure of the code.

00:07:52.540 --> 00:07:55.730
Obviously, it's a sample app,
and it's not going to do

00:07:55.730 --> 00:07:57.660
everything the API can do.

00:07:57.660 --> 00:08:01.160
But take a look through, submit
your questions, and

00:08:01.160 --> 00:08:03.700
we'll actually maybe even do
some live coding of new

00:08:03.700 --> 00:08:05.340
capabilities, depending
on how things go.

00:08:05.340 --> 00:08:09.410
So I know we have a lot coming
up on that, what we're calling

00:08:09.410 --> 00:08:10.570
topical of GDLs

00:08:10.570 --> 00:08:11.710
IKAI LAN: Topical--

00:08:11.710 --> 00:08:13.240
I don't think we should
use that.

00:08:13.240 --> 00:08:14.832
Topical sounds like something
you put on your skin.

00:08:14.832 --> 00:08:15.720
[LAUGHTER]

00:08:15.720 --> 00:08:19.250
So we'll come up with
a better name.

00:08:19.250 --> 00:08:20.360
I call them special editions.

00:08:20.360 --> 00:08:22.070
ARUN NAGARAJAN: Special
editions, where we actually

00:08:22.070 --> 00:08:26.250
show code and walk through
layout and what process we

00:08:26.250 --> 00:08:29.260
went through, and workarounds,
though sometimes you have to

00:08:29.260 --> 00:08:30.550
end up using--

00:08:30.550 --> 00:08:34.260
all sorts of details about the
code itself, so that it's not

00:08:34.260 --> 00:08:37.620
just a Q&amp;A, but you can actually
watch and learn and

00:08:37.620 --> 00:08:41.206
replay it and use it
as a resource.

00:08:41.206 --> 00:08:43.740
IKAI LAN: So I'm looking at
the Q&amp;A, and I realized I

00:08:43.740 --> 00:08:47.310
didn't post a link to the Q&amp;A
this time, so we're going to

00:08:47.310 --> 00:08:49.780
have to remedy that for
the next office hours.

00:08:49.780 --> 00:08:52.230
But in the meantime, let's go
ahead and skip to the live

00:08:52.230 --> 00:08:54.210
Hangout and see if there's
anyone on.

00:09:00.560 --> 00:09:03.130
IKAI LAN: Can you see that?

00:09:03.130 --> 00:09:04.840
All right, I'm just making sure
you have a line of sight.

00:09:04.840 --> 00:09:06.850
It looks like you're
obstructed here.

00:09:06.850 --> 00:09:07.620
ARUN NAGARAJAN: I'm sorry.

00:09:07.620 --> 00:09:12.320
I have to look away for a
second for the video.

00:09:12.320 --> 00:09:12.920
Is that Bill?

00:09:12.920 --> 00:09:13.170
Is that right?

00:09:13.170 --> 00:09:14.100
IKAI LAN: I see Bill.

00:09:14.100 --> 00:09:14.660
BILL: Yeah, that's me.

00:09:14.660 --> 00:09:15.460
ARUN NAGARAJAN: Hey,
Bill, how are you?

00:09:15.460 --> 00:09:15.880
Good morning.

00:09:15.880 --> 00:09:16.080
BILL: Good.

00:09:16.080 --> 00:09:17.060
How are you guys doing?

00:09:17.060 --> 00:09:17.920
ARUN NAGARAJAN: Good.

00:09:17.920 --> 00:09:19.170
IKAI LAN: Good.

00:09:19.170 --> 00:09:21.610
BILL: I was waiting for today,
because we've got a pretty

00:09:21.610 --> 00:09:25.010
long string without
release notes.

00:09:25.010 --> 00:09:26.850
So I'm expecting something
really big coming

00:09:26.850 --> 00:09:28.870
at it any day now.

00:09:28.870 --> 00:09:31.030
IKAI LAN: Oh, they're
on to us.

00:09:31.030 --> 00:09:33.840
No, nothing super big.

00:09:33.840 --> 00:09:35.960
But you're right.

00:09:35.960 --> 00:09:37.940
We haven't done any releases
in the last few weeks.

00:09:37.940 --> 00:09:39.690
I'm not sure when the
next release is.

00:09:39.690 --> 00:09:40.400
It's either--

00:09:40.400 --> 00:09:41.340
BILL: It's eminent.

00:09:41.340 --> 00:09:43.010
IKAI LAN: Is it tonight,
next Thursday?

00:09:43.010 --> 00:09:45.810
I don't know if there's anything
that's what we call

00:09:45.810 --> 00:09:48.210
user-facing, and then we do a
lot of stuff behind the scenes

00:09:48.210 --> 00:09:49.720
to make sure stuff's always
working better.

00:09:49.720 --> 00:09:52.936
But no, release notes
today, not yet.

00:09:52.936 --> 00:09:56.170
ARUN NAGARAJAN: But do stay
tuned for next week.

00:09:56.170 --> 00:09:58.290
BILL: OK, because I will look
back, and it's been a long

00:09:58.290 --> 00:10:01.000
time since we've gone this
long without some release

00:10:01.000 --> 00:10:02.010
notes of some sort.

00:10:02.010 --> 00:10:06.770
[LAUGHTER]

00:10:06.770 --> 00:10:09.560
ARUN NAGARAJAN: No, it's
something just to give you a

00:10:09.560 --> 00:10:12.390
sense for, as Ikai said
for the release notes.

00:10:12.390 --> 00:10:14.960
So there are features and fixes
and improvements that

00:10:14.960 --> 00:10:19.320
are going through,
weekly probably.

00:10:19.320 --> 00:10:22.190
But we call through the list of
things that are changing,

00:10:22.190 --> 00:10:25.680
ensure that they're working the
way we wanted to, ensure

00:10:25.680 --> 00:10:27.570
that they'd make sense for
us to document and

00:10:27.570 --> 00:10:28.940
highlight to our users.

00:10:28.940 --> 00:10:31.320
And those are the ones
that make the actual

00:10:31.320 --> 00:10:33.930
release notes webpage.

00:10:33.930 --> 00:10:36.430
It's not a one-to-one
correspondence to the actual

00:10:36.430 --> 00:10:38.760
improvements and fixes
that you may see.

00:10:38.760 --> 00:10:41.260
There's certain things that are
internal upkeep that we

00:10:41.260 --> 00:10:43.040
keep doing and ensure
that systems

00:10:43.040 --> 00:10:45.200
running smoothly, obviously.

00:10:45.200 --> 00:10:47.860
And hopefully the next one will
be a bit longer than the

00:10:47.860 --> 00:10:48.680
ones before.

00:10:48.680 --> 00:10:49.390
IKAI LAN: I hope so.

00:10:49.390 --> 00:10:49.840
[LAUGHTER]

00:10:49.840 --> 00:10:52.430
Yeah, I know when we're going
through release notes

00:10:52.430 --> 00:10:54.655
sometimes we're like,
what is this?

00:10:54.655 --> 00:10:55.410
[LAUGHTER]

00:10:55.410 --> 00:10:57.450
I don't even know what
this, really.

00:10:57.450 --> 00:10:59.710
ARUN NAGARAJAN: Yeah, so if we
don't know what some fix is,

00:10:59.710 --> 00:11:01.270
we probably won't
write about it.

00:11:01.270 --> 00:11:02.770
[LAUGHTER]

00:11:02.770 --> 00:11:05.990
So that's one of the reasons,
as well, as you can imagine

00:11:05.990 --> 00:11:09.110
there was backlog of
housekeeping and things that

00:11:09.110 --> 00:11:10.710
we go through.

00:11:10.710 --> 00:11:11.110
BILL: Cool.

00:11:11.110 --> 00:11:15.552
Well, I do have one question
today, and it's about ScriptDb

00:11:15.552 --> 00:11:18.630
Ikai, I mentioned last time
that I have a little

00:11:18.630 --> 00:11:19.790
experiment running to see--

00:11:19.790 --> 00:11:21.250
IKAI LAN: Yeah, I was waiting
for your email,

00:11:21.250 --> 00:11:22.090
and I never got it.

00:11:22.090 --> 00:11:23.140
Sad.

00:11:23.140 --> 00:11:23.970
BILL: I'm not done yet.

00:11:23.970 --> 00:11:25.640
IKAI LAN: OK.

00:11:25.640 --> 00:11:27.100
Like the release notes you've
got to wait for the--

00:11:27.100 --> 00:11:28.080
[LAUGHTER]

00:11:28.080 --> 00:11:28.570
ARUN NAGARAJAN: Yes.

00:11:28.570 --> 00:11:28.880
Yes.

00:11:28.880 --> 00:11:29.750
It goes both ways.

00:11:29.750 --> 00:11:31.000
BILL: Well, good.

00:11:33.080 --> 00:11:37.000
My impression was that the COUNT
method should return

00:11:37.000 --> 00:11:40.400
more, the number of objects that
are in there, but it's

00:11:40.400 --> 00:11:41.810
been a little erratic.

00:11:41.810 --> 00:11:46.240
And most frequently, it returns
a number somewhere

00:11:46.240 --> 00:11:49.460
around 50,000, not necessarily
right on.

00:11:49.460 --> 00:11:52.850
So I was wondering, does the
number of objects return?

00:11:52.850 --> 00:11:55.560
Because I know there's a hard
limit of 50,000 objects for

00:11:55.560 --> 00:11:58.240
other queries.

00:11:58.240 --> 00:12:01.390
But my assumption was the COUNT
method would return the

00:12:01.390 --> 00:12:03.317
number of objects independent.

00:12:03.317 --> 00:12:07.310
It would stop and see the
1,000 [INAUDIBLE]

00:12:07.310 --> 00:12:09.016
2,000 objects.

00:12:09.016 --> 00:12:10.130
Can you comment on that?

00:12:10.130 --> 00:12:12.850
Do you know anything specific
about the COUNT method?

00:12:12.850 --> 00:12:14.970
IKAI LAN: Well, I know a few
things about the COUNT method,

00:12:14.970 --> 00:12:18.730
so to describe a little
about how ScriptDb

00:12:18.730 --> 00:12:19.840
works under the hood.

00:12:19.840 --> 00:12:23.760
I'm fascinated by data stores
for some reason.

00:12:23.760 --> 00:12:26.600
What happens is I've been
tracking and monitoring these

00:12:26.600 --> 00:12:29.460
ScriptDb issues that people
have been reporting, and

00:12:29.460 --> 00:12:31.480
there's some pretty interesting
ones out there.

00:12:31.480 --> 00:12:34.730
That the [? nSTREAMS ?] has been
trying to get to [BURP]

00:12:34.730 --> 00:12:36.440
the bottom of n.

00:12:36.440 --> 00:12:39.280
So if you think of a data store
like this, you've got

00:12:39.280 --> 00:12:42.840
the objects stored somewhere,
and this would be like a

00:12:42.840 --> 00:12:45.380
storage unit, or like
a library shelf.

00:12:45.380 --> 00:12:48.300
Right, you have a library shelf,
and we've also got an

00:12:48.300 --> 00:12:51.740
index, and in the index would
be something like a catalog

00:12:51.740 --> 00:12:52.290
inside a library.

00:12:52.290 --> 00:12:53.740
We would say where
is this book?

00:12:53.740 --> 00:12:56.140
When you do a query you're
hitting the index, and you're

00:12:56.140 --> 00:12:58.370
going through these things, and
then you're going to the

00:12:58.370 --> 00:13:01.320
library to actually fetch the
book and fetch the data.

00:13:01.320 --> 00:13:03.235
So that's what's happening when
you do a ScriptDb query

00:13:03.235 --> 00:13:05.340
is, you're going through this
index first-- you're going to

00:13:05.340 --> 00:13:05.990
this catalog.

00:13:05.990 --> 00:13:07.170
I don't even know if
they still have

00:13:07.170 --> 00:13:08.580
these anymore at libraries.

00:13:08.580 --> 00:13:09.080
[LAUGHTER]

00:13:09.080 --> 00:13:09.830
I know that when I was a kid--

00:13:09.830 --> 00:13:10.710
ARUN NAGARAJAN: The Dewey
Decimal System.

00:13:10.710 --> 00:13:11.285
IKAI LAN: Yeah, yeah, yeah.

00:13:11.285 --> 00:13:12.690
They still have the Dewey
Decimal System.

00:13:12.690 --> 00:13:14.331
I don't know if they have the
little cards that you have to

00:13:14.331 --> 00:13:15.980
flip through.

00:13:15.980 --> 00:13:17.840
So what's happening when you
do a query is you're going

00:13:17.840 --> 00:13:19.530
through these cards, you're
flipping through them, you're

00:13:19.530 --> 00:13:21.380
finding all the things you want,
you're pulling out these

00:13:21.380 --> 00:13:23.850
cards, and then you're going
and you're individually

00:13:23.850 --> 00:13:25.590
fetching these items back.

00:13:25.590 --> 00:13:28.970
So there are a lot of COUNT
Query My understanding of how

00:13:28.970 --> 00:13:31.480
COUNT Query works is that it's
going through this index, and

00:13:31.480 --> 00:13:33.390
you're just counting
a number of cards.

00:13:33.390 --> 00:13:36.440
Now, one of the issues
with that is that

00:13:36.440 --> 00:13:37.840
there's no way to--

00:13:37.840 --> 00:13:40.670
in a distributed system, it's
very difficult to do it

00:13:40.670 --> 00:13:43.600
cheaply, where you have indexing
synced up with

00:13:43.600 --> 00:13:44.550
something perfectly.

00:13:44.550 --> 00:13:47.820
I mean, we do our best, and in
most cases, we've got our

00:13:47.820 --> 00:13:48.450
bases covered.

00:13:48.450 --> 00:13:50.730
But what does happen from
time to time, and

00:13:50.730 --> 00:13:51.950
I've seen this reported--

00:13:51.950 --> 00:13:55.150
the symptoms as reported on
the issue tracker is that

00:13:55.150 --> 00:13:57.680
you'll do a query on something,
you'll say hey,

00:13:57.680 --> 00:14:00.730
I've got five results, and
you'll go to the data store

00:14:00.730 --> 00:14:02.290
you try to pull back those
five, but you won't

00:14:02.290 --> 00:14:03.400
go pull them back.

00:14:03.400 --> 00:14:07.460
Because they've been deleted or
updated, or the index is no

00:14:07.460 --> 00:14:08.700
longer valid.

00:14:08.700 --> 00:14:10.710
Now this is a problem, and
we're working hard

00:14:10.710 --> 00:14:11.750
to try to fix this.

00:14:11.750 --> 00:14:14.280
And it's my understanding
that COUNT first off,

00:14:14.280 --> 00:14:17.040
works on the index.

00:14:17.040 --> 00:14:20.140
If we're having inconsistency
bugs with the index and the

00:14:20.140 --> 00:14:24.200
actual Datastore, COUNT is not
going to be exactly accurate.

00:14:24.200 --> 00:14:26.240
And we're working on resolving
these when we can.

00:14:26.240 --> 00:14:28.650
ARUN NAGARAJAN: And it's also,
I think, the larger the

00:14:28.650 --> 00:14:32.110
database, the more likelihood
that COUNT is slightly off,

00:14:32.110 --> 00:14:35.440
because the data is
[? sharded, ?] right.

00:14:35.440 --> 00:14:39.035
IKAI LAN: It's likely from
a probability standpoint.

00:14:39.035 --> 00:14:42.000
In that, let's say there's 1%
chance-- it's not a 1% chance!

00:14:42.000 --> 00:14:42.890
[LAUGHTER]

00:14:42.890 --> 00:14:44.800
It's much smaller than that.

00:14:44.800 --> 00:14:47.910
But just because it's so
large the chances that

00:14:47.910 --> 00:14:48.670
you're going to be off.

00:14:48.670 --> 00:14:50.470
But it should be very,
very small in the

00:14:50.470 --> 00:14:51.320
order of single digits.

00:14:51.320 --> 00:14:52.410
I'm not saying that--

00:14:52.410 --> 00:14:54.270
for the most part, if you're
doing stuff on the order of

00:14:54.270 --> 00:14:56.010
single digits, and you're
doing these large COUNT

00:14:56.010 --> 00:15:00.800
operations, it's fine, right,
for all impractical purposes.

00:15:00.800 --> 00:15:02.410
Now I understand why
you want an exact

00:15:02.410 --> 00:15:03.720
count on a lot of cases.

00:15:03.720 --> 00:15:07.680
So the issue with the index is
that there are two things--

00:15:07.680 --> 00:15:08.850
I'm not really answering
your questions.

00:15:08.850 --> 00:15:10.700
This is a really roundabout
way of doing this.

00:15:10.700 --> 00:15:13.520
One is that first we need to
figure out how COUNT works, if

00:15:13.520 --> 00:15:16.340
COUNT does return the number
of objects in the query.

00:15:16.340 --> 00:15:20.170
Because we don't keep a running
count, especially of a

00:15:20.170 --> 00:15:22.490
query, because we can know
ahead of time all the

00:15:22.490 --> 00:15:23.740
different queries you're
going to do.

00:15:23.740 --> 00:15:27.240
You might say give me everyone
whose first name is Arun, and

00:15:27.240 --> 00:15:29.865
I might say give me all the
people that have a favorite

00:15:29.865 --> 00:15:30.960
color of red.

00:15:30.960 --> 00:15:33.460
And I can't know ahead of
time to index these.

00:15:33.460 --> 00:15:36.020
If I index them ahead of time,
quote unquote, "to keep a

00:15:36.020 --> 00:15:37.340
running count," I knew
you were always

00:15:37.340 --> 00:15:38.460
going to execute this.

00:15:38.460 --> 00:15:41.830
Every time someone adds a new
ScriptDb item, where there's a

00:15:41.830 --> 00:15:45.220
person's name Arun, I increment,
and whatever

00:15:45.220 --> 00:15:48.050
someone deletes an item, I
decrement that number.

00:15:48.050 --> 00:15:51.700
And that way I can return that
count to you, and what we call

00:15:51.700 --> 00:15:54.140
a constant time operation,
in that it just happens

00:15:54.140 --> 00:15:54.850
immediately, right.

00:15:54.850 --> 00:15:56.520
There's only one thing
that happens.

00:15:56.520 --> 00:15:59.230
Now when you have to go through
indexes to do counts,

00:15:59.230 --> 00:16:01.690
we have to traverse through each
one of the index times is

00:16:01.690 --> 00:16:03.640
one by one, so you go one, two,
three, four, five, six,

00:16:03.640 --> 00:16:04.200
seven, eight, nine, ten.

00:16:04.200 --> 00:16:06.860
Now it's very, very fast,
because it's an index, but

00:16:06.860 --> 00:16:09.850
there's still a traversal
happening.

00:16:09.850 --> 00:16:14.220
And there are ways to get this
down, but not as fast as what

00:16:14.220 --> 00:16:16.640
we call this Constant COUNT.

00:16:16.640 --> 00:16:20.560
So what I suspect might be
happening is, I wonder if the

00:16:20.560 --> 00:16:24.290
count, when it goes through
these 50,000 things, it's

00:16:24.290 --> 00:16:26.270
hitting some kind of time
limit or limit.

00:16:26.270 --> 00:16:28.030
There are two things are
possibly happening.

00:16:28.030 --> 00:16:32.130
One is that we're doing a full
query, or at least we're doing

00:16:32.130 --> 00:16:33.050
the index query.

00:16:33.050 --> 00:16:35.770
The index knows to stop at
50,000 or whatever the number

00:16:35.770 --> 00:16:37.590
is, and we're returning
that number to you.

00:16:37.590 --> 00:16:39.960
Or the second is that we're
hitting some time limit, and

00:16:39.960 --> 00:16:40.916
we're turning that to you.

00:16:40.916 --> 00:16:42.900
And I don't know what the
behavior is off the top of my

00:16:42.900 --> 00:16:45.580
head, but hopefully there's a
little bit of insight there as

00:16:45.580 --> 00:16:47.200
to how COUNT works.

00:16:47.200 --> 00:16:49.720
Now, the flip-side of this
is that if you were doing

00:16:49.720 --> 00:16:51.390
optimization--

00:16:51.390 --> 00:16:54.240
if you know that Arun constantly
queries for his

00:16:54.240 --> 00:16:59.190
name, it is a good practice
to keep a running count.

00:16:59.190 --> 00:17:02.380
And some people, they call this
a counter cache, right.

00:17:02.380 --> 00:17:04.089
Now again when you do something
like a counter

00:17:04.089 --> 00:17:06.960
cache, you have this problem
where it might get out sync,

00:17:06.960 --> 00:17:08.770
and you might be off
by one, again.

00:17:08.770 --> 00:17:10.440
It's like we're just solving
the same problems over and

00:17:10.440 --> 00:17:12.730
over and over again.

00:17:12.730 --> 00:17:14.839
So I know that you're not using
this for this purpose.

00:17:14.839 --> 00:17:16.750
I know you using it to
do some benchmarking.

00:17:16.750 --> 00:17:19.950
So this may or may not
be a helpful answer.

00:17:19.950 --> 00:17:22.700
I mean, hopefully it may explain
some of the issues

00:17:22.700 --> 00:17:26.260
you'll see at a larger scale
when you do notice that one or

00:17:26.260 --> 00:17:31.160
two items go missing because
it's fairly unlikely that when

00:17:31.160 --> 00:17:33.635
you're working with ScriptDb of
a couple hundred objects,

00:17:33.635 --> 00:17:34.800
anything will go missing.

00:17:34.800 --> 00:17:37.450
But when you're at 50,000, if
you're keeping track of them,

00:17:37.450 --> 00:17:38.860
and you notice an
inconsistency--

00:17:38.860 --> 00:17:41.050
now again, when I say go
missing, I'm not saying the

00:17:41.050 --> 00:17:41.580
data is deleted.

00:17:41.580 --> 00:17:42.080
It's there.

00:17:42.080 --> 00:17:45.140
I'm saying that it's not
updating the index.

00:17:45.140 --> 00:17:47.450
You might see issues
like that.

00:17:47.450 --> 00:17:50.620
BILL: Well, to give you an idea,
right now I just I just

00:17:50.620 --> 00:17:56.850
ran my counter and the
COUNT returns 56,691.

00:17:56.850 --> 00:17:59.460
I did exactly what you said was
I track the number that I

00:17:59.460 --> 00:18:01.110
was stuffing into it.

00:18:01.110 --> 00:18:05.560
According to my script, I've
stuffed 157,000 into it.

00:18:05.560 --> 00:18:06.840
So I haven't verified it.

00:18:09.750 --> 00:18:12.640
Because I know the script
stopped a couple of times, due

00:18:12.640 --> 00:18:13.730
to a time-out.

00:18:13.730 --> 00:18:18.470
So maybe it recorded some that
didn't actually go in.

00:18:18.470 --> 00:18:22.410
So I haven't actually verified
that there's in fact, 56,691

00:18:22.410 --> 00:18:28.260
objects in there or the 157,900
objects, but what I do

00:18:28.260 --> 00:18:31.240
know is it there's probably
more than 56,000 in there.

00:18:31.240 --> 00:18:34.940
And the last time I ran this
since it's been sitting there,

00:18:34.940 --> 00:18:37.590
it was a different number, and
returned me on the account, I

00:18:37.590 --> 00:18:41.605
think 100,000 one time.

00:18:41.605 --> 00:18:42.720
ARUN NAGARAJAN: And how
many did you say

00:18:42.720 --> 00:18:43.970
you think you inserted?

00:18:46.650 --> 00:18:52.000
BILL: Up to 57,000.

00:18:52.000 --> 00:18:53.070
I wouldn't actually ask--

00:18:53.070 --> 00:18:55.420
I would have put it on
tracker or something.

00:18:55.420 --> 00:18:59.010
I was looking for some insight
which Ikai, you just gave me.

00:18:59.010 --> 00:19:00.630
So I think I need to
build a script to

00:19:00.630 --> 00:19:02.400
actually count them--

00:19:02.400 --> 00:19:05.860
pull them out in small batches
and actually count them, so I

00:19:05.860 --> 00:19:08.620
know how many that are actually
in there and compare

00:19:08.620 --> 00:19:11.020
that to what COUNT's returning
And the fact that you've told

00:19:11.020 --> 00:19:13.000
me the count, isn't
really a count.

00:19:13.000 --> 00:19:17.090
It's a go and look and see what
the index is telling me.

00:19:17.090 --> 00:19:18.890
That's useful to me.

00:19:18.890 --> 00:19:19.600
So I can--

00:19:19.600 --> 00:19:21.640
IKAI LAN: Don't get me wrong,
the index should be completely

00:19:21.640 --> 00:19:24.060
synced up with the data.

00:19:24.060 --> 00:19:29.320
BILL: And it may be, but my
first gut tells me that it's

00:19:29.320 --> 00:19:31.560
not giving me-- well, it it's
giving me different numbers.

00:19:31.560 --> 00:19:35.070
So let me go look at
a little bit more.

00:19:35.070 --> 00:19:39.510
I'm learning some stuff from
this, so I'll report back on

00:19:39.510 --> 00:19:40.330
what I find.

00:19:40.330 --> 00:19:43.040
ARUN NAGARAJAN: And Bill, the
end goal of this is for you

00:19:43.040 --> 00:19:48.480
understand what the limits are,
and also from a record

00:19:48.480 --> 00:19:50.990
COUNT a size standpoint,
correct-- for a byte size

00:19:50.990 --> 00:19:52.310
standpoint.

00:19:52.310 --> 00:19:55.490
BILL: Yeah, my goal of the
experiment was to know when

00:19:55.490 --> 00:19:59.510
I'm building an application for
a customer that they tell

00:19:59.510 --> 00:20:03.380
me their data set is x number
of records, I can say then,

00:20:03.380 --> 00:20:06.320
well, we can use Spreadsheet,
or we can use ScriptDb, or

00:20:06.320 --> 00:20:08.810
we're going to have to put it in
some other database outside

00:20:08.810 --> 00:20:10.470
of Apps Script.

00:20:10.470 --> 00:20:14.720
So it's just an idea so I have
a sense of right now 200

00:20:14.720 --> 00:20:17.900
megabytes or 100 megabytes
doesn't really tell me

00:20:17.900 --> 00:20:20.490
anything about how much data
I can really stuff into it.

00:20:20.490 --> 00:20:24.600
ARUN NAGARAJAN: Right now we
talk about in terms of bytes,

00:20:24.600 --> 00:20:27.400
and you want to know in
terms of records.

00:20:27.400 --> 00:20:28.650
BILL: Yeah.

00:20:30.690 --> 00:20:36.360
I don't know those bytes are
those bytes of information.

00:20:36.360 --> 00:20:38.210
I assume there's
some metadata.

00:20:38.210 --> 00:20:39.650
IKAI LAN: Yeah, there's
probably some kind of

00:20:39.650 --> 00:20:41.360
[INAUDIBLE]

00:20:41.360 --> 00:20:45.500
BILL: So that's what I'm just
trying to get a sense of, and

00:20:45.500 --> 00:20:48.100
it's fun playing
ScriptDb, too.

00:20:48.100 --> 00:20:50.750
IKAI LAN: There's a
serialization method we use

00:20:50.750 --> 00:20:52.710
here at Google called
protocol buffers.

00:20:52.710 --> 00:20:56.340
And you think of something like
JSON except make them

00:20:56.340 --> 00:20:59.320
type safe, and you need
to have a definition--

00:20:59.320 --> 00:21:00.750
sort of type safe.

00:21:00.750 --> 00:21:01.930
That' what a protocol
buffer is.

00:21:01.930 --> 00:21:06.090
So sometimes it's not always
obvious how much

00:21:06.090 --> 00:21:06.710
space your taking up.

00:21:06.710 --> 00:21:08.620
So what you're doing is
very good experiment.

00:21:08.620 --> 00:21:11.640
For instance, someone might
say a size limit on--

00:21:11.640 --> 00:21:14.105
we don't publicize size limits,
because we to figure

00:21:14.105 --> 00:21:14.820
out what it means.

00:21:14.820 --> 00:21:17.950
For instance, if we have an
RPC limit that's, say, 10

00:21:17.950 --> 00:21:21.320
megabytes for a given a given
RPC, the right way for us to

00:21:21.320 --> 00:21:23.850
implement something is to
batch a really big RPC--

00:21:23.850 --> 00:21:27.140
a 50 megabyte thing, we'd break
them into five chunks.

00:21:27.140 --> 00:21:29.920
But what we need to do is,
there is that overhead of

00:21:29.920 --> 00:21:32.460
taking whatever data you are
wrapping inside this protocol

00:21:32.460 --> 00:21:34.030
buffer and sending
it over the wire.

00:21:34.030 --> 00:21:35.690
And I have to figure
out what the

00:21:35.690 --> 00:21:36.960
actual persistence mechanism.

00:21:36.960 --> 00:21:38.730
But you're right, it's not
an absolute one-to-one

00:21:38.730 --> 00:21:41.250
correspondence as in
my JSON object is

00:21:41.250 --> 00:21:42.550
this long as a string.

00:21:42.550 --> 00:21:44.460
It's like with someone's
protocol buffer, and protocol

00:21:44.460 --> 00:21:46.720
buffers can also be compressed,
which makes it

00:21:46.720 --> 00:21:48.890
even more confusing.

00:21:48.890 --> 00:21:51.150
But on the note that you're
bringing up something that's

00:21:51.150 --> 00:21:54.710
very, very important, which
is how do we do counting?

00:21:54.710 --> 00:21:57.220
And this is something that has
been brought up over and over.

00:21:57.220 --> 00:22:00.810
So in a SQL database,
people tend to be--

00:22:00.810 --> 00:22:03.870
I don't call them spoiled,
but SQL is powerful.

00:22:03.870 --> 00:22:04.120
[BEEP]

00:22:04.120 --> 00:22:07.180
I mean, SQL you can say select
COUNT (*), and [BEEP]

00:22:07.180 --> 00:22:07.770
you'll get back [BEEP]

00:22:07.770 --> 00:22:08.000
[BEEP]

00:22:08.000 --> 00:22:08.550
to COUNT, [BEEP]

00:22:08.550 --> 00:22:09.455
and that's because [BEEP]

00:22:09.455 --> 00:22:11.920
it's effectively scanning
indexes as it's

00:22:11.920 --> 00:22:12.730
going row by row.

00:22:12.730 --> 00:22:15.760
And it's single-homed, so you
don't tend to have these

00:22:15.760 --> 00:22:19.350
problems of going out to
multiple systems and trying to

00:22:19.350 --> 00:22:20.890
get back a count.

00:22:20.890 --> 00:22:24.600
So with SQL you--

00:22:24.600 --> 00:22:26.450
no, I don't want to go too
much into SQL internals.

00:22:26.450 --> 00:22:26.880
That's not fun.

00:22:26.880 --> 00:22:28.320
But I was going to say,
basically the same thing.

00:22:28.320 --> 00:22:31.150
We have to go by row by row by
row, especially if you've got

00:22:31.150 --> 00:22:33.220
a complicated query that you
want to do a count on.

00:22:33.220 --> 00:22:36.830
So something that people often
ask me is what's a good, fast

00:22:36.830 --> 00:22:37.840
way do counts.

00:22:37.840 --> 00:22:40.180
And one way to do counts is,
what we talked about, where

00:22:40.180 --> 00:22:41.480
you keep a running count.

00:22:41.480 --> 00:22:44.200
But this tends to only be useful
if you know ahead of

00:22:44.200 --> 00:22:46.800
time a priori, what you're going
to be counting total

00:22:46.800 --> 00:22:50.370
items or items that have a
certain very popular criteria.

00:22:50.370 --> 00:22:53.740
Now, one thing that's really
interesting is a pattern is if

00:22:53.740 --> 00:22:56.050
you have tons of data, and you
don't know how to do what we

00:22:56.050 --> 00:22:57.130
call approximate counts.

00:22:57.130 --> 00:23:00.700
So a good example of this
in action is say Gmail.

00:23:00.700 --> 00:23:04.215
In Gmail, let's say you do a
search on my name in your

00:23:04.215 --> 00:23:08.050
Gmail, and you'll see something
like 1 to 25 out of

00:23:08.050 --> 00:23:10.680
thousands, you notice that
there's not an exact number

00:23:10.680 --> 00:23:12.020
and for good reason, right.

00:23:12.020 --> 00:23:15.040
Because the chance that you'll
go all the way back is low, so

00:23:15.040 --> 00:23:16.850
why should we spend the
computational effort to

00:23:16.850 --> 00:23:18.410
actually count everything.

00:23:18.410 --> 00:23:20.840
So one technique that's commonly
used-- and I don't

00:23:20.840 --> 00:23:23.390
know if this is what they use in
Gmail-- but I've seen uses

00:23:23.390 --> 00:23:24.260
what's called sampling.

00:23:24.260 --> 00:23:28.010
So you have something like
Gmail, a good example is you

00:23:28.010 --> 00:23:30.490
say, how many emails do
I have from each Ikai?

00:23:30.490 --> 00:23:33.660
Well, we'll take the first 2,000
emails, and you'll see

00:23:33.660 --> 00:23:37.740
that per 2,000 emails,
I have maybe 50

00:23:37.740 --> 00:23:39.070
emails from Ikai, right.

00:23:39.070 --> 00:23:43.170
And therefore, if I can assume
an even distribution all the

00:23:43.170 --> 00:23:46.130
way back till the end of time,
I know that I keep a running

00:23:46.130 --> 00:23:47.880
count of how many email messages
I have, which is

00:23:47.880 --> 00:23:49.275
100,000 via 50.

00:23:49.275 --> 00:23:51.310
Well, I'll take 2,000--

00:23:51.310 --> 00:23:54.450
100,000 divided by 2,000,
and now my mask is

00:23:54.450 --> 00:23:55.160
going to break down.

00:23:55.160 --> 00:23:56.700
But that number--

00:23:56.700 --> 00:23:58.630
it's a sampling, so
it's kind of like

00:23:58.630 --> 00:24:00.415
election polling, right.

00:24:00.415 --> 00:24:04.970
And that's one way of assuming,
but we don't give

00:24:04.970 --> 00:24:06.160
you the exact number.

00:24:06.160 --> 00:24:08.200
And that's one strategy when
it comes to counting.

00:24:08.200 --> 00:24:10.120
Because ultimately, the question
you have to ask

00:24:10.120 --> 00:24:12.140
yourself is why am
I counting this?

00:24:12.140 --> 00:24:14.090
Do you care if it's 640?

00:24:14.090 --> 00:24:15.150
Is you care if it's 740?

00:24:15.150 --> 00:24:16.980
ARUN NAGARAJAN: Especially in
the ScriptDb, where the data's

00:24:16.980 --> 00:24:18.330
not necessarily homogeneous,
right.

00:24:18.330 --> 00:24:23.660
So you may have five
chairs and three

00:24:23.660 --> 00:24:26.940
emails and five books.

00:24:26.940 --> 00:24:30.330
So the count of objects
sometimes takes a lot longer

00:24:30.330 --> 00:24:34.330
to sync up, because it's not
as valuable like you said.

00:24:34.330 --> 00:24:36.950
IKAI LAN: And again,
approximation tends to be more

00:24:36.950 --> 00:24:38.760
important to people
than the actual.

00:24:38.760 --> 00:24:39.880
But that's why it's also
horrible and wrong.

00:24:39.880 --> 00:24:42.550
ARUN NAGARAJAN: But in case of
this experiment, the count is

00:24:42.550 --> 00:24:43.850
very interesting.

00:24:43.850 --> 00:24:45.970
IKAI LAN: Yeah, we need to
figure out why it's stopping.

00:24:45.970 --> 00:24:49.780
I mean, just out of curiosity,
Bill, how are you recording

00:24:49.780 --> 00:24:51.240
the kind of objects
that you insert?

00:24:54.080 --> 00:25:00.920
BILL: Well, so I
just open here.

00:25:00.920 --> 00:25:07.280
So I create batches, and then
stuff those batches.

00:25:07.280 --> 00:25:09.770
And then after those batches are
stuffed and I get an all

00:25:09.770 --> 00:25:14.860
OK back, I record that in
a script property--

00:25:14.860 --> 00:25:16.540
just increment the
script property.

00:25:16.540 --> 00:25:17.460
IKAI LAN: OK.

00:25:17.460 --> 00:25:18.340
OK, I see.

00:25:18.340 --> 00:25:22.180
So one thing I want to look
out for-- and this isn't

00:25:22.180 --> 00:25:23.650
something that would
inflate the number.

00:25:23.650 --> 00:25:26.250
This is something that would
deflate the number.

00:25:26.250 --> 00:25:29.860
There's some window and window
stuff going on here.

00:25:29.860 --> 00:25:35.460
Defining the number is if you
write the ScriptDb twice in a

00:25:35.460 --> 00:25:37.980
quick succession, because
you can use lock

00:25:37.980 --> 00:25:39.420
service to lock it.

00:25:39.420 --> 00:25:40.980
I suppose that work, especially
since you're not

00:25:40.980 --> 00:25:42.600
doing very, very fast writes.

00:25:42.600 --> 00:25:45.180
But what that would do is that
you would end up what I call

00:25:45.180 --> 00:25:49.070
losing rights.

00:25:49.070 --> 00:25:51.430
If you say that you've recorded
150,000 items, your

00:25:51.430 --> 00:25:54.970
numbers probably 155,000 or
something higher 150,000,

00:25:54.970 --> 00:25:57.240
which still doesn't really
explain the discrepancy

00:25:57.240 --> 00:26:01.913
between what you're seeing of
150,000 and say 50,000.

00:26:01.913 --> 00:26:03.180
BILL: OK.

00:26:03.180 --> 00:26:07.835
Well then, I will play with this
a little bit more, and

00:26:07.835 --> 00:26:11.300
then when I get a better idea,
let you know what I find.

00:26:11.300 --> 00:26:12.910
IKAI LAN: Yeah, I'm going to
make Arun my secretary and

00:26:12.910 --> 00:26:15.530
make him remind me when we've
got a backdoor task.

00:26:15.530 --> 00:26:18.980
To figure out how this COUNT
stuff works, because I think

00:26:18.980 --> 00:26:22.600
it's important that we create
abstractions that make it so

00:26:22.600 --> 00:26:24.360
you don't have to understand
how this works.

00:26:24.360 --> 00:26:26.220
I mean, it should just
work for you.

00:26:26.220 --> 00:26:31.740
But sometimes when you get to
be an advanced user, it is

00:26:31.740 --> 00:26:33.120
important to understand
how things work.

00:26:33.120 --> 00:26:34.170
ARUN NAGARAJAN: Yeah,
absolutely.

00:26:34.170 --> 00:26:36.625
And especially when you're in
this decision making process.

00:26:39.160 --> 00:26:42.680
BILL: Yeah, and it really
just goes back to your

00:26:42.680 --> 00:26:44.320
approximation versus exact.

00:26:44.320 --> 00:26:47.570
The reason I'm doing exact is
just to find where the limits

00:26:47.570 --> 00:26:49.390
are, but really what I'm
looking for is an

00:26:49.390 --> 00:26:50.160
approximation.

00:26:50.160 --> 00:26:54.030
If someone gives me an idea
of what the data set is.

00:26:54.030 --> 00:26:57.440
I approximately know that that's
not going to fit, or

00:26:57.440 --> 00:26:58.420
it's going to fit.

00:26:58.420 --> 00:27:01.860
It only needs to be,
in order magnitude.

00:27:01.860 --> 00:27:03.410
IKAI LAN: Right, not knowing
your magnitude.

00:27:03.410 --> 00:27:04.636
You're relatively close.

00:27:04.636 --> 00:27:05.022
BILL: No, not at all.

00:27:05.022 --> 00:27:05.915
That's a little off.

00:27:05.915 --> 00:27:09.650
But I mean, if I determine I can
hold a million objects of

00:27:09.650 --> 00:27:12.350
this size, and they tell me they
have 200,000 of really

00:27:12.350 --> 00:27:14.520
big objects, I know I
might be in trouble.

00:27:14.520 --> 00:27:19.820
So that's all I'm looking for is
to get a sense of what does

00:27:19.820 --> 00:27:21.325
the size quotas mean?

00:27:21.325 --> 00:27:23.170
Because I'd hate to get to
the point where I got an

00:27:23.170 --> 00:27:27.310
application, and I roll it out
and on the first week, we had

00:27:27.310 --> 00:27:30.800
the cap and have to rethink
everything.

00:27:30.800 --> 00:27:31.150
So--

00:27:31.150 --> 00:27:31.850
ARUN NAGARAJAN: Are
the ScriptDb--

00:27:31.850 --> 00:27:32.690
BILL: It's just to
get a sense.

00:27:32.690 --> 00:27:36.030
ARUN NAGARAJAN: --quotas per
user or per script author or

00:27:36.030 --> 00:27:36.530
per script?

00:27:36.530 --> 00:27:38.310
IKAI LAN: This is a question
that we have to answer,

00:27:38.310 --> 00:27:41.970
because some things are for
the script author and some

00:27:41.970 --> 00:27:43.730
things are per user.

00:27:43.730 --> 00:27:46.360
ARUN NAGARAJAN: But they're
never per script.

00:27:46.360 --> 00:27:48.050
IKAI LAN: Wait, let me think
about this for a second.

00:27:48.050 --> 00:27:49.810
I believe ScriptDb
is per script.

00:27:49.810 --> 00:27:50.410
ARUN NAGARAJAN: Per script.

00:27:50.410 --> 00:27:54.045
So you could theoretically
create multiple libraries.

00:27:57.220 --> 00:27:59.390
IKAI LAN: I need to draw the
diagram of this, because

00:27:59.390 --> 00:28:01.410
there's some holes in my
own knowledge, right.

00:28:01.410 --> 00:28:03.570
And this will force me to really
understand this thing.

00:28:03.570 --> 00:28:04.470
ARUN NAGARAJAN: And then
force us to fix it.

00:28:04.470 --> 00:28:05.200
IKAI LAN: Yeah.

00:28:05.200 --> 00:28:08.120
And I'm surprised Arun hasn't
taken a shot at me yet about

00:28:08.120 --> 00:28:10.460
putting together
that ScriptDb.

00:28:10.460 --> 00:28:11.630
It was waiting for--

00:28:11.630 --> 00:28:13.870
It's coming.

00:28:13.870 --> 00:28:16.260
Anyway, I'm really sorry
to cut you off, Bill.

00:28:16.260 --> 00:28:17.185
We're running out of time.

00:28:17.185 --> 00:28:17.470
BILL: You're not.

00:28:17.470 --> 00:28:18.156
We're done.

00:28:18.156 --> 00:28:18.870
Good.

00:28:18.870 --> 00:28:20.690
ARUN NAGARAJAN: No, this was
a great, great question and

00:28:20.690 --> 00:28:24.390
great reminder for us to really
investigate this, and

00:28:24.390 --> 00:28:26.240
it's not going to be
an immediate thing.

00:28:26.240 --> 00:28:29.360
But hopefully, we'll get the
information that we need to at

00:28:29.360 --> 00:28:33.820
least sanity check
documentation, improve it were

00:28:33.820 --> 00:28:37.270
necessary and then hopefully
also, generally,

00:28:37.270 --> 00:28:39.190
clean up the quarter.

00:28:39.190 --> 00:28:39.700
BILL: It's all good.

00:28:39.700 --> 00:28:41.340
[INAUDIBLE]

00:28:41.340 --> 00:28:42.400
Thanks.

00:28:42.400 --> 00:28:43.730
ARUN NAGARAJAN: Thank you.

00:28:43.730 --> 00:28:44.880
IKAI LAN: Thank you, Bill.

00:28:44.880 --> 00:28:47.840
All right, and thank you
everyone for watching.

00:28:47.840 --> 00:28:50.360
This video will be
posted again on

00:28:50.360 --> 00:28:52.510
youtube.com/googledevelopers.

00:28:52.510 --> 00:28:54.860
And we had talked about
some cool stuff today.

00:28:54.860 --> 00:28:55.290
ARUN NAGARAJAN: That's right.

00:28:55.290 --> 00:28:56.480
Yeah.

00:28:56.480 --> 00:28:59.290
And then stay tuned for
the Election app.

00:28:59.290 --> 00:28:59.570
IKAI LAN: Stay tuned.

00:28:59.570 --> 00:29:01.560
Watch out for our blog
post, all right.

00:29:01.560 --> 00:29:03.540
Thank you all very much this
is Ikai Lan signing off.

00:29:03.540 --> 00:29:05.880
ARUN NAGARAJAN: Arun
Nagarajan here.

00:29:05.880 --> 00:29:20.667
[TECHNO MUSIC]

