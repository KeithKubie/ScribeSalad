WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.100
Are we back in the realm of passwords? We're back to passwords..

00:00:02.200 --> 00:00:06.060
Actually, we're back to password managers because I never haven't done a proper video on this

00:00:06.060 --> 00:00:11.099
I've talked about password managers briefly while I was talking about, you know good passwords and things like this

00:00:11.200 --> 00:00:14.820
But they're very very important nowadays, right? So, what is it that's good?

00:00:14.820 --> 00:00:18.779
And why is it okay that we're putting all our eggs in one basket?

00:00:19.200 --> 00:00:22.920
Just before we start the video about how they work. Would you recommend a password manager?

00:00:23.580 --> 00:00:28.680
100% yes, there are probably some use cases where you wouldn't want to use a password manager, but off the top of my head

00:00:28.680 --> 00:00:32.700
I can't think of how many I think that your security is better with one right

00:00:33.250 --> 00:00:35.020
Even though there obviously is some

00:00:35.020 --> 00:00:39.509
Small amount of risk that you take by putting your passwords in an encrypted database on the internet

00:00:39.510 --> 00:00:41.350
Like I'm you know, I'm not a security researcher

00:00:41.350 --> 00:00:46.410
But the majority of security researchers use pasword managers and would advocate the use of password managers

00:00:48.940 --> 00:00:54.809
The weakness of password managers that we'll talk about is is really implementation detail right in theory

00:00:54.809 --> 00:00:58.529
They're very secure. But in practice is auto-filling on a website a good idea?

00:00:58.529 --> 00:01:01.100
I suppose it depends on what the website is, you know there is talk of maybe

00:01:01.720 --> 00:01:04.980
Invisible forms, but get auto-filled them and they capture the passwords, things like this

00:01:05.160 --> 00:01:10.040
Let's first think about what it is that a password manager does and why we would want that right now

00:01:10.049 --> 00:01:14.909
We've talked about passwords before and the issue really is if your passwords are going to be secure

00:01:16.180 --> 00:01:18.659
Generally it is going to be quite hard to remember a lot of them right

00:01:18.659 --> 00:01:21.179
Yes, we've talked about coming up with a good password

00:01:21.180 --> 00:01:28.800
And I think it's quite plausible to remember one or two very good passwords, but to remember two dozen or three dozen or a hundred

00:01:29.080 --> 00:01:36.040
That's getting a little bit silly. Right? So then your choice is to write them down right or to use the same password all the time

00:01:37.329 --> 00:01:39.329
which isn't a great idea or

00:01:39.610 --> 00:01:45.179
To use a password manager and quite simply a password manager is a big list of your passwords encrypted, right?

00:01:45.180 --> 00:01:46.710
We usually call it a vault sounds cool

00:01:46.710 --> 00:01:50.250
So you have you know Amazon and you have your password for Amazon and then you know

00:01:50.380 --> 00:01:55.199
EBay and your Gmail and so on all the different products that you use all the different

00:01:55.360 --> 00:01:57.360
passwords that you have and in a lot of password managers

00:01:57.369 --> 00:02:04.109
You can store additional information like passport numbers or social security numbers depending on if those things are useful feature to retrieve them

00:02:04.299 --> 00:02:06.959
Obviously having this is kind of having all your eggs in one basket

00:02:07.560 --> 00:02:10.800
What it's going to do if someone gets it is unlock everything you have

00:02:11.470 --> 00:02:16.569
Because the password manager only make sense if you use it for eveything. Otherwise I kinda don't know why you would use it at all

00:02:17.390 --> 00:02:20.020
So obviously this is going to be encrypted, right?

00:02:20.020 --> 00:02:24.309
So this is going to have some kind of encryption on it using some kind of key

00:02:24.770 --> 00:02:28.240
And so the real question is, you know, where we store in this key whose key

00:02:28.240 --> 00:02:31.779
Is it who has control of this key who can get to this key?

00:02:32.030 --> 00:02:38.020
That's really what it comes down to is whose key is this? Obviously some password managers have cloud storage solutions

00:02:38.020 --> 00:02:42.549
Where you can upload passwords off your mobile phone and get them on your laptop and vice versa

00:02:42.580 --> 00:02:47.739
Sometimes even share them with other family members things like this. These are kind of those products I'm talking about today

00:02:48.470 --> 00:02:52.839
If you have to use a product like KeePass, which is entirely offline

00:02:53.060 --> 00:02:59.560
Any cloud storage is on your own back. Then the sort of the security implications are slightly different right in some sense

00:02:59.560 --> 00:03:03.580
It's more secure because you have control over that thing but I would argue back

00:03:04.250 --> 00:03:09.910
given what we were going to talk about not a huge amount more secure and at the cost of quite a lot of convenience and

00:03:10.670 --> 00:03:14.890
to be honest for the majority of users convenience is important if you don't get

00:03:15.110 --> 00:03:20.110
Convenience out of a past manager you aren't going to use it effectively and then you're going to weaken your passwords or use the same

00:03:20.110 --> 00:03:24.970
Password and you've undermined everything anyway. We've encrypted all these passwords of a key now

00:03:24.970 --> 00:03:27.309
I'm going to talk about how we manage this key and how we

00:03:27.560 --> 00:03:31.720
Prevent the server from being able to access these passwords as well and attackers and things like this

00:03:31.730 --> 00:03:33.789
I'm going to talk in the general sense, right?

00:03:33.790 --> 00:03:38.679
I'm familiar with how thing things like LastPass in one pass would work and I'll sort of nod to them a little bit but I

00:03:38.680 --> 00:03:43.540
Want to talk some in general about how password managers do this because they have quite strict requirements

00:03:43.540 --> 00:03:47.530
The encryption with KeyPass is fairly similar a slightly different algorithms used for encryption

00:03:47.570 --> 00:03:53.799
But the same it doesn't have the same requirements on security in transit because it's not in transit, right?

00:03:53.799 --> 00:03:55.790
So because you're using key parts locally

00:03:55.790 --> 00:04:00.760
Really your master password is in it's sufficient to drive a key and to decrypt your your data, right?

00:04:00.760 --> 00:04:05.799
There's no issue of what what if the server learns your password because there is no server the first important thing to know about

00:04:06.019 --> 00:04:11.229
Password managers cloud-based password managers is that they don't do any decryption or encryption themselves

00:04:11.390 --> 00:04:16.329
And all of your vault is encrypted by you at the client side and then sent encrypted to the server

00:04:16.340 --> 00:04:16.930
All right

00:04:16.930 --> 00:04:17.440
so that's I mean

00:04:17.440 --> 00:04:21.369
That's a good thing because it means that they don't hold the key in their database

00:04:21.470 --> 00:04:27.249
Which would mean that over sort of a dodgy rogue admin or if it got leaked that will be a huge problem

00:04:27.560 --> 00:04:31.220
so really there's kind of two problems we have to solve right one is how do we

00:04:31.560 --> 00:04:34.579
derive a key that the server doesn't know but we can use and

00:04:34.860 --> 00:04:40.400
The other question is how do we convince the server to send us a vault in the first place because in a cloud-based?

00:04:40.770 --> 00:04:45.230
Solution this encrypted vault is sitting on a server. I want to say my login

00:04:45.230 --> 00:04:49.669
Is this my master password is this please send me my vault so I can decrypt it

00:04:49.669 --> 00:04:54.469
But you've just sent them the master password isn't that really bad idea, but that's the question. We're going to try and answer

00:04:54.990 --> 00:04:56.250
so

00:04:56.250 --> 00:05:00.440
The way this works is we're going to be deriving keys based off our master password

00:05:00.540 --> 00:05:03.379
All right. So all password managers are going to have some kind of master password

00:05:03.750 --> 00:05:09.200
Please see them through the part of a video most people's passwords are not sufficient for use as a master password

00:05:09.200 --> 00:05:09.620
I mean

00:05:09.620 --> 00:05:10.979
It has to be very very good if he's any

00:05:10.979 --> 00:05:16.489
Variation on the word password or have any of the numbers 1 2 3 4 in ordering it you need to delete those passwords

00:05:16.970 --> 00:05:20.510
Maybe delete your account out of shame. Yeah, so

00:05:21.180 --> 00:05:23.479
But that's a different video. We've already covered this a lot

00:05:24.090 --> 00:05:29.899
All right. So there's going to be what we're going to do is we're going to perform two derivations from this password

00:05:29.900 --> 00:05:33.829
We're going to use it to produce our vault key right using some function, right?

00:05:33.830 --> 00:05:36.950
So we're going to perform some function to turn our master password into a bowl key

00:05:37.470 --> 00:05:41.269
I'll try and sort of note differences between different password managers as I go and

00:05:42.120 --> 00:05:47.720
We're also going to use our master password for some kind of authentication mechanism with the server

00:05:47.880 --> 00:05:51.859
So what's going to happen is we're gonna take our master password. We're going to authenticate with the server

00:05:51.860 --> 00:05:52.970
It's going to say yet

00:05:52.970 --> 00:05:56.959
You are who you say you are but during that process it's not going to learn what the master password is

00:05:57.240 --> 00:05:59.010
It's going to send us the encrypted vault

00:05:59.010 --> 00:06:04.039
We're going to drive a different vault key and that's what we're going to use to decrypt the password locally

00:06:04.110 --> 00:06:09.710
We add or remove any parcels we want we encrypt the vault and we send it back to the server and it gets stored

00:06:10.020 --> 00:06:14.270
Now this will seems a little bit implausible. We've just logged in using our master password

00:06:14.539 --> 00:06:17.869
We're also decrypting using our master password. This all sounds very fishy

00:06:17.910 --> 00:06:22.760
It all sounds like someone just wants all my passwords and they found a way to convince me to put them all on a big

00:06:22.760 --> 00:06:26.179
List for them, but actually it's quite elegant. There's quite elegant solution to this

00:06:26.180 --> 00:06:31.100
So let's start with the way that LastPass does it might because it's fairly common and then we'll talk about the differences with say one

00:06:31.100 --> 00:06:38.059
Password what LastPass will do is it will produce a master password by appending your email and your master password

00:06:38.060 --> 00:06:41.060
so I'm going to call that pass it'll append them together and it will

00:06:41.180 --> 00:06:45.739
hash them and this is going to be a very very strong hash function by a hash function with many many iterations

00:06:46.169 --> 00:06:47.900
To prevent it from being brute-force

00:06:47.900 --> 00:06:50.720
We talked a little bit about this during the password cracking video

00:06:50.720 --> 00:06:52.910
But the idea is that if you're going to break a password

00:06:52.910 --> 00:06:57.169
You need to get it a lot of times and the slower that hashing process is the slower

00:06:57.169 --> 00:07:00.409
Your guesses are going to be and the longer it's going to take when you say iterations

00:07:00.410 --> 00:07:02.989
Do you mean that it's hashed over and over again, or..?  Basically yes,

00:07:02.990 --> 00:07:07.190
you actually use an H map to do this and the function is called pbkdf2 p

00:07:07.949 --> 00:07:09.509
BK

00:07:09.509 --> 00:07:10.560
df2

00:07:10.560 --> 00:07:16.549
Password-based key derivation function - and what it essentially does is it takes your string that you're hashing, uses

00:07:16.550 --> 00:07:21.169
H mac and iterates it a number of times and in this case iterates is a hundred thousand times

00:07:21.270 --> 00:07:25.699
Right, which is a lot of times. And this is going to produce your vault key your vault key

00:07:25.740 --> 00:07:31.070
Or at least it's going to produce sufficient bits from which you can drive a vole key, right?

00:07:31.070 --> 00:07:33.070
So your vole key thing gonna be I know

00:07:33.120 --> 00:07:37.940
256 bit AES key or something like this and it's going to be used to decrypt your vault now

00:07:37.940 --> 00:07:39.650
But we don't have the vault because the vaults on the cloud

00:07:39.650 --> 00:07:42.949
So we're going to take our vault key V, which is this one.

00:07:43.139 --> 00:07:48.889
We're going to append our password again to it. And we're going to do the same, you know epic hashing function on this

00:07:49.409 --> 00:07:50.840
another 100,000 times

00:07:50.840 --> 00:07:51.409
Well, yeah

00:07:51.409 --> 00:07:55.759
You'll do fewer times on your client and then you'll do I think it's five thousand on the client and then it will go to

00:07:55.760 --> 00:07:59.479
the server for another hundred thousand or something like this something ridiculous because you know

00:07:59.479 --> 00:08:00.690
The server's got the power to do this

00:08:00.690 --> 00:08:05.599
What we've done here is we've got our vault key and our password in here, which is essentially our primary identifiers

00:08:05.909 --> 00:08:09.349
But would hash them so you can't get to them and that's what we're using to authenticate ourselves

00:08:09.509 --> 00:08:12.169
now at the server end that's going to be salted and hashed as

00:08:12.690 --> 00:08:14.400
normal for storing in a database

00:08:14.400 --> 00:08:18.979
so there's no easy mapping for an attacker to get from here back to here because you'd have to

00:08:19.080 --> 00:08:24.650
Essentially undo this hash which can't be done or guess the hash which is incredibly slow because of how many iterations we're talking about

00:08:25.349 --> 00:08:32.299
so what happens is you create you use your master password to derive a vault key and then you use that vault key and your

00:08:32.300 --> 00:08:35.690
Password again to derive an authentication key, which is what is used on the server?

00:08:35.789 --> 00:08:42.468
So there was no way for the server to extract this vault key because it's probably lost on the other hand only you have the password

00:08:42.630 --> 00:08:48.619
so only you can produce either these keys are you're the only one that can request your vault and you're the only one who can

00:08:48.690 --> 00:08:53.239
Encrypt and decrypt your vault good right if your master password is good, right?

00:08:54.340 --> 00:08:56.698
Another link to my video. Just keep putting them in.

00:08:56.700 --> 00:08:58.920
not not password one then. not password one goodness

00:08:59.980 --> 00:09:02.780
No, we've been over this and not correct horse battery staple

00:09:03.160 --> 00:09:03.779
All right

00:09:03.779 --> 00:09:04.330
so

00:09:04.330 --> 00:09:08.520
One password for example is ever so slightly different one password has a public and private key

00:09:08.590 --> 00:09:10.590
Mechanism because they want to be able to share

00:09:11.020 --> 00:09:12.430
vault around

00:09:12.430 --> 00:09:20.219
so your volt is protected by a key and that key is protected by a public key the private component of which is

00:09:20.560 --> 00:09:27.390
Encrypted by your master password and one parse what happens to also add another bit of unknown, which is your secret key

00:09:27.390 --> 00:09:28.930
which is a device or

00:09:28.930 --> 00:09:29.620
account

00:09:29.620 --> 00:09:34.950
Specific thing held on your device the idea being that it makes it a little bit harder for the server to theoretically break your hash

00:09:34.950 --> 00:09:40.229
One password also doesn't derive an authentication key straight off the master password this way

00:09:40.230 --> 00:09:43.890
They use something called a password authenticated key exchange, which is kind of like diffie-hellman

00:09:43.890 --> 00:09:50.400
But with passwords where your master password is used as part of a handshake with a server to authenticate you instead

00:09:50.460 --> 00:09:50.850
All right

00:09:50.850 --> 00:09:53.460
The advantage of that being that they have to vend break diffie-hellman

00:09:53.529 --> 00:09:59.009
First before they can begin trying to hash your password makes it it makes a little bit harder the chain of decryption gets quite complicated

00:09:59.050 --> 00:10:04.890
Because you have a master password and secret key derived master key, which is used to decrypt your private key

00:10:04.890 --> 00:10:08.069
Which is used to decrypt the vault key, which is used to decrypt the vault

00:10:09.370 --> 00:10:11.370
Go and animate that

00:10:14.560 --> 00:10:18.210
All of this is susceptible to something like malware or key loggers

00:10:18.210 --> 00:10:22.530
That's absolutely so this is in some sense the biggest hindrance with password managers

00:10:22.530 --> 00:10:28.649
Is that if you get a key logger or a website where it's accidentally auto-filled in the wrong place or the implementation

00:10:28.780 --> 00:10:33.509
Is not as theoretically sound as the theory is that's when you've got a problem most

00:10:33.700 --> 00:10:40.559
Security researchers and people in the security industry would argue that the benefits you get from having a good password mechanism like this

00:10:40.810 --> 00:10:47.489
Outweight the drawbacks of there possibly being a potential breach, right? But it is something it is something into concern which is why

00:10:48.339 --> 00:10:51.719
That place is like one pass would have bug bounty programs

00:10:51.850 --> 00:10:55.290
Where if you find a issue you can let them know and I'll try and fix it nice and quickly

00:10:55.360 --> 00:10:57.630
There's a question of trust. Do you trust these companies?

00:10:57.630 --> 00:11:04.289
I suppose I probably do and it's because their business model wouldn't make sense if they weren't trying to be trustworthy, right?

00:11:04.570 --> 00:11:06.420
They've got one or two agendas, right either

00:11:06.420 --> 00:11:10.230
they are trying to store my password securely so that I keep giving them my yearly fee or

00:11:10.870 --> 00:11:11.980
they are trying to

00:11:11.980 --> 00:11:17.039
Use all my passwords to hack my accounts in which case of other ways to do that and it didn't seem like a very good

00:11:17.040 --> 00:11:18.910
Business model. Yeah

00:11:18.910 --> 00:11:20.910
But I suppose it's possible.

00:11:21.400 --> 00:11:24.540
I don't I don't I don't lie awake at night worrying about that

00:11:24.550 --> 00:11:27.719
There are differences between how the password managers manage their

00:11:28.060 --> 00:11:32.550
Different ways of doing authentication and doing the encryption and things because I'm not too worried about them

00:11:32.550 --> 00:11:34.550
I think that they all look pretty plausible

00:11:34.570 --> 00:11:36.570
and I sort of looked into them and I think

00:11:36.760 --> 00:11:40.080
The security industry in general was fairly pleased at how things are going

00:11:40.080 --> 00:11:45.449
I think you use the one that works best on your devices and you you know is the price you want and the convenience you

00:11:45.450 --> 00:11:48.119
Want and so on. It's a product at the end of the day

00:11:49.060 --> 00:11:53.280
now I've got the token so I can load a value in add the bay leaf emerged or into it and

00:11:53.350 --> 00:11:55.980
Store it back and hand the token and now I've got the token again

00:11:55.980 --> 00:11:58.649
I can load something and Yuki and a2 I

00:11:59.140 --> 00:12:03.960
Send that to Bob. He's going to take this receiving function a - now Bob wants to send a message

00:12:03.960 --> 00:12:07.980
So he's going to take his this is going to be Bob one

