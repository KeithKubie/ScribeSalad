WEBVTT
Kind: captions
Language: en

00:00:00.025 --> 00:00:04.765
What we need is inheritance and that's a way to reuse classes to build new

00:00:04.765 --> 00:00:09.040
classes. So what you wanted to do was to find these two new types, MainDish and

00:00:09.040 --> 00:00:12.960
Appetizer, and both of these are types of Dishes. This means if we had a Dish

00:00:12.960 --> 00:00:16.880
type, well, we could create the MainDish type by specializing the Dish type. And

00:00:16.880 --> 00:00:20.754
we could create an Appetizer type by also specializing the Dish type. This is

00:00:20.754 --> 00:00:25.828
called inheritance. We would say MainDish inherits from Dish. There's a lot of

00:00:25.828 --> 00:00:30.142
terminology that goes along with this. We would say the MainDish inherits from

00:00:30.142 --> 00:00:34.202
Dish and that's what these up arrows in our diagram means. If we look at it in

00:00:34.202 --> 00:00:38.826
other direction, we would say MainDish and Appetizer are both subclasses of Dish

00:00:38.826 --> 00:00:42.770
and we would say Dish is the base class, our superclass of MainDish and

00:00:42.770 --> 00:00:47.316
Appetizer. There's a lot of different terminology people use to talk about this.

00:00:47.316 --> 00:00:51.541
But the important thing to understand is that we're building the subclasses,

00:00:51.541 --> 00:00:55.831
MainDish and A, which are special types of Dishes by starting from the Dish type

00:00:55.831 --> 00:01:00.350
and adding some extra behavior to it. We can keep going. We could have a new

00:01:00.350 --> 00:01:04.974
derived class based on theA class, and then the Pythonic Appetizer would inherit

00:01:04.974 --> 00:01:09.591
from Appetizer. It would also inherit from Dish, and these subclass terms are

00:01:09.591 --> 00:01:13.993
transitive, so Pythonic Appetizer is a subclass of Appetizer, it's also a

00:01:13.993 --> 00:01:18.742
subclass of Dish. How does this look in code? Well, if you remember, when we

00:01:18.742 --> 00:01:23.220
introduced the class syntax. We said there was this BaseClass as part of the

00:01:23.220 --> 00:01:27.734
class definition. So far, we've used object for all of our BaseClasses. But the

00:01:27.734 --> 00:01:32.306
BaseClass can be any other type. So, to get what we've shown here, we would have

00:01:32.306 --> 00:01:36.779
the MainDish, have as its base class the Dish, and then the definition of the

00:01:36.779 --> 00:01:41.642
MainDish class. And we would have the Appetizer, have as its base class, the

00:01:41.642 --> 00:01:46.912
Dish and the Pythonic Appetizer has as its base class the Appetizer. What about

00:01:46.912 --> 00:01:50.973
the Dish? Well, we didn't draw any BaseClass for that and its BaseClass is

00:01:50.973 --> 00:01:55.009
object. That's the ultimate superclass of all classes we create in Python.

