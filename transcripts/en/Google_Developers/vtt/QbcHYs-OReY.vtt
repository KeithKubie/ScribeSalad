WEBVTT
Kind: captions
Language: en

00:00:07.980 --> 00:00:09.980
Welcome to Google Developers Show.

00:00:10.340 --> 00:00:12.340
I'm Nicolas Bortolotti. 

00:00:12.540 --> 00:00:16.700
In this new emission we'll keep working on data 
and massive data analysis.

00:00:16.840 --> 00:00:18.840
We'll also check Polymer technology 

00:00:18.900 --> 00:00:22.920
in our "Reverse Focus" section. We'll present this new approach of web development. 

00:00:32.200 --> 00:00:35.080
Alright, we're now in our "Reverse Focus" section.

00:00:35.620 --> 00:00:39.400
We'll see an application developed in Polymer.

00:00:40.140 --> 00:00:45.220
We'll work on the first application we've manipulated and did queries to the massive data, 

00:00:45.540 --> 00:00:48.660
but in this particular case, the data goes to Polymer,

00:00:48.900 --> 00:00:55.120
So let's see our code in big size as we developers like. 

00:00:55.680 --> 00:01:01.360
First, we'll see the development scenario of Polymer. To do so we'll use 

00:01:01.560 --> 00:01:04.500
the master tutorial of Polymer, from Polymer's team.

00:01:04.840 --> 00:01:10.940
This will let as understand much better the concepts of Polymer. After this we'll go to 

00:01:11.180 --> 00:01:17.040
the solution that we already have developed to build the front end, the aesthetic part, using Polymer, 

00:01:17.280 --> 00:01:21.800
and the same query to the massive data that we used in the "Reverse Focus" of the previous show.

00:01:22.020 --> 00:01:27.440
So let's go to work on that. 
As you can see here we already have

00:01:27.440 --> 00:01:33.560
our structure of the Polymer Tutorial Master. The structure that Polymer propose has the API and the interaction 

00:01:33.560 --> 00:01:40.100
with Polymer. Then it propose us a Starter scenario where we can use 

00:01:40.100 --> 00:01:45.780
the starter part. Here we'll do a simple exercise to work the Index and some elements

00:01:45.780 --> 00:01:46.612
of Polymer.

00:01:47.980 --> 00:01:53.680
If we're not so sure about it, we can go, step by step. I mean, we began from the Starter in the 

00:01:53.680 --> 00:01:59.960
step 1, 2 and 3 to complete all the learning and learn much more about Polymer.

00:02:00.540 --> 00:02:06.440
Let's see what this solution is about. I'll use 
inside the root a file named 

00:02:06.580 --> 00:02:12.140
Index.html, where the solution is 
basically finished, or a solution that we 

00:02:12.200 --> 00:02:14.140
want to implement in Polymer.

00:02:14.480 --> 00:02:21.040
As you can see, inside this file, we 
have initially the header of the html file.

00:02:21.220 --> 00:02:27.560
In this particular case we have links to different elements of Polymer that we're working 

00:02:27.560 --> 00:02:28.400
from the Bower Components.

00:02:28.400 --> 00:02:33.760
Then we hvae the styles, in this particular case we're working with a link to the core toolbar, 

00:02:33.760 --> 00:02:39.180
and with a link to the paper tabs to other html that we embed from this structure. 

00:02:39.240 --> 00:02:41.240
Then we have the styles

00:02:41.240 --> 00:02:44.080
and finally, in the body, we have the operation.

00:02:44.080 --> 00:02:48.660
First, we'll see how to work this solution in full mode.

00:02:48.660 --> 00:02:54.720
To do so, we'll take out all the comments 
so you can se how this application

00:02:54.720 --> 00:03:01.860
behaves. Basically, we take out the coments of the first part, that will do the interaction with a tabs panel 

00:03:01.860 --> 00:03:11.440
where we'll be able to select a conteiner, and here we have the intereaction with the final

00:03:11.440 --> 00:03:15.420
graphic, where we want to show 
the graphics. So let's start using this.  

00:03:15.420 --> 00:03:23.180
I'll  put a http server using Python. Here, in the Python 

00:03:23.180 --> 00:03:31.940
console - m $impleHTTPServer so we can have it available. We authorize the "allow" 

00:03:31.940 --> 00:03:35.740
so we cab have our server working. 

00:03:36.540 --> 00:03:41.880
Join me! Let's go to our browser in the 8000 port of the local host. As you can see

00:03:41.880 --> 00:03:48.320
we already have our tabs interaction ready, a conteiner, and the graphic. So now let's see

00:03:48.320 --> 00:03:51.600
step by step, how this solution builds really quickly.

00:03:51.600 --> 00:03:58.560
We'll see three blocks of codes. One will mount the first bar, the second one will mount the content 

00:03:58.560 --> 00:04:03.378
and in the third one, we'll mount the 
interaction simulated with the data graphic

00:04:03.378 --> 00:04:04.760
for now.

00:04:05.480 --> 00:04:12.080
So, we go back here to continue with our functional server. Let's work commenting 

00:04:12.080 --> 00:04:18.420
the 2 segments of codes that we don't want to see initially. To do so let's use this option

00:04:18.820 --> 00:04:23.580
as Ide of development. In this particular case I'm still using PhyCharm, as a matter of convenience. 

00:04:23.580 --> 00:04:29.300
You know I'm an enthusiastic of Python development!

00:04:29.340 --> 00:04:35.860
Let's go to this point then, and we'll ony comment on this second one and we'll only see the 

00:04:35.860 --> 00:04:42.040
header panel core, this is the initial header. Then we'll see the tabs, in this case we have two 

00:04:42.040 --> 00:04:48.860
tabs, one that refers to all, and the other one to favorites. And finally we also have a conteiner here that 

00:04:48.860 --> 00:04:52.980
we could also hide or not, we'll let it available in this case. We then save.

00:04:52.980 --> 00:04:59.280
Or server keeps working in the 8000 port, 
we reload the page in the 8000 port, 

00:04:59.280 --> 00:05:05.140
and as you can see, we have our panel and our conteiner. Let's remove the second conteiner, 

00:05:05.140 --> 00:05:15.440
so we can keep seeing the elements. And here we'll see the tabs, just as interactions.

00:05:15.440 --> 00:05:20.800
So this way, we have the interaction with the styles in he tab. After this we can generate

00:05:20.800 --> 00:05:26.980
many conteiners depending of what we want to do. 
I can also list the conteiners

00:05:26.980 --> 00:05:29.080
In this case, we'll remove the comment, very easily. 

00:05:29.080 --> 00:05:37.580
To list these conteiners I have to use the post-cart label, and I'll also shoe how I'm linking 

00:05:37.580 --> 00:05:45.900
these post cart in this element, Let's go out from this Index.html that we have here. And here we have

00:05:45.900 --> 00:05:52.880
the post-cart, the element that I'm embedding, in this particular case. In Polymer, is very easy 

00:05:52.880 --> 00:05:54.880
to do this embedding actions

00:05:54.880 --> 00:06:00.140
where you can see that this html content is already available 

00:06:00.140 --> 00:06:03.540
for me to set it up from the Index. 

00:06:03.680 --> 00:06:09.560
I can do the same thing with Google Chart. 
What I'm doing there is to bring 

00:06:09.560 --> 00:06:10.560
that information that is 

00:06:10.560 --> 00:06:16.540
located in Google chart html, as I do it in the post card html, and embedding in the Index.html 

00:06:17.540 --> 00:06:22.140
with some parameters that I've been chaning. This way we can see 

00:06:22.140 --> 00:06:26.840
how Polymer allows us very quickly to do this operations, but here we're doing so 

00:06:26.840 --> 00:06:37.140
in a simulated way. Let's remove the comment, and here we have some 

00:06:37.140 --> 00:06:45.560
java script, Done. And we have the conteiner that simulates the final graphic. So let's add that. 

00:06:45.560 --> 00:06:49.820
We go back here, our server keeps working, we have our tab, we have our conteiner 

00:06:49.820 --> 00:06:51.820
and our graphic. 

00:06:51.820 --> 00:06:58.520
Now we'll see how this same operation works but brining the data form BigQuery, 

00:06:58.520 --> 00:07:02.080
as we've been working on it in our previous "Reverse Focus" segment (previous show). 

00:07:02.080 --> 00:07:03.120
Let's take a few seconds 

00:07:03.120 --> 00:07:05.120
because we won't see it right now, as it is our "x".  

00:07:05.120 --> 00:07:09.700
We'll be right back with much more to come in Google Developers Show and with our "Reverse Focus" segment. 

00:07:17.320 --> 00:07:19.320
Welcome to "Latam in your hands" segment, 

00:07:19.320 --> 00:07:23.500
a panel where the voices of the technological development and knowledge of Google technologies 

00:07:23.500 --> 00:07:25.500
speak up!

00:07:25.500 --> 00:07:31.440
In this emission we'll hear about Cine+, a young team with one of the most outstanding applications 

00:07:31.440 --> 00:07:33.100
in the mobile regional ecosystem. 

00:07:44.160 --> 00:07:48.260
Cine+ is an application to sell tickets of the 
90% of the cinemas in the country. 

00:07:48.260 --> 00:07:53.860
With the GPS of your smartphone, we show you the closest cinemas and if you don't know 

00:07:53.860 --> 00:07:56.580
where the cinema is, we show you, 
with the help of Google Maps, 

00:07:56.580 --> 00:08:01.400
where exactly the cinema is and how 
you can get there with Google addresses. 

00:08:01.400 --> 00:08:06.420
In Cine+, we try to have great experiences in mobile applications, specifically in Android. 

00:08:07.140 --> 00:08:12.380
The first application that we developed was
 for Android. We developed the 

00:08:12.440 --> 00:08:17.920
first prototype in 8 hours in a Google Hackaton, and we moved forward from that start. 

00:08:18.400 --> 00:08:25.580
I'm in charge of doing the platform development  for Android, and what i like the most is  

00:08:25.580 --> 00:08:29.520
the versatility of being able to try many things, so every time we want to create a new feature 

00:08:29.520 --> 00:08:34.200
that is quite complexi, Android has the tools to do so. 

00:08:34.200 --> 00:08:36.200
We like to use it because 

00:08:36.200 --> 00:08:39.200
we can try things very easily. The waiting time in the store takes just 2 hours and then the user can 

00:08:39.200 --> 00:08:43.040
enjoy the new experience. We also use 
other services like App Engine 

00:08:43.040 --> 00:08:48.520
that saves us the time to create the infrastructure from 0.

00:08:48.520 --> 00:08:55.520
We just take care of doing the code, the 
front end and that's it, in a few minutes 

00:08:55.520 --> 00:08:56.920
we have all done and working for the clients. 

00:09:04.320 --> 00:09:09.980
Alright, we're back in our "Reverse focus" segment. Let's keep working on data in Polymer. 

00:09:09.980 --> 00:09:14.580
In the first segment, we've been working on Polymer 

00:09:14.580 --> 00:09:19.200
technology and we saw how to interact (in a simulated way) with the elements that it proposes. 

00:09:19.220 --> 00:09:25.860
Now we'll work in the direct solution in which we get the data of BigQuery, 

00:09:25.860 --> 00:09:30.640
following the initial scenary of our Rever Focus segment in the first show, and we bring that data 

00:09:30.960 --> 00:09:35.140
and we render them using the components of Polymer. Let's 

00:09:35.140 --> 00:09:40.200
enjoy this technological party. In this 
particular case we keep working 

00:09:40.200 --> 00:09:45.380
on the code. As you can see we have 
our development in the traditional server, 

00:09:45.380 --> 00:09:50.880
in the 8000 port of the localhost, where we've 
been working with Polymer. Here  

00:09:50.880 --> 00:09:54.800
we have our development enviroment with our demonstration of Polymer. Let's cancel this because 

00:09:54.800 --> 00:09:56.800
we don't need it anymore, 

00:09:57.040 --> 00:10:01.400
and we'll go directly to interact with the solution in BigQuery.

00:10:01.400 --> 00:10:06.400
We keep using, in this particular case, 
the dashboard of BigQuery that is 

00:10:06.400 --> 00:10:09.000
dashboard-bigquery as the axis of solution.

00:10:09.000 --> 00:10:16.180
And in this solution, we did a connection in BigQuery, we obtain a query in BigQuery, 

00:10:16.180 --> 00:10:18.180
from a massive data base. 

00:10:18.180 --> 00:10:22.780
In this case we used as an example the Wikipedia data base and we rendered that information 

00:10:22.780 --> 00:10:28.400
trough a traditional chart. Now that we remember that scenario we have prepared here an Index.html 1

00:10:28.400 --> 00:10:33.660
but we have an Index.html that is the initial 
scenario of code that we worked on.

00:10:33.660 --> 00:10:40.420
As you can see, we had implemented 
a function in Java Script 

00:10:40.420 --> 00:10:45.440
that received the information in a Jason 
format and basically it rendered it 

00:10:45.440 --> 00:10:50.120
in a graphic. Let's see this solution and how it runs. 

00:10:50.120 --> 00:10:53.120
To do se we'll use Google App Engine Loucher. Remember 

00:10:53.120 --> 00:10:59.380
that we're developing the solution with Python, and in this particular case, we have to run 

00:10:59.380 --> 00:11:03.700
the application like this. We can also configure PhyCharm, and run the application 

00:11:03.700 --> 00:11:07.700
from the development of the IDE. In this case we'll use Google App Engine Louncher. 

00:11:07.980 --> 00:11:12.980
As you can see here, I place my solution, 
in this case, Dashboard BigQuery.

00:11:13.040 --> 00:11:18.280
Let's run it, as you can see it is green now, and we'll browse it. 

00:11:18.280 --> 00:11:23.900
In this case, the 1980 port runs inside the localhost 

00:11:23.900 --> 00:11:29.100
and we obtain the query (The execution is done in App Engine), 

00:11:29.100 --> 00:11:34.100
from BigQuery with the data so we can then 
render them in the columns panel

00:11:34.140 --> 00:11:36.600
as you can see here in this graphic. 

00:11:36.600 --> 00:11:40.700
Now we'll do the same, but we'll use Polymer. 

00:11:41.340 --> 00:11:45.980
So, let's see how to implement this second step.

00:11:45.980 --> 00:11:51.900
We need toc reate a html that uses Polymer components. 

00:11:51.900 --> 00:11:58.380
We'll use Index_1 las the number 1 version 
of this Html. The structure 

00:11:58.380 --> 00:12:01.940
of this html is very simple. We have 
a header as you can see here,  

00:12:01.940 --> 00:12:07.020
we're also calling to a very traditional Java Script, and we do the implementation of this import

00:12:07.020 --> 00:12:13.680
that in this case has all the knowledge 
of Polymer to render the charts

00:12:13.680 --> 00:12:15.460
of Google, in this case. 

00:12:15.940 --> 00:12:19.600
Now we'll use a combination of Polymer and Web Components. So it is important 

00:12:19.600 --> 00:12:25.260
that we see how Google chart is implemented. 
We already have this chart

00:12:25.260 --> 00:12:28.460
that we can obtain from the Web Components page, 

00:12:28.460 --> 00:12:30.120
as one fo the traditional examples. 

00:12:30.120 --> 00:12:35.600
As you can see here it is a bit long the 
development that Google chart 

00:12:35.600 --> 00:12:40.220
propose but the knowledge is ready 
so we can use it. The only thing 

00:12:40.220 --> 00:12:46.060
that I'll do in this particular case, is 
to implement this element of Google chart. 

00:12:46.060 --> 00:12:52.340
Once we that implemented with 
the importation ready, we'll use a label 

00:12:52.340 --> 00:12:54.860
of web complements with Polymer that Google Chart

00:12:54.860 --> 00:13:00.220
propose, as you can see here. 
The only change, and this is the tip

00:13:00.220 --> 00:13:03.160
and trick of this implementation 

00:13:03.160 --> 00:13:08.040
is that we are bringing the data with Data, 
remember that I have to put 

00:13:08.260 --> 00:13:11.340
the " safe" in order to 

00:13:11.340 --> 00:13:15.520
obtain the data correctly pure from Jason. This way, I'm getting 

00:13:15.520 --> 00:13:21.220
the data that BigQuery gives me from the query, like we traditionally did in the initial chart. 

00:13:21.220 --> 00:13:26.860
Let's see now the implementation in Python that we had from the solution in App Engine. 

00:13:26.980 --> 00:13:33.400
This solution won't change at all. The only thing we'll change is that we order to the HTML 

00:13:33.400 --> 00:13:37.500
that Jinja 2 takes all the data with 
the template that we show you. 

00:13:37.540 --> 00:13:44.660
So let's see the implementation of main.phy where we have, at the end, the template

00:13:44.660 --> 00:13:50.040
where the information is embed in the Index.html 

00:13:50.040 --> 00:13:55.700
We'll change the Index.html to index_1. html 
and the information

00:13:55.700 --> 00:14:00.100
will flow to this new component in Polymer 
that we've been working on. 

00:14:01.060 --> 00:14:07.140
Let's see how this application words. We already did the change and we explained how each 

00:14:07.140 --> 00:14:11.120
of these elements work. Let's go back 
to our initial scenario. I'll reload 

00:14:11.120 --> 00:14:16.140
the application and we'll see how this 
element behaves. As you can see

00:14:16.140 --> 00:14:21.960
we have the rendered graphic using Polymer. 

00:14:21.960 --> 00:14:23.960
As you can we review in the Index_1.html 

00:14:23.960 --> 00:14:28.540
and its title is Demonstration.

00:14:28.540 --> 00:14:33.900
In fact, is misspelled. Let's write Demo, so you can see that the graphic that is being 

00:14:33.900 --> 00:14:39.100
implemented is the graphic that we're 
viewing. We go bak to our browser 

00:14:39.100 --> 00:14:42.620
and in this case we reload the application, 
that does the query, 

00:14:42.620 --> 00:14:46.520
and it is titled Demo. This has been our implementation in 

00:14:46.520 --> 00:14:50.160
our Rever Focus segment. We brought 
the data and we implemented them 

00:14:50.160 --> 00:14:51.600
using Polymer. 

00:14:52.340 --> 00:14:57.440
LatinAmerican developers, we've come this far for now in our Google Developers Show.

00:14:57.440 --> 00:14:59.440
Don't miss the next episodes!

00:14:59.440 --> 00:15:01.440
And keep developing!

