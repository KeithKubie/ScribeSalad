WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:02.230
Here's how the site works at the moment.

00:00:02.230 --> 00:00:06.440
When you navigate to Witter, the browser
makes a request for some HTML.

00:00:06.440 --> 00:00:09.900
Like all web requests,
this goes via the browser's HTTP cache.

00:00:09.900 --> 00:00:13.720
And if there's no match there,
it continues on to the internet.

00:00:13.720 --> 00:00:17.370
Then hopefully, the response makes
its way back to the browser.

00:00:17.370 --> 00:00:22.160
The html the browser receives tells it
it needs some CSS, so that's fetched.

00:00:22.160 --> 00:00:25.790
Once that arrives, we get our first
render, a page full of content.

00:00:25.790 --> 00:00:29.160
You see the initial set of posts
are right there in the HTML.

00:00:29.160 --> 00:00:32.759
But at the same time
the browser downloaded the CSS,

00:00:32.759 --> 00:00:34.980
it's also requesting some JavaScript.

00:00:34.980 --> 00:00:38.890
And when that arrives it opens
a websocket, a persistent connection

00:00:38.890 --> 00:00:42.560
that let's the server continually
stream newer posts as they arrive.

00:00:42.560 --> 00:00:45.330
This provides the live updates so
the user doesn't miss out on

00:00:45.330 --> 00:00:49.430
a single piece of nonsense
posted by the other users.

00:00:49.430 --> 00:00:53.720
In terms of the pages JavaScript
you'll find that in public JS main.

00:00:53.720 --> 00:00:57.050
The starting point is index.js,
but all this does is load,

00:00:57.050 --> 00:01:00.620
polyfill is that some browsers
may need such as promises and

00:01:00.620 --> 00:01:03.730
the URL API which will use
a little bit later on.

00:01:03.730 --> 00:01:06.790
The main work happens
in IndexController.js.

00:01:06.790 --> 00:01:09.610
The constructor here is run for
every page load.

00:01:09.610 --> 00:01:13.680
We have this PostsView which helps
us update the post on the page.

00:01:13.680 --> 00:01:16.090
This ToastsView helps us
display error messages,

00:01:16.090 --> 00:01:18.460
hopefully we won't get
too many of those.

00:01:18.460 --> 00:01:20.070
And then we open a socket connection.

00:01:21.330 --> 00:01:26.640
The open socket method, well as you
might guess opens the WebSocket and

00:01:26.640 --> 00:01:30.930
the message event is fired when data
is received for a new post to display.

00:01:30.930 --> 00:01:33.970
When you post a received
on socket messages called,

00:01:33.970 --> 00:01:38.980
this method passes the data is chosen
and passes the result to the PostView.

00:01:38.980 --> 00:01:40.340
While the server is running,

00:01:40.340 --> 00:01:44.110
any changes you make to these
files will be processed and built.

00:01:44.110 --> 00:01:46.820
I didn't want ES6 to be
a prerequisite for this course, so

00:01:46.820 --> 00:01:48.340
i'm going to stick to ES5.

00:01:48.340 --> 00:01:52.530
But the build system uses babel so if
you're like a cool kid from the future.

00:01:52.530 --> 00:01:55.050
Feel free to use some of
the latest JavaScript syntax.

00:01:56.530 --> 00:01:57.600
And i almost forgot.

00:01:57.600 --> 00:02:03.040
There's actually another server
running on port 8889 so open up.

00:02:03.040 --> 00:02:06.380
This gives you basic control over
your connectivity to the server.

00:02:06.380 --> 00:02:07.620
How to play with the settings.

00:02:07.620 --> 00:02:10.310
Refresh the page and
see how it responds.

00:02:10.310 --> 00:02:14.540
You'll see things are pretty bad
in everything except perfect mode.

00:02:14.540 --> 00:02:19.000
Over the course of this course, we're
going to fix the non perfect cases.

