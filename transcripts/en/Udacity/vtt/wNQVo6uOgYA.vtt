WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Narrator] So, here's an idea how to make this more efficient,

00:00:03.000 --> 00:00:06.000
and it turns out empirically it also gives better samples.

00:00:06.000 --> 00:00:11.000
Let's represent all our particles and importance weight in a big wheel.

00:00:11.000 --> 00:00:18.000
Each particle occupies a slice that corresponds to its importance weight.

00:00:18.000 --> 00:00:24.000
Particles with a bigger weight, like W5, occupy more space.

00:00:24.000 --> 00:00:29.000
Whereas particles with a smaller weight occupy less space.

00:00:29.000 --> 00:00:36.000
Very initially let's guess a particle index uniformly from the set of all indices.

00:00:36.000 --> 00:00:38.000
I did note this as a uniform sample at U

00:00:38.000 --> 00:00:43.000
from the discrete set of choices of index 1 all the way to N,

00:00:43.000 --> 00:00:49.000
and as a caveat in Python, of course, it goes from 0 to N-1.

00:00:49.000 --> 00:00:52.000
So, say we pick W6.

00:00:52.000 --> 00:00:55.000
Then, the trick is--then you're going to construct the function better.

00:00:55.000 --> 00:01:01.000
Then, I initialize the 0 and to which I add--when I construct these particles--

00:01:01.000 --> 00:01:08.000
a uniformly drawn continuous value that sits between 0 and 2 times W max,

00:01:08.000 --> 00:01:14.000
which is the largest of the importance weights in the important set.

00:01:14.000 --> 00:01:21.000
W5 is the largest, so we're going to add a random value that might be as large as twice W5.

00:01:21.000 --> 00:01:26.000
Suppose the value we added brings us to here.

00:01:26.000 --> 00:01:29.000
So, this is the value we actually drew,

00:01:29.000 --> 00:01:33.000
measured from the beginning of the sixth particle which shows an initialization.

00:01:33.000 --> 00:01:36.000
I now then iterate the following loop:

00:01:36.000 --> 00:01:41.000
if the importance weight of the present particle doesn't suffice

00:01:41.000 --> 00:01:43.000
to reach all the way to beta.

00:01:43.000 --> 00:01:51.000
So, if W index isn't as big as beta, then I subtract from beta this very value W index

00:01:51.000 --> 00:01:55.000
and I increment index by 1.

00:01:55.000 --> 00:01:59.000
So, what have I done? I've moved index to over here,

00:01:59.000 --> 00:02:06.000
and I removed this part of beta so the point over here is still the same as before.

00:02:06.000 --> 00:02:10.000
We now get to the point where beta becomes smaller than W index,

00:02:10.000 --> 00:02:12.000
which is the case in the next situation.

00:02:12.000 --> 00:02:14.000
Now index=7.

00:02:14.000 --> 00:02:20.000
Then, index is the index of the particle I pick in my resampling process.

00:02:20.000 --> 00:02:25.000
So, I picked the particle index; I now iterate I add another uniform value to beta.

00:02:25.000 --> 00:02:27.000
Say I add this one.

00:02:27.000 --> 00:02:30.000
This is the value I add, this is the value beta previously had.

00:02:30.000 --> 00:02:34.000
The same iteration now will make index flow up

00:02:34.000 --> 00:02:40.000
reducing beta by all the slice over here, which is W7,

00:02:40.000 --> 00:02:44.000
and then jump over here, and particle 1 is picked.

00:02:44.000 --> 00:02:47.000
It can easily happen that the uniform value is so small

00:02:47.000 --> 00:02:52.000
that the same particle is picked twice, and it's easy to see

00:02:52.000 --> 00:02:56.000
that each particle is now picked in proportion to the total circumference

00:02:56.000 --> 00:02:59.000
it spans in this wheel of particles.

00:02:59.000 --> 00:03:04.000
So, this is essentially my implementation for the resampling step.

00:03:04.000 --> 00:03:12.354
So, I want you--if you can--to implement that specific resampler in Python.

