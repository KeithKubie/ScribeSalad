WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:03.410
So let's look at the messaging complexity of the

00:00:03.410 --> 00:00:07.260
mutual exclusion lock algorithm. The lock primitive, when a

00:00:07.260 --> 00:00:10.790
process makes a lock request, it sends N minus

00:00:10.790 --> 00:00:13.870
1 request messages. Because there are N nodes in

00:00:13.870 --> 00:00:17.020
the distributed system, there are N minus 1 peers,

00:00:17.020 --> 00:00:19.320
and so every node has to send a request

00:00:19.320 --> 00:00:21.770
message to all its peers, so N minus 1

00:00:21.770 --> 00:00:25.520
messages are the request messages sent out. And in response

00:00:25.520 --> 00:00:28.165
to these request messages, every peer is going to

00:00:28.165 --> 00:00:31.420
acknowledge a request message. So, they're going to be

00:00:31.420 --> 00:00:34.770
N minus 1 messages traversing the network, which

00:00:34.770 --> 00:00:38.190
are the acknowledgement message for this lock request. And

00:00:38.190 --> 00:00:42.340
then, the process is happy using the lock

00:00:42.340 --> 00:00:44.430
for the critical section. And it gets to

00:00:44.430 --> 00:00:48.250
the unlock primitive, and the unlock primitive, once

00:00:48.250 --> 00:00:50.710
again, we're going to send N minus 1 unlock

00:00:50.710 --> 00:00:54.990
messages, through the unlock primitive and while sending a

00:00:54.990 --> 00:00:57.800
unlock message to every one of the peers in the

00:00:57.800 --> 00:01:00.720
distributive system, so N minus 1 messages are sent

00:01:00.720 --> 00:01:03.090
over the network. Interesting thing that you notice is that

00:01:03.090 --> 00:01:06.000
there's no acknowledgment for the unlock message because of

00:01:06.000 --> 00:01:09.740
the assumption that we make that messages are never lost.

00:01:09.740 --> 00:01:12.180
And therefore, when I send an unlock message, I

00:01:12.180 --> 00:01:15.720
know that everybody will get it, everybody will remove my

00:01:15.720 --> 00:01:18.460
request from the respective queues and go on with

00:01:18.460 --> 00:01:21.770
life. And therefore there is no acknowledgment for that. And

00:01:21.770 --> 00:01:23.690
so if you count the number of messages that are

00:01:23.690 --> 00:01:27.500
involved and a lock plus unlock, totally, we have 3

00:01:27.500 --> 00:01:30.110
to the N minus 1. That's the total number of

00:01:30.110 --> 00:01:33.950
messages that are incurred, that is a message in complexity,

00:01:33.950 --> 00:01:37.450
of the distributed mutual exclusion lock algorithm. That begs the

00:01:37.450 --> 00:01:40.680
question, can we do better? And the answer is yes,

00:01:40.680 --> 00:01:46.630
and the reason is going back to the condition that I said that is used

00:01:46.630 --> 00:01:52.730
in making a decision as to whether I want the lock or not. If you recall, I

00:01:52.730 --> 00:01:56.660
told you that the condition is, my request has to be at the top of the

00:01:56.660 --> 00:02:00.910
queue, and second, I should have either gotten

00:02:00.910 --> 00:02:06.095
acknowledgements for that request from everybody else, or I've

00:02:06.095 --> 00:02:11.750
received a lock request from my peers that

00:02:11.750 --> 00:02:14.060
have a time stamp that is later than my

00:02:14.060 --> 00:02:16.270
own lock request. If the lock request that

00:02:16.270 --> 00:02:19.686
I received from my peers have time stamps that

00:02:19.686 --> 00:02:25.470
are later than mine, I know that they are going to wait for me to be served

00:02:25.470 --> 00:02:28.790
before they're going to use the lock. And therefore,

00:02:28.790 --> 00:02:31.300
what I can do if I am a receiving

00:02:31.300 --> 00:02:38.340
node for a lock request, when I see a lock request, normally I would go ahead

00:02:38.340 --> 00:02:41.490
and do an acknoweldgement. But, when I get

00:02:41.490 --> 00:02:44.490
a lock request and I see, hey, this guy's

00:02:44.490 --> 00:02:47.860
lock request is going to be after mine, so

00:02:47.860 --> 00:02:50.320
I don't have to send an acknowledgement yet. What

00:02:50.320 --> 00:02:53.070
I can do is wait til I'm actually

00:02:53.070 --> 00:02:56.920
going to unlock. My unlock itself can serve as the

00:02:56.920 --> 00:03:01.040
acknowledgement for that particular node that has

00:03:01.040 --> 00:03:03.050
made a lock request that is later

00:03:03.050 --> 00:03:07.980
in time than my own. So in other words, we can defer the acknowledgements if

00:03:07.980 --> 00:03:11.460
my lock request precedes my peers lock

00:03:11.460 --> 00:03:16.270
request. So we're combining the acknowledgement for

00:03:16.270 --> 00:03:22.270
a lock request with the unlock. So if I do that, then I can bring

00:03:22.270 --> 00:03:27.760
the message complexity down to 2 the N minus 1. So what we're doing is to gather

00:03:27.760 --> 00:03:31.440
the acknowledgement messages if in fact our own

00:03:31.440 --> 00:03:35.560
lock request is ahead of an incoming request that

00:03:35.560 --> 00:03:38.290
I see from up here. That's how we

00:03:38.290 --> 00:03:41.130
can reduce the messaging complexity of this algorithm to

00:03:41.130 --> 00:03:43.290
be 2 to the N minus 1. By the

00:03:43.290 --> 00:03:47.400
way, the distributed mutual exclusion lock problem have been

00:03:47.400 --> 00:03:49.270
a fertile ground for researchers to think

00:03:49.270 --> 00:03:52.220
about new algorithms that can shave the

00:03:52.220 --> 00:03:57.380
messaging complexity even further from this 2 to the N minus 1, and I invite

00:03:57.380 --> 00:04:01.830
you to look at the literature to see other works that have been done

00:04:01.830 --> 00:04:07.017
to reduce the message complexity to even smaller numbers than 2 times N minus 1.

