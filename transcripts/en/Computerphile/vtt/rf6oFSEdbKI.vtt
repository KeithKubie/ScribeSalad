WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.529
I think, as far as I know, it was Brian
Kernighan and Dennis Ritchie who first

00:00:04.529 --> 00:00:08.639
introduced it to me. I don't if it goes
back earlier than that, but certainly  in

00:00:08.639 --> 00:00:13.650
the C book - there it is: 'printf ("hello
world\n")', you know, and the use of '\n'

00:00:13.650 --> 00:00:17.970
to denote a new line at the end of it,
and all that. It's now really become a

00:00:17.970 --> 00:00:21.840
part of Comp Sci legend. The first thing
you do when you show that you've

00:00:21.840 --> 00:00:26.939
mastered [or just begun] a new language 
be it Python or whatever, you know, "Oh yes! here's

00:00:26.939 --> 00:00:35.700
how to do 'Hello World' ". Of course, "Hello
World" is a characters-based challenge.

00:00:35.700 --> 00:00:39.989
And from what we now know about
characters - in modern computers at least -

00:00:39.989 --> 00:00:45.210
being stored in addressable bytes - 
does it sort of follow then, that "Hello

00:00:45.210 --> 00:00:50.760
World" would be somewhat easier [at low level]
on a byte-based machine? Oh yes! it would be a lot

00:00:50.760 --> 00:00:56.039
easier on a byte-based machine. But there's
other things as well. So as, perhaps, an

00:00:56.039 --> 00:01:00.210
illustration of just how horrible it
could be - and given that we have done

00:01:00.210 --> 00:01:07.350
some stuff on EDSAC already -  let's go
and do that. If you haven't seen the

00:01:07.350 --> 00:01:10.680
other EDSAC stuff I think you'll be
able to follow what I'm doing anyway.

00:01:10.680 --> 00:01:14.250
And you could always go back later and
pick up some more background about EDSAC.

00:01:14.250 --> 00:01:19.350
But when we were on this EDSAC
simulator, the last time, we actually did

00:01:19.350 --> 00:01:24.570
run the program that Martin Campbell-Kelly
supplies with it. And he got fed up of

00:01:24.570 --> 00:01:28.290
doing "Hello World". He said: "I'll just do a
brief version that says 'HI' ". We did that.

00:01:28.290 --> 00:01:35.250
Thanks to a combined programming effort
now, by those in this room, I have here

00:01:35.250 --> 00:01:41.759
the new version "HelloWorld_SR_DFB.txt" 
And there it is. It's quite a lot

00:01:41.759 --> 00:01:46.530
longer, of course, than the previous one was. 
&gt;&gt; Sean: So, is each of those lines using a word, then ?

00:01:46.530 --> 00:01:52.259
&gt;&gt; DFB: Yes. EDSAC was designed
around the most minimalist set of things

00:01:52.259 --> 00:01:56.369
It was basically ... the story was ... if it's
possible to do [it] with what we've got

00:01:56.369 --> 00:01:59.490
already, then don't start inventing new flavours of

00:01:59.490 --> 00:02:04.829
instructions. So, all you've got here is
- this is the stuff of course for setting

00:02:04.829 --> 00:02:10.810
up where the load point is,
and where the relative offsets of these

00:02:10.810 --> 00:02:17.019
addresses is, relative to 64. The '@' symbol at 
the end [of an instruction]  signals to David

00:02:17.019 --> 00:02:24.340
Wheeler's Initial Orders that what comes
here is a relative address. So what it's

00:02:24.340 --> 00:02:31.269
saying is: letter O - not a zero - "output
the character which you can find in the

00:02:31.269 --> 00:02:40.900
memory location 16 further on than 64 is".
So, all these offsets: 16, 17, 18, 19, 20 are

00:02:40.900 --> 00:02:47.500
all relative to 64. So in actual fact,
then, it turns out that address 80 holds

00:02:47.500 --> 00:02:53.170
the very first thing you want to output.
And of course 16 on from 64 .... well if 64

00:02:53.170 --> 00:02:58.989
is here this is where the actual data
starts. The 'ZF' and the things like that

00:02:58.989 --> 00:03:04.510
correspond to what are nowadays called
assembler directives. It's not always the

00:03:04.510 --> 00:03:09.730
case that these things go
one-for-one into occupying a word. Some

00:03:09.730 --> 00:03:13.690
of them are messages to the assembler.
All the stuff up here is basically

00:03:13.690 --> 00:03:19.569
saying: "I want you to remember 64 and
start locating everything relative to that".

00:03:19.569 --> 00:03:23.829
&gt;&gt; Sean: Because if we look specifically
at the line numbers on the left there that

00:03:23.829 --> 00:03:28.420
wouldn't be the  place you're trying to
get to,  right?".
&gt;&gt; DFB: No, this stuff up here is

00:03:28.420 --> 00:03:32.889
what would probably be done in modern
assemblers by saying something like "ORG = 64".

00:03:32.889 --> 00:03:38.290
[where ORG = "origin"] In other words that isn't 
a program instruction. It's telling you, the

00:03:38.290 --> 00:03:43.600
assembler: "Please start me [loading] at 64". And it's 
for your own [assembler] internal knowledge. It's not

00:03:43.600 --> 00:03:48.609
to be translated into a program
instruction. So the ZF says "Stop" - stop

00:03:48.609 --> 00:03:53.470
execution. But in the meantime what we're
expecting is the thing that is 16 on

00:03:53.470 --> 00:04:00.519
from 64 will actually get us to here 
for *F. What does *F do?   * is a short

00:04:00.519 --> 00:04:07.239
code for saying "Put yourself in letter
shift". Veterans of 5-hole paper tape will

00:04:07.239 --> 00:04:11.260
know - you've got to make sure that you're
in letter shift to print meaningful

00:04:11.260 --> 00:04:16.900
messages. The other possible shift is
figure shift and all hell breaks loose

00:04:16.900 --> 00:04:21.910
if you start forgetting to shift out [of that].
It's just like the shift key on a typewriter,

00:04:21.910 --> 00:04:24.910
that's where it comes from historically
&gt;&gt; Sean: Can you use that as a very, very

00:04:24.910 --> 00:04:32.650
simplistic code ?!
&gt;&gt; DFB:  [laughing] Yes! Possibly! Anyway, so
turn into letter shift and, look, this

00:04:32.650 --> 00:04:40.210
makes sense now! Can you see HF in one
[single-length] word?  F means: "This

00:04:40.210 --> 00:04:45.340
is a single length word". Yeah, 18 bits.
Actually the op-code field for those

00:04:45.340 --> 00:04:51.360
who've got the EDSAC tutorial. The
op-code field is occupied by an H

00:04:51.360 --> 00:04:59.140
but the O command will output these [bits in 
the op-code field] as if they were characters,
-  and meant to be characters.

00:04:59.140 --> 00:05:02.830
They've got to be in the
op-code field but the O command says: 

00:05:02.830 --> 00:05:08.140
"Look in the opcode field". Regard it -
as not a Baudot character, remember Maurice

00:05:08.140 --> 00:05:12.850
Wilkes had invented EDSAC code - subtly
different but never mind. And it's so you

00:05:12.850 --> 00:05:18.250
end up coming to here and saying: "Oh! it's a
letter H [that] I am to output when this O

00:05:18.250 --> 00:05:22.780
instruction, with a relative address
offset on it. And you go all the way. Look

00:05:22.780 --> 00:05:29.470
here H-E-L-L-O. What's the exclamation mark?
Look it up in the EDSAC tutorial, as I

00:05:29.470 --> 00:05:34.000
had to do. That's the marker you put in
if you want to force an explicit space

00:05:34.000 --> 00:05:39.250
between HELLO and WORLD. Which we did. And
we finally ... what are @F and

00:05:39.250 --> 00:05:43.390
&amp;F after the 'D' of "HELLO WORLD"?
Well, let's take a guess. We're trying to

00:05:43.390 --> 00:05:47.260
be neat and tidy - make it look good -
that's the code for "give me a carriage

00:05:47.260 --> 00:05:52.000
return; give me a line feed". And then we
say "end of the whole thing; end execution".

00:05:52.000 --> 00:05:55.240
And this is a marker also to Initial Orders:

00:05:55.240 --> 00:05:58.540
You can stop relocating this program for me. 
I'm done.

00:05:58.540 --> 00:06:04.570
OK. so that - since it's on top now -
Oh! - fingers crossed Sean - what do we do? We do

00:06:04.570 --> 00:06:10.870
Start don't we? We noticed that, way back up at the top 
[of the program], we put in a Stop, just to make

00:06:10.870 --> 00:06:14.770
sure. Because [puts on 'ironic' voice] with our 
incredible knowledge of EDSAC binary. Sean and I

00:06:14.770 --> 00:06:18.730
can see, straight away, [looks at oscilloscope display] 
that that, of course, is HELLO WORLD. I mean,

00:06:18.730 --> 00:06:22.840
we're not kidding. David Wheeler would know
that it said HELLO WORLD. I'll tell you

00:06:22.840 --> 00:06:26.680
something else, Sean. After only half a day's 
familiarity with this,

00:06:26.680 --> 00:06:31.240
John von Neumann would know that
that was HELLO WORLD! He'd find it so 

00:06:31.240 --> 00:06:35.740
comfortable to remember the details of
the binary. Y'know, I'm sure he would!

00:06:35.740 --> 00:06:38.530
I really do.
So, here we go then. Let's do a Single

00:06:38.530 --> 00:06:43.660
EP,  a single instruction, Single
Shot, it's sometimes called nowadays. 

00:06:43.660 --> 00:06:47.590
Right! There we are! It's still blinking. We
turned into letter shift with that click,

00:06:47.590 --> 00:06:54.580
next click 'H'.Oh! isn't this wonderful Sean?!
Aren't we demon programmers?! E-L-L-  

00:06:54.580 --> 00:07:03.729
O-space.  Yes!  W-O-R-L-D- carriage
return - line feed. So, that was pretty

00:07:03.729 --> 00:07:07.270
painful! Although the T64K gives you relocatability -

00:07:07.270 --> 00:07:12.400
[e.g.] you could change that to be T256K,
say, if you wanted to - [i.e.] shove the

00:07:12.400 --> 00:07:16.600
whole thing up memory and then maybe
turn it into a subroutine? You want to

00:07:16.600 --> 00:07:21.789
push it somewhere else in memory. So, the
bulk relocation, against the base address,

00:07:21.789 --> 00:07:25.690
is taken care of by Initial Orders, but
you've still got to get the offsets

00:07:25.690 --> 00:07:30.130
right. And it's painful!
It's utterly, utterly painful. We're now

00:07:30.130 --> 00:07:36.610
gonna jump forward [in time] into safe 
byte-addressed territory, for handling

00:07:36.610 --> 00:07:40.150
characters, and [focus on] the ARM
32-bit ARM chip, which we use for

00:07:40.150 --> 00:07:47.669
teaching assembler programming here 
[at Univ of Nottingham] to our first years 
[undergrads.] Yeah, it is a 32-bit word,

00:07:47.669 --> 00:07:54.340
broken up into four bytes, 8-bit bytes,
which of course use ASCII not IBM EBCDIC

00:07:54.340 --> 00:08:00.430
Fine,  so down at the assembler
level for the ARM, then, what does

00:08:00.430 --> 00:08:06.789
the byte addressability give us and what
other things have happened between the

00:08:06.789 --> 00:08:11.919
EDSAC era and this era, where we're
talking late 80s, 90s - this sort of

00:08:11.919 --> 00:08:16.150
thing. What else has happened to make this 
{ARM assembler] thing so much more compact, so much

00:08:16.150 --> 00:08:20.050
easier to understand and so much more
flexible? Well, let's go here through, step

00:08:20.050 --> 00:08:23.590
by step. Comments: anything after a
semicolon is a comment. I've put a

00:08:23.590 --> 00:08:28.600
comment up at the top saying to put out
the "Hello World", we've used the so-called

00:08:28.600 --> 00:08:33.010
software interrupts - the
system calls - as provided by the

00:08:33.010 --> 00:08:37.570
University of Manchester's KoMoDo ARM
development environment, which is what we

00:08:37.570 --> 00:08:42.510
use. So when we get to actually printing
the character out, don't get worried by

00:08:42.510 --> 00:08:47.200
SWI, it means  'software interrupt', to ask the
[KoMoDo] operating system to print something for

00:08:47.200 --> 00:08:51.730
me, or something like that. So let's start
up here. Programs on the ARM will

00:08:51.730 --> 00:08:56.320
cheerfully expect - if you don't tell them
otherwise - that they will start executing

00:08:56.320 --> 00:09:01.630
at line 1 of your program, and go
madly on. I put this data for "Hello World"

00:09:01.630 --> 00:09:08.800
up at the top of the listing. Not at the
bottom as I could have done. But the rule

00:09:08.800 --> 00:09:14.650
then is:  if I declare "Hello World" here, as
being a piece of text, and this DEFB

00:09:14.650 --> 00:09:19.450
here means ' ,,, just define a bunch of bytes'.
And you put them in " quotes like you

00:09:19.450 --> 00:09:25.180
would in C. And even - taking over some
of its story from C - it even allows you

00:09:25.180 --> 00:09:29.440
to ask for a newline to be put in there
with \n. And the only difference

00:09:29.440 --> 00:09:36.250
is whereas C implicitly plugs its
strings with a null character at the end,

00:09:36.250 --> 00:09:40.750
ARM doesn't do that for you. You  must
explicitly put in a null character at

00:09:40.750 --> 00:09:47.410
the end of your string - if that is your
stop indicator. But in order to stop the

00:09:47.410 --> 00:09:52.540
ARM chip executing "Hello World" as if it
was bit-patterns for instructions - which you

00:09:52.540 --> 00:09:57.220
don't want - you want to jump past it,  I've
put in here, look, an unconditional branch

00:09:57.220 --> 00:10:03.220
to [the label] 'main'. Branch to 'main'. Aw! now this is
wonderful! You don't have to say branch

00:10:03.220 --> 00:10:07.300
to an absolute address and be like David
Wheeler and John von Neumann and have

00:10:07.300 --> 00:10:13.090
them all in your head,  you just say: "Let's
label it 'main' and this thing called 'an

00:10:13.090 --> 00:10:18.160
assembler' will work out what 'main' means
in terms of the address you want to jump

00:10:18.160 --> 00:10:23.590
to. Isn't that wonderful! [In fantasy] von Neumann 
stares at you and says: "That's for the weak-brained

00:10:23.590 --> 00:10:28.450
who can't keep track of their addresses!"
Y' know! Anyway, so, we branch to 'main'

00:10:28.450 --> 00:10:33.190
and the first thing it says, very
self-evidently, really is:

00:10:33.190 --> 00:10:38.890
"Get me the start address of the text
string and put that start address into

00:10:38.890 --> 00:10:42.900
register 1  [r1]". Next thing we notice - as
long promised: 

00:10:42.900 --> 00:10:49.390
modern CPUs [like ARM] have [typically] 15 or 16
special-purpose registers to make life

00:10:49.390 --> 00:10:54.130
bearable. EDSAC didn't - it only had the
accumulator! And if you wanted other

00:10:54.130 --> 00:10:58.090
storage places, you had to start parking
it in memory, in all sorts of horrible

00:10:58.090 --> 00:11:03.040
ways. So, that helps us straight away:  r1
is going to be our so-called index

00:11:03.040 --> 00:11:10.030
register; it's going to start off by
pointing at the address of 'H'. Now I don't

00:11:10.030 --> 00:11:13.900
know what the byte address of 'H' is. It
might even be relatively zero here. It's

00:11:13.900 --> 00:11:17.710
the first thing that happens in this
program. But whatever is the actual

00:11:17.710 --> 00:11:23.850
bytes address of 'H' is now in register 1.
Here is the crux of the whole thing:

00:11:23.850 --> 00:11:32.320
LDRB [B=byte] "load into a register the byte
specified as follows; here I say r0,

00:11:32.320 --> 00:11:37.420
that's the register I want to load it
into. But where does it come from?

00:11:37.420 --> 00:11:44.860
In square brackets [r1]. That says look in
r1 and you will find an address of the

00:11:44.860 --> 00:11:50.020
start of that string. I don't want you to
load the address into r0, I want

00:11:50.020 --> 00:11:54.310
you to load the character that is at
that address into r0. It's [called] 

00:11:54.310 --> 00:12:00.910
"indirection" and that is indicated by that
square bracket [i.e.] not putting the address

00:12:00.910 --> 00:12:07.930
that's in r1 into r0; I'm following the
pointer from r1 saying:" Oh! that's the

00:12:07.930 --> 00:12:11.560
letter 'H'at the moment and that's what I
put into r0. And here's the other

00:12:11.560 --> 00:12:15.130
cute thing at the end - wouldn't those
pioneers have given the world for this - 

00:12:15.130 --> 00:12:20.340
is to say: " ... and when you've done that,
please, for next time around the loop

00:12:20.340 --> 00:12:26.350
increment that r1 address by one". So, if
it was pointing at 18, shall we say to

00:12:26.350 --> 00:12:30.760
start with, it's 19 now, for next time
around the loop. So you keep on going

00:12:30.760 --> 00:12:33.640
around that loop. And here's the thing
where you check whether you've hit the null

00:12:33.640 --> 00:12:37.480
character: "Compare the contents of
register 0 - which would be a character

00:12:37.480 --> 00:12:42.820
contents - against literally 0, which is
what the null character is. Now, is the

00:12:42.820 --> 00:12:47.590
answer "yes" or "no"? Is it equal, or not
equal, to 0. And here's another lovely

00:12:47.590 --> 00:12:51.309
thing about the ARM chip that Steve and I love

00:12:51.309 --> 00:12:56.619
dearly. This is the 32-bit ARM chip - I
think in the 64-bit one they've [decided] it's not

00:12:56.619 --> 00:13:01.119
so important to do it nowadays. They have
a thing in the 32-bit one called

00:13:01.119 --> 00:13:06.610
'conditional execution', which can save you
often using a branch instruction, which

00:13:06.610 --> 00:13:11.529
are relatively expensive in pipeline
terms. So here we've got SWINE-  which is

00:13:11.529 --> 00:13:16.089
wonderful! Software interrupt 0 says
" ... punch out this character for me on the

00:13:16.089 --> 00:13:20.819
display, on the screen". But NE says: " ...  but
do that only if the last thing you did

00:13:20.819 --> 00:13:27.279
didn't yield 'equal' [so it's 'not equal'] 
Well, we're checking for the null character. So, as

00:13:27.279 --> 00:13:31.029
long as it wasn't the null character
it'll say: "No - I'm not equal to the null

00:13:31.029 --> 00:13:35.139
character". And you print it out and out
it comes, character by character. After

00:13:35.139 --> 00:13:39.999
that, of course, you loop back to go
around and print another character,

00:13:39.999 --> 00:13:44.499
remembering that the #1 has
incremented your address pointer along

00:13:44.499 --> 00:13:48.220
that string. So you keep on going round
here you don't have to remember what [the]

00:13:48.220 --> 00:13:52.029
address 'loop' is. You don't know! [But] the
assembler knows [and] it fixes it up for you.

00:13:52.029 --> 00:13:55.980
And then, right at the very end, the way
to say: "Stop execution - I've done it" 

00:13:55.980 --> 00:14:01.629
SWI flavour 2,  on this emulated environment
says "Stop it completely". The development

00:14:01.629 --> 00:14:09.249
of that from EDSAC? You think "Oh! my golly, I
am so pleased I've got that!" And Martin

00:14:09.249 --> 00:14:13.449
the inventor of the EDSAC simulator here, I
emailed him the other day and he came

00:14:13.449 --> 00:14:18.639
back to me and said: "Yes, the need for an
index register was realized so quickly

00:14:18.639 --> 00:14:27.459
that that's why my [EDSAC] emulator is [only] 
early '49 to late-ish 1950, because in late 1950

00:14:27.459 --> 00:14:32.679
David Wheeler and everybody said "My golly, we need 
an index register!" And they built

00:14:32.679 --> 00:14:40.239
one in. So, in a way then, this is what is
happening. It's that the pioneers were

00:14:40.239 --> 00:14:45.030
using their early machinery
to lead the way into saying: "What extra

00:14:45.030 --> 00:14:50.610
facilities do we need to make life
tolerable for us?" Now, there is the

00:14:50.610 --> 00:14:54.030
hardware facility of having the index
registers and they've just become

00:14:54.030 --> 00:14:59.190
standard kit, afterwards every other machine
has index registers.  But also what interests me is

00:14:59.190 --> 00:15:05.580
the role of a proper assembler. Initial
Orders II is not a full-blown assembler.

00:15:05.580 --> 00:15:12.060
It helps you a little bit by turning
decimal addresses into binary but you

00:15:12.060 --> 00:15:15.840
have to remember that that letter A - that
you put in the leading five bits -

00:15:15.840 --> 00:15:19.230
could be the character 'A', but if
you're regarding this as an instruction,

00:15:19.230 --> 00:15:26.880
that's an ADD instruction. So, but then
Initial Orders II is relocating; it's

00:15:26.880 --> 00:15:31.800
relocating; doing a bit of binary
translation; it's a single-pass process;

00:15:31.800 --> 00:15:36.210
it's wonderful! The problem with
assembler is it has to be a two-pass

00:15:36.210 --> 00:15:39.900
process. The trouble always is that
if you jump back to labels you

00:15:39.900 --> 00:15:43.140
have already seen, you will know already what
address that will be at. But it's  when you

00:15:43.140 --> 00:15:47.220
jump forward. How do I know where the heck that 
label down there is gonna be [in address terms]?

00:15:47.220 --> 00:15:52.500
I don't even want to calculate it! I want
the assembler to say: "Oh! I'm on location 186

00:15:52.500 --> 00:15:58.920
now - how handy!" But then it can't fix up
the addresses till it knows and has

00:15:58.920 --> 00:16:01.680
counted its way through the program.  So
then it says: "Right,

00:16:01.680 --> 00:16:06.900
I will now output you a definitive thing
- that you can put in through David

00:16:06.900 --> 00:16:11.760
Wheelers Initial Orders II - because I've
made it so much easier; because I've

00:16:11.760 --> 00:16:15.900
allowed labels. One doesn't think of
labels as being a structuring convention

00:16:15.900 --> 00:16:19.590
and yet at this low level they are, in a
way. Because this [label] is saying 'loop' - it

00:16:19.590 --> 00:16:25.740
starts here. Another label. Oh! it ends
here. Please calculate the addresses of

00:16:25.740 --> 00:16:30.630
what's happening there and fix it up
for me. And so you might say: "Well, all right

00:16:30.630 --> 00:16:34.470
but didn't everybody say 'we must have
assemblers it's the modern way to do

00:16:34.470 --> 00:16:39.180
things' ?" There were very mixed views
about this. And I don't think EDSAC got

00:16:39.180 --> 00:16:42.810
an assembler until EDSAC 2 - when
another friend of mine, David Hartley 

00:16:42.810 --> 00:16:48.300
did, I think, a macro-assembler for EDSAC 2 -
not EDSAC 1. Because there's a

00:16:48.300 --> 00:16:52.650
story here related to von Neumann as
well. I don't know whether it was EDVAC or

00:16:52.650 --> 00:16:56.980
his version of EDVAC that he had in his 
basement (called Johnniac ?!). Apparently he

00:16:56.980 --> 00:17:03.550
really berated a grad student who wrote an assembler. 
[Invented quote] "Assemblers are for the weak-

00:17:03.550 --> 00:17:09.700
brained who cannot work out their own
addresses!  You do realize that in

00:17:09.700 --> 00:17:14.320
running this assembler of yours - punching
out a paper tape - I'm behind you in the

00:17:14.320 --> 00:17:18.940
queue. I don't get my turn next! You come
to me and say: 'Ah but this is ready to

00:17:18.940 --> 00:17:25.480
load now, in the second phase, as absolute binary'
You're wasting time! If you're so weak-brained

00:17:25.480 --> 00:17:28.930
you can't program in absolute ... [I'm
putting words in his mouth !! ]. But this was

00:17:28.930 --> 00:17:35.140
essentially it. He, no doubt, had dreams in
Absolute Binary. There was no problem

00:17:35.140 --> 00:17:40.210
with John von Neumann about coping as
close to binary as possible. He could

00:17:40.210 --> 00:17:43.870
keep it all in his head and he would, I
think have found Initial Orders on EDSAC

00:17:43.870 --> 00:17:50.740
about, yes, nice and helpful. Single pass
Not slowing down things a lot. But an assembler!

00:17:50.740 --> 00:17:56.980
You're wasting time on this machine! By doing
assemblers. I mean it really really

00:17:56.980 --> 00:18:02.320
brings it home to those of us who always
joked about, y'know: "Real Programmers

00:18:02.320 --> 00:18:07.630
use Assembler" The answer, certainly
from John von Neumann - possibly even from David

00:18:07.630 --> 00:18:10.480
Wheeler - but he wouldn't have been as
extreme as that - is: "Real Programmers use

00:18:10.480 --> 00:18:16.870
Absolute Binary!"

