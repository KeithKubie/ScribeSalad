WEBVTT
Kind: captions
Language: en

00:00:00.324 --> 00:00:02.490
Let me know if this has
ever happened to you-- where

00:00:02.490 --> 00:00:05.200
you have this brilliant idea of
an app that you want to build,

00:00:05.200 --> 00:00:08.325
and all you want to do is run
home and start working on it.

00:00:08.325 --> 00:00:10.200
As you start building
it, though, you quickly

00:00:10.200 --> 00:00:12.270
realize you need a
back end or a server

00:00:12.270 --> 00:00:15.070
in the cloud to really
demonstrate the full idea.

00:00:15.070 --> 00:00:17.510
And so you fire up a
browser and start searching.

00:00:17.510 --> 00:00:20.327
How do you build a back end
server for a mobile or web app?

00:00:20.327 --> 00:00:22.660
Well, it turns out you get
over a million search results

00:00:22.660 --> 00:00:25.030
with all sorts of articles
and discussion threads.

00:00:25.030 --> 00:00:27.030
And it can be
overwhelming to figure out

00:00:27.030 --> 00:00:29.930
how to integrate all of
these technologies together.

00:00:29.930 --> 00:00:31.980
But the good news is that
a lot of the complexity

00:00:31.980 --> 00:00:34.700
is handled for you with
Google Cloud Endpoints.

00:00:34.700 --> 00:00:36.260
It has a
straightforward workflow

00:00:36.260 --> 00:00:39.130
so you can build a shared back
end for your Android, iOS,

00:00:39.130 --> 00:00:40.830
and web clients.

00:00:40.830 --> 00:00:43.040
Previously, I was an engineer
on the Google Keep team

00:00:43.040 --> 00:00:44.665
and was exposed to
the issues that I'll

00:00:44.665 --> 00:00:47.000
be talking about today,
with building a new product

00:00:47.000 --> 00:00:49.532
with multiple clients
accessing a back end.

00:00:49.532 --> 00:00:51.740
And that's why I want to
help you get your service up

00:00:51.740 --> 00:00:54.070
and running as
quickly as possible.

00:00:54.070 --> 00:00:56.410
On the server, you
simply define your API

00:00:56.410 --> 00:00:58.990
and add Cloud
Endpoint annotations.

00:00:58.990 --> 00:01:01.210
There's an awesome tool
to automatically generate

00:01:01.210 --> 00:01:02.680
the client libraries
that you can

00:01:02.680 --> 00:01:05.230
drop into your respective apps.

00:01:05.230 --> 00:01:07.730
You implement the client
code to call your API

00:01:07.730 --> 00:01:10.660
and the server side logic with
what to do an API is called.

00:01:10.660 --> 00:01:12.490
And then everything
else in between

00:01:12.490 --> 00:01:15.330
is handled by Cloud Endpoints.

00:01:15.330 --> 00:01:18.259
Over time, your server
API will naturally evolve.

00:01:18.259 --> 00:01:20.050
And that's where Cloud
Endpoints can really

00:01:20.050 --> 00:01:22.770
help reduce those accidental
errors, because it

00:01:22.770 --> 00:01:25.550
automatically generates the
client libraries for you.

00:01:25.550 --> 00:01:28.450
When you're ready to release the
clients with your latest build,

00:01:28.450 --> 00:01:31.640
we'll help you handle
the upgrade smoothly.

00:01:31.640 --> 00:01:33.600
Now, this is made
possible by API burgeoning

00:01:33.600 --> 00:01:35.450
support in Cloud Endpoints.

00:01:35.450 --> 00:01:38.210
Different API versions
can actually coexist,

00:01:38.210 --> 00:01:42.250
and you can do a gradual stage
roll out of these new changes.

00:01:42.250 --> 00:01:45.810
In this example, new clients
can start to talk to the V2 API

00:01:45.810 --> 00:01:48.060
while your order
clients slowly move over

00:01:48.060 --> 00:01:52.209
until you deprecate
the old V1 API.

00:01:52.209 --> 00:01:54.500
I also want to note that the
back end server that we're

00:01:54.500 --> 00:01:56.950
talking about is actually
running on Google App

00:01:56.950 --> 00:02:00.710
Engine, which is part of the
broader Google Cloud Platform.

00:02:00.710 --> 00:02:03.810
Not only do you get a shared
back end for your Android iOS

00:02:03.810 --> 00:02:05.562
and web clients,
but you can also

00:02:05.562 --> 00:02:07.770
take advantage of all the
other products and services

00:02:07.770 --> 00:02:09.389
that are available.

00:02:09.389 --> 00:02:11.450
With App Engine
comes the ability

00:02:11.450 --> 00:02:13.400
to actually scale very easily.

00:02:13.400 --> 00:02:15.880
As you get more traffic,
Google automatically

00:02:15.880 --> 00:02:18.600
spins up more App Engine
instances for you.

00:02:18.600 --> 00:02:20.860
And then when the traffic
levels off after the peak,

00:02:20.860 --> 00:02:23.874
we kill off the instances
that you don't need any more.

00:02:23.874 --> 00:02:25.290
You don't need to
trouble yourself

00:02:25.290 --> 00:02:29.180
with estimating resources needs
ahead of time, so it's great.

00:02:29.180 --> 00:02:31.200
As an added bonus,
Cloud Endpoints

00:02:31.200 --> 00:02:34.820
comes with web management tools,
such as this API Explorer,

00:02:34.820 --> 00:02:38.180
which allows you to interact
with all of your API endpoints.

00:02:38.180 --> 00:02:40.020
As seen here, you
can create a request

00:02:40.020 --> 00:02:42.370
and then see what
the response is.

00:02:42.370 --> 00:02:43.940
If you want a
bird's eye overview

00:02:43.940 --> 00:02:47.430
of how healthy the service is
for the actual users out there,

00:02:47.430 --> 00:02:49.030
on the dashboard,
you can check graphs

00:02:49.030 --> 00:02:51.670
with QPS, latency,
and error rates.

00:02:51.670 --> 00:02:55.462
You also have access to the logs
if you want more detailed data.

00:02:55.462 --> 00:02:56.670
But enough about development.

00:02:56.670 --> 00:02:59.300
What type of impact can
Cloud Endpoints really

00:02:59.300 --> 00:03:01.070
have on your users?

00:03:01.070 --> 00:03:04.140
Well, users expect the
app to be blazing fast,

00:03:04.140 --> 00:03:07.050
without those loading
spinners that spin forever.

00:03:07.050 --> 00:03:09.700
It's not ideal if you have a
user halfway across the world

00:03:09.700 --> 00:03:11.610
and they're trying to
hit the server that's

00:03:11.610 --> 00:03:13.070
located in your basement.

00:03:13.070 --> 00:03:15.280
Instead, you can take
advantage of Google's

00:03:15.280 --> 00:03:16.480
global infrastructure.

00:03:16.480 --> 00:03:18.280
We have data centers
all over the world

00:03:18.280 --> 00:03:21.110
and we can route requests to
the appropriate data center

00:03:21.110 --> 00:03:22.910
quickly.

00:03:22.910 --> 00:03:25.430
Now, users also care about
minimizing network usage,

00:03:25.430 --> 00:03:27.350
which impacts
their bill, as well

00:03:27.350 --> 00:03:29.820
as they want to
minimize battery usage.

00:03:29.820 --> 00:03:31.590
Therefore, once we
serialize the data,

00:03:31.590 --> 00:03:35.680
we compress it for efficient
transfer across the network.

00:03:35.680 --> 00:03:37.760
Now, we know, also,
users want peace of mind

00:03:37.760 --> 00:03:39.970
that their data is being
kept and transferred

00:03:39.970 --> 00:03:41.670
as securely as possible.

00:03:41.670 --> 00:03:44.290
So all of our requests
are sent over HTTPS.

00:03:44.290 --> 00:03:46.890
And we also have OAuth
2.0 support built in

00:03:46.890 --> 00:03:48.860
to authenticate and
authorize the users

00:03:48.860 --> 00:03:51.960
to access the appropriate data.

00:03:51.960 --> 00:03:54.012
So as you can see,
Google Cloud Endpoints

00:03:54.012 --> 00:03:56.470
is a straightforward way for
you to build a shared back end

00:03:56.470 --> 00:04:00.014
for your Android,
iOS, and web clients.

00:04:00.014 --> 00:04:01.680
And if you have that
browser still open,

00:04:01.680 --> 00:04:04.360
you can search for Google
Cloud Endpoints now.

00:04:04.360 --> 00:04:06.550
Or you can use the links here.

00:04:06.550 --> 00:04:10.910
Next time you have that great
idea, now you know what to do.

