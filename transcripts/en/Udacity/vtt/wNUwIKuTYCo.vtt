WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
This one became quite famous.

00:00:03.000 --> 00:00:07.000
It's sometimes known as the Names and Boxes Problem.

00:00:07.000 --> 00:00:13.000
In this problem, there are 100 prisoners,

00:00:13.000 --> 00:00:17.000
and the warden comes and tells them that they will be given their freedom

00:00:17.000 --> 00:00:20.000
if they can win the following game:

00:00:20.000 --> 00:00:23.000
100 boxes are going to be put on the table.

00:00:23.000 --> 00:00:28.000
In each box will be put one of the prisoner's names on a piece of paper.

00:00:28.000 --> 00:00:32.000
They'll be lined up on a table in a room,

00:00:32.000 --> 00:00:35.000
and the prisoners will be brought into the room one-by-one,

00:00:35.000 --> 00:00:43.000
and each prisoner is permitted to look in 50 boxes, trying to find his own name.

00:00:43.000 --> 00:00:46.000
When he is done, he is escorted out of the room.

00:00:46.000 --> 00:00:49.000
He must leave the room exactly as he found it.

00:00:49.000 --> 00:00:52.000
He has no further communication with the other prisoners.

00:00:52.000 --> 00:01:01.000
In order to win the game, every prisoner must find his own name.

00:01:01.000 --> 00:01:06.000
Now, this sounds really completely hopeless.

00:01:06.000 --> 00:01:09.000
Just say again how many prisoners and how many boxes?

00:01:09.000 --> 00:01:11.000
There are 100 prisoners. &amp;gt;&amp;gt;100 prisoners.

00:01:11.000 --> 00:01:14.000
100 boxes. One name in each box. &amp;gt;&amp;gt;100 boxes.

00:01:14.000 --> 00:01:16.000
Oh, you can only look in 50 of the 100.

00:01:16.000 --> 00:01:18.000
But each prisoner can only look in 50.

00:01:18.000 --> 00:01:25.000
Any individual prisoner's probability of finding his own name is 50%--one-half.

00:01:25.000 --> 00:01:28.000
Nothing he can do about that.

00:01:28.000 --> 00:01:31.000
So, how do you do this? What's your algorithm?

00:01:31.000 --> 00:01:38.000
Well, one possibility is everybody looks in a random 50 boxes.

00:01:38.000 --> 00:01:46.000
That gives you a probability of winning the game of 2⁻¹⁰⁰. Not very good.

00:01:46.000 --> 00:01:51.000
Another algorithm is everybody looks in the same 50 boxes.

00:01:51.000 --> 00:01:54.000
That has a probability of success of 0.

00:01:54.000 --> 00:02:00.000
Right, which is essentially the same as the first one. &amp;gt;&amp;gt; Indistinguishable. All right.

00:02:00.000 --> 00:02:07.000
So, the story with this puzzle is that Peter Bro Miltersen

00:02:07.000 --> 00:02:13.000
and Anna Gal, a theoretical computer scientist that you may know,

00:02:13.000 --> 00:02:21.000
were working on a problem, and they needed to be able to show that in a certain version of this problem,

00:02:21.000 --> 00:02:27.000
that the prisoners had no algorithm which would give them any decent probability--

00:02:27.000 --> 00:02:30.000
one over a polynomial or anything like that--

00:02:30.000 --> 00:02:36.000
and they didn't see how to prove it,

00:02:36.000 --> 00:02:41.000
and one day Miltersen happened to be passing a problem onto a friend of his,

00:02:41.000 --> 00:02:44.000
Sven Skyum, over lunch,

00:02:44.000 --> 00:02:48.000
and Sven Skyum said, "Well, have you tried this?"

00:02:48.000 --> 00:02:55.000
And Miltersen told me he fell off his chair.

00:02:55.000 --> 00:03:00.000
It turns out that there is an algorithm which will guarantee the prisoners

00:03:00.000 --> 00:03:05.000
a better than 30% chance to win the game.

00:03:05.000 --> 00:03:10.000
Irrespective of what N is here, it works for 100 prisoners,

00:03:10.000 --> 00:03:18.000
but also for 1 million prisoners with probability of winning as better than 30%.

00:03:18.000 --> 00:03:24.000
Even after you see the solution, it's hard to believe that this really works.

00:03:24.000 --> 00:03:29.000
Remember, every individual prisoner has probability of only 50%.

00:03:29.000 --> 00:03:31.000
There's no communication.

00:03:31.000 --> 00:03:34.000
How could you possibly get enough correlation into this problem

00:03:34.000 --> 00:03:43.000
to have the probability of all of them finding their own names to be 30%? It's ridiculous.

00:03:43.000 --> 00:03:48.000
But here's the algorithm that's absolutely wonderful.

00:03:48.000 --> 00:03:58.000
The prisoners first assign ownership of the 100 boxes randomly.

00:03:58.000 --> 00:04:01.000
In other words, they choose a random permutation of the boxes

00:04:01.000 --> 00:04:05.000
and assign ownership of the boxes, and every prisoner gets to know

00:04:05.000 --> 00:04:11.000
all the ownerships, gets to memorize all the ownerships and everything.

00:04:11.000 --> 00:04:13.000
Of course, these ownerships may have nothing to do with the names

00:04:13.000 --> 00:04:18.000
that are inside the boxes, but that's okay.

00:04:18.000 --> 00:04:23.000
So, now prisoner A goes into the room,

00:04:23.000 --> 00:04:28.000
and he opens his box--he opens the box that's been assigned to prisoner A.

00:04:28.000 --> 00:04:31.000
He looks inside, and it's got some other prisoner's name in it,

00:04:31.000 --> 00:04:34.000
maybe prisoner G.

00:04:34.000 --> 00:04:38.000
Then he goes over and he looks like prisoner G's box,

00:04:38.000 --> 00:04:41.000
and maybe prisoner Q is there.

00:04:41.000 --> 00:04:44.000
Then he opens the box for prisoner Q.

00:04:44.000 --> 00:04:46.000
He opens it and finds prisoner C there, etc.

00:04:46.000 --> 00:04:54.000
He keeps doing this, and he's hoping that he'll find his own name.

00:04:54.000 --> 00:04:58.000
If he doesn't, too bad. Then he leaves the room.

00:04:58.000 --> 00:05:01.000
The next prisoner does exactly the same thing.

00:05:01.000 --> 00:05:06.000
Prisoner B goes in, and he opens the box for prisoner B,

00:05:06.000 --> 00:05:10.000
looks for at the name inside, opens that box, and hopes that eventually

00:05:10.000 --> 00:05:15.000
he'll get back to his name.

00:05:15.000 --> 00:05:21.000
That's the algorithm. Right? Why in the world should this work? Right?

00:05:21.000 --> 00:05:23.000
What's going on here?

00:05:23.000 --> 00:05:26.000
Why would this be better than just going through in their permutation order

00:05:26.000 --> 00:05:28.000
or something like that?

00:05:28.000 --> 00:05:32.000
It's not at first at all clear why this would work.

00:05:32.000 --> 00:05:36.000
In fact, the only way I know people come up with this algorithm

00:05:36.000 --> 00:05:40.000
is they're looking for something for prisoners to do.

00:05:40.000 --> 00:05:48.000
The problem is once you think of this algorithm to now dismiss it

00:05:48.000 --> 00:05:51.000
but instead to think about what would make it work.

00:05:51.000 --> 00:05:59.000
What's going on here is that this random permutation combined with the permutation

00:05:59.000 --> 00:06:03.000
of the prisoner's names in the boxes

00:06:03.000 --> 00:06:05.000
gives you a permutation of the prisoners,

00:06:05.000 --> 00:06:09.000
which is a uniformly random permutation.

00:06:09.000 --> 00:06:12.000
But the permutation is defined in the following way.

00:06:12.000 --> 00:06:18.000
You take a prisoner, you look inside his box, you see whose name is there.

00:06:18.000 --> 00:06:21.000
That defines the permutation.

00:06:21.000 --> 00:06:26.000
I said that prisoner A's box contained the name of prisoner G.

00:06:26.000 --> 00:06:32.000
That means that in the permutation, A goes to G.

00:06:32.000 --> 00:06:39.000
So, what's going to happen is that prisoner A will find his own name

00:06:39.000 --> 00:06:45.000
if in this permutation the cycle that his name is in, the cycle that A is in

00:06:45.000 --> 00:06:49.000
has length at most 50.

00:06:49.000 --> 00:06:53.000
If that cycle has length less than 50--length of 50 or less--

00:06:53.000 --> 00:06:58.000
he comes back and find his own name. Otherwise, he doesn't.

00:06:58.000 --> 00:07:00.000
So, what does that mean?

00:07:00.000 --> 00:07:04.000
Well, that means that the prisoners will actually win this game

00:07:04.000 --> 00:07:08.000
if there are no long cycles.

00:07:08.000 --> 00:07:12.000
Because then everybody will start in their own cycle come back around,

00:07:12.000 --> 00:07:15.000
and find their own name.

00:07:15.000 --> 00:07:20.000
Now, it turns out that it's actually very easy

00:07:20.000 --> 00:07:24.000
to compute the probability that a permutation contains a long cycle.

00:07:24.000 --> 00:07:26.000
Wait. Hang on one second.

00:07:26.000 --> 00:07:30.000
Not only short, but it has to be short and contain that prisoner's information,

00:07:30.000 --> 00:07:33.000
that prisoner's name. Right?

00:07:33.000 --> 00:07:42.000
Well, we know it contains that prisoner's name, because he starts at the box that he owns.

00:07:42.000 --> 00:07:47.000
For example, suppose the cycle is A, G, C, A.

00:07:47.000 --> 00:07:51.000
Oh, the only way to get back to it is if you found the name. &amp;gt;&amp;gt;That's right.

00:07:51.000 --> 00:07:57.000
Ah. Okay. All right. So, now your next step was you can find the probability

00:07:57.000 --> 00:07:59.000
that there is a long cycle.

00:07:59.000 --> 00:08:02.000
It's to compute the probability that a random permutation contains a long cycle.

00:08:02.000 --> 00:08:06.000
Well, it's actually quite easy to show.

00:08:06.000 --> 00:08:11.000
It's just a little--just write down the binomial coefficients--

00:08:11.000 --> 00:08:16.000
that the probability that the permutation contains a cycle of length k

00:08:16.000 --> 00:08:27.000
where k is bigger than n/2 is exactly 1/k.

00:08:27.000 --> 00:08:34.000
So, the probability that our permutation contains a cycle of length greater than 50

00:08:34.000 --> 00:08:44.000
is 1/51 + 1/52 + 1/53 + … + 1/100,

00:08:44.000 --> 00:08:54.000
which is about n log 2--0.69 something.

00:08:54.000 --> 00:09:01.000
So, the probability of the prisoners winning is about 0.31.

00:09:01.000 --> 00:09:06.000
You know, you could sit and stare at this thing

00:09:06.000 --> 00:09:11.000
and still not really understand why it works so well. &amp;gt;&amp;gt;Crazy.

00:09:11.000 --> 00:09:16.000
So it's go harmonic numbers in it and logarithms

00:09:16.000 --> 00:09:19.000
and a kind of simple tail-chasing kind of algorithm.

00:09:19.000 --> 00:09:25.000
That's right. It's just nice reasoning, right? Nice, undergraduate reasoning.

