WEBVTT
Kind: captions
Language: en

00:00:00.208 --> 00:00:01.750
FERGUS HURLEY: Hi,
I'm Fergus Hurley,

00:00:01.750 --> 00:00:03.480
a product manager at Google.

00:00:03.480 --> 00:00:06.270
I'm going to show you how to
use Android vitals to keep

00:00:06.270 --> 00:00:08.640
an eye on your app's
engineering performance metrics

00:00:08.640 --> 00:00:13.290
so you can fix any problems
that may affect your users.

00:00:13.290 --> 00:00:15.860
Why is it important to track
your engineering metrics?

00:00:15.860 --> 00:00:19.070
Because when your app
performs badly, users notice.

00:00:19.070 --> 00:00:22.760
In fact, almost half of one-star
reviews on the Play Store

00:00:22.760 --> 00:00:25.550
mention performance
issues, like app stability.

00:00:25.550 --> 00:00:28.340
On the other hand, when
things are running smoothly,

00:00:28.340 --> 00:00:30.926
users are happy.

00:00:30.926 --> 00:00:32.509
Android vitals tracks
the metrics that

00:00:32.509 --> 00:00:34.310
matter most to your users--

00:00:34.310 --> 00:00:37.550
battery use, stability,
rendering, startup time,

00:00:37.550 --> 00:00:39.750
and permission requests.

00:00:39.750 --> 00:00:41.940
Let's start with battery
use, because it's probably

00:00:41.940 --> 00:00:43.870
the most important of all.

00:00:43.870 --> 00:00:46.840
Nobody wants to use an app
that drains their battery.

00:00:46.840 --> 00:00:49.860
So Android vitals reports on
the four most significant causes

00:00:49.860 --> 00:00:51.170
of battery drain--

00:00:51.170 --> 00:00:54.930
wake locks, wakeups,
background Wi-Fi scans,

00:00:54.930 --> 00:00:58.190
and background network use.

00:00:58.190 --> 00:00:59.660
Background partial
wake locks are

00:00:59.660 --> 00:01:02.690
when your app keeps the CPU
running after the device's

00:01:02.690 --> 00:01:04.260
display turns off.

00:01:04.260 --> 00:01:06.990
It can become stuck, if
it's held for a long time

00:01:06.990 --> 00:01:09.310
while your app runs
in the background.

00:01:09.310 --> 00:01:11.000
This can drain the
user's battery.

00:01:11.000 --> 00:01:13.540
So you should use them
sparingly and release them

00:01:13.540 --> 00:01:15.680
as soon as possible.

00:01:15.680 --> 00:01:18.940
The second cause of battery
drain is excessive wakeups.

00:01:18.940 --> 00:01:20.740
These let your app
wake up a device

00:01:20.740 --> 00:01:23.380
at a certain time, bringing
it out of low-power mode,

00:01:23.380 --> 00:01:26.710
and holding a partial wake
lock, while the alarm executes.

00:01:26.710 --> 00:01:30.010
Again, these can drain
your user's battery.

00:01:30.010 --> 00:01:33.690
And you want to use them
as little as possible.

00:01:33.690 --> 00:01:35.720
The last two battery-related
metrics we track

00:01:35.720 --> 00:01:39.710
are excessive background
Wi-Fi scans and network use.

00:01:39.710 --> 00:01:42.230
In both cases, your app
connects to the internet

00:01:42.230 --> 00:01:45.190
in the background,
waking up the CPU

00:01:45.190 --> 00:01:49.760
and turning on the radio, which
is draining the user's battery.

00:01:49.760 --> 00:01:51.770
If your app doesn't use
any of these features,

00:01:51.770 --> 00:01:55.440
then you will not see
metrics in vitals for them.

00:01:55.440 --> 00:01:58.830
Also, if your app does not have
enough users above the privacy

00:01:58.830 --> 00:02:02.985
threshold, then you will
not see any data either.

00:02:02.985 --> 00:02:04.610
So now that we've
covered battery life,

00:02:04.610 --> 00:02:07.700
the next most important area
of Android vitals to focus on

00:02:07.700 --> 00:02:09.380
is app stability.

00:02:09.380 --> 00:02:14.650
We track two stability metrics,
ANR events and crashes.

00:02:14.650 --> 00:02:17.100
Application Not
Responding, or ANR events,

00:02:17.100 --> 00:02:20.140
are when your app stops
responding to user input.

00:02:20.140 --> 00:02:22.270
This happens when the
UI thread of the app

00:02:22.270 --> 00:02:24.940
is blocked for too
long, so the user's app

00:02:24.940 --> 00:02:27.410
appears to freeze on them.

00:02:27.410 --> 00:02:31.070
Crashes occur when an unhandled
exception or signal causes

00:02:31.070 --> 00:02:34.210
your app to exit unexpectedly.

00:02:34.210 --> 00:02:37.150
Of course, you'll want to keep
both of these to a minimum.

00:02:37.150 --> 00:02:38.620
Your Android vitals
dashboard also

00:02:38.620 --> 00:02:40.330
displays your app's
rendering metrics.

00:02:40.330 --> 00:02:42.720
Users want a fast,
responsive application

00:02:42.720 --> 00:02:45.460
that runs smoothly and
doesn't lag or stall.

00:02:45.460 --> 00:02:48.250
So we track any instances
of slow rendering

00:02:48.250 --> 00:02:50.080
or frozen frames.

00:02:50.080 --> 00:02:52.840
Slow rendering is when your
app can't render frames

00:02:52.840 --> 00:02:55.300
in under 16 milliseconds.

00:02:55.300 --> 00:02:57.580
When this happens, your
app appears to stutter.

00:02:57.580 --> 00:03:00.340
We call it jank.

00:03:00.340 --> 00:03:02.680
Frozen frames occur
when UI frames

00:03:02.680 --> 00:03:05.560
take longer than 700
milliseconds to render.

00:03:05.560 --> 00:03:08.620
This makes your app appear stuck
and unresponsive to user input

00:03:08.620 --> 00:03:11.820
for almost a second.

00:03:11.820 --> 00:03:14.645
Users also expect your
app to launch quickly.

00:03:14.645 --> 00:03:16.020
On your Android
vitals dashboard,

00:03:16.020 --> 00:03:18.600
you can easily identify when
your app is loading slowly

00:03:18.600 --> 00:03:21.750
with different metrics for
cold starts, warm starts,

00:03:21.750 --> 00:03:23.420
and hot starts.

00:03:23.420 --> 00:03:25.200
A cold start is
when your app hasn't

00:03:25.200 --> 00:03:28.350
been launched for a while and
isn't in the device's memory.

00:03:28.350 --> 00:03:31.410
This means the device needs to
create and start all your apps

00:03:31.410 --> 00:03:33.600
resources to get it running.

00:03:33.600 --> 00:03:39.020
In this case, a slow start
would mean 5 seconds or more.

00:03:39.020 --> 00:03:41.600
A warm start is when
your app is in memory

00:03:41.600 --> 00:03:43.280
and simply needs
to go from activity

00:03:43.280 --> 00:03:45.050
launched to activity running.

00:03:45.050 --> 00:03:49.670
In this case, a slow start
would be 2 seconds or more.

00:03:49.670 --> 00:03:52.880
Finally, a hot start is when
your app and its activity

00:03:52.880 --> 00:03:55.710
are in memory and your
app goes from on restart

00:03:55.710 --> 00:03:58.030
to activity running.

00:03:58.030 --> 00:04:00.670
From a hot start, your
app shouldn't take longer

00:04:00.670 --> 00:04:02.290
than 1.5 seconds to load.

00:04:05.580 --> 00:04:07.840
The last metric
in your dashboard

00:04:07.840 --> 00:04:09.600
is all about permissions.

00:04:09.600 --> 00:04:11.400
Here, you'll see the
percentage of people

00:04:11.400 --> 00:04:14.860
who are denied a permission
request made by your app.

00:04:14.860 --> 00:04:16.630
If the level is
high, you may need

00:04:16.630 --> 00:04:18.870
to explain the reason
for your request

00:04:18.870 --> 00:04:23.180
or rethink whether you actually
need that permission at all.

00:04:23.180 --> 00:04:26.030
So how do know if
your metrics are good?

00:04:26.030 --> 00:04:28.700
On the dashboard, you'll see
benchmarks for each vital

00:04:28.700 --> 00:04:31.820
to help you understand how
your app or game is performing

00:04:31.820 --> 00:04:34.410
and which issues, if
any, to prioritize.

00:04:34.410 --> 00:04:37.310
For example, people expect
board games to load faster

00:04:37.310 --> 00:04:38.670
than racing games.

00:04:38.670 --> 00:04:43.210
So your metrics will only be
measured against similar apps.

00:04:43.210 --> 00:04:45.650
Not sure what to focus on first?

00:04:45.650 --> 00:04:48.710
Well, all your metrics
are important to monitor.

00:04:48.710 --> 00:04:51.230
We've highlighted the
four most important ones

00:04:51.230 --> 00:04:53.310
on your Android
vitals dashboard--

00:04:53.310 --> 00:04:57.170
ANR rate, crash rate, stock
wake locks in the background,

00:04:57.170 --> 00:04:58.640
and excessive wakeups.

00:04:58.640 --> 00:05:01.640
We call these the core vitals.

00:05:01.640 --> 00:05:04.080
Hopefully, your apps
metrics all look good.

00:05:04.080 --> 00:05:05.510
But if something
should go wrong,

00:05:05.510 --> 00:05:09.120
it's important to fix the
problem as quickly as possible.

00:05:09.120 --> 00:05:12.470
That's why Android vitals also
provides anomaly detection.

00:05:12.470 --> 00:05:14.240
Just click on the
dashboard alert

00:05:14.240 --> 00:05:15.920
to learn more about the problem.

00:05:15.920 --> 00:05:20.220
Or you can sign up for
Anomaly Alerts emails.

00:05:20.220 --> 00:05:22.260
Addressing these issues
as quickly as possible

00:05:22.260 --> 00:05:24.480
not only keeps your
users happy, it also

00:05:24.480 --> 00:05:27.240
helps improve your app's
profile in the Play Store,

00:05:27.240 --> 00:05:31.320
such as it's discoverability
in the search results.

00:05:31.320 --> 00:05:33.060
Android vitals
gives you the tools

00:05:33.060 --> 00:05:34.980
to monitor your
app's performance

00:05:34.980 --> 00:05:36.990
and keep it running smoothly.

00:05:36.990 --> 00:05:39.750
For more advice on how
to address app issues,

00:05:39.750 --> 00:05:42.840
check out our videos on
stability and battery life.

00:05:42.840 --> 00:05:45.580
You'll find the links in
the video description.

00:05:45.580 --> 00:05:48.130
To learn more about Android
vitals and the rest of the Play

00:05:48.130 --> 00:05:51.920
Console or for tips on how to
grow your app or game business,

00:05:51.920 --> 00:05:54.400
check out the Playbook
app on Google Play.

00:05:54.400 --> 00:05:56.190
Thanks for watching.

