WEBVTT
Kind: captions
Language: en

00:00:02.169 --> 00:00:04.130
As developers strive
to remove memory leaks

00:00:04.130 --> 00:00:05.310
from their
application, they tend

00:00:05.310 --> 00:00:06.890
to focus the majority
of their energy

00:00:06.890 --> 00:00:08.730
on the most impactful issues.

00:00:08.730 --> 00:00:11.339
However, one of the biggest,
most frightening leaks

00:00:11.339 --> 00:00:13.360
are often hanging around
in their code base

00:00:13.360 --> 00:00:14.254
going unnoticed.

00:00:14.254 --> 00:00:16.500
My name is Colt McAnlis,
and one of the worst things

00:00:16.500 --> 00:00:18.690
that can get leaked in
your Android application

00:00:18.690 --> 00:00:20.340
is a view object.

00:00:20.340 --> 00:00:22.500
For the most part, views
are simple little gizmos

00:00:22.500 --> 00:00:24.771
that help us update the screen
and display information.

00:00:24.771 --> 00:00:27.480
We generally don't think of
them as potential memory hogs.

00:00:27.480 --> 00:00:29.300
Which, I mean, is kind of true.

00:00:29.300 --> 00:00:31.660
By themselves, views aren't
much of a leak problem.

00:00:31.660 --> 00:00:33.190
Rather, it's what they reference

00:00:33.190 --> 00:00:35.530
that can cause
a horrible leak situation.

00:00:35.530 --> 00:00:38.010
Remember that the garbage
collector system in Android

00:00:38.010 --> 00:00:40.550
can only reclaim objects
there are no longer referenced

00:00:40.550 --> 00:00:42.420
by anything else
inside of memory.

00:00:42.420 --> 00:00:45.150
A leak is an object that
is no longer needed,

00:00:45.150 --> 00:00:47.780
but there's still a reference
to it somewhere in the system.

00:00:47.780 --> 00:00:50.080
This problem can
cascade when that object

00:00:50.080 --> 00:00:52.370
references other
objects, and those objects

00:00:52.370 --> 00:00:54.112
reference other objects.

00:00:54.112 --> 00:00:56.570
None of them in the entire
chain can be removed from memory

00:00:56.570 --> 00:00:59.430
because of the existing
references from that root leak.

00:00:59.430 --> 00:01:00.790
So here's the problem.

00:01:00.790 --> 00:01:03.650
Views contain a reference
back to the activity

00:01:03.650 --> 00:01:04.410
that created them.

00:01:04.410 --> 00:01:06.550
And activities, in
turn, tend to reference

00:01:06.550 --> 00:01:08.860
lots of internal objects
and other memory items.

00:01:08.860 --> 00:01:11.530
This is why a leaked view
object is such a big issue.

00:01:11.530 --> 00:01:13.750
When a view leaks, so
does the activity it

00:01:13.750 --> 00:01:15.690
references and all of
the other data involved.

00:01:15.690 --> 00:01:17.760
Basically, the entire
activity sits around

00:01:17.760 --> 00:01:19.890
in memory, which can
be an extreme problem

00:01:19.890 --> 00:01:21.300
in certain situations.

00:01:21.300 --> 00:01:24.050
For example, when the
user rotates their device,

00:01:24.050 --> 00:01:25.880
a configuration change
will be triggered,

00:01:25.880 --> 00:01:28.090
causing the current
activity to be destroyed

00:01:28.090 --> 00:01:30.770
and a new instance of it
to be loaded into memory.

00:01:30.770 --> 00:01:33.110
But if a view from that
first activity was leaked,

00:01:33.110 --> 00:01:35.790
then the original activity
can't be cleaned up now.

00:01:35.790 --> 00:01:37.690
And so it'll just
basically sit around

00:01:37.690 --> 00:01:40.750
hogging memory that should
be given to the new activity instead.

00:01:40.770 --> 00:01:44.170
Now, imagine if this happens and
the user rotates their screen back again.

00:01:44.180 --> 00:01:46.690
Suddenly, you've now got
three separate instances

00:01:46.690 --> 00:01:50.010
of an activity in memory
all fighting for space.

00:01:50.010 --> 00:01:52.240
So avoiding leaking
view objects should

00:01:52.240 --> 00:01:56.000
be the top priority for your
memory management policy.

00:01:56.000 --> 00:01:58.050
To that end, here are
some simple patterns

00:01:58.050 --> 00:01:59.530
that you should watch out for.

00:01:59.530 --> 00:02:02.090
Number one, don't
reference views inside

00:02:02.090 --> 00:02:03.530
of async callbacks.

00:02:03.530 --> 00:02:06.360
That async event may execute
at some point in the future

00:02:06.360 --> 00:02:08.030
where things aren't ideal.

00:02:08.030 --> 00:02:10.189
I mean, in one situation
the activity may

00:02:10.189 --> 00:02:12.460
have been killed before
the callback is triggered.

00:02:12.460 --> 00:02:14.220
But the view in the
activity, as such,

00:02:14.220 --> 00:02:17.010
will be kept around until
the async function completes

00:02:17.010 --> 00:02:19.200
and releases its
reference to the view.

00:02:19.200 --> 00:02:21.330
And in a worse
situation, your callback

00:02:21.330 --> 00:02:23.840
may be executed after the
view object has actually

00:02:23.840 --> 00:02:27.130
legitimately been destroyed,
thus dereferencing an invalid

00:02:27.130 --> 00:02:29.520
object and causing your
application to crash.

00:02:29.520 --> 00:02:31.610
Really not that important
for performance,

00:02:31.610 --> 00:02:33.790
but you know the whole
crashy crashy thing

00:02:33.790 --> 00:02:35.810
tends to shine bad on users.

00:02:35.810 --> 00:02:38.080
Anyhow, number two,
don't reference views

00:02:38.080 --> 00:02:39.759
from static objects.

00:02:39.759 --> 00:02:41.470
The issue here is
that static objects

00:02:41.470 --> 00:02:44.900
persist for the lifetime of
the entire process that's

00:02:44.900 --> 00:02:47.210
running your app,
which by the way,

00:02:47.210 --> 00:02:49.700
is not the same as the
lifetime of the activity that

00:02:49.700 --> 00:02:51.890
declares the static object.

00:02:51.890 --> 00:02:55.510
As such, having a static
object referenced to a view

00:02:55.510 --> 00:02:57.790
can cause issues when the
activity is destroyed,

00:02:57.790 --> 00:02:59.600
say, during a
configuration change,

00:02:59.600 --> 00:03:01.270
because the view
is still referenced

00:03:01.270 --> 00:03:02.590
by the static object.

00:03:02.590 --> 00:03:05.060
And the static object
then, of course, references

00:03:05.060 --> 00:03:06.220
the activity, as well.

00:03:06.220 --> 00:03:08.140
Neither the view or
activity will ever

00:03:08.140 --> 00:03:10.680
get cleaned up because of
the lifetime of that object.

00:03:10.680 --> 00:03:12.950
And number three,
avoid putting views

00:03:12.950 --> 00:03:17.000
in collections that don't
have clear memory patterns.

00:03:17.000 --> 00:03:19.650
For example, using
a weak hashmap object

00:03:19.650 --> 00:03:21.850
to store views as values.

00:03:21.850 --> 00:03:25.610
Since weak hashmaps store
views as hard references,

00:03:25.610 --> 00:03:27.430
you can end up in
a bad spot anytime

00:03:27.430 --> 00:03:29.140
something destroys those views.

00:03:29.140 --> 00:03:31.500
This type of weak
hashmap behavior

00:03:31.500 --> 00:03:34.800
has led it to be nicknamed
the leak hashmap.

00:03:35.520 --> 00:03:38.620
Leak, because it's
the weak hash--

00:03:40.095 --> 00:03:42.770
Now, if you're ever wondering
where your memory is going,

00:03:42.770 --> 00:03:45.380
make sure to check out the
Allocation Tracker tool

00:03:45.380 --> 00:03:46.860
inside of Android Studio.

00:03:46.860 --> 00:03:49.070
If you see content
from an activity that's

00:03:49.070 --> 00:03:50.800
not supposed to
exist, you might need

00:03:50.800 --> 00:03:52.850
to take a hard
look at your code.

00:03:52.850 --> 00:03:54.640
And taking hard
looks at your code

00:03:54.640 --> 00:03:56.556
is what Android
Performance is all about.

00:03:56.556 --> 00:03:58.920
Which is why you should check
out the rest of the Android

00:03:58.940 --> 00:04:01.990
Performance Patterns videos, and
check out the Google+ community

00:04:01.990 --> 00:04:03.670
for other great tips.

00:04:03.670 --> 00:04:06.099
So keep calm, profile your
code, and always remember

00:04:06.099 --> 00:04:07.280
perf matters.

