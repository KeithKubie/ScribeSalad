WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.920
[UPBEAT MUSIC PLAYING]

00:00:09.777 --> 00:00:11.110
REBECCA FRANKS: Hello, everyone.

00:00:11.110 --> 00:00:13.080
My name is Rebecca
Franks, and today I'm

00:00:13.080 --> 00:00:16.050
going to be speaking to
you about Android Things

00:00:16.050 --> 00:00:20.870
and why I think it is the
IoT platform for everyone.

00:00:20.870 --> 00:00:22.850
So what is Android Things?

00:00:22.850 --> 00:00:26.330
Android Things is an extension
of the Android platform

00:00:26.330 --> 00:00:29.450
for IoT and embedded devices.

00:00:29.450 --> 00:00:32.630
We've come to know Android
on our phones for many years,

00:00:32.630 --> 00:00:34.730
but Android has also
been available for us

00:00:34.730 --> 00:00:38.630
on our watches, on our
TVs with Android TV,

00:00:38.630 --> 00:00:42.440
and also in our cars
with Android Auto.

00:00:42.440 --> 00:00:46.880
Now, with Android Things, you
can have Android on any device

00:00:46.880 --> 00:00:49.810
that you can imagine.

00:00:49.810 --> 00:00:54.000
So Android Things is ideal for
powerful, intelligent devices

00:00:54.000 --> 00:00:56.100
that need to be secure.

00:00:56.100 --> 00:00:59.660
Some examples of where Android
Things would really work well

00:00:59.660 --> 00:01:04.349
is in the retail industry, for
things such as interactive ads

00:01:04.349 --> 00:01:09.370
or vending machines powered by
Android, Also in the business

00:01:09.370 --> 00:01:12.610
industry, with things such
as cameras, smart access

00:01:12.610 --> 00:01:16.480
meters, anything of that sort.

00:01:16.480 --> 00:01:18.020
In the logistics
industry, you could

00:01:18.020 --> 00:01:21.620
think of using Android Things
in some form of application

00:01:21.620 --> 00:01:25.580
of asset tracking or
predictive service.

00:01:25.580 --> 00:01:29.870
But Android Things is also very
suitable for home automation.

00:01:29.870 --> 00:01:34.160
So a smart doorbell or an
energy monitoring system

00:01:34.160 --> 00:01:37.850
would also do well
with Android Things.

00:01:37.850 --> 00:01:40.520
So a question that you're
probably wondering is,

00:01:40.520 --> 00:01:44.990
how similar is Android
development to Android Things?

00:01:44.990 --> 00:01:48.530
And the answer is it's
very, very similar.

00:01:48.530 --> 00:01:51.200
So when you're developing
for Android Things,

00:01:51.200 --> 00:01:53.600
you're using the Android SDK.

00:01:53.600 --> 00:01:55.820
So all the APIs and all
the different things

00:01:55.820 --> 00:01:57.920
you've learned as
an Android developer

00:01:57.920 --> 00:02:01.730
are similar for you to
do with Android Things.

00:02:01.730 --> 00:02:03.860
You're also using
Android Studio.

00:02:03.860 --> 00:02:05.840
So you're just
building an Android app

00:02:05.840 --> 00:02:10.470
and using it and putting it
on your Android Things device.

00:02:10.470 --> 00:02:11.980
You can also use
the Play Services.

00:02:11.980 --> 00:02:15.920
So something like the Nearby
API or the Vision API,

00:02:15.920 --> 00:02:19.080
you can use on Android Things.

00:02:19.080 --> 00:02:20.830
And because it's
just Android as well,

00:02:20.830 --> 00:02:24.120
you can use the Firebase
SDKs and leverage

00:02:24.120 --> 00:02:29.720
the real-time database or most
of the other Firebase options.

00:02:29.720 --> 00:02:31.430
You can also use
the cloud platforms.

00:02:31.430 --> 00:02:34.430
So things such as the
Google Cloud IoT Core,

00:02:34.430 --> 00:02:36.770
or any of the Pub/Sub,
stuff like that, you

00:02:36.770 --> 00:02:40.100
can use with Android Things.

00:02:40.100 --> 00:02:42.740
And the best part is, because
it's just an Android app

00:02:42.740 --> 00:02:46.400
that you're building, you can
use any other Android library

00:02:46.400 --> 00:02:48.080
that you've been used to.

00:02:48.080 --> 00:02:50.690
So if you like developing
your apps in Kotlin,

00:02:50.690 --> 00:02:53.000
or you're a big
fan of RxJava, you

00:02:53.000 --> 00:02:57.120
can do that with
Android Things as well.

00:02:57.120 --> 00:02:59.540
So now we've seen how
similar Android Things

00:02:59.540 --> 00:03:01.340
is to Android development.

00:03:01.340 --> 00:03:02.960
But there's a couple
of differences

00:03:02.960 --> 00:03:04.550
that you have to
keep in mind when

00:03:04.550 --> 00:03:07.270
developing for Android Things.

00:03:07.270 --> 00:03:08.770
So the first big
one is that there's

00:03:08.770 --> 00:03:11.770
no Play Store that you're
shipping your apps onto.

00:03:11.770 --> 00:03:14.380
So your app is the only one
that runs on the device.

00:03:14.380 --> 00:03:16.680
And there's no such
thing as a Play Store

00:03:16.680 --> 00:03:20.760
where users can go and
install other apps from.

00:03:20.760 --> 00:03:24.000
There's also a subset of APIs
that are available for you.

00:03:24.000 --> 00:03:26.630
So things such as
your notifications

00:03:26.630 --> 00:03:29.090
aren't available anymore,
because displays are

00:03:29.090 --> 00:03:32.680
optional with Android Things.

00:03:32.680 --> 00:03:35.290
Also, when you're developing
for Android Things,

00:03:35.290 --> 00:03:36.721
you're using custom hardware.

00:03:36.721 --> 00:03:38.470
So this is probably
the biggest difference

00:03:38.470 --> 00:03:41.800
when you're developing for
Android versus Android Things.

00:03:41.800 --> 00:03:44.050
So the custom hardware
that you build

00:03:44.050 --> 00:03:46.430
is what you ship
to your clients.

00:03:46.430 --> 00:03:48.970
So we're used to
shipping our apps,

00:03:48.970 --> 00:03:52.510
building on the Play Store,
and having people download it

00:03:52.510 --> 00:03:54.850
from the App Store, but
this is people building

00:03:54.850 --> 00:03:57.070
their own hardware,
shipping the hardware

00:03:57.070 --> 00:04:00.130
and the software together.

00:04:00.130 --> 00:04:01.330
So it's also useful.

00:04:01.330 --> 00:04:04.540
And it's used as a
single-purpose device.

00:04:04.540 --> 00:04:08.500
And what I mean by that is that
your app and your stuff that

00:04:08.500 --> 00:04:11.770
runs on this device is the
only thing that will be there.

00:04:11.770 --> 00:04:12.650
There's nothing else.

00:04:12.650 --> 00:04:17.579
So the users aren't installing
anything else on the device.

00:04:17.579 --> 00:04:19.579
And then, because
there's no Play Store,

00:04:19.579 --> 00:04:21.810
you're deploying
OTAs to your clients,

00:04:21.810 --> 00:04:23.820
and not app updates
like you're used to.

00:04:27.080 --> 00:04:30.590
So this is the typical software
stack of a traditional Android

00:04:30.590 --> 00:04:32.120
mobile device.

00:04:32.120 --> 00:04:34.040
Kernels and libraries
are primarily

00:04:34.040 --> 00:04:37.910
focused on enabling
hardware driver support.

00:04:37.910 --> 00:04:40.640
Application frameworks
provide a rich set of APIs

00:04:40.640 --> 00:04:43.180
for our apps to use.

00:04:43.180 --> 00:04:46.910
And applications provide
user-facing use for general use

00:04:46.910 --> 00:04:49.400
cases, such as our
launchers, our phones,

00:04:49.400 --> 00:04:51.860
and our messaging apps.

00:04:51.860 --> 00:04:53.960
Now, with Android Things,
we remove a couple

00:04:53.960 --> 00:04:56.606
of these different APIs
and applications that

00:04:56.606 --> 00:04:58.730
have been typically available
for you as an Android

00:04:58.730 --> 00:04:59.990
developer.

00:04:59.990 --> 00:05:03.060
So the default user-facing
apps have been removed.

00:05:03.060 --> 00:05:05.510
So you no longer have
the launcher or the phone

00:05:05.510 --> 00:05:09.810
or messaging capabilities
on Android Things.

00:05:09.810 --> 00:05:13.150
Optional displays also mean that
some APIs have some modified

00:05:13.150 --> 00:05:14.340
behavior.

00:05:14.340 --> 00:05:17.190
So things such as your
notifications or your System UI

00:05:17.190 --> 00:05:20.830
have been removed
with Android Things.

00:05:20.830 --> 00:05:23.140
Now when you're developing
for Android Things,

00:05:23.140 --> 00:05:24.940
you get the Android
Things Support Library

00:05:24.940 --> 00:05:26.750
as part of your developments.

00:05:26.750 --> 00:05:29.100
So some things, such
as the peripheral I/O

00:05:29.100 --> 00:05:31.550
and Device Management, come
bundled with Android Things

00:05:31.550 --> 00:05:32.760
SDK.

00:05:32.760 --> 00:05:36.930
We'll go into a little bit
more detail around those later.

00:05:36.930 --> 00:05:40.590
So Android Things uses a
system-on-module architecture,

00:05:40.590 --> 00:05:42.840
or a SOM architecture.

00:05:42.840 --> 00:05:46.110
So the system is designed around
a core computing module that

00:05:46.110 --> 00:05:49.680
is located on a bigger breakout
board during prototyping

00:05:49.680 --> 00:05:51.270
and development.

00:05:51.270 --> 00:05:53.130
And then when you
move into production,

00:05:53.130 --> 00:05:55.200
this smaller
system-on-module chip

00:05:55.200 --> 00:05:57.630
is used and bolts on a
custom breakout board

00:05:57.630 --> 00:06:00.240
that you would ship
to your clients.

00:06:00.240 --> 00:06:02.610
This reduces costs
and simplifies

00:06:02.610 --> 00:06:05.400
hardware development because
of the complex hardware design

00:06:05.400 --> 00:06:09.060
that is encapsulated
within the SOM.

00:06:09.060 --> 00:06:11.530
The Google-managed
Board Support Package

00:06:11.530 --> 00:06:15.000
create a stable software layer
for developers to rely on.

00:06:15.000 --> 00:06:17.970
So this means if your
hardware design should change,

00:06:17.970 --> 00:06:21.210
you don't need to worry as
much because the Board Support

00:06:21.210 --> 00:06:23.920
Package will support it.

00:06:23.920 --> 00:06:26.890
So SOM-based designs make
production certification

00:06:26.890 --> 00:06:29.040
testing a lot easier to do.

00:06:29.040 --> 00:06:31.240
So all electronics
in the market must

00:06:31.240 --> 00:06:33.400
undergo some kind
of certification

00:06:33.400 --> 00:06:36.520
before you ship them
to your clients.

00:06:36.520 --> 00:06:39.100
And this process can
be very, very costly.

00:06:39.100 --> 00:06:42.120
And when you are using the
SOM architecture design,

00:06:42.120 --> 00:06:44.160
it simplifies this cost.

00:06:44.160 --> 00:06:48.720
And Google handles all
the complexity for you.

00:06:48.720 --> 00:06:50.750
So when you are developing
with Android Things,

00:06:50.750 --> 00:06:53.630
there's a couple of things
that are managed by Google

00:06:53.630 --> 00:06:57.050
and things that
are managed by you.

00:06:57.050 --> 00:06:59.390
Google manages the Android
framework, the hardware

00:06:59.390 --> 00:07:01.110
libraries, and the Linux kernel.

00:07:01.110 --> 00:07:02.730
So you don't need
to worry about that.

00:07:05.680 --> 00:07:07.260
And then you as a
developer will need

00:07:07.260 --> 00:07:09.180
to manage the apps and
user drivers that you

00:07:09.180 --> 00:07:11.730
will ship onto your devices.

00:07:11.730 --> 00:07:14.730
You no longer need to worry
about sending security updates

00:07:14.730 --> 00:07:16.980
or maintaining an OS.

00:07:16.980 --> 00:07:20.960
Android Things
maintains that for you.

00:07:20.960 --> 00:07:22.790
So the Android Things
Console is what

00:07:22.790 --> 00:07:25.570
you would use as a
developer to ship

00:07:25.570 --> 00:07:28.470
OTA updates to your devices.

00:07:28.470 --> 00:07:31.520
So you manage your Android IoT
product on this Android Things

00:07:31.520 --> 00:07:33.030
Console.

00:07:33.030 --> 00:07:35.180
You can download and
install the latest version

00:07:35.180 --> 00:07:41.450
of Android Things system images
on this Android Things Console.

00:07:41.450 --> 00:07:43.190
And you can also
build factory images

00:07:43.190 --> 00:07:45.417
that contain the
OEM applications,

00:07:45.417 --> 00:07:46.625
along with the system images.

00:07:49.570 --> 00:07:52.300
On this console itself, you
can also push OTA updates

00:07:52.300 --> 00:07:55.190
to your different clients.

00:07:55.190 --> 00:07:57.050
And if you head over
to partner.android.

00:07:57.050 --> 00:08:03.742
com/things/console, you can
head and see this Console.

00:08:03.742 --> 00:08:05.200
Taking a quick look
at the Console,

00:08:05.200 --> 00:08:07.090
though, this is what
you would typically see

00:08:07.090 --> 00:08:10.180
if you're developing your app.

00:08:10.180 --> 00:08:12.880
I've created this
candy dispenser.

00:08:12.880 --> 00:08:16.270
And on this, I set that I want
to include the Google Play

00:08:16.270 --> 00:08:17.530
services with it.

00:08:17.530 --> 00:08:19.240
But this is what
you would typically

00:08:19.240 --> 00:08:22.390
see when you're managing
your own product.

00:08:22.390 --> 00:08:25.000
If you head to the Factory
Images tab on the Android

00:08:25.000 --> 00:08:27.940
Things Console, you
can see exactly where

00:08:27.940 --> 00:08:30.400
you would need to upload
your applications that you're

00:08:30.400 --> 00:08:31.510
shipping.

00:08:31.510 --> 00:08:34.530
So it's what we call a bundle.

00:08:34.530 --> 00:08:37.450
It's just the file that
contains your APKs that you

00:08:37.450 --> 00:08:41.010
want to ship, as well as
possibly a boot animation,

00:08:41.010 --> 00:08:43.220
if you want to change that.

00:08:43.220 --> 00:08:45.880
You can then choose the
version of Android Things

00:08:45.880 --> 00:08:50.320
that you want to be building
your firmware version for.

00:08:50.320 --> 00:08:52.360
And then you can download
this factory image

00:08:52.360 --> 00:08:55.850
and flash this on the
devices that you're using.

00:08:55.850 --> 00:08:59.320
If you've already got devices
out and in production,

00:08:59.320 --> 00:09:02.860
you can then ship OTA updates
by doing the same process,

00:09:02.860 --> 00:09:05.170
selecting the bundle
and the factory image,

00:09:05.170 --> 00:09:08.730
and then doing push updates.

00:09:08.730 --> 00:09:09.230
Cool.

00:09:09.230 --> 00:09:10.854
So we've got a little
bit of background

00:09:10.854 --> 00:09:13.559
on how Android Things
works and what it is.

00:09:13.559 --> 00:09:15.350
So I'm going to take
a quick look at how we

00:09:15.350 --> 00:09:18.550
can develop for Android Things.

00:09:18.550 --> 00:09:20.420
So to get started
with Android Things,

00:09:20.420 --> 00:09:23.690
you would need to purchase
or obtain a Developer Kit.

00:09:23.690 --> 00:09:26.410
So there are two that
I particularly like,

00:09:26.410 --> 00:09:31.130
the NXP i.MX7D or
the Raspberry Pi 3.

00:09:31.130 --> 00:09:32.750
And these, what you
would typically do

00:09:32.750 --> 00:09:35.870
is with a Raspberry Pi, you
would download the factory

00:09:35.870 --> 00:09:38.270
image and flash
it on the SD card,

00:09:38.270 --> 00:09:40.550
like you would normally do
with any other operating

00:09:40.550 --> 00:09:43.490
system for Raspberry Pi.

00:09:43.490 --> 00:09:45.170
You would then
start up the device.

00:09:45.170 --> 00:09:47.660
And you would have Android
Things running on it.

00:09:47.660 --> 00:09:51.380
From this point on, you can
connect to it over Wi-Fi

00:09:51.380 --> 00:09:54.380
or via the USB cable.

00:09:54.380 --> 00:09:58.100
I particularly like the NXP a
lot more than the Raspberry Pi,

00:09:58.100 --> 00:10:00.540
because it's a lot
easier to debug.

00:10:00.540 --> 00:10:02.210
So when you're
developing, you can just

00:10:02.210 --> 00:10:04.274
develop over the USB cable.

00:10:04.274 --> 00:10:05.940
And you don't need
to worry about Wi-Fi.

00:10:08.500 --> 00:10:10.940
So because we're
developing custom apps,

00:10:10.940 --> 00:10:14.960
we can use custom
hardware with our devices.

00:10:14.960 --> 00:10:19.040
And in order to access these
different hardware peripherals

00:10:19.040 --> 00:10:21.360
that we might include
on our devices,

00:10:21.360 --> 00:10:24.290
there are different
options for you to do.

00:10:24.290 --> 00:10:27.410
So I like to think of it
as two different ways, one

00:10:27.410 --> 00:10:31.820
being the difficult way
and one being the easy way.

00:10:31.820 --> 00:10:35.810
And the peripheral
I/O extension is

00:10:35.810 --> 00:10:39.080
what I like to think of as a
bit more of a difficult way.

00:10:39.080 --> 00:10:40.580
But basically what
this gives you

00:10:40.580 --> 00:10:43.310
is access to all the
different protocols

00:10:43.310 --> 00:10:47.360
that you might be used to if
you have done any kind of IoT

00:10:47.360 --> 00:10:49.550
development before.

00:10:49.550 --> 00:10:54.560
So things such as your
GPIO or your PWM protocol,

00:10:54.560 --> 00:10:58.020
you can get access to those
using the peripheral I/O

00:10:58.020 --> 00:11:00.220
manager.

00:11:00.220 --> 00:11:02.560
But this does sound
a little bit tricky.

00:11:02.560 --> 00:11:04.840
So if this is not
your thing, you

00:11:04.840 --> 00:11:08.380
can head to the peripheral
Java library on GitHub,

00:11:08.380 --> 00:11:10.270
and this gives you
access to a whole bunch

00:11:10.270 --> 00:11:13.390
of pre-built
drivers that you can

00:11:13.390 --> 00:11:16.030
use within your Android
Things application.

00:11:16.030 --> 00:11:20.540
So things such as a GPS or
a button or a server motor

00:11:20.540 --> 00:11:25.960
are all available for you if you
head to that link down below.

00:11:25.960 --> 00:11:28.150
So I like to think of it
as if you don't really

00:11:28.150 --> 00:11:30.130
know what you're doing
with Android Things,

00:11:30.130 --> 00:11:34.780
you can do the GitHub library,
versus if you are more

00:11:34.780 --> 00:11:37.690
into getting
lower-level access, you

00:11:37.690 --> 00:11:42.230
can use the standard protocols.

00:11:42.230 --> 00:11:45.710
So we're going to try
and quickly build an app.

00:11:45.710 --> 00:11:47.600
Basically, what we
have on screen here

00:11:47.600 --> 00:11:51.980
is a breadboard with
a button and an LED.

00:11:51.980 --> 00:11:53.550
So this seems really simple.

00:11:53.550 --> 00:11:56.330
I mean, why do we need
Android Things involved?

00:11:56.330 --> 00:12:01.370
But we're just going to have
Android Things control the LED

00:12:01.370 --> 00:12:04.350
when the button is pressed.

00:12:04.350 --> 00:12:07.880
So what we're going to
do is we have two pins

00:12:07.880 --> 00:12:09.840
that we're using in this case.

00:12:09.840 --> 00:12:13.550
And this is what I like to
refer to as the pinout diagrams.

00:12:13.550 --> 00:12:15.270
So this might be a
little bit confusing.

00:12:15.270 --> 00:12:17.840
But if you have
these devices, you'll

00:12:17.840 --> 00:12:21.780
see there's about 40 or
so pins on a Raspberry Pi

00:12:21.780 --> 00:12:23.630
or on the other kits.

00:12:23.630 --> 00:12:26.270
And because they look the
same doesn't necessarily mean

00:12:26.270 --> 00:12:28.590
they do the same thing.

00:12:28.590 --> 00:12:30.110
So what you want
to do now is we're

00:12:30.110 --> 00:12:35.460
going to be using BCM6 for the
button and BCM21 for the LED.

00:12:39.242 --> 00:12:41.200
So what we're going to
do is in Android Studio,

00:12:41.200 --> 00:12:43.880
we would head to Creating
a New Application.

00:12:43.880 --> 00:12:48.670
So in Android Studio 3.0,
we create a new project.

00:12:48.670 --> 00:12:51.730
And we would select the
Android Things as an option

00:12:51.730 --> 00:12:53.920
that we want to build for.

00:12:53.920 --> 00:12:55.840
We can then choose to
have an empty activity

00:12:55.840 --> 00:12:57.520
that we are using.

00:12:57.520 --> 00:13:00.040
And then automatically
the app adds

00:13:00.040 --> 00:13:04.610
the compile-only dependency into
your app-level build.gradle.

00:13:04.610 --> 00:13:09.220
Now, at the moment, the latest
version is 0.5.1 -devpreview,

00:13:09.220 --> 00:13:11.050
but this is constantly
being updated.

00:13:11.050 --> 00:13:14.690
So make sure to check
out the latest version.

00:13:14.690 --> 00:13:17.240
So automatically in your
Android manifest file,

00:13:17.240 --> 00:13:19.160
we've added the
users library tag,

00:13:19.160 --> 00:13:22.130
which indicates that you need to
use the Android Things library,

00:13:22.130 --> 00:13:26.430
that the device requires
this library to be installed.

00:13:26.430 --> 00:13:29.510
Then on that activity
that we created,

00:13:29.510 --> 00:13:32.320
we have added an intent
filter automatically.

00:13:32.320 --> 00:13:34.710
So this means that when
the device reboots,

00:13:34.710 --> 00:13:37.140
it will automatically
boot into this activity

00:13:37.140 --> 00:13:39.420
that we've created.

00:13:39.420 --> 00:13:41.550
You would need to add
this stuff yourself

00:13:41.550 --> 00:13:44.250
if you haven't gone through
the Create New Android Things

00:13:44.250 --> 00:13:45.870
Project from scratch.

00:13:45.870 --> 00:13:49.530
You would need to do
these all yourself.

00:13:49.530 --> 00:13:51.150
Now, in our example,
we had a button

00:13:51.150 --> 00:13:54.150
that we were using in order
to get pressed events.

00:13:54.150 --> 00:13:56.070
So what I'm going to
do is use the button

00:13:56.070 --> 00:14:00.190
from the GitHub support
library that we saw earlier.

00:14:00.190 --> 00:14:01.830
So I'm just using
it within Gradle,

00:14:01.830 --> 00:14:04.740
putting it in my
build.gradle file.

00:14:04.740 --> 00:14:07.980
And now I get
access to a button.

00:14:07.980 --> 00:14:12.750
So I would create a new
button by saying = new Button,

00:14:12.750 --> 00:14:15.540
and I'd give it the pin that
we were talking about earlier--

00:14:15.540 --> 00:14:19.180
in this case, BCM6 pin.

00:14:19.180 --> 00:14:21.850
Now you must just remember that
this button is not the same

00:14:21.850 --> 00:14:24.370
as the android.widget.button.

00:14:24.370 --> 00:14:27.220
It is a different one from
the Android Things Support

00:14:27.220 --> 00:14:29.230
Libraries.

00:14:29.230 --> 00:14:31.750
Now what you can do is
set an on-click listener

00:14:31.750 --> 00:14:32.770
on the button.

00:14:32.770 --> 00:14:35.590
And this will get fired whenever
we receive a physical button

00:14:35.590 --> 00:14:37.140
press.

00:14:37.140 --> 00:14:39.000
And all we are going
to do in this case

00:14:39.000 --> 00:14:43.840
is set the value of our LED
GPI open to true or false.

00:14:43.840 --> 00:14:45.840
Now, this might be a
little bit confusing first.

00:14:45.840 --> 00:14:50.360
But we'll get into
the LED GPI open next.

00:14:50.360 --> 00:14:52.340
The next thing we need
to do is make sure

00:14:52.340 --> 00:14:55.300
that we close the button
access that we have.

00:14:55.300 --> 00:15:00.190
This just frees up any resources
that we were using before.

00:15:00.190 --> 00:15:02.560
So to get access to
the LED that we have,

00:15:02.560 --> 00:15:08.530
we would just get access to the
peripheral manager service API.

00:15:08.530 --> 00:15:11.890
So what this is is it's provided
by the Android Support Library.

00:15:11.890 --> 00:15:14.590
And you can just use it
by importing and using

00:15:14.590 --> 00:15:17.580
that compile dependency.

00:15:17.580 --> 00:15:21.390
So we would just then say,
service.openGPIO with the pin

00:15:21.390 --> 00:15:23.670
number that we used previously.

00:15:23.670 --> 00:15:25.830
And then we would set
the direction of the pin

00:15:25.830 --> 00:15:28.350
to [? art initially ?] low.

00:15:28.350 --> 00:15:31.470
And then we can access that
pin and set it to true or false

00:15:31.470 --> 00:15:33.630
if we need to.

00:15:33.630 --> 00:15:35.970
Now that's where we
would do in the button.

00:15:35.970 --> 00:15:38.490
We would set it to true
when the button is pressed.

00:15:38.490 --> 00:15:40.620
And we get the
button event false

00:15:40.620 --> 00:15:44.910
when the user lifts
up their finger.

00:15:44.910 --> 00:15:47.740
We would also need to then
just close up this pin as well.

00:15:47.740 --> 00:15:50.010
So in our onDestroy method,
we would then typically

00:15:50.010 --> 00:15:51.525
go LED GPI.close.

00:15:54.350 --> 00:16:00.830
And there we have a blinking
LED powered by Android Things.

00:16:00.830 --> 00:16:03.770
So now that we've seen how to
build a simple Android Things

00:16:03.770 --> 00:16:06.380
project, there's a couple of
examples that I want to go

00:16:06.380 --> 00:16:08.690
through that you can have
a look at if you head

00:16:08.690 --> 00:16:12.266
to hackster.io/Google.

00:16:12.266 --> 00:16:15.000
So the first example
is by Dave Smith,

00:16:15.000 --> 00:16:17.880
and this is what we
call the Edison Candle.

00:16:17.880 --> 00:16:21.090
Now, you might think it's a bit
silly to have a candle powered

00:16:21.090 --> 00:16:23.190
by Android Things.

00:16:23.190 --> 00:16:25.650
But this example is
for you to understand

00:16:25.650 --> 00:16:29.430
how to go from a prototype all
the way into production and all

00:16:29.430 --> 00:16:32.340
the different things you would
need in order to get there.

00:16:32.340 --> 00:16:36.332
So be sure to check out
that project on Hackster.

00:16:36.332 --> 00:16:38.040
The next project that
I want to highlight

00:16:38.040 --> 00:16:40.099
is what they call
the Piano Hero.

00:16:40.099 --> 00:16:42.140
This one is actually on
display if you go head up

00:16:42.140 --> 00:16:44.550
to the Android Things stand.

00:16:44.550 --> 00:16:47.580
And this one is basically
just using a keyboard

00:16:47.580 --> 00:16:48.930
powered by Android Things.

00:16:48.930 --> 00:16:51.420
And you can sort of play
something like Guitar Hero

00:16:51.420 --> 00:16:53.100
but for piano.

00:16:53.100 --> 00:16:56.687
And this was built by
the team at Novoda.

00:16:56.687 --> 00:16:58.770
And then one other one
that I'd like to talk about

00:16:58.770 --> 00:17:01.320
is my own one, and this is
what I call an electricity

00:17:01.320 --> 00:17:02.860
monitoring app.

00:17:02.860 --> 00:17:04.619
Now, where I'm from
in South Africa,

00:17:04.619 --> 00:17:07.290
we suffer quite regularly
from power outages.

00:17:07.290 --> 00:17:11.220
And I had this problem where
I didn't know when I had power

00:17:11.220 --> 00:17:13.500
at home versus when I didn't.

00:17:13.500 --> 00:17:16.560
So I built this app using
Android Things and the Firebase

00:17:16.560 --> 00:17:18.150
SDKs.

00:17:18.150 --> 00:17:22.950
And all the app does is
runs on my Pi at home

00:17:22.950 --> 00:17:25.200
with no other
peripherals connected.

00:17:25.200 --> 00:17:27.119
And when I don't
have power at home,

00:17:27.119 --> 00:17:30.270
I get a notification on my
phone to say the power is off

00:17:30.270 --> 00:17:32.480
or the power has come back on.

00:17:32.480 --> 00:17:34.050
It also keeps track
of how long I've

00:17:34.050 --> 00:17:38.190
had power for at my house,
which is really useful.

00:17:38.190 --> 00:17:40.250
So how I did that
using Firebase,

00:17:40.250 --> 00:17:42.140
a quick little code dive.

00:17:42.140 --> 00:17:45.410
Basically, with Firebase,
you get a really nice SDK

00:17:45.410 --> 00:17:48.021
called the info.connected.

00:17:48.021 --> 00:17:50.270
And this tells you if you're
connected to the internet

00:17:50.270 --> 00:17:51.380
or not.

00:17:51.380 --> 00:17:53.660
So technically, my
electricity monitoring

00:17:53.660 --> 00:17:55.850
is actually just
a network monitor,

00:17:55.850 --> 00:17:59.180
but my network's a lot more
reliable than my power,

00:17:59.180 --> 00:18:03.239
so for me, it serves me fine.

00:18:03.239 --> 00:18:05.530
So what we would do here is
we would just get access to

00:18:05.530 --> 00:18:07.790
if I'm online or
not, and then we

00:18:07.790 --> 00:18:10.920
add a value event
listener on this.

00:18:10.920 --> 00:18:12.500
And then for this
part, we would then

00:18:12.500 --> 00:18:16.530
check on the data snapshot,
am I online or not?

00:18:16.530 --> 00:18:20.270
And if I am, set the value
on the server to true

00:18:20.270 --> 00:18:23.150
and add what we call the
onDisconnect Listener.

00:18:23.150 --> 00:18:24.690
So this is where
it becomes super

00:18:24.690 --> 00:18:27.710
powerful, because the
onDisconnect Listener says,

00:18:27.710 --> 00:18:30.470
when this client
disconnects from the server,

00:18:30.470 --> 00:18:34.400
on the server, set a certain
value to true or false.

00:18:34.400 --> 00:18:38.420
And then on my server, I'm using
the Firebase Cloud Functions

00:18:38.420 --> 00:18:41.590
to determine if I should
send a notification or not.

00:18:41.590 --> 00:18:43.260
I'm monitoring this node.

00:18:43.260 --> 00:18:45.687
And if anything changes,
a push notification

00:18:45.687 --> 00:18:46.895
gets sent down to the device.

00:18:49.750 --> 00:18:51.300
Another cool project
that I actually

00:18:51.300 --> 00:18:55.710
built myself is what we
call an AI Candy Dispenser.

00:18:55.710 --> 00:18:59.550
So this one has been
built by Alvaro Viebrantz.

00:18:59.550 --> 00:19:02.130
And you can find this
one on Hackster as well.

00:19:02.130 --> 00:19:04.350
But this one, what's really
cool about it is it's

00:19:04.350 --> 00:19:08.740
using the TensorFlow API
offline on the device.

00:19:08.740 --> 00:19:12.210
So how it works is when
you press the button,

00:19:12.210 --> 00:19:13.830
it asks you-- you
play a game with it.

00:19:13.830 --> 00:19:17.760
So it asks you, please
show me a photo of a cat

00:19:17.760 --> 00:19:20.024
or a lion or
something like that.

00:19:20.024 --> 00:19:22.440
And you have to quickly go
search for one on the internet.

00:19:22.440 --> 00:19:26.160
Or maybe you have some of
those objects lying around.

00:19:26.160 --> 00:19:29.460
And then show this
image to the device.

00:19:29.460 --> 00:19:32.580
And it uses TensorFlow to
try and classify the image

00:19:32.580 --> 00:19:34.350
that it has on the device.

00:19:34.350 --> 00:19:36.840
And then it says yes or no.

00:19:36.840 --> 00:19:37.540
It's a cat.

00:19:37.540 --> 00:19:38.340
It's a lion.

00:19:38.340 --> 00:19:39.330
You've got it right.

00:19:39.330 --> 00:19:41.250
And then it dispenses candy.

00:19:41.250 --> 00:19:43.620
And this is all powered
using Android Things

00:19:43.620 --> 00:19:48.250
and the TensorFlow libraries.

00:19:48.250 --> 00:19:52.060
So I encourage you to add
your project to hackster.io.

00:19:52.060 --> 00:19:55.160
And you can head to
hackster.io/google.

00:19:55.160 --> 00:19:57.730
So if you've built anything
with Android Things,

00:19:57.730 --> 00:19:59.280
please be sure to
add it there, as it

00:19:59.280 --> 00:20:03.220
will be really valuable
for everyone else to see.

00:20:03.220 --> 00:20:05.650
So why Android Things?

00:20:05.650 --> 00:20:08.230
Well, it's the power of
Android in your own hands

00:20:08.230 --> 00:20:09.940
on these devices.

00:20:09.940 --> 00:20:15.250
Google manages the complexity
of automatic and secure updates.

00:20:15.250 --> 00:20:17.710
And it's a lot easier
for you as a developer

00:20:17.710 --> 00:20:21.240
to manage these things.

00:20:21.240 --> 00:20:24.530
So if you're still curious about
learning more, at 1 o'clock

00:20:24.530 --> 00:20:27.210
there's an instructor-led
training by Renato

00:20:27.210 --> 00:20:30.080
on Hands-On Learning
with Android Things.

00:20:30.080 --> 00:20:34.420
And you can actually create
your own IoT device there.

00:20:34.420 --> 00:20:38.440
I'll be available in the office
hours upstairs on Floor 3

00:20:38.440 --> 00:20:40.390
if you have any questions.

00:20:40.390 --> 00:20:43.840
And on your way out,
there will be IoT cards

00:20:43.840 --> 00:20:46.210
that you can get
your own IoT device

00:20:46.210 --> 00:20:48.990
at this conference itself.

00:20:48.990 --> 00:20:51.010
So thank you very much.

00:20:51.010 --> 00:20:51.610
Cool.

00:20:51.610 --> 00:20:54.960
[UPBEAT MUSIC PLAYING]

