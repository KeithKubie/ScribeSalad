WEBVTT
Kind: captions
Language: en

00:00:01.080 --> 00:00:03.310
DNS is a distributed directory.

00:00:03.310 --> 00:00:06.190
Around the world there
are several root servers

00:00:06.190 --> 00:00:09.825
which direct requests to top
level domain servers, like for

00:00:09.825 --> 00:00:14.280
dot com, which in turn direct requests
to the servers for particular domains.

00:00:14.280 --> 00:00:17.700
This means that no one DNS server
needs to know all the records for

00:00:17.700 --> 00:00:19.860
all the names and domains in the world.

00:00:19.860 --> 00:00:20.560
The records for

00:00:20.560 --> 00:00:25.200
a particular domain, like an A record
for www.greenspaceghost.com,

00:00:25.200 --> 00:00:29.530
will be found in the authoritative
name servers for that domain.

00:00:29.530 --> 00:00:32.281
Like the nameserver for
greenspaceghost.com,

00:00:32.281 --> 00:00:36.050
which are listed in NS records for
the higher level zone.

00:00:36.050 --> 00:00:40.850
So the NS record for greenspaceghost.com
will reside in the nameservers for

00:00:40.850 --> 00:00:43.850
com or dot com, either way.

00:00:43.850 --> 00:00:48.830
com and org and edu and net and a few
others are global top-level domains, or

00:00:48.830 --> 00:00:50.230
gTLD's.

00:00:50.230 --> 00:00:53.350
And their NS records are stored
in the root servers.

00:00:53.350 --> 00:00:57.470
To make it faster, and more complicated,
the DNS server that the client to

00:00:57.470 --> 00:01:01.180
resolve talks to isn't some
sort of global master server.

00:01:01.180 --> 00:01:04.831
Resolvers normally talk to
a nearby caching DNS server.

00:01:04.831 --> 00:01:08.470
For a home user, that might be the local
home router, or it might be run by their

00:01:08.470 --> 00:01:12.640
ISP, or it could be a well known
DNS service like Google Public DNS.

00:01:12.640 --> 00:01:15.580
When that catching server
receives a query from a client,

00:01:15.580 --> 00:01:17.800
first it consults its local cache.

00:01:17.800 --> 00:01:20.420
If the cache doesn't
know what the record is,

00:01:20.420 --> 00:01:22.780
the caching server recursively
resolves the query,

00:01:22.780 --> 00:01:25.180
forwarding to
the appropriate nameservers.

00:01:25.180 --> 00:01:28.840
Possibly first at the root and
then at the top level domain, and

00:01:28.840 --> 00:01:32.440
then at the lower level domain until
eventually it gets back an answer.

00:01:32.440 --> 00:01:34.470
Then it stores that
result in its cache so

00:01:34.470 --> 00:01:36.380
it doesn't have to run
the same query over and

00:01:36.380 --> 00:01:40.800
over again every time you look up
audacity.com or google.com or whatever.

00:01:40.800 --> 00:01:43.770
And finally, it's able to return
that result to the client.

00:01:43.770 --> 00:01:45.820
But caching can cause problems.

00:01:45.820 --> 00:01:48.740
If you want to move your site
from one IP address to another,

00:01:48.740 --> 00:01:51.210
like if you're moving your website
from Google to Amazon, and

00:01:51.210 --> 00:01:53.760
some DNS cache has the old address,

00:01:53.760 --> 00:01:57.240
then clients who use that cache will see
the old address instead of the new one.

00:01:57.240 --> 00:02:01.530
To cut down on this kind of thing DNS
records have a time to live, or TTL,

00:02:01.530 --> 00:02:04.230
which tells caches how
long to cache them for.

00:02:04.230 --> 00:02:07.662
For instance, these records
that I just used dig to get for

00:02:07.662 --> 00:02:10.618
udacity.com have a time
to live of 60 seconds.

00:02:10.618 --> 00:02:13.820
If I look them up from the cache later,
the time to live is reduced.

00:02:14.930 --> 00:02:22.780
Now it's down to 22 seconds, and 14.

00:02:22.780 --> 00:02:24.670
And after the TTL expires,

00:02:24.670 --> 00:02:27.940
caching servers have to go back to
the authoritative server again,

00:02:27.940 --> 00:02:30.640
look the record up, to make sure
that their information is fresh.

