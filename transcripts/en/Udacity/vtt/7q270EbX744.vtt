WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
That question assumes some notion of randomness,

00:00:04.000 --> 00:00:07.000
but is a very fuzzy concept to define.

00:00:07.000 --> 00:00:10.000
What I think is the most useful definition of randomness

00:00:10.000 --> 00:00:13.000
is the one that Andrey Kolmogorov came up with,

00:00:13.000 --> 00:00:16.000
which is based on Kolmogorov Complexity.

00:00:16.000 --> 00:00:19.000
This is an idea that was developed by the Russian Andrey Kolmogorov

00:00:19.000 --> 00:00:22.000
as well as by the Argentinian Gregory Chaitin.

00:00:22.000 --> 00:00:25.000
The idea is a way of measuring the complexity of some sequence.

00:00:25.000 --> 00:00:31.000
And it's defined as the length of the shortest possible description of that sequence.

00:00:31.000 --> 00:00:33.000
For this to be well-defined,

00:00:33.000 --> 00:00:35.000
we need to understand more precisely what a description is.

00:00:35.000 --> 00:00:38.000
One way to do this would be to say it's a turning machine

00:00:38.000 --> 00:00:41.000
and decide on some formal way for writing down a turning machine.

00:00:41.000 --> 00:00:45.000
But we could use any method of describing algorithms that we want.

00:00:45.000 --> 00:00:47.000
It could be a Python program.

00:00:47.000 --> 00:00:50.000
Whatever we select as our description language,

00:00:50.000 --> 00:00:52.000
Kolmogorov Complexity is well-defined,

00:00:52.000 --> 00:00:55.000
and as long as that description language is powerful enough to describe any algorithm,

00:00:55.000 --> 00:00:58.000
it's a reasonable way to define complexity.

00:00:58.000 --> 00:01:01.000
And we can use that to define a notion of randomness.

00:01:01.000 --> 00:01:03.000
Some sequence is random

00:01:03.000 --> 00:01:06.000
if the shortest way to describe that sequence

00:01:06.000 --> 00:01:09.000
is the length of the sequence plus some constant.

00:01:09.000 --> 00:01:12.000
That means, as we make the sequence longer,

00:01:12.000 --> 00:01:15.000
the description gets longer at the same rate.

00:01:15.000 --> 00:01:19.000
This matches the notion of randomness that we used informally in the quiz.

00:01:19.000 --> 00:01:22.000
Then if there's a short program that can produce the sequence,

00:01:22.000 --> 00:01:24.000
that means it's not random.

00:01:24.000 --> 00:01:29.000
It has some structure to it, and the program shows us what that structure is.

00:01:29.000 --> 00:01:32.000
If there isn't any short program that can describe that sequence,

00:01:32.000 --> 00:01:35.000
well, that's an indication that the sequence is random--

00:01:35.000 --> 00:01:38.000
that there's no simpler way to understand that sequence

00:01:38.000 --> 00:01:43.000
other than to see the whole sequence.

00:01:43.000 --> 00:01:46.000
So this seems like a useful notion for understanding randomness.

00:01:46.000 --> 00:01:48.000
We're going to ask a quiz

00:01:48.000 --> 00:01:52.000
to see if it seems like a useful notion form measuring randomness.

00:01:52.000 --> 00:01:55.000
So the question is for a given sequence S,

00:01:55.000 --> 00:02:00.000
is there a way to compute the Kolmogorov Complexity of S?

00:02:00.000 --> 00:02:03.000
The choices are that we can.

00:02:03.000 --> 00:02:10.000
That is the length of S plus some constant.

00:02:10.000 --> 00:02:13.000
So the second choice is, yes, we can.

00:02:13.000 --> 00:02:17.000
It's impractical to do this, but here's an algorithm for doing it.

00:02:17.000 --> 00:02:20.000
We can start by initializing n to 1.

00:02:20.000 --> 00:02:23.000
We can have a loop that keeps going

00:02:23.000 --> 00:02:25.000
until we find the correct value of n,

00:02:25.000 --> 00:02:28.000
which is the Kolmogorov Complexity of the string S.

00:02:28.000 --> 00:02:33.000
And we're going to do that by looping through all the programs of length n.

00:02:33.000 --> 00:02:36.000
This is a big step, but it's finite,

00:02:36.000 --> 00:02:38.000
so, in theory, that would eventually finish.

00:02:38.000 --> 00:02:41.000
And for each program, we're going to execute that program

00:02:41.000 --> 00:02:43.000
and see if it produces S as its output.

00:02:43.000 --> 00:02:49.000
If it does, that's the result that we want.

00:02:49.000 --> 00:02:52.000
And the third choice is no,

00:02:52.000 --> 99:59:59.000
it's theoretically impossible.

