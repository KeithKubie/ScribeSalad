WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:03.320
Now, there comes a point in every game developments life where content

00:00:03.320 --> 00:00:06.720
creators, artists and designers, become very frustrated with the engineers on a

00:00:06.720 --> 00:00:11.807
project. You see, most novice engineers for game dev, when adding artwork and

00:00:11.807 --> 00:00:17.110
content into a game, will usually hard code the path references to assets.

00:00:17.110 --> 00:00:19.990
Which means that if a designer or artist, wants to change that data, they have

00:00:19.990 --> 00:00:24.023
to go talk to an engineer first. Which, engineers usually have a back-log of

00:00:24.023 --> 00:00:28.270
30-60 days worth of tasks, kind of slowing down the entire project. More

00:00:28.270 --> 00:00:31.420
experienced engineers know how to avoid this and actually move themselves

00:00:31.420 --> 00:00:35.642
towards a concept of data driven design. A concept which allows non-engineers

00:00:35.642 --> 00:00:38.692
to effectively change the execution of the flow and the assets in the game

00:00:38.692 --> 00:00:43.807
without ever having to talk to an engineer. Basically this works by providing

00:00:43.807 --> 00:00:47.146
some sort of simplistic data file outside of the game code, a text file, XML,

00:00:47.146 --> 00:00:51.533
JSON. Something that the designers and the artists can quickly iterate on

00:00:51.533 --> 00:00:55.653
without having to talk to anybody in the pit. Case in point, let's say a

00:00:55.653 --> 00:00:58.992
designer and an artist need to find the optimal animation time for some kick

00:00:58.992 --> 00:01:03.339
maneuver on a 2D fighting game. Well, it'd be great if they could actually sit

00:01:03.339 --> 00:01:05.859
at the desk and try different variations of art creation and timing without

00:01:05.859 --> 00:01:08.179
actually having to go talk to an engineer to change the frames that are

00:01:08.179 --> 00:01:13.948
referenced. Most games these days actually have a huge backbone of data-driven

00:01:13.948 --> 00:01:17.594
design. Of course, you end up in a very, very weird position is that if you

00:01:17.594 --> 00:01:20.474
have too much data driven design you actually become a slave to it, in the

00:01:20.474 --> 00:01:25.481
sense that most of your code exists out there. So changing small situations

00:01:25.481 --> 00:01:28.601
becomes very, very difficult, and you actually have to bring an engineer back

00:01:28.601 --> 00:01:33.700
in. So walk that line very finely. You want to be just data driven enough that

00:01:33.700 --> 00:01:36.400
it makes sense and everyone can get their job done, but not so much that it

00:01:36.400 --> 00:01:39.880
actually causes problems to your larger architecture.

