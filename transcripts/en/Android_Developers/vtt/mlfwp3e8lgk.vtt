WEBVTT
Kind: captions
Language: en

00:00:02.221 --> 00:00:04.470
PRADEEPTA DASH: LinkedIn is
the premier social network

00:00:04.470 --> 00:00:05.750
for professionals.

00:00:05.750 --> 00:00:09.166
We are consistently one of
the top apps on Google Play.

00:00:09.166 --> 00:00:10.740
My name is Pradeepta Dash.

00:00:10.740 --> 00:00:14.070
I am the engineering manager
for LinkedIn and for such a team

00:00:14.070 --> 00:00:16.030
for the flagship apps.

00:00:16.030 --> 00:00:17.820
We have a million-plus reviews.

00:00:17.820 --> 00:00:20.760
We are consistently 4+ stars.

00:00:20.760 --> 00:00:23.160
Our users are really
appreciative of how

00:00:23.160 --> 00:00:25.003
stable the app is,
how it really helps

00:00:25.003 --> 00:00:26.836
them bring their
professional profile power.

00:00:26.836 --> 00:00:28.610
DREW HANNAY: My
name is Drew Hannay.

00:00:28.610 --> 00:00:30.450
I'm on the Android
Infrastructure

00:00:30.450 --> 00:00:31.710
team at LinkedIn.

00:00:31.710 --> 00:00:35.340
My team is responsible for the
overall health of our Android

00:00:35.340 --> 00:00:36.180
application.

00:00:36.180 --> 00:00:38.970
We take care of releases
to Google Play, our testing

00:00:38.970 --> 00:00:41.820
pipeline for the app,
or build pipeline.

00:00:41.820 --> 00:00:44.240
One of the tools that my
team has been excited about

00:00:44.240 --> 00:00:47.910
is the APK analyzer tool
because we spend a lot of time

00:00:47.910 --> 00:00:49.950
paying attention to
the size of our app,

00:00:49.950 --> 00:00:52.410
and it required some
expertise to figure out

00:00:52.410 --> 00:00:55.110
what is causing your app
to be a certain size.

00:00:55.110 --> 00:00:57.360
But now that we have
the APK analyzer tool,

00:00:57.360 --> 00:00:59.250
we've been able to
expand that knowledge

00:00:59.250 --> 00:01:01.170
throughout the entire team.

00:01:01.170 --> 00:01:03.330
LinkedIn was an early
adopter of Gradle.

00:01:03.330 --> 00:01:06.600
So adopting Gradle for Android
was a pretty natural fit for us

00:01:06.600 --> 00:01:09.540
because we share a lot of
our custom plug-in logic

00:01:09.540 --> 00:01:11.220
that we've built,
and we can also

00:01:11.220 --> 00:01:13.790
get consistent builds
across developer machines

00:01:13.790 --> 00:01:15.635
and our build service.

00:01:15.635 --> 00:01:17.010
One thing that's
really benefited

00:01:17.010 --> 00:01:20.100
us is the Lint system, which
has a lot of built-in checks

00:01:20.100 --> 00:01:21.360
for common problems.

00:01:21.360 --> 00:01:22.830
And we've really
appreciated being

00:01:22.830 --> 00:01:24.400
able to write our
own custom Lint

00:01:24.400 --> 00:01:28.780
checks for LinkedIn-specific
internal libraries.

00:01:28.780 --> 00:01:31.060
With so many developers
checking into the code base,

00:01:31.060 --> 00:01:32.990
one thing that helps
onboarding someone new

00:01:32.990 --> 00:01:36.070
is having a consistent code
style throughout the code base.

00:01:36.070 --> 00:01:38.680
Android Studio lets us
define a custom code style

00:01:38.680 --> 00:01:41.440
that each developer can
add and automatically

00:01:41.440 --> 00:01:43.995
have their code formatted
in the LinkedIn style.

00:01:43.995 --> 00:01:45.370
PRADEEPTA DASH:
One of the things

00:01:45.370 --> 00:01:47.203
that we really appreciate
is the open nature

00:01:47.203 --> 00:01:50.400
of the platform, where not only
has the feedback that been have

00:01:50.400 --> 00:01:53.170
given back to the developer
community been accepted,

00:01:53.170 --> 00:01:55.120
but also being worked upon.

00:01:55.120 --> 00:01:56.620
In the last couple
of years, my team

00:01:56.620 --> 00:01:59.230
has become very faster,
much more agile,

00:01:59.230 --> 00:02:02.910
and being able to code easier
and faster on the Android

00:02:02.910 --> 00:02:04.300
Studio.

