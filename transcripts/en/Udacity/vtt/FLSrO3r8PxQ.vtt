WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:03.080
Now we're going to cover another area important to

00:00:03.080 --> 00:00:05.530
use when you're writing data, we're going to talk

00:00:05.530 --> 00:00:08.640
about transactions. Let's go back and look at a

00:00:08.640 --> 00:00:11.780
user registering to attend a conference for example. As

00:00:11.780 --> 00:00:15.340
you may recall, we previously introduced an ancestor relationship

00:00:15.340 --> 00:00:18.820
between a profile and conference where the profile that

00:00:18.820 --> 00:00:22.450
created a conference was the ancestor to the conference.

00:00:22.450 --> 00:00:25.650
We will now introduce a "has-a" relationship between profile and

00:00:25.650 --> 00:00:28.840
conference where each profile entity will have a

00:00:28.840 --> 00:00:31.980
list of conferences they will attend. We will call

00:00:31.980 --> 00:00:35.410
this property "conferences to attend". In addition, we will

00:00:35.410 --> 00:00:38.210
have a numeric counter in each conference entity which

00:00:38.210 --> 00:00:41.140
specifies how many seats are still available, we

00:00:41.140 --> 00:00:44.230
will call this property "seats available". So when a

00:00:44.230 --> 00:00:47.350
user registers to attend a conference, the conference gets

00:00:47.350 --> 00:00:50.830
added to conferences to attend and seats available gets

00:00:50.830 --> 00:00:54.020
decremented by one. So going back to transactions, in

00:00:54.020 --> 00:00:57.370
this case your application will perform two update operations

00:00:57.370 --> 00:01:00.890
on two separate entities. So far, every data store

00:01:00.890 --> 00:01:04.510
update operation we used have been independent of the other.

00:01:04.510 --> 00:01:07.640
For example, the success or failure of put entity

00:01:07.640 --> 00:01:10.580
1 and put entity 2 has been independent of

00:01:10.580 --> 00:01:12.910
the success and failure of the other. This may

00:01:12.910 --> 00:01:15.850
be okay in many situations but in many situations it

00:01:15.850 --> 00:01:18.920
may also be completely unacceptable. So going back

00:01:18.920 --> 00:01:22.090
to transactions, in this case your application will perform

00:01:22.090 --> 00:01:25.680
two update operations on two separate entities. On the

00:01:25.680 --> 00:01:28.490
profile entity, you will add the conference to the

00:01:28.490 --> 00:01:31.600
conferences to attend property and on the conference

00:01:31.600 --> 00:01:35.190
entity it will decrement the seats available counter. All

00:01:35.190 --> 00:01:38.600
of these operations are performed independently in these diagram

00:01:38.600 --> 00:01:41.220
right now, you may see that they are highly

00:01:41.220 --> 00:01:44.230
dependent on each other. Imagine, for example, that

00:01:44.230 --> 00:01:46.370
you have successfully added the conference to the

00:01:46.370 --> 00:01:50.520
profile entity and then the unthinkable happens. Your

00:01:50.520 --> 00:01:54.300
application needs to terminate for some reason. For example,

00:01:54.300 --> 00:01:56.140
it runs out of memory and is faced

00:01:56.140 --> 00:01:59.840
with a critical termination condition. In this case,

00:01:59.840 --> 00:02:02.990
when your application restarts the profile entity will

00:02:02.990 --> 00:02:06.380
have the conference registered to attend but the seats

00:02:06.380 --> 00:02:09.580
available counter has not be decremented. This

00:02:09.580 --> 00:02:11.970
means that there will be more users attending

00:02:11.970 --> 00:02:18.200
than there are seats available. That is not good, we solve this problem by using

00:02:18.200 --> 00:02:20.920
transactions. This is done by telling data

00:02:20.920 --> 00:02:24.040
store to begin a transaction. Then you perform

00:02:24.040 --> 00:02:29.110
your operations and finally, you commit your transaction.

00:02:29.110 --> 00:02:31.740
If everything goes well, you have successfully performed

00:02:31.740 --> 00:02:34.545
both update operations and the state of both

00:02:34.545 --> 00:02:38.510
account have been updated. In transaction language, we call

00:02:38.510 --> 00:02:41.390
this a commit forward. But if the unthinkable

00:02:41.390 --> 00:02:44.180
happens and something goes wrong before we have successfully

00:02:44.180 --> 00:02:47.560
executed the commit transaction statement then anything that

00:02:47.560 --> 00:02:50.700
has been updated starting from the begin statement will

00:02:50.700 --> 00:02:54.250
be undone, like it has never happened. For our

00:02:54.250 --> 00:02:56.980
case that means that the seats available counter was

00:02:56.980 --> 00:02:59.550
not decremented but it also means that

00:02:59.550 --> 00:03:01.980
the conference was not added to the profile

00:03:01.980 --> 00:03:04.360
entity. As you can see we have

00:03:04.360 --> 00:03:08.020
created a mutual dependency between these statements. They

00:03:08.020 --> 00:03:13.470
are either executed as a complete group or none of it gets done. Now the

00:03:13.470 --> 00:03:14.930
time has come for you to add

00:03:14.930 --> 00:03:17.800
transactions to conference central with a new exercise.

