WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So let's see one way to do it, together.

00:00:02.000 --> 00:00:07.000
To get the value of the left_child, I'll just call eval_exp recursively.

00:00:07.000 --> 00:00:09.000
To get the value of the right_child, I'll do the same--

00:00:09.000 --> 00:00:12.000
but for the right-hand side of the Abstract Syntax Tree.

00:00:12.000 --> 00:00:15.000
If the operator is (+), I'll just add them together--

00:00:15.000 --> 00:00:17.000
returning the sum of the left_value and the right_value.

00:00:17.000 --> 00:00:19.000
Otherwise, if the operator is (-),

00:00:19.000 --> 00:00:23.000
I'll just subtract them--return the left_value minus the right_value.

00:00:23.000 --> 00:00:25.000
To some of you, this may seem a little weird.

00:00:25.000 --> 00:00:30.000
I'm defining (+) in terms of (+) in Python.

00:00:30.000 --> 00:00:33.000
That is, in order to explain how JavaScript works,

00:00:33.000 --> 00:00:35.000
I'm saying well, JavaScript asked you to do some Addition--

00:00:35.000 --> 00:00:37.000
why don't you just do it in Python?

00:00:37.000 --> 00:00:39.000
But remember that an interpreter is really like

00:00:39.000 --> 00:00:41.000
a translator--so it should not be surprising.

00:00:41.000 --> 00:00:44.000
If you were teaching someone how to speak French

00:00:44.000 --> 00:00:46.000
and they ask you what does a French word mean--

00:00:46.000 --> 00:00:50.000
what's the French word for "big" or how do I interpret the French word "grande"--

00:00:50.000 --> 00:00:52.000
you might tell them: oh, it's just like the word "big"

00:00:52.000 --> 00:00:54.000
in the language that we speak.

00:00:54.000 --> 00:00:58.000
And this is that notion of their universal underlying concepts

00:00:58.000 --> 00:01:00.000
but we just have slightly different syntax for them.

00:01:00.000 --> 00:01:02.000
In this particular case, it looks a little weird

00:01:02.000 --> 00:01:05.000
because the JavaScript and the Python syntax for (+)

00:01:05.000 --> 00:01:07.000
are exactly the same.

00:01:07.000 --> 00:01:09.000
But you'll see slight differences later.

00:01:09.000 --> 00:01:12.000
Remember that, for example, in function declarations,

00:01:12.000 --> 00:01:15.000
JavaScript and Python do actually look different.

00:01:15.000 --> 00:01:17.000
So it should look very similar now

00:01:17.000 --> 00:01:19.000
because the translation is very direct.

00:01:19.000 --> 00:01:21.000
This is like Romance languages

00:01:21.000 --> 00:01:23.000
that share common Latin roots.

