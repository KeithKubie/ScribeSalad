WEBVTT
Kind: captions
Language: en

00:00:13.879 --> 00:00:38.337 align:start size:3% position:97% line:0%
â™ª

00:00:38.337 --> 00:00:40.339
Welcome to the Thinkabit Lab.

00:00:40.339 --> 00:00:42.341
Today we'll learn about servos.

00:00:42.341 --> 00:00:46.312 align:start size:94% position:6%
What are servos?
Servos are these little guys.

00:00:46.312 --> 00:00:49.015 align:start size:81% position:19%
They are motors
that you can program,

00:00:49.015 --> 00:00:50.549
that you can control.

00:00:50.549 --> 00:00:52.552
Why would that be important?

00:00:52.552 --> 00:00:55.621 align:start size:81% position:19%
Have you ever wanted
to build a robot?

00:00:55.621 --> 00:00:57.923
Or control the way
something moves?

00:00:57.923 --> 00:01:00.693 align:start size:78% position:22%
You can use servos
to do that.

00:01:00.693 --> 00:01:04.430 align:start size:97% position:3%
We're going to use
two different kinds of servos.

00:01:04.430 --> 00:01:07.100 align:start size:91% position:9%
This small one
is a position-based servo,

00:01:07.100 --> 00:01:10.136 align:start size:84% position:16%
and the big one
is a continuous servo.

00:01:10.136 --> 00:01:12.438
The big one, you can control

00:01:12.438 --> 00:01:15.507 align:start size:84% position:16%
the speed and direction
in which it spins,

00:01:15.507 --> 00:01:17.443
and it spins 360 degrees.

00:01:17.443 --> 00:01:20.479 align:start size:94% position:6%
The small one,
you can program its position.

00:01:20.479 --> 00:01:22.781
This one is 180-degree range,

00:01:22.781 --> 00:01:25.985 align:start size:88% position:13%
but you can buy
a 90-degree-range servo,

00:01:25.985 --> 00:01:29.689 align:start size:91% position:9%
270-degree-range servo,
depending on what you want.

00:01:29.689 --> 00:01:34.393 align:start position:0%
So, we're going to program
a very simple example for these,

00:01:34.393 --> 00:01:37.063
something that you can
manipulate and control.

00:01:37.063 --> 00:01:40.099
First, look at how
there are three wires

00:01:40.099 --> 00:01:42.034
coming out of your servo.

00:01:42.034 --> 00:01:44.704
The red and black
power the motor,

00:01:44.704 --> 00:01:49.275 align:start position:0%
and the white is the signal
it's looking for to control it.

00:01:49.275 --> 00:01:51.945 align:start size:94% position:6%
It's called the PWM signal--
pulse-width modulation--

00:01:51.945 --> 00:01:54.614 align:start size:81% position:19%
and it's looking
for a specific shape.

00:01:54.614 --> 00:01:58.417 align:start size:91% position:9%
Like your heart rate,
a PWM is a specific shape.

00:01:58.417 --> 00:02:01.087 align:start size:81% position:19%
We don't want
to program for that,

00:02:01.087 --> 00:02:05.859 align:start position:0%
so in Arduino, there's a library
we can reference to use it.

00:02:05.859 --> 00:02:09.428 align:start size:91% position:9%
So, let's get started
by connecting your Arduino

00:02:09.428 --> 00:02:12.165
to your computer
using a USB cable.

00:02:12.165 --> 00:02:15.001 align:start size:84% position:16%
Connect your USB cable
to your Arduino,

00:02:15.001 --> 00:02:17.804 align:start size:81% position:19%
and then connect that
to your computer.

00:02:19.505 --> 00:02:22.341
It takes a moment
for the Arduino

00:02:22.341 --> 00:02:24.643
to register on your computer.

00:02:24.643 --> 00:02:27.813
Once it has, go to
"Tools: Find Port"

00:02:27.813 --> 00:02:32.051
and choose the com port number
that's associated with Arduino.

00:02:32.051 --> 00:02:34.120
Go ahead and click that,

00:02:34.120 --> 00:02:38.925 align:start position:0%
Then I like to go to "File: New"
and expand that window...

00:02:40.059 --> 00:02:41.660 align:start size:78% position:22%
and delete
everything inside.

00:02:41.660 --> 00:02:43.629
I say Control-A and backspace,

00:02:43.629 --> 00:02:47.433 align:start size:94% position:6%
and I do that
because I like to write code

00:02:47.433 --> 00:02:49.368 align:start size:78% position:22%
from scratch
with this exercise.

00:02:49.368 --> 00:02:52.405 align:start size:81% position:19%
Next, I want us
to get that library.

00:02:52.405 --> 00:02:56.175 align:start size:97% position:3%
The library that will generate
the signal that we need,

00:02:56.175 --> 00:02:58.310 align:start size:91% position:9%
go to
"Sketch: Include Library,"

00:02:58.310 --> 00:03:00.946 line:0%
and then we click on "Servo."

00:03:00.946 --> 00:03:04.450 align:start size:84% position:16%
Then it pops up
with that line of code.

00:03:04.450 --> 00:03:07.186 align:start size:81% position:19%
Then we want to name
our servo.

00:03:07.186 --> 00:03:11.624
Write S-e-r-v-o,
space "myservo"...

00:03:12.759 --> 00:03:14.193
and then semicolon.

00:03:14.193 --> 00:03:17.262
That let's the code
and the Arduino know

00:03:17.262 --> 00:03:19.198
that we're using a servo.

00:03:19.198 --> 00:03:21.900
Then what I'd like us to do

00:03:21.900 --> 00:03:26.072
is to attach our servo
to the right pin number.

00:03:26.072 --> 00:03:28.774 align:start size:78% position:22%
To do that,
look at our Arduino

00:03:28.774 --> 00:03:32.211 align:start size:97% position:3%
and notice on the digital side
there's a parentheses

00:03:32.211 --> 00:03:36.015 align:start position:0%
that says PWM
with a squiggly line next to it.

00:03:36.015 --> 00:03:39.818 align:start size:84% position:16%
And notice that
3, 5, 6, 9, 10, and 11

00:03:39.818 --> 00:03:42.455 align:start size:84% position:16%
have that squiggly line
next to it.

00:03:42.455 --> 00:03:44.457
That means that those pins

00:03:44.457 --> 00:03:48.360 align:start size:94% position:6%
can generate the PWM
that the servo needs to move.

00:03:48.360 --> 00:03:51.130 align:start size:81% position:19%
We're gonna go ahead
and use 9.

00:03:51.130 --> 00:03:52.731
In our void setup,

00:03:52.731 --> 00:03:56.702 align:start size:91% position:9%
this is where we can set up
our Arduino's hardware.

00:03:56.702 --> 00:03:59.805 align:start position:0%
So, "void setup," all lowercase,
open, close parentheses,

00:03:59.805 --> 00:04:02.941 align:start size:97% position:3%
open bracket--
shift next to the letter "P"--

00:04:02.941 --> 00:04:06.044 line:0%
enter, and it automatically
generates that close bracket,

00:04:06.044 --> 00:04:09.849 align:start size:97% position:3% line:0%
and make sure your cursor's
in between those two brackets.

00:04:09.849 --> 00:04:11.850 line:0%
We'll attach our servo here.

00:04:11.850 --> 00:04:13.853 line:0%
So, we write "myservo.attach,"

00:04:13.853 --> 00:04:17.357 align:start size:84% position:16% line:0%
and then write 9 inside
and then semicolon.

00:04:17.357 --> 00:04:21.427 align:start size:97% position:3% line:0%
Essentially, pin 9
is going to control our servo.

00:04:21.427 --> 00:04:25.965 align:start size:91% position:9%
The next thing I want to do
is write a void loop.

00:04:25.965 --> 00:04:28.267 align:start size:78% position:22%
This is where
the action happens.

00:04:28.267 --> 00:04:32.437
The lines in the void loop
run over and over again.

00:04:32.437 --> 00:04:34.507 line:0%
We're gonna write "void loop,"

00:04:34.507 --> 00:04:37.409 align:start size:88% position:13% line:0%
open, close parentheses,
open bracket, enter.

00:04:37.409 --> 00:04:39.011 line:0%
Notice the close bracket,

00:04:39.011 --> 00:04:42.414 align:start position:0% line:0%
and we'll write
our lines of code inside there.

00:04:42.414 --> 00:04:47.052 align:start size:97% position:3%
The code that I wanna write
could be used for both servos.

00:04:47.052 --> 00:04:52.925
So, the first line,
"myservo.write(0);"--

00:04:52.925 --> 00:04:56.528 align:start size:88% position:13%
this line of code
for the continuous servo

00:04:56.528 --> 00:04:59.932 align:start size:88% position:13%
will have it spinning
to the left really fast.

00:04:59.932 --> 00:05:04.003 align:start position:0%
For a small servo,
it'll go to position 0 degrees.

00:05:04.003 --> 00:05:06.072
How do I know that?

00:05:06.072 --> 00:05:08.407 align:start size:81% position:19%
With the small servo,
it's intuitive.

00:05:08.407 --> 00:05:09.942
I'll discuss that later.

00:05:09.942 --> 00:05:11.944
The big servo's
not intuitive.

00:05:11.944 --> 00:05:15.714 align:start size:88% position:13%
We'll look into how
we can use a number line

00:05:15.714 --> 00:05:18.784
to understand what numbers
correlate to what actions.

00:05:18.784 --> 00:05:22.922
We'll do that certain action
for a certain amount of time,

00:05:22.922 --> 00:05:25.558
so our next line
will be "delay."

00:05:25.558 --> 00:05:28.627 align:start size:88% position:13%
We'll use the value 2000
and then semicolon.

00:05:28.627 --> 00:05:30.897 align:start size:81% position:19%
So 2000 milliseconds
is 2 seconds.

00:05:30.897 --> 00:05:32.297
The big servo

00:05:32.297 --> 00:05:34.967
will spin left fast
for two seconds.

00:05:34.967 --> 00:05:36.368
The small servo

00:05:36.368 --> 00:05:39.805 align:start size:94% position:6%
will go to position 0 degrees
for two seconds,

00:05:39.805 --> 00:05:42.441 align:start size:81% position:19%
but only if
we keep writing code.

00:05:42.441 --> 00:05:45.877 align:start size:91% position:9%
Otherwise, it wouldn't
make sense to have a delay.

00:05:45.877 --> 00:05:51.483 line:0%
Let's keep writing:
"myservo.right(180)."

00:05:51.483 --> 00:05:53.152 line:0%
And then "delay 2000."

00:05:53.152 --> 00:05:58.290 align:start position:0% line:0%
Looking at our void loop,
this tells me that our big servo

00:05:58.290 --> 00:06:01.027 align:start size:78% position:22%
is gonna spin left
for two seconds

00:06:01.027 --> 00:06:03.095 align:start size:75% position:25%
and right
for two seconds,

00:06:03.095 --> 00:06:04.697
and keeps doing that.

00:06:04.697 --> 00:06:08.100
The small servo will go
to position 0 degrees,

00:06:08.100 --> 00:06:11.170
then position 180 degrees,
then position 0 degrees.

00:06:11.170 --> 00:06:15.374
We want to see that happen,
so we'll upload our code.

00:06:15.374 --> 00:06:17.276
Push the arrow pointing right.

00:06:17.276 --> 00:06:19.978 align:start size:94% position:6%
Once it's uploaded,
let's start connecting them.

00:06:19.978 --> 00:06:21.981
Start with the big servo.

00:06:21.981 --> 00:06:24.717 align:start size:81% position:19%
Take your red, black,
and white wire,

00:06:24.717 --> 00:06:26.719 align:start size:81% position:19%
and make sure
they're color-coded.

00:06:26.719 --> 00:06:29.921 align:start size:91% position:9%
We color-code wires
because it makes it easier

00:06:29.921 --> 00:06:32.825 align:start size:91% position:9%
and less likely
to actually make mistakes.

00:06:32.825 --> 00:06:37.363 align:start position:0%
Put black wire to black,
red to red, and white to white.

00:06:40.098 --> 00:06:42.735 align:start size:81% position:19%
Again, black and red
are your power.

00:06:42.735 --> 00:06:46.172 align:start size:97% position:3%
Black goes GND,
or the negative side of power.

00:06:46.172 --> 00:06:50.143 align:start size:94% position:6%
Red can go into VIN,
although some people use 5V.

00:06:51.643 --> 00:06:54.313 align:start size:91% position:9%
And white
is where you programmed it

00:06:54.313 --> 00:06:56.615
in your void setup, pin 9.

00:06:56.615 --> 00:07:01.320 align:start size:97% position:3%
Notice this servo spins to
the left and then to the right

00:07:01.320 --> 00:07:03.322
and then to the left.

00:07:03.322 --> 00:07:07.092 align:start position:0%
It's fully rotating, which only
a continuous servo can do.

00:07:07.092 --> 00:07:10.095
The position-based servo
will not fully rotate.

00:07:10.095 --> 00:07:11.997
Right? It's position-based.

00:07:11.997 --> 00:07:14.700 align:start size:78% position:22%
But let's look
at the small servo.

00:07:14.700 --> 00:07:16.369
Take out the wires,

00:07:16.369 --> 00:07:20.005 align:start size:94% position:6%
and be careful that
they don't touch each other.

00:07:20.005 --> 00:07:22.675
And then plug in
the small servo

00:07:22.675 --> 00:07:24.977
to see how the same code

00:07:24.977 --> 00:07:27.145
behaves differently
with each servo.

00:07:27.145 --> 00:07:29.848 align:start size:81% position:19%
So, this servo
goes to position 180,

00:07:29.848 --> 00:07:31.283
then 0,

00:07:31.283 --> 00:07:32.984
then 180,

00:07:32.984 --> 00:07:34.386
then 0.

00:07:34.386 --> 00:07:37.456 align:start size:81% position:19%
How do I know it's 0?
It's relative.

00:07:37.456 --> 00:07:40.659 align:start size:88% position:13%
Depends on where
you want to reference it.

00:07:40.659 --> 00:07:43.362 align:start size:78% position:22%
I'm going to decide
this is 0

00:07:43.362 --> 00:07:44.830
and that's 180.

00:07:44.830 --> 00:07:46.298
It's not perfect.

00:07:46.298 --> 00:07:49.402
A more expensive servo
will be more precise.

00:07:50.869 --> 00:07:52.872 align:start size:81% position:19%
Let's start changing
our code.

00:07:52.872 --> 00:07:56.676 align:start size:91% position:9%
Let's see what happens
if we manipulate it a bit.

00:07:56.676 --> 00:08:00.513 align:start size:88% position:13%
Before I do that,
I want to share with you

00:08:00.513 --> 00:08:03.281
the number line
for a big servo.

00:08:03.281 --> 00:08:05.651 align:start size:75% position:25% line:0%
I'll unplug this
for a moment.

00:08:06.719 --> 00:08:08.888
And so you're aware,

00:08:08.888 --> 00:08:11.957 align:start size:84% position:16%
the values you can use
for both servos,

00:08:11.957 --> 00:08:13.625
according to this library,

00:08:13.625 --> 00:08:15.728
is 0 to 180.

00:08:17.062 --> 00:08:20.499 align:start size:91% position:9%
Okay? Those are
the only values you can use

00:08:20.499 --> 00:08:22.802 align:start size:81% position:19%
for myservo.write
in that parentheses.

00:08:22.802 --> 00:08:25.370 align:start size:88% position:13%
So, for a full-rotation,
continuous servo,

00:08:25.370 --> 00:08:27.739
we're gonna use
a number line.

00:08:27.739 --> 00:08:30.443 align:start size:78% position:22%
So, we're gonna say
0 is here,

00:08:30.443 --> 00:08:33.879
and then over here
is going to be 180.

00:08:33.879 --> 00:08:36.582
So, 180 divided by 2 is 90.

00:08:36.582 --> 00:08:38.117
That's about halfway.

00:08:39.151 --> 00:08:41.653 align:start size:84% position:16%
And 90
for a continuous servo

00:08:41.653 --> 00:08:43.155
is stop.

00:08:43.155 --> 00:08:45.524 align:start size:78% position:22%
I'll put that
in quotation marks,

00:08:45.524 --> 00:08:47.059
'cause it's not perfect.

00:08:47.059 --> 00:08:49.461 align:start size:81% position:19%
Sometimes you put 91;
sometimes 89.

00:08:49.461 --> 00:08:52.531 align:start size:81% position:19%
It's trial and error
to make it stop.

00:08:52.531 --> 00:08:55.634
Choosing a value
to the right of 90

00:08:55.634 --> 00:08:58.704
will make your servo
spin to the right.

00:08:58.704 --> 00:09:01.841
Choosing a value
to the left of 90

00:09:01.841 --> 00:09:04.910 align:start size:81% position:19%
will make your servo
spin to the left.

00:09:04.910 --> 00:09:07.312
And I said you can control

00:09:07.312 --> 00:09:10.382 align:start size:84% position:16%
the speed<i> and</i> direction
in which it spins.

00:09:10.382 --> 00:09:12.117
Looking at my fingers,

00:09:12.117 --> 00:09:16.321
the further away you get
from 90, the faster you go.

00:09:16.321 --> 00:09:20.159 align:start size:88% position:13%
The closer you get to 90,
the slower you go.

00:09:20.159 --> 00:09:23.228 align:start size:84% position:16%
If you want the fastest
it can go,

00:09:23.228 --> 00:09:25.931
you can only use 0 and 180.

00:09:25.931 --> 00:09:27.933
And again, to go slower,

00:09:27.933 --> 00:09:31.270 align:start size:78% position:22%
just get closer
to the value of 90.

00:09:31.270 --> 00:09:33.972
And the small servo
is more intuitive.

00:09:33.972 --> 00:09:36.675 align:start size:84% position:16%
The value you put
inside the parentheses

00:09:36.675 --> 00:09:39.378 align:start size:75% position:25%
is the angle
it will point to.

00:09:39.378 --> 00:09:41.547 align:start size:88% position:13%
So, for
the position-based servo,

00:09:41.547 --> 00:09:44.316 line:0%
if I say myservo.write(0),

00:09:44.316 --> 00:09:46.484 line:0%
I go to 0 degrees.

00:09:46.484 --> 00:09:48.487 line:0%
If I say, myservo .write(90),

00:09:48.487 --> 00:09:50.489 line:0%
I go to 90 degrees.

00:09:50.489 --> 00:09:54.292 align:start size:94% position:6% line:0%
If I say, myservo.write(180),
I go to 180 degrees.

00:09:54.292 --> 00:09:58.130
Let's play around with some
examples using the big servo.

00:09:59.498 --> 00:10:02.301 align:start size:81% position:19%
You can change values
in the delay

00:10:02.301 --> 00:10:04.970 align:start size:84% position:16%
or change change values
in myservo.write

00:10:04.970 --> 00:10:06.505
inside those parentheses.

00:10:06.505 --> 00:10:10.075
Let's start with delay,
and instead of 2000,

00:10:10.075 --> 00:10:12.979 align:start size:81% position:19%
let's put 200
and see what happens.

00:10:14.980 --> 00:10:17.482 align:start size:88% position:13%
It's gonna shimmy,
because 200 milliseconds

00:10:17.482 --> 00:10:20.919 align:start size:84% position:16%
is not enough time
for it to fully rotate.

00:10:20.919 --> 00:10:25.858
It will shimmy, and it drifts
a bit, so be wary of that.

00:10:25.858 --> 00:10:30.129
Using the small one, it will
shimmy, but it won't drift.

00:10:30.129 --> 00:10:33.965
Maybe I don't want it
to go back and forth.

00:10:33.965 --> 00:10:37.002 align:start size:78% position:22%
I want it
to only go one way.

00:10:37.002 --> 00:10:39.271 align:start size:81% position:19% line:0%
I'll erase
three lines of code.

00:10:39.271 --> 00:10:42.308 line:0%
I only want it
to do one thing.

00:10:42.308 --> 00:10:45.744 align:start size:81% position:19% line:0%
I want it to spin
slowly to the right.

00:10:45.744 --> 00:10:48.013 line:0%
I'll use the value 100.

00:10:48.013 --> 00:10:49.849
I'm gonna upload that.

00:10:52.083 --> 00:10:54.786 align:start size:81% position:19%
Notice it spins
to the right slowly.

00:10:54.786 --> 00:10:58.590 align:start size:84% position:16%
And if you were to use
that line of code

00:10:58.590 --> 00:11:01.260 align:start size:78% position:22%
and switch it
to the small servo,

00:11:01.260 --> 00:11:04.396 align:start size:84% position:16%
you're telling it to go
to position 100

00:11:04.396 --> 00:11:05.998
and not do anything.

00:11:05.998 --> 00:11:09.067 align:start size:91% position:9%
So, students will be like,
"My servo's broken."

00:11:09.067 --> 00:11:12.104
Watch what happens
when I plug it in.

00:11:12.104 --> 00:11:14.739 align:start size:78% position:22%
Went to position 0
and it stopped.

00:11:14.739 --> 00:11:17.810 align:start size:84% position:16%
You can feel
that you can't move it,

00:11:17.810 --> 00:11:21.480
but it's not very strong
and could break easily.

00:11:21.480 --> 00:11:24.549
You need at least
four lines of code

00:11:24.549 --> 00:11:26.519
for the position-based servo.

00:11:26.519 --> 00:11:27.919
I'll show you

00:11:27.919 --> 00:11:32.224
the example of the shimmy
on a position-based servo.

00:11:32.224 --> 00:11:36.261 align:start size:91% position:9%
But at least with this one,
it will not drift.

00:11:36.261 --> 00:11:40.299 align:start position:0%
I encourage you to change values
in your myservo.write.

00:11:40.299 --> 00:11:42.301
Change values
in your delay.

00:11:42.301 --> 00:11:45.337 align:start size:88% position:13%
Write more lines of code
in your brackets,

00:11:45.337 --> 00:11:48.407
and see what you
can do with it.

00:11:48.407 --> 00:11:51.843 align:start size:88% position:13%
I hot-glue items on there
to see them move.

00:11:51.843 --> 00:11:54.513
Maybe you want to get
something crawling.

00:11:54.513 --> 00:11:58.917 align:start size:94% position:6%
But have fun, see what it
can do, and enjoy yourselves.

00:11:58.917 --> 00:12:00.352
Thanks.

00:12:00.352 --> 00:12:02.421 line:0%
Funding to purchase and make
this educational production

00:12:02.421 --> 00:12:04.422 line:0%
accessible was provided by the
U.S. Department of Education.

00:12:04.422 --> 00:12:05.925 align:start size:84% position:16% line:0%
PH:1-800-USA-LEARN (V)
or WEB: www.ed.gov.

