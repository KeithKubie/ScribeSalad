WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:03.540
A proof of work protocol
is a vehicle really

00:00:03.540 --> 00:00:05.290
by which somebody
can effectively

00:00:05.290 --> 00:00:07.730
prove to you that
they've engaged

00:00:07.730 --> 00:00:11.730
in a significant amount
of computational effort.

00:00:11.730 --> 00:00:14.380
Proof of work protocols
often amount to puzzles.

00:00:14.380 --> 00:00:17.950
And these puzzles that
can, on the one hand,

00:00:17.950 --> 00:00:20.190
be challenging to
solve-- and by that

00:00:20.190 --> 00:00:23.740
I mean they require some
serious computational effort

00:00:23.740 --> 00:00:26.040
and really can't be
short circuited--

00:00:26.040 --> 00:00:28.730
but on the other hand,
that effort can actually

00:00:28.730 --> 00:00:33.900
be easily verified, and it can
be verified in far less time

00:00:33.900 --> 00:00:37.362
than it took to conduct that
effort in the first place.

00:00:37.362 --> 00:00:38.180
OK.

00:00:38.180 --> 00:00:40.720
And there are a number of
applications of such protocols.

00:00:40.720 --> 00:00:45.190
So for example, if you've heard
of the Bitcoin, the Bitcoin

00:00:45.190 --> 00:00:48.160
electronic payment system,
that system actually

00:00:48.160 --> 00:00:52.130
leverages a proof of work
scheme within the context

00:00:52.130 --> 00:00:57.860
of creating what are known
as transaction block chains.

00:00:57.860 --> 00:01:01.300
Now aside from Bitcoin,
which is a very recent user

00:01:01.300 --> 00:01:04.607
of these types of
proof of work schemes,

00:01:04.607 --> 00:01:06.440
these schemes have been
proposed in the past

00:01:06.440 --> 00:01:07.550
for other applications.

00:01:07.550 --> 00:01:09.712
For example, proof
of work schemes

00:01:09.712 --> 00:01:11.170
have been proposed
for doing things

00:01:11.170 --> 00:01:14.760
like deterring denial-of-service
attacks, or DoS attacks.

00:01:14.760 --> 00:01:17.720
And here the idea is
that the requester

00:01:17.720 --> 00:01:19.630
of a particular
service would have

00:01:19.630 --> 00:01:24.140
to solve a very specific
computational problem, a proof

00:01:24.140 --> 00:01:27.670
of work puzzle, before being
allowed to use a service.

00:01:27.670 --> 00:01:31.000
And the idea here is that the
computational effort exerted

00:01:31.000 --> 00:01:34.680
is effectively a way to
throttle the requester.

00:01:34.680 --> 00:01:36.180
The responder can,
in turn, easily

00:01:36.180 --> 00:01:39.520
check if the requester carried
out the requisite work,

00:01:39.520 --> 00:01:42.200
and only if that work was
carried out will the responder

00:01:42.200 --> 00:01:45.810
respond to that
request for service.

00:01:45.810 --> 00:01:48.859
Now the original
application for these types

00:01:48.859 --> 00:01:50.650
of proof of work
protocols, the first place

00:01:50.650 --> 00:01:53.360
that I've seen it
proposed, is in the context

00:01:53.360 --> 00:01:56.100
of being able to
deter spam email.

00:01:56.100 --> 00:01:58.676
And then obviously, we all know
what spam email is hopefully.

00:01:58.676 --> 00:02:01.050
These are messages that you
don't want in your inbox that

00:02:01.050 --> 00:02:04.780
maybe come to you in
an unsolicited fashion.

00:02:04.780 --> 00:02:08.419
And the idea here is that
a proof of work protocol,

00:02:08.419 --> 00:02:11.720
it turns out it can be tied
to a particular email message.

00:02:11.720 --> 00:02:14.910
And this is conceptually
like affixing a postage stamp

00:02:14.910 --> 00:02:20.200
to a message, but rather than
paying for that stamp using

00:02:20.200 --> 00:02:24.690
money, you're basically paying
for that stamp via CPU cycles.

00:02:24.690 --> 00:02:27.400
So for a legitimate sender
who is only sending out

00:02:27.400 --> 00:02:31.420
a small number of messages, this
type of proof of work protocol

00:02:31.420 --> 00:02:32.860
will not amount to very much.

00:02:32.860 --> 00:02:35.670
It's going to be a minor
deterrent since it's only

00:02:35.670 --> 00:02:38.250
executed a very small
number of times.

00:02:38.250 --> 00:02:40.060
It's kind of an
impediment, but it's not

00:02:40.060 --> 00:02:42.970
something that's
so unreasonable.

00:02:42.970 --> 00:02:46.090
Now for a spammer, who might be
sending out a lot of messages,

00:02:46.090 --> 00:02:49.050
maybe hundreds of thousands,
or millions of messages,

00:02:49.050 --> 00:02:52.680
it might be prohibitively
expensive to repeatedly expend

00:02:52.680 --> 00:02:55.880
so many CPU cycles for each
message and each sender

00:02:55.880 --> 00:02:58.540
to whom that message
is being sent.

00:02:58.540 --> 00:03:00.040
So hopefully this
gives you a flavor

00:03:00.040 --> 00:03:03.180
for some of the applications of
these proof of work protocols.

00:03:03.180 --> 00:03:07.296
Let me actually dive in to
how they work in practice.

00:03:07.296 --> 00:03:08.796
So first of all,
the way that I like

00:03:08.796 --> 00:03:11.590
to think of these protocols
is that typically, they

00:03:11.590 --> 00:03:14.900
work relative to a
given challenge string.

00:03:14.900 --> 00:03:16.750
And I'm going to
call this challenge

00:03:16.750 --> 00:03:20.120
string-- we'll label
it with the letter c.

00:03:20.120 --> 00:03:22.700
So c's going to be kind
of a challenge string.

00:03:22.700 --> 00:03:27.210
And what the person trying to
engage in the protocol will do,

00:03:27.210 --> 00:03:30.870
the prover of the
work, will basically

00:03:30.870 --> 00:03:34.630
try to come up with a
corresponding proof that

00:03:34.630 --> 00:03:36.680
is tied to this
challenge string.

00:03:36.680 --> 00:03:38.967
It's going to be kind
of a response associated

00:03:38.967 --> 00:03:39.800
with this challenge.

00:03:39.800 --> 00:03:42.880
It has a very specific
mathematical property

00:03:42.880 --> 00:03:44.954
in relation to this challenge.

00:03:44.954 --> 00:03:47.620
And as you point out, maybe when
I talk about a challenge string

00:03:47.620 --> 00:03:49.530
here, for example in
the context of spam,

00:03:49.530 --> 00:03:51.030
this challenge
string might actually

00:03:51.030 --> 00:03:52.984
represent an email message.

00:03:52.984 --> 00:03:54.400
So it's going to
be something very

00:03:54.400 --> 00:03:57.810
specific to the task at hand.

00:03:57.810 --> 00:04:00.710
Now what the prover will do is
come up with a response string,

00:04:00.710 --> 00:04:07.340
and let's call the
response string r.

00:04:07.340 --> 00:04:09.470
Actually, let's use
the term p for it,

00:04:09.470 --> 00:04:13.650
since maybe we can think
of it as a proof, a proof

00:04:13.650 --> 00:04:16.170
or a response.

00:04:16.170 --> 00:04:19.459
And the idea is that the prover
will come up with this proof

00:04:19.459 --> 00:04:23.170
or response string, and he has
to come up with a string such

00:04:23.170 --> 00:04:25.670
that, when you concatenate the
challenge and the response,

00:04:25.670 --> 00:04:29.396
and you take the two
together, and you apply

00:04:29.396 --> 00:04:31.062
a cryptographic hash
function-- so let's

00:04:31.062 --> 00:04:32.687
say I come up with
a cryptographic hash

00:04:32.687 --> 00:04:37.240
function, like SHA-256, or
anything of that nature.

00:04:37.240 --> 00:04:40.290
If I take the challenge
string and the proof string

00:04:40.290 --> 00:04:42.720
and concatenate together and
apply the cryptographic hash

00:04:42.720 --> 00:04:45.710
function, apply these
mathematical transformations

00:04:45.710 --> 00:04:48.170
that represent the
cryptographic hash function,

00:04:48.170 --> 00:04:49.920
I want to come up with
a proof string such

00:04:49.920 --> 00:04:53.030
that the output under
this hash function

00:04:53.030 --> 00:04:55.550
will have a very
specific property.

00:04:55.550 --> 00:05:00.070
The prefix of the output, the
first large number of bits

00:05:00.070 --> 00:05:01.040
will all be 0.

00:05:01.040 --> 00:05:05.746
So let's say the first 40
bits, or first 30 bits,

00:05:05.746 --> 00:05:07.120
or some number of
bits will be 0.

00:05:09.690 --> 00:05:12.550
And then the other bits can be
whatever they would normally

00:05:12.550 --> 00:05:13.709
be.

00:05:13.709 --> 00:05:15.500
So obviously, what
you're trying to do here

00:05:15.500 --> 00:05:17.676
is come up with a
proof string that

00:05:17.676 --> 00:05:19.550
has a relationship with
the challenge string.

00:05:19.550 --> 00:05:21.008
And that relationship
happens to be

00:05:21.008 --> 00:05:26.515
one that is taken with respect
to a particular hash function,

00:05:26.515 --> 00:05:30.220
and really incorporates
or considers

00:05:30.220 --> 00:05:32.210
what the output of
the hash function

00:05:32.210 --> 00:05:35.960
will be when the proof string is
concatenated with the challenge

00:05:35.960 --> 00:05:37.760
string.

00:05:37.760 --> 00:05:40.130
And if you, let's say, have
a good cryptographic hash

00:05:40.130 --> 00:05:42.960
function, then
the only known way

00:05:42.960 --> 00:05:44.885
to find this type
of a proof string

00:05:44.885 --> 00:05:49.130
is to effectively try a lot
of different possibilities,

00:05:49.130 --> 00:05:51.040
effectively doing
brute force, by trying

00:05:51.040 --> 00:05:54.005
a lot of different proof strings
until you find one that works.

00:05:54.005 --> 00:05:56.040
Now if you, let's
say, needed to find

00:05:56.040 --> 00:06:00.950
an output that contained about
40 consecutive 0's in it, that

00:06:00.950 --> 00:06:03.850
would require you to
perform about 2 to the power

00:06:03.850 --> 00:06:08.780
40 steps, 2 to the power
40 different hash function

00:06:08.780 --> 00:06:09.380
indications.

00:06:09.380 --> 00:06:12.820
You'd have to try 2 to the
40 different strings, and one

00:06:12.820 --> 00:06:15.490
of them what would likely
work if you tried 2

00:06:15.490 --> 00:06:16.460
to the 40 such strings.

00:06:16.460 --> 00:06:19.340
That actually requires you to
try about, and 2 to the 40 just

00:06:19.340 --> 00:06:22.900
to give you a sense, is
approximately 1 trillion.

00:06:22.900 --> 00:06:25.440
So if you tried a trillion
different strings out,

00:06:25.440 --> 00:06:28.670
and you hashed them
each, you would likely

00:06:28.670 --> 00:06:33.070
come up with one string that
had the first 40 bits being 0.

00:06:33.070 --> 00:06:34.820
Now sometimes it might
take you a lot less

00:06:34.820 --> 00:06:35.790
than a trillion steps.

00:06:35.790 --> 00:06:38.480
Sometimes it might take
you a little bit more.

00:06:38.480 --> 00:06:39.510
You may get very lucky.

00:06:39.510 --> 00:06:41.320
You might get very unlucky.

00:06:41.320 --> 00:06:45.090
But on average, it will take
you about 1 trillion steps

00:06:45.090 --> 00:06:51.890
to find a string where the
first 40 bits are equal to 0.

00:06:51.890 --> 00:06:54.510
So this is something
that's not easy,

00:06:54.510 --> 00:06:57.495
but it's also not outside
the realm of possibility.

00:06:57.495 --> 00:06:59.430
Now to understand
why it's really hard

00:06:59.430 --> 00:07:02.350
to solve these types of
proof of work schemes more

00:07:02.350 --> 00:07:04.560
efficiently than maybe
simply doing brute force,

00:07:04.560 --> 00:07:07.070
I think it's helpful to
recall that the output

00:07:07.070 --> 00:07:10.895
of a cryptographic hash function
looks more or less random.

00:07:10.895 --> 00:07:16.190
In fact, each output bit looks
like a series of coin flips.

00:07:16.190 --> 00:07:17.815
So it's kind of like
flipping the coin,

00:07:17.815 --> 00:07:19.890
and if it comes up heads,
you would have a 0,

00:07:19.890 --> 00:07:22.230
and if it comes up tails,
you can think of it as a 1.

00:07:22.230 --> 00:07:23.646
And so what you're
really doing is

00:07:23.646 --> 00:07:27.500
saying, if I flipped 40 coins,
what are the odds that you

00:07:27.500 --> 00:07:32.120
would have 40 consecutive
heads on those 40 coin flips?

00:07:32.120 --> 00:07:35.460
Now obviously that
likelihood is very small,

00:07:35.460 --> 00:07:37.750
but it's not outside the
realm of possibility.

00:07:37.750 --> 00:07:42.280
If you flipped 40 coins and
you flipped those 40 coins

00:07:42.280 --> 00:07:45.100
about a trillion times,
you would actually

00:07:45.100 --> 00:07:49.170
expect to see one instance
in which all 40 coins came up

00:07:49.170 --> 00:07:53.372
as heads out of
a trillion tries.

00:07:53.372 --> 00:07:55.830
Now one interesting thing with
these proof of work schemes,

00:07:55.830 --> 00:07:57.870
is they can be ratcheted
up or ratcheted down.

00:07:57.870 --> 00:08:00.050
So for example,
let's say you want

00:08:00.050 --> 00:08:02.690
to require even more
computational heavy lifting

00:08:02.690 --> 00:08:05.170
to come up with a
correct proof string.

00:08:05.170 --> 00:08:09.270
Let's say you want to
increase the work that's

00:08:09.270 --> 00:08:10.270
going to be proved here.

00:08:10.270 --> 00:08:12.020
What you can effectively
do, in that case,

00:08:12.020 --> 00:08:14.440
is you could just increase
the requirement on a number

00:08:14.440 --> 00:08:15.727
of leading 0's.

00:08:15.727 --> 00:08:17.310
So every time you
add an additional 0,

00:08:17.310 --> 00:08:20.930
you effectively double the
computational horsepower

00:08:20.930 --> 00:08:22.144
needed on average.

00:08:22.144 --> 00:08:23.560
And that's because
you effectively

00:08:23.560 --> 00:08:26.830
requiring one more coin
flip to come up heads,

00:08:26.830 --> 00:08:30.120
and that entails doubling
the number of coin flips.

00:08:30.120 --> 00:08:34.429
So if I had 41 coin flips and
I required 41 straight heads,

00:08:34.429 --> 00:08:36.470
that would require about
twice as much effort

00:08:36.470 --> 00:08:39.640
as just requiring
40 straight heads.

00:08:39.640 --> 00:08:42.570
And likewise, every time you
remove a 0 from consideration,

00:08:42.570 --> 00:08:44.580
or the requirement,
that will reduce

00:08:44.580 --> 00:08:47.190
the computational horsepower
needed to about half

00:08:47.190 --> 00:08:48.360
of what it was previously.

00:08:48.360 --> 00:08:52.190
So for example, if I only
required the first 39 bits

00:08:52.190 --> 00:08:56.380
to be 0, that would require
about half as many coin flips

00:08:56.380 --> 00:08:59.950
as requiring the
first 40 bits to be 0.

00:08:59.950 --> 00:09:03.710
Now the neat thing is that once
you come up with a solution--

00:09:03.710 --> 00:09:06.805
let's say that somebody
tries a trillion times

00:09:06.805 --> 00:09:09.590
and they finally come up
with a proof string that

00:09:09.590 --> 00:09:12.810
works-- it's very easy to
validate that this proof

00:09:12.810 --> 00:09:16.140
string is in fact a
correct proof of work.

00:09:16.140 --> 00:09:18.780
All you have to do is,
you take the challenge

00:09:18.780 --> 00:09:22.050
and you take the proof string
and you hash them together.

00:09:22.050 --> 00:09:25.960
So for example, if somebody
proposes this one string,

00:09:25.960 --> 00:09:29.440
let's call it p prime, all you
do is you take the challenge

00:09:29.440 --> 00:09:31.830
and you take p prime,
and you input them

00:09:31.830 --> 00:09:34.275
into a hash
function, and you see

00:09:34.275 --> 00:09:37.170
if the first 40 bits are all 0.

00:09:37.170 --> 00:09:40.470
So all this requires you to do
is apply a hash function once

00:09:40.470 --> 00:09:43.250
to the concatenation
of c and p prime,

00:09:43.250 --> 00:09:45.570
and you can verify
that the output indeed

00:09:45.570 --> 00:09:48.150
has the requisite number
of 0's in front of it.

00:09:48.150 --> 00:09:51.470
And if you see that the output
has the requisite number

00:09:51.470 --> 00:09:54.727
of 0's, then you can consider
the proof of work valid,

00:09:54.727 --> 00:09:56.810
because you know it must
have taken somebody a lot

00:09:56.810 --> 00:10:01.110
of time, a lot of tries
really, to provide or come up

00:10:01.110 --> 00:10:04.310
with the string p prime, such
that the concatenation of c

00:10:04.310 --> 00:10:08.800
and p prime gives
you a number of 0's

00:10:08.800 --> 00:10:11.490
under the application of this
cryptographic hash function.

00:10:11.490 --> 00:10:14.610
So as you can see, these
schemes are quite simple,

00:10:14.610 --> 00:10:16.600
but quite clever
at the same time.

00:10:16.600 --> 00:10:18.990
They really amount to coming
up with a proof string that

00:10:18.990 --> 00:10:22.530
has a very specific,
mathematical relationship

00:10:22.530 --> 00:10:24.060
with the original
challenge string.

00:10:24.060 --> 00:10:25.768
So hopefully this
video gave you a flavor

00:10:25.768 --> 00:10:32.020
for the mechanics of how these
proof of work protocols work.

