WEBVTT
Kind: captions
Language: en

00:00:00.805 --> 00:00:01.680
MATTHEW WILLIAMS: Hi.

00:00:01.680 --> 00:00:03.400
I'm Matthew from the
Android Cloud Team.

00:00:03.400 --> 00:00:06.410
And I'm going to talk about how
you're apps can efficiently use

00:00:06.410 --> 00:00:09.720
platform resources with the
new job scheduler API's.

00:00:09.720 --> 00:00:11.604
You lucky devils.

00:00:11.604 --> 00:00:13.020
So what are we
doing here exactly?

00:00:13.020 --> 00:00:14.120
I mean this is YouTube.

00:00:14.120 --> 00:00:17.110
You could be watching video
game replays or fashion tips.

00:00:17.110 --> 00:00:18.285
But don't go just yet.

00:00:18.285 --> 00:00:20.410
I'm going to show off a
new way to handle execution

00:00:20.410 --> 00:00:24.520
of background jobs in a way that
will improve battery life also

00:00:24.520 --> 00:00:26.240
developer's lives.

00:00:26.240 --> 00:00:27.655
So what background jobs?

00:00:27.655 --> 00:00:29.280
Well, there are
different kinds of work

00:00:29.280 --> 00:00:31.820
your app needs to get done
that aren't user facing.

00:00:31.820 --> 00:00:34.830
Periodically hitting the
network to upload user data

00:00:34.830 --> 00:00:37.100
or downloading
config parameters.

00:00:37.100 --> 00:00:39.500
These typically don't need
to be reflected immediately--

00:00:39.500 --> 00:00:41.480
if at all-- to the user.

00:00:41.480 --> 00:00:43.270
For example, think of
a network operation

00:00:43.270 --> 00:00:45.900
that would not update the UI.

00:00:45.900 --> 00:00:48.481
The types of jobs I'm talking
about are also self-contained.

00:00:48.481 --> 00:00:49.980
One way to think
of it is that we're

00:00:49.980 --> 00:00:53.790
interested in execution logic
that can be easily refactored.

00:00:53.790 --> 00:00:56.730
Another way to think about it
is that sum bundle of parameters

00:00:56.730 --> 00:00:58.709
that you need to know
to run your task.

00:00:58.709 --> 00:01:01.000
The [? neove ?] user, the
list of rows in your database

00:01:01.000 --> 00:01:03.210
that are dirty, or
the list of contacts

00:01:03.210 --> 00:01:06.000
that the user has
requested be uploaded.

00:01:06.000 --> 00:01:07.807
So why create a new API?

00:01:07.807 --> 00:01:09.390
You might wonder
what's our rationale.

00:01:09.390 --> 00:01:11.681
And clearly these things have
been possible for as long

00:01:11.681 --> 00:01:13.400
as Android has been around.

00:01:13.400 --> 00:01:14.510
Well, not quite.

00:01:14.510 --> 00:01:16.260
Take network calls
as an example.

00:01:16.260 --> 00:01:18.590
These are a strong candidate
for the kinds of work

00:01:18.590 --> 00:01:19.800
we're interested in.

00:01:19.800 --> 00:01:22.240
Apps usually do them ASAP
to kind of get them out

00:01:22.240 --> 00:01:23.170
of the way.

00:01:23.170 --> 00:01:25.030
This leads to unnecessary
radio wake ups

00:01:25.030 --> 00:01:28.321
where everyone is doing
their own thing haphazardly.

00:01:28.321 --> 00:01:30.320
To sell you some more,
let's take a look at home

00:01:30.320 --> 00:01:33.210
we might write code to
periodically upload data

00:01:33.210 --> 00:01:35.152
but without the job scheduler.

00:01:35.152 --> 00:01:38.160
There are roughly two ways
you could have done this.

00:01:38.160 --> 00:01:40.910
You could use a handler
and post a delayed message,

00:01:40.910 --> 00:01:43.016
if the period was small enough.

00:01:43.016 --> 00:01:44.890
But what happens if the
user kills their app,

00:01:44.890 --> 00:01:46.130
or if the system does?

00:01:46.130 --> 00:01:48.380
At this point, you decide
the AlarmManager is for you,

00:01:48.380 --> 00:01:49.920
because at least
you'll be started

00:01:49.920 --> 00:01:51.492
when the alarm goes off.

00:01:51.492 --> 00:01:53.450
The problem is now that
if the phone turns off,

00:01:53.450 --> 00:01:54.850
your alarm is gone.

00:01:54.850 --> 00:01:58.000
So you're stuck doing
your own business stunts.

00:01:58.000 --> 00:02:00.960
Then what if in execution time,
the network wasn't available?

00:02:00.960 --> 00:02:03.000
You'd need to handle
this and try again later.

00:02:03.000 --> 00:02:04.950
You have to register
a broadcast receiver

00:02:04.950 --> 00:02:07.461
so you'd know when
connectivity came back.

00:02:07.461 --> 00:02:09.919
I guess you could try writing
a sync adapter, which kind of

00:02:09.919 --> 00:02:12.190
solves a bunch of
these issues for you

00:02:12.190 --> 00:02:13.800
and is an excellent
piece of code.

00:02:13.800 --> 00:02:16.480
But it's not intended to
be used for scheduling.

00:02:16.480 --> 00:02:19.200
Regardless of route, it
would be a mess and difficult

00:02:19.200 --> 00:02:20.390
to get right.

00:02:20.390 --> 00:02:22.270
So we've decided to
get it wrong for you.

00:02:22.270 --> 00:02:25.430
We've taken pre-existing
functionality, wired it

00:02:25.430 --> 00:02:28.190
together with new functionality,
and we're giving it to you

00:02:28.190 --> 00:02:30.900
in a nice palatable package.

00:02:30.900 --> 00:02:33.970
We've introduced the concept
of idle mode, a window of time

00:02:33.970 --> 00:02:36.800
for which the system has
determined the phone is unused

00:02:36.800 --> 00:02:39.420
and is not likely to
be turned on soon.

00:02:39.420 --> 00:02:42.200
For example, having a job
run while the device is idle

00:02:42.200 --> 00:02:45.370
and also charging is likely
to happen at night when

00:02:45.370 --> 00:02:48.554
the user is sleeping with the
phone plugged in next to them.

00:02:48.554 --> 00:02:50.220
The second thing we've
done is integrate

00:02:50.220 --> 00:02:52.990
it closely with new system API
so that it will inform clients

00:02:52.990 --> 00:02:54.574
when the network is active.

00:02:54.574 --> 00:02:56.490
This means that the
handshake with the carrier

00:02:56.490 --> 00:02:57.930
has already happened.

00:02:57.930 --> 00:03:00.220
So when we batch your app's
network calls to follow on

00:03:00.220 --> 00:03:02.940
shortly after, it will
circumvent the battery course

00:03:02.940 --> 00:03:05.260
of you doing this
handshake independently.

00:03:05.260 --> 00:03:07.130
Less pesky battery
blaming and battery

00:03:07.130 --> 00:03:11.130
[INAUDIBLE] for you and
more battery for our users.

00:03:11.130 --> 00:03:13.840
So let's take a look at how
to use this functionality.

00:03:13.840 --> 00:03:16.320
Here we'll see the sorts of
work you might like to express.

00:03:16.320 --> 00:03:18.210
Run this when the
phone is plugged in.

00:03:18.210 --> 00:03:20.890
Run this whenever an unmetered
network becomes available.

00:03:20.890 --> 00:03:23.460
But make sure I run
within the hour.

00:03:23.460 --> 00:03:25.690
Wait at least 10 minutes,
and then run this

00:03:25.690 --> 00:03:28.060
the next time the
device is idle.

00:03:28.060 --> 00:03:30.360
Every 15 minutes, whenever
a network is available

00:03:30.360 --> 00:03:33.450
let me know so I can do
some small health check.

00:03:33.450 --> 00:03:35.760
These four use cases there
are a number of constraints.

00:03:35.760 --> 00:03:38.977
And you can specify as many
or as few of them as you want.

00:03:38.977 --> 00:03:40.560
The scheduler will
only run a job that

00:03:40.560 --> 00:03:42.290
has all of its
criteria satisfied.

00:03:42.290 --> 00:03:45.055
The one exception being
when you set a deadline.

00:03:45.055 --> 00:03:46.430
When this deadline
expires, it'll

00:03:46.430 --> 00:03:48.270
override your
existing constraints.

00:03:48.270 --> 00:03:51.180
Let's take a look at how
we do this practically.

00:03:51.180 --> 00:03:53.680
For this job assessing
the deadline of an hour.

00:03:53.680 --> 00:03:56.520
What will happen if the
phone is in airplane mode

00:03:56.520 --> 00:03:58.246
after the hour has expired?

00:03:58.246 --> 00:03:59.746
Well, we'll talk
about failure retry

00:03:59.746 --> 00:04:01.314
in the next and last section.

00:04:01.314 --> 00:04:03.480
For now let's look at some
other interesting things.

00:04:03.480 --> 00:04:06.175
My job service is the
endpoint you provide.

00:04:06.175 --> 00:04:08.300
Here you are identifying
it so that the system will

00:04:08.300 --> 00:04:10.520
know where your job should land.

00:04:10.520 --> 00:04:13.310
Wi-Fi upload ID is
handled on your job

00:04:13.310 --> 00:04:15.310
to differentiate it from
others as you schedule.

00:04:15.310 --> 00:04:17.935
So it's your integer
that you pick yourself.

00:04:17.935 --> 00:04:19.560
You take this job in
for object, and it

00:04:19.560 --> 00:04:22.060
passes into the system in
a normal way, and voila.

00:04:24.960 --> 00:04:27.050
But where does my logic go?

00:04:27.050 --> 00:04:30.460
OK, so you extend a service
provider by the framework.

00:04:30.460 --> 00:04:33.080
The framework service handles
all of the serious life cycle

00:04:33.080 --> 00:04:36.180
mechanics for you, leaving you
with only the implementation

00:04:36.180 --> 00:04:39.520
of onStartJob and
onStopJob to worry about.

00:04:39.520 --> 00:04:41.690
Once your job is
landed on your service

00:04:41.690 --> 00:04:44.410
and you've done whatever
it is you set out to do,

00:04:44.410 --> 00:04:46.290
call jobFinished
and you're done.

00:04:46.290 --> 00:04:48.174
And that's more or less it.

00:04:48.174 --> 00:04:49.590
Oh yeah, I mentioned
it was really

00:04:49.590 --> 00:04:51.840
easy to request a reschedule
if your job failed

00:04:51.840 --> 00:04:53.290
for some reason.

00:04:53.290 --> 00:04:55.590
In either onStartJob
or jobFinished,

00:04:55.590 --> 00:04:57.060
you provide a
Boolean to indicate

00:04:57.060 --> 00:04:58.550
whether you need
to be rescheduled.

00:04:58.550 --> 00:04:59.160
Bam!

00:04:59.160 --> 00:05:00.700
Done.

00:05:00.700 --> 00:05:02.214
OK, that's a lot of detail.

00:05:02.214 --> 00:05:03.880
But if you're still
with me, you have it

00:05:03.880 --> 00:05:05.977
and are ready to use this stuff.

00:05:05.977 --> 00:05:08.060
The take away is that being
good citizen should be

00:05:08.060 --> 00:05:10.170
is painless a show as possible.

00:05:10.170 --> 00:05:12.840
So thanks for watching.

