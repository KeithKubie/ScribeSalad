WEBVTT
Kind: captions
Language: en

00:00:01.150 --> 00:00:02.420
We've now discussed and

00:00:02.420 --> 00:00:06.200
created a feature where a user can
limit their housing search results

00:00:06.200 --> 00:00:09.870
to be within a specific travel time of
a point that they care about, like work.

00:00:10.970 --> 00:00:13.920
However, how can we
give them more details?

00:00:13.920 --> 00:00:16.770
Users don't just want to know how long
it will take them to get somewhere,

00:00:16.770 --> 00:00:18.340
they also care about
how they'll get there.

00:00:19.400 --> 00:00:22.110
If I'm taking a subway to work every
day, I want to know that I'm not

00:00:22.110 --> 00:00:25.190
going to have to switch trains
three times, take a ferry, or

00:00:25.190 --> 00:00:28.220
maybe I want to see multiple options for
routes in case the service goes down.

00:00:29.450 --> 00:00:33.520
Luckily, we have the ability to get and
show the user the information they need

00:00:33.520 --> 00:00:36.510
about how they would travel
from their potential new home.

00:00:36.510 --> 00:00:37.900
The directions API,

00:00:37.900 --> 00:00:41.520
much like the distance matrix API,
gives us information about a journey.

00:00:42.660 --> 00:00:46.160
However, instead of just the time and
duration, it provides step-by-step

00:00:46.160 --> 00:00:50.930
directions from point A to point B, and
even to point C through Z if needed.

00:00:52.050 --> 00:00:54.100
Many of the same inputs can be used.

00:00:54.100 --> 00:00:58.930
The travel mode of either driving,
walking, bicycling or transit.

00:00:58.930 --> 00:01:01.994
Multiple transit modes such as bus or
train, and

00:01:01.994 --> 00:01:06.042
restrictions such as avoiding tolls,
highways, or ferries.

00:01:06.042 --> 00:01:09.400
Directions can specify origins,
destinations, and

00:01:09.400 --> 00:01:11.592
way points as either text strings.

00:01:11.592 --> 00:01:18.420
For example, Chicago or Sydney, or
as latitude-longitude coordinates.

00:01:18.420 --> 00:01:22.590
The directions API can return multi-port
directions using a series of way points

00:01:22.590 --> 00:01:23.300
or via points.

00:01:24.538 --> 00:01:26.870
We'll demonstrate their request and
response, again,

00:01:26.870 --> 00:01:28.880
through a web service
request within the browser.

00:01:30.040 --> 00:01:32.685
So once again,
we have the same URL route.

00:01:32.685 --> 00:01:35.536
We're using the direction
service this time, and

00:01:35.536 --> 00:01:38.530
we're specifying we want
our output in JSON format.

00:01:39.870 --> 00:01:42.160
Now, we need the required parameters.

00:01:42.160 --> 00:01:45.630
For directions API, we need a single
origin and destination pair.

00:01:45.630 --> 00:01:49.460
We can make them specific
like lat long coordinates, or

00:01:49.460 --> 00:01:52.330
very general like cities,
which would use then the city center.

00:01:53.510 --> 00:01:54.910
Finally, you need your API key.

00:01:56.650 --> 00:01:58.090
Before we look at the response,

00:01:58.090 --> 00:02:00.310
let's talk about other possible
inputs to this request.

00:02:01.980 --> 00:02:05.490
This particular request would default
the show as driving directions

00:02:05.490 --> 00:02:07.860
from the center of Brooklyn to
Google New York City office.

00:02:08.919 --> 00:02:09.660
As with before,

00:02:09.660 --> 00:02:13.450
we can optionally add in a travel
mode and a bunch of other things.

00:02:13.450 --> 00:02:16.210
The instructor notes has a link to our
documentation with a more complete list.

00:02:18.540 --> 00:02:21.630
Let's set our mode to transit since I'm
probably going to take the subway or

00:02:21.630 --> 00:02:22.140
bus to work.

00:02:23.270 --> 00:02:26.490
When I'm using transit, again,
I can specify the transit mode.

00:02:26.490 --> 00:02:27.540
For example, subway.

00:02:28.860 --> 00:02:32.330
I can also specify the transit
routing preference

00:02:32.330 --> 00:02:35.440
whether I want less transfers,
less walking, etc.

00:02:36.830 --> 00:02:40.180
I usually choose less walking contrary
to many of my Fitbit wearing friends.

00:02:41.460 --> 00:02:43.570
We can also again use bicycling so

00:02:43.570 --> 00:02:46.580
that we have a scenic
bike ride to the office.

00:02:46.580 --> 00:02:48.700
But if I do that,
I'm going to want to stop along the way.

00:02:49.930 --> 00:02:51.770
Luckily, I can add multiple waypoints.

00:02:53.340 --> 00:02:55.750
Let's say I wanted to stop
off at my favorite bakery,

00:02:55.750 --> 00:02:57.550
then continue on to work.

00:02:57.550 --> 00:03:01.800
I can use the waypoints parameter to
specify an additional destination,

00:03:01.800 --> 00:03:04.080
which is taken into account
as a stop in my route.

00:03:05.210 --> 00:03:07.990
Alternatively, if I just wanted
to pass by and smell the bakery,

00:03:07.990 --> 00:03:11.180
I can specify via instead of waypoints.

00:03:11.180 --> 00:03:14.880
And then my root wont consider an extra
leg, it'll just take me by the place.

00:03:16.000 --> 00:03:18.410
So let's execute this request and
see what kind of stuff we get back.

00:03:19.590 --> 00:03:23.800
First, I'm going to execute my transit
route with my subway specified and

00:03:23.800 --> 00:03:24.869
less walking specified.

00:03:26.290 --> 00:03:29.420
As with the rest of these service
requests, we get a status.

00:03:29.420 --> 00:03:31.320
Okay is the one we want.

00:03:31.320 --> 00:03:33.970
If the request would fail,
the status would not be okay, and

00:03:33.970 --> 00:03:35.520
you wouldn't see a route
in your response.

00:03:37.600 --> 00:03:40.200
Next, we'll see the geocoded waypoints.

00:03:40.200 --> 00:03:43.250
This is essentially taking our origin,
destination, and

00:03:43.250 --> 00:03:44.950
any additional waypoints and

00:03:44.950 --> 00:03:48.810
making sure the service was able to
successfully find that location.

00:03:48.810 --> 00:03:51.340
It gives us the lat longs as well.

00:03:51.340 --> 00:03:54.240
We only see two points here
since we had no waypoints.

00:03:54.240 --> 00:03:55.820
This is our origin and our destination.

00:03:57.250 --> 00:03:59.515
The next thing we'll see
is the root data itself.

00:03:59.515 --> 00:04:00.400
So let's expand this.

00:04:00.400 --> 00:04:04.885
There will only be one leg if you
didn't specify any waypoints, but

00:04:04.885 --> 00:04:09.435
the root will be split into multiple
legs if you did specify waypoints.

00:04:09.435 --> 00:04:16.065
Each leg has a duration and a distance,
and a start and end location.

00:04:16.065 --> 00:04:17.325
Each leg also has one or

00:04:17.325 --> 00:04:20.680
more steps, a step being
the smallest unit of instruction.

00:04:22.070 --> 00:04:24.380
For example,
walk to Kingston- Throop Avenue.

00:04:25.970 --> 00:04:28.970
Each step also has a distance and
a duration, so

00:04:28.970 --> 00:04:31.521
there's some very granular data here.

00:04:31.521 --> 00:04:34.226
Each leg also has an overview polyline.

00:04:34.226 --> 00:04:37.210
This is what will allow us to
display the root in our map.

00:04:39.110 --> 00:04:41.790
Finally, we see any warnings.

00:04:41.790 --> 00:04:44.040
For example, if there's no walking or
biking path,

00:04:44.040 --> 00:04:47.110
and you specified bicycling,
the response will tell you that.

00:04:48.640 --> 00:04:51.390
Let's execute our biking
request with the waypoint

00:04:51.390 --> 00:04:52.790
to see the difference in their response.

00:04:54.700 --> 00:04:57.897
So the first thing you'll notice is that
we have three geocoded waypoints here.

00:04:58.940 --> 00:05:02.410
One for origin, one for destination,
and one for our waypoint.

00:05:03.830 --> 00:05:07.530
We also have two legs,
unlike last time where we had one leg.

00:05:07.530 --> 00:05:11.200
The first leg here will be from
our origin to our waypoint,

00:05:11.200 --> 00:05:14.840
which is Tompkin Square Bagels,
by the way, it's delicious.

00:05:14.840 --> 00:05:17.870
The second leg will be from
the bakery to my office.

00:05:19.350 --> 00:05:21.490
As we talk about going from
point A to point B and

00:05:21.490 --> 00:05:25.820
making stops along the way, it sounds a
lot like the traveling salesman problem

00:05:25.820 --> 00:05:28.630
where he has to plan his journey to
cover a number of different clients

00:05:28.630 --> 00:05:30.730
at different locations in
the most efficient way.

00:05:31.780 --> 00:05:34.390
The good news is the directions
API can do that for you, too.

00:05:35.940 --> 00:05:39.780
Here, we'll execute walking
directions using three waypoints.

00:05:39.780 --> 00:05:41.860
Notice that they're pipe
delimited in this request.

00:05:43.820 --> 00:05:46.960
The response will have four legs, and

00:05:46.960 --> 00:05:50.860
the order of the points isn't the order
we specify them in the request.

00:05:53.460 --> 00:05:58.050
But you can add in the optimized true
prefix when you specify waypoints.

00:05:59.060 --> 00:06:01.170
What this does is it
will do the planning for

00:06:01.170 --> 00:06:03.880
you to cover all the stops
in the most optimized way.

00:06:05.030 --> 00:06:08.838
This means that the result may change
the order of the waypoints from how you

00:06:08.838 --> 00:06:11.026
originally provided them in the request.

00:06:11.026 --> 00:06:13.920
Notice now, the order is different.

00:06:13.920 --> 00:06:15.880
Our first address was 350 5th Ave,

00:06:15.880 --> 00:06:20.345
but our first stop is actually
going to be 165 Avenue A.

00:06:20.345 --> 00:06:21.360
It's optimized it for us.

