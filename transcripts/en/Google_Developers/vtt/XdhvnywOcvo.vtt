WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:01.550
TODD KERPELMAN: So if
you've been playing around

00:00:01.550 --> 00:00:03.250
with Google's new
sign-in library,

00:00:03.250 --> 00:00:05.110
you might have a few
follow-up questions,

00:00:05.110 --> 00:00:07.080
like can you use
this to identify

00:00:07.080 --> 00:00:08.720
the user to your server?

00:00:08.720 --> 00:00:11.300
How do you use it to authorize
services like Google Drive?

00:00:11.300 --> 00:00:13.292
And what's up with this
disconnect call anyway?

00:00:13.292 --> 00:00:15.250
And why did I choose to
represent our developer

00:00:15.250 --> 00:00:17.154
as a delicious little
green gummy person?

00:00:17.154 --> 00:00:19.820
Well, let's see if we can answer
some of these questions for you

00:00:19.820 --> 00:00:22.780
in this episode of "Route 85."

00:00:22.780 --> 00:00:25.750
[MUSIC PLAYING]

00:00:31.130 --> 00:00:31.630
Hi, there.

00:00:31.630 --> 00:00:33.879
I'm Todd Kerpelman, and let's
get into a little Google

00:00:33.879 --> 00:00:35.392
sign-in Q&amp;A, shall we?

00:00:35.392 --> 00:00:37.100
All right, we'll start
with a simple one.

00:00:37.100 --> 00:00:40.190
Question number one-- how can
I tell if my user has actually

00:00:40.190 --> 00:00:41.204
signed in?

00:00:41.204 --> 00:00:42.870
Well, this one's
pretty straightforward.

00:00:42.870 --> 00:00:44.619
Just check and see if
the GIDsignin.shared

00:00:44.619 --> 00:00:47.970
instance.currentuserobject
exists.

00:00:47.970 --> 00:00:50.490
If it does, then, yes, your
user has signed in, and if it

00:00:50.490 --> 00:00:52.470
doesn't, then, no, they haven't.

00:00:52.470 --> 00:00:54.350
OK, that was kind of
a warm-up question.

00:00:54.350 --> 00:00:57.120
Let's move on to something
a little more complicated.

00:00:57.120 --> 00:01:00.110
Question number two-- can I use
the new Google sign-in library

00:01:00.110 --> 00:01:01.680
for things like
authorizing my app

00:01:01.680 --> 00:01:04.459
to use other Google
services like Google Drive?

00:01:04.459 --> 00:01:07.200
The answer is yes, in
fact, you probably should.

00:01:07.200 --> 00:01:10.330
The new Google sign-in
library still uses OAuth 2.0.

00:01:10.330 --> 00:01:13.250
Meaning that you can use to
not only identify the user,

00:01:13.250 --> 00:01:15.670
but your user can also use
it to authorize your app

00:01:15.670 --> 00:01:17.510
to use a number of
different Google services

00:01:17.510 --> 00:01:18.880
on their behalf.

00:01:18.880 --> 00:01:21.400
How you do this depends a bit
on the other Google libraries

00:01:21.400 --> 00:01:23.274
you're using, but for
many of these libraries

00:01:23.274 --> 00:01:25.136
you're going to need
to do two things.

00:01:25.136 --> 00:01:26.760
First, add the scopes
you're requesting

00:01:26.760 --> 00:01:29.670
to the scopes array that's part
of the Google sign-in singleton

00:01:29.670 --> 00:01:30.369
instance.

00:01:30.369 --> 00:01:32.410
You can request things
like seeing what files are

00:01:32.410 --> 00:01:34.550
in your user's
Google Drive folder,

00:01:34.550 --> 00:01:37.320
asking for their Google+
profile information,

00:01:37.320 --> 00:01:40.290
viewing what events are on their
calendar, and much, much more.

00:01:40.290 --> 00:01:42.120
Now after a user has
signed in, you'll

00:01:42.120 --> 00:01:44.400
need to pass their OAuth
information to the library

00:01:44.400 --> 00:01:45.820
that you are using.

00:01:45.820 --> 00:01:48.970
In Google Drive's case, you can
grab your OAuth 2 authorizer

00:01:48.970 --> 00:01:51.770
by calling
authentication.fetcherauthorizer

00:01:51.770 --> 00:01:54.680
on your current user, and then
pass that along to your Google

00:01:54.680 --> 00:01:57.220
Drive service, kind of like so.

00:01:57.220 --> 00:01:59.020
At this point, your
Google Drive library

00:01:59.020 --> 00:02:01.120
is now properly
authorized, and you

00:02:01.120 --> 00:02:03.270
can use it to access
your user's drive folder,

00:02:03.270 --> 00:02:06.110
list files there, or do whatever
else your user has given you

00:02:06.110 --> 00:02:08.449
permission to do.

00:02:08.449 --> 00:02:09.630
I like "ALF."

00:02:09.630 --> 00:02:11.460
Don't judge.

00:02:11.460 --> 00:02:15.320
Question number three-- how do I
send my user's ID to my server?

00:02:15.320 --> 00:02:17.210
So once a user is
signed into Google,

00:02:17.210 --> 00:02:18.780
you get back their
user ID, which

00:02:18.780 --> 00:02:21.280
you're free to use on the
client to identify them.

00:02:21.280 --> 00:02:22.738
Now, you might
think that you could

00:02:22.738 --> 00:02:25.860
use this ID to send information
about your user to the server.

00:02:25.860 --> 00:02:28.362
But, in fact, this would
be a terrible idea.

00:02:28.362 --> 00:02:30.570
The issue is that you should
never trust your client.

00:02:30.570 --> 00:02:32.820
An evil-doer could very
easily hack your client

00:02:32.820 --> 00:02:35.710
or create a fake client to
send down a similar request,

00:02:35.710 --> 00:02:37.790
but use somebody else's user ID.

00:02:37.790 --> 00:02:40.530
Now if your server were to
trust that user ID blindly,

00:02:40.530 --> 00:02:43.480
you could end up leaking a whole
bunch of sensitive information.

00:02:43.480 --> 00:02:44.530
That's bad.

00:02:44.530 --> 00:02:47.320
So instead, you'll notice that
in addition to the user ID,

00:02:47.320 --> 00:02:49.810
Google sign-in also provides
this giant string known

00:02:49.810 --> 00:02:51.392
as an ID token.

00:02:51.392 --> 00:02:53.600
This giant string, which
really looks more like this,

00:02:53.600 --> 00:02:54.790
contains three sections.

00:02:54.790 --> 00:02:57.580
You've got a small header,
some data about the user, which

00:02:57.580 --> 00:02:59.690
includes things
like your user's ID,

00:02:59.690 --> 00:03:02.220
this application that
this ID token is for,

00:03:02.220 --> 00:03:04.782
and a signature provided
by Google servers.

00:03:04.782 --> 00:03:06.490
You can basically
think of this signature

00:03:06.490 --> 00:03:09.010
as a hash that confirms that
everything in the data portion

00:03:09.010 --> 00:03:10.290
here is accurate.

00:03:10.290 --> 00:03:12.510
If an evil hacker tried
to change this data,

00:03:12.510 --> 00:03:15.640
the signature wouldn't match up,
and the token would be invalid.

00:03:15.640 --> 00:03:16.900
So here's how this would work.

00:03:16.900 --> 00:03:19.540
Your app would send this ID
token down to your server.

00:03:19.540 --> 00:03:22.550
Your server would then verify
that this ID token looks legit,

00:03:22.550 --> 00:03:24.182
and there are two
ways of doing this.

00:03:24.182 --> 00:03:25.890
You can pass it along
to Google to verify

00:03:25.890 --> 00:03:28.490
for you, which is easy to
do, but takes a bit of time,

00:03:28.490 --> 00:03:30.170
because it involves
a network call,

00:03:30.170 --> 00:03:33.090
or you can verify it yourself
on your own servers, which

00:03:33.090 --> 00:03:35.680
is a whole lot faster, but
requires a little more code.

00:03:35.680 --> 00:03:37.690
Luckily we have libraries
for you to do this,

00:03:37.690 --> 00:03:39.419
and I recommend you use them.

00:03:39.419 --> 00:03:41.710
Don't try and reinvent the
wheel yourself, particularly

00:03:41.710 --> 00:03:43.510
where security is involved.

00:03:43.510 --> 00:03:46.410
Either way, once you've verified
that this ID token is, in fact,

00:03:46.410 --> 00:03:48.550
legit, and it's
intended for your app,

00:03:48.550 --> 00:03:50.340
and it was issued
somewhat recently,

00:03:50.340 --> 00:03:53.250
you can then extract the
user's ID from this ID token

00:03:53.250 --> 00:03:55.840
and feel confident that
your user is really

00:03:55.840 --> 00:03:57.234
who they say they are.

00:03:57.234 --> 00:03:59.650
Now, at this point, I'd probably
have your server generate

00:03:59.650 --> 00:04:01.810
its own random string to
send back to your client,

00:04:01.810 --> 00:04:04.300
and maybe you can use that as
a way to identify your user,

00:04:04.300 --> 00:04:07.330
rather than verifying this
ID token every single call.

00:04:07.330 --> 00:04:09.510
But, you know, it's up to you.

00:04:09.510 --> 00:04:11.770
Question number four--
what's up with these access

00:04:11.770 --> 00:04:13.000
token methods?

00:04:13.000 --> 00:04:15.680
So, if you've been perusing our
reference documentation, which

00:04:15.680 --> 00:04:17.589
is how I like to spend
my Friday nights,

00:04:17.589 --> 00:04:19.980
you might notice we have
some methods like these.

00:04:19.980 --> 00:04:22.320
What are they, and when
do you need to use them?

00:04:22.320 --> 00:04:25.180
Well, the short answer is
almost never these days.

00:04:25.180 --> 00:04:28.067
Back before you could easily get
this fetcher authorizer object

00:04:28.067 --> 00:04:30.150
to do things like enable
the Google Drive service,

00:04:30.150 --> 00:04:32.192
like I talked about
in question two,

00:04:32.192 --> 00:04:34.400
you might have used these
calls to manually authorize

00:04:34.400 --> 00:04:36.100
the Google Drive
service on your own.

00:04:36.100 --> 00:04:38.183
But now you don't even
need them for that anymore.

00:04:38.183 --> 00:04:40.570
So the best answer is don't
worry about these calls.

00:04:40.570 --> 00:04:42.700
Much like job titles
at a start-up company,

00:04:42.700 --> 00:04:46.190
they're not necessarily as
important as they sound.

00:04:46.190 --> 00:04:49.130
Hm, hey, can we amp
that up a little bit?

00:04:49.130 --> 00:04:54.041
Mm, a little bit more, more--
oh, yeah, that's the stuff.

00:04:54.041 --> 00:04:54.540
That's good.

00:04:54.540 --> 00:04:55.880
I like that.

00:04:55.880 --> 00:04:58.740
Question number five-- what's
the difference between sign-out

00:04:58.740 --> 00:05:00.120
and disconnect?

00:05:00.120 --> 00:05:01.830
So in the previous
video, you saw

00:05:01.830 --> 00:05:03.830
me sign the user out by
calling GIDsignin.shared

00:05:03.830 --> 00:05:06.540
instance.signout, right?

00:05:06.540 --> 00:05:09.460
Now, this call basically removes
all locally stored information

00:05:09.460 --> 00:05:11.976
that Google has about
this user's identity.

00:05:11.976 --> 00:05:13.600
The sign-in library
simply doesn't know

00:05:13.600 --> 00:05:14.960
anything about them anymore.

00:05:14.960 --> 00:05:16.400
This is nearly instantaneous.

00:05:16.400 --> 00:05:17.660
It's all just local data.

00:05:17.660 --> 00:05:20.305
No network calls are needed,
so there's no call back.

00:05:20.305 --> 00:05:21.680
So right after
calling it, you're

00:05:21.680 --> 00:05:24.013
probably going to want to do
your own purging of locally

00:05:24.013 --> 00:05:27.120
stored information
associated with that account.

00:05:27.120 --> 00:05:29.320
But then if you check
around our documentation,

00:05:29.320 --> 00:05:31.590
you'll notice we have
a disconnect call along

00:05:31.590 --> 00:05:34.090
with this did disconnect
with error delegate method.

00:05:34.090 --> 00:05:36.056
So what are those all about?

00:05:36.056 --> 00:05:37.430
Well, the idea
with disconnect is

00:05:37.430 --> 00:05:40.610
there are times your user wants
to stay signed into your app,

00:05:40.610 --> 00:05:42.590
but they no longer want
their Google identity

00:05:42.590 --> 00:05:44.437
associated with that account.

00:05:44.437 --> 00:05:46.770
A typical situation might be
where you've got [? Nap, ?]

00:05:46.770 --> 00:05:48.750
where you're managing
sign-in some other way.

00:05:48.750 --> 00:05:50.550
Maybe you have your
own account system,

00:05:50.550 --> 00:05:52.580
but you're still using
Google sign-in so

00:05:52.580 --> 00:05:55.320
that you can, for example, get
access to your user's Google

00:05:55.320 --> 00:05:56.549
Drive content.

00:05:56.549 --> 00:05:58.590
Well, this user might want
to say, hey, you know,

00:05:58.590 --> 00:06:00.196
I'd like to stay
signed into your app.

00:06:00.196 --> 00:06:02.570
I just don't want to give you
access to my Google account

00:06:02.570 --> 00:06:03.222
anymore.

00:06:03.222 --> 00:06:05.680
So we want to wipe out the
stuff associated with the Google

00:06:05.680 --> 00:06:06.430
account.

00:06:06.430 --> 00:06:07.270
And for that you're
going to want

00:06:07.270 --> 00:06:08.585
to add a disconnect feature.

00:06:08.585 --> 00:06:10.960
This is typically something
you might put in a My Account

00:06:10.960 --> 00:06:12.460
screen somewhere.

00:06:12.460 --> 00:06:13.970
So disconnect is
a way for a user

00:06:13.970 --> 00:06:17.300
to break the ties between your
app and their Google account.

00:06:17.300 --> 00:06:19.690
Calling disconnect does
involve a network call

00:06:19.690 --> 00:06:22.160
to Google servers, so
there is a delegate method

00:06:22.160 --> 00:06:25.192
that gets called on your client
when the process is finished.

00:06:25.192 --> 00:06:26.650
Now, in this
callback, you're going

00:06:26.650 --> 00:06:29.233
to want to remove any data that
was retrieved through Google's

00:06:29.233 --> 00:06:32.030
APIs-- both locally,
as well as anything

00:06:32.030 --> 00:06:33.880
that is stored on your servers.

00:06:33.880 --> 00:06:36.320
Now disconnecting, it's not
particularly common case,

00:06:36.320 --> 00:06:37.779
but it is important
to have, and so

00:06:37.779 --> 00:06:39.236
that's why you see
it mentioned all

00:06:39.236 --> 00:06:40.550
throughout the documentation.

00:06:40.550 --> 00:06:42.550
But again, don't confuse
it with signing out.

00:06:42.550 --> 00:06:44.474
They're two very
different things.

00:06:44.474 --> 00:06:46.390
So there you have it,
some important questions

00:06:46.390 --> 00:06:48.791
around the new Google sign-in
library answered for you.

00:06:48.791 --> 00:06:51.040
If you have other questions
about the sign-in library,

00:06:51.040 --> 00:06:53.167
well, you know, you can
go read the documentation.

00:06:53.167 --> 00:06:54.750
That is what it's
there for, you know.

00:06:54.750 --> 00:06:56.330
But you could also leave
them in the comments below

00:06:56.330 --> 00:06:58.280
and maybe we will
take a look at them.

00:06:58.280 --> 00:07:00.910
As always, thanks for watching,
and I will see you soon

00:07:00.910 --> 00:07:02.040
on "Route 85."

00:07:02.040 --> 00:07:03.590
[MUSIC PLAYING]

