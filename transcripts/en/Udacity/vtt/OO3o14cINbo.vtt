WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.040
So how do we parallelize scan?

00:00:03.040 --> 00:00:06.130
Let's first start with
the prefix sum problem.

00:00:06.130 --> 00:00:09.670
Once we understand that we'll have
a pattern for parallelizing any scan.

00:00:10.710 --> 00:00:14.040
By analogy to reducing
an array to a single value,

00:00:14.040 --> 00:00:18.530
if we assume associativity,
then we can rearrange partial sums.

00:00:18.530 --> 00:00:22.480
So somehow we want to use this idea for
parallelizing scan as well.

00:00:22.480 --> 00:00:26.200
So assume associativity and
consider a scan of this input array.

00:00:27.380 --> 00:00:30.260
You could try by doing the same
thing you did in a reduction, for

00:00:30.260 --> 00:00:33.640
example let's take every pair of
elements and let's combine them.

00:00:34.960 --> 00:00:39.290
The result will be a new set
of partial consecutive sums.

00:00:39.290 --> 00:00:43.122
For example,
this node is the sum from 1 to 2 and

00:00:43.122 --> 00:00:46.540
this node is the sum from 3 to 4.

00:00:46.540 --> 00:00:51.680
In fact let me label each intermediate
sum with a notation A colon B.

00:00:52.740 --> 00:00:56.420
The important point is that these
are consecutive partial sums.

00:00:56.420 --> 00:01:00.220
So with this notation, this is what
the final output should look like so

00:01:00.220 --> 00:01:01.720
let's go back to the partial sums.

00:01:02.760 --> 00:01:04.040
Suppose you could magically and

00:01:04.040 --> 00:01:07.580
recursively do an add
scan on the partial sums.

00:01:07.580 --> 00:01:10.340
That is,
I take these partial sum values and

00:01:10.340 --> 00:01:13.060
I somehow magically
apply a scan to them.

00:01:13.060 --> 00:01:14.270
What would I get?

00:01:14.270 --> 00:01:18.540
In this case I would get 1:2
as the first scan element.

00:01:18.540 --> 00:01:23.227
Then for the second scan element
I would get 1:2 plus 3:4.

00:01:23.227 --> 00:01:25.688
In other words, 1:4.

00:01:25.688 --> 00:01:30.480
And for the third element,
I get 1:2 plus 3:4 plus 5:6.

00:01:30.480 --> 00:01:32.102
In other words, 1:6.

00:01:32.102 --> 00:01:33.830
And then finally, 1:8.

00:01:33.830 --> 00:01:38.400
Notice what that gives you,
all of the even results.

00:01:38.400 --> 00:01:40.934
So, voila.
We've done half the work.

00:01:40.934 --> 00:01:42.815
Now what about the odd results?

00:01:42.815 --> 00:01:44.231
How do we get those?

00:01:44.231 --> 00:01:45.439
Well, that should be easy.

00:01:45.439 --> 00:01:49.653
If I went 1:3,
I just take 1:2 and add 3.

00:01:49.653 --> 00:01:52.790
You can do the same thing for
1:5 and 1:7.

00:01:52.790 --> 00:01:53.370
Voila.

00:01:53.370 --> 00:01:54.760
You're done.

00:01:54.760 --> 00:01:56.960
Stop for a second and
make sure that that makes sense.

00:01:58.930 --> 00:02:02.290
Now I claim here's some pseudo code
that implements this scheme we just

00:02:02.290 --> 00:02:03.640
described.

00:02:03.640 --> 00:02:06.308
Let's do a quick analysis to
make sure we got it right.

00:02:06.308 --> 00:02:12.503
Now here I sub O and I sub E store
the odd and even indices respectively,

00:02:12.503 --> 00:02:18.279
that is, 1, 3, 5, 7 and so
on and 2, 4, 6, 8 and so on.

00:02:18.279 --> 00:02:21.704
Now this particular algorithm
is in place adding the odd and

00:02:21.704 --> 00:02:25.550
even elements over here
corresponds to this line.

00:02:25.550 --> 00:02:29.289
By in place, I mean we take this result
and we overwrite the even elements.

00:02:30.310 --> 00:02:32.270
This magic recursive step appears here.

00:02:33.660 --> 00:02:35.800
And this final combine
step appears here.

00:02:38.150 --> 00:02:41.640
Now, note that I've used this python
slicing notation to mean starting at

00:02:41.640 --> 00:02:43.650
element 2 and
going to the end of the array.

00:02:44.820 --> 00:02:48.560
If you can convince yourself that n
equals 1 produces the correct result,

00:02:48.560 --> 00:02:51.480
then you can use induction to prove
that the overall algorithm is correct.

