WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Norvig] And the answer is that all 3 of them would work just fine.

00:00:03.000 --> 00:00:05.000
We could make it work in all cases.

00:00:05.000 --> 00:00:07.000
It makes the necessary distinction.

00:00:07.000 --> 00:00:13.000
And in each of these cases, the entries in this column

00:00:13.000 --> 00:00:16.000
are greater than the entries in this column,

00:00:16.000 --> 00:00:18.000
and so max could do the job.

00:00:18.000 --> 00:00:24.000
But it seems to me that the case with tuples is the most convenient.

00:00:24.000 --> 00:00:29.000
Here with these integers or reals we'd have to be doing very complicated arithmetic

00:00:29.000 --> 00:00:34.000
to add things up and then break them apart to make sure we got the right answer.

00:00:34.000 --> 00:00:36.000
But with the tuples it's simple.

00:00:36.000 --> 00:00:38.000
We just use a comma operator.

00:00:38.000 --> 00:00:44.000
We say start with a 7, add in what we have 4 of a kind in,

00:00:44.000 --> 00:00:50.000
add in what we have the remaining 1 card of, and that gives you the 3 values,

00:00:50.000 --> 00:00:53.000
and we don't have to deal with any complicated arithmetic.

00:00:53.000 --> 00:00:59.000
Now, if you aren't familiar with tuples, you might want a little bit of practice

00:00:59.000 --> 00:01:02.000
to understand how they work.

00:01:02.000 --> 00:01:14.000
We said that 7, 9, 5 is greater than 7, 3, 2.

00:01:14.000 --> 00:01:18.000
So in other words, this expression is a true expression in Python.

00:01:18.000 --> 00:01:22.000
And the way the evaluation works is you first look at the first element.

00:01:22.000 --> 00:01:25.000
If one of them is greater, then that element is greater.

00:01:25.000 --> 00:01:28.000
If they're the same, then you go on to the second element.

00:01:28.000 --> 00:01:32.000
So in this case, 7 is equal to 7 so we move on.

00:01:32.000 --> 00:01:38.000
9 is greater than 3, and so that means this guy is greater than that guy.

00:01:38.000 --> 00:01:43.000
You may have seen a similar type of thing in ordering between strings.

00:01:43.000 --> 00:01:54.000
So we can have the string 'hello' and compare that to the string 'help',

00:01:54.000 --> 00:01:57.000
and we do it in exactly the same way that we compare tuples.

00:01:57.000 --> 00:01:59.000
We go left to right.

00:01:59.000 --> 00:02:04.000
H compares to h. They're the same, so we move on to the next character.

00:02:04.000 --> 00:02:08.000
E compares to e. They're the same, so we move on to the next.

00:02:08.000 --> 00:02:11.000
L is equal to l. Move on.

00:02:11.000 --> 00:02:17.000
And here we have an l and a p, and p comes later in the alphabet than l,

00:02:17.000 --> 00:02:23.000
so help would be greater than hello, or hello would be less than help.

00:02:23.000 --> 00:02:30.000
The same type of idea, and this is known as lexigraphic ordering.

00:02:30.000 --> 00:02:33.000
It's so called because lex meaning words.

00:02:33.000 --> 00:02:36.000
This is the way that words are ordered.

00:02:36.000 --> 00:02:39.000
But we use the same name when we're comparing strings

00:02:39.000 --> 09:59:59.000
or when we're comparing lists of numbers or lists of any other type of value.

