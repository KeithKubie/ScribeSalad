WEBVTT
Kind: captions
Language: en

00:00:00.052 --> 00:00:01.510
RETO MEIER: Using
instant run is as

00:00:01.510 --> 00:00:03.750
simple as pressing Run or
Debug with the lightning

00:00:03.750 --> 00:00:06.450
bolt displayed, after
making incremental changes

00:00:06.450 --> 00:00:08.560
since your last
build and deploy.

00:00:08.560 --> 00:00:10.060
When something's
simple and helpful,

00:00:10.060 --> 00:00:12.440
most people are
satisfied with that.

00:00:12.440 --> 00:00:13.190
Hey, Wayne.

00:00:13.190 --> 00:00:13.690
WAYNE: Hey.

00:00:13.690 --> 00:00:15.000
RETO MEIER: Here you go.

00:00:15.000 --> 00:00:15.970
WAYNE: Oh, what's that?

00:00:15.970 --> 00:00:17.678
RETO MEIER: It's an
automatic dog feeder.

00:00:17.678 --> 00:00:19.862
It makes it faster and
easier to feed your pets.

00:00:19.862 --> 00:00:21.557
WAYNE: Hmm, nice, nice.

00:00:21.557 --> 00:00:22.890
RETO MEIER: But we're engineers.

00:00:22.890 --> 00:00:24.331
We're not normal people.

00:00:24.331 --> 00:00:26.016
Uhh, Wayne?

00:00:26.016 --> 00:00:26.640
WAYNE: Oh, hey.

00:00:26.640 --> 00:00:26.910
Yeah.

00:00:26.910 --> 00:00:28.480
I think I understand
the mechanism for this

00:00:28.480 --> 00:00:29.979
and I think I know
how it works now.

00:00:29.979 --> 00:00:31.840
RETO MEIER: Huh.

00:00:31.840 --> 00:00:34.430
So let's take a look under
the hood of Instant Run

00:00:34.430 --> 00:00:36.390
and see how it actually works.

00:00:36.390 --> 00:00:37.270
I'm Reto Meier.

00:00:37.270 --> 00:00:38.940
This is an Android
Tool Time Deep Dive.

00:00:38.940 --> 00:00:40.390
And this is Instant Run.

00:00:44.250 --> 00:00:46.840
Instant Run minimizes the
time taken to build and deploy

00:00:46.840 --> 00:00:49.300
incremental changes to your
app when you run the debug

00:00:49.300 --> 00:00:51.160
variant of your project.

00:00:51.160 --> 00:00:53.426
Rather than doing a full
build, stopping the app,

00:00:53.426 --> 00:00:55.050
re-installing, and
then relaunching it,

00:00:55.050 --> 00:00:57.960
Instant Run tries to only
deploy changes, avoid

00:00:57.960 --> 00:00:59.760
restarting or
reinstalling the app,

00:00:59.760 --> 00:01:01.830
or even restarting the activity.

00:01:01.830 --> 00:01:03.910
There are three variations
to Instant Run--

00:01:03.910 --> 00:01:06.760
a hot, warm, or cold swap.

00:01:06.760 --> 00:01:08.700
Understanding what
does happen and why

00:01:08.700 --> 00:01:10.535
will help you take full
advantage of Instant

00:01:10.535 --> 00:01:12.520
Run and to understand
its limitations

00:01:12.520 --> 00:01:14.970
and how your code
changes affect it.

00:01:14.970 --> 00:01:19.120
This is a very simplified look
at the Android build process.

00:01:19.120 --> 00:01:21.300
Your manifest files are
merged and packaged along

00:01:21.300 --> 00:01:23.600
with your apps
resources into an APK.

00:01:23.600 --> 00:01:26.340
Similarly, the Java files
are compiled into bicode

00:01:26.340 --> 00:01:27.840
and then converted
to DEX files that

00:01:27.840 --> 00:01:30.110
are also included in the APK.

00:01:30.110 --> 00:01:32.060
First, it adds bicode
instrumentation

00:01:32.060 --> 00:01:34.750
to your class files so we
can replace code on the fly

00:01:34.750 --> 00:01:36.310
when we update it later.

00:01:36.310 --> 00:01:37.930
And it adds a new
app server class

00:01:37.930 --> 00:01:40.770
that will run within your
debug app in which the IDE will

00:01:40.770 --> 00:01:42.340
be used to transmit
code changes that

00:01:42.340 --> 00:01:44.250
will be applied at runtime.

00:01:44.250 --> 00:01:45.980
Gradle also modifies
the application

00:01:45.980 --> 00:01:48.800
manifest to inject a
new application class.

00:01:48.800 --> 00:01:51.290
This will proxy your own
custom application class,

00:01:51.290 --> 00:01:54.150
if you are using one, and
injects custom class loaders

00:01:54.150 --> 00:01:57.560
that allow us to apply the
real time code changes.

00:01:57.560 --> 00:01:59.760
From now on, when you
hit Run Android Studio

00:01:59.760 --> 00:02:02.250
checks if there is an open
socket to a server running

00:02:02.250 --> 00:02:04.880
within your app and,
if so, uses that socket

00:02:04.880 --> 00:02:06.940
to confirm that this is
an Instant Run enabled

00:02:06.940 --> 00:02:09.770
version of your app running in
the foreground of that target

00:02:09.770 --> 00:02:10.930
device.

00:02:10.930 --> 00:02:12.390
It will then check
the app's build

00:02:12.390 --> 00:02:14.390
ID to make sure it's
the version it expects

00:02:14.390 --> 00:02:16.430
before sending any changes.

00:02:16.430 --> 00:02:18.430
While you're developing,
Android Studio

00:02:18.430 --> 00:02:21.230
monitors which files have
changed and, based on that,

00:02:21.230 --> 00:02:24.570
runs a custom Gradle task that
creates a DEX file for only

00:02:24.570 --> 00:02:27.090
the changed classes.

00:02:27.090 --> 00:02:29.560
That new DEX file is picked
up by Android Studio which

00:02:29.560 --> 00:02:32.900
deploys it to the app server we
injected into the running app.

00:02:32.900 --> 00:02:36.050
The app server uses the custom
class loaders to load and apply

00:02:36.050 --> 00:02:38.050
the updated classes.

00:02:38.050 --> 00:02:40.460
But, of course, the old
versions of those classes

00:02:40.460 --> 00:02:42.760
already exist in the running
instance of your app.

00:02:42.760 --> 00:02:46.490
So Gradle has transformed the
updated versions to override

00:02:46.490 --> 00:02:48.810
the preexisting classes.

00:02:48.810 --> 00:02:50.850
The app server then
uses the instrumentation

00:02:50.850 --> 00:02:52.730
that we injected into
our original classes

00:02:52.730 --> 00:02:55.810
to delegate each method call
to the new override classes

00:02:55.810 --> 00:02:57.640
that we've just loaded.

00:02:57.640 --> 00:02:59.680
From now on, each time
the affected method

00:02:59.680 --> 00:03:02.800
gets called anywhere within
our app, the new modified

00:03:02.800 --> 00:03:05.280
version of the method
will get called instead.

00:03:05.280 --> 00:03:07.650
If you set breakpoints or
look at your stack trace,

00:03:07.650 --> 00:03:11.570
you'll actually see the override
named classes, methods called,

00:03:11.570 --> 00:03:13.220
within your stack.

00:03:13.220 --> 00:03:15.430
OK, so that takes
care of our hot swap.

00:03:15.430 --> 00:03:17.330
So when do we need to warm swap?

00:03:17.330 --> 00:03:19.640
And what is a warm swap?

00:03:19.640 --> 00:03:22.200
A warm swap restarts
the activity.

00:03:22.200 --> 00:03:23.950
When we do things like
changing resources,

00:03:23.950 --> 00:03:27.360
the restart is needed to
reload the affected resources.

00:03:27.360 --> 00:03:30.070
Right now that means
changing any resource results

00:03:30.070 --> 00:03:32.440
in all of them being
repackaged and resent.

00:03:32.440 --> 00:03:34.870
But we're working on an
incremental packager that

00:03:34.870 --> 00:03:38.330
will only package and
deploy changed resources.

00:03:38.330 --> 00:03:41.130
That said, warm swap
won't work for changes

00:03:41.130 --> 00:03:44.140
to resources that are referenced
within the manifest or changes

00:03:44.140 --> 00:03:45.841
to the manifest itself.

00:03:45.841 --> 00:03:47.840
That's because the values
read from the manifest

00:03:47.840 --> 00:03:50.360
are determined when
the APK is installed.

00:03:50.360 --> 00:03:52.630
So you need a reinstallation
before those changes

00:03:52.630 --> 00:03:54.430
can be seen.

00:03:54.430 --> 00:03:57.460
So changing the string resource
used to define the app name

00:03:57.460 --> 00:03:59.530
or drawable representing
the app icon

00:03:59.530 --> 00:04:02.030
aren't supported
within Instant Run.

00:04:02.030 --> 00:04:04.570
So far we've looked at warm
swap, stopped at resources,

00:04:04.570 --> 00:04:07.000
and, before that, hot
swaps that override methods

00:04:07.000 --> 00:04:08.380
within your running app.

00:04:08.380 --> 00:04:10.100
But what about
structural changes that

00:04:10.100 --> 00:04:13.340
can't be applied simply
by calling a method again,

00:04:13.340 --> 00:04:16.560
like adding, removing, or
changing annotations, fields,

00:04:16.560 --> 00:04:18.230
static or instant
method signatures,

00:04:18.230 --> 00:04:21.420
or changing parent classes
or static initializers?

00:04:21.420 --> 00:04:24.350
These cases require an
application restart using,

00:04:24.350 --> 00:04:26.390
where possible, a cold swap.

00:04:26.390 --> 00:04:29.360
Cold swaps supply code changes
by sending new DEX files that

00:04:29.360 --> 00:04:32.050
are small slices containing
only the effective classes

00:04:32.050 --> 00:04:34.980
to the target device
before restarting the app.

00:04:34.980 --> 00:04:37.731
As a result, cold swaps depend
on an app loading multiple DEX

00:04:37.731 --> 00:04:38.230
files.

00:04:38.230 --> 00:04:40.630
So that requires
ART, which is only

00:04:40.630 --> 00:04:44.020
guaranteed available on devices
running Android 5.0 or API

00:04:44.020 --> 00:04:47.440
level 21 or higher.

00:04:47.440 --> 00:04:50.100
The target devices running
API level 20 or lower,

00:04:50.100 --> 00:04:51.900
and possibly using
the Delphic runtime,

00:04:51.900 --> 00:04:55.500
Android Studio
deploys a full APK.

00:04:55.500 --> 00:04:56.820
Instant Run tries to be clever.

00:04:56.820 --> 00:04:58.590
But it can't turn back time.

00:04:58.590 --> 00:05:00.810
If you make code changes
that affect initializers

00:05:00.810 --> 00:05:03.580
that will run when the
application was first started,

00:05:03.580 --> 00:05:06.860
you'll need to restart your app
for the changes to take effect.

00:05:06.860 --> 00:05:09.330
To perform an incremental
build and restart the app,

00:05:09.330 --> 00:05:11.240
click Rerun.

00:05:11.240 --> 00:05:13.890
If you want to stop everything
and redeploy a clean build,

00:05:13.890 --> 00:05:16.680
select Run and then
Clean and Rerun App.

00:05:16.680 --> 00:05:19.850
To stop the running app,
perform a clean build and deploy

00:05:19.850 --> 00:05:22.580
a new APK to the target device.

00:05:22.580 --> 00:05:25.700
So is knowing how it works
enough for an engineer?

00:05:25.700 --> 00:05:26.900
Let's check in with Wayne.

00:05:26.900 --> 00:05:28.630
WAYNE: I've replaced the
mechanism with a Brillo board.

00:05:28.630 --> 00:05:30.588
I think I can make this
thing internet-enabled.

00:05:33.720 --> 00:05:35.334
RETO MEIER: That's
what I thought.

00:05:35.334 --> 00:05:36.750
In that spirit,
let's look at ways

00:05:36.750 --> 00:05:38.291
you can tweak your
use of Instant Run

00:05:38.291 --> 00:05:40.270
to get the absolute
most out of it.

00:05:40.270 --> 00:05:42.180
Instant Run is controlled
by Android Studios.

00:05:42.180 --> 00:05:44.810
So you need to start and
restart your debug instance

00:05:44.810 --> 00:05:46.021
from the IDE.

00:05:46.021 --> 00:05:48.520
Don't start and restart your
app from the device or emulator

00:05:48.520 --> 00:05:51.222
or things will get out
of whack really quickly.

00:05:51.222 --> 00:05:52.680
Let's start by
improving those full

00:05:52.680 --> 00:05:56.402
build times by tweaking the
resources allocated to DEX.

00:05:56.402 --> 00:05:58.610
You can edit your project's
Gradle or properties file

00:05:58.610 --> 00:06:01.390
to increase the maximum heap
size of the Gradle daemon

00:06:01.390 --> 00:06:03.440
to enable DEX in process.

00:06:03.440 --> 00:06:04.800
The default here is 1 gig.

00:06:04.800 --> 00:06:07.310
So set it to at least
2, index and process

00:06:07.310 --> 00:06:09.860
will be enabled allowing
multiple DEX processes

00:06:09.860 --> 00:06:13.190
to run within a single VM
that's also shared with Gradle

00:06:13.190 --> 00:06:15.820
and significantly
increases build speeds.

00:06:15.820 --> 00:06:19.225
If you've increased the Java max
heap size in your module level

00:06:19.225 --> 00:06:21.395
build.gradle file from
the default of 1 gig,

00:06:21.395 --> 00:06:23.770
you'll need to increase the
Gradle daemon to the end size

00:06:23.770 --> 00:06:25.160
accordingly.

00:06:25.160 --> 00:06:27.894
Thanks to support in ART
for multiple DEX loading,

00:06:27.894 --> 00:06:29.810
you'll get the best
performance of Instant Run

00:06:29.810 --> 00:06:33.130
by setting your mean SDK
version to 21 or higher.

00:06:33.130 --> 00:06:35.300
If your app supports
earlier platform versions,

00:06:35.300 --> 00:06:37.520
it may be worth creating
a new product flavor that

00:06:37.520 --> 00:06:40.734
sets your min SDK to 21
for your debugging cycles,

00:06:40.734 --> 00:06:43.150
so you can take full advantage
of the enhanced Instant Run

00:06:43.150 --> 00:06:44.280
support.

00:06:44.280 --> 00:06:46.610
Also remember that any
changes to the manifest

00:06:46.610 --> 00:06:49.660
will necessitate a full
build and deploy cycle.

00:06:49.660 --> 00:06:51.760
So if your build
process automatically

00:06:51.760 --> 00:06:54.380
updates any part of the
app manifest, for example,

00:06:54.380 --> 00:06:57.160
automatically iterating
version code or version name,

00:06:57.160 --> 00:06:59.880
consider disabling those
automatic updates in your debug

00:06:59.880 --> 00:07:01.480
build variance.

00:07:01.480 --> 00:07:04.180
Instant Run currently only
instruments the main process.

00:07:04.180 --> 00:07:06.360
So if your app uses
multiple processes,

00:07:06.360 --> 00:07:09.260
hot and warm swaps on
those other processes

00:07:09.260 --> 00:07:11.580
will degrade to cold
swaps, or full builds,

00:07:11.580 --> 00:07:14.550
if you're targeting an
API level less than 21.

00:07:14.550 --> 00:07:17.160
Remember that hot swapping
doesn't re-initialize objects,

00:07:17.160 --> 00:07:19.210
rerun class
initializers, or modify

00:07:19.210 --> 00:07:21.610
data that's already been
saved or transferred,

00:07:21.610 --> 00:07:23.970
anything that has already
run and won't be rerun

00:07:23.970 --> 00:07:25.780
without the app restarting.

00:07:25.780 --> 00:07:27.970
It's not always possible
for Android Studio

00:07:27.970 --> 00:07:29.130
to know when that happens.

00:07:29.130 --> 00:07:30.830
So remember to
restart your activity,

00:07:30.830 --> 00:07:32.340
or restart the
app, when you know

00:07:32.340 --> 00:07:34.754
your changes will require it.

00:07:34.754 --> 00:07:36.170
If you're on
Windows, you may find

00:07:36.170 --> 00:07:38.210
that Windows Defender
real-time protection is

00:07:38.210 --> 00:07:39.892
causing Instant Run slowdowns.

00:07:39.892 --> 00:07:42.100
You can get around that by
adding your project folder

00:07:42.100 --> 00:07:45.120
to the list of Windows
Defender exclusions.

00:07:45.120 --> 00:07:46.740
As of this recording,
Instant Run

00:07:46.740 --> 00:07:49.590
doesn't support Jack,
instrumentation tests,

00:07:49.590 --> 00:07:52.560
or deploying to multiple
devices simultaneously.

00:07:52.560 --> 00:07:55.137
But Instant Run is
constantly evolving

00:07:55.137 --> 00:07:56.720
with the team exploring
new techniques

00:07:56.720 --> 00:07:59.370
to maximize the number of cases
that allow for a hot swap,

00:07:59.370 --> 00:08:02.250
and minimizing the need for
cold swaps or full deploy

00:08:02.250 --> 00:08:03.877
and install cycles.

00:08:03.877 --> 00:08:05.960
And you can always find
the latest tips and tricks

00:08:05.960 --> 00:08:09.859
on optimizing Instant Run on the
Android Studio documentation.

00:08:09.859 --> 00:08:11.400
You can also explore
the cutting edge

00:08:11.400 --> 00:08:14.790
by subscribing to the Canary
or Beta Release channels.

00:08:14.790 --> 00:08:17.160
If you're having trouble with
Instant Run or any Android

00:08:17.160 --> 00:08:19.330
studio features, let us
know on Twitter or Google+.

00:08:19.330 --> 00:08:22.700
I'm Reto Meier, and this has
been an Android Tool Time

00:08:22.700 --> 00:08:23.890
Instant Run Deep Dive.

00:08:23.890 --> 00:08:31.390
[MUSIC PLAYING]

00:08:31.390 --> 00:08:32.940
WAYNE: Yeah!

