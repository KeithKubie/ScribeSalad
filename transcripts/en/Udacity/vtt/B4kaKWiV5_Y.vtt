WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Welcome to office hours for week two. What questions do we have?

00:00:03.000 --> 00:00:08.000
Wolfgang from the forum writes asking about random oracles and wanted to know more

00:00:08.000 --> 00:00:12.000
why they're not realistic in practice.

00:00:12.000 --> 00:00:14.000
This is a good question.

00:00:14.000 --> 00:00:19.000
We use random oracles in ways to make it easier to reason about cryptography.

00:00:19.000 --> 00:00:24.000
The definition of a random oracle is typically you've got this magic black box

00:00:24.000 --> 00:00:27.000
that you can send an input to in some range,

00:00:27.000 --> 00:00:32.000
and you get as output a random value in the output domain.

00:00:32.000 --> 00:00:36.000
For it to be a random oracle, that value needs to be completely unpredictable.

00:00:36.000 --> 00:00:39.000
We can think about building something like this.

00:00:39.000 --> 00:00:42.000
You could have a lookup table where for every possible input

00:00:42.000 --> 00:00:46.000
you've produced using some good physical source of randomness

00:00:46.000 --> 00:00:48.000
the output for that input.

00:00:48.000 --> 00:00:50.000
Then you would do the lookup and get that output.

00:00:50.000 --> 00:00:53.000
That would behave like a random oracle

00:00:53.000 --> 00:00:56.000
that those inputs would be totally random. There is no correlation.

00:00:56.000 --> 00:00:58.000
The problem is if we try to make that function any smaller.

00:00:58.000 --> 00:01:04.000
So instead of having a table where for every input we can look up the corresponding output,

00:01:04.000 --> 00:01:06.000
we want something smaller. That's what we want with a hash function.

00:01:06.000 --> 00:01:12.000
That's what we want for any practical use of a mapping between inputs and outputs.

00:01:12.000 --> 00:01:17.000
We can't have a full table. That would be just a huge amount of memory.

00:01:17.000 --> 00:01:21.000
The random oracle turns out to be a useful device for reasoning about cryptography

00:01:21.000 --> 00:01:26.000
where we assume that this black box exists and has this perfect ideal behavior.

00:01:26.000 --> 00:01:28.000
It's not something we can actually build.

00:01:28.000 --> 00:01:31.000
We have to be really careful when we reason about cryptography

00:01:31.000 --> 00:01:35.000
using this assumption about a random oracle, and then we, say, through in a hast function

00:01:35.000 --> 00:01:37.000
that we think behaves sort of like one,

00:01:37.000 --> 00:01:40.000
because no hash function actually behaves like a random oracle.

00:01:40.000 --> 00:01:45.000
For our next question, Sayid Bashir wonders by looking at a ciphertext,

00:01:45.000 --> 00:01:49.000
is it possible to figure out the encryption scheme that is used?

00:01:49.000 --> 00:01:52.000
For most academic working cryptography, people assume they know

00:01:52.000 --> 00:01:55.000
everything about  the scheme being used and are trying to find

00:01:55.000 --> 00:02:00.000
some mathematical weakness that allows you to solve it more quickly than you could

00:02:00.000 --> 00:02:02.000
by doing a brute force search on the key space.

00:02:02.000 --> 00:02:05.000
for a lot of real world cryptography, that's not the case.

00:02:05.000 --> 00:02:08.000
The first thing you've got to do is figure out the scheme being used.

00:02:08.000 --> 00:02:12.000
That's sort of like the challenge question from homework two

00:02:12.000 --> 00:02:15.000
where if I told you the scheme for the random number generation it would be easy

00:02:15.000 --> 00:02:17.000
to figure out the next one.

00:02:17.000 --> 00:02:21.000
That's more of a better model for most cryptographic work that academics do--

00:02:21.000 --> 00:02:26.000
assuming you know the scheme and trying to find mathematical weaknesses in it.

00:02:26.000 --> 00:02:30.000
For a lot of practical cryptography certainly going back further but even today

00:02:30.000 --> 00:02:32.000
it's not the case that you know the scheme.

00:02:32.000 --> 00:02:37.000
If the scheme is good, then even if you know what's one of a set of known schemes,

00:02:37.000 --> 00:02:39.000
you shouldn't be able to tell from the ciphertext.

00:02:39.000 --> 00:02:41.000
The cipher text should be purely random.

00:02:41.000 --> 00:02:43.000
It should look like purely random values.

00:02:43.000 --> 00:02:48.000
Unless there is some weaknesses in the encryption scheme used, you shouldn't be able to tell what it is.

00:02:48.000 --> 00:02:51.000
But there are weaknesses in all encryption schemes used.

00:02:51.000 --> 00:02:54.000
This is particularly an issue if someone invents their own encryption scheme.

00:02:54.000 --> 00:02:59.000
They think, oh, it's going to be super secure since I've invented this custom scheme

00:02:59.000 --> 00:03:03.000
just for my own use. Those schemes almost always have weaknesses in them.

00:03:03.000 --> 00:03:06.000
Even if the scheme is not known, make it much easier than breaking a known scheme

00:03:06.000 --> 00:03:09.000
where the key is not known.

00:03:09.000 --> 00:03:14.000
It should be the case that you can't tell anything about the scheme from the ciphertext.

00:03:14.000 --> 00:03:19.000
In practice, that's probably not the case unless the scheme is a good one.

00:03:19.000 --> 00:03:22.000
Yeah. I guess it kind of goes back to the importance of keeping your keys secure.

00:03:22.000 --> 00:03:25.000
This is going back to Kerckhoff principle,

00:03:25.000 --> 00:03:28.000
which is you should be able to have a cipher that--

00:03:28.000 --> 00:03:30.000
even if the adversary knows everything about the scheme you're using--

00:03:30.000 --> 00:03:34.000
as long as they don't know your key, you have a good argument why that is secure.

00:03:34.000 --> 00:03:38.000
Then the last question come from Pavel.

00:03:38.000 --> 00:03:41.000
He has a question about invertibility.

00:03:41.000 --> 00:03:45.000
It's not obvious why encrypting different messages with a fixed key cannot give you the same ciphertext.

00:03:45.000 --> 00:03:48.000
Is this necessary for correctness?

00:03:48.000 --> 00:03:53.000
The question if you have two messages that encrypt to the same ciphertext,

00:03:53.000 --> 00:03:57.000
when you try to decrypt them you can't know which one to get.

00:03:57.000 --> 00:04:00.000
This is why in order for a cipher to be invertible,

00:04:00.000 --> 00:04:07.000
we need to have the property that each ciphertext corresponds to exactly one input.

00:04:07.000 --> 00:04:10.000
There are probabilistic ciphers, so there could be more than one ciphertext

00:04:10.000 --> 00:04:13.000
that corresponds to the same input under the same key,

00:04:13.000 --> 00:04:19.000
but it can't be the case that there are multiple inputs with the same key

00:04:19.000 --> 00:04:21.000
that map to the same ciphertext,

00:04:21.000 --> 00:04:24.000
because then when you try to decrypt it, even though you've got the key,

00:04:24.000 --> 00:04:27.000
you don't know which one of those two messages was the input.

00:04:27.000 --> 00:04:31.000
We need this property that easy ciphertext can be decrypted to exactly one message.

00:04:31.000 --> 99:59:59.000
Otherwise decryption doesn't work.

