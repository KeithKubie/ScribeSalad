WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:03.890
The w unit tells the browser
the dimensions of an image file so

00:00:03.890 --> 00:00:07.590
it can make a sensible choice
about which image to retrieve.

00:00:07.590 --> 00:00:13.790
But what if the image isn't displayed
at 100% width of the viewport?

00:00:13.790 --> 00:00:15.860
Well the browser parses the HTML and

00:00:15.860 --> 00:00:19.080
starts image pre loading
before the CSS is parsed.

00:00:19.080 --> 00:00:22.570
And at that point, it knows
nothing about image display sizes.

00:00:23.960 --> 00:00:26.410
Here's where the sizes
attribute comes into play.

00:00:26.410 --> 00:00:29.370
The sizes attribute tells
the browser the sizes at

00:00:29.370 --> 00:00:31.098
which an imageswill be displayed.

00:00:31.098 --> 00:00:33.740
So while parsing the HTML,

00:00:33.740 --> 00:00:37.590
the browser can work out
which image file to request.

00:00:37.590 --> 00:00:38.180
In theory,

00:00:38.180 --> 00:00:43.580
the browser cou'd get this data from
CSS, but CSS parsing comes later.

00:00:43.580 --> 00:00:48.220
Adding the sizes values to HTML ensures
the browser can fetch images as soon as

00:00:48.220 --> 00:00:50.030
possible, the right image for

00:00:50.030 --> 00:00:54.480
the right image display size and
device capabilities.

00:00:54.480 --> 00:00:57.640
And just to be clear,
the sizes attribute does not

00:00:57.640 --> 00:01:02.640
actually resize your image,
you still need to do that in CSS.

00:01:02.640 --> 00:01:03.140
Okay.

00:01:03.140 --> 00:01:05.269
Remember our source set example for
w units.

00:01:06.640 --> 00:01:08.510
Well let's resize our wallaby.

00:01:08.510 --> 00:01:11.190
Now she's 50% of viewport width.

00:01:11.190 --> 00:01:13.680
Let's take a look at
the network request for that.

00:01:13.680 --> 00:01:16.460
You'll see that even at
the smaller window size,

00:01:16.460 --> 00:01:21.330
the browser is still getting the medium
image, which is larger than you need.

00:01:21.330 --> 00:01:22.700
So let's work it out.

00:01:22.700 --> 00:01:25.620
The window is 400 pixels wide, so

00:01:25.620 --> 00:01:30.660
the image will be displayed at
half that width, 200 pixels wide.

00:01:30.660 --> 00:01:32.090
We're on a 2x display.

00:01:32.090 --> 00:01:37.990
so we need an image at least
400 pixels wide to look okay.

00:01:37.990 --> 00:01:44.010
Now our small image, which is 500
pixels wide, should be fine, got that?

00:01:44.010 --> 00:01:48.400
Okay, so at the time
the browser fetches the image,

00:01:48.400 --> 00:01:51.280
it doesn't know anything about
the display size of the image.

00:01:51.280 --> 00:01:57.300
So it defaults to assuming the image
will be the full width of the viewport.

00:01:57.300 --> 00:02:00.740
So, let's add a sizes attribute,
reload, and see what happens.

00:02:00.740 --> 00:02:03.800
The small image is downloaded.

00:02:03.800 --> 00:02:06.550
The sizes attribute here
is telling the browser,

00:02:06.550 --> 00:02:10.607
this wallaby will always be
displayed at 50% viewport width,

00:02:10.607 --> 00:02:14.730
and, given the files available,
please choose appropriately.

00:02:16.230 --> 00:02:21.435
What if you want different image display
sizes at different viewport sizes?

00:02:21.435 --> 00:02:26.385
Well, the sizes attribute really comes
into its own with media queries.

00:02:26.385 --> 00:02:30.470
That wallaby was getting a bit too big,
so let's put a limit on the width.

00:02:30.470 --> 00:02:35.041
Now, in this example,
we've set our wallaby to display at 100%

00:02:35.041 --> 00:02:39.828
viewport width, at viewport
widths of 250 pixels and less.

00:02:39.828 --> 00:02:44.020
And 50% viewport width above that.

00:02:44.020 --> 00:02:48.540
Notice how the sizes attribute
corresponds to the CSS.

00:02:48.540 --> 00:02:54.270
Just to reiterate, the sizes attribute
tells the browser at HTML parse time,

00:02:54.270 --> 00:02:56.080
what the image display width will be.

00:02:56.080 --> 00:03:00.180
It doesn't actually affect
the display size of the image.

00:03:00.180 --> 00:03:03.290
And by the way,
I've added a CSS transition, so

00:03:03.290 --> 00:03:05.430
the size change isn't too jarring.

00:03:05.430 --> 00:03:07.620
Just because I felt like it.

00:03:07.620 --> 00:03:09.790
You can get the actual source chosen for

00:03:09.790 --> 00:03:12.920
an image using the image's
currentSrc property.

00:03:12.920 --> 00:03:14.710
Make the window bigger and ta-da,

00:03:14.710 --> 00:03:17.250
you can see that the image
has a different source.

