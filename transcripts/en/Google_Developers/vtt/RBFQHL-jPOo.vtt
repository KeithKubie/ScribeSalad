WEBVTT
Kind: captions
Language: en

00:00:01.167 --> 00:00:02.834
Bridge: Hello, everyone.
Thank you for coming.

00:00:02.834 --> 00:00:05.200
So today we have the pleasure
of having

00:00:05.200 --> 00:00:08.100
three gentlemen here
who have the experience

00:00:08.100 --> 00:00:10.067
of actually working with O3D.

00:00:10.067 --> 00:00:11.734
So they can provide
all of you with a bit

00:00:11.734 --> 00:00:13.968
of their perspective
on what it's like

00:00:13.968 --> 00:00:17.701
actually working with O3D,
so that you can go back

00:00:17.701 --> 00:00:19.567
and use that experience
in terms of thinking

00:00:19.567 --> 00:00:21.734
about building applications
on your own.

00:00:21.734 --> 00:00:24.634
So to introduce myself,
I'm Henry Bridge.

00:00:24.634 --> 00:00:26.734
I am the product manager
for O3D.

00:00:26.734 --> 00:00:30.868
And why don't we get started
with a round of introductions?

00:00:30.868 --> 00:00:32.734
McRae: Hello.
Okay.

00:00:32.734 --> 00:00:34.000
My name is Brian McRae.

00:00:34.000 --> 00:00:35.501
I am the founder
and director

00:00:35.501 --> 00:00:37.701
of Crazy Pixel Productions.

00:00:37.701 --> 00:00:39.868
We developed the Island demo.

00:00:39.868 --> 00:00:41.367
I don't know if you've seen
that or not.

00:00:41.367 --> 00:00:43.133
And we're also working on
a couple other projects

00:00:43.133 --> 00:00:46.801
with Henry and his team
at Google.

00:00:46.801 --> 00:00:48.167
Tinney: Hi.
My name is Wade Tinney.

00:00:48.167 --> 00:00:50.334
I'm the CEO
of Large Animal Games.

00:00:50.334 --> 00:00:52.901
We're an independent game
developer out of New York City

00:00:52.901 --> 00:00:57.501
and we developed the
"Infinite Journey" game demo

00:00:57.501 --> 00:01:01.234
that was featured
at the Sandbox yesterday.

00:01:01.234 --> 00:01:03.400
Paradiso: Hey,
My name's Bob Paradiso,

00:01:03.400 --> 00:01:06.834
and I was the lead programmer
on that game.

00:01:06.834 --> 00:01:09.100
Bridge: Okay, great,
so thank you.

00:01:09.100 --> 00:01:12.267
So I think--

00:01:12.267 --> 00:01:16.601
I think why don't we start out
and show actually,

00:01:16.601 --> 00:01:18.100
in case people haven't
seen it,

00:01:18.100 --> 00:01:21.501
the semi-famous Beach demo
that we have

00:01:21.501 --> 00:01:27.133
that Crazy Pixel Productions
developed for us.

00:01:27.133 --> 00:01:29.267
Let's see.

00:01:29.267 --> 00:01:31.501
I don't think
we're getting sound.

00:01:31.501 --> 00:01:32.801
Ah, there we go.

00:01:32.801 --> 00:01:34.200
man: This demo shows
the potential

00:01:34.200 --> 00:01:38.367
of rendering high-quality
3-D graphics in the browser.

00:01:38.367 --> 00:01:41.200
Notice the smooth
hardware-accelerated rendering

00:01:41.200 --> 00:01:44.534
and detailed textures.

00:01:44.534 --> 00:01:47.434
O3D supports advanced graphics
techniques.

00:01:47.434 --> 00:01:51.734
For example, look at the
reflection on the water.

00:01:51.734 --> 00:01:53.934
You can edit the code
for O3D applications

00:01:53.934 --> 00:01:58.467
and see changes in real time.

00:01:58.467 --> 00:02:04.334
In this demo, use the arrow keys
and the mouse to explore.

00:02:04.334 --> 00:02:06.400
You can also press "H" to get
additional options

00:02:06.400 --> 00:02:11.801
such as removing demo elements.

00:02:11.801 --> 00:02:14.000
To learn more
and download O3D,

00:02:14.000 --> 00:02:19.000
visit code.google.com/apis/o3d.

00:02:22.567 --> 00:02:24.167
Bridge: All right, great.

00:02:24.167 --> 00:02:27.367
So basically the genesis
of that is we had

00:02:27.367 --> 00:02:30.200
sort of a pretty loose idea
of what we wanted

00:02:30.200 --> 00:02:33.033
to showcase in terms
of the graphics possibilities

00:02:33.033 --> 00:02:35.901
that you could actually
implement and render with O3D.

00:02:35.901 --> 00:02:38.033
But really at the start
it was just that

00:02:38.033 --> 00:02:40.334
and O3D hadn't even
been released.

00:02:40.334 --> 00:02:41.701
So I was hoping, Brian,
you could

00:02:41.701 --> 00:02:43.801
give us a little bit of an idea
of what attracted you

00:02:43.801 --> 00:02:47.734
to working on O3D initially,
and also

00:02:47.734 --> 00:02:50.100
since a lot of the audience
members here, I think,

00:02:50.100 --> 00:02:53.334
maybe haven't worked on
3-D graphics projects before,

00:02:53.334 --> 00:02:56.334
what the best way is to
interface with an art studio

00:02:56.334 --> 00:02:57.968
such as yourself.

00:02:57.968 --> 00:03:01.767
McRae: Yeah, well, my studio is
primarily a game developer.

00:03:01.767 --> 00:03:04.167
We do, you know,
next-gen games.

00:03:04.167 --> 00:03:07.067
But I love 3-D graphics.

00:03:07.067 --> 00:03:10.868
I always have, and when Henry
and his team approached us

00:03:10.868 --> 00:03:13.701
to do this demo, you know,
we jumped at the chance

00:03:13.701 --> 00:03:16.133
to create something,
you know,

00:03:16.133 --> 00:03:18.834
fun and exciting and
groundbreaking here with them.

00:03:18.834 --> 00:03:22.300
So they showed us all these
really awesome, you know,

00:03:22.300 --> 00:03:27.667
concepts and, you know,
island images and whatnot

00:03:27.667 --> 00:03:31.234
and we, you know--
we got right to work

00:03:31.234 --> 00:03:34.601
on creating this demo.

00:03:34.601 --> 00:03:36.868
And, you know,

00:03:36.868 --> 00:03:38.901
typically what you do when
you're creating something

00:03:38.901 --> 00:03:42.367
like this is, you know,
lay everything out first.

00:03:42.367 --> 00:03:44.567
Get the environment
sort of laid out in 3-D.

00:03:44.567 --> 00:03:46.267
You know, you want
to do something

00:03:46.267 --> 00:03:48.300
that's a little bit
more low-res

00:03:48.300 --> 00:03:51.033
just so you can kind of
get the, you know,

00:03:51.033 --> 00:03:52.634
proportions
and everything right.

00:03:52.634 --> 00:03:54.033
We had two artists
working on it.

00:03:54.033 --> 00:03:55.801
One artist was laying
in the environment.

00:03:55.801 --> 00:03:57.667
The other one was doing
all the props.

00:03:57.667 --> 00:04:02.000
And the goal that we had
with Google here

00:04:02.000 --> 00:04:04.267
was let's really
push the graphics.

00:04:04.267 --> 00:04:06.968
Let's see if we could get
a next-gen look.

00:04:06.968 --> 00:04:10.868
So it was imperative that
we used, you know, normal maps,

00:04:10.868 --> 00:04:13.033
diffuse maps, specular maps.

00:04:13.033 --> 00:04:14.934
Just throw everything
that we can at it.

00:04:14.934 --> 00:04:19.701
When we were working
on the actual terrain itself,

00:04:19.701 --> 00:04:25.067
we used a middleware game engine
called Unreal

00:04:25.067 --> 00:04:29.334
to kind of act as, like,
a bar on how far

00:04:29.334 --> 00:04:34.133
Henry and his team could take
the materials and the shaders.

00:04:34.133 --> 00:04:37.601
So we not only produced
everything in the Island demo

00:04:37.601 --> 00:04:40.701
inside of 3D Studio MAX,
but we also created

00:04:40.701 --> 00:04:43.067
a level inside of Unreal.

00:04:43.067 --> 00:04:44.734
And we delivered
both of those

00:04:44.734 --> 00:04:46.234
and then Henry
and his team were able

00:04:46.234 --> 00:04:48.434
to, you know,
extract the shaders

00:04:48.434 --> 00:04:51.000
and come up
with the pipeline that they

00:04:51.000 --> 00:04:52.868
currently have
with their exporter.

00:04:52.868 --> 00:04:55.868
But, yeah, we wanted to really
blend the materials,

00:04:55.868 --> 00:04:57.634
you know, the textures and
that kind of thing

00:04:57.634 --> 00:05:01.267
using, you know,
vertex, alpha, you know,

00:05:01.267 --> 00:05:04.234
light maps to do the lighting.

00:05:04.234 --> 00:05:05.868
You know,
just throw everything--

00:05:05.868 --> 00:05:07.434
like, three kitchen sinks
at this thing

00:05:07.434 --> 00:05:09.968
to really see how far
we could take it.

00:05:09.968 --> 00:05:15.834
As far as working
with a 3-D studio,

00:05:15.834 --> 00:05:19.601
it's a good idea to know exactly
what you're looking for

00:05:19.601 --> 00:05:21.567
for your end result.

00:05:21.567 --> 00:05:24.200
And it's also good
to have some assets

00:05:24.200 --> 00:05:27.067
to just kind of play with
when you're getting started.

00:05:27.067 --> 00:05:28.834
Sometimes, you know,
in the early phases,

00:05:28.834 --> 00:05:30.133
you're not gonna need,
you know--

00:05:30.133 --> 00:05:31.467
Say you wanted to do something
with a character,

00:05:31.467 --> 00:05:33.567
you might not need, like,
a fully,

00:05:33.567 --> 00:05:35.701
you know, articulated
character just to kind of

00:05:35.701 --> 00:05:37.133
get your prototype
off the ground.

00:05:37.133 --> 00:05:38.334
You might want to start
with something just

00:05:38.334 --> 00:05:39.567
far more simple.

00:05:39.567 --> 00:05:40.934
Like just a box or something.

00:05:40.934 --> 00:05:43.100
Get that translating.
Get that moving around.

00:05:43.100 --> 00:05:46.801
You know, have it feel right
before, you know,

00:05:46.801 --> 00:05:48.534
spending the money and spending
the time and everything

00:05:48.534 --> 00:05:50.901
getting all the 3-D,
because 3-D does, you know,

00:05:50.901 --> 00:05:55.133
take a lot of time to produce
and to get it right.

00:05:55.133 --> 00:05:57.467
So, yeah, I would definitely
recommend, like,

00:05:57.467 --> 00:05:59.868
a two-phase approach,
you know?

00:05:59.868 --> 00:06:02.200
Start with some, you know,
low-res objects,

00:06:02.200 --> 00:06:05.901
lay everything in, and then,
you know, approach--

00:06:05.901 --> 00:06:07.634
If you don't have the
capabilities yourself

00:06:07.634 --> 00:06:09.968
at your studio,
approach a 3-D studio

00:06:09.968 --> 00:06:13.467
and, you know, really have,
you know,

00:06:13.467 --> 00:06:15.934
some samples of what you'd
like to see.

00:06:15.934 --> 00:06:18.067
If you could hire
a concept artist

00:06:18.067 --> 00:06:22.367
or if the 3-D studio has
a concept team available,

00:06:22.367 --> 00:06:23.868
you know, work that out.

00:06:23.868 --> 00:06:25.567
Figure out what you want
for the environments.

00:06:25.567 --> 00:06:26.868
Figure out what you want
for the characters,

00:06:26.868 --> 00:06:28.200
if that's where you're going.

00:06:28.200 --> 00:06:31.834
If it's something far more,
I guess, abstract,

00:06:31.834 --> 00:06:33.968
you know, have those ideas
and everything too

00:06:33.968 --> 00:06:37.133
and the 3-D studios,
such as Crazy Pixel,

00:06:37.133 --> 00:06:39.234
would be able to guide you as
far as how much it would cost,

00:06:39.234 --> 00:06:41.667
how long it would take,
and so on.

00:06:41.667 --> 00:06:45.601
I would expect for timelines,
if you wanted

00:06:45.601 --> 00:06:47.501
a fully articulated character,

00:06:47.501 --> 00:06:51.067
expect about two weeks or so
for that to be complete.

00:06:51.067 --> 00:06:52.767
And in an environment
like this,

00:06:52.767 --> 00:06:57.601
this was about one month time
for two artists to create.

00:06:59.000 --> 00:07:01.334
Bridge: Okay, great.
Thank you, Brian.

00:07:01.334 --> 00:07:04.100
So let's also--

00:07:04.100 --> 00:07:06.234
Let's talk about
Large Animal also

00:07:06.234 --> 00:07:07.634
and your project.

00:07:07.634 --> 00:07:09.801
Let me get up.

00:07:09.801 --> 00:07:12.100
So maybe, Wade,
you can also talk about

00:07:12.100 --> 00:07:14.067
sort of what attracted you
to working on this

00:07:14.067 --> 00:07:16.601
and what sort
of the basic ideas

00:07:16.601 --> 00:07:17.901
were around
"Infinite Journey,"

00:07:17.901 --> 00:07:20.601
which I hope if some of you got
the chance to come by

00:07:20.601 --> 00:07:22.767
the client pod yesterday,
you got to see

00:07:22.767 --> 00:07:26.133
both of these applications.

00:07:26.133 --> 00:07:29.234
Okay, I'll turn
the volume down.

00:07:38.100 --> 00:07:41.200
Oh.

00:07:41.200 --> 00:07:42.868
Our buffering didn't work
so well.

00:07:42.868 --> 00:07:44.100
Tinney: I can talk over it.

00:07:44.100 --> 00:07:46.901
Yeah, so, um--
So we're--

00:07:46.901 --> 00:07:48.767
We've been around
for quite some time--

00:07:48.767 --> 00:07:51.100
about eight years--
and we've gone through

00:07:51.100 --> 00:07:53.234
a couple of phases
as a company,

00:07:53.234 --> 00:07:56.133
and about the last 18 months
we've been focused

00:07:56.133 --> 00:07:57.501
on social network games--

00:07:57.501 --> 00:08:00.267
so games that are integrated
into Facebook

00:08:00.267 --> 00:08:02.934
and various OpenSocial
containers.

00:08:02.934 --> 00:08:05.567
Prior to that, we were doing
PC downloadable games.

00:08:05.567 --> 00:08:08.067
So we were working with, like,
the Torque game engine

00:08:08.067 --> 00:08:11.734
and other game engines
and doing 3-D work.

00:08:11.734 --> 00:08:14.901
So O3D, for us,
represented an opportunity

00:08:14.901 --> 00:08:16.767
to kind of combine
our expertise

00:08:16.767 --> 00:08:21.067
in doing higher-end PC games
and 3-D there

00:08:21.067 --> 00:08:24.300
with the web-based content
that we're

00:08:24.300 --> 00:08:26.601
most interested in right now.

00:08:26.601 --> 00:08:30.567
So--and really kind
of deliver what we see

00:08:30.567 --> 00:08:33.968
as the next generation
of social network games.

00:08:33.968 --> 00:08:36.400
So--are we just
letting that buffer?

00:08:36.400 --> 00:08:37.934
Bridge: Yeah.
Tinney: Okay.

00:08:37.934 --> 00:08:39.601
So "Infinite Journey" wa--

00:08:39.601 --> 00:08:41.234
The idea with
"Infinite Journey"

00:08:41.234 --> 00:08:45.434
is that, you know,
it's a platformer,

00:08:45.434 --> 00:08:47.367
but the idea is that ultimately
it will be integrated

00:08:47.367 --> 00:08:50.033
into social networks
and all of the levels

00:08:50.033 --> 00:08:52.434
in this platformer
will be levels

00:08:52.434 --> 00:08:55.467
that are owned and were designed
and customized

00:08:55.467 --> 00:08:57.634
by friends of yours
on the social network.

00:08:57.634 --> 00:09:00.501
So as you're moving through,
you are having

00:09:00.501 --> 00:09:01.968
this infinite journey, right?

00:09:01.968 --> 00:09:03.934
Because every day another
friend may have

00:09:03.934 --> 00:09:06.901
adjusted their level
or added a new level

00:09:06.901 --> 00:09:09.234
and we're kind of stringing
those levels together.

00:09:09.234 --> 00:09:12.667
And we can also, of course,
take you from one level

00:09:12.667 --> 00:09:15.133
to one that's been designed
by someone else

00:09:15.133 --> 00:09:17.968
who maybe likes
the same music as you

00:09:17.968 --> 00:09:20.534
or has some other--
is in your network

00:09:20.534 --> 00:09:22.267
in some other way
even if you don't have

00:09:22.267 --> 00:09:24.267
a direct friend relationship.

00:09:24.267 --> 00:09:25.601
So we have--

00:09:25.601 --> 00:09:27.567
We worked on it
for about five weeks.

00:09:27.567 --> 00:09:31.734
It was a team of four
and one intern.

00:09:31.734 --> 00:09:33.400
Bob was the lead programmer.

00:09:33.400 --> 00:09:37.734
Then we had a lead artist
who was doing concept work

00:09:37.734 --> 00:09:40.534
and textures and UI design.

00:09:40.534 --> 00:09:42.534
And then we had
a full-time 3-D artist

00:09:42.534 --> 00:09:45.033
doing models
and applying those textures,

00:09:45.033 --> 00:09:46.767
working in Maya.

00:09:46.767 --> 00:09:50.868
And a full-time producer,
game designer,

00:09:50.868 --> 00:09:53.100
and Bob as the engineer.

00:09:53.100 --> 00:09:55.200
So--

00:09:55.200 --> 00:09:57.133
Bridge: All right,
that's finished buffering.

00:09:57.133 --> 00:09:59.067
Yes.

00:10:04.133 --> 00:10:06.434
Tinney: So the gameplay
is pretty simple.

00:10:06.434 --> 00:10:09.667
It's a platformer very much
like, you know,

00:10:09.667 --> 00:10:13.601
"Super Mario" or any number
of other platformers.

00:10:13.601 --> 00:10:17.367
What you're doing in the game
is you're collecting seeds.

00:10:17.367 --> 00:10:19.100
And there's a little readout
that you can't see

00:10:19.100 --> 00:10:21.033
in this video,
but you're collecting seeds

00:10:21.033 --> 00:10:22.801
and then you're
planting flowers.

00:10:22.801 --> 00:10:24.734
You can plant wherever
there's green.

00:10:24.734 --> 00:10:28.601
And in order to beat each level,
you need to plant a certain--

00:10:28.601 --> 00:10:31.968
a requisite
number of flowers.

00:10:31.968 --> 00:10:34.534
And then this shows the portal
that you're unlocking

00:10:34.534 --> 00:10:36.901
once you've planted
that number of flowers.

00:10:36.901 --> 00:10:38.968
So you have--
we have one enemy

00:10:38.968 --> 00:10:40.601
in this demo,
which is the runkin,

00:10:40.601 --> 00:10:44.167
which is this kind of little
boulder guy who runs around

00:10:44.167 --> 00:10:46.100
and he eats the flowers that
you've planted.

00:10:46.100 --> 00:10:47.834
So he--

00:10:47.834 --> 00:10:49.934
From a gameplay perspective,
he provides

00:10:49.934 --> 00:10:53.300
a kind of time constraint
because once you've planted

00:10:53.300 --> 00:10:54.767
enough flowers, you need
to get to the exit

00:10:54.767 --> 00:10:58.734
before he finds those flowers
and starts eating them.

00:10:58.734 --> 00:11:02.234
And you can also jump
on the runkins

00:11:02.234 --> 00:11:07.667
and they'll pop out any seeds
from flowers that they've eaten.

00:11:07.667 --> 00:11:09.968
Bridge: Yeah, I think everyone
was struck by, you know,

00:11:09.968 --> 00:11:12.234
once you started playing it,
you actually--

00:11:12.234 --> 00:11:14.367
you start getting addicted
very quickly.

00:11:14.367 --> 00:11:16.033
Easily blow an hour
even though

00:11:16.033 --> 00:11:17.868
that there are only
three levels right now,

00:11:17.868 --> 00:11:20.634
but we're really
looking forward

00:11:20.634 --> 00:11:23.434
to seeing it built up
in the future.

00:11:23.434 --> 00:11:27.067
So maybe, Bob, maybe you
can talk about a little bit

00:11:27.067 --> 00:11:29.267
sort of what the biggest--

00:11:29.267 --> 00:11:31.367
What recommendations
do you have for people

00:11:31.367 --> 00:11:32.968
that are getting started
with the API?

00:11:32.968 --> 00:11:35.367
And, you know, maybe both what
you've liked best

00:11:35.367 --> 00:11:37.100
about working with the API
and maybe the things

00:11:37.100 --> 00:11:39.801
that you found
the hardest as well.

00:11:39.801 --> 00:11:42.067
Paradiso: Sure.
Okay.

00:11:42.067 --> 00:11:43.200
To speak a little bit to that

00:11:43.200 --> 00:11:45.901
and go off something
you mentioned,

00:11:45.901 --> 00:11:49.601
yeah, definitely start simple
just so that,

00:11:49.601 --> 00:11:51.667
you know, you got some stuff
on the screen.

00:11:51.667 --> 00:11:54.601
I like to do that whenever I'm
starting with new technology.

00:11:54.601 --> 00:11:57.100
The first cut
of the game just had--

00:11:57.100 --> 00:11:58.300
What was it?

00:11:58.300 --> 00:11:59.667
There was a sample crate
you had

00:11:59.667 --> 00:12:02.467
with your model viewer
and the first level

00:12:02.467 --> 00:12:03.534
was nothing but--

00:12:03.534 --> 00:12:05.167
The ground was built
out of crates

00:12:05.167 --> 00:12:07.834
and you were a little crate
that would jump on those.

00:12:07.834 --> 00:12:09.934
And he'd run around,
and that was really good,

00:12:09.934 --> 00:12:11.334
because I was able
to hand that off

00:12:11.334 --> 00:12:13.334
to a guy to start tweaking
physics parameters and stuff,

00:12:13.334 --> 00:12:15.467
and as soon as that started
to come together,

00:12:15.467 --> 00:12:17.968
the animation guy could,
you know, start getting

00:12:17.968 --> 00:12:20.501
jump animations, stuff like
that, that kind of matched

00:12:20.501 --> 00:12:23.400
that kind of physics motion.

00:12:23.400 --> 00:12:26.467
I really--
I enjoy doing 3-D work.

00:12:26.467 --> 00:12:28.033
And I do enjoy
platformers a lot,

00:12:28.033 --> 00:12:31.100
so this was a great project
to be working on.

00:12:31.100 --> 00:12:33.634
I think the thing that was
challenging for me--

00:12:33.634 --> 00:12:35.400
one thing that was challenging
was I was new

00:12:35.400 --> 00:12:36.934
to JavaScript doing this,
so that was

00:12:36.934 --> 00:12:40.901
a big thing to learn.

00:12:40.901 --> 00:12:46.601
But that came together,
and as far as...

00:12:49.601 --> 00:12:51.868
Well, it was just really helpful
to have a dialogue

00:12:51.868 --> 00:12:54.567
between us and Google
as things were coming up.

00:12:54.567 --> 00:12:58.734
Working that stuff out.

00:12:58.734 --> 00:13:00.200
I don't know.

00:13:00.200 --> 00:13:02.501
Bridge: Any tips or tricks
that you found?

00:13:02.501 --> 00:13:04.133
Well, I mean other
than prototyping.

00:13:04.133 --> 00:13:05.434
I think that's
a great sort of lesson.

00:13:05.434 --> 00:13:07.300
Paradiso: Prototyping's
a good thing.

00:13:07.300 --> 00:13:10.734
There's JavaScript stuff
I'm sure you guys know.

00:13:10.734 --> 00:13:14.100
Like, for example, like,
you know, garbage collection.

00:13:14.100 --> 00:13:16.434
That was a big thing
in the game optimizing

00:13:16.434 --> 00:13:17.868
towards the end
to get it working,

00:13:17.868 --> 00:13:19.701
so, you know,
making sure you don't

00:13:19.701 --> 00:13:22.868
allocate a lot of stuff
while the game's running.

00:13:22.868 --> 00:13:28.334
And also there was...

00:13:28.334 --> 00:13:29.801
Yeah, I think--
Yeah.

00:13:29.801 --> 00:13:31.267
Just kind of doing
performance stuff

00:13:31.267 --> 00:13:33.033
as you're working
on the game is important

00:13:33.033 --> 00:13:34.968
to kind of see
how much you can throw in.

00:13:34.968 --> 00:13:38.868
But it took a lot more
than we--

00:13:38.868 --> 00:13:41.434
It took a lot of stuff
that we were surprised.

00:13:41.434 --> 00:13:43.834
It took it really well.

00:13:43.834 --> 00:13:45.334
Bridge: Okay, great.

00:13:45.334 --> 00:13:47.434
And actually--

00:13:47.434 --> 00:13:50.767
So Crazy Pixel's working
on another project

00:13:50.767 --> 00:13:54.634
and has been producing art
for a terror defense game.

00:13:54.634 --> 00:13:56.367
This one hasn't
buffered either.

00:13:56.367 --> 00:13:59.434
But maybe you can talk
a little bit about that

00:13:59.434 --> 00:14:01.968
since you've had
development expertise

00:14:01.968 --> 00:14:04.267
with O3D as well,
you know?

00:14:04.267 --> 00:14:06.968
What you've liked most and what
you found the hardest

00:14:06.968 --> 00:14:08.567
in terms of working
with the API.

00:14:08.567 --> 00:14:09.701
McRae: Sure, yeah, okay.

00:14:09.701 --> 00:14:11.234
So the Island demo
was easy for us,

00:14:11.234 --> 00:14:13.167
'cause we're primarily
an art studio

00:14:13.167 --> 00:14:15.868
specializing
in next-gen graphics.

00:14:15.868 --> 00:14:18.734
So that really
came natural to us.

00:14:18.734 --> 00:14:21.634
When we started approaching
this project,

00:14:21.634 --> 00:14:25.033
which is
a tower defense game,

00:14:25.033 --> 00:14:28.067
we wanted to really--

00:14:28.067 --> 00:14:31.167
On the art side,
we wanted to specifically use

00:14:31.167 --> 00:14:35.000
what's available stock in O3D.

00:14:35.000 --> 00:14:36.801
So, you know,
the Island demo

00:14:36.801 --> 00:14:39.267
had a lot of custom shaders
that were handwritten

00:14:39.267 --> 00:14:42.000
in JavaScript after export.

00:14:42.000 --> 00:14:45.300
And our approach on this one

00:14:45.300 --> 00:14:48.868
is to, you know--

00:14:48.868 --> 00:14:50.801
to act as more
of a typical end user

00:14:50.801 --> 00:14:55.868
and export the characters,
objects, that kind of thing,

00:14:55.868 --> 00:14:57.968
without doing
any custom scripting

00:14:57.968 --> 00:14:59.534
of the materials afterwards.

00:14:59.534 --> 00:15:03.567
And we're finding it
to be very forgiving

00:15:03.567 --> 00:15:08.267
for sort of a "game engine,"
quote, end quote.

00:15:08.267 --> 00:15:11.934
We're able to skin
the characters

00:15:11.934 --> 00:15:14.200
using the skin modifier
in 3D Studio MAX

00:15:14.200 --> 00:15:18.634
to any kind of custom
bone rig that we have.

00:15:18.634 --> 00:15:21.200
And, you know,
typically in a game engine

00:15:21.200 --> 00:15:23.634
you could only use, like,
two or three-bone weighting

00:15:23.634 --> 00:15:27.434
and, you know, you wind up
exporting your object

00:15:27.434 --> 00:15:29.334
and it turns into,
like, spaghetti

00:15:29.334 --> 00:15:31.868
or, you know, the vertex rate
gets all messed up.

00:15:31.868 --> 00:15:34.567
And we haven't found any
problems like that whatsoever

00:15:34.567 --> 00:15:36.167
with O3D.

00:15:36.167 --> 00:15:40.267
So I use the word "forgiving,"
you know,

00:15:40.267 --> 00:15:42.901
when that kind of thing
just kind of happens

00:15:42.901 --> 00:15:45.534
and it just works great,
you know, first round.

00:15:45.534 --> 00:15:47.934
Materials.

00:15:47.934 --> 00:15:51.267
Everything comes through
with specularity,

00:15:51.267 --> 00:15:53.968
you know,
which is great.

00:15:53.968 --> 00:15:55.901
The falloff
and the glossiness

00:15:55.901 --> 00:15:57.634
and all
the kind of parameters

00:15:57.634 --> 00:15:59.868
inside of a standard
MAX material

00:15:59.868 --> 00:16:04.868
are all, you know,
retained and exported.

00:16:04.868 --> 00:16:07.968
The diffuse map, you just
stick it in that map channel.

00:16:07.968 --> 00:16:10.367
The normal map, you stick
in that map channel.

00:16:10.367 --> 00:16:13.100
Specular map, you know?

00:16:13.100 --> 00:16:14.334
Translucency.

00:16:14.334 --> 00:16:16.801
Even multi subobjects,
you know, all work.

00:16:16.801 --> 00:16:19.601
So on the material
and the modeling side,

00:16:19.601 --> 00:16:23.834
and even animation, everything
has been coming over great.

00:16:23.834 --> 00:16:27.868
The first tool
that we needed to make--

00:16:27.868 --> 00:16:29.067
because you do need
to make tools

00:16:29.067 --> 00:16:31.701
when you're creating
sort of a game--

00:16:31.701 --> 00:16:35.300
is for the artist,
a model viewer.

00:16:35.300 --> 00:16:41.300
And it was a luxury
to go to the API site

00:16:41.300 --> 00:16:46.834
and just kind of grab from all
these different, you know,

00:16:46.834 --> 00:16:49.100
samples and piece together
what we wanted.

00:16:49.100 --> 00:16:51.567
'Cause we knew we wanted
to be able to load an object,

00:16:51.567 --> 00:16:54.133
load an animation,
see what the frame rate is,

00:16:54.133 --> 00:16:55.801
be able to rotate
around the object

00:16:55.801 --> 00:16:58.200
so that the artists
know what to do

00:16:58.200 --> 00:17:00.534
to get it to look
how they want it to.

00:17:00.534 --> 00:17:03.000
And so that was
the first tool we made.

00:17:03.000 --> 00:17:07.567
It only took three days
and, you know,

00:17:07.567 --> 00:17:11.501
after that we were able
to just go full sprint

00:17:11.501 --> 00:17:13.901
on all of our characters
and objects

00:17:13.901 --> 00:17:15.567
for the tower defense game.

00:17:15.567 --> 00:17:18.300
And then the other side,
of course, is the programming.

00:17:18.300 --> 00:17:20.934
You know, like I said,
we're mostly an art house,

00:17:20.934 --> 00:17:25.868
so, you know, when we
approached the programming--

00:17:25.868 --> 00:17:27.167
You know, we're used to--

00:17:27.167 --> 00:17:29.968
We also use Torque game builder
and that kind of thing

00:17:29.968 --> 00:17:32.901
for our own internal
game development.

00:17:32.901 --> 00:17:34.501
And so we're used
to scripting languages

00:17:34.501 --> 00:17:35.968
and that kind of thing.

00:17:35.968 --> 00:17:37.200
And there was
a little bit of a ramp up

00:17:37.200 --> 00:17:39.033
for us for the JavaScripting.

00:17:39.033 --> 00:17:44.200
The fact that, you know,
everything for the runtime

00:17:44.200 --> 00:17:46.767
on the canvas
is all exposed into, you know,

00:17:46.767 --> 00:17:50.033
that one, you know,
main instruction

00:17:50.033 --> 00:17:52.567
that runs the canvas was
a little new to us.

00:17:52.567 --> 00:17:56.100
And something else that we were
kind of scratching our heads on

00:17:56.100 --> 00:18:00.267
is the fact that every object
needs to be parented

00:18:00.267 --> 00:18:05.067
to a transform and then you
then manipulate that transform

00:18:05.067 --> 00:18:08.934
through your own custom
variables as opposed to,

00:18:08.934 --> 00:18:14.000
you know, getting and setting,
you know, transform positions.

00:18:14.000 --> 00:18:16.367
So some slight differences.

00:18:16.367 --> 00:18:17.834
And we actually--

00:18:17.834 --> 00:18:20.434
After thinking about it,
the fact that the transforms

00:18:20.434 --> 00:18:24.767
are so modular to the objects
is kind of a luxury,

00:18:24.767 --> 00:18:27.501
because then you could,
you know, swap, you know,

00:18:27.501 --> 00:18:29.601
objects out to different
transforms pretty easily,

00:18:29.601 --> 00:18:32.567
and it's actually kind of nice
once you get used to it.

00:18:32.567 --> 00:18:34.934
So just a couple
of things that, you know,

00:18:34.934 --> 00:18:36.734
were a little new to us,
but, you know,

00:18:36.734 --> 00:18:40.033
we're well under way
and I believe

00:18:40.033 --> 00:18:42.501
we're gonna have the game done
in about a month and a half,

00:18:42.501 --> 00:18:48.200
and it's been a lot of fun
to work on so far.

00:18:48.200 --> 00:18:50.000
Paradiso: Sorry, I'm a little
bit new to being onstage,

00:18:50.000 --> 00:18:51.400
so I'm a little bit nervous.

00:18:51.400 --> 00:18:52.968
I'll probably avoid
eye contact and stuff.

00:18:52.968 --> 00:18:54.300
Sorry about that.

00:18:54.300 --> 00:18:56.501
But just to speak
to some of that stuff,

00:18:56.501 --> 00:18:58.200
that was interesting.

00:18:58.200 --> 00:19:00.801
We actually--in some ways
we did it

00:19:00.801 --> 00:19:03.634
from a little bit
of a different angle.

00:19:03.634 --> 00:19:06.534
For, like, the art side,
we found that

00:19:06.534 --> 00:19:08.767
although Maya did export
the settings out

00:19:08.767 --> 00:19:11.367
to, you know,
O3D with some fidelity,

00:19:11.367 --> 00:19:12.734
that was really good.

00:19:12.734 --> 00:19:14.834
We found that--I guess
especially since we had

00:19:14.834 --> 00:19:18.100
a separate 3-D artist
from a texture artist,

00:19:18.100 --> 00:19:21.434
we found that it was more useful
to externalize the textures

00:19:21.434 --> 00:19:23.834
and the normal maps
and all those other settings.

00:19:23.834 --> 00:19:28.667
And we had it such that the 3-D
modeler would export it once

00:19:28.667 --> 00:19:31.200
and then since all the other
stuff was externalized

00:19:31.200 --> 00:19:33.901
in XML files,
the texture artist

00:19:33.901 --> 00:19:36.567
could go ahead and tweak that
stuff till he was happy with it,

00:19:36.567 --> 00:19:39.734
and that was how we
separated that out.

00:19:39.734 --> 00:19:42.200
The transform thing
was interesting too.

00:19:42.200 --> 00:19:44.567
That was a little bit new.

00:19:44.567 --> 00:19:46.434
When we were doing this
platformer game,

00:19:46.434 --> 00:19:49.634
what we wound up doing
was we, you know--

00:19:49.634 --> 00:19:51.767
we set up, like,
just a basic class

00:19:51.767 --> 00:19:53.767
that was, you know,
just a model,

00:19:53.767 --> 00:19:56.100
and he would own a transform
and he would own

00:19:56.100 --> 00:19:57.834
his rotations and positions.

00:19:57.834 --> 00:20:01.434
And every tick, you know,
the physics would tick by

00:20:01.434 --> 00:20:03.901
and it would update
his position and then

00:20:03.901 --> 00:20:05.834
we just had a code
that would then push that

00:20:05.834 --> 00:20:08.467
into the transform and then O3D
took care of the rest

00:20:08.467 --> 00:20:11.000
of rendering that out
to where we needed it.

00:20:11.000 --> 00:20:16.033
So, yeah, that was our way
of getting around that stuff.

00:20:16.033 --> 00:20:18.968
Bridge: So I have sort of
a general question for you all.

00:20:18.968 --> 00:20:22.100
So looking out at the world
of 3-D on the web right now,

00:20:22.100 --> 00:20:23.267
there's a lot of excitement.

00:20:23.267 --> 00:20:24.667
There's a lot of activity.

00:20:24.667 --> 00:20:26.601
So there's Google's O3D.

00:20:26.601 --> 00:20:29.334
Mozilla also has its
Canvas 3D technology,

00:20:29.334 --> 00:20:30.901
and we're working
on that with them also

00:20:30.901 --> 00:20:32.601
in the context of Chronos.

00:20:32.601 --> 00:20:34.701
For those of you not familiar
with Canvas 3D,

00:20:34.701 --> 00:20:38.634
it's basically direct OpenGL
bindings from the browser.

00:20:38.634 --> 00:20:41.834
So it's--
in a contrast to O3D,

00:20:41.834 --> 00:20:44.501
it's what's called
an immediate mode API

00:20:44.501 --> 00:20:46.000
rather than
a retain mode API.

00:20:46.000 --> 00:20:48.200
And if any of you were
at our talk yesterday

00:20:48.200 --> 00:20:50.033
or would like to see it,
you can find the videos

00:20:50.033 --> 00:20:54.234
that talk more about
the technical details online.

00:20:54.234 --> 00:20:55.634
But--

00:20:55.634 --> 00:20:57.300
So looking around
at what's sort of happening

00:20:57.300 --> 00:20:59.834
on the web right now,
what direction would you

00:20:59.834 --> 00:21:04.000
like to see all of this take,
and do you think

00:21:04.000 --> 00:21:06.667
what's emerging right now
is what's right

00:21:06.667 --> 00:21:08.567
for developers and what
developers really need

00:21:08.567 --> 00:21:12.400
from 3-D APIs for the web?

00:21:12.400 --> 00:21:14.801
Tinney: Well, I mean,
I think that the direction

00:21:14.801 --> 00:21:18.834
I'd most like to see it take is
towards some kind of standard.

00:21:18.834 --> 00:21:21.534
I think, you know,
we'd love to see

00:21:21.534 --> 00:21:26.200
this technology native
to all of the browsers

00:21:26.200 --> 00:21:30.734
or at least
the modern browsers.

00:21:30.734 --> 00:21:33.167
And, you know, so we've
been working in Flash

00:21:33.167 --> 00:21:34.434
for a long time.

00:21:34.434 --> 00:21:37.000
We're a Flash studio
primarily these days.

00:21:37.000 --> 00:21:40.534
And we're comfortable
with that plug-in

00:21:40.534 --> 00:21:43.400
because it
is propagated so widely.

00:21:43.400 --> 00:21:47.334
So that's the real challenge
of any of these technologies.

00:21:47.334 --> 00:21:49.701
We love the fact
that we can have

00:21:49.701 --> 00:21:51.734
the kind of performance
that we have in this game

00:21:51.734 --> 00:21:54.300
and the kind of lighting
and 3-D assets

00:21:54.300 --> 00:21:56.601
that we have in this game.

00:21:56.601 --> 00:21:59.267
And it opens up a world
of possibilities for us.

00:21:59.267 --> 00:22:02.334
And the fact that it's so--
we can so easily access

00:22:02.334 --> 00:22:07.100
other web services and connect
into the social graph,

00:22:07.100 --> 00:22:09.834
and, you know--that presents
an amazing opportunity.

00:22:09.834 --> 00:22:13.334
So then the question is, well,
how can we make sure that

00:22:13.334 --> 00:22:16.133
accessing is seamless
for millions and millions

00:22:16.133 --> 00:22:18.567
of just average users,
right?

00:22:18.567 --> 00:22:21.834
So where we want
to see it go is just

00:22:21.834 --> 00:22:26.667
wide distribution of great
content that drives that access.

00:22:29.801 --> 00:22:32.400
McRae: Yeah, I kind of see
a bit of a rebirth here

00:22:32.400 --> 00:22:34.834
of what happened
when Flash came out,

00:22:34.834 --> 00:22:36.601
you know, in 3-D.

00:22:36.601 --> 00:22:38.334
So I think it's really exciting.

00:22:38.334 --> 00:22:40.901
I remember, you know,
back when Flash came out,

00:22:40.901 --> 00:22:45.300
everybody had just amazing
intro Flash videos

00:22:45.300 --> 00:22:48.934
on their web sites
and, you know,

00:22:48.934 --> 00:22:50.534
that was when we all had,
like, you know,

00:22:50.534 --> 00:22:53.367
5k download on our modems
or whatever

00:22:53.367 --> 00:22:55.767
and it was just awesome
to see, like, all this motion

00:22:55.767 --> 00:22:59.701
and everything happen
on our little modems.

00:22:59.701 --> 00:23:02.334
And, you know, nowadays,
you know,

00:23:02.334 --> 00:23:05.100
things have progressed so far
in just the last ten years.

00:23:05.100 --> 00:23:06.334
You know, now we have this.

00:23:06.334 --> 00:23:08.067
I think it's mind-boggling
to think, like,

00:23:08.067 --> 00:23:10.367
you know, what could happen
not just in an intro,

00:23:10.367 --> 00:23:14.434
you know, sort of video to get
people into your web site,

00:23:14.434 --> 00:23:16.334
but what if
the intro video turned

00:23:16.334 --> 00:23:18.267
into your web site,
you know?

00:23:18.267 --> 00:23:20.701
I just saw
"Terminator: Salvation"

00:23:20.701 --> 00:23:24.167
and we've all seen,
you know, these crazy,

00:23:24.167 --> 00:23:28.534
awesome movies where, you know,
there's a computer interface

00:23:28.534 --> 00:23:31.667
and it's, like, this huge
network in 3-D space

00:23:31.667 --> 00:23:34.834
and people are flying to these
different nodes or whatever

00:23:34.834 --> 00:23:36.501
and that information's
coming out at you.

00:23:36.501 --> 00:23:37.868
What about web sites
like that?

00:23:37.868 --> 00:23:39.467
I think that could
be really awesome

00:23:39.467 --> 00:23:41.701
aside from the fact that,
you know,

00:23:41.701 --> 00:23:45.033
you could do entertaining
applications like games.

00:23:45.033 --> 00:23:48.601
So I think there's just
a world of possibilities

00:23:48.601 --> 00:23:50.067
available to us.

00:23:50.067 --> 00:23:53.801
And the bottleneck I believe
is gonna be just the developers,

00:23:53.801 --> 00:23:57.167
you know, us authoring
these applications,

00:23:57.167 --> 00:23:59.033
these experiences.

00:23:59.033 --> 00:24:02.067
I would love
to see somebody do, like,

00:24:02.067 --> 00:24:06.234
a Flash or a Photoshop

00:24:06.234 --> 00:24:08.434
sort of a tool

00:24:08.434 --> 00:24:13.534
to author within this
so that, you know,

00:24:13.534 --> 00:24:16.601
a 3-D artist who doesn't
really understand JavaScript

00:24:16.601 --> 00:24:20.567
could, you know,
piece together Java code,

00:24:20.567 --> 00:24:23.968
bring in his assets,
adjust lights and materials,

00:24:23.968 --> 00:24:27.367
all that kind of stuff within
some kind of a game editor

00:24:27.367 --> 00:24:30.200
or authoring tool
or something like that.

00:24:30.200 --> 00:24:31.968
I think that
would really open it up

00:24:31.968 --> 00:24:35.400
and it'd be an amazing time
to see

00:24:35.400 --> 00:24:40.000
what comes from something
like that.

00:24:40.000 --> 00:24:41.067
Tinney: So, yeah.

00:24:41.067 --> 00:24:42.601
I mean, that actually
reminds me.

00:24:42.601 --> 00:24:44.200
We were talking
over dinner last night

00:24:44.200 --> 00:24:46.067
and one of the things that--
as we were working on it

00:24:46.067 --> 00:24:47.300
and as Bob mentioned,
you know,

00:24:47.300 --> 00:24:49.267
we always look
to externalize assets

00:24:49.267 --> 00:24:53.667
as much as possible so that
other people on the team

00:24:53.667 --> 00:24:57.601
can tweak and adjust those
assets without

00:24:57.601 --> 00:25:00.801
taking up Bob's precious time.

00:25:00.801 --> 00:25:04.133
So, you know,
we did that with models,

00:25:04.133 --> 00:25:07.100
we did that with textures,
and we would love

00:25:07.100 --> 00:25:09.567
to see that--something similar
happen with shaders

00:25:09.567 --> 00:25:13.434
and we always do it with text
and copy in the game.

00:25:13.434 --> 00:25:15.033
So then that started
me thinking,

00:25:15.033 --> 00:25:17.400
"Well, if you had
kind of public repositories

00:25:17.400 --> 00:25:19.267
of these different types
of assets--"

00:25:19.267 --> 00:25:22.901
So you had a public library
of models

00:25:22.901 --> 00:25:25.167
and another of textures
and another of shaders

00:25:25.167 --> 00:25:28.934
and so on and so forth,
then you could let

00:25:28.934 --> 00:25:32.367
really, you know,
independent developers

00:25:32.367 --> 00:25:36.334
who don't have a team
with designers and artists--

00:25:36.334 --> 00:25:38.200
maybe just an engineer
or maybe just an artist

00:25:38.200 --> 00:25:41.167
that's working and pulling,
you know, functional

00:25:41.167 --> 00:25:45.000
code modules for different
character behaviors

00:25:45.000 --> 00:25:49.434
and world descriptions--
that they could just kind of

00:25:49.434 --> 00:25:52.067
be pulling from different
libraries and creating,

00:25:52.067 --> 00:25:55.801
you know, doing quick prototypes
of different common game types.

00:25:55.801 --> 00:25:58.801
I think that this
is a step in the direction

00:25:58.801 --> 00:26:01.567
of making something
like that possible.

00:26:01.567 --> 00:26:03.033
Bridge: Great.

00:26:03.033 --> 00:26:05.200
Well, with that I actually
wanted to open it up

00:26:05.200 --> 00:26:09.567
to the audience to ask any
of us questions about O3D.

00:26:09.567 --> 00:26:11.267
How to get started
working with it,

00:26:11.267 --> 00:26:14.734
tips and tricks,
anything like that.

00:26:19.601 --> 00:26:22.501
man: Did you guys use
the embedded V8 at all?

00:26:27.501 --> 00:26:30.334
Paradiso: Actually,
for our game, we didn't.

00:26:30.334 --> 00:26:32.801
We're definitely
gonna look into doing that.

00:26:32.801 --> 00:26:35.534
We were able to get
pretty good performance

00:26:35.534 --> 00:26:37.267
even without doing that.

00:26:37.267 --> 00:26:39.701
So, yeah,
it was a short timeline,

00:26:39.701 --> 00:26:41.667
so that was
kind of a lower priority

00:26:41.667 --> 00:26:45.000
since we were able to get
the frame rates we wanted.

00:26:45.000 --> 00:26:46.934
man: Hi.
I have two questions.

00:26:46.934 --> 00:26:48.934
One is how do you--

00:26:48.934 --> 00:26:51.734
What do you think
about the Canvas 3D

00:26:51.734 --> 00:26:56.267
and the O3D
and what will happen to O3D

00:26:56.267 --> 00:26:59.701
if Canvas 3D
becomes more popular

00:26:59.701 --> 00:27:01.501
or it becomes more
of a standard,

00:27:01.501 --> 00:27:05.067
or is one or the other gonna
become one of the standards?

00:27:05.067 --> 00:27:07.701
Bridge: Yeah, so I'd say
we're very supportive

00:27:07.701 --> 00:27:09.467
of the Canvas 3D work.

00:27:09.467 --> 00:27:11.667
We're actively collaborating
with Mozilla

00:27:11.667 --> 00:27:15.033
and Apple and Opera
on standardizing

00:27:15.033 --> 00:27:17.801
basically what
is Canvas right now

00:27:17.801 --> 00:27:20.167
in the context of the Chronos
organization.

00:27:20.167 --> 00:27:23.033
And we really want
to see OpenGL bindings

00:27:23.033 --> 00:27:24.801
available in browsers.

00:27:24.801 --> 00:27:28.067
I think we still
have some concerns

00:27:28.067 --> 00:27:30.400
about performance
in some situations.

00:27:30.400 --> 00:27:32.267
So particularly in things,
like, you know,

00:27:32.267 --> 00:27:35.634
like the beach scene where you
have a lot of different objects,

00:27:35.634 --> 00:27:37.467
we're just concerned
about being able

00:27:37.467 --> 00:27:40.234
to actually draw all of that
in 16 milliseconds,

00:27:40.234 --> 00:27:42.701
as that's basically
what you need to do

00:27:42.701 --> 00:27:45.501
if you want to get
a 60 frames per second.

00:27:45.501 --> 00:27:47.400
So I think over time,
you know,

00:27:47.400 --> 00:27:50.801
since we are collaborating
with Mozilla,

00:27:50.801 --> 00:27:54.133
I think we might see over time
that there are

00:27:54.133 --> 00:27:56.534
sort of two APIs
that wind up emerging.

00:27:56.534 --> 00:27:58.367
And a good analogy
that Matt Papakipos

00:27:58.367 --> 00:28:02.067
was using yesterday was that
you'd say of Canvas,

00:28:02.067 --> 00:28:04.167
which is an immediate mode,
and SBG,

00:28:04.167 --> 00:28:07.467
which is a retain mode API
for doing graphics.

00:28:07.467 --> 00:28:10.033
But what we'd like to do since
we are working together

00:28:10.033 --> 00:28:14.501
with them is have the two work
seamlessly together

00:28:14.501 --> 00:28:16.100
so that if you wanted to,
for example,

00:28:16.100 --> 00:28:18.667
set up a huge scene
but then draw, you know,

00:28:18.667 --> 00:28:20.467
a foreground that's
animated every frame,

00:28:20.467 --> 00:28:23.167
you could do the background
perhaps in retain

00:28:23.167 --> 00:28:26.334
and then do the foreground
in an immediate mode API.

00:28:26.334 --> 00:28:28.267
man: Okay.

00:28:28.267 --> 00:28:31.067
Second part of
my question is--

00:28:31.067 --> 00:28:33.501
that has to deal
with performance,

00:28:33.501 --> 00:28:36.701
have you done any real tests
of how much data

00:28:36.701 --> 00:28:41.367
can you handle in O3D
in terms of loading polygons?

00:28:41.367 --> 00:28:45.501
I have a system that previously
was worked on

00:28:45.501 --> 00:28:48.534
by people at Stanford
where we have a client

00:28:48.534 --> 00:28:49.801
and server environment.

00:28:49.801 --> 00:28:53.400
On the server,
we're actually loading millions

00:28:53.400 --> 00:28:54.801
and millions of polygons--

00:28:54.801 --> 00:28:56.601
like, 100 million polygons--

00:28:56.601 --> 00:29:00.567
whereas on the client end,
we load a very low-res.

00:29:00.567 --> 00:29:04.501
And we have a sort
of fake animation

00:29:04.501 --> 00:29:07.133
where you're able
to rotate the models

00:29:07.133 --> 00:29:09.100
and do whatever navigation
you need to,

00:29:09.100 --> 00:29:12.801
but then in the end you do get
a high-resolution model.

00:29:12.801 --> 00:29:15.567
So what I look to do
is convert my clients

00:29:15.567 --> 00:29:18.033
to something like O3D,
because right now

00:29:18.033 --> 00:29:21.934
it's running in Java,
or Canvas 3D.

00:29:21.934 --> 00:29:24.601
But I'd like
to know how much--

00:29:24.601 --> 00:29:26.868
How many polygons
can it handle?

00:29:26.868 --> 00:29:29.634
Bridge: Yeah, I'd encourage
you to try.

00:29:29.634 --> 00:29:32.801
We haven't done any
actual sort of benchmarking

00:29:32.801 --> 00:29:35.000
and seeing how many objects you
can get on the screen.

00:29:35.000 --> 00:29:36.334
One of the
tough things, though,

00:29:36.334 --> 00:29:37.801
is, I mean,
since it is a PC platform,

00:29:37.801 --> 00:29:39.701
we're very dependent
on the hardware

00:29:39.701 --> 00:29:42.534
that's running underneath
to some extent.

00:29:42.534 --> 00:29:45.601
So it's gonna vary
a lot based on--

00:29:45.601 --> 00:29:50.400
based on the individual
user's machine, so...

00:29:50.400 --> 00:29:52.167
Yeah, so I'd encourage you
to do some testing.

00:29:52.167 --> 00:29:54.400
I don't know if you all
had some experience

00:29:54.400 --> 00:29:57.300
in sort of
a mid-range machine,

00:29:57.300 --> 00:29:58.934
what you could actually
get on it.

00:29:58.934 --> 00:30:02.467
man: More specifically,
I should just go back into--

00:30:02.467 --> 00:30:06.000
What can the Ajax and the
JavaScript functions handle?

00:30:06.000 --> 00:30:07.901
Not necessarily--
Because I know it goes

00:30:07.901 --> 00:30:11.334
to OpenGL,
but I'm assuming there is

00:30:11.334 --> 00:30:13.801
a JavaScript limitation
of some sort.

00:30:13.801 --> 00:30:16.200
The API has some kind
of limitations

00:30:16.200 --> 00:30:18.734
where the browser times out
or they're, you know,

00:30:18.734 --> 00:30:21.567
you can't load certain
things in.

00:30:21.567 --> 00:30:23.968
Bridge: Well, I mean,
right now,

00:30:23.968 --> 00:30:25.834
for getting actual content
into it,

00:30:25.834 --> 00:30:30.133
in the plug-in we have
essentially a streaming API

00:30:30.133 --> 00:30:31.701
that allows you to pull down

00:30:31.701 --> 00:30:34.601
a tarred, gzipped
archive of stuff.

00:30:34.601 --> 00:30:38.534
And basically if you've
constructed the archive right,

00:30:38.534 --> 00:30:43.334
you can actually also
sort of load it progressively.

00:30:43.334 --> 00:30:45.634
But I don't know
that we've seen

00:30:45.634 --> 00:30:48.667
any type of specific limit
in terms of time-outs

00:30:48.667 --> 00:30:50.334
of amount of content.

00:30:50.334 --> 00:30:51.801
I don't know.
Wade?

00:30:51.801 --> 00:30:53.267
Tinney: Well, I can give you
the non-engineer's

00:30:53.267 --> 00:30:54.834
perspective on it,
because I was asking

00:30:54.834 --> 00:30:56.167
the same question
in the beginning.

00:30:56.167 --> 00:30:57.534
Like, what's--

00:30:57.534 --> 00:30:59.100
You know, 'cause I was involved
in the game design side.

00:30:59.100 --> 00:31:00.267
Like, what is the limit?

00:31:00.267 --> 00:31:01.501
You know, what are
the constraints

00:31:01.501 --> 00:31:02.934
that we're working towards?

00:31:02.934 --> 00:31:04.968
And, you know,
the people on the team

00:31:04.968 --> 00:31:06.234
patiently explained to me

00:31:06.234 --> 00:31:10.267
that it's a difficult
question, you know?

00:31:10.267 --> 00:31:14.367
Because, yeah, you can keep
putting crates onto the screen

00:31:14.367 --> 00:31:16.534
until the computer crashes
and then you know

00:31:16.534 --> 00:31:18.133
how many crates
you can put on the screen,

00:31:18.133 --> 00:31:20.801
but once the crates
have different textures

00:31:20.801 --> 00:31:23.000
and some crates are,
you know,

00:31:23.000 --> 00:31:27.634
crazy tetrahedrons and--
or animating

00:31:27.634 --> 00:31:31.434
and you have, you know,
collision detection happening,

00:31:31.434 --> 00:31:33.334
you know,
in different machines.

00:31:33.334 --> 00:31:35.634
All these things start
to make it very--

00:31:35.634 --> 00:31:38.467
It was really
about figuring out

00:31:38.467 --> 00:31:39.901
what you want to accomplish.

00:31:39.901 --> 00:31:41.968
Getting as close
to that as you can

00:31:41.968 --> 00:31:44.100
and then pushing
and pulling

00:31:44.100 --> 00:31:46.767
until you find--
until you find the boundaries.

00:31:46.767 --> 00:31:49.334
I will say that
I was amazed

00:31:49.334 --> 00:31:52.167
at the fact that
we never really hit

00:31:52.167 --> 00:31:55.367
that performance barrier
with our game.

00:31:55.367 --> 00:31:56.701
And I encourage you
to play it.

00:31:56.701 --> 00:31:58.267
We're gonna make
the demo available

00:31:58.267 --> 00:32:00.901
on our web site
in the next week or so.

00:32:00.901 --> 00:32:04.100
But I have--

00:32:04.100 --> 00:32:07.133
I think I have the oldest
computer in the company

00:32:07.133 --> 00:32:10.400
for some reason and,
you know,

00:32:10.400 --> 00:32:13.567
I think it's a three
or four-year-old ThinkPad

00:32:13.567 --> 00:32:15.934
and it runs totally fine
on that.

00:32:15.934 --> 00:32:19.067
And, you know,
some of our pre-optimized

00:32:19.067 --> 00:32:23.467
Flash applications
chug on my machine.

00:32:23.467 --> 00:32:26.067
So I'm pretty happy
about that.

00:32:26.067 --> 00:32:27.868
I don't know if you have
anything to add.

00:32:27.868 --> 00:32:29.267
Paradiso: Yeah,
that's about right.

00:32:29.267 --> 00:32:30.367
I mean, it's like
a running joke.

00:32:30.367 --> 00:32:31.801
His laptop is the one
we tested it on

00:32:31.801 --> 00:32:33.234
before we put it out
to the world

00:32:33.234 --> 00:32:35.634
'cause it's the lowest end
common denominator.

00:32:35.634 --> 00:32:37.300
Yeah, just to echo
what you said,

00:32:37.300 --> 00:32:38.601
yeah, it's really, like--

00:32:38.601 --> 00:32:40.868
at least we found,
from the rendering end,

00:32:40.868 --> 00:32:42.901
some of it's like, "What are
you doing with those polys?"

00:32:42.901 --> 00:32:46.067
You know, what was
the complication of the shader?

00:32:46.067 --> 00:32:48.868
What's the complexity
of the shader you're using?

00:32:48.868 --> 00:32:51.200
We hit more
of a bottleneck

00:32:51.200 --> 00:32:53.200
with what you're doing
with the JavaScript.

00:32:53.200 --> 00:32:54.634
We had to be more careful
with that,

00:32:54.634 --> 00:32:56.934
how we were doing our math,
how we were using memory,

00:32:56.934 --> 00:32:59.334
and stuff like that than we
did from the rendering end.

00:32:59.334 --> 00:33:04.367
But, yeah, we found ways
around all that stuff.

00:33:04.367 --> 00:33:07.901
McRae: Yeah, so I worked on
an Xbox game

00:33:07.901 --> 00:33:09.834
before we had an Xbox devkit.

00:33:09.834 --> 00:33:12.400
And so I have some experience
on, you know,

00:33:12.400 --> 00:33:16.200
just how you go about finding
the constraints

00:33:16.200 --> 00:33:18.334
and restrictions that
you're dealing with

00:33:18.334 --> 00:33:21.334
when you're working on a new
platform such as this.

00:33:21.334 --> 00:33:25.734
And, you know, the dust
is eventually gonna settle.

00:33:25.734 --> 00:33:27.868
Everything is really
brand new right now,

00:33:27.868 --> 00:33:30.868
so there's a lot of, you know,

00:33:30.868 --> 00:33:33.968
testing that needs to happen.

00:33:33.968 --> 00:33:35.400
You know, for instance,
with Xbox,

00:33:35.400 --> 00:33:38.133
we found that the thing
that was the biggest hit

00:33:38.133 --> 00:33:40.300
was just the bone counts
on the characters.

00:33:40.300 --> 00:33:41.901
And that's why you
eventually saw

00:33:41.901 --> 00:33:44.200
games that had,
you know, 50 or so

00:33:44.200 --> 00:33:47.334
or 100 characters on screen,
you know,

00:33:47.334 --> 00:33:49.467
and then you could approximate
their collisions

00:33:49.467 --> 00:33:51.234
by, you know, just putting
big spheres around them

00:33:51.234 --> 00:33:52.667
and that kind of thing.

00:33:52.667 --> 00:33:55.467
So, you know, we found that
it was bone count

00:33:55.467 --> 00:33:59.167
and it was
collision detection

00:33:59.167 --> 00:34:01.868
and then, you know,
environment polygons

00:34:01.868 --> 00:34:04.868
and that kind of thing started,
you know, seeping in too

00:34:04.868 --> 00:34:07.167
along with the amount
of materials that you had.

00:34:07.167 --> 00:34:13.167
So I would expect
that same sort of, you know,

00:34:13.167 --> 00:34:16.434
pattern to follow here
to some degree.

00:34:16.434 --> 00:34:18.701
But you never know.
We might be surprised.

00:34:18.701 --> 00:34:20.501
Maybe it handles bones great.

00:34:20.501 --> 00:34:23.767
It's just running through
the actual translations

00:34:23.767 --> 00:34:25.934
of the bones
is what slows us down

00:34:25.934 --> 00:34:28.300
and then we find some kind
of optimization there.

00:34:28.300 --> 00:34:30.667
You know, maybe it is polygons
that slows us down.

00:34:30.667 --> 00:34:32.434
Maybe it's just the JavaScript
code itself

00:34:32.434 --> 00:34:34.868
is what's the slowest thing
that holds everything up.

00:34:34.868 --> 00:34:38.300
So it's exciting and I think
it's gonna be

00:34:38.300 --> 00:34:43.868
up to the developers
to, you know, find what happens.

00:34:43.868 --> 00:34:45.734
man: So what I'm
gathering here--

00:34:45.734 --> 00:34:47.434
I was gonna ask a question
similar to that.

00:34:47.434 --> 00:34:49.367
Did you find it was more
the JavaScript side

00:34:49.367 --> 00:34:50.767
or did you find it was
the underneath side?

00:34:50.767 --> 00:34:52.667
I'm gathering it's
the JavaScript side.

00:34:52.667 --> 00:34:54.234
So what I did once
just to play with it

00:34:54.234 --> 00:34:55.501
was I took out--

00:34:55.501 --> 00:34:58.167
I had the discreet card
look and see

00:34:58.167 --> 00:35:00.167
what frames per second
I was getting.

00:35:00.167 --> 00:35:02.734
Ripped out
the discreet card and saw

00:35:02.734 --> 00:35:04.267
what the CPU would do
with it.

00:35:04.267 --> 00:35:07.701
It was probably about
a 15 to 20 frames per second

00:35:07.701 --> 00:35:10.367
difference between the two
from the hardware and software.

00:35:10.367 --> 00:35:12.000
The other thing that
I thought was interesting

00:35:12.000 --> 00:35:14.667
was that
the CPU jumped up 40%.

00:35:14.667 --> 00:35:17.200
But what you're telling me
is it's a little bit different--

00:35:17.200 --> 00:35:20.067
that it requires
more processing capabilities

00:35:20.067 --> 00:35:23.467
from the JS side is where you
guys ran into bottlenecks.

00:35:23.467 --> 00:35:27.567
So what my question is is are
you guys gonna characterize

00:35:27.567 --> 00:35:29.300
some of the performance
that you have,

00:35:29.300 --> 00:35:31.133
or is there ways
to characterize it

00:35:31.133 --> 00:35:33.467
so that we know exactly,
you know, what we can do

00:35:33.467 --> 00:35:35.400
from both ends--
either the native side,

00:35:35.400 --> 00:35:38.501
which is, you know,
the DirectX or OpenGL

00:35:38.501 --> 00:35:42.334
versus the JavaScript--and see
where the bottlenecks are?

00:35:42.334 --> 00:35:44.567
Bridge: I would say I'm not sure
to what extent

00:35:44.567 --> 00:35:47.734
we will characterize it fully.

00:35:47.734 --> 00:35:51.067
I think one of the things that
is very interesting to us

00:35:51.067 --> 00:35:53.868
is basically creating a suite
of benchmarks

00:35:53.868 --> 00:35:56.400
of what the common
operations are that you have

00:35:56.400 --> 00:36:00.267
in a 3-D application--
so anything from sorting

00:36:00.267 --> 00:36:04.534
to collision detections
in physics and things like that.

00:36:04.534 --> 00:36:06.200
Because we found
over and over again

00:36:06.200 --> 00:36:07.934
with browsers in general that
the second you make

00:36:07.934 --> 00:36:10.067
a benchmark, particularly
a JavaScript benchmark,

00:36:10.067 --> 00:36:12.601
everyone jumps on it
and tries to make it faster.

00:36:12.601 --> 00:36:16.767
So I think something like
that will be a good guide

00:36:16.767 --> 00:36:18.868
also in terms of figuring
out applications,

00:36:18.868 --> 00:36:22.300
but will really provide a way
for all the browsers

00:36:22.300 --> 00:36:24.300
to improve the JavaScript
performance,

00:36:24.300 --> 00:36:26.734
which, you know,
is increasing

00:36:26.734 --> 00:36:31.100
at blinding speed right now.

00:36:31.100 --> 00:36:33.033
Paradiso: And another thing
just related to that, quick,

00:36:33.033 --> 00:36:34.868
is, like, sometimes there's
workarounds

00:36:34.868 --> 00:36:36.300
that the plug-in gives you.

00:36:36.300 --> 00:36:38.667
Like, sometimes you'll be doing
a lot of matrix math,

00:36:38.667 --> 00:36:40.801
which doing it in JavaScript,
you know,

00:36:40.801 --> 00:36:43.033
it's a little bit slower than
you'd like it to be sometimes.

00:36:43.033 --> 00:36:44.767
But the plug-in does allow
you to do

00:36:44.767 --> 00:36:46.434
some matrix math within it.

00:36:46.434 --> 00:36:48.267
So when I switched
to doing that,

00:36:48.267 --> 00:36:50.467
in some cases that of course
sped up things a lot.

00:36:50.467 --> 00:36:53.067
So you just got to, you know,
look around

00:36:53.067 --> 00:36:57.567
and you can find ways
around it.

00:36:57.567 --> 00:36:58.901
man: Hi.

00:36:58.901 --> 00:37:00.968
I'm a web application
developer.

00:37:00.968 --> 00:37:05.067
So...well, my question is
do you see a way

00:37:05.067 --> 00:37:09.400
in which O3D could
find a spot

00:37:09.400 --> 00:37:12.501
in web applications
beside games?

00:37:12.501 --> 00:37:15.934
I mean, if you had
to redesign a Gmail

00:37:15.934 --> 00:37:17.968
or Basecamp or whatever,
or YouTube,

00:37:17.968 --> 00:37:20.100
in which way would
you use O3D, like,

00:37:20.100 --> 00:37:23.801
to make the application
richer?

00:37:23.801 --> 00:37:24.934
Tinney: Well--

00:37:24.934 --> 00:37:26.701
Bridge: Go ahead.

00:37:26.701 --> 00:37:28.400
Tinney: There's a couple guys
sitting right behind you

00:37:28.400 --> 00:37:29.767
actually that could probably--

00:37:29.767 --> 00:37:31.868
You should find them after.

00:37:31.868 --> 00:37:33.734
Guys to your other side.

00:37:33.734 --> 00:37:37.200
One of the sandbox demos

00:37:37.200 --> 00:37:39.901
was a team from ABC-Disney

00:37:39.901 --> 00:37:43.434
and they had done
a kind of experimental

00:37:43.434 --> 00:37:47.634
O3D interface to do a catalogue
of their video content.

00:37:47.634 --> 00:37:50.000
So I think there's
a ton of possibilities.

00:37:50.000 --> 00:37:52.000
And for me, the interesting
thing is, you know,

00:37:52.000 --> 00:37:54.634
I think we probably read
about the fact

00:37:54.634 --> 00:37:59.400
that humans can...understand
and wrap their head

00:37:59.400 --> 00:38:03.601
around 3-D--full 3-D spatially
positioned objects--

00:38:03.601 --> 00:38:05.334
quicker than 2-D.

00:38:05.334 --> 00:38:06.601
You know, like, your house.

00:38:06.601 --> 00:38:07.801
You know where everything
is in your house

00:38:07.801 --> 00:38:10.601
and that's a lot
of different objects.

00:38:10.601 --> 00:38:13.000
So I think there's a huge
opportunity there

00:38:13.000 --> 00:38:16.367
to explore more
experimental interfaces

00:38:16.367 --> 00:38:20.567
that take advantage of that
just cognitive fact.

00:38:23.834 --> 00:38:26.701
Bridge: So I think
some ideas that we have,

00:38:26.701 --> 00:38:28.467
I think that there's a lot
of potential,

00:38:28.467 --> 00:38:31.567
as Wade was saying,
in data visualization stuff

00:38:31.567 --> 00:38:34.267
in terms of representing
lots of data.

00:38:34.267 --> 00:38:37.367
Whether it's actually
representing the location

00:38:37.367 --> 00:38:40.234
of an object in the 3-D space,
or interfaces,

00:38:40.234 --> 00:38:42.701
you know, maybe a photo browser
or things like that

00:38:42.701 --> 00:38:46.367
that allow you to flip through
photos very fluidly.

00:38:46.367 --> 00:38:49.234
I think there's also
a lot of applications

00:38:49.234 --> 00:38:51.334
that you could think about
in terms of any product

00:38:51.334 --> 00:38:53.033
that has a physical component.

00:38:53.033 --> 00:38:54.868
So we have a sample
on our site

00:38:54.868 --> 00:38:56.868
which allows you to take,
you know, furniture

00:38:56.868 --> 00:38:59.601
from a sidebar and drag it
into a scene, move it around.

00:38:59.601 --> 00:39:02.801
So you can imagine
shopping for, you know,

00:39:02.801 --> 00:39:04.934
for furniture or other products
that way.

00:39:04.934 --> 00:39:06.734
I think what's going
to need to happen

00:39:06.734 --> 00:39:09.334
in order for that
kind of content to be created

00:39:09.334 --> 00:39:12.367
is O3D is still
very low level.

00:39:12.367 --> 00:39:15.434
We're probably going to need
some even higher level

00:39:15.434 --> 00:39:18.033
JavaScript APIs in order
to really make it easy

00:39:18.033 --> 00:39:19.701
for people to do that--

00:39:19.701 --> 00:39:21.701
things like if you think
about analogies

00:39:21.701 --> 00:39:24.467
of, like, jQuery or MooTools
and all of those sorts of

00:39:24.467 --> 00:39:26.033
JavaScript frameworks
that make it easy

00:39:26.033 --> 00:39:27.934
to do a lot of the common,
you know,

00:39:27.934 --> 00:39:31.400
web 2.0 kind of effects
and things like that.

00:39:31.400 --> 00:39:34.801
So if you have ideas
and 3-D experience,

00:39:34.801 --> 00:39:38.133
I would encourage you
to build something like that

00:39:38.133 --> 00:39:42.934
and send it around 'cause we're
just dying to see that happen.

00:39:42.934 --> 00:39:45.067
[man speaking indistinctly]

00:39:45.067 --> 00:39:48.234
The question was how about
porting Google Earth to it?

00:39:48.234 --> 00:39:51.434
That's something that
we'd certainly like to see,

00:39:51.434 --> 00:39:54.501
but we don't have any
plans to announce right now.

00:40:00.801 --> 00:40:05.133
man: Yeah, I'm curious
about the data format

00:40:05.133 --> 00:40:06.934
for the art assets.

00:40:06.934 --> 00:40:10.000
Like, did you use a standard
one like COLLADA

00:40:10.000 --> 00:40:12.601
or some other format?

00:40:12.601 --> 00:40:15.667
And then also,
after it was in that format,

00:40:15.667 --> 00:40:19.267
did you have to compress it
into a binary

00:40:19.267 --> 00:40:22.801
for when you had it, like,
running in the game,

00:40:22.801 --> 00:40:26.133
or was it you could just leave
it, like, flat?

00:40:26.133 --> 00:40:27.767
Bridge: We get
that question a lot.

00:40:27.767 --> 00:40:31.000
Actually, we don't have any
native data format in O3D.

00:40:31.000 --> 00:40:34.767
Basically what we've provided
is a binary

00:40:34.767 --> 00:40:38.467
that you run offline
that lets you take COLLADA

00:40:38.467 --> 00:40:41.801
and convert it to
a compressed JSON file,

00:40:41.801 --> 00:40:44.667
and then we provided a
corresponding JavaScript file

00:40:44.667 --> 00:40:48.801
that when you want
to unpack that archive

00:40:48.801 --> 00:40:51.701
in your application,
you bring in that JavaScript

00:40:51.701 --> 00:40:54.601
file and essentially run it
to recreate the content

00:40:54.601 --> 00:40:57.067
that you had created.

00:40:57.067 --> 00:40:59.934
But it's not actually
a data format in that

00:40:59.934 --> 00:41:02.634
what we've provided is really
just a sample implementation,

00:41:02.634 --> 00:41:04.834
so if you had content
that you wanted

00:41:04.834 --> 00:41:07.400
to include that was unique
to your application,

00:41:07.400 --> 00:41:09.968
you could take our converter,
which is open source,

00:41:09.968 --> 00:41:12.701
and modify it to include other
information in the archive

00:41:12.701 --> 00:41:14.701
and you could provide your
own corresponding

00:41:14.701 --> 00:41:17.033
JavaScript library so that
the application developer

00:41:17.033 --> 00:41:19.567
has total flexibility
in terms of file format

00:41:19.567 --> 00:41:21.200
and what content to include.

00:41:21.200 --> 00:41:24.200
man: 'Cause that's, like,
on the OpenGL side.

00:41:24.200 --> 00:41:25.868
But, like, for you guys,
for your game,

00:41:25.868 --> 00:41:28.801
like, you came from Maya
or 3D Studio MAX,

00:41:28.801 --> 00:41:32.834
so, like, obviously it's not
gonna read in a MAX file

00:41:32.834 --> 00:41:35.467
or a bip or, like--
how--like--what were--

00:41:35.467 --> 00:41:40.601
McRae: Yeah, I think a less
technical,

00:41:40.601 --> 00:41:43.300
I guess, answer
for you would be, yes.

00:41:43.300 --> 00:41:47.000
You export a COLLADA file.

00:41:47.000 --> 00:41:49.501
We use COLLADA Nextgen.

00:41:49.501 --> 00:41:52.067
It's a special, I guess,
COLLADA exporter.

00:41:52.067 --> 00:41:54.801
It's free.

00:41:54.801 --> 00:41:57.033
And so you export as that.

00:41:57.033 --> 00:42:02.701
You take the d-a-e file and
you drag it over

00:42:02.701 --> 00:42:06.067
a tool that Google has made
that sort of packages

00:42:06.067 --> 00:42:07.334
everything up.

00:42:07.334 --> 00:42:08.667
So the COLLADA file,
you know,

00:42:08.667 --> 00:42:10.934
stores paths and everything
to all your textures

00:42:10.934 --> 00:42:12.868
and all that, you know,
kind of stuff,

00:42:12.868 --> 00:42:16.801
and then when you condition
it with the tool

00:42:16.801 --> 00:42:20.701
that Google supplies,
it makes a t-g-z file,

00:42:20.701 --> 00:42:22.801
I believe,
which is essentially

00:42:22.801 --> 00:42:24.834
like some kind of
an archive file

00:42:24.834 --> 00:42:26.734
that has everything
all in it.

00:42:26.734 --> 00:42:29.601
So it's got your mesh data,
it's got all your textures,

00:42:29.601 --> 00:42:32.000
got your material information,
all that great stuff.

00:42:32.000 --> 00:42:34.734
It's then all packaged in there
and then all you got to do

00:42:34.734 --> 00:42:37.467
if you want to see it
in the, you know,

00:42:37.467 --> 00:42:41.400
in the O3D canvas is you just,
you know, load that object,

00:42:41.400 --> 00:42:44.200
that package, and there it is.

00:42:44.200 --> 00:42:48.367
man: So is that the open format
that you provide,

00:42:48.367 --> 00:42:50.067
like, an example of?

00:42:50.067 --> 00:42:52.667
How it's zipped up
and run through

00:42:52.667 --> 00:42:55.400
the OpenGL libraries or--

00:42:55.400 --> 00:42:56.634
Bridge: Yeah, exactly.

00:42:56.634 --> 00:42:58.367
We provided essentially
a sample

00:42:58.367 --> 00:43:01.701
that does it for COLLADA,
but the way

00:43:01.701 --> 00:43:03.167
that we've implemented it
and the level

00:43:03.167 --> 00:43:05.300
at which it's exposed
is anyone could build

00:43:05.300 --> 00:43:07.167
whatever they wanted
on top of it.

00:43:07.167 --> 00:43:08.801
So if you wanted
to natively support

00:43:08.801 --> 00:43:11.501
something like FBX, you could
build something to do that

00:43:11.501 --> 00:43:13.200
or whatever format
you wanted to do.

00:43:13.200 --> 00:43:14.968
man: Okay.

00:43:14.968 --> 00:43:16.968
Bridge: Yeah, really we were
trying to, again,

00:43:16.968 --> 00:43:20.300
provide the plumbing at sort
of the similar level

00:43:20.300 --> 00:43:24.701
as OpenGL or DirectX would
and not try and make

00:43:24.701 --> 00:43:26.367
any assumptions about
what the developer

00:43:26.367 --> 00:43:28.167
is trying to do with it
so that, you know,

00:43:28.167 --> 00:43:29.968
we could define
a file format maybe

00:43:29.968 --> 00:43:33.267
that was specific for games or
specific for photos

00:43:33.267 --> 00:43:35.801
or things like that, but we want
to enable all of those things

00:43:35.801 --> 00:43:38.100
and not just one.

00:43:38.100 --> 00:43:39.834
man: Hi.
I'm just curious.

00:43:39.834 --> 00:43:42.934
You know, as you continue
to develop O3D

00:43:42.934 --> 00:43:44.501
and you get closer to moving--

00:43:44.501 --> 00:43:46.901
you know, people using ANSYS,
like Android ANSYS

00:43:46.901 --> 00:43:48.667
for browsing the web.

00:43:48.667 --> 00:43:50.934
How does O3 play
in the mobile space,

00:43:50.934 --> 00:43:53.934
considering that right now
the current implementation

00:43:53.934 --> 00:43:56.701
is heavily dependent on,
like, the OpenGL--

00:43:56.701 --> 00:44:00.234
OpenGL ES 2.0 or 1.0
and so forth.

00:44:00.234 --> 00:44:04.701
Bridge: So I think basically
the level that we shot for

00:44:04.701 --> 00:44:08.067
was we think
that program will--

00:44:08.067 --> 00:44:10.033
Graphics is basically
what's going to--

00:44:10.033 --> 00:44:12.367
It's basically the future
of where graphics is going,

00:44:12.367 --> 00:44:13.601
so that's--

00:44:13.601 --> 00:44:16.367
We chose to support that
and that only right now.

00:44:16.367 --> 00:44:18.133
I think what you're
alluding to is that

00:44:18.133 --> 00:44:20.000
some of the handsets
on the market today

00:44:20.000 --> 00:44:23.067
don't actually support
all those capabilities.

00:44:23.067 --> 00:44:27.767
Really what we're very
interested in supplying O3D

00:44:27.767 --> 00:44:30.367
and 3-D graphics
for the web capability

00:44:30.367 --> 00:44:32.601
is for mobile handsets
as well.

00:44:32.601 --> 00:44:35.534
We're hoping that
that Moore's Law

00:44:35.534 --> 00:44:38.667
and sort of how quickly people
replace handsets

00:44:38.667 --> 00:44:40.234
will help us through that
in that

00:44:40.234 --> 00:44:43.634
basically if all of the handsets
that are being produced

00:44:43.634 --> 00:44:45.701
today and that are coming
to market

00:44:45.701 --> 00:44:49.000
will support OpenGL ES 2.0,
which provides

00:44:49.000 --> 00:44:51.434
the functionality or a similar
set of functionality

00:44:51.434 --> 00:44:53.667
as we require with our API.

00:44:53.667 --> 00:44:56.334
So we're betting
on the future a little bit,

00:44:56.334 --> 00:44:58.534
but it's definitely something
that we want to look at.

00:45:02.701 --> 00:45:05.501
man: I'm gonna
jump in one more time.

00:45:05.501 --> 00:45:07.200
Have you thought
about encryption?

00:45:07.200 --> 00:45:10.067
Data encryption
or anything like that?

00:45:10.067 --> 00:45:13.901
Bridge: So we don't provide
any encryption

00:45:13.901 --> 00:45:16.067
or DRM type of solution.

00:45:16.067 --> 00:45:17.300
It's a question
that we get a lot

00:45:17.300 --> 00:45:19.901
from content developers.

00:45:19.901 --> 00:45:21.934
Our main suggestion
in that regard

00:45:21.934 --> 00:45:24.100
is that if you're really
concerned

00:45:24.100 --> 00:45:26.801
about protecting
at least your code,

00:45:26.801 --> 00:45:30.100
you can use JavaScript
obfuscation, compilation

00:45:30.100 --> 00:45:31.567
in order to do a lot of that.

00:45:31.567 --> 00:45:33.501
man: I'm thinking more
in terms of the 3-D data

00:45:33.501 --> 00:45:35.868
rather than the code itself.

00:45:35.868 --> 00:45:37.968
Bridge: The 3-D data,
we don't provide

00:45:37.968 --> 00:45:40.234
any support for encryption.

00:45:40.234 --> 00:45:44.367
So maybe all
of you can talk about

00:45:44.367 --> 00:45:46.567
what your thoughts
were about that.

00:45:46.567 --> 00:45:48.634
But what we found in talking
to developers

00:45:48.634 --> 00:45:50.667
is that they're more concerned
with protecting

00:45:50.667 --> 00:45:53.701
the actual code
and their shaders

00:45:53.701 --> 00:45:55.968
rather than protecting
the assets,

00:45:55.968 --> 00:45:58.400
since most games
that you buy today,

00:45:58.400 --> 00:45:59.767
you know,
if you really want to,

00:45:59.767 --> 00:46:01.167
you can unpack
all the assets.

00:46:01.167 --> 00:46:03.868
Then it really becomes sort
of a legal issue

00:46:03.868 --> 00:46:05.601
of enforcing the IP
in that respect.

00:46:05.601 --> 00:46:11.300
But I don't know if you have
other thoughts on that there.

00:46:11.300 --> 00:46:12.667
Paradiso: We had a thought.

00:46:12.667 --> 00:46:14.133
We did think about the code
and the shaders,

00:46:14.133 --> 00:46:15.400
doing obfuscation,
and stuff like that.

00:46:15.400 --> 00:46:17.267
As far as the 3-D assets,

00:46:17.267 --> 00:46:19.968
I have a question for you.

00:46:19.968 --> 00:46:22.701
Since we do have access to the
importer and all that stuff,

00:46:22.701 --> 00:46:25.934
we could write our own
encryption-decryption stuff,

00:46:25.934 --> 00:46:27.634
you know, right within the--

00:46:27.634 --> 00:46:29.234
right within
the game code itself.

00:46:29.234 --> 00:46:32.400
So you could maybe roll your own
at that point.

00:46:32.400 --> 00:46:33.534
That may work out for you.

00:46:33.534 --> 00:46:35.467
Bridge: Sure.
That's a great idea.

00:46:40.367 --> 00:46:45.367
Any other questions?

00:46:45.367 --> 00:46:46.701
Tinney: Perfect clarity.

00:46:46.701 --> 00:46:48.033
We've reached perfect clarity
in all things.

00:46:48.033 --> 00:46:49.300
Bridge: Right, exactly.

00:46:49.300 --> 00:46:51.801
Everyone knows what O3D is
and how to use it.

00:46:51.801 --> 00:46:54.200
[man speaking indistinctly]

00:46:54.200 --> 00:46:55.868
Sorry?

00:46:55.868 --> 00:46:59.300
Could you use the--

00:46:59.300 --> 00:47:01.534
So the--

00:47:01.534 --> 00:47:04.534
Yeah, so the question is do we
have a lot of sample code?

00:47:04.534 --> 00:47:07.267
And the answer is, yes,
we have a ton of sample codes.

00:47:07.267 --> 00:47:09.300
So I think we have over
40 samples at this point

00:47:09.300 --> 00:47:11.567
and we're adding
to it all the time.

00:47:11.567 --> 00:47:15.334
It's code.google.com/apis/o3d.

00:47:15.334 --> 00:47:18.501
So if you go there,
you can browse it,

00:47:18.501 --> 00:47:20.367
and if you have
the plug-in installed,

00:47:20.367 --> 00:47:21.901
then you can view
a lot of things,

00:47:21.901 --> 00:47:27.467
including the Beach demo
and the demo that we actually--

00:47:27.467 --> 00:47:31.200
that Greg showed off yesterday,
we'll also be posting.

00:47:31.200 --> 00:47:34.667
Another neat thing is since O3D
is completely open source,

00:47:34.667 --> 00:47:38.000
all of the samples
and the assets

00:47:38.000 --> 00:47:40.334
to the samples and all
of that is also open source.

00:47:40.334 --> 00:47:43.467
So if you want
to create a mash-up

00:47:43.467 --> 00:47:47.167
of a robot dancing on an island
or something like that,

00:47:47.167 --> 00:47:49.767
you can certainly
go ahead and do that.

00:47:49.767 --> 00:47:52.701
[man speaking indistinctly]

00:47:52.701 --> 00:47:55.167
Kung fu movie.

00:47:55.167 --> 00:47:57.267
Oh, okay.

00:47:57.267 --> 00:48:00.234
Definitely.

00:48:00.234 --> 00:48:01.767
Tinney: Also I just wanted
to mention

00:48:01.767 --> 00:48:03.567
we're gonna be posting over
the next couple weeks

00:48:03.567 --> 00:48:08.534
a bunch of kind of behind
the scenes information

00:48:08.534 --> 00:48:11.234
and images from our process of 
working on it

00:48:11.234 --> 00:48:14.701
over those five weeks and
looking forward

00:48:14.701 --> 00:48:16.634
to connecting with people.

00:48:16.634 --> 00:48:18.000
And if people
have questions for us,

00:48:18.000 --> 00:48:19.434
then we're happy
to answer them.

00:48:19.434 --> 00:48:21.868
And we'd love to get
a community of developers

00:48:21.868 --> 00:48:24.834
going around it.

00:48:24.834 --> 00:48:28.367
Bridge: Awesome, so if no one
has any other questions,

00:48:28.367 --> 00:48:31.234
thanks a lot and I think
we'll stick around here

00:48:31.234 --> 00:48:36.434
if there's anything you didn't
want to ask on the mic.

00:48:36.434 --> 00:48:37.534
Thank you.

