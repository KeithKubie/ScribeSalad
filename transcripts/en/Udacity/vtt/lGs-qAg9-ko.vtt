WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:03.820
Okay, so we have our VLIW backward compatibility quiz.

00:00:03.820 --> 00:00:07.980
Let's work on a solution. We had a simple

00:00:07.980 --> 00:00:11.460
VLIW that had 64-bit instructions and we were doing

00:00:11.460 --> 00:00:13.910
one, one of those at a time and each

00:00:13.910 --> 00:00:16.752
of those were equivalent to two normal operations. And

00:00:16.752 --> 00:00:18.864
now we want to have a VLIW processor with

00:00:18.864 --> 00:00:21.360
four operations per cycle, and the way we want

00:00:21.360 --> 00:00:25.328
to do that, while maintaining backward compatibility with the original

00:00:25.328 --> 00:00:27.760
version, is to fetch the code and execute two

00:00:27.760 --> 00:00:30.740
of those 64 bit instructions per cycle. The questions

00:00:30.740 --> 00:00:34.880
is, is this new processor a VLIW processor? The

00:00:34.880 --> 00:00:38.289
correct answer here is no, not really. Here's why.

00:00:38.289 --> 00:00:41.329
In a real VLIW processor, the compiler tells us

00:00:41.329 --> 00:00:44.597
which operations can be done in parallel by putting

00:00:44.597 --> 00:00:47.485
them in the same instruction, and then we try

00:00:47.485 --> 00:00:50.810
to do only one of those instructions per cycle.

00:00:50.810 --> 00:00:52.840
Thus, every cycle we are guaranteed that

00:00:52.840 --> 00:00:57.510
we're going independent operations. When we run programs

00:00:57.510 --> 00:01:00.465
compiled for this processor. The compiler only

00:01:00.465 --> 00:01:02.607
got on these, that the two operations in

00:01:02.607 --> 00:01:05.358
the same instruction are in parallel. In

00:01:05.358 --> 00:01:08.550
fact, if we have something like this, where

00:01:08.550 --> 00:01:11.742
we have a data dependence, the compiler will

00:01:11.742 --> 00:01:16.370
put these operations into two separate VLIW instructions.

00:01:16.370 --> 00:01:19.208
And put NOPs for the second operation to ensure that

00:01:19.208 --> 00:01:22.432
we first do this, and then we do this. If this

00:01:22.432 --> 00:01:25.160
processor now is trying to fetch the code and execute

00:01:25.160 --> 00:01:28.942
two such 64-bit instructions per cycle, it might easily fetch these

00:01:28.942 --> 00:01:30.988
two and try to do them in the same cycle,

00:01:30.988 --> 00:01:35.060
thus violating this dependence. So, this type of processor is not

00:01:35.060 --> 00:01:37.855
a true VLIW processor because it would have to check

00:01:37.855 --> 00:01:42.210
for dependencies which makes it similar to a normal superscalar processor.

