WEBVTT
Kind: captions
Language: en

00:00:07.100 --> 00:00:08.955
ALI AFSHAR: And hello, everyone,
and welcome to the

00:00:08.955 --> 00:00:11.110
Google Drive SDK
question time.

00:00:11.110 --> 00:00:13.220
I'm Ali, and with
me today is--

00:00:13.220 --> 00:00:13.530
ALAIN VONGSOUVANH: Alain.

00:00:13.530 --> 00:00:15.350
Nice to meet you.

00:00:15.350 --> 00:00:16.540
ALI AFSHAR: So we're going
to go through some of the

00:00:16.540 --> 00:00:18.715
questions we've been asked.

00:00:18.715 --> 00:00:22.800
And Alain, our expert here, is
going to give us some answers.

00:00:22.800 --> 00:00:24.840
If you don't know, we
answer technical

00:00:24.840 --> 00:00:26.040
questions on Stack Overflow.

00:00:26.040 --> 00:00:28.790
So if you have any questions,
please ask them there, and

00:00:28.790 --> 00:00:30.670
they will be dealt
with immediately.

00:00:30.670 --> 00:00:32.900
ALAIN VONGSOUVANH: Make sure
to tag them with the tag

00:00:32.900 --> 00:00:37.570
Google-Drive-SDK, and it should
appear on our Stack

00:00:37.570 --> 00:00:40.360
Overflow stream.

00:00:40.360 --> 00:00:42.410
ALI AFSHAR: So let's
get started.

00:00:42.410 --> 00:00:47.230
How can FILESTREAM serve matrix
be API queried from

00:00:47.230 --> 00:00:48.820
Google Drive?

00:00:48.820 --> 00:00:51.970
Let's say I push a video to
Google Drive, I share the

00:00:51.970 --> 00:00:54.120
video link with various users.

00:00:54.120 --> 00:00:58.320
Is there a way to obtain the
number of bytes served, and by

00:00:58.320 --> 00:01:02.040
whom, or of some unique ID?

00:01:02.040 --> 00:01:02.305
Alain?

00:01:02.305 --> 00:01:04.170
ALAIN VONGSOUVANH: Well, this
information is not yet

00:01:04.170 --> 00:01:05.590
available for the API.

00:01:05.590 --> 00:01:07.980
But it's kind of a good
future request.

00:01:07.980 --> 00:01:09.840
Like, we might consider it.

00:01:09.840 --> 00:01:13.860
Actually, it's the first time
we've had this future request.

00:01:13.860 --> 00:01:17.500
But right now, as a work-around
the data has to be

00:01:17.500 --> 00:01:22.220
served through either JavaScript
client application

00:01:22.220 --> 00:01:24.350
or server application.

00:01:24.350 --> 00:01:33.680
So the matrix can be stored in
the application instead.

00:01:33.680 --> 00:01:37.740
Because this information
is not yet available.

00:01:37.740 --> 00:01:39.310
ALI AFSHAR: I think it would be
a useful feature, actually.

00:01:39.310 --> 00:01:42.080
But unfortunately, you can't
do that directly.

00:01:42.080 --> 00:01:46.860
And so you're talking about
serving files using

00:01:46.860 --> 00:01:51.440
JavaScript, or however, using
a server application.

00:01:51.440 --> 00:01:53.610
Is that the only way you
can download files?

00:01:53.610 --> 00:01:55.060
ALAIN VONGSOUVANH:
Actually, no.

00:01:55.060 --> 00:02:00.200
Since last week, we introduced
the web content link which is

00:02:00.200 --> 00:02:03.310
a link you can copy and paste
into a web browser.

00:02:03.310 --> 00:02:08.389
If a file is shared with the
public, the browser will

00:02:08.389 --> 00:02:10.330
simply download the
file's content.

00:02:10.330 --> 00:02:14.250
And if the file's private,
it will use cookie

00:02:14.250 --> 00:02:16.870
authentications to make sure
of their current user has

00:02:16.870 --> 00:02:18.360
access to the file's content.

00:02:18.360 --> 00:02:21.460
And then download the file,
if this is the case.

00:02:21.460 --> 00:02:24.960
ALI AFSHAR: OK, so just to get
that clear, your application

00:02:24.960 --> 00:02:28.160
can give someone a URL, and they
can download that URL if

00:02:28.160 --> 00:02:30.750
they're already authorized into
their Google services.

00:02:30.750 --> 00:02:31.250
ALAIN VONGSOUVANH:
That's correct.

00:02:31.250 --> 00:02:32.280
ALI AFSHAR: Wow, that's
pretty cool.

00:02:32.280 --> 00:02:35.060
ALAIN VONGSOUVANH: Even if
you're serving a web page, for

00:02:35.060 --> 00:02:40.680
instance, you can put an image
web content link as the src

00:02:40.680 --> 00:02:43.400
attribute of an image
tag, and it will be

00:02:43.400 --> 00:02:46.260
served on the web browser.

00:02:46.260 --> 00:02:48.620
ALI AFSHAR: Great.

00:02:48.620 --> 00:02:52.010
ALAIN VONGSOUVANH: Regarding
the matrix for a file's

00:02:52.010 --> 00:02:52.800
content, [INAUDIBLE]

00:02:52.800 --> 00:02:54.910
there are many things
to consider.

00:02:54.910 --> 00:02:57.310
Like should the matrix be
shared amongst different

00:02:57.310 --> 00:02:58.080
applications?

00:02:58.080 --> 00:03:03.800
Should it be global to a user,
to the rest of the world?

00:03:03.800 --> 00:03:05.060
What do you think?

00:03:05.060 --> 00:03:06.340
ALI AFSHAR: Yeah, I think those
are important things,

00:03:06.340 --> 00:03:08.300
and we'd have to really
think about them.

00:03:08.300 --> 00:03:10.610
If the file is shared with you,
should you be able to

00:03:10.610 --> 00:03:13.570
access the download information
on that?

00:03:13.570 --> 00:03:15.920
Or should it just be for the
owner of the file, or the

00:03:15.920 --> 00:03:17.130
creator of the file?

00:03:17.130 --> 00:03:19.490
Both the application
or the user?

00:03:19.490 --> 00:03:21.910
So I think those are things that
we'd have to think about.

00:03:21.910 --> 00:03:23.980
But yes, thank you, we'll
take that future

00:03:23.980 --> 00:03:26.610
request away with us.

00:03:26.610 --> 00:03:29.750
So on to the next question.

00:03:29.750 --> 00:03:31.030
I read question earlier.

00:03:31.030 --> 00:03:34.205
Google Apps domains
Drive Migrator.

00:03:34.205 --> 00:03:39.960
Is it possible to build cross
domain Drive Migrator?

00:03:39.960 --> 00:03:43.290
The Docs List API was great, but
it doesn't support files.

00:03:43.290 --> 00:03:45.370
I should say that's wrong
actually, it does support

00:03:45.370 --> 00:03:46.850
files and did support files.

00:03:46.850 --> 00:03:50.260
But I guess someone's looking
to migrate all of the files

00:03:50.260 --> 00:03:53.470
from one domain over
to another domain.

00:03:53.470 --> 00:03:55.580
How would you go about
doing that, Alain?

00:03:55.580 --> 00:03:57.190
ALAIN VONGSOUVANH: Migrating
of files is pretty easy.

00:03:57.190 --> 00:04:00.240
You can simply download the
content and re-upload to the

00:04:00.240 --> 00:04:00.890
new domain.

00:04:00.890 --> 00:04:05.040
But I think the tricky part he's
mentioning is the ECHO.

00:04:05.040 --> 00:04:07.970
How to transfer the ECHO from
one domain to the new one.

00:04:07.970 --> 00:04:09.940
ALI AFSHAR: So can you tell
us what you mean by ECHO?

00:04:09.940 --> 00:04:10.840
ALAIN VONGSOUVANH:
The permissions.

00:04:10.840 --> 00:04:16.709
As many of you already know,
Google Drive lets you share a

00:04:16.709 --> 00:04:19.390
file with different users.

00:04:19.390 --> 00:04:23.100
That can be a specific user, a
group, a domain, or the rest

00:04:23.100 --> 00:04:24.190
of the world.

00:04:24.190 --> 00:04:29.840
And every file has a list of
permissions which can be read

00:04:29.840 --> 00:04:33.360
permissions, so the user has
read-only access to a file,

00:04:33.360 --> 00:04:38.040
write permission, a user can
read and write on the file, or

00:04:38.040 --> 00:04:41.300
commenting permission, so the
user can read the file and

00:04:41.300 --> 00:04:43.040
comment on the file.

00:04:43.040 --> 00:04:44.950
ALI AFSHAR: Right,
so how would you

00:04:44.950 --> 00:04:46.140
get about doing that?

00:04:46.140 --> 00:04:47.600
ALAIN VONGSOUVANH: Well
there's the tricky

00:04:47.600 --> 00:04:49.530
part with Drive API.

00:04:49.530 --> 00:04:52.420
Because the permission feed
doesn't return the email

00:04:52.420 --> 00:04:53.070
address anymore.

00:04:53.070 --> 00:04:57.240
You only get the display name
as a variable on Google+, or

00:04:57.240 --> 00:05:01.410
using the user profile
information.

00:05:01.410 --> 00:05:06.170
So the way to do it would be
to try to match the user ID

00:05:06.170 --> 00:05:09.110
return by the permission--

00:05:09.110 --> 00:05:11.930
by the Drive API on permissions
feed, and match it

00:05:11.930 --> 00:05:15.410
with the new user's ID.

00:05:15.410 --> 00:05:19.000
Otherwise, I don't see
any work-around.

00:05:19.000 --> 00:05:21.445
ALI AFSHAR: So they're
a bit stuck there,

00:05:21.445 --> 00:05:23.002
actually for that case.

00:05:23.002 --> 00:05:27.080
As Alain says, rightly, you
could create the users, or the

00:05:27.080 --> 00:05:30.420
users could already exist in the
target domain, the domain

00:05:30.420 --> 00:05:31.970
you're going to be saving to.

00:05:31.970 --> 00:05:35.230
You would go through, find
them, and match the IDs.

00:05:35.230 --> 00:05:36.813
And then you would do that.

00:05:36.813 --> 00:05:38.063
[INAUDIBLE].

00:05:41.160 --> 00:05:42.670
ALAIN VONGSOUVANH: It might
even require us using much

00:05:42.670 --> 00:05:47.260
more APIs, such as some of the
domain admin's APIs, to

00:05:47.260 --> 00:05:50.490
retrieve a user's data, such as
their email address and the

00:05:50.490 --> 00:05:53.340
full name, their ID.

00:05:53.340 --> 00:05:56.410
And do the same on the new
domain and store both data,

00:05:56.410 --> 00:06:00.280
and try to do a match.

00:06:00.280 --> 00:06:02.220
ALI AFSHAR: So that's what
you would do, then.

00:06:02.220 --> 00:06:05.040
You would create the map
yourself and then map the

00:06:05.040 --> 00:06:06.806
files like that.

00:06:06.806 --> 00:06:07.210
ALAIN VONGSOUVANH:
That's correct.

00:06:07.210 --> 00:06:09.370
ALI AFSHAR: OK, great.

00:06:09.370 --> 00:06:12.310
All right, thank you, Alain.

00:06:12.310 --> 00:06:17.576
How do I get notification when
a user deletes a file?

00:06:17.576 --> 00:06:19.350
ALAIN VONGSOUVANH: Well, push
notifications is a major

00:06:19.350 --> 00:06:21.280
future request.

00:06:21.280 --> 00:06:23.250
It's been asked for years.

00:06:23.250 --> 00:06:25.670
It's not yet available.

00:06:25.670 --> 00:06:27.610
Hopefully, we'll be able
to provide these to our

00:06:27.610 --> 00:06:28.370
developers.

00:06:28.370 --> 00:06:32.010
In the meantime, the only way to
get change notification is

00:06:32.010 --> 00:06:35.330
to pull the Drive API.

00:06:35.330 --> 00:06:39.360
Pulling the list of files can
require lots of resource,

00:06:39.360 --> 00:06:43.000
because you get lots of data,
and have to process

00:06:43.000 --> 00:06:46.085
[? change ?] over the updated
time and know if the file has

00:06:46.085 --> 00:06:46.940
changed or not.

00:06:46.940 --> 00:06:49.950
So that's why the Drive API
provides a change feed, but

00:06:49.950 --> 00:06:52.040
only returns changes that
occurred after a

00:06:52.040 --> 00:06:54.030
specific change ID.

00:06:54.030 --> 00:06:56.970
And when a user [INAUDIBLE] a
file, this information is

00:06:56.970 --> 00:06:59.800
provided for the changes feed.

00:06:59.800 --> 00:07:02.510
ALI AFSHAR: So can you just
say how that would look?

00:07:02.510 --> 00:07:06.410
If the file's been deleted, is
there information about the

00:07:06.410 --> 00:07:07.890
file in the changes feed?

00:07:07.890 --> 00:07:08.520
ALAIN VONGSOUVANH:
That's correct.

00:07:08.520 --> 00:07:12.960
You get a change item with the
file ID, and a deleted

00:07:12.960 --> 00:07:15.380
attribute, which is set
to true, if the

00:07:15.380 --> 00:07:17.290
file has been deleted.

00:07:17.290 --> 00:07:18.580
ALI AFSHAR: And in this changes
feed, how would you

00:07:18.580 --> 00:07:21.860
differentiate that entry from
an entry where a file has

00:07:21.860 --> 00:07:23.230
simply be modified?

00:07:23.230 --> 00:07:26.440
ALAIN VONGSOUVANH: Well, the
deleted attribute won't be

00:07:26.440 --> 00:07:30.180
provided on the change item, and
the file's metadata would

00:07:30.180 --> 00:07:32.130
be included instead.

00:07:32.130 --> 00:07:33.580
ALI AFSHAR: So why don't
we include the file

00:07:33.580 --> 00:07:35.490
metadata for a delete?

00:07:35.490 --> 00:07:37.990
ALAIN VONGSOUVANH: Because this
is simply because a file

00:07:37.990 --> 00:07:40.850
has been deleted so we don't
have this information anymore.

00:07:40.850 --> 00:07:42.560
ALI AFSHAR: Sorry, I asked you
a trick question there.

00:07:42.560 --> 00:07:43.900
ALI AFSHAR: No worries.

00:07:43.900 --> 00:07:45.150
He's used it.

00:07:47.430 --> 00:07:49.090
Google Drive API Python.

00:07:52.120 --> 00:07:52.390
ALI AFSHAR: [INAUDIBLE]

00:07:52.390 --> 00:07:53.480
question is there?

00:07:53.480 --> 00:07:58.570
In order to write a desktop
Python app using Google Drive

00:07:58.570 --> 00:07:58.630
[INAUDIBLE]

00:07:58.630 --> 00:08:02.590
Twisted with Drive SDK, which
makes the thing complicated

00:08:02.590 --> 00:08:05.260
and difficult to find
useful stuffs.

00:08:05.260 --> 00:08:07.450
Can anyone give some
useful information?

00:08:07.450 --> 00:08:08.740
Well, have you used Twisted?

00:08:08.740 --> 00:08:10.920
I'm a long time user
of Twisted.

00:08:10.920 --> 00:08:11.960
ALAIN VONGSOUVANH: I've
never tried it.

00:08:11.960 --> 00:08:14.160
ALI AFSHAR: OK, so for those of
yo that don't know Twisted

00:08:14.160 --> 00:08:17.030
is an asynchronous
Python networking

00:08:17.030 --> 00:08:19.090
library stroke framework.

00:08:19.090 --> 00:08:21.700
I'd like to think of it
more as a library.

00:08:21.700 --> 00:08:24.430
What it does is it runs a
reactor in the background

00:08:24.430 --> 00:08:27.730
that's a long running process
that schedules various network

00:08:27.730 --> 00:08:29.550
activities, and other
things that can be

00:08:29.550 --> 00:08:30.700
running for a long time.

00:08:30.700 --> 00:08:32.710
So you can integrate user
interface-- that's another

00:08:32.710 --> 00:08:35.210
thing that runs for
a long time--

00:08:35.210 --> 00:08:35.970
into that.

00:08:35.970 --> 00:08:40.240
Now, Twisted itself asks you
to write code in a special

00:08:40.240 --> 00:08:42.380
way, and it has its
own HTTP client.

00:08:42.380 --> 00:08:45.610
And unfortunately, our client
library isn't directly

00:08:45.610 --> 00:08:47.160
compatible with that.

00:08:47.160 --> 00:08:50.080
So there are other tricks
around that.

00:08:50.080 --> 00:08:53.460
And what you essentially have to
do is, every time you want

00:08:53.460 --> 00:08:55.150
to make an API request,
you have to

00:08:55.150 --> 00:08:57.080
delegate that to a thread.

00:08:57.080 --> 00:08:59.630
And it's dedicated to a
thread and it runs.

00:08:59.630 --> 00:09:03.490
And when it's finished, it
calls back the response.

00:09:03.490 --> 00:09:06.210
Now, the callback mechanism
in Twisted uses

00:09:06.210 --> 00:09:07.720
something called deferreds.

00:09:07.720 --> 00:09:11.640
Which is an object that returns
immediately, but later

00:09:11.640 --> 00:09:14.870
has a call back, or in an error
case-- an errback, they

00:09:14.870 --> 00:09:16.460
call it-- that is called.

00:09:16.460 --> 00:09:20.450
So what you have to do there is
you have to defer each API

00:09:20.450 --> 00:09:22.490
call to a thread and wait
for the response.

00:09:22.490 --> 00:09:23.980
And that's if you're
using Twisted.

00:09:23.980 --> 00:09:26.410
Now, I've actually got some
sample code because I use

00:09:26.410 --> 00:09:28.960
Twisted, and I have used
it with the Drive API.

00:09:28.960 --> 00:09:32.560
So I'll make sure I get some
sample code to you, Robin W.

00:09:32.560 --> 00:09:33.940
Thanks for asking
that question.

00:09:33.940 --> 00:09:37.460
If you haven't tried Twisted,
and you're a fan of Python,

00:09:37.460 --> 00:09:40.440
and you're writing any network
application, or any demon kind

00:09:40.440 --> 00:09:42.240
of application, it's
something that you

00:09:42.240 --> 00:09:43.790
really should consider.

00:09:43.790 --> 00:09:46.680
Some people don't like it, but I
think it's really fantastic.

00:09:46.680 --> 00:09:51.400
Excellent integration, very well
tested, and as far as I

00:09:51.400 --> 00:09:54.200
can tell, some of the best
Python developers in the world

00:09:54.200 --> 00:09:56.540
are people who work
on this library.

00:09:56.540 --> 00:09:58.190
So Twisted is great.

00:10:02.300 --> 00:10:03.470
Next question.

00:10:03.470 --> 00:10:07.720
Query for a list of files and
folders in the root directory.

00:10:07.720 --> 00:10:10.360
I would like to get a list of
files and folders in the root

00:10:10.360 --> 00:10:13.730
directory without having to sort
through all the files.

00:10:13.730 --> 00:10:16.080
Is there a query that
would do this?

00:10:16.080 --> 00:10:16.460
ALAIN VONGSOUVANH: Nice.

00:10:16.460 --> 00:10:17.720
Good question.

00:10:17.720 --> 00:10:21.130
Well actually you have queue
query parameter, which

00:10:21.130 --> 00:10:24.130
supports a simple language
that you can use.

00:10:24.130 --> 00:10:29.470
And to query files that are in
the root directory, you can

00:10:29.470 --> 00:10:32.530
send a request to the
file's [INAUDIBLE]

00:10:32.530 --> 00:10:37.950
end-point, specifying the query
parameter, Q equals root

00:10:37.950 --> 00:10:39.000
in parents.

00:10:39.000 --> 00:10:44.250
Root is an alias to specify that
you want files that are

00:10:44.250 --> 00:10:45.940
in the root directory.

00:10:45.940 --> 00:10:51.130
ALI AFSHAR: OK, so
[INAUDIBLE].

00:10:51.130 --> 00:10:52.470
ALAIN VONGSOUVANH: Yes,
that's correct.

00:10:52.470 --> 00:10:53.220
ALI AFSHAR: One thing I just
want to clear up, are there

00:10:53.220 --> 00:10:55.490
folders in the root directory?

00:10:55.490 --> 00:10:57.510
ALAIN VONGSOUVANH: You can
specify, as well, [? MIME ?]

00:10:57.510 --> 00:10:59.800
type in the query parameter.

00:10:59.800 --> 00:11:03.010
And the queue query
[INAUDIBLE]

00:11:03.010 --> 00:11:05.795
search parameters such
as not, and--

00:11:05.795 --> 00:11:08.090
and that's it.

00:11:08.090 --> 00:11:09.370
ALI AFSHAR: So what you're
saying is that you can join

00:11:09.370 --> 00:11:11.750
these search clauses, and you
can refine you're query?

00:11:11.750 --> 00:11:13.238
ALAIN VONGSOUVANH:
That's correct.

00:11:13.238 --> 00:11:14.427
ALI AFSHAR: So other interesting
thing you

00:11:14.427 --> 00:11:16.770
mentioned was the alias root.

00:11:16.770 --> 00:11:19.910
So the root folder is just a
folder like any other folder

00:11:19.910 --> 00:11:21.170
in Drive, is that right?

00:11:21.170 --> 00:11:21.400
ALAIN VONGSOUVANH: Yes.

00:11:21.400 --> 00:11:22.210
That's correct.

00:11:22.210 --> 00:11:24.860
ALI AFSHAR: So what
is this root?

00:11:24.860 --> 00:11:28.830
ALAIN VONGSOUVANH: This is
required because the root ID--

00:11:28.830 --> 00:11:32.600
the root for the ID can
be different from

00:11:32.600 --> 00:11:34.430
among each of the users.

00:11:34.430 --> 00:11:37.000
That's why you have an
alias, to simply

00:11:37.000 --> 00:11:40.020
refer to the root folder.

00:11:40.020 --> 00:11:42.380
ALI AFSHAR: Ok, so that makes
that nice and easy.

00:11:42.380 --> 00:11:45.460
That's one of the cases the
wasn't particularly easy with

00:11:45.460 --> 00:11:48.500
the Documents List API, but
now it's made much easier.

00:11:48.500 --> 00:11:49.750
So great.

00:11:54.030 --> 00:11:56.160
Here's a question
with some code.

00:11:56.160 --> 00:12:01.110
Google Drive API download
file Get IO error.

00:12:01.110 --> 00:12:02.130
ALAIN VONGSOUVANH:
I think I've seen

00:12:02.130 --> 00:12:03.450
this question earlier.

00:12:03.450 --> 00:12:07.140
And it was because of a typo
on the documentation which

00:12:07.140 --> 00:12:10.100
will get fixed today,
hopefully.

00:12:10.100 --> 00:12:10.910
Yes.

00:12:10.910 --> 00:12:14.580
The documentation had
been written maybe

00:12:14.580 --> 00:12:15.540
three months ago.

00:12:15.540 --> 00:12:19.010
And the client library changed
between now and then.

00:12:19.010 --> 00:12:22.260
So we need to update our
documentation to reflect that.

00:12:22.260 --> 00:12:26.100
ALI AFSHAR: So instead of
calling Get IO, which is just

00:12:26.100 --> 00:12:30.200
a method on the service, the
IO is now an instance,

00:12:30.200 --> 00:12:31.790
instance attribute.

00:12:31.790 --> 00:12:33.090
OK, great.

00:12:33.090 --> 00:12:34.760
So typo.

00:12:34.760 --> 00:12:36.770
If you find something wrong with
our documentation please

00:12:36.770 --> 00:12:37.360
let us know.

00:12:37.360 --> 00:12:40.070
We're keen to have it perfect
and up to date at all times.

00:12:40.070 --> 00:12:43.030
So this is a great
example of that.

00:12:45.720 --> 00:12:47.170
ASP.NET?

00:12:47.170 --> 00:12:49.600
ALAIN VONGSOUVANH: Oh, sorry,
I'm not familiar with this.

00:12:49.600 --> 00:12:50.760
You want to give it a shot?

00:12:50.760 --> 00:12:51.650
ALI AFSHAR: Well let's
have a read.

00:12:51.650 --> 00:12:53.130
Why not?

00:12:53.130 --> 00:12:54.980
It will be a challenge for us.

00:12:54.980 --> 00:12:59.700
External ASP.NET MVC application
accessing files on

00:12:59.700 --> 00:13:02.440
Google Drive.

00:13:02.440 --> 00:13:05.120
ALAIN VONGSOUVANH: Well, I
believe the doctor edit sample

00:13:05.120 --> 00:13:09.290
application we have in
.NET is using MVC.

00:13:09.290 --> 00:13:11.590
Unfortunately it's in C#.

00:13:11.590 --> 00:13:14.390
There might be an easy way to
understand C# and transform it

00:13:14.390 --> 00:13:18.770
into ASP.NET but we're
not expert in that.

00:13:18.770 --> 00:13:21.240
ALI AFSHAR: So we're no experts,
but as far as I know,

00:13:21.240 --> 00:13:23.380
ASP.NET you can write
it in C#.

00:13:23.380 --> 00:13:25.060
You can write it in any
of the languages.

00:13:25.060 --> 00:13:26.070
Is that right?

00:13:26.070 --> 00:13:27.873
ALAIN VONGSOUVANH: Well,
.NET's the framework.

00:13:27.873 --> 00:13:30.240
ASP is only a different
language.

00:13:30.240 --> 00:13:31.890
ALI AFSHAR: OK.

00:13:31.890 --> 00:13:33.350
Unfortunately, we're
a bit clueless.

00:13:33.350 --> 00:13:35.430
Luckily our colleague,
Claudio, has

00:13:35.430 --> 00:13:37.400
answered this question.

00:13:37.400 --> 00:13:40.070
And he's saying that
it can be done.

00:13:40.070 --> 00:13:43.450
And we have an example
application that uses the

00:13:43.450 --> 00:13:45.120
ASP.NET MVC framework.

00:13:45.120 --> 00:13:46.230
So go and have a look at that.

00:13:46.230 --> 00:13:49.200
It's a complete end-to-end
sample that shows you how to

00:13:49.200 --> 00:13:53.310
open files from the Drive UI,
read files from Drive API,

00:13:53.310 --> 00:13:55.080
save files back to Drive.

00:13:55.080 --> 00:13:57.310
A few other little bits
and pieces, how to get

00:13:57.310 --> 00:14:00.305
authorization, of course,
information about the user,

00:14:00.305 --> 00:14:03.070
and customization
in that regard.

00:14:03.070 --> 00:14:04.910
So that's a good one.

00:14:04.910 --> 00:14:09.800
Go ahead and check that out
on our documentation page.

00:14:12.750 --> 00:14:16.320
Save files from Android app to
Google Drive without using

00:14:16.320 --> 00:14:18.120
HTTP request.

00:14:18.120 --> 00:14:18.880
I saw this one earlier.

00:14:18.880 --> 00:14:20.860
I couldn't quite work
out what it was.

00:14:20.860 --> 00:14:22.710
I want to save files
from my Android

00:14:22.710 --> 00:14:24.750
application to Google Drive.

00:14:24.750 --> 00:14:27.250
But I don't want to use
HTTPS requests.

00:14:27.250 --> 00:14:30.200
I want to put my files in Google
Drive even if the user

00:14:30.200 --> 00:14:34.510
is offline like the
local drive.

00:14:34.510 --> 00:14:35.510
ALAIN VONGSOUVANH: Oh, I see.

00:14:35.510 --> 00:14:39.430
I guess what they're requesting
is a way for the

00:14:39.430 --> 00:14:44.740
Android Drive App to receive
intent to save data.

00:14:44.740 --> 00:14:47.380
Unfortunately, this is not yet
available, but quite a good

00:14:47.380 --> 00:14:48.320
future request.

00:14:48.320 --> 00:14:52.500
We can pass that on to the
Android Drive App team.

00:14:52.500 --> 00:14:56.490
In the meantime, the only way
to save data on Drive, on

00:14:56.490 --> 00:14:59.720
Android, or any other platform,
is to use the API.

00:14:59.720 --> 00:15:00.860
ALI AFSHAR: Yeah,
that's right.

00:15:00.860 --> 00:15:04.210
One work-around could be if
you can find out where the

00:15:04.210 --> 00:15:06.770
local copies of the Drive
files are being saved.

00:15:06.770 --> 00:15:07.115
ALAIN VONGSOUVANH: Yes.

00:15:07.115 --> 00:15:09.690
But I'm not even sure if you
know where, you'd be

00:15:09.690 --> 00:15:11.220
able to save data.

00:15:11.220 --> 00:15:13.890
You might not have permission
to write on

00:15:13.890 --> 00:15:14.960
the local data store.

00:15:14.960 --> 00:15:15.730
ALI AFSHAR: Precisely.

00:15:15.730 --> 00:15:18.110
Where this would work is
in the desktop clients

00:15:18.110 --> 00:15:19.840
on Windows and Mac.

00:15:19.840 --> 00:15:24.130
You could just ask the user
where the drive directory is

00:15:24.130 --> 00:15:25.690
and then copy files into that.

00:15:25.690 --> 00:15:28.910
Again, the permissions
might be wrong.

00:15:28.910 --> 00:15:29.930
They might not be permitted.

00:15:29.930 --> 00:15:33.340
But that would work as
a work-around there.

00:15:33.340 --> 00:15:37.270
Unfortunately, there are no
APIs to interact with the

00:15:37.270 --> 00:15:39.730
Drive client on that regards.

00:15:39.730 --> 00:15:43.070
So for saving files, or
where the files are.

00:15:43.070 --> 00:15:45.170
So that could be somewhere
where we'd look

00:15:45.170 --> 00:15:46.170
to imporove, I think.

00:15:46.170 --> 00:15:50.310
ALAIN VONGSOUVANH: Yes, that can
be better for developers,

00:15:50.310 --> 00:15:53.750
as they won't have to deal with
offline and any other

00:15:53.750 --> 00:15:56.232
network issues on Android.

00:15:56.232 --> 00:15:58.440
ALI AFSHAR: Precisely.

00:15:58.440 --> 00:16:02.800
Google Drive root folder,
file not found error.

00:16:02.800 --> 00:16:05.230
I had written a program that
creates a file object which

00:16:05.230 --> 00:16:08.550
defaults gets created in
the root folder if

00:16:08.550 --> 00:16:10.500
no parent is specified.

00:16:10.500 --> 00:16:13.440
Then, given the ID of the file's
parent, it retrieves

00:16:13.440 --> 00:16:16.340
the root folder.

00:16:16.340 --> 00:16:18.860
For some reason, this
no longer works.

00:16:18.860 --> 00:16:21.690
Instead of returning the root
folder, I get "File not

00:16:21.690 --> 00:16:27.570
found." So this is the thing.

00:16:27.570 --> 00:16:28.820
That's some Ruby code.

00:16:35.480 --> 00:16:36.050
ALAIN VONGSOUVANH: So
Steve answered.

00:16:36.050 --> 00:16:36.540
ALI AFSHAR: Yeah,
Steve answered.

00:16:36.540 --> 00:16:39.270
Now, I think the best thing to
do is instead of trying to

00:16:39.270 --> 00:16:42.320
find the root folder in that
way, is to find the root

00:16:42.320 --> 00:16:44.910
folder just by asking
for the root folder.

00:16:44.910 --> 00:16:49.720
Now, you could do that by
going to googleapis.com,

00:16:49.720 --> 00:16:53.860
Drive, v2, files, and then
root as the file ID.

00:16:53.860 --> 00:16:57.260
And in the same way that the
root alias works the queries,

00:16:57.260 --> 00:16:59.800
it also works to look up
files and fetch them.

00:16:59.800 --> 00:17:03.300
So that's by far the quickest
and easiest way to do that.

00:17:03.300 --> 00:17:06.200
The other way of finding the ID
of the root folder, can you

00:17:06.200 --> 00:17:07.319
tell us how to do that?

00:17:07.319 --> 00:17:07.760
ALAIN VONGSOUVANH: Sure.

00:17:07.760 --> 00:17:11.349
It's from the about resource.

00:17:11.349 --> 00:17:15.210
The Drive API provides an about
end-point which returns

00:17:15.210 --> 00:17:18.640
information about the current
user, just as quota, how much

00:17:18.640 --> 00:17:22.079
could quota is left, how much
quota has been used.

00:17:22.079 --> 00:17:27.859
And among that, the
root folder ID.

00:17:27.859 --> 00:17:30.080
ALI AFSHAR: So that's in the
about feed, but we recommend

00:17:30.080 --> 00:17:31.540
you just use the root alias.

00:17:31.540 --> 00:17:32.310
Would you say that?

00:17:32.310 --> 00:17:33.560
ALAIN VONGSOUVANH: It's
more convenient.

00:17:33.560 --> 00:17:37.800
And you get more metadata by
doing a query to the root

00:17:37.800 --> 00:17:40.560
metadata and resource.

00:17:40.560 --> 00:17:41.810
ALI AFSHAR: So great.

00:17:48.140 --> 00:17:52.690
Resize an image retrieved from
Google Drive using the API.

00:17:52.690 --> 00:17:55.220
So I think this will be our
last question for today.

00:17:55.220 --> 00:17:57.480
I'm using the following
Python code to get a

00:17:57.480 --> 00:17:58.780
file from Google Drive.

00:17:58.780 --> 00:18:01.860
They're calling a Get
request on a file

00:18:01.860 --> 00:18:03.750
passing in a file ID.

00:18:03.750 --> 00:18:07.610
How would I go about resizing
this file if it is an image?

00:18:07.610 --> 00:18:10.790
I've tried the following,
resized image equals images

00:18:10.790 --> 00:18:12.960
dot resize, and then that.

00:18:12.960 --> 00:18:16.110
But I get the following error,
"Not image error."

00:18:16.110 --> 00:18:21.030
So let's role that back a second
and say, I guess this

00:18:21.030 --> 00:18:25.060
is a Python on App Engine, using
the Images service to

00:18:25.060 --> 00:18:26.050
resize a file.

00:18:26.050 --> 00:18:26.640
ALAIN VONGSOUVANH: Probably.

00:18:26.640 --> 00:18:27.480
ALI AFSHAR: Is that right?

00:18:27.480 --> 00:18:30.430
Now, the problem that's happened
here is that being

00:18:30.430 --> 00:18:33.860
passed in is the download
URL of the file.

00:18:33.860 --> 00:18:35.250
Which I don't think that's
going to work.

00:18:35.250 --> 00:18:38.110
I think you need to pass in the
binary data of the file.

00:18:38.110 --> 00:18:38.680
Is that right?

00:18:38.680 --> 00:18:39.340
ALAIN VONGSOUVANH: I think so.

00:18:39.340 --> 00:18:42.560
And even if that could work,
it won't work in their use

00:18:42.560 --> 00:18:46.130
case, because the download URL
requires an authorization

00:18:46.130 --> 00:18:49.410
header, which needs to be
provided with a get request.

00:18:49.410 --> 00:18:50.760
ALI AFSHAR: So what would
you recommend?

00:18:50.760 --> 00:18:52.230
ALAIN VONGSOUVANH: Well, I would
recommend downloading

00:18:52.230 --> 00:18:57.510
the file's data using the
download URL, and provide the

00:18:57.510 --> 00:18:59.530
authorization header,
as documented in

00:18:59.530 --> 00:19:01.150
our reference guide.

00:19:01.150 --> 00:19:04.610
And get this data and
pass it to the

00:19:04.610 --> 00:19:06.840
image API and App Engine.

00:19:06.840 --> 00:19:09.000
ALI AFSHAR: Now, I'm not
exactly sure, but I'm

00:19:09.000 --> 00:19:13.660
imagining the Images service
could work on a file that's in

00:19:13.660 --> 00:19:15.010
the Blobstore?

00:19:15.010 --> 00:19:16.590
ALAIN VONGSOUVANH: Probably.

00:19:16.590 --> 00:19:17.550
ALI AFSHAR: So if it can--

00:19:17.550 --> 00:19:20.730
and sorry, we're not App Engine
specific experts here--

00:19:20.730 --> 00:19:25.400
but if it can, then you could
just save it directly into the

00:19:25.400 --> 00:19:28.630
Blobstore, and then call the
resize on the Blobstore.

00:19:28.630 --> 00:19:31.425
But otherwise, you could just
use the binary bits, and then

00:19:31.425 --> 00:19:32.420
that would work.

00:19:32.420 --> 00:19:34.040
So that I should solve that.

00:19:34.040 --> 00:19:36.440
Unfortunately it's not going
to work, what's happening

00:19:36.440 --> 00:19:39.660
here, because you just passing
a string, which is the URL,

00:19:39.660 --> 00:19:41.800
and that's why it's
not image error.

00:19:44.870 --> 00:19:45.990
OK, so thank you very much.

00:19:45.990 --> 00:19:47.550
That's our questions
for today.

00:19:47.550 --> 00:19:49.320
We'll be back again
on Thursday.

00:19:49.320 --> 00:19:50.820
Ask your questions, and
we look forward

00:19:50.820 --> 00:19:51.840
to speaking to you.

00:19:51.840 --> 00:19:53.300
So bye from Ali.

00:19:53.300 --> 00:19:54.550
ALAIN VONGSOUVANH:
Bye from Alain.

