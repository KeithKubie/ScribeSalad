WEBVTT
Kind: captions
Language: en

00:00:03.386 --> 00:00:05.760
WAYNE PIEKARSKI: We hope you're
having a good conference.

00:00:05.760 --> 00:00:08.100
So it's almost into day two.

00:00:08.100 --> 00:00:11.800
So JP just gave us a great
talk before about some design

00:00:11.800 --> 00:00:13.040
work for Android Wear.

00:00:13.040 --> 00:00:14.820
And so now what we're
going to talk about

00:00:14.820 --> 00:00:18.282
is about making your apps
work on the Always On screen

00:00:18.282 --> 00:00:19.990
support that's available
on Android Wear.

00:00:19.990 --> 00:00:23.300
So it's a really cool feature
where your screen is always

00:00:23.300 --> 00:00:25.560
operating to show
you information.

00:00:25.560 --> 00:00:29.020
So we're going to give a
little talk about this today.

00:00:29.020 --> 00:00:31.350
So we've got JP here.

00:00:31.350 --> 00:00:33.280
JP GIL: So I had to
give a little talk

00:00:33.280 --> 00:00:36.350
just right before about
how to make your watch face

00:00:36.350 --> 00:00:36.962
interactive.

00:00:36.962 --> 00:00:39.170
And when I showed that, I
showed that it can actually

00:00:39.170 --> 00:00:41.300
have an always on mode
for a watch faces.

00:00:41.300 --> 00:00:44.170
As Wayne mentioned, we can do
that for your apps as well.

00:00:44.170 --> 00:00:46.395
And I'm a designer at
the Android Wear team.

00:00:46.395 --> 00:00:48.020
WAYNE PIEKARSKI: So
I'm Wayne Piekarski

00:00:48.020 --> 00:00:49.590
and I'm a developer advocate.

00:00:49.590 --> 00:00:51.330
And I work on Android
Wear plus a bunch

00:00:51.330 --> 00:00:52.630
of other different products.

00:00:52.630 --> 00:00:55.570
And so we're going to give a
little talk today about some

00:00:55.570 --> 00:00:59.420
of the best design principles
for working with the Always On

00:00:59.420 --> 00:01:00.220
screen.

00:01:00.220 --> 00:01:02.830
And there's our contact details
if you want to follow us

00:01:02.830 --> 00:01:03.957
on Google+ or Twitter.

00:01:03.957 --> 00:01:06.290
And then also, we have an
Android Wear developers' group

00:01:06.290 --> 00:01:08.507
on Google+ that you can
also check out as well.

00:01:08.507 --> 00:01:10.340
But Anyway, let's get
started with our talk.

00:01:10.340 --> 00:01:12.484
So I'll pass it off to JP.

00:01:12.484 --> 00:01:14.150
JP GIL: So when you
look at this screen,

00:01:14.150 --> 00:01:18.390
here-- when you think
about an Always On screen,

00:01:18.390 --> 00:01:20.110
you think about LCDs.

00:01:20.110 --> 00:01:21.900
So they're very low battery.

00:01:21.900 --> 00:01:23.644
They last forever.

00:01:23.644 --> 00:01:25.560
But the problem with
them is that you actually

00:01:25.560 --> 00:01:27.260
have to think about
all the information

00:01:27.260 --> 00:01:29.680
that you want to pack in
that screen beforehand.

00:01:29.680 --> 00:01:30.180
Right?

00:01:30.180 --> 00:01:33.050
So you have to make
a lot of choices

00:01:33.050 --> 00:01:35.800
before you decide
what to put in there.

00:01:35.800 --> 00:01:38.220
And once they're in there you
can't change them anymore.

00:01:38.220 --> 00:01:41.060
So they're very power efficient.

00:01:41.060 --> 00:01:45.530
You know that they're going
to work for a long time.

00:01:45.530 --> 00:01:47.730
But if you need any
other kind of information

00:01:47.730 --> 00:01:48.990
you're not going to
have it because it's not

00:01:48.990 --> 00:01:49.656
going to change.

00:01:49.656 --> 00:01:52.270
It's not very flexible.

00:01:52.270 --> 00:01:55.590
So with Android Wear, we
are the first smart watch

00:01:55.590 --> 00:01:58.260
that allows you to have the
flexibility of, like, color

00:01:58.260 --> 00:02:01.200
LCDs, color displays,
that we can update

00:02:01.200 --> 00:02:04.350
the pixels any time with
the Always On functionality,

00:02:04.350 --> 00:02:04.850
as well.

00:02:04.850 --> 00:02:07.150
That pretty much mimics
what happens on an LCD

00:02:07.150 --> 00:02:08.970
with much more flexibility.

00:02:08.970 --> 00:02:10.740
You don't have to
design beforehand.

00:02:10.740 --> 00:02:12.500
So basically, you
can have information

00:02:12.500 --> 00:02:16.320
that's there all the time
in a low power fashion

00:02:16.320 --> 00:02:18.020
saving your battery,
and actually

00:02:18.020 --> 00:02:20.190
not disconnecting the
user from the experience

00:02:20.190 --> 00:02:22.940
that they're going through.

00:02:22.940 --> 00:02:26.030
So as an example, here you're
looking at the watch face.

00:02:26.030 --> 00:02:28.530
I don't know if you're familiar
with Android or watch faces.

00:02:28.530 --> 00:02:29.988
We've been having
these experiences

00:02:29.988 --> 00:02:33.420
for watch faces since the
beginning, just to save power.

00:02:33.420 --> 00:02:36.220
So basically, you have
your time and then

00:02:36.220 --> 00:02:38.270
it switches to low power mode.

00:02:38.270 --> 00:02:40.940
You remove all the pixels,
like the color pixels,

00:02:40.940 --> 00:02:43.520
and try to just display the
information that you need

00:02:43.520 --> 00:02:45.460
with as little
pixels as possible,

00:02:45.460 --> 00:02:48.120
let's say 5% of the
pixels that you need,

00:02:48.120 --> 00:02:50.240
just using black and white.

00:02:50.240 --> 00:02:51.980
But you don't need
to show just time.

00:02:51.980 --> 00:02:55.020
You can also get your
next notification.

00:02:55.020 --> 00:02:56.892
You look at the
notification, oh, Jeff

00:02:56.892 --> 00:02:57.850
sent me a notification.

00:02:57.850 --> 00:02:58.970
Plans for tonight?

00:02:58.970 --> 00:03:00.500
And then if you
want to know more,

00:03:00.500 --> 00:03:02.620
you just tap on the
watch face and then

00:03:02.620 --> 00:03:05.597
it brings up to full power
and you can interact with it.

00:03:05.597 --> 00:03:07.930
And this can apply for different
kinds of notifications,

00:03:07.930 --> 00:03:12.680
different kinds of experiences,
like playing music or going

00:03:12.680 --> 00:03:14.510
through navigation directions.

00:03:17.230 --> 00:03:19.410
As an example,
like for microapps,

00:03:19.410 --> 00:03:23.780
let's say you have an
app from your airline.

00:03:23.780 --> 00:03:25.530
And then you're going
through your airport

00:03:25.530 --> 00:03:27.550
and you have your QR code.

00:03:27.550 --> 00:03:29.540
Originally, in Android
Wear when we launched,

00:03:29.540 --> 00:03:32.500
every time you had a
microapp open, when

00:03:32.500 --> 00:03:35.500
the display powered down you
would just close the microapp.

00:03:35.500 --> 00:03:37.617
And you're in an airport,
a situation like this,

00:03:37.617 --> 00:03:39.450
your QR code is right
there in front of you.

00:03:39.450 --> 00:03:41.320
All of a sudden it's
not there anymore.

00:03:41.320 --> 00:03:43.720
But now you can just
program your app

00:03:43.720 --> 00:03:46.400
to actually use Always On mode.

00:03:46.400 --> 00:03:50.230
And then it just dims the
display, goes to low power,

00:03:50.230 --> 00:03:51.020
and stays there.

00:03:51.020 --> 00:03:53.830
So the activity is just going
to stay there until you actually

00:03:53.830 --> 00:03:54.585
interact with it.

00:03:54.585 --> 00:03:55.460
So you don't lose it.

00:03:55.460 --> 00:03:57.250
You just keep the same thread.

00:03:57.250 --> 00:04:01.410
Think about like when you
are in a commute in a city.

00:04:01.410 --> 00:04:04.900
You're looking at what's going
to be your next stop, when

00:04:04.900 --> 00:04:06.200
your next train is coming.

00:04:06.200 --> 00:04:09.037
And then if that information
is very important

00:04:09.037 --> 00:04:11.370
and you lose it at the right
time, what's the use of it?

00:04:11.370 --> 00:04:11.910
Right?

00:04:11.910 --> 00:04:14.660
So you can actually
switch that to also use

00:04:14.660 --> 00:04:17.339
low power mode as well.

00:04:17.339 --> 00:04:21.640
Another example is if you
go into a grocery store

00:04:21.640 --> 00:04:25.490
and you're trying to
look for things to buy.

00:04:25.490 --> 00:04:28.697
If you're looking
at a list, you know

00:04:28.697 --> 00:04:31.030
what's going to come next,
what is going to come before.

00:04:31.030 --> 00:04:33.290
But if the list disappears,
what's the use of it, again?

00:04:33.290 --> 00:04:33.700
Right?

00:04:33.700 --> 00:04:34.590
So here's an example.

00:04:34.590 --> 00:04:36.580
You're going to buy chocolate.

00:04:36.580 --> 00:04:38.860
And I just enter low power mode.

00:04:38.860 --> 00:04:41.440
And the developer decided
to just show the time

00:04:41.440 --> 00:04:43.730
there to actually even
add more information.

00:04:43.730 --> 00:04:47.840
So you keep the
information of the app

00:04:47.840 --> 00:04:52.609
but it also adds information
of the watch face as well.

00:04:52.609 --> 00:04:54.650
Now I'm going to pass it
on to Wayne, who's going

00:04:54.650 --> 00:04:55.970
to tell you how to build this.

00:04:55.970 --> 00:04:57.390
WAYNE PIEKARSKI:
Awesome, thanks.

00:04:57.390 --> 00:04:57.890
OK.

00:04:57.890 --> 00:05:00.450
So you've seen some of
the compelling use cases

00:05:00.450 --> 00:05:02.330
of why Always On is so awesome.

00:05:02.330 --> 00:05:03.810
So now what I'm
going to do is I'm

00:05:03.810 --> 00:05:06.310
going to show you how to take
your existing Android Wear app

00:05:06.310 --> 00:05:09.380
and retrofit it to activate
this Always On mode.

00:05:09.380 --> 00:05:10.880
So the first thing
you've got to do

00:05:10.880 --> 00:05:12.745
is you need to tweak
your build.gradle file.

00:05:12.745 --> 00:05:14.620
So now if you're booting
an Android Wear app,

00:05:14.620 --> 00:05:16.550
you probably have
these things already.

00:05:16.550 --> 00:05:19.620
So if you look, we've got
the wearable support library

00:05:19.620 --> 00:05:21.885
and we have Google
Play services.

00:05:21.885 --> 00:05:23.510
So typically, you're
going to have that

00:05:23.510 --> 00:05:25.577
if you're doing data layer
or anything like that.

00:05:25.577 --> 00:05:27.410
And you're going to
have the support library

00:05:27.410 --> 00:05:30.120
if you're using any of
the little widgets that

00:05:30.120 --> 00:05:30.810
are provided.

00:05:30.810 --> 00:05:33.160
If you don't have it,
add the support to it.

00:05:33.160 --> 00:05:34.750
Now one trick with
Always On mode

00:05:34.750 --> 00:05:38.050
is you've got to have this
provided section in the middle,

00:05:38.050 --> 00:05:38.580
there.

00:05:38.580 --> 00:05:40.910
That was added as part
of the Always On support.

00:05:40.910 --> 00:05:42.701
So make sure you put
that in, otherwise you

00:05:42.701 --> 00:05:43.960
have link problems later on.

00:05:43.960 --> 00:05:45.487
So this is pretty simple.

00:05:45.487 --> 00:05:47.070
As I said, most of
you already got it.

00:05:47.070 --> 00:05:50.610
And one final thing is there's
a plus symbol in the top right.

00:05:50.610 --> 00:05:52.870
So the plus symbol is
a gradle thing that

00:05:52.870 --> 00:05:54.840
means grab the latest version.

00:05:54.840 --> 00:05:58.375
Now you can also specify a
specific version like 8.3.

00:05:58.375 --> 00:06:00.250
You can choose which
one is more appropriate.

00:06:00.250 --> 00:06:02.040
The catch with pluses
is that the version

00:06:02.040 --> 00:06:05.145
might change in the future
and it might break something.

00:06:05.145 --> 00:06:06.770
So you can actually
fix the version in.

00:06:06.770 --> 00:06:09.061
And I think current version
of Wearable Support Library

00:06:09.061 --> 00:06:10.020
is 1.3.

00:06:10.020 --> 00:06:10.520
But, anyway.

00:06:10.520 --> 00:06:12.730
So you make that
little change there.

00:06:12.730 --> 00:06:14.210
And the next thing
you need to do

00:06:14.210 --> 00:06:16.950
is you tweak your Android
manifest.xml file.

00:06:16.950 --> 00:06:18.360
Once again, pretty simple.

00:06:18.360 --> 00:06:20.360
You need to request
wake lock permissions.

00:06:20.360 --> 00:06:23.679
That's because due to the way
that the Always On mode feature

00:06:23.679 --> 00:06:25.970
runs, you have to have the
ability to grab a wake lock.

00:06:25.970 --> 00:06:28.000
So you add that in as well.

00:06:28.000 --> 00:06:30.690
And then the next thing is you
need to specify in the manifest

00:06:30.690 --> 00:06:32.931
that you're using
this wearable library,

00:06:32.931 --> 00:06:35.180
and you need to specify this
in the manifest, as well.

00:06:35.180 --> 00:06:37.513
If you leave these features
out, the support won't work.

00:06:37.513 --> 00:06:39.720
So make sure you put that in.

00:06:39.720 --> 00:06:41.805
So we've added the build
tools changes necessary.

00:06:41.805 --> 00:06:44.180
Now we're going to show you
how to make the little tweaks

00:06:44.180 --> 00:06:46.250
to the code to put this on.

00:06:46.250 --> 00:06:49.310
So your code is
already going to be

00:06:49.310 --> 00:06:52.070
extending a wearable activity,
so you've probably already got

00:06:52.070 --> 00:06:52.730
this.

00:06:52.730 --> 00:06:54.760
But you can see here
we've got our activity,

00:06:54.760 --> 00:06:56.839
it extends wearable activity.

00:06:56.839 --> 00:06:58.880
There are some people who
have wearable apps that

00:06:58.880 --> 00:07:00.310
don't extend wearable activity.

00:07:00.310 --> 00:07:03.190
You'll have to rejig
your app to do that.

00:07:03.190 --> 00:07:04.554
Most people are doing that.

00:07:04.554 --> 00:07:06.720
In your own onCreate method,
which you already have,

00:07:06.720 --> 00:07:10.720
as well, you need to make a one
line call to setAmbientEnabled.

00:07:10.720 --> 00:07:12.490
That tells the
Android Wear framework

00:07:12.490 --> 00:07:15.420
that your app is aware of
Always On mode support.

00:07:15.420 --> 00:07:19.140
If you don't put that in, it
won't do the necessary calls

00:07:19.140 --> 00:07:19.950
to your app.

00:07:19.950 --> 00:07:22.330
And if you let the screen
idle too long your app will

00:07:22.330 --> 00:07:23.850
be dismissed, just like before.

00:07:23.850 --> 00:07:26.950
So very important
you put that in.

00:07:26.950 --> 00:07:30.290
Next, in your
activity there is--

00:07:30.290 --> 00:07:33.340
you need to declare a method
called onEnterAmbient.

00:07:33.340 --> 00:07:36.420
So the framework will
call onEnterAmbient

00:07:36.420 --> 00:07:42.070
when it detects that the screen
is about to-- you can see here,

00:07:42.070 --> 00:07:43.460
my watch is active.

00:07:43.460 --> 00:07:45.260
And then eventually
it goes dark.

00:07:45.260 --> 00:07:48.260
It's entering ambient mode when
it goes dark at that point.

00:07:48.260 --> 00:07:51.780
So it calls your
onEnterAmbient method.

00:07:51.780 --> 00:07:53.890
You need to call
super onEnterAmbient

00:07:53.890 --> 00:07:56.050
to call the default version.

00:07:56.050 --> 00:07:59.330
And then you need to do
things that reduce what's

00:07:59.330 --> 00:08:00.730
being shown on the display.

00:08:00.730 --> 00:08:02.420
So for example, in
this code snippet

00:08:02.420 --> 00:08:05.230
here, you can see that we're
taking the background color

00:08:05.230 --> 00:08:07.960
and we're setting it
probably to black.

00:08:07.960 --> 00:08:11.550
So the mAmbientBgColor,
we've used that.

00:08:11.550 --> 00:08:15.430
So this is reducing what's
shown on the display.

00:08:15.430 --> 00:08:18.400
And then we leave our
method and then we're done.

00:08:18.400 --> 00:08:20.770
Now, you can see here
we have a fragment.

00:08:20.770 --> 00:08:23.990
We've passed this on to that
to also recolor that as well.

00:08:23.990 --> 00:08:24.610
So that's it.

00:08:24.610 --> 00:08:28.070
So we're just tweaking the
display and then our app

00:08:28.070 --> 00:08:31.170
continues to run and that's it.

00:08:31.170 --> 00:08:32.870
Next step, onExitAmbient.

00:08:32.870 --> 00:08:35.919
This method is called when
the screen is becoming active

00:08:35.919 --> 00:08:36.640
again.

00:08:36.640 --> 00:08:38.270
So we're entering
interactive mode.

00:08:38.270 --> 00:08:40.970
We want to enable full color,
full interactivity, things

00:08:40.970 --> 00:08:41.789
like that.

00:08:41.789 --> 00:08:44.310
You can see that we're setting
the background color back

00:08:44.310 --> 00:08:45.920
to the active color, there.

00:08:45.920 --> 00:08:48.690
Basically the same code,
but just done in reverse.

00:08:48.690 --> 00:08:51.200
So those are the
two changes, there.

00:08:51.200 --> 00:08:55.140
Now, this takes care of going
in the transition states

00:08:55.140 --> 00:08:56.960
but what it doesn't
take care of is how we

00:08:56.960 --> 00:08:59.320
go about refreshing the screen.

00:08:59.320 --> 00:09:01.870
So refreshing the screen
is really important.

00:09:01.870 --> 00:09:04.980
Now, what you don't want
to do is be in ambient mode

00:09:04.980 --> 00:09:08.132
but your app is once a second
trying to refresh the screen.

00:09:08.132 --> 00:09:10.090
That's a bad idea because
refreshing the screen

00:09:10.090 --> 00:09:11.150
is expensive.

00:09:11.150 --> 00:09:13.070
The CPU has to wake up.

00:09:13.070 --> 00:09:15.480
The display uses power
to refresh itself.

00:09:15.480 --> 00:09:17.360
When it's in this
low power state,

00:09:17.360 --> 00:09:20.590
the screen needs to be kept
static and not changing

00:09:20.590 --> 00:09:23.360
and with as little pixels
as possible illuminated.

00:09:23.360 --> 00:09:26.270
So we have this
onUpdateAmbient method

00:09:26.270 --> 00:09:28.700
which is called by the
framework once per minute.

00:09:28.700 --> 00:09:32.450
It's an opportunity for your
app to refresh itself and maybe

00:09:32.450 --> 00:09:34.750
draw something like a
clock on your application.

00:09:34.750 --> 00:09:36.457
So if you've got
your shopping list,

00:09:36.457 --> 00:09:38.790
it would be kind of sad if
you've got your shopping list

00:09:38.790 --> 00:09:41.081
but, it's like, well, what's
the actual time right now?

00:09:41.081 --> 00:09:45.471
So typically, apps that
run in ambient mode

00:09:45.471 --> 00:09:46.970
should have a little
clock somewhere

00:09:46.970 --> 00:09:48.830
that shows the
current time, as well.

00:09:48.830 --> 00:09:52.320
So onUpdateAmbient is a method
that gives you the opportunity

00:09:52.320 --> 00:09:54.290
to refresh this
clock once a minute

00:09:54.290 --> 00:09:57.260
and then refresh the display.

00:09:57.260 --> 00:10:00.144
As I said, you don't want to
do this very often because it

00:10:00.144 --> 00:10:01.060
wastes a lot of power.

00:10:01.060 --> 00:10:04.080
So always, when you're
developing an Android Wear app,

00:10:04.080 --> 00:10:06.600
think about the user's
battery and the impact

00:10:06.600 --> 00:10:08.950
it's going to have on them,
because if your app's doing

00:10:08.950 --> 00:10:10.120
all this stuff,
it's going to make

00:10:10.120 --> 00:10:12.610
the battery performance terrible
over the end of the day.

00:10:12.610 --> 00:10:15.120
So you're given this call.

00:10:15.120 --> 00:10:16.500
Don't do too much work in it.

00:10:16.500 --> 00:10:19.870
So update your clock, but
don't do any heavy computations

00:10:19.870 --> 00:10:21.927
because that's going to
waste CPU time as well.

00:10:21.927 --> 00:10:23.260
You just want to get in and out.

00:10:23.260 --> 00:10:25.890
And all we're doing here
is we're just saying, OK.

00:10:25.890 --> 00:10:27.220
We've gotten our call.

00:10:27.220 --> 00:10:28.120
Invalidate the view.

00:10:28.120 --> 00:10:29.870
And it's just going
to refresh it quickly.

00:10:29.870 --> 00:10:30.520
And that's it.

00:10:30.520 --> 00:10:33.630
So there's no big amount
of work being done here.

00:10:33.630 --> 00:10:37.500
Now, it is possible to update
the screen more often if it's

00:10:37.500 --> 00:10:38.710
super important for you.

00:10:38.710 --> 00:10:40.370
So for example,
the stopwatch app

00:10:40.370 --> 00:10:42.366
that comes with Android
Wear has the ability

00:10:42.366 --> 00:10:44.740
to refresh the screen a bit
more often because typically.

00:10:44.740 --> 00:10:46.270
If you're timing
something, you want

00:10:46.270 --> 00:10:48.640
to see it updating more often.

00:10:48.640 --> 00:10:52.790
So you have the ability to use
the alarm manager to request

00:10:52.790 --> 00:10:56.270
a real time clock that will pull
the CPU out of a sleep state,

00:10:56.270 --> 00:10:59.167
but you can't use
things like handlers.

00:10:59.167 --> 00:11:01.500
They're not allowed to work
when you're in ambient mode.

00:11:01.500 --> 00:11:04.594
So generally, try--
if you're doing

00:11:04.594 --> 00:11:06.760
some work where you're like,
I'll just use this hack

00:11:06.760 --> 00:11:09.240
to try to make the CPU wake
up and refresh the screen,

00:11:09.240 --> 00:11:11.100
you're probably doing
something wrong.

00:11:11.100 --> 00:11:13.400
It's a bad idea to try to
work around the framework.

00:11:13.400 --> 00:11:14.570
If it's trying to
make you sleep,

00:11:14.570 --> 00:11:16.903
you should sleep because
otherwise you're wasting power.

00:11:21.130 --> 00:11:23.260
There are data layer
connections between your phone

00:11:23.260 --> 00:11:24.140
and your watch.

00:11:24.140 --> 00:11:26.670
If a message comes
into your watch,

00:11:26.670 --> 00:11:28.410
your app will be
given the opportunity

00:11:28.410 --> 00:11:29.750
to handle that message.

00:11:29.750 --> 00:11:32.590
So the
DataApi.addListener calls.

00:11:32.590 --> 00:11:33.400
They will fire.

00:11:33.400 --> 00:11:35.380
And you'll have the ability to
refresh the screen if something

00:11:35.380 --> 00:11:36.329
interesting happens.

00:11:36.329 --> 00:11:38.120
But don't refresh the
screen for no reason.

00:11:38.120 --> 00:11:40.100
Refresh it only on demand.

00:11:40.100 --> 00:11:43.471
And then when you're
using the alarm manager,

00:11:43.471 --> 00:11:45.220
we have something like
the 10 second rule.

00:11:45.220 --> 00:11:48.070
Don't try to do it
too often, but try

00:11:48.070 --> 00:11:50.380
to keep it to within
something like 10 seconds.

00:11:50.380 --> 00:11:54.670
And when you're using
the alarm manager,

00:11:54.670 --> 00:11:58.960
as well, make sure that you
use the flag UpdateCurrent.

00:11:58.960 --> 00:12:02.870
And also it's best practice
to implement single instance

00:12:02.870 --> 00:12:04.060
launch mode.

00:12:04.060 --> 00:12:05.540
We have a code
lab that shows you

00:12:05.540 --> 00:12:06.870
how to do some of this stuff.

00:12:06.870 --> 00:12:08.980
So if you come over the
code lab room next door

00:12:08.980 --> 00:12:10.950
or if you go online
to the code labs,

00:12:10.950 --> 00:12:13.650
you can see we have a sample
that sort of shows the bits

00:12:13.650 --> 00:12:15.900
and pieces about how to
go about implementing this

00:12:15.900 --> 00:12:17.769
and how to deal with
some of these issues.

00:12:17.769 --> 00:12:20.060
So now that we've gone through
some of the code for it,

00:12:20.060 --> 00:12:21.420
I'm now going to
hand it back to JP.

00:12:21.420 --> 00:12:23.670
And he's going to talk more
about some of the design

00:12:23.670 --> 00:12:26.410
best practices that you need
to take into consideration when

00:12:26.410 --> 00:12:27.885
using Always On mode.

00:12:27.885 --> 00:12:29.470
JP GIL: Thank you, Wayne.

00:12:29.470 --> 00:12:33.940
So basically, when you
design watch faces or apps,

00:12:33.940 --> 00:12:36.590
you should think about the
overall design principles

00:12:36.590 --> 00:12:38.100
that we actually
have as guidelines

00:12:38.100 --> 00:12:42.890
in our wearable website
design guidelines.

00:12:42.890 --> 00:12:45.500
So when you do something
for Android Wear,

00:12:45.500 --> 00:12:48.300
you should make apps glanceable,
actionable, relevant.

00:12:48.300 --> 00:12:48.900
Right?

00:12:48.900 --> 00:12:51.170
So try to focus on
only the essentials.

00:12:51.170 --> 00:12:53.580
And when you switch
from the normal mode

00:12:53.580 --> 00:12:56.154
to Ambient mode
to Always On, you

00:12:56.154 --> 00:12:57.820
should even focus
more on the essentials

00:12:57.820 --> 00:12:59.780
because if it's not
interactive, why would you

00:12:59.780 --> 00:13:00.820
show a button there?

00:13:00.820 --> 00:13:02.870
So make sure that you
degrade gracefully

00:13:02.870 --> 00:13:07.120
from the active experience
to the ambient experience.

00:13:07.120 --> 00:13:08.640
So here are a couple principles.

00:13:08.640 --> 00:13:09.777
Use black and white.

00:13:09.777 --> 00:13:11.610
Black and white doesn't
need a lot of power.

00:13:11.610 --> 00:13:13.570
You can remove all
the color pixels

00:13:13.570 --> 00:13:16.090
and just focus on
black and white.

00:13:16.090 --> 00:13:18.970
The guidance is that you
turn off 95% of the pixels.

00:13:18.970 --> 00:13:20.610
You're going to
save a lot of power.

00:13:20.610 --> 00:13:22.110
Correct me if I'm
wrong, but I think

00:13:22.110 --> 00:13:24.590
displays are the number
one consumption of power

00:13:24.590 --> 00:13:25.650
in Android Wear, right?

00:13:25.650 --> 00:13:26.830
WAYNE PIEKARSKI: It's
one of them, yes.

00:13:26.830 --> 00:13:27.530
It's huge.

00:13:27.530 --> 00:13:28.279
JP GIL: It's huge.

00:13:28.279 --> 00:13:30.880
So you can save a lot of
power by just removing color

00:13:30.880 --> 00:13:32.880
and going black and white.

00:13:32.880 --> 00:13:34.680
Display relevant time units.

00:13:34.680 --> 00:13:38.110
So Wayne talked about the
example of the stopwatch.

00:13:38.110 --> 00:13:40.770
And the framework makes
sure that your app's

00:13:40.770 --> 00:13:42.720
not going to wake
up, but don't try

00:13:42.720 --> 00:13:45.170
to circumvent the framework.

00:13:45.170 --> 00:13:48.440
For example, I'm using, like,
the ultra precise stopwatch.

00:13:48.440 --> 00:13:51.400
Let's say you want to have a
stopwatch for Formula One cars,

00:13:51.400 --> 00:13:53.829
that you have to measure
as like a milliseconds.

00:13:53.829 --> 00:13:55.370
That that's probably
not a good idea,

00:13:55.370 --> 00:13:57.703
because what's the point of
going to Ambient mode if you

00:13:57.703 --> 00:13:59.380
cannot update every millisecond?

00:13:59.380 --> 00:14:02.130
So you'd rather not
just use Ambient mode

00:14:02.130 --> 00:14:05.480
if you want to
actually up very often.

00:14:05.480 --> 00:14:08.117
Remove any button, any kind
of interactive functionality,

00:14:08.117 --> 00:14:09.950
because it's actually
going to confuse users

00:14:09.950 --> 00:14:12.880
because, actually, the
display is turned off.

00:14:12.880 --> 00:14:14.370
The touchscreen is turned off.

00:14:14.370 --> 00:14:16.250
You're only going to
see the information that

00:14:16.250 --> 00:14:17.462
is in low power mode.

00:14:17.462 --> 00:14:19.670
You're going to have to
actually wake up the display,

00:14:19.670 --> 00:14:21.780
go to active mode
to interact with it.

00:14:21.780 --> 00:14:24.160
So if you put a button there,
user is going to tap on it

00:14:24.160 --> 00:14:25.410
and nothing's going to happen.

00:14:25.410 --> 00:14:28.780
You're going to need two taps
to actually make it happen.

00:14:28.780 --> 00:14:30.760
Remove any sensitive content.

00:14:30.760 --> 00:14:33.330
So for example, let's say you
have a messaging application.

00:14:33.330 --> 00:14:35.870
Someone sends you
a private message

00:14:35.870 --> 00:14:38.430
and it switches to
a low power mode.

00:14:38.430 --> 00:14:40.500
And you don't even know
that it's actually off.

00:14:40.500 --> 00:14:42.666
And you know, your information
is going to be there.

00:14:42.666 --> 00:14:47.790
Just be conscientious
for users' privacy.

00:14:47.790 --> 00:14:49.410
If you want to add
a clock, I think

00:14:49.410 --> 00:14:51.510
it's something
that really helps.

00:14:51.510 --> 00:14:53.800
The example that we showed
with the shopping list,

00:14:53.800 --> 00:14:56.342
and Wayne mentioned
as well, is you

00:14:56.342 --> 00:14:57.800
have the advantage
to actually show

00:14:57.800 --> 00:14:59.260
two things at the same time.

00:14:59.260 --> 00:15:01.570
And time is always something
that's useful for people.

00:15:01.570 --> 00:15:04.980
So if you have the space
and the UI allows for it,

00:15:04.980 --> 00:15:05.980
just show a little time.

00:15:05.980 --> 00:15:07.271
Like you have an example there.

00:15:07.271 --> 00:15:10.430
We kept a little
clock pill on the top.

00:15:10.430 --> 00:15:13.200
All the examples
of best practices

00:15:13.200 --> 00:15:18.030
includes to be efficient
with interactive and ambient.

00:15:18.030 --> 00:15:22.610
So don't try to just add
more functionality in ambient

00:15:22.610 --> 00:15:24.900
because it's not going
to be useful because you

00:15:24.900 --> 00:15:26.290
can interact with it.

00:15:26.290 --> 00:15:28.100
So just remove the
stuff that they actually

00:15:28.100 --> 00:15:32.450
need-- remove the stuff they
actually don't need, I'm sorry.

00:15:32.450 --> 00:15:33.490
That sounded confusing.

00:15:33.490 --> 00:15:35.570
Remove the stuff that
you actually don't need

00:15:35.570 --> 00:15:38.650
and just leave the stuff that's
relevant for that use case.

00:15:38.650 --> 00:15:42.370
In the case of the QR code,
you just leave the QR code.

00:15:42.370 --> 00:15:45.650
It is the cue that you actually
need to just touch and turn

00:15:45.650 --> 00:15:49.170
on the active mode
to actually use it.

00:15:49.170 --> 00:15:51.210
Choose the right
approach for the updates.

00:15:51.210 --> 00:15:54.270
So going back to
the timer example.

00:15:54.270 --> 00:15:57.700
If the timer is, like,
one hour, you probably

00:15:57.700 --> 00:15:59.960
don't need to update
every 10 seconds.

00:15:59.960 --> 00:16:01.490
So maybe every minute's OK.

00:16:01.490 --> 00:16:03.330
You don't have to
say, oh, I need

00:16:03.330 --> 00:16:06.050
to know that I have like
45 minutes and 37 seconds

00:16:06.050 --> 00:16:06.940
left for my timer.

00:16:06.940 --> 00:16:08.300
It's probably not so useful.

00:16:08.300 --> 00:16:10.050
Maybe you want to get
down to the minute,

00:16:10.050 --> 00:16:12.952
you start thinking of a
more precise update time.

00:16:12.952 --> 00:16:15.160
But remember, every time
you update more often you're

00:16:15.160 --> 00:16:17.370
going to need more power.

00:16:17.370 --> 00:16:19.900
And last, make sure that
you test it on your wrist.

00:16:19.900 --> 00:16:22.490
As a designer for
Android Wear, sometimes

00:16:22.490 --> 00:16:24.660
I just design something
on the screen and I say,

00:16:24.660 --> 00:16:25.551
oh, that's awesome.

00:16:25.551 --> 00:16:27.800
And then I put it on my
wrist, I look at it, like, no.

00:16:27.800 --> 00:16:28.810
That's not awesome.

00:16:28.810 --> 00:16:31.140
So basically, design
your experiences.

00:16:31.140 --> 00:16:32.020
Walk around.

00:16:32.020 --> 00:16:33.050
Go outside.

00:16:33.050 --> 00:16:36.180
See if the Ambient mode
also works outside.

00:16:36.180 --> 00:16:37.280
Can you read it?

00:16:37.280 --> 00:16:38.480
Does it make sense?

00:16:38.480 --> 00:16:40.284
So there's tools
available out there

00:16:40.284 --> 00:16:41.700
like Android Design
Preview or you

00:16:41.700 --> 00:16:45.210
can see mocks on the display
so you know how it looks like.

00:16:45.210 --> 00:16:46.610
And that's also for developers.

00:16:46.610 --> 00:16:48.425
Don't just do everything
on the emulator.

00:16:48.425 --> 00:16:50.800
Test it on the watch and make
sure that it works as well.

00:16:57.301 --> 00:16:57.800
All right.

00:16:57.800 --> 00:17:00.840
So as Wayne
mentioned, we're going

00:17:00.840 --> 00:17:05.462
to have a Code Lab in the Code
Lab room from 2:00 to 4:00.

00:17:05.462 --> 00:17:07.170
I'm going to be there
to answer questions

00:17:07.170 --> 00:17:09.810
about interactive
watch faces and Always

00:17:09.810 --> 00:17:12.980
On mode from user
experience perspective.

00:17:12.980 --> 00:17:15.050
And we have interactive
watch face samples

00:17:15.050 --> 00:17:16.608
on our GitHub repository.

00:17:16.608 --> 00:17:18.899
And just join our community
if you have more questions.

00:17:18.899 --> 00:17:19.180
WAYNE PIEKARSKI: Yeah.

00:17:19.180 --> 00:17:21.170
We're going have a whole bunch
of people in the room next door

00:17:21.170 --> 00:17:21.960
from Android Wear team.

00:17:21.960 --> 00:17:22.560
I'm going to be there.

00:17:22.560 --> 00:17:24.180
JP will be there,
a few other people.

00:17:24.180 --> 00:17:26.680
So if you've got questions about
it, feel free to come over.

00:17:26.680 --> 00:17:28.510
And also try out the Code
Labs that we have as well.

00:17:28.510 --> 00:17:31.020
It's a great opportunity to
sit down and sort of work

00:17:31.020 --> 00:17:33.020
through some of the things
we just talked about.

00:17:33.020 --> 00:17:35.740
They kind of guide you through
the steps and it's really easy.

00:17:35.740 --> 00:17:38.290
And if you can't make
it to those sessions,

00:17:38.290 --> 00:17:42.660
remember we've got our Android
Wear developers group on G+.

00:17:42.660 --> 00:17:45.070
So it's g.co/AndroidWearDev.

00:17:45.070 --> 00:17:46.300
Feel free to join that.

00:17:46.300 --> 00:17:47.800
And we have like
20,000 people there

00:17:47.800 --> 00:17:50.686
who-- you can post questions
and someone like me

00:17:50.686 --> 00:17:52.060
or other people
will answer them.

00:17:52.060 --> 00:17:53.820
And we have discussions
about things.

00:17:53.820 --> 00:17:55.197
We have blog posts that go out.

00:17:55.197 --> 00:17:57.030
So there's a lot of
really cool information.

00:17:57.030 --> 00:17:59.920
So make sure you follow that
group and follow us on Google+

00:17:59.920 --> 00:18:00.950
and Twitter.

00:18:00.950 --> 00:18:02.376
And otherwise, that's about it.

00:18:02.376 --> 00:18:03.750
So thank you very
much for coming

00:18:03.750 --> 00:18:05.710
and we look forward to any
questions you might have.

00:18:05.710 --> 00:18:06.238
Thank you.

00:18:13.900 --> 00:18:15.040
Any questions?

00:18:15.040 --> 00:18:16.486
Did you have one back there?

00:18:16.486 --> 00:18:18.240
No?

00:18:18.240 --> 00:18:20.140
One other thing also,
is that the samples are

00:18:20.140 --> 00:18:21.760
available in Android Studio.

00:18:21.760 --> 00:18:23.760
And Android Studio has
this great sample feature

00:18:23.760 --> 00:18:25.050
that some people haven't
heard of where you just

00:18:25.050 --> 00:18:26.091
go new, import, sample.

00:18:26.091 --> 00:18:28.340
You type name and it imports
it straight out of GitHub

00:18:28.340 --> 00:18:29.320
and checks it out.

00:18:29.320 --> 00:18:30.280
And you can just hit
the build button.

00:18:30.280 --> 00:18:31.920
Within like 30 seconds
you're building it.

00:18:31.920 --> 00:18:33.410
It's on your phone
and your watch.

00:18:33.410 --> 00:18:35.780
So it's definitely a really
cool thing that a lot of people

00:18:35.780 --> 00:18:36.260
don't know about.

00:18:36.260 --> 00:18:37.200
So it's kind of nice.

00:18:37.200 --> 00:18:37.710
Question.

00:18:37.710 --> 00:18:38.615
AUDIENCE: Yes.

00:18:38.615 --> 00:18:42.462
So you recommend to show
the clock on Ambient Mode.

00:18:42.462 --> 00:18:43.425
WAYNE PIEKARSKI: Yeah.

00:18:43.425 --> 00:18:45.480
AUDIENCE: I've noticed
every watch face

00:18:45.480 --> 00:18:51.560
I install, I have to set 24 hour
time or month/day or day/month.

00:18:51.560 --> 00:18:54.500
Is there a global setting
available in Android Wear where

00:18:54.500 --> 00:18:57.100
I can just say, as an
application developer, just

00:18:57.100 --> 00:18:59.849
show it how the user
is usually seeing it?

00:18:59.849 --> 00:19:02.390
WAYNE PIEKARSKI: I think Android
Wear does locales correctly,

00:19:02.390 --> 00:19:04.200
but if the developer
of the app doesn't

00:19:04.200 --> 00:19:06.670
draw the clock correctly--
so for example,

00:19:06.670 --> 00:19:09.210
if the app developer says,
retrieve the number of hours

00:19:09.210 --> 00:19:11.680
as an integer and
then just draw it,

00:19:11.680 --> 00:19:13.850
there is no way the locale
support can override it.

00:19:13.850 --> 00:19:17.180
But if you actually use Java
correctly you can actually say,

00:19:17.180 --> 00:19:19.584
give me this value in the
correctly formatted time

00:19:19.584 --> 00:19:20.250
for this person.

00:19:20.250 --> 00:19:22.694
AUDIENCE: So it will just
use the phone locale?

00:19:22.694 --> 00:19:24.610
WAYNE PIEKARSKI: Yeah,
if it's done correctly.

00:19:24.610 --> 00:19:26.026
But the problem
is a lot of people

00:19:26.026 --> 00:19:28.420
probably aren't doing it
right, and so their app insists

00:19:28.420 --> 00:19:30.560
on having check boxes
to control the--

00:19:30.560 --> 00:19:34.265
AUDIENCE: Pretty much every
watch face I've seen requires

00:19:34.265 --> 00:19:34.890
that and it's--

00:19:34.890 --> 00:19:35.806
WAYNE PIEKARSKI: Yeah.

00:19:35.806 --> 00:19:38.297
I mean, because there are
calls in the API of Android

00:19:38.297 --> 00:19:40.130
Wear if you say, take
this time and rendered

00:19:40.130 --> 00:19:42.751
as a string for me, and
it will do it correctly

00:19:42.751 --> 00:19:44.000
based on the locale you're in.

00:19:44.000 --> 00:19:45.583
But if they're not
doing it right-- so

00:19:45.583 --> 00:19:48.947
it's kind of a bug in the
implementation of each one.

00:19:48.947 --> 00:19:51.030
Unfortunately, you'd have
to contact the developer

00:19:51.030 --> 00:19:55.190
and say, hey you didn't do
this locale stuff right.

00:19:55.190 --> 00:19:56.160
But, yeah.

00:19:56.160 --> 00:19:58.500
The watch can't override it
if you're not using the API

00:19:58.500 --> 00:19:59.541
correctly, unfortunately.

00:20:02.420 --> 00:20:03.750
Any other questions?

00:20:03.750 --> 00:20:04.652
Yeah.

00:20:04.652 --> 00:20:05.568
AUDIENCE: [INAUDIBLE]?

00:20:17.444 --> 00:20:20.080
WAYNE PIEKARSKI: So
the question was,

00:20:20.080 --> 00:20:21.840
there was a slide
where the mock up

00:20:21.840 --> 00:20:24.427
showed the clock moving
during one of the slides,

00:20:24.427 --> 00:20:25.760
and what was the deal with that?

00:20:25.760 --> 00:20:27.280
So let's see if
we can find that.

00:20:27.280 --> 00:20:28.613
Is that this one?

00:20:28.613 --> 00:20:31.006
JP GIL: It's right in the
beginning of the presentation.

00:20:34.270 --> 00:20:36.310
Probably the second slide.

00:20:36.310 --> 00:20:36.810
This one.

00:20:36.810 --> 00:20:38.260
Yeah.

00:20:38.260 --> 00:20:39.760
WAYNE PIEKARSKI:
Both are different.

00:20:39.760 --> 00:20:41.280
JP GIL: Go back one.

00:20:41.280 --> 00:20:41.890
Yeah, exactly.

00:20:41.890 --> 00:20:42.880
WAYNE PIEKARSKI: Ah, that one.

00:20:42.880 --> 00:20:43.350
Oh, yeah.

00:20:43.350 --> 00:20:44.683
That's a feature of watch faces.

00:20:44.683 --> 00:20:47.110
So in the watch face
API, a watch face

00:20:47.110 --> 00:20:49.750
has the ability to
ask the framework, hey

00:20:49.750 --> 00:20:51.880
what cards have popped
up and how high are they

00:20:51.880 --> 00:20:53.140
up on the screen?

00:20:53.140 --> 00:20:55.380
So you have the ability
to resize your content

00:20:55.380 --> 00:20:57.530
or shift it around or
whatever you want to do.

00:20:57.530 --> 00:20:59.070
So if you have an
analog watch face

00:20:59.070 --> 00:21:01.390
you could shrink
it so that it fits.

00:21:01.390 --> 00:21:03.917
So there is a-- as part of
the watch face framework,

00:21:03.917 --> 00:21:05.500
it does have the
ability to crew that.

00:21:05.500 --> 00:21:07.210
Now, not all watch faces do it.

00:21:07.210 --> 00:21:09.490
If you've got a clock
that's very at the top,

00:21:09.490 --> 00:21:11.110
anyway, you don't
need to do anything.

00:21:11.110 --> 00:21:12.380
But if you have some
kind of watch face

00:21:12.380 --> 00:21:14.160
where, for some reason,
you want to have everything

00:21:14.160 --> 00:21:16.170
at the bottom, it might
be good to resize it,

00:21:16.170 --> 00:21:17.740
but you have full
control over that.

00:21:17.740 --> 00:21:18.000
JP GIL: Yeah.

00:21:18.000 --> 00:21:19.583
As he said, there
are some watch faces

00:21:19.583 --> 00:21:21.010
that do a really
good job at that.

00:21:21.010 --> 00:21:23.380
They actually scale
very nicely and neatly

00:21:23.380 --> 00:21:24.650
and it works in app devices.

00:21:24.650 --> 00:21:27.610
But if you just provide
enough safe area,

00:21:27.610 --> 00:21:30.980
you don't have to deal with it.

00:21:30.980 --> 00:21:32.480
WAYNE PIEKARSKI:
Any more questions?

00:21:35.910 --> 00:21:36.490
OK.

00:21:36.490 --> 00:21:40.010
Well otherwise, as I said,
we've got office hours starting

00:21:40.010 --> 00:21:41.602
at 2:00 in the Code Lab room.

00:21:41.602 --> 00:21:43.310
So please come by and
have a chat with us

00:21:43.310 --> 00:21:45.057
and try it all out.

00:21:45.057 --> 00:21:46.265
Otherwise, thanks for coming.

00:21:46.265 --> 00:21:47.000
JP GIL: Thank you.

00:21:47.000 --> 00:21:47.120
WAYNE PIEKARSKI: All right.

00:21:47.120 --> 00:21:48.870
Have a good conference.

