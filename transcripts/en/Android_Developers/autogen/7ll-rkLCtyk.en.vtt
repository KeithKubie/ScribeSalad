WEBVTT
Kind: captions
Language: en

00:00:01.500 --> 00:00:04.630
[Music]

00:00:04.630 --> 00:00:04.640
[Music]
 

00:00:04.640 --> 00:00:08.950
[Music]
hello good afternoon everyone

00:00:08.950 --> 00:00:08.960
hello good afternoon everyone
 

00:00:08.960 --> 00:00:12.499
hello good afternoon everyone
we're so excited to be here today we

00:00:12.499 --> 00:00:12.509
we're so excited to be here today we
 

00:00:12.509 --> 00:00:14.209
we're so excited to be here today we
know you have a choice of session so

00:00:14.209 --> 00:00:14.219
know you have a choice of session so
 

00:00:14.219 --> 00:00:16.310
know you have a choice of session so
thank you for choosing us and being here

00:00:16.310 --> 00:00:16.320
thank you for choosing us and being here
 

00:00:16.320 --> 00:00:19.490
thank you for choosing us and being here
today with us I am James and I work on

00:00:19.490 --> 00:00:19.500
today with us I am James and I work on
 

00:00:19.500 --> 00:00:22.429
today with us I am James and I work on
Android studio and here with me today is

00:00:22.429 --> 00:00:22.439
Android studio and here with me today is
 

00:00:22.439 --> 00:00:24.620
Android studio and here with me today is
Jerome he's the tech lead for the build

00:00:24.620 --> 00:00:24.630
Jerome he's the tech lead for the build
 

00:00:24.630 --> 00:00:27.019
Jerome he's the tech lead for the build
system in Android studio so we're here

00:00:27.019 --> 00:00:27.029
system in Android studio so we're here
 

00:00:27.029 --> 00:00:28.670
system in Android studio so we're here
today to talk about one of our favorite

00:00:28.670 --> 00:00:28.680
today to talk about one of our favorite
 

00:00:28.680 --> 00:00:31.730
today to talk about one of our favorite
topics which is how to speed up your

00:00:31.730 --> 00:00:31.740
topics which is how to speed up your
 

00:00:31.740 --> 00:00:36.709
topics which is how to speed up your
Android Gradle builds now slow build

00:00:36.709 --> 00:00:36.719
Android Gradle builds now slow build
 

00:00:36.719 --> 00:00:39.799
Android Gradle builds now slow build
speed is a huge productivity buster it's

00:00:39.799 --> 00:00:39.809
speed is a huge productivity buster it's
 

00:00:39.809 --> 00:00:42.200
speed is a huge productivity buster it's
kind of like driving down the road and

00:00:42.200 --> 00:00:42.210
kind of like driving down the road and
 

00:00:42.210 --> 00:00:44.450
kind of like driving down the road and
constantly hitting speed bumps after

00:00:44.450 --> 00:00:44.460
constantly hitting speed bumps after
 

00:00:44.460 --> 00:00:46.760
constantly hitting speed bumps after
speed bumps we've heard you loud and

00:00:46.760 --> 00:00:46.770
speed bumps we've heard you loud and
 

00:00:46.770 --> 00:00:49.459
speed bumps we've heard you loud and
clear that build speed is critical to

00:00:49.459 --> 00:00:49.469
clear that build speed is critical to
 

00:00:49.469 --> 00:00:51.650
clear that build speed is critical to
your productivity that's why we've been

00:00:51.650 --> 00:00:51.660
your productivity that's why we've been
 

00:00:51.660 --> 00:00:53.450
your productivity that's why we've been
focused for the past several quarters on

00:00:53.450 --> 00:00:53.460
focused for the past several quarters on
 

00:00:53.460 --> 00:00:55.250
focused for the past several quarters on
improving our build speed performance

00:00:55.250 --> 00:00:55.260
improving our build speed performance
 

00:00:55.260 --> 00:00:58.639
improving our build speed performance
now to give you some context on why

00:00:58.639 --> 00:00:58.649
now to give you some context on why
 

00:00:58.649 --> 00:01:00.410
now to give you some context on why
we're so excited to talk about this

00:01:00.410 --> 00:01:00.420
we're so excited to talk about this
 

00:01:00.420 --> 00:01:03.650
we're so excited to talk about this
subject today over the past year we've

00:01:03.650 --> 00:01:03.660
subject today over the past year we've
 

00:01:03.660 --> 00:01:06.649
subject today over the past year we've
been hosting a series of developer build

00:01:06.649 --> 00:01:06.659
been hosting a series of developer build
 

00:01:06.659 --> 00:01:09.980
been hosting a series of developer build
clinics in these build clinics we meet

00:01:09.980 --> 00:01:09.990
clinics in these build clinics we meet
 

00:01:09.990 --> 00:01:12.230
clinics in these build clinics we meet
with developers one on one and they

00:01:12.230 --> 00:01:12.240
with developers one on one and they
 

00:01:12.240 --> 00:01:14.420
with developers one on one and they
would come to us and tell us about their

00:01:14.420 --> 00:01:14.430
would come to us and tell us about their
 

00:01:14.430 --> 00:01:16.820
would come to us and tell us about their
build performance issues now we would

00:01:16.820 --> 00:01:16.830
build performance issues now we would
 

00:01:16.830 --> 00:01:18.800
build performance issues now we would
play doctor in these clinics which is

00:01:18.800 --> 00:01:18.810
play doctor in these clinics which is
 

00:01:18.810 --> 00:01:22.460
play doctor in these clinics which is
kind of fun and but the most surprising

00:01:22.460 --> 00:01:22.470
kind of fun and but the most surprising
 

00:01:22.470 --> 00:01:24.649
kind of fun and but the most surprising
part of this and this is surprising to

00:01:24.649 --> 00:01:24.659
part of this and this is surprising to
 

00:01:24.659 --> 00:01:28.010
part of this and this is surprising to
us is that more often than not we would

00:01:28.010 --> 00:01:28.020
us is that more often than not we would
 

00:01:28.020 --> 00:01:30.050
us is that more often than not we would
be able to speed up their development

00:01:30.050 --> 00:01:30.060
be able to speed up their development
 

00:01:30.060 --> 00:01:34.370
be able to speed up their development
built by 3 X 4 X sometimes even up to 10

00:01:34.370 --> 00:01:34.380
built by 3 X 4 X sometimes even up to 10
 

00:01:34.380 --> 00:01:38.080
built by 3 X 4 X sometimes even up to 10
X by applying a simple set of tips and

00:01:38.080 --> 00:01:38.090
X by applying a simple set of tips and
 

00:01:38.090 --> 00:01:40.850
X by applying a simple set of tips and
that set of tips is what we will share

00:01:40.850 --> 00:01:40.860
that set of tips is what we will share
 

00:01:40.860 --> 00:01:44.710
that set of tips is what we will share
with you today

00:01:44.710 --> 00:01:44.720
 

00:01:44.720 --> 00:01:48.020
now our talk today will be structured

00:01:48.020 --> 00:01:48.030
now our talk today will be structured
 

00:01:48.030 --> 00:01:50.539
now our talk today will be structured
into three parts first I'm going to talk

00:01:50.539 --> 00:01:50.549
into three parts first I'm going to talk
 

00:01:50.549 --> 00:01:52.910
into three parts first I'm going to talk
about the tips for improving your

00:01:52.910 --> 00:01:52.920
about the tips for improving your
 

00:01:52.920 --> 00:01:56.060
about the tips for improving your
project's development built second

00:01:56.060 --> 00:01:56.070
project's development built second
 

00:01:56.070 --> 00:01:58.940
project's development built second
jerome is going to talk to you about how

00:01:58.940 --> 00:01:58.950
jerome is going to talk to you about how
 

00:01:58.950 --> 00:02:01.120
jerome is going to talk to you about how
you can make the most out of the new

00:02:01.120 --> 00:02:01.130
you can make the most out of the new
 

00:02:01.130 --> 00:02:04.340
you can make the most out of the new
Android Gradle plug-in 3.0 that we just

00:02:04.340 --> 00:02:04.350
Android Gradle plug-in 3.0 that we just
 

00:02:04.350 --> 00:02:07.370
Android Gradle plug-in 3.0 that we just
released yesterday and finally he will

00:02:07.370 --> 00:02:07.380
released yesterday and finally he will
 

00:02:07.380 --> 00:02:10.010
released yesterday and finally he will
wrap up by talking about some tools and

00:02:10.010 --> 00:02:10.020
wrap up by talking about some tools and
 

00:02:10.020 --> 00:02:13.040
wrap up by talking about some tools and
best practices on the how to debug and

00:02:13.040 --> 00:02:13.050
best practices on the how to debug and
 

00:02:13.050 --> 00:02:13.610
best practices on the how to debug and
profile

00:02:13.610 --> 00:02:13.620
profile
 

00:02:13.620 --> 00:02:19.369
profile
your build performance issues so now

00:02:19.369 --> 00:02:19.379
your build performance issues so now
 

00:02:19.379 --> 00:02:21.740
your build performance issues so now
let's talk about the tips for speeding

00:02:21.740 --> 00:02:21.750
let's talk about the tips for speeding
 

00:02:21.750 --> 00:02:25.550
let's talk about the tips for speeding
up your builds so what I'm going to show

00:02:25.550 --> 00:02:25.560
up your builds so what I'm going to show
 

00:02:25.560 --> 00:02:27.890
up your builds so what I'm going to show
you is that I'm going to present these

00:02:27.890 --> 00:02:27.900
you is that I'm going to present these
 

00:02:27.900 --> 00:02:31.250
you is that I'm going to present these
tips to you one at a time and what I'm

00:02:31.250 --> 00:02:31.260
tips to you one at a time and what I'm
 

00:02:31.260 --> 00:02:33.440
tips to you one at a time and what I'm
also going to do is that I'm also going

00:02:33.440 --> 00:02:33.450
also going to do is that I'm also going
 

00:02:33.450 --> 00:02:36.589
also going to do is that I'm also going
to use the Santa tracker project as an

00:02:36.589 --> 00:02:36.599
to use the Santa tracker project as an
 

00:02:36.599 --> 00:02:39.559
to use the Santa tracker project as an
example to show you the impact of each

00:02:39.559 --> 00:02:39.569
example to show you the impact of each
 

00:02:39.569 --> 00:02:41.930
example to show you the impact of each
of these tips now I'm going to apply

00:02:41.930 --> 00:02:41.940
of these tips now I'm going to apply
 

00:02:41.940 --> 00:02:44.780
of these tips now I'm going to apply
these tips one at a time and we'll see

00:02:44.780 --> 00:02:44.790
these tips one at a time and we'll see
 

00:02:44.790 --> 00:02:46.819
these tips one at a time and we'll see
how fast we can get the bill to become

00:02:46.819 --> 00:02:46.829
how fast we can get the bill to become
 

00:02:46.829 --> 00:02:52.940
how fast we can get the bill to become
at the end okay okay before we start

00:02:52.940 --> 00:02:52.950
at the end okay okay before we start
 

00:02:52.950 --> 00:02:54.770
at the end okay okay before we start
though I need to talk to you a little

00:02:54.770 --> 00:02:54.780
though I need to talk to you a little
 

00:02:54.780 --> 00:02:56.660
though I need to talk to you a little
bit about the center tracker project

00:02:56.660 --> 00:02:56.670
bit about the center tracker project
 

00:02:56.670 --> 00:02:58.819
bit about the center tracker project
because build performance is really

00:02:58.819 --> 00:02:58.829
because build performance is really
 

00:02:58.829 --> 00:03:00.410
because build performance is really
dependent on the project's

00:03:00.410 --> 00:03:00.420
dependent on the project's
 

00:03:00.420 --> 00:03:03.500
dependent on the project's
characteristics so the center tracker is

00:03:03.500 --> 00:03:03.510
characteristics so the center tracker is
 

00:03:03.510 --> 00:03:05.720
characteristics so the center tracker is
organized into nine different modules

00:03:05.720 --> 00:03:05.730
organized into nine different modules
 

00:03:05.730 --> 00:03:08.149
organized into nine different modules
including a where module it has about

00:03:08.149 --> 00:03:08.159
including a where module it has about
 

00:03:08.159 --> 00:03:11.089
including a where module it has about
500 Java files it's pretty resource

00:03:11.089 --> 00:03:11.099
500 Java files it's pretty resource
 

00:03:11.099 --> 00:03:14.649
500 Java files it's pretty resource
heavy with thousands of XML files and

00:03:14.649 --> 00:03:14.659
heavy with thousands of XML files and
 

00:03:14.659 --> 00:03:19.339
heavy with thousands of XML files and
3,500 pngs it uses multi decks no

00:03:19.339 --> 00:03:19.349
3,500 pngs it uses multi decks no
 

00:03:19.349 --> 00:03:21.530
3,500 pngs it uses multi decks no
annotation processors and the final

00:03:21.530 --> 00:03:21.540
annotation processors and the final
 

00:03:21.540 --> 00:03:24.440
annotation processors and the final
debug apk is about 60 megabytes so it's

00:03:24.440 --> 00:03:24.450
debug apk is about 60 megabytes so it's
 

00:03:24.450 --> 00:03:27.409
debug apk is about 60 megabytes so it's
fairly large if you would like to

00:03:27.409 --> 00:03:27.419
fairly large if you would like to
 

00:03:27.419 --> 00:03:29.360
fairly large if you would like to
explore more about this project you can

00:03:29.360 --> 00:03:29.370
explore more about this project you can
 

00:03:29.370 --> 00:03:35.119
explore more about this project you can
find it on Google's github account now

00:03:35.119 --> 00:03:35.129
find it on Google's github account now
 

00:03:35.129 --> 00:03:37.520
find it on Google's github account now
for benchmarking of this project I'm

00:03:37.520 --> 00:03:37.530
for benchmarking of this project I'm
 

00:03:37.530 --> 00:03:39.589
for benchmarking of this project I'm
going to show you three sets of numbers

00:03:39.589 --> 00:03:39.599
going to show you three sets of numbers
 

00:03:39.599 --> 00:03:42.259
going to show you three sets of numbers
focused on three built scenarios the

00:03:42.259 --> 00:03:42.269
focused on three built scenarios the
 

00:03:42.269 --> 00:03:44.750
focused on three built scenarios the
first one is simply a full build it's

00:03:44.750 --> 00:03:44.760
first one is simply a full build it's
 

00:03:44.760 --> 00:03:47.539
first one is simply a full build it's
just a clean assemble debug the second

00:03:47.539 --> 00:03:47.549
just a clean assemble debug the second
 

00:03:47.549 --> 00:03:50.479
just a clean assemble debug the second
one is a incremental build with a Java

00:03:50.479 --> 00:03:50.489
one is a incremental build with a Java
 

00:03:50.489 --> 00:03:50.990
one is a incremental build with a Java
change

00:03:50.990 --> 00:03:51.000
change
 

00:03:51.000 --> 00:03:53.780
change
it's a one-line Java change in a method

00:03:53.780 --> 00:03:53.790
it's a one-line Java change in a method
 

00:03:53.790 --> 00:03:56.720
it's a one-line Java change in a method
implementation and the third one is an

00:03:56.720 --> 00:03:56.730
implementation and the third one is an
 

00:03:56.730 --> 00:03:58.550
implementation and the third one is an
incremental build with a resource change

00:03:58.550 --> 00:03:58.560
incremental build with a resource change
 

00:03:58.560 --> 00:04:01.129
incremental build with a resource change
and it's a simple add or remove a string

00:04:01.129 --> 00:04:01.139
and it's a simple add or remove a string
 

00:04:01.139 --> 00:04:03.349
and it's a simple add or remove a string
resource and we can measure the build

00:04:03.349 --> 00:04:03.359
resource and we can measure the build
 

00:04:03.359 --> 00:04:05.240
resource and we can measure the build
times for each of these now just

00:04:05.240 --> 00:04:05.250
times for each of these now just
 

00:04:05.250 --> 00:04:07.699
times for each of these now just
remember build times are highly

00:04:07.699 --> 00:04:07.709
remember build times are highly
 

00:04:07.709 --> 00:04:09.199
remember build times are highly
dependent on your projects

00:04:09.199 --> 00:04:09.209
dependent on your projects
 

00:04:09.209 --> 00:04:10.699
dependent on your projects
characteristics and your build

00:04:10.699 --> 00:04:10.709
characteristics and your build
 

00:04:10.709 --> 00:04:13.490
characteristics and your build
environment so you may get more or you

00:04:13.490 --> 00:04:13.500
environment so you may get more or you
 

00:04:13.500 --> 00:04:16.960
environment so you may get more or you
may get less out of these tips

00:04:16.960 --> 00:04:16.970
 

00:04:16.970 --> 00:04:23.200
that is to say actual results may vary

00:04:23.200 --> 00:04:23.210
 

00:04:23.210 --> 00:04:26.690
okay so the first tip is to make sure

00:04:26.690 --> 00:04:26.700
okay so the first tip is to make sure
 

00:04:26.700 --> 00:04:28.850
okay so the first tip is to make sure
you use the latest Android Gradle

00:04:28.850 --> 00:04:28.860
you use the latest Android Gradle
 

00:04:28.860 --> 00:04:32.090
you use the latest Android Gradle
plug-in with each release we make a lot

00:04:32.090 --> 00:04:32.100
plug-in with each release we make a lot
 

00:04:32.100 --> 00:04:35.180
plug-in with each release we make a lot
of bug fixes and fix performance issues

00:04:35.180 --> 00:04:35.190
of bug fixes and fix performance issues
 

00:04:35.190 --> 00:04:36.950
of bug fixes and fix performance issues
as well as introduce new performance

00:04:36.950 --> 00:04:36.960
as well as introduce new performance
 

00:04:36.960 --> 00:04:38.870
as well as introduce new performance
features so you want to make sure you

00:04:38.870 --> 00:04:38.880
features so you want to make sure you
 

00:04:38.880 --> 00:04:41.750
features so you want to make sure you
are able to leverage those now there are

00:04:41.750 --> 00:04:41.760
are able to leverage those now there are
 

00:04:41.760 --> 00:04:43.970
are able to leverage those now there are
a couple of things to note here first

00:04:43.970 --> 00:04:43.980
a couple of things to note here first
 

00:04:43.980 --> 00:04:46.659
a couple of things to note here first
one is that starting with the plug-in

00:04:46.659 --> 00:04:46.669
one is that starting with the plug-in
 

00:04:46.669 --> 00:04:49.760
one is that starting with the plug-in
3.0 we are going to distribute the

00:04:49.760 --> 00:04:49.770
3.0 we are going to distribute the
 

00:04:49.770 --> 00:04:51.890
3.0 we are going to distribute the
plug-in through the new Google's maven

00:04:51.890 --> 00:04:51.900
plug-in through the new Google's maven
 

00:04:51.900 --> 00:04:54.260
plug-in through the new Google's maven
repository that we announced yesterday

00:04:54.260 --> 00:04:54.270
repository that we announced yesterday
 

00:04:54.270 --> 00:04:56.840
repository that we announced yesterday
so you need to add that maven line at

00:04:56.840 --> 00:04:56.850
so you need to add that maven line at
 

00:04:56.850 --> 00:05:00.020
so you need to add that maven line at
the top to get the new plugin second is

00:05:00.020 --> 00:05:00.030
the top to get the new plugin second is
 

00:05:00.030 --> 00:05:03.440
the top to get the new plugin second is
that the plug-in often require specific

00:05:03.440 --> 00:05:03.450
that the plug-in often require specific
 

00:05:03.450 --> 00:05:05.390
that the plug-in often require specific
version of build tools as well as

00:05:05.390 --> 00:05:05.400
version of build tools as well as
 

00:05:05.400 --> 00:05:08.360
version of build tools as well as
specific versions of Gradle itself so

00:05:08.360 --> 00:05:08.370
specific versions of Gradle itself so
 

00:05:08.370 --> 00:05:10.490
specific versions of Gradle itself so
the easiest way for you to do this is do

00:05:10.490 --> 00:05:10.500
the easiest way for you to do this is do
 

00:05:10.500 --> 00:05:12.830
the easiest way for you to do this is do
the update in Android studio because

00:05:12.830 --> 00:05:12.840
the update in Android studio because
 

00:05:12.840 --> 00:05:14.600
the update in Android studio because
they will figure out what it needs and

00:05:14.600 --> 00:05:14.610
they will figure out what it needs and
 

00:05:14.610 --> 00:05:17.140
they will figure out what it needs and
make sure it's the right combination and

00:05:17.140 --> 00:05:17.150
make sure it's the right combination and
 

00:05:17.150 --> 00:05:21.020
make sure it's the right combination and
third the 3.0 plug-in is a bit of an

00:05:21.020 --> 00:05:21.030
third the 3.0 plug-in is a bit of an
 

00:05:21.030 --> 00:05:23.000
third the 3.0 plug-in is a bit of an
exception because we introduced some

00:05:23.000 --> 00:05:23.010
exception because we introduced some
 

00:05:23.010 --> 00:05:25.400
exception because we introduced some
breaking changes so it might requires a

00:05:25.400 --> 00:05:25.410
breaking changes so it might requires a
 

00:05:25.410 --> 00:05:27.320
breaking changes so it might requires a
little bit more work on your part to

00:05:27.320 --> 00:05:27.330
little bit more work on your part to
 

00:05:27.330 --> 00:05:30.110
little bit more work on your part to
update we've published a migration guide

00:05:30.110 --> 00:05:30.120
update we've published a migration guide
 

00:05:30.120 --> 00:05:32.060
update we've published a migration guide
and you'll see the link at the end of

00:05:32.060 --> 00:05:32.070
and you'll see the link at the end of
 

00:05:32.070 --> 00:05:38.240
and you'll see the link at the end of
the presentation and this was the result

00:05:38.240 --> 00:05:38.250
the presentation and this was the result
 

00:05:38.250 --> 00:05:40.969
the presentation and this was the result
that I got after switching the Santa

00:05:40.969 --> 00:05:40.979
that I got after switching the Santa
 

00:05:40.979 --> 00:05:43.520
that I got after switching the Santa
tracker project from the old 2.2 plug-in

00:05:43.520 --> 00:05:43.530
tracker project from the old 2.2 plug-in
 

00:05:43.530 --> 00:05:47.659
tracker project from the old 2.2 plug-in
- 3.0 alpha one now you can see that

00:05:47.659 --> 00:05:47.669
- 3.0 alpha one now you can see that
 

00:05:47.669 --> 00:05:50.300
- 3.0 alpha one now you can see that
immediately we shaved off 25% from the

00:05:50.300 --> 00:05:50.310
immediately we shaved off 25% from the
 

00:05:50.310 --> 00:05:53.810
immediately we shaved off 25% from the
full build 40% from the incremental Java

00:05:53.810 --> 00:05:53.820
full build 40% from the incremental Java
 

00:05:53.820 --> 00:05:57.529
full build 40% from the incremental Java
change and about 16% for resource change

00:05:57.529 --> 00:05:57.539
change and about 16% for resource change
 

00:05:57.539 --> 00:05:59.900
change and about 16% for resource change
not that for updating just to the

00:05:59.900 --> 00:05:59.910
not that for updating just to the
 

00:05:59.910 --> 00:06:05.090
not that for updating just to the
updating to the latest plug-in now

00:06:05.090 --> 00:06:05.100
updating to the latest plug-in now
 

00:06:05.100 --> 00:06:08.930
updating to the latest plug-in now
second tip is to avoid legacy multi

00:06:08.930 --> 00:06:08.940
second tip is to avoid legacy multi
 

00:06:08.940 --> 00:06:12.409
second tip is to avoid legacy multi
decks now I think most of you know that

00:06:12.409 --> 00:06:12.419
decks now I think most of you know that
 

00:06:12.419 --> 00:06:15.080
decks now I think most of you know that
if your app exceeds the 64k method

00:06:15.080 --> 00:06:15.090
if your app exceeds the 64k method
 

00:06:15.090 --> 00:06:17.270
if your app exceeds the 64k method
reference limit you will need to use

00:06:17.270 --> 00:06:17.280
reference limit you will need to use
 

00:06:17.280 --> 00:06:20.150
reference limit you will need to use
multi decks but what you may not know is

00:06:20.150 --> 00:06:20.160
multi decks but what you may not know is
 

00:06:20.160 --> 00:06:22.880
multi decks but what you may not know is
that if your min SDK version is lower

00:06:22.880 --> 00:06:22.890
that if your min SDK version is lower
 

00:06:22.890 --> 00:06:26.719
that if your min SDK version is lower
than 21 and you use multi decks you will

00:06:26.719 --> 00:06:26.729
than 21 and you use multi decks you will
 

00:06:26.729 --> 00:06:29.000
than 21 and you use multi decks you will
be using what's called legacy multi

00:06:29.000 --> 00:06:29.010
be using what's called legacy multi
 

00:06:29.010 --> 00:06:32.029
be using what's called legacy multi
decks which is a lot slower to build so

00:06:32.029 --> 00:06:32.039
decks which is a lot slower to build so
 

00:06:32.039 --> 00:06:33.720
decks which is a lot slower to build so
you want to avoid that

00:06:33.720 --> 00:06:33.730
you want to avoid that
 

00:06:33.730 --> 00:06:36.270
you want to avoid that
now if you usually start your build in

00:06:36.270 --> 00:06:36.280
now if you usually start your build in
 

00:06:36.280 --> 00:06:38.490
now if you usually start your build in
Android studio by hitting the Run button

00:06:38.490 --> 00:06:38.500
Android studio by hitting the Run button
 

00:06:38.500 --> 00:06:40.950
Android studio by hitting the Run button
this doesn't really apply to you because

00:06:40.950 --> 00:06:40.960
this doesn't really apply to you because
 

00:06:40.960 --> 00:06:43.410
this doesn't really apply to you because
newer versions of Android studio will

00:06:43.410 --> 00:06:43.420
newer versions of Android studio will
 

00:06:43.420 --> 00:06:45.900
newer versions of Android studio will
automatically detect the API level of

00:06:45.900 --> 00:06:45.910
automatically detect the API level of
 

00:06:45.910 --> 00:06:48.150
automatically detect the API level of
your connected device or emulator image

00:06:48.150 --> 00:06:48.160
your connected device or emulator image
 

00:06:48.160 --> 00:06:51.180
your connected device or emulator image
and switch to native multi decks is

00:06:51.180 --> 00:06:51.190
and switch to native multi decks is
 

00:06:51.190 --> 00:06:54.660
and switch to native multi decks is
applicable now but I also know a lot of

00:06:54.660 --> 00:06:54.670
applicable now but I also know a lot of
 

00:06:54.670 --> 00:06:56.280
applicable now but I also know a lot of
you are in the habit of doing your

00:06:56.280 --> 00:06:56.290
you are in the habit of doing your
 

00:06:56.290 --> 00:06:58.440
you are in the habit of doing your
builds from the command line so if you

00:06:58.440 --> 00:06:58.450
builds from the command line so if you
 

00:06:58.450 --> 00:07:00.390
builds from the command line so if you
want to continue to do that you should

00:07:00.390 --> 00:07:00.400
want to continue to do that you should
 

00:07:00.400 --> 00:07:03.120
want to continue to do that you should
define a new product flavor here for

00:07:03.120 --> 00:07:03.130
define a new product flavor here for
 

00:07:03.130 --> 00:07:05.880
define a new product flavor here for
example I call it development and simply

00:07:05.880 --> 00:07:05.890
example I call it development and simply
 

00:07:05.890 --> 00:07:08.640
example I call it development and simply
set your min SDK version to something

00:07:08.640 --> 00:07:08.650
set your min SDK version to something
 

00:07:08.650 --> 00:07:12.270
set your min SDK version to something
that 21 or above and on the command line

00:07:12.270 --> 00:07:12.280
that 21 or above and on the command line
 

00:07:12.280 --> 00:07:14.580
that 21 or above and on the command line
now you can call assemble development

00:07:14.580 --> 00:07:14.590
now you can call assemble development
 

00:07:14.590 --> 00:07:17.400
now you can call assemble development
debug and you will avoid legacy multi

00:07:17.400 --> 00:07:17.410
debug and you will avoid legacy multi
 

00:07:17.410 --> 00:07:22.260
debug and you will avoid legacy multi
decks and then these are the results

00:07:22.260 --> 00:07:22.270
decks and then these are the results
 

00:07:22.270 --> 00:07:24.690
decks and then these are the results
that I got we shaved another 5 seconds

00:07:24.690 --> 00:07:24.700
that I got we shaved another 5 seconds
 

00:07:24.700 --> 00:07:27.300
that I got we shaved another 5 seconds
of the full build a whopping 8 seconds

00:07:27.300 --> 00:07:27.310
of the full build a whopping 8 seconds
 

00:07:27.310 --> 00:07:29.430
of the full build a whopping 8 seconds
that's more than 50% of what we had

00:07:29.430 --> 00:07:29.440
that's more than 50% of what we had
 

00:07:29.440 --> 00:07:32.040
that's more than 50% of what we had
before and then incremental build for

00:07:32.040 --> 00:07:32.050
before and then incremental build for
 

00:07:32.050 --> 00:07:34.260
before and then incremental build for
resource change is about the same as you

00:07:34.260 --> 00:07:34.270
resource change is about the same as you
 

00:07:34.270 --> 00:07:38.420
resource change is about the same as you
would expect

00:07:38.420 --> 00:07:38.430
 

00:07:38.430 --> 00:07:42.150
now the third tip here is that you

00:07:42.150 --> 00:07:42.160
now the third tip here is that you
 

00:07:42.160 --> 00:07:45.240
now the third tip here is that you
should disable multi apk generation for

00:07:45.240 --> 00:07:45.250
should disable multi apk generation for
 

00:07:45.250 --> 00:07:47.790
should disable multi apk generation for
your development build now you do this

00:07:47.790 --> 00:07:47.800
your development build now you do this
 

00:07:47.800 --> 00:07:51.120
your development build now you do this
typically if I add using the split box

00:07:51.120 --> 00:07:51.130
typically if I add using the split box
 

00:07:51.130 --> 00:07:55.170
typically if I add using the split box
in the DSL multi apk allows you to

00:07:55.170 --> 00:07:55.180
in the DSL multi apk allows you to
 

00:07:55.180 --> 00:07:57.390
in the DSL multi apk allows you to
define dimensions that you want to

00:07:57.390 --> 00:07:57.400
define dimensions that you want to
 

00:07:57.400 --> 00:08:01.050
define dimensions that you want to
generate multiple SDKs upon the idea

00:08:01.050 --> 00:08:01.060
generate multiple SDKs upon the idea
 

00:08:01.060 --> 00:08:03.540
generate multiple SDKs upon the idea
here is that you can tell it to generate

00:08:03.540 --> 00:08:03.550
here is that you can tell it to generate
 

00:08:03.550 --> 00:08:06.840
here is that you can tell it to generate
a long dimensions like a bi or density

00:08:06.840 --> 00:08:06.850
a long dimensions like a bi or density
 

00:08:06.850 --> 00:08:09.960
a long dimensions like a bi or density
so that it generates these multiple apks

00:08:09.960 --> 00:08:09.970
so that it generates these multiple apks
 

00:08:09.970 --> 00:08:13.380
so that it generates these multiple apks
that are smaller in size now small apks

00:08:13.380 --> 00:08:13.390
that are smaller in size now small apks
 

00:08:13.390 --> 00:08:15.780
that are smaller in size now small apks
are great for your release notes but

00:08:15.780 --> 00:08:15.790
are great for your release notes but
 

00:08:15.790 --> 00:08:17.640
are great for your release notes but
they aren't that important for your

00:08:17.640 --> 00:08:17.650
they aren't that important for your
 

00:08:17.650 --> 00:08:19.920
they aren't that important for your
development bills so if you turn it on

00:08:19.920 --> 00:08:19.930
development bills so if you turn it on
 

00:08:19.930 --> 00:08:21.480
development bills so if you turn it on
for your development bills you'll be

00:08:21.480 --> 00:08:21.490
for your development bills you'll be
 

00:08:21.490 --> 00:08:24.210
for your development bills you'll be
wasting time packaging and creating

00:08:24.210 --> 00:08:24.220
wasting time packaging and creating
 

00:08:24.220 --> 00:08:29.640
wasting time packaging and creating
these apks that you're not using now to

00:08:29.640 --> 00:08:29.650
these apks that you're not using now to
 

00:08:29.650 --> 00:08:32.520
these apks that you're not using now to
disable multi apk generation properly

00:08:32.520 --> 00:08:32.530
disable multi apk generation properly
 

00:08:32.530 --> 00:08:34.950
disable multi apk generation properly
you can't just disable it in the splits

00:08:34.950 --> 00:08:34.960
you can't just disable it in the splits
 

00:08:34.960 --> 00:08:37.080
you can't just disable it in the splits
block because that block is global to

00:08:37.080 --> 00:08:37.090
block because that block is global to
 

00:08:37.090 --> 00:08:39.930
block because that block is global to
all your build variants so one way you

00:08:39.930 --> 00:08:39.940
all your build variants so one way you
 

00:08:39.940 --> 00:08:42.089
all your build variants so one way you
can do it properly is to define a

00:08:42.089 --> 00:08:42.099
can do it properly is to define a
 

00:08:42.099 --> 00:08:44.460
can do it properly is to define a
property like here here I've defined a

00:08:44.460 --> 00:08:44.470
property like here here I've defined a
 

00:08:44.470 --> 00:08:46.860
property like here here I've defined a
property called death build and I'm just

00:08:46.860 --> 00:08:46.870
property called death build and I'm just
 

00:08:46.870 --> 00:08:47.580
property called death build and I'm just
going to pass

00:08:47.580 --> 00:08:47.590
going to pass
 

00:08:47.590 --> 00:08:50.010
going to pass
property to Gradle every time I do a

00:08:50.010 --> 00:08:50.020
property to Gradle every time I do a
 

00:08:50.020 --> 00:08:52.230
property to Gradle every time I do a
development build and if Gradle sees

00:08:52.230 --> 00:08:52.240
development build and if Gradle sees
 

00:08:52.240 --> 00:08:55.770
development build and if Gradle sees
that property it will set the splits ABI

00:08:55.770 --> 00:08:55.780
that property it will set the splits ABI
 

00:08:55.780 --> 00:08:58.200
that property it will set the splits ABI
and dot density and able to false and

00:08:58.200 --> 00:08:58.210
and dot density and able to false and
 

00:08:58.210 --> 00:09:01.830
and dot density and able to false and
the AP and the multi apk generation will

00:09:01.830 --> 00:09:01.840
the AP and the multi apk generation will
 

00:09:01.840 --> 00:09:06.840
the AP and the multi apk generation will
not happen now if you're using studio

00:09:06.840 --> 00:09:06.850
not happen now if you're using studio
 

00:09:06.850 --> 00:09:09.810
not happen now if you're using studio
you can also pass this flag through the

00:09:09.810 --> 00:09:09.820
you can also pass this flag through the
 

00:09:09.820 --> 00:09:12.720
you can also pass this flag through the
compiler options under preferences by

00:09:12.720 --> 00:09:12.730
compiler options under preferences by
 

00:09:12.730 --> 00:09:17.160
compiler options under preferences by
adding - P dev build in this case with

00:09:17.160 --> 00:09:17.170
adding - P dev build in this case with
 

00:09:17.170 --> 00:09:19.980
adding - P dev build in this case with
this flag every time Studio does a build

00:09:19.980 --> 00:09:19.990
this flag every time Studio does a build
 

00:09:19.990 --> 00:09:21.870
this flag every time Studio does a build
it will also pass the same flag to

00:09:21.870 --> 00:09:21.880
it will also pass the same flag to
 

00:09:21.880 --> 00:09:24.690
it will also pass the same flag to
Gradle so multi apk generation will not

00:09:24.690 --> 00:09:24.700
Gradle so multi apk generation will not
 

00:09:24.700 --> 00:09:30.360
Gradle so multi apk generation will not
occur and these are the numbers I got

00:09:30.360 --> 00:09:30.370
occur and these are the numbers I got
 

00:09:30.370 --> 00:09:34.020
occur and these are the numbers I got
after disabling multi apk again some

00:09:34.020 --> 00:09:34.030
after disabling multi apk again some
 

00:09:34.030 --> 00:09:40.740
after disabling multi apk again some
more improvements across the board now

00:09:40.740 --> 00:09:40.750
more improvements across the board now
 

00:09:40.750 --> 00:09:44.010
more improvements across the board now
tip 4 is to minimize the set of

00:09:44.010 --> 00:09:44.020
tip 4 is to minimize the set of
 

00:09:44.020 --> 00:09:45.900
tip 4 is to minimize the set of
resources that you package in your

00:09:45.900 --> 00:09:45.910
resources that you package in your
 

00:09:45.910 --> 00:09:48.990
resources that you package in your
development build now by default the

00:09:48.990 --> 00:09:49.000
development build now by default the
 

00:09:49.000 --> 00:09:52.200
development build now by default the
build system will include the resources

00:09:52.200 --> 00:09:52.210
build system will include the resources
 

00:09:52.210 --> 00:09:54.300
build system will include the resources
for all the languages and screen

00:09:54.300 --> 00:09:54.310
for all the languages and screen
 

00:09:54.310 --> 00:09:57.030
for all the languages and screen
densities that your app and the

00:09:57.030 --> 00:09:57.040
densities that your app and the
 

00:09:57.040 --> 00:10:00.060
densities that your app and the
libraries that your app uses define so

00:10:00.060 --> 00:10:00.070
libraries that your app uses define so
 

00:10:00.070 --> 00:10:01.770
libraries that your app uses define so
if your app supports many different

00:10:01.770 --> 00:10:01.780
if your app supports many different
 

00:10:01.780 --> 00:10:04.230
if your app supports many different
languages or many different screen

00:10:04.230 --> 00:10:04.240
languages or many different screen
 

00:10:04.240 --> 00:10:07.830
languages or many different screen
densities then you're actually wasting a

00:10:07.830 --> 00:10:07.840
densities then you're actually wasting a
 

00:10:07.840 --> 00:10:10.200
densities then you're actually wasting a
lot of time doing work for no reason

00:10:10.200 --> 00:10:10.210
lot of time doing work for no reason
 

00:10:10.210 --> 00:10:12.600
lot of time doing work for no reason
because during development you're only

00:10:12.600 --> 00:10:12.610
because during development you're only
 

00:10:12.610 --> 00:10:15.630
because during development you're only
ever probably going to be using one set

00:10:15.630 --> 00:10:15.640
ever probably going to be using one set
 

00:10:15.640 --> 00:10:18.660
ever probably going to be using one set
of those resources now to do this you

00:10:18.660 --> 00:10:18.670
of those resources now to do this you
 

00:10:18.670 --> 00:10:20.970
of those resources now to do this you
should use the rest config keyword and

00:10:20.970 --> 00:10:20.980
should use the rest config keyword and
 

00:10:20.980 --> 00:10:24.000
should use the rest config keyword and
specify the language and the screen

00:10:24.000 --> 00:10:24.010
specify the language and the screen
 

00:10:24.010 --> 00:10:26.010
specify the language and the screen
density that you need for your

00:10:26.010 --> 00:10:26.020
density that you need for your
 

00:10:26.020 --> 00:10:31.920
density that you need for your
development build and then you can see

00:10:31.920 --> 00:10:31.930
development build and then you can see
 

00:10:31.930 --> 00:10:34.140
development build and then you can see
here on the full build we shaved off

00:10:34.140 --> 00:10:34.150
here on the full build we shaved off
 

00:10:34.150 --> 00:10:37.590
here on the full build we shaved off
another six seconds 24% off the

00:10:37.590 --> 00:10:37.600
another six seconds 24% off the
 

00:10:37.600 --> 00:10:40.710
another six seconds 24% off the
incremental build in Java change and 21%

00:10:40.710 --> 00:10:40.720
incremental build in Java change and 21%
 

00:10:40.720 --> 00:10:43.430
incremental build in Java change and 21%
for the incremental resource change case

00:10:43.430 --> 00:10:43.440
for the incremental resource change case
 

00:10:43.440 --> 00:10:49.770
for the incremental resource change case
making continuing and mid games next up

00:10:49.770 --> 00:10:49.780
making continuing and mid games next up
 

00:10:49.780 --> 00:10:53.670
making continuing and mid games next up
is disabling PNG crunching now by

00:10:53.670 --> 00:10:53.680
is disabling PNG crunching now by
 

00:10:53.680 --> 00:10:57.300
is disabling PNG crunching now by
default apt will crunch your pngs

00:10:57.300 --> 00:10:57.310
default apt will crunch your pngs
 

00:10:57.310 --> 00:10:59.790
default apt will crunch your pngs
to reduce their size yielding you a

00:10:59.790 --> 00:10:59.800
to reduce their size yielding you a
 

00:10:59.800 --> 00:11:01.410
to reduce their size yielding you a
smaller apk

00:11:01.410 --> 00:11:01.420
smaller apk
 

00:11:01.420 --> 00:11:03.240
smaller apk
again that's a great thing for your

00:11:03.240 --> 00:11:03.250
again that's a great thing for your
 

00:11:03.250 --> 00:11:06.480
again that's a great thing for your
release apks but not that important for

00:11:06.480 --> 00:11:06.490
release apks but not that important for
 

00:11:06.490 --> 00:11:12.960
release apks but not that important for
your development builds so to avoid PNG

00:11:12.960 --> 00:11:12.970
your development builds so to avoid PNG
 

00:11:12.970 --> 00:11:15.510
your development builds so to avoid PNG
crunching you can use the same property

00:11:15.510 --> 00:11:15.520
crunching you can use the same property
 

00:11:15.520 --> 00:11:20.640
crunching you can use the same property
that we define and have add the apt

00:11:20.640 --> 00:11:20.650
that we define and have add the apt
 

00:11:20.650 --> 00:11:22.800
that we define and have add the apt
options and cruncher enable flag to

00:11:22.800 --> 00:11:22.810
options and cruncher enable flag to
 

00:11:22.810 --> 00:11:25.620
options and cruncher enable flag to
disable it if Gradle sees that property

00:11:25.620 --> 00:11:25.630
disable it if Gradle sees that property
 

00:11:25.630 --> 00:11:28.860
disable it if Gradle sees that property
defined and again on Gradle whenever you

00:11:28.860 --> 00:11:28.870
defined and again on Gradle whenever you
 

00:11:28.870 --> 00:11:30.420
defined and again on Gradle whenever you
do a development build you can pass that

00:11:30.420 --> 00:11:30.430
do a development build you can pass that
 

00:11:30.430 --> 00:11:33.360
do a development build you can pass that
property into Gradle to avoid PNG

00:11:33.360 --> 00:11:33.370
property into Gradle to avoid PNG
 

00:11:33.370 --> 00:11:40.260
property into Gradle to avoid PNG
crunching the other option to avoid PNG

00:11:40.260 --> 00:11:40.270
crunching the other option to avoid PNG
 

00:11:40.270 --> 00:11:42.930
crunching the other option to avoid PNG
crunching is to convert all your pngs

00:11:42.930 --> 00:11:42.940
crunching is to convert all your pngs
 

00:11:42.940 --> 00:11:46.440
crunching is to convert all your pngs
into web P now web P is up to 25%

00:11:46.440 --> 00:11:46.450
into web P now web P is up to 25%
 

00:11:46.450 --> 00:11:51.770
into web P now web P is up to 25%
smaller so you get a smaller apk to boot

00:11:51.770 --> 00:11:51.780
smaller so you get a smaller apk to boot
 

00:11:51.780 --> 00:11:54.450
smaller so you get a smaller apk to boot
newer versions of Android studio also

00:11:54.450 --> 00:11:54.460
newer versions of Android studio also
 

00:11:54.460 --> 00:11:57.120
newer versions of Android studio also
supports conversion within the IDE so

00:11:57.120 --> 00:11:57.130
supports conversion within the IDE so
 

00:11:57.130 --> 00:11:59.400
supports conversion within the IDE so
you can easily convert your pngs

00:11:59.400 --> 00:11:59.410
you can easily convert your pngs
 

00:11:59.410 --> 00:12:02.760
you can easily convert your pngs
into web P format now the only thing

00:12:02.760 --> 00:12:02.770
into web P format now the only thing
 

00:12:02.770 --> 00:12:05.640
into web P format now the only thing
that you need to be careful about is the

00:12:05.640 --> 00:12:05.650
that you need to be careful about is the
 

00:12:05.650 --> 00:12:08.700
that you need to be careful about is the
OS requirement if you're using opaque

00:12:08.700 --> 00:12:08.710
OS requirement if you're using opaque
 

00:12:08.710 --> 00:12:12.360
OS requirement if you're using opaque
web Pease API level 15 and above will

00:12:12.360 --> 00:12:12.370
web Pease API level 15 and above will
 

00:12:12.370 --> 00:12:14.580
web Pease API level 15 and above will
support them but if you have alpha

00:12:14.580 --> 00:12:14.590
support them but if you have alpha
 

00:12:14.590 --> 00:12:16.890
support them but if you have alpha
channels and support transparencies in

00:12:16.890 --> 00:12:16.900
channels and support transparencies in
 

00:12:16.900 --> 00:12:19.890
channels and support transparencies in
your web P then you need API level 18 or

00:12:19.890 --> 00:12:19.900
your web P then you need API level 18 or
 

00:12:19.900 --> 00:12:21.870
your web P then you need API level 18 or
above so that is something to be mindful

00:12:21.870 --> 00:12:21.880
above so that is something to be mindful
 

00:12:21.880 --> 00:12:27.660
above so that is something to be mindful
of so these are the numbers that I got

00:12:27.660 --> 00:12:27.670
of so these are the numbers that I got
 

00:12:27.670 --> 00:12:31.230
of so these are the numbers that I got
after disabling PNG crunching so you can

00:12:31.230 --> 00:12:31.240
after disabling PNG crunching so you can
 

00:12:31.240 --> 00:12:33.510
after disabling PNG crunching so you can
see we shaved off nine seconds off the

00:12:33.510 --> 00:12:33.520
see we shaved off nine seconds off the
 

00:12:33.520 --> 00:12:34.890
see we shaved off nine seconds off the
full build here which is pretty

00:12:34.890 --> 00:12:34.900
full build here which is pretty
 

00:12:34.900 --> 00:12:37.200
full build here which is pretty
substantial but that's also because the

00:12:37.200 --> 00:12:37.210
substantial but that's also because the
 

00:12:37.210 --> 00:12:40.200
substantial but that's also because the
santur tracker has a ton of PNG in them

00:12:40.200 --> 00:12:40.210
santur tracker has a ton of PNG in them
 

00:12:40.210 --> 00:12:42.060
santur tracker has a ton of PNG in them
so previously we were spending a lot of

00:12:42.060 --> 00:12:42.070
so previously we were spending a lot of
 

00:12:42.070 --> 00:12:44.310
so previously we were spending a lot of
time doing that and for the other ones

00:12:44.310 --> 00:12:44.320
time doing that and for the other ones
 

00:12:44.320 --> 00:12:46.800
time doing that and for the other ones
they didn't really change that much now

00:12:46.800 --> 00:12:46.810
they didn't really change that much now
 

00:12:46.810 --> 00:12:49.680
they didn't really change that much now
here's the kicker when I looked at the

00:12:49.680 --> 00:12:49.690
here's the kicker when I looked at the
 

00:12:49.690 --> 00:12:52.230
here's the kicker when I looked at the
apk size with crunching and without

00:12:52.230 --> 00:12:52.240
apk size with crunching and without
 

00:12:52.240 --> 00:12:54.540
apk size with crunching and without
crunching turns out there was no

00:12:54.540 --> 00:12:54.550
crunching turns out there was no
 

00:12:54.550 --> 00:12:55.200
crunching turns out there was no
difference

00:12:55.200 --> 00:12:55.210
difference
 

00:12:55.210 --> 00:12:57.270
difference
turns out Santa tracker was already

00:12:57.270 --> 00:12:57.280
turns out Santa tracker was already
 

00:12:57.280 --> 00:13:00.030
turns out Santa tracker was already
using pretty optimal pngs to begin with

00:13:00.030 --> 00:13:00.040
using pretty optimal pngs to begin with
 

00:13:00.040 --> 00:13:02.490
using pretty optimal pngs to begin with
and it was just doing PNG crunching for

00:13:02.490 --> 00:13:02.500
and it was just doing PNG crunching for
 

00:13:02.500 --> 00:13:09.270
and it was just doing PNG crunching for
no reason okay tip six is to use instant

00:13:09.270 --> 00:13:09.280
no reason okay tip six is to use instant
 

00:13:09.280 --> 00:13:12.480
no reason okay tip six is to use instant
run so instant run was launched in in

00:13:12.480 --> 00:13:12.490
run so instant run was launched in in
 

00:13:12.490 --> 00:13:14.650
run so instant run was launched in in
Android studio 2.0

00:13:14.650 --> 00:13:14.660
Android studio 2.0
 

00:13:14.660 --> 00:13:16.720
Android studio 2.0
since then we have spent a lot of time

00:13:16.720 --> 00:13:16.730
since then we have spent a lot of time
 

00:13:16.730 --> 00:13:20.470
since then we have spent a lot of time
improving its reliability the diversion

00:13:20.470 --> 00:13:20.480
improving its reliability the diversion
 

00:13:20.480 --> 00:13:22.390
improving its reliability the diversion
of instant run that we are launching

00:13:22.390 --> 00:13:22.400
of instant run that we are launching
 

00:13:22.400 --> 00:13:25.210
of instant run that we are launching
with 3.0 is massively different than 2.0

00:13:25.210 --> 00:13:25.220
with 3.0 is massively different than 2.0
 

00:13:25.220 --> 00:13:27.940
with 3.0 is massively different than 2.0
we have removed a lot of hacks that we

00:13:27.940 --> 00:13:27.950
we have removed a lot of hacks that we
 

00:13:27.950 --> 00:13:30.430
we have removed a lot of hacks that we
made to work around platform limitations

00:13:30.430 --> 00:13:30.440
made to work around platform limitations
 

00:13:30.440 --> 00:13:32.710
made to work around platform limitations
to make things more reliable the

00:13:32.710 --> 00:13:32.720
to make things more reliable the
 

00:13:32.720 --> 00:13:34.930
to make things more reliable the
trade-off is instant run will now only

00:13:34.930 --> 00:13:34.940
trade-off is instant run will now only
 

00:13:34.940 --> 00:13:37.990
trade-off is instant run will now only
work on API level 21 or above now that

00:13:37.990 --> 00:13:38.000
work on API level 21 or above now that
 

00:13:38.000 --> 00:13:40.410
work on API level 21 or above now that
does not mean you can't have your app

00:13:40.410 --> 00:13:40.420
does not mean you can't have your app
 

00:13:40.420 --> 00:13:43.570
does not mean you can't have your app
min SDK version set to lower it just

00:13:43.570 --> 00:13:43.580
min SDK version set to lower it just
 

00:13:43.580 --> 00:13:45.070
min SDK version set to lower it just
means the device that you're running

00:13:45.070 --> 00:13:45.080
means the device that you're running
 

00:13:45.080 --> 00:13:48.150
means the device that you're running
instant app on need to be 21 or above

00:13:48.150 --> 00:13:48.160
instant app on need to be 21 or above
 

00:13:48.160 --> 00:13:51.220
instant app on need to be 21 or above
we've also tweaked the UI so instead of

00:13:51.220 --> 00:13:51.230
we've also tweaked the UI so instead of
 

00:13:51.230 --> 00:13:54.190
we've also tweaked the UI so instead of
having a single instant run button the

00:13:54.190 --> 00:13:54.200
having a single instant run button the
 

00:13:54.200 --> 00:13:56.920
having a single instant run button the
button is now separated into a run and

00:13:56.920 --> 00:13:56.930
button is now separated into a run and
 

00:13:56.930 --> 00:13:59.470
button is now separated into a run and
an apply changes button when you hit the

00:13:59.470 --> 00:13:59.480
an apply changes button when you hit the
 

00:13:59.480 --> 00:14:02.020
an apply changes button when you hit the
Run button we will try to do a cold swap

00:14:02.020 --> 00:14:02.030
Run button we will try to do a cold swap
 

00:14:02.030 --> 00:14:05.530
Run button we will try to do a cold swap
and the activity app excuse me will

00:14:05.530 --> 00:14:05.540
and the activity app excuse me will
 

00:14:05.540 --> 00:14:07.870
and the activity app excuse me will
always restart when you click the apply

00:14:07.870 --> 00:14:07.880
always restart when you click the apply
 

00:14:07.880 --> 00:14:10.390
always restart when you click the apply
changes we will try to do a hot or warm

00:14:10.390 --> 00:14:10.400
changes we will try to do a hot or warm
 

00:14:10.400 --> 00:14:12.940
changes we will try to do a hot or warm
swap first and that would push changes

00:14:12.940 --> 00:14:12.950
swap first and that would push changes
 

00:14:12.950 --> 00:14:18.010
swap first and that would push changes
directly into the live process now one

00:14:18.010 --> 00:14:18.020
directly into the live process now one
 

00:14:18.020 --> 00:14:20.680
directly into the live process now one
thing to note though is that when you

00:14:20.680 --> 00:14:20.690
thing to note though is that when you
 

00:14:20.690 --> 00:14:23.590
thing to note though is that when you
use instant run it makes your lives a

00:14:23.590 --> 00:14:23.600
use instant run it makes your lives a
 

00:14:23.600 --> 00:14:25.330
use instant run it makes your lives a
little bit easier because we again

00:14:25.330 --> 00:14:25.340
little bit easier because we again
 

00:14:25.340 --> 00:14:27.580
little bit easier because we again
automatically look at the target device

00:14:27.580 --> 00:14:27.590
automatically look at the target device
 

00:14:27.590 --> 00:14:30.130
automatically look at the target device
look at its API level and look at the

00:14:30.130 --> 00:14:30.140
look at its API level and look at the
 

00:14:30.140 --> 00:14:31.800
look at its API level and look at the
set of resources it needs and

00:14:31.800 --> 00:14:31.810
set of resources it needs and
 

00:14:31.810 --> 00:14:33.940
set of resources it needs and
automatically build the minimal thing

00:14:33.940 --> 00:14:33.950
automatically build the minimal thing
 

00:14:33.950 --> 00:14:37.060
automatically build the minimal thing
that the target device requires so even

00:14:37.060 --> 00:14:37.070
that the target device requires so even
 

00:14:37.070 --> 00:14:39.010
that the target device requires so even
if you didn't define a separate product

00:14:39.010 --> 00:14:39.020
if you didn't define a separate product
 

00:14:39.020 --> 00:14:41.740
if you didn't define a separate product
flavor you would automatically get some

00:14:41.740 --> 00:14:41.750
flavor you would automatically get some
 

00:14:41.750 --> 00:14:47.110
flavor you would automatically get some
of the optimizations now and this is the

00:14:47.110 --> 00:14:47.120
of the optimizations now and this is the
 

00:14:47.120 --> 00:14:48.550
of the optimizations now and this is the
now these are the numbers that I got

00:14:48.550 --> 00:14:48.560
now these are the numbers that I got
 

00:14:48.560 --> 00:14:51.370
now these are the numbers that I got
after notice there is we actually

00:14:51.370 --> 00:14:51.380
after notice there is we actually
 

00:14:51.380 --> 00:14:53.890
after notice there is we actually
regressed by seven seconds for the full

00:14:53.890 --> 00:14:53.900
regressed by seven seconds for the full
 

00:14:53.900 --> 00:14:56.200
regressed by seven seconds for the full
build the reason for that is that in

00:14:56.200 --> 00:14:56.210
build the reason for that is that in
 

00:14:56.210 --> 00:14:58.870
build the reason for that is that in
order for instant run to work we have to

00:14:58.870 --> 00:14:58.880
order for instant run to work we have to
 

00:14:58.880 --> 00:15:01.270
order for instant run to work we have to
do extra work to short the AP case and

00:15:01.270 --> 00:15:01.280
do extra work to short the AP case and
 

00:15:01.280 --> 00:15:04.270
do extra work to short the AP case and
to do bytecode manipulation to prepare

00:15:04.270 --> 00:15:04.280
to do bytecode manipulation to prepare
 

00:15:04.280 --> 00:15:07.180
to do bytecode manipulation to prepare
your app for future hot warm and cold

00:15:07.180 --> 00:15:07.190
your app for future hot warm and cold
 

00:15:07.190 --> 00:15:09.730
your app for future hot warm and cold
swaps so that's where the seven seconds

00:15:09.730 --> 00:15:09.740
swaps so that's where the seven seconds
 

00:15:09.740 --> 00:15:12.910
swaps so that's where the seven seconds
it came from we're working to drive that

00:15:12.910 --> 00:15:12.920
it came from we're working to drive that
 

00:15:12.920 --> 00:15:13.780
it came from we're working to drive that
number down

00:15:13.780 --> 00:15:13.790
number down
 

00:15:13.790 --> 00:15:16.600
number down
now hopefully you you'll see that for

00:15:16.600 --> 00:15:16.610
now hopefully you you'll see that for
 

00:15:16.610 --> 00:15:18.520
now hopefully you you'll see that for
the incremental changes we shaved off

00:15:18.520 --> 00:15:18.530
the incremental changes we shaved off
 

00:15:18.530 --> 00:15:20.730
the incremental changes we shaved off
three seconds for each of those cases

00:15:20.730 --> 00:15:20.740
three seconds for each of those cases
 

00:15:20.740 --> 00:15:23.590
three seconds for each of those cases
hopefully after you do a few of the

00:15:23.590 --> 00:15:23.600
hopefully after you do a few of the
 

00:15:23.600 --> 00:15:25.960
hopefully after you do a few of the
incremental changes you would recoup the

00:15:25.960 --> 00:15:25.970
incremental changes you would recoup the
 

00:15:25.970 --> 00:15:30.810
incremental changes you would recoup the
initial bill slow down

00:15:30.810 --> 00:15:30.820
 

00:15:30.820 --> 00:15:35.710
now tip 7 is a fun one it's to avoid

00:15:35.710 --> 00:15:35.720
now tip 7 is a fun one it's to avoid
 

00:15:35.720 --> 00:15:38.230
now tip 7 is a fun one it's to avoid
that you should avoid inadvertent

00:15:38.230 --> 00:15:38.240
that you should avoid inadvertent
 

00:15:38.240 --> 00:15:41.680
that you should avoid inadvertent
changes to your project now and the code

00:15:41.680 --> 00:15:41.690
changes to your project now and the code
 

00:15:41.690 --> 00:15:44.110
changes to your project now and the code
shown here is an example of such at

00:15:44.110 --> 00:15:44.120
shown here is an example of such at
 

00:15:44.120 --> 00:15:47.050
shown here is an example of such at
first glance it seems pretty reasonable

00:15:47.050 --> 00:15:47.060
first glance it seems pretty reasonable
 

00:15:47.060 --> 00:15:49.750
first glance it seems pretty reasonable
the code here is basically just using

00:15:49.750 --> 00:15:49.760
the code here is basically just using
 

00:15:49.760 --> 00:15:51.760
the code here is basically just using
the current date time as the version

00:15:51.760 --> 00:15:51.770
the current date time as the version
 

00:15:51.770 --> 00:15:53.860
the current date time as the version
code for your app which is a reasonable

00:15:53.860 --> 00:15:53.870
code for your app which is a reasonable
 

00:15:53.870 --> 00:15:56.220
code for your app which is a reasonable
thing to do because every time you build

00:15:56.220 --> 00:15:56.230
thing to do because every time you build
 

00:15:56.230 --> 00:15:59.470
thing to do because every time you build
you want to have a unique ID so that

00:15:59.470 --> 00:15:59.480
you want to have a unique ID so that
 

00:15:59.480 --> 00:16:01.660
you want to have a unique ID so that
when your QA team logs a bug they can

00:16:01.660 --> 00:16:01.670
when your QA team logs a bug they can
 

00:16:01.670 --> 00:16:04.510
when your QA team logs a bug they can
tell you which build it was now the

00:16:04.510 --> 00:16:04.520
tell you which build it was now the
 

00:16:04.520 --> 00:16:06.970
tell you which build it was now the
reason why this is bad is because this

00:16:06.970 --> 00:16:06.980
reason why this is bad is because this
 

00:16:06.980 --> 00:16:08.800
reason why this is bad is because this
would force your Android manifest to

00:16:08.800 --> 00:16:08.810
would force your Android manifest to
 

00:16:08.810 --> 00:16:11.950
would force your Android manifest to
change at every build even the ones that

00:16:11.950 --> 00:16:11.960
change at every build even the ones that
 

00:16:11.960 --> 00:16:21.050
change at every build even the ones that
you're not distributing to anybody

00:16:21.050 --> 00:16:21.060
 

00:16:21.060 --> 00:16:23.030
now Santa Tracker didn't have this

00:16:23.030 --> 00:16:23.040
now Santa Tracker didn't have this
 

00:16:23.040 --> 00:16:25.700
now Santa Tracker didn't have this
problem but I simulated this by forcing

00:16:25.700 --> 00:16:25.710
problem but I simulated this by forcing
 

00:16:25.710 --> 00:16:28.370
problem but I simulated this by forcing
a manifest change every time and this

00:16:28.370 --> 00:16:28.380
a manifest change every time and this
 

00:16:28.380 --> 00:16:31.040
a manifest change every time and this
was the result so as you can see if I

00:16:31.040 --> 00:16:31.050
was the result so as you can see if I
 

00:16:31.050 --> 00:16:33.530
was the result so as you can see if I
had that code in my project I would have

00:16:33.530 --> 00:16:33.540
had that code in my project I would have
 

00:16:33.540 --> 00:16:36.980
had that code in my project I would have
added three seconds to my incremental

00:16:36.980 --> 00:16:36.990
added three seconds to my incremental
 

00:16:36.990 --> 00:16:39.740
added three seconds to my incremental
Java build every time and 3.6 seconds

00:16:39.740 --> 00:16:39.750
Java build every time and 3.6 seconds
 

00:16:39.750 --> 00:16:41.510
Java build every time and 3.6 seconds
through my incremental resource change

00:16:41.510 --> 00:16:41.520
through my incremental resource change
 

00:16:41.520 --> 00:16:43.370
through my incremental resource change
every time that's huge

00:16:43.370 --> 00:16:43.380
every time that's huge
 

00:16:43.380 --> 00:16:48.700
every time that's huge
and that's time spent for no good reason

00:16:48.700 --> 00:16:48.710
 

00:16:48.710 --> 00:16:51.710
now in the previous example you can

00:16:51.710 --> 00:16:51.720
now in the previous example you can
 

00:16:51.720 --> 00:16:54.830
now in the previous example you can
easily fix this by putting by again

00:16:54.830 --> 00:16:54.840
easily fix this by putting by again
 

00:16:54.840 --> 00:16:57.830
easily fix this by putting by again
conditioning the setting of the unique

00:16:57.830 --> 00:16:57.840
conditioning the setting of the unique
 

00:16:57.840 --> 00:17:00.500
conditioning the setting of the unique
version code based on the property the

00:17:00.500 --> 00:17:00.510
version code based on the property the
 

00:17:00.510 --> 00:17:02.150
version code based on the property the
deck build properties that we were using

00:17:02.150 --> 00:17:02.160
deck build properties that we were using
 

00:17:02.160 --> 00:17:04.790
deck build properties that we were using
earlier so in this case if that property

00:17:04.790 --> 00:17:04.800
earlier so in this case if that property
 

00:17:04.800 --> 00:17:08.210
earlier so in this case if that property
is defined then we set it to a static

00:17:08.210 --> 00:17:08.220
is defined then we set it to a static
 

00:17:08.220 --> 00:17:10.220
is defined then we set it to a static
value if not we will generate a unique

00:17:10.220 --> 00:17:10.230
value if not we will generate a unique
 

00:17:10.230 --> 00:17:18.920
value if not we will generate a unique
value now having bad code in your build

00:17:18.920 --> 00:17:18.930
value now having bad code in your build
 

00:17:18.930 --> 00:17:20.870
value now having bad code in your build
script is not the only way to get into

00:17:20.870 --> 00:17:20.880
script is not the only way to get into
 

00:17:20.880 --> 00:17:23.780
script is not the only way to get into
trouble I know a lot of you use crash'

00:17:23.780 --> 00:17:23.790
trouble I know a lot of you use crash'
 

00:17:23.790 --> 00:17:26.840
trouble I know a lot of you use crash'
lytx and it's a great product so it must

00:17:26.840 --> 00:17:26.850
lytx and it's a great product so it must
 

00:17:26.850 --> 00:17:31.160
lytx and it's a great product so it must
be safe right well that depends

00:17:31.160 --> 00:17:31.170
be safe right well that depends
 

00:17:31.170 --> 00:17:34.550
be safe right well that depends
turns out crash olynyk's by default will

00:17:34.550 --> 00:17:34.560
turns out crash olynyk's by default will
 

00:17:34.560 --> 00:17:36.980
turns out crash olynyk's by default will
always generate a unique build ID on

00:17:36.980 --> 00:17:36.990
always generate a unique build ID on
 

00:17:36.990 --> 00:17:40.190
always generate a unique build ID on
every build but they provide a flag for

00:17:40.190 --> 00:17:40.200
every build but they provide a flag for
 

00:17:40.200 --> 00:17:42.590
every build but they provide a flag for
you to turn this off so you need to be

00:17:42.590 --> 00:17:42.600
you to turn this off so you need to be
 

00:17:42.600 --> 00:17:44.300
you to turn this off so you need to be
careful about setting this flag you

00:17:44.300 --> 00:17:44.310
careful about setting this flag you
 

00:17:44.310 --> 00:17:46.010
careful about setting this flag you
should set this flag in your debug build

00:17:46.010 --> 00:17:46.020
should set this flag in your debug build
 

00:17:46.020 --> 00:17:48.470
should set this flag in your debug build
or development build always update build

00:17:48.470 --> 00:17:48.480
or development build always update build
 

00:17:48.480 --> 00:17:51.020
or development build always update build
ID to false they also supply a different

00:17:51.020 --> 00:17:51.030
ID to false they also supply a different
 

00:17:51.030 --> 00:17:53.930
ID to false they also supply a different
flag to disable crashlytics altogether

00:17:53.930 --> 00:17:53.940
flag to disable crashlytics altogether
 

00:17:53.940 --> 00:17:55.730
flag to disable crashlytics altogether
and you can consider using that as well

00:17:55.730 --> 00:17:55.740
and you can consider using that as well
 

00:17:55.740 --> 00:18:02.030
and you can consider using that as well
now tip a is that you should not use

00:18:02.030 --> 00:18:02.040
now tip a is that you should not use
 

00:18:02.040 --> 00:18:05.240
now tip a is that you should not use
dynamic versions Gradle provides a very

00:18:05.240 --> 00:18:05.250
dynamic versions Gradle provides a very
 

00:18:05.250 --> 00:18:08.480
dynamic versions Gradle provides a very
convenient way for you to not tell grado

00:18:08.480 --> 00:18:08.490
convenient way for you to not tell grado
 

00:18:08.490 --> 00:18:10.670
convenient way for you to not tell grado
that hey I want to use the latest

00:18:10.670 --> 00:18:10.680
that hey I want to use the latest
 

00:18:10.680 --> 00:18:12.590
that hey I want to use the latest
version of this library through this

00:18:12.590 --> 00:18:12.600
version of this library through this
 

00:18:12.600 --> 00:18:15.950
version of this library through this
plus symbol here now it's bad for a

00:18:15.950 --> 00:18:15.960
plus symbol here now it's bad for a
 

00:18:15.960 --> 00:18:17.810
plus symbol here now it's bad for a
couple of reasons from a performance

00:18:17.810 --> 00:18:17.820
couple of reasons from a performance
 

00:18:17.820 --> 00:18:20.600
couple of reasons from a performance
perspective that will make Gradle check

00:18:20.600 --> 00:18:20.610
perspective that will make Gradle check
 

00:18:20.610 --> 00:18:22.430
perspective that will make Gradle check
for new versions of that library every

00:18:22.430 --> 00:18:22.440
for new versions of that library every
 

00:18:22.440 --> 00:18:25.280
for new versions of that library every
24 hours causing your dependency

00:18:25.280 --> 00:18:25.290
24 hours causing your dependency
 

00:18:25.290 --> 00:18:29.510
24 hours causing your dependency
resolution time to increase now even if

00:18:29.510 --> 00:18:29.520
resolution time to increase now even if
 

00:18:29.520 --> 00:18:32.590
resolution time to increase now even if
you are ok with that

00:18:32.590 --> 00:18:32.600
you are ok with that
 

00:18:32.600 --> 00:18:34.690
you are ok with that
it's still bad because it makes your

00:18:34.690 --> 00:18:34.700
it's still bad because it makes your
 

00:18:34.700 --> 00:18:38.110
it's still bad because it makes your
build non-deterministic you bill do a

00:18:38.110 --> 00:18:38.120
build non-deterministic you bill do a
 

00:18:38.120 --> 00:18:40.299
build non-deterministic you bill do a
bill today compared to a bill two weeks

00:18:40.299 --> 00:18:40.309
bill today compared to a bill two weeks
 

00:18:40.309 --> 00:18:41.950
bill today compared to a bill two weeks
from now you might be building

00:18:41.950 --> 00:18:41.960
from now you might be building
 

00:18:41.960 --> 00:18:43.749
from now you might be building
completely different things because the

00:18:43.749 --> 00:18:43.759
completely different things because the
 

00:18:43.759 --> 00:18:45.820
completely different things because the
libraries have changed underneath of you

00:18:45.820 --> 00:18:45.830
libraries have changed underneath of you
 

00:18:45.830 --> 00:18:53.310
libraries have changed underneath of you
so please avoid doing this love tip 9 is

00:18:53.310 --> 00:18:53.320
so please avoid doing this love tip 9 is
 

00:18:53.320 --> 00:18:55.690
so please avoid doing this love tip 9 is
that you should be careful about the

00:18:55.690 --> 00:18:55.700
that you should be careful about the
 

00:18:55.700 --> 00:18:58.600
that you should be careful about the
amount of memory you're giving to Gradle

00:18:58.600 --> 00:18:58.610
amount of memory you're giving to Gradle
 

00:18:58.610 --> 00:19:00.639
amount of memory you're giving to Gradle
in Android studio when you create a

00:19:00.639 --> 00:19:00.649
in Android studio when you create a
 

00:19:00.649 --> 00:19:03.220
in Android studio when you create a
brand new project by default we will

00:19:03.220 --> 00:19:03.230
brand new project by default we will
 

00:19:03.230 --> 00:19:06.869
brand new project by default we will
give Gradle 1.5 gigabytes of memory that

00:19:06.869 --> 00:19:06.879
give Gradle 1.5 gigabytes of memory that
 

00:19:06.879 --> 00:19:09.490
give Gradle 1.5 gigabytes of memory that
might be a good setting for your project

00:19:09.490 --> 00:19:09.500
might be a good setting for your project
 

00:19:09.500 --> 00:19:10.990
might be a good setting for your project
or it might be a bad setting for your

00:19:10.990 --> 00:19:11.000
or it might be a bad setting for your
 

00:19:11.000 --> 00:19:13.060
or it might be a bad setting for your
project we don't really know because it

00:19:13.060 --> 00:19:13.070
project we don't really know because it
 

00:19:13.070 --> 00:19:15.820
project we don't really know because it
really depends on the characteristics of

00:19:15.820 --> 00:19:15.830
really depends on the characteristics of
 

00:19:15.830 --> 00:19:17.649
really depends on the characteristics of
your project so usually tweak this

00:19:17.649 --> 00:19:17.659
your project so usually tweak this
 

00:19:17.659 --> 00:19:21.519
your project so usually tweak this
setting to see what's optimal now

00:19:21.519 --> 00:19:21.529
setting to see what's optimal now
 

00:19:21.529 --> 00:19:23.560
setting to see what's optimal now
another thing I want to call out is that

00:19:23.560 --> 00:19:23.570
another thing I want to call out is that
 

00:19:23.570 --> 00:19:26.560
another thing I want to call out is that
in our DSL we have this text options

00:19:26.560 --> 00:19:26.570
in our DSL we have this text options
 

00:19:26.570 --> 00:19:29.619
in our DSL we have this text options
where we allow you to set the Java max

00:19:29.619 --> 00:19:29.629
where we allow you to set the Java max
 

00:19:29.629 --> 00:19:32.649
where we allow you to set the Java max
heap size for the Dex process this made

00:19:32.649 --> 00:19:32.659
heap size for the Dex process this made
 

00:19:32.659 --> 00:19:35.019
heap size for the Dex process this made
a lot of sense when Dex was out of

00:19:35.019 --> 00:19:35.029
a lot of sense when Dex was out of
 

00:19:35.029 --> 00:19:39.820
a lot of sense when Dex was out of
process but since the plug-in 2.1 Dex is

00:19:39.820 --> 00:19:39.830
process but since the plug-in 2.1 Dex is
 

00:19:39.830 --> 00:19:42.190
process but since the plug-in 2.1 Dex is
now in process by default so you should

00:19:42.190 --> 00:19:42.200
now in process by default so you should
 

00:19:42.200 --> 00:19:44.799
now in process by default so you should
not really set this flag anymore so if

00:19:44.799 --> 00:19:44.809
not really set this flag anymore so if
 

00:19:44.809 --> 00:19:51.070
not really set this flag anymore so if
you have it you can just delete it now

00:19:51.070 --> 00:19:51.080
you have it you can just delete it now
 

00:19:51.080 --> 00:19:53.470
you have it you can just delete it now
the last tip here is that you should

00:19:53.470 --> 00:19:53.480
the last tip here is that you should
 

00:19:53.480 --> 00:19:57.669
the last tip here is that you should
enable the new Gradle cache now if you

00:19:57.669 --> 00:19:57.679
enable the new Gradle cache now if you
 

00:19:57.679 --> 00:20:00.610
enable the new Gradle cache now if you
were at what's new for a dev tools talk

00:20:00.610 --> 00:20:00.620
were at what's new for a dev tools talk
 

00:20:00.620 --> 00:20:02.619
were at what's new for a dev tools talk
this morning you might have heard Xavier

00:20:02.619 --> 00:20:02.629
this morning you might have heard Xavier
 

00:20:02.629 --> 00:20:05.740
this morning you might have heard Xavier
talk about this this is a new caching

00:20:05.740 --> 00:20:05.750
talk about this this is a new caching
 

00:20:05.750 --> 00:20:08.049
talk about this this is a new caching
mechanism from Gradle where you can

00:20:08.049 --> 00:20:08.059
mechanism from Gradle where you can
 

00:20:08.059 --> 00:20:10.930
mechanism from Gradle where you can
cache all the task outputs from every

00:20:10.930 --> 00:20:10.940
cache all the task outputs from every
 

00:20:10.940 --> 00:20:14.980
cache all the task outputs from every
task now this is different from the tube

00:20:14.980 --> 00:20:14.990
task now this is different from the tube
 

00:20:14.990 --> 00:20:17.200
task now this is different from the tube
from the build cache that we introduced

00:20:17.200 --> 00:20:17.210
from the build cache that we introduced
 

00:20:17.210 --> 00:20:20.230
from the build cache that we introduced
in Android studio 2.3 which only cached

00:20:20.230 --> 00:20:20.240
in Android studio 2.3 which only cached
 

00:20:20.240 --> 00:20:24.310
in Android studio 2.3 which only cached
pre Dex external libraries now this

00:20:24.310 --> 00:20:24.320
pre Dex external libraries now this
 

00:20:24.320 --> 00:20:27.340
pre Dex external libraries now this
cache uses the same up-to-date mechanism

00:20:27.340 --> 00:20:27.350
cache uses the same up-to-date mechanism
 

00:20:27.350 --> 00:20:29.590
cache uses the same up-to-date mechanism
but it doesn't only work for the last

00:20:29.590 --> 00:20:29.600
but it doesn't only work for the last
 

00:20:29.600 --> 00:20:32.049
but it doesn't only work for the last
build but it works for any previous

00:20:32.049 --> 00:20:32.059
build but it works for any previous
 

00:20:32.059 --> 00:20:34.600
build but it works for any previous
build from any location which means it

00:20:34.600 --> 00:20:34.610
build from any location which means it
 

00:20:34.610 --> 00:20:36.669
build from any location which means it
would really speed up your build when

00:20:36.669 --> 00:20:36.679
would really speed up your build when
 

00:20:36.679 --> 00:20:38.919
would really speed up your build when
you switch branches and it will enable

00:20:38.919 --> 00:20:38.929
you switch branches and it will enable
 

00:20:38.929 --> 00:20:42.340
you switch branches and it will enable
distributed caching now we haven't

00:20:42.340 --> 00:20:42.350
distributed caching now we haven't
 

00:20:42.350 --> 00:20:44.080
distributed caching now we haven't
because this is so new we haven't fully

00:20:44.080 --> 00:20:44.090
because this is so new we haven't fully
 

00:20:44.090 --> 00:20:46.320
because this is so new we haven't fully
taking advantage of it yet

00:20:46.320 --> 00:20:46.330
taking advantage of it yet
 

00:20:46.330 --> 00:20:48.360
taking advantage of it yet
in canary one but we're actively working

00:20:48.360 --> 00:20:48.370
in canary one but we're actively working
 

00:20:48.370 --> 00:20:52.530
in canary one but we're actively working
on this in 3.0 so our advice to you is

00:20:52.530 --> 00:20:52.540
on this in 3.0 so our advice to you is
 

00:20:52.540 --> 00:20:54.810
on this in 3.0 so our advice to you is
that you should set this to true now

00:20:54.810 --> 00:20:54.820
that you should set this to true now
 

00:20:54.820 --> 00:20:57.480
that you should set this to true now
turn it on and through the next several

00:20:57.480 --> 00:20:57.490
turn it on and through the next several
 

00:20:57.490 --> 00:21:00.060
turn it on and through the next several
Canaries previews and eventually stable

00:21:00.060 --> 00:21:00.070
Canaries previews and eventually stable
 

00:21:00.070 --> 00:21:02.070
Canaries previews and eventually stable
you should see progressively improved

00:21:02.070 --> 00:21:02.080
you should see progressively improved
 

00:21:02.080 --> 00:21:07.200
you should see progressively improved
performance and these are the numbers

00:21:07.200 --> 00:21:07.210
performance and these are the numbers
 

00:21:07.210 --> 00:21:09.210
performance and these are the numbers
that I got after turning on the build

00:21:09.210 --> 00:21:09.220
that I got after turning on the build
 

00:21:09.220 --> 00:21:12.240
that I got after turning on the build
cache even though we haven't fully taken

00:21:12.240 --> 00:21:12.250
cache even though we haven't fully taken
 

00:21:12.250 --> 00:21:15.180
cache even though we haven't fully taken
advantage of it yet so you can see the

00:21:15.180 --> 00:21:15.190
advantage of it yet so you can see the
 

00:21:15.190 --> 00:21:19.440
advantage of it yet so you can see the
full build actually drop down by seven

00:21:19.440 --> 00:21:19.450
full build actually drop down by seven
 

00:21:19.450 --> 00:21:22.380
full build actually drop down by seven
seconds and it negated their regressions

00:21:22.380 --> 00:21:22.390
seconds and it negated their regressions
 

00:21:22.390 --> 00:21:24.390
seconds and it negated their regressions
that was introduced by instant run and

00:21:24.390 --> 00:21:24.400
that was introduced by instant run and
 

00:21:24.400 --> 00:21:26.730
that was introduced by instant run and
the incremental build actually got

00:21:26.730 --> 00:21:26.740
the incremental build actually got
 

00:21:26.740 --> 00:21:28.620
the incremental build actually got
slightly slower that's something that

00:21:28.620 --> 00:21:28.630
slightly slower that's something that
 

00:21:28.630 --> 00:21:34.350
slightly slower that's something that
we're looking into so here are the

00:21:34.350 --> 00:21:34.360
we're looking into so here are the
 

00:21:34.360 --> 00:21:36.480
we're looking into so here are the
cumulative improvements after applying

00:21:36.480 --> 00:21:36.490
cumulative improvements after applying
 

00:21:36.490 --> 00:21:39.480
cumulative improvements after applying
all these tips the full build is now

00:21:39.480 --> 00:21:39.490
all these tips the full build is now
 

00:21:39.490 --> 00:21:42.150
all these tips the full build is now
three times faster the incremental Java

00:21:42.150 --> 00:21:42.160
three times faster the incremental Java
 

00:21:42.160 --> 00:21:44.910
three times faster the incremental Java
build is twelve times faster and the

00:21:44.910 --> 00:21:44.920
build is twelve times faster and the
 

00:21:44.920 --> 00:21:46.260
build is twelve times faster and the
resource change is also three times

00:21:46.260 --> 00:21:46.270
resource change is also three times
 

00:21:46.270 --> 00:21:52.760
resource change is also three times
faster

00:21:52.760 --> 00:21:52.770
 

00:21:52.770 --> 00:22:00.540
thank you

00:22:00.540 --> 00:22:00.550
 

00:22:00.550 --> 00:22:04.810
now here is a summary of all the tips I

00:22:04.810 --> 00:22:04.820
now here is a summary of all the tips I
 

00:22:04.820 --> 00:22:08.050
now here is a summary of all the tips I
have also created a github repo if you

00:22:08.050 --> 00:22:08.060
have also created a github repo if you
 

00:22:08.060 --> 00:22:10.270
have also created a github repo if you
want to be able to reproduce some of

00:22:10.270 --> 00:22:10.280
want to be able to reproduce some of
 

00:22:10.280 --> 00:22:12.250
want to be able to reproduce some of
these results and experiment with some

00:22:12.250 --> 00:22:12.260
these results and experiment with some
 

00:22:12.260 --> 00:22:15.340
these results and experiment with some
of these tips yourself and that's it for

00:22:15.340 --> 00:22:15.350
of these tips yourself and that's it for
 

00:22:15.350 --> 00:22:23.220
of these tips yourself and that's it for
me thank you James

00:22:23.220 --> 00:22:23.230
 

00:22:23.230 --> 00:22:26.040
all right so up to now you've seen

00:22:26.040 --> 00:22:26.050
all right so up to now you've seen
 

00:22:26.050 --> 00:22:29.220
all right so up to now you've seen
number of tricks and tips to help with

00:22:29.220 --> 00:22:29.230
number of tricks and tips to help with
 

00:22:29.230 --> 00:22:30.780
number of tricks and tips to help with
the government now I would like to talk

00:22:30.780 --> 00:22:30.790
the government now I would like to talk
 

00:22:30.790 --> 00:22:32.460
the government now I would like to talk
a little bit more about the more radical

00:22:32.460 --> 00:22:32.470
a little bit more about the more radical
 

00:22:32.470 --> 00:22:35.760
a little bit more about the more radical
changes you can do with your build to

00:22:35.760 --> 00:22:35.770
changes you can do with your build to
 

00:22:35.770 --> 00:22:37.260
changes you can do with your build to
leverage some of the new feature that

00:22:37.260 --> 00:22:37.270
leverage some of the new feature that
 

00:22:37.270 --> 00:22:40.320
leverage some of the new feature that
comes with god--all plug-in 3.0 and in

00:22:40.320 --> 00:22:40.330
comes with god--all plug-in 3.0 and in
 

00:22:40.330 --> 00:22:42.360
comes with god--all plug-in 3.0 and in
particular I like to talk about the

00:22:42.360 --> 00:22:42.370
particular I like to talk about the
 

00:22:42.370 --> 00:22:45.360
particular I like to talk about the
module multi module projects so we've

00:22:45.360 --> 00:22:45.370
module multi module projects so we've
 

00:22:45.370 --> 00:22:48.000
module multi module projects so we've
had multimodal projects for a long time

00:22:48.000 --> 00:22:48.010
had multimodal projects for a long time
 

00:22:48.010 --> 00:22:49.920
had multimodal projects for a long time
that we used to discourage it because we

00:22:49.920 --> 00:22:49.930
that we used to discourage it because we
 

00:22:49.930 --> 00:22:53.280
that we used to discourage it because we
have quite honestly a lot of issues both

00:22:53.280 --> 00:22:53.290
have quite honestly a lot of issues both
 

00:22:53.290 --> 00:22:55.200
have quite honestly a lot of issues both
in girdle and in the android plug-in

00:22:55.200 --> 00:22:55.210
in girdle and in the android plug-in
 

00:22:55.210 --> 00:22:58.290
in girdle and in the android plug-in
around scalability as you had more and

00:22:58.290 --> 00:22:58.300
around scalability as you had more and
 

00:22:58.300 --> 00:23:00.540
around scalability as you had more and
more modules the thing was getting

00:23:00.540 --> 00:23:00.550
more modules the thing was getting
 

00:23:00.550 --> 00:23:03.210
more modules the thing was getting
slower and slower so we worked really

00:23:03.210 --> 00:23:03.220
slower and slower so we worked really
 

00:23:03.220 --> 00:23:07.050
slower and slower so we worked really
hard with daddle to fix this and now we

00:23:07.050 --> 00:23:07.060
hard with daddle to fix this and now we
 

00:23:07.060 --> 00:23:09.720
hard with daddle to fix this and now we
totally recommend you to go to the multi

00:23:09.720 --> 00:23:09.730
totally recommend you to go to the multi
 

00:23:09.730 --> 00:23:11.250
totally recommend you to go to the multi
module project if that makes sense for

00:23:11.250 --> 00:23:11.260
module project if that makes sense for
 

00:23:11.260 --> 00:23:14.280
module project if that makes sense for
you but what do you have to do so if you

00:23:14.280 --> 00:23:14.290
you but what do you have to do so if you
 

00:23:14.290 --> 00:23:16.140
you but what do you have to do so if you
remember or if you have created projects

00:23:16.140 --> 00:23:16.150
remember or if you have created projects
 

00:23:16.150 --> 00:23:19.140
remember or if you have created projects
with Android studio from scratch any

00:23:19.140 --> 00:23:19.150
with Android studio from scratch any
 

00:23:19.150 --> 00:23:21.450
with Android studio from scratch any
project studio created from template is

00:23:21.450 --> 00:23:21.460
project studio created from template is
 

00:23:21.460 --> 00:23:24.240
project studio created from template is
a multi-modal project to start with it

00:23:24.240 --> 00:23:24.250
a multi-modal project to start with it
 

00:23:24.250 --> 00:23:26.520
a multi-modal project to start with it
just has warm but you can add it it's

00:23:26.520 --> 00:23:26.530
just has warm but you can add it it's
 

00:23:26.530 --> 00:23:29.100
just has warm but you can add it it's
ready to be to be multi module to do

00:23:29.100 --> 00:23:29.110
ready to be to be multi module to do
 

00:23:29.110 --> 00:23:31.490
ready to be to be multi module to do
that you just need to include a few more

00:23:31.490 --> 00:23:31.500
that you just need to include a few more
 

00:23:31.500 --> 00:23:34.710
that you just need to include a few more
subfolders in your main settings the

00:23:34.710 --> 00:23:34.720
subfolders in your main settings the
 

00:23:34.720 --> 00:23:36.450
subfolders in your main settings the
girdle and then you can start moving

00:23:36.450 --> 00:23:36.460
girdle and then you can start moving
 

00:23:36.460 --> 00:23:38.910
girdle and then you can start moving
code from say the app into the liberal

00:23:38.910 --> 00:23:38.920
code from say the app into the liberal
 

00:23:38.920 --> 00:23:41.130
code from say the app into the liberal
another lip - obviously this sounds very

00:23:41.130 --> 00:23:41.140
another lip - obviously this sounds very
 

00:23:41.140 --> 00:23:44.250
another lip - obviously this sounds very
easy modularity is not easy I can

00:23:44.250 --> 00:23:44.260
easy modularity is not easy I can
 

00:23:44.260 --> 00:23:46.410
easy modularity is not easy I can
guarantee it's going to be painful if

00:23:46.410 --> 00:23:46.420
guarantee it's going to be painful if
 

00:23:46.420 --> 00:23:48.360
guarantee it's going to be painful if
you want to do this not painful but it

00:23:48.360 --> 00:23:48.370
you want to do this not painful but it
 

00:23:48.370 --> 00:23:51.480
you want to do this not painful but it
could be hard and it's not something you

00:23:51.480 --> 00:23:51.490
could be hard and it's not something you
 

00:23:51.490 --> 00:23:52.620
could be hard and it's not something you
should do over the weekend it's going to

00:23:52.620 --> 00:23:52.630
should do over the weekend it's going to
 

00:23:52.630 --> 00:23:56.640
should do over the weekend it's going to
take some time however we're going to

00:23:56.640 --> 00:23:56.650
take some time however we're going to
 

00:23:56.650 --> 00:23:57.900
take some time however we're going to
see that it has a lot of improvement

00:23:57.900 --> 00:23:57.910
see that it has a lot of improvement
 

00:23:57.910 --> 00:24:01.260
see that it has a lot of improvement
with it so here we have an example of

00:24:01.260 --> 00:24:01.270
with it so here we have an example of
 

00:24:01.270 --> 00:24:03.780
with it so here we have an example of
three modules the app which is importing

00:24:03.780 --> 00:24:03.790
three modules the app which is importing
 

00:24:03.790 --> 00:24:05.640
three modules the app which is importing
the live one which itself is importing

00:24:05.640 --> 00:24:05.650
the live one which itself is importing
 

00:24:05.650 --> 00:24:07.380
the live one which itself is importing
the lip - as you can see the straight

00:24:07.380 --> 00:24:07.390
the lip - as you can see the straight
 

00:24:07.390 --> 00:24:09.060
the lip - as you can see the straight
dependency we are using the compile for

00:24:09.060 --> 00:24:09.070
dependency we are using the compile for
 

00:24:09.070 --> 00:24:11.700
dependency we are using the compile for
figuration to define this and as you do

00:24:11.700 --> 00:24:11.710
figuration to define this and as you do
 

00:24:11.710 --> 00:24:13.920
figuration to define this and as you do
a cut change before in three zeros that

00:24:13.920 --> 00:24:13.930
a cut change before in three zeros that
 

00:24:13.930 --> 00:24:15.920
a cut change before in three zeros that
you're doing some code change in lip -

00:24:15.920 --> 00:24:15.930
you're doing some code change in lip -
 

00:24:15.930 --> 00:24:18.330
you're doing some code change in lip -
you would start recompiling leave one

00:24:18.330 --> 00:24:18.340
you would start recompiling leave one
 

00:24:18.340 --> 00:24:20.340
you would start recompiling leave one
because say your code change may be like

00:24:20.340 --> 00:24:20.350
because say your code change may be like
 

00:24:20.350 --> 00:24:22.230
because say your code change may be like
removing a public method so of course we

00:24:22.230 --> 00:24:22.240
removing a public method so of course we
 

00:24:22.240 --> 00:24:24.350
removing a public method so of course we
need to recompile whoever is using that

00:24:24.350 --> 00:24:24.360
need to recompile whoever is using that
 

00:24:24.360 --> 00:24:26.610
need to recompile whoever is using that
particular tip - to make sure that you

00:24:26.610 --> 00:24:26.620
particular tip - to make sure that you
 

00:24:26.620 --> 00:24:28.710
particular tip - to make sure that you
are not using that method but it will

00:24:28.710 --> 00:24:28.720
are not using that method but it will
 

00:24:28.720 --> 00:24:29.280
are not using that method but it will
also

00:24:29.280 --> 00:24:29.290
also
 

00:24:29.290 --> 00:24:31.440
also
retrigger the compilation of app and

00:24:31.440 --> 00:24:31.450
retrigger the compilation of app and
 

00:24:31.450 --> 00:24:34.120
retrigger the compilation of app and
that's because the compiled dependent

00:24:34.120 --> 00:24:34.130
that's because the compiled dependent
 

00:24:34.130 --> 00:24:36.580
that's because the compiled dependent
see is transitive that means that app

00:24:36.580 --> 00:24:36.590
see is transitive that means that app
 

00:24:36.590 --> 00:24:38.890
see is transitive that means that app
which depends on live one cannot

00:24:38.890 --> 00:24:38.900
which depends on live one cannot
 

00:24:38.900 --> 00:24:41.620
which depends on live one cannot
transitively also depends on leap - just

00:24:41.620 --> 00:24:41.630
transitively also depends on leap - just
 

00:24:41.630 --> 00:24:45.340
transitively also depends on leap - just
because live one itself was importing it

00:24:45.340 --> 00:24:45.350
because live one itself was importing it
 

00:24:45.350 --> 00:24:48.340
because live one itself was importing it
- and that's some of the things that is

00:24:48.340 --> 00:24:48.350
- and that's some of the things that is
 

00:24:48.350 --> 00:24:52.900
- and that's some of the things that is
going to change in 3-0 now the first

00:24:52.900 --> 00:24:52.910
going to change in 3-0 now the first
 

00:24:52.910 --> 00:24:54.370
going to change in 3-0 now the first
thing that gadelle is giving us for free

00:24:54.370 --> 00:24:54.380
thing that gadelle is giving us for free
 

00:24:54.380 --> 00:24:57.340
thing that gadelle is giving us for free
is compilation avoidance so you don't

00:24:57.340 --> 00:24:57.350
is compilation avoidance so you don't
 

00:24:57.350 --> 00:24:58.659
is compilation avoidance so you don't
have to do anything you're going to get

00:24:58.659 --> 00:24:58.669
have to do anything you're going to get
 

00:24:58.669 --> 00:25:00.039
have to do anything you're going to get
ripped some of the benefits from it

00:25:00.039 --> 00:25:00.049
ripped some of the benefits from it
 

00:25:00.049 --> 00:25:03.250
ripped some of the benefits from it
immediately and what they do is that

00:25:03.250 --> 00:25:03.260
immediately and what they do is that
 

00:25:03.260 --> 00:25:05.020
immediately and what they do is that
they came up with the notion of an avi

00:25:05.020 --> 00:25:05.030
they came up with the notion of an avi
 

00:25:05.030 --> 00:25:07.090
they came up with the notion of an avi
when a bi is the application binary

00:25:07.090 --> 00:25:07.100
when a bi is the application binary
 

00:25:07.100 --> 00:25:09.399
when a bi is the application binary
interface in simple terms it means

00:25:09.399 --> 00:25:09.409
interface in simple terms it means
 

00:25:09.409 --> 00:25:11.409
interface in simple terms it means
basically your public methods and fields

00:25:11.409 --> 00:25:11.419
basically your public methods and fields
 

00:25:11.419 --> 00:25:13.690
basically your public methods and fields
anything that can be invoked outside of

00:25:13.690 --> 00:25:13.700
anything that can be invoked outside of
 

00:25:13.700 --> 00:25:15.850
anything that can be invoked outside of
your module so you can have an avi

00:25:15.850 --> 00:25:15.860
your module so you can have an avi
 

00:25:15.860 --> 00:25:18.279
your module so you can have an avi
change or you can have a non avi change

00:25:18.279 --> 00:25:18.289
change or you can have a non avi change
 

00:25:18.289 --> 00:25:20.020
change or you can have a non avi change
depending on whether or not you're using

00:25:20.020 --> 00:25:20.030
depending on whether or not you're using
 

00:25:20.030 --> 00:25:21.640
depending on whether or not you're using
a public key you're changing a public

00:25:21.640 --> 00:25:21.650
a public key you're changing a public
 

00:25:21.650 --> 00:25:25.510
a public key you're changing a public
API okay now a non avi change has no

00:25:25.510 --> 00:25:25.520
API okay now a non avi change has no
 

00:25:25.520 --> 00:25:27.520
API okay now a non avi change has no
impact on consumers if you're changing

00:25:27.520 --> 00:25:27.530
impact on consumers if you're changing
 

00:25:27.530 --> 00:25:29.590
impact on consumers if you're changing
the implementation of a method which is

00:25:29.590 --> 00:25:29.600
the implementation of a method which is
 

00:25:29.600 --> 00:25:33.039
the implementation of a method which is
private why should the or even if it's

00:25:33.039 --> 00:25:33.049
private why should the or even if it's
 

00:25:33.049 --> 00:25:34.029
private why should the or even if it's
public actually it is just the

00:25:34.029 --> 00:25:34.039
public actually it is just the
 

00:25:34.039 --> 00:25:35.230
public actually it is just the
implementation of a method

00:25:35.230 --> 00:25:35.240
implementation of a method
 

00:25:35.240 --> 00:25:37.090
implementation of a method
none of the consumers are going to be

00:25:37.090 --> 00:25:37.100
none of the consumers are going to be
 

00:25:37.100 --> 00:25:38.380
none of the consumers are going to be
impacted by this change of

00:25:38.380 --> 00:25:38.390
impacted by this change of
 

00:25:38.390 --> 00:25:39.820
impacted by this change of
implementation so you don't have to

00:25:39.820 --> 00:25:39.830
implementation so you don't have to
 

00:25:39.830 --> 00:25:41.950
implementation so you don't have to
recompile them however obviously if

00:25:41.950 --> 00:25:41.960
recompile them however obviously if
 

00:25:41.960 --> 00:25:43.960
recompile them however obviously if
you're removing a public method or

00:25:43.960 --> 00:25:43.970
you're removing a public method or
 

00:25:43.970 --> 00:25:46.060
you're removing a public method or
changing a public method signature this

00:25:46.060 --> 00:25:46.070
changing a public method signature this
 

00:25:46.070 --> 00:25:48.299
changing a public method signature this
is an API change this will trigger

00:25:48.299 --> 00:25:48.309
is an API change this will trigger
 

00:25:48.309 --> 00:25:50.590
is an API change this will trigger
consumer modules to be recompiled

00:25:50.590 --> 00:25:50.600
consumer modules to be recompiled
 

00:25:50.600 --> 00:25:53.740
consumer modules to be recompiled
okay so far it's pretty simple so let's

00:25:53.740 --> 00:25:53.750
okay so far it's pretty simple so let's
 

00:25:53.750 --> 00:25:55.690
okay so far it's pretty simple so let's
look how it looks I have an on a VI

00:25:55.690 --> 00:25:55.700
look how it looks I have an on a VI
 

00:25:55.700 --> 00:25:58.390
look how it looks I have an on a VI
change so something which is private -

00:25:58.390 --> 00:25:58.400
change so something which is private -
 

00:25:58.400 --> 00:25:59.500
change so something which is private -
live - is being changed

00:25:59.500 --> 00:25:59.510
live - is being changed
 

00:25:59.510 --> 00:26:02.260
live - is being changed
nothing is recompile now I have an avi

00:26:02.260 --> 00:26:02.270
nothing is recompile now I have an avi
 

00:26:02.270 --> 00:26:05.529
nothing is recompile now I have an avi
change and we are going back to the

00:26:05.529 --> 00:26:05.539
change and we are going back to the
 

00:26:05.539 --> 00:26:08.039
change and we are going back to the
original case of three three zeroes

00:26:08.039 --> 00:26:08.049
original case of three three zeroes
 

00:26:08.049 --> 00:26:09.520
original case of three three zeroes
recompilation

00:26:09.520 --> 00:26:09.530
recompilation
 

00:26:09.530 --> 00:26:11.860
recompilation
I'm changing something which is visible

00:26:11.860 --> 00:26:11.870
I'm changing something which is visible
 

00:26:11.870 --> 00:26:14.080
I'm changing something which is visible
in lip-to-lip one which is importing it

00:26:14.080 --> 00:26:14.090
in lip-to-lip one which is importing it
 

00:26:14.090 --> 00:26:16.570
in lip-to-lip one which is importing it
directly has to be recompiled an app

00:26:16.570 --> 00:26:16.580
directly has to be recompiled an app
 

00:26:16.580 --> 00:26:20.350
directly has to be recompiled an app
which is importing it transitively also

00:26:20.350 --> 00:26:20.360
which is importing it transitively also
 

00:26:20.360 --> 00:26:21.940
which is importing it transitively also
has to be recompiled

00:26:21.940 --> 00:26:21.950
has to be recompiled
 

00:26:21.950 --> 00:26:27.039
has to be recompiled
on it really very annoying because why

00:26:27.039 --> 00:26:27.049
on it really very annoying because why
 

00:26:27.049 --> 00:26:29.620
on it really very annoying because why
would you want to recompile app from

00:26:29.620 --> 00:26:29.630
would you want to recompile app from
 

00:26:29.630 --> 00:26:31.060
would you want to recompile app from
this diagram it seems pretty obvious

00:26:31.060 --> 00:26:31.070
this diagram it seems pretty obvious
 

00:26:31.070 --> 00:26:33.700
this diagram it seems pretty obvious
that app is not using this tool but the

00:26:33.700 --> 00:26:33.710
that app is not using this tool but the
 

00:26:33.710 --> 00:26:35.860
that app is not using this tool but the
fact is that because it's declared to

00:26:35.860 --> 00:26:35.870
fact is that because it's declared to
 

00:26:35.870 --> 00:26:38.710
fact is that because it's declared to
this compiled configuration gradual does

00:26:38.710 --> 00:26:38.720
this compiled configuration gradual does
 

00:26:38.720 --> 00:26:42.669
this compiled configuration gradual does
not know if app is using the ability to

00:26:42.669 --> 00:26:42.679
not know if app is using the ability to
 

00:26:42.679 --> 00:26:45.399
not know if app is using the ability to
to use the leap to interface basically

00:26:45.399 --> 00:26:45.409
to use the leap to interface basically
 

00:26:45.409 --> 00:26:46.730
to use the leap to interface basically
the compiler

00:26:46.730 --> 00:26:46.740
the compiler
 

00:26:46.740 --> 00:26:50.450
the compiler
lick the implementation detail of Labuan

00:26:50.450 --> 00:26:50.460
lick the implementation detail of Labuan
 

00:26:50.460 --> 00:26:53.720
lick the implementation detail of Labuan
which is the lip - to the consumers of

00:26:53.720 --> 00:26:53.730
which is the lip - to the consumers of
 

00:26:53.730 --> 00:26:55.850
which is the lip - to the consumers of
itself that means that now app can see

00:26:55.850 --> 00:26:55.860
itself that means that now app can see
 

00:26:55.860 --> 00:26:57.620
itself that means that now app can see
leave one and Nick - and that's really

00:26:57.620 --> 00:26:57.630
leave one and Nick - and that's really
 

00:26:57.630 --> 00:26:59.299
leave one and Nick - and that's really
really something that needed to be

00:26:59.299 --> 00:26:59.309
really something that needed to be
 

00:26:59.309 --> 00:27:03.169
really something that needed to be
changed now let's have a look at how

00:27:03.169 --> 00:27:03.179
changed now let's have a look at how
 

00:27:03.179 --> 00:27:06.440
changed now let's have a look at how
that really ripples into when you have a

00:27:06.440 --> 00:27:06.450
that really ripples into when you have a
 

00:27:06.450 --> 00:27:09.019
that really ripples into when you have a
really big hairball of modules here

00:27:09.019 --> 00:27:09.029
really big hairball of modules here
 

00:27:09.029 --> 00:27:11.120
really big hairball of modules here
we've got only nine modules that's eight

00:27:11.120 --> 00:27:11.130
we've got only nine modules that's eight
 

00:27:11.130 --> 00:27:13.340
we've got only nine modules that's eight
modules that's pretty simple but so you

00:27:13.340 --> 00:27:13.350
modules that's pretty simple but so you
 

00:27:13.350 --> 00:27:15.649
modules that's pretty simple but so you
have 50 modules and you have one lift

00:27:15.649 --> 00:27:15.659
have 50 modules and you have one lift
 

00:27:15.659 --> 00:27:17.330
have 50 modules and you have one lift
module at the very bottom and you're

00:27:17.330 --> 00:27:17.340
module at the very bottom and you're
 

00:27:17.340 --> 00:27:20.330
module at the very bottom and you're
making an on a B I shall change so that

00:27:20.330 --> 00:27:20.340
making an on a B I shall change so that
 

00:27:20.340 --> 00:27:21.950
making an on a B I shall change so that
you know has to be recompiled

00:27:21.950 --> 00:27:21.960
you know has to be recompiled
 

00:27:21.960 --> 00:27:24.200
you know has to be recompiled
that'sthat's pretty obvious right now

00:27:24.200 --> 00:27:24.210
that'sthat's pretty obvious right now
 

00:27:24.210 --> 00:27:26.779
that'sthat's pretty obvious right now
let's switch to the ABI code change

00:27:26.779 --> 00:27:26.789
let's switch to the ABI code change
 

00:27:26.789 --> 00:27:29.210
let's switch to the ABI code change
let's say that now we are changing a

00:27:29.210 --> 00:27:29.220
let's say that now we are changing a
 

00:27:29.220 --> 00:27:31.669
let's say that now we are changing a
public API of that really lift module of

00:27:31.669 --> 00:27:31.679
public API of that really lift module of
 

00:27:31.679 --> 00:27:33.080
public API of that really lift module of
course we're going to recompile it and

00:27:33.080 --> 00:27:33.090
course we're going to recompile it and
 

00:27:33.090 --> 00:27:35.600
course we're going to recompile it and
then we're going to compile all the

00:27:35.600 --> 00:27:35.610
then we're going to compile all the
 

00:27:35.610 --> 00:27:38.090
then we're going to compile all the
immediate users but because they are

00:27:38.090 --> 00:27:38.100
immediate users but because they are
 

00:27:38.100 --> 00:27:41.659
immediate users but because they are
tentatively dependent on each other by

00:27:41.659 --> 00:27:41.669
tentatively dependent on each other by
 

00:27:41.669 --> 00:27:42.590
tentatively dependent on each other by
you know when you're gone by the other

00:27:42.590 --> 00:27:42.600
you know when you're gone by the other
 

00:27:42.600 --> 00:27:44.029
you know when you're gone by the other
ones - and then eventually you can

00:27:44.029 --> 00:27:44.039
ones - and then eventually you can
 

00:27:44.039 --> 00:27:45.590
ones - and then eventually you can
really compile the app now if you've had

00:27:45.590 --> 00:27:45.600
really compile the app now if you've had
 

00:27:45.600 --> 00:27:47.779
really compile the app now if you've had
250 modules you're going to recombine

00:27:47.779 --> 00:27:47.789
250 modules you're going to recombine
 

00:27:47.789 --> 00:27:50.330
250 modules you're going to recombine
250 modules and that you know when

00:27:50.330 --> 00:27:50.340
250 modules and that you know when
 

00:27:50.340 --> 00:27:52.460
250 modules and that you know when
you've got an SDK a common type of

00:27:52.460 --> 00:27:52.470
you've got an SDK a common type of
 

00:27:52.470 --> 00:27:55.690
you've got an SDK a common type of
library this will happen quite a bit so

00:27:55.690 --> 00:27:55.700
library this will happen quite a bit so
 

00:27:55.700 --> 00:28:00.200
library this will happen quite a bit so
basically what gadelle realized is that

00:28:00.200 --> 00:28:00.210
basically what gadelle realized is that
 

00:28:00.210 --> 00:28:03.950
basically what gadelle realized is that
compile is all wrong and there is no

00:28:03.950 --> 00:28:03.960
compile is all wrong and there is no
 

00:28:03.960 --> 00:28:07.220
compile is all wrong and there is no
distinction between oh I want to use

00:28:07.220 --> 00:28:07.230
distinction between oh I want to use
 

00:28:07.230 --> 00:28:09.500
distinction between oh I want to use
this library as an implementation detail

00:28:09.500 --> 00:28:09.510
this library as an implementation detail
 

00:28:09.510 --> 00:28:12.080
this library as an implementation detail
of my library but by no means should you

00:28:12.080 --> 00:28:12.090
of my library but by no means should you
 

00:28:12.090 --> 00:28:14.330
of my library but by no means should you
be using the API of the API of this

00:28:14.330 --> 00:28:14.340
be using the API of the API of this
 

00:28:14.340 --> 00:28:16.370
be using the API of the API of this
library because you should only be using

00:28:16.370 --> 00:28:16.380
library because you should only be using
 

00:28:16.380 --> 00:28:20.299
library because you should only be using
the API of my library versus oh yeah I'm

00:28:20.299 --> 00:28:20.309
the API of my library versus oh yeah I'm
 

00:28:20.309 --> 00:28:22.310
the API of my library versus oh yeah I'm
not only about using this API but I'm

00:28:22.310 --> 00:28:22.320
not only about using this API but I'm
 

00:28:22.320 --> 00:28:24.500
not only about using this API but I'm
offering its API as part of mine as a

00:28:24.500 --> 00:28:24.510
offering its API as part of mine as a
 

00:28:24.510 --> 00:28:26.659
offering its API as part of mine as a
composition if you want so say for

00:28:26.659 --> 00:28:26.669
composition if you want so say for
 

00:28:26.669 --> 00:28:28.340
composition if you want so say for
instance you are a library and you're

00:28:28.340 --> 00:28:28.350
instance you are a library and you're
 

00:28:28.350 --> 00:28:30.710
instance you are a library and you're
using go over you want to provide your

00:28:30.710 --> 00:28:30.720
using go over you want to provide your
 

00:28:30.720 --> 00:28:32.690
using go over you want to provide your
API it doesn't really mean that you want

00:28:32.690 --> 00:28:32.700
API it doesn't really mean that you want
 

00:28:32.700 --> 00:28:34.669
API it doesn't really mean that you want
your users to use the braava API through

00:28:34.669 --> 00:28:34.679
your users to use the braava API through
 

00:28:34.679 --> 00:28:37.880
your users to use the braava API through
you because that's really nasty when you

00:28:37.880 --> 00:28:37.890
you because that's really nasty when you
 

00:28:37.890 --> 00:28:39.799
you because that's really nasty when you
think of a time right what about if you

00:28:39.799 --> 00:28:39.809
think of a time right what about if you
 

00:28:39.809 --> 00:28:41.600
think of a time right what about if you
want to remove whoever from your

00:28:41.600 --> 00:28:41.610
want to remove whoever from your
 

00:28:41.610 --> 00:28:43.070
want to remove whoever from your
implementation detail because now you're

00:28:43.070 --> 00:28:43.080
implementation detail because now you're
 

00:28:43.080 --> 00:28:45.740
implementation detail because now you're
using the new JDK collection classes and

00:28:45.740 --> 00:28:45.750
using the new JDK collection classes and
 

00:28:45.750 --> 00:28:47.840
using the new JDK collection classes and
guava isn't useful anymore or you can't

00:28:47.840 --> 00:28:47.850
guava isn't useful anymore or you can't
 

00:28:47.850 --> 00:28:51.860
guava isn't useful anymore or you can't
because you use in the past to provide

00:28:51.860 --> 00:28:51.870
because you use in the past to provide
 

00:28:51.870 --> 00:28:53.120
because you use in the past to provide
guava as

00:28:53.120 --> 00:28:53.130
guava as
 

00:28:53.130 --> 00:28:55.580
guava as
a transitive dependency of your module

00:28:55.580 --> 00:28:55.590
a transitive dependency of your module
 

00:28:55.590 --> 00:28:57.260
a transitive dependency of your module
Dib so therefore you can break your

00:28:57.260 --> 00:28:57.270
Dib so therefore you can break your
 

00:28:57.270 --> 00:29:00.260
Dib so therefore you can break your
client people can start using guava API

00:29:00.260 --> 00:29:00.270
client people can start using guava API
 

00:29:00.270 --> 00:29:03.530
client people can start using guava API
through your module and that's it so

00:29:03.530 --> 00:29:03.540
through your module and that's it so
 

00:29:03.540 --> 00:29:07.100
through your module and that's it so
really this compiled dependency was all

00:29:07.100 --> 00:29:07.110
really this compiled dependency was all
 

00:29:07.110 --> 00:29:09.140
really this compiled dependency was all
wrong and all consumers of the module

00:29:09.140 --> 00:29:09.150
wrong and all consumers of the module
 

00:29:09.150 --> 00:29:10.640
wrong and all consumers of the module
consumes all of the quantitative

00:29:10.640 --> 00:29:10.650
consumes all of the quantitative
 

00:29:10.650 --> 00:29:13.570
consumes all of the quantitative
dependencies which basically was

00:29:13.570 --> 00:29:13.580
dependencies which basically was
 

00:29:13.580 --> 00:29:16.190
dependencies which basically was
yielding way too many details about how

00:29:16.190 --> 00:29:16.200
yielding way too many details about how
 

00:29:16.200 --> 00:29:20.870
yielding way too many details about how
you implemented so they came up gadelle

00:29:20.870 --> 00:29:20.880
you implemented so they came up gadelle
 

00:29:20.880 --> 00:29:23.390
you implemented so they came up gadelle
came up with a new way of declaring your

00:29:23.390 --> 00:29:23.400
came up with a new way of declaring your
 

00:29:23.400 --> 00:29:25.880
came up with a new way of declaring your
dependency compile is not irrigated and

00:29:25.880 --> 00:29:25.890
dependency compile is not irrigated and
 

00:29:25.890 --> 00:29:28.250
dependency compile is not irrigated and
it's replaced by two new configurations

00:29:28.250 --> 00:29:28.260
it's replaced by two new configurations
 

00:29:28.260 --> 00:29:31.490
it's replaced by two new configurations
either API or implementation so you can

00:29:31.490 --> 00:29:31.500
either API or implementation so you can
 

00:29:31.500 --> 00:29:33.770
either API or implementation so you can
see here I'm replacing what I used to

00:29:33.770 --> 00:29:33.780
see here I'm replacing what I used to
 

00:29:33.780 --> 00:29:36.740
see here I'm replacing what I used to
declare X&amp;Y with one declared as an

00:29:36.740 --> 00:29:36.750
declare X&amp;Y with one declared as an
 

00:29:36.750 --> 00:29:38.240
declare X&amp;Y with one declared as an
implementation detail that's

00:29:38.240 --> 00:29:38.250
implementation detail that's
 

00:29:38.250 --> 00:29:40.460
implementation detail that's
implementation so that means that I'm

00:29:40.460 --> 00:29:40.470
implementation so that means that I'm
 

00:29:40.470 --> 00:29:44.210
implementation so that means that I'm
consuming lab X as an implementation

00:29:44.210 --> 00:29:44.220
consuming lab X as an implementation
 

00:29:44.220 --> 00:29:46.910
consuming lab X as an implementation
detail but none of my users will have

00:29:46.910 --> 00:29:46.920
detail but none of my users will have
 

00:29:46.920 --> 00:29:50.170
detail but none of my users will have
access to it implementation to its API

00:29:50.170 --> 00:29:50.180
access to it implementation to its API
 

00:29:50.180 --> 00:29:55.010
access to it implementation to its API
however I'm also using label Y and I'm

00:29:55.010 --> 00:29:55.020
however I'm also using label Y and I'm
 

00:29:55.020 --> 00:29:57.770
however I'm also using label Y and I'm
also offering its API as sort of my ID I

00:29:57.770 --> 00:29:57.780
also offering its API as sort of my ID I
 

00:29:57.780 --> 00:29:59.960
also offering its API as sort of my ID I
am composing over that particular module

00:29:59.960 --> 00:29:59.970
am composing over that particular module
 

00:29:59.970 --> 00:30:01.940
am composing over that particular module
okay so this is strict distinction

00:30:01.940 --> 00:30:01.950
okay so this is strict distinction
 

00:30:01.950 --> 00:30:05.710
okay so this is strict distinction
between the two now

00:30:05.710 --> 00:30:05.720
between the two now
 

00:30:05.720 --> 00:30:08.570
between the two now
API is basically the equivalent of the

00:30:08.570 --> 00:30:08.580
API is basically the equivalent of the
 

00:30:08.580 --> 00:30:11.360
API is basically the equivalent of the
old compiled it's the easy way to go if

00:30:11.360 --> 00:30:11.370
old compiled it's the easy way to go if
 

00:30:11.370 --> 00:30:13.340
old compiled it's the easy way to go if
you were to do a search and replace by

00:30:13.340 --> 00:30:13.350
you were to do a search and replace by
 

00:30:13.350 --> 00:30:16.100
you were to do a search and replace by
compile with API it will just work but

00:30:16.100 --> 00:30:16.110
compile with API it will just work but
 

00:30:16.110 --> 00:30:18.170
compile with API it will just work but
we totally not recommend doing this

00:30:18.170 --> 00:30:18.180
we totally not recommend doing this
 

00:30:18.180 --> 00:30:19.700
we totally not recommend doing this
because again you're going to leak all

00:30:19.700 --> 00:30:19.710
because again you're going to leak all
 

00:30:19.710 --> 00:30:22.450
because again you're going to leak all
your dependencies and after that ID

00:30:22.450 --> 00:30:22.460
your dependencies and after that ID
 

00:30:22.460 --> 00:30:25.160
your dependencies and after that ID
better would be to use implementation

00:30:25.160 --> 00:30:25.170
better would be to use implementation
 

00:30:25.170 --> 00:30:28.600
better would be to use implementation
then you clearly say I'm using an

00:30:28.600 --> 00:30:28.610
then you clearly say I'm using an
 

00:30:28.610 --> 00:30:30.710
then you clearly say I'm using an
implementation details as an

00:30:30.710 --> 00:30:30.720
implementation details as an
 

00:30:30.720 --> 00:30:32.090
implementation details as an
implementation detail of my library I'm

00:30:32.090 --> 00:30:32.100
implementation detail of my library I'm
 

00:30:32.100 --> 00:30:34.400
implementation detail of my library I'm
using this module and I am NOT going to

00:30:34.400 --> 00:30:34.410
using this module and I am NOT going to
 

00:30:34.410 --> 00:30:37.700
using this module and I am NOT going to
leak it to my users okay seems pretty

00:30:37.700 --> 00:30:37.710
leak it to my users okay seems pretty
 

00:30:37.710 --> 00:30:40.310
leak it to my users okay seems pretty
easy so in fact you should probably just

00:30:40.310 --> 00:30:40.320
easy so in fact you should probably just
 

00:30:40.320 --> 00:30:41.540
easy so in fact you should probably just
do a search and replace of all your

00:30:41.540 --> 00:30:41.550
do a search and replace of all your
 

00:30:41.550 --> 00:30:42.980
do a search and replace of all your
compile replace it with the

00:30:42.980 --> 00:30:42.990
compile replace it with the
 

00:30:42.990 --> 00:30:44.990
compile replace it with the
implementation you will might break

00:30:44.990 --> 00:30:45.000
implementation you will might break
 

00:30:45.000 --> 00:30:48.830
implementation you will might break
because some users of your library

00:30:48.830 --> 00:30:48.840
because some users of your library
 

00:30:48.840 --> 00:30:50.300
because some users of your library
somewhere was using actually your

00:30:50.300 --> 00:30:50.310
somewhere was using actually your
 

00:30:50.310 --> 00:30:51.380
somewhere was using actually your
dependency you were leaking

00:30:51.380 --> 00:30:51.390
dependency you were leaking
 

00:30:51.390 --> 00:30:53.300
dependency you were leaking
the only thing that you would have to do

00:30:53.300 --> 00:30:53.310
the only thing that you would have to do
 

00:30:53.310 --> 00:30:55.130
the only thing that you would have to do
is that they would have to directly also

00:30:55.130 --> 00:30:55.140
is that they would have to directly also
 

00:30:55.140 --> 00:30:57.230
is that they would have to directly also
declare their dependency on whichever

00:30:57.230 --> 00:30:57.240
declare their dependency on whichever
 

00:30:57.240 --> 00:31:00.680
declare their dependency on whichever
module they were actually using so it's

00:31:00.680 --> 00:31:00.690
module they were actually using so it's
 

00:31:00.690 --> 00:31:01.940
module they were actually using so it's
a little bit more work but it shouldn't

00:31:01.940 --> 00:31:01.950
a little bit more work but it shouldn't
 

00:31:01.950 --> 00:31:03.860
a little bit more work but it shouldn't
be so bad now let's look how it looks

00:31:03.860 --> 00:31:03.870
be so bad now let's look how it looks
 

00:31:03.870 --> 00:31:06.889
be so bad now let's look how it looks
like again if you do an on ABI change

00:31:06.889 --> 00:31:06.899
like again if you do an on ABI change
 

00:31:06.899 --> 00:31:09.289
like again if you do an on ABI change
nothing happens your recon you're

00:31:09.289 --> 00:31:09.299
nothing happens your recon you're
 

00:31:09.299 --> 00:31:11.599
nothing happens your recon you're
changing lead to libel 1 and other not

00:31:11.599 --> 00:31:11.609
changing lead to libel 1 and other not
 

00:31:11.609 --> 00:31:14.209
changing lead to libel 1 and other not
be compiled no change here but if you

00:31:14.209 --> 00:31:14.219
be compiled no change here but if you
 

00:31:14.219 --> 00:31:16.310
be compiled no change here but if you
switch to the API change this was what

00:31:16.310 --> 00:31:16.320
switch to the API change this was what
 

00:31:16.320 --> 00:31:19.690
switch to the API change this was what
we used to have now ABI

00:31:19.690 --> 00:31:19.700
we used to have now ABI
 

00:31:19.700 --> 00:31:22.129
we used to have now ABI
with an ABI change app is not be

00:31:22.129 --> 00:31:22.139
with an ABI change app is not be
 

00:31:22.139 --> 00:31:24.409
with an ABI change app is not be
compiled any longer only live one will

00:31:24.409 --> 00:31:24.419
compiled any longer only live one will
 

00:31:24.419 --> 00:31:27.680
compiled any longer only live one will
be recompiled because leap2 is not

00:31:27.680 --> 00:31:27.690
be recompiled because leap2 is not
 

00:31:27.690 --> 00:31:30.019
be recompiled because leap2 is not
visible to app this may seem to be a

00:31:30.019 --> 00:31:30.029
visible to app this may seem to be a
 

00:31:30.029 --> 00:31:32.450
visible to app this may seem to be a
very little small detail but when you

00:31:32.450 --> 00:31:32.460
very little small detail but when you
 

00:31:32.460 --> 00:31:34.249
very little small detail but when you
come back to the other two the example I

00:31:34.249 --> 00:31:34.259
come back to the other two the example I
 

00:31:34.259 --> 00:31:36.919
come back to the other two the example I
gave earlier where you had this ABI code

00:31:36.919 --> 00:31:36.929
gave earlier where you had this ABI code
 

00:31:36.929 --> 00:31:38.959
gave earlier where you had this ABI code
change at the leaf module you remember I

00:31:38.959 --> 00:31:38.969
change at the leaf module you remember I
 

00:31:38.969 --> 00:31:41.450
change at the leaf module you remember I
was compiling obviously the module that

00:31:41.450 --> 00:31:41.460
was compiling obviously the module that
 

00:31:41.460 --> 00:31:43.759
was compiling obviously the module that
changes you're still going to recompile

00:31:43.759 --> 00:31:43.769
changes you're still going to recompile
 

00:31:43.769 --> 00:31:45.499
changes you're still going to recompile
all the modules that import it directly

00:31:45.499 --> 00:31:45.509
all the modules that import it directly
 

00:31:45.509 --> 00:31:48.440
all the modules that import it directly
but it could stop right there it's not

00:31:48.440 --> 00:31:48.450
but it could stop right there it's not
 

00:31:48.450 --> 00:31:50.930
but it could stop right there it's not
going to reconcile anything else now

00:31:50.930 --> 00:31:50.940
going to reconcile anything else now
 

00:31:50.940 --> 00:31:54.019
going to reconcile anything else now
here you can see I'm setting about 50%

00:31:54.019 --> 00:31:54.029
here you can see I'm setting about 50%
 

00:31:54.029 --> 00:31:56.779
here you can see I'm setting about 50%
of recompile of recompilation I'm not

00:31:56.779 --> 00:31:56.789
of recompile of recompilation I'm not
 

00:31:56.789 --> 00:31:57.799
of recompile of recompilation I'm not
too bad but if you have an application

00:31:57.799 --> 00:31:57.809
too bad but if you have an application
 

00:31:57.809 --> 00:32:00.289
too bad but if you have an application
with 5200 or whatever number of modules

00:32:00.289 --> 00:32:00.299
with 5200 or whatever number of modules
 

00:32:00.299 --> 00:32:07.399
with 5200 or whatever number of modules
this can be substantial saving ok so it

00:32:07.399 --> 00:32:07.409
this can be substantial saving ok so it
 

00:32:07.409 --> 00:32:10.099
this can be substantial saving ok so it
adds up you come you have compilation

00:32:10.099 --> 00:32:10.109
adds up you come you have compilation
 

00:32:10.109 --> 00:32:12.379
adds up you come you have compilation
avoidance Plus with API implementation

00:32:12.379 --> 00:32:12.389
avoidance Plus with API implementation
 

00:32:12.389 --> 00:32:14.389
avoidance Plus with API implementation
configurations you're going to get much

00:32:14.389 --> 00:32:14.399
configurations you're going to get much
 

00:32:14.399 --> 00:32:17.359
configurations you're going to get much
faster build I want to talk about one

00:32:17.359 --> 00:32:17.369
faster build I want to talk about one
 

00:32:17.369 --> 00:32:21.320
faster build I want to talk about one
last final note on modularity when you

00:32:21.320 --> 00:32:21.330
last final note on modularity when you
 

00:32:21.330 --> 00:32:23.389
last final note on modularity when you
have multiple modules gradual can build

00:32:23.389 --> 00:32:23.399
have multiple modules gradual can build
 

00:32:23.399 --> 00:32:25.519
have multiple modules gradual can build
them in parallel we've had issues where

00:32:25.519 --> 00:32:25.529
them in parallel we've had issues where
 

00:32:25.529 --> 00:32:27.139
them in parallel we've had issues where
you know sometimes the one task has to

00:32:27.139 --> 00:32:27.149
you know sometimes the one task has to
 

00:32:27.149 --> 00:32:28.339
you know sometimes the one task has to
run before a number of other attacks

00:32:28.339 --> 00:32:28.349
run before a number of other attacks
 

00:32:28.349 --> 00:32:31.129
run before a number of other attacks
waiting for it to finish can be running

00:32:31.129 --> 00:32:31.139
waiting for it to finish can be running
 

00:32:31.139 --> 00:32:33.769
waiting for it to finish can be running
when you do things in parallel you don't

00:32:33.769 --> 00:32:33.779
when you do things in parallel you don't
 

00:32:33.779 --> 00:32:35.869
when you do things in parallel you don't
have such issues anymore so this is

00:32:35.869 --> 00:32:35.879
have such issues anymore so this is
 

00:32:35.879 --> 00:32:37.339
have such issues anymore so this is
really a great advantage to use

00:32:37.339 --> 00:32:37.349
really a great advantage to use
 

00:32:37.349 --> 00:32:39.079
really a great advantage to use
multi-core machines when you have

00:32:39.079 --> 00:32:39.089
multi-core machines when you have
 

00:32:39.089 --> 00:32:42.049
multi-core machines when you have
multiple modules having multiple modules

00:32:42.049 --> 00:32:42.059
multiple modules having multiple modules
 

00:32:42.059 --> 00:32:44.509
multiple modules having multiple modules
is a great workaround for the lack of

00:32:44.509 --> 00:32:44.519
is a great workaround for the lack of
 

00:32:44.519 --> 00:32:46.519
is a great workaround for the lack of
some of the incremental tests as you may

00:32:46.519 --> 00:32:46.529
some of the incremental tests as you may
 

00:32:46.529 --> 00:32:47.690
some of the incremental tests as you may
have heard by now and it's something

00:32:47.690 --> 00:32:47.700
have heard by now and it's something
 

00:32:47.700 --> 00:32:51.019
have heard by now and it's something
which is very important Java C task the

00:32:51.019 --> 00:32:51.029
which is very important Java C task the
 

00:32:51.029 --> 00:32:52.879
which is very important Java C task the
task that compiled your Java code into

00:32:52.879 --> 00:32:52.889
task that compiled your Java code into
 

00:32:52.889 --> 00:32:55.519
task that compiled your Java code into
class files is in theory incremental

00:32:55.519 --> 00:32:55.529
class files is in theory incremental
 

00:32:55.529 --> 00:32:57.859
class files is in theory incremental
however as soon as you start using

00:32:57.859 --> 00:32:57.869
however as soon as you start using
 

00:32:57.869 --> 00:33:00.499
however as soon as you start using
annotation processors we have to turn

00:33:00.499 --> 00:33:00.509
annotation processors we have to turn
 

00:33:00.509 --> 00:33:02.719
annotation processors we have to turn
out the incrementality because some

00:33:02.719 --> 00:33:02.729
out the incrementality because some
 

00:33:02.729 --> 00:33:04.519
out the incrementality because some
annotation processes they want to see

00:33:04.519 --> 00:33:04.529
annotation processes they want to see
 

00:33:04.529 --> 00:33:06.259
annotation processes they want to see
the world you know they want to see you

00:33:06.259 --> 00:33:06.269
the world you know they want to see you
 

00:33:06.269 --> 00:33:07.700
the world you know they want to see you
know dagger they want to see all the

00:33:07.700 --> 00:33:07.710
know dagger they want to see all the
 

00:33:07.710 --> 00:33:09.649
know dagger they want to see all the
injection points are they all satisfied

00:33:09.649 --> 00:33:09.659
injection points are they all satisfied
 

00:33:09.659 --> 00:33:11.479
injection points are they all satisfied
so even if you change only one class you

00:33:11.479 --> 00:33:11.489
so even if you change only one class you
 

00:33:11.489 --> 00:33:13.700
so even if you change only one class you
have to recompile everything so that the

00:33:13.700 --> 00:33:13.710
have to recompile everything so that the
 

00:33:13.710 --> 00:33:16.219
have to recompile everything so that the
annotation processors can be fed and our

00:33:16.219 --> 00:33:16.229
annotation processors can be fed and our
 

00:33:16.229 --> 00:33:17.180
annotation processors can be fed and our
react appropriately

00:33:17.180 --> 00:33:17.190
react appropriately
 

00:33:17.190 --> 00:33:20.360
react appropriately
now if you split this Java C task in

00:33:20.360 --> 00:33:20.370
now if you split this Java C task in
 

00:33:20.370 --> 00:33:22.580
now if you split this Java C task in
to multiple modules none of them will be

00:33:22.580 --> 00:33:22.590
to multiple modules none of them will be
 

00:33:22.590 --> 00:33:23.690
to multiple modules none of them will be
incremental but because there will be

00:33:23.690 --> 00:33:23.700
incremental but because there will be
 

00:33:23.700 --> 00:33:25.280
incremental but because there will be
much smaller each of them they were

00:33:25.280 --> 00:33:25.290
much smaller each of them they were
 

00:33:25.290 --> 00:33:28.549
much smaller each of them they were
going to be much faster all right which

00:33:28.549 --> 00:33:28.559
going to be much faster all right which
 

00:33:28.559 --> 00:33:30.320
going to be much faster all right which
why in the cuddle plug-in to provide

00:33:30.320 --> 00:33:30.330
why in the cuddle plug-in to provide
 

00:33:30.330 --> 00:33:32.299
why in the cuddle plug-in to provide
some parallelism within a task but

00:33:32.299 --> 00:33:32.309
some parallelism within a task but
 

00:33:32.309 --> 00:33:34.280
some parallelism within a task but
that's difficult and it's limited and

00:33:34.280 --> 00:33:34.290
that's difficult and it's limited and
 

00:33:34.290 --> 00:33:36.799
that's difficult and it's limited and
you will never get as much as much

00:33:36.799 --> 00:33:36.809
you will never get as much as much
 

00:33:36.809 --> 00:33:41.690
you will never get as much as much
parallelism as if you are using merging

00:33:41.690 --> 00:33:41.700
parallelism as if you are using merging
 

00:33:41.700 --> 00:33:46.250
parallelism as if you are using merging
module projects now let's say you've

00:33:46.250 --> 00:33:46.260
module projects now let's say you've
 

00:33:46.260 --> 00:33:48.470
module projects now let's say you've
been very good you followed all of Jim's

00:33:48.470 --> 00:33:48.480
been very good you followed all of Jim's
 

00:33:48.480 --> 00:33:51.230
been very good you followed all of Jim's
states you've tried to understand what's

00:33:51.230 --> 00:33:51.240
states you've tried to understand what's
 

00:33:51.240 --> 00:33:54.680
states you've tried to understand what's
wrong it feels slow right so what is the

00:33:54.680 --> 00:33:54.690
wrong it feels slow right so what is the
 

00:33:54.690 --> 00:33:56.840
wrong it feels slow right so what is the
next step for you to understand what can

00:33:56.840 --> 00:33:56.850
next step for you to understand what can
 

00:33:56.850 --> 00:34:01.060
next step for you to understand what can
you do to figure out why is my bill slow

00:34:01.060 --> 00:34:01.070
you do to figure out why is my bill slow
 

00:34:01.070 --> 00:34:03.980
you do to figure out why is my bill slow
now one thing to realize is that slow

00:34:03.980 --> 00:34:03.990
now one thing to realize is that slow
 

00:34:03.990 --> 00:34:06.560
now one thing to realize is that slow
builds are not normal this is not a

00:34:06.560 --> 00:34:06.570
builds are not normal this is not a
 

00:34:06.570 --> 00:34:08.480
builds are not normal this is not a
reality in which you should be living

00:34:08.480 --> 00:34:08.490
reality in which you should be living
 

00:34:08.490 --> 00:34:11.389
reality in which you should be living
let me be very clear a full bill that

00:34:11.389 --> 00:34:11.399
let me be very clear a full bill that
 

00:34:11.399 --> 00:34:15.470
let me be very clear a full bill that
takes ten minutes is not normally an

00:34:15.470 --> 00:34:15.480
takes ten minutes is not normally an
 

00:34:15.480 --> 00:34:17.389
takes ten minutes is not normally an
incremental bill that takes almost the

00:34:17.389 --> 00:34:17.399
incremental bill that takes almost the
 

00:34:17.399 --> 00:34:19.790
incremental bill that takes almost the
same amount of time as a full build is

00:34:19.790 --> 00:34:19.800
same amount of time as a full build is
 

00:34:19.800 --> 00:34:23.270
same amount of time as a full build is
even less normal and finally when you

00:34:23.270 --> 00:34:23.280
even less normal and finally when you
 

00:34:23.280 --> 00:34:25.040
even less normal and finally when you
change nothing and you run the build

00:34:25.040 --> 00:34:25.050
change nothing and you run the build
 

00:34:25.050 --> 00:34:27.169
change nothing and you run the build
again and it seems to rerun a number of

00:34:27.169 --> 00:34:27.179
again and it seems to rerun a number of
 

00:34:27.179 --> 00:34:29.930
again and it seems to rerun a number of
tasks but you don't know why because you

00:34:29.930 --> 00:34:29.940
tasks but you don't know why because you
 

00:34:29.940 --> 00:34:31.669
tasks but you don't know why because you
change nothing this is clearly not

00:34:31.669 --> 00:34:31.679
change nothing this is clearly not
 

00:34:31.679 --> 00:34:34.340
change nothing this is clearly not
normal so there are scenarios like this

00:34:34.340 --> 00:34:34.350
normal so there are scenarios like this
 

00:34:34.350 --> 00:34:35.810
normal so there are scenarios like this
that you should be looking into and

00:34:35.810 --> 00:34:35.820
that you should be looking into and
 

00:34:35.820 --> 00:34:38.450
that you should be looking into and
figuring out do I really have to go

00:34:38.450 --> 00:34:38.460
figuring out do I really have to go
 

00:34:38.460 --> 00:34:39.830
figuring out do I really have to go
through this maybe there are some stuff

00:34:39.830 --> 00:34:39.840
through this maybe there are some stuff
 

00:34:39.840 --> 00:34:41.360
through this maybe there are some stuff
I can do to make things better for me

00:34:41.360 --> 00:34:41.370
I can do to make things better for me
 

00:34:41.370 --> 00:34:44.360
I can do to make things better for me
and we all know that the build is a tax

00:34:44.360 --> 00:34:44.370
and we all know that the build is a tax
 

00:34:44.370 --> 00:34:47.110
and we all know that the build is a tax
nobody likes to pay taxes so

00:34:47.110 --> 00:34:47.120
nobody likes to pay taxes so
 

00:34:47.120 --> 00:34:48.919
nobody likes to pay taxes so
understanding the weald is like paying

00:34:48.919 --> 00:34:48.929
understanding the weald is like paying
 

00:34:48.929 --> 00:34:51.800
understanding the weald is like paying
taxes on taxes I understand that but you

00:34:51.800 --> 00:34:51.810
taxes on taxes I understand that but you
 

00:34:51.810 --> 00:34:54.320
taxes on taxes I understand that but you
must understand at some level that you

00:34:54.320 --> 00:34:54.330
must understand at some level that you
 

00:34:54.330 --> 00:34:56.060
must understand at some level that you
you need to spend some time into it to

00:34:56.060 --> 00:34:56.070
you need to spend some time into it to
 

00:34:56.070 --> 00:34:59.270
you need to spend some time into it to
invest into understanding where is my

00:34:59.270 --> 00:34:59.280
invest into understanding where is my
 

00:34:59.280 --> 00:35:02.090
invest into understanding where is my
bill being being spent where which task

00:35:02.090 --> 00:35:02.100
bill being being spent where which task
 

00:35:02.100 --> 00:35:03.830
bill being being spent where which task
is taking time so that you can

00:35:03.830 --> 00:35:03.840
is taking time so that you can
 

00:35:03.840 --> 00:35:06.610
is taking time so that you can
eventually have a chance to improve it

00:35:06.610 --> 00:35:06.620
eventually have a chance to improve it
 

00:35:06.620 --> 00:35:10.790
eventually have a chance to improve it
but what can go wrong like we totally a

00:35:10.790 --> 00:35:10.800
but what can go wrong like we totally a
 

00:35:10.800 --> 00:35:13.100
but what can go wrong like we totally a
third party plugins you have to be very

00:35:13.100 --> 00:35:13.110
third party plugins you have to be very
 

00:35:13.110 --> 00:35:14.570
third party plugins you have to be very
careful about the third party plug-in to

00:35:14.570 --> 00:35:14.580
careful about the third party plug-in to
 

00:35:14.580 --> 00:35:15.920
careful about the third party plug-in to
using some of them are very well written

00:35:15.920 --> 00:35:15.930
using some of them are very well written
 

00:35:15.930 --> 00:35:19.160
using some of them are very well written
some of them not so well in correct

00:35:19.160 --> 00:35:19.170
some of them not so well in correct
 

00:35:19.170 --> 00:35:20.810
some of them not so well in correct
organization that's particularly true

00:35:20.810 --> 00:35:20.820
organization that's particularly true
 

00:35:20.820 --> 00:35:22.790
organization that's particularly true
for instance when you were coming from

00:35:22.790 --> 00:35:22.800
for instance when you were coming from
 

00:35:22.800 --> 00:35:24.890
for instance when you were coming from
the Eclipse side of things for few years

00:35:24.890 --> 00:35:24.900
the Eclipse side of things for few years
 

00:35:24.900 --> 00:35:26.810
the Eclipse side of things for few years
back where all the source files were in

00:35:26.810 --> 00:35:26.820
back where all the source files were in
 

00:35:26.820 --> 00:35:29.750
back where all the source files were in
the salt directory like a IDL C++ and

00:35:29.750 --> 00:35:29.760
the salt directory like a IDL C++ and
 

00:35:29.760 --> 00:35:31.849
the salt directory like a IDL C++ and
Java they were all in the same folder so

00:35:31.849 --> 00:35:31.859
Java they were all in the same folder so
 

00:35:31.859 --> 00:35:33.290
Java they were all in the same folder so
if you change one it would

00:35:33.290 --> 00:35:33.300
if you change one it would
 

00:35:33.300 --> 00:35:38.000
if you change one it would
trigger all the tasks to be run some

00:35:38.000 --> 00:35:38.010
trigger all the tasks to be run some
 

00:35:38.010 --> 00:35:39.950
trigger all the tasks to be run some
people like to build two to customize

00:35:39.950 --> 00:35:39.960
people like to build two to customize
 

00:35:39.960 --> 00:35:41.690
people like to build two to customize
all of the abilities them and sometimes

00:35:41.690 --> 00:35:41.700
all of the abilities them and sometimes
 

00:35:41.700 --> 00:35:44.600
all of the abilities them and sometimes
it goes really really wild and finally

00:35:44.600 --> 00:35:44.610
it goes really really wild and finally
 

00:35:44.610 --> 00:35:46.130
it goes really really wild and finally
some incorrect setting but you need to

00:35:46.130 --> 00:35:46.140
some incorrect setting but you need to
 

00:35:46.140 --> 00:35:48.470
some incorrect setting but you need to
understand and spend some time in the

00:35:48.470 --> 00:35:48.480
understand and spend some time in the
 

00:35:48.480 --> 00:35:51.230
understand and spend some time in the
build system and you know I know this is

00:35:51.230 --> 00:35:51.240
build system and you know I know this is
 

00:35:51.240 --> 00:35:52.610
build system and you know I know this is
not something that you like to do your

00:35:52.610 --> 00:35:52.620
not something that you like to do your
 

00:35:52.620 --> 00:35:55.580
not something that you like to do your
app developers but as your project is

00:35:55.580 --> 00:35:55.590
app developers but as your project is
 

00:35:55.590 --> 00:35:58.730
app developers but as your project is
growing you must spend some time now

00:35:58.730 --> 00:35:58.740
growing you must spend some time now
 

00:35:58.740 --> 00:36:00.620
growing you must spend some time now
there are tools to help you so that you

00:36:00.620 --> 00:36:00.630
there are tools to help you so that you
 

00:36:00.630 --> 00:36:02.150
there are tools to help you so that you
spend a minimum amount of time but

00:36:02.150 --> 00:36:02.160
spend a minimum amount of time but
 

00:36:02.160 --> 00:36:04.270
spend a minimum amount of time but
before we get into this about that slide

00:36:04.270 --> 00:36:04.280
before we get into this about that slide
 

00:36:04.280 --> 00:36:08.000
before we get into this about that slide
one of the things we repeatedly see over

00:36:08.000 --> 00:36:08.010
one of the things we repeatedly see over
 

00:36:08.010 --> 00:36:09.800
one of the things we repeatedly see over
and over again with people who complain

00:36:09.800 --> 00:36:09.810
and over again with people who complain
 

00:36:09.810 --> 00:36:12.950
and over again with people who complain
about their slow build is the do last do

00:36:12.950 --> 00:36:12.960
about their slow build is the do last do
 

00:36:12.960 --> 00:36:16.130
about their slow build is the do last do
last is that gradual cannot understand

00:36:16.130 --> 00:36:16.140
last is that gradual cannot understand
 

00:36:16.140 --> 00:36:18.770
last is that gradual cannot understand
if your task is now incremental or not

00:36:18.770 --> 00:36:18.780
if your task is now incremental or not
 

00:36:18.780 --> 00:36:19.790
if your task is now incremental or not
because it doesn't know what you're

00:36:19.790 --> 00:36:19.800
because it doesn't know what you're
 

00:36:19.800 --> 00:36:22.040
because it doesn't know what you're
doing in there do last is bad because

00:36:22.040 --> 00:36:22.050
doing in there do last is bad because
 

00:36:22.050 --> 00:36:24.140
doing in there do last is bad because
most of the time the object checks will

00:36:24.140 --> 00:36:24.150
most of the time the object checks will
 

00:36:24.150 --> 00:36:26.270
most of the time the object checks will
so fail because you're probably writing

00:36:26.270 --> 00:36:26.280
so fail because you're probably writing
 

00:36:26.280 --> 00:36:28.370
so fail because you're probably writing
something somewhere at it in the output

00:36:28.370 --> 00:36:28.380
something somewhere at it in the output
 

00:36:28.380 --> 00:36:29.930
something somewhere at it in the output
directory of the particular task or

00:36:29.930 --> 00:36:29.940
directory of the particular task or
 

00:36:29.940 --> 00:36:31.670
directory of the particular task or
you're changing something after the test

00:36:31.670 --> 00:36:31.680
you're changing something after the test
 

00:36:31.680 --> 00:36:33.830
you're changing something after the test
run and so basically again not only

00:36:33.830 --> 00:36:33.840
run and so basically again not only
 

00:36:33.840 --> 00:36:36.200
run and so basically again not only
please lost so you will rerun your task

00:36:36.200 --> 00:36:36.210
please lost so you will rerun your task
 

00:36:36.210 --> 00:36:39.490
please lost so you will rerun your task
every time avoid this type of thing and

00:36:39.490 --> 00:36:39.500
every time avoid this type of thing and
 

00:36:39.500 --> 00:36:42.170
every time avoid this type of thing and
one ways you can do that is by writing

00:36:42.170 --> 00:36:42.180
one ways you can do that is by writing
 

00:36:42.180 --> 00:36:44.060
one ways you can do that is by writing
your own plugin I know it sounds scary

00:36:44.060 --> 00:36:44.070
your own plugin I know it sounds scary
 

00:36:44.070 --> 00:36:47.690
your own plugin I know it sounds scary
but believe me it's not that bad you can

00:36:47.690 --> 00:36:47.700
but believe me it's not that bad you can
 

00:36:47.700 --> 00:36:49.700
but believe me it's not that bad you can
write your own plug-in you can put it in

00:36:49.700 --> 00:36:49.710
write your own plug-in you can put it in
 

00:36:49.710 --> 00:36:51.560
write your own plug-in you can put it in
the build source directory which means

00:36:51.560 --> 00:36:51.570
the build source directory which means
 

00:36:51.570 --> 00:36:53.060
the build source directory which means
that it will be available to all of your

00:36:53.060 --> 00:36:53.070
that it will be available to all of your
 

00:36:53.070 --> 00:36:55.280
that it will be available to all of your
module automatically remember to profile

00:36:55.280 --> 00:36:55.290
module automatically remember to profile
 

00:36:55.290 --> 00:36:57.020
module automatically remember to profile
it a profile code every day and I'm

00:36:57.020 --> 00:36:57.030
it a profile code every day and I'm
 

00:36:57.030 --> 00:36:59.870
it a profile code every day and I'm
always surprised and instead of using

00:36:59.870 --> 00:36:59.880
always surprised and instead of using
 

00:36:59.880 --> 00:37:02.240
always surprised and instead of using
the last try to cuss to write a custom

00:37:02.240 --> 00:37:02.250
the last try to cuss to write a custom
 

00:37:02.250 --> 00:37:05.150
the last try to cuss to write a custom
task with proper inputs and outputs so

00:37:05.150 --> 00:37:05.160
task with proper inputs and outputs so
 

00:37:05.160 --> 00:37:06.440
task with proper inputs and outputs so
that Gradle can cache it

00:37:06.440 --> 00:37:06.450
that Gradle can cache it
 

00:37:06.450 --> 00:37:08.720
that Gradle can cache it
cuddle can understand what would make

00:37:08.720 --> 00:37:08.730
cuddle can understand what would make
 

00:37:08.730 --> 00:37:15.460
cuddle can understand what would make
that task up-to-date or not now

00:37:15.460 --> 00:37:15.470
that task up-to-date or not now
 

00:37:15.470 --> 00:37:17.589
that task up-to-date or not now
you still don't get it I mean you know

00:37:17.589 --> 00:37:17.599
you still don't get it I mean you know
 

00:37:17.599 --> 00:37:20.020
you still don't get it I mean you know
it feels slow and you've been spending

00:37:20.020 --> 00:37:20.030
it feels slow and you've been spending
 

00:37:20.030 --> 00:37:22.300
it feels slow and you've been spending
some time on this and it's still slow so

00:37:22.300 --> 00:37:22.310
some time on this and it's still slow so
 

00:37:22.310 --> 00:37:25.120
some time on this and it's still slow so
what can you do next thing to do run

00:37:25.120 --> 00:37:25.130
what can you do next thing to do run
 

00:37:25.130 --> 00:37:27.700
what can you do next thing to do run
with a dry run this will tell you how

00:37:27.700 --> 00:37:27.710
with a dry run this will tell you how
 

00:37:27.710 --> 00:37:28.780
with a dry run this will tell you how
much time you're spending in the

00:37:28.780 --> 00:37:28.790
much time you're spending in the
 

00:37:28.790 --> 00:37:30.940
much time you're spending in the
configuration this should be a couple of

00:37:30.940 --> 00:37:30.950
configuration this should be a couple of
 

00:37:30.950 --> 00:37:33.790
configuration this should be a couple of
seconds ten seconds at the best at

00:37:33.790 --> 00:37:33.800
seconds ten seconds at the best at
 

00:37:33.800 --> 00:37:35.920
seconds ten seconds at the best at
maximum if you really have a huge

00:37:35.920 --> 00:37:35.930
maximum if you really have a huge
 

00:37:35.930 --> 00:37:38.020
maximum if you really have a huge
project if you start spending way too

00:37:38.020 --> 00:37:38.030
project if you start spending way too
 

00:37:38.030 --> 00:37:39.550
project if you start spending way too
much time there there's something wrong

00:37:39.550 --> 00:37:39.560
much time there there's something wrong
 

00:37:39.560 --> 00:37:41.380
much time there there's something wrong
some some plug-in somewhere is doing

00:37:41.380 --> 00:37:41.390
some some plug-in somewhere is doing
 

00:37:41.390 --> 00:37:42.490
some some plug-in somewhere is doing
something wrong and we need to

00:37:42.490 --> 00:37:42.500
something wrong and we need to
 

00:37:42.500 --> 00:37:45.450
something wrong and we need to
understand what it is it's not that way

00:37:45.450 --> 00:37:45.460
understand what it is it's not that way
 

00:37:45.460 --> 00:37:49.270
understand what it is it's not that way
then you should do a - - in full - - in

00:37:49.270 --> 00:37:49.280
then you should do a - - in full - - in
 

00:37:49.280 --> 00:37:51.630
then you should do a - - in full - - in
flow is very useful it will tell you

00:37:51.630 --> 00:37:51.640
flow is very useful it will tell you
 

00:37:51.640 --> 00:37:56.740
flow is very useful it will tell you
what tasks are running and why again you

00:37:56.740 --> 00:37:56.750
what tasks are running and why again you
 

00:37:56.750 --> 00:37:59.740
what tasks are running and why again you
change none of the source code you rerun

00:37:59.740 --> 00:37:59.750
change none of the source code you rerun
 

00:37:59.750 --> 00:38:02.230
change none of the source code you rerun
a build some tasks are running and you

00:38:02.230 --> 00:38:02.240
a build some tasks are running and you
 

00:38:02.240 --> 00:38:04.210
a build some tasks are running and you
don't know why the - - info will tell

00:38:04.210 --> 00:38:04.220
don't know why the - - info will tell
 

00:38:04.220 --> 00:38:07.260
don't know why the - - info will tell
you exactly why this process manifest

00:38:07.260 --> 00:38:07.270
you exactly why this process manifest
 

00:38:07.270 --> 00:38:09.880
you exactly why this process manifest
task is running that's because the main

00:38:09.880 --> 00:38:09.890
task is running that's because the main
 

00:38:09.890 --> 00:38:13.270
task is running that's because the main
manifest has changed then you have to do

00:38:13.270 --> 00:38:13.280
manifest has changed then you have to do
 

00:38:13.280 --> 00:38:15.220
manifest has changed then you have to do
some detective work to figure out who

00:38:15.220 --> 00:38:15.230
some detective work to figure out who
 

00:38:15.230 --> 00:38:16.780
some detective work to figure out who
changed it because obviously you didn't

00:38:16.780 --> 00:38:16.790
changed it because obviously you didn't
 

00:38:16.790 --> 00:38:18.400
changed it because obviously you didn't
change it yourself but at least it gives

00:38:18.400 --> 00:38:18.410
change it yourself but at least it gives
 

00:38:18.410 --> 00:38:23.200
change it yourself but at least it gives
you a hint next one is the profile a

00:38:23.200 --> 00:38:23.210
you a hint next one is the profile a
 

00:38:23.210 --> 00:38:25.150
you a hint next one is the profile a
slightly more complicated tool that will

00:38:25.150 --> 00:38:25.160
slightly more complicated tool that will
 

00:38:25.160 --> 00:38:27.250
slightly more complicated tool that will
give you the ability to row to look at

00:38:27.250 --> 00:38:27.260
give you the ability to row to look at
 

00:38:27.260 --> 00:38:28.960
give you the ability to row to look at
all your tasks and see how much time you

00:38:28.960 --> 00:38:28.970
all your tasks and see how much time you
 

00:38:28.970 --> 00:38:30.640
all your tasks and see how much time you
spent in each of them this is very

00:38:30.640 --> 00:38:30.650
spent in each of them this is very
 

00:38:30.650 --> 00:38:32.440
spent in each of them this is very
high-level this is very useful to figure

00:38:32.440 --> 00:38:32.450
high-level this is very useful to figure
 

00:38:32.450 --> 00:38:34.390
high-level this is very useful to figure
out that maybe one task is dominating

00:38:34.390 --> 00:38:34.400
out that maybe one task is dominating
 

00:38:34.400 --> 00:38:36.070
out that maybe one task is dominating
most of the time we've seen this one

00:38:36.070 --> 00:38:36.080
most of the time we've seen this one
 

00:38:36.080 --> 00:38:38.980
most of the time we've seen this one
task takes 90% of the time of your build

00:38:38.980 --> 00:38:38.990
task takes 90% of the time of your build
 

00:38:38.990 --> 00:38:41.490
task takes 90% of the time of your build
find out what it is what is it doing

00:38:41.490 --> 00:38:41.500
find out what it is what is it doing
 

00:38:41.500 --> 00:38:46.450
find out what it is what is it doing
before you report and then for the hard

00:38:46.450 --> 00:38:46.460
before you report and then for the hard
 

00:38:46.460 --> 00:38:48.820
before you report and then for the hard
core there is the gather profiler it's a

00:38:48.820 --> 00:38:48.830
core there is the gather profiler it's a
 

00:38:48.830 --> 00:38:51.220
core there is the gather profiler it's a
tool which is provided by huddle and

00:38:51.220 --> 00:38:51.230
tool which is provided by huddle and
 

00:38:51.230 --> 00:38:52.720
tool which is provided by huddle and
it's great it gives you the ability to

00:38:52.720 --> 00:38:52.730
it's great it gives you the ability to
 

00:38:52.730 --> 00:38:55.660
it's great it gives you the ability to
profile and to benchmark the profile is

00:38:55.660 --> 00:38:55.670
profile and to benchmark the profile is
 

00:38:55.670 --> 00:38:57.339
profile and to benchmark the profile is
the most interesting one you can

00:38:57.339 --> 00:38:57.349
the most interesting one you can
 

00:38:57.349 --> 00:39:00.760
the most interesting one you can
actually generate a profiler information

00:39:00.760 --> 00:39:00.770
actually generate a profiler information
 

00:39:00.770 --> 00:39:03.460
actually generate a profiler information
right from there which you can use to

00:39:03.460 --> 00:39:03.470
right from there which you can use to
 

00:39:03.470 --> 00:39:06.099
right from there which you can use to
find berg against us alright so if you

00:39:06.099 --> 00:39:06.109
find berg against us alright so if you
 

00:39:06.109 --> 00:39:07.870
find berg against us alright so if you
think that you know you've done all your

00:39:07.870 --> 00:39:07.880
think that you know you've done all your
 

00:39:07.880 --> 00:39:09.430
think that you know you've done all your
homework your build is still slow you

00:39:09.430 --> 00:39:09.440
homework your build is still slow you
 

00:39:09.440 --> 00:39:12.790
homework your build is still slow you
don't get it run the profiler give us a

00:39:12.790 --> 00:39:12.800
don't get it run the profiler give us a
 

00:39:12.800 --> 00:39:15.579
don't get it run the profiler give us a
your kit profile information finally go

00:39:15.579 --> 00:39:15.589
your kit profile information finally go
 

00:39:15.589 --> 00:39:17.170
your kit profile information finally go
against us and then we'll stop looking

00:39:17.170 --> 00:39:17.180
against us and then we'll stop looking
 

00:39:17.180 --> 00:39:20.589
against us and then we'll stop looking
into why is your build slow much better

00:39:20.589 --> 00:39:20.599
into why is your build slow much better
 

00:39:20.599 --> 00:39:23.079
into why is your build slow much better
than just finding a birthing my build is

00:39:23.079 --> 00:39:23.089
than just finding a birthing my build is
 

00:39:23.089 --> 00:39:26.050
than just finding a birthing my build is
slow I don't know why not giving a build

00:39:26.050 --> 00:39:26.060
slow I don't know why not giving a build
 

00:39:26.060 --> 00:39:27.550
slow I don't know why not giving a build
up gradall not giving us any information

00:39:27.550 --> 00:39:27.560
up gradall not giving us any information
 

00:39:27.560 --> 00:39:28.539
up gradall not giving us any information
this is

00:39:28.539 --> 00:39:28.549
this is
 

00:39:28.549 --> 00:39:30.579
this is
not this is not stuff we can act upon

00:39:30.579 --> 00:39:30.589
not this is not stuff we can act upon
 

00:39:30.589 --> 00:39:32.949
not this is not stuff we can act upon
with this we can look into why your

00:39:32.949 --> 00:39:32.959
with this we can look into why your
 

00:39:32.959 --> 00:39:37.929
with this we can look into why your
build is know some resources this is

00:39:37.929 --> 00:39:37.939
build is know some resources this is
 

00:39:37.939 --> 00:39:39.249
build is know some resources this is
what we've seen today this on Todd

00:39:39.249 --> 00:39:39.259
what we've seen today this on Todd
 

00:39:39.259 --> 00:39:41.259
what we've seen today this on Todd
Tucker project Fork look at the

00:39:41.259 --> 00:39:41.269
Tucker project Fork look at the
 

00:39:41.269 --> 00:39:43.539
Tucker project Fork look at the
migration guide to on the way to do

00:39:43.539 --> 00:39:43.549
migration guide to on the way to do
 

00:39:43.549 --> 00:39:46.239
migration guide to on the way to do
optimize your build speed look into the

00:39:46.239 --> 00:39:46.249
optimize your build speed look into the
 

00:39:46.249 --> 00:39:48.160
optimize your build speed look into the
gradall it's always like you know when

00:39:48.160 --> 00:39:48.170
gradall it's always like you know when
 

00:39:48.170 --> 00:39:49.689
gradall it's always like you know when
you receive a new GD key you look at the

00:39:49.689 --> 00:39:49.699
you receive a new GD key you look at the
 

00:39:49.699 --> 00:39:51.549
you receive a new GD key you look at the
new things in the GD k when there is a

00:39:51.549 --> 00:39:51.559
new things in the GD k when there is a
 

00:39:51.559 --> 00:39:52.870
new things in the GD k when there is a
new Gladwell you should look into what

00:39:52.870 --> 00:39:52.880
new Gladwell you should look into what
 

00:39:52.880 --> 00:39:54.279
new Gladwell you should look into what
is the new things in there there's

00:39:54.279 --> 00:39:54.289
is the new things in there there's
 

00:39:54.289 --> 00:39:56.229
is the new things in there there's
always a bunch of useful utility that

00:39:56.229 --> 00:39:56.239
always a bunch of useful utility that
 

00:39:56.239 --> 00:39:58.130
always a bunch of useful utility that
you can use thank you very much

00:39:58.130 --> 00:39:58.140
you can use thank you very much
 

00:39:58.140 --> 00:40:00.790
you can use thank you very much
[Applause]

00:40:00.790 --> 00:40:00.800
[Applause]
 

00:40:00.800 --> 00:40:14.729
[Applause]
[Music]

