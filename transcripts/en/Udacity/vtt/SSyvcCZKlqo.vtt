WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
It turns out the actual implementation is really minimal

00:00:05.000 --> 00:00:08.000
compared to what you already implemented.

00:00:08.000 --> 00:00:10.000
With this modification you've implemented A-Star,

00:00:10.000 --> 00:00:14.000
which is one of the most powerful search algorithms that they use for the present day

00:00:14.000 --> 00:00:18.000
to drive self-driving cars through unstructured environments.

00:00:18.000 --> 00:00:22.000
The very first thing we do is we expand elements in the open list

00:00:22.000 --> 00:00:25.000
to not just contain g as before but also f.

00:00:25.000 --> 00:00:27.000
I also included h over here.

00:00:27.000 --> 00:00:31.000
That isn't necessary, but I did it anyhow.

00:00:31.000 --> 00:00:34.000
So now we have five tubelet's where g is defined as before.

00:00:34.000 --> 00:00:39.000
H is the heuristic value of the cell x y, and f is the sum of the two.

00:00:39.000 --> 00:00:43.000
The reason why I put f left is I need this for my sort trick

00:00:43.000 --> 00:00:47.000
so that I can sort according to f when I sort the list.

00:00:47.000 --> 00:00:51.000
So notice this has become two elements longer,

00:00:51.000 --> 00:00:57.000
and by moving f to the left side I've implemented that the element I remove

00:00:57.000 --> 00:01:01.000
will be the one with the lowest f-value not the lowest g-value.

00:01:01.000 --> 00:01:06.000
As I go further down and expand the node as happened in these lines over here,

00:01:06.000 --> 00:01:11.000
I now need to modify the index into the next structure a little bit.

00:01:11.000 --> 00:01:16.000
X is now element number three, which is technically the fourth element in the list

00:01:16.000 --> 00:01:18.000
when we start indexing with zero.

00:01:18.000 --> 00:01:19.000
Y is element number four.

00:01:19.000 --> 00:01:21.000
G is element number one.

00:01:21.000 --> 00:01:27.000
F and h, I don't need to pop here because I compute them from scratch in just a minute.

00:01:27.000 --> 00:01:34.000
So as I go further down where I expand a node from the list

00:01:34.000 --> 00:01:39.000
and compute of all possible actions what the successive state is

00:01:39.000 --> 00:01:42.000
and test whether these are legal states to expand.

00:01:42.000 --> 00:01:48.000
I now, as before, increment g by the cross function but here two new lines of code.

00:01:48.000 --> 00:01:52.000
First I compute the heuristic function for the new expanded node.

00:01:52.000 --> 00:01:53.000
That's very straight forward.

00:01:53.000 --> 00:01:54.000
I call it the h2.

00:01:54.000 --> 00:02:00.000
Then the next line of code I compute the new sum of the g-value and the h-value.

00:02:00.000 --> 00:02:06.000
I use those five things: the new f-value, the new g-value, the new h-value,

00:02:06.000 --> 00:02:10.000
and the x and y of the expanded nodes to append to the open list.

00:02:10.000 --> 00:02:14.000
So new here is most importantly the f-value but also the h-value.

00:02:14.000 --> 00:02:18.000
That's all there is to implementing A-star.

00:02:18.000 --> 00:02:21.000
So all I've done is I've just changed the logic according to which

00:02:21.000 --> 00:02:26.000
I remove nodes from the stack to pick the one that has the minimum f-value

00:02:26.000 --> 00:02:30.000
as opposed to the minimum g-value, and I have A-star.

00:02:30.000 --> 00:02:32.000
So let me run it.

00:02:32.000 --> 00:02:34.000
This is for the maze we looked at before.

00:02:34.000 --> 00:02:38.000
Let me move the open spot to the top over here and put a wall back here.

00:02:38.000 --> 00:02:41.000
It turns in this case A-star is not so efficient

00:02:41.000 --> 00:02:44.000
and the area over here it has no preference to go either way.

00:02:44.000 --> 00:02:46.000
It will finally find the go node.

00:02:46.000 --> 00:02:50.000
That, however, changes when I put a big obstacle horizontally over here,

00:02:50.000 --> 00:02:54.000
at which point it's really interesting to see A-star cannot decide whether

00:02:54.000 --> 00:02:56.000
the horizontal path is best or the vertical path.

00:02:56.000 --> 00:03:01.000
So it alternately pops nodes from either one of those.

00:03:01.000 --> 00:03:05.000
The moment its over here the same trick applies as before.

00:03:05.000 --> 00:03:07.000
It doesn't expand anything in the center anymore

00:03:07.000 --> 00:03:10.000
and goes straight to the goal and reaches the goal over here.

00:03:10.000 --> 00:03:12.000
That would not happen without A-star.

00:03:12.000 --> 00:03:15.000
In fact, the way to rework back to the old search

00:03:15.000 --> 00:03:17.000
is to give it an empty heuristic function.

00:03:17.000 --> 00:03:24.000
So here is a definition of the heuristic function initializes h always zero everywhere

00:03:24.000 --> 00:03:27.000
instead of the heuristic function over here, which I won't use for a second

00:03:27.000 --> 00:03:30.000
and just call it heuristic old, and this is the current heuristic function.

00:03:30.000 --> 00:03:35.000
If I run it with a heuristic function of all zeros I get back my original search algorithm.

00:03:35.000 --> 00:03:39.000
You can see this search algorithm explores into the interior a little bit,

00:03:39.000 --> 00:03:42.000
and the result expands more nodes than the A-star.

00:03:42.000 --> 00:03:46.000
This might look very insignificant, but if you get to very large environments,

00:03:46.000 --> 00:03:50.000
it can make a huge difference especially if there is a huge dead end somewhere

00:03:50.000 --> 00:03:51.000
that can't reach the goal.

00:03:51.000 --> 99:59:59.999
Then A-star performs much, much more efficiently than the simple search.

