WEBVTT
Kind: captions
Language: en

00:00:03.740 --> 00:00:05.260
TED SANDER: Thanks, everybody.

00:00:05.260 --> 00:00:05.910
My name is Ted.

00:00:05.910 --> 00:00:08.920
I'm here to talk about
components, specifically

00:00:08.920 --> 00:00:11.850
Angular Dart components.

00:00:11.850 --> 00:00:15.150
I am an infrastructure
tech lead that specifically

00:00:15.150 --> 00:00:18.640
works on widgets for
many of the applications

00:00:18.640 --> 00:00:20.780
that we have at Google.

00:00:20.780 --> 00:00:22.730
And last year, I
was up here, and I

00:00:22.730 --> 00:00:25.110
was talking at the Dart
Summit about the way

00:00:25.110 --> 00:00:30.030
that Google teams use Dart in
Angular to build their web apps

00:00:30.030 --> 00:00:32.890
and how they are very
productive in doing so.

00:00:32.890 --> 00:00:36.490
And it's been quite
a great year for us.

00:00:36.490 --> 00:00:40.410
Maybe you haven't seen it, but
we've had tons of launches.

00:00:40.410 --> 00:00:42.100
We have a lot of
products out there.

00:00:42.100 --> 00:00:47.360
We have many, many users
coming to our applications

00:00:47.360 --> 00:00:49.060
in production.

00:00:49.060 --> 00:00:50.710
And we're getting
some reviews back,

00:00:50.710 --> 00:00:53.620
and we're really liking
these reviews-- stuff

00:00:53.620 --> 00:00:57.020
like its sleek, comfortable,
feel and approachable

00:00:57.020 --> 00:01:01.500
sophistication apparent
throughout this new design.

00:01:01.500 --> 00:01:03.870
The new, responsive
user interface

00:01:03.870 --> 00:01:09.360
that makes it easy and
more efficient to use.

00:01:09.360 --> 00:01:12.650
Nice material design
animations all

00:01:12.650 --> 00:01:15.170
throughout the website,
which obviously

00:01:15.170 --> 00:01:21.590
help making the overall look
and feel infinitely better.

00:01:21.590 --> 00:01:23.370
Now, I don't know about
infinitely better.

00:01:23.370 --> 00:01:25.600
But if a user says that
about your application,

00:01:25.600 --> 00:01:28.740
you're doing the right things.

00:01:28.740 --> 00:01:30.120
This one is my favorite.

00:01:30.120 --> 00:01:33.850
We haven't run into any
delays in the new AdWords

00:01:33.850 --> 00:01:36.650
UI and zero loading screens.

00:01:36.650 --> 00:01:42.350
Even more, some tasks now seem
almost instantly completed.

00:01:42.350 --> 00:01:44.150
Now, they're not quite
instantly completed,

00:01:44.150 --> 00:01:46.750
but it is something
that we strive for.

00:01:46.750 --> 00:01:49.110
And these reviews
came from three

00:01:49.110 --> 00:01:51.450
very separate
applications that we've

00:01:51.450 --> 00:01:53.140
launched in the last year.

00:01:53.140 --> 00:01:54.880
But you can see common patterns.

00:01:54.880 --> 00:01:56.780
They're loving the new UI.

00:01:56.780 --> 00:01:58.160
They're loving the speed.

00:01:58.160 --> 00:02:00.220
They're loving the
material design.

00:02:00.220 --> 00:02:03.970
And all of these three teams
are throughout the whole world.

00:02:03.970 --> 00:02:06.080
Two of them are
from Europe itself.

00:02:06.080 --> 00:02:08.026
We're going to have
one Dan is going

00:02:08.026 --> 00:02:09.400
to talk about a
little bit later,

00:02:09.400 --> 00:02:12.970
and David is going to talk about
how they've used Dart to make

00:02:12.970 --> 00:02:14.480
their applications great.

00:02:14.480 --> 00:02:16.260
But something that's
common between these

00:02:16.260 --> 00:02:19.510
is they're actually all
using the same widgets.

00:02:19.510 --> 00:02:22.770
And it allows our applications
to get a lot of velocity

00:02:22.770 --> 00:02:25.402
so they can all get these
wonderful reviews that they can

00:02:25.402 --> 00:02:27.360
get feedback from their
users that they're just

00:02:27.360 --> 00:02:28.526
delighted to use it.

00:02:28.526 --> 00:02:29.900
And it's something
that we really

00:02:29.900 --> 00:02:32.640
strive for in our applications.

00:02:32.640 --> 00:02:34.930
But we've heard from our
external developments

00:02:34.930 --> 00:02:38.720
that UI development can
still feel like this for you.

00:02:38.720 --> 00:02:39.720
It's a little slow.

00:02:39.720 --> 00:02:42.720
You don't really want to have
to write that common button.

00:02:42.720 --> 00:02:46.030
You don't have to want to write
that common tab component.

00:02:46.030 --> 00:02:50.750
You just want to have to work
on the application logic that's

00:02:50.750 --> 00:02:54.514
special to your app that will
make your users delighted,

00:02:54.514 --> 00:02:55.930
and you don't
really have to worry

00:02:55.930 --> 00:02:57.770
about all this other stuff.

00:02:57.770 --> 00:03:00.130
And Dart does a pretty good
job with the core libraries

00:03:00.130 --> 00:03:03.590
that let you get up and
running really, really quickly.

00:03:03.590 --> 00:03:07.410
But we want the development
to feel like this,

00:03:07.410 --> 00:03:10.400
like you're in a rocket ship.

00:03:10.400 --> 00:03:13.340
And this is the way that
development inside of Google

00:03:13.340 --> 00:03:14.660
feels like.

00:03:14.660 --> 00:03:18.150
You can really concentrate on
your application and your logic

00:03:18.150 --> 00:03:20.380
to delight your
users and make sure

00:03:20.380 --> 00:03:22.300
that you're doing
really great stuff

00:03:22.300 --> 00:03:26.020
rather than worrying about
some of this more simple stuff.

00:03:26.020 --> 00:03:27.690
But we've heard from
you that there's

00:03:27.690 --> 00:03:30.200
a piece missing, that
there's something that's

00:03:30.200 --> 00:03:33.040
keeping you guys from making
these wonderful applications

00:03:33.040 --> 00:03:36.740
yourself and making it hard
to get those wonderful reviews

00:03:36.740 --> 00:03:39.060
that we saw.

00:03:39.060 --> 00:03:44.130
So today, we announced
Angular Dart Components,

00:03:44.130 --> 00:03:47.506
production-quality
widgets for everyone.

00:03:47.506 --> 00:03:50.314
[APPLAUSE]

00:03:54.200 --> 00:03:56.220
Now, today, we're just
giving you a preview

00:03:56.220 --> 00:03:57.540
of what you'll come to see.

00:03:57.540 --> 00:04:00.970
We've got some kinks to work
out still for a general release.

00:04:00.970 --> 00:04:04.470
But we really want to get you
excited about using the widgets

00:04:04.470 --> 00:04:06.886
and allow you to get some of
these wonderful reviews, some

00:04:06.886 --> 00:04:09.980
of these wonderful
applications for you yourself.

00:04:09.980 --> 00:04:12.740
Now, this is not just
a solitary effort.

00:04:12.740 --> 00:04:15.880
There's not just a team of five
people at Google doing this.

00:04:15.880 --> 00:04:17.850
There's actually
hundreds of Googlers

00:04:17.850 --> 00:04:19.620
that have contributed
to these widgets.

00:04:19.620 --> 00:04:21.410
Many of them are
in this room today,

00:04:21.410 --> 00:04:24.660
but there's many, many more
across the entire world

00:04:24.660 --> 00:04:26.720
contributing code
and making sure

00:04:26.720 --> 00:04:28.940
that they're production-quality
and they work well

00:04:28.940 --> 00:04:32.030
for their users and
for their applications.

00:04:32.030 --> 00:04:34.780
And we get many more
bug requests from them,

00:04:34.780 --> 00:04:37.580
too, to validate that
they're working correctly.

00:04:37.580 --> 00:04:40.700
And we're very excited to
bring you into our community,

00:04:40.700 --> 00:04:43.430
to have you use these
components and help us

00:04:43.430 --> 00:04:45.200
and to make them
better so that you

00:04:45.200 --> 00:04:48.970
can get the wonderful
usefulness out of them.

00:04:48.970 --> 00:04:53.210
So today, I really wanted to
talk about three key principles

00:04:53.210 --> 00:04:55.370
that our infrastructure
team works on

00:04:55.370 --> 00:04:59.160
and everything that we work
with, widgets specifically.

00:04:59.160 --> 00:05:03.085
And that's velocity,
usability, and efficiency.

00:05:03.085 --> 00:05:05.710
And [? Ferhat ?] [? and Maton ?]
already talked to you a little

00:05:05.710 --> 00:05:08.482
bit about this on how we
do it with Angular itself,

00:05:08.482 --> 00:05:10.440
but I'm going to talk to
you about how we do it

00:05:10.440 --> 00:05:12.490
in our widgets.

00:05:12.490 --> 00:05:18.010
First, velocity-- letting you
concentrate on your product.

00:05:18.010 --> 00:05:22.010
You don't have to worry
about the widget itself.

00:05:22.010 --> 00:05:25.790
We provide a set of material
design core widgets written

00:05:25.790 --> 00:05:29.200
in Angular Dart for you
so that you can quickly

00:05:29.200 --> 00:05:33.540
work on the application logic
that is important to you.

00:05:33.540 --> 00:05:36.495
There's over 100 widgets that
we have internally at Google,

00:05:36.495 --> 00:05:38.120
and we're going to
show you some today.

00:05:38.120 --> 00:05:40.570
It was actually just published
before I came up here,

00:05:40.570 --> 00:05:41.980
and you can take a look.

00:05:41.980 --> 00:05:44.025
And many of the ones that
you see on the screen,

00:05:44.025 --> 00:05:45.275
they're going to be available.

00:05:48.070 --> 00:05:49.570
This isn't ready
to be released yet,

00:05:49.570 --> 00:05:51.960
but eventually, we're going
to give you a gallery.

00:05:51.960 --> 00:05:55.140
Internally to Google,
we have a gallery

00:05:55.140 --> 00:05:58.040
that actually allows our
developers to quickly see

00:05:58.040 --> 00:05:59.480
what widgets are available.

00:05:59.480 --> 00:06:03.060
It gives them documentation
about how to use the widget,

00:06:03.060 --> 00:06:05.310
and also gives them
examples so they

00:06:05.310 --> 00:06:09.840
can see how the developer
meant the widget to be used.

00:06:09.840 --> 00:06:13.140
It allows us to
quickly and easily see

00:06:13.140 --> 00:06:16.430
what's possible with the widget
and also how we could quickly

00:06:16.430 --> 00:06:18.314
get those widgets
into our production

00:06:18.314 --> 00:06:19.355
and into our application.

00:06:22.062 --> 00:06:23.770
Something else that
we use a lot within--

00:06:23.770 --> 00:06:27.040
and this isn't quite ready for
release yet, but we'll see it

00:06:27.040 --> 00:06:33.670
soon-- is that we use SaaS
a lot in our components.

00:06:33.670 --> 00:06:36.670
It isn't just that the
components have SaaS.

00:06:36.670 --> 00:06:40.160
We actually provide
mixins and variables

00:06:40.160 --> 00:06:43.640
so that you can have the
material to design language

00:06:43.640 --> 00:06:48.210
within your component so that
you can have your CSS be very

00:06:48.210 --> 00:06:50.000
semantic, and you
can semantically

00:06:50.000 --> 00:06:52.500
say what you were meaning to do.

00:06:52.500 --> 00:06:54.840
This is valuable for what
we have within Google,

00:06:54.840 --> 00:06:58.720
because no longer do we
have just variables mixed

00:06:58.720 --> 00:07:00.410
in throughout our CSS.

00:07:00.410 --> 00:07:03.920
Instead, it's very easy
to make our CSS readable,

00:07:03.920 --> 00:07:06.590
and we can figure out exactly
what the designer meant

00:07:06.590 --> 00:07:09.050
for the component and also
what the developer meant

00:07:09.050 --> 00:07:10.420
when they were implementing it.

00:07:10.420 --> 00:07:13.490
So instead of having all
these random variables

00:07:13.490 --> 00:07:16.170
for material shadow,
now we can just

00:07:16.170 --> 00:07:19.020
say we want this component
to have material shadow,

00:07:19.020 --> 00:07:21.441
and it automatically
gets it, and it's clear

00:07:21.441 --> 00:07:23.440
that that's what the
developer was trying to do.

00:07:23.440 --> 00:07:28.300
You're not copying and pasting
these values from somewhere.

00:07:28.300 --> 00:07:30.540
Now, [? Maton ?]
already explained

00:07:30.540 --> 00:07:32.870
how Angular is bringing
you page objects

00:07:32.870 --> 00:07:35.620
if you want to use them to
make your testing easier.

00:07:35.620 --> 00:07:38.680
We're also going to provide
page objects for the component

00:07:38.680 --> 00:07:39.750
itself.

00:07:39.750 --> 00:07:42.660
And this makes it that much
easier for you to write tests

00:07:42.660 --> 00:07:44.510
when you use the component.

00:07:44.510 --> 00:07:47.800
You actually get the logic
and its very simple interface

00:07:47.800 --> 00:07:49.840
to start testing the
component instead

00:07:49.840 --> 00:07:52.010
of having to write all
this code on a component

00:07:52.010 --> 00:07:55.430
that you didn't even write
yourself just to test it.

00:07:55.430 --> 00:07:59.170
So in this example, we see that
we have the material input page

00:07:59.170 --> 00:08:01.660
object, and we can just
have simple methods

00:08:01.660 --> 00:08:05.440
to interact with it, like
being able to type values

00:08:05.440 --> 00:08:07.300
into the input and to
be able to see what

00:08:07.300 --> 00:08:08.765
the value of that input is.

00:08:11.940 --> 00:08:14.980
Usability-- we
want the components

00:08:14.980 --> 00:08:17.650
to be usable for
both our developers,

00:08:17.650 --> 00:08:20.890
but also for our users.

00:08:20.890 --> 00:08:23.460
Accessibility is for everybody.

00:08:23.460 --> 00:08:25.990
It's not just for a
certain set of users.

00:08:25.990 --> 00:08:28.840
If your UIs are accessible,
they make them easier

00:08:28.840 --> 00:08:33.040
to use for everybody-- me,
you, my dad, everybody.

00:08:36.340 --> 00:08:42.450
And we actually gave a
preview of this to our GDEs,

00:08:42.450 --> 00:08:45.470
and we asked them what they
thought about these components.

00:08:45.470 --> 00:08:47.017
And you can just
take my word for it

00:08:47.017 --> 00:08:48.850
that we think that our
APIs are pretty nice,

00:08:48.850 --> 00:08:51.480
but I wanted to give you some
quotes for them about what they

00:08:51.480 --> 00:08:52.940
thought.

00:08:52.940 --> 00:08:56.330
Monty, who couldn't be with us
today, he said that coding them

00:08:56.330 --> 00:08:58.110
has a great feel.

00:08:58.110 --> 00:09:00.290
They have syntactic brevity.

00:09:00.290 --> 00:09:04.670
They seem lighter and
better-integrated into my app.

00:09:04.670 --> 00:09:06.520
Faisal, who is here
today and is going

00:09:06.520 --> 00:09:11.860
to give a presentation
later, he said yes, yes, yes.

00:09:11.860 --> 00:09:13.330
I love this.

00:09:13.330 --> 00:09:15.670
Super easy to configure.

00:09:15.670 --> 00:09:21.080
This is the kind of reactions
that we want from all of you.

00:09:21.080 --> 00:09:22.060
So how did we do this?

00:09:22.060 --> 00:09:23.470
How does it look like?

00:09:23.470 --> 00:09:25.180
Well, one thing is
we want these widgets

00:09:25.180 --> 00:09:28.690
to look like idiomatic HTML.

00:09:28.690 --> 00:09:31.825
If you notice, there's these
three values right here

00:09:31.825 --> 00:09:33.470
are actually doing
all the same thing.

00:09:33.470 --> 00:09:36.100
But the first one looks
like a very-- just

00:09:36.100 --> 00:09:38.250
like a standard HTML
element that you

00:09:38.250 --> 00:09:39.611
might find in your browser.

00:09:39.611 --> 00:09:41.860
You can just quickly say
that this button is disabled,

00:09:41.860 --> 00:09:43.860
and it will be disabled.

00:09:43.860 --> 00:09:47.460
The second one works, too, if
you want to pass it the string.

00:09:47.460 --> 00:09:50.150
And the third one is if you
actually need a binding for it.

00:09:50.150 --> 00:09:53.370
So this allows it to be dynamic.

00:09:53.370 --> 00:09:55.520
This actually does save a
little bit of performance

00:09:55.520 --> 00:09:58.002
also, because in the first
two, you know that it's static.

00:09:58.002 --> 00:09:59.710
You know that it's
never going to change,

00:09:59.710 --> 00:10:01.200
so it's a little bit faster.

00:10:01.200 --> 00:10:03.600
And then the third one will
give you that dynamic nature

00:10:03.600 --> 00:10:04.600
that you're looking for.

00:10:16.662 --> 00:10:17.370
Sorry about that.

00:10:20.010 --> 00:10:23.950
We also work very, very closely
with the Angular Dart team.

00:10:23.950 --> 00:10:27.150
I'm in their office pretty
much once a week-- they

00:10:27.150 --> 00:10:29.490
can attest to this--
bugging them all the time.

00:10:29.490 --> 00:10:32.980
And we want to make sure that
the components are idiomatic

00:10:32.980 --> 00:10:37.140
Angular Dart, that it's the
Angular that you would expect

00:10:37.140 --> 00:10:39.016
to write in your
own applications

00:10:39.016 --> 00:10:40.640
that the Angular team
would like to see

00:10:40.640 --> 00:10:43.080
written for your applications.

00:10:43.080 --> 00:10:45.510
Notice that his outputs,
like you would expect

00:10:45.510 --> 00:10:49.690
with the events that you come
to love or hate from Angular,

00:10:49.690 --> 00:10:54.090
and that it uses the standard
forms library, like NG Model,

00:10:54.090 --> 00:10:58.859
so that it just works well
with the rest of Angular.

00:10:58.859 --> 00:11:00.400
Another thing that
we want to provide

00:11:00.400 --> 00:11:04.060
is we want to make it really
easy to use our models.

00:11:04.060 --> 00:11:08.150
So in each of these
widgets, they're

00:11:08.150 --> 00:11:13.930
all backed by the same model,
the selection model class.

00:11:13.930 --> 00:11:16.660
And while it would
make it easy to switch

00:11:16.660 --> 00:11:19.560
the widgets if you needed to,
that doesn't happen very often.

00:11:19.560 --> 00:11:23.390
The real benefit of this is
that you can learn an API once.

00:11:23.390 --> 00:11:26.550
You can learn the
selection model API once,

00:11:26.550 --> 00:11:29.590
and then you can use it over
and over again, very quickly,

00:11:29.590 --> 00:11:32.630
in tons of different
widgets so that you're not

00:11:32.630 --> 00:11:35.420
learning a different model
for every single widget

00:11:35.420 --> 00:11:36.190
you want to use.

00:11:38.850 --> 00:11:42.340
And it has
accessibility built in.

00:11:42.340 --> 00:11:45.490
We really wanted to make
it easy for you guys

00:11:45.490 --> 00:11:50.070
to have accessible applications
that work well for your users.

00:11:50.070 --> 00:11:52.340
In this example--
you'll see this

00:11:52.340 --> 00:11:55.670
throughout all of our widgets--
we have this trigger pattern

00:11:55.670 --> 00:11:57.580
instead of just
listening for click.

00:11:57.580 --> 00:12:00.930
We want the user to be able to
interact with it with a mouse

00:12:00.930 --> 00:12:03.920
or with the keyboard, whatever
way they see fit, whatever

00:12:03.920 --> 00:12:05.600
works better for them.

00:12:05.600 --> 00:12:08.600
So we have this trigger
pattern that we see.

00:12:08.600 --> 00:12:15.760
Also, things such as buttons
and tabs and inputs--

00:12:15.760 --> 00:12:17.760
when you have it disabled,
it will automatically

00:12:17.760 --> 00:12:20.450
set the [? RE ?]
properties for you

00:12:20.450 --> 00:12:22.030
so that it makes
sense in the browser

00:12:22.030 --> 00:12:24.097
too if you're still
getting accessibility.

00:12:24.097 --> 00:12:25.680
So when you say
something is disabled,

00:12:25.680 --> 00:12:29.520
then it's going to work
right for accessibility also.

00:12:29.520 --> 00:12:31.520
Now, while we can't cover
all of your use cases,

00:12:31.520 --> 00:12:33.680
we hope that we make it
that much easier to make

00:12:33.680 --> 00:12:35.040
your application accessible.

00:12:37.710 --> 00:12:41.660
Efficiency, the last
topic-- performance

00:12:41.660 --> 00:12:44.780
is the feature in
our applications.

00:12:44.780 --> 00:12:46.950
Performance is very
important to us.

00:12:46.950 --> 00:12:48.610
I think you've
heard a lot about it

00:12:48.610 --> 00:12:51.510
today, about how we're trying
to make everything very, very

00:12:51.510 --> 00:12:53.980
performant and keep
everything fast.

00:12:53.980 --> 00:12:56.580
Our users love it when
our applications are fast.

00:12:56.580 --> 00:12:58.580
It's the thing that
they want the most.

00:12:58.580 --> 00:13:01.010
It's the thing that they
care about the most.

00:13:01.010 --> 00:13:05.050
And our widgets need to
be able to support that.

00:13:05.050 --> 00:13:09.090
One way that we do this is we
actually have latency tests,

00:13:09.090 --> 00:13:10.980
like [? Ferhat ?]
was telling you

00:13:10.980 --> 00:13:13.680
earlier today, that
are run on our widgets

00:13:13.680 --> 00:13:16.640
every single code change.

00:13:16.640 --> 00:13:19.656
And it allows us to
build graphs like this.

00:13:19.656 --> 00:13:22.970
This is a real graph that
came from one of our widgets.

00:13:22.970 --> 00:13:25.130
And if you notice
the top line, that

00:13:25.130 --> 00:13:26.490
is the cold start performance.

00:13:26.490 --> 00:13:28.390
That's the performance
the very first time

00:13:28.390 --> 00:13:30.830
that it's initialized
on the page.

00:13:30.830 --> 00:13:33.050
Down here, that is
the warm performance.

00:13:33.050 --> 00:13:35.334
That's what happens
for every other time

00:13:35.334 --> 00:13:36.250
that it's initialized.

00:13:36.250 --> 00:13:37.120
It's a lot faster.

00:13:37.120 --> 00:13:39.840
This is because that's going
through a JS cold loop.

00:13:39.840 --> 00:13:42.307
It's a good amount slower,
and it's pretty fast

00:13:42.307 --> 00:13:43.890
when you've actually
rendered it once.

00:13:43.890 --> 00:13:45.950
But we want to make
sure both numbers are

00:13:45.950 --> 00:13:48.280
very good and very performant.

00:13:48.280 --> 00:13:52.310
So you can notice there's
a pretty big hump here

00:13:52.310 --> 00:13:54.520
in this benchmark.

00:13:54.520 --> 00:13:55.490
So what happened?

00:13:55.490 --> 00:13:57.350
Well, my coworker
Zach, he actually

00:13:57.350 --> 00:13:59.760
came through, sent in a CL.

00:13:59.760 --> 00:14:02.980
He was changing some of
the, I think, accessibility

00:14:02.980 --> 00:14:03.940
on something.

00:14:03.940 --> 00:14:06.200
And all of a sudden, I
got an email that night

00:14:06.200 --> 00:14:08.690
that said that there was
a performance regression.

00:14:08.690 --> 00:14:11.670
So I emailed Zack, and I said,
hey, did you expect this?

00:14:11.670 --> 00:14:13.500
Was this what you
were expecting?

00:14:13.500 --> 00:14:17.360
Did you expect it to take
about seven milliseconds longer

00:14:17.360 --> 00:14:18.974
for this simple action?

00:14:18.974 --> 00:14:20.640
He said no, I didn't
really think it was

00:14:20.640 --> 00:14:21.620
going to be any performance.

00:14:21.620 --> 00:14:23.610
I thought it was going
be performance neutral.

00:14:23.610 --> 00:14:25.072
I'll go investigate it.

00:14:25.072 --> 00:14:26.530
So he took a look,
and it turns out

00:14:26.530 --> 00:14:28.630
that the API call that
he was calling was more

00:14:28.630 --> 00:14:30.210
expensive than he imagined.

00:14:30.210 --> 00:14:32.240
And he switched it
with a different one.

00:14:32.240 --> 00:14:34.839
And you can notice that the
latency graph came back down.

00:14:34.839 --> 00:14:36.630
And he actually made
it a little bit faster

00:14:36.630 --> 00:14:38.910
than it was before he started.

00:14:38.910 --> 00:14:42.590
So we can quickly see
when things go wrong

00:14:42.590 --> 00:14:45.120
when things are
hurting our performance

00:14:45.120 --> 00:14:47.080
or making it better.

00:14:47.080 --> 00:14:50.980
Also, when Chrome drops,
our graphs change, too.

00:14:50.980 --> 00:14:53.320
So we've had
instances where we've

00:14:53.320 --> 00:14:55.190
had performance
regressions on our widgets,

00:14:55.190 --> 00:14:57.920
and we've actually went to the
Chrome team, and we said, hey,

00:14:57.920 --> 00:14:59.404
did you expect this?

00:14:59.404 --> 00:15:01.570
Was this regression
something that you

00:15:01.570 --> 00:15:03.250
wanted within your browser?

00:15:03.250 --> 00:15:05.170
And they said, oh, let
me take a look at it.

00:15:05.170 --> 00:15:07.378
And they came back, and two
versions later in Chrome,

00:15:07.378 --> 00:15:08.960
we actually had it fixed.

00:15:08.960 --> 00:15:14.450
So we can actually catch
other problems, too.

00:15:14.450 --> 00:15:16.220
Another problem that
we're trying to solve

00:15:16.220 --> 00:15:18.230
is layout thrashing.

00:15:18.230 --> 00:15:21.540
So naively in your
application, it's

00:15:21.540 --> 00:15:27.410
pretty easy to read a value
from the DOM, change that value,

00:15:27.410 --> 00:15:28.930
and then reread it.

00:15:28.930 --> 00:15:30.440
And you might think
that this is OK.

00:15:30.440 --> 00:15:32.190
But in fact, what
you're doing is

00:15:32.190 --> 00:15:35.720
you're causing the browser
to reflow and to re-render

00:15:35.720 --> 00:15:36.660
the page.

00:15:36.660 --> 00:15:37.920
This can be pretty expensive.

00:15:37.920 --> 00:15:40.710
It can be 15 milliseconds
or longer just

00:15:40.710 --> 00:15:43.910
between these two method calls.

00:15:43.910 --> 00:15:47.450
And that's something we want to
try to avoid as much as we can.

00:15:47.450 --> 00:15:49.635
So within your own
application-- or

00:15:49.635 --> 00:15:51.010
within your own
simple widget, it

00:15:51.010 --> 00:15:54.022
might be easy to move all the
reads before all the writes,

00:15:54.022 --> 00:15:55.980
and make sure that it
happens in the right way,

00:15:55.980 --> 00:15:57.880
and that you don't
trigger reflow.

00:15:57.880 --> 00:15:59.880
But that's really
hard to do when

00:15:59.880 --> 00:16:02.011
you're talking about the
very large applications

00:16:02.011 --> 00:16:03.010
that we build at Google.

00:16:03.010 --> 00:16:04.600
You can't control
all the source code

00:16:04.600 --> 00:16:08.510
to make sure that the DOM is
coordinated in the right way.

00:16:08.510 --> 00:16:10.170
So we actually have a service.

00:16:10.170 --> 00:16:11.560
It's the DOM service.

00:16:11.560 --> 00:16:13.310
And this is in the preview.

00:16:13.310 --> 00:16:16.240
It allows you to say that
you want to schedule a read

00:16:16.240 --> 00:16:20.520
or schedule a write and make
sure that the reads happen

00:16:20.520 --> 00:16:23.770
for the mutate so that we don't
get that-- we don't trigger

00:16:23.770 --> 00:16:25.650
that reflow, that
we're not paying

00:16:25.650 --> 00:16:28.410
the price for the layout.

00:16:28.410 --> 00:16:30.220
We use this in all our widgets.

00:16:30.220 --> 00:16:31.970
And you can use them
in your applications,

00:16:31.970 --> 00:16:34.550
too, to make sure that your
render speed is really, really

00:16:34.550 --> 00:16:35.050
performant.

00:16:38.380 --> 00:16:41.000
Lastly for performance, I want
to talk about change detection

00:16:41.000 --> 00:16:41.699
optimization.

00:16:41.699 --> 00:16:43.240
So [? Ferhat ?]
already talked to you

00:16:43.240 --> 00:16:45.870
about how change
detection can make

00:16:45.870 --> 00:16:47.450
your application pretty slow.

00:16:47.450 --> 00:16:49.100
If you have a naive
application, it's

00:16:49.100 --> 00:16:51.649
pretty easy to just
use change detection,

00:16:51.649 --> 00:16:53.190
and everything will
work fast enough,

00:16:53.190 --> 00:16:55.250
and you won't really
notice any slowdown.

00:16:55.250 --> 00:16:57.910
But when we're talking about
the size of the application

00:16:57.910 --> 00:17:00.650
that we build at
Google, change detection

00:17:00.650 --> 00:17:02.930
starts becoming a
problem really quickly.

00:17:02.930 --> 00:17:06.058
And our components
actually help you with this

00:17:06.058 --> 00:17:06.849
as much as you can.

00:17:06.849 --> 00:17:09.800
We enable you to
do better things

00:17:09.800 --> 00:17:11.640
for your change detection.

00:17:11.640 --> 00:17:13.250
And we do that in two ways.

00:17:13.250 --> 00:17:15.230
One way is that if we
have anything that's

00:17:15.230 --> 00:17:18.569
off the screen-- anything
that the user isn't actually

00:17:18.569 --> 00:17:21.099
seeing right now, but we
need it in our application--

00:17:21.099 --> 00:17:24.200
think of a tab.

00:17:24.200 --> 00:17:26.140
If you have five
tabs on your screen,

00:17:26.140 --> 00:17:27.859
you're only showing
the content of one,

00:17:27.859 --> 00:17:30.040
and the other four
aren't being shown.

00:17:30.040 --> 00:17:33.710
But naively today, if you
just build tabs really simply,

00:17:33.710 --> 00:17:36.421
all of those tabs are going
to be in your change detection

00:17:36.421 --> 00:17:36.920
tree.

00:17:36.920 --> 00:17:39.590
They're all going to be
part of your application.

00:17:39.590 --> 00:17:42.350
What we do is we
allow you to mark

00:17:42.350 --> 00:17:44.720
that the tabs-- that
this part of the code

00:17:44.720 --> 00:17:47.390
may not be on the screen
to the user right now.

00:17:47.390 --> 00:17:50.280
It allows us to remove it
from the change detection tree

00:17:50.280 --> 00:17:54.590
and keep your application
just a little bit faster.

00:17:54.590 --> 00:17:57.890
The other thing that we provide
is that the widgets themselves

00:17:57.890 --> 00:18:04.420
enable on push, and they
will soon enable set state.

00:18:04.420 --> 00:18:07.640
This allows you to keep
your application fast.

00:18:07.640 --> 00:18:10.260
Because if you want to use
these cool new features,

00:18:10.260 --> 00:18:12.940
everything in your
sub-tree, if you

00:18:12.940 --> 00:18:16.510
want to make a component
on push or use set state,

00:18:16.510 --> 00:18:19.860
everything needs to
support that capability.

00:18:19.860 --> 00:18:22.610
So the components
won't keep you behind.

00:18:22.610 --> 00:18:25.760
They do support on push
today, and they'll soon

00:18:25.760 --> 00:18:27.540
support set state.

00:18:27.540 --> 00:18:30.620
So it allows you to really
build these fast applications

00:18:30.620 --> 00:18:31.691
if you wish.

00:18:31.691 --> 00:18:33.940
If you just want to use the
standard change detection,

00:18:33.940 --> 00:18:34.810
that works, too.

00:18:34.810 --> 00:18:36.184
Everything will just work fine.

00:18:39.340 --> 00:18:43.750
So again, I want to thank you
from all the people at Google.

00:18:43.750 --> 00:18:46.170
This is really a
labor of love for us.

00:18:46.170 --> 00:18:49.310
There is, like I said, hundreds
engineers worked into this.

00:18:49.310 --> 00:18:50.579
We all love these components.

00:18:50.579 --> 00:18:53.120
I have people that work on these
components that really don't

00:18:53.120 --> 00:18:55.203
even want to do their day
job, because they really

00:18:55.203 --> 00:18:57.330
love working on the
components itself.

00:18:57.330 --> 00:19:01.630
So I hope that you guys will
get a lot of use out of it.

00:19:01.630 --> 00:19:03.540
Next year, I want
to see great reviews

00:19:03.540 --> 00:19:05.260
that we saw for
our applications,

00:19:05.260 --> 00:19:08.100
I want to start seeing
them for your applications.

00:19:08.100 --> 00:19:10.897
So go out and start
building some great apps

00:19:10.897 --> 00:19:12.980
so that we can have some
wonderful stories to tell

00:19:12.980 --> 00:19:14.240
next year.

00:19:14.240 --> 00:19:15.010
Thank you.

00:19:15.010 --> 00:19:16.590
[APPLAUSE]

