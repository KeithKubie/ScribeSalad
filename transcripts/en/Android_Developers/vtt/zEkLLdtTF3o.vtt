WEBVTT
Kind: captions
Language: en

00:00:04.160 --> 00:00:04.810
ANKUR KOTWAL: Hi everyone.

00:00:04.810 --> 00:00:09.320
Welcome to Android Developer
Lab+ for the 15th of November.

00:00:09.320 --> 00:00:13.110
So we had a bit of a
break last week.

00:00:13.110 --> 00:00:14.470
But we're back this week.

00:00:14.470 --> 00:00:18.330
And it's been a mad busy week.

00:00:18.330 --> 00:00:20.760
Android 4.2 is released.

00:00:20.760 --> 00:00:24.760
Today's Hangout actually is all
based around Android 4.2

00:00:24.760 --> 00:00:27.570
and what that means
to developers.

00:00:27.570 --> 00:00:29.370
I'm Ankur Kotwal
and I'm joining

00:00:29.370 --> 00:00:31.460
from the Sydney office.

00:00:31.460 --> 00:00:33.940
And I'm joined by my
colleague Tony.

00:00:33.940 --> 00:00:36.180
TONY CHAN: Hi everyone.

00:00:36.180 --> 00:00:38.490
ANKUR KOTWAL: So Tony is joining
us from Hong Kong.

00:00:41.020 --> 00:00:46.975
Well, let's get started with
this week's topic.

00:00:51.420 --> 00:00:55.410
And it is Android 4.2 which
is also Jellybean.

00:00:55.410 --> 00:00:58.130
So usually we start these
presentations with news.

00:00:58.130 --> 00:01:03.360
But we have so much news that
the news became the topic for

00:01:03.360 --> 00:01:06.270
the presentation itself.

00:01:06.270 --> 00:01:06.640
All right.

00:01:06.640 --> 00:01:10.940
So, Android 4.2 was released
a day before yesterday, for

00:01:10.940 --> 00:01:14.100
those people that are
in Australia.

00:01:14.100 --> 00:01:14.790
Time differences--

00:01:14.790 --> 00:01:16.300
it could have been yesterday
for you, depending

00:01:16.300 --> 00:01:18.010
on where you are.

00:01:18.010 --> 00:01:21.050
So Android 4.2 is known
as Jellybean.

00:01:21.050 --> 00:01:25.840
The Google managed Nexus devices
are starting to get

00:01:25.840 --> 00:01:28.540
OTAs, or Over the Air updates.

00:01:28.540 --> 00:01:32.870
So that includes the Google
provided Galaxy Nexuses, as

00:01:32.870 --> 00:01:36.450
well as our current generation
of Nexus devices, the Nexus 4,

00:01:36.450 --> 00:01:38.720
the Nexus 7, and the Nexus 10.

00:01:38.720 --> 00:01:41.490
And for those of you that were
lucky enough to get through

00:01:41.490 --> 00:01:45.310
with the pre-orders, you'll
get to try it out on your

00:01:45.310 --> 00:01:48.800
Nexus 4s and your Nexus
10s very soon.

00:01:48.800 --> 00:01:50.460
So that's really great.

00:01:50.460 --> 00:01:52.060
And I'm sure there's
a lot of people

00:01:52.060 --> 00:01:53.590
looking forward to that.

00:01:53.590 --> 00:01:56.030
One thing I wanted to point out,
however, is that we have

00:01:56.030 --> 00:02:01.810
this site where you can download
Nexus factory images.

00:02:01.810 --> 00:02:05.020
So a lot of people actually use
this as a way to shortcut

00:02:05.020 --> 00:02:07.080
the process and update sooner.

00:02:07.080 --> 00:02:09.280
But the reason I wanted to point
it out is really for our

00:02:09.280 --> 00:02:10.160
developer community.

00:02:10.160 --> 00:02:13.420
Because one thing that I found
very useful to do, is

00:02:13.420 --> 00:02:18.430
occasionally if I want to go in
and test my apps on older

00:02:18.430 --> 00:02:19.650
releases of Android--

00:02:19.650 --> 00:02:24.390
like let's say Gingerbread, or
even Ice Cream Sandwich--

00:02:24.390 --> 00:02:27.160
you can go to this site and
download those factory images

00:02:27.160 --> 00:02:29.700
and roll back your developer
devices.

00:02:29.700 --> 00:02:33.660
So that's a good way to have a
single physical device but

00:02:33.660 --> 00:02:38.310
test across multiple versions
of the Android platform.

00:02:38.310 --> 00:02:41.225
So keep it in mind as part of
your developer's toolbox.

00:02:43.750 --> 00:02:45.380
So Android 4.2--

00:02:45.380 --> 00:02:46.830
it is called Jellybean.

00:02:46.830 --> 00:02:50.370
Internally the version code
that we have is actually

00:02:50.370 --> 00:02:52.670
called Jellybean MR1.

00:02:52.670 --> 00:02:55.000
And it is API level 17.

00:02:55.000 --> 00:03:01.120
Now the reason I'm mentioning
that we have a static define

00:03:01.120 --> 00:03:04.710
for Jellybean MR1 is because you
may have some code in the

00:03:04.710 --> 00:03:06.840
your apps that you want
to version gate.

00:03:06.840 --> 00:03:08.760
Now typically we don't--

00:03:08.760 --> 00:03:11.430
it's not necessarily good
practice to version gate your

00:03:11.430 --> 00:03:14.210
code, but there are times
that you need to, right?

00:03:14.210 --> 00:03:19.630
So if you're version gating
against this question, it's

00:03:19.630 --> 00:03:20.880
android.os.build
.versioncodes.jellybeanmr1.

00:03:25.590 --> 00:03:29.565
So one of the things that many
developers we've encouraged in

00:03:29.565 --> 00:03:33.640
the past on ADL+ to do is to
update your apps so you're

00:03:33.640 --> 00:03:36.510
targeting the latest
version of the SDK.

00:03:36.510 --> 00:03:41.500
And if you go back to our first
ADL+, we talked about

00:03:41.500 --> 00:03:43.790
the Android manifest XML file.

00:03:43.790 --> 00:03:47.010
And really we dived quite
deep into that.

00:03:47.010 --> 00:03:49.510
But one of the things we covered
was how you update

00:03:49.510 --> 00:03:52.350
your apps so that you're
targeting the latest SDK.

00:03:52.350 --> 00:03:57.540
And that is SDK version 17 So
in your user's SDK flag in

00:03:57.540 --> 00:04:01.110
your Android manifest
file, you would just

00:04:01.110 --> 00:04:03.100
change that to 17.

00:04:03.100 --> 00:04:05.610
Now there are obviously good
reasons to do this.

00:04:05.610 --> 00:04:09.890
Often we enable things in newer
versions of the SDK that

00:04:09.890 --> 00:04:11.840
aren't available in
older versions.

00:04:11.840 --> 00:04:17.029
So for example, if you're
running an old app and it's

00:04:17.029 --> 00:04:20.719
not version 11 or upwards, then
you won't get the hollow

00:04:20.719 --> 00:04:23.910
theme on devices that
support hollow.

00:04:23.910 --> 00:04:26.740
So it's always a good idea,
and in general is good

00:04:26.740 --> 00:04:28.970
practice, to always
target your SDK

00:04:28.970 --> 00:04:31.200
to the latest version.

00:04:31.200 --> 00:04:36.760
You should use the minimum SDK
version-- or min SDK version--

00:04:36.760 --> 00:04:41.540
attribute to specify how far
back you want to support.

00:04:41.540 --> 00:04:43.560
And of course there's a whole
bunch of development tools,

00:04:43.560 --> 00:04:47.870
like Lint, that'll help protect
you from invoking code

00:04:47.870 --> 00:04:52.500
that isn't supported on those
minimum SDK versions.

00:04:52.500 --> 00:04:57.580
So you should go ahead into
that for Jellybean MR1.

00:04:57.580 --> 00:05:00.300
But there are some caveats.

00:05:00.300 --> 00:05:04.950
So in API 17, if you target
API 17, there are some

00:05:04.950 --> 00:05:08.040
behavioral changes that we've
introduced to the platform.

00:05:08.040 --> 00:05:10.620
So for example, content
providers, now when you

00:05:10.620 --> 00:05:15.640
declare them, the default value
for the Android export

00:05:15.640 --> 00:05:18.170
attribute is actually false.

00:05:18.170 --> 00:05:22.100
So keep that in mind when you
update to these latest

00:05:22.100 --> 00:05:24.490
versions of SDKs.

00:05:24.490 --> 00:05:26.420
We occasionally make
changes like this.

00:05:26.420 --> 00:05:28.690
And this is actually quite
well documented on

00:05:28.690 --> 00:05:30.590
developer.android.com.

00:05:30.590 --> 00:05:32.550
But here's a summary anyway.

00:05:32.550 --> 00:05:35.750
The other thing we've done
now is when you request a

00:05:35.750 --> 00:05:38.930
permission
access_coarse_location and you

00:05:38.930 --> 00:05:42.470
don't specify
access_find_location, the

00:05:42.470 --> 00:05:46.410
accuracy that you get back off
that location will always be

00:05:46.410 --> 00:05:48.890
around the city block.

00:05:48.890 --> 00:05:53.160
So in the past, even if you
didn't request find_locations,

00:05:53.160 --> 00:05:54.610
there were times when
your accuracy

00:05:54.610 --> 00:05:56.120
could have been higher.

00:05:56.120 --> 00:05:59.520
The accuracy now will always be
coarse if you haven't asked

00:05:59.520 --> 00:06:00.880
for find_locations.

00:06:00.880 --> 00:06:03.100
And it's really just making
sure that we're consistent

00:06:03.100 --> 00:06:06.650
with the permission
you're requesting.

00:06:06.650 --> 00:06:10.190
The other gotchas or changes
that you should look out for

00:06:10.190 --> 00:06:14.240
are that there's some settings
in the settings.system class

00:06:14.240 --> 00:06:17.660
that either are read-only,
or have been moved to

00:06:17.660 --> 00:06:19.290
settings.global.

00:06:19.290 --> 00:06:21.530
Now there's some good reasons
for us doing this.

00:06:21.530 --> 00:06:25.080
An example of that is airplane
mode, the toggling of an

00:06:25.080 --> 00:06:26.960
airplane mode.

00:06:26.960 --> 00:06:30.580
Android 4.2 now has multi-user
capabilities.

00:06:30.580 --> 00:06:33.660
So you can have multiple
users on your Nexus 7

00:06:33.660 --> 00:06:35.270
or your Nexus 10.

00:06:35.270 --> 00:06:39.485
And so if you share your tablet
with a family member or

00:06:39.485 --> 00:06:43.420
a friend, they basically have
their own set of applications

00:06:43.420 --> 00:06:47.580
and their own-- and those apps
have their own set of data.

00:06:47.580 --> 00:06:52.120
So some of these settings are
now going to affect users

00:06:52.120 --> 00:06:54.710
across the system itself.

00:06:54.710 --> 00:06:56.810
So they have moved.

00:06:56.810 --> 00:07:00.540
Now with those settings, whether
you target API 17 or

00:07:00.540 --> 00:07:05.680
not, on devices that are API
17 or higher, those things

00:07:05.680 --> 00:07:06.820
will have moved.

00:07:06.820 --> 00:07:10.790
So we kind of know [INAUDIBLE]
basically if you are accessing

00:07:10.790 --> 00:07:14.010
those settings and trying
to change them.

00:07:14.010 --> 00:07:17.110
Your app won't just start
crashing, but it'll basically

00:07:17.110 --> 00:07:19.020
have no effect if you tried
to write to one

00:07:19.020 --> 00:07:21.030
of these older settings.

00:07:21.030 --> 00:07:22.290
So keep that in mind.

00:07:22.290 --> 00:07:22.830
[INAUDIBLE]

00:07:22.830 --> 00:07:26.290
Android 4.2, some of these
settings have changed.

00:07:26.290 --> 00:07:29.260
And you really should follow up
in the documentation as to

00:07:29.260 --> 00:07:31.870
which ones.

00:07:31.870 --> 00:07:34.640
So we've introduced something
new that we call Daydream.

00:07:34.640 --> 00:07:39.380
And Daydream is really neat for
users because it's like an

00:07:39.380 --> 00:07:42.460
interactive screensaver that
automatically kicks in when

00:07:42.460 --> 00:07:46.965
the user has put their device
in a dock, or the device is

00:07:46.965 --> 00:07:48.950
idling on a charger.

00:07:48.950 --> 00:07:51.490
And the reason that it's really
nice is that it's

00:07:51.490 --> 00:07:54.730
another way for you to engage
with your users.

00:07:54.730 --> 00:07:57.390
It's another bit of
interactivity that you can add

00:07:57.390 --> 00:08:01.150
for your app that drives
users to your content.

00:08:01.150 --> 00:08:04.060
So we've obviously got your
typical activities that users

00:08:04.060 --> 00:08:05.490
interact with it there.

00:08:05.490 --> 00:08:09.540
We've had widgets that allow you
to again have some dynamic

00:08:09.540 --> 00:08:12.290
content on users'
home screens.

00:08:12.290 --> 00:08:15.070
We've had notifications that
allow you to remind users

00:08:15.070 --> 00:08:17.320
that, hey, something important
has happened.

00:08:17.320 --> 00:08:19.530
And again, it's a way
to engage them.

00:08:19.530 --> 00:08:22.110
Or you've used it for things
like music control so that

00:08:22.110 --> 00:08:24.960
users can interact with your
app without having to dive

00:08:24.960 --> 00:08:26.250
into your app.

00:08:26.250 --> 00:08:27.970
Daydream is another alternative
with an

00:08:27.970 --> 00:08:29.310
interactive screensaver mode.

00:08:29.310 --> 00:08:32.179
So the picture that we have
there in the top right hand

00:08:32.179 --> 00:08:34.890
corner is the gallery
screensaver--

00:08:34.890 --> 00:08:36.549
or the picture screensaver.

00:08:36.549 --> 00:08:39.510
And so those pictures there,
although they keep coming up

00:08:39.510 --> 00:08:43.590
on this particular Daydream,
you as a user can actually

00:08:43.590 --> 00:08:44.490
move them around.

00:08:44.490 --> 00:08:49.010
So touching the screen doesn't
boot you out of that Daydream.

00:08:49.010 --> 00:08:51.540
So to implement Daydream,
you have to look at the

00:08:51.540 --> 00:08:53.210
DreamService API.

00:08:53.210 --> 00:08:56.440
And in a lot of ways, utilizing
this is similar to

00:08:56.440 --> 00:08:59.150
building activities
for your apps.

00:08:59.150 --> 00:09:02.390
So you'd call setContentView
after you've

00:09:02.390 --> 00:09:03.680
attached to a window.

00:09:03.680 --> 00:09:06.890
And then there's a set of
overrides that tell you

00:09:06.890 --> 00:09:10.070
basically the state of the
dream-- so onDreamingStarted,

00:09:10.070 --> 00:09:11.840
onDreamingStopped.

00:09:11.840 --> 00:09:15.000
You can also do other things
like call setInteractive to

00:09:15.000 --> 00:09:18.600
say that yes, you have
an interactive dream.

00:09:18.600 --> 00:09:21.650
It can also be a passive dream
where just as soon as the user

00:09:21.650 --> 00:09:25.740
interacts with it, it gets you
out of the screensaver mode.

00:09:25.740 --> 00:09:28.940
And then you can also toggle
things like setScreenBright.

00:09:28.940 --> 00:09:30.770
So some of these Daydreams--

00:09:30.770 --> 00:09:35.010
the clock one is quite a neat
one because it acts like an

00:09:35.010 --> 00:09:35.860
alarm clock.

00:09:35.860 --> 00:09:39.150
It shows you the time, but the
screen is actually quite dim

00:09:39.150 --> 00:09:43.260
and dull so that for users that
have it on their bedside

00:09:43.260 --> 00:09:45.880
tables, you're not illuminating
the whole room

00:09:45.880 --> 00:09:47.160
just with a Daydeam.

00:09:47.160 --> 00:09:49.440
So you have some control
over that.

00:09:49.440 --> 00:09:52.190
Once you've actually started--
you've built your Daydream--

00:09:52.190 --> 00:09:56.680
you need to remember to declare
it in your manifest.

00:09:56.680 --> 00:09:58.190
So you'd have a service.

00:09:58.190 --> 00:10:02.200
And you make sure that you'd
added the intent

00:10:02.200 --> 00:10:04.490
filter for it as well.

00:10:04.490 --> 00:10:07.280
So there's the Daydreams.

00:10:07.280 --> 00:10:09.100
This one I'm really excited
about because it

00:10:09.100 --> 00:10:10.250
has a lot of potential.

00:10:10.250 --> 00:10:15.400
And it's basically that we've
added a second screen of APIs.

00:10:15.400 --> 00:10:20.460
So the Nexus 4 utilizes Miracast
wireless technology

00:10:20.460 --> 00:10:23.900
so that you can actually have an
app running on your device

00:10:23.900 --> 00:10:28.370
but displaying on a second
screen, like a TV, or other

00:10:28.370 --> 00:10:32.580
devices that support the
Miracast standard.

00:10:32.580 --> 00:10:35.560
Now the interesting thing about
this is, you're not just

00:10:35.560 --> 00:10:39.160
limited to mirroring what
is on your device.

00:10:39.160 --> 00:10:42.490
As a developer, you
can write--

00:10:42.490 --> 00:10:47.040
use basically the presentation
class and specify user

00:10:47.040 --> 00:10:50.530
interfaces on that second screen
that aren't the same as

00:10:50.530 --> 00:10:53.940
what you have on your
mobile device.

00:10:53.940 --> 00:10:57.260
So you can have this distinction
between a passive

00:10:57.260 --> 00:11:00.460
experience and an
interactive one.

00:11:00.460 --> 00:11:03.530
So if you're thinking in terms
of games, you might have on

00:11:03.530 --> 00:11:06.790
your device, you might have the
heads up display-- let's

00:11:06.790 --> 00:11:08.140
say it's a racing game--

00:11:08.140 --> 00:11:10.710
you might have the heads up
display or the controls

00:11:10.710 --> 00:11:12.100
visible on the screen.

00:11:12.100 --> 00:11:14.920
But on the second screen, you
may want to ditch those

00:11:14.920 --> 00:11:17.670
because then you can just watch
how the race is going.

00:11:17.670 --> 00:11:19.800
And you may not even show
the same perspective.

00:11:19.800 --> 00:11:22.710
You might have the driver mode
perspective, or first person

00:11:22.710 --> 00:11:25.080
mode on your mobile device.

00:11:25.080 --> 00:11:28.480
On a secondary display, it could
be a more cinematic mode

00:11:28.480 --> 00:11:32.210
that has the camera outside
of the vehicle.

00:11:32.210 --> 00:11:36.510
So anyways, to use this API,
you can use either

00:11:36.510 --> 00:11:41.760
DisplayManager or MediaRouter
classes to detect whether the

00:11:41.760 --> 00:11:44.080
device has connected to a
secondary display-- whether

00:11:44.080 --> 00:11:45.460
there's one available.

00:11:45.460 --> 00:11:48.070
And then you would extend the
presentation class and then

00:11:48.070 --> 00:11:52.240
you'd construct your class,
your extended class, with

00:11:52.240 --> 00:11:54.060
these display objects.

00:11:54.060 --> 00:11:56.260
Now one thing to keep in mind--
and this is really

00:11:56.260 --> 00:11:57.160
important--

00:11:57.160 --> 00:12:02.120
is that more often than not,
the secondary screen will

00:12:02.120 --> 00:12:04.460
actually be a different
resolution and a different

00:12:04.460 --> 00:12:08.020
size to what your mobile
device is.

00:12:08.020 --> 00:12:11.040
So you shouldn't make any
assumptions that your layouts

00:12:11.040 --> 00:12:13.550
need to be the same, even
though they will--

00:12:13.550 --> 00:12:15.120
if you are doing the
mirroring-type

00:12:15.120 --> 00:12:17.080
mode then yeah, sure.

00:12:17.080 --> 00:12:20.080
But if you're building custom
displays for the second

00:12:20.080 --> 00:12:25.520
screen, you need to use the
resources that are attributed

00:12:25.520 --> 00:12:27.460
to that presentation class.

00:12:27.460 --> 00:12:30.790
So within your presentation
class, you call getContext and

00:12:30.790 --> 00:12:32.360
call getResources.

00:12:32.360 --> 00:12:36.220
So that when you load resources
to display--

00:12:36.220 --> 00:12:38.660
so let's say drawables
for example--

00:12:38.660 --> 00:12:42.423
that it's getting them from the
right folders, whether it

00:12:42.423 --> 00:12:47.830
would be XHDPI or HDPI or
even using the [? BP ?]

00:12:47.830 --> 00:12:49.760
smallest-width qualifiers.

00:12:49.760 --> 00:12:52.840
So you need to keep that in mind
when you're working with

00:12:52.840 --> 00:12:58.300
this, that you can have a
different set of resources on

00:12:58.300 --> 00:13:01.930
the secondary display compared
to the primary one.

00:13:01.930 --> 00:13:04.260
So really awesome stuff there.

00:13:04.260 --> 00:13:06.530
I can't wait to see what
comes out of this.

00:13:06.530 --> 00:13:09.060
I'm sure this is just the start
of something really big

00:13:09.060 --> 00:13:12.020
for second screen apps.

00:13:12.020 --> 00:13:14.410
The next one is actually one
of my favorite new features

00:13:14.410 --> 00:13:16.260
which are lock screen widgets.

00:13:16.260 --> 00:13:18.940
And basically what it means is
that, typically, what we've

00:13:18.940 --> 00:13:21.490
had so far on the default
launcher--

00:13:21.490 --> 00:13:23.640
another being some third
party lock screen apps

00:13:23.640 --> 00:13:24.870
that could do this.

00:13:24.870 --> 00:13:29.110
But on the default launcher,
you'd have the time and then

00:13:29.110 --> 00:13:34.960
you'd have the slide to unlock
with the circle to go to

00:13:34.960 --> 00:13:38.160
camera, or unlock, or
even Google now.

00:13:38.160 --> 00:13:41.540
Or you'd have the entry
for your password or

00:13:41.540 --> 00:13:44.480
patent and so on.

00:13:44.480 --> 00:13:48.190
Well now you can actually have
other widgets than just the

00:13:48.190 --> 00:13:49.280
clock there.

00:13:49.280 --> 00:13:51.530
And this is not just
with the--

00:13:51.530 --> 00:13:53.120
this isn't the default
launcher.

00:13:53.120 --> 00:13:54.970
But we've added the
ability for you to

00:13:54.970 --> 00:13:56.960
create your own widgets.

00:13:56.960 --> 00:13:59.170
By default the devices
will come

00:13:59.170 --> 00:14:00.420
with things like calendar--

00:14:04.330 --> 00:14:04.660
TONY CHAN: Gmail--

00:14:04.660 --> 00:14:06.500
ANKUR KOTWAL: --there's also one
other clock widget which

00:14:06.500 --> 00:14:07.530
is actually--

00:14:07.530 --> 00:14:09.770
you can see all your
international clocks.

00:14:09.770 --> 00:14:12.970
But we can't wait to see what
users will-- how they'll

00:14:12.970 --> 00:14:14.190
expand this capability.

00:14:14.190 --> 00:14:17.960
So basically, all you need to
do is have a typical app

00:14:17.960 --> 00:14:20.200
widget that you've always had.

00:14:20.200 --> 00:14:24.262
And you have to add a new
attribute again in the

00:14:24.262 --> 00:14:27.350
manifest where you specify
that the category of this

00:14:27.350 --> 00:14:30.360
particular widget is also
on the home screen.

00:14:30.360 --> 00:14:34.510
So this is an attribute, this
widget category attribute.

00:14:34.510 --> 00:14:37.700
And if you don't have the
attribute there, the default

00:14:37.700 --> 00:14:41.380
value is home screen
But the new value--

00:14:41.380 --> 00:14:44.410
and I mixed this up before-- but
the new value is keyguard,

00:14:44.410 --> 00:14:48.180
so that it shows up on
your lock screen.

00:14:48.180 --> 00:14:50.125
Tony, was there something
you were saying?

00:14:50.125 --> 00:14:50.390
TONY CHAN: Yeah.

00:14:50.390 --> 00:14:52.900
I was adding Gmail.

00:14:52.900 --> 00:14:55.710
We have a widget for
Gmail as well.

00:14:55.710 --> 00:14:56.390
ANKUR KOTWAL: Ah, Gmaill--

00:14:56.390 --> 00:14:58.730
yes, of course.

00:14:58.730 --> 00:15:02.200
I'm not too keen on sharing my
Gmail on my look screen, but

00:15:02.200 --> 00:15:04.240
I'm pretty particular
about security.

00:15:04.240 --> 00:15:08.300
But I can see it would
definitely be convenient.

00:15:08.300 --> 00:15:10.630
So keep in mind as well, by
the way, that when you add

00:15:10.630 --> 00:15:14.780
these widgets you want to add
capabilities in those widgets

00:15:14.780 --> 00:15:18.990
that are still respecting
the privacy of the user.

00:15:18.990 --> 00:15:23.210
From a security point of view,
keep in mind that if somebody

00:15:23.210 --> 00:15:27.700
steals a device that's locked by
a password, that the people

00:15:27.700 --> 00:15:32.670
that have got hold of the
device, they can't add widgets

00:15:32.670 --> 00:15:36.500
to the lock screen without
unlocking the device first.

00:15:36.500 --> 00:15:38.370
We've tried to be particular
there.

00:15:38.370 --> 00:15:41.750
But you know, app developers,
you show whatever

00:15:41.750 --> 00:15:42.900
you want in the view.

00:15:42.900 --> 00:15:45.120
So keep that balance in mind.

00:15:45.120 --> 00:15:48.480
Now it's important that you
specify an initial layout.

00:15:48.480 --> 00:15:50.150
And you do it again with
an attribute called

00:15:50.150 --> 00:15:51.400
initialKeyguardLayout.

00:15:53.910 --> 00:15:56.860
And basically, this is the
initial layout that's shown.

00:15:56.860 --> 00:16:01.020
And then you can update that
layout as you go through.

00:16:01.020 --> 00:16:03.285
So those are lockscreen
widgets.

00:16:03.285 --> 00:16:06.200
[INAUDIBLE] super useful.

00:16:06.200 --> 00:16:08.570
We also added multi-user
support.

00:16:08.570 --> 00:16:09.100
Yeah.

00:16:09.100 --> 00:16:10.170
Finally.

00:16:10.170 --> 00:16:12.660
So that means now we can do
things like tablet sharing

00:16:12.660 --> 00:16:15.610
between family members
or friends.

00:16:15.610 --> 00:16:17.440
And as an app developer, you
actually don't need to do

00:16:17.440 --> 00:16:22.020
anything special to have your
apps work in multi-user mode.

00:16:22.020 --> 00:16:24.260
There are exceptions.

00:16:24.260 --> 00:16:29.635
If you've been bending the rules
and hard-coding pods in

00:16:29.635 --> 00:16:34.640
your apps like /sdcard and
making assumptions around what

00:16:34.640 --> 00:16:38.910
directories to store data in,
you're potentially adding

00:16:38.910 --> 00:16:39.760
security holes.

00:16:39.760 --> 00:16:46.640
Because you could be writing now
data for user 1 in an area

00:16:46.640 --> 00:16:49.590
that's globally visible,
even by user 2.

00:16:49.590 --> 00:16:54.860
So we've always had a set of
methods that gave you access

00:16:54.860 --> 00:16:56.980
to specific storage
directories.

00:16:56.980 --> 00:16:59.980
If you weren't using them
before, please update your

00:16:59.980 --> 00:17:02.650
apps to use them now.

00:17:02.650 --> 00:17:06.650
Because it can be seen as a
potential security risk.

00:17:06.650 --> 00:17:09.540
So on internal storage, you've
got things like getFilesDir,

00:17:09.540 --> 00:17:12.500
getCacheDir, and
openFileOutput.

00:17:12.500 --> 00:17:16.530
But external storage, and often
this is a really cool

00:17:16.530 --> 00:17:19.339
part of it, is the
getExternalFilesDir and

00:17:19.339 --> 00:17:20.589
getExternalStora
gePublicDirectory.

00:17:24.319 --> 00:17:28.500
So yeah-- this is again, it's
totally seamless otherwise to

00:17:28.500 --> 00:17:29.350
developers.

00:17:29.350 --> 00:17:32.140
But, that's on the assumption
that you've been doing the

00:17:32.140 --> 00:17:32.880
right thing.

00:17:32.880 --> 00:17:37.860
So it's worth auditing your
code if you're unsure what

00:17:37.860 --> 00:17:39.110
you've done here.

00:17:41.380 --> 00:17:44.260
And of course, with every
platform release, we have lots

00:17:44.260 --> 00:17:46.500
and lots of other additions.

00:17:46.500 --> 00:17:48.245
So things that we've
added-- right to

00:17:48.245 --> 00:17:51.280
left support in views.

00:17:51.280 --> 00:17:55.420
For text rendering, in your
application, you have to add

00:17:55.420 --> 00:17:57.930
an attribute called
supportRtl.

00:17:57.930 --> 00:17:59.660
And then you have to go
on to find your views

00:17:59.660 --> 00:18:01.950
accordingly as well.

00:18:01.950 --> 00:18:04.560
We've also added something that
developers been asking

00:18:04.560 --> 00:18:07.340
for for a while, which is
called nested fragments.

00:18:07.340 --> 00:18:10.970
So you can now have a fragment
within a fragment.

00:18:10.970 --> 00:18:13.350
To nest them, what you
need do is call this

00:18:13.350 --> 00:18:20.780
getChildFragmentManager, for
when you're doing your

00:18:20.780 --> 00:18:21.780
fragment transaction.

00:18:21.780 --> 00:18:25.140
Then you can see there's some
sample code there that shows

00:18:25.140 --> 00:18:28.330
you that, when we go to do the
transaction, the begin

00:18:28.330 --> 00:18:32.260
transaction is actually called
on getChildFragmentManager.

00:18:32.260 --> 00:18:35.360
And we are adding the
video fragment

00:18:35.360 --> 00:18:36.610
to an existing fragment.

00:18:39.650 --> 00:18:44.010
Renderscript has also seen
some improvements--

00:18:44.010 --> 00:18:48.220
things like script groups,
script intrinsics, and

00:18:48.220 --> 00:18:49.130
Filterscript.

00:18:49.130 --> 00:18:54.060
So grouping your bits of your
code in Renderscript, we

00:18:54.060 --> 00:18:56.480
basically have continued to
improve the performance and

00:18:56.480 --> 00:18:59.690
parallelism of Renderscript
so you get some tremendous

00:18:59.690 --> 00:19:01.010
performance out of it.

00:19:01.010 --> 00:19:03.430
And we've got some new
capabilities there that will

00:19:03.430 --> 00:19:06.860
make it easier for you.

00:19:06.860 --> 00:19:09.430
Of course, now that we have a
new platform released, we also

00:19:09.430 --> 00:19:13.910
have some great updates to
the developer tools.

00:19:13.910 --> 00:19:17.975
So now we have an awesome
improvement to the layout

00:19:17.975 --> 00:19:20.960
editor that we previewed
at Google iO.

00:19:20.960 --> 00:19:25.000
But basically, as you can see
from the screen shots, we have

00:19:25.000 --> 00:19:27.970
this made view open
which which looks

00:19:27.970 --> 00:19:29.740
like a tablet layer.

00:19:29.740 --> 00:19:33.000
And then we've got a bunch of
small thumbnails on the right.

00:19:33.000 --> 00:19:36.780
Those thumbnails are actually
showing previews of that same

00:19:36.780 --> 00:19:40.630
layout on how to be reminded
on different sized screens.

00:19:40.630 --> 00:19:43.350
And we've obviously got some
profiles there for the Nexus

00:19:43.350 --> 00:19:46.800
1, the Nexus S, Galaxy
Nexus, Nexus 7, and

00:19:46.800 --> 00:19:50.070
just 10-inch WXJ tablet.

00:19:50.070 --> 00:19:52.290
Excuse me.

00:19:52.290 --> 00:19:57.660
And as you make changes on your
main editor there, it

00:19:57.660 --> 00:20:00.930
will automatically update the
other layouts to show you in

00:20:00.930 --> 00:20:04.700
real time what those
changes look like.

00:20:04.700 --> 00:20:06.490
So you don't need to toggle
between them.

00:20:06.490 --> 00:20:08.850
You can see all of
them at once now.

00:20:08.850 --> 00:20:11.070
This is really handy
for where you're

00:20:11.070 --> 00:20:13.940
targeting multiple layouts.

00:20:13.940 --> 00:20:16.920
And I hope by now, developers,
that you are targeting

00:20:16.920 --> 00:20:17.790
multiple layouts.

00:20:17.790 --> 00:20:21.050
Because in this day and age, if
you're not doing tablet and

00:20:21.050 --> 00:20:23.050
phone layouts, these are
opportunities that you're

00:20:23.050 --> 00:20:24.300
missing out on.

00:20:27.480 --> 00:20:29.970
Of course, we've added
more Lint rules.

00:20:29.970 --> 00:20:34.320
Lint is probably my favorite
feature in

00:20:34.320 --> 00:20:35.570
the Android SDK tools.

00:20:35.570 --> 00:20:40.090
It finds all sorts of potential
runtime issues, but

00:20:40.090 --> 00:20:41.890
it finds them at compile time.

00:20:41.890 --> 00:20:45.230
So it's really, really useful.

00:20:45.230 --> 00:20:46.960
We've added a bunch of
new rules there.

00:20:46.960 --> 00:20:49.880
And we've also continued to
increase the number of

00:20:49.880 --> 00:20:50.430
templates--

00:20:50.430 --> 00:20:53.590
app templates-- that we
have in the SDK tools.

00:20:53.590 --> 00:20:56.840
So you're not having to write
as much of that boilerplate

00:20:56.840 --> 00:21:00.660
code as you had to
in the past.

00:21:00.660 --> 00:21:01.910
We've added a new UI Automator
Test Framework.

00:21:04.360 --> 00:21:07.210
Basically we have a viewer that
allows you to scan and

00:21:07.210 --> 00:21:09.410
analyze your apps
user interface.

00:21:09.410 --> 00:21:12.680
And then there's this UI
Automator Java library that

00:21:12.680 --> 00:21:14.880
has a set of APIs that
allow you to

00:21:14.880 --> 00:21:16.130
create functional tests.

00:21:18.740 --> 00:21:22.530
Finally, we now have something
that, again, developers have

00:21:22.530 --> 00:21:25.420
been asking for for ages,
which is a one-click SDK

00:21:25.420 --> 00:21:26.630
install package.

00:21:26.630 --> 00:21:28.970
So you can go and download
this one package.

00:21:28.970 --> 00:21:33.650
And it includes the development
environment as

00:21:33.650 --> 00:21:36.020
well as ADT-- the Android
developer tools--

00:21:36.020 --> 00:21:41.760
the SDK tools, as well as an
emulator image, and the APIs

00:21:41.760 --> 00:21:43.870
for the latest version
of Android, which

00:21:43.870 --> 00:21:47.870
of course is 4.2.

00:21:47.870 --> 00:21:51.240
The Android virtual device
creation dialogue has also

00:21:51.240 --> 00:21:53.320
been given a new
lick of paint.

00:21:53.320 --> 00:21:57.540
It's a lot nicer to use now.

00:21:57.540 --> 00:22:01.330
So for those of you that have
gone and created different

00:22:01.330 --> 00:22:05.390
combinations of AVDs to try out
different layouts and so

00:22:05.390 --> 00:22:07.330
on, this is a lot nicer.

00:22:07.330 --> 00:22:11.540
So you can see right off the
bat there that we've added

00:22:11.540 --> 00:22:16.190
things like you being able to
specify cameras there, turning

00:22:16.190 --> 00:22:21.670
on GPU acceleration just with
that Host GPU check box.

00:22:21.670 --> 00:22:23.150
It's a lot nicer,
a lot easier.

00:22:26.270 --> 00:22:32.090
One of the things that we've had
developers come back to us

00:22:32.090 --> 00:22:34.070
and say, hey, I've
got a 4.2 device.

00:22:34.070 --> 00:22:36.030
But I can't find developer
options

00:22:36.030 --> 00:22:39.370
any more in my settings.

00:22:39.370 --> 00:22:43.200
What we're going to be doing, is
we're publishing an app on

00:22:43.200 --> 00:22:48.140
Google Play that enables those
developer options.

00:22:48.140 --> 00:22:51.570
But basically, you can get past
it by going into About

00:22:51.570 --> 00:22:55.900
Tablet or About Phone if
you're on a phone--

00:22:55.900 --> 00:22:58.270
and tapping the build number.

00:22:58.270 --> 00:23:00.300
I think the magic number
of times you need

00:23:00.300 --> 00:23:01.230
to tap it is seven.

00:23:01.230 --> 00:23:03.410
But after you do it two or
three times, it tells you

00:23:03.410 --> 00:23:05.890
things like, you are now four
steps away, three steps, two

00:23:05.890 --> 00:23:07.680
steps, and so on.

00:23:07.680 --> 00:23:09.170
And then it magically appears.

00:23:12.460 --> 00:23:13.660
This screen shot was
put together

00:23:13.660 --> 00:23:15.200
by someone on Google+--

00:23:15.200 --> 00:23:16.450
[? Morrits Tolksdorf ?].

00:23:18.270 --> 00:23:20.140
So thanks for that.

00:23:20.140 --> 00:23:23.710
So that is really just a quick
rundown on all the new

00:23:23.710 --> 00:23:27.490
capabilities of the Android
4.2 platform.

00:23:27.490 --> 00:23:31.020
We're really excited, because I
think there's some great new

00:23:31.020 --> 00:23:33.600
capabilities here that
developers can really take

00:23:33.600 --> 00:23:36.680
advantage to provide unique
and compelling user

00:23:36.680 --> 00:23:38.430
experiences.

00:23:38.430 --> 00:23:42.070
But before we go to Q&amp;A, we
should talk about something

00:23:42.070 --> 00:23:44.560
that we announced over
a month ago.

00:23:44.560 --> 00:23:48.210
It was called ADL+ experiments,
when we talked

00:23:48.210 --> 00:23:50.080
about the connectivity APIs.

00:23:50.080 --> 00:23:52.560
And we'd asked a bunch
of developers--

00:23:52.560 --> 00:23:54.660
well all of you actually--

00:23:54.660 --> 00:24:00.530
to build us something cool to
show us, utilizing those APIs.

00:24:00.530 --> 00:24:02.130
And then we we're going
to discuss it in a

00:24:02.130 --> 00:24:04.800
future episode of ADL+.

00:24:04.800 --> 00:24:07.510
Well unfortunately, we're going
to call that a failed

00:24:07.510 --> 00:24:09.380
experiment.

00:24:09.380 --> 00:24:12.040
We didn't get too much interest
from developers.

00:24:12.040 --> 00:24:16.250
So we're looking at ways on how
we can move forward with

00:24:16.250 --> 00:24:16.840
that program.

00:24:16.840 --> 00:24:19.750
We do think that there's some
real advantages there.

00:24:19.750 --> 00:24:22.800
But we probably need a
different approach.

00:24:22.800 --> 00:24:28.130
So on that note, let's move
to Q&amp;A. We've got a set of

00:24:28.130 --> 00:24:30.511
moderator questions.

00:24:30.511 --> 00:24:32.650
I'll just see who's live.

00:24:35.330 --> 00:24:39.850
We've got Linden
and Marco live.

00:24:39.850 --> 00:24:45.290
So if you guys have questions,
feel free to ask us now.

00:24:45.290 --> 00:24:49.200
And after that we will
go to moderator.

00:24:51.930 --> 00:24:55.550
So Linden has pasted some
questions in the chat.

00:24:55.550 --> 00:24:58.310
Does the support
lib provide the

00:24:58.310 --> 00:25:03.070
getChildFragment manager method?

00:25:03.070 --> 00:25:04.320
I don't know if it's
specifically

00:25:04.320 --> 00:25:05.390
that method, Linden.

00:25:05.390 --> 00:25:09.120
But we've actually added support
for nested fragments

00:25:09.120 --> 00:25:14.950
in the support library,
revision 11.

00:25:14.950 --> 00:25:16.640
I think you might need to--

00:25:16.640 --> 00:25:19.010
I'm not sure whether it's called
exactly the same thing.

00:25:19.010 --> 00:25:22.210
You might have the word
"support" in there somewhere.

00:25:22.210 --> 00:25:23.760
I'll have to just look
it up for you.

00:25:27.580 --> 00:25:27.930
LINDEN: Yeah.

00:25:27.930 --> 00:25:28.610
That's cool.

00:25:28.610 --> 00:25:30.140
Oh I can talk now as well.

00:25:30.140 --> 00:25:31.390
I un-muted.

00:25:34.060 --> 00:25:36.200
Are there any quirks
with that?

00:25:36.200 --> 00:25:40.690
Any known oddities, I
suppose, that you

00:25:40.690 --> 00:25:44.420
guys have seen already?

00:25:44.420 --> 00:25:45.030
Or is it pretty

00:25:45.030 --> 00:25:46.280
straightforward and pretty robust?

00:25:49.150 --> 00:25:49.590
ANKUR KOTWAL: It's pretty

00:25:49.590 --> 00:25:50.960
straightforward, pretty robust.

00:25:50.960 --> 00:25:51.880
The only--

00:25:51.880 --> 00:25:53.140
I wouldn't call this a quirk--

00:25:53.140 --> 00:25:55.430
the only gotcha that you need to
be aware of-- and it's the

00:25:55.430 --> 00:25:57.140
same one that's always
been there--

00:25:57.140 --> 00:26:00.280
is that you don't want to be
mixing support fragments and

00:26:00.280 --> 00:26:01.970
native fragments.

00:26:01.970 --> 00:26:05.530
So in your app, if you're using
fragments, you either

00:26:05.530 --> 00:26:08.510
use support fragments throughout
or you use native

00:26:08.510 --> 00:26:09.720
fragments throughout.

00:26:09.720 --> 00:26:10.765
They are different classes.

00:26:10.765 --> 00:26:13.320
So they don't just-- you can't
just interchange them and

00:26:13.320 --> 00:26:16.370
expect them to work.

00:26:16.370 --> 00:26:17.620
LINDEN: Awesome.

00:26:20.290 --> 00:26:21.825
Tony, sorry mate.

00:26:21.825 --> 00:26:24.480
Were you looking to add
something to that?

00:26:24.480 --> 00:26:25.080
TONY CHAN: No, no.

00:26:25.080 --> 00:26:26.330
It's fine.

00:26:30.510 --> 00:26:31.910
ANKUR KOTWAL: All
right, Marco.

00:26:31.910 --> 00:26:33.450
Did you have any questions
for us?

00:26:36.860 --> 00:26:37.530
MARCO: Yeah.

00:26:37.530 --> 00:26:42.430
I asked if there was any
best practices for

00:26:42.430 --> 00:26:44.380
using nested fragments.

00:26:44.380 --> 00:26:48.420
I wanted to see if they're any
gotchas or anything that we

00:26:48.420 --> 00:26:49.480
should be looking out for?

00:26:49.480 --> 00:26:57.540
Like I noticed that when I had
fragments in a view pager that

00:26:57.540 --> 00:27:00.710
were hosted by another fragment,
I could no longer

00:27:00.710 --> 00:27:02.840
set retaining stints on
the child fragments.

00:27:07.480 --> 00:27:08.790
ANKUR KOTWAL: You could
no longer--

00:27:08.790 --> 00:27:10.980
OK.

00:27:10.980 --> 00:27:12.710
I'm not familiar with
that actually.

00:27:12.710 --> 00:27:15.210
Because it such a new API, I
must admit I haven't had a

00:27:15.210 --> 00:27:17.330
chance to play with the
nested fragments

00:27:17.330 --> 00:27:18.710
in the support library.

00:27:18.710 --> 00:27:21.560
So I don't actually know the
answer for this one off the

00:27:21.560 --> 00:27:23.450
top of my head.

00:27:23.450 --> 00:27:24.750
Tony?

00:27:24.750 --> 00:27:26.240
TONY CHAN: So--

00:27:26.240 --> 00:27:26.990
me neither.

00:27:26.990 --> 00:27:29.490
But I think we are planning--
we were actually just

00:27:29.490 --> 00:27:30.590
talking about is.

00:27:30.590 --> 00:27:36.330
We will have a separate
ADL+ session, actually

00:27:36.330 --> 00:27:42.420
presentations, focusing on
nested fragments, So we will

00:27:42.420 --> 00:27:46.580
get some of our teammates'
feedback and best practice.

00:27:46.580 --> 00:27:52.220
And we will present that
in a more formal

00:27:52.220 --> 00:27:55.500
session in the future.

00:27:55.500 --> 00:27:56.210
MARCO: Awesome.

00:27:56.210 --> 00:27:57.460
Sounds good.

00:28:01.050 --> 00:28:01.530
ANKUR KOTWAL: Sorry.

00:28:01.530 --> 00:28:03.150
Did you have a follow up?

00:28:03.150 --> 00:28:04.220
TONY CHAN: Yeah.

00:28:04.220 --> 00:28:07.060
Let's take a look at some of
the questions asked on the

00:28:07.060 --> 00:28:09.015
moderator maybe.

00:28:09.015 --> 00:28:09.290
ANKUR KOTWAL: Yeah.

00:28:09.290 --> 00:28:10.540
I'll just share the window.

00:28:14.440 --> 00:28:16.830
OK

00:28:16.830 --> 00:28:23.940
TONY CHAN: So the first one is
Android 2.x supports IPSec VPN

00:28:23.940 --> 00:28:24.560
using PSK--

00:28:24.560 --> 00:28:25.810
PAP/MS-CHAP.

00:28:27.830 --> 00:28:33.870
Is But it's not in
4.x anymore.

00:28:33.870 --> 00:28:34.120
Why?

00:28:34.120 --> 00:28:35.570
Is it removed?

00:28:35.570 --> 00:28:41.230
Or is it possible to implement
a VPN client support that--

00:28:41.230 --> 00:28:49.500
So, in terms of API, I don't
think we have PAP and

00:28:49.500 --> 00:28:53.230
CHAP in full API.

00:28:53.230 --> 00:29:02.060
But last I checked in 4.0, we
still have PSK, but not for

00:29:02.060 --> 00:29:04.590
PAP and CHAP configurations.

00:29:04.590 --> 00:29:10.060
So we need to check with the
team, see whether we moved

00:29:10.060 --> 00:29:11.220
these [INAUDIBLE]

00:29:11.220 --> 00:29:15.560
for [INAUDIBLE] reason
or some other reason.

00:29:15.560 --> 00:29:20.940
So I guess next week we
can find the answer

00:29:20.940 --> 00:29:23.080
get back from them.

00:29:27.274 --> 00:29:29.450
ANKUR KOTWAL: OK.

00:29:29.450 --> 00:29:33.380
Is it possible to use
ViewPager.PageTransformer with

00:29:33.380 --> 00:29:38.720
Jake Wharton's NineOldAndroids
library to make the animations

00:29:38.720 --> 00:29:43.520
on page views backward
compatible to OS 2.1?

00:29:43.520 --> 00:29:44.720
So it seems--

00:29:44.720 --> 00:29:46.470
Marco, is this the
same-- is it you?

00:29:46.470 --> 00:29:47.770
Or is this a different Marco?

00:29:47.770 --> 00:29:48.770
MARCO: No.

00:29:48.770 --> 00:29:51.270
It's me.

00:29:51.270 --> 00:29:54.310
ANKUR KOTWAL: I personally
have not used Jake's

00:29:54.310 --> 00:29:56.360
NineOldAndroids library.

00:29:56.360 --> 00:30:02.910
So I'm personally not sure about
the compatibility there.

00:30:02.910 --> 00:30:05.120
I suspect he'll probably
know because the

00:30:05.120 --> 00:30:07.530
ViewPager.PageTransformer
has been around

00:30:07.530 --> 00:30:08.780
for a while, right?

00:30:13.160 --> 00:30:15.565
Tony, is there anything you
wanted to add to that?

00:30:15.565 --> 00:30:18.040
TONY CHAN: Not with
the ViewPager.

00:30:18.040 --> 00:30:19.290
ANKUR KOTWAL: OK.

00:30:22.730 --> 00:30:25.160
So we're not sure, Marco.

00:30:25.160 --> 00:30:26.620
I suspect, try asking Jake.

00:30:26.620 --> 00:30:30.960
We'll try and follow up
in a future episode.

00:30:30.960 --> 00:30:33.605
But we don't know right now.

00:30:33.605 --> 00:30:36.690
MARCO: OK.

00:30:36.690 --> 00:30:41.360
ANKUR KOTWAL: What feature of
Android 4.2 or 3.x, is the

00:30:41.360 --> 00:30:45.530
best for making static pages not
more than five to seven?

00:30:45.530 --> 00:30:48.410
I do not want animation.

00:30:48.410 --> 00:30:51.930
The static pages contains
text of eternal truth.

00:30:51.930 --> 00:30:52.280
OK.

00:30:52.280 --> 00:30:54.650
That's interesting.

00:30:54.650 --> 00:30:59.270
I may change the font style,
but not the text content.

00:30:59.270 --> 00:31:02.700
So I think this person is just
basically saying that they've

00:31:02.700 --> 00:31:06.500
got five to seven
pages of text.

00:31:06.500 --> 00:31:09.990
They don't want to animate
from there.

00:31:09.990 --> 00:31:12.910
So I'm guessing maybe they've
got like a Next button and it

00:31:12.910 --> 00:31:14.880
just refreshes the screen.

00:31:14.880 --> 00:31:17.460
Is that your understanding
of this question, Tony?

00:31:17.460 --> 00:31:20.575
TONY CHAN: Yeah.

00:31:20.575 --> 00:31:23.420
ANKUR KOTWAL: There's lots
of ways you can do this.

00:31:23.420 --> 00:31:28.820
If you're just using a single
text view, you can just listen

00:31:28.820 --> 00:31:32.420
to the button click for whatever
next, or if you've

00:31:32.420 --> 00:31:36.500
got a swipe gesture, and
just update the text

00:31:36.500 --> 00:31:38.430
in your text views.

00:31:38.430 --> 00:31:42.910
Alternatively, you can change
the views that you show.

00:31:42.910 --> 00:31:46.270
So you may not want to
reuse the text view

00:31:46.270 --> 00:31:47.180
for whatever reason.

00:31:47.180 --> 00:31:49.050
And you may have a different
set of text views.

00:31:49.050 --> 00:31:51.360
So you can just hide
the existing

00:31:51.360 --> 00:31:54.310
ones, show these ones.

00:31:54.310 --> 00:31:57.130
You could probably go from
activity to activity and say

00:31:57.130 --> 00:32:02.490
that you explicitly don't want
an activity animation.

00:32:02.490 --> 00:32:04.830
So there's lots of
ways to do this.

00:32:04.830 --> 00:32:09.400
The animations are there to
give a more pleasant user

00:32:09.400 --> 00:32:10.550
experience.

00:32:10.550 --> 00:32:15.390
But if you are after something
that's quite enough frills and

00:32:15.390 --> 00:32:18.920
you just want to change
values, lots of

00:32:18.920 --> 00:32:20.170
different ways to do it.

00:32:23.200 --> 00:32:23.490
All right.

00:32:23.490 --> 00:32:26.480
This was Marco's question around
the best practices when

00:32:26.480 --> 00:32:29.240
nesting fragments within
fragments.

00:32:29.240 --> 00:32:30.710
We're going to get
back to that.

00:32:30.710 --> 00:32:33.320
We'll talk about nested
fragments in the future, in an

00:32:33.320 --> 00:32:34.570
upcoming episode.

00:32:36.330 --> 00:32:39.400
There's a link here to
action quick clock.

00:32:39.400 --> 00:32:40.726
Do you know--

00:32:40.726 --> 00:32:41.976
TONY CHAN: Yeah.

00:32:43.760 --> 00:32:49.750
The quick clock we're referring
to here is in 4.2.

00:32:49.750 --> 00:32:54.075
If you drag the notification
tray down and it's really

00:32:54.075 --> 00:32:55.580
great on top.

00:32:55.580 --> 00:32:58.950
It's really a o'clock
we're talking to.

00:32:58.950 --> 00:33:06.390
So understand Dex mentioned is
not triggering the intent.

00:33:06.390 --> 00:33:10.360
But I just actually tried it
myself with an intent and it

00:33:10.360 --> 00:33:12.950
actually launched my application
properly.

00:33:12.950 --> 00:33:14.305
So it's really that clock.

00:33:14.305 --> 00:33:17.290
When you drag down the
notification tray, it's really

00:33:17.290 --> 00:33:19.370
the one on top.

00:33:22.160 --> 00:33:24.660
So that's the one we were
referring to before.

00:33:24.660 --> 00:33:25.200
ANKUR KOTWAL: OK.

00:33:25.200 --> 00:33:27.370
So, Dex, I don't know
if you're watching.

00:33:27.370 --> 00:33:30.030
But if you still can't
get it to work,

00:33:30.030 --> 00:33:31.660
obviously Tony has a solution.

00:33:31.660 --> 00:33:35.450
So feel free to just reach
out to Tony afterwards.

00:33:35.450 --> 00:33:39.410
And maybe there's something in
your code or your solution

00:33:39.410 --> 00:33:42.740
that doesn't match this.

00:33:42.740 --> 00:33:44.750
When does Android start
supporting the

00:33:44.750 --> 00:33:46.600
Bluetooth IMAP profile?

00:33:46.600 --> 00:33:50.260
I think the great Jellybean
is missing it.

00:33:50.260 --> 00:33:52.390
So we typically don't
talk about--

00:33:52.390 --> 00:33:54.750
we're not able to talk
about features that--

00:33:54.750 --> 00:33:58.980
when we're bringing features
to the platform.

00:33:58.980 --> 00:34:03.380
So the answer is really,
we don't know.

00:34:03.380 --> 00:34:05.910
But it's something that we can
take back to our engineering

00:34:05.910 --> 00:34:08.960
team to say, hey, developers
are asking for it.

00:34:13.179 --> 00:34:17.320
Any highlights on the support
package revision 11?

00:34:17.320 --> 00:34:19.420
So yes.

00:34:19.420 --> 00:34:22.949
And let me just share that
particular window with you.

00:34:25.780 --> 00:34:29.230
So if you just do a Google
search for Android Support

00:34:29.230 --> 00:34:31.570
Library, this is the first
hit you'll get.

00:34:31.570 --> 00:34:35.360
Support package revision 11--
we've got a set of new

00:34:35.360 --> 00:34:36.110
capabilities.

00:34:36.110 --> 00:34:39.060
I already mentioned the
nested fragments.

00:34:39.060 --> 00:34:42.400
There's some classes there for
the ViewPager and some

00:34:42.400 --> 00:34:44.969
accessibility improvements
as well.

00:34:44.969 --> 00:34:47.570
So here's the full
list of them.

00:34:47.570 --> 00:34:52.750
And you can go through them in
detail for the ones that are

00:34:52.750 --> 00:34:54.000
relevant to your app.

00:34:56.659 --> 00:34:57.200
OK.

00:34:57.200 --> 00:35:00.066
Let's go back to
the questions.

00:35:03.550 --> 00:35:05.110
Last one.

00:35:05.110 --> 00:35:08.020
Tony, another VPN one?

00:35:08.020 --> 00:35:09.030
TONY CHAN: Yeah.

00:35:09.030 --> 00:35:11.880
It points to a link.

00:35:11.880 --> 00:35:18.650
So since VPN API is available
in 4.0, can this API help

00:35:18.650 --> 00:35:20.590
making connections?

00:35:20.590 --> 00:35:26.170
Or it is not supporting
this API also?

00:35:26.170 --> 00:35:30.440
So I look at the questions,
and also the APIs.

00:35:30.440 --> 00:35:36.380
The API itself is actually
helping for preparing VPN

00:35:36.380 --> 00:35:39.240
connections.

00:35:39.240 --> 00:35:47.140
I think it actually does
what phone was asking.

00:35:47.140 --> 00:35:52.520
If not, ping me and we can
look into this further.

00:35:52.520 --> 00:35:57.260
I think that 4.0 VPI
does what you ask.

00:35:57.260 --> 00:35:58.380
ANKUR KOTWAL: OK.

00:35:58.380 --> 00:35:59.560
Great.

00:35:59.560 --> 00:36:05.390
Well, that's the full list
of questions for today.

00:36:05.390 --> 00:36:08.310
People that are watching live,
if you have any more

00:36:08.310 --> 00:36:12.890
questions, please post them
either in the thread.

00:36:12.890 --> 00:36:16.060
Or if you're live--

00:36:16.060 --> 00:36:17.250
Linden, Marco--

00:36:17.250 --> 00:36:21.780
if you've got any other
questions, now's your chance.

00:36:24.365 --> 00:36:25.140
LINDEN: Yeah.

00:36:25.140 --> 00:36:26.290
I've got something.

00:36:26.290 --> 00:36:30.540
I'm working on something at
the moment that's the old

00:36:30.540 --> 00:36:33.700
credit card swipe view.

00:36:33.700 --> 00:36:39.930
Now I'd made something similar
earlier this year before I

00:36:39.930 --> 00:36:41.860
knew that Gallery
was deprecated.

00:36:41.860 --> 00:36:46.710
And so I was going to go grab
that code and tweak it a bit.

00:36:46.710 --> 00:36:49.260
And then saw, obviously,
Gallery's deprecated.

00:36:49.260 --> 00:36:55.080
So I'm using the ViewPager
within a ViewPager at the

00:36:55.080 --> 00:36:59.390
moment, because the
outer [? UI ?]

00:36:59.390 --> 00:37:03.730
is in a ViewPager so you can
swipe the whole pages across.

00:37:03.730 --> 00:37:09.960
That's OK, because I can push
on the motion onto the inner

00:37:09.960 --> 00:37:12.100
ViewPager without a problem.

00:37:12.100 --> 00:37:17.210
But I'm also using that set
child clipping false trick to

00:37:17.210 --> 00:37:23.100
show the neighboring items
in that ViewPager.

00:37:23.100 --> 00:37:25.200
Mark, my nephew, has got
a post about it.

00:37:25.200 --> 00:37:27.210
There's a bunch of people that
have done a bit of work about

00:37:27.210 --> 00:37:30.830
it But I'm finding it's
really nasty.

00:37:30.830 --> 00:37:34.920
Because you end up with a
ViewPager that's really not

00:37:34.920 --> 00:37:37.130
the full width of the screen.

00:37:37.130 --> 00:37:39.350
And when you go to the end--

00:37:39.350 --> 00:37:45.090
when you motion to the end--
you're getting that glow pop

00:37:45.090 --> 00:37:50.050
up, not on the edge of the
screen, but halfway in.

00:37:50.050 --> 00:37:51.980
There's also some artifacts
in there.

00:37:51.980 --> 00:37:58.940
If you hold your finger down
slowly do motions--

00:37:58.940 --> 00:38:01.300
I'm just wondering, do you know
if there's a better trick

00:38:01.300 --> 00:38:04.190
out there that no one's
been talking about?

00:38:04.190 --> 00:38:07.210
ANKUR KOTWAL: So let me just
get a better understanding.

00:38:07.210 --> 00:38:10.450
Because this concept of putting
a ViewPager within a

00:38:10.450 --> 00:38:15.030
ViewPager seems like it could
be quite confusing to users.

00:38:15.030 --> 00:38:17.905
Because if you're using--

00:38:17.905 --> 00:38:22.630
in the outer ViewPager, you're
using swipes to swipe through

00:38:22.630 --> 00:38:23.830
the outer ViewPager.

00:38:23.830 --> 00:38:27.810
Then you suddenly end up on a
specific page, off that outer

00:38:27.810 --> 00:38:30.590
ViewPager, that's now consuming
those swipes.

00:38:30.590 --> 00:38:36.020
You've kind of broken the
swipe navigation.

00:38:36.020 --> 00:38:36.420
LINDEN: Yeah.

00:38:36.420 --> 00:38:37.870
I'm aware of that.

00:38:37.870 --> 00:38:40.200
And I've trialed it.

00:38:40.200 --> 00:38:43.560
Really, I think that it
actually tilts the

00:38:43.560 --> 00:38:44.340
[? opposite. ?]

00:38:44.340 --> 00:38:47.850
Because they are all actually
hinting by having the main

00:38:47.850 --> 00:38:50.830
navigation in a ViewPager, and
then you hit a page and

00:38:50.830 --> 00:38:57.060
someone accidentally swipes on
this inner ViewPager, they've

00:38:57.060 --> 00:39:00.480
just found out, really
obviously, that that is its

00:39:00.480 --> 00:39:03.300
own little motion element.

00:39:03.300 --> 00:39:06.400
So in a way, that outer swiping

00:39:06.400 --> 00:39:08.720
hints to swiping anyway.

00:39:08.720 --> 00:39:12.170
And there's plenty of other room
to swipe to get to the

00:39:12.170 --> 00:39:12.830
other pages.

00:39:12.830 --> 00:39:15.796
There's tabs as well, so
they can click on it.

00:39:15.796 --> 00:39:19.120
ANKUR KOTWAL: My personal
preference would be, that you

00:39:19.120 --> 00:39:21.420
wouldn't want to override
the horizontal swipes.

00:39:21.420 --> 00:39:23.650
And Marco said, it's a
conflict of swipes.

00:39:23.650 --> 00:39:25.130
And I agree with that.

00:39:25.130 --> 00:39:28.490
You probably wouldn't want to
override that swiping behavior

00:39:28.490 --> 00:39:31.260
from the outer ViewPager to
suddenly an inner one.

00:39:31.260 --> 00:39:35.310
Other things you could consider,
for that inner

00:39:35.310 --> 00:39:39.560
ViewPager that you have now,
could that, instead of swiping

00:39:39.560 --> 00:39:41.760
horizontally, be a
vertical swipe?

00:39:41.760 --> 00:39:44.790
So horizontally is taking
you across categories.

00:39:44.790 --> 00:39:46.990
And vertically is the
one that-- you said

00:39:46.990 --> 00:39:47.850
credit cards, right?

00:39:47.850 --> 00:39:50.650
So if you've got a set of cards,
instead of having them

00:39:50.650 --> 00:39:54.380
next to one another, you have
them vertically sorted?

00:39:54.380 --> 00:39:58.170
Would that be something
that might be useful?

00:39:58.170 --> 00:40:00.880
LINDEN: That would sort of work
until I go and chuck it

00:40:00.880 --> 00:40:04.270
in a scroll view or something
like that.

00:40:04.270 --> 00:40:07.100
I'm taking an app that's
on iOS and it

00:40:07.100 --> 00:40:09.820
has that swipe mechanism.

00:40:09.820 --> 00:40:15.610
But it's going from a Dashboard
into each section.

00:40:15.610 --> 00:40:19.690
And I'm trying flatten the whole
navigation for Android

00:40:19.690 --> 00:40:24.080
to make it a lot quicker to get
into the app, a lot more

00:40:24.080 --> 00:40:24.870
straightforward.

00:40:24.870 --> 00:40:28.551
And just sort of cutting the
crap, so to speak, which is a

00:40:28.551 --> 00:40:32.720
long Australian past time.

00:40:32.720 --> 00:40:33.040
Yeah.

00:40:33.040 --> 00:40:34.960
It seems to be working.

00:40:34.960 --> 00:40:38.310
I don't think the problem that
I'm seeing is really to do

00:40:38.310 --> 00:40:43.750
with the mix up of
motion itself.

00:40:43.750 --> 00:40:50.810
It's more I think that the
ViewPager is designed to take

00:40:50.810 --> 00:40:53.840
up the full width of the page.

00:40:53.840 --> 00:40:58.390
And because of that, the stuff
that you could do with

00:40:58.390 --> 00:41:03.770
Gallery, in terms of having
multiple items seen side by

00:41:03.770 --> 00:41:10.530
side next to the one that is
currently selected, I'm not

00:41:10.530 --> 00:41:14.940
really seeing a drop in
replacement with ViewPager for

00:41:14.940 --> 00:41:17.606
that kind of functionality.

00:41:17.606 --> 00:41:18.856
ANKUR KOTWAL: Yeah.

00:41:21.220 --> 00:41:25.270
I haven't had to resort to
that clicking trick that

00:41:25.270 --> 00:41:26.690
you've mentioned.

00:41:26.690 --> 00:41:28.420
The one thing I'd ask
is, could you just

00:41:28.420 --> 00:41:30.710
try this for me?

00:41:30.710 --> 00:41:32.940
And I just don't know if there's
a conflict there.

00:41:32.940 --> 00:41:37.510
Could you try having that inner
ViewPager not be nested

00:41:37.510 --> 00:41:40.330
inside another ViewPager, and
just see if those same

00:41:40.330 --> 00:41:43.940
artifacts, whether you're
still seeing them?

00:41:43.940 --> 00:41:46.720
I just don't know whether--

00:41:46.720 --> 00:41:49.270
because you've got a ViewPager
within a ViewPager, I don't

00:41:49.270 --> 00:41:53.932
know if there's issues coming
from that or the fact that

00:41:53.932 --> 00:41:55.775
you're using this clipping
feature.

00:41:55.775 --> 00:41:56.670
LINDEN: Yeah.

00:41:56.670 --> 00:42:01.460
I'll give it a shot breaking
it down and might even jot

00:42:01.460 --> 00:42:04.420
some code out somewhere so if
you get a chance, have a look.

00:42:04.420 --> 00:42:06.388
ANKUR KOTWAL: Sure.

00:42:06.388 --> 00:42:07.870
LINDEN: Awesome.

00:42:07.870 --> 00:42:11.370
MARCO: It just seems that like
from a Android usability point

00:42:11.370 --> 00:42:15.680
of view, your users might
not be expecting that.

00:42:15.680 --> 00:42:21.550
The way that you're using a
ViewPager within a ViewPager,

00:42:21.550 --> 00:42:25.260
I don't think I've seen it in
other apps at the moment.

00:42:25.260 --> 00:42:25.610
LINDEN: Yeah.

00:42:25.610 --> 00:42:28.460
I was very cautious
and aware of that.

00:42:28.460 --> 00:42:29.680
And so I trialed it.

00:42:29.680 --> 00:42:35.100
And to be honest, my finding is
that actually it hints more

00:42:35.100 --> 00:42:41.150
that that ViewPager takes
motion, because people are

00:42:41.150 --> 00:42:45.000
already doing motion
across the screen.

00:42:45.000 --> 00:42:47.570
Otherwise, you'd have a static
page that you're not

00:42:47.570 --> 00:42:49.000
doing motion on.

00:42:49.000 --> 00:42:52.630
And you'd need to have some kind
of hint like, hey, you

00:42:52.630 --> 00:42:54.860
can swipe across this.

00:42:54.860 --> 00:42:58.060
But if they're swiping across
things and then suddenly an

00:42:58.060 --> 00:43:01.170
inner swiper moves by itself
and the whole page doesn't,

00:43:01.170 --> 00:43:02.500
it's actually--

00:43:02.500 --> 00:43:03.520
I reckon honestly--

00:43:03.520 --> 00:43:07.640
it's working a bit
better that way.

00:43:07.640 --> 00:43:09.620
But we'll see what happens.

00:43:09.620 --> 00:43:12.732
The artifacts I don't like
so I've got to find a

00:43:12.732 --> 00:43:13.310
solution for that.

00:43:13.310 --> 00:43:15.720
ANKUR KOTWAL: Actually,
if you could also--

00:43:15.720 --> 00:43:17.920
if you're going to reach out to
me with some code, if you

00:43:17.920 --> 00:43:20.130
could just take some screenshots
or a small video

00:43:20.130 --> 00:43:21.820
or something just to
show the artifacts.

00:43:21.820 --> 00:43:24.750
Or send an APK.

00:43:24.750 --> 00:43:27.400
If it's credit card related
you might not be able

00:43:27.400 --> 00:43:29.730
to send me an APK.

00:43:29.730 --> 00:43:31.170
LINDEN: It's cards.

00:43:31.170 --> 00:43:33.150
I'm just saying the credit card
thing because that's the

00:43:33.150 --> 00:43:37.406
sort of typical widget that
people are saying--

00:43:37.406 --> 00:43:40.410
Google Wallet that kind of stuff
has that kind of swipe

00:43:40.410 --> 00:43:41.660
card thing.

00:43:44.770 --> 00:43:47.440
It's a pretty common thing
in mobiles these days.

00:43:47.440 --> 00:43:50.600
But just the dropping
the gallery,

00:43:50.600 --> 00:43:52.920
for whatever reasons--

00:43:52.920 --> 00:43:55.360
it's got its own problems--

00:43:55.360 --> 00:43:59.070
but really it was able to
provide that functionality

00:43:59.070 --> 00:44:01.206
better [INAUDIBLE].

00:44:01.206 --> 00:44:03.590
ANKUR KOTWAL: And the only
other thing I'll say--

00:44:03.590 --> 00:44:06.220
and I don't want to dwell
on it too much but--

00:44:06.220 --> 00:44:09.110
because you've got this
nesting within a--

00:44:09.110 --> 00:44:12.350
alternatives to that is that
your top level ViewPager could

00:44:12.350 --> 00:44:16.630
instead be a spinner on the
action bar, which obviously

00:44:16.630 --> 00:44:17.970
acts as a drop down.

00:44:17.970 --> 00:44:23.010
Or the sliding drawer really
works well, because you can

00:44:23.010 --> 00:44:26.920
see all of the categories that
have supporting icons as well.

00:44:26.920 --> 00:44:30.210
You could still have the swiping
left to right for the

00:44:30.210 --> 00:44:33.820
card view, but navigating across
categories could be

00:44:33.820 --> 00:44:38.282
done by a spinner or
sliding drawer.

00:44:38.282 --> 00:44:39.736
LINDEN: OK.

00:44:39.736 --> 00:44:40.420
ANKUR KOTWAL: All right.

00:44:40.420 --> 00:44:41.210
Cool.

00:44:41.210 --> 00:44:43.150
Thanks for that.

00:44:43.150 --> 00:44:45.730
I don't see any more questions
on the thread.

00:44:49.260 --> 00:44:49.540
All right.

00:44:49.540 --> 00:44:50.460
Well, thanks for joining.

00:44:50.460 --> 00:44:52.130
And hope it was informative.

00:44:52.130 --> 00:44:54.760
We'll catch you guys
next time.

00:44:54.760 --> 00:44:55.615
MARCO: Thank you.

00:44:55.615 --> 00:44:56.865
ANKUR KOTWAL: See you later.

