WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:04.440
So the goal is to define a faster Fibonacci procedure, fast enough

00:00:04.440 --> 00:00:08.660
to enable us to compute fibonacci 36. To estimate, at least according

00:00:08.660 --> 00:00:12.810
to fibonacci's model, how many rabbits there will be in three years.

00:00:12.810 --> 00:00:14.470
And I'm going to give you a little hint for how to

00:00:14.470 --> 00:00:16.840
do this. So we're going to want a while loop, and the

00:00:16.840 --> 00:00:20.620
loop is going to go up to end, but within the loop you

00:00:20.620 --> 00:00:22.630
are going to need to keep track of two things. You are

00:00:22.630 --> 00:00:26.260
going to need to keep track of the two previous fibonacci numbers.

00:00:26.260 --> 00:00:29.800
And instead of going backwards the recursive definition did, we

00:00:29.800 --> 00:00:32.729
started with our base cases. We started with our base cases

00:00:32.729 --> 00:00:35.990
with zero and one and then we defined every previous case

00:00:35.990 --> 00:00:39.236
by adding the previous two. So to compute this with the

00:00:39.236 --> 00:00:43.740
while loop. If we keep track of the previous two in variables

00:00:43.740 --> 00:00:46.660
then you can compute the next one by adding those. And

00:00:46.660 --> 00:00:49.000
then what you gotta figure out is how to keep

00:00:49.000 --> 00:00:51.810
up-to-date the variables, to know what the previous two are

00:00:51.810 --> 00:00:54.610
each time you go through the loop. So see if you can figure out

00:00:54.610 --> 00:00:57.310
how to define fibonacci yourself. Test it

00:00:57.310 --> 00:00:59.140
on some of the smaller numbers before trying

00:00:59.140 --> 00:01:02.720
it on fibonacci 36. But if you define it this way, you should be able

00:01:02.720 --> 00:01:04.910
to compute fibonacci numbers for much higher

00:01:04.910 --> 00:01:06.920
inputs than we could with our recursive definition.

