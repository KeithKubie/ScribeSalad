WEBVTT
Kind: captions
Language: en

00:00:00.900 --> 00:00:03.030
DAN ALBERT: So mostly
just a quick update

00:00:03.030 --> 00:00:05.550
on what the NDK has gone
through in the last year

00:00:05.550 --> 00:00:07.810
and a little bit forward
looking stuff, as well as

00:00:07.810 --> 00:00:10.440
a tiny bit of advice on the
64-bit transition that's

00:00:10.440 --> 00:00:12.280
coming up.

00:00:12.280 --> 00:00:13.500
That's me, Dan Albert.

00:00:13.500 --> 00:00:16.590
That's where we have our
bug tracker and some wiki

00:00:16.590 --> 00:00:19.030
and some announcements
and stuff.

00:00:19.030 --> 00:00:22.650
So in the last year,
we've done r15 and r16.

00:00:22.650 --> 00:00:25.320
r15 is when we switched over
to the new form of the headers,

00:00:25.320 --> 00:00:29.370
which has the one single
blob of headers that

00:00:29.370 --> 00:00:31.260
are correct for every
API level, instead

00:00:31.260 --> 00:00:34.170
of having a bunch of bug
fixes only in the newest one,

00:00:34.170 --> 00:00:36.360
and the old ones are
just horribly out of date

00:00:36.360 --> 00:00:38.330
and broken.

00:00:38.330 --> 00:00:41.410
r16, that became a requirement,
and we fixed up libc++

00:00:41.410 --> 00:00:42.460
and libandroid support.

00:00:42.460 --> 00:00:45.460
If you were here last year,
or have me talk before,

00:00:45.460 --> 00:00:48.100
you'll know that libc++
was really in a beta state

00:00:48.100 --> 00:00:51.210
in the NDK, because of this
libandroid support that we used

00:00:51.210 --> 00:00:57.117
to back port APIs to back
then, as early as gingerbread.

00:00:57.117 --> 00:00:59.200
We've cleaned all that up,
so this is now actually

00:00:59.200 --> 00:01:01.330
the STL we recommend.

00:01:01.330 --> 00:01:03.380
In r17, it's
actually the default.

00:01:03.380 --> 00:01:07.930
We removed support for ARM5
and the MIPS flavors, which

00:01:07.930 --> 00:01:10.120
is probably a welcome
change for all of you,

00:01:10.120 --> 00:01:14.160
because that's less stuff
that you have to test.

00:01:14.160 --> 00:01:15.980
r17 is in beta right now.

00:01:15.980 --> 00:01:17.750
In theory, stable's
going out tomorrow,

00:01:17.750 --> 00:01:21.710
but I haven't spoken to QA
yet today, so we'll see.

00:01:21.710 --> 00:01:24.880
Defaults to libc++, it
adds the O-MR1 APIs.

00:01:24.880 --> 00:01:26.600
It adds the P APIs.

00:01:26.600 --> 00:01:29.201
More of those landing tomorrow.

00:01:29.201 --> 00:01:34.440
Asan no longer requires
root, which is fantastic.

00:01:34.440 --> 00:01:36.980
You now just have to ship the
shared library in your app,

00:01:36.980 --> 00:01:40.490
and you use this wrap.sh,
which is an O feature,

00:01:40.490 --> 00:01:42.680
to make sure it gets
loaded in your APK.

00:01:42.680 --> 00:01:44.030
LTO now works on Windows.

00:01:44.030 --> 00:01:48.830
I know that was a huge thing
for game developers, so hooray.

00:01:48.830 --> 00:01:53.370
And apparently, we
removed those ABIs again.

00:01:53.370 --> 00:01:57.600
I think that was r17, and
they were deprecated in r16.

00:01:57.600 --> 00:02:00.330
r18, we've been
working on for a while.

00:02:00.330 --> 00:02:02.490
It includes clang-tidy
support, and it also

00:02:02.490 --> 00:02:05.434
removes all the
old crap that we've

00:02:05.434 --> 00:02:07.600
been working on deprecating
for the last few years--

00:02:07.600 --> 00:02:10.020
so GCC, the other STLs.

00:02:10.020 --> 00:02:13.200
Starting with r18, it is
clang, and it is libc++,

00:02:13.200 --> 00:02:15.390
and that is it.

00:02:15.390 --> 00:02:19.500
Far fewer combinations
to test, so everything

00:02:19.500 --> 00:02:20.820
should be much higher quality.

00:02:20.820 --> 00:02:25.570
And it should be less
complications of getting

00:02:25.570 --> 00:02:28.440
all your middleware to match.

00:02:28.440 --> 00:02:31.000
r19, this is going to be
a big change for anyone

00:02:31.000 --> 00:02:33.744
in the room that maintains
their own build system,

00:02:33.744 --> 00:02:35.410
but it should be the
change that you get

00:02:35.410 --> 00:02:37.035
to delete a ton of your code.

00:02:37.035 --> 00:02:38.576
All of the tool
chains are just going

00:02:38.576 --> 00:02:39.640
to be standalone tool chains.

00:02:39.640 --> 00:02:41.260
Android will start working
like a normal cross-compiler,

00:02:41.260 --> 00:02:43.210
where you're just
call clang, you say,

00:02:43.210 --> 00:02:48.010
I'm targeting error 6426, and
it just does the right thing.

00:02:48.010 --> 00:02:50.650
You no longer have to know all
the crazy flags and the paths

00:02:50.650 --> 00:02:53.260
to everything.

00:02:53.260 --> 00:02:55.210
Yeah, clang transition
is complete.

00:02:55.210 --> 00:02:57.040
We are done with
this inside Google.

00:02:57.040 --> 00:02:59.880
All of userspace was clang
in Marsh-- well, most--

00:02:59.880 --> 00:03:02.650
in Marshmallow, all
of it in Nougat,

00:03:02.650 --> 00:03:04.892
most-- some of the
kernels in Oreo.

00:03:04.892 --> 00:03:06.850
It's now-- it was the
default compiler starting

00:03:06.850 --> 00:03:10.730
in NDK r13, which is
a year and a half ago.

00:03:10.730 --> 00:03:12.780
It is the only one
in the next release.

00:03:15.490 --> 00:03:17.990
It's probably less exciting
for this room, but new APIs

00:03:17.990 --> 00:03:18.915
and stuff for libc.

00:03:22.379 --> 00:03:25.320
The clang fortified source
is a security measure

00:03:25.320 --> 00:03:27.350
that maybe people in
this room care about.

00:03:27.350 --> 00:03:29.100
It'll do things like
check buffer overruns

00:03:29.100 --> 00:03:31.375
at both compile time and
some mitigation at runtime.

00:03:34.970 --> 00:03:36.570
Again, P, more APIs.

00:03:39.700 --> 00:03:43.922
CPU profiling, we ship
simpleperf in the NDK.

00:03:43.922 --> 00:03:46.840
It has, for ages, had a
command-line interface,

00:03:46.840 --> 00:03:50.620
but in Studio 3.1, it's got
a UI, which looks like that.

00:03:53.730 --> 00:03:55.700
The command-line tool
itself can spit out

00:03:55.700 --> 00:03:58.340
these flame graphs, which
are really cool, helpful

00:03:58.340 --> 00:04:01.400
for drilling down into what
exactly is going wrong.

00:04:05.870 --> 00:04:09.470
Updates on command-line
tools to O/P. Got

00:04:09.470 --> 00:04:13.820
a whole bunch of new
things in toybox, adb

00:04:13.820 --> 00:04:16.940
has been sped up on USB3.

00:04:16.940 --> 00:04:20.860
And like I said, advice
on the 64-bit transition.

00:04:20.860 --> 00:04:24.010
We're not trying to
create fire drills here.

00:04:24.010 --> 00:04:26.770
It's really for the users.

00:04:26.770 --> 00:04:28.600
They only have to
run one zygote if you

00:04:28.600 --> 00:04:31.610
have a 64-bit-only device.

00:04:31.610 --> 00:04:35.380
If there are any reasons
why you can't hit the 2019

00:04:35.380 --> 00:04:37.030
deadline on that, let us know.

00:04:37.030 --> 00:04:39.279
We do want to know about
that, and we'll work with you

00:04:39.279 --> 00:04:40.360
to try to sort that out.

00:04:43.670 --> 00:04:46.129
The 64-bit transition does
come with some performance

00:04:46.129 --> 00:04:46.670
improvements.

00:04:46.670 --> 00:04:48.378
If Tim is still in
the room, he can maybe

00:04:48.378 --> 00:04:51.652
hint at what they are,
because I don't know numbers.

00:04:51.652 --> 00:04:52.954
TIM: 5% to 10%.

00:04:52.954 --> 00:04:53.870
DAN ALBERT: 5% to 10%.

00:04:53.870 --> 00:04:56.540
OK, that was my guess.

00:04:56.540 --> 00:04:59.475
And that will vary based on
your application, obviously.

00:05:03.750 --> 00:05:07.080
Having the higher
minimum minSdkVersion.

00:05:07.080 --> 00:05:10.380
Since 64-bit only came in L,
you can't target anything lower

00:05:10.380 --> 00:05:13.674
than L, which means you
have newer APIs available.

00:05:13.674 --> 00:05:15.090
You don't need
libandroid support.

00:05:17.850 --> 00:05:20.100
And we are working with
all the engine companies

00:05:20.100 --> 00:05:23.790
to make sure that their
engines are 64-bit ready

00:05:23.790 --> 00:05:25.255
by the time this happens.

00:05:25.255 --> 00:05:26.130
You know who you are.

00:05:29.120 --> 00:05:32.060
And for the actual how to
port your code to 64-bit,

00:05:32.060 --> 00:05:34.190
we found these
three really helpful

00:05:34.190 --> 00:05:35.747
when we were porting
the platform.

00:05:35.747 --> 00:05:37.330
It'll catch the cases
where, oops, you

00:05:37.330 --> 00:05:39.770
were using an int
instead of a pointer,

00:05:39.770 --> 00:05:42.599
or, oops, you're using a
pointer instead of an int.

00:05:42.599 --> 00:05:44.390
Implicit function
declaration is a fun one,

00:05:44.390 --> 00:05:46.880
because C, in all of
its wisdom, decided

00:05:46.880 --> 00:05:48.590
that a function
that was not defined

00:05:48.590 --> 00:05:52.370
had the return type of int,
which is very frustrating when

00:05:52.370 --> 00:05:53.720
it actually returns a pointer.

00:05:53.720 --> 00:05:57.310
Because it will just truncate
it, and your code will explode.

