WEBVTT
Kind: captions
Language: en

00:00:11.840 --> 00:00:14.330
Hi, I'm Glen from the
Android Audio Team.

00:00:14.330 --> 00:00:15.790
I focus on performance.

00:00:15.790 --> 00:00:18.750
And in audio, that means
one thing, latency.

00:00:18.750 --> 00:00:22.170
The time it takes for signal
to pass through a system.

00:00:22.170 --> 00:00:24.920
For example, from the
microphone to your app,

00:00:24.920 --> 00:00:28.860
to the operating system to
an audio codec and amplifier,

00:00:28.860 --> 00:00:31.310
and finally out the speakers.

00:00:31.310 --> 00:00:33.350
Basically there's
a delay in how long

00:00:33.350 --> 00:00:35.700
it takes sound to
move through your CPU

00:00:35.700 --> 00:00:37.970
all the way to your ears.

00:00:37.970 --> 00:00:41.650
As the delay gets bigger,
that's where buffering comes in.

00:00:41.650 --> 00:00:44.150
But I'm getting ahead of myself.

00:00:44.150 --> 00:00:48.280
Let me explain this
using a chicken.

00:00:48.280 --> 00:00:51.550
Imagine a chicken wants
to cross the road.

00:00:51.550 --> 00:00:53.390
It's an unusual road.

00:00:53.390 --> 00:00:55.800
The cars all move
at the same speed

00:00:55.800 --> 00:00:58.310
and they're all the
same distance apart.

00:00:58.310 --> 00:01:01.220
Maybe they're self-driving cars.

00:01:01.220 --> 00:01:02.560
Not too hard for our chicken.

00:01:02.560 --> 00:01:04.950
If she makes a run
for it between cars

00:01:04.950 --> 00:01:06.670
she'll get across safely.

00:01:06.670 --> 00:01:08.520
But there's an obstacle
between the chicken

00:01:08.520 --> 00:01:09.990
and the other side of the road.

00:01:09.990 --> 00:01:12.096
A fence and a gate.

00:01:12.096 --> 00:01:14.300
The colonel manages the gate.

00:01:14.300 --> 00:01:17.020
He has nothing against
chickens crossing the road,

00:01:17.020 --> 00:01:19.640
but he likes to keep
things neat and orderly.

00:01:19.640 --> 00:01:23.330
So the colonel only opens the
gate when he thinks it's time.

00:01:23.330 --> 00:01:25.970
He opens the gate right
after a car passes,

00:01:25.970 --> 00:01:27.710
so there's plenty of
time for the chicken

00:01:27.710 --> 00:01:30.890
to cross the road before
the next car comes.

00:01:30.890 --> 00:01:32.390
The colonel works hard.

00:01:32.390 --> 00:01:34.470
He cares about his job.

00:01:34.470 --> 00:01:36.525
But every once in
awhile the colonel

00:01:36.525 --> 00:01:40.640
gets distracted and doesn't
open the gate on time.

00:01:40.640 --> 00:01:44.958
And if he's too late,
[TIRES SCREECHING]

00:01:44.958 --> 00:01:48.010
[CHICKEN SQUAWKS LOUDLY] uh.

00:01:48.010 --> 00:01:50.170
The chicken in this
analogy is the code

00:01:50.170 --> 00:01:53.360
that processes audio data,
both in your application

00:01:53.360 --> 00:01:55.930
and in the Android
audio framework.

00:01:55.930 --> 00:01:59.140
The overall traffic flow
represents the audio hardware,

00:01:59.140 --> 00:02:02.980
which consumes data at a
constant rate, no matter what.

00:02:02.980 --> 00:02:04.870
Each car is a deadline.

00:02:04.870 --> 00:02:07.430
Feed me data now.

00:02:07.430 --> 00:02:10.150
In Android, audio samples
are grouped together

00:02:10.150 --> 00:02:12.080
into fixed size buffers.

00:02:12.080 --> 00:02:15.050
The space between the
cars is the buffer size.

00:02:15.050 --> 00:02:18.460
You can think of this buffer
size as either samples or time,

00:02:18.460 --> 00:02:20.350
they're equivalent.

00:02:20.350 --> 00:02:22.730
Each time a buffer is
completed, the hardware

00:02:22.730 --> 00:02:25.110
raises an interrupt
request for a handler

00:02:25.110 --> 00:02:27.180
to service the audio hardware.

00:02:27.180 --> 00:02:30.020
I ate that buffer
but I'm still hungry.

00:02:30.020 --> 00:02:32.020
Feed me more data.

00:02:32.020 --> 00:02:34.260
After servicing the
hardware, the handler

00:02:34.260 --> 00:02:37.420
wakes up a task to do
the remaining work.

00:02:37.420 --> 00:02:40.620
Now audio tasks are among
the highest priority

00:02:40.620 --> 00:02:42.620
real time tasks in the system.

00:02:42.620 --> 00:02:45.670
So an audio I/O
completion preempts

00:02:45.670 --> 00:02:50.680
the current unrelated task, and
we run the audio task instead.

00:02:50.680 --> 00:02:53.330
Let's return to our
chicken analogy.

00:02:53.330 --> 00:02:58.070
The colonel with a c is
the Linux kernel with a k.

00:02:58.070 --> 00:03:01.080
The scheduler decides when
the audio code should run

00:03:01.080 --> 00:03:04.300
and the contexts
which makes it so.

00:03:04.300 --> 00:03:06.800
And this unfortunate situation?

00:03:06.800 --> 00:03:09.350
Well, that's what happens
if our code doesn't

00:03:09.350 --> 00:03:11.320
meet the audio
hardware deadline,

00:03:11.320 --> 00:03:14.490
just because the
colonel was distracted.

00:03:14.490 --> 00:03:16.970
If this were video
or UI code, we'd

00:03:16.970 --> 00:03:20.260
say that we just janked
or dropped a frame.

00:03:20.260 --> 00:03:22.630
It looks bad, but it's
not a huge problem

00:03:22.630 --> 00:03:24.620
if it's only occasional.

00:03:24.620 --> 00:03:27.040
But nobody likes it
when you jank audio.

00:03:27.040 --> 00:03:29.770
We call it popcorn,
and it sounds awful.

00:03:29.770 --> 00:03:30.670
Like this.

00:03:30.670 --> 00:03:33.125
[AUDIO PLAYBACK]

00:03:38.197 --> 00:03:39.030
[END AUDIO PLAYBACK]

00:03:39.030 --> 00:03:41.540
If you're a manufacturer
of an Android device,

00:03:41.540 --> 00:03:43.840
and your QA team
hears popcorn, that's

00:03:43.840 --> 00:03:46.470
going to be a hard
problem for you to solve.

00:03:46.470 --> 00:03:49.660
Remember, audio tasks are
among the highest priority

00:03:49.660 --> 00:03:51.530
real time tasks in the system.

00:03:51.530 --> 00:03:54.280
So what could possibly go wrong?

00:03:54.280 --> 00:03:56.100
Well, there are
many things that can

00:03:56.100 --> 00:03:58.500
distract the kernel
with a k from running

00:03:58.500 --> 00:04:00.930
our audio tasks on time.

00:04:00.930 --> 00:04:03.350
For example, a
random kernel module,

00:04:03.350 --> 00:04:06.100
perhaps an unrelated
device driver disables

00:04:06.100 --> 00:04:09.680
interrupts or disables
preemption for too long.

00:04:09.680 --> 00:04:12.630
Either way this kind
of excessive disabling

00:04:12.630 --> 00:04:15.050
will delay the kernel
context switch code

00:04:15.050 --> 00:04:18.256
from switching to the
right audio task on time.

00:04:18.256 --> 00:04:22.150
We use a tool called
systrace to visualize this.

00:04:22.150 --> 00:04:25.530
Here's a real example of
a preemption latency bug.

00:04:25.530 --> 00:04:28.560
The audio rights should
be regular like our cars,

00:04:28.560 --> 00:04:32.140
but zooming in we see that
one audio write actually

00:04:32.140 --> 00:04:35.420
took 130 milliseconds
to complete.

00:04:35.420 --> 00:04:37.790
That's a pop for sure.

00:04:37.790 --> 00:04:40.290
It's like the colonel
with a c distracted

00:04:40.290 --> 00:04:44.170
from opening the gate,
perhaps by a long phone call,

00:04:44.170 --> 00:04:47.900
so that chicken didn't
get released on time.

00:04:47.900 --> 00:04:50.990
What would you do if
this happened to you?

00:04:50.990 --> 00:04:54.320
Well the easiest thing to do
is just bloat up your buffers

00:04:54.320 --> 00:04:55.870
like this puffer fish.

00:04:55.870 --> 00:05:00.020
Just keep increasing the buffer
sizes until the popcorn stops.

00:05:00.020 --> 00:05:03.480
Rather than understanding and
really fixing the root causes,

00:05:03.480 --> 00:05:07.830
I have to admit I've done
this once or twice also.

00:05:07.830 --> 00:05:12.574
So it's pretty tempting to
do it that way, but so wrong.

00:05:12.574 --> 00:05:13.870
Uh-uh.

00:05:13.870 --> 00:05:15.980
I'm not going to do
it that way anymore.

00:05:15.980 --> 00:05:18.910
My job now is to find all
those places in the kernel

00:05:18.910 --> 00:05:22.760
where this happens and fix them.

00:05:22.760 --> 00:05:24.680
If you've ever looked
at the Linux kernel,

00:05:24.680 --> 00:05:26.320
you know how large
and complicated

00:05:26.320 --> 00:05:28.070
a project this might be.

00:05:28.070 --> 00:05:29.950
It involves testing
and reviewing

00:05:29.950 --> 00:05:31.960
and fixing a lot of code.

00:05:31.960 --> 00:05:34.520
Fortunately we're
not doing this alone.

00:05:34.520 --> 00:05:36.890
We're working with our
silicon and device partners

00:05:36.890 --> 00:05:39.210
to fix such bugs.

00:05:39.210 --> 00:05:41.890
This will allow buffer
sizes to be made smaller,

00:05:41.890 --> 00:05:44.740
and reduce total audio latency.

00:05:44.740 --> 00:05:48.130
Together we've made progress
in reducing latency.

00:05:48.130 --> 00:05:52.300
Many audio applications are now
possible that weren't before.

00:05:52.300 --> 00:05:54.030
Check out these
resources to learn

00:05:54.030 --> 00:05:56.870
how you can take advantage
of the improvements already

00:05:56.870 --> 00:05:58.520
available.

00:05:58.520 --> 00:06:01.690
Now there's more to latency
than distracted colonels.

00:06:01.690 --> 00:06:03.430
Look for other
videos in this series

00:06:03.430 --> 00:06:06.130
as we delve into the
root causes of latency,

00:06:06.130 --> 00:06:08.300
what we're doing to
reduce it, and how

00:06:08.300 --> 00:06:10.490
you can take advantage
of improvements

00:06:10.490 --> 00:06:12.800
to write great audio apps.

00:06:12.800 --> 00:06:14.500
Thank you for watching.

00:06:14.500 --> 00:06:17.600
And remember, don't
distract the colonel.

00:06:17.600 --> 00:06:19.400
[SCREAMS]

00:06:19.400 --> 00:06:20.950
[MUSIC PLAYING]

