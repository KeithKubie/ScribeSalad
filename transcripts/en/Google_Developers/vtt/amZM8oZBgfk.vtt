WEBVTT
Kind: captions
Language: en

00:00:01.199 --> 00:00:05.749
&gt;&gt;&gt; Ladies and gentlemen, please welcome Bruno
Oliveira and Adam Powell.

00:00:05.749 --> 00:00:11.540
[ Applause ]
&gt;&gt;Bruno Oliveira: My name is Bruno Oliveira,

00:00:11.540 --> 00:00:14.000
and I work in the Android Developer Relations
team.

00:00:14.000 --> 00:00:17.360
I'm based in South America, and my mission
is to work with developers to get very high-quality

00:00:17.360 --> 00:00:18.660
applications on Google Play.

00:00:18.660 --> 00:00:19.850
&gt;&gt;Adam Powell: And I'm Adam Powell.

00:00:19.850 --> 00:00:22.330
I work in Mountain View, California, on the
Android Framework team.

00:00:22.330 --> 00:00:23.330
&gt;&gt;Bruno Oliveira: All right.

00:00:23.330 --> 00:00:24.330
Thank you very much for coming to our session.

00:00:24.330 --> 00:00:27.740
So we're going to talk about building user
interfaces that work across several platform

00:00:27.740 --> 00:00:28.740
versions.

00:00:28.740 --> 00:00:30.930
So, by the way, if I want to mention this
session on the social media, those are the

00:00:30.930 --> 00:00:31.930
hashtags.

00:00:31.930 --> 00:00:34.110
Before I begin, just a quick show of hands.

00:00:34.110 --> 00:00:36.130
How many of you are developing Android applications?

00:00:36.130 --> 00:00:37.250
Oh, duh.

00:00:37.250 --> 00:00:43.120
How many of you are developing Android applications
that work only on a single platform release,

00:00:43.120 --> 00:00:45.640
say, only for Jelly Bean or only for Ice Cream
Sandwich?

00:00:45.640 --> 00:00:46.640
All right.

00:00:46.640 --> 00:00:47.650
A few of you.

00:00:47.650 --> 00:00:51.080
How many of you are targeting, let's say,
two or three major platform releases.

00:00:51.080 --> 00:00:52.080
Okay.

00:00:52.080 --> 00:00:53.149
That's more of you.

00:00:53.149 --> 00:00:55.270
&gt;&gt;Adam Powell: That's great.

00:00:55.270 --> 00:00:56.920
Hmm, that's really too easy, though.

00:00:56.920 --> 00:00:59.880
Who's developing all the way back to, say,
Cupcake, maybe even earlier.

00:00:59.880 --> 00:01:00.880
Anyone?

00:01:00.880 --> 00:01:01.880
Wow, that's a lot of hands.

00:01:01.880 --> 00:01:02.880
&gt;&gt;Bruno Oliveira: Very nice.

00:01:02.880 --> 00:01:04.150
&gt;&gt;Adam Powell: That's great.

00:01:04.150 --> 00:01:05.539
So why is this important?

00:01:05.539 --> 00:01:07.560
&gt;&gt;Bruno Oliveira: That's a great question.

00:01:07.560 --> 00:01:09.680
Why is this so important?

00:01:09.680 --> 00:01:11.729
Why can't I care only about the latest version
of Android?

00:01:11.729 --> 00:01:14.390
Adam, I don't know, what do you think?

00:01:14.390 --> 00:01:16.909
&gt;&gt;Adam Powell: Maybe there are other versions
out there.

00:01:16.909 --> 00:01:17.909
&gt;&gt;Bruno Oliveira: Others versions?

00:01:17.909 --> 00:01:21.899
Really just show of hands, who has a device
with the latest version of Android.

00:01:21.899 --> 00:01:22.899
Oh, everybody.

00:01:22.899 --> 00:01:24.340
[ Laughter ]
&gt;&gt;Bruno Oliveira: Told you.

00:01:24.340 --> 00:01:26.220
&gt;&gt;Adam Powell: We're set to go.

00:01:26.220 --> 00:01:30.170
&gt;&gt;Bruno Oliveira: Everybody has --
&gt;&gt;Adam Powell: Everybody can go home; right?

00:01:30.170 --> 00:01:34.340
Yeah, I think that we might actually have
a problem with our sampling.

00:01:34.340 --> 00:01:36.700
&gt;&gt;Bruno Oliveira: Our sample is bad you think?

00:01:36.700 --> 00:01:39.049
&gt;&gt;Adam Powell: Well, I think it's biased just
a little bit.

00:01:39.049 --> 00:01:40.560
A little bit different.

00:01:40.560 --> 00:01:41.560
Okay.

00:01:41.560 --> 00:01:44.979
So who has parents running an Ice Cream Sandwich
or newer device.

00:01:44.979 --> 00:01:45.979
Anyone?

00:01:45.979 --> 00:01:46.979
Oh, wow.

00:01:46.979 --> 00:01:49.520
That's more than I expected, actually.

00:01:49.520 --> 00:01:50.909
Gingerbread moms, anyone?

00:01:50.909 --> 00:01:51.909
Yes.

00:01:51.909 --> 00:01:53.229
&gt;&gt;Bruno Oliveira: Froyo moms?

00:01:53.229 --> 00:01:54.229
All right.

00:01:54.229 --> 00:01:55.549
&gt;&gt;Adam Powell: Okay.

00:01:55.549 --> 00:01:59.810
&gt;&gt;Bruno Oliveira: So why can't I care only
about the latest version of Android; right?

00:01:59.810 --> 00:02:06.310
So yeah, that's definitely a better sampling
method.

00:02:06.310 --> 00:02:09.879
If you've been developing for Android for
more than one day, chances are you're familiar

00:02:09.879 --> 00:02:11.510
with this particular pie chart; right.

00:02:11.510 --> 00:02:16.390
As you can see, the world is not exactly made
of ice cream out there yet.

00:02:16.390 --> 00:02:21.099
So any application that's seriously considering
targeting most users should work on at least

00:02:21.099 --> 00:02:23.950
Froyo, Gingerbread, Ice Cream Sandwich, and
Jelly Bean.

00:02:23.950 --> 00:02:28.230
But there are developers, and they are among
us, who look at this chart and they are scared.

00:02:28.230 --> 00:02:30.819
And they say that's difficult.

00:02:30.819 --> 00:02:35.750
One thing I learned in the last 48 hours is
that jumping from a moving Zeppelin and landing

00:02:35.750 --> 00:02:37.630
on top of Moscone center is difficult.

00:02:37.630 --> 00:02:38.959
That stuff is easy.

00:02:38.959 --> 00:02:41.540
[ Laughter ]
&gt;&gt;Adam Powell: Right.

00:02:41.540 --> 00:02:43.900
This is actually fairly easy to do by comparison.

00:02:43.900 --> 00:02:48.110
We're going to show you how just to make sure
that your user interface adapts correctly

00:02:48.110 --> 00:02:50.319
across several platform versions.

00:02:50.319 --> 00:02:53.069
It doesn't involve any extreme sports.

00:02:53.069 --> 00:02:54.069
Don't worry.

00:02:54.069 --> 00:02:57.129
&gt;&gt;Bruno Oliveira: For those of you who don't
like pie charts, don't worry.

00:02:57.129 --> 00:03:00.909
As you can see, most of this presentation
is not in fact a pie chart.

00:03:00.909 --> 00:03:02.670
Enough philosophy for now.

00:03:02.670 --> 00:03:07.890
Let's start -- let's talk about some naive
approaches to multiversioning your Android

00:03:07.890 --> 00:03:09.049
user interface.

00:03:09.049 --> 00:03:12.810
It's worth mentioning that most of the approaches
we're going to mention here are all valid

00:03:12.810 --> 00:03:14.340
to some degree.

00:03:14.340 --> 00:03:17.840
And the only -- our point is that they should
not be taken to the extremes that we're going

00:03:17.840 --> 00:03:18.840
to show you.

00:03:18.840 --> 00:03:22.880
So with that warning, let's move on to the
first naive approach.

00:03:22.880 --> 00:03:24.500
Some developers avoid evolution completely.

00:03:24.500 --> 00:03:28.700
They just stick to the good old stuff, forget
anything about the new stuff; right?

00:03:28.700 --> 00:03:32.410
It's already an improvement over what we would
have, say, 60 years ago.

00:03:32.410 --> 00:03:34.310
But then it looks like their app is stuck
inside.

00:03:34.310 --> 00:03:38.090
Because you open that up in Ice Cream Sandwich
and then it just looks exactly like it did

00:03:38.090 --> 00:03:40.450
on Cupcake or almost at least.

00:03:40.450 --> 00:03:44.489
So, be sure, you can say, yeah, but that's
because my app is consistent, consistency

00:03:44.489 --> 00:03:45.550
is important.

00:03:45.550 --> 00:03:48.299
But that's only because it's consistently
obsolete everywhere.

00:03:48.299 --> 00:03:51.160
[ Laughter ]
&gt;&gt;Bruno Oliveira: Needless to say, that's

00:03:51.160 --> 00:03:52.340
not a great idea.

00:03:52.340 --> 00:03:53.700
Evolution is a must.

00:03:53.700 --> 00:03:58.019
Now, there are some -- moving on, there are
some developers that know evolution is a good

00:03:58.019 --> 00:03:59.019
thing.

00:03:59.019 --> 00:04:03.200
But they are somehow fascinated with the concept
of multiple APK and they think that that's

00:04:03.200 --> 00:04:08.139
a solution for everything, so they have one
for APK for Cupcake, one for Eclair, one for

00:04:08.139 --> 00:04:12.629
Froyo, and maybe one for that odd device that
your boss is going to be using.

00:04:12.629 --> 00:04:17.850
But, again, I'm not saying here that multiple
APK is a universally bad approach.

00:04:17.850 --> 00:04:21.970
All I'm saying is it should not be abused
to the point that you have one separate APK

00:04:21.970 --> 00:04:23.520
for each platform version.

00:04:23.520 --> 00:04:24.520
Right, Adam?

00:04:24.520 --> 00:04:25.690
&gt;&gt;Adam Powell: That's right.

00:04:25.690 --> 00:04:28.940
This can really be a workable approach for
handling the divide between, say, Gingerbread

00:04:28.940 --> 00:04:32.890
and Ice Cream Sandwich, where we had a whole
ton of changes in UX, especially when holo

00:04:32.890 --> 00:04:34.320
came into the picture.

00:04:34.320 --> 00:04:37.670
But we really don't recommend getting too
much more granular than that outside of some

00:04:37.670 --> 00:04:38.980
serious edge cases.

00:04:38.980 --> 00:04:43.530
You might consider, like, large versus small
screen if certain business cases allow for

00:04:43.530 --> 00:04:44.530
it.

00:04:44.530 --> 00:04:46.790
But, in general, you want to try and keep
things mostly together.

00:04:46.790 --> 00:04:52.790
&gt;&gt;Bruno Oliveira: Now, some developers know
they should try and have one APK as much as

00:04:52.790 --> 00:04:53.790
possible.

00:04:53.790 --> 00:04:57.100
But they still write fully separate layout
and code for each version of Android.

00:04:57.100 --> 00:05:01.390
While some degree of that is probably okay,
if you have -- if you get to a point where

00:05:01.390 --> 00:05:06.000
you have different layout and code for each
major platform of Android, then you're probably

00:05:06.000 --> 00:05:08.190
making things more complicated than you should.

00:05:08.190 --> 00:05:10.030
So we don't recommend going crazy with this.

00:05:10.030 --> 00:05:12.560
Actually, we don't recommend going crazy at
all in general.

00:05:12.560 --> 00:05:13.560
&gt;&gt;Adam Powell: Right.

00:05:13.560 --> 00:05:17.200
So taken to an extreme, this really isn't
much different than abusing multi-APK.

00:05:17.200 --> 00:05:18.770
You're just cramming everything into the same
package.

00:05:18.770 --> 00:05:23.410
You still have the same level of duplication
in practice that you have to maintain.

00:05:23.410 --> 00:05:26.660
So when you split into separate resources
and code paths for different versions, it's

00:05:26.660 --> 00:05:28.250
important to be really tactical about it.

00:05:28.250 --> 00:05:29.430
So what are some ways that we can do that?

00:05:29.430 --> 00:05:31.229
&gt;&gt;Bruno Oliveira: I'm glad you asked.

00:05:31.229 --> 00:05:33.330
So let's stop (indiscernible).

00:05:33.330 --> 00:05:37.090
So I think at this point, we probably leveled
up to a level 2 multiversioner.

00:05:37.090 --> 00:05:42.330
So let's go over some basic multiversioning
skills.

00:05:42.330 --> 00:05:45.360
There's a pretty common pattern called the
parallel activity pattern.

00:05:45.360 --> 00:05:49.270
It's a quick and easy way to launch a different
activity depending on the platform version.

00:05:49.270 --> 00:05:53.710
In this example here, we're detecting whether
we are running ICS or above.

00:05:53.710 --> 00:05:56.770
If so, we're launching this shiny, cool activity;
right.

00:05:56.770 --> 00:05:59.340
If not, then we're launching this legacy activity.

00:05:59.340 --> 00:06:04.880
Now, this is a good approach when your activity
really, really depends a lot on the newer

00:06:04.880 --> 00:06:08.520
platform features and you want to have a decent
fallback for the other versions.

00:06:08.520 --> 00:06:12.740
Now, this should only be used when you have
to cross a major platform boundary, like pre

00:06:12.740 --> 00:06:13.740
and post ICS.

00:06:13.740 --> 00:06:17.060
Because if you have too many branches there,
things can start getting complicated pretty

00:06:17.060 --> 00:06:18.770
fast.

00:06:18.770 --> 00:06:22.050
Speaking about complications, sometimes when
developers implement a certain feature on

00:06:22.050 --> 00:06:26.720
multiple platform versions, they write separate
classes that are mostly identical code except

00:06:26.720 --> 00:06:28.900
for a few lines.

00:06:28.900 --> 00:06:33.940
Now, this is -- essentially, this gets you
to a situation where it's impossible to simultaneously

00:06:33.940 --> 00:06:36.590
maintain your code and your sanity.

00:06:36.590 --> 00:06:37.950
You have to choose.

00:06:37.950 --> 00:06:41.350
So this is not a good idea.

00:06:41.350 --> 00:06:44.660
Now, there is no shame in using an if.

00:06:44.660 --> 00:06:46.690
An if is a great thing.

00:06:46.690 --> 00:06:47.710
And there is no shame in using it.

00:06:47.710 --> 00:06:50.420
You can do that and still be in good standing
with developer society.

00:06:50.420 --> 00:06:54.750
By the way, if you are worried that those
constants are going to break on the older

00:06:54.750 --> 00:06:58.890
platform versions because there was no such
thing as Gingerbread in Froyo; right?

00:06:58.890 --> 00:07:02.310
So great, that's exactly the sort of thing
that you should worry about.

00:07:02.310 --> 00:07:06.090
But in this case, it's okay, because they
all get compiled to a pure number.

00:07:06.090 --> 00:07:07.470
So it's not going to break in older versions.

00:07:07.470 --> 00:07:12.690
&gt;&gt;Adam Powell: Specifically, these are the
build dot OS SDK versions that you can refer

00:07:12.690 --> 00:07:13.690
to.

00:07:13.690 --> 00:07:14.690
&gt;&gt;Bruno Oliveira: Exactly.

00:07:14.690 --> 00:07:17.780
So our first advice is don't be afraid of
if.

00:07:17.780 --> 00:07:21.110
Our second advice, that said, is be afraid
of if.

00:07:21.110 --> 00:07:26.110
If you suddenly start to see those code branches
get too big, then we probably need a better

00:07:26.110 --> 00:07:27.110
approach; right?

00:07:27.110 --> 00:07:28.110
&gt;&gt;Adam Powell: Mm-hmm.

00:07:28.110 --> 00:07:30.630
&gt;&gt;Bruno Oliveira: This is what we're going
to see next.

00:07:30.630 --> 00:07:34.080
Let's talk about being lazy; right?

00:07:34.080 --> 00:07:36.460
Laziness is probably one of the earliest human
inventions.

00:07:36.460 --> 00:07:37.830
It probably even predates fire.

00:07:37.830 --> 00:07:42.840
Human beings were being lazy long before they
invented anything else.

00:07:42.840 --> 00:07:46.600
All throughout history, it's been a solution
to many of the world's toughest problems.

00:07:46.600 --> 00:07:48.370
So this is one of those cases.

00:07:48.370 --> 00:07:50.160
So we're not going to use laziness itself.

00:07:50.160 --> 00:07:51.670
We're going to use lazy loading.

00:07:51.670 --> 00:07:54.610
Adam, how can we use this kind of laziness
in our favor in this case.

00:07:54.610 --> 00:07:57.960
&gt;&gt;Adam Powell: A couple years ago I wrote
a post for the Android developer's blog that

00:07:57.960 --> 00:08:01.390
sort of details this idea.

00:08:01.390 --> 00:08:06.180
So we start off by defining an abstract class
or interface describing what the application

00:08:06.180 --> 00:08:07.250
wants to do.

00:08:07.250 --> 00:08:11.420
And then we write implementations of that
interface for each platform version that layer

00:08:11.420 --> 00:08:14.450
us on the new functionality as it becomes
available.

00:08:14.450 --> 00:08:19.290
So we can use a simple factoring method or
a similar mechanism to get the right implementation

00:08:19.290 --> 00:08:23.140
for the platform version we're running on
and then the calling code within the app doesn't

00:08:23.140 --> 00:08:27.190
have to care about version differences anymore.

00:08:27.190 --> 00:08:29.340
So here's a simple example.

00:08:29.340 --> 00:08:33.079
We've declared an abstract class that represents
a few higher-level things that our app wants

00:08:33.079 --> 00:08:37.630
to be able to do.

00:08:37.630 --> 00:08:39.840
And then we have this simple base implementation.

00:08:39.840 --> 00:08:42.720
It can do the job even if it's not really
fancy.

00:08:42.720 --> 00:08:44.910
This is our fallback for older devices.

00:08:44.910 --> 00:08:48.340
Sometimes you might just want to drop functionality
that you can't reasonably emulate or back

00:08:48.340 --> 00:08:49.340
port.

00:08:49.340 --> 00:08:52.920
And it's okay if some of these compatibility
implementations just end up being stubs or

00:08:52.920 --> 00:08:56.750
no ops if there's really nothing more reasonable
that you can do.

00:08:56.750 --> 00:09:00.560
But on a later version of the platform, we
can layer on additional -- or additional features

00:09:00.560 --> 00:09:05.400
that enhance the user experience for those
people running on newer versions of Android.

00:09:05.400 --> 00:09:09.700
Note that we're calling back into the super
class implementation over here in our contrived

00:09:09.700 --> 00:09:10.700
example.

00:09:10.700 --> 00:09:14.191
This can be a great way to just layer extra
functionality on your base behavior, reduce

00:09:14.191 --> 00:09:17.650
extra duplication, especially if we're not
just replacing it with something entirely

00:09:17.650 --> 00:09:20.990
new.

00:09:20.990 --> 00:09:24.430
So a simple series of version checks makes
sure that we can construct the right version

00:09:24.430 --> 00:09:25.530
behind the scenes.

00:09:25.530 --> 00:09:29.450
And then the rest of our code can remain ignorant
of any and all version differences.

00:09:29.450 --> 00:09:33.240
And for those of you wondering or anyone who's
gone source-diving in the Android support

00:09:33.240 --> 00:09:36.150
library, this is actually the same tactic
that we use there.

00:09:36.150 --> 00:09:38.610
There's really nothing magic going on in that
library.

00:09:38.610 --> 00:09:42.860
This is how we've written all the compatibility
shims that we've made available so far.

00:09:42.860 --> 00:09:47.390
And you'll notice that this idea of these
really highly focused, isolated cases of layering

00:09:47.390 --> 00:09:51.750
on more advanced functionality when it's available
is present through all of these approaches

00:09:51.750 --> 00:09:54.440
to multiversioning that we're talking about
today.

00:09:54.440 --> 00:09:58.880
If you factor out all of these things into
smaller, more isolated components within your

00:09:58.880 --> 00:10:04.279
app, it stays a whole lot easier to maintain
than trying to use some big overarching approach

00:10:04.279 --> 00:10:07.870
that involves a lot of duplication.

00:10:07.870 --> 00:10:10.490
Okay.

00:10:10.490 --> 00:10:12.410
So enough about laziness for now.

00:10:12.410 --> 00:10:14.770
Let's talk about something that's not so lazy.

00:10:14.770 --> 00:10:18.200
Well, it -- actually, it does a whole lot
of work for you.

00:10:18.200 --> 00:10:22.340
It does let you still be lazy, though.

00:10:22.340 --> 00:10:29.730
So we're, of course, talking about the Android
developer's best friend, the resource system.

00:10:29.730 --> 00:10:33.620
So a great tool for you to be aware of, if
you're not already, is the version qualifier

00:10:33.620 --> 00:10:35.360
for your resource directories.

00:10:35.360 --> 00:10:37.980
The naming scheme looks a lot like this.

00:10:37.980 --> 00:10:43.260
So you can use this to offer alternate versions
of your layouts, your drawables, styles, and

00:10:43.260 --> 00:10:47.580
way more than that, depending on what platform
version the device is currently running.

00:10:47.580 --> 00:10:50.620
But, like everything else that we're talking
about today, it's important to use this in

00:10:50.620 --> 00:10:51.620
moderation.

00:10:51.620 --> 00:10:55.380
Again, if you take it to an extreme, you get
a lot of XML duplication, which is just as

00:10:55.380 --> 00:10:57.240
bad as other code duplication.

00:10:57.240 --> 00:11:00.550
So what are some strategies we can use to
avoid some of that?

00:11:00.550 --> 00:11:04.180
&gt;&gt;Bruno Oliveira: So the first strategy is
using Boolean resources.

00:11:04.180 --> 00:11:08.130
So a Boolean resource is something as simple
as the name implies.

00:11:08.130 --> 00:11:12.029
They're actually tons of fun, because they
can be true, but they can also be false.

00:11:12.029 --> 00:11:14.279
[ Laughter ]
&gt;&gt;Bruno Oliveira: The real point, of course,

00:11:14.279 --> 00:11:15.279
is not being true or false.

00:11:15.279 --> 00:11:20.220
It's that they can be given -- their values
can be given at run time by the resource system.

00:11:20.220 --> 00:11:23.550
So this means that they can actually vary
according to the device configuration, like

00:11:23.550 --> 00:11:26.930
screen size, or in our case, the platform
version.

00:11:26.930 --> 00:11:33.050
So, for example, this is a file called bools.xml,
and it's in the values-V14 directory.

00:11:33.050 --> 00:11:34.670
It's defining two Boolean resources.

00:11:34.670 --> 00:11:37.380
So one of them is called post ICS, and the
other one is called pre-ICS.

00:11:37.380 --> 00:11:44.180
Now, because this is in the values-V14 directory,
these are only going to apply to devices running

00:11:44.180 --> 00:11:46.000
Ice Cream Sandwich or above.

00:11:46.000 --> 00:11:51.990
Now, likewise, we have the bools.xml file
in our unqualified values directory.

00:11:51.990 --> 00:11:55.960
This one has the opposite value, so this is
only going to apply when the device is running

00:11:55.960 --> 00:11:59.490
a version of Android that's prior to Ice Cream
Sandwich.

00:11:59.490 --> 00:12:04.680
Now, of course, you can use Boolean resources
directly like this, using get Boolean; right?

00:12:04.680 --> 00:12:07.779
There is nothing wrong with that, and that
might be useful in some cases.

00:12:07.779 --> 00:12:11.180
But the most interesting thing about Boolean
resources -- and it's not that they can be

00:12:11.180 --> 00:12:15.680
true or false -- is that you can actually
enable or disable components according to

00:12:15.680 --> 00:12:17.600
the platform version, like this.

00:12:17.600 --> 00:12:19.550
For example, app widgets; right?

00:12:19.550 --> 00:12:23.460
So who here has written an app widget?

00:12:23.460 --> 00:12:26.820
Lots of people have written app widgets.

00:12:26.820 --> 00:12:27.860
I did, too.

00:12:27.860 --> 00:12:33.250
So an app widget is essentially just a broadcast
receiver with some special data in it; right?

00:12:33.250 --> 00:12:36.800
So if you have written one, you know it looks
like this.

00:12:36.800 --> 00:12:40.460
The point is, if you do it just like that,
it's going to look the same and behave the

00:12:40.460 --> 00:12:42.370
same for all the platform versions.

00:12:42.370 --> 00:12:47.290
But what if we wanted to provide a different
version for, say, devices running ICS or above?

00:12:47.290 --> 00:12:49.089
&gt;&gt;Adam Powell: Can we use a Boolean resource?

00:12:49.089 --> 00:12:51.160
&gt;&gt;Bruno Oliveira: Yes, we can.

00:12:51.160 --> 00:12:52.400
Glad you asked.

00:12:52.400 --> 00:12:53.400
Exactly.

00:12:53.400 --> 00:12:55.240
So we have to define two app widgets.

00:12:55.240 --> 00:12:57.880
First, let's define the pre-ICS one.

00:12:57.880 --> 00:13:02.130
So for the pre-ICS, we just set Android enabled
to bool/pre-ICS.

00:13:02.130 --> 00:13:07.670
So this means that it's true if and only if
we're running on a pre-ICS device.

00:13:07.670 --> 00:13:11.530
Likewise, we're going to do the same for post
ICS.

00:13:11.530 --> 00:13:15.880
So for my post ICS widget, I set Android enabled
to bool post ICS.

00:13:15.880 --> 00:13:19.610
And that's going to be true if and only if
I'm running on a device that's running ICS

00:13:19.610 --> 00:13:20.710
or above.

00:13:20.710 --> 00:13:24.850
Both widgets, of course, go into my applications
manifest.

00:13:24.850 --> 00:13:28.100
And the magic of this is that the correct
one is going to be automatically activated

00:13:28.100 --> 00:13:31.360
depending on the platform version that you're
running on.

00:13:31.360 --> 00:13:32.910
But that's for app widgets.

00:13:32.910 --> 00:13:37.410
What if you wanted to have a fallback like
that but for an activities user interface.

00:13:37.410 --> 00:13:41.240
In this case, what you need is a UI fallback,
which is a technique that you can use when

00:13:41.240 --> 00:13:45.050
there are certain parts of your layout that
you would like to do differently depending

00:13:45.050 --> 00:13:47.820
on the platform version that you're running
on.

00:13:47.820 --> 00:13:53.000
For example, in this example where we're going
to use this technique to present the new and

00:13:53.000 --> 00:13:55.990
awesome switch widgets on ICS; right?

00:13:55.990 --> 00:14:00.540
And then on the same application, same layout,
we're going to display the good old classic

00:14:00.540 --> 00:14:03.810
check box on the older versions; right?

00:14:03.810 --> 00:14:06.380
So how do we do that?

00:14:06.380 --> 00:14:11.850
Well, we could do that using, like, two separate
layout files.

00:14:11.850 --> 00:14:13.740
Everybody knows how to do that.

00:14:13.740 --> 00:14:15.620
But that would be no fun; right?

00:14:15.620 --> 00:14:19.160
The whole point is to have a single main layout
file and then pull bits and pieces from the

00:14:19.160 --> 00:14:21.180
other files as appropriate.

00:14:21.180 --> 00:14:23.540
Here's what our main layout file would look
like.

00:14:23.540 --> 00:14:27.310
These comments in green are the parts that
don't depend on the platform version, for

00:14:27.310 --> 00:14:28.880
example, that text view; right.

00:14:28.880 --> 00:14:34.210
But for the part that does depend on the platform
version, we're using layout include.

00:14:34.210 --> 00:14:37.230
We're pulling another layout by its ID, but
the desserts ID.

00:14:37.230 --> 00:14:41.250
So this means that we can supply different
versions of that included layout that's going

00:14:41.250 --> 00:14:45.440
to depend on the version that we're running.

00:14:45.440 --> 00:14:46.960
So how do we do that?

00:14:46.960 --> 00:14:50.290
We place two different versions of our desserts.xml
file.

00:14:50.290 --> 00:14:53.470
One of them is in the layout directory, unqualified;
right?

00:14:53.470 --> 00:14:56.140
And the other one is in the layout-V11 directory.

00:14:56.140 --> 00:15:01.360
So if I'm running on ICS or above, it's the
right-hand side that's going to kick in, so

00:15:01.360 --> 00:15:03.160
with the switches.

00:15:03.160 --> 00:15:06.870
If I'm running on a device that's pre-ICS,
it's the left-hand side that's going to kick

00:15:06.870 --> 00:15:09.180
in, and it's going to run with the check boxes.

00:15:09.180 --> 00:15:13.831
So that just gets plugged in into the right
place in our main layout because of the layout

00:15:13.831 --> 00:15:16.050
include.

00:15:16.050 --> 00:15:20.500
One thing to note on the code is that you
should always be aware of whether you're dealing

00:15:20.500 --> 00:15:22.250
with a switch or a check box.

00:15:22.250 --> 00:15:26.210
You could branch on top of the version and
then cache to the appropriate classes, but

00:15:26.210 --> 00:15:27.210
that's difficult.

00:15:27.210 --> 00:15:30.490
Instead, you can just realize that they both
derive from compound button and just do it

00:15:30.490 --> 00:15:33.750
like that, which is much easier, of course.

00:15:33.750 --> 00:15:38.960
In all cases, remember that this trick is
not just limited to widget fallbacks.

00:15:38.960 --> 00:15:43.360
So layout includes are actually a very powerful
tool, and they can always be used when you

00:15:43.360 --> 00:15:47.040
have sections of your layout that should be
different depending on device configuration.

00:15:47.040 --> 00:15:51.980
So platform version, screen size, anything
else that you can describe with a device configuration,

00:15:51.980 --> 00:15:53.630
you can use layout includes.

00:15:53.630 --> 00:15:54.949
All right.

00:15:54.949 --> 00:15:57.060
So let's move on to another very important
topic.

00:15:57.060 --> 00:16:00.630
So we're developers, right, so we are focused
on making stuff that works.

00:16:00.630 --> 00:16:02.220
We like stuff that works.

00:16:02.220 --> 00:16:05.339
But legend has it that users also care about
looks.

00:16:05.339 --> 00:16:06.690
Go figure.

00:16:06.690 --> 00:16:10.490
So let's talk about how we can make sure that
your themes work across platform versions.

00:16:10.490 --> 00:16:14.560
So in this way, you can make your app look
great, regardless of what release you're running

00:16:14.560 --> 00:16:15.560
on.

00:16:15.560 --> 00:16:16.560
So, Adam, how can we do that?

00:16:16.560 --> 00:16:17.730
&gt;&gt;Adam Powell: All right.

00:16:17.730 --> 00:16:19.080
I'm glad you asked.

00:16:19.080 --> 00:16:23.280
On a Nexus device today, you have basically
four themes that users might see on a regular

00:16:23.280 --> 00:16:24.280
basis.

00:16:24.280 --> 00:16:27.430
And in the long run, we'd really like to get
this down to two.

00:16:27.430 --> 00:16:31.220
But there will always be a few legacy apps
that users really don't want to let go of.

00:16:31.220 --> 00:16:35.089
By the way, creating any sort of more modern
replacement for those that are still floating

00:16:35.089 --> 00:16:38.040
around, great opportunity.

00:16:38.040 --> 00:16:41.980
There's also the device default themes which,
on a Nexus device, they just simply alias

00:16:41.980 --> 00:16:42.990
to the holo themes.

00:16:42.990 --> 00:16:45.910
So we're going to mostly talk about those
for now.

00:16:45.910 --> 00:16:49.910
But a theme, really, at its core is a bundle
of defaults.

00:16:49.910 --> 00:16:53.300
It's just a style that's applied at the context
level, after all.

00:16:53.300 --> 00:16:56.950
It defines the default look and feel for each
type of view.

00:16:56.950 --> 00:17:03.240
But more importantly, it provides a point
of indirection that you can use in your apps.

00:17:03.240 --> 00:17:06.389
Your layouts probably have a whole lot of
hard-coded metrics here and there, like text

00:17:06.389 --> 00:17:09.399
sizes, paddings, margins, so on and so forth.

00:17:09.399 --> 00:17:10.399
And this is fine.

00:17:10.399 --> 00:17:14.259
But the theme also has a bunch of defaults
that you can query using the syntax shown

00:17:14.259 --> 00:17:15.259
here.

00:17:15.259 --> 00:17:18.559
(indiscernible) ops makes sure that you're
using the metrics that the rest of the system

00:17:18.559 --> 00:17:21.850
does, making your app feel more like a first-class
citizen.

00:17:21.850 --> 00:17:22.879
But between -- Whoops.

00:17:22.879 --> 00:17:24.049
Too quick.

00:17:24.049 --> 00:17:28.639
But between some elements that you query from
the theme and other elements that are unique

00:17:28.639 --> 00:17:33.279
to your app, it can get really repetitive
if you use the same value over and over.

00:17:33.279 --> 00:17:36.519
And this is where it becomes a good idea to
define some of your own custom styles that

00:17:36.519 --> 00:17:39.640
you can apply to views.

00:17:39.640 --> 00:17:43.370
So you've always got a base to build on when
you're defining a style, especially if you're

00:17:43.370 --> 00:17:46.870
going to redefine what a default button style
is on a custom theme, so on and so forth.

00:17:46.870 --> 00:17:51.749
You always want to declare a parent for your
styles so that that way you always inherit

00:17:51.749 --> 00:17:57.529
all of the defaults that are there that you
may not really care about.

00:17:57.529 --> 00:18:01.960
But the problem, of course, is that holo and
device default didn't exist before Honeycomb

00:18:01.960 --> 00:18:03.720
and ICS, respectively.

00:18:03.720 --> 00:18:08.309
So how do we write our apps so that it looks
like this, depending on what kind of device

00:18:08.309 --> 00:18:09.980
that we're running on?

00:18:09.980 --> 00:18:15.070
The key is in which parent you declare in
your custom styles and themes.

00:18:15.070 --> 00:18:20.519
So before Honeycomb, you'll want to base your
apps theme on the legacy theme or theme.light.

00:18:20.519 --> 00:18:24.480
And after Honeycomb, you may want to use the
holo variants instead.

00:18:24.480 --> 00:18:25.480
So how can we do that?

00:18:25.480 --> 00:18:30.639
And, really, the same goes for the widget
styles.

00:18:30.639 --> 00:18:34.330
The simplest way to do this that comes to
mind for most developers is to just redeclare

00:18:34.330 --> 00:18:37.110
the styles in a resource overlay for V11;
right?

00:18:37.110 --> 00:18:41.230
Well, of course, that gets into the same problem
of duplication again.

00:18:41.230 --> 00:18:45.639
A better way is to declare a base style that
varies by version and then keep your main

00:18:45.639 --> 00:18:51.340
customizations in a style that derives from
that instead.

00:18:51.340 --> 00:18:56.080
So you get this simple declaration here to
declare a parent that will be selected at

00:18:56.080 --> 00:18:57.730
run time.

00:18:57.730 --> 00:19:03.080
And you can keep all the customizations that
are unique to your app in one place rather

00:19:03.080 --> 00:19:05.119
than duplicate them.

00:19:05.119 --> 00:19:11.049
And by doing this, we've separated out what's
unique about different Android versions, and

00:19:11.049 --> 00:19:15.419
we're targeting -- or the different Android
versions that we're targeting and separating

00:19:15.419 --> 00:19:19.669
those from how our app differs from that base.

00:19:19.669 --> 00:19:26.690
So, if a theme is just a big ball of metadata
about defaults, can we create our own attributes

00:19:26.690 --> 00:19:28.110
that we can query from later?

00:19:28.110 --> 00:19:30.770
Maybe this will be helpful for us.

00:19:30.770 --> 00:19:33.090
And the answer, of course, is that, yes, we
can.

00:19:33.090 --> 00:19:36.259
This is especially helpful when there are
no attributes available in newer versions

00:19:36.259 --> 00:19:39.600
of the platform, but that they didn't exist
before that.

00:19:39.600 --> 00:19:43.200
So you can create a simple shim attribute
of your own in one place and get the right

00:19:43.200 --> 00:19:47.139
behavior everywhere.

00:19:47.139 --> 00:19:51.559
So here's a quick example of adapting the
selectable item background attribute that

00:19:51.559 --> 00:19:54.840
was introduced in Honeycomb across multiple
platform versions.

00:19:54.840 --> 00:20:00.340
By convention, we always declare theme attributes
in a file named attrs.xml and the res values

00:20:00.340 --> 00:20:05.830
directory, and then we assign values to the
new attribute in our apps theme declarations.

00:20:05.830 --> 00:20:09.859
If we're using the tactic from earlier, with
a base theme that varies by platform version,

00:20:09.859 --> 00:20:14.070
then we can put declarations that bridge the
version gaps like this in the base themes

00:20:14.070 --> 00:20:21.049
rather than the theme that actually declares
our app's own customizations.

00:20:21.049 --> 00:20:24.279
So there are still going to be device-specific
skins out there to consider when you build

00:20:24.279 --> 00:20:25.279
your UI.

00:20:25.279 --> 00:20:29.309
So when is it appropriate to use each theme?

00:20:29.309 --> 00:20:33.919
So as of Ice Cream Sandwich, holo is a stable
base, you can always count on it being there

00:20:33.919 --> 00:20:35.889
and we have designed it to be easy to work
with.

00:20:35.889 --> 00:20:37.769
And we kind of like it.

00:20:37.769 --> 00:20:42.100
So device default is a little bit less predictable,
but this is how you can integrate with all

00:20:42.100 --> 00:20:45.899
the various device skins if you're willing
to query the theme for just about everything

00:20:45.899 --> 00:20:46.899
that you do.

00:20:46.899 --> 00:20:50.830
There are very few assumptions that you can
make here, but it can give you a very native-looking

00:20:50.830 --> 00:20:53.940
experience if you're willing to work with
it.

00:20:53.940 --> 00:20:57.409
When it comes to the layout and structure
of your content, on the other hand, following

00:20:57.409 --> 00:21:02.580
the guidelines on the Android design site
is still a really great place to start, regardless

00:21:02.580 --> 00:21:03.999
of what theme you're using.

00:21:03.999 --> 00:21:07.549
With very few exceptions, you should always
try and keep structure and interaction patterns

00:21:07.549 --> 00:21:10.059
consistent across different themes and versions
of the platform.

00:21:10.059 --> 00:21:13.710
Bruno, can you give us some tips about some
of those cases?

00:21:13.710 --> 00:21:15.039
&gt;&gt;Bruno Oliveira: Sure.

00:21:15.039 --> 00:21:19.679
So let's talk a little bit about the support
library and beyond.

00:21:19.679 --> 00:21:23.809
So one of the great tools -- they are great
tools to help you keep a -- consistent user

00:21:23.809 --> 00:21:27.179
experience patterns across multiple platform
versions.

00:21:27.179 --> 00:21:29.820
So these will greatly simplify your work.

00:21:29.820 --> 00:21:31.580
&gt;&gt;Adam Powell: That's right.

00:21:31.580 --> 00:21:35.210
And in just a few weeks, we're about to make
available some more tools that will encapsulate

00:21:35.210 --> 00:21:40.210
a lot of this stuff that we've been talking
about today for the commonly used components,

00:21:40.210 --> 00:21:43.230
things like the selectable item background
that we mentioned.

00:21:43.230 --> 00:21:48.490
So app compat is a new addition to the support
library to join the existing v4 and v13 components

00:21:48.490 --> 00:21:50.320
that you're probably already familiar with.

00:21:50.320 --> 00:21:56.400
While the parts of the support library that
we've already released provide this abstract

00:21:56.400 --> 00:22:00.919
box of tools for you to work with for building
your multiversioned apps, app compat elements

00:22:00.919 --> 00:22:04.570
are designed to help you follow the Android
design guidelines across those multiple platform

00:22:04.570 --> 00:22:05.590
versions.

00:22:05.590 --> 00:22:11.919
&gt;&gt;Bruno Oliveira: One of the components that
the support library can help you with is fragments.

00:22:11.919 --> 00:22:15.639
Fragments are modular units of composition
within an activity.

00:22:15.639 --> 00:22:19.309
So multiple fragments can be combined together
to form a single layout.

00:22:19.309 --> 00:22:24.440
And they're actually a great way to manage
user interfaces that work on phones and tablets.

00:22:24.440 --> 00:22:27.370
Now, fragments are not an ICS feature; right?

00:22:27.370 --> 00:22:31.929
They are so useful that we've made them available
all the way back to Honeycomb.

00:22:31.929 --> 00:22:33.809
So -- oh, no.

00:22:33.809 --> 00:22:35.139
Actually (indiscernible) for you.

00:22:35.139 --> 00:22:36.139
So Adam.

00:22:36.139 --> 00:22:41.409
&gt;&gt;Adam Powell: Well, so what do we do?

00:22:41.409 --> 00:22:45.359
Well, I mean, everybody likes Froyo; right?

00:22:45.359 --> 00:22:49.080
So as you already know, if you've been using
the support library, you can use fragments

00:22:49.080 --> 00:22:52.609
on previous versions as well with the back-ported
version that we've provided.

00:22:52.609 --> 00:22:56.789
All you have to do is add the support library
to your project and import the correct classes.

00:22:56.789 --> 00:22:59.000
Then you proceed as you would with a regular
fragment.

00:22:59.000 --> 00:23:03.309
&gt;&gt;Bruno Oliveira: For example, here we're
defining our own fragment class.

00:23:03.309 --> 00:23:06.809
So this is the same as we would do if there
were no support library at all.

00:23:06.809 --> 00:23:09.059
We simply derive it from fragment; right?

00:23:09.059 --> 00:23:12.869
And then we override the appropriate methods
as we wish.

00:23:12.869 --> 00:23:18.799
Now, adding fragments to a layout is also
no different than you would do without the

00:23:18.799 --> 00:23:19.799
support library.

00:23:19.799 --> 00:23:21.639
So it's perfectly transparent in this case.

00:23:21.639 --> 00:23:25.960
So this is an example of adding fragments
to your layout using XML.

00:23:25.960 --> 00:23:29.470
So remember that you can also do that from
code using fragment transactioners if you

00:23:29.470 --> 00:23:30.880
prefer.

00:23:30.880 --> 00:23:35.049
One thing to be careful about is that you
have to derive your activity from fragment

00:23:35.049 --> 00:23:36.450
activity and not activity; right?

00:23:36.450 --> 00:23:38.779
So this is specific to the support library.

00:23:38.779 --> 00:23:41.779
So this is one of the few places where the
transparency is not 100%.

00:23:41.779 --> 00:23:43.049
&gt;&gt;Adam Powell: You've got something.

00:23:43.049 --> 00:23:45.869
&gt;&gt;Bruno Oliveira: Yes, by the way, I think
it's time that we talked to you about --

00:23:45.869 --> 00:23:49.080
&gt;&gt;Adam Powell: Notifications.

00:23:49.080 --> 00:23:53.369
&gt;&gt;Bruno Oliveira: -- notifications, yes.

00:23:53.369 --> 00:23:59.759
So, as devices get more advanced, the complexity
of things they can do with notifications increase

00:23:59.759 --> 00:24:00.759
a lot.

00:24:00.759 --> 00:24:02.950
But, fundamentally, they are just a way to
tell the user that something is happening

00:24:02.950 --> 00:24:07.789
right now or is about to happen and it's something
that they actually care about.

00:24:07.789 --> 00:24:10.359
So this last part is actually pretty important.

00:24:10.359 --> 00:24:18.539
The user has to care about the -- yeah, about
the event that you are telling him.

00:24:18.539 --> 00:24:22.960
So before Honeycomb, notifications were somewhat
limited; right?

00:24:22.960 --> 00:24:26.450
So this is what you would probably see as
far as code is concerned.

00:24:26.450 --> 00:24:30.650
So you can discreet your notifications directly
and then set parameters and happened it off

00:24:30.650 --> 00:24:31.809
to the manager.

00:24:31.809 --> 00:24:37.860
Naturally, you can use it for simple cases
but after Honeycomb, this became a lot more

00:24:37.860 --> 00:24:38.860
interesting.

00:24:38.860 --> 00:24:42.860
So we introduced this notification builder
that helps developers create them.

00:24:42.860 --> 00:24:49.009
Notification builder is a builder that actually
provides notification for you based on the

00:24:49.009 --> 00:24:50.970
settings that you provide by calling its methods.

00:24:50.970 --> 00:24:55.890
It is definitely a lot easier than building
it by hand.

00:24:55.890 --> 00:25:00.220
So I like this notification builder thing,
so it makes me really happy.

00:25:00.220 --> 00:25:04.600
But then I realize it's only for APIs 11 and
above so that makes me sad.

00:25:04.600 --> 00:25:07.710
&gt;&gt;Adam Powell: What if I tell you this is
also in the support library.

00:25:07.710 --> 00:25:09.389
&gt;&gt;Bruno Oliveira: I'm happy again.

00:25:09.389 --> 00:25:13.850
&gt;&gt;Adam Powell: Import it and it works in the
most common use cases.

00:25:13.850 --> 00:25:20.440
&gt;&gt;Bruno Oliveira: What are the changes in
Jelly Bean?

00:25:20.440 --> 00:25:21.859
So let's be concrete about it.

00:25:21.859 --> 00:25:24.100
We are developers.

00:25:24.100 --> 00:25:29.070
According to a recent study the notification
builder in Jelly Bean is approximately 217%

00:25:29.070 --> 00:25:30.779
more awesome than the one we had before.

00:25:30.779 --> 00:25:32.570
[ Laughter ]
&gt;&gt;Bruno Oliveira: Those are very reliable

00:25:32.570 --> 00:25:35.010
and serious numbers.

00:25:35.010 --> 00:25:38.889
So this is -- for instance, it includes methods
like add action, which you would be able to

00:25:38.889 --> 00:25:42.619
see if the screen shot was in front of it.

00:25:42.619 --> 00:25:45.090
Actions on the notification.

00:25:45.090 --> 00:25:47.330
Like answer and ignore.

00:25:47.330 --> 00:25:52.690
And also, another pretty cool feature about
notifications is you can use styles.

00:25:52.690 --> 00:25:57.200
So you can set the style using the set style
method and it comes with a certain predefined

00:25:57.200 --> 00:26:01.260
styles that encapsulate most of the commonly
used types of notifications.

00:26:01.260 --> 00:26:05.830
&gt;&gt;Adam Powell: Unfortunately, the naming here
might imply otherwise.

00:26:05.830 --> 00:26:09.080
But the styles really do just refer to these
different styles of notifications and not

00:26:09.080 --> 00:26:12.200
actually resource styles in terms of the resource
system.

00:26:12.200 --> 00:26:15.759
&gt;&gt;Bruno Oliveira: So this is what the big
text style looks like.

00:26:15.759 --> 00:26:17.780
We have a title and a large amount of text
under it.

00:26:17.780 --> 00:26:23.100
It can be for, say, an email snippet, right?

00:26:23.100 --> 00:26:27.389
Then this is what the inbox style looks like,
when you have a content title and snippets

00:26:27.389 --> 00:26:29.789
for several items.

00:26:29.789 --> 00:26:31.419
This is the big picture style.

00:26:31.419 --> 00:26:34.039
Title, details, and guess what?

00:26:34.039 --> 00:26:36.090
&gt;&gt;Adam Powell: Big picture.

00:26:36.090 --> 00:26:38.999
&gt;&gt;Bruno Oliveira: Yes, exactly.

00:26:38.999 --> 00:26:43.869
And there are several other new features but
we can't cover them all here because we don't

00:26:43.869 --> 00:26:44.869
have time.

00:26:44.869 --> 00:26:48.690
It's definitely worth taking a look if you
are at users notifications anyway.

00:26:48.690 --> 00:26:55.679
Now, sadly, the new Jelly Bean notification
features are not yet in the support library.

00:26:55.679 --> 00:27:00.029
So if you want to take advantage of this right
away and be backwards compatible, you have

00:27:00.029 --> 00:27:01.190
to do a branch.

00:27:01.190 --> 00:27:04.450
So if you can detect whether you are running
Jelly Bean or not.

00:27:04.450 --> 00:27:07.220
If you are, just use a notification builder
natively.

00:27:07.220 --> 00:27:11.639
And else, just use the notification comeback
builder in the support library.

00:27:11.639 --> 00:27:13.859
Fall back to the support library.

00:27:13.859 --> 00:27:15.489
Hopefully one day it's going to become easier.

00:27:15.489 --> 00:27:16.789
&gt;&gt;Adam Powell: One day pretty soon.

00:27:16.789 --> 00:27:19.630
&gt;&gt;Bruno Oliveira: One day pretty soon, yes.

00:27:19.630 --> 00:27:24.729
Another important point, be careful when creating
notifications, icon consistency.

00:27:24.729 --> 00:27:29.500
On Froyo and older devices, you would have
white over a black background.

00:27:29.500 --> 00:27:32.179
This is what a notification icon would look
like.

00:27:32.179 --> 00:27:35.429
On Gingerbread, they would be gray over a
transparent background.

00:27:35.429 --> 00:27:38.570
And then on Honeycomb, they would be white
over a transparent background.

00:27:38.570 --> 00:27:42.029
And for each of those, you have to supply
the versions for all the screen densities

00:27:42.029 --> 00:27:43.029
possible, right?

00:27:43.029 --> 00:27:44.879
&gt;&gt;Adam Powell: That's way too many icons.

00:27:44.879 --> 00:27:46.789
Is there a tool or something we could use
for this?

00:27:46.789 --> 00:27:47.789
&gt;&gt;Bruno Oliveira: Maybe.

00:27:47.789 --> 00:27:49.460
Maybe it's on the next slide.

00:27:49.460 --> 00:27:52.359
Oh, joy, it is on the next slide.

00:27:52.359 --> 00:27:55.119
So surprise, surprise, there is actually a
tool that helps you with that.

00:27:55.119 --> 00:27:56.809
It's called the Android asset studio.

00:27:56.809 --> 00:27:59.639
It can be found on that URL up there.

00:27:59.639 --> 00:28:01.879
So it generates the icons for you.

00:28:01.879 --> 00:28:05.249
It's pretty nice to have in your toolbox.

00:28:05.249 --> 00:28:08.200
Check it out if you haven't used it before.

00:28:08.200 --> 00:28:11.340
Now, let's move on to another very important
topic.

00:28:11.340 --> 00:28:12.340
The action bar.

00:28:12.340 --> 00:28:15.029
So Adam, can you tell us why the action bar
is such an important topic?

00:28:15.029 --> 00:28:19.899
&gt;&gt;Adam Powell: The action bar provides a consistent
way for the user to navigate and perform within

00:28:19.899 --> 00:28:22.169
your application.

00:28:22.169 --> 00:28:25.529
You can make up your own way to navigate and
perform actions.

00:28:25.529 --> 00:28:30.669
Anyone who has used an modern Android application
is probably familiar with a bar already.

00:28:30.669 --> 00:28:34.739
So in the interest of making your app easy
to learn, there's a good chance your app should

00:28:34.739 --> 00:28:35.879
use it too.

00:28:35.879 --> 00:28:39.919
Most times when someone calls an app intuitive,
what they are really say is it works like

00:28:39.919 --> 00:28:41.840
something else that I'm already familiar with.

00:28:41.840 --> 00:28:45.419
So you really want to make use of that wherever
you can.

00:28:45.419 --> 00:28:46.950
Action bar has two parts.

00:28:46.950 --> 00:28:52.979
Navigation, which is usually tab spinners,
the up button and such, and actions.

00:28:52.979 --> 00:28:57.419
Actions are divided between the action buttons
that are visible that are surfaced on the

00:28:57.419 --> 00:29:01.359
bar itself and the action overflow that's
behind that little three dot button right

00:29:01.359 --> 00:29:03.179
there.

00:29:03.179 --> 00:29:07.259
And remember the FIT rule from the Android
design guide.

00:29:07.259 --> 00:29:12.599
Anytime that an action is frequent, important,
or typical it should be on screen whether

00:29:12.599 --> 00:29:15.869
that's in the action bar or not.

00:29:15.869 --> 00:29:20.250
Anytime that it's not, then you should think
about tucking it away someplace that's maybe

00:29:20.250 --> 00:29:23.159
not taking up that valuable screen real estate
all the time.

00:29:23.159 --> 00:29:24.759
The overflow is one way to do that.

00:29:24.759 --> 00:29:32.429
&gt;&gt;Bruno Oliveira: Wait, I've heard some rumors,
they may be rumors, but the action bar seems

00:29:32.429 --> 00:29:33.720
to not be available before Honeycomb?

00:29:33.720 --> 00:29:35.210
&gt;&gt;Adam Powell: Really?

00:29:35.210 --> 00:29:36.700
&gt;&gt;Bruno Oliveira: Yes.

00:29:36.700 --> 00:29:38.710
If that's true, what can we do?

00:29:38.710 --> 00:29:42.700
&gt;&gt;Adam Powell: If you are running on a pre-Honeycomb
device, you can implement your own version

00:29:42.700 --> 00:29:43.999
of it.

00:29:43.999 --> 00:29:46.730
Good starting point is the action bar compat
sample.

00:29:46.730 --> 00:29:50.539
You can use a third-party library, like action
bar Sherlock.

00:29:50.539 --> 00:29:55.461
Wait, there's also some good news, soon you
will be able to make the app-compat library

00:29:55.461 --> 00:29:57.620
to make action bars that work all the way
to Eclair.

00:29:57.620 --> 00:30:01.570
It will be as simple to use as support library's
fragments as well.

00:30:01.570 --> 00:30:07.809
[ Applause ]
&gt;&gt;Adam Powell: Oh, would you --

00:30:07.809 --> 00:30:09.880
&gt;&gt;&gt; Yeah baby.

00:30:09.880 --> 00:30:17.159
&gt;&gt;Adam Powell: Bruno, we made some friends.

00:30:17.159 --> 00:30:22.090
Many of you familiar with backward compatible
fragments.

00:30:22.090 --> 00:30:24.629
Action bars work the same way.

00:30:24.629 --> 00:30:28.239
Action bar activity extends fragment activity
so you don't have to worry about any sort

00:30:28.239 --> 00:30:29.909
of conflicts between those.

00:30:29.909 --> 00:30:32.580
You will have fragments available as well.

00:30:32.580 --> 00:30:35.769
And just like fetching the support fragment
manager, you can grab the support action bar

00:30:35.769 --> 00:30:38.909
in the same way.

00:30:38.909 --> 00:30:43.950
So the best part about this is the action
bar is really just the beginning of the kinds

00:30:43.950 --> 00:30:48.830
of things that we are planning on making available
as part of the app-compat library.

00:30:48.830 --> 00:30:52.909
Knowing all of these techniques we are talking
about today is always going to be useful but

00:30:52.909 --> 00:30:55.149
really nobody likes code duplication.

00:30:55.149 --> 00:30:59.109
We want to bring the common fruits of all
of this together in a form that you can just

00:30:59.109 --> 00:31:01.679
simply include and use in your apps.

00:31:01.679 --> 00:31:05.229
Bruno, actually it looks like we have time
left.

00:31:05.229 --> 00:31:08.539
It's just enough time to talk about some miscellaneous
tips.

00:31:08.539 --> 00:31:11.349
Now that we covered the most important topics.

00:31:11.349 --> 00:31:14.479
Resource system themes, support app and app-compat
libraries.

00:31:14.479 --> 00:31:18.049
So last we will finish up with some miscellaneous
tips that may be useful when writing multi-version

00:31:18.049 --> 00:31:20.409
Android user interfaces.

00:31:20.409 --> 00:31:26.080
Our first tip is to, by all means, resist
the temptation to style the options panel.

00:31:26.080 --> 00:31:31.260
The options panel is one of those things that
the user sees as a familiar anchoring element.

00:31:31.260 --> 00:31:35.109
If you make it look a lot different than what
the system looks like, that can be confusing

00:31:35.109 --> 00:31:36.109
to users.

00:31:36.109 --> 00:31:38.119
It's not difficult to confuse users.

00:31:38.119 --> 00:31:44.489
Pay attention to the fact that each platform
version has different style.

00:31:44.489 --> 00:31:47.889
Look at the options manual in options panel
in general.

00:31:47.889 --> 00:31:50.409
So you should always provide assets to match
that style.

00:31:50.409 --> 00:31:53.259
And try not to change it.

00:31:53.259 --> 00:31:55.559
It's also worth noting that menu key is going
away.

00:31:55.559 --> 00:31:57.419
Most new devices don't have a menu key.

00:31:57.419 --> 00:31:59.710
Actually, most of the devices don't have hardware
keys at all.

00:31:59.710 --> 00:32:01.159
&gt;&gt;Adam Powell: Some of them still do.

00:32:01.159 --> 00:32:02.679
&gt;&gt;Bruno Oliveira: Some still do.

00:32:02.679 --> 00:32:04.879
The menu key is definitely going away.

00:32:04.879 --> 00:32:07.370
It's function has been replaced by action
overflow.

00:32:07.370 --> 00:32:10.799
It's the same use case, when the user doesn't
find something on screen, they will look for

00:32:10.799 --> 00:32:14.429
it in the menu key or in the action overflow,
depending on the system.

00:32:14.429 --> 00:32:25.009
So remember, any action that follows the FIT
rule, or on your layout.

00:32:25.009 --> 00:32:29.639
And then anything else should go either in
the options panel or in the action overflow

00:32:29.639 --> 00:32:32.929
depending on the platform version.

00:32:32.929 --> 00:32:35.080
Speaking about familiar anchoring elements.

00:32:35.080 --> 00:32:37.470
That slide didn't come out too well.

00:32:37.470 --> 00:32:38.749
Dialogues are also one of them.

00:32:38.749 --> 00:32:42.889
The indicate system level interactions, like
critical yes or no prompts, they should be

00:32:42.889 --> 00:32:43.889
used sparingly.

00:32:43.889 --> 00:32:48.259
Because, as you can see, popups are very annoying.

00:32:48.259 --> 00:32:51.690
Dialogues should never be a central part of
your user experience.

00:32:51.690 --> 00:32:56.979
Leave them alone and don't change the default
style that they will take according to platform.

00:32:56.979 --> 00:33:01.390
If for some reason you cannot resist the temptation
to style a dialogue, then this might be an

00:33:01.390 --> 00:33:05.399
indication that whatever you're trying to
accomplish with that dialogue should not be

00:33:05.399 --> 00:33:06.399
a dialogue at all.

00:33:06.399 --> 00:33:10.480
It should be, in fact, part of your activity
or be a separate activity on its own.

00:33:10.480 --> 00:33:15.470
By all means, never style dialogues.

00:33:15.470 --> 00:33:22.639
So this next tip something that always drives
me crazy when I switch between devices maybe.

00:33:22.639 --> 00:33:29.460
So on a pre-ICS device, the default button
order was positive, neutral, negative.

00:33:29.460 --> 00:33:31.549
This is what we would typically see.

00:33:31.549 --> 00:33:34.669
The button that does stuff is on the left.

00:33:34.669 --> 00:33:39.349
And then the button that doesn't do anything,
that cancels, is on the right.

00:33:39.349 --> 00:33:42.129
On Ice Cream Sandwich, we actually switched
them around.

00:33:42.129 --> 00:33:44.590
So the button that does something is on the
right.

00:33:44.590 --> 00:33:47.220
And the button that doesn't do anything is
on the left.

00:33:47.220 --> 00:33:49.379
So it is better this way.

00:33:49.379 --> 00:33:53.409
It is better -- the Ice Cream Sandwich way
is better because it reduces backtrack because

00:33:53.409 --> 00:33:57.419
the option that the user is likely to choose
is closer to what the user is looking at when

00:33:57.419 --> 00:34:00.639
he finishes reading the sentence.

00:34:00.639 --> 00:34:04.909
You should always keep in mind that this is
different between platform releases.

00:34:04.909 --> 00:34:08.659
If you want to go that extra mile in making
sure that your app is consistent with the

00:34:08.659 --> 00:34:11.909
platform, you should always make sure that
your button order is consistent with whatever

00:34:11.909 --> 00:34:15.700
platform you are running on so that you don't
surprise the user in a bad way.

00:34:15.700 --> 00:34:16.790
&gt;&gt;Adam Powell: That's right.

00:34:16.790 --> 00:34:20.190
This sort of button layout order issue is
the exactly the kind of thing we want to provide

00:34:20.190 --> 00:34:21.829
in the app-compat library as well.

00:34:21.829 --> 00:34:27.659
So we will go ahead and have some versioned
layouts that do the button bars.

00:34:27.659 --> 00:34:33.299
And just as ad add note, some of you realized
that writing app that is use different themes

00:34:33.299 --> 00:34:38.480
here, you might have noticed even on an Ice
Cream Sandwich device, an app that uses the

00:34:38.480 --> 00:34:42.020
old style dialogue is still using the old
button order.

00:34:42.020 --> 00:34:46.329
As it turns out, this is mostly because if
user become that familiar with that particular

00:34:46.329 --> 00:34:50.040
application, not only do they have muscle
memory for it, but it's also fairly common

00:34:50.040 --> 00:34:55.980
for applications to sort of mix and mingle
system-generated dialogues like an alert dialogue

00:34:55.980 --> 00:34:58.390
with dialogues that they have a custom layout
for.

00:34:58.390 --> 00:35:03.369
We didn't want to make individual apps internally
inconsistent with themselves for that.

00:35:03.369 --> 00:35:08.090
So it is also important to keep in mind that
your app is not the only app that an user

00:35:08.090 --> 00:35:10.380
is going to interact with on a daily basis.

00:35:10.380 --> 00:35:14.610
So as you switch between different apps, you
do want to try to keep a level of consistency

00:35:14.610 --> 00:35:16.290
with this sort of thing.

00:35:16.290 --> 00:35:20.029
&gt;&gt;Bruno Oliveira: All right, our last hint.

00:35:20.029 --> 00:35:24.440
Always set the minimum SDK version and target
SKD version in your manifest.

00:35:24.440 --> 00:35:29.520
That's important because the minimum SDK should
be what it says, it's the minimum platform

00:35:29.520 --> 00:35:32.049
version required to run your application.

00:35:32.049 --> 00:35:35.569
Hopefully that's going to be as low as possible
and we hope that after this session it is

00:35:35.569 --> 00:35:37.569
going to be even lower than before.

00:35:37.569 --> 00:35:42.380
Now, the target SDK version is something that
many of us forget to set or they just set

00:35:42.380 --> 00:35:43.670
to very old version.

00:35:43.670 --> 00:35:49.359
So target SDK does not affect the minimum
SDK level needed to run your application.

00:35:49.359 --> 00:35:52.660
So it should always be the latest platform
version that you are aware of and that you

00:35:52.660 --> 00:35:54.349
have tested your application against.

00:35:54.349 --> 00:35:59.590
So for everybody in Google I/O from this date,
this should be Jelly Bean.

00:35:59.590 --> 00:36:03.470
This is important because depending on the
target SDK version, the platform is going

00:36:03.470 --> 00:36:07.980
to enable or disable lots of compatibility
tricks, and that's going to affect things

00:36:07.980 --> 00:36:09.299
like the default theme.

00:36:09.299 --> 00:36:13.441
For instance, if you set your target SDK version
to 11 or above, you will have a default theme

00:36:13.441 --> 00:36:15.059
that has an action bar.

00:36:15.059 --> 00:36:19.480
If you don't, you will not get an action bar,
right?

00:36:19.480 --> 00:36:23.029
And certain other features are also key to
that.

00:36:23.029 --> 00:36:26.829
So if you want to make sure that you have
the latest features enabled for your application,

00:36:26.829 --> 00:36:29.910
always set target SDK version as high as you
can.

00:36:29.910 --> 00:36:34.510
Another example of that is if you set it to
a level 14 or above, you will get hard acceleration

00:36:34.510 --> 00:36:37.320
by default on every activity.

00:36:37.320 --> 00:36:41.950
If you don't, you will enable it individually
per activity.

00:36:41.950 --> 00:36:46.780
So it's very important to set those two attributes
in your Android manifest.

00:36:46.780 --> 00:36:51.790
&gt;&gt;Adam Powell: This is for safety in terms
of making sure that applications still run

00:36:51.790 --> 00:36:54.660
even if we start making a little bit more
risky changes.

00:36:54.660 --> 00:36:57.710
Hardware acceleration in UIs was definitely
one of these.

00:36:57.710 --> 00:37:02.380
Not everything has the same performance profile
in hardware render, and there were certain

00:37:02.380 --> 00:37:04.829
operations that weren't supported at all in
the beginning.

00:37:04.829 --> 00:37:09.120
&gt;&gt;Bruno Oliveira: Remember, we don't want
to break anybody's application.

00:37:09.120 --> 00:37:11.570
Backwards compatibility is one of the core
Android values.

00:37:11.570 --> 00:37:13.380
This is why we have target SDK version.

00:37:13.380 --> 00:37:18.829
Because this is how the platform knows what
your application expects to work with so we

00:37:18.829 --> 00:37:21.760
can actually provide backwards compatibility
depending on the case.

00:37:21.760 --> 00:37:23.440
&gt;&gt;Adam Powell: That's right.

00:37:23.440 --> 00:37:27.700
&gt;&gt;Bruno Oliveira: So if anybody has any questions,
we would like to answer them now.

00:37:27.700 --> 00:37:32.140
We also remind you that we have an office
hours space so anytime you want to ask a question,

00:37:32.140 --> 00:37:33.140
you can drop by there.

00:37:33.140 --> 00:37:34.799
We will go there right after this session.

00:37:34.799 --> 00:37:39.509
If you have a more complex question or something
that requires us to see something, you can

00:37:39.509 --> 00:37:43.299
-- we will be glad to talk to you there.

00:37:43.299 --> 00:37:44.900
But so does anybody have any questions?

00:37:44.900 --> 00:37:49.489
I think there are two microphones, right?

00:37:49.489 --> 00:37:56.650
[ Applause ]
&gt;&gt;Bruno Oliveira: By the way, don't forget

00:37:56.650 --> 00:37:59.180
we have plus one boxes at the corners of the
room.

00:37:59.180 --> 00:38:04.220
so if you like the session -- if you like
our session, please put the plus one card

00:38:04.220 --> 00:38:05.220
in.

00:38:05.220 --> 00:38:06.220
We do not have minus cards.

00:38:06.220 --> 00:38:09.750
If you don't like the session, you will have
to be old-fashioned and throw tomatoes, instead.

00:38:09.750 --> 00:38:10.750
Just kidding.

00:38:10.750 --> 00:38:13.579
Please don't throws vegetables whatsoever.

00:38:13.579 --> 00:38:19.319
&gt;&gt;&gt; I have a question about styles.

00:38:19.319 --> 00:38:24.299
Like with the style buttons, like spinners,
so I tend to style everything to make the

00:38:24.299 --> 00:38:28.410
app look same on Ice Cream Sandwich and Gingerbread.

00:38:28.410 --> 00:38:31.260
Is that a good practice or not?

00:38:31.260 --> 00:38:36.320
&gt;&gt;Adam Powell: If your app has a really distinctive
still of its own, yes, that can be a good

00:38:36.320 --> 00:38:38.200
way to go.

00:38:38.200 --> 00:38:42.190
I would also say that it's kind of a matter
of taste.

00:38:42.190 --> 00:38:47.570
We're definitely sort of leaning toward more
holo styling in the Google apps.

00:38:47.570 --> 00:38:50.340
The closer we get to that, the better.

00:38:50.340 --> 00:38:57.710
&gt;&gt;&gt; I found some Google apps running on the
Gingerbread, it looks like Ice Cream Sandwich.

00:38:57.710 --> 00:39:05.200
With the spinner, on Google translate it looks
like Ice Cream Sandwich but spinner on Google,

00:39:05.200 --> 00:39:06.940
I don't know.

00:39:06.940 --> 00:39:11.859
&gt;&gt;Adam Powell: We definitely have a lot of
the Google apps that have taken some various

00:39:11.859 --> 00:39:13.950
approaches to dealing with this.

00:39:13.950 --> 00:39:16.660
And you'll find some different approaches
on each one.

00:39:16.660 --> 00:39:20.619
It really does come down to how you want to
treat those older versions in the platform.

00:39:20.619 --> 00:39:23.050
I would say it's a judgment call.

00:39:23.050 --> 00:39:27.500
&gt;&gt;Bruno Oliveira: One thing for the action
bar, the action bar was not available before

00:39:27.500 --> 00:39:28.500
Honeycomb.

00:39:28.500 --> 00:39:32.680
Now it's a pretty apparent to have action
bars even though you are running on a device

00:39:32.680 --> 00:39:35.309
running something prior to Honeycomb.

00:39:35.309 --> 00:39:39.490
The action bar is one of those examples where
we sort of like back ported a pattern to previous

00:39:39.490 --> 00:39:40.490
versions.

00:39:40.490 --> 00:39:42.160
&gt;&gt;&gt; Quick question.

00:39:42.160 --> 00:39:48.220
Any recommendation how to integrate Google
Maps with fragment.

00:39:48.220 --> 00:39:49.220
&gt;&gt;Adam Powell: That's a fun one.

00:39:49.220 --> 00:39:50.220
Do you want to take this one?

00:39:50.220 --> 00:39:57.460
&gt;&gt;Bruno Oliveira: The problem with is that
when you are using support library you have

00:39:57.460 --> 00:39:59.460
to arrive from fragment activity.

00:39:59.460 --> 00:40:02.420
When you are arriving from Google Maps, you
have to derive from map activity.

00:40:02.420 --> 00:40:07.970
One of the problems with languages that don't
have multiple inheritances, you can't do that

00:40:07.970 --> 00:40:10.100
in an obvious way.

00:40:10.100 --> 00:40:12.520
We don't currently have a way that you can
do that.

00:40:12.520 --> 00:40:17.400
So you are just going to have to branch and
if you are running -- if you need the support

00:40:17.400 --> 00:40:23.190
library, you can just use that in some different
way and just have a regular activity, not

00:40:23.190 --> 00:40:24.279
a fragment activity.

00:40:24.279 --> 00:40:25.760
And then derive from map activity.

00:40:25.760 --> 00:40:28.150
If not, you derive from map activity.

00:40:28.150 --> 00:40:30.960
There is no -- currently no way to do that
except branching.

00:40:30.960 --> 00:40:34.380
&gt;&gt;Adam Powell: That is and isn't true.

00:40:34.380 --> 00:40:38.430
There's actually a couple of really dirty
tricks that you can pull that technically

00:40:38.430 --> 00:40:43.420
work and if you'd like to talk more about
those, see me in office hours after we are

00:40:43.420 --> 00:40:44.420
done here.

00:40:44.420 --> 00:40:49.730
&gt;&gt;&gt; Hi, does the new action bar activity support
some of the additional action bar functionality

00:40:49.730 --> 00:40:54.450
found in Honeycomb and Ice Cream Sandwich
similar to, like, the alternate action bar.

00:40:54.450 --> 00:40:56.859
I forget the name after it.

00:40:56.859 --> 00:41:00.510
&gt;&gt;Adam Powell: Split bar.

00:41:00.510 --> 00:41:04.010
&gt;&gt;&gt; To replace the top action bar or Gmail
the action bar at the bottom?

00:41:04.010 --> 00:41:05.010
&gt;&gt;Adam Powell: To replace?

00:41:05.010 --> 00:41:07.190
I'm not sure which you are talking about.

00:41:07.190 --> 00:41:12.109
The split bar that you see in Gmail or talking
about the one that replaces the current bar

00:41:12.109 --> 00:41:13.789
for the action modes?

00:41:13.789 --> 00:41:14.789
&gt;&gt;&gt; Both.

00:41:14.789 --> 00:41:15.789
&gt;&gt;Adam Powell: Both.

00:41:15.789 --> 00:41:17.599
The split bar, yes, that will be there.

00:41:17.599 --> 00:41:19.240
The action modes, no, they won't.

00:41:19.240 --> 00:41:24.660
The action mode API is set up that it's series
of calls at the view level that basically

00:41:24.660 --> 00:41:28.710
bubble up the hierarchy and get dealt with
as you go up.

00:41:28.710 --> 00:41:31.960
We really don't have a good way of expressing
that there.

00:41:31.960 --> 00:41:39.369
It's always not a pattern that was -- it really
wasn't supported pattern prior to that either,

00:41:39.369 --> 00:41:44.670
so I would say that the way to adapt across
that boundary when you have a case where you

00:41:44.670 --> 00:41:48.960
want to use multiple selection action mode
on newer platforms, but you kind of wonder

00:41:48.960 --> 00:41:52.130
what to do on an old one, I would say use
a context menu.

00:41:52.130 --> 00:41:54.740
&gt;&gt;&gt; Thank you.

00:41:54.740 --> 00:42:01.750
&gt;&gt;&gt; (inaudible)
&gt;&gt;Adam Powell: Cool, we will take a look at

00:42:01.750 --> 00:42:06.690
it
&gt;&gt;&gt; Action bar Sherlock, using that on a Google

00:42:06.690 --> 00:42:08.109
TV, it nicely puts the action bar on top.

00:42:08.109 --> 00:42:09.109
Will compatibility library do the same?

00:42:09.109 --> 00:42:12.660
Or will it be on the side?

00:42:12.660 --> 00:42:17.760
&gt;&gt;Adam Powell: For Google TV?

00:42:17.760 --> 00:42:19.740
The plan is on the top.

00:42:19.740 --> 00:42:20.740
&gt;&gt;&gt; Thank you.

00:42:20.740 --> 00:42:25.890
&gt;&gt;Adam Powell: By the way, regarding action
bar Sherlock, is Jake here by any chance?

00:42:25.890 --> 00:42:28.759
Oh, nuts, okay.

00:42:28.759 --> 00:42:35.819
&gt;&gt;&gt; Where is the best place to learn about
at compat and what's going on with it.

00:42:35.819 --> 00:42:38.530
&gt;&gt;Adam Powell: Stay tuned, there will be an
Android developer post on it.

00:42:38.530 --> 00:42:47.119
&gt;&gt;&gt; I have a similar question on fragment
in the support library.

00:42:47.119 --> 00:42:50.330
&gt;&gt;Adam Powell: This is going to be another
fun one.

00:42:50.330 --> 00:42:51.330
Go ahead.

00:42:51.330 --> 00:42:53.339
&gt;&gt;&gt; Is it going to be integrated?

00:42:53.339 --> 00:43:00.579
&gt;&gt;Adam Powell: Preference -- oh, I see, so
preference fragments in the support library?

00:43:00.579 --> 00:43:03.140
We will take a look at it.

00:43:03.140 --> 00:43:07.300
There haven't been direct plans as far as
I know, but we will see what we can do.

00:43:07.300 --> 00:43:17.450
&gt;&gt;&gt; Before we had -- there was somebody talking
about the fact that we are implementing right

00:43:17.450 --> 00:43:18.950
to left text as -- inversed, too.

00:43:18.950 --> 00:43:20.349
&gt;&gt;Adam Powell: Has which been inversed?

00:43:20.349 --> 00:43:24.470
&gt;&gt;&gt; Inversed, right to left, right to left
text.

00:43:24.470 --> 00:43:26.829
&gt;&gt;Bruno Oliveira: I'm pretty sure that they
are.

00:43:26.829 --> 00:43:29.450
I'm pretty sure they follow the language setting.

00:43:29.450 --> 00:43:35.380
&gt;&gt;Adam Powell: The stuff that's been going
in so far bidirectional support has been fairly

00:43:35.380 --> 00:43:36.380
deep.

00:43:36.380 --> 00:43:40.160
It's also something that we tried to do more
or less automatically.

00:43:40.160 --> 00:43:45.559
I would say you could probably expect anything
that's in app-compat around button bar styles

00:43:45.559 --> 00:43:52.940
like that will be pretty much automatic, but
I don't think that -- I'm trying to think

00:43:52.940 --> 00:43:56.359
if that's something that's -- backporting
makes a whole lot of sense for.

00:43:56.359 --> 00:44:01.039
At the point where you start backporting all
of the bidirectional layout type stuff, you

00:44:01.039 --> 00:44:05.589
are essentially replacing half the UI tool
kit.

00:44:05.589 --> 00:44:14.230
&gt;&gt;&gt; Any plans to provide more adapters besides
SDK adapter regarding fragments?

00:44:14.230 --> 00:44:17.150
&gt;&gt;Adam Powell: I don't think I understand
the question.

00:44:17.150 --> 00:44:18.690
The listed app?

00:44:18.690 --> 00:44:29.089
&gt;&gt;&gt; For instance, there is a fragment listed
app but there is no for gridview or for any

00:44:29.089 --> 00:44:30.170
other views?

00:44:30.170 --> 00:44:32.890
&gt;&gt;Adam Powell: Fragment list adapter.

00:44:32.890 --> 00:44:33.890
A list fragment?

00:44:33.890 --> 00:44:34.890
&gt;&gt;&gt; Yes.

00:44:34.890 --> 00:44:35.890
&gt;&gt;Adam Powell: I see.

00:44:35.890 --> 00:44:38.529
I suppose we could add them.

00:44:38.529 --> 00:44:44.039
But I think the list fragment was more meant
to be there as little bit of parity with the

00:44:44.039 --> 00:44:47.000
list activity that we had before.

00:44:47.000 --> 00:44:49.470
That is something extraordinary simple.

00:44:49.470 --> 00:44:52.820
It has been farther down the priority list.

00:44:52.820 --> 00:44:57.289
We have wanted to handle the more complex
cases out of the box first.

00:44:57.289 --> 00:45:02.250
We can certainly take a look at it.

00:45:02.250 --> 00:45:03.260
&gt;&gt;&gt; Fragments in fragments.

00:45:03.260 --> 00:45:09.089
There's a common case where you have an action
bar with a navigation list.

00:45:09.089 --> 00:45:12.880
Depending what you choose, you put it in fragments
in and out.

00:45:12.880 --> 00:45:22.490
But the problem is what if you are using something
like a view pager and you have a view pager

00:45:22.490 --> 00:45:23.490
fragment?

00:45:23.490 --> 00:45:24.490
How do you deal with that?

00:45:24.490 --> 00:45:25.490
I know there are work-around.

00:45:25.490 --> 00:45:28.359
Is there any way we can get it done normally?

00:45:28.359 --> 00:45:34.670
&gt;&gt;Adam Powell: Most of the times when I have
taken a look deeper into some of these cases,

00:45:34.670 --> 00:45:39.210
it generally means there's something kind
of weird about the layout to begin with.

00:45:39.210 --> 00:45:44.700
We generally don't really want to support
fragments in fragments right now.

00:45:44.700 --> 00:45:48.640
It's come up over and over and it sounds like
a good idea; sounds like a bad idea.

00:45:48.640 --> 00:45:50.490
Sounds like a good idea; sounds like a bad
idea.

00:45:50.490 --> 00:45:51.970
We go back and forth.

00:45:51.970 --> 00:45:57.290
A lot of times when it comes to the view pager
specifically, what we usually end up doing

00:45:57.290 --> 00:46:01.670
is -- this is a case where I wish I had a
white board.

00:46:01.670 --> 00:46:05.369
If you want to come down to the office hours
later to do more, that's great.

00:46:05.369 --> 00:46:08.579
But I will try to wrap it up.

00:46:08.579 --> 00:46:11.730
Generally what we will try and do, if you
have something like a two-pane layout where

00:46:11.730 --> 00:46:17.900
you have a list and view pager off to the
side, then at some point you have like a top

00:46:17.900 --> 00:46:21.819
level skeleton that is sort of where all the
fragments go, right?

00:46:21.819 --> 00:46:24.250
So it's essentially your top level layout.

00:46:24.250 --> 00:46:28.230
In a case like that, conceptually the view
pager is part of that skeleton.

00:46:28.230 --> 00:46:34.000
You can kind of thing of the fragments that
the view pager brings in and out as being

00:46:34.000 --> 00:46:38.109
on the same level as that side bar list itself.

00:46:38.109 --> 00:46:42.510
So in those cases, the view pager would actually
be part of the top level lay out and not in

00:46:42.510 --> 00:46:44.010
a fragment on its own.

00:46:44.010 --> 00:46:48.589
It would manage the internal fragments itself
and that avoids the need for nesting.

00:46:48.589 --> 00:46:49.660
&gt;&gt;&gt; Okay.

00:46:49.660 --> 00:46:58.200
But you are aware of, though, the work-arounds
where people have to load -- set the adapters

00:46:58.200 --> 00:47:06.790
for the view pager in a separate handler just
to avoid the exception that comes up?

00:47:06.790 --> 00:47:07.790
&gt;&gt;Bruno Oliveira: I have never seen that.

00:47:07.790 --> 00:47:08.790
&gt;&gt;Adam Powell: Which exception?

00:47:08.790 --> 00:47:09.900
I think this might be something a little bit
different.

00:47:09.900 --> 00:47:17.220
&gt;&gt;&gt; Maybe I will talk about it --
&gt;&gt;Adam Powell: Come see me in the office hours

00:47:17.220 --> 00:47:18.220
afterwards.

00:47:18.220 --> 00:47:19.220
I'm interested.

00:47:19.220 --> 00:47:20.220
Is that all?

00:47:20.220 --> 00:47:22.589
&gt;&gt;Bruno Oliveira: Any more questions?

00:47:22.589 --> 00:47:25.890
&gt;&gt;Adam Powell: One more.

00:47:25.890 --> 00:47:36.280
&gt;&gt;&gt; There used to be an expandable list activity.

00:47:36.280 --> 00:47:45.660
Is there any plans to, like, pull the expandable
list fragment into the app compatibility as

00:47:45.660 --> 00:47:46.660
well.

00:47:46.660 --> 00:47:47.660
There are open source implementations out
there.

00:47:47.660 --> 00:47:48.660
Is there anything you are going to look at
that?

00:47:48.660 --> 00:47:49.660
&gt;&gt;Adam Powell: If there are contributions
to AOSP.

00:47:49.660 --> 00:47:51.890
If there are implementations that are Apache
2 that someone would like to submit.

00:47:51.890 --> 00:47:55.130
&gt;&gt;&gt; It is on (indiscernible) android.com with
the snippet.

00:47:55.130 --> 00:47:56.540
&gt;&gt;Adam Powell: Is there?

00:47:56.540 --> 00:47:57.540
Great.

00:47:57.540 --> 00:47:59.260
We will take a look at that time.

00:47:59.260 --> 00:48:05.029
In terms of taking code snippets pasted into
the bug tracker, that ends up being problematic

00:48:05.029 --> 00:48:06.029
for us.

00:48:06.029 --> 00:48:08.819
It needs to be loaded into AOSP for that sort
of thing.

00:48:08.819 --> 00:48:12.789
&gt;&gt;&gt; Sure, we can take a look at that.

00:48:12.789 --> 00:48:14.450
&gt;&gt;Adam Powell: Is that it?

00:48:14.450 --> 00:48:16.170
&gt;&gt;Bruno Oliveira: Thank you very much.

00:48:16.170 --> 00:48:16.859
&gt;&gt;Adam Powell: Thank you all.

