WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[D. Evans] In order to learn about programming, we need to learn a new language.

00:00:03.000 --> 00:00:06.000
This will be a way to describe what we want the computer to do

00:00:06.000 --> 00:00:10.000
in a much more precise way than we could in a natural language like English.

00:00:10.000 --> 00:00:14.000
And it's a way to describe programs that the Python interpreter can run.

00:00:14.000 --> 00:00:17.000
One of the best ways to learn a programming language is to just try things.

00:00:17.000 --> 00:00:21.000
You can try that in the Python interpreter that's running in your browser.

00:00:21.000 --> 00:00:25.000
Let's, for example, try running print 2 + 2 +.

00:00:25.000 --> 00:00:31.000
In English someone could probably guess that the value of 2 + 2 + should be 4.

00:00:31.000 --> 00:00:33.000
In Python when we try running this, we get an error.

00:00:33.000 --> 00:00:38.000
And the reason we get an error is that this is not actually part of the Python language.

00:00:38.000 --> 00:00:41.000
The Python interpreter only knows how to evaluate code

00:00:41.000 --> 00:00:43.000
that's part of the Python language.

00:00:43.000 --> 00:00:46.000
If you try to evaluate something that's not part of the Python language,

00:00:46.000 --> 00:00:48.000
it will give you an error.

00:00:48.000 --> 00:00:50.000
Errors look a bit scary the way they print out,

00:00:50.000 --> 00:00:52.000
but there's nothing bad that can happen.

00:00:52.000 --> 00:00:54.000
It's perfectly okay to try running code.

00:00:54.000 --> 00:00:57.000
If it produces an error, that's one of the ways to learn about programming.

00:00:57.000 --> 00:01:00.000
The error we got here is what's called a syntax error.

00:01:00.000 --> 00:01:05.000
That means that what we tried to evaluate is not actually part of the Python language.

00:01:05.000 --> 00:01:10.000
Like English, Python has a grammar that defines what strings are in the language.

00:01:10.000 --> 00:01:13.000
In English we can make lots of sentences that are not completely grammatical

00:01:13.000 --> 00:01:15.000
and people still understand them,

00:01:15.000 --> 00:01:18.000
but there is some underlying grammar behind the language.

00:01:18.000 --> 00:01:21.000
Those of you who are native English speakers might have learned rules like this

00:01:21.000 --> 00:01:23.000
in what was once called grammar school.

00:01:23.000 --> 00:01:25.000
Those of you who learned English as a second language

00:01:25.000 --> 00:01:28.000
probably learned rules like this when you were learning English.

00:01:28.000 --> 00:01:31.000
English has a rule that says you can make a sentence

00:01:31.000 --> 00:01:36.000
by combining a subject with a verb followed by an object.

00:01:36.000 --> 00:01:38.000
Almost every language has a rule sort of like this.

00:01:38.000 --> 00:01:41.000
The order of the subject and the verb and the object might be different,

00:01:41.000 --> 00:01:45.000
but there's a way to combine those 3 things to form a sentence.

00:01:45.000 --> 00:01:50.000
The subject could be a noun, the object could also be a noun,

00:01:50.000 --> 00:01:53.000
and then each of these parts of speech--well, we have lots of things they could be.

00:01:53.000 --> 00:01:57.000
So a verb could be the word eat.

00:01:57.000 --> 00:02:00.000
A verb could also be the word like.

00:02:00.000 --> 00:02:03.000
And there are lots of other words that the verb could be.

00:02:03.000 --> 00:02:07.000
A noun could be the word I, a noun could be the word Python,

00:02:07.000 --> 00:02:09.000
a noun could be the word cookies.

00:02:09.000 --> 00:02:13.000
The actual English grammar is of course much larger and more complex than this,

00:02:13.000 --> 00:02:16.000
but we can still think of it as having rules like this

00:02:16.000 --> 00:02:19.000
that allow us to form sentences from the parts of speech that we know,

00:02:19.000 --> 00:02:22.000
from the words that make those parts of speech.

00:02:22.000 --> 00:02:26.000
The way we're writing grammars here is a notation called Backus-Naur Form,

00:02:26.000 --> 00:02:29.000
and this was invented by John Backus.

00:02:29.000 --> 00:02:33.000
John Backus was the lead designer of the Fortran programming language

00:02:33.000 --> 00:02:35.000
back in the 1950s at IBM.

00:02:35.000 --> 00:02:38.000
This was one of the first widely used programming languages.

00:02:38.000 --> 00:02:41.000
The way they described the Fortran language was with lots of examples

00:02:41.000 --> 00:02:43.000
and text explaining what they meant.

00:02:43.000 --> 00:02:47.000
This is a shot from the actual manual for the first version of Fortran.

00:02:47.000 --> 00:02:49.000
This worked okay.

00:02:49.000 --> 00:02:51.000
Many programmers were able to understand it

00:02:51.000 --> 00:02:54.000
and guess correctly what it meant, but it was not nearly precise enough.

00:02:54.000 --> 00:02:57.000
And when it came time to design a later language,

00:02:57.000 --> 00:02:59.000
which was the language called ALGOL,

00:02:59.000 --> 00:03:04.000
it became clear that this informal way of describing languages wasn't precise enough,

00:03:04.000 --> 99:59:59.000
and John Backus invented the notation that we're using here to describe languages.

