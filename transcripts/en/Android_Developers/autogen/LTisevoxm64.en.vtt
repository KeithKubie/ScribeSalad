WEBVTT
Kind: captions
Language: en

00:00:07.580 --> 00:00:10.820
 
hi I'm Peter Brinkman an engineer on the

00:00:10.820 --> 00:00:10.830
hi I'm Peter Brinkman an engineer on the
 

00:00:10.830 --> 00:00:12.530
hi I'm Peter Brinkman an engineer on the
speech infrastructure team in New York

00:00:12.530 --> 00:00:12.540
speech infrastructure team in New York
 

00:00:12.540 --> 00:00:14.660
speech infrastructure team in New York
and today I'd like to tell you about my

00:00:14.660 --> 00:00:14.670
and today I'd like to tell you about my
 

00:00:14.670 --> 00:00:16.550
and today I'd like to tell you about my
twenty percent project the patch field

00:00:16.550 --> 00:00:16.560
twenty percent project the patch field
 

00:00:16.560 --> 00:00:18.920
twenty percent project the patch field
audio architecture for Android in a

00:00:18.920 --> 00:00:18.930
audio architecture for Android in a
 

00:00:18.930 --> 00:00:20.900
audio architecture for Android in a
nutshell the idea is to allow you to

00:00:20.900 --> 00:00:20.910
nutshell the idea is to allow you to
 

00:00:20.910 --> 00:00:22.670
nutshell the idea is to allow you to
implement audio functionality such as

00:00:22.670 --> 00:00:22.680
implement audio functionality such as
 

00:00:22.680 --> 00:00:25.250
implement audio functionality such as
synthesizers and effects with minimum

00:00:25.250 --> 00:00:25.260
synthesizers and effects with minimum
 

00:00:25.260 --> 00:00:27.679
synthesizers and effects with minimum
fuss and to patch them together in a

00:00:27.679 --> 00:00:27.689
fuss and to patch them together in a
 

00:00:27.689 --> 00:00:30.320
fuss and to patch them together in a
patch field as you would in a recording

00:00:30.320 --> 00:00:30.330
patch field as you would in a recording
 

00:00:30.330 --> 00:00:33.080
patch field as you would in a recording
studio the core of patch field is a

00:00:33.080 --> 00:00:33.090
studio the core of patch field is a
 

00:00:33.090 --> 00:00:34.610
studio the core of patch field is a
service that manages the signal

00:00:34.610 --> 00:00:34.620
service that manages the signal
 

00:00:34.620 --> 00:00:36.950
service that manages the signal
processing graph and it also acts as a

00:00:36.950 --> 00:00:36.960
processing graph and it also acts as a
 

00:00:36.960 --> 00:00:39.830
processing graph and it also acts as a
central hub for audio so the service

00:00:39.830 --> 00:00:39.840
central hub for audio so the service
 

00:00:39.840 --> 00:00:41.720
central hub for audio so the service
managers all your audio units such as

00:00:41.720 --> 00:00:41.730
managers all your audio units such as
 

00:00:41.730 --> 00:00:45.860
managers all your audio units such as
synthesizers or effects and it provides

00:00:45.860 --> 00:00:45.870
synthesizers or effects and it provides
 

00:00:45.870 --> 00:00:47.750
synthesizers or effects and it provides
all kinds of functionality for and for

00:00:47.750 --> 00:00:47.760
all kinds of functionality for and for
 

00:00:47.760 --> 00:00:50.029
all kinds of functionality for and for
connecting them now you can run the

00:00:50.029 --> 00:00:50.039
connecting them now you can run the
 

00:00:50.039 --> 00:00:53.380
connecting them now you can run the
service locally in your app or remotely

00:00:53.380 --> 00:00:53.390
service locally in your app or remotely
 

00:00:53.390 --> 00:00:55.910
service locally in your app or remotely
when it's running locally then

00:00:55.910 --> 00:00:55.920
when it's running locally then
 

00:00:55.920 --> 00:00:57.439
when it's running locally then
essentially it gives you a powerful way

00:00:57.439 --> 00:00:57.449
essentially it gives you a powerful way
 

00:00:57.449 --> 00:00:59.270
essentially it gives you a powerful way
of organ organizing audio within your

00:00:59.270 --> 00:00:59.280
of organ organizing audio within your
 

00:00:59.280 --> 00:01:02.119
of organ organizing audio within your
app and it gives you also a couple of

00:01:02.119 --> 00:01:02.129
app and it gives you also a couple of
 

00:01:02.129 --> 00:01:04.729
app and it gives you also a couple of
other nice features such as support for

00:01:04.729 --> 00:01:04.739
other nice features such as support for
 

00:01:04.739 --> 00:01:07.460
other nice features such as support for
metaphor multiprocessors when it's

00:01:07.460 --> 00:01:07.470
metaphor multiprocessors when it's
 

00:01:07.470 --> 00:01:09.530
metaphor multiprocessors when it's
running remotely you get an added

00:01:09.530 --> 00:01:09.540
running remotely you get an added
 

00:01:09.540 --> 00:01:12.289
running remotely you get an added
feature namely you get support for inter

00:01:12.289 --> 00:01:12.299
feature namely you get support for inter
 

00:01:12.299 --> 00:01:14.630
feature namely you get support for inter
app audio routing meaning that say you

00:01:14.630 --> 00:01:14.640
app audio routing meaning that say you
 

00:01:14.640 --> 00:01:16.550
app audio routing meaning that say you
might have one app that just acts as a

00:01:16.550 --> 00:01:16.560
might have one app that just acts as a
 

00:01:16.560 --> 00:01:18.710
might have one app that just acts as a
synthesizer you may have another app

00:01:18.710 --> 00:01:18.720
synthesizer you may have another app
 

00:01:18.720 --> 00:01:20.719
synthesizer you may have another app
that acts as an effects rack you can

00:01:20.719 --> 00:01:20.729
that acts as an effects rack you can
 

00:01:20.729 --> 00:01:23.240
that acts as an effects rack you can
connect them and then all your signals

00:01:23.240 --> 00:01:23.250
connect them and then all your signals
 

00:01:23.250 --> 00:01:26.710
connect them and then all your signals
will flow from one app to another and

00:01:26.710 --> 00:01:26.720
will flow from one app to another and
 

00:01:26.720 --> 00:01:29.200
will flow from one app to another and
you get a lot of flexibility that way

00:01:29.200 --> 00:01:29.210
you get a lot of flexibility that way
 

00:01:29.210 --> 00:01:32.719
you get a lot of flexibility that way
now in terms of AP is there are two AP

00:01:32.719 --> 00:01:32.729
now in terms of AP is there are two AP
 

00:01:32.729 --> 00:01:34.969
now in terms of AP is there are two AP
is for you to work with there's a

00:01:34.969 --> 00:01:34.979
is for you to work with there's a
 

00:01:34.979 --> 00:01:37.399
is for you to work with there's a
gunshot there's a client API in Java and

00:01:37.399 --> 00:01:37.409
gunshot there's a client API in Java and
 

00:01:37.409 --> 00:01:40.850
gunshot there's a client API in Java and
the purpose of that Java API is to let

00:01:40.850 --> 00:01:40.860
the purpose of that Java API is to let
 

00:01:40.860 --> 00:01:42.980
the purpose of that Java API is to let
you query and manipulate the signal

00:01:42.980 --> 00:01:42.990
you query and manipulate the signal
 

00:01:42.990 --> 00:01:45.410
you query and manipulate the signal
processing graph so you can get a list

00:01:45.410 --> 00:01:45.420
processing graph so you can get a list
 

00:01:45.420 --> 00:01:47.780
processing graph so you can get a list
of the audio modules that are currently

00:01:47.780 --> 00:01:47.790
of the audio modules that are currently
 

00:01:47.790 --> 00:01:49.819
of the audio modules that are currently
available you can connect all your

00:01:49.819 --> 00:01:49.829
available you can connect all your
 

00:01:49.829 --> 00:01:52.190
available you can connect all your
modules you can disconnect them you can

00:01:52.190 --> 00:01:52.200
modules you can disconnect them you can
 

00:01:52.200 --> 00:01:55.609
modules you can disconnect them you can
enable or disable them and you can do a

00:01:55.609 --> 00:01:55.619
enable or disable them and you can do a
 

00:01:55.619 --> 00:01:59.630
enable or disable them and you can do a
number of other things as well and the

00:01:59.630 --> 00:01:59.640
number of other things as well and the
 

00:01:59.640 --> 00:02:02.300
number of other things as well and the
second API is the audio app module API

00:02:02.300 --> 00:02:02.310
second API is the audio app module API
 

00:02:02.310 --> 00:02:04.850
second API is the audio app module API
itself that one works with Java as well

00:02:04.850 --> 00:02:04.860
itself that one works with Java as well
 

00:02:04.860 --> 00:02:07.249
itself that one works with Java as well
as C and that's what you use for

00:02:07.249 --> 00:02:07.259
as C and that's what you use for
 

00:02:07.259 --> 00:02:09.350
as C and that's what you use for
implementing new audio functionalities

00:02:09.350 --> 00:02:09.360
implementing new audio functionalities
 

00:02:09.360 --> 00:02:11.610
implementing new audio functionalities
such as well synthesizers and

00:02:11.610 --> 00:02:11.620
such as well synthesizers and
 

00:02:11.620 --> 00:02:14.220
such as well synthesizers and
effects all right let's bring up a

00:02:14.220 --> 00:02:14.230
effects all right let's bring up a
 

00:02:14.230 --> 00:02:17.250
effects all right let's bring up a
little control app for patch field so

00:02:17.250 --> 00:02:17.260
little control app for patch field so
 

00:02:17.260 --> 00:02:19.380
little control app for patch field so
right now you see we have an on/off

00:02:19.380 --> 00:02:19.390
right now you see we have an on/off
 

00:02:19.390 --> 00:02:21.660
right now you see we have an on/off
button for enabling or disabling audio

00:02:21.660 --> 00:02:21.670
button for enabling or disabling audio
 

00:02:21.670 --> 00:02:24.270
button for enabling or disabling audio
processing and right off the bat we get

00:02:24.270 --> 00:02:24.280
processing and right off the bat we get
 

00:02:24.280 --> 00:02:27.449
processing and right off the bat we get
to audio modules we get one for the

00:02:27.449 --> 00:02:27.459
to audio modules we get one for the
 

00:02:27.459 --> 00:02:31.710
to audio modules we get one for the
microphones of the device so we see 11

00:02:31.710 --> 00:02:31.720
microphones of the device so we see 11
 

00:02:31.720 --> 00:02:33.930
microphones of the device so we see 11
audio module that has two outputs one

00:02:33.930 --> 00:02:33.940
audio module that has two outputs one
 

00:02:33.940 --> 00:02:35.369
audio module that has two outputs one
for one for each of the built-in

00:02:35.369 --> 00:02:35.379
for one for each of the built-in
 

00:02:35.379 --> 00:02:38.250
for one for each of the built-in
microphones and we see another audio

00:02:38.250 --> 00:02:38.260
microphones and we see another audio
 

00:02:38.260 --> 00:02:41.580
microphones and we see another audio
module with two inputs and those are the

00:02:41.580 --> 00:02:41.590
module with two inputs and those are the
 

00:02:41.590 --> 00:02:43.470
module with two inputs and those are the
inputs for the left speaker and for the

00:02:43.470 --> 00:02:43.480
inputs for the left speaker and for the
 

00:02:43.480 --> 00:02:45.680
inputs for the left speaker and for the
right speaker and for example I might

00:02:45.680 --> 00:02:45.690
right speaker and for example I might
 

00:02:45.690 --> 00:02:49.410
right speaker and for example I might
say connect one of the microphones to

00:02:49.410 --> 00:02:49.420
say connect one of the microphones to
 

00:02:49.420 --> 00:02:51.930
say connect one of the microphones to
one of the speakers and if I were to

00:02:51.930 --> 00:02:51.940
one of the speakers and if I were to
 

00:02:51.940 --> 00:02:54.030
one of the speakers and if I were to
turn audio processing on right now we

00:02:54.030 --> 00:02:54.040
turn audio processing on right now we
 

00:02:54.040 --> 00:02:56.130
turn audio processing on right now we
would get horrible feedback so let's not

00:02:56.130 --> 00:02:56.140
would get horrible feedback so let's not
 

00:02:56.140 --> 00:03:00.589
would get horrible feedback so let's not
do that instead let's launch another app

00:03:00.589 --> 00:03:00.599
do that instead let's launch another app
 

00:03:00.599 --> 00:03:04.410
do that instead let's launch another app
so this one is a very simple app that

00:03:04.410 --> 00:03:04.420
so this one is a very simple app that
 

00:03:04.420 --> 00:03:06.390
so this one is a very simple app that
just loads a WAV file and gets ready to

00:03:06.390 --> 00:03:06.400
just loads a WAV file and gets ready to
 

00:03:06.400 --> 00:03:08.759
just loads a WAV file and gets ready to
play it and when we go back to our

00:03:08.759 --> 00:03:08.769
play it and when we go back to our
 

00:03:08.769 --> 00:03:13.050
play it and when we go back to our
control app we see that a new audio

00:03:13.050 --> 00:03:13.060
control app we see that a new audio
 

00:03:13.060 --> 00:03:14.520
control app we see that a new audio
module has appeared and so now we

00:03:14.520 --> 00:03:14.530
module has appeared and so now we
 

00:03:14.530 --> 00:03:17.250
module has appeared and so now we
haven't have an audio module for our wav

00:03:17.250 --> 00:03:17.260
haven't have an audio module for our wav
 

00:03:17.260 --> 00:03:20.670
haven't have an audio module for our wav
file and let's bring up yet another

00:03:20.670 --> 00:03:20.680
file and let's bring up yet another
 

00:03:20.680 --> 00:03:24.809
file and let's bring up yet another
little app so here this app provides a

00:03:24.809 --> 00:03:24.819
little app so here this app provides a
 

00:03:24.819 --> 00:03:29.220
little app so here this app provides a
low-pass filter and once again if I go

00:03:29.220 --> 00:03:29.230
low-pass filter and once again if I go
 

00:03:29.230 --> 00:03:33.089
low-pass filter and once again if I go
back to the control app doesn't there's

00:03:33.089 --> 00:03:33.099
back to the control app doesn't there's
 

00:03:33.099 --> 00:03:34.440
back to the control app doesn't there's
a new module right here that represents

00:03:34.440 --> 00:03:34.450
a new module right here that represents
 

00:03:34.450 --> 00:03:37.050
a new module right here that represents
our low pass filter and now we can

00:03:37.050 --> 00:03:37.060
our low pass filter and now we can
 

00:03:37.060 --> 00:03:40.979
our low pass filter and now we can
connect them say I I send the audio from

00:03:40.979 --> 00:03:40.989
connect them say I I send the audio from
 

00:03:40.989 --> 00:03:43.020
connect them say I I send the audio from
the wave file into the low pass filter

00:03:43.020 --> 00:03:43.030
the wave file into the low pass filter
 

00:03:43.030 --> 00:03:46.050
the wave file into the low pass filter
and i sent the output of the low pass

00:03:46.050 --> 00:03:46.060
and i sent the output of the low pass
 

00:03:46.060 --> 00:03:49.289
and i sent the output of the low pass
filter to the speakers and now if i turn

00:03:49.289 --> 00:03:49.299
filter to the speakers and now if i turn
 

00:03:49.299 --> 00:03:53.430
filter to the speakers and now if i turn
on all your processing we hear the wave

00:03:53.430 --> 00:03:53.440
on all your processing we hear the wave
 

00:03:53.440 --> 00:03:56.699
on all your processing we hear the wave
fun

00:03:56.699 --> 00:03:56.709
 
 

00:03:56.709 --> 00:04:00.160
 
now we can go to our low pass filter and

00:04:00.160 --> 00:04:00.170
now we can go to our low pass filter and
 

00:04:00.170 --> 00:04:04.809
now we can go to our low pass filter and
if we play with the cutoff frequency you

00:04:04.809 --> 00:04:04.819
if we play with the cutoff frequency you
 

00:04:04.819 --> 00:04:06.759
if we play with the cutoff frequency you
can tell that the higher frequencies go

00:04:06.759 --> 00:04:06.769
can tell that the higher frequencies go
 

00:04:06.769 --> 00:04:09.850
can tell that the higher frequencies go
away some of the low pass filter acts as

00:04:09.850 --> 00:04:09.860
away some of the low pass filter acts as
 

00:04:09.860 --> 00:04:15.890
away some of the low pass filter acts as
expected

00:04:15.890 --> 00:04:15.900
 
 

00:04:15.900 --> 00:04:19.020
 
okay so so that was the core

00:04:19.020 --> 00:04:19.030
okay so so that was the core
 

00:04:19.030 --> 00:04:20.850
okay so so that was the core
functionality of patch field in a

00:04:20.850 --> 00:04:20.860
functionality of patch field in a
 

00:04:20.860 --> 00:04:23.880
functionality of patch field in a
nutshell all right let's take a look at

00:04:23.880 --> 00:04:23.890
nutshell all right let's take a look at
 

00:04:23.890 --> 00:04:26.180
nutshell all right let's take a look at
the code the patch field service

00:04:26.180 --> 00:04:26.190
the code the patch field service
 

00:04:26.190 --> 00:04:29.220
the code the patch field service
implements an interface called eyepatch

00:04:29.220 --> 00:04:29.230
implements an interface called eyepatch
 

00:04:29.230 --> 00:04:32.160
implements an interface called eyepatch
field service and this interface

00:04:32.160 --> 00:04:32.170
field service and this interface
 

00:04:32.170 --> 00:04:34.230
field service and this interface
consists of three types of methods you

00:04:34.230 --> 00:04:34.240
consists of three types of methods you
 

00:04:34.240 --> 00:04:37.080
consists of three types of methods you
have methods for manipulating the state

00:04:37.080 --> 00:04:37.090
have methods for manipulating the state
 

00:04:37.090 --> 00:04:39.410
have methods for manipulating the state
of the patch field service you have

00:04:39.410 --> 00:04:39.420
of the patch field service you have
 

00:04:39.420 --> 00:04:42.000
of the patch field service you have
methods for querying the state of the

00:04:42.000 --> 00:04:42.010
methods for querying the state of the
 

00:04:42.010 --> 00:04:44.370
methods for querying the state of the
service and you have methods for

00:04:44.370 --> 00:04:44.380
service and you have methods for
 

00:04:44.380 --> 00:04:47.220
service and you have methods for
internal use so so when you're

00:04:47.220 --> 00:04:47.230
internal use so so when you're
 

00:04:47.230 --> 00:04:48.870
internal use so so when you're
manipulating the state of the service

00:04:48.870 --> 00:04:48.880
manipulating the state of the service
 

00:04:48.880 --> 00:04:51.660
manipulating the state of the service
you can for instance you can turn on or

00:04:51.660 --> 00:04:51.670
you can for instance you can turn on or
 

00:04:51.670 --> 00:04:55.110
you can for instance you can turn on or
off all your processing that's what the

00:04:55.110 --> 00:04:55.120
off all your processing that's what the
 

00:04:55.120 --> 00:04:58.230
off all your processing that's what the
on/off button in the control app was for

00:04:58.230 --> 00:04:58.240
on/off button in the control app was for
 

00:04:58.240 --> 00:05:01.350
on/off button in the control app was for
that we saw a minute ago you can

00:05:01.350 --> 00:05:01.360
that we saw a minute ago you can
 

00:05:01.360 --> 00:05:05.520
that we saw a minute ago you can
activate and deactivate modules you can

00:05:05.520 --> 00:05:05.530
activate and deactivate modules you can
 

00:05:05.530 --> 00:05:08.160
activate and deactivate modules you can
connect ports of modules or you can

00:05:08.160 --> 00:05:08.170
connect ports of modules or you can
 

00:05:08.170 --> 00:05:10.770
connect ports of modules or you can
disconnect ports so essentially you can

00:05:10.770 --> 00:05:10.780
disconnect ports so essentially you can
 

00:05:10.780 --> 00:05:12.480
disconnect ports so essentially you can
you can make the changes that you would

00:05:12.480 --> 00:05:12.490
you can make the changes that you would
 

00:05:12.490 --> 00:05:15.720
you can make the changes that you would
expect and then you have matching

00:05:15.720 --> 00:05:15.730
expect and then you have matching
 

00:05:15.730 --> 00:05:18.710
expect and then you have matching
methods that tell you for instance

00:05:18.710 --> 00:05:18.720
methods that tell you for instance
 

00:05:18.720 --> 00:05:22.200
methods that tell you for instance
whether two ports are connected you can

00:05:22.200 --> 00:05:22.210
whether two ports are connected you can
 

00:05:22.210 --> 00:05:24.300
whether two ports are connected you can
get a list of the audio modules that are

00:05:24.300 --> 00:05:24.310
get a list of the audio modules that are
 

00:05:24.310 --> 00:05:27.090
get a list of the audio modules that are
currently installed and you have a

00:05:27.090 --> 00:05:27.100
currently installed and you have a
 

00:05:27.100 --> 00:05:30.420
currently installed and you have a
number of other methods as well so now

00:05:30.420 --> 00:05:30.430
number of other methods as well so now
 

00:05:30.430 --> 00:05:33.720
number of other methods as well so now
if you're implementing a pageview client

00:05:33.720 --> 00:05:33.730
if you're implementing a pageview client
 

00:05:33.730 --> 00:05:36.470
if you're implementing a pageview client
and you would like to keep up to date on

00:05:36.470 --> 00:05:36.480
and you would like to keep up to date on
 

00:05:36.480 --> 00:05:39.330
and you would like to keep up to date on
changes in the state of the patch viewed

00:05:39.330 --> 00:05:39.340
changes in the state of the patch viewed
 

00:05:39.340 --> 00:05:41.670
changes in the state of the patch viewed
service then you can implement this

00:05:41.670 --> 00:05:41.680
service then you can implement this
 

00:05:41.680 --> 00:05:44.520
service then you can implement this
eyepatch view client interface and now

00:05:44.520 --> 00:05:44.530
eyepatch view client interface and now
 

00:05:44.530 --> 00:05:46.470
eyepatch view client interface and now
if you register now if you register

00:05:46.470 --> 00:05:46.480
if you register now if you register
 

00:05:46.480 --> 00:05:48.690
if you register now if you register
yourself with the patch field service

00:05:48.690 --> 00:05:48.700
yourself with the patch field service
 

00:05:48.700 --> 00:05:50.310
yourself with the patch field service
you will get callbacks whenever

00:05:50.310 --> 00:05:50.320
you will get callbacks whenever
 

00:05:50.320 --> 00:05:52.050
you will get callbacks whenever
something happens so you might get a

00:05:52.050 --> 00:05:52.060
something happens so you might get a
 

00:05:52.060 --> 00:05:54.120
something happens so you might get a
call back when a module is created or

00:05:54.120 --> 00:05:54.130
call back when a module is created or
 

00:05:54.130 --> 00:05:56.610
call back when a module is created or
when a module is deleted when ports are

00:05:56.610 --> 00:05:56.620
when a module is deleted when ports are
 

00:05:56.620 --> 00:06:01.020
when a module is deleted when ports are
connected or disconnected and so on

00:06:01.020 --> 00:06:01.030
connected or disconnected and so on
 

00:06:01.030 --> 00:06:03.570
connected or disconnected and so on
so this was essentially bookkeeping the

00:06:03.570 --> 00:06:03.580
so this was essentially bookkeeping the
 

00:06:03.580 --> 00:06:05.430
so this was essentially bookkeeping the
interesting part really is the audio

00:06:05.430 --> 00:06:05.440
interesting part really is the audio
 

00:06:05.440 --> 00:06:07.230
interesting part really is the audio
module API because that's where you

00:06:07.230 --> 00:06:07.240
module API because that's where you
 

00:06:07.240 --> 00:06:11.970
module API because that's where you
implement audio functionality so the

00:06:11.970 --> 00:06:11.980
implement audio functionality so the
 

00:06:11.980 --> 00:06:15.180
implement audio functionality so the
foundation of it is a class called audio

00:06:15.180 --> 00:06:15.190
foundation of it is a class called audio
 

00:06:15.190 --> 00:06:18.240
foundation of it is a class called audio
module and it's an abstract test that

00:06:18.240 --> 00:06:18.250
module and it's an abstract test that
 

00:06:18.250 --> 00:06:20.820
module and it's an abstract test that
has four methods that you will need to

00:06:20.820 --> 00:06:20.830
has four methods that you will need to
 

00:06:20.830 --> 00:06:23.310
has four methods that you will need to
implement the most important of those

00:06:23.310 --> 00:06:23.320
implement the most important of those
 

00:06:23.320 --> 00:06:27.540
implement the most important of those
methods is one called configure where is

00:06:27.540 --> 00:06:27.550
methods is one called configure where is
 

00:06:27.550 --> 00:06:31.890
methods is one called configure where is
it here and the purpose of the configure

00:06:31.890 --> 00:06:31.900
it here and the purpose of the configure
 

00:06:31.900 --> 00:06:35.220
it here and the purpose of the configure
method is to connect your audio module

00:06:35.220 --> 00:06:35.230
method is to connect your audio module
 

00:06:35.230 --> 00:06:37.440
method is to connect your audio module
object to the corresponding data

00:06:37.440 --> 00:06:37.450
object to the corresponding data
 

00:06:37.450 --> 00:06:39.390
object to the corresponding data
structures in the patch field service

00:06:39.390 --> 00:06:39.400
structures in the patch field service
 

00:06:39.400 --> 00:06:42.620
structures in the patch field service
and let's see how this works in practice

00:06:42.620 --> 00:06:42.630
and let's see how this works in practice
 

00:06:42.630 --> 00:06:45.570
and let's see how this works in practice
so let's look at the Lopez module that

00:06:45.570 --> 00:06:45.580
so let's look at the Lopez module that
 

00:06:45.580 --> 00:06:49.080
so let's look at the Lopez module that
we saw in action in our little demo so

00:06:49.080 --> 00:06:49.090
we saw in action in our little demo so
 

00:06:49.090 --> 00:06:51.620
we saw in action in our little demo so
here's a module called Lopez module and

00:06:51.620 --> 00:06:51.630
here's a module called Lopez module and
 

00:06:51.630 --> 00:06:54.750
here's a module called Lopez module and
it extends the audio module class that

00:06:54.750 --> 00:06:54.760
it extends the audio module class that
 

00:06:54.760 --> 00:06:58.640
it extends the audio module class that
we just saw and sure enough it

00:06:58.640 --> 00:06:58.650
we just saw and sure enough it
 

00:06:58.650 --> 00:07:01.350
we just saw and sure enough it
implements the configure method that I'm

00:07:01.350 --> 00:07:01.360
implements the configure method that I'm
 

00:07:01.360 --> 00:07:04.320
implements the configure method that I'm
that I just mentioned so now this

00:07:04.320 --> 00:07:04.330
that I just mentioned so now this
 

00:07:04.330 --> 00:07:07.170
that I just mentioned so now this
configure method internally just takes

00:07:07.170 --> 00:07:07.180
configure method internally just takes
 

00:07:07.180 --> 00:07:12.500
configure method internally just takes
the handle that it received before and

00:07:12.500 --> 00:07:12.510
the handle that it received before and
 

00:07:12.510 --> 00:07:15.230
the handle that it received before and
the number of channels that it wants and

00:07:15.230 --> 00:07:15.240
the number of channels that it wants and
 

00:07:15.240 --> 00:07:20.220
the number of channels that it wants and
sends it to the two I native method

00:07:20.220 --> 00:07:20.230
sends it to the two I native method
 

00:07:20.230 --> 00:07:23.010
sends it to the two I native method
called configure native components so

00:07:23.010 --> 00:07:23.020
called configure native components so
 

00:07:23.020 --> 00:07:24.330
called configure native components so
let's look at the implementation of that

00:07:24.330 --> 00:07:24.340
let's look at the implementation of that
 

00:07:24.340 --> 00:07:26.670
let's look at the implementation of that
native method that's in a file called

00:07:26.670 --> 00:07:26.680
native method that's in a file called
 

00:07:26.680 --> 00:07:33.810
native method that's in a file called
low-pass see it's right here and this

00:07:33.810 --> 00:07:33.820
low-pass see it's right here and this
 

00:07:33.820 --> 00:07:37.800
low-pass see it's right here and this
method allocates space for a data

00:07:37.800 --> 00:07:37.810
method allocates space for a data
 

00:07:37.810 --> 00:07:39.360
method allocates space for a data
structure that will hold all the

00:07:39.360 --> 00:07:39.370
structure that will hold all the
 

00:07:39.370 --> 00:07:41.280
structure that will hold all the
information that characterizes our low

00:07:41.280 --> 00:07:41.290
information that characterizes our low
 

00:07:41.290 --> 00:07:43.710
information that characterizes our low
pass filters such as update coefficients

00:07:43.710 --> 00:07:43.720
pass filters such as update coefficients
 

00:07:43.720 --> 00:07:46.290
pass filters such as update coefficients
and filter values and then it goes ahead

00:07:46.290 --> 00:07:46.300
and filter values and then it goes ahead
 

00:07:46.300 --> 00:07:48.770
and filter values and then it goes ahead
and initializes the data structure and

00:07:48.770 --> 00:07:48.780
and initializes the data structure and
 

00:07:48.780 --> 00:07:51.680
and initializes the data structure and
now from the point of view of the API

00:07:51.680 --> 00:07:51.690
now from the point of view of the API
 

00:07:51.690 --> 00:07:54.240
now from the point of view of the API
the most important call is this one

00:07:54.240 --> 00:07:54.250
the most important call is this one
 

00:07:54.250 --> 00:07:55.860
the most important call is this one
right here there's a there's a function

00:07:55.860 --> 00:07:55.870
right here there's a there's a function
 

00:07:55.870 --> 00:07:58.530
right here there's a there's a function
called am configure and that one

00:07:58.530 --> 00:07:58.540
called am configure and that one
 

00:07:58.540 --> 00:08:00.270
called am configure and that one
establishes learn the connection between

00:08:00.270 --> 00:08:00.280
establishes learn the connection between
 

00:08:00.280 --> 00:08:03.210
establishes learn the connection between
your audio module and the patch field

00:08:03.210 --> 00:08:03.220
your audio module and the patch field
 

00:08:03.220 --> 00:08:05.610
your audio module and the patch field
service so this configure method takes

00:08:05.610 --> 00:08:05.620
service so this configure method takes
 

00:08:05.620 --> 00:08:08.310
service so this configure method takes
the handle that you received earlier so

00:08:08.310 --> 00:08:08.320
the handle that you received earlier so
 

00:08:08.320 --> 00:08:10.830
the handle that you received earlier so
you just so you receive the handle in

00:08:10.830 --> 00:08:10.840
you just so you receive the handle in
 

00:08:10.840 --> 00:08:12.600
you just so you receive the handle in
in the configure method and you just

00:08:12.600 --> 00:08:12.610
in the configure method and you just
 

00:08:12.610 --> 00:08:14.610
in the configure method and you just
hand it over to this function call it

00:08:14.610 --> 00:08:14.620
hand it over to this function call it
 

00:08:14.620 --> 00:08:19.110
hand it over to this function call it
right here then it takes a process

00:08:19.110 --> 00:08:19.120
right here then it takes a process
 

00:08:19.120 --> 00:08:21.330
right here then it takes a process
function that you implement in and that

00:08:21.330 --> 00:08:21.340
function that you implement in and that
 

00:08:21.340 --> 00:08:23.460
function that you implement in and that
provides the audio processing capability

00:08:23.460 --> 00:08:23.470
provides the audio processing capability
 

00:08:23.470 --> 00:08:25.950
provides the audio processing capability
that you want and then you give it the

00:08:25.950 --> 00:08:25.960
that you want and then you give it the
 

00:08:25.960 --> 00:08:29.820
that you want and then you give it the
data structure that we just created okay

00:08:29.820 --> 00:08:29.830
data structure that we just created okay
 

00:08:29.830 --> 00:08:32.070
data structure that we just created okay
let's take a look at our audio

00:08:32.070 --> 00:08:32.080
let's take a look at our audio
 

00:08:32.080 --> 00:08:37.310
let's take a look at our audio
processing function it's right here so

00:08:37.310 --> 00:08:37.320
processing function it's right here so
 

00:08:37.320 --> 00:08:40.649
processing function it's right here so
so this one initially just retrieves the

00:08:40.649 --> 00:08:40.659
so this one initially just retrieves the
 

00:08:40.659 --> 00:08:42.719
so this one initially just retrieves the
data structure that we allocated earlier

00:08:42.719 --> 00:08:42.729
data structure that we allocated earlier
 

00:08:42.729 --> 00:08:47.670
data structure that we allocated earlier
and then it it extracts the filter

00:08:47.670 --> 00:08:47.680
and then it it extracts the filter
 

00:08:47.680 --> 00:08:50.670
and then it it extracts the filter
update coefficient from from this data

00:08:50.670 --> 00:08:50.680
update coefficient from from this data
 

00:08:50.680 --> 00:08:53.070
update coefficient from from this data
structure and there's one crucial point

00:08:53.070 --> 00:08:53.080
structure and there's one crucial point
 

00:08:53.080 --> 00:08:56.370
structure and there's one crucial point
in here mainly it retrieves this update

00:08:56.370 --> 00:08:56.380
in here mainly it retrieves this update
 

00:08:56.380 --> 00:08:59.790
in here mainly it retrieves this update
coefficient using a a GCC built-in

00:08:59.790 --> 00:08:59.800
coefficient using a a GCC built-in
 

00:08:59.800 --> 00:09:03.030
coefficient using a a GCC built-in
called sync fetch and or and the point

00:09:03.030 --> 00:09:03.040
called sync fetch and or and the point
 

00:09:03.040 --> 00:09:07.079
called sync fetch and or and the point
here is to access this coefficient in an

00:09:07.079 --> 00:09:07.089
here is to access this coefficient in an
 

00:09:07.089 --> 00:09:10.290
here is to access this coefficient in an
anatomic way because we need to worry

00:09:10.290 --> 00:09:10.300
anatomic way because we need to worry
 

00:09:10.300 --> 00:09:11.610
anatomic way because we need to worry
about thread safety here this

00:09:11.610 --> 00:09:11.620
about thread safety here this
 

00:09:11.620 --> 00:09:13.290
about thread safety here this
coefficient may be changed by a

00:09:13.290 --> 00:09:13.300
coefficient may be changed by a
 

00:09:13.300 --> 00:09:15.329
coefficient may be changed by a
different thread when when you change

00:09:15.329 --> 00:09:15.339
different thread when when you change
 

00:09:15.339 --> 00:09:17.670
different thread when when you change
when you move the slider in the UI then

00:09:17.670 --> 00:09:17.680
when you move the slider in the UI then
 

00:09:17.680 --> 00:09:19.710
when you move the slider in the UI then
the UI thread will change this

00:09:19.710 --> 00:09:19.720
the UI thread will change this
 

00:09:19.720 --> 00:09:22.019
the UI thread will change this
coefficient but we're in the audio

00:09:22.019 --> 00:09:22.029
coefficient but we're in the audio
 

00:09:22.029 --> 00:09:23.910
coefficient but we're in the audio
thread here and so we might mean we need

00:09:23.910 --> 00:09:23.920
thread here and so we might mean we need
 

00:09:23.920 --> 00:09:25.019
thread here and so we might mean we need
to make sure we're properly synchronized

00:09:25.019 --> 00:09:25.029
to make sure we're properly synchronized
 

00:09:25.029 --> 00:09:28.710
to make sure we're properly synchronized
and this this GCC build and takes care

00:09:28.710 --> 00:09:28.720
and this this GCC build and takes care
 

00:09:28.720 --> 00:09:32.340
and this this GCC build and takes care
of that okay so now once we've retrieved

00:09:32.340 --> 00:09:32.350
of that okay so now once we've retrieved
 

00:09:32.350 --> 00:09:34.380
of that okay so now once we've retrieved
outfit filter update coefficient in a

00:09:34.380 --> 00:09:34.390
outfit filter update coefficient in a
 

00:09:34.390 --> 00:09:36.540
outfit filter update coefficient in a
thread-safe fashion we can do the actual

00:09:36.540 --> 00:09:36.550
thread-safe fashion we can do the actual
 

00:09:36.550 --> 00:09:39.000
thread-safe fashion we can do the actual
signal processing and that's happening

00:09:39.000 --> 00:09:39.010
signal processing and that's happening
 

00:09:39.010 --> 00:09:42.150
signal processing and that's happening
right here so we iterate over our

00:09:42.150 --> 00:09:42.160
right here so we iterate over our
 

00:09:42.160 --> 00:09:45.300
right here so we iterate over our
buffers we read our input samples we

00:09:45.300 --> 00:09:45.310
buffers we read our input samples we
 

00:09:45.310 --> 00:09:47.490
buffers we read our input samples we
perform our signal processing magic and

00:09:47.490 --> 00:09:47.500
perform our signal processing magic and
 

00:09:47.500 --> 00:09:51.480
perform our signal processing magic and
we write our output buffers so in

00:09:51.480 --> 00:09:51.490
we write our output buffers so in
 

00:09:51.490 --> 00:09:53.220
we write our output buffers so in
particular if you've studied signal

00:09:53.220 --> 00:09:53.230
particular if you've studied signal
 

00:09:53.230 --> 00:09:55.650
particular if you've studied signal
processing then you will recognize this

00:09:55.650 --> 00:09:55.660
processing then you will recognize this
 

00:09:55.660 --> 00:09:58.230
processing then you will recognize this
line right here this is just the update

00:09:58.230 --> 00:09:58.240
line right here this is just the update
 

00:09:58.240 --> 00:10:01.920
line right here this is just the update
formula of a simple RC low-pass filter

00:10:01.920 --> 00:10:01.930
formula of a simple RC low-pass filter
 

00:10:01.930 --> 00:10:04.050
formula of a simple RC low-pass filter
and that's it as far as the code is

00:10:04.050 --> 00:10:04.060
and that's it as far as the code is
 

00:10:04.060 --> 00:10:06.690
and that's it as far as the code is
concerned alright so that's it for now

00:10:06.690 --> 00:10:06.700
concerned alright so that's it for now
 

00:10:06.700 --> 00:10:08.579
concerned alright so that's it for now
you can find the source code at github

00:10:08.579 --> 00:10:08.589
you can find the source code at github
 

00:10:08.589 --> 00:10:12.199
you can find the source code at github
and there's a forum at Google Groups and

00:10:12.199 --> 00:10:12.209
and there's a forum at Google Groups and
 

00:10:12.209 --> 00:10:15.060
and there's a forum at Google Groups and
don't hesitate to to get in touch if you

00:10:15.060 --> 00:10:15.070
don't hesitate to to get in touch if you
 

00:10:15.070 --> 00:10:16.530
don't hesitate to to get in touch if you
have any questions or comments

00:10:16.530 --> 00:10:16.540
have any questions or comments
 

00:10:16.540 --> 00:10:19.350
have any questions or comments
happy hacking

