WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.720
&gt;&gt; Chris Lambert: First a quick crown of introductions.
My

00:00:01.720 --> 00:00:04.729
name is Chris Lambert. I'm a software engineer
working on

00:00:04.729 --> 00:00:06.741
location base services, including Google Latitude.

00:00:06.741 --> 00:00:11.620
&gt;&gt; Marcelo Camelo: Ah, I'm Marcelo, um, software
engineer on

00:00:11.620 --> 00:00:12.960
the Maps API team in Sydney.

00:00:12.960 --> 00:00:15.490
&gt;&gt; Dave Wang: Ah, my name is Dave Wang. I'm
with, ah,

00:00:15.490 --> 00:00:17.600
Booyah. I'm the, ah, VP Marketing of Booyah.

00:00:17.600 --> 00:00:22.080
&gt;&gt; Chris Lambert: Great. So today we're going
to talk

00:00:22.080 --> 00:00:24.890
about, ah, a few different things. Um, if
you didn't get

00:00:24.890 --> 00:00:26.600
the URL, it'll be on the -- the next slide.
But, ah, we're

00:00:26.600 --> 00:00:30.071
going to start off -- I'm going to talk about
the state of

00:00:30.071 --> 00:00:34.250
location APIs today, ah, and what Google makes
available and

00:00:34.250 --> 00:00:37.070
how to use those. Then I'm going to switch
talking a little

00:00:37.070 --> 00:00:40.620
bit about Google Latitude and we're going
to announce a new

00:00:40.620 --> 00:00:44.180
location API, ah, related to Google Latitude,
ah, in this

00:00:44.180 --> 00:00:48.170
session. And then, ah, talk briefly about
what this enables

00:00:48.170 --> 00:00:50.351
before switching over to Marcelo who's going
to talk about

00:00:50.351 --> 00:00:54.630
Places and how to, um, -- Well, I won't give
away

00:00:54.630 --> 00:00:58.100
everything, but you'll find out. Ah, so today
there's a --

00:00:58.100 --> 00:01:01.060
there's a number of APIs available for getting
location in

00:01:01.060 --> 00:01:03.260
the browser. A quick show of hands, how many
of you are

00:01:03.260 --> 00:01:04.979
familiar with the HTML5 Geolocation API? A
few of you.

00:01:04.979 --> 00:01:10.810
Okay. So this, ah -- This is an API which
is supported in

00:01:10.810 --> 00:01:15.579
Firefox 3.5, 3.6, and Google Chrome, um, and
the Android

00:01:15.579 --> 00:01:18.860
browser in your Android phones. Ah, and basically
with a

00:01:18.860 --> 00:01:21.990
few lines of Javascript you can get the user's
location and

00:01:21.990 --> 00:01:25.659
use it within your applications. Ah, similarly,
there's a

00:01:25.659 --> 00:01:28.149
Gears Geolocation API, which is compatible
with the HTML5

00:01:28.149 --> 00:01:34.880
API but available in Safari and Internet -- Internet
Explorer. Ah, and there's also a Google Toolbar

00:01:34.880 --> 00:01:38.060
implementation for Internet Explorer on Windows,
ah, that

00:01:38.060 --> 00:01:42.049
also implements this HTML5 Geolocation API.
Ah, and this

00:01:42.049 --> 00:01:45.990
API is -- is a great way of getting location
from the user

00:01:45.990 --> 00:01:48.639
when you're -- ah, you have the user's attention,
they're

00:01:48.639 --> 00:01:50.880
interacting with your application, and they
grant you

00:01:50.880 --> 00:01:53.700
permission. It's a -- it's a really great
way to get

00:01:53.700 --> 00:01:57.609
accurate location, um, more accurate than
IP address, which

00:01:57.609 --> 00:02:01.279
is commonly used. Ah, and the way these -- these
work is

00:02:01.279 --> 00:02:04.279
there's a -- a network location provider which
is built by

00:02:04.279 --> 00:02:07.229
Google which takes a number of different signals,
um, looks

00:02:07.229 --> 00:02:10.569
them up in -- in a big location database,
and then returns

00:02:10.569 --> 00:02:13.519
the best estimate latitude and longitude for
the user. Ah,

00:02:13.519 --> 00:02:17.599
in this same location, the writer is what
backs the Android

00:02:17.599 --> 00:02:21.590
locate manager API, ah, that some of you may
have used. And

00:02:21.590 --> 00:02:24.140
the way these APIs determine location is through
a mix of a

00:02:24.140 --> 00:02:26.279
number of different location sources, ah,
which I'll talk

00:02:26.279 --> 00:02:31.189
about briefly. So the -- the first which most
of you are

00:02:31.189 --> 00:02:33.570
probably familiar with is IP geolocation.
Ah, this API

00:02:33.570 --> 00:02:36.060
often gives you on the order of city-level
accuracy. Um, in

00:02:36.060 --> 00:02:38.980
some countries it's -- it's only as accurate
as the country

00:02:38.980 --> 00:02:41.519
the user is in, ah, but in the US it -- it
works pretty well

00:02:41.519 --> 00:02:44.459
at the city level. Ah, this is really easy
to use. Um,

00:02:44.459 --> 00:02:47.849
every HTTP request you receive as a developer
has an IP

00:02:47.849 --> 00:02:50.569
address, ah, that -- that it comes from. So
if you just use

00:02:50.569 --> 00:02:54.250
Google's AJAX API and send that IP address
off, you can get

00:02:54.250 --> 00:02:56.810
a latitude and longitude for the city that
the user is in.

00:02:56.810 --> 00:02:59.500
Ah, there's no power cost. It's really easy.
It's fast,

00:02:59.500 --> 00:03:03.969
um, and it's not superaccurate, but sometimes
it's -- it's

00:03:03.969 --> 00:03:06.940
good enough for what you need. Ah, there's
also cell tower

00:03:06.940 --> 00:03:09.770
triangulation. And this works, um, well on
mobile devices.

00:03:09.770 --> 00:03:12.910
Basically, any time you have a cell phone
that's connected

00:03:12.910 --> 00:03:17.250
to the network there's, ah, one to a handful
of cell towers

00:03:17.250 --> 00:03:20.530
within range, and each of these cell towers
has a unique

00:03:20.530 --> 00:03:23.109
identifier. And if you send those -- if -- if
these

00:03:23.109 --> 00:03:25.930
location APIs send those identifiers to Google,
Google can

00:03:25.930 --> 00:03:28.579
look up, um, the positions of each of those
cell towers and

00:03:28.579 --> 00:03:31.330
estimate the user's location from those. This
requires that

00:03:31.330 --> 00:03:34.569
it be a mobile device connected to the network,
so cell

00:03:34.569 --> 00:03:39.269
phone most -- most often, um. But -- but it
gives pretty

00:03:39.269 --> 00:03:41.660
good accuracy, sometimes as accurate as -- as
the

00:03:41.660 --> 00:03:45.890
neighborhood, ah, in -- in urban areas. And,
similarly,

00:03:45.890 --> 00:03:50.219
there's a same type of location API, but,
um, builds off

00:03:50.219 --> 00:03:52.870
Wi-Fi MAC addresses, which -- which gives
even better

00:03:52.870 --> 00:03:56.430
accuracy down to the street level, so 50 to
100 meter

00:03:56.430 --> 00:03:58.879
accuracy. And the way this works is -- is
the device,

00:03:58.879 --> 00:04:00.810
whether it be a laptop or a cell phone, will
issue a

00:04:00.810 --> 00:04:04.269
wireless, ah, network scan and look at all
the access points

00:04:04.269 --> 00:04:07.671
within range of that device, take the unique
MAC addresses

00:04:07.671 --> 00:04:10.980
of each, and then estimate the position based
on that. Um,

00:04:10.980 --> 00:04:13.909
and this works even better. It's really popular
on laptops,

00:04:13.909 --> 00:04:17.740
on cell phones. Um, and it's -- it's almost
as good as GPS,

00:04:17.740 --> 00:04:20.510
but it has the advantage that it works indoors,
and it

00:04:20.510 --> 00:04:24.825
doesn't have nearly the -- the same power
cost that GPS has.

00:04:24.825 --> 00:04:27.740
So I talked a little bit about these, but,
um, I'll show you

00:04:27.740 --> 00:04:32.090
exactly how this works. This is, ah, some
of our coverage,

00:04:32.090 --> 00:04:35.590
ah, in -- in the San Francisco SoMa area.
So we're centered

00:04:35.590 --> 00:04:38.290
on Moscone Center right now, which is where
we are. And you

00:04:38.290 --> 00:04:41.161
see just within a few blocks of -- of where
we are, we have

00:04:41.161 --> 00:04:46.200
thousands of cell towers, Wi-Fi beacons, MAC
addresses, just

00:04:46.200 --> 00:04:50.720
-- They're everywhere. Um, and you could imagine
that right

00:04:50.720 --> 00:04:53.310
now, if you -- if you did a Wi-Fi scan, you
might see 20

00:04:53.310 --> 00:04:55.970
access points. So we just looked up where
those 20 access

00:04:55.970 --> 00:04:59.140
points were and then basically return a point
near the

00:04:59.140 --> 00:05:02.030
middle of those that we think best represents
your location.

00:05:02.030 --> 00:05:05.460
So that's kind of what happens behind the
scenes when you

00:05:05.460 --> 00:05:08.770
use one of these HTML5 Geolocation APIs. Ah,
zooming out to

00:05:08.770 --> 00:05:11.070
San Francisco as a whole, you see just the
 -- the coverage

00:05:11.070 --> 00:05:14.270
area, um, in San Francisco is just so dense.
Pretty much

00:05:14.270 --> 00:05:17.970
anywhere you are in the city, um, you'll have
great

00:05:17.970 --> 00:05:21.840
coverage. Um, you'll see in Golden Gate Park
there there's

00:05:21.840 --> 00:05:24.610
a little hot spot of red, which is the Academy
of Sciences.

00:05:24.610 --> 00:05:28.110
So there's wireless access points there. Um,
in places where

00:05:28.110 --> 00:05:29.980
there's not a lot of red, we actually have
really good cell

00:05:29.980 --> 00:05:31.410
tower coverage. So you could get a location
fix even if

00:05:31.410 --> 00:05:36.740
there are no Wi-Fi networks within range.
Ah, so we're

00:05:36.740 --> 00:05:39.300
really excited about the location database,
ah, that we have

00:05:39.300 --> 00:05:42.610
for cell towers and Wi-Fi networks. And, ah,
we're excited

00:05:42.610 --> 00:05:44.660
to see it grow. And I want to point out that
there's

00:05:44.660 --> 00:05:46.990
nothing special about San Francisco, that
the collection

00:05:46.990 --> 00:05:49.470
methods that we have in San Francisco and
the partnerships

00:05:49.470 --> 00:05:52.520
that we have are -- are worldwide. So the
coverage you see

00:05:52.520 --> 00:05:57.120
here should be the same you see in any city
in the world.

00:05:57.120 --> 00:06:01.030
And this -- this, as I mentioned before, this,
ah,

00:06:01.030 --> 00:06:03.690
information is -- is easily accessible with
the HTML5

00:06:03.690 --> 00:06:05.960
Geolocation API. Just a few lines of Javascript
you can get

00:06:05.960 --> 00:06:09.290
the current location and show it on a map.
Um, the user has

00:06:09.290 --> 00:06:12.720
to authorize permission. There's a little
bar that pops up

00:06:12.720 --> 00:06:14.220
at the top of the -- the browser, but it's
 -- it's really

00:06:14.220 --> 00:06:18.630
easy to use, so easy that we're using it across
many of our

00:06:18.630 --> 00:06:21.750
properties, so. Google Latitude uses it. Ah,
Google Maps

00:06:21.750 --> 00:06:25.450
on the desktop uses My Location, same thing
on -- on cell

00:06:25.450 --> 00:06:28.100
phones. Google Buzz uses location extensively,
search with

00:06:28.100 --> 00:06:31.510
my location on Windows Mobile, on Android,
on iPhone, Google

00:06:31.510 --> 00:06:35.090
Earth. Ah, we use it, basically, everywhere
it makes sense.

00:06:35.090 --> 00:06:37.729
Um, but specifically I want to talk about
Google -- Google

00:06:37.729 --> 00:06:41.390
Latitude. We launched Google Latitude a little
bit -- a

00:06:41.390 --> 00:06:44.950
little bit over a year ago. Um, and it -- it
started off as

00:06:44.950 --> 00:06:48.253
a way to share location with friends. So,
you assign it a

00:06:48.253 --> 00:06:49.990
Google Latitude and, by the way, you all have
Android phones

00:06:49.990 --> 00:06:54.250
now, so, um, just open up Google Maps and
put in join

00:06:54.250 --> 00:06:56.580
latitude from the menu. We'll get you started
if you -- if

00:06:56.580 --> 00:06:59.890
you haven't tried it yet. But, ah, you start
off with no

00:06:59.890 --> 00:07:03.140
friends. Um, but you can basically add people
you would

00:07:03.140 --> 00:07:06.620
trust to see, to share your location with.
Ah, and your

00:07:06.620 --> 00:07:08.270
phone will actually report your location to
them

00:07:08.270 --> 00:07:11.841
continuously, ah, so they can always see where
you are; you

00:07:11.841 --> 00:07:14.640
can see where they are. Um, and you -- There's
privacy

00:07:14.640 --> 00:07:19.220
controls to -- to control if you only want
to share the

00:07:19.220 --> 00:07:24.630
city, or if you want to turn it off at night,
um, you can

00:07:24.630 --> 00:07:25.630
just turn it off from within Latitude. So
it's a continuous

00:07:25.630 --> 00:07:26.750
location sharing service. Um, and we've got
clients on

00:07:26.750 --> 00:07:30.340
Android, Blackberry, Windows Mobile, Nokia,
iGoogle. Ah,

00:07:30.340 --> 00:07:33.510
any mobile platform that we've been able to
 -- to build

00:07:33.510 --> 00:07:36.290
background importing into we've built a Latitude
client for.

00:07:36.290 --> 00:07:38.860
Ah, it's been really successful. We have over
3 million

00:07:38.860 --> 00:07:42.470
-- 3 million active users, um, and those users
are reporting

00:07:42.470 --> 00:07:45.170
over 100 million daily location reports. So
that means

00:07:45.170 --> 00:07:48.240
every day we see 100 million location reports
for these

00:07:48.240 --> 00:07:51.730
users who are sharing their location with
their friends.

00:07:51.730 --> 00:07:55.130
And one thing that -- that we've been asked
for, both by

00:07:55.130 --> 00:07:58.070
users and developers, is it's great that Google
Latitude

00:07:58.070 --> 00:08:00.880
lets you share location with your friends,
but what if you

00:08:00.880 --> 00:08:03.450
wanted to share it with developers, developers
that you

00:08:03.450 --> 00:08:06.330
trust who wanted to build applications on
top of this

00:08:06.330 --> 00:08:08.650
location information? Um, it's not really
practical to have

00:08:08.650 --> 00:08:12.930
multiple services running on your phone all
running in the

00:08:12.930 --> 00:08:16.080
background, reporting locations, sending it
to a server,

00:08:16.080 --> 00:08:19.130
eating battery, managing permissions. So our
solution to

00:08:19.130 --> 00:08:21.280
this is actually to offer up a Google Latitude
API, which

00:08:21.280 --> 00:08:26.470
we're excited that it launched today. So,
Latitude has

00:08:26.470 --> 00:08:29.380
always put users in control of their privacy.
Privacy has

00:08:29.380 --> 00:08:32.270
been kind of our number one story. Um, and
we've always

00:08:32.270 --> 00:08:34.200
since -- since day one we've had per-friend
sharing and

00:08:34.200 --> 00:08:36.870
granularity control . Um, because that's really
important

00:08:36.870 --> 00:08:40.480
to users. So we're taking the same approach
with the API,

00:08:40.480 --> 00:08:43.330
and users must explicitly authorize every
application that

00:08:43.330 --> 00:08:46.650
they want to share location with. So if you
as a developer

00:08:46.650 --> 00:08:50.430
want to access a user's location, there's
basically, ah, an

00:08:50.430 --> 00:08:52.750
on-off flow. Um, a quick show of hands for
how many

00:08:52.750 --> 00:08:55.920
developers have worked with Google's authenticated
APIs

00:08:55.920 --> 00:09:00.880
before? [ pause ] Do you -- do you use APIs?
So, it's --

00:09:00.880 --> 00:09:02.990
If you have, you'll be right at home with
this. It's a

00:09:02.990 --> 00:09:06.841
similar model. Um, you send an on-off request.
If the user

00:09:06.841 --> 00:09:09.370
approves, you'll then get an access token
that you can use

00:09:09.370 --> 00:09:12.810
to access location. Um, when you request location
from the

00:09:12.810 --> 00:09:16.000
user, we ask you to specify whether you want,
um, their --

00:09:16.000 --> 00:09:20.410
the best available location or if you just
need the city

00:09:20.410 --> 00:09:23.680
that they're in, um, and also whether you
just want their

00:09:23.680 --> 00:09:24.680
current location or their location history.
In this way,

00:09:24.680 --> 00:09:27.250
the user, ah, gets the ability to only grant
what they're

00:09:27.250 --> 00:09:30.670
comfortable sharing. Ah, if the user doesn't
want to share

00:09:30.670 --> 00:09:32.460
their history from the whole time but just
wants to let you

00:09:32.460 --> 00:09:35.350
see what city they're in right now, that's
possible to do.

00:09:35.350 --> 00:09:38.870
Um, it's easier to revoke access at any time.
And I want to

00:09:38.870 --> 00:09:41.280
point out that there's no fire hose of data
here. This is

00:09:41.280 --> 00:09:45.050
an individual developer-to-user relationship
that the user

00:09:45.050 --> 00:09:48.670
is authorizing. Um, and it's also worth pointing
out that

00:09:48.670 --> 00:09:51.140
this -- we're -- we're not sharing friends
locations; we're

00:09:51.140 --> 00:09:53.960
just sharing the location of the user that
 -- that you've

00:09:53.960 --> 00:09:57.360
received authorization for. Ah, so I'll talk
a little bit

00:09:57.360 --> 00:10:01.130
about the API. Um, it's an authenticated RESTful
API. Ah,

00:10:01.130 --> 00:10:04.610
we have both JSON and -- and Atom varieties.
And all API

00:10:04.610 --> 00:10:06.820
operations are -- are based on the concept
of the user

00:10:06.820 --> 00:10:09.630
location. Ah, this is represented by a location
resource,

00:10:09.630 --> 00:10:11.820
which you'll see on the next slide, but it's
 -- it's a

00:10:11.820 --> 00:10:15.140
really simple location object. Ah, we provide
two resource

00:10:15.140 --> 00:10:17.250
collections in the API, which I mentioned,
current location

00:10:17.250 --> 00:10:19.910
and location history. Current location is
just a

00:10:19.910 --> 00:10:22.070
representation -- a time stamped representation
of where the

00:10:22.070 --> 00:10:24.630
user is right now, so basically a latitude
and longitude

00:10:24.630 --> 00:10:27.390
with a few other fields. Location history,
on the other

00:10:27.390 --> 00:10:31.260
hand, is a collection of -- of every point
that -- that

00:10:31.260 --> 00:10:34.580
we've seen the -- the user at. Um, so you
could imagine

00:10:34.580 --> 00:10:37.960
running Latitude on your phones right now.
It'll report

00:10:37.960 --> 00:10:40.890
anywhere from every minute to every hour,
depending on if

00:10:40.890 --> 00:10:44.820
you're moving or if you're stationary. So,
for me, I have

00:10:44.820 --> 00:10:48.550
location history for the last year or so.
Um, and I've got

00:10:48.550 --> 00:10:51.270
I don't know how many location points that
are available on

00:10:51.270 --> 00:10:54.150
my location history. So it's now possible
for me to offer

00:10:54.150 --> 00:10:57.540
that up to a developer, um, and they can use
that location

00:10:57.540 --> 00:11:01.150
information in -- in ways that -- that are
interesting. Um,

00:11:01.150 --> 00:11:05.610
and, as I said before, developers can request
at, ah, best

00:11:05.610 --> 00:11:09.310
available granularity or just the city. So
this is Location

00:11:09.310 --> 00:11:11.900
Resource Object. Ah, the only three required
fields are

00:11:11.900 --> 00:11:15.190
timestamp and milliseconds, the latitude and
longitude.

00:11:15.190 --> 00:11:18.000
Everything else is optional. Um, accuracy
is pretty common,

00:11:18.000 --> 00:11:20.110
but the other fields are mostly useful at
the location

00:11:20.110 --> 00:11:25.880
that's derived from a GPS receiver. [ pause
 ] So, for

00:11:25.880 --> 00:11:28.210
current location, there's a number of operations,
ah, that

00:11:28.210 --> 00:11:30.260
we support. You can just fetch the current
location, which

00:11:30.260 --> 00:11:32.520
is a really simple issue you could get. Um,
you can also

00:11:32.520 --> 00:11:36.310
press location at the best available granularity
with the

00:11:36.310 --> 00:11:39.310
granularity, ah, current parameter. You can
update the

00:11:39.310 --> 00:11:43.790
user's current location with an HTTP POST,
and you can also

00:11:43.790 --> 00:11:47.990
clear the user's current location if they
ask you to, or for

00:11:47.990 --> 00:11:51.000
whatever reason, with the HTTP delete. Ah,
with location

00:11:51.000 --> 00:11:54.080
history, ah, pretty similar model except we
also have a list

00:11:54.080 --> 00:11:55.610
operation where you can query the user's location
history

00:11:55.610 --> 00:11:57.200
based on the time range. So there's a max
time, a min time,

00:11:57.200 --> 00:12:01.330
and a max results, ah, parameters that you
can use, and

00:12:01.330 --> 00:12:07.220
those will basically return a list of location
resources for

00:12:07.220 --> 00:12:11.270
the user. Ah, we let you fetch up to a thousand
in a

00:12:11.270 --> 00:12:14.310
single, um, API call. Ah, but you could also
have the

00:12:14.310 --> 00:12:17.380
option of just receiving an individual record,
ah, inserting

00:12:17.380 --> 00:12:21.270
historical records. So you just insert at
the -- the

00:12:21.270 --> 00:12:24.420
timestamp, and deleting historical record
as well. Ah, what

00:12:24.420 --> 00:12:27.060
does the response look like? It's a simple
JSON payload

00:12:27.060 --> 00:12:28.620
containing location resource, which you recognize.
In this

00:12:28.620 --> 00:12:30.391
case, I requested city-level location. So
I just got the

00:12:30.391 --> 00:12:35.350
latitude and longitude. Um, if there was an
accuracy that

00:12:35.350 --> 00:12:39.700
would, ah, go along in there, um, which you'll
see in the

00:12:39.700 --> 00:12:41.480
best available current location where I have
up an accuracy

00:12:41.480 --> 00:12:44.529
and an altitude. So this location was imported
by a GPS

00:12:44.529 --> 00:12:48.520
receiver. Ah, for history it's a similar model
except this

00:12:48.520 --> 00:12:52.589
payload would be a lot larger. Um, this is
a query for my

00:12:52.589 --> 00:12:57.231
last 10 locations before New Year's of last
year. So, you

00:12:57.231 --> 00:13:01.480
could see where I was right before the clock
turned

00:13:01.480 --> 00:13:04.250
midnight. Ah, as far as accessing the user's
location, ah,

00:13:04.250 --> 00:13:06.540
I talked about the OAuth flow. This is just
the, ah,

00:13:06.540 --> 00:13:10.460
visualization of what it looks like. Um, you
construct, ah,

00:13:10.460 --> 00:13:13.240
an authorization URL that includes the granularity
you would

00:13:13.240 --> 00:13:15.690
like access to, how much history you would
like. Do you

00:13:15.690 --> 00:13:18.220
want access to all the user's history or just
their current

00:13:18.220 --> 00:13:20.770
location, um, as well as their domain you're
authorizing.

00:13:20.770 --> 00:13:23.070
And the user has the ability to see who's
accessing

00:13:23.070 --> 00:13:26.851
my -- who wants my location? What domain is
it? Um, what

00:13:26.851 --> 00:13:29.390
-- how much do they want? What granularity?
Do they want

00:13:29.390 --> 00:13:33.400
history? And they can approve or deny it on
this screen.

00:13:33.400 --> 00:13:36.540
Um, and as soon as that happens you're good
to go with your

00:13:36.540 --> 00:13:39.051
API access. So, what does this enable? We're
really

00:13:39.051 --> 00:13:41.240
excited about the possibilities. Obviously,
we -- we

00:13:41.240 --> 00:13:43.390
haven't thought of everything. We can't build
everything.

00:13:43.390 --> 00:13:46.050
Um, but we're really excited to see what you
guys can do.

00:13:46.050 --> 00:13:49.740
And these are just some ideas. Um, one popular
example is

00:13:49.740 --> 00:13:52.710
you go on a trip to Europe and you take a
thousand photos

00:13:52.710 --> 00:13:55.810
and you come back. You can basically authorize
the service

00:13:55.810 --> 00:13:58.410
to access your latitude location history and
your Picasso at

00:13:58.410 --> 00:14:02.180
Baldems, and all of a sudden your thousands
of photos have

00:14:02.180 --> 00:14:07.040
automatically geotagged to the exact point
where you were

00:14:07.040 --> 00:14:08.399
when you took those photos. Um, you could
get alerts when

00:14:08.399 --> 00:14:11.740
you're traveling and your coworkers are at
the same

00:14:11.740 --> 00:14:17.360
conference as you. Ah, with the iPhone OS
4.0 now allowing

00:14:17.360 --> 00:14:19.940
background location, we could see a number
of different, ah,

00:14:19.940 --> 00:14:21.901
background location reporters that all push
location into

00:14:21.901 --> 00:14:26.200
the Cloud. And then if a given application
needs it at some

00:14:26.200 --> 00:14:28.320
individual time, even if that application
isn't running, if

00:14:28.320 --> 00:14:29.630
it's a Web service, they can just query the
Latitude API for

00:14:29.630 --> 00:14:34.270
that location. Um, and then there's a fun
example. If

00:14:34.270 --> 00:14:37.190
you're driving home and your home automation
software

00:14:37.190 --> 00:14:39.931
realizes you're, like, 20 miles away, so it
turns on the

00:14:39.931 --> 00:14:46.970
heat. And your house is nice and warm by the
time you get

00:14:46.970 --> 00:14:52.850
home. So, hope you guys have some -- some
ideas on what you

00:14:52.850 --> 00:14:53.890
might want to build. But we're really excited
about this.

00:14:53.890 --> 00:14:55.520
Ah, for more information, there's full developer
documentation at code.google.com/apis/latitude.

00:14:55.520 --> 00:14:57.990
Um, their
support forms will be there, ah, release notes,

00:14:57.990 --> 00:15:00.870
reference
guide. And then if you're just interested

00:15:00.870 --> 00:15:02.970
in, ah, some of
the Latitude applications that are already

00:15:02.970 --> 00:15:04.520
available
including location history, location alerts,

00:15:04.520 --> 00:15:06.660
you can visit
the Latitude apps URL. Ah, if you have questions,

00:15:06.660 --> 00:15:12.450
ah, you
can either come up to the mike or post them

00:15:12.450 --> 00:15:15.140
on the Wave, and
it'll take questions at the end of this session.

00:15:15.140 --> 00:15:18.300
Ah, but
first Marcelo is going to talk about taking

00:15:18.300 --> 00:15:20.950
places, um, and
turning them -- taking locations, sorry, latitude

00:15:20.950 --> 00:15:23.970
and
longitude, and turning them into a place with

00:15:23.970 --> 00:15:31.180
more context.
Thank you. [ loud applause ]

00:15:31.180 --> 00:15:34.990
&gt;&gt; Marcelo Camelo: Hi, again, my name is Marcelo.
I'm a

00:15:34.990 --> 00:15:39.060
software engineer on the Maps API team in
Sydney. And I'm

00:15:39.060 --> 00:15:42.520
here today to talk about Places and the Maps
API. Just, ah,

00:15:42.520 --> 00:15:46.040
a quick summary of what I'm going to go through
in a couple

00:15:46.040 --> 00:15:48.830
of minutes, ah, an overview of -- of Places,
what are

00:15:48.830 --> 00:15:52.730
Places, why you should care about Places.
Um, also a little

00:15:52.730 --> 00:15:58.370
bit about Google's vision of Place and our
offerings. And

00:15:58.370 --> 00:16:02.820
then a bit of a hands-on exercise implementing
a simple Web

00:16:02.820 --> 00:16:09.860
site that deals with Places. [ pause ] So
what is a Place?

00:16:09.860 --> 00:16:13.270
Um, at Google we really like the full-length
definition. A

00:16:13.270 --> 00:16:16.520
Place is any public location that people care
about. And

00:16:16.520 --> 00:16:19.470
the main -- the main key word here is people.
Because no

00:16:19.470 --> 00:16:21.610
matter what technology we use, no matter how
fancy

00:16:21.610 --> 00:16:24.500
technology is, first you collect, ah, process
and serve the

00:16:24.500 --> 00:16:28.081
data. If the final output is not relevant
to the user,

00:16:28.081 --> 00:16:31.370
you're not really accomplishing your goals.
In -- in more

00:16:31.370 --> 00:16:36.490
practical terms, Places can be of three world
categories.

00:16:36.490 --> 00:16:40.830
They can be a point of interest. They can
be a business

00:16:40.830 --> 00:16:43.920
establishment, or they can be a geographic
 -- geographic

00:16:43.920 --> 00:16:46.589
entity of -- of political boundaries. There's
a few

00:16:46.589 --> 00:16:54.980
examples of what we think, um, about places.
So why as a

00:16:54.980 --> 00:16:58.649
developer you should care about Places, the
main reasons

00:16:58.649 --> 00:17:02.101
that Places can be much more meaningful to
you, to a user,

00:17:02.101 --> 00:17:05.919
um, than a LatLng. They can also be a much
more compact

00:17:05.919 --> 00:17:10.499
representation. Um, of course not in terms
of, um, start

00:17:10.499 --> 00:17:13.119
requirements. I'm talking about the interaction,
the

00:17:13.119 --> 00:17:17.610
conversation between users and your application,
right. Um,

00:17:17.610 --> 00:17:20.769
a LatLng although is -- just do floats, it
usually requires

00:17:20.769 --> 00:17:25.129
a map before the user can make sense of it.
Now, I'll give

00:17:25.129 --> 00:17:29.779
you a quick example. I live in Sydney. I work
at Google,

00:17:29.779 --> 00:17:34.360
but not at Googleplex in Mountain View. I
flew to LA. I

00:17:34.360 --> 00:17:37.649
drove to San Francisco. Now I'm at the Moscone
Center. But

00:17:37.649 --> 00:17:41.049
a lot of location information in what I just
said and you

00:17:41.049 --> 00:17:44.029
didn't need a map to parse it and you could
parse it

00:17:44.029 --> 00:17:48.429
instantly. So, in other words, ah, Places
much better

00:17:48.429 --> 00:17:51.360
reflects the way people think and communicate
about

00:17:51.360 --> 00:17:57.110
location. Um, another secondary reason is
that, ah, Places

00:17:57.110 --> 00:18:02.590
can sometimes imply, um, subjective qualities
like personal

00:18:02.590 --> 00:18:05.019
preferences. So another example, if I tell
you that

00:18:05.019 --> 00:18:10.549
yesterday I was at an art gallery or a fancy
restaurant or a

00:18:10.549 --> 00:18:14.779
museum, that tells you something about myself,
like my

00:18:14.779 --> 00:18:19.440
personal preferences. So, again, it's the
people factor

00:18:19.440 --> 00:18:27.690
that played here. [ pause ] Um, on top of
that, recently

00:18:27.690 --> 00:18:30.100
there's been a lot of interest, a lot of buzz
around

00:18:30.100 --> 00:18:33.870
location based services. I'm sure you all
heard of the

00:18:33.870 --> 00:18:37.360
check-in based social games. There -- there's
a few of them

00:18:37.360 --> 00:18:40.059
out there, and they're increasingly popular,
getting more

00:18:40.059 --> 00:18:44.650
popular every time. Um, also a lot of buzz
around a

00:18:44.650 --> 00:18:47.429
location based media and advertising, which
means --

00:18:47.429 --> 00:18:52.489
customizing content and ads based on the user
location. So

00:18:52.489 --> 00:18:56.799
that's, you know, it's a fantastic opportunity
for -- And I

00:18:56.799 --> 00:19:01.869
just ran through this -- this number a few
days ago.

00:19:01.869 --> 00:19:04.980
There's a study that shows that 53 percent
of people are

00:19:04.980 --> 00:19:08.440
willing to disclose their location as long
as they get value

00:19:08.440 --> 00:19:11.970
out of it. So it's up to us as developers
to create that

00:19:11.970 --> 00:19:18.369
value. [ pause ] So what about Google? What
is Google

00:19:18.369 --> 00:19:21.299
doing in this space? So we've been -- If you
think about

00:19:21.299 --> 00:19:24.970
it, we've been dealing with Places since we
started working

00:19:24.970 --> 00:19:31.470
on Maps, 2004, 2005. Um, we -- we process
a very

00:19:31.470 --> 00:19:34.559
comprehensive -- that avails us places to
build both our map

00:19:34.559 --> 00:19:42.230
tiles and our search indexes. Um, but until
recently we

00:19:42.230 --> 00:19:46.610
didn't really look at this database from a
 -- from the

00:19:46.610 --> 00:19:51.559
perspective of a unified notion of Places.
Right? We -- we

00:19:51.559 --> 00:19:55.519
had local listings. We had point of interest.
We had, um,

00:19:55.519 --> 00:19:59.529
geographic entities, but we didn't look at
them as a

00:19:59.529 --> 00:20:04.869
single -- a single concept. It was until recently.
Um,

00:20:04.869 --> 00:20:09.609
late last year we thought of publishing what
you call the

00:20:09.609 --> 00:20:12.769
Place Pages. Just a quick show of hands. How
many of you

00:20:12.769 --> 00:20:18.970
guys are familiar with Place Pages? [ pause
 ] Okay. So,

00:20:18.970 --> 00:20:22.980
what is a Place Page? So this is an example
of a Place

00:20:22.980 --> 00:20:25.299
Page. All right, so a Place Page tries to
aggregate

00:20:25.299 --> 00:20:28.400
everything that the Internet has to say about
a place. Um,

00:20:28.400 --> 00:20:35.299
it includes pictures, videos, related Web
sites, maps, user

00:20:35.299 --> 00:20:41.470
reviews, ratings. So, that is for it to be,
ah, a portal, a

00:20:41.470 --> 00:20:46.669
Web portal for a geographic location. Um,
and our goal is

00:20:46.669 --> 00:20:51.119
to have one Place Page for each -- for each
and every place

00:20:51.119 --> 00:21:00.070
on earth. [ pause ] So what about developers?
Actually,

00:21:00.070 --> 00:21:05.340
we haven't been doing a great job there. So
we heard a lot

00:21:05.340 --> 00:21:11.499
from developers that they -- they miss, ah,
a native API to

00:21:11.499 --> 00:21:16.240
do business search, for instance, inside the
Maps API. So

00:21:16.240 --> 00:21:19.880
they're forced to use a separate API if they
want to do, um,

00:21:19.880 --> 00:21:22.880
local listing search. That means dealing with
different

00:21:22.880 --> 00:21:26.131
data types, different data formats, different
program of

00:21:26.131 --> 00:21:30.519
conventions, which can all be very annoying.
Um, it means

00:21:30.519 --> 00:21:35.179
not having a unified concept of place, which
means having

00:21:35.179 --> 00:21:38.350
separate -- having to have separate lodging
for both dealing

00:21:38.350 --> 00:21:42.859
with either geocode -- geocode address or
business listings.

00:21:42.859 --> 00:21:46.131
Also it means different terms of service,
which can be a,

00:21:46.131 --> 00:21:52.470
ah, a blocker for some developers, especially
enterprise

00:21:52.470 --> 00:21:58.980
developers. [ pause ] So based on the importance
of Places

00:21:58.980 --> 00:22:02.639
as a -- as a form of communicating location
to the user,

00:22:02.639 --> 00:22:08.029
based on the increasing interest on location
based service

00:22:08.029 --> 00:22:11.340
and also all the -- all the background that
Google has, all

00:22:11.340 --> 00:22:15.210
the infrastructure and expertise on dealing
with Places, we

00:22:15.210 --> 00:22:19.629
decided it was time to start handling, ah
 -- bringing Places

00:22:19.629 --> 00:22:24.990
to -- to a more -- making Places a first-class
season of the

00:22:24.990 --> 00:22:29.249
Maps API. So we started with this, um, widget
that we call

00:22:29.249 --> 00:22:33.460
Nearby Paces. And the goals of Nearby Places
is to help

00:22:33.460 --> 00:22:38.399
developers connect users to places. Another
way to look at

00:22:38.399 --> 00:22:41.879
it is to allow developers to harness Google's
Place

00:22:41.879 --> 00:22:47.529
database. So we designed it based on two basic
use cases.

00:22:47.529 --> 00:22:52.200
First, help users that are searching for a
place, then help

00:22:52.200 --> 00:22:55.359
users looking to learn more once they find
a place, looking

00:22:55.359 --> 00:22:59.139
to learn more about a specific place. And
also help users

00:22:59.139 --> 00:23:04.740
to have conversations about a place. And I'm
just going to

00:23:04.740 --> 00:23:09.539
go through a quick demo here, if everything
works correctly,

00:23:09.539 --> 00:23:15.139
and show you how the widget works. So imagine
you're in

00:23:15.139 --> 00:23:19.369
Sydney. Um, this is a picture I took -- actually
take by,

00:23:19.369 --> 00:23:24.960
ah, p.m. 4. So you're in Sydney. You found
a spot with

00:23:24.960 --> 00:23:27.940
this great view. You're looking at the -- the
Harbour

00:23:27.940 --> 00:23:31.960
Bridge, the Opera House, and you drink your
beer. And you

00:23:31.960 --> 00:23:34.429
-- you just realized, oh, I -- I found this
place on a -- on

00:23:34.429 --> 00:23:38.210
a Web site. You had great reviews. That's
why I'm here.

00:23:38.210 --> 00:23:41.879
Now that I'm here, I want to review this spot
myself. So

00:23:41.879 --> 00:23:54.039
you bring up your cell phone [ pause ] and
 [ pause ] there

00:23:54.039 --> 00:24:00.950
it is. You go to A Review Website. So, the
phone detects

00:24:00.950 --> 00:24:06.869
your location, tells you you're in the shores
of the Sydney

00:24:06.869 --> 00:24:11.309
Harbour. Let me zoom out a little bit. So
this is the

00:24:11.309 --> 00:24:15.889
Sydney Harbour. And you see this little button
at the

00:24:15.889 --> 00:24:18.669
bottom of the page saying tap to select a
location.

00:24:18.669 --> 00:24:25.019
[ pause ] So you tap it, and it lists all
the prominent

00:24:25.019 --> 00:24:30.320
places around you. So you can see there are
business

00:24:30.320 --> 00:24:35.639
listings there, restaurants, ah, probably
another, um, more

00:24:35.639 --> 00:24:39.789
generic -- businesses as well, but also, um,
a geocode

00:24:39.789 --> 00:24:44.629
result there. So, it's looking at places in
a more holistic

00:24:44.629 --> 00:24:47.509
way, right? It doesn't have to be a business.
It can be an

00:24:47.509 --> 00:24:54.609
address. It could be, ah, a landmark or a
beach -- a beach.

00:24:54.609 --> 00:25:02.920
So you selected, um, at The Deck Sydney. [ pause
 ] And

00:25:02.920 --> 00:25:16.940
now, let me try again. [ pause ] Oh, oh. I
probably

00:25:16.940 --> 00:25:22.769
missed my -- my connection. Just a sec, please.
Yup. I

00:25:22.769 --> 00:25:30.970
need to be connected to the VPN. [ pause ] Because
it's

00:25:30.970 --> 00:25:44.440
not currently public. [ pause ] Come on, you
can do it.

00:25:44.440 --> 00:25:48.789
[ pause ] Let me see first -- Okay. There
it is. So you

00:25:48.789 --> 00:25:53.440
select the place. Now the Web site knows what
place you're

00:25:53.440 --> 00:25:57.779
referring to, and it also gets back from the
widget, ah, the

00:25:57.779 --> 00:26:01.269
metadata about that place. Um, you can see
a -- a bit of

00:26:01.269 --> 00:26:05.139
the metadata there, so you get an icon representing
the

00:26:05.139 --> 00:26:09.430
category of that place. You get the place
name. You get a

00:26:09.430 --> 00:26:17.220
category. You get a user's rating with a -- represented
with the stars. It's a number from 0 to 5

00:26:17.220 --> 00:26:23.309
or 1 to 5. You
get the full address, ah, both in stream form

00:26:23.309 --> 00:26:28.310
and, um,
sorted form. You get a phone number. You get

00:26:28.310 --> 00:26:31.750
the -- the
place position, which I used to fetch aesthetic

00:26:31.750 --> 00:26:38.340
map. And
here I can say, hey, I like this place. All

00:26:38.340 --> 00:26:42.929
right so now
the Web site displays a marker, and it's doing

00:26:42.929 --> 00:26:47.340
its thing
there. So this place has received -- received

00:26:47.340 --> 00:26:55.210
one posted
review so far. So if I want to rate another,

00:26:55.210 --> 00:27:00.210
I'm back here.
I can get more places, if I did not find mine

00:27:00.210 --> 00:27:05.610
on the list.
Ah, no. The place I'm looking for is not here.

00:27:05.610 --> 00:27:10.899
So I can
enter the place here, or I can just say no

00:27:10.899 --> 00:27:19.850
I don't want to
disclose my location. Right. [ pause ] So

00:27:19.850 --> 00:27:30.721
if we go back
to the presentation. [ pause ] Okay, um, so

00:27:30.721 --> 00:27:33.599
now I'm going
to go through the steps of implementing this

00:27:33.599 --> 00:27:37.179
exact same, ah,
application. You guys are going to see it

00:27:37.179 --> 00:27:41.269
is really, really
simple. It's almost plug and play really.

00:27:41.269 --> 00:27:46.390
So the first
thing to do is to bootstrap the V3 API. How

00:27:46.390 --> 00:27:52.279
many of you
guys use -- Or have you used the V3 API? What

00:27:52.279 --> 00:27:58.049
about V2?
Cool. Um, so you have the Nearby Places widget

00:27:58.049 --> 00:28:03.739
is -- or
will be part of the -- the V3 API. Um, you

00:28:03.739 --> 00:28:07.549
don't have to
worry too much about code bloat, even if you're

00:28:07.549 --> 00:28:10.450
not using
all the rest of the, ah, functionality of

00:28:10.450 --> 00:28:14.989
the V3 API,
because the way the V3 API was designed the

00:28:14.989 --> 00:28:17.960
user will only
actually download the code the application

00:28:17.960 --> 00:28:22.879
requires to run.
And also it's really important to remember

00:28:22.879 --> 00:28:28.720
to set sensor
equals true, if you're planning to use the

00:28:28.720 --> 00:28:37.419
device's sensor
to geolocate the user. Next, you declare a

00:28:37.419 --> 00:28:42.029
div, and you
create the widget instance passing that div's

00:28:42.029 --> 00:28:45.620
argument to
the constructer. So I have the div at the

00:28:45.620 --> 00:28:51.359
bottom of the
code snippet. I get element by ID, and I call

00:28:51.359 --> 00:28:53.750
the
constructer of the Nearby Places widget. So

00:28:53.750 --> 00:29:02.769
when you do
this, you get this standard button rendered

00:29:02.769 --> 00:29:07.219
on that div. It
also includes the powered by Google. And the

00:29:07.219 --> 00:29:09.110
 -- the reason
we -- we have the powered by Google there

00:29:09.110 --> 00:29:12.019
is because we want
to make sure -- clear to the user that the

00:29:12.019 --> 00:29:18.820
position is being
sent to Google's server. [ pause ] So how

00:29:18.820 --> 00:29:26.309
do you get the
user input? So when -- when the user clicks

00:29:26.309 --> 00:29:30.419
on the button,
it displays the widget. When the user selects

00:29:30.419 --> 00:29:34.330
a place, it's
going to change a property in the widget called

00:29:34.330 --> 00:29:38.830
Place
Property. If you know V3 you can place even

00:29:38.830 --> 00:29:42.390
listeners to
properties. In this case, it'll be, ah, the

00:29:42.390 --> 00:29:44.549
place
underscore change will be triggered every

00:29:44.549 --> 00:29:48.149
time the place
property changes. And, in this case, what

00:29:48.149 --> 00:29:53.029
I'm doing is
whenever place property changes, I call get

00:29:53.029 --> 00:29:57.960
place to get the
dollar structure, which represents the place.

00:29:57.960 --> 00:30:05.009
And I test
for not empty, and then I call show dialogue

00:30:05.009 --> 00:30:07.470
 -- show place
dialogue with the -- the place metadata in

00:30:07.470 --> 00:30:11.220
the place
structure. The reason I do test for place

00:30:11.220 --> 00:30:14.440
not being empty
is because the way that we signal that the

00:30:14.440 --> 00:30:18.279
user select not
to disclose a location is by passing, ah,

00:30:18.279 --> 00:30:27.799
an empty object
there. [ pause ] So, one of the goals -- So

00:30:27.799 --> 00:30:30.700
we're talking
about, ah, finding places around the user,

00:30:30.700 --> 00:30:36.710
so that was use
number one. Ah, learning details about a place,

00:30:36.710 --> 00:30:41.379
use case
number two. And use case number three was

00:30:41.379 --> 00:30:44.739
having
conversations about a place. So what we wanted

00:30:44.739 --> 00:30:50.039
to enable
with the API is allow people to have their

00:30:50.039 --> 00:30:54.169
users selecting a
place, they get the place back, and then,

00:30:54.169 --> 00:30:58.150
you know, they're
going to aggregate -- They're going to add

00:30:58.150 --> 00:31:00.539
value to -- to
the place. If it's a review site, they're

00:31:00.539 --> 00:31:03.640
going to
aggregate reviews to the place. If it's, um,

00:31:03.640 --> 00:31:13.190
ah, say --
[ pause ] What was the example? It doesn't

00:31:13.190 --> 00:31:20.830
cross my mind
now, but it's okay. Um, so those two properties

00:31:20.830 --> 00:31:24.629
that you're
going to use to -- to establish this conversation.

00:31:24.629 --> 00:31:27.649
The
first property is the id, the id that is to

00:31:27.649 --> 00:31:32.429
allow users to
aggregate content about a place. Ah, the word

00:31:32.429 --> 00:31:34.330
 -- the
technical word that we use inside Google is

00:31:34.330 --> 00:31:40.209
cluster, to
cluster information around the place. [ pause

00:31:40.209 --> 00:31:46.099
 ] And this
schematic sort of tried to -- to show how

00:31:46.099 --> 00:31:51.049
that's done. So,
the id you can think of it as a -- a foreign

00:31:51.049 --> 00:31:54.030
key in your --
in your -- in your database. So you have a

00:31:54.030 --> 00:31:59.960
table of
reviews. And you -- The id you're going to

00:31:59.960 --> 00:32:04.429
use to link each
role into a specific place. But the trick

00:32:04.429 --> 00:32:10.129
is you can use
the id to fetch the -- the place detail. For

00:32:10.129 --> 00:32:14.599
this you have
the reference. So the reference is a way to

00:32:14.599 --> 00:32:20.989
fetch a place
that you've -- that you've -- the user returned

00:32:20.989 --> 00:32:24.119
in the past
and you want to fetch it in the future. So

00:32:24.119 --> 00:32:27.219
you also store
the reference. So you have your data pointing

00:32:27.219 --> 00:32:30.210
to your id,
which is linked to a reference. You use the

00:32:30.210 --> 00:32:36.380
reference to
get the place result. So the way you get your

00:32:36.380 --> 00:32:40.360
place result
from -- from a reference is calling the get

00:32:40.360 --> 00:32:44.259
place by
reference, which is in the place service class.

00:32:44.259 --> 00:32:47.109
So the
result is the same as when you do widget dot

00:32:47.109 --> 00:32:50.330
get -- get
place, which is, ah, a place result object.

00:32:50.330 --> 00:32:57.729
 [ pause ] So
on top of the widget, we've also been working

00:32:57.729 --> 00:33:03.610
on a Web
service that offers the same kind of functionality.

00:33:03.610 --> 00:33:06.330
So the
difference that it's not a -- a Javascript

00:33:06.330 --> 00:33:11.789
object. It's not
a Javascript implementation. It's, ah, HTTP

00:33:11.789 --> 00:33:14.862
interface. Ah,
the main -- the main reason you would want

00:33:14.862 --> 00:33:19.669
to use it is if
you're writing a -- a native app. So you're

00:33:19.669 --> 00:33:21.759
not
allow -- you're not allowed to use Javascript

00:33:21.759 --> 00:33:28.729
there. It
outputs JSON and XML. [ Pause ] So this is

00:33:28.729 --> 00:33:35.039
an example of,
ah, finding places using the HTTP interface.

00:33:35.039 --> 00:33:40.739
So you call
Maps API Place search, JSON, which means that

00:33:40.739 --> 00:33:42.769
you -- you
want the result to be in -- in JSON format.

00:33:42.769 --> 00:33:46.330
Ah, you pass
those arguments to location, radius, and also

00:33:46.330 --> 00:33:51.330
sensor. And
the result will be a JSON object, which will

00:33:51.330 --> 00:33:57.509
have the -- the
response status and the results, which will

00:33:57.509 --> 00:34:01.139
be a list of
places. And in this results you'll -- you'll

00:34:01.139 --> 00:34:06.619
have place
name, the types, the icon, and the reference.

00:34:06.619 --> 00:34:12.329
So you can
use that reference. Then on the second use

00:34:12.329 --> 00:34:16.810
case, which is
to get details about a place, so you call

00:34:16.810 --> 00:34:20.710
Maps API place
details XML. You pass the reference as, ah

00:34:20.710 --> 00:34:23.870
 -- which is the
reference id that came in the previous result.

00:34:23.870 --> 00:34:29.589
And you get
a place details response, which should have

00:34:29.589 --> 00:34:32.600
all the data
that we use to display the -- the dialogue

00:34:32.600 --> 00:34:38.220
previously.
We'll have the place name, vicinity, um, type

00:34:38.220 --> 00:34:47.020
tags, phone
number, address, all the works. [ pause ] So

00:34:47.020 --> 00:34:50.730
just before I
hand it over to -- to David, just recapping

00:34:50.730 --> 00:34:52.720
the -- the main
message that I want you guys to -- to take

00:34:52.720 --> 00:34:56.340
home from here.
Ah, first, Places. You should care about Places

00:34:56.340 --> 00:34:59.079
because
it's a more friendly, user-friendly way to

00:34:59.079 --> 00:35:02.790
communicate
location, right. Um, also there's a lot of

00:35:02.790 --> 00:35:05.369
interest
in -- in based services. They're becoming

00:35:05.369 --> 00:35:09.849
mainstream, so
users are much more open to providing their

00:35:09.849 --> 00:35:12.319
location.
They'll be more open. And I believe that at

00:35:12.319 --> 00:35:16.140
a point they
will start actually demanding, um, this type

00:35:16.140 --> 00:35:21.039
of features
from -- from mobile applications. Google is

00:35:21.039 --> 00:35:25.310
really, really
committed to providing high-quality location

00:35:25.310 --> 00:35:29.039
based tools for
developers. This is just the start. Ah, we

00:35:29.039 --> 00:35:33.510
have a lot of
ideas, and we plan to be working on them throughout

00:35:33.510 --> 00:35:39.349
the
year. Um, use Near Place, ah, Nearby Places

00:35:39.349 --> 00:35:44.809
to find, learn,
and have conversations about -- about places.

00:35:44.809 --> 00:35:49.451
Um, we plan
to release it shortly, hopefully in the next

00:35:49.451 --> 00:35:53.839
couple of
weeks. And more will be coming after that.

00:35:53.839 --> 00:35:58.190
So watch this
space. So now I'll hand it over to David and

00:35:58.190 --> 00:36:02.430
learn how he
has been using the -- the Place service.

00:36:02.430 --> 00:36:05.660
&gt;&gt; Thank you, Marcelo. [ applause ]

00:36:05.660 --> 00:36:10.910
&gt;&gt; Dave Wang: Hello, hello. Oh, cool. Um,
good afternoon,

00:36:10.910 --> 00:36:13.349
everybody. My name is Dave. I'm the, ah -- the
VP

00:36:13.349 --> 00:36:16.830
Marketing for Booyah. Um, so we're really,
really excited

00:36:16.830 --> 00:36:19.609
about, ah, kind of talking how MyTown has
really kind of

00:36:19.609 --> 00:36:23.119
layered on some of the gaming and entertainment
aspects over

00:36:23.119 --> 00:36:28.430
the, ah, Google, ah, Places Web services today.
Um, and so

00:36:28.430 --> 00:36:30.320
I don't know in terms of a show of hands who's
heard of,

00:36:30.320 --> 00:36:34.470
like, MyTown or Booyah? Okay. Cool, cool.
 [ laughs ]

00:36:34.470 --> 00:36:36.640
Great. So I'll take a couple of minutes to
kind of talk

00:36:36.640 --> 00:36:40.470
about this. So, I mean, as -- as, um -- as
Chris and

00:36:40.470 --> 00:36:42.619
Marcelo talked about, a lot of these check-in
apps are

00:36:42.619 --> 00:36:45.330
starting to become more and more popular.
Um, and, you

00:36:45.330 --> 00:36:48.481
know, MyTown is certainly one, um, in that
class of

00:36:48.481 --> 00:36:49.920
applications. And really what we do is really
bring much

00:36:49.920 --> 00:36:52.730
more of a Mersive gaming approach to this,
ah -- to this

00:36:52.730 --> 00:36:55.510
experience. And so what is MyTown? Ah, the
New York Times

00:36:55.510 --> 00:36:58.109
kind of summarized it as a real-world Monopoly.
So instead

00:36:58.109 --> 00:37:00.950
of playing a Monopoly game, you know on a
board game at

00:37:00.950 --> 00:37:03.610
home, you can actually play Monopoly, um,
around in the real

00:37:03.610 --> 00:37:06.520
locations. You can go and actually virtually
buy a Peet's

00:37:06.520 --> 00:37:09.010
Coffee or a McDonald's or a Starbucks. And
other people

00:37:09.010 --> 00:37:11.869
playing the game can kind of check in, and
you can collect

00:37:11.869 --> 00:37:13.640
rent, upgrade your properties. It's really,
really fun.

00:37:13.640 --> 00:37:16.010
Um, and so, you know, my previous company
we were looking at

00:37:16.010 --> 00:37:18.670
location based services for about half a decade,
um, and

00:37:18.670 --> 00:37:21.710
thinking, you know, utility, utility, utility.
But really,

00:37:21.710 --> 00:37:24.020
you know, from Booyah's perspective, my current
company,

00:37:24.020 --> 00:37:26.150
it's really through entertainment and gaming
is how we're

00:37:26.150 --> 00:37:28.760
actually funneling a lot of location based
services through.

00:37:28.760 --> 00:37:31.050
So, um, it's pretty fun and exciting. So the
concept and

00:37:31.050 --> 00:37:33.271
the flow, which I'll go through in a demo
in a couple of

00:37:33.271 --> 00:37:35.089
minutes is, you know, you start with the home
page, you

00:37:35.089 --> 00:37:36.619
know, the sooner you can check out your town
and hit the

00:37:36.619 --> 00:37:41.380
check-in button. And it uses, ah, ah, the
location of the

00:37:41.380 --> 00:37:44.079
user. And that's where we kind of interface
with the, ah,

00:37:44.079 --> 00:37:47.000
with the Place of services, ah, API. Um, and
then you can

00:37:47.000 --> 00:37:49.230
actually interact with the different properties.
Um, and

00:37:49.230 --> 00:37:52.150
we'll kind of talk about the context that
we brought to the,

00:37:52.150 --> 00:37:54.680
ah, opportunity and the thought process of
why we were

00:37:54.680 --> 00:37:57.579
really, really excited to partner with Google
as a -- as a

00:37:57.579 --> 00:38:00.660
lead partner here. Um, just some superquick
stats and also

00:38:00.660 --> 00:38:03.480
help with some context. We're growing superfast.
Um, we've

00:38:03.480 --> 00:38:05.680
been out for about five months with MyTown.
Um, actually

00:38:05.680 --> 00:38:09.089
over 2.1 million users now. We're, I think,
2.25 or

00:38:09.089 --> 00:38:11.359
something. Um, the engagement is superhigh.
So people are

00:38:11.359 --> 00:38:13.869
playing, like, over an hour a day on average.
So they're

00:38:13.869 --> 00:38:16.859
really into the game. Um, and a lot of check-ins,
about 100

00:38:16.859 --> 00:38:19.760
million a month. Um, and -- and, you know,
a hundred

00:38:19.760 --> 00:38:22.250
percent of our user base is in the U.S.A.
And that's really

00:38:22.250 --> 00:38:25.020
exciting, but, at the same time, it really
is -- the reason

00:38:25.020 --> 00:38:27.369
why we wanted to find a partner who had that
international

00:38:27.369 --> 00:38:30.539
scale. Because when you want to launch in
a hundred

00:38:30.539 --> 00:38:33.309
countries over the next, ah, couple of quarters
here, ah,

00:38:33.309 --> 00:38:37.821
there's a whole, whole web of contracts and
terms of service

00:38:37.821 --> 00:38:40.230
from every different map provider. It's kind
of an insane,

00:38:40.230 --> 00:38:43.299
ah, relatively intractable problem for a start-up
to solve.

00:38:43.299 --> 00:38:45.880
And I think that, you know, Google, um, with
its kind of

00:38:45.880 --> 00:38:48.330
best-in class performance enables -- You know,
you don't

00:38:48.330 --> 00:38:50.040
have to cache stuff. You can do a lot of stuff
just real

00:38:50.040 --> 00:38:51.960
time, and they've been able to solve a lot
of both the

00:38:51.960 --> 00:38:54.819
commercial and the, ah, technical, ah -- technical
challenge

00:38:54.819 --> 00:38:58.180
that we were facing. Um, so the context we
had is really,

00:38:58.180 --> 00:39:00.930
you know, if Booyah really wants to become,
um, a leader in

00:39:00.930 --> 00:39:03.270
real-world gaming, ah, we'd want these games
to be played

00:39:03.270 --> 00:39:06.789
worldwide. And, you know, trying to, you know,
have a very

00:39:06.789 --> 00:39:08.800
nice complement where we want to kind of -- You
know, we're

00:39:08.800 --> 00:39:11.579
at the intersection of entertainment, social,
and location

00:39:11.579 --> 00:39:14.810
graphs. Um, and we personally -- We made a
decision, a

00:39:14.810 --> 00:39:18.290
strategic one, really not to, ah -- not to
kind of reinvent

00:39:18.290 --> 00:39:21.589
the wheel, so to speak. We felt our value
at -- was the

00:39:21.589 --> 00:39:25.049
application layer of entertainment on top
of the kind of

00:39:25.049 --> 00:39:27.810
mapping and directory infrastructure. Um,
and we wanted to

00:39:27.810 --> 00:39:30.450
find a partner who kind of had that similar
alignment of

00:39:30.450 --> 00:39:32.960
roadmap both in terms of the core technology
but also on the

00:39:32.960 --> 00:39:35.569
commercial side. Um, so that's kind of the
context of some

00:39:35.569 --> 00:39:37.410
of the thinking. And I'm sure many of the
developers out

00:39:37.410 --> 00:39:40.280
there probably mirror that. Um, in terms of
implementation,

00:39:40.280 --> 00:39:42.779
there's a couple, ah -- a couple differences
here with the,

00:39:42.779 --> 00:39:44.730
ah -- with the new services that we're using.
One is the,

00:39:44.730 --> 00:39:47.910
ah, persistent location identification because
you need a

00:39:47.910 --> 00:39:50.260
kind of a persistent ID. If you want to have
a game, and,

00:39:50.260 --> 00:39:52.249
you know, Peet's Coffee has an ID, and you
want to layer

00:39:52.249 --> 00:39:54.740
your gaming information on top of that, that
ID needs to

00:39:54.740 --> 00:39:55.740
kind of be stable. If it's changing all the
time, it's hard

00:39:55.740 --> 00:39:58.789
to keep that consistent, from both game play
and other areas

00:39:58.789 --> 00:40:01.619
as well. And categorization is really important
as well

00:40:01.619 --> 00:40:03.349
because it just makes the game a lot more
fun, and you can

00:40:03.349 --> 00:40:06.849
get much more interesting signals coming in.
Um, the other

00:40:06.849 --> 00:40:09.300
thing that was really cool was the, ah -- the
whole HTML pod

00:40:09.300 --> 00:40:12.099
Place page. Because MyTown is an app on the
iPhone, so it's

00:40:12.099 --> 00:40:14.539
an actual native application. And so the certain
cadence

00:40:14.539 --> 00:40:18.190
and rhythm to submitting client applications
for approval

00:40:18.190 --> 00:40:21.329
and having that marriage between, you know,
a client app

00:40:21.329 --> 00:40:23.740
with a, ah -- a Web page that can, you know,
be dynamically,

00:40:23.740 --> 00:40:26.260
ah, changing and updated is -- is a pretty
good, ah --

00:40:26.260 --> 00:40:29.230
pretty good, ah, ah, combination there. So,
what I'm going

00:40:29.230 --> 00:40:32.910
to do now is, ah, switch over to, ah -- to
my phone here and

00:40:32.910 --> 00:40:35.970
just kind of walk through a, ah -- a brief
demo of, ah -- of

00:40:35.970 --> 00:40:40.190
MyTown, ah, using -- using Google's, ah, Places,
ah, Web

00:40:40.190 --> 00:40:42.020
services. And this will be live in a -- in
a couple of

00:40:42.020 --> 00:40:45.830
weeks. So, this is our top priority to get
it out in the

00:40:45.830 --> 00:40:48.980
market. Um, oops. Oh, okay. Those are my kids,
Damian and

00:40:48.980 --> 00:40:51.599
Tyler. All right, they're twins. Hi, guys.
I'll just, ah,

00:40:51.599 --> 00:40:54.671
log in real quick. Um, so this is MyTown.
And this is

00:40:54.671 --> 00:40:57.660
MyTown. I am actually, ah, level 42. I'm pretty
rich in

00:40:57.660 --> 00:41:01.250
MyTown. I got 312 million, ah, Booyah bucks
here. Um, I

00:41:01.250 --> 00:41:03.940
can kind of pan around. Um, and you kind of
see Godzilla

00:41:03.940 --> 00:41:06.799
kind of walking in the back of MyTown here.
But basically,

00:41:06.799 --> 00:41:08.740
you know, the core focus here is I can hit
the check-in

00:41:08.740 --> 00:41:12.859
button, and it actually, you know, hits the
Google servers.

00:41:12.859 --> 00:41:15.230
And we get it to location. It sends back,
you know,

00:41:15.230 --> 00:41:18.580
different locations, categories, and proximity.
Um, and

00:41:18.580 --> 00:41:21.119
we're at the, ah, Moscone Center here. So,
I'm at the

00:41:21.119 --> 00:41:22.770
Moscone Center. This is a process of what's
called checking

00:41:22.770 --> 00:41:24.980
in, for those who, ah, don't -- don't play
the check-in

00:41:24.980 --> 00:41:27.559
games. I can look at the proximity. Triple
green bars,

00:41:27.559 --> 00:41:30.280
that's great, extra points. Um, and, you know,
maybe you'll

00:41:30.280 --> 00:41:32.339
want to learn a little bit the Mos -- about
the Moscone

00:41:32.339 --> 00:41:34.240
Center. So I'm looking at business details.
And this is,

00:41:34.240 --> 00:41:36.670
again, we're locating the Place Page, ah,
that Marcelo was

00:41:36.670 --> 00:41:38.869
talking about. And we can kind of, you know,
take a look at

00:41:38.869 --> 00:41:42.260
the actual utility. I can, you know, call
 -- call them up.

00:41:42.260 --> 00:41:45.930
Um, oops. And I can check out, ah, the map
and other stuff.

00:41:45.930 --> 00:41:48.170
Um, and it's all through the HTML5 integration
through the

00:41:48.170 --> 00:41:50.700
in-app Web browser that we've done. Um, and
I can probably,

00:41:50.700 --> 00:41:53.390
ah, kind of see what's going on. I prepopulated
things,

00:41:53.390 --> 00:41:56.010
speaking at the Google I/O. Speaking at Google
I/O, Booyah,

00:41:56.010 --> 00:42:00.039
sweet. Close up the Facebook. Ah, see here
and check in.

00:42:00.039 --> 00:42:03.279
So I've, ah, checked in. I'm getting points.
I got a money

00:42:03.279 --> 00:42:07.152
sack and some cash, sweet. And then I can
kind of, ah, look

00:42:07.152 --> 00:42:10.170
in my different properties that I own in MyTown
here. Um, I

00:42:10.170 --> 00:42:13.870
can actually upgrade, ah, the different properties.
I can

00:42:13.870 --> 00:42:16.329
actually also edit the look. And I can apply
my little

00:42:16.329 --> 00:42:19.849
plant here and move them around and kind of
decorate them.

00:42:19.849 --> 00:42:22.839
And, um, basically a lot of, um -- a lot of
fun game play.

00:42:22.839 --> 00:42:25.769
But really the foundation underlying all this
stuff and this

00:42:25.769 --> 00:42:30.260
kind of user experience, um, is a rock solid,
um, location

00:42:30.260 --> 00:42:32.519
mapping database. And that's what we've kind
of found with,

00:42:32.519 --> 00:42:35.130
ah -- with Google in our partnership. So,
um, that's pretty

00:42:35.130 --> 00:42:46.690
much all I got. Um, thanks. Any -- And I guess
we'll turn

00:42:46.690 --> 00:42:48.319
it over for some questions. [ pause ] [ loud
applause ]

00:42:48.319 --> 00:42:51.510
&gt;&gt; Chris Lambert: Where did it go? So, ah,
we'll take live

00:42:51.510 --> 00:42:54.010
questions. It doesn't look like, ah, any are
submitted on

00:42:54.010 --> 00:42:55.010
moderator, but -- [ pause ]

00:42:55.010 --> 00:43:03.380
&gt;&gt; I've got a question for you.

00:43:03.380 --> 00:43:06.920
&gt;&gt; Chris Lambert: Yup. Go ahead.

00:43:06.920 --> 00:43:10.880
&gt;&gt; Um, this is harder. If you wouldn't mind,
if no one

00:43:10.880 --> 00:43:16.160
else is here. Um, so first, ah, as far as
Place IDs go, ah,

00:43:16.160 --> 00:43:18.950
I know this is something you haven't rolled
out just yet.

00:43:18.950 --> 00:43:21.920
But the impression I'm getting is that this
is yet another

00:43:21.920 --> 00:43:28.049
option for us to -- developer types -- to
add to our list of

00:43:28.049 --> 00:43:31.450
Yahoo's IDs, Twitter's IDs, all the other
providers out

00:43:31.450 --> 00:43:34.960
there who will give you an ID number associated
with the

00:43:34.960 --> 00:43:38.140
unique LatLng point out there. I'm wondering
if there are

00:43:38.140 --> 00:43:41.690
any plans in the works to coordinate between
these different

00:43:41.690 --> 00:43:45.980
services down the line, and if Google thinks
it could

00:43:45.980 --> 00:43:49.819
provide that. Um, I mean, in the -- back in
the old

00:43:49.819 --> 00:43:53.720
geography world, these are called gazetteers.
I haven't yet

00:43:53.720 --> 00:43:56.910
heard techy types talk about them much.

00:43:56.910 --> 00:44:02.500
&gt;&gt; Marcelo Camelo: Um, yeah. I don't think
we have any

00:44:02.500 --> 00:44:08.499
plans now to coordinate. [ pause ]

00:44:08.499 --> 00:44:12.599
&gt;&gt; Um. Okay. So, um, ah, we're certainly -- we're
certainly aware that there are a lot of different

00:44:12.599 --> 00:44:17.220
schemes
out there in terms of -- of place and geolocation.

00:44:17.220 --> 00:44:21.170
Um, IDs,
generally speaking, are one of the most difficult

00:44:21.170 --> 00:44:26.369
parts of
this project. Um, the natural expectation

00:44:26.369 --> 00:44:29.779
of developers and
users is that they find a place. Um, we give

00:44:29.779 --> 00:44:33.289
them an ID for
that place. Um, that if we -- if they find

00:44:33.289 --> 00:44:35.390
a place the
following week and it's the same place from

00:44:35.390 --> 00:44:37.789
the same ID, and
if they come back the following year and that

00:44:37.789 --> 00:44:39.359
place still
exists, then they would get the same ID again,

00:44:39.359 --> 00:44:41.829
and they can
use that ID to retrieve that place. Sounds

00:44:41.829 --> 00:44:45.410
very simple. It
turns out to be incredibly difficult to do

00:44:45.410 --> 00:44:48.289
right, because
the world is continuously changing under you.

00:44:48.289 --> 00:44:50.780
And our
perception of what the world is and our understanding

00:44:50.780 --> 00:44:53.109
of the
world around us continuously changes. So,

00:44:53.109 --> 00:44:58.270
um, plus it -- it
-- there's a certain degree of, um, ah, sort

00:44:58.270 --> 00:45:01.672
of subjectivity
as well. Right? Ah, I have a hotel. That hotel

00:45:01.672 --> 00:45:05.549
has a gym.
It has a bar. It has a restaurant. Are those

00:45:05.549 --> 00:45:08.970
separate
places? Are they all the same places? Um,

00:45:08.970 --> 00:45:12.660
over -- Different organizations have different
opinions as

00:45:12.660 --> 00:45:15.020
to what this is. And it's actually quite hard
to do this

00:45:15.020 --> 00:45:16.029
correlation. So, the decision we made was
that initially,

00:45:16.029 --> 00:45:18.990
for the purpose of just getting this out there,
um, we would

00:45:18.990 --> 00:45:22.950
not worry too much about, ah, cross-provider
compatibility.

00:45:22.950 --> 00:45:26.070
Um, but we'd just make sure that we had a
Place ID system in

00:45:26.070 --> 00:45:28.670
place that would serve our developers well
and meet

00:45:28.670 --> 00:45:31.400
the -- the -- their basic expectations of
what an ID scheme

00:45:31.400 --> 00:45:34.809
should offer. Um, but, ah, there's been a
 -- certainly a

00:45:34.809 --> 00:45:38.359
lot of interest in, um, coming up with a -- a
more common

00:45:38.359 --> 00:45:41.539
scheme or even, ah, if that's not practical,
coming up with

00:45:41.539 --> 00:45:44.050
a clearinghouse kind of model where someone
figures out, you

00:45:44.050 --> 00:45:47.030
know, the different places for different people,
um, and

00:45:47.030 --> 00:45:49.539
allow users to sort of translate from one
scheme to the

00:45:49.539 --> 00:45:51.279
next. And, ah, you know, whatever efforts
come -- come

00:45:51.279 --> 00:45:53.049
together around that we'd certainly -- we'd
certainly be

00:45:53.049 --> 00:45:56.970
interested in being part of that.

00:45:56.970 --> 00:45:59.710
&gt;&gt; Chris Lambert: So, I'll switch to a moderator
question.

00:45:59.710 --> 00:46:02.240
Um, Aaron asks, How does the registration
for applications

00:46:02.240 --> 00:46:05.670
work if the Latitude API is going to be used
from a native

00:46:05.670 --> 00:46:08.549
application on a mobile device? Ah, we currently
require

00:46:08.549 --> 00:46:13.030
that there is, ah, some unique identifier,
which, ah, is a

00:46:13.030 --> 00:46:15.610
domain name, which is registered with, ah,
Google's API

00:46:15.610 --> 00:46:19.589
service in order to use the API. So if it
is an application

00:46:19.589 --> 00:46:23.970
on a mobile device, um, you may have a domain
name or you

00:46:23.970 --> 00:46:26.510
can just use app engine to get one, just something
to

00:46:26.510 --> 00:46:29.410
uniquely identify your device that no other
application

00:46:29.410 --> 00:46:35.030
developer would be able to use. Um, so, ah,
and then take

00:46:35.030 --> 00:46:38.450
the other one too. Ah, Jeffery asked, Picking
up location

00:46:38.450 --> 00:46:41.200
mobile devices makes sense, but what about
making it easier

00:46:41.200 --> 00:46:43.250
to broadcast your location when logged into
a desktop

00:46:43.250 --> 00:46:46.980
operating system? Ah, this API is actually
perfectly suited

00:46:46.980 --> 00:46:50.369
to being used from the desktop. Ah, you could
probably have

00:46:50.369 --> 00:46:53.359
a native application or a browser extension
that

00:46:53.359 --> 00:46:57.609
continuously pulls your location, um, and
update it a bit

00:46:57.609 --> 00:47:01.990
with the Latitude API. Ah, that's fully supported.
It

00:47:01.990 --> 00:47:04.430
should work great today.

00:47:04.430 --> 00:47:08.260
&gt;&gt; Two questions. One is, um, we saw that
Motorola

00:47:08.260 --> 00:47:12.020
announced that they did a deal with Skyhook
to get,

00:47:12.020 --> 00:47:18.200
apparently, better accuracy than the Google
solution. And I

00:47:18.200 --> 00:47:21.849
wondered, ah, if you're using a Motorola device,
the feature

00:47:21.849 --> 00:47:23.799
that has that, will -- will they still be
able to -- You

00:47:23.799 --> 00:47:27.420
know, if you get a different location provider,
is there

00:47:27.420 --> 00:47:29.950
some way to use that in the Places for accuracy?
The second

00:47:29.950 --> 00:47:35.410
one is kind of related, which is, ah, what's
 -- How well

00:47:35.410 --> 00:47:38.619
does this is all work in a shopping mall,
which you have

00:47:38.619 --> 00:47:41.969
different levels in the same location and
all that.

00:47:41.969 --> 00:47:47.250
&gt;&gt; Chris Lambert: Sure. Um, so the -- the
first one, ah,

00:47:47.250 --> 00:47:50.359
with -- with whatever phone, whether it's
an -- an Motorola

00:47:50.359 --> 00:47:54.780
phone, an iPhone, or a GPS receiver itself,
but however the

00:47:54.780 --> 00:47:57.750
location is determined, whatever API you use
to determine

00:47:57.750 --> 00:48:00.862
the location, ah, you can send that into Latitude
API as it

00:48:00.862 --> 00:48:06.710
is. Um, so if you -- if you use a -- a Nexus
One or if you

00:48:06.710 --> 00:48:10.690
use a Motorola DROID, the location going into
the -- the

00:48:10.690 --> 00:48:12.650
Latitude API would be whatever the location
provider

00:48:12.650 --> 00:48:16.100
provided to you. Um, so it could be Skyhook;
it could be

00:48:16.100 --> 00:48:19.290
Google; it could be anything. Um, and as far
as your second

00:48:19.290 --> 00:48:21.079
question, I think that's more for --

00:48:21.079 --> 00:48:23.680
&gt;&gt; Marcelo Camelo: Yeah, yeah, um. That's
 -- that's a good

00:48:23.680 --> 00:48:31.009
point. Um, we -- we rank places by relevance.
Right. And

00:48:31.009 --> 00:48:36.400
there's a limit to how many places we return
with a -- on a

00:48:36.400 --> 00:48:40.519
single query. And that's currently about 20
to 25. So if

00:48:40.519 --> 00:48:46.119
you have more than that around you, or if
you're -- if the

00:48:46.119 --> 00:48:52.630
accuracy of the geolocation is too large,
then there may be

00:48:52.630 --> 00:48:56.650
a problem. But the idea is that we're going
to improve the

00:48:56.650 --> 00:49:00.029
relevance -- As --as the system gets used,
we hope to be

00:49:00.029 --> 00:49:05.019
able to improve the relevance by analyzing,
you know, what

00:49:05.019 --> 00:49:09.330
places are actually popular. We even, you
know, depending

00:49:09.330 --> 00:49:11.950
on the time of days. So it's at night, you're
more likely

00:49:11.950 --> 00:49:15.549
to -- to be looking at a night club or a restaurant.
If

00:49:15.549 --> 00:49:18.770
it's during the day, you're more likely to
be looking at a

00:49:18.770 --> 00:49:22.920
dentist. So, it's -- it's a challenge. And
that's one of

00:49:22.920 --> 00:49:27.559
the cases where -- one of the most difficult
cases. But

00:49:27.559 --> 00:49:32.309
we're trying to -- We're going to try to tackle
that.

00:49:32.309 --> 00:49:33.309
[ pause ]

00:49:33.309 --> 00:49:36.510
&gt;&gt; Ah, hi -- at UC Berkeley. Ah, I was , ah
 -- This has

00:49:36.510 --> 00:49:39.840
been touched upon a bit, ah, in the couple
of questions that

00:49:39.840 --> 00:49:43.560
have already been asked. But, ah, I -- I wanted
to sort of

00:49:43.560 --> 00:49:46.470
get a little bit of more detail on how it
is, what -- what

00:49:46.470 --> 00:49:51.480
mechanisms you guys are using in order to,
ah, cluster the

00:49:51.480 --> 00:49:57.180
metadata and the, ah -- and the, ah, LatLng
coordinates to

00:49:57.180 --> 00:50:01.309
constitute a place. So, and how do you sort
of keep track

00:50:01.309 --> 00:50:04.470
or perhaps what are some of the plans for
keeping track of,

00:50:04.470 --> 00:50:08.750
say, you know, ah, I just tagged -- Ah, five
years ago I

00:50:08.750 --> 00:50:11.310
tagged this bar that happened to have been
there. But it's

00:50:11.310 --> 00:50:13.259
no longer there and so it's no longer a place
and now I

00:50:13.259 --> 00:50:15.910
gotta change all that. I wanted to just get
a little bit

00:50:15.910 --> 00:50:16.960
more detail there.

00:50:16.960 --> 00:50:18.740
&gt;&gt; Marcelo Camelo: That's actually a -- You
know, it still

00:50:18.740 --> 00:50:24.269
works as a really, really big challenge. And
we -- we

00:50:24.269 --> 00:50:26.560
haven't solved it yet. So --

00:50:26.560 --> 00:50:28.019
&gt;&gt; How do you do it -- How do you do it now?

00:50:28.019 --> 00:50:30.240
&gt;&gt; Marcelo Camelo: So, okay, so, um, that's
one of the

00:50:30.240 --> 00:50:34.200
reasons why we have actually two tokens to
reference a

00:50:34.200 --> 00:50:37.519
place, one is the ID and the other one is
the reference.

00:50:37.519 --> 00:50:40.920
And the ID is sort of promising that we can
give you a

00:50:40.920 --> 00:50:46.880
single token, and promises that token will
be both stable

00:50:46.880 --> 00:50:49.900
and have good recall. We separate those into
two tokens,

00:50:49.900 --> 00:50:53.009
and one of the IDs that we promise this is
going to be as

00:50:53.009 --> 00:50:56.210
stable as we can. Ah, we're going to make
it as stable as

00:50:56.210 --> 00:50:59.400
we can, and so the token we're going to make
as recallable

00:50:59.400 --> 00:51:01.380
as we can. Um --

00:51:01.380 --> 00:51:05.380
&gt;&gt; I was wondering if you could do like, ah,
I've -- I've

00:51:05.380 --> 00:51:08.289
seen it done in other places, but perhaps
doing clustering

00:51:08.289 --> 00:51:11.049
based on how the places are being tagged and
sort of

00:51:11.049 --> 00:51:13.880
coupling that with the LatLng coordinates.
I don't know if

00:51:13.880 --> 00:51:14.880
that's --

00:51:14.880 --> 00:51:15.880
&gt;&gt; Marcelo Camelo: Well, currently all -- all,
ah,

00:51:15.880 --> 00:51:18.070
clustering is done offline, right?

00:51:18.070 --> 00:51:19.070
&gt;&gt; Uh-huh.

00:51:19.070 --> 00:51:21.720
&gt;&gt; Marcelo Camelo: And it's based on data
that we gather

00:51:21.720 --> 00:51:27.539
from -- from providers, both vendors and our
own internal

00:51:27.539 --> 00:51:31.750
providers. And we -- As this API gets more
used, we

00:51:31.750 --> 00:51:35.890
definitely plan to actually feed back that
 -- the data from

00:51:35.890 --> 00:51:37.819
its each usage, back into the clustering pipeline
 --

00:51:37.819 --> 00:51:41.230
pipeline, hopefully improve the -- the clustering.

00:51:41.230 --> 00:51:42.570
&gt;&gt; Thanks.

00:51:42.570 --> 00:51:47.349
&gt;&gt; For the, ah, Latitude API, you demonstrated
getting a

00:51:47.349 --> 00:51:50.250
location based on the time. Um, is that a
 -- you have to

00:51:50.250 --> 00:51:53.140
have the specific time stamp of the location
or is that, ah,

00:51:53.140 --> 00:51:57.609
a location around here? And if -- if it's,
ah, more

00:51:57.609 --> 00:52:00.160
generalized, how do you do the integration
between locations

00:52:00.160 --> 00:52:01.160
that aren't right now?

00:52:01.160 --> 00:52:02.160
&gt;&gt; Chris Lambert: Right. So, ah, current location,
ah, you

00:52:02.160 --> 00:52:04.799
don't have to specify the time stamp. We'll
just take the

00:52:04.799 --> 00:52:07.450
user's most recent location. Um, so there
 -- there you're

00:52:07.450 --> 00:52:12.769
good to go. You just access the current location
call. Ah,

00:52:12.769 --> 00:52:16.460
for historical location, you access it by
time range. So

00:52:16.460 --> 00:52:20.220
you can specify today; you can specify this
hour; you can

00:52:20.220 --> 00:52:22.880
specify this exact second, um. But we don't
actually do

00:52:22.880 --> 00:52:25.590
interpolation, ah, of location time stamps.

00:52:25.590 --> 00:52:27.299
&gt;&gt; So if I -- So if I want the user's location,
I have to

00:52:27.299 --> 00:52:28.779
ask you for a range around that --

00:52:28.779 --> 00:52:30.250
&gt;&gt; Chris Lambert: And -- and you can --

00:52:30.250 --> 00:52:31.250
&gt;&gt; A bigger range -- a bigger range?

00:52:31.250 --> 00:52:32.510
&gt;&gt; Chris Lambert: Yes. So, like, if you wanted
to know

00:52:32.510 --> 00:52:35.700
where I was at lunch today you could request
today and then

00:52:35.700 --> 00:52:38.910
look at kind of what's the most accurate location
reports

00:52:38.910 --> 00:52:44.670
within some time frame you would just define
as lunch, so.

00:52:44.670 --> 00:52:47.800
&gt;&gt; Yeah. Um, was the Booyah app that we saw,
was that the

00:52:47.800 --> 00:52:48.800
HTML5 Geolocation API?

00:52:48.800 --> 00:52:49.800
&gt;&gt; Dave Wang: Yeah.

00:52:49.800 --> 00:52:51.460
&gt;&gt; Okay, so, um -- I didn't --

00:52:51.460 --> 00:52:54.060
&gt;&gt; Dave Wang: I think so. I'm -- I'm a marketing
dude, so

00:52:54.060 --> 00:52:55.060
I think so.

00:52:55.060 --> 00:52:56.890
&gt;&gt; Okay. My question was I noticed whenever
you, ah, fired

00:52:56.890 --> 00:53:01.339
up the app that it didn't -- at least unless
I missed it --

00:53:01.339 --> 00:53:02.580
it didn't send out the this app's trying to
use your

00:53:02.580 --> 00:53:03.580
location.

00:53:03.580 --> 00:53:04.580
&gt;&gt; Chris Lambert: So, it -- um --

00:53:04.580 --> 00:53:05.580
&gt;&gt; Dave Wang: Oh.

00:53:05.580 --> 00:53:06.580
&gt;&gt; Chris Lambert: That iPhone app was actually
probably

00:53:06.580 --> 00:53:07.580
correlated.

00:53:07.580 --> 00:53:08.580
&gt;&gt; Dave Wang: Yeah. I can -- I can actually
answer that

00:53:08.580 --> 00:53:09.580
because, ah, I can fiddle with it. And so
if I actually do

00:53:09.580 --> 00:53:12.890
something specific, like get directions or
something like

00:53:12.890 --> 00:53:15.221
that, then it actually will pop up a window
to say, Are you

00:53:15.221 --> 00:53:18.240
allowed to use the location? Um, so I -- I
don't think I

00:53:18.240 --> 00:53:20.499
showed it in the demo, but it does have it.

00:53:20.499 --> 00:53:23.069
&gt;&gt; Okay. I guess my question was I'm pretty
sure, ah, at

00:53:23.069 --> 00:53:25.390
least defining the API, they say that they
want you to pop

00:53:25.390 --> 00:53:28.180
that up any time. My question was kind of
is there, ah,

00:53:28.180 --> 00:53:30.930
sort of a more aesthetic way to do it? Or
is there a way to

00:53:30.930 --> 00:53:34.349
kind of set it to this person is clearly wanting
to interact

00:53:34.349 --> 00:53:35.589
with this app? We don't need to bug them every
time or

00:53:35.589 --> 00:53:37.089
trying to query their position. Or is that
just part of the

00:53:37.089 --> 00:53:38.089
default API?

00:53:38.089 --> 00:53:40.951
&gt;&gt; Dave Wang: Um, right now we are doing,
I think, just the

00:53:40.951 --> 00:53:43.339
default. Um, so, you know, certainly it's
something we'll

00:53:43.339 --> 00:53:45.349
explore, but right now it's just really we
hand it -- When

00:53:45.349 --> 00:53:49.109
you're in that browser, we just hand it over
to Google.

00:53:49.109 --> 00:53:51.359
&gt;&gt; All right. Okay, cool. Thanks.

00:53:51.359 --> 00:53:54.539
&gt;&gt; You mentioned that, ah, when you provide
LatLng and you

00:53:54.539 --> 00:53:57.680
get back a list of what the location might
be that it's a

00:53:57.680 --> 00:54:01.400
relevant sort of list of, say, 20 results.
Is there any

00:54:01.400 --> 00:54:04.730
notion of that being personal relevance based
on the

00:54:04.730 --> 00:54:07.410
identity of the user sending it back into
historical or

00:54:07.410 --> 00:54:08.410
their friend's activity?

00:54:08.410 --> 00:54:10.930
&gt;&gt; Dave Wang: Right, right. Um, so the current,
um, ah,

00:54:10.930 --> 00:54:13.170
implementation when you hit the check-in button
we do

00:54:13.170 --> 00:54:16.579
actually just directly look at Google's, um,
you know,

00:54:16.579 --> 00:54:20.410
basically, essentially a place rank or page
rank of places.

00:54:20.410 --> 00:54:23.009
Um, in terms like Learing on additional intelligence
within

00:54:23.009 --> 00:54:25.980
a specific context of our game, um, those
are things that

00:54:25.980 --> 00:54:27.950
are kind of in discussion right now. But right
now

00:54:27.950 --> 00:54:30.079
we're -- we're quite pleased with what we're
seeing by

00:54:30.079 --> 00:54:31.200
Google by default.

00:54:31.200 --> 00:54:33.450
&gt;&gt; So just global. Okay.

00:54:33.450 --> 00:54:35.690
&gt;&gt; Dave Wang: Yeah. [ pause ]

00:54:35.690 --> 00:54:39.119
&gt;&gt; Hi. If a business, um, decided to move
locations, how

00:54:39.119 --> 00:54:40.369
would you handle that?

00:54:40.369 --> 00:54:41.890
&gt;&gt; Marcelo Camelo: Yeah. That's -- that's
one of the

00:54:41.890 --> 00:54:47.339
challenges of the idea of having stable IDs.
Ah, so what if

00:54:47.339 --> 00:54:53.000
the business moves two stores down? Like is
it the same

00:54:53.000 --> 00:54:57.009
place? What if it moves 200 meters down, is
it the same

00:54:57.009 --> 00:55:01.480
place? So that's -- that's the subjective
aspect that were

00:55:01.480 --> 00:55:05.170
mentioned. We -- we honestly don't have a,
ah, ah, answer

00:55:05.170 --> 00:55:09.869
to that yet. Um, our -- our clustering are
written. They

00:55:09.869 --> 00:55:12.849
have some heuristics. So I know that if -- if
a place moves

00:55:12.849 --> 00:55:16.440
just less than 200 meters, it's considered
to be the same

00:55:16.440 --> 00:55:19.180
place, because it could be just a -- a jitter
in the -- in

00:55:19.180 --> 00:55:22.660
that. If it moves more than that, we consider
that it's

00:55:22.660 --> 00:55:25.339
actually moved, and it's, ah -- it's a new
place. But

00:55:25.339 --> 00:55:26.960
that's -- You know, there are other challenges
as well.

00:55:26.960 --> 00:55:30.690
What if the places change name, and they change
names all

00:55:30.690 --> 00:55:33.810
the time, not because the business change
names but because

00:55:33.810 --> 00:55:37.681
the -- the data provider improves the data
or makes the data

00:55:37.681 --> 00:55:41.810
worse. So something that's called Jackson
and Son's, um,

00:55:41.810 --> 00:55:46.049
Meat Shop can become Jackson's Family Meat
Shop. So is that

00:55:46.049 --> 00:55:49.819
the same place? Um, so we have heuristics
to that, and it's

00:55:49.819 --> 00:55:53.329
really hard for me to tell where we draw the
line. And the

00:55:53.329 --> 00:55:56.400
-- the -- the line changes every time, so.
It's a

00:55:56.400 --> 00:55:57.400
challenge.

00:55:57.400 --> 00:55:59.029
&gt;&gt; Chris Lambert: Ah, in front.

00:55:59.029 --> 00:56:02.790
&gt;&gt; Thanks. Maybe this is sort of more a question
about

00:56:02.790 --> 00:56:05.080
underlying location APIs, but thinking ahead
in terms of

00:56:05.080 --> 00:56:07.450
the -- the growing set of applications you
 -- you might see

00:56:07.450 --> 00:56:12.210
here. Um, let's say the relationship between
location and

00:56:12.210 --> 00:56:17.039
requirements like E911 where things -- Again,
thinking ahead

00:56:17.039 --> 00:56:20.339
to applications where -- where the line may
get a little

00:56:20.339 --> 00:56:23.660
fuzzy with respect to, ah, entertainment versus
convenience

00:56:23.660 --> 00:56:29.789
versus maybe something related to, you know,
safety, ah, in

00:56:29.789 --> 00:56:33.269
the future. For instance, is there a -- is
there a level of

00:56:33.269 --> 00:56:37.910
granularity that says this is E911 compliant
 -- compliant

00:56:37.910 --> 00:56:39.909
location; go ahead use it?

00:56:39.909 --> 00:56:43.760
&gt;&gt; Chris Lambert: Um, so there's nothing in
the APIs to

00:56:43.760 --> 00:56:46.240
address that now. But I -- I suspect that
whether at the

00:56:46.240 --> 00:56:50.339
browser level or the -- the OS level or whatever
the device

00:56:50.339 --> 00:56:53.300
that actually has -- these -- API would -- Yeah.
So I

00:56:53.300 --> 00:56:57.160
don't know how that would work. I haven't
thought about

00:56:57.160 --> 00:57:00.450
that. But that's -- that's an interesting
question.

00:57:00.450 --> 00:57:01.450
&gt;&gt; Okay.

00:57:01.450 --> 00:57:04.750
&gt;&gt; So, for the Latitude APIs, ah, we're going
to need a time

00:57:04.750 --> 00:57:06.710
stamp, obviously, to log, ah -- to log when
the current

00:57:06.710 --> 00:57:11.690
location is. Um, how do we manage time zones?
Um, do you

00:57:11.690 --> 00:57:14.510
guys handle the time zones by assuming that
the time that we

00:57:14.510 --> 00:57:18.690
record the entry, if it's a live entry, has
got to be within

00:57:18.690 --> 00:57:22.950
the time zone of the geocoordinates and then
compute it and

00:57:22.950 --> 00:57:25.859
so that we can have, ah, an absolute timestamp,
or --

00:57:25.859 --> 00:57:29.049
&gt;&gt; Chris Lambert: Ah, yes. So if you -- if
you update

00:57:29.049 --> 00:57:31.140
current location, it'll actually take the
current time you

00:57:31.140 --> 00:57:33.690
specify. If you update the historical location,
ah, you

00:57:33.690 --> 00:57:37.369
specify the -- the milliseconds, ah, in GP
time.

00:57:37.369 --> 00:57:40.480
&gt;&gt; Yeah, but since there's no, um -- there's
no time zone

00:57:40.480 --> 00:57:43.990
variable in the, ah -- in the documentation.
Say I travel

00:57:43.990 --> 00:57:48.509
from LA to, ah -- Say I travel from Europe
to Los Angeles.

00:57:48.509 --> 00:57:52.960
Ah, so I take off at 4 p.m. and I'm going
to land at 5 p.m.

00:57:52.960 --> 00:57:57.069
But nine or ten hours has spent since. Ah,
are you going to

00:57:57.069 --> 00:58:00.980
be able to fill in that gap, or is it going
to be marked as,

00:58:00.980 --> 00:58:01.980
you know, one hour ahead only?

00:58:01.980 --> 00:58:03.200
&gt;&gt; Chris Lambert: Um, so yeah. For the -- the
case you're

00:58:03.200 --> 00:58:06.190
on the plane there it would actually be two
location

00:58:06.190 --> 00:58:10.380
history, ah, entries, one before you left
and one when you

00:58:10.380 --> 00:58:14.599
landed. Um, and we don't do any interpolation
on our end.

00:58:14.599 --> 00:58:17.829
So if you wanted to figure out the flight
path or something

00:58:17.829 --> 00:58:20.380
there's a -- then you -- you can do that.
You could just

00:58:20.380 --> 00:58:23.940
request the time range and then fill in the
 -- fill in the

00:58:23.940 --> 00:58:24.940
gaps.

00:58:24.940 --> 00:58:26.030
&gt;&gt; Got it. Thank you.

00:58:26.030 --> 00:58:27.030
&gt;&gt; Chris Lambert: Okay.

00:58:27.030 --> 00:58:28.700
&gt;&gt; Ah, can you give us, ah, just a little
insight as to what

00:58:28.700 --> 00:58:32.259
you expect in the Nearby Places in terms of
service and

00:58:32.259 --> 00:58:33.259
licensing?

00:58:33.259 --> 00:58:34.259
&gt;&gt; Marcelo Camelo: I'll defer that to Torr.

00:58:34.259 --> 00:58:35.259
&gt;&gt; Hmm. [ pause ] [ sniff ] [ pause ]

00:58:35.259 --> 00:58:46.640
&gt;&gt; Okay. The question du jour. Um. [ laughs
 ] So, um,

00:58:46.640 --> 00:58:49.079
the Nearby Places widget will probably just
automatically go

00:58:49.079 --> 00:58:57.089
in V3. And, um, as such you would be subject
to the same

00:58:57.089 --> 00:59:00.140
terms, um, the rate of Maps API. The one -- I
 -- I should

00:59:00.140 --> 00:59:03.940
caveat by saying the terms of service will
be updated, um,

00:59:03.940 --> 00:59:09.359
to extend to local business listing data,
because this is

00:59:09.359 --> 00:59:10.359
the first time we've had local business listing
search

00:59:10.359 --> 00:59:12.089
integrated into the Maps API rather than in
a separate, um,

00:59:12.089 --> 00:59:20.680
business listing search service that Google
provide -- provides. Um, so the existing Maps

00:59:20.680 --> 00:59:23.020
API terms has
some restrictions around long-term service

00:59:23.020 --> 00:59:26.500
of data. Um, and
one of the reasons we have this IE scheme,

00:59:26.500 --> 00:59:31.109
um, is, um, to
allow a -- ah, developers to build the plan

00:59:31.109 --> 00:59:32.970
of applications
we expect they're going to want to build,

00:59:32.970 --> 00:59:36.020
um, without
falling foul of some of those limitations.

00:59:36.020 --> 00:59:39.180
Now, the,
um -- I should also point out that, um, this

00:59:39.180 --> 00:59:42.990
is somewhat of
a -- a technology preview. Um, this is not

00:59:42.990 --> 00:59:46.430
going to be
available, like, today. Um, we're going to

00:59:46.430 --> 00:59:49.472
start -- We're
going to put some docs up so you could also

00:59:49.472 --> 00:59:50.472
see -- um, see
what's coming. But, ah, we should have, um,

00:59:50.472 --> 00:59:54.069
all this
launched, um, ah, probably July; I would say.

00:59:54.069 --> 00:59:58.200
That might --
That's how it's looking. Um, the Places Web

00:59:58.200 --> 01:00:01.839
service is
quite a different animal. Um, we have some

01:00:01.839 --> 01:00:06.499
 -- Local
business listing data generally is, ah, is

01:00:06.499 --> 01:00:08.089
unusual, um,
relatively speaking compared to some of the

01:00:08.089 --> 01:00:13.019
other types of
map data that we deal with, in terms of the

01:00:13.019 --> 01:00:14.019
way it's
licensed, the cost to us, as are other complicated

01:00:14.019 --> 01:00:16.440
things,
which means that, um, we have to take somewhat

01:00:16.440 --> 01:00:18.809
stricter
precautions against sort of abuse and misuse

01:00:18.809 --> 01:00:20.910
of them.
Perhaps we've had to deal with some of the

01:00:20.910 --> 01:00:23.450
other services in
the past. So the Places Web service will still

01:00:23.450 --> 01:00:25.789
be part of
the Maps API. It will still be part of our

01:00:25.789 --> 01:00:29.050
suite of Web
services that we have, directions, geocoding,

01:00:29.050 --> 01:00:30.519
elevation, and
so forth. Um, but it will have some stricter

01:00:30.519 --> 01:00:32.630
authentication
requirements around it, and some stricter

01:00:32.630 --> 01:00:36.000
 -- some more
precise, um, sort of acceptable use guidelines

01:00:36.000 --> 01:00:38.940
that you'll
need to meet. And as a consequence of that,

01:00:38.940 --> 01:00:42.650
um, we will
require that developers sort of, ah, um, provide

01:00:42.650 --> 01:00:45.029
us with
some credentials, um, to use the service,

01:00:45.029 --> 01:00:49.130
um, and, ah, and,
um, sign their request so that we can authenticate

01:00:49.130 --> 01:00:51.920
them.
Um, now, this is not a sign of things to come.

01:00:51.920 --> 01:00:54.640
I know, ah,
some people might be worried this is sort

01:00:54.640 --> 01:00:56.069
of the tip of the
iceberg thing. I mean, we've just taken keys

01:00:56.069 --> 01:00:59.059
out of V3, and
we're coming back with all these new requirements,

01:00:59.059 --> 01:01:01.549
you know.
It is very -- very specific to this service.

01:01:01.549 --> 01:01:04.460
Um, what we do
plan to do -- and this should be out, um,

01:01:04.460 --> 01:01:08.019
within the -- the
next hour -- is start collecting interest

01:01:08.019 --> 01:01:11.630
in this service,
um, today. So, if this is something that you're

01:01:11.630 --> 01:01:13.589
interested
in, um, there will be, ah, documentation going

01:01:13.589 --> 01:01:15.920
out today
that shows you how it works. You can sort

01:01:15.920 --> 01:01:18.490
of figure out
whether this will -- will suit you. Um, I

01:01:18.490 --> 01:01:20.910
should stress
also that, you know, right now it's really

01:01:20.910 --> 01:01:23.760
designed to do
these kind of check-in star applications.

01:01:23.760 --> 01:01:26.240
It's basically
around-me type searches. Um, we don't have

01:01:26.240 --> 01:01:27.880
sort of free
text searches in there yet. They're kind of

01:01:27.880 --> 01:01:30.680
more complex
local business listing searches; that will

01:01:30.680 --> 01:01:33.890
all come in time.
Um, but yes we'll start, ah, ah -- you could

01:01:33.890 --> 01:01:35.960
start,
um -- You can sort of register your interest

01:01:35.960 --> 01:01:39.089
today, ah, as
of today, and then we'll, you know, we'll

01:01:39.089 --> 01:01:42.639
get back to you
once, ah -- once we're good to go.

01:01:42.639 --> 01:01:44.180
&gt;&gt; Chris Lambert: So -- so we are -- we are
out of time,

01:01:44.180 --> 01:01:47.170
but, ah, we'll be available outside after
for more

01:01:47.170 --> 01:01:48.950
questions. There's a few more of you.

01:01:48.950 --> 01:01:50.549
&gt;&gt; Dave Wang: Thank you. Thank you, everybody.

