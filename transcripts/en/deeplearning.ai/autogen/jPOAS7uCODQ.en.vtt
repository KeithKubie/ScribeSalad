WEBVTT
Kind: captions
Language: en

00:00:03.049 --> 00:00:05.780
you're now ready to see how to go one

00:00:05.780 --> 00:00:05.790
you're now ready to see how to go one
 

00:00:05.790 --> 00:00:07.849
you're now ready to see how to go one
layer of a convolution on your network

00:00:07.849 --> 00:00:07.859
layer of a convolution on your network
 

00:00:07.859 --> 00:00:12.890
layer of a convolution on your network
let's go through the example you've seen

00:00:12.890 --> 00:00:12.900
let's go through the example you've seen
 

00:00:12.900 --> 00:00:15.110
let's go through the example you've seen
in the previous video how to take a 3d

00:00:15.110 --> 00:00:15.120
in the previous video how to take a 3d
 

00:00:15.120 --> 00:00:19.250
in the previous video how to take a 3d
volume and convolve it with say two

00:00:19.250 --> 00:00:19.260
volume and convolve it with say two
 

00:00:19.260 --> 00:00:22.970
volume and convolve it with say two
different filters in order to get in

00:00:22.970 --> 00:00:22.980
different filters in order to get in
 

00:00:22.980 --> 00:00:30.070
different filters in order to get in
this example two different 4x4 outputs

00:00:30.070 --> 00:00:30.080
 

00:00:30.080 --> 00:00:33.530
so let's say convolving with the first

00:00:33.530 --> 00:00:33.540
so let's say convolving with the first
 

00:00:33.540 --> 00:00:40.330
so let's say convolving with the first
filter gives this first 4x4 output and

00:00:40.330 --> 00:00:40.340
filter gives this first 4x4 output and
 

00:00:40.340 --> 00:00:44.690
filter gives this first 4x4 output and
convolving with this second filter gives

00:00:44.690 --> 00:00:44.700
convolving with this second filter gives
 

00:00:44.700 --> 00:00:49.940
convolving with this second filter gives
a different 4x4 output the final thing

00:00:49.940 --> 00:00:49.950
a different 4x4 output the final thing
 

00:00:49.950 --> 00:00:53.540
a different 4x4 output the final thing
to turn this into a convolutional neural

00:00:53.540 --> 00:00:53.550
to turn this into a convolutional neural
 

00:00:53.550 --> 00:00:57.020
to turn this into a convolutional neural
net layer is that for each of these

00:00:57.020 --> 00:00:57.030
net layer is that for each of these
 

00:00:57.030 --> 00:01:01.849
net layer is that for each of these
we're going to add it bias so this is

00:01:01.849 --> 00:01:01.859
we're going to add it bias so this is
 

00:01:01.859 --> 00:01:04.609
we're going to add it bias so this is
going to be a real number and what -

00:01:04.609 --> 00:01:04.619
going to be a real number and what -
 

00:01:04.619 --> 00:01:06.740
going to be a real number and what -
broadcasting you kind of had the same

00:01:06.740 --> 00:01:06.750
broadcasting you kind of had the same
 

00:01:06.750 --> 00:01:09.950
broadcasting you kind of had the same
number - every you know one of these

00:01:09.950 --> 00:01:09.960
number - every you know one of these
 

00:01:09.960 --> 00:01:12.620
number - every you know one of these
sixteen elements and then apply a

00:01:12.620 --> 00:01:12.630
sixteen elements and then apply a
 

00:01:12.630 --> 00:01:15.830
sixteen elements and then apply a
non-linearity which for illustration

00:01:15.830 --> 00:01:15.840
non-linearity which for illustration
 

00:01:15.840 --> 00:01:17.660
non-linearity which for illustration
that says there a luna mini arity and

00:01:17.660 --> 00:01:17.670
that says there a luna mini arity and
 

00:01:17.670 --> 00:01:23.480
that says there a luna mini arity and
this gives you a 4x4 output after

00:01:23.480 --> 00:01:23.490
this gives you a 4x4 output after
 

00:01:23.490 --> 00:01:25.539
this gives you a 4x4 output after
applying the bias and the non-linearity

00:01:25.539 --> 00:01:25.549
applying the bias and the non-linearity
 

00:01:25.549 --> 00:01:28.550
applying the bias and the non-linearity
and then for this thing at the bottom as

00:01:28.550 --> 00:01:28.560
and then for this thing at the bottom as
 

00:01:28.560 --> 00:01:31.460
and then for this thing at the bottom as
well you had some different buyers again

00:01:31.460 --> 00:01:31.470
well you had some different buyers again
 

00:01:31.470 --> 00:01:33.710
well you had some different buyers again
this is a real number so you had the

00:01:33.710 --> 00:01:33.720
this is a real number so you had the
 

00:01:33.720 --> 00:01:36.230
this is a real number so you had the
same row number - all 16 numbers and

00:01:36.230 --> 00:01:36.240
same row number - all 16 numbers and
 

00:01:36.240 --> 00:01:38.600
same row number - all 16 numbers and
then applies some non-linearity that

00:01:38.600 --> 00:01:38.610
then applies some non-linearity that
 

00:01:38.610 --> 00:01:42.260
then applies some non-linearity that
fairly non-linearity and this gives you

00:01:42.260 --> 00:01:42.270
fairly non-linearity and this gives you
 

00:01:42.270 --> 00:01:48.289
fairly non-linearity and this gives you
a different 4x4 output then same as we

00:01:48.289 --> 00:01:48.299
a different 4x4 output then same as we
 

00:01:48.299 --> 00:01:51.380
a different 4x4 output then same as we
did before if you take this and stack it

00:01:51.380 --> 00:01:51.390
did before if you take this and stack it
 

00:01:51.390 --> 00:01:57.050
did before if you take this and stack it
up as follows so they end up with a 4 by

00:01:57.050 --> 00:01:57.060
up as follows so they end up with a 4 by
 

00:01:57.060 --> 00:02:01.249
up as follows so they end up with a 4 by
4 by 2 output then this computation

00:02:01.249 --> 00:02:01.259
4 by 2 output then this computation
 

00:02:01.259 --> 00:02:04.310
4 by 2 output then this computation
where you've gone from 6 by 6 by 3 to a

00:02:04.310 --> 00:02:04.320
where you've gone from 6 by 6 by 3 to a
 

00:02:04.320 --> 00:02:08.650
where you've gone from 6 by 6 by 3 to a
4 by 4 by 4 this is one layer of a

00:02:08.650 --> 00:02:08.660
4 by 4 by 4 this is one layer of a
 

00:02:08.660 --> 00:02:11.080
4 by 4 by 4 this is one layer of a
convolutional neural network

00:02:11.080 --> 00:02:11.090
convolutional neural network
 

00:02:11.090 --> 00:02:14.020
convolutional neural network
Center mapped is back to one layer of

00:02:14.020 --> 00:02:14.030
Center mapped is back to one layer of
 

00:02:14.030 --> 00:02:16.000
Center mapped is back to one layer of
for propagation in the standard neural

00:02:16.000 --> 00:02:16.010
for propagation in the standard neural
 

00:02:16.010 --> 00:02:17.800
for propagation in the standard neural
network when a non convolutional neural

00:02:17.800 --> 00:02:17.810
network when a non convolutional neural
 

00:02:17.810 --> 00:02:20.530
network when a non convolutional neural
network remember that one step afford

00:02:20.530 --> 00:02:20.540
network remember that one step afford
 

00:02:20.540 --> 00:02:22.930
network remember that one step afford
prot was something like this right

00:02:22.930 --> 00:02:22.940
prot was something like this right
 

00:02:22.940 --> 00:02:27.250
prot was something like this right
z1 equals w1 times a0 a0 was also equal

00:02:27.250 --> 00:02:27.260
z1 equals w1 times a0 a0 was also equal
 

00:02:27.260 --> 00:02:31.479
z1 equals w1 times a0 a0 was also equal
to X right and then plus b1 and he

00:02:31.479 --> 00:02:31.489
to X right and then plus b1 and he
 

00:02:31.489 --> 00:02:34.809
to X right and then plus b1 and he
applied the non-linearity to get a 1 so

00:02:34.809 --> 00:02:34.819
applied the non-linearity to get a 1 so
 

00:02:34.819 --> 00:02:39.699
applied the non-linearity to get a 1 so
that's G of Z 1 so this input here in

00:02:39.699 --> 00:02:39.709
that's G of Z 1 so this input here in
 

00:02:39.709 --> 00:02:42.670
that's G of Z 1 so this input here in
this analogy this is a 0 or this is

00:02:42.670 --> 00:02:42.680
this analogy this is a 0 or this is
 

00:02:42.680 --> 00:02:46.990
this analogy this is a 0 or this is
actually and these filters here this

00:02:46.990 --> 00:02:47.000
actually and these filters here this
 

00:02:47.000 --> 00:02:52.750
actually and these filters here this
plays a role similar to w1 and you

00:02:52.750 --> 00:02:52.760
plays a role similar to w1 and you
 

00:02:52.760 --> 00:02:54.400
plays a role similar to w1 and you
remember during the convolution

00:02:54.400 --> 00:02:54.410
remember during the convolution
 

00:02:54.410 --> 00:02:57.160
remember during the convolution
operation you're taking these 27 numbers

00:02:57.160 --> 00:02:57.170
operation you're taking these 27 numbers
 

00:02:57.170 --> 00:02:59.920
operation you're taking these 27 numbers
or really well 27 times 2 because you

00:02:59.920 --> 00:02:59.930
or really well 27 times 2 because you
 

00:02:59.930 --> 00:03:01.930
or really well 27 times 2 because you
have two filters repeating all of these

00:03:01.930 --> 00:03:01.940
have two filters repeating all of these
 

00:03:01.940 --> 00:03:04.059
have two filters repeating all of these
numbers and multiplying them so you're

00:03:04.059 --> 00:03:04.069
numbers and multiplying them so you're
 

00:03:04.069 --> 00:03:06.610
numbers and multiplying them so you're
really computing a linear function to

00:03:06.610 --> 00:03:06.620
really computing a linear function to
 

00:03:06.620 --> 00:03:10.390
really computing a linear function to
get this 4 by 4 matrix so that 4 by 4

00:03:10.390 --> 00:03:10.400
get this 4 by 4 matrix so that 4 by 4
 

00:03:10.400 --> 00:03:13.120
get this 4 by 4 matrix so that 4 by 4
matrix the outputs of the convolution

00:03:13.120 --> 00:03:13.130
matrix the outputs of the convolution
 

00:03:13.130 --> 00:03:15.750
matrix the outputs of the convolution
operation that plays a role similar to

00:03:15.750 --> 00:03:15.760
operation that plays a role similar to
 

00:03:15.760 --> 00:03:21.610
operation that plays a role similar to
w1 times a0 is really maybe the output

00:03:21.610 --> 00:03:21.620
w1 times a0 is really maybe the output
 

00:03:21.620 --> 00:03:24.400
w1 times a0 is really maybe the output
of this 4 by 4 as well as that 4 by 4

00:03:24.400 --> 00:03:24.410
of this 4 by 4 as well as that 4 by 4
 

00:03:24.410 --> 00:03:27.430
of this 4 by 4 as well as that 4 by 4
and then the other thing you do is add

00:03:27.430 --> 00:03:27.440
and then the other thing you do is add
 

00:03:27.440 --> 00:03:33.310
and then the other thing you do is add
the bias so this thing here before

00:03:33.310 --> 00:03:33.320
the bias so this thing here before
 

00:03:33.320 --> 00:03:36.220
the bias so this thing here before
applying value this plays a role similar

00:03:36.220 --> 00:03:36.230
applying value this plays a role similar
 

00:03:36.230 --> 00:03:40.270
applying value this plays a role similar
to Z and then let's find me by applying

00:03:40.270 --> 00:03:40.280
to Z and then let's find me by applying
 

00:03:40.280 --> 00:03:42.849
to Z and then let's find me by applying
the non-linearity you know it's kind of

00:03:42.849 --> 00:03:42.859
the non-linearity you know it's kind of
 

00:03:42.859 --> 00:03:48.250
the non-linearity you know it's kind of
this I guess so this output right plays

00:03:48.250 --> 00:03:48.260
this I guess so this output right plays
 

00:03:48.260 --> 00:03:50.800
this I guess so this output right plays
a row this really becomes your

00:03:50.800 --> 00:03:50.810
a row this really becomes your
 

00:03:50.810 --> 00:03:53.949
a row this really becomes your
activation at the next layer so this is

00:03:53.949 --> 00:03:53.959
activation at the next layer so this is
 

00:03:53.959 --> 00:03:56.620
activation at the next layer so this is
how you go from a zero to a one

00:03:56.620 --> 00:03:56.630
how you go from a zero to a one
 

00:03:56.630 --> 00:04:00.069
how you go from a zero to a one
disperse the linear operation and then

00:04:00.069 --> 00:04:00.079
disperse the linear operation and then
 

00:04:00.079 --> 00:04:01.240
disperse the linear operation and then
the convolution has all these

00:04:01.240 --> 00:04:01.250
the convolution has all these
 

00:04:01.250 --> 00:04:03.069
the convolution has all these
multiplying so the convolution is really

00:04:03.069 --> 00:04:03.079
multiplying so the convolution is really
 

00:04:03.079 --> 00:04:05.319
multiplying so the convolution is really
applying the linear operation and you

00:04:05.319 --> 00:04:05.329
applying the linear operation and you
 

00:04:05.329 --> 00:04:07.120
applying the linear operation and you
had the biases and the apply Rayleigh

00:04:07.120 --> 00:04:07.130
had the biases and the apply Rayleigh
 

00:04:07.130 --> 00:04:10.599
had the biases and the apply Rayleigh
operation and you've gone from a six by

00:04:10.599 --> 00:04:10.609
operation and you've gone from a six by
 

00:04:10.609 --> 00:04:14.949
operation and you've gone from a six by
six by three dimensional a zero through

00:04:14.949 --> 00:04:14.959
six by three dimensional a zero through
 

00:04:14.959 --> 00:04:18.190
six by three dimensional a zero through
one layer of a neural network to I guess

00:04:18.190 --> 00:04:18.200
one layer of a neural network to I guess
 

00:04:18.200 --> 00:04:21.250
one layer of a neural network to I guess
a four by four by two dimensional eight

00:04:21.250 --> 00:04:21.260
a four by four by two dimensional eight
 

00:04:21.260 --> 00:04:23.360
a four by four by two dimensional eight
one six plus

00:04:23.360 --> 00:04:23.370
one six plus
 

00:04:23.370 --> 00:04:27.590
one six plus
three has gone to four by four by two

00:04:27.590 --> 00:04:27.600
three has gone to four by four by two
 

00:04:27.600 --> 00:04:29.900
three has gone to four by four by two
and so that's one layer of a

00:04:29.900 --> 00:04:29.910
and so that's one layer of a
 

00:04:29.910 --> 00:04:35.060
and so that's one layer of a
convolutional net now in this example we

00:04:35.060 --> 00:04:35.070
convolutional net now in this example we
 

00:04:35.070 --> 00:04:39.020
convolutional net now in this example we
had two filters so we had you know two

00:04:39.020 --> 00:04:39.030
had two filters so we had you know two
 

00:04:39.030 --> 00:04:42.469
had two filters so we had you know two
features of you all which is why we

00:04:42.469 --> 00:04:42.479
features of you all which is why we
 

00:04:42.479 --> 00:04:44.270
features of you all which is why we
wound up with an output four by four by

00:04:44.270 --> 00:04:44.280
wound up with an output four by four by
 

00:04:44.280 --> 00:04:47.090
wound up with an output four by four by
two but here for example we instead had

00:04:47.090 --> 00:04:47.100
two but here for example we instead had
 

00:04:47.100 --> 00:04:49.610
two but here for example we instead had
ten filters instead of two then we had

00:04:49.610 --> 00:04:49.620
ten filters instead of two then we had
 

00:04:49.620 --> 00:04:52.400
ten filters instead of two then we had
wound up with a four by four by 10

00:04:52.400 --> 00:04:52.410
wound up with a four by four by 10
 

00:04:52.410 --> 00:04:54.860
wound up with a four by four by 10
dimensional output volume because we'd

00:04:54.860 --> 00:04:54.870
dimensional output volume because we'd
 

00:04:54.870 --> 00:04:57.439
dimensional output volume because we'd
be taking ten of these maps not just two

00:04:57.439 --> 00:04:57.449
be taking ten of these maps not just two
 

00:04:57.449 --> 00:05:00.050
be taking ten of these maps not just two
of them and stacking them up to form a

00:05:00.050 --> 00:05:00.060
of them and stacking them up to form a
 

00:05:00.060 --> 00:05:03.020
of them and stacking them up to form a
four by four by ten output volume and

00:05:03.020 --> 00:05:03.030
four by four by ten output volume and
 

00:05:03.030 --> 00:05:06.140
four by four by ten output volume and
that's what a one would be so to make

00:05:06.140 --> 00:05:06.150
that's what a one would be so to make
 

00:05:06.150 --> 00:05:07.430
that's what a one would be so to make
sure you understand this let's go

00:05:07.430 --> 00:05:07.440
sure you understand this let's go
 

00:05:07.440 --> 00:05:10.400
sure you understand this let's go
through and exercise let's suppose you

00:05:10.400 --> 00:05:10.410
through and exercise let's suppose you
 

00:05:10.410 --> 00:05:12.800
through and exercise let's suppose you
have ten filters not just two filters

00:05:12.800 --> 00:05:12.810
have ten filters not just two filters
 

00:05:12.810 --> 00:05:15.320
have ten filters not just two filters
that are three by three by three and one

00:05:15.320 --> 00:05:15.330
that are three by three by three and one
 

00:05:15.330 --> 00:05:17.270
that are three by three by three and one
layer of a new network how many

00:05:17.270 --> 00:05:17.280
layer of a new network how many
 

00:05:17.280 --> 00:05:21.110
layer of a new network how many
parameters does this layer have well

00:05:21.110 --> 00:05:21.120
parameters does this layer have well
 

00:05:21.120 --> 00:05:26.120
parameters does this layer have well
let's figure this out each filter is a

00:05:26.120 --> 00:05:26.130
let's figure this out each filter is a
 

00:05:26.130 --> 00:05:29.029
let's figure this out each filter is a
three by three by three volume so V by

00:05:29.029 --> 00:05:29.039
three by three by three volume so V by
 

00:05:29.039 --> 00:05:33.610
three by three by three volume so V by
three by three so each filter has 27

00:05:33.610 --> 00:05:33.620
three by three so each filter has 27
 

00:05:33.620 --> 00:05:36.500
three by three so each filter has 27
parameters right since 27 numbers to be

00:05:36.500 --> 00:05:36.510
parameters right since 27 numbers to be
 

00:05:36.510 --> 00:05:42.290
parameters right since 27 numbers to be
learned over and then plus the bias so

00:05:42.290 --> 00:05:42.300
learned over and then plus the bias so
 

00:05:42.300 --> 00:05:44.900
learned over and then plus the bias so
that was the B parameter so this gives

00:05:44.900 --> 00:05:44.910
that was the B parameter so this gives
 

00:05:44.910 --> 00:05:50.600
that was the B parameter so this gives
you 28 parameters and then if you

00:05:50.600 --> 00:05:50.610
you 28 parameters and then if you
 

00:05:50.610 --> 00:05:52.520
you 28 parameters and then if you
imagine that on the previous slide you

00:05:52.520 --> 00:05:52.530
imagine that on the previous slide you
 

00:05:52.530 --> 00:05:54.830
imagine that on the previous slide you
know we had drawn two filters but now if

00:05:54.830 --> 00:05:54.840
know we had drawn two filters but now if
 

00:05:54.840 --> 00:05:56.360
know we had drawn two filters but now if
you imagine that you actually have ten

00:05:56.360 --> 00:05:56.370
you imagine that you actually have ten
 

00:05:56.370 --> 00:06:00.980
you imagine that you actually have ten
of these right one to ten of these then

00:06:00.980 --> 00:06:00.990
of these right one to ten of these then
 

00:06:00.990 --> 00:06:04.010
of these right one to ten of these then
altogether you would have 28 times 10 so

00:06:04.010 --> 00:06:04.020
altogether you would have 28 times 10 so
 

00:06:04.020 --> 00:06:11.390
altogether you would have 28 times 10 so
that would be 280 parameters notice one

00:06:11.390 --> 00:06:11.400
that would be 280 parameters notice one
 

00:06:11.400 --> 00:06:14.300
that would be 280 parameters notice one
nice thing about this is that no matter

00:06:14.300 --> 00:06:14.310
nice thing about this is that no matter
 

00:06:14.310 --> 00:06:16.909
nice thing about this is that no matter
how big the input images the input image

00:06:16.909 --> 00:06:16.919
how big the input images the input image
 

00:06:16.919 --> 00:06:21.170
how big the input images the input image
could be 1000 by 1000 or 5000 by 5,000

00:06:21.170 --> 00:06:21.180
could be 1000 by 1000 or 5000 by 5,000
 

00:06:21.180 --> 00:06:22.730
could be 1000 by 1000 or 5000 by 5,000
but the number of parameters you have

00:06:22.730 --> 00:06:22.740
but the number of parameters you have
 

00:06:22.740 --> 00:06:27.200
but the number of parameters you have
still remains fixed as 280 and you can

00:06:27.200 --> 00:06:27.210
still remains fixed as 280 and you can
 

00:06:27.210 --> 00:06:29.570
still remains fixed as 280 and you can
use these ten filters to detect features

00:06:29.570 --> 00:06:29.580
use these ten filters to detect features
 

00:06:29.580 --> 00:06:31.820
use these ten filters to detect features
you know vertical edges horizontal edges

00:06:31.820 --> 00:06:31.830
you know vertical edges horizontal edges
 

00:06:31.830 --> 00:06:35.540
you know vertical edges horizontal edges
maybe other features anywhere even in a

00:06:35.540 --> 00:06:35.550
maybe other features anywhere even in a
 

00:06:35.550 --> 00:06:37.010
maybe other features anywhere even in a
very very large image we're

00:06:37.010 --> 00:06:37.020
very very large image we're
 

00:06:37.020 --> 00:06:40.029
very very large image we're
just a very small number of parameters

00:06:40.029 --> 00:06:40.039
just a very small number of parameters
 

00:06:40.039 --> 00:06:42.439
just a very small number of parameters
so this is really one property of

00:06:42.439 --> 00:06:42.449
so this is really one property of
 

00:06:42.449 --> 00:06:44.540
so this is really one property of
convolutional neural nets that makes

00:06:44.540 --> 00:06:44.550
convolutional neural nets that makes
 

00:06:44.550 --> 00:06:46.999
convolutional neural nets that makes
them less prone to overfitting that you

00:06:46.999 --> 00:06:47.009
them less prone to overfitting that you
 

00:06:47.009 --> 00:06:49.580
them less prone to overfitting that you
could so once you learn ten feature

00:06:49.580 --> 00:06:49.590
could so once you learn ten feature
 

00:06:49.590 --> 00:06:52.219
could so once you learn ten feature
detectors that work you could apply this

00:06:52.219 --> 00:06:52.229
detectors that work you could apply this
 

00:06:52.229 --> 00:06:55.189
detectors that work you could apply this
even to very large images and the number

00:06:55.189 --> 00:06:55.199
even to very large images and the number
 

00:06:55.199 --> 00:06:57.350
even to very large images and the number
of parameters also remains fixed and

00:06:57.350 --> 00:06:57.360
of parameters also remains fixed and
 

00:06:57.360 --> 00:07:02.020
of parameters also remains fixed and
relatively small as 280 in this example

00:07:02.020 --> 00:07:02.030
relatively small as 280 in this example
 

00:07:02.030 --> 00:07:04.460
relatively small as 280 in this example
so to wrap up this video let's just

00:07:04.460 --> 00:07:04.470
so to wrap up this video let's just
 

00:07:04.470 --> 00:07:06.140
so to wrap up this video let's just
summarize the notation we're going to

00:07:06.140 --> 00:07:06.150
summarize the notation we're going to
 

00:07:06.150 --> 00:07:08.420
summarize the notation we're going to
use to describe one layer to describe a

00:07:08.420 --> 00:07:08.430
use to describe one layer to describe a
 

00:07:08.430 --> 00:07:10.790
use to describe one layer to describe a
convolutional layer in convolutional

00:07:10.790 --> 00:07:10.800
convolutional layer in convolutional
 

00:07:10.800 --> 00:07:13.040
convolutional layer in convolutional
neural network so layer L is a

00:07:13.040 --> 00:07:13.050
neural network so layer L is a
 

00:07:13.050 --> 00:07:15.110
neural network so layer L is a
convolutional layer I'm going to use F

00:07:15.110 --> 00:07:15.120
convolutional layer I'm going to use F
 

00:07:15.120 --> 00:07:17.450
convolutional layer I'm going to use F
superscript square bracket L to denote

00:07:17.450 --> 00:07:17.460
superscript square bracket L to denote
 

00:07:17.460 --> 00:07:19.550
superscript square bracket L to denote
the filter size so previously we've been

00:07:19.550 --> 00:07:19.560
the filter size so previously we've been
 

00:07:19.560 --> 00:07:23.270
the filter size so previously we've been
saying the filters are F by F and now

00:07:23.270 --> 00:07:23.280
saying the filters are F by F and now
 

00:07:23.280 --> 00:07:25.610
saying the filters are F by F and now
this superscript square bracket L just

00:07:25.610 --> 00:07:25.620
this superscript square bracket L just
 

00:07:25.620 --> 00:07:27.589
this superscript square bracket L just
to knows that this is a filter size is a

00:07:27.589 --> 00:07:27.599
to knows that this is a filter size is a
 

00:07:27.599 --> 00:07:31.700
to knows that this is a filter size is a
F by F filter in layer L and as usual

00:07:31.700 --> 00:07:31.710
F by F filter in layer L and as usual
 

00:07:31.710 --> 00:07:33.890
F by F filter in layer L and as usual
the super-sick square bracket L is the

00:07:33.890 --> 00:07:33.900
the super-sick square bracket L is the
 

00:07:33.900 --> 00:07:35.570
the super-sick square bracket L is the
notation we're using to refer to a

00:07:35.570 --> 00:07:35.580
notation we're using to refer to a
 

00:07:35.580 --> 00:07:40.999
notation we're using to refer to a
particular layer L going to use PL to

00:07:40.999 --> 00:07:41.009
particular layer L going to use PL to
 

00:07:41.009 --> 00:07:43.309
particular layer L going to use PL to
denote the amount of having and again

00:07:43.309 --> 00:07:43.319
denote the amount of having and again
 

00:07:43.319 --> 00:07:44.870
denote the amount of having and again
the amount of padding can also be

00:07:44.870 --> 00:07:44.880
the amount of padding can also be
 

00:07:44.880 --> 00:07:47.240
the amount of padding can also be
specified just by saying that you want a

00:07:47.240 --> 00:07:47.250
specified just by saying that you want a
 

00:07:47.250 --> 00:07:49.399
specified just by saying that you want a
valid convolution which means no padding

00:07:49.399 --> 00:07:49.409
valid convolution which means no padding
 

00:07:49.409 --> 00:07:52.339
valid convolution which means no padding
or a same convolution which means the

00:07:52.339 --> 00:07:52.349
or a same convolution which means the
 

00:07:52.349 --> 00:07:53.959
or a same convolution which means the
accused of having so that the output

00:07:53.959 --> 00:07:53.969
accused of having so that the output
 

00:07:53.969 --> 00:07:56.779
accused of having so that the output
size has the same height and width as

00:07:56.779 --> 00:07:56.789
size has the same height and width as
 

00:07:56.789 --> 00:07:59.510
size has the same height and width as
the input size and then we're going to

00:07:59.510 --> 00:07:59.520
the input size and then we're going to
 

00:07:59.520 --> 00:08:04.899
the input size and then we're going to
use SL to denote destryed now the input

00:08:04.899 --> 00:08:04.909
use SL to denote destryed now the input
 

00:08:04.909 --> 00:08:08.510
use SL to denote destryed now the input
to this layer is going to be some

00:08:08.510 --> 00:08:08.520
to this layer is going to be some
 

00:08:08.520 --> 00:08:13.120
to this layer is going to be some
dimension it's going to be some n by n

00:08:13.120 --> 00:08:13.130
dimension it's going to be some n by n
 

00:08:13.130 --> 00:08:17.629
dimension it's going to be some n by n
by number of channels in the previous

00:08:17.629 --> 00:08:17.639
by number of channels in the previous
 

00:08:17.639 --> 00:08:20.120
by number of channels in the previous
layer now I'm going to modify this

00:08:20.120 --> 00:08:20.130
layer now I'm going to modify this
 

00:08:20.130 --> 00:08:22.189
layer now I'm going to modify this
notational bit I really use superscript

00:08:22.189 --> 00:08:22.199
notational bit I really use superscript
 

00:08:22.199 --> 00:08:24.860
notational bit I really use superscript
L minus 1 is because that's the

00:08:24.860 --> 00:08:24.870
L minus 1 is because that's the
 

00:08:24.870 --> 00:08:30.019
L minus 1 is because that's the
activation from the previous layer L

00:08:30.019 --> 00:08:30.029
activation from the previous layer L
 

00:08:30.029 --> 00:08:36.440
activation from the previous layer L
minus 1 times and C of L minus 1 and in

00:08:36.440 --> 00:08:36.450
minus 1 times and C of L minus 1 and in
 

00:08:36.450 --> 00:08:38.750
minus 1 times and C of L minus 1 and in
case Apple so far we've been just using

00:08:38.750 --> 00:08:38.760
case Apple so far we've been just using
 

00:08:38.760 --> 00:08:40.459
case Apple so far we've been just using
images with the same height and width

00:08:40.459 --> 00:08:40.469
images with the same height and width
 

00:08:40.469 --> 00:08:42.260
images with the same height and width
but in case the height and width might

00:08:42.260 --> 00:08:42.270
but in case the height and width might
 

00:08:42.270 --> 00:08:44.029
but in case the height and width might
differ I'm going to use

00:08:44.029 --> 00:08:44.039
differ I'm going to use
 

00:08:44.039 --> 00:08:46.910
differ I'm going to use
superscript H and superscript W to

00:08:46.910 --> 00:08:46.920
superscript H and superscript W to
 

00:08:46.920 --> 00:08:49.130
superscript H and superscript W to
denote the height and width of the

00:08:49.130 --> 00:08:49.140
denote the height and width of the
 

00:08:49.140 --> 00:08:52.220
denote the height and width of the
from the previous layer alright so in

00:08:52.220 --> 00:08:52.230
from the previous layer alright so in
 

00:08:52.230 --> 00:08:55.940
from the previous layer alright so in
layer L the size of the volume will be

00:08:55.940 --> 00:08:55.950
layer L the size of the volume will be
 

00:08:55.950 --> 00:09:00.290
layer L the size of the volume will be
NH by NW by NC with superscript 0 square

00:09:00.290 --> 00:09:00.300
NH by NW by NC with superscript 0 square
 

00:09:00.300 --> 00:09:02.750
NH by NW by NC with superscript 0 square
bracket no it's just that in layer L the

00:09:02.750 --> 00:09:02.760
bracket no it's just that in layer L the
 

00:09:02.760 --> 00:09:05.000
bracket no it's just that in layer L the
input to this layer is what have you had

00:09:05.000 --> 00:09:05.010
input to this layer is what have you had
 

00:09:05.010 --> 00:09:06.770
input to this layer is what have you had
from the previous layer so that's what

00:09:06.770 --> 00:09:06.780
from the previous layer so that's what
 

00:09:06.780 --> 00:09:09.920
from the previous layer so that's what
you have L minus 1 there and then the

00:09:09.920 --> 00:09:09.930
you have L minus 1 there and then the
 

00:09:09.930 --> 00:09:11.990
you have L minus 1 there and then the
new network excuse me this layer and

00:09:11.990 --> 00:09:12.000
new network excuse me this layer and
 

00:09:12.000 --> 00:09:14.030
new network excuse me this layer and
then just layer the new network will

00:09:14.030 --> 00:09:14.040
then just layer the new network will
 

00:09:14.040 --> 00:09:16.880
then just layer the new network will
output will itself output the volume so

00:09:16.880 --> 00:09:16.890
output will itself output the volume so
 

00:09:16.890 --> 00:09:23.750
output will itself output the volume so
that will be an H of L by n WL I and C

00:09:23.750 --> 00:09:23.760
that will be an H of L by n WL I and C
 

00:09:23.760 --> 00:09:27.350
that will be an H of L by n WL I and C
of L that will be the size in the output

00:09:27.350 --> 00:09:27.360
of L that will be the size in the output
 

00:09:27.360 --> 00:09:29.900
of L that will be the size in the output
evening and so whereas where previously

00:09:29.900 --> 00:09:29.910
evening and so whereas where previously
 

00:09:29.910 --> 00:09:34.550
evening and so whereas where previously
said that the output volume size or at

00:09:34.550 --> 00:09:34.560
said that the output volume size or at
 

00:09:34.560 --> 00:09:36.230
said that the output volume size or at
least the height and width is given by

00:09:36.230 --> 00:09:36.240
least the height and width is given by
 

00:09:36.240 --> 00:09:37.040
least the height and width is given by
this formula

00:09:37.040 --> 00:09:37.050
this formula
 

00:09:37.050 --> 00:09:44.690
this formula
you know n plus 2p minus F over s plus 1

00:09:44.690 --> 00:09:44.700
you know n plus 2p minus F over s plus 1
 

00:09:44.700 --> 00:09:46.820
you know n plus 2p minus F over s plus 1
and then take the floor of that or round

00:09:46.820 --> 00:09:46.830
and then take the floor of that or round
 

00:09:46.830 --> 00:09:50.570
and then take the floor of that or round
it down and in this new notation what we

00:09:50.570 --> 00:09:50.580
it down and in this new notation what we
 

00:09:50.580 --> 00:09:56.210
it down and in this new notation what we
have is that the output volume delvia in

00:09:56.210 --> 00:09:56.220
have is that the output volume delvia in
 

00:09:56.220 --> 00:09:59.930
have is that the output volume delvia in
layer L is going to be the dimension

00:09:59.930 --> 00:09:59.940
layer L is going to be the dimension
 

00:09:59.940 --> 00:10:03.620
layer L is going to be the dimension
from the previous layer plus the padding

00:10:03.620 --> 00:10:03.630
from the previous layer plus the padding
 

00:10:03.630 --> 00:10:07.070
from the previous layer plus the padding
we're using in this layer L minus the

00:10:07.070 --> 00:10:07.080
we're using in this layer L minus the
 

00:10:07.080 --> 00:10:09.730
we're using in this layer L minus the
filter size we're using this layer L and

00:10:09.730 --> 00:10:09.740
filter size we're using this layer L and
 

00:10:09.740 --> 00:10:14.690
filter size we're using this layer L and
so on and technically this is true for

00:10:14.690 --> 00:10:14.700
so on and technically this is true for
 

00:10:14.700 --> 00:10:17.750
so on and technically this is true for
the height right so the heights of the

00:10:17.750 --> 00:10:17.760
the height right so the heights of the
 

00:10:17.760 --> 00:10:20.810
the height right so the heights of the
output volume is given by this and you

00:10:20.810 --> 00:10:20.820
output volume is given by this and you
 

00:10:20.820 --> 00:10:22.400
output volume is given by this and you
can compute it with this formula on the

00:10:22.400 --> 00:10:22.410
can compute it with this formula on the
 

00:10:22.410 --> 00:10:24.200
can compute it with this formula on the
right and the same is true for the width

00:10:24.200 --> 00:10:24.210
right and the same is true for the width
 

00:10:24.210 --> 00:10:27.170
right and the same is true for the width
as well so we cross out 8 and 4 and W as

00:10:27.170 --> 00:10:27.180
as well so we cross out 8 and 4 and W as
 

00:10:27.180 --> 00:10:29.960
as well so we cross out 8 and 4 and W as
well then you know the same formula with

00:10:29.960 --> 00:10:29.970
well then you know the same formula with
 

00:10:29.970 --> 00:10:31.280
well then you know the same formula with
either the height or the width plugged

00:10:31.280 --> 00:10:31.290
either the height or the width plugged
 

00:10:31.290 --> 00:10:33.470
either the height or the width plugged
in or up for computing the height or

00:10:33.470 --> 00:10:33.480
in or up for computing the height or
 

00:10:33.480 --> 00:10:37.190
in or up for computing the height or
width of the output volume so that's how

00:10:37.190 --> 00:10:37.200
width of the output volume so that's how
 

00:10:37.200 --> 00:10:40.340
width of the output volume so that's how
an HL minus 1 relates the image Ellen

00:10:40.340 --> 00:10:40.350
an HL minus 1 relates the image Ellen
 

00:10:40.350 --> 00:10:44.570
an HL minus 1 relates the image Ellen
and WL minds one relates to n WL now how

00:10:44.570 --> 00:10:44.580
and WL minds one relates to n WL now how
 

00:10:44.580 --> 00:10:46.190
and WL minds one relates to n WL now how
about the number of channels where the

00:10:46.190 --> 00:10:46.200
about the number of channels where the
 

00:10:46.200 --> 00:10:48.080
about the number of channels where the
dose that was come from let's take a

00:10:48.080 --> 00:10:48.090
dose that was come from let's take a
 

00:10:48.090 --> 00:10:49.210
dose that was come from let's take a
look

00:10:49.210 --> 00:10:49.220
look
 

00:10:49.220 --> 00:10:54.220
look
if the output volume has this death well

00:10:54.220 --> 00:10:54.230
if the output volume has this death well
 

00:10:54.230 --> 00:10:57.010
if the output volume has this death well
we know from the previous examples that

00:10:57.010 --> 00:10:57.020
we know from the previous examples that
 

00:10:57.020 --> 00:10:59.980
we know from the previous examples that
that's equal to the number of filters we

00:10:59.980 --> 00:10:59.990
that's equal to the number of filters we
 

00:10:59.990 --> 00:11:02.560
that's equal to the number of filters we
have in that layer right so we had two

00:11:02.560 --> 00:11:02.570
have in that layer right so we had two
 

00:11:02.570 --> 00:11:05.140
have in that layer right so we had two
filters the output volume was four by

00:11:05.140 --> 00:11:05.150
filters the output volume was four by
 

00:11:05.150 --> 00:11:07.090
filters the output volume was four by
four by two was two-dimensional and if

00:11:07.090 --> 00:11:07.100
four by two was two-dimensional and if
 

00:11:07.100 --> 00:11:08.980
four by two was two-dimensional and if
you had ten filters then the output

00:11:08.980 --> 00:11:08.990
you had ten filters then the output
 

00:11:08.990 --> 00:11:12.390
you had ten filters then the output
volume was four by four by 10 so this

00:11:12.390 --> 00:11:12.400
volume was four by four by 10 so this
 

00:11:12.400 --> 00:11:16.930
volume was four by four by 10 so this
the number of channels in the output

00:11:16.930 --> 00:11:16.940
the number of channels in the output
 

00:11:16.940 --> 00:11:19.240
the number of channels in the output
volume that's just the number of filters

00:11:19.240 --> 00:11:19.250
volume that's just the number of filters
 

00:11:19.250 --> 00:11:21.190
volume that's just the number of filters
were using in this layer of the new

00:11:21.190 --> 00:11:21.200
were using in this layer of the new
 

00:11:21.200 --> 00:11:25.660
were using in this layer of the new
network mix how about the size of each

00:11:25.660 --> 00:11:25.670
network mix how about the size of each
 

00:11:25.670 --> 00:11:28.570
network mix how about the size of each
filter well each filter is going to be

00:11:28.570 --> 00:11:28.580
filter well each filter is going to be
 

00:11:28.580 --> 00:11:33.160
filter well each filter is going to be
FL by FL by one of the number right so

00:11:33.160 --> 00:11:33.170
FL by FL by one of the number right so
 

00:11:33.170 --> 00:11:35.290
FL by FL by one of the number right so
what is this last number well we saw

00:11:35.290 --> 00:11:35.300
what is this last number well we saw
 

00:11:35.300 --> 00:11:38.650
what is this last number well we saw
that you need to convey six by six by

00:11:38.650 --> 00:11:38.660
that you need to convey six by six by
 

00:11:38.660 --> 00:11:40.360
that you need to convey six by six by
three image with a three by three by

00:11:40.360 --> 00:11:40.370
three image with a three by three by
 

00:11:40.370 --> 00:11:44.230
three image with a three by three by
three filter and so the number of

00:11:44.230 --> 00:11:44.240
three filter and so the number of
 

00:11:44.240 --> 00:11:46.600
three filter and so the number of
channels in your filter must match the

00:11:46.600 --> 00:11:46.610
channels in your filter must match the
 

00:11:46.610 --> 00:11:49.750
channels in your filter must match the
number of channels in your input so this

00:11:49.750 --> 00:11:49.760
number of channels in your input so this
 

00:11:49.760 --> 00:11:54.280
number of channels in your input so this
number should match that number right

00:11:54.280 --> 00:11:54.290
number should match that number right
 

00:11:54.290 --> 00:11:56.080
number should match that number right
which is why each filter is going to be

00:11:56.080 --> 00:11:56.090
which is why each filter is going to be
 

00:11:56.090 --> 00:12:03.460
which is why each filter is going to be
FL by FL by n see L minus 1 and the

00:12:03.460 --> 00:12:03.470
FL by FL by n see L minus 1 and the
 

00:12:03.470 --> 00:12:05.740
FL by FL by n see L minus 1 and the
output of this layer after applying the

00:12:05.740 --> 00:12:05.750
output of this layer after applying the
 

00:12:05.750 --> 00:12:08.320
output of this layer after applying the
biases and the non-linearity is going to

00:12:08.320 --> 00:12:08.330
biases and the non-linearity is going to
 

00:12:08.330 --> 00:12:11.230
biases and the non-linearity is going to
be the activations of this layer al and

00:12:11.230 --> 00:12:11.240
be the activations of this layer al and
 

00:12:11.240 --> 00:12:13.900
be the activations of this layer al and
that we've already seen will be this

00:12:13.900 --> 00:12:13.910
that we've already seen will be this
 

00:12:13.910 --> 00:12:17.080
that we've already seen will be this
dimension right the al will be a 3d

00:12:17.080 --> 00:12:17.090
dimension right the al will be a 3d
 

00:12:17.090 --> 00:12:25.290
dimension right the al will be a 3d
volume as NH L by MW L by M C help and

00:12:25.290 --> 00:12:25.300
volume as NH L by MW L by M C help and
 

00:12:25.300 --> 00:12:27.970
volume as NH L by MW L by M C help and
when you are using a vectorized

00:12:27.970 --> 00:12:27.980
when you are using a vectorized
 

00:12:27.980 --> 00:12:29.920
when you are using a vectorized
implementation or your battery and

00:12:29.920 --> 00:12:29.930
implementation or your battery and
 

00:12:29.930 --> 00:12:32.590
implementation or your battery and
ascend or mini battery in descent then

00:12:32.590 --> 00:12:32.600
ascend or mini battery in descent then
 

00:12:32.600 --> 00:12:38.130
ascend or mini battery in descent then
you actually output AO which is set of M

00:12:38.130 --> 00:12:38.140
you actually output AO which is set of M
 

00:12:38.140 --> 00:12:40.720
you actually output AO which is set of M
activations if you have M examples so

00:12:40.720 --> 00:12:40.730
activations if you have M examples so
 

00:12:40.730 --> 00:12:47.590
activations if you have M examples so
that will be M by n HL by n WL by n CL

00:12:47.590 --> 00:12:47.600
that will be M by n HL by n WL by n CL
 

00:12:47.600 --> 00:12:49.390
that will be M by n HL by n WL by n CL
right if say using batch gradient

00:12:49.390 --> 00:12:49.400
right if say using batch gradient
 

00:12:49.400 --> 00:12:51.520
right if say using batch gradient
descent and in the program emphasizes

00:12:51.520 --> 00:12:51.530
descent and in the program emphasizes
 

00:12:51.530 --> 00:12:54.490
descent and in the program emphasizes
this would be the dimension this will be

00:12:54.490 --> 00:12:54.500
this would be the dimension this will be
 

00:12:54.500 --> 00:12:56.290
this would be the dimension this will be
ordering of the variables and we have

00:12:56.290 --> 00:12:56.300
ordering of the variables and we have
 

00:12:56.300 --> 00:12:58.240
ordering of the variables and we have
the index and the training examples

00:12:58.240 --> 00:12:58.250
the index and the training examples
 

00:12:58.250 --> 00:13:00.730
the index and the training examples
first and then you know these three

00:13:00.730 --> 00:13:00.740
first and then you know these three
 

00:13:00.740 --> 00:13:02.110
first and then you know these three
variables

00:13:02.110 --> 00:13:02.120
variables
 

00:13:02.120 --> 00:13:03.999
variables
NIC's how about the weights or the

00:13:03.999 --> 00:13:04.009
NIC's how about the weights or the
 

00:13:04.009 --> 00:13:06.850
NIC's how about the weights or the
parameters or kind of the W parameter

00:13:06.850 --> 00:13:06.860
parameters or kind of the W parameter
 

00:13:06.860 --> 00:13:09.189
parameters or kind of the W parameter
well we've already what the filter

00:13:09.189 --> 00:13:09.199
well we've already what the filter
 

00:13:09.199 --> 00:13:11.799
well we've already what the filter
dimension is so the filters are going to

00:13:11.799 --> 00:13:11.809
dimension is so the filters are going to
 

00:13:11.809 --> 00:13:17.769
dimension is so the filters are going to
be FL by FL by NC or minus 1 but that's

00:13:17.769 --> 00:13:17.779
be FL by FL by NC or minus 1 but that's
 

00:13:17.779 --> 00:13:19.920
be FL by FL by NC or minus 1 but that's
the dimension of one filter

00:13:19.920 --> 00:13:19.930
the dimension of one filter
 

00:13:19.930 --> 00:13:22.780
the dimension of one filter
how many filters we have well this is a

00:13:22.780 --> 00:13:22.790
how many filters we have well this is a
 

00:13:22.790 --> 00:13:25.629
how many filters we have well this is a
toner on filters so the weights really

00:13:25.629 --> 00:13:25.639
toner on filters so the weights really
 

00:13:25.639 --> 00:13:27.910
toner on filters so the weights really
all of the filters put together we'll

00:13:27.910 --> 00:13:27.920
all of the filters put together we'll
 

00:13:27.920 --> 00:13:31.360
all of the filters put together we'll
have to mention given by this a times

00:13:31.360 --> 00:13:31.370
have to mention given by this a times
 

00:13:31.370 --> 00:13:36.210
have to mention given by this a times
the total number of filters because this

00:13:36.210 --> 00:13:36.220
 

00:13:36.220 --> 00:13:41.999
last quantity is the number of filters

00:13:41.999 --> 00:13:42.009
 

00:13:42.009 --> 00:13:46.960
in there l and then finally you have the

00:13:46.960 --> 00:13:46.970
in there l and then finally you have the
 

00:13:46.970 --> 00:13:49.949
in there l and then finally you have the
bias parameters and you have one bias

00:13:49.949 --> 00:13:49.959
bias parameters and you have one bias
 

00:13:49.959 --> 00:13:52.869
bias parameters and you have one bias
parameter one real number for each

00:13:52.869 --> 00:13:52.879
parameter one real number for each
 

00:13:52.879 --> 00:13:55.749
parameter one real number for each
filter so you're going to have you know

00:13:55.749 --> 00:13:55.759
filter so you're going to have you know
 

00:13:55.759 --> 00:13:57.790
filter so you're going to have you know
the bias will have this many variables

00:13:57.790 --> 00:13:57.800
the bias will have this many variables
 

00:13:57.800 --> 00:14:00.249
the bias will have this many variables
it's just a vector of this dimension

00:14:00.249 --> 00:14:00.259
it's just a vector of this dimension
 

00:14:00.259 --> 00:14:02.470
it's just a vector of this dimension
although later on we'll see that in the

00:14:02.470 --> 00:14:02.480
although later on we'll see that in the
 

00:14:02.480 --> 00:14:05.319
although later on we'll see that in the
code will be more convenient represented

00:14:05.319 --> 00:14:05.329
code will be more convenient represented
 

00:14:05.329 --> 00:14:11.369
code will be more convenient represented
as a 1 by 1 by 1 by NC o-- dimensional

00:14:11.369 --> 00:14:11.379
as a 1 by 1 by 1 by NC o-- dimensional
 

00:14:11.379 --> 00:14:13.929
as a 1 by 1 by 1 by NC o-- dimensional
your four dimensional matrix were four

00:14:13.929 --> 00:14:13.939
your four dimensional matrix were four
 

00:14:13.939 --> 00:14:16.989
your four dimensional matrix were four
dimensional tensor so I know there was a

00:14:16.989 --> 00:14:16.999
dimensional tensor so I know there was a
 

00:14:16.999 --> 00:14:21.249
dimensional tensor so I know there was a
lot of notation and this is the

00:14:21.249 --> 00:14:21.259
lot of notation and this is the
 

00:14:21.259 --> 00:14:23.499
lot of notation and this is the
convention are used for the most part as

00:14:23.499 --> 00:14:23.509
convention are used for the most part as
 

00:14:23.509 --> 00:14:25.119
convention are used for the most part as
I mentioned in case you search online

00:14:25.119 --> 00:14:25.129
I mentioned in case you search online
 

00:14:25.129 --> 00:14:28.150
I mentioned in case you search online
and look at open source code there isn't

00:14:28.150 --> 00:14:28.160
and look at open source code there isn't
 

00:14:28.160 --> 00:14:30.429
and look at open source code there isn't
a completely Universal convention

00:14:30.429 --> 00:14:30.439
a completely Universal convention
 

00:14:30.439 --> 00:14:32.319
a completely Universal convention
standard convention about the ordering

00:14:32.319 --> 00:14:32.329
standard convention about the ordering
 

00:14:32.329 --> 00:14:35.410
standard convention about the ordering
of height width and channel so if you

00:14:35.410 --> 00:14:35.420
of height width and channel so if you
 

00:14:35.420 --> 00:14:38.319
of height width and channel so if you
look on source code on github or read

00:14:38.319 --> 00:14:38.329
look on source code on github or read
 

00:14:38.329 --> 00:14:39.879
look on source code on github or read
some of the open source implementations

00:14:39.879 --> 00:14:39.889
some of the open source implementations
 

00:14:39.889 --> 00:14:42.100
some of the open source implementations
you find that some authors use this

00:14:42.100 --> 00:14:42.110
you find that some authors use this
 

00:14:42.110 --> 00:14:43.780
you find that some authors use this
order instead when you first put the

00:14:43.780 --> 00:14:43.790
order instead when you first put the
 

00:14:43.790 --> 00:14:46.900
order instead when you first put the
channel first and you sometimes see that

00:14:46.900 --> 00:14:46.910
channel first and you sometimes see that
 

00:14:46.910 --> 00:14:48.669
channel first and you sometimes see that
ordering other variables and in fact in

00:14:48.669 --> 00:14:48.679
ordering other variables and in fact in
 

00:14:48.679 --> 00:14:50.110
ordering other variables and in fact in
some programming frameworks as in

00:14:50.110 --> 00:14:50.120
some programming frameworks as in
 

00:14:50.120 --> 00:14:52.150
some programming frameworks as in
multiple common frameworks is actually a

00:14:52.150 --> 00:14:52.160
multiple common frameworks is actually a
 

00:14:52.160 --> 00:14:54.730
multiple common frameworks is actually a
variable or a parameter but you want to

00:14:54.730 --> 00:14:54.740
variable or a parameter but you want to
 

00:14:54.740 --> 00:14:56.470
variable or a parameter but you want to
list the number of channels first or

00:14:56.470 --> 00:14:56.480
list the number of channels first or
 

00:14:56.480 --> 00:14:58.389
list the number of channels first or
list a number of channels loss when

00:14:58.389 --> 00:14:58.399
list a number of channels loss when
 

00:14:58.399 --> 00:15:02.710
list a number of channels loss when
indexing into these volumes and I think

00:15:02.710 --> 00:15:02.720
indexing into these volumes and I think
 

00:15:02.720 --> 00:15:06.669
indexing into these volumes and I think
both of these conventions work ok so

00:15:06.669 --> 00:15:06.679
both of these conventions work ok so
 

00:15:06.679 --> 00:15:09.210
both of these conventions work ok so
laws are consistent and then and

00:15:09.210 --> 00:15:09.220
laws are consistent and then and
 

00:15:09.220 --> 00:15:12.519
laws are consistent and then and
unfortunately maybe this isn't and

00:15:12.519 --> 00:15:12.529
unfortunately maybe this isn't and
 

00:15:12.529 --> 00:15:14.180
unfortunately maybe this isn't and
unfortunately maybe this is

00:15:14.180 --> 00:15:14.190
unfortunately maybe this is
 

00:15:14.190 --> 00:15:15.710
unfortunately maybe this is
one piece of notation where there isn't

00:15:15.710 --> 00:15:15.720
one piece of notation where there isn't
 

00:15:15.720 --> 00:15:17.480
one piece of notation where there isn't
consensus in the deep learning

00:15:17.480 --> 00:15:17.490
consensus in the deep learning
 

00:15:17.490 --> 00:15:20.090
consensus in the deep learning
literature but I'm going to use this

00:15:20.090 --> 00:15:20.100
literature but I'm going to use this
 

00:15:20.100 --> 00:15:24.949
literature but I'm going to use this
convention for these videos where we

00:15:24.949 --> 00:15:24.959
convention for these videos where we
 

00:15:24.959 --> 00:15:27.170
convention for these videos where we
list you know height and then width and

00:15:27.170 --> 00:15:27.180
list you know height and then width and
 

00:15:27.180 --> 00:15:31.009
list you know height and then width and
then the number of channels lost so I

00:15:31.009 --> 00:15:31.019
then the number of channels lost so I
 

00:15:31.019 --> 00:15:32.569
then the number of channels lost so I
know there was suddenly a lot of new

00:15:32.569 --> 00:15:32.579
know there was suddenly a lot of new
 

00:15:32.579 --> 00:15:34.429
know there was suddenly a lot of new
notation to introduce but you're

00:15:34.429 --> 00:15:34.439
notation to introduce but you're
 

00:15:34.439 --> 00:15:36.439
notation to introduce but you're
thinking well this long notation how do

00:15:36.439 --> 00:15:36.449
thinking well this long notation how do
 

00:15:36.449 --> 00:15:38.210
thinking well this long notation how do
I need to remember all of these don't

00:15:38.210 --> 00:15:38.220
I need to remember all of these don't
 

00:15:38.220 --> 00:15:39.470
I need to remember all of these don't
worry about it you don't need to

00:15:39.470 --> 00:15:39.480
worry about it you don't need to
 

00:15:39.480 --> 00:15:41.119
worry about it you don't need to
remember all of this notation and

00:15:41.119 --> 00:15:41.129
remember all of this notation and
 

00:15:41.129 --> 00:15:43.670
remember all of this notation and
through this week's exercises you become

00:15:43.670 --> 00:15:43.680
through this week's exercises you become
 

00:15:43.680 --> 00:15:46.639
through this week's exercises you become
more familiar with at that time but the

00:15:46.639 --> 00:15:46.649
more familiar with at that time but the
 

00:15:46.649 --> 00:15:48.410
more familiar with at that time but the
key point I hope you take away from this

00:15:48.410 --> 00:15:48.420
key point I hope you take away from this
 

00:15:48.420 --> 00:15:51.019
key point I hope you take away from this
video is just how one layer of a

00:15:51.019 --> 00:15:51.029
video is just how one layer of a
 

00:15:51.029 --> 00:15:52.670
video is just how one layer of a
convolutional neural network works and

00:15:52.670 --> 00:15:52.680
convolutional neural network works and
 

00:15:52.680 --> 00:15:55.009
convolutional neural network works and
the computations involved in taking the

00:15:55.009 --> 00:15:55.019
the computations involved in taking the
 

00:15:55.019 --> 00:15:57.290
the computations involved in taking the
activations of one layer and mapping

00:15:57.290 --> 00:15:57.300
activations of one layer and mapping
 

00:15:57.300 --> 00:15:58.879
activations of one layer and mapping
that to the activations of the next

00:15:58.879 --> 00:15:58.889
that to the activations of the next
 

00:15:58.889 --> 00:16:01.939
that to the activations of the next
layer and NYX now that you know how one

00:16:01.939 --> 00:16:01.949
layer and NYX now that you know how one
 

00:16:01.949 --> 00:16:02.990
layer and NYX now that you know how one
layer of the convolutional neural

00:16:02.990 --> 00:16:03.000
layer of the convolutional neural
 

00:16:03.000 --> 00:16:05.179
layer of the convolutional neural
network works let's stack a bunch of

00:16:05.179 --> 00:16:05.189
network works let's stack a bunch of
 

00:16:05.189 --> 00:16:07.220
network works let's stack a bunch of
these together to actually form a deeper

00:16:07.220 --> 00:16:07.230
these together to actually form a deeper
 

00:16:07.230 --> 00:16:09.079
these together to actually form a deeper
convolutional neural network that's

00:16:09.079 --> 00:16:09.089
convolutional neural network that's
 

00:16:09.089 --> 00:16:12.050
convolutional neural network that's
going through the next videos

