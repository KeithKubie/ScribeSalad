WEBVTT
Kind: captions
Language: en

00:00:05.700 --> 00:00:06.870
SILVANO LUCIANI: OK.

00:00:06.870 --> 00:00:10.990
And we are on air from London
from our brand new studio in

00:00:10.990 --> 00:00:12.440
Campus London.

00:00:12.440 --> 00:00:15.590
And this is the first edition
of this EMEA version of

00:00:15.590 --> 00:00:18.440
Google+ Platform office hours.

00:00:18.440 --> 00:00:23.580
We will repeat, so stay tuned on
the Google+ Developers page

00:00:23.580 --> 00:00:26.560
to see our upcoming events.

00:00:26.560 --> 00:00:29.010
I have a public service
announcement.

00:00:29.010 --> 00:00:31.930
Unfortunately, we had a
last-minute program, so we are

00:00:31.930 --> 00:00:34.700
not able to have external
guests, because unfortunately,

00:00:34.700 --> 00:00:38.210
we wouldn't be able to
add their audio in.

00:00:38.210 --> 00:00:39.120
We will fix this.

00:00:39.120 --> 00:00:41.470
And next time, we will have
a lot of external

00:00:41.470 --> 00:00:43.760
guests for our session.

00:00:43.760 --> 00:00:45.010
So let's start.

00:00:45.010 --> 00:00:47.950
I will introduce the studio.

00:00:47.950 --> 00:00:49.770
On my left, we have--

00:00:49.770 --> 00:00:52.356
ADE OSHINEYE: Ade Oshineye.

00:00:52.356 --> 00:00:54.216
SILVANO LUCIANI: And
on my right--

00:00:54.216 --> 00:00:55.440
IAN BARBER: Ian Barber.

00:00:55.440 --> 00:00:55.800
Hi.

00:00:55.800 --> 00:00:57.950
SILVANO LUCIANI: And I'm
Silvano Luciani.

00:00:57.950 --> 00:00:59.600
I'm a developer programs
engineer

00:00:59.600 --> 00:01:01.210
on the Google+ platform.

00:01:01.210 --> 00:01:07.355
Ade is a developer advocate,
and so is Ian.

00:01:07.355 --> 00:01:11.740
The topic of our first EMEA
session is the history of API.

00:01:11.740 --> 00:01:15.590
And we will see a very cool app
that Ian developed using

00:01:15.590 --> 00:01:19.220
the history of API
in App Engine.

00:01:19.220 --> 00:01:22.740
But first, an introduction to
the history of API, and who

00:01:22.740 --> 00:01:25.166
better than Ade for this task?

00:01:25.166 --> 00:01:26.000
ADE OSHINEYE: Thank you.

00:01:26.000 --> 00:01:29.000
So I think you've all played a
little with history or taken a

00:01:29.000 --> 00:01:29.785
look at it.

00:01:29.785 --> 00:01:32.463
And it's trying to solve a
number of problems, but we're

00:01:32.463 --> 00:01:34.720
trying to solve it in
a very Google-y way.

00:01:34.720 --> 00:01:37.022
So the first thing
is, how does a

00:01:37.022 --> 00:01:38.880
user sign in to Google+?

00:01:38.880 --> 00:01:40.790
So we give you a sign
-in button.

00:01:40.790 --> 00:01:41.260
You click on it.

00:01:41.260 --> 00:01:45.660
It's sort of a standard OAuth
one, and the user signs in.

00:01:45.660 --> 00:01:49.012
And then once this has happened,
you get an API that

00:01:49.012 --> 00:01:52.910
lets you insert what we call
moments, which are activities,

00:01:52.910 --> 00:01:57.360
into a private place
we call history.

00:01:57.360 --> 00:01:59.515
The thing we're trying to do
here is, we're trying to

00:01:59.515 --> 00:02:01.850
separate saving moments
from sharing moments.

00:02:01.850 --> 00:02:04.840
If you think of it like it's
an upload, when you take a

00:02:04.840 --> 00:02:08.066
photo, it gets instantly
uploaded to a private album.

00:02:08.066 --> 00:02:11.410
And then you choose if
you want to share it.

00:02:11.410 --> 00:02:13.250
And some of them you
may want to share.

00:02:13.250 --> 00:02:14.900
Some of them you may
not want to share.

00:02:14.900 --> 00:02:16.656
So if you're looking at my
stream, you'd have seen I just

00:02:16.656 --> 00:02:20.610
shared a photo I've took of
my shoes and Ian's shoes.

00:02:20.610 --> 00:02:23.210
It was pretty good,
so I shared it.

00:02:23.210 --> 00:02:24.620
There were a couple of other
photos that weren't so good.

00:02:24.620 --> 00:02:26.530
And I didn't share those.

00:02:26.530 --> 00:02:29.240
So that's the insight behind
Instant Upload.

00:02:29.240 --> 00:02:31.770
And we took the same insight,
and we took it to History.

00:02:31.770 --> 00:02:35.220
We said, well, what if people
had a right to get a bus?

00:02:35.220 --> 00:02:36.510
What would they do with it?

00:02:36.510 --> 00:02:40.950
Well, they'd want to write
moments, which activities with

00:02:40.950 --> 00:02:42.130
specific types.

00:02:42.130 --> 00:02:45.410
And then the user would choose,
well, this thing

00:02:45.410 --> 00:02:47.770
happened on this third-party
site that was interesting.

00:02:47.770 --> 00:02:49.600
Do I actually want
to share this?

00:02:49.600 --> 00:02:52.720
And if it's sufficiently
magical, then the user would

00:02:52.720 --> 00:02:55.930
share that magical moment with
their friends, their circles.

00:02:55.930 --> 00:02:57.650
And if it isn't,
they wouldn't.

00:02:57.650 --> 00:03:00.790
But it would still be there for
the user to find later on.

00:03:00.790 --> 00:03:03.522
So that's what we're trying
to do with History.

00:03:03.522 --> 00:03:06.535
It's sign in, saving moments,
and then choosing to share if

00:03:06.535 --> 00:03:07.630
a user feels it's valuable.

00:03:07.630 --> 00:03:11.301
I think that's the heart of
the developer system.

00:03:11.301 --> 00:03:13.280
Ian, do you want to--

00:03:13.280 --> 00:03:14.266
IAN BARBER: Yeah.

00:03:14.266 --> 00:03:17.640
So I think that's exactly it,
this ability to keep these

00:03:17.640 --> 00:03:19.510
moments in this sort of private
place that you then

00:03:19.510 --> 00:03:20.860
choose what to do with.

00:03:20.860 --> 00:03:26.245
So in the same way as all of you
have looked at the moments

00:03:26.245 --> 00:03:29.220
and looked at what's been
going on, we have to

00:03:29.220 --> 00:03:31.130
understand how they can be used
and how you can build

00:03:31.130 --> 00:03:32.266
things with them.

00:03:32.266 --> 00:03:36.895
So to do that, I actually
decided to put together a

00:03:36.895 --> 00:03:42.840
particular app look that's being
used to allow you to

00:03:42.840 --> 00:03:46.700
have a to-do list
on [INAUDIBLE].

00:03:46.700 --> 00:03:49.530
So what we have here is
something that's not even on

00:03:49.530 --> 00:03:50.000
App Engine.

00:03:50.000 --> 00:03:51.710
It just gives you a place
in which you can

00:03:51.710 --> 00:03:53.010
make a to-do list.

00:03:53.010 --> 00:03:56.680
And as you create items and
check them off, it pushes them

00:03:56.680 --> 00:03:57.970
into History.

00:03:57.970 --> 00:04:03.036
So we can go on here and
say, an important task

00:04:03.036 --> 00:04:05.610
that I have to do.

00:04:05.610 --> 00:04:08.400
Mark, will you just select
the main screen there.

00:04:15.202 --> 00:04:15.670
Thank you.

00:04:15.670 --> 00:04:20.120
So this is just the screen
that is just the

00:04:20.120 --> 00:04:21.230
interface is there.

00:04:21.230 --> 00:04:21.709
We can go in.

00:04:21.709 --> 00:04:22.970
We can create items.

00:04:22.970 --> 00:04:26.890
And they'll appear, and you can
check them off, of course,

00:04:26.890 --> 00:04:27.300
when you're done.

00:04:27.300 --> 00:04:29.920
So we can go here and close
off the Hello World.

00:04:29.920 --> 00:04:32.340
Nothing particularly
special about that.

00:04:32.340 --> 00:04:34.000
And we'll have a look at how
that's built in a second.

00:04:34.000 --> 00:04:36.440
But the sort of interesting
thing is that this is then

00:04:36.440 --> 00:04:39.040
going to push into your
Google+ history.

00:04:39.040 --> 00:04:42.570
And then you can go back and
either share those moments out

00:04:42.570 --> 00:04:45.090
if they were interesting for
you, or just kind of have that

00:04:45.090 --> 00:04:47.210
archetype of things that
have been going on.

00:04:47.210 --> 00:04:51.350
So if we bounce into my Google+
History, it takes

00:04:51.350 --> 00:04:53.960
sometimes a little while, and
you'll notice this if you're

00:04:53.960 --> 00:04:55.005
building something yourself.

00:04:55.005 --> 00:04:58.060
It can take a minute, two
minutes sometimes, or an

00:04:58.060 --> 00:05:01.360
actual moment to appear in the
History UI, the preview UI,

00:05:01.360 --> 00:05:04.240
once you've written a moment
in there unless you have

00:05:04.240 --> 00:05:06.160
something that comes up.

00:05:06.160 --> 00:05:09.024
If not, we'll jump into
the code and get it--

00:05:09.024 --> 00:05:09.920
ahh, there we are.

00:05:09.920 --> 00:05:13.940
So we've just got some task
that's been added in here.

00:05:13.940 --> 00:05:17.200
And if I share it out, it has
actually got the description

00:05:17.200 --> 00:05:19.330
of the task.

00:05:19.330 --> 00:05:20.095
So that's pretty
straightforward.

00:05:20.095 --> 00:05:23.350
But how that's actually being
developed uses a few different

00:05:23.350 --> 00:05:24.650
elements from History.

00:05:24.650 --> 00:05:26.370
And these are the History
API itself.

00:05:26.370 --> 00:05:31.494
It uses schema.org or uses the
kind of underlying code to the

00:05:31.494 --> 00:05:32.310
[INAUDIBLE].

00:05:32.310 --> 00:05:36.341
So we might be called to jump
in this at the moment.

00:05:36.341 --> 00:05:38.590
It's just kind of an
introduction to multiple

00:05:38.590 --> 00:05:39.730
different things.

00:05:39.730 --> 00:05:42.440
Because this was built using
the History APIs.

00:05:42.440 --> 00:05:44.930
This was built on Google
App Engine.

00:05:44.930 --> 00:05:47.210
And then this was built using
Go, which I know are all three

00:05:47.210 --> 00:05:50.300
kind of not necessarily things
you at home have used before.

00:05:50.300 --> 00:05:52.990
So hopefully, I'll give you
an idea of how they work.

00:05:52.990 --> 00:05:55.270
And particularly, we'll jump
through some of the functions

00:05:55.270 --> 00:05:57.660
that those who have done some of
the more interesting stuff

00:05:57.660 --> 00:05:58.830
will give you an idea.

00:05:58.830 --> 00:06:01.430
Most of all of the code from
here will be-- all the code

00:06:01.430 --> 00:06:02.060
from here--

00:06:02.060 --> 00:06:05.510
will be posted up on to
code.google.com into the

00:06:05.510 --> 00:06:09.540
repositories that all the other
office hours are into.

00:06:09.540 --> 00:06:13.340
So before you go down looking
at the file, everything in

00:06:13.340 --> 00:06:16.270
this case is included in just
one big Go file, one big Go

00:06:16.270 --> 00:06:19.070
package to do that is doing
all of the work.

00:06:19.070 --> 00:06:21.340
It just makes it easier
to look through.

00:06:21.340 --> 00:06:24.510
And we need to declare just
three types up front-- one for

00:06:24.510 --> 00:06:28.330
our to-do item, one for our
to-do list, which is a list of

00:06:28.330 --> 00:06:34.540
items, and one for our
individual users.

00:06:34.540 --> 00:06:36.710
And a good example of the real
work is being done in the Home

00:06:36.710 --> 00:06:37.896
function here.

00:06:37.896 --> 00:06:42.230
So in it, we set up a handler
for the different paths that

00:06:42.230 --> 00:06:42.460
we're doing.

00:06:42.460 --> 00:06:44.710
Much like with any other web
framework, we have to root a

00:06:44.710 --> 00:06:47.260
certain path to a certain
bit of code.

00:06:47.260 --> 00:06:52.790
So we're rooting the main group
of the main onto our

00:06:52.790 --> 00:06:54.730
Home function.

00:06:54.730 --> 00:06:57.520
In our Home function, we're
actually going to go through,

00:06:57.520 --> 00:07:01.240
and we're going to offer the
OAuth URL to allow people to

00:07:01.240 --> 00:07:02.140
authenticate themselves.

00:07:02.140 --> 00:07:03.840
We're going to handle
a response for that.

00:07:03.840 --> 00:07:06.050
And when we handle a response
from that, we're going to go

00:07:06.050 --> 00:07:09.080
away, and we're going to pick
up the user's profile

00:07:09.080 --> 00:07:11.890
information so that
we can display it.

00:07:11.890 --> 00:07:13.900
So the first thing that we do
when we come in, you'll see we

00:07:13.900 --> 00:07:15.510
create a new App Engine
context here.

00:07:15.510 --> 00:07:17.940
Whenever you're dealing with
App Engine, the context is

00:07:17.940 --> 00:07:20.490
kind of a central point that
gives you access to the

00:07:20.490 --> 00:07:23.120
various APIs and functionality
that it gives you.

00:07:23.120 --> 00:07:25.950
App Engine, because of the way
it scales and because of the

00:07:25.950 --> 00:07:28.930
functionality it offers, isn't
quite like hosting something

00:07:28.930 --> 00:07:31.620
just on a straightforward
web server.

00:07:31.620 --> 00:07:34.550
You have to make sure that
you're using its functionality

00:07:34.550 --> 00:07:36.920
in order to get the
best out of it.

00:07:36.920 --> 00:07:40.900
So what we do when you first
appear is down here, we've got

00:07:40.900 --> 00:07:41.845
no existing user.

00:07:41.845 --> 00:07:46.140
So if there's no user ID, we
just extract the OAuth code

00:07:46.140 --> 00:07:48.490
URL from the OAuth library.

00:07:48.490 --> 00:07:51.440
So this is using the Go OAuth
2.0 library, which is

00:07:51.440 --> 00:07:53.720
available for Go.

00:07:53.720 --> 00:07:56.855
And that just generates based
on the config that comes out

00:07:56.855 --> 00:07:58.870
of our developed console.

00:07:58.870 --> 00:08:02.250
So once we've setup an OAuth
context with our client ID,

00:08:02.250 --> 00:08:05.280
with our client's secret, and
with the various redirect

00:08:05.280 --> 00:08:08.810
URLs, just as with any OAuth
situation, we will be able to

00:08:08.810 --> 00:08:11.270
generate an OAuth code URL,
which we're going to use for

00:08:11.270 --> 00:08:13.100
our sign-in link.

00:08:13.100 --> 00:08:16.080
When we send the user after
that, they'll get prompted to

00:08:16.080 --> 00:08:18.400
authenticate the application
if they haven't already.

00:08:18.400 --> 00:08:21.560
And then they will be redirected
back to us here,

00:08:21.560 --> 00:08:24.840
where we can actually take the
code and exchange it for a

00:08:24.840 --> 00:08:26.290
user token.

00:08:26.290 --> 00:08:31.280
Now, if you see where we have
the OAuth transport, we

00:08:31.280 --> 00:08:36.390
actually have to set this up for
App Engine to use the URL

00:08:36.390 --> 00:08:37.315
fetch mechanism.

00:08:37.315 --> 00:08:40.669
Because once we're on production
App Engine, all URL

00:08:40.669 --> 00:08:42.780
fetches actually go
through an API.

00:08:42.780 --> 00:08:46.000
And go out to be rate controlled
and to be quote

00:08:46.000 --> 00:08:49.290
controlled so that we don't have
rogue applications going

00:08:49.290 --> 00:08:51.660
crazy and spamming a whole
bunch of stuff.

00:08:51.660 --> 00:08:54.420
So we actually need to parse
in a new transport, and we

00:08:54.420 --> 00:08:56.690
parse in our config , which
contains our client ID, our

00:08:56.690 --> 00:08:58.530
client secret, and so on.

00:08:58.530 --> 00:09:00.970
Then we exchange our code
for an OAuth token.

00:09:00.970 --> 00:09:03.700
And that's the token we can
actually use to go away and

00:09:03.700 --> 00:09:05.990
make calls to the Google+ API.

00:09:08.510 --> 00:09:12.150
For the actual calls themselves,
we just extract

00:09:12.150 --> 00:09:14.440
the client from the Go
OAuth 2.0 library.

00:09:14.440 --> 00:09:16.860
That gives us back an
HTTP client we can

00:09:16.860 --> 00:09:17.840
use to make the calls.

00:09:17.840 --> 00:09:20.800
And we parse that into
our Google+ servers.

00:09:20.800 --> 00:09:24.380
So right at the top here, we're
including two different

00:09:24.380 --> 00:09:27.570
Google+ services out of the
Google+ client libraries--

00:09:27.570 --> 00:09:29.490
sorry, the Google client
libraries.

00:09:29.490 --> 00:09:35.810
We have the plus-v1 library,
and we have the plus-v1

00:09:35.810 --> 00:09:38.380
moments library, which
I've just aliased to

00:09:38.380 --> 00:09:39.420
Plus History here.

00:09:39.420 --> 00:09:41.880
The reason we have two libraries
is that the v1

00:09:41.880 --> 00:09:44.580
moments library, which is the
library with the history, is

00:09:44.580 --> 00:09:46.060
actually still in developer
preview.

00:09:46.060 --> 00:09:48.070
So that isn't going to work
for most of us on

00:09:48.070 --> 00:09:50.450
a day-to-day access.

00:09:50.450 --> 00:09:52.770
The regular APIs are in v1.

00:09:52.770 --> 00:09:55.500
So we actually need both in this
case, because we're going

00:09:55.500 --> 00:09:58.280
to be accessing some regular
profile information, and we're

00:09:58.280 --> 00:10:01.310
going to be going away and
accessing History.

00:10:01.310 --> 00:10:05.460
So once we have our new service,
we create a new-- a

00:10:05.460 --> 00:10:06.910
new OAuth client, sorry--

00:10:06.910 --> 00:10:10.910
we create a new Plus service
using the OAuth client.

00:10:10.910 --> 00:10:14.490
And we use the People
Get method.

00:10:14.490 --> 00:10:18.130
That's going to go away and do
a call to the RESTful APIs,

00:10:18.130 --> 00:10:20.630
and just return the profile
information for the user

00:10:20.630 --> 00:10:21.830
described as me.

00:10:21.830 --> 00:10:24.730
Because we're wrapping that in
the OAuth context, that's

00:10:24.730 --> 00:10:28.350
going to go away and get the
current logged in user their

00:10:28.350 --> 00:10:28.890
information.

00:10:28.890 --> 00:10:32.620
And what we're actually to do
with that is use that as both

00:10:32.620 --> 00:10:35.400
the key for our cookie, and
we're going to store that

00:10:35.400 --> 00:10:38.140
information in a memcache
instance so that we can

00:10:38.140 --> 00:10:42.080
display the profile information
at the top here.

00:10:42.080 --> 00:10:45.110
So as we say my to-do's, and
show my picture, that's going

00:10:45.110 --> 00:10:49.460
to have been retrieved from that
profile and stored here.

00:10:49.460 --> 00:10:51.460
We do that in very
straightforward way.

00:10:51.460 --> 00:10:53.470
We just create a new user entry,
which we'll use through

00:10:53.470 --> 00:10:54.810
the rest of the application.

00:10:54.810 --> 00:10:58.200
And we're going to marshall
that into JSON.

00:10:58.200 --> 00:11:01.110
So memcache stores
a byte array.

00:11:01.110 --> 00:11:02.800
It doesn't store a kind of

00:11:02.800 --> 00:11:04.460
arbitrarily structured document.

00:11:04.460 --> 00:11:07.810
So to serialize it, we're just
going to stick it into JSON

00:11:07.810 --> 00:11:10.450
and turn that into
a byte array.

00:11:10.450 --> 00:11:16.040
We can pull out the structure
back into a user entry struct

00:11:16.040 --> 00:11:18.850
just by using the Unmarshall
function, which you can

00:11:18.850 --> 00:11:20.700
actually see in the Get User.

00:11:20.700 --> 00:11:22.410
We'll hop into that
in a second.

00:11:22.410 --> 00:11:26.240
Memcache itself, we just have
a struct called Item, which

00:11:26.240 --> 00:11:27.440
has the key-in value.

00:11:27.440 --> 00:11:32.440
And we set that into the
memcache library.

00:11:32.440 --> 00:11:33.440
So that's going to go away.

00:11:33.440 --> 00:11:37.600
It's going to store that value
against that key in memcache,

00:11:37.600 --> 00:11:39.330
and allow us to retrieve
it later.

00:11:39.330 --> 00:11:43.020
And we're going to use the key
as the value for our cookie.

00:11:43.020 --> 00:11:47.020
So the key in this case is
actually just an MD5 over the

00:11:47.020 --> 00:11:50.510
user's profile with a little
salting string, just to make

00:11:50.510 --> 00:11:51.580
it slightly less guessable.

00:11:51.580 --> 00:11:54.370
There's also a lot more you
could do here to get yourself

00:11:54.370 --> 00:11:57.265
a secure ID, or just
generate a UUID.

00:11:57.265 --> 00:12:00.470
There's no real need for this
to be linked to the rest of

00:12:00.470 --> 00:12:01.910
the user's profile in any way.

00:12:01.910 --> 00:12:05.110
It was just simpler for knocking
out some code to use

00:12:05.110 --> 00:12:07.240
the profile there at
the user base.

00:12:07.240 --> 00:12:09.900
So once we've done that, we
create a cookie struct, which

00:12:09.900 --> 00:12:11.510
again, has just a value
and a name.

00:12:11.510 --> 00:12:13.550
You could also set expiry
times in here.

00:12:13.550 --> 00:12:16.600
And we use the HTTP library
to set them.

00:12:16.600 --> 00:12:19.750
The situation we end up with is
that the OAuth token, the

00:12:19.750 --> 00:12:22.860
user's name, the user's profile,
is all stored in

00:12:22.860 --> 00:12:25.042
memcache for when we return.

00:12:25.042 --> 00:12:28.560
And this means that we can send
that cookie back to the

00:12:28.560 --> 00:12:29.780
user with the response.

00:12:29.780 --> 00:12:33.750
And the response includes the
whole HTML of the page, which

00:12:33.750 --> 00:12:36.620
is generated down here through
this Home Template Execute.

00:12:36.620 --> 00:12:39.476
So Go comes with a built-in
templating language that is

00:12:39.476 --> 00:12:39.915
pretty proficient.

00:12:39.915 --> 00:12:42.630
It allows you to do most of
the normal tasks that you

00:12:42.630 --> 00:12:44.480
would in a template.

00:12:44.480 --> 00:12:45.740
This is the main HTML.

00:12:45.740 --> 00:12:48.490
So you can see it's mostly
just regular HTML.

00:12:48.490 --> 00:12:51.680
The template tags are
identified by the

00:12:51.680 --> 00:12:53.700
double curly brace.

00:12:53.700 --> 00:12:58.180
That is either going to output a
token, so in this case where

00:12:58.180 --> 00:13:02.180
you see I'm doing double curly
brace user in the URL, that's

00:13:02.180 --> 00:13:05.180
just going to output the value
of user in the URL.

00:13:05.180 --> 00:13:08.060
Or there are certain keywords
you can use, like IF, which is

00:13:08.060 --> 00:13:10.580
going to check for if
the value is empty.

00:13:10.580 --> 00:13:13.970
If the value is not empty,
then it'll execute the

00:13:13.970 --> 00:13:18.600
included condition And you
can do ELSE and so on.

00:13:18.600 --> 00:13:20.590
Templates also allow you to
include other templates.

00:13:20.590 --> 00:13:24.410
So you can structure your
document how you'd like to.

00:13:24.410 --> 00:13:28.110
So down here where we have
the sign-in URL, which is

00:13:28.110 --> 00:13:30.970
displayed when the user's not
logged in, when they are

00:13:30.970 --> 00:13:33.040
logged in, we actually display
the list of items.

00:13:33.040 --> 00:13:36.565
So that's this Work, Home, and
then any items that they have

00:13:36.565 --> 00:13:37.605
entered into that.

00:13:37.605 --> 00:13:40.740
And that's actually stored in
a list HTML file, which you

00:13:40.740 --> 00:13:44.940
can bounce into here, that just
uses a loop over lists we

00:13:44.940 --> 00:13:45.300
have given it.

00:13:45.300 --> 00:13:47.865
So it's using the range function
twice, once for each

00:13:47.865 --> 00:13:49.550
list, so Homework and so on.

00:13:49.550 --> 00:13:52.440
And once for the items within
the list, which again includes

00:13:52.440 --> 00:13:53.890
a subtemplate.

00:13:53.890 --> 00:13:56.110
So it's very easy to nest
templates this way.

00:13:56.110 --> 00:13:59.170
Once thing to notice if you want
to do that is that all of

00:13:59.170 --> 00:14:02.660
them have to be within this
template that we're executing.

00:14:02.660 --> 00:14:06.960
So if I just hop down to the
bottom here, when we actually

00:14:06.960 --> 00:14:09.170
define those templates, we
need to make sure that we

00:14:09.170 --> 00:14:10.930
include the others in them.

00:14:10.930 --> 00:14:13.660
So we have here our
Home template.

00:14:13.660 --> 00:14:16.180
So we're parsing in the
main HTML file.

00:14:16.180 --> 00:14:19.860
And we're actually using Home
template again to parse in the

00:14:19.860 --> 00:14:21.440
List and the Entry templates.

00:14:21.440 --> 00:14:23.710
That means that they're all
available for that template to

00:14:23.710 --> 00:14:24.800
be executed.

00:14:24.800 --> 00:14:27.375
Otherwise, what will happen
is when it tries to go and

00:14:27.375 --> 00:14:28.646
include the template
and execute it, it

00:14:28.646 --> 00:14:29.520
will actually fail.

00:14:29.520 --> 00:14:31.250
Because we haven't created
it in that.

00:14:31.250 --> 00:14:34.100
So it's important to make sure
that any subtemplates you want

00:14:34.100 --> 00:14:35.970
to use are available
for referencing

00:14:35.970 --> 00:14:38.104
by that main template.

00:14:38.104 --> 00:14:43.260
So if we just bounce up to the
main now, this gets us to a

00:14:43.260 --> 00:14:45.230
situation where we
have the list of

00:14:45.230 --> 00:14:47.280
items actually created.

00:14:47.280 --> 00:14:50.590
And we can then see them,
and the user has the

00:14:50.590 --> 00:14:52.470
ability to add more.

00:14:52.470 --> 00:14:55.780
The main work of adding and
removing items is done in

00:14:55.780 --> 00:14:56.830
JavaScript.

00:14:56.830 --> 00:15:02.990
So when we load up our actual
page, we create some handlers

00:15:02.990 --> 00:15:07.830
on the item boxes, in the item
entry boxes, and the little X

00:15:07.830 --> 00:15:09.960
button allows you to delete.

00:15:09.960 --> 00:15:14.065
So what we do is just associate
this function here

00:15:14.065 --> 00:15:18.490
and to-do, which is going to
go away and just do an Ajax

00:15:18.490 --> 00:15:23.620
post OAuth to our web service,
where it will create the item

00:15:23.620 --> 00:15:26.390
or it'll do a post OAuth
to the item.

00:15:26.390 --> 00:15:28.640
So the posts are very simple
just used in this case.

00:15:28.640 --> 00:15:31.720
It's jQuery, just either adding
an LI to the screen

00:15:31.720 --> 00:15:35.030
with the response from the app
post, or fading out and

00:15:35.030 --> 00:15:39.670
removing the LI if we no longer
need it once we've

00:15:39.670 --> 00:15:40.720
completed that.

00:15:40.720 --> 00:15:43.720
So in Go, those again are
just extra handlers

00:15:43.720 --> 00:15:44.770
that we define here.

00:15:44.770 --> 00:15:48.810
So we've got two Manage
List and Manage Item.

00:15:48.810 --> 00:15:52.150
And those functions are a little
bit simpler if we look

00:15:52.150 --> 00:15:55.430
to Manage List to begin with.

00:15:55.430 --> 00:15:59.900
Manage List, it looks for
posting a new item, pulls some

00:15:59.900 --> 00:16:00.900
form values out.

00:16:00.900 --> 00:16:02.660
So these are the
posted values.

00:16:02.660 --> 00:16:06.710
And then at the end, it's going
to just redirect back to

00:16:06.710 --> 00:16:08.811
the location of the item.

00:16:08.811 --> 00:16:11.630
And so this is the first kind
of interesting bit where we

00:16:11.630 --> 00:16:13.240
come to think about History.

00:16:13.240 --> 00:16:15.920
Because here is the point at
which we want to actually push

00:16:15.920 --> 00:16:17.660
a moment to History.

00:16:17.660 --> 00:16:20.210
So if a user's created an item,
we'd like to actually

00:16:20.210 --> 00:16:22.640
update the Google+ History
and tell it about it.

00:16:22.640 --> 00:16:26.760
But we also would like to return
the item to the user.

00:16:26.760 --> 00:16:28.540
So if the user--

00:16:28.540 --> 00:16:32.330
when the user gets redirected,
they get sent to a URL which

00:16:32.330 --> 00:16:34.120
is specific to an item.

00:16:34.120 --> 00:16:40.830
And that URL, if we see it down
here, will render using

00:16:40.830 --> 00:16:43.130
the item template.

00:16:43.130 --> 00:16:45.580
And that is Entry here.

00:16:45.580 --> 00:16:49.170
So we're going to return
an LI that just has a

00:16:49.170 --> 00:16:50.165
description of the thing.

00:16:50.165 --> 00:16:51.360
It has the Close button.

00:16:51.360 --> 00:16:52.210
But it's a snippet.

00:16:52.210 --> 00:16:55.515
It's not a fully formed
piece of HTML.

00:16:55.515 --> 00:17:00.600
If we request without the XML
HTTP request header set, which

00:17:00.600 --> 00:17:03.310
means if we're requesting like
say a normal web request,

00:17:03.310 --> 00:17:05.480
we're actually going to use
a different template.

00:17:05.480 --> 00:17:11.650
And we're going to render the
moment +, which is going to

00:17:11.650 --> 00:17:13.150
render a full page.

00:17:13.150 --> 00:17:17.112
And in that page, we're going to
include schema.org markup.

00:17:17.112 --> 00:17:20.794
Any of you guys want to cover
what schema.org markup is?

00:17:20.794 --> 00:17:22.420
ADE OSHINEYE: Sure.

00:17:22.420 --> 00:17:24.460
If you went on the site
schema.org, you would have to

00:17:24.460 --> 00:17:26.710
start by, first of all,
understanding what are

00:17:26.710 --> 00:17:28.230
microformats.

00:17:28.230 --> 00:17:30.490
So microformats started with
a very simple idea.

00:17:30.490 --> 00:17:33.730
You have a well-written
HTML web page.

00:17:33.730 --> 00:17:37.650
And it describes some product,
some entity, some person.

00:17:37.650 --> 00:17:43.160
And then you realize that it's
really hard for tools to

00:17:43.160 --> 00:17:45.670
automatically understand the
structure of that page.

00:17:45.670 --> 00:17:48.695
But then you realize after a
while that you tend to use

00:17:48.695 --> 00:17:50.080
certain, very common
tag names.

00:17:50.080 --> 00:17:52.600
And so the microformat's
committee realized they could

00:17:52.600 --> 00:17:56.220
embed these attributes in the
HTML, which didn't change the

00:17:56.220 --> 00:17:59.070
appearance of the page but which
surfaced the fact that

00:17:59.070 --> 00:18:03.350
this page actually contains a
local business, or contains, a

00:18:03.350 --> 00:18:07.430
person or contains a place.

00:18:07.430 --> 00:18:10.130
And schema.org came along as
an attempt to say, well,

00:18:10.130 --> 00:18:12.880
instead of having lots and lots
of different kinds of

00:18:12.880 --> 00:18:17.190
microformats, what if you had
one ontology, one set of

00:18:17.190 --> 00:18:22.030
microformats, or microdata in
this case, which let you say

00:18:22.030 --> 00:18:24.620
this is a person, this is a
place, and this is a special

00:18:24.620 --> 00:18:25.630
kind of place.

00:18:25.630 --> 00:18:26.760
This is a local business.

00:18:26.760 --> 00:18:27.550
This is a school.

00:18:27.550 --> 00:18:29.080
This is a high school.

00:18:29.080 --> 00:18:31.910
And if you'd made this ontology
extensible, so if you

00:18:31.910 --> 00:18:34.565
could start a mailing list and
say, I'd like to add this kind

00:18:34.565 --> 00:18:38.480
of entity into this hierarchy,
you get a really nice thing.

00:18:38.480 --> 00:18:41.870
The beauty of this is that at
the simplest, all you need to

00:18:41.870 --> 00:18:45.550
do is to say this page describes
a thing which has a

00:18:45.550 --> 00:18:48.726
name, a description, and an
image, and a URL, so we can

00:18:48.726 --> 00:18:49.445
know what page it's on.

00:18:49.445 --> 00:18:52.240
But that's the simplest way.

00:18:52.240 --> 00:18:54.560
And the beauty of this is that
it gives you control over the

00:18:54.560 --> 00:18:56.850
snippets you see in web search,
but it also gives you

00:18:56.850 --> 00:18:59.880
control of the snippet
that is shown in

00:18:59.880 --> 00:19:01.650
your screen in Google+.

00:19:01.650 --> 00:19:04.715
And coincidentally, it also
gives you control of a snippet

00:19:04.715 --> 00:19:06.120
that's shown in Google+
History.

00:19:06.120 --> 00:19:07.580
IAN BARBER: Absolutely.

00:19:07.580 --> 00:19:07.860
Cool.

00:19:07.860 --> 00:19:10.850
So if we could just put
it back to the code.

00:19:10.850 --> 00:19:18.070
So what you can sort of
see here [INAUDIBLE].

00:19:18.070 --> 00:19:22.110
When we go and request the URL,
when we add a type, the

00:19:22.110 --> 00:19:25.270
URL that we get back just
contains this LI because we

00:19:25.270 --> 00:19:27.330
did it with the XML
HTTP request.

00:19:27.330 --> 00:19:30.460
But when we do it just from a
browser, we get a screen like

00:19:30.460 --> 00:19:32.220
this, which is a fully
rendered page.

00:19:32.220 --> 00:19:38.770
And that is where we are using
the markup as Ade described to

00:19:38.770 --> 00:19:40.090
indicate what this page is.

00:19:40.090 --> 00:19:45.160
Now I'm doing a terrible thing
for people that do a lot of

00:19:45.160 --> 00:19:48.270
schema.org and using
schema.org/thing.

00:19:48.270 --> 00:19:52.030
Because I didn't know exactly
what a to-do list was in that.

00:19:52.030 --> 00:19:53.370
But normally you would
want to do

00:19:53.370 --> 00:19:55.580
something a lot more precise.

00:19:55.580 --> 00:19:59.590
Also, if you'd do
a creative work.

00:19:59.590 --> 00:20:01.960
You'd do a blog post, whatever
it is that you're actually

00:20:01.960 --> 00:20:04.900
covering, this is the most
generic and worst possible

00:20:04.900 --> 00:20:06.500
thing you can use
in schema.org.

00:20:06.500 --> 00:20:09.940
But I am indicating that, OK,
the body of this document is

00:20:09.940 --> 00:20:11.450
an item scope of this type.

00:20:11.450 --> 00:20:13.060
And within it, there
are some certain

00:20:13.060 --> 00:20:14.170
properties that I have.

00:20:14.170 --> 00:20:17.280
So I have a name, itemprop,
which I'm using

00:20:17.280 --> 00:20:18.210
as a Task To Do.

00:20:18.210 --> 00:20:21.430
I have a description, which in
this case is the text of the

00:20:21.430 --> 00:20:24.600
task I put as EMEA office hours,
and I have an image.

00:20:24.600 --> 00:20:28.490
So again, itemprop image here
indicates that this image best

00:20:28.490 --> 00:20:31.040
describes this thing.

00:20:31.040 --> 00:20:35.400
And if it was a person, the
image would be of the person.

00:20:35.400 --> 00:20:36.350
So that allows--

00:20:36.350 --> 00:20:38.690
even though this markup doesn't
affect how the page is

00:20:38.690 --> 00:20:42.290
rendered, it, as Ade says,
allows search.

00:20:42.290 --> 00:20:46.970
It allows sharing to pick up
those characteristics from

00:20:46.970 --> 00:20:48.480
this HTML page.

00:20:48.480 --> 00:20:52.150
So if I push them into History,
this is what the

00:20:52.150 --> 00:20:53.210
History will retrieve.

00:20:53.210 --> 00:20:57.950
So if we take a little look at
that, where in the Create

00:20:57.950 --> 00:21:00.520
function we have this push
moment, what we're sending

00:21:00.520 --> 00:21:04.800
across is the user--
sorry, I said push.

00:21:04.800 --> 00:21:06.750
It should be delete.

00:21:06.750 --> 00:21:09.610
What we have, we send across as
the user, the URL, so that

00:21:09.610 --> 00:21:12.360
will be the equivalent
of this, and

00:21:12.360 --> 00:21:15.020
the type of the moment.

00:21:15.020 --> 00:21:17.970
So when you are creating a
moment in Google+ History,

00:21:17.970 --> 00:21:20.640
you're not just saying
this URL happened.

00:21:20.640 --> 00:21:23.740
You're saying that the user
took some kind of action.

00:21:23.740 --> 00:21:25.050
The user has done something.

00:21:25.050 --> 00:21:27.226
And there's a list of--

00:21:27.226 --> 00:21:29.960
eight or nine supported?

00:21:29.960 --> 00:21:32.610
ADE OSHINEYE: We support
a small set of common

00:21:32.610 --> 00:21:34.500
actions right now.

00:21:34.500 --> 00:21:38.220
The important thing is that the
user performs some action

00:21:38.220 --> 00:21:41.210
on the entity at this URL.

00:21:41.210 --> 00:21:42.780
That's the important idea.

00:21:42.780 --> 00:21:46.725
SILVANO LUCIANI: So all of them
are documented in the

00:21:46.725 --> 00:21:48.820
guide documentation in here.

00:21:48.820 --> 00:21:53.580
You can find out everything
you need to know.

00:21:53.580 --> 00:21:56.610
IAN BARBER: So, in this case,
because you're creating a new

00:21:56.610 --> 00:22:00.650
thing to do, I decided to mark
that as a Create activity.

00:22:00.650 --> 00:22:03.197
So we'll just jump down to the
Push Moment code here.

00:22:05.820 --> 00:22:07.550
What this is going to
do is again, it's

00:22:07.550 --> 00:22:08.215
going to use OAuth.

00:22:08.215 --> 00:22:10.830
So we need to set up another
transport, and we

00:22:10.830 --> 00:22:12.110
need to get our token.

00:22:12.110 --> 00:22:14.180
So we're putting the token
that we have in our user

00:22:14.180 --> 00:22:16.810
entry, which will normally be
coming out of memcache, and

00:22:16.810 --> 00:22:19.945
we're creating a OAuth
token there.

00:22:19.945 --> 00:22:22.460
And we're using the client that
we've retrieved from the

00:22:22.460 --> 00:22:26.240
OAuth library for our Plus
History service.

00:22:26.240 --> 00:22:28.650
Then we need to actually create
what we're going to

00:22:28.650 --> 00:22:30.640
send to the Plus History
service.

00:22:30.640 --> 00:22:33.340
So that is a moment, which is
defined as a moment struct.

00:22:33.340 --> 00:22:37.040
And at its most basic level, the
moment has a target, and

00:22:37.040 --> 00:22:37.660
it has a type.

00:22:37.660 --> 00:22:40.462
The type is the-- in this case,
the Create activity that

00:22:40.462 --> 00:22:42.180
I decided upon earlier.

00:22:42.180 --> 00:22:44.660
And the target is the URL that
we're going to reference.

00:22:44.660 --> 00:22:48.210
It's the thing that the user
is doing something to.

00:22:48.210 --> 00:22:51.300
In this case, the user
has created this URL.

00:22:51.300 --> 00:22:54.680
So we're going to parse through
a itemscope, which is

00:22:54.680 --> 00:22:56.670
the struct that is
used for that.

00:22:56.670 --> 00:22:57.650
We're only going to set
the URL in there.

00:22:57.650 --> 00:22:59.606
There's a lot of values in there
you can set, but the

00:22:59.606 --> 00:23:02.706
only one you want to set at
this time is the URL.

00:23:02.706 --> 00:23:04.530
That's the place you're
referring to.

00:23:04.530 --> 00:23:07.730
And then we just use the Moments
Insert, where we're

00:23:07.730 --> 00:23:10.515
just going to say for the user,
me, the currently logged

00:23:10.515 --> 00:23:13.396
in OAuth user to the vault,
which is the only place you

00:23:13.396 --> 00:23:14.930
can send them to--

00:23:14.930 --> 00:23:17.790
that's the one valid field
for that correction--

00:23:17.790 --> 00:23:19.096
we're going to send
this moment, and

00:23:19.096 --> 00:23:19.870
we're going to do it.

00:23:19.870 --> 00:23:21.260
And that is going to go away.

00:23:21.260 --> 00:23:24.190
And it's going to push the
moment over to Google+

00:23:24.190 --> 00:23:29.930
History, where it will appear
as we saw it earlier just in

00:23:29.930 --> 00:23:32.560
here like this, and then
users can reshare it.

00:23:32.560 --> 00:23:34.030
So it's picked up the image.

00:23:34.030 --> 00:23:35.210
That's the image that
was marked on it.

00:23:35.210 --> 00:23:37.870
It's picked up the text that was
described, and it's picked

00:23:37.870 --> 00:23:39.120
up the title.

00:23:47.150 --> 00:23:49.730
So that's the description that
I put in the image and then

00:23:49.730 --> 00:23:54.390
pulled out by schema.org
from that.

00:23:54.390 --> 00:23:58.940
Now if we go back to here, once
this has been done, we're

00:23:58.940 --> 00:24:01.820
pretty much done with the OAuth
part of this situation.

00:24:01.820 --> 00:24:05.110
This is all we're using it for
in this case, is to just

00:24:05.110 --> 00:24:06.410
continually push
those moments.

00:24:06.410 --> 00:24:08.280
But that would've happened
sometime after the

00:24:08.280 --> 00:24:09.470
user has logged in.

00:24:09.470 --> 00:24:12.710
So because we're storing this
stuff into memcache, we can

00:24:12.710 --> 00:24:14.770
keep it, and then as the user
comes back and interacts with

00:24:14.770 --> 00:24:16.875
the site, we create the moments
in the background.

00:24:16.875 --> 00:24:19.070
We're not asking them for
authentication again.

00:24:19.070 --> 00:24:22.780
We're not checking on them again
unless that token has

00:24:22.780 --> 00:24:25.510
expired, unless we need extra
privileges from them.

00:24:25.510 --> 00:24:28.190
So this is something that
works well for a kind of

00:24:28.190 --> 00:24:30.460
application situation.

00:24:30.460 --> 00:24:33.830
One thing that we did realize,
or I did realize while

00:24:33.830 --> 00:24:36.350
building this application,
that there is a slight

00:24:36.350 --> 00:24:41.540
fundamental mistake about how
we've actually structured the

00:24:41.540 --> 00:24:44.490
idea of this app,
my to-do app.

00:24:44.490 --> 00:24:48.390
And it's a point Ade made, which
was when you're using

00:24:48.390 --> 00:24:51.940
History, the first possible use
is for private actions,

00:24:51.940 --> 00:24:55.360
the user taking a private action
but on a public URL.

00:24:55.360 --> 00:24:57.690
And in this case, the URL
is kind of semi-public.

00:24:57.690 --> 00:25:00.650
We have to have this thing
as a public URL that

00:25:00.650 --> 00:25:01.950
anyone can go to.

00:25:01.950 --> 00:25:04.990
But it's not really public
information.

00:25:04.990 --> 00:25:07.720
It's not really something
that the user would be

00:25:07.720 --> 00:25:08.570
best suited to do.

00:25:08.570 --> 00:25:10.870
ADE OSHINEYE: I think one
example of that would be if we

00:25:10.870 --> 00:25:14.390
were to make a post where it
got written to History that

00:25:14.390 --> 00:25:17.430
Ade has checked in to Google
Campus London.

00:25:17.430 --> 00:25:19.070
Google Campus London
is a big building.

00:25:19.070 --> 00:25:19.945
So it's pretty public.

00:25:19.945 --> 00:25:22.820
It's seven stories in the
heart of East London.

00:25:22.820 --> 00:25:26.535
The fact that I'm here is
private, except for the all of

00:25:26.535 --> 00:25:29.020
you watching right now.

00:25:29.020 --> 00:25:30.030
IAN BARBER: So absolutely.

00:25:30.030 --> 00:25:31.540
I think Ade has a really
good point.

00:25:31.540 --> 00:25:32.730
I think that when you're
designing your own

00:25:32.730 --> 00:25:35.120
applications, that's something
to keep in mind.

00:25:35.120 --> 00:25:39.400
What's the public thing that
is being interacted with

00:25:39.400 --> 00:25:40.940
privately by the user?

00:25:40.940 --> 00:25:43.250
Even if the user isn't
necessarily particularly

00:25:43.250 --> 00:25:44.580
worried about a very
private life.

00:25:44.580 --> 00:25:45.870
Ade checking in here while--

00:25:45.870 --> 00:25:47.775
ADE OSHINEYE: No, I've chosen
to share that fact.

00:25:47.775 --> 00:25:48.815
IAN BARBER: But he chooses
to share it, exactly.

00:25:48.815 --> 00:25:50.600
So the information
starts private.

00:25:50.600 --> 00:25:53.580
And the user then chooses
whether they want to share it.

00:25:53.580 --> 00:25:56.370
But the thing that is actually
being interacted with, it's

00:25:56.370 --> 00:25:58.520
best if that is public
and that has a URL.

00:25:58.520 --> 00:26:02.300
And that benefits you
in a lot of ways.

00:26:02.300 --> 00:26:04.185
Because if your URLs are public,
then when you brought

00:26:04.185 --> 00:26:06.870
them onto schema.org, then
they're going to share well.

00:26:06.870 --> 00:26:07.680
They're going to look good.

00:26:07.680 --> 00:26:09.100
But they're also going to
appear in search world.

00:26:09.100 --> 00:26:12.890
Because you've got that
extra markup on that.

00:26:12.890 --> 00:26:15.940
So the other interesting thing
that sort of came out from the

00:26:15.940 --> 00:26:19.790
applications is worth just a
very quick look is that when I

00:26:19.790 --> 00:26:22.180
actually started on this, just
to get something working, I

00:26:22.180 --> 00:26:25.160
actually started on this
in JavaScript.

00:26:25.160 --> 00:26:27.460
So rather than using the service
side flow, I did it in

00:26:27.460 --> 00:26:28.700
the client slide flow.

00:26:28.700 --> 00:26:31.980
Still using Go in App Engine
to provide the sort of

00:26:31.980 --> 00:26:36.740
back-end story along with
the URL moments work in

00:26:36.740 --> 00:26:37.700
JavaScript.

00:26:37.700 --> 00:26:40.310
So it's interesting to
compare the two.

00:26:40.310 --> 00:26:43.030
It's very simple and very
consistent across the

00:26:43.030 --> 00:26:44.000
different languages.

00:26:44.000 --> 00:26:47.116
Let us check out
a master there.

00:26:47.116 --> 00:26:49.090
Oh no, sorry about that.

00:26:49.090 --> 00:26:50.340
[INAUDIBLE]

00:26:52.370 --> 00:26:54.340
And then we can bounce
back in here.

00:26:54.340 --> 00:26:59.390
And what we see is that rather
than pushing those moments in

00:26:59.390 --> 00:27:03.960
the Go part of the service,
we're actually going to push

00:27:03.960 --> 00:27:05.610
them in the JavaScript.

00:27:05.610 --> 00:27:09.840
So here's where we store the
item, very, very similar.

00:27:09.840 --> 00:27:12.040
We're going to pull out the URL
of the actual item, which

00:27:12.040 --> 00:27:15.180
was being returned in our
special response header, and

00:27:15.180 --> 00:27:18.480
we're going to create a moment
just using JSON.

00:27:18.480 --> 00:27:20.400
So obviously that's pretty
easy to work with in

00:27:20.400 --> 00:27:20.720
JavaScript.

00:27:20.720 --> 00:27:22.130
We just create the type here.

00:27:22.130 --> 00:27:23.315
We create Activity.

00:27:23.315 --> 00:27:25.910
And we add the URL
in as the target.

00:27:25.910 --> 00:27:29.020
And then down here in this
Push Moment function, all

00:27:29.020 --> 00:27:31.810
we're going to do is do a call,
a very simple call,

00:27:31.810 --> 00:27:39.830
using the GAPI library off to
the plus-v1 moment vault

00:27:39.830 --> 00:27:43.590
posting the JSON representation
of the moment

00:27:43.590 --> 00:27:45.030
that we've parsed in.

00:27:45.030 --> 00:27:47.800
So this is very similar to how
we were doing it before.

00:27:47.800 --> 00:27:50.460
All we're doing is taking the
JSON representation of the

00:27:50.460 --> 00:27:54.800
moment and sending that
over to Google+

00:27:54.800 --> 00:27:57.280
using the OAuth setup.

00:27:57.280 --> 00:28:00.530
So there we have setting the
token into the OAuth on the

00:28:00.530 --> 00:28:01.290
GAPI library.

00:28:01.290 --> 00:28:03.340
And we just make a GAPI client
and push actually to our next

00:28:03.340 --> 00:28:04.076
[INAUDIBLE].

00:28:04.076 --> 00:28:07.350
So you'll find once you've
actually implemented the

00:28:07.350 --> 00:28:10.390
History API or any of the API
in one language, it's really

00:28:10.390 --> 00:28:12.580
easy to then go and turn that
into another language.

00:28:12.580 --> 00:28:16.830
This was not that complicated
to go and look from the G+

00:28:16.830 --> 00:28:20.730
client code and turn it
into the code for the

00:28:20.730 --> 00:28:22.810
Go Google API client.

00:28:22.810 --> 00:28:27.040
And it's the same look in our
clients in PHP, Ruby, Java,

00:28:27.040 --> 00:28:28.640
and any of the other of
the other languages.

00:28:28.640 --> 00:28:31.820
SILVANO LUCIANI: So given your
double experience with both

00:28:31.820 --> 00:28:35.220
the server side flow and the
client side flow, first one

00:28:35.220 --> 00:28:38.540
with Go, second one with
JavaScript, which would you

00:28:38.540 --> 00:28:41.900
suggest to a user?

00:28:41.900 --> 00:28:44.600
Which one do you think is
more appropriate for it?

00:28:44.600 --> 00:28:46.340
IAN BARBER: It's a really
good question.

00:28:46.340 --> 00:28:49.960
I think that the difference is,
again, it'll depend on the

00:28:49.960 --> 00:28:51.270
different kind of application.

00:28:51.270 --> 00:28:55.310
So if you are building something
that is more of a

00:28:55.310 --> 00:28:58.780
web application where you are
having longer running

00:28:58.780 --> 00:29:01.760
interaction happening in the
background, so it's storing

00:29:01.760 --> 00:29:03.080
something for a user, and
they're coming back and

00:29:03.080 --> 00:29:04.870
interacting with it
occasionally, doing the work

00:29:04.870 --> 00:29:07.660
at the server side just gives
you a lot more flexibility.

00:29:07.660 --> 00:29:10.070
The user doesn't have to be
using the app right then when

00:29:10.070 --> 00:29:11.350
you write the moments.

00:29:11.350 --> 00:29:14.000
If you know that they're going
to do something and they go

00:29:14.000 --> 00:29:16.000
and do it, you get a signal from
somewhere else, you can

00:29:16.000 --> 00:29:18.530
still trigger that moment even
if they're not there with you.

00:29:18.530 --> 00:29:21.510
If you do it in the browser
and JavaScript, then they

00:29:21.510 --> 00:29:23.780
pretty much have to be running
that application at the time

00:29:23.780 --> 00:29:25.480
for you to go away and
push the moment.

00:29:25.480 --> 00:29:27.930
So it depends on the kind
of service that you want

00:29:27.930 --> 00:29:28.940
to offer the user.

00:29:28.940 --> 00:29:31.670
But that's always the thing to
focus on, is what's the user

00:29:31.670 --> 00:29:32.900
going to actually see?

00:29:32.900 --> 00:29:35.410
And why would they want me to
be pushing this moment?

00:29:35.410 --> 00:29:38.800
And then once you know that,
go back and work out which

00:29:38.800 --> 00:29:40.340
technology would be the
best basis to use.

00:29:40.340 --> 00:29:42.310
ADE OSHINEYE: You should also
think about what happens in a

00:29:42.310 --> 00:29:45.462
mobile context, which I may sign
in to the web app, and

00:29:45.462 --> 00:29:48.120
then I may be using your mobile
app, and then something

00:29:48.120 --> 00:29:49.553
may happen.

00:29:49.553 --> 00:29:52.970
And you can decide whether
your mobile is going to

00:29:52.970 --> 00:29:56.030
actually write the scripted
history from my phone, or

00:29:56.030 --> 00:29:57.493
whether it's just going
to tell your server.

00:29:57.493 --> 00:29:58.650
And then your server's
going to write the

00:29:58.650 --> 00:29:59.570
history on my behalf.

00:29:59.570 --> 00:30:00.880
IAN BARBER: Yeah, that's
a great point.

00:30:00.880 --> 00:30:04.580
And I think you've got
that option to do

00:30:04.580 --> 00:30:05.290
it either way around.

00:30:05.290 --> 00:30:07.740
You can post on the mobile
client libraries, or you can

00:30:07.740 --> 00:30:09.322
take from the server side.

00:30:09.322 --> 00:30:10.572
Definitely worth considering.

00:30:13.262 --> 00:30:14.206
SILVANO LUCIANI: OK.

00:30:14.206 --> 00:30:14.680
Cool.

00:30:14.680 --> 00:30:16.450
ADE OSHINEYE: I do have
one question, Ian.

00:30:19.910 --> 00:30:21.700
We've got a very big
team now in Europe.

00:30:21.700 --> 00:30:22.360
There's four of us.

00:30:22.360 --> 00:30:24.690
So it's starting to
get confusing.

00:30:24.690 --> 00:30:26.260
So where did you get
those icons?

00:30:26.260 --> 00:30:27.070
IAN BARBER: Ah.

00:30:27.070 --> 00:30:28.570
The icons are--

00:30:28.570 --> 00:30:29.650
that's a very good point.

00:30:29.650 --> 00:30:31.150
I should have mentioned
that earlier.

00:30:31.150 --> 00:30:33.765
So these icons are actually
from a brilliant project

00:30:33.765 --> 00:30:38.140
called the Noun Project This is
a collection of a variety

00:30:38.140 --> 00:30:45.756
of useful and interesting icons
that have been released

00:30:45.756 --> 00:30:47.700
as Creative Commons.

00:30:47.700 --> 00:30:50.980
So you can go on there, and
as long as you give proper

00:30:50.980 --> 00:30:52.690
attribution to the creators,
you can use

00:30:52.690 --> 00:30:53.490
any of these icons.

00:30:53.490 --> 00:30:54.360
They've got a great search.

00:30:54.360 --> 00:30:57.350
And you'll find, in a lot of
cases, there's multiple

00:30:57.350 --> 00:30:58.550
variance for any given icon.

00:30:58.550 --> 00:31:02.040
So you can find one that really
sort of matches the

00:31:02.040 --> 00:31:05.795
style of your product, a
really great source for

00:31:05.795 --> 00:31:08.565
finding nice little icons
for scripting.

00:31:08.565 --> 00:31:10.300
ADE OSHINEYE: I do love
the bicycle one.

00:31:10.300 --> 00:31:12.082
I can see there's some really
interesting things you can do

00:31:12.082 --> 00:31:12.810
around that.

00:31:12.810 --> 00:31:15.080
IAN BARBER: It is fantastic.

00:31:15.080 --> 00:31:20.160
And I've definitely enjoyed
having access to all of those,

00:31:20.160 --> 00:31:23.640
including, of course, the
ever-important unicorn.

00:31:23.640 --> 00:31:26.030
ADE OSHINEYE: Yeah, so why did
you choose unicorns for this?

00:31:26.030 --> 00:31:28.010
IAN BARBER: He was the best icon
I could think of at the

00:31:28.010 --> 00:31:31.575
time with limited searching.

00:31:31.575 --> 00:31:34.550
SILVANO LUCIANI: So I have
another question actually,

00:31:34.550 --> 00:31:37.350
about you have a lot
of experience

00:31:37.350 --> 00:31:38.500
with different languages.

00:31:38.500 --> 00:31:42.390
And I'd like to hear after this
what you think about Go?

00:31:42.390 --> 00:31:44.840
What did you like about
writing in Go?

00:31:44.840 --> 00:31:47.540
If there's something
that was--

00:31:47.540 --> 00:31:50.050
IAN BARBER: I think Go
is-- it's strange.

00:31:50.050 --> 00:31:51.864
It's kind of different from
other languages that I've

00:31:51.864 --> 00:31:54.370
worked with more recently, where
a lot of the languages

00:31:54.370 --> 00:31:59.460
that I've tried more recently
have been pushing down certain

00:31:59.460 --> 00:32:03.540
paradigms around, say,
functional programming or

00:32:03.540 --> 00:32:05.850
extremely object-oriented
programming, and

00:32:05.850 --> 00:32:06.380
that kind of thing.

00:32:06.380 --> 00:32:09.320
I think Go is in many
ways is very simple.

00:32:09.320 --> 00:32:11.920
Its background as a systems
language has made it just

00:32:11.920 --> 00:32:14.334
incredibly easy to just
kind of write code and

00:32:14.334 --> 00:32:15.500
have it work well.

00:32:15.500 --> 00:32:17.890
In this case, I didn't need to
use any of the concurrency

00:32:17.890 --> 00:32:19.570
primitives and some
of the stuff that

00:32:19.570 --> 00:32:21.220
really makes Go different.

00:32:21.220 --> 00:32:26.330
But I found just as a language
that gives you that kind of C

00:32:26.330 --> 00:32:30.300
feel, but with pretty much none
of the pain that comes

00:32:30.300 --> 00:32:32.990
with C. I found it very
pleasant to work with.

00:32:32.990 --> 00:32:35.530
And the documentation
online is excellent.

00:32:35.530 --> 00:32:38.520
It is quite tricky to search
for it because the

00:32:38.520 --> 00:32:39.590
language is called Go.

00:32:39.590 --> 00:32:42.466
So if you search for Go and
almost anything, it's going to

00:32:42.466 --> 00:32:44.240
be difficult to find
a result there.

00:32:44.240 --> 00:32:47.140
But if you can get into the
documentation, which is just

00:32:47.140 --> 00:32:50.010
on Go line, it's really,
really good.

00:32:50.010 --> 00:32:52.748
And there's a great community
out there that have been very

00:32:52.748 --> 00:32:54.652
helpful when I've
had problems.

00:32:54.652 --> 00:32:56.320
SILVANO LUCIANI: Did
you have any other

00:32:56.320 --> 00:32:57.696
questions, Ade, for Ian?

00:32:57.696 --> 00:33:00.985
ADE OSHINEYE: No, I think this
pretty much covers it all.

00:33:00.985 --> 00:33:05.050
SILVANO LUCIANI: I am watching
our event, and I can't see any

00:33:05.050 --> 00:33:08.550
questions from external users.

00:33:08.550 --> 00:33:12.580
So I would like, Ian, would
you remind that we will

00:33:12.580 --> 00:33:13.730
publish this code?

00:33:13.730 --> 00:33:15.044
IAN BARBER: Yes.

00:33:15.044 --> 00:33:16.900
Yep, we'll put this up.

00:33:16.900 --> 00:33:20.170
We'll put the links up on
the page afterwards.

00:33:20.170 --> 00:33:22.650
But it'll be in the same
repository as all the other

00:33:22.650 --> 00:33:25.320
office hour samples
from previous

00:33:25.320 --> 00:33:27.180
weeks from the US variant.

00:33:27.180 --> 00:33:28.100
SILVANO LUCIANI: OK.

00:33:28.100 --> 00:33:31.685
And just another reminder is
that, as Ian mentioned and Ade

00:33:31.685 --> 00:33:35.470
as well, the Google+ History API
is in developer preview.

00:33:35.470 --> 00:33:39.300
So if you want to use the API
and see the user interface for

00:33:39.300 --> 00:33:42.770
the moments that Ian has shown
us, you need to sign up for

00:33:42.770 --> 00:33:43.500
the preview.

00:33:43.500 --> 00:33:44.710
And you can do it at
developers.googl

00:33:44.710 --> 00:33:51.150
e.com/plus/history/preview.

00:33:51.150 --> 00:33:51.690
Any--

00:33:51.690 --> 00:33:54.000
ADE OSHINEYE: I think that
pretty much covers it,

00:33:54.000 --> 00:33:57.380
although I would say, if you try
History, you should really

00:33:57.380 --> 00:33:58.760
play around with some
of the search stuff

00:33:58.760 --> 00:33:59.902
we've done with that.

00:33:59.902 --> 00:34:00.746
It's really quite clever.

00:34:00.746 --> 00:34:02.175
SILVANO LUCIANI: And
give us feedback.

00:34:02.175 --> 00:34:03.586
IAN BARBER: Absolutely.

00:34:03.586 --> 00:34:05.450
ADE OSHINEYE: And if you have
any questions, we have a

00:34:05.450 --> 00:34:06.673
mailing list.

00:34:06.673 --> 00:34:09.889
IAN BARBER: Yep, and Forums, and
Stack Overflow, and we're

00:34:09.889 --> 00:34:10.090
all over the place.

00:34:10.090 --> 00:34:11.219
ADE OSHINEYE: You can always
talk to us on Google+.

00:34:11.219 --> 00:34:12.199
IAN BARBER: And Google+.

00:34:12.199 --> 00:34:13.480
SILVANO LUCIANI: And
Office Hours.

00:34:13.480 --> 00:34:14.989
IAN BARBER: And Office Hours.

00:34:14.989 --> 00:34:18.850
SILVANO LUCIANI: So to
close, I'd like to

00:34:18.850 --> 00:34:21.600
say thanks for coming.

00:34:21.600 --> 00:34:22.770
Thanks for watching us.

00:34:22.770 --> 00:34:27.719
And thanks if you're watching
this recorded on YouTube.

00:34:27.719 --> 00:34:30.340
Next time, we will have
interacting guests.

00:34:30.340 --> 00:34:33.210
And next time it will be
probably two weeks from now.

00:34:33.210 --> 00:34:36.370
We are still trying
to determine

00:34:36.370 --> 00:34:37.690
which is the best schedule.

00:34:37.690 --> 00:34:41.650
So if you have any feedback
about airing time, the day,

00:34:41.650 --> 00:34:45.590
please let us know because
we will take it into

00:34:45.590 --> 00:34:48.620
consideration, because we are
trying, as I said, to see

00:34:48.620 --> 00:34:51.150
which is the best time
to premiere.

00:34:51.150 --> 00:34:53.690
And thanks, Ade.

00:34:53.690 --> 00:34:56.719
Thanks, Ian, for showing
your app.

00:34:56.719 --> 00:34:58.350
And see you in two weeks.

00:34:58.350 --> 00:34:58.910
IAN BARBER: Bye.

00:34:58.910 --> 00:35:00.160
ADE OSHINEYE: Bye.

