WEBVTT
Kind: captions
Language: en

00:00:00.800 --> 00:00:03.560
So your awesome mobile game
seems to be doing pretty well,

00:00:03.560 --> 00:00:06.040
but users are complaining
about load time.

00:00:06.040 --> 00:00:08.800
After some profiling, the
problem soon becomes clear.

00:00:08.800 --> 00:00:11.714
You're spending too much
time deserializing your data.

00:00:11.714 --> 00:00:14.130
My name is Colt McAnlis, and
we can make your data loading

00:00:14.130 --> 00:00:16.910
experience faster for
users and easier for you

00:00:16.910 --> 00:00:19.470
with the new
flatbuffers library.

00:00:19.470 --> 00:00:21.270
As you already know,
loading your content

00:00:21.270 --> 00:00:22.802
is a really gnarly process.

00:00:22.802 --> 00:00:25.260
All of the data that comes from
your content creation tools

00:00:25.260 --> 00:00:28.290
like physics, animations,
spreadsheet data,

00:00:28.290 --> 00:00:30.240
have to all be stored
in some sort of format

00:00:30.240 --> 00:00:32.950
that you can load into your
game and ship to customers.

00:00:32.950 --> 00:00:35.109
And this is even counting
the temporal stuff,

00:00:35.109 --> 00:00:37.400
like sending your game data
across a network connection

00:00:37.400 --> 00:00:39.840
or saving your game
to be reloaded later.

00:00:39.840 --> 00:00:42.390
Since this process is so
critical to game development,

00:00:42.390 --> 00:00:45.030
how do we go about optimizing
it for performance?

00:00:45.030 --> 00:00:47.030
To do that, let's go
back to the basics.

00:00:47.030 --> 00:00:50.520
Serialization is the process
of taking some in-memory data

00:00:50.520 --> 00:00:53.730
structure and converting it into
a data format which, one, can

00:00:53.730 --> 00:00:56.060
be converted back to
the in-memory structure

00:00:56.060 --> 00:00:58.680
at some point in the future
and, two, be somewhat

00:00:58.680 --> 00:01:02.070
compact in order to not
take up too much space.

00:01:02.070 --> 00:01:04.640
Now, some of the more popular
serialized formats out there

00:01:04.640 --> 00:01:08.330
are XML and JSON, mainly
because they are human readable.

00:01:08.330 --> 00:01:11.050
That is, you can actually open
these files into a text editor,

00:01:11.050 --> 00:01:13.133
poke around, make changes,
and actually understand

00:01:13.133 --> 00:01:13.910
what you're doing.

00:01:13.910 --> 00:01:16.520
And this popularity is further
extended with native support

00:01:16.520 --> 00:01:19.850
in languages like C#,
Java, and JavaScript.

00:01:19.850 --> 00:01:22.980
But in truth, these formats come
with some serious drawbacks.

00:01:22.980 --> 00:01:24.754
Firstly, they tend
to be bloated.

00:01:24.754 --> 00:01:26.670
The fact that these
formats are human readable

00:01:26.670 --> 00:01:29.111
means there's lots of
overly verbose syntax

00:01:29.111 --> 00:01:31.360
that's added to the format
for the ease of readability

00:01:31.360 --> 00:01:35.030
and use, making the file larger
than it actually needs to be.

00:01:35.030 --> 00:01:37.840
Secondly, the overly inflexible
nature of these formats

00:01:37.840 --> 00:01:41.150
puts an enormous strain on
the deserialization process.

00:01:41.150 --> 00:01:43.460
The parsing system has
to read in string data

00:01:43.460 --> 00:01:45.430
and then run analysis
on it in order

00:01:45.430 --> 00:01:48.130
to determine what data type
it is before converting it

00:01:48.130 --> 00:01:49.970
to that actual type in memory.

00:01:49.970 --> 00:01:52.010
And this gets worse when
your format supports

00:01:52.010 --> 00:01:56.310
more advanced types like GUIDs,
timestamps, and date objects.

00:01:56.310 --> 00:01:58.840
The result is a deserialization
process that's anything

00:01:58.840 --> 00:02:01.970
but fast once complexity
hits a certain level.

00:02:01.970 --> 00:02:04.680
To address these problems,
we've released a new open source

00:02:04.680 --> 00:02:06.920
tool for games
called flatbuffers.

00:02:06.920 --> 00:02:09.430
This library prides itself
going back to the basics

00:02:09.430 --> 00:02:12.220
for serialization, that
is, being fast for encoding

00:02:12.220 --> 00:02:14.590
and decoding while also
producing the smallest

00:02:14.590 --> 00:02:16.500
encoded file possible.

00:02:16.500 --> 00:02:18.310
Now, at a high
level, flatbuffers

00:02:18.310 --> 00:02:21.310
work by creating a file that
describes the data types to be

00:02:21.310 --> 00:02:23.620
serialized, called a
schema, and then this

00:02:23.620 --> 00:02:25.760
is handed over to a
syntax compiler that

00:02:25.760 --> 00:02:28.670
produces code files that you
can include in your application

00:02:28.670 --> 00:02:32.320
to encode and decode from the
formats that you've defined.

00:02:32.320 --> 00:02:34.690
Since your in-game structures
tend to be complex,

00:02:34.690 --> 00:02:37.250
the schema format that
you feed into the compiler

00:02:37.250 --> 00:02:39.660
allows you to describe
your data structures

00:02:39.660 --> 00:02:42.630
using type primitive relations,
for example, objects reusable

00:02:42.630 --> 00:02:45.490
classes, enums, and
very basic types.

00:02:45.490 --> 00:02:47.900
This layout allows
flatbuffers to be type safe,

00:02:47.900 --> 00:02:51.830
and further allows you to read
from the serialized data format

00:02:51.830 --> 00:02:54.080
without having to do any
type conversions, memory

00:02:54.080 --> 00:02:56.950
allocations, or unpacking
during load time, which

00:02:56.950 --> 00:02:58.889
is a huge speed boost.

00:02:58.889 --> 00:03:00.430
Once you've created
your schema files

00:03:00.430 --> 00:03:02.300
for all your
serializable data, you

00:03:02.300 --> 00:03:05.040
feed those schema files
into the flat C compiler

00:03:05.040 --> 00:03:07.579
to generate source code
files for your game.

00:03:07.579 --> 00:03:09.120
With the right
command line switches,

00:03:09.120 --> 00:03:11.680
you can either
generates C++, Java,

00:03:11.680 --> 00:03:15.340
or even Go code files that you
can drop right into your repo

00:03:15.340 --> 00:03:16.574
and compile against.

00:03:16.574 --> 00:03:19.240
Now, regardless of what language
you're actually programming in,

00:03:19.240 --> 00:03:22.050
using flatbuffers to load
data is pretty simplistic.

00:03:22.050 --> 00:03:23.750
Given your serialized
stream of bytes,

00:03:23.750 --> 00:03:25.515
pass it off to a
single line of code

00:03:25.515 --> 00:03:27.140
to convert it into
your desired object,

00:03:27.140 --> 00:03:29.990
and then you're ready
to start using it.

00:03:29.990 --> 00:03:32.977
Now, that's all fine and
dandy, but how fast is it?

00:03:32.977 --> 00:03:34.810
Let's take a look at
how flatbuffers compare

00:03:34.810 --> 00:03:38.240
to a few other options, namely
protocol buffers and JSON.

00:03:38.240 --> 00:03:41.280
We can see that with respect to
both decode and encode times,

00:03:41.280 --> 00:03:43.340
flatbuffers outperform
the other formats

00:03:43.340 --> 00:03:45.380
by a significant factor.

00:03:45.380 --> 00:03:47.970
In fact, when stacked
up side by side,

00:03:47.970 --> 00:03:50.140
you can't see the flatbuffers
time on the graph.

00:03:50.140 --> 00:03:51.330
Hmm.

00:03:51.330 --> 00:03:54.640
Now, just as important is the
encoded size of the test data.

00:03:54.640 --> 00:03:56.730
You can see that within
extremely fast encode

00:03:56.730 --> 00:03:59.230
and decode times
flatbuffers are minimal when

00:03:59.230 --> 00:04:01.850
it comes to both the
original size of data

00:04:01.850 --> 00:04:04.300
as well as the zlib
compressed versions.

00:04:04.300 --> 00:04:06.600
Oh, and one more thing.

00:04:06.600 --> 00:04:09.050
You know how when you change
the data formats of your game

00:04:09.050 --> 00:04:11.110
and it creates a
massive chaos vortex

00:04:11.110 --> 00:04:13.950
with older formats, live
builds, and compatibility?

00:04:13.950 --> 00:04:15.920
Flatbuffers don't
have that problem,

00:04:15.920 --> 00:04:18.540
as they provide functionality
to evolve your schemas

00:04:18.540 --> 00:04:21.010
without affecting compatibility
in older data and older

00:04:21.010 --> 00:04:23.730
programs, which is pretty
cool in my opinion.

00:04:23.730 --> 00:04:25.940
Of course, there's tons
of great other features

00:04:25.940 --> 00:04:27.297
in the projects left to explore.

00:04:27.297 --> 00:04:29.130
To learn more about the
flatbuffers library,

00:04:29.130 --> 00:04:31.690
or if you want more info on
what's going on under the hood,

00:04:31.690 --> 00:04:33.410
check out the
flatbuffers Docs page

00:04:33.410 --> 00:04:36.950
and then hop on over to grab
the code at our github repo.

00:04:36.950 --> 00:04:39.070
Serializing your data
shouldn't be a pain.

00:04:39.070 --> 00:04:42.900
Now go out there and
build better games.

00:04:42.900 --> 00:04:46.910
Better games-- did we
write that to rhyme?

