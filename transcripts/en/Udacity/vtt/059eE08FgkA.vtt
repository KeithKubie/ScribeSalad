WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:05.200
Let's look at this example of the 1 over 9 summation to be able to

00:00:05.200 --> 00:00:08.830
see now how we can generalize this mathematical formulation.

00:00:08.830 --> 00:00:13.390
So the general form of this equation here would be the following.

00:00:13.390 --> 00:00:17.970
So rather than just for the 3 and 3, for any part of the image, I want to

00:00:17.970 --> 00:00:23.850
basically have 1 over something which would be normalizing over this equation.

00:00:23.850 --> 00:00:24.860
So for example,

00:00:24.860 --> 00:00:29.950
in the instance where k is equal to 1, this would be 3, 1 over 3.

00:00:29.950 --> 00:00:31.900
That generalizes to that.

00:00:31.900 --> 00:00:33.560
And of course, what we're doing is sum,

00:00:33.560 --> 00:00:39.390
summing over the whole two dimensional region here.

00:00:39.390 --> 00:00:42.980
Now, of course, if you think about it, basically, this is my index.

00:00:42.980 --> 00:00:47.081
And if I'm moving in this direction here and also up above.

00:00:47.081 --> 00:00:51.485
This direction is minus u.

00:00:51.485 --> 00:00:54.630
This direction is positive u.

00:00:54.630 --> 00:00:57.480
This direction is positive v.

00:00:57.480 --> 00:00:59.870
This direction is negative v.

00:00:59.870 --> 00:01:02.770
So allowing this by just stepping through one by one,

00:01:02.770 --> 00:01:07.360
we can actually start with this, so the first term would be i plus u would be

00:01:07.360 --> 00:01:09.520
basically this element moved to this moved to this,

00:01:09.520 --> 00:01:12.710
depending on how we loop over a two dimensional array like this,

00:01:12.710 --> 00:01:17.460
we'd be able to actually now accomplish something very similar to this.

00:01:17.460 --> 00:01:20.030
So, in essence, this is basically allowing to

00:01:20.030 --> 00:01:25.190
us to loop over all pixels in the neighborhood around image pixel F i,j.

00:01:25.190 --> 00:01:30.950
This basically is an attribute uniform attribute uniform weight on each pixel.

00:01:30.950 --> 00:01:33.950
Basically, this allows us to do normalization like the way I did for

00:01:33.950 --> 00:01:35.240
here for 1 over 9.

00:01:35.240 --> 00:01:37.910
The same equation, remember from last time, we want actually to have

00:01:37.910 --> 00:01:41.950
the more general form, where basically we no longer doing the averaging, but

00:01:41.950 --> 00:01:45.520
a general form of the filter would be actually this equation, right?

00:01:45.520 --> 00:01:47.880
Where we have basically taken the lower case a and

00:01:47.880 --> 00:01:52.100
the upper case A for the, for the, again, the third element.

00:01:52.100 --> 00:01:55.360
Generalizing this, we get this formulation,

00:01:55.360 --> 00:02:00.000
again going from minus k to plus k in both u and v directions.

00:02:00.000 --> 00:02:03.960
We have actually now done is, we've moved this part,

00:02:03.960 --> 00:02:07.020
which was the attribute weights inside, so

00:02:07.020 --> 00:02:11.580
it actually also now depends on how things could change as we move around.

00:02:11.580 --> 00:02:14.010
And the same equation or the same terminology is right there.

00:02:14.010 --> 00:02:17.730
So this is now basically a most general form of what we

00:02:17.730 --> 00:02:21.050
want to actually do in trying to do simple filtering.

00:02:21.050 --> 00:02:24.548
So in this instance, this is the attribute, but it's the same as

00:02:24.548 --> 00:02:29.890
non-uniform weights, because it does depend on where I am even inside this.

00:02:29.890 --> 00:02:33.250
Remember, in the case where we did this, all of the values were the same.

00:02:33.250 --> 00:02:35.190
In this case, they may not be.

00:02:35.190 --> 00:02:37.220
And of course, the same thing is still true for

00:02:37.220 --> 00:02:40.220
how we loop over both the matrices.

00:02:40.220 --> 00:02:43.330
This whole process is referred to as cross correlation,

00:02:43.330 --> 00:02:47.145
sometimes also referred to or written as X-correlation.

00:02:48.390 --> 00:02:51.320
And it's something we will actually cover a little bit more in detail in

00:02:51.320 --> 00:02:51.980
the next lecture.

