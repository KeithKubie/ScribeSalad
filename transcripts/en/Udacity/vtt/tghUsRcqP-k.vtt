WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:03.510
Now, low let's put Lamport's clock to work

00:00:03.510 --> 00:00:08.740
for implementing a distributed mutual exclusion lock algorithm, and

00:00:08.740 --> 00:00:10.360
it is going to be very similar to

00:00:10.360 --> 00:00:12.930
the car-sharing example that I showed you before. And

00:00:12.930 --> 00:00:16.270
also, you will notice that we've talked about

00:00:16.270 --> 00:00:20.090
locks in a shared memory multiprocessor where we have

00:00:20.090 --> 00:00:23.770
shared memory to implement the lock. But now,

00:00:23.770 --> 00:00:26.510
in a distributed system, we don't have shared memory.

00:00:26.510 --> 00:00:28.850
And we have to implement a mutual exclusion

00:00:28.850 --> 00:00:33.160
lock using Lamport's Logical Clock. So, essentially what is

00:00:33.160 --> 00:00:36.340
going to happen is that any Process that

00:00:36.340 --> 00:00:38.820
needs to acquire this lock is going to send

00:00:38.820 --> 00:00:41.090
the message to all the Processes. And of

00:00:41.090 --> 00:00:43.090
course the intent to get a lock may, may

00:00:43.090 --> 00:00:47.780
emanate simultaneously from several processes. That's perfectly feasible.

00:00:47.780 --> 00:00:51.710
So the algorithm is as follows. Every process has

00:00:51.710 --> 00:00:54.464
a data structure, a queue data structure. And those

00:00:54.464 --> 00:00:57.390
are the queue's that are associated with process P1. This

00:00:57.390 --> 00:00:59.860
is the queue that is associated with process P2. And

00:00:59.860 --> 00:01:02.470
this is the queue that is asssociated with process Pn.

00:01:02.470 --> 00:01:06.218
Every process has its own private queue. And the private

00:01:06.218 --> 00:01:10.550
queue is ordered by the happened-before relationship that we have

00:01:10.550 --> 00:01:13.510
discussed so far. So requests for a lock are going

00:01:13.510 --> 00:01:16.860
to be time stamped and the protocol is as follows.

00:01:16.860 --> 00:01:20.580
To request a lock, what a process is going to

00:01:20.580 --> 00:01:23.300
do is send a message to all the other

00:01:23.300 --> 00:01:26.960
Processes that I want this lock and my time

00:01:26.960 --> 00:01:29.770
stamp is such and so. So it's going to associate the

00:01:29.770 --> 00:01:32.929
local timestamp that it has from its counter, which

00:01:32.929 --> 00:01:37.390
is its logical timestamp. It's going to associate that timestamp

00:01:37.390 --> 00:01:39.470
as the request time for the lock and send

00:01:39.470 --> 00:01:42.030
the message to all its peers. And all the peers,

00:01:42.030 --> 00:01:44.520
what are they going to do? Well, two things.

00:01:44.520 --> 00:01:46.960
One is they're going to stick that request into the

00:01:46.960 --> 00:01:50.520
local queue. When a request comes from process Pn,

00:01:50.520 --> 00:01:54.290
P1 puts it into its queue, appropriate place in

00:01:54.290 --> 00:01:55.890
the queue, because it is ordered by the

00:01:55.890 --> 00:02:00.160
timestamp. The smallest time stamp being the highest priority

00:02:00.160 --> 00:02:04.140
request pending. So it puts it in its queue.

00:02:04.140 --> 00:02:07.720
And the second thing it does is every process,

00:02:07.720 --> 00:02:09.750
when it gets a request, puts it in its

00:02:09.750 --> 00:02:13.970
queue and then acknowledges the request to its peers. So

00:02:13.970 --> 00:02:18.230
let's look at the process P2 here and P2 generated

00:02:18.230 --> 00:02:21.670
it's request at timestamp 10. What it did was first

00:02:21.670 --> 00:02:25.220
put its request in its local queue and then it

00:02:25.220 --> 00:02:28.450
sends a message to its peers. And these guys, when

00:02:28.450 --> 00:02:31.155
they get the request, they look at their own local

00:02:31.155 --> 00:02:33.080
queue and say well you know there is a request

00:02:33.080 --> 00:02:35.870
pending In my queue, which has a time stamp

00:02:35.870 --> 00:02:38.380
of 5, and this request that I just got from

00:02:38.380 --> 00:02:41.540
P2 has a time stamp of 10, so I'm going to

00:02:41.540 --> 00:02:44.625
order that behind the previous request. I put it over

00:02:44.625 --> 00:02:47.030
here. I put it over here and once I

00:02:47.030 --> 00:02:50.440
do that I'm going to acknowledge this request by sending a

00:02:50.440 --> 00:02:53.850
message back to P2. And similarly this guy sends an

00:02:53.850 --> 00:02:58.720
acknowledgement back to P2. So that's how the protocol works.

00:02:58.720 --> 00:03:02.120
Every request is sent to all the other processors

00:03:02.120 --> 00:03:05.740
and every process when it receives a request, it

00:03:05.740 --> 00:03:09.230
puts it ordered by Lamport's clock in its own

00:03:09.230 --> 00:03:12.570
local queue. And then acknowledges the request with an

00:03:12.570 --> 00:03:15.380
act message. Now, what happens when there is a

00:03:15.380 --> 00:03:17.620
tie? Well, when we have a tie, we break

00:03:17.620 --> 00:03:21.780
the tie by giving priority to the process that

00:03:21.780 --> 00:03:24.120
has a lower process ID so that's how this

00:03:24.120 --> 00:03:28.260
algorithm works, so that every process can unambiguously make

00:03:28.260 --> 00:03:31.240
a decision as to where to place an incoming

00:03:31.240 --> 00:03:33.780
request in the queue. So an example of the

00:03:33.780 --> 00:03:36.500
state of the queue is as shown. The thing that

00:03:36.500 --> 00:03:38.470
should jump out at you immediately is that the

00:03:38.470 --> 00:03:40.570
state of the queue is not the same in

00:03:40.570 --> 00:03:45.700
all the processes. For instance Process 1's queue contains

00:03:45.700 --> 00:03:49.630
its request that it generated at time 2, but I

00:03:49.630 --> 00:03:52.670
don't see it yet in the other queues. Is this

00:03:52.670 --> 00:03:56.370
possible that the queue can be inconsistent with one another?

00:03:56.370 --> 00:03:59.060
Of course it is possible. The reason it is possible

00:03:59.060 --> 00:04:03.210
is because a Process, when it generates a request, puts it

00:04:03.210 --> 00:04:05.980
in it's queue and then sends a message out. This

00:04:05.980 --> 00:04:08.080
message is going to take some time to reach the other

00:04:08.080 --> 00:04:11.030
nodes in the distributed system. So, it sent the message

00:04:11.030 --> 00:04:14.710
and after it sent the message it got requests from other

00:04:14.710 --> 00:04:17.970
Processes and it has put it in its queue.

00:04:17.970 --> 00:04:21.089
And it is possible that this message, all the messages

00:04:21.089 --> 00:04:22.590
may not take the same amount of time to

00:04:22.590 --> 00:04:24.800
traverse a network. We have no idea what's going on

00:04:24.800 --> 00:04:29.850
in the network and therefore it so happens that P1's message is

00:04:29.850 --> 00:04:34.990
still in transit. Whereas the request messages from P2 and Pn

00:04:34.990 --> 00:04:39.810
have already made it everywhere, and it is in the queues of all the Processes,

00:04:39.810 --> 00:04:43.570
but P1's message unfortunately, it's taking a

00:04:43.570 --> 00:04:46.040
slow route throught the network and it is

00:04:46.040 --> 00:04:48.650
still in transit. And in fact, P1 has

00:04:48.650 --> 00:04:53.160
subsequently received P2's and PN's message and put

00:04:53.160 --> 00:04:55.770
them into its its local queue. It is

00:04:55.770 --> 00:04:58.910
just that P1's message hasn't reached its peers

00:04:58.910 --> 00:05:01.640
yet and that's how you get this situation.

00:05:01.640 --> 00:05:04.870
So the whole purpose of this exercise is

00:05:04.870 --> 00:05:09.020
to unambiguously get the mutual exclusion lock for some

00:05:09.020 --> 00:05:12.350
process that is competing for it simultaneously. Now how does

00:05:12.350 --> 00:05:16.250
a process know that it has the lock? So I

00:05:16.250 --> 00:05:18.800
have to make the decision that I have the lock.

00:05:18.800 --> 00:05:20.900
How do I make that decision? Two things have

00:05:20.900 --> 00:05:24.860
to be true for me to think that I have

00:05:24.860 --> 00:05:28.050
gotten the lock. So the first thing is that my

00:05:28.050 --> 00:05:30.450
request has to be at the top of the queue.

00:05:30.450 --> 00:05:36.060
So now you see the messages that I talked about, that is P1's message to P2

00:05:36.060 --> 00:05:40.840
and Pn not having reached the destination, eventually

00:05:40.840 --> 00:05:43.850
they reach the destination. And they have acknowledged

00:05:43.850 --> 00:05:49.520
it. And, as a result of that the queues are consistent now. P1's request is at

00:05:49.520 --> 00:05:52.470
the top and it also has received acknowledgements

00:05:52.470 --> 00:05:55.450
from everybody else. So the way you can

00:05:55.450 --> 00:05:58.710
make a decision that you have the lock,

00:05:58.710 --> 00:06:02.320
unambiguously, in the entire distributed system. Two conditions. First

00:06:02.320 --> 00:06:05.130
thing, my request is at the top of the

00:06:05.130 --> 00:06:09.130
queue. The second thing is I've received acknowledgments from

00:06:09.130 --> 00:06:11.970
all the other nodes in the system. In this

00:06:11.970 --> 00:06:15.170
case, all the other nodes were not requesting this

00:06:15.170 --> 00:06:18.160
lock so they've sent me acknowledgments. And I've received

00:06:18.160 --> 00:06:20.470
all the acknowledgements and there is no other request

00:06:20.470 --> 00:06:23.340
that is ahead of me. I've also received lock requests

00:06:23.340 --> 00:06:27.430
from P2 and Pn and they are later than mine and

00:06:27.430 --> 00:06:30.100
that's how they've been ordered in the queue. So the two

00:06:30.100 --> 00:06:33.570
conditions I'm going to look for to make a decision locally

00:06:33.570 --> 00:06:36.250
that I have the lock is my request is at the

00:06:36.250 --> 00:06:40.080
top of the queue and I've either received acknowledgements from all

00:06:40.080 --> 00:06:42.720
the other nodes in the system, if nobody else is competing

00:06:42.720 --> 00:06:46.040
for the lock at the same time, or all the requests

00:06:46.040 --> 00:06:48.770
that I've gotten so far are later than

00:06:48.770 --> 00:06:51.700
my own lock request. Let's say that I haven't

00:06:51.700 --> 00:06:56.510
received the acknowledgement for my request from Q, Q2,

00:06:56.510 --> 00:06:58.650
and Qn. Can I go ahead and assume I

00:06:58.650 --> 00:07:02.800
have the lock? Yes, I can. Why? Because Even

00:07:02.800 --> 00:07:04.950
though these guys have not sent me the acknowledgment

00:07:04.950 --> 00:07:08.595
yet, it's coming, slowly coming. But I've received lock

00:07:08.595 --> 00:07:13.290
requests from them, with timestamps 5 and 10 respectively.

00:07:13.290 --> 00:07:21.510
Therefore I can make an unambiguous decision that my lock request precedes all

00:07:21.510 --> 00:07:25.900
the other lock requests at this point of time. And I can go ahead and get the

00:07:25.900 --> 00:07:27.690
lock. I'm sure you've figured it our

00:07:27.690 --> 00:07:32.090
already but since we are following Lamport's cCock

00:07:32.090 --> 00:07:35.600
in implementing this mutual execution lock algorithm,

00:07:35.600 --> 00:07:38.390
the ACK message for a particular lock request

00:07:38.390 --> 00:07:42.760
is going to have a later timestamp than the time stamp associated with the

00:07:42.760 --> 00:07:46.335
request itself. So you can see that

00:07:46.335 --> 00:07:51.690
Lamport's Logical Clock, with the addition of

00:07:51.690 --> 00:07:56.610
a way of deriving a total order from the partial orders given by the Lamport's

00:07:56.610 --> 00:08:03.440
clock, allows us to unambiguously make a decision locally based on the state

00:08:03.440 --> 00:08:08.250
of local queue as to whether I have the lock or not.

00:08:08.250 --> 00:08:12.810
Now let's talk about how I go about releasing the lock. So if

00:08:12.810 --> 00:08:15.590
I have the lock. I have used it for a while and

00:08:15.590 --> 00:08:17.530
now I am ready to say, well I am done with a lock,

00:08:17.530 --> 00:08:20.210
I can release it. What do I do? Well I am going to

00:08:20.210 --> 00:08:23.510
send an unlock message to all the other guys. The first thing that

00:08:23.510 --> 00:08:25.800
I do, of course, is get rid of the entry that I have

00:08:25.800 --> 00:08:28.650
in my queue because I am done with the lock. I can remove

00:08:28.650 --> 00:08:30.660
it from my queue. Once I remove it from

00:08:30.660 --> 00:08:33.250
my queue I am going to send an unlock message

00:08:33.250 --> 00:08:35.710
to everybody else. So the state of the queue

00:08:35.710 --> 00:08:38.760
indicates that the unlocked message hasn't reached yet. It is

00:08:38.760 --> 00:08:40.919
in transit. It is going to eventually reach these

00:08:40.919 --> 00:08:45.280
guys. And when the peers receive the unlocked message they're

00:08:45.280 --> 00:08:50.360
going to basically remove the entry, the corresponding entry, from

00:08:50.360 --> 00:08:53.750
the respective queues. So P1's turn with using the lock

00:08:53.750 --> 00:08:57.030
is complete now. It has done its lock and has done its unlock and

00:08:57.030 --> 00:09:01.120
now other Processes in the system, if they're competing for the same lock, can

00:09:01.120 --> 00:09:06.450
use the same decision making process to figure out whether they are the winners

00:09:06.450 --> 00:09:08.850
for getting the lock next and using

00:09:08.850 --> 00:09:11.090
it and entering the respective critical sections.

