WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:03.420
Until now we haven't really done anything about over plotting.

00:00:03.420 --> 00:00:06.390
That's when multiple points take on the same value. This is

00:00:06.390 --> 00:00:09.060
often due to rounding. So let's look at this by

00:00:09.060 --> 00:00:12.200
running some code. We're going to run the table command on both

00:00:12.200 --> 00:00:16.070
carat, and price. Then we're going to sort that so that

00:00:16.070 --> 00:00:19.150
the highest values appear first. We're just going to look at the

00:00:19.150 --> 00:00:22.380
top six which is the default for the head function.

00:00:22.380 --> 00:00:25.790
Of course, what's happening here is that the first line is

00:00:25.790 --> 00:00:29.620
the price or the carat, and the second line

00:00:29.620 --> 00:00:32.619
is the count for each one of these values. We

00:00:32.619 --> 00:00:35.140
can see that these are really high numbers which is

00:00:35.140 --> 00:00:38.590
going to result in a substantial amount of overplotting. When you

00:00:38.590 --> 00:00:42.600
have this much data, you're going to have serious overplotting, even

00:00:42.600 --> 00:00:44.840
when you're plotting the variables against each other, and this

00:00:44.840 --> 00:00:47.620
can really obscure some of the density and the sparsity

00:00:47.620 --> 00:00:50.840
of our data. Really key points. Okay, so as we

00:00:50.840 --> 00:00:53.630
discussed in lesson four, you can deal with this by

00:00:53.630 --> 00:00:56.530
making your points smaller by jittering your points and by

00:00:56.530 --> 00:00:59.830
adding transparency. In gg plot, this is done with the

00:00:59.830 --> 00:01:02.980
alpha parameter. In the next coding exercise, you'll do just that.

