WEBVTT
Kind: captions
Language: en

00:00:00.375 --> 00:00:03.540
The ListView starts by requesting a view
for every visible item,

00:00:03.540 --> 00:00:06.240
however many you can fit onto the screen.

00:00:06.240 --> 00:00:09.726
It'll also create a couple in either
direction to make sure we can scroll

00:00:09.726 --> 00:00:13.032
without seeing a flicker
as a new view is created and populated.

00:00:13.032 --> 00:00:15.448
Then it creates new items just in time.

00:00:15.448 --> 00:00:17.844
So it's next in line
to be visible to the user.

00:00:17.844 --> 00:00:20.550
So if the user never scrolls
to the bottom of the list,

00:00:20.550 --> 00:00:23.620
the ListView will never request
that view from the adapter.

00:00:23.620 --> 00:00:25.490
But this is really just a half measure.

00:00:25.490 --> 00:00:27.506
As you can see,
if the user keeps scrolling,

00:00:27.506 --> 00:00:29.752
we could potentially
just keep adding new views,

00:00:29.752 --> 00:00:32.520
even if they disappear
off the top of the screen.

00:00:32.520 --> 00:00:35.043
Eventually that's going to lead
to the same impact in memory use

00:00:35.043 --> 00:00:37.598
and performance as if we had
just created all of these views

00:00:37.598 --> 00:00:39.233
directly at the beginning.

00:00:39.233 --> 00:00:42.880
The solution is recycling each view
as it scrolls off the screen,

00:00:42.880 --> 00:00:45.950
allowing it to be reused
when we need to show another item

00:00:45.950 --> 00:00:48.390
as it moves into view at the top or bottom.

00:00:48.390 --> 00:00:51.000
So rather than having to create
and then hold in memory

00:00:51.000 --> 00:00:53.560
each item of the list
as it comes into view,

00:00:53.560 --> 00:00:57.130
we only need to do the creation step
for the number of visible items

00:00:57.130 --> 00:00:59.190
and a couple on either side.

00:00:59.190 --> 00:01:01.930
Then, whenever a new list item
comes into view,

00:01:01.930 --> 00:01:05.473
we just update the data displayed
in one of our items in our recycle bin.

00:01:06.033 --> 00:01:07.066
The result?

00:01:07.066 --> 00:01:10.184
Less memory overhead, smoother scrolling
and less view management

00:01:10.184 --> 00:01:11.882
you have to do yourself.

00:01:11.882 --> 00:01:14.160
This same recycling behavior is implemented

00:01:14.160 --> 00:01:19.150
across all AdapterView descended classes,
such as GridView and ListView,

00:01:19.150 --> 00:01:21.830
which also introduces the reason
that the adapter isn't built

00:01:21.830 --> 00:01:24.370
directly into these controls themself.

00:01:24.370 --> 00:01:25.846
By keeping them separate,

00:01:25.846 --> 00:01:30.022
your adapter defines how to display
each element of the underlying data,

00:01:30.022 --> 00:01:32.600
while the adapter view
implementation itself

00:01:32.600 --> 00:01:36.580
is responsible for controlling
how each of these elements is laid out.

00:01:36.580 --> 00:01:40.200
Be it a list or a grid
in these particular instances.

