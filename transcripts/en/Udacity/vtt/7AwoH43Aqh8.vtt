WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.650
One challenge is that, there's a large volume of

00:00:02.650 --> 00:00:06.050
data. Each sample, is a sound or an image

00:00:06.050 --> 00:00:09.380
and there are many samples per second. Sometimes because

00:00:09.380 --> 00:00:12.380
of the way data is compressed, the volume of

00:00:12.380 --> 00:00:15.520
data that's being sent may vary over time. In

00:00:15.520 --> 00:00:17.660
particular the data may not be set at a

00:00:17.660 --> 00:00:22.070
constant rate. But in streaming, we want smooth playout.

00:00:22.070 --> 00:00:26.060
So the variable volume of data can pose challenges.

00:00:26.060 --> 00:00:28.560
Users typically have a very low tolerance

00:00:28.560 --> 00:00:32.460
for delay variation. Once playout of a video

00:00:32.460 --> 00:00:34.470
starts for example, you want that video

00:00:34.470 --> 00:00:37.240
to keep playing. It's very annoying if once

00:00:37.240 --> 00:00:39.790
you've started playing, that the video stops.

00:00:39.790 --> 00:00:42.050
The users might have a low tolerance for

00:00:42.050 --> 00:00:46.090
delay period. So in cases like games or

00:00:46.090 --> 00:00:50.670
Voice over IP, delay is typically just unacceptable.

00:00:50.670 --> 00:00:56.400
Although users can tolerate some loss. Before we get into how the network solves

00:00:56.400 --> 00:01:00.940
these challenges. Let's talk a little bit about digitizing audio and video.

