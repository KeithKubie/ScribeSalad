WEBVTT
Kind: captions
Language: en

00:00:04.284 --> 00:00:05.720
SVETOSLAV GANOV: Hey, everyone.

00:00:05.720 --> 00:00:06.850
My name is Svet Ganov.

00:00:06.850 --> 00:00:09.190
I work on the Android
framework team.

00:00:09.190 --> 00:00:12.000
And I'll be talking about
Android printing, how

00:00:12.000 --> 00:00:14.090
Android puts pixels on paper.

00:00:14.090 --> 00:00:16.480
I'll be giving the talk
with Philip, my colleague.

00:00:16.480 --> 00:00:17.970
He's going to join
us a bit later

00:00:17.970 --> 00:00:22.300
to talk about some more things.

00:00:22.300 --> 00:00:26.400
So you're probably
already asking yourself

00:00:26.400 --> 00:00:28.770
why printing matters in mobile.

00:00:28.770 --> 00:00:30.850
How is it important?

00:00:30.850 --> 00:00:32.950
Everything is in
the cloud, you don't

00:00:32.950 --> 00:00:36.150
need to put physical paper,
it's outdated technology.

00:00:36.150 --> 00:00:37.970
Well, it turns out
that the main reason

00:00:37.970 --> 00:00:40.370
you want to have this
printing to your applications

00:00:40.370 --> 00:00:42.800
is because your users want it.

00:00:42.800 --> 00:00:46.870
So there are some studies that
show that 95% of the consumers

00:00:46.870 --> 00:00:50.120
and 67% of the
corporate users want

00:00:50.120 --> 00:00:53.080
to be able to print from mobile
applications, which is a pretty

00:00:53.080 --> 00:00:55.250
strong signal that
printing is useful,

00:00:55.250 --> 00:00:58.040
even for mobile devices.

00:00:58.040 --> 00:01:02.160
Also, some developers have seen
that incorporating printing

00:01:02.160 --> 00:01:05.280
into their app, they
get better retention.

00:01:05.280 --> 00:01:08.430
They have higher probability
of in-app purchases

00:01:08.430 --> 00:01:13.640
and the engagement of
the users is higher.

00:01:13.640 --> 00:01:16.010
These are all great
examples, but I also

00:01:16.010 --> 00:01:18.080
want to share some of
my personal experiences

00:01:18.080 --> 00:01:20.740
in why printing from
mobile is important for me

00:01:20.740 --> 00:01:22.370
and how it helped me.

00:01:22.370 --> 00:01:24.770
For example, I'm always
late for the airport,

00:01:24.770 --> 00:01:27.110
always at the last
minute, always running.

00:01:27.110 --> 00:01:30.340
So what I usually do is
I login on my device,

00:01:30.340 --> 00:01:34.210
I check-in, I print my boarding
pass, I run to the airport.

00:01:34.210 --> 00:01:37.810
Because if my phone dies
when I'm checking in,

00:01:37.810 --> 00:01:40.390
I have to go in line again,
and I'm going to miss my plane.

00:01:40.390 --> 00:01:42.540
So it's really,
really useful to be

00:01:42.540 --> 00:01:44.240
able to print from
mobile for me.

00:01:44.240 --> 00:01:48.770
Another use case that's
really important for me was I

00:01:48.770 --> 00:01:50.320
was recently
refinancing my house,

00:01:50.320 --> 00:01:53.700
and my broker is always sending
me one more thing to sign.

00:01:53.700 --> 00:01:54.555
It's very important.

00:01:54.555 --> 00:01:56.450
It has to be done now,
and of course, it's

00:01:56.450 --> 00:01:59.960
in the worst time when you don't
have a computer next to you.

00:01:59.960 --> 00:02:03.190
But we have printers
all over campus,

00:02:03.190 --> 00:02:06.950
so I'm able to literally take my
phone out, print to the closest

00:02:06.950 --> 00:02:11.820
printer, sign the paperwork,
take a photo, and send it.

00:02:11.820 --> 00:02:14.940
So it was very, very useful.

00:02:14.940 --> 00:02:18.090
And speaking about
corporate environments,

00:02:18.090 --> 00:02:20.630
corporate printers,
more and more companies

00:02:20.630 --> 00:02:23.120
have the policy of
bringing your own device.

00:02:23.120 --> 00:02:26.050
And so in the
corporate environment,

00:02:26.050 --> 00:02:28.890
printing is definitely
much more important

00:02:28.890 --> 00:02:30.880
than your personal
everyday life.

00:02:30.880 --> 00:02:32.670
So I think printing
to your applications

00:02:32.670 --> 00:02:34.960
is definitely adding
more value to the user,

00:02:34.960 --> 00:02:37.690
especially in
corporate environments.

00:02:37.690 --> 00:02:41.750
So if you remember,
printing on desktop,

00:02:41.750 --> 00:02:43.930
it's really, really
frustrating to set it up.

00:02:43.930 --> 00:02:45.305
Where in the first
time, you have

00:02:45.305 --> 00:02:48.340
to download the right driver
from the right manufacturers,

00:02:48.340 --> 00:02:49.850
it should be for
the right model,

00:02:49.850 --> 00:02:51.224
and if you want
to do it quickly,

00:02:51.224 --> 00:02:53.450
you've got a really
frustrating experience.

00:02:53.450 --> 00:02:55.140
We just didn't
want to-- we wanted

00:02:55.140 --> 00:03:00.620
to not make the same mistakes,
if you want to say that.

00:03:00.620 --> 00:03:04.050
But try something else
instead, in mobile.

00:03:04.050 --> 00:03:06.810
And we are working with
the printing industry

00:03:06.810 --> 00:03:13.530
to come up with a standard
that will work with printers

00:03:13.530 --> 00:03:15.060
from all manufacturers.

00:03:15.060 --> 00:03:19.590
So all big manufacturers are
members of the Mopria Alliance.

00:03:19.590 --> 00:03:21.502
You can see all
the familiar names

00:03:21.502 --> 00:03:23.460
that probably you have
printer at home from one

00:03:23.460 --> 00:03:25.140
of these manufacturers.

00:03:25.140 --> 00:03:26.960
So they came to
us and they said,

00:03:26.960 --> 00:03:28.760
hey, we want to work
with you together

00:03:28.760 --> 00:03:32.490
to make printing much easier
for the user, easier to set up,

00:03:32.490 --> 00:03:34.730
having a single
piece of software

00:03:34.730 --> 00:03:37.655
that can talk to printers from
every different manufacturer.

00:03:37.655 --> 00:03:39.030
So the user doesn't
have to worry

00:03:39.030 --> 00:03:41.846
about setting up their devices.

00:03:41.846 --> 00:03:43.220
We also have
members from Mopria,

00:03:43.220 --> 00:03:45.220
so they'll join us
for Q&amp;A at the end,

00:03:45.220 --> 00:03:50.740
and you'll have an opportunity
to touch base with them.

00:03:50.740 --> 00:03:53.800
So I'll be talking about
the Android Print APIs.

00:03:53.800 --> 00:03:55.420
But before diving
into that, I want

00:03:55.420 --> 00:03:57.920
to give you a very, very brief
review of the Android print

00:03:57.920 --> 00:04:00.000
architecture.

00:04:00.000 --> 00:04:04.810
So in mobile, the question
of what printers do you have,

00:04:04.810 --> 00:04:06.280
doesn't really make much sense.

00:04:06.280 --> 00:04:08.470
The real question
is, how many printers

00:04:08.470 --> 00:04:10.330
can you find in my
current context--

00:04:10.330 --> 00:04:11.960
in my current environment.

00:04:11.960 --> 00:04:14.790
So the way Android printer works
is that you have applications

00:04:14.790 --> 00:04:17.820
that want to print, which
is what you guys work on,

00:04:17.820 --> 00:04:19.959
that use the print API.

00:04:19.959 --> 00:04:21.180
You have print services.

00:04:21.180 --> 00:04:23.420
So these are the
drivers, if you want

00:04:23.420 --> 00:04:26.010
to think of them as drivers.

00:04:26.010 --> 00:04:30.210
So this is what our friends
from Mopria are working on.

00:04:30.210 --> 00:04:32.860
And you have the system, which
is the print manager that's

00:04:32.860 --> 00:04:36.439
the main centralized brain
that connects all the dots.

00:04:36.439 --> 00:04:37.730
And you have the print spooler.

00:04:37.730 --> 00:04:40.320
The print spooler is just
a part that shows the UI,

00:04:40.320 --> 00:04:45.220
shows notifications, shows
you the current print jobs,

00:04:45.220 --> 00:04:49.410
and manages the
current print jobs.

00:04:49.410 --> 00:04:52.530
So that's a high-level
architecture for Android.

00:04:52.530 --> 00:04:54.140
We don't go into much details.

00:04:54.140 --> 00:04:56.262
I'll go straight to the APIs.

00:04:56.262 --> 00:04:57.970
The main thing I want
to show is how easy

00:04:57.970 --> 00:05:01.620
it is to print from your app.

00:05:01.620 --> 00:05:03.976
So how do you print
from an application?

00:05:03.976 --> 00:05:05.350
The first thing
you need to do is

00:05:05.350 --> 00:05:06.808
to get a hold of
the print manager.

00:05:06.808 --> 00:05:10.400
So there's an entry point
for the print framework.

00:05:10.400 --> 00:05:13.020
It's very similar to how you get
the package manager, activity

00:05:13.020 --> 00:05:16.460
manager-- it's very standard
way of getting an Android

00:05:16.460 --> 00:05:18.007
standard service.

00:05:18.007 --> 00:05:20.090
Once you get the print
manager, all you have to do

00:05:20.090 --> 00:05:23.020
is call the print method.

00:05:23.020 --> 00:05:26.000
You pass the print job name
and you pass a print document

00:05:26.000 --> 00:05:27.240
adapter.

00:05:27.240 --> 00:05:29.800
So the print document adapter
is the important part here.

00:05:29.800 --> 00:05:35.290
So that's a piece of
software that generates PDF

00:05:35.290 --> 00:05:38.760
based on what user
selected in the UI,

00:05:38.760 --> 00:05:41.680
such that it can produce
the printed content.

00:05:47.350 --> 00:05:49.250
So before I
actually-- before I go

00:05:49.250 --> 00:05:51.870
into the details of how you
write the print document

00:05:51.870 --> 00:05:54.730
adapter, I want
to briefly explain

00:05:54.730 --> 00:05:58.280
how it was a philosophy
of printing on Android.

00:05:58.280 --> 00:06:00.350
So when you print
we-- the application

00:06:00.350 --> 00:06:03.440
calls into the system and
says hey, I want to print.

00:06:03.440 --> 00:06:05.470
And this is where a
collaborative process

00:06:05.470 --> 00:06:07.430
starts between the system
and the application

00:06:07.430 --> 00:06:11.130
to generate the content based
on the user constraints.

00:06:11.130 --> 00:06:12.820
So what I mean by
that is, for example,

00:06:12.820 --> 00:06:15.690
user changes the paper size.

00:06:15.690 --> 00:06:17.760
So if the paper
size is different,

00:06:17.760 --> 00:06:19.820
maybe your application
wants to do

00:06:19.820 --> 00:06:22.210
a layout of two columns
instead of one column

00:06:22.210 --> 00:06:24.750
because you have more space.

00:06:24.750 --> 00:06:28.250
Basically, we want to propagate
all the constraints, everything

00:06:28.250 --> 00:06:31.000
the user has selected,
to the application.

00:06:31.000 --> 00:06:32.940
So the application is
in the best position

00:06:32.940 --> 00:06:37.340
to layout the content the
right way and render it.

00:06:37.340 --> 00:06:42.420
Another thing we changed
was how we separated layout

00:06:42.420 --> 00:06:43.090
from rendering.

00:06:43.090 --> 00:06:45.610
So layout is
figuring out how many

00:06:45.610 --> 00:06:48.390
pages you're going to have,
how the content's going

00:06:48.390 --> 00:06:51.820
to be placed on the
pages, and rendering

00:06:51.820 --> 00:06:56.446
is actually producing the
pixels from the layout.

00:06:56.446 --> 00:06:58.070
The reason we did
this, for example, is

00:06:58.070 --> 00:07:00.450
if you have 1,000 page
document, you really

00:07:00.450 --> 00:07:04.470
need to layout the whole content
to know how many pages you have

00:07:04.470 --> 00:07:06.790
and what is on page seven.

00:07:06.790 --> 00:07:09.520
But if the user's
looking at page 6 and 7

00:07:09.520 --> 00:07:11.300
in the Print Preview,
you don't want

00:07:11.300 --> 00:07:13.090
to render 1,000
pages because all you

00:07:13.090 --> 00:07:16.370
care is rendering the two
pages that the user can see.

00:07:16.370 --> 00:07:19.770
So this is why we have two
separate concepts of performing

00:07:19.770 --> 00:07:21.990
layout and rendering.

00:07:25.180 --> 00:07:27.590
So this is how the
layout callback looks

00:07:27.590 --> 00:07:29.480
on print document adapter.

00:07:29.480 --> 00:07:33.040
So it provides you
the print attributes,

00:07:33.040 --> 00:07:36.620
which is what the user
has selected in the UI.

00:07:36.620 --> 00:07:39.410
And gives you a callback to
tell us when you're ready.

00:07:39.410 --> 00:07:41.400
It's completely asynchronous.

00:07:41.400 --> 00:07:44.930
With this API you can do-- you
can take any amount of work,

00:07:44.930 --> 00:07:47.450
but the shorter it takes the
better, because this literally

00:07:47.450 --> 00:07:49.090
affects the UX.

00:07:49.090 --> 00:07:53.750
And so one once you're ready,
you can callback and say,

00:07:53.750 --> 00:07:55.026
hey, I'm done, I'm finished.

00:07:55.026 --> 00:07:56.900
So here's the information
about the document,

00:07:56.900 --> 00:07:59.880
it has this many pages
and it's this type.

00:07:59.880 --> 00:08:03.230
You could also say, hey, I
failed because of this reason.

00:08:03.230 --> 00:08:07.890
And the reason string
goes into the UI

00:08:07.890 --> 00:08:11.210
so the user knows what happened.

00:08:11.210 --> 00:08:15.310
And also another callback for on
the-- another callback is over

00:08:15.310 --> 00:08:16.160
on cancelled.

00:08:16.160 --> 00:08:20.650
So the cancelled is if you
notice the onLayout method

00:08:20.650 --> 00:08:24.050
takes a cancellation signal,
and this is a way for the system

00:08:24.050 --> 00:08:27.060
to nicely tell you, hey,
please stop what you're doing

00:08:27.060 --> 00:08:31.350
because things changed and what
you're doing is irrelevant.

00:08:31.350 --> 00:08:35.980
So for example, if the user
selects say page size A4,

00:08:35.980 --> 00:08:37.590
and you start doing a layout.

00:08:37.590 --> 00:08:40.765
And the user changes in the
meantime the page size again,

00:08:40.765 --> 00:08:42.320
we are literally
going to ask you,

00:08:42.320 --> 00:08:43.695
hey please stop
what you're doing

00:08:43.695 --> 00:08:45.310
because there is a
different page size

00:08:45.310 --> 00:08:47.110
and you have to
do the work again.

00:08:47.110 --> 00:08:49.820
So the more responsive you are,
the better the user experience

00:08:49.820 --> 00:08:50.320
is.

00:08:53.060 --> 00:08:57.980
So very similar
to layout, writing

00:08:57.980 --> 00:09:00.320
is very similar-- this
is very similar-- work

00:09:00.320 --> 00:09:02.070
in a very similar way.

00:09:02.070 --> 00:09:04.690
So we're telling you, hey,
please render these pages

00:09:04.690 --> 00:09:06.230
and we'll give you a page range.

00:09:06.230 --> 00:09:07.690
And we provide
you a destination,

00:09:07.690 --> 00:09:13.250
so write these pages in PDF
format to this file descriptor.

00:09:13.250 --> 00:09:15.990
Once you're ready, you
again, you get a callback.

00:09:15.990 --> 00:09:19.860
And you can use a callback
to tell us, hey, I'm finished

00:09:19.860 --> 00:09:23.650
and these are the pages
that I've written.

00:09:23.650 --> 00:09:25.820
Or you can say, I failed
because of this reason,

00:09:25.820 --> 00:09:27.284
which show this in the UI.

00:09:27.284 --> 00:09:28.700
Or you could say,
I was cancelled.

00:09:31.520 --> 00:09:34.430
So now at this point you're
probably already saying, wow,

00:09:34.430 --> 00:09:35.720
this is super complicated.

00:09:35.720 --> 00:09:37.636
I don't want to deal
with all these callbacks.

00:09:37.636 --> 00:09:40.010
This is just-- all I want
to do is print a photo.

00:09:40.010 --> 00:09:42.180
It should be very
simple, very easy.

00:09:42.180 --> 00:09:46.430
I don't need to deal with all
this complicated machinery.

00:09:46.430 --> 00:09:50.530
And then you also think, hey, I
don't know anything about PDF.

00:09:50.530 --> 00:09:54.060
I'm actually the same,
I know almost nothing.

00:09:54.060 --> 00:09:56.630
I want to be able to
generate PDF content.

00:09:56.630 --> 00:09:58.880
I don't want to learn a PDF
rendering library in order

00:09:58.880 --> 00:10:00.940
to print very simple things.

00:10:00.940 --> 00:10:04.310
And we got you covered.

00:10:04.310 --> 00:10:06.720
So we have a very
simple class that

00:10:06.720 --> 00:10:13.300
allows you to generate PDF
from using standard Android

00:10:13.300 --> 00:10:14.510
rendering commands.

00:10:14.510 --> 00:10:16.510
So we realize that you
probably already know how

00:10:16.510 --> 00:10:18.580
to pull pixels from the screen.

00:10:18.580 --> 00:10:21.060
And if you know how to use
the Android rendering APIs,

00:10:21.060 --> 00:10:25.690
you can use the same approach
to generate PDF content.

00:10:25.690 --> 00:10:30.240
And so the PDF document class
is the helper that does that.

00:10:30.240 --> 00:10:34.600
And the way it works is you
create a new PDF document.

00:10:34.600 --> 00:10:36.750
You create the
page specification,

00:10:36.750 --> 00:10:39.070
and you start the page.

00:10:39.070 --> 00:10:42.260
Once you have the page, this
is where the interesting part

00:10:42.260 --> 00:10:45.270
is, you can literally get
the canvas of the page

00:10:45.270 --> 00:10:47.319
and you can render
anything your like.

00:10:47.319 --> 00:10:49.360
So in this case, I'm just
getting a content view,

00:10:49.360 --> 00:10:51.520
which is just some view,
and asking the view

00:10:51.520 --> 00:10:54.310
to draw itself on the canvas.

00:10:54.310 --> 00:10:56.520
And once you finish
the rendering,

00:10:56.520 --> 00:10:58.300
you're saying, hey,
finish the page

00:10:58.300 --> 00:11:00.910
and write the documents to
this stream, and that's it.

00:11:00.910 --> 00:11:04.640
You just generated PDF
representation of whatever

00:11:04.640 --> 00:11:06.700
rendering commands you issued.

00:11:06.700 --> 00:11:07.680
It's pretty easy.

00:11:10.310 --> 00:11:13.570
Another very useful
facility we have

00:11:13.570 --> 00:11:15.670
is being able to print bitmaps.

00:11:15.670 --> 00:11:17.390
For example, you
have a photo, all

00:11:17.390 --> 00:11:20.280
you want to do is put
this photo to this printer

00:11:20.280 --> 00:11:22.230
in a few lines of code.

00:11:22.230 --> 00:11:25.080
And the way to do this
is using the print helper

00:11:25.080 --> 00:11:27.100
from the support
library, which is

00:11:27.100 --> 00:11:30.320
dedicated for creating
bitmaps in a backwards

00:11:30.320 --> 00:11:32.330
compatible fashion.

00:11:32.330 --> 00:11:35.080
And the way it works, you
create the print helper.

00:11:35.080 --> 00:11:37.080
You can specify some
optional arguments.

00:11:37.080 --> 00:11:40.330
For example, here we're saying,
hey, we want to print in color,

00:11:40.330 --> 00:11:43.000
we want to print in
landscape, and we

00:11:43.000 --> 00:11:45.840
want to scale the
content in a certain way.

00:11:45.840 --> 00:11:48.170
And once you do
these small tweaks,

00:11:48.170 --> 00:11:50.600
now you can literally
call the print method,

00:11:50.600 --> 00:11:53.440
and pass a URI to the bitmap.

00:11:53.440 --> 00:11:55.720
And magic, it just works.

00:11:55.720 --> 00:11:58.130
So the print helper
takes care of all

00:11:58.130 --> 00:12:01.090
the complicated machinery,
doing all these callbacks,

00:12:01.090 --> 00:12:03.780
doing layout, doing writing,
and everything is done for you

00:12:03.780 --> 00:12:04.370
for free.

00:12:06.940 --> 00:12:12.640
Another very useful class--
another useful facility

00:12:12.640 --> 00:12:15.410
for printing is being
able to print HTML.

00:12:15.410 --> 00:12:18.740
Because for example, you want
to format text in a certain way,

00:12:18.740 --> 00:12:20.356
and you want to print it.

00:12:20.356 --> 00:12:22.890
A very easy way to
format text as HTML,

00:12:22.890 --> 00:12:25.580
almost everybody knows how to
use HTML, and what you can do

00:12:25.580 --> 00:12:28.340
is you can format
your text in HTML.

00:12:28.340 --> 00:12:31.390
Load it in a web view,
that's pretty standard,

00:12:31.390 --> 00:12:33.790
I'm sure that most of
you know how to do this.

00:12:33.790 --> 00:12:40.250
And once you do this, WebView
has a method, which says, hey,

00:12:40.250 --> 00:12:42.740
create print document adapter.

00:12:42.740 --> 00:12:45.090
And this print document
adapter is the thing

00:12:45.090 --> 00:12:47.150
that you pass to
the print framework.

00:12:47.150 --> 00:12:48.900
So once again, the
print document adapter

00:12:48.900 --> 00:12:51.310
from the WebView,
you can literally

00:12:51.310 --> 00:12:55.180
pass it to the print managers
print method, it'll just work.

00:12:55.180 --> 00:12:58.560
It will handle the
layout, the rendering,

00:12:58.560 --> 00:13:01.590
it will do all the cleanup,
it will do everything for you.

00:13:01.590 --> 00:13:02.240
It's very easy.

00:13:06.920 --> 00:13:11.760
So before I turn the
microphone to Philip,

00:13:11.760 --> 00:13:14.380
I just want to
rehash that you can

00:13:14.380 --> 00:13:18.240
see that we have very
flexible APIs, which

00:13:18.240 --> 00:13:21.600
are very useful for
very sophisticated apps

00:13:21.600 --> 00:13:25.880
where you want to control your
layout and rendering very well.

00:13:25.880 --> 00:13:27.970
For example, if you're
an advanced text editor

00:13:27.970 --> 00:13:30.011
you probably want to
implement the print document

00:13:30.011 --> 00:13:32.630
adapter yourself, because
you have full control of how

00:13:32.630 --> 00:13:35.070
the layout is going
to happen, and how

00:13:35.070 --> 00:13:36.610
the output is going to be.

00:13:36.610 --> 00:13:38.230
But if you're an
app developer that

00:13:38.230 --> 00:13:40.110
just wants to put some
pixels on the screen,

00:13:40.110 --> 00:13:41.150
you want to print
a photo, you want

00:13:41.150 --> 00:13:42.620
to print some formatted text.

00:13:42.620 --> 00:13:47.060
Or you want to render
something instead of the screen

00:13:47.060 --> 00:13:51.612
to render this to a PDF, you
can use the old helper classes

00:13:51.612 --> 00:13:52.570
that I was showing you.

00:13:52.570 --> 00:13:56.110
So you can see that there
is an approach for printing

00:13:56.110 --> 00:13:57.170
for everyone.

00:13:57.170 --> 00:14:01.470
And we kind of believe
that using the role--

00:14:01.470 --> 00:14:05.470
the API with the callbacks, it's
only for very sophisticated use

00:14:05.470 --> 00:14:06.730
cases.

00:14:06.730 --> 00:14:09.040
So with that, I'll
turn it over to Philip.

00:14:09.040 --> 00:14:12.600
He is going to be talking
more about UX and how

00:14:12.600 --> 00:14:15.280
the platform evolved over time.

00:14:15.280 --> 00:14:15.780
Thank you.

00:14:15.780 --> 00:14:21.710
[APPLAUSE]

00:14:21.710 --> 00:14:23.940
PHILIP P. MOLTMANN:
Thanks, Svet.

00:14:23.940 --> 00:14:25.810
So you saw how easy it is.

00:14:25.810 --> 00:14:29.130
I want to show you how the
user interacts with the print

00:14:29.130 --> 00:14:31.680
framework.

00:14:31.680 --> 00:14:34.460
Before KitKat, the only
way you could print

00:14:34.460 --> 00:14:37.790
was the app sends out an
intent with some data,

00:14:37.790 --> 00:14:39.910
and the print
manufacturers might

00:14:39.910 --> 00:14:42.140
provide an app that
receives this intent,

00:14:42.140 --> 00:14:48.520
and then renders the
data onto the paper.

00:14:48.520 --> 00:14:50.970
The problem with that was
that the print manufacturers

00:14:50.970 --> 00:14:54.700
app didn't know anything about
the content, this actual data.

00:14:54.700 --> 00:14:59.110
And the result was sometimes
good, but not always.

00:14:59.110 --> 00:15:03.220
So [INAUDIBLE] we introduced
and collaborative approach

00:15:03.220 --> 00:15:07.050
where the app, the printer,
and the user interact

00:15:07.050 --> 00:15:08.630
to create the print.

00:15:08.630 --> 00:15:13.050
So in my example here, you
can see the UI of KitKat.

00:15:13.050 --> 00:15:16.540
And the printer provided--
its properties, for example,

00:15:16.540 --> 00:15:18.040
what kind of paper
size it supports.

00:15:18.040 --> 00:15:20.570
In my case, letter and I
guess it might support,

00:15:20.570 --> 00:15:24.030
I dunno, legal, too.

00:15:24.030 --> 00:15:28.140
The user can then select which
of the options-- of the values

00:15:28.140 --> 00:15:31.560
it wants and then
the app renders

00:15:31.560 --> 00:15:35.850
the results on to the paper.

00:15:35.850 --> 00:15:39.840
With Lollipop, we
added the preview,

00:15:39.840 --> 00:15:41.942
which of course, is very
useful to actually see

00:15:41.942 --> 00:15:43.900
what you're going to
print, before you actually

00:15:43.900 --> 00:15:46.690
put in the physical world.

00:15:46.690 --> 00:15:49.420
And also allows you
very easily to select

00:15:49.420 --> 00:15:52.962
which pages you don't want to
print, because you might not,

00:15:52.962 --> 00:15:54.670
in my case, five pages
might be too much.

00:15:54.670 --> 00:15:58.140
I might want to print page 3.

00:15:58.140 --> 00:16:00.030
With Marshmallow, there
was no big changes.

00:16:00.030 --> 00:16:02.950
We added one more
capability so you

00:16:02.950 --> 00:16:08.230
can say which [INAUDIBLE] you
want to save but most of them

00:16:08.230 --> 00:16:09.340
make no changes.

00:16:09.340 --> 00:16:11.910
In general, there
are no big changes

00:16:11.910 --> 00:16:15.850
between KitKat, all the way
to N for app developers.

00:16:15.850 --> 00:16:19.130
So if you write
KitKat capable code,

00:16:19.130 --> 00:16:22.670
it will work all the way to N.

00:16:22.670 --> 00:16:26.330
So for N, we realized that the
actual printing workflows quite

00:16:26.330 --> 00:16:27.870
nice now, and it works well.

00:16:27.870 --> 00:16:29.550
But what doesn't
work very well now

00:16:29.550 --> 00:16:31.850
is the set up process
of your printer.

00:16:31.850 --> 00:16:34.510
So in my example, I set
up a simple network,

00:16:34.510 --> 00:16:38.810
as everybody has at home,
and put one Canon printer

00:16:38.810 --> 00:16:43.430
onto this network as
a common use case.

00:16:43.430 --> 00:16:46.400
Can you run the video?

00:16:46.400 --> 00:16:49.700
OK, so I have my
browser open here.

00:16:49.700 --> 00:16:50.950
And I want to print this page.

00:16:50.950 --> 00:16:53.720
So I select print.

00:16:53.720 --> 00:16:56.290
And the print dialog pops
up and shows me a preview.

00:16:56.290 --> 00:16:57.760
And it says, select printer.

00:16:57.760 --> 00:16:59.380
OK, I go ahead and
select a printer.

00:17:03.410 --> 00:17:05.410
I can take this PDF, but
my printer doesn't show

00:17:05.410 --> 00:17:07.535
So I guess I have to add
it so I press add printer.

00:17:11.569 --> 00:17:14.180
It tells me, I might
want to install software

00:17:14.180 --> 00:17:15.991
from Canon, which
sounds reasonable

00:17:15.991 --> 00:17:17.490
because my printer
is made by Canon.

00:17:17.490 --> 00:17:19.159
So I click on this icon.

00:17:23.569 --> 00:17:26.900
I go through the Play Store and
I can install the Canon print

00:17:26.900 --> 00:17:29.310
service, which is
nice and fast on N,

00:17:29.310 --> 00:17:33.830
because of our improvements
in the install path.

00:17:33.830 --> 00:17:34.810
Everything's done.

00:17:34.810 --> 00:17:38.490
Now go back to the
print framework,

00:17:38.490 --> 00:17:40.744
and you can see that
I install my printer.

00:17:40.744 --> 00:17:42.160
And you can see
in the background,

00:17:42.160 --> 00:17:43.426
it actually found my printer.

00:17:43.426 --> 00:17:44.050
It's wonderful.

00:17:44.050 --> 00:17:46.341
So let's go back and select
my print in the background.

00:17:49.930 --> 00:17:52.130
So now it's like my printer
and my print button's

00:17:52.130 --> 00:17:53.720
there, so I go ahead and print.

00:17:57.180 --> 00:17:59.930
This warning will only show up
the very first time you print.

00:17:59.930 --> 00:18:03.920
So it won't interrupt further.

00:18:03.920 --> 00:18:05.934
Print process.

00:18:05.934 --> 00:18:07.850
So everything seems to
be fine, so let's check

00:18:07.850 --> 00:18:10.192
if printing is running.

00:18:10.192 --> 00:18:11.150
So printing is running.

00:18:11.150 --> 00:18:13.325
So I don't wait until this
prints out, it takes too long.

00:18:13.325 --> 00:18:15.783
This is basically how the user
interacts with the printing,

00:18:15.783 --> 00:18:17.980
the very first time.

00:18:17.980 --> 00:18:19.070
Can you close the video?

00:18:19.070 --> 00:18:21.350
Thank you.

00:18:21.350 --> 00:18:23.560
Once the printer is setup
in a certain environment,

00:18:23.560 --> 00:18:25.768
you don't have to go through
the whole process again.

00:18:25.768 --> 00:18:29.597
You just go-- say print,
and press the Print button.

00:18:29.597 --> 00:18:31.930
This is only for the very
first time you setup printing,

00:18:31.930 --> 00:18:35.370
or if you go to a friend and
want to print on their printer.

00:18:35.370 --> 00:18:37.730
And you might require
additional software.

00:18:37.730 --> 00:18:40.820
The idea was to make it very
simple for you to discover

00:18:40.820 --> 00:18:43.800
which software you need without
having to go to a Play store

00:18:43.800 --> 00:18:46.216
and searching for something
or reading some documentation.

00:18:49.650 --> 00:18:52.220
So I hope you are all convinced
to add printing to your app.

00:18:52.220 --> 00:18:54.178
Or maybe you already
added printing to your app

00:18:54.178 --> 00:18:56.190
and you want to improve it.

00:18:56.190 --> 00:18:58.130
Over the years, we've
found certain issues

00:18:58.130 --> 00:18:59.670
which come up frequently.

00:18:59.670 --> 00:19:01.400
And I want to go
over four of them,

00:19:01.400 --> 00:19:07.560
and comment on them-- how do
we suggest to handle them.

00:19:07.560 --> 00:19:10.280
First, when you print
you can actually

00:19:10.280 --> 00:19:14.372
suggest what kind
of action boots

00:19:14.372 --> 00:19:15.580
the printer is going to have.

00:19:15.580 --> 00:19:17.370
So in my case, I have
a portrait picture

00:19:17.370 --> 00:19:20.040
of my Android statuette here.

00:19:20.040 --> 00:19:22.505
And it would be nice if
by default, the paper

00:19:22.505 --> 00:19:24.630
would be oriented in portrait
instead of landscape.

00:19:27.125 --> 00:19:28.500
So if you don't
state anything it

00:19:28.500 --> 00:19:31.470
might turn up to be
by default, landscape.

00:19:31.470 --> 00:19:33.420
The user has to go to
Settings and change it.

00:19:33.420 --> 00:19:34.836
And that takes
time away from user

00:19:34.836 --> 00:19:36.040
to going back into your app.

00:19:36.040 --> 00:19:40.060
So I would recommend to address
as many of these default

00:19:40.060 --> 00:19:45.229
attribute as possible-- paper
size, column mode, and this

00:19:45.229 --> 00:19:47.020
will make your printer
experience as smooth

00:19:47.020 --> 00:19:48.750
as possible for the user.

00:19:48.750 --> 00:19:55.290
Secondly, I talked about the
layout and on write call.

00:19:55.290 --> 00:19:57.910
There's actually a magic return
code from the onLayout call

00:19:57.910 --> 00:20:00.270
that you can say, I actually,
I don't know how many

00:20:00.270 --> 00:20:01.567
pages the document has.

00:20:01.567 --> 00:20:03.400
Which allows you to
return from the onLayout

00:20:03.400 --> 00:20:06.060
call basically immediately.

00:20:06.060 --> 00:20:06.830
You can do that.

00:20:06.830 --> 00:20:10.040
And if you do that, you
get the UI on the left,

00:20:10.040 --> 00:20:13.260
instead of a spinning--
a spinning spinner.

00:20:13.260 --> 00:20:16.099
And it's not a good
UI, because there's

00:20:16.099 --> 00:20:17.890
nothing seems to be
happening for like five

00:20:17.890 --> 00:20:19.964
seconds for the user.

00:20:19.964 --> 00:20:21.380
If you return the
number of pages,

00:20:21.380 --> 00:20:24.290
you can have the UI on the
left side of the paper,

00:20:24.290 --> 00:20:26.630
it seems like it's 17 pages.

00:20:26.630 --> 00:20:28.880
And the user at least sees
that something is going on.

00:20:28.880 --> 00:20:32.170
So we highly suggest to
implement the layout call

00:20:32.170 --> 00:20:34.180
appropriately and return it.

00:20:34.180 --> 00:20:36.830
But in the case where
you're layout call

00:20:36.830 --> 00:20:38.540
will be as slow as
your write call,

00:20:38.540 --> 00:20:40.730
it doesn't make sense
to do it-- work twice.

00:20:40.730 --> 00:20:43.210
As in this case, we recommend
to return unknown pages.

00:20:45.830 --> 00:20:48.870
Third, this is a
clarification of the API.

00:20:48.870 --> 00:20:51.040
So let's walk through
your normal print process.

00:20:51.040 --> 00:20:52.790
So you issue the print command.

00:20:56.240 --> 00:20:59.260
And the print preview opens.

00:20:59.260 --> 00:21:02.840
And then for example, the user
resizes the application if

00:21:02.840 --> 00:21:05.540
[INAUDIBLE] in the mold
or rotates the screen.

00:21:05.540 --> 00:21:07.370
So what happens
in a common case,

00:21:07.370 --> 00:21:09.560
is that they go through an
onDestroy onCreate cycle.

00:21:09.560 --> 00:21:11.560
And you could even say,
if you wrote the stream,

00:21:11.560 --> 00:21:14.580
the application after
the rotation might

00:21:14.580 --> 00:21:17.310
look very different than
your original applications.

00:21:17.310 --> 00:21:20.120
So let's go destroy onCreate.

00:21:20.120 --> 00:21:22.610
So onCreate, you have to
decide, does printing still

00:21:22.610 --> 00:21:24.310
make sense in this situation.

00:21:24.310 --> 00:21:26.470
In this case you
don't do anything.

00:21:26.470 --> 00:21:28.470
If it doesn't make sense,
you don't do anything.

00:21:28.470 --> 00:21:29.928
If it does make
sense, you actually

00:21:29.928 --> 00:21:33.420
have to restart the printing
process by calling print again.

00:21:33.420 --> 00:21:36.890
Last thing I wanted to mention
is more a plea from my side.

00:21:36.890 --> 00:21:40.120
If you render PDFs,
please provide valid PDFs.

00:21:40.120 --> 00:21:42.450
Provide valid PDFs that
match the attributes

00:21:42.450 --> 00:21:45.410
and that match the
media that is sent.

00:21:45.410 --> 00:21:47.940
If you don't do this,
it might render fine

00:21:47.940 --> 00:21:50.935
on the Print Preview screen,
but it might not render fine

00:21:50.935 --> 00:21:51.810
in side of a printer.

00:21:51.810 --> 00:21:54.330
And you might end
up with results,

00:21:54.330 --> 00:21:56.410
which confuse the user.

00:21:56.410 --> 00:21:59.290
We saw many cases where
this didn't work very well.

00:21:59.290 --> 00:22:03.100
So it would be nice if
you take care of that.

00:22:03.100 --> 00:22:05.050
Thanks for coming to this talk.

00:22:05.050 --> 00:22:10.110
I put the old imitate-- or
our webpage on the slides,

00:22:10.110 --> 00:22:12.040
and also our partners webpage.

00:22:12.040 --> 00:22:16.465
So please look at them,
and I hope it helps you

00:22:16.465 --> 00:22:18.380
with your development.

00:22:18.380 --> 00:22:22.720
So I would like to invite
Svet back on stage.

00:22:22.720 --> 00:22:25.500
And also I'm very happy that
our partners from Xerox, HP,

00:22:25.500 --> 00:22:28.150
and Canon, which are all
part of the Mopria Alliance

00:22:28.150 --> 00:22:29.140
would come onstage.

00:22:29.140 --> 00:22:33.049
And you can ask questions,
the microphone is over there.

00:22:33.049 --> 00:22:38.631
[APPLAUSE]

00:22:38.631 --> 00:22:39.880
MING GAO: My name is Ming Gao.

00:22:39.880 --> 00:22:41.940
I work for Hewlett Packard.

00:22:41.940 --> 00:22:46.050
I will focus on mobile printing,
start with some mobile apps,

00:22:46.050 --> 00:22:51.460
and then work on KitKat
with Svet enabling that.

00:22:51.460 --> 00:22:54.102
Now working with
them through Mopria.

00:22:54.102 --> 00:22:55.560
JEREMY REITZ: Hi,
I'm Jeremy Reitz.

00:22:55.560 --> 00:22:56.590
I work for Xerox.

00:22:56.590 --> 00:22:58.877
I'm Development Manager for
our mobile and cloud print

00:22:58.877 --> 00:22:59.850
offerings.

00:22:59.850 --> 00:23:01.680
Really excited about
the improvements

00:23:01.680 --> 00:23:06.509
coming out in N today, and
working with Google further.

00:23:06.509 --> 00:23:08.050
PETER POIRIER: Hi,
I'm Peter Poirier.

00:23:08.050 --> 00:23:11.690
I'm the manager for the
mobile app development

00:23:11.690 --> 00:23:14.720
from Canon, I work out
of the Seattle area.

00:23:14.720 --> 00:23:19.260
And I'm also really happy to
be working with Svet and Zac

00:23:19.260 --> 00:23:22.540
and Philip on the Google and
printing improvements for N,

00:23:22.540 --> 00:23:24.040
which are looking really great.

00:23:26.147 --> 00:23:27.230
SVETOSLAV GANOV: I'm Svet.

00:23:27.230 --> 00:23:28.979
I work on the Android
Core Framework team.

00:23:28.979 --> 00:23:31.080
I was the initial engineer
working on printing,

00:23:31.080 --> 00:23:36.992
and now Philip's
taking care of that.

00:23:36.992 --> 00:23:38.950
PHILIP P. MOLTMANN: So
are there any questions?

00:23:42.560 --> 00:23:43.480
No questions.

00:23:43.480 --> 00:23:43.980
Oh, Yeah.

00:23:43.980 --> 00:23:44.938
Over there, one person.

00:23:48.074 --> 00:23:50.540
AUDIENCE: Are there going
to be any future plans

00:23:50.540 --> 00:23:52.729
within the framework to
streamline that process?

00:23:52.729 --> 00:23:55.020
I mean, you showed how you
have to go to the Play Store

00:23:55.020 --> 00:23:57.000
and download these
plug-ins and processes.

00:23:57.000 --> 00:23:59.770
Is that ever going to be baked
into the Android framework.

00:23:59.770 --> 00:24:01.350
So that just happens
transparently

00:24:01.350 --> 00:24:04.919
in the background, the user
doesn't have to worry about it?

00:24:04.919 --> 00:24:06.960
PHILIP P. MOLTMANN: I'm
not sure it's a good idea

00:24:06.960 --> 00:24:09.721
to install software for the
user without the user knowing.

00:24:09.721 --> 00:24:11.220
But of course, we
are always working

00:24:11.220 --> 00:24:14.380
to improve the user experience.

00:24:14.380 --> 00:24:17.810
So if you have suggestions,
write on this basis page.

00:24:17.810 --> 00:24:22.120
Or we are happy to improve it.

00:24:22.120 --> 00:24:26.126
Because I know, if
you want it to print,

00:24:26.126 --> 00:24:27.750
you want to use it
to get into your app

00:24:27.750 --> 00:24:29.290
as quickly as possible-- back.

00:24:32.672 --> 00:24:34.630
MING GAO: That's actually
a very good question.

00:24:34.630 --> 00:24:38.110
So we're actually doing
kind of both ways.

00:24:38.110 --> 00:24:41.130
For the EOS Discovery,
it's more like a long tail.

00:24:41.130 --> 00:24:43.980
So you have some printer,
which is kind of special,

00:24:43.980 --> 00:24:47.180
it can pick it up
with the driver.

00:24:47.180 --> 00:24:50.250
But we also, as a Mopria, trying
to preload Mopria plug-in,

00:24:50.250 --> 00:24:52.360
on all these major phones.

00:24:52.360 --> 00:24:53.620
So we start with WowWee.

00:24:53.620 --> 00:24:55.450
I think Amazon has our product.

00:24:55.450 --> 00:24:57.640
So whenever you have
a phone, most likely

00:24:57.640 --> 00:24:59.710
the Mopria plugin
will be preloaded.

00:24:59.710 --> 00:25:03.020
So that's how we avoid an
additional step to install it.

00:25:03.020 --> 00:25:04.170
So we do both.

00:25:04.170 --> 00:25:05.485
Yeah, good question.

00:25:05.485 --> 00:25:06.710
AUDIENCE: OK, thank you.

00:25:06.710 --> 00:25:08.710
SVETOSLAV GANOV: Can I
just chime in real quick?

00:25:08.710 --> 00:25:12.220
Just to chime in real
quick related to that.

00:25:12.220 --> 00:25:15.080
So in N, we actually ship in
a printer discovery component

00:25:15.080 --> 00:25:19.400
that is part of a platform
that is updatable separately

00:25:19.400 --> 00:25:21.040
if we need to.

00:25:21.040 --> 00:25:23.460
And so it's actually
looking in the local network

00:25:23.460 --> 00:25:26.720
to find printers for certain
manufactures and suggests

00:25:26.720 --> 00:25:30.440
the right software, which is how
if you remember Philip's demo,

00:25:30.440 --> 00:25:33.595
it recommended the Canon
print plug-in, the software.

00:25:36.300 --> 00:25:39.830
I agree that the user still have
to go through a couple of hoops

00:25:39.830 --> 00:25:41.080
to click the Install button.

00:25:41.080 --> 00:25:43.390
But it's something we
definitely want to improve more.

00:25:47.110 --> 00:25:49.790
AUDIENCE: Hello, my question is
concerned the thermals printer

00:25:49.790 --> 00:25:52.670
support in the platform.

00:25:52.670 --> 00:25:57.730
The support for
deskjets or big printers

00:25:57.730 --> 00:26:00.240
are quite OK, quite
easy to use and so on.

00:26:00.240 --> 00:26:02.700
But are you-- do you have
anything in the roadmap

00:26:02.700 --> 00:26:05.040
to support the small
printers like stores,

00:26:05.040 --> 00:26:06.740
when you are printing a receipt.

00:26:06.740 --> 00:26:08.680
It's completely different,
how the framework

00:26:08.680 --> 00:26:10.050
should work to do this.

00:26:10.050 --> 00:26:11.470
I don't see it.

00:26:11.470 --> 00:26:15.670
I use it already but we have
proprietary protocols to print.

00:26:15.670 --> 00:26:18.710
I wonder if there's any plan to
incorporate this into framework

00:26:18.710 --> 00:26:22.692
so that we can use the same
architecture and platform

00:26:22.692 --> 00:26:24.150
to print to these
thermal printers.

00:26:31.750 --> 00:26:33.250
MING GAO: Such a
very good question.

00:26:33.250 --> 00:26:36.669
Again, it's really
to the vendor,

00:26:36.669 --> 00:26:38.960
who provides the thermal
printer to provide the plugin.

00:26:38.960 --> 00:26:43.750
And then I think what may be
additional is the paper size.

00:26:43.750 --> 00:26:46.370
So it's a special paper
but the architecture

00:26:46.370 --> 00:26:47.290
accommodates all that.

00:26:47.290 --> 00:26:50.490
That's the beauty of the
Android architecture.

00:26:50.490 --> 00:26:52.240
JEREMY REITZ: And I'll
just build on that.

00:26:52.240 --> 00:26:54.031
I mean one of the things
in Mopria Alliance

00:26:54.031 --> 00:26:56.780
is trying to do is standardize
any printer company, even

00:26:56.780 --> 00:26:58.870
receipt printers that
could join the alliance,

00:26:58.870 --> 00:27:00.900
implement our same
standards, and they

00:27:00.900 --> 00:27:04.770
work with our technology
that we're releasing.

00:27:04.770 --> 00:27:07.880
AUDIENCE: But does
Xerox, HP, or Canon,

00:27:07.880 --> 00:27:10.190
do you have these
printers for stores?

00:27:10.190 --> 00:27:13.390
Because as far as I know,
you don't have it, right?

00:27:13.390 --> 00:27:15.809
Any plans?

00:27:15.809 --> 00:27:17.350
SVETOSLAV GANOV: So
actually, we will

00:27:17.350 --> 00:27:20.280
be really happy to-- we, the
framework team, the Android

00:27:20.280 --> 00:27:23.440
team-- we would be really
happy to work with you guys

00:27:23.440 --> 00:27:27.924
to come to see what's
missing in the APIs.

00:27:27.924 --> 00:27:29.590
I can see these
printer's are different.

00:27:29.590 --> 00:27:31.450
You have a roll,
and then you have--

00:27:31.450 --> 00:27:33.550
it's completely different.

00:27:33.550 --> 00:27:37.990
But probably the enhancement
to the API are no doubt huge,

00:27:37.990 --> 00:27:38.720
we need to make.

00:27:38.720 --> 00:27:40.860
But we need to-- we're
not domain experts.

00:27:40.860 --> 00:27:42.130
We need your help.

00:27:42.130 --> 00:27:44.340
Please, get in touch with us.

00:27:44.340 --> 00:27:45.564
Help us, help you.

00:27:45.564 --> 00:27:46.480
AUDIENCE: OK, perfect.

00:27:46.480 --> 00:27:46.980
Thank you.

00:27:49.500 --> 00:27:51.600
AUDIENCE: My question
is what about support

00:27:51.600 --> 00:27:54.220
for before API
19, should we just

00:27:54.220 --> 00:27:56.460
use the old cloud print or--

00:28:00.810 --> 00:28:02.920
SVETOSLAV GANOV: Well,
I can answer that.

00:28:02.920 --> 00:28:04.687
Before API 19, where before--

00:28:04.687 --> 00:28:06.520
AUDIENCE: I mean, it's
not the same service,

00:28:06.520 --> 00:28:08.024
it's not the same API so--

00:28:08.024 --> 00:28:09.690
SVETOSLAV GANOV: Yeah,
before-- the APIs

00:28:09.690 --> 00:28:10.930
were introduced in KitKat.

00:28:10.930 --> 00:28:13.900
So if you want to add
printing to your app

00:28:13.900 --> 00:28:16.750
for backwards compatibility,
unfortunately you

00:28:16.750 --> 00:28:18.470
have to fall back
to the old approach.

00:28:18.470 --> 00:28:21.120
Just check the API level
device you are running in.

00:28:21.120 --> 00:28:23.510
And then fall back to the
throw over the wall approach,

00:28:23.510 --> 00:28:26.170
where you just use
the share intent.

00:28:26.170 --> 00:28:27.790
Unfortunately,
that's the only way.

00:28:27.790 --> 00:28:31.580
We looked into backporting
the print framework,

00:28:31.580 --> 00:28:35.060
but it's not feasible
to all devices.

00:28:35.060 --> 00:28:36.060
AUDIENCE: OK, thank you.

00:28:38.740 --> 00:28:40.070
AUDIENCE: I have a question.

00:28:40.070 --> 00:28:42.270
Does this framework
extend to Chrome OS

00:28:42.270 --> 00:28:45.895
as well, and other writing
Chrome apps as these drivers?

00:28:48.164 --> 00:28:50.080
PHILIP P. MOLTMANN: So
we've worked with them,

00:28:50.080 --> 00:28:51.621
and it's not all
completely finalized

00:28:51.621 --> 00:28:53.200
what we're going to do.

00:28:53.200 --> 00:28:55.620
But we are, of course,
committed to bringing printing

00:28:55.620 --> 00:28:57.410
to Chrome OS as
good as possible,

00:28:57.410 --> 00:29:01.220
and also bringing
Android on Chrome OS.

00:29:01.220 --> 00:29:02.640
It should print, too.

00:29:02.640 --> 00:29:04.662
And we've got to make
this work, of course.

00:29:04.662 --> 00:29:05.370
AUDIENCE: Thanks.

00:29:08.599 --> 00:29:10.640
JEREMY REITZ: Just to
build on that a little bit.

00:29:10.640 --> 00:29:13.850
So Chrome actually
has print APIs.

00:29:13.850 --> 00:29:16.792
They're not the same
as they are in Android.

00:29:16.792 --> 00:29:19.250
But they are available, and
they have a similar life cycle.

00:29:19.250 --> 00:29:21.680
Where the user
selects File, Print.

00:29:21.680 --> 00:29:22.644
You'd get an event.

00:29:22.644 --> 00:29:24.560
You can then respond to
that with the printers

00:29:24.560 --> 00:29:27.805
that your Chrome app supports.

00:29:27.805 --> 00:29:30.430
And you can run discovery and do
whatever you need to do there,

00:29:30.430 --> 00:29:32.650
it could be standardized
using the same things

00:29:32.650 --> 00:29:34.520
that we're using here.

00:29:34.520 --> 00:29:37.960
And then beyond that is
getting capabilities,

00:29:37.960 --> 00:29:40.910
accepting the print content,
and then tracking status.

00:29:40.910 --> 00:29:45.004
So all those APIs and hooks
are there for Chrome app

00:29:45.004 --> 00:29:47.420
that you can build that can
tie into the native file print

00:29:47.420 --> 00:29:48.282
path of Chrome.

00:29:48.282 --> 00:29:50.740
AUDIENCE: Yeah, but some of
the enterprises, their printers

00:29:50.740 --> 00:29:52.290
are not Cloud Ready.

00:29:52.290 --> 00:29:56.320
And they want to bring directly
through the driver instead

00:29:56.320 --> 00:29:58.260
of going through
Google Cloud Print.

00:29:58.260 --> 00:30:00.070
So for those use
cases, it could be

00:30:00.070 --> 00:30:03.505
useful to have a Chrome map as
your driver has a Chrome map.

00:30:03.505 --> 00:30:04.880
JEREMY REITZ:
Absolutely, in fact

00:30:04.880 --> 00:30:06.504
that's kind of what
I was referring to.

00:30:06.504 --> 00:30:10.060
The APIs I'm talking about, they
don't leverage the GCP path.

00:30:10.060 --> 00:30:13.815
So you can do a
direct print and not

00:30:13.815 --> 00:30:15.690
go through Google Cloud
Print infrastructure,

00:30:15.690 --> 00:30:18.810
using those APIs
that Chrome provided.

00:30:18.810 --> 00:30:22.490
I think they were released
last year sometime.

00:30:22.490 --> 00:30:26.830
But they are there, and I guess
if you have questions after I

00:30:26.830 --> 00:30:28.950
could talk more about that.

00:30:28.950 --> 00:30:30.950
MING GAO: Actually, there's
a name for that API.

00:30:30.950 --> 00:30:32.890
I think they just
released last year.

00:30:32.890 --> 00:30:34.830
It's called printer
provider API.

00:30:34.830 --> 00:30:37.190
You can actually write
a Chrome app interacting

00:30:37.190 --> 00:30:38.340
with that for printing.

00:30:38.340 --> 00:30:40.140
But there's more coming
I suppose, right.

00:30:40.140 --> 00:30:40.747
Svet?

00:30:40.747 --> 00:30:42.330
Because we just heard
an announcement.

00:30:42.330 --> 00:30:45.240
I think that's probably that's
what you allude to yesterday,

00:30:45.240 --> 00:30:48.160
that now that they going to
have a plan to run all Android

00:30:48.160 --> 00:30:49.344
apps on Chrome.

00:30:49.344 --> 00:30:50.510
I don't know how that works.

00:30:50.510 --> 00:30:54.010
But something's coming.

00:30:54.010 --> 00:30:56.590
PETER POIRIER: So I don't
know if the plug-in--

00:30:56.590 --> 00:31:00.100
if the plug-in concept
was totally clear.

00:31:00.100 --> 00:31:04.560
What Philip had shown with a
Canon plug-in being installed.

00:31:04.560 --> 00:31:06.500
So each vendor can
write a plug-in.

00:31:06.500 --> 00:31:10.070
So it's up to the printer
companies to provide that.

00:31:10.070 --> 00:31:15.120
And then with that in place,
you don't need the GCP path.

00:31:15.120 --> 00:31:17.050
You can print through
these plug-ins

00:31:17.050 --> 00:31:19.780
and it will translate to
what the printer needs.

00:31:19.780 --> 00:31:22.220
And there's also
a Mopria plug-in,

00:31:22.220 --> 00:31:23.520
which is more universal.

00:31:23.520 --> 00:31:28.600
So any printer from any vendor
that supports the Mopria print

00:31:28.600 --> 00:31:32.997
architecture, will work
with the same plug-in.

00:31:32.997 --> 00:31:33.830
If that makes sense.

00:31:33.830 --> 00:31:34.630
AUDIENCE: OK, that makes sense.

00:31:34.630 --> 00:31:35.130
Thank you.

00:31:40.240 --> 00:31:42.930
AUDIENCE: So this is perhaps out
of scope of the current talk,

00:31:42.930 --> 00:31:46.615
but are there any plans
for a 3D printing support?

00:31:46.615 --> 00:31:50.260
[LAUGHTER]

00:31:50.260 --> 00:31:53.260
SVETOSLAV GANOV: Well
in the typical style

00:31:53.260 --> 00:31:56.280
of Google answering
this question is,

00:31:56.280 --> 00:31:58.631
we'll look into it.

00:31:58.631 --> 00:32:00.500
[LAUGHTER]

00:32:00.500 --> 00:32:03.140
Yeah, we don't talk
about future plans.

00:32:03.140 --> 00:32:04.200
Honestly, sorry.

00:32:07.820 --> 00:32:13.655
AUDIENCE: How can we make screen
print without save as image.

00:32:17.770 --> 00:32:19.630
PHILIP P. MOLTMANN: So
you want to print out

00:32:19.630 --> 00:32:22.130
what you have on the screen
without saving it anywhere?

00:32:22.130 --> 00:32:26.480
AUDIENCE: Yeah, I would like the
screen, print out the screen,

00:32:26.480 --> 00:32:28.765
not save as image.

00:32:28.765 --> 00:32:30.140
PHILIP P. MOLTMANN:
Well you can,

00:32:30.140 --> 00:32:34.120
of course, you can take a
screenshot and then in photos

00:32:34.120 --> 00:32:36.416
select screenshots and print.

00:32:36.416 --> 00:32:38.780
Of course, it gets temporarily
stored on your device.

00:32:38.780 --> 00:32:40.910
If that is too
security sensitive,

00:32:40.910 --> 00:32:42.210
you have not directly.

00:32:50.100 --> 00:32:53.385
AUDIENCE: You've done some study
and you said 95% of the people,

00:32:53.385 --> 00:32:56.030
they don't want to use this API.

00:32:56.030 --> 00:33:00.200
Have you done any study like in
the retail space, or use case,

00:33:00.200 --> 00:33:03.160
you know, printing
would be useful?

00:33:08.369 --> 00:33:10.410
MING GAO: So maybe before
I answer that question,

00:33:10.410 --> 00:33:13.450
I think I would like
to just maybe summarize

00:33:13.450 --> 00:33:15.380
what we have discussed today.

00:33:15.380 --> 00:33:17.660
I think you are all
the app developers.

00:33:17.660 --> 00:33:19.826
I think the talk really is,
one of the things I want

00:33:19.826 --> 00:33:22.970
to emphasize is when you
write the app that prints,

00:33:22.970 --> 00:33:25.910
most likely the printer that
you have will be supported.

00:33:25.910 --> 00:33:27.090
That's the key thing.

00:33:27.090 --> 00:33:30.570
Your questions of the mobile
printing and the use case,

00:33:30.570 --> 00:33:33.330
I think we still see a
lot of photo printing,

00:33:33.330 --> 00:33:35.600
a big part of photo printing.

00:33:35.600 --> 00:33:39.460
As Android moves to
work productivity focus,

00:33:39.460 --> 00:33:41.310
I think you will
have more documents.

00:33:41.310 --> 00:33:44.070
As you go to Enterprise,
there's more enterprise

00:33:44.070 --> 00:33:48.230
related information that can be
printed, we see lots of that.

00:33:51.517 --> 00:33:53.100
SVETOSLAV GANOV: And
just to chime in,

00:33:53.100 --> 00:33:54.724
for printing what is
important-- I mean

00:33:54.724 --> 00:33:57.330
it's like any feature
is, what is the value

00:33:57.330 --> 00:34:00.296
I'm getting for
adding this feature.

00:34:00.296 --> 00:34:01.670
And the other is
what's the price

00:34:01.670 --> 00:34:03.290
I need to pay in
terms of how long

00:34:03.290 --> 00:34:06.610
it's going to take
me to develop it.

00:34:06.610 --> 00:34:11.170
So we tried really hard to make
the entry point like developing

00:34:11.170 --> 00:34:13.260
the future easier.

00:34:13.260 --> 00:34:16.620
So if you use the helpers
to print bitmap or HTML,

00:34:16.620 --> 00:34:18.110
it's pretty easy.

00:34:18.110 --> 00:34:20.500
But in case you need
some other helpers,

00:34:20.500 --> 00:34:24.750
we'll be happy to provide that
to make the entry point easier.

00:34:24.750 --> 00:34:27.570
Because I think with
enterprise becoming

00:34:27.570 --> 00:34:29.920
more and more important
for mobile devices,

00:34:29.920 --> 00:34:31.719
I think printing
will definitely--

00:34:31.719 --> 00:34:36.510
that's my personal feeling
is that it will get more

00:34:36.510 --> 00:34:38.290
and more used in the future.

00:34:42.980 --> 00:34:46.350
AUDIENCE: Taking your boarding
pass example at the beginning

00:34:46.350 --> 00:34:51.650
to the logical conclusion, and
given Android Wear 2.0 being

00:34:51.650 --> 00:34:54.650
more independent
of the phone, is

00:34:54.650 --> 00:34:56.840
there plans to be able
to do things like print

00:34:56.840 --> 00:35:00.616
boarding passes directly
from your watch?

00:35:00.616 --> 00:35:02.490
SVETOSLAV GANOV: In
theory there is nothing--

00:35:02.490 --> 00:35:08.070
so I don't know whether
the clockwork team is

00:35:08.070 --> 00:35:09.499
going to turn the feature on.

00:35:09.499 --> 00:35:11.040
Its literally, it's
one feature, it's

00:35:11.040 --> 00:35:15.140
configuration when you
flash you're Android device.

00:35:15.140 --> 00:35:18.620
I don't see a reason
not to, honestly.

00:35:18.620 --> 00:35:20.430
There is nothing
preventing them from doing

00:35:20.430 --> 00:35:24.590
that in a sense that
the device has Wi-Fi,

00:35:24.590 --> 00:35:26.660
it runs the whole stack.

00:35:26.660 --> 00:35:31.930
So that's actually
going magical.

00:35:31.930 --> 00:35:34.890
This will be magical, you
just print from your watch.

00:35:34.890 --> 00:35:37.105
Yeah, thanks.

00:35:42.540 --> 00:35:46.130
PHILIP P. MOLTMANN: Yeah,
so thank you all for coming.

00:35:46.130 --> 00:35:48.650
I'm going to be on the status
page for the next two or three

00:35:48.650 --> 00:35:49.050
hours.

00:35:49.050 --> 00:35:50.841
So if you have questions
just post it there

00:35:50.841 --> 00:35:52.920
and we can discuss it there.

00:35:52.920 --> 00:35:54.230
Yeah, thank you.

00:35:54.230 --> 00:35:56.030
[APPLAUSE]

00:35:56.030 --> 00:35:57.580
[MUSIC PLAYING]

