WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.350
The next RAID technique is RAID 1,

00:00:02.350 --> 00:00:06.910
which uses a technique called
mirroring to improve reliability.

00:00:06.910 --> 00:00:11.720
So really,
RAID 1 puts the same data on both disks.

00:00:11.720 --> 00:00:15.180
If we had only one disk,
we would keep the data on it.

00:00:15.180 --> 00:00:19.090
With the other disk,
it's just a copy of the first disk.

00:00:19.090 --> 00:00:25.540
So a write of the data from the system
will cause a write to each disk.

00:00:25.540 --> 00:00:29.853
Now note that this results in the same
write performance as when we had one

00:00:29.853 --> 00:00:33.450
disk alone because all of
the two writes are happening.

00:00:33.450 --> 00:00:35.280
They're happening at the same time.

00:00:35.280 --> 00:00:39.700
Each disk is given the same write,
so each disc does

00:00:39.700 --> 00:00:43.640
exactly what the single disc would be
doing, as far as writes are concerned.

00:00:43.640 --> 00:00:47.710
So this write takes approximately
the same time as it would take to do it

00:00:47.710 --> 00:00:50.930
on one disc, because they are really
doing it simultaneously, but

00:00:50.930 --> 00:00:54.320
for reads, we can read any one disk.

00:00:54.320 --> 00:00:55.820
Both of them have the same data.

00:00:55.820 --> 00:00:58.180
We only need to read the data once.

00:00:58.180 --> 00:01:00.738
So we end up reading
only one of the disks.

00:01:00.738 --> 00:01:04.750
So for reads, we get twice
the throughput of one disk alone.

00:01:04.750 --> 00:01:07.150
Pretty much if we have
more than one read to do,

00:01:07.150 --> 00:01:09.940
we're going to send half the reads
to one disk and half to the other.

00:01:09.940 --> 00:01:13.760
They have the identical data so
actually we can always split the disks.

00:01:13.760 --> 00:01:17.750
We never have the situation that all
the data we want is on one disk because

00:01:17.750 --> 00:01:21.600
really, any data can be read
from any of the two disks.

00:01:21.600 --> 00:01:27.540
And this scheme can tolerate any
faults that affect one of the disks.

00:01:27.540 --> 00:01:30.280
So, it could be that for example,
there's a bad sector on one disk.

00:01:30.280 --> 00:01:33.980
Well, we can just read the same
data from the other disk.

00:01:33.980 --> 00:01:36.540
Or we can have an entire disk fail,

00:01:36.540 --> 00:01:41.050
in which case we are left with one
disk that still has all the data.

00:01:42.110 --> 00:01:45.560
So remember when we said that we
have two copies of something, and

00:01:45.560 --> 00:01:48.040
we can detect, but
not correct the error.

00:01:48.040 --> 00:01:52.090
For disks this is not true,
because the ECC

00:01:52.090 --> 00:01:57.330
on each sector of each of the disks
will detect errors that occur already.

00:01:57.330 --> 00:01:59.550
So now that we know
which one has an error,

00:01:59.550 --> 00:02:02.910
we can always use the other one
that doesn't have an error there.

00:02:02.910 --> 00:02:06.560
So if you have two copies of something
and you know which copy is wrong, then

00:02:06.560 --> 00:02:10.389
you can, of course, correct the error
simply by reading the correct copy.

