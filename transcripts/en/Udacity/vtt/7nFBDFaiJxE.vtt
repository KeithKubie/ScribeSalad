WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:06.420
In this lesson we're going to look at one specific example of a

00:00:06.420 --> 00:00:10.020
programming environment for dealing with big data

00:00:10.020 --> 00:00:13.710
applications running on large computation clusters. And

00:00:13.710 --> 00:00:16.158
this programming environment is called map-reduce

00:00:16.158 --> 00:00:19.540
programming environment. And in this programming environment,

00:00:19.540 --> 00:00:25.830
the input to the application is considered as a set of records Identified by

00:00:25.830 --> 00:00:31.840
a key value pair. So the big data app developer, supplies the

00:00:31.840 --> 00:00:37.930
run time environment with two functions called map and reduce. And these are the

00:00:37.930 --> 00:00:43.720
only two functions that the app developer has to supply to the programming

00:00:43.720 --> 00:00:50.690
environment and both map and reduce - Take user defined key value pairs,

00:00:50.690 --> 00:00:54.670
as inputs, and produce user defined key value

00:00:54.670 --> 00:00:57.050
pairs as outputs. So both the input and

00:00:57.050 --> 00:00:59.010
the output to each of the map and

00:00:59.010 --> 00:01:03.190
reduce functions, written by, the domain expert, are key

00:01:03.190 --> 00:01:05.910
value pairs. Once again, these are key value

00:01:05.910 --> 00:01:09.810
pairs defined by the app developer. Specific to

00:01:09.810 --> 00:01:11.860
the particular application that he or she is

00:01:11.860 --> 00:01:15.920
coding. Let's consider a fun example. In this example,

00:01:15.920 --> 00:01:18.290
I'm going to say that we're looking to

00:01:18.290 --> 00:01:23.470
find specific names of individuals in a corpus

00:01:23.470 --> 00:01:29.880
of documents. Maybe the names are Kishore, Arun, Drew, and so on. These are the

00:01:29.880 --> 00:01:35.640
specific names that I want to find in a whole corpus of documents. So the

00:01:35.640 --> 00:01:38.420
input to the application is a whole corpus

00:01:38.420 --> 00:01:41.480
of documents, and we are looking for specific

00:01:41.480 --> 00:01:44.590
names and the number of times those names

00:01:44.590 --> 00:01:48.080
occur in those documents. So that's what the

00:01:48.080 --> 00:01:51.090
appllication is going to do. So the input key

00:01:51.090 --> 00:01:54.960
space for the application is the file name.

00:01:54.960 --> 00:02:00.090
And the value part of the key value bares the content of the file. So if you

00:02:00.090 --> 00:02:07.070
have n files in the corpus of documents that we want to analyze in this fashion,

00:02:07.070 --> 00:02:14.000
then you have N key value pairs corresponding to each of the different files and

00:02:14.000 --> 00:02:16.420
the respective contents. So this is going to

00:02:16.420 --> 00:02:19.390
be the input to the whole application and

00:02:19.390 --> 00:02:22.510
were going to structure this application using this

00:02:22.510 --> 00:02:25.230
programing paradigm of map reduce. And we will

00:02:25.230 --> 00:02:27.920
see how the app developer will use

00:02:27.920 --> 00:02:32.590
the map-reduce framework to accomplish the goal that

00:02:32.590 --> 00:02:34.900
we set out. Which is to find the

00:02:34.900 --> 00:02:38.130
number of occurrences of unique names, in this corpus

00:02:38.130 --> 00:02:42.050
of documents. In this example, the user defined

00:02:42.050 --> 00:02:46.490
map function is looking for each of the unique

00:02:46.490 --> 00:02:49.330
names that we're interested in the corpus of

00:02:49.330 --> 00:02:52.460
documents. So the map function will take as an

00:02:52.460 --> 00:02:55.340
input a specific file and the contents of

00:02:55.340 --> 00:02:57.860
the file as the key value pair, and emit

00:02:57.860 --> 00:03:03.970
a value that corresponds to the number of times each one of these names occur in

00:03:03.970 --> 00:03:07.180
the input file. Now, a simple version of

00:03:07.180 --> 00:03:10.730
the map function may emit a one every time

00:03:10.730 --> 00:03:13.340
it encounters the name Kishore in the input

00:03:13.340 --> 00:03:16.760
file, or the name Arun in the input, or

00:03:16.760 --> 00:03:23.230
the name Drew in the input file. The output of the map function is a key value

00:03:23.230 --> 00:03:26.890
pair, where the key is the unique name

00:03:26.890 --> 00:03:29.420
that you're looking for. One of the unique names

00:03:29.420 --> 00:03:32.350
that you're looking for, and the value is the

00:03:32.350 --> 00:03:36.370
number that says how many times it found that

00:03:36.370 --> 00:03:40.050
particular name. As I said earlier, a simple version

00:03:40.050 --> 00:03:42.840
of the map function could emit the value of

00:03:42.840 --> 00:03:45.830
1 every time it finds one of the specified

00:03:45.830 --> 00:03:48.450
names that it is looking for in the file.

00:03:48.450 --> 00:03:52.180
Or a slightly more elaborate mapper may actually

00:03:52.180 --> 00:03:57.050
combine the number of occurrences of a particular name

00:03:57.050 --> 00:04:01.850
in the input file and then [UNKNOWN] that as a sum of all the times a particular

00:04:01.850 --> 00:04:04.910
name occurred in this key value pair. In

00:04:04.910 --> 00:04:08.460
either case, the output of the map function is

00:04:08.460 --> 00:04:10.400
itself a key value pair. Note that it is

00:04:10.400 --> 00:04:13.480
different from the input key value pair. The output

00:04:13.480 --> 00:04:18.250
key value pair that the mapper is emitting is a unique name and

00:04:18.250 --> 00:04:22.810
a value that is associated with that unique name and from this example it should

00:04:22.810 --> 00:04:28.290
also be evident that we can spawn as many instances

00:04:28.290 --> 00:04:33.480
of the map function as the number of unique files that we

00:04:33.480 --> 00:04:38.520
have in the input document corpus. Further, since each of the

00:04:38.520 --> 00:04:44.730
map function is working on a different key-value pair as an input, they're all

00:04:44.730 --> 00:04:49.370
independent of one another and there is no need for coordination among them. And

00:04:49.370 --> 00:04:51.980
that's the feature of an embarrassingly parallel

00:04:51.980 --> 00:04:56.430
application. The output of the mappers are

00:04:56.430 --> 00:05:03.720
the input to the reducers. In other words, the output key value pair from the

00:05:03.720 --> 00:05:07.160
mapper is the same as the input key value

00:05:07.160 --> 00:05:09.450
pair for each of the reducers that you see

00:05:09.450 --> 00:05:12.550
here. Again this reduce function is something that is

00:05:12.550 --> 00:05:15.910
written by the user. And you notice that what

00:05:15.910 --> 00:05:20.290
the mapper is doing is when it notates a

00:05:20.290 --> 00:05:23.340
particular name in this example that it is looking

00:05:23.340 --> 00:05:26.190
for like Kishore then this mapper is going to

00:05:26.190 --> 00:05:29.710
send the value associated with Kishore to this reducer.

00:05:29.710 --> 00:05:32.720
Similarly this mapper is going to send the value

00:05:32.720 --> 00:05:36.060
associated corresponding to Kishore to the same reducer. And

00:05:36.060 --> 00:05:38.490
all the mappers in the same fashion are

00:05:38.490 --> 00:05:41.870
going to send the respective values that they phone for

00:05:41.870 --> 00:05:45.540
this unique name Kishore, to this reducer. Similarly,

00:05:45.540 --> 00:05:49.090
the values phone for the name Arun, is going to

00:05:49.090 --> 00:05:54.740
be sent to this video set by all the mappers, and so on. So the number of

00:05:54.740 --> 00:06:01.280
reducers that we will have is the same as the number of unique names that

00:06:01.280 --> 00:06:06.700
we are looking for in the corpus of documents. This is where work needs to

00:06:06.700 --> 00:06:13.500
be done by the programming environment to plumb the output of the mappers To the

00:06:13.500 --> 00:06:17.650
inputs of the reducers. Potentially, the mappers could

00:06:17.650 --> 00:06:19.930
be executing on different nodes of the cluster,

00:06:19.930 --> 00:06:22.010
reducers can be executing on different nodes of

00:06:22.010 --> 00:06:24.540
the cluster, and the work that is involved in

00:06:24.540 --> 00:06:27.960
this plumbing is really making sure that the outputs

00:06:27.960 --> 00:06:32.020
of the mappers are fed to the corresponding correct

00:06:32.020 --> 00:06:36.600
reducers in the entire distributed system. For example,

00:06:36.600 --> 00:06:38.610
the output that is coming out of the mapper

00:06:38.610 --> 00:06:41.520
corresponding to Kishore has to be sent to this

00:06:41.520 --> 00:06:45.080
reducer from all the mappers. The output corresponding to

00:06:45.080 --> 00:06:47.630
Arun coming from all these mappers has to

00:06:47.630 --> 00:06:50.170
be sent to this reducer, and so on. That's

00:06:50.170 --> 00:06:51.970
what we mean by the plumbing that needs

00:06:51.970 --> 00:06:55.480
to be done by the programming environment to facilitate

00:06:55.480 --> 00:06:59.590
the communication That needs to happen between instances

00:06:59.590 --> 00:07:03.390
of the mapper and the instances of the reducers.

00:07:03.390 --> 00:07:06.350
The work performed by each one of these reducers

00:07:06.350 --> 00:07:10.130
is going to be aggregation of the values that it

00:07:10.130 --> 00:07:15.940
got for each of the unique names that we're looking for in the input document

00:07:15.940 --> 00:07:18.870
corpus. So this reducer's job is to

00:07:18.870 --> 00:07:22.880
aggregate all the instances of Kishore that it

00:07:22.880 --> 00:07:24.830
got from all the mappers. So it

00:07:24.830 --> 00:07:28.560
is receiving the key-value pair corresponding to the

00:07:28.560 --> 00:07:31.200
name Kishore and the number of instances

00:07:31.200 --> 00:07:35.240
that they found in the input key-value pair

00:07:35.240 --> 00:07:38.040
that they processed, and the reducer is going to

00:07:38.040 --> 00:07:41.610
aggregate that And the output of the reducers, all

00:07:41.610 --> 00:07:43.840
the reducers, is once again going to be a

00:07:43.840 --> 00:07:46.610
key value pair. It is exactly the same as

00:07:46.610 --> 00:07:49.220
the input key value pair that the reducers got.

00:07:49.220 --> 00:07:53.280
Namely, the key is the unique name that they've

00:07:53.280 --> 00:07:56.560
been assigned to aggregate, and the value is the

00:07:56.560 --> 00:08:00.090
total number of the occurrence of this unique name.

00:08:00.090 --> 00:08:02.690
In the corpus of documents we started with.

00:08:02.690 --> 00:08:05.115
So this is the roadmap for creating a

00:08:05.115 --> 00:08:09.670
map-reduce application for a chosen application that works

00:08:09.670 --> 00:08:11.870
on big data. So in this case, the

00:08:11.870 --> 00:08:15.250
chosen application was looking for unique names in

00:08:15.250 --> 00:08:17.750
a corpus of documents, and all that the

00:08:17.750 --> 00:08:21.820
domain expert had to worry about, is deciding

00:08:21.820 --> 00:08:25.510
what is the format of the key value pair,

00:08:25.510 --> 00:08:28.550
which is the input to the whole application, in

00:08:28.550 --> 00:08:32.220
particular, the map phase of the application. And also, what

00:08:32.220 --> 00:08:35.470
is the format of the intermediate key value pair that

00:08:35.470 --> 00:08:38.919
is going to be generated by the mapper function. And what

00:08:38.919 --> 00:08:40.750
is the work that needs to be done in

00:08:40.750 --> 00:08:44.350
each of the mapper and the reducer to carry out

00:08:44.350 --> 00:08:46.860
the work that needs to be done for this particular

00:08:46.860 --> 00:08:50.600
application. Beyond that, the app developer does not have to

00:08:50.600 --> 00:08:52.730
worry about any of the other details, such

00:08:52.730 --> 00:08:54.940
as how many instances of mappers do we need

00:08:54.940 --> 00:08:57.010
to create. How do we create the number of

00:08:57.010 --> 00:09:01.550
instances of reducers corresponding to what this application is

00:09:01.550 --> 00:09:05.680
wanting to do, and also worrying about the plumbing

00:09:05.680 --> 00:09:08.480
from the output of the mappers to the input

00:09:08.480 --> 00:09:11.750
of the reducers, all of those, are things that

00:09:11.750 --> 00:09:13.880
the app developer does not have to worry about.

