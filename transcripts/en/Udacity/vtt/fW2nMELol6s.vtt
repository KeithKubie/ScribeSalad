WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.440
Next, we turn our attention briefly to internet routing. That is,

00:00:03.440 --> 00:00:06.280
what hops a packet will take to get from one endpoint

00:00:06.280 --> 00:00:09.670
to the other. Let's say Georgia Tech student is curious about

00:00:09.670 --> 00:00:12.550
what is going on at the MIT Media Lab. Of course

00:00:12.550 --> 00:00:14.530
there is no direct link, so data is going to have

00:00:14.530 --> 00:00:18.460
to take several intermediate hops. The essential data structure here is

00:00:18.460 --> 00:00:22.270
a routing table that translates the IP address to the next

00:00:22.270 --> 00:00:26.100
hop i.e. the address the package should be sent to next.

00:00:26.100 --> 00:00:28.810
Every node on the internet should have a different routing table.

00:00:28.810 --> 00:00:31.040
There is much that is interesting in the shortest path like

00:00:31.040 --> 00:00:33.940
algorithms used to figure out what the next stop should be

00:00:33.940 --> 00:00:36.730
and also in the implementation of the routing table. Should it

00:00:36.730 --> 00:00:40.770
be a hash table? A tri? Etc. Here, however, I want

00:00:40.770 --> 00:00:43.890
to address the question of the size of the table. In

00:00:43.890 --> 00:00:47.670
a very naive approach, the routing table would require almost two

00:00:47.670 --> 00:00:51.370
to the 32 entries, one for each IP address on the internet.

00:00:51.370 --> 00:00:54.500
Fortunately this isn't necessary. Because IPs are

00:00:54.500 --> 00:00:57.670
largely allocated based on region, similar IPs will

00:00:57.670 --> 00:01:00.620
often take similar routes. For instance, consider

00:01:00.620 --> 00:01:03.880
traffic between Georgia Tech and MIT. As mentioned

00:01:03.880 --> 00:01:09.110
earlier, MIT owns the 18.0.0/8 address space.

00:01:09.110 --> 00:01:11.440
Meaning that every IP that starts with 18,

00:01:11.440 --> 00:01:16.410
needs to go to Boston and MIT campus. All the traffic from Georgia Tech to

00:01:16.410 --> 00:01:18.740
MIT will likely follow the same first hop

00:01:18.740 --> 00:01:21.900
or two, then only later split in Boston. Therefore,

00:01:21.900 --> 00:01:24.540
Georgia Tech routers don't need 16 million entries for

00:01:24.540 --> 00:01:28.500
MIT. One entry that matches anything starting with 18

00:01:28.500 --> 00:01:31.930
suffices. All the traffic will be correctly routed up

00:01:31.930 --> 00:01:35.430
towards Boston. This principle can be applied more broadly.

00:01:35.430 --> 00:01:37.860
To keep the size of routing tables manageable. To

00:01:37.860 --> 00:01:42.385
see the routing table on your machine, run nestat-nr.

