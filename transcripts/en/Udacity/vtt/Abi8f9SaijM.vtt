WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:04.620
Now let's discuss how both
the initiator and responder

00:00:04.620 --> 00:00:09.070
can compute shared keys based on the
information that they just exchanged.

00:00:09.070 --> 00:00:14.380
In our example, the initiator and
responder have a pre-shared secret key,

00:00:14.380 --> 00:00:18.770
and based on the information exchanged
between the initiator and responder,

00:00:18.770 --> 00:00:22.874
they can both compute the following
keys using a pseudo-random function.

00:00:22.874 --> 00:00:26.796
The pseudo-random function
can be built using HMAC and

00:00:26.796 --> 00:00:30.397
SHA-1 to generate
a pseudo-random bitstream.

00:00:30.397 --> 00:00:35.200
Recall that HMAC's SHA-1 takes
a message, say a block of data, and

00:00:35.200 --> 00:00:41.935
a key of length at least 160 bits,
and produces a 160 bit hash value.

00:00:41.935 --> 00:00:47.287
SHA-1 has the property that the change
of a single bit of the input produces

00:00:47.287 --> 00:00:52.840
a new hash value with no apparent
connection to the preceeding hash value.

00:00:52.840 --> 00:00:57.270
This property is the basis for
pseudo-random number generation.

00:00:57.270 --> 00:01:01.910
Both the initiator and
responder computer root share secret.

00:01:01.910 --> 00:01:04.534
This is computed using
the pre-shared key and

00:01:04.534 --> 00:01:07.510
the nonce values that
they have exchanged.

00:01:07.510 --> 00:01:13.300
Next, they compute a key for IPSec SA,
this key is computed as follows.

00:01:13.300 --> 00:01:16.490
They use the root secret as the key for

00:01:16.490 --> 00:01:21.570
the pseudo-random function and the info
data block contains four values.

00:01:21.570 --> 00:01:25.740
The first one is K,
which is a shared secret key computed

00:01:25.740 --> 00:01:28.200
using the Diffie-Hellman
case change protocol.

00:01:28.200 --> 00:01:33.920
Second, the computer shared key
used to derive keys for IPSec SAs.

00:01:33.920 --> 00:01:37.410
This key is computed using
the pseudo-random function

00:01:37.410 --> 00:01:41.650
on the root secret and
the input blog contains four values.

00:01:41.650 --> 00:01:44.905
The first one, K,
is the shared secret key computed using

00:01:44.905 --> 00:01:47.946
the Diffie-Hellman key
exchange protocol.

00:01:47.946 --> 00:01:51.100
The second and
third values are the cookies exchanged

00:01:51.100 --> 00:01:56.270
between the initiator and the responder,
and the fourth value is the number zero.

00:01:56.270 --> 00:01:59.650
Then in a similar fashion,
both the initiator and

00:01:59.650 --> 00:02:04.470
responder compute the keys for IKE
message authentication and encryption.

