WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:02.940
It was pointed out in the
comments for the last video,

00:00:02.940 --> 00:00:05.660
where I defined this
insertion_sort, that I didn't

00:00:05.660 --> 00:00:08.440
necessarily have
to do this break.

00:00:08.440 --> 00:00:09.820
And this is one
of those examples

00:00:09.820 --> 00:00:12.278
that sometimes when you just
program something-- in the way

00:00:12.278 --> 00:00:15.000
that, at least, your brain
is thinking about it--

00:00:15.000 --> 00:00:17.612
you don't always do it in
maybe the most elegant way.

00:00:17.612 --> 00:00:18.820
And that commenter was right.

00:00:18.820 --> 00:00:22.580
There was actually maybe
a lot more elegant way

00:00:22.580 --> 00:00:25.310
to actually do this
insertion_sort.

00:00:25.310 --> 00:00:27.570
So over here, if we go
into the while loop,

00:00:27.570 --> 00:00:30.300
I have this while
loop happening while i

00:00:30.300 --> 00:00:32.220
is greater than or equal to 0.

00:00:32.220 --> 00:00:34.810
But then I want it to
essentially break out

00:00:34.810 --> 00:00:42.480
of that while loop, if the
variable value is not less

00:00:42.480 --> 00:00:46.620
than the i-th element in list.

00:00:46.620 --> 00:00:49.290
So one way to do
this-- because really,

00:00:49.290 --> 00:00:52.380
I'm just defining the parameters
on when to do this while loop.

00:00:52.380 --> 00:00:55.800
Instead of doing
this if the value is

00:00:55.800 --> 00:00:58.172
less than the i-th element,
do this and otherwise break.

00:00:58.172 --> 00:01:00.380
What I could have done--
and this would have actually

00:01:00.380 --> 00:01:01.920
been a more elegant
way to do this--

00:01:01.920 --> 00:01:09.730
while i is greater than
or equal to 0 and value

00:01:09.730 --> 00:01:16.860
is less than the
i-th element in list.

00:01:16.860 --> 00:01:20.210
So now this is still
the same as before.

00:01:20.210 --> 00:01:21.844
But now I know
that value is less

00:01:21.844 --> 00:01:23.260
than the i-th
element in the list.

00:01:23.260 --> 00:01:24.930
So I will execute
this code over here.

00:01:24.930 --> 00:01:26.650
So I know that this
is going to be true.

00:01:32.190 --> 00:01:36.110
Let me take all of
these one level back.

00:01:36.110 --> 00:01:37.610
And then I don't
have to do an else.

00:01:37.610 --> 00:01:40.050
And I don't have to break
out of the loop anymore.

00:01:40.050 --> 00:01:43.320
And so that should simplify
the program a good bit.

00:01:43.320 --> 00:01:47.500
But let's verify for ourselves
that this actually works.

00:01:47.500 --> 00:01:49.120
So let me save it.

00:01:49.120 --> 00:01:51.490
And then let me run it.

00:01:56.310 --> 00:01:58.080
Let me define a list.

00:01:58.080 --> 00:02:15.460
So I'll just call it c is equal
to 1, 5, 6, 7, 2, 4, 14, and 2.

00:02:15.460 --> 00:02:16.690
So let's just define that.

00:02:16.690 --> 00:02:20.090
And let's try our
insertion_sort.

00:02:20.090 --> 00:02:22.749
Insertion_sort on c.

00:02:22.749 --> 00:02:23.790
So let's see what we get.

00:02:23.790 --> 00:02:25.930
So let's see.

00:02:25.930 --> 00:02:27.410
Let's print c now.

00:02:27.410 --> 00:02:28.340
And there you go.

00:02:28.340 --> 00:02:29.130
It's sorted it.

00:02:29.130 --> 00:02:31.190
So thank you for the comment.

00:02:31.190 --> 00:02:34.790
I think this does
simplify it a little bit.

00:02:34.790 --> 00:02:36.700
Sometimes you always
have to question,

00:02:36.700 --> 00:02:38.610
especially if you have
a while statement,

00:02:38.610 --> 00:02:40.834
is there a better way
instead of using the break.

00:02:40.834 --> 00:02:43.000
Because that's essentially--
I'm putting a condition

00:02:43.000 --> 00:02:44.880
on a reason to break
out of the while loop.

00:02:44.880 --> 00:02:48.450
But why don't I implicitly
just put it up here?

