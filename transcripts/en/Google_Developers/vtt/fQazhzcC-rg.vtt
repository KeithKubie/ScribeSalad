WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:01.740
MALE SPEAKER: This is
the first of our

00:00:01.740 --> 00:00:03.600
two datastore sessions.

00:00:03.600 --> 00:00:06.490
You've already learned about the
App Engine, so we're now

00:00:06.490 --> 00:00:09.440
discussing this important
peripheral service both in

00:00:09.440 --> 00:00:13.570
this introductory session,
followed by an advanced one.

00:00:13.570 --> 00:00:17.420
For this introductory course
session, it's very basic, like

00:00:17.420 --> 00:00:20.150
what is a datastore as well
as some internals.

00:00:20.150 --> 00:00:23.400
We'll talk about how the
underlying BigTable provides

00:00:23.400 --> 00:00:25.550
the scalability and reliability

00:00:25.550 --> 00:00:27.940
issue of the data store.

00:00:27.940 --> 00:00:30.900
And finally, we'll go beyond
theory by covering more

00:00:30.900 --> 00:00:35.360
practical operations about
how to use the datastore.

00:00:35.360 --> 00:00:38.110
There are many definitions of
the datastore but very simply

00:00:38.110 --> 00:00:41.900
and easy to understand, it's a
persistent storage for App

00:00:41.900 --> 00:00:43.480
Engine data.

00:00:43.480 --> 00:00:46.630
Why does App Engine need
to store the data?

00:00:46.630 --> 00:00:48.960
You've already learned that App
Engine is the framework to

00:00:48.960 --> 00:00:51.330
run the web application.

00:00:51.330 --> 00:00:53.800
Its nature is very scalable.

00:00:53.800 --> 00:00:56.810
Basically, the scalability means
that if your application

00:00:56.810 --> 00:01:00.520
is a surge on the load, it
automatically increases the

00:01:00.520 --> 00:01:02.300
number of instances.

00:01:02.300 --> 00:01:05.890
So we need some central place
to save the data, otherwise

00:01:05.890 --> 00:01:08.420
this instance and that
instance would return

00:01:08.420 --> 00:01:10.780
different results for
the same request.

00:01:10.780 --> 00:01:13.390
This is not an App Engine
specific problem.

00:01:13.390 --> 00:01:16.530
If you've worked on other
traditional web applications

00:01:16.530 --> 00:01:21.880
such as CGI to the more recent
PHP, relational databases and

00:01:21.880 --> 00:01:25.090
datastores for App Engine is a
counterpart of the relational

00:01:25.090 --> 00:01:27.310
database or RDB.

00:01:27.310 --> 00:01:30.100
So the question is, why
don't we use an RTB?

00:01:30.100 --> 00:01:33.250
Why does Google provide
datastore instead of using

00:01:33.250 --> 00:01:35.410
some relational database?

00:01:35.410 --> 00:01:37.150
The answer is really easy--

00:01:37.150 --> 00:01:38.600
scalability.

00:01:38.600 --> 00:01:42.300
So if the App Engine is highly
scalable, this datastore must

00:01:42.300 --> 00:01:44.930
also match its scalability.

00:01:44.930 --> 00:01:47.930
Let's look into database
scalability to explain why

00:01:47.930 --> 00:01:52.920
Google uses datastore as
database for App Engine.

00:01:52.920 --> 00:01:54.720
So let's first compare
the datastore

00:01:54.720 --> 00:01:56.420
with relational databases.

00:01:56.420 --> 00:01:59.610
If I look clearly, an RDB
supports the following

00:01:59.610 --> 00:02:00.840
functionality.

00:02:00.840 --> 00:02:04.160
It includes a table JOIN,
flexible filtering, and

00:02:04.160 --> 00:02:05.290
subqueries.

00:02:05.290 --> 00:02:08.250
The datastore supports some of
these, but its functionality

00:02:08.250 --> 00:02:12.170
is limited to the simple
filtering and sorting.

00:02:12.170 --> 00:02:14.970
On the other hand, datastore
is highly scalable and

00:02:14.970 --> 00:02:18.540
reliable without sacrificing
performance.

00:02:18.540 --> 00:02:22.170
RDBs, however, are really
difficult to scale.

00:02:22.170 --> 00:02:25.620
First, let's look at a server
configuration of databases.

00:02:25.620 --> 00:02:27.770
The server can be a
single instance.

00:02:27.770 --> 00:02:30.050
This is a simple configuration,
but here the

00:02:30.050 --> 00:02:33.130
performance of the system is
limited by hardware resources

00:02:33.130 --> 00:02:34.160
of the machine.

00:02:34.160 --> 00:02:37.190
And it's going to be the single
point of failure.

00:02:37.190 --> 00:02:40.850
If we have replication or
copies, it increases the

00:02:40.850 --> 00:02:42.240
reliability.

00:02:42.240 --> 00:02:46.540
But here arises the issue of
consistency among all server

00:02:46.540 --> 00:02:50.390
instances, We can also shard.

00:02:50.390 --> 00:02:54.480
Now, shard means split the
server or data into multiple

00:02:54.480 --> 00:02:58.350
machines, so that the multiple
machines altogether work as

00:02:58.350 --> 00:03:00.080
one machine.

00:03:00.080 --> 00:03:03.190
If we shard the database,
we often must look for

00:03:03.190 --> 00:03:07.380
transactions which will become
more complicated.

00:03:07.380 --> 00:03:11.300
Let's talk about consistency,
which I'm going to use a lot.

00:03:11.300 --> 00:03:13.470
Consistency can have
two levels--

00:03:13.470 --> 00:03:15.790
strong or eventual.

00:03:15.790 --> 00:03:19.450
Strong consistency means that
the data is always consistent,

00:03:19.450 --> 00:03:23.100
whatever happens into whatever
server to query.

00:03:23.100 --> 00:03:26.510
When write operation is
finished, data is already

00:03:26.510 --> 00:03:28.660
consistent among all servers.

00:03:28.660 --> 00:03:32.240
Or if a server fails in the
middle of a write operation or

00:03:32.240 --> 00:03:35.550
in the middle of whatever
operation, all servers return

00:03:35.550 --> 00:03:37.860
the same result.

00:03:37.860 --> 00:03:41.770
Eventual consistency indicates
that data will eventually be

00:03:41.770 --> 00:03:42.710
consistent.

00:03:42.710 --> 00:03:45.870
But we have a certain timeframe
where data is not

00:03:45.870 --> 00:03:47.250
consistent.

00:03:47.250 --> 00:03:51.110
DNS or domain name services is
a good and easy to understand

00:03:51.110 --> 00:03:53.590
example of eventual
consistency.

00:03:53.590 --> 00:03:55.910
DNS is thought of
as a worldwide

00:03:55.910 --> 00:03:57.960
distributed database system.

00:03:57.960 --> 00:04:00.690
When you update a configuration
on your domain,

00:04:00.690 --> 00:04:03.990
it's not reflected to
all DNS immediately.

00:04:03.990 --> 00:04:07.900
For a certain period of time,
some DNS servers return old

00:04:07.900 --> 00:04:11.480
configurations and others return
the new configuration.

00:04:11.480 --> 00:04:15.290
But eventually, all DNS
servers return the new

00:04:15.290 --> 00:04:17.370
configuration.

00:04:17.370 --> 00:04:20.740
A traditional RDB ensures
strong consistency.

00:04:20.740 --> 00:04:23.360
This is the reason why it's
hard to ensure scalability

00:04:23.360 --> 00:04:27.370
without sacrificing performance
in RGB and the

00:04:27.370 --> 00:04:32.130
reason why Google pursued
another solution, datastore,

00:04:32.130 --> 00:04:33.760
for App Engine.

00:04:33.760 --> 00:04:36.950
Datastore is based on BigTable,
which is a super

00:04:36.950 --> 00:04:40.550
high scalability underlying
technology

00:04:40.550 --> 00:04:42.380
used throughout Google.

00:04:42.380 --> 00:04:45.070
And BigTable is a key for
datastore to secure

00:04:45.070 --> 00:04:46.450
scalability.

00:04:46.450 --> 00:04:49.160
So we'll spend some time to look
into BigTable and how it

00:04:49.160 --> 00:04:50.140
achieves it.

00:04:50.140 --> 00:04:52.010
So this is the BigTable.

00:04:52.010 --> 00:04:55.730
It's a mechanism to offer
scalability to the datastore.

00:04:55.730 --> 00:04:58.030
So what is a BigTable?

00:04:58.030 --> 00:05:01.440
BigTable is a scalable,
distributed, highly available

00:05:01.440 --> 00:05:03.220
and structured storage.

00:05:03.220 --> 00:05:06.310
So the key thing here
is a BigTable is not

00:05:06.310 --> 00:05:07.840
a database by itself.

00:05:07.840 --> 00:05:09.990
It doesn't support the query.

00:05:09.990 --> 00:05:12.050
So it's storage of the data.

00:05:12.050 --> 00:05:16.780
It has strong consistency
for a single row.

00:05:16.780 --> 00:05:19.590
And I think the best part is,
it's being used throughout

00:05:19.590 --> 00:05:21.480
Google for more than
seven years.

00:05:21.480 --> 00:05:24.920
And it's used by web search,
YouTube, analytics, and many

00:05:24.920 --> 00:05:26.690
other projects throughout.

00:05:26.690 --> 00:05:30.350
This is a pretty picture about
how the BigTable scales and is

00:05:30.350 --> 00:05:33.350
really the key of scalability.

00:05:33.350 --> 00:05:37.220
Take a close look at one shard
of data in the BigTable

00:05:37.220 --> 00:05:40.850
tablet, which is just the
name of the server.

00:05:40.850 --> 00:05:43.300
So this shard, this
tablet server,

00:05:43.300 --> 00:05:45.040
has many write requests.

00:05:45.040 --> 00:05:48.450
It has so many write requests
that it needs to multiply.

00:05:48.450 --> 00:05:51.450
And then we have two sets
of tablets servers.

00:05:51.450 --> 00:05:54.680
So then the load is distributed
into two servers,

00:05:54.680 --> 00:05:56.100
two tablets.

00:05:56.100 --> 00:05:57.680
And this happens
automatically.

00:05:57.680 --> 00:06:00.640
So you don't really need to care
about whether you need to

00:06:00.640 --> 00:06:04.150
increase the number of
servers or tablets.

00:06:04.150 --> 00:06:07.170
This is the BigTable
data model.

00:06:07.170 --> 00:06:11.490
Big data is data storage, and
it's a key value data storage.

00:06:11.490 --> 00:06:15.520
So here in BigTable, we call
a value as columns.

00:06:15.520 --> 00:06:18.060
And internally in those,
the data is

00:06:18.060 --> 00:06:19.990
sorted by a key order--

00:06:19.990 --> 00:06:22.630
key and lexical order.

00:06:22.630 --> 00:06:26.830
And the facts are sorted by key
to enable the range query

00:06:26.830 --> 00:06:28.830
by the application.

00:06:28.830 --> 00:06:31.960
Application means the user
of the BigTable.

00:06:31.960 --> 00:06:34.300
Here is one BigTable support.

00:06:34.300 --> 00:06:35.910
BigTable supports CRUD.

00:06:35.910 --> 00:06:39.380
Now that's create, read, update,
and delete operations

00:06:39.380 --> 00:06:40.500
on our own.

00:06:40.500 --> 00:06:43.920
And it's strong consistency
but not multiple rows.

00:06:43.920 --> 00:06:47.280
And the support scans
by range of keys.

00:06:47.280 --> 00:06:49.880
So in this example, we're
retrieving the rows with

00:06:49.880 --> 00:06:53.140
prefix B. You want
B to be three.

00:06:53.140 --> 00:06:56.600
Or in the second example, you
can get rows with keys ranging

00:06:56.600 --> 00:07:00.330
from B to D. So this is
what BigTable can do.

00:07:00.330 --> 00:07:04.640
But what BigTable can't do is
search by column values.

00:07:04.640 --> 00:07:07.940
So you can't get column or
rows where the column has

00:07:07.940 --> 00:07:09.330
certain values.

00:07:09.330 --> 00:07:12.680
This is a limitation
of BigTable.

00:07:12.680 --> 00:07:16.070
Yes, this is a Google solution
for the datastore.

00:07:16.070 --> 00:07:19.670
It's actually how we secure with
scalability, reliability,

00:07:19.670 --> 00:07:21.230
and performance.

00:07:21.230 --> 00:07:25.680
So the scalability is based on
BigTable automated sharding.

00:07:25.680 --> 00:07:28.350
BigTable applications
are reliable.

00:07:28.350 --> 00:07:31.940
It ensures access to your data
if the server is down.

00:07:31.940 --> 00:07:35.740
And Megastore supports
transactions, which offer you

00:07:35.740 --> 00:07:37.870
the strong consistency.

00:07:37.870 --> 00:07:39.560
Finally, performance--

00:07:39.560 --> 00:07:42.360
reducing the lock granularity
and allows

00:07:42.360 --> 00:07:43.730
co-location of the data.

00:07:43.730 --> 00:07:46.860
So during the transaction,
the data you need can

00:07:46.860 --> 00:07:48.390
be safe in one shard.

00:07:48.390 --> 00:07:50.920
So that drastically reduces
the necessity of the

00:07:50.920 --> 00:07:53.840
communication be
with the shard.

00:07:53.840 --> 00:07:56.610
This is a big difference from
the relational database.

00:07:56.610 --> 00:08:00.380
This is how you know Google
achieves these three.

00:08:00.380 --> 00:08:03.800
This is the internals
of the datastore.

00:08:03.800 --> 00:08:05.655
Let's move on to the
actual usage part--

00:08:05.655 --> 00:08:07.000
the practical part.

00:08:07.000 --> 00:08:10.440
The datastore and RDB use
different terms for the same

00:08:10.440 --> 00:08:12.140
corresponding concepts.

00:08:12.140 --> 00:08:16.130
For example, the category of the
object, which type of the

00:08:16.130 --> 00:08:21.130
object, is a kind in datastore
versus a table in RDB.

00:08:21.130 --> 00:08:25.280
And the one entry of the data is
an entity instead of a row.

00:08:25.280 --> 00:08:29.130
And the unique identifier or
a file is a key in both.

00:08:29.130 --> 00:08:32.850
The individual data in the
entity is called the property

00:08:32.850 --> 00:08:36.000
instead of the field in RDB.

00:08:36.000 --> 00:08:40.270
Perhaps this real example will
be easier to understand.

00:08:40.270 --> 00:08:41.970
Here's an example
application of a

00:08:41.970 --> 00:08:44.080
blog with social features.

00:08:44.080 --> 00:08:46.130
We have two kinds
of data here--

00:08:46.130 --> 00:08:49.530
a blog entry and a user.

00:08:49.530 --> 00:08:54.430
Each key is unique with one
blog entry and two users.

00:08:54.430 --> 00:08:56.320
These are called entities.

00:08:56.320 --> 00:08:58.270
The property is the actual
data you want to

00:08:58.270 --> 00:08:59.660
store in the datastore.

00:08:59.660 --> 00:09:03.020
So in this example, the blog
entry, the name, message and

00:09:03.020 --> 00:09:05.990
date are the properties.

00:09:05.990 --> 00:09:08.800
Note user Joe has
two followers.

00:09:08.800 --> 00:09:11.620
And the property has multiple
values here.

00:09:11.620 --> 00:09:14.320
It's different from an RDB
structure where we use two

00:09:14.320 --> 00:09:17.180
tables, one for user
and another for

00:09:17.180 --> 00:09:19.100
relations of users.

00:09:19.100 --> 00:09:22.350
Also, Joe has no followers,
which is also valid.

00:09:22.350 --> 00:09:24.320
Datastore allows us
to have multiple

00:09:24.320 --> 00:09:26.040
data for one property.

00:09:26.040 --> 00:09:29.310
And it also allows the
empty data like this.

00:09:29.310 --> 00:09:33.960
So this is the other big
difference from RDB.

00:09:33.960 --> 00:09:36.570
This is a more practical example
about how we create an

00:09:36.570 --> 00:09:41.400
entry or entity in a
Java low-level API.

00:09:41.400 --> 00:09:45.760
The point is we first create
an entity Java object.

00:09:45.760 --> 00:09:47.450
Then we set properties.

00:09:47.450 --> 00:09:51.750
And finally, we put this Java
object into the datastore with

00:09:51.750 --> 00:09:55.100
this put function, which
actually communicates with the

00:09:55.100 --> 00:09:58.140
datastore and it
saves the data.

00:09:58.140 --> 00:10:00.680
This same pattern is
used in Python.

00:10:00.680 --> 00:10:02.550
First create a Python object.

00:10:02.550 --> 00:10:06.230
Then set properties, either by
giving values to constructor

00:10:06.230 --> 00:10:08.270
or by setting values
afterwards.

00:10:08.270 --> 00:10:13.560
And lastly, put saves the
data into the datastore.

00:10:13.560 --> 00:10:16.610
These are only some examples of
the low-level APIs in both

00:10:16.610 --> 00:10:18.280
Java and Python.

00:10:18.280 --> 00:10:22.560
We actually have various kinds
of APIs and also some third

00:10:22.560 --> 00:10:25.330
party frameworks for Java
you can choose from.

00:10:25.330 --> 00:10:28.570
You might want one with a
standard API providing you

00:10:28.570 --> 00:10:31.000
with more portability
or one with more

00:10:31.000 --> 00:10:33.400
functionality, like caching.

00:10:33.400 --> 00:10:37.020
Or another to use more
high level APIs.

00:10:37.020 --> 00:10:39.100
We might introduce new APIs.

00:10:39.100 --> 00:10:41.310
So some API might
be deprecated.

00:10:41.310 --> 00:10:42.920
It can change from
time to time.

00:10:46.890 --> 00:10:50.120
The most important thing to
remember from this lesson is

00:10:50.120 --> 00:10:53.610
the datastore is a highly
scalable and highly reliable

00:10:53.610 --> 00:10:56.490
database that Google offers
for App Engine.

00:11:00.260 --> 00:11:02.770
Finally, here are some more
documents you may want to

00:11:02.770 --> 00:11:04.320
refer to for more details.

