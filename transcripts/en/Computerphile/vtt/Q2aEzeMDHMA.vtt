WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:03.280
In the last video, we talked about the beginnings of JPEG, so

00:00:03.520 --> 00:00:07.480
what do we do at the beginning of the process to start preparing for the discrete cosine transform,

00:00:07.740 --> 00:00:11.320
which is really how the lossy compression happens within a JPEG.

00:00:14.560 --> 00:00:17.640
We start with our RGB image, we convert that into YCbCr color space,

00:00:18.320 --> 00:00:20.500
which separates illuminance and chrominance.

00:00:20.580 --> 00:00:22.920
And then we can down sample the chrominance if we want,

00:00:23.240 --> 00:00:27.080
and we can kind of get away with quite a bit of down sampling there that people won't be able to see.

00:00:27.520 --> 00:00:29.720
The next step is the discrete cosine transform.

00:00:32.540 --> 00:00:36.280
Before we start talking about how images are compressed using the discrete cosine transform,

00:00:36.740 --> 00:00:41.480
it's much better just to start with a simple example of what a discrete cosine transform is and how it works.

00:00:41.500 --> 00:00:46.940
A cosine function, for anyone who isn't familiar with it, is a function that goes between 1 and -1.

00:00:47.140 --> 00:00:52.420
What we tend to do on this x-axis is go from 0, to pi, to 2*pi.

00:00:52.700 --> 00:00:59.040
This is in radians, those of you familiar with degrees, this is 180° at pi, and 360° at 2*pi.

00:00:59.100 --> 00:01:06.040
And the cosine wave looks like this. So it's 1 at 0, and then at pi, it goes down to -1,

00:01:06.040 --> 00:01:09.160
And then it goes back up to one at 2*pi.

00:01:09.180 --> 00:01:12.120
And it just goes on and on like this up and down as you increase.

00:01:12.180 --> 00:01:16.680
The way that the discrete cosine transform works, is we take some data, in this case our image data,

00:01:16.720 --> 00:01:20.640
and we try to represent it as the sum of lots of these waves.

00:01:20.640 --> 00:01:22.620
Which doesn't make a lot of sense until you start drawing them out.

00:01:22.660 --> 00:01:27.540
So let's imagine that we've got this cosine wave here, which is our standard frequency cosine wave,

00:01:27.600 --> 00:01:31.040
and then we've got another cosine wave, which is a much higher frequency.

00:01:31.140 --> 00:01:34.740
So that would be, come down a bit faster, go up a bit faster,

00:01:34.820 --> 00:01:38.200
come down a bit faster, and go up a bit faster like this.

00:01:38.220 --> 00:01:43.760
So  now we have two waves. If we add them together, what we get is a sort of another wave

00:01:43.760 --> 00:01:45.020
which is a combination of the two.

00:01:45.020 --> 00:01:50.520
So if we draw it in here in this dashed line, we can see halfway between these two waves

00:01:50.580 --> 00:01:53.560
is like this, and then kind of like this.

00:01:53.640 --> 00:01:57.840
And you can see that we've created a more complex shaped wave by adding these two together.

00:01:59.000 --> 00:02:02.040
Now, as we increase the number of cosines,

00:02:02.040 --> 00:02:05.860
we can increase the number of possible shapes of waves that we can produce

00:02:05.860 --> 00:02:09.840
In practice, if we added these two waves together, we'd have a wave that was much taller than the input

00:02:09.840 --> 00:02:11.780
So here, it would be two, not one.

00:02:11.780 --> 00:02:15.600
So what in fact we do is we weight both of these, and so we take an average

00:02:15.600 --> 00:02:20.780
So both of these are weighted, in this case it's a half, and so this is essentially the average of both of them.

00:02:21.060 --> 00:02:23.620
We can also change the weighting of these.

00:02:23.620 --> 00:02:28.440
So we can have it with mostly this higher frequency one, but only a little bit of this low frequency one.

00:02:28.440 --> 00:02:30.960
And we'd have a different shaped wave coming out at the end.

00:02:31.300 --> 00:02:35.560
So each wave represents a small constituent of the output.

00:02:35.760 --> 00:02:39.940
And the higher the frequency of the wave, the higher   the frequency part of the signal we're dealing with.

00:02:39.940 --> 00:02:41.780
So if we look at my jumper here,

00:02:41.880 --> 00:02:47.620
there's a low frequency change from this black table to a brightness, bright of my jumper, to dark table again.

00:02:47.620 --> 00:02:52.820
And there's much higher frequency changes on my jumper, where we go up and down within the woolen knit.

00:02:52.960 --> 00:02:58.360
And it's the same kind of principle. We're arguing in JPEG that we can get rid of some of the higher frequency signals

00:02:58.360 --> 00:03:01.600
and the general gist of the image will still be there.

00:03:01.660 --> 00:03:06.000
So this is just a one-dimensional discrete cosine transform with only two components.

00:03:06.300 --> 00:03:11.060
The way that the mathematics works, is if we have a signal that 8 long,

00:03:11.060 --> 00:03:16.100
Then we find that we can represent it using 8 cosine waves of different frequencies.

00:03:16.340 --> 00:03:22.320
And the same is true of an image. What we do in JPEG is we split each image into 8 by 8 pixel groups.

00:03:22.320 --> 00:03:27.300
And each of those pixel groups is separately encoded with its own discrete cosine transform.

00:03:27.540 --> 00:03:34.160
Each of those 8 by 8 pixel groups can be exactly replicated by 64, so 8 by 8 cosine waves.

00:03:34.420 --> 00:03:42.600
This actually shows the 64 base cosine waves that produce any image we might like to do in 8 by 8 pixels.

00:03:42.600 --> 00:03:45.820
This particular component here, is essentially flat.

00:03:45.900 --> 00:03:52.060
So if you had only this component, and that was all the contributed to your final output, your image would look like that.

00:03:52.060 --> 00:03:57.120
If you had only this one, your image would go white, and then it would dip down and go black.

00:03:57.120 --> 00:04:00.280
And you can see that the frequency is increasing as we go along here.

00:04:00.280 --> 00:04:05.120
This is in the x direction, and in the y direction, the frequency is increasing down here.

00:04:05.120 --> 00:04:10.080
So this is a cosine wave, and this is a higher frequency cosine wave down here.

00:04:10.080 --> 00:04:13.500
As we increase the frequency in both directions, we get a kind of checkerboard pattern.

00:04:13.500 --> 00:04:18.860
And this is a high frequency information that we're encoding in these regions.

00:04:18.860 --> 00:04:26.000
So these are the 64 cosines functions that can be combined to make any 8 by 8 image.

00:04:26.220 --> 00:04:30.180
This is only in one channel, so let's say just illuminance or just Cr.

00:04:30.220 --> 00:04:34.440
For example, if we had half of this wave and half of this wave,

00:04:34.440 --> 00:04:38.560
then what you get is a square image that is generally brighter on the left

00:04:38.560 --> 00:04:42.080
with a little bit of bright on the right hand side, because you've summed the two together.

00:04:42.080 --> 00:04:47.860
To create any kind of 8 by 8 image, what we need to do is have a combination of all of these at the same time.

00:04:47.860 --> 00:04:51.360
Each of these is weighted based on something called a coefficient

00:04:51.360 --> 00:04:57.540
Which is a number representing the contribution of each of these individual blocks to the whole.

00:04:57.540 --> 00:05:00.040
So for example, if the contribution of this one is zero,

00:05:00.040 --> 00:05:04.540
Then there's no part of this cosine in the 8 by 8 image that we're looking at.

00:05:04.760 --> 00:05:12.300
If it's 0.1, and this one's 10, then this has a hundred-fold less impact on your output image than this one.

00:05:12.540 --> 00:05:17.260
And what we do with the discrete cosine transform, is basically calculate the coefficients for these waves.

00:05:17.260 --> 00:05:20.180
Putting this discrete cosine transform aside for a minute,

00:05:20.180 --> 00:05:24.840
If we just look at an example image. So this is a small crop section of our flower image.

00:05:24.840 --> 00:05:31.400
This is the y-component, so it's just every value from 0-255, how intense is the pixel.

00:05:31.400 --> 00:05:35.600
So, you can see this is not a hugely interesting piece of image, it's kind of grey

00:05:35.600 --> 00:05:37.800
with a little bit of brighter region down here.

00:05:37.800 --> 00:05:43.020
What we want to try and do is calculate the contributions of each of our cosine waves to this image.

00:05:43.020 --> 00:05:48.360
Which bits of cosine do we need to add together to create an image that looks exactly like this.

00:05:48.360 --> 00:05:54.240
So to start with, what we need to do is center all of these values, which are currently centered at 128,

00:05:54.260 --> 00:05:55.960
because they're from 0-255,

00:05:55.980 --> 00:06:02.820
We center with values around zero, because remember cosine wave goes from 1 to -1, not 1 to 0.

00:06:02.820 --> 00:06:08.040
So we take away 128 off every value, and we get our shifted block like this.

00:06:08.240 --> 00:06:11.880
So this is the exact same image, but this time now centered around zero.

00:06:11.880 --> 00:06:16.840
And how we can use this in the discrete cosine transform to calculate our coefficients.

00:06:16.920 --> 00:06:22.400
We apply the -- it's actually discrete cosine transform #2, which is the one that's always used in JPEG.

00:06:22.560 --> 00:06:27.380
And what that does, is calculate the contribution of each of our cosines waves

00:06:27.400 --> 00:06:30.560
that when added together, will create this image exactly.

00:06:30.700 --> 00:06:35.620
Which of these blocks, when multiplied by that coefficient, to tell us how much of each one we use,

00:06:35.620 --> 00:06:38.100
will add together to create this exact image.

00:06:38.100 --> 00:06:43.260
So it might be a bit of that, a bit of this, and bit a that, a lot of that, and none of this one. Exactly.

00:06:43.260 --> 00:06:47.000
And so you'll find that all of these will have some impact on the image .

00:06:47.000 --> 00:06:48.980
It's almost certain, unless the image is completely flat.

00:06:48.980 --> 00:06:50.540
One of the nice things about JPEG is

00:06:50.540 --> 00:06:54.240
these low frequency ones will have a much bigger effect than high frequency data.

00:06:54.240 --> 00:06:55.960
And we also see them better.

00:06:55.960 --> 00:06:57.740
So that's how we compress JPEG.

00:06:57.740 --> 00:07:06.700
So, we calculate our DCT2 coefficients, and that gives us some slightly arbitrary values between -1024 and 1024.

00:07:06.700 --> 00:07:08.460
But that's not too much of a big problem.

00:07:08.460 --> 00:07:13.160
And what we have, each of these represents the weight, or the amount, of each of our cosine waves.

00:07:13.160 --> 00:07:17.180
So if you put this next to here, we can say that if we take this cosine,

00:07:17.180 --> 00:07:22.880
and multiply it by -370, and add it to this one multiplied by 29.7, and so on,

00:07:22.880 --> 00:07:26.720
And we do it for all of them, the added sum will be the original image back again.

00:07:27.100 --> 00:07:31.360
Usually, this top left coefficient is much bigger than the others.

00:07:31.360 --> 00:07:37.360
Because it's flat and not a cosine wave it represents the general intensity of that particular image block.

00:07:37.360 --> 00:07:40.620
So that is called our direct current coefficient, or DC coefficient,

00:07:40.620 --> 00:07:43.500
All of the others, are alternating current, AC coefficients.

00:07:43.500 --> 00:07:48.700
In practice, usually the DC coefficients are stored separately, but we won't dwell on that too much.

00:07:49.020 --> 00:07:54.400
The really important aspect of JPEG that you want to understand is that these coefficients are often very very small.

00:07:54.400 --> 00:07:58.780
And these ones are very very big. And what that tells is that for the high frequency

00:07:58.780 --> 00:08:01.540
cosine waves, don't really contribute much to the image.

00:08:01.540 --> 00:08:06.720
For example, this one is zero, which means that this cosine wave here is having no effect on the image at all.

00:08:06.720 --> 00:08:09.640
The image is essentially not a checkerboard in any way.

00:08:09.640 --> 00:08:17.760
These ones, compared to these big coefficients here, are incredibly small as well, and have very subtle effects on the actual output pixel data.

00:08:17.760 --> 00:08:22.540
I mean, these weights are so small that if you took these away, the image would be almost identical.

00:08:22.540 --> 00:08:25.500
And yet, you could just take them away and save all that space.

00:08:25.660 --> 00:08:30.700
So that's how we do it. The next step, after calculating our discrete cosine transform coefficients

00:08:30.880 --> 00:08:33.040
is, basically, try to remove the ones you don't want.

00:08:33.160 --> 00:08:37.620
We call the process of removing the high frequency data quantization.

00:08:37.620 --> 00:08:40.280
Hopefully, it would be easier if I show you a quantization table.

00:08:40.280 --> 00:08:45.260
This is the standard JPEG quantization table that represents a quality of 50%.

00:08:45.280 --> 00:08:52.360
So in a JPEG standard, different compressors, like the ones used in photoshop, will use different quantization tables depending on how they feel.

00:08:52.360 --> 00:09:01.960
And also, what level of quality you set it at. And what we do, is we divide every one of our coefficients by the corresponding quantization value

00:09:02.020 --> 00:09:04.620
and then round to the nearest integer.

00:09:04.620 --> 00:09:07.780
And you can see already that these ones are much bigger than these ones.

00:09:07.780 --> 00:09:11.700
So what essentially happens is these get scaled by a huge amount, usually to close to zero,

00:09:11.700 --> 00:09:15.180
And then get removed by being set to zero when we round to the nearest integer.

00:09:15.300 --> 00:09:24.380
So for example, 370 divided by 16 is roughly 23. Or minus 23. And the actual quantized output is this.

00:09:24.700 --> 00:09:30.300
And you can see that almost all of it is now zero. So, this coefficient now no longer has any effect, nor does this one or this one.

00:09:30.520 --> 00:09:35.280
The only ones that have any effect on our image are these nine here.

00:09:35.440 --> 00:09:43.060
And, essentially, the argument that we're making is that with just these nine, we can get pretty much the same image back.

00:09:43.120 --> 00:09:47.280
It won't be exactly the same, a couple of pixels will maybe be an intensity level up or down,

00:09:47.280 --> 00:09:53.340
but when viewed at normal image range, you know, let's say a photograph or on a monitor, it will look exactly the same to us.

00:09:53.460 --> 00:09:57.580
So what we then finally do when we want to output this information into our file

00:09:57.580 --> 00:10:02.240
Is we essentially list all these in a long line.We then use a huffman encoding,

00:10:02.240 --> 00:10:06.740
which Professor Brelfooters (?) covered in a video to further compress this data.

00:10:06.880 --> 00:10:10.140
The way that we serialize this into our file is in a zig-zag fashion.

00:10:10.220 --> 00:10:21.780
So we start with -23, then we go -2, -21,  so we're going up and down and up and down -- 6, 4, 0, 0, 2, 1, and so on.

00:10:21.780 --> 00:10:26.820
And the important thing about this is that by doing this, we're going to get a huge list of naughts in a row.

00:10:26.820 --> 00:10:30.000
At that is very easily compressed by huffman encoding.

00:10:30.000 --> 00:10:33.940
So we take this table, and we do this for every 8 by 8 block in our image.

00:10:33.940 --> 00:10:38.720
We then serialize them out into a long line, and we use huffman encoding to shrink them right down,

00:10:38.720 --> 00:10:40.260
and that's what goes into our JPEG.

00:10:40.500 --> 00:10:46.460
And in all other aspects of JPEG, are really sort of minor format considerations. That's the core of how the compression works.

00:10:46.780 --> 00:10:51.980
To decompress the image, let's imagine that we've sent our JPEG to someone, and their decoder is trying to read it.

00:10:52.140 --> 00:10:54.880
What we have to do is the exact opposite of this approach.

00:10:54.940 --> 00:11:00.180
So we begin by multiplying each of the values by our quantization table.

00:11:00.180 --> 00:11:04.740
So this is the same quantization table. It's stored inside the JPEG so we know which one the used.

00:11:04.860 --> 00:11:07.220
Because if use a different one on the way out, you're going to ruin your image.

00:11:07.240 --> 00:11:12.160
So we multiply each of these values by the specific value in the quantization table

00:11:12.380 --> 00:11:17.800
And we get the coefficients. And you can see that because most of them are naught, most of them on the other side are also naught.

00:11:17.840 --> 00:11:21.100
So, none of these are going to contribute to our image anymore.

00:11:21.240 --> 00:11:28.400
Then, in reverse, we use discrete cosine transform #3, which is usually just called the inverse discrete cosine transform

00:11:28.500 --> 00:11:32.420
because it's generally used to reverse what we did for discrete cosine transform two,

00:11:32.480 --> 00:11:38.080
and that gives us our shifted block back again, which of course we then add 128 to every value

00:11:38.080 --> 00:11:40.400
And we have our output block. And there it is.

00:11:40.480 --> 00:11:44.620
So that's the complete JPEG compression using discrete cosine transforms.

00:11:44.620 --> 00:11:52.680
If we look at our imput block and our output block, next to each other, we can see that there are some changes in values,

00:11:52.680 --> 00:11:58.500
but it's actually pretty close. These are sort of changed -- like this has gone up a few intensity levels, this is the same, this has gone down four,

00:11:58.500 --> 00:12:05.880
But these are from 0 to 255. No one is going to see that kind of difference. And this is at 50%. So you can do a lot less than this

00:12:06.020 --> 00:12:10.980
If you have your JPEG quality set higher, and smaller values in your quantization table.

00:12:10.980 --> 00:12:14.760
So in the JPEG standard, this is the quantization table they give you.

00:12:14.760 --> 00:12:19.760
This is actually the quantization table for luminosity, not for chrominance. They have a different one for chrominance

00:12:19.760 --> 00:12:24.180
which is much -- has much higher penalties on the high frequency

00:12:24.200 --> 00:12:30.080
because if high frequency data is not very important in grey, it's even less important given that we don't see color that well.

00:12:30.200 --> 00:12:36.780
One thing you can do to immediately increase the quality of our overall JPEG compression if I just preserve as much image as possible,

00:12:36.780 --> 00:12:44.440
is to halve all of these values in the quantization table. If we divide all of these values by two, then essentially everything is being scaled by less.

00:12:44.440 --> 00:12:50.960
All of these high frequency coefficients won't necessarily be rounded to zero, they might be rounded to one or two, and they'll still have a little bit of an effect.

00:12:50.960 --> 00:12:58.120
On the other hand, if we increase the values in these quantization tables, we're essentially operating a lower JPEG quality setting.

00:12:58.120 --> 00:13:04.960
This is the approach that the JPEG standard uses. In other software, they may have their own quantization tables

00:13:04.960 --> 00:13:11.380
in fact, as far as I know, photoshop I think they have 12, 14 settings, and they have different quantization tables for most of those settings.

00:13:11.380 --> 00:13:18.500
And different sampling frequencies. So lots of different things that they've decided make for a pretty good scale bar that a user can use.

00:13:18.500 --> 00:13:21.840
And all of those settings, are all then stored in the header of the file --

00:13:21.840 --> 00:13:28.240
Yeah. Between each part of the image, you'll get a small block that says these are the quantization tables and the huffman encoding tables that we used

00:13:28.240 --> 00:13:32.700
so that everyone can reverse that process. If you don't know what the quantization table was,

00:13:32.800 --> 00:13:37.880
you might be multiplying your encoded coefficients by different values and get something completely different out at the end.

00:13:37.880 --> 00:13:39.580
What would it be? Just different colors?

00:13:39.580 --> 00:13:44.580
It could just be a completely different image. You've divided by certain numbers, you need to multiply by those numbers to reverse the process

00:13:44.580 --> 00:13:46.460
Otherwise you might get nonsense back out.

00:13:46.460 --> 00:13:53.080
So going back to the original diagram that I drew, this is sort of the overview of JPEG. We start with our image,

00:13:53.080 --> 00:13:59.740
we've transformed our color, and in then DCT, essentially removes the high frequency information in our image.

00:13:59.740 --> 00:14:06.640
So if we've got an image where lots of high frequency information pixel changes are happening, that might get significantly compressed,

00:14:06.640 --> 00:14:15.160
but it also might look worse. In most photographs, certainly over an 8 by 8 image block, you won't be finding that much high frequency information

00:14:15.160 --> 00:14:17.440
and so we can quite safely get rid of a lot of it.

00:14:17.440 --> 00:14:23.620
We calculate our DCT coefficients, we quantize them to remove the high frequency ones, and then we huffman encoding

00:14:23.620 --> 00:14:27.960
to compress that into a manageable small stream that we put into our JPEG file.

00:14:27.960 --> 00:14:34.220
And then the reverse of that process is exactly that. We decode the huffman tables, the huffman encoding,

00:14:34.220 --> 00:14:40.560
we unquantize by multiplying by all our values in the quantization table, and then we apply the inverse DCT,

00:14:40.560 --> 00:14:44.900
to obtain our block back. And we do this for every little 8 by 8 image in our picture.

00:14:44.900 --> 00:14:50.380
If our image isn't a multiple of 8, then we have to add some padding bytes at the end

00:14:50.380 --> 00:14:58.660
to make it work, usually we could duplicate the ones near the edge, so that it kind of is coherent, or do something a little smarter.

00:15:00.000 --> 00:15:05.260
Text violates our assumtions that high frequency information doesn't contribute a lot to the image.

00:15:05.260 --> 00:15:11.240
So this is a small 8 by 8 image. This is, in a sense text. This is the computerphile 'C' with little triangular brackets

