WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.850
SHA stands for the secure hash algorithm. Which is interesting given that it has just kind of been broken

00:00:06.640 --> 00:00:10.170
But I'm not going to talk specifically about the attack on SHA today

00:00:11.469 --> 00:00:13.469
that's for a different video, but

00:00:14.290 --> 00:00:18.569
What I wanted to do was talk in a little bit more detail about hash functions and what they are

00:00:19.300 --> 00:00:24.930
And how SHA in particular works so you can get an idea of a kind of way these things are implemented

00:00:27.849 --> 00:00:33.029
let's have a quick look at what a hash function is briefly because Tom's got somebody covered it in this video and

00:00:33.130 --> 00:00:36.329
He's gone into a lot of the reasons you might use a hash function. The kind of hash functions

00:00:36.360 --> 00:00:39.140
I'm talking about are not the ones that we've been talking about for

00:00:40.280 --> 00:00:45.520
Hashing passwords. Those ones have to be quite slow in some sense because you need them to be secure

00:00:45.520 --> 00:00:51.620
We're going to talk mostly about the hash functions that are used routinely in cryptography for things like message authentication

00:00:52.059 --> 00:00:57.419
Digital signatures, and so on. So they need to be fairly quick, both to verify and compute. A hash function

00:00:57.520 --> 00:01:04.650
Take some string, right, let's say "abc" and it turns it into some fixed length string

00:01:04.650 --> 00:01:07.000
(that's not usually three long) of random

00:01:07.020 --> 00:01:12.180
So we know a bit string right, but so so you, 011001011...

00:01:12.840 --> 00:01:18.020
Go forward this way for however many bits that hash function is. Now, there's a few important properties of Hash functions

00:01:18.600 --> 00:01:23.120
That we care about for cryptography, but the most important one perhaps. Is that it's essentially pseudo-random

00:01:23.260 --> 00:01:25.150
So that means that we put in "abc"

00:01:25.150 --> 00:01:31.420
And we get out something that is in no way like "abc" and appears completely random to us and if we change this even slightly

00:01:31.740 --> 00:01:34.220
Because it's appearing random this has completely changed

00:01:34.680 --> 00:01:38.640
So let's have a quick look at SHA-1 as an example just so we can see this in action

00:01:38.640 --> 00:01:44.879
I'm on some page that has a script that calculates hashes on the fly so I can put in "abc" and

00:01:45.340 --> 00:01:50.490
You can see that the hash is a9993e and so on all the way up to d, right?

00:01:50.490 --> 00:01:55.460
This is the SHA1 hash. A SHA1 hash is 160 bits long. If I change this

00:01:55.900 --> 00:02:01.380
C to a D the hash is completely changed. So there's the appearance of randomness - the idea that

00:02:02.140 --> 00:02:04.500
This hash is actually not related to this at all

00:02:04.630 --> 00:02:07.740
Even though it is and we know it is because if I put C back again

00:02:09.459 --> 00:02:11.459
We're back to a9993

00:02:11.520 --> 00:02:16.760
So we can use this to verify messages haven't been changed or verify signatures on certificates

00:02:17.140 --> 00:02:22.770
And we can do it knowing that we have the appearance of randomness , but actually it's not random at all. Today

00:02:22.770 --> 00:02:26.300
We're going to talk a bit about how you actually write a hash function to do this

00:02:26.410 --> 00:02:32.009
How do we take something that essentially isn't random with a very known structure and turn it into something that looks like nonsense

00:02:32.170 --> 00:02:34.170
Such that we can use it. Now,

00:02:35.230 --> 00:02:36.900
There'll be people raising a few eyebrows that

00:02:36.900 --> 00:02:39.060
I'm using SHA1 as an example to do this

00:02:39.060 --> 00:02:45.030
But actually there's fairly reasonable reason to do so.

00:02:45.030 --> 00:02:45.550
First of all you know we might also talk about the weaknesses at some point

00:02:45.550 --> 00:02:52.350
but also SHA-1 bears a striking similarity in structure to MD4 and MD5 which is see a lot of use historically and

00:02:53.470 --> 00:02:56.429
SHA-256 and SHA-512 which is a SHA2

00:02:57.580 --> 00:03:02.699
Which currently is in some sense a standard that everyone uses right SHA3 is quite different

00:03:02.700 --> 00:03:04.180
And that's is something else for another day

00:03:04.180 --> 00:03:06.510
So SHA1 was developed by the NSA

00:03:06.850 --> 00:03:12.749
And released and published in 1995 now a lot of people don't trust things that the NSA do sort of by default

00:03:13.140 --> 00:03:18.320
Which might be fair, but in this case actually SHA1 was quite good for a long long time

00:03:19.100 --> 00:03:23.360
when there were some concerns ... recently much more serious concerns, but

00:03:24.820 --> 00:03:28.880
Originally the NSA weren't doing it as a back door and stuff the NSA need cryptography

00:03:28.890 --> 00:03:30.890
Just like everyone else and this is a good function

00:03:31.800 --> 00:03:36.000
MD5 had a lot of problems and so what they basically did was extend it and make it better

00:03:36.220 --> 00:03:38.820
SHA1 takes any length of string and outputs a

00:03:40.120 --> 00:03:42.460
160 bit value. Alright, so that's

00:03:42.730 --> 00:03:49.830
160 zeros and ones. The question then becomes: I've got a string but could be "abc" or it could be an incredibly long file or

00:03:49.930 --> 00:03:54.120
You know a whole movie right, and I want to calculate 160-bit signature of that

00:03:54.580 --> 00:03:59.369
How do I even get started doing that well the answer is that I basically have a loop that takes

00:04:00.070 --> 00:04:06.959
512 bit blocks of data one at a time until the file's expended. Let's look at an example of how SHA1 works on just

00:04:06.959 --> 00:04:08.549
a single message of exactly the right length

00:04:08.549 --> 00:04:12.749
And then we'll just talk briefly about what you do when inevitably isn't the right length

00:04:13.030 --> 00:04:20.669
Which is almost always, right? So SHA1 takes a message of n blocks of 512 bits in length, and

00:04:21.300 --> 00:04:26.940
If it's only one block - if the message is exactly 512 bits in length, then we only run it once, in essence

00:04:27.580 --> 00:04:30.160
And then we out put the hash at the end so SHA-1

00:04:30.360 --> 00:04:34.400
Starts with an internal state then we bring in bits of our message one at a time

00:04:34.410 --> 00:04:39.119
And we change that internal state and after we've done that at the very end when there's no more message left

00:04:39.120 --> 00:04:42.690
We just read what the internal state is and that's our hash alright

00:04:42.690 --> 00:04:46.769
so we're going to basically be taking the internal state and updating it with the message until

00:04:47.020 --> 00:04:50.540
We run out of message, and then as soon as that process stops we can read the results

00:04:51.000 --> 00:04:57.840
That's how the SHA family of hash functions works, so our internal state we call H so I'm going to say H0

00:04:59.400 --> 00:05:01.400
H1 H2 H3

00:05:02.199 --> 00:05:03.880
and H4

00:05:03.880 --> 00:05:11.639
Now the internal state of SHA1 is exactly the same length as the hash that it produces. Which is 160 bits. Which is five

00:05:12.699 --> 00:05:16.769
32-bit words four bytes each you know for 32-bit machine this would be an int

00:05:16.770 --> 00:05:20.220
So this is initialized based on some constants. Which is defined in the standard

00:05:20.560 --> 00:05:22.289
We might talk about that in a bit

00:05:22.289 --> 00:05:25.739
but it's not very important and what we're going to do is we're update these h's as

00:05:26.050 --> 00:05:30.960
We bring in our message and then at the end. We'll see what the Hs are and that's our hash function

00:05:31.270 --> 00:05:34.169
So how do we do this? Well? We have something [called] a compression function?

00:05:34.330 --> 00:05:37.530
It's going to take in this data and a bit of message

00:05:37.990 --> 00:05:42.840
Turn it into another set of h values and that's going to repeat as we have message

00:05:42.840 --> 00:05:46.979
But that's only going to happen once this time because my message is exactly 5 12, which is very handy

00:05:47.050 --> 00:05:49.020
So this is our compression function

00:05:49.020 --> 00:05:55.710
And I'm going to rename these slightly just to confuse everyone to ABc dearly so at the beginning of our compression function

00:05:55.990 --> 00:06:01.530
We copy B's the internal state into a b c d and e

00:06:01.530 --> 00:06:06.000
We then perform 80 rounds of char compression function, right?

00:06:06.000 --> 00:06:12.750
Which is like this so x 80 now what that's going to do is take in words from our

00:06:13.210 --> 00:06:17.760
512 bit block of our message, so if this is our message here that message is

00:06:18.729 --> 00:06:26.098
512 bits this is going to come in at this point and be mixed in with this ABc and D so well for now

00:06:26.099 --> 00:06:28.408
We won't talk about exactly what's going on in this compression function

00:06:28.409 --> 00:06:33.509
But the idea is that the bits of abcde are being combined together? They're being shuffled

00:06:33.699 --> 00:06:38.999
They're being commuted around to make it look more and more random as we go and at the same time

00:06:39.000 --> 00:06:43.320
We're bringing in bits from this message to further increase the appearance of mandamus

00:06:43.419 --> 00:06:49.919
But also to make sure that this shower function is calculating a digest on this specific message rather than just a general one

00:06:49.919 --> 00:06:54.659
That's the same every time for this message. We're always going to perform the exact same algorithm

00:06:54.660 --> 00:06:59.189
So if we put in this message a second time the shower function will produce exactly the same result

00:07:00.009 --> 00:07:04.589
Now once we've done this and we shuffled up abcde will be left with a new

00:07:05.380 --> 00:07:08.969
Abcde so a b c d and e

00:07:08.970 --> 00:07:16.799
And then we finish this block by bringing our h values down here and adding [them] to these values here

00:07:17.199 --> 00:07:18.940
to create a new

00:07:18.940 --> 00:07:20.470
H naught

00:07:20.470 --> 00:07:22.470
H1 H2 H3

00:07:23.349 --> 00:07:30.989
H4 the State is now been updated by whatever we did in this compression function by just adding to it all right now all addition

00:07:30.990 --> 00:07:37.590
In Char is done without any overflow modulo 2 to the 32 well that means is that if you ever go over?

00:07:38.050 --> 00:07:43.650
The maximum value allowed by a 4-byte integer you lap back around again

00:07:43.690 --> 00:07:48.599
Right which is one of the reasons why shark arm in reverse because you might lose information that way

00:07:49.270 --> 00:07:53.280
This is not encryption. We don't need to be able to reverse it, so this state is

00:07:54.070 --> 00:07:57.659
Finished now if our message is exactly 512 bits

00:07:57.699 --> 00:08:04.469
We need these 18 or h1 h2 h3 h4 values out that is our hash, so for short messages. We're done

00:08:04.470 --> 00:08:06.470
I could just you know go home

00:08:06.849 --> 00:08:13.739
in actual fact the the principle of extending this to arbitrary length messages right in increments of

00:08:13.960 --> 00:08:15.550
512 Bits is

00:08:15.550 --> 00:08:20.579
We copy this state back up to the top and we repeat the process and then we copy back up and we repeat the process

00:08:20.580 --> 00:08:25.500
For as many blocks as we have of our message 512 bits at a time of our message

00:08:25.500 --> 00:08:32.070
We feed it in we alter the state using this approach here, and then we lead off a state when we're done, right?

00:08:32.070 --> 00:08:34.000
That's basically how it works

00:08:34.000 --> 00:08:39.659
So be the security of SHA is all in this compression function and what it's doing. If it's shorter than that, what

00:08:40.510 --> 00:08:45.569
happens there?  If it's not a multiple of 512 bits. We're going to have to do some padding right?

00:08:46.329 --> 00:08:52.439
Char only works with 512 bit blocks, so what we do is if we have our message. Which is let's say

00:08:53.670 --> 00:08:59.370
1 0 1 1 0 1 it's not a very long message. If we want to pad that up to 512 bits

00:08:59.530 --> 00:09:05.490
We start with [a] one. We pad with 11 [alright], so I'm going to sort of mark, de-mark the padding here

00:09:05.490 --> 00:09:07.500
so we know we go with

00:09:09.370 --> 00:09:13.709
0000 and then we finish off the message with the length of the actual message in it

00:09:13.710 --> 00:09:20.820
So we know where to sort of remove the padding which in this case is 7 so in Binary 1 1 1 so 1 11?

00:09:21.040 --> 00:09:27.180
Obviously would a lot more bits for your length than I have done. You get the idea now this padding scheme

00:09:27.910 --> 00:09:35.190
Ensures that messages of the same length and messages that end in the same way or in very similar ways don't share the same padding

00:09:35.620 --> 00:09:41.370
And don't end up being the same that's very important, so this approach to SHA [its] repetitive

00:09:41.920 --> 00:09:47.579
Updating of the internal state with a compression function in essence is called a merkel down guard construction

00:09:48.760 --> 00:09:51.389
This was sort of independently proved by murkland damn. [God]

00:09:51.940 --> 00:09:59.429
But essentially what's good about it is if your compression function is good and has good pSeudo-random properties then so does your shower function

00:09:59.800 --> 00:10:01.800
Which is of course very useful right?

00:10:04.450 --> 00:10:10.200
The problem is that the compression function of char one is not so good that the attacks are

00:10:10.570 --> 00:10:16.169
To the 18 they can be reduced somewhat to about 2 to the 60 something like this which it becomes

00:10:17.380 --> 00:10:20.039
Into the realm of possibility for people with a lot of money

