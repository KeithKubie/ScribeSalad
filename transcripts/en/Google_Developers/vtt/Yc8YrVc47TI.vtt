WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:06.269
&gt;&gt;&gt; Ladies and gentlemen, would you please
welcome Chet Haase and Romain Guy.

00:00:06.269 --> 00:00:10.290
[ Applause ]
&gt;&gt;Chet Haase: Welcome to the talk. There are

00:00:10.290 --> 00:00:13.920
a lot of people in the room. Do you guys know
that this is not the keynote?

00:00:13.920 --> 00:00:16.689
[ Laughter ]
&gt;&gt;Romain Guy: We won't have sky divers, we

00:00:16.689 --> 00:00:21.050
won't give away devices.
&gt;&gt;Chet Haase: We are giving away something

00:00:21.050 --> 00:00:25.309
to everyone in the room and online. Information.
[ Laughter ]

00:00:25.309 --> 00:00:29.869
[ Applause ]
&gt;&gt;Romain Guy: We think. We have five special

00:00:29.869 --> 00:00:34.000
guests today. We don't know what they are
going to do yet. I was thinking maybe they

00:00:34.000 --> 00:00:38.190
could do some of our slides so we can, you
know, rest our voices or maybe answer the

00:00:38.190 --> 00:00:43.320
questions at the end. So we'll see.
&gt;&gt;Chet Haase: On with the talk. When we submit

00:00:43.320 --> 00:00:47.899
titles and abstracts for talks at a conference
like this, it's so far in advanced that, A,

00:00:47.899 --> 00:00:52.359
we don't really know what we're going to talk
about. B, we don't really know what we will

00:00:52.359 --> 00:00:57.460
be releasing by that time. So we submit very
generic titles, but what we really meant by

00:00:57.460 --> 00:01:03.140
what's new in Android is what's new in Jelly
Bean.

00:01:03.140 --> 00:01:10.700
&gt;&gt;Romain Guy: I would like to point out. The
web got it wrong. It wasn't Android 5. It's

00:01:10.700 --> 00:01:14.210
4.1.
&gt;&gt;Chet Haase: Where are you getting your insider

00:01:14.210 --> 00:01:21.710
information? It's bad. A lot of stuff going
on in Jelly Bean. Some of it was implementation

00:01:21.710 --> 00:01:26.130
details like working on performance, the butter
stuff we talked about. We will talk about

00:01:26.130 --> 00:01:30.770
a little bit of that. There was a lot of work
on new framework features and methods and

00:01:30.770 --> 00:01:35.460
capabilities, some graphics and media stuff.
There was significant work in the notification

00:01:35.460 --> 00:01:40.810
area. We will have Dan Sandler from that team
join us on stage later to talk in detail about

00:01:40.810 --> 00:01:45.450
that and also there's ongoing work in the
SDKs and tools coming out all the time. We

00:01:45.450 --> 00:01:52.500
touch on some of the highlights. In the performant
area, it's all about butter. It's about creating

00:01:52.500 --> 00:01:57.880
a buttery smooth experience for the user.
And this is basically about speeding up performance

00:01:57.880 --> 00:02:01.979
but it's also about things like triple buffering
to allow the different components in the system

00:02:01.979 --> 00:02:06.619
to work in parallel, to make things faster
for you. It's also about keying things off

00:02:06.619 --> 00:02:11.700
of V-Sync so that we are doing things at the
right time and then consistently. It's also

00:02:11.700 --> 00:02:16.190
about simply speeding up our stuff and making
sure we are not doing too much. There's a

00:02:16.190 --> 00:02:20.200
lot more information about what we did and
what you can do to take advantage of it in

00:02:20.200 --> 00:02:24.300
the session that we are doing tomorrow afternoon
entitled, For Butter Or Worse.

00:02:24.300 --> 00:02:27.730
&gt;&gt;Romain Guy: Tomorrow afternoon's session
is this single slide except we talk for one

00:02:27.730 --> 00:02:29.520
hour about this slide.
[ Laughter ]

00:02:29.520 --> 00:02:37.080
&gt;&gt;Chet Haase: Really slowly. There was a lot
of work in the widgets and wallpaper space,

00:02:37.080 --> 00:02:41.560
especially widgets. It is now possible for
you to host your widgets in your third-party

00:02:41.560 --> 00:02:47.620
launcher application if you have one through
a new bind intent. It is also possible for

00:02:47.620 --> 00:02:52.751
to you react to size changes. You will see
this in -- on the Nexus 7, you can see it

00:02:52.751 --> 00:03:01.780
in some of the widgets, if you resize the
widgets, which is a new capability in ICS,

00:03:01.780 --> 00:03:05.690
now you can react to that change and you can
change the layout on the fly to make things

00:03:05.690 --> 00:03:09.519
look better. In ICS, the widget could be resized
but you didn't actually know your widget was

00:03:09.519 --> 00:03:14.220
being resized so you couldn't do anything
dynamic with the views in the widget. Now

00:03:14.220 --> 00:03:19.239
you can. So that's good. There's new capabilities
of bundling, both horizontal and vertical,

00:03:19.239 --> 00:03:23.550
layouts in the same remote view so that we
can react more quickly to screen rotation

00:03:23.550 --> 00:03:29.599
without asking for that information to be
sent over again. There's also capabilities

00:03:29.599 --> 00:03:35.590
for new layouts, so grid layout is a new layout
that came out in ICS that allows you much

00:03:35.590 --> 00:03:39.890
more capabilities, much more performant for
certain situations. It avoids the problems

00:03:39.890 --> 00:03:46.269
of deeply nested layout layers and that layout
is now available to you for widgets as well

00:03:46.269 --> 00:03:52.590
as the view stub layout. And finally, in the
wallpaper space, if you have live wallpaper

00:03:52.590 --> 00:03:57.849
that you want people to use from your application,
you can launch the wallpaper picker from your

00:03:57.849 --> 00:03:59.750
application with this new.
&gt;&gt;Romain Guy: If you distribute to a live

00:03:59.750 --> 00:04:03.659
wallpaper on market, you don't have to create
that fake app anymore that when you launch,

00:04:03.659 --> 00:04:08.700
it tells the user, please go back to launcher,
open the menu. Now you can do it right away

00:04:08.700 --> 00:04:14.500
from your own application.
&gt;&gt;Chet Haase: In the animation space, which

00:04:14.500 --> 00:04:19.450
I care deeply about, so there was a new animation
package that was introduced in 3.0 and we

00:04:19.450 --> 00:04:24.020
have been adding minor enhancement to it.
In 3.2, we added a new class called view property

00:04:24.020 --> 00:04:31.960
animator that made it easier to launch animations
on specific properties of views, like the

00:04:31.960 --> 00:04:37.500
alpha property and translation and rotation
and scale, sort of canonical views, properties

00:04:37.500 --> 00:04:44.080
you would change for animations. View property
animator was about creating a very simple

00:04:44.080 --> 00:04:49.450
syntax for you to use to basically set the
property but then it would animate to that

00:04:49.450 --> 00:04:54.740
property value instead of setting it automatically.
We added some minor things in this release

00:04:54.740 --> 00:04:59.900
that make it easier. First, a review, since
maybe not everyone in the room has actually

00:04:59.900 --> 00:05:05.870
used the API so far. You can fade a view out
by saying, I want to animate which gives you

00:05:05.870 --> 00:05:15.310
a view property animator object. Or you can
set a translation value, it will automatically

00:05:15.310 --> 00:05:19.820
go there. If you run several of these in sequence,
it will stack them up and then eventually

00:05:19.820 --> 00:05:24.550
start them on the next frame. Or you can simply
chain the operations together. The code on

00:05:24.550 --> 00:05:30.660
line 5 is equivalent to the code on line 1
and line 3. Just chained together in the same

00:05:30.660 --> 00:05:37.830
statement. So all of that stuff already existed
in Android 3.2. What we have the ability to

00:05:37.830 --> 00:05:43.360
animate with layers. So the best practice
and animating these view properties for complex

00:05:43.360 --> 00:05:48.590
views or complex view hierarchies is to enable
hardware layer before you run the animation,

00:05:48.590 --> 00:05:52.070
run the animation. When the animation is finished,
disable the hardware layers so you are not

00:05:52.070 --> 00:05:58.500
taking up the memory overhead after the animation
is done. There's sort of boiler plate code

00:05:58.500 --> 00:06:01.880
that you have to go through every time you
do that. We simplified that, because that's

00:06:01.880 --> 00:06:07.170
what view property animator is all about.
Call with layer as part of the animation command

00:06:07.170 --> 00:06:10.520
and it automatically build the layer, run
the animation, disable the layer when it's

00:06:10.520 --> 00:06:17.100
done. There's also start action and end actions
makes it easier to sequence view property

00:06:17.100 --> 00:06:22.890
animator. So you can say, for example, when
this animator finishes running, I want the

00:06:22.890 --> 00:06:27.490
following runnable to kick in which may spawn
another animation or it may remove the view

00:06:27.490 --> 00:06:33.710
that was faded out or slid off the screen
or whatever. All about simplifying animation

00:06:33.710 --> 00:06:37.310
in general. We figure if we can make them
as easy to use as possible, then you don't

00:06:37.310 --> 00:06:41.210
need to think about them and you can make
your application richer without spending a

00:06:41.210 --> 00:06:45.490
lot of time on this stuff. You can actually
focus on the core logic instead. Finally,

00:06:45.490 --> 00:06:50.960
in the layout transition class also introduced
in Android 3.0, the layout transition class

00:06:50.960 --> 00:06:59.020
was introduced to make it easier to animate,
automatically animate any changes to views

00:06:59.020 --> 00:07:03.490
that were inside a particular container. So
you set a layout transition on a container,

00:07:03.490 --> 00:07:07.830
when views are added or removed or shown or
hidden, then we would automatically fade things

00:07:07.830 --> 00:07:12.490
out, in or out, and move things around to
sort of animate the changes and create a nice

00:07:12.490 --> 00:07:17.800
segue for the user. In this release, we introduced
the new ability to enable a new transition

00:07:17.800 --> 00:07:22.880
type called changing and it will react to
any layout change. Instead of simply animating

00:07:22.880 --> 00:07:29.940
the change to fade a view out, it will react
to any change, so if one of those changes

00:07:29.940 --> 00:07:35.390
layout parameters and does a request layout,
we will note that internally and run an animation

00:07:35.390 --> 00:07:38.240
automatically for you with basically one line
of code.

00:07:38.240 --> 00:07:44.090
&gt;&gt;Romain Guy: We had a great demo for you
to show this new API. But Chet forgot to install

00:07:44.090 --> 00:07:49.350
the demo on his phone. He left the laptop
at my place this morning. So we don't have

00:07:49.350 --> 00:07:52.430
a demo for you.
&gt;&gt;Chet Haase: Computers are so confusing,

00:07:52.430 --> 00:07:57.420
don't you think?
&gt;&gt;Romain Guy: We won't show all the new APIs

00:07:57.420 --> 00:08:00.290
and all the changes we have been introducing
in the framework. I just wanted to mention

00:08:00.290 --> 00:08:05.440
a few that are particularly interesting. You
can look at the API dif that's part of the

00:08:05.440 --> 00:08:10.540
SDK on the site that launched this morning.
The first one to me is pretty important because

00:08:10.540 --> 00:08:15.730
we keep giving talks about performance and
use less memory and how the application should

00:08:15.730 --> 00:08:20.360
go faster. We do work in the framework to
make that happen automatically for you. One

00:08:20.360 --> 00:08:24.430
of the components that we focused on in Jelly
Bean is the text view. Text view is one of

00:08:24.430 --> 00:08:28.400
the most competence in applications. I have
seen applications with hundreds and hundreds

00:08:28.400 --> 00:08:34.340
of text views. Every button is a text view,
every label, every input field. They use less

00:08:34.340 --> 00:08:38.131
memory, they are faster, therefore they are
better. We also improved our clipboard API.

00:08:38.131 --> 00:08:43.860
If you use the clipboard API, it was limited
in terms of what kind of text you can transfer

00:08:43.860 --> 00:08:52.400
between applications. So now you can transfer
rich text, so you can keep your bold and italics.

00:08:52.400 --> 00:08:57.470
We worked hard on better memory management.
This is something we started with Gingerbread

00:08:57.470 --> 00:09:04.150
and ICS and Jelly Bean. We kept working on
that. And we exposing more APIs that you can

00:09:04.150 --> 00:09:09.170
use in your application to react to the current
state of the system and free some memory if

00:09:09.170 --> 00:09:15.690
you can do that. And those APIs actually that
we use internally all over the place, hardware

00:09:15.690 --> 00:09:20.880
rendering pipeline that we have introduced
in Android 3 use this new APIs to free up

00:09:20.880 --> 00:09:24.890
open JAVA memory when you switch back and
forth applications to keep your device in

00:09:24.890 --> 00:09:30.660
a really good state.
Two new widgets we introduced in ICS. We didn't

00:09:30.660 --> 00:09:37.080
talk about ICS at the last Google I/O. Grid
layout, how many of you have used grid layout.

00:09:37.080 --> 00:09:43.210
Not too many. Grid layouts is now part of
super library. You can use it all the way

00:09:43.210 --> 00:09:50.980
back to maybe Froyo. You can use it back to
Donuts. Grid layout you can use to replace

00:09:50.980 --> 00:09:58.670
table layouts. You can create really complete
UIs in an easy way. It will be highly performant.

00:09:58.670 --> 00:10:02.760
I really encourage you to try that layout.
We also have text review. You have seen this

00:10:02.760 --> 00:10:07.870
demo this morning in the new camera application,
you can swipe back and forth between the pictures

00:10:07.870 --> 00:10:12.180
you've taken and the camera. You can see the
camera, you had the live preview of the camera

00:10:12.180 --> 00:10:18.690
running while it was panning around. You cannot
do that with surface view. The way you do

00:10:18.690 --> 00:10:23.230
it now is with text review. Text review is
a surface view that react to all the new properties

00:10:23.230 --> 00:10:29.100
we introduced so you can apply translucency.
You can apply rotations, scales, filters.

00:10:29.100 --> 00:10:35.820
All kinds of stuff. I want to show you a small
code sample. You can now cancel database queries.

00:10:35.820 --> 00:10:41.121
So we have a content resolver, we want to
query all the contacts on the device. This

00:10:41.121 --> 00:10:45.440
is usually a query that takes quite a bit
of time. If you want the app to remain reactive

00:10:45.440 --> 00:10:49.990
and you want to react really quickly to the
user input, you want to be able to cancel

00:10:49.990 --> 00:10:55.890
queries from time to time. You create a new
cancellation signal object on which you can

00:10:55.890 --> 00:11:01.470
install a listener that will invoke when or
if you cancel the query. Then when you do

00:11:01.470 --> 00:11:06.110
your query, you pass that signal to just one
(indiscernible) and that works with the new

00:11:06.110 --> 00:11:11.350
loaders, that works with cursors and content
resolvers. Finally, when you are ready to

00:11:11.350 --> 00:11:19.350
cancel the query, you call cancel. It is a
useful API you can benefit from in your applications.

00:11:19.350 --> 00:11:25.240
Something else we introduced in Jelly Bean
-- can we switch to the device please. So

00:11:25.240 --> 00:11:29.110
we have new animations to say give you a better
sense of where you are in the system, so,

00:11:29.110 --> 00:11:33.050
for instance, if you launch the messaging
application, you can see that the activity

00:11:33.050 --> 00:11:39.520
starts from that icon. We do the same in the
list of recent applications, we click on messaging

00:11:39.520 --> 00:11:43.640
again, you can see that animation starts from
that position on the screen. Can we switch

00:11:43.640 --> 00:11:49.390
back to the slides, please. We introduced
a new API that let's you implement this animation

00:11:49.390 --> 00:11:59.670
yourself in your new application. Can we show
the slides, please.

00:11:59.670 --> 00:12:06.660
Thank you. It's a new class called activity
options. It's very simple, very easy to use.

00:12:06.660 --> 00:12:10.840
So you create a new instance. For instance,
here we called make scale app animation. This

00:12:10.840 --> 00:12:16.750
is the animation you just saw, you can go
crazy fancy with that. In this particular

00:12:16.750 --> 00:12:20.860
case, we specified the anchor view so in the
case of launcher, the anchor view is the icon

00:12:20.860 --> 00:12:26.530
of the application that we are clicking. And
then you specify the coordinates of the stop

00:12:26.530 --> 00:12:30.720
position of the animation relative to that
view. So we want to start at zero zero, and

00:12:30.720 --> 00:12:35.750
we want the activity to start at the same
size as the view that you just clicked. From

00:12:35.750 --> 00:12:40.260
that, you can get to bundle and you can pass
this bundle to the method start activity and

00:12:40.260 --> 00:12:44.000
you will automatically play the animation
for you and you will get seamless experience

00:12:44.000 --> 00:12:51.029
going back and forth between activities.
Navigation, we added in the framework tools

00:12:51.029 --> 00:12:55.279
that you already had in the support library,
so we have two new tools. We have the tasks

00:12:55.279 --> 00:13:04.120
tech builder and automatic support for up
navigations. So let's see, yes, so the automatic

00:13:04.120 --> 00:13:09.490
up navigation, the action bar, you have the
home icon in the top of the application. When

00:13:09.490 --> 00:13:13.950
you click on it, you are supposed to go up
and not back. We have documents on the developer

00:13:13.950 --> 00:13:18.400
web site that describe the difference and
guidelines and best practices. But you had

00:13:18.400 --> 00:13:23.040
to write a little bit of code. Now instead
in your manifest, you add in a new attribute,

00:13:23.040 --> 00:13:27.180
parent activity name. You just point to the
activity that you want to go back to when

00:13:27.180 --> 00:13:31.570
you click the little icon. You can do the
same in the support library. It requires a

00:13:31.570 --> 00:13:36.480
few extra lines of codes inside the application,
so I think it's a couple more lines. And it's

00:13:36.480 --> 00:13:41.750
not an attribute, it's a meta data tag, but
the feature is the same.

00:13:41.750 --> 00:13:46.810
&gt;&gt;Chet Haase: There is a session on navigation
at Google I/O this week, you might want to

00:13:46.810 --> 00:13:49.089
check that out for best practice and more
particular examples.

00:13:49.089 --> 00:13:54.880
&gt;&gt;Romain Guy: In the test tech builder is
a very simple API that solves an issue on

00:13:54.880 --> 00:13:59.360
Android. You might have seen that happen when
you click on the notification, for instance,

00:13:59.360 --> 00:14:03.050
and then you press the back key. You click
on notification, the app shows up, and you

00:14:03.050 --> 00:14:07.370
press the back key and very unclear where
you're going back to. Sometimes you will have

00:14:07.370 --> 00:14:11.790
something in the stacks, sometimes you won't.
So it's very confusing for the users. With

00:14:11.790 --> 00:14:17.650
the task tech builder, you can create your
own stack. What happens when you click on

00:14:17.650 --> 00:14:22.779
the notification, bring the application, you
can recreate the exact text you want behind

00:14:22.779 --> 00:14:26.920
the activity that you are showing that so
that the interaction by the user is exactly

00:14:26.920 --> 00:14:33.230
what they expect. So in this particular example,
we want to create a back stack back to our

00:14:33.230 --> 00:14:39.130
home activity. As you can see, you can insert
your own content, own extras like you would

00:14:39.130 --> 00:14:41.601
normal intent.
&gt;&gt;Chet Haase: One of the things we wanted

00:14:41.601 --> 00:14:54.310
to do in this release was make the APIs and
toolability of the framework more consistent.

00:14:54.310 --> 00:14:58.940
In some cases, they weren't, either the attribute
name would be slightly different or there

00:14:58.940 --> 00:15:04.860
would be a setter on the JAVA language side,
or there would not be either a setter or a

00:15:04.860 --> 00:15:08.779
getter. We went through, here is a laundry
list, here are the these things that are mismatched,

00:15:08.779 --> 00:15:15.080
how can we make these better. This is about
understanding and having your expectations

00:15:15.080 --> 00:15:20.010
met by, but also about tools being able to
find the property setters and getters that

00:15:20.010 --> 00:15:25.010
they expect for a particular XML attributes.
That makes the platform more toolable and

00:15:25.010 --> 00:15:29.080
therefore easier to build your applications.
&gt;&gt;Romain Guy: It makes the APIs more consistent.

00:15:29.080 --> 00:15:34.410
&gt;&gt;Chet Haase: It's a good thing. It's a good
thing. So here's a couple of examples. I think

00:15:34.410 --> 00:15:38.620
you get what I mean. For instance, there was
a XML attribute called scroll bar size that

00:15:38.620 --> 00:15:43.660
didn't have either a setter or getter. You
can set it on the XML side, you couldn't query.

00:15:43.660 --> 00:15:48.279
&gt;&gt;Romain Guy: It was entirely my fault, this
particular one. My bad.

00:15:48.279 --> 00:15:51.000
&gt;&gt;Chet Haase: Shame on him.
&gt;&gt;Romain Guy: I was an intern at the time.

00:15:51.000 --> 00:15:58.110
&gt;&gt;Chet Haase: He added the setter and getter.
There were required also with max width, we

00:15:58.110 --> 00:16:01.270
had a setter already, but we didn't have a
getter. So the tool couldn't find out what

00:16:01.270 --> 00:16:07.160
the current value was or the user at the programming
level, so we added the getter there. Moving

00:16:07.160 --> 00:16:14.120
on, so internationalization, in this release
was all about -- right to left.

00:16:14.120 --> 00:16:19.990
&gt;&gt;Romain Guy: Chet is very proud of this animation.
&gt;&gt;Chet Haase: I worked all day on it.

00:16:19.990 --> 00:16:24.150
&gt;&gt;Romain Guy: Also because that word at the
top is one of the few words in the English

00:16:24.150 --> 00:16:27.910
language that I just cannot pronounce.
&gt;&gt;Chet Haase: Internationalization. I will

00:16:27.910 --> 00:16:29.700
translate for him.
&gt;&gt;Romain Guy: I will pronounce it in French.

00:16:29.700 --> 00:16:34.550
(non-English word or phrase). Pretty much
the same word. It works with that slide. So

00:16:34.550 --> 00:16:39.790
we talked about it during the keynote, added
new 18 locales and also are trying to address

00:16:39.790 --> 00:16:45.550
the number one bug on our XML tracker, support
for Arabic. So we have much better support

00:16:45.550 --> 00:16:50.781
to display, right to left text, Arabic and
Hebrew mostly. We are still working on it.

00:16:50.781 --> 00:16:55.520
It is still not quite ready. It is much, much
better and we are shipping the UI with those

00:16:55.520 --> 00:17:01.490
locales. Ready for your applications as developers,
we have implemented it in such a way that

00:17:01.490 --> 00:17:06.829
you should not have to worry about it. If
you use Canvas API, it's taken care of for

00:17:06.829 --> 00:17:10.983
you. If you use textview, edit text, text
APIs, it is taken care of for you. If you

00:17:10.983 --> 00:17:15.120
are writing GL code, good luck with that.
[ Laughter ]

00:17:15.120 --> 00:17:21.250
&gt;&gt;Romain Guy: But we like to make it better
as well for OpenGL. And performant improvements,

00:17:21.250 --> 00:17:27.900
in ICS, we have big performant problems. If
you had long, long right to left text in gmail

00:17:27.900 --> 00:17:32.630
and composing email, we addressed that. So
this is just a couple screen shots on the

00:17:32.630 --> 00:17:36.520
left you can see the UI on Arabic, Hebrew.
Again, nothing to do, the app just work.

00:17:36.520 --> 00:17:44.800
&gt;&gt;Chet Haase: A lot of work to do in accessibility.
We had accessibility before. We can read out

00:17:44.800 --> 00:17:49.660
what was on the screen. But there was a trick
to it. You needed to know where the view was

00:17:49.660 --> 00:17:53.400
on the screen to be able to hover over it.
It was kind of a puzzle to figure out what

00:17:53.400 --> 00:18:00.400
the UI was. Apparently that wasn't really
what people are looking for, so we added a

00:18:00.400 --> 00:18:03.610
lot more capabilities here and the most important
thing to point out is there there's a whole

00:18:03.610 --> 00:18:08.850
talk on accessibility this week. Please tune
into that talk if you want the details. At

00:18:08.850 --> 00:18:14.429
a very high level view, we added the ability
to receive these global gestures that can

00:18:14.429 --> 00:18:17.770
basically walk through all of the views and
all the information on the screen, so you

00:18:17.770 --> 00:18:22.580
can swipe left and swipe right and proceed
through all the views in the hierarchy in

00:18:22.580 --> 00:18:26.150
a linear fashion. Basically you don't need
to know where it is on the screen. You can

00:18:26.150 --> 00:18:30.490
go left to right, right to left, find what
you're looking for. And when there's accessibility

00:18:30.490 --> 00:18:34.300
focus on an object, then you can double tap
on the screen without knowing on the screen

00:18:34.300 --> 00:18:39.250
where you have to double tap, it will launch
that item, whatever it is. There's also the

00:18:39.250 --> 00:18:44.050
ability to read through text at different
layers, so you can read by character or word

00:18:44.050 --> 00:18:49.850
or line or paragraph. And there's also the
ability to give us more information about

00:18:49.850 --> 00:18:55.370
custom views. For the most part, all of this
is handled for you. All the views, you can

00:18:55.370 --> 00:19:01.429
get to them with the gestures. But maybe there's
a complex view like the calendar view that

00:19:01.429 --> 00:19:05.501
we have in the app that is we ship on the
platform. Yes, it's a single view, but it

00:19:05.501 --> 00:19:11.760
has very structured semantic information that
is important to propagate flew the user through

00:19:11.760 --> 00:19:16.390
accessibility. You can implement this method
to give us more information that we need in

00:19:16.390 --> 00:19:22.390
order to traverse that sort of sub view level
of information. As I said, it just works for

00:19:22.390 --> 00:19:29.090
standard views. But there are special cases
that you may have where we don't think maybe

00:19:29.090 --> 00:19:33.010
a layout is important but you do for your
particular application, so you can give us

00:19:33.010 --> 00:19:37.650
more information about it and then finally
a lot of this capability was also folded into

00:19:37.650 --> 00:19:44.120
the support library. Again, go to that other
session if you want more information about

00:19:44.120 --> 00:19:51.980
it. We added a new permission called read
external storage. We want all developers to

00:19:51.980 --> 00:19:57.610
start using this permission if you need access
to external storage. So start using it now.

00:19:57.610 --> 00:20:01.790
We do not require this permission now, but
in the future release, we will. So it would

00:20:01.790 --> 00:20:05.670
be good if you actually started using it now
so when we do require it, your application

00:20:05.670 --> 00:20:11.280
will simply work. In the meantime, you can
use the developer options category of settings

00:20:11.280 --> 00:20:16.670
to actually force us to pay attention to this
permission so you can test whether your application

00:20:16.670 --> 00:20:24.760
uses the permission correctly.
We had the ability already to limit downloads

00:20:24.760 --> 00:20:29.270
in your application depending on whether the
user was on Wi-Fi versus mobile, but this

00:20:29.270 --> 00:20:33.480
is a very coarse grained approach to whether
the user was actually paying for the band

00:20:33.480 --> 00:20:39.120
width. What if they are on Wi-Fi but on Wi-Fi
on a metered hot spot, like tethering to their

00:20:39.120 --> 00:20:48.380
Jelly Bean phone and actually paying for band
width. We have Galaxy Nexus phone, but we

00:20:48.380 --> 00:20:53.470
have other situations where the user can provide
that information to us through the data usage

00:20:53.470 --> 00:20:59.200
settings. Tell us which hot spots are metered
or not, and by paying attention to this capability,

00:20:59.200 --> 00:21:02.960
then you will know in your application whether
you're on a metered network and whether you

00:21:02.960 --> 00:21:07.500
should delay downloading that huge data block
at your user at this time.

00:21:07.500 --> 00:21:12.480
&gt;&gt;Romain Guy: So we kept working on renderscript,
especially the compute part. We now have support

00:21:12.480 --> 00:21:17.390
for Neon instructions, so for those of you
who don't know, Neon is an instruction set

00:21:17.390 --> 00:21:22.730
in ARM CPUs that lets you do -- helps you
parallelize instructions so it's really great

00:21:22.730 --> 00:21:29.830
if you want to do heavy data processing algorithms.
Unfortunately Neon floating points are not

00:21:29.830 --> 00:21:34.080
compatible with the typical floating point
that you use in your different programming

00:21:34.080 --> 00:21:39.400
languages so it's not that you have to add
this new pragma instructions at the beginning

00:21:39.400 --> 00:21:42.970
of your script if you want to benefit from
it because it might break your application.

00:21:42.970 --> 00:21:48.620
In most cases it shouldn't so you can give
it a try and see if it works. We did a few

00:21:48.620 --> 00:21:53.660
things. You can now simple textures just like
you would do a fragment shader on the GPU

00:21:53.660 --> 00:22:00.049
and we've added support, debugging support,
on x86 devices. There will be a talk tomorrow,

00:22:00.049 --> 00:22:05.610
after hours, called "Doing More With Less,"
and there will more examples of renderscript

00:22:05.610 --> 00:22:12.480
and how you can use it to speed the processing.
&gt;&gt;Chet Haase: There is -- there was a lot

00:22:12.480 --> 00:22:17.040
of capabilities added in the media space,
especially at the layer of getting more information

00:22:17.040 --> 00:22:20.950
about the underlyiing Codec and media that
you're actually playing. I'm going to defer

00:22:20.950 --> 00:22:24.791
real information to the session. If you want
to know more about this, go to the media Codec

00:22:24.791 --> 00:22:29.860
APIs talk, that's this afternoon.
&gt;&gt;Romain Guy: That's because you write through

00:22:29.860 --> 00:22:34.140
the APIs and he had no idea how they worked.
&gt;&gt;Chet Haase: I said, can you give me an overview?

00:22:34.140 --> 00:22:37.790
And they send me code, massive amounts of
code. I'm like, wow, there's a lot of stuff

00:22:37.790 --> 00:22:40.000
there, how about you talk about it instead
of me.

00:22:40.000 --> 00:22:44.179
&gt;&gt;Romain Guy: If you use audio in your application,
I know there's a lot of very interesting stuff,

00:22:44.179 --> 00:22:47.530
so you should go to that session as well.
&gt;&gt;Chet Haase: Speaking of audio, there was

00:22:47.530 --> 00:22:51.620
as lot of work done on audio latency, which
I know is a serious issue to a lot of you.

00:22:51.620 --> 00:22:55.700
There was a lot of very significant improvements,
however, a lot of the improvements tend to

00:22:55.700 --> 00:22:59.760
be device-specific, so we're not done yet,
we're just going to say, hey, things got a

00:22:59.760 --> 00:23:06.030
lot better and they should get even better
going forward. And see, we heard about this

00:23:06.030 --> 00:23:12.470
in the keynote already, there's great capability
to basically connect through NFC but then

00:23:12.470 --> 00:23:17.890
actually do a download of a large file rather
than through NFC which really wasn't intended

00:23:17.890 --> 00:23:21.670
for this massive amount of data, do it through
Bluetooth instead. It's very easy to connect

00:23:21.670 --> 00:23:26.510
devices in this way and it's also very easy
to do tap to pair, again, connecting with

00:23:26.510 --> 00:23:32.120
Bluetooth devices. There's interesting details
about how easy this is and, again, I will

00:23:32.120 --> 00:23:36.460
defer that to another talk that's happening
this week, tomorrow afternoon. So go to the

00:23:36.460 --> 00:23:39.520
up-close-and-personal talk.
&gt;&gt;Romain Guy: So Google Play, we introduced

00:23:39.520 --> 00:23:43.049
a bunch of new features on Google Play over
the last few months. And I just want to talk

00:23:43.049 --> 00:23:48.000
about a couple that are particularly interesting
so you can now finally respond to user commands.

00:23:48.000 --> 00:23:49.710
So this is now --
[ Applause ]

00:23:49.710 --> 00:23:58.730
&gt;&gt;Romain Guy: If you are happy. So not all
of you can do it right now, it's only for

00:23:58.730 --> 00:24:02.990
the top user -- or top developers, or whatever
it's called, you have a blue badge that shows

00:24:02.990 --> 00:24:06.470
up, but basically the feedback is going to
open up more and more developers as time goes

00:24:06.470 --> 00:24:12.890
by. We have also added the ability to subscribe
to content and applications so [in-app subscriptions.

00:24:12.890 --> 00:24:17.130
And here we have the example of Frontlight
Commando by Blue Mobile, and you can see it's

00:24:17.130 --> 00:24:22.540
the same flow as internet purchases, and it
will automatically go through Google, like

00:24:22.540 --> 00:24:27.580
every month you will be credited for your
content. And of course there's way more, you

00:24:27.580 --> 00:24:31.590
saw some of it during the keynote. I'm particularly
excited about the Android expansion files,

00:24:31.590 --> 00:24:36.670
I've seen a few games already use it. It's
great, because if you have an application

00:24:36.670 --> 00:24:40.410
that needs to load a lot of data, and mostly
it's games, right, you launch a game for the

00:24:40.410 --> 00:24:43.940
first time, and you see, "Please wait while
we load all the data, well, you have to pay

00:24:43.940 --> 00:24:47.690
for the band width, you have to pay for the
servers. Or at least you had to. And now it's

00:24:47.690 --> 00:24:51.840
not true anymore. I was talking to the game
developers yesterday and one of them told

00:24:51.840 --> 00:24:57.820
us that they reduced their cost by 96% by
switching to the expansion files. So it can

00:24:57.820 --> 00:25:02.370
be really, really useful if you need a lot
of data. Optimizing APK updates, once again,

00:25:02.370 --> 00:25:06.080
we talked about it in the keynote, but very
important, you can update your applications

00:25:06.080 --> 00:25:10.240
more often because the Donuts will be a lot
smaller and the average, I believe, is about

00:25:10.240 --> 00:25:15.720
66% saving per download. And of course we
have a bunch of -- a lot of devices that you

00:25:15.720 --> 00:25:19.840
can now buy on Google Play. I guess you don't
need those devices, at least those in the

00:25:19.840 --> 00:25:25.929
room because you just got a bunch of new devices
today, lucky you. If you want to know more

00:25:25.929 --> 00:25:30.110
about Google Play there is a session tomorrow
afternoon. We also launched a new developer

00:25:30.110 --> 00:25:35.669
Web site, a brand-new design and we tried
to rearchitecture the content so it would

00:25:35.669 --> 00:25:40.070
be easy to find. We have three categories.
We have the design category where you find

00:25:40.070 --> 00:25:43.299
the Android design guidelines. This is something
that we launched a few months ago, if you

00:25:43.299 --> 00:25:48.690
don't know about it, you should take a look
at it, it will show you how you should design

00:25:48.690 --> 00:25:57.440
your UI for Android starting with Android
4.0 ICS and forward. Sorry. The second category

00:25:57.440 --> 00:26:00.570
is developer, so that's the content that you
are used to, you have all the references to

00:26:00.570 --> 00:26:05.570
the APIs, you have the articles that we had
on the Web site before, how to optimize your

00:26:05.570 --> 00:26:08.780
application, how to use Bluetooth and so on
and so forth.

00:26:08.780 --> 00:26:12.720
And the last one is dedicated to Google Play,
so if you're new to Android and you want to

00:26:12.720 --> 00:26:17.130
know how can I make money within a app, how
can I put it on Google Play, there's a section

00:26:17.130 --> 00:26:22.630
dedicated to that.
We added a lot more stuff in tools. The emulator

00:26:22.630 --> 00:26:27.799
got a lot better so now we have x86 [virtualization,
we don't emulate ARM anymore, if you choose

00:26:27.799 --> 00:26:31.960
to, so the emulator is a lot faster, you can
actually play games and they run pretty well

00:26:31.960 --> 00:26:36.410
even though they're on the laptop. We also
added support for open GL. So if you use Open

00:26:36.410 --> 00:26:41.470
GL ES1 or Open GL2, or if you want to test
[check inside your application you can now

00:26:41.470 --> 00:26:46.669
do so in the emulator. So it's a great way
for you to test the new features that we added

00:26:46.669 --> 00:26:51.350
in Android ICS and up.
And finally, we'll talk more about it, but

00:26:51.350 --> 00:26:57.380
we have the ability emulate sensors in multitouch
using a physical Android device, you use a

00:26:57.380 --> 00:27:01.970
phone, you use a USB cable, you plug it in
and then the phone can use all the data to

00:27:01.970 --> 00:27:05.950
the emulator, so you can run your application
your emulator at different screen sizes but

00:27:05.950 --> 00:27:09.220
you can still emulate the sensors and multitouch
very easily.

00:27:09.220 --> 00:27:16.550
There's a lot more about tools. We're introducing
a bunch of new tools, tracer for OpenGL ES,

00:27:16.550 --> 00:27:21.690
if you use OpenGL it's a very cool tool. Device
monitor is pretty much a replacement for DDMS,

00:27:21.690 --> 00:27:27.210
it's a better UI, and it also integrates (indiscernible)
in vars tools. And Systrace, Systrace we'll

00:27:27.210 --> 00:27:32.640
talk about tomorrow. And if you want to know
more, there's a talk tomorrow about tools.

00:27:32.640 --> 00:27:37.410
You should definitely go.
ADT, the biggest new feature for me and a

00:27:37.410 --> 00:27:42.450
lot of you as well is better support for the
NDK so you can now debug your application

00:27:42.450 --> 00:27:48.700
inside -- inside applications, native code
inside ADT.

00:27:48.700 --> 00:27:52.559
[ Applause ]
&gt;&gt;Romain Guy: And now I would like to invite

00:27:52.559 --> 00:27:55.920
Dan Sandler on stage, Dr. Sandler, because
he has a Ph.D., he's smart.

00:27:55.920 --> 00:27:59.370
&gt;&gt;Chet Haase: Dan, I'd like you to meet the
guest panelists. Guest panelists, this is

00:27:59.370 --> 00:28:01.990
Dan.
&gt;&gt;Daniel Sandler: Nice to meet you. Good to

00:28:01.990 --> 00:28:05.179
see you in the peanut gallery.
&gt;&gt;Romain Guy: And Dan will tell you more about

00:28:05.179 --> 00:28:07.400
the new innovations that we've introduced
in Jelly Bean.

00:28:07.400 --> 00:28:09.850
&gt;&gt;Daniel Sandler: I have a Ph.D. in hurting
you later. We'll talk about that.

00:28:09.850 --> 00:28:13.530
&gt;&gt;Romain Guy: He told us not to call him Dr.
Dan so, of course, I had to.

00:28:13.530 --> 00:28:18.150
&gt;&gt;Daniel Sandler: Hi, everybody. Thank you
guys. My name is Dan Sandler, I'm on the system

00:28:18.150 --> 00:28:23.620
UI team for Android, I'm the technical lead
for the notifications. Where's my -- here

00:28:23.620 --> 00:28:28.010
we go, let's go ahead and get started.
This is the notifications API that you know

00:28:28.010 --> 00:28:34.780
and love, and we pretty had since the begin,
since API1 the two key slots here of interest

00:28:34.780 --> 00:28:39.700
are the icon which goes on the status bar
and the view that you can pull down and examine

00:28:39.700 --> 00:28:44.340
from the status bar in the shade.
We added some new stuff in Gingerbread to

00:28:44.340 --> 00:28:48.570
let you launch an activity alongside your
notification so you can have the notification

00:28:48.570 --> 00:28:52.660
system take care of your sounds and everything
but present a full screen UI, that's the full

00:28:52.660 --> 00:28:58.150
screen intent. In Honeycomb we added some
extra stuff to let you show nice, large avatars

00:28:58.150 --> 00:29:04.580
and stuff like that in notifications but basically
the API has remained largely the same except

00:29:04.580 --> 00:29:10.220
I will say for the icon guidelines, we have
changed those a few times, I apologize, you

00:29:10.220 --> 00:29:17.250
can send me your bills for latte sipping designers.
In Jelly Bean, API6, the new API service is

00:29:17.250 --> 00:29:22.000
deceptively small, we're just adding two new
things here. We've got a big content view,

00:29:22.000 --> 00:29:25.860
we'll talk about that, and we've got a priority
slot, we'll talk about that too. And one other

00:29:25.860 --> 00:29:32.630
thing, I'm really happy to say there are no
new icon guidelines for you.

00:29:32.630 --> 00:29:36.830
[ Laughter ]
You guys didn't leave me a lot of time, so

00:29:36.830 --> 00:29:41.330
we'll keep moving. Let's talk about priority.
It's an int, it's just an int, not all that

00:29:41.330 --> 00:29:46.240
scary. There are not many choices. So don't
get wild were, just are five. We'll talk about

00:29:46.240 --> 00:29:50.770
these buckets in a second. But first let me
say this is a hint to system UI. This is a

00:29:50.770 --> 00:29:55.330
way for you in your app to tell us how urgent
you think this notification is. How much of

00:29:55.330 --> 00:29:59.830
the user's attention we should try to grab
here, and with that information system UI

00:29:59.830 --> 00:30:05.919
may change the appearance or position of your
notification accordingly. So congratulations,

00:30:05.919 --> 00:30:10.090
you can finally stop using ongoing notifications
to jam your stuff to the top, or you can actually

00:30:10.090 --> 00:30:15.480
specify that request in a first-class way
using priority. You can also now create notifications

00:30:15.480 --> 00:30:19.230
that don't even show up in the status bar
at all. Why would you want to do this? If

00:30:19.230 --> 00:30:23.230
you had a notification that you didn't want
to actually steal users' attention but if

00:30:23.230 --> 00:30:27.020
you happened to be in the notification shade
anyway, here's some information you might

00:30:27.020 --> 00:30:31.240
want to know, I call these opportunistic notifications,
you can do those now with the very lowest

00:30:31.240 --> 00:30:35.101
priority, the icon won't show up at the top
but the view will show up inside the notification

00:30:35.101 --> 00:30:38.950
panel.
[ A few applause]

00:30:38.950 --> 00:30:43.360
Thanks, Mom. So here are the priority buckets
we were talking about. Most notifications

00:30:43.360 --> 00:30:47.430
are going to fall right in the middle of high,
default, low. This is a great way for you,

00:30:47.430 --> 00:30:53.330
if you, for example, you ran a massive scaled
cloud-based email service that knew that some

00:30:53.330 --> 00:30:57.680
emails were more important than others you
might use the priority bit to express that

00:30:57.680 --> 00:31:02.039
in your notification and then we would be
able to show it inside the system UI. You

00:31:02.039 --> 00:31:06.640
can also imagine that SMS chat, things of
that nature, would be higher priority, if

00:31:06.640 --> 00:31:11.270
you have an app you know has a lot of notifications,
so and so has added you to their circles,

00:31:11.270 --> 00:31:14.260
not naming names, you could make that a little
bit lower.

00:31:14.260 --> 00:31:18.110
You would use a maximum priority for something
that actively requires the user's attention

00:31:18.110 --> 00:31:22.049
right now. Somebody is calling you, somebody
is trying to hang out with you, there is a

00:31:22.049 --> 00:31:26.140
typhoon in your area, that's what max is for.
And min, as we talked about, is for these

00:31:26.140 --> 00:31:29.590
opportunistic notifications, situations where
I don't want to take your attention, but if

00:31:29.590 --> 00:31:33.679
I already have it, you might want to know
about this kind of thing. So a calendar event

00:31:33.679 --> 00:31:39.210
that is long in the past that you might want
to know that you completely spaced on that,

00:31:39.210 --> 00:31:45.030
suggestions, some additional like detailed
fussy, nerdy status things which I love or

00:31:45.030 --> 00:31:50.450
promotions for in-app purchases would be a
great candidate to put into the minimum priority

00:31:50.450 --> 00:31:53.990
bucket.
If you don't know what to do, leave it at

00:31:53.990 --> 00:31:57.020
the default, we'll take care of the rest,
as we always have.

00:31:57.020 --> 00:32:02.140
Let's talk about big content view. I don't
know how to tell you this but it's kind of

00:32:02.140 --> 00:32:09.730
a big deal. The first major new notifications
feature, in my opinion, since 1.0, we're really

00:32:09.730 --> 00:32:12.210
excited about it.
The content view, it's a remote view slot

00:32:12.210 --> 00:32:17.050
on notification, it works the same as it always
has. It's 64 dips tall, which we instituted

00:32:17.050 --> 00:32:24.110
as the standard in Honeycomb, we call that
1U, the reason why will be obvious later and

00:32:24.110 --> 00:32:28.020
you can continue to use notification.builder
to create this. You are using notification.builder,

00:32:28.020 --> 00:32:31.289
right, you're not still using set latest info?
Good, I'm glad to hear that.

00:32:31.289 --> 00:32:37.690
The 1U notification will continue to show
your small icon, large icon, content text,

00:32:37.690 --> 00:32:43.620
title, when, count, all this great stuff,
packed into one very small easy-to-read tidy

00:32:43.620 --> 00:32:46.780
little package.
Big content view is just like content viewer

00:32:46.780 --> 00:32:51.240
but bigger. It goes up to four times the size
of the original notification. We call that

00:32:51.240 --> 00:32:56.800
a 4U, but you don't have to use all that space.
Essentially whatever you want to specify in

00:32:56.800 --> 00:33:01.910
the layout or we'll talk about using the platform
to help you with that. It's a really big canvas.

00:33:01.910 --> 00:33:06.490
You can do whatever you think is going to
be most meaningful to the user. You can put

00:33:06.490 --> 00:33:11.820
text in there, icons, buttons of the sort
that we pioneered in Honeycomb with the music

00:33:11.820 --> 00:33:16.929
player notification. And the platform is here
to help you fill all that space in a way that

00:33:16.929 --> 00:33:22.020
looks great on Android. We have new platform
ideas to make great looking big notifications

00:33:22.020 --> 00:33:26.400
or as always, we continue to allow you to
specify your own remote views because sometimes

00:33:26.400 --> 00:33:30.110
you guys think of great things that we have
not even considered so you can have every

00:33:30.110 --> 00:33:32.809
single one of those pixels if you really need
it.

00:33:32.809 --> 00:33:36.490
The first one I want to talk about, the first
of these new platform features to help you

00:33:36.490 --> 00:33:42.549
fill that space are notification actions.
Hiroshi looks good there. So you can add up

00:33:42.549 --> 00:33:46.140
to three buttons right at the bottom of a
notification so they go outside of the one

00:33:46.140 --> 00:33:50.110
new space that automatically bumps you into
having a big content view using additional

00:33:50.110 --> 00:33:54.320
space in the notification panel. You can use
this with any notification, and the point

00:33:54.320 --> 00:33:57.950
here is to allow a user to get something done
right there, right from the panel without

00:33:57.950 --> 00:34:03.429
changing context. So one of the ways you might
want to use this is to visit a different activity.

00:34:03.429 --> 00:34:07.050
So, for example, if I missed a call here,
the callback button doesn't take me to my

00:34:07.050 --> 00:34:12.210
call log but it puts me right in the dialer,
you guys hopefully saw that in the demo next

00:34:12.210 --> 00:34:16.069
door.
You can also use this action system to take

00:34:16.069 --> 00:34:19.879
some kind of action in the background, to
say I want to snooze this calendar event for

00:34:19.879 --> 00:34:22.909
10 minutes, you don't actually need to go
to calendar, you don't need to do anything

00:34:22.909 --> 00:34:28.119
else, you can press a button and it's done.
+1 is a great example, you press it and you're

00:34:28.119 --> 00:34:33.290
back in the app where you were.
And a little protip here for you is that to

00:34:33.290 --> 00:34:37.799
show that you've already taken an action,
you can actually go back and update the notification

00:34:37.799 --> 00:34:42.210
and either change the icon or even set the
intent to be null and we'll actually replace

00:34:42.210 --> 00:34:46.239
that button with what we call a tombstone
which is sort of a disabled state of the same

00:34:46.239 --> 00:34:50.759
button to show the user, yes, I heard your
click, you can leave the notification panel.

00:34:50.759 --> 00:34:54.299
On the right, here, I want to indicate that
we've got some sample text, sample code to

00:34:54.299 --> 00:34:59.859
show you how this kind of thing is built.
So so far the top five or six lines are notification

00:34:59.859 --> 00:35:04.650
builder APIs that you know and love already.
We've got a couple of add action lines at

00:35:04.650 --> 00:35:09.130
the end that represent the new API surface,
it's very small give us an icon, give us some

00:35:09.130 --> 00:35:13.180
text, I'm sorry, it's not localized here,
it's just a slide. And then a pending intent

00:35:13.180 --> 00:35:17.599
just like your content intent would be for
your notification.

00:35:17.599 --> 00:35:23.859
The next thing I want to show you is big text
style. This is the first of the notification

00:35:23.859 --> 00:35:28.430
styles. These are helper classes that assist
the notification builder in making a big content

00:35:28.430 --> 00:35:33.719
view that properly showcases the information
in your notification. So this is the simplest

00:35:33.719 --> 00:35:37.569
of them. It's pretty straightforward. It's
a big text view that fills up as much space

00:35:37.569 --> 00:35:42.779
as you need to show potentially an entire
email or and entire SMS which is a huge time-saver

00:35:42.779 --> 00:35:47.369
because you don't necessarily go to the app
anymore. And particularly, if you add actions

00:35:47.369 --> 00:35:50.950
now somebody could look at that action and
then take action again without leaving their

00:35:50.950 --> 00:35:54.930
context, without leaving the app that they
were in when they pulled down the shade. A

00:35:54.930 --> 00:35:59.579
tip here is that you can use the same string
for your content text in the small and the

00:35:59.579 --> 00:36:04.460
large notification, because in the 1U form
it's one line and ellipsized and in the big

00:36:04.460 --> 00:36:09.800
content view form it is wrapped and shown
in its entirety.

00:36:09.800 --> 00:36:14.839
You can see down here the API surface is this
set style method on notification.builder which

00:36:14.839 --> 00:36:19.499
allows you to specify one of the style objects
where you stuff in even more information and

00:36:19.499 --> 00:36:23.730
the platform takes care of the rest.
Moving on, I want to show you big picture

00:36:23.730 --> 00:36:29.800
style. This is just a presentation tip if
you can fit in a photo by Romain, it will

00:36:29.800 --> 00:36:34.650
make your photo look outstanding. If you can
fit in a picture of Romain even better. So

00:36:34.650 --> 00:36:38.920
this one is pretty obvious. It's great for
anytime you have a lot of visual content,

00:36:38.920 --> 00:36:44.069
a graph, a photograph, an illustration, a
slide. You supply your own bitmap just like

00:36:44.069 --> 00:36:48.099
the large icon, and we'll center crop it,
slap in the notification shade and show it

00:36:48.099 --> 00:36:52.239
to the user. The aspect ratio is about two-to-one
because that's what pretty much fits into

00:36:52.239 --> 00:36:56.359
the 4U there when you subtract out the top
and subtract out the action buttons if you

00:36:56.359 --> 00:37:00.220
have them. If you specify more than about
450 dips which is the widest notification

00:37:00.220 --> 00:37:05.210
panel that I'm aware of, you're just going
to waste space, you're going to waste RAM,

00:37:05.210 --> 00:37:08.109
because as long as that notification is sitting
there in the panel somebody's got to be holding

00:37:08.109 --> 00:37:13.519
on to that memory and that's me so don't make
me waste the user's memory. Here's another

00:37:13.519 --> 00:37:17.980
bit of sample code and again, pretty straightforward,
set style, create a big picture style, stuff

00:37:17.980 --> 00:37:24.779
a bitmap in there and you're good to go.
Here's inbox style, another piece of the platform.

00:37:24.779 --> 00:37:30.510
It's great anytime you have a list of messages,
a list of headlines, a calendar agenda, or

00:37:30.510 --> 00:37:34.430
even if you have an app that has a lot of
notifications you want to batch together into

00:37:34.430 --> 00:37:39.890
one aggregate. This is a great way to show
that off. And it's just a bunch of lines.

00:37:39.890 --> 00:37:43.519
But it really is incredibly powerful when
you are pulling on your notification shade

00:37:43.519 --> 00:37:46.749
and you see your top three emails and you
can put that shade away knowing that you don't

00:37:46.749 --> 00:37:52.489
even need to go into your email application
to consider them. It's super powerful.

00:37:52.489 --> 00:37:55.670
You can use style text in each of these, you
can you style text and big text style view

00:37:55.670 --> 00:38:00.369
as well -- big text style as well. In order
to separate, for example, if you were using

00:38:00.369 --> 00:38:07.220
bold and white text to set off the sender
from the subject in these emails. It's a great

00:38:07.220 --> 00:38:11.539
way to provide a little visual interest and
provide a little bit of structure as well.

00:38:11.539 --> 00:38:15.550
We also have a separate line here and, actually,
all of these large templates have the summary

00:38:15.550 --> 00:38:19.410
text line that you can use. It's particularly
useful in something like inbox style where

00:38:19.410 --> 00:38:23.000
you want to say this is the account which
these messages belong to. There's not really

00:38:23.000 --> 00:38:26.200
another good spot to put it, so we have an
additional line there at the bottom. And that's,

00:38:26.200 --> 00:38:29.400
in fact, where you'll see a lot of the other
pieces of the standard 1U template that don't

00:38:29.400 --> 00:38:34.729
always fit into inbox style. So you can see
the number here is shown at the right of new

00:38:34.729 --> 00:38:41.130
messages. Very handy.
So those are the -- those are the pieces of

00:38:41.130 --> 00:38:45.099
the platform in API to help you create great
new big notifications and so the next question

00:38:45.099 --> 00:38:49.849
is how did the user get to see these things.
You saw in the demo that the top notification

00:38:49.849 --> 00:38:54.400
is always expanded for the user, but we have
some other ways for the user to get there.

00:38:54.400 --> 00:39:00.420
Hugo showed off the two-finger pulldown. We
also explored a two-finger spread horizontally,

00:39:00.420 --> 00:39:04.109
the old two-finger stretch vertically, and
something I call the screwdriver, which is

00:39:04.109 --> 00:39:07.289
a weird little twisting thing, like you're
trying to put a flat head screwdriver into

00:39:07.289 --> 00:39:12.479
the side of a can of paint to pop off the
lid. We tried them all, pulldown worked really

00:39:12.479 --> 00:39:17.800
well, given the real estate of a notification,
it's a very small hidden rectangle but you

00:39:17.800 --> 00:39:21.480
can get both your fingers on there pretty
easily. However, all of these are supported.

00:39:21.480 --> 00:39:25.589
So if somebody walks up to a device and really
hasn't seen this talk, they can try kind of

00:39:25.589 --> 00:39:33.390
whatever and it's probably going to work.
So as you saw in the keynote, we do expand

00:39:33.390 --> 00:39:38.510
the topmost notification by default if it
can be expanded. And this is another way that

00:39:38.510 --> 00:39:41.619
users who don't know about these gestures
are going to still get some of the benefits

00:39:41.619 --> 00:39:45.460
of these great expanded notifications, that
top one is going to be expanded for you right

00:39:45.460 --> 00:39:47.800
there.
Remember we talked about priority and how

00:39:47.800 --> 00:39:52.049
the system UI might actually change positions
of notifications based on priority. Well,

00:39:52.049 --> 00:39:56.519
if you combine putting the most important
stuff at top with expanding the top-most thing,

00:39:56.519 --> 00:40:01.609
now we know that for most users and most situations
you're going to have the most detail about

00:40:01.609 --> 00:40:04.599
the most important thing right in front of
you as soon as you pull down the notification

00:40:04.599 --> 00:40:09.420
shade. It's very cool. Pin fact, as you saw
during the demo, if you keep swiping away

00:40:09.420 --> 00:40:13.160
the top notification, the next one will pop
up to the top like a cafeteria tray and expand

00:40:13.160 --> 00:40:18.849
itself. It's a great way to sort of skim through
your notifications in detail.

00:40:18.849 --> 00:40:23.900
One last thing that we added to the platform
and I'm very excited about is that you can

00:40:23.900 --> 00:40:28.239
long press any notification in the notification
panel and get a little pop-up that says app

00:40:28.239 --> 00:40:32.410
info. And if you tap on that, it will take
you to settings in the app details page. You

00:40:32.410 --> 00:40:36.719
will now be able to figure out which package
posted which notification. This is really,

00:40:36.719 --> 00:40:40.089
really useful for users so you can understand
where these applications are coming from,

00:40:40.089 --> 00:40:43.869
if it's not immediately obvious. From that
page, of course, you can uninstall packages,

00:40:43.869 --> 00:40:47.959
as that app detail page has always been able
to do. There's also a check box where you

00:40:47.959 --> 00:40:52.089
can simply disable notifications from any
package, leaving it otherwise untouched. So

00:40:52.089 --> 00:40:55.509
if you have a package, you say I don't like
the notifications coming from this app, you

00:40:55.509 --> 00:40:59.150
turn it off.
[ Applause ]

00:40:59.150 --> 00:41:03.529
&gt;&gt;Dan Sandler: The corollary for the people
in this room is.

00:41:03.529 --> 00:41:09.030
don't make your users do that. Don't annoying
your users, because they can find your package.

00:41:09.030 --> 00:41:13.469
I have some examples here that I'd like to
show. You saw a lot of great examples from

00:41:13.469 --> 00:41:18.880
our apps in the keynote.
And in these slides. We've also been working

00:41:18.880 --> 00:41:22.779
with a few third parties on Jelly Bean and
on the Nexus 7, and they're super excited

00:41:22.779 --> 00:41:27.239
about these features as well. And so I've
a bunch of screen shots to show you from some

00:41:27.239 --> 00:41:29.619
of our third parties who have been working
on this.

00:41:29.619 --> 00:41:33.690
I got these screen shots from Foursquare.
I'm very excited about these. They do a great

00:41:33.690 --> 00:41:39.160
job of showing just enough surface area of
the app within the notification panel to let

00:41:39.160 --> 00:41:44.609
you interact with Foursquare in a great way
without leaving your context. You can do friends.

00:41:44.609 --> 00:41:51.490
You can like check-ins and do check-ins, things
like that, all from the notification panel.

00:41:51.490 --> 00:41:57.309
Here's one from a couple of music players.
We've got Spotify and TuneIn. Each of them

00:41:57.309 --> 00:42:01.410
is showing you a great big music player in
the expanded notification, not just with the

00:42:01.410 --> 00:42:06.700
standard transport controls, but with buttons
to allow you to favorite a song or skip to

00:42:06.700 --> 00:42:11.190
a channel and things like that. Again, if
you're using the device and you want to skip

00:42:11.190 --> 00:42:15.239
to another channel, it's great to not have
to switch out of your current app to do so.

00:42:15.239 --> 00:42:18.440
So I'm very excited to see these things once
they're in the field.

00:42:18.440 --> 00:42:23.170
Here are some screen shots from Pulse. Now,
the top one from Pulse, as you can see, looks

00:42:23.170 --> 00:42:27.660
pretty much like a standard big picture notification.
In fact, I believe that this is. And yet it

00:42:27.660 --> 00:42:31.529
looks great in the situation. They've got
a headline there and the two action buttons.

00:42:31.529 --> 00:42:35.229
But I think what really shines is that bottom
one where they're doing custom remote views.

00:42:35.229 --> 00:42:40.130
Anyone who uses Pulse knows this is their
trademark UI, these square tiles that they

00:42:40.130 --> 00:42:45.279
use to encapsulate a title, and a photograph
from each of their articles. And so pulling

00:42:45.279 --> 00:42:50.999
down the notification panel, you get the Pulse
experience right there in -- what is that?

00:42:50.999 --> 00:42:57.839
3U? Something like that? Yeah. It looks outstanding.
Here are screen shots we got from Gig Beat.

00:42:57.839 --> 00:43:02.549
This is sort of an expansion of the big picture
theme. As you can see, they've got four actions

00:43:02.549 --> 00:43:06.990
there. We only allow three. So already they
are breaking out of boundaries. It's a great

00:43:06.990 --> 00:43:12.079
way to get access, again, without leaving
your app.

00:43:12.079 --> 00:43:17.089
Here's one from Path that I really like, because
it's almost big picture, but instead of two

00:43:17.089 --> 00:43:21.749
actions down here, they've an action and then
this little multiple mood selector thing.

00:43:21.749 --> 00:43:26.509
I think this is great, because it looks just
like platform controls, and yet you can from

00:43:26.509 --> 00:43:32.670
this spot provide very fine-grained feedback
to the app and to your friends. It's very

00:43:32.670 --> 00:43:35.540
cool.
Finally, as an example of how you can really

00:43:35.540 --> 00:43:38.859
just do whatever you want with the remote
views, here's one I got from pocket gems.

00:43:38.859 --> 00:43:42.499
I haven't seen this game, I don't know what
it does, but it looks very exciting. I'm very

00:43:42.499 --> 00:43:48.250
excited to see what this is. They've got great
large photos and their own custom buttons

00:43:48.250 --> 00:43:52.700
in a way that matches their application's
look and feel.

00:43:52.700 --> 00:43:58.410
Let's pull this together.
All the way back -- I went back doing research

00:43:58.410 --> 00:44:03.509
looking for screen shots and notifications
from the beginning of time and went back to

00:44:03.509 --> 00:44:10.819
pre-1.0 SDK. The M3 SDK had this great UI
that you can see at the right there.

00:44:10.819 --> 00:44:12.999
And there was a quote in the API docs. It
said the, "The idea of notifications" -- This

00:44:12.999 --> 00:44:16.829
was the first time anybody had ever seen Android
notifications. "The idea is to be as unobtrusive

00:44:16.829 --> 00:44:22.400
as possible while still showing the user information
that you want them to see."

00:44:22.400 --> 00:44:25.390
This is still true today, even with all this
new great new API service, all thee great

00:44:25.390 --> 00:44:31.109
new devices and form factors. The user's attention
is still extremely precious. And so in Jelly

00:44:31.109 --> 00:44:35.359
Bean, we really tried to bring you new tools
to help manage the user's attention in a conscientious

00:44:35.359 --> 00:44:39.089
way. To get the user's attention, now we have
priorities to show the most urgent things

00:44:39.089 --> 00:44:44.181
first, not just what's most recent. To use
the user's attention, once you've it. We've

00:44:44.181 --> 00:44:48.390
got these big notifications to provide additional
detail whenever the user wants them to be

00:44:48.390 --> 00:44:51.990
able to just on demand expand them.
And then, finally, we've got these notification

00:44:51.990 --> 00:44:55.989
actions that provide a great platform-themed
way for the user to take action right from

00:44:55.989 --> 00:45:00.559
the notification panel and get back to what
they were doing.

00:45:00.559 --> 00:45:04.059
With that, I will hand it back to these guys.
Honestly, I was really worried that I was

00:45:04.059 --> 00:45:08.440
going to have to follow the Chet and Romain
show. But they had to follow sky diving. So

00:45:08.440 --> 00:45:11.589
this wasn't so bad.
[ Applause ]

00:45:11.589 --> 00:45:17.509
&gt;&gt;Chet Haase: Thank you, Dr. Dan.
So we mentioned a few talks in the process

00:45:17.509 --> 00:45:21.380
of the presentation. I'll call your attention
to a few of them. Obviously, there's a ton

00:45:21.380 --> 00:45:26.079
of great sessions about all kinds of technologies
this week, including a ton of great sessions

00:45:26.079 --> 00:45:29.849
about Android. This is just a small sample.
I wanted to call attention to the ones that

00:45:29.849 --> 00:45:34.609
are specifically talking about Jelly Bean-related
features. There's the media codec presentation

00:45:34.609 --> 00:45:39.539
talking about low-level codec access. There's
the Android fireside chat this afternoon where

00:45:39.539 --> 00:45:43.799
they'll answer random questions and probably
not answer some random questions.

00:45:43.799 --> 00:45:50.059
There's the accessibility talk also this afternoon.
There is what's new in Android developers'

00:45:50.059 --> 00:45:53.180
tools. Go there if you want to find out much
more information about the tool stuff that

00:45:53.180 --> 00:45:56.730
we touched on very briefly.
We're doing a presentation, Romain and I are

00:45:56.730 --> 00:46:00.140
doing a presentation tomorrow afternoon for
Butter or worse, where we talk about all kinds

00:46:00.140 --> 00:46:05.220
of geeky graphics stuff.
And, finally, doing more with less, Jeff Sharkey

00:46:05.220 --> 00:46:09.150
is giving a talk where he will demonstrate
Systrace, he'll talk more about render script

00:46:09.150 --> 00:46:13.000
compute and taking advantage of the platform
to do more with less.

00:46:13.000 --> 00:46:15.720
&gt;&gt;Romain Guy: And we have time for questions.
We have about ten minutes.

00:46:15.720 --> 00:46:19.410
&gt;&gt;Chet Haase: And thank you for coming.
[ Applause ]

00:46:19.410 --> 00:46:26.190
&gt;&gt;Romain Guy: So if you want to ask a question,
we have a mike over here in the aisleway.

00:46:26.190 --> 00:46:32.229
So just go to the mike and maybe we'll give
you an answer. We will not talk about things

00:46:32.229 --> 00:46:33.229
that we have not announced. Let's be clear.
Sir.

00:46:33.229 --> 00:46:37.880
&gt;&gt;&gt; I don't know if this falls into that last
category, but I love the new X86 emulator

00:46:37.880 --> 00:46:48.829
quite a bit. Our application uses the Google
API, so I was wondering if you could speak

00:46:48.829 --> 00:46:54.680
a little bit about what (indiscernible) APIs
on the X86 simulator.

00:46:54.680 --> 00:46:58.759
&gt;&gt;Romain Guy: Google APIs on the X86 simulator.
It depends if they use native code. I don't

00:46:58.759 --> 00:47:04.150
believe they do. But if they don't use native
code, then they can run on X86 just fine,

00:47:04.150 --> 00:47:06.309
like, today.
&gt;&gt;Chet Haase: Actually, there is a Google

00:47:06.309 --> 00:47:11.369
APIs talk this week. And you may know more
information about it, but I -- I think the

00:47:11.369 --> 00:47:13.809
answer is that simple.
&gt;&gt;&gt; (indiscernible) things like Maps.

00:47:13.809 --> 00:47:20.739
&gt;&gt;Romain Guy: Maps should -- I think Maps
doesn't use native code, either. So it should

00:47:20.739 --> 00:47:24.010
work.
&gt;&gt;Chet Haase: We had a question from one of

00:47:24.010 --> 00:47:25.509
our panelists.
&gt;&gt;&gt; Can we use the notification API (indiscernible)

00:47:25.509 --> 00:47:27.039
ICS (indiscernible) .
&gt;&gt;Chet Haase: Repeat.

00:47:27.039 --> 00:47:31.329
&gt;&gt;Dan Sandler: I'll repeat the question.
Can we use the notification API on previous

00:47:31.329 --> 00:47:34.400
releases?
So we're going to put that in the notification

00:47:34.400 --> 00:47:39.609
compact class inside the support library so
that you can use these new APIs and not have

00:47:39.609 --> 00:47:44.210
to set up your own API guards.
If you take the preview SDK today, you'll

00:47:44.210 --> 00:47:49.119
have to do your own API-level guarding around
these new APIs. But just the new components

00:47:49.119 --> 00:47:54.289
of the APIs, if you want to use old components
of Builder, they'll work as they did before.

00:47:54.289 --> 00:47:56.420
&gt;&gt;Chet Haase: Yeah, Notification.Builder is
actually in support .

00:47:56.420 --> 00:48:01.630
&gt;&gt;Dan Sandler: Notification.Builder is in
support, so the old pre-Jelly Bean notification.builder

00:48:01.630 --> 00:48:04.499
APIs are already in support (indiscernible)
DUs going backward.

00:48:04.499 --> 00:48:11.569
&gt;&gt;&gt; Hey, guys, on the new notification where
the user can basically shut off our apps notification,

00:48:11.569 --> 00:48:15.319
will we get any kind of feedback so we know
they did that?

00:48:15.319 --> 00:48:17.299
&gt;&gt;Dan Sandler: No.
&gt;&gt;&gt; So nothing at all?

00:48:17.299 --> 00:48:19.640
&gt;&gt;Dan Sandler: No.
&gt;&gt;&gt; Okay. Thanks.

00:48:19.640 --> 00:48:22.039
&gt;&gt;Chet Haase: Love those fast answers.
Go.

00:48:22.039 --> 00:48:26.369
&gt;&gt;&gt; Yeah, I was wondering when we're using
the support libraries, support libraries don't

00:48:26.369 --> 00:48:32.829
have an intrinsic way of being able to use
-- you know, you're running on ICS or Jelly

00:48:32.829 --> 00:48:37.509
Bean, use the underlying features. You compile
to the support library, and it gives them

00:48:37.509 --> 00:48:41.849
the support libraries.
Do you have a good way in the ADT to allow

00:48:41.849 --> 00:48:48.799
us to use one code base but use the native
features when we've got it and use support

00:48:48.799 --> 00:48:51.160
when we don't?
&gt;&gt;Romain Guy: So the support library actually

00:48:51.160 --> 00:48:57.130
will use the plat -- the platform you're running
on, it will use the platforms code for some

00:48:57.130 --> 00:49:01.609
of the -- of the features.
For instance, we have a new API on view that's

00:49:01.609 --> 00:49:07.380
called postal animation. It's in the support
library. If you call that from the support

00:49:07.380 --> 00:49:11.220
library, we will run that method on Jelly
Bean. But on other versions of the platforms,

00:49:11.220 --> 00:49:14.989
we won't run anything. But the code -- the
logic is not in the support library. All it

00:49:14.989 --> 00:49:23.511
does is dispatch properly.
&gt;&gt;&gt; Excuse me. The fragments are documented

00:49:23.511 --> 00:49:24.511
that they don't do that.
&gt;&gt;Romain Guy: Yes. Fragments are much more

00:49:24.511 --> 00:49:29.650
complex API. So it will be very difficult
for them to work this way. But as much as

00:49:29.650 --> 00:49:34.170
we can, we make them work this way.
&gt;&gt;&gt; So the question remains, is there a good

00:49:34.170 --> 00:49:37.400
way to use a single code base --
&gt;&gt;Romain Guy: Use the support library.

00:49:37.400 --> 00:49:41.440
&gt;&gt;&gt; -- and yet get the actual benefits of
the fragments, for example?

00:49:41.440 --> 00:49:45.400
&gt;&gt;Dan Sandler: It's going to depend component
by component on what is possible to achieve

00:49:45.400 --> 00:49:49.390
on the underlying platform. So take notifications,
for example. That one degrades pretty gracefully.

00:49:49.390 --> 00:49:52.880
If you use it, you'll get the Honeycomb features
on Honeycomb; you'll get the Froyo features

00:49:52.880 --> 00:49:56.160
on Froyo, and so forth.
Fragments is very complicated and is not easily

00:49:56.160 --> 00:49:59.699
back ported. We've got some of it we don't
have all of it. Support library will represent

00:49:59.699 --> 00:50:04.880
our best attempt to make as many features
as possible usable as far back as possible.

00:50:04.880 --> 00:50:11.630
&gt;&gt;&gt; So when do you recommend basically dumping
pre-Honeycomb for -- or separating two separate

00:50:11.630 --> 00:50:14.420
APKs?
&gt;&gt;Dan Sandler: You should take something like

00:50:14.420 --> 00:50:17.230
that into the office hours. That seems more
--

00:50:17.230 --> 00:50:21.469
&gt;&gt;Chet Haase: Android office hours out on
the main section there in a little green-looking

00:50:21.469 --> 00:50:24.039
bar-like thing with no alcohol at it.
&gt;&gt;Romain Guy: Unfortunately.

00:50:24.039 --> 00:50:25.470
&gt;&gt;Dan Sandler: Can we fix that? I'd like to
&gt;&gt;Chet Haase: Go.

00:50:25.470 --> 00:50:28.170
&gt;&gt;&gt; So what other features are there in support
library that you cover?

00:50:28.170 --> 00:50:33.079
&gt;&gt;Romain Guy: Other features in the support
library?

00:50:33.079 --> 00:50:37.630
&gt;&gt;Dan Sandler: You should look through the
SDK. We've essentially -- anytime we add some

00:50:37.630 --> 00:50:43.420
useful feature to a widget or to, you know
-- you know, any piece of support toolkit

00:50:43.420 --> 00:50:46.410
in the framework, we'll look and see if it
makes sense to add it to the support library.

00:50:46.410 --> 00:50:48.640
So it's kind of a mishmash of features that
we've been able to back port.

00:50:48.640 --> 00:50:53.209
&gt;&gt;Chet Haase: In a lot of cases it doesn't
make sense. So if we add a new API that actually

00:50:53.209 --> 00:50:58.390
depends on underlying support in the view
infrastructure, then, obviously, it makes

00:50:58.390 --> 00:51:02.160
no sense to back port that. So not everything
goes back that because it simply wouldn't

00:51:02.160 --> 00:51:05.990
work. Right? So it depends case by case basis.
&gt;&gt;Dan Sandler: That explains why I can't have

00:51:05.990 --> 00:51:10.089
your animations on Eclair.
&gt;&gt;Romain Guy: Although someone did back port.

00:51:10.089 --> 00:51:14.619
&gt;&gt;Chet Haase: Yeah. Anyway --
&gt;&gt;Romain Guy: They don't do the same thing.

00:51:14.619 --> 00:51:21.130
&gt;&gt;&gt; Do you have any plans on implementing
the slideout menu UI pattern --

00:51:21.130 --> 00:51:23.109
&gt;&gt;Dan Sandler: The left hand slideout from
Google+?

00:51:23.109 --> 00:51:27.430
&gt;&gt;&gt; In G+, and also from the YouTube demo.
&gt;&gt;Dan Sandler: Right, right.

00:51:27.430 --> 00:51:31.750
&gt;&gt;Romain Guy: Right now, I don't think we
have any plans that I know of or that I could

00:51:31.750 --> 00:51:34.451
talk about.
But there's this guy right here who wrote

00:51:34.451 --> 00:51:38.910
a series of three awesome articles. If you
look for Green Droid, his name is (saying

00:51:38.910 --> 00:51:44.949
name). He wrote three articles on who -- with
code on how to implement that in your application.

00:51:44.949 --> 00:51:51.239
&gt;&gt;&gt; Thank you. And also do you plan on having
better action bar support?

00:51:51.239 --> 00:51:53.079
&gt;&gt;Chet Haase: Better?
&gt;&gt;Romain Guy: There's this awesome third-party

00:51:53.079 --> 00:51:55.390
library called Action Bar Sherlock. Works
really well.

00:51:55.390 --> 00:52:03.890
&gt;&gt;&gt; Hi, guys, I want to know when the new
(indiscernible) country list will be published.

00:52:03.890 --> 00:52:09.210
&gt;&gt;Romain Guy: That I don't know. There is
a session on Google Play -- when is it? This

00:52:09.210 --> 00:52:14.089
afternoon. There's a session on Google Play
later today. They will be able to answer your

00:52:14.089 --> 00:52:17.630
question. If you cannot attend, you can go
to the Android office hours.

00:52:17.630 --> 00:52:22.009
Chris Yerga can answer that question.
Chris, we have a question for you. When is

00:52:22.009 --> 00:52:27.329
the list of new countries where you can sell
applications to be made available?

00:52:27.329 --> 00:52:32.369
&gt;&gt;Chris Yerga: (off mike) --
&gt;&gt;Chet Haase: He doesn't have anything to

00:52:32.369 --> 00:52:36.160
announce now, and he can't speak to something
else.

00:52:36.160 --> 00:52:39.059
[ Laughter ]
&gt;&gt;Romain Guy: Thanks, that was very helpful,

00:52:39.059 --> 00:52:42.369
Chris. Thank you very much.
&gt;&gt;Chet Haase: We'll defer all answers to Chris

00:52:42.369 --> 00:52:43.369
in the future.
Yes.

00:52:43.369 --> 00:52:44.369
&gt;&gt;&gt; All right. Thanks.
With the Tegra 3 and the (indiscernible) 3,

00:52:44.369 --> 00:53:00.979
what kind of changes have been done in the
frameworks to help use all those boards?

00:53:00.979 --> 00:53:04.839
&gt;&gt;Romain Guy: So in the framework, we haven't
done much, because the framework itself doesn't

00:53:04.839 --> 00:53:09.109
really need multithreading and most of the
time we have to run our code on the UI thread

00:53:09.109 --> 00:53:11.670
anyway.
But, you know, applications on Android are

00:53:11.670 --> 00:53:15.440
heavily multithreaded by default, like, all
the communications, all the IP communications

00:53:15.440 --> 00:53:19.119
use something called a binder. And that's
using a pool of threads, so they will automatically

00:53:19.119 --> 00:53:24.029
benefit from multiple cores. If you a sync
task and you tell us to use multiple threads

00:53:24.029 --> 00:53:28.319
a the same time, we will make use of the multiple
cores. We have render script that will let

00:53:28.319 --> 00:53:33.109
you run code very efficiently on multiple
cores at the same time.

00:53:33.109 --> 00:53:43.319
And then you have all the standard APIs, like
the thread pull executer, all the threading

00:53:43.319 --> 00:53:45.019
-- the typical threading APIs.
If you see something that's missing or that

00:53:45.019 --> 00:53:46.280
we should add, let us know. We'd love to hear
about it.

00:53:46.280 --> 00:53:51.890
&gt;&gt;&gt; Thanks.
&gt;&gt;&gt; Hi. I have a user feature question, about

00:53:51.890 --> 00:53:55.099
the new Beam features. Is that -- So that's
using to now share media (indiscernible) like

00:53:55.099 --> 00:53:56.099
and using others. Is that using the Wi-Fi
direct? And so that's my first question.

00:53:56.099 --> 00:53:58.289
And then is it compatible with the other Wi-Fi-direct
devices, like the S3 or others?

00:53:58.289 --> 00:54:01.579
&gt;&gt;Chet Haase: Chris Yerga.
&gt;&gt;Romain Guy: I don't know the exact answer.

00:54:01.579 --> 00:54:06.289
I believe it's using Bluetooth, actually,
to do the transfer. But that's a question

00:54:06.289 --> 00:54:10.699
you should -- talk to the NFC guys. There's
a session on NFC that will be able to answer

00:54:10.699 --> 00:54:11.821
that question precisely.
&gt;&gt;&gt; All right. Thank you.

00:54:11.821 --> 00:54:47.180
&gt;&gt;&gt; Hi. You mentioned in the slides that -- how
the latency is improved in Jelly Bean. Can

00:54:47.180 --> 00:54:48.249
you give me the number of how much in terms
of milliseconds that's improved?

00:54:48.249 --> 00:54:51.390
&gt;&gt;Chet Haase: You noticed that there was no
actual data on that slide. I thought I would

00:54:51.390 --> 00:54:56.000
slip that by.
No. We're -- as I said, the improvements are

00:54:56.000 --> 00:54:59.709
very significant in some cases, but they're
also very device-specific. So we don't want

00:54:59.709 --> 00:55:04.289
to give hard numbers right now, because, basically,
our job is not done. So I would say, you know,

00:55:04.289 --> 00:55:07.680
test with the devices that you care about
right now and see what the improvements are

00:55:07.680 --> 00:55:15.380
in your situation. And await further instructions.
&gt;&gt;&gt; Mostly in terms of VoIP communication.

00:55:15.380 --> 00:55:20.549
&gt;&gt;Chet Haase: I don't actually have that number.
Yes, sir.

00:55:20.549 --> 00:55:27.039
&gt;&gt;&gt; When will 4.1 source be posted to AOSB?
&gt;&gt;Romain Guy: During the keynote, they talked

00:55:27.039 --> 00:55:31.509
about sometime in July.
&gt;&gt;&gt; That's for the source, too, then?

00:55:31.509 --> 00:55:33.459
&gt;&gt;Romain Guy: I think so.
&gt;&gt;Chet Haase: July of 2012.

00:55:33.459 --> 00:55:37.530
&gt;&gt;Romain Guy: Usually in the past, we've never
published the source before the binaries were

00:55:37.530 --> 00:55:42.199
made available. As soon as the binary shows
up, you can expect the source to follow up

00:55:42.199 --> 00:55:44.579
pretty quickly.
&gt;&gt;Chet Haase: Hi.

00:55:44.579 --> 00:55:50.299
&gt;&gt;&gt; Just wondering if there's anything regarding
USB audio (indiscernible) any support for

00:55:50.299 --> 00:55:53.900
USB audio.
&gt;&gt;Romain Guy: I believe there is, actually.

00:55:53.900 --> 00:55:58.959
I saw that somewhere in the release notes.
Go check out developer.android.com. In the

00:55:58.959 --> 00:56:03.119
platform highlights, I believe they talk about
it. I might be wrong. But I think I saw something

00:56:03.119 --> 00:56:08.250
about USB audio. Android is now a big platform,
and, unfortunately, we don't know everything

00:56:08.250 --> 00:56:12.859
about it anymore. I used to.
&gt;&gt;Chet Haase: We know about everything except

00:56:12.859 --> 00:56:17.130
USB audio.
&gt;&gt;Romain Guy: Yes, and media codecs and other

00:56:17.130 --> 00:56:21.670
stuff.
&gt;&gt;&gt; Okay. Excuse me. The Jelly Bean's notification

00:56:21.670 --> 00:56:27.689
is more (indiscernible) and more actions.
I wonder if it uses much more power utilization

00:56:27.689 --> 00:56:31.680
than ICS.
&gt;&gt;Dan Sandler: For the notifications? They

00:56:31.680 --> 00:56:35.479
shouldn't take really any more power usage
when the device is off, and when the device

00:56:35.479 --> 00:56:39.549
is on, it shouldn't take any more, either.
You're already drawing to that space. I don't

00:56:39.549 --> 00:56:44.191
believe this is going to be a battery concern.
&gt;&gt;Romain Guy: Actually, they're going to use

00:56:44.191 --> 00:56:47.599
less, because we made improvements in that
space. So when the screen is off, we're going

00:56:47.599 --> 00:56:49.699
to use less power.
&gt;&gt;Dan Sandler: That's true. And you may even

00:56:49.699 --> 00:56:54.890
suffer fewer contact switches in applications.
So you may get tasks done in less time.

00:56:54.890 --> 00:56:59.259
&gt;&gt;Chet Haase: We also made a lot of improvements
in the overall platform in terms of the memory

00:56:59.259 --> 00:57:05.799
consumption for background tasks and the rendering
CPU requirements when things are being redrawn.

00:57:05.799 --> 00:57:09.739
So there's overall benefits to better usage,
notification-specifically, I don't think there's

00:57:09.739 --> 00:57:11.259
an impact.
&gt;&gt;Dan Sandler: That tied will lift our boat

00:57:11.259 --> 00:57:17.480
as well.
&gt;&gt;Chet Haase: There you go.

00:57:17.480 --> 00:57:21.599
&gt;&gt;&gt; Another question. Is it possible there
is API to get the priority of the notifications?

00:57:21.599 --> 00:57:24.779
&gt;&gt;Dan Sandler: Oh, for you to get the priority
of other notifications?

00:57:24.779 --> 00:57:30.989
&gt;&gt;&gt; Priority of the showing notifications.
&gt;&gt;Dan Sandler: I see. In general, we don't

00:57:30.989 --> 00:57:35.420
offer APIs for you to receive information
about other notifications available on the

00:57:35.420 --> 00:57:39.969
device, because that would allow you to have
information about other applications that

00:57:39.969 --> 00:57:45.039
you oughtn't have. We have some special dispensation
for disability services as always. But, no,

00:57:45.039 --> 00:57:49.359
there's no API service for you to get the
priority of anything but your own stuff.

00:57:49.359 --> 00:57:56.079
&gt;&gt;&gt; Okay. So is -- so there is (indiscernible)
apps, he can show the priority as high, it

00:57:56.079 --> 00:58:00.719
would be also on top.
&gt;&gt;Dan Sandler: Yes. And developers have always

00:58:00.719 --> 00:58:03.289
been able to game whatever system we put into
place.

00:58:03.289 --> 00:58:06.230
What I think we have now in Jelly Bean is
some first-class ways to say I want to be

00:58:06.230 --> 00:58:10.759
on top rather than some hacky ways to do it.
The surface for abuse is not substantially

00:58:10.759 --> 00:58:15.239
greater now. I think we've got better tools
for the developer and the user to manage stuff

00:58:15.239 --> 00:58:17.789
that abuses it.
&gt;&gt;Chet Haase: We're running out of time, I

00:58:17.789 --> 00:58:21.119
think, because everyone is hungry.
You can see that most of our panelists left.

00:58:21.119 --> 00:58:23.190
Let's --
&gt;&gt;Dan Sandler: You've turned into an imaginary

00:58:23.190 --> 00:58:25.380
Turkey in my mind.
&gt;&gt;Chet Haase: One more question.

00:58:25.380 --> 00:58:29.309
&gt;&gt;Romain Guy: One more question.
&gt;&gt;Chet Haase: We'll grab lunch and be in and

00:58:29.309 --> 00:58:31.900
out of office hours this afternoon. So you
can catch us there later.

00:58:31.900 --> 00:58:37.279
&gt;&gt;&gt; Thank you. Thank you for taking my question.
I work for iPass. We do the Wi-Fi connectivity

00:58:37.279 --> 00:58:43.319
manager app on Android. When we port from
2.3 to 4, we notice there was an additional

00:58:43.319 --> 00:58:48.329
notification on the captive network portal.
So on 4.1, any change about that front or

00:58:48.329 --> 00:58:55.150
if the panel can refer -- cannot -- if you
cannot answer now, can you refer me to someone

00:58:55.150 --> 00:58:58.309
with more information.
&gt;&gt;Dan Sandler: I don't know of any changes

00:58:58.309 --> 00:59:04.489
in that service. In fact, I've seen that notification
recently. No, I don't know offhand. I think

00:59:04.489 --> 00:59:07.769
that's a good thing to take to office hours.
&gt;&gt;Chet Haase: All right, that's it.

00:59:07.769 --> 00:59:09.010
&gt;&gt;Dan Sandler: Thank you, all.
[ Applause ]

