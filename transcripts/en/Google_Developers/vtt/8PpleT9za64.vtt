WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.350
FRED SAUER: The rate at which
you can write the same entity

00:00:02.350 --> 00:00:08.360
group is limited to one entity
group of write per second.

00:00:08.360 --> 00:00:12.170
And that seems, the developers
writing it, that

00:00:12.170 --> 00:00:13.240
seems really low.

00:00:13.240 --> 00:00:15.990
They were imagining a Facebook
application with 200,000 daily

00:00:15.990 --> 00:00:18.600
active users, which means
something like 20,000

00:00:18.600 --> 00:00:21.240
concurrent users on peak.

00:00:21.240 --> 00:00:23.090
So they're kind of contrasting
this and saying, well, on the

00:00:23.090 --> 00:00:26.040
one hand, I have 20,000
concurrent users all making

00:00:26.040 --> 00:00:28.660
requests at the very same
moment, and you're telling me

00:00:28.660 --> 00:00:30.160
one per second?

00:00:30.160 --> 00:00:32.120
Where is the disconnect?

00:00:32.120 --> 00:00:34.250
MANDY WAITE: I think it depends
on what your entity

00:00:34.250 --> 00:00:36.690
group was actually developed
to represent and how

00:00:36.690 --> 00:00:39.070
extensively you've modeled
it and the way you've

00:00:39.070 --> 00:00:40.380
modeled your data.

00:00:40.380 --> 00:00:42.986
If your entity group is really
specific to the particular

00:00:42.986 --> 00:00:44.895
user that's making the call,
then you won't really have to

00:00:44.895 --> 00:00:45.240
worry about it.

00:00:45.240 --> 00:00:47.190
One write per second would
be perfectly adequate.

00:00:47.190 --> 00:00:50.660
But if you kind of sprawled it
a bit and the entity group

00:00:50.660 --> 00:00:53.540
touches multiple users, then
you're likely to have some

00:00:53.540 --> 00:00:55.230
contention on that
entity group.

00:00:55.230 --> 00:00:57.001
And so you have multiple
users banging away at

00:00:57.001 --> 00:00:58.060
it at the same time.

00:00:58.060 --> 00:01:00.865
But really, it's best practices
at modeling your

00:01:00.865 --> 00:01:03.920
entities that will actually
avoid that kind of issue.

00:01:03.920 --> 00:01:08.500
So if you have 20,000 concurrent
requests, you're

00:01:08.500 --> 00:01:12.220
likely to be accessing 20,000
different entity groups and

00:01:12.220 --> 00:01:12.570
might have an issue.

00:01:12.570 --> 00:01:14.202
FRED SAUER: And that
should be fine.

00:01:14.202 --> 00:01:18.610
If you want to do 2 million
concurrent users on 2 million

00:01:18.610 --> 00:01:20.270
different entity groups,
that's absolutely fine.

00:01:20.270 --> 00:01:21.440
MANDY WAITE: Absolutely.

00:01:21.440 --> 00:01:26.040
FRED SAUER: To think about
entity groups as for the most

00:01:26.040 --> 00:01:27.440
part your unit of
transactionality.

00:01:27.440 --> 00:01:28.952
MANDY WAITE: Yeah.

00:01:28.952 --> 00:01:32.830
FRED SAUER: So if you need some
data related to a given

00:01:32.830 --> 00:01:36.750
user, like a user and their
achievements, for example, and

00:01:36.750 --> 00:01:39.510
you have those stored in three
or four different entities,

00:01:39.510 --> 00:01:43.050
you can put them all in one
entity group, and then the App

00:01:43.050 --> 00:01:45.730
Engine Datastore will make sure
that you can only have

00:01:45.730 --> 00:01:50.290
one transaction in flight at a
time for that entity group.

00:01:50.290 --> 00:01:54.990
So generally, what we see is
that each user becomes an

00:01:54.990 --> 00:01:59.370
entity group or each order in an
order entry system, or each

00:01:59.370 --> 00:02:03.230
customer in a CRM system becomes
an entity group.

00:02:03.230 --> 00:02:06.380
We actually also have, we didn't
have this initially,

00:02:06.380 --> 00:02:09.750
but we introduced this again
about a year ago, something

00:02:09.750 --> 00:02:13.240
called cross-entity group
transactions or XG

00:02:13.240 --> 00:02:14.640
transactions.

00:02:14.640 --> 00:02:18.040
And that allows you to transact
up to five different

00:02:18.040 --> 00:02:20.335
entity groups in a single
transaction.

00:02:20.335 --> 00:02:20.720
MANDY WAITE: Oh, OK.

00:02:20.720 --> 00:02:21.220
That's awesome.

00:02:21.220 --> 00:02:24.660
FRED SAUER: So it used to be the
case that before we had XG

00:02:24.660 --> 00:02:27.730
transactions, there was a little
bit of this trade off

00:02:27.730 --> 00:02:31.640
between, I want to make my
entity groups bigger because I

00:02:31.640 --> 00:02:33.960
want to do transactions, but I
need to make them smaller and

00:02:33.960 --> 00:02:35.560
have the right throughput.

00:02:35.560 --> 00:02:36.920
And that was sometimes
a challenge.

00:02:36.920 --> 00:02:38.900
There were, in fact, libraries
that sprung up that tried to

00:02:38.900 --> 00:02:40.240
figure out how to--

00:02:40.240 --> 00:02:43.100
the classic example is, I
have two bank accounts.

00:02:43.100 --> 00:02:46.050
I want to move $10 from
this bank account

00:02:46.050 --> 00:02:47.350
to that bank account.

00:02:47.350 --> 00:02:49.540
I need to do that within
a transaction.

00:02:49.540 --> 00:02:52.120
And if I deduct $10 here and
then add $10 there and

00:02:52.120 --> 00:02:53.510
something goes wrong
in the middle,

00:02:53.510 --> 00:02:54.880
the $10 would disappear.

00:02:54.880 --> 00:02:58.410
Or if I add $10 first and then
remove $10, I've created $10

00:02:58.410 --> 00:02:59.082
out of nothing.

00:02:59.082 --> 00:03:00.046
MANDY WAITE: Oh, I
like that one.

00:03:00.046 --> 00:03:02.650
FRED SAUER: Well, let's
do that one.

00:03:02.650 --> 00:03:04.370
With cross-entity group
transactions,

00:03:04.370 --> 00:03:05.310
that's no longer a problem.

00:03:05.310 --> 00:03:09.310
You can actually, in a single
transaction, make that change.

00:03:09.310 --> 00:03:13.360
So really, I think this is all
about just structuring your

00:03:13.360 --> 00:03:17.380
datastore in such a way that you
do no more than one write

00:03:17.380 --> 00:03:19.430
per second.

00:03:19.430 --> 00:03:23.370
Another kind of classic way that
people run into this is

00:03:23.370 --> 00:03:25.790
they'll do something like
they'll create a site counter.

00:03:25.790 --> 00:03:27.930
They want to know how many
visitors came to the website.

00:03:27.930 --> 00:03:28.650
MANDY WAITE: Exactly.

00:03:28.650 --> 00:03:30.070
FRED SAUER: Favorite
example, right?

00:03:30.070 --> 00:03:32.170
And so every time a user comes
into the website, they

00:03:32.170 --> 00:03:33.300
increment the counter.

00:03:33.300 --> 00:03:35.170
And this is what you would
do in a SQL database.

00:03:35.170 --> 00:03:38.580
You would kind of increment a

00:03:38.580 --> 00:03:41.130
particular row in the datastore.

00:03:41.130 --> 00:03:45.870
And the problem is only one
person at a time can update

00:03:45.870 --> 00:03:48.550
that one record because that
one record is on disk

00:03:48.550 --> 00:03:51.580
somewhere and there's some
server responsible for it, and

00:03:51.580 --> 00:03:56.320
it can only touch that record
one transaction at a time.

00:03:56.320 --> 00:03:58.670
And that's really limiting
for the number of

00:03:58.670 --> 00:04:00.430
things you can count.

00:04:00.430 --> 00:04:03.950
And so a typical strategy that
you used for the App Engine

00:04:03.950 --> 00:04:06.650
Datastore is to create something
called a sharding

00:04:06.650 --> 00:04:09.020
counter, sharded counter,
where you partition the

00:04:09.020 --> 00:04:10.930
counter into multiple
counters.

00:04:10.930 --> 00:04:15.160
So instead of say 1 counter, you
split it out and you say,

00:04:15.160 --> 00:04:19.029
OK, let's make 5 counters or
50, some number end that's

00:04:19.029 --> 00:04:20.149
configurable.

00:04:20.149 --> 00:04:22.620
And now, every time someone
comes to the website, I'm

00:04:22.620 --> 00:04:25.580
going to at random pick a number
from one to five and

00:04:25.580 --> 00:04:27.685
then I'm going to update
that counter.

00:04:27.685 --> 00:04:29.500
So let's say it's counter
three this time.

00:04:29.500 --> 00:04:31.670
The next visitor comes in, oh,
it's again counter three.

00:04:31.670 --> 00:04:33.210
Oh, now, it's counter two.

00:04:33.210 --> 00:04:38.950
And you say, well, that's weird
because now your total

00:04:38.950 --> 00:04:41.100
page view count is
split up around

00:04:41.100 --> 00:04:43.430
five different counters.

00:04:43.430 --> 00:04:46.080
But that's not a big deal,
because you can easily select

00:04:46.080 --> 00:04:47.750
five numbers and add
them together.

00:04:47.750 --> 00:04:50.710
This is a very easy task
for a computer to do.

00:04:50.710 --> 00:04:53.670
But by doing so, you've just
increased the throughput of

00:04:53.670 --> 00:04:56.470
your web counter five-fold.

00:04:56.470 --> 00:05:00.770
If you need 50 transactions per
second, you go 50 fold,

00:05:00.770 --> 00:05:02.730
plus a little bit buffer,
so maybe you go 60,

00:05:02.730 --> 00:05:03.290
something like that.

00:05:03.290 --> 00:05:07.060
But it's very easy to shard your
counter out as far as you

00:05:07.060 --> 00:05:07.740
need to go.

00:05:07.740 --> 00:05:08.720
MANDY WAITE: And there's
actually examples on the

00:05:08.720 --> 00:05:08.900
website, isn't there?

00:05:08.900 --> 00:05:10.590
FRED SAUER: Yeah, it's
our article.

00:05:10.590 --> 00:05:11.200
MANDY WAITE: In the development
documentation.

00:05:11.200 --> 00:05:13.030
FRED SAUER: Yep.

00:05:13.030 --> 00:05:17.010
So with a little bit of data
modeling, you can do as many

00:05:17.010 --> 00:05:18.790
concurrent users as you like.

00:05:18.790 --> 00:05:22.410
And hopefully you do a
lot more than 20,000.

00:05:22.410 --> 00:05:23.680
But 20,000 is pretty awesome.

00:05:23.680 --> 00:05:24.960
I wish my website had--

00:05:24.960 --> 00:05:25.620
MANDY WAITE: 20,000
is pretty good.

00:05:25.620 --> 00:05:27.140
Yeah.

00:05:27.140 --> 00:05:29.210
Well, I guess the message
here really is avoid

00:05:29.210 --> 00:05:30.510
shared mutable state.

00:05:30.510 --> 00:05:32.670
I love shared mutable
state all the same.

00:05:32.670 --> 00:05:34.756
Every time you share a state
that's mutable, you're going

00:05:34.756 --> 00:05:36.020
to run into problems
with concurrency.

00:05:36.020 --> 00:05:38.482
So just keep it isolated.

00:05:38.482 --> 00:05:39.700
FRED SAUER: If you do
that, you're going

00:05:39.700 --> 00:05:40.600
to have a bad time.

00:05:40.600 --> 00:05:41.572
MANDY WAITE: You're going
to have a bad time.

00:05:41.572 --> 00:05:42.822
Absolutely.

