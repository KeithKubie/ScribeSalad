WEBVTT
Kind: captions
Language: en

00:00:09.130 --> 00:00:10.850
JJ BEHRENS: Welcome
to Dartisans.

00:00:10.850 --> 00:00:14.720
Today we're going to have
Web Components reloaded.

00:00:14.720 --> 00:00:15.470
DIMITRI GLAZKOV: Oh, man.

00:00:15.470 --> 00:00:16.730
This is good stuff.

00:00:16.730 --> 00:00:19.720
JJ BEHRENS: We have
Dimitri Glazkov.

00:00:19.720 --> 00:00:22.290
Is that the proper
pronunciation?

00:00:22.290 --> 00:00:23.110
DIMITRI GLAZKOV: As
good as it gets.

00:00:23.110 --> 00:00:26.140
JJ BEHRENS: Now, you're like
the grandfather of Web

00:00:26.140 --> 00:00:27.100
Components.

00:00:27.100 --> 00:00:29.810
Does that mean like the kind of
grandfather like when you

00:00:29.810 --> 00:00:31.500
baptize someone, or the
kind of grandfather

00:00:31.500 --> 00:00:32.540
who carries a gun?

00:00:32.540 --> 00:00:35.120
DIMITRI GLAZKOV: I'm more
like an uncle, actually.

00:00:35.120 --> 00:00:35.590
I take something--

00:00:35.590 --> 00:00:35.990
JJ BEHRENS: An uncle?

00:00:35.990 --> 00:00:38.210
DIMITRI GLAZKOV: --yeah, that
somebody was raised those

00:00:38.210 --> 00:00:39.690
components a long time ago.

00:00:39.690 --> 00:00:41.290
And I'm just trying to
take care of them

00:00:41.290 --> 00:00:42.240
as best that I can.

00:00:42.240 --> 00:00:43.890
You know that movie?

00:00:43.890 --> 00:00:45.300
John Candy, you know.

00:00:45.300 --> 00:00:47.870
JJ BEHRENS: You got to take
care of, cherish the Web

00:00:47.870 --> 00:00:48.180
components.

00:00:48.180 --> 00:00:48.990
DIMITRI GLAZKOV: Exactly.

00:00:48.990 --> 00:00:50.820
JJ BEHRENS: You know, the future
is a delicate thing and

00:00:50.820 --> 00:00:52.830
we have to make it
happen gently.

00:00:52.830 --> 00:00:53.870
DIMITRI GLAZKOV: I like it.

00:00:53.870 --> 00:00:55.410
I like where this [INAUDIBLE]
is going.

00:00:55.410 --> 00:00:57.780
JJ BEHRENS: So later in the show
we're going to have John

00:00:57.780 --> 00:01:00.570
Messerly and Siggi Cherem and
they're going to talk about

00:01:00.570 --> 00:01:01.560
Dart Web Components.

00:01:01.560 --> 00:01:02.730
And so this is a twofer.

00:01:02.730 --> 00:01:04.940
I'm super excited.

00:01:04.940 --> 00:01:06.200
This is like--

00:01:06.200 --> 00:01:07.590
a lot of effort went
into this show.

00:01:07.590 --> 00:01:09.410
I'm super excited about this.

00:01:09.410 --> 00:01:11.890
So why don't you get us started
and tell us what these

00:01:11.890 --> 00:01:13.670
Web Components things are?

00:01:13.670 --> 00:01:16.020
DIMITRI GLAZKOV: I'm also super
excited, by the way.

00:01:16.020 --> 00:01:18.800
Just, you know, not
to be outdone.

00:01:18.800 --> 00:01:22.500
So Web Components is really an
umbrella term for a bunch of

00:01:22.500 --> 00:01:24.840
things that are happening in
the Web platform to kind of

00:01:24.840 --> 00:01:28.520
makes things normal for
web developers.

00:01:28.520 --> 00:01:32.880
This work is being done in the
World Wide Web Consortium web

00:01:32.880 --> 00:01:34.360
apps working group.

00:01:34.360 --> 00:01:37.580
And Chrome has bits that
have landed and are

00:01:37.580 --> 00:01:38.940
running right now.

00:01:38.940 --> 00:01:41.180
And Mozilla is landing
some bits.

00:01:41.180 --> 00:01:42.760
Microsoft and Opera
are participating.

00:01:42.760 --> 00:01:44.440
So this is kind of like
a broad effort.

00:01:44.440 --> 00:01:47.620
And we're trying to go and take
our time and make sure we

00:01:47.620 --> 00:01:48.360
get this right.

00:01:48.360 --> 00:01:50.910
So this is where you guys are
going to be really important.

00:01:50.910 --> 00:01:55.210
Please listen to this, identify
the points that seem

00:01:55.210 --> 00:01:59.300
weird, and talk to us, because
this better be done right.

00:01:59.300 --> 00:02:01.950
So why are we doing
this whole thing?

00:02:01.950 --> 00:02:05.020
The interesting thing is that,
as you may have found out, the

00:02:05.020 --> 00:02:06.370
web apps are for real.

00:02:06.370 --> 00:02:09.030
So people write complex,
big web apps.

00:02:09.030 --> 00:02:12.780
And when the web was first
developed, web software

00:02:12.780 --> 00:02:15.440
engineering wasn't really a
thing, because when you just

00:02:15.440 --> 00:02:17.700
want to write a few small
scripts, it's not

00:02:17.700 --> 00:02:18.660
that big of a deal.

00:02:18.660 --> 00:02:20.840
You really don't need software
engineering for it.

00:02:20.840 --> 00:02:23.120
But the scripts have gotten
more complex.

00:02:23.120 --> 00:02:24.430
There was more stuff written.

00:02:24.430 --> 00:02:26.290
There was more and more code.

00:02:26.290 --> 00:02:29.190
And suddenly, we've gotten to
the point where it's like, OK.

00:02:29.190 --> 00:02:32.370
We have to figure out how
to do this rationally.

00:02:32.370 --> 00:02:35.080
And the biggest problem that we
found is that the platform,

00:02:35.080 --> 00:02:37.840
the web platform as we know it,
really backs all the way

00:02:37.840 --> 00:02:39.370
up to the DOM.

00:02:39.370 --> 00:02:44.790
The DOM, the document.body,
query element, querySelector,

00:02:44.790 --> 00:02:48.400
getElementByTagName, and all
that stuff, all these things

00:02:48.400 --> 00:02:51.390
are the lowest level that the
web developer can sense-- can

00:02:51.390 --> 00:02:52.650
feel on this thing.

00:02:52.650 --> 00:02:55.970
And the problem is that some
of the primitives that

00:02:55.970 --> 00:02:57.430
developers--

00:02:57.430 --> 00:03:00.890
an engineer would expect in any
normal software platform

00:03:00.890 --> 00:03:02.140
are missing.

00:03:02.140 --> 00:03:05.080
If you look at this
object-oriented programming,

00:03:05.080 --> 00:03:09.540
the tenets are encapsulation,
inheritance, polymorphism.

00:03:09.540 --> 00:03:12.620
You can get it if you have a
nice programming language.

00:03:12.620 --> 00:03:15.380
But once you get down to the
platform level and start

00:03:15.380 --> 00:03:18.680
dealing with the DOM objects,
those are just magic forests

00:03:18.680 --> 00:03:19.800
with elves and fairies.

00:03:19.800 --> 00:03:21.980
You can't figure out what
the hell's going on.

00:03:21.980 --> 00:03:25.740
And you can't extend them, you
can't hide things, you can't

00:03:25.740 --> 00:03:27.140
encapsulate things.

00:03:27.140 --> 00:03:31.500
And so really, the choices at
that point we have are either

00:03:31.500 --> 00:03:35.380
work around it or not
write complex apps.

00:03:35.380 --> 00:03:39.880
So clearly, the choice of
workaround seems a little bit

00:03:39.880 --> 00:03:41.660
more preferable than
not writing complex

00:03:41.660 --> 00:03:43.050
apps or giving up.

00:03:43.050 --> 00:03:46.740
And so the types of workarounds
you would see were

00:03:46.740 --> 00:03:48.040
generally in two categories.

00:03:48.040 --> 00:03:51.610
Either you fight the DOM or
you build an abstraction

00:03:51.610 --> 00:03:53.050
around the DOM-- like
jQuery is a really

00:03:53.050 --> 00:03:54.370
good example, right?

00:03:54.370 --> 00:03:57.500
Every object you get out of
jQuery is actually a jQuery

00:03:57.500 --> 00:04:01.990
object which wraps the DOM
to protect the poor user

00:04:01.990 --> 00:04:03.320
from the evil DOM.

00:04:03.320 --> 00:04:05.120
So you're basically actively
fighting this.

00:04:05.120 --> 00:04:09.640
And then there's things like
SproutCore and Sencha, and now

00:04:09.640 --> 00:04:12.520
Montage, that basically say,
hey dudes, we're going to

00:04:12.520 --> 00:04:13.870
build our own thing.

00:04:13.870 --> 00:04:16.480
And we're going to make
our own object tree.

00:04:16.480 --> 00:04:20.399
And this object tree will
magically talk to the DOM tree

00:04:20.399 --> 00:04:21.579
and make it somehow work.

00:04:21.579 --> 00:04:24.160
And you just don't worry your
pretty head about this.

00:04:24.160 --> 00:04:26.480
And the other one is, of course,
screw the DOM, right?

00:04:26.480 --> 00:04:28.680
You basically say, oh,
Canvas, awesome.

00:04:28.680 --> 00:04:31.040
OK, I'm just going to draw my
entire thing on Canvas and

00:04:31.040 --> 00:04:32.690
everything's going
to just work.

00:04:32.690 --> 00:04:36.300
The problem here is that you
still need an object tree.

00:04:36.300 --> 00:04:38.560
You'll still need to handle
accessibility.

00:04:38.560 --> 00:04:42.750
You'll still need to handle
things like selection and

00:04:42.750 --> 00:04:43.180
[INAUDIBLE]

00:04:43.180 --> 00:04:44.400
support, right?

00:04:44.400 --> 00:04:47.020
And at that point, once you've
handled all those things,

00:04:47.020 --> 00:04:51.160
you've written a rendering
engine that is a lot of

00:04:51.160 --> 00:04:53.580
JavaScript code that has to come
load and all this stuff.

00:04:53.580 --> 00:04:56.900
So all these workarounds
are kind of sad.

00:04:56.900 --> 00:04:58.990
And what I wanted to do--

00:04:58.990 --> 00:05:01.820
when I came in, I was a web
developer for about 15 years

00:05:01.820 --> 00:05:03.630
before I started working
on this.

00:05:03.630 --> 00:05:05.760
As I said, I don't
want to be sad.

00:05:05.760 --> 00:05:06.970
I want to be happy.

00:05:06.970 --> 00:05:08.940
You know, Happy is like
my middle name.

00:05:08.940 --> 00:05:11.620
It's Dimitri Happy Glazkov,
by the way.

00:05:11.620 --> 00:05:15.700
And so what I said is, dudes,
let's fix this.

00:05:15.700 --> 00:05:19.200
Let's figure out a way of how
we're going to make this work

00:05:19.200 --> 00:05:21.910
in the platform, so that you
don't have to fight the DOM.

00:05:21.910 --> 00:05:24.290
And you don't have to build your
own rendering engine to

00:05:24.290 --> 00:05:25.680
get good results.

00:05:25.680 --> 00:05:28.050
So that you would actually
enjoy the DOM.

00:05:28.050 --> 00:05:32.220
And so what we kind of figured
out is that let's take those

00:05:32.220 --> 00:05:35.200
tenets of object-oriented
programming and let's figure

00:05:35.200 --> 00:05:37.410
out how we can naturally,
organically--

00:05:37.410 --> 00:05:43.040
that's the key word, right--
green, organic, no pesticides.

00:05:43.040 --> 00:05:47.630
We applied them inside of the
existing system, which means

00:05:47.630 --> 00:05:48.990
that we use the DOM.

00:05:48.990 --> 00:05:53.390
We just tweaked the DOM to
allow these wonderful

00:05:53.390 --> 00:05:54.190
principles.

00:05:54.190 --> 00:05:57.290
So, for example, for
encapsulation, we invented

00:05:57.290 --> 00:05:58.250
shadow DOM.

00:05:58.250 --> 00:05:59.510
We didn't really invent it.

00:05:59.510 --> 00:06:01.880
It was invented a long time
ago by a lot of people.

00:06:01.880 --> 00:06:04.460
There's people from Microsoft
who came up with a bunch of

00:06:04.460 --> 00:06:06.320
crazy ideas that were
really good at some

00:06:06.320 --> 00:06:08.950
point related to HTC.

00:06:08.950 --> 00:06:10.190
And I don't know if
you're familiar

00:06:10.190 --> 00:06:12.010
with the HTML behaviors.

00:06:12.010 --> 00:06:14.850
There's Mozilla, that has XBL.

00:06:14.850 --> 00:06:16.190
And all of those things--

00:06:16.190 --> 00:06:18.870
SVG even has its own version
of shadow DOM.

00:06:18.870 --> 00:06:21.340
And so the shadow DOM
basically says this.

00:06:21.340 --> 00:06:26.370
Look dudes, we will make sure
that the developer of whatever

00:06:26.370 --> 00:06:27.930
widget is being developed--

00:06:27.930 --> 00:06:29.180
let's called this
developer Bob--

00:06:29.180 --> 00:06:31.570
Bob the builder, right?--

00:06:31.570 --> 00:06:35.430
does not have to worry about
what the consumer of this

00:06:35.430 --> 00:06:37.870
widget-- let's call him, in best
traditions of Minecraft,

00:06:37.870 --> 00:06:40.100
let's call him Steve, right?

00:06:40.100 --> 00:06:43.840
Steve does not have to
worry what Bob built.

00:06:43.840 --> 00:06:46.670
And Steve can't screw
things up.

00:06:46.670 --> 00:06:47.260
Does that make sense?

00:06:47.260 --> 00:06:47.890
JJ BEHRENS: Yeah.

00:06:47.890 --> 00:06:49.890
DIMITRI GLAZKOV: And so if
you kind of look in the

00:06:49.890 --> 00:06:52.000
encapsulation, there's like
two things in there.

00:06:52.000 --> 00:06:55.150
First, Bob wants to defend
against Steve.

00:06:55.150 --> 00:06:56.410
Bob built the widget.

00:06:56.410 --> 00:06:59.080
He doesn't want Steve to come
in and muck with it.

00:06:59.080 --> 00:07:02.320
And then, at the same time,
Steve wants to say, oh, I have

00:07:02.320 --> 00:07:05.720
this widget from Bob and now I
want to be using it reliably

00:07:05.720 --> 00:07:08.940
without it breaking apart at
some point and stuff starting

00:07:08.940 --> 00:07:09.900
to spill out from it.

00:07:09.900 --> 00:07:13.170
And suddenly, all my things--

00:07:13.170 --> 00:07:14.480
I changed the style
and suddenly

00:07:14.480 --> 00:07:15.480
everything's green there.

00:07:15.480 --> 00:07:16.490
I don't know why.

00:07:16.490 --> 00:07:17.880
Something happened.

00:07:17.880 --> 00:07:19.490
And so that's what encapsulation
is about.

00:07:19.490 --> 00:07:22.760
And generally, if you kind of
think about it, is we give

00:07:22.760 --> 00:07:26.740
Steve, the user of the widget,
their own documentry.

00:07:26.740 --> 00:07:30.370
And we give Bob their
own widgetry.

00:07:30.370 --> 00:07:32.250
And so they can work
inside of the tree

00:07:32.250 --> 00:07:33.250
and not have to worry.

00:07:33.250 --> 00:07:34.080
We will protect.

00:07:34.080 --> 00:07:37.710
We will be the encapsulation
boundary inside of this thing.

00:07:37.710 --> 00:07:39.760
And so that's what shadow
DOM really is about.

00:07:39.760 --> 00:07:42.650
And the second one, we looked
and said, well, inheritance

00:07:42.650 --> 00:07:43.640
seems nice.

00:07:43.640 --> 00:07:46.100
Every programming language
in some shape or form has

00:07:46.100 --> 00:07:47.680
inheritance.

00:07:47.680 --> 00:07:51.060
But again, once you back up
into the DOM, there's no

00:07:51.060 --> 00:07:51.490
inheritance.

00:07:51.490 --> 00:07:53.070
There's just things.

00:07:53.070 --> 00:07:54.650
And those things are there.

00:07:54.650 --> 00:07:56.400
HTML development.

00:07:56.400 --> 00:07:57.860
Der.

00:07:57.860 --> 00:07:59.590
What if I want to build
my own thing?

00:07:59.590 --> 00:08:01.420
What if I want to inherit
from that?

00:08:01.420 --> 00:08:02.740
You can't, right?

00:08:02.740 --> 00:08:05.720
So what we decided is we're
going to let you do that.

00:08:05.720 --> 00:08:07.790
And that's what custom
DOM elements do.

00:08:07.790 --> 00:08:11.790
They essentially allow you to
take any DOM object and say,

00:08:11.790 --> 00:08:14.190
well, I want to build my own
type of thing that's just like

00:08:14.190 --> 00:08:16.390
that and inherit from that.

00:08:16.390 --> 00:08:18.870
And so it's just like--

00:08:18.870 --> 00:08:22.060
if you kind of listen to this
and you've never build web

00:08:22.060 --> 00:08:25.240
apps before, you keep going,
what the hell?

00:08:25.240 --> 00:08:26.560
What are they talking about?

00:08:26.560 --> 00:08:27.810
And the web developer's
going, yep.

00:08:27.810 --> 00:08:29.345
That makes sense.

00:08:29.345 --> 00:08:30.940
No, it doesn't make sense.

00:08:30.940 --> 00:08:32.350
All of these things should
have been there in the

00:08:32.350 --> 00:08:34.000
beginning and they weren't.

00:08:34.000 --> 00:08:35.929
And so now we have to kind
of retrofit them

00:08:35.929 --> 00:08:37.210
to make them work.

00:08:37.210 --> 00:08:41.750
And finally, the last bit that's
really important is the

00:08:41.750 --> 00:08:44.230
simple principle that you should
be able to take a chunk

00:08:44.230 --> 00:08:47.880
of DOM and define it in some
declarative fashion and then

00:08:47.880 --> 00:08:48.950
use it later.

00:08:48.950 --> 00:08:50.350
Oh my god!

00:08:50.350 --> 00:08:51.230
New concept, right?

00:08:51.230 --> 00:08:52.450
No, not a new concept--

00:08:52.450 --> 00:08:53.450
very simple thing.

00:08:53.450 --> 00:08:54.570
Why can't you have that?

00:08:54.570 --> 00:08:58.150
And so the basic idea is that
you should be able to use

00:08:58.150 --> 00:08:59.460
what's called HTML templates.

00:08:59.460 --> 00:09:02.330
And you can just specify
and say, this thing I'm

00:09:02.330 --> 00:09:03.720
going to use later.

00:09:03.720 --> 00:09:04.460
Don't render it.

00:09:04.460 --> 00:09:06.250
Don't load images.

00:09:06.250 --> 00:09:07.790
Don't fetch resources.

00:09:07.790 --> 00:09:09.150
I'm going to use it later.

00:09:09.150 --> 00:09:10.390
Just hang on.

00:09:10.390 --> 00:09:13.180
And then the other thing is
it's obviously declarative

00:09:13.180 --> 00:09:16.510
syntax, so you can just
write it as HTML.

00:09:16.510 --> 00:09:20.050
And in addition to that, we're
adding this cool feature

00:09:20.050 --> 00:09:22.720
called packaging, which means
that instead of just being

00:09:22.720 --> 00:09:26.610
able to include just JavaScript
into your page, you

00:09:26.610 --> 00:09:30.420
can include something that's
called a "package," or link

00:09:30.420 --> 00:09:33.610
Rail components, and you
link to an HTML file.

00:09:33.610 --> 00:09:37.050
And then the browser can then
suck in all the resources from

00:09:37.050 --> 00:09:41.080
it, like CSS, JavaScript, and
markup and all those things

00:09:41.080 --> 00:09:41.900
into one thing.

00:09:41.900 --> 00:09:44.400
So this is amazing, right?

00:09:44.400 --> 00:09:46.500
It seems like such an amazing
breakthrough--

00:09:46.500 --> 00:09:48.080
to web developers, again.

00:09:48.080 --> 00:09:50.910
To non-web developers it's
like, what the hell.

00:09:50.910 --> 00:09:53.370
Why didn't you have
this before?

00:09:53.370 --> 00:09:56.560
And so if you want to learn
more about it, just go to

00:09:56.560 --> 00:09:59.640
Google+ and search for
Web Components.

00:09:59.640 --> 00:10:02.680
There's a page that tracks all
the latest presentations.

00:10:02.680 --> 00:10:03.960
There's a bunch of
them out there.

00:10:03.960 --> 00:10:06.800
Some of them are really,
really awesome.

00:10:06.800 --> 00:10:07.790
JJ BEHRENS: I liked
your Google I/O

00:10:07.790 --> 00:10:08.890
presentation, by the way.

00:10:08.890 --> 00:10:09.860
That was pretty good.

00:10:09.860 --> 00:10:10.700
DIMITRI GLAZKOV: Right.

00:10:10.700 --> 00:10:14.270
JJ BEHRENS: And then there's
also the Web Components

00:10:14.270 --> 00:10:15.330
explainer--

00:10:15.330 --> 00:10:17.560
when I search for that, it
always comes up with the

00:10:17.560 --> 00:10:19.830
document, which is actually
really easy to read, unlike a

00:10:19.830 --> 00:10:20.740
lot of specifications.

00:10:20.740 --> 00:10:21.510
DIMITRI GLAZKOV: Yep.

00:10:21.510 --> 00:10:25.080
And so try not to get drowned
in the specs, because those

00:10:25.080 --> 00:10:28.070
are really technical language
things that were primarily

00:10:28.070 --> 00:10:28.970
written not for you.

00:10:28.970 --> 00:10:31.690
They were primarily written for
the engineers who build

00:10:31.690 --> 00:10:35.730
browsers, so that we can assure
that whoever builds

00:10:35.730 --> 00:10:38.760
this thing into the browser does
it the same way that the

00:10:38.760 --> 00:10:40.410
other guy did.

00:10:40.410 --> 00:10:42.760
And so we just have to make sure
this is specified right.

00:10:42.760 --> 00:10:45.450
So please dig in and look
at those things.

00:10:45.450 --> 00:10:48.050
And now I'm going to hand it off
to these wonderful folks

00:10:48.050 --> 00:10:49.850
that are around here.

00:10:49.850 --> 00:10:52.170
JJ BEHRENS: So I'm just curious,
now that we're going

00:10:52.170 --> 00:10:54.860
to implement all the interesting
normal things that

00:10:54.860 --> 00:10:56.380
we have in programming
languages-- we're going to

00:10:56.380 --> 00:10:57.790
have encapsulation.

00:10:57.790 --> 00:11:01.120
We're going to have
inheritance.

00:11:01.120 --> 00:11:02.920
What other cool things
can we steal

00:11:02.920 --> 00:11:04.190
from programming languages?

00:11:04.190 --> 00:11:04.720
It's like--

00:11:04.720 --> 00:11:05.550
DIMITRI GLAZKOV: Yeah,
we just need to keep

00:11:05.550 --> 00:11:06.590
stealing stuff, right?

00:11:06.590 --> 00:11:07.790
JJ BEHRENS: Yeah.

00:11:07.790 --> 00:11:11.450
Well, I think that we just need
to read some papers back

00:11:11.450 --> 00:11:13.670
from MIT A.I. Lab in the '70s.

00:11:13.670 --> 00:11:15.500
And every time we see something
interesting, we'll

00:11:15.500 --> 00:11:16.980
just steal it, shove
it in the browser.

00:11:16.980 --> 00:11:19.230
DIMITRI GLAZKOV: It's really
surprising, because in a lot

00:11:19.230 --> 00:11:23.120
of sense, the libraries that I
was just disparaging for how

00:11:23.120 --> 00:11:26.610
they're working around things
are a huge informer in this

00:11:26.610 --> 00:11:27.930
whole process.

00:11:27.930 --> 00:11:30.240
Because by reading those
libraries and understanding

00:11:30.240 --> 00:11:34.100
what trouble they're
encountering and the length

00:11:34.100 --> 00:11:37.650
they have to go into to
make things work is

00:11:37.650 --> 00:11:38.940
what informs the spec.

00:11:38.940 --> 00:11:40.780
And what says, oh,
we can fix this.

00:11:40.780 --> 00:11:43.660
JJ BEHRENS: So, to what degree
would you say Angular JS fed

00:11:43.660 --> 00:11:45.730
into Web Components?

00:11:45.730 --> 00:11:46.760
DIMITRI GLAZKOV: We
actually talked to

00:11:46.760 --> 00:11:48.170
Angular JS folks a lot.

00:11:48.170 --> 00:11:53.720
They have influenced a lot of
the early decisions and a lot

00:11:53.720 --> 00:11:56.440
of general thinking.

00:11:56.440 --> 00:11:57.540
It was really cool.

00:11:57.540 --> 00:12:00.870
And they have to, again,
fight those battles.

00:12:00.870 --> 00:12:03.740
And the design decisions they
make are heavily influenced by

00:12:03.740 --> 00:12:04.980
what's really possible.

00:12:04.980 --> 00:12:07.010
Whereas we kind of have
this cool ability.

00:12:07.010 --> 00:12:09.130
We can say, hey, we're
the browser people.

00:12:09.130 --> 00:12:10.430
We can make it work.

00:12:10.430 --> 00:12:11.770
JJ BEHRENS: Yeah, if only
we knew someone

00:12:11.770 --> 00:12:13.150
who worked at a browser.

00:12:13.150 --> 00:12:14.520
Oh wait, we do.

00:12:14.520 --> 00:12:15.220
DIMITRI GLAZKOV: Exactly.

00:12:15.220 --> 00:12:16.380
Exactly.

00:12:16.380 --> 00:12:18.040
JJ BEHRENS: So I know
that model-driven

00:12:18.040 --> 00:12:19.910
views are not really--

00:12:19.910 --> 00:12:23.220
I don't remember reading any
about them in the Web

00:12:23.220 --> 00:12:24.280
Components spec.

00:12:24.280 --> 00:12:27.300
But it seems like Web Components
is this umbrella

00:12:27.300 --> 00:12:30.510
term that has come to encompass
Model-driven Views

00:12:30.510 --> 00:12:34.020
in the same way that we
use HTML5 for a bunch

00:12:34.020 --> 00:12:35.630
of different APIs.

00:12:35.630 --> 00:12:37.770
What do you have to
say about that?

00:12:37.770 --> 00:12:39.950
It seems like MDV is important
these days.

00:12:39.950 --> 00:12:43.530
DIMITRI GLAZKOV: Model-driven
Views is simply, again,

00:12:43.530 --> 00:12:47.390
rationalizing the patterns that
we've seen so many times.

00:12:47.390 --> 00:12:50.650
So many libraries out there are

00:12:50.650 --> 00:12:52.650
embracing templating patterns--

00:12:52.650 --> 00:12:55.240
the Mustache, the Ember.gs--

00:12:55.240 --> 00:12:59.830
all these guys are looking at
this idea that you should be

00:12:59.830 --> 00:13:03.440
able to declare stuff and
then put in the holes.

00:13:03.440 --> 00:13:06.510
And then run it against some
sort of a data set.

00:13:06.510 --> 00:13:09.130
And suddenly, boom,
things go alive.

00:13:09.130 --> 00:13:12.240
It seems like, again, like
this is Mr. Obvious.

00:13:12.240 --> 00:13:13.960
This is very simple.

00:13:13.960 --> 00:13:17.750
But what we're trying with MDV
to do is we're trying to first

00:13:17.750 --> 00:13:20.860
concentrate on what are the
things that are truly missing

00:13:20.860 --> 00:13:25.950
from the platform that don't let
you this nice ability to

00:13:25.950 --> 00:13:28.830
do this type of data binding.

00:13:28.830 --> 00:13:32.330
And there's two things that
are really exciting, the

00:13:32.330 --> 00:13:34.000
observation-related things.

00:13:34.000 --> 00:13:37.490
If you want to be able to bind
to data, you have to be able

00:13:37.490 --> 00:13:41.040
to first observe what DOM
objects are doing.

00:13:41.040 --> 00:13:43.350
You have to say hey,
this thing changed.

00:13:43.350 --> 00:13:45.430
I better react to it somehow.

00:13:45.430 --> 00:13:48.070
And this is where-- we used
to have thing called

00:13:48.070 --> 00:13:49.250
the mutation events.

00:13:49.250 --> 00:13:52.370
Nasty, nasty, nasty thing,
because first of all, mutation

00:13:52.370 --> 00:13:54.180
events are really slow.

00:13:54.180 --> 00:13:55.500
They're synchronous.

00:13:55.500 --> 00:13:59.740
And they are like the wrong
thing, because in a typical

00:13:59.740 --> 00:14:02.930
web application, the DOM
tree changes a lot.

00:14:02.930 --> 00:14:06.440
And that results in a lot
of mutation events.

00:14:06.440 --> 00:14:09.700
And instead, we came up with
this whole new abstraction

00:14:09.700 --> 00:14:12.150
called mutation observers.

00:14:12.150 --> 00:14:16.610
And those are a much more
elegant designed thing that's

00:14:16.610 --> 00:14:21.430
specifically aimed at
solving the problem,

00:14:21.430 --> 00:14:24.040
observing DOM changes.

00:14:24.040 --> 00:14:26.300
And then you look at the
opposite and say, hey, now I

00:14:26.300 --> 00:14:29.440
want to be able to look
at the data objects.

00:14:29.440 --> 00:14:32.320
And when they change, I want to
be able to know about it.

00:14:32.320 --> 00:14:34.540
JJ BEHRENS: So this is a big
deal in terms of performance,

00:14:34.540 --> 00:14:37.980
because I've seen some graphs
where if you have to do dirty

00:14:37.980 --> 00:14:40.550
checking, which is what you
have to do today, versus

00:14:40.550 --> 00:14:43.350
having it built into the
platform, the performance

00:14:43.350 --> 00:14:44.810
differences are amazing.

00:14:44.810 --> 00:14:46.020
DIMITRI GLAZKOV: Absolutely,
yes.

00:14:46.020 --> 00:14:48.840
It's crazy, like
20 to 40 times.

00:14:48.840 --> 00:14:51.295
JJ BEHRENS: Not 20% to 40%,
but 20 to 40 times faster.

00:14:51.295 --> 00:14:53.490
DIMITRI GLAZKOV: I almost said
percent, because it doesn't

00:14:53.490 --> 00:14:54.830
even come out right.

00:14:54.830 --> 00:14:55.340
Times!

00:14:55.340 --> 00:14:56.500
JJ BEHRENS: Times faster.

00:14:56.500 --> 00:14:57.380
That's just--

00:14:57.380 --> 00:14:59.450
that enables a new type
of application

00:14:59.450 --> 00:15:00.210
when you can do that.

00:15:00.210 --> 00:15:00.520
DIMITRI GLAZKOV: That's right.

00:15:00.520 --> 00:15:02.570
JJ BEHRENS: So I know that
one of our questions--

00:15:02.570 --> 00:15:05.360
I skimmed through them really
quickly, but I think one of

00:15:05.360 --> 00:15:06.690
them would be good for you.

00:15:06.690 --> 00:15:10.760
And he was asking, what is the
benefit of including this in

00:15:10.760 --> 00:15:14.800
the browser instead of just
relying on more libraries to

00:15:14.800 --> 00:15:15.980
provide this for us?

00:15:15.980 --> 00:15:18.610
And we just talked about the
performance benefits, but can

00:15:18.610 --> 00:15:20.480
you think of other benefits?

00:15:20.480 --> 00:15:22.452
Why do we want this
in the browser?

00:15:22.452 --> 00:15:24.750
DIMITRI GLAZKOV: Well,
performance, leaky

00:15:24.750 --> 00:15:27.750
abstractions, and just
generally painless

00:15:27.750 --> 00:15:28.830
development.

00:15:28.830 --> 00:15:32.250
I don't need to include
something in order to start.

00:15:32.250 --> 00:15:33.260
This is my platform.

00:15:33.260 --> 00:15:34.500
This is where I live.

00:15:34.500 --> 00:15:37.030
This is where I want
to work in.

00:15:37.030 --> 00:15:39.810
And so if you say, well,
my platform is not

00:15:39.810 --> 00:15:40.740
actually web platform.

00:15:40.740 --> 00:15:42.060
It's actually SproutCore.

00:15:42.060 --> 00:15:45.310
Well, that means you're working

00:15:45.310 --> 00:15:46.320
on a different platform.

00:15:46.320 --> 00:15:49.190
So what we want to do is we
want to come down to the

00:15:49.190 --> 00:15:52.270
platform level and enable as
many of those features--

00:15:52.270 --> 00:15:55.310
but the most important thing
is that by enabling those

00:15:55.310 --> 00:15:56.880
features in the browser,
if we're doing

00:15:56.880 --> 00:15:59.010
it in a smart way--

00:15:59.010 --> 00:16:01.550
smartly, I guess that's
the word--

00:16:01.550 --> 00:16:05.920
what we do is we also inform the
browser a lot better about

00:16:05.920 --> 00:16:07.510
what's happening.

00:16:07.510 --> 00:16:10.680
And when we do that, we have a
lot of opportunities that are

00:16:10.680 --> 00:16:13.440
still not even discovered fully
of where the browser can

00:16:13.440 --> 00:16:18.610
go faster, can use less memory,
and can essentially do

00:16:18.610 --> 00:16:20.060
the job better.

00:16:20.060 --> 00:16:24.030
And we can really accelerate
the pace and the speed of

00:16:24.030 --> 00:16:26.840
loading, the way applications
operate, and the way they

00:16:26.840 --> 00:16:27.400
[? feel. ?]

00:16:27.400 --> 00:16:29.890
JJ BEHRENS: Yeah, I also think
that with a lot of these

00:16:29.890 --> 00:16:33.100
widget libraries, they're trying
really hard, but it

00:16:33.100 --> 00:16:36.780
definitely seems like it's hard
to get interoperability

00:16:36.780 --> 00:16:38.100
between these frameworks.

00:16:38.100 --> 00:16:43.540
And I definitely would love to
see a point where we have all

00:16:43.540 --> 00:16:46.930
of these rich Web Components
and then we can share them

00:16:46.930 --> 00:16:51.300
between libraries, so we don't
get into situations where I

00:16:51.300 --> 00:16:55.570
see this beautiful widget but
I can't use it because it's

00:16:55.570 --> 00:16:57.370
not using the same
framework I am.

00:16:57.370 --> 00:16:59.220
DIMITRI GLAZKOV: And there's
actually a really interesting

00:16:59.220 --> 00:17:02.930
effort that's coming
out of the Mozilla.

00:17:02.930 --> 00:17:04.300
And they're called x-tags.

00:17:04.300 --> 00:17:07.150
They're really interested in
this problem of what if we

00:17:07.150 --> 00:17:12.910
could define some way to say
this is the best practices of

00:17:12.910 --> 00:17:14.710
how to build these
web components.

00:17:14.710 --> 00:17:17.930
They're not necessarily all
difficult, hard rules, but

00:17:17.930 --> 00:17:19.569
just a general set of things.

00:17:19.569 --> 00:17:21.920
And if you follow these
practices, all the components

00:17:21.920 --> 00:17:22.740
are interoperable.

00:17:22.740 --> 00:17:24.740
So that's kind of a cool
thing that's happening.

00:17:24.740 --> 00:17:25.310
JJ BEHRENS: Great.

00:17:25.310 --> 00:17:28.079
So I'm going to start segueing,
but I got one last

00:17:28.079 --> 00:17:30.130
question for you.

00:17:30.130 --> 00:17:33.630
Having watched the Google I/O
talk, your Google I/O talk,

00:17:33.630 --> 00:17:35.180
I've seen the future.

00:17:35.180 --> 00:17:36.510
How do I get there?

00:17:36.510 --> 00:17:39.100
If I want Web Components today
and I don't want to wait

00:17:39.100 --> 00:17:43.430
because I'm impatient,
what do I do?

00:17:43.430 --> 00:17:44.170
What do we do?

00:17:44.170 --> 00:17:46.630
DIMITRI GLAZKOV: There's some
bits of it that are in Chrome.

00:17:46.630 --> 00:17:48.190
Some bits of it--

00:17:48.190 --> 00:17:50.820
actually, Mozilla is going to
land some of these really

00:17:50.820 --> 00:17:53.850
interesting things related to
custom DOM elements very soon.

00:17:53.850 --> 00:17:56.720
But there's also polyfills,
or shams, for things

00:17:56.720 --> 00:17:57.960
that you can use.

00:17:57.960 --> 00:18:01.830
And generally, it's not
100% fidelity, but

00:18:01.830 --> 00:18:03.050
it's pretty darn good.

00:18:03.050 --> 00:18:05.576
So you can start experimenting
with this stuff.

00:18:05.576 --> 00:18:07.250
JJ BEHRENS: OK.

00:18:07.250 --> 00:18:08.570
Thank you very much.

00:18:08.570 --> 00:18:11.940
Thank you for coming and giving
us a great explanation.

00:18:11.940 --> 00:18:14.420
And now we're going
to talk to John

00:18:14.420 --> 00:18:16.740
Messerly and Siggi Cherem.

00:18:16.740 --> 00:18:20.480
And of course, I got to ask
again, did I pronounce it

00:18:20.480 --> 00:18:23.655
correctly or not?

00:18:23.655 --> 00:18:24.840
SIGGI CHEREM: That
sounds wonderful.

00:18:24.840 --> 00:18:25.840
JOHN MESSERLY: You got it.

00:18:25.840 --> 00:18:28.010
SIGGI CHEREM: You got it.

00:18:28.010 --> 00:18:29.530
JJ BEHRENS: So you guys are--

00:18:29.530 --> 00:18:33.020
where are you guys again?

00:18:33.020 --> 00:18:35.040
SIGGI CHEREM: We're up
here in Seattle.

00:18:35.040 --> 00:18:35.460
JJ BEHRENS: OK.

00:18:35.460 --> 00:18:39.130
And I've heard rumors that in
Seattle the sun is always

00:18:39.130 --> 00:18:41.830
shining, because it's raining
out here in Mountain View.

00:18:41.830 --> 00:18:43.972
Is this true?

00:18:43.972 --> 00:18:48.080
JOHN MESSERLY: It's true today,
for what that's worth.

00:18:48.080 --> 00:18:49.226
DIMITRI GLAZKOV: We've
proved it.

00:18:49.226 --> 00:18:50.750
The sun always shines
in Seattle.

00:18:50.750 --> 00:18:52.210
JOHN MESSERLY: Well, maybe
it's not true anymore.

00:18:52.210 --> 00:18:54.600
JJ BEHRENS: Always, by
a sample size of one.

00:18:54.600 --> 00:18:55.430
DIMITRI GLAZKOV: Good
enough for me.

00:18:55.430 --> 00:18:56.630
JJ BEHRENS: I have no--

00:18:56.630 --> 00:18:59.790
I cannot hear them.

00:18:59.790 --> 00:19:02.470
So you guys have a nice
presentation.

00:19:02.470 --> 00:19:05.100
You guys are going to talk
about how to do Web

00:19:05.100 --> 00:19:07.020
Components in Dart.

00:19:07.020 --> 00:19:09.931
Why don't you take it away?

00:19:09.931 --> 00:19:10.310
SIGGI CHEREM: Cool.

00:19:10.310 --> 00:19:16.170
So basically, we're very glad
that Dimitri is here and

00:19:16.170 --> 00:19:19.660
presented right before us,
because we basically are

00:19:19.660 --> 00:19:23.455
working on top of a lot of the
ideas that had been developed

00:19:23.455 --> 00:19:25.940
in the [? standards and ?] web
community and a lot of the

00:19:25.940 --> 00:19:28.950
work that Dimitri has been doing
and essentially adapting

00:19:28.950 --> 00:19:31.290
it to work also in Dart.

00:19:31.290 --> 00:19:36.910
Now, basically, the goal here
is very similar to a lot of

00:19:36.910 --> 00:19:38.270
the motivation that
we heard earlier.

00:19:38.270 --> 00:19:43.110
We want to have happy users,
people that can actually get

00:19:43.110 --> 00:19:45.030
an application that runs
fast, that is secure by

00:19:45.030 --> 00:19:47.890
construction, and essentially,
they can use great web

00:19:47.890 --> 00:19:48.860
applications.

00:19:48.860 --> 00:19:51.540
And we want developers in the
process to actually be happy

00:19:51.540 --> 00:19:52.820
creating these web
applications.

00:19:52.820 --> 00:19:58.550
That means writing less code
than what we used to, having a

00:19:58.550 --> 00:20:01.680
way of iterating quickly and
somehow be able to change your

00:20:01.680 --> 00:20:08.240
code and not have to be stalled
or slowed down by a

00:20:08.240 --> 00:20:10.920
huge infrastructure that
essentially you have to wait

00:20:10.920 --> 00:20:13.154
on before you can actually
do a change and see it

00:20:13.154 --> 00:20:15.820
immediately in the browser to
see whether or not it worked.

00:20:15.820 --> 00:20:18.440
And something stable enough that
you can then split the

00:20:18.440 --> 00:20:23.310
work with a lot of people, be
able to have a team of 5,10,

00:20:23.310 --> 00:20:25.690
50 developers working together
and be able to collaborate

00:20:25.690 --> 00:20:28.520
without having to do so much
coordination as we have today.

00:20:28.520 --> 00:20:29.600
JOHN MESSERLY: Yeah.

00:20:29.600 --> 00:20:32.330
Gets back to the good software
engineering stuff that Dimitri

00:20:32.330 --> 00:20:35.230
was alluding to earlier.

00:20:35.230 --> 00:20:37.690
SIGGI CHEREM: So we know
there've been many frameworks

00:20:37.690 --> 00:20:41.270
out there to compensate or sort
of work around issues

00:20:41.270 --> 00:20:43.305
that we have in browsers
today.

00:20:43.305 --> 00:20:45.440
And examples of that
are Angular JS,

00:20:45.440 --> 00:20:47.950
Ember, and many more.

00:20:47.950 --> 00:20:51.440
And that motivated a lot of the
work that Image is doing

00:20:51.440 --> 00:20:53.870
of creating new web standards
that incorporate a lot of

00:20:53.870 --> 00:20:55.920
these principles into
the platform.

00:20:55.920 --> 00:20:59.210
So we have the standards for Web
Components and there's now

00:20:59.210 --> 00:21:05.090
this new more experimental
proposals for MDV

00:21:05.090 --> 00:21:06.810
templates as well.

00:21:06.810 --> 00:21:09.880
So what we decided to do for
Dart is say, we're going to

00:21:09.880 --> 00:21:11.660
embrace these proposals.

00:21:11.660 --> 00:21:14.280
We're going to take them
as if they exist today.

00:21:14.280 --> 00:21:16.400
In the meantime, we're going to
sort of polyfill and make

00:21:16.400 --> 00:21:20.880
sure we can actually use them,
but by embracing them, we're

00:21:20.880 --> 00:21:22.850
actually going to be with
some beneficial

00:21:22.850 --> 00:21:24.470
factors in the long run.

00:21:24.470 --> 00:21:26.620
JJ BEHRENS: I love this part of
it, because we don't have

00:21:26.620 --> 00:21:30.560
to wait for the future for Web
Components in the Dart world.

00:21:30.560 --> 00:21:32.770
We can start using them today.

00:21:32.770 --> 00:21:34.270
That's just awesome.

00:21:34.270 --> 00:21:36.360
JOHN MESSERLY: Yeah, that's
exactly right.

00:21:36.360 --> 00:21:37.800
So there's this term that
you may have heard.

00:21:37.800 --> 00:21:38.860
I think Dimitri mentioned it.

00:21:38.860 --> 00:21:40.860
But if you haven't heard
it, it's polyfill.

00:21:40.860 --> 00:21:46.590
And it's kind of this notion
that the web is a bit rough

00:21:46.590 --> 00:21:47.070
around the edges.

00:21:47.070 --> 00:21:52.400
You're really programming for
four to five major browsers,

00:21:52.400 --> 00:21:54.800
or just on the desktop, you've
got your mobile ones.

00:21:54.800 --> 00:21:56.190
And they're all a little
bit different.

00:21:56.190 --> 00:22:00.060
So you're not just programming
against a system.

00:22:00.060 --> 00:22:03.420
You're programming against
many systems, and there's

00:22:03.420 --> 00:22:04.580
rough edges between them.

00:22:04.580 --> 00:22:08.280
And so polyfill is this kind of
spackle that you've put in.

00:22:08.280 --> 00:22:11.350
You fill in the holes
between browsers.

00:22:11.350 --> 00:22:17.080
And the good news
now is that--

00:22:17.080 --> 00:22:19.560
we use this term a lot, you
may have heard, "modern

00:22:19.560 --> 00:22:22.750
browsers." But it's basically
kind of an allusion to the

00:22:22.750 --> 00:22:26.590
fact that like JavaScript is
fast in all the browsers now,

00:22:26.590 --> 00:22:28.640
which is important for Dart
because we compile the

00:22:28.640 --> 00:22:29.820
JavaScript.

00:22:29.820 --> 00:22:32.860
And in particular, IE9
is really good.

00:22:32.860 --> 00:22:35.190
So we can actually bring some of
these new features and have

00:22:35.190 --> 00:22:37.950
it work everywhere your
users will want

00:22:37.950 --> 00:22:41.620
to run their programs.

00:22:41.620 --> 00:22:44.780
SIGGI CHEREM: So now, by
embracing these web standards,

00:22:44.780 --> 00:22:48.540
we get benefit that people like
Dimitri have been working

00:22:48.540 --> 00:22:51.680
really hard in designing the
system so that they take a lot

00:22:51.680 --> 00:22:54.090
into consideration all the
designs of older systems like

00:22:54.090 --> 00:22:55.450
Angular and so on.

00:22:55.450 --> 00:22:58.380
So we benefit a lot from that
hard work and all the history

00:22:58.380 --> 00:22:59.650
that's behind us.

00:22:59.650 --> 00:23:02.280
At the same time, we have to
adapt it to make it work in

00:23:02.280 --> 00:23:04.760
Dart, so we have opportunities
to provide feedback and to

00:23:04.760 --> 00:23:07.910
make sure that is something that
is not just meant to work

00:23:07.910 --> 00:23:10.725
only in JavaScript, but also in
a context that is a little

00:23:10.725 --> 00:23:13.340
bit more generic and agnostic
of what language

00:23:13.340 --> 00:23:15.880
it's running in.

00:23:15.880 --> 00:23:18.627
And once this actually makes it
into the platform and the

00:23:18.627 --> 00:23:20.540
old browser's implemented, that
means that our library

00:23:20.540 --> 00:23:23.440
will basically keep
producing inside.

00:23:23.440 --> 00:23:25.910
JOHN MESSERLY: Yeah, if you
haven't seen this Vapor.js,

00:23:25.910 --> 00:23:26.880
you should check it out.

00:23:26.880 --> 00:23:29.060
It's pretty funny.

00:23:29.060 --> 00:23:30.970
It's basically a JavaScript--

00:23:30.970 --> 00:23:33.880
it's the world's
smallest ever--

00:23:33.880 --> 00:23:35.880
smallest possible JavaScript
library.

00:23:35.880 --> 00:23:36.650
[INAUDIBLE] good.

00:23:36.650 --> 00:23:37.740
JJ BEHRENS: You know,
that's funny.

00:23:37.740 --> 00:23:41.990
I was code reviewing it before
we did this Hangout.

00:23:41.990 --> 00:23:45.220
It didn't take me long.

00:23:45.220 --> 00:23:48.440
Although, I was still
complaining about--

00:23:48.440 --> 00:23:52.730
I wanted to complain about
the indentation settings.

00:23:52.730 --> 00:23:53.610
JOHN MESSERLY: Yeah.

00:23:53.610 --> 00:23:57.080
And the important point there is
just that a lot of people,

00:23:57.080 --> 00:23:59.340
when they choose frameworks,
they look for really small

00:23:59.340 --> 00:24:01.780
JavaScript libraries.

00:24:01.780 --> 00:24:05.410
They will frequently advertise
that this library gives you

00:24:05.410 --> 00:24:08.710
all this power and only 3K.

00:24:08.710 --> 00:24:12.050
And I think that by building
stuff into the browser, we can

00:24:12.050 --> 00:24:15.540
both give you tons of
capabilities and, eventually

00:24:15.540 --> 00:24:18.570
over time, reduce the size of
code you have to import.

00:24:18.570 --> 00:24:20.730
JJ BEHRENS: And in general, this
isn't really so much a

00:24:20.730 --> 00:24:23.920
problem in Dart anyway, because
we have a tree shaking

00:24:23.920 --> 00:24:25.520
and dead code elimination.

00:24:25.520 --> 00:24:28.070
So you can use whatever
libraries you want to use and

00:24:28.070 --> 00:24:33.760
not worry so much about 2K of
code that you're not actually

00:24:33.760 --> 00:24:36.120
using, because it'll get
stripped out immediately.

00:24:36.120 --> 00:24:39.070
JOHN MESSERLY: Mm-hm.

00:24:39.070 --> 00:24:41.610
JJ BEHRENS: So what's
available in Web

00:24:41.610 --> 00:24:43.330
Components for Dart?

00:24:43.330 --> 00:24:46.680
SIGGI CHEREM: So there's
basically a blend of Web

00:24:46.680 --> 00:24:50.370
Components features and
templating features.

00:24:50.370 --> 00:24:54.150
And on the Web Components
side, basically we have

00:24:54.150 --> 00:24:56.480
polyfills for a lot
of the things that

00:24:56.480 --> 00:24:57.595
Dimitri talked about.

00:24:57.595 --> 00:25:00.300
So there's a notion of custom
elements, being able to define

00:25:00.300 --> 00:25:05.020
your own tags, and the notion
of the shadow DOM.

00:25:05.020 --> 00:25:06.630
When it's actually available
in a browser,

00:25:06.630 --> 00:25:07.570
we'll try to use it.

00:25:07.570 --> 00:25:12.230
But we can also polyfill and
single add those features.

00:25:12.230 --> 00:25:14.900
And things like extension and
composition, so you can then

00:25:14.900 --> 00:25:17.660
inherit from other components
and be able to have components

00:25:17.660 --> 00:25:20.280
that inject data that
you can [INAUDIBLE]

00:25:20.280 --> 00:25:22.150
elements where you use them.

00:25:22.150 --> 00:25:24.700
And on the templating side,
there is the notion of data

00:25:24.700 --> 00:25:28.250
binding, conditional,
iterations, inlining event

00:25:28.250 --> 00:25:33.130
listeners-- things that are
common to templating system,

00:25:33.130 --> 00:25:36.260
then, are also some of this
part of what MDV is

00:25:36.260 --> 00:25:37.770
specifying.

00:25:37.770 --> 00:25:39.960
But essentially, we have adapted
them to work more

00:25:39.960 --> 00:25:41.810
closely to have Dart breaks.

00:25:41.810 --> 00:25:44.300
And a lot of these bindings
and things are expressing

00:25:44.300 --> 00:25:48.650
things in syntax that is very
linked to that language.

00:25:48.650 --> 00:25:52.400
So when you put all these things
together, basically, we

00:25:52.400 --> 00:25:56.460
have all the tools we need to
build large web applications

00:25:56.460 --> 00:25:58.860
following very nice patterns.

00:25:58.860 --> 00:26:01.640
And if you're familiar with
web development, or, in

00:26:01.640 --> 00:26:04.010
general, application
development, it's very common

00:26:04.010 --> 00:26:06.530
that you want to create some
division of your application

00:26:06.530 --> 00:26:09.080
in models, views and
something else.

00:26:09.080 --> 00:26:12.030
It could be a controller or a
percenter or something that

00:26:12.030 --> 00:26:13.920
would plow data through
the UI.

00:26:13.920 --> 00:26:16.680
And the UI changes back
to your system.

00:26:16.680 --> 00:26:17.290
JJ BEHRENS: That's funny.

00:26:17.290 --> 00:26:19.590
I've never heard of MV
asterisk pattern.

00:26:22.210 --> 00:26:23.382
SIGGI CHEREM: Well, I mean--

00:26:23.382 --> 00:26:26.500
JOHN MESSERLY: It's whatever
you want to put there.

00:26:26.500 --> 00:26:29.700
Yeah, I think we're pretty
sympathetic to the model view,

00:26:29.700 --> 00:26:33.640
view model if we had to pick
one, I think But they're all

00:26:33.640 --> 00:26:37.350
different words to kind of
describe the extra glue.

00:26:37.350 --> 00:26:38.190
SIGGI CHEREM: Exactly.

00:26:38.190 --> 00:26:41.300
So in essence, when you think
about it, you have essentially

00:26:41.300 --> 00:26:43.550
one part of your code is
dedicated to just the

00:26:43.550 --> 00:26:44.270
percentage.

00:26:44.270 --> 00:26:47.360
So that's why in this diagram
that we have here on this

00:26:47.360 --> 00:26:50.850
slide is just saying
this is the UI.

00:26:50.850 --> 00:26:54.000
Now, whenever a user interacts
with it, it starts running

00:26:54.000 --> 00:26:56.740
some code that's essentially
a bunch of operations that

00:26:56.740 --> 00:26:59.132
semantically represent what you
want your [INAUDIBLE] once

00:26:59.132 --> 00:27:02.120
the user takes an action.

00:27:02.120 --> 00:27:04.440
And those operations are
eventually going to change

00:27:04.440 --> 00:27:07.190
your data model.

00:27:07.190 --> 00:27:10.810
And then to close the cycle,
essentially as soon as the

00:27:10.810 --> 00:27:13.140
change happens in your model, we
want to reflect that in the

00:27:13.140 --> 00:27:14.570
UI and end up with a consistent

00:27:14.570 --> 00:27:17.560
state in your screen.

00:27:17.560 --> 00:27:22.010
So this cycle here is something
that every model

00:27:22.010 --> 00:27:25.610
view star pattern essentially
tries to follow.

00:27:25.610 --> 00:27:27.960
And the difference can come
in essentially how do you

00:27:27.960 --> 00:27:31.520
actually make this update from
the DL layer to the UI.

00:27:31.520 --> 00:27:34.460
Some people say, oh, let's
do those updates using a

00:27:34.460 --> 00:27:35.340
controller.

00:27:35.340 --> 00:27:38.560
Some people would actually do
basically just proactively

00:27:38.560 --> 00:27:40.420
change the things from the
operations all the way

00:27:40.420 --> 00:27:43.630
directly to the UI, kind
of shortcutting things.

00:27:43.630 --> 00:27:45.350
And those kind of things
sometimes end up getting a

00:27:45.350 --> 00:27:46.630
little bit of spaghetti
code and

00:27:46.630 --> 00:27:49.040
making it hard to maintain.

00:27:49.040 --> 00:27:51.570
So one thing that we really like
about having templating

00:27:51.570 --> 00:27:54.860
features like data binding and
all the things is that you can

00:27:54.860 --> 00:27:58.310
make the data and UI respondents
more reactive.

00:27:58.310 --> 00:28:00.740
You just have some features that
are allotted to say this

00:28:00.740 --> 00:28:02.830
portion of the UI is going to
just simply reflect whatever

00:28:02.830 --> 00:28:04.170
the latest state
of the data is.

00:28:04.170 --> 00:28:07.390
Whenever that changes, this will
be automatically changed.

00:28:07.390 --> 00:28:10.330
And this automatic is
essentially the notion of

00:28:10.330 --> 00:28:13.070
there will be an event and then
essentially a subsequent

00:28:13.070 --> 00:28:14.195
change in the UI.

00:28:14.195 --> 00:28:15.880
Just have to make sure
that those events

00:28:15.880 --> 00:28:16.780
are triggered somehow.

00:28:16.780 --> 00:28:19.590
JJ BEHRENS: You know, I really
like the way that MDV fits

00:28:19.590 --> 00:28:22.590
into all of this, because I
remember working my way

00:28:22.590 --> 00:28:25.080
through the "Agile Web
Development with Rails" book.

00:28:25.080 --> 00:28:28.920
And there was this kind of thing
that has been the ugly

00:28:28.920 --> 00:28:30.730
stepchild that no one
wants anymore, and

00:28:30.730 --> 00:28:33.080
that's the RJS templates.

00:28:33.080 --> 00:28:35.400
And do you guys remember this,
where you would write Ruby

00:28:35.400 --> 00:28:39.010
code and it would generate
JavaScript on the fly to

00:28:39.010 --> 00:28:40.440
update the UI?

00:28:40.440 --> 00:28:42.520
And I just remember going
through all the exercises.

00:28:42.520 --> 00:28:46.720
And it's like if I forgot to
write the right line, then I

00:28:46.720 --> 00:28:49.080
would update one part of
the UI but not update

00:28:49.080 --> 00:28:49.960
another part of the UI.

00:28:49.960 --> 00:28:53.400
And the whole thing was kind
of a little bit strange to

00:28:53.400 --> 00:28:56.790
begin with, because I have the
server trying to write

00:28:56.790 --> 00:28:57.850
JavaScript to update the UI.

00:28:57.850 --> 00:28:59.890
But with MDV, it's
really nice.

00:28:59.890 --> 00:29:02.820
I change the data and the UI
automatically updates.

00:29:02.820 --> 00:29:05.530
I mean, this is a big win.

00:29:05.530 --> 00:29:06.240
SIGGI CHEREM: Yeah, exactly.

00:29:06.240 --> 00:29:07.490
JOHN MESSERLY: Yeah, exactly.

00:29:09.790 --> 00:29:12.630
Yeah, another interesting part
about this, and this comes in

00:29:12.630 --> 00:29:14.320
when you have components.

00:29:14.320 --> 00:29:17.740
So you've got this kind of
fractal picture here, which

00:29:17.740 --> 00:29:20.080
just shows that once you have
components, you can kind of

00:29:20.080 --> 00:29:24.790
have something that completely
encapsulates its model and its

00:29:24.790 --> 00:29:26.770
view and its events.

00:29:26.770 --> 00:29:30.090
And that's really nice, because
now you've raise the

00:29:30.090 --> 00:29:31.330
level of abstraction.

00:29:31.330 --> 00:29:34.470
You can program against a very
rich, beautiful widget, not

00:29:34.470 --> 00:29:35.370
worry about--

00:29:35.370 --> 00:29:37.930
it may have tons of internal
state, and that's fine.

00:29:37.930 --> 00:29:39.140
You never have to think
about that.

00:29:39.140 --> 00:29:41.650
As long as the original
developer got it right, you

00:29:41.650 --> 00:29:42.260
just use it.

00:29:42.260 --> 00:29:45.860
And that's kind of an added
simplicity, I think, on top of

00:29:45.860 --> 00:29:48.330
the-- you still want your
top-level app to have this

00:29:48.330 --> 00:29:52.330
nice structure of separating the
different parts, but it's

00:29:52.330 --> 00:29:55.190
very nice to have it be fully
recursive like this.

00:29:55.190 --> 00:29:55.440
JJ BEHRENS: Yeah.

00:29:55.440 --> 00:29:59.160
I think the recursion is
a really good feature.

00:29:59.160 --> 00:30:02.890
Again, coming from the Rails
world where we had model view

00:30:02.890 --> 00:30:04.940
controller, but you
have one model.

00:30:04.940 --> 00:30:07.200
And you're going to generate the
page using one model, one

00:30:07.200 --> 00:30:10.610
view, and one template, and
then a bunch of helpers.

00:30:10.610 --> 00:30:13.530
Whereas, sometimes I would get
into these widgets where I

00:30:13.530 --> 00:30:15.470
wished the widget had
its own model.

00:30:15.470 --> 00:30:18.910
And it was never really kind
of a first class citizen.

00:30:18.910 --> 00:30:23.370
But with Web Components, each
web component is a full

00:30:23.370 --> 00:30:26.000
citizen, can have
its own model.

00:30:26.000 --> 00:30:30.850
And then you can have separate
models that are the

00:30:30.850 --> 00:30:35.170
aggregation of a bunch of
other web components.

00:30:35.170 --> 00:30:38.670
And I just love being able
to structure my app in a

00:30:38.670 --> 00:30:41.215
fractal-like way, as you say.

00:30:41.215 --> 00:30:43.610
SIGGI CHEREM: You know, I think
that's why we sometimes

00:30:43.610 --> 00:30:47.940
prefer these MVVM, the Model
View ViewModel architecture,

00:30:47.940 --> 00:30:50.760
where view model actually
represents the model that is

00:30:50.760 --> 00:30:53.190
mainly associated with
view pieces.

00:30:53.190 --> 00:30:56.620
And it's not so much about all
the background tasks or

00:30:56.620 --> 00:30:58.685
synchronization data, the stuff
that you normally would

00:30:58.685 --> 00:31:00.130
push all the way
to the server.

00:31:00.130 --> 00:31:02.820
JOHN MESSERLY: Yeah.

00:31:02.820 --> 00:31:08.670
SIGGI CHEREM: So we have
a bunch of examples in,

00:31:08.670 --> 00:31:10.620
essentially, the articles
we publish in

00:31:10.620 --> 00:31:13.240
the dublin.org website.

00:31:13.240 --> 00:31:15.500
And we extracted a couple
examples here, just to

00:31:15.500 --> 00:31:17.760
highlight some of the features
that we have on the templating

00:31:17.760 --> 00:31:18.850
side of things.

00:31:18.850 --> 00:31:21.500
And this first example
is actually

00:31:21.500 --> 00:31:22.790
also from our website.

00:31:22.790 --> 00:31:26.210
And one of the first things
that you can see is--

00:31:26.210 --> 00:31:27.480
let me highlight that--
is what's the

00:31:27.480 --> 00:31:30.430
notion of a data binding.

00:31:30.430 --> 00:31:33.650
And in this example, you see
essentially is the notion of a

00:31:33.650 --> 00:31:36.170
little piece of the UI that
shows a counter and the button

00:31:36.170 --> 00:31:38.290
that increments the counter.

00:31:38.290 --> 00:31:41.165
And what you see this double
braces with account inside,

00:31:41.165 --> 00:31:43.300
it's saying, well, this is
actually the value of the

00:31:43.300 --> 00:31:44.430
variable count.

00:31:44.430 --> 00:31:48.620
Whenever that changes, I want to
reflect it here in the UI.

00:31:48.620 --> 00:31:53.740
Similarly, this is sort of a way
of doing one of the edges

00:31:53.740 --> 00:31:55.330
on the triangle we
saw earlier.

00:31:55.330 --> 00:31:59.100
Another edge is saying, well,
how do I do UI events and

00:31:59.100 --> 00:32:00.160
listen on UI events.

00:32:00.160 --> 00:32:02.830
And you can do that declarative
as well.

00:32:02.830 --> 00:32:06.175
The syntax here is very similar
to how back in the day

00:32:06.175 --> 00:32:10.210
you used to have on the DOM the
notion of on events in the

00:32:10.210 --> 00:32:13.300
DOM, which are typically very
discouraged because you don't

00:32:13.300 --> 00:32:15.485
want to do that right upfront.

00:32:15.485 --> 00:32:17.610
But this is more
a declaration.

00:32:17.610 --> 00:32:20.140
This does not necessarily mean
one is going to run--

00:32:20.140 --> 00:32:24.690
he hits a lot of [? pledges ?]
implicit in this that--

00:32:24.690 --> 00:32:25.640
Dimitri was talking
about templates.

00:32:25.640 --> 00:32:28.330
This is just I'm declaring
what the behavior is.

00:32:28.330 --> 00:32:30.530
Later, we'll figure out
how to run this code.

00:32:30.530 --> 00:32:32.540
And what means we're going to
run it, it just means when you

00:32:32.540 --> 00:32:34.730
click on this thing, we're going
to cull the method that

00:32:34.730 --> 00:32:37.840
is actually represented inside
of that event handlers.

00:32:37.840 --> 00:32:40.870
In this particular example,
we'll increment the count.

00:32:40.870 --> 00:32:43.570
JJ BEHRENS: Yeah, I love the
fact that you update count and

00:32:43.570 --> 00:32:45.890
automatically the UI updates.

00:32:45.890 --> 00:32:48.600
But I'm going to have to say
that I really don't like the

00:32:48.600 --> 00:32:51.750
syntax of the way you have
the double curly braces.

00:32:51.750 --> 00:32:53.130
And I'll tell you why.

00:32:53.130 --> 00:32:55.030
I'm a Python programmer
and I just think

00:32:55.030 --> 00:32:58.160
that braces are ugly.

00:32:58.160 --> 00:33:00.360
JOHN MESSERLY: No, you can
import them in Python, from

00:33:00.360 --> 00:33:01.610
future import braces.

00:33:05.390 --> 00:33:07.313
JJ BEHRENS: OK, so tell
me about iteration.

00:33:10.730 --> 00:33:13.600
SIGGI CHEREM: Most decent
templating systems had a way

00:33:13.600 --> 00:33:16.430
of going through the data and
iterating over it or having

00:33:16.430 --> 00:33:16.950
conditional--

00:33:16.950 --> 00:33:19.490
some notion of control flow.

00:33:19.490 --> 00:33:21.740
But it's basically just saying,
I want to essentially

00:33:21.740 --> 00:33:25.140
expand a section of my
[INAUDIBLE] in multiple times

00:33:25.140 --> 00:33:28.700
for each one of the variables
in the collection.

00:33:28.700 --> 00:33:30.000
So that's an example that
you can see now.

00:33:30.000 --> 00:33:34.265
And this is from our TodoMVC
example that you can also find

00:33:34.265 --> 00:33:38.120
in our product page.

00:33:38.120 --> 00:33:40.640
So basically, iteration--

00:33:40.640 --> 00:33:42.830
here's where we start doing some
of the changes to make it

00:33:42.830 --> 00:33:46.150
a little bit more closer to how
you write things in Dart,

00:33:46.150 --> 00:33:48.100
saying, well, we're going to
introduce here a syntax

00:33:48.100 --> 00:33:49.500
similar to how [INAUDIBLE]

00:33:49.500 --> 00:33:52.155
in Dart, even though it's
the same that MDV

00:33:52.155 --> 00:33:54.480
uses for their templates.

00:33:54.480 --> 00:33:55.100
[INAUDIBLE]

00:33:55.100 --> 00:33:55.520
match.

00:33:55.520 --> 00:33:55.800
JOHN MESSERLY: Yeah.

00:33:55.800 --> 00:33:57.970
And we let you use
Dart Expressions.

00:33:57.970 --> 00:34:00.665
So you'll note view model
dot is visible.

00:34:00.665 --> 00:34:04.450
That's just Dart code
for the binding.

00:34:04.450 --> 00:34:06.180
SIGGI CHEREM: So the next
[? binder ?] that you have

00:34:06.180 --> 00:34:08.100
under it is a conditional
saying,

00:34:08.100 --> 00:34:09.060
OK, this is a template.

00:34:09.060 --> 00:34:10.580
And we're only going
to display if this

00:34:10.580 --> 00:34:11.280
condition is true.

00:34:11.280 --> 00:34:13.340
If it's not true, then
we're not going to

00:34:13.340 --> 00:34:14.070
actually touch it.

00:34:14.070 --> 00:34:16.889
So you could in fact have
expressions and bindings

00:34:16.889 --> 00:34:20.150
inside of that conditional that
depend on the condition

00:34:20.150 --> 00:34:20.989
that is above it.

00:34:20.989 --> 00:34:23.389
So it's not that you have to be
[? preventive ?] about and

00:34:23.389 --> 00:34:25.870
not [INAUDIBLE] your reception
or something of that sort.

00:34:25.870 --> 00:34:28.810
JOHN MESSERLY: Yeah.

00:34:28.810 --> 00:34:31.580
And the template actually--

00:34:31.580 --> 00:34:33.830
that template node, that's the
thing Dimitri was alluding to

00:34:33.830 --> 00:34:37.400
earlier, where it's saying
everything under this node is

00:34:37.400 --> 00:34:39.320
inert until we do something--

00:34:39.320 --> 00:34:42.016
until there's some condition
like iterate or f that causes

00:34:42.016 --> 00:34:43.969
us to care about it.

00:34:43.969 --> 00:34:46.320
And so I'll also talk about--
so now we'll highlight this

00:34:46.320 --> 00:34:47.860
xTodo rail.

00:34:47.860 --> 00:34:49.150
And that's basically--

00:34:49.150 --> 00:34:52.020
that is a instantiation
of a web component.

00:34:52.020 --> 00:34:55.330
So xTodo row, of course, if you
know HTML, you're like,

00:34:55.330 --> 00:34:57.920
there's no tag like that.

00:34:57.920 --> 00:35:02.820
And so that's a tag we made up
just for this application.

00:35:02.820 --> 00:35:05.590
And we can just use
it in HTML.

00:35:05.590 --> 00:35:08.000
And this is the thing, this
will work in browsers.

00:35:08.000 --> 00:35:09.500
So that is just--

00:35:09.500 --> 00:35:10.920
I want to make that point again
because I think that's

00:35:10.920 --> 00:35:13.510
really exciting.

00:35:13.510 --> 00:35:16.590
And then we can do data
binding with it too.

00:35:16.590 --> 00:35:20.690
So just like we can do data
binding for a normal

00:35:20.690 --> 00:35:22.980
attribute, we can do
data binding of a

00:35:22.980 --> 00:35:24.220
field of our component.

00:35:24.220 --> 00:35:27.820
And we can say, hey, when you
create this xTodo row, make

00:35:27.820 --> 00:35:28.970
sure that you assign--

00:35:28.970 --> 00:35:32.350
you fill in its Todo attribute,
its Todo field, in

00:35:32.350 --> 00:35:35.390
Dart with the value of x.

00:35:35.390 --> 00:35:39.610
SIGGI CHEREM: So basically,
let's show you what this Todo

00:35:39.610 --> 00:35:42.520
row-- how it was written
initially.

00:35:42.520 --> 00:35:45.740
Basically, when you write a
component, its similar to

00:35:45.740 --> 00:35:49.035
declaring, essentially, a new
component in the DOM.

00:35:49.035 --> 00:35:51.140
And when you think of DOM
elements, essentially they

00:35:51.140 --> 00:35:54.420
have attributes that they
commonly have a corresponding

00:35:54.420 --> 00:35:58.780
property, sort of that
matches the name of

00:35:58.780 --> 00:36:00.150
that particular attribute.

00:36:00.150 --> 00:36:01.320
And that's sort of
what we did here.

00:36:01.320 --> 00:36:04.120
So when we're defining a
component, we're saying, well,

00:36:04.120 --> 00:36:06.600
there's some fields in this
component class and one of

00:36:06.600 --> 00:36:08.210
them is the actual Todo item.

00:36:08.210 --> 00:36:10.942
That sort of linked
back to our model.

00:36:10.942 --> 00:36:12.810
When we displayed the
view, we say, well,

00:36:12.810 --> 00:36:13.910
it's like an LI element.

00:36:13.910 --> 00:36:17.070
And it has a label that says
this the task that we have to

00:36:17.070 --> 00:36:19.700
do and so on.

00:36:19.700 --> 00:36:21.930
But what's interesting is that
then the binding that we did

00:36:21.930 --> 00:36:24.130
on the previous slide was
basically just saying, well,

00:36:24.130 --> 00:36:26.930
these attributes corresponds to
this particular property or

00:36:26.930 --> 00:36:28.180
field in this particular
component.

00:36:31.020 --> 00:36:34.520
JJ BEHRENS: I love the fact that
you could combine both

00:36:34.520 --> 00:36:39.090
some markup as well as custom
code, so that the tag actually

00:36:39.090 --> 00:36:41.860
has real meaning and those
two things are together.

00:36:41.860 --> 00:36:43.990
But some people coming from--

00:36:43.990 --> 00:36:45.150
I think it's a [INAUDIBLE]

00:36:45.150 --> 00:36:48.090
background, they might not like
having the Dart code in

00:36:48.090 --> 00:36:49.770
the same file as the
template code.

00:36:49.770 --> 00:36:53.200
And what would you
suggest they do?

00:36:53.200 --> 00:36:55.390
SIGGI CHEREM: You can simply
move the code to a

00:36:55.390 --> 00:36:56.380
separate Dart file.

00:36:56.380 --> 00:36:59.550
So what you see there is
there's a script that

00:36:59.550 --> 00:37:03.130
essentially currently has an
inline Dart code in it.

00:37:03.130 --> 00:37:05.900
You can switch that to put a
source tag that points to a

00:37:05.900 --> 00:37:09.660
particular Dart file and move
the code into your Dart.

00:37:09.660 --> 00:37:11.550
So that will give you the
benefit that if you're using

00:37:11.550 --> 00:37:13.690
it from the Dart editor or
things like that, you at least

00:37:13.690 --> 00:37:16.940
get proper syntax highlighting
and code

00:37:16.940 --> 00:37:18.290
completion, it seems like.

00:37:18.290 --> 00:37:20.310
JJ BEHRENS: So is the Dart
Editor going to get better

00:37:20.310 --> 00:37:23.570
support for Web Components?

00:37:23.570 --> 00:37:24.080
JOHN MESSERLY: Oh, yes.

00:37:24.080 --> 00:37:24.490
For sure.

00:37:24.490 --> 00:37:25.710
We'll talk more about that.

00:37:25.710 --> 00:37:29.640
But yeah, the support for right
now is very basic, but

00:37:29.640 --> 00:37:31.040
it's something we're looking
at making better.

00:37:31.040 --> 00:37:31.940
JJ BEHRENS: OK, great.

00:37:31.940 --> 00:37:35.530
So tell me how to run this
on modern browsers.

00:37:35.530 --> 00:37:37.250
JOHN MESSERLY: So it's
really easy.

00:37:37.250 --> 00:37:39.000
Well actually, yeah, since
we're talking about the

00:37:39.000 --> 00:37:42.120
Editor-- so the easiest way to
do this is you can go to the

00:37:42.120 --> 00:37:43.615
Editor welcome page of
the Dart Editor.

00:37:43.615 --> 00:37:45.380
So you just download it.

00:37:45.380 --> 00:37:48.570
You're on the welcome page and
you click the TodoMVC example.

00:37:48.570 --> 00:37:49.800
And that's just a
starting point.

00:37:49.800 --> 00:37:51.500
You can edit that, you
can delete stuff if

00:37:51.500 --> 00:37:52.140
you don't like it.

00:37:52.140 --> 00:37:56.090
But the basic idea is there's
this little file in there

00:37:56.090 --> 00:37:58.410
called build.dart.

00:37:58.410 --> 00:37:59.290
And it's really small.

00:37:59.290 --> 00:38:01.280
And if you have one of those
in your project, the editor

00:38:01.280 --> 00:38:04.820
knows every time you save an
HTML file, for example, they

00:38:04.820 --> 00:38:05.700
know to run that code.

00:38:05.700 --> 00:38:10.070
And so they'll call build.dart
and it will very quickly,

00:38:10.070 --> 00:38:14.540
order of less than half a
second, update all the things

00:38:14.540 --> 00:38:15.020
that it needs.

00:38:15.020 --> 00:38:20.260
It will run our tool that
implements all these features.

00:38:20.260 --> 00:38:22.170
And then you just go into
your output folder and

00:38:22.170 --> 00:38:24.670
run your HTML page.

00:38:24.670 --> 00:38:29.720
And so what we're also showing
on the slide is that same

00:38:29.720 --> 00:38:31.300
exact flow works from
the command line.

00:38:31.300 --> 00:38:35.050
So you run our tool, you run
Dart to JS exactly like you

00:38:35.050 --> 00:38:39.620
normally would if you want to
run it in a browser other than

00:38:39.620 --> 00:38:42.880
Chrome with Dart, Dartium.

00:38:42.880 --> 00:38:45.560
And yeah, that's
pretty much it.

00:38:45.560 --> 00:38:47.310
SIGGI CHEREM: So additionally
there's also--

00:38:47.310 --> 00:38:50.690
you can follow that link that we
have there on the bottom on

00:38:50.690 --> 00:38:53.430
Tools, how to set things up.

00:38:53.430 --> 00:38:56.140
And one of the things we have
is we also have the Dartium

00:38:56.140 --> 00:38:59.530
extension that basically,
once the compiler--

00:38:59.530 --> 00:39:01.730
in an extension, it [? sniff ?]
that you have a

00:39:01.730 --> 00:39:03.570
page that actually has
components, and then it would

00:39:03.570 --> 00:39:04.730
actually compile it
automatically.

00:39:04.730 --> 00:39:07.490
So you just save the file on
your file system, refresh, and

00:39:07.490 --> 00:39:08.010
it would just work.

00:39:08.010 --> 00:39:09.655
JJ BEHRENS: Wow, cool.

00:39:09.655 --> 00:39:12.500
JOHN MESSERLY: Yeah, we
really hate waiting.

00:39:12.500 --> 00:39:16.580
If you've ever seen that--
there's an XKCD comic about

00:39:16.580 --> 00:39:17.520
someone that--

00:39:17.520 --> 00:39:19.320
people are dispensing because
they're waiting for their code

00:39:19.320 --> 00:39:20.000
to compile.

00:39:20.000 --> 00:39:22.630
We really hate waiting for
things to compile.

00:39:22.630 --> 00:39:23.810
JJ BEHRENS: Yeah.

00:39:23.810 --> 00:39:26.610
The C++ programmers have to
wait minutes and we're

00:39:26.610 --> 00:39:29.520
complaining over waiting
half of a second.

00:39:29.520 --> 00:39:30.710
JOHN MESSERLY: Yeah, exactly.

00:39:30.710 --> 00:39:33.826
So we just want to make that--
you save your code, refresh it

00:39:33.826 --> 00:39:36.200
in your browser, bam, you
see your changes.

00:39:36.200 --> 00:39:38.340
JJ BEHRENS: That's
pretty awesome.

00:39:38.340 --> 00:39:40.700
JOHN MESSERLY: And so what I'm
sharing on this slide, you can

00:39:40.700 --> 00:39:42.200
start using this now.

00:39:42.200 --> 00:39:43.520
It's a very early stage.

00:39:43.520 --> 00:39:45.920
Of course, Dart is
not 1.0 yet.

00:39:45.920 --> 00:39:48.025
And if you follow the Dart
project, you've probably seen

00:39:48.025 --> 00:39:49.950
on the mailing list there's
changes still happening to

00:39:49.950 --> 00:39:54.100
some of the core libraries to
try to improve APIs and stuff.

00:39:54.100 --> 00:39:57.650
But you can start
using this now.

00:39:57.650 --> 00:40:01.250
This just summarizes all
the features we have.

00:40:01.250 --> 00:40:04.110
And then, so where
are we going?

00:40:04.110 --> 00:40:06.520
This is something I think a lot
of people want to know.

00:40:06.520 --> 00:40:09.470
And we really want a
complete tool kit.

00:40:09.470 --> 00:40:11.620
We don't want to stop--

00:40:11.620 --> 00:40:12.760
we could give you
some features.

00:40:12.760 --> 00:40:15.680
And I think it's already
incredibly useful, this basic

00:40:15.680 --> 00:40:17.130
layer of templating
and components.

00:40:17.130 --> 00:40:20.560
But as soon as you buy into
that, you're like, oh, well, I

00:40:20.560 --> 00:40:22.680
like this, but I want
more stuff.

00:40:22.680 --> 00:40:23.490
I want routing.

00:40:23.490 --> 00:40:26.750
Help me automatically serialize
my objects.

00:40:26.750 --> 00:40:28.740
Help me with local storage.

00:40:28.740 --> 00:40:31.470
And so we basically want to
keep trying to fill in all

00:40:31.470 --> 00:40:33.270
these pieces.

00:40:33.270 --> 00:40:37.085
And we would love help, but one
important part of this is

00:40:37.085 --> 00:40:39.820
as soon as you hear complete
stack, you might think, oh no,

00:40:39.820 --> 00:40:41.965
this is going to be another
giant framework

00:40:41.965 --> 00:40:43.030
I have to buy into.

00:40:43.030 --> 00:40:47.030
And the answer to that is no,
you can pick and choose

00:40:47.030 --> 00:40:48.330
whichever parts you want.

00:40:48.330 --> 00:40:51.020
And that's very important to us,
because you may have your

00:40:51.020 --> 00:40:55.220
own way of doing serialization
that's different from what we

00:40:55.220 --> 00:40:58.430
think is the right thing.

00:40:58.430 --> 00:41:02.680
And so another thing I just want
to throw out there, we

00:41:02.680 --> 00:41:03.670
got asked this--

00:41:03.670 --> 00:41:06.820
I think this alludes to one of
the questions, too, that I saw

00:41:06.820 --> 00:41:08.510
on the list.

00:41:08.510 --> 00:41:12.720
But how does this compare to
other JavaScript frameworks,

00:41:12.720 --> 00:41:14.320
because there are a lot
of them out there.

00:41:14.320 --> 00:41:17.590
And there was this
great article.

00:41:17.590 --> 00:41:21.070
Throne of JS kind of picked
seven of the popular ones and

00:41:21.070 --> 00:41:22.760
went through and found--

00:41:22.760 --> 00:41:24.840
where do they agree and where
do they disagree?

00:41:24.840 --> 00:41:27.310
And the agreement is good,
because that means there's now

00:41:27.310 --> 00:41:29.710
this set of features where, as
a web developer, you can just

00:41:29.710 --> 00:41:30.670
expect them.

00:41:30.670 --> 00:41:33.170
Any good framework is
going to have them.

00:41:33.170 --> 00:41:34.930
And then the points of
disagreement are interesting

00:41:34.930 --> 00:41:36.820
too, because these are the
things that we're still all

00:41:36.820 --> 00:41:39.620
trying to figure out
collectively.

00:41:39.620 --> 00:41:44.022
And reasonable smart people
have different opinions.

00:41:44.022 --> 00:41:45.272
JJ BEHRENS: I disagree.

00:41:47.800 --> 00:41:49.320
JOHN MESSERLY: Yeah, exactly.

00:41:49.320 --> 00:41:50.800
So where do we stack
up on these?

00:41:50.800 --> 00:41:54.020
So we've got one of the big
things is how you do

00:41:54.020 --> 00:41:56.800
templating, DOM versus
String-based--

00:41:56.800 --> 00:41:59.350
and basically, the String-based
people can say,

00:41:59.350 --> 00:42:00.600
well, we've got these
extra features

00:42:00.600 --> 00:42:02.850
like server-side rendering.

00:42:02.850 --> 00:42:04.790
And the DOM-based people say,
well, we've got a better

00:42:04.790 --> 00:42:05.470
programming model.

00:42:05.470 --> 00:42:09.230
You just use HTML and you have
some magic attributes.

00:42:09.230 --> 00:42:10.120
And you already saw that.

00:42:10.120 --> 00:42:10.780
We already showed you.

00:42:10.780 --> 00:42:16.630
So our templating is very
similar to the DOM approach.

00:42:16.630 --> 00:42:19.280
But because we have a complete
HTML5 part [? server, ?] we

00:42:19.280 --> 00:42:21.320
actually can implement some of
these neat features like

00:42:21.320 --> 00:42:22.630
server-side rendering.

00:42:22.630 --> 00:42:25.020
We don't have that yet, but it's
something that we've been

00:42:25.020 --> 00:42:25.570
looking at.

00:42:25.570 --> 00:42:27.860
So I think on this one we might
be able to get the best

00:42:27.860 --> 00:42:29.851
of both worlds.

00:42:29.851 --> 00:42:31.950
You want to talk about
the flexibility?

00:42:31.950 --> 00:42:32.260
SIGGI CHEREM: Yeah.

00:42:32.260 --> 00:42:37.450
So I think John was mentioning
earlier a little bit of this--

00:42:37.450 --> 00:42:39.120
is this going to be a framework
impacted by

00:42:39.120 --> 00:42:39.620
[INAUDIBLE] or not.

00:42:39.620 --> 00:42:44.060
And this is one of the issues
that comes up a lot in this

00:42:44.060 --> 00:42:44.640
comparison.

00:42:44.640 --> 00:42:48.520
And in particular, I think we're
somewhere in the middle,

00:42:48.520 --> 00:42:51.090
but we're flexible enough that
we're providing a library with

00:42:51.090 --> 00:42:52.520
a lot of small pieces
that you can use.

00:42:52.520 --> 00:42:57.450
So you can use the portion to
use watchers to watch for

00:42:57.450 --> 00:43:00.915
changes in models,
for example.

00:43:00.915 --> 00:43:04.610
But there's still some buy in in
just having to be using our

00:43:04.610 --> 00:43:06.960
compiler in order to
use things today.

00:43:06.960 --> 00:43:08.900
Eventually, what's happening
is that a lot of these web

00:43:08.900 --> 00:43:10.970
components, in the end,
are web components.

00:43:10.970 --> 00:43:15.230
So that means they're going to
become, essentially, a tag in

00:43:15.230 --> 00:43:15.790
your system.

00:43:15.790 --> 00:43:18.215
So you can then use this
tag somewhere else.

00:43:18.215 --> 00:43:20.600
And you don't have to, in that
older part of the [? AR ?]

00:43:20.600 --> 00:43:22.720
code, be using this sort
of technology of

00:43:22.720 --> 00:43:24.480
Web Components itself.

00:43:24.480 --> 00:43:27.510
So this sounds like
a neat tradeoff.

00:43:27.510 --> 00:43:29.530
JOHN MESSERLY: Yeah, that's a
really good point, actually.

00:43:29.530 --> 00:43:31.600
All of this is about
facilitating--

00:43:31.600 --> 00:43:33.590
and then this is another
point of why you put

00:43:33.590 --> 00:43:33.970
stuff in the browser.

00:43:33.970 --> 00:43:35.890
We want to make it
so that this base

00:43:35.890 --> 00:43:37.515
functionality is there.

00:43:37.515 --> 00:43:39.050
And people who are developing
different

00:43:39.050 --> 00:43:41.120
components can share them.

00:43:41.120 --> 00:43:43.890
What a concept, developers
sharing libraries.

00:43:43.890 --> 00:43:46.180
So I think that will be good.

00:43:46.180 --> 00:43:47.580
And then we're totally--

00:43:47.580 --> 00:43:49.540
right now, we're completely
server agnostic.

00:43:49.540 --> 00:43:51.830
Use this with your Rail server,
use this with your

00:43:51.830 --> 00:43:53.540
Jenga server if you're Python.

00:43:53.540 --> 00:43:57.530
Use it with anything
you want, really.

00:43:57.530 --> 00:43:59.770
We may eventually think about--
people have asked us,

00:43:59.770 --> 00:44:02.160
well, what if I [? wrap my ?]
server Dart?

00:44:02.160 --> 00:44:05.220
And we may do something there,
but it's just very early.

00:44:05.220 --> 00:44:07.960
We haven't really thought much
about that yet, other than

00:44:07.960 --> 00:44:09.320
kind of vague ideas.

00:44:09.320 --> 00:44:11.320
But whatever we do there, we're
going to keep it working

00:44:11.320 --> 00:44:12.330
with every server.

00:44:12.330 --> 00:44:14.400
And then another difference that
I'll go into a little bit

00:44:14.400 --> 00:44:17.670
more on the next few slides
is that we have very

00:44:17.670 --> 00:44:18.930
little magic in models.

00:44:18.930 --> 00:44:21.300
Almost all of these ones, if you
look at them, you have to

00:44:21.300 --> 00:44:23.220
do something a little bit
special, some special

00:44:23.220 --> 00:44:25.710
controller type that
you have to extend.

00:44:25.710 --> 00:44:28.430
And we're trying to keep the
magic there to a minimum so

00:44:28.430 --> 00:44:31.510
you're just using
Dart classes.

00:44:31.510 --> 00:44:33.230
So I don't know if you want to
talk about the data binding

00:44:33.230 --> 00:44:34.060
performance.

00:44:34.060 --> 00:44:36.204
SIGGI CHEREM: Sure.

00:44:36.204 --> 00:44:39.240
Part of the reason that we
really wanted to keep things

00:44:39.240 --> 00:44:42.075
simple is that in the end, we
just want to be able to use

00:44:42.075 --> 00:44:44.170
plain Dart objects in order to
write your models so that

00:44:44.170 --> 00:44:47.110
everything plays nicely with
the rest of your system.

00:44:47.110 --> 00:44:49.380
And that's something that we'd
really like to preserve.

00:44:49.380 --> 00:44:52.010
Right now, we're doing things in
a way that, actually, there

00:44:52.010 --> 00:44:55.420
is some cost associated with
that, in that we have to do

00:44:55.420 --> 00:44:57.870
essentially some form of dirty
checking whenever you change

00:44:57.870 --> 00:45:00.747
your model to make sure that
we have to update the UI or

00:45:00.747 --> 00:45:02.210
not later on.

00:45:02.210 --> 00:45:04.360
And the cost is sort of
proportional to the number of

00:45:04.360 --> 00:45:06.470
data bindings you have
on the screen.

00:45:06.470 --> 00:45:09.770
So some people worry that, well,
what if I have lots of

00:45:09.770 --> 00:45:10.770
things on my screen?

00:45:10.770 --> 00:45:11.710
That will be too expensive.

00:45:11.710 --> 00:45:12.520
JOHN MESSERLY: Thousands.

00:45:12.520 --> 00:45:13.710
SIGGI CHEREM: Thousand
of elements.

00:45:13.710 --> 00:45:16.860
So then, if you do that, there
are still actually

00:45:16.860 --> 00:45:19.510
opportunities to make
things faster.

00:45:19.510 --> 00:45:21.750
And there are many actual
directions that we're

00:45:21.750 --> 00:45:22.130
considering.

00:45:22.130 --> 00:45:24.930
And we might explore
many of them.

00:45:24.930 --> 00:45:28.870
So one of them is what really
needs to be on screen versus

00:45:28.870 --> 00:45:30.790
what needs to be bound.

00:45:30.790 --> 00:45:33.690
There's a little bit of tension
there, is that if you

00:45:33.690 --> 00:45:36.080
have a table of 1,000 elements,
most likely the

00:45:36.080 --> 00:45:38.370
thousand elements are
not visible at once.

00:45:38.370 --> 00:45:41.050
It's more like you have a window
of them visible, and

00:45:41.050 --> 00:45:43.590
then you want to render a
bigger table underneath.

00:45:43.590 --> 00:45:45.200
So you can actually
create smart

00:45:45.200 --> 00:45:48.050
components that know that.

00:45:48.050 --> 00:45:51.850
And typical things that are
components that we've seen

00:45:51.850 --> 00:45:53.710
them done in the past have
been like an infinite

00:45:53.710 --> 00:45:56.800
scrolling list where you don't
know how much data is coming

00:45:56.800 --> 00:45:57.950
and you keep scrolling
and scrolling.

00:45:57.950 --> 00:46:00.780
And then you just are watching
for changes on the things that

00:46:00.780 --> 00:46:03.780
are visible at a given moment.

00:46:03.780 --> 00:46:08.870
And then there are things that
we can also consider.

00:46:08.870 --> 00:46:10.150
Object [? upstart, ?] for
example, is something that's

00:46:10.150 --> 00:46:13.280
been proposed in EcmaScript 6
so that there will be more

00:46:13.280 --> 00:46:14.860
needed support to
observe objects.

00:46:14.860 --> 00:46:17.136
And then we can actually take
advantage of that when we're

00:46:17.136 --> 00:46:19.104
compiling to JavaScript.

00:46:19.104 --> 00:46:21.240
JOHN MESSERLY: Exactly.

00:46:21.240 --> 00:46:23.560
SIGGI CHEREM: But a third is,
since we have a compiler in

00:46:23.560 --> 00:46:26.830
the picture, so far we've been
mostly processing the HTML

00:46:26.830 --> 00:46:27.420
side of things.

00:46:27.420 --> 00:46:30.600
But we can also process the Dart
side of things and make

00:46:30.600 --> 00:46:33.020
classes with a special
annotation or have some

00:46:33.020 --> 00:46:35.390
special types that allows to
then make them observable and

00:46:35.390 --> 00:46:37.790
be more proactive.

00:46:37.790 --> 00:46:39.260
Instead of doing dirty checking,
we just know

00:46:39.260 --> 00:46:41.210
whenever something is mutated.

00:46:41.210 --> 00:46:43.540
JOHN MESSERLY: And the next
couple slides basically show--

00:46:43.540 --> 00:46:47.470
here's your model right
now, plain Dart class.

00:46:47.470 --> 00:46:48.320
Very simple, right?

00:46:48.320 --> 00:46:51.030
If you've programmed any Dart,
nothing surprising here.

00:46:51.030 --> 00:46:52.650
And then, what does it look
like with these observable

00:46:52.650 --> 00:46:53.460
annotations?

00:46:53.460 --> 00:46:57.400
And I really hope that it ends
up exactly as lightweight as

00:46:57.400 --> 00:47:02.420
this, because I think this is
a good programming model.

00:47:02.420 --> 00:47:05.550
But we don't have that now.

00:47:05.550 --> 00:47:08.135
So it's a good point to make,
that that's a future thing.

00:47:08.135 --> 00:47:08.580
DIMITRI GLAZKOV: Oh, yeah.

00:47:08.580 --> 00:47:09.590
That doesn't exist yet.

00:47:09.590 --> 00:47:10.110
JOHN MESSERLY: Yeah.

00:47:10.110 --> 00:47:13.750
That's something we're
going to look at.

00:47:13.750 --> 00:47:16.520
SIGGI CHEREM: So basically,
that's what we had in the

00:47:16.520 --> 00:47:17.150
presentation.

00:47:17.150 --> 00:47:19.650
We put up here some
links at the end.

00:47:19.650 --> 00:47:21.370
And they're very discoverable.

00:47:21.370 --> 00:47:25.270
But we have article an
explaining article with lots

00:47:25.270 --> 00:47:26.000
of examples.

00:47:26.000 --> 00:47:28.930
And if you land in that page,
there are links to a more

00:47:28.930 --> 00:47:31.730
formal specification of what are
the features available in

00:47:31.730 --> 00:47:34.620
our web components, a table
summary of all those features

00:47:34.620 --> 00:47:37.510
so you can have a quick
reference, and the links that

00:47:37.510 --> 00:47:40.770
were project based and a
[INAUDIBLE] tracker.

00:47:40.770 --> 00:47:41.440
JJ BEHRENS: Yeah.

00:47:41.440 --> 00:47:45.230
And I know Seth Ladd has been
blogging some really nice blog

00:47:45.230 --> 00:47:47.600
posts about Web Components
on his blog.

00:47:47.600 --> 00:47:49.720
And those really helped
me as well.

00:47:49.720 --> 00:47:52.580
And I'm going to be coming out
with a code lab, so you could

00:47:52.580 --> 00:47:53.990
learn how to build
your first app.

00:47:53.990 --> 00:47:56.790
So that'll be pretty exciting.

00:47:56.790 --> 00:47:58.940
So we have a few questions.

00:47:58.940 --> 00:48:00.100
Let's go over these
real quick.

00:48:00.100 --> 00:48:02.790
We have a few minutes left.

00:48:02.790 --> 00:48:05.740
So is it possible to use
Google Closure Advanced

00:48:05.740 --> 00:48:08.710
Compilation on the compiled
results of a Dart project with

00:48:08.710 --> 00:48:11.050
Web Components, or can
the renaming of

00:48:11.050 --> 00:48:12.713
properties cause problems?

00:48:15.370 --> 00:48:18.380
JJ BEHRENS: So I would say
it's not necessary.

00:48:18.380 --> 00:48:20.900
Dart is its own Closure
Compiler.

00:48:20.900 --> 00:48:23.670
It does tree shaking and dead
code removal automatically.

00:48:23.670 --> 00:48:25.370
What do you think?

00:48:25.370 --> 00:48:26.560
SIGGI CHEREM: Yeah.

00:48:26.560 --> 00:48:29.080
And I think this might be a
more general question of

00:48:29.080 --> 00:48:30.330
generally in Dart code.

00:48:32.610 --> 00:48:35.490
The JavaScript code that is
generated by Dart to JS is a

00:48:35.490 --> 00:48:37.210
minimal [? minification. ?]

00:48:37.210 --> 00:48:40.960
Now, one of the things that we
notice is that we have a lot

00:48:40.960 --> 00:48:43.270
of type information that is very
rich at the Dart level

00:48:43.270 --> 00:48:46.740
that can be used to minify
things a bit more aggressively

00:48:46.740 --> 00:48:48.230
than what you can do, for
example, with a composure

00:48:48.230 --> 00:48:53.380
compiler, where it has a
little bit more of a--

00:48:53.380 --> 00:48:57.970
I guess if there's a lot of
similarities in the type

00:48:57.970 --> 00:49:00.220
system of both, because they
give you still similar

00:49:00.220 --> 00:49:02.480
opportunities, but--

00:49:02.480 --> 00:49:04.070
JOHN MESSERLY: So actually,
they've recently added the

00:49:04.070 --> 00:49:06.450
minify option to Dart JS.

00:49:06.450 --> 00:49:09.100
And yeah, we looked
at this before.

00:49:09.100 --> 00:49:12.100
Actually, I think maybe when we
came out about a year ago

00:49:12.100 --> 00:49:16.270
with Dart publicly that there
was some problems with trying

00:49:16.270 --> 00:49:19.270
to use Closure Compiler as the
optimization strategy, because

00:49:19.270 --> 00:49:20.770
you're just throwing away
too much information.

00:49:20.770 --> 00:49:22.080
And you have to figure
it all out again.

00:49:22.080 --> 00:49:24.300
And we'll do something
good in Dart to JS.

00:49:24.300 --> 00:49:26.070
I think that's a much
better way.

00:49:26.070 --> 00:49:26.390
JJ BEHRENS: OK.

00:49:26.390 --> 00:49:28.990
So let's say I have a bunch of
content that I want indexed by

00:49:28.990 --> 00:49:30.010
a search engine.

00:49:30.010 --> 00:49:32.580
How could I use Web Components
to present the content while

00:49:32.580 --> 00:49:35.630
still being search
engine friendly?

00:49:35.630 --> 00:49:38.370
SIGGI CHEREM: Well, so that's
definitely something that we

00:49:38.370 --> 00:49:39.180
have on the roadmap.

00:49:39.180 --> 00:49:43.120
So all the code that we're
generating is--

00:49:43.120 --> 00:49:47.240
right now, actually,
essentially, we should be able

00:49:47.240 --> 00:49:49.720
to run some of this code on
the server side as well.

00:49:49.720 --> 00:49:51.930
So basically, we have
a full [INAUDIBLE]

00:49:51.930 --> 00:49:52.970
five part [? server ?]

00:49:52.970 --> 00:49:55.780
that allows to then be able to
process all this and then be

00:49:55.780 --> 00:49:58.290
able to generate the actual code
that you want the servers

00:49:58.290 --> 00:50:03.610
to then say, this is what
you should index.

00:50:03.610 --> 00:50:06.630
Now, we're not trying to go to
the full length of saying

00:50:06.630 --> 00:50:08.720
we're going to render in the
server so that you bind the

00:50:08.720 --> 00:50:10.970
rendering in your client.

00:50:10.970 --> 00:50:13.240
This is a separate
feature just for

00:50:13.240 --> 00:50:15.370
that particular purpose.

00:50:15.370 --> 00:50:17.580
Yeah, so you can basically just
generate a static HTML

00:50:17.580 --> 00:50:19.450
page against some--

00:50:19.450 --> 00:50:21.830
you have to make the mock model,
of course, like what's

00:50:21.830 --> 00:50:24.730
your data look like, that you
want a search engine to see.

00:50:24.730 --> 00:50:27.190
But you'll just be able
to run it against--

00:50:27.190 --> 00:50:29.620
JJ BEHRENS: And I
would say that--

00:50:29.620 --> 00:50:33.440
I can neither confirm nor deny
anything, but I have seen

00:50:33.440 --> 00:50:36.740
reports on the web that say it
is not safe to assume that

00:50:36.740 --> 00:50:40.615
your search engine does not
understand JavaScript at all.

00:50:40.615 --> 00:50:43.680
JOHN MESSERLY: True, true.

00:50:43.680 --> 00:50:46.060
JJ BEHRENS: So will it be
possible to organize HTML and

00:50:46.060 --> 00:50:48.310
Dart parts of Web Component
into separate files?

00:50:48.310 --> 00:50:49.230
I think we answered that.

00:50:49.230 --> 00:50:51.660
Is there are already a place
where people share their Web

00:50:51.660 --> 00:50:54.370
Components, or are their plans
to have a public library of

00:50:54.370 --> 00:50:56.770
common Web Components?

00:50:56.770 --> 00:50:57.440
JOHN MESSERLY: Put
them on Pub.

00:50:57.440 --> 00:50:58.300
JJ BEHRENS: Put them on Pub.

00:50:58.300 --> 00:51:00.520
That's a good idea.

00:51:00.520 --> 00:51:02.120
SIGGI CHEREM: That's something
that, just as a warning, it

00:51:02.120 --> 00:51:04.400
doesn't work today.

00:51:04.400 --> 00:51:05.810
But it will.

00:51:05.810 --> 00:51:06.740
It's part of our goals.

00:51:06.740 --> 00:51:07.430
We want to make it--

00:51:07.430 --> 00:51:09.660
JOHN MESSERLY: It's
an M2 bug, right?

00:51:09.660 --> 00:51:11.450
SIGGI CHEREM: We have
plans to fix that.

00:51:11.450 --> 00:51:14.520
JJ BEHRENS: It's going
to happen.

00:51:14.520 --> 00:51:17.400
And then, how do Web Components
compare to popular

00:51:17.400 --> 00:51:18.830
Angular JS frameworks?

00:51:18.830 --> 00:51:20.040
So I know that Dimitri

00:51:20.040 --> 00:51:21.820
personally solved this earlier.

00:51:21.820 --> 00:51:24.980
Do you guys have any things to
add to that from kind of a

00:51:24.980 --> 00:51:26.230
Dart perspective?

00:51:28.990 --> 00:51:32.770
How much are we inspired
by the Angular JS guys?

00:51:32.770 --> 00:51:34.850
JOHN MESSERLY: A lot.

00:51:34.850 --> 00:51:36.830
We've already been talking to
them for quite a while, and I

00:51:36.830 --> 00:51:41.390
think we're going to basically
continue that, because they

00:51:41.390 --> 00:51:44.690
just have so much experience
in real world applications

00:51:44.690 --> 00:51:49.070
that are using Angular JS,
and even at scale.

00:51:49.070 --> 00:51:52.150
So I think that there's just a
lot we can learn from them.

00:51:52.150 --> 00:51:53.400
JJ BEHRENS: Absolutely.

00:51:56.620 --> 00:51:58.590
So what's the lifetime
of a Web Component?

00:51:58.590 --> 00:52:01.380
Is it entirely unloaded,
just removing the

00:52:01.380 --> 00:52:02.200
node from the DOM?

00:52:02.200 --> 00:52:03.810
If not, what is the
best practice to

00:52:03.810 --> 00:52:06.710
manage memory with them?

00:52:06.710 --> 00:52:09.050
JOHN MESSERLY: That's
a great question.

00:52:09.050 --> 00:52:11.210
SIGGI CHEREM: So one thing
that we didn't talk much

00:52:11.210 --> 00:52:13.290
today, but essentially, Web
Components have the notion of

00:52:13.290 --> 00:52:15.090
a life cycle.

00:52:15.090 --> 00:52:18.790
And currently, every component
has essentially four

00:52:18.790 --> 00:52:19.950
methods that are--

00:52:19.950 --> 00:52:21.000
or three--

00:52:21.000 --> 00:52:23.110
three methods that
are being called.

00:52:23.110 --> 00:52:24.570
There's a [? own ?]
created event.

00:52:24.570 --> 00:52:28.190
There's a insert it
and remove event.

00:52:28.190 --> 00:52:32.190
The idea is that any cleanup
that you need to do, basically

00:52:32.190 --> 00:52:35.280
you should do it when you're
doing the remove method or

00:52:35.280 --> 00:52:38.600
remove lifecycle method
of a component.

00:52:38.600 --> 00:52:40.590
But yeah, I don't know
if you want to add

00:52:40.590 --> 00:52:41.870
something about that.

00:52:41.870 --> 00:52:43.170
JOHN MESSERLY: Yeah.

00:52:43.170 --> 00:52:45.480
It's basically like--

00:52:45.480 --> 00:52:47.970
if the component was created--
if you're writing the

00:52:47.970 --> 00:52:50.580
component instantiation in HTML,
like if you're writing a

00:52:50.580 --> 00:52:55.490
tag, especially if you put it
inside a template, then we

00:52:55.490 --> 00:52:57.270
have the capability of doing
the cleanup completely

00:52:57.270 --> 00:52:57.940
automatically.

00:52:57.940 --> 00:52:59.340
And that's one of
the benefits.

00:52:59.340 --> 00:53:01.410
There's nothing you can
get wrong there.

00:53:05.250 --> 00:53:08.890
If you're creating in code,
as a limitation right now,

00:53:08.890 --> 00:53:11.820
because we can't extend actual
DOM elements, you are going to

00:53:11.820 --> 00:53:15.310
have to call removed and
tell us that you're

00:53:15.310 --> 00:53:16.540
removing the things.

00:53:16.540 --> 00:53:18.440
But that's a limitation
that we're going

00:53:18.440 --> 00:53:19.910
to lift pretty soon.

00:53:19.910 --> 00:53:23.730
It's just the state of things
as they are now.

00:53:23.730 --> 00:53:25.740
It's basically like the state
of things right now is it's

00:53:25.740 --> 00:53:30.340
going to be much more automatic
and managed for you

00:53:30.340 --> 00:53:32.630
if you're able to use templates,
and if you're able

00:53:32.630 --> 00:53:38.270
to keep your component
instantiations in the HTML.

00:53:38.270 --> 00:53:42.660
JJ BEHRENS: So I have
one more question.

00:53:42.660 --> 00:53:44.870
Let's look out into the distant
future, because I like

00:53:44.870 --> 00:53:47.770
to try to pretend like
I'm able to do that.

00:53:47.770 --> 00:53:51.680
One thing that's really good
about, let's say, the Gmail

00:53:51.680 --> 00:53:57.060
client on Android, is that it
synchronizes your mail.

00:53:57.060 --> 00:53:59.280
And then you could be on an
airplane with no internet

00:53:59.280 --> 00:54:02.190
connection reading and
responding to email.

00:54:02.190 --> 00:54:03.600
And then when you get
connection again,

00:54:03.600 --> 00:54:04.995
it sends the email.

00:54:04.995 --> 00:54:08.230
Do you think we'll get to a
point in our frameworks where

00:54:08.230 --> 00:54:13.350
we have some framework concept
of dealing with local storage

00:54:13.350 --> 00:54:16.090
and synchronizing
with the server?

00:54:16.090 --> 00:54:21.060
And do you think that Web
Components and MDV are just

00:54:21.060 --> 00:54:24.314
one step along that path?

00:54:24.314 --> 00:54:27.520
SIGGI CHEREM: Yeah, I think--

00:54:27.520 --> 00:54:30.410
there's an architectural
question there, and then

00:54:30.410 --> 00:54:33.200
there's also the part of, OK,
there's a lot of pieces that

00:54:33.200 --> 00:54:35.615
would need to be there in
order for it to work.

00:54:35.615 --> 00:54:39.210
So handling synchronization in
the background and handling

00:54:39.210 --> 00:54:42.730
offline is something that by
itself is already a challenge

00:54:42.730 --> 00:54:44.280
of just, how do you manipulate
data from

00:54:44.280 --> 00:54:46.010
one side to the other?

00:54:46.010 --> 00:54:48.910
And then you have, how do you
present that data in your UI?

00:54:48.910 --> 00:54:51.120
So this is where the triangle
that we talked about earlier

00:54:51.120 --> 00:54:54.340
actually comes into play really
nicely, is that if you

00:54:54.340 --> 00:54:57.150
make sure that most of your UI
reacts to changes in your

00:54:57.150 --> 00:55:00.510
data, then planning a system
that is doing synchronization

00:55:00.510 --> 00:55:02.010
in the background
is very easy.

00:55:02.010 --> 00:55:05.530
All you're doing is pushing
those data changes as events.

00:55:05.530 --> 00:55:07.850
And then those events are
watched by the UI.

00:55:07.850 --> 00:55:10.070
And then you have that
UI reflecting all

00:55:10.070 --> 00:55:13.720
those changes out.

00:55:13.720 --> 00:55:16.920
But yeah, these are things
that are really

00:55:16.920 --> 00:55:17.820
exciting to work on.

00:55:17.820 --> 00:55:19.975
And I think that there's
a lot of--

00:55:19.975 --> 00:55:22.520
we can even set this under this
big umbrella of how do we

00:55:22.520 --> 00:55:23.630
solve all of these
UI problems.

00:55:23.630 --> 00:55:26.840
I think that that would be one
task that definitely needs to

00:55:26.840 --> 00:55:27.470
be tackled.

00:55:27.470 --> 00:55:30.030
And it would be cool
to look into it.

00:55:30.030 --> 00:55:30.596
JOHN MESSERLY: Yeah.

00:55:30.596 --> 00:55:32.220
JJ BEHRENS: OK.

00:55:32.220 --> 00:55:34.610
Guys, thank you so much
for taking the time.

00:55:34.610 --> 00:55:37.490
I know that we have a few
questions left, but we're

00:55:37.490 --> 00:55:40.660
running out of time and we'll
answer those offline.

00:55:40.660 --> 00:55:43.940
Thanks again from sunny
Seattle from joining.

00:55:43.940 --> 00:55:46.660
And thank you guys
all for watching.

00:55:46.660 --> 00:55:49.130
And stay tuned for the next
episode of Dartisans.

