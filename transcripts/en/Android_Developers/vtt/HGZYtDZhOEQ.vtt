WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.844
[MUSIC PLAYING]

00:00:08.536 --> 00:00:09.660
NATE FISCHER: Hi, everyone.

00:00:09.660 --> 00:00:10.460
My name's Nate.

00:00:10.460 --> 00:00:12.210
And I'm here from
the WebView team.

00:00:12.210 --> 00:00:16.520
And I'd like to talk about some
modern WebView best practices--

00:00:16.520 --> 00:00:19.290
or as I like to call it,
using WebView like it's

00:00:19.290 --> 00:00:23.410
2018, because it is.

00:00:23.410 --> 00:00:26.780
So before I dive into
what's modern with WebView,

00:00:26.780 --> 00:00:29.500
let's talk a little
bit about what's old.

00:00:29.500 --> 00:00:32.210
So WebView's been around
since the very beginning.

00:00:32.210 --> 00:00:35.060
It was added back
in API level 1.

00:00:35.060 --> 00:00:38.110
And it changed in a significant
way starting with Lollipop.

00:00:38.110 --> 00:00:41.330
It became updatable--
the implementation was.

00:00:41.330 --> 00:00:43.280
And this was great,
because it meant

00:00:43.280 --> 00:00:46.580
that users could benefit from
security fixes and bug fixes.

00:00:46.580 --> 00:00:50.130
It would update every six
weeks just like your browser.

00:00:50.130 --> 00:00:51.800
But a lot has changed
since then, too.

00:00:51.800 --> 00:00:56.240
We've added 40 new APIs
just to make it easier

00:00:56.240 --> 00:00:57.290
to work with WebView--

00:00:57.290 --> 00:00:58.310
to help developers.

00:01:00.890 --> 00:01:03.130
OK, but what's really changed?

00:01:03.130 --> 00:01:04.980
Well, when we look
out at the ecosystem,

00:01:04.980 --> 00:01:07.680
it seems like apps are kind
of using WebView the same way

00:01:07.680 --> 00:01:09.520
they've always used it.

00:01:09.520 --> 00:01:13.140
And when you look
at Stack Overflow,

00:01:13.140 --> 00:01:15.210
the answers are
outdated at best.

00:01:15.210 --> 00:01:16.860
They certainly aren't
best practices.

00:01:16.860 --> 00:01:20.230
And oftentimes,
they're just wrong.

00:01:20.230 --> 00:01:22.350
But some of the blame is
on our shoulders, too.

00:01:22.350 --> 00:01:25.260
Our API docs are written
like it's still API level 1.

00:01:25.260 --> 00:01:28.602
And everything has
changed since then.

00:01:28.602 --> 00:01:32.920
So something that we did is
we looked over the past year.

00:01:32.920 --> 00:01:35.060
And we looked out at
the Android ecosystem.

00:01:35.060 --> 00:01:37.900
And we looked at the devices
that are out there today.

00:01:37.900 --> 00:01:40.360
And what we found is
that, although we added--

00:01:40.360 --> 00:01:43.990
for example, on Nougat, we
added all these great APIs.

00:01:43.990 --> 00:01:46.270
A lot of apps can't really
take advantage of them,

00:01:46.270 --> 00:01:48.820
because they only run
on the Nougat devices.

00:01:48.820 --> 00:01:51.950
And that's less than
50% of devices today.

00:01:51.950 --> 00:01:54.980
And it's been over two
years since it came out.

00:01:54.980 --> 00:01:58.634
But what we also saw is
that almost 90% of devices

00:01:58.634 --> 00:02:00.550
are running Lollipop,
which means that they're

00:02:00.550 --> 00:02:02.110
taking WebView updates.

00:02:02.110 --> 00:02:05.110
And it means that this WebView
implementation on the device

00:02:05.110 --> 00:02:08.110
actually implements
all these new APIs.

00:02:08.110 --> 00:02:12.010
They just aren't exposed
on older platform levels.

00:02:12.010 --> 00:02:15.350
So we thought, can we do better?

00:02:15.350 --> 00:02:20.280
So over the past year, we
worked on our AndroidX library.

00:02:20.280 --> 00:02:21.840
We launched a new
AndroidX library.

00:02:21.840 --> 00:02:23.407
And we're pretty
excited about it.

00:02:23.407 --> 00:02:24.990
And the basic idea
is that we're going

00:02:24.990 --> 00:02:28.260
to bring all these
brand-new developer APIs,

00:02:28.260 --> 00:02:29.700
but we're going
to try to give you

00:02:29.700 --> 00:02:31.170
the device coverage you need.

00:02:31.170 --> 00:02:33.312
And we're going to support
Lollipop and above.

00:02:33.312 --> 00:02:35.520
We're going to do this by
leveraging WebView's update

00:02:35.520 --> 00:02:36.850
cycle.

00:02:36.850 --> 00:02:39.270
But we also spent a lot
of time on this library

00:02:39.270 --> 00:02:41.170
to make sure it's really usable.

00:02:41.170 --> 00:02:43.830
You can actually use these
APIs to do productive things.

00:02:43.830 --> 00:02:46.740
So we designed them to be fairly
straightforward to swap out

00:02:46.740 --> 00:02:50.060
from the frameworks APIs.

00:02:50.060 --> 00:02:51.440
So this all sounds fine.

00:02:51.440 --> 00:02:56.290
But how can we actually use
this to make your apps better?

00:02:56.290 --> 00:02:58.200
So let's take an example.

00:02:58.200 --> 00:03:00.110
Since the very
beginning of Android,

00:03:00.110 --> 00:03:03.530
we've given apps a lot
of power to customize

00:03:03.530 --> 00:03:05.090
WebView's behavior.

00:03:05.090 --> 00:03:07.730
And in particular, we
added a callback called

00:03:07.730 --> 00:03:09.320
shouldOverrideURLLoading.

00:03:09.320 --> 00:03:10.880
And the idea behind
this callback

00:03:10.880 --> 00:03:15.120
is that you could choose
to, for certain navigations,

00:03:15.120 --> 00:03:17.390
cancel these in the
WebView, and dispatch them

00:03:17.390 --> 00:03:20.260
to a different app, instead,
as an Android intent.

00:03:20.260 --> 00:03:23.960
So the example is you
might have YouTube URL.

00:03:23.960 --> 00:03:27.276
But that might be better
suited in the YouTube app.

00:03:27.276 --> 00:03:28.430
And this sounds great.

00:03:28.430 --> 00:03:30.550
A lot of apps took
advantage of this, actually.

00:03:30.550 --> 00:03:32.510
But there was a
problem with the API.

00:03:32.510 --> 00:03:34.680
We didn't get it
right the first time.

00:03:34.680 --> 00:03:37.690
The issues that JavaScript
can trigger navigations.

00:03:37.690 --> 00:03:39.140
And what we found
is that there's

00:03:39.140 --> 00:03:41.910
some malicious JavaScript
out in the wild

00:03:41.910 --> 00:03:45.120
which actually tries to
exploit this app behavior.

00:03:45.120 --> 00:03:47.870
And from the user's
perspective, they

00:03:47.870 --> 00:03:49.790
might be reading
some web content.

00:03:49.790 --> 00:03:53.540
And all of the sudden, without
necessarily their interaction,

00:03:53.540 --> 00:03:57.230
it starts opening up some new
Android app that they're not

00:03:57.230 --> 00:03:58.792
trying to open.

00:03:58.792 --> 00:04:01.210
So we actually already
fixed this issue.

00:04:01.210 --> 00:04:03.700
We fixed this back in Nougat.

00:04:03.700 --> 00:04:06.820
The idea is we exposed this
notion of user gesture.

00:04:06.820 --> 00:04:10.770
Did the user actually
trigger this navigation?

00:04:10.770 --> 00:04:13.360
And it actually worked
really, really well.

00:04:13.360 --> 00:04:16.180
But it only works on these
Nougat-and-above devices.

00:04:16.180 --> 00:04:21.151
And these before-Nougat
devices are still vulnerable.

00:04:21.151 --> 00:04:23.600
So we thought this was a great
candidate for our AndroidX

00:04:23.600 --> 00:04:24.620
library.

00:04:24.620 --> 00:04:26.890
The idea is we're going to
expose this user gesture,

00:04:26.890 --> 00:04:29.880
but we're going to do it all
the way back to Lollipop.

00:04:29.880 --> 00:04:32.630
And this means that
you get this device

00:04:32.630 --> 00:04:34.610
coverage for all these devices.

00:04:34.610 --> 00:04:37.820
And you can provide the safe
experience to your users.

00:04:37.820 --> 00:04:41.180
But we also made sure that this
would be really easy for apps

00:04:41.180 --> 00:04:41.860
to override.

00:04:41.860 --> 00:04:43.650
There'd be no confusion.

00:04:43.650 --> 00:04:45.780
So I think we succeeded.

00:04:45.780 --> 00:04:48.530
But let's take a
look at the code.

00:04:48.530 --> 00:04:52.790
So before Nougat, here's
what a lot of app's code

00:04:52.790 --> 00:04:54.270
might have looked like.

00:04:54.270 --> 00:04:56.780
We're overwriting-- should
override URL loading.

00:04:56.780 --> 00:04:58.610
We're setting a WebView client.

00:04:58.610 --> 00:05:02.630
And in the body of this, we
might be dispatching intents.

00:05:02.630 --> 00:05:04.630
And this is the insecure
version of the API.

00:05:04.630 --> 00:05:08.290
But back in those days, this
was the best we could do.

00:05:08.290 --> 00:05:11.870
Some of the better apps out
there when Nugget was released

00:05:11.870 --> 00:05:13.310
might have something like this.

00:05:13.310 --> 00:05:15.800
So you're overwriting the old
implementation from before.

00:05:15.800 --> 00:05:18.200
And this is for those
before-Nougat devices.

00:05:18.200 --> 00:05:22.300
But for the new devices, you
have this new implementation.

00:05:22.300 --> 00:05:24.290
And we're checking user gesture.

00:05:24.290 --> 00:05:29.980
And we're not launching intent
if we don't have user gesture.

00:05:29.980 --> 00:05:31.280
So this seems great.

00:05:31.280 --> 00:05:34.070
But it only runs on a
small number of devices--

00:05:34.070 --> 00:05:37.980
even today, only 50%.

00:05:37.980 --> 00:05:39.590
So here's how it
looks with AndroidX.

00:05:39.590 --> 00:05:41.460
And the first thing
I want to point out

00:05:41.460 --> 00:05:44.040
is that almost nothing
changed on this slide.

00:05:44.040 --> 00:05:45.540
And I think that's
really beautiful.

00:05:45.540 --> 00:05:47.123
It means all the
code that you already

00:05:47.123 --> 00:05:50.980
wrote to handle the
old framework APIs--

00:05:50.980 --> 00:05:53.160
that code's all the same.

00:05:53.160 --> 00:05:56.620
The only difference here is
that we're importing or WebView

00:05:56.620 --> 00:05:59.470
Client Compact class for
our AndroidX library.

00:05:59.470 --> 00:06:02.170
And we're setting
this compact client.

00:06:02.170 --> 00:06:04.840
And the idea here
is that, when you're

00:06:04.840 --> 00:06:07.750
using the compact client, all
these callbacks will get--

00:06:07.750 --> 00:06:09.840
instead of only invoked
on Nougat and above,

00:06:09.840 --> 00:06:13.244
they'll actually get invoked
all the way back to Lollipop.

00:06:13.244 --> 00:06:15.160
So you're going to get
the device coverage you

00:06:15.160 --> 00:06:18.730
need to provide your users a
safer experience without really

00:06:18.730 --> 00:06:21.530
changing a whole lot of code.

00:06:21.530 --> 00:06:24.990
This is just one example what
we have to offer in AndroidX.

00:06:24.990 --> 00:06:26.610
So I'd really like
to encourage you

00:06:26.610 --> 00:06:29.940
to go check it out,
and see how this can

00:06:29.940 --> 00:06:32.551
help you make your app better.

00:06:32.551 --> 00:06:34.050
We're giving you
the device coverage

00:06:34.050 --> 00:06:36.450
you need to actually
use these APIs.

00:06:36.450 --> 00:06:38.740
But we're going to have a
lot more APIs available.

00:06:38.740 --> 00:06:40.740
Some of these are going
to be small improvements

00:06:40.740 --> 00:06:43.030
on classic APIs,
like we've seen.

00:06:43.030 --> 00:06:45.270
But some are going to be
for entirely new features,

00:06:45.270 --> 00:06:47.460
like Safe Browsing.

00:06:47.460 --> 00:06:51.420
And the best part is that this
isn't some soon-to-be-released

00:06:51.420 --> 00:06:52.140
library.

00:06:52.140 --> 00:06:53.350
This is already out there.

00:06:53.350 --> 00:06:55.870
You can go home, and you
can add this into your apps.

00:06:55.870 --> 00:06:57.480
And it's ready to go.

00:06:57.480 --> 00:07:00.910
So you can try it
in our 1.0 release.

00:07:00.910 --> 00:07:04.640
Now I'd like to take a minute
and shift gears a little bit.

00:07:04.640 --> 00:07:06.880
So we've looked at
the AndroidX APIs.

00:07:06.880 --> 00:07:07.930
And these seem great.

00:07:07.930 --> 00:07:11.560
They're going to give us new
APIs with pretty good device

00:07:11.560 --> 00:07:13.930
coverage, almost 90%.

00:07:13.930 --> 00:07:18.020
But what about these APIs
that have been around forever?

00:07:18.020 --> 00:07:20.290
These have 100% device coverage.

00:07:20.290 --> 00:07:22.510
But some of them are
kind of hard to use.

00:07:22.510 --> 00:07:24.250
Even I struggle to
use them correctly,

00:07:24.250 --> 00:07:26.510
and I work on the team.

00:07:26.510 --> 00:07:30.840
So a common use case that we've
seen is loading in-app content.

00:07:30.840 --> 00:07:32.990
And the idea here
is that you want

00:07:32.990 --> 00:07:36.130
to display some content
in your application,

00:07:36.130 --> 00:07:39.070
but you don't necessarily want
to fetch it over the internet.

00:07:39.070 --> 00:07:41.570
You want to just compile
it right into your app.

00:07:41.570 --> 00:07:44.740
But you also want to continue
to build this content with web

00:07:44.740 --> 00:07:45.670
technology.

00:07:45.670 --> 00:07:48.920
You want to use HTML,
JavaScript, CSS.

00:07:48.920 --> 00:07:52.112
And WebView's had pretty
good support for this.

00:07:52.112 --> 00:07:54.930
In fact, we almost have
too much support for this.

00:07:54.930 --> 00:07:58.290
We have so many APIs that
it's hard to figure out

00:07:58.290 --> 00:08:01.620
which one is actually
the right thing to use.

00:08:01.620 --> 00:08:04.260
And some of them have
some weird gotchas that

00:08:04.260 --> 00:08:07.053
make them kind of hard to use.

00:08:07.053 --> 00:08:10.990
So I thought maybe we could take
a look at some of these APIs,

00:08:10.990 --> 00:08:13.600
and talk about what's
so tough about them,

00:08:13.600 --> 00:08:15.220
and recommend some
best practices.

00:08:15.220 --> 00:08:17.890
You don't have to start
from scratch with a new API.

00:08:17.890 --> 00:08:21.160
But you can tweak how
you're using these.

00:08:21.160 --> 00:08:24.280
So the first API we can
look at is loadData.

00:08:24.280 --> 00:08:26.560
And the basic idea here
is that this is going

00:08:26.560 --> 00:08:28.750
to accept some HTML content.

00:08:28.750 --> 00:08:30.940
It accepts it as a string.

00:08:30.940 --> 00:08:34.400
And it's supposed to
display this in the WebView.

00:08:34.400 --> 00:08:36.559
But one of the gotchas
is it doesn't really

00:08:36.559 --> 00:08:37.890
accept HTML content.

00:08:37.890 --> 00:08:40.280
It accepts encoded HTML content.

00:08:40.280 --> 00:08:43.520
The idea is you need to escape
some special characters.

00:08:43.520 --> 00:08:49.451
You replace them with a percent
sign and a code following it.

00:08:49.451 --> 00:08:51.380
And we call this
percent-encoding.

00:08:51.380 --> 00:08:54.610
And this is the default
configuration for the API.

00:08:54.610 --> 00:08:57.280
But there's actually
no framework API

00:08:57.280 --> 00:08:59.890
to do the
percent-encoding for you.

00:08:59.890 --> 00:09:01.330
It's kind of an oversight.

00:09:01.330 --> 00:09:06.187
But the end result is
that what we've seen

00:09:06.187 --> 00:09:07.770
is that developers
tend to actually do

00:09:07.770 --> 00:09:11.050
this percent-encoding
by hand themselves.

00:09:11.050 --> 00:09:13.200
And this is manual.

00:09:13.200 --> 00:09:15.450
It leads to bugs.

00:09:15.450 --> 00:09:17.340
And these bugs can have
significant impacts

00:09:17.340 --> 00:09:19.170
for your application.

00:09:19.170 --> 00:09:22.270
One small bug might
seem OK today,

00:09:22.270 --> 00:09:24.600
but it might break in
a future WebView update

00:09:24.600 --> 00:09:27.876
if you forget to encode
a particular character.

00:09:27.876 --> 00:09:30.580
The other issue with
loadData is this thing

00:09:30.580 --> 00:09:32.176
called an opaque origin.

00:09:32.176 --> 00:09:33.550
So when your
content gets loaded,

00:09:33.550 --> 00:09:35.680
it has what we call
an opaque origin.

00:09:35.680 --> 00:09:39.850
And this means that it's
going to fail all same origin

00:09:39.850 --> 00:09:41.742
checks in the web.

00:09:41.742 --> 00:09:43.450
And these same origin
checks are actually

00:09:43.450 --> 00:09:47.400
critical to providing
powerful web APIs securely.

00:09:47.400 --> 00:09:49.300
Without these same
origin checks,

00:09:49.300 --> 00:09:55.820
you can't use great APIs
like XML HTTP Request.

00:09:55.820 --> 00:09:59.180
So what can we do with this API?

00:09:59.180 --> 00:10:01.750
Well, first off,
we actually escaped

00:10:01.750 --> 00:10:04.800
some of these
encoding-related problems.

00:10:04.800 --> 00:10:08.600
It turns out this API has always
accepted an alternate encoding

00:10:08.600 --> 00:10:11.010
scheme called Base64.

00:10:11.010 --> 00:10:14.330
And this actually isn't that
special of an encoding scheme.

00:10:14.330 --> 00:10:15.800
It's just a different scheme.

00:10:15.800 --> 00:10:17.870
It's not necessarily better.

00:10:17.870 --> 00:10:20.420
But it's kind of nice,
because there's actually

00:10:20.420 --> 00:10:23.140
a framework API which will
do the encoding for you.

00:10:23.140 --> 00:10:24.780
And it does it correctly.

00:10:24.780 --> 00:10:25.300
Great.

00:10:25.300 --> 00:10:28.470
So there's
Base64.encodeToString.

00:10:28.470 --> 00:10:31.500
This will take the content,
and spit out the right answer.

00:10:31.500 --> 00:10:34.160
And frankly, the only
reason it's not documented

00:10:34.160 --> 00:10:37.940
is because this came out
in API level 8, which today

00:10:37.940 --> 00:10:41.697
is ancient history but was
still in the future at the time

00:10:41.697 --> 00:10:42.530
of writing loadData.

00:10:46.016 --> 00:10:49.280
But we can also take a look at
these same origin restrictions.

00:10:49.280 --> 00:10:52.130
So the way we recommend
to get around this

00:10:52.130 --> 00:10:55.220
is to use something called
loadDataWithBaseURL.

00:10:55.220 --> 00:10:57.340
And one of the nice
things about this--

00:10:57.340 --> 00:10:59.570
I think of it as a
feature, not a bug--

00:10:59.570 --> 00:11:03.020
is that it actually
accepts content as is.

00:11:03.020 --> 00:11:06.140
You can actually give it content
that's even totally un-encoded.

00:11:06.140 --> 00:11:08.720
You don't even have to
worry about the Base64 stuff

00:11:08.720 --> 00:11:11.186
if you use this API.

00:11:11.186 --> 00:11:13.130
The other really
nice thing about it

00:11:13.130 --> 00:11:15.890
is that it has this
thing called a baseURL.

00:11:15.890 --> 00:11:19.700
And although you're displaying
this HTML content you pass in

00:11:19.700 --> 00:11:24.050
as a string, the baseURL
configures this origin

00:11:24.050 --> 00:11:25.862
that it operates with.

00:11:25.862 --> 00:11:27.320
So you can control
which origin you

00:11:27.320 --> 00:11:30.860
get without disabling
important security settings

00:11:30.860 --> 00:11:32.180
just to make APIs work.

00:11:35.090 --> 00:11:38.940
So how do we actually
choose the right baseURL?

00:11:38.940 --> 00:11:42.120
So this is something that
even I struggle with when

00:11:42.120 --> 00:11:43.050
I try to use this API.

00:11:43.050 --> 00:11:45.090
I know it's the right
thing, but I actually

00:11:45.090 --> 00:11:48.270
don't know what the right
thing is to pass to it.

00:11:48.270 --> 00:11:51.420
So I actually thought, how
about we go through some

00:11:51.420 --> 00:11:53.597
of the common use cases?

00:11:53.597 --> 00:11:55.680
So something that we've
seen is that a lot of apps

00:11:55.680 --> 00:11:57.284
use cached content.

00:11:57.284 --> 00:11:58.950
This is content they
may have downloaded

00:11:58.950 --> 00:12:01.710
from the web over the internet.

00:12:01.710 --> 00:12:03.660
But they're saving it for later.

00:12:03.660 --> 00:12:06.900
And now when they show
it, they need to show it

00:12:06.900 --> 00:12:08.280
with the right baseURL.

00:12:08.280 --> 00:12:09.920
And the right URL
that you choose

00:12:09.920 --> 00:12:11.910
is just the original
URL that it came from.

00:12:11.910 --> 00:12:14.490
This guarantees that,
if it worked originally,

00:12:14.490 --> 00:12:16.410
it's going to have
the same exact origin.

00:12:16.410 --> 00:12:19.310
And all the APIs are
going to continue to work.

00:12:19.310 --> 00:12:21.720
The other use case
that we've noticed

00:12:21.720 --> 00:12:25.020
is that apps tend to ship their
own content, and display it

00:12:25.020 --> 00:12:28.480
this way, which is great.

00:12:28.480 --> 00:12:31.740
What we recommend is that you
choose a real internet-type

00:12:31.740 --> 00:12:33.240
URL--

00:12:33.240 --> 00:12:36.270
one of these HTTPS
or HTTP URLs--

00:12:36.270 --> 00:12:39.307
and it should use your
organization's real domain.

00:12:39.307 --> 00:12:40.890
And the reason for
this is so that you

00:12:40.890 --> 00:12:44.026
can import other resources
from your servers,

00:12:44.026 --> 00:12:45.900
and use them in this
content without worrying

00:12:45.900 --> 00:12:47.940
about any same origin checks.

00:12:47.940 --> 00:12:50.240
It'll all work.

00:12:50.240 --> 00:12:54.100
Then there's the question of,
well, do we use HTTPS or HTTP?

00:12:54.100 --> 00:12:56.240
So here's a little
rule of thumb.

00:12:56.240 --> 00:12:57.720
We always want to encourage--

00:12:57.720 --> 00:13:01.280
HTTPS is the secure protocol.

00:13:01.280 --> 00:13:06.590
But if you do need to
show insecure resources,

00:13:06.590 --> 00:13:09.740
we'd recommend that you use
the HTTP scheme, as opposed

00:13:09.740 --> 00:13:12.050
to disabling important
security settings just

00:13:12.050 --> 00:13:14.891
to get your app working.

00:13:14.891 --> 00:13:17.790
And as the last point,
I want to urge apps

00:13:17.790 --> 00:13:20.310
to avoid custom URL schemes.

00:13:20.310 --> 00:13:23.290
So this is something that
we've noticed has cropped up.

00:13:23.290 --> 00:13:26.830
Apps will make up their
own scheme, and use that.

00:13:26.830 --> 00:13:30.600
But the problem with this
is that the web standards

00:13:30.600 --> 00:13:32.710
don't really expect
custom URL schemes.

00:13:32.710 --> 00:13:34.770
So they're very vague
about how to handle this.

00:13:34.770 --> 00:13:36.570
And it turns out
that they wind up

00:13:36.570 --> 00:13:38.220
getting handled
very inconsistently.

00:13:38.220 --> 00:13:41.230
And this can lead to
surprising app breakage.

00:13:41.230 --> 00:13:44.444
So if you can stick to one
of the internet URL schemes,

00:13:44.444 --> 00:13:46.110
you're going to have
a much better time.

00:13:49.372 --> 00:13:54.690
So hopefully, I've
expressed that we really

00:13:54.690 --> 00:13:57.115
do care about developers
at the WebView team.

00:13:57.115 --> 00:13:58.740
And we're trying very
hard to make sure

00:13:58.740 --> 00:14:01.740
that you have powerful APIs that
have the device coverage you

00:14:01.740 --> 00:14:03.360
need, while also
paying attention

00:14:03.360 --> 00:14:05.580
to some of these old
APIs, and making sure

00:14:05.580 --> 00:14:08.550
that we explain how
these need to be used--

00:14:08.550 --> 00:14:11.430
making sure that
they're actually usable.

00:14:11.430 --> 00:14:14.580
If you have any questions,
me and my colleagues

00:14:14.580 --> 00:14:17.420
will be around for the rest
of today, as well as tomorrow.

00:14:17.420 --> 00:14:20.370
And we'd be more than happy to
talk to you about WebView usage

00:14:20.370 --> 00:14:23.560
and what you need
for your application.

00:14:23.560 --> 00:14:24.480
Thank you very much.

00:14:24.480 --> 00:14:27.230
[MUSIC PLAYING]

