WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.434
[APPLAUSE]

00:00:02.870 --> 00:00:03.970
PAOLO SOARES: OK.

00:00:03.970 --> 00:00:07.200
So I'm Paolo Soares, and
I'm a software engineer

00:00:07.200 --> 00:00:09.510
at the AdWords Express
team at Google.

00:00:09.510 --> 00:00:11.940
And today I wanted
to share with you

00:00:11.940 --> 00:00:15.740
how we got to share around
50% of our client code

00:00:15.740 --> 00:00:18.540
among the Flutter
and AngularDart apps.

00:00:18.540 --> 00:00:21.010
And yeah, it doesn't
seem like much,

00:00:21.010 --> 00:00:23.760
but I'm not including all
the Google infrastructure,

00:00:23.760 --> 00:00:26.450
because if I did that, I'll
get this crazy high number,

00:00:26.450 --> 00:00:28.540
and you'd not
believe me, so 50%.

00:00:32.490 --> 00:00:35.249
Google has a lot of
apps, and few of them

00:00:35.249 --> 00:00:36.540
you may not have heard of them.

00:00:36.540 --> 00:00:38.610
They are AdWords
and AdWords Express.

00:00:38.610 --> 00:00:40.160
Yes, there is an
AdWords Express,

00:00:40.160 --> 00:00:42.520
and yes, they are different.

00:00:42.520 --> 00:00:44.550
But they have some
things in common.

00:00:44.550 --> 00:00:48.420
And two of them are,
they make a lot of money.

00:00:48.420 --> 00:00:51.660
And the other thing is they
are built on AngularDart.

00:00:51.660 --> 00:00:56.160
And they also have Android
and iOS native apps,

00:00:56.160 --> 00:00:59.050
which means that we
have three code bases.

00:00:59.050 --> 00:01:00.022
Awesome.

00:01:00.022 --> 00:01:02.790
Awesome because I get to do
the same thing three times,

00:01:02.790 --> 00:01:06.570
every single time,
and hate myself a lot.

00:01:06.570 --> 00:01:10.750
So because we don't really
like hating ourselves,

00:01:10.750 --> 00:01:13.350
we are constantly trying
to find ways to share

00:01:13.350 --> 00:01:15.180
more code among those apps.

00:01:15.180 --> 00:01:17.750
And Flutter came out.

00:01:17.750 --> 00:01:19.500
And we were like,
this is awesome.

00:01:19.500 --> 00:01:23.670
This is awesome because
first, Flutter doesn't--

00:01:23.670 --> 00:01:27.090
OK, not going to use that word,
but Flutter is good instead not

00:01:27.090 --> 00:01:29.040
like Android and iOS.

00:01:29.040 --> 00:01:32.870
And it is an elegant,
efficient framework

00:01:32.870 --> 00:01:36.120
that will let us have a truly
single code base for iOS

00:01:36.120 --> 00:01:37.310
and [? native ?] apps.

00:01:37.310 --> 00:01:40.040
And because Flutter is within--

00:01:40.040 --> 00:01:43.170
you write Flutter
apps in Dart, we just

00:01:43.170 --> 00:01:45.180
happen to have these
gigantic [INAUDIBLE]

00:01:45.180 --> 00:01:47.340
lying around that
is within Dart.

00:01:47.340 --> 00:01:50.820
So I thought, hmm,
maybe all I need

00:01:50.820 --> 00:01:54.450
to do is import the model
from the Angular app

00:01:54.450 --> 00:01:56.190
and pass that to
the Flutter app,

00:01:56.190 --> 00:01:58.770
and go have a beer or
something, because I'll be done.

00:01:58.770 --> 00:02:03.580
But of course, that's
not the case at all.

00:02:03.580 --> 00:02:06.600
And that's not the case at
all for a lot of reasons,

00:02:06.600 --> 00:02:09.810
but the important
reasons are first,

00:02:09.810 --> 00:02:13.230
we cannot just import the
model, because in reality,

00:02:13.230 --> 00:02:15.750
the business logic is
all over the place.

00:02:15.750 --> 00:02:17.760
And we as software
engineers, we like

00:02:17.760 --> 00:02:19.820
to think that all
apps are like this.

00:02:19.820 --> 00:02:21.950
You have the UI,
you have the model,

00:02:21.950 --> 00:02:24.300
and they have clear boundaries,
and the interactions

00:02:24.300 --> 00:02:26.130
are simple and clear.

00:02:26.130 --> 00:02:31.380
But in reality, you
don't really have that.

00:02:31.380 --> 00:02:35.640
You may even start with
this, but over time, slowly

00:02:35.640 --> 00:02:37.890
but surely, you get this.

00:02:37.890 --> 00:02:42.900
And you may tell yourself, no,
that doesn't happen for me.

00:02:42.900 --> 00:02:46.170
Well, you go to the
AngularDart website

00:02:46.170 --> 00:02:48.960
and go to the getting started
tutorial, and you have this.

00:02:48.960 --> 00:02:51.780
This is the main ad component.

00:02:51.780 --> 00:02:53.080
It shows a list of heroes.

00:02:53.080 --> 00:02:55.077
And that's very simple, right?

00:02:55.077 --> 00:02:56.160
You have a list of heroes.

00:02:56.160 --> 00:02:57.076
You can select a hero.

00:02:57.076 --> 00:02:58.370
That's it.

00:02:58.370 --> 00:03:01.470
Well, there's a bunch of
business logic on this thing.

00:03:01.470 --> 00:03:05.040
The first thing is, it knows
how the heroes are fetched.

00:03:05.040 --> 00:03:07.570
It knows how many
heroes can be selected.

00:03:07.570 --> 00:03:09.630
Let's say I want
to change his app

00:03:09.630 --> 00:03:11.427
to select more than one hero.

00:03:11.427 --> 00:03:13.260
Now I have to change
the Angular application

00:03:13.260 --> 00:03:15.330
and I have to change
the Flutter application.

00:03:15.330 --> 00:03:18.000
And lastly, it knows that
to manually select a hero,

00:03:18.000 --> 00:03:20.910
you have to change the selected
hero, which sounds redundant,

00:03:20.910 --> 00:03:22.980
but it really isn't,
because in practice, you

00:03:22.980 --> 00:03:24.780
need to do more stuff, usually.

00:03:24.780 --> 00:03:28.230
So even this very simple
four line component

00:03:28.230 --> 00:03:29.220
has this problem.

00:03:29.220 --> 00:03:31.020
So yeah, you have no hope.

00:03:33.690 --> 00:03:36.480
Second thing is, remember
that infrastructure

00:03:36.480 --> 00:03:38.040
thing I talked about?

00:03:38.040 --> 00:03:41.730
It was written for
the AngularDart app.

00:03:41.730 --> 00:03:43.644
And because it was
written for web,

00:03:43.644 --> 00:03:45.060
it relies on a
bunch of stuff that

00:03:45.060 --> 00:03:46.490
is not available with Flutter.

00:03:46.490 --> 00:03:48.600
For example, like
the browser window

00:03:48.600 --> 00:03:50.910
to get the correct
location, or the JavaScript

00:03:50.910 --> 00:03:55.041
context to do some caching
or event [? pass. ?]

00:03:55.041 --> 00:03:56.640
And it doesn't seem like much.

00:03:56.640 --> 00:03:58.920
I mean, you could say
just rewrite those things

00:03:58.920 --> 00:04:00.770
and be good.

00:04:00.770 --> 00:04:07.170
But turns out that our
infrastructure is quite big,

00:04:07.170 --> 00:04:10.200
and it has a ton of stuff
that we actually want

00:04:10.200 --> 00:04:12.220
to use for many, many reasons.

00:04:12.220 --> 00:04:16.260
Among them, API clients, crash
and performance monitoring,

00:04:16.260 --> 00:04:19.570
activity tracking,
and some secret sauce.

00:04:19.570 --> 00:04:23.460
And if I want to launch
this thing before 2050,

00:04:23.460 --> 00:04:25.940
I should not be writing stuff.

00:04:25.940 --> 00:04:30.750
So OK, we can't just
use infrastructure.

00:04:30.750 --> 00:04:31.710
That's bad.

00:04:31.710 --> 00:04:34.080
And lastly, we can't
just import the model,

00:04:34.080 --> 00:04:36.780
because yes, Flutter is magic.

00:04:36.780 --> 00:04:37.880
But you know what?

00:04:37.880 --> 00:04:41.250
Angular is more magic.

00:04:41.250 --> 00:04:42.762
[APPLAUSE]

00:04:44.175 --> 00:04:48.349
And it all boils down
to state management.

00:04:48.349 --> 00:04:49.890
In AngularDart, you
don't really need

00:04:49.890 --> 00:04:52.470
to bother about what
happens when state changes.

00:04:52.470 --> 00:04:54.450
It magically, sort
of not really,

00:04:54.450 --> 00:04:56.550
it magically [INAUDIBLE]
update things for you.

00:04:56.550 --> 00:04:58.730
But Flutter tells
you, you know what?

00:04:58.730 --> 00:04:59.730
We need to be efficient.

00:04:59.730 --> 00:05:01.230
And if you want to
be efficient, you

00:05:01.230 --> 00:05:03.480
need to call set
state, basically.

00:05:03.480 --> 00:05:06.530
And again, the model
was implemented

00:05:06.530 --> 00:05:08.420
for AngularDart app.

00:05:08.420 --> 00:05:11.300
And that means that
whatever interface it has,

00:05:11.300 --> 00:05:13.590
it is not optimized
for this use case.

00:05:13.590 --> 00:05:17.300
So now I have to write adapters
to wrap the Angular model,

00:05:17.300 --> 00:05:20.180
and I'm going to have
this bloated Flutter app,

00:05:20.180 --> 00:05:21.920
and I'm going to
hate myself again.

00:05:21.920 --> 00:05:30.510
And this time it's going
to be my fault. On no.

00:05:30.510 --> 00:05:33.050
Hopes dashed.

00:05:33.050 --> 00:05:34.082
But hey.

00:05:34.082 --> 00:05:35.378
[LAUGHTER]

00:05:36.680 --> 00:05:38.340
Look on the bright side.

00:05:38.340 --> 00:05:39.920
We get to do some refactoring.

00:05:39.920 --> 00:05:43.230
And we as software engineers,
we love refactoring,

00:05:43.230 --> 00:05:45.110
because our code
is always awesome,

00:05:45.110 --> 00:05:47.840
and the other people's
code is not awesome.

00:05:47.840 --> 00:05:50.720
So by definition, when
I rewrite something,

00:05:50.720 --> 00:05:53.315
it's going to be better.

00:05:53.315 --> 00:05:54.800
[LAUGHTER]

00:05:56.070 --> 00:05:59.120
But we cannot rewrite
everything from scratch.

00:05:59.120 --> 00:06:04.130
So oh no, we have to live with
other people's code somehow.

00:06:04.130 --> 00:06:07.330
So what I am going to
do now is I'm going

00:06:07.330 --> 00:06:09.702
to go through the Flutter app.

00:06:09.702 --> 00:06:11.660
And I'm going to use
Flutter instead of Angular

00:06:11.660 --> 00:06:14.810
because set state.

00:06:14.810 --> 00:06:20.330
So whatever we do, it has to
be compatible with Flutter.

00:06:20.330 --> 00:06:22.697
And then let's see
what I have to do

00:06:22.697 --> 00:06:23.780
to get this thing working.

00:06:26.300 --> 00:06:30.070
And I make a mistake
of live coding.

00:06:30.070 --> 00:06:32.970
OK, so I have this
app called Purrveyor.

00:06:32.970 --> 00:06:35.440
Is a search engine for cats.

00:06:35.440 --> 00:06:38.360
It is a heavily untapped
market that we really

00:06:38.360 --> 00:06:41.520
need to do something about.

00:06:41.520 --> 00:06:44.240
So here you can search
for basically what, tuna?

00:06:47.300 --> 00:06:49.490
And then you get a
list of search results,

00:06:49.490 --> 00:06:52.510
right like non-GMO
tuna, organic, less fat.

00:06:56.740 --> 00:06:58.890
So this is a very simple app.

00:06:58.890 --> 00:07:01.290
Oh, the font is too small.

00:07:01.290 --> 00:07:03.410
Let's see.

00:07:03.410 --> 00:07:06.235
Preferences, Fonts.

00:07:06.235 --> 00:07:09.420
4, Apply.

00:07:09.420 --> 00:07:11.280
That better?

00:07:11.280 --> 00:07:12.810
OK.

00:07:12.810 --> 00:07:18.000
So let's [INAUDIBLE]
like the tuna, the fish

00:07:18.000 --> 00:07:20.160
box, and the results.

00:07:20.160 --> 00:07:22.410
So we have the stateful widget.

00:07:22.410 --> 00:07:27.180
And I'll tell you why
it is stateful soon.

00:07:27.180 --> 00:07:28.490
And it is very simple.

00:07:28.490 --> 00:07:29.690
You build the input.

00:07:29.690 --> 00:07:32.640
You build the preamble, which
is that this string results

00:07:32.640 --> 00:07:34.230
for tuna.

00:07:34.230 --> 00:07:36.210
And you build the results.

00:07:36.210 --> 00:07:39.390
And the way you build
the input is you

00:07:39.390 --> 00:07:42.680
have this search query input
widget that takes on change.

00:07:42.680 --> 00:07:43.930
And then you change the query.

00:07:43.930 --> 00:07:45.570
You have to update the query.

00:07:45.570 --> 00:07:49.710
And you search as you type,
so you perform search.

00:07:49.710 --> 00:07:53.240
And you build the preamble by
just interpolating the query

00:07:53.240 --> 00:07:57.170
with the results for string.

00:07:57.170 --> 00:08:01.110
And you build the results by
just mapping the create column

00:08:01.110 --> 00:08:07.350
with mapping the results
to search result widget.

00:08:07.350 --> 00:08:08.580
So that looks really clean.

00:08:08.580 --> 00:08:12.450
That looks OK-ish, but
that doesn't cut it.

00:08:12.450 --> 00:08:16.920
Because, again, that's a
bunch of business logic here.

00:08:16.920 --> 00:08:21.495
It knows, for example, by having
this perform search on change,

00:08:21.495 --> 00:08:24.300
you're incorporating
this knowledge

00:08:24.300 --> 00:08:27.030
that search happens as you type.

00:08:27.030 --> 00:08:30.720
And by having this
preamble here,

00:08:30.720 --> 00:08:33.419
the widget knows how
to build the preamble.

00:08:33.419 --> 00:08:35.030
So again, I think
that the [INAUDIBLE]

00:08:35.030 --> 00:08:38.220
is like, if you want to
change something on the app

00:08:38.220 --> 00:08:42.390
and have to change it
at two places, that

00:08:42.390 --> 00:08:43.836
shouldn't be two places.

00:08:43.836 --> 00:08:45.210
They should be at
the same place.

00:08:45.210 --> 00:08:46.710
It's probably business logic.

00:08:46.710 --> 00:08:48.840
So that's the case
for the preamble.

00:08:48.840 --> 00:08:51.510
So if you needed to change
the preamble for the Flutter

00:08:51.510 --> 00:08:54.450
and AngularDart apps,
with this design,

00:08:54.450 --> 00:08:55.860
you need to change both of them.

00:08:55.860 --> 00:08:58.050
So yeah, no, right?

00:08:58.050 --> 00:09:00.990
And build results seems OK.

00:09:00.990 --> 00:09:03.540
Nothing bad happening
here, I guess.

00:09:03.540 --> 00:09:05.880
And perform search
is really bad.

00:09:05.880 --> 00:09:07.920
Again, because it knows
that you have to use

00:09:07.920 --> 00:09:10.080
an API to search the results.

00:09:10.080 --> 00:09:12.920
And when the results get
there, you have to set state.

00:09:15.620 --> 00:09:19.170
And we still have
this stuff here.

00:09:19.170 --> 00:09:23.430
We have this binary API, which
doesn't exist in AngularDart.

00:09:23.430 --> 00:09:26.970
And then you have to keep track
of the query in the search

00:09:26.970 --> 00:09:27.930
results.

00:09:27.930 --> 00:09:31.870
And similarly, if you
have data in two places,

00:09:31.870 --> 00:09:35.670
like let's say we extract
these to business logic class.

00:09:35.670 --> 00:09:37.860
But now this data
is in two places.

00:09:37.860 --> 00:09:40.370
You have to maintain the
create query on the widget,

00:09:40.370 --> 00:09:43.140
and maintain the create
query on the business logic.

00:09:43.140 --> 00:09:44.490
Now you have data in two places.

00:09:44.490 --> 00:09:47.100
And believe me, they're
going to get out of sync,

00:09:47.100 --> 00:09:51.460
and it's going to be really
awful to track that down.

00:09:51.460 --> 00:09:55.000
I've been there multiple times.

00:09:55.000 --> 00:09:57.480
So yeah, this is bad.

00:09:57.480 --> 00:10:00.390
This looks sort of
OK, but it is bad.

00:10:00.390 --> 00:10:02.370
So one exercise
I like to do when

00:10:02.370 --> 00:10:06.210
I'm trying to refactor or
redesign the API is I go here

00:10:06.210 --> 00:10:09.240
and I just start throwing
stuff away and rewriting stuff.

00:10:09.240 --> 00:10:12.210
And it's not going
to build, of course.

00:10:12.210 --> 00:10:12.900
I hope so.

00:10:12.900 --> 00:10:15.260
It shouldn't build.

00:10:15.260 --> 00:10:17.380
And basically, I
just want to see how

00:10:17.380 --> 00:10:20.070
I want the code to look like.

00:10:20.070 --> 00:10:23.720
And then from there, I try
to make it actually happen.

00:10:23.720 --> 00:10:27.680
So OK, I don't like the
API, these variables here.

00:10:27.680 --> 00:10:28.980
I will remove them.

00:10:28.980 --> 00:10:33.660
I don't like this that I have
to do the perform session query.

00:10:33.660 --> 00:10:36.810
So let's say I have this
business logic class,

00:10:36.810 --> 00:10:43.310
and then I do on
text on query change.

00:10:43.310 --> 00:10:46.460
And when viewed in
the preamble, again,

00:10:46.460 --> 00:10:48.110
I just have this
business logic class.

00:10:53.810 --> 00:10:55.430
And I've got the
preamble before that.

00:10:55.430 --> 00:10:59.600
And I also get the results
on the business logic.

00:10:59.600 --> 00:11:03.870
And that means that I don't
need to have these anymore.

00:11:03.870 --> 00:11:06.170
The widget doesn't know
how to perform the search.

00:11:06.170 --> 00:11:08.055
And see, it is
much more concise.

00:11:11.150 --> 00:11:13.780
And let's say I have this class
called search business logic.

00:11:16.800 --> 00:11:17.870
That looks better.

00:11:17.870 --> 00:11:21.180
That looks better
because now, basically,

00:11:21.180 --> 00:11:23.240
the widget is really dumb.

00:11:23.240 --> 00:11:25.580
It doesn't do anything
besides just display the data.

00:11:25.580 --> 00:11:26.940
And if I went to
change, for example,

00:11:26.940 --> 00:11:28.500
how the preamble is
built, I can just

00:11:28.500 --> 00:11:30.083
change on the business
logic, and it's

00:11:30.083 --> 00:11:34.190
going to magically work in
both Angular and Flutter.

00:11:34.190 --> 00:11:36.720
But yeah, this doesn't
compile, so it's useless.

00:11:36.720 --> 00:11:38.500
So you know what
I'm going to do?

00:11:38.500 --> 00:11:41.720
I'm going to just
delete it and ignore it.

00:11:41.720 --> 00:11:44.750
And I'm going here
and, yeah, I know.

00:11:44.750 --> 00:11:45.980
I don't use this thing.

00:11:45.980 --> 00:11:47.540
Let's do this.

00:11:47.540 --> 00:11:52.460
And did someone tell you
that autoload is awesome?

00:11:52.460 --> 00:11:53.270
This is awesome.

00:11:53.270 --> 00:11:54.860
I just change the
heading, just works.

00:11:54.860 --> 00:11:56.600
Crazy.

00:11:56.600 --> 00:11:59.150
OK, so this is gone.

00:11:59.150 --> 00:12:04.240
So let's try to make
this thing work.

00:12:04.240 --> 00:12:07.280
This is basically the
same code, more or less.

00:12:07.280 --> 00:12:10.610
And then I moved everything
to the search business logic

00:12:10.610 --> 00:12:11.180
class.

00:12:11.180 --> 00:12:16.490
And it keeps track of the query,
it keeps track of the results,

00:12:16.490 --> 00:12:19.800
it builds the preamble,
and it updates

00:12:19.800 --> 00:12:21.710
the query when you
perform the search,

00:12:21.710 --> 00:12:23.660
so the preamble is updated.

00:12:23.660 --> 00:12:26.810
And I don't know if you
folks, how many of you

00:12:26.810 --> 00:12:30.290
have actually any
Flutter experience?

00:12:30.290 --> 00:12:33.680
The last 24 hours also count.

00:12:33.680 --> 00:12:35.071
OK, that's good.

00:12:35.071 --> 00:12:35.570
All right.

00:12:35.570 --> 00:12:39.755
So I'm [INAUDIBLE] but
maybe you won't see.

00:12:39.755 --> 00:12:43.410
But this will not work.

00:12:43.410 --> 00:12:46.460
And this will not work because
even though I am performing

00:12:46.460 --> 00:12:49.660
the operations on
the business logic,

00:12:49.660 --> 00:12:51.950
I have to update the state
on the Flutter widget,

00:12:51.950 --> 00:12:54.530
or else it won't be built.

00:12:54.530 --> 00:12:57.387
So really what I
need to do here is

00:12:57.387 --> 00:12:59.470
I need to change-- this
is so beautiful, but yeah,

00:12:59.470 --> 00:13:01.160
I have to get rid of it.

00:13:01.160 --> 00:13:02.970
I love [INAUDIBLE].

00:13:02.970 --> 00:13:05.150
OK, so I have to change this.

00:13:05.150 --> 00:13:09.970
So when I perform search,
when the text changes,

00:13:09.970 --> 00:13:11.126
I perform search.

00:13:11.126 --> 00:13:12.000
So passing the query.

00:13:15.160 --> 00:13:17.830
Then going to do
this awesome thing.

00:13:17.830 --> 00:13:19.270
Set state passing nothing.

00:13:22.081 --> 00:13:22.581
What?

00:13:26.370 --> 00:13:28.820
OK, I'll wait.

00:13:28.820 --> 00:13:30.490
I'm using future or.

00:13:30.490 --> 00:13:32.980
So the advice here is to not
change your code five minutes

00:13:32.980 --> 00:13:34.169
before the presentation.

00:13:39.330 --> 00:13:41.460
I think [INAUDIBLE].

00:13:41.460 --> 00:13:42.850
And then set state.

00:13:49.528 --> 00:13:54.825
And again, because I changed
this thing five minutes ago,

00:13:54.825 --> 00:13:55.450
it should work.

00:13:55.450 --> 00:13:56.230
Please, God.

00:13:56.230 --> 00:13:57.870
Yes, it does.

00:13:57.870 --> 00:13:59.160
[APPLAUSE]

00:13:59.160 --> 00:14:00.160
Right?

00:14:00.160 --> 00:14:03.520
This is awesome.

00:14:03.520 --> 00:14:06.160
This still looks
mostly the same,

00:14:06.160 --> 00:14:10.330
but I just have this thing
here which, come on, really?

00:14:10.330 --> 00:14:11.770
No.

00:14:11.770 --> 00:14:13.840
Whenever you see set
state passing nothing,

00:14:13.840 --> 00:14:15.000
that's a bad thing.

00:14:15.000 --> 00:14:16.750
That means that you're
flagging the widget

00:14:16.750 --> 00:14:20.140
to be rebuilt when
actually nothing changes.

00:14:20.140 --> 00:14:22.780
And please don't
do that, really.

00:14:22.780 --> 00:14:25.490
So yeah, this is bad.

00:14:25.490 --> 00:14:29.350
So what can we do from here?

00:14:29.350 --> 00:14:32.230
So I think that
the problem here is

00:14:32.230 --> 00:14:35.470
you have the input, the
query, that changes over time.

00:14:35.470 --> 00:14:37.720
And based on that
input, you have

00:14:37.720 --> 00:14:41.050
the results, and the preamble
that also change over time.

00:14:41.050 --> 00:14:44.925
And one way of how
do you represent

00:14:44.925 --> 00:14:47.050
things that change over
time in Flutter or in Dart?

00:14:47.050 --> 00:14:49.390
With a stream.

00:14:49.390 --> 00:14:50.007
Yeah, awesome.

00:14:50.007 --> 00:14:50.840
[INAUDIBLE] awesome.

00:14:50.840 --> 00:14:54.100
You should come here.

00:14:54.100 --> 00:14:55.510
So streams.

00:14:55.510 --> 00:15:00.540
So let's say, can I just
change these things to streams

00:15:00.540 --> 00:15:02.090
and see how it looks like?

00:15:02.090 --> 00:15:07.290
Sorry, the query is an input,
and the counterpart of a stream

00:15:07.290 --> 00:15:08.142
is a sync.

00:15:08.142 --> 00:15:09.600
I think you didn't
know about that.

00:15:12.099 --> 00:15:14.140
And turns out that a string
controller is a sync.

00:15:17.480 --> 00:15:20.820
And the results will be a
stream of search results.

00:15:27.830 --> 00:15:30.490
And the preamble would
also be a stream of string.

00:15:34.790 --> 00:15:36.570
And yeah, let's do empty.

00:15:45.510 --> 00:15:48.580
So of course, it doesn't work.

00:15:48.580 --> 00:15:50.340
Oh, now it doesn't even build.

00:15:50.340 --> 00:15:53.110
Back to square zero.

00:15:53.110 --> 00:15:55.780
So let's go step by step.

00:15:55.780 --> 00:15:58.690
I need to update the query
every time the input changes.

00:15:58.690 --> 00:16:01.390
So that means I have to
do business logic dot

00:16:01.390 --> 00:16:03.720
query dot add.

00:16:03.720 --> 00:16:05.230
Oh, now I can use
[INAUDIBLE] again.

00:16:05.230 --> 00:16:07.720
I'm happy.

00:16:07.720 --> 00:16:10.240
But now I have this pickle here.

00:16:10.240 --> 00:16:11.400
Text is string.

00:16:11.400 --> 00:16:15.550
Preamble is a stream.

00:16:15.550 --> 00:16:18.040
And async is not
going to save me.

00:16:18.040 --> 00:16:19.870
Oh no.

00:16:19.870 --> 00:16:23.050
But what if I had something
that I could have a stream,

00:16:23.050 --> 00:16:25.514
and I could pass it a builder,
and it builds something.

00:16:25.514 --> 00:16:27.180
There is something
called StreamBuilder,

00:16:27.180 --> 00:16:28.346
which does a little of that.

00:16:31.160 --> 00:16:32.364
This is more?

00:16:32.364 --> 00:16:32.864
OK.

00:16:35.790 --> 00:16:41.480
And a stream builder is
something that takes a stream,

00:16:41.480 --> 00:16:44.370
and in this case it
could be the preamble,

00:16:44.370 --> 00:16:45.940
and it takes a builder--

00:16:45.940 --> 00:16:47.200
stream, builder.

00:16:47.200 --> 00:16:50.980
And this builder
takes a context.

00:16:53.710 --> 00:16:55.060
And it takes a snapshot.

00:16:55.060 --> 00:16:56.840
But Paolo, what is a snapshot?

00:16:56.840 --> 00:17:00.430
A snapshot is the last known
state of the stream, sort of.

00:17:04.190 --> 00:17:07.000
I need to do another
talk about that.

00:17:07.000 --> 00:17:09.380
And it has something called
data, which is not null

00:17:09.380 --> 00:17:10.579
when there is data.

00:17:10.579 --> 00:17:15.490
So if we don't have any
data, don't show anything.

00:17:15.490 --> 00:17:18.819
And here we have the same
problem on the results.

00:17:18.819 --> 00:17:22.540
I have to wrap this
with a stream builder.

00:17:22.540 --> 00:17:23.930
And this takes a stream.

00:17:23.930 --> 00:17:27.810
It's going to be the
business logic dot results.

00:17:27.810 --> 00:17:34.870
And then this has
to be a builder.

00:17:34.870 --> 00:17:39.360
Hey, [INAUDIBLE] people,
this should be automatic.

00:17:39.360 --> 00:17:46.760
And then from the snapshot,
I map this snapshot.

00:17:46.760 --> 00:17:50.580
Or empty if there is no data.

00:17:50.580 --> 00:17:53.160
Oh yeah, so about that.

00:18:03.740 --> 00:18:05.195
GGG.

00:18:05.195 --> 00:18:06.070
OK, that's something.

00:18:06.070 --> 00:18:07.900
Yeah, I have fat
fingers over here.

00:18:07.900 --> 00:18:11.329
But anyway, let's ignore the
fact that it doesn't compile,

00:18:11.329 --> 00:18:13.620
because it's not going to
work anyway, because it's not

00:18:13.620 --> 00:18:14.860
doing anything.

00:18:14.860 --> 00:18:16.630
But let's look at
the final code.

00:18:16.630 --> 00:18:19.520
And I promise that I have
a working example, I guess.

00:18:19.520 --> 00:18:20.020
No.

00:18:22.600 --> 00:18:26.180
So now I can [INAUDIBLE].

00:18:26.180 --> 00:18:26.860
It's awesome.

00:18:26.860 --> 00:18:28.340
It's very simple.

00:18:28.340 --> 00:18:31.940
I can directly pass in the
data to the business logic.

00:18:31.940 --> 00:18:35.670
And I don't need
to wrap the results

00:18:35.670 --> 00:18:37.340
in anything too complex.

00:18:37.340 --> 00:18:40.100
I mean, they are going to
be async one day anyway.

00:18:40.100 --> 00:18:43.070
And StreamBuilder is
something provided by Flutter,

00:18:43.070 --> 00:18:45.620
and it is [INAUDIBLE].

00:18:45.620 --> 00:18:47.824
So this still looks
pretty clean and close

00:18:47.824 --> 00:18:49.990
to what I wanted it to be,
besides the StreamBuilder

00:18:49.990 --> 00:18:51.100
stuff.

00:18:51.100 --> 00:18:54.220
So yeah, but you don't
believe me, right?

00:18:54.220 --> 00:18:56.930
This does work.

00:18:56.930 --> 00:18:58.240
That's why I have another file.

00:18:58.240 --> 00:19:01.200
I have many files.

00:19:01.200 --> 00:19:07.210
So I have [INAUDIBLE] and hot
reload because it is awesome.

00:19:07.210 --> 00:19:09.049
And then, yeah.

00:19:09.049 --> 00:19:11.590
Let's go to [INAUDIBLE],, because
you still don't believe me.

00:19:11.590 --> 00:19:13.589
It could be the other
thing you just copy paste.

00:19:16.570 --> 00:19:18.286
This is too small.

00:19:18.286 --> 00:19:19.410
Also IntelliJ should scale.

00:19:22.150 --> 00:19:24.200
So this is the [INAUDIBLE]
implementation,

00:19:24.200 --> 00:19:26.470
which is basically
the same thing.

00:19:26.470 --> 00:19:28.720
You add and have StreamBuilders.

00:19:28.720 --> 00:19:31.640
And you have the search
business logic here.

00:19:31.640 --> 00:19:32.920
Oh, one last thing.

00:19:32.920 --> 00:19:33.940
You know the binary API?

00:19:33.940 --> 00:19:35.200
That has to go away.

00:19:35.200 --> 00:19:37.650
So the modus operi
for that is that you

00:19:37.650 --> 00:19:39.820
strike this
cross-platform interface,

00:19:39.820 --> 00:19:41.887
and you inject the
implementation.

00:19:41.887 --> 00:19:43.720
You have a binary
implementation for Flutter

00:19:43.720 --> 00:19:48.600
and a JSON implementation
for AngularDart.

00:19:48.600 --> 00:19:50.380
And then we have this--

00:19:50.380 --> 00:19:51.449
so injected like this.

00:19:51.449 --> 00:19:52.990
Not exactly like
this, but like this.

00:19:52.990 --> 00:19:54.540
We create a search BLoC.

00:19:54.540 --> 00:19:55.910
And what is a BLoC?

00:19:55.910 --> 00:19:57.540
Suspense.

00:19:57.540 --> 00:20:02.530
And if you folks want to see
how I implemented this thing,

00:20:02.530 --> 00:20:03.600
its really simple.

00:20:03.600 --> 00:20:07.190
It's like it's
reactive [INAUDIBLE]..

00:20:07.190 --> 00:20:10.180
Anyway, I did too much already.

00:20:10.180 --> 00:20:12.550
So yeah, so that's how
I want it to look like.

00:20:12.550 --> 00:20:16.140
And that was a
process, more or less.

00:20:16.140 --> 00:20:18.130
There was lot more
tears in this process,

00:20:18.130 --> 00:20:21.580
but that's what we got to.

00:20:21.580 --> 00:20:23.710
And let's go back
to these lights.

00:20:23.710 --> 00:20:25.870
And they say, OK, Paolo,
that's awesome and all,

00:20:25.870 --> 00:20:27.820
but you didn't say
anything about Angular,

00:20:27.820 --> 00:20:30.919
and you know that 90% of us
care more about the Angular

00:20:30.919 --> 00:20:31.460
than Flutter.

00:20:31.460 --> 00:20:34.270
OK, fine.

00:20:34.270 --> 00:20:36.640
Let's say you have this
search screen component,

00:20:36.640 --> 00:20:38.740
and the only thing it
would have would be

00:20:38.740 --> 00:20:42.010
the BLoC or the business logic.

00:20:42.010 --> 00:20:48.780
And then if you had the
template that when you search--

00:20:48.780 --> 00:20:50.950
you have a material input
that when it changes,

00:20:50.950 --> 00:20:52.920
it sends the event
to the component,

00:20:52.920 --> 00:20:55.650
and then just shows the
preamble and the results.

00:20:55.650 --> 00:20:58.240
There is something
called a async pipe

00:20:58.240 --> 00:21:01.220
that lets you do this.

00:21:01.220 --> 00:21:04.300
So instead of calling a
method on the component,

00:21:04.300 --> 00:21:06.340
you directly add to the BLoC.

00:21:06.340 --> 00:21:10.150
And instead of showing
properties from the component,

00:21:10.150 --> 00:21:12.850
you access these
strings from the BLoC.

00:21:12.850 --> 00:21:14.710
And what the async
pipe you do, it

00:21:14.710 --> 00:21:18.310
lets you use a stream
as if it was a property.

00:21:18.310 --> 00:21:22.390
So your Angular code, yeah,
you had to add some characters.

00:21:22.390 --> 00:21:25.960
But come on, that's good.

00:21:25.960 --> 00:21:27.700
So good.

00:21:27.700 --> 00:21:29.519
So we have this pattern now.

00:21:29.519 --> 00:21:30.310
We have this class.

00:21:30.310 --> 00:21:33.400
Oh, I have this thing now.

00:21:33.400 --> 00:21:34.510
So we have this class.

00:21:34.510 --> 00:21:37.860
When we are refactoring, we
extract the business logic

00:21:37.860 --> 00:21:39.160
to this class.

00:21:39.160 --> 00:21:42.430
And it has a well
defined set of inputs,

00:21:42.430 --> 00:21:44.870
and a well defined
set of outputs.

00:21:44.870 --> 00:21:46.690
And if you happen
to have any platform

00:21:46.690 --> 00:21:51.250
dependent dependencies, you have
to extract a common interface

00:21:51.250 --> 00:21:54.370
and then inject the
different implementations.

00:21:54.370 --> 00:21:55.720
Nice, right?

00:21:55.720 --> 00:21:56.800
But there's a thing.

00:21:56.800 --> 00:21:59.470
If you don't give it a name,
especially with an acronym,

00:21:59.470 --> 00:22:01.130
people are not going to use it.

00:22:01.130 --> 00:22:02.960
So we gave it a name.

00:22:02.960 --> 00:22:05.260
We called it BLoC, which
is the Business Logic

00:22:05.260 --> 00:22:09.800
Components, like the building
blocks of application.

00:22:09.800 --> 00:22:12.050
Yeah, I know, it's right there.

00:22:12.050 --> 00:22:15.140
But we had to name it.

00:22:15.140 --> 00:22:16.480
So good.

00:22:16.480 --> 00:22:20.617
So we went from this to this.

00:22:20.617 --> 00:22:22.450
But Paolo, you might
ask me, because there's

00:22:22.450 --> 00:22:27.130
no Q&amp;A, but Paolo,
you may ask me,

00:22:27.130 --> 00:22:28.990
the whole point
of a presentation

00:22:28.990 --> 00:22:34.760
was that over time, things are
going to get more complicated.

00:22:34.760 --> 00:22:37.640
So how do you prevent
this from happening again?

00:22:37.640 --> 00:22:41.270
Because it has happened before,
and it will happen again.

00:22:41.270 --> 00:22:46.429
Well, some good old
aggressively pedantic rules.

00:22:46.429 --> 00:22:48.220
And basically, we have
a set of guidelines.

00:22:48.220 --> 00:22:50.260
And if you don't follow
them, you are wrong,

00:22:50.260 --> 00:22:54.580
and there's no negotiation.

00:22:54.580 --> 00:22:56.030
That's the best set of rules.

00:22:56.030 --> 00:22:59.410
All right, so the guidelines
for designing your BLoC are,

00:22:59.410 --> 00:23:01.450
number one, the
inputs and outputs

00:23:01.450 --> 00:23:04.280
are simple, streams and sinks.

00:23:04.280 --> 00:23:07.210
You cannot have platform
dependent concepts

00:23:07.210 --> 00:23:07.842
and constructs.

00:23:07.842 --> 00:23:08.800
That's kind of obvious.

00:23:08.800 --> 00:23:11.214
But the inputs and
outputs are only streams.

00:23:11.214 --> 00:23:12.130
Can I have a function?

00:23:12.130 --> 00:23:12.730
No.

00:23:12.730 --> 00:23:13.771
Can I have a [INAUDIBLE]?

00:23:13.771 --> 00:23:14.440
No.

00:23:14.440 --> 00:23:16.860
Sinks, streams.

00:23:16.860 --> 00:23:19.510
Second, dependencies
must be injectable,

00:23:19.510 --> 00:23:23.030
and if you don't do that, you
have more trouble than this.

00:23:23.030 --> 00:23:24.700
And they have to be
platform agnostic.

00:23:24.700 --> 00:23:27.520
And by that I mean, the
interface you inject

00:23:27.520 --> 00:23:29.620
doesn't have to depend
on Flutter or Angular

00:23:29.620 --> 00:23:31.310
or any concept
like, for example,

00:23:31.310 --> 00:23:33.100
having a browser window.

00:23:33.100 --> 00:23:36.820
Third, inside the BLoC, you
cannot branch on platform.

00:23:36.820 --> 00:23:41.290
You cannot have if mobile do
this, if AngularDart do that.

00:23:41.290 --> 00:23:43.240
Because again, when
you start doing that,

00:23:43.240 --> 00:23:45.790
that's a rabbit hole that's
going to make your code much

00:23:45.790 --> 00:23:48.250
harder to track.

00:23:48.250 --> 00:23:51.460
And lastly, if you follow
the rules number one, two,

00:23:51.460 --> 00:23:53.300
and three, you can
do whatever you want.

00:23:53.300 --> 00:23:57.460
You can implement your BLoC
using imperative programming.

00:23:57.460 --> 00:24:00.250
You can problem using
functional programming.

00:24:00.250 --> 00:24:02.290
You can program it
using smoke signals.

00:24:02.290 --> 00:24:03.280
I don't care.

00:24:03.280 --> 00:24:04.750
Just follow the three rules.

00:24:04.750 --> 00:24:07.570
But may I suggest you
try reactive programming

00:24:07.570 --> 00:24:11.040
in these trying times.

00:24:11.040 --> 00:24:13.790
So we have guidelines
for designing a BLoC,

00:24:13.790 --> 00:24:16.460
but we also need guidelines
for designing UI.

00:24:16.460 --> 00:24:20.990
And those are there is a more
or less one-to-one pairing

00:24:20.990 --> 00:24:25.460
between UI component
and widget in a BLoC.

00:24:25.460 --> 00:24:29.750
So in this case, we would
have a search screen BLoC.

00:24:29.750 --> 00:24:32.950
And of course, you're not
going to create the BLoC

00:24:32.950 --> 00:24:35.210
to every single widget,
especially Flutter.

00:24:35.210 --> 00:24:36.500
Yeah, you don't want that.

00:24:36.500 --> 00:24:39.110
So you have to make
a judgment call.

00:24:39.110 --> 00:24:40.180
And that's OK.

00:24:40.180 --> 00:24:41.986
You have to define
what complex enough is

00:24:41.986 --> 00:24:43.610
and what makes sense
for you and create

00:24:43.610 --> 00:24:46.730
a BLoC for each widget
that is complex enough.

00:24:46.730 --> 00:24:50.780
Second, components should
send inputs as they are.

00:24:50.780 --> 00:24:52.970
If you have a BLoC
that takes inputs

00:24:52.970 --> 00:24:54.845
that we present
as text field, you

00:24:54.845 --> 00:24:56.720
are going to hook up
that on change directly.

00:24:56.720 --> 00:24:58.430
You are not doing anything else.

00:24:58.430 --> 00:25:00.080
Because the moment
you start doing

00:25:00.080 --> 00:25:01.580
stuff, that's business logic.

00:25:01.580 --> 00:25:03.500
You actually don't do anything.

00:25:03.500 --> 00:25:05.720
And the counterpart
for this rule

00:25:05.720 --> 00:25:10.570
is outputs should be displayed
as close to as is as possible.

00:25:10.570 --> 00:25:12.440
And you're going to
say, but Paolo, you just

00:25:12.440 --> 00:25:14.990
said that there
is no compromise.

00:25:14.990 --> 00:25:16.730
And I'm not a savage.

00:25:16.730 --> 00:25:18.360
I know that sometimes,
for example,

00:25:18.360 --> 00:25:21.410
in Flutter if you want a
[INAUDIBLE] text, a style text,

00:25:21.410 --> 00:25:23.510
you have to somehow
massage the text.

00:25:23.510 --> 00:25:25.789
But it should be as
clear as possible.

00:25:25.789 --> 00:25:27.830
You should not add anything
[INAUDIBLE] anything.

00:25:27.830 --> 00:25:30.426
If you're going to display
an amount in dollars

00:25:30.426 --> 00:25:33.050
and you want to format that, you
do not format that in Flutter.

00:25:33.050 --> 00:25:36.920
You format that on the BLoC.

00:25:36.920 --> 00:25:38.934
And lastly, if you
have any branch,

00:25:38.934 --> 00:25:40.100
and again, I'm not a savage.

00:25:40.100 --> 00:25:42.420
Sometimes you need to
do it inside a widget.

00:25:42.420 --> 00:25:43.380
That's fine.

00:25:43.380 --> 00:25:46.670
But that if can only have one
condition, and that condition

00:25:46.670 --> 00:25:48.060
is a BLoC output.

00:25:48.060 --> 00:25:49.400
One BLoC output.

00:25:49.400 --> 00:25:51.940
Because the moment you start
doing ands, like BLoC output

00:25:51.940 --> 00:25:56.720
A and B, the fact that you
need to merge those two, that

00:25:56.720 --> 00:25:57.830
is also business logic.

00:26:01.040 --> 00:26:06.854
So to wrap it up, that's
kind of obvious, bu

00:26:06.854 --> 00:26:08.270
you have to move
all your business

00:26:08.270 --> 00:26:11.320
logic to BLoCs following that
pattern that I just said,

00:26:11.320 --> 00:26:12.740
that I just showed.

00:26:12.740 --> 00:26:15.560
Secondly, you have to
keep UI components simple.

00:26:15.560 --> 00:26:17.961
Because the moment you
start making them complex

00:26:17.961 --> 00:26:19.460
or making them think
for themselves,

00:26:19.460 --> 00:26:22.040
then things get complicated.

00:26:22.040 --> 00:26:24.860
And lastly, design rules
are not negotiable.

00:26:24.860 --> 00:26:28.460
And that's for the
sanity of everyone.

00:26:28.460 --> 00:26:31.940
So with that, I say thanks, and
I hope that's useful for you

00:26:31.940 --> 00:26:32.840
folks.

00:26:32.840 --> 00:26:35.128
[APPLAUSE]

