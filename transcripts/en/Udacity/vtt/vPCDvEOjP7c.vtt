WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:05.010
I wanted to give you a high level overview of the structure of Mike's code,

00:00:05.010 --> 00:00:08.530
to give you a sense of how to organize your own, and

00:00:08.530 --> 00:00:11.500
also I wanted to explain some of the elements we

00:00:11.500 --> 00:00:16.050
may not have encountered in the console, in the examples we've been through.

00:00:16.050 --> 00:00:22.370
At the very top here, we have a script tag, which actually loads our d3 library.

00:00:22.370 --> 00:00:25.810
Right below the script tag, we have a style tag,

00:00:25.810 --> 00:00:31.310
which can be used to add styles to the graphics and elements created through d3.

00:00:31.310 --> 00:00:36.850
Much of the logic of the visualization comes next, wrapped in a draw function,

00:00:36.850 --> 00:00:41.320
and just a small point, all of these first three things I've covered,

00:00:41.320 --> 00:00:45.310
are contained within the head tag of our HTML page.

00:00:45.310 --> 00:00:47.480
As soon as we open our body tag,

00:00:47.480 --> 00:00:52.430
we put an SVG with class chart to hold the visualization.

00:00:52.430 --> 00:00:55.100
And finally, the last bit of JavaScript.

00:00:55.100 --> 00:00:59.520
Loads our external data file and then calls our draw function.

00:00:59.520 --> 00:01:02.130
Because JavaScript is asynchronous.

00:01:02.130 --> 00:01:06.400
The code you see here isn't necessarily executed in the order it

00:01:06.400 --> 00:01:07.580
is written in here.

00:01:07.580 --> 00:01:13.420
Whenever a browser reads an, an HTML file, it reads it from top to bottom,

00:01:13.420 --> 00:01:19.690
and parses each line of either HTML, CSS, JavaScript or SVG.

00:01:19.690 --> 00:01:22.650
But even though a JavaScript function may be parsed,

00:01:22.650 --> 00:01:25.280
doesn't necessarily mean it will be executed.

00:01:25.280 --> 00:01:27.880
And one last point of frustration often for

00:01:27.880 --> 00:01:31.580
newcomers to JavaScript, is the idea of a callback.

00:01:31.580 --> 00:01:35.440
All a callback is, is a function that gets executed.

00:01:35.440 --> 00:01:37.800
Once another function completes.

00:01:37.800 --> 00:01:41.400
We will see in just a second how D3 leverages callbacks.

00:01:41.400 --> 00:01:45.250
The first line of JavaScript that actually gets executed in this

00:01:45.250 --> 00:01:49.870
html is the last line that loads our external data file.

00:01:49.870 --> 00:01:52.030
Once the data file is loaded.

00:01:52.030 --> 00:01:56.940
And only then does the draw callback function get executed.

00:01:56.940 --> 00:02:00.010
And again, the draw function is what contains most of

00:02:00.010 --> 00:02:02.690
the logic to build our visualization.

00:02:02.690 --> 00:02:05.010
And since the draw function and

00:02:05.010 --> 00:02:10.120
all of the code contained within it need some data to bind to and visualize.

00:02:10.120 --> 00:02:13.530
And only when the data is fully loaded as it passed as

00:02:13.530 --> 00:02:15.250
the argument to the draw function.

