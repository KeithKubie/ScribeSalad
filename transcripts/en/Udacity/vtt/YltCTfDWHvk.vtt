WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
As the previous example suggests, we can use parentheses to control ambiguity.

00:00:07.000 --> 00:00:15.000
Here I've taken our expression grammar from before and updated it with a new rewrite rule.

00:00:15.000 --> 00:00:20.000
Now expression can be replaced by open parentheses, expression, close parentheses.

00:00:20.000 --> 00:00:27.000
This should totally remind us up the P goes to open P close rule from before for balanced parentheses.

00:00:27.000 --> 00:00:29.000
It's going to behave mostly the same way.

00:00:29.000 --> 00:00:33.000
With this new grammar, both of these utterances--

00:00:33.000 --> 00:00:39.000
open 1 minus 2 plus 3 and 1 minus open 2 plus 3 close--

00:00:39.000 --> 00:00:43.000
both of them are in the language of this grammar.

00:00:43.000 --> 00:00:46.000
However, while both of these are okay, so is this one.

00:00:46.000 --> 00:00:49.000
It doesn't forbid the ambiguous one.

00:00:49.000 --> 00:00:52.000
It just allows us to have more precise renditions.

00:00:52.000 --> 00:00:55.000
We've solved some of the problem.

00:00:55.000 --> 00:01:01.000
If we're thinking ahead, we can use parentheses, but we're still allowing ambiguous phrasing.

00:01:01.000 --> 00:01:06.000
Here I've drawn our favorite utterance from before--1 minus 2 plus 3--

00:01:06.000 --> 00:01:09.000
and I've written out two different parse trees for it.

00:01:09.000 --> 00:01:12.000
This one corresponds to 1 minus 2 plus 3.

00:01:12.000 --> 00:01:19.000
At the top level we're subtracting, and then the 2 plus 3 are grouped together.

00:01:19.000 --> 00:01:24.000
This one corresponds to 1 minus 2 plus 3.

00:01:24.000 --> 00:01:29.000
At the top level we're adding, and the 1 minus 2 is grouped together.

00:01:29.000 --> 00:01:36.000
Formally, we say that a grammar is ambiguous if there is at least one string in it--

00:01:36.000 --> 00:01:44.000
1 minus 2 plus 3 and that single string has more than one parse tree.

00:01:44.000 --> 00:01:48.000
Here I've drawn very stylized versions of the parse trees.

00:01:48.000 --> 00:01:51.000
If you can find even one string for which this is true,

00:01:51.000 --> 09:59:59.000
officially the whole grammar is ambiguous.

