WEBVTT
Kind: captions
Language: en

00:00:02.130 --> 00:00:04.310
MALE SPEAKER: Shanghai
GDG is a very

00:00:04.310 --> 00:00:06.090
interesting developer community.

00:00:06.090 --> 00:00:07.220
FEMALE SPEAKER: I'm
glad somebody

00:00:07.220 --> 00:00:08.250
has asked this question.

00:00:08.250 --> 00:00:09.620
MALE SPEAKER: This is where
the magic happens.

00:00:09.620 --> 00:00:11.200
FEMALE SPEAKER: This is
primarily a question and

00:00:11.200 --> 00:00:11.810
answer show.

00:00:11.810 --> 00:00:13.840
So if any of you out there would
like to ask questions--

00:00:19.396 --> 00:00:21.090
VIC FRYZEL: Hello, everyone.

00:00:21.090 --> 00:00:22.930
Welcome back to Google
Developers Live.

00:00:22.930 --> 00:00:24.050
I'm Vic, and this is Claudio.

00:00:24.050 --> 00:00:24.802
CLAUDIO CHERUBINO: Hi.

00:00:24.802 --> 00:00:27.340
VIC FRYZEL: Today, we're going
to be taking you through how

00:00:27.340 --> 00:00:29.730
to get started quickly
using Python in the

00:00:29.730 --> 00:00:31.720
Google Drive SDK.

00:00:31.720 --> 00:00:33.610
So we have a quick
start sample.

00:00:33.610 --> 00:00:36.720
The link to the sample code that
we're going to be talking

00:00:36.720 --> 00:00:38.650
about today is going to
be along the bottom

00:00:38.650 --> 00:00:41.200
of the screen here.

00:00:41.200 --> 00:00:43.530
So just take a look at that link
at any point throughout

00:00:43.530 --> 00:00:45.610
the video, and you can see
the code that we're

00:00:45.610 --> 00:00:47.220
going to walk through.

00:00:47.220 --> 00:00:51.470
Our goal today is to get through
running the sample in

00:00:51.470 --> 00:00:52.620
10 minutes or less.

00:00:52.620 --> 00:00:53.665
You think we can do that?

00:00:53.665 --> 00:00:56.190
CLAUDIO CHERUBINO: I
think we can do it.

00:00:56.190 --> 00:00:58.900
Let's see how to do it.

00:00:58.900 --> 00:01:01.080
Let's show my computer here.

00:01:01.080 --> 00:01:04.550
The first thing you need to do
it if you want to write a

00:01:04.550 --> 00:01:07.680
Python application that
integrates with the drive API

00:01:07.680 --> 00:01:10.670
is to install the Python Client

00:01:10.670 --> 00:01:13.440
Library that we provide.

00:01:13.440 --> 00:01:17.780
To do it, it's a very
easy command.

00:01:17.780 --> 00:01:20.135
You can use Easy Install, which
is a standard way to

00:01:20.135 --> 00:01:22.130
install Python libraries.

00:01:22.130 --> 00:01:26.660
And you pass the parameters
dash, dash upgrade, so that it

00:01:26.660 --> 00:01:29.840
either installs the library or
updates an existing one.

00:01:29.840 --> 00:01:30.900
So we do this.

00:01:30.900 --> 00:01:33.360
Of course, you might need
root privileges.

00:01:33.360 --> 00:01:35.630
So I'm going click
password here.

00:01:35.630 --> 00:01:37.910
It's going to download
the library.

00:01:37.910 --> 00:01:40.570
I already have the latest
version so I'm done.

00:01:40.570 --> 00:01:42.810
If you don't have that, and you
run this command, it will

00:01:42.810 --> 00:01:47.990
just download the library from
the website and install it,

00:01:47.990 --> 00:01:50.720
and you'll be ready to go.

00:01:50.720 --> 00:01:55.250
To get started quickly, we
provide you with this quick

00:01:55.250 --> 00:01:55.960
search sample.

00:01:55.960 --> 00:01:58.670
We have one for each of these
supported languages.

00:01:58.670 --> 00:02:03.970
They will be available in the
documentation in our Drive SDK

00:02:03.970 --> 00:02:05.620
documentation very soon.

00:02:05.620 --> 00:02:09.124
But the Python one I'm going
to use today is a already

00:02:09.124 --> 00:02:10.300
available in this short link.

00:02:10.300 --> 00:02:12.640
You'll be seeing an overlay.

00:02:12.640 --> 00:02:16.830
So in my project folder,
I have two files.

00:02:16.830 --> 00:02:17.860
Let me show to you.

00:02:17.860 --> 00:02:22.000
I have drive.py file, which
is my source code, and

00:02:22.000 --> 00:02:26.080
document.txt, which is a text
file that I'm going

00:02:26.080 --> 00:02:27.730
to upload to Drive.

00:02:27.730 --> 00:02:31.700
So let me just show document.txt
just contains a

00:02:31.700 --> 00:02:32.890
single line of text.

00:02:32.890 --> 00:02:34.580
But this can be a text file.

00:02:34.580 --> 00:02:36.720
This can be anything you want
to upload to Drive.

00:02:36.720 --> 00:02:40.500
Let me show you the other one
that's there, the py file.

00:02:40.500 --> 00:02:43.540
I have it open already.

00:02:43.540 --> 00:02:46.010
It's a standard Python
command line sample.

00:02:46.010 --> 00:02:48.850
So today, we're going to show
you how to write a command

00:02:48.850 --> 00:02:52.090
line application, not
a web application.

00:02:52.090 --> 00:02:56.090
The basic difference is
in the authorization.

00:02:56.090 --> 00:02:58.620
So let me show you
how this works.

00:02:58.620 --> 00:03:01.500
And then, we will go through
the code line by line.

00:03:01.500 --> 00:03:04.810
So let me go back
to the terminal.

00:03:04.810 --> 00:03:05.600
So I'm here.

00:03:05.600 --> 00:03:09.770
I just run it with
python drive.py.

00:03:09.770 --> 00:03:13.960
What I get is the first
step of the

00:03:13.960 --> 00:03:16.810
authorization, OAuth flow.

00:03:16.810 --> 00:03:21.410
Since this is not a web
application, we have no

00:03:21.410 --> 00:03:24.020
browser in the command line.

00:03:24.020 --> 00:03:28.340
So we have to manually copy and
paste this link and open

00:03:28.340 --> 00:03:32.560
it in our browser to start
the OAuth flow.

00:03:32.560 --> 00:03:34.710
We will get back to
this as soon as we

00:03:34.710 --> 00:03:36.270
look at the code again.

00:03:36.270 --> 00:03:39.560
VIC FRYZEL: So a real
application being run from the

00:03:39.560 --> 00:03:41.040
command line would do something
like spawn a

00:03:41.040 --> 00:03:46.250
browser, collect a token, and
then store the token in the

00:03:46.250 --> 00:03:47.960
user's home directory or
something like that.

00:03:47.960 --> 00:03:49.350
CLAUDIO CHERUBINO: And, of
course, a web application will

00:03:49.350 --> 00:03:53.320
just take you to this page
and handle it directly.

00:03:53.320 --> 00:03:56.580
But this is the easiest way
to run the OAuth flow.

00:03:56.580 --> 00:03:59.350
And this is very easy to do
in command line sample.

00:03:59.350 --> 00:04:01.860
It takes about a few
lines of code.

00:04:01.860 --> 00:04:04.420
So we decided to show
this as that.

00:04:04.420 --> 00:04:06.200
So I got this URL.

00:04:06.200 --> 00:04:08.540
And I can go to my browser.

00:04:08.540 --> 00:04:13.040
But before I can do anything
like that, we have to generate

00:04:13.040 --> 00:04:14.250
our credentials.

00:04:14.250 --> 00:04:18.630
So the first step that we have
to do before we can run the

00:04:18.630 --> 00:04:22.200
sample is to create our
credentials in the Google API

00:04:22.200 --> 00:04:27.190
console, which is available at
code.google.com/apis/console.

00:04:27.190 --> 00:04:29.660
You might probably have
a project already.

00:04:29.660 --> 00:04:30.780
I have none.

00:04:30.780 --> 00:04:34.530
So I'm going to create
a project.

00:04:34.530 --> 00:04:39.840
When I create a project, I have
a list of services that I

00:04:39.840 --> 00:04:42.820
can enable or disable.

00:04:42.820 --> 00:04:44.460
And what I need is
the Drive API.

00:04:44.460 --> 00:04:47.300
So I'm going to enable
the Drive API--

00:04:47.300 --> 00:04:48.700
done.

00:04:48.700 --> 00:04:51.160
So the Drive API is enabled.

00:04:51.160 --> 00:04:53.300
I have to get my credentials,
which are client

00:04:53.300 --> 00:04:54.170
ID and client secret.

00:04:54.170 --> 00:04:57.160
To do that, I go to the
API Access tab.

00:04:57.160 --> 00:05:01.330
And I need to create an
OAuth 2.0 client ID.

00:05:01.330 --> 00:05:03.540
So it's a step-by-step guide.

00:05:03.540 --> 00:05:04.560
I click on that.

00:05:04.560 --> 00:05:08.460
I need to specify my product
name, which might be Drive

00:05:08.460 --> 00:05:10.650
Quickstart.

00:05:10.650 --> 00:05:12.750
If I want, I can add
a product logo.

00:05:12.750 --> 00:05:14.040
I don't have one.

00:05:14.040 --> 00:05:15.490
It's not required.

00:05:15.490 --> 00:05:18.520
So I click Next, and I have
to specify what type of

00:05:18.520 --> 00:05:20.140
application this is.

00:05:20.140 --> 00:05:21.870
So this can be a web
application.

00:05:21.870 --> 00:05:23.590
This can use service account.

00:05:23.590 --> 00:05:25.810
In my case, this is going to be
an installed application,

00:05:25.810 --> 00:05:27.315
which is a command
line application.

00:05:27.315 --> 00:05:28.260
So I select.

00:05:28.260 --> 00:05:30.920
The installed application
is not for Android.

00:05:30.920 --> 00:05:31.975
It's not for iOS.

00:05:31.975 --> 00:05:34.270
It's a standard command
line application, so I

00:05:34.270 --> 00:05:36.750
create a client ID.

00:05:36.750 --> 00:05:41.450
With that, I get this box
with my new credentials.

00:05:41.450 --> 00:05:44.270
So I have client ID and
client secrets.

00:05:44.270 --> 00:05:48.500
And I need to use them
in my Python code.

00:05:48.500 --> 00:05:52.940
So let me put those credentials
in my Python code.

00:05:52.940 --> 00:05:56.330
I can copy this, go back
to my source here.

00:05:56.330 --> 00:06:00.900
And if you open the source code
with sharing we have two

00:06:00.900 --> 00:06:03.820
placeholders here for client
ID and client secrets.

00:06:03.820 --> 00:06:09.285
So I can replace this, and I can
replace the client secret.

00:06:09.285 --> 00:06:14.240
Of course, the client secret
must be secret.

00:06:14.240 --> 00:06:16.830
So remember, when you do this,
don't share the client secret

00:06:16.830 --> 00:06:17.480
with anyone.

00:06:17.480 --> 00:06:20.260
And of course, as soon as we're
done with this, we're

00:06:20.260 --> 00:06:22.960
going to revoke these
credentials, so no one can use

00:06:22.960 --> 00:06:25.290
these credentials and
impersonate me in this

00:06:25.290 --> 00:06:26.340
application.

00:06:26.340 --> 00:06:30.440
So now, my application is
really ready to run.

00:06:30.440 --> 00:06:31.530
So let's try again.

00:06:31.530 --> 00:06:32.430
Let's start again.

00:06:32.430 --> 00:06:34.910
So let's go back
to the console.

00:06:34.910 --> 00:06:36.710
Let's cancel that
and start again.

00:06:36.710 --> 00:06:37.880
VIC FRYZEL: Why do we
have to cancel that?

00:06:37.880 --> 00:06:40.050
CLAUDIO CHERUBINO: Because when
I ran that, I didn't put

00:06:40.050 --> 00:06:41.650
my credentials first.

00:06:41.650 --> 00:06:43.820
So let me try again.

00:06:43.820 --> 00:06:46.100
So I get a new URL.

00:06:46.100 --> 00:06:49.470
I do what I said I was
going to do before.

00:06:49.470 --> 00:06:57.410
Copy that, this URL, go back
to my browser, and start--

00:06:57.410 --> 00:06:58.280
go to that page.

00:06:58.280 --> 00:07:00.490
Let me make this bigger.

00:07:00.490 --> 00:07:02.230
And this is the standard
OAuth flow.

00:07:02.230 --> 00:07:04.590
So this is saying that the Drive
Quickstart application,

00:07:04.590 --> 00:07:07.440
which remember, is the name
of the application I just

00:07:07.440 --> 00:07:10.510
created, is requesting
permission to view and manage

00:07:10.510 --> 00:07:12.760
the files and documents I
have in my Google Drive.

00:07:12.760 --> 00:07:16.002
If you want more details, you
can expand it and see that

00:07:16.002 --> 00:07:18.970
that application can upload,
download, update files, and

00:07:18.970 --> 00:07:19.730
everything.

00:07:19.730 --> 00:07:23.960
So my application is basically
requesting access to

00:07:23.960 --> 00:07:25.780
everything on Google Drive.

00:07:25.780 --> 00:07:29.256
There are different scopes,
different permissions you can

00:07:29.256 --> 00:07:30.910
run to your application.

00:07:30.910 --> 00:07:35.030
What I'm using here to make it
easier is the full scope.

00:07:35.030 --> 00:07:37.340
So this application is allowed
to do everything.

00:07:37.340 --> 00:07:40.510
But remember, this might
be scary to the users.

00:07:40.510 --> 00:07:44.220
So if you don't need some
features, you don't need to

00:07:44.220 --> 00:07:44.960
request this scope.

00:07:44.960 --> 00:07:46.600
You shouldn't request
this scope.

00:07:46.600 --> 00:07:49.400
VIC FRYZEL: So for a list of
some probably better choices

00:07:49.400 --> 00:07:53.810
in scopes, see the link in the
code that we provided, which

00:07:53.810 --> 00:07:55.960
goes to the documentation and
talks about each individual

00:07:55.960 --> 00:07:56.790
scope that you can request.

00:07:56.790 --> 00:07:58.380
CLAUDIO CHERUBINO: OK.

00:07:58.380 --> 00:08:00.000
So I'm fine with application.

00:08:00.000 --> 00:08:03.130
I know the developer, which
is me, so I can unlock the

00:08:03.130 --> 00:08:03.910
system's application.

00:08:03.910 --> 00:08:06.490
I click on it, and what
I get is that code.

00:08:06.490 --> 00:08:09.550
Remember, this is the flow
that you get when the

00:08:09.550 --> 00:08:10.370
application is installed.

00:08:10.370 --> 00:08:11.640
It's not a web application.

00:08:11.640 --> 00:08:14.620
In a web application, this code
will be sent directly to

00:08:14.620 --> 00:08:16.220
your web application.

00:08:16.220 --> 00:08:18.010
In this case, we have
a command line.

00:08:18.010 --> 00:08:22.450
And we have no web server, so
I need to copy this code, go

00:08:22.450 --> 00:08:27.030
back to the app, put the same
code in my command line app,

00:08:27.030 --> 00:08:31.330
and as soon as I do and press
Enter, my application will be

00:08:31.330 --> 00:08:32.090
authorized.

00:08:32.090 --> 00:08:33.330
What the application does--

00:08:33.330 --> 00:08:35.059
and I will show the
code in a minute--

00:08:35.059 --> 00:08:38.679
is that the application will
take the other file that is in

00:08:38.679 --> 00:08:42.429
the same folder called
document.txt, upload it to

00:08:42.429 --> 00:08:46.980
drive, and then print all the
metadata we get back from

00:08:46.980 --> 00:08:48.940
Drive on the screen.

00:08:48.940 --> 00:08:53.140
It's very, very rough, not a
great URI, but just a sample

00:08:53.140 --> 00:08:53.650
application.

00:08:53.650 --> 00:08:55.440
So I press Enter.

00:08:55.440 --> 00:08:57.980
And now the application
is performing upload.

00:08:57.980 --> 00:09:03.900
And what I get back is this JSON
structure that is what

00:09:03.900 --> 00:09:06.550
the API returned
after my code.

00:09:06.550 --> 00:09:10.080
And this JSON structure has a
lot of metadata information

00:09:10.080 --> 00:09:15.170
about my file, including a
download URL, so that now

00:09:15.170 --> 00:09:19.210
users can download the
file from here in

00:09:19.210 --> 00:09:20.890
file size, in bytes.

00:09:20.890 --> 00:09:22.070
This is a very small file.

00:09:22.070 --> 00:09:24.040
It's 24 bytes.

00:09:24.040 --> 00:09:26.720
What kind of document
it is, it's a file.

00:09:26.720 --> 00:09:27.355
It can be a folder.

00:09:27.355 --> 00:09:31.710
It can be other type of files,
some labels, whether the

00:09:31.710 --> 00:09:35.810
document is in Trash, it
is started, and so on.

00:09:35.810 --> 00:09:38.920
In MIME type, this is a text
file, so the MIME type is

00:09:38.920 --> 00:09:41.980
going to be text plain, , when
it was modified who's the

00:09:41.980 --> 00:09:44.620
owner, and so on, all
the information you

00:09:44.620 --> 00:09:47.180
need about this file.

00:09:47.180 --> 00:09:48.840
So the application worked.

00:09:48.840 --> 00:09:50.830
Let's see how it does
what it does.

00:09:50.830 --> 00:09:53.310
VIC FRYZEL: We also did that
in less than 10 minutes.

00:09:53.310 --> 00:09:54.270
That was pretty impressive.

00:09:54.270 --> 00:09:55.620
CLAUDIO CHERUBINO: But without
explaining properly.

00:09:55.620 --> 00:09:56.420
VIC FRYZEL: Yeah, sure.

00:09:56.420 --> 00:09:59.480
CLAUDIO CHERUBINO: Let's see
how we can explain it.

00:09:59.480 --> 00:10:02.540
So the application is a
Python application.

00:10:02.540 --> 00:10:04.680
It starts with some imports.

00:10:04.680 --> 00:10:06.380
You need to import some
libraries to use it.

00:10:06.380 --> 00:10:10.830
So basically it's the client
library you downloaded.

00:10:10.830 --> 00:10:15.330
Then we have our credentials,
which are the ones we took

00:10:15.330 --> 00:10:19.120
from the APIs console and
generated them from the APIs

00:10:19.120 --> 00:10:20.670
console a few minutes ago.

00:10:20.670 --> 00:10:25.720
Then, we have the OAuth scope,
which is the type of

00:10:25.720 --> 00:10:27.920
permission we are asking
to the users.

00:10:27.920 --> 00:10:30.795
So as Vic said, at this
link, developers.googl

00:10:30.795 --> 00:10:35.990
e.com/drive/scopes, you can see
all the developer scopes.

00:10:35.990 --> 00:10:39.570
There are more restrictive ones,
and they might be better

00:10:39.570 --> 00:10:40.920
for your application.

00:10:40.920 --> 00:10:46.030
Then we have the name of the
file we want to upload, which

00:10:46.030 --> 00:10:48.530
in our case is document.txt.

00:10:48.530 --> 00:10:55.120
And these five lines here are
the ones we need to perform

00:10:55.120 --> 00:10:56.110
the OAuth flow.

00:10:56.110 --> 00:10:57.950
You want to explain
what this does?

00:10:57.950 --> 00:10:58.680
VIC FRYZEL: Yeah.

00:10:58.680 --> 00:11:02.440
So we offer a number of helper
classes with the client

00:11:02.440 --> 00:11:05.720
libraries to make OAuth
easier to implement.

00:11:05.720 --> 00:11:08.090
We use one of them here, which
is the OAuth 2.0 web server

00:11:08.090 --> 00:11:09.700
flow class.

00:11:09.700 --> 00:11:15.030
And all this really does is
provide a handler for making

00:11:15.030 --> 00:11:16.230
OAuth requests.

00:11:16.230 --> 00:11:19.370
So here, we create the flow,
and then we also get the

00:11:19.370 --> 00:11:21.350
authorized URL in
the next step.

00:11:21.350 --> 00:11:23.670
And that's going to be the URL
that you're going to have the

00:11:23.670 --> 00:11:27.650
user copy and paste into
their browser.

00:11:27.650 --> 00:11:30.590
Once the user copies and pastes
that URL, they're going

00:11:30.590 --> 00:11:32.640
to click Allow Access.

00:11:32.640 --> 00:11:36.060
And then they're going
to get a code back.

00:11:36.060 --> 00:11:37.770
So the code is something
else that we have to

00:11:37.770 --> 00:11:38.570
plug into the flow.

00:11:38.570 --> 00:11:42.280
So we ask the user with
the raw input line to

00:11:42.280 --> 00:11:43.390
paste in the code.

00:11:43.390 --> 00:11:47.490
And then we take that, and we
exchange that code for a

00:11:47.490 --> 00:11:50.140
refresh token and
an access token.

00:11:50.140 --> 00:11:52.150
Once we have those, those are
actually stored in the

00:11:52.150 --> 00:11:53.440
credentials object.

00:11:53.440 --> 00:11:56.170
And the credentials objects is
what we're going to use to

00:11:56.170 --> 00:11:59.620
authorize our upcoming requests
to the Drive API.

00:11:59.620 --> 00:12:00.630
CLAUDIO CHERUBINO: Yeah.

00:12:00.630 --> 00:12:03.340
There's something we can add
about this OAuth flow.

00:12:03.340 --> 00:12:07.600
So whenever you go through
this flow, you get this

00:12:07.600 --> 00:12:09.210
refresh token and
access token.

00:12:09.210 --> 00:12:10.960
But every time you run the
application, the same

00:12:10.960 --> 00:12:13.840
application, you have to go
through this flow again and

00:12:13.840 --> 00:12:15.310
again and again.

00:12:15.310 --> 00:12:17.580
Of course, this is not what
the user would expect.

00:12:17.580 --> 00:12:23.140
So we could add some logic here
to sort the credentials

00:12:23.140 --> 00:12:26.560
we got, then reuse them if they
are already available.

00:12:26.560 --> 00:12:27.710
This is what the library does.

00:12:27.710 --> 00:12:30.350
So if you use the client
library, you have a very easy

00:12:30.350 --> 00:12:35.090
way to use some file storage
to sort your credential and

00:12:35.090 --> 00:12:36.610
reuse them when needed
and only trigger

00:12:36.610 --> 00:12:38.000
this flow when needed.

00:12:38.000 --> 00:12:40.790
But we're not doing it, because
this way, it's just

00:12:40.790 --> 00:12:41.700
easier to understand.

00:12:41.700 --> 00:12:43.820
But, of course, in your
application, it should take

00:12:43.820 --> 00:12:46.700
care of that.

00:12:46.700 --> 00:12:51.310
So we use our credentials to
authorize the HTTP LIB object,

00:12:51.310 --> 00:12:54.770
which is what we used to
send HTTP requests.

00:12:54.770 --> 00:12:59.570
And that is all we need to
build a Drive service.

00:12:59.570 --> 00:13:04.680
So using the client library,
what do you have to do to

00:13:04.680 --> 00:13:07.120
build a service whatever
the service is?

00:13:07.120 --> 00:13:09.020
In our case, it's Drive,
but it can be Google+.

00:13:09.020 --> 00:13:11.680
It can be any other API
service we have.

00:13:11.680 --> 00:13:15.250
You just need to specify what
the service name is, which is

00:13:15.250 --> 00:13:17.960
Drive, and a version.

00:13:17.960 --> 00:13:21.100
In our case, we're using
Drive API version 2.0.

00:13:21.100 --> 00:13:23.110
So the name of the
version is v2.

00:13:23.110 --> 00:13:27.130
And then we pass the
authorized HTTP

00:13:27.130 --> 00:13:29.050
object that we have.

00:13:29.050 --> 00:13:31.510
So that's one line to line to
instantiate the service.

00:13:31.510 --> 00:13:33.470
And then we have to
upload a file.

00:13:33.470 --> 00:13:35.030
This is what we want to do.

00:13:35.030 --> 00:13:40.180
And in order to do that, we
have first to define some

00:13:40.180 --> 00:13:43.880
metadata about the file, which,
of course, you can

00:13:43.880 --> 00:13:45.160
somehow automate.

00:13:45.160 --> 00:13:47.350
We have them hard coded here.

00:13:47.350 --> 00:13:53.725
So whatever the file is in my
local file system, its title

00:13:53.725 --> 00:13:56.290
on Google Drive will always
be my document.

00:13:56.290 --> 00:14:00.330
Its description will always be a
text document, and MIME type

00:14:00.330 --> 00:14:01.470
will be text plain.

00:14:01.470 --> 00:14:05.920
But, of course, you should make
this different according

00:14:05.920 --> 00:14:08.780
to what file you're passing.

00:14:08.780 --> 00:14:13.470
And we're using a media file
upload class to read the

00:14:13.470 --> 00:14:17.080
content of the file
from the disk.

00:14:17.080 --> 00:14:19.750
These two parts together, so the
media body, which is the

00:14:19.750 --> 00:14:22.930
content of the file, and the
body which is metadata, are

00:14:22.930 --> 00:14:28.200
used to send an insert request
to the files resource.

00:14:28.200 --> 00:14:32.950
So to insert a file on Drive,
you only need a single line of

00:14:32.950 --> 00:14:36.090
code, which is this.

00:14:36.090 --> 00:14:40.910
So you get the files resource
from the Drive service.

00:14:40.910 --> 00:14:44.980
The files resource has a number
of methods, including

00:14:44.980 --> 00:14:48.740
Insert, or Get, or
List, or Update.

00:14:48.740 --> 00:14:50.620
In our case, we want to
create a new file.

00:14:50.620 --> 00:14:51.920
So we call Insert.

00:14:51.920 --> 00:14:57.750
And you have to pass the body
of the object, which is the

00:14:57.750 --> 00:14:59.660
metadata, and the media body,
which is the content.

00:14:59.660 --> 00:15:00.630
And then you call Execute.

00:15:00.630 --> 00:15:01.470
And that's it.

00:15:01.470 --> 00:15:06.760
The last line in our file is
just used to show some results

00:15:06.760 --> 00:15:07.320
to the user.

00:15:07.320 --> 00:15:08.410
VIC FRYZEL: Which is what
prints the Unicode

00:15:08.410 --> 00:15:08.750
representation.

00:15:08.750 --> 00:15:09.520
CLAUDIO CHERUBINO: Yeah.

00:15:09.520 --> 00:15:11.260
It prints the JSON
representation.

00:15:11.260 --> 00:15:14.900
Yeah, and if you want to see if
we actually did something,

00:15:14.900 --> 00:15:18.990
we can go to my Drive account
and see that, hopefully, my

00:15:18.990 --> 00:15:19.690
document is here.

00:15:19.690 --> 00:15:21.130
It was updated--

00:15:21.130 --> 00:15:23.770
well, modified a couple of
minutes ago, because we just

00:15:23.770 --> 00:15:24.490
uploaded it.

00:15:24.490 --> 00:15:25.710
It's a text document.

00:15:25.710 --> 00:15:30.220
It can be open with the Google
Drive Viewer, which realizes

00:15:30.220 --> 00:15:33.200
that this is just
a text document.

00:15:33.200 --> 00:15:37.930
So it opens the content
here in this Viewer.

00:15:37.930 --> 00:15:39.290
So the file is here.

00:15:39.290 --> 00:15:41.940
It's called My Document, as you
know, because we selected

00:15:41.940 --> 00:15:43.100
that as the title.

00:15:43.100 --> 00:15:45.455
And its text content is here.

00:15:45.455 --> 00:15:46.970
VIC FRYZEL: So let's pull
out the code again.

00:15:46.970 --> 00:15:50.700
And then, we'll go through a
few ways in which we could

00:15:50.700 --> 00:15:54.080
improve this code for
real-world use.

00:15:54.080 --> 00:15:57.810
So as Claudio said before,
definitely cache the

00:15:57.810 --> 00:16:00.410
credentials that you get back
so that the user only has to

00:16:00.410 --> 00:16:01.830
run through this process once.

00:16:01.830 --> 00:16:04.760
If you want to get really
advanced, you could spawn your

00:16:04.760 --> 00:16:09.480
own web server in Python and
then set a redirect URI that

00:16:09.480 --> 00:16:14.140
is like the local web server,
and then automatically open up

00:16:14.140 --> 00:16:18.010
a browser on the user's behalf
that automatically goes to the

00:16:18.010 --> 00:16:19.510
authorization URL.

00:16:19.510 --> 00:16:22.470
And then once the user clicks
Allow Access, they would be

00:16:22.470 --> 00:16:28.810
redirected to the local web
server to collect the code.

00:16:28.810 --> 00:16:30.640
CLAUDIO CHERUBINO: Remember, if
you do that, you have to go

00:16:30.640 --> 00:16:34.940
back to the APIs console and
generate credentials for a web

00:16:34.940 --> 00:16:35.400
application.

00:16:35.400 --> 00:16:36.640
Let me go back to that.

00:16:36.640 --> 00:16:41.200
So in the APIs console, we have
these credentials for an

00:16:41.200 --> 00:16:42.980
installed application.

00:16:42.980 --> 00:16:46.310
You can have as many credentials
as you want.

00:16:46.310 --> 00:16:48.200
So we can create another
client ID.

00:16:48.200 --> 00:16:50.770
And this time, say it's
a web application.

00:16:50.770 --> 00:16:54.910
And what we have to specify here
is the redirect URI on my

00:16:54.910 --> 00:16:55.500
application.

00:16:55.500 --> 00:16:56.470
So I don't know.

00:16:56.470 --> 00:17:00.810
This might be my application
running on Claudio.com.

00:17:00.810 --> 00:17:02.700
So this will be the redirect.

00:17:02.700 --> 00:17:04.599
So I can create a client ID.

00:17:04.599 --> 00:17:10.630
And the redirect URI will be
claudio.com/OAuth2callback.

00:17:10.630 --> 00:17:11.869
Of course, you can change it.

00:17:11.869 --> 00:17:17.300
This is just the conventional
URL we have, but you can

00:17:17.300 --> 00:17:19.540
change it by going
to Edit settings.

00:17:19.540 --> 00:17:21.910
So I can say that the redirect
URI might be--

00:17:21.910 --> 00:17:22.150
I don't know--

00:17:22.150 --> 00:17:24.794
Redirect, and update it.

00:17:24.794 --> 00:17:28.700
VIC FRYZEL: If you don't have
a domain to go to, a valid

00:17:28.700 --> 00:17:31.480
redirect URI for installed
applications is always going

00:17:31.480 --> 00:17:37.240
to be a local host, which
means if you spawn a web

00:17:37.240 --> 00:17:41.430
server on the same system that
you're running this command

00:17:41.430 --> 00:17:43.900
line application, you can
actually redirect back to that

00:17:43.900 --> 00:17:45.040
local system.

00:17:45.040 --> 00:17:47.190
CLAUDIO CHERUBINO: Just remember
that the redirect URI

00:17:47.190 --> 00:17:49.970
must match exactly what
you have in your code.

00:17:49.970 --> 00:17:52.620
So if you have a specific
port number, you

00:17:52.620 --> 00:17:54.270
have add it as well.

00:17:54.270 --> 00:18:03.580
So if your redirect URI is on
http://localhostport3000, you

00:18:03.580 --> 00:18:04.420
have to write it like that.

00:18:04.420 --> 00:18:04.870
VIC FRYZEL: Exactly, yeah.

00:18:04.870 --> 00:18:06.460
CLAUDIO CHERUBINO: If there's a
trailing slash, you have to

00:18:06.460 --> 00:18:07.250
add a trailing slash.

00:18:07.250 --> 00:18:10.920
If it's HTTPS, you have
to specify it here.

00:18:10.920 --> 00:18:13.260
Of course, you can have
more than one.

00:18:13.260 --> 00:18:15.080
More than one redirect
URI is allowed.

00:18:15.080 --> 00:18:20.010
So maybe your server works on
both HTTP and HTTPS, so you

00:18:20.010 --> 00:18:24.650
can add two lines and have one
HTTP and one on HTTPS.

00:18:24.650 --> 00:18:26.970
And they're both allowed.

00:18:26.970 --> 00:18:29.210
VIC FRYZEL: In the real world,
though, unless you're

00:18:29.210 --> 00:18:30.480
redirecting the local
host, you should

00:18:30.480 --> 00:18:32.340
always be using HTTPS--

00:18:32.340 --> 00:18:33.220
always--

00:18:33.220 --> 00:18:37.350
to make sure that the code
doesn't get leaked in between

00:18:37.350 --> 00:18:40.120
in transit back to the user.

00:18:40.120 --> 00:18:41.940
CLAUDIO CHERUBINO: Just since
we're talking about redirect

00:18:41.940 --> 00:18:45.700
URIs, even when you create an
installed application, you

00:18:45.700 --> 00:18:47.390
still have redirect URI.

00:18:47.390 --> 00:18:52.590
But that has a special value,
which is this string here,

00:18:52.590 --> 00:18:55.090
which is defining the
OAuth 2.0 standards.

00:18:55.090 --> 00:18:56.180
You don't have to remember.

00:18:56.180 --> 00:18:58.070
This will be added for you
automatically, and you don't

00:18:58.070 --> 00:19:00.432
have to specify in your code.

00:19:00.432 --> 00:19:02.690
VIC FRYZEL: So that's just the
out-of-band redirect URI,

00:19:02.690 --> 00:19:04.370
which means there's no
redirect essentially.

00:19:04.370 --> 00:19:06.380
CLAUDIO CHERUBINO: Yeah,
so in our code, we

00:19:06.380 --> 00:19:07.290
didn't specify it.

00:19:07.290 --> 00:19:10.580
So the default value is
that it's out-of-band.

00:19:10.580 --> 00:19:12.880
VIC FRYZEL: There's some other
ways you can improve this.

00:19:12.880 --> 00:19:16.500
When setting the file name
variable, you could collect

00:19:16.500 --> 00:19:20.400
this from sys.argv in Python,
like a command line argument.

00:19:20.400 --> 00:19:23.930
Or you could prompt the user for
it to make the utility a

00:19:23.930 --> 00:19:28.350
little bit more useful and
easier to use over time.

00:19:28.350 --> 00:19:31.120
Some other things you might be
able to do are take some of

00:19:31.120 --> 00:19:33.410
the metadata on the command
line or just assume some

00:19:33.410 --> 00:19:36.210
defaults, like maybe set the
title to document.txt or the

00:19:36.210 --> 00:19:37.090
file name of the file.

00:19:37.090 --> 00:19:39.690
Try to guess the MIME type of
the file more intelligently.

00:19:39.690 --> 00:19:42.030
Don't always set it
to text plain.

00:19:42.030 --> 00:19:44.380
There are a lot of utilities in
Python to do this already.

00:19:44.380 --> 00:19:46.720
CLAUDIO CHERUBINO: Yeah, and
again, obviously, you can use

00:19:46.720 --> 00:19:51.470
the extension to do that or
other way more advanced ways

00:19:51.470 --> 00:19:53.820
to recognize what type
of file it is.

00:19:53.820 --> 00:19:55.480
VIC FRYZEL: So a common question
that people might

00:19:55.480 --> 00:19:59.970
have is when writing a command
line program to use the Drive

00:19:59.970 --> 00:20:02.700
API, how are you supposed
to securely

00:20:02.700 --> 00:20:05.190
store your client secret?

00:20:05.190 --> 00:20:07.740
And it's not always so simple in
a Python script as pasting

00:20:07.740 --> 00:20:10.390
in the client secret.

00:20:10.390 --> 00:20:12.820
In many languages, actually,
that's quite

00:20:12.820 --> 00:20:14.910
difficult to manage.

00:20:14.910 --> 00:20:19.670
So you could do something like
store the client secret in a

00:20:19.670 --> 00:20:22.260
web application on something
like Google App Engine and

00:20:22.260 --> 00:20:24.660
then have the command line
application query that from

00:20:24.660 --> 00:20:26.950
Google App Engine so that you're
not storing your client

00:20:26.950 --> 00:20:30.895
secret here in plain
text all the time.

00:20:30.895 --> 00:20:33.690
CLAUDIO CHERUBINO: And then, of
course, you can make this

00:20:33.690 --> 00:20:36.310
application more useful by
adding more commands.

00:20:36.310 --> 00:20:38.830
So as I said, this
does insert.

00:20:38.830 --> 00:20:41.610
But you have different methods,
all the methods you

00:20:41.610 --> 00:20:43.340
can see in our documentation.

00:20:43.340 --> 00:20:45.720
And so you could replace and
start with, let's say, List,

00:20:45.720 --> 00:20:48.860
to get the list of all your
documents or to get a specific

00:20:48.860 --> 00:20:50.100
document and so on.

00:20:50.100 --> 00:20:52.200
VIC FRYZEL: So Claudio, where
would people find

00:20:52.200 --> 00:20:53.460
documentation about that?

00:20:53.460 --> 00:20:55.210
CLAUDIO CHERUBINO: Documentation
for the Drive

00:20:55.210 --> 00:20:59.120
SDK is available at
developers.google.com/drive.

00:20:59.120 --> 00:21:01.570
And all the samples, including
this one, will

00:21:01.570 --> 00:21:02.960
be available there.

00:21:02.960 --> 00:21:07.060
We already have a more complex
Python sample in the

00:21:07.060 --> 00:21:07.800
documentation.

00:21:07.800 --> 00:21:10.800
That sample is for a web
application that uses App

00:21:10.800 --> 00:21:15.480
Engine and is more complicated
than this.

00:21:15.480 --> 00:21:16.470
It does a lot more.

00:21:16.470 --> 00:21:19.155
It's a complete text editor
that saves and reads files

00:21:19.155 --> 00:21:20.180
from Drive.

00:21:20.180 --> 00:21:23.950
But we will also add this very
easy quick start sample, so

00:21:23.950 --> 00:21:26.220
you can start with something
in five minutes.

00:21:26.220 --> 00:21:29.340
VIC FRYZEL: So we recommend that
you take a few minutes,

00:21:29.340 --> 00:21:31.575
walk through, copy and paste
this code, and see if you can

00:21:31.575 --> 00:21:32.860
get it running for yourself.

00:21:32.860 --> 00:21:35.550
Once you get this running,
expand it a little bit, get

00:21:35.550 --> 00:21:38.260
comfortable, and then move on
to the example application

00:21:38.260 --> 00:21:40.090
that we provide in
the documentation

00:21:40.090 --> 00:21:40.870
that Claudio mentioned.

00:21:40.870 --> 00:21:41.650
We call it Doctor Edit.

00:21:41.650 --> 00:21:43.766
It's just a full-on
web text editor.

00:21:43.766 --> 00:21:47.590
CLAUDIO CHERUBINO: And so we
also have these research

00:21:47.590 --> 00:21:48.990
samples from many
other languages.

00:21:48.990 --> 00:21:52.860
Maybe in one of the future GDL
sessions, we might go through

00:21:52.860 --> 00:21:55.920
all of them and see how they
work, how to set up the

00:21:55.920 --> 00:21:58.310
environment for the
other languages.

00:21:58.310 --> 00:22:01.430
So right now, we have ready
Java, well, Python you've seen

00:22:01.430 --> 00:22:06.100
in here, and PHP, Ruby,
and dot NET.

00:22:06.100 --> 00:22:11.280
So we can show all of them one
by one so that you might learn

00:22:11.280 --> 00:22:13.210
how to set up the environment
for each of them.

00:22:13.210 --> 00:22:15.770
VIC FRYZEL: So we like to hear
your feedback about what you'd

00:22:15.770 --> 00:22:18.200
like to see more frequently.

00:22:18.200 --> 00:22:21.030
So if you're really into Java,
tell us, and we'll do

00:22:21.030 --> 00:22:22.900
something similar
to this in Java.

00:22:22.900 --> 00:22:25.410
Maybe someday, we'll walk
through the text editor

00:22:25.410 --> 00:22:30.640
application in detail and show
you how the code works there.

00:22:30.640 --> 00:22:33.970
If you have any questions, be
sure to post them on YouTube.

00:22:33.970 --> 00:22:36.770
We do read those.

00:22:36.770 --> 00:22:40.326
I don't think that there are any
questions at the moment.

00:22:40.326 --> 00:22:42.520
CLAUDIO CHERUBINO: And remember,
any time you still

00:22:42.520 --> 00:22:47.270
have technical questions, we're
always on Stack Overflow

00:22:47.270 --> 00:22:50.240
with the Google-Drive-SDK tag.

00:22:50.240 --> 00:22:52.410
We read all the questions
there.

00:22:52.410 --> 00:22:54.980
And we're very active there.

00:22:54.980 --> 00:22:57.940
And not only us, but a lot of
developers are there, and they

00:22:57.940 --> 00:23:00.490
can already answer
many questions.

00:23:00.490 --> 00:23:04.060
So feel free to get in touch
with us on Stack Overflow,

00:23:04.060 --> 00:23:07.010
comment on this video,
or on Google+.

00:23:07.010 --> 00:23:09.800
We are also very active there.

00:23:09.800 --> 00:23:10.930
OK.

00:23:10.930 --> 00:23:11.485
I think--

00:23:11.485 --> 00:23:12.760
VIC FRYZEL: I think that's it.

00:23:12.760 --> 00:23:15.150
I don't think we have any
questions at the moment.

00:23:15.150 --> 00:23:17.150
So yeah, just post on
Stack Overflow.

00:23:17.150 --> 00:23:18.370
I guess that does
it for us today.

00:23:18.370 --> 00:23:18.970
CLAUDIO CHERUBINO: OK.

00:23:18.970 --> 00:23:20.160
Yeah, I think that's it.

00:23:20.160 --> 00:23:22.470
Thank you everyone
for watching us.

00:23:22.470 --> 00:23:24.120
Hope you find this useful.

00:23:24.120 --> 00:23:25.364
And see you next time.

00:23:25.364 --> 00:23:26.614
VIC FRYZEL: Bye.

