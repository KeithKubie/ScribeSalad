WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The answer is it requires me to completely trust Coleen.

00:00:04.000 --> 00:00:09.000
Coleen knows that I'm giving a message to her, and she can open that message

00:00:09.000 --> 00:00:11.000
and know that it goes to Alice.

00:00:11.000 --> 00:00:13.000
It doesn't require the first one.

00:00:13.000 --> 00:00:16.000
If Bob see me talking with Coleen, presumably that's not a problem.

00:00:16.000 --> 00:00:20.000
It doesn't require the second if Bob sees Coleen talking with Alice.

00:00:20.000 --> 00:00:22.000
That's also not a problem.

00:00:22.000 --> 00:00:26.000
If Bob sees both of those and sees them in quick succession,

00:00:26.000 --> 00:00:29.000
especially if he sees the envelopes being handed on,

00:00:29.000 --> 00:00:33.000
then he's got a good reason to suspect that I'm talking with Alice.

00:00:33.000 --> 00:00:35.000
So we need both of these properties.

00:00:35.000 --> 00:00:38.000
We need to know that Coleen can be trusted,

00:00:38.000 --> 00:00:42.000
and we need to know that Bob can't see both of these transactions.

00:00:42.000 --> 00:00:44.000
Those are pretty high security assumptions.

00:00:44.000 --> 00:00:47.000
We don't want to have to trust Coleen completely,

00:00:47.000 --> 00:00:50.000
and we don't want to rely on the fact that Bob can't see these two conversations.

00:00:50.000 --> 00:00:53.000
The way to make it more secure is to add a third person--

00:00:53.000 --> 00:00:55.000
let's say we know Edgar as well.

00:00:55.000 --> 00:00:59.000
Now instead of giving the message directly to Coleen,

00:00:59.000 --> 00:01:02.000
what I'm going to do is take the envelope for Coleen,

00:01:02.000 --> 00:01:08.000
put that inside an envelope for Edgar. We need to fold things a little to make them fit.

00:01:08.000 --> 00:01:14.000
Now I'm going to seal this envelope with a very secure seal

00:01:14.000 --> 00:01:17.000
that only Edgar can open.

00:01:17.000 --> 00:01:19.000
Now I'll give this to envelope to Edgar.

00:01:19.000 --> 00:01:25.000
Edgar will open it, see that it has an message for Coleen.

00:01:25.000 --> 00:01:28.000
Edgar will give the message to Coleen.

00:01:28.000 --> 00:01:34.000
Coleen will open that, see that it has a message for Alice, give the message to Alice.

00:01:34.000 --> 00:01:38.000
Alice will open the message

00:01:38.000 --> 00:01:41.000
and see that she shouldn't eat the onion.

00:01:41.000 --> 00:01:45.000
This has more protection. Now Coleen doesn't know that I'm communicating with Alice.

00:01:45.000 --> 00:01:48.000
Because the message is going like this:

00:01:48.000 --> 00:01:52.000
It's going first to Edgar, then to Coleen, then to Alice.

00:01:52.000 --> 00:01:56.000
Neither Edgar, nor Coleen knows that I'm communicating with Alice.

00:01:56.000 --> 00:02:01.000
Edgar knows that I'm sending a message through him that goes to Coleen.

00:02:01.000 --> 00:02:05.000
Coleen knows that she's receiving a message from Edgar, and it's going to Alice.

00:02:05.000 --> 00:02:08.000
Neither one knows both endpoints.

00:02:08.000 --> 00:02:10.000
If we add enough hops, this can start to be quite secure.

00:02:10.000 --> 00:02:12.000
This is actually called onion routing.

00:02:12.000 --> 00:02:14.000
That's why the message is to not eat the onion.

00:02:14.000 --> 00:02:17.000
The name comes from the idea that an onion has all these layers.

00:02:17.000 --> 00:02:21.000
As you peel off the layers, you get deeper into the onion.

00:02:21.000 --> 00:02:23.000
Doing this with envelopes would be pretty painful.

00:02:23.000 --> 99:59:59.000
We want to do this with math. How do we do this with cryptography.

