WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Let's answer this together.

00:00:02.000 --> 00:00:07.000
To answer it, I'm just going to review the 3 rules that talk about these trees.

00:00:07.000 --> 00:00:10.000
All of the left children of a node are less than or equal to it,

00:00:10.000 --> 00:00:13.000
all of the right children of a node are greater than or equal to it,

00:00:13.000 --> 00:00:17.000
and both of the children should follow rules I through III as well.

00:00:17.000 --> 00:00:19.000
This is a recursive data structure.

00:00:19.000 --> 00:00:22.000
Let's take a look at this first option here on the left. What could go in this box?

00:00:22.000 --> 00:00:26.000
Well, since it's a right child of this node labeled 1, by rule number II

00:00:26.000 --> 00:00:29.000
we know that it has to be greater than or equal to 1.

00:00:29.000 --> 00:00:34.000
And since it's eventually reachable on the left from 3,

00:00:34.000 --> 00:00:36.000
we know that it's less than or equal to 3.

00:00:36.000 --> 00:00:42.000
So the only things I could put in this box are 1, 2, or 3--not 7.

00:00:42.000 --> 00:00:46.000
It can't hold 7 because it has to be less than or equal to 3.

00:00:46.000 --> 00:00:48.000
So this one won't work out for us.

00:00:48.000 --> 00:00:51.000
By this same sort of reasoning--let's take a look at this box--

00:00:51.000 --> 00:00:56.000
we know it has to be greater than or equal to 3 because it's to the right of this 3 node

00:00:56.000 --> 00:00:59.000
but less than or equal to 5.

00:00:59.000 --> 00:01:03.000
So 4 would be a great thing to put there, but 7 doesn't fit.

00:01:03.000 --> 00:01:06.000
Down here we're getting a little bit closer.

00:01:06.000 --> 00:01:09.000
This node has to be less than or equal to 6

00:01:09.000 --> 00:01:12.000
but also greater than or equal to 5.

00:01:12.000 --> 00:01:14.000
This is a little harder to see in the picture,

00:01:14.000 --> 00:01:18.000
but starting from 5's right child I can eventually get down here.

00:01:18.000 --> 00:01:20.000
This is greater than or equal to 5.

00:01:20.000 --> 00:01:24.000
So maybe 5.5 could go in there but not 7.

00:01:24.000 --> 00:01:26.000
Over here--oh, I'm getting excited now--

00:01:26.000 --> 00:01:29.000
since I can reach it going to the left of 8,

00:01:29.000 --> 00:01:34.000
I need something less than or equal to 8 and something greater than or equal to 6.

00:01:34.000 --> 00:01:40.000
7 seems like a perfect thing to put here, so I could definitely add 7 to this part of my tree.

00:01:40.000 --> 00:01:43.000
Both of these would have to be greater than or equal to 8,

00:01:43.000 --> 00:01:45.000
so they're not good answers for 7.

00:01:45.000 --> 00:01:48.000
Now let's take a look at this evil box up here at the top.

00:01:48.000 --> 00:01:52.000
We've been describing trees with exactly 2 branches.

00:01:52.000 --> 00:01:55.000
We've been talking about the left child and the right child.

00:01:55.000 --> 00:01:58.000
I drew this mysterious third branch coming off of 5,

00:01:58.000 --> 00:02:03.000
and I drew it in the picture to the right, so you might be tempted to think,

00:02:03.000 --> 00:02:09.000
"Oh, this has to be a little better than 5 and a little less than 8, so 7 would be perfect."

00:02:09.000 --> 00:02:14.000
But in fact, the sort of recursive data structure we're describing

00:02:14.000 --> 00:02:18.000
allows exactly or up to 2 children.

00:02:18.000 --> 00:02:20.000
So it would be very tempting to put a 7 there,

00:02:20.000 --> 00:02:23.000
but that's not the kind of data structure we're describing.

00:02:23.000 --> 00:02:26.000
Now, don't feel bad if this one seemed very tempting to you.

00:02:26.000 --> 00:02:30.000
It's entirely possible to make trees like this that have 3 children every time

00:02:30.000 --> 00:02:32.000
or a variable number of children every time.

00:02:32.000 --> 00:02:35.000
But the practice problems I'm going to be going over

00:02:35.000 --> 09:59:59.000
require 1, 0, or 2.

