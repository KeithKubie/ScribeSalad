WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.190
so Matt we have had to chat with you

00:00:02.190 --> 00:00:04.230
before about assembler and the game that

00:00:04.230 --> 00:00:05.940
you're writing so what we can look at

00:00:05.940 --> 00:00:07.529
today we're going to write some basic

00:00:07.529 --> 00:00:09.929
game logic and assembly language first

00:00:09.929 --> 00:00:11.700
I'm going to show the basics of the CPU

00:00:11.700 --> 00:00:16.379
from a programmers point of view so

00:00:16.379 --> 00:00:18.810
let's invent a CPU it's going to have a

00:00:18.810 --> 00:00:20.970
logic core and because we're programmers

00:00:20.970 --> 00:00:22.560
we don't concern ourselves too much with

00:00:22.560 --> 00:00:24.480
that what we do care about the registers

00:00:24.480 --> 00:00:27.090
and registers are very tiny typically

00:00:27.090 --> 00:00:29.189
four to eight bytes of storage inside

00:00:29.189 --> 00:00:32.520
the CPU itself for the logic court to

00:00:32.520 --> 00:00:34.820
operate on so it's imagine we've got a

00:00:34.820 --> 00:00:37.950
register one a registered to and we've

00:00:37.950 --> 00:00:40.350
got the pc the pc is the program counter

00:00:40.350 --> 00:00:41.850
and that stores the currently executing

00:00:41.850 --> 00:00:44.940
line of code so if you imagine back to

00:00:44.940 --> 00:00:46.649
your basic days we would have something

00:00:46.649 --> 00:00:51.960
like 10 print hello 20 go to 10 so the

00:00:51.960 --> 00:00:54.449
1020 are the currently executing lines

00:00:54.449 --> 00:00:56.070
of code and basic obviously base it

00:00:56.070 --> 00:00:57.449
would have a software solution for this

00:00:57.449 --> 00:00:59.460
but the principle applies the pc would

00:00:59.460 --> 00:01:01.199
hold the 10 so the logic core would

00:01:01.199 --> 00:01:03.750
fetch that line of code to execute it

00:01:03.750 --> 00:01:05.129
would then advance the program counter

00:01:05.129 --> 00:01:07.590
to 20 and then execute that line of code

00:01:07.590 --> 00:01:11.220
but this go to routine would inject 10

00:01:11.220 --> 00:01:12.930
back into the program counter so the

00:01:12.930 --> 00:01:14.729
next line of code would then be 10 again

00:01:14.729 --> 00:01:17.009
so this logic call let's imagine it's

00:01:17.009 --> 00:01:20.640
attached to some pseudo rom some ram

00:01:20.640 --> 00:01:23.369
maybe a graphics processor or something

00:01:23.369 --> 00:01:25.439
along physical wires and this is what we

00:01:25.439 --> 00:01:27.360
call the bus so the logical can fetch

00:01:27.360 --> 00:01:29.189
memory about using an hour bus when it

00:01:29.189 --> 00:01:30.720
initializes it's going to immediately

00:01:30.720 --> 00:01:32.670
start executing code the program

00:01:32.670 --> 00:01:34.799
characters could be initialized to 0 at

00:01:34.799 --> 00:01:36.540
which point SAT rom in our pseudo memory

00:01:36.540 --> 00:01:38.189
map it's going to immediately start

00:01:38.189 --> 00:01:41.040
executing code from the top of ROM so

00:01:41.040 --> 00:01:42.509
let's write some assembly we can

00:01:42.509 --> 00:01:43.890
interact with the other two registers

00:01:43.890 --> 00:01:45.960
then so the first thing we want to do is

00:01:45.960 --> 00:01:47.670
put some basic values in these two so

00:01:47.670 --> 00:01:49.860
let's do a move command so we've got

00:01:49.860 --> 00:01:52.229
address 0 which is the top of run and

00:01:52.229 --> 00:01:54.180
this instruction is going to move the

00:01:54.180 --> 00:01:57.810
literal value 8 into register r1 so

00:01:57.810 --> 00:01:59.009
that's what that command would look like

00:01:59.009 --> 00:02:02.040
next line of code let's imagine these

00:02:02.040 --> 00:02:04.950
lines of code are two bytes wide address

00:02:04.950 --> 00:02:07.200
number two we're going to move the

00:02:07.200 --> 00:02:10.229
literal value for into register r2 and

00:02:10.229 --> 00:02:11.710
then as a third line

00:02:11.710 --> 00:02:14.170
address for we're going to add the two

00:02:14.170 --> 00:02:16.060
together so we'll perform an ab command

00:02:16.060 --> 00:02:17.680
we're going to add eight and four

00:02:17.680 --> 00:02:19.630
together which we're in r1 and r2 so we

00:02:19.630 --> 00:02:22.540
add r1 and r2 together and the result

00:02:22.540 --> 00:02:24.130
would be stored in our two so what's

00:02:24.130 --> 00:02:25.630
going to happen when the cpu starts up

00:02:25.630 --> 00:02:27.670
its going to initialize the pc 20 which

00:02:27.670 --> 00:02:29.500
is address 0 in the run where our code

00:02:29.500 --> 00:02:32.290
is address 0 is going to move the

00:02:32.290 --> 00:02:35.410
literal value 8 into register r1 it's

00:02:35.410 --> 00:02:36.670
then going to advance the program

00:02:36.670 --> 00:02:38.740
counter 22 which is going to move the

00:02:38.740 --> 00:02:41.470
literal value for into register r2 then

00:02:41.470 --> 00:02:42.730
it's going to advance the program

00:02:42.730 --> 00:02:45.160
counter 24 and that's going to add

00:02:45.160 --> 00:02:48.160
register one to register to it's going

00:02:48.160 --> 00:02:50.110
to store the value into register two so

00:02:50.110 --> 00:02:52.030
we would expect 12 and register at this

00:02:52.030 --> 00:02:54.070
point just like basic using the go to

00:02:54.070 --> 00:02:56.710
Thurmond go and you can jump the pc

00:02:56.710 --> 00:02:58.660
around so let's perform that out

00:02:58.660 --> 00:03:02.560
operation again so on a dress 6 i'm

00:03:02.560 --> 00:03:05.380
going to jump back up to address for and

00:03:05.380 --> 00:03:07.120
that's going to perform the add again so

00:03:07.120 --> 00:03:09.340
once this instruction is completed is

00:03:09.340 --> 00:03:11.290
going to jump to 6 and that is going to

00:03:11.290 --> 00:03:14.290
inject address for into the pc so that

00:03:14.290 --> 00:03:16.810
the next executing line of code is going

00:03:16.810 --> 00:03:18.430
to be back to four again so we're going

00:03:18.430 --> 00:03:21.520
to again add r1 to r2 which would give

00:03:21.520 --> 00:03:24.070
us 20 so that would add what was still

00:03:24.070 --> 00:03:26.680
in r12 what was now in our to after the

00:03:26.680 --> 00:03:30.460
last ad yes yes changes are explicit you

00:03:30.460 --> 00:03:32.410
tell the CPU exactly what to do is not

00:03:32.410 --> 00:03:35.140
going to change these register values

00:03:35.140 --> 00:03:37.360
outside of the code you've written here

00:03:37.360 --> 00:03:39.670
this looks really good for you know the

00:03:39.670 --> 00:03:42.070
basics of doing some sums and things now

00:03:42.070 --> 00:03:43.360
how's this blow when you get into a game

00:03:43.360 --> 00:03:45.670
and I can see this being a good good way

00:03:45.670 --> 00:03:47.350
for adding up the scores but yep

00:03:47.350 --> 00:03:50.680
certainly we are going to look at some

00:03:50.680 --> 00:03:52.540
very basic platforming code so we're

00:03:52.540 --> 00:03:54.610
going to have a pseudo player that's

00:03:54.610 --> 00:03:57.490
awful start a blank page let me first

00:03:57.490 --> 00:03:59.830
translate this to 68,000 assembler

00:03:59.830 --> 00:04:01.170
actually that's what I was going to do

00:04:01.170 --> 00:04:04.480
okay so the 68,000 CPU which is in the

00:04:04.480 --> 00:04:07.120
sega megadrive is slightly different to

00:04:07.120 --> 00:04:10.510
the cpu we invented here it's got 18

00:04:10.510 --> 00:04:14.950
registers which run from d0 to d7 for

00:04:14.950 --> 00:04:17.620
the general purpose registers those is

00:04:17.620 --> 00:04:19.260
used for a lot of logic and arithmetic

00:04:19.260 --> 00:04:22.450
we've also got a0 to a7 which are

00:04:22.450 --> 00:04:23.980
address registers which we use for

00:04:23.980 --> 00:04:24.920
accessing

00:04:24.920 --> 00:04:27.980
parts of memory rom ram other

00:04:27.980 --> 00:04:31.760
peripherals on the bus 68,000 logical

00:04:31.760 --> 00:04:36.650
we've got d0 to d7 registers we've got

00:04:36.650 --> 00:04:39.890
the a 0 to a 7 registers we've got the

00:04:39.890 --> 00:04:43.250
pc just like our fake cpu and the status

00:04:43.250 --> 00:04:45.800
register here the status register stores

00:04:45.800 --> 00:04:48.200
the state of the CPU after the last

00:04:48.200 --> 00:04:50.720
operation it'll have flags inside it

00:04:50.720 --> 00:04:52.370
called the Zed flag and the carry flag

00:04:52.370 --> 00:04:54.770
the Zed flag is used to determine if the

00:04:54.770 --> 00:04:57.710
result of the last operation was 0 so if

00:04:57.710 --> 00:05:00.380
we had four in our 14 and r2 and

00:05:00.380 --> 00:05:02.270
subtracted the to the result would be 0

00:05:02.270 --> 00:05:04.670
it would then set the carry flag we can

00:05:04.670 --> 00:05:06.980
use that to compare two numbers to see

00:05:06.980 --> 00:05:09.200
if they're equivalent it's also got the

00:05:09.200 --> 00:05:11.150
carry register which tells us if the

00:05:11.150 --> 00:05:12.650
result of the last operation was a

00:05:12.650 --> 00:05:15.290
positive number going negative so if we

00:05:15.290 --> 00:05:19.870
had seven in our one we had a 12 in r2

00:05:19.870 --> 00:05:23.600
and we subtracted are two from our 112

00:05:23.600 --> 00:05:25.490
is greater than 7 the result is going to

00:05:25.490 --> 00:05:27.230
go negative is going to set that carry

00:05:27.230 --> 00:05:29.480
flag and we can use that for comparison

00:05:29.480 --> 00:05:31.100
so we can compare two numbers and we can

00:05:31.100 --> 00:05:33.110
perform logic jump around to different

00:05:33.110 --> 00:05:34.910
parts of code depending on the state of

00:05:34.910 --> 00:05:37.100
the flags and the status register okay

00:05:37.100 --> 00:05:38.690
so we're going to translate our pseudo

00:05:38.690 --> 00:05:41.270
example here into real 68,000 assembly

00:05:41.270 --> 00:05:43.250
so the first command the move aight into

00:05:43.250 --> 00:05:46.190
register r1 will be a move and we need

00:05:46.190 --> 00:05:47.930
to add the size of the operation here

00:05:47.930 --> 00:05:49.640
and that can be a biter word or a long

00:05:49.640 --> 00:05:51.590
for simplicity's sake i'm going to use

00:05:51.590 --> 00:05:55.370
along a byte is eight bits a word is 16

00:05:55.370 --> 00:05:58.310
bits and a long word is 32 bits so we're

00:05:58.310 --> 00:06:00.380
going to move a long word worth of data

00:06:00.380 --> 00:06:03.350
32 bits it's going to be a literal value

00:06:03.350 --> 00:06:05.330
eight and we're going to use these d

00:06:05.330 --> 00:06:07.250
registers which are the general purpose

00:06:07.250 --> 00:06:10.780
or rhythmic registers so let's use d0

00:06:10.780 --> 00:06:13.520
next slime we're going to move another

00:06:13.520 --> 00:06:17.330
long word literal for into registered d1

00:06:17.330 --> 00:06:20.360
and add together we're going to add two

00:06:20.360 --> 00:06:23.480
long words worth of data register d 0 to

00:06:23.480 --> 00:06:25.790
D 1 i've used long list for simplicity a

00:06:25.790 --> 00:06:27.800
bite would only write the eight into the

00:06:27.800 --> 00:06:30.200
lower bite and this would be whatever

00:06:30.200 --> 00:06:32.450
was last in the upper bikes of that

00:06:32.450 --> 00:06:34.400
register if we were to write it as a

00:06:34.400 --> 00:06:37.340
word we would get 08 into the lower half

00:06:37.340 --> 00:06:37.980
of the reg

00:06:37.980 --> 00:06:39.630
and whatever was last used in the

00:06:39.630 --> 00:06:41.370
register would be in the upper half but

00:06:41.370 --> 00:06:43.080
I always really work with long words so

00:06:43.080 --> 00:06:47.490
this register would contain 0008 and the

00:06:47.490 --> 00:06:49.170
same goes for the add operation we're

00:06:49.170 --> 00:06:51.690
going to add 32 bits of data so the

00:06:51.690 --> 00:06:53.670
entire register is going to be added

00:06:53.670 --> 00:06:55.380
with the entirety of another register

00:06:55.380 --> 00:06:57.000
I'm going to type this back up into the

00:06:57.000 --> 00:06:58.080
pburg ER and I'm going to show this

00:06:58.080 --> 00:07:00.120
running in the debugger so we can

00:07:00.120 --> 00:07:02.310
evaluate evaluate each step as it's

00:07:02.310 --> 00:07:04.710
running and then we get to add to it

00:07:04.710 --> 00:07:06.570
with some basic platform player logic

00:07:06.570 --> 00:07:09.150
let's go some basic assembly language

00:07:09.150 --> 00:07:11.970
then I've got environment setup for 68 k

00:07:11.970 --> 00:07:14.130
assembler for the sega megadrive which

00:07:14.130 --> 00:07:16.500
includes a basic skeleton here the first

00:07:16.500 --> 00:07:18.930
thing we do is we define the start and

00:07:18.930 --> 00:07:20.880
the end of the ROM file for including in

00:07:20.880 --> 00:07:22.410
the head or later we're going to include

00:07:22.410 --> 00:07:24.750
the header file here and previously

00:07:24.750 --> 00:07:26.910
explained that the pseudo CPU that we

00:07:26.910 --> 00:07:29.130
made was going to start executing code

00:07:29.130 --> 00:07:31.800
from address 0 for 68 k it's very

00:07:31.800 --> 00:07:33.870
slightly different the CPUs not going to

00:07:33.870 --> 00:07:35.460
look for code when it starts up it's

00:07:35.460 --> 00:07:37.110
going to look for this table in the

00:07:37.110 --> 00:07:39.510
first 512 bytes of memory so the first

00:07:39.510 --> 00:07:40.980
thing it's going to look for is the

00:07:40.980 --> 00:07:43.200
address to initialize the stack value to

00:07:43.200 --> 00:07:44.790
and this is the one we're interested in

00:07:44.790 --> 00:07:47.160
here is the CPU entry point so it's

00:07:47.160 --> 00:07:48.960
going to start executing code from the

00:07:48.960 --> 00:07:50.760
address that it finds in this entry of

00:07:50.760 --> 00:07:52.920
the table rather than immediately stream

00:07:52.920 --> 00:07:55.500
address 0 so we can define a label here

00:07:55.500 --> 00:07:58.190
a CPU entry point and then back in our

00:07:58.190 --> 00:08:01.800
code file here we can start executing

00:08:01.800 --> 00:08:03.510
code from here because this is a

00:08:03.510 --> 00:08:05.280
debugger it's very slightly different to

00:08:05.280 --> 00:08:07.950
a standard program we have to initialize

00:08:07.950 --> 00:08:09.930
the connection to the debugger using

00:08:09.930 --> 00:08:11.460
this subroutine but don't worry too much

00:08:11.460 --> 00:08:13.500
about it so we can then start typing our

00:08:13.500 --> 00:08:15.540
code out so our example before was to

00:08:15.540 --> 00:08:18.300
move a long word literal eight into

00:08:18.300 --> 00:08:20.790
register d0 we were then going to move a

00:08:20.790 --> 00:08:24.060
long word little forward to reg D 1 and

00:08:24.060 --> 00:08:25.470
then we're going out of the two together

00:08:25.470 --> 00:08:30.030
so add long word worth of data d 0 to D

00:08:30.030 --> 00:08:32.190
1 and that should assemble and we can

00:08:32.190 --> 00:08:34.770
fire that up them ok so let's switch the

00:08:34.770 --> 00:08:37.470
devkit on load up the debugger and then

00:08:37.470 --> 00:08:39.330
we'll load our executable we have done a

00:08:39.330 --> 00:08:41.040
video on the dev kit for anyone who's

00:08:41.040 --> 00:08:42.990
interested oh just give people a kind of

00:08:42.990 --> 00:08:45.030
one sentence on what this dev kit is its

00:08:45.030 --> 00:08:48.180
a sega mega-cd development kit which has

00:08:48.180 --> 00:08:49.740
a snazzy

00:08:49.740 --> 00:08:52.830
board inside 468 keightley bugging on

00:08:52.830 --> 00:08:54.930
top of that it's got the Mega Drive

00:08:54.930 --> 00:08:56.550
daughter board on top of that it's got

00:08:56.550 --> 00:08:58.350
the mega-cd daughter board this is

00:08:58.350 --> 00:09:00.060
connected to the back of the pc by a

00:09:00.060 --> 00:09:03.420
scuzzy cable to a nicer card which can

00:09:03.420 --> 00:09:04.770
interact with the debugger here we've

00:09:04.770 --> 00:09:06.690
got an old ms-dos based debugger ready

00:09:06.690 --> 00:09:09.000
to debug code so it slowly executable

00:09:09.000 --> 00:09:11.100
the first thing we want to do is reset

00:09:11.100 --> 00:09:12.839
the CPU and then we can bring up a

00:09:12.839 --> 00:09:15.209
source window here ok so we can set a

00:09:15.209 --> 00:09:17.940
breakpoint on the first line as f9 to go

00:09:17.940 --> 00:09:20.820
so that executables now running on the

00:09:20.820 --> 00:09:22.950
debug get here and it's showing us in

00:09:22.950 --> 00:09:24.480
real time the results of that operation

00:09:24.480 --> 00:09:27.060
so we're on this breakpoint here so the

00:09:27.060 --> 00:09:28.890
first instruction was going to move the

00:09:28.890 --> 00:09:31.050
little eight and to register d0 so if we

00:09:31.050 --> 00:09:32.430
step we can see the result of that

00:09:32.430 --> 00:09:34.589
operation here the next line was going

00:09:34.589 --> 00:09:36.899
to move a little for into register d1 we

00:09:36.899 --> 00:09:39.000
can see the results of that here and

00:09:39.000 --> 00:09:40.140
then we're going to add the two together

00:09:40.140 --> 00:09:43.140
the d 0 plus d 1 and the result is going

00:09:43.140 --> 00:09:45.750
to be in d1 so that gives us 12 in

00:09:45.750 --> 00:09:47.850
hexadecimal here so that's all working

00:09:47.850 --> 00:09:49.740
if you didn't use this literal word you

00:09:49.740 --> 00:09:51.690
might be just overwriting some part of

00:09:51.690 --> 00:09:54.060
that memory yeah you can write a long

00:09:54.060 --> 00:09:56.700
word a word or a byte of data which will

00:09:56.700 --> 00:09:59.610
use the first bite two mics or four

00:09:59.610 --> 00:10:02.160
bikes for the register the same goes for

00:10:02.160 --> 00:10:05.910
add divide multiply subtract etc you

00:10:05.910 --> 00:10:08.459
have to specify how much the registers

00:10:08.459 --> 00:10:11.250
you're going to deal with that includes

00:10:11.250 --> 00:10:13.100
wrapping so if you're doing a bike tad

00:10:13.100 --> 00:10:16.290
255 would wrap around 20 if you're doing

00:10:16.290 --> 00:10:20.940
a word size at 65 k we're at 64 k would

00:10:20.940 --> 00:10:23.730
wrap around 20 again and it's not useful

00:10:23.730 --> 00:10:25.560
those things are useful in certain

00:10:25.560 --> 00:10:27.570
circumstances on yes tis yes because a

00:10:27.570 --> 00:10:29.399
smaller the operation the faster it

00:10:29.399 --> 00:10:31.260
executes on the CPU so you can do a lot

00:10:31.260 --> 00:10:33.060
of optimizations by doing by size

00:10:33.060 --> 00:10:35.070
operations instead of words or long

00:10:35.070 --> 00:10:37.170
words ok so we're going to write some

00:10:37.170 --> 00:10:39.750
basic platforming code imagine we've got

00:10:39.750 --> 00:10:42.839
a player at a floor and he has a

00:10:42.839 --> 00:10:45.690
positive x velocity and a positive y

00:10:45.690 --> 00:10:47.339
velocity so he is running and jumping

00:10:47.339 --> 00:10:49.170
and we're going to handle the logic back

00:10:49.170 --> 00:10:51.570
to move the player the first thing we

00:10:51.570 --> 00:10:53.399
want to do is to designate some

00:10:53.399 --> 00:10:55.290
registers for the player x and y

00:10:55.290 --> 00:11:00.860
position so if we initialize the players

00:11:00.939 --> 00:11:04.910
exposition a zero and to register d0 so

00:11:04.910 --> 00:11:07.699
play it x plus we can initialize the

00:11:07.699 --> 00:11:11.779
players y position zero and use d1 for

00:11:11.779 --> 00:11:13.639
that and then we can initialize the

00:11:13.639 --> 00:11:16.970
velocity values so in d2 let's store the

00:11:16.970 --> 00:11:20.749
X velocity something like 16 in 2d too

00:11:20.749 --> 00:11:24.559
so player X velocity and we're going to

00:11:24.559 --> 00:11:26.839
initialize the player y velocity to

00:11:26.839 --> 00:11:28.550
something positive because he's jumping

00:11:28.550 --> 00:11:33.499
so 8 in 2d three player y velocity okay

00:11:33.499 --> 00:11:35.029
so now we need a game loop so let's

00:11:35.029 --> 00:11:36.680
write a label for the top of the game

00:11:36.680 --> 00:11:39.019
loop let's call it player update and

00:11:39.019 --> 00:11:41.509
then we can start moving the player

00:11:41.509 --> 00:11:44.120
using the velocity so we would need to

00:11:44.120 --> 00:11:46.399
add players X velocity to the players

00:11:46.399 --> 00:11:48.740
backs cause so we're going to add do 220

00:11:48.740 --> 00:11:50.779
we're going to add the players y

00:11:50.779 --> 00:11:52.879
velocity the players y position so we're

00:11:52.879 --> 00:11:55.430
going to add d3 to do one so then we're

00:11:55.430 --> 00:11:56.600
going to loop back up to the player

00:11:56.600 --> 00:12:00.889
update start so if we do a jump back to

00:12:00.889 --> 00:12:03.350
player okay that's going to continue

00:12:03.350 --> 00:12:05.240
looping forever so let's save and

00:12:05.240 --> 00:12:07.579
assemble that and see it in action so

00:12:07.579 --> 00:12:09.290
this is a discreet bit of code for

00:12:09.290 --> 00:12:11.029
handling where that player is would that

00:12:11.029 --> 00:12:14.990
be right yes this is a very tiny game

00:12:14.990 --> 00:12:16.670
loop which would handle the velocity

00:12:16.670 --> 00:12:18.730
applying to reply x and y position

00:12:18.730 --> 00:12:20.930
obviously stuff would wrap around this

00:12:20.930 --> 00:12:23.149
for drawing the character and all yeah

00:12:23.149 --> 00:12:26.389
there will be extras here for the

00:12:26.389 --> 00:12:28.550
graphics once you calculate the players

00:12:28.550 --> 00:12:31.160
x and y position you would send it to

00:12:31.160 --> 00:12:33.649
the sprocket X on Y position that's a

00:12:33.649 --> 00:12:35.990
subject for another day though okay so

00:12:35.990 --> 00:12:38.329
let's break on this line will run again

00:12:38.329 --> 00:12:40.879
and then we can break here so let's

00:12:40.879 --> 00:12:43.370
initialize d0 to the play x position 0

00:12:43.370 --> 00:12:46.360
will initialize the player why pulse 20

00:12:46.360 --> 00:12:48.439
we're then going to initialize the place

00:12:48.439 --> 00:12:51.649
X velocity to 16 I'm going to initialize

00:12:51.649 --> 00:12:54.470
the y velocity 28 and then going to

00:12:54.470 --> 00:12:56.449
enter this infinite loop here so we're

00:12:56.449 --> 00:12:58.629
going to add the players X velocity 2z0

00:12:58.629 --> 00:13:01.009
going to add the players y velocity to

00:13:01.009 --> 00:13:03.139
d1 and I'm going to jump back up and I'm

00:13:03.139 --> 00:13:06.410
going to continue doing this forever and

00:13:06.410 --> 00:13:07.970
the loop would just basically make him

00:13:07.970 --> 00:13:09.699
move it will make a move for

00:13:09.699 --> 00:13:11.589
so he'll continue to move right he'll

00:13:11.589 --> 00:13:16.059
continue to jump up so he's jetpacking

00:13:16.059 --> 00:13:18.790
news jetpacking so let's add to it let's

00:13:18.790 --> 00:13:22.139
define gravity we would use the equate

00:13:22.139 --> 00:13:24.999
label and we'll have gravity as

00:13:24.999 --> 00:13:27.609
something like 8 let's define the floor

00:13:27.609 --> 00:13:32.649
height as something like seven I haven't

00:13:32.649 --> 00:13:34.329
use an odd number yet so in the player

00:13:34.329 --> 00:13:37.119
update before we apply the y velocity we

00:13:37.119 --> 00:13:39.249
want to apply the gravity to it so we

00:13:39.249 --> 00:13:42.189
can subtract long word it's a little so

00:13:42.189 --> 00:13:44.319
we need the hash again gravity from the

00:13:44.319 --> 00:13:46.540
player y velocity here before we apply

00:13:46.540 --> 00:13:49.449
it once the position has advanced we

00:13:49.449 --> 00:13:51.129
want to check if we've hit the floor so

00:13:51.129 --> 00:13:53.949
to do comparisons you want to watch the

00:13:53.949 --> 00:13:56.100
status register to look at the last

00:13:56.100 --> 00:13:59.230
state of the CPU for the last operation

00:13:59.230 --> 00:14:02.019
so if we do the subtraction one number

00:14:02.019 --> 00:14:03.579
from the other the status register will

00:14:03.579 --> 00:14:04.869
have a flag in it to tell us whether

00:14:04.869 --> 00:14:07.749
that number had become zero or had

00:14:07.749 --> 00:14:10.089
become a negative number so you want to

00:14:10.089 --> 00:14:12.129
compare the floor height with the

00:14:12.129 --> 00:14:14.410
players current white position if the

00:14:14.410 --> 00:14:15.939
result of that comparison was a negative

00:14:15.939 --> 00:14:19.569
number the player is below the floor so

00:14:19.569 --> 00:14:22.269
to do a comparison we would compare the

00:14:22.269 --> 00:14:24.399
literal floor height with the players

00:14:24.399 --> 00:14:27.129
wide position do you want and then we

00:14:27.129 --> 00:14:29.439
would jump to a separate part of the

00:14:29.439 --> 00:14:31.569
code if that condition was met so we do

00:14:31.569 --> 00:14:33.579
branch if greater than there's also

00:14:33.579 --> 00:14:36.279
branch of less than this beqa branch of

00:14:36.279 --> 00:14:38.199
equal there's also equivalent for

00:14:38.199 --> 00:14:40.600
unsigned numbers as well so that's

00:14:40.600 --> 00:14:42.669
basically saying if this certain thing

00:14:42.669 --> 00:14:44.350
is true then go to a different bit of

00:14:44.350 --> 00:14:46.509
code yes exactly so we start by

00:14:46.509 --> 00:14:48.009
comparing the floor height with a d1

00:14:48.009 --> 00:14:50.019
which in the background would perform a

00:14:50.019 --> 00:14:51.549
subtraction operation but without

00:14:51.549 --> 00:14:53.829
writing results when he registers it

00:14:53.829 --> 00:14:55.359
would only set the flags in the status

00:14:55.359 --> 00:14:57.249
register state say if the result of that

00:14:57.249 --> 00:14:59.709
operation would have been 0 or would

00:14:59.709 --> 00:15:01.720
have gone negative and then we can check

00:15:01.720 --> 00:15:04.209
those flags with the BGT branch if

00:15:04.209 --> 00:15:05.619
greater than so that's just going to

00:15:05.619 --> 00:15:09.639
check if the value for the carry flag is

00:15:09.639 --> 00:15:12.489
one or zero so branch is greater than

00:15:12.489 --> 00:15:14.439
and then we jump to another label so

00:15:14.439 --> 00:15:15.250
we'll call this

00:15:15.250 --> 00:15:17.110
floor and then we'll define that label

00:15:17.110 --> 00:15:20.380
here above floor so we compare the full

00:15:20.380 --> 00:15:22.390
height with d 1 if that was greater than

00:15:22.390 --> 00:15:23.860
then we are above the floor and we're

00:15:23.860 --> 00:15:25.360
going to skip this line of code we're

00:15:25.360 --> 00:15:26.500
about to write and head straight to

00:15:26.500 --> 00:15:28.990
above floor so if that condition was met

00:15:28.990 --> 00:15:31.090
we are below the floor and in that case

00:15:31.090 --> 00:15:33.760
we want to snap back the players white

00:15:33.760 --> 00:15:35.920
position to the floor height so we move

00:15:35.920 --> 00:15:37.630
the floor height to the players y

00:15:37.630 --> 00:15:40.570
position which is d1 we also want to

00:15:40.570 --> 00:15:41.980
null out the velocity because once we

00:15:41.980 --> 00:15:43.300
hit the floor we don't want to carry on

00:15:43.300 --> 00:15:47.110
going down so we reset that register to

00:15:47.110 --> 00:15:50.560
their player what y velocity will be 0

00:15:50.560 --> 00:15:52.630
in that case so let's assemble and run

00:15:52.630 --> 00:15:54.460
that and we can step through at one at a

00:15:54.460 --> 00:15:56.500
time so back in the debugger I've

00:15:56.500 --> 00:15:59.080
changed the initial x and y Paul so he's

00:15:59.080 --> 00:16:00.550
already above the floor for this

00:16:00.550 --> 00:16:02.290
demonstration so let's run this then

00:16:02.290 --> 00:16:05.470
initialize the exposition 28 we're going

00:16:05.470 --> 00:16:07.990
to initialize the y position 28 we've

00:16:07.990 --> 00:16:11.020
initialized the X velocity to 16 and the

00:16:11.020 --> 00:16:13.810
y velocity 28 so this time the first

00:16:13.810 --> 00:16:14.830
thing we're going to do is subtract

00:16:14.830 --> 00:16:17.320
gravity from the player y velocity so

00:16:17.320 --> 00:16:19.450
that sin that's down to four before we

00:16:19.450 --> 00:16:23.890
apply the x and y velocity so add d 2 to

00:16:23.890 --> 00:16:26.920
the 0 at d 3 to do one and then we're

00:16:26.920 --> 00:16:28.750
going to check if we are still above the

00:16:28.750 --> 00:16:29.890
floor so we're going to compare the

00:16:29.890 --> 00:16:32.050
floor height to the new white position

00:16:32.050 --> 00:16:34.990
and we're going to branch if it's above

00:16:34.990 --> 00:16:37.240
the floor which is still is so we skip

00:16:37.240 --> 00:16:38.500
straight to this line and then we jump

00:16:38.500 --> 00:16:40.660
back up the player update once again we

00:16:40.660 --> 00:16:43.210
subtract gravity from d3 which sends it

00:16:43.210 --> 00:16:45.460
0 which means we've hit the apex of the

00:16:45.460 --> 00:16:47.980
jump we're going to add the x la citty

00:16:47.980 --> 00:16:49.600
at the y velocity compare a

00:16:49.600 --> 00:16:51.160
four-syllable the floor which we still

00:16:51.160 --> 00:16:54.100
are once again we subtract gravity to d3

00:16:54.100 --> 00:16:56.589
and this now goes negative which means

00:16:56.589 --> 00:16:58.420
we're past the apex of the jump we're

00:16:58.420 --> 00:16:59.800
going to start applying downward

00:16:59.800 --> 00:17:02.200
velocity instead of upward velocity so

00:17:02.200 --> 00:17:05.050
once again apply the X velocity to the

00:17:05.050 --> 00:17:06.730
exposition the y velocity to the light

00:17:06.730 --> 00:17:08.290
position i'm going to start moving

00:17:08.290 --> 00:17:10.089
downwards instead and we're going to

00:17:10.089 --> 00:17:13.350
keep going until we are below the floor

00:17:13.350 --> 00:17:15.730
here so the floor height was set to

00:17:15.730 --> 00:17:18.850
seven the white position is now zero so

00:17:18.850 --> 00:17:21.189
this comparison is going to ring true

00:17:21.189 --> 00:17:23.500
branch is greater than above the floor

00:17:23.500 --> 00:17:26.980
which will fail there we go so we are

00:17:26.980 --> 00:17:28.929
now below the floor we need to snap back

00:17:28.929 --> 00:17:31.059
up to the floor height so we set the

00:17:31.059 --> 00:17:34.299
full height into the Y position you want

00:17:34.299 --> 00:17:37.179
and then we know the player y velocity

00:17:37.179 --> 00:17:39.309
qui don't want to carry on going down so

00:17:39.309 --> 00:17:42.399
the y velocity is now zero and then back

00:17:42.399 --> 00:17:45.399
at the player update and then forever we

00:17:45.399 --> 00:17:46.960
will always snap back up to that floor

00:17:46.960 --> 00:17:49.769
height and we are always on the floor so

00:17:49.769 --> 00:17:52.149
now he's still moving to the side but

00:17:52.149 --> 00:17:53.710
he's just staying on the floor here's

00:17:53.710 --> 00:17:54.999
just stay on the floor yes because

00:17:54.999 --> 00:17:56.769
gravity's are basically clamping him to

00:17:56.769 --> 00:17:59.529
the floor right yeah indeed from here on

00:17:59.529 --> 00:18:01.919
it's not tricky to add things like

00:18:01.919 --> 00:18:04.690
acceleration deceleration in air drag

00:18:04.690 --> 00:18:07.720
things like that and once you start

00:18:07.720 --> 00:18:09.879
getting into control pad input and stuff

00:18:09.879 --> 00:18:11.519
like that that you can then apply the

00:18:11.519 --> 00:18:13.749
acceleration to the current velocity and

00:18:13.749 --> 00:18:15.820
then have basic pad inputs we've seen on

00:18:15.820 --> 00:18:17.440
your game in the previous video that

00:18:17.440 --> 00:18:19.179
you've got bouncing balls in it and is

00:18:19.179 --> 00:18:21.009
that just an extension of this there's a

00:18:21.009 --> 00:18:22.990
very basic physics engine in there which

00:18:22.990 --> 00:18:25.899
is just an extension of all of this very

00:18:25.899 --> 00:18:27.549
basic collision detection is just

00:18:27.549 --> 00:18:30.789
comparison of numbers applying clamps or

00:18:30.789 --> 00:18:35.169
bounce or restitution etc you can build

00:18:35.169 --> 00:18:37.090
it all up like Lego blocks like this

00:18:37.090 --> 00:18:39.220
just learn one thing at the time and if

00:18:39.220 --> 00:18:40.720
somebody out there wants to learn this

00:18:40.720 --> 00:18:42.519
kind of stuff and they obviously haven't

00:18:42.519 --> 00:18:44.649
got the dev kit and all this old kit

00:18:44.649 --> 00:18:46.240
lying around where would you suggest

00:18:46.240 --> 00:18:48.519
they start to sort of learn these these

00:18:48.519 --> 00:18:50.230
basic bits and pieces you can do exactly

00:18:50.230 --> 00:18:52.179
the same thing using an emulator and

00:18:52.179 --> 00:18:54.759
there are some freeware assemblers out

00:18:54.759 --> 00:18:56.590
there you just need a text editor

00:18:56.590 --> 00:18:58.600
assembler and an emulation off you go

00:18:58.600 --> 00:19:00.639
some are better than others find one

00:19:00.639 --> 00:19:02.049
with a debugger built-in obviously

00:19:02.049 --> 00:19:04.210
otherwise you'll get a bit lost but all

00:19:04.210 --> 00:19:07.769
the principles are essentially the same

00:19:08.039 --> 00:19:09.760
is this whereas

00:19:09.760 --> 00:19:12.010
what's cuz he is yeah it pronounced

00:19:12.010 --> 00:19:15.580
scuzzy I didn't realize that it was such

00:19:15.580 --> 00:19:17.500
a widespread terminology I thought I'd

00:19:17.500 --> 00:19:19.600
get laughed at saying scuzzy so I said

00:19:19.600 --> 00:19:24.390
se SI but whatever thank you internet

