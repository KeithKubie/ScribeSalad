WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:04.840
Let's try to understand better the differences between a process and a thread.

00:00:04.840 --> 00:00:06.790
To recap from the previous lessons,

00:00:06.790 --> 00:00:11.400
a single thread of process is represented by its address space.

00:00:12.550 --> 00:00:16.100
The address space will contain all of the virtual to physical address

00:00:16.100 --> 00:00:19.890
mappings for the process, for its code, its data.

00:00:19.890 --> 00:00:22.030
Keep section files for everything.

00:00:22.030 --> 00:00:25.590
The process is also represented by its execution context that

00:00:25.590 --> 00:00:29.480
contains information about the values of the registers, the stack pointer,

00:00:29.480 --> 00:00:31.270
program counter, etc.

00:00:31.270 --> 00:00:36.170
The operating system represents all this information in a process control block.

00:00:36.170 --> 00:00:41.130
Threads, we said, represent multiple, independent execution contexts.

00:00:41.130 --> 00:00:44.650
They're part of the same virtual address space, which means that they

00:00:44.650 --> 00:00:48.270
will share all of the virtual to physical address mappings.

00:00:48.270 --> 00:00:51.320
They will share all the code, data, files.

00:00:51.320 --> 00:00:54.330
However, they will potentially execute different instructions,

00:00:54.330 --> 00:00:57.330
access different portions of that address space,

00:00:57.330 --> 00:01:01.620
operate on different portions of the input, and differ in other ways.

00:01:01.620 --> 00:01:05.239
This means that each thread will need to have a different program counter,

00:01:05.239 --> 00:01:09.060
stack pointer, stack, thread-specific registers.

00:01:09.060 --> 00:01:12.660
So we will have, for each and every thread, we will have to

00:01:12.660 --> 00:01:17.310
have separate data structures to represent this per-thread information.

00:01:17.310 --> 00:01:22.160
The operating system representation of such a multithreaded process will be

00:01:22.160 --> 00:01:27.040
a more complex process control block structure than what we saw before.

00:01:27.040 --> 00:01:31.092
This will contain all of the information that's shared among all the threads.

00:01:31.092 --> 00:01:35.864
So, the virtual address mappings, description about the code and data, etc.

00:01:35.864 --> 00:01:40.116
And it will also have separate information about every single one of

00:01:40.116 --> 00:01:43.410
the execution contexts that are part of that process

