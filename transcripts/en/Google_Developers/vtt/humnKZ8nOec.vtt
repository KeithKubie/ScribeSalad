WEBVTT
Kind: captions
Language: en

00:00:09.230 --> 00:00:09.790
Hi.

00:00:09.790 --> 00:00:10.720
I'm Mano Marks.

00:00:10.720 --> 00:00:14.010
I'm coming to you from the
Googleplex in Mountain View,

00:00:14.010 --> 00:00:15.230
California.

00:00:15.230 --> 00:00:17.570
I'm on the Maps Developer
Relations Team, and this is a

00:00:17.570 --> 00:00:22.950
new Google Maps shortcut on
using tile layers in the

00:00:22.950 --> 00:00:26.830
Google Maps SDK for iOS.

00:00:26.830 --> 00:00:28.050
So what is a tile layer?

00:00:28.050 --> 00:00:34.320
A tile layer is you providing
to the map a layer of raster

00:00:34.320 --> 00:00:39.580
images in a pre-defined URL
scheme that you give to us,

00:00:39.580 --> 00:00:46.000
and then we render those tiles
on top of our map in the SDK.

00:00:46.000 --> 00:00:51.030
So let's take a look
at a demo for you.

00:00:51.030 --> 00:00:55.650
This demo actually comes with
the Google Maps SDK.

00:00:55.650 --> 00:01:00.210
So if you download the SDK,
you'll see that it's in there.

00:01:00.210 --> 00:01:05.349
You add your own key, and then
you'll be able to run a

00:01:05.349 --> 00:01:07.810
variety of different samples.

00:01:07.810 --> 00:01:15.620
This one is a tile layer that
we generated for the 2010, I

00:01:15.620 --> 00:01:21.960
believe it was, Google I/O
showing the Moscone Center

00:01:21.960 --> 00:01:23.330
different floors.

00:01:23.330 --> 00:01:29.330
So you'll see here we have a
little controller which I can

00:01:29.330 --> 00:01:33.280
switch between, and we'll
see different maps.

00:01:33.280 --> 00:01:38.320
And you can even, if you watch
closely enough, see that you

00:01:38.320 --> 00:01:42.395
can see some of the tile
boundaries until I've loaded

00:01:42.395 --> 00:01:47.090
it enough times that that
doesn't show up.

00:01:47.090 --> 00:01:53.860
So what I'd like to do is show
you how to actually put this

00:01:53.860 --> 00:01:56.630
code on your own application.

00:01:56.630 --> 00:02:01.040
So let's take a look at
the sample code here.

00:02:01.040 --> 00:02:04.220
I'm not going to go through
all the constructing a map

00:02:04.220 --> 00:02:08.400
stuff because we've done
that many times.

00:02:08.400 --> 00:02:13.580
But let's just take a look at
this ChangeSwitcher here.

00:02:13.580 --> 00:02:20.380
So you'll see here there's a
GMSTileURLConstructor urls.

00:02:23.970 --> 00:02:29.670
Basically it's a quick method
to show how to construct a

00:02:29.670 --> 00:02:32.800
tile URL based on
your own tiles.

00:02:32.800 --> 00:02:37.470
So you see here you're passing
it at an x, a y, and a zoom.

00:02:37.470 --> 00:02:45.910
And these are the dimensions
of your tiles.

00:02:45.910 --> 00:02:50.480
So the base URL here is here.

00:02:50.480 --> 00:02:55.320
We're just showing you a URL
that we actually have at

00:02:55.320 --> 00:02:58.450
Google, tiles, and then you'll
see here this is a

00:02:58.450 --> 00:02:59.580
stringWithFormat there.

00:02:59.580 --> 00:03:03.960
It takes floor, zoom,
x, and y.

00:03:03.960 --> 00:03:08.140
So floor is the floor that
you've selected.

00:03:08.140 --> 00:03:12.260
So you can see you can construct
your own URL here,

00:03:12.260 --> 00:03:14.180
not just with the
x, y, and zoom.

00:03:17.830 --> 00:03:23.840
And then you create a new
GMSURLTileLayer and construct

00:03:23.840 --> 00:03:27.790
it with a tileLayerWithURL
Constructor:urls.

00:03:27.790 --> 00:03:35.710
And then you set the map on
that to your map view.

00:03:35.710 --> 00:03:39.870
So it's pretty easy to do once
you've constructed your own

00:03:39.870 --> 00:03:40.420
URL scheme.

00:03:40.420 --> 00:03:44.380
And you can use the same URL
scheme, the same formats, as

00:03:44.380 --> 00:03:48.870
you would use for an Android or
web application that would

00:03:48.870 --> 00:03:51.740
also be using a tile layer
or a tile overlay.

00:03:54.760 --> 00:04:04.940
We've also added the ability to
do customization for this.

00:04:04.940 --> 00:04:11.930
So you can actually generate
these tiles from URLs within

00:04:11.930 --> 00:04:18.170
your application or actually
generate custom

00:04:18.170 --> 00:04:19.750
images on the fly.

00:04:19.750 --> 00:04:22.040
So let's take a look here.

00:04:22.040 --> 00:04:23.170
I'm just going to show
you some of the

00:04:23.170 --> 00:04:24.420
basic code for that.

00:04:24.420 --> 00:04:29.150
Here we're subclassing
GMSSyncTileLayer.

00:04:29.150 --> 00:04:31.910
So that's the header.

00:04:31.910 --> 00:04:33.810
And then this is the
implementation.

00:04:33.810 --> 00:04:37.420
This is just code that's in
the documentation itself.

00:04:37.420 --> 00:04:40.300
So you see here in the
implementation, we are

00:04:40.300 --> 00:04:43.860
changing tile for
x, y, and zoom.

00:04:43.860 --> 00:04:50.720
And here, for every odd tile,
we're rendering an image and

00:04:50.720 --> 00:04:57.100
pulling up an image from the
resources named australia.

00:04:57.100 --> 00:05:01.850
So basically, it's just
rendering a map of Australia

00:05:01.850 --> 00:05:06.970
every other tile and then not
rendering one otherwise.

00:05:06.970 --> 00:05:09.250
So you can see here, there's
the constant

00:05:09.250 --> 00:05:10.500
GMSTileLayerNoTile.

00:05:12.650 --> 00:05:17.300
So let's take a look at the
demo again here, now that

00:05:17.300 --> 00:05:20.720
you've seen the code.

00:05:20.720 --> 00:05:24.130
So you see here, as we're
selecting the floor, it's

00:05:24.130 --> 00:05:30.110
passing, it's changing the URL
for the layer, setting the

00:05:30.110 --> 00:05:37.520
original layer to nil, and then
rendering new tiles on

00:05:37.520 --> 00:05:41.340
top of the map based
on that URL scheme.

00:05:41.340 --> 00:05:42.460
So that's it.

00:05:42.460 --> 00:05:44.800
It's actually a pretty
simple process.

00:05:44.800 --> 00:05:52.250
And this allows you to generate
your own imagery and

00:05:52.250 --> 00:05:57.550
map tiles and then render
them on top of our map.

00:05:57.550 --> 00:06:00.040
So that's all for this week.

00:06:00.040 --> 00:06:02.830
Thanks very much, and
happy mapping.

