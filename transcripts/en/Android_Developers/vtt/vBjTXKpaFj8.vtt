WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:01.570
JOANNA SMITH: Modern
Android devices

00:00:01.570 --> 00:00:04.800
have potentially lots of apps
with background services.

00:00:04.800 --> 00:00:07.090
And this is exactly
as it should be.

00:00:07.090 --> 00:00:09.740
But it can be problematic
when each of the services

00:00:09.740 --> 00:00:12.910
just runs willy-nilly all
over the user's processor.

00:00:12.910 --> 00:00:15.950
What we see happening on devices
in a low memory situation

00:00:15.950 --> 00:00:18.880
is that there is often a number
of background services running,

00:00:18.880 --> 00:00:20.920
but there isn't enough
memory for all of them.

00:00:20.920 --> 00:00:22.860
And when this happens
the operating system

00:00:22.860 --> 00:00:24.870
must swap a lot of
processes in and out

00:00:24.870 --> 00:00:27.350
of RAM, known as
memory thrashing.

00:00:27.350 --> 00:00:29.700
And this reduces the
overall system performance,

00:00:29.700 --> 00:00:31.620
which manifests as
poor performance

00:00:31.620 --> 00:00:35.440
for the app the user is actually
trying to use-- not great.

00:00:35.440 --> 00:00:38.750
So why do so many background
services trigger at once?

00:00:38.750 --> 00:00:42.070
Often it is in response
to an implicit broadcast.

00:00:42.070 --> 00:00:43.880
An implicit broadcast
is a trigger

00:00:43.880 --> 00:00:47.110
that declares an event instead
of calling a specific app,

00:00:47.110 --> 00:00:50.280
meaning that the reasonable use
case of passing some data along

00:00:50.280 --> 00:00:53.110
to another app to do a
task for you is lost.

00:00:53.110 --> 00:00:55.870
Instead, we have the
madness of a single app

00:00:55.870 --> 00:00:58.390
standing up and shouting that
it just did something cool.

00:00:58.390 --> 00:01:00.180
Who wants to come see?

00:01:00.180 --> 00:01:03.070
Even worse though, most
apps have a static receiver

00:01:03.070 --> 00:01:05.910
declared in their manifest
to listen for these, which

00:01:05.910 --> 00:01:07.910
means the app isn't even
running when it gets

00:01:07.910 --> 00:01:09.230
the broadcast for this event.

00:01:09.230 --> 00:01:12.770
So it is woken up solely for
the opportunity to respond.

00:01:12.770 --> 00:01:15.090
And the worst case is
an app being woken up

00:01:15.090 --> 00:01:16.880
to look at the event
and then deciding

00:01:16.880 --> 00:01:18.920
it wasn't interested
after all, and we just

00:01:18.920 --> 00:01:22.340
wasted several
precious RAM cycles.

00:01:22.340 --> 00:01:25.430
The most common instance of this
is with connectivity change.

00:01:25.430 --> 00:01:28.320
On some devices, we've seen
more than 40 apps woken up

00:01:28.320 --> 00:01:30.010
as a result of this broadcast.

00:01:30.010 --> 00:01:31.990
And when this broadcast
is sent frequently,

00:01:31.990 --> 00:01:34.380
it could mean hundreds of
wake-ups in a few minutes,

00:01:34.380 --> 00:01:36.530
crippling device performance.

00:01:36.530 --> 00:01:37.750
So what's the solution?

00:01:37.750 --> 00:01:40.434
Well, we're removing
connectivity change as well as

00:01:40.434 --> 00:01:41.850
a few other
broadcasts we commonly

00:01:41.850 --> 00:01:43.350
see causing this problem.

00:01:43.350 --> 00:01:45.460
Because any one app
isn't a bad actor,

00:01:45.460 --> 00:01:47.630
but many apps doing the
same not-so-great thing

00:01:47.630 --> 00:01:49.860
often translates to an
overwhelming problem

00:01:49.860 --> 00:01:52.060
that only the
platform can solve.

00:01:52.060 --> 00:01:53.600
So let's talk about
these changes.

00:01:53.600 --> 00:01:55.790
First, connectivity
change will no longer

00:01:55.790 --> 00:01:57.580
wake apps that are
targeting in if you

00:01:57.580 --> 00:01:59.852
declared a static
receiver in the manifest.

00:01:59.852 --> 00:02:01.560
If your app is already
running and you're

00:02:01.560 --> 00:02:03.185
registered your
receiver, you can still

00:02:03.185 --> 00:02:06.010
receive this broadcast, but
you will not wake up for it.

00:02:06.010 --> 00:02:07.579
Now, if you do
have some work that

00:02:07.579 --> 00:02:09.620
needs to be done based on
the connectivity change

00:02:09.620 --> 00:02:11.328
and regardless of
whether app is running,

00:02:11.328 --> 00:02:13.830
you'll want to schedule a job
with JobScheduler or Firebase

00:02:13.830 --> 00:02:15.650
JobDispatcher for the
network conditions

00:02:15.650 --> 00:02:18.005
you truly care about instead
of passively listening,

00:02:18.005 --> 00:02:20.630
and waking, and then checking to
see if the connectivity change

00:02:20.630 --> 00:02:22.000
was the right change for you.

00:02:22.000 --> 00:02:24.027
And when your app uses
JobScheduler and everyone

00:02:24.027 --> 00:02:25.610
else's apps start
using it, the system

00:02:25.610 --> 00:02:28.130
can batch all of those
jobs, leading to a much more

00:02:28.130 --> 00:02:30.890
stable situation overall.

00:02:30.890 --> 00:02:33.680
Another situation is with new
NEW_PICTURE and NEW_VIDEO.

00:02:33.680 --> 00:02:35.580
This is a critical
user experience moment

00:02:35.580 --> 00:02:38.410
because slowing down the
camera by waking all these apps

00:02:38.410 --> 00:02:41.400
can destroy the camera
experience causing users

00:02:41.400 --> 00:02:42.860
to miss the moment.

00:02:42.860 --> 00:02:44.880
These broadcasts aren't
sent by the system,

00:02:44.880 --> 00:02:46.610
but by apps, such as Camera.

00:02:46.610 --> 00:02:48.470
So we're removing it entirely.

00:02:48.470 --> 00:02:49.930
Know that these
two changes are not

00:02:49.930 --> 00:02:51.890
specific for apps
targeting NuGet.

00:02:51.890 --> 00:02:54.250
All apps on a device
that is running NuGet

00:02:54.250 --> 00:02:56.330
will no longer be
able to receive them

00:02:56.330 --> 00:02:58.540
regardless of which
version you're targeting.

00:02:58.540 --> 00:03:02.740
Both broadcasts have been
fully deprecated in API 24.

00:03:02.740 --> 00:03:04.690
The alternative
here is to again use

00:03:04.690 --> 00:03:07.430
JobScheduler, which has been
updated to consider content

00:03:07.430 --> 00:03:09.385
provider changes as a trigger.

00:03:09.385 --> 00:03:11.260
We're trying our best
to move to a world that

00:03:11.260 --> 00:03:13.190
is dynamic without
passive receivers

00:03:13.190 --> 00:03:14.780
claiming processor
time for work that

00:03:14.780 --> 00:03:16.349
should be done in a better way.

00:03:16.349 --> 00:03:18.140
So check out the Docs
for code you can copy

00:03:18.140 --> 00:03:19.730
and paste into your
own app and have

00:03:19.730 --> 00:03:22.410
some fun getting to know
JobScheduler's updated options.

00:03:22.410 --> 00:03:25.560
But most importantly, just
continue to build better apps.

00:03:25.560 --> 00:03:29.810
[MUSIC PLAYING]

