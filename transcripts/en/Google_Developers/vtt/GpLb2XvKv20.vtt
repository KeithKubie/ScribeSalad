WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.296
[APPLAUSE]

00:00:01.296 --> 00:00:02.610
MATTHEW SMITH: Well thank you.

00:00:02.610 --> 00:00:05.090
I am Matthew Smith, and
with me is John Ryan.

00:00:05.090 --> 00:00:08.400
And we are from Portland.

00:00:08.400 --> 00:00:11.390
You can probably tell
by my metro logging

00:00:11.390 --> 00:00:14.090
shirt, which feels out
of place a place up here.

00:00:14.090 --> 00:00:16.910
But we're going
to talk about how

00:00:16.910 --> 00:00:22.020
we have maximized our code
sharing between mobile and web

00:00:22.020 --> 00:00:24.920
thanks to Flutter.

00:00:24.920 --> 00:00:26.940
So a little bit about us--

00:00:26.940 --> 00:00:30.560
we are a PaaS company
for developers.

00:00:30.560 --> 00:00:32.840
And our goal is to make
enterprise software easier

00:00:32.840 --> 00:00:36.650
to build, support, and deploy.

00:00:36.650 --> 00:00:39.410
We have customers in
the commercial space,

00:00:39.410 --> 00:00:41.450
customers like
Wayfair and Taylor,

00:00:41.450 --> 00:00:44.300
higher education, some
great universities

00:00:44.300 --> 00:00:49.040
like Yale and Stanford, and we
are also in the public sector.

00:00:49.040 --> 00:00:51.290
We have research labs
and some municipalities

00:00:51.290 --> 00:00:52.640
that use our software.

00:00:52.640 --> 00:00:57.590
So all of these customers,
including about 100 others,

00:00:57.590 --> 00:01:00.500
are going to be going live
on our latest platform, which

00:01:00.500 --> 00:01:04.120
will include the
Flutter application.

00:01:04.120 --> 00:01:08.260
The first customer going
live is going to be Taylor.

00:01:08.260 --> 00:01:11.260
They are a 90-year-old
manufacturer

00:01:11.260 --> 00:01:12.640
of restaurant equipment.

00:01:12.640 --> 00:01:17.020
And this application will be
used in about 150,000 stores

00:01:17.020 --> 00:01:20.510
in North America, including
like McDonald's and Wendy's.

00:01:20.510 --> 00:01:23.900
So this is a big deal for us.

00:01:23.900 --> 00:01:28.960
So I'm going to talk a little
bit about our path to Flutter.

00:01:28.960 --> 00:01:32.560
We started back in 2012, and
we wanted to be mobile focused.

00:01:32.560 --> 00:01:38.500
And so we wrote our iOS app
in Objective-C. And in 2013,

00:01:38.500 --> 00:01:40.990
we wrote our
Android app in Java.

00:01:40.990 --> 00:01:43.360
We then rewrote our
iOS app and Swift,

00:01:43.360 --> 00:01:47.710
and we rewrote our
Android app in Kotlin.

00:01:47.710 --> 00:01:51.460
And then in 2016, we wanted
to add web to our platform,

00:01:51.460 --> 00:01:54.250
so we chose Dart for that.

00:01:54.250 --> 00:01:58.030
And now in 2018, we're happy
to say all of our clients

00:01:58.030 --> 00:02:00.580
are written in Dart,
and we're in the process

00:02:00.580 --> 00:02:03.710
of releasing that.

00:02:03.710 --> 00:02:05.650
So why did we start
with native coding?

00:02:05.650 --> 00:02:08.800
We started with native
coding because, for one, we

00:02:08.800 --> 00:02:10.930
needed or applications
to work offline.

00:02:10.930 --> 00:02:13.240
And this is a big deal
for our customers.

00:02:13.240 --> 00:02:14.250
They're down in vaults.

00:02:14.250 --> 00:02:17.560
They're in manholes, all kinds
of situations with no network.

00:02:17.560 --> 00:02:20.700
And so this was a must have.

00:02:20.700 --> 00:02:22.240
And because they're
working offline,

00:02:22.240 --> 00:02:24.080
and they're dealing
with enterprise data,

00:02:24.080 --> 00:02:25.330
they have millions of records.

00:02:25.330 --> 00:02:26.560
So they're down
there and they need

00:02:26.560 --> 00:02:28.268
to search hundreds of
thousands of parts,

00:02:28.268 --> 00:02:31.450
and those parts need to be
available, cached offline.

00:02:31.450 --> 00:02:34.997
And so that's a lot of
data for us to deal with.

00:02:34.997 --> 00:02:36.580
And then we have to
deal with security

00:02:36.580 --> 00:02:38.320
and regulatory compliance.

00:02:38.320 --> 00:02:42.910
And we felt that we could
handle this best with native.

00:02:42.910 --> 00:02:45.940
But this did create
a problem for us.

00:02:45.940 --> 00:02:48.670
For each client we built,
it took us about 18 months

00:02:48.670 --> 00:02:49.904
to build.

00:02:49.904 --> 00:02:51.445
And then, when we
did those rewrites,

00:02:51.445 --> 00:02:54.560
it took us about nine
months to rewrite them.

00:02:54.560 --> 00:02:58.570
And on top of that, it's very
difficult to hire and train

00:02:58.570 --> 00:03:01.300
developers on iOS and
Android, and especially

00:03:01.300 --> 00:03:02.920
if you're trying to
cross train them.

00:03:02.920 --> 00:03:05.320
So our solution
to this was let's

00:03:05.320 --> 00:03:09.070
build engineering teams for
iOS, for Android, and for web.

00:03:13.470 --> 00:03:16.800
As our product got
more sophisticated,

00:03:16.800 --> 00:03:18.659
the time to develop
new features increased.

00:03:18.659 --> 00:03:20.700
And we were developing
those features, of course,

00:03:20.700 --> 00:03:23.140
three times.

00:03:23.140 --> 00:03:26.160
So this problem just
continued to get worse

00:03:26.160 --> 00:03:27.520
as we start to grow.

00:03:27.520 --> 00:03:29.460
We were adding features.

00:03:29.460 --> 00:03:30.780
We were trying to catch up.

00:03:30.780 --> 00:03:33.330
And at the end of 2016, we
kind of looked at our platform

00:03:33.330 --> 00:03:36.120
and we thought, well, we're
about a year behind of getting

00:03:36.120 --> 00:03:39.660
these all up to feature parity.

00:03:39.660 --> 00:03:43.440
And so this led us to
why we chose Flutter.

00:03:43.440 --> 00:03:46.980
When we wrote our web client, we
really fell in love with Dart.

00:03:46.980 --> 00:03:50.710
And we saw Flutter.

00:03:50.710 --> 00:03:51.960
We were part of the community.

00:03:51.960 --> 00:03:53.370
We had been watching it.

00:03:53.370 --> 00:03:57.180
And we were excited about it.

00:03:57.180 --> 00:04:00.450
But we found that breaking up
is a really hard thing to do.

00:04:00.450 --> 00:04:06.510
We invested a lot of time and a
lot of money into our clients.

00:04:06.510 --> 00:04:10.170
And this was a tough
decision, but Flutter

00:04:10.170 --> 00:04:12.190
made it much, much easier.

00:04:12.190 --> 00:04:15.519
And we still get to
see Swift and Kotlin

00:04:15.519 --> 00:04:16.560
on the side for plug-ins.

00:04:19.410 --> 00:04:24.240
We also found that, for
enterprise software and for us,

00:04:24.240 --> 00:04:26.400
native coding for each
individual platform

00:04:26.400 --> 00:04:29.830
is just not sustainable.

00:04:29.830 --> 00:04:33.630
So what we did internally is
we agreed to a six-week project

00:04:33.630 --> 00:04:35.700
to kind of test the
waters of Flutter

00:04:35.700 --> 00:04:38.850
and make sure some
of the big questions

00:04:38.850 --> 00:04:40.620
that we had could be answered.

00:04:40.620 --> 00:04:45.060
And after just three weeks, we
had a functional Flutter client

00:04:45.060 --> 00:04:45.960
working.

00:04:45.960 --> 00:04:48.150
Obviously it wasn't
production ready,

00:04:48.150 --> 00:04:50.764
but it was enough to
prove to us that this

00:04:50.764 --> 00:04:51.930
is the move we need to make.

00:04:55.830 --> 00:04:59.490
So we found, when we
started doing our Flutter

00:04:59.490 --> 00:05:04.541
implementation, that most of
this code was already complete.

00:05:04.541 --> 00:05:05.790
We had written our web client.

00:05:05.790 --> 00:05:06.900
We had just finished that.

00:05:06.900 --> 00:05:09.000
And basically what we
were doing was going in

00:05:09.000 --> 00:05:11.460
and writing views for Flutter.

00:05:11.460 --> 00:05:18.960
And because the hot reloading
stuff that you just saw,

00:05:18.960 --> 00:05:21.390
building UI in Flutter
is extremely fast.

00:05:21.390 --> 00:05:23.760
And so we didn't
quite predict how fast

00:05:23.760 --> 00:05:26.370
we could build out our UI.

00:05:26.370 --> 00:05:28.650
And now we're going
to get into how

00:05:28.650 --> 00:05:30.004
we went about sharing our code.

00:05:30.004 --> 00:05:31.920
So John's going to come
up and talk about some

00:05:31.920 --> 00:05:35.270
of our techniques.

00:05:35.270 --> 00:05:36.850
JOHN RYAN: Thanks, Matt.

00:05:36.850 --> 00:05:39.240
So Matt mentioned that
three week number.

00:05:39.240 --> 00:05:42.030
And it's important to explain
where that number came from.

00:05:42.030 --> 00:05:45.510
It took a longer effort
over a period of time

00:05:45.510 --> 00:05:48.090
to kind of massage the code
base and get it to a point

00:05:48.090 --> 00:05:53.372
where we were ready to
implement our Flutter apps.

00:05:53.372 --> 00:05:55.080
And when we thought
about this, we really

00:05:55.080 --> 00:05:58.770
have tried to follow three
simple rules to do this.

00:05:58.770 --> 00:05:59.820
We used layers.

00:05:59.820 --> 00:06:04.150
So we thought of our
application as a layered system.

00:06:04.150 --> 00:06:06.370
We tried to take as
much important logic out

00:06:06.370 --> 00:06:09.530
of the views as possible.

00:06:09.530 --> 00:06:13.540
And we also tried to inject
dependencies into our entry

00:06:13.540 --> 00:06:14.770
points for our application.

00:06:14.770 --> 00:06:18.951
So depending on what app starts
up, we can inject those in.

00:06:18.951 --> 00:06:22.540
So let's talk about what
we mean by layers here.

00:06:22.540 --> 00:06:25.660
Well, this is an example of
a non-layered architecture.

00:06:25.660 --> 00:06:28.060
It's a simple Flutter
widget that you may write

00:06:28.060 --> 00:06:29.870
if you're testing things out.

00:06:29.870 --> 00:06:32.590
It queries Hacker News
and it calls setState

00:06:32.590 --> 00:06:35.810
when you get the result.

00:06:35.810 --> 00:06:38.480
But the problem with
this is that you

00:06:38.480 --> 00:06:41.870
can't share that Hacker News
request if you're trying

00:06:41.870 --> 00:06:43.880
to use it on web as well.

00:06:43.880 --> 00:06:50.570
So each layer, in our mind,
can use the layer below it.

00:06:50.570 --> 00:06:55.400
And, in general, it tries
to implement or interact

00:06:55.400 --> 00:06:58.400
with the other layers
in an abstract way.

00:06:58.400 --> 00:07:00.380
meaning they don't
concern themselves

00:07:00.380 --> 00:07:02.480
with the implementation.

00:07:02.480 --> 00:07:04.820
You may also want to do
this for other reasons.

00:07:04.820 --> 00:07:07.340
The primary one is to
target web in Flutter.

00:07:07.340 --> 00:07:08.520
You can swap the layers out.

00:07:08.520 --> 00:07:10.790
You can use a different
view for Flutter,

00:07:10.790 --> 00:07:14.450
and you can use a view for web.

00:07:14.450 --> 00:07:17.570
And you may just want to
minimize your dependencies

00:07:17.570 --> 00:07:20.000
between them and think
about the dependencies

00:07:20.000 --> 00:07:22.160
of your application
and understand

00:07:22.160 --> 00:07:23.911
each layer separately.

00:07:26.500 --> 00:07:28.360
This lower layer,
what we're talking

00:07:28.360 --> 00:07:30.970
about when we mean this are
things like Firebase things

00:07:30.970 --> 00:07:35.410
like JSON over HTTP,
web sockets, and things

00:07:35.410 --> 00:07:41.440
like caching on a local storage
or file system on Flutter.

00:07:41.440 --> 00:07:45.730
So package:http also allows
us to write our services

00:07:45.730 --> 00:07:46.830
in a cross-platform way.

00:07:46.830 --> 00:07:49.960
It's a cross-platform
HTTP request library.

00:07:49.960 --> 00:07:57.020
So our Hacker News service
asks for a generic HTTP client.

00:07:57.020 --> 00:07:59.560
And then, when
our app starts up,

00:07:59.560 --> 00:08:03.430
we know what client
to give our services.

00:08:03.430 --> 00:08:05.410
On browser, we can
use a browser client.

00:08:05.410 --> 00:08:08.370
And on Flutter, we
can use an IO client.

00:08:08.370 --> 00:08:10.630
And this is awesome.

00:08:10.630 --> 00:08:14.020
Our middle layer is where we're
going to be managing our state.

00:08:14.020 --> 00:08:16.930
And it contains all of
our domain-specific logic.

00:08:16.930 --> 00:08:19.490
And it interacts with the other
layers in an abstract way.

00:08:19.490 --> 00:08:21.910
It doesn't concern itself
with the implementation.

00:08:21.910 --> 00:08:24.880
Here we have a fancy controller,
and it asks for a view,

00:08:24.880 --> 00:08:27.860
and it asks for a service.

00:08:27.860 --> 00:08:29.860
And it's important to
note here that you can use

00:08:29.860 --> 00:08:31.364
whatever architecture you want.

00:08:31.364 --> 00:08:34.030
The important thing is that it's
separate from the other layers.

00:08:36.720 --> 00:08:39.850
At this top layer, we
obviously use Flutter,

00:08:39.850 --> 00:08:42.870
and we use Polymer
on our team, but you

00:08:42.870 --> 00:08:45.540
can use any view
implementation you want.

00:08:45.540 --> 00:08:49.109
And it also becomes easier
to switch between React

00:08:49.109 --> 00:08:50.150
and Angular, for example.

00:08:52.914 --> 00:08:55.080
There's a few patterns that
we found in our codebase

00:08:55.080 --> 00:08:56.740
that we use a lot.

00:08:56.740 --> 00:08:59.850
We think of our app in a
model view presenter way

00:08:59.850 --> 00:09:04.650
usually, where the view knows
what it needs from a presenter,

00:09:04.650 --> 00:09:08.070
and the controller can
implement that interface.

00:09:08.070 --> 00:09:10.350
Or we have a view
model that is a shared

00:09:10.350 --> 00:09:12.480
way of communicating
state changes

00:09:12.480 --> 00:09:16.150
and updates with its view.

00:09:16.150 --> 00:09:20.690
Or a view that implements an API
that is very clearly defined.

00:09:20.690 --> 00:09:25.000
For example, a view
just emits events

00:09:25.000 --> 00:09:26.760
and knows how to render itself.

00:09:29.420 --> 00:09:31.160
What we mean by
having a simple view

00:09:31.160 --> 00:09:33.920
is that it doesn't have as
much logic as you might put

00:09:33.920 --> 00:09:36.600
into a view on other platforms.

00:09:36.600 --> 00:09:40.310
And it implements an abstract
interface on Flutter and web.

00:09:43.760 --> 00:09:46.160
So this process of moving
code out of your views

00:09:46.160 --> 00:09:49.450
is just a matter of finding
the logic you want to take out,

00:09:49.450 --> 00:09:52.340
moving it into the
controller or into a service,

00:09:52.340 --> 00:09:56.294
and hopefully writing a
test as you're doing that.

00:09:56.294 --> 00:09:57.710
As you're doing
this, you may find

00:09:57.710 --> 00:09:59.793
that you're moving code
you didn't intend to move.

00:10:02.280 --> 00:10:05.070
In this example, we have
a bunch of dependencies.

00:10:05.070 --> 00:10:06.420
These are library imports.

00:10:06.420 --> 00:10:08.880
And one of them is
importing Dart HTML,

00:10:08.880 --> 00:10:12.810
and we can't import
Dart HTML in Flutter.

00:10:12.810 --> 00:10:15.180
One way to quickly
diagnose this problem

00:10:15.180 --> 00:10:19.690
is to build a test that
implements your controller.

00:10:19.690 --> 00:10:21.600
So as you're moving code
into your controller

00:10:21.600 --> 00:10:23.820
or your other state
management tool,

00:10:23.820 --> 00:10:25.980
you know instantly whether
you've moved something

00:10:25.980 --> 00:10:28.260
you didn't intend to move.

00:10:28.260 --> 00:10:30.330
And you get a little
error here saying,

00:10:30.330 --> 00:10:32.370
this code right here
is importing Dart HTML.

00:10:32.370 --> 00:10:33.328
And that's the problem.

00:10:36.219 --> 00:10:38.760
And you may just want to do this
because you want faster unit

00:10:38.760 --> 00:10:39.750
tests.

00:10:39.750 --> 00:10:41.670
Or you want to
build a command line

00:10:41.670 --> 00:10:44.250
tool that interacts with
your services in the same way

00:10:44.250 --> 00:10:46.011
that your app does.

00:10:46.011 --> 00:10:48.510
Or you may just want a cleaner
library and package structure

00:10:48.510 --> 00:10:53.030
that you can talk about
with your coworkers.

00:10:53.030 --> 00:10:56.550
OK, so that's rule two is
to keep your views simple.

00:10:56.550 --> 00:10:59.430
The third rule that we
noticed in our code base

00:10:59.430 --> 00:11:01.470
is we inject a lot
of dependencies

00:11:01.470 --> 00:11:04.980
and we just do this
in a simple way.

00:11:04.980 --> 00:11:07.100
We have an app controller.

00:11:07.100 --> 00:11:09.360
And app controller knows
what it needs to do its job.

00:11:09.360 --> 00:11:11.250
In this case, it's
calling a service

00:11:11.250 --> 00:11:13.710
and it's caching that data.

00:11:13.710 --> 00:11:16.530
And it doesn't concern
itself with how the service

00:11:16.530 --> 00:11:20.950
or cache is implemented.

00:11:20.950 --> 00:11:22.970
So the two rules here
are pretty easy to follow

00:11:22.970 --> 00:11:24.770
but hard to follow in practice.

00:11:24.770 --> 00:11:26.780
It's just about
asking for things

00:11:26.780 --> 00:11:28.430
and avoiding things
like singletons.

00:11:31.490 --> 00:11:33.760
OK, so after all that
what you end up with

00:11:33.760 --> 00:11:36.910
is, hopefully, a slightly
better architecture that

00:11:36.910 --> 00:11:38.710
can be used cross-platform.

00:11:38.710 --> 00:11:40.420
You have your
services at the bottom

00:11:40.420 --> 00:11:44.930
that use a cross-platform HTTP
library or some other library.

00:11:44.930 --> 00:11:47.680
And for things like
shared preferences,

00:11:47.680 --> 00:11:50.410
you have an app that has
some thing the user wants

00:11:50.410 --> 00:11:55.030
to save for their
use case, And you

00:11:55.030 --> 00:11:57.284
want to use the shared
preferences plug-in on Flutter.

00:11:57.284 --> 00:11:59.200
And you may choose to
implement that interface

00:11:59.200 --> 00:12:02.350
with local storage on the web.

00:12:02.350 --> 00:12:04.540
You have your middle
layer handling, hopefully,

00:12:04.540 --> 00:12:07.930
your complex logic and
your state management.

00:12:07.930 --> 00:12:11.170
And you have your view
layer that is implemented

00:12:11.170 --> 00:12:12.520
using the same interfaces.

00:12:12.520 --> 00:12:16.185
And it becomes very
clear the relationship

00:12:16.185 --> 00:12:17.060
between these layers.

00:12:19.580 --> 00:12:22.280
So let's go through an example.

00:12:22.280 --> 00:12:24.610
A big problem for
a lot of companies,

00:12:24.610 --> 00:12:27.910
unless you're at Google, is
deciding where to get lunch.

00:12:31.390 --> 00:12:35.600
So we solved this problem
by building a voting app.

00:12:35.600 --> 00:12:38.244
Our voting app is going to have
some state it needs to manage.

00:12:38.244 --> 00:12:39.910
It's going to have a
few pages that it's

00:12:39.910 --> 00:12:41.620
going to show to the user.

00:12:41.620 --> 00:12:45.010
A user might create an
election, enter their name,

00:12:45.010 --> 00:12:48.850
submit an idea, wait for other
people to join that election

00:12:48.850 --> 00:12:51.940
and vote, and then
show the results.

00:12:54.670 --> 00:12:58.290
So to do this, we can break
our app into separate packages.

00:12:58.290 --> 00:13:01.680
We can have our shared logic
in our Let's Vote package.

00:13:01.680 --> 00:13:03.790
We can build our
Flutter package.

00:13:03.790 --> 00:13:05.587
And we'll have our web package.

00:13:05.587 --> 00:13:07.170
Our Flutter and web
packages will just

00:13:07.170 --> 00:13:08.270
import our shared package.

00:13:11.140 --> 00:13:13.360
In our shared package,
we'll have some basic types,

00:13:13.360 --> 00:13:19.430
like an election,
a voter, an idea.

00:13:19.430 --> 00:13:23.120
And each class will know how
to serialize to and from JSON,

00:13:23.120 --> 00:13:27.180
using the JSON
serializable package.

00:13:27.180 --> 00:13:29.520
Now we need to
build our services.

00:13:29.520 --> 00:13:31.110
This is an example
of our shelf server

00:13:31.110 --> 00:13:33.150
that's serving our
rest end points.

00:13:33.150 --> 00:13:35.780
So we need to build
a service for this.

00:13:35.780 --> 00:13:38.970
Our service will use
package:http and implement

00:13:38.970 --> 00:13:40.770
methods like Create.

00:13:40.770 --> 00:13:44.130
So this will create an election.

00:13:44.130 --> 00:13:48.560
And this can be
shared cross-platform.

00:13:48.560 --> 00:13:52.280
This controller layer
will manage our state.

00:13:52.280 --> 00:13:55.310
And it will have a reference
to the view and service

00:13:55.310 --> 00:13:56.760
that it needs to do its job.

00:13:59.980 --> 00:14:03.520
A quick side note here,
this is an example

00:14:03.520 --> 00:14:07.090
of how we can test our
controller because we're

00:14:07.090 --> 00:14:08.890
using dependency injection.

00:14:08.890 --> 00:14:12.400
So we can mock a
view, mock a service,

00:14:12.400 --> 00:14:16.360
and call init and verify that
we're doing the right things.

00:14:19.580 --> 00:14:21.760
OK, so that's our
controller layer.

00:14:21.760 --> 00:14:23.510
And for our view layer,
we need to wire up

00:14:23.510 --> 00:14:26.030
that two-way relationship
between the view

00:14:26.030 --> 00:14:28.700
and its presenter,
the controller.

00:14:28.700 --> 00:14:30.890
So we'll call init in
our app controller,

00:14:30.890 --> 00:14:34.120
and that'll expect an app view.

00:14:34.120 --> 00:14:36.680
Then, in our Flutter
app, we can just

00:14:36.680 --> 00:14:40.160
call things like
controller startbyCreating,

00:14:40.160 --> 00:14:43.856
which will call the presenter
and create the election.

00:14:43.856 --> 00:14:45.230
On web, we can do
the same thing.

00:14:48.910 --> 00:14:52.230
So to make that work, we
implement our app controller

00:14:52.230 --> 00:14:53.699
using various pieces.

00:14:53.699 --> 00:14:55.740
And in this case, the only
piece that's different

00:14:55.740 --> 00:14:58.710
is the client, the HTTP client.

00:14:58.710 --> 00:15:01.260
On Flutter we use
a browser client--

00:15:01.260 --> 00:15:02.550
or a regular client.

00:15:02.550 --> 00:15:05.190
And on web we use
a browser client.

00:15:05.190 --> 00:15:08.640
And you can see the components
here re implementing AppView.

00:15:08.640 --> 00:15:11.100
It's implementing
that interface.

00:15:11.100 --> 00:15:14.150
And on Flutter it's
implementing that state object.

00:15:14.150 --> 00:15:16.090
The state object in
implementing the view.

00:15:19.990 --> 00:15:22.570
Once we do this, we can
fix cross-platform bugs.

00:15:22.570 --> 00:15:25.092
So as we were doing this,
we actually wrote a bug.

00:15:25.092 --> 00:15:26.050
That's very easy to do.

00:15:26.050 --> 00:15:30.670
We sorted the voters,
or the votes--

00:15:30.670 --> 00:15:34.150
we sorted the ideas by the
vote, and we messed it up.

00:15:34.150 --> 00:15:39.702
It returned the list
in low-to-high order.

00:15:39.702 --> 00:15:42.160
So we need to reverse the list
to return the actual winner,

00:15:42.160 --> 00:15:44.510
not the loser.

00:15:44.510 --> 00:15:47.110
OK, so let's see a quick demo.

00:15:47.110 --> 00:15:50.740
In this demo, we have our web
version running and our Flutter

00:15:50.740 --> 00:15:52.030
version running.

00:15:52.030 --> 00:15:54.270
We'll create an election.

00:15:54.270 --> 00:15:56.050
And this will call
our REST services

00:15:56.050 --> 00:15:58.830
using the same shared service.

00:15:58.830 --> 00:16:02.290
It will call Create.

00:16:02.290 --> 00:16:05.650
So Eric is going to enter an
idea for where to get lunch.

00:16:09.830 --> 00:16:12.590
All the state management
in this application

00:16:12.590 --> 00:16:14.855
is managed by the
same controller class.

00:16:17.360 --> 00:16:21.260
Now Somebody on the Flutter
app is going to [INAUDIBLE]

00:16:21.260 --> 00:16:22.490
the wrong code.

00:16:22.490 --> 00:16:24.710
And once they enter
the wrong code,

00:16:24.710 --> 00:16:26.930
the controller knows that
and can tell the view,

00:16:26.930 --> 00:16:28.970
"I want you to show an error."

00:16:28.970 --> 00:16:33.240
And on Flutter, you
call showDialog.

00:16:33.240 --> 00:16:39.090
Now they're going to enter
their name, submit their idea--

00:16:39.090 --> 00:16:42.280
sizzle pie.

00:16:42.280 --> 00:16:45.910
And now the voting can occur,
and we can determine a winner.

00:16:50.930 --> 00:16:54.260
All right, so problem solved.

00:16:54.260 --> 00:16:57.140
[APPLAUSE]

00:17:01.197 --> 00:17:03.030
So following these three
simple rules really

00:17:03.030 --> 00:17:05.849
helped us think about how
to do this in a way that

00:17:05.849 --> 00:17:09.690
was really effective and get
to that three-week number

00:17:09.690 --> 00:17:11.640
that we showed.

00:17:11.640 --> 00:17:13.440
The app is hosted on GitHub.

00:17:13.440 --> 00:17:15.270
You can actually
use the app if you

00:17:15.270 --> 00:17:17.040
go to that URL on the right.

00:17:17.040 --> 00:17:19.140
And it's running on
a single instance,

00:17:19.140 --> 00:17:22.390
so like most voting systems,
it's also not secure.

00:17:22.390 --> 00:17:23.460
Be nice to it.

00:17:23.460 --> 00:17:24.170
You know.

00:17:24.170 --> 00:17:27.050
[LAUGHTER]

00:17:31.380 --> 00:17:35.250
MATTHEW SMITH: All right, so
we are fairly new to this,

00:17:35.250 --> 00:17:36.690
but we've learned
a lot of things

00:17:36.690 --> 00:17:40.050
so far that we thought
we should share.

00:17:40.050 --> 00:17:43.080
The first thing is we've
been able to share about 70%

00:17:43.080 --> 00:17:46.830
of our code between
web and mobile.

00:17:46.830 --> 00:17:48.720
And this includes our tests.

00:17:48.720 --> 00:17:53.490
But this is a big number, so we
were really excited about this.

00:17:53.490 --> 00:17:57.330
Going back over our development
timeline, iOS and Android

00:17:57.330 --> 00:18:01.470
back in 2013, '14, '15, we
weren't sharing any code.

00:18:01.470 --> 00:18:06.750
I have 15% up there
because we had some idea

00:18:06.750 --> 00:18:09.780
sharing between iOS and Android
because Kotlin and Swift were

00:18:09.780 --> 00:18:11.970
fairly similar, and
we were using Realm

00:18:11.970 --> 00:18:13.860
as a cross-platform store.

00:18:13.860 --> 00:18:18.240
And we were using RX, and so
you can copy some Swift code,

00:18:18.240 --> 00:18:21.750
and paste it in Kotlin, and
massage it, and hey, you know,

00:18:21.750 --> 00:18:25.050
share some of the same ideas,
but obviously not real sharing.

00:18:25.050 --> 00:18:30.270
Now in 2018, 70% real sharing,
and all of our clients

00:18:30.270 --> 00:18:30.800
are in Dart.

00:18:33.900 --> 00:18:37.550
So going back to
the time it took us,

00:18:37.550 --> 00:18:40.000
it took us 18 months
for each platform.

00:18:40.000 --> 00:18:45.390
And a lot of that was we
were developing new features

00:18:45.390 --> 00:18:47.940
as we were trying to catch
up our platforms that we're

00:18:47.940 --> 00:18:48.480
developing.

00:18:48.480 --> 00:18:50.535
So it's not like--

00:18:50.535 --> 00:18:52.830
it was a catch-up
game the whole time.

00:18:52.830 --> 00:18:55.680
Because we started building
Flutter so fast though,

00:18:55.680 --> 00:18:59.090
what we decided was all new
features go in Flutter only.

00:18:59.090 --> 00:19:02.280
And at the speed
we were developing,

00:19:02.280 --> 00:19:04.270
we knew that was viable for us.

00:19:04.270 --> 00:19:07.110
So now with our latest release,
there's no more catch-up.

00:19:07.110 --> 00:19:12.660
We're done with that game, which
is very-- it's a big relief.

00:19:12.660 --> 00:19:15.939
And also, 70% is a great number.

00:19:15.939 --> 00:19:17.730
But it's not the amount
of code that you're

00:19:17.730 --> 00:19:18.896
sharing that really matters.

00:19:18.896 --> 00:19:20.910
It's what code you're sharing.

00:19:20.910 --> 00:19:24.000
And what we're sharing is the
most mission-critical code.

00:19:24.000 --> 00:19:28.200
It's the stuff that's dealing
with security, and persistence,

00:19:28.200 --> 00:19:30.030
and talking to our services.

00:19:30.030 --> 00:19:33.240
And it's where you'll
find most of your bugs.

00:19:33.240 --> 00:19:38.490
And so it's also the code that
is the most expensive to write.

00:19:38.490 --> 00:19:40.080
It takes your most
senior engineers.

00:19:40.080 --> 00:19:42.300
And it's the most
expensive to maintain.

00:19:46.820 --> 00:19:49.310
We also learned that hot
reload is the real deal.

00:19:49.310 --> 00:19:52.819
So everybody sees
the counter going up

00:19:52.819 --> 00:19:55.360
and the counter going down as
you change your code on the web

00:19:55.360 --> 00:19:55.970
site.

00:19:55.970 --> 00:19:58.460
And that's super
exciting, obviously.

00:19:58.460 --> 00:20:01.670
But we have built
a big application

00:20:01.670 --> 00:20:04.280
on this with a lot of state
and a lot of complexity.

00:20:04.280 --> 00:20:07.190
And we use this
every day, and it

00:20:07.190 --> 00:20:09.830
has made a world of
difference in our development.

00:20:09.830 --> 00:20:12.440
So much so that we develop
all of our features

00:20:12.440 --> 00:20:15.020
on Flutter first because
with hot reloading

00:20:15.020 --> 00:20:17.690
we can write it so fast,
and testing is so fast

00:20:17.690 --> 00:20:20.630
that all we've got to do,
when we're done with Flutter,

00:20:20.630 --> 00:20:22.760
is go back and implement
the view on web.

00:20:22.760 --> 00:20:27.952
So it's really, changed
our approach to this.

00:20:27.952 --> 00:20:30.410
We are developing features at
three times the speed we were

00:20:30.410 --> 00:20:31.640
before, for obvious reasons.

00:20:31.640 --> 00:20:34.100
We're not writing
it three times.

00:20:34.100 --> 00:20:36.950
And this is a real number.

00:20:36.950 --> 00:20:38.720
Our features are
of higher quality

00:20:38.720 --> 00:20:43.610
because we are testing better,
we're all reviewing each others

00:20:43.610 --> 00:20:48.050
code, and we're all
thinking about the problem

00:20:48.050 --> 00:20:50.630
in the same way.

00:20:50.630 --> 00:20:53.330
And we've reduced our
QA time significantly.

00:20:53.330 --> 00:20:55.250
And a lot of this
is because, when

00:20:55.250 --> 00:20:58.360
that logic is all contained
in the controller, before--

00:20:58.360 --> 00:21:01.045
an update was made, you've
got to test something in iOS,

00:21:01.045 --> 00:21:02.420
you've got to test
it on Android,

00:21:02.420 --> 00:21:03.740
you got to test it on web.

00:21:03.740 --> 00:21:06.080
And now we can communicate
to our QA people

00:21:06.080 --> 00:21:09.050
that this fix was made
at the controller layer.

00:21:09.050 --> 00:21:12.530
There's a good possibility it's
fixed across all platforms.

00:21:12.530 --> 00:21:15.380
And this has really
sped things up.

00:21:15.380 --> 00:21:17.420
And probably the best
thing about all this

00:21:17.420 --> 00:21:20.090
is that the three
teams that we've had

00:21:20.090 --> 00:21:25.430
are now one big Flutter and
web team, all writing Dart.

00:21:25.430 --> 00:21:31.220
And so this has been one of
those things that sounds great,

00:21:31.220 --> 00:21:32.945
but you just don't
know how much--

00:21:32.945 --> 00:21:35.320
it's just so exciting to have
everybody on the same page.

00:21:35.320 --> 00:21:37.420
We sit down and
we plan a feature.

00:21:37.420 --> 00:21:39.810
And everybody is
equally involved.

00:21:39.810 --> 00:21:42.590
There's no miscommunication
between teams.

00:21:42.590 --> 00:21:46.190
And we're all thinking
about the problem

00:21:46.190 --> 00:21:47.810
from the same perspective.

00:21:47.810 --> 00:21:51.320
So this has made us
very happy developers.

00:21:51.320 --> 00:21:53.510
And our team's very happy.

00:21:53.510 --> 00:21:57.920
And so we love it.

00:21:57.920 --> 00:22:01.670
We wrote some more information
about this on our blog,

00:22:01.670 --> 00:22:04.030
so you can check that out.

00:22:04.030 --> 00:22:07.070
We wrote a Maps
plug-in, and also John

00:22:07.070 --> 00:22:10.970
has a code sharing write
up that he did along

00:22:10.970 --> 00:22:15.470
with some of the changes
it created in our business.

00:22:15.470 --> 00:22:16.770
So that is it.

00:22:16.770 --> 00:22:17.690
Thank you.

00:22:17.690 --> 00:22:21.040
And definitely
check out Flutter.

00:22:21.040 --> 00:22:21.640
It's great.

00:22:21.640 --> 00:22:23.490
[APPLAUSE]

