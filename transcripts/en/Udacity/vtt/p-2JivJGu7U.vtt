WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
I assert that there are no bugs in count. Count works correctly.

00:00:04.000 --> 00:00:07.000
However, there is a bug in my horizontal checker. Here's what we're going to do.

00:00:07.000 --> 00:00:10.000
We're going to figure out the number of rows in the board

00:00:10.000 --> 00:00:12.000
and store that in the variable size.

00:00:12.000 --> 00:00:19.000
For every row in 0 to size -1, I'm going to use functional programming again.

00:00:19.000 --> 00:00:23.000
Here's what I'm going to do to figure out if a number is unique or not.

00:00:23.000 --> 00:00:30.000
I'm going to use map to convert every element of the row into its count in that row.

00:00:30.000 --> 00:00:32.000
Let me show you how that would play out.

00:00:32.000 --> 00:00:34.000
Suppose our row is [5, 6, 6, 7].

00:00:34.000 --> 00:00:37.000
After the map it's going to be [1, 2, 2, 1],

00:00:37.000 --> 00:00:42.000
because I've mapped every element of this list to its count in that same list.

00:00:42.000 --> 00:00:47.000
We've used map before to map strings to their lengths or map x to x^2,

00:00:47.000 --> 00:00:50.000
but you can use map to do more complicated calculations

00:00:50.000 --> 00:00:52.000
just like I'm doing here.

00:00:52.000 --> 00:00:59.000
I'm going to convert every one of these numbers--5, 6, and 7--to its count

00:00:59.000 --> 00:01:02.000
and then check and see if the count is less than or equal to 1.

00:01:02.000 --> 00:01:06.000
This will become True, False, False, True.

00:01:06.000 --> 00:01:10.000
What I really want is for every element in this list to be True.

00:01:10.000 --> 00:01:15.000
That would correspond to each element occurring having a count of at most 1.

00:01:15.000 --> 00:01:18.000
There is a Python procedure called all

00:01:18.000 --> 00:01:23.000
that given a list returns true if every element of that list is true.

00:01:23.000 --> 00:01:27.000
I'm using that to check that every element in my row

00:01:27.000 --> 00:01:29.000
had a count of 1 or less.

00:01:29.000 --> 00:01:31.000
I'm doing it all one two lines.

00:01:31.000 --> 00:01:34.000
This is pretty slick, but it's also pretty complicated.

00:01:34.000 --> 00:01:39.000
It's very concise code, but it might be harder to read, especially if you're not familiar

00:01:39.000 --> 00:01:42.000
with all or map or making functions in Python.

00:01:42.000 --> 00:01:45.000
We've had less experience with them in this class.

00:01:45.000 --> 00:01:47.000
This problem is intentionally difficult.

00:01:47.000 --> 00:01:51.000
So what I want to do is go over every row in the board

00:01:51.000 --> 00:01:54.000
and check to make sure that for every number in that row,

00:01:54.000 --> 00:01:59.000
it's count is less than or equal to 1 and then that's true for all the numbers on that board.

00:01:59.000 --> 00:02:01.000
If you were writing horizontal checker yourself,

00:02:01.000 --> 00:02:05.000
you might use a number of nested for loops, maybe even three nested for loops.

00:02:05.000 --> 00:02:11.000
I'm not writing as many for loops, because things like map and all and count

00:02:11.000 --> 00:02:13.000
do them for me.

00:02:13.000 --> 00:02:18.000
Anyway, if it's not the case that everything is true, then we return False.

00:02:18.000 --> 00:02:21.000
If I make it all the way through here, then we return True.

00:02:21.000 --> 00:02:23.000
I've even made some test cases.

00:02:23.000 --> 00:02:26.000
Down here I've got a good board--1, 2 ,3, 4, 5, 6, 7, 8, 9--

00:02:26.000 --> 00:02:28.000
and a bad board--1, 1, 1, 4, 5, 6, 7, 8 ,9.

00:02:28.000 --> 00:02:33.000
And when I run my horizontal checker on them, the first one passes,

00:02:33.000 --> 00:02:37.000
because across every row all the elements are unique, but the second one fails.

00:02:37.000 --> 00:02:44.000
Over here--1, 1, 1, 1, 1, 1--we've got a lot of repetition there. That fails our checker.

00:02:44.000 --> 00:02:46.000
Unfortunately, my code has a bug.

00:02:46.000 --> 00:02:48.000
Here's a board that shows it off.

00:02:48.000 --> 00:02:50.000
I've already made the test case for you.

00:02:50.000 --> 00:02:54.000
[1, 2, 3]--that's looking good. Horizontally everything is unique.

00:02:54.000 --> 00:02:59.000
[4, 4, 4]--that's looking bad. This is not unique. We should be returning false.

00:02:59.000 --> 00:03:01.000
Then [7, 8, 9]--that's okay.

00:03:01.000 --> 00:03:06.000
We return true. We think that this board checks out, but it doesn't.

00:03:06.000 --> 00:03:11.000
What I would like you to do is define and submit via the interpreter

00:03:11.000 --> 00:03:15.000
your own version of horiz_checker that's very, very similar to mine,

00:03:15.000 --> 00:03:19.000
but just changes one or two words to fix it.

00:03:19.000 --> 00:03:22.000
Fix the bug, submit a new version of horiz_checker.

00:03:22.000 --> 09:59:59.000
It should still use all and map and lambda and all that good stuff.

