WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.640
MALE SPEAKER: Let's do it.

00:00:00.640 --> 00:00:03.090
MALE SPEAKER: I've been at
Google for almost a year now,

00:00:03.090 --> 00:00:05.930
and one of my favorite
things about working here

00:00:05.930 --> 00:00:09.390
is the availability of people
who have the real in depth

00:00:09.390 --> 00:00:11.606
knowledge of how
the browser works.

00:00:11.606 --> 00:00:13.855
And a lot of the assumptions
I had as a developer just

00:00:13.855 --> 00:00:16.550
didn't hold true, and they
were able to show me why.

00:00:16.550 --> 00:00:19.129
So it's great to bring
that to a wider audience.

00:00:19.129 --> 00:00:21.420
So for the first talk today,
please give a warm welcome

00:00:21.420 --> 00:00:23.930
to Greg Simon and Eric Seidel.

00:00:23.930 --> 00:00:27.804
MALE SPEAKER: Yes

00:00:27.804 --> 00:00:28.720
GREG SIMON: Thank you.

00:00:28.720 --> 00:00:29.490
Is this on?

00:00:29.490 --> 00:00:30.410
Perfect.

00:00:30.410 --> 00:00:31.560
All right, terrific.

00:00:31.560 --> 00:00:32.369
I'm Greg Simon.

00:00:32.369 --> 00:00:35.664
I work on the Blink
team here at Chrome.

00:00:35.664 --> 00:00:37.200
ERIC SEIDEL: And
I'm Eric Seidel,

00:00:37.200 --> 00:00:40.100
also work on the Blink team.

00:00:40.100 --> 00:00:42.610
GREG SIMON: So when Eric
and I were coming up

00:00:42.610 --> 00:00:45.450
with a plan of what we were
going to talk about today,

00:00:45.450 --> 00:00:47.220
we tried to put
ourselves in your shoes

00:00:47.220 --> 00:00:50.530
and said, what would we like
to hear from the people working

00:00:50.530 --> 00:00:53.120
on the actual browser engine?

00:00:53.120 --> 00:00:56.370
What do you have-- what's coming
new in the next six months

00:00:56.370 --> 00:00:58.940
that I can use?

00:00:58.940 --> 00:01:03.370
And what have you been doing
sense you forked WebKit?

00:01:03.370 --> 00:01:06.600
And so that's basically the
structure of our talk today.

00:01:06.600 --> 00:01:09.220
We have three sections.

00:01:09.220 --> 00:01:10.831
You need to push this one here.

00:01:15.077 --> 00:01:15.910
And it doesn't work.

00:01:15.910 --> 00:01:17.225
How did we get there?

00:01:17.225 --> 00:01:18.600
How did we get
here, meaning what

00:01:18.600 --> 00:01:20.567
happened since we forked WebKit?

00:01:20.567 --> 00:01:22.400
And what we're going
to be doing-- you know,

00:01:22.400 --> 00:01:24.660
this isn't working that great.

00:01:24.660 --> 00:01:26.150
And how can I best influence?

00:01:26.150 --> 00:01:27.970
Because at the end
of the day, the folks

00:01:27.970 --> 00:01:29.800
that work on Blink
at Chromium really

00:01:29.800 --> 00:01:31.530
work for you guys, right?

00:01:31.530 --> 00:01:33.820
We publish a new
developer API basically

00:01:33.820 --> 00:01:36.430
every six weeks because
that's what Chrome's shipping

00:01:36.430 --> 00:01:37.520
schedule is.

00:01:37.520 --> 00:01:39.620
So we're going to
start by having Eric--

00:01:39.620 --> 00:01:42.420
he's going to talk
a bit about what

00:01:42.420 --> 00:01:44.230
we've done since we forked.

00:01:44.230 --> 00:01:46.890
And we're actually really
fortunate to have Eric here

00:01:46.890 --> 00:01:47.390
today.

00:01:47.390 --> 00:01:50.280
He's worked on the source code
base for about eight years,

00:01:50.280 --> 00:01:50.780
right?

00:01:50.780 --> 00:01:52.155
ERIC SEIDEL:
Something like that.

00:01:52.155 --> 00:01:55.555
GREG SIMON: The longest of
anyone on the Chrome team.

00:01:55.555 --> 00:01:57.040
ERIC SEIDEL: So yeah.

00:01:57.040 --> 00:01:58.060
So Blink.

00:01:58.060 --> 00:01:59.120
Blink, very exciting.

00:01:59.120 --> 00:02:01.690
Or at least, very
exciting for us.

00:02:01.690 --> 00:02:04.590
As Greg mentioned, we've
been here about eight months.

00:02:04.590 --> 00:02:07.010
April 4 was our big D-day.

00:02:07.010 --> 00:02:10.000
We were WebKit or part
of the web community,

00:02:10.000 --> 00:02:14.710
and we forked to have Blink a
separate open source project.

00:02:14.710 --> 00:02:18.260
First thing we did is we deleted
half our source, half of which

00:02:18.260 --> 00:02:20.130
we didn't necessarily need.

00:02:20.130 --> 00:02:21.760
And then we've
spent a lot of time

00:02:21.760 --> 00:02:24.490
taking our tangled
integration with Chrome

00:02:24.490 --> 00:02:27.860
and trying to make it look
a little bit more like this.

00:02:27.860 --> 00:02:30.250
We're still maybe not done.

00:02:30.250 --> 00:02:32.040
But what I want to
talk about first

00:02:32.040 --> 00:02:36.400
is non-code changes to Blink,
but rather process changes.

00:02:36.400 --> 00:02:38.255
Because I think this
is the part that most

00:02:38.255 --> 00:02:40.130
affects the people in
this room, in this room

00:02:40.130 --> 00:02:41.670
and on the live stream.

00:02:41.670 --> 00:02:44.040
This is the part that's maybe
most observable to those

00:02:44.040 --> 00:02:46.250
who don't hack on
the Blink code base.

00:02:46.250 --> 00:02:50.400
So one big change that we made
is we added an intents system.

00:02:50.400 --> 00:02:53.820
We wanted to make sure that
our decision making process

00:02:53.820 --> 00:02:56.990
for what we change
about the web platform

00:02:56.990 --> 00:02:59.840
is an open process and one
that you can participate in.

00:02:59.840 --> 00:03:02.340
So every time before we're going
to change the web platform,

00:03:02.340 --> 00:03:06.150
we send a public announcement to
Blink dev announcing our intent

00:03:06.150 --> 00:03:08.530
to add a feature or
to remove a feature.

00:03:08.530 --> 00:03:10.810
Then we go off, and we code it.

00:03:10.810 --> 00:03:13.150
And then the very next
day after it's checked in,

00:03:13.150 --> 00:03:16.210
it's already there shipping
in our canary builds.

00:03:16.210 --> 00:03:20.460
It's off by default, but you
can turn it on using about:flags

00:03:20.460 --> 00:03:21.430
experimental feature.

00:03:21.430 --> 00:03:23.576
We get feedback from
you during that process.

00:03:23.576 --> 00:03:25.450
We get feedback from
our own internal testing

00:03:25.450 --> 00:03:27.850
or testing in the
open source project.

00:03:27.850 --> 00:03:30.740
And then the second
email that's sent, again,

00:03:30.740 --> 00:03:33.850
to our public mailing
list is an intent to ship.

00:03:33.850 --> 00:03:36.960
And this is where we evaluate,
is this feature far enough down

00:03:36.960 --> 00:03:38.040
the standards process?

00:03:38.040 --> 00:03:39.600
Do web devs like it?

00:03:39.600 --> 00:03:42.640
Because again, the feature that
we implemented behind that flag

00:03:42.640 --> 00:03:45.500
is the exact feature
that is specified

00:03:45.500 --> 00:03:48.040
by the spec, no
prefixes, no nothing.

00:03:48.040 --> 00:03:50.370
And then once it's approved
by the community to say,

00:03:50.370 --> 00:03:53.250
we can commit to
this indefinitely,

00:03:53.250 --> 00:03:55.454
then it appears in Chrome.

00:03:55.454 --> 00:03:57.620
So even if you're not
following on our mailing list,

00:03:57.620 --> 00:03:59.200
we try to make it
very easy for you

00:03:59.200 --> 00:04:01.470
to be informed as to our
feature development process.

00:04:01.470 --> 00:04:03.180
If you go to
chromestatus.com, you

00:04:03.180 --> 00:04:04.330
can see the features
that we've worked

00:04:04.330 --> 00:04:05.800
on, the features that
we've shipped, the features

00:04:05.800 --> 00:04:07.175
that we're planning
to deprecate.

00:04:09.240 --> 00:04:11.620
And even if you're not
paying attention to that,

00:04:11.620 --> 00:04:16.860
we announce all feature changes
on the Chromium Releases blog

00:04:16.860 --> 00:04:19.470
with links to bugs, which
you can get to the tracker

00:04:19.470 --> 00:04:24.390
dashboard, which you can get
to the original discussions

00:04:24.390 --> 00:04:25.400
on the mailing list.

00:04:25.400 --> 00:04:27.691
I actually forgot to mention,
on the tracker dashboard,

00:04:27.691 --> 00:04:28.610
you can edit this.

00:04:28.610 --> 00:04:32.830
We try to track not just
Chrome changes, but also

00:04:32.830 --> 00:04:34.890
the status of these
features in other browsers.

00:04:34.890 --> 00:04:36.515
And if you have
information about that,

00:04:36.515 --> 00:04:39.324
you can request edit access
and change it yourself.

00:04:39.324 --> 00:04:40.740
So another big
policy change which

00:04:40.740 --> 00:04:43.910
affects, again,
particular web developers

00:04:43.910 --> 00:04:48.300
is that this webkit prefix that
we had in the WebKit world,

00:04:48.300 --> 00:04:50.200
we're trying to
remove from Blink.

00:04:50.200 --> 00:04:53.300
And additionally,
we have no plans

00:04:53.300 --> 00:04:56.300
to add a blink vendor prefix.

00:04:56.300 --> 00:04:58.830
We think this is a good thing.

00:04:58.830 --> 00:05:02.150
Instead, we implement
features exactly

00:05:02.150 --> 00:05:04.780
as they're specified behind
a runtime flag, which

00:05:04.780 --> 00:05:07.170
means that you can access
them way sooner than you used

00:05:07.170 --> 00:05:08.878
to be able to before,
when we implemented

00:05:08.878 --> 00:05:12.600
behind a compile time flag.

00:05:12.600 --> 00:05:15.225
So to talk about other code
changes that we've made--

00:05:15.225 --> 00:05:16.600
or so that was
some process bits.

00:05:16.600 --> 00:05:17.724
Let's talk about some code.

00:05:17.724 --> 00:05:19.390
We've removed lots
of code, as we

00:05:19.390 --> 00:05:21.780
mentioned in the very
first slide, including

00:05:21.780 --> 00:05:26.350
a bunch of broken WebKit
features or features of the web

00:05:26.350 --> 00:05:30.190
platform that were added 20
years ago but never worked.

00:05:30.190 --> 00:05:32.590
We have not done
this in the dark.

00:05:32.590 --> 00:05:37.710
We have done this using
data, anonymously reported

00:05:37.710 --> 00:05:41.060
aggregate statistics by Chrome
users who opt in with the,

00:05:41.060 --> 00:05:43.460
I want to report my
anonymous usage data.

00:05:43.460 --> 00:05:44.892
And this is, again, all public.

00:05:44.892 --> 00:05:47.140
You can go to
chromestatus.com, and you

00:05:47.140 --> 00:05:52.440
can see here we're tracking
the usage of CSS features

00:05:52.440 --> 00:05:53.540
across the web.

00:05:53.540 --> 00:05:55.164
So if you scroll down
this list, you'll

00:05:55.164 --> 00:05:58.500
see ones that are used
in 0.0001% of websites.

00:05:58.500 --> 00:06:02.890
And those are the ones that
are on the chopping block.

00:06:02.890 --> 00:06:05.240
So yes.

00:06:05.240 --> 00:06:07.070
So other code changes.

00:06:07.070 --> 00:06:08.530
One of the major
focuses that you

00:06:08.530 --> 00:06:11.630
heard Linus talk about, which
you've heard other talks talk

00:06:11.630 --> 00:06:16.816
about, is that we live
in a multi-platform web

00:06:16.816 --> 00:06:19.080
or a multi-device web.

00:06:19.080 --> 00:06:21.050
And it's important
for consistency

00:06:21.050 --> 00:06:23.870
across those devices,
something we've not

00:06:23.870 --> 00:06:26.910
done super well at up until now.

00:06:26.910 --> 00:06:30.630
And so one of the focuses
of the last six months

00:06:30.630 --> 00:06:34.370
has been to try and improve that
story across versions of Chrome

00:06:34.370 --> 00:06:36.960
and across now
versions of Blink.

00:06:36.960 --> 00:06:41.190
A big part of that was
shipping Android WebView.

00:06:41.190 --> 00:06:44.380
But you can see we still have
a lot of work ahead of us.

00:06:44.380 --> 00:06:46.951
This is a benchmark
on the web, HTML5Test,

00:06:46.951 --> 00:06:49.200
which shows that, yeah,
things are getting way better.

00:06:49.200 --> 00:06:51.640
We're much closer
to desktop in terms

00:06:51.640 --> 00:06:54.657
of having one set of web
platform APIs everywhere.

00:06:54.657 --> 00:06:55.990
But we're still not quite there.

00:06:58.590 --> 00:07:03.600
So to demo the, at least,
getting better part,

00:07:03.600 --> 00:07:06.370
Greg is going to give us a demo
of one of the new features that

00:07:06.370 --> 00:07:07.732
shipped in the latest Android.

00:07:07.732 --> 00:07:08.440
GREG SIMON: Yeah.

00:07:08.440 --> 00:07:11.280
This is the-- so one
of the most requested

00:07:11.280 --> 00:07:16.160
features in Chrome and
Android was the Web Audio API.

00:07:16.160 --> 00:07:21.070
And we finally have it working.

00:07:21.070 --> 00:07:24.590
What it is-- it's
a JavaScript API

00:07:24.590 --> 00:07:28.946
that lets you assemble audio
graphs with different sort

00:07:28.946 --> 00:07:30.320
of audio processing
nodes, things

00:07:30.320 --> 00:07:33.020
that you wouldn't normally write
JavaScript to actually run,

00:07:33.020 --> 00:07:35.740
because they're fairly
performance sensitive.

00:07:35.740 --> 00:07:37.980
And so you can do
very, very cool things.

00:07:37.980 --> 00:07:40.015
[TECHNO MUSIC PLAYS]

00:07:40.015 --> 00:07:41.015
ERIC SEIDEL: [INAUDIBLE]

00:07:41.015 --> 00:07:42.440
GREG SIMON: Yeah.

00:07:42.440 --> 00:07:44.820
ERIC SEIDEL: Which is the--

00:07:44.820 --> 00:07:47.002
GREG SIMON: It's the camera.

00:07:47.002 --> 00:07:47.502
There it is.

00:07:47.502 --> 00:07:48.585
ERIC SEIDEL: There you go.

00:07:48.585 --> 00:07:49.234
GREG SIMON: OK.

00:07:49.234 --> 00:07:49.734
Cool.

00:07:49.734 --> 00:07:51.385
And we're live.

00:07:51.385 --> 00:07:55.300
So here, I've got-- I'm
just playing a loop.

00:07:55.300 --> 00:07:58.820
And as I drag my finger,
I'm changing parameters

00:07:58.820 --> 00:08:03.174
on a biquad filter that is
part of the audio processing

00:08:03.174 --> 00:08:04.605
[INAUDIBLE].

00:08:04.605 --> 00:08:07.200
[TECHNO MUSIC PLAYING]

00:08:07.200 --> 00:08:08.730
GREG SIMON: So I
can be my own DJ.

00:08:08.730 --> 00:08:11.980
And again, this is a very
small amount of code.

00:08:11.980 --> 00:08:16.147
But these are things that people
like to do, so here it is.

00:08:16.147 --> 00:08:18.230
ERIC SEIDEL: And you
couldn't do before Web Audio.

00:08:18.230 --> 00:08:20.438
GREG SIMON: It's also really,
really useful for games

00:08:20.438 --> 00:08:22.750
because you can
actually place sounds

00:08:22.750 --> 00:08:24.340
in different parts of space.

00:08:30.320 --> 00:08:32.830
ERIC SEIDEL: So we're
making lots of changes.

00:08:32.830 --> 00:08:35.130
And as you saw, we're
removing lots of code.

00:08:35.130 --> 00:08:37.419
But one of the things we
were asked to talk about

00:08:37.419 --> 00:08:39.830
in this talk was a
little bit about how

00:08:39.830 --> 00:08:41.610
the sausage gets made.

00:08:41.610 --> 00:08:43.380
What happens behind the scenes?

00:08:43.380 --> 00:08:48.779
And to, I guess,
reassure that we're

00:08:48.779 --> 00:08:51.320
working very hard to make sure
that we aren't breaking things

00:08:51.320 --> 00:08:52.910
as we go.

00:08:52.910 --> 00:08:55.750
So one of the things we do to
keep the wheels on the wagon

00:08:55.750 --> 00:08:57.090
is a lot of testing.

00:08:57.090 --> 00:08:59.260
Every single change
we make to Blink

00:08:59.260 --> 00:09:02.634
is tested immediately
by over 30,000 tests.

00:09:02.634 --> 00:09:05.300
And that's just the Blink tests,
not to mention all the Chromium

00:09:05.300 --> 00:09:07.370
tests that run
additionally later.

00:09:07.370 --> 00:09:09.740
And you can see, again,
all these are public.

00:09:09.740 --> 00:09:11.409
You can see all our
thousands of bots.

00:09:11.409 --> 00:09:12.950
You can see some of
the tools that we

00:09:12.950 --> 00:09:15.660
use to diagnose failures.

00:09:15.660 --> 00:09:18.080
You don't need that
necessarily for your worlds,

00:09:18.080 --> 00:09:20.660
but it's public in
case you want it.

00:09:20.660 --> 00:09:23.580
Also, we focus a
lot on security.

00:09:23.580 --> 00:09:26.240
There's a link at the bottom
you can click to learn more.

00:09:26.240 --> 00:09:29.230
But we have systems that
throw millions and millions

00:09:29.230 --> 00:09:30.990
of broken web
pages at our engine

00:09:30.990 --> 00:09:32.770
to make sure it
doesn't fall over.

00:09:32.770 --> 00:09:35.460
And sometimes when
I make a change

00:09:35.460 --> 00:09:37.630
to one part of the web
platform that interacts badly

00:09:37.630 --> 00:09:39.171
with another part
of the web platform

00:09:39.171 --> 00:09:43.080
that you didn't necessarily
expect, this sort of system

00:09:43.080 --> 00:09:44.690
catches it an hour later.

00:09:44.690 --> 00:09:46.610
It's kind of amazing.

00:09:46.610 --> 00:09:48.770
We do the same kind
of things with speed.

00:09:48.770 --> 00:09:51.480
We have thousands and
thousands of benchmarks

00:09:51.480 --> 00:09:54.150
that we run on every change.

00:09:54.150 --> 00:09:59.880
And we have 24 hour sheriffing
of these bots and these graphs

00:09:59.880 --> 00:10:02.225
that alert us when
we've regressed speed.

00:10:02.225 --> 00:10:03.850
And then they have
a little button here

00:10:03.850 --> 00:10:07.540
we can click to bisect and
find out exactly which change

00:10:07.540 --> 00:10:09.870
caused that speed regression,
very powerful technology.

00:10:09.870 --> 00:10:11.080
GREG SIMON: Yeah.

00:10:11.080 --> 00:10:13.720
This was something that
we realized last year.

00:10:13.720 --> 00:10:15.610
We had way too many
graphs, that we

00:10:15.610 --> 00:10:17.710
couldn't have humans
track them anymore.

00:10:17.710 --> 00:10:19.750
So we used some
signal processing that

00:10:19.750 --> 00:10:22.475
was available from
inside Google to actually

00:10:22.475 --> 00:10:25.450
not only detect when
things get slower,

00:10:25.450 --> 00:10:26.950
but when things get faster too.

00:10:26.950 --> 00:10:29.866
So we have a perf
increase of the week

00:10:29.866 --> 00:10:31.366
email that gets
sent out, et cetera.

00:10:31.366 --> 00:10:32.930
It's very, very cool.

00:10:32.930 --> 00:10:34.750
ERIC SEIDEL: Very
much a focus of ours.

00:10:34.750 --> 00:10:38.730
We're also not just
trying to not get slower.

00:10:38.730 --> 00:10:40.842
We're also focused
on getting faster.

00:10:40.842 --> 00:10:43.050
One of the things that this
same team produced for us

00:10:43.050 --> 00:10:47.670
in the last couple months is--
they ran a million websites

00:10:47.670 --> 00:10:52.590
on Desktop through the browser
and took aggregate statistics.

00:10:52.590 --> 00:10:54.875
And they also did the
top 25K on mobile.

00:10:54.875 --> 00:10:56.950
Mobile's significantly slower.

00:10:56.950 --> 00:10:59.277
So it takes a lot
of hours in mobile.

00:10:59.277 --> 00:11:01.110
And what you can see
on this is-- this graph

00:11:01.110 --> 00:11:04.570
is actually really
very depressing to me

00:11:04.570 --> 00:11:07.250
because the blue and
the orange is you,

00:11:07.250 --> 00:11:10.050
and the rest is us
getting in your way.

00:11:10.050 --> 00:11:10.929
And that's a problem.

00:11:10.929 --> 00:11:13.220
It's something we're very
aware of and actively working

00:11:13.220 --> 00:11:13.580
on fixing.

00:11:13.580 --> 00:11:15.250
And the graphs have actually
gotten a little bit better

00:11:15.250 --> 00:11:15.980
since then.

00:11:15.980 --> 00:11:18.510
We've started to tick away
at the low hanging fruit.

00:11:18.510 --> 00:11:20.030
But we have a long way to go.

00:11:22.521 --> 00:11:24.770
So Greg's going to talk about
what else is coming down

00:11:24.770 --> 00:11:25.902
the pipeline.

00:11:25.902 --> 00:11:26.610
GREG SIMON: Cool.

00:11:26.610 --> 00:11:27.315
Thanks, Eric.

00:11:27.315 --> 00:11:30.910
So what new APIs, what
new performance parts

00:11:30.910 --> 00:11:32.900
are you going to see
in the next six months?

00:11:32.900 --> 00:11:36.630
Well, first of all, a
biggie is Web Components.

00:11:36.630 --> 00:11:39.130
Now this is something that Eric
Bidelman covered pretty well

00:11:39.130 --> 00:11:40.620
in his talk about Polymer.

00:11:40.620 --> 00:11:43.710
We've been working on this
for almost three years.

00:11:43.710 --> 00:11:46.840
Of course, nearly every
JavaScript UI framework

00:11:46.840 --> 00:11:49.380
has its own component
model because that's

00:11:49.380 --> 00:11:53.730
sort of boilerplate
for doing UIs.

00:11:53.730 --> 00:11:56.100
And it means that you have
to buy in totally to one

00:11:56.100 --> 00:11:56.690
framework.

00:11:56.690 --> 00:12:00.260
And it's very tricky
to mix and match them.

00:12:00.260 --> 00:12:03.110
So we decided three
years ago to work

00:12:03.110 --> 00:12:05.250
on building this functionality
into the platform

00:12:05.250 --> 00:12:08.770
to make UI frameworks
much more lightweight

00:12:08.770 --> 00:12:15.190
and also fix some of the name
spacing problems that you have.

00:12:15.190 --> 00:12:16.380
So there are three parts.

00:12:16.380 --> 00:12:20.210
There's the Shadow DOM, where
you can encapsulate DOM,

00:12:20.210 --> 00:12:23.450
so it can't be walked
through or seen, et cetera.

00:12:23.450 --> 00:12:28.910
We've actually been shipping
this for-- the video player

00:12:28.910 --> 00:12:30.780
works with this.

00:12:30.780 --> 00:12:36.410
This is even prior to
us forking on Blink.

00:12:36.410 --> 00:12:39.470
We have custom elements
where you can actually

00:12:39.470 --> 00:12:43.600
create your own tags so that
your code looks much more

00:12:43.600 --> 00:12:44.910
readable.

00:12:44.910 --> 00:12:50.560
And we also have
HTML imports, which

00:12:50.560 --> 00:12:54.290
aids with pulling
in blocks of content

00:12:54.290 --> 00:12:58.760
or pulling in actual components.

00:12:58.760 --> 00:13:00.910
So this is coming soon.

00:13:00.910 --> 00:13:05.470
We have a last call on custom
elements for this month.

00:13:05.470 --> 00:13:07.430
The other two,
we're working hard

00:13:07.430 --> 00:13:11.610
to get the specs
in a shape where

00:13:11.610 --> 00:13:15.360
we feel that we can ship it.

00:13:15.360 --> 00:13:16.860
But you don't have
to wait for that.

00:13:16.860 --> 00:13:19.359
You can start using it today
because we've written polyfills

00:13:19.359 --> 00:13:22.770
for every evergreen browser
that implements all three

00:13:22.770 --> 00:13:23.840
of these things.

00:13:23.840 --> 00:13:28.010
So when Chrome
actually turns it on,

00:13:28.010 --> 00:13:32.700
things will just get
faster if you ship today.

00:13:32.700 --> 00:13:33.400
Web animations.

00:13:33.400 --> 00:13:36.860
So for UI these days,
having silky smooth,

00:13:36.860 --> 00:13:42.670
complex movement is
now table stakes.

00:13:42.670 --> 00:13:49.350
And so you can't--
so we realize this.

00:13:49.350 --> 00:13:51.780
And so we've been working
for the past six months

00:13:51.780 --> 00:13:54.850
on a new animation
back end that's

00:13:54.850 --> 00:13:58.340
going to replace the one
that drives SVG and also

00:13:58.340 --> 00:13:59.952
the one that drives CSS.

00:13:59.952 --> 00:14:01.410
And we're also
going to be exposing

00:14:01.410 --> 00:14:04.590
a new API called the
web animations API.

00:14:04.590 --> 00:14:12.000
Now what's cool about this
API is it is timeline based.

00:14:12.000 --> 00:14:15.780
So here we have a new
animation object here.

00:14:15.780 --> 00:14:17.360
But you can also
group them together.

00:14:17.360 --> 00:14:19.910
So you can actually create
fairly complex animations

00:14:19.910 --> 00:14:21.420
that are all synchronized.

00:14:21.420 --> 00:14:25.650
So let me show you
an example of how

00:14:25.650 --> 00:14:32.530
that works after I turn on the
tablet here, after I unlock it.

00:14:32.530 --> 00:14:33.980
OK, cool.

00:14:33.980 --> 00:14:36.930
So here is a simple
animation here

00:14:36.930 --> 00:14:39.440
because you can see I'm
running out of tablet here.

00:14:39.440 --> 00:14:43.100
So I've got-- this is actually
much smoother than that.

00:14:43.100 --> 00:14:49.930
The problem is it doesn't
seem to capture well here.

00:14:49.930 --> 00:14:51.720
I have a few curves here.

00:14:51.720 --> 00:14:55.400
And ease in and ease out.

00:14:55.400 --> 00:14:58.040
Now of course, we don't have
the native implementation

00:14:58.040 --> 00:15:02.150
of web animations shipped yet.

00:15:02.150 --> 00:15:05.430
I think it sort of runs, but
it certainly isn't shipping.

00:15:05.430 --> 00:15:08.410
This is all done with the
web animations polyfill.

00:15:08.410 --> 00:15:12.110
The same team in
Blink that is working

00:15:12.110 --> 00:15:14.960
on shipping web animations
and writing the new back

00:15:14.960 --> 00:15:18.340
end-- they started
by doing a polyfill.

00:15:18.340 --> 00:15:21.400
And that's what
Polymer uses as well.

00:15:21.400 --> 00:15:23.400
Another example
of web animations

00:15:23.400 --> 00:15:31.890
here-- so here I've got
two separate animations.

00:15:31.890 --> 00:15:33.850
And they're going to run
on the same time line.

00:15:33.850 --> 00:15:35.850
So they're perfectly in sync.

00:15:35.850 --> 00:15:39.230
When you use this
API, you will always

00:15:39.230 --> 00:15:41.620
be getting the GPU as well.

00:15:41.620 --> 00:15:43.460
So very, very cool stuff.

00:15:43.460 --> 00:15:47.830
So that's going to ship
sometime next year.

00:15:47.830 --> 00:15:50.570
But as I said before, you
don't have to wait to use it.

00:15:50.570 --> 00:15:55.150
You can grab the polyfill and
start using it immediately.

00:15:55.150 --> 00:15:57.450
Partial layout.

00:15:57.450 --> 00:15:59.490
One of the wonderful
things about the web

00:15:59.490 --> 00:16:01.820
is that it does layout for you.

00:16:01.820 --> 00:16:03.090
You just throw text at it.

00:16:03.090 --> 00:16:06.820
It's the only platform where
Hello World is actually

00:16:06.820 --> 00:16:09.520
just the text, Hello World.

00:16:09.520 --> 00:16:12.010
Of course, this is also one
of the problems with the web,

00:16:12.010 --> 00:16:14.710
that it's doing layout when
you don't really want it to,

00:16:14.710 --> 00:16:16.400
like you just want
to reach into the DOM

00:16:16.400 --> 00:16:19.640
and measure where
one div is placed.

00:16:19.640 --> 00:16:24.100
And what happens is--
the clicker doesn't work.

00:16:24.100 --> 00:16:28.420
What happens is we lay
out the entire page.

00:16:28.420 --> 00:16:31.780
And so what should
have been a sub

00:16:31.780 --> 00:16:34.220
millisecond call ended up
taking 25 milliseconds,

00:16:34.220 --> 00:16:36.210
and I just missed a frame.

00:16:36.210 --> 00:16:39.505
So we have changed Blink so
it now does partial layout,

00:16:39.505 --> 00:16:42.700
meaning it will only lay
out enough of the page

00:16:42.700 --> 00:16:45.310
to return the value that
you're asking for from.

00:16:45.310 --> 00:16:48.680
And then it will
carefully unwind itself.

00:16:48.680 --> 00:16:51.250
Now even though we've
done this already,

00:16:51.250 --> 00:16:53.320
we haven't shipped
it yet, because we

00:16:53.320 --> 00:16:56.690
have two other problems
that we're dealing with.

00:16:56.690 --> 00:17:01.650
One is on Chrome on Android,
we do double layouts

00:17:01.650 --> 00:17:05.790
because we have to
do text auto-sizing.

00:17:05.790 --> 00:17:08.220
And then on desktop,
we're working

00:17:08.220 --> 00:17:14.619
on getting overflow
scroll bars turned on

00:17:14.619 --> 00:17:17.369
because the presence
of a scroll bar

00:17:17.369 --> 00:17:20.319
causes you to do
extra layouts anyway.

00:17:20.319 --> 00:17:23.660
Speaking of text
auto-sizing, anyone

00:17:23.660 --> 00:17:27.440
who's loaded a page, a
desktop page in our browser,

00:17:27.440 --> 00:17:31.930
and the page author
hasn't set meta viewport,

00:17:31.930 --> 00:17:34.782
will see this sort of
behavior where we basically

00:17:34.782 --> 00:17:35.740
lay out the whole page.

00:17:35.740 --> 00:17:38.280
We try to identify what the
main body of content is.

00:17:38.280 --> 00:17:40.840
We set a minimum
on the font size.

00:17:40.840 --> 00:17:42.720
And then we lay it out again.

00:17:42.720 --> 00:17:44.280
Now the algorithm
could certainly

00:17:44.280 --> 00:17:46.910
be improved, as you
can see by this.

00:17:46.910 --> 00:17:52.360
We've got-- this is Hacker
News talking about the MotoG,

00:17:52.360 --> 00:17:53.360
I believe.

00:17:53.360 --> 00:17:56.040
And all this text should be
the same size, but it's not.

00:17:56.040 --> 00:17:59.500
So we are working on that
as I speak here today.

00:17:59.500 --> 00:18:02.810
But we're also going to
do it in a single pass.

00:18:02.810 --> 00:18:04.984
As I mentioned, when talking
about partial layout,

00:18:04.984 --> 00:18:06.400
we can't quite
ship partial layout

00:18:06.400 --> 00:18:11.470
until we're able to
do just one pass.

00:18:11.470 --> 00:18:14.660
So this is coming
very, very, very soon.

00:18:14.660 --> 00:18:16.900
CSS Grid.

00:18:16.900 --> 00:18:19.880
20 years ago, I worked on
the web browser for the Apple

00:18:19.880 --> 00:18:22.080
Newton, actually 21 years ago.

00:18:22.080 --> 00:18:23.810
And one of our
features was tables.

00:18:23.810 --> 00:18:26.742
And it took a lot of code
to write tables because--

00:18:26.742 --> 00:18:28.200
and I'm still
talking about tables,

00:18:28.200 --> 00:18:29.960
and it's 20 years later.

00:18:29.960 --> 00:18:31.290
Like, what?

00:18:31.290 --> 00:18:36.100
It's time for some
improvement in this area.

00:18:36.100 --> 00:18:38.130
So CSS Grid was a
feature that was first

00:18:38.130 --> 00:18:39.740
shipped by Internet Explorer.

00:18:39.740 --> 00:18:44.090
We have it pretty much
fully implemented.

00:18:44.090 --> 00:18:47.950
I say pretty much because
the spec is in last call,

00:18:47.950 --> 00:18:51.544
but it's still kind of
being pushed around a bit.

00:18:51.544 --> 00:18:52.960
You can turn it
on and try it out,

00:18:52.960 --> 00:18:57.437
but we expect to ship
this very, very soon.

00:18:57.437 --> 00:18:59.020
What's cool about
CSS Grid, of course,

00:18:59.020 --> 00:19:02.730
is you can separate the
content from how it appears.

00:19:02.730 --> 00:19:06.400
So if you combine this
with media queries,

00:19:06.400 --> 00:19:11.670
you can do really great,
responsive design.

00:19:11.670 --> 00:19:16.220
Speaking of responsive, images.

00:19:16.220 --> 00:19:20.679
This is something that you guys
want, something that we want.

00:19:20.679 --> 00:19:21.720
But we don't have it yet.

00:19:21.720 --> 00:19:23.470
And that's because
there hasn't been

00:19:23.470 --> 00:19:25.650
agreement on what
the API looks like.

00:19:25.650 --> 00:19:30.050
There's been many patches landed
inside Blink for-- of course,

00:19:30.050 --> 00:19:31.120
they haven't shipped yet.

00:19:31.120 --> 00:19:34.130
But there's some
disagreement about whether it

00:19:34.130 --> 00:19:37.297
should be picture, srcset, srcN.

00:19:37.297 --> 00:19:38.880
I think it's not
going to be srcN now.

00:19:38.880 --> 00:19:40.950
I think it's now
srcset or picture.

00:19:40.950 --> 00:19:41.530
ERIC SEIDEL: It changes daily.

00:19:41.530 --> 00:19:43.613
GREG SIMON: But honestly,
it changes almost daily.

00:19:43.613 --> 00:19:46.090
I mean, I did these
slides last week.

00:19:46.090 --> 00:19:49.390
And I had to add the
picture tag in yesterday

00:19:49.390 --> 00:19:52.860
because that was
the latest news.

00:19:52.860 --> 00:19:56.802
I know you may think
it would be great

00:19:56.802 --> 00:20:00.070
if we just put our foot down
and just shipped something.

00:20:00.070 --> 00:20:04.420
But then we're forking
the web platform, right?

00:20:04.420 --> 00:20:07.720
I mean, we really need
to have-- the success

00:20:07.720 --> 00:20:11.450
of the web is that
it's consistent.

00:20:11.450 --> 00:20:13.610
And so it's important
that we take our time

00:20:13.610 --> 00:20:17.290
and get at least one other
browser to agree and ship.

00:20:17.290 --> 00:20:20.380
Ideally, we get every
browser to do it as well.

00:20:20.380 --> 00:20:22.740
This is also-- sub-pixel fonts.

00:20:22.740 --> 00:20:25.870
The fonts on Windows
don't look that great.

00:20:25.870 --> 00:20:27.430
They can certainly be improved.

00:20:27.430 --> 00:20:30.700
A year ago, we shipped the
change at WebKit-- actually,

00:20:30.700 --> 00:20:32.780
a year and a half
ago-- which was we

00:20:32.780 --> 00:20:38.230
changed the rendering
precision of the entire tree

00:20:38.230 --> 00:20:40.250
to be fixed point.

00:20:40.250 --> 00:20:42.340
Prior to that, it was a
mixture of int and float.

00:20:42.340 --> 00:20:43.780
If you put a break
point in there

00:20:43.780 --> 00:20:45.640
or just paused the program
and looked at the call stack,

00:20:45.640 --> 00:20:47.390
it was like float,
float, int, int, float.

00:20:47.390 --> 00:20:52.240
And of course, things were
off by one pixel constantly.

00:20:52.240 --> 00:20:53.380
We got that fixed.

00:20:53.380 --> 00:20:55.950
The last thing to fix,
though, is fonts.,

00:20:55.950 --> 00:21:01.990
Of course, looking at
the column on the left,

00:21:01.990 --> 00:21:04.944
this looks like a
web page from 1998

00:21:04.944 --> 00:21:06.610
when the only font
that you were drawing

00:21:06.610 --> 00:21:08.930
was Arial because it was
in C, Windows folder.

00:21:08.930 --> 00:21:11.470
And I didn't do
anti-aliasing, because my CPU

00:21:11.470 --> 00:21:15.060
wasn't that powerful, et cetera.

00:21:15.060 --> 00:21:17.090
The column on the
right is what's

00:21:17.090 --> 00:21:20.630
going to be coming very
soon, I think this quarter.

00:21:20.630 --> 00:21:23.810
And so you're going to have
not only sub-pixel sizing,

00:21:23.810 --> 00:21:29.800
but sub-pixel
positioning as well.

00:21:29.800 --> 00:21:34.000
Most web content these days
is consumed on LCD screens.

00:21:34.000 --> 00:21:39.320
So you can use ClearType
or, even increasingly,

00:21:39.320 --> 00:21:41.070
Retina displays.

00:21:41.070 --> 00:21:41.980
So this is important.

00:21:41.980 --> 00:21:46.280
Now it's kind of hard on this
overhead to see the difference.

00:21:46.280 --> 00:21:48.120
It's very subtle.

00:21:48.120 --> 00:21:49.480
Look-- whoa, what did I just do?

00:21:52.400 --> 00:21:53.760
I guess I'm printing it.

00:21:53.760 --> 00:21:57.460
Who puts a print button
on a presentation remote?

00:21:57.460 --> 00:21:59.802
That doesn't seem that good.

00:21:59.802 --> 00:22:00.760
That seems like a fail.

00:22:00.760 --> 00:22:01.635
Oh yeah, there it is.

00:22:01.635 --> 00:22:02.301
OK, cool.

00:22:02.301 --> 00:22:02.800
All right.

00:22:02.800 --> 00:22:05.120
That's-- oh, well.

00:22:05.120 --> 00:22:08.280
Look at this E here.

00:22:08.280 --> 00:22:14.310
See, on the left,
it's much more janky.

00:22:14.310 --> 00:22:17.110
Very, very subtle, right?

00:22:17.110 --> 00:22:18.090
So this is DirectWrite.

00:22:18.090 --> 00:22:19.980
This was actually a big change.

00:22:19.980 --> 00:22:25.190
Skia, which is the graphic
system inside Blink--

00:22:25.190 --> 00:22:28.590
or, I guess, that Blink
uses, to be correct.

00:22:28.590 --> 00:22:35.280
It used GDI, which is a
really, really old graphics

00:22:35.280 --> 00:22:37.760
API on Win32.

00:22:37.760 --> 00:22:40.380
And you have to use GDI in
order to ship on Windows XP.

00:22:40.380 --> 00:22:42.110
But starting with
Vista, I believe,

00:22:42.110 --> 00:22:43.510
they turned on DirectWrite.

00:22:43.510 --> 00:22:50.750
So this is coming very, very,
very soon in a canary near you.

00:22:50.750 --> 00:22:55.700
This is a slide provided
by our friends at V8.

00:22:55.700 --> 00:23:01.090
V8's not part of Blink, but it's
an extremely important piece

00:23:01.090 --> 00:23:05.250
of Chrome and a really important
piece of your life as well.

00:23:05.250 --> 00:23:08.975
The speed team-- they
are maniacs about speed,

00:23:08.975 --> 00:23:09.600
which is great.

00:23:09.600 --> 00:23:11.308
And they'll always be
maniacs about speed

00:23:11.308 --> 00:23:16.360
because that's why
it's called V8 and not

00:23:16.360 --> 00:23:18.460
V6 or I4 or something, right?

00:23:18.460 --> 00:23:20.940
But coming in the
next six months,

00:23:20.940 --> 00:23:26.800
we're going to be improving
some of the ES6 support, things

00:23:26.800 --> 00:23:30.080
like symbols and
iterators, et cetera,

00:23:30.080 --> 00:23:32.950
and also something
called Object.observe.

00:23:32.950 --> 00:23:36.120
I'm not sure if Eric Bidelman
covered this yesterday.

00:23:36.120 --> 00:23:41.060
But a couple years ago in
Blink, we shipped DOM mutations

00:23:41.060 --> 00:23:44.875
where you can set
up a callback so you

00:23:44.875 --> 00:23:48.780
know when part of
the DOM has changed.

00:23:48.780 --> 00:23:52.060
So Object.observe is a
new ECMASciprt feature

00:23:52.060 --> 00:23:55.570
that is the same thing but
for JavaScript objects.

00:23:55.570 --> 00:23:58.900
So given any
arbitrary object, you

00:23:58.900 --> 00:24:01.890
can watch when
properties on it change.

00:24:01.890 --> 00:24:04.790
So if you put two
and two together,

00:24:04.790 --> 00:24:08.600
you now have got data binding
natively in the platform.

00:24:08.600 --> 00:24:09.940
And it's fast.

00:24:09.940 --> 00:24:14.280
Because it's really tricky
to polyfill Object.observe.

00:24:14.280 --> 00:24:16.170
We do do it in
Polymer, but it's not

00:24:16.170 --> 00:24:19.040
the nicest piece of
code I've ever seen.

00:24:19.040 --> 00:24:19.820
OK, cool.

00:24:19.820 --> 00:24:22.880
So how can you influence
these features and things

00:24:22.880 --> 00:24:25.290
that we work on?

00:24:25.290 --> 00:24:26.630
You actually can.

00:24:26.630 --> 00:24:27.580
ERIC SEIDEL: Yeah.

00:24:27.580 --> 00:24:30.455
As Greg said, you guys are king.

00:24:30.455 --> 00:24:32.256
As history has
proven many times,

00:24:32.256 --> 00:24:33.880
a platform is nothing
without its apps.

00:24:33.880 --> 00:24:35.320
And you guys write the apps.

00:24:35.320 --> 00:24:38.250
So we want to know
what you have to say.

00:24:38.250 --> 00:24:43.100
If you feel C++ in your blood
and want to write C++ with us,

00:24:43.100 --> 00:24:44.800
all of our code is open.

00:24:44.800 --> 00:24:46.730
You don't even have
to tell anybody.

00:24:46.730 --> 00:24:48.899
You can just simply change it.

00:24:48.899 --> 00:24:50.690
Rather, you don't have
to evangelize to us.

00:24:50.690 --> 00:24:52.340
You can just simply
post a batch.

00:24:52.340 --> 00:24:53.340
All of our code is open.

00:24:53.340 --> 00:24:55.620
Our bug tracker's open.

00:24:55.620 --> 00:25:01.370
One of the steps on the critical
path to anything getting

00:25:01.370 --> 00:25:04.250
changed in Blink-- at least,
anything web facing-- is a bug.

00:25:04.250 --> 00:25:06.680
So whether you file that
bug or we file that bug,

00:25:06.680 --> 00:25:08.230
again, you guys
know what it should

00:25:08.230 --> 00:25:10.250
look like probably
better than we do.

00:25:10.250 --> 00:25:12.240
And you have access
to our bug tracker.

00:25:12.240 --> 00:25:13.656
You can see what
we're working on.

00:25:13.656 --> 00:25:16.130
You can influence
what we're working on.

00:25:16.130 --> 00:25:19.520
Another way that internal
web devs, to Google at least,

00:25:19.520 --> 00:25:23.570
help us to improve is
through reducing test cases.

00:25:23.570 --> 00:25:27.360
Often, a bug will come in,
and we don't necessarily

00:25:27.360 --> 00:25:30.000
understand your
complicated web app.

00:25:30.000 --> 00:25:32.280
And so helping us to
understand, explaining it to us

00:25:32.280 --> 00:25:34.950
like we're five, as
it says on the slide,

00:25:34.950 --> 00:25:36.420
is an important step.

00:25:36.420 --> 00:25:38.460
Because every change that
we make needs a test.

00:25:38.460 --> 00:25:40.350
And so whether you write that
test, or we write that test,

00:25:40.350 --> 00:25:41.225
it has to be written.

00:25:44.540 --> 00:25:50.520
Longer term is the question of
standards, as Greg mentioned.

00:25:50.520 --> 00:25:53.520
Part of the beauty of the
web is that it's ubiquitous,

00:25:53.520 --> 00:25:56.990
that it works more or less
the same everywhere you try.

00:25:56.990 --> 00:25:59.720
And the way we accomplish
that is through standards.

00:25:59.720 --> 00:26:02.730
So they're always looking
for folks like yourself

00:26:02.730 --> 00:26:05.112
who understand the web
platform to help the standards

00:26:05.112 --> 00:26:07.320
bodies to determine what
the next web platform should

00:26:07.320 --> 00:26:09.492
look like.

00:26:09.492 --> 00:26:11.950
If we're moving too slow, or
standards are moving too slow,

00:26:11.950 --> 00:26:15.350
you can always fix it yourself
in JavaScript to some extent.

00:26:15.350 --> 00:26:18.310
And one of the techniques
that has become bigger,

00:26:18.310 --> 00:26:20.720
as we mentioned
earlier in this slide,

00:26:20.720 --> 00:26:22.756
for us to sort of
test out new features,

00:26:22.756 --> 00:26:24.130
for you to test
out new features,

00:26:24.130 --> 00:26:27.200
is to simply write it in JS.

00:26:27.200 --> 00:26:28.977
And finally, if you
guys do nothing else,

00:26:28.977 --> 00:26:30.310
we simply want to hear from you.

00:26:30.310 --> 00:26:31.790
That's why we're here today.

00:26:31.790 --> 00:26:33.860
That's why we're talking
to the live stream,

00:26:33.860 --> 00:26:38.430
that you guys, again, are
in charge of the apps.

00:26:38.430 --> 00:26:41.185
And we want to know
what you have to think.

00:26:41.185 --> 00:26:44.406
So you can listen in, join in to
our conversations on Blink Dev.

00:26:44.406 --> 00:26:45.530
You can talk to us on Plus.

00:26:45.530 --> 00:26:46.780
You can talk to us on Twitter.

00:26:46.780 --> 00:26:48.222
But we want to hear from you.

00:26:48.222 --> 00:26:48.930
GREG SIMON: Yeah.

00:26:48.930 --> 00:26:52.130
And we will be around, I
guess, an hour from now.

00:26:52.130 --> 00:26:54.250
And we would really
like to hear,

00:26:54.250 --> 00:26:55.720
are we working on
the right stuff?

00:26:55.720 --> 00:26:59.270
Should we be prioritizing
something different, et cetera?

00:26:59.270 --> 00:27:00.790
It really matters to us.

00:27:00.790 --> 00:27:01.760
So OK.

00:27:01.760 --> 00:27:03.540
ERIC SEIDEL: Thank you.

