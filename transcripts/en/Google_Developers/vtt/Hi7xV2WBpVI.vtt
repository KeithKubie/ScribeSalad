WEBVTT
Kind: captions
Language: en

00:00:00.279 --> 00:00:02.070
SHANEE NISHRY: Making
virtual reality games

00:00:02.070 --> 00:00:04.480
and applications
with Unity is easy.

00:00:04.480 --> 00:00:08.119
In this video I'll go over the
concepts and implementation

00:00:08.119 --> 00:00:11.980
of adding Cardboard
support to a Unity project.

00:00:11.980 --> 00:00:14.650
As you may know,
Unity is a game engine

00:00:14.650 --> 00:00:18.200
with an editor that allows you
to easily import 3-D models

00:00:18.200 --> 00:00:20.560
and arrange them in the scene.

00:00:20.560 --> 00:00:22.700
You can also attach
scripts to objects

00:00:22.700 --> 00:00:25.050
to give them functionality.

00:00:25.050 --> 00:00:28.010
Before we start, make sure
to get the Cardboard Unity

00:00:28.010 --> 00:00:30.230
plugin from this link.

00:00:30.230 --> 00:00:35.850
Then, open your Unity project
and import a package like this.

00:00:35.850 --> 00:00:39.670
Now that they are all set, there
are two things you need to do.

00:00:39.670 --> 00:00:42.060
You need to create a
stereoscopic camera

00:00:42.060 --> 00:00:44.920
and make sure your user
interface works well

00:00:44.920 --> 00:00:47.100
for virtual reality.

00:00:47.100 --> 00:00:50.090
Let's start with adding the
camera and look into modifying

00:00:50.090 --> 00:00:52.550
the UI at the end.

00:00:52.550 --> 00:00:56.780
You can do so by using one of
the available prefabbed objects

00:00:56.780 --> 00:01:00.410
or by attaching a script
to an existing camera.

00:01:00.410 --> 00:01:04.099
The easiest way is to use
the Cardboard main prefab.

00:01:04.099 --> 00:01:06.720
This is best if you're
starting a new project

00:01:06.720 --> 00:01:10.340
or haven't made any changes
to your existing camera.

00:01:10.340 --> 00:01:13.290
Simply replace the existing
camera with the Cardboard

00:01:13.290 --> 00:01:16.030
main prefab, and you're done.

00:01:16.030 --> 00:01:18.400
You can still add any
custom scripts on top,

00:01:18.400 --> 00:01:21.340
for controlling the
camera, for example.

00:01:21.340 --> 00:01:24.875
Press Play, and you'll have
a functioning scopic view.

00:01:24.875 --> 00:01:27.660
You can rotate the
camera using the Alt key

00:01:27.660 --> 00:01:29.350
while moving the mouse.

00:01:29.350 --> 00:01:33.070
To simulate Cardboard Trego,
press the left mouse button.

00:01:33.070 --> 00:01:34.700
If you already
have a camera, you

00:01:34.700 --> 00:01:38.050
can use the Cardboard
adapter prefab.

00:01:38.050 --> 00:01:40.740
Add it as a child of
your camera and select

00:01:40.740 --> 00:01:44.040
Update Stereo Cameras
from the Components menu.

00:01:44.040 --> 00:01:46.410
Once again, you can
press Play and have

00:01:46.410 --> 00:01:50.190
a functioning stereoscopic
view in the game window.

00:01:50.190 --> 00:01:51.980
If you don't want
to use a prefab,

00:01:51.980 --> 00:01:53.930
then you can just use a script.

00:01:53.930 --> 00:01:57.360
By adding the stereo controller
script to your camera,

00:01:57.360 --> 00:02:00.250
two stereoscopic cameras
will be created dynamically

00:02:00.250 --> 00:02:02.310
as you press play.

00:02:02.310 --> 00:02:04.700
You may not want to use the
stereo controller script

00:02:04.700 --> 00:02:07.970
since it doesn't let you add
any image processing on top

00:02:07.970 --> 00:02:11.370
of the cameras because
they are added dynamically.

00:02:11.370 --> 00:02:13.920
If you want to create the
cameras in the Editor,

00:02:13.920 --> 00:02:17.670
then simply select Update
Stereo Cameras from the menu

00:02:17.670 --> 00:02:19.760
and they will be
created for you.

00:02:19.760 --> 00:02:22.230
Press Play, and you are done.

00:02:22.230 --> 00:02:25.870
Last thing we have to do is
get the user interface working

00:02:25.870 --> 00:02:28.040
and add support for the Trego.

00:02:28.040 --> 00:02:30.830
Start by adding the
[INAUDIBLE] Input Module script

00:02:30.830 --> 00:02:33.210
to the [INAUDIBLE]
Event System Object.

00:02:33.210 --> 00:02:36.660
This script emits [INAUDIBLE]
for the event system

00:02:36.660 --> 00:02:38.740
based on the user's gaze.

00:02:38.740 --> 00:02:42.480
Next, in your UI element, set
the Conference Render mode

00:02:42.480 --> 00:02:45.390
to [INAUDIBLE] Space
and set the event camera

00:02:45.390 --> 00:02:48.260
to a camera controlled by
a Cardboard head script,

00:02:48.260 --> 00:02:51.100
either directly or as a parent.

00:02:51.100 --> 00:02:54.210
At this point, the system is
able to respond to the user's

00:02:54.210 --> 00:02:58.340
gaze into triggers so that
UI elements, such as buttons,

00:02:58.340 --> 00:03:00.050
can be activated.

00:03:00.050 --> 00:03:02.770
If you wish to interact with
3-D objects in the scene,

00:03:02.770 --> 00:03:06.530
add a physics ray caster
component to the event camera.

00:03:06.530 --> 00:03:09.700
Designate an in-game
object to be interactive

00:03:09.700 --> 00:03:12.380
by adding a collider component
to interact with the ray

00:03:12.380 --> 00:03:13.560
caster.

00:03:13.560 --> 00:03:15.690
And by adding a
script to respond

00:03:15.690 --> 00:03:17.890
to the generated events.

00:03:17.890 --> 00:03:20.310
An event trigger
is a good choice,

00:03:20.310 --> 00:03:24.550
or you can implement some of the
standard Unity event interfaces

00:03:24.550 --> 00:03:26.660
on your own scripts.

00:03:26.660 --> 00:03:29.310
If you wish to add a
cursor to let a user see

00:03:29.310 --> 00:03:33.550
the point of their gaze, set
the Gaze Input models cursor

00:03:33.550 --> 00:03:36.500
to the game object that
will serve [INAUDIBLE].

00:03:36.500 --> 00:03:40.250
This cursor will be moved to
the exact point on whatever UI

00:03:40.250 --> 00:03:42.890
object the user is gazing at.

00:03:42.890 --> 00:03:45.990
If the event camera has
a physics ray caster,

00:03:45.990 --> 00:03:50.300
then this includes 3-D objects
with the collider components.

00:03:50.300 --> 00:03:54.850
If no object is hit by a ray
cast, the cursor is hidden.

00:03:54.850 --> 00:03:57.210
Now that you know how
to make everything work,

00:03:57.210 --> 00:04:00.850
it is important to keep in mind
some best practices in order

00:04:00.850 --> 00:04:04.210
to make a compelling
virtual reality experience.

00:04:04.210 --> 00:04:06.320
The three most important
words to remember

00:04:06.320 --> 00:04:11.030
are always keep tracking
on, keep stable 60 frames

00:04:11.030 --> 00:04:15.930
per second or higher, and
avoid unexpected motion.

00:04:15.930 --> 00:04:18.779
One of the things that makes
virtual reality compelling

00:04:18.779 --> 00:04:20.880
is the ability to look around.

00:04:20.880 --> 00:04:24.440
In contrast, it would
feel extremely unnatural

00:04:24.440 --> 00:04:27.700
if the camera stopped
responding to your head.

00:04:27.700 --> 00:04:30.340
Therefore, you should
always take into account

00:04:30.340 --> 00:04:34.030
the user's orientation and
never freeze the camera

00:04:34.030 --> 00:04:37.180
or force the user to
look somewhere specific.

00:04:37.180 --> 00:04:39.310
If you want to grab
the user's attention,

00:04:39.310 --> 00:04:42.850
use cues such as light
and sound to direct

00:04:42.850 --> 00:04:44.690
them to look where you want.

00:04:44.690 --> 00:04:47.620
You can also delay activating
an event in your scene

00:04:47.620 --> 00:04:49.610
until you know the
user had turned

00:04:49.610 --> 00:04:51.750
their head in that direction.

00:04:51.750 --> 00:04:55.800
That way, they have time to take
things in and enjoy the scene.

00:04:55.800 --> 00:04:59.570
You must always keep
to 60 FPS or higher.

00:04:59.570 --> 00:05:02.550
Not only does it contribute
to a good user experience,

00:05:02.550 --> 00:05:06.070
but it is even more
crucial in virtual reality.

00:05:06.070 --> 00:05:08.180
Think about it this
way, the screen

00:05:08.180 --> 00:05:11.120
is the only thing
the user can see.

00:05:11.120 --> 00:05:15.420
Rendering at 60 FPS means
the user sees the same flame

00:05:15.420 --> 00:05:18.860
for 16.6 milliseconds.

00:05:18.860 --> 00:05:25.440
If you miss 60 FPS, vsync drops
you to 30 FPS and its frame

00:05:25.440 --> 00:05:28.740
is shown for 33 milliseconds.

00:05:28.740 --> 00:05:31.570
That means as the
user moves their head,

00:05:31.570 --> 00:05:35.970
they're getting an incorrect
image for a very long time.

00:05:35.970 --> 00:05:39.080
This is why it is very
important for virtual reality

00:05:39.080 --> 00:05:42.650
applications to be
fast and responsive.

00:05:42.650 --> 00:05:45.570
Movement can be tricky,
because the user does not

00:05:45.570 --> 00:05:47.990
feel like they are in motion.

00:05:47.990 --> 00:05:49.920
If the world starts
moving around,

00:05:49.920 --> 00:05:51.900
it can contribute
to an odd feeling

00:05:51.900 --> 00:05:55.730
if there is discrepancy between
one's actual lack of movement

00:05:55.730 --> 00:05:58.060
and what the user is seeing.

00:05:58.060 --> 00:06:00.590
There are ways to
convey movement safely.

00:06:00.590 --> 00:06:03.490
For example, by
keeping motion constant

00:06:03.490 --> 00:06:08.190
and avoiding acceleration, or by
using another object and making

00:06:08.190 --> 00:06:12.270
it move first or creating
a path for the user to see.

00:06:12.270 --> 00:06:15.180
This signals to the user
they're about to be moved

00:06:15.180 --> 00:06:18.210
and subconsciously propels them.

00:06:18.210 --> 00:06:21.160
There are many more ways to
ensure a good user experience.

00:06:21.160 --> 00:06:24.010
I recommend you to check
out the Cardboard Design Lab

00:06:24.010 --> 00:06:28.730
Application to learn more about
good and bad design patterns

00:06:28.730 --> 00:06:31.295
so you can create the best
user experience in your game

00:06:31.295 --> 00:06:33.410
or application.

00:06:33.410 --> 00:06:36.330
Good luck with making your own
virtual reality experience,

00:06:36.330 --> 00:06:40.550
and make sure to post about
it in our Cardboard community.

