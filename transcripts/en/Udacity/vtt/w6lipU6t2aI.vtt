WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So let's illustrate once more what happens if we take this HTML string

00:00:04.000 --> 00:00:07.000
and put this through our binary search simplification process.

00:00:07.000 --> 00:00:13.000
Here is our HTML string, and we first check the first half and see if it fails.

00:00:13.000 --> 00:00:15.000
Yes, this also fails.

00:00:15.000 --> 00:00:20.000
But now we are splitting this string into two substrings, namely this one.

00:00:20.000 --> 00:00:22.000
It passes.

00:00:22.000 --> 00:00:24.000
Now the second one, and it passes as well.

00:00:24.000 --> 00:00:27.000
In this case the binary search algorithm is stuck,

00:00:27.000 --> 00:00:31.000
because the first half doesn't result in a simplification,

00:00:31.000 --> 00:00:34.000
second half doesn't result in a simplification either.

00:00:34.000 --> 00:00:37.000
So, we stop here and simply return the entire string,

00:00:37.000 --> 00:00:39.000
which is what binary search does.

00:00:39.000 --> 00:00:42.000
As humans, of course, we have a good idea on what to do next.

00:00:42.000 --> 00:00:46.000
What we would do is,well, we could for instance go and cut away smaller parts.

00:00:46.000 --> 00:00:50.000
For instance, in here, we already would see the structure and fo.

00:00:50.000 --> 00:00:54.000
We could, for instance, go and remove the "fo" because it's different from the HTML tag.

00:00:54.000 --> 00:00:57.000
A computer may not recognize these structures,

00:00:57.000 --> 00:01:02.000
but what a computer can do still is to try to remove smaller chunks.

00:01:02.000 --> 00:01:06.000
That is, rather than trying to remove entire halves,

00:01:06.000 --> 00:01:10.000
we would try to remove, say, quarters or eighths of the input

00:01:10.000 --> 00:01:13.000
until we're down to removing single characters.

00:01:13.000 --> 00:01:16.000
What we do in this situation is we increase the granularity,

00:01:16.000 --> 00:01:20.000
that is, we take away smaller parts more frequently

00:01:20.000 --> 00:01:23.000
until we end up removing single characters

00:01:23.000 --> 00:01:27.000
such that we really, really get an input where every single character

00:01:27.000 --> 00:01:32.000
or every single part is relevant for reproducing the failure.

00:01:32.000 --> 00:01:35.854
This precise strategy is called delta debugging and here's how it works.

