WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So now we're going to look at kind of an extreme example 

00:00:02.000 --> 00:00:05.000
of timing-dependent input being difficult to deal with.

00:00:05.000 --> 00:00:10.000
In the 1980s, there was a machine called a Therac-25.

00:00:10.000 --> 00:00:13.000
And what the Therac-25 was was a radiation therapy machine,

00:00:13.000 --> 00:00:17.000
and it was used to deliver a highly concentrated beam of radiation

00:00:17.000 --> 00:00:23.000
to a part of a human body where that beam could be used to destroy cancerous tissue

00:00:23.000 --> 00:00:25.000
without harming tissue that's nearby.

00:00:25.000 --> 00:00:29.000
And as you can see, this is not, obviously, an inherently safe technology.

00:00:29.000 --> 00:00:34.000
It's going to depend on skilled operators and also highly safe software

00:00:34.000 --> 00:00:39.000
in order to safely dose patients at the cancer site without harming the patients.

00:00:39.000 --> 00:00:43.000
So what happened with the Therac-25 was a tragic series of mistakes

00:00:43.000 --> 00:00:47.000
where 6 people were subjected to massive radiation overdoses

00:00:47.000 --> 00:00:49.000
and several of these people died.

00:00:49.000 --> 00:00:51.000
I'll make sure to include a link about these occurrences 

00:00:51.000 --> 00:00:53.000
in the supplementary material for this course.

00:00:53.000 --> 00:00:56.000
If you actually take a look at it, you'll find that it's really quite terrifying reading.

00:00:56.000 --> 00:00:59.000
It's really a very scary series of accidents.

00:00:59.000 --> 00:01:02.000
The Therac-25 had a number of serious issues with its software,

00:01:02.000 --> 00:01:04.000
and we're just going to talk about 1 of them here.

00:01:04.000 --> 00:01:08.000
The Therac-25 was a largely software-controlled device,

00:01:08.000 --> 00:01:11.000
and it had, at the time, a fairly sophisticated controller.

00:01:11.000 --> 00:01:15.000
It turned out that the people developing the software put a number of bugs into it.

00:01:15.000 --> 00:01:19.000
The particular bug that I'm talking about here was a software bug called a race condition.

00:01:19.000 --> 00:01:23.000
And what a race condition is is a scenario where different threads of execution

00:01:23.000 --> 00:01:25.000
fail to be properly synchronized,

00:01:25.000 --> 00:01:28.000
with the result being that the software containing the race conditions 

00:01:28.000 --> 00:01:30.000
can actually make mistakes.

00:01:30.000 --> 00:01:33.000
This particular race condition in the Therac-25 software

00:01:33.000 --> 00:01:37.000
involved the keyboard input to the radiation therapy machine,

00:01:37.000 --> 00:01:39.000
which is what the person operating the machine used

00:01:39.000 --> 00:01:42.000
to tell the machine how to treat the patient.

00:01:42.000 --> 00:01:46.000
And what happened was if the operator of the machine typed slowly,

00:01:46.000 --> 00:01:48.000
the bug was very unlikely to be triggered.

00:01:48.000 --> 00:01:51.000
And of course while the machine was being tested,

00:01:51.000 --> 00:01:53.000
the people testing the machine weren't very good at using it.

00:01:53.000 --> 00:01:56.000
They hadn't used it a lot, and so they didn't type very fast.

00:01:56.000 --> 00:01:58.000
But unfortunately, as operators in hospitals 

00:01:58.000 --> 00:02:01.000
became more and more familiar with this machine,

00:02:01.000 --> 00:02:04.000
as they treated hundreds and hundreds of patients,

00:02:04.000 --> 00:02:07.000
what happened was these people got very good at operating the machine,

00:02:07.000 --> 00:02:11.000
they typed faster and faster, and eventually they started triggering this bug.

00:02:11.000 --> 00:02:13.000
And the effect of this bug, unfortunately,

00:02:13.000 --> 00:02:16.000
was to deliver massive radiation overdoses to patients.

00:02:16.000 --> 00:02:18.000
And, as I said, this led to several fatalities.

00:02:18.000 --> 00:02:22.000
And so the kind of quandary that this scenario raises for us as software testers

00:02:22.000 --> 00:02:27.000
is do we have to care about the time at which inputs arrive at our software under test,

00:02:27.000 --> 00:02:29.000
or can we not worry about that?

00:02:29.000 --> 00:02:31.000
And so obviously, for the Therac-25

00:02:31.000 --> 00:02:34.000
and obviously, also for something like a Linux kernel,

00:02:34.000 --> 00:02:37.000
the time at which inputs arrive is relevant.

00:02:37.000 --> 00:02:40.000
On the other hand, unless we've been extremely sloppy,

00:02:40.000 --> 00:02:42.000
the square root function that we've been talking about

00:02:42.000 --> 00:02:45.000
won't care about the time at which its inputs arrive.

