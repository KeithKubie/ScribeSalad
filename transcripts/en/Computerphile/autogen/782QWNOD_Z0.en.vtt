WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:07.049
Let's just see how we would add together two floating point numbers if we've got 42 and so in floating point

00:00:07.359 --> 00:00:15.029
representation that would be 100 100 100 times 2 to the 1 2 3 4 5 so let's add on 6 so

00:00:15.460 --> 00:00:22.649
1 1 o is 6 and that's times 2 to the 2 so we now need to add these two numbers together

00:00:23.100 --> 00:00:29.429
Now before we would just add them together by going that was that that was that that Plus that that's it. We can't do that

00:00:29.949 --> 00:00:31.570
with

00:00:31.570 --> 00:00:37.590
Floating point numbers because the bit patterns for these things being that these are going to look like very very different things

00:00:40.000 --> 00:00:42.750
What we have to do is first of all

00:00:43.390 --> 00:00:49.439
Line them up to the bits in the same place. So we need to shift this one down so that the bit here which represents

00:00:50.050 --> 00:00:52.770
4 is in the same position as the bit that represents 4 here

00:00:53.079 --> 00:00:55.050
And so the number of spacing we need to shift

00:00:55.050 --> 00:01:01.289
This right is a difference between the big one and the little one in this case. It's three places. So 1 2 3

00:01:01.870 --> 00:01:05.040
Spaces so we shift it 3 spaces to the right

00:01:05.650 --> 00:01:08.489
And so the first that was rather than just adding them together. We have a

00:01:09.159 --> 00:01:16.559
Step. Now what we've got to expand them out of the bit representations because remember that this would actually be

00:01:17.409 --> 00:01:20.699
0 1 which is encoded 0 1

00:01:21.580 --> 00:01:23.580
0 1 0

00:01:25.090 --> 00:01:29.070
And this the 8 bit exponent this is going to be what

00:01:29.829 --> 00:01:32.609
127 plus 5 which is

00:01:33.579 --> 00:01:38.189
128 plus 4 so that's going to be 1 0 0

00:01:39.400 --> 00:01:41.940
One zero zero so it's gonna be something like that

00:01:41.950 --> 00:01:46.859
So we've got that so that's what that's represented by and this one is going to be similar

00:01:46.860 --> 00:01:52.320
It's going to be represented by zero. We've got one two, three, four, five six seven eight bits

00:01:53.380 --> 00:01:58.169
The ones already encoded implicitly zero and zeros down there ignore them for now

00:01:59.140 --> 00:02:01.140
And we're gonna store. This is 1

00:02:01.480 --> 00:02:04.079
0 0 0 0 0

00:02:05.650 --> 00:02:10.499
1 so the numbers were actually got in memory in our computer are represented like this

00:02:11.050 --> 00:02:13.050
so the first thing we have to do is

00:02:13.270 --> 00:02:16.529
Get them to a point we can and we can't just add these two numbers together anymore

00:02:16.530 --> 00:02:19.680
And we can see that they're simply by looking over here if we had 1 + 1

00:02:19.930 --> 00:02:25.049
We'd get 1 0 Z answer which mean with the answer to have a 1 here which means something go from positive numbers to any

00:02:25.050 --> 00:02:31.320
Negative number which is definitely wrong. So we need to unpack this representation into a form that we can add together

00:02:31.930 --> 00:02:36.060
now one way we could do that is just work out how many bits we would need and

00:02:36.250 --> 00:02:40.470
Assign the bits into the right place and do that, but we can actually use some sort of tricks

00:02:41.290 --> 00:02:45.089
We know for example if we're adding two numbers together

00:02:45.790 --> 00:02:48.540
with a certain number of bits in this case 24 bits

00:02:49.300 --> 00:02:52.020
The biggest number that we could add two numbers together and get a result

00:02:52.510 --> 00:02:55.829
Would have a value of two it roughly around two to the 25

00:02:56.020 --> 00:02:58.290
The other thing we know is one of these numbers going to have a greater

00:02:58.930 --> 00:03:00.700
Exponent than the other

00:03:00.700 --> 00:03:02.700
So what we can do is we could say, okay

00:03:02.920 --> 00:03:06.780
Let's keep that one where it is and shift this one or divide this one by two

00:03:07.900 --> 00:03:12.000
So that the exponent on it would be the same. So if we shift this one place to the left

00:03:12.910 --> 00:03:15.570
We'd end it was this a zero point one

00:03:16.450 --> 00:03:18.340
times two to the three

00:03:18.340 --> 00:03:20.260
another place to the left

00:03:20.260 --> 00:03:23.399
It would be zero point and so on times two to the four

00:03:23.739 --> 00:03:30.269
Until we end up with that one lined up there and that becomes times two to the five and then we have zero

00:03:31.780 --> 00:03:33.899
Zero point two zero zero

00:03:35.320 --> 00:03:36.970
1 there so

00:03:36.970 --> 00:03:40.410
We did the first step. We need to unpack them from the

00:03:41.020 --> 00:03:42.670
representations into

00:03:42.670 --> 00:03:47.549
forms that we can add together and then we need to shift this one so that the

00:03:48.190 --> 00:03:51.570
Exponents are the same. So we take the smaller one and shift it

00:03:52.080 --> 00:03:55.229
So the exponents Alanya now we can add those numbers together

00:03:55.480 --> 00:04:00.990
So we can now add these because locally we can produce a number one bit bigger than this if we add them together

00:04:01.450 --> 00:04:06.030
One plus one is two for example. So 0 plus 0 is 0

00:04:06.850 --> 00:04:11.070
1 plus 1 is 0 carry 1 0 plus 1 plus 1 is 0

00:04:11.440 --> 00:04:19.170
Carry 1 1 plus 1 is 0 carry 1 0 plus 0 plus 1 is 1 1

00:04:19.540 --> 00:04:23.969
2 to the 5 and then we ended up here times 2 to the 5 as already 6 on to 42

00:04:23.970 --> 00:04:29.279
And I've got 48 as a result. So he's done the maps and I could write that back now, but

00:04:29.980 --> 00:04:35.189
potentially we could have ended up with a 2 here if we added up 1 and 1 for example would get 2 and

00:04:35.350 --> 00:04:37.920
So we need to do a final step

00:04:37.920 --> 00:04:44.459
once we've done the addition which is to normalize this back potentially into the normal form which in this case would be 1

00:04:45.070 --> 00:04:47.070
point 1 0

00:04:47.200 --> 00:04:48.400
0 0

00:04:48.400 --> 00:04:54.390
0 times 2 to the 5 so the reason that floating point numbers take much longer to process

00:04:54.520 --> 00:04:59.280
Is that as well as doing the addition which you can do in exactly the same way?

00:05:01.090 --> 00:05:05.130
You also have to take the bits unpack them from the representation

00:05:05.830 --> 00:05:06.840
shift them along

00:05:06.840 --> 00:05:13.560
So they match up things then do the addition and then potentially shift them back to get it back into the normalized form the standard

00:05:13.870 --> 00:05:15.610
scientific

00:05:15.610 --> 00:05:20.940
Representation the other problem you get is even though we can pack all these numbers

00:05:22.330 --> 00:05:25.169
Into 32 bits the representation

00:05:26.890 --> 00:05:29.429
When we slide them along we may end up needing

00:05:30.070 --> 00:05:32.339
More than 32 bits as many as 48

00:05:33.160 --> 00:05:36.149
To represent things because if we have to slide this one

00:05:37.210 --> 00:05:43.380
Along to the point here when we're doing the maps that we actually need 48 bits to do the calculation

00:05:43.380 --> 00:05:43.680
Of course

00:05:43.680 --> 00:05:47.190
That means you don't have to do on the 32 bit CP you've two additions for

00:05:47.620 --> 00:05:52.470
That half and then that half and carry the value over from one to the other which again would slow things down

00:05:53.440 --> 00:05:58.290
In hardware, you can build your representations to take care of this if you've got 64 bit doubles

00:05:58.510 --> 00:06:00.400
You know that you perhaps don't need more

00:06:00.400 --> 00:06:05.220
Than certain number of bits to represent you and you can build the hardware to take all this and it ends up being

00:06:05.950 --> 00:06:10.589
Much faster that must be quite fiddly to do with standard hardware

00:06:10.590 --> 00:06:17.040
So is that why we end up with this custom hardware this floating-point unit. It's not most much fiddly. I mean most computers

00:06:18.370 --> 00:06:20.730
Preserve the carry when they add two bradleys together

00:06:20.730 --> 00:06:23.580
so if you had two 32-bit numbers that produces value greater than

00:06:23.650 --> 00:06:28.470
32 bits they preserve that bit and let you add it on so you can use multiple registers to do it

00:06:29.110 --> 00:06:30.880
But you just have to then do

00:06:30.880 --> 00:06:36.149
Two operations to add operations one after the other if you know the operations are going to do this

00:06:36.150 --> 00:06:41.520
You can build your hardware to do that in one go so we could build hardware that would add these together

00:06:41.920 --> 00:06:44.670
There are lots of things you can spot where you could early out

00:06:44.670 --> 00:06:49.439
So for example, if the exponent was such that these end up so far apart

00:06:50.170 --> 00:06:54.569
That you know adding this onto this where there's all zero bits along here assumed

00:06:54.970 --> 00:06:57.989
Isn't going to make any difference to this you can say, well actually I don't need to do that

00:06:58.440 --> 00:07:03.179
I'm just ignore it. If you know the number zero you can ignore it and so on

00:07:03.250 --> 00:07:09.660
So there's this ways you can speed things up when writing the software and I suspect the hardware just some of the things although probably

00:07:09.660 --> 00:07:10.690
Isn't lead to

00:07:10.690 --> 00:07:14.040
the interesting thing if you think about the way the mathematics work

00:07:15.160 --> 00:07:20.070
Unlike integer numbers where multiplying integer numbers is trickier than addition

00:07:20.770 --> 00:07:24.989
Because you end up having to do lots of shifts and adds into the different things

00:07:25.690 --> 00:07:27.899
multiplying to floating point numbers is

00:07:29.110 --> 00:07:31.560
relatively straightforward compared to addition because

00:07:32.470 --> 00:07:34.450
We just have to multiply

00:07:34.450 --> 00:07:36.450
the two

00:07:36.700 --> 00:07:39.359
Mantises adding the extra bit back in if it's there and

00:07:40.030 --> 00:07:42.010
Then add the exponents together

00:07:42.010 --> 00:07:46.020
So multiplication actually becomes much simpler to do with floating point numbers and addition

00:07:46.240 --> 00:07:50.970
Because the addition requires us to unpack everything and push the bits around to get things in the right place

00:07:51.850 --> 00:07:56.070
now I've got the token so I can load a value in add the valley from register into it and

00:07:56.170 --> 00:07:58.799
Store it back and hand the token and now I've got the token again

00:07:58.800 --> 00:07:59.950
I can load something into

00:07:59.950 --> 00:08:05.520
It into my register add something onto it so it back and pass the take it on and I've got it so I can load

00:08:05.520 --> 00:08:07.889
The value in add the value from a register story back

