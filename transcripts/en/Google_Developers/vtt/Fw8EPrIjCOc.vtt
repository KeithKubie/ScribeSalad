WEBVTT
Kind: captions
Language: en

00:00:22.634 --> 00:00:25.400
Lindsay:
I am Jeff Lindsay.

00:00:25.400 --> 00:00:27.868
I was going
to introduce myself

00:00:27.868 --> 00:00:29.234
'cause I wasn't sure
what to tell her to--

00:00:29.234 --> 00:00:32.400
how to introduce me
as but,

00:00:32.400 --> 00:00:35.968
I've--basically, I--

00:00:35.968 --> 00:00:39.267
strange generalist
and entrepreneur

00:00:39.267 --> 00:00:40.801
and web developer,

00:00:40.801 --> 00:00:45.868
and I currently work
at NASA Ames

00:00:45.868 --> 00:00:48.367
on some cool web stuff.

00:00:48.367 --> 00:00:51.033
I also started
SuperHappyDevHouse,

00:00:51.033 --> 00:00:53.734
which is a cool party
for hackers and thinkers.

00:00:53.734 --> 00:00:55.734
And I've done
some other stuff

00:00:55.734 --> 00:00:57.367
but you've probably
never heard of it,

00:00:57.367 --> 00:00:59.534
although you might
have heard of Web Hooks.

00:00:59.534 --> 00:01:00.834
I don't know,
has--is--

00:01:00.834 --> 00:01:04.934
is this a familiar concept
with anybody here?

00:01:04.934 --> 00:01:06.801
Okay.
A couple of you.

00:01:06.801 --> 00:01:08.200
And the rest of you
are just, like, curious

00:01:08.200 --> 00:01:10.067
what this thing is?

00:01:10.067 --> 00:01:12.767
Okay. Well, you'll find out.

00:01:12.767 --> 00:01:16.400
So I've--I've--
I guess I'm the--

00:01:16.400 --> 00:01:18.200
at least right now,
the main evangelist

00:01:18.200 --> 00:01:21.701
behind this concept.

00:01:21.701 --> 00:01:24.601
Three years ago,
I kind of like was

00:01:24.601 --> 00:01:30.133
just thinking about
HTTP callbacks,

00:01:30.133 --> 00:01:36.067
and I kind of just gave it
this name of "web hooks"

00:01:36.067 --> 00:01:38.968
and I guess fairly recently
people have started

00:01:38.968 --> 00:01:41.133
to get excited about
them for some reason.

00:01:41.133 --> 00:01:45.133
So the point of this
is to kind of share

00:01:45.133 --> 00:01:47.167
what they are
and why they're significant,

00:01:47.167 --> 00:01:49.868
and what's going on
in this sort of, like,

00:01:49.868 --> 00:01:53.634
growing ecosystem
of web hooks.

00:01:53.634 --> 00:01:56.634
So I've given a version
of this talk before,

00:01:56.634 --> 00:01:57.968
and this time I--

00:01:57.968 --> 00:02:00.267
I kind of want to emphasize
the programmable part

00:02:00.267 --> 00:02:03.267
because that's kind of a--
a major influence

00:02:03.267 --> 00:02:05.334
for why this was
significant to me

00:02:05.334 --> 00:02:07.200
in the first place.

00:02:07.200 --> 00:02:09.133
Because a lot of people
are associating this

00:02:09.133 --> 00:02:10.267
with--with other things

00:02:10.267 --> 00:02:13.634
that aren't exactly
what it's about.

00:02:13.634 --> 00:02:17.601
So...

00:02:17.601 --> 00:02:19.334
I--I was told
by a friend of mine

00:02:19.334 --> 00:02:21.667
that--he was reading
about web hooks,

00:02:21.667 --> 00:02:24.334
and he got really
excited about them,

00:02:24.334 --> 00:02:26.868
and then he went to find out
what exactly they are

00:02:26.868 --> 00:02:30.000
and he got
really disappointed.

00:02:30.000 --> 00:02:33.968
And--the--what I'm--

00:02:33.968 --> 00:02:35.367
what I think
I'm describing is--

00:02:35.367 --> 00:02:38.801
is a, you know,
a game-changer,

00:02:38.801 --> 00:02:41.534
but it's based on,
you know, a mechanism

00:02:41.534 --> 00:02:45.567
that really takes one
line of code to describe.

00:02:45.567 --> 00:02:48.767
So it seems really simple,

00:02:48.767 --> 00:02:51.501
and so people think
it can only do simple things

00:02:51.501 --> 00:02:54.934
when it's
quite the contrary,

00:02:54.934 --> 00:02:58.100
as Go would be
an example of--

00:02:58.100 --> 00:03:03.234
simple mechanics
creating rich dynamics.

00:03:03.234 --> 00:03:06.367
So the point of this talk
is to show the implications

00:03:06.367 --> 00:03:07.868
of this as well as,
like, what it is.

00:03:07.868 --> 00:03:09.267
So notice
I'm dancing around it

00:03:09.267 --> 00:03:10.667
because that's how I roll.

00:03:10.667 --> 00:03:13.567
So at the high level,
you know,

00:03:13.567 --> 00:03:15.868
I was kind of inspired by,
you know,

00:03:15.868 --> 00:03:18.901
1997, Jon Udell,
who was talking about

00:03:18.901 --> 00:03:22.133
websites as data sources
that can be reused and remixed.

00:03:22.133 --> 00:03:25.167
And today that idea
isn't very novel.

00:03:25.167 --> 00:03:27.567
But he kind of talked about,
you know,

00:03:27.567 --> 00:03:28.834
"a new programming paradigm

00:03:28.834 --> 00:03:31.067
that takes the whole Internet
as its platform."

00:03:31.067 --> 00:03:33.501
And this was
very interesting to me,

00:03:33.501 --> 00:03:38.000
and it kind of
manifested recently

00:03:38.000 --> 00:03:40.501
or at, you know,
2005-ish area--era

00:03:40.501 --> 00:03:44.701
as "The Programmable Web"
or "The Web as the Platform."

00:03:44.701 --> 00:03:47.000
And, uh, in 2005,
John Musser

00:03:47.000 --> 00:03:49.601
started tracking
APIs and mashups

00:03:49.601 --> 00:03:52.667
that were on the web,

00:03:52.667 --> 00:03:54.901
and now there's
over 1,000 APIs

00:03:54.901 --> 00:04:01.367
and they're--it's growing
at a pretty nice rate.

00:04:01.367 --> 00:04:04.667
So APIs and mashups,

00:04:04.667 --> 00:04:05.968
I guess,
have become the foundation

00:04:05.968 --> 00:04:08.501
of the programmable web--

00:04:08.501 --> 00:04:09.868
or are they?

00:04:09.868 --> 00:04:11.801
After thinking
about web hooks,

00:04:11.801 --> 00:04:14.634
and fairly recently, thinking
about the programmable web,

00:04:14.634 --> 00:04:21.100
I realized
that APIs and mashups

00:04:21.100 --> 00:04:24.000
don't really make
a programmable web.

00:04:24.000 --> 00:04:27.267
They make a program--
a programmatic web.

00:04:27.267 --> 00:04:31.434
And so, for example,
Twitter--the Twitter API

00:04:31.434 --> 00:04:33.501
lets us use Twitter
programmatically,

00:04:33.501 --> 00:04:37.267
but it doesn't let you
program Twitter to do more.

00:04:37.267 --> 00:04:40.367
So I--my argument
is kind of like

00:04:40.367 --> 00:04:43.634
web hooks will bring about
the real programmable web.

00:04:43.634 --> 00:04:45.000
So--okay,
so what are they?

00:04:45.000 --> 00:04:47.601
I said--
I mentioned HTTP callbacks,

00:04:47.601 --> 00:04:50.300
but here's
a little scenario.

00:04:50.300 --> 00:04:54.033
So we have
a web service here

00:04:54.033 --> 00:04:57.801
and his name
is Twickr.

00:04:57.801 --> 00:05:00.868
And the user's like,
"Cool. Sign me up."

00:05:00.868 --> 00:05:02.934
"All right.
You're all set. Now listen.

00:05:02.934 --> 00:05:05.200
"I might find myself
with some data

00:05:05.200 --> 00:05:06.567
"that you might be
interested in,

00:05:06.567 --> 00:05:10.734
"that's relevant to you.

00:05:10.734 --> 00:05:14.067
You know, "What--what do
you want me to do with it?"

00:05:14.067 --> 00:05:16.767
And so the user says, 
"All right. Hold on a sec."

00:05:16.767 --> 00:05:18.634
And he goes off
and he hacks up some script,

00:05:18.634 --> 00:05:20.300
and he comes back and says,

00:05:20.300 --> 00:05:23.167
"Could you just post it here
whenever you have any?"

00:05:23.167 --> 00:05:25.534
And the web service is like,
"Sure, why not?

00:05:25.534 --> 00:05:27.100
But what's at that URL?"

00:05:27.100 --> 00:05:29.234
And the user says,
"Well, it's a tiny handler

00:05:29.234 --> 00:05:30.767
I put up on App Engine."

00:05:30.767 --> 00:05:34.000
And the web service says,
"Well, what does it do?"

00:05:34.000 --> 00:05:36.400
And the user says,
"It doesn't matter to you.

00:05:36.400 --> 00:05:38.133
It does whatever I want."

00:05:38.133 --> 00:05:40.267
That's kind of the point.

00:05:40.267 --> 00:05:45.234
Web hooks are just simple
user-defined HTTP callbacks.

00:05:45.234 --> 00:05:47.300
But you see what this--
what this does

00:05:47.300 --> 00:05:50.868
is it makes the web service
become extensible

00:05:50.868 --> 00:05:54.400
and it makes the user
become empowered.

00:05:54.400 --> 00:05:58.501
I was--a friend of mine
was trying

00:05:58.501 --> 00:06:01.200
to get me to explain
web hooks to her.

00:06:01.200 --> 00:06:03.968
And she's not a programmer
but she has an iPhone,

00:06:03.968 --> 00:06:06.634
so after
explaining this to her

00:06:06.634 --> 00:06:09.434
she compared it
to jailbreaking the iPhone.

00:06:09.434 --> 00:06:11.167
And I thought
about it for a minute

00:06:11.167 --> 00:06:15.467
and I thought, "Yeah,
I guess that kind of works."

00:06:15.467 --> 00:06:16.734
You know, it's--

00:06:16.734 --> 00:06:18.901
it's letting users do
what they want with it.

00:06:18.901 --> 00:06:22.467
You know, customize it,
add applications, etc.

00:06:22.467 --> 00:06:26.467
So having web hooks
in your web service

00:06:26.467 --> 00:06:28.267
is like jailbreaking
your web app.

00:06:28.267 --> 00:06:32.701
It's opening
functional extensibility.

00:06:32.701 --> 00:06:35.801
So to describe
the core mechanic

00:06:35.801 --> 00:06:38.868
of web hooks
is very simple.

00:06:38.868 --> 00:06:42.033
So this is a pseudo-code
example of what

00:06:42.033 --> 00:06:44.334
the heart of implementing
web hooks looks like.

00:06:44.334 --> 00:06:46.300
And you can dress this up
in lots of ways

00:06:46.300 --> 00:06:49.167
and there's reasons why you
would want to dress this up.

00:06:49.167 --> 00:06:50.267
But it's very simple.

00:06:50.267 --> 00:06:52.167
You're making
an HTTP request

00:06:52.167 --> 00:06:56.801
to a user-specified URL
on major events.

00:06:56.801 --> 00:06:58.367
PayPal is probably

00:06:58.367 --> 00:07:01.234
one of the oldest
web hook implementers.

00:07:01.234 --> 00:07:02.868
Their Instant
Payment Notification

00:07:02.868 --> 00:07:04.567
is a web hook.

00:07:04.567 --> 00:07:07.267
They describe it--
"When a customer pays you,

00:07:07.267 --> 00:07:08.834
"PayPal posts a notification

00:07:08.834 --> 00:07:12.434
to your server
at a URL you specify."

00:07:12.434 --> 00:07:14.534
And it's framed
as a notification

00:07:14.534 --> 00:07:17.868
just kind of--kind of like
how I described web hooks

00:07:17.868 --> 00:07:19.167
when I
started writing about it.

00:07:19.167 --> 00:07:21.667
But it doesn't properly
imply the usage

00:07:21.667 --> 00:07:25.167
it's intended for,
which is integration.

00:07:25.167 --> 00:07:27.000
So I'll come back to that.

00:07:27.000 --> 00:07:29.067
So I started thinking
about this in 2006,

00:07:29.067 --> 00:07:32.467
kind of inspired by PayPal

00:07:32.467 --> 00:07:35.067
and some projects
that I was working on,

00:07:35.067 --> 00:07:38.601
and it was kind of like I
saw a lot of what it could do

00:07:38.601 --> 00:07:40.634
and I was like, "Well, that's--
this is really awesome.

00:07:40.634 --> 00:07:42.701
Why isn't this," you know,
"all over the place?

00:07:42.701 --> 00:07:44.400
Why aren't there
web hooks everywhere?"

00:07:44.400 --> 00:07:46.934
And I felt like
I was taking crazy pills

00:07:46.934 --> 00:07:49.467
and I would--
I would tell people about it

00:07:49.467 --> 00:07:51.067
and they'd be like,
"Yeah, that---that's a--"

00:07:51.067 --> 00:07:52.801
you know, "Why not?"

00:07:52.801 --> 00:07:54.534
And I guess today
I know why

00:07:54.534 --> 00:07:56.934
it wasn't recognized--

00:07:56.934 --> 00:07:59.834
is it's just--
it's just so--

00:07:59.834 --> 00:08:02.968
you know, it's such
an abstract idea, you know.

00:08:02.968 --> 00:08:05.033
And it's--it's like,
"It can be used for anything!"

00:08:05.033 --> 00:08:06.767
Right?
And people don't get that.

00:08:06.767 --> 00:08:09.868
You know, they--
they need concrete examples,

00:08:09.868 --> 00:08:12.000
and so over
the past three years,

00:08:12.000 --> 00:08:13.200
there's--more
and more people

00:08:13.200 --> 00:08:14.434
have been implementing
web hooks,

00:08:14.434 --> 00:08:17.033
and I can basically
point those examples out.

00:08:17.033 --> 00:08:20.167
So comparing it to REST,

00:08:20.167 --> 00:08:23.133
you know,
SOAP versus REST--

00:08:23.133 --> 00:08:25.567
they've been around a lot longer
than the graph shows,

00:08:25.567 --> 00:08:28.033
but, you know,
REST is much simpler.

00:08:28.033 --> 00:08:29.234
In fact,
you could describe it

00:08:29.234 --> 00:08:31.200
as using HTTP properly,

00:08:31.200 --> 00:08:34.200
but it wasn't
until it got a name

00:08:34.200 --> 00:08:35.667
that it could really
be used in discourse

00:08:35.667 --> 00:08:36.934
to make it popular.

00:08:36.934 --> 00:08:40.267
And so that's kind of what
I was doing

00:08:40.267 --> 00:08:41.534
by giving web hooks a name.

00:08:41.534 --> 00:08:44.000
And so now
we're talking about it,

00:08:44.000 --> 00:08:46.767
and there's now a--starting
to be a discussion about it.

00:08:46.767 --> 00:08:50.334
And actually REST and--
REST APIs and web hooks

00:08:50.334 --> 00:08:52.300
are kind of two sides
of the same coin,

00:08:52.300 --> 00:08:53.968
and they--
they complement each other

00:08:53.968 --> 00:08:55.434
in--in ways that
I'll get to later,

00:08:55.434 --> 00:09:00.067
but that's--so I just want
to give it this name

00:09:00.067 --> 00:09:02.000
and start associating
some ideas with it.

00:09:02.000 --> 00:09:04.934
And so now the--the--
that was all just introduction.

00:09:04.934 --> 00:09:07.834
I've split this talk
into three sections.

00:09:07.834 --> 00:09:11.767
And these are basically
different general ways

00:09:11.767 --> 00:09:13.100
you can use web hooks.

00:09:13.100 --> 00:09:17.601
So the first one is--
is Push.

00:09:17.601 --> 00:09:19.133
'Cause this is kind of
what a lot of people

00:09:19.133 --> 00:09:20.501
are talking about
right now.

00:09:20.501 --> 00:09:22.868
They're talking about Push
and PubSub on the web.

00:09:22.868 --> 00:09:25.901
And although it's not
the first time--right?

00:09:25.901 --> 00:09:27.934
And actually,
I found this recently.

00:09:27.934 --> 00:09:33.534
In 1998, predating RSS,
or RSS 0.92,

00:09:33.534 --> 00:09:35.501
Microsoft submitted
an Internet draft

00:09:35.501 --> 00:09:39.434
to extend HTTP to provide
a basic PubSub framework

00:09:39.434 --> 00:09:41.734
called "Gina" or "Jenna"--

00:09:41.734 --> 00:09:43.501
I don't know how
it would be pronounced--

00:09:43.501 --> 00:09:45.734
but GENA,

00:09:45.734 --> 00:09:50.133
General Event
Notification Architecture.

00:09:50.133 --> 00:09:52.400
And it had
standard PubSub terms

00:09:52.400 --> 00:09:55.868
and it added
four new methods to HTTP.

00:09:55.868 --> 00:09:59.067
And it--
it expired eventually.

00:09:59.067 --> 00:10:02.100
Nothing ever happened,
so in 1999, it expired.

00:10:02.100 --> 00:10:06.400
But--and the group behind it
kind of seemed to disappear.

00:10:06.400 --> 00:10:10.767
However, the methods
and protocol

00:10:10.767 --> 00:10:14.234
ended up in the WebDAV
implementation for exchange,

00:10:14.234 --> 00:10:15.767
which is interesting.

00:10:15.767 --> 00:10:20.067
Anyway, but then in 2000,
RSS 0.92 is released.

00:10:20.067 --> 00:10:21.834
And five years later,
it got a nice icon

00:10:21.834 --> 00:10:25.434
and had, you know,
widespread adoption.

00:10:25.434 --> 00:10:28.033
And it started with blog feeds
and then comment feeds,

00:10:28.033 --> 00:10:29.634
but then it exploded
into Twitter feeds

00:10:29.634 --> 00:10:31.300
and photo feeds
and activity feeds

00:10:31.300 --> 00:10:33.634
and event feeds
and bookmark feeds,

00:10:33.634 --> 00:10:36.000
and then,
even feeds of feeds.

00:10:36.000 --> 00:10:39.234
So the name "feeds"
is kind of nice.

00:10:39.234 --> 00:10:40.834
It kind of makes you think
of the telecom world

00:10:40.834 --> 00:10:42.868
of data coming
directly to you.

00:10:42.868 --> 00:10:44.868
But we know that's
not how it works, right?

00:10:44.868 --> 00:10:46.601
Instead, we have
to go request the data

00:10:46.601 --> 00:10:49.200
and then it gives it to us,
and we do this over and over--

00:10:49.200 --> 00:10:50.801
Are we there yet?
Are we there yet?

00:10:50.801 --> 00:10:53.400
You've heard this before.
This is polling.

00:10:53.400 --> 00:10:56.033
And feeds
made sense in a world

00:10:56.033 --> 00:10:57.901
where the feed reader
ran on the desktop

00:10:57.901 --> 00:11:00.434
and can be pushed to--
over HTTP.

00:11:00.434 --> 00:11:02.834
But, of course,
now we have, you know,

00:11:02.834 --> 00:11:04.234
the--it seems like
the majority of--

00:11:04.234 --> 00:11:07.234
of feed consumption happens
from other web applications

00:11:07.234 --> 00:11:09.267
on servers.

00:11:09.267 --> 00:11:11.767
And it doesn't
necessarily make sense.

00:11:11.767 --> 00:11:14.100
And even most of
our feed readers today--

00:11:14.100 --> 00:11:18.167
you know, Google Reader--
are web-based applications.

00:11:18.167 --> 00:11:21.868
So we've had some,
you know,

00:11:21.868 --> 00:11:23.968
incremental solutions
proposed.

00:11:23.968 --> 00:11:27.767
SUP, which is the
Simple Update Protocol,

00:11:27.767 --> 00:11:29.801
it, you know,
increases the efficiency

00:11:29.801 --> 00:11:31.834
of consuming
large amounts of feeds.

00:11:31.834 --> 00:11:34.133
However, it's
based on polling still

00:11:34.133 --> 00:11:35.934
and is essentially
yet another feed.

00:11:35.934 --> 00:11:40.501
So I couldn't help
but to think of this.

00:11:43.501 --> 00:11:46.567
So Evan and Kellan
gave a great talk

00:11:46.567 --> 00:11:49.634
a while back
about this Push issue,

00:11:49.634 --> 00:11:53.767
and their proposed solution
was XMPP.

00:11:53.767 --> 00:11:54.868
Of course.
Right?

00:11:54.868 --> 00:11:58.634
How many of you
support XMPP?

00:11:58.634 --> 00:12:00.734
Nobody.
Okay, that's cool.

00:12:00.734 --> 00:12:04.033
So I have a condensed
version of their talk,

00:12:04.033 --> 00:12:05.400
in case you missed it.

00:12:05.400 --> 00:12:08.968
The slides kind of
speak for themselves.

00:12:08.968 --> 00:12:11.701
Polling sucks.

00:12:11.701 --> 00:12:14.467
Are we there yet?
Are we there yet?

00:12:14.467 --> 00:12:16.467
Let me know
when something changes.

00:12:16.467 --> 00:12:17.868
'Kay, thanks, bye.

00:12:17.868 --> 00:12:20.634
XMPP PubSub.
Thank you.

00:12:20.634 --> 00:12:21.968
Questions?
Yeah.

00:12:21.968 --> 00:12:23.100
So that was their talk.

00:12:23.100 --> 00:12:24.734
Pretty great point.

00:12:24.734 --> 00:12:27.767
Polling sucks, and XMPP
is a pretty good solution

00:12:27.767 --> 00:12:29.334
for data streams,
right?

00:12:29.334 --> 00:12:31.868
But it's kind of heavyweight
and it does a lot

00:12:31.868 --> 00:12:35.534
and makes for a decently
complex little system.

00:12:35.534 --> 00:12:38.067
Luckily it's not
that hard to use anymore

00:12:38.067 --> 00:12:39.601
with today's libraries,
but I mean,

00:12:39.601 --> 00:12:41.934
if you look at it,
it's complicated.

00:12:41.934 --> 00:12:44.501
And you have to,
you know--

00:12:44.501 --> 00:12:48.367
well, I don't really want
to get into the whole XMPP thing

00:12:48.367 --> 00:12:51.267
'cause the point is
is that it's not really

00:12:51.267 --> 00:12:53.033
XMPP versus web hooks.

00:12:53.033 --> 00:12:55.734
Not really.

00:12:55.734 --> 00:12:58.434
But so Evan and Kellan
did point out that there are,

00:12:58.434 --> 00:13:00.968
you know, extremes
when it comes to data streams.

00:13:00.968 --> 00:13:03.267
Most data streams
will probably fall

00:13:03.267 --> 00:13:05.200
somewhere in-between
fast and furious

00:13:05.200 --> 00:13:06.834
and small and infrequent.

00:13:06.834 --> 00:13:10.567
And, I guess, you know,
XMPP is pretty well-suited

00:13:10.567 --> 00:13:12.868
for the fast
and furious feeds.

00:13:12.868 --> 00:13:17.067
So Joshua Schachter,

00:13:17.067 --> 00:13:19.067
who's not here, I guess?

00:13:19.067 --> 00:13:22.267
No?

00:13:22.267 --> 00:13:24.767
He responded to that talk
in a blog post.

00:13:24.767 --> 00:13:27.000
He said--
he basically suggested

00:13:27.000 --> 00:13:28.968
web hooks
as an alternative--

00:13:28.968 --> 00:13:34.300
saying HTTP callbacks,
right?

00:13:34.300 --> 00:13:35.501
So you know, he says,

00:13:35.501 --> 00:13:38.267
falls comfortably between
polling and XMPP.

00:13:38.267 --> 00:13:40.000
And I agree,
and I think that they

00:13:40.000 --> 00:13:42.501
can cover most use cases
pretty well.

00:13:42.501 --> 00:13:46.133
I guess, though,
the interesting thing

00:13:46.133 --> 00:13:48.701
is a lot of people
are saying, you know,

00:13:48.701 --> 00:13:51.267
"Web hooks--it's the new
posh way to say 'callback.'"

00:13:51.267 --> 00:13:52.701
You know?

00:13:52.701 --> 00:13:55.501
I think what--what
differentiates web hooks

00:13:55.501 --> 00:13:58.200
from just saying
it's an HTTP callback

00:13:58.200 --> 00:14:00.767
is, uh,
that it's user-defined.

00:14:00.767 --> 00:14:02.934
And so we'll get
into that in a bit.

00:14:02.934 --> 00:14:05.234
But go--moving on
with this Push stuff,

00:14:05.234 --> 00:14:06.868
we've got GetPingd,

00:14:06.868 --> 00:14:10.601
which is the standard
for discovering and subscribing

00:14:10.601 --> 00:14:12.167
to content changes.

00:14:12.167 --> 00:14:15.300
And they let you have--
use web hooks or XMPP,

00:14:15.300 --> 00:14:16.434
which is nice.

00:14:16.434 --> 00:14:18.901
And it's a good idea,
but like GENA,

00:14:18.901 --> 00:14:24.167
you know, a speck alone
doesn't really change the world.

00:14:24.167 --> 00:14:26.434
So yeah, although
implementation on--

00:14:26.434 --> 00:14:29.634
so on the other hand,
you have pure implementation.

00:14:29.634 --> 00:14:34.534
We have a service
like Gnip which is...

00:14:34.534 --> 00:14:38.167
their main goal is to
stop polling as a service.

00:14:38.167 --> 00:14:42.033
And so they--
they also kind of transform

00:14:42.033 --> 00:14:46.133
protocol mechanisms, so.

00:14:46.133 --> 00:14:48.300
You can pick your own
protocol and mechanism

00:14:48.300 --> 00:14:50.734
for getting data streams

00:14:50.734 --> 00:14:53.567
no matter what the feed
publisher is publishing.

00:14:53.567 --> 00:14:57.133
So although they recently
dropped support for--

00:14:57.133 --> 00:15:00.267
to consume XMPP
for interesting reasons,

00:15:00.267 --> 00:15:02.167
making web hooks
their primary Push mechanism

00:15:02.167 --> 00:15:04.767
for consuming data.

00:15:04.767 --> 00:15:07.300
So as--in case
you're not familiar,

00:15:07.300 --> 00:15:08.767
a quick example--

00:15:08.767 --> 00:15:10.767
if I wanted to get
Digg updates via web hooks,

00:15:10.767 --> 00:15:14.567
Gnip will poll Digg for me

00:15:14.567 --> 00:15:16.400
and invoke my callback
with the content

00:15:16.400 --> 00:15:19.901
as the new updates come in.

00:15:19.901 --> 00:15:22.734
I could even poll
Gnip for Digg updates,

00:15:22.734 --> 00:15:23.968
and although
that seems redundant,

00:15:23.968 --> 00:15:26.133
it helps, you know,
ease the load on Digg

00:15:26.133 --> 00:15:27.901
because Gnip can cache,

00:15:27.901 --> 00:15:30.400
and it allows Gnip to provide
filtering functionality

00:15:30.400 --> 00:15:32.367
and whatever else they want
to do to add value to this.

00:15:32.367 --> 00:15:35.701
And yet another example
might be of Twitter,

00:15:35.701 --> 00:15:38.100
who provides
an XMPP stream,

00:15:38.100 --> 00:15:39.534
but I already have
polling set up

00:15:39.534 --> 00:15:41.734
so Gnip would help--
would let me poll

00:15:41.734 --> 00:15:43.734
instead of integrate XMPP.

00:15:43.734 --> 00:15:46.501
So that's Gnip.

00:15:46.501 --> 00:15:48.767
In promoting web hooks,
I sort of look up

00:15:48.767 --> 00:15:52.434
to the way microformats work
in values and process.

00:15:52.434 --> 00:15:55.267
It's a very sort of
ground-up, grassroots effort,

00:15:55.267 --> 00:15:57.868
and it's, you know,

00:15:57.868 --> 00:16:00.434
taking existing popular use--
use patterns

00:16:00.434 --> 00:16:02.868
and then making that
a convention.

00:16:02.868 --> 00:16:06.400
So it's sort of a--
letting...

00:16:06.400 --> 00:16:10.133
that's why there--
there isn't, you know,

00:16:10.133 --> 00:16:12.534
like a spec
around web hooks.

00:16:12.534 --> 00:16:14.467
Because, first of all,
I think

00:16:14.467 --> 00:16:16.701
it's too general of a thing
to--to write a spec for.

00:16:16.701 --> 00:16:19.334
You can write specs
for more specific things

00:16:19.334 --> 00:16:21.400
on top of it,
but I would rather

00:16:21.400 --> 00:16:24.267
let interesting
implementations come up

00:16:24.267 --> 00:16:27.367
and then we
can develop as--

00:16:27.367 --> 00:16:29.200
as we explore
the possibilities,

00:16:29.200 --> 00:16:31.167
then we can take
the best practices from there.

00:16:31.167 --> 00:16:33.634
Instead of trying to,
you know--

00:16:33.634 --> 00:16:36.801
try and think of
every possible use case

00:16:36.801 --> 00:16:39.300
beforehand and
encode it in a document.

00:16:39.300 --> 00:16:42.167
So but also microformats
can be viewed

00:16:42.167 --> 00:16:45.534
as an alternative
to XML and RDF.

00:16:45.534 --> 00:16:48.834
And Tantek is a big
microformats evangelist.

00:16:48.834 --> 00:16:51.934
In comparing microformats
and XML/RDF

00:16:51.934 --> 00:16:54.033
he says, well,
"Here's a new language

00:16:54.033 --> 00:16:55.767
"we want you to learn,
and now you need to output

00:16:55.767 --> 00:16:57.200
"these additional
files on your server.

00:16:57.200 --> 00:16:58.801
"And it's a hassle.

00:16:58.801 --> 00:17:01.434
Microformats lowers
the barrier to entry."

00:17:01.434 --> 00:17:03.367
So I thought that
was kind of similar

00:17:03.367 --> 00:17:05.767
to web hooks versus XMPP.

00:17:05.767 --> 00:17:07.868
So I told him
about web hooks,

00:17:07.868 --> 00:17:08.968
and he's like,
"What are they?"

00:17:08.968 --> 00:17:10.367
And I said,
"Push over HTTP,"

00:17:10.367 --> 00:17:11.467
because it's--
the sim--

00:17:11.467 --> 00:17:12.601
I was trying out,
you know,

00:17:12.601 --> 00:17:15.067
simple ways
to explain web hooks,

00:17:15.067 --> 00:17:16.701
and he says, "How are they
different than XMPP?"

00:17:16.701 --> 00:17:18.801
And I said, "Well, they're
just a lightweight alternative."

00:17:18.801 --> 00:17:20.801
You know, they lower
the barrier to entry.

00:17:20.801 --> 00:17:22.934
And he said, "Good.
XMPP needs a competitor."

00:17:22.934 --> 00:17:26.267
And this was encouraging
coming from Tantek,

00:17:26.267 --> 00:17:28.701
because when he talks,
you listen--

00:17:28.701 --> 00:17:32.133
if for no other reason
than he gets the chicks.

00:17:32.133 --> 00:17:34.634
Unfortunately, XMPP--

00:17:34.634 --> 00:17:36.400
well, at least
in web hooks' case--

00:17:36.400 --> 00:17:39.501
XMPP has many features
and proposals to do

00:17:39.501 --> 00:17:42.901
PubSub and stuff that--
things that web hook doesn't do

00:17:42.901 --> 00:17:45.234
out of the box because
it's just, you know,

00:17:45.234 --> 00:17:47.667
making an HTTP request.

00:17:47.667 --> 00:17:51.734
I mean--so it's--

00:17:51.734 --> 00:17:53.868
it's not
a messaging protocol.

00:17:53.868 --> 00:17:55.701
So in order to do PubSub
with web hooks,

00:17:55.701 --> 00:17:57.634
you need
to have more implemented.

00:17:57.634 --> 00:18:01.200
And that's something
that Brad Fitzpatrick

00:18:01.200 --> 00:18:03.534
and Brett Slatkin
are--are doing

00:18:03.534 --> 00:18:06.000
with PubSubHubHub
which they re--

00:18:06.000 --> 00:18:08.667
HubBub--which they
recently shared at the--

00:18:08.667 --> 00:18:11.234
at an XMPP--
XMPP meet-up

00:18:11.234 --> 00:18:15.767
and--which was recorded,

00:18:15.767 --> 00:18:18.234
and there was
some weird drama

00:18:18.234 --> 00:18:21.567
about, like, web hooks
versus XMPP.

00:18:21.567 --> 00:18:23.601
But anyway,
the point is that

00:18:23.601 --> 00:18:25.901
Push is good.

00:18:25.901 --> 00:18:29.734
And now there's finally
some demand for it.

00:18:29.734 --> 00:18:31.801
For example, I--
I don't know

00:18:31.801 --> 00:18:35.534
what would happen if GENA
was proposed again now.

00:18:35.534 --> 00:18:38.834
But we have
some good solutions.

00:18:38.834 --> 00:18:42.133
And XMPP seems to be
ideal when you need it,

00:18:42.133 --> 00:18:44.133
but web hooks
generally do the job.

00:18:44.133 --> 00:18:46.234
And they're easier
to implement.

00:18:46.234 --> 00:18:47.801
So you might as well
default to web hooks

00:18:47.801 --> 00:18:50.434
unless you
really need XMPP.

00:18:50.434 --> 00:18:53.000
But I wanted
to frame this talk

00:18:53.000 --> 00:18:55.701
as not about Push, because
that's not what it's about.

00:18:55.701 --> 00:18:58.367
It's just a nice way
to get the social media kids

00:18:58.367 --> 00:18:59.968
into bed with web hooks.

00:18:59.968 --> 00:19:02.767
But hooks are really about

00:19:02.767 --> 00:19:05.267
more than PubSub
and notifications.

00:19:05.267 --> 00:19:08.434
And that's why
they're called "web hooks"

00:19:08.434 --> 00:19:10.634
not "web notifications"
or something.

00:19:10.634 --> 00:19:14.200
So instead of Push,
I was more drawn to

00:19:14.200 --> 00:19:18.000
the "Pipes" metaphor, which
I'm sure we've all heard of

00:19:18.000 --> 00:19:19.501
for the web.

00:19:19.501 --> 00:19:21.534
You know, I wanted
to integrate and orchestrate

00:19:21.534 --> 00:19:23.801
my web app--the web
applications I use--

00:19:23.801 --> 00:19:28.033
you know, conceptually
similar to Unix pipelining.

00:19:28.033 --> 00:19:29.534
So I thought about it,
and I know

00:19:29.534 --> 00:19:31.367
there's not actually pipes
in this screenshot,

00:19:31.367 --> 00:19:35.434
but, you know, pipes
are a pretty amazing feature

00:19:35.434 --> 00:19:38.300
that let you get more
out of the commands

00:19:38.300 --> 00:19:40.200
that you're using by letting
you chain them together.

00:19:40.200 --> 00:19:43.367
And it sort of lets you
program without programming--

00:19:43.367 --> 00:19:46.334
combining commands
in a way that--

00:19:46.334 --> 00:19:50.200
that wasn't necessarily
intended by the author.

00:19:50.200 --> 00:19:54.234
So you get some neat,
you know, emergents, right?

00:19:54.234 --> 00:19:56.701
And it was all
from really simple--

00:19:56.701 --> 00:19:58.234
simple infrastructure,
right?

00:19:58.234 --> 00:20:01.100
It was--programs
have input and output.

00:20:01.100 --> 00:20:04.400
You know, and this was
made available to the user

00:20:04.400 --> 00:20:05.868
to reroute
however they wanted,

00:20:05.868 --> 00:20:07.000
and that's piping,

00:20:07.000 --> 00:20:10.901
and that's the model
that I used--

00:20:10.901 --> 00:20:14.467
well, so it's
kind of interesting

00:20:14.467 --> 00:20:16.133
'cause you have all
these simple little programs

00:20:16.133 --> 00:20:18.367
that--and a lot of them,
you know, aren't very useful

00:20:18.367 --> 00:20:19.434
by--alone, but, you know,

00:20:19.434 --> 00:20:21.300
when you start
chaining them together,

00:20:21.300 --> 00:20:23.200
you have something that,
you know,

00:20:23.200 --> 00:20:25.367
might be more useful
than some of the parts.

00:20:25.367 --> 00:20:28.367
And that kind of helped
put forth the Unix philosophy

00:20:28.367 --> 00:20:32.267
or they were made
because of the Unix philosophy

00:20:32.267 --> 00:20:34.501
to encourage building
these kinds of small,

00:20:34.501 --> 00:20:36.968
composable commands.

00:20:36.968 --> 00:20:40.467
But it doesn't work without
the output, right?

00:20:40.467 --> 00:20:43.267
It just breaks.
Like, what's the point?

00:20:43.267 --> 00:20:46.067
And that's kind--
conceptually,

00:20:46.067 --> 00:20:49.968
how I'm viewing the web
and web applications,

00:20:49.968 --> 00:20:52.334
because you can talk
to web app--

00:20:52.334 --> 00:20:54.033
you can talk
to web applications.

00:20:54.033 --> 00:20:55.434
You can make
requests to them.

00:20:55.434 --> 00:20:57.634
And they can give you stuff
back when you request it,

00:20:57.634 --> 00:20:59.868
but otherwise, they
can't really talk to us

00:20:59.868 --> 00:21:02.501
or anything else, really.

00:21:02.501 --> 00:21:05.100
So it's not
that they can't,

00:21:05.100 --> 00:21:06.601
it's just that they don't

00:21:06.601 --> 00:21:10.400
because we need to start
putting something like hooks

00:21:10.400 --> 00:21:11.901
in so that they can.

00:21:11.901 --> 00:21:15.100
And so these roles are--
seem to be best played

00:21:15.100 --> 00:21:18.868
by mechanisms
that use the protocol

00:21:18.868 --> 00:21:20.467
that the web is built on--
HTTP.

00:21:20.467 --> 00:21:25.968
So REST and web hooks
make sense, right?

00:21:25.968 --> 00:21:27.534
This is a backhoe,

00:21:27.534 --> 00:21:31.634
and it's a front-loader
plus an excavator.

00:21:31.634 --> 00:21:34.901
So we want to combine
web applications

00:21:34.901 --> 00:21:37.100
like we can
on the command line

00:21:37.100 --> 00:21:39.868
to get more than
the sum of the parts.

00:21:39.868 --> 00:21:45.100
And web hooks open up
this possibility,

00:21:45.100 --> 00:21:47.434
but like--like web APIs,

00:21:47.434 --> 00:21:49.501
they need
to be implemented.

00:21:49.501 --> 00:21:51.868
I don't know.
I hit a button.

00:21:51.868 --> 00:21:55.167
So for example,
imagine Basecamp

00:21:55.167 --> 00:21:57.067
with a bunch of hooks
for events, right?

00:21:57.067 --> 00:21:59.634
Like a project is finished,
a to-do is completed,

00:21:59.634 --> 00:22:01.000
a milestone is created.

00:22:01.000 --> 00:22:05.367
These are kind of significant
events in the system.

00:22:05.367 --> 00:22:10.367
The idea is that if you
let users write handlers

00:22:10.367 --> 00:22:12.901
that are just web scripts

00:22:12.901 --> 00:22:14.934
they just--
all they are is a URL--

00:22:14.934 --> 00:22:17.367
then you can give that
to Basecamp.

00:22:17.367 --> 00:22:19.567
And then Basecamp
can call it,

00:22:19.567 --> 00:22:22.534
and because it's code
on the other side,

00:22:22.534 --> 00:22:24.501
it can basically do
anything from there.

00:22:24.501 --> 00:22:27.834
So imagine this is a URL

00:22:27.834 --> 00:22:30.334
that points to
a Google App Engine handler

00:22:30.334 --> 00:22:35.834
or AppJet or just
a PHP script on--on hosting.

00:22:35.834 --> 00:22:38.601
Like hosting--
CGI-powered hosting

00:22:38.601 --> 00:22:39.868
is completely commodotized.

00:22:39.868 --> 00:22:42.934
You can just, like,
get it for free practically.

00:22:42.934 --> 00:22:46.067
From there you can integrate
it with other services

00:22:46.067 --> 00:22:47.567
or make a phone call
or order pizza

00:22:47.567 --> 00:22:50.400
or whatever because it's code
and code can do anything.

00:22:50.400 --> 00:22:51.667
Right?

00:22:51.667 --> 00:22:55.734
So--so for example,
all of these applications--

00:22:55.734 --> 00:22:58.167
SlimTimer, Remember The Milk
and Basecamp--

00:22:58.167 --> 00:23:01.000
they all--so this
is a one-use case--

00:23:01.000 --> 00:23:06.601
they all have their respective
specialized talents,

00:23:06.601 --> 00:23:08.434
but they all work
around to-dos.

00:23:08.434 --> 00:23:09.501
And so there's, like,

00:23:09.501 --> 00:23:11.234
a duplication
of data there, right?

00:23:11.234 --> 00:23:14.033
So if you put hooks
on all their CRUD events

00:23:14.033 --> 00:23:16.968
then you can use their,
you know, existing APIs

00:23:16.968 --> 00:23:18.801
to create and delete stuff

00:23:18.801 --> 00:23:20.868
combined with hooks
to basically,

00:23:20.868 --> 00:23:25.300
you know, kind of dumbly
create and delete this,

00:23:25.300 --> 00:23:27.567
you know, that representation
of that to-do

00:23:27.567 --> 00:23:29.434
on these other systems.

00:23:29.434 --> 00:23:31.501
It kind of works pretty well,
and it's kind of dumb,

00:23:31.501 --> 00:23:34.067
but it's--magically works
in real time.

00:23:34.067 --> 00:23:36.834
So you're not, you know,
having to recreate stuff,

00:23:36.834 --> 00:23:40.334
and it's kind of nice.

00:23:40.334 --> 00:23:43.934
So web hooks enable
service integration,

00:23:43.934 --> 00:23:46.267
which is
an interesting idea.

00:23:46.267 --> 00:23:49.634
You know, it's--
or I should say ad hoc

00:23:49.634 --> 00:23:51.300
because it's sort of like
letting the user

00:23:51.300 --> 00:23:55.968
integrate your services
with each other.

00:23:55.968 --> 00:23:57.767
'Cause usually you
would have to hard code

00:23:57.767 --> 00:23:59.334
these things.

00:23:59.334 --> 00:24:00.434
And so this brings,
you know,

00:24:00.434 --> 00:24:02.567
new composability
to web applications.

00:24:02.567 --> 00:24:04.300
And it's based on the idea
that web user--

00:24:04.300 --> 00:24:06.000
web URLs can run code.

00:24:06.000 --> 00:24:08.100
And code can do anything.

00:24:08.100 --> 00:24:10.300
So when I first
thought about this,

00:24:10.300 --> 00:24:12.400
it was the cheap
PHP hosting that--

00:24:12.400 --> 00:24:13.567
you know,
that was all over,

00:24:13.567 --> 00:24:16.467
and I--I thought,
"Well, that's great.

00:24:16.467 --> 00:24:18.467
That's simple, but it
could be even simpler."

00:24:18.467 --> 00:24:20.367
So you have
paste bins like these

00:24:20.367 --> 00:24:21.868
and they're made to share,
you know,

00:24:21.868 --> 00:24:23.367
formatted code or whatever.

00:24:23.367 --> 00:24:25.701
So you can put in some code
and ask a question

00:24:25.701 --> 00:24:27.767
and you get a URL
and you can say, like,

00:24:27.767 --> 00:24:29.767
"Where's the data you stored?
I don't get it."

00:24:29.767 --> 00:24:31.834
And so I was thinking
about the same thing,

00:24:31.834 --> 00:24:33.734
but instead you
write code, right?

00:24:33.734 --> 00:24:36.534
And this was before
App Engine and AppJet

00:24:36.534 --> 00:24:37.834
and all the stuff.

00:24:37.834 --> 00:24:39.868
This was just
my model for how this--

00:24:39.868 --> 00:24:41.701
something
like this would work.

00:24:41.701 --> 00:24:45.767
And then--so instead of just
giving you a URL to view it,

00:24:45.767 --> 00:24:47.133
you'd get a URL to run it.

00:24:47.133 --> 00:24:48.901
And in this case,
you know, it's--

00:24:48.901 --> 00:24:50.400
it's--if you
can see the code,

00:24:50.400 --> 00:24:52.667
it's checking
what operation it is.

00:24:52.667 --> 00:24:55.133
If a project is completed
then it sets up some variables

00:24:55.133 --> 00:24:58.467
and then sends a mail--
a message to the mailing list

00:24:58.467 --> 00:25:00.767
saying, "Let's get drunk.
Meet in the break room."

00:25:00.767 --> 00:25:03.501
So, you know,
you would take that URL

00:25:03.501 --> 00:25:05.234
and just give it
to Basecamp.

00:25:05.234 --> 00:25:08.300
And so then now,
all of a sudden,

00:25:08.300 --> 00:25:09.667
when you finish a project,

00:25:09.667 --> 00:25:11.934
everybody meets
for shots in the break room.

00:25:11.934 --> 00:25:15.634
And like I said, we
have this now with AppJet,

00:25:15.634 --> 00:25:17.634
which is, you know,
made by ex-Googlers.

00:25:17.634 --> 00:25:19.534
But it's kind of nice.

00:25:19.534 --> 00:25:21.100
You just hit a button,
write code,

00:25:21.100 --> 00:25:23.200
hit save, show the URL,
and it's JavaScript,

00:25:23.200 --> 00:25:24.834
which is not bad.

00:25:24.834 --> 00:25:26.367
Obviously there's App Engine.

00:25:26.367 --> 00:25:29.434
And although it's a little bit
more involved than AppJet,

00:25:29.434 --> 00:25:30.601
for quick handlers--

00:25:30.601 --> 00:25:32.300
although this could
very easily be fixed

00:25:32.300 --> 00:25:35.567
by making an--you know,
something like AppJet

00:25:35.567 --> 00:25:38.067
on top of App Engine that
makes it easier to just, like,

00:25:38.067 --> 00:25:39.868
write code and get a URL.

00:25:39.868 --> 00:25:42.934
And then there's other stuff
like Ruby on Rails,

00:25:42.934 --> 00:25:44.868
hosts like Shirokuma
and all this.

00:25:44.868 --> 00:25:47.868
So another thing that I was--
I've been working on,

00:25:47.868 --> 00:25:49.534
playing around
with this idea--

00:25:49.534 --> 00:25:53.334
is an extension
that's playing with

00:25:53.334 --> 00:25:55.701
how end-users might interact
with web hooks.

00:25:55.701 --> 00:25:59.033
'Cause I'm not being very
specific about this, right?

00:25:59.033 --> 00:26:00.868
Because it's
sort of like up to

00:26:00.868 --> 00:26:02.234
how people implement it.

00:26:02.234 --> 00:26:04.567
A lot of people
have a text field

00:26:04.567 --> 00:26:05.767
in their settings that say,

00:26:05.767 --> 00:26:07.567
"What is the URL
for this event?"

00:26:07.567 --> 00:26:12.501
So this extension

00:26:12.501 --> 00:26:15.100
was kind of built on
the assumption that, you know,

00:26:15.100 --> 00:26:16.400
it detects
some markup on the page

00:26:16.400 --> 00:26:18.200
to discover web hooks--
you know,

00:26:18.200 --> 00:26:19.968
assuming that
there is such a thing.

00:26:19.968 --> 00:26:23.100
And then, you know,
like for example,

00:26:23.100 --> 00:26:24.334
saying that
there's new photos

00:26:24.334 --> 00:26:26.267
from your contacts
on Flickr.

00:26:26.267 --> 00:26:28.801
And if you want to do
something when it happens,

00:26:28.801 --> 00:26:30.734
then you just
click that event.

00:26:30.734 --> 00:26:32.133
And what it
could do is then

00:26:32.133 --> 00:26:34.367
pop up a little window
with a little box,

00:26:34.367 --> 00:26:36.767
so you could just write code
and hit "Save"

00:26:36.767 --> 00:26:39.200
and it will automatically
post that to AppJet,

00:26:39.200 --> 00:26:42.167
register the handler with the--
with that web service,

00:26:42.167 --> 00:26:43.901
assuming that there's
a standard protocol,

00:26:43.901 --> 00:26:45.634
and it's--
and it's done.

00:26:45.634 --> 00:26:47.901
Like you've just,
you know, extended Flickr

00:26:47.901 --> 00:26:50.267
in--in line
with using it.

00:26:50.267 --> 00:26:51.334
And that's really neat.

00:26:51.334 --> 00:26:52.834
So of course it
requires, again,

00:26:52.834 --> 00:26:54.400
like a standard protocol
for registering handlers

00:26:54.400 --> 00:26:55.734
and all this.

00:26:55.734 --> 00:26:57.267
But that's something
we can figure out, right?

00:26:57.267 --> 00:26:58.567
It's not that hard.

00:26:58.567 --> 00:27:00.300
And of course,
you can go back

00:27:00.300 --> 00:27:02.667
and go to that event again,

00:27:02.667 --> 00:27:04.367
and you can see your code
and you can change the code

00:27:04.367 --> 00:27:06.434
and it--
that's kind of cool.

00:27:06.434 --> 00:27:11.234
So real world examples.

00:27:11.234 --> 00:27:14.467
I first exposed SVN-Hooks

00:27:14.467 --> 00:27:15.868
through DevjaVu
using web hooks.

00:27:15.868 --> 00:27:18.200
It's just Post-Commit,
Pre-Commit,

00:27:18.200 --> 00:27:20.501
text box,
you put in the URL.

00:27:20.501 --> 00:27:21.567
Pre-commit was neat.

00:27:21.567 --> 00:27:25.167
If--if the URL returned,
I think, 400,

00:27:25.167 --> 00:27:28.267
then it would not allow
the commit to continue.

00:27:28.267 --> 00:27:32.467
A friend of mine,
CTO at PBwiki--

00:27:32.467 --> 00:27:34.033
I talked about him so much

00:27:34.033 --> 00:27:37.234
and I kind of used PBwiki
as a hypothetical example

00:27:37.234 --> 00:27:38.968
that he decided
to implement them,

00:27:38.968 --> 00:27:40.267
and so he
gave a little talk

00:27:40.267 --> 00:27:41.934
and he really liked
what he found.

00:27:41.934 --> 00:27:44.300
He put hooks for everything.

00:27:44.300 --> 00:27:45.801
Like when you log in
and when you log out,

00:27:45.801 --> 00:27:47.534
when you edit a page,
revert a page,

00:27:47.534 --> 00:27:49.434
delete a page,
comment on a page,

00:27:49.434 --> 00:27:52.701
and he thought
it was really fun.

00:27:52.701 --> 00:27:55.067
I'm not sure if
it's made it to production,

00:27:55.067 --> 00:27:57.100
but again, he said,
"It's really cool,"

00:27:57.100 --> 00:27:58.901
and he was one of the people
that were like,

00:27:58.901 --> 00:28:00.334
"I don't know about this."

00:28:00.334 --> 00:28:02.501
Like a lot of things.

00:28:02.501 --> 00:28:05.834
The idea silently spread
to the Rails guys.

00:28:05.834 --> 00:28:09.400
If you've seen Lighthouse,
it's an issue-tracking system,

00:28:09.400 --> 00:28:14.434
and they use them.

00:28:14.434 --> 00:28:16.300
Tobias used them
in Shopify,

00:28:16.300 --> 00:28:19.100
which is, you know, a hosted
shopping cart application,

00:28:19.100 --> 00:28:21.534
and he's revamping their API
to have more web hooks

00:28:21.534 --> 00:28:22.968
because they're very cool.

00:28:22.968 --> 00:28:25.400
And they were one of
the earliest adopters.

00:28:25.400 --> 00:28:27.133
And very recently they had
their one-year anniversary

00:28:27.133 --> 00:28:28.267
using web hooks.

00:28:28.267 --> 00:28:29.467
They're very happy with them.

00:28:29.467 --> 00:28:31.300
Google Code
recently caught up

00:28:31.300 --> 00:28:32.434
with the other code hosts

00:28:32.434 --> 00:28:34.000
by providing
Post-Commit Hook.

00:28:34.000 --> 00:28:37.901
And it was very well done.

00:28:37.901 --> 00:28:39.367
Good job.

00:28:39.367 --> 00:28:44.801
And so you also seem to solve
some interesting problems

00:28:44.801 --> 00:28:46.434
like authentication.

00:28:46.434 --> 00:28:49.834
You know, HMAC signatures
seem to be a good way to do it.

00:28:49.834 --> 00:28:52.234
Github,
another popular one,

00:28:52.234 --> 00:28:54.300
they were another
early adopter

00:28:54.300 --> 00:28:57.767
and people really like them
on Github.

00:28:57.767 --> 00:28:59.834
They have their
Post-Receive Hook

00:28:59.834 --> 00:29:01.434
which is basically
Post-Commit.

00:29:01.434 --> 00:29:04.133
And users have
used it to integrate,

00:29:04.133 --> 00:29:06.534
you know, notifying
mailing lists or chat,

00:29:06.534 --> 00:29:09.033
or working with other
project management tools,

00:29:09.033 --> 00:29:11.434
or triggering
continuous integration--

00:29:11.434 --> 00:29:14.634
you know, running tests,
whatever, builds.

00:29:14.634 --> 00:29:17.067
And that's all very cool,

00:29:17.067 --> 00:29:19.634
and they were so successful
for ad hoc integration

00:29:19.634 --> 00:29:21.033
with whatever
the users wanted

00:29:21.033 --> 00:29:23.467
that they decided to
formalize it into something,

00:29:23.467 --> 00:29:25.234
you know, because everybody's
having to repeat the code

00:29:25.234 --> 00:29:27.367
or, you know,
copy the script

00:29:27.367 --> 00:29:29.367
and share it
with someone else.

00:29:29.367 --> 00:29:32.000
So they made it very easy.

00:29:32.000 --> 00:29:34.534
They basically
polled in the stuff

00:29:34.534 --> 00:29:36.067
that was being
integrated the most

00:29:36.067 --> 00:29:39.234
and, you know, built it
into their--their service.

00:29:39.234 --> 00:29:41.667
So they have Service Hooks.

00:29:41.667 --> 00:29:42.934
Built-in
service integration.

00:29:42.934 --> 00:29:44.634
But the cool thing is
is the way they did it.

00:29:44.634 --> 00:29:48.000
Because they had this existing
web hook infrastructure,

00:29:48.000 --> 00:29:50.968
they just--their--these--

00:29:50.968 --> 00:29:54.000
these--they way they integrate
these external services

00:29:54.000 --> 00:29:56.167
like Lighthouse
and Campfire--

00:29:56.167 --> 00:29:59.400
they're just little applets
or, you know, web scripts

00:29:59.400 --> 00:30:02.033
running in a separate
web server locally.

00:30:02.033 --> 00:30:03.300
So they can manage it.

00:30:03.300 --> 00:30:05.100
And it's using their
existing web hook stuff.

00:30:05.100 --> 00:30:07.734
So it doesn't actually go out
to, you know, the Internet.

00:30:07.734 --> 00:30:10.534
It goes locally and then they
can manage the--the source

00:30:10.534 --> 00:30:13.734
and support it.

00:30:13.734 --> 00:30:17.734
And it's really neat because
they made that open-source.

00:30:17.734 --> 00:30:19.634
So if you want to write
your own handler

00:30:19.634 --> 00:30:21.701
for integrating Github
with, you know,

00:30:21.701 --> 00:30:23.467
a completely new web service,

00:30:23.467 --> 00:30:27.133
then you can fork
their--their project,

00:30:27.133 --> 00:30:28.601
write a new handler,
push it back to them,

00:30:28.601 --> 00:30:29.834
and they can,
you know, look it over.

00:30:29.834 --> 00:30:32.033
They're
really simple scripts.

00:30:32.033 --> 00:30:34.067
And then they can deploy it
and support it.

00:30:34.067 --> 00:30:36.634
It's really cool.

00:30:36.634 --> 00:30:39.667
And this is--I mean,
I don't see why

00:30:39.667 --> 00:30:42.334
this can't be the standard
model for service integration.

00:30:42.334 --> 00:30:45.267
It's just
so great and nice.

00:30:45.267 --> 00:30:48.901
So another example of--

00:30:48.901 --> 00:30:50.701
so now that they're
getting more popular,

00:30:50.701 --> 00:30:54.367
there's now
web hook consumers,

00:30:54.367 --> 00:30:55.834
so the--
on the other end, like,

00:30:55.834 --> 00:30:58.300
I figured, well, eventually
there will be services,

00:30:58.300 --> 00:30:59.968
you know, once we figure out
some standardization

00:30:59.968 --> 00:31:01.200
and stuff,
there will be services

00:31:01.200 --> 00:31:02.667
on the other end
to consume hooks.

00:31:02.667 --> 00:31:04.100
So you can just,
you know,

00:31:04.100 --> 00:31:06.400
take some service URL
and put it in a--

00:31:06.400 --> 00:31:08.634
in a services web hook

00:31:08.634 --> 00:31:11.367
and it will work directly.

00:31:11.367 --> 00:31:13.300
But I figured
that'll be a while,

00:31:13.300 --> 00:31:15.133
and for now people--
you know, the advanced users

00:31:15.133 --> 00:31:16.968
that are using this--they can
write their own scripts.

00:31:16.968 --> 00:31:18.968
Right?

00:31:18.968 --> 00:31:21.367
But so this happened
to come about.

00:31:21.367 --> 00:31:24.667
Run Code Run--it's a continuous
integration service.

00:31:24.667 --> 00:31:26.767
It just works with Github.

00:31:26.767 --> 00:31:28.934
It's--they just--
that's how they work.

00:31:28.934 --> 00:31:32.434
You put in their URL,
into their Post-Receive Hook,

00:31:32.434 --> 00:31:35.734
and it'll run
your continuous integration

00:31:35.734 --> 00:31:37.968
on their service,
which is really neat.

00:31:37.968 --> 00:31:40.634
In fact, you can--
you bas--

00:31:40.634 --> 00:31:42.167
you can sign up
with Run Code Run

00:31:42.167 --> 00:31:45.167
by just taking their URL
and putting it into the--

00:31:45.167 --> 00:31:49.167
into your Github project.

00:31:49.167 --> 00:31:51.000
So--and of course,
I mentioned PayPal.

00:31:51.000 --> 00:31:55.167
And web hooks
make so much sense

00:31:55.167 --> 00:31:57.067
because it's not really
about notification.

00:31:57.067 --> 00:31:59.167
They say it's "instant
payment notification,"

00:31:59.167 --> 00:32:00.868
but the point is is that
it's about integrating, right?

00:32:00.868 --> 00:32:02.000
It's integrating it
with the rest

00:32:02.000 --> 00:32:04.400
of your
shipping infrastructure

00:32:04.400 --> 00:32:07.133
or, you know, label printing
or whatever.

00:32:07.133 --> 00:32:09.334
In fact, there's--I--
I don't have a slide here

00:32:09.334 --> 00:32:10.868
but there's
a whole other service

00:32:10.868 --> 00:32:15.934
that lets you manage
post-payment operations.

00:32:15.934 --> 00:32:18.901
And the way it works is
you just--

00:32:18.901 --> 00:32:22.200
they give you a URL
to put in the IPN for PayPal

00:32:22.200 --> 00:32:23.300
and then
that's how they get

00:32:23.300 --> 00:32:25.067
all the data on
all your transactions,

00:32:25.067 --> 00:32:27.267
and then they--you can manage
them in a nice interface

00:32:27.267 --> 00:32:28.934
since PayPal
is kind of a pain,

00:32:28.934 --> 00:32:31.167
and do all
this extra cool stuff.

00:32:31.167 --> 00:32:33.534
And it's like
there wasn't even an API.

00:32:33.534 --> 00:32:35.601
It's, like, all based
on web hooks.

00:32:35.601 --> 00:32:39.033
One web hook, too.

00:32:39.033 --> 00:32:40.701
So that's what
they're really great for,

00:32:40.701 --> 00:32:41.801
even though they can be used

00:32:41.801 --> 00:32:43.467
for, like, pushing
content updates,

00:32:43.467 --> 00:32:45.601
which--whatever.

00:32:45.601 --> 00:32:49.000
Jott is another example
of a web hook implementer

00:32:49.000 --> 00:32:50.300
that doesn't know it yet.

00:32:50.300 --> 00:32:53.033
They parse
voice over the phone

00:32:53.033 --> 00:32:54.334
so you can do stuff with it,

00:32:54.334 --> 00:32:56.968
like post to Twitter,
post to your blog, whatever.

00:32:56.968 --> 00:32:59.667
They do it with--
they call them "links,"

00:32:59.667 --> 00:33:01.067
which are just hooks.

00:33:01.067 --> 00:33:03.834
You basically--if you
want to create a new link

00:33:03.834 --> 00:33:06.400
for Jott, you just
give them a URL

00:33:06.400 --> 00:33:08.634
and they post
the parsed text to it,

00:33:08.634 --> 00:33:10.067
and then you can
do whatever you want.

00:33:10.067 --> 00:33:12.300
So the Twitter one,
Remember The Milk--

00:33:12.300 --> 00:33:13.868
all these things--
all they do is

00:33:13.868 --> 00:33:15.234
it's a script
that takes the data

00:33:15.234 --> 00:33:17.467
and then uses the API
and posts it.

00:33:17.467 --> 00:33:21.834
So that's neat.

00:33:21.834 --> 00:33:24.167
So it became obvious that
making adapter services

00:33:24.167 --> 00:33:29.334
so that you can--
adapter services

00:33:29.334 --> 00:33:31.567
that are useful
in specific cases,

00:33:31.567 --> 00:33:33.701
for example, mail,

00:33:33.701 --> 00:33:37.000
if you want to get mail and--
and parse it in your application

00:33:37.000 --> 00:33:39.167
without having to deal
with, like sendmail

00:33:39.167 --> 00:33:41.534
and--and--and dealing
with MindCrap or whatever.

00:33:41.534 --> 00:33:43.400
Like, if you want--
like, you're prototyping

00:33:43.400 --> 00:33:45.300
and you want to, like, accept
email in your application,

00:33:45.300 --> 00:33:47.167
I built this thing
called "Mail Hook"

00:33:47.167 --> 00:33:49.434
that's like--anything
you set this up with--

00:33:49.434 --> 00:33:50.968
an MX record,
and then you say,

00:33:50.968 --> 00:33:55.501
"Anything sent to this domain
will get posted to this URL."

00:33:55.501 --> 00:33:58.501
And it was
a very simple system.

00:33:58.501 --> 00:34:01.434
And it seems like,
you know,

00:34:01.434 --> 00:34:04.501
other protocols
could be added to that

00:34:04.501 --> 00:34:06.567
as an input into
the web hook ecosystem.

00:34:06.567 --> 00:34:11.067
So but--
so smtp2web

00:34:11.067 --> 00:34:12.501
is basically the same thing.

00:34:12.501 --> 00:34:14.267
Although it's interesting,
because it was made

00:34:14.267 --> 00:34:15.934
by the Google App Engine
community.

00:34:15.934 --> 00:34:19.400
It's another way to accept mail
because Google App Engine

00:34:19.400 --> 00:34:21.868
doesn't accept mail
right now.

00:34:21.868 --> 00:34:24.434
And web hooks were
the obvious solution--

00:34:24.434 --> 00:34:25.868
just an HTTP callback.

00:34:25.868 --> 00:34:28.968
And then Rick Olson
from Lighthouse

00:34:28.968 --> 00:34:33.300
has an open-source version
that will also do XMPP.

00:34:33.300 --> 00:34:34.834
And he uses that
for Lighthouse.

00:34:34.834 --> 00:34:37.434
But the smtpweb one
is interesting

00:34:37.434 --> 00:34:39.000
because it was made
because of the limitations

00:34:39.000 --> 00:34:41.300
of Google App Engine.

00:34:41.300 --> 00:34:42.968
In fact, there
was a lot of these--

00:34:42.968 --> 00:34:45.868
like micro webservices,
like a--a cron service,

00:34:45.868 --> 00:34:48.868
where you just register
a URL for it to--

00:34:48.868 --> 00:34:52.367
to post to that at some
particular time in the future

00:34:52.367 --> 00:34:56.133
so that you could do
cron stuff with App Engine.

00:34:56.133 --> 00:34:58.400
And then before there was
image stuff, there was like

00:34:58.400 --> 00:35:01.801
these really focused
image manipulation things.

00:35:01.801 --> 00:35:03.734
And it was kind of like
the first glimpse

00:35:03.734 --> 00:35:06.801
at what, you know,
small-focused--I don't know,

00:35:06.801 --> 00:35:09.367
micro webservices
that are like the equivalent

00:35:09.367 --> 00:35:11.067
of grep and cat
and word count

00:35:11.067 --> 00:35:13.267
and stuff
on the command line.

00:35:13.267 --> 00:35:15.200
And so I would imagine,
you know,

00:35:15.200 --> 00:35:18.367
if there is the infrastructure
for that kind of,

00:35:18.367 --> 00:35:20.734
you know, piping on the web,
then you would get

00:35:20.734 --> 00:35:25.133
more of those kinds of
small-focused web services.

00:35:25.133 --> 00:35:26.400
And then there's
Martin and Andy,

00:35:26.400 --> 00:35:28.801
two guys in the U.K.
that love web hooks.

00:35:28.801 --> 00:35:30.968
They built this thing
called the "Spaghetti Junction"

00:35:30.968 --> 00:35:32.734
at a Hack Day
and it invol--

00:35:32.734 --> 00:35:37.234
it evolved into Switchub,

00:35:37.234 --> 00:35:40.267
which is--
which I really love.

00:35:40.267 --> 00:35:42.234
And I figured this
sort of thing would emerge

00:35:42.234 --> 00:35:43.434
but I didn't think
it would happen

00:35:43.434 --> 00:35:45.367
until web hooks
were more popular.

00:35:45.367 --> 00:35:48.234
It's kind of like
the paste bin.

00:35:48.234 --> 00:35:51.934
You know, it's a consumer
because it gives you URLs

00:35:51.934 --> 00:35:54.200
that you can
put into various systems.

00:35:54.200 --> 00:35:57.100
But then it basically
routes it to various outputs,

00:35:57.100 --> 00:36:00.200
like "post to IRC"
or "email me."

00:36:00.200 --> 00:36:04.601
And so it, like,
it starts--

00:36:04.601 --> 00:36:06.400
you know, basically
what I figured would happen

00:36:06.400 --> 00:36:07.567
was eventually
people would get sick

00:36:07.567 --> 00:36:09.267
of writing one-off scripts
all the time,

00:36:09.267 --> 00:36:10.834
and so people
would make services

00:36:10.834 --> 00:36:13.067
that would do this kind
of stuff for other people,

00:36:13.067 --> 00:36:14.834
and this is
an example of that.

00:36:14.834 --> 00:36:16.767
But it's kind of nice
'cause you can

00:36:16.767 --> 00:36:20.300
route things
all weird and stuff.

00:36:20.300 --> 00:36:22.501
But it's very focused on--
on web hooks

00:36:22.501 --> 00:36:23.534
and so I like it.

00:36:23.534 --> 00:36:25.400
And--and what
they're gonna do

00:36:25.400 --> 00:36:28.200
with the--the inputs
and output handlers

00:36:28.200 --> 00:36:30.667
that you see
are very simple scripts

00:36:30.667 --> 00:36:32.400
that they could implement
the same way

00:36:32.400 --> 00:36:35.000
Github does their
service integration,

00:36:35.000 --> 00:36:37.634
so that they can be run as
a separate web service locally

00:36:37.634 --> 00:36:39.367
that can be open-sourced

00:36:39.367 --> 00:36:43.367
so that the main Switchub
code can be private,

00:36:43.367 --> 00:36:45.133
but the handlers
are open-sourced

00:36:45.133 --> 00:36:48.000
so people can, you know,
fork it and contribute new ones

00:36:48.000 --> 00:36:51.634
and then they can, you know,
easily just start using them.

00:36:51.634 --> 00:36:56.634
And Switchub would benefit,
for example,

00:36:56.634 --> 00:36:59.200
from a built-in input
for various other protocols

00:36:59.200 --> 00:37:01.467
like email--like,
you know, using Mail Hook

00:37:01.467 --> 00:37:04.334
but also RSS
and other things.

00:37:04.334 --> 00:37:05.701
Maybe Jabber.

00:37:05.701 --> 00:37:08.067
But instead of having
to build it themselves,

00:37:08.067 --> 00:37:09.734
they can just work
with other services

00:37:09.734 --> 00:37:11.467
to support
those kinds of inputs.

00:37:11.467 --> 00:37:13.133
So for example,
RSS FWD,

00:37:13.133 --> 00:37:15.634
which will take RSS
and email it to you,

00:37:15.634 --> 00:37:18.734
they could easily just
also have a web hook

00:37:18.734 --> 00:37:21.567
and then they can use that
and write a handler

00:37:21.567 --> 00:37:23.734
for Switchub,
and then you can have

00:37:23.734 --> 00:37:25.367
RSS as an input to this.

00:37:25.367 --> 00:37:28.167
So it seems, you know,
a lot like Yahoo! Pipes

00:37:28.167 --> 00:37:31.567
only better--
and real, you know.

00:37:31.567 --> 00:37:32.667
I don't know.

00:37:32.667 --> 00:37:37.801
RSS just didn't make sense

00:37:37.801 --> 00:37:40.601
for all the cool stuff
that I really wanted to do.

00:37:40.601 --> 00:37:45.467
So I started visualizing
how, you know,

00:37:45.467 --> 00:37:48.367
if there was like a graphical
user interface to do it

00:37:48.367 --> 00:37:51.000
it would probably kind of
look like Reason, you know--

00:37:51.000 --> 00:37:53.367
inspired by
virtual rack mounts

00:37:53.367 --> 00:37:55.167
and then you
can switch to the back

00:37:55.167 --> 00:37:58.133
and like wire
everything how you want.

00:37:58.133 --> 00:38:00.467
Like imagine these racks
are web services

00:38:00.467 --> 00:38:02.000
and they have various events
and you can, like,

00:38:02.000 --> 00:38:04.367
"Okay, take this one,
and I want the output

00:38:04.367 --> 00:38:07.601
of this event to go
into the input of this one."

00:38:07.601 --> 00:38:09.534
It will require,
you know, obviously

00:38:09.534 --> 00:38:12.300
standardization or adapters
and stuff like this,

00:38:12.300 --> 00:38:14.267
but, you know,
it seems possible

00:38:14.267 --> 00:38:15.400
when the infrastructure
is there.

00:38:15.400 --> 00:38:16.667
Like, you can't
really do this

00:38:16.667 --> 00:38:19.400
unless there is something
like an HTTP callback

00:38:19.400 --> 00:38:22.868
or something to actually
get data out

00:38:22.868 --> 00:38:25.667
that's not something
poll-based.

00:38:25.667 --> 00:38:28.834
So--Plugins. One more thing
that I want to talk about.

00:38:28.834 --> 00:38:30.834
Before that,
though, a story.

00:38:30.834 --> 00:38:33.400
So the web, you know, was
originally a bunch of pages

00:38:33.400 --> 00:38:36.033
linked together--
static content.

00:38:36.033 --> 00:38:39.133
It's kind of weird
to think of that now

00:38:39.133 --> 00:38:40.901
because of the way
the web is now,

00:38:40.901 --> 00:38:43.300
but it--
what happened was

00:38:43.300 --> 00:38:45.033
people kept wanting
to access other things

00:38:45.033 --> 00:38:48.133
through HTTP.

00:38:48.133 --> 00:38:50.834
Like in this case,
what was it?

00:38:50.834 --> 00:38:53.267
WAIS?
That's before my time.

00:38:53.267 --> 00:38:55.434
But they wanted to get it,
you know, through HTTP,

00:38:55.434 --> 00:38:57.734
and so they would
hack the web services--

00:38:57.734 --> 00:39:01.901
the web servers
to do that.

00:39:01.901 --> 00:39:03.501
And--so this was
before CGI.

00:39:03.501 --> 00:39:05.200
And so they decided
to standardize this

00:39:05.200 --> 00:39:06.968
and create the
Common Gateway Protocol,

00:39:06.968 --> 00:39:08.934
which didn't make sense,
so they renamed it to "CGI."

00:39:08.934 --> 00:39:13.200
And then as a--
as another side--tangent

00:39:13.200 --> 00:39:14.534
in going through
these old mailing lists,

00:39:14.534 --> 00:39:15.734
which is very fun.

00:39:15.734 --> 00:39:17.934
This was posted on reddit
a while back but--

00:39:17.934 --> 00:39:20.767
"and recent, proposing
the image tag for HTML."

00:39:20.767 --> 00:39:22.434
And--and it was weird
because people fought it,

00:39:22.434 --> 00:39:24.901
because they said it needed
to be more generalized

00:39:24.901 --> 00:39:27.300
and work
for any type of media.

00:39:27.300 --> 00:39:29.100
But, you know,
in the end,

00:39:29.100 --> 00:39:31.567
he just put it in Mosaic
and then that was that, right?

00:39:31.567 --> 00:39:33.634
And now it's everywhere.

00:39:33.634 --> 00:39:37.834
So anyway, these pages
that were just static content,

00:39:37.834 --> 00:39:40.801
today, because of CGI,
because of these hacks

00:39:40.801 --> 00:39:43.634
and people starting
to use it more and more,

00:39:43.634 --> 00:39:46.434
now for some reason,
our web is sort of, like,

00:39:46.434 --> 00:39:49.300
generated by these
higher-order conceptual nodes

00:39:49.300 --> 00:39:50.400
that are code.

00:39:50.400 --> 00:39:51.501
They're apps.

00:39:51.501 --> 00:39:52.601
Like, all of our web today,

00:39:52.601 --> 00:39:55.267
pretty much, is generated
by applications.

00:39:55.267 --> 00:39:58.567
And it's kind of weird
how that evolved.

00:39:58.567 --> 00:39:59.968
So you have
these applications,

00:39:59.968 --> 00:40:03.434
and the difference between
these layers is, you know,

00:40:03.434 --> 00:40:05.267
it's kind of back
and front-end,

00:40:05.267 --> 00:40:06.634
but it's not really
the same thing.

00:40:06.634 --> 00:40:07.868
It's subtly different.

00:40:07.868 --> 00:40:09.868
I'm talking about
like applications

00:40:09.868 --> 00:40:12.133
and the pages
they generate.

00:40:12.133 --> 00:40:14.701
You know, it's--
it's function and content.

00:40:14.701 --> 00:40:15.934
And so it's
kind of interesting

00:40:15.934 --> 00:40:19.534
to think that it was
the functionality part--

00:40:19.534 --> 00:40:20.968
we had to wait
for the applications

00:40:20.968 --> 00:40:22.100
to take over the web

00:40:22.100 --> 00:40:24.267
for us to really
get the two-way content.

00:40:24.267 --> 00:40:27.133
And so we have
the read-write web or whatever

00:40:27.133 --> 00:40:30.200
and we can like easily
publish content on the web.

00:40:30.200 --> 00:40:33.734
So web 2.0, whatever--
user-generated content.

00:40:33.734 --> 00:40:35.434
I want user-contributed

00:40:35.434 --> 00:40:38.434
or democratized
functionality, right?

00:40:38.434 --> 00:40:39.567
That's kind of where

00:40:39.567 --> 00:40:41.000
the programmability
starts coming in.

00:40:41.000 --> 00:40:44.767
So not only integrating and
composing these applications

00:40:44.767 --> 00:40:48.033
but also extending
applications.

00:40:48.033 --> 00:40:52.033
So it's--I almost called
this section "Platforms"

00:40:52.033 --> 00:40:53.300
because platforms
are really cool.

00:40:53.300 --> 00:40:54.501
We all love them.

00:40:54.501 --> 00:40:57.801
That's basically technology,
in essence.

00:40:57.801 --> 00:41:00.901
The Facebook Platform
was pretty cool, I guess.

00:41:00.901 --> 00:41:03.434
I asked a friend how it worked
and he said, "Web hooks."

00:41:03.434 --> 00:41:05.267
And I was like, "What?"

00:41:05.267 --> 00:41:08.067
Sure enough, I mean,
at a high level, conceptually,

00:41:08.067 --> 00:41:10.200
it looks like
web hooks to me, right?

00:41:10.200 --> 00:41:13.968
You know,
it's HTTP calling out,

00:41:13.968 --> 00:41:16.300
using the results
of some other application

00:41:16.300 --> 00:41:19.167
and brings it in and
displays it within Facebook--

00:41:19.167 --> 00:41:20.567
you know,
essentially extending

00:41:20.567 --> 00:41:22.834
the functionality of Facebook
with these applications.

00:41:22.834 --> 00:41:24.767
There is not
a huge difference

00:41:24.767 --> 00:41:29.033
between applications
and plugins.

00:41:29.033 --> 00:41:31.167
So in fact,
a few other people have--

00:41:31.167 --> 00:41:33.234
have done this,
where they actually take,

00:41:33.234 --> 00:41:36.167
you know, the response
of these callbacks

00:41:36.167 --> 00:41:38.934
to affect the logic
in their applications.

00:41:38.934 --> 00:41:40.434
For example,
Dabble DB

00:41:40.434 --> 00:41:42.767
which is, you know,
a hosted, you know--

00:41:42.767 --> 00:41:44.434
create online databases.

00:41:44.434 --> 00:41:49.501
And so when--for people
that shouldn't be using Excel.

00:41:49.501 --> 00:41:52.734
Their plugin API
is basically web hooks,

00:41:52.734 --> 00:41:55.767
and so the kinds of plugins
that you can make

00:41:55.767 --> 00:41:58.667
are derived fields.

00:41:58.667 --> 00:42:00.734
So I mean, it's like
a big spreadsheet, right?

00:42:00.734 --> 00:42:02.767
And you can do derived fields
or whatever.

00:42:02.767 --> 00:42:05.067
You can create
your own custom derived fields

00:42:05.067 --> 00:42:07.400
that are calculated
by your code.

00:42:07.400 --> 00:42:09.868
And so they made this
and it was like

00:42:09.868 --> 00:42:12.734
their own standard where
they have this metadata thing

00:42:12.734 --> 00:42:15.133
that basically just
points to a URL,

00:42:15.133 --> 00:42:17.133
and that's a web hook,
right?

00:42:17.133 --> 00:42:19.901
And of course
they compared it to Pipes--

00:42:19.901 --> 00:42:22.467
the simplicity,
the natural fit for it.

00:42:22.467 --> 00:42:24.968
But I think that
they should have hooks

00:42:24.968 --> 00:42:26.467
for all the standard
CRUD events

00:42:26.467 --> 00:42:27.834
because that would
make their applications

00:42:27.834 --> 00:42:29.701
so much more useful.

00:42:29.701 --> 00:42:31.901
Just the same way that,
you know, PayPal

00:42:31.901 --> 00:42:34.234
is--has a hook
for their major event.

00:42:34.234 --> 00:42:36.767
Like you can integrate it
with the rest of your workflow.

00:42:36.767 --> 00:42:39.701
Because a lot of these,
you know, app platforms

00:42:39.701 --> 00:42:41.601
like Coghead
and Salesforce,

00:42:41.601 --> 00:42:44.968
they sort of--they're
sort of--they're siloed off--

00:42:44.968 --> 00:42:46.133
you know, data processing

00:42:46.133 --> 00:42:47.601
and the functionality
that they provide--

00:42:47.601 --> 00:42:49.467
when you might
have existing stuff

00:42:49.467 --> 00:42:50.767
that you want
to integrate with,

00:42:50.767 --> 00:42:52.734
and it would be so much
easier if they had hooks

00:42:52.734 --> 00:42:54.534
that you could hook into.

00:42:54.534 --> 00:42:56.434
Amazon--this was
a fairly recent thing--

00:42:56.434 --> 00:42:58.567
so not only do they have

00:42:58.567 --> 00:43:01.367
you know, Instant Order
Processing Notifications

00:43:01.367 --> 00:43:04.667
for events like
order creation, cancellation,

00:43:04.667 --> 00:43:06.968
ready-to-ship stuff.

00:43:06.968 --> 00:43:11.267
Checkout is basically
a check-out process

00:43:11.267 --> 00:43:14.000
that you can use.

00:43:14.000 --> 00:43:16.901
But they also
have these callbacks

00:43:16.901 --> 00:43:19.300
that actually return stuff,
and they use that

00:43:19.300 --> 00:43:21.801
so that you can use them
to calculate shipping costs

00:43:21.801 --> 00:43:24.801
and taxes and promotions
and stuff like this.

00:43:24.801 --> 00:43:26.767
So they're doing it.

00:43:26.767 --> 00:43:28.534
I should really find out
how they're doing it

00:43:28.534 --> 00:43:29.701
because of course
people are asking,

00:43:29.701 --> 00:43:32.267
"What's the scalability
and all as such?"

00:43:32.267 --> 00:43:35.000
IMified, another platform
that's using web hooks

00:43:35.000 --> 00:43:37.100
to let you build
bots for IM

00:43:37.100 --> 00:43:39.367
basically by calling out
to a web script.

00:43:39.367 --> 00:43:44.734
So just to close, I want
to drop some GST on you.

00:43:44.734 --> 00:43:47.968
The central tenet--
a central tenet is that

00:43:47.968 --> 00:43:50.200
the value is not within
the elements themselves,

00:43:50.200 --> 00:43:53.868
but the real value
is in the interactions

00:43:53.868 --> 00:43:56.601
and how they work together
in systems,

00:43:56.601 --> 00:43:58.434
and everything is a system
so this is sort of

00:43:58.434 --> 00:44:01.000
a--a universal law, maybe?

00:44:01.000 --> 00:44:03.434
And so this creates, you know,
the emergent phenomenon

00:44:03.434 --> 00:44:05.734
of the system and
it defines its behavior.

00:44:05.734 --> 00:44:09.133
So if we increase ways
to work together and have--

00:44:09.133 --> 00:44:11.601
basically--web hooks
are, basically, you know,

00:44:11.601 --> 00:44:13.667
new ways to interact
between applications,

00:44:13.667 --> 00:44:16.100
that creates
new means of combination,

00:44:16.100 --> 00:44:18.167
increases
the degrees of freedom,

00:44:18.167 --> 00:44:20.634
and covers new opportunities
and business tools

00:44:20.634 --> 00:44:21.801
and empowerment,
which is great.

00:44:21.801 --> 00:44:23.601
That's what technology
is all about.

00:44:23.601 --> 00:44:26.434
And, of course, the vision
for a programming paradigm

00:44:26.434 --> 00:44:28.367
that is the Internet
or is the web

00:44:28.367 --> 00:44:30.434
is very compelling,
but we're not there yet

00:44:30.434 --> 00:44:33.634
because the real
programmable web

00:44:33.634 --> 00:44:35.601
will require web hooks,

00:44:35.601 --> 00:44:38.801
and that is
all I have to say--

00:44:38.801 --> 00:44:40.300
unless you have questions,

00:44:40.300 --> 00:44:43.434
which I can answer,
or try to.

00:44:43.434 --> 00:44:47.367
[applause]

00:44:52.067 --> 00:44:54.133
Was this interesting?

00:44:54.133 --> 00:44:55.534
man:
Yes.

00:44:55.534 --> 00:44:58.200
Lindsay:
Good.

00:44:58.200 --> 00:45:00.901
Are you going to now
put web hooks

00:45:00.901 --> 00:45:05.234
into all your applications?

00:45:05.234 --> 00:45:06.834
Yes.

00:45:06.834 --> 00:45:09.033
man #2:
So I've got a question
from a security standpoint.

00:45:09.033 --> 00:45:10.267
Lindsay:
Yes.

00:45:10.267 --> 00:45:11.567
man #2: Have you looked
at preventing somebody

00:45:11.567 --> 00:45:13.167
from going and registering
hundreds and thousands

00:45:13.167 --> 00:45:15.634
of web hooks on some server
that they want to--

00:45:15.634 --> 00:45:17.667
or pointing toward some server
that they want

00:45:17.667 --> 00:45:20.367
to launch a denial
of service attack against,

00:45:20.367 --> 00:45:22.601
and how do you
prevent that?

00:45:22.601 --> 00:45:23.667
Lindsay:
That's a very common...

00:45:23.667 --> 00:45:25.334
woman:
Can you repeat the question?

00:45:25.334 --> 00:45:28.000
Lindsay: So how do you prevent
denial of service attacks

00:45:28.000 --> 00:45:30.834
from registering a bunch
of URLs and having them?

00:45:30.834 --> 00:45:32.834
I mean, that's--
so services

00:45:32.834 --> 00:45:36.567
are going to be in control
of, you know,

00:45:36.567 --> 00:45:38.300
what they're posting to
and how often.

00:45:38.300 --> 00:45:40.367
So some of the
implem-implementations

00:45:40.367 --> 00:45:46.734
I've seen, including
the PubSubHubBub application

00:45:46.734 --> 00:45:49.834
do are--are
just very careful

00:45:49.834 --> 00:45:51.067
about that.

00:45:51.067 --> 00:45:53.067
And they have
mechanisms for that

00:45:53.067 --> 00:45:54.601
that I haven't
looked into yet.

00:45:54.601 --> 00:45:56.167
But it's just being
a little bit more smart

00:45:56.167 --> 00:45:58.367
about how you
implement these things.

00:46:03.167 --> 00:46:06.234
More questions?

00:46:06.234 --> 00:46:07.567
Yeah.

00:46:07.567 --> 00:46:10.267
man #3:
So I saw a great example
of this recently.

00:46:10.267 --> 00:46:12.901
I bought a Panasonic
network camera

00:46:12.901 --> 00:46:14.501
that's remote-controllable,

00:46:14.501 --> 00:46:17.501
you can change the direction
of the lens, and so on.

00:46:17.501 --> 00:46:18.701
Lindsay:
Yeah.

00:46:18.701 --> 00:46:19.968
man #3: And it has
in the setup options

00:46:19.968 --> 00:46:22.834
a way of saying, "Post
the pictures that you get

00:46:22.834 --> 00:46:25.067
"when motion is detected
to the following URL

00:46:25.067 --> 00:46:26.167
by HTTP code."

00:46:26.167 --> 00:46:27.234
Lindsay:
Yep.

00:46:27.234 --> 00:46:28.434
man #3:
It works beautifully.

00:46:28.434 --> 00:46:29.501
Lindsay:
So--

00:46:29.501 --> 00:46:30.701
man #3:
Totally embedded.

00:46:30.701 --> 00:46:32.334
Lindsay: Part of the--the bigger
vision here,

00:46:32.334 --> 00:46:34.267
and I called this
the programmable web--

00:46:34.267 --> 00:46:36.367
oh, so I don't know
if I need to repeat that,

00:46:36.367 --> 00:46:37.634
but, I mean,
that was a really cool--

00:46:37.634 --> 00:46:39.934
uh, what was it, a--a--
what was the device?

00:46:39.934 --> 00:46:41.400
man #3:
Panasonic network camera.

00:46:41.400 --> 00:46:43.100
Lindsay:
That's a network camera

00:46:43.100 --> 00:46:44.767
that when it--
what was the thing

00:46:44.767 --> 00:46:45.968
that it detects?

00:46:45.968 --> 00:46:47.167
man #3:
It detects motion.

00:46:47.167 --> 00:46:49.467
Lindsay:
Mo--when motion,
it posts--yeah.

00:46:49.467 --> 00:46:52.634
And that's really cool.

00:46:52.634 --> 00:46:54.234
Like, that's a web hook.

00:46:54.234 --> 00:46:56.467
And it's really cool

00:46:56.467 --> 00:46:58.901
'cause that's, like,
a physical thing.

00:46:58.901 --> 00:47:00.367
A lot of people are
talking about, you know,

00:47:00.367 --> 00:47:04.067
"Eventually the web will
be a web of things," right?

00:47:04.067 --> 00:47:05.701
And so I called this talk

00:47:05.701 --> 00:47:07.367
"The Programmable &lt;i&gt;World&lt;/i&gt;
of Tomorrow"

00:47:07.367 --> 00:47:10.200
because in my mind,

00:47:10.200 --> 00:47:12.300
the world will become
more programmable.

00:47:12.300 --> 00:47:14.434
So this is
an example of that,

00:47:14.434 --> 00:47:17.300
and programming
will be more useful

00:47:17.300 --> 00:47:19.133
than just doing stuff
on the web.

00:47:19.133 --> 00:47:22.167
And having this kind of
universal programmability

00:47:22.167 --> 00:47:25.968
built in
would be really nice.

00:47:25.968 --> 00:47:30.534
So that is very cool.

00:47:30.534 --> 00:47:31.968
Questions, comments?

00:47:31.968 --> 00:47:35.934
Is that it?

00:47:35.934 --> 00:47:37.801
Okay.

00:47:37.801 --> 00:47:41.400
[applause]

