WEBVTT
Kind: captions
Language: en

00:00:09.250 --> 00:00:11.250
Welcome to Google Developers Show

00:00:11.250 --> 00:00:13.250
My name is Nicolas Bortolotti and in this emission

00:00:14.150 --> 00:00:16.930
Are we immersed in an ocean of Data?

00:00:16.930 --> 00:00:20.180
We'll talk about Massive Data Analysis in our 
"Reversed Focus" section.

00:00:20.180 --> 00:00:24.580
We'll connect to BigQuery, we'll take large clusters of large data banks,

00:00:24.580 --> 00:00:26.180
and we'll process them.

00:00:26.180 --> 00:00:27.360
We'll also have our

00:00:27.360 --> 00:00:28.840
"News and Updates" section

00:00:28.840 --> 00:00:30.340
"Latam in your hands"

00:00:30.340 --> 00:00:32.660
and "Android Microscope".

00:00:34.750 --> 00:00:38.250
Welcome to our "Reversed Focus" section. 
 Here we'll

00:00:38.250 --> 00:00:39.930
analyze an app.

00:00:39.930 --> 00:00:42.730
First, we'll show it and then

00:00:42.730 --> 00:00:44.800
we'll analyze its code of implementation.

00:00:44.800 --> 00:00:47.440
In this particular case we'll show a solution

00:00:47.440 --> 00:00:49.590
that connects with BigQuery. We'll generate

00:00:49.590 --> 00:00:51.010
an application

00:00:51.010 --> 00:00:52.880
that will be hosted in App Engine

00:00:52.880 --> 00:00:56.390
that will connect to BigQuery
where will analyze a set of massive Data.

00:00:56.390 --> 00:00:57.870
Then will take this information

00:00:57.870 --> 00:00:58.990
and we will

00:00:58.990 --> 00:01:03.720
render and display it using visualization API and a graphic of Google.

00:01:03.720 --> 00:01:05.720
Let's run our application.

00:01:06.230 --> 00:01:07.260
As you can see here

00:01:07.260 --> 00:01:11.400
we have our browser and Google App Engine Launcher. 

00:01:11.400 --> 00:01:15.390
Let's locate our app inside Google App Engine Launcher. 

00:01:15.390 --> 00:01:16.860
As you can see, the app

00:01:16.860 --> 00:01:20.720
is named DashBoard-Bigquery, here we have it...

00:01:20.720 --> 00:01:21.650
available.

00:01:21.650 --> 00:01:25.530
Let's run inside App Engine Launcher 

00:01:25.530 --> 00:01:27.400
the "Run" button.

00:01:27.400 --> 00:01:33.600
This way it will run and compile the application. Let see how our application is working.

00:01:33.600 --> 00:01:35.980
Our application is compiled and executed correctly.

00:01:35.980 --> 00:01:41.170
Let's navigate through our app. We have 2 options: one is to use our "browse" button 

00:01:41.170 --> 00:01:42.000
and the other one is to

00:01:42.000 --> 00:01:44.810
put "localhost" in the specific port, inside the browser. 

00:01:44.810 --> 00:01:47.080
Lets use the "browse" button.

00:01:47.080 --> 00:01:51.270
By clicking on the browse button we'll go directly to our browser.

00:01:51.270 --> 00:01:54.860
As you can see, the application is running on the localhost on the 19080 port.

00:01:54.860 --> 00:01:58.280
This port is dynamic.
. Of course, it corresponds to

00:01:58.280 --> 00:02:00.610
to the configuration that Google App Engine Louncher has.

00:02:00.610 --> 00:02:07.100
As you can see we already have our chart that displays the information coming from BigQuery.

00:02:07.100 --> 00:02:08.030
We can also

00:02:08.030 --> 00:02:12.790
visualize more information using Chrome tools

00:02:12.790 --> 00:02:15.870
to visualize how the Java Script is rendered correctly.

00:02:15.870 --> 00:02:17.710
The app

00:02:17.710 --> 00:02:21.730
 executes a query and returns it to BigQuery,

00:02:21.730 --> 00:02:24.780
and embeds the data

00:02:24.780 --> 00:02:27.980
into a graph using Visualization API.

00:02:27.980 --> 00:02:34.980
We developed an application using Python, the Python SDK for App Engine,

00:02:35.220 --> 00:02:42.220
the connection to the BigQuery API and then the final rendering using Visualization API and Google charts.

00:02:43.200 --> 00:02:44.900
Now we get into the code

00:02:44.900 --> 00:02:46.900
and we will see in detail how this application is built

00:02:46.900 --> 00:02:52.260
this app that has many files.  We'll analyze 3 of them that are very important:

00:02:52.700 --> 00:02:54.120
An application in App Engine using Phyton.

00:02:54.120 --> 00:02:56.120
We have a configuration file that is APP.jamel.

00:02:56.280 --> 00:02:58.120
We'll see it quickly.

00:02:58.320 --> 00:03:03.120
We'll see how is built. We'll have a .python file.

00:03:03.120 --> 00:03:06.440
Let's check the main.phy,

00:03:06.440 --> 00:03:08.440
And finally we'll take a look at

00:03:08.440 --> 00:03:11.680
the HTML file.

00:03:11.680 --> 00:03:15.720
This is the final file that renders the application,

00:03:15.720 --> 00:03:17.720
and the graphic that we saw before.

00:03:17.720 --> 00:03:19.720
Let's see the application settings.

00:03:19.720 --> 00:03:23.740
Let's go inside our app.jamel file.

00:03:24.440 --> 00:03:26.440
In this files,

00:03:26.440 --> 00:03:29.480
all the essential attributes are placed for our application settings.

00:03:29.480 --> 00:03:31.480
Let's see them.

00:03:31.480 --> 00:03:35.820
Let's see the libraries we imported which is fundamental in this explanation.

00:03:35.820 --> 00:03:38.740
As you can see in the configuration file that we have, 

00:03:38.740 --> 00:03:40.740
the "aplication" atribute that gives the name to

00:03:40.740 --> 00:03:42.740
to the app when we display it

00:03:42.740 --> 00:03:44.740
in the remote version,

00:03:44.740 --> 00:03:46.740
the phyton runtime.

00:03:46.740 --> 00:03:48.740
We also have the handlers management,

00:03:49.100 --> 00:03:51.100
the static files management,

00:03:51.100 --> 00:03:53.100
The generic handler management that we'll use

00:03:53.100 --> 00:03:58.600
is set for the entire range of IP in the main. application.

00:03:59.100 --> 00:04:02.840
And finally what is important here are also the libraries we are importing from the SDK with

00:04:02.840 --> 00:04:04.340
micro frameworks.

00:04:04.340 --> 00:04:07.560
In this case web ad 2 y jinga 2 as fundamental elements.

00:04:07.560 --> 00:04:09.560
Let's leave our settings.

00:04:09.560 --> 00:04:13.360
and let's analyze

00:04:13.360 --> 00:04:17.620
the key file, the one that gives sense to all the application.

00:04:17.800 --> 00:04:19.800
Here we have our main.phy

00:04:19.800 --> 00:04:21.800
Let's see the imports

00:04:21.800 --> 00:04:23.800
that we're using.

00:04:23.800 --> 00:04:28.320
Jinga 2 and web ad 2 and we are also using simple jason

00:04:28.320 --> 00:04:31.340
to shape a jason file that

00:04:31.380 --> 00:04:33.380
the graphic will take

00:04:33.380 --> 00:04:35.380
after the query to BigQuery.

00:04:35.380 --> 00:04:37.380
Then we have generic imports,

00:04:37.380 --> 00:04:39.380
and as you can see in the first part of the app

00:04:39.380 --> 00:04:41.380
we have some froms

00:04:41.380 --> 00:04:42.860
that represents

00:04:42.940 --> 00:04:46.740
the integration wit the API of BigQuery.

00:04:46.740 --> 00:04:48.740
So we have to do an integration

00:04:48.740 --> 00:04:50.740
to the APIs, and in this particular case

00:04:50.740 --> 00:04:53.860
to the BigQuery APIs. Remember that the application is an application on App Engine,

00:04:54.000 --> 00:04:56.000
that will connect to BigQuery and will get\

00:04:56.000 --> 00:05:01.420
the query to this massive set that we are proposing.

00:05:01.420 --> 00:05:08.020
In this part we have a decorator, that will let to take

00:05:08.020 --> 00:05:11.380
the secret to connect to the API and consult BigQuery.

00:05:11.900 --> 00:05:13.900
Then we have the construction of the service.  In this case on

00:05:13.900 --> 00:05:20.620
BigQuery version 2.0. Then we use some variables

00:05:20.620 --> 00:05:26.120
to set the project, the dataset and finally the query.

00:05:26.120 --> 00:05:29.920
Let's make a simulated query

00:05:29.920 --> 00:05:33.740
to a database of Wikipedia,

00:05:33.920 --> 00:05:35.920
we are actually making the massive data set

00:05:35.920 --> 00:05:39.080
but then we can implement any data set.

00:05:39.280 --> 00:05:41.280
In this case we'll use a public data set

00:05:41.280 --> 00:05:46.200
and in this case Wikipedia that is a massive data set.

00:05:46.200 --> 00:05:48.800
Then we have jinja settings which will allow us

00:05:48.920 --> 00:05:57.260
to take data in App Engine application and embed it in the HTML template.

00:05:57.640 --> 00:06:00.580
Then we have our main application that is the panel.

00:06:00.580 --> 00:06:04.980
Remember that we are trying to represent a panel with graphics

00:06:04.980 --> 00:06:08.200
to see variants of the massive data set queries.

00:06:08.980 --> 00:06:11.540
So in this particular case

00:06:11.540 --> 00:06:13.540
we put to work the setting and the micro framework Jinja.

00:06:14.060 --> 00:06:17.740
Then we go the the handler, using web ad2

00:06:18.460 --> 00:06:23.540
where we do specifically the implementation of this program.

00:06:24.300 --> 00:06:28.460
To protect ourselves from the exceptions, we are making the query within the try

00:06:28.840 --> 00:06:30.120
and taking its answer.

00:06:30.540 --> 00:06:33.300
As you can see here, we are running the answer

00:06:33.800 --> 00:06:37.460
with the variables of the project and the specific query

00:06:37.460 --> 00:06:39.460
which we set in the first of the lines.

00:06:40.940 --> 00:06:46.640
After this we are making a very simple configuration

00:06:46.640 --> 00:06:51.320
to take this data from BigQuery and shape them so our chart can display it properly.

00:06:51.320 --> 00:06:57.500
So we're representing a schema with a column with ID, a column with name and values,

00:06:57.780 --> 00:07:00.500
that is what we have in this line.

00:07:00.500 --> 00:07:05.780
Now w're setting some definitors

00:07:06.100 --> 00:07:11.000
to work the graphic and finally we iterance the query coming from BigQuery

00:07:11.000 --> 00:07:15.940
to inject the data in this new 
scheme that we are representing

00:07:16.180 --> 00:07:23.720
to finally flow this data into the jason file that will embed inside the chart

00:07:23.720 --> 00:07:25.720
using Visualization API.

00:07:25.720 --> 00:07:27.720
Here we're doing the iterance,

00:07:27.720 --> 00:07:31.780
in this segment, we're building the jason file.

00:07:32.000 --> 00:07:35.860
as we said before, with the implementation of simple jason.

00:07:35.860 --> 00:07:42.020
Then what you are seeing in this part which is called template valuest

00:07:42.020 --> 00:07:48.280
is using the bypass to go through Jinja 2 to the HTML file.

00:07:48.500 --> 00:07:53.060
Finally what we're seeing here in this last part, is injecting these data

00:07:53.300 --> 00:07:55.600
in a file that is named index.html,

00:07:55.600 --> 00:08:01.600
finally the exception handling and our handler webad2 for which the application is running.

00:08:01.920 --> 00:08:06.640
This is part of the main configuration file, now let's see

00:08:06.760 --> 00:08:12.220
how these data flows from BigQuery to get displayed in that chart that we saw.

00:08:12.220 --> 00:08:17.320
We'll see this in the second part of our "Reversed focus" section.

00:08:25.380 --> 00:08:29.340
We're now in our "News and Updates" section. Here we take a look at the latest news

00:08:29.480 --> 00:08:31.480
of the technological world,

00:08:31.480 --> 00:08:37.460
the main features  of this technological awakening in Latin America.

00:08:37.460 --> 00:08:42.520
Let's see two news and let's comment about them

00:08:42.800 --> 00:08:47.420
The first has to do with public warnings and the new crisis map

00:08:47.420 --> 00:08:49.420
to natural disasters in Mexico.

00:08:49.420 --> 00:08:53.880
This is very important because it uses open data that is our topic for this emission.

00:08:53.880 --> 00:09:03.040
You know how important this type of element is

00:09:03.220 --> 00:09:05.980
in countries with high risk of natural disasters such as Mexico.

00:09:05.980 --> 00:09:12.340
It is very interesting have it available and use it.

00:09:12.340 --> 00:09:16.600
Natural disasters can be for example: earthquakes, volcanoes here is very common,

00:09:17.060 --> 00:09:21.020
and in this particular case is now available for everyone to visualize.

00:09:21.020 --> 00:09:23.020
Thanks to the collaboration also expressed

00:09:23.020 --> 00:09:35.700
in Google's blog for Latin America: googleamericalatinablog.blogspot.com.mx

00:09:35.700 --> 00:09:43.920
These data also is available thanks to the collaboration of institutions such as the Digital Strategy Lecturer coordinator, 

00:09:44.040 --> 00:09:48.040
National Chief of the Office of the Presidency of the Republic,

00:09:48.300 --> 00:09:53.240
and other institutions like Conagua Conapred, the Federal Electricity Commission (CFE) and Green Angels,

00:09:53.460 --> 00:09:57.080
that presented along with Google this new feature.

00:09:57.080 --> 00:10:01.300
Let's go to our second news that envolves the techonological world.

00:10:01.440 --> 00:10:10.800
This will be of great value for you that follows all the updates. This is an interesting feature

00:10:10.800 --> 00:10:19.140
that Google developers team propose in: developer.google.com/fit.

00:10:19.280 --> 00:10:21.720
Google fit! How important is to do sports!

00:10:22.080 --> 00:10:26.640
As an enthusiastic developer

00:10:26.900 --> 00:10:28.900
you must also do some workout!

00:10:28.900 --> 00:10:30.900
And in this particular case, Google propose

00:10:31.060 --> 00:10:35.440
an interesting challenge, to let us

00:10:35.580 --> 00:10:39.900
develop for Fit! And in this particular case is very interesting because

00:10:39.900 --> 00:10:43.460
the SDK will allow us to work with different types of sensors.

00:10:43.680 --> 00:10:49.480
The case for watches or wearable devices that can be sensing when you do sport.

00:10:49.480 --> 00:10:53.660
So you can take that information

00:10:53.780 --> 00:10:58.120
process it and get interesting values.

00:10:58.120 --> 00:11:05.060
You can also collect data of the sporting world as we are seeing and help the user 

00:11:05.180 --> 00:11:09.980
to make a Tracking and follow they daily training.

00:11:09.980 --> 00:11:15.320
So now is being launched the new Google SDK Fit and we shared it with you!

00:11:15.320 --> 00:11:17.320
This new technological advancement!

00:11:25.580 --> 00:11:32.940
Now we return to  our "Reversed Focus" section and we will see the rendering of data.

00:11:32.940 --> 00:11:38.640
So, we've analyzed the main part of our program for massive data inquiry.

00:11:38.860 --> 00:11:42.980
So let's now analyze our  index.html that we have here.

00:11:43.220 --> 00:11:47.820
We go back to our application, we go inside our code and we can see

00:11:47.820 --> 00:11:51.200
that this file is actually a traditional HTML.

00:11:51.320 --> 00:11:56.420
We're now seeing the basic structure, where we have a header,

00:11:56.580 --> 00:11:59.300
its header is standard as well.

00:11:59.300 --> 00:12:02.620
We have a title that we named "Visualization panel" using BigQuery,

00:12:02.760 --> 00:12:05.940
Here we have the configured java Script,

00:12:05.940 --> 00:12:13.420
that will allow to use a Google 
chart through Visualization API

00:12:13.520 --> 00:12:17.460
to place the data and view, in this case, in a scenario of columns.

00:12:17.460 --> 00:12:22.860
Here we have the  Java Script. Let's analyze it.

00:12:23.180 --> 00:12:30.080
Here, in the initial load, we have the visualization and the corechart,

00:12:30.840 --> 00:12:35.820
then, in the implementation of the program in Java Script we have a variable data, and the key is here

00:12:36.180 --> 00:12:39.720
because is parte of the jinja template

00:12:39.720 --> 00:12:44.860
in which we put the data of the query that comes from BigQuery with that format in Jason,

00:12:45.900 --> 00:12:47.900
to the chart.  We also put a 

00:12:47.900 --> 00:12:50.920
safe attribute so we won't have problems with the format of the data.

00:12:51.780 --> 00:12:58.060
Then we have the Data variable that propose a Data Table and embeds that variable data

00:12:58.060 --> 00:13:03.600
inside that Data Table, and this is now part of the traditional scenario that you could find

00:13:03.600 --> 00:13:05.600
to visualize data in a chart.

00:13:05.600 --> 00:13:08.480
Finally we have here a standard function of visualization,

00:13:08.800 --> 00:13:18.360
that propose a column chart, and it also embeds inside the visualization attribute,

00:13:18.940 --> 00:13:22.640
in the traditional HTML that we'll have and that I will show you at the end of the code.

00:13:23.280 --> 00:13:28.640
Then we have a very traditional setting of some attributes in which you can place

00:13:28.760 --> 00:13:34.480
many more, where we finally name our graphic as "columns panel".

00:13:34.480 --> 00:13:39.360
Remember that the graphic brings that massive data of the query from BigQuery.

00:13:39.540 --> 00:13:43.720
This information ends with oncall or onload callback.

00:13:43.940 --> 00:13:48.000
This is the callback that we use to visualize the graphic.

00:13:48.000 --> 00:13:54.840
In the body of my HTML file we have the ID visualization where we'll load

00:13:54.900 --> 00:14:00.680
our graphic. Just like that we connect to BigQuery from App Engine in this particular case,

00:14:00.680 --> 00:14:05.000
we query millions of registers or rows of data,

00:14:05.640 --> 00:14:08.140
we obtain this result, we process it,

00:14:08.140 --> 00:14:12.540
as we showed you and finally we embed in an HTML through a template.

00:14:12.940 --> 00:14:14.940
So this is the resolution for our "Reversed Focus" section.

00:14:14.940 --> 00:14:16.940
Welcome to "Latam in your hands"

00:14:16.940 --> 00:14:22.220
We remind you that "Latam in your hands" propose to know the opinion of experts

00:14:22.500 --> 00:14:28.100
in all our continent. In this particular case, we have the presence of

00:14:28.340 --> 00:14:34.460
"Codenando México". This team of hackers that works on Open Data

00:14:34.460 --> 00:14:38.920
and propose an interesting perspective that we'll show you here

00:14:39.440 --> 00:14:42.960
in this unique section that we call "Latam in your hands". Let's hear

00:14:42.960 --> 00:14:44.900
to "Codeando México" team

00:14:51.820 --> 00:14:56.060
Hi I'm Juan Pablo Escobar  founder and director of "Codeando Mexico".

00:14:56.180 --> 00:15:01.480
We are a nonprofit organization working with open data,

00:15:01.660 --> 00:15:03.760
civic Hacking in Mexico.

00:15:03.760 --> 00:15:06.020
How did we start and why?

00:15:06.340 --> 00:15:11.640
Suddenly we came to the need to see what would happen if we changed a bit

00:15:11.640 --> 00:15:16.140
the goal of what we were doing as developers and we focus

00:15:16.280 --> 00:15:19.240
on bigger issues of the society.

00:15:19.240 --> 00:15:23.040
I'm in chage of Community and Strategy in Codeando Mexico.

00:15:23.320 --> 00:15:30.760
People are seeing the value of Open Data in communities of people not only in technology but also journalists, researchers.

00:15:31.440 --> 00:15:34.740
Many people are seeing the value of using open data

00:15:34.740 --> 00:15:38.960
as a tool to create solutions that solve real problems in the city.

00:15:39.280 --> 00:15:45.540
And we realized it was a super important need to have a place where the developer

00:15:45.540 --> 00:15:50.720
could use the public data of the 
country in an organized way.

00:15:50.720 --> 00:15:56.540
In 2013 we proposed a project where every citizen, organization, company

00:15:56.700 --> 00:16:01.460
or even the government could share public data.

00:16:01.460 --> 00:16:07.220
The government has responded and is taking some very specific initiatives to open data

00:16:07.500 --> 00:16:09.500
so people can reach it.

00:16:09.500 --> 00:16:12.760
One of those initiatives is: datos.gob.mx

00:16:12.980 --> 00:16:18.640
Each day is growing with more available data

00:16:18.840 --> 00:16:20.840
so developers and entrepreneurs can use it

00:16:20.840 --> 00:16:24.360
to create value and improve mexican society.

00:16:24.600 --> 00:16:26.600
Developers and also companies

00:16:26.600 --> 00:16:31.200
like Google are supporting the project with the development

00:16:31.380 --> 00:16:33.820
for open data.

00:16:35.240 --> 00:16:39.380
Like how to change this mainset and start being more agile in the part of civic technolog.

00:16:40.340 --> 00:16:45.560
Or how do you go from a mockup to a prototype of you app in Android.

00:16:45.560 --> 00:16:54.960
And instead of having a server that could take you hours, now is so simple with Compute Engine.

00:16:55.040 --> 00:16:57.660
and have any civic app that you wish.

00:16:58.460 --> 00:17:00.460
We've been using Compute Engine,

00:17:00.460 --> 00:17:08.040
Cloud Storage, and it has helped us to better understand how we can focus

00:17:08.260 --> 00:17:13.940
on innovating, because with Google support

00:17:14.220 --> 00:17:15.700
we can trust in the infrastructure.

00:17:15.700 --> 00:17:22.340
Fortunately Open Data gives us an easier way to work with this type of platform.

00:17:22.340 --> 00:17:27.020
We are designing, with Google support,

00:17:27.020 --> 00:17:33.100
using Compute Engine, a much better response

00:17:33.160 --> 00:17:35.160
when we have to process all the data.

00:17:35.160 --> 00:17:41.180
There comes a time to really explore what we can do with them and what we can change

00:17:41.260 --> 00:17:47.340
in the country. The government must build technology

00:17:47.340 --> 00:17:51.660
that has value and impact in the society. We must be involved as Developers

00:17:51.920 --> 00:17:56.580
with the government and companies to keep growing.

00:17:59.580 --> 00:18:03.260
Very interesting the perspectivo of "Codeando Mexico".

00:18:04.100 --> 00:18:06.920
Here, in "Latam in your hands" we also have the opinion

00:18:06.920 --> 00:18:14.780
of different people and now we have a very important perspective, the testimonial of the Federal Government

00:18:14.900 --> 00:18:17.740
of Mexico, 

00:18:17.740 --> 00:18:22.920
That releases the data and is promoting this exciting movement on open data.

00:18:23.100 --> 00:18:26.320
Let's see the vision that is proposed by the Federal Government of Mexico.

00:18:28.160 --> 00:18:35.340
Hi I'm Rodolfo Wilhelmy, I am director of open data

00:18:35.500 --> 00:18:36.880
for Coordination in the National Digital Strategy

00:18:37.020 --> 00:18:44.040
in the Government of Mexico, and what we are doing is the open data initiative, among other things.

00:18:45.040 --> 00:18:51.000
We seek that all information contained in the government of the Republic is made public,

00:18:51.660 --> 00:18:56.120
in: datos.gob.mx

00:18:56.120 --> 00:19:01.100
with the intention of you developers and entrepreneurs can use this data

00:19:01.100 --> 00:19:03.100
to add value.

00:19:03.100 --> 00:19:08.920
Google has been very close to these initiatives. We have been using many open and free apps

00:19:09.140 --> 00:19:12.160
from Google, that has helped as a lot.

00:19:12.160 --> 00:19:20.560
We're using Google Refine, Open Refine and  BigQuery, because

00:19:20.680 --> 00:19:24.520
when you're working on open data

00:19:24.780 --> 00:19:26.380
you have to work in the quality of that data.

00:19:27.680 --> 00:19:32.900
To achieve this, we've been working directly with the secretariats,

00:19:33.200 --> 00:19:41.700
and government agencies, in order to help and give them some advice, some guidance

00:19:42.080 --> 00:19:45.380
to improve the publication of open data.

00:19:45.380 --> 00:19:50.840
Open Refine has been of great value,

00:19:50.840 --> 00:19:57.380
We taught them how to use it, to clean and improve

00:19:57.380 --> 00:19:59.700
the quality of data bases.

00:19:59.980 --> 00:20:03.960
And they loved the tool, we received a lot of positive feedback.

00:20:05.160 --> 00:20:11.460
Now we're exploring BigQuery

00:20:12.000 --> 00:20:16.980
to deliver data massively, scaled

00:20:17.860 --> 00:20:22.800
and in that sense it is very helpful because it is very difficult for a secretariat

00:20:22.980 --> 00:20:24.980
o a government agency

00:20:24.980 --> 00:20:30.560
to have APIs o such a scalable infrastructure like Google APIs.

00:20:30.680 --> 00:20:36.600
So this will serve us very well and it will be a great benefit

00:20:36.600 --> 00:20:38.400
for all the community of developers,

00:20:38.460 --> 00:20:40.460
because now we'll be able to have APIs of great quality!

00:20:48.060 --> 00:20:50.060
This was "Latan in your hands"

00:20:50.060 --> 00:20:54.920
We invite you to share with us 
who would be your references!

00:20:55.040 --> 00:20:59.580
You can share it in: Google.com\+desarrolladoresgoogle

00:20:59.880 --> 00:21:03.760
Share it with us, because Latin America is in your hands!

00:21:03.760 --> 00:21:09.180
See you in the next show, don't miss it and remember, keep developing!

