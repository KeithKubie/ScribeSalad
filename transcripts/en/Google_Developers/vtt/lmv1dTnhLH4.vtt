WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.629
&gt;&gt;Xavier Ducrohet: Hello, everyone.

00:00:03.629 --> 00:00:08.210
Welcome to I/O and welcome our session on
What's New in Android Developer Tools.

00:00:08.210 --> 00:00:21.510
My name is Xavier Ducrohet.

00:00:21.510 --> 00:00:23.000
&gt;&gt;&gt; I think we have a few things to show.

00:00:23.000 --> 00:00:24.960
&gt;&gt;Xavier Ducrohet: Maybe.

00:00:24.960 --> 00:00:29.210
So Android Studio.

00:00:29.210 --> 00:00:34.780
So when we released the first SDK in 2007,
we released some tools with it and since then

00:00:34.780 --> 00:00:39.649
we've done a lot of progress in and outside
of the IDE based on Eclipse and we are going

00:00:39.649 --> 00:00:43.859
to keep on doing that, but one thing that
we could never really do is really improve

00:00:43.859 --> 00:00:50.059
the whole workflow of being an Android developer
inside the IDE, and we really wanted to improve

00:00:50.059 --> 00:00:51.059
that.

00:00:51.059 --> 00:00:56.050
So when we wanted to concentrate on Android-focused
IDE, we decided to go with IntelliJ.

00:00:56.050 --> 00:01:02.800
IntelliJ is a great Java IDE, but it's also
based on a very extensible platform.

00:01:02.800 --> 00:01:07.920
It's the same platform that borrowed some
of the other IDE from JetBrains, like (indiscernible),

00:01:07.920 --> 00:01:11.530
Python IDE or Javascript IDE.

00:01:11.530 --> 00:01:15.649
And the extensibility is really available
throughout.

00:01:15.649 --> 00:01:22.440
Some of the core components like product support,
build support, the support that powers all

00:01:22.440 --> 00:01:28.140
of the refactoring, all the way up to the
UI where everything is customizable.

00:01:28.140 --> 00:01:32.469
&gt;&gt;Tor Norbye: And the build support, that
extensibility is the most important part given

00:01:32.469 --> 00:01:33.680
what we're going to show you.

00:01:33.680 --> 00:01:39.060
&gt;&gt;Xavier Ducrohet: So this is going to allow
us to create a lot of very advanced features

00:01:39.060 --> 00:01:45.130
that we couldn't really do before, but also
creates an experience that is really focused

00:01:45.130 --> 00:01:47.590
for Android.

00:01:47.590 --> 00:01:52.700
And when we did something in the IntelliJ
platform that is not extensible we worked

00:01:52.700 --> 00:01:57.530
directly with JetBrains to make sure that
Web extension point so we don't fog that platform.

00:01:57.530 --> 00:02:01.710
We're just basing all IDE on their platform.

00:02:01.710 --> 00:02:03.700
We're using everything that they're doing.

00:02:03.700 --> 00:02:06.859
In fact, we're actually building on top of
their existing Android support.

00:02:06.859 --> 00:02:12.960
So it had support for building, editing, debugging
and not just extending that.

00:02:12.960 --> 00:02:18.390
So in the past few months we've mostly worked
in our internal repository because we wanted

00:02:18.390 --> 00:02:24.440
that to be a surprise, and today we're moving
back to the open source project, so it's live

00:02:24.440 --> 00:02:30.980
now in AOSP and since we're doing that we
figured out we would also give you a preview.

00:02:30.980 --> 00:02:33.930
So today it went live, not too long ago.

00:02:33.930 --> 00:02:39.850
You can go download Android Studio, it's version
0.1.

00:02:39.850 --> 00:02:44.521
It's a bit rough around the edges.

00:02:44.521 --> 00:02:46.030
The IntelliJ part is mostly stable.

00:02:46.030 --> 00:02:49.460
&gt;&gt;Tor Norbye: There are some parts that are
rock solid and other parts that are not.

00:02:49.460 --> 00:02:53.430
&gt;&gt;Xavier Ducrohet: Yes, but we want to have
a lot of feedback.

00:02:53.430 --> 00:02:56.520
We want to make the best IDE possible.

00:02:56.520 --> 00:03:01.140
We're going to integrate very quickly, fix
bugs, add new features and gather feedback

00:03:01.140 --> 00:03:02.140
from you.

00:03:02.140 --> 00:03:05.410
So please try it and send us feedback.

00:03:05.410 --> 00:03:10.690
Now, I realize that probably some of you,
you know, have never tried IntelliJ before

00:03:10.690 --> 00:03:16.160
and so we wanted to give you a quick overview
of IntelliJ before we show you some of the

00:03:16.160 --> 00:03:18.280
Android Studio specific features.

00:03:18.280 --> 00:03:24.960
So I'm very happy to introduce on stage Dmitry
Jemerov, the CTO of JetBrains to give you

00:03:24.960 --> 00:03:29.270
an overview of IntelliJ.

00:03:29.270 --> 00:03:35.660
&gt;&gt;&gt; Hello, everyone.

00:03:35.660 --> 00:03:39.000
So my name is Dmitry, the CTO of JetBrains.

00:03:39.000 --> 00:03:44.940
I'm very excited to be here and thanks for
the warm reception during the keynote.

00:03:44.940 --> 00:03:47.910
And I'd like to tell a bit about our side
of this story.

00:03:47.910 --> 00:03:53.040
So we have been long watching the work that
the tools team has been doing on the Android

00:03:53.040 --> 00:03:56.860
tooling and we have been very impressed with
the quality of that work so we are sure that

00:03:56.860 --> 00:04:00.240
our Android plug-in is in good hands now.

00:04:00.240 --> 00:04:02.260
From our side we fully support that effort.

00:04:02.260 --> 00:04:08.990
We provide the necessary extensions in the
platform that the guys here need from us and

00:04:08.990 --> 00:04:11.870
so it's all versed together very nicely.

00:04:11.870 --> 00:04:15.950
From our side we're also going to ship all
of that stuff as part of our release as part

00:04:15.950 --> 00:04:17.630
of IntelliJ Idea itself.

00:04:17.630 --> 00:04:21.290
And for those of you not familiar with our
products, we have actually two editions of

00:04:21.290 --> 00:04:22.290
the product.

00:04:22.290 --> 00:04:25.940
The IntelliJ IDEA Community edition is the
free and open source version which is what

00:04:25.940 --> 00:04:28.160
Android Studio is based on.

00:04:28.160 --> 00:04:34.070
And we have IntelliJ IDEA Ultimate, the commercial
edition of the IDE, which also includes support

00:04:34.070 --> 00:04:40.511
for server side development, starting with
CSS and JavaScript and proceeding to the Java

00:04:40.511 --> 00:04:45.940
enterprise frameworks like Spring Hibernate,
Java EE and stuff like that, database support

00:04:45.940 --> 00:04:47.060
and so on.

00:04:47.060 --> 00:04:51.750
So if you're working on a pure Android project,
the Android Studio is the best tool of choice

00:04:51.750 --> 00:04:55.950
for you and if you have a project that has
a service side component or simply if you're

00:04:55.950 --> 00:05:02.400
working in a more distributed environment,
then you might want to look at IntelliJ IDEA

00:05:02.400 --> 00:05:04.540
Ultimate.

00:05:04.540 --> 00:05:09.160
So now I'm going to give a quick demo of the
features in IntelliJ.

00:05:09.160 --> 00:05:12.350
It's not going to be Android specific so that
will be Tor's part of the demo.

00:05:12.350 --> 00:05:15.590
I'll just start with a general overview.

00:05:15.590 --> 00:05:19.610
So the motto of our company is "Develop with
Pleasure."

00:05:19.610 --> 00:05:23.660
And one of the key things from which pleasure
comes during development is not having to

00:05:23.660 --> 00:05:29.780
worry about routine tasks, so stuff happening
-- as much stuff as possible should happen

00:05:29.780 --> 00:05:32.220
automatically, should be done automatically
for you.

00:05:32.220 --> 00:05:36.960
So for example, like routine stuff like saving
files or managing imports, this is all done

00:05:36.960 --> 00:05:40.470
for you by the IDE automatically on the fly.

00:05:40.470 --> 00:05:45.450
Another part is that IntelliJ IDEA has a wide
array of refactorings and quick fixes for

00:05:45.450 --> 00:05:49.000
the problems that you can encounter in your
code.

00:05:49.000 --> 00:05:53.730
And we do not see them just as tools for fixing
errors or fixing code that is broken.

00:05:53.730 --> 00:05:59.400
We see them as an integral part of the code-writing
experience inside IntelliJ.

00:05:59.400 --> 00:06:02.850
And I'm going to show a little bit of how
this works in practice.

00:06:02.850 --> 00:06:09.240
So I'm going to start writing -- this is a
simple Android app, a little more than Hello

00:06:09.240 --> 00:06:10.300
world.

00:06:10.300 --> 00:06:14.811
And I've written a method and told that does
not exist and so now I'll use a quick fix

00:06:14.811 --> 00:06:17.760
to create it for me.

00:06:17.760 --> 00:06:24.800
Now I'm going to call the regular find ULD
method which all of you know, and now I'll

00:06:24.800 --> 00:06:27.870
use refactoring to save this as enter variable.

00:06:27.870 --> 00:06:32.800
So I introduce the variable refactoring and
I enter the name of the variable.

00:06:32.800 --> 00:06:35.070
And by the way, notice this all happens in
place.

00:06:35.070 --> 00:06:38.710
There are no dialogue box popping up, nothing
like that.

00:06:38.710 --> 00:06:49.389
Now it has the wrong type and it's actually
a text use so I'm entering text use here.

00:06:49.389 --> 00:06:53.960
Of course it can also insert the necessary
type cast for me.

00:06:53.960 --> 00:07:03.890
Now I'm going to write some control structures,
2013, and now this statement is incomplete.

00:07:03.890 --> 00:07:09.190
It lacks parenthesis and stuff, and I'm going
to use an action called complete statement

00:07:09.190 --> 00:07:13.740
that is going to turn this into a complete
statement for me essentially.

00:07:13.740 --> 00:07:18.120
So I'm invoking from the menu, but -- you
always use the keyboard for this, but in order

00:07:18.120 --> 00:07:22.690
for you to see what I'm doing, the menu is
more clear.

00:07:22.690 --> 00:07:32.090
So now this is an unresolved parameter and
I'm going to create this now, create parameter,

00:07:32.090 --> 00:07:35.919
and this actually triggers another refactoring,
the change signature refactoring.

00:07:35.919 --> 00:07:39.990
And this is going to go through all of the
calls of the method from -- of which there

00:07:39.990 --> 00:07:45.670
is only one and it will actually introduce
the necessary value into the call.

00:07:45.670 --> 00:07:50.120
Now, set text, Hello I/O.

00:07:50.120 --> 00:07:56.360
Of course, this is an Android app so this
is supposed to be a resource and we have a

00:07:56.360 --> 00:08:01.180
fix for that, but that's part of Tor's demo,
not mine.

00:08:01.180 --> 00:08:07.510
Another thing showing is in IntelliJ IDEA
we have two code completion actions.

00:08:07.510 --> 00:08:11.290
There's the regular code completion which
you have seen a number of times already and

00:08:11.290 --> 00:08:13.979
we also have the smart app completion.

00:08:13.979 --> 00:08:20.610
And the smart app completion actually restricts
the options on the completion list to the

00:08:20.610 --> 00:08:22.760
values of the correct type.

00:08:22.760 --> 00:08:27.550
And it's actually not something that you always
want, but when you do want it, it's very easy

00:08:27.550 --> 00:08:29.960
and accessible using keyboard shortcut.

00:08:29.960 --> 00:08:34.669
And if you press the same keyboard shortcut
again it will have return values of the same

00:08:34.669 --> 00:08:36.339
type.

00:08:36.339 --> 00:08:45.019
Now, actually, it looks like I'm -- I'm not
really going to need this so I'm going to

00:08:45.019 --> 00:08:49.920
use another nice coding assistance action
called unwrap remove to get rid of this statement

00:08:49.920 --> 00:08:50.920
for me.

00:08:50.920 --> 00:08:56.809
I select the option to unwrap gift and, poof,
it disappears.

00:08:56.809 --> 00:08:59.829
Now this parent is no longer used and, of
course, there's another quick fix to get rid

00:08:59.829 --> 00:09:01.430
of it.

00:09:01.430 --> 00:09:03.499
And remove parameter.

00:09:03.499 --> 00:09:04.999
It's gone.

00:09:04.999 --> 00:09:08.559
By the way, I mentioned background code analysis
and I would like specifically to highlight

00:09:08.559 --> 00:09:10.920
some of the (Indiscernible) features.

00:09:10.920 --> 00:09:12.639
Some of them are pretty smart.

00:09:12.639 --> 00:09:15.600
For example, this is my favorite, inspection.

00:09:15.600 --> 00:09:21.120
So when you are writing UI code you can often
make the error of mixing up the coordinates,

00:09:21.120 --> 00:09:25.369
mixing up X and Y or height and width or something
like that, and we have built in something

00:09:25.369 --> 00:09:26.369
especially for that.

00:09:26.369 --> 00:09:32.509
In this case I'm having the max width value
and set the height.

00:09:32.509 --> 00:09:35.910
IntelliJ IDEA highlights that problem and
I'm probably doing something wrong and probably

00:09:35.910 --> 00:09:39.629
I have messed things up and I should correct
them.

00:09:39.629 --> 00:09:43.980
The next thing I would -- I want to look at
is our version control integration.

00:09:43.980 --> 00:09:48.560
An important thing to note that in IntelliJ
IDEA all the version control plug-ins such

00:09:48.560 --> 00:09:54.089
as gifts (indiscernible) and a few more, they're
all bundled in the distribution of the product

00:09:54.089 --> 00:09:56.189
so you don't have to hunt for plug-ins.

00:09:56.189 --> 00:10:01.370
All the plug-ins have a consistent user experience
and work in a similar way.

00:10:01.370 --> 00:10:05.100
And the key part of the version control integration
is our changes view.

00:10:05.100 --> 00:10:08.290
This is the view that shows the list of all
the things that you have modified or added

00:10:08.290 --> 00:10:13.040
to the project or removed from the version
control, and it's automatically updated on

00:10:13.040 --> 00:10:14.040
the fly.

00:10:14.040 --> 00:10:19.240
And you can always access the diffs and see
what changes exactly have you made.

00:10:19.240 --> 00:10:23.120
You can also use this view to trigger the
commit action so you select the files that

00:10:23.120 --> 00:10:31.050
you want to go in and you click on commit
changes and you get this commit dialogue.

00:10:31.050 --> 00:10:35.259
And because this product is using get, I also
get the option to put the changes in -- no,

00:10:35.259 --> 00:10:37.240
no, I don't want to do that.

00:10:37.240 --> 00:10:40.990
I get the option of push the changes to the
server immediately.

00:10:40.990 --> 00:10:45.230
Now, if you want to look at what other people
in the project have been doing, you can use

00:10:45.230 --> 00:10:46.470
the get log view for that.

00:10:46.470 --> 00:10:52.929
So if you switch to that tab it shows a nice
graph for commit so this part does not have

00:10:52.929 --> 00:10:57.649
any complications in branch structure, but
if it had it would be displayed right here.

00:10:57.649 --> 00:11:05.740
Of course I can also show diffs to see exactly
was changed and you can pull the latest changes

00:11:05.740 --> 00:11:07.350
to my machine.

00:11:07.350 --> 00:11:11.319
And another nice thing we have for get is
this branch chooser pop-up.

00:11:11.319 --> 00:11:17.839
So right now I am under my diff branch and
I can use a new one that I'm doing or merge

00:11:17.839 --> 00:11:21.040
this into the master branch or something like
that.

00:11:21.040 --> 00:11:26.459
Now, of course, I could be talking for hours
about different features of the IDE, but we

00:11:26.459 --> 00:11:30.070
don't have that much time, so I'll switch
to giving you some useful pointers on how

00:11:30.070 --> 00:11:31.550
to explore the IDE further.

00:11:31.550 --> 00:11:35.040
So first of all we have this tip of the day
thing.

00:11:35.040 --> 00:11:39.040
And unlike some other products it actually
contains useful and relevant information so

00:11:39.040 --> 00:11:43.499
you can go look through those and learn something
useful.

00:11:43.499 --> 00:11:46.249
Another useful thing is the find action keyboard
shortcut.

00:11:46.249 --> 00:11:51.949
So for example, some of the things that I
have used you can type in complete and it

00:11:51.949 --> 00:11:57.139
will show the complete commit statement and
shortcut for it so that you can invoke it

00:11:57.139 --> 00:12:00.010
that way and learn the keyboard shortcut in
the future.

00:12:00.010 --> 00:12:03.360
We also have a blog with a lot of useful information
on our product.

00:12:03.360 --> 00:12:06.290
You can follow us on Twitter.

00:12:06.290 --> 00:12:09.579
And finally, we have a booth in the developer
sandbox and we will be there for the whole

00:12:09.579 --> 00:12:14.269
three days of the conference and if you have
any questions on what's going on with IntelliJ

00:12:14.269 --> 00:12:19.379
or how is it better than Eclipse or stuff
like that, please go there and ask us and

00:12:19.379 --> 00:12:22.720
we will be happy to answer it -- answer those
questions.

00:12:22.720 --> 00:12:26.940
Now I'm handing over to Xav for the communication
demo.

00:12:26.940 --> 00:12:33.009
[ Applause ]
&gt;&gt;Xavier Ducrochet: Thank you.

00:12:33.009 --> 00:12:36.350
We're really excited to build Studio on IntelliJ.

00:12:36.350 --> 00:12:38.759
It's really a fantastic tool.

00:12:38.759 --> 00:12:44.660
Now I want to talk a little about project
support because this is something we really

00:12:44.660 --> 00:12:46.009
want to do well.

00:12:46.009 --> 00:12:51.009
If you look at the current situation you will
-- in Eclipse we have some custom builders.

00:12:51.009 --> 00:12:52.829
We have an end script somewhere.

00:12:52.829 --> 00:12:57.510
IntelliJ has its own builder and they may
not all do the same thing and it's really

00:12:57.510 --> 00:13:00.069
a problem and we wanted to fix that.

00:13:00.069 --> 00:13:04.259
We want to have a single system, a system
that's flexible and customizable so that it

00:13:04.259 --> 00:13:09.889
can adopt to all your needs, and some of you
have some very specific needs.

00:13:09.889 --> 00:13:13.689
And we want to make sure also that whether
you're working in the IDE or whether you're

00:13:13.689 --> 00:13:18.189
building in your continuous integration server
then you should have exactly the same results.

00:13:18.189 --> 00:13:22.310
If you have some customization and you're
working in the IDE and you don't get the same

00:13:22.310 --> 00:13:26.019
result because the IDE doesn't understand
the customization, that's a problem.

00:13:26.019 --> 00:13:31.470
So for a little under a year now we've we
started working on that, we started an implementing

00:13:31.470 --> 00:13:33.209
a new design build system.

00:13:33.209 --> 00:13:41.319
It's based on Gradle and it's very extensive,
customizable and very extensible and it is

00:13:41.319 --> 00:13:43.560
deeply integrated into the IDE.

00:13:43.560 --> 00:13:48.019
That means that in Studio the different behavior
is when you create a new project it will create

00:13:48.019 --> 00:13:53.589
a Gradle project using our Gradle plug-in
and then it will get imported into Studio

00:13:53.589 --> 00:13:59.529
using the great Gradle support that JetBrains
is adding into IntelliJ.

00:13:59.529 --> 00:14:04.720
And when you're building from studio it's
going to actually delegate the build to Gradle

00:14:04.720 --> 00:14:09.670
and have Gradle do the build so that whether
you're inside your IDE or on a build server,

00:14:09.670 --> 00:14:14.379
the same result every time, and that's really
important.

00:14:14.379 --> 00:14:21.230
We have a concept of a build variant in this
build system.

00:14:21.230 --> 00:14:24.850
There was a talk during the keynote talking
about beta test and alpha test and being able

00:14:24.850 --> 00:14:30.990
to deploy that to users so we have the ability
to have different build environs whether you

00:14:30.990 --> 00:14:34.529
want to do release build or maybe a bit hub
build.

00:14:34.529 --> 00:14:37.199
We also have support for debug, for instance.

00:14:37.199 --> 00:14:44.770
So here we have a build file that has two
product flavors, paid versus free, then it

00:14:44.770 --> 00:14:47.839
has a new build type bit hub.

00:14:47.839 --> 00:14:55.759
And you could configure it different ways.

00:14:55.759 --> 00:14:59.630
I have a new panel here that shows build IM
that shows I am working right now on the paid

00:14:59.630 --> 00:15:01.100
debug version.

00:15:01.100 --> 00:15:04.740
That means when I click launch it's actually
launching your paid debug version.

00:15:04.740 --> 00:15:11.179
If you look at the source folders on the left
here, the blue source folder, Java here and

00:15:11.179 --> 00:15:16.610
then it's source main Java and source paid
Java are your main source folders, so in that

00:15:16.610 --> 00:15:20.389
paid Java folder it would put code specific
to that version.

00:15:20.389 --> 00:15:24.910
The green version says here that your test
code, so the instrumentation test and instrumentation

00:15:24.910 --> 00:15:29.060
test paid, that's your test specifically to
test the paid version.

00:15:29.060 --> 00:15:33.799
And notice there's a free Java and -- it says
free Java here.

00:15:33.799 --> 00:15:38.329
That's not selected because you're not working
on the free version.

00:15:38.329 --> 00:15:43.069
So here, based on everything that we say in
the build script the IDE is aware that you

00:15:43.069 --> 00:15:48.489
have six different buy-ins and when you switch
to free debug it's going to automatically

00:15:48.489 --> 00:15:49.920
switch those here.

00:15:49.920 --> 00:15:54.249
So the IDE is really aware of all your configuration.

00:15:54.249 --> 00:15:57.019
A lot of this is working now.

00:15:57.019 --> 00:16:01.869
There are some things if you deal with buy-ins
-- if you deal with resources and flavor (indiscernible),

00:16:01.869 --> 00:16:08.699
we are going to fix that, but the point here
is that everything that you do in the build

00:16:08.699 --> 00:16:14.869
script to customize your application will
be understood by the IDE and that's very important.

00:16:14.869 --> 00:16:16.620
I'm not going to talk more about the build
session.

00:16:16.620 --> 00:16:21.120
I have a session at 9:00 a.m. on Friday only
about the build session and I encourage you

00:16:21.120 --> 00:16:23.420
to attend it.

00:16:23.420 --> 00:16:26.389
And now Tor is going to talk for us.

00:16:26.389 --> 00:16:27.920
&gt;&gt;Tor Norbye: All right.

00:16:27.920 --> 00:16:31.989
So I'm going to focus today on -- is my monitor
okay?

00:16:31.989 --> 00:16:37.290
I'm going to focus today on the areas where
Android Studio is different than Eclipse because

00:16:37.290 --> 00:16:41.279
there are many things that are the same, so
showing that wouldn't -- we're not trying

00:16:41.279 --> 00:16:43.689
to prove that we're done because we're not.

00:16:43.689 --> 00:16:45.970
There's many areas that are missing.

00:16:45.970 --> 00:16:50.749
So if I can bring up the screen, here you
can see the environment.

00:16:50.749 --> 00:16:54.929
And one of the, I think, most noticeable features
is when you're editing layouts you get this

00:16:54.929 --> 00:16:58.239
preview on the right and we have a little
bit of eye candy.

00:16:58.239 --> 00:17:03.209
We've got Romain Guy's device frame art integrated
so you can sort of see the device here.

00:17:03.209 --> 00:17:09.289
So if I switch, for example, to Galaxy Nexus
I can see that art and with drop shadows and

00:17:09.289 --> 00:17:10.289
everything.

00:17:10.289 --> 00:17:13.699
And if you don't like that, if you really
want your pixels back, which I understand,

00:17:13.699 --> 00:17:18.250
you can go to the options and turn off the
device frame so you can take all the space

00:17:18.250 --> 00:17:22.419
for the layout, but personally I just sit
there and look at the reflection, overlay

00:17:22.419 --> 00:17:24.259
and love it.

00:17:24.259 --> 00:17:28.710
[ Laughter ]
&gt;&gt;Tor Norbye: So obviously as you're editing

00:17:28.710 --> 00:17:30.220
you can kind of keep an eye on this.

00:17:30.220 --> 00:17:34.370
And note that as I'm moving the carat around
in the layout you can see the corresponding

00:17:34.370 --> 00:17:37.850
views getting selected in the layout preview.

00:17:37.850 --> 00:17:39.260
You can see what you're doing.

00:17:39.260 --> 00:17:43.250
And likewise I can actually click over here
to navigate around the XML, so it makes it

00:17:43.250 --> 00:17:47.510
easy to navigate around and know what the
different parts are.

00:17:47.510 --> 00:17:50.390
And just like in Eclipse we have the configuration
chooser up on top here.

00:17:50.390 --> 00:17:55.350
You saw me switch devices and you can switch
locales.

00:17:55.350 --> 00:17:58.950
This is what we showed in the keynote demo
this morning.

00:17:58.950 --> 00:18:02.920
And there's a theme to it, which is now a
dialogue so you can more quickly search for

00:18:02.920 --> 00:18:03.920
things.

00:18:03.920 --> 00:18:06.940
If I'm looking for dark action bar, for example,
it will find it right there and then I can

00:18:06.940 --> 00:18:10.070
click on it to choose it, for example.

00:18:10.070 --> 00:18:16.799
One of the really nice things about this XML
preview is that it's tied in with IntelliJ's

00:18:16.799 --> 00:18:19.610
XML model, which is really good at fault tolerance.

00:18:19.610 --> 00:18:24.169
So one of the nice things is if I, for example,
go and put a typo into this thing right here,

00:18:24.169 --> 00:18:28.660
into this switch, what you will see happen
is this widget disappeared because it's no

00:18:28.660 --> 00:18:33.750
longer valid, but the rest of the layout actually
completed because it's not starting a fresh

00:18:33.750 --> 00:18:34.750
render each time.

00:18:34.750 --> 00:18:37.840
It's sort of hey, I have an error node in
the dump.

00:18:37.840 --> 00:18:43.130
And this also shows the error panel, which
is showing up in the bottom right here.

00:18:43.130 --> 00:18:45.179
So I'm going to create a new layout.

00:18:45.179 --> 00:18:52.990
So to do that I can invoke the new menu, new
layout resource file.

00:18:52.990 --> 00:18:54.100
So -- oh, and it's locale.

00:18:54.100 --> 00:18:56.730
I'm going to switch locale back to English.

00:18:56.730 --> 00:19:02.400
So when I'm entering text here, let's say
I enter a button, you can see it's immediately

00:19:02.400 --> 00:19:04.360
telling me there are some problems here.

00:19:04.360 --> 00:19:06.480
So it's saying you need to insert a width
and a height.

00:19:06.480 --> 00:19:10.899
There are also links here, so I can click
on automatically add all missing attributes

00:19:10.899 --> 00:19:12.070
and they kind of just appear.

00:19:12.070 --> 00:19:15.919
So there are a bunch of error recovery links
right there.

00:19:15.919 --> 00:19:20.029
If there's a typo, for example, it will figure
out what you probably meant button, and it

00:19:20.029 --> 00:19:21.760
will fix it.

00:19:21.760 --> 00:19:24.220
If you use fragments -- let's do it.

00:19:24.220 --> 00:19:30.970
I'll add a fragment and we're going to need
sizes again.

00:19:30.970 --> 00:19:34.169
So for fragments it's saying, hey, you probably
want to have a class associated with this

00:19:34.169 --> 00:19:35.169
fragment, right?

00:19:35.169 --> 00:19:38.549
So I can invoke the chooser for that and pick
one.

00:19:38.549 --> 00:19:40.620
Countdown fragment, maybe.

00:19:40.620 --> 00:19:44.000
And now it's saying that maybe at design time
you want to have a layout because the whole

00:19:44.000 --> 00:19:47.740
point of fragments is it's a Java class and
that class can decide based on the time of

00:19:47.740 --> 00:19:52.440
day and locale and whatever, logic, whatever
to actually use, a design time you can pick

00:19:52.440 --> 00:19:53.720
different ones at different times.

00:19:53.720 --> 00:19:58.590
So I will pick a random one and now the layout
is using that fragment.

00:19:58.590 --> 00:20:03.820
You can see here in the layout this special
tools attribute, this is where we store metadata.

00:20:03.820 --> 00:20:05.600
You can safely ignore those.

00:20:05.600 --> 00:20:08.429
In fact, AAPT will also ignore them, so there's
not runtime benefit.

00:20:08.429 --> 00:20:15.380
This is how we put stuff in the model, and
we do the same thing in Eclipse for fragments.

00:20:15.380 --> 00:20:20.809
One more thing on the device art, we've also
integrated this with the screen shot action,

00:20:20.809 --> 00:20:26.399
so in the Android window I don't have a device
connected, but if I did, you could basically

00:20:26.399 --> 00:20:30.470
click on the screen shot from your live device,
get a screen shot and then add whatever art

00:20:30.470 --> 00:20:31.470
you want.

00:20:31.470 --> 00:20:33.080
All right.

00:20:33.080 --> 00:20:36.000
So let's switch to the layout editor.

00:20:36.000 --> 00:20:39.169
So I'm going to -- in fact, I'll switch over
to this layout right here.

00:20:39.169 --> 00:20:42.250
This is a simple form.

00:20:42.250 --> 00:20:44.130
So now we're in the layout editor.

00:20:44.130 --> 00:20:47.200
And I'll say right away we are not feature
complete here.

00:20:47.200 --> 00:20:49.520
Not everything that you had in Eclipse is
ready here.

00:20:49.520 --> 00:20:55.139
I will show you the few things where we are
ahead, and that would be grid layout support.

00:20:55.139 --> 00:20:59.770
So the grid layout support in our Eclipse
plug-in is very complete and it's much better

00:20:59.770 --> 00:21:00.809
here.

00:21:00.809 --> 00:21:06.260
As you can see, I can see the rows and columns
here and I can, for example, drag on these

00:21:06.260 --> 00:21:08.320
things to re-order them.

00:21:08.320 --> 00:21:15.120
If I want to pull in new widgets, here's the
palette and I get the predictable grid and

00:21:15.120 --> 00:21:17.429
I can put it between.

00:21:17.429 --> 00:21:20.570
If you're doing grid layout editing I would
already use this, but there are some other

00:21:20.570 --> 00:21:22.630
areas where we're still working on it.

00:21:22.630 --> 00:21:27.259
The good news about this preview, by the way,
is that they have a really good update mechanism.

00:21:27.259 --> 00:21:30.790
At least on some platforms it downloads a
small patch file and restarts the IDE so it

00:21:30.790 --> 00:21:36.049
takes 30 seconds, and we plan to use this
to have this be a rolling preview.

00:21:36.049 --> 00:21:37.880
We talked about every week.

00:21:37.880 --> 00:21:44.799
We're publicly committing right now to consider
our update interval.

00:21:44.799 --> 00:21:47.559
So that's the layout editor.

00:21:47.559 --> 00:21:48.830
Let's see.

00:21:48.830 --> 00:21:50.970
The next thing I want to show you is code
editing.

00:21:50.970 --> 00:21:57.419
So here's the feature we demoed this morning
in the keynote, and that is the resource folding.

00:21:57.419 --> 00:22:01.870
So one of the really cool features in IntelliJ
is they have this folding feature where it

00:22:01.870 --> 00:22:03.080
collapses code.

00:22:03.080 --> 00:22:08.660
So when you have a static interclass, you
have a run, one line for the override annotation,

00:22:08.660 --> 00:22:11.990
another line for the public void run, a couple
more lines for the opening and close breaks,

00:22:11.990 --> 00:22:14.440
they will fold that all into a single line.

00:22:14.440 --> 00:22:17.790
So we've just used that feature and combined
it with Android's resources to do what you

00:22:17.790 --> 00:22:19.640
see here.

00:22:19.640 --> 00:22:23.720
This is not the default color that we have
for folding regions, but for the dark theme

00:22:23.720 --> 00:22:26.990
the default one was a bit hard to spot for
the keynote with the large screen so we made

00:22:26.990 --> 00:22:28.019
it more blue.

00:22:28.019 --> 00:22:35.130
But in general you can see here -- let me
click here to open all folds.

00:22:35.130 --> 00:22:39.840
So this is what the code really looks like.

00:22:39.840 --> 00:22:44.710
So you don't have to know the key binding
I just hit because by default you open a file

00:22:44.710 --> 00:22:46.200
and it does one of these get string calls.

00:22:46.200 --> 00:22:47.510
We just show the string.

00:22:47.510 --> 00:22:52.110
When you hover over it you basically get to
see the real code.

00:22:52.110 --> 00:22:53.110
Like this.

00:22:53.110 --> 00:22:54.470
And take a look at this last one here.

00:22:54.470 --> 00:22:57.299
I'm going to jump into this resource.

00:22:57.299 --> 00:23:01.530
And you can see that what this is doing is
it actually has formatting arguments.

00:23:01.530 --> 00:23:03.360
All right?

00:23:03.360 --> 00:23:07.000
And when I go back and I look at the folded
string, you can see that it's showing the

00:23:07.000 --> 00:23:10.830
actual parameters that we have in the code,
sort of in line with the strings.

00:23:10.830 --> 00:23:15.480
So it makes it really easy to see what logically
your code is doing.

00:23:15.480 --> 00:23:20.230
So now you may wonder, okay, so have you hard
coded this for get string?

00:23:20.230 --> 00:23:21.409
We have not.

00:23:21.409 --> 00:23:28.510
So if I look for -- let's see -- set text,
for example, what we do is we use an annotation

00:23:28.510 --> 00:23:29.580
for this.

00:23:29.580 --> 00:23:33.440
So now I'm going to jump into the Android
framework source code.

00:23:33.440 --> 00:23:36.700
Hopefully there's nothing proprietary here.

00:23:36.700 --> 00:23:39.899
If you look, this is the TextView class.

00:23:39.899 --> 00:23:42.640
And there's a new annotation on here and this
is a bit TBD.

00:23:42.640 --> 00:23:45.881
We haven't actually integrated this, but I
think there is consensus that this is what

00:23:45.881 --> 00:23:46.881
we're going to do.

00:23:46.881 --> 00:23:49.059
This is a resource data annotation.

00:23:49.059 --> 00:23:53.139
And it's saying, hey, this integer parameter
right here, we expect that to be a resource

00:23:53.139 --> 00:23:54.139
in.

00:23:54.139 --> 00:23:57.580
So that's the actual thing that the code folding
is using is this method.

00:23:57.580 --> 00:24:02.240
So when you call set text, even if you don't
call get string, if you just pass r.string.fu

00:24:02.240 --> 00:24:04.570
it will actually do this resolution.

00:24:04.570 --> 00:24:09.870
So since we're talking about annotations,
let me show you a few others that we're adding.

00:24:09.870 --> 00:24:15.570
If I go to context, you can see not null.

00:24:15.570 --> 00:24:23.539
We're also adding nullability annotations,
and IntelliJ can actually show those.

00:24:23.539 --> 00:24:31.330
So if I open up the project configuration
for my SDK, there's this annotations setting

00:24:31.330 --> 00:24:34.429
where we have basically bundled Android annotations.

00:24:34.429 --> 00:24:40.129
So it can basically read annotations from
an external file, not part of the SDK, and

00:24:40.129 --> 00:24:44.070
that's how we can actually take these annotations
and associate them with older SDKs and it's

00:24:44.070 --> 00:24:45.529
using this on the fly.

00:24:45.529 --> 00:24:51.509
So if I now jump down to the bottom of the
file here -- let's see here, for example,

00:24:51.509 --> 00:24:55.779
this line is highlighted because it shows
that get current focus, which is an inherited

00:24:55.779 --> 00:25:00.700
method from the framework, can return null
and therefore this line could potentially

00:25:00.700 --> 00:25:04.799
return -- cause a null pointer exception.

00:25:04.799 --> 00:25:10.760
If I jump into the other annotation here,
service name, I'm going to jump to source

00:25:10.760 --> 00:25:11.760
for that.

00:25:11.760 --> 00:25:18.029
And this is making a local annotation saying
that service name has to be one of these identifiers.

00:25:18.029 --> 00:25:22.710
So in fact, if I go back to my Android Studio,
you can see we have another annotation here

00:25:22.710 --> 00:25:28.009
saying that you're passing in the right to
set layout direction, but it's the wrong right.

00:25:28.009 --> 00:25:34.740
Even though these are both ints and the compiler
is happy to do it for you, we know it's wrong.

00:25:34.740 --> 00:25:39.529
And that's because again we have this information
now in this external file that basically records

00:25:39.529 --> 00:25:40.529
what constants are allowed for integer parameters.

00:25:40.529 --> 00:25:41.669
At that's in this external file that basically
records what constants are allowed for integer

00:25:41.669 --> 00:25:47.460
parameters, and in the case of the system
service here, strings.

00:25:47.460 --> 00:25:49.530
And we use this not just for semantic analysis.

00:25:49.530 --> 00:25:53.259
If I, for example, go in to get system service
and press control space for completion, you

00:25:53.259 --> 00:25:54.720
can see it notes the strings there, too.

00:25:54.720 --> 00:25:57.549
So especially for integer APIs, it's kind
of nice.

00:25:57.549 --> 00:26:01.200
You don't have to know exactly what the strings
are.

00:26:01.200 --> 00:26:09.909
At this point, I'm going to jump in and show
you a few other IntelliJ editor features.

00:26:09.909 --> 00:26:15.909
So when I was showing you the resources earlier
here, we have references to notification icons

00:26:15.909 --> 00:26:18.549
and those are being previewed on the left.

00:26:18.549 --> 00:26:20.179
This is the actual size we show them in.

00:26:20.179 --> 00:26:22.610
I think we max them out at 14 pixels.

00:26:22.610 --> 00:26:26.240
In the keynote we had them bigger to be visible,
but this is what they'll get scaled down to.

00:26:26.240 --> 00:26:28.289
So these graphics -- these aren't just for
icons.

00:26:28.289 --> 00:26:34.100
If you have a 128 by 128 icon, it will just
be shoved into this editor margin.

00:26:34.100 --> 00:26:35.799
And colors are previewed as well.

00:26:35.799 --> 00:26:42.510
And if you open up the show documentation
view, I think it's F1.

00:26:42.510 --> 00:26:46.950
If not, we have an expert on stage -- F1,
yes.

00:26:46.950 --> 00:26:48.730
This is the documentation for this resource.

00:26:48.730 --> 00:26:52.399
We show you all the translations right there
in the popup.

00:26:52.399 --> 00:26:55.970
And if I do it on an icon, I can see all the
icon versions.

00:26:55.970 --> 00:27:02.519
And I think -- yes, it's computing what the
actual pixel sizes are at the different densities.

00:27:02.519 --> 00:27:06.980
All right.

00:27:06.980 --> 00:27:09.169
So we've also integrated lint.

00:27:09.169 --> 00:27:14.049
There was already a lint integration in IntelliJ
but it now does more the inspections.

00:27:14.049 --> 00:27:19.049
And lint actually does analysis on both XML,
Java and class files.

00:27:19.049 --> 00:27:22.020
And the last part is tricky because one of
the things you'll discover in Android Studio

00:27:22.020 --> 00:27:25.429
is it doesn't do background compilation in
the way you're used to.

00:27:25.429 --> 00:27:28.070
There's an explicit compile action.

00:27:28.070 --> 00:27:31.399
So because of that, lint doesn't have the
class files to look at.

00:27:31.399 --> 00:27:40.029
So we've implemented the most important one,
API check, using IntelliJ's own AST APIs.

00:27:40.029 --> 00:27:46.720
And so if I look for API check, here's an
example of this.

00:27:46.720 --> 00:27:52.519
So if I hover over this, it's telling me that
this API requires 14, and you're current min

00:27:52.519 --> 00:27:56.290
SDK is 7, and that's a potential runtime problem.

00:27:56.290 --> 00:28:01.970
So what you can do is use an annotation to
basically say you know this method will only

00:28:01.970 --> 00:28:07.090
be called when we've already validated that
the platform is at least 14.

00:28:07.090 --> 00:28:11.159
The way people typically do that is what you
see on the next slide.

00:28:11.159 --> 00:28:13.190
You actually have an SDK check.

00:28:13.190 --> 00:28:17.139
And it was very tricky to do this with sort
of flow analysis in the class file but it

00:28:17.139 --> 00:28:18.139
was easy with AST.

00:28:18.139 --> 00:28:21.549
So this is something we haven't run in Eclipse
or the command line lint yet, but in IntelliJ

00:28:21.549 --> 00:28:29.730
it knows not to flag these two lines because
they are inside this version check right there.

00:28:29.730 --> 00:28:32.659
We also have a couple of newlin checks.

00:28:32.659 --> 00:28:35.360
Is there a talk on the right-to-left text
stuff here at I/O?

00:28:35.360 --> 00:28:41.749
If not, at least we have a couple of new lint
checks related to right-to-left and they are

00:28:41.749 --> 00:28:47.529
disabled by default but they're a bit experimental,
but if you're trying to target API 17 and

00:28:47.529 --> 00:28:51.029
you're doing right-to-left text, you can check
out the lint options.

00:28:51.029 --> 00:28:52.730
So in the search box you can just search for
lint.

00:28:52.730 --> 00:28:54.389
You'll find all the inspections.

00:28:54.389 --> 00:28:57.899
And you can see the ones that don't have a
check box next to them are off by default

00:28:57.899 --> 00:29:00.299
and you may want to turn them on.

00:29:00.299 --> 00:29:06.899
For the basic Java code analysis in IntelliJ,
there are some off by default that we've gone

00:29:06.899 --> 00:29:08.059
and bumped up.

00:29:08.059 --> 00:29:12.770
On our team, for the tools, for example, we
make override annotations mandatory.

00:29:12.770 --> 00:29:17.360
You can't actually override without setting
the override annotation.

00:29:17.360 --> 00:29:21.120
All right.

00:29:21.120 --> 00:29:26.320
This part I want to show you a couple of IntelliJ
features that Dmitri didn't get into.

00:29:26.320 --> 00:29:30.929
So the first one is scopes.

00:29:30.929 --> 00:29:35.450
So here I have a library project, and I can
go ahead and create -- and I'm using action

00:29:35.450 --> 00:29:40.080
brochure lock because I'm trying to have an
action bar in an older version of Android.

00:29:40.080 --> 00:29:45.070
So I can go ahead and open up the scopes feature.

00:29:45.070 --> 00:29:49.280
And I can go ahead and make a new scope, a
new local scope and I'm going to call it action

00:29:49.280 --> 00:29:51.429
bar.

00:29:51.429 --> 00:30:02.990
And then I can say that I want this to basically
match all of action bar -- I just closed the

00:30:02.990 --> 00:30:04.309
dialogue.

00:30:04.309 --> 00:30:08.299
Sorry about that.

00:30:08.299 --> 00:30:14.559
And now I can basically say that I want to
add everything from -- I don't know, I'm making

00:30:14.559 --> 00:30:15.559
a mistake here.

00:30:15.559 --> 00:30:16.559
Project.

00:30:16.559 --> 00:30:17.559
Okay.

00:30:17.559 --> 00:30:20.809
I'm going to choose everything in the action
bar Sherlock and include recursively.

00:30:20.809 --> 00:30:22.309
So now we have a new scope.

00:30:22.309 --> 00:30:32.440
Now I can go to file colors, and I can basically
add a new color scope for my new scope.

00:30:32.440 --> 00:30:37.690
So I'm going to make everything related to
action bar orange.

00:30:37.690 --> 00:30:40.419
And now if you look in the project explorer,
everything here is orange.

00:30:40.419 --> 00:30:43.779
And if I open these files you can see the
tabs are orange.

00:30:43.779 --> 00:30:46.429
And in, in fact, in the recent file dialogue,
things are orange.

00:30:46.429 --> 00:30:50.500
So this is really good if you have projects
that you're trying to use and they're in your

00:30:50.500 --> 00:30:52.700
work space but you don't want it accidentally
edit them.

00:30:52.700 --> 00:30:55.440
You're jumping into resource and you find,
ah, this is actually in the library.

00:30:55.440 --> 00:30:56.440
I can't change this.

00:30:56.440 --> 00:30:59.419
This feature is really useful for that.

00:30:59.419 --> 00:31:03.399
My favorite feature in IntelliJ is open symbol.

00:31:03.399 --> 00:31:07.809
So if you are exploring a new API, if you're
not particularly familiar with something in

00:31:07.809 --> 00:31:13.009
an API, open symbol lets you jump to a method
name or field name.

00:31:13.009 --> 00:31:18.509
So if you're not sure which class to look
in, instead of searching with Google, which

00:31:18.509 --> 00:31:21.940
you should do, you can use open symbol here.

00:31:21.940 --> 00:31:27.369
So I'm going to use the go to action feature
that Dmitry showed you.

00:31:27.369 --> 00:31:31.150
So if you don't know any key binding, basically
you can open this dialogue and just search

00:31:31.150 --> 00:31:34.340
for it and it will basically match.

00:31:34.340 --> 00:31:35.340
Open symbol.

00:31:35.340 --> 00:31:36.340
Okay.

00:31:36.340 --> 00:31:37.340
So this is the open symbol action.

00:31:37.340 --> 00:31:41.549
And now let's say I want to find out the parent
activity name or something like that.

00:31:41.549 --> 00:31:46.570
So I can type parent activity name.

00:31:46.570 --> 00:31:50.909
And actually I want to go to this one.

00:31:50.909 --> 00:31:58.039
So nav util contains a method called get parent
activity name (indiscernible) in the context.

00:31:58.039 --> 00:32:05.850
Another cool feature is injecting languages.

00:32:05.850 --> 00:32:10.490
So here I'm showing a method called inject.

00:32:10.490 --> 00:32:15.740
And so if you look carefully you can see there's
a green shine to this area.

00:32:15.740 --> 00:32:20.399
That's telling me that it knows there's a
sort of different language inside this string.

00:32:20.399 --> 00:32:24.120
And if I open up the quick dialogue, it says
this is a regular expression and I can, for

00:32:24.120 --> 00:32:29.190
example, open a regular expression tester
and I can type in text to see if it matches.

00:32:29.190 --> 00:32:31.350
And so --
[ Applause ]

00:32:31.350 --> 00:32:38.529
&gt;&gt;Tor Norbye: -- so on the next line, you
can see I'm actually -- I'm going to go on

00:32:38.529 --> 00:32:39.529
the third line here.

00:32:39.529 --> 00:32:41.789
This looks like XML; right?

00:32:41.789 --> 00:32:45.669
I can say inject language and I can pick the
language I know this is.

00:32:45.669 --> 00:32:48.249
I'm going to say this is XML.

00:32:48.249 --> 00:32:52.340
And now this is going to be treated as XML.

00:32:52.340 --> 00:32:55.289
So, in fact, let me make a mistake in the
XML.

00:32:55.289 --> 00:33:00.009
So now it's saying, hey, this looks invalid
to me.

00:33:00.009 --> 00:33:03.499
It's saying there's no attribute value here;
right?

00:33:03.499 --> 00:33:08.691
So it's basically validating my string escaped
as XML.

00:33:08.691 --> 00:33:12.970
And I believe this is really useful when you,
for example, are doing database queries.

00:33:12.970 --> 00:33:17.690
I think IntelliJ has a database plug-in so
if I were to treat this as SQL, for example,

00:33:17.690 --> 00:33:21.539
you can get additional language help that
way.

00:33:21.539 --> 00:33:23.420
And I am almost out of time.

00:33:23.420 --> 00:33:29.070
The last tip I'll give you is that in a lot
of dialogues, in the IDE, you can just start

00:33:29.070 --> 00:33:30.070
typing.

00:33:30.070 --> 00:33:31.070
It's not going to tell you you can do this.

00:33:31.070 --> 00:33:32.700
It's just something you know.

00:33:32.700 --> 00:33:39.499
So my favorite key binding is, other than
alt enter, is control T. Control T is basically

00:33:39.499 --> 00:33:42.149
the action to refactor this.

00:33:42.149 --> 00:33:47.620
So if you can't remember the key binding for,
you know, renaming or moving or whatever,

00:33:47.620 --> 00:33:49.750
just control T, refactor this.

00:33:49.750 --> 00:33:51.840
And so here's this dialogue.

00:33:51.840 --> 00:33:54.259
Notice that there's numbers at beginning of
these items.

00:33:54.259 --> 00:33:57.220
I can just hit the number on the keyboard
to invoke that action but more importantly

00:33:57.220 --> 00:33:58.220
I can just start typing.

00:33:58.220 --> 00:34:02.830
So if I type change -- actually, that was
a bad word.

00:34:02.830 --> 00:34:03.830
Okay.

00:34:03.830 --> 00:34:04.830
Constant.

00:34:04.830 --> 00:34:07.789
If I try typing C-O-N, you can see it matches.

00:34:07.789 --> 00:34:12.080
So it's a very quick way to navigate and this
works in lots of places.

00:34:12.080 --> 00:34:18.660
For example, if I want to go create a new
resource folder here, add new resource directory,

00:34:18.660 --> 00:34:22.340
if I, for example, want to go and add a language
to my animation folder, let's change that

00:34:22.340 --> 00:34:24.960
to layout instead because I like layouts.

00:34:24.960 --> 00:34:27.240
Oh, that's the name.

00:34:27.240 --> 00:34:28.940
Layouts.

00:34:28.940 --> 00:34:34.080
If I add in a new language, you can see we
have region art here.

00:34:34.080 --> 00:34:39.670
So if I just start typing Norway, you can
see it's now matching from the whole list

00:34:39.670 --> 00:34:44.110
of hundreds of regions down to the region
that I'm trying to add here.

00:34:44.110 --> 00:34:46.080
And then I can add my resource photo like
that.

00:34:46.080 --> 00:34:47.120
All right.

00:34:47.120 --> 00:34:51.880
I'm out of time but there's more stuff, so,
you know, keep looking at our blogs and posts

00:34:51.880 --> 00:34:54.050
for additional tips.

00:34:54.050 --> 00:34:58.170
[ Applause ]
&gt;&gt;Tor Norbye: Thanks.

00:34:58.170 --> 00:35:03.320
&gt;&gt;Xavier Ducrohet: Thank you, Tor.

00:35:03.320 --> 00:35:08.940
So one other thing we wanted to do is to cover
more than just, like, regular Android applications.

00:35:08.940 --> 00:35:12.450
I mean in the context of Android application.

00:35:12.450 --> 00:35:17.390
A lot of your users are going to have more
than one device that have a phone and a tablet.

00:35:17.390 --> 00:35:20.910
And if they install your application on their
device they are going to expect those two

00:35:20.910 --> 00:35:23.530
installations to be synced together.

00:35:23.530 --> 00:35:29.610
So we wanted to add support to really help
you build applications that are connected

00:35:29.610 --> 00:35:30.800
like that.

00:35:30.800 --> 00:35:35.950
And so I'd like to invite on stage Brad Abrams,
the PM for app engine, to tell you about this

00:35:35.950 --> 00:35:37.090
feature.

00:35:37.090 --> 00:35:40.500
&gt;&gt;Brad Abrams: Awesome.

00:35:40.500 --> 00:35:47.340
So the best Android apps are powered by the
cloud, and customers tell us that google's

00:35:47.340 --> 00:35:51.210
cloud platform is really ideal for mobile
back-ends.

00:35:51.210 --> 00:35:57.690
And that's why we were very happy to invest
in the Android Studio project.

00:35:57.690 --> 00:36:04.430
So what I thought we'd do is actually cloud
connect the stopwatch application that you

00:36:04.430 --> 00:36:05.700
saw earlier.

00:36:05.700 --> 00:36:12.060
So what we're going to do in just a couple
of minutes is build out a completely synchronized

00:36:12.060 --> 00:36:13.290
stopwatch application.

00:36:13.290 --> 00:36:15.710
So somebody at the front of the race can have
the stopwatch.

00:36:15.710 --> 00:36:21.250
Someone at the end of the race can see exactly
start/stop time of that.

00:36:21.250 --> 00:36:25.620
So in order to do that, one stopwatch will
click start.

00:36:25.620 --> 00:36:29.560
That will send a rest request up to our server
running in app engine.

00:36:29.560 --> 00:36:33.760
That will send a message to GCM.

00:36:33.760 --> 00:36:35.020
Beeping is going on.

00:36:35.020 --> 00:36:41.220
GCM will send a tickle down to another Android
application, and then that will do a rest

00:36:41.220 --> 00:36:45.150
request back up to app engine and get the
actual state.

00:36:45.150 --> 00:36:50.520
So let's flip over to the demo and see that,
which is here.

00:36:50.520 --> 00:36:57.510
So what I have is the Android Studio, and
I have the exact project that we've been using,

00:36:57.510 --> 00:36:58.510
the stopwatch app.

00:36:58.510 --> 00:37:03.150
And I thought I'd start exactly where Tor
left off in the keynote today.

00:37:03.150 --> 00:37:05.730
Tor did a great job in the keynote, didn't
he?

00:37:05.730 --> 00:37:07.890
It was pretty good?

00:37:07.890 --> 00:37:10.820
[ Applause ]
&gt;&gt;Brad Abrams: So let's start where he left

00:37:10.820 --> 00:37:11.820
off.

00:37:11.820 --> 00:37:14.080
We'll come in and say generate back end.

00:37:14.080 --> 00:37:19.440
So what this is going to do is -- those values
you can fill in later.

00:37:19.440 --> 00:37:25.030
What this is going to do is generate for us
a project, a server project that you can easily

00:37:25.030 --> 00:37:30.290
go deploy to app engine that already knows
about this client side code.

00:37:30.290 --> 00:37:37.751
So if we look in this server project, there's
a few pieces of code here, and you see we

00:37:37.751 --> 00:37:39.070
have a couple of end points.

00:37:39.070 --> 00:37:41.850
We have a device end point and a messaging
end point.

00:37:41.850 --> 00:37:46.600
The device end point encapsulates all the
plumbing needed to do GCM.

00:37:46.600 --> 00:37:47.740
Google Cloud Messaging.

00:37:47.740 --> 00:37:51.780
How about of you have actually done GCM before?

00:37:51.780 --> 00:37:55.860
And there was probability some drudgery in
getting that to work especially on the server.

00:37:55.860 --> 00:37:59.830
So we've taken care of all of that for you
and that's encapsulated in there.

00:37:59.830 --> 00:38:05.060
What we want to do now is add our own custom
end point that's going to be exposed as a

00:38:05.060 --> 00:38:07.020
custom interface.

00:38:07.020 --> 00:38:17.040
So in order to do that, I'm just going to
copy in a stopwatch state class, and this

00:38:17.040 --> 00:38:18.120
is a POJO.

00:38:18.120 --> 00:38:20.390
This is a plain old Java object.

00:38:20.390 --> 00:38:26.520
I've marked it up a little bit, but all it's
storing really is three bits of information:

00:38:26.520 --> 00:38:32.480
the device ID, the time stamp, and then whether
or not we're running or not.

00:38:32.480 --> 00:38:36.840
So we've got this -- and you can see it's
just got basic accessories on it.

00:38:36.840 --> 00:38:42.560
Now what we want to do is take this and we
want to generate a rest interface based on

00:38:42.560 --> 00:38:44.030
that POJO.

00:38:44.030 --> 00:38:49.470
So what we're going to do is just generate
a cloud end point for that.

00:38:49.470 --> 00:38:55.630
And if we flip over into this end point, you
can see we've already got the code for listing

00:38:55.630 --> 00:39:02.250
all the entities for doing -- that includes
paging, by the way, in case you have a lot

00:39:02.250 --> 00:39:03.510
of these.

00:39:03.510 --> 00:39:08.660
You can get the stopwatch state, you can insert
the stopwatch state and whatnot.

00:39:08.660 --> 00:39:10.250
So all of that is already done for you.

00:39:10.250 --> 00:39:12.450
It stores the data in app engines.

00:39:12.450 --> 00:39:15.110
No SQL data store.

00:39:15.110 --> 00:39:19.560
But now what we want to do is go and add a
little bit more logic into here, so I'm just

00:39:19.560 --> 00:39:27.270
going grab import, and I'm going to do some
of the GCM code.

00:39:27.270 --> 00:39:33.220
So what we want to do is when there's an insert
-- so we'll come down here to insert.

00:39:33.220 --> 00:39:37.190
Right now when we're inserting, we're just
storing the data in data store.

00:39:37.190 --> 00:39:42.890
But what we need to do in addition to that
is send a tickle out over GCM.

00:39:42.890 --> 00:39:48.590
So we have some utility code for doing that,
that I'll put in here, and we'll post this

00:39:48.590 --> 00:39:51.060
code later so you can take a look at it.

00:39:51.060 --> 00:39:57.870
And then we just need to add a little bit
of code to actually do the send.

00:39:57.870 --> 00:40:00.870
So right after the -- we persist it.

00:40:00.870 --> 00:40:05.920
What we're going to do is get -- enumerate
through all the devices that have registered.

00:40:05.920 --> 00:40:10.560
Now, we may have a hundred people with a stopwatch
application wanting to be updated in real

00:40:10.560 --> 00:40:11.560
time.

00:40:11.560 --> 00:40:13.150
So we enumerate through all of those.

00:40:13.150 --> 00:40:18.860
We just check to see if the -- if the one
we've gotten to is the same one that sent

00:40:18.860 --> 00:40:22.070
the request, so we don't want to reset ourselves.

00:40:22.070 --> 00:40:25.900
So we exclude that one, and then we just send
that tickle.

00:40:25.900 --> 00:40:33.930
And then to make this compile, I need to -- throws
I/O exception.

00:40:33.930 --> 00:40:38.610
And it's nice to decorate that because actually
we're going to propagate even exceptions and

00:40:38.610 --> 00:40:43.340
errors all the way down to the Android app,
as you'll see in a little bit.

00:40:43.340 --> 00:40:47.520
So we basically got the server side of our
application done, and you can see it's done

00:40:47.520 --> 00:40:53.500
in the same IDE, in the same language, very
easy, seamless to move between that.

00:40:53.500 --> 00:40:57.380
Now what we can do is come in and upload this
application to app engine.

00:40:57.380 --> 00:41:00.650
Go ahead and deploy it directly from the IDE.

00:41:00.650 --> 00:41:06.050
In the interest of time, I've already deployed
that for us a little bit this morning.

00:41:06.050 --> 00:41:08.450
So let me bring that up.

00:41:08.450 --> 00:41:13.160
What you'll get by default with this project
is a simple test page.

00:41:13.160 --> 00:41:15.430
It shows you all the devices that have registered.

00:41:15.430 --> 00:41:18.450
In this case, nobody has registered yet.

00:41:18.450 --> 00:41:21.060
And then it will let me send a message.

00:41:21.060 --> 00:41:29.300
But to explore those end points, if you go
to underscore ah/api/explore, you can actually

00:41:29.300 --> 00:41:33.560
explore all the interfaces we just defined.

00:41:33.560 --> 00:41:40.260
So you can see there's the rest interface
for C2DM and here's the stopwatch one we just

00:41:40.260 --> 00:41:41.260
added.

00:41:41.260 --> 00:41:42.990
I can come and interact with this.

00:41:42.990 --> 00:41:45.700
I can test authentication.

00:41:45.700 --> 00:41:49.050
You see the rest responses and whatnot I get
out of here.

00:41:49.050 --> 00:41:53.541
So this is a good way to make sure your server
side logic is working exactly the way you

00:41:53.541 --> 00:41:56.400
expect before you start moving to the client.

00:41:56.400 --> 00:41:57.450
Okay.

00:41:57.450 --> 00:42:01.930
So back in the client, what we need to do
now, we have our rest interface.

00:42:01.930 --> 00:42:04.650
We need to be able to call from the client.

00:42:04.650 --> 00:42:08.700
So in order to do that I'm going to come back
in here and I'm going to generate a client

00:42:08.700 --> 00:42:09.880
library.

00:42:09.880 --> 00:42:16.750
And what this is going to do is take the same
discovery document that we -- that powers

00:42:16.750 --> 00:42:22.600
that API explorer and use that to generate
strongly tied to Java code that's Android

00:42:22.600 --> 00:42:27.860
optimized, mobile aware code, and stick that
in our client project for us.

00:42:27.860 --> 00:42:33.120
So to make it very seamless for us to access
this server code.

00:42:33.120 --> 00:42:36.080
So now you see it created this new folder.

00:42:36.080 --> 00:42:38.510
We're back in the client side of the app.

00:42:38.510 --> 00:42:41.140
It created in new folder with these three
end points.

00:42:41.140 --> 00:42:42.480
On it.

00:42:42.480 --> 00:42:45.630
Now let's take a look at how we go and call
that.

00:42:45.630 --> 00:42:53.890
So I've just made a few modifications to the
code to be able to call the end point we defined,

00:42:53.890 --> 00:42:58.670
and we'll go ahead and overwrite those.

00:42:58.670 --> 00:43:04.060
And the main thing that we just did, we added
some helper class, but the main thing we did

00:43:04.060 --> 00:43:09.540
is make sure all the network operations happen
on a background thread.

00:43:09.540 --> 00:43:13.840
So either by spinning up a thread or, in our
case, we're using an async worker so that

00:43:13.840 --> 00:43:20.540
ensures as I'm doing that network traffic,
the UI is not hanging and freezing and whatnot.

00:43:20.540 --> 00:43:22.650
So that's that basic code.

00:43:22.650 --> 00:43:27.000
Now, the last bit is I just need to come in
and wire it up.

00:43:27.000 --> 00:43:30.350
So when I hit start and stop, the actual methods
get called.

00:43:30.350 --> 00:43:36.830
So I've already got a handy dandy added to
my method this send state with end point,

00:43:36.830 --> 00:43:39.590
and you can see it's grabbing the current
time.

00:43:39.590 --> 00:43:42.090
So I'm actually going to take the current
time.

00:43:42.090 --> 00:43:47.470
I'm going to send whether or not this is running
and then my ID.

00:43:47.470 --> 00:43:48.980
And this is going to send it up.

00:43:48.980 --> 00:43:52.340
And notice I call that in this method startstop.

00:43:52.340 --> 00:43:57.010
So whenever I hit start or stop I do a rest
request up to the server.

00:43:57.010 --> 00:43:59.640
So I think we've got it basically working.

00:43:59.640 --> 00:44:01.940
You guys want to see this thing running live?

00:44:01.940 --> 00:44:03.230
Okay.

00:44:03.230 --> 00:44:04.230
So let's go.

00:44:04.230 --> 00:44:08.110
I think I hit this.

00:44:08.110 --> 00:44:09.440
Okay.

00:44:09.440 --> 00:44:11.900
So I've got two phones here.

00:44:11.900 --> 00:44:12.900
Whoop.

00:44:12.900 --> 00:44:14.020
That one can't go yet.

00:44:14.020 --> 00:44:17.840
So the first thing I want to show you -- are
we seeing it?

00:44:17.840 --> 00:44:18.840
Yeah.

00:44:18.840 --> 00:44:22.360
The first thing I want to show you is when
I launch this app, by default the project

00:44:22.360 --> 00:44:27.880
that comes with Android Studio, it will give
you this registration screen.

00:44:27.880 --> 00:44:31.710
This is your indication that the GCM registration
was successful.

00:44:31.710 --> 00:44:36.650
You're able to contact your app engine back-end
and it was able to register this device ID

00:44:36.650 --> 00:44:37.650
with GCM.

00:44:37.650 --> 00:44:41.410
Obviously when you go to deploy this app,
you can remove this screen.

00:44:41.410 --> 00:44:43.290
So we've registered.

00:44:43.290 --> 00:44:45.130
Hopefully they're both up.

00:44:45.130 --> 00:44:47.620
Let's reset and start this one.

00:44:47.620 --> 00:44:48.620
Okay.

00:44:48.620 --> 00:44:52.360
Notice when I started this one, the other
one stopped -- started, and when I because

00:44:52.360 --> 00:44:56.610
this one, this one pauses at exactly the same
time.

00:44:56.610 --> 00:45:00.230
Pretty cool, huh?

00:45:00.230 --> 00:45:08.020
[ Applause ]
&gt;&gt;&gt; So let me just switch back here.

00:45:08.020 --> 00:45:14.930
And one more slide to leave you with.

00:45:14.930 --> 00:45:19.170
We're very excited on the cloud team to support
Android Studio.

00:45:19.170 --> 00:45:23.520
As Xav mentioned, we've done the work to make
sure you can do builds of even the server

00:45:23.520 --> 00:45:30.380
side stuff outside of Android Studio, so you
can do it in your build tool of choice.

00:45:30.380 --> 00:45:34.440
And you can find more information about the
cloud at that URL.

00:45:34.440 --> 00:45:38.990
And I'm giving a little bit longer version
of the talk later at this place.

00:45:38.990 --> 00:45:39.990
So love to see you there.

00:45:39.990 --> 00:45:40.990
Thanks.

00:45:40.990 --> 00:45:46.300
[ Applause ]
&gt;&gt;Xavier Ducrohet: Thank you, Brad.

00:45:46.300 --> 00:45:50.910
So, you know, it's an Android idea.

00:45:50.910 --> 00:45:55.180
We're going to add a lot more features, including
features like the cloud stuff.

00:45:55.180 --> 00:45:59.490
That's not where I wanted to go.

00:45:59.490 --> 00:46:05.450
So we're still (inaudible) Eclipse and I want
to show you a feature that's new in Eclipse

00:46:05.450 --> 00:46:06.590
that about bring to ID.

00:46:06.590 --> 00:46:13.662
You saw during the keynote we translation
on the play console, and I want to show you

00:46:13.662 --> 00:46:14.820
that now.

00:46:14.820 --> 00:46:20.370
So here -- so this is my account, you know,
and I have an app.

00:46:20.370 --> 00:46:22.160
It's called sample app.

00:46:22.160 --> 00:46:25.960
And I can create a new translation.

00:46:25.960 --> 00:46:29.810
So I already have some French translation
that are ready to go but I'm going to create

00:46:29.810 --> 00:46:31.330
a new version.

00:46:31.330 --> 00:46:34.940
I'll call that test.

00:46:34.940 --> 00:46:37.720
My original translation is in English.

00:46:37.720 --> 00:46:38.720
Continue.

00:46:38.720 --> 00:46:40.210
All right.

00:46:40.210 --> 00:46:42.800
And here I can use the plug-in.

00:46:42.800 --> 00:46:46.880
If you have a complex project, you're going
to have a lot of strings and you probably

00:46:46.880 --> 00:46:52.760
don't want to go them and upload them manually
so generally in the plug-in you can say use

00:46:52.760 --> 00:46:56.150
plug-in and then you're told what to do, which
is useful.

00:46:56.150 --> 00:47:00.730
And then you can to Eclipse where we have
this new plug-in.

00:47:00.730 --> 00:47:05.640
It's not part of the bundle, the bundle that
we have with ADT and Eclipse.

00:47:05.640 --> 00:47:06.640
It's available.

00:47:06.640 --> 00:47:09.780
If you go to developer.android.com you have
the instruction right next to the ADT instruction

00:47:09.780 --> 00:47:11.640
to install it.

00:47:11.640 --> 00:47:18.740
And from here you can very easily -- I think
from here translation manager, you can just

00:47:18.740 --> 00:47:21.710
do request translation.

00:47:21.710 --> 00:47:24.110
So I already -- there you go.

00:47:24.110 --> 00:47:29.290
So I already logged in with my same account,
and it discovered that I had my, you know,

00:47:29.290 --> 00:47:31.640
test project that is waiting in my browser.

00:47:31.640 --> 00:47:38.290
And so I can just click next, and then it
knows all the strings that I have so you can

00:47:38.290 --> 00:47:42.970
go and look and make sure those are the strings
that you want and then you just upload them.

00:47:42.970 --> 00:47:47.750
In that case here, just a single string, but
if you had a lot of string file, it would

00:47:47.750 --> 00:47:50.130
just upload all of them, which is really convenient.

00:47:50.130 --> 00:47:56.250
And when you finish, you go back into the
console here, you click continue, and then

00:47:56.250 --> 00:48:01.120
you say, well, I want to translate them in
German, for instance.

00:48:01.120 --> 00:48:04.730
You click okay.

00:48:04.730 --> 00:48:06.880
And then you choose your translation.

00:48:06.880 --> 00:48:12.620
And then you choose some translator.

00:48:12.620 --> 00:48:16.340
And then you click confirm, and then you get,
you know, a week later, your translation.

00:48:16.340 --> 00:48:18.220
And then of course we want same thing; right?

00:48:18.220 --> 00:48:24.150
Because the format you get back from the translator
may not be exactly the format that we want.

00:48:24.150 --> 00:48:30.210
So here we go and easily click download, and
here I have some translations here that are

00:48:30.210 --> 00:48:32.700
ready, and so I click next.

00:48:32.700 --> 00:48:33.850
There they are.

00:48:33.850 --> 00:48:39.790
I click download, and on the left here on
the values, I have my -- you show here which

00:48:39.790 --> 00:48:41.060
string you just got.

00:48:41.060 --> 00:48:44.030
And you got your string translated directly.

00:48:44.030 --> 00:48:46.460
So the whole work flow is directly integrated
into the IDE.

00:48:46.460 --> 00:48:48.170
We'll have (indiscernible) Studio, of course.

00:48:48.170 --> 00:48:49.520
It's available now.

00:48:49.520 --> 00:48:54.990
I think you have to go and sign up for the
pilot to be able to do that.

00:48:54.990 --> 00:48:58.410
All right.

00:48:58.410 --> 00:49:00.530
And this is, you know, the end.

00:49:00.530 --> 00:49:08.030
We have a couple of -- well -- no.

00:49:08.030 --> 00:49:10.550
So we are taking questions.

00:49:10.550 --> 00:49:12.770
You know, so feedback again.

00:49:12.770 --> 00:49:14.140
(Indiscernible).

00:49:14.140 --> 00:49:20.050
We have a mailing list, (indiscernible) @Google
groups, and then we'd love feedback on Android

00:49:20.050 --> 00:49:22.710
Studio.

00:49:22.710 --> 00:49:28.020
All right.

00:49:28.020 --> 00:49:32.560
[ Applause ]
&gt;&gt;&gt; The translation is a nice feature.

00:49:32.560 --> 00:49:38.110
A question is what if you translated it once
and then you added a couple strings or changed

00:49:38.110 --> 00:49:39.110
a couple?

00:49:39.110 --> 00:49:41.610
Does is it know to just ask for translating
what changed?

00:49:41.610 --> 00:49:44.400
&gt;&gt;Xavier Ducrohet: I think it deals with that.

00:49:44.400 --> 00:49:50.010
There is a talk on Friday at 12:00 p.m. that
will talk a lot more about that, and you should

00:49:50.010 --> 00:49:51.010
go and check it out.

00:49:51.010 --> 00:49:52.050
They will probably have the answer.

00:49:52.050 --> 00:49:55.790
But I think the (indiscernible) already been
translated and they only translate the new

00:49:55.790 --> 00:49:58.280
things.

00:49:58.280 --> 00:50:01.230
&gt;&gt;&gt; I'm looking forward to your weekly updates.

00:50:01.230 --> 00:50:09.650
I want to get a clarification on the direction
between Eclipse and the Studio and kind of

00:50:09.650 --> 00:50:12.550
validate where we're going with the two IDs.

00:50:12.550 --> 00:50:15.030
&gt;&gt;Tor Norbye: We suspected that question would
come up.

00:50:15.030 --> 00:50:17.970
&gt;&gt;Xavier Ducrohet: Yes, we are going to keep
supporting Eclipse.

00:50:17.970 --> 00:50:22.500
You know, that's something that we won't be
able to do in Eclipse because it has, you

00:50:22.500 --> 00:50:26.560
know, the language framework is not as good,
or as extensible.

00:50:26.560 --> 00:50:29.100
So it's harder for us to plug into it.

00:50:29.100 --> 00:50:30.580
But we are going to keep supporting Eclipse.

00:50:30.580 --> 00:50:33.480
Right now we're focusing a lot on studio because
we have to bring a lot of the features from

00:50:33.480 --> 00:50:37.020
ADT into studio but we're going to keep supporting
both.

00:50:37.020 --> 00:50:41.600
At some point we're going to integrate Gradle
directly inside ADT also so you have a single

00:50:41.600 --> 00:50:45.910
build and (indiscernible) to be able to build
with that.

00:50:45.910 --> 00:50:51.110
&gt;&gt;&gt; One of the things -- First of all, thank
you for using IntelliJ.

00:50:51.110 --> 00:50:53.200
It's a great IDE.

00:50:53.200 --> 00:50:54.760
&gt;&gt;Xavier Ducrohet: Yes.

00:50:54.760 --> 00:51:00.000
&gt;&gt;&gt; One of the things that I missed from Eclipse
is merge manifest.

00:51:00.000 --> 00:51:02.581
Do you know when that's going to be available
for --

00:51:02.581 --> 00:51:04.710
&gt;&gt;Tor Norbye: It's a feature of the new build
system.

00:51:04.710 --> 00:51:09.010
&gt;&gt;Xavier Ducrohet: Yes, the new build system
merged the manifest so you don't have to do

00:51:09.010 --> 00:51:10.010
anything.

00:51:10.010 --> 00:51:15.571
We still support the old builder in IntelliJ
in case you have an older IntelliJ project

00:51:15.571 --> 00:51:19.740
that you are using so you can open it and
use it, but the default behavior is to use

00:51:19.740 --> 00:51:23.460
the new build system, and the new build system
deals with merging the manifest.

00:51:23.460 --> 00:51:24.460
&gt;&gt;&gt; Is that available now?

00:51:24.460 --> 00:51:25.660
I already use IntelliJ.

00:51:25.660 --> 00:51:27.780
&gt;&gt;Xavier Ducrohet: Yes, it is available now.

00:51:27.780 --> 00:51:29.960
&gt;&gt;&gt; So just on --
&gt;&gt;Xavier Ducrohet: Yeah, if you get Studio,

00:51:29.960 --> 00:51:33.530
you'll have automatically create a new project
and you'll see the new build system and it

00:51:33.530 --> 00:51:34.600
does manifest merging.

00:51:34.600 --> 00:51:39.800
&gt;&gt;Tor Norbye: In the new -- in Android Studio,
you can't create -- in the Android Studio

00:51:39.800 --> 00:51:43.240
version, not with plug-in in IntelliJ, you
can't create old style.

00:51:43.240 --> 00:51:46.820
You can only create Gradle-based projects
because we're really trying to get that part

00:51:46.820 --> 00:51:50.330
working beautifully.

00:51:50.330 --> 00:51:51.330
&gt;&gt;&gt; Translation question.

00:51:51.330 --> 00:51:53.750
My apps are all translated by volunteer users.

00:51:53.750 --> 00:51:57.140
I'd love to see crowd sourcing in your framework.

00:51:57.140 --> 00:51:58.140
Anything on that?

00:51:58.140 --> 00:52:02.530
&gt;&gt;Xavier Ducrohet: Again, session at 12:00
on Friday, the people who deal with that will

00:52:02.530 --> 00:52:07.200
give you a big LMO and they can answer that
question.

00:52:07.200 --> 00:52:08.600
&gt;&gt;&gt; Thanks for the switch to IntelliJ.

00:52:08.600 --> 00:52:10.130
&gt;&gt;Tor Norbye: Last question.

00:52:10.130 --> 00:52:11.130
&gt;&gt;&gt; That's really appreciated.

00:52:11.130 --> 00:52:16.920
I'll have to get used to Gradle, I guess,
because I'm using Maven to do all the builds.

00:52:16.920 --> 00:52:20.320
I have a question about compiling with multiple
APK loops.

00:52:20.320 --> 00:52:23.590
You mentioned action by Sherlock before.

00:52:23.590 --> 00:52:30.590
That's commonly used and it is not uncommon
to use it with Holo Everywhere and Holo Everywhere

00:52:30.590 --> 00:52:31.590
Preference.

00:52:31.590 --> 00:52:33.380
Maybe with your own APK lib as well.

00:52:33.380 --> 00:52:38.710
So in some of my projects, I'm building with
four APK loops all at once.

00:52:38.710 --> 00:52:43.860
At the moment that takes a long time because
you have to run ADTs through all of them.

00:52:43.860 --> 00:52:45.930
Where are you progressing on that?

00:52:45.930 --> 00:52:48.970
&gt;&gt;Xavier Ducrohet: So we have better support
for that.

00:52:48.970 --> 00:52:54.240
I think it's a lot dependent on text merging
to be able to help with that, but we have

00:52:54.240 --> 00:52:58.060
a new feature to merge resources that's more
incremental, so that will be faster.

00:52:58.060 --> 00:53:00.790
(Indiscernible), we're improving that a lot.

00:53:00.790 --> 00:53:03.460
It may not be just there yet, but we're improving
it a lot.

00:53:03.460 --> 00:53:07.770
Also, one thing is because of Gradle, you
won't necessarily need to have all those projects

00:53:07.770 --> 00:53:10.280
open in Eclipse before you have to.

00:53:10.280 --> 00:53:13.730
You have (indiscernible) open, so here you
can just focus on one module, and that makes

00:53:13.730 --> 00:53:14.730
things faster anyway.

00:53:14.730 --> 00:53:17.900
&gt;&gt;Tor Norbye: So we're unfortunately out of
time, but we're going to be out there.

00:53:17.900 --> 00:53:22.240
&gt;&gt;Xavier Ducrohet: So we're going to be at
the office hours and we'll be there as long

00:53:22.240 --> 00:53:23.670
as people have questions.

00:53:23.670 --> 00:53:26.140
So, you know, just come and talk to us.

00:53:26.140 --> 00:53:27.140
&gt;&gt;Tor Norbye: And that's right now.

00:53:27.140 --> 00:53:28.140
We're going there right now.

00:53:28.140 --> 00:53:29.140
All right.

00:53:29.140 --> 00:53:30.140
Thank you.

00:53:30.140 --> 00:53:31.140
&gt;&gt;Xavier Ducrohet: Thank you very much.

00:53:31.140 --> 00:53:31.141
[ Applause ]

