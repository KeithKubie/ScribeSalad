WEBVTT
Kind: captions
Language: en

00:00:05.509 --> 00:00:08.480
 
if your app uses background threads for

00:00:08.480 --> 00:00:08.490
if your app uses background threads for
 

00:00:08.490 --> 00:00:10.940
if your app uses background threads for
loading or processing data and pretty

00:00:10.940 --> 00:00:10.950
loading or processing data and pretty
 

00:00:10.950 --> 00:00:12.530
loading or processing data and pretty
much every app will need those at some

00:00:12.530 --> 00:00:12.540
much every app will need those at some
 

00:00:12.540 --> 00:00:14.539
much every app will need those at some
point you might have to take special

00:00:14.539 --> 00:00:14.549
point you might have to take special
 

00:00:14.549 --> 00:00:17.060
point you might have to take special
precautions to make your UI test run

00:00:17.060 --> 00:00:17.070
precautions to make your UI test run
 

00:00:17.070 --> 00:00:20.179
precautions to make your UI test run
reliably espresso does most of the heavy

00:00:20.179 --> 00:00:20.189
reliably espresso does most of the heavy
 

00:00:20.189 --> 00:00:22.160
reliably espresso does most of the heavy
lifting for you waiting for lifecycle

00:00:22.160 --> 00:00:22.170
lifting for you waiting for lifecycle
 

00:00:22.170 --> 00:00:24.080
lifting for you waiting for lifecycle
events to finish and checking of the UI

00:00:24.080 --> 00:00:24.090
events to finish and checking of the UI
 

00:00:24.090 --> 00:00:26.960
events to finish and checking of the UI
is idle but it can't always know what

00:00:26.960 --> 00:00:26.970
is idle but it can't always know what
 

00:00:26.970 --> 00:00:28.609
is idle but it can't always know what
the other parts of your app are doing

00:00:28.609 --> 00:00:28.619
the other parts of your app are doing
 

00:00:28.619 --> 00:00:30.169
the other parts of your app are doing
and you might need to write some

00:00:30.169 --> 00:00:30.179
and you might need to write some
 

00:00:30.179 --> 00:00:32.359
and you might need to write some
additional code to make synchronization

00:00:32.359 --> 00:00:32.369
additional code to make synchronization
 

00:00:32.369 --> 00:00:34.930
additional code to make synchronization
possible let me show you on an example

00:00:34.930 --> 00:00:34.940
possible let me show you on an example
 

00:00:34.940 --> 00:00:37.580
possible let me show you on an example
I'll create a new project in Android

00:00:37.580 --> 00:00:37.590
I'll create a new project in Android
 

00:00:37.590 --> 00:00:41.080
I'll create a new project in Android
studio with the empty activity template

00:00:41.080 --> 00:00:41.090
studio with the empty activity template
 

00:00:41.090 --> 00:00:43.670
studio with the empty activity template
let's do some initial setup for testing

00:00:43.670 --> 00:00:43.680
let's do some initial setup for testing
 

00:00:43.680 --> 00:00:46.069
let's do some initial setup for testing
I'll add the Android runner rules and

00:00:46.069 --> 00:00:46.079
I'll add the Android runner rules and
 

00:00:46.079 --> 00:00:48.200
I'll add the Android runner rules and
espresso dependencies in my Android test

00:00:48.200 --> 00:00:48.210
espresso dependencies in my Android test
 

00:00:48.210 --> 00:00:50.420
espresso dependencies in my Android test
scope if you're ever unsure what the

00:00:50.420 --> 00:00:50.430
scope if you're ever unsure what the
 

00:00:50.430 --> 00:00:52.160
scope if you're ever unsure what the
newest versions for espresso packages

00:00:52.160 --> 00:00:52.170
newest versions for espresso packages
 

00:00:52.170 --> 00:00:54.529
newest versions for espresso packages
are consult the documentation or our

00:00:54.529 --> 00:00:54.539
are consult the documentation or our
 

00:00:54.539 --> 00:00:56.569
are consult the documentation or our
testing samples on github which we

00:00:56.569 --> 00:00:56.579
testing samples on github which we
 

00:00:56.579 --> 00:00:59.299
testing samples on github which we
always keep up-to-date I didn't set up

00:00:59.299 --> 00:00:59.309
always keep up-to-date I didn't set up
 

00:00:59.309 --> 00:01:01.040
always keep up-to-date I didn't set up
the test instrumentation Runner and

00:01:01.040 --> 00:01:01.050
the test instrumentation Runner and
 

00:01:01.050 --> 00:01:04.130
the test instrumentation Runner and
we're done here on to the main activity

00:01:04.130 --> 00:01:04.140
we're done here on to the main activity
 

00:01:04.140 --> 00:01:06.649
we're done here on to the main activity
class the only thing it does right now

00:01:06.649 --> 00:01:06.659
class the only thing it does right now
 

00:01:06.659 --> 00:01:09.020
class the only thing it does right now
is set a layout for the text view let me

00:01:09.020 --> 00:01:09.030
is set a layout for the text view let me
 

00:01:09.030 --> 00:01:11.359
is set a layout for the text view let me
open the layout and change that text and

00:01:11.359 --> 00:01:11.369
open the layout and change that text and
 

00:01:11.369 --> 00:01:16.219
open the layout and change that text and
give the textview an ID in onresume I'm

00:01:16.219 --> 00:01:16.229
give the textview an ID in onresume I'm
 

00:01:16.229 --> 00:01:18.920
give the textview an ID in onresume I'm
going to change the text and I'll just

00:01:18.920 --> 00:01:18.930
going to change the text and I'll just
 

00:01:18.930 --> 00:01:20.570
going to change the text and I'll just
quickly extract the string into a

00:01:20.570 --> 00:01:20.580
quickly extract the string into a
 

00:01:20.580 --> 00:01:24.700
quickly extract the string into a
resource for later reuse

00:01:24.700 --> 00:01:24.710
 
 

00:01:24.710 --> 00:01:27.400
 
let's create a UI test for the activity

00:01:27.400 --> 00:01:27.410
let's create a UI test for the activity
 

00:01:27.410 --> 00:01:33.440
let's create a UI test for the activity
using an Android studio shortcut

00:01:33.440 --> 00:01:33.450
 
 

00:01:33.450 --> 00:01:35.870
 
add the annotation to use the Android

00:01:35.870 --> 00:01:35.880
add the annotation to use the Android
 

00:01:35.880 --> 00:01:39.230
add the annotation to use the Android
test runner first then I need to set up

00:01:39.230 --> 00:01:39.240
test runner first then I need to set up
 

00:01:39.240 --> 00:01:41.090
test runner first then I need to set up
the activity test role that will start

00:01:41.090 --> 00:01:41.100
the activity test role that will start
 

00:01:41.100 --> 00:01:43.200
the activity test role that will start
my activity

00:01:43.200 --> 00:01:43.210
my activity
 

00:01:43.210 --> 00:01:45.750
my activity
and check if the correct text is

00:01:45.750 --> 00:01:45.760
and check if the correct text is
 

00:01:45.760 --> 00:01:51.300
and check if the correct text is
displayed I run the test and it passes

00:01:51.300 --> 00:01:51.310
displayed I run the test and it passes
 

00:01:51.310 --> 00:01:53.609
displayed I run the test and it passes
that's because espresso waits until the

00:01:53.609 --> 00:01:53.619
that's because espresso waits until the
 

00:01:53.619 --> 00:01:55.800
that's because espresso waits until the
app processes all lifecycle events and

00:01:55.800 --> 00:01:55.810
app processes all lifecycle events and
 

00:01:55.810 --> 00:01:57.690
app processes all lifecycle events and
I'm setting you the text string in on

00:01:57.690 --> 00:01:57.700
I'm setting you the text string in on
 

00:01:57.700 --> 00:02:00.359
I'm setting you the text string in on
resume remember let's simulate a more

00:02:00.359 --> 00:02:00.369
resume remember let's simulate a more
 

00:02:00.369 --> 00:02:02.550
resume remember let's simulate a more
realistic scenario where the data takes

00:02:02.550 --> 00:02:02.560
realistic scenario where the data takes
 

00:02:02.560 --> 00:02:05.399
realistic scenario where the data takes
some time to load async task is one of

00:02:05.399 --> 00:02:05.409
some time to load async task is one of
 

00:02:05.409 --> 00:02:07.200
some time to load async task is one of
the simplest ways to do background work

00:02:07.200 --> 00:02:07.210
the simplest ways to do background work
 

00:02:07.210 --> 00:02:09.120
the simplest ways to do background work
and then pass a result back to the main

00:02:09.120 --> 00:02:09.130
and then pass a result back to the main
 

00:02:09.130 --> 00:02:13.020
and then pass a result back to the main
thread so what happens when I run the

00:02:13.020 --> 00:02:13.030
thread so what happens when I run the
 

00:02:13.030 --> 00:02:16.560
thread so what happens when I run the
test now surprisingly it passes

00:02:16.560 --> 00:02:16.570
test now surprisingly it passes
 

00:02:16.570 --> 00:02:18.960
test now surprisingly it passes
that's because espresso also knows how

00:02:18.960 --> 00:02:18.970
that's because espresso also knows how
 

00:02:18.970 --> 00:02:21.000
that's because espresso also knows how
to synchronize on the async task thread

00:02:21.000 --> 00:02:21.010
to synchronize on the async task thread
 

00:02:21.010 --> 00:02:23.790
to synchronize on the async task thread
roll out of the box and because async

00:02:23.790 --> 00:02:23.800
roll out of the box and because async
 

00:02:23.800 --> 00:02:25.920
roll out of the box and because async
tasks are also at the heart of any async

00:02:25.920 --> 00:02:25.930
tasks are also at the heart of any async
 

00:02:25.930 --> 00:02:28.020
tasks are also at the heart of any async
task loader including cursor loaders

00:02:28.020 --> 00:02:28.030
task loader including cursor loaders
 

00:02:28.030 --> 00:02:30.840
task loader including cursor loaders
they just work of course there's lots of

00:02:30.840 --> 00:02:30.850
they just work of course there's lots of
 

00:02:30.850 --> 00:02:32.430
they just work of course there's lots of
other ways you can schedule background

00:02:32.430 --> 00:02:32.440
other ways you can schedule background
 

00:02:32.440 --> 00:02:34.410
other ways you can schedule background
work it can be connecting to a remote

00:02:34.410 --> 00:02:34.420
work it can be connecting to a remote
 

00:02:34.420 --> 00:02:36.990
work it can be connecting to a remote
API using a custom thread poll or

00:02:36.990 --> 00:02:37.000
API using a custom thread poll or
 

00:02:37.000 --> 00:02:39.479
API using a custom thread poll or
through handler messaging you can see

00:02:39.479 --> 00:02:39.489
through handler messaging you can see
 

00:02:39.489 --> 00:02:41.460
through handler messaging you can see
I'm changing the code to use a separate

00:02:41.460 --> 00:02:41.470
I'm changing the code to use a separate
 

00:02:41.470 --> 00:02:43.500
I'm changing the code to use a separate
thread which sleeps for five seconds to

00:02:43.500 --> 00:02:43.510
thread which sleeps for five seconds to
 

00:02:43.510 --> 00:02:46.080
thread which sleeps for five seconds to
simulate background work then post the

00:02:46.080 --> 00:02:46.090
simulate background work then post the
 

00:02:46.090 --> 00:02:50.080
simulate background work then post the
change back to the main thread

00:02:50.080 --> 00:02:50.090
 
 

00:02:50.090 --> 00:02:52.930
 
when I run the test it fails immediately

00:02:52.930 --> 00:02:52.940
when I run the test it fails immediately
 

00:02:52.940 --> 00:02:55.809
when I run the test it fails immediately
as soon as onresume returns and the

00:02:55.809 --> 00:02:55.819
as soon as onresume returns and the
 

00:02:55.819 --> 00:02:58.089
as soon as onresume returns and the
activity is idle espresso is trying to

00:02:58.089 --> 00:02:58.099
activity is idle espresso is trying to
 

00:02:58.099 --> 00:02:59.860
activity is idle espresso is trying to
validate the message on the textview and

00:02:59.860 --> 00:02:59.870
validate the message on the textview and
 

00:02:59.870 --> 00:03:01.809
validate the message on the textview and
it fails because the runnable hasn't had

00:03:01.809 --> 00:03:01.819
it fails because the runnable hasn't had
 

00:03:01.819 --> 00:03:03.970
it fails because the runnable hasn't had
a chance to run yet that's when you have

00:03:03.970 --> 00:03:03.980
a chance to run yet that's when you have
 

00:03:03.980 --> 00:03:06.280
a chance to run yet that's when you have
to use iving resource to tell us press o

00:03:06.280 --> 00:03:06.290
to use iving resource to tell us press o
 

00:03:06.290 --> 00:03:09.160
to use iving resource to tell us press o
when your app is busy processing I'll

00:03:09.160 --> 00:03:09.170
when your app is busy processing I'll
 

00:03:09.170 --> 00:03:10.690
when your app is busy processing I'll
use an implementation of an idling

00:03:10.690 --> 00:03:10.700
use an implementation of an idling
 

00:03:10.700 --> 00:03:12.190
use an implementation of an idling
resource that we provide with espresso

00:03:12.190 --> 00:03:12.200
resource that we provide with espresso
 

00:03:12.200 --> 00:03:15.490
resource that we provide with espresso
called counting idling resource it's

00:03:15.490 --> 00:03:15.500
called counting idling resource it's
 

00:03:15.500 --> 00:03:17.440
called counting idling resource it's
very simple to use and it basically lets

00:03:17.440 --> 00:03:17.450
very simple to use and it basically lets
 

00:03:17.450 --> 00:03:19.449
very simple to use and it basically lets
you increment the counter for every

00:03:19.449 --> 00:03:19.459
you increment the counter for every
 

00:03:19.459 --> 00:03:21.070
you increment the counter for every
resource that is busy when you're

00:03:21.070 --> 00:03:21.080
resource that is busy when you're
 

00:03:21.080 --> 00:03:22.509
resource that is busy when you're
waiting for something to finish loading

00:03:22.509 --> 00:03:22.519
waiting for something to finish loading
 

00:03:22.519 --> 00:03:25.990
waiting for something to finish loading
and decrement it when it's done espresso

00:03:25.990 --> 00:03:26.000
and decrement it when it's done espresso
 

00:03:26.000 --> 00:03:27.850
and decrement it when it's done espresso
will automatically run whenever the

00:03:27.850 --> 00:03:27.860
will automatically run whenever the
 

00:03:27.860 --> 00:03:29.620
will automatically run whenever the
counter is at zero I'll give it a name

00:03:29.620 --> 00:03:29.630
counter is at zero I'll give it a name
 

00:03:29.630 --> 00:03:32.590
counter is at zero I'll give it a name
data loader used mostly for logging but

00:03:32.590 --> 00:03:32.600
data loader used mostly for logging but
 

00:03:32.600 --> 00:03:34.090
data loader used mostly for logging but
it has to be unique among registered

00:03:34.090 --> 00:03:34.100
it has to be unique among registered
 

00:03:34.100 --> 00:03:38.259
it has to be unique among registered
idling resources now increment before

00:03:38.259 --> 00:03:38.269
idling resources now increment before
 

00:03:38.269 --> 00:03:40.449
idling resources now increment before
scheduling my runnable and decrement

00:03:40.449 --> 00:03:40.459
scheduling my runnable and decrement
 

00:03:40.459 --> 00:03:44.320
scheduling my runnable and decrement
when it's done the only thing left is to

00:03:44.320 --> 00:03:44.330
when it's done the only thing left is to
 

00:03:44.330 --> 00:03:47.350
when it's done the only thing left is to
register the resource with espresso in

00:03:47.350 --> 00:03:47.360
register the resource with espresso in
 

00:03:47.360 --> 00:03:49.270
register the resource with espresso in
the test class I'll add a setup method

00:03:49.270 --> 00:03:49.280
the test class I'll add a setup method
 

00:03:49.280 --> 00:03:51.160
the test class I'll add a setup method
to grab the idling resource instance

00:03:51.160 --> 00:03:51.170
to grab the idling resource instance
 

00:03:51.170 --> 00:03:54.699
to grab the idling resource instance
from the activity and it's done run

00:03:54.699 --> 00:03:54.709
from the activity and it's done run
 

00:03:54.709 --> 00:03:56.949
from the activity and it's done run
tests after five seconds the counter

00:03:56.949 --> 00:03:56.959
tests after five seconds the counter
 

00:03:56.959 --> 00:04:00.520
tests after five seconds the counter
gets decremented and the test passes to

00:04:00.520 --> 00:04:00.530
gets decremented and the test passes to
 

00:04:00.530 --> 00:04:02.319
gets decremented and the test passes to
sum up if your tests are flaky or

00:04:02.319 --> 00:04:02.329
sum up if your tests are flaky or
 

00:04:02.329 --> 00:04:04.360
sum up if your tests are flaky or
outright failing because of background

00:04:04.360 --> 00:04:04.370
outright failing because of background
 

00:04:04.370 --> 00:04:06.729
outright failing because of background
threads and synchronous events use

00:04:06.729 --> 00:04:06.739
threads and synchronous events use
 

00:04:06.739 --> 00:04:09.190
threads and synchronous events use
idling resource to tell espresso when to

00:04:09.190 --> 00:04:09.200
idling resource to tell espresso when to
 

00:04:09.200 --> 00:04:11.710
idling resource to tell espresso when to
pause and resume its work that's all for

00:04:11.710 --> 00:04:11.720
pause and resume its work that's all for
 

00:04:11.720 --> 00:04:15.069
pause and resume its work that's all for
this episode happy testing

