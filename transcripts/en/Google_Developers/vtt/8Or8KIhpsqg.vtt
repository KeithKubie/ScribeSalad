WEBVTT
Kind: captions
Language: en

00:00:07.890 --> 00:00:08.560
Welcome.

00:00:08.560 --> 00:00:09.620
My name's Pete Frisella.

00:00:09.620 --> 00:00:12.370
I'm a developer advocate on
the Google Analytics team.

00:00:12.370 --> 00:00:14.080
Well, today I want to talk to
you a little bit about the

00:00:14.080 --> 00:00:18.000
Google Analytics superProxy, and
what that actually means.

00:00:18.000 --> 00:00:19.310
From a high level, it
really means you can

00:00:19.310 --> 00:00:20.580
make your data public.

00:00:20.580 --> 00:00:24.240
To drive a lot of different
things like widgets, testing,

00:00:24.240 --> 00:00:25.150
dashboards.

00:00:25.150 --> 00:00:26.300
So we'll just get
right into it.

00:00:26.300 --> 00:00:28.250
We'll talk a little bit about
the agenda, and then we'll

00:00:28.250 --> 00:00:30.830
dive right into a demo
and some examples.

00:00:30.830 --> 00:00:32.520
So we're going to talk a little
bit about what it is,

00:00:32.520 --> 00:00:34.220
so what is a proxy?

00:00:34.220 --> 00:00:37.070
Some example use case, and then
a demo, and actually how

00:00:37.070 --> 00:00:38.490
to get started and
do this yourself.

00:00:38.490 --> 00:00:41.780
So we'll go from start
to finish type thing.

00:00:41.780 --> 00:00:44.770
So what is Google Analytics
superProxy?

00:00:44.770 --> 00:00:47.060
If you're familiar with some of
our other projects from the

00:00:47.060 --> 00:00:50.280
developer relations team here
at Google Analytics, we've

00:00:50.280 --> 00:00:51.660
done stuff like the
Google Analytics

00:00:51.660 --> 00:00:53.290
easy dashboard library.

00:00:53.290 --> 00:00:55.220
And we have the report
automation, which some of you

00:00:55.220 --> 00:00:56.950
know as the magic script.

00:00:56.950 --> 00:01:01.040
So these are products that we
developed to help users, and

00:01:01.040 --> 00:01:02.860
developers also, to understand
things you

00:01:02.860 --> 00:01:04.959
can do with the platform.

00:01:04.959 --> 00:01:07.990
And also tools that solve some
more complex problems that

00:01:07.990 --> 00:01:09.640
people are trying to solve.

00:01:09.640 --> 00:01:11.920
So the superProxy's just another
one of these open

00:01:11.920 --> 00:01:15.220
source projects that can be used
as a tool to make your

00:01:15.220 --> 00:01:16.060
data public.

00:01:16.060 --> 00:01:17.290
It's open source.

00:01:17.290 --> 00:01:21.400
It runs on App Engine, so it's
an actual web application.

00:01:21.400 --> 00:01:23.930
There's a few key objectives we
wanted to meet with this.

00:01:23.930 --> 00:01:27.090
One was to make it really
easy, of course.

00:01:27.090 --> 00:01:30.770
To make it scalable, so it suits
implementations where

00:01:30.770 --> 00:01:32.100
you need that kind
of scalability.

00:01:32.100 --> 00:01:35.280
Or you have a lot of visitors,
things like that.

00:01:35.280 --> 00:01:36.610
And also we wanted to
make it extensible.

00:01:36.610 --> 00:01:38.670
So we'll get a little bit into
what that means in a second.

00:01:38.670 --> 00:01:41.060
But we wanted to make sure that
people could take it, and

00:01:41.060 --> 00:01:44.160
transform it, and do their
own thing with it.

00:01:44.160 --> 00:01:45.670
And provide different formats
and stuff like.

00:01:45.670 --> 00:01:49.850
So with that, let's just get
into some examples and use

00:01:49.850 --> 00:01:51.490
cases, and think about
maybe how you could

00:01:51.490 --> 00:01:53.810
use this new tool.

00:01:53.810 --> 00:01:57.100
So when you think about making
your data public, one of these

00:01:57.100 --> 00:01:58.740
cases might be-- and we hear
this sometimes-- is that

00:01:58.740 --> 00:02:01.850
people just want to take some
report from Google Analytics,

00:02:01.850 --> 00:02:04.350
some data, and make that
publicly available.

00:02:04.350 --> 00:02:05.790
Maybe on their website.

00:02:05.790 --> 00:02:08.650
Or maybe you might want to do
it from internal public

00:02:08.650 --> 00:02:09.680
perspective.

00:02:09.680 --> 00:02:12.150
Create a dashboard that you can
share with everybody in

00:02:12.150 --> 00:02:15.210
your account, without having to
worry about authentication

00:02:15.210 --> 00:02:16.570
authorization.

00:02:16.570 --> 00:02:18.670
So with Google Analytics, of
course you need an account and

00:02:18.670 --> 00:02:20.090
you need to authenticate.

00:02:20.090 --> 00:02:22.130
But this can be a challenge or
complex when you just want to

00:02:22.130 --> 00:02:24.160
share data with a whole
bunch of people.

00:02:24.160 --> 00:02:25.580
So if you have a website you
might want to show, for

00:02:25.580 --> 00:02:28.930
example, like this is browser
share for the last seven days

00:02:28.930 --> 00:02:29.650
for your site.

00:02:29.650 --> 00:02:32.180
Or some other demographics,
maybe of your visitors.

00:02:32.180 --> 00:02:34.230
Maybe you want to create this
page for advertisers that they

00:02:34.230 --> 00:02:36.270
can come and see
it, who knows.

00:02:36.270 --> 00:02:37.940
But the point is, you're trying
to make some public

00:02:37.940 --> 00:02:40.100
data available.

00:02:40.100 --> 00:02:42.190
There's a lot of different use
cases and scenarios where this

00:02:42.190 --> 00:02:43.080
makes sense.

00:02:43.080 --> 00:02:45.410
So if you think about this
case, where you have a

00:02:45.410 --> 00:02:48.260
website, the pie chart, how
would you actually go about

00:02:48.260 --> 00:02:50.270
doing this today?

00:02:50.270 --> 00:02:52.192
Let's look at that scenario
and the process that you'd

00:02:52.192 --> 00:02:53.860
have to go through.

00:02:53.860 --> 00:02:56.700
So with any website, you
have a web page is at

00:02:56.700 --> 00:02:57.460
the minimum, obviously.

00:02:57.460 --> 00:03:01.450
And that's usually served from
a web server, some server.

00:03:01.450 --> 00:03:04.250
To do this implementation for
making data public, there's a

00:03:04.250 --> 00:03:06.640
few steps you'd have to go
through to actually accomplish

00:03:06.640 --> 00:03:08.310
this and implement this.

00:03:08.310 --> 00:03:11.970
The first thing is obviously,
we have to get past this

00:03:11.970 --> 00:03:14.120
complex issue of
authentication.

00:03:14.120 --> 00:03:15.425
You need to make requests
to Google

00:03:15.425 --> 00:03:16.400
Analytics for this data.

00:03:16.400 --> 00:03:19.050
And you can use the Core
Reporting API and other Google

00:03:19.050 --> 00:03:21.430
Analytics APIs to make
requests for data

00:03:21.430 --> 00:03:22.610
programmatically.

00:03:22.610 --> 00:03:23.920
But you need to do
authentication.

00:03:23.920 --> 00:03:26.650
And a lot of times, this is
OAuth 2.0 is the recommended

00:03:26.650 --> 00:03:28.910
approach for authentication.

00:03:28.910 --> 00:03:31.280
And you need to actually
interact with the Google

00:03:31.280 --> 00:03:34.460
accounts for all the
Google APIs.

00:03:34.460 --> 00:03:36.160
And once you have that token,
you need to save it.

00:03:36.160 --> 00:03:38.270
And you need to also manage
the whole process of

00:03:38.270 --> 00:03:43.400
refreshing tokens, making the
requests using the token.

00:03:43.400 --> 00:03:45.100
So this is a whole process
in itself.

00:03:45.100 --> 00:03:47.450
And this is outside of Google
Analytics necessarily, but

00:03:47.450 --> 00:03:51.230
it's part of any APIs that
you work with at Google.

00:03:51.230 --> 00:03:53.230
And once you've got that token,
now someone comes and

00:03:53.230 --> 00:03:54.200
visits your website.

00:03:54.200 --> 00:03:56.540
And you want to serve this page
to them with this chart

00:03:56.540 --> 00:03:59.750
that has this browser
share for example.

00:03:59.750 --> 00:04:02.230
So you'd have to make the
request to Google Analytics

00:04:02.230 --> 00:04:02.890
through the API.

00:04:02.890 --> 00:04:04.500
And you'd have to use that
token that you stored for

00:04:04.500 --> 00:04:05.260
authentication.

00:04:05.260 --> 00:04:07.160
And it would come back with a
response, with the data that

00:04:07.160 --> 00:04:07.900
you've requested.

00:04:07.900 --> 00:04:10.030
Now, And once you have
that data you have to

00:04:10.030 --> 00:04:11.260
then parse the data.

00:04:11.260 --> 00:04:12.560
Because you need to pull up
the information that you

00:04:12.560 --> 00:04:14.510
actually want to use
and display.

00:04:14.510 --> 00:04:17.380
And you have to transform that
in some format that would work

00:04:17.380 --> 00:04:21.769
with-- for this example, we're
using the Google Charts API.

00:04:21.769 --> 00:04:23.610
So you'd have to make sure the
data is in a certain format.

00:04:23.610 --> 00:04:26.300
In this case, let's say data
table format, to work with the

00:04:26.300 --> 00:04:27.030
Charts API.

00:04:27.030 --> 00:04:30.430
So you'd have to do that
yourself and write the script

00:04:30.430 --> 00:04:31.950
on the server side.

00:04:31.950 --> 00:04:34.270
And then that point, you could
show to the user the chart and

00:04:34.270 --> 00:04:34.810
they could see this.

00:04:34.810 --> 00:04:36.570
And this would work for anybody
that visited your site

00:04:36.570 --> 00:04:37.940
because you're doing everything
server side.

00:04:37.940 --> 00:04:40.060
And it would be public and
everybody could look at it.

00:04:40.060 --> 00:04:42.400
And you would accomplish what
you're trying to do.

00:04:42.400 --> 00:04:43.710
But it's probably not
what you want to do.

00:04:43.710 --> 00:04:45.930
So for every visitor to your
site, you don't want to have

00:04:45.930 --> 00:04:47.670
to go to Google Analytics to
say, give me the data.

00:04:47.670 --> 00:04:48.670
And then come back, parse it.

00:04:48.670 --> 00:04:49.470
You want to actually save.

00:04:49.470 --> 00:04:51.770
It so you probably want to put
the response in some kind of

00:04:51.770 --> 00:04:54.230
data store or database
on the server side.

00:04:54.230 --> 00:04:55.840
All right, so now you
have it saved.

00:04:55.840 --> 00:04:57.630
But the thing is now it's saved,
you want to make sure

00:04:57.630 --> 00:04:59.900
it gets refreshed or updated
on a regular basis.

00:04:59.900 --> 00:05:01.960
You don't want to be serving
data that's two weeks old, and

00:05:01.960 --> 00:05:03.540
you don't want to have
to manually do this.

00:05:03.540 --> 00:05:05.680
So you actually want to have
something like a refresh

00:05:05.680 --> 00:05:08.840
that's done automatically,
in at a set interval.

00:05:08.840 --> 00:05:11.830
Maybe every hour, or every two
days, or one day, depending on

00:05:11.830 --> 00:05:13.700
the data in your account
and what you

00:05:13.700 --> 00:05:14.910
think might make sense.

00:05:14.910 --> 00:05:16.670
So in that case, the
whole system looks

00:05:16.670 --> 00:05:17.460
something like this.

00:05:17.460 --> 00:05:19.690
Where you have the web server,
all these different components

00:05:19.690 --> 00:05:21.960
that are each doing
their own part to

00:05:21.960 --> 00:05:24.990
serve this data publicly.

00:05:24.990 --> 00:05:25.980
This is really complex, right?

00:05:25.980 --> 00:05:27.350
I mean, you're doing
things server side.

00:05:27.350 --> 00:05:29.225
You' have to write all these
code and scripts to get all

00:05:29.225 --> 00:05:29.680
this to work.

00:05:29.680 --> 00:05:32.040
And really you just want to show
a pie chart that has some

00:05:32.040 --> 00:05:33.880
data about your browser share.

00:05:33.880 --> 00:05:35.280
And you want to do this
in a scalable way

00:05:35.280 --> 00:05:37.820
that's kind of easy.

00:05:37.820 --> 00:05:40.940
The other thing is, when you
think about saving data and

00:05:40.940 --> 00:05:43.960
caching it, again it's a little
bit more complex.

00:05:43.960 --> 00:05:46.530
But ultimately, what would end
up happening is if you got the

00:05:46.530 --> 00:05:48.980
system in place, is that more
visitors would come.

00:05:48.980 --> 00:05:51.650
And you would actually be
serving the data from the data

00:05:51.650 --> 00:05:52.610
store or the database.

00:05:52.610 --> 00:05:54.680
Which is more efficient, would
save you on quota,

00:05:54.680 --> 00:05:56.390
and things like that.

00:05:56.390 --> 00:05:59.540
The other thing is that maybe
you can't control what's on

00:05:59.540 --> 00:06:00.090
the web server.

00:06:00.090 --> 00:06:02.360
And maybe you don't even have
the option to write code or

00:06:02.360 --> 00:06:03.420
write scripts.

00:06:03.420 --> 00:06:05.590
In that case, the only thing
maybe you can do usually is

00:06:05.590 --> 00:06:08.860
maybe provided a JavaScript
snippet on the HTML page.

00:06:08.860 --> 00:06:12.390
And that's about as extensive
as much as changes you can

00:06:12.390 --> 00:06:13.970
make to a site.

00:06:13.970 --> 00:06:15.590
And in that case, you wouldn't
even be able to do this

00:06:15.590 --> 00:06:17.390
implementation because you
wouldn't have access to the

00:06:17.390 --> 00:06:18.050
server, itself.

00:06:18.050 --> 00:06:19.170
So it's complex.

00:06:19.170 --> 00:06:22.150
Obviously, we understand this.

00:06:22.150 --> 00:06:25.200
And that's where the Google
Analytics superProxy can come

00:06:25.200 --> 00:06:27.500
in and take away a lot
of this complexity.

00:06:27.500 --> 00:06:29.100
So if we look at an
implementation where you've

00:06:29.100 --> 00:06:32.640
deployed your own instance, or
your own application, of the

00:06:32.640 --> 00:06:34.920
Google Analytics superProxy.

00:06:34.920 --> 00:06:36.280
If you look at those components
now, where they

00:06:36.280 --> 00:06:40.310
would fit, it looks something
more along the lines of this.

00:06:40.310 --> 00:06:42.240
You do all that authentication
with the Google Analytics

00:06:42.240 --> 00:06:42.710
superProxy.

00:06:42.710 --> 00:06:45.390
So you've given access to that
web application to access your

00:06:45.390 --> 00:06:46.720
Google Analytics data.

00:06:46.720 --> 00:06:48.540
And it does this all through
a web interface.

00:06:48.540 --> 00:06:50.340
It's all a web flow, so you
don't have to worry about

00:06:50.340 --> 00:06:51.940
writing code for that.

00:06:51.940 --> 00:06:54.040
Once it's got that token,
it'll manage all of the

00:06:54.040 --> 00:06:56.280
refreshing and getting
valid tokens.

00:06:56.280 --> 00:06:58.780
And it'll communicate directly
for you with the Google

00:06:58.780 --> 00:07:01.260
Analytics servers and APIs.

00:07:01.260 --> 00:07:02.450
And it'll then handle the

00:07:02.450 --> 00:07:04.730
responses from Google Analytics.

00:07:04.730 --> 00:07:07.160
And once it has a response for
you, it'll save it for you in

00:07:07.160 --> 00:07:09.350
a data store automatically.

00:07:09.350 --> 00:07:12.410
It will also refresh it
for you, of course.

00:07:12.410 --> 00:07:14.240
It'll do all at managing
that for you.

00:07:14.240 --> 00:07:16.330
And it will also do
the time interval.

00:07:16.330 --> 00:07:18.840
So if you can say I want to
refresh it every hour, and it

00:07:18.840 --> 00:07:19.870
will take care of
that for you.

00:07:19.870 --> 00:07:21.350
You don't have to worry
about manually going

00:07:21.350 --> 00:07:22.900
and refreshing this.

00:07:22.900 --> 00:07:24.650
And then finally, and most
importantly, one of the big

00:07:24.650 --> 00:07:25.910
things about this is that
it will do some

00:07:25.910 --> 00:07:27.960
transformations for you.

00:07:27.960 --> 00:07:29.880
It'll change the format
response from

00:07:29.880 --> 00:07:31.470
Google Analytics API--

00:07:31.470 --> 00:07:33.880
is JSON is the default
format--

00:07:33.880 --> 00:07:36.320
it'll transform that's to
different things like CSV,

00:07:36.320 --> 00:07:38.560
Data Table, TSV.

00:07:38.560 --> 00:07:40.350
And again, like I mentioned
earlier was one of the things

00:07:40.350 --> 00:07:41.450
we wanted to make sure was
that this was extensible.

00:07:41.450 --> 00:07:44.030
Sensible it's obviously
possible, this is open source

00:07:44.030 --> 00:07:46.250
for other people to write
different formats that they

00:07:46.250 --> 00:07:48.290
can transform to.

00:07:48.290 --> 00:07:50.020
So now we've removed
all that complexity

00:07:50.020 --> 00:07:50.780
from the web server.

00:07:50.780 --> 00:07:53.730
And now it's sitting and taken
care of for you by the Google

00:07:53.730 --> 00:07:56.340
Analytics superProxy
that you deploy.

00:07:56.340 --> 00:07:57.805
And then when you create
queries, you actually get

00:07:57.805 --> 00:07:59.230
these public endpoint URLs.

00:07:59.230 --> 00:08:00.970
And I'll explain that
in a second.

00:08:00.970 --> 00:08:02.560
But if you think about that
scenario now, you

00:08:02.560 --> 00:08:03.490
have the web server.

00:08:03.490 --> 00:08:05.640
Which just might be an HTML page
being served somewhere.

00:08:05.640 --> 00:08:07.810
It doesn't really matter
at this point now.

00:08:07.810 --> 00:08:10.190
And in that page, you're going
to actually make the request--

00:08:10.190 --> 00:08:12.230
the client is going to make the
request, or the visitor is

00:08:12.230 --> 00:08:14.600
making the request directly
to the superProxy.

00:08:14.600 --> 00:08:17.910
In this case, it's pulling the
data directly from superProxy.

00:08:17.910 --> 00:08:21.130
It's cached, it's fast,
and it's scalable.

00:08:21.130 --> 00:08:24.160
And now you're going to have
this pie charts, or whatever

00:08:24.160 --> 00:08:25.800
visualization, or whatever
you're doing is being driven

00:08:25.800 --> 00:08:27.120
through this proxy.

00:08:27.120 --> 00:08:28.390
And it's a public URL.

00:08:28.390 --> 00:08:31.490
So anybody can visit that
URL and get this data.

00:08:31.490 --> 00:08:34.580
I because it's cached and it's
being going through the

00:08:34.580 --> 00:08:37.280
superProxy, you're going
to save on quote.

00:08:37.280 --> 00:08:38.400
It doesn't matter how many
visitors coming.

00:08:38.400 --> 00:08:39.539
It's going to scale up.

00:08:39.539 --> 00:08:42.840
App Engine is great for
that, obviously.

00:08:42.840 --> 00:08:44.090
So we've [INAUDIBLE] all
this complexity.

00:08:44.090 --> 00:08:46.320
It's a little bit nicer now.

00:08:46.320 --> 00:08:48.160
We'll explain in a second how
you actually get this and

00:08:48.160 --> 00:08:49.375
deploy this thing.

00:08:49.375 --> 00:08:52.180
But let's take a step back for
a second and think about what

00:08:52.180 --> 00:08:54.230
this actually means when you
say public versus private.

00:08:54.230 --> 00:08:56.380
What does that mean?

00:08:56.380 --> 00:08:58.760
So it's an App Engine
web application.

00:08:58.760 --> 00:09:01.500
It runs on App Engine,
it's a superProxy.

00:09:01.500 --> 00:09:02.570
And you're the admin of it.

00:09:02.570 --> 00:09:03.950
So you deploy it
and you run it.

00:09:03.950 --> 00:09:05.480
And you manage it.

00:09:05.480 --> 00:09:08.200
Once you've authenticated,
that's all taken care of for

00:09:08.200 --> 00:09:09.720
you, the tokens and things.

00:09:09.720 --> 00:09:11.760
And what you do then is
you create a query.

00:09:11.760 --> 00:09:13.380
And you say I want to
make a new query

00:09:13.380 --> 00:09:14.710
public, new data public.

00:09:14.710 --> 00:09:16.510
So you go in there and
you create a query.

00:09:16.510 --> 00:09:19.050
And you specify what the
query should be.

00:09:19.050 --> 00:09:20.270
What dimensions and metrics.

00:09:20.270 --> 00:09:22.370
So kind of the standard stuff
that you would do for any

00:09:22.370 --> 00:09:24.300
co-reporting.

00:09:24.300 --> 00:09:25.600
And then what it would do,
it's going to create

00:09:25.600 --> 00:09:26.450
the query for you.

00:09:26.450 --> 00:09:28.610
And it'll assign an
ID to the query.

00:09:28.610 --> 00:09:31.020
So for example, we have a query
here for country and

00:09:31.020 --> 00:09:33.700
visits, and it's got
an ID of 1,2,3,4,5.

00:09:33.700 --> 00:09:36.080
It gets saved to the data store
in the Google Analytics

00:09:36.080 --> 00:09:37.090
superProxy.

00:09:37.090 --> 00:09:39.650
And only you have access to this
application, because you

00:09:39.650 --> 00:09:41.570
are the administrator of it.

00:09:41.570 --> 00:09:44.550
And then what happens is there's
a public endpoint or

00:09:44.550 --> 00:09:48.530
URL that's pointing to your
instance of this application.

00:09:48.530 --> 00:09:49.820
And you can give out this URL.

00:09:49.820 --> 00:09:51.950
And you can give people the IDs
for the queries that you'd

00:09:51.950 --> 00:09:53.290
like to make public.

00:09:53.290 --> 00:09:54.480
And these can be
used anywhere.

00:09:54.480 --> 00:09:56.170
So they can be just made
directly for a request.

00:09:56.170 --> 00:09:59.310
You can use this as part
of the web dashboard.

00:09:59.310 --> 00:10:00.650
The point is that these
URLs that you

00:10:00.650 --> 00:10:02.330
provide will be public.

00:10:02.330 --> 00:10:04.680
So for example, in this
case you have a

00:10:04.680 --> 00:10:07.450
public URL that's called--

00:10:07.450 --> 00:10:08.610
so it's hosted to App Engine.

00:10:08.610 --> 00:10:10.400
So you have an appspot.com
domain.

00:10:10.400 --> 00:10:12.700
But you can use your own domain
on App Engine, that's

00:10:12.700 --> 00:10:14.170
definitely possible.

00:10:14.170 --> 00:10:16.890
And you would provide this
URL with the query IDs.

00:10:16.890 --> 00:10:18.720
So query equals 1,2,3,4,5.

00:10:18.720 --> 00:10:19.980
And you give that URL out.

00:10:19.980 --> 00:10:22.550
And that URL will then query to
the superProxy, which will

00:10:22.550 --> 00:10:26.610
retrieve these public, stored
version of that response and

00:10:26.610 --> 00:10:28.360
return it back to the user.

00:10:28.360 --> 00:10:30.230
So you're enabling these certain
queries that you want

00:10:30.230 --> 00:10:33.040
to make public by using the
superProxy, and using these

00:10:33.040 --> 00:10:35.810
URLs that become what you can
consider public endpoints.

00:10:40.470 --> 00:10:42.910
So let's do a little
bit of a demo.

00:10:42.910 --> 00:10:46.240
For example, I have something
here running.

00:10:46.240 --> 00:10:47.775
So this is a pie chart.

00:10:47.775 --> 00:10:50.610
This is actually coming from an
instance of superProxy that

00:10:50.610 --> 00:10:53.330
I've deployed.

00:10:53.330 --> 00:10:54.630
These are public URLs.

00:10:54.630 --> 00:10:56.900
And you'll see that this file
here is just an HTML file

00:10:56.900 --> 00:10:57.910
sitting on my desktop.

00:10:57.910 --> 00:10:59.330
It's not hosted anywhere.

00:10:59.330 --> 00:11:01.630
It's just a simple HTML file.

00:11:01.630 --> 00:11:03.550
If you look at the source-- so
I have two charts on here.

00:11:03.550 --> 00:11:06.540
This is actually coming directly
from the superProxy.

00:11:06.540 --> 00:11:09.650
If you look at the source,
you'll see all this JavaScript

00:11:09.650 --> 00:11:11.860
here is just standard Charts.

00:11:11.860 --> 00:11:13.080
So this is Google Charts,
which is a

00:11:13.080 --> 00:11:13.950
visualization library.

00:11:13.950 --> 00:11:15.800
It used to be called gvis.

00:11:15.800 --> 00:11:17.920
This is all standard
JavaScript.

00:11:17.920 --> 00:11:20.290
There's nothing really here
customized, other than the

00:11:20.290 --> 00:11:22.480
stuff that's like directed
towards superProxy.

00:11:22.480 --> 00:11:22.910
So for example--

00:11:22.910 --> 00:11:29.260
[AUDIO DROPS]

00:11:29.260 --> 00:11:31.400
for the data source,
use this endpoint.

00:11:31.400 --> 00:11:33.060
And this endpoint is
the superProxy.

00:11:33.060 --> 00:11:34.795
And then we're just doing a
couple things like we're

00:11:34.795 --> 00:11:36.270
setting the refresh interval.

00:11:36.270 --> 00:11:39.280
And we have a couple
configuration options like the

00:11:39.280 --> 00:11:40.590
title and stuff like that.

00:11:40.590 --> 00:11:43.135
But none of this is customized
JavaScript or

00:11:43.135 --> 00:11:43.370
anything like that.

00:11:43.370 --> 00:11:45.510
The only thing we're really
doing is pasting in these

00:11:45.510 --> 00:11:50.460
certain values, which is the
URL from the super Proxy.

00:11:50.460 --> 00:11:52.566
So I could give this
file to anybody.

00:11:52.566 --> 00:11:59.190
[AUDIO DROPS]

00:11:59.190 --> 00:12:01.710
So let's take a look, a little
bit about how you would

00:12:01.710 --> 00:12:04.580
actually go ahead and do this.

00:12:04.580 --> 00:12:06.950
So it's kind of three steps
to deploy the app.

00:12:06.950 --> 00:12:07.910
That's the first thing
you need to do.

00:12:07.910 --> 00:12:09.250
This is a one-time
configuration.

00:12:09.250 --> 00:12:11.590
You need to deploy the app and
run your own instance of this

00:12:11.590 --> 00:12:12.790
on App Engine.

00:12:12.790 --> 00:12:17.010
App Engine provides some free
quota, which is probably good

00:12:17.010 --> 00:12:18.940
for most use cases.

00:12:18.940 --> 00:12:21.690
And you probably wouldn't need
to go beyond the free quota.

00:12:21.690 --> 00:12:23.270
So it's free to set
up and create.

00:12:23.270 --> 00:12:26.210
And all the source files are
available on GitHub.

00:12:26.210 --> 00:12:29.430
So the first thing to do is
get the app from GitHub.

00:12:29.430 --> 00:12:30.170
There's a link there.

00:12:30.170 --> 00:12:32.210
We'll provide these
resources later.

00:12:32.210 --> 00:12:33.790
The second thing is you need
to set up and configure the

00:12:33.790 --> 00:12:35.310
application.

00:12:35.310 --> 00:12:36.430
And I'll show you how to
do that in a second.

00:12:36.430 --> 00:12:38.200
And then you want to deploy
this thing to App Engine.

00:12:38.200 --> 00:12:42.460
So this will give you your
actual appspot.com hosted

00:12:42.460 --> 00:12:43.670
application.

00:12:43.670 --> 00:12:46.070
So start off with GitHub.

00:12:46.070 --> 00:12:49.840
This is the actual repository
for the superProxy.

00:12:49.840 --> 00:12:51.000
So you can come in here
and download it.

00:12:51.000 --> 00:12:52.830
And there's a whole bunch of
instructions here, and more

00:12:52.830 --> 00:12:54.850
information on how to
actually do this.

00:12:54.850 --> 00:12:55.970
So if you want more detailed
instructions,

00:12:55.970 --> 00:12:58.190
please visit this site.

00:12:58.190 --> 00:13:02.790
But once you've downloaded it
to your machine or whatever,

00:13:02.790 --> 00:13:05.450
you can make a pull request
and get the source.

00:13:05.450 --> 00:13:08.120
And I have it actually sitting
over here in this folder,

00:13:08.120 --> 00:13:09.670
Google Analytics superProxy.

00:13:09.670 --> 00:13:11.840
So we'll show that
in a second.

00:13:11.840 --> 00:13:13.880
The other thing you need to do
is you want to create an

00:13:13.880 --> 00:13:16.280
actual application
on App Engine.

00:13:16.280 --> 00:13:17.760
So you can sign up
for an account.

00:13:25.060 --> 00:13:26.370
And you create an identifier.

00:13:26.370 --> 00:13:29.710
So for example, it could be
like My Proxy App, or

00:13:29.710 --> 00:13:30.500
something like that.

00:13:30.500 --> 00:13:32.990
You want to check if it's
available and create the app.

00:13:32.990 --> 00:13:35.000
But this is application
identifier is important

00:13:35.000 --> 00:13:36.020
because we need to use that.

00:13:36.020 --> 00:13:38.640
So in this case, I've
got My Proxy App.

00:13:38.640 --> 00:13:39.480
So we'll remember that
in a second.

00:13:39.480 --> 00:13:41.180
So you create the application.

00:13:41.180 --> 00:13:43.010
And you also need to
create an API.

00:13:52.830 --> 00:13:55.936
APIs console, and we'll
create a new project.

00:13:55.936 --> 00:13:58.538
And we'll call it
Proxy Project.

00:13:58.538 --> 00:14:31.960
[AUDIO DROPS]

00:14:31.960 --> 00:14:32.820
integration options.

00:14:32.820 --> 00:14:35.190
What's important here is that
you change this here to point

00:14:35.190 --> 00:14:37.570
to your new App Engine instance
that you just created

00:14:37.570 --> 00:14:38.570
a second ago.

00:14:38.570 --> 00:14:42.930
So in our example, ours
was My Proxy App.

00:14:42.930 --> 00:14:44.180
And it would be @appspot.com.

00:14:48.070 --> 00:14:50.520
And this is all in the
instructions also.

00:14:50.520 --> 00:14:56.000
But there's the callback URL
for OAuth is admin/auth.

00:14:56.000 --> 00:14:56.900
So that's the one configuration

00:14:56.900 --> 00:14:58.140
that you have to change.

00:14:58.140 --> 00:15:00.320
And then we don't need
to worry about this.

00:15:00.320 --> 00:15:02.750
And you create the client ID.

00:15:02.750 --> 00:15:25.250
[AUDIO DROPS]

00:15:25.250 --> 00:15:26.660
download it also.

00:15:26.660 --> 00:15:28.055
There's a source folder.

00:15:28.055 --> 00:15:29.640
And within that, there's
a few things you

00:15:29.640 --> 00:15:31.270
need to make changes.

00:15:31.270 --> 00:15:33.550
One is the app.yami file.

00:15:33.550 --> 00:15:36.190
So if we open that, we'll see
that at the top of that

00:15:36.190 --> 00:15:37.020
there's a first line.

00:15:37.020 --> 00:15:38.750
And it says application.

00:15:38.750 --> 00:15:41.570
And this is where you specify
the ID that you just created

00:15:41.570 --> 00:15:44.500
in App Engine that you want to
use for your instance of this.

00:15:44.500 --> 00:15:47.590
So it would be My Proxy App.

00:15:47.590 --> 00:15:49.130
Save that.

00:15:49.130 --> 00:15:50.440
So then we're done
with that file.

00:15:50.440 --> 00:15:51.695
It's configured.

00:15:51.695 --> 00:15:57.425
The other thing is we also want
to configure the client

00:15:57.425 --> 00:15:58.890
ID for the OAuth 2.0.

00:15:58.890 --> 00:16:01.445
So there's a config.pi
file here.

00:16:01.445 --> 00:16:04.240
We'll open that one and you'll
see the same thing.

00:16:04.240 --> 00:16:05.690
There's a few fields that
we have to fill out.

00:16:05.690 --> 00:16:06.970
And it tells you which
ones to replace.

00:16:06.970 --> 00:16:08.455
But we need a client ID.

00:16:08.455 --> 00:16:11.390
So in this case, we would go
back to the APIs console and

00:16:11.390 --> 00:16:13.930
we would copy the client ID.

00:16:13.930 --> 00:16:15.580
Copy that and replace this.

00:16:18.410 --> 00:16:21.860
We'd also copy the
client secret.

00:16:21.860 --> 00:16:25.420
And again, we'd put that into
the OAuth client secret.

00:16:25.420 --> 00:16:27.420
And we're going to deploy this
right to App Engine.

00:16:27.420 --> 00:16:29.420
But you could also run a local
environment if you wanted to.

00:16:29.420 --> 00:16:30.910
And there's instructions
on how to do this.

00:16:30.910 --> 00:16:34.310
But for this point, we're just
going to do a redirect URI.

00:16:34.310 --> 00:16:38.030
We only need the host
name and domain for

00:16:38.030 --> 00:16:39.340
this particular instance.

00:16:39.340 --> 00:16:41.110
We don't need to worry
about the URL part of

00:16:41.110 --> 00:16:42.290
it, or the page path.

00:16:42.290 --> 00:16:45.540
So in here, for the OAuth
redirect URI, I would just put

00:16:45.540 --> 00:16:48.230
proxyapp.appspot.com.

00:16:48.230 --> 00:16:50.230
And it automatically will
take care of the admin

00:16:50.230 --> 00:16:51.530
auths part for us.

00:16:51.530 --> 00:16:54.700
And then there's this secret
phrase down here, which is

00:16:54.700 --> 00:16:56.500
used for cross-site stuff.

00:16:56.500 --> 00:17:00.460
So you can just put some kind
of unique thing down there

00:17:00.460 --> 00:17:02.360
that you don't share
and keep secret.

00:17:02.360 --> 00:17:04.069
So all this should be kept
secret, and you're the only

00:17:04.069 --> 00:17:04.700
one that has access to it.

00:17:04.700 --> 00:17:08.700
But we save that, and
we close this.

00:17:08.700 --> 00:17:12.400
And then you want to launch and
deploy this on App Engine.

00:17:12.400 --> 00:17:14.680
So the way to do that now is--
well, I guess there's one more

00:17:14.680 --> 00:17:15.619
thing you might want
to configure.

00:17:15.619 --> 00:17:18.290
And this is optional, is the--

00:17:18.290 --> 00:17:21.869
in the controllers util,
there's a co.pi file.

00:17:21.869 --> 00:17:23.640
And this is the constants file
that you can-- there's a

00:17:23.640 --> 00:17:25.280
couple things you can
configure in here.

00:17:25.280 --> 00:17:26.920
It's up to you if you
want to do this.

00:17:26.920 --> 00:17:28.760
But it really depends on how
you want to deploy this.

00:17:28.760 --> 00:17:29.480
But there's two things.

00:17:29.480 --> 00:17:31.510
One is anonymized responses.

00:17:31.510 --> 00:17:33.200
And this is set to
false by default.

00:17:33.200 --> 00:17:36.310
But what this allows you to do
is you set this to true.

00:17:36.310 --> 00:17:39.120
Any response you get back from
Google Analytics usually

00:17:39.120 --> 00:17:41.710
contains information like the
profile ID, the account

00:17:41.710 --> 00:17:44.440
information, things like this
that are part of the request

00:17:44.440 --> 00:17:45.610
that you usually make.

00:17:45.610 --> 00:17:47.510
So in this case, what will
happen is if you put this to

00:17:47.510 --> 00:17:51.180
true, the responses you get
back, will be, those keys will

00:17:51.180 --> 00:17:52.410
be removed from the response.

00:17:52.410 --> 00:17:55.320
So we'll remove stuff like the
query itself, which contains

00:17:55.320 --> 00:17:56.390
profile information.

00:17:56.390 --> 00:17:57.750
And the account ID
and web property.

00:17:57.750 --> 00:18:00.860
Now this isn't a truly private
thing, but these are values

00:18:00.860 --> 00:18:02.920
that you may not just want to
make available and share.

00:18:02.920 --> 00:18:04.780
So if you set that to true,
that's what will

00:18:04.780 --> 00:18:06.220
happen in that case.

00:18:06.220 --> 00:18:09.390
And the other thing is that we
provide the functionality for

00:18:09.390 --> 00:18:10.340
relative dates.

00:18:10.340 --> 00:18:14.020
So you don't have to specify
in your query start date is

00:18:14.020 --> 00:18:17.130
July 23rd and end date is July
29th, or something like that.

00:18:17.130 --> 00:18:19.010
You can actually specify
relative dates.

00:18:19.010 --> 00:18:21.580
And those will automatically
get resolved for you every

00:18:21.580 --> 00:18:23.100
time a query is made.

00:18:23.100 --> 00:18:25.510
So in that case, we need to
determine what times, when

00:18:25.510 --> 00:18:26.830
should we resolve
these dates to?

00:18:26.830 --> 00:18:28.580
And by default, it's Pacific.

00:18:28.580 --> 00:18:30.400
But you can come in here
and change this to--

00:18:30.400 --> 00:18:34.160
so right now it supports North
American time zones and UTC.

00:18:34.160 --> 00:18:35.520
So if you're in the eastern and
you want to make sure that

00:18:35.520 --> 00:18:38.550
your queries are resolved to
eastern time executions, then

00:18:38.550 --> 00:18:39.860
you can do that.

00:18:39.860 --> 00:18:40.920
But for now, it's Pacific.

00:18:40.920 --> 00:18:43.210
So we'll close this.

00:18:43.210 --> 00:18:46.070
So those three files we edited
was the app.yaml, which was

00:18:46.070 --> 00:18:47.450
just putting your ID.

00:18:47.450 --> 00:18:49.650
There was the config.pi,
which is for your

00:18:49.650 --> 00:18:51.280
OAuth 2.0 client details.

00:18:51.280 --> 00:18:54.070
And then there's this co.pi,
which is in the utility

00:18:54.070 --> 00:18:56.000
folders, which allows
you to configure a

00:18:56.000 --> 00:18:57.370
few different options.

00:18:57.370 --> 00:18:58.680
But this is the nice
timing to do this.

00:18:58.680 --> 00:19:00.376
Once you've deployed the app,
it's going to be running and

00:19:00.376 --> 00:19:02.190
you won't have to
do this again.

00:19:02.190 --> 00:19:03.450
But let's look at how
you would deploy it.

00:19:03.450 --> 00:19:06.240
So if you have the Google App
Engine Launcher installed--

00:19:06.240 --> 00:19:08.090
and again, there's detailed
instructions on the GitHub

00:19:08.090 --> 00:19:09.750
site for this--

00:19:09.750 --> 00:19:12.750
you would actually just go to
Add Existing Application.

00:19:12.750 --> 00:19:14.302
Browse for it.

00:19:14.302 --> 00:19:16.420
And in this case, so I
have the superProxy

00:19:16.420 --> 00:19:16.730
folder sitting here.

00:19:16.730 --> 00:19:18.610
And here's the source.

00:19:18.610 --> 00:19:21.230
And you just want to go to the
folder that has the app.yaml

00:19:21.230 --> 00:19:22.300
in it at the root.

00:19:22.300 --> 00:19:24.170
And you choose that folder.

00:19:24.170 --> 00:19:25.360
And you say Add.

00:19:25.360 --> 00:19:28.410
And you'll see, now it's
added to the launcher.

00:19:28.410 --> 00:19:29.720
And then you can just
right-click it or go to

00:19:29.720 --> 00:19:32.700
Control and go to Deploy.

00:19:32.700 --> 00:19:35.610
And it'll ask you for your
Google account for App Engine,

00:19:35.610 --> 00:19:36.930
and it will deploy
to App Engine.

00:19:36.930 --> 00:19:39.310
And once it's deployed,
it's ready to be used.

00:19:39.310 --> 00:19:41.810
And as long as you have the same
account, Gmail account or

00:19:41.810 --> 00:19:45.090
Google account, for what you've
deployed and what App

00:19:45.090 --> 00:19:48.470
Engine instance you created,
then you'll be an admin of the

00:19:48.470 --> 00:19:50.410
actual application.

00:19:50.410 --> 00:19:53.370
OK, so we won't actually
deploy that.

00:19:53.370 --> 00:19:54.860
So let's take a look at--

00:19:54.860 --> 00:19:56.670
so this is the one time
thing you've created.

00:19:56.670 --> 00:19:58.570
It's deployed, and now you can
actually use superProxy.

00:19:58.570 --> 00:20:01.490
Let's see what that entails and
how you'd actually create

00:20:01.490 --> 00:20:04.400
the query and get
this working.

00:20:04.400 --> 00:20:06.320
So there's three things
on how to do this.

00:20:06.320 --> 00:20:09.820
So if you want to go from a
blank page, to this, where we

00:20:09.820 --> 00:20:12.360
have pie charts and things that
are getting data from

00:20:12.360 --> 00:20:15.900
public endpoints, I have
a file sitting here.

00:20:15.900 --> 00:20:19.190
So this is just a
how-to example.

00:20:19.190 --> 00:20:22.240
If you look at the source for
this file, you'll see that

00:20:22.240 --> 00:20:26.250
it's got just the standard
JavaScript here, which is

00:20:26.250 --> 00:20:28.080
nothing customized.

00:20:28.080 --> 00:20:30.630
You could copy and paste this
yourself and use this.

00:20:30.630 --> 00:20:32.430
And I could provide
this later.

00:20:32.430 --> 00:20:33.540
There's a couple things
we need to get.

00:20:33.540 --> 00:20:35.390
So let's create a query, and
let's see if we can get our

00:20:35.390 --> 00:20:38.270
chart to show up on this.

00:20:38.270 --> 00:20:42.070
So let's start by going to
the superProxy itself.

00:20:42.070 --> 00:20:46.630
So once you've deployed it, you
can visit the superProxy

00:20:46.630 --> 00:20:48.790
by going to the host
name /admin.

00:20:48.790 --> 00:20:52.190
And that'll get you to
this particular page.

00:20:52.190 --> 00:20:54.540
And the first thing you need to
do that initial time is to

00:20:54.540 --> 00:20:56.210
authorize the application
to access your

00:20:56.210 --> 00:20:57.830
Google Analytics data.

00:20:57.830 --> 00:20:59.860
So you'll see that there's an
Authorize Access button.

00:20:59.860 --> 00:21:00.920
And you click that.

00:21:00.920 --> 00:21:03.220
And it'll go through
the OAuth 2.0 flow.

00:21:03.220 --> 00:21:08.020
And you'll accept it, and we've
successfully connected.

00:21:08.020 --> 00:21:09.000
So now that we've connected--

00:21:09.000 --> 00:21:11.460
I'll just change thi--

00:21:11.460 --> 00:21:15.030
we can actually start creating
queries now.

00:21:15.030 --> 00:21:16.690
And you'll see something like
this when you come in after

00:21:16.690 --> 00:21:17.065
you've authenticated.

00:21:17.065 --> 00:21:18.690
And you only need to
authenticate the first time.

00:21:18.690 --> 00:21:20.210
And after that, it'll
stay authenticated

00:21:20.210 --> 00:21:21.530
until you revoke access.

00:21:21.530 --> 00:21:23.590
So it is only a one-time
thing you need to do.

00:21:23.590 --> 00:21:25.170
So what we want to do
is create a quick.

00:21:25.170 --> 00:21:26.240
So we want to make
something public.

00:21:26.240 --> 00:21:28.490
Let's do something like
we'll share the

00:21:28.490 --> 00:21:31.180
source medium and visits.

00:21:31.180 --> 00:21:33.390
And we'll do a pie chart
to show this.

00:21:33.390 --> 00:21:35.390
So we'll go to Create Query.

00:21:35.390 --> 00:21:36.580
And you have this interface
here to

00:21:36.580 --> 00:21:38.450
actually create the query.

00:21:38.450 --> 00:21:40.750
So right now, we're using the
core reporting API, obviously,

00:21:40.750 --> 00:21:41.720
to make these requests.

00:21:41.720 --> 00:21:44.140
And at this point we're asking
for, in the admin interface

00:21:44.140 --> 00:21:46.760
here, is the actual core
reporting API query that you

00:21:46.760 --> 00:21:47.880
want to make.

00:21:47.880 --> 00:21:50.020
So I suggest you can use
something like the query

00:21:50.020 --> 00:21:53.040
explorer to actually do
this query and to get

00:21:53.040 --> 00:21:53.660
the data you want.

00:21:53.660 --> 00:21:56.690
And then just copy the API
query and put it into the

00:21:56.690 --> 00:21:58.130
superProxy to use it.

00:21:58.130 --> 00:22:01.130
So for example, we'll do
something like ga source

00:22:01.130 --> 00:22:03.230
medium, which is a new dimension
we actually just

00:22:03.230 --> 00:22:04.890
released recently.

00:22:04.890 --> 00:22:07.610
And we'll do ga visits
for the actual data

00:22:07.610 --> 00:22:09.640
that we want to share.

00:22:09.640 --> 00:22:14.730
And we'll sort it by ga
visits descending.

00:22:14.730 --> 00:22:16.510
And the date doesn't really
matter, so we'll

00:22:16.510 --> 00:22:19.620
just get the data.

00:22:19.620 --> 00:22:20.580
So this looks good.

00:22:20.580 --> 00:22:21.840
And actually, we'll
just do top five.

00:22:21.840 --> 00:22:24.790
So I'll do max results five.

00:22:24.790 --> 00:22:26.290
And this looks like the
data I want to share.

00:22:26.290 --> 00:22:27.560
So this looks fine.

00:22:27.560 --> 00:22:28.930
The dates don't really matter
because we're going to use

00:22:28.930 --> 00:22:29.550
relative dates.

00:22:29.550 --> 00:22:31.390
We don't want it to be
a static report.

00:22:31.390 --> 00:22:33.900
We want it to be moving
over time.

00:22:33.900 --> 00:22:35.900
So a grab the URL here.

00:22:35.900 --> 00:22:38.200
We'll just copy this URL,
which is the actual core

00:22:38.200 --> 00:22:40.670
reporting API request.

00:22:40.670 --> 00:22:42.230
And we'll go back to
the superProxy.

00:22:42.230 --> 00:22:47.740
So we'll name this, let's say,
Top Five Source Mediums.

00:22:47.740 --> 00:22:51.920
And we're going to do it for
the last seven days.

00:22:51.920 --> 00:22:55.605
We'll refresh this, let's
just say, once a day or

00:22:55.605 --> 00:22:57.060
maybe twice a day.

00:22:57.060 --> 00:22:57.890
And this is in seconds.

00:22:57.890 --> 00:23:00.260
So we'll just say around
4,300 seconds.

00:23:00.260 --> 00:23:02.890
You have to do the
calculation.

00:23:02.890 --> 00:23:06.510
And then we'll paste in that
URL, which is the query URI

00:23:06.510 --> 00:23:08.820
for the particular data
that we want.

00:23:08.820 --> 00:23:10.570
And then we're going to
replace the dates with

00:23:10.570 --> 00:23:11.520
relative dates.

00:23:11.520 --> 00:23:13.180
So you can see here, there's
some supported date

00:23:13.180 --> 00:23:14.210
parameters.

00:23:14.210 --> 00:23:16.780
So one of them is today, which
will resolve to today's date

00:23:16.780 --> 00:23:18.580
when the query is executed.

00:23:18.580 --> 00:23:19.930
And then we have n days ago.

00:23:19.930 --> 00:23:22.970
So with these two things, you
can pretty much create any

00:23:22.970 --> 00:23:24.430
relative date query
that you'd like.

00:23:24.430 --> 00:23:26.720
So we're going to remove
the end date here and

00:23:26.720 --> 00:23:30.510
change it to today.

00:23:30.510 --> 00:23:33.020
And we'll change the start
date to six days ago.

00:23:33.020 --> 00:23:36.350
So six days ago and today will
give us seven days of data.

00:23:36.350 --> 00:23:41.730
So we'll change this
to six days ago.

00:23:41.730 --> 00:23:44.010
So any time this query gets
executed, it's going to, at

00:23:44.010 --> 00:23:46.140
that time, resolve the
dates properly.

00:23:46.140 --> 00:23:48.180
So tomorrow it will be today,
will be tomorrow, and it will

00:23:48.180 --> 00:23:48.760
be continuing to going on.

00:23:48.760 --> 00:23:51.210
So you're always going to have
the last seven days of data.

00:23:51.210 --> 00:23:54.030
So we have the option to test
the query, which we'll do.

00:23:54.030 --> 00:23:56.260
And oops, we made some
mistake here.

00:24:36.240 --> 00:24:37.530
Every 4,300 seconds.

00:24:37.530 --> 00:24:39.390
So the initial one will,
we should be

00:24:39.390 --> 00:24:40.540
scheduled and running.

00:24:40.540 --> 00:24:42.510
Probably in the next few seconds
or so we should be

00:24:42.510 --> 00:24:44.200
getting a response back.

00:24:44.200 --> 00:24:45.920
But you'll see this interface
now for each

00:24:45.920 --> 00:24:47.050
query that you have.

00:24:47.050 --> 00:24:48.260
And it has all this information

00:24:48.260 --> 00:24:49.000
about the query itself.

00:24:49.000 --> 00:24:51.590
So we have the name that we
just gave it, obviously.

00:24:51.590 --> 00:24:52.470
And we have this URL.

00:24:52.470 --> 00:24:55.120
And this URL here is
the public URL.

00:24:55.120 --> 00:24:58.100
So you can give this URL to
anybody, and they will get the

00:24:58.100 --> 00:24:59.520
response back from the query.

00:24:59.520 --> 00:25:01.200
So this is getting them
out of authentication.

00:25:01.200 --> 00:25:03.250
It's a public URL that works.

00:25:03.250 --> 00:25:04.180
Then we have formats.

00:25:04.180 --> 00:25:06.360
So we can do stuff like
CSV, Data Table.

00:25:06.360 --> 00:25:09.460
And those will provide the
same response, but in the

00:25:09.460 --> 00:25:11.430
specific format.

00:25:11.430 --> 00:25:13.240
And then we can see what the
original query was that we're

00:25:13.240 --> 00:25:15.010
actually using to drive this.

00:25:15.010 --> 00:25:16.210
And then we have other things
like scheduling.

00:25:16.210 --> 00:25:17.280
Like, is it running right now?

00:25:17.280 --> 00:25:19.800
It's currently scheduled to
run every 4,300 seconds.

00:25:19.800 --> 00:25:21.530
When was it last refreshed?

00:25:21.530 --> 00:25:23.480
And then we also have stuff
like, what is the last save

00:25:23.480 --> 00:25:24.490
requests we had?

00:25:24.490 --> 00:25:25.630
What does the response
look like?

00:25:25.630 --> 00:25:27.200
And what's the request count?

00:25:27.200 --> 00:25:29.020
How many times have people
actually requested this URL

00:25:29.020 --> 00:25:29.980
externally?

00:25:29.980 --> 00:25:32.470
And then what was the last
time they requested it?

00:25:32.470 --> 00:25:34.590
So if we click this
URL, if it's run

00:25:34.590 --> 00:25:37.200
already, we'll see a response.

00:25:37.200 --> 00:25:38.450
So this is the public.

00:25:42.150 --> 00:25:43.310
A proxytest.appspot.com.

00:25:43.310 --> 00:25:45.360
And this URL is now public.

00:25:45.360 --> 00:25:48.340
Anybody can visit this URL
and get this data.

00:25:48.340 --> 00:25:50.760
You'll see the response here is
from directly what it would

00:25:50.760 --> 00:25:52.710
look like from the core
reporting API response.

00:25:52.710 --> 00:25:54.030
It's just the same response.

00:25:54.030 --> 00:25:57.060
But because we enabled the
anonymized responses, there's

00:25:57.060 --> 00:25:58.490
actually no profile
data in this.

00:25:58.490 --> 00:26:01.440
It just has the raw
reporting data.

00:26:01.440 --> 00:26:03.790
And no account information
and profile data.

00:26:03.790 --> 00:26:04.460
So this is now published.

00:26:04.460 --> 00:26:07.400
It's cached, it's available
for us to use.

00:26:07.400 --> 00:26:11.250
If you click on the Data Table
Response format, we'll see

00:26:11.250 --> 00:26:12.550
that it comes back with
a little bit.

00:26:18.070 --> 00:26:20.110
Query, but it's in Data
Table format.

00:26:20.110 --> 00:26:21.870
And we can actually use this
directly with the Google

00:26:21.870 --> 00:26:23.410
Charts API, which is great.

00:26:23.410 --> 00:26:27.050
We can drive or our Charts API,
pie charts and all these

00:26:27.050 --> 00:26:29.400
things, with this particular
query.

00:26:29.400 --> 00:26:31.540
If we refresh this, we'll
actually see some updated

00:26:31.540 --> 00:26:33.070
information now for our query.

00:26:33.070 --> 00:26:36.940
So for example, we know it was
last refreshed 59 seconds ago,

00:26:36.940 --> 00:26:38.690
this particular data.

00:26:38.690 --> 00:26:41.980
And the last requested was 19
seconds ago, was the last time

00:26:41.980 --> 00:26:43.140
it was requested.

00:26:43.140 --> 00:26:44.320
And it's been requested
two times.

00:26:44.320 --> 00:26:47.000
And then we can see here the
actual response that we have

00:26:47.000 --> 00:26:48.090
saved in the data store.

00:26:48.090 --> 00:26:49.170
So this gives you some
information about

00:26:49.170 --> 00:26:50.150
what's going on.

00:26:50.150 --> 00:26:51.830
You can also pause scheduling.

00:26:51.830 --> 00:26:53.260
You can refresh the query now.

00:26:53.260 --> 00:26:55.250
If you don't want to wait
another 4,300 seconds, you can

00:26:55.250 --> 00:26:56.750
tell it to refresh now.

00:26:56.750 --> 00:26:59.570
And you could also disable the
endpoint, which will disable

00:26:59.570 --> 00:27:00.940
it from being available
publicly.

00:27:00.940 --> 00:27:03.605
So if you do that, then anybody
who tries to visit the

00:27:03.605 --> 00:27:07.500
URL will get an error message
saying it's not available.

00:27:07.500 --> 00:27:09.030
So now that we see the interface
and we have this

00:27:09.030 --> 00:27:12.550
query created, let's actually
use it and try to drive this

00:27:12.550 --> 00:27:15.130
pie chart that we have with
this data that we have.

00:27:15.130 --> 00:27:17.530
So I'm going to go to
the data response.

00:27:17.530 --> 00:27:18.360
This is the one we want.

00:27:18.360 --> 00:27:19.180
We want to use Data Table.

00:27:19.180 --> 00:27:21.400
And we'll copy this URL.

00:27:21.400 --> 00:27:22.560
And now this is our
current case.

00:27:22.560 --> 00:27:24.810
So if I refresh it, we'll
see we get nothing here.

00:27:24.810 --> 00:27:27.130
And let's go to our source
for that page.

00:27:27.130 --> 00:27:29.770
Again, all this JavaScript
here is currently just

00:27:29.770 --> 00:27:31.070
standard JavaScript.

00:27:31.070 --> 00:27:32.930
There's no special
customization or

00:27:32.930 --> 00:27:34.140
anything like that.

00:27:34.140 --> 00:27:36.600
We have a div down here that's
going to hold the chart.

00:27:36.600 --> 00:27:39.980
And then we have this Google
Charts JavaScript that

00:27:39.980 --> 00:27:42.225
interacts with the servers
to create these charts.

00:27:42.225 --> 00:27:45.860
So there's a data source URL
that we want to replace with

00:27:45.860 --> 00:27:48.430
our public endpoint.

00:27:48.430 --> 00:27:49.090
And it doesn't need
to be HTTPS.

00:27:49.090 --> 00:27:51.900
We can just make it HTTP.

00:27:51.900 --> 00:27:54.350
So this is our data that points
to our source medium,

00:27:54.350 --> 00:27:56.020
top five sources.

00:27:56.020 --> 00:27:57.720
And we're going to just replace
the title with our own

00:27:57.720 --> 00:27:59.060
little title.

00:27:59.060 --> 00:28:04.295
Top five source mediums
last seven days.

00:28:08.250 --> 00:28:10.226
And we can replace also--

00:28:10.226 --> 00:28:12.140
there's a refresh interval.

00:28:12.140 --> 00:28:16.720
Since we're updating this data
every twice a day, we can just

00:28:16.720 --> 00:28:19.080
change this to around the
same interval or less.

00:28:19.080 --> 00:28:21.610
It doesn't matter.

00:28:21.610 --> 00:28:23.490
And this is just going to be
if someone leaves the page

00:28:23.490 --> 00:28:25.880
open, this is how often it's
going to refresh that page.

00:28:25.880 --> 00:28:27.810
But most times, you might
not need that.

00:28:27.810 --> 00:28:29.490
So let's save this.

00:28:29.490 --> 00:28:30.870
We have a response there.

00:28:30.870 --> 00:28:32.120
And let's refresh the page.

00:28:35.510 --> 00:28:36.820
And there it is.

00:28:36.820 --> 00:28:39.310
So this has actually made a
request directly to the

00:28:39.310 --> 00:28:42.640
superProxy and requested the
data that we just created.

00:28:42.640 --> 00:28:46.400
And again, I could send this
HTML file to anybody or post

00:28:46.400 --> 00:28:47.380
this anywhere.

00:28:47.380 --> 00:28:48.540
And anybody who visits
it would be

00:28:48.540 --> 00:28:49.990
able to see this chart.

00:28:49.990 --> 00:28:52.500
And again, it's cached, so it's
fast [INAUDIBLE] quota.

00:28:52.500 --> 00:28:56.330
And it's all being directed
through the superProxy.

00:28:56.330 --> 00:28:58.260
So we did it.

00:28:58.260 --> 00:29:00.060
Let's go back and talk a little
bit more about some

00:29:00.060 --> 00:29:00.640
other stuff that we do.

00:29:00.640 --> 00:29:02.620
But this is one example of what
you could do with it.

00:29:02.620 --> 00:29:05.220
There's a lot of obviously other
use cases that you could

00:29:05.220 --> 00:29:05.920
definitely implement this.

00:29:05.920 --> 00:29:07.320
You could use other
Charts APIs.

00:29:07.320 --> 00:29:09.270
What's important is that you
have to make sure the data

00:29:09.270 --> 00:29:12.880
that you're using, the data
table response, is going to

00:29:12.880 --> 00:29:14.100
work with certain
visualizations.

00:29:14.100 --> 00:29:15.580
Because some visualizations
require

00:29:15.580 --> 00:29:17.170
certain columns and data.

00:29:17.170 --> 00:29:20.230
So as long as you have that
configured properly, you can

00:29:20.230 --> 00:29:22.830
definitely just pop in the URL
to the data source URL

00:29:22.830 --> 00:29:25.835
attribute of a Charts API and
automatically use the

00:29:25.835 --> 00:29:28.770
superProxy as a source for all
your different charts.

00:29:28.770 --> 00:29:30.040
So yeah, pat yourself
on the back.

00:29:30.040 --> 00:29:32.800
If you just did that, you just
automatically opened up some

00:29:32.800 --> 00:29:36.320
data to the world through
a the superProxy.

00:29:36.320 --> 00:29:38.860
So let's continue a little bit
and see a few other things

00:29:38.860 --> 00:29:42.390
that I want to touch on to make
you guys excited about

00:29:42.390 --> 00:29:42.870
using this thing.

00:29:42.870 --> 00:29:45.150
The more features that are
coming, things that you can do

00:29:45.150 --> 00:29:47.140
with this that aren't
really apparent.

00:29:47.140 --> 00:29:49.890
That you didn't see there, but
are actually happening in the

00:29:49.890 --> 00:29:50.830
background.

00:29:50.830 --> 00:29:52.630
So things like you can
do multiple users.

00:29:52.630 --> 00:29:54.990
So although you've deployed this
yourself and you're an

00:29:54.990 --> 00:29:57.800
admin for the application,
you can add

00:29:57.800 --> 00:29:59.510
users through the interface.

00:29:59.510 --> 00:30:01.730
You'll see there's a Manage
Users, and you can add other

00:30:01.730 --> 00:30:03.800
users that can come in,
authorize their own Google

00:30:03.800 --> 00:30:05.080
Analytics account, and
create your own

00:30:05.080 --> 00:30:08.310
queries that become public.

00:30:08.310 --> 00:30:09.740
Because of the caching--

00:30:09.740 --> 00:30:11.410
this is a huge thing-- you're
going to save a lot of quota.

00:30:11.410 --> 00:30:12.860
If you have a lot of visitors,
it's going to

00:30:12.860 --> 00:30:14.240
scale nicely for you.

00:30:14.240 --> 00:30:15.510
Because you're not going to
have to hit the Google

00:30:15.510 --> 00:30:17.310
Analytics API service
for each request.

00:30:17.310 --> 00:30:20.950
You can rely on the proxy to
take care of that for you.

00:30:20.950 --> 00:30:23.930
Auto scheduling This is another
feature that happens

00:30:23.930 --> 00:30:24.680
in the background.

00:30:24.680 --> 00:30:28.120
So for example, just say you
create a query and you say, I

00:30:28.120 --> 00:30:29.780
want to refresh this
every hour.

00:30:29.780 --> 00:30:31.330
And you make the URL public.

00:30:31.330 --> 00:30:32.520
But nobody visits the URL.

00:30:32.520 --> 00:30:35.800
And it's been two hours and
nobody's visiting the URL.

00:30:35.800 --> 00:30:38.530
What will actually happen, the
superProxy will look and say,

00:30:38.530 --> 00:30:40.640
OK this hasn't been requested
for a couple hours.

00:30:40.640 --> 00:30:42.380
We'll pause the scheduling
for now.

00:30:42.380 --> 00:30:45.670
We won't make any more updates
to Google Analytics to get

00:30:45.670 --> 00:30:48.200
more data, because nobody's
using it anyways.

00:30:48.200 --> 00:30:49.680
And this is going to save
you on quota again.

00:30:49.680 --> 00:30:51.470
Because now you're not
requesting data that isn't

00:30:51.470 --> 00:30:53.230
necessarily being used.

00:30:53.230 --> 00:30:56.510
Now subsequently, if someone
does visit and uses that URL,

00:30:56.510 --> 00:30:59.090
it will go and fetch the latest
data for the person, or

00:30:59.090 --> 00:31:02.190
for the visitor, return that
latest response to them, and

00:31:02.190 --> 00:31:04.280
then automatically start
scheduling again every hour.

00:31:04.280 --> 00:31:06.350
And it will continue to
do that, and does

00:31:06.350 --> 00:31:08.120
that for any queries.

00:31:08.120 --> 00:31:09.280
So again, it's saving
you on quote.

00:31:09.280 --> 00:31:13.130
And it's a little bit just a
nice feature to have, to not

00:31:13.130 --> 00:31:16.550
use up quota that doesn't
need to be used.

00:31:16.550 --> 00:31:18.155
The other thing is, we
also handle error

00:31:18.155 --> 00:31:19.940
logging, or error responses.

00:31:19.940 --> 00:31:21.350
So it does happen every
once in a while.

00:31:21.350 --> 00:31:23.610
You might get a response
back from the service.

00:31:23.610 --> 00:31:26.060
Or something, maybe a token's
expired, or something's

00:31:26.060 --> 00:31:28.170
happened that's unexpected.

00:31:28.170 --> 00:31:30.930
In that case, when it does the
refresh to get the latest data

00:31:30.930 --> 00:31:34.350
from Google Analytics, if it was
an error, it will log the

00:31:34.350 --> 00:31:36.400
error and retry again.

00:31:36.400 --> 00:31:39.020
But it won't return back an
error response to the user.

00:31:39.020 --> 00:31:40.560
So it will always return back.

00:31:40.560 --> 00:31:41.240
The best [INAUDIBLE]

00:31:41.240 --> 00:31:45.130
to return back the most recent
successful response.

00:31:45.130 --> 00:31:46.870
So if you continue to get
errors, we're always going to

00:31:46.870 --> 00:31:50.450
return back to data that's
actually from a

00:31:50.450 --> 00:31:52.320
200 successful response.

00:31:52.320 --> 00:31:53.980
And this is is great so
users aren't going

00:31:53.980 --> 00:31:55.270
to have broken charts.

00:31:55.270 --> 00:31:57.780
You're not going to have error
messages showing up on pages.

00:31:57.780 --> 00:32:00.440
And also, after you've hit
about 10 errors, it will

00:32:00.440 --> 00:32:03.090
automatically pause the
scheduling for that query.

00:32:03.090 --> 00:32:05.360
And it'll require the admin
to come in and make sure

00:32:05.360 --> 00:32:06.090
to clear the error.

00:32:06.090 --> 00:32:08.470
And at least address the
situations to see what the

00:32:08.470 --> 00:32:11.480
problem is.

00:32:11.480 --> 00:32:12.920
And then also we support
callbacks.

00:32:12.920 --> 00:32:16.330
So if you want to query maybe
a JSON response with a

00:32:16.330 --> 00:32:19.020
callback URL because you want to
handle it and do some maybe

00:32:19.020 --> 00:32:21.530
client side parsing, you can
definitely use a callback.

00:32:21.530 --> 00:32:23.760
And this is described on
the GitHub readme.

00:32:23.760 --> 00:32:27.170
So definitely it's another
feature that people wanted and

00:32:27.170 --> 00:32:29.370
is part of this.

00:32:29.370 --> 00:32:30.440
So for the future--

00:32:30.440 --> 00:32:32.150
and we talked a little bit about
extensibility and what

00:32:32.150 --> 00:32:35.160
was important for this thing--
in the future, you can imagine

00:32:35.160 --> 00:32:37.350
that we have [INAUDIBLE]
response, which works really

00:32:37.350 --> 00:32:40.460
well with the Google Charts.

00:32:40.460 --> 00:32:42.520
But you can imagine, you might
want to provide formats that

00:32:42.520 --> 00:32:44.600
work really well with other
visualization libraries.

00:32:44.600 --> 00:32:46.210
And this is definitely possible
because you can take

00:32:46.210 --> 00:32:47.550
the response.

00:32:47.550 --> 00:32:51.670
We've made it very easy to
transform to new format that

00:32:51.670 --> 00:32:53.370
you can return.

00:32:53.370 --> 00:32:55.220
So definitely, this is something
that the community--

00:32:55.220 --> 00:32:58.160
and as much as we can, we try
to provide more formats for

00:32:58.160 --> 00:33:00.650
people that are of interest.

00:33:00.650 --> 00:33:03.250
Also, we can do stuff like maybe
in the future, maybe day

00:33:03.250 --> 00:33:06.170
comparison, being able to handle
calculated metrics kind

00:33:06.170 --> 00:33:08.700
of responses for certain
use cases.

00:33:08.700 --> 00:33:09.070
But it's early on.

00:33:09.070 --> 00:33:11.810
So we'll see where there's
demand and what people maybe

00:33:11.810 --> 00:33:13.070
are looking for.

00:33:13.070 --> 00:33:15.490
And then also, you could use
this as a testing platform.

00:33:15.490 --> 00:33:19.440
Creates some queries, and test
against the proxy instead of

00:33:19.440 --> 00:33:21.180
the actual Google Analytics
service.

00:33:21.180 --> 00:33:24.800
Which should save you
quota, and maybe

00:33:24.800 --> 00:33:25.920
give you more stable--

00:33:25.920 --> 00:33:27.780
if you're looking for a
specific response, you

00:33:27.780 --> 00:33:29.610
definitely can use this as
a platform for that.

00:33:29.610 --> 00:33:30.690
And there's a whole bunch
of other use cases.

00:33:30.690 --> 00:33:32.270
I'm sure people will figure
out what they can

00:33:32.270 --> 00:33:32.820
do with this thing.

00:33:32.820 --> 00:33:36.250
But it's freely available.

00:33:36.250 --> 00:33:36.870
It's open source.

00:33:36.870 --> 00:33:39.442
I GitHub, so I'd recommend
you check it out.

00:33:39.442 --> 00:33:41.650
And we'll provide some
resources here.

00:33:41.650 --> 00:33:44.500
Definitely go to the GitHub,
to the repo.

00:33:44.500 --> 00:33:47.190
There's also a link on
developers.google.com, which

00:33:47.190 --> 00:33:49.620
gives you a little more detail
about the Manage Users and

00:33:49.620 --> 00:33:51.890
kind of other information
around the proxy that we

00:33:51.890 --> 00:33:53.110
didn't cover today.

00:33:53.110 --> 00:33:55.410
And then the chart wrapper,
which is that JavaScript I was

00:33:55.410 --> 00:33:57.350
using as part of the example.

00:33:57.350 --> 00:34:00.070
You can go to the Charts
developer's site.

00:34:00.070 --> 00:34:01.580
And there's a link here.

00:34:01.580 --> 00:34:03.250
And that'll show you that
the JavaScript snippet.

00:34:03.250 --> 00:34:04.760
And I can provide that
as a sample also.

00:34:04.760 --> 00:34:07.450
But it's really just easy
as providing the

00:34:07.450 --> 00:34:08.900
URL as a data source.

00:34:08.900 --> 00:34:11.219
And then of course, App Engine
and APIs Console for more

00:34:11.219 --> 00:34:13.690
information on how to
deploy and use this.

00:34:13.690 --> 00:34:16.199
So I want to thank you very
much for joining me today.

00:34:16.199 --> 00:34:17.320
I hope this was useful
for you.

00:34:17.320 --> 00:34:20.129
And I hope some of you will be
able to take advantage of some

00:34:20.129 --> 00:34:22.580
of the features that
the proxy provides.

00:34:22.580 --> 00:34:24.600
And definitely, download Google
Analytics superProxy

00:34:24.600 --> 00:34:26.170
and let me know how things go.

00:34:26.170 --> 00:34:27.420
Thanks, bye.

