WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.340
[MUSIC PLAYING]

00:00:06.129 --> 00:00:07.004
XERXES DOTIWALLA: Hi.

00:00:07.004 --> 00:00:10.010
I'm Xerxes, developer
advocate here at Google,

00:00:10.010 --> 00:00:14.480
back with the next installment
in our AdWords API series.

00:00:14.480 --> 00:00:16.710
Let's take a closer
look at the anatomy

00:00:16.710 --> 00:00:20.320
of an API call by digging into
the code samples which can

00:00:20.320 --> 00:00:23.260
make your life a lot easier.

00:00:23.260 --> 00:00:25.860
Jump into Eclipse and
open up the Java file

00:00:25.860 --> 00:00:30.260
we used back in episode
two, getcampaigns.java.

00:00:30.260 --> 00:00:32.461
If you have no idea
what I'm talking about,

00:00:32.461 --> 00:00:33.960
please go back and
watch the earlier

00:00:33.960 --> 00:00:36.630
videos in this playlist.

00:00:36.630 --> 00:00:40.260
In getcampaigns.java, you'll
notice some boilerplate code

00:00:40.260 --> 00:00:43.140
in main that does the
following-- credential

00:00:43.140 --> 00:00:48.360
generation, AdWord session
creation, and AdWord services

00:00:48.360 --> 00:00:50.626
instantiation.

00:00:50.626 --> 00:00:52.000
You'll become
familiar with these

00:00:52.000 --> 00:00:55.020
as you explore the
client libraries.

00:00:55.020 --> 00:00:57.960
There's one other line
you may also need.

00:00:57.960 --> 00:01:00.500
Recall that we set
our client customer

00:01:00.500 --> 00:01:04.360
ID in the ads.properties file.

00:01:04.360 --> 00:01:07.340
But what if you have many
client customer accounts

00:01:07.340 --> 00:01:10.370
under your [? MTC ?] account?

00:01:10.370 --> 00:01:14.030
In that case, you can remove it
from the ads.properties file,

00:01:14.030 --> 00:01:19.310
and programmatically set it
via the AdWord session object.

00:01:19.310 --> 00:01:23.120
After the object is built,
call set client customer

00:01:23.120 --> 00:01:26.170
ID to dynamically set it.

00:01:26.170 --> 00:01:28.060
I'll take this
opportunity to tell you

00:01:28.060 --> 00:01:30.180
probably the most
important thing

00:01:30.180 --> 00:01:33.690
to know about the average API.

00:01:33.690 --> 00:01:37.570
The code samples
are your friends.

00:01:37.570 --> 00:01:41.250
They provide bite-sized
examples of the most popular API

00:01:41.250 --> 00:01:42.660
functionality.

00:01:42.660 --> 00:01:45.890
They are the absolute
best place to start when

00:01:45.890 --> 00:01:48.060
building your own application.

00:01:48.060 --> 00:01:51.210
For example, they cover
account management,

00:01:51.210 --> 00:01:55.820
campaign management, error
handling, optimization,

00:01:55.820 --> 00:01:59.800
reporting, targeting, and more.

00:01:59.800 --> 00:02:02.960
The two main buckets of
the API's functionality

00:02:02.960 --> 00:02:05.790
are reporting and automation.

00:02:05.790 --> 00:02:08.050
Let's dive into reporting now.

00:02:08.050 --> 00:02:12.360
So we start with our best
friends-- the code samples.

00:02:12.360 --> 00:02:14.740
Go to Eclipse and open
downloadcriteriareport.java.

00:02:18.360 --> 00:02:22.120
You'll notice the boilerplate
code mentioned earlier in main.

00:02:22.120 --> 00:02:26.780
The run example method has the
interesting code in this class.

00:02:26.780 --> 00:02:30.150
Here we create an object
hierarchy defining

00:02:30.150 --> 00:02:32.720
the report we want,
then we pass it

00:02:32.720 --> 00:02:35.506
to an instance of
report downloader.

00:02:35.506 --> 00:02:37.380
Go ahead and run
downloadcriteriareport.java.

00:02:40.830 --> 00:02:42.770
The Eclipse console
will print the location

00:02:42.770 --> 00:02:44.710
of the downloaded file.

00:02:44.710 --> 00:02:48.530
You'll notice that the sample
code specifies a report type--

00:02:48.530 --> 00:02:50.580
in this case,
criteria performance

00:02:50.580 --> 00:02:53.849
report-- and some fields.

00:02:53.849 --> 00:02:55.390
What other report
types are available

00:02:55.390 --> 00:02:58.170
and what fields do they contain?

00:02:58.170 --> 00:03:01.290
Here is a complete
reference document.

00:03:01.290 --> 00:03:03.460
You can use this
sample code along

00:03:03.460 --> 00:03:08.460
with that document to download
whatever reports you need.

00:03:08.460 --> 00:03:11.140
In addition to defining
reports with an object

00:03:11.140 --> 00:03:13.250
hierarchy like
this, you can also

00:03:13.250 --> 00:03:18.540
use AWQL, or AdWords
Query Language.

00:03:18.540 --> 00:03:20.780
This is a SQL like
language that allows

00:03:20.780 --> 00:03:23.210
you to build reports
in a less verbose way

00:03:23.210 --> 00:03:25.330
than through objects.

00:03:25.330 --> 00:03:29.810
Compare the sample code we just
ran with downloadcriteriareport

00:03:29.810 --> 00:03:30.460
with AWQL.java.

00:03:33.330 --> 00:03:39.020
They retrieve the same report,
but the AWQL is more concise.

00:03:39.020 --> 00:03:43.800
The report types and fields are
the same for either approach.

00:03:43.800 --> 00:03:47.870
So now that you understand
the fundamentals of reporting,

00:03:47.870 --> 00:03:52.750
you're equipped to build your
own custom reporting platform.

00:03:52.750 --> 00:03:57.300
We've come a long way in these
videos, and in the next video,

00:03:57.300 --> 00:03:59.810
we'll look at how to
make updates to the API,

00:03:59.810 --> 00:04:03.200
and thus enable some
interesting automation.

00:04:03.200 --> 00:04:07.040
Thanks for watching, and I hope
to see you in future episodes.

00:04:07.040 --> 00:04:09.790
[MUSIC PLAYING]

