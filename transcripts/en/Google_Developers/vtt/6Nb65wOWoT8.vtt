WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:00.930
BILL LUAN: It is a very

00:00:00.930 --> 00:00:03.010
interesting developer community.

00:00:03.010 --> 00:00:03.840
FEMALE SPEAKER: I'm
glad somebody

00:00:03.840 --> 00:00:04.870
has asked this question.

00:00:04.870 --> 00:00:05.120
I think--

00:00:05.120 --> 00:00:06.413
MALE SPEAKER: This is where
the magic happens.

00:00:06.413 --> 00:00:07.875
FEMALE SPEAKER: This is
primarily a question and

00:00:07.875 --> 00:00:08.490
answer show.

00:00:08.490 --> 00:00:10.565
So if any of you out there would
like to ask questions--

00:00:10.565 --> 00:00:14.235
[MUSIC PLAYING]

00:00:17.500 --> 00:00:18.220
PETE LEPAGE: All right.

00:00:18.220 --> 00:00:20.280
Well, welcome everybody.

00:00:20.280 --> 00:00:24.660
This is the first of a series
of Chrome Apps Hangouts.

00:00:24.660 --> 00:00:25.660
My name's Pete LePage.

00:00:25.660 --> 00:00:27.990
I'm a developer advocate
on the Chrome team.

00:00:27.990 --> 00:00:31.590
And I'd like to introduce you to
a couple of folks who we've

00:00:31.590 --> 00:00:33.190
got with us today.

00:00:33.190 --> 00:00:34.480
We'll start with Paul.

00:00:34.480 --> 00:00:35.430
PAUL LEWIS: Hi, I'm Paul.

00:00:35.430 --> 00:00:36.680
Paul Lewis.

00:00:36.680 --> 00:00:40.920
There are a lot of Pauls on the
Developer Relations team.

00:00:40.920 --> 00:00:44.440
So I'm Paul Lewis, I work on
essentially the Chrome team,

00:00:44.440 --> 00:00:46.750
and I'm on the Chrome
Apps team as well.

00:00:46.750 --> 00:00:47.350
PETE LEPAGE: Awesome.

00:00:47.350 --> 00:00:49.235
And Paul, you're in
London, right?

00:00:49.235 --> 00:00:50.060
PAUL LEWIS: That is
correct, yeah.

00:00:50.060 --> 00:00:50.710
London.

00:00:50.710 --> 00:00:51.320
PETE LEPAGE: Awesome.

00:00:51.320 --> 00:00:55.365
All right, and I'll pass
it over to Renato.

00:00:55.365 --> 00:00:57.150
RENATO MANGINI: Hello, guys.

00:00:57.150 --> 00:00:59.850
I'm Renato Mangini, and
I'm based in Brazil.

00:00:59.850 --> 00:01:01.560
I am also a developer.

00:01:01.560 --> 00:01:04.300
I am engineer for the
Chrome Apps team.

00:01:04.300 --> 00:01:05.930
Yeah, that's it.

00:01:05.930 --> 00:01:06.840
PETE LEPAGE: Cool.

00:01:06.840 --> 00:01:10.090
And so you're in Brazil and--

00:01:10.090 --> 00:01:11.010
RENATO MANGINI: Yes.

00:01:11.010 --> 00:01:11.490
PETE LEPAGE: All right.

00:01:11.490 --> 00:01:13.730
And so I'm here in New York.

00:01:13.730 --> 00:01:16.650
So we've got a pretty wide
range of folks from

00:01:16.650 --> 00:01:17.640
all over the world.

00:01:17.640 --> 00:01:20.990
And we've been working on Chrome
Apps now for the last

00:01:20.990 --> 00:01:21.790
couple months.

00:01:21.790 --> 00:01:25.770
We announced Chrome Apps back at
Google I/O, and there were

00:01:25.770 --> 00:01:29.120
a couple of sessions that
we had at Google I/O.

00:01:29.120 --> 00:01:31.520
If you haven't had a chance to
check those out, you should

00:01:31.520 --> 00:01:32.160
check those out.

00:01:32.160 --> 00:01:35.990
We'll put the links to the
videos in the comments after

00:01:35.990 --> 00:01:39.450
the fact, but there were two
sessions that were presented

00:01:39.450 --> 00:01:41.820
at Google I/O. The first
one was just a general

00:01:41.820 --> 00:01:43.870
introduction to the
next generation of

00:01:43.870 --> 00:01:45.660
Chrome packaged apps.

00:01:45.660 --> 00:01:50.820
And then the other one was how
to convert or how to upgrade a

00:01:50.820 --> 00:01:53.090
web app to a Chrome
packaged app.

00:01:55.790 --> 00:01:58.850
As we started thinking about
building these Chrome packaged

00:01:58.850 --> 00:02:02.130
apps and how they evolved, there
were a couple of things

00:02:02.130 --> 00:02:04.630
that we thought about
and realized.

00:02:04.630 --> 00:02:08.850
One is that the web ecosystem
is really thriving.

00:02:08.850 --> 00:02:11.920
Chrome has more than
310 million active

00:02:11.920 --> 00:02:14.210
users around the world.

00:02:14.210 --> 00:02:17.780
We've seen many, many
applications downloaded from

00:02:17.780 --> 00:02:19.150
the Chrome Web Store.

00:02:19.150 --> 00:02:24.150
And users are just asking for
web apps all over the place.

00:02:24.150 --> 00:02:28.990
And we wanted to take web
apps to the next step.

00:02:28.990 --> 00:02:34.020
And so we tried to focus
on four key components.

00:02:34.020 --> 00:02:38.080
The first is really about
breaking out of the browser so

00:02:38.080 --> 00:02:41.840
that web apps feel like they're
installed, and they're

00:02:41.840 --> 00:02:44.790
native on your computer.

00:02:44.790 --> 00:02:48.510
They interact in the same way so
that when you click on your

00:02:48.510 --> 00:02:52.570
doc or on the Start menu, the
applications are just there.

00:02:52.570 --> 00:02:54.470
And they don't have
an address bar.

00:02:54.470 --> 00:02:56.350
They don't have a Back
or Forward button, or

00:02:56.350 --> 00:02:57.600
anything like that.

00:03:00.120 --> 00:03:03.930
The second piece was around
enhancing the UI providing a

00:03:03.930 --> 00:03:07.810
much better UI that is
completely configurable by

00:03:07.810 --> 00:03:11.270
you, the web developer.

00:03:11.270 --> 00:03:13.580
When we say we take away the
address bar, the Back and

00:03:13.580 --> 00:03:16.930
Forwards button, that's great.

00:03:16.930 --> 00:03:20.220
But the thing that it allows
you to really do is go and

00:03:20.220 --> 00:03:27.410
specifically design how the bar
looks across the top so

00:03:27.410 --> 00:03:31.610
that it looks how you
want it to look.

00:03:31.610 --> 00:03:35.720
The third piece we focused on
was making these apps work

00:03:35.720 --> 00:03:38.130
offline by default.

00:03:38.130 --> 00:03:43.190
And offline by default is kind
of a loaded comment.

00:03:43.190 --> 00:03:45.190
It's got a lot of different
meanings.

00:03:45.190 --> 00:03:47.070
But there's a couple
of pieces that are

00:03:47.070 --> 00:03:49.250
really important there.

00:03:49.250 --> 00:03:50.620
These apps should work--

00:03:50.620 --> 00:03:53.190
once they're installed,
you hit Run,

00:03:53.190 --> 00:03:54.440
they should just work.

00:03:54.440 --> 00:03:56.750
Whether you've got a fast
internet connection, whether

00:03:56.750 --> 00:03:58.970
you've got a slow internet
connection, whether you've got

00:03:58.970 --> 00:04:03.140
an intermittent internet
connection, these

00:04:03.140 --> 00:04:04.060
apps should just work.

00:04:04.060 --> 00:04:07.960
And the reason that they just
work is because we've taken

00:04:07.960 --> 00:04:11.420
all of the resources, the HTML,
the JavaScript, the

00:04:11.420 --> 00:04:16.079
images, all of the assets for
the application sit locally on

00:04:16.079 --> 00:04:17.600
your computer.

00:04:17.600 --> 00:04:21.700
And then any of the other
resources, the data that may

00:04:21.700 --> 00:04:23.950
go back and forth, is the
only thing that's

00:04:23.950 --> 00:04:25.420
transferred back and forth.

00:04:25.420 --> 00:04:29.330
So everything in order for the
app to run sits locally, but

00:04:29.330 --> 00:04:32.270
the data goes back and forth.

00:04:32.270 --> 00:04:36.480
And then, finally, the last
piece is we wanted to give web

00:04:36.480 --> 00:04:40.370
developers access to things that
they've never had before.

00:04:40.370 --> 00:04:42.900
In general, we kind of split
them off into two different

00:04:42.900 --> 00:04:44.010
categories--

00:04:44.010 --> 00:04:49.160
system-level access and
service-level APIs.

00:04:49.160 --> 00:04:52.640
With the system-level access
stuff, you have access to

00:04:52.640 --> 00:04:56.480
things like the networking stack
so that you can actually

00:04:56.480 --> 00:04:59.610
go and do raw TCP or UDP
requests, right?

00:04:59.610 --> 00:05:02.770
You could never really do that
with a web app before.

00:05:02.770 --> 00:05:04.900
If you wanted to do something
like that, the most you could

00:05:04.900 --> 00:05:07.240
do is do an XML HTTP request.

00:05:07.240 --> 00:05:10.390
Maybe you could do a web socket
or something like that,

00:05:10.390 --> 00:05:11.980
but you couldn't actually
go and do a

00:05:11.980 --> 00:05:19.380
raw TCP or UDP request.

00:05:19.380 --> 00:05:22.970
We also wanted to give
developers access to the USB

00:05:22.970 --> 00:05:26.730
in serial and Bluetooth so that
you can actually go and

00:05:26.730 --> 00:05:30.850
write apps that are more
powerful than ever before.

00:05:30.850 --> 00:05:33.740
You can plug an infrared
blaster in.

00:05:33.740 --> 00:05:37.960
Or you can go plug-in, oh,
say, some LEGO Mindstorm.

00:05:37.960 --> 00:05:39.890
We'll show that in
a little bit.

00:05:39.890 --> 00:05:43.680
But really being able to plug
applications and make them

00:05:43.680 --> 00:05:45.920
more powerful, let them
take advantage

00:05:45.920 --> 00:05:49.060
of the entire system.

00:05:49.060 --> 00:05:52.180
So by allowing developers to
really build these things, we

00:05:52.180 --> 00:05:57.000
get a much bigger and more
powerful set of APIs, and we

00:05:57.000 --> 00:06:00.450
allow developers to create much
more interesting and much

00:06:00.450 --> 00:06:03.710
more exciting applications.

00:06:03.710 --> 00:06:10.245
So with that, I'm going to put
a little video on, and we'll

00:06:10.245 --> 00:06:11.800
have Paul talk about
that video.

00:06:11.800 --> 00:06:15.010
So let me get this video
lined up here.

00:06:15.010 --> 00:06:18.550
All right, so, Paul, I'll start
this video, and you can

00:06:18.550 --> 00:06:19.120
talk about it.

00:06:19.120 --> 00:06:21.260
PAUL LEWIS: All right, super.

00:06:21.260 --> 00:06:22.640
PETE LEPAGE: So they can
see the video now.

00:06:22.640 --> 00:06:23.240
PAUL LEWIS: OK, great.

00:06:23.240 --> 00:06:28.990
So what you're seeing is a LEGO
Mindstorm's NXT, which is

00:06:28.990 --> 00:06:30.060
just off the shelf.

00:06:30.060 --> 00:06:33.910
We didn't make any firmware
changes or anything like that.

00:06:33.910 --> 00:06:36.040
And what we did is
in two days--

00:06:36.040 --> 00:06:38.740
so you can build these
apps pretty quickly.

00:06:38.740 --> 00:06:41.240
We set up Serial over Bluetooth

00:06:41.240 --> 00:06:43.100
to talk to the robot.

00:06:43.100 --> 00:06:44.780
We're using, as you're probably
seeing in the video,

00:06:44.780 --> 00:06:48.375
the Gamepad API with Renato, I
think, controlling the little

00:06:48.375 --> 00:06:50.200
robot there with the Gamepad.

00:06:50.200 --> 00:06:51.490
You can also see on the
left-hand side the

00:06:51.490 --> 00:06:53.860
visualization of what
the robot's doing.

00:06:53.860 --> 00:06:58.280
We used D3, which is a great
visualization engine, and a

00:06:58.280 --> 00:06:59.340
bit of CSS 3D as well.

00:06:59.340 --> 00:07:02.095
So you can build these apps with
all the technologies that

00:07:02.095 --> 00:07:02.850
you're used to.

00:07:02.850 --> 00:07:05.800
And you can see, as I say,
that we used Serial over

00:07:05.800 --> 00:07:07.940
Bluetooth to actually talk
to a specific device, get

00:07:07.940 --> 00:07:12.770
feedback from the device, or
using JavaScript, HTML, CSS,

00:07:12.770 --> 00:07:17.312
all those technologies that we
use on a day-to-day basis.

00:07:17.312 --> 00:07:20.720
PETE LEPAGE: Yeah, this was
something that you guys built

00:07:20.720 --> 00:07:24.170
just over a couple of days, just
before I/O, as a proof of

00:07:24.170 --> 00:07:25.970
concept, right?

00:07:25.970 --> 00:07:27.700
RENATO MANGINI: Yes, exactly.

00:07:27.700 --> 00:07:32.600
We built it like on Friday and a
Saturday the week before I/O

00:07:32.600 --> 00:07:35.050
because we wanted to show--

00:07:35.050 --> 00:07:39.760
to present cool stuff on our
Chrome Office Hours on the

00:07:39.760 --> 00:07:41.100
Google I/O floor.

00:07:41.100 --> 00:07:41.680
So yeah--

00:07:41.680 --> 00:07:43.850
PETE LEPAGE: And it was
pretty popular.

00:07:43.850 --> 00:07:46.940
RENATO MANGINI: Yeah, exactly.

00:07:46.940 --> 00:07:53.150
Like some people say, if you
put some robots, you always

00:07:53.150 --> 00:07:56.080
get a lot of views.

00:07:56.080 --> 00:08:01.440
And if you join robots and
bacon, you explode.

00:08:05.080 --> 00:08:08.400
I was trying to do some demo
with bacon included, but I

00:08:08.400 --> 00:08:09.810
couldn't figure out--

00:08:09.810 --> 00:08:12.760
I had not much time to
figure out that.

00:08:12.760 --> 00:08:16.850
PETE LEPAGE: We could maybe get
a USB frying pan to cook

00:08:16.850 --> 00:08:18.700
the bacon and then--

00:08:18.700 --> 00:08:22.010
RENATO MANGINI: Yeah, I thought
about that, but that

00:08:22.010 --> 00:08:26.264
wouldn't be very safe to
present on Google I/O.

00:08:26.264 --> 00:08:27.072
PETE LEPAGE: Yeah, it might--

00:08:27.072 --> 00:08:28.470
RENATO MANGINI: There were
a bunch of people

00:08:28.470 --> 00:08:29.720
trying to get the bacon.

00:08:32.760 --> 00:08:36.400
PAUL LEWIS: Have the robot bring
you a bacon sandwich.

00:08:36.400 --> 00:08:39.870
What I should say is that the
code for the robot is

00:08:39.870 --> 00:08:41.280
available on GitHub.

00:08:41.280 --> 00:08:42.350
We'll have the link up
afterwards, but it's

00:08:42.350 --> 00:08:45.530
github.com/googlechrome.

00:08:45.530 --> 00:08:49.160
And the repo is called
numberhtml5-app.

00:08:49.160 --> 00:08:52.460
So we'll link to that
after this.

00:08:52.460 --> 00:08:56.140
PETE LEPAGE: So we'll add the
link to that in the comments

00:08:56.140 --> 00:08:57.890
as you watch the video
after the fact.

00:08:57.890 --> 00:08:59.726
So cool.

00:08:59.726 --> 00:09:01.184
PAUL LEWIS: All right.

00:09:01.184 --> 00:09:02.160
Great.

00:09:02.160 --> 00:09:03.490
PETE LEPAGE: Renato, do you want
to give us a bit of an

00:09:03.490 --> 00:09:06.740
architectural overview of Chrome
packaged apps, how they

00:09:06.740 --> 00:09:08.760
work, what's going
on with them?

00:09:08.760 --> 00:09:10.730
RENATO MANGINI: Yeah, sure.

00:09:10.730 --> 00:09:14.270
As the audience probably knows,
this is the beginning

00:09:14.270 --> 00:09:18.840
of a long series of Office Hours
about Chrome apps, and

00:09:18.840 --> 00:09:20.950
we will be covering
several APIs.

00:09:20.950 --> 00:09:23.520
You will talk about
that later.

00:09:23.520 --> 00:09:29.180
So this is a very high-level
overview of

00:09:29.180 --> 00:09:31.990
what is a Chrome app.

00:09:31.990 --> 00:09:35.215
Let me screenshare
my screen here.

00:09:41.050 --> 00:09:41.960
Can you see it?

00:09:41.960 --> 00:09:42.460
PETE LEPAGE: Yep.

00:09:42.460 --> 00:09:44.840
All right, we've got that up.

00:09:44.840 --> 00:09:45.340
RENATO MANGINI: OK.

00:09:45.340 --> 00:09:52.570
So the idea of a Chrome app is
not to be a website, is not to

00:09:52.570 --> 00:09:56.350
be a standard web app.

00:09:56.350 --> 00:10:02.140
As Pete mentioned, the idea is
to be as powerful as native

00:10:02.140 --> 00:10:06.180
but easier to maintain, easier
to code if you are a web

00:10:06.180 --> 00:10:12.420
developer, and more secure than
native could ever be.

00:10:15.710 --> 00:10:21.080
Well, the application
stays in the cloud.

00:10:21.080 --> 00:10:25.800
The user always installed your
application from the cloud,

00:10:25.800 --> 00:10:30.170
but after the user installed
your application locally, the

00:10:30.170 --> 00:10:32.730
user can execute that
any time he wants.

00:10:35.960 --> 00:10:39.770
So I think from the four points
that Pete mentioned on

00:10:39.770 --> 00:10:43.450
his talk, the most important
from the developer point of

00:10:43.450 --> 00:10:47.430
view, the most important thing
you have to have in your mind

00:10:47.430 --> 00:10:48.620
[INAUDIBLE]

00:10:48.620 --> 00:10:51.560
Chrome app is that
it's offline.

00:10:51.560 --> 00:10:56.050
Because that changes
your mindset.

00:10:56.050 --> 00:10:58.270
That must change your mindset
as the developer.

00:11:03.450 --> 00:11:07.260
The programming model
of a Chrome app is--

00:11:07.260 --> 00:11:09.690
the main point is the
background page.

00:11:09.690 --> 00:11:14.310
The background page is, although
it's called page,

00:11:14.310 --> 00:11:17.775
it's in fact a script
and it's invisible.

00:11:17.775 --> 00:11:18.840
So there's--

00:11:18.840 --> 00:11:20.750
PETE LEPAGE: Let's just stop
for a sec there because I

00:11:20.750 --> 00:11:22.250
think that's a really
important point.

00:11:22.250 --> 00:11:25.180
It's not quite a background page
as you think about it in

00:11:25.180 --> 00:11:28.940
the traditional background page
for one of the legacy

00:11:28.940 --> 00:11:31.340
Chrome packaged apps, but
it's actually just

00:11:31.340 --> 00:11:33.370
a script that runs.

00:11:33.370 --> 00:11:35.800
So you don't actually have
to write any HTML.

00:11:35.800 --> 00:11:38.460
It's just some JavaScript,
right?

00:11:38.460 --> 00:11:39.760
RENATO MANGINI: Yes, exactly.

00:11:39.760 --> 00:11:40.900
Exactly.

00:11:40.900 --> 00:11:45.680
The idea of this script
is to create and

00:11:45.680 --> 00:11:46.590
control other windows.

00:11:46.590 --> 00:11:52.050
It's like a central piece of
the whole application.

00:11:52.050 --> 00:11:56.600
If your windows have to
communicate one to each other,

00:11:56.600 --> 00:12:00.510
ideally they should use the
background page as the central

00:12:00.510 --> 00:12:02.680
point of communication.

00:12:02.680 --> 00:12:07.230
Also, to create other windows,
ideally you should use a

00:12:07.230 --> 00:12:09.085
background page to create
those windows.

00:12:12.050 --> 00:12:14.375
The background page
also listens to

00:12:14.375 --> 00:12:16.960
user and system events.

00:12:16.960 --> 00:12:21.110
Of course, any page can listen
to user events, but the

00:12:21.110 --> 00:12:22.620
background page--

00:12:22.620 --> 00:12:26.620
as the central piece, it can
also listen to other events

00:12:26.620 --> 00:12:28.280
that a page cannot listen.

00:12:31.010 --> 00:12:35.210
We will discuss these specific
events when we

00:12:35.210 --> 00:12:37.540
talk about each API.

00:12:37.540 --> 00:12:41.970
So this is just a high-level
overview.

00:12:41.970 --> 00:12:45.330
And this is very important.

00:12:45.330 --> 00:12:50.950
The background page, it
runs every time your

00:12:50.950 --> 00:12:52.760
application is running.

00:12:52.760 --> 00:12:57.810
And eventually the user can
quit your application.

00:12:57.810 --> 00:13:00.290
But the system can also--

00:13:00.290 --> 00:13:04.210
if there is no other windows
being shown, the system can

00:13:04.210 --> 00:13:08.130
suspend your background page.

00:13:08.130 --> 00:13:09.710
You can listen to this event.

00:13:09.710 --> 00:13:13.280
I will talk about that step
now on the app lifecycle.

00:13:16.870 --> 00:13:21.140
This is a very simple
lifecycle diagram.

00:13:21.140 --> 00:13:24.240
You can see this on our
documentation pages.

00:13:24.240 --> 00:13:28.410
And this is after the
application is installed.

00:13:28.410 --> 00:13:32.580
So the user has the application
installed.

00:13:32.580 --> 00:13:35.440
And it clicks on Run.

00:13:35.440 --> 00:13:38.250
It clicks on the application,
and

00:13:38.250 --> 00:13:39.845
event onLaunch is executed.

00:13:43.680 --> 00:13:45.910
What is called event
page on this

00:13:45.910 --> 00:13:48.350
diagram is actually called--

00:13:48.350 --> 00:13:51.300
it's a background page I
mentioned before, OK?

00:13:51.300 --> 00:13:56.430
So the event page can or
cannot open windows.

00:13:56.430 --> 00:14:00.730
If it does, it goes through
the windows open state.

00:14:00.730 --> 00:14:03.990
If it does not, of course, it
goes through no windows open.

00:14:03.990 --> 00:14:06.700
But the most important thing
here is that onSuspend's only

00:14:06.700 --> 00:14:10.390
called when there's no other
windows open or there's no

00:14:10.390 --> 00:14:13.290
windows open.

00:14:13.290 --> 00:14:17.640
Of course, you can get this both
onLaunch and onSuspend

00:14:17.640 --> 00:14:20.080
events and do whatever
you want.

00:14:20.080 --> 00:14:23.330
In the case of onSuspend, you
cannot do much things.

00:14:23.330 --> 00:14:24.640
It must be fast.

00:14:24.640 --> 00:14:30.430
You cannot do any asynchronous
call or anything

00:14:30.430 --> 00:14:32.150
that takes too long.

00:14:32.150 --> 00:14:36.530
It should be fast so you don't
impact on the user and on the

00:14:36.530 --> 00:14:37.920
usability of your app.

00:14:41.150 --> 00:14:48.440
OK, so this is the lifecycle
of an app.

00:14:48.440 --> 00:14:55.300
But what is really an app,
the contents of an app?

00:14:55.300 --> 00:15:00.720
Paul will show you a Hello,
World app right after.

00:15:00.720 --> 00:15:05.050
But just to give you
a rough idea--

00:15:05.050 --> 00:15:09.410
that is composed
by a manifest.

00:15:09.410 --> 00:15:13.820
If you are an extension
developer or a Chrome app

00:15:13.820 --> 00:15:15.970
developer, you know
what it is.

00:15:15.970 --> 00:15:20.680
There are a few changes from
the event manifest.

00:15:20.680 --> 00:15:23.760
But basically, if you are
not already an extension

00:15:23.760 --> 00:15:28.660
developer, a manifest contains
meta information, permissions

00:15:28.660 --> 00:15:35.150
that your app requests to run,
and the information on what is

00:15:35.150 --> 00:15:37.880
the background script that
should be executed.

00:15:37.880 --> 00:15:41.080
One relevant point here.

00:15:41.080 --> 00:15:46.250
On a traditional web
application, not a Chrome app,

00:15:46.250 --> 00:15:52.670
you ask permissions, and the
permission pops up on in front

00:15:52.670 --> 00:15:54.210
of the user.

00:15:54.210 --> 00:15:57.950
The idea of a Chrome app is that
most of the permissions

00:15:57.950 --> 00:16:03.180
can be given to your app when
a user starts the app.

00:16:03.180 --> 00:16:06.480
So the experience from
the user's point of

00:16:06.480 --> 00:16:08.570
view is much better.

00:16:08.570 --> 00:16:13.210
Because if you are using an
application that requires

00:16:13.210 --> 00:16:18.090
access to your USB device,
probably if you install that

00:16:18.090 --> 00:16:23.990
application, if you agree with
that permission, that's OK.

00:16:23.990 --> 00:16:26.950
You don't want to get that
pop-up every time you run the

00:16:26.950 --> 00:16:29.380
application because the
application hasn't changed

00:16:29.380 --> 00:16:32.880
what it requires from you.

00:16:32.880 --> 00:16:39.040
So all of that goes on
the manifest JSON.

00:16:39.040 --> 00:16:45.020
The background script is the
script that you put on the

00:16:45.020 --> 00:16:49.480
manifest and it's the script
that will listen to the

00:16:49.480 --> 00:16:53.090
onLaunched event and do
whatever it has to do,

00:16:53.090 --> 00:16:54.380
depending on your application.

00:16:54.380 --> 00:16:58.050
Usually it will create
one or more windows,

00:16:58.050 --> 00:17:02.590
but it can do anything.

00:17:02.590 --> 00:17:07.349
And I think this is the most
important thing for a

00:17:07.349 --> 00:17:09.030
traditional web developer.

00:17:11.550 --> 00:17:14.140
As I said before, you have
to change our mindset.

00:17:14.140 --> 00:17:16.839
You are running offline.

00:17:16.839 --> 00:17:21.609
So you have to think about what
your application needs to

00:17:21.609 --> 00:17:28.040
run, and you have to put
it all on your content.

00:17:28.040 --> 00:17:30.540
You don't have to depend
to get this

00:17:30.540 --> 00:17:34.200
information from the network.

00:17:34.200 --> 00:17:38.375
OK, so yeah, that's a
high-level overview.

00:17:38.375 --> 00:17:40.390
Do have anything to add?

00:17:40.390 --> 00:17:42.240
PETE LEPAGE: All right, no,
I think that's good.

00:17:42.240 --> 00:17:46.660
The cool thing is if you've
written a legacy Chrome

00:17:46.660 --> 00:17:50.480
packaged app, you're already
well on your way.

00:17:50.480 --> 00:17:54.200
And it's just a matter of making
a few changes and then

00:17:54.200 --> 00:17:57.310
starting to dive into some
of the new APIs that are

00:17:57.310 --> 00:17:58.490
available to you.

00:17:58.490 --> 00:18:01.940
If you've written just a web
app that's hosted, you're

00:18:01.940 --> 00:18:04.210
going to have a few things that
you're going to want to

00:18:04.210 --> 00:18:06.830
play with and change
and learn as--

00:18:06.830 --> 00:18:07.980
RENATO MANGINI: Like embedding

00:18:07.980 --> 00:18:10.380
everything on the same package.

00:18:10.380 --> 00:18:11.220
PETE LEPAGE: Exactly.

00:18:11.220 --> 00:18:12.010
Exactly.

00:18:12.010 --> 00:18:14.960
But really all you're doing is
taking all the files and

00:18:14.960 --> 00:18:16.470
putting them into
the zip file.

00:18:16.470 --> 00:18:19.280
Instead of having them sit on
the server side, they're

00:18:19.280 --> 00:18:22.410
sitting on the local side.

00:18:22.410 --> 00:18:23.670
Cool.

00:18:23.670 --> 00:18:25.490
Well, Paul, do you want to tell
us about some of the new

00:18:25.490 --> 00:18:27.260
APIs that are available?

00:18:27.260 --> 00:18:27.740
PAUL LEWIS: Definitely.

00:18:27.740 --> 00:18:32.800
OK, so we've heard a bit about
the overview and the

00:18:32.800 --> 00:18:36.030
architecture and those
kind of things.

00:18:36.030 --> 00:18:38.440
And so one of the things that--
as we mentioned at the

00:18:38.440 --> 00:18:40.750
start, we've got these new APIs,
specifically some of

00:18:40.750 --> 00:18:45.900
these system-level APIs, which
I think are really exciting.

00:18:45.900 --> 00:18:46.990
What I want to do is
I just want to

00:18:46.990 --> 00:18:49.470
highlight a few of those.

00:18:49.470 --> 00:18:53.060
What I'll probably do is show
you my screen in a sec.

00:18:53.060 --> 00:18:54.416
Let's do that now, actually.

00:18:58.680 --> 00:19:06.330
So if you were to go to
developer.chrome.com/apps, and

00:19:06.330 --> 00:19:09.450
on the left-hand side you've got
the menu, the interesting

00:19:09.450 --> 00:19:12.840
one is the Chrome JavaScript
APIs, which gives you an

00:19:12.840 --> 00:19:17.490
overview of all the APIs that
are available to you in your

00:19:17.490 --> 00:19:18.430
Chrome packaged apps.

00:19:18.430 --> 00:19:22.800
Now, I'm not going to go through
all of them because it

00:19:22.800 --> 00:19:26.180
would take quite some time, and
you want to probably dive

00:19:26.180 --> 00:19:27.970
into this and look at the things
that are of particular

00:19:27.970 --> 00:19:28.755
interest to you.

00:19:28.755 --> 00:19:32.080
But there are some new
ones, and you want to

00:19:32.080 --> 00:19:32.730
probably look at those.

00:19:32.730 --> 00:19:35.320
Context menus are quite
interesting because those are

00:19:35.320 --> 00:19:38.460
things that you'd expect
to see in a native app.

00:19:38.460 --> 00:19:41.435
So we wanted to give you those
as well for your--

00:19:41.435 --> 00:19:41.830
PETE LEPAGE: Right.

00:19:41.830 --> 00:19:45.580
Those give you the right-click
on items or

00:19:45.580 --> 00:19:47.110
on whatever, right?

00:19:47.110 --> 00:19:48.190
PAUL LEWIS: Yeah,
exactly right.

00:19:48.190 --> 00:19:53.030
So these are things that almost
any user of your app

00:19:53.030 --> 00:19:53.810
would expect.

00:19:53.810 --> 00:19:56.450
If they're going to be launching
these apps outside

00:19:56.450 --> 00:19:57.950
of the browser, they can
start right-clicking,

00:19:57.950 --> 00:19:59.760
those kinds of things.

00:19:59.760 --> 00:20:01.960
As I say, you can dive into
some of these more

00:20:01.960 --> 00:20:03.030
specifically yourself.

00:20:03.030 --> 00:20:06.340
The socket I found particularly
interesting

00:20:06.340 --> 00:20:12.450
because now you can actually use
your app as a TCP or UDP

00:20:12.450 --> 00:20:14.850
client, which is the first time
that you've been able to

00:20:14.850 --> 00:20:19.590
do those kind of things
directly.

00:20:19.590 --> 00:20:21.670
PETE LEPAGE: Now, what kind of
apps could you write with the

00:20:21.670 --> 00:20:27.660
TCP and UDP APIs?

00:20:27.660 --> 00:20:29.430
PAUL LEWIS: Yeah,
so some people

00:20:29.430 --> 00:20:33.720
have written IRC clients.

00:20:33.720 --> 00:20:36.970
Renato, what else
have you seen?

00:20:36.970 --> 00:20:44.470
RENATO MANGINI: Well, that's
a whole new apps--

00:20:44.470 --> 00:20:51.160
I think this opens up for
a whole set of apps that

00:20:51.160 --> 00:20:52.700
requires a network.

00:20:56.050 --> 00:20:59.600
I cannot even imagine what
develops will come with--

00:20:59.600 --> 00:21:01.960
PETE LEPAGE: Yeah, that's kind
of the cool part, is we have

00:21:01.960 --> 00:21:05.120
no idea what you guys are
going to do with this.

00:21:05.120 --> 00:21:06.230
Cool, you want to keep
talking about--

00:21:06.230 --> 00:21:09.490
PAUL LEWIS: Yeah, I mean, the
thing about sockets is

00:21:09.490 --> 00:21:11.600
historically with web sockets,
you need to be able to control

00:21:11.600 --> 00:21:12.540
both sides.

00:21:12.540 --> 00:21:15.440
Now with the TCP socket stuff
particularly, you're in

00:21:15.440 --> 00:21:17.290
control of the app side.

00:21:17.290 --> 00:21:21.030
But the service you're talking
to may not support traditional

00:21:21.030 --> 00:21:23.010
web sockets, but they may
support TCP connections.

00:21:23.010 --> 00:21:25.050
So it just broadens
what you can do.

00:21:25.050 --> 00:21:28.490
The thing that I've got on the
screen is this experimental

00:21:28.490 --> 00:21:33.380
APIs, which contains some of
the really interesting ones

00:21:33.380 --> 00:21:37.950
for me personally, but
particularly, the Bluetooth

00:21:37.950 --> 00:21:39.970
and the USB.

00:21:39.970 --> 00:21:42.220
So as Pete said at
the start, we're

00:21:42.220 --> 00:21:44.810
letting you talk to devices.

00:21:44.810 --> 00:21:47.720
And all of these are under the
experimental name space.

00:21:47.720 --> 00:21:50.130
We should've mention that
you'll have to ask for

00:21:50.130 --> 00:21:53.430
experimental permissions and
apps that are going into the

00:21:53.430 --> 00:21:55.210
Chrome Web Store.

00:21:55.210 --> 00:21:57.270
They don't allow you to use
those experimental APIs.

00:21:57.270 --> 00:22:01.030
So this is very much a kind of
early stage thing where you

00:22:01.030 --> 00:22:03.990
can put these in, start building
these apps, and then

00:22:03.990 --> 00:22:06.420
as they become available
and stable--

00:22:06.420 --> 00:22:08.330
RENATO MANGINI: Paul,
specifically about the

00:22:08.330 --> 00:22:14.170
Bluetooth, just a warning that
it's being implemented on

00:22:14.170 --> 00:22:15.880
Windows, Linux, and Mac.

00:22:15.880 --> 00:22:22.220
Currently it only runs on Chrome
OS, but as we talk, the

00:22:22.220 --> 00:22:26.500
engineer team is working
on the other platforms.

00:22:26.500 --> 00:22:27.960
For Bluetooth only, OK?

00:22:27.960 --> 00:22:31.530
So the developers should not
expect on these experimental

00:22:31.530 --> 00:22:37.780
APIs, APIs completely
done and finished.

00:22:37.780 --> 00:22:39.400
It will have a lot of changes.

00:22:39.400 --> 00:22:42.880
Of course, there a lot of bugs,
probably, and we expect

00:22:42.880 --> 00:22:47.260
the developer feedback
to fix those bugs.

00:22:47.260 --> 00:22:49.160
PAUL LEWIS: Yes,
exactly right.

00:22:49.160 --> 00:22:52.370
PETE LEPAGE: Yeah, and I think
that's a good point that a lot

00:22:52.370 --> 00:22:55.480
of these are in experimental
mode right now, and you can't

00:22:55.480 --> 00:22:58.770
actually go and upload
experimental stuff to the

00:22:58.770 --> 00:22:59.940
Chrome Web Store.

00:22:59.940 --> 00:23:03.510
As these things start to mature
and as Chrome packaged

00:23:03.510 --> 00:23:09.130
apps hit a maturity level later
this fall, we will have

00:23:09.130 --> 00:23:11.110
a point where you will be
able to upload them.

00:23:11.110 --> 00:23:14.190
You will actually be able to
go use them in real time

00:23:14.190 --> 00:23:18.490
without having to have the
experimental flag on there and

00:23:18.490 --> 00:23:21.410
know that they won't change
out from under you, where

00:23:21.410 --> 00:23:25.810
right now, we're still making
sure they work and getting

00:23:25.810 --> 00:23:29.370
feedback from you as you use
them to make sure that they

00:23:29.370 --> 00:23:31.940
meet your needs and they
do the things that you

00:23:31.940 --> 00:23:33.350
want them to do.

00:23:33.350 --> 00:23:34.100
PAUL LEWIS: Yeah.

00:23:34.100 --> 00:23:37.887
One API I really wanted to pull
out at this stage and

00:23:37.887 --> 00:23:40.850
something that I encourage you
guys to go and look at is, as

00:23:40.850 --> 00:23:44.170
we said several times,
offline by default.

00:23:44.170 --> 00:23:47.680
That's a really core
part of these apps.

00:23:47.680 --> 00:23:51.320
And because of that,
things like storage

00:23:51.320 --> 00:23:52.440
APIs are really helpful.

00:23:52.440 --> 00:23:58.340
We've got chrome.storage.local
and chrome.storage.sync and

00:23:58.340 --> 00:24:03.350
the sync version
of local and--

00:24:03.350 --> 00:24:05.590
PETE LEPAGE: Do you have
feedback because I think you

00:24:05.590 --> 00:24:08.100
just sort of bugged out
there for a second.

00:24:08.100 --> 00:24:11.760
At least on my computer, so
maybe for other folks, too.

00:24:11.760 --> 00:24:15.677
PAUL LEWIS: OK, so the APIs
you want to look at are

00:24:15.677 --> 00:24:20.030
chrome.storage.local
and .sync.

00:24:20.030 --> 00:24:23.950
And these are the two APIs
specifically for

00:24:23.950 --> 00:24:25.800
storing your data.

00:24:25.800 --> 00:24:28.130
They're specifically designed
for smaller amounts of data.

00:24:28.130 --> 00:24:30.430
If you need larger amounts of
data, you might want to look

00:24:30.430 --> 00:24:37.270
at the standard HTML5 File
System API and so forth.

00:24:37.270 --> 00:24:40.020
But the point of these is that
they degrade gracefully like a

00:24:40.020 --> 00:24:40.860
lot of the APIs.

00:24:40.860 --> 00:24:45.480
They degrade gracefully under
poor network conditions, and

00:24:45.480 --> 00:24:49.440
they are there specifically to
allow you to write sensible

00:24:49.440 --> 00:24:51.410
offline focused apps.

00:24:51.410 --> 00:24:54.030
So I really wanted to
make that point.

00:24:54.030 --> 00:24:55.900
And then, as I said before,
we've got these other really

00:24:55.900 --> 00:24:57.546
exciting APIs like the

00:24:57.546 --> 00:24:59.420
system-level ones and so forth.

00:24:59.420 --> 00:25:02.350
So go and have a look,
go and have a play.

00:25:02.350 --> 00:25:04.180
Right now, what I'm going to
do is I'm actually going to

00:25:04.180 --> 00:25:06.810
show you how you can get started
with the samples

00:25:06.810 --> 00:25:08.260
because we've got a good
number of samples.

00:25:08.260 --> 00:25:12.460
So I'm going to screenshare
once again.

00:25:12.460 --> 00:25:15.430
And let's see what we see.

00:25:15.430 --> 00:25:17.300
PETE LEPAGE: So with all of
these samples that Paul is

00:25:17.300 --> 00:25:19.690
going to start showing you,
you can actually start

00:25:19.690 --> 00:25:21.050
playing with them.

00:25:21.050 --> 00:25:26.640
You'll need either Chrome Dev or
Chrome Canary because this

00:25:26.640 --> 00:25:30.450
is not something that has made
it down to beta or to the

00:25:30.450 --> 00:25:32.360
stable channel yet.

00:25:32.360 --> 00:25:36.560
So you can always try it in
Chrome Canary or Chrome Beta--

00:25:36.560 --> 00:25:39.870
or sorry, Chrome Canary
or Chrome Dev.

00:25:39.870 --> 00:25:44.080
The one thing that I tend to
recommend is running Chrome

00:25:44.080 --> 00:25:49.840
Canary and either Chrome Beta
or Chrome Stable because if

00:25:49.840 --> 00:25:52.720
you do that, then you can have
two instances of Chrome

00:25:52.720 --> 00:25:55.600
installed without having to
worry about them clobbering

00:25:55.600 --> 00:25:56.180
each other.

00:25:56.180 --> 00:25:58.470
You don't have to worry about
going and playing with

00:25:58.470 --> 00:26:02.300
something in Chrome Canary and
having it crash on a regular

00:26:02.300 --> 00:26:05.430
basis or anything like that
because it is Chrome Canary.

00:26:05.430 --> 00:26:09.170
So if you have those two, you
can always go and play with

00:26:09.170 --> 00:26:10.790
the latest stuff.

00:26:10.790 --> 00:26:13.730
The other option would be to
install Chromium as a--

00:26:18.980 --> 00:26:19.260
PAUL LEWIS: --which is
github.com/googl

00:26:19.260 --> 00:26:24.750
echrome/chrome-app-samples
and--

00:26:24.750 --> 00:26:27.320
PETE LEPAGE: All right, and
we'll provide a short link to

00:26:27.320 --> 00:26:30.120
this in the notes.

00:26:30.120 --> 00:26:30.620
PAUL LEWIS: Yeah.

00:26:30.620 --> 00:26:35.820
And so you can see we've got
a ton of samples here.

00:26:35.820 --> 00:26:39.700
And again, I'll let you go and
have a play with those.

00:26:39.700 --> 00:26:43.230
Now, the main thing that you'll
need to do is enable

00:26:43.230 --> 00:26:46.330
the experimental
extension APIs.

00:26:46.330 --> 00:26:49.420
Because when we ask-- as we
mentioned in the manifest, you

00:26:49.420 --> 00:26:50.160
ask for permissions.

00:26:50.160 --> 00:26:51.960
One of the permissions you're
going to be asking for is

00:26:51.960 --> 00:26:54.440
experimental, almost certainly
as you try some of these

00:26:54.440 --> 00:26:55.580
things out.

00:26:55.580 --> 00:26:57.420
So you have to enable that
with a flag that you've

00:26:57.420 --> 00:26:59.550
allowed to ask for that
particular permission.

00:26:59.550 --> 00:27:03.790
So if you go to About Flags or
Chrome Flags, you'll see this

00:27:03.790 --> 00:27:07.450
experimental extension APIs
which you enable.

00:27:07.450 --> 00:27:09.680
And that's very important.

00:27:09.680 --> 00:27:11.840
One of the things that we've
done to try and make your

00:27:11.840 --> 00:27:13.560
lives a little bit
simpler, which I

00:27:13.560 --> 00:27:17.170
really love, is we have--

00:27:17.170 --> 00:27:18.320
I've got my channel open here.

00:27:18.320 --> 00:27:21.530
We have something called Dojo,
which is under the Chrome App

00:27:21.530 --> 00:27:23.430
Samples Folder.

00:27:23.430 --> 00:27:24.850
I'm just going to
list that out.

00:27:24.850 --> 00:27:27.180
You can see that I've got
a build script, so

00:27:27.180 --> 00:27:28.660
if I just run build.

00:27:31.470 --> 00:27:32.720
Takes a couple of seconds.

00:27:35.440 --> 00:27:38.230
And out the other side.

00:27:38.230 --> 00:27:41.800
If I go to my extensions
now, which I'll make

00:27:41.800 --> 00:27:43.770
a little bit bigger--

00:27:43.770 --> 00:27:46.775
and I'm in developer mode, which
allows me to load an

00:27:46.775 --> 00:27:50.310
unpacked extension, which
can be useful sometimes.

00:27:50.310 --> 00:27:55.170
If you go to the Dojo Build
folder and select that, you

00:27:55.170 --> 00:27:58.670
get yourself a convenient new
app, which will allow you to

00:27:58.670 --> 00:28:02.330
launch all the other samples.

00:28:02.330 --> 00:28:05.080
So you can see when I go to a
new tab here, I've now got

00:28:05.080 --> 00:28:09.450
this Chrome Apps Dojo,
which when I launch--

00:28:09.450 --> 00:28:11.430
and you'll see the window
we were talking about.

00:28:11.430 --> 00:28:14.400
This hasn't got any additional
Omnibox.

00:28:14.400 --> 00:28:16.610
It's not got any
other buttons.

00:28:16.610 --> 00:28:18.250
It's just a window--

00:28:18.250 --> 00:28:20.910
PETE LEPAGE: That's a Chrome
packaged app, right?

00:28:20.910 --> 00:28:23.260
PAUL LEWIS: Yeah, this is
a Chrome packed app.

00:28:23.260 --> 00:28:24.080
PETE LEPAGE: Sweet!

00:28:24.080 --> 00:28:24.600
PAUL LEWIS: Yeah.

00:28:24.600 --> 00:28:28.300
So I'm going to just launch one
of our samples, which is a

00:28:28.300 --> 00:28:29.030
single window.

00:28:29.030 --> 00:28:32.880
We'll talk about these samples
in much more detail over the

00:28:32.880 --> 00:28:35.210
coming weeks.

00:28:35.210 --> 00:28:36.330
RENATO MANGINI: Paul?

00:28:36.330 --> 00:28:38.200
Can I interrupt you a second?

00:28:38.200 --> 00:28:44.740
There's a new version of Dojo
that is much better and much

00:28:44.740 --> 00:28:47.670
reliable than this.

00:28:47.670 --> 00:28:51.590
I'm not sure if you
want to run it.

00:28:51.590 --> 00:28:54.530
Do you want me to broadcast here
or you quite happy with

00:28:54.530 --> 00:28:54.770
this version?

00:28:54.770 --> 00:28:54.930
PAUL LEWIS: Yeah,
you go for it.

00:28:54.930 --> 00:28:56.160
Yeah, if you've got
a newer version.

00:28:56.160 --> 00:28:57.710
Yeah, feel free.

00:28:57.710 --> 00:29:00.440
PETE LEPAGE: So I think the key
point here is that you can

00:29:00.440 --> 00:29:02.220
actually go and sync--

00:29:02.220 --> 00:29:05.500
use GitHub to just do a pull
and make sure that you've

00:29:05.500 --> 00:29:08.540
always got the latest stuff so
that as we go and provide

00:29:08.540 --> 00:29:11.680
updates, as we make changes to
the APIs, we're keeping the

00:29:11.680 --> 00:29:14.020
samples and all that kind of
stuff up to date so that you

00:29:14.020 --> 00:29:16.760
can stay up to date yourself.

00:29:16.760 --> 00:29:17.450
PAUL LEWIS: Yeah.

00:29:17.450 --> 00:29:17.950
So--

00:29:17.950 --> 00:29:19.220
RENATO MANGINI: Go,
just go ahead.

00:29:19.220 --> 00:29:19.630
PAUL LEWIS: OK.

00:29:19.630 --> 00:29:21.570
So what I'm actually going to
do is I'm also just going to

00:29:21.570 --> 00:29:25.770
quickly show you one of the
other samples, which is the

00:29:25.770 --> 00:29:26.350
Hello World.

00:29:26.350 --> 00:29:28.790
So I'll actually load
that one directly.

00:29:28.790 --> 00:29:32.801
You can see Hello World
just dropped in there.

00:29:32.801 --> 00:29:35.010
You can see this little guy.

00:29:35.010 --> 00:29:37.820
Got that.

00:29:37.820 --> 00:29:39.320
[INAUDIBLE].

00:29:39.320 --> 00:29:40.460
That's very handy.

00:29:40.460 --> 00:29:43.830
So what I'll do is I'll now show
you the underlying code,

00:29:43.830 --> 00:29:45.930
which is-- again, it's
really simple.

00:29:45.930 --> 00:29:48.900
Just briefly, this is the
manifest, which if you've been

00:29:48.900 --> 00:29:51.910
making apps to date you'll
recognize instantly.

00:29:51.910 --> 00:29:53.860
It's just the JSON file.

00:29:53.860 --> 00:29:57.330
Version 2 is important.

00:29:57.330 --> 00:30:00.040
Bump the text up here.

00:30:00.040 --> 00:30:01.400
PETE LEPAGE: Ah, that looks
much better, thank you.

00:30:01.400 --> 00:30:02.360
PAUL LEWIS: OK.

00:30:02.360 --> 00:30:07.550
Version 2 is what's going to
trip you into the new packaged

00:30:07.550 --> 00:30:09.750
apps so that Chrome knows
that that's what

00:30:09.750 --> 00:30:11.430
you're talking about--

00:30:11.430 --> 00:30:13.580
name, version, icons.

00:30:13.580 --> 00:30:16.670
And then this is the bit here
where you're saying, here's

00:30:16.670 --> 00:30:17.570
the background script.

00:30:17.570 --> 00:30:20.325
Here's the main hub of activity,
which in this case

00:30:20.325 --> 00:30:22.380
is main.js.

00:30:22.380 --> 00:30:27.835
And then I'm asking for the
experimental permissions, OK?

00:30:27.835 --> 00:30:33.140
And then inside the main.js,
which is that background,

00:30:33.140 --> 00:30:38.340
you'll see that we've got this
chrome.experimental.app

00:30:38.340 --> 00:30:41.050
onLaunched, which is a list that
when your app is first

00:30:41.050 --> 00:30:45.990
launched, this is the list that
we're going to have catch

00:30:45.990 --> 00:30:47.010
that event.

00:30:47.010 --> 00:30:50.170
And all it does is create a
window which says, inside,

00:30:50.170 --> 00:30:50.810
Hello World.

00:30:50.810 --> 00:30:53.650
So that's as much as you
need to start making

00:30:53.650 --> 00:30:55.070
packaged apps today.

00:30:55.070 --> 00:30:58.870
Obviously, all the samples
that we've got have got a

00:30:58.870 --> 00:31:01.590
variety of APIs that they're
using and a variety of

00:31:01.590 --> 00:31:02.980
permissions.

00:31:02.980 --> 00:31:05.120
So there's plenty to
go up in this.

00:31:05.120 --> 00:31:07.930
And we're going to be
adding more over

00:31:07.930 --> 00:31:09.530
time I'm sure as well.

00:31:09.530 --> 00:31:09.920
PETE LEPAGE: Cool.

00:31:09.920 --> 00:31:13.290
So again, to go get that stuff,
all you have to do is

00:31:13.290 --> 00:31:17.820
go to GitHub, and you can
download the zip file there.

00:31:17.820 --> 00:31:20.740
Or you can just clone the
repository to your local

00:31:20.740 --> 00:31:23.580
machine, and you're
good to go.

00:31:23.580 --> 00:31:24.030
PAUL LEWIS: Exactly.

00:31:24.030 --> 00:31:24.480
PETE LEPAGE: Sweet.

00:31:24.480 --> 00:31:27.110
So what's the URL
for that again?

00:31:27.110 --> 00:31:27.770
PAUL LEWIS: It's
github.com/googl

00:31:27.770 --> 00:31:29.020
echrome/chrome-app-samples.

00:31:34.370 --> 00:31:36.400
PETE LEPAGE: All right.

00:31:36.400 --> 00:31:41.160
So this series of Office Hours
are something that we're going

00:31:41.160 --> 00:31:44.090
to be doing pretty
much once a week.

00:31:44.090 --> 00:31:47.780
We're going to do it every
Tuesday at 9:30 Pacific,

00:31:47.780 --> 00:31:49.500
noon-30, or 12:30 Eastern.

00:31:49.500 --> 00:31:52.940
And I think, Paul, for you in
London, it's 5:30 right

00:31:52.940 --> 00:31:55.280
about-- well, I guess it's a
little after 5:30 now, but

00:31:55.280 --> 00:31:57.760
we'll start at 5:30.

00:31:57.760 --> 00:32:00.510
For those of you who are in
Brazil, we'll start at I guess

00:32:00.510 --> 00:32:01.851
1:30 in the afternoon?

00:32:01.851 --> 00:32:02.300
RENATO MANGINI: 1:30.

00:32:02.300 --> 00:32:02.890
Exactly.

00:32:02.890 --> 00:32:03.430
PETE LEPAGE: Yeah.

00:32:03.430 --> 00:32:08.260
So we're trying to get as much
of the world in as we can.

00:32:08.260 --> 00:32:11.220
But one of the things that we
want to do is know what things

00:32:11.220 --> 00:32:15.670
that you guys think are most
interesting, what APIs you

00:32:15.670 --> 00:32:20.170
want us to focus on, what are
the pieces of the new Chrome

00:32:20.170 --> 00:32:23.720
packaged apps that you really
want to dive into.

00:32:23.720 --> 00:32:26.530
And so to do that, we'll
put the [INAUDIBLE]

00:32:26.530 --> 00:32:28.440
and in the notes.

00:32:28.440 --> 00:32:31.140
But we've got a survey
that we'd like you

00:32:31.140 --> 00:32:32.190
guys to go fill out.

00:32:32.190 --> 00:32:39.780
You can get to the survey
at goo.gl/7ZQUN.

00:32:39.780 --> 00:32:42.220
All of those letters are
in capital letters.

00:32:42.220 --> 00:32:47.950
Again, that's seven, Zed, Q,
U, N. Again, and we'll put

00:32:47.950 --> 00:32:51.280
this in the slides so that you
can check that out after the

00:32:51.280 --> 00:32:53.270
fact and fill that in.

00:32:53.270 --> 00:32:57.110
Because we'll then choose
which sessions you

00:32:57.110 --> 00:33:01.590
guys want to go for.

00:33:01.590 --> 00:33:05.530
So at this point, I want to open
it up to your questions.

00:33:05.530 --> 00:33:06.670
You guys have been submitting

00:33:06.670 --> 00:33:10.270
questions through the Moderator.

00:33:10.270 --> 00:33:12.290
And so we've taken a look.

00:33:12.290 --> 00:33:15.880
We've got a few answers
already for us.

00:33:15.880 --> 00:33:19.070
I'm going to take the first
question because it's a kind

00:33:19.070 --> 00:33:22.380
of fun question and something
that we talked a little bit

00:33:22.380 --> 00:33:26.200
about at I/O. But "when will
you support Chrome apps for

00:33:26.200 --> 00:33:29.720
Android?" And at Google
I/O, [? Sendhar, ?]

00:33:29.720 --> 00:33:33.100
as he was talking about these
new Chrome packaged apps or

00:33:33.100 --> 00:33:36.170
the updated Chrome packaged
apps, said that this is

00:33:36.170 --> 00:33:38.420
something that we want
to bring to other

00:33:38.420 --> 00:33:39.940
platforms as well.

00:33:39.940 --> 00:33:42.690
But we don't really have a date,
or we don't really have

00:33:42.690 --> 00:33:45.800
a time frame where we've said,
hey, this is going to happen

00:33:45.800 --> 00:33:48.340
within this date or time yet.

00:33:48.340 --> 00:33:52.500
We want to make sure that we
get the new APIs locked and

00:33:52.500 --> 00:33:55.100
really solid before
we do that.

00:33:55.100 --> 00:33:57.640
We want to make sure that we
get the experience great.

00:33:57.640 --> 00:34:01.150
We want to make sure that we get
this piece right before we

00:34:01.150 --> 00:34:03.510
start moving on and moving
to other parts.

00:34:06.250 --> 00:34:11.659
The second question is another
fun question here.

00:34:11.659 --> 00:34:13.730
"What are the top three
conditions to get featured on

00:34:13.730 --> 00:34:15.260
the Chrome Web Store?

00:34:15.260 --> 00:34:21.030
Do you give preference to apps
using Google Checkout, HTML5,

00:34:21.030 --> 00:34:24.900
requiring users to sign in
via Google Accounts?"

00:34:24.900 --> 00:34:28.710
And typically the thing that
we say to folks is that we

00:34:28.710 --> 00:34:31.679
just want you to go build
really great web apps.

00:34:31.679 --> 00:34:35.050
As developer advocates and
developer programs engineers,

00:34:35.050 --> 00:34:37.719
I think we all have a different
list of things that

00:34:37.719 --> 00:34:41.639
we look at in terms
of great apps.

00:34:41.639 --> 00:34:45.989
And that's a great question for
us to bring up in a future

00:34:45.989 --> 00:34:48.710
event, are what are some
of those things.

00:34:48.710 --> 00:34:51.750
In general, I want it
to feel really appy.

00:34:51.750 --> 00:34:53.570
I want it to look beautiful.

00:34:53.570 --> 00:34:58.180
I want it to have a really
good user experience.

00:34:58.180 --> 00:35:00.620
The other thing that I recommend
people do is have a

00:35:00.620 --> 00:35:02.950
look at the Web App
Field Guide.

00:35:02.950 --> 00:35:03.465
So if you go to html5rocks.com/w

00:35:03.465 --> 00:35:10.340
ebappfieldguide, there's some
good information there.

00:35:10.340 --> 00:35:13.450
Paul, Renato, do you guys have
anything that you look for in

00:35:13.450 --> 00:35:15.580
a really great web app?

00:35:15.580 --> 00:35:16.590
PAUL LEWIS: No, for me,
I think you hit

00:35:16.590 --> 00:35:17.500
the nail on the head.

00:35:17.500 --> 00:35:20.140
It's got to be something
that people love using.

00:35:20.140 --> 00:35:25.360
And I think a well-built app,
well executed that fills a

00:35:25.360 --> 00:35:26.060
real user need.

00:35:26.060 --> 00:35:29.640
That's what I personally
would be looking for.

00:35:29.640 --> 00:35:30.250
RENATO MANGINI: Yeah, exactly.

00:35:30.250 --> 00:35:31.200
I second that.

00:35:31.200 --> 00:35:33.380
It's a perfect answer.

00:35:33.380 --> 00:35:35.190
PETE LEPAGE: Cool.

00:35:35.190 --> 00:35:37.830
So somebody asked a question,
"what are the limitations of

00:35:37.830 --> 00:35:40.420
app scripts embedded
in Google sites?

00:35:40.420 --> 00:35:46.200
For example, what libraries,
APIs cannot be included?" I

00:35:46.200 --> 00:35:48.120
don't really have
a good handle on

00:35:48.120 --> 00:35:49.070
the apps script stuff.

00:35:49.070 --> 00:35:54.180
But the apps scripts team does
a Hangout on Thursdays.

00:35:54.180 --> 00:35:56.940
This week it's at 11:30
Eastern time.

00:35:56.940 --> 00:36:00.410
I'd recommend you go to that
Hangout and ask them there.

00:36:00.410 --> 00:36:03.730
They're more than happy to
answer, and they're a good

00:36:03.730 --> 00:36:04.980
group of folks.

00:36:07.050 --> 00:36:09.630
"So why are there no human
interface guidelines for

00:36:09.630 --> 00:36:12.190
Chrome OS and Chrome
packaged apps?

00:36:12.190 --> 00:36:16.270
I seriously doubt that Chrome
apps can compete with native

00:36:16.270 --> 00:36:20.636
apps without having a consistent
look and feel."

00:36:20.636 --> 00:36:23.360
Paul, do you want to
take this one?

00:36:23.360 --> 00:36:23.930
PAUL LEWIS: Yeah.

00:36:23.930 --> 00:36:25.260
Let me--

00:36:25.260 --> 00:36:25.560
yeah.

00:36:25.560 --> 00:36:32.770
So I think what we would say
is that consistent UX, UI,

00:36:32.770 --> 00:36:35.990
that's really important stuff.

00:36:35.990 --> 00:36:39.900
And we want to make sure that
what we say adds up, and it

00:36:39.900 --> 00:36:43.270
makes sense to users, and it
makes sense to developers.

00:36:43.270 --> 00:36:45.190
And so it's something that we've
been talking about in

00:36:45.190 --> 00:36:47.720
terms of we don't have a release
or anything like that.

00:36:47.720 --> 00:36:52.500
But we do think that's good, and
it's a really good idea.

00:36:52.500 --> 00:36:53.910
PETE LEPAGE: And just a
reminder, if you have

00:36:53.910 --> 00:36:56.970
questions, you can go post them
on the Moderator, and

00:36:56.970 --> 00:36:58.260
vote questions up and down.

00:36:58.260 --> 00:37:01.490
The questions that you want to
hear answers to, vote them up.

00:37:01.490 --> 00:37:03.280
The ones that you're not really
interested in, vote

00:37:03.280 --> 00:37:07.220
them down, or if you think
it's not a good question.

00:37:07.220 --> 00:37:11.830
Because we'll take your
questions here.

00:37:11.830 --> 00:37:16.500
So Jarek from, I think, Poland
has another question.

00:37:16.500 --> 00:37:19.520
"When will we have full control
over main menu and

00:37:19.520 --> 00:37:21.770
context menus in
packaged apps?

00:37:21.770 --> 00:37:25.630
Currently, there's nowhere to
set up a main application menu

00:37:25.630 --> 00:37:29.440
on the OS X standard Chrome
menu as shown.

00:37:29.440 --> 00:37:32.600
And the context menu can only
extend with submenus." Renato,

00:37:32.600 --> 00:37:34.860
do you want to answer
that one?

00:37:34.860 --> 00:37:36.640
RENATO MANGINI: Sure.

00:37:36.640 --> 00:37:40.385
Yeah, you are absolutely
right, Jarek.

00:37:40.385 --> 00:37:45.950
The main menu currently cannot
be changed currently, but it's

00:37:45.950 --> 00:37:47.240
being worked on.

00:37:47.240 --> 00:37:53.280
And the context menu, I
saw your email on the

00:37:53.280 --> 00:37:55.640
Chrome New Apps list.

00:37:55.640 --> 00:38:02.600
And the current API exists,
and we want your feedback.

00:38:02.600 --> 00:38:06.560
I would ask you to please submit
this feedback through

00:38:06.560 --> 00:38:11.250
crbug.com with a special use
case that you cannot do with

00:38:11.250 --> 00:38:13.600
current context menu.

00:38:13.600 --> 00:38:18.230
And we will work with the
engineering team to check that

00:38:18.230 --> 00:38:23.210
and perhaps even change the
API if it makes sense for

00:38:23.210 --> 00:38:26.520
broad audience.

00:38:26.520 --> 00:38:29.330
But definitely this feedback's
very important for us.

00:38:29.330 --> 00:38:30.400
PETE LEPAGE: Yeah.

00:38:30.400 --> 00:38:31.820
Cool.

00:38:31.820 --> 00:38:33.390
So [? Virchow ?]

00:38:33.390 --> 00:38:37.640
from Mumbai said he's "made a
GWT application and is trying

00:38:37.640 --> 00:38:40.460
to make it a packaged app, but
he's facing some issues.

00:38:40.460 --> 00:38:44.010
What would be the best way to
solve those issues?" And he

00:38:44.010 --> 00:38:48.420
posted a link to his
specific question.

00:38:48.420 --> 00:38:49.590
RENATO MANGINI: Can
I answer that?

00:38:49.590 --> 00:38:51.460
Yeah, absolutely.

00:38:51.460 --> 00:38:54.560
RENATO MANGINI: OK, I'm
a GWT developer, also.

00:38:54.560 --> 00:38:58.840
So one of the first things I
look at when I start working

00:38:58.840 --> 00:39:03.000
with Chrome apps was how I could
move GWT applications to

00:39:03.000 --> 00:39:04.130
the Chrome apps.

00:39:04.130 --> 00:39:07.420
And there are some issues,
because we haven't talked

00:39:07.420 --> 00:39:13.400
about this today, but we'll talk
a lot about CSP on the

00:39:13.400 --> 00:39:14.540
next session.

00:39:14.540 --> 00:39:19.130
And CSP is a set of restrictions
that the Chrome

00:39:19.130 --> 00:39:23.410
app must follow to
be a Chrome app.

00:39:23.410 --> 00:39:27.140
And some of these restrictions,
and

00:39:27.140 --> 00:39:27.960
[? Virchow ?]

00:39:27.960 --> 00:39:33.330
you know that, because you
posted that on your question,

00:39:33.330 --> 00:39:39.570
it just allow some of the
features of GWT, G-W-T. A

00:39:39.570 --> 00:39:44.570
simple GWT application should
work on a sandbox iframe.

00:39:44.570 --> 00:39:48.740
I'm sorry for the audience
that have not heard about

00:39:48.740 --> 00:39:50.140
sandbox iframes.

00:39:50.140 --> 00:39:53.180
We'll talk about that
later, also.

00:39:53.180 --> 00:39:54.120
But some of the--

00:39:54.120 --> 00:39:55.490
PETE LEPAGE: Let's just talk--

00:39:55.490 --> 00:39:58.350
I'll give a 30-second
version of that.

00:39:58.350 --> 00:40:01.750
Content Security Policy
basically says it protects

00:40:01.750 --> 00:40:04.530
your apps from--

00:40:04.530 --> 00:40:08.150
helps to protect your apps
from cross-site scripting

00:40:08.150 --> 00:40:09.690
vulnerabilities.

00:40:09.690 --> 00:40:11.430
And it limits [INAUDIBLE]

00:40:11.430 --> 00:40:16.140
can run, how it gets run, and a
couple of things like that.

00:40:16.140 --> 00:40:20.030
So that means within Chrome
packaged apps, you can't do a

00:40:20.030 --> 00:40:23.850
certain set of things, but you
can have a sandboxed iframe

00:40:23.850 --> 00:40:25.930
that allows those things
to happen.

00:40:25.930 --> 00:40:27.050
But it's sandbox.

00:40:27.050 --> 00:40:31.300
So it lives off in its own
little world, and you can't

00:40:31.300 --> 00:40:34.760
easily communicate with the
rest of your application.

00:40:34.760 --> 00:40:38.680
So Renato, I'll pass it back
to you and you can--

00:40:38.680 --> 00:40:42.700
RENATO MANGINI: OK, so GWT
compiles your code and it uses

00:40:42.700 --> 00:40:49.480
some of the things that
CSP tries to avoid,

00:40:49.480 --> 00:40:52.070
which is new function--

00:40:52.070 --> 00:40:53.200
the use and the construction
of the

00:40:53.200 --> 00:40:58.720
function with string scripts.

00:40:58.720 --> 00:41:02.840
So you were supposed to run a
very simple GWT application on

00:41:02.840 --> 00:41:04.520
a sandbox iframe.

00:41:04.520 --> 00:41:12.000
If you are not, I would ask you
to submit a simple sample

00:41:12.000 --> 00:41:14.710
that doesn't work, and
we'll check it out.

00:41:14.710 --> 00:41:16.700
We'll try to make it happen.

00:41:16.700 --> 00:41:19.110
PETE LEPAGE: That's
a great point.

00:41:19.110 --> 00:41:21.820
If you find bugs as you're
building these things, if

00:41:21.820 --> 00:41:24.580
things aren't working right, the
forums are a great place

00:41:24.580 --> 00:41:25.810
to go post your questions.

00:41:25.810 --> 00:41:30.060
But as well, file
bugs with us.

00:41:30.060 --> 00:41:32.240
We need to hear about these
things so that we can get them

00:41:32.240 --> 00:41:36.590
fixed and ready for you to go
start using in real-- in

00:41:36.590 --> 00:41:39.240
production code.

00:41:39.240 --> 00:41:42.560
So the next question is "can we
get an API like the Chrome

00:41:42.560 --> 00:41:48.240
storage sync that syncs to our
own custom back-end point."

00:41:48.240 --> 00:41:52.050
And that's a great feature
request from Rob in Montana.

00:41:52.050 --> 00:41:55.610
Rob, it would be great if you
could go file that on Chromium

00:41:55.610 --> 00:42:00.150
bugs so that we can go and start
looking into that and

00:42:00.150 --> 00:42:02.590
see what happens.

00:42:02.590 --> 00:42:05.060
But that's the best place to
go file feature requests or

00:42:05.060 --> 00:42:07.470
anything like that.

00:42:07.470 --> 00:42:12.340
So the next question from
Anatoly in the European Union.

00:42:12.340 --> 00:42:15.660
"Awesome news on ways to
authenticate users via Google

00:42:15.660 --> 00:42:17.170
through an API.

00:42:17.170 --> 00:42:21.020
However, the dialogue looks
really scary to users like

00:42:21.020 --> 00:42:23.320
developers are going to
steal their email.

00:42:23.320 --> 00:42:26.500
Facebook has an option to
provide an anonymous ID of

00:42:26.500 --> 00:42:30.930
users without asking for email."
I guess that's not

00:42:30.930 --> 00:42:35.150
really a question, but maybe
a feature request.

00:42:35.150 --> 00:42:38.960
So Anatoly, if you would,
again, same thing.

00:42:38.960 --> 00:42:45.720
Go file a feature request on the
Chrome apps or in the bug

00:42:45.720 --> 00:42:50.070
database, that would be great.

00:42:50.070 --> 00:42:53.350
So we've got a couple
minutes left.

00:42:53.350 --> 00:42:56.830
But "do you have any plans for
exposing names of system fonts

00:42:56.830 --> 00:43:02.610
to packaged apps?" This is a
must for any app that provides

00:43:02.610 --> 00:43:07.205
rich text editing capabilities."
And Jarek has

00:43:07.205 --> 00:43:10.900
an API proposal already
as a gist on GitHub.

00:43:14.380 --> 00:43:17.180
Paul, do you want to talk
about this for a sec?

00:43:17.180 --> 00:43:21.470
PAUL LEWIS: Yeah, I think just
generally about fonts.

00:43:21.470 --> 00:43:25.880
I mean, if it's a system font
that is obviously, it comes

00:43:25.880 --> 00:43:28.000
with the OS, then you should
be able to use CSS as you

00:43:28.000 --> 00:43:30.300
normally would.

00:43:30.300 --> 00:43:35.130
You should expect the standard
browser behavior there.

00:43:35.130 --> 00:43:38.620
If you're considering embedding
fonts, you should

00:43:38.620 --> 00:43:40.880
consider the offline first
thing that you won't be

00:43:40.880 --> 00:43:43.860
loading those resources
remotely, That you'll want to

00:43:43.860 --> 00:43:46.080
bundle up those fonts
with your app.

00:43:46.080 --> 00:43:47.940
And obviously you need to make
sure that you check any

00:43:47.940 --> 00:43:52.370
licensing and so forth
to do with that.

00:43:52.370 --> 00:43:56.790
But in general, what you're
suggesting, which I think is

00:43:56.790 --> 00:44:02.635
can we pull a list of fonts on
this particular system, I

00:44:02.635 --> 00:44:04.720
think that it's another
feature request.

00:44:04.720 --> 00:44:06.760
It's a great feature request.

00:44:06.760 --> 00:44:10.960
Please file it as such, and we
will take a look at it with

00:44:10.960 --> 00:44:14.720
the engineering team and see
what we can do there.

00:44:14.720 --> 00:44:16.020
PETE LEPAGE: All
right, awesome.

00:44:16.020 --> 00:44:18.750
Well, Renato, I'm going to pass
the next question to you.

00:44:18.750 --> 00:44:22.160
"What's the difference between
the browser tag and an iframe

00:44:22.160 --> 00:44:25.540
tag with the sandbox attribute
introduced in HTML5?

00:44:25.540 --> 00:44:29.610
Aren't iframes already running
in a separate process?"

00:44:29.610 --> 00:44:29.900
RENATO MANGINI: Yeah.

00:44:29.900 --> 00:44:34.235
The browser tag is
also a new thing

00:44:34.235 --> 00:44:36.600
for most of the audience.

00:44:36.600 --> 00:44:39.640
The idea of the browser tag is
to be a completely separate

00:44:39.640 --> 00:44:43.740
instance of a browser-like
element.

00:44:43.740 --> 00:44:49.840
So it has its own cookie jar
it has it own storage, and

00:44:49.840 --> 00:44:54.220
it's completely independent
of your app, in general.

00:44:54.220 --> 00:44:58.440
The iframe tag, the sandbox
iframe, is different because

00:44:58.440 --> 00:45:01.250
the idea is to be part
of your application.

00:45:01.250 --> 00:45:02.550
None of those are--

00:45:05.120 --> 00:45:08.520
we created those to support
a few use cases.

00:45:08.520 --> 00:45:13.260
But our idea is not that you
are using both of these.

00:45:13.260 --> 00:45:19.750
Our idea is to really use the
power of Chrome apps.

00:45:19.750 --> 00:45:23.320
You should use those only if you
cannot do the same thing

00:45:23.320 --> 00:45:26.620
going outside of both browser
tag and iframe tag.

00:45:26.620 --> 00:45:29.470
So to simply answer the
tech, the iframe--

00:45:29.470 --> 00:45:33.590
the answer to the question is
the iframe tag is part of your

00:45:33.590 --> 00:45:34.190
application.

00:45:34.190 --> 00:45:38.162
The browser tag is to be a
complete separate part of a

00:45:38.162 --> 00:45:40.220
complete separate process.

00:45:40.220 --> 00:45:41.050
PETE LEPAGE: Cool.

00:45:41.050 --> 00:45:44.350
All right, well, we'll take one
more question, and then

00:45:44.350 --> 00:45:46.740
we're a little bit over time.

00:45:46.740 --> 00:45:51.680
Next question is "why would you
deprecate Flash in favor

00:45:51.680 --> 00:45:57.150
of making developers rewrite all
their stuff in HTML5?" And

00:45:57.150 --> 00:45:59.280
I'd like all three of us to
answer this because I think

00:45:59.280 --> 00:46:06.340
this is a really cool reason to
me, is that we really think

00:46:06.340 --> 00:46:10.690
HTML5 provides all of the
features and power and, in

00:46:10.690 --> 00:46:13.280
fact, even more than
Flash does.

00:46:13.280 --> 00:46:16.900
And we really want to see the
web built on open standards

00:46:16.900 --> 00:46:21.240
and take advantage of the things
that we can now do with

00:46:21.240 --> 00:46:24.145
HTML5 that we've never been
able to do before.

00:46:24.145 --> 00:46:27.330
With things like CSS animations,
with transitions,

00:46:27.330 --> 00:46:30.720
you can get some pretty awesome
experiences that work

00:46:30.720 --> 00:46:34.740
across all devices, no matter
where the user's coming from.

00:46:34.740 --> 00:46:39.840
So by pushing these towards an
open platform you get a lot

00:46:39.840 --> 00:46:40.590
more users.

00:46:40.590 --> 00:46:43.880
You get a lot more ability to do
stuff, and I think it's the

00:46:43.880 --> 00:46:46.940
way that the platform's
really moving.

00:46:46.940 --> 00:46:49.070
Paul, Renato, you want
to take a stab?

00:46:49.070 --> 00:46:52.160
PAUL LEWIS: You covered the main
points that I would have

00:46:52.160 --> 00:46:52.670
got there, Pete.

00:46:52.670 --> 00:46:54.420
Well played.

00:46:54.420 --> 00:46:56.485
I think it's exactly
as you said.

00:46:56.485 --> 00:47:01.020
I mean, the promise of the web
to some degree is ubiquity.

00:47:01.020 --> 00:47:05.220
And certainly HTML5 and
its support across--

00:47:05.220 --> 00:47:08.440
there's numerous devices that
we're seeing in tablets, and

00:47:08.440 --> 00:47:12.680
phones that have really come
on in the last few years.

00:47:12.680 --> 00:47:15.850
They're a much closer
match to HTML5.

00:47:15.850 --> 00:47:18.870
And we see, as Pete said, that's
the direction that the

00:47:18.870 --> 00:47:20.280
industry's been going in.

00:47:20.280 --> 00:47:23.730
And we're putting our weight
behind that and supporting

00:47:23.730 --> 00:47:25.390
that as the appropriate
platform,

00:47:25.390 --> 00:47:28.100
really, on which to build.

00:47:28.100 --> 00:47:29.780
PETE LEPAGE: Yeah.

00:47:29.780 --> 00:47:33.370
RENATO MANGINI: Yeah, I
understand the rage of the

00:47:33.370 --> 00:47:36.480
developer that has already
developed application and just

00:47:36.480 --> 00:47:39.170
want to move to the new platform
without changing

00:47:39.170 --> 00:47:42.430
anything it's completely
understandable.

00:47:42.430 --> 00:47:47.360
But there's so many new and cool
things on the HTML5 side

00:47:47.360 --> 00:47:51.905
that I suggest that if you
have a Flash application,

00:47:51.905 --> 00:47:56.150
consider moving it to HTML5.

00:47:56.150 --> 00:47:56.720
PETE LEPAGE: Cool.

00:47:56.720 --> 00:48:00.910
All right, so I think that
about wraps up for today.

00:48:00.910 --> 00:48:05.280
We're going to be back with you
guys live next Tuesday.

00:48:05.280 --> 00:48:11.030
Again at 9:30 Pacific, 12:30
Eastern, 5:30 in London.

00:48:11.030 --> 00:48:16.060
And in fact, we're going to
be joined by another Paul.

00:48:16.060 --> 00:48:17.800
We'll have two Pauls.

00:48:17.800 --> 00:48:22.220
And it's always fun to
have more Pauls.

00:48:22.220 --> 00:48:25.180
And in fact, a bunch of
us are all going to

00:48:25.180 --> 00:48:26.420
be in the same location.

00:48:26.420 --> 00:48:31.330
So we'll have a fun little
opportunity to interact right

00:48:31.330 --> 00:48:32.500
next to each other.

00:48:32.500 --> 00:48:34.850
So with that, I'll say thank
you guys very much.

00:48:34.850 --> 00:48:37.970
Look forward to seeing you
again in the near future.

00:48:37.970 --> 00:48:38.370
PAUL LEWIS: Thanks.

00:48:38.370 --> 00:48:39.610
Guys, fill in the survey.

00:48:39.610 --> 00:48:43.110
Make sure you tell us what
you want to hear about.

00:48:43.110 --> 00:48:44.180
RENATO MANGINI: Thank
you guys.

00:48:44.180 --> 00:48:45.320
Thank you, bye.

00:48:45.320 --> 00:48:46.570
PETE LEPAGE: All righty,
buh-bye.

