WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.039
(music playing)

00:00:02.039 --> 00:00:04.900
One of the dominant design principles
that Android adheres to

00:00:04.900 --> 00:00:07.100
is that it's a multi-tasking
operating system.

00:00:07.100 --> 00:00:10.900
Users can have multiple apps running
and quickly swap between them as needed.

00:00:10.900 --> 00:00:14.416
My name is Cole McAnlis, and to make sure
that your app is performing well,

00:00:14.416 --> 00:00:17.124
regardless of what the other apps
are doing on the device,

00:00:17.124 --> 00:00:19.540
it takes a bit of prep work
and a few handy APIs.

00:00:19.540 --> 00:00:22.940
At its core, this has everything to do
with the tragedy of the commons.

00:00:22.940 --> 00:00:26.110
Specifically, apps will act
regarding their specific situation

00:00:26.110 --> 00:00:28.580
without consideration
for the larger environment.

00:00:28.582 --> 00:00:31.245
Now by themselves,
this isn't necessarily a big problem.

00:00:31.245 --> 00:00:34.140
But remember that each running app
is taking up a small piece

00:00:34.140 --> 00:00:35.760
of the device's limited resources.

00:00:35.760 --> 00:00:39.680
And when those overall resources
run out, the user experience suffers.

00:00:39.680 --> 00:00:41.930
Each running application
has a set of resources

00:00:41.930 --> 00:00:45.550
that are resident in the device's memory.
For example, its state information,

00:00:45.550 --> 00:00:49.430
graphics resources, and for the most part,
all of its allocated heap objects

00:00:49.430 --> 00:00:52.950
stick around in memory even when
the application is in the background.

00:00:53.370 --> 00:00:56.700
Over time, the device will, as expected,
run out of available memory,

00:00:56.700 --> 00:01:00.970
since it's being taken up by other apps, 
and will need to kill an existing app

00:01:00.970 --> 00:01:03.559
in order to free up memory
for the active application.

00:01:03.789 --> 00:01:07.120
Remember that the whole reason we keep
background application in memory

00:01:07.120 --> 00:01:10.180
is so that switching to a background app
between a foreground app

00:01:10.180 --> 00:01:13.950
is a pretty fast process. But this
doesn't apply for killed background apps.

00:01:13.950 --> 00:01:16.378
If your app is killed
and the user comes back to it,

00:01:16.378 --> 00:01:18.688
we got to start from scratch,
relaunching the app

00:01:18.688 --> 00:01:21.830
as though it had never been loaded
into memory in the first place,

00:01:21.830 --> 00:01:25.983
which is a much slower operation
than swapping to it from the background.

00:01:25.990 --> 00:01:28.990
But the good news is that your app
doesn't have to be killed.

00:01:28.990 --> 00:01:32.850
Instead, when memory gets tight, your app
can offer up some of its allocated space

00:01:32.850 --> 00:01:36.330
back to the system, in order to avoid
the pain of being terminated.

00:01:36.330 --> 00:01:39.620
To facilitate this ritual sacrifice
of memory transfer,

00:01:39.620 --> 00:01:42.670
Android offers a set of callbacks
that will be issued to your app

00:01:42.670 --> 00:01:45.650
that you need to respond to.
But first, let's talk about

00:01:45.650 --> 00:01:48.065
what things happen
when they go horribly wrong.

00:01:48.065 --> 00:01:50.170
Once all of the other
background applications

00:01:50.170 --> 00:01:52.200
have been killed, in order to save memory,

00:01:52.200 --> 00:01:55.652
the active application
will get an on low memory callback,

00:01:55.652 --> 00:01:57.765
which signals that things
have gone horrible

00:01:57.765 --> 00:02:01.070
and that it should immediately
release any in memory resources

00:02:01.070 --> 00:02:03.864
to help stabilize the system.
If you have things in memory

00:02:03.864 --> 00:02:07.060
that aren't needed right now,
this is when you need to free them.

00:02:07.510 --> 00:02:09.440
But sadly, this callback only happens

00:02:09.440 --> 00:02:12.060
after all the background
apps have been killed.

00:02:12.060 --> 00:02:15.660
It would really be nice if instead of
killing those background applications,

00:02:15.660 --> 00:02:19.090
they were allowed to collectively
release some memory back to the system,

00:02:19.090 --> 00:02:22.850
which would help move everything along
but also keep them from being killed off.

00:02:22.850 --> 00:02:25.780
This is the exact reason
why the on-trim memory callback

00:02:25.780 --> 00:02:28.630
was provided with the release
of Ice Cream Sandwich.

00:02:28.630 --> 00:02:31.067
This callback is issued
to all running applications

00:02:31.067 --> 00:02:34.590
and gives them the ability
to release memory rather than being killed.

00:02:34.590 --> 00:02:38.069
This is facilitated by an integer value
that's provided to the callback.

00:02:38.070 --> 00:02:42.640
The trim level that's given to you
is a value between 0 and 100.

00:02:42.670 --> 00:02:46.750
But there are a handful of values defined,
which you can check against.

00:02:46.780 --> 00:02:51.830
For example the trim memory moderate value
means the device is running low on memory.

00:02:51.830 --> 00:02:54.636
And it's a great time for your app
to start evicting things,

00:02:54.636 --> 00:02:58.380
like your bitmap thumbnail cache,
while the trim memory background flag

00:02:58.380 --> 00:03:01.497
means that some background applications
are starting to be killed

00:03:01.497 --> 00:03:05.620
and that the app has recently transitioned
to being a background app.

00:03:05.620 --> 00:03:09.204
This is a great time to free up memory
that won't be critical if the user

00:03:09.204 --> 00:03:11.130
comes back to your app really quick.

00:03:11.130 --> 00:03:13.460
Oh, and if you're comparing
against these values,

00:03:13.460 --> 00:03:16.600
you might want to make sure
to use a greater than equal comparison,

00:03:16.600 --> 00:03:19.090
just in case we add
new defined values in the future.

00:03:19.090 --> 00:03:21.946
And the best part is that
in order to help you free up memory

00:03:21.946 --> 00:03:24.850
from every corner of your app,
this callback can be overridden

00:03:24.850 --> 00:03:30.350
on activity, fragment, service,
content provider, and application classes.

00:03:30.350 --> 00:03:32.637
But in order to produce
the best user experience,

00:03:32.637 --> 00:03:35.540
your app shouldn't just be reactive
to type memory situations,

00:03:35.540 --> 00:03:37.590
but also proactive,
depending on the device.

00:03:37.610 --> 00:03:41.910
The ActivityManager.isLowRamDevice API
that was added in KitKat

00:03:41.910 --> 00:03:44.600
can be used to help detect
if your application is running

00:03:44.600 --> 00:03:48.550
on a device with low memory.
Currently, a return value of true

00:03:48.550 --> 00:03:52.410
typically indicates memory
of 512 megabytes or less.

00:03:52.410 --> 00:03:54.450
This condition should be used by apps

00:03:54.450 --> 00:03:56.787
to help decide what features
to enable or disable,

00:03:56.787 --> 00:03:59.940
depending on whether or not
it's going to be a good user experience

00:03:59.940 --> 00:04:01.795
for these low memory devices.

00:04:01.795 --> 00:04:04.180
Of course, playing nice
with the rest of the system

00:04:04.180 --> 00:04:07.344
is just the tip of the iceberg,
which is why you need to check out

00:04:07.344 --> 00:04:09.610
the rest of the
Android Performance Patterns content.

00:04:09.610 --> 00:04:12.370
Oh, and don't forget to join
our Google+ community

00:04:12.370 --> 00:04:15.010
for other great tips
from other great developers.

00:04:15.010 --> 00:04:17.850
So keep calm, profile your code,
and always remember,

00:04:17.850 --> 00:04:19.600
Perf Matters.

00:04:19.794 --> 00:04:22.647
(music playing)

