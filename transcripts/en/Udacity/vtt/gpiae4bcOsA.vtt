WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:04.170
Now let's look at the shared memory
version of the same program.

00:00:04.170 --> 00:00:07.130
We still have the same size
of the overall array and

00:00:07.130 --> 00:00:09.810
the same number of processor cores.

00:00:09.810 --> 00:00:12.350
But this time they can all
access the same memory, so

00:00:12.350 --> 00:00:15.110
we can just put the whole
array in memory.

00:00:15.110 --> 00:00:20.440
We will have the total sum, and each
of them will be computing its own sum.

00:00:20.440 --> 00:00:22.610
So, because this array
is in the shared memory,

00:00:22.610 --> 00:00:26.200
each processor will sum up
its own part of the array.

00:00:26.200 --> 00:00:30.250
The big difference occurs not only here,
where we are actually able to just

00:00:30.250 --> 00:00:32.500
access the part of
the array that we want.

00:00:32.500 --> 00:00:35.680
But also in how we can compute the sum.

00:00:35.680 --> 00:00:38.550
Instead of having to explicitly send.

00:00:38.550 --> 00:00:41.160
The elements of the array
to one of the cores.

00:00:41.160 --> 00:00:46.490
Here, each core can access the allSum
variable to compute the final sum.

00:00:46.490 --> 00:00:51.150
So what they do is they synchronize,
so they have a critical section around

00:00:51.150 --> 00:00:55.500
this, and then each core simply
takes the overall sum and adds its

00:00:55.500 --> 00:00:59.460
own sum into it, and then frees the lock
so that the next core can do it.

00:00:59.460 --> 00:01:02.660
So the course can do this
in any order they want.

00:01:02.660 --> 00:01:04.840
We don't have to control that order or
anything.

00:01:04.840 --> 00:01:09.360
All that needs to happen is that all
of them have added the sum together.

00:01:09.360 --> 00:01:14.810
And now we still have to make sure that
one of the cores prints out the sum.

00:01:14.810 --> 00:01:17.650
But because this can
be done in any order,

00:01:17.650 --> 00:01:22.380
Core Zero could be the one that
does this first and then prints out

00:01:22.380 --> 00:01:26.300
only its part of the sum because
the others has not updated this yet.

00:01:26.300 --> 00:01:30.960
So we need to add code here, to have
what's called a barrier, where basically

00:01:30.960 --> 00:01:35.060
we put a synchronization here that
makes all of the cores wait for

00:01:35.060 --> 00:01:37.370
everybody to arrive before they proceed.

00:01:37.370 --> 00:01:41.300
To ensure that Core Zero when
it does this, does it only when

00:01:41.300 --> 00:01:45.700
everybody else has arrived to this point
and has incremented the sum already.

00:01:45.700 --> 00:01:49.650
One of the nice properties of this is
not only that it makes it more explicit

00:01:49.650 --> 00:01:53.370
who does what, so that we don't have
to think about this as being basically

00:01:53.370 --> 00:01:55.530
four different versions of code.

00:01:55.530 --> 00:01:57.720
There is no need to
distribute the array.

00:01:57.720 --> 00:02:00.380
The whole array is all of
the time in the shared memory.

00:02:00.380 --> 00:02:02.320
We just choose who is
going to access what.

