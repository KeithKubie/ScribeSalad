WEBVTT
Kind: captions
Language: en

00:00:00.215 --> 00:00:03.080
We've seen this picture a few times, let's talk about how our

00:00:03.080 --> 00:00:05.810
algorithm is going to change. So what we're going to do is you know,

00:00:05.810 --> 00:00:09.640
user makes the, makes a request. We go to the database, we

00:00:09.640 --> 00:00:12.300
run the query, we get the results out we store them in

00:00:12.300 --> 00:00:15.530
the cache. And then we return the HTML to the user, that's

00:00:15.530 --> 00:00:19.190
kind of our standard use case and then any future requests Hit

00:00:19.190 --> 00:00:22.540
ASCII chan, bounce off the cache and come back. Now, we're going to

00:00:22.540 --> 00:00:25.520
improve the situation a little bit. So that when you do a database

00:00:25.520 --> 00:00:33.230
write, so we post a new piece of art. And we do our write to the database.

00:00:33.230 --> 00:00:36.080
At the same time, we're going to clear

00:00:36.080 --> 00:00:39.390
our cache. So that after we've redirected user to

00:00:39.390 --> 00:00:42.650
the front page. And the user fetches Slash

00:00:42.650 --> 00:00:45.540
again. We're going to run our query, we're going to get

00:00:45.540 --> 00:00:48.390
our result, we're going to re-cache the new version, which

00:00:48.390 --> 00:00:50.620
has you know, multiple things in it, and then

00:00:50.620 --> 00:00:54.370
return correct HTML to our user. So, let's go ahead

00:00:54.370 --> 00:00:56.860
and see how that looks in the code. Okay, now

00:00:56.860 --> 00:01:00.270
despite the complexity of that picture This is actually a

00:01:00.270 --> 00:01:03.890
fairly easy change. Our rendering front page doesn't change at

00:01:03.890 --> 00:01:07.110
all. And our top arts function that runs the cache

00:01:07.110 --> 00:01:09.870
database query. This also doesn't change at all. The only

00:01:09.870 --> 00:01:12.190
thing is going to change, is when we submit new

00:01:12.190 --> 00:01:15.790
art which is in this function here, the post function.

00:01:15.790 --> 00:01:18.010
After we put this art in the database. Let's just

00:01:18.010 --> 00:01:22.120
clear our cache. Which looks something like this. Cache.clear. Clear is

00:01:22.120 --> 00:01:24.585
a function on Python dictionaries that just basically empties the

00:01:24.585 --> 00:01:27.930
dictionary.cl In our case, this will work just fine, because we're

00:01:27.930 --> 00:01:30.220
only storing one thing in the cache. So we, it's,

00:01:30.220 --> 00:01:33.130
it's fine to just delete everything. Alternatively, of course, we could

00:01:33.130 --> 00:01:37.540
have just said cache, you know, top, equals none, something

00:01:37.540 --> 00:01:41.380
like that. But, let's go with the simple solution for now.

00:01:41.380 --> 00:01:44.250
Okay, so let's see how this works. So here we are. I'm

00:01:44.250 --> 00:01:46.960
going to reload our front page of Ascii Chan. We see our beer is

00:01:46.960 --> 00:01:49.760
here now because I changed the app so our cache got cleared

00:01:49.760 --> 00:01:53.200
anyway. If we go to our terminal, we see that our most request

00:01:53.200 --> 00:01:56.390
did a database query, and if I go back to Ascii Chan.

00:01:56.390 --> 00:01:59.600
Reload the page again, and then go back to our terminal. We can

00:01:59.600 --> 00:02:03.900
see that our most recent request did not make a DB query. So,

00:02:03.900 --> 00:02:06.280
that's pretty cool. So our caching is still working on our front page.

00:02:06.280 --> 00:02:10.370
Now let's submit a new piece of art to ASCIIchan and see

00:02:10.370 --> 00:02:12.880
if the site still works. I'm going to put a few blank lines

00:02:12.880 --> 00:02:14.920
here so we can see where we were when we come back

00:02:14.920 --> 00:02:17.240
to this. Okay, so here we are in ASCII chan. Let's go

00:02:17.240 --> 00:02:20.320
ahead and submit a new piece of art. In this case it's

00:02:20.320 --> 00:02:23.770
going to be a cake. Now, what should happen is we're going to store

00:02:23.770 --> 00:02:27.940
this in a database, clear the cache, reload the page, update the

00:02:27.940 --> 00:02:31.530
cache, and have our new piece of cake. Okay, so I submitted and

00:02:31.530 --> 00:02:36.080
now we see our cake is here. Let's go ahead and look at our terminal to see all

00:02:36.080 --> 00:02:40.180
these requests. Okay, so we can see our post

00:02:40.180 --> 00:02:44.380
here. That was the submission and then we responded with

00:02:44.380 --> 00:02:47.050
the 302 which is the redirect and we can

00:02:47.050 --> 00:02:50.580
see we print off db query and we see our

00:02:50.580 --> 00:02:53.330
front page request and all is well. Now if

00:02:53.330 --> 00:02:55.730
I were to reload our page again, here we go,

00:02:57.060 --> 00:02:59.030
and go back to the terminal we could see the follow up

00:02:59.030 --> 00:03:03.010
request didn't hit the database. So, now we've got this cool system.

00:03:04.070 --> 00:03:07.030
When we submit to the database, we clear the cache, and then

00:03:07.030 --> 00:03:09.810
the next time we hit the front page, we rerun the query and

00:03:09.810 --> 00:03:12.270
every page after that doesn't hit the database anymore. So now we're

00:03:12.270 --> 00:03:17.090
doing only as many database queries as we actually need, and so every

00:03:17.090 --> 00:03:19.670
user to Ascii Chan wont have to hit the database unless there's

00:03:19.670 --> 00:03:22.070
a new submission for them. This is going to cut down on our database

00:03:22.070 --> 00:03:25.690
requests substantially. You know, instead of doing one database

00:03:25.690 --> 00:03:28.260
read on every page view, we're only doing one

00:03:28.260 --> 00:03:32.190
database read on every submission, which happens far less

00:03:32.190 --> 00:03:35.990
frequently. Okay, so we implemented our new algorithm and

00:03:35.990 --> 00:03:39.250
before in the original algorithm we were doing one

00:03:39.250 --> 00:03:43.240
DB ready per page view. This is really bad.

00:03:43.240 --> 00:03:44.720
You know, this is doing a lot of unnecessary

00:03:44.720 --> 00:03:47.320
database reads. The name of the game when you're scaling

00:03:47.320 --> 00:03:51.240
websites, is only do the minimum number of database

00:03:51.240 --> 00:03:53.150
operations that you need to. And in this case,

00:03:53.150 --> 00:03:56.150
one read per page view is the opposite of

00:03:56.150 --> 00:04:00.480
that. After our solution, we're only doing one DB read

00:04:00.480 --> 00:04:04.330
per submission, and since submissions are rare, you know,

00:04:04.330 --> 00:04:06.700
most of our users, you know, the vast majority

00:04:06.700 --> 00:04:09.520
of them, aren't submitting new content. They're just reading

00:04:09.520 --> 00:04:12.400
content. We've cut down the number of database operations we're

00:04:12.400 --> 00:04:15.900
doing significantly. So when you're looking for speed and you're

00:04:15.900 --> 00:04:18.220
looking for sufficiency and you're looking to not spend all of

00:04:18.220 --> 00:04:21.420
your money paying for database access, this is a much

00:04:21.420 --> 00:04:23.450
better approach than this one. You know, if we're getting a

00:04:23.450 --> 00:04:26.860
thousand page views a day. And ten submissions today, we

00:04:26.860 --> 00:04:30.820
went from 1000 DB reads to ten. That's a big improvement.

00:04:30.820 --> 00:04:34.730
And those are approximately the real numbers from ASCII chan, so,

00:04:34.730 --> 00:04:37.130
you know, we just saved Steve a bunch of coin here,

00:04:37.130 --> 00:04:38.210
so, good job, everybody.

