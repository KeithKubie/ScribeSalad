WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.520
COLT MCANLIS: Hey, game devs.

00:00:01.520 --> 00:00:04.230
Ever notice that after a user
switches from another app back

00:00:04.230 --> 00:00:07.070
to your game, the
entire world explodes?

00:00:07.070 --> 00:00:09.004
That's due to
OpenGL context loss,

00:00:09.004 --> 00:00:10.420
and it's a process
in Android that

00:00:10.420 --> 00:00:12.490
can be maddening if
not handled correctly.

00:00:12.490 --> 00:00:15.300
My name is Colt McAnlis, and
I'm here with a few simple tips

00:00:15.300 --> 00:00:18.230
to make the recovering from
a context loss a lot easier.

00:00:18.230 --> 00:00:20.730
Firstly, you have to understand
that OpenGL context loss can

00:00:20.730 --> 00:00:22.690
happen for any
number of reasons.

00:00:22.690 --> 00:00:24.650
For example, when the
user rotates their phone,

00:00:24.650 --> 00:00:26.450
or they get a call,
or any time they

00:00:26.450 --> 00:00:29.180
swap to and from your game.

00:00:29.180 --> 00:00:31.240
And what makes GL
context loss so difficult

00:00:31.240 --> 00:00:34.040
is that any resources you have
on the GPU-- like textures,

00:00:34.040 --> 00:00:35.560
vertex buffers,
and the like-- are

00:00:35.560 --> 00:00:38.024
invalidated when the
context loss occurs, which

00:00:38.024 --> 00:00:40.440
means any references you had
to those objects in your game

00:00:40.440 --> 00:00:42.250
are now invalid as well.

00:00:42.250 --> 00:00:44.310
The objects just
don't exist anymore.

00:00:44.310 --> 00:00:46.090
Properly recovering
from a context loss

00:00:46.090 --> 00:00:47.880
is a two-step process.

00:00:47.880 --> 00:00:50.430
First, you have to detect
when a context loss occurs

00:00:50.430 --> 00:00:53.740
and properly recover the basic
OpenGL states to put it back

00:00:53.740 --> 00:00:54.580
in order.

00:00:54.580 --> 00:00:58.190
Second, you need to then go
through and recreate any GPU

00:00:58.190 --> 00:01:00.280
assets that you might
need for your game.

00:01:00.280 --> 00:01:02.280
So let's start at the top.

00:01:02.280 --> 00:01:03.850
Detecting when a
context loss occurs

00:01:03.850 --> 00:01:05.736
is an extremely easy process.

00:01:05.736 --> 00:01:07.610
Typically at the end of
your rendering frame,

00:01:07.610 --> 00:01:09.700
you make a call to
EGL Swap Buffers

00:01:09.700 --> 00:01:13.080
in order to signal OpenGL to
move ahead with the next frame.

00:01:13.080 --> 00:01:15.730
When a loss occurs,
The Swap Buffer call

00:01:15.730 --> 00:01:18.480
will return an EGL
false value to let

00:01:18.480 --> 00:01:20.510
you know that something
has gone wrong.

00:01:20.510 --> 00:01:23.020
And in true GL
fashion, you can then

00:01:23.020 --> 00:01:24.780
get the reason for
the context loss

00:01:24.780 --> 00:01:27.410
by immediately
calling GL Get Error.

00:01:27.410 --> 00:01:28.910
The returning enum
will let you know

00:01:28.910 --> 00:01:32.270
if you've lost your display,
surface, or context objects.

00:01:32.270 --> 00:01:35.380
These three objects-- surface,
display, and context--

00:01:35.380 --> 00:01:38.230
are created when you
first initialize OpenGL,

00:01:38.230 --> 00:01:40.920
and each comes with their own
create and destroy methods,

00:01:40.920 --> 00:01:44.010
which is very, very important
on the Android platform.

00:01:44.010 --> 00:01:47.042
Each object can be lost
independently of the others,

00:01:47.042 --> 00:01:49.250
and should be recovered
independently from the others

00:01:49.250 --> 00:01:50.657
after a loss has occurred.

00:01:50.657 --> 00:01:52.490
Trying to recover all
three at the same time

00:01:52.490 --> 00:01:55.100
is simply going to
drive you insane.

00:01:55.100 --> 00:01:57.660
So when you've been notified
that an object has been lost,

00:01:57.660 --> 00:01:59.951
the first thing you need to
do is go ahead and properly

00:01:59.951 --> 00:02:01.810
call the destroy
method for that object,

00:02:01.810 --> 00:02:03.817
and then send it back
to its default state.

00:02:03.817 --> 00:02:05.400
This process will
make sure everything

00:02:05.400 --> 00:02:07.074
is cleaned up properly.

00:02:07.074 --> 00:02:09.240
Oh, and it's a really good
idea to set a global flag

00:02:09.240 --> 00:02:11.760
that details that your
context has been lost that

00:02:11.760 --> 00:02:14.377
will help us in the recovery
of this state later.

00:02:14.377 --> 00:02:15.960
Now that we've
detected a context loss

00:02:15.960 --> 00:02:18.120
and properly invalidated
the object responsible,

00:02:18.120 --> 00:02:20.240
it's actually time
to recover the lost

00:02:20.240 --> 00:02:21.935
object in the same fashion.

00:02:21.935 --> 00:02:23.560
The best place to
recover these objects

00:02:23.560 --> 00:02:25.226
is at the beginning
of your render frame

00:02:25.226 --> 00:02:27.360
before you go off and do
any of your draw calls.

00:02:27.360 --> 00:02:28.810
It's pretty straightforward
at this point.

00:02:28.810 --> 00:02:31.101
Since we invalidated our
objects in the previous frame,

00:02:31.101 --> 00:02:33.050
we simply need to
check which objects

00:02:33.050 --> 00:02:35.590
are in the invalid
state and directly call

00:02:35.590 --> 00:02:37.109
their initialization functions.

00:02:37.109 --> 00:02:39.150
And once you've detected
that all of your objects

00:02:39.150 --> 00:02:42.670
have been restored, you can
then reattach GL to the context

00:02:42.670 --> 00:02:45.240
and surface by calling
EGL Make Current.

00:02:45.240 --> 00:02:48.234
Oh, and you can also flip your
context loss flag back to false

00:02:48.234 --> 00:02:50.400
at this point, because
everything has been recovered

00:02:50.400 --> 00:02:52.870
and you're good to go.

00:02:52.870 --> 00:02:54.750
Now, it's worth pointing
out one caveat here.

00:02:54.750 --> 00:02:57.900
There's a tad bit of a temporal
quality to this whole process

00:02:57.900 --> 00:03:00.230
that you could be receiving
Render Frame calls

00:03:00.230 --> 00:03:02.950
before the system is ready to
allow you to actually recover

00:03:02.950 --> 00:03:04.250
from a context loss.

00:03:04.250 --> 00:03:07.150
As such, calls to the Create
Functions for your GL objects

00:03:07.150 --> 00:03:09.862
will fail until things
have actually settled down.

00:03:09.862 --> 00:03:11.570
If this is the case,
the best thing to do

00:03:11.570 --> 00:03:13.361
is simply break out of
your Render function

00:03:13.361 --> 00:03:15.320
and keep trying each
subsequent frame

00:03:15.320 --> 00:03:18.630
to recover until the system
has actually settled down.

00:03:18.630 --> 00:03:20.870
So that OpenGL is properly
recovered after a loss,

00:03:20.870 --> 00:03:23.860
it's time for the really
hard part-- recreating

00:03:23.860 --> 00:03:25.391
your game's GPU resources.

00:03:25.391 --> 00:03:26.890
The reason that
this is so difficult

00:03:26.890 --> 00:03:28.600
is that typically,
game developers

00:03:28.600 --> 00:03:30.920
bundle initialization
of their GPU assets

00:03:30.920 --> 00:03:33.210
alongside initialization
of the systems

00:03:33.210 --> 00:03:34.660
that they correspond to.

00:03:34.660 --> 00:03:36.910
For example, loading
a map file usually

00:03:36.910 --> 00:03:38.960
requires you to read the
map data off of disk,

00:03:38.960 --> 00:03:40.780
find some texture
information in it,

00:03:40.780 --> 00:03:42.440
load that texture
into CPU memory,

00:03:42.440 --> 00:03:45.340
and then copy that
into GPU memory.

00:03:45.340 --> 00:03:48.970
When a loss occurs, the textures
that the map references are now

00:03:48.970 --> 00:03:51.620
invalid, and the only
path to recreate them

00:03:51.620 --> 00:03:55.770
requires going back through
and reloading the map object.

00:03:55.770 --> 00:03:58.300
In reality, this is a bad
idea, and it will only

00:03:58.300 --> 00:04:00.580
lead you into the
valley of madness.

00:04:00.580 --> 00:04:02.520
The correct thing to
do here is twofold.

00:04:02.520 --> 00:04:05.840
Firstly, you need to add a
manager system to resources

00:04:05.840 --> 00:04:08.000
and assets that you
load off of disk.

00:04:08.000 --> 00:04:10.370
For example, rather than
going directly to disk

00:04:10.370 --> 00:04:13.680
to load a texture, instead,
create a texture manager system

00:04:13.680 --> 00:04:15.200
to do that work for you.

00:04:15.200 --> 00:04:17.250
The manager system should
define an object that

00:04:17.250 --> 00:04:20.844
holds the GL handle as well
as a path to the file on disk.

00:04:20.844 --> 00:04:23.260
The manager will handle loading
of the texture off of disk

00:04:23.260 --> 00:04:25.951
and creating the GPU
resources on your behalf.

00:04:25.951 --> 00:04:27.700
This does create a
little bit of overhead,

00:04:27.700 --> 00:04:29.533
though, as you want to
pass back the Managed

00:04:29.533 --> 00:04:32.560
handle to the texture rather
than the OpenGL one, which you

00:04:32.560 --> 00:04:36.590
can easily transfer for
later with a different API.

00:04:36.590 --> 00:04:38.290
To make the assets
systems fully work,

00:04:38.290 --> 00:04:41.040
you need to support the second
step of our process, which

00:04:41.040 --> 00:04:43.490
is allowing a function chain
that can destroy and create

00:04:43.490 --> 00:04:45.390
the resources on demand.

00:04:45.390 --> 00:04:47.840
Since your asset manager is
keeping around the file names,

00:04:47.840 --> 00:04:50.640
you can easily go back and
recreate any GPU assets

00:04:50.640 --> 00:04:53.447
you need once a GL loss
occurs without having

00:04:53.447 --> 00:04:55.530
to update the external
systems that might actually

00:04:55.530 --> 00:04:57.130
be interfacing with the manager.

00:04:57.130 --> 00:04:59.790
Oh, and it also lends itself
to really cool processes,

00:04:59.790 --> 00:05:02.820
like being able to detect when
an asset has changed on disk

00:05:02.820 --> 00:05:04.780
and automatically
updating it in memory.

00:05:04.780 --> 00:05:07.000
But that's a different show.

00:05:07.000 --> 00:05:08.500
Anyhow, the last
thing we need to do

00:05:08.500 --> 00:05:10.690
is properly support the
Create Destroy cycle

00:05:10.690 --> 00:05:13.170
during our GL loss
recovery process.

00:05:13.170 --> 00:05:15.500
Firstly, when a GL
context loss is detected,

00:05:15.500 --> 00:05:17.600
you want to globally
destroy any existing

00:05:17.600 --> 00:05:19.060
handles to graphics objects.

00:05:19.060 --> 00:05:21.240
This includes any asset
managers you've created

00:05:21.240 --> 00:05:22.850
as well as any
subsystems that might

00:05:22.850 --> 00:05:26.310
have static or manually-created
resources as well.

00:05:26.310 --> 00:05:28.870
And once GL context loss
is properly recovered,

00:05:28.870 --> 00:05:30.830
you can then move
forward with recreating

00:05:30.830 --> 00:05:33.180
all of your game's
GPU resources.

00:05:33.180 --> 00:05:36.754
And with that, everything should
be back up and running again.

00:05:36.754 --> 00:05:38.920
To understand more about
the Android life cycle, hop

00:05:38.920 --> 00:05:40.503
on over to the Android
developer site.

00:05:40.503 --> 00:05:43.150
And don't forget to check out
Google Play Games services

00:05:43.150 --> 00:05:45.940
examples, which includes other
great tricks for handling

00:05:45.940 --> 00:05:47.900
NDK apps on Android.

00:05:47.900 --> 00:05:50.000
Now, by properly
recovering a context loss

00:05:50.000 --> 00:05:53.380
and adding an adaptive model
for recreating your GPU assets,

00:05:53.380 --> 00:05:55.660
you'll be creating a stable
environment for your users

00:05:55.660 --> 00:05:58.490
so that they can get back to
the really important stuff--

00:05:58.490 --> 00:06:00.380
killing zombies.

00:06:00.380 --> 00:06:02.240
Thanks for watching.

