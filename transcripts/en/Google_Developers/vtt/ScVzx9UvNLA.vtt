WEBVTT
Kind: captions
Language: en

00:00:09.820 --> 00:00:15.349
Hello I am Hernán Liendo, one of the 13  Google Developer Experts in Cloud Platform, I am a College

00:00:15.349 --> 00:00:20.410
professor for more than 15 years now, and co founder of  Zupcat. As I was telling you before

00:00:20.410 --> 00:00:24.539
in Zupcat we publish and develop very high quality games for a large number

00:00:24.539 --> 00:00:29.070
of players around the world. Although it is a game, behing it, there are a lot

00:00:29.070 --> 00:00:34.690
of frameworks and architectonics that are essential to know in order to achieve succes
In this presentation

00:00:34.690 --> 00:00:38.489
I will be giving you more details of these frameworks and architectonics, along with the scenarios in which I recommend its

00:00:38.489 --> 00:00:42.760
use. We can divide de main infrastructure frameworks in 4 large groups:

00:00:42.760 --> 00:00:48.079
for managing data, for object storage, for

00:00:48.079 --> 00:00:53.079
managing content, and general porpuse frameworks.  The content

00:00:53.079 --> 00:00:57.940
frameworks allow to host content with high
availabiility and download speed.

00:00:57.940 --> 00:01:02.969
Google Cloud Storage is the main  content framework
and provides a web management interface,

00:01:02.969 --> 00:01:09.110
and also a programmatic one. When you  host content, this content is automatically

00:01:09.110 --> 00:01:14.340
replicated in multiple servers, and when the demand increases, the content replicates

00:01:14.340 --> 00:01:20.780
more. In this way you can present information and publish it in the same place that Google uses.

00:01:20.780 --> 00:01:27.720
Check out how simple it is. Select the file, upload it

00:01:28.600 --> 00:01:30.980
and when it is available

00:01:31.140 --> 00:01:38.140
you get the public link. That´s it. By doing this, the content is available in multiple servers.

00:01:38.689 --> 00:01:44.090
On the other hand, the first option for data storage is Cloud Data Store, it is ideal for apps

00:01:44.090 --> 00:01:48.880
with large number of records that must be constantly consulted,

00:01:48.880 --> 00:01:52.850
the downside is that migration of apps is usually expensive, this is why

00:01:52.850 --> 00:01:57.740
I recommend to use this when dealing with new apps. Also, the learning curve

00:01:57.740 --> 00:02:01.770
might be a bit high, therefore I recommend to use another framework of higher quality, such as

00:02:01.770 --> 00:02:07.100
Objetic File o Simple Datastore, which we will explore later. Other framework for data storage

00:02:07.100 --> 00:02:11.489
is Memcached, which provides us with an objects cache  for storing very fast reading data

00:02:11.489 --> 00:02:16.380
In fact, in our measurements we found it is 10 times faster

00:02:16.380 --> 00:02:21.359
than a query in Data Store, and regarding its writing

00:02:21.359 --> 00:02:26.350
we have found it is 5 times faster. It is ideal to storage data that is constantly read, such as

00:02:26.350 --> 00:02:31.019
application parameters or to save data from the user session, while

00:02:31.019 --> 00:02:35.540
the user is active in the game. If you need to persist standard data structures, Cloud

00:02:35.540 --> 00:02:40.810
Platform present us 2 solutions: Cloud SQL and Bigquery.

00:02:40.810 --> 00:02:47.810
Cloud SQL presents one or multiple instances of a database engine MySQL.

00:02:47.829 --> 00:02:53.049
The difference is that we don't have to be installing the database, configuring it, maintaining it

00:02:53.049 --> 00:02:57.260
or making an upgrade.
 It is also very intersting that 

00:02:57.260 --> 00:03:02.090
it provides a very flexible Pricing scheme and we only pay for the time that a query

00:03:02.090 --> 00:03:06.320
is being executed. This is ideal for applications that just start, or for QA

00:03:06.320 --> 00:03:11.699
The disadvantage is that the cost of use 

00:03:11.699 --> 00:03:15.970
is a little higher than the Data Store
but is ideal for applications that already exist

00:03:15.970 --> 00:03:21.320
and that requires a SQL data in the back and can be hosted in the cloud. BigqQuery

00:03:21.320 --> 00:03:25.169
is a product that was recently released and we found very useful for the requirements

00:03:25.169 --> 00:03:30.040
we have. This allows us to process large amounts of data 

00:03:30.040 --> 00:03:35.530
very quickly and in parallel.
It presents very similar SQL tables, where

00:03:35.530 --> 00:03:39.979
ou can only add records and a query interface that has the commands we already know

00:03:39.979 --> 00:03:46.880
In our case, we have games that have millions of users and each user 

00:03:46.880 --> 00:03:52.260
generates thousands of events. In that case we have tables with billions of records 

00:03:52.260 --> 00:03:58.229
for those events. I'll show you a very common use that we have of this. 

00:03:58.229 --> 00:04:03.979
For example, For example in this consultation we are watching every movement of economy that made ​​a user 

00:04:03.979 --> 00:04:10.979
with this ID. I run the query that is going to ride these billions of data 

00:04:12.009 --> 00:04:15.729
and it will give me the information of each of the registers and  each of the changes 

00:04:15.729 --> 00:04:20.650
that had the economy of this player. The great thing about BigQuery is that the storage cost 

00:04:20.650 --> 00:04:25.720
of the data, is 10 times lower than Datastore. On the other side 

00:04:25.720 --> 00:04:30.660
we just pay for the time that a query is being executed. If we need

00:04:30.660 --> 00:04:35.180
great flexibility, we can use an existing data base 

00:04:35.180 --> 00:04:40.980
like Mongo DB or Cassandra inside Compute Engine. An App Engine application can access 

00:04:40.980 --> 00:04:45.350
Compute Engine and connect to these databases, which is ideal 

00:04:45.350 --> 00:04:49.410
for applications that exist or have particular requirements. To do this, we simply go to 

00:04:49.410 --> 00:04:56.150
the management console of Cloud Platform, we select the database we want to 

00:04:56.150 --> 00:05:02.930
create, we choose how many nodes we will use, in this case in Cassandra 

00:05:02.930 --> 00:05:08.070
and we deploy it. When we do this, Compute Engine creates new machines based on a template that is already 

00:05:08.070 --> 00:05:11.790
installed in Cassandra and that is ready to be used. 

00:05:11.790 --> 00:05:16.970
In the next videos I will tell you about our core structure

00:05:16.970 --> 00:05:21.620
that we use in our games and that we've been improving over the years. We've also has released it as open source project. 

00:05:21.620 --> 00:05:25.730
See you next time!

