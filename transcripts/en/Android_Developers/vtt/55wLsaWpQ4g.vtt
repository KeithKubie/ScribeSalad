WEBVTT
Kind: captions
Language: en

00:00:05.670 --> 00:00:07.940
CHET HAASE: So today let's
talk about animation.

00:00:07.940 --> 00:00:11.020
There was a lot of animation
facilities added in Android 3,

00:00:11.020 --> 00:00:12.500
the Honeycomb release.

00:00:12.500 --> 00:00:15.720
There's a whole animation
package and that package in

00:00:15.720 --> 00:00:17.750
those classes have been
enhanced over time in

00:00:17.750 --> 00:00:18.660
subsequent releases.

00:00:18.660 --> 00:00:20.470
So we're going to talk about
some of the stuff that was

00:00:20.470 --> 00:00:23.360
added in 3.0, as well as some
stuff that was added in

00:00:23.360 --> 00:00:25.150
Android 4.1 Jelly Bean.

00:00:25.150 --> 00:00:26.830
In particular, we're going
to talk about the layout

00:00:26.830 --> 00:00:27.710
transition class.

00:00:27.710 --> 00:00:28.860
It's a little known class.

00:00:28.860 --> 00:00:31.170
It's actually used a lot
internally in some of the

00:00:31.170 --> 00:00:33.910
applications that we
ship on Android.

00:00:33.910 --> 00:00:37.140
And it's something that we
created to make animation much

00:00:37.140 --> 00:00:38.230
easier for you.

00:00:38.230 --> 00:00:40.250
I like to think about animation
all the time.

00:00:40.250 --> 00:00:42.390
But I realize that maybe some
other developers don't.

00:00:42.390 --> 00:00:45.140
So if we can make it easier
and easier for you to get

00:00:45.140 --> 00:00:47.350
animated facilities within
your application without

00:00:47.350 --> 00:00:50.540
spending a great deal of time
and thought on it, then that's

00:00:50.540 --> 00:00:51.600
a good thing.

00:00:51.600 --> 00:00:53.390
So let's talk about
layout transition.

00:00:53.390 --> 00:00:55.400
First of all, we'll start with
the base application that

00:00:55.400 --> 00:00:57.040
doesn't have animations in it.

00:00:57.040 --> 00:00:58.760
And let's look at
the code here.

00:00:58.760 --> 00:01:01.050
So we have a simple class
that I've created.

00:01:01.050 --> 00:01:03.700
It's a custom view that
I call colored view.

00:01:03.700 --> 00:01:05.660
And it has two states.

00:01:05.660 --> 00:01:08.290
It has an expanded and
a compressed state.

00:01:08.290 --> 00:01:10.850
And when it's first added into
its container, it's in a

00:01:10.850 --> 00:01:11.320
compressed.

00:01:11.320 --> 00:01:13.920
And it's going to be
50 pixels high.

00:01:13.920 --> 00:01:17.130
And when it's expanded, it's
going to be 200 pixels high.

00:01:17.130 --> 00:01:19.650
And we can simply change those
layout params so that when we

00:01:19.650 --> 00:01:22.520
click on this thing it can
expand or it can contract.

00:01:22.520 --> 00:01:24.230
And as we can see,
we do something

00:01:24.230 --> 00:01:25.120
really interesting here.

00:01:25.120 --> 00:01:29.710
We basically randomize a color
to make it a colored view so

00:01:29.710 --> 00:01:30.560
that you can actually
tell what the

00:01:30.560 --> 00:01:32.240
bounds of the view are.

00:01:32.240 --> 00:01:34.610
And then we allow you
to click on the view

00:01:34.610 --> 00:01:35.950
and expand or contract.

00:01:35.950 --> 00:01:38.010
And we can take a look at the
demo over on the screen to the

00:01:38.010 --> 00:01:39.070
right and see how this works.

00:01:39.070 --> 00:01:43.400
So we have two buttons up at the
top, which add new views

00:01:43.400 --> 00:01:46.180
of different randomized
colors or remove

00:01:46.180 --> 00:01:48.170
views in the container.

00:01:48.170 --> 00:01:50.770
And if we click on one of these
views, it will expand

00:01:50.770 --> 00:01:54.350
and contract as we toggle the
clicks back and forth.

00:01:54.350 --> 00:01:57.990
And we can see the other
activity logic up

00:01:57.990 --> 00:01:58.750
here that does that.

00:01:58.750 --> 00:02:00.880
We have an add button
and a remove button.

00:02:00.880 --> 00:02:02.250
We have the container.

00:02:02.250 --> 00:02:04.380
And we start out with
two views that

00:02:04.380 --> 00:02:05.320
we add to the container.

00:02:05.320 --> 00:02:07.410
And then when you click on the
add button we add a view.

00:02:07.410 --> 00:02:09.060
And when you click on
the remove button

00:02:09.060 --> 00:02:11.070
well we remove a view.

00:02:11.070 --> 00:02:13.350
OK, not terribly interesting.

00:02:13.350 --> 00:02:15.060
I don't think I'd be
doing this video if

00:02:15.060 --> 00:02:15.970
this was all it was.

00:02:15.970 --> 00:02:17.920
But now let's actually
add some animation.

00:02:17.920 --> 00:02:20.180
You can notice that when we
add an item it just blinks

00:02:20.180 --> 00:02:20.920
into place.

00:02:20.920 --> 00:02:23.200
When we remove it, it
blinks out of place.

00:02:23.200 --> 00:02:25.330
And when we click, it just

00:02:25.330 --> 00:02:28.210
automatically expands or contracts.

00:02:28.210 --> 00:02:31.590
That's not what I would call
a nice transition.

00:02:31.590 --> 00:02:33.380
It's certainly not
a nice animation.

00:02:33.380 --> 00:02:35.190
So what can we do about that?

00:02:35.190 --> 00:02:38.650
Well the first thing we can do
is add a facility that was

00:02:38.650 --> 00:02:42.140
added in Android 3.0, as I said
before, called layout

00:02:42.140 --> 00:02:42.700
transition.

00:02:42.700 --> 00:02:45.940
And there are a couple different
ways to do this,

00:02:45.940 --> 00:02:46.970
both of which are simple.

00:02:46.970 --> 00:02:50.390
But the easiest way is just to
tell the container where you

00:02:50.390 --> 00:02:53.090
want animations to run
automatically to animate the

00:02:53.090 --> 00:02:54.300
layout changes.

00:02:54.300 --> 00:02:57.830
So let's add an attribute
here that is android

00:02:57.830 --> 00:02:59.450
animate layout changes.

00:02:59.450 --> 00:03:01.610
And we'll set it to true.

00:03:01.610 --> 00:03:03.560
We'll go ahead and save this.

00:03:03.560 --> 00:03:04.810
We'll run the application
again.

00:03:09.830 --> 00:03:12.480
And watch over on the demo
screen as it comes up.

00:03:12.480 --> 00:03:14.360
So it starts out the same.

00:03:14.360 --> 00:03:16.750
But now when we add an item,
you'll see we actually get

00:03:16.750 --> 00:03:18.840
animated behavior, just
from that one line of

00:03:18.840 --> 00:03:20.550
code in the XML file.

00:03:20.550 --> 00:03:24.890
Things slide out of place
to make room and then

00:03:24.890 --> 00:03:27.060
fade in or fade out.

00:03:27.060 --> 00:03:30.690
So you can see as we add items
everything around it moves out

00:03:30.690 --> 00:03:32.880
of the way, and then we
fade the new item in.

00:03:32.880 --> 00:03:35.520
As we remove an item, we fade
out the item, and then

00:03:35.520 --> 00:03:39.010
everything moves around it to
compress the space that was

00:03:39.010 --> 00:03:40.970
freed up by the item
going away.

00:03:40.970 --> 00:03:44.180
But when we click on the items
to expand and contract,

00:03:44.180 --> 00:03:46.660
obviously those are
not animating.

00:03:46.660 --> 00:03:49.830
Those are just popping into
their before and after state.

00:03:49.830 --> 00:03:52.120
This was the behavior as
it was in Honeycomb.

00:03:52.120 --> 00:03:54.370
You could easily add this
one line of code in XML.

00:03:54.370 --> 00:03:56.770
You could add something very
similar to set a layout

00:03:56.770 --> 00:03:59.710
transition object on a container
if you wanted to do

00:03:59.710 --> 00:04:02.810
it in code instead
of the XML file.

00:04:02.810 --> 00:04:07.870
So now we go to Android 4.1
Jelly Bean release.

00:04:07.870 --> 00:04:10.600
And we've got a new facility
in there that allows you to

00:04:10.600 --> 00:04:12.950
actually animate more.

00:04:12.950 --> 00:04:14.990
So let's see how that works.

00:04:14.990 --> 00:04:18.829
So if we come down to the end
of our on create method, and

00:04:18.829 --> 00:04:21.440
we actually get a reference to
the layout transition object

00:04:21.440 --> 00:04:22.160
that we created.

00:04:22.160 --> 00:04:30.970
So you can say layout
transition equals

00:04:30.970 --> 00:04:32.220
container.getlayoutTransition.

00:04:37.850 --> 00:04:39.020
OK, we know there's
one on there.

00:04:39.020 --> 00:04:41.460
Because we set it in
the resource file.

00:04:41.460 --> 00:04:45.160
And similarly, we could have
set this in code instead of

00:04:45.160 --> 00:04:46.330
the resource file.

00:04:46.330 --> 00:04:48.220
Anyway, we know that there's
a transition there.

00:04:48.220 --> 00:04:48.878
And we can say transition.enabl

00:04:48.878 --> 00:05:04.460
eTransitionType(
LayoutTransition.CHANGING) So

00:05:04.460 --> 00:05:07.100
there's a new type of transition
that we're going to

00:05:07.100 --> 00:05:08.600
take advantage of
in this release.

00:05:08.600 --> 00:05:12.796
Now if we run this file
again, demo pops up on

00:05:12.796 --> 00:05:14.702
the handy demo screen.

00:05:14.702 --> 00:05:16.130
And now let's see
what it's like.

00:05:16.130 --> 00:05:18.230
So as before, when we
add items, we get a

00:05:18.230 --> 00:05:19.900
nice animated behavior.

00:05:19.900 --> 00:05:22.180
Or when we remove them, we get
a nice animated behavior.

00:05:22.180 --> 00:05:27.240
And when we click them, we also
get an animated behavior.

00:05:27.240 --> 00:05:30.580
So what we've told the layout
transition object is to

00:05:30.580 --> 00:05:33.930
animate not only the default
animations that it knows about

00:05:33.930 --> 00:05:37.370
when items go away or come
into being, but also when

00:05:37.370 --> 00:05:40.190
anything in the container
changes the layout.

00:05:40.190 --> 00:05:42.470
So anything that happens that
causes a layout on the

00:05:42.470 --> 00:05:45.430
container, we'll make it look
at all of its items and say,

00:05:45.430 --> 00:05:46.400
OK, where are you now?

00:05:46.400 --> 00:05:47.930
And how big are you?

00:05:47.930 --> 00:05:51.010
And where are you and how big
are you after the layout runs?

00:05:51.010 --> 00:05:53.950
And then it sets up animations
internally to animate those

00:05:53.950 --> 00:05:57.960
changes, basically animating
the bounds of the objects.

00:05:57.960 --> 00:06:00.770
So kind of nifty, and the best
part is, this was what, three

00:06:00.770 --> 00:06:01.770
lines of code?

00:06:01.770 --> 00:06:04.330
It's one line of code just to
enable the layout transition

00:06:04.330 --> 00:06:05.640
on a container.

00:06:05.640 --> 00:06:07.800
And then it's another couple
of lines of code, or even

00:06:07.800 --> 00:06:10.440
effectively one line of code
to say, I also want this

00:06:10.440 --> 00:06:11.470
change in behavior.

00:06:11.470 --> 00:06:16.920
Now we added this facility in
4.1 to allow this behavior,

00:06:16.920 --> 00:06:18.760
but we did not change the
default behavior.

00:06:18.760 --> 00:06:21.070
Because it could have been
unexpected if people were

00:06:21.070 --> 00:06:23.050
using layout transition
already.

00:06:23.050 --> 00:06:26.520
So instead we added it as a
facility that you could add

00:06:26.520 --> 00:06:29.230
after the fact, saying OK enable
a layout transition and

00:06:29.230 --> 00:06:31.860
also enable the changing
capability on that.

00:06:31.860 --> 00:06:33.950
And one of the things to
realize about layout

00:06:33.950 --> 00:06:37.240
transition is that these could
also be custom animations.

00:06:37.240 --> 00:06:39.440
You can check this out on
API demos if you'd like.

00:06:39.440 --> 00:06:42.350
There's some demo showing custom
animations as well as

00:06:42.350 --> 00:06:43.670
the default animations.

00:06:43.670 --> 00:06:46.500
But the default ones basically
give you kind of what would be

00:06:46.500 --> 00:06:49.870
expected, which is when an item
comes into being we move

00:06:49.870 --> 00:06:51.940
everything out of the way,
and then we fade it in.

00:06:51.940 --> 00:06:54.570
And when it goes away, we fade
the thing out, and then we

00:06:54.570 --> 00:06:55.600
move everything around it.

00:06:55.600 --> 00:06:57.025
If you want something different,
then you can

00:06:57.025 --> 00:06:58.240
certainly create that.

00:06:58.240 --> 00:07:01.190
So go ahead and check out layout
transition and the 4.1

00:07:01.190 --> 00:07:02.300
Jelly Bean release.

00:07:02.300 --> 00:07:04.816
And please play with it and add
cool animated effects to

00:07:04.816 --> 00:07:05.860
your application.

00:07:05.860 --> 00:07:07.110
Thanks.

