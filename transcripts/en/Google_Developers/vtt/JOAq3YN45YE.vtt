WEBVTT
Kind: captions
Language: en

00:00:00.157 --> 00:00:01.990
JEREMY WALKER: Hi, my
name is Jeremy Walker.

00:00:01.990 --> 00:00:03.814
I'm a developer
advocate here at Google.

00:00:03.814 --> 00:00:05.730
And today, we're going
to talk about the three

00:00:05.730 --> 00:00:09.140
flaws in software design
with Max Kanat-Alexander.

00:00:09.140 --> 00:00:10.740
Max, why don't you
introduce yourself?

00:00:10.740 --> 00:00:12.080
MAX KANAT-ALEXANDER:
Well, hi, Jeremy.

00:00:12.080 --> 00:00:14.720
My name is Max, and I wrote a
book called "Code Simplicity,"

00:00:14.720 --> 00:00:16.540
which is published
by O'Reilly Media.

00:00:16.540 --> 00:00:18.570
And I now work on
developer productivity

00:00:18.570 --> 00:00:19.856
internally at YouTube.

00:00:19.856 --> 00:00:20.730
JEREMY WALKER: Great.

00:00:20.730 --> 00:00:25.300
So these three flaws actually
relate to the Law of Change,

00:00:25.300 --> 00:00:26.890
and I thought it'd
be good if you

00:00:26.890 --> 00:00:29.037
talked a little bit
about that first.

00:00:29.037 --> 00:00:31.620
Would you mind just giving us a
little bit of details on that?

00:00:31.620 --> 00:00:32.860
MAX KANAT-ALEXANDER: Sure.

00:00:32.860 --> 00:00:34.550
So in my book,
"Code Simplicity,"

00:00:34.550 --> 00:00:37.580
I go over the fundamental
laws of software design.

00:00:37.580 --> 00:00:39.200
And one of them is
the Law of Change,

00:00:39.200 --> 00:00:41.527
which states, "The longer
your program exists,

00:00:41.527 --> 00:00:43.360
the more probable it
is that any piece of it

00:00:43.360 --> 00:00:44.600
will have to change."

00:00:44.600 --> 00:00:46.219
And basically, what
this really means

00:00:46.219 --> 00:00:48.010
is that if you want
your system to continue

00:00:48.010 --> 00:00:49.551
to be helpful to
people, you're going

00:00:49.551 --> 00:00:51.161
to have to keep changing it.

00:00:51.161 --> 00:00:52.910
Obviously, software
doesn't change itself.

00:00:52.910 --> 00:00:55.290
People change it in
response to demands.

00:00:55.290 --> 00:00:57.777
But if you just look at it
objectively as though there

00:00:57.777 --> 00:00:59.360
were no people
involved, it just looks

00:00:59.360 --> 00:01:00.910
like the software
has to keep changing.

00:01:00.910 --> 00:01:02.701
And so that's the law
that you could apply.

00:01:02.701 --> 00:01:04.890
You can expect,
basically, that you're

00:01:04.890 --> 00:01:06.520
going to have to
keep up with change,

00:01:06.520 --> 00:01:11.322
and that the probability
that it will change--

00:01:11.322 --> 00:01:13.780
of any piece of it will change
increases as time approaches

00:01:13.780 --> 00:01:15.675
infinity, basically.

00:01:15.675 --> 00:01:16.550
JEREMY WALKER: Great.

00:01:16.550 --> 00:01:18.341
Well, why don't we get
into the first flaw,

00:01:18.341 --> 00:01:21.240
which is writing code
that isn't needed.

00:01:21.240 --> 00:01:23.220
MAX KANAT-ALEXANDER: Sure.

00:01:23.220 --> 00:01:24.804
So the first flaw
in software design--

00:01:24.804 --> 00:01:26.261
so I have these
things, and they're

00:01:26.261 --> 00:01:28.180
called the "Three Flaws
of Software Design."

00:01:28.180 --> 00:01:29.970
And these are the
major categories

00:01:29.970 --> 00:01:31.850
of errors that
developers make when

00:01:31.850 --> 00:01:33.290
they're trying to
design software.

00:01:33.290 --> 00:01:36.830
And the first one is writing
code that isn't needed.

00:01:36.830 --> 00:01:38.420
Now, this sounds
like another rule

00:01:38.420 --> 00:01:40.878
called "You ain't going to need
it," which is very popular.

00:01:40.878 --> 00:01:42.260
It comes from
extreme programming

00:01:42.260 --> 00:01:44.642
and from other philosophies.

00:01:44.642 --> 00:01:46.475
But the problem that I
have with that phrase

00:01:46.475 --> 00:01:49.330
is that's a little bit misnamed,
because it's not really about

00:01:49.330 --> 00:01:52.230
whether you're going to need
the code as much as about

00:01:52.230 --> 00:01:54.940
whether you know how it
needs to be designed now.

00:01:54.940 --> 00:01:58.339
What really matters is
that-- you want really

00:01:58.339 --> 00:02:00.630
well-designed code that's
maintainable into the future,

00:02:00.630 --> 00:02:02.088
because you want
to be able to cope

00:02:02.088 --> 00:02:05.384
with change-- without getting
yourself into a situation

00:02:05.384 --> 00:02:07.300
where it's impossible
to deal with that change

00:02:07.300 --> 00:02:10.580
or where it's hard
to change the system.

00:02:10.580 --> 00:02:12.909
And what you're
writing for is you're

00:02:12.909 --> 00:02:13.950
writing for requirements.

00:02:13.950 --> 00:02:16.305
And in a way, it's
impossible to really know

00:02:16.305 --> 00:02:17.930
what those real
requirements are really

00:02:17.930 --> 00:02:21.230
going to be until the
actual situation arrives

00:02:21.230 --> 00:02:22.730
that you need to
write the code for.

00:02:26.200 --> 00:02:28.970
So I don't say that you
ain't going to need it,

00:02:28.970 --> 00:02:31.840
but I just say you
shouldn't write code

00:02:31.840 --> 00:02:34.600
that you don't need yet, or you
should wait until you need it.

00:02:34.600 --> 00:02:36.640
And the reason is that you run
into all kinds of problems,

00:02:36.640 --> 00:02:37.140
right?

00:02:37.140 --> 00:02:41.160
So let's say you've
written something that's

00:02:41.160 --> 00:02:43.929
going to reverse strings, right?

00:02:43.929 --> 00:02:44.970
That's its whole purpose.

00:02:44.970 --> 00:02:47.570
That's the only
requirement that you have.

00:02:47.570 --> 00:02:50.380
And you decide,
well, you know what?

00:02:50.380 --> 00:02:51.440
I like reversing things.

00:02:51.440 --> 00:02:52.880
Reversing things is easy.

00:02:52.880 --> 00:02:54.470
Let's make it also
able to reverse

00:02:54.470 --> 00:02:56.820
all the pixels in an image.

00:02:56.820 --> 00:02:58.154
Why you did this-- I don't know.

00:02:58.154 --> 00:03:00.319
You just thought maybe I'm
going to need it someday.

00:03:00.319 --> 00:03:02.580
I don't need it now, but
maybe I'll need it someday.

00:03:02.580 --> 00:03:05.070
The problem is that
that significantly

00:03:05.070 --> 00:03:06.450
complicates your code.

00:03:06.450 --> 00:03:08.350
It makes your tests
harder to write.

00:03:08.350 --> 00:03:11.070
And probably by the
time that you actually

00:03:11.070 --> 00:03:12.780
need to reverse
pixels, you'll discover

00:03:12.780 --> 00:03:14.090
that you did something
completely different,

00:03:14.090 --> 00:03:16.506
like the code that you wrote
didn't perform the right way.

00:03:19.770 --> 00:03:21.927
Or it's just not
appropriate-- like you thought

00:03:21.927 --> 00:03:23.760
you were going to read
JPEGs, and really you

00:03:23.760 --> 00:03:25.950
need to read PNGs.

00:03:25.950 --> 00:03:28.457
It's just going to
be the wrong code.

00:03:28.457 --> 00:03:30.290
Or it's possible that
it was the right code,

00:03:30.290 --> 00:03:32.139
but because it wasn't
used, that by the time

00:03:32.139 --> 00:03:33.930
you actually get to
that point, it's rotted

00:03:33.930 --> 00:03:34.790
and it no longer
works, and you're

00:03:34.790 --> 00:03:36.400
going to have to
change it anyway.

00:03:36.400 --> 00:03:39.880
So you're going to
need to redesign it.

00:03:39.880 --> 00:03:44.890
And people think, well,
I'm saving myself time

00:03:44.890 --> 00:03:46.370
by writing this
before I need it.

00:03:46.370 --> 00:03:47.850
But ultimately, you're
not saving yourself time,

00:03:47.850 --> 00:03:49.650
because first, you wrote
something that you didn't need,

00:03:49.650 --> 00:03:51.160
and then you wrote
something that you did need.

00:03:51.160 --> 00:03:53.451
So you actually did basically
the work twice-- or maybe

00:03:53.451 --> 00:03:56.670
one and a half times of the
work that you needed to do.

00:03:56.670 --> 00:03:58.300
And you're adding complexity.

00:03:58.300 --> 00:04:00.916
And in a way, a
lot of what people

00:04:00.916 --> 00:04:02.790
are trying to do when
they do this is they're

00:04:02.790 --> 00:04:05.280
trying to handle
all the things that

00:04:05.280 --> 00:04:06.560
could happen in the future.

00:04:06.560 --> 00:04:07.830
But you don't know all the
things that could happen.

00:04:07.830 --> 00:04:09.413
And I'm going to get
a little bit more

00:04:09.413 --> 00:04:11.190
into that in another
flaw, but this is--

00:04:11.190 --> 00:04:12.814
and these flaws are
little bit related.

00:04:12.814 --> 00:04:16.339
Sometimes, they
overlap a little bit.

00:04:16.339 --> 00:04:18.899
But one of the errors that
people are making when they try

00:04:18.899 --> 00:04:21.398
to do this is they're trying
to handle every possible thing,

00:04:21.398 --> 00:04:23.670
and they can't.

00:04:23.670 --> 00:04:26.970
So there's all kinds of
different ways to do this.

00:04:26.970 --> 00:04:29.502
It's very common to see
people write whole classes

00:04:29.502 --> 00:04:31.210
or functions that they
don't need, right?

00:04:31.210 --> 00:04:36.030
So like maybe they
wrote a whole class

00:04:36.030 --> 00:04:38.340
to handle reading pictures
because they wanted

00:04:38.340 --> 00:04:41.590
to reverse pixels
in the image, right?

00:04:41.590 --> 00:04:43.075
But a lot of the
time, what I see

00:04:43.075 --> 00:04:44.950
is just little lines of
code they don't need.

00:04:44.950 --> 00:04:47.475
People are doing checks that
they don't need to be doing.

00:04:47.475 --> 00:04:50.070
I see this a lot when
I'm doing code reviews.

00:04:50.070 --> 00:04:51.850
In fact, one of the
most common comments

00:04:51.850 --> 00:04:55.780
that I make in code reviews
is, you don't need that yet,

00:04:55.780 --> 00:04:56.832
or, do you need that yet?

00:04:56.832 --> 00:04:58.540
Or what's the requirement
that's actually

00:04:58.540 --> 00:05:00.580
driving this particular
piece of code?

00:05:00.580 --> 00:05:02.990
And it's amazing
how much simpler

00:05:02.990 --> 00:05:05.600
you can make code by just
continuously asking this over

00:05:05.600 --> 00:05:07.512
and over and over--
is, do you need this?

00:05:07.512 --> 00:05:08.970
Or when is this
going to be needed?

00:05:08.970 --> 00:05:10.560
Or do you need it now?

00:05:10.560 --> 00:05:13.340
And the rule that you can
apply to avoid this situation

00:05:13.340 --> 00:05:15.850
or to handle this flaw is
that you don't write code

00:05:15.850 --> 00:05:17.770
until you actually
need it, and you

00:05:17.770 --> 00:05:19.660
remove any code that
isn't being used.

00:05:19.660 --> 00:05:22.680
So the second part is the part
that gets occasionally missed

00:05:22.680 --> 00:05:24.770
with the YAGNI, or "You
Ain't Going to Need It"

00:05:24.770 --> 00:05:28.770
rule-- is that
once code is dead,

00:05:28.770 --> 00:05:30.129
it should just be deleted.

00:05:30.129 --> 00:05:31.670
And people think,
well, I don't know.

00:05:31.670 --> 00:05:34.128
Maybe I'm going to need that
dead code again in the future,

00:05:34.128 --> 00:05:36.250
but that's why we have
version control systems.

00:05:36.250 --> 00:05:37.690
If you really need it,
you can pull it back out

00:05:37.690 --> 00:05:38.990
of the version control.

00:05:38.990 --> 00:05:41.180
Just delete it now.

00:05:41.180 --> 00:05:45.080
Many codebases have gotten
into extreme complexity

00:05:45.080 --> 00:05:47.374
just by leaving around
tons and tons of dead code.

00:05:47.374 --> 00:05:49.790
And now nobody wants to refactor
them, because they think,

00:05:49.790 --> 00:05:51.840
oh, look, I'm going to have to
refactor all of these things--

00:05:51.840 --> 00:05:53.862
when really, 90% of those
things are dead code

00:05:53.862 --> 00:05:55.570
and should have just
been deleted, right?

00:05:55.570 --> 00:05:58.040
It's much, much more
approachable to solve

00:05:58.040 --> 00:06:01.080
the problems of a
smaller code base.

00:06:01.080 --> 00:06:04.612
In addition, the
fact that you don't

00:06:04.612 --> 00:06:07.345
have to fix the tests of
code that doesn't exist.

00:06:07.345 --> 00:06:09.720
There's all kind of advantages
to code that doesn't exist

00:06:09.720 --> 00:06:10.653
or code that isn't written.

00:06:10.653 --> 00:06:11.600
JEREMY WALKER: Yeah.

00:06:11.600 --> 00:06:13.850
MAX KANAT-ALEXANDER: So to
demonstrate this principle,

00:06:13.850 --> 00:06:15.310
what we're going to do is we're
going to do an example code

00:06:15.310 --> 00:06:17.685
review, and this code review
is a little bit exaggerated.

00:06:19.760 --> 00:06:22.162
The code is worse than code
that you might actually see,

00:06:22.162 --> 00:06:24.120
and we're going to do a
few more steps than you

00:06:24.120 --> 00:06:25.190
might do in a real code review.

00:06:25.190 --> 00:06:27.200
But we're going to do it to
demonstrate the principle.

00:06:27.200 --> 00:06:29.380
So we have this requirement
for our piece of code.

00:06:29.380 --> 00:06:32.150
And it says "Parse a date
string that looks like

00:06:32.150 --> 00:06:34.759
'YYYY-MM-DD' and return an
array with three integers.

00:06:34.759 --> 00:06:37.050
The first integer is the
year, the second is the month,

00:06:37.050 --> 00:06:37.952
and third is the day.

00:06:37.952 --> 00:06:39.660
This is internal code
in an application."

00:06:39.660 --> 00:06:40.451
It's not a library.

00:06:40.451 --> 00:06:43.500
We're not providing this
to the outside world.

00:06:43.500 --> 00:06:45.960
And like I said, it's a
little bit of an exaggeration.

00:06:45.960 --> 00:06:51.350
So let's look at this over here.

00:06:51.350 --> 00:06:53.560
So the code that the
developer writes and submits

00:06:53.560 --> 00:06:56.430
to you, the code
reviewer, is this mess.

00:06:56.430 --> 00:07:00.710
So up here, it's got
three constants that

00:07:00.710 --> 00:07:05.290
say this is the year, this is
the month, this is the day.

00:07:05.290 --> 00:07:08.180
It's preparing to parse
a year string, a month

00:07:08.180 --> 00:07:09.740
string, and a day string.

00:07:09.740 --> 00:07:13.307
It has comments for
every line of code,

00:07:13.307 --> 00:07:15.390
and you can see it's going
through-- if you're not

00:07:15.390 --> 00:07:18.420
familiar with Python, enumerate
means give me both the index

00:07:18.420 --> 00:07:19.991
and the item from an array.

00:07:19.991 --> 00:07:21.990
In this case, we're going
through the characters

00:07:21.990 --> 00:07:23.350
in a string.

00:07:23.350 --> 00:07:26.440
And it checks, OK, if we're
in the first four characters,

00:07:26.440 --> 00:07:27.870
this must be the year.

00:07:27.870 --> 00:07:30.460
And then, oh, is
it a valid integer?

00:07:30.460 --> 00:07:32.291
We're going to
check that we have

00:07:32.291 --> 00:07:34.290
a hyphen in the right
place, next two characters

00:07:34.290 --> 00:07:36.550
have to be the month.

00:07:36.550 --> 00:07:41.180
If they're not digits, then
we should raise an exception.

00:07:41.180 --> 00:07:43.754
OK, then we're going to figure
out that this is the month.

00:07:43.754 --> 00:07:45.920
OK, we've validated that
all these things are right,

00:07:45.920 --> 00:07:47.630
that the format is right.

00:07:47.630 --> 00:07:51.570
Oh, and if the string is too
long, we raise an exception.

00:07:51.570 --> 00:07:57.950
Now we check if the whole year
is an integer, and then, well,

00:07:57.950 --> 00:07:59.720
if that's-- we throw
another exception.

00:07:59.720 --> 00:08:02.670
And then finally, we create
an integer for the year.

00:08:02.670 --> 00:08:06.160
And then finally, we create
this return value array,

00:08:06.160 --> 00:08:08.730
and then we set each thing
in the return value array

00:08:08.730 --> 00:08:10.580
and then we return
the return value.

00:08:10.580 --> 00:08:13.500
OK, so this is obviously
a disaster, right?

00:08:13.500 --> 00:08:15.040
And a lot of the
time in code review

00:08:15.040 --> 00:08:16.130
when you're presented
with a disaster,

00:08:16.130 --> 00:08:17.504
it's hard to know
where to begin.

00:08:17.504 --> 00:08:18.490
You just-- frustrating.

00:08:18.490 --> 00:08:21.656
You say, well, just go away and
don't ever write code again.

00:08:21.656 --> 00:08:23.030
But that doesn't
help you, and it

00:08:23.030 --> 00:08:25.410
doesn't educate the person
whose code you're reviewing.

00:08:25.410 --> 00:08:29.980
So I want to try to take some
tack, some direction that we

00:08:29.980 --> 00:08:31.280
can do with this.

00:08:31.280 --> 00:08:33.415
So the first thing I'm
going to tell the developer

00:08:33.415 --> 00:08:36.130
is, the first thing you
don't need in this file

00:08:36.130 --> 00:08:37.789
is all of the comments.

00:08:37.789 --> 00:08:39.340
I didn't need any
of those comments.

00:08:39.340 --> 00:08:40.064
I can read code.

00:08:40.064 --> 00:08:41.980
You told me what every
line of code was doing.

00:08:41.980 --> 00:08:44.990
Surprisingly, the code became
considerably more readable.

00:08:44.990 --> 00:08:46.030
It's not good.

00:08:46.030 --> 00:08:50.330
But if you look through
it, it's much shorter.

00:08:50.330 --> 00:08:52.170
We lost about 20 lines.

00:08:52.170 --> 00:08:53.380
It's about 55 lines now.

00:08:53.380 --> 00:08:54.792
The first one was 71 lines.

00:08:54.792 --> 00:08:57.250
And you can actually kind of
start to tell what's going on.

00:08:57.250 --> 00:09:01.150
So now, you can start
to see the next problem.

00:09:01.150 --> 00:09:04.461
And the next problem
is we know actually--

00:09:04.461 --> 00:09:05.460
so we did some research.

00:09:05.460 --> 00:09:06.880
We investigated this.

00:09:06.880 --> 00:09:10.250
And we said your input doesn't
include any years, months,

00:09:10.250 --> 00:09:12.340
or days that are
out of range-- which

00:09:12.340 --> 00:09:16.420
means there's no 13 for
the month, there's no 32

00:09:16.420 --> 00:09:19.060
for the day, and
there's no negative 1

00:09:19.060 --> 00:09:22.405
for the year or
anything like that.

00:09:22.405 --> 00:09:24.780
And what this represents is
a really important principle,

00:09:24.780 --> 00:09:27.084
which is that it's really
important to find out

00:09:27.084 --> 00:09:28.500
what your actual
requirements are.

00:09:28.500 --> 00:09:30.930
A lot of the time, developers
assume requirements,

00:09:30.930 --> 00:09:34.225
and then they write code for
those assumed requirements.

00:09:34.225 --> 00:09:35.100
And I see this a lot.

00:09:35.100 --> 00:09:36.880
In fact, one of the
most important things

00:09:36.880 --> 00:09:39.760
that I feel like I do
when I'm writing code

00:09:39.760 --> 00:09:41.950
is ask a lot of
questions to people.

00:09:41.950 --> 00:09:45.330
Go and say, well, what does
this actually need to do,

00:09:45.330 --> 00:09:46.429
before I go and write it.

00:09:46.429 --> 00:09:48.720
And I find that that allows
for a lot of simplification

00:09:48.720 --> 00:09:50.060
that I didn't otherwise expect.

00:09:50.060 --> 00:09:51.874
Because sometimes
if you don't know,

00:09:51.874 --> 00:09:53.290
you just assume
that, for example,

00:09:53.290 --> 00:09:54.810
there's a lot of inputs
that you could get.

00:09:54.810 --> 00:09:56.270
But when you actually
go and find out,

00:09:56.270 --> 00:09:57.880
you discover there's
actually very few inputs

00:09:57.880 --> 00:10:00.338
that you could get, and your
code can be much, much simpler

00:10:00.338 --> 00:10:01.400
than you thought.

00:10:01.400 --> 00:10:03.025
JEREMY WALKER: Yeah,
I thought that was

00:10:03.025 --> 00:10:05.070
really good in the book
when I was reading it.

00:10:05.070 --> 00:10:07.680
I think I always
tend to over-think

00:10:07.680 --> 00:10:09.786
like, I've got to
check all the stuff.

00:10:09.786 --> 00:10:11.660
But then I was like,
oh, that's a good point.

00:10:11.660 --> 00:10:14.110
You should really go back and
ask, is the input coming in?

00:10:14.110 --> 00:10:16.520
What is the range-- do I
have to check everything?

00:10:16.520 --> 00:10:18.947
And most times, I
think, you don't, so--

00:10:18.947 --> 00:10:20.530
MAX KANAT-ALEXANDER:
Yeah, and there's

00:10:20.530 --> 00:10:22.140
actually a blog
post that I wrote

00:10:22.140 --> 00:10:23.860
called "The Secret
of Fast Programming:

00:10:23.860 --> 00:10:26.820
Stop Thinking," which
goes over all of the ways

00:10:26.820 --> 00:10:28.810
that you can get
information without having

00:10:28.810 --> 00:10:30.970
to sit there and think
about it, and also about

00:10:30.970 --> 00:10:32.385
how that improves productivity.

00:10:35.330 --> 00:10:37.970
And this is really just a
facet of that, a piece of that,

00:10:37.970 --> 00:10:44.430
or an aspect of that-- which is
that the information that you

00:10:44.430 --> 00:10:48.400
need for development is very
frequently not in your mind.

00:10:48.400 --> 00:10:50.145
JEREMY WALKER: Oh, OK.

00:10:50.145 --> 00:10:51.270
MAX KANAT-ALEXANDER: Right?

00:10:51.270 --> 00:10:54.470
And so inventing it, or
using your mind to get it

00:10:54.470 --> 00:10:55.237
is the wrong tool.

00:10:55.237 --> 00:10:56.236
JEREMY WALKER: Oh, yeah.

00:10:56.236 --> 00:10:57.119
OK, that makes sense.

00:10:57.119 --> 00:10:58.202
MAX KANAT-ALEXANDER: Yeah.

00:11:01.460 --> 00:11:03.640
Go back to the code here.

00:11:03.640 --> 00:11:07.320
We also note that, if you
remember from the original,

00:11:07.320 --> 00:11:10.002
he checks that every
individual digit is a digit,

00:11:10.002 --> 00:11:11.960
and then he checks that
the result of all those

00:11:11.960 --> 00:11:13.330
was a digit.

00:11:13.330 --> 00:11:15.080
It's not like-- you
don't need to do that.

00:11:15.080 --> 00:11:16.450
That's not necessary.

00:11:16.450 --> 00:11:19.480
And so we're getting down to
almost one page of code now.

00:11:19.480 --> 00:11:22.150
It's starting to
become readable.

00:11:22.150 --> 00:11:23.850
I can almost tell
what's happening here.

00:11:23.850 --> 00:11:26.122
We're now at 41 lines.

00:11:26.122 --> 00:11:28.330
And so our next comment of
things-- and all are doing

00:11:28.330 --> 00:11:30.760
is applying this exact
principle over and over.

00:11:30.760 --> 00:11:32.940
All we're doing is just
continuously saying,

00:11:32.940 --> 00:11:33.670
do you need this?

00:11:33.670 --> 00:11:34.320
Do you need this?

00:11:34.320 --> 00:11:34.970
Do you need this?

00:11:34.970 --> 00:11:35.890
Or telling him, you
don't need this.

00:11:35.890 --> 00:11:36.723
You don't need this.

00:11:36.723 --> 00:11:38.700
You don't need this.

00:11:38.700 --> 00:11:41.524
So now we can say
that it's always

00:11:41.524 --> 00:11:43.440
integers in the year,
month, or day positions.

00:11:43.440 --> 00:11:45.481
So you don't have to check
that they're integers.

00:11:45.481 --> 00:11:47.606
You don't have to validate
their integer-ness.

00:11:47.606 --> 00:11:53.500
And now it's becoming
more reasonable.

00:11:53.500 --> 00:11:56.420
And your input always has
hyphens in the hyphen position.

00:11:56.420 --> 00:11:58.181
There's never any
other character.

00:11:58.181 --> 00:12:00.680
We're kind of getting closer
to something that the developer

00:12:00.680 --> 00:12:03.470
should realize at this point,
but maybe they haven't.

00:12:03.470 --> 00:12:06.070
And I'll tell you what that is
when we get to the last point.

00:12:06.070 --> 00:12:09.480
And now it's 29
lines and relatively

00:12:09.480 --> 00:12:12.376
straightforward-- getting
even more straightforward.

00:12:12.376 --> 00:12:14.250
And also, so now we're
going to say you never

00:12:14.250 --> 00:12:16.150
have strings that are too long.

00:12:16.150 --> 00:12:19.900
So there's never a string that's
longer than a date should be.

00:12:19.900 --> 00:12:22.710
And also, this is
Python, so if you

00:12:22.710 --> 00:12:24.460
want to return three
values in an array,

00:12:24.460 --> 00:12:27.430
you can actually just do this
where you just write a triple.

00:12:30.052 --> 00:12:31.426
You don't need to
create an array

00:12:31.426 --> 00:12:33.480
and then set all of its values.

00:12:33.480 --> 00:12:36.620
So now, hopefully the
developers thought about this,

00:12:36.620 --> 00:12:39.750
but maybe they haven't-- that
what we're telling them is

00:12:39.750 --> 00:12:42.780
your input is
always well-formed.

00:12:42.780 --> 00:12:45.570
So you don't actually need to
do any validation whatsoever.

00:12:45.570 --> 00:12:47.700
All of your validation
is unnecessary.

00:12:47.700 --> 00:12:49.710
It's very possible that
in a real code review,

00:12:49.710 --> 00:12:52.420
this would have been
our first comment.

00:12:52.420 --> 00:12:55.000
But we might not have
been able to see that,

00:12:55.000 --> 00:12:58.952
because there was so much
complexity that you might have

00:12:58.952 --> 00:13:00.410
been able to see
like, oh, what are

00:13:00.410 --> 00:13:01.370
all the things we can eliminate.

00:13:01.370 --> 00:13:03.610
You might have needed to go
through this iterative process

00:13:03.610 --> 00:13:05.110
with the review in
order to actually

00:13:05.110 --> 00:13:06.380
be able to figure that out.

00:13:06.380 --> 00:13:09.490
But the ultimate thing that
we're saying-- your input

00:13:09.490 --> 00:13:10.500
is always well-formed.

00:13:10.500 --> 00:13:11.846
You don't need to have a loop.

00:13:11.846 --> 00:13:13.470
You don't need to
have a state machine.

00:13:13.470 --> 00:13:15.020
None of this is necessary.

00:13:15.020 --> 00:13:17.360
You can write this whole
function in two lines of code,

00:13:17.360 --> 00:13:19.170
and here they are.

00:13:19.170 --> 00:13:20.860
JEREMY WALKER: Perfect.

00:13:20.860 --> 00:13:23.197
MAX KANAT-ALEXANDER: So
that is our code review.

00:13:23.197 --> 00:13:24.780
And that's an example
of how you would

00:13:24.780 --> 00:13:29.050
apply this law in your
actual development.

00:13:29.050 --> 00:13:31.360
So that completes our
discussion of the first flaw

00:13:31.360 --> 00:13:33.030
in software design.

00:13:33.030 --> 00:13:34.410
Let's go to any questions.

00:13:34.410 --> 00:13:36.570
JEREMY WALKER: Yes, so I
actually had one question.

00:13:36.570 --> 00:13:38.240
I always like
real-world examples,

00:13:38.240 --> 00:13:41.190
and you gave a pretty good one
in the book, which I thought

00:13:41.190 --> 00:13:43.106
would be good to cover here.

00:13:43.106 --> 00:13:44.230
So can you talk about that?

00:13:44.230 --> 00:13:45.644
It was with the
lists, I believe.

00:13:45.644 --> 00:13:47.060
MAX KANAT-ALEXANDER:
Yeah, so this

00:13:47.060 --> 00:13:49.990
is actually
something that I did.

00:13:49.990 --> 00:13:52.370
So I worked on a
project called Bugzilla,

00:13:52.370 --> 00:13:53.980
which is a bug tracking system.

00:13:53.980 --> 00:14:01.077
And so there's drop
down fields in Bugzilla.

00:14:01.077 --> 00:14:02.910
You can choose what the
severity of a bug is

00:14:02.910 --> 00:14:06.220
or what the priority
of a bug is.

00:14:06.220 --> 00:14:08.874
And I was like, well,
you know, there's

00:14:08.874 --> 00:14:10.290
all kinds of things
we want to do.

00:14:10.290 --> 00:14:12.430
We want to allow
people to rename them.

00:14:12.430 --> 00:14:15.269
And right now, we're
referring to all of them

00:14:15.269 --> 00:14:16.560
by its strings in the database.

00:14:16.560 --> 00:14:17.480
We're referring
to other strings.

00:14:17.480 --> 00:14:19.211
So I was like,
let's-- oh, no, no.

00:14:19.211 --> 00:14:19.710
Oh, right.

00:14:19.710 --> 00:14:20.668
I remember what it was.

00:14:20.668 --> 00:14:22.360
It wasn't that we
wanted to rename them.

00:14:22.360 --> 00:14:25.300
It was they wanted to be able
turn them off or turn them on,

00:14:25.300 --> 00:14:25.810
right?

00:14:25.810 --> 00:14:28.364
So I added all this
code, particularly

00:14:28.364 --> 00:14:29.280
at the database layer.

00:14:29.280 --> 00:14:36.685
I added database fields to say,
is this field active-- right?

00:14:36.685 --> 00:14:39.020
But I didn't actually
implement it.

00:14:39.020 --> 00:14:41.630
I just threw in a
bunch of database stuff

00:14:41.630 --> 00:14:44.510
because I thought,
well, tomorrow, I'm

00:14:44.510 --> 00:14:48.750
going to write the change that
enables it in the front-end.

00:14:48.750 --> 00:14:51.001
And then of course, tomorrow,
something crazy came up,

00:14:51.001 --> 00:14:53.250
and I had to work on this,
and I totally forgot about,

00:14:53.250 --> 00:14:55.100
and I had a million
more important things.

00:14:55.100 --> 00:14:58.480
And then three years later,
somebody comes along, and is

00:14:58.480 --> 00:14:59.784
like, what is this?

00:14:59.784 --> 00:15:00.950
This doesn't make any sense.

00:15:00.950 --> 00:15:03.600
And also, in those
intervening three years,

00:15:03.600 --> 00:15:05.790
we must have had at
least 10 bugs filed

00:15:05.790 --> 00:15:08.820
by people who had manually gone
in and changed their database.

00:15:08.820 --> 00:15:12.022
And some of the code had checked
if the field value was active,

00:15:12.022 --> 00:15:13.480
and some of the
code hadn't checked

00:15:13.480 --> 00:15:14.920
if the field value was active.

00:15:14.920 --> 00:15:16.801
And so it caused
incredibly confusing bugs.

00:15:16.801 --> 00:15:18.300
People would report
these weird bugs

00:15:18.300 --> 00:15:20.920
like-- it shows up in the search
interface but not on the bugs

00:15:20.920 --> 00:15:23.400
or it shows up on
the bug editing page

00:15:23.400 --> 00:15:26.510
but not on the
bug creation page.

00:15:26.510 --> 00:15:28.980
And finally, when somebody
did implement the ability

00:15:28.980 --> 00:15:31.935
to disable values,
they actually had

00:15:31.935 --> 00:15:34.070
to do it a completely
different way, because I

00:15:34.070 --> 00:15:36.760
had named the database
fields in a way that

00:15:36.760 --> 00:15:39.110
was inconsistent with
our later convention.

00:15:39.110 --> 00:15:42.444
So they had to rename all
the fields in the database,

00:15:42.444 --> 00:15:44.610
and then write a completely
different implementation

00:15:44.610 --> 00:15:46.280
because our framework
had completely

00:15:46.280 --> 00:15:48.187
changed in those
intervening three years.

00:15:48.187 --> 00:15:50.270
And it ended up being a
total waste of time, which

00:15:50.270 --> 00:15:52.100
did nothing but cause
bugs and confusion

00:15:52.100 --> 00:15:54.558
for anybody who ever went in
and tried to do this manually.

00:15:54.558 --> 00:15:56.290
Because Bugzilla
in particular was

00:15:56.290 --> 00:15:58.810
a product where everybody
wanted to customize it.

00:15:58.810 --> 00:16:01.160
People understood
database design,

00:16:01.160 --> 00:16:03.160
and the they would make
their own changes to it.

00:16:03.160 --> 00:16:04.700
And so they would
look at the tables,

00:16:04.700 --> 00:16:06.270
and they would actually see
this and they would actually

00:16:06.270 --> 00:16:07.480
try to do that.

00:16:07.480 --> 00:16:10.320
And it just caused
nothing but trouble,

00:16:10.320 --> 00:16:12.827
and it did nobody
any good, basically.

00:16:12.827 --> 00:16:15.160
JEREMY WALKER: Yeah, I thought
that was a great example.

00:16:15.160 --> 00:16:15.660
Well, great.

00:16:15.660 --> 00:16:18.210
Well hopefully, that gives
you a little bit of a taste.

00:16:18.210 --> 00:16:21.220
That covers the first of the
three flaws in our series.

00:16:21.220 --> 00:16:23.880
Please join us for
the next video.

