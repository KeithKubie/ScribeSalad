WEBVTT
Kind: captions
Language: en

00:00:07.700 --> 00:00:08.970
MICHAEL MANOOCHEHRI: Hello,
big data and Big Query

00:00:08.970 --> 00:00:09.790
developers.

00:00:09.790 --> 00:00:12.290
My name is Michael Manoochehri
from the Google Developer

00:00:12.290 --> 00:00:14.250
Relations team for the Google
Cloud Platform.

00:00:14.250 --> 00:00:16.370
And I'm here with my good
friend, Felipe Hoffa.

00:00:16.370 --> 00:00:19.760
And today, we're going to talk
to you about a feature that

00:00:19.760 --> 00:00:21.440
people have been asking
us for a lot.

00:00:21.440 --> 00:00:23.810
And every time I'm on this show,
I take pride in the fact

00:00:23.810 --> 00:00:26.420
that the Big Query engineering
team listens to developer

00:00:26.420 --> 00:00:29.720
feedback and presents to you the
features that you've been

00:00:29.720 --> 00:00:30.690
asking for.

00:00:30.690 --> 00:00:32.400
So today, we're going to talk
about one that people have

00:00:32.400 --> 00:00:34.090
been asking for for
a long time.

00:00:34.090 --> 00:00:35.500
And I think a lot of developers
are going to be

00:00:35.500 --> 00:00:36.160
interested.

00:00:36.160 --> 00:00:38.910
So Felipe, can you tell us a
little bit about this feature

00:00:38.910 --> 00:00:40.560
that people have been
asking us for?

00:00:40.560 --> 00:00:40.790
FELIPE HOFFA: Hi, Michael.

00:00:40.790 --> 00:00:41.540
Hi, everyone.

00:00:41.540 --> 00:00:42.890
How are you doing?

00:00:42.890 --> 00:00:46.170
Yes, as Michael says,
we are always adding

00:00:46.170 --> 00:00:46.700
functions to Big Query.

00:00:46.700 --> 00:00:48.840
We're always adding
new features.

00:00:48.840 --> 00:00:51.645
The generating team
is amazing.

00:00:51.645 --> 00:00:54.580
And today we are doing this show
because there is a new

00:00:54.580 --> 00:00:57.530
function that we really wanted
to take the time to introduce

00:00:57.530 --> 00:01:02.950
to show how it works and to show
the big potential it has.

00:01:02.950 --> 00:01:04.150
Do you know what this
function is?

00:01:04.150 --> 00:01:04.989
MICHAEL MANOOCHEHRI: Yeah,
so can you tell me a

00:01:04.989 --> 00:01:05.740
little bit about it?

00:01:05.740 --> 00:01:07.140
I heard the name
is Correlation.

00:01:07.140 --> 00:01:09.230
FELIPE HOFFA: Exactly, it's
Pearson correlation.

00:01:09.230 --> 00:01:10.840
MICHAEL MANOOCHEHRI: So what is
correlation, first of all,

00:01:10.840 --> 00:01:12.570
and what is Pearson's
correlation?

00:01:12.570 --> 00:01:16.320
FELIPE HOFFA: Yes, in this case,
Pearson correlation is a

00:01:16.320 --> 00:01:22.455
mathematical function where
if you have two series of

00:01:22.455 --> 00:01:26.310
numbers, you can see how well
related they are linearly

00:01:26.310 --> 00:01:28.548
between each other.

00:01:28.548 --> 00:01:30.080
MICHAEL MANOOCHEHRI: Can you
give me an example of, like,

00:01:30.080 --> 00:01:32.380
what could those numbers be?

00:01:32.380 --> 00:01:37.510
FELIPE HOFFA: For example,
let's say as you get high

00:01:37.510 --> 00:01:40.610
temperatures, do you sell
more or less ice creams?

00:01:40.610 --> 00:01:41.927
MICHAEL MANOOCHEHRI:
I'm guessing more.

00:01:41.927 --> 00:01:44.080
FELIPE HOFFA: Yeah, exactly.

00:01:44.080 --> 00:01:48.640
So there you have a linear
correlation we should be able

00:01:48.640 --> 00:01:49.670
to express as a number.

00:01:49.670 --> 00:01:50.080
MICHAEL MANOOCHEHRI: I see.

00:01:50.080 --> 00:01:52.960
So if you collect data about
what the temperature is over

00:01:52.960 --> 00:01:54.960
the course of the day or over
the course of the week and how

00:01:54.960 --> 00:01:57.740
many ice cream cones you sell,
you can actually run these

00:01:57.740 --> 00:02:00.710
numbers through this formula
and get a number that

00:02:00.710 --> 00:02:03.240
expresses how well correlated
the numbers are.

00:02:03.240 --> 00:02:04.320
That's how I understand it.

00:02:04.320 --> 00:02:04.950
Does that sound right?

00:02:04.950 --> 00:02:08.789
FELIPE HOFFA: Exactly, for
example if every time that the

00:02:08.789 --> 00:02:11.326
temperature increases, you sell
more ice cream, and as

00:02:11.326 --> 00:02:16.930
the temperature goes down, you
sell less ice creams, that's a

00:02:16.930 --> 00:02:19.080
positive correlation.

00:02:19.080 --> 00:02:24.220
The closest to one, when you
calculate it, it's the more

00:02:24.220 --> 00:02:27.850
aligned each of these variables
are to each other.

00:02:27.850 --> 00:02:29.800
MICHAEL MANOOCHEHRI: Right,
right, and you can also test

00:02:29.800 --> 00:02:30.900
for things you don't
know about.

00:02:30.900 --> 00:02:36.090
So maybe people are selling
notebook computers or

00:02:36.090 --> 00:02:38.410
Chromebooks, and you don't know
if it's related to the

00:02:38.410 --> 00:02:38.940
temperature or not.

00:02:38.940 --> 00:02:39.520
Maybe it is.

00:02:39.520 --> 00:02:40.080
Who knows?

00:02:40.080 --> 00:02:42.540
And so you can take the same
approach to other things that

00:02:42.540 --> 00:02:44.870
probably you don't know if
they're correlated or not.

00:02:44.870 --> 00:02:45.150
FELIPE HOFFA: Exactly.

00:02:45.150 --> 00:02:46.960
Let me show you with a
[INAUDIBLE] example.

00:02:46.960 --> 00:02:48.430
MICHAEL MANOOCHEHRI:
Excellent.

00:02:48.430 --> 00:02:49.970
FELIPE HOFFA: This is my IPython
notebook, and I'm

00:02:49.970 --> 00:02:51.400
starting to use it.

00:02:51.400 --> 00:02:52.470
I love it.

00:02:52.470 --> 00:02:55.840
If any of you viewers have tips
on how to do this better,

00:02:55.840 --> 00:02:56.590
please tell me.

00:02:56.590 --> 00:02:58.780
Because I'm just starting
with it.

00:02:58.780 --> 00:03:00.441
MICHAEL MANOOCHEHRI:
Definitely.

00:03:00.441 --> 00:03:02.640
FELIPE HOFFA: So let's start
importing some of the

00:03:02.640 --> 00:03:04.120
[? Magic ?]

00:03:04.120 --> 00:03:04.970
functions--

00:03:04.970 --> 00:03:05.560
Panda, [INAUDIBLE]

00:03:05.560 --> 00:03:07.200
library, [INAUDIBLE]

00:03:07.200 --> 00:03:09.110
library.

00:03:09.110 --> 00:03:11.470
Let's play a little with this.

00:03:11.470 --> 00:03:13.680
For example, what was the
temperature yesterday?

00:03:13.680 --> 00:03:17.080
Let's say you sell ice cream.

00:03:17.080 --> 00:03:17.490
MICHAEL MANOOCHEHRI: Yesterday,

00:03:17.490 --> 00:03:18.970
it was pretty moderate.

00:03:18.970 --> 00:03:20.180
I'd say it was 21.

00:03:20.180 --> 00:03:21.140
I'm going to use Celsius.

00:03:21.140 --> 00:03:21.945
FELIPE HOFFA: Celsius, OK.

00:03:21.945 --> 00:03:23.350
That's one way to international
viewers.

00:03:23.350 --> 00:03:23.450
[INAUDIBLE]

00:03:23.450 --> 00:03:26.160
Fahrenheit, so even
better for me.

00:03:26.160 --> 00:03:27.170
MICHAEL MANOOCHEHRI:
OK, great.

00:03:27.170 --> 00:03:27.865
FELIPE HOFFA: Yesterday,
it was 21.

00:03:27.865 --> 00:03:30.140
And how many ice creams did
you sell yesterday?

00:03:30.140 --> 00:03:30.965
MICHAEL MANOOCHEHRI:
Well, I sold seven

00:03:30.965 --> 00:03:31.880
ice cream cones yesterday.

00:03:31.880 --> 00:03:32.600
FELIPE HOFFA: Seven
ice creams.

00:03:32.600 --> 00:03:34.140
Seven or 70?

00:03:34.140 --> 00:03:36.952
MICHAEL MANOOCHEHRI: OK, it
was very popular, so 70.

00:03:36.952 --> 00:03:38.760
FELIPE HOFFA: 70,
let's say 70.

00:03:38.760 --> 00:03:41.240
And do you remember last week?

00:03:41.240 --> 00:03:42.810
MICHAEL MANOOCHEHRI: Oh yeah,
last week was really hot.

00:03:42.810 --> 00:03:43.970
It was super hot--

00:03:43.970 --> 00:03:44.900
30 degrees.

00:03:44.900 --> 00:03:45.820
FELIPE HOFFA: 30 degrees--
yeah, that's

00:03:45.820 --> 00:03:48.110
super hot in Celsius.

00:03:48.110 --> 00:03:48.900
How many ice creams
did you sell?

00:03:48.900 --> 00:03:49.680
MICHAEL MANOOCHEHRI:
I sold way more.

00:03:49.680 --> 00:03:51.940
I sold 180 ice cream cones.

00:03:51.940 --> 00:03:53.490
FELIPE HOFFA: 180
ice cream cones.

00:03:53.490 --> 00:03:55.230
And what about two weeks ago?

00:03:55.230 --> 00:03:56.880
MICHAEL MANOOCHEHRI: There was
a cold snap two weeks ago.

00:03:56.880 --> 00:03:57.750
Well, it was colder.

00:03:57.750 --> 00:03:59.440
Let's say it was around
16 degrees.

00:03:59.440 --> 00:04:00.486
FELIPE HOFFA: 16 degrees.

00:04:00.486 --> 00:04:02.530
And how many ice creams
did you sell?

00:04:02.530 --> 00:04:03.260
MICHAEL MANOOCHEHRI: Ice
cream trade wasn't

00:04:03.260 --> 00:04:04.050
going well that day.

00:04:04.050 --> 00:04:04.850
35.

00:04:04.850 --> 00:04:07.290
FELIPE HOFFA: 35, that's
[INAUDIBLE].

00:04:07.290 --> 00:04:09.200
OK, now we have three days.

00:04:09.200 --> 00:04:13.625
If we compare it to if
we have three days of

00:04:13.625 --> 00:04:16.649
service, we can plot this.

00:04:16.649 --> 00:04:18.110
Let's see how well they
look together.

00:04:22.640 --> 00:04:23.960
MICHAEL MANOOCHEHRI: So
what do we see here?

00:04:23.960 --> 00:04:26.420
Is this the line we
kind of expected?

00:04:26.420 --> 00:04:27.580
FELIPE HOFFA: Yes, yes, yes.

00:04:27.580 --> 00:04:29.800
You can see the green line
and the blue line.

00:04:29.800 --> 00:04:31.230
The blue line, if you
compare it to, they

00:04:31.230 --> 00:04:33.100
are both up and down.

00:04:33.100 --> 00:04:35.410
And the ice cream sold also
goes up and down.

00:04:35.410 --> 00:04:37.020
MICHAEL MANOOCHEHRI: So but in
the graph, it doesn't look

00:04:37.020 --> 00:04:39.380
like there's a strong connection
between these two.

00:04:39.380 --> 00:04:40.830
FELIPE HOFFA: But you can
see that there is some

00:04:40.830 --> 00:04:41.450
correlation.

00:04:41.450 --> 00:04:44.910
What we can build to better
look at the relationship

00:04:44.910 --> 00:04:48.270
between these two variables is
instead of looking at them on

00:04:48.270 --> 00:04:50.520
time, with can plot one
next to each other

00:04:50.520 --> 00:04:51.926
on a scatter plot.

00:04:51.926 --> 00:04:54.735
Let's look at that.

00:04:54.735 --> 00:04:56.530
MICHAEL MANOOCHEHRI: It looks
like it looks like there's a

00:04:56.530 --> 00:04:58.910
strong kind of a line that goes
through all of these.

00:04:58.910 --> 00:05:01.065
FELIPE HOFFA: Exactly, when the
temperature was 16, we saw

00:05:01.065 --> 00:05:02.430
less than 40.

00:05:02.430 --> 00:05:06.340
When the temperature
was 21, we saw 70.

00:05:06.340 --> 00:05:10.310
And when the temperature
was 30, we saw 180.

00:05:10.310 --> 00:05:11.560
You can see that there
is a linear

00:05:11.560 --> 00:05:13.670
relationship between both.

00:05:13.670 --> 00:05:17.670
And we can get a number for it
with asking for correlation.

00:05:17.670 --> 00:05:19.030
MICHAEL MANOOCHEHRI: So this is
running what you call the

00:05:19.030 --> 00:05:19.830
Pearson's r.

00:05:19.830 --> 00:05:22.980
You're going to do the Pearson
r correlation between these

00:05:22.980 --> 00:05:23.970
series of numbers.

00:05:23.970 --> 00:05:26.280
FELIPE HOFFA: Exactly, I want
to know how linearly

00:05:26.280 --> 00:05:28.110
correlated these numbers are.

00:05:28.110 --> 00:05:30.370
Let's run it.

00:05:30.370 --> 00:05:31.520
0.99.

00:05:31.520 --> 00:05:33.580
This is almost one.

00:05:33.580 --> 00:05:35.820
MICHAEL MANOOCHEHRI: So does
this mean a high correlation?

00:05:35.820 --> 00:05:37.790
FELIPE HOFFA: This means a
very high correlation.

00:05:37.790 --> 00:05:41.405
The hotter it is, the more
ice creams we sell.

00:05:41.405 --> 00:05:42.980
MICHAEL MANOOCHEHRI:
Right, so just to

00:05:42.980 --> 00:05:44.280
get kind of a ballpark.

00:05:44.280 --> 00:05:46.660
So as I recall, Pearson's
r goes from--

00:05:46.660 --> 00:05:49.870
I think, it's negative one
to one is the scale.

00:05:49.870 --> 00:05:50.300
FELIPE HOFFA: Yes, sir.

00:05:50.300 --> 00:05:52.100
MICHAEL MANOOCHEHRI: So a
zero would be, like, no

00:05:52.100 --> 00:05:53.620
correlation at all.

00:05:53.620 --> 00:05:55.850
Something closer to one means
a very strong positive

00:05:55.850 --> 00:05:56.550
correlation.

00:05:56.550 --> 00:05:58.520
And if it's negative, that
means it's a negative

00:05:58.520 --> 00:06:01.350
correlation, meaning when one
number goes up, the other one

00:06:01.350 --> 00:06:02.140
tends to go down.

00:06:02.140 --> 00:06:02.940
Does that sound right?

00:06:02.940 --> 00:06:04.790
FELIPE HOFFA: That
sounds right.

00:06:04.790 --> 00:06:05.460
Let's run another example.

00:06:05.460 --> 00:06:06.740
Let's see negative
correlation.

00:06:06.740 --> 00:06:09.290
For example, you also
sell coats.

00:06:09.290 --> 00:06:11.530
You remember that day
that was the first

00:06:11.530 --> 00:06:14.470
day, it was 21 degrees?

00:06:14.470 --> 00:06:15.780
How many coats did you sell.

00:06:15.780 --> 00:06:17.680
MICHAEL MANOOCHEHRI:
Well, I sold 25.

00:06:17.680 --> 00:06:19.650
FELIPE HOFFA: 25.

00:06:19.650 --> 00:06:21.700
MICHAEL MANOOCHEHRI: Well, a
lot of people buy coats.

00:06:21.700 --> 00:06:23.800
FELIPE HOFFA: Yeah, 25
coats-- pretty good.

00:06:23.800 --> 00:06:26.260
The day that was so hot--
the 30 degree day.

00:06:26.260 --> 00:06:27.040
MICHAEL MANOOCHEHRI: Yeah,
I sold very few.

00:06:27.040 --> 00:06:28.530
I sold 10.

00:06:28.530 --> 00:06:28.980
FELIPE HOFFA: You sold 10.

00:06:28.980 --> 00:06:32.390
MICHAEL MANOOCHEHRI: Somehow,
I sold 10 that day.

00:06:32.390 --> 00:06:34.827
FELIPE HOFFA: Yes, and how many
did you sell that day

00:06:34.827 --> 00:06:36.050
that we were colder--

00:06:36.050 --> 00:06:36.700
16 degrees?

00:06:36.700 --> 00:06:37.410
MICHAEL MANOOCHEHRI: 47.

00:06:37.410 --> 00:06:39.250
FELIPE HOFFA: 47, OK,
let's plot that.

00:06:42.050 --> 00:06:44.420
MICHAEL MANOOCHEHRI: All these
numbers are true, everyone.

00:06:44.420 --> 00:06:45.280
FELIPE HOFFA: Exactly.

00:06:45.280 --> 00:06:47.086
MICHAEL MANOOCHEHRI: I have
a coat ice cream store in

00:06:47.086 --> 00:06:48.510
Mountain View.

00:06:48.510 --> 00:06:50.010
FELIPE HOFFA: Ice
cream and coats.

00:06:50.010 --> 00:06:51.570
MICHAEL MANOOCHEHRI: Ice
cream and coats.

00:06:51.570 --> 00:06:54.680
FELIPE HOFFA: Here we can see
the line is going down.

00:06:54.680 --> 00:06:58.130
The hotter it gets, the
less coats you sell.

00:06:58.130 --> 00:07:01.816
And we can see what the
correlation number is.

00:07:01.816 --> 00:07:03.700
For the numbers you
just gave me, the

00:07:03.700 --> 00:07:06.670
correlation is minus 0.96.

00:07:06.670 --> 00:07:07.890
MICHAEL MANOOCHEHRI: All right,
so a strong negative

00:07:07.890 --> 00:07:08.650
correlation.

00:07:08.650 --> 00:07:10.780
FELIPE HOFFA: Exactly, it's--

00:07:10.780 --> 00:07:11.255
MICHAEL MANOOCHEHRI:
Going down.

00:07:11.255 --> 00:07:12.860
FELIPE HOFFA: Going down,
almost minus one.

00:07:12.860 --> 00:07:14.160
MICHAEL MANOOCHEHRI: All right,
so now I know what to

00:07:14.160 --> 00:07:16.550
sell when it's hot or cold at
Michael's Ice Cream and Coat

00:07:16.550 --> 00:07:19.430
Shop in Mountain View,
California.

00:07:19.430 --> 00:07:20.380
So this is great.

00:07:20.380 --> 00:07:23.045
So it seems like this problem
is easy to solve on your

00:07:23.045 --> 00:07:24.130
IPython notebook.

00:07:24.130 --> 00:07:27.830
So when would this be hard to do
with your IPython notebook.

00:07:27.830 --> 00:07:28.800
Why would we need something
like Big

00:07:28.800 --> 00:07:29.850
Query in this example?

00:07:29.850 --> 00:07:31.150
FELIPE HOFFA: If you have three
letter points, if you

00:07:31.150 --> 00:07:34.780
are looking at two series,
it's very to do

00:07:34.780 --> 00:07:37.280
it on your own computer.

00:07:37.280 --> 00:07:40.670
It totally depends on how much
data can fit in your computer.

00:07:40.670 --> 00:07:44.420
But sometimes, data can't
fit into your computer.

00:07:44.420 --> 00:07:46.400
You have terabytes of data,
you have gigabytes of data

00:07:46.400 --> 00:07:49.300
you've [INAUDIBLE] in a lifetime
or all at once.

00:07:49.300 --> 00:07:51.450
And that's when Big
Query comes in.

00:07:51.450 --> 00:07:52.560
MICHAEL MANOOCHEHRI: So just
for the people that don't

00:07:52.560 --> 00:07:55.930
know, Google Big Query is an API
to an analytical database

00:07:55.930 --> 00:08:00.420
that lets you run queries over
your own data in seconds.

00:08:00.420 --> 00:08:03.080
I mean, you can actually run
queries over gigabytes and

00:08:03.080 --> 00:08:06.000
gigabytes of data and get the
result back in seconds.

00:08:06.000 --> 00:08:07.860
It's a great developer's tool,
because it's all access

00:08:07.860 --> 00:08:09.030
through an API.

00:08:09.030 --> 00:08:10.720
So you can actually write
code to access it.

00:08:10.720 --> 00:08:13.060
We also have a UI that you
can use to run queries.

00:08:13.060 --> 00:08:14.200
And so this is fantastic.

00:08:14.200 --> 00:08:16.800
So we've taken this correlation
function.

00:08:16.800 --> 00:08:20.360
And we've actually applied it
to very large data sets.

00:08:20.360 --> 00:08:22.400
So not just stuff that you can
keep on your notebook, but

00:08:22.400 --> 00:08:24.470
things that are really massive,
the gigabytes and

00:08:24.470 --> 00:08:25.850
terabytes of data.

00:08:25.850 --> 00:08:29.350
FELIPE HOFFA: So what we might
do now for everyone is let's

00:08:29.350 --> 00:08:32.470
pick a data set, a massive one,
and let's look what kinds

00:08:32.470 --> 00:08:34.260
of correlations we
can find in them.

00:08:34.260 --> 00:08:35.990
Do you have any favorite
data set?

00:08:35.990 --> 00:08:38.080
MICHAEL MANOOCHEHRI: Yes, so I
have a data set that I love.

00:08:38.080 --> 00:08:40.049
It's one that a lot of people
use for things like

00:08:40.049 --> 00:08:40.460
correlation.

00:08:40.460 --> 00:08:42.250
It's the [? Reda ?]

00:08:42.250 --> 00:08:45.040
On Time Airline database, which
is kind of put together

00:08:45.040 --> 00:08:46.290
by the Department of
Transportation.

00:08:46.290 --> 00:08:47.430
I love this data set.

00:08:47.430 --> 00:08:49.815
You can actually go Google
it and find it's.

00:08:49.815 --> 00:08:51.670
It's all available
for you to use.

00:08:51.670 --> 00:08:55.820
And I've taken about three years
of data and put it into

00:08:55.820 --> 00:08:57.030
Big Query from this database.

00:08:57.030 --> 00:08:59.420
So basically if you go
to my laptop, I'll

00:08:59.420 --> 00:09:02.080
show you the web UI.

00:09:02.080 --> 00:09:05.730
It basically gives you the date,
an airline code, the

00:09:05.730 --> 00:09:09.070
departure airport and arrival
airport, and also the delays,

00:09:09.070 --> 00:09:10.560
how the flight was delayed.

00:09:10.560 --> 00:09:12.200
Was it delayed five minutes?

00:09:12.200 --> 00:09:14.560
And if it took off early, it'll
have a negative number

00:09:14.560 --> 00:09:15.890
for the delay.

00:09:15.890 --> 00:09:17.570
And same thing with
the arrival.

00:09:17.570 --> 00:09:19.240
So was it delayed on arrival?

00:09:19.240 --> 00:09:20.590
Was it five minutes late?

00:09:20.590 --> 00:09:21.850
Was it five minutes early?

00:09:21.850 --> 00:09:24.560
This is a great data set, not
only because it's huge.

00:09:24.560 --> 00:09:26.600
Right now, I don't even have the
entire data set in there.

00:09:26.600 --> 00:09:28.310
I have about 70 million
records.

00:09:28.310 --> 00:09:29.250
FELIPE HOFFA: 70 million
records.

00:09:29.250 --> 00:09:30.442
MICHAEL MANOOCHEHRI:
70 million records.

00:09:30.442 --> 00:09:31.648
FELIPE HOFFA: That's
70 million flights

00:09:31.648 --> 00:09:32.430
recorded of the query.

00:09:32.430 --> 00:09:33.960
MICHAEL MANOOCHEHRI: Yes, over
all of the time period.

00:09:33.960 --> 00:09:35.250
This is just United
States data too.

00:09:35.250 --> 00:09:36.330
There's even more out there.

00:09:36.330 --> 00:09:37.900
And it's all on Big Query.

00:09:37.900 --> 00:09:41.280
And it's about eight gigabytes
of data in there right now, so

00:09:41.280 --> 00:09:42.050
pretty considerable.

00:09:42.050 --> 00:09:44.330
It's definitely a lot for, say,
if you're using something

00:09:44.330 --> 00:09:46.960
like r-- something that would
be way too slow for r, and

00:09:46.960 --> 00:09:48.450
just might not even
fit into memory.

00:09:48.450 --> 00:09:49.730
And you'd have to do
all kinds of tricks

00:09:49.730 --> 00:09:51.160
with something similar.

00:09:51.160 --> 00:09:52.080
Same with IPython.

00:09:52.080 --> 00:09:55.180
It might be very difficult to
do timely results and not be

00:09:55.180 --> 00:09:56.590
able to do some of the
things we want to.

00:09:56.590 --> 00:09:57.080
FELIPE HOFFA: That's amazing.

00:09:57.080 --> 00:09:58.360
MICHAEL MANOOCHEHRI: So yeah,
so let's take a look.

00:09:58.360 --> 00:09:59.930
So I'm going to learn
how to use Core.

00:09:59.930 --> 00:10:01.060
I've probably used it.

00:10:01.060 --> 00:10:02.770
And so we're going to do a
couple queries to see how this

00:10:02.770 --> 00:10:03.750
works, and I'm really excited.

00:10:03.750 --> 00:10:06.970
FELIPE HOFFA: Let's start
things very simple.

00:10:06.970 --> 00:10:08.130
Show me a table, please.

00:10:08.130 --> 00:10:09.340
MICHAEL MANOOCHEHRI: So let's
just take a look at the

00:10:09.340 --> 00:10:10.420
details of this table.

00:10:10.420 --> 00:10:13.520
So if we look at my laptop, this
is sort of what the data

00:10:13.520 --> 00:10:14.540
looks like.

00:10:14.540 --> 00:10:15.070
Here's the data.

00:10:15.070 --> 00:10:16.390
It's just a string.

00:10:16.390 --> 00:10:17.110
We have a string.

00:10:17.110 --> 00:10:18.810
We have airport code.

00:10:18.810 --> 00:10:21.760
So this is, like, Houston in
Texas, and we have some

00:10:21.760 --> 00:10:22.850
information about
the departures.

00:10:22.850 --> 00:10:27.810
So we have the arrival actual
time and the delay.

00:10:27.810 --> 00:10:29.120
So this is what we're actually
looking at is how

00:10:29.120 --> 00:10:29.900
many minutes delayed.

00:10:29.900 --> 00:10:32.120
So this particular flight,
randomly, that I'm looking at

00:10:32.120 --> 00:10:33.420
is delayed three minutes.

00:10:33.420 --> 00:10:36.820
And the arrival time was
11 minutes late.

00:10:36.820 --> 00:10:39.695
FELIPE HOFFA: So for a flight,
we know when it happened, how

00:10:39.695 --> 00:10:43.750
late it was, where did it depart
from, where it was

00:10:43.750 --> 00:10:47.700
going to, the airport,
the state.

00:10:47.700 --> 00:10:49.130
MICHAEL MANOOCHEHRI: And we have
some other information as

00:10:49.130 --> 00:10:50.210
well, like the latitude
at longitude.

00:10:50.210 --> 00:10:52.020
But we're going to be looking
at the times.

00:10:52.020 --> 00:10:55.550
FELIPE HOFFA: And 80 million
lines of rows with that data?

00:10:55.550 --> 00:10:57.360
MICHAEL MANOOCHEHRI: Yes,
exactly, 80 million--

00:10:57.360 --> 00:10:58.270
70 million.

00:10:58.270 --> 00:11:00.390
FELIPE HOFFA: Which one has
been the worst day?

00:11:00.390 --> 00:11:04.640
MICHAEL MANOOCHEHRI: So, yes,
let's take a look at that.

00:11:04.640 --> 00:11:05.770
So we want to do
the worst day.

00:11:05.770 --> 00:11:09.770
So that would be we want to
select the date, and would you

00:11:09.770 --> 00:11:12.240
want to look at average
departure delay?

00:11:12.240 --> 00:11:14.430
FELIPE HOFFA: Yes, let's look
at the worst average.

00:11:14.430 --> 00:11:15.910
MICHAEL MANOOCHEHRI: OK so I'm
going to use the Big Query

00:11:15.910 --> 00:11:18.610
function, average, and I'm going
to look at departure

00:11:18.610 --> 00:11:20.450
delay, which is just a number.

00:11:20.450 --> 00:11:23.090
So I'm looking for average
departure delay

00:11:23.090 --> 00:11:25.480
from this data set.

00:11:25.480 --> 00:11:26.390
And what do I want to do?

00:11:26.390 --> 00:11:31.130
I want to group by date, because
I want to know which

00:11:31.130 --> 00:11:33.140
date has the worst average.

00:11:33.140 --> 00:11:35.870
And I'm going to label
this as [INAUDIBLE]

00:11:35.870 --> 00:11:38.430
g, grouped by date.

00:11:38.430 --> 00:11:41.990
So this should give me the days
with, on average, the

00:11:41.990 --> 00:11:44.770
worst departure delays for the
entire data set for all of

00:11:44.770 --> 00:11:45.530
these years.

00:11:45.530 --> 00:11:46.210
So let's run this.

00:11:46.210 --> 00:11:49.730
This is now running over
70 gigabytes of data.

00:11:49.730 --> 00:11:51.790
And it took three seconds
to return.

00:11:54.690 --> 00:11:56.090
So let's take a look at this.

00:11:56.090 --> 00:11:58.420
So just looking at these--

00:11:58.420 --> 00:12:00.140
FELIPE HOFFA: There is something
missing there.

00:12:00.140 --> 00:12:00.930
MICHAEL MANOOCHEHRI: What
do we want to do?

00:12:00.930 --> 00:12:02.230
FELIPE HOFFA: We want
to sort it.

00:12:02.230 --> 00:12:03.710
MICHAEL MANOOCHEHRI: Right,
so this is unsorted.

00:12:03.710 --> 00:12:06.930
So we want to sort by the
departure delay time.

00:12:06.930 --> 00:12:10.340
FELIPE HOFFA: Exactly, right
now we're looking at each

00:12:10.340 --> 00:12:12.160
date, what was the average?

00:12:12.160 --> 00:12:15.400
But we loaded them in
a random order.

00:12:15.400 --> 00:12:16.860
MICHAEL MANOOCHEHRI: OK, so I'm
going to do something here

00:12:16.860 --> 00:12:17.900
with my query.

00:12:17.900 --> 00:12:21.270
And I'm going to say data is the
first parameter that we're

00:12:21.270 --> 00:12:23.620
looking at in the query, and
average departure delay.

00:12:23.620 --> 00:12:25.590
So I'm going to say group
by one, meaning date,

00:12:25.590 --> 00:12:27.090
and order by two.

00:12:27.090 --> 00:12:31.080
And I also want to do order
by two descending.

00:12:31.080 --> 00:12:33.190
FELIPE HOFFA: So that way,
we get the worst day?

00:12:33.190 --> 00:12:34.220
When was the delay?

00:12:34.220 --> 00:12:35.840
What date were the delays
the greatest?

00:12:35.840 --> 00:12:36.640
MICHAEL MANOOCHEHRI: Yes, OK.

00:12:36.640 --> 00:12:38.570
So let's look at this.

00:12:38.570 --> 00:12:39.610
We're going to run this.

00:12:39.610 --> 00:12:40.810
We're going to take about
the same time.

00:12:40.810 --> 00:12:42.870
In two seconds, we processed
all this data.

00:12:42.870 --> 00:12:47.500
And it looks like the worst days
were December 23, 2004,

00:12:47.500 --> 00:12:49.430
December 21, 2008--

00:12:49.430 --> 00:12:52.155
a lot of times that look like
around Christmas time.

00:12:52.155 --> 00:12:56.100
FELIPE HOFFA: Exactly, so what
is that telling us now?

00:12:56.100 --> 00:12:58.340
If you are going to fly,
avoid Christmas.

00:12:58.340 --> 00:13:00.300
MICHAEL MANOOCHEHRI: Now
this is common sense.

00:13:00.300 --> 00:13:01.600
So a lot of people know
that it's bad.

00:13:01.600 --> 00:13:04.110
And we don't actually know
if this is the reason.

00:13:04.110 --> 00:13:05.620
Is it really because it's
Christmas time?

00:13:05.620 --> 00:13:07.350
When we can infer things,
and we can use this

00:13:07.350 --> 00:13:08.190
data to point it out.

00:13:08.190 --> 00:13:10.440
It's pretty obvious that
people travel a lot.

00:13:10.440 --> 00:13:11.940
FELIPE HOFFA: Yes, but it's
amazing that the worst days

00:13:11.940 --> 00:13:16.100
ever in history are around
Christmas, around New Year is

00:13:16.100 --> 00:13:17.050
the fourth one.

00:13:17.050 --> 00:13:18.070
What about the second?

00:13:18.070 --> 00:13:19.090
MICHAEL MANOOCHEHRI: So this
is an interesting one.

00:13:19.090 --> 00:13:21.240
So these are all kind of
holiday season times--

00:13:21.240 --> 00:13:21.570
makes sense.

00:13:21.570 --> 00:13:24.330
But the ninth worst
day was around

00:13:24.330 --> 00:13:26.320
Valentine's Day in 2007.

00:13:26.320 --> 00:13:28.170
And that is a really
interesting--

00:13:28.170 --> 00:13:29.110
I would never have
guessed that.

00:13:29.110 --> 00:13:31.700
Now, is it because people are
going on Valentine's Day trips

00:13:31.700 --> 00:13:34.350
and maybe there's, like, a
romantic getaway that year?

00:13:34.350 --> 00:13:36.050
So actually, I was looking
at this data

00:13:36.050 --> 00:13:37.000
a little bit earlier.

00:13:37.000 --> 00:13:44.270
And I think a lot of people
might know this.

00:13:44.270 --> 00:13:47.370
There was a Valentine's Day
storm in 2007, the North

00:13:47.370 --> 00:13:48.180
American blizzard.

00:13:48.180 --> 00:13:49.810
And that was the reason
why all of those

00:13:49.810 --> 00:13:50.450
flights were delayed.

00:13:50.450 --> 00:13:53.760
FELIPE HOFFA: I remember
that day.

00:13:53.760 --> 00:13:53.950
It was bad.

00:13:53.950 --> 00:13:54.720
MICHAEL MANOOCHEHRI:
It was really bad.

00:13:54.720 --> 00:13:58.300
FELIPE HOFFA: It's interesting
to know that that day was bad,

00:13:58.300 --> 00:14:00.260
but we have had even
worse days.

00:14:00.260 --> 00:14:01.910
MICHAEL MANOOCHEHRI: Yes,
we've had worse average

00:14:01.910 --> 00:14:05.000
departure delay times, and
there was Christmas.

00:14:05.000 --> 00:14:05.910
So this is fantastic.

00:14:05.910 --> 00:14:07.420
So now, I've actually learned
something I wouldn't have

00:14:07.420 --> 00:14:09.400
learned because of this query.

00:14:09.400 --> 00:14:10.650
So what are we going
to do now?

00:14:10.650 --> 00:14:12.540
FELIPE HOFFA: Can you show me
the worst days by state?

00:14:12.540 --> 00:14:14.370
MICHAEL MANOOCHEHRI: Yes, so the
worst days by state, I can

00:14:14.370 --> 00:14:17.380
do by grouping by state.

00:14:17.380 --> 00:14:20.040
So I want to add one more
thing here, which is--

00:14:20.040 --> 00:14:21.560
let's take a quick look
at our schema again.

00:14:21.560 --> 00:14:22.730
FELIPE HOFFA: I think it's
departure state.

00:14:22.730 --> 00:14:24.190
MICHAEL MANOOCHEHRI: Departure
state, yes.

00:14:24.190 --> 00:14:28.216
So departure state, and I want
to say select the date and

00:14:28.216 --> 00:14:28.550
departure date.

00:14:28.550 --> 00:14:31.870
I want to group by the departure
state, and I

00:14:31.870 --> 00:14:33.930
want to order by--

00:14:33.930 --> 00:14:34.330
FELIPE HOFFA: Column three.

00:14:34.330 --> 00:14:35.050
MICHAEL MANOOCHEHRI: So I've
just actually just

00:14:35.050 --> 00:14:35.820
changed the group by.

00:14:35.820 --> 00:14:37.520
So let's run this.

00:14:37.520 --> 00:14:38.500
See how that works.

00:14:38.500 --> 00:14:39.450
I love doing these
live queries.

00:14:39.450 --> 00:14:42.210
I learn something every
time I do this.

00:14:42.210 --> 00:14:43.270
So this is running now.

00:14:43.270 --> 00:14:45.510
It should take a little bit
more time because we're

00:14:45.510 --> 00:14:46.850
grouping by.

00:14:46.850 --> 00:14:48.260
So that took nine seconds.

00:14:48.260 --> 00:14:52.200
So now these are the worst,
the order by down.

00:14:52.200 --> 00:14:53.920
I don't actually know
what TB stands form.

00:14:53.920 --> 00:14:55.760
Wyoming is the second one.

00:14:55.760 --> 00:14:58.230
So it looks like some
of these dates--

00:14:58.230 --> 00:15:00.440
Wyoming was actually the worst
for whatever reason.

00:15:00.440 --> 00:15:02.520
FELIPE HOFFA: In fact, one
important thing when looking

00:15:02.520 --> 00:15:05.150
at data and why we are doing
this slide is to highlight

00:15:05.150 --> 00:15:08.060
what problems we have when doing
this kind of average.

00:15:08.060 --> 00:15:09.480
When we're doing
that [? out, ?]

00:15:09.480 --> 00:15:12.390
when doing an average, we really
want to average a lot

00:15:12.390 --> 00:15:13.650
of numbers.

00:15:13.650 --> 00:15:16.370
If you have only one data
point, it's not very

00:15:16.370 --> 00:15:17.590
representative.

00:15:17.590 --> 00:15:21.470
So what we can absolutely query
is a count of how many

00:15:21.470 --> 00:15:23.720
numbers we are averaging.

00:15:23.720 --> 00:15:25.220
MICHAEL MANOOCHEHRI: So let me
add one more parameter, and

00:15:25.220 --> 00:15:26.840
that would be the count.

00:15:26.840 --> 00:15:27.980
And so I'm adding count.

00:15:27.980 --> 00:15:29.270
I'm going to call
it c, an alias.

00:15:29.270 --> 00:15:31.140
So I'm going to just move this
down so people can see.

00:15:31.140 --> 00:15:34.600
So now we have the date, the
departure state, the average

00:15:34.600 --> 00:15:36.280
departure delay and the count.

00:15:36.280 --> 00:15:37.300
So I'm going to just
run this again.

00:15:37.300 --> 00:15:39.605
I think everything should look
the same except we'll have now

00:15:39.605 --> 00:15:42.120
a count of how many times these
flights were going out.

00:15:45.050 --> 00:15:46.150
Great, so now I have one.

00:15:46.150 --> 00:15:47.580
So that seems like a pretty
small sample.

00:15:47.580 --> 00:15:48.730
What should I do to--?

00:15:48.730 --> 00:15:51.020
FELIPE HOFFA: Exactly, it's only
one data point for one

00:15:51.020 --> 00:15:52.020
day for one state.

00:15:52.020 --> 00:15:53.780
It's not very interesting.

00:15:53.780 --> 00:16:00.360
Let's figure out small states,
like if there was only one

00:16:00.360 --> 00:16:03.290
flight that day and it was very
delayed, we can't really

00:16:03.290 --> 00:16:05.080
say much about this.

00:16:05.080 --> 00:16:09.130
So let's have data
points where--

00:16:09.130 --> 00:16:11.570
let's have [? evidence ?] when
we have a [? real ?]

00:16:11.570 --> 00:16:12.410
number of flights.

00:16:12.410 --> 00:16:15.430
Let's have at least 10 flight
from that state.

00:16:15.430 --> 00:16:16.260
MICHAEL MANOOCHEHRI: And this
is where I want to use the

00:16:16.260 --> 00:16:17.310
having clause.

00:16:17.310 --> 00:16:20.000
So I can say, give me a
result having a count

00:16:20.000 --> 00:16:21.150
greater than something.

00:16:21.150 --> 00:16:24.500
So if I'm not mistaken, I would
do something like this,

00:16:24.500 --> 00:16:25.750
where I say--

00:16:25.750 --> 00:16:27.200
let's say the count
greater than 50.

00:16:27.200 --> 00:16:27.690
FELIPE HOFFA: Greater than 50.

00:16:27.690 --> 00:16:28.870
MICHAEL MANOOCHEHRI: We
can choose whatever.

00:16:28.870 --> 00:16:31.350
So I'm going to run this again,
filtering out some of

00:16:31.350 --> 00:16:35.230
these states with
less flights.

00:16:35.230 --> 00:16:37.345
FELIPE HOFFA: Let's get
real average, not

00:16:37.345 --> 00:16:38.820
the loose data points.

00:16:38.820 --> 00:16:40.070
MICHAEL MANOOCHEHRI: Right,
so this is great.

00:16:40.070 --> 00:16:41.910
So I love this iterative process
of Big Query, because

00:16:41.910 --> 00:16:45.330
again, we're going over
70 million records.

00:16:45.330 --> 00:16:46.340
So this is an interesting one.

00:16:46.340 --> 00:16:50.370
Now we have flights from large
states, large airports,

00:16:50.370 --> 00:16:52.990
Oregon, Maryland,
Ohio, Georgia.

00:16:52.990 --> 00:16:56.580
Count is 87, 126, et
cetera, et cetera.

00:16:56.580 --> 00:16:59.130
FELIPE HOFFA: So the worst
date ever in the recorded

00:16:59.130 --> 00:17:04.464
history we have was two days
before Christmas in Oregon.

00:17:04.464 --> 00:17:07.950
The average delay that
day was three hours.

00:17:07.950 --> 00:17:08.829
That's a lot.

00:17:08.829 --> 00:17:10.240
It was a very bad day.

00:17:10.240 --> 00:17:12.560
MICHAEL MANOOCHEHRI: Exactly,
and then you can see another

00:17:12.560 --> 00:17:15.020
kind of holiday seasons, around
New Year's, same kind

00:17:15.020 --> 00:17:16.680
of thing-- like, huge travel
delays probably

00:17:16.680 --> 00:17:17.710
due to a lot of people.

00:17:17.710 --> 00:17:21.040
We don't know, but this gives
you a pointer to see why.

00:17:21.040 --> 00:17:22.569
FELIPE HOFFA: And this
is awesome, but

00:17:22.569 --> 00:17:23.780
we want to go further.

00:17:23.780 --> 00:17:26.760
You've always been able to
do this with Big Query.

00:17:26.760 --> 00:17:31.940
Now we want to compare state
with out of state.

00:17:31.940 --> 00:17:33.460
For example, the data--

00:17:33.460 --> 00:17:34.240
New York is bad.

00:17:34.240 --> 00:17:37.300
Are there other airports that
are bad at the same time?

00:17:37.300 --> 00:17:38.290
MICHAEL MANOOCHEHRI:
This is fantastic.

00:17:38.290 --> 00:17:41.460
So we want to take this data and
actually do a correlation

00:17:41.460 --> 00:17:44.570
on some similar data set
or the same data set.

00:17:44.570 --> 00:17:45.810
So how do we do that?

00:17:45.810 --> 00:17:49.690
FELIPE HOFFA: First, let's
start with a data series.

00:17:49.690 --> 00:17:53.670
Let's get the series of all the
other delays per day for

00:17:53.670 --> 00:17:54.820
one airport.

00:17:54.820 --> 00:17:57.120
MICHAEL MANOOCHEHRI: OK,
or one state maybe.

00:17:57.120 --> 00:17:58.020
FELIPE HOFFA: For one state.

00:17:58.020 --> 00:18:00.490
Let's do states where we can
have more data points to--

00:18:00.490 --> 00:18:01.320
MICHAEL MANOOCHEHRI: So
I'm going to do the

00:18:01.320 --> 00:18:02.470
same query, I believe.

00:18:02.470 --> 00:18:04.700
But I'm going to add
where departure

00:18:04.700 --> 00:18:06.080
state equals something.

00:18:06.080 --> 00:18:08.300
FELIPE HOFFA: Yeah, we will
order by date this time,

00:18:08.300 --> 00:18:09.540
because we want every day.

00:18:09.540 --> 00:18:11.900
MICHAEL MANOOCHEHRI: OK, so
I'm going to order by one.

00:18:11.900 --> 00:18:16.620
I'm going to add a where
clause, where

00:18:16.620 --> 00:18:20.560
departure state equals--

00:18:20.560 --> 00:18:22.080
I can type it--

00:18:22.080 --> 00:18:22.920
equals--

00:18:22.920 --> 00:18:24.760
pick a state.

00:18:24.760 --> 00:18:25.710
FELIPE HOFFA: New York.

00:18:25.710 --> 00:18:25.890
MICHAEL MANOOCHEHRI: New York--

00:18:25.890 --> 00:18:27.030
sounds like a good state.

00:18:27.030 --> 00:18:29.620
So here, I'm adding departure
state is from New York.

00:18:29.620 --> 00:18:32.050
And going to run this again,
the same query, just by

00:18:32.050 --> 00:18:34.020
filtering out all the
other states.

00:18:34.020 --> 00:18:36.090
So let's see how this works.

00:18:36.090 --> 00:18:37.820
Two seconds later, we
have-- ah, look,

00:18:37.820 --> 00:18:40.580
it's around New Year's.

00:18:40.580 --> 00:18:42.015
So this isn't ordered.

00:18:42.015 --> 00:18:45.180
FELIPE HOFFA: Yeah, let's have
the order now by date.

00:18:45.180 --> 00:18:48.240
MICHAEL MANOOCHEHRI: By date,
order by date ascending.

00:18:48.240 --> 00:18:48.810
This is great.

00:18:48.810 --> 00:18:49.760
So I'm just changing the
way it's ordered.

00:18:49.760 --> 00:18:51.565
Yeah, it was actually ordered
the wrong way.

00:18:51.565 --> 00:18:52.170
So here it is.

00:18:52.170 --> 00:18:54.000
So the very first day
in our database--

00:18:54.000 --> 00:18:54.690
that's the delay.

00:18:54.690 --> 00:18:55.840
This is great.

00:18:55.840 --> 00:18:57.510
FELIPE HOFFA: This looks
like a data series.

00:18:57.510 --> 00:19:00.010
And we want to run the
correlation between this data

00:19:00.010 --> 00:19:03.770
series and our airport.

00:19:03.770 --> 00:19:07.660
How correlated, for example,
is New York to California

00:19:07.660 --> 00:19:08.370
[INAUDIBLE].

00:19:08.370 --> 00:19:09.210
MICHAEL MANOOCHEHRI: Yes,
that's a great idea.

00:19:09.210 --> 00:19:11.590
OK, so what should we do next?

00:19:11.590 --> 00:19:14.310
FELIPE HOFFA: This is where
we can do assess joint.

00:19:14.310 --> 00:19:18.820
We run the same query two times
and add the MS columns.

00:19:18.820 --> 00:19:20.120
MICHAEL MANOOCHEHRI: So
I can actually just

00:19:20.120 --> 00:19:21.870
take the same query.

00:19:21.870 --> 00:19:23.070
I'm going to do a joint.

00:19:23.070 --> 00:19:25.030
So the first thing I'm going
to do is I'm going to wrap

00:19:25.030 --> 00:19:27.620
this around in some
parentheses, and

00:19:27.620 --> 00:19:29.000
let's call it a.

00:19:29.000 --> 00:19:34.660
And I'm going to join
with the same query.

00:19:34.660 --> 00:19:36.950
And we'll be able to edit
this in a second.

00:19:36.950 --> 00:19:41.820
So I'm going to do a
quick join, and I'm

00:19:41.820 --> 00:19:43.180
going to join it on.

00:19:43.180 --> 00:19:44.940
And I'll have to do another
select, but I'll show you that

00:19:44.940 --> 00:19:45.660
in a second.

00:19:45.660 --> 00:19:46.980
So what are we going
to join on?

00:19:46.980 --> 00:19:47.310
The date.

00:19:47.310 --> 00:19:48.660
FELIPE HOFFA: The date.

00:19:48.660 --> 00:19:51.420
MICHAEL MANOOCHEHRI: So I want
to say a date equals b date.

00:19:51.420 --> 00:19:51.530
FELIPE HOFFA: Exactly.

00:19:51.530 --> 00:19:54.080
MICHAEL MANOOCHEHRI: And I
have to call this b, or

00:19:54.080 --> 00:19:55.070
whatever you want it
to [INAUDIBLE].

00:19:55.070 --> 00:19:59.570
And now that I have this,
I can say select.

00:19:59.570 --> 00:20:01.740
I want to say select
a departure

00:20:01.740 --> 00:20:08.034
state, b departure state.

00:20:08.034 --> 00:20:09.550
And I will spell it correctly.

00:20:12.370 --> 00:20:13.120
So I want to do that.

00:20:13.120 --> 00:20:16.015
And then I want to select
a average and b average.

00:20:16.015 --> 00:20:19.320
FELIPE HOFFA: Yes,
that's true.

00:20:19.320 --> 00:20:20.390
MICHAEL MANOOCHEHRI: And what
else do I need to look at?

00:20:20.390 --> 00:20:22.630
Do I need to look at
the count as well?

00:20:22.630 --> 00:20:23.520
FELIPE HOFFA: Let's
look at the count.

00:20:23.520 --> 00:20:26.150
It's always interesting to know
that we have enough data

00:20:26.150 --> 00:20:27.600
to make a correlation.

00:20:27.600 --> 00:20:30.470
MICHAEL MANOOCHEHRI: So I'll
just do like that.

00:20:30.470 --> 00:20:31.730
So this actually should work.

00:20:31.730 --> 00:20:34.150
But now I'm comparing New
York to New York.

00:20:34.150 --> 00:20:36.420
FELIPE HOFFA: Let's not
do the count now.

00:20:36.420 --> 00:20:38.130
We are not really aggregating.

00:20:38.130 --> 00:20:40.000
And let's compare New
York to California.

00:20:40.000 --> 00:20:40.810
MICHAEL MANOOCHEHRI: So I'll
change one of these to

00:20:40.810 --> 00:20:41.970
California.

00:20:41.970 --> 00:20:43.230
So this will give us, what?

00:20:43.230 --> 00:20:44.790
The average departure delays.

00:20:44.790 --> 00:20:46.240
FELIPE HOFFA: Yeah, and to
make this query even more

00:20:46.240 --> 00:20:48.680
efficient, you don't really
need to order them.

00:20:48.680 --> 00:20:49.660
MICHAEL MANOOCHEHRI: Right,
because it's just actually

00:20:49.660 --> 00:20:50.660
just joining.

00:20:50.660 --> 00:20:52.010
I'll take these out.

00:20:52.010 --> 00:20:54.700
Let's get rid of that step
to make it even faster.

00:20:54.700 --> 00:20:56.790
Let's see how this works.

00:20:56.790 --> 00:20:58.060
A much larger query
than before--

00:21:05.530 --> 00:21:09.540
so just taking a quick look,
making sure that I have

00:21:09.540 --> 00:21:10.790
everything correct.

00:21:13.860 --> 00:21:15.270
FELIPE HOFFA: You're
missing a from.

00:21:15.270 --> 00:21:17.510
MICHAEL MANOOCHEHRI: Thank
you very much.

00:21:17.510 --> 00:21:19.830
FELIPE HOFFA: From
the other select.

00:21:19.830 --> 00:21:21.680
MICHAEL MANOOCHEHRI:
I missed a clause.

00:21:21.680 --> 00:21:23.200
So that should work.

00:21:23.200 --> 00:21:26.130
Thank you for pair programming
with me.

00:21:26.130 --> 00:21:27.140
OK, here we go up.

00:21:27.140 --> 00:21:28.970
So here is our query.

00:21:28.970 --> 00:21:29.780
This is fantastic.

00:21:29.780 --> 00:21:32.440
So these are actually
joined on a date.

00:21:32.440 --> 00:21:36.190
We have the departure state,
New York to California, and

00:21:36.190 --> 00:21:38.570
the average departure delays
every single day.

00:21:38.570 --> 00:21:40.610
FELIPE HOFFA: Exactly, so
whenever in New York, we have

00:21:40.610 --> 00:21:43.330
an average of 4.2.

00:21:43.330 --> 00:21:45.230
California has an
average of 2.8.

00:21:45.230 --> 00:21:47.130
MICHAEL MANOOCHEHRI:
Right, interesting.

00:21:47.130 --> 00:21:48.430
This is interesting, because
now we have two data sets.

00:21:48.430 --> 00:21:49.700
Is this working into
a correlation

00:21:49.700 --> 00:21:51.340
between these two states?

00:21:51.340 --> 00:21:52.750
FELIPE HOFFA: Exactly, is
there a correlation?

00:21:52.750 --> 00:21:54.690
Is there no correlation?

00:21:54.690 --> 00:21:55.690
Let's look at that.

00:21:55.690 --> 00:21:57.090
MICHAEL MANOOCHEHRI: So the way
I want to do correlation

00:21:57.090 --> 00:22:00.810
is the core function, and I
would run the core function on

00:22:00.810 --> 00:22:03.990
these two variables, the
averages from both.

00:22:03.990 --> 00:22:06.520
So now I'm actually just
slightly changing this query.

00:22:06.520 --> 00:22:08.000
I'm adding the core function,
wrapping that

00:22:08.000 --> 00:22:08.950
around these averages.

00:22:08.950 --> 00:22:11.920
So I should now get a
correlation between the two.

00:22:11.920 --> 00:22:15.070
FELIPE HOFFA: Yes, but
correlation is an aggregate

00:22:15.070 --> 00:22:17.980
query, so you need to
group by something.

00:22:17.980 --> 00:22:20.970
And we are going to group
by departure states.

00:22:20.970 --> 00:22:21.620
MICHAEL MANOOCHEHRI:
Great, so I want to

00:22:21.620 --> 00:22:23.850
group by one and two.

00:22:23.850 --> 00:22:26.290
FELIPE HOFFA: Awesome.

00:22:26.290 --> 00:22:27.460
MICHAEL MANOOCHEHRI: And when I
say one and two, again, I'm

00:22:27.460 --> 00:22:29.500
referring to these first two
columns we're sending.

00:22:29.500 --> 00:22:31.090
So now I'm going to
run this again.

00:22:31.090 --> 00:22:32.380
FELIPE HOFFA: That's
our new shorthand.

00:22:32.380 --> 00:22:33.630
MICHAEL MANOOCHEHRI:
I love it.

00:22:35.980 --> 00:22:38.690
FELIPE HOFFA: So across this
history, if we look at every

00:22:38.690 --> 00:22:43.790
day, New York to California, of
how delayed they were, the

00:22:43.790 --> 00:22:45.590
correlation is 0.3.

00:22:45.590 --> 00:22:47.160
MICHAEL MANOOCHEHRI: It's kind
of a weak correlation.

00:22:47.160 --> 00:22:47.760
FELIPE HOFFA: So there
is correlation.

00:22:47.760 --> 00:22:49.270
We can say there is
correlation, but

00:22:49.270 --> 00:22:51.470
it's not very strong.

00:22:51.470 --> 00:22:55.593
If flights are delayed in New
York, they might be delayed at

00:22:55.593 --> 00:22:57.824
California too.

00:22:57.824 --> 00:23:01.620
MICHAEL MANOOCHEHRI: Now, it
just makes some sense because

00:23:01.620 --> 00:23:03.560
they're far apart, the plane
can make up time.

00:23:03.560 --> 00:23:03.940
Who knows?

00:23:03.940 --> 00:23:05.050
There might be no connection.

00:23:05.050 --> 00:23:06.460
The weather systems are
different, et cetera.

00:23:06.460 --> 00:23:09.160
I don't know the answer,
but there is not a very

00:23:09.160 --> 00:23:11.050
significant connection
between these there.

00:23:11.050 --> 00:23:13.050
FELIPE HOFFA: What about New
York and New Jersey?

00:23:13.050 --> 00:23:14.270
MICHAEL MANOOCHEHRI: All right,
so New York and New

00:23:14.270 --> 00:23:16.130
Jersey, very connected.

00:23:16.130 --> 00:23:18.770
Some of the airlines-- the
planes are similar places.

00:23:18.770 --> 00:23:20.150
The weather systems
are similar.

00:23:20.150 --> 00:23:22.510
Running the exact same
query again with New

00:23:22.510 --> 00:23:23.990
York and New Jersey.

00:23:23.990 --> 00:23:25.780
So ah, now look at this.

00:23:25.780 --> 00:23:28.800
The correlation is actually
quite strong, 0.83.

00:23:28.800 --> 00:23:31.500
FELIPE HOFFA: We went
from 0.3 to 0.8.

00:23:31.500 --> 00:23:34.170
This means if there are delays
in New York, it's very

00:23:34.170 --> 00:23:36.860
probably that there are delays
in New Jersey too.

00:23:36.860 --> 00:23:38.385
MICHAEL MANOOCHEHRI: Right,
so this is fantastic.

00:23:38.385 --> 00:23:39.730
So that also makes some sense.

00:23:39.730 --> 00:23:41.050
Now we're looking at the entire
data set, we're getting

00:23:41.050 --> 00:23:44.110
a really good understanding
of those correlations.

00:23:44.110 --> 00:23:45.340
FELIPE HOFFA: That is right.

00:23:45.340 --> 00:23:46.260
MICHAEL MANOOCHEHRI: That
seems pretty obvious.

00:23:46.260 --> 00:23:48.580
Can we do one more kind of query
where we can find things

00:23:48.580 --> 00:23:50.040
that are not so obvious?

00:23:50.040 --> 00:23:52.640
Like how do we find out things
that we maybe don't know?

00:23:52.640 --> 00:23:54.600
FELIPE HOFFA: For example, can
you tell me what's the state

00:23:54.600 --> 00:23:55.750
that is most correlated
to New York?

00:23:55.750 --> 00:23:58.020
MICHAEL MANOOCHEHRI:
Interesting., the most

00:23:58.020 --> 00:23:58.970
correlated to New York.

00:23:58.970 --> 00:24:01.210
How would we find that query?

00:24:01.210 --> 00:24:04.510
FELIPE HOFFA: We would remove
the selection of states from--

00:24:04.510 --> 00:24:05.970
MICHAEL MANOOCHEHRI: So I don't
actually want to select

00:24:05.970 --> 00:24:07.280
any particular state
from each of these.

00:24:07.280 --> 00:24:08.269
FELIPE HOFFA: Well, you can
leave New York as the first

00:24:08.269 --> 00:24:10.830
one because we want to know
which state is the most

00:24:10.830 --> 00:24:11.740
correlated to New York.

00:24:11.740 --> 00:24:13.520
MICHAEL MANOOCHEHRI: Yes, so I
want to just say I want to

00:24:13.520 --> 00:24:17.940
take out the where clause for
my second query, sub query.

00:24:17.940 --> 00:24:19.650
And now I can basically
run the same thing.

00:24:19.650 --> 00:24:21.460
Now it's going to pick
all the states.

00:24:21.460 --> 00:24:24.070
FELIPE HOFFA: Yes, now we are
running a very big amount of

00:24:24.070 --> 00:24:24.890
combinations.

00:24:24.890 --> 00:24:27.740
We are combining the data series
from New York to every

00:24:27.740 --> 00:24:29.080
other data series we have.

00:24:29.080 --> 00:24:30.300
MICHAEL MANOOCHEHRI: Right,
so this is thousands and

00:24:30.300 --> 00:24:32.400
thousands of combinations
going through.

00:24:32.400 --> 00:24:33.820
Let's try this out.

00:24:33.820 --> 00:24:36.290
FELIPE HOFFA: Let's
sort them without.

00:24:36.290 --> 00:24:37.610
MICHAEL MANOOCHEHRI: So we're
going to sort by--

00:24:37.610 --> 00:24:40.250
should we sort by
departure state?

00:24:40.250 --> 00:24:42.470
FELIPE HOFFA: By the
correlation.

00:24:42.470 --> 00:24:43.370
MICHAEL MANOOCHEHRI:
Order by--

00:24:43.370 --> 00:24:45.520
FELIPE HOFFA: So we get the
top correlation first.

00:24:45.520 --> 00:24:45.920
MICHAEL MANOOCHEHRI: Got it.

00:24:45.920 --> 00:24:47.530
So I'm going to actually
name this.

00:24:47.530 --> 00:24:48.930
I'm going to name this c.

00:24:48.930 --> 00:24:50.436
And I'm going to order by--

00:24:50.436 --> 00:24:51.800
FELIPE HOFFA: You're going
to go by three.

00:24:51.800 --> 00:24:52.340
MICHAEL MANOOCHEHRI: By three.

00:24:52.340 --> 00:24:52.570
FELIPE HOFFA: Yes, that's
our shorthand.

00:24:52.570 --> 00:24:53.310
MICHAEL MANOOCHEHRI:
I love it.

00:24:53.310 --> 00:24:54.790
FELIPE HOFFA: And [INAUDIBLE]
descending.

00:24:54.790 --> 00:24:55.780
MICHAEL MANOOCHEHRI: And we'll
do it descending, good.

00:24:55.780 --> 00:24:58.710
So we'll know that the most
correlated first.

00:24:58.710 --> 00:24:59.840
OK, got it, great.

00:24:59.840 --> 00:25:01.280
So I'm ready to run
this query.

00:25:01.280 --> 00:25:03.520
Is this going to be too
many data points?

00:25:03.520 --> 00:25:04.680
Let's see.

00:25:04.680 --> 00:25:06.480
I think this is going
to be great.

00:25:06.480 --> 00:25:08.500
So it's taking just
a few seconds.

00:25:08.500 --> 00:25:10.350
So now this is doing a huge
number of combinations.

00:25:10.350 --> 00:25:13.520
And five seconds later, ah.

00:25:13.520 --> 00:25:15.260
FELIPE HOFFA: The most
correlated state to New York

00:25:15.260 --> 00:25:16.200
is New York.

00:25:16.200 --> 00:25:17.660
The correlation is one.

00:25:17.660 --> 00:25:19.070
MICHAEL MANOOCHEHRI: Good,
that's a good ground truth of

00:25:19.070 --> 00:25:20.460
what we've been doing.

00:25:20.460 --> 00:25:22.230
FELIPE HOFFA: It's very good to
know that, because it means

00:25:22.230 --> 00:25:24.310
that we are doing this right.

00:25:24.310 --> 00:25:25.000
MICHAEL MANOOCHEHRI:
This is fantastic.

00:25:25.000 --> 00:25:27.080
And you can see-- this is kind
of interesting-- of course,

00:25:27.080 --> 00:25:28.910
New Jersey, Massachusetts,
Pennsylvania--

00:25:28.910 --> 00:25:30.150
so states nearby.

00:25:30.150 --> 00:25:33.050
It looks like weather is a big
part of that obviously.

00:25:33.050 --> 00:25:34.480
We can kind of scroll through
the results--

00:25:34.480 --> 00:25:37.790
Rhode Island, New Hampshire,
Florida and Connecticut--

00:25:37.790 --> 00:25:39.860
things that are still on
the eastern seaboard.

00:25:39.860 --> 00:25:42.130
And then you start to get less
of a correlation as you move

00:25:42.130 --> 00:25:43.350
out west, of course.

00:25:43.350 --> 00:25:45.040
You've got Kentucky,
and you've got Ohio

00:25:45.040 --> 00:25:45.480
and things like that.

00:25:45.480 --> 00:25:47.320
FELIPE HOFFA: Show me the
least correlated state.

00:25:47.320 --> 00:25:49.020
MICHAEL MANOOCHEHRI: Yeah,
so I can just go to last.

00:25:49.020 --> 00:25:49.840
And guess what?

00:25:49.840 --> 00:25:50.315
It's Hawaii.

00:25:50.315 --> 00:25:50.600
FELIPE HOFFA: No way.

00:25:50.600 --> 00:25:52.590
And the second one is Alaska.

00:25:52.590 --> 00:25:53.710
FELIPE HOFFA: And it's
[INAUDIBLE] you can see.

00:25:53.710 --> 00:25:55.270
MICHAEL MANOOCHEHRI: There's
actually no correlation

00:25:55.270 --> 00:25:57.670
between departure delays,
at least mathematical

00:25:57.670 --> 00:25:58.170
correlation.

00:25:58.170 --> 00:25:59.920
FELIPE HOFFA: Yeah, whatever is
happening in New York, it

00:25:59.920 --> 00:26:03.010
really doesn't affect what's
happening in Hawaii and what's

00:26:03.010 --> 00:26:04.220
happening in Alaska.

00:26:04.220 --> 00:26:06.210
And something very interesting
to know.

00:26:06.210 --> 00:26:07.040
MICHAEL MANOOCHEHRI:
Makes sense.

00:26:07.040 --> 00:26:09.950
This is another reason why
if you find interesting

00:26:09.950 --> 00:26:11.490
correlations that you
didn't expect--

00:26:11.490 --> 00:26:12.860
so I kind of expect this.

00:26:12.860 --> 00:26:14.750
I kind of expect the weather to
be-- but what if you found

00:26:14.750 --> 00:26:17.400
a state, or an airport or
something where you didn't

00:26:17.400 --> 00:26:20.170
expect, like for example, New
York is correlated with--

00:26:20.170 --> 00:26:22.180
I don't know, like, Colorado.

00:26:22.180 --> 00:26:23.150
And I wouldn't expect that.

00:26:23.150 --> 00:26:25.410
So maybe that's pointing to
another problem in the system

00:26:25.410 --> 00:26:27.330
where who knows what the
problem could be?

00:26:27.330 --> 00:26:28.510
And I'm not saying there
is a correlation.

00:26:28.510 --> 00:26:29.130
We don't see that here.

00:26:29.130 --> 00:26:32.160
But let's say Colorado and
New York were correlated.

00:26:32.160 --> 00:26:33.550
Something else is going on.

00:26:33.550 --> 00:26:36.440
Maybe computer systems in those
two venues are broken.

00:26:36.440 --> 00:26:37.450
Who knows what it is?

00:26:37.450 --> 00:26:39.880
But you can use something like
this to find significant

00:26:39.880 --> 00:26:43.400
correlations that point you
toward a problem or something

00:26:43.400 --> 00:26:45.950
cool that you want to fix.

00:26:45.950 --> 00:26:48.085
FELIPE HOFFA: Or to look
at something else.

00:26:48.085 --> 00:26:50.280
Can you look into the
future with this?

00:26:50.280 --> 00:26:51.430
MICHAEL MANOOCHEHRI:
So can you predict?

00:26:51.430 --> 00:26:52.050
This is a good question?

00:26:52.050 --> 00:26:53.510
FELIPE HOFFA: Can we?

00:26:53.510 --> 00:26:54.000
MICHAEL MANOOCHEHRI:
I don't know.

00:26:54.000 --> 00:26:54.340
Can we?

00:26:54.340 --> 00:26:55.780
What should we do?

00:26:55.780 --> 00:26:59.880
FELIPE HOFFA: We can go to the
set correlations, but instead

00:26:59.880 --> 00:27:04.130
of correlating the same
day, we can correlate

00:27:04.130 --> 00:27:04.950
the previous day.

00:27:04.950 --> 00:27:06.830
MICHAEL MANOOCHEHRI: Yes
OK, so how we do

00:27:06.830 --> 00:27:07.640
that with Big Query?

00:27:07.640 --> 00:27:09.580
We have some time functions
we can use.

00:27:09.580 --> 00:27:11.210
FELIPE HOFFA: Exactly, we have
take, for example, the second

00:27:11.210 --> 00:27:13.440
sub [? select. ?]

00:27:13.440 --> 00:27:15.290
And look whatever happened
the day before.

00:27:15.290 --> 00:27:16.650
MICHAEL MANOOCHEHRI: OK,
so let me see if I

00:27:16.650 --> 00:27:17.300
can build this query.

00:27:17.300 --> 00:27:20.910
So we have a function called
Time Stamp, and that will turn

00:27:20.910 --> 00:27:23.650
a string into a time stamp,
which is a Big Query data type

00:27:23.650 --> 00:27:25.530
that we have native.

00:27:25.530 --> 00:27:29.600
And we have another
function called--

00:27:29.600 --> 00:27:31.710
I think it's called Date Add.

00:27:31.710 --> 00:27:35.840
And Date Add allows you to shift
time back and forth with

00:27:35.840 --> 00:27:37.070
these time stamps.

00:27:37.070 --> 00:27:41.890
So the Date Add function is one
in which I can say, take

00:27:41.890 --> 00:27:44.160
this date, this time stamp.

00:27:44.160 --> 00:27:47.960
Well, do want to do one day
differently, two days?

00:27:47.960 --> 00:27:49.160
FELIPE HOFFA: Let's
do one day.

00:27:49.160 --> 00:27:49.950
Let's take the day before.

00:27:49.950 --> 00:27:52.240
So add one day to it, yes.

00:27:52.240 --> 00:27:54.230
MICHAEL MANOOCHEHRI: And I want
to turn this back into a

00:27:54.230 --> 00:27:55.830
date string.

00:27:55.830 --> 00:27:57.760
So that's another function
I've called Date.

00:27:57.760 --> 00:28:00.120
So I'm basically just running
a bunch of functions on the

00:28:00.120 --> 00:28:01.680
string date that we have.

00:28:01.680 --> 00:28:02.780
I'm turning it into
a time stamp.

00:28:02.780 --> 00:28:05.750
I'm shifting it one day ahead,
and then I'm turning it back

00:28:05.750 --> 00:28:07.770
into a string so
we can compare.

00:28:07.770 --> 00:28:09.820
So that's a lot of things going
on through 70 million

00:28:09.820 --> 00:28:10.620
records, which is great.

00:28:10.620 --> 00:28:12.640
Let's run it.

00:28:12.640 --> 00:28:17.210
FELIPE HOFFA: Let's find the
best correlation with New York

00:28:17.210 --> 00:28:18.850
back from the previous day.

00:28:18.850 --> 00:28:20.880
What's the best predictor
for what will happen

00:28:20.880 --> 00:28:22.800
with New York tomorrow?

00:28:22.800 --> 00:28:23.920
MICHAEL MANOOCHEHRI: Let me
just make sure I did this

00:28:23.920 --> 00:28:30.480
right-- the date, the time
stamp here and here.

00:28:30.480 --> 00:28:30.980
I think that's right.

00:28:30.980 --> 00:28:34.540
OK, let's try it.

00:28:34.540 --> 00:28:35.820
FELIPE HOFFA: [INAUDIBLE]
queried.

00:28:35.820 --> 00:28:37.290
MICHAEL MANOOCHEHRI: So
I'm grouping by--

00:28:42.400 --> 00:28:45.050
FELIPE HOFFA: You need to add
date and comma there.

00:28:45.050 --> 00:28:47.410
MICHAEL MANOOCHEHRI:
Thank you.

00:28:47.410 --> 00:28:47.950
Thank you very much.

00:28:47.950 --> 00:28:48.800
I didn't add that.

00:28:48.800 --> 00:28:50.640
Let's run it again.

00:28:50.640 --> 00:28:53.400
I forgot my alias.

00:28:53.400 --> 00:28:55.680
So this is running over
70 million records.

00:28:55.680 --> 00:28:56.970
It's doing this incredible
join.

00:28:56.970 --> 00:28:58.240
It's changing the time stamp.

00:28:58.240 --> 00:28:59.850
It's doing counts.

00:28:59.850 --> 00:29:00.750
FELIPE HOFFA: Looking at
a lot of combinations.

00:29:00.750 --> 00:29:01.700
MICHAEL MANOOCHEHRI:
Combinatins, and it's running

00:29:01.700 --> 00:29:02.890
a correlation on top of this.

00:29:02.890 --> 00:29:04.750
So this is a lot of things
happening over a

00:29:04.750 --> 00:29:05.640
really large data set.

00:29:05.640 --> 00:29:06.730
It only took 15 seconds.

00:29:06.730 --> 00:29:08.180
It's pretty fantastic.

00:29:08.180 --> 00:29:10.210
FELIPE HOFFA: So look at
the top results here.

00:29:10.210 --> 00:29:11.860
MICHAEL MANOOCHEHRI:
Interesting, so what I'm

00:29:11.860 --> 00:29:13.740
looking at is now, this
is really interesting.

00:29:13.740 --> 00:29:17.350
So one day ahead, I see some not
super strong correlations,

00:29:17.350 --> 00:29:19.770
but kind of medium correlations
between states I

00:29:19.770 --> 00:29:21.130
wouldn't have expected--

00:29:21.130 --> 00:29:22.790
New York and Tennessee.

00:29:22.790 --> 00:29:24.820
FELIPE HOFFA: So this is telling
me that the best

00:29:24.820 --> 00:29:28.940
predictor of what is going to
happen in New York tomorrow--

00:29:28.940 --> 00:29:30.920
MICHAEL MANOOCHEHRI: In terms
of departure delays.

00:29:30.920 --> 00:29:33.450
If there's a departure delay
in New York, there's a

00:29:33.450 --> 00:29:36.640
moderate correlation between
what's happening in Tennessee.

00:29:36.640 --> 00:29:37.950
We don't know why.

00:29:37.950 --> 00:29:39.920
We have no idea why, but there's
some correlation

00:29:39.920 --> 00:29:42.560
that's much greater than some
of the other states.

00:29:42.560 --> 00:29:45.140
I see Virginia and Missouri.

00:29:45.140 --> 00:29:47.970
And this could be any number of
things, like one hypothesis

00:29:47.970 --> 00:29:50.300
could be that the plane
is late in New York.

00:29:50.300 --> 00:29:51.810
And it flies to these other
airports, then it's

00:29:51.810 --> 00:29:52.760
late the next day.

00:29:52.760 --> 00:29:54.270
Because maybe the plane
has screwed up

00:29:54.270 --> 00:29:56.580
the schedule or whatever.

00:29:56.580 --> 00:29:58.140
FELIPE HOFFA: Or the weather
patterns have moved from one

00:29:58.140 --> 00:29:59.110
place to another.

00:29:59.110 --> 00:29:59.900
MICHAEL MANOOCHEHRI: Right,
weather patterns

00:29:59.900 --> 00:30:00.410
and things like that.

00:30:00.410 --> 00:30:02.410
I would never have guessed
Tennessee is the top one in

00:30:02.410 --> 00:30:03.816
this example.

00:30:03.816 --> 00:30:04.170
FELIPE HOFFA: Yeah, that's
interesting.

00:30:04.170 --> 00:30:06.030
MICHAEL MANOOCHEHRI:
That's fantastic.

00:30:06.030 --> 00:30:07.250
Is there another thing
we can do?

00:30:07.250 --> 00:30:09.860
Can we do things by quarter?

00:30:09.860 --> 00:30:11.300
Is there some way we can look
at different quarters?

00:30:11.300 --> 00:30:13.470
FELIPE HOFFA: Exactly, we can
improve the rate of maybe some

00:30:13.470 --> 00:30:16.620
predictor is very good during
the summer, but during the

00:30:16.620 --> 00:30:18.520
winter it makes no sense.

00:30:18.520 --> 00:30:21.060
So let's look things at
things by quarter.

00:30:21.060 --> 00:30:22.730
MICHAEL MANOOCHEHRI: OK,
now how do we do that?

00:30:22.730 --> 00:30:25.460
FELIPE HOFFA: The correlation
goes through New York State.

00:30:25.460 --> 00:30:27.905
What's the best predictor,
depending if it's now summer,

00:30:27.905 --> 00:30:29.220
it's now spring.

00:30:29.220 --> 00:30:31.910
So we need to add a new field.

00:30:31.910 --> 00:30:33.160
Let's add quarters.

00:30:33.160 --> 00:30:34.790
MICHAEL MANOOCHEHRI: So we
have a function called

00:30:34.790 --> 00:30:36.870
Quarter, and that operates
on timestamps.

00:30:36.870 --> 00:30:37.480
Is that right?

00:30:37.480 --> 00:30:39.500
So I need to do the same thing,
convert my date to a

00:30:39.500 --> 00:30:42.540
time stamp and then use
the Quarter function.

00:30:42.540 --> 00:30:43.510
So that's an easy one.

00:30:43.510 --> 00:30:48.267
So I'll use quarter, quarter,
and then time

00:30:48.267 --> 00:30:51.310
stamp, and then date.

00:30:51.310 --> 00:30:54.290
And I'll call it q.

00:30:54.290 --> 00:30:57.710
And I'll do the same thing
on both queries.

00:31:00.810 --> 00:31:02.630
And then I have to change a few
things, because I'm adding

00:31:02.630 --> 00:31:03.060
a parameter.

00:31:03.060 --> 00:31:05.090
Do I add it here?

00:31:05.090 --> 00:31:07.200
Should I just pick one quarter,
because they're being

00:31:07.200 --> 00:31:08.950
joined on quarter?

00:31:08.950 --> 00:31:10.250
FELIPE HOFFA: Yes.

00:31:10.250 --> 00:31:13.350
MICHAEL MANOOCHEHRI:
So I say a, q.

00:31:13.350 --> 00:31:15.310
FELIPE HOFFA: And you need to
join on the quarter too now.

00:31:15.310 --> 00:31:20.070
MICHAEL MANOOCHEHRI: OK, so I
join that, and aq equals b bq.

00:31:20.070 --> 00:31:21.755
FELIPE HOFFA: Yes, they
will be equal.

00:31:21.755 --> 00:31:23.020
But it's better if we--

00:31:23.020 --> 00:31:23.860
MICHAEL MANOOCHEHRI: Make sure
that they're joined.

00:31:23.860 --> 00:31:26.050
OK, so I'm just going to report
one quarter there.

00:31:26.050 --> 00:31:27.190
So this should run.

00:31:27.190 --> 00:31:28.850
OK, so let's run this.

00:31:28.850 --> 00:31:31.330
FELIPE HOFFA: Yes, we need to
reroute things because we have

00:31:31.330 --> 00:31:34.849
a new field now, so one,
two and three.

00:31:34.849 --> 00:31:36.270
MICHAEL MANOOCHEHRI: Got it.

00:31:36.270 --> 00:31:37.495
FELIPE HOFFA: And we author
by the first one.

00:31:37.495 --> 00:31:38.570
MICHAEL MANOOCHEHRI: Excellent,
so this just makes

00:31:38.570 --> 00:31:39.830
it really handy to
change things.

00:31:43.950 --> 00:31:46.370
FELIPE HOFFA: Yes, now under sub
queries you also need to

00:31:46.370 --> 00:31:49.930
add this [? set ?], because
they have a new [? set. ?]

00:31:49.930 --> 00:31:52.440
You rule by one, two,
three for both.

00:31:52.440 --> 00:31:53.690
MICHAEL MANOOCHEHRI:
Excellent.

00:31:55.660 --> 00:31:57.880
I love the shorthand for this.

00:31:57.880 --> 00:31:59.480
Great, so we're going
to run this again.

00:31:59.480 --> 00:32:02.380
Let's do it, see
how this goes.

00:32:02.380 --> 00:32:03.890
FELIPE HOFFA: Then
we're missing--

00:32:03.890 --> 00:32:06.626
MICHAEL MANOOCHEHRI: I believe
I don't have a space here.

00:32:06.626 --> 00:32:07.220
FELIPE HOFFA: [INAUDIBLE]

00:32:07.220 --> 00:32:08.470
be great.

00:32:10.840 --> 00:32:13.420
I'm having to column
[? self ?] three.

00:32:16.980 --> 00:32:17.450
Parenthesis.

00:32:17.450 --> 00:32:19.250
MICHAEL MANOOCHEHRI:
Thank you.

00:32:19.250 --> 00:32:20.500
FELIPE HOFFA: Thank
you [INAUDIBLE].

00:32:22.970 --> 00:32:24.190
MICHAEL MANOOCHEHRI: So
it's running again.

00:32:24.190 --> 00:32:25.960
FELIPE HOFFA: Running again,
this is a larger query.

00:32:25.960 --> 00:32:29.010
Now we are segmenting
by departure.

00:32:29.010 --> 00:32:30.150
We have the predictors.

00:32:30.150 --> 00:32:33.486
We know that Tennessee is the
best predictor of New York.

00:32:33.486 --> 00:32:35.220
[? But ?]

00:32:35.220 --> 00:32:38.010
will that predictor work at
any time during the year.

00:32:38.010 --> 00:32:38.820
MICHAEL MANOOCHEHRI:
Interesting, so I

00:32:38.820 --> 00:32:41.410
see that the quarter--

00:32:41.410 --> 00:32:42.970
that was the first quarter.

00:32:42.970 --> 00:32:44.210
That's winter.

00:32:44.210 --> 00:32:46.480
And so we can actually look at
some of these predictors, and

00:32:46.480 --> 00:32:48.600
we can see which ones
are the quarters?

00:32:48.600 --> 00:32:50.020
So I'm just going to
scroll through.

00:32:50.020 --> 00:32:51.600
It's winter, winter, winter.

00:32:51.600 --> 00:32:53.560
All of these kind of
correlations happening-- the

00:32:53.560 --> 00:32:55.440
only one that's not the fourth
quarter of the year is the

00:32:55.440 --> 00:32:56.420
first quarter--

00:32:56.420 --> 00:32:57.970
also winter.

00:32:57.970 --> 00:33:02.050
FELIPE HOFFA: First quarter,
it's spring.

00:33:02.050 --> 00:33:02.510
[? That's ?] interesting.

00:33:02.510 --> 00:33:03.340
MICHAEL MANOOCHEHRI: The
first quarter is

00:33:03.340 --> 00:33:04.980
January, February, March.

00:33:04.980 --> 00:33:05.670
It's pretty cold.

00:33:05.670 --> 00:33:07.260
So I mean, this makes
a lot of sense.

00:33:07.260 --> 00:33:10.280
And we don't see a lot of
anything in spring or summer

00:33:10.280 --> 00:33:12.400
until maybe the 20th one,
and that's already

00:33:12.400 --> 00:33:13.980
getting into the week.

00:33:13.980 --> 00:33:15.030
FELIPE HOFFA: Exactly,
[INAUDIBLE]

00:33:15.030 --> 00:33:20.230
the first time we have, if it
summer and you want to know

00:33:20.230 --> 00:33:23.810
how late flights will be in
New York the next day.

00:33:23.810 --> 00:33:26.820
Don't look at Tennessee.

00:33:26.820 --> 00:33:28.710
Look at Ohio.

00:33:28.710 --> 00:33:31.100
MICHAEL MANOOCHEHRI: Exactly,
exactly, so you look at some

00:33:31.100 --> 00:33:32.370
other states for that,
for when it comes

00:33:32.370 --> 00:33:33.240
to the third quarter.

00:33:33.240 --> 00:33:35.200
That is fantastic.

00:33:35.200 --> 00:33:35.940
OK, this is great.

00:33:35.940 --> 00:33:37.260
And I just want to take a
quick look at the least

00:33:37.260 --> 00:33:39.580
correlated, which
is also in this.

00:33:39.580 --> 00:33:42.430
And we have data for
some of these.

00:33:42.430 --> 00:33:44.990
But of course, you get Hawaii
in the first quarter, Hawaii

00:33:44.990 --> 00:33:45.990
in the second quarter.

00:33:45.990 --> 00:33:48.380
So if you have a departure delay
in New York, there's no

00:33:48.380 --> 00:33:50.310
way that it has any correlation
to departure

00:33:50.310 --> 00:33:52.630
delays in Hawaii in any quarter,
it looks like.

00:33:52.630 --> 00:33:54.980
Because I can scroll through
here and see.

00:33:54.980 --> 00:33:56.340
So this is actually fantastic.

00:33:56.340 --> 00:33:57.890
So we need to wrap
up pretty soon.

00:33:57.890 --> 00:34:00.100
So we've gone through this.

00:34:00.100 --> 00:34:02.200
This is really amazing, because
you can apply this to

00:34:02.200 --> 00:34:03.030
any number of things.

00:34:03.030 --> 00:34:04.630
And this is just a random
data set that I

00:34:04.630 --> 00:34:05.810
like, which is flights.

00:34:05.810 --> 00:34:07.210
But you can look
at retail data.

00:34:07.210 --> 00:34:08.889
You could look at
your log data.

00:34:08.889 --> 00:34:12.040
You could find anomalies or
stuff that you didn't expect

00:34:12.040 --> 00:34:14.250
using correlation about two
variables that are not

00:34:14.250 --> 00:34:15.760
connected or connected.

00:34:15.760 --> 00:34:18.280
FELIPE HOFFA: On yesterday's
blog post, we talked about how

00:34:18.280 --> 00:34:19.900
to find anomalies in data.

00:34:19.900 --> 00:34:24.739
What is going weird on your
rooms using the data sensing

00:34:24.739 --> 00:34:27.170
lab, we've started looking at
hey, things are behaving

00:34:27.170 --> 00:34:31.181
pretty normal, or things
are behaving weird.

00:34:31.181 --> 00:34:35.350
And with correlation, you can
get a quick alert of things

00:34:35.350 --> 00:34:37.900
going not as expected.

00:34:37.900 --> 00:34:39.940
MICHAEL MANOOCHEHRI: Sure, so
correlation doesn't actually

00:34:39.940 --> 00:34:42.699
tell you exactly what's going
on, but at least it points you

00:34:42.699 --> 00:34:43.900
toward what could
be happening.

00:34:43.900 --> 00:34:46.600
Like, a statistically
significant something is

00:34:46.600 --> 00:34:49.100
happening with numerical
data, and what is it?

00:34:49.100 --> 00:34:51.260
And you can use this technique
to find all those things.

00:34:51.260 --> 00:34:54.100
FELIPE HOFFA: Today we were
looking at how to predict how

00:34:54.100 --> 00:34:58.740
your flight time will be, and
maybe we could use it for more

00:34:58.740 --> 00:35:02.040
things, like how about
segmenting your customers?

00:35:02.040 --> 00:35:02.540
MICHAEL MANOOCHEHRI: Exactly.

00:35:02.540 --> 00:35:03.720
FELIPE HOFFA: You have millions
of customers.

00:35:03.720 --> 00:35:06.840
Each one behaves in
different ways.

00:35:06.840 --> 00:35:08.960
Can we segment that?

00:35:08.960 --> 00:35:09.445
MICHAEL MANOOCHEHRI:
That's fantastic.

00:35:09.445 --> 00:35:11.150
You're going to find segments
that are correlations that you

00:35:11.150 --> 00:35:12.540
probably didn't know about.

00:35:12.540 --> 00:35:13.480
And it's up to you to explore.

00:35:13.480 --> 00:35:14.820
And I love what you can
do with Big Queries.

00:35:14.820 --> 00:35:16.990
You could explore these data
sets very quickly.

00:35:16.990 --> 00:35:22.600
FELIPE HOFFA: Sadly, we won't
have time for that today, but

00:35:22.600 --> 00:35:25.790
look forward for a future blog
post where we're looking at

00:35:25.790 --> 00:35:29.540
that kind of correlations and
look forward for a lot of news

00:35:29.540 --> 00:35:30.840
from the Big Query team.

00:35:30.840 --> 00:35:31.630
MICHAEL MANOOCHEHRI: That
sounds fantastic.

00:35:31.630 --> 00:35:33.460
And just before we wrap up,
where can people read your

00:35:33.460 --> 00:35:34.500
blog posts, Felipe?

00:35:34.500 --> 00:35:36.090
FELIPE HOFFA: So remember, we
have the Cloud [INAUDIBLE]

00:35:36.090 --> 00:35:37.010
blog.

00:35:37.010 --> 00:35:39.090
That's where we posted
yesterday.

00:35:39.090 --> 00:35:41.160
Remember to follow
us on Google+.

00:35:41.160 --> 00:35:42.490
We are on the--

00:35:42.490 --> 00:35:43.310
what's the name of--

00:35:43.310 --> 00:35:44.980
MICHAEL MANOOCHEHRI: The Google
Cloud Platform page.

00:35:44.980 --> 00:35:47.210
FELIPE HOFFA: Exactly,
follow us there.

00:35:47.210 --> 00:35:47.880
Find us.

00:35:47.880 --> 00:35:50.150
We are on Google+ too--

00:35:50.150 --> 00:35:52.990
Michael Manoochehri
and Felipe Hoffa.

00:35:52.990 --> 00:35:55.325
If you have technical questions,
leave all of them

00:35:55.325 --> 00:35:56.560
in Stack Overflow.

00:35:56.560 --> 00:35:59.830
We, the team, everyone here,
really loves Stack Overflow,

00:35:59.830 --> 00:36:03.320
and that's what we like
answering everything.

00:36:03.320 --> 00:36:03.960
MICHAEL MANOOCHEHRI:
Looks great.

00:36:03.960 --> 00:36:06.400
And what I want to know is if
people are using Core, please

00:36:06.400 --> 00:36:07.860
please let us know.

00:36:07.860 --> 00:36:10.870
Post to our Google+ page and let
us know what you're doing.

00:36:10.870 --> 00:36:12.780
And we would love to see what
you're doing with this.

00:36:12.780 --> 00:36:14.360
Because I think it's very
powerful, and it's something

00:36:14.360 --> 00:36:17.010
that you don't see in the
other technology.

00:36:17.010 --> 00:36:19.530
FELIPE HOFFA: Running
correlations, multivariate

00:36:19.530 --> 00:36:21.090
analysis, [INAUDIBLE]

00:36:21.090 --> 00:36:22.500
decisions, we are
happy to see.

00:36:22.500 --> 00:36:25.110
Yesterday, we [? will ?]
go to this.

00:36:25.110 --> 00:36:30.270
This is going in a really
massive space.

00:36:30.270 --> 00:36:32.270
So hopefully, we'll get
to play with this.

00:36:32.270 --> 00:36:35.755
Hopefully, you will get to
share your space with us.

00:36:35.755 --> 00:36:37.700
And I expect to see you soon.

00:36:37.700 --> 00:36:38.470
MICHAEL MANOOCHEHRI: Thank
you very much.

00:36:38.470 --> 00:36:39.250
I'm Michael Manoochehri.

00:36:39.250 --> 00:36:39.720
FELIPE HOFFA: Thank
you, Michael.

00:36:39.720 --> 00:36:40.970
I'm Felipe Hoffa.

