WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:03.120
So the first thing we're going to do to implement our hash

00:00:03.120 --> 00:00:05.550
table index, is we have to figure out how to create an

00:00:05.550 --> 00:00:10.200
empty hash table. With a simple index, this is really easy. To

00:00:10.200 --> 00:00:13.410
make an empty index, we just have an empty list, there are

00:00:13.410 --> 00:00:17.630
no elements. So we can initialize the index by just initializing

00:00:17.630 --> 00:00:20.220
it to an empty list. And as we added elements to the

00:00:20.220 --> 00:00:23.460
list, we would just add them to the empty list. For the

00:00:23.460 --> 00:00:25.820
hash table that's not going to work. We need to do something

00:00:25.820 --> 00:00:29.010
more complicated to start with an empty hash table. And the reason

00:00:29.010 --> 00:00:32.220
for that is we need to start with all the buckets. So

00:00:32.220 --> 00:00:35.660
our initial value, for the plain index, was just an empty list.

00:00:35.660 --> 00:00:38.800
Our initial value for a hash table needs to be a set

00:00:38.800 --> 00:00:43.590
of empty buckets. And the reason for that is, we want to be

00:00:43.590 --> 00:00:45.580
able to do lookups right away, and we want to be able

00:00:45.580 --> 00:00:47.880
to add elements to our hash table. If we just started with

00:00:47.880 --> 00:00:50.830
an empty list, well then, the first time we look up a keyword,

00:00:50.830 --> 00:00:54.160
it would say, that keyword belongs in bucket 27. We don't

00:00:54.160 --> 00:00:56.530
have a bucket for that. We would need to figure out how

00:00:56.530 --> 00:00:58.650
to create that bucket. It makes a lot more sense to

00:00:58.650 --> 00:01:03.480
start by making our empty hashtable be a, list of buckets. Where,

00:01:03.480 --> 00:01:06.430
initially, all the buckets are empty, they're ready, waiting for keywords

00:01:06.430 --> 00:01:08.780
to be placed in them. So what we need is code to

00:01:08.780 --> 00:01:12.230
create that empty hash table. So, I think you know enough to

00:01:12.230 --> 00:01:16.000
define make_hashtable yourself, so we'll make that a quiz. So your goal

00:01:16.000 --> 00:01:19.510
is to define a procedure, we'll call it make_hashtable,

00:01:19.510 --> 00:01:21.970
that takes as input a number, giving the number of

00:01:21.970 --> 00:01:24.240
buckets in the hash table. And it outputs an

00:01:24.240 --> 00:01:27.400
empty hash table that has that number of empty buckets.

