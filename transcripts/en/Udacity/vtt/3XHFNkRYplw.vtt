WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
One way to think about this is to remember the rules for function calls.

00:00:04.000 --> 00:00:08.000
You take the function body and you evaluate it in the new argument.

00:00:08.000 --> 00:00:13.000
So the body of sayhello is print greeting + " " person,

00:00:13.000 --> 00:00:16.000
and we already know from seeing it in the interpreter what it's going to print out.

00:00:16.000 --> 00:00:21.000
It's going to print out "hello from u.p." "gracie".

00:00:21.000 --> 00:00:25.000
Currently I don't see gracie anywhere in this environment.

00:00:25.000 --> 00:00:28.000
That suggests that we're definitely going to need to add it.

00:00:28.000 --> 00:00:32.000
Another way to get to that is to remember the other rules for constructing environments.

00:00:32.000 --> 00:00:37.000
We definitely want to make space for the formal parameters, person,

00:00:37.000 --> 00:00:40.000
and put in the value of the actual argument, "gracie".

00:00:40.000 --> 00:00:43.000
So now when we go to evaluate greeting, we don't see it here

00:00:43.000 --> 00:00:46.000
but we'll go one up and get "hello from u.p."

00:00:46.000 --> 00:00:49.000
and we'll try to find person. We see it right here. We get "gracie".

00:00:49.000 --> 00:00:52.000
We'll compose them together and print out exactly the same behavior

00:00:52.000 --> 00:00:55.000
we saw on the interpreter. This quiz was pretty tricky.

00:00:55.000 --> 00:01:00.000
This notion of nested procedures does not come up very often in Python.

00:01:00.000 --> 00:01:05.000
But if we want a complete interpreter, one that understands all the nuances of a language,

00:01:05.000 --> 00:01:07.000
then we have to handle this.

00:01:07.000 --> 00:01:11.000
It's kind of like the subjunctive in a lot of romance languages.

00:01:11.000 --> 09:59:59.000
It doesn't come up very often in English; may come up more often than you'd think in other places.

