WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
We have created such distributions for several systems--

00:00:06.000 --> 00:00:14.000
at Microsoft, at Google, at SAP, and on many open source programs.

00:00:14.000 --> 00:00:19.000
What we always found was the so-called Pareto principle--

00:00:19.000 --> 00:00:26.000
that is, 20% of all modules contain 80% of the bugs.

00:00:26.000 --> 00:00:29.000
The numbers vary from project to project,

00:00:29.000 --> 00:00:36.000
but what we always found was there was a relatively small number of modules

00:00:36.000 --> 00:00:42.000
that would contain lots and lots of issues.

00:00:42.000 --> 00:00:48.000
Initially, we were just excited of being able to create such distributions more or less

00:00:48.000 --> 00:00:54.000
at the touch of a button, but as you look at these distributions

00:00:54.000 --> 00:00:59.000
you begin to wonder where do these bugs actually come from?

00:00:59.000 --> 00:01:04.000
Do these modules that actually are specifically bug prone

00:01:04.000 --> 00:01:07.000
have something in common?

00:01:07.000 --> 00:01:15.000
If they do have something in common, could we use this very feature to make predictions?

00:01:15.000 --> 00:01:21.000
We dug a bit deeper and checked a number of interesting features.

00:01:21.000 --> 00:01:27.000
The first question we ask is does the bug density correlate with the experience

00:01:27.000 --> 00:01:30.000
of the developers that wrote the programs.

00:01:30.000 --> 00:01:36.000
That is, possibly more experienced developers make fewer mistakes.

00:01:36.000 --> 00:01:43.000
For these questions I'm going to ask you for a guess on your side.

00:01:43.000 --> 00:01:46.000
These will not be rated.

00:01:46.000 --> 00:01:48.000
So, what do you think? Does bug density correlate with developer experience, yes or no?

