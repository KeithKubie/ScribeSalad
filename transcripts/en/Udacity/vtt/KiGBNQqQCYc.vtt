WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:03.440
Let's consider a more concrete case.

00:00:03.440 --> 00:00:06.990
Consider some of the operating
systems we currently have or

00:00:06.990 --> 00:00:10.180
had in case of MS-DOS and Vanguard.

00:00:10.180 --> 00:00:13.010
So what exactly I said
in the OS portion and

00:00:13.010 --> 00:00:17.710
the user portion of the address space,
how does it work in these systems?

00:00:17.710 --> 00:00:22.268
So for example, if you look at the
address space layout for 32-bit Linux,

00:00:22.268 --> 00:00:26.140
lower three gigabytes is where
the user code and data is going to go.

00:00:26.140 --> 00:00:30.950
So address space is going to be
four gigabytes long, with 32 bits.

00:00:30.950 --> 00:00:35.282
So we're going to separate that and
say one gigabyte for the kernel and

00:00:35.282 --> 00:00:37.540
three gigabytes for the user.

00:00:37.540 --> 00:00:42.230
The lower three gigabytes,
that's where the user code/data is.

00:00:42.230 --> 00:00:45.090
The top one gigabyte is
where the kernel goes, and

00:00:45.090 --> 00:00:47.420
there's this fence between these two.

00:00:47.420 --> 00:00:51.830
The kernel portion can only be accessed
when you are in the operating system or

00:00:51.830 --> 00:00:52.850
in the kernel.

00:00:52.850 --> 00:00:57.230
Another thing to keep in mind is that
these portions of address space that we

00:00:57.230 --> 00:01:01.930
have, access to those address spaces
also is related to what execution mode

00:01:01.930 --> 00:01:06.804
or privilege ring you are in, so
x86 has the zero through three.

00:01:06.804 --> 00:01:11.357
For you to be able to access the kernel
portion, you have to be entering zero or

00:01:11.357 --> 00:01:17.100
in system mode if you are executing
user code in ring three, you can't

00:01:17.100 --> 00:01:22.300
access this portion of the address space
that we have, which is the one gigabyte.

00:01:22.300 --> 00:01:24.828
So this connects back the hardware
support that we have and

00:01:24.828 --> 00:01:27.510
the address space like we
have been talking about.

00:01:27.510 --> 00:01:31.630
So these other operating systems,
depending on what particular version,

00:01:31.630 --> 00:01:34.890
may have some differences, but
typically this is how it works.

00:01:34.890 --> 00:01:37.184
The operating system is common, so

00:01:37.184 --> 00:01:41.923
this kernel one gigabyte has the same
data and code for every process, but

00:01:41.923 --> 00:01:45.200
the three gigabyte is for
process, obviously.

00:01:45.200 --> 00:01:48.410
This could be different for
different processes.

00:01:48.410 --> 00:01:52.330
And we said, if you're executing this
part of this three gigabyte, then you

00:01:52.330 --> 00:01:56.790
are in ring three, if you're executing
in the kernel, you are in ring zero.

00:01:56.790 --> 00:02:01.805
This how operating systems manage access
to various part of the address space.

00:02:01.805 --> 00:02:04.605
So modern operating
systems actually separate

00:02:04.605 --> 00:02:06.745
the trusted computing
base from untrusted.

00:02:06.745 --> 00:02:08.044
It wasn't always like that.

00:02:08.044 --> 00:02:15.120
If you look at MS-DOS, and actually
now it's in a museum, Microsoft even,

00:02:15.120 --> 00:02:19.430
the first version they made before is
called Available, actually, written in

00:02:19.430 --> 00:02:23.420
assembly language, it didn't have
the separation that we're talking about.

00:02:23.420 --> 00:02:27.950
There's no sort of fence or
wall between the user and

00:02:27.950 --> 00:02:32.770
system code, so any process could
actually alter the operating system,

00:02:32.770 --> 00:02:35.790
because you can freely march
down into the OS space.

00:02:35.790 --> 00:02:40.317
And if you happen to be virus, you
obviously could hook anything, including

00:02:40.317 --> 00:02:44.860
here, DOS interrupt handlers actually
are always in the operating system.

00:02:44.860 --> 00:02:48.743
We are talking about dealing
with hardware device,

00:02:48.743 --> 00:02:52.680
and direct access to hardware it
through privilege instructions,

00:02:52.680 --> 00:02:55.710
not from user level, those
instructions have to be privileged.

00:02:55.710 --> 00:02:59.780
Though, here you could actually change
the kernel, change the interrupt

00:02:59.780 --> 00:03:03.960
handlers, there was no protection
that modern operating systems provide

00:03:03.960 --> 00:03:07.490
through this isolation of the operating
system from application code

