WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.780
Okay. Let's look at more heavy duty stuff, Appstats.

00:00:03.780 --> 00:00:05.970
Appstats is a function that allows you to get

00:00:05.970 --> 00:00:09.540
extensive information on how API functions are called by

00:00:09.540 --> 00:00:13.260
your applications. This is used to profile your application. You

00:00:13.260 --> 00:00:15.760
do this by inspecting the API calls made by

00:00:15.760 --> 00:00:19.100
your application to, for example, Datastore in Memcache. And

00:00:19.100 --> 00:00:21.460
then you could use the information to optimize your

00:00:21.460 --> 00:00:25.660
application. For example, you can find opportunities to minimize latency

00:00:25.660 --> 00:00:28.780
by caching data. It can also be used to reduce

00:00:28.780 --> 00:00:32.520
or bundle API calls. Appstats can also help you reduce

00:00:32.520 --> 00:00:34.660
cost if you go beyond the free tier, as it

00:00:34.660 --> 00:00:38.920
can display the cost associated with different API calls. So let's

00:00:38.920 --> 00:00:41.750
see how you can use Appstats. But first of all,

00:00:41.750 --> 00:00:44.900
you can enable the eight I tracing through configuration. So

00:00:44.900 --> 00:00:47.410
there is no need to make any modifications to your

00:00:47.410 --> 00:00:50.860
application. And when you have run your application, it is possible

00:00:50.860 --> 00:00:54.440
to access the profiling information using a URL. You can

00:00:54.440 --> 00:00:56.320
see how to do both of those things in the

00:00:56.320 --> 00:00:59.770
instructor notes. So let's look at the information that apps

00:00:59.770 --> 00:01:02.450
will provide you with. First of all, Appstats has a

00:01:02.450 --> 00:01:05.090
dashboard screen where you will see all the different data

00:01:05.090 --> 00:01:08.910
available. So, let's look at each section separately. The RPC

00:01:08.910 --> 00:01:12.990
stats table shows statistics information for each remote procedure call

00:01:12.990 --> 00:01:15.990
made by your application. So, here you can see, for example,

00:01:15.990 --> 00:01:18.780
Datastore get operations. You can see the number

00:01:18.780 --> 00:01:21.650
of calls, the cost for the calls. And the

00:01:21.650 --> 00:01:24.881
percentage cost for the calls. This page also displays

00:01:24.881 --> 00:01:29.260
other calls, for example Memcache Get or Datastore RunQuery.

00:01:29.260 --> 00:01:33.030
That's the RPC stats table, very useful information. The

00:01:33.030 --> 00:01:35.930
path stats table shows similar information but it is

00:01:35.930 --> 00:01:38.824
grouped from the perspective of your code instead. So

00:01:38.824 --> 00:01:41.243
here we can see that our query conference makes

00:01:41.243 --> 00:01:45.110
calls to Datastore Get, and Datastore RunQuery. The request

00:01:45.110 --> 00:01:48.420
history table shows information about a specific request that

00:01:48.420 --> 00:01:51.840
was made. Here, for example, query conference was executed

00:01:51.840 --> 00:01:53.840
at this time and made call to these API

00:01:53.840 --> 00:01:57.150
functions. This table also has statistics for register for

00:01:57.150 --> 00:02:01.051
conference, and get profile. The RPC timeline graph shows

00:02:01.051 --> 00:02:03.647
when specific RPC calls were made and how long

00:02:03.647 --> 00:02:06.372
the request took to process. So here you can see

00:02:06.372 --> 00:02:09.663
that get OAuth_user took six milliseconds, followed by

00:02:09.663 --> 00:02:13.730
Datastore begin transaction. Four milliseconds, then two GET

00:02:13.730 --> 00:02:17.730
operations towards Datastore, followed by a PUT operation.

00:02:17.730 --> 00:02:20.840
And then finally, the transaction commit. So this graph

00:02:20.840 --> 00:02:22.980
shows you the sequence of API calls, and

00:02:22.980 --> 00:02:25.880
how long each took to execute. And of course,

00:02:25.880 --> 00:02:28.890
you can also see your complete request latency.

00:02:28.890 --> 00:02:31.650
That's appstats, a great way to understand your application

00:02:31.650 --> 00:02:32.920
behavior and optimize it.

