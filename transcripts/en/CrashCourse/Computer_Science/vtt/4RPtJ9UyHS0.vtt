WEBVTT
Kind: captions
Language: en

00:00:03.120 --> 00:00:05.620
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.629 --> 00:00:09.250
We’ve talked a lot about inputs and outputs
in this series, but they’ve mostly been

00:00:09.250 --> 00:00:13.679
between different parts of a computer – like
outputting data from RAM or inputting instructions

00:00:13.679 --> 00:00:14.919
to a CPU.

00:00:14.919 --> 00:00:18.160
We haven’t discussed much about inputs coming
from humans.

00:00:18.160 --> 00:00:22.170
We also haven’t learned how people get information
out of a computer, other than by printing

00:00:22.170 --> 00:00:23.320
or punching it onto paper.

00:00:23.320 --> 00:00:27.231
Of course, there’s a wide variety of input
and output devices that allow us users to

00:00:27.231 --> 00:00:28.920
communicate with computers.

00:00:28.920 --> 00:00:32.029
They provide an interface between human and
computer.

00:00:32.029 --> 00:00:35.989
And today, there’s a whole field of study
called Human-Computer Interaction.

00:00:35.989 --> 00:00:39.769
These interfaces are so fundamental to the
user experience that they’re the focus of

00:00:39.769 --> 00:00:40.900
the next few episodes.

00:00:40.900 --> 00:00:50.120
INTRO

00:00:50.120 --> 00:00:54.092
As we discussed at the very beginning of the
series, the earliest mechanical and electro-mechanical

00:00:54.092 --> 00:00:58.899
computing devices used physical controls for
inputs and outputs, like gears, knobs and

00:00:58.900 --> 00:01:01.940
switches, and this was pretty much the extent
of the human interface.

00:01:01.940 --> 00:01:05.860
Even the first electronic computers, like
Colossus and ENIAC, were configured using

00:01:05.860 --> 00:01:08.820
huge panels of mechanical controls and patch
wires.

00:01:08.820 --> 00:01:13.030
It could take weeks to enter in a single program,
let alone run it, and to get data out after

00:01:13.030 --> 00:01:16.250
running a program, results were most often
printed to paper.

00:01:16.250 --> 00:01:20.600
Paper printers were so useful that even Babbage
designed one for his Difference Engine, and

00:01:20.600 --> 00:01:22.360
that was in the 1820s!

00:01:22.360 --> 00:01:27.100
However, by the 1950s, mechanical inputs were
rendered obsolete by programs and data stored

00:01:27.110 --> 00:01:30.520
entirely on mediums like punch cards and magnetic
tape.

00:01:30.520 --> 00:01:34.310
Paper printouts were still used for the final
output, and huge banks of indicator lights

00:01:34.310 --> 00:01:38.460
were developed to provide real time feedback
while the program was in progress.

00:01:38.460 --> 00:01:42.220
It’s important to recognize that computer
input of this era was designed to be as simple

00:01:42.220 --> 00:01:44.610
and robust as possible for computers.

00:01:44.610 --> 00:01:47.850
Ease and understanding for users was a secondary
concern.

00:01:47.850 --> 00:01:51.870
Punch tape is a great example – this was
explicitly designed to be easy for computers

00:01:51.870 --> 00:01:52.870
to read.

00:01:52.870 --> 00:01:56.560
The continuous nature of tape made it easy
to handle mechanically, and the holes could

00:01:56.560 --> 00:02:01.180
be reliably detected with a mechanical or
optical system, which encoded instructions

00:02:01.180 --> 00:02:02.180
and data.

00:02:02.180 --> 00:02:05.520
But of course, humans don’t think in terms
of little punched holes on strips of paper.

00:02:05.520 --> 00:02:07.690
So, the burden was on programmers.

00:02:07.690 --> 00:02:11.340
They had to spend the extra time and effort
to convert their ideas and programs into a

00:02:11.340 --> 00:02:15.540
language and a format that was easy for computers
of the era to understand – often with the

00:02:15.540 --> 00:02:17.909
help of additional staff and auxiliary devices.

00:02:17.909 --> 00:02:23.159
It’s also important to note that early computers,
basically pre-1950, had an extremely simple

00:02:23.159 --> 00:02:24.909
notion of human input.

00:02:24.909 --> 00:02:29.879
Yes, humans input programs and data into computers,
but these machines generally didn’t respond

00:02:29.879 --> 00:02:31.629
interactively to humans.

00:02:31.629 --> 00:02:34.640
Once a program was started, it typically ran
until it was finished.

00:02:34.640 --> 00:02:38.659
That’s because these machines were way too
expensive to be waiting around for humans

00:02:38.659 --> 00:02:40.819
to type a command or enter data.

00:02:40.819 --> 00:02:44.909
Any input needed for a computation was fed
in at the same time as the program.

00:02:44.909 --> 00:02:47.409
This started to change in the late 1950s.

00:02:47.409 --> 00:02:51.319
On one hand, smaller-scale computers started
to become cheap enough that it was feasible

00:02:51.319 --> 00:02:55.750
to have a human-in-the loop; that is, a back
and forth between human and computer.

00:02:55.750 --> 00:02:59.930
And on the other hand, big fancy computers
became fast and sophisticated enough to support

00:02:59.930 --> 00:03:04.849
many programs and users at once, what were
called multitasking and time-sharing systems.

00:03:04.849 --> 00:03:08.200
But these computers needed a way to get input
from users.

00:03:08.200 --> 00:03:12.379
For this, computers borrowed the ubiquitous
data entry mechanism of the era: keyboards.

00:03:12.379 --> 00:03:16.580
At this point, typing machines had already
been in use for a few centuries, but it was

00:03:16.580 --> 00:03:20.659
Christopher Latham Sholes, who invented the
modern typewriter in 1868.

00:03:20.659 --> 00:03:25.819
It took until 1874 to refine the design and
manufacture it, but it went on to be a commercial

00:03:25.819 --> 00:03:26.819
success.

00:03:26.819 --> 00:03:31.049
Sholes’ typewriter adopted an unusual keyboard
layout that you know well – QWERTY – named

00:03:31.049 --> 00:03:32.879
for the top-left row of letter keys.

00:03:32.879 --> 00:03:36.169
There has been a lot of speculation as to
why this design was used.

00:03:36.169 --> 00:03:40.230
The most prevalent theory is that it put common
letter pairings in English far apart to reduce

00:03:40.230 --> 00:03:43.040
the likelihood of typebars jamming when entered
in sequence.

00:03:43.040 --> 00:03:47.569
It’s a convenient explanation, but it’s
also probably false, or at least not the full

00:03:47.569 --> 00:03:48.569
story.

00:03:48.569 --> 00:03:53.040
In fact, QWERTY puts many common letter pairs
together, like “TH” and “ER”.

00:03:53.040 --> 00:03:56.739
And we know that Sholes and his team went
through many iterations before arriving at

00:03:56.739 --> 00:03:58.190
this iconic arrangement.

00:03:58.190 --> 00:04:02.069
Regardless of the reason, the commercial success
of Sholes’ typewriter meant the competitor

00:04:02.069 --> 00:04:05.349
companies that soon followed duplicated his
design.

00:04:05.349 --> 00:04:09.510
Many alternative keyboard layouts have been
proposed over the last century, claiming various

00:04:09.510 --> 00:04:10.510
benefits.

00:04:10.510 --> 00:04:13.590
But, once people had invested the time to
learn QWERTY, they just didn't want to learn

00:04:13.590 --> 00:04:14.590
something new.

00:04:14.590 --> 00:04:17.989
This is what economists would call a switching
barrier or switching cost.

00:04:17.989 --> 00:04:21.669
And it’s for this very basic human reason
that we still use QWERTY keyboards almost

00:04:21.669 --> 00:04:23.039
a century and a half later!

00:04:23.039 --> 00:04:25.509
I should mention that QWERTY isn’t universal.

00:04:25.509 --> 00:04:30.180
There are many international variants, like
the French AZERTY layout, or the QWERTZ layout

00:04:30.180 --> 00:04:31.600
common in central Europe.

00:04:31.600 --> 00:04:35.770
Interestingly, Sholes didn’t envision that
typing would ever be faster than handwriting,

00:04:35.770 --> 00:04:37.800
which is around 20 words per minute.

00:04:37.800 --> 00:04:42.660
Typewriters were introduced chiefly for legibility
and standardization of documents, not speed.

00:04:42.660 --> 00:04:47.539
However, as they became standard equipment
in offices, the desire for speedy typing grew,

00:04:47.540 --> 00:04:50.660
and there were two big advances that unlocked
typing’s true potential.

00:04:50.660 --> 00:04:54.900
Around 1880, Elizabeth Longley, a teacher
at the Cincinnati Shorthand and Type-Writer

00:04:54.920 --> 00:04:58.300
Institute, started to promote ten-finger typing.

00:04:58.300 --> 00:05:02.390
This required much less finger movement than
hunt-and-peck, so it offered enhanced typing

00:05:02.390 --> 00:05:02.980
speeds.

00:05:02.980 --> 00:05:07.420
Then, a few years later, Frank Edward McGurrin,
a federal court clerk in Salt Lake City, taught

00:05:07.420 --> 00:05:11.360
himself to touch-type; as in, he didn’t
need to look at the keys while typing.

00:05:11.360 --> 00:05:16.740
In 1888, McGurrin won a highly publicized
typing-speed contest, after which ten-finger,

00:05:16.740 --> 00:05:18.430
touch-typing began to catch on.

00:05:18.430 --> 00:05:23.150
Professional typists were soon able to achieve
speeds upwards of 100 words per minute, much

00:05:23.150 --> 00:05:24.629
faster than handwriting!

00:05:24.629 --> 00:05:25.800
And nice and neat too!

00:05:25.800 --> 00:05:30.129
So, humans are pretty good with typewriters,
but we can’t just plunk down a typewriter

00:05:30.129 --> 00:05:33.110
in front of a computer and have it type – they
have no fingers!

00:05:33.110 --> 00:05:38.220
Instead, early computers adapted a special
type of typewriter that was used for telegraphs,

00:05:38.220 --> 00:05:39.860
called a teletype machine.

00:05:39.860 --> 00:05:45.000
These were electromechanically-augmented typewriters
that could send and receive text over telegraph

00:05:45.000 --> 00:05:45.720
lines.

00:05:45.720 --> 00:05:49.740
Pressing a letter on one teletype keyboard
would cause a signal to be sent, over telegraph

00:05:49.750 --> 00:05:53.720
wires, to a teletype machine on the other
end, which would then electromechanically

00:05:53.720 --> 00:05:55.129
type that letter.

00:05:55.129 --> 00:06:00.099
This allowed two humans to type to one another
over long distances... basically a steampunk

00:06:00.099 --> 00:06:01.470
version of a chat room.

00:06:01.470 --> 00:06:05.009
Since these teletype machines already had
an electronic interface, they were easily

00:06:05.009 --> 00:06:10.640
adapted for computer use, and teletype computer
interfaces were common in the 1960s and 70s.

00:06:10.640 --> 00:06:12.820
Interaction was pretty straightforward.

00:06:12.820 --> 00:06:16.880
Users would type a command, hit enter, and
then the computer would type back.

00:06:16.880 --> 00:06:21.500
This text “conversation” between a user
and a computer went back and forth.

00:06:21.500 --> 00:06:25.319
These were called command line interfaces,
and they remained the most prevalent form

00:06:25.320 --> 00:06:28.640
of human-computer interaction up until around
the 1980s.

00:06:28.640 --> 00:06:31.860
Command Line interaction on a teletype machine
looks something like this.

00:06:31.879 --> 00:06:34.729
A user can type any number of possible commands.

00:06:34.729 --> 00:06:37.990
Let’s check out a few, beginning with seeing
all of the files in the current directory

00:06:37.990 --> 00:06:38.480
we’re in.

00:06:38.480 --> 00:06:42.140
For this, we would type the command, “ls”,
which is short for list, and the computer

00:06:42.150 --> 00:06:44.490
replies with a list of the files in our current
directory.

00:06:44.490 --> 00:06:49.060
If we want to see what’s in our “secret
StarTrek Discovery Cast dot t-x-t file”,

00:06:49.060 --> 00:06:51.439
we use yet another command to display the
contents.

00:06:51.439 --> 00:06:54.840
In unix, we can call “cat” - short for
concatenate.

00:06:54.840 --> 00:06:59.259
We need to specify which file to display,
so we include that after the command, called

00:06:59.259 --> 00:07:00.259
an argument.

00:07:00.259 --> 00:07:03.660
If you’re connected to a network with other
users, you can use a primitive version of

00:07:03.660 --> 00:07:07.580
a Find My Friends app to get more info on
them with the command “finger”.

00:07:07.580 --> 00:07:11.920
Electromechanical teletype machines were the
primary computing interface for most users

00:07:11.920 --> 00:07:13.699
up until around the 1970s.

00:07:13.699 --> 00:07:17.979
Although computer screens first emerged in
the 1950s, and were used for graphics they

00:07:17.979 --> 00:07:20.780
were too expensive and low resolution for
everyday use.

00:07:20.780 --> 00:07:24.569
However, mass production of televisions for
the consumer market, and general improvements

00:07:24.569 --> 00:07:29.979
in processors and memory, meant that by 1970,
it was economically viable to replace electromechanical

00:07:29.979 --> 00:07:32.590
teletype machines with screen-based equivalents.

00:07:32.590 --> 00:07:36.760
But, rather than build a whole new standard
to interface computers with these screens,

00:07:36.760 --> 00:07:41.020
engineers simply recycled the existing text-only,
teletype protocol.

00:07:41.030 --> 00:07:44.620
These machines used a screen, which simulated
endless paper.

00:07:44.620 --> 00:07:46.770
It was text in and text out, nothing more.

00:07:46.770 --> 00:07:51.340
The protocol was identical, so computers couldn’t
even tell if it was paper or a screen.

00:07:51.340 --> 00:07:55.289
These virtual teletype or glass teletype machines
became known as terminals.

00:07:55.289 --> 00:08:01.120
By 1971, it was estimated, in the United States,
there was something on the order of 70,000

00:08:01.120 --> 00:08:04.880
electro-mechanical teletype machines and 70,000
screen-based terminals in use.

00:08:04.880 --> 00:08:07.680
Screens were so much better, faster and more
flexible, though.

00:08:07.680 --> 00:08:10.680
Like, you could delete a mistake and it would
disappear.

00:08:10.680 --> 00:08:13.889
So, by the end of the 1970s, screens were
standard.

00:08:13.889 --> 00:08:18.130
You might think that command line interfaces
are way too primitive to do anything interesting.

00:08:18.130 --> 00:08:22.110
But even when the only interaction was through
text, programmers found a way to make it fun.

00:08:22.110 --> 00:08:26.520
Early interactive, text-based computer games
include famous titles like Zork, created in

00:08:26.520 --> 00:08:27.660
1977.

00:08:27.660 --> 00:08:32.020
Players of these sorts of early games were
expected to engage their limitless imaginations

00:08:32.040 --> 00:08:36.390
as they visualized the fictional world around
them, like what terrifying monster confronted

00:08:36.390 --> 00:08:39.589
them when it was pitch black and you were
likely to be eaten by a grue.

00:08:39.589 --> 00:08:44.110
Let’s go back to our command line, now on
a fancy screen-based terminal, and play!

00:08:44.110 --> 00:08:47.600
Just like before, we can see what’s in our
current directory with the “ls” command.

00:08:47.600 --> 00:08:51.860
Then, let’s go into our games directory
by using the “cd” command, for “change

00:08:51.860 --> 00:08:52.860
directory”.

00:08:52.860 --> 00:08:56.899
Now, we can use our “ls” command again
to see what games are installed on our computer.

00:08:56.899 --> 00:08:58.470
Sweet, we have Adventure!

00:08:58.470 --> 00:09:01.550
All we have to do to run this program is type
its name.

00:09:01.550 --> 00:09:04.840
Until this application halts, or we quit it,
it takes over the command line.

00:09:04.840 --> 00:09:08.820
What you’re seeing here is actual interaction
from “Colossal Cave Adventure”, first

00:09:08.820 --> 00:09:11.730
developed by Will Crowther in 1976.

00:09:11.730 --> 00:09:16.670
In the game, players can type in one- or two-word
commands to move around, interact with objects,

00:09:16.670 --> 00:09:17.980
pickup items and so on.

00:09:17.980 --> 00:09:21.980
The program acts as the narrator, describing
locations, possible actions, and the results

00:09:21.980 --> 00:09:23.360
of those actions.

00:09:23.360 --> 00:09:25.050
Certain ones resulted in death!

00:09:25.050 --> 00:09:29.260
The original version only had 66 locations
to explore, but it’s widely considered to

00:09:29.260 --> 00:09:31.640
be the first example of interactive fiction.

00:09:31.640 --> 00:09:36.020
These text adventure games later became multiplayer,
called MUDs or Multi-User Dungeons.

00:09:36.030 --> 00:09:39.440
And they’re the great-forbearers of the
awesome graphical MMORPG’s (massive, multiplayer

00:09:39.450 --> 00:09:41.310
online role playing games) we enjoy today.

00:09:41.310 --> 00:09:44.480
And if you want to know more about the history
of these and other games we’ve got a whole

00:09:44.480 --> 00:09:46.740
series on it hosted by Andre Meadows!

00:09:46.740 --> 00:09:49.980
Command line interfaces, while simple, are
very powerful.

00:09:49.980 --> 00:09:54.060
Computer programming is still very much a
written task, and as such, command lines are

00:09:54.060 --> 00:09:55.160
a natural interface.

00:09:55.160 --> 00:09:59.860
For this reason, even today, most programmers
use command line interfaces as part of their

00:09:59.860 --> 00:10:00.860
work.

00:10:00.860 --> 00:10:03.700
And they’re also the most common way to
access computers that are far away, like a

00:10:03.700 --> 00:10:05.279
server in a different country.

00:10:05.279 --> 00:10:09.430
If you’re running Windows, macOS or Linux,
your computer has a command line interface

00:10:09.430 --> 00:10:11.540
– one you may have never used.

00:10:11.540 --> 00:10:16.330
Check it out by typing “cmd” in your Windows
search bar, or search for Terminal on Mac.

00:10:16.330 --> 00:10:18.300
Then install a copy of Zork and play on!

00:10:18.300 --> 00:10:22.579
So, you can see how these early advancements
still have an impact on computing today.

00:10:22.579 --> 00:10:26.000
Just imagine if your phone didn’t have a
good ol’ fashioned QWERTY keyboard.

00:10:26.000 --> 00:10:28.290
It could take forever to type your Instagram
captions.

00:10:28.290 --> 00:10:31.230
But, there’s still something missing from
our discussion.

00:10:31.230 --> 00:10:32.680
All the sweet sweet graphics!

00:10:32.680 --> 00:10:34.260
That’s our topic for next week.

00:10:34.260 --> 00:10:35.140
See you soon.

