WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:03.999
[Music]

00:00:03.999 --> 00:00:04.009
[Music]
 

00:00:04.009 --> 00:00:06.200
[Music]
hey everybody we're here to talk to you

00:00:06.200 --> 00:00:06.210
hey everybody we're here to talk to you
 

00:00:06.210 --> 00:00:08.330
hey everybody we're here to talk to you
about benchmarking today I'm Chris and

00:00:08.330 --> 00:00:08.340
about benchmarking today I'm Chris and
 

00:00:08.340 --> 00:00:10.160
about benchmarking today I'm Chris and
I'm Dustin and we're engineers who work

00:00:10.160 --> 00:00:10.170
I'm Dustin and we're engineers who work
 

00:00:10.170 --> 00:00:12.830
I'm Dustin and we're engineers who work
on Android toolkit stuff so first I'd

00:00:12.830 --> 00:00:12.840
on Android toolkit stuff so first I'd
 

00:00:12.840 --> 00:00:14.480
on Android toolkit stuff so first I'd
like to start off with a note we're not

00:00:14.480 --> 00:00:14.490
like to start off with a note we're not
 

00:00:14.490 --> 00:00:16.580
like to start off with a note we're not
here to talk about benchmarking devices

00:00:16.580 --> 00:00:16.590
here to talk about benchmarking devices
 

00:00:16.590 --> 00:00:18.230
here to talk about benchmarking devices
I know a lot of people out there are

00:00:18.230 --> 00:00:18.240
I know a lot of people out there are
 

00:00:18.240 --> 00:00:19.400
I know a lot of people out there are
probably really excited to compare a

00:00:19.400 --> 00:00:19.410
probably really excited to compare a
 

00:00:19.410 --> 00:00:21.650
probably really excited to compare a
phone a to phone B but that's not what

00:00:21.650 --> 00:00:21.660
phone a to phone B but that's not what
 

00:00:21.660 --> 00:00:23.179
phone a to phone B but that's not what
this talk is about this talk is about

00:00:23.179 --> 00:00:23.189
this talk is about this talk is about
 

00:00:23.189 --> 00:00:25.370
this talk is about this talk is about
benchmarking Android app code

00:00:25.370 --> 00:00:25.380
benchmarking Android app code
 

00:00:25.380 --> 00:00:27.800
benchmarking Android app code
specifically Kotlin and java based app

00:00:27.800 --> 00:00:27.810
specifically Kotlin and java based app
 

00:00:27.810 --> 00:00:32.810
specifically Kotlin and java based app
code and a little bit of NDK code too so

00:00:32.810 --> 00:00:32.820
code and a little bit of NDK code too so
 

00:00:32.820 --> 00:00:34.910
code and a little bit of NDK code too so
what is benchmarking there's probably a

00:00:34.910 --> 00:00:34.920
what is benchmarking there's probably a
 

00:00:34.920 --> 00:00:36.920
what is benchmarking there's probably a
couple definitions out there but for all

00:00:36.920 --> 00:00:36.930
couple definitions out there but for all
 

00:00:36.930 --> 00:00:38.389
couple definitions out there but for all
intents and purposes of this talk we're

00:00:38.389 --> 00:00:38.399
intents and purposes of this talk we're
 

00:00:38.399 --> 00:00:40.910
intents and purposes of this talk we're
talking about measuring code performance

00:00:40.910 --> 00:00:40.920
talking about measuring code performance
 

00:00:40.920 --> 00:00:42.380
talking about measuring code performance
right we want to know how much time it

00:00:42.380 --> 00:00:42.390
right we want to know how much time it
 

00:00:42.390 --> 00:00:44.750
right we want to know how much time it
takes to run some chunk of code and we

00:00:44.750 --> 00:00:44.760
takes to run some chunk of code and we
 

00:00:44.760 --> 00:00:46.220
takes to run some chunk of code and we
want to measure this in a way where we

00:00:46.220 --> 00:00:46.230
want to measure this in a way where we
 

00:00:46.230 --> 00:00:47.600
want to measure this in a way where we
can see our improvements reflected in

00:00:47.600 --> 00:00:47.610
can see our improvements reflected in
 

00:00:47.610 --> 00:00:51.110
can see our improvements reflected in
those measurements and of course unlike

00:00:51.110 --> 00:00:51.120
those measurements and of course unlike
 

00:00:51.120 --> 00:00:52.760
those measurements and of course unlike
profiling we're not running the full

00:00:52.760 --> 00:00:52.770
profiling we're not running the full
 

00:00:52.770 --> 00:00:54.650
profiling we're not running the full
application here we're looking for our

00:00:54.650 --> 00:00:54.660
application here we're looking for our
 

00:00:54.660 --> 00:00:56.779
application here we're looking for our
tool for rapid feedback loops we want to

00:00:56.779 --> 00:00:56.789
tool for rapid feedback loops we want to
 

00:00:56.789 --> 00:01:01.250
tool for rapid feedback loops we want to
iterate and quickly so you published an

00:01:01.250 --> 00:01:01.260
iterate and quickly so you published an
 

00:01:01.260 --> 00:01:03.470
iterate and quickly so you published an
app very exciting right we're gonna be

00:01:03.470 --> 00:01:03.480
app very exciting right we're gonna be
 

00:01:03.480 --> 00:01:07.520
app very exciting right we're gonna be
rich and famous and then your users

00:01:07.520 --> 00:01:07.530
rich and famous and then your users
 

00:01:07.530 --> 00:01:11.149
rich and famous and then your users
start writing reviews so first five out

00:01:11.149 --> 00:01:11.159
start writing reviews so first five out
 

00:01:11.159 --> 00:01:13.370
start writing reviews so first five out
of five stars we're doing great parts in

00:01:13.370 --> 00:01:13.380
of five stars we're doing great parts in
 

00:01:13.380 --> 00:01:16.039
of five stars we're doing great parts in
the eyes was this review helpful yes for

00:01:16.039 --> 00:01:16.049
the eyes was this review helpful yes for
 

00:01:16.049 --> 00:01:18.620
the eyes was this review helpful yes for
my self-esteem 500 guy five again

00:01:18.620 --> 00:01:18.630
my self-esteem 500 guy five again
 

00:01:18.630 --> 00:01:21.170
my self-esteem 500 guy five again
awesome little hesitation space

00:01:21.170 --> 00:01:21.180
awesome little hesitation space
 

00:01:21.180 --> 00:01:23.330
awesome little hesitation space
exclamation mark we're doing great and

00:01:23.330 --> 00:01:23.340
exclamation mark we're doing great and
 

00:01:23.340 --> 00:01:27.440
exclamation mark we're doing great and
then the inevitable one star review lag

00:01:27.440 --> 00:01:27.450
then the inevitable one star review lag
 

00:01:27.450 --> 00:01:30.649
then the inevitable one star review lag
oh you're so upset you can't even spell

00:01:30.649 --> 00:01:30.659
oh you're so upset you can't even spell
 

00:01:30.659 --> 00:01:35.870
oh you're so upset you can't even spell
it right well we've been there too and

00:01:35.870 --> 00:01:35.880
it right well we've been there too and
 

00:01:35.880 --> 00:01:40.100
it right well we've been there too and
we'd like to share what we've learned so

00:01:40.100 --> 00:01:40.110
we'd like to share what we've learned so
 

00:01:40.110 --> 00:01:42.350
we'd like to share what we've learned so
let's go on a benchmarking adventure

00:01:42.350 --> 00:01:42.360
let's go on a benchmarking adventure
 

00:01:42.360 --> 00:01:44.899
let's go on a benchmarking adventure
very exciting we'll start off with the

00:01:44.899 --> 00:01:44.909
very exciting we'll start off with the
 

00:01:44.909 --> 00:01:47.899
very exciting we'll start off with the
test we'll call it my first benchmark

00:01:47.899 --> 00:01:47.909
test we'll call it my first benchmark
 

00:01:47.909 --> 00:01:50.690
test we'll call it my first benchmark
and here's some here's an object we

00:01:50.690 --> 00:01:50.700
and here's some here's an object we
 

00:01:50.700 --> 00:01:52.850
and here's some here's an object we
might be interested in benchmarking if

00:01:52.850 --> 00:01:52.860
might be interested in benchmarking if
 

00:01:52.860 --> 00:01:54.260
might be interested in benchmarking if
you haven't seen this before this is the

00:01:54.260 --> 00:01:54.270
you haven't seen this before this is the
 

00:01:54.270 --> 00:01:56.209
you haven't seen this before this is the
jetpack work manager library and it's

00:01:56.209 --> 00:01:56.219
jetpack work manager library and it's
 

00:01:56.219 --> 00:01:57.830
jetpack work manager library and it's
basically an abstraction over async

00:01:57.830 --> 00:01:57.840
basically an abstraction over async
 

00:01:57.840 --> 00:02:01.130
basically an abstraction over async
tasks and here's a synchronous test API

00:02:01.130 --> 00:02:01.140
tasks and here's a synchronous test API
 

00:02:01.140 --> 00:02:03.950
tasks and here's a synchronous test API
we can use to measure so what's the

00:02:03.950 --> 00:02:03.960
we can use to measure so what's the
 

00:02:03.960 --> 00:02:05.090
we can use to measure so what's the
first thing we would might we might do

00:02:05.090 --> 00:02:05.100
first thing we would might we might do
 

00:02:05.100 --> 00:02:07.700
first thing we would might we might do
well we could get the system time and

00:02:07.700 --> 00:02:07.710
well we could get the system time and
 

00:02:07.710 --> 00:02:09.919
well we could get the system time and
then get this to sometime after we've

00:02:09.919 --> 00:02:09.929
then get this to sometime after we've
 

00:02:09.929 --> 00:02:11.990
then get this to sometime after we've
done the work subtract that out I'll put

00:02:11.990 --> 00:02:12.000
done the work subtract that out I'll put
 

00:02:12.000 --> 00:02:13.940
done the work subtract that out I'll put
that as a result and great we have our

00:02:13.940 --> 00:02:13.950
that as a result and great we have our
 

00:02:13.950 --> 00:02:17.540
that as a result and great we have our
smack right we're done well not quite

00:02:17.540 --> 00:02:17.550
smack right we're done well not quite
 

00:02:17.550 --> 00:02:19.490
smack right we're done well not quite
we'll find that as we run this over and

00:02:19.490 --> 00:02:19.500
we'll find that as we run this over and
 

00:02:19.500 --> 00:02:21.589
we'll find that as we run this over and
over again we'll get vastly varying

00:02:21.589 --> 00:02:21.599
over again we'll get vastly varying
 

00:02:21.599 --> 00:02:22.970
over again we'll get vastly varying
results and that's no good for

00:02:22.970 --> 00:02:22.980
results and that's no good for
 

00:02:22.980 --> 00:02:25.220
results and that's no good for
measurements but what if you ran it in a

00:02:25.220 --> 00:02:25.230
measurements but what if you ran it in a
 

00:02:25.230 --> 00:02:29.630
measurements but what if you ran it in a
loop and maybe we'll run this loop five

00:02:29.630 --> 00:02:29.640
loop and maybe we'll run this loop five
 

00:02:29.640 --> 00:02:32.620
loop and maybe we'll run this loop five
times and then we'll report the average

00:02:32.620 --> 00:02:32.630
times and then we'll report the average
 

00:02:32.630 --> 00:02:35.690
times and then we'll report the average
so great problem solved right there's

00:02:35.690 --> 00:02:35.700
so great problem solved right there's
 

00:02:35.700 --> 00:02:38.660
so great problem solved right there's
still a few issues here well first five

00:02:38.660 --> 00:02:38.670
still a few issues here well first five
 

00:02:38.670 --> 00:02:40.339
still a few issues here well first five
is kind of like a random magic number

00:02:40.339 --> 00:02:40.349
is kind of like a random magic number
 

00:02:40.349 --> 00:02:42.559
is kind of like a random magic number
and ideally we'd like to dynamically

00:02:42.559 --> 00:02:42.569
and ideally we'd like to dynamically
 

00:02:42.569 --> 00:02:44.690
and ideally we'd like to dynamically
compute this number we want to report

00:02:44.690 --> 00:02:44.700
compute this number we want to report
 

00:02:44.700 --> 00:02:45.920
compute this number we want to report
the result when we're ready and

00:02:45.920 --> 00:02:45.930
the result when we're ready and
 

00:02:45.930 --> 00:02:47.509
the result when we're ready and
confident that this number won't change

00:02:47.509 --> 00:02:47.519
confident that this number won't change
 

00:02:47.519 --> 00:02:49.940
confident that this number won't change
too much we're also measuring

00:02:49.940 --> 00:02:49.950
too much we're also measuring
 

00:02:49.950 --> 00:02:53.000
too much we're also measuring
immediately and the issue here is that

00:02:53.000 --> 00:02:53.010
immediately and the issue here is that
 

00:02:53.010 --> 00:02:54.770
immediately and the issue here is that
the first couple runs of some piece of

00:02:54.770 --> 00:02:54.780
the first couple runs of some piece of
 

00:02:54.780 --> 00:02:56.509
the first couple runs of some piece of
code might not be indicative of what the

00:02:56.509 --> 00:02:56.519
code might not be indicative of what the
 

00:02:56.519 --> 00:02:58.729
code might not be indicative of what the
real user will experience and this can

00:02:58.729 --> 00:02:58.739
real user will experience and this can
 

00:02:58.739 --> 00:03:00.559
real user will experience and this can
be due to code paging memory or

00:03:00.559 --> 00:03:00.569
be due to code paging memory or
 

00:03:00.569 --> 00:03:02.740
be due to code paging memory or
just-in-time compilation optimizations

00:03:02.740 --> 00:03:02.750
just-in-time compilation optimizations
 

00:03:02.750 --> 00:03:06.250
just-in-time compilation optimizations
and we're also including outliers so

00:03:06.250 --> 00:03:06.260
and we're also including outliers so
 

00:03:06.260 --> 00:03:09.229
and we're also including outliers so
some everything on device is a shared

00:03:09.229 --> 00:03:09.239
some everything on device is a shared
 

00:03:09.239 --> 00:03:11.180
some everything on device is a shared
resource and this can cause

00:03:11.180 --> 00:03:11.190
resource and this can cause
 

00:03:11.190 --> 00:03:12.559
resource and this can cause
complications background interference

00:03:12.559 --> 00:03:12.569
complications background interference
 

00:03:12.569 --> 00:03:14.630
complications background interference
that might cause certain runs to be much

00:03:14.630 --> 00:03:14.640
that might cause certain runs to be much
 

00:03:14.640 --> 00:03:16.370
that might cause certain runs to be much
much slower than they should be and if

00:03:16.370 --> 00:03:16.380
much slower than they should be and if
 

00:03:16.380 --> 00:03:17.839
much slower than they should be and if
we include those results our beds will

00:03:17.839 --> 00:03:17.849
we include those results our beds will
 

00:03:17.849 --> 00:03:21.949
we include those results our beds will
be completely off and make sure we're

00:03:21.949 --> 00:03:21.959
be completely off and make sure we're
 

00:03:21.959 --> 00:03:23.449
be completely off and make sure we're
not running an emulator right because

00:03:23.449 --> 00:03:23.459
not running an emulator right because
 

00:03:23.459 --> 00:03:24.710
not running an emulator right because
while it's very tempting to run tests in

00:03:24.710 --> 00:03:24.720
while it's very tempting to run tests in
 

00:03:24.720 --> 00:03:27.229
while it's very tempting to run tests in
emulator their emulators don't emulate

00:03:27.229 --> 00:03:27.239
emulator their emulators don't emulate
 

00:03:27.239 --> 00:03:30.830
emulator their emulators don't emulate
real-world performance so the lesson

00:03:30.830 --> 00:03:30.840
real-world performance so the lesson
 

00:03:30.840 --> 00:03:34.069
real-world performance so the lesson
here is that benchmarking is tricky it's

00:03:34.069 --> 00:03:34.079
here is that benchmarking is tricky it's
 

00:03:34.079 --> 00:03:35.479
here is that benchmarking is tricky it's
often inaccurate we're measuring the

00:03:35.479 --> 00:03:35.489
often inaccurate we're measuring the
 

00:03:35.489 --> 00:03:37.930
often inaccurate we're measuring the
wrong things at the wrong time right

00:03:37.930 --> 00:03:37.940
wrong things at the wrong time right
 

00:03:37.940 --> 00:03:40.759
wrong things at the wrong time right
sounds stable there's tons of variants

00:03:40.759 --> 00:03:40.769
sounds stable there's tons of variants
 

00:03:40.769 --> 00:03:43.550
sounds stable there's tons of variants
how many loops should we run and it's

00:03:43.550 --> 00:03:43.560
how many loops should we run and it's
 

00:03:43.560 --> 00:03:45.440
how many loops should we run and it's
hard to set up correctly that's worst of

00:03:45.440 --> 00:03:45.450
hard to set up correctly that's worst of
 

00:03:45.450 --> 00:03:47.569
hard to set up correctly that's worst of
all because benchmarking is a tool to

00:03:47.569 --> 00:03:47.579
all because benchmarking is a tool to
 

00:03:47.579 --> 00:03:49.340
all because benchmarking is a tool to
help us focus developer developer

00:03:49.340 --> 00:03:49.350
help us focus developer developer
 

00:03:49.350 --> 00:03:50.900
help us focus developer developer
efforts so it's hard to set up how much

00:03:50.900 --> 00:03:50.910
efforts so it's hard to set up how much
 

00:03:50.910 --> 00:03:53.599
efforts so it's hard to set up how much
time are really saving here so I'd like

00:03:53.599 --> 00:03:53.609
time are really saving here so I'd like
 

00:03:53.609 --> 00:03:55.280
time are really saving here so I'd like
to introduce the jetpack benchmark

00:03:55.280 --> 00:03:55.290
to introduce the jetpack benchmark
 

00:03:55.290 --> 00:03:57.440
to introduce the jetpack benchmark
library is out now and it's an awful one

00:03:57.440 --> 00:03:57.450
library is out now and it's an awful one
 

00:03:57.450 --> 00:04:00.500
library is out now and it's an awful one
and this is a previously internal tool

00:04:00.500 --> 00:04:00.510
and this is a previously internal tool
 

00:04:00.510 --> 00:04:02.690
and this is a previously internal tool
they've been working on for years but we

00:04:02.690 --> 00:04:02.700
they've been working on for years but we
 

00:04:02.700 --> 00:04:04.099
they've been working on for years but we
work really hard to get available to the

00:04:04.099 --> 00:04:04.109
work really hard to get available to the
 

00:04:04.109 --> 00:04:05.539
work really hard to get available to the
public now so we hope you guys will

00:04:05.539 --> 00:04:05.549
public now so we hope you guys will
 

00:04:05.549 --> 00:04:07.670
public now so we hope you guys will
enjoy it first I'm gonna go over a

00:04:07.670 --> 00:04:07.680
enjoy it first I'm gonna go over a
 

00:04:07.680 --> 00:04:09.259
enjoy it first I'm gonna go over a
little bit about what it looks like and

00:04:09.259 --> 00:04:09.269
little bit about what it looks like and
 

00:04:09.269 --> 00:04:10.729
little bit about what it looks like and
how might how you might use it in your

00:04:10.729 --> 00:04:10.739
how might how you might use it in your
 

00:04:10.739 --> 00:04:12.379
how might how you might use it in your
code and then we'll talk about the

00:04:12.379 --> 00:04:12.389
code and then we'll talk about the
 

00:04:12.389 --> 00:04:13.909
code and then we'll talk about the
internals and how we solved a lot of

00:04:13.909 --> 00:04:13.919
internals and how we solved a lot of
 

00:04:13.919 --> 00:04:18.020
internals and how we solved a lot of
these issues so jetpack benchmark it's a

00:04:18.020 --> 00:04:18.030
these issues so jetpack benchmark it's a
 

00:04:18.030 --> 00:04:19.849
these issues so jetpack benchmark it's a
tool for measuring code performance of

00:04:19.849 --> 00:04:19.859
tool for measuring code performance of
 

00:04:19.859 --> 00:04:22.460
tool for measuring code performance of
course thank you

00:04:22.460 --> 00:04:22.470
course thank you
 

00:04:22.470 --> 00:04:24.230
course thank you
we'd like to prevent common measuring

00:04:24.230 --> 00:04:24.240
we'd like to prevent common measuring
 

00:04:24.240 --> 00:04:25.580
we'd like to prevent common measuring
mistakes there's a lot of common

00:04:25.580 --> 00:04:25.590
mistakes there's a lot of common
 

00:04:25.590 --> 00:04:27.350
mistakes there's a lot of common
pitfalls that we've seen in the past and

00:04:27.350 --> 00:04:27.360
pitfalls that we've seen in the past and
 

00:04:27.360 --> 00:04:27.770
pitfalls that we've seen in the past and
we want to

00:04:27.770 --> 00:04:27.780
we want to
 

00:04:27.780 --> 00:04:30.680
we want to
pass those lessons onto you and best of

00:04:30.680 --> 00:04:30.690
pass those lessons onto you and best of
 

00:04:30.690 --> 00:04:32.300
pass those lessons onto you and best of
all is integrated with Android studio

00:04:32.300 --> 00:04:32.310
all is integrated with Android studio
 

00:04:32.310 --> 00:04:34.070
all is integrated with Android studio
who doesn't love androids to integration

00:04:34.070 --> 00:04:34.080
who doesn't love androids to integration
 

00:04:34.080 --> 00:04:36.530
who doesn't love androids to integration
right so let's jump back to our previous

00:04:36.530 --> 00:04:36.540
right so let's jump back to our previous
 

00:04:36.540 --> 00:04:39.140
right so let's jump back to our previous
example here's our here's our previous

00:04:39.140 --> 00:04:39.150
example here's our here's our previous
 

00:04:39.150 --> 00:04:41.390
example here's our here's our previous
benchmark it's four boasts and it's full

00:04:41.390 --> 00:04:41.400
benchmark it's four boasts and it's full
 

00:04:41.400 --> 00:04:43.640
benchmark it's four boasts and it's full
of errors but this is really only the

00:04:43.640 --> 00:04:43.650
of errors but this is really only the
 

00:04:43.650 --> 00:04:45.020
of errors but this is really only the
code that we care about the highlighted

00:04:45.020 --> 00:04:45.030
code that we care about the highlighted
 

00:04:45.030 --> 00:04:47.570
code that we care about the highlighted
code here about three lines so let's fix

00:04:47.570 --> 00:04:47.580
code here about three lines so let's fix
 

00:04:47.580 --> 00:04:50.150
code here about three lines so let's fix
that first we apply the benchmark rule

00:04:50.150 --> 00:04:50.160
that first we apply the benchmark rule
 

00:04:50.160 --> 00:04:52.760
that first we apply the benchmark rule
and then all this code becomes one

00:04:52.760 --> 00:04:52.770
and then all this code becomes one
 

00:04:52.770 --> 00:04:56.360
and then all this code becomes one
simple API call measure it repeated and

00:04:56.360 --> 00:04:56.370
simple API call measure it repeated and
 

00:04:56.370 --> 00:04:57.950
simple API call measure it repeated and
we can focus on the code that we really

00:04:57.950 --> 00:04:57.960
we can focus on the code that we really
 

00:04:57.960 --> 00:05:00.200
we can focus on the code that we really
care about let's check out another

00:05:00.200 --> 00:05:00.210
care about let's check out another
 

00:05:00.210 --> 00:05:02.330
care about let's check out another
example here is the database benchmark

00:05:02.330 --> 00:05:02.340
example here is the database benchmark
 

00:05:02.340 --> 00:05:04.159
example here is the database benchmark
so first let's initialize our database

00:05:04.159 --> 00:05:04.169
so first let's initialize our database
 

00:05:04.169 --> 00:05:06.380
so first let's initialize our database
with room and if you haven't seen room

00:05:06.380 --> 00:05:06.390
with room and if you haven't seen room
 

00:05:06.390 --> 00:05:08.180
with room and if you haven't seen room
before it's another jetpack library it's

00:05:08.180 --> 00:05:08.190
before it's another jetpack library it's
 

00:05:08.190 --> 00:05:10.159
before it's another jetpack library it's
just an abstraction over databases all

00:05:10.159 --> 00:05:10.169
just an abstraction over databases all
 

00:05:10.169 --> 00:05:11.330
just an abstraction over databases all
that matters really here is we're

00:05:11.330 --> 00:05:11.340
that matters really here is we're
 

00:05:11.340 --> 00:05:13.070
that matters really here is we're
initializing some object to represent

00:05:13.070 --> 00:05:13.080
initializing some object to represent
 

00:05:13.080 --> 00:05:15.220
initializing some object to represent
that allow us to make database queries

00:05:15.220 --> 00:05:15.230
that allow us to make database queries
 

00:05:15.230 --> 00:05:17.540
that allow us to make database queries
so first let's clear all the tables and

00:05:17.540 --> 00:05:17.550
so first let's clear all the tables and
 

00:05:17.550 --> 00:05:19.969
so first let's clear all the tables and
insert some test data create our

00:05:19.969 --> 00:05:19.979
insert some test data create our
 

00:05:19.979 --> 00:05:23.150
insert some test data create our
measuring loop and then we can measure

00:05:23.150 --> 00:05:23.160
measuring loop and then we can measure
 

00:05:23.160 --> 00:05:24.380
measuring loop and then we can measure
the code that we care about in this case

00:05:24.380 --> 00:05:24.390
the code that we care about in this case
 

00:05:24.390 --> 00:05:26.659
the code that we care about in this case
it's some kind of complex query not sure

00:05:26.659 --> 00:05:26.669
it's some kind of complex query not sure
 

00:05:26.669 --> 00:05:29.750
it's some kind of complex query not sure
what it is doesn't really matter but

00:05:29.750 --> 00:05:29.760
what it is doesn't really matter but
 

00:05:29.760 --> 00:05:31.430
what it is doesn't really matter but
there's an issue here depending on your

00:05:31.430 --> 00:05:31.440
there's an issue here depending on your
 

00:05:31.440 --> 00:05:33.620
there's an issue here depending on your
database implementation your query could

00:05:33.620 --> 00:05:33.630
database implementation your query could
 

00:05:33.630 --> 00:05:35.360
database implementation your query could
be cached right if we know that the

00:05:35.360 --> 00:05:35.370
be cached right if we know that the
 

00:05:35.370 --> 00:05:36.920
be cached right if we know that the
query results won't be changed shouldn't

00:05:36.920 --> 00:05:36.930
query results won't be changed shouldn't
 

00:05:36.930 --> 00:05:38.270
query results won't be changed shouldn't
we just save that result and use that in

00:05:38.270 --> 00:05:38.280
we just save that result and use that in
 

00:05:38.280 --> 00:05:39.469
we just save that result and use that in
the future instead of having to use

00:05:39.469 --> 00:05:39.479
the future instead of having to use
 

00:05:39.479 --> 00:05:42.830
the future instead of having to use
complex Korea all over again so what

00:05:42.830 --> 00:05:42.840
complex Korea all over again so what
 

00:05:42.840 --> 00:05:43.790
complex Korea all over again so what
we're gonna have to do is we have to

00:05:43.790 --> 00:05:43.800
we're gonna have to do is we have to
 

00:05:43.800 --> 00:05:45.110
we're gonna have to do is we have to
take this clear and insert test data

00:05:45.110 --> 00:05:45.120
take this clear and insert test data
 

00:05:45.120 --> 00:05:46.969
take this clear and insert test data
method and do it inside the loop right

00:05:46.969 --> 00:05:46.979
method and do it inside the loop right
 

00:05:46.979 --> 00:05:49.370
method and do it inside the loop right
every single time plus the cache so we

00:05:49.370 --> 00:05:49.380
every single time plus the cache so we
 

00:05:49.380 --> 00:05:50.600
every single time plus the cache so we
can measure it what we actually care

00:05:50.600 --> 00:05:50.610
can measure it what we actually care
 

00:05:50.610 --> 00:05:52.969
can measure it what we actually care
about but there's another problem here

00:05:52.969 --> 00:05:52.979
about but there's another problem here
 

00:05:52.979 --> 00:05:54.920
about but there's another problem here
we're now measuring more than we

00:05:54.920 --> 00:05:54.930
we're now measuring more than we
 

00:05:54.930 --> 00:05:57.230
we're now measuring more than we
actually care so what are we gonna do

00:05:57.230 --> 00:05:57.240
actually care so what are we gonna do
 

00:05:57.240 --> 00:05:59.300
actually care so what are we gonna do
well we could do the previous thing

00:05:59.300 --> 00:05:59.310
well we could do the previous thing
 

00:05:59.310 --> 00:06:01.760
well we could do the previous thing
where we take the system time before and

00:06:01.760 --> 00:06:01.770
where we take the system time before and
 

00:06:01.770 --> 00:06:03.590
where we take the system time before and
after maybe save that to some variable

00:06:03.590 --> 00:06:03.600
after maybe save that to some variable
 

00:06:03.600 --> 00:06:05.779
after maybe save that to some variable
output the result then subtract that

00:06:05.779 --> 00:06:05.789
output the result then subtract that
 

00:06:05.789 --> 00:06:08.210
output the result then subtract that
from our final result and then we'll

00:06:08.210 --> 00:06:08.220
from our final result and then we'll
 

00:06:08.220 --> 00:06:09.350
from our final result and then we'll
have our actual result that we care

00:06:09.350 --> 00:06:09.360
have our actual result that we care
 

00:06:09.360 --> 00:06:11.090
have our actual result that we care
about right well this is again very

00:06:11.090 --> 00:06:11.100
about right well this is again very
 

00:06:11.100 --> 00:06:12.950
about right well this is again very
verbose and fortunately this is a common

00:06:12.950 --> 00:06:12.960
verbose and fortunately this is a common
 

00:06:12.960 --> 00:06:14.930
verbose and fortunately this is a common
use case that we run into - so we've

00:06:14.930 --> 00:06:14.940
use case that we run into - so we've
 

00:06:14.940 --> 00:06:16.990
use case that we run into - so we've
create an API for this as well and

00:06:16.990 --> 00:06:17.000
create an API for this as well and
 

00:06:17.000 --> 00:06:21.370
create an API for this as well and
that's the run with timing stable block

00:06:21.370 --> 00:06:21.380
 

00:06:21.380 --> 00:06:24.320
so I know a lot of Java developers out

00:06:24.320 --> 00:06:24.330
so I know a lot of Java developers out
 

00:06:24.330 --> 00:06:25.640
so I know a lot of Java developers out
there are probably wondering well what

00:06:25.640 --> 00:06:25.650
there are probably wondering well what
 

00:06:25.650 --> 00:06:28.010
there are probably wondering well what
about us well of course we have Java API

00:06:28.010 --> 00:06:28.020
about us well of course we have Java API
 

00:06:28.020 --> 00:06:30.529
about us well of course we have Java API
as well and it's slightly different so

00:06:30.529 --> 00:06:30.539
as well and it's slightly different so
 

00:06:30.539 --> 00:06:31.460
as well and it's slightly different so
I'd like to go through this line by line

00:06:31.460 --> 00:06:31.470
I'd like to go through this line by line
 

00:06:31.470 --> 00:06:33.980
I'd like to go through this line by line
a lot of code has changed here so first

00:06:33.980 --> 00:06:33.990
a lot of code has changed here so first
 

00:06:33.990 --> 00:06:35.450
a lot of code has changed here so first
we have to create this get state meri we

00:06:35.450 --> 00:06:35.460
we have to create this get state meri we
 

00:06:35.460 --> 00:06:37.850
we have to create this get state meri we
create this benchmark state variable

00:06:37.850 --> 00:06:37.860
create this benchmark state variable
 

00:06:37.860 --> 00:06:39.710
create this benchmark state variable
and this is how the library's gonna

00:06:39.710 --> 00:06:39.720
and this is how the library's gonna
 

00:06:39.720 --> 00:06:41.570
and this is how the library's gonna
commit to your code when it's done we

00:06:41.570 --> 00:06:41.580
commit to your code when it's done we
 

00:06:41.580 --> 00:06:43.640
commit to your code when it's done we
create a while loop and call state keep

00:06:43.640 --> 00:06:43.650
create a while loop and call state keep
 

00:06:43.650 --> 00:06:45.680
create a while loop and call state keep
running and inside that block we can run

00:06:45.680 --> 00:06:45.690
running and inside that block we can run
 

00:06:45.690 --> 00:06:46.940
running and inside that block we can run
all the code that we want to measure if

00:06:46.940 --> 00:06:46.950
all the code that we want to measure if
 

00:06:46.950 --> 00:06:48.380
all the code that we want to measure if
we ever need to do any setup or

00:06:48.380 --> 00:06:48.390
we ever need to do any setup or
 

00:06:48.390 --> 00:06:50.000
we ever need to do any setup or
initialization we can just call this

00:06:50.000 --> 00:06:50.010
initialization we can just call this
 

00:06:50.010 --> 00:06:51.620
initialization we can just call this
pause timing method do our

00:06:51.620 --> 00:06:51.630
pause timing method do our
 

00:06:51.630 --> 00:06:53.750
pause timing method do our
initialization and then resume when

00:06:53.750 --> 00:06:53.760
initialization and then resume when
 

00:06:53.760 --> 00:06:56.270
initialization and then resume when
we're ready to measure again so that's

00:06:56.270 --> 00:06:56.280
we're ready to measure again so that's
 

00:06:56.280 --> 00:06:59.480
we're ready to measure again so that's
great I've got one more example for you

00:06:59.480 --> 00:06:59.490
great I've got one more example for you
 

00:06:59.490 --> 00:07:01.460
great I've got one more example for you
guys and it's a UI example a very

00:07:01.460 --> 00:07:01.470
guys and it's a UI example a very
 

00:07:01.470 --> 00:07:03.410
guys and it's a UI example a very
compelling case for benchmarking it

00:07:03.410 --> 00:07:03.420
compelling case for benchmarking it
 

00:07:03.420 --> 00:07:05.030
compelling case for benchmarking it
might be UI and we've designed this

00:07:05.030 --> 00:07:05.040
might be UI and we've designed this
 

00:07:05.040 --> 00:07:06.860
might be UI and we've designed this
library to integrate on top of existing

00:07:06.860 --> 00:07:06.870
library to integrate on top of existing
 

00:07:06.870 --> 00:07:08.270
library to integrate on top of existing
test infrastructure and that's because

00:07:08.270 --> 00:07:08.280
test infrastructure and that's because
 

00:07:08.280 --> 00:07:09.950
test infrastructure and that's because
we want you to be able to use all your

00:07:09.950 --> 00:07:09.960
we want you to be able to use all your
 

00:07:09.960 --> 00:07:12.740
we want you to be able to use all your
favorite tools for example the activity

00:07:12.740 --> 00:07:12.750
favorite tools for example the activity
 

00:07:12.750 --> 00:07:14.960
favorite tools for example the activity
test rule which is an extraction that

00:07:14.960 --> 00:07:14.970
test rule which is an extraction that
 

00:07:14.970 --> 00:07:15.800
test rule which is an extraction that
will help you with activity lifecycle

00:07:15.800 --> 00:07:15.810
will help you with activity lifecycle
 

00:07:15.810 --> 00:07:17.330
will help you with activity lifecycle
and all the setup you need in order to

00:07:17.330 --> 00:07:17.340
and all the setup you need in order to
 

00:07:17.340 --> 00:07:19.520
and all the setup you need in order to
make a UI test so we simply mark this

00:07:19.520 --> 00:07:19.530
make a UI test so we simply mark this
 

00:07:19.530 --> 00:07:21.530
make a UI test so we simply mark this
test as an @ UI thread test to run on

00:07:21.530 --> 00:07:21.540
test as an @ UI thread test to run on
 

00:07:21.540 --> 00:07:23.300
test as an @ UI thread test to run on
the main thread and then we get a

00:07:23.300 --> 00:07:23.310
the main thread and then we get a
 

00:07:23.310 --> 00:07:26.000
the main thread and then we get a
reference to our psych review then as

00:07:26.000 --> 00:07:26.010
reference to our psych review then as
 

00:07:26.010 --> 00:07:27.650
reference to our psych review then as
before we just create a net repeat of

00:07:27.650 --> 00:07:27.660
before we just create a net repeat of
 

00:07:27.660 --> 00:07:29.510
before we just create a net repeat of
loop and measure the code that we care

00:07:29.510 --> 00:07:29.520
loop and measure the code that we care
 

00:07:29.520 --> 00:07:31.940
loop and measure the code that we care
about in this case we're scrolling by

00:07:31.940 --> 00:07:31.950
about in this case we're scrolling by
 

00:07:31.950 --> 00:07:35.570
about in this case we're scrolling by
the height of one item so let's talk

00:07:35.570 --> 00:07:35.580
the height of one item so let's talk
 

00:07:35.580 --> 00:07:39.550
the height of one item so let's talk
about studio integration with studio 3.5

00:07:39.550 --> 00:07:39.560
about studio integration with studio 3.5
 

00:07:39.560 --> 00:07:42.830
about studio integration with studio 3.5
we're releasing a new benchmark module

00:07:42.830 --> 00:07:42.840
we're releasing a new benchmark module
 

00:07:42.840 --> 00:07:44.090
we're releasing a new benchmark module
template to help you get up and running

00:07:44.090 --> 00:07:44.100
template to help you get up and running
 

00:07:44.100 --> 00:07:45.950
template to help you get up and running
with your benchmarks so let's walk

00:07:45.950 --> 00:07:45.960
with your benchmarks so let's walk
 

00:07:45.960 --> 00:07:47.120
with your benchmarks so let's walk
through what adding a benchmark module

00:07:47.120 --> 00:07:47.130
through what adding a benchmark module
 

00:07:47.130 --> 00:07:50.810
through what adding a benchmark module
looks like so here's a typical Android

00:07:50.810 --> 00:07:50.820
looks like so here's a typical Android
 

00:07:50.820 --> 00:07:53.060
looks like so here's a typical Android
project we've got an app module and a

00:07:53.060 --> 00:07:53.070
project we've got an app module and a
 

00:07:53.070 --> 00:07:54.380
project we've got an app module and a
library module because we love

00:07:54.380 --> 00:07:54.390
library module because we love
 

00:07:54.390 --> 00:07:55.670
library module because we love
modularization and we're great

00:07:55.670 --> 00:07:55.680
modularization and we're great
 

00:07:55.680 --> 00:07:58.100
modularization and we're great
developers we right-click the project

00:07:58.100 --> 00:07:58.110
developers we right-click the project
 

00:07:58.110 --> 00:08:03.560
developers we right-click the project
click new module and we'll get up and

00:08:03.560 --> 00:08:03.570
click new module and we'll get up and
 

00:08:03.570 --> 00:08:05.510
click new module and we'll get up and
we'll get this new create this create

00:08:05.510 --> 00:08:05.520
we'll get this new create this create
 

00:08:05.520 --> 00:08:06.590
we'll get this new create this create
new module

00:08:06.590 --> 00:08:06.600
new module
 

00:08:06.600 --> 00:08:07.670
new module
wizard that you've probably seen before

00:08:07.670 --> 00:08:07.680
wizard that you've probably seen before
 

00:08:07.680 --> 00:08:09.350
wizard that you've probably seen before
and if you scroll the way to the bottom

00:08:09.350 --> 00:08:09.360
and if you scroll the way to the bottom
 

00:08:09.360 --> 00:08:10.730
and if you scroll the way to the bottom
you'll see this new benchmark module

00:08:10.730 --> 00:08:10.740
you'll see this new benchmark module
 

00:08:10.740 --> 00:08:13.520
you'll see this new benchmark module
icon click Next and into this little

00:08:13.520 --> 00:08:13.530
icon click Next and into this little
 

00:08:13.530 --> 00:08:15.620
icon click Next and into this little
configuration dialog you can use to

00:08:15.620 --> 00:08:15.630
configuration dialog you can use to
 

00:08:15.630 --> 00:08:16.820
configuration dialog you can use to
choose your module name change the

00:08:16.820 --> 00:08:16.830
choose your module name change the
 

00:08:16.830 --> 00:08:18.350
choose your module name change the
package name and we've got templates on

00:08:18.350 --> 00:08:18.360
package name and we've got templates on
 

00:08:18.360 --> 00:08:21.560
package name and we've got templates on
both Kotlin and Java based code so click

00:08:21.560 --> 00:08:21.570
both Kotlin and Java based code so click
 

00:08:21.570 --> 00:08:23.510
both Kotlin and Java based code so click
finish come back to the project right

00:08:23.510 --> 00:08:23.520
finish come back to the project right
 

00:08:23.520 --> 00:08:25.280
finish come back to the project right
now we have our benchmark module let's

00:08:25.280 --> 00:08:25.290
now we have our benchmark module let's
 

00:08:25.290 --> 00:08:28.190
now we have our benchmark module let's
take a look inside we've got a previous

00:08:28.190 --> 00:08:28.200
take a look inside we've got a previous
 

00:08:28.200 --> 00:08:29.780
take a look inside we've got a previous
we've got an example here benchmark here

00:08:29.780 --> 00:08:29.790
we've got an example here benchmark here
 

00:08:29.790 --> 00:08:32.170
we've got an example here benchmark here
that you can just run up and running a

00:08:32.170 --> 00:08:32.180
that you can just run up and running a
 

00:08:32.180 --> 00:08:35.390
that you can just run up and running a
similar as before except the benchmark

00:08:35.390 --> 00:08:35.400
similar as before except the benchmark
 

00:08:35.400 --> 00:08:38.360
similar as before except the benchmark
rule measure repeated loop and it works

00:08:38.360 --> 00:08:38.370
rule measure repeated loop and it works
 

00:08:38.370 --> 00:08:39.830
rule measure repeated loop and it works
out of a box you can just run it and

00:08:39.830 --> 00:08:39.840
out of a box you can just run it and
 

00:08:39.840 --> 00:08:41.390
out of a box you can just run it and
your result will appear directly in

00:08:41.390 --> 00:08:41.400
your result will appear directly in
 

00:08:41.400 --> 00:08:43.040
your result will appear directly in
studio in case we're developing locally

00:08:43.040 --> 00:08:43.050
studio in case we're developing locally
 

00:08:43.050 --> 00:08:46.370
studio in case we're developing locally
and you want to iterate quickly we've

00:08:46.370 --> 00:08:46.380
and you want to iterate quickly we've
 

00:08:46.380 --> 00:08:48.140
and you want to iterate quickly we've
also got JSON and excellent output data

00:08:48.140 --> 00:08:48.150
also got JSON and excellent output data
 

00:08:48.150 --> 00:08:49.550
also got JSON and excellent output data
will pull off from connected

00:08:49.550 --> 00:08:49.560
will pull off from connected
 

00:08:49.560 --> 00:08:51.500
will pull off from connected
instrumented tests from device on to

00:08:51.500 --> 00:08:51.510
instrumented tests from device on to
 

00:08:51.510 --> 00:08:51.830
instrumented tests from device on to
your host

00:08:51.830 --> 00:08:51.840
your host
 

00:08:51.840 --> 00:08:53.360
your host
machine and we've done this with

00:08:53.360 --> 00:08:53.370
machine and we've done this with
 

00:08:53.370 --> 00:08:55.010
machine and we've done this with
intention to be congested by continuous

00:08:55.010 --> 00:08:55.020
intention to be congested by continuous
 

00:08:55.020 --> 00:08:56.690
intention to be congested by continuous
integration tools so if you want to look

00:08:56.690 --> 00:08:56.700
integration tools so if you want to look
 

00:08:56.700 --> 00:08:57.950
integration tools so if you want to look
for regressions and look for

00:08:57.950 --> 00:08:57.960
for regressions and look for
 

00:08:57.960 --> 00:08:59.390
for regressions and look for
improvements you've made over time this

00:08:59.390 --> 00:08:59.400
improvements you've made over time this
 

00:08:59.400 --> 00:09:00.410
improvements you've made over time this
is a great way to do that

00:09:00.410 --> 00:09:00.420
is a great way to do that
 

00:09:00.420 --> 00:09:03.830
is a great way to do that
as with any module there's also a build

00:09:03.830 --> 00:09:03.840
as with any module there's also a build
 

00:09:03.840 --> 00:09:05.150
as with any module there's also a build
Gradle file and there's a couple things

00:09:05.150 --> 00:09:05.160
Gradle file and there's a couple things
 

00:09:05.160 --> 00:09:07.040
Gradle file and there's a couple things
here I'd like to point out so first

00:09:07.040 --> 00:09:07.050
here I'd like to point out so first
 

00:09:07.050 --> 00:09:08.870
here I'd like to point out so first
there's a bench there's a benchmark

00:09:08.870 --> 00:09:08.880
there's a bench there's a benchmark
 

00:09:08.880 --> 00:09:10.520
there's a bench there's a benchmark
plugin that we're going to be shipping

00:09:10.520 --> 00:09:10.530
plugin that we're going to be shipping
 

00:09:10.530 --> 00:09:12.680
plugin that we're going to be shipping
along with the library there's a custom

00:09:12.680 --> 00:09:12.690
along with the library there's a custom
 

00:09:12.690 --> 00:09:14.030
along with the library there's a custom
runner that extends off the Android

00:09:14.030 --> 00:09:14.040
runner that extends off the Android
 

00:09:14.040 --> 00:09:15.740
runner that extends off the Android
j-unit Runner and it's also open to be

00:09:15.740 --> 00:09:15.750
j-unit Runner and it's also open to be
 

00:09:15.750 --> 00:09:17.530
j-unit Runner and it's also open to be
extended in case you need to do that

00:09:17.530 --> 00:09:17.540
extended in case you need to do that
 

00:09:17.540 --> 00:09:19.940
extended in case you need to do that
we've also pre-built it with some

00:09:19.940 --> 00:09:19.950
we've also pre-built it with some
 

00:09:19.950 --> 00:09:22.430
we've also pre-built it with some
pre-built ProGuard rules that'll work

00:09:22.430 --> 00:09:22.440
pre-built ProGuard rules that'll work
 

00:09:22.440 --> 00:09:23.720
pre-built ProGuard rules that'll work
out of the box with a jetpack benchmark

00:09:23.720 --> 00:09:23.730
out of the box with a jetpack benchmark
 

00:09:23.730 --> 00:09:25.760
out of the box with a jetpack benchmark
library and of course the library itself

00:09:25.760 --> 00:09:25.770
library and of course the library itself
 

00:09:25.770 --> 00:09:28.310
library and of course the library itself
can't forget that very important so

00:09:28.310 --> 00:09:28.320
can't forget that very important so
 

00:09:28.320 --> 00:09:30.410
can't forget that very important so
let's talk about the Gradle plugin so

00:09:30.410 --> 00:09:30.420
let's talk about the Gradle plugin so
 

00:09:30.420 --> 00:09:32.000
let's talk about the Gradle plugin so
that's this line you saw before we apply

00:09:32.000 --> 00:09:32.010
that's this line you saw before we apply
 

00:09:32.010 --> 00:09:34.460
that's this line you saw before we apply
a plug-in line it's gonna help you pull

00:09:34.460 --> 00:09:34.470
a plug-in line it's gonna help you pull
 

00:09:34.470 --> 00:09:35.840
a plug-in line it's gonna help you pull
your benchmark reports when you run

00:09:35.840 --> 00:09:35.850
your benchmark reports when you run
 

00:09:35.850 --> 00:09:38.090
your benchmark reports when you run
Gradle w connected Android test or

00:09:38.090 --> 00:09:38.100
Gradle w connected Android test or
 

00:09:38.100 --> 00:09:42.050
Gradle w connected Android test or
connected check for CI and we've also

00:09:42.050 --> 00:09:42.060
connected check for CI and we've also
 

00:09:42.060 --> 00:09:43.760
connected check for CI and we've also
got some Gradle tasks for CPU clock

00:09:43.760 --> 00:09:43.770
got some Gradle tasks for CPU clock
 

00:09:43.770 --> 00:09:45.280
got some Gradle tasks for CPU clock
stability in there as well

00:09:45.280 --> 00:09:45.290
stability in there as well
 

00:09:45.290 --> 00:09:48.260
stability in there as well
the test runner that's the Android

00:09:48.260 --> 00:09:48.270
the test runner that's the Android
 

00:09:48.270 --> 00:09:50.000
the test runner that's the Android
benchmark runner it's kind of an

00:09:50.000 --> 00:09:50.010
benchmark runner it's kind of an
 

00:09:50.010 --> 00:09:51.380
benchmark runner it's kind of an
in-depth topic so we'll talk more about

00:09:51.380 --> 00:09:51.390
in-depth topic so we'll talk more about
 

00:09:51.390 --> 00:09:53.900
in-depth topic so we'll talk more about
that later but suffice to say it's got a

00:09:53.900 --> 00:09:53.910
that later but suffice to say it's got a
 

00:09:53.910 --> 00:09:56.150
that later but suffice to say it's got a
lot of baked in tricks to stabilize your

00:09:56.150 --> 00:09:56.160
lot of baked in tricks to stabilize your
 

00:09:56.160 --> 00:09:59.510
lot of baked in tricks to stabilize your
benchmarks we've also got program rules

00:09:59.510 --> 00:09:59.520
benchmarks we've also got program rules
 

00:09:59.520 --> 00:10:03.290
benchmarks we've also got program rules
and that's in this file here our

00:10:03.290 --> 00:10:03.300
and that's in this file here our
 

00:10:03.300 --> 00:10:04.790
and that's in this file here our
template supplies pre-configured program

00:10:04.790 --> 00:10:04.800
template supplies pre-configured program
 

00:10:04.800 --> 00:10:06.410
template supplies pre-configured program
rules and that's important because

00:10:06.410 --> 00:10:06.420
rules and that's important because
 

00:10:06.420 --> 00:10:09.170
rules and that's important because
program optimizes your code so you want

00:10:09.170 --> 00:10:09.180
program optimizes your code so you want
 

00:10:09.180 --> 00:10:09.830
program optimizes your code so you want
to make sure you're running your

00:10:09.830 --> 00:10:09.840
to make sure you're running your
 

00:10:09.840 --> 00:10:11.300
to make sure you're running your
benchmark in a configuration it

00:10:11.300 --> 00:10:11.310
benchmark in a configuration it
 

00:10:11.310 --> 00:10:13.070
benchmark in a configuration it
represents real user performance right

00:10:13.070 --> 00:10:13.080
represents real user performance right
 

00:10:13.080 --> 00:10:14.420
represents real user performance right
so we want to do this at a release

00:10:14.420 --> 00:10:14.430
so we want to do this at a release
 

00:10:14.430 --> 00:10:15.980
so we want to do this at a release
production environment possible so

00:10:15.980 --> 00:10:15.990
production environment possible so
 

00:10:15.990 --> 00:10:17.740
production environment possible so
that's why we bundle these rules for you

00:10:17.740 --> 00:10:17.750
that's why we bundle these rules for you
 

00:10:17.750 --> 00:10:19.760
that's why we bundle these rules for you
and we realize that tests generally

00:10:19.760 --> 00:10:19.770
and we realize that tests generally
 

00:10:19.770 --> 00:10:22.340
and we realize that tests generally
don't use program or r8 but this is

00:10:22.340 --> 00:10:22.350
don't use program or r8 but this is
 

00:10:22.350 --> 00:10:24.080
don't use program or r8 but this is
important for benchmarks and it's

00:10:24.080 --> 00:10:24.090
important for benchmarks and it's
 

00:10:24.090 --> 00:10:25.070
important for benchmarks and it's
probably why we've set it up as a

00:10:25.070 --> 00:10:25.080
probably why we've set it up as a
 

00:10:25.080 --> 00:10:27.890
probably why we've set it up as a
separate module so we've also included

00:10:27.890 --> 00:10:27.900
separate module so we've also included
 

00:10:27.900 --> 00:10:29.480
separate module so we've also included
an Android manifest here that's gonna

00:10:29.480 --> 00:10:29.490
an Android manifest here that's gonna
 

00:10:29.490 --> 00:10:31.940
an Android manifest here that's gonna
run with your Android tests and if you

00:10:31.940 --> 00:10:31.950
run with your Android tests and if you
 

00:10:31.950 --> 00:10:33.950
run with your Android tests and if you
notice here we've set two bugaboo to be

00:10:33.950 --> 00:10:33.960
notice here we've set two bugaboo to be
 

00:10:33.960 --> 00:10:38.330
notice here we've set two bugaboo to be
false and one this is normally enabled

00:10:38.330 --> 00:10:38.340
false and one this is normally enabled
 

00:10:38.340 --> 00:10:40.520
false and one this is normally enabled
by default for tests it's great because

00:10:40.520 --> 00:10:40.530
by default for tests it's great because
 

00:10:40.530 --> 00:10:41.720
by default for tests it's great because
it allows us to use things like

00:10:41.720 --> 00:10:41.730
it allows us to use things like
 

00:10:41.730 --> 00:10:43.340
it allows us to use things like
connecting a debugger and use all of our

00:10:43.340 --> 00:10:43.350
connecting a debugger and use all of our
 

00:10:43.350 --> 00:10:44.990
connecting a debugger and use all of our
favorite debugging tools and it's great

00:10:44.990 --> 00:10:45.000
favorite debugging tools and it's great
 

00:10:45.000 --> 00:10:48.020
favorite debugging tools and it's great
when you're testing for correctness but

00:10:48.020 --> 00:10:48.030
when you're testing for correctness but
 

00:10:48.030 --> 00:10:50.330
when you're testing for correctness but
it's not so great for benchmarks we've

00:10:50.330 --> 00:10:50.340
it's not so great for benchmarks we've
 

00:10:50.340 --> 00:10:52.160
it's not so great for benchmarks we've
seen before that runs have been between

00:10:52.160 --> 00:10:52.170
seen before that runs have been between
 

00:10:52.170 --> 00:10:54.980
seen before that runs have been between
0 to 80 percent slower and 80 percent is

00:10:54.980 --> 00:10:54.990
0 to 80 percent slower and 80 percent is
 

00:10:54.990 --> 00:10:56.600
0 to 80 percent slower and 80 percent is
not the number that should be that

00:10:56.600 --> 00:10:56.610
not the number that should be that
 

00:10:56.610 --> 00:10:58.310
not the number that should be that
should be worrying you it's the - it's

00:10:58.310 --> 00:10:58.320
should be worrying you it's the - it's
 

00:10:58.320 --> 00:11:00.830
should be worrying you it's the - it's
the range the variability here it's hard

00:11:00.830 --> 00:11:00.840
the range the variability here it's hard
 

00:11:00.840 --> 00:11:03.080
the range the variability here it's hard
to account for let's take a look at

00:11:03.080 --> 00:11:03.090
to account for let's take a look at
 

00:11:03.090 --> 00:11:05.480
to account for let's take a look at
example here are some benchmarks we'll

00:11:05.480 --> 00:11:05.490
example here are some benchmarks we'll
 

00:11:05.490 --> 00:11:05.660
example here are some benchmarks we'll
be

00:11:05.660 --> 00:11:05.670
be
 

00:11:05.670 --> 00:11:08.240
be
an ASP that we use in the jet and in the

00:11:08.240 --> 00:11:08.250
an ASP that we use in the jet and in the
 

00:11:08.250 --> 00:11:10.280
an ASP that we use in the jet and in the
jet pack team and along the x-axis

00:11:10.280 --> 00:11:10.290
jet pack team and along the x-axis
 

00:11:10.290 --> 00:11:11.900
jet pack team and along the x-axis
you'll see several different types of

00:11:11.900 --> 00:11:11.910
you'll see several different types of
 

00:11:11.910 --> 00:11:14.270
you'll see several different types of
benchmarks that we do along the y-axis

00:11:14.270 --> 00:11:14.280
benchmarks that we do along the y-axis
 

00:11:14.280 --> 00:11:16.550
benchmarks that we do along the y-axis
is normalized duration how long the

00:11:16.550 --> 00:11:16.560
is normalized duration how long the
 

00:11:16.560 --> 00:11:18.500
is normalized duration how long the
benchmark took to run blue is with

00:11:18.500 --> 00:11:18.510
benchmark took to run blue is with
 

00:11:18.510 --> 00:11:20.420
benchmark took to run blue is with
tobacco false and red is with debuggable

00:11:20.420 --> 00:11:20.430
tobacco false and red is with debuggable
 

00:11:20.430 --> 00:11:23.350
tobacco false and red is with debuggable
on and we've normalized each benchmark

00:11:23.350 --> 00:11:23.360
on and we've normalized each benchmark
 

00:11:23.360 --> 00:11:25.580
on and we've normalized each benchmark
benchmark by benchmark not across the

00:11:25.580 --> 00:11:25.590
benchmark by benchmark not across the
 

00:11:25.590 --> 00:11:30.170
benchmark by benchmark not across the
board so you'll see here indeed the DCR

00:11:30.170 --> 00:11:30.180
board so you'll see here indeed the DCR
 

00:11:30.180 --> 00:11:32.090
board so you'll see here indeed the DCR
lays an example that there's hardly in a

00:11:32.090 --> 00:11:32.100
lays an example that there's hardly in a
 

00:11:32.100 --> 00:11:33.470
lays an example that there's hardly in a
difference if you look really closely

00:11:33.470 --> 00:11:33.480
difference if you look really closely
 

00:11:33.480 --> 00:11:35.780
difference if you look really closely
it's like one pixel off one percent

00:11:35.780 --> 00:11:35.790
it's like one pixel off one percent
 

00:11:35.790 --> 00:11:38.480
it's like one pixel off one percent
difference right but over here in the

00:11:38.480 --> 00:11:38.490
difference right but over here in the
 

00:11:38.490 --> 00:11:40.400
difference right but over here in the
inflates simple benchmark there's

00:11:40.400 --> 00:11:40.410
inflates simple benchmark there's
 

00:11:40.410 --> 00:11:42.170
inflates simple benchmark there's
there's a wide there's a huge difference

00:11:42.170 --> 00:11:42.180
there's a wide there's a huge difference
 

00:11:42.180 --> 00:11:44.660
there's a wide there's a huge difference
here and again the hard part here is the

00:11:44.660 --> 00:11:44.670
here and again the hard part here is the
 

00:11:44.670 --> 00:11:46.100
here and again the hard part here is the
variability it's really hard to account

00:11:46.100 --> 00:11:46.110
variability it's really hard to account
 

00:11:46.110 --> 00:11:48.050
variability it's really hard to account
for so we want to make sure that the

00:11:48.050 --> 00:11:48.060
for so we want to make sure that the
 

00:11:48.060 --> 00:11:49.700
for so we want to make sure that the
optimizations and the code change we're

00:11:49.700 --> 00:11:49.710
optimizations and the code change we're
 

00:11:49.710 --> 00:11:50.720
optimizations and the code change we're
making are actually going to have an

00:11:50.720 --> 00:11:50.730
making are actually going to have an
 

00:11:50.730 --> 00:11:52.280
making are actually going to have an
impact on our users we need to make sure

00:11:52.280 --> 00:11:52.290
impact on our users we need to make sure
 

00:11:52.290 --> 00:11:55.430
impact on our users we need to make sure
it's a buggy ball is off so that leaves

00:11:55.430 --> 00:11:55.440
it's a buggy ball is off so that leaves
 

00:11:55.440 --> 00:11:59.500
it's a buggy ball is off so that leaves
me about benchmark configuration and

00:11:59.500 --> 00:11:59.510
me about benchmark configuration and
 

00:11:59.510 --> 00:12:01.700
me about benchmark configuration and
here I just like to give some tips that

00:12:01.700 --> 00:12:01.710
here I just like to give some tips that
 

00:12:01.710 --> 00:12:03.470
here I just like to give some tips that
we that we also bundled with the

00:12:03.470 --> 00:12:03.480
we that we also bundled with the
 

00:12:03.480 --> 00:12:05.300
we that we also bundled with the
template but you should definitely be

00:12:05.300 --> 00:12:05.310
template but you should definitely be
 

00:12:05.310 --> 00:12:07.370
template but you should definitely be
setting up your benchmarks this way so

00:12:07.370 --> 00:12:07.380
setting up your benchmarks this way so
 

00:12:07.380 --> 00:12:09.500
setting up your benchmarks this way so
first as before we'd like to turn off

00:12:09.500 --> 00:12:09.510
first as before we'd like to turn off
 

00:12:09.510 --> 00:12:11.960
first as before we'd like to turn off
the bug ability we also want to make

00:12:11.960 --> 00:12:11.970
the bug ability we also want to make
 

00:12:11.970 --> 00:12:13.400
the bug ability we also want to make
sure code coverage is false if you're

00:12:13.400 --> 00:12:13.410
sure code coverage is false if you're
 

00:12:13.410 --> 00:12:14.810
sure code coverage is false if you're
using something like jacoco this

00:12:14.810 --> 00:12:14.820
using something like jacoco this
 

00:12:14.820 --> 00:12:16.760
using something like jacoco this
actually modifies the Dex in order to

00:12:16.760 --> 00:12:16.770
actually modifies the Dex in order to
 

00:12:16.770 --> 00:12:18.650
actually modifies the Dex in order to
support what it needs to do and that's

00:12:18.650 --> 00:12:18.660
support what it needs to do and that's
 

00:12:18.660 --> 00:12:20.120
support what it needs to do and that's
great if you're trying to if you're

00:12:20.120 --> 00:12:20.130
great if you're trying to if you're
 

00:12:20.130 --> 00:12:21.470
great if you're trying to if you're
trying to get code coverage but we're in

00:12:21.470 --> 00:12:21.480
trying to get code coverage but we're in
 

00:12:21.480 --> 00:12:22.490
trying to get code coverage but we're in
your bank sport but when you're running

00:12:22.490 --> 00:12:22.500
your bank sport but when you're running
 

00:12:22.500 --> 00:12:24.550
your bank sport but when you're running
a benchmark that's not so great

00:12:24.550 --> 00:12:24.560
a benchmark that's not so great
 

00:12:24.560 --> 00:12:26.810
a benchmark that's not so great
of course before you like to enable

00:12:26.810 --> 00:12:26.820
of course before you like to enable
 

00:12:26.820 --> 00:12:29.150
of course before you like to enable
ProGuard and we currently support

00:12:29.150 --> 00:12:29.160
ProGuard and we currently support
 

00:12:29.160 --> 00:12:31.670
ProGuard and we currently support
library modules for alpha 1 we're really

00:12:31.670 --> 00:12:31.680
library modules for alpha 1 we're really
 

00:12:31.680 --> 00:12:33.710
library modules for alpha 1 we're really
pushing developers to a module eyes or

00:12:33.710 --> 00:12:33.720
pushing developers to a module eyes or
 

00:12:33.720 --> 00:12:35.330
pushing developers to a module eyes or
app this year and I'd like to wreck I'd

00:12:35.330 --> 00:12:35.340
app this year and I'd like to wreck I'd
 

00:12:35.340 --> 00:12:36.620
app this year and I'd like to wreck I'd
like to do a little shout out please

00:12:36.620 --> 00:12:36.630
like to do a little shout out please
 

00:12:36.630 --> 00:12:37.910
like to do a little shout out please
check out the how to create a modular

00:12:37.910 --> 00:12:37.920
check out the how to create a modular
 

00:12:37.920 --> 00:12:39.680
check out the how to create a modular
Android app architecture talk that was

00:12:39.680 --> 00:12:39.690
Android app architecture talk that was
 

00:12:39.690 --> 00:12:41.180
Android app architecture talk that was
on Tuesday so you should go find that on

00:12:41.180 --> 00:12:41.190
on Tuesday so you should go find that on
 

00:12:41.190 --> 00:12:45.080
on Tuesday so you should go find that on
YouTube it's my Florina e but what if

00:12:45.080 --> 00:12:45.090
YouTube it's my Florina e but what if
 

00:12:45.090 --> 00:12:47.750
YouTube it's my Florina e but what if
you forget that's the library we can do

00:12:47.750 --> 00:12:47.760
you forget that's the library we can do
 

00:12:47.760 --> 00:12:50.120
you forget that's the library we can do
a lot but we can't do everything

00:12:50.120 --> 00:12:50.130
a lot but we can't do everything
 

00:12:50.130 --> 00:12:51.770
a lot but we can't do everything
we can't just print out a device and

00:12:51.770 --> 00:12:51.780
we can't just print out a device and
 

00:12:51.780 --> 00:12:53.480
we can't just print out a device and
have you run on that write that but that

00:12:53.480 --> 00:12:53.490
have you run on that write that but that
 

00:12:53.490 --> 00:12:55.060
have you run on that write that but that
would be great

00:12:55.060 --> 00:12:55.070
would be great
 

00:12:55.070 --> 00:12:58.880
would be great
fortunately we've got warnings so we're

00:12:58.880 --> 00:12:58.890
fortunately we've got warnings so we're
 

00:12:58.890 --> 00:12:59.930
fortunately we've got warnings so we're
going to we're going to corrupt our

00:12:59.930 --> 00:12:59.940
going to we're going to corrupt our
 

00:12:59.940 --> 00:13:01.460
going to we're going to corrupt our
output and make it very visible to you

00:13:01.460 --> 00:13:01.470
output and make it very visible to you
 

00:13:01.470 --> 00:13:02.750
output and make it very visible to you
and hopefully this is something that you

00:13:02.750 --> 00:13:02.760
and hopefully this is something that you
 

00:13:02.760 --> 00:13:04.160
and hopefully this is something that you
can catch in your continuous integration

00:13:04.160 --> 00:13:04.170
can catch in your continuous integration
 

00:13:04.170 --> 00:13:07.280
can catch in your continuous integration
tests so here's an example some couple

00:13:07.280 --> 00:13:07.290
tests so here's an example some couple
 

00:13:07.290 --> 00:13:09.290
tests so here's an example some couple
warnings the Bugaboos before if you're

00:13:09.290 --> 00:13:09.300
warnings the Bugaboos before if you're
 

00:13:09.300 --> 00:13:10.430
warnings the Bugaboos before if you're
running on an emulator that's also

00:13:10.430 --> 00:13:10.440
running on an emulator that's also
 

00:13:10.440 --> 00:13:12.320
running on an emulator that's also
pretty bad if you're missing the runner

00:13:12.320 --> 00:13:12.330
pretty bad if you're missing the runner
 

00:13:12.330 --> 00:13:13.670
pretty bad if you're missing the runner
then you're not using any of our tricks

00:13:13.670 --> 00:13:13.680
then you're not using any of our tricks
 

00:13:13.680 --> 00:13:15.740
then you're not using any of our tricks
to help stabilize your benchmarks and if

00:13:15.740 --> 00:13:15.750
to help stabilize your benchmarks and if
 

00:13:15.750 --> 00:13:17.960
to help stabilize your benchmarks and if
you're low on battery now a surprising

00:13:17.960 --> 00:13:17.970
you're low on battery now a surprising
 

00:13:17.970 --> 00:13:19.590
you're low on battery now a surprising
thing about low on being low on battery

00:13:19.590 --> 00:13:19.600
thing about low on being low on battery
 

00:13:19.600 --> 00:13:21.990
thing about low on being low on battery
is that well you might expect the device

00:13:21.990 --> 00:13:22.000
is that well you might expect the device
 

00:13:22.000 --> 00:13:23.579
is that well you might expect the device
will throttle itself right I'll try and

00:13:23.579 --> 00:13:23.589
will throttle itself right I'll try and
 

00:13:23.589 --> 00:13:26.220
will throttle itself right I'll try and
save power however we found that on many

00:13:26.220 --> 00:13:26.230
save power however we found that on many
 

00:13:26.230 --> 00:13:28.350
save power however we found that on many
devices it still does this even while

00:13:28.350 --> 00:13:28.360
devices it still does this even while
 

00:13:28.360 --> 00:13:29.579
devices it still does this even while
it's charging so this is definitely

00:13:29.579 --> 00:13:29.589
it's charging so this is definitely
 

00:13:29.589 --> 00:13:32.340
it's charging so this is definitely
something you want to watch out for so

00:13:32.340 --> 00:13:32.350
something you want to watch out for so
 

00:13:32.350 --> 00:13:33.629
something you want to watch out for so
that's a bit about what the library

00:13:33.629 --> 00:13:33.639
that's a bit about what the library
 

00:13:33.639 --> 00:13:35.280
that's a bit about what the library
looks like and how you would use it and

00:13:35.280 --> 00:13:35.290
looks like and how you would use it and
 

00:13:35.290 --> 00:13:36.689
looks like and how you would use it and
now Chris is going to talk about how it

00:13:36.689 --> 00:13:36.699
now Chris is going to talk about how it
 

00:13:36.699 --> 00:13:44.490
now Chris is going to talk about how it
works all right so that was a lot of

00:13:44.490 --> 00:13:44.500
works all right so that was a lot of
 

00:13:44.500 --> 00:13:46.319
works all right so that was a lot of
information about what it looks like to

00:13:46.319 --> 00:13:46.329
information about what it looks like to
 

00:13:46.329 --> 00:13:49.249
information about what it looks like to
use the library but there's a lot of

00:13:49.249 --> 00:13:49.259
use the library but there's a lot of
 

00:13:49.259 --> 00:13:51.540
use the library but there's a lot of
implementation behind it to implement

00:13:51.540 --> 00:13:51.550
implementation behind it to implement
 

00:13:51.550 --> 00:13:54.090
implementation behind it to implement
all of these behaviors that Dustin was

00:13:54.090 --> 00:13:54.100
all of these behaviors that Dustin was
 

00:13:54.100 --> 00:13:55.800
all of these behaviors that Dustin was
talking about so first of all let's talk

00:13:55.800 --> 00:13:55.810
talking about so first of all let's talk
 

00:13:55.810 --> 00:13:58.650
talking about so first of all let's talk
about CPU clock specifically frequency

00:13:58.650 --> 00:13:58.660
about CPU clock specifically frequency
 

00:13:58.660 --> 00:14:00.269
about CPU clock specifically frequency
and how it's kind of the enemy of

00:14:00.269 --> 00:14:00.279
and how it's kind of the enemy of
 

00:14:00.279 --> 00:14:02.490
and how it's kind of the enemy of
stability because when you go up and

00:14:02.490 --> 00:14:02.500
stability because when you go up and
 

00:14:02.500 --> 00:14:04.590
stability because when you go up and
down massively you change results and

00:14:04.590 --> 00:14:04.600
down massively you change results and
 

00:14:04.600 --> 00:14:06.509
down massively you change results and
you make it very hard to discover

00:14:06.509 --> 00:14:06.519
you make it very hard to discover
 

00:14:06.519 --> 00:14:09.809
you make it very hard to discover
regressions and improvements so from the

00:14:09.809 --> 00:14:09.819
regressions and improvements so from the
 

00:14:09.819 --> 00:14:11.069
regressions and improvements so from the
perspective of benchmarking there are

00:14:11.069 --> 00:14:11.079
perspective of benchmarking there are
 

00:14:11.079 --> 00:14:12.840
perspective of benchmarking there are
really two problems that CPU clocks

00:14:12.840 --> 00:14:12.850
really two problems that CPU clocks
 

00:14:12.850 --> 00:14:14.579
really two problems that CPU clocks
introduced to us and the first is

00:14:14.579 --> 00:14:14.589
introduced to us and the first is
 

00:14:14.589 --> 00:14:17.400
introduced to us and the first is
ramping um clocks generally start out

00:14:17.400 --> 00:14:17.410
ramping um clocks generally start out
 

00:14:17.410 --> 00:14:19.170
ramping um clocks generally start out
low when the device isn't doing anything

00:14:19.170 --> 00:14:19.180
low when the device isn't doing anything
 

00:14:19.180 --> 00:14:22.350
low when the device isn't doing anything
and then once once work is scheduler is

00:14:22.350 --> 00:14:22.360
and then once once work is scheduler is
 

00:14:22.360 --> 00:14:23.040
and then once once work is scheduler is
scheduled

00:14:23.040 --> 00:14:23.050
scheduled
 

00:14:23.050 --> 00:14:25.679
scheduled
they will ramp slowly over time in order

00:14:25.679 --> 00:14:25.689
they will ramp slowly over time in order
 

00:14:25.689 --> 00:14:28.769
they will ramp slowly over time in order
to get to a high performance mode on the

00:14:28.769 --> 00:14:28.779
to get to a high performance mode on the
 

00:14:28.779 --> 00:14:29.850
to get to a high performance mode on the
other side of this though when the

00:14:29.850 --> 00:14:29.860
other side of this though when the
 

00:14:29.860 --> 00:14:31.199
other side of this though when the
device gets hot because it's been

00:14:31.199 --> 00:14:31.209
device gets hot because it's been
 

00:14:31.209 --> 00:14:33.689
device gets hot because it's been
running for a long time it will dive the

00:14:33.689 --> 00:14:33.699
running for a long time it will dive the
 

00:14:33.699 --> 00:14:34.980
running for a long time it will dive the
clocks will dive quickly and you'll get

00:14:34.980 --> 00:14:34.990
clocks will dive quickly and you'll get
 

00:14:34.990 --> 00:14:37.259
clocks will dive quickly and you'll get
terrible performance so both of these

00:14:37.259 --> 00:14:37.269
terrible performance so both of these
 

00:14:37.269 --> 00:14:38.819
terrible performance so both of these
are problems let's talk about them one

00:14:38.819 --> 00:14:38.829
are problems let's talk about them one
 

00:14:38.829 --> 00:14:43.230
are problems let's talk about them one
at a time so first ramping clocks clocks

00:14:43.230 --> 00:14:43.240
at a time so first ramping clocks clocks
 

00:14:43.240 --> 00:14:45.030
at a time so first ramping clocks clocks
will generally increase under load and

00:14:45.030 --> 00:14:45.040
will generally increase under load and
 

00:14:45.040 --> 00:14:47.179
will generally increase under load and
what we've seen is that this takes about

00:14:47.179 --> 00:14:47.189
what we've seen is that this takes about
 

00:14:47.189 --> 00:14:51.509
what we've seen is that this takes about
100 milliseconds so here we have a clip

00:14:51.509 --> 00:14:51.519
100 milliseconds so here we have a clip
 

00:14:51.519 --> 00:14:52.860
100 milliseconds so here we have a clip
of a little sis trace here and the only

00:14:52.860 --> 00:14:52.870
of a little sis trace here and the only
 

00:14:52.870 --> 00:14:54.360
of a little sis trace here and the only
thing that's important to note is the

00:14:54.360 --> 00:14:54.370
thing that's important to note is the
 

00:14:54.370 --> 00:14:56.040
thing that's important to note is the
clock frequency at the bottom versus

00:14:56.040 --> 00:14:56.050
clock frequency at the bottom versus
 

00:14:56.050 --> 00:14:58.740
clock frequency at the bottom versus
when the work stop started on the top at

00:14:58.740 --> 00:14:58.750
when the work stop started on the top at
 

00:14:58.750 --> 00:15:01.019
when the work stop started on the top at
the very beginning of the trace you see

00:15:01.019 --> 00:15:01.029
the very beginning of the trace you see
 

00:15:01.029 --> 00:15:02.579
the very beginning of the trace you see
time equals zero milliseconds the

00:15:02.579 --> 00:15:02.589
time equals zero milliseconds the
 

00:15:02.589 --> 00:15:04.769
time equals zero milliseconds the
frequency is 300 megahertz incredibly

00:15:04.769 --> 00:15:04.779
frequency is 300 megahertz incredibly
 

00:15:04.779 --> 00:15:07.079
frequency is 300 megahertz incredibly
slow a frequency that most of your app

00:15:07.079 --> 00:15:07.089
slow a frequency that most of your app
 

00:15:07.089 --> 00:15:08.280
slow a frequency that most of your app
code is never going to see

00:15:08.280 --> 00:15:08.290
code is never going to see
 

00:15:08.290 --> 00:15:11.850
code is never going to see
however after about 75 milliseconds you

00:15:11.850 --> 00:15:11.860
however after about 75 milliseconds you
 

00:15:11.860 --> 00:15:14.160
however after about 75 milliseconds you
see that we go all the way up to 2.5 6

00:15:14.160 --> 00:15:14.170
see that we go all the way up to 2.5 6
 

00:15:14.170 --> 00:15:15.809
see that we go all the way up to 2.5 6
gigahertz if we were measuring in

00:15:15.809 --> 00:15:15.819
gigahertz if we were measuring in
 

00:15:15.819 --> 00:15:17.910
gigahertz if we were measuring in
between these two times that would be

00:15:17.910 --> 00:15:17.920
between these two times that would be
 

00:15:17.920 --> 00:15:20.189
between these two times that would be
bad however the solution for this is

00:15:20.189 --> 00:15:20.199
bad however the solution for this is
 

00:15:20.199 --> 00:15:21.840
bad however the solution for this is
actually pretty simple benchmark just

00:15:21.840 --> 00:15:21.850
actually pretty simple benchmark just
 

00:15:21.850 --> 00:15:24.030
actually pretty simple benchmark just
runs warm up in order to account for

00:15:24.030 --> 00:15:24.040
runs warm up in order to account for
 

00:15:24.040 --> 00:15:24.509
runs warm up in order to account for
this

00:15:24.509 --> 00:15:24.519
this
 

00:15:24.519 --> 00:15:27.240
this
so we spin the measurement loop for 250

00:15:27.240 --> 00:15:27.250
so we spin the measurement loop for 250
 

00:15:27.250 --> 00:15:29.429
so we spin the measurement loop for 250
milliseconds before we ever start

00:15:29.429 --> 00:15:29.439
milliseconds before we ever start
 

00:15:29.439 --> 00:15:31.230
milliseconds before we ever start
measuring and then we only start

00:15:31.230 --> 00:15:31.240
measuring and then we only start
 

00:15:31.240 --> 00:15:34.380
measuring and then we only start
measuring once tape timing stable

00:15:34.380 --> 00:15:34.390
measuring once tape timing stable
 

00:15:34.390 --> 00:15:37.060
measuring once tape timing stable
this also has the nice side effect of

00:15:37.060 --> 00:15:37.070
this also has the nice side effect of
 

00:15:37.070 --> 00:15:38.500
this also has the nice side effect of
handling the Android runtimes

00:15:38.500 --> 00:15:38.510
handling the Android runtimes
 

00:15:38.510 --> 00:15:40.600
handling the Android runtimes
just-in-time compilation by the time

00:15:40.600 --> 00:15:40.610
just-in-time compilation by the time
 

00:15:40.610 --> 00:15:41.740
just-in-time compilation by the time
that your performance numbers are

00:15:41.740 --> 00:15:41.750
that your performance numbers are
 

00:15:41.750 --> 00:15:43.960
that your performance numbers are
stabilizing JIT has stabilized as well

00:15:43.960 --> 00:15:43.970
stabilizing JIT has stabilized as well
 

00:15:43.970 --> 00:15:45.660
stabilizing JIT has stabilized as well
you're seeing performance that's

00:15:45.660 --> 00:15:45.670
you're seeing performance that's
 

00:15:45.670 --> 00:15:47.830
you're seeing performance that's
corresponding to what your your user

00:15:47.830 --> 00:15:47.840
corresponding to what your your user
 

00:15:47.840 --> 00:15:51.460
corresponding to what your your user
would see in a in a frequently hot code

00:15:51.460 --> 00:15:51.470
would see in a in a frequently hot code
 

00:15:51.470 --> 00:15:54.580
would see in a in a frequently hot code
path so that was ramping but diving is a

00:15:54.580 --> 00:15:54.590
path so that was ramping but diving is a
 

00:15:54.590 --> 00:15:56.530
path so that was ramping but diving is a
much bigger problem when the device gets

00:15:56.530 --> 00:15:56.540
much bigger problem when the device gets
 

00:15:56.540 --> 00:15:58.480
much bigger problem when the device gets
hot the clocks dive quickly and this is

00:15:58.480 --> 00:15:58.490
hot the clocks dive quickly and this is
 

00:15:58.490 --> 00:16:01.840
hot the clocks dive quickly and this is
called thermal throttling generally the

00:16:01.840 --> 00:16:01.850
called thermal throttling generally the
 

00:16:01.850 --> 00:16:03.730
called thermal throttling generally the
CPU will lower its frequency once it

00:16:03.730 --> 00:16:03.740
CPU will lower its frequency once it
 

00:16:03.740 --> 00:16:05.470
CPU will lower its frequency once it
gets to a very high level because it

00:16:05.470 --> 00:16:05.480
gets to a very high level because it
 

00:16:05.480 --> 00:16:07.180
gets to a very high level because it
wants to avoid overheating and damaging

00:16:07.180 --> 00:16:07.190
wants to avoid overheating and damaging
 

00:16:07.190 --> 00:16:11.260
wants to avoid overheating and damaging
the chip unexpectedly though this this

00:16:11.260 --> 00:16:11.270
the chip unexpectedly though this this
 

00:16:11.270 --> 00:16:13.300
the chip unexpectedly though this this
this can happen unexpectedly though and

00:16:13.300 --> 00:16:13.310
this can happen unexpectedly though and
 

00:16:13.310 --> 00:16:14.980
this can happen unexpectedly though and
massively affect performance while we're

00:16:14.980 --> 00:16:14.990
massively affect performance while we're
 

00:16:14.990 --> 00:16:17.710
massively affect performance while we're
running our benchmarks so take a look at

00:16:17.710 --> 00:16:17.720
running our benchmarks so take a look at
 

00:16:17.720 --> 00:16:19.360
running our benchmarks so take a look at
this sample where I'm just taking a

00:16:19.360 --> 00:16:19.370
this sample where I'm just taking a
 

00:16:19.370 --> 00:16:21.940
this sample where I'm just taking a
pretty simple benchmark it's just doing

00:16:21.940 --> 00:16:21.950
pretty simple benchmark it's just doing
 

00:16:21.950 --> 00:16:24.120
pretty simple benchmark it's just doing
a tiny bit of matrix math in the loop um

00:16:24.120 --> 00:16:24.130
a tiny bit of matrix math in the loop um
 

00:16:24.130 --> 00:16:27.010
a tiny bit of matrix math in the loop um
and at the beginning I'm getting

00:16:27.010 --> 00:16:27.020
and at the beginning I'm getting
 

00:16:27.020 --> 00:16:28.780
and at the beginning I'm getting
relatively stable performance over the

00:16:28.780 --> 00:16:28.790
relatively stable performance over the
 

00:16:28.790 --> 00:16:29.950
relatively stable performance over the
first minute or so it looks pretty

00:16:29.950 --> 00:16:29.960
first minute or so it looks pretty
 

00:16:29.960 --> 00:16:32.460
first minute or so it looks pretty
stable e at 2 milliseconds all as well

00:16:32.460 --> 00:16:32.470
stable e at 2 milliseconds all as well
 

00:16:32.470 --> 00:16:36.160
stable e at 2 milliseconds all as well
but less than a minute in performance

00:16:36.160 --> 00:16:36.170
but less than a minute in performance
 

00:16:36.170 --> 00:16:38.440
but less than a minute in performance
becomes terrible look at that

00:16:38.440 --> 00:16:38.450
becomes terrible look at that
 

00:16:38.450 --> 00:16:40.570
becomes terrible look at that
less than a minute listen two minutes in

00:16:40.570 --> 00:16:40.580
less than a minute listen two minutes in
 

00:16:40.580 --> 00:16:43.570
less than a minute listen two minutes in
we are up to three and a half times the

00:16:43.570 --> 00:16:43.580
we are up to three and a half times the
 

00:16:43.580 --> 00:16:47.050
we are up to three and a half times the
performance that we expect however the

00:16:47.050 --> 00:16:47.060
performance that we expect however the
 

00:16:47.060 --> 00:16:48.460
performance that we expect however the
device runs at this low clock for a

00:16:48.460 --> 00:16:48.470
device runs at this low clock for a
 

00:16:48.470 --> 00:16:50.470
device runs at this low clock for a
little while it cools down and it's back

00:16:50.470 --> 00:16:50.480
little while it cools down and it's back
 

00:16:50.480 --> 00:16:52.810
little while it cools down and it's back
down okay well we're good now right no

00:16:52.810 --> 00:16:52.820
down okay well we're good now right no
 

00:16:52.820 --> 00:16:55.180
down okay well we're good now right no
we're still doing the work so over the

00:16:55.180 --> 00:16:55.190
we're still doing the work so over the
 

00:16:55.190 --> 00:16:57.430
we're still doing the work so over the
result of this like five minute test we

00:16:57.430 --> 00:16:57.440
result of this like five minute test we
 

00:16:57.440 --> 00:16:59.500
result of this like five minute test we
have thermal throttling taking us up and

00:16:59.500 --> 00:16:59.510
have thermal throttling taking us up and
 

00:16:59.510 --> 00:17:02.410
have thermal throttling taking us up and
down and making these results pretty

00:17:02.410 --> 00:17:02.420
down and making these results pretty
 

00:17:02.420 --> 00:17:04.300
down and making these results pretty
terrible right like we can't extract a

00:17:04.300 --> 00:17:04.310
terrible right like we can't extract a
 

00:17:04.310 --> 00:17:05.710
terrible right like we can't extract a
whole lot of information from these

00:17:05.710 --> 00:17:05.720
whole lot of information from these
 

00:17:05.720 --> 00:17:07.420
whole lot of information from these
because we are dynamically going between

00:17:07.420 --> 00:17:07.430
because we are dynamically going between
 

00:17:07.430 --> 00:17:09.939
because we are dynamically going between
two and seven milliseconds we can't

00:17:09.939 --> 00:17:09.949
two and seven milliseconds we can't
 

00:17:09.949 --> 00:17:14.170
two and seven milliseconds we can't
trust these measurements so our solution

00:17:14.170 --> 00:17:14.180
trust these measurements so our solution
 

00:17:14.180 --> 00:17:17.710
trust these measurements so our solution
to throttling we found is is different

00:17:17.710 --> 00:17:17.720
to throttling we found is is different
 

00:17:17.720 --> 00:17:19.270
to throttling we found is is different
per device because we have different

00:17:19.270 --> 00:17:19.280
per device because we have different
 

00:17:19.280 --> 00:17:20.350
per device because we have different
tools that we can use in different

00:17:20.350 --> 00:17:20.360
tools that we can use in different
 

00:17:20.360 --> 00:17:24.600
tools that we can use in different
configurations so the first solution to

00:17:24.600 --> 00:17:24.610
configurations so the first solution to
 

00:17:24.610 --> 00:17:27.570
configurations so the first solution to
two thermal throttling is the simplest

00:17:27.570 --> 00:17:27.580
two thermal throttling is the simplest
 

00:17:27.580 --> 00:17:30.220
two thermal throttling is the simplest
lock clocks what if we could just set

00:17:30.220 --> 00:17:30.230
lock clocks what if we could just set
 

00:17:30.230 --> 00:17:31.840
lock clocks what if we could just set
the clock frequency well unfortunately

00:17:31.840 --> 00:17:31.850
the clock frequency well unfortunately
 

00:17:31.850 --> 00:17:35.050
the clock frequency well unfortunately
this this is ideal but this requires

00:17:35.050 --> 00:17:35.060
this this is ideal but this requires
 

00:17:35.060 --> 00:17:38.650
this this is ideal but this requires
route this is not a great solution for

00:17:38.650 --> 00:17:38.660
route this is not a great solution for
 

00:17:38.660 --> 00:17:40.600
route this is not a great solution for
the average person because although we

00:17:40.600 --> 00:17:40.610
the average person because although we
 

00:17:40.610 --> 00:17:42.070
the average person because although we
can set it to a minimum a medium

00:17:42.070 --> 00:17:42.080
can set it to a minimum a medium
 

00:17:42.080 --> 00:17:44.050
can set it to a minimum a medium
frequency this this will keep it from

00:17:44.050 --> 00:17:44.060
frequency this this will keep it from
 

00:17:44.060 --> 00:17:45.549
frequency this this will keep it from
thermal throttling because you know the

00:17:45.549 --> 00:17:45.559
thermal throttling because you know the
 

00:17:45.559 --> 00:17:48.519
thermal throttling because you know the
my sandals medium frequency just fine we

00:17:48.519 --> 00:17:48.529
my sandals medium frequency just fine we
 

00:17:48.529 --> 00:17:50.739
my sandals medium frequency just fine we
do provide a great plugin for for you

00:17:50.739 --> 00:17:50.749
do provide a great plugin for for you
 

00:17:50.749 --> 00:17:52.659
do provide a great plugin for for you
though if you do have a device that that

00:17:52.659 --> 00:17:52.669
though if you do have a device that that
 

00:17:52.669 --> 00:17:55.239
though if you do have a device that that
that is routed simply gradle w lock

00:17:55.239 --> 00:17:55.249
that is routed simply gradle w lock
 

00:17:55.249 --> 00:17:58.419
that is routed simply gradle w lock
clocks and your device is locked but

00:17:58.419 --> 00:17:58.429
clocks and your device is locked but
 

00:17:58.429 --> 00:18:00.100
clocks and your device is locked but
requiring route though is really not a

00:18:00.100 --> 00:18:00.110
requiring route though is really not a
 

00:18:00.110 --> 00:18:02.080
requiring route though is really not a
general solution we don't recommend it

00:18:02.080 --> 00:18:02.090
general solution we don't recommend it
 

00:18:02.090 --> 00:18:05.409
general solution we don't recommend it
so what else do we have well there was

00:18:05.409 --> 00:18:05.419
so what else do we have well there was
 

00:18:05.419 --> 00:18:08.350
so what else do we have well there was
this API added in Android in window dot

00:18:08.350 --> 00:18:08.360
this API added in Android in window dot
 

00:18:08.360 --> 00:18:10.690
this API added in Android in window dot
sis tet sustained performance mode and

00:18:10.690 --> 00:18:10.700
sis tet sustained performance mode and
 

00:18:10.700 --> 00:18:13.360
sis tet sustained performance mode and
this is was originally designed for VR

00:18:13.360 --> 00:18:13.370
this is was originally designed for VR
 

00:18:13.370 --> 00:18:14.799
this is was originally designed for VR
and for games but it's incredibly

00:18:14.799 --> 00:18:14.809
and for games but it's incredibly
 

00:18:14.809 --> 00:18:17.289
and for games but it's incredibly
appealing for benchmarks this is because

00:18:17.289 --> 00:18:17.299
appealing for benchmarks this is because
 

00:18:17.299 --> 00:18:19.600
appealing for benchmarks this is because
it lowers the max clocks specifically to

00:18:19.600 --> 00:18:19.610
it lowers the max clocks specifically to
 

00:18:19.610 --> 00:18:21.460
it lowers the max clocks specifically to
solve this problem prevent throttling

00:18:21.460 --> 00:18:21.470
solve this problem prevent throttling
 

00:18:21.470 --> 00:18:25.330
solve this problem prevent throttling
perfect right and it also works on GPUs

00:18:25.330 --> 00:18:25.340
perfect right and it also works on GPUs
 

00:18:25.340 --> 00:18:27.159
perfect right and it also works on GPUs
as well as CPU so it's even useful if

00:18:27.159 --> 00:18:27.169
as well as CPU so it's even useful if
 

00:18:27.169 --> 00:18:28.210
as well as CPU so it's even useful if
you're wanting to do rendering

00:18:28.210 --> 00:18:28.220
you're wanting to do rendering
 

00:18:28.220 --> 00:18:30.119
you're wanting to do rendering
benchmarking say if you're a game

00:18:30.119 --> 00:18:30.129
benchmarking say if you're a game
 

00:18:30.129 --> 00:18:32.409
benchmarking say if you're a game
however it comes along with a lot of

00:18:32.409 --> 00:18:32.419
however it comes along with a lot of
 

00:18:32.419 --> 00:18:34.810
however it comes along with a lot of
difficulties it's designed for VR not

00:18:34.810 --> 00:18:34.820
difficulties it's designed for VR not
 

00:18:34.820 --> 00:18:38.320
difficulties it's designed for VR not
for headless benchmarks so first of all

00:18:38.320 --> 00:18:38.330
for headless benchmarks so first of all
 

00:18:38.330 --> 00:18:40.060
for headless benchmarks so first of all
it requires an activity running with a

00:18:40.060 --> 00:18:40.070
it requires an activity running with a
 

00:18:40.070 --> 00:18:43.119
it requires an activity running with a
flag set it also has two separate modes

00:18:43.119 --> 00:18:43.129
flag set it also has two separate modes
 

00:18:43.129 --> 00:18:44.350
flag set it also has two separate modes
if it thinks that you're a single

00:18:44.350 --> 00:18:44.360
if it thinks that you're a single
 

00:18:44.360 --> 00:18:46.810
if it thinks that you're a single
threaded versus multi-threaded and it's

00:18:46.810 --> 00:18:46.820
threaded versus multi-threaded and it's
 

00:18:46.820 --> 00:18:49.529
threaded versus multi-threaded and it's
also only supported on some N+ devices

00:18:49.529 --> 00:18:49.539
also only supported on some N+ devices
 

00:18:49.539 --> 00:18:51.460
also only supported on some N+ devices
so let's talk through each of these

00:18:51.460 --> 00:18:51.470
so let's talk through each of these
 

00:18:51.470 --> 00:18:53.470
so let's talk through each of these
maybe we can solve some of this so the

00:18:53.470 --> 00:18:53.480
maybe we can solve some of this so the
 

00:18:53.480 --> 00:18:57.039
maybe we can solve some of this so the
first is the activity flag and we in

00:18:57.039 --> 00:18:57.049
first is the activity flag and we in
 

00:18:57.049 --> 00:18:58.720
first is the activity flag and we in
order to solve this problem we actually

00:18:58.720 --> 00:18:58.730
order to solve this problem we actually
 

00:18:58.730 --> 00:19:00.940
order to solve this problem we actually
just launch an activity for you around

00:19:00.940 --> 00:19:00.950
just launch an activity for you around
 

00:19:00.950 --> 00:19:03.249
just launch an activity for you around
any headless test we inject an activity

00:19:03.249 --> 00:19:03.259
any headless test we inject an activity
 

00:19:03.259 --> 00:19:05.019
any headless test we inject an activity
that launches any time that we might

00:19:05.019 --> 00:19:05.029
that launches any time that we might
 

00:19:05.029 --> 00:19:05.950
that launches any time that we might
need to use the set sustained

00:19:05.950 --> 00:19:05.960
need to use the set sustained
 

00:19:05.960 --> 00:19:07.810
need to use the set sustained
performance mode so that it's up at all

00:19:07.810 --> 00:19:07.820
performance mode so that it's up at all
 

00:19:07.820 --> 00:19:10.810
performance mode so that it's up at all
times we set this flag also on any

00:19:10.810 --> 00:19:10.820
times we set this flag also on any
 

00:19:10.820 --> 00:19:12.279
times we set this flag also on any
activities that you launched so if

00:19:12.279 --> 00:19:12.289
activities that you launched so if
 

00:19:12.289 --> 00:19:13.960
activities that you launched so if
you're doing a UI test like Dustin was

00:19:13.960 --> 00:19:13.970
you're doing a UI test like Dustin was
 

00:19:13.970 --> 00:19:15.190
you're doing a UI test like Dustin was
showing before with the recyclerview

00:19:15.190 --> 00:19:15.200
showing before with the recyclerview
 

00:19:15.200 --> 00:19:18.519
showing before with the recyclerview
that gets this property as well and it

00:19:18.519 --> 00:19:18.529
that gets this property as well and it
 

00:19:18.529 --> 00:19:20.259
that gets this property as well and it
works together with activity test rule

00:19:20.259 --> 00:19:20.269
works together with activity test rule
 

00:19:20.269 --> 00:19:21.940
works together with activity test rule
and activity scenario so you don't have

00:19:21.940 --> 00:19:21.950
and activity scenario so you don't have
 

00:19:21.950 --> 00:19:24.190
and activity scenario so you don't have
to worry about adapting to this new

00:19:24.190 --> 00:19:24.200
to worry about adapting to this new
 

00:19:24.200 --> 00:19:27.820
to worry about adapting to this new
model and in addition it also calls it

00:19:27.820 --> 00:19:27.830
model and in addition it also calls it
 

00:19:27.830 --> 00:19:29.889
model and in addition it also calls it
out in the UI of the test while it's

00:19:29.889 --> 00:19:29.899
out in the UI of the test while it's
 

00:19:29.899 --> 00:19:31.659
out in the UI of the test while it's
running it pops up there says hey I'm in

00:19:31.659 --> 00:19:31.669
running it pops up there says hey I'm in
 

00:19:31.669 --> 00:19:34.769
running it pops up there says hey I'm in
sustain set sustained performance mode

00:19:34.769 --> 00:19:34.779
sustain set sustained performance mode
 

00:19:34.779 --> 00:19:37.869
sustain set sustained performance mode
now okay so we've got a way to to solve

00:19:37.869 --> 00:19:37.879
now okay so we've got a way to to solve
 

00:19:37.879 --> 00:19:39.549
now okay so we've got a way to to solve
the problem of needing the flag but how

00:19:39.549 --> 00:19:39.559
the problem of needing the flag but how
 

00:19:39.559 --> 00:19:41.109
the problem of needing the flag but how
do we handle the two different modes so

00:19:41.109 --> 00:19:41.119
do we handle the two different modes so
 

00:19:41.119 --> 00:19:42.720
do we handle the two different modes so
so first let's describe what these are

00:19:42.720 --> 00:19:42.730
so first let's describe what these are
 

00:19:42.730 --> 00:19:45.460
so first let's describe what these are
the sets of same performance mode can

00:19:45.460 --> 00:19:45.470
the sets of same performance mode can
 

00:19:45.470 --> 00:19:46.869
the sets of same performance mode can
either operate in a single or a

00:19:46.869 --> 00:19:46.879
either operate in a single or a
 

00:19:46.879 --> 00:19:48.399
either operate in a single or a
multi-threaded mode either that means

00:19:48.399 --> 00:19:48.409
multi-threaded mode either that means
 

00:19:48.409 --> 00:19:50.700
multi-threaded mode either that means
you have one your single threaded

00:19:50.700 --> 00:19:50.710
you have one your single threaded
 

00:19:50.710 --> 00:19:53.049
you have one your single threaded
application so we can use we could

00:19:53.049 --> 00:19:53.059
application so we can use we could
 

00:19:53.059 --> 00:19:54.669
application so we can use we could
probably use one core at max frequency

00:19:54.669 --> 00:19:54.679
probably use one core at max frequency
 

00:19:54.679 --> 00:19:56.799
probably use one core at max frequency
all right or your multi-threaded in

00:19:56.799 --> 00:19:56.809
all right or your multi-threaded in
 

00:19:56.809 --> 00:19:58.720
all right or your multi-threaded in
which case it will set all of the cores

00:19:58.720 --> 00:19:58.730
which case it will set all of the cores
 

00:19:58.730 --> 00:19:59.020
which case it will set all of the cores
to

00:19:59.020 --> 00:19:59.030
to
 

00:19:59.030 --> 00:20:00.910
to
lower-frequency ought to prevent

00:20:00.910 --> 00:20:00.920
lower-frequency ought to prevent
 

00:20:00.920 --> 00:20:03.610
lower-frequency ought to prevent
throttling let's find for a game but

00:20:03.610 --> 00:20:03.620
throttling let's find for a game but
 

00:20:03.620 --> 00:20:05.260
throttling let's find for a game but
we're trying to run potentially

00:20:05.260 --> 00:20:05.270
we're trying to run potentially
 

00:20:05.270 --> 00:20:06.880
we're trying to run potentially
different benchmarks with different

00:20:06.880 --> 00:20:06.890
different benchmarks with different
 

00:20:06.890 --> 00:20:08.500
different benchmarks with different
threading models and switching between

00:20:08.500 --> 00:20:08.510
threading models and switching between
 

00:20:08.510 --> 00:20:11.970
threading models and switching between
these modes will create inconsistency so

00:20:11.970 --> 00:20:11.980
these modes will create inconsistency so
 

00:20:11.980 --> 00:20:14.110
these modes will create inconsistency so
what do we do about this problem like

00:20:14.110 --> 00:20:14.120
what do we do about this problem like
 

00:20:14.120 --> 00:20:16.150
what do we do about this problem like
how do we make we really like to just

00:20:16.150 --> 00:20:16.160
how do we make we really like to just
 

00:20:16.160 --> 00:20:17.590
how do we make we really like to just
pick the multi-threaded mode that's the

00:20:17.590 --> 00:20:17.600
pick the multi-threaded mode that's the
 

00:20:17.600 --> 00:20:19.480
pick the multi-threaded mode that's the
lower of both that sounds good but how

00:20:19.480 --> 00:20:19.490
lower of both that sounds good but how
 

00:20:19.490 --> 00:20:22.660
lower of both that sounds good but how
do we force that well the way that we do

00:20:22.660 --> 00:20:22.670
do we force that well the way that we do
 

00:20:22.670 --> 00:20:25.080
do we force that well the way that we do
this is in our android benchmark runner

00:20:25.080 --> 00:20:25.090
this is in our android benchmark runner
 

00:20:25.090 --> 00:20:27.870
this is in our android benchmark runner
win sustained performance mode is in use

00:20:27.870 --> 00:20:27.880
win sustained performance mode is in use
 

00:20:27.880 --> 00:20:31.950
win sustained performance mode is in use
we create a new thread and this thread

00:20:31.950 --> 00:20:31.960
we create a new thread and this thread
 

00:20:31.960 --> 00:20:36.580
we create a new thread and this thread
spins and this is a really strange way

00:20:36.580 --> 00:20:36.590
spins and this is a really strange way
 

00:20:36.590 --> 00:20:37.990
spins and this is a really strange way
to do this but it turns out that this is

00:20:37.990 --> 00:20:38.000
to do this but it turns out that this is
 

00:20:38.000 --> 00:20:41.710
to do this but it turns out that this is
actually a pretty efficient way to to

00:20:41.710 --> 00:20:41.720
actually a pretty efficient way to to
 

00:20:41.720 --> 00:20:43.420
actually a pretty efficient way to to
force us into a multi-threaded mode and

00:20:43.420 --> 00:20:43.430
force us into a multi-threaded mode and
 

00:20:43.430 --> 00:20:45.640
force us into a multi-threaded mode and
it gives us that incredibly sustained

00:20:45.640 --> 00:20:45.650
it gives us that incredibly sustained
 

00:20:45.650 --> 00:20:46.930
it gives us that incredibly sustained
performance that we were looking for we

00:20:46.930 --> 00:20:46.940
performance that we were looking for we
 

00:20:46.940 --> 00:20:48.580
performance that we were looking for we
are also you know set a knit thread name

00:20:48.580 --> 00:20:48.590
are also you know set a knit thread name
 

00:20:48.590 --> 00:20:50.110
are also you know set a knit thread name
for it so if you see this in a trace you

00:20:50.110 --> 00:20:50.120
for it so if you see this in a trace you
 

00:20:50.120 --> 00:20:52.060
for it so if you see this in a trace you
understand what's going on and we do the

00:20:52.060 --> 00:20:52.070
understand what's going on and we do the
 

00:20:52.070 --> 00:20:54.010
understand what's going on and we do the
best we can we set thread priority to be

00:20:54.010 --> 00:20:54.020
best we can we set thread priority to be
 

00:20:54.020 --> 00:20:55.270
best we can we set thread priority to be
the lowest possible so that it

00:20:55.270 --> 00:20:55.280
the lowest possible so that it
 

00:20:55.280 --> 00:20:58.090
the lowest possible so that it
interferes with your test minimally but

00:20:58.090 --> 00:20:58.100
interferes with your test minimally but
 

00:20:58.100 --> 00:20:59.620
interferes with your test minimally but
here's a look at what that looks like in

00:20:59.620 --> 00:20:59.630
here's a look at what that looks like in
 

00:20:59.630 --> 00:21:01.510
here's a look at what that looks like in
systrace so on the top there you can see

00:21:01.510 --> 00:21:01.520
systrace so on the top there you can see
 

00:21:01.520 --> 00:21:04.510
systrace so on the top there you can see
clock frequency and over the time of the

00:21:04.510 --> 00:21:04.520
clock frequency and over the time of the
 

00:21:04.520 --> 00:21:06.280
clock frequency and over the time of the
benchmark running when the test starts

00:21:06.280 --> 00:21:06.290
benchmark running when the test starts
 

00:21:06.290 --> 00:21:08.290
benchmark running when the test starts
the activity launches BAM were suddenly

00:21:08.290 --> 00:21:08.300
the activity launches BAM were suddenly
 

00:21:08.300 --> 00:21:11.440
the activity launches BAM were suddenly
locked to half clocks perfect we're not

00:21:11.440 --> 00:21:11.450
locked to half clocks perfect we're not
 

00:21:11.450 --> 00:21:12.520
locked to half clocks perfect we're not
going to thermal throttle in that

00:21:12.520 --> 00:21:12.530
going to thermal throttle in that
 

00:21:12.530 --> 00:21:14.860
going to thermal throttle in that
configuration once the test is done the

00:21:14.860 --> 00:21:14.870
configuration once the test is done the
 

00:21:14.870 --> 00:21:17.350
configuration once the test is done the
activity finish finishes and then the

00:21:17.350 --> 00:21:17.360
activity finish finishes and then the
 

00:21:17.360 --> 00:21:18.910
activity finish finishes and then the
clocks are free to ramp back up slowly

00:21:18.910 --> 00:21:18.920
clocks are free to ramp back up slowly
 

00:21:18.920 --> 00:21:22.690
clocks are free to ramp back up slowly
over time so we talked about how we

00:21:22.690 --> 00:21:22.700
over time so we talked about how we
 

00:21:22.700 --> 00:21:24.670
over time so we talked about how we
solved the issue with having an activity

00:21:24.670 --> 00:21:24.680
solved the issue with having an activity
 

00:21:24.680 --> 00:21:26.710
solved the issue with having an activity
running with a flag set we talked about

00:21:26.710 --> 00:21:26.720
running with a flag set we talked about
 

00:21:26.720 --> 00:21:28.510
running with a flag set we talked about
the two different modes but we still

00:21:28.510 --> 00:21:28.520
the two different modes but we still
 

00:21:28.520 --> 00:21:29.860
the two different modes but we still
have this last issue this is only on

00:21:29.860 --> 00:21:29.870
have this last issue this is only on
 

00:21:29.870 --> 00:21:33.370
have this last issue this is only on
some n plus devices so you can check

00:21:33.370 --> 00:21:33.380
some n plus devices so you can check
 

00:21:33.380 --> 00:21:34.960
some n plus devices so you can check
whether this is supported on a specific

00:21:34.960 --> 00:21:34.970
whether this is supported on a specific
 

00:21:34.970 --> 00:21:37.060
whether this is supported on a specific
device by calling power manager is the

00:21:37.060 --> 00:21:37.070
device by calling power manager is the
 

00:21:37.070 --> 00:21:39.490
device by calling power manager is the
same the same performance mode supported

00:21:39.490 --> 00:21:39.500
same the same performance mode supported
 

00:21:39.500 --> 00:21:40.570
same the same performance mode supported
by the way this is supported for

00:21:40.570 --> 00:21:40.580
by the way this is supported for
 

00:21:40.580 --> 00:21:42.580
by the way this is supported for
anything that is VR certified so you

00:21:42.580 --> 00:21:42.590
anything that is VR certified so you
 

00:21:42.590 --> 00:21:44.980
anything that is VR certified so you
have that however in the firebase test

00:21:44.980 --> 00:21:44.990
have that however in the firebase test
 

00:21:44.990 --> 00:21:48.460
have that however in the firebase test
lab for example 11 out of the 17 nougat

00:21:48.460 --> 00:21:48.470
lab for example 11 out of the 17 nougat
 

00:21:48.470 --> 00:21:51.520
lab for example 11 out of the 17 nougat
plus OS device combos have support for

00:21:51.520 --> 00:21:51.530
plus OS device combos have support for
 

00:21:51.530 --> 00:21:53.200
plus OS device combos have support for
it so it's not terribly hard to find

00:21:53.200 --> 00:21:53.210
it so it's not terribly hard to find
 

00:21:53.210 --> 00:21:54.490
it so it's not terribly hard to find
something that you can use like this for

00:21:54.490 --> 00:21:54.500
something that you can use like this for
 

00:21:54.500 --> 00:21:58.240
something that you can use like this for
CI but again this is still not a general

00:21:58.240 --> 00:21:58.250
CI but again this is still not a general
 

00:21:58.250 --> 00:22:00.340
CI but again this is still not a general
solution this requires platform support

00:22:00.340 --> 00:22:00.350
solution this requires platform support
 

00:22:00.350 --> 00:22:02.980
solution this requires platform support
that isn't available on every phone so

00:22:02.980 --> 00:22:02.990
that isn't available on every phone so
 

00:22:02.990 --> 00:22:05.320
that isn't available on every phone so
our final solution to this problem at

00:22:05.320 --> 00:22:05.330
our final solution to this problem at
 

00:22:05.330 --> 00:22:10.110
our final solution to this problem at
the very end here is the red dot sleep

00:22:10.110 --> 00:22:10.120
the very end here is the red dot sleep
 

00:22:10.120 --> 00:22:13.019
the very end here is the red dot sleep
the simplest solution we don't have many

00:22:13.019 --> 00:22:13.029
the simplest solution we don't have many
 

00:22:13.029 --> 00:22:15.180
the simplest solution we don't have many
devices aren't rooted many devices don't

00:22:15.180 --> 00:22:15.190
devices aren't rooted many devices don't
 

00:22:15.190 --> 00:22:17.760
devices aren't rooted many devices don't
have sustained performance mode so we

00:22:17.760 --> 00:22:17.770
have sustained performance mode so we
 

00:22:17.770 --> 00:22:20.370
have sustained performance mode so we
use the Red Dot sleep so what we do here

00:22:20.370 --> 00:22:20.380
use the Red Dot sleep so what we do here
 

00:22:20.380 --> 00:22:22.980
use the Red Dot sleep so what we do here
is we use a we detect a slowdown in

00:22:22.980 --> 00:22:22.990
is we use a we detect a slowdown in
 

00:22:22.990 --> 00:22:24.570
is we use a we detect a slowdown in
between every benchmark by running a

00:22:24.570 --> 00:22:24.580
between every benchmark by running a
 

00:22:24.580 --> 00:22:27.029
between every benchmark by running a
little tiny mini benchmark to see if the

00:22:27.029 --> 00:22:27.039
little tiny mini benchmark to see if the
 

00:22:27.039 --> 00:22:29.490
little tiny mini benchmark to see if the
device has started thermal throttling if

00:22:29.490 --> 00:22:29.500
device has started thermal throttling if
 

00:22:29.500 --> 00:22:31.769
device has started thermal throttling if
if it does we throw away the current

00:22:31.769 --> 00:22:31.779
if it does we throw away the current
 

00:22:31.779 --> 00:22:34.019
if it does we throw away the current
benchmark data and we sleep to let the

00:22:34.019 --> 00:22:34.029
benchmark data and we sleep to let the
 

00:22:34.029 --> 00:22:37.230
benchmark data and we sleep to let the
device cool down so we saw this previous

00:22:37.230 --> 00:22:37.240
device cool down so we saw this previous
 

00:22:37.240 --> 00:22:40.320
device cool down so we saw this previous
slide how performance was oscillating

00:22:40.320 --> 00:22:40.330
slide how performance was oscillating
 

00:22:40.330 --> 00:22:42.120
slide how performance was oscillating
all over the place and we couldn't get

00:22:42.120 --> 00:22:42.130
all over the place and we couldn't get
 

00:22:42.130 --> 00:22:44.700
all over the place and we couldn't get
stable numbers out of this well in this

00:22:44.700 --> 00:22:44.710
stable numbers out of this well in this
 

00:22:44.710 --> 00:22:47.010
stable numbers out of this well in this
particular case our device doesn't have

00:22:47.010 --> 00:22:47.020
particular case our device doesn't have
 

00:22:47.020 --> 00:22:50.669
particular case our device doesn't have
root so we can't use clock clocks it

00:22:50.669 --> 00:22:50.679
root so we can't use clock clocks it
 

00:22:50.679 --> 00:22:52.260
root so we can't use clock clocks it
can't use that sustained performance

00:22:52.260 --> 00:22:52.270
can't use that sustained performance
 

00:22:52.270 --> 00:22:54.120
can't use that sustained performance
mode not available okay can't use that

00:22:54.120 --> 00:22:54.130
mode not available okay can't use that
 

00:22:54.130 --> 00:22:56.549
mode not available okay can't use that
so we have to fall back on thread dot

00:22:56.549 --> 00:22:56.559
so we have to fall back on thread dot
 

00:22:56.559 --> 00:22:58.769
so we have to fall back on thread dot
sleep so let's see how that actually

00:22:58.769 --> 00:22:58.779
sleep so let's see how that actually
 

00:22:58.779 --> 00:23:03.450
sleep so let's see how that actually
performs in this graph that is a lot

00:23:03.450 --> 00:23:03.460
performs in this graph that is a lot
 

00:23:03.460 --> 00:23:05.580
performs in this graph that is a lot
better it is it is just completely flat

00:23:05.580 --> 00:23:05.590
better it is it is just completely flat
 

00:23:05.590 --> 00:23:07.799
better it is it is just completely flat
and if you see here we have standard

00:23:07.799 --> 00:23:07.809
and if you see here we have standard
 

00:23:07.809 --> 00:23:08.789
and if you see here we have standard
deviation for the two different

00:23:08.789 --> 00:23:08.799
deviation for the two different
 

00:23:08.799 --> 00:23:11.159
deviation for the two different
approaches for the default we've got

00:23:11.159 --> 00:23:11.169
approaches for the default we've got
 

00:23:11.169 --> 00:23:14.250
approaches for the default we've got
2.25 milliseconds and for thread not

00:23:14.250 --> 00:23:14.260
2.25 milliseconds and for thread not
 

00:23:14.260 --> 00:23:17.000
2.25 milliseconds and for thread not
sleep if you look closely point O two

00:23:17.000 --> 00:23:17.010
sleep if you look closely point O two
 

00:23:17.010 --> 00:23:19.680
sleep if you look closely point O two
milliseconds massively more stable much

00:23:19.680 --> 00:23:19.690
milliseconds massively more stable much
 

00:23:19.690 --> 00:23:22.200
milliseconds massively more stable much
more consistent performance but there

00:23:22.200 --> 00:23:22.210
more consistent performance but there
 

00:23:22.210 --> 00:23:24.570
more consistent performance but there
was a sacrifice with this so because we

00:23:24.570 --> 00:23:24.580
was a sacrifice with this so because we
 

00:23:24.580 --> 00:23:25.649
was a sacrifice with this so because we
were sleeping every time that we

00:23:25.649 --> 00:23:25.659
were sleeping every time that we
 

00:23:25.659 --> 00:23:26.940
were sleeping every time that we
detected thermal throttling it takes

00:23:26.940 --> 00:23:26.950
detected thermal throttling it takes
 

00:23:26.950 --> 00:23:28.409
detected thermal throttling it takes
longer to run this one takes about eight

00:23:28.409 --> 00:23:28.419
longer to run this one takes about eight
 

00:23:28.419 --> 00:23:30.389
longer to run this one takes about eight
minutes the original takes about four

00:23:30.389 --> 00:23:30.399
minutes the original takes about four
 

00:23:30.399 --> 00:23:34.680
minutes the original takes about four
and a half so in summary our solution

00:23:34.680 --> 00:23:34.690
and a half so in summary our solution
 

00:23:34.690 --> 00:23:36.930
and a half so in summary our solution
for thermal strategy does have three

00:23:36.930 --> 00:23:36.940
for thermal strategy does have three
 

00:23:36.940 --> 00:23:38.730
for thermal strategy does have three
different steps and we use the best

00:23:38.730 --> 00:23:38.740
different steps and we use the best
 

00:23:38.740 --> 00:23:40.260
different steps and we use the best
solution for your device that's

00:23:40.260 --> 00:23:40.270
solution for your device that's
 

00:23:40.270 --> 00:23:43.490
solution for your device that's
available for your particular phone so

00:23:43.490 --> 00:23:43.500
available for your particular phone so
 

00:23:43.500 --> 00:23:45.570
available for your particular phone so
clocks are one thing but what about

00:23:45.570 --> 00:23:45.580
clocks are one thing but what about
 

00:23:45.580 --> 00:23:47.190
clocks are one thing but what about
background interference what about other

00:23:47.190 --> 00:23:47.200
background interference what about other
 

00:23:47.200 --> 00:23:50.430
background interference what about other
things running on your device so first

00:23:50.430 --> 00:23:50.440
things running on your device so first
 

00:23:50.440 --> 00:23:54.269
things running on your device so first
of all you have to ask am I in the

00:23:54.269 --> 00:23:54.279
of all you have to ask am I in the
 

00:23:54.279 --> 00:23:57.960
of all you have to ask am I in the
foreground so if you're not something

00:23:57.960 --> 00:23:57.970
foreground so if you're not something
 

00:23:57.970 --> 00:23:59.460
foreground so if you're not something
else is and this is important to think

00:23:59.460 --> 00:23:59.470
else is and this is important to think
 

00:23:59.470 --> 00:24:02.600
else is and this is important to think
about in the context of performance

00:24:02.600 --> 00:24:02.610
about in the context of performance
 

00:24:02.610 --> 00:24:05.549
about in the context of performance
tests generally run if they're if they

00:24:05.549 --> 00:24:05.559
tests generally run if they're if they
 

00:24:05.559 --> 00:24:08.490
tests generally run if they're if they
don't have UI with the on say top of the

00:24:08.490 --> 00:24:08.500
don't have UI with the on say top of the
 

00:24:08.500 --> 00:24:09.870
don't have UI with the on say top of the
launcher because there's nothing to

00:24:09.870 --> 00:24:09.880
launcher because there's nothing to
 

00:24:09.880 --> 00:24:12.510
launcher because there's nothing to
launch nothing to display however this

00:24:12.510 --> 00:24:12.520
launch nothing to display however this
 

00:24:12.520 --> 00:24:14.549
launch nothing to display however this
means that the OS thinks the launcher

00:24:14.549 --> 00:24:14.559
means that the OS thinks the launcher
 

00:24:14.559 --> 00:24:17.820
means that the OS thinks the launcher
right now is the important app when

00:24:17.820 --> 00:24:17.830
right now is the important app when
 

00:24:17.830 --> 00:24:18.899
right now is the important app when
you're running in the background

00:24:18.899 --> 00:24:18.909
you're running in the background
 

00:24:18.909 --> 00:24:20.639
you're running in the background
say for instance behind the launcher

00:24:20.639 --> 00:24:20.649
say for instance behind the launcher
 

00:24:20.649 --> 00:24:22.080
say for instance behind the launcher
that means you get a lot of sources of

00:24:22.080 --> 00:24:22.090
that means you get a lot of sources of
 

00:24:22.090 --> 00:24:23.550
that means you get a lot of sources of
potential performance interference

00:24:23.550 --> 00:24:23.560
potential performance interference
 

00:24:23.560 --> 00:24:25.560
potential performance interference
you might have a law live wallpaper

00:24:25.560 --> 00:24:25.570
you might have a law live wallpaper
 

00:24:25.570 --> 00:24:27.480
you might have a law live wallpaper
rendering you might have home screen

00:24:27.480 --> 00:24:27.490
rendering you might have home screen
 

00:24:27.490 --> 00:24:29.490
rendering you might have home screen
widgets updating you could have the

00:24:29.490 --> 00:24:29.500
widgets updating you could have the
 

00:24:29.500 --> 00:24:30.990
widgets updating you could have the
launcher doing hot word detection or

00:24:30.990 --> 00:24:31.000
launcher doing hot word detection or
 

00:24:31.000 --> 00:24:32.460
launcher doing hot word detection or
other miscellaneous work that you don't

00:24:32.460 --> 00:24:32.470
other miscellaneous work that you don't
 

00:24:32.470 --> 00:24:35.340
other miscellaneous work that you don't
know about the status bar is probably

00:24:35.340 --> 00:24:35.350
know about the status bar is probably
 

00:24:35.350 --> 00:24:37.380
know about the status bar is probably
repainting every now and then with like

00:24:37.380 --> 00:24:37.390
repainting every now and then with like
 

00:24:37.390 --> 00:24:39.030
repainting every now and then with like
a notification coming up the clocks

00:24:39.030 --> 00:24:39.040
a notification coming up the clocks
 

00:24:39.040 --> 00:24:42.030
a notification coming up the clocks
changing Wi-Fi whatever and starting a

00:24:42.030 --> 00:24:42.040
changing Wi-Fi whatever and starting a
 

00:24:42.040 --> 00:24:44.070
changing Wi-Fi whatever and starting a
new --get it's possible for devices to

00:24:44.070 --> 00:24:44.080
new --get it's possible for devices to
 

00:24:44.080 --> 00:24:45.840
new --get it's possible for devices to
have a foreground exclusive core a core

00:24:45.840 --> 00:24:45.850
have a foreground exclusive core a core
 

00:24:45.850 --> 00:24:48.720
have a foreground exclusive core a core
that is only available to be used by the

00:24:48.720 --> 00:24:48.730
that is only available to be used by the
 

00:24:48.730 --> 00:24:50.370
that is only available to be used by the
foreground application you just can't

00:24:50.370 --> 00:24:50.380
foreground application you just can't
 

00:24:50.380 --> 00:24:52.100
foreground application you just can't
touch that if you're in the background

00:24:52.100 --> 00:24:52.110
touch that if you're in the background
 

00:24:52.110 --> 00:24:55.320
touch that if you're in the background
so we want to jump to the foreground and

00:24:55.320 --> 00:24:55.330
so we want to jump to the foreground and
 

00:24:55.330 --> 00:24:57.150
so we want to jump to the foreground and
we actually have a solution for this

00:24:57.150 --> 00:24:57.160
we actually have a solution for this
 

00:24:57.160 --> 00:24:59.010
we actually have a solution for this
already right we have our old activity

00:24:59.010 --> 00:24:59.020
already right we have our old activity
 

00:24:59.020 --> 00:25:01.380
already right we have our old activity
remember this guy so this also solves

00:25:01.380 --> 00:25:01.390
remember this guy so this also solves
 

00:25:01.390 --> 00:25:02.880
remember this guy so this also solves
this particular problem and that's why

00:25:02.880 --> 00:25:02.890
this particular problem and that's why
 

00:25:02.890 --> 00:25:04.920
this particular problem and that's why
we use this in all benchmark

00:25:04.920 --> 00:25:04.930
we use this in all benchmark
 

00:25:04.930 --> 00:25:06.750
we use this in all benchmark
configurations regardless of whatever

00:25:06.750 --> 00:25:06.760
configurations regardless of whatever
 

00:25:06.760 --> 00:25:09.600
configurations regardless of whatever
your clocks are um the benchmark keeps

00:25:09.600 --> 00:25:09.610
your clocks are um the benchmark keeps
 

00:25:09.610 --> 00:25:11.400
your clocks are um the benchmark keeps
this activity in the foreground at all

00:25:11.400 --> 00:25:11.410
this activity in the foreground at all
 

00:25:11.410 --> 00:25:14.310
this activity in the foreground at all
times unless you have your own in order

00:25:14.310 --> 00:25:14.320
times unless you have your own in order
 

00:25:14.320 --> 00:25:16.650
times unless you have your own in order
to guarantee that you can use all cores

00:25:16.650 --> 00:25:16.660
to guarantee that you can use all cores
 

00:25:16.660 --> 00:25:18.180
to guarantee that you can use all cores
with minimum Ritter rendering

00:25:18.180 --> 00:25:18.190
with minimum Ritter rendering
 

00:25:18.190 --> 00:25:19.680
with minimum Ritter rendering
interference from whatever's going on

00:25:19.680 --> 00:25:19.690
interference from whatever's going on
 

00:25:19.690 --> 00:25:22.980
interference from whatever's going on
underneath you but there's another

00:25:22.980 --> 00:25:22.990
underneath you but there's another
 

00:25:22.990 --> 00:25:25.080
underneath you but there's another
important source of background

00:25:25.080 --> 00:25:25.090
important source of background
 

00:25:25.090 --> 00:25:28.020
important source of background
interference and that is contention so

00:25:28.020 --> 00:25:28.030
interference and that is contention so
 

00:25:28.030 --> 00:25:31.350
interference and that is contention so
everything on the device um from CPU to

00:25:31.350 --> 00:25:31.360
everything on the device um from CPU to
 

00:25:31.360 --> 00:25:34.320
everything on the device um from CPU to
disk is a shared resource and if your

00:25:34.320 --> 00:25:34.330
disk is a shared resource and if your
 

00:25:34.330 --> 00:25:36.210
disk is a shared resource and if your
benchmark is being let's say kicked off

00:25:36.210 --> 00:25:36.220
benchmark is being let's say kicked off
 

00:25:36.220 --> 00:25:38.910
benchmark is being let's say kicked off
of a CPU because of some conflict with

00:25:38.910 --> 00:25:38.920
of a CPU because of some conflict with
 

00:25:38.920 --> 00:25:41.640
of a CPU because of some conflict with
another another task if you're accessing

00:25:41.640 --> 00:25:41.650
another another task if you're accessing
 

00:25:41.650 --> 00:25:43.590
another another task if you're accessing
disk and system services at the same

00:25:43.590 --> 00:25:43.600
disk and system services at the same
 

00:25:43.600 --> 00:25:46.710
disk and system services at the same
time that someone else is or if somebody

00:25:46.710 --> 00:25:46.720
time that someone else is or if somebody
 

00:25:46.720 --> 00:25:48.930
time that someone else is or if somebody
has random background work happening for

00:25:48.930 --> 00:25:48.940
has random background work happening for
 

00:25:48.940 --> 00:25:50.730
has random background work happening for
instance like the system doing something

00:25:50.730 --> 00:25:50.740
instance like the system doing something
 

00:25:50.740 --> 00:25:53.550
instance like the system doing something
an app background job something along

00:25:53.550 --> 00:25:53.560
an app background job something along
 

00:25:53.560 --> 00:25:54.270
an app background job something along
those lines

00:25:54.270 --> 00:25:54.280
those lines
 

00:25:54.280 --> 00:25:57.720
those lines
those can create contention so for

00:25:57.720 --> 00:25:57.730
those can create contention so for
 

00:25:57.730 --> 00:25:59.310
those can create contention so for
example if we were running our benchmark

00:25:59.310 --> 00:25:59.320
example if we were running our benchmark
 

00:25:59.320 --> 00:26:02.400
example if we were running our benchmark
and warm up just finished so we're just

00:26:02.400 --> 00:26:02.410
and warm up just finished so we're just
 

00:26:02.410 --> 00:26:04.520
and warm up just finished so we're just
right about to start taking measurements

00:26:04.520 --> 00:26:04.530
right about to start taking measurements
 

00:26:04.530 --> 00:26:07.380
right about to start taking measurements
however we have this other process here

00:26:07.380 --> 00:26:07.390
however we have this other process here
 

00:26:07.390 --> 00:26:09.210
however we have this other process here
that's about to start doing some work

00:26:09.210 --> 00:26:09.220
that's about to start doing some work
 

00:26:09.220 --> 00:26:11.730
that's about to start doing some work
our first few loops are fine but then

00:26:11.730 --> 00:26:11.740
our first few loops are fine but then
 

00:26:11.740 --> 00:26:13.860
our first few loops are fine but then
the other process kicks in and starts

00:26:13.860 --> 00:26:13.870
the other process kicks in and starts
 

00:26:13.870 --> 00:26:16.440
the other process kicks in and starts
running as well all the sudden we see oh

00:26:16.440 --> 00:26:16.450
running as well all the sudden we see oh
 

00:26:16.450 --> 00:26:17.790
running as well all the sudden we see oh
well actually some of these loops are

00:26:17.790 --> 00:26:17.800
well actually some of these loops are
 

00:26:17.800 --> 00:26:20.160
well actually some of these loops are
just giving me flat-out bad numbers not

00:26:20.160 --> 00:26:20.170
just giving me flat-out bad numbers not
 

00:26:20.170 --> 00:26:22.290
just giving me flat-out bad numbers not
very useful numbers that overlap with

00:26:22.290 --> 00:26:22.300
very useful numbers that overlap with
 

00:26:22.300 --> 00:26:25.020
very useful numbers that overlap with
this background work some of these runs

00:26:25.020 --> 00:26:25.030
this background work some of these runs
 

00:26:25.030 --> 00:26:27.060
this background work some of these runs
are still totally fine but some of them

00:26:27.060 --> 00:26:27.070
are still totally fine but some of them
 

00:26:27.070 --> 00:26:29.670
are still totally fine but some of them
aren't so that's why we have this idea

00:26:29.670 --> 00:26:29.680
aren't so that's why we have this idea
 

00:26:29.680 --> 00:26:32.580
aren't so that's why we have this idea
of measure twice report once and by

00:26:32.580 --> 00:26:32.590
of measure twice report once and by
 

00:26:32.590 --> 00:26:35.190
of measure twice report once and by
twice I of course mean many times we

00:26:35.190 --> 00:26:35.200
twice I of course mean many times we
 

00:26:35.200 --> 00:26:37.230
twice I of course mean many times we
will measure we will measure

00:26:37.230 --> 00:26:37.240
will measure we will measure
 

00:26:37.240 --> 00:26:39.120
will measure we will measure
we will measure several loops and

00:26:39.120 --> 00:26:39.130
we will measure several loops and
 

00:26:39.130 --> 00:26:41.370
we will measure several loops and
understanding that most contention is

00:26:41.370 --> 00:26:41.380
understanding that most contention is
 

00:26:41.380 --> 00:26:45.300
understanding that most contention is
for a short duration we we can ignore it

00:26:45.300 --> 00:26:45.310
for a short duration we we can ignore it
 

00:26:45.310 --> 00:26:48.060
for a short duration we we can ignore it
we can ignore those those loops that are

00:26:48.060 --> 00:26:48.070
we can ignore those those loops that are
 

00:26:48.070 --> 00:26:50.100
we can ignore those those loops that are
most likely to have hit contention so

00:26:50.100 --> 00:26:50.110
most likely to have hit contention so
 

00:26:50.110 --> 00:26:51.960
most likely to have hit contention so
what we do in fact is that we report and

00:26:51.960 --> 00:26:51.970
what we do in fact is that we report and
 

00:26:51.970 --> 00:26:54.300
what we do in fact is that we report and
track the minimum number observed not

00:26:54.300 --> 00:26:54.310
track the minimum number observed not
 

00:26:54.310 --> 00:26:55.950
track the minimum number observed not
the average because the average is

00:26:55.950 --> 00:26:55.960
the average because the average is
 

00:26:55.960 --> 00:27:00.120
the average because the average is
susceptible to contention this way the

00:27:00.120 --> 00:27:00.130
susceptible to contention this way the
 

00:27:00.130 --> 00:27:01.020
susceptible to contention this way the
number that we report by the

00:27:01.020 --> 00:27:01.030
number that we report by the
 

00:27:01.030 --> 00:27:02.820
number that we report by the
benchmarking library is immune to tiny

00:27:02.820 --> 00:27:02.830
benchmarking library is immune to tiny
 

00:27:02.830 --> 00:27:04.560
benchmarking library is immune to tiny
little hiccups that happen every now and

00:27:04.560 --> 00:27:04.570
little hiccups that happen every now and
 

00:27:04.570 --> 00:27:06.600
little hiccups that happen every now and
then and my otherwise interfere with

00:27:06.600 --> 00:27:06.610
then and my otherwise interfere with
 

00:27:06.610 --> 00:27:09.540
then and my otherwise interfere with
your numbers all right so let's talk

00:27:09.540 --> 00:27:09.550
your numbers all right so let's talk
 

00:27:09.550 --> 00:27:12.620
your numbers all right so let's talk
about how to go about using this library

00:27:12.620 --> 00:27:12.630
about how to go about using this library
 

00:27:12.630 --> 00:27:14.580
about how to go about using this library
so the first thing that we want to

00:27:14.580 --> 00:27:14.590
so the first thing that we want to
 

00:27:14.590 --> 00:27:17.640
so the first thing that we want to
recommend is don't benchmark everything

00:27:17.640 --> 00:27:17.650
recommend is don't benchmark everything
 

00:27:17.650 --> 00:27:20.010
recommend is don't benchmark everything
start with tracing start with profiling

00:27:20.010 --> 00:27:20.020
start with tracing start with profiling
 

00:27:20.020 --> 00:27:23.040
start with tracing start with profiling
tools maybe you have measurement going

00:27:23.040 --> 00:27:23.050
tools maybe you have measurement going
 

00:27:23.050 --> 00:27:25.980
tools maybe you have measurement going
on on real user devices that tell you

00:27:25.980 --> 00:27:25.990
on on real user devices that tell you
 

00:27:25.990 --> 00:27:28.560
on on real user devices that tell you
some particular part is slow well that's

00:27:28.560 --> 00:27:28.570
some particular part is slow well that's
 

00:27:28.570 --> 00:27:31.560
some particular part is slow well that's
a good place to start pinch mark what

00:27:31.560 --> 00:27:31.570
a good place to start pinch mark what
 

00:27:31.570 --> 00:27:33.360
a good place to start pinch mark what
you know is slow so that you can iterate

00:27:33.360 --> 00:27:33.370
you know is slow so that you can iterate
 

00:27:33.370 --> 00:27:37.020
you know is slow so that you can iterate
on it and improve it we generally

00:27:37.020 --> 00:27:37.030
on it and improve it we generally
 

00:27:37.030 --> 00:27:38.640
on it and improve it we generally
recommend benchmarking synchronous

00:27:38.640 --> 00:27:38.650
recommend benchmarking synchronous
 

00:27:38.650 --> 00:27:40.380
recommend benchmarking synchronous
blocks because these are the easiest to

00:27:40.380 --> 00:27:40.390
blocks because these are the easiest to
 

00:27:40.390 --> 00:27:41.790
blocks because these are the easiest to
measure and these are the easiest to

00:27:41.790 --> 00:27:41.800
measure and these are the easiest to
 

00:27:41.800 --> 00:27:45.750
measure and these are the easiest to
improve over time so if you're measuring

00:27:45.750 --> 00:27:45.760
improve over time so if you're measuring
 

00:27:45.760 --> 00:27:47.100
improve over time so if you're measuring
something that the single-threaded is

00:27:47.100 --> 00:27:47.110
something that the single-threaded is
 

00:27:47.110 --> 00:27:48.720
something that the single-threaded is
much more likely to be stable and

00:27:48.720 --> 00:27:48.730
much more likely to be stable and
 

00:27:48.730 --> 00:27:50.670
much more likely to be stable and
isolated from other tasks there's no

00:27:50.670 --> 00:27:50.680
isolated from other tasks there's no
 

00:27:50.680 --> 00:27:52.800
isolated from other tasks there's no
thread hopping that means you're taking

00:27:52.800 --> 00:27:52.810
thread hopping that means you're taking
 

00:27:52.810 --> 00:27:55.170
thread hopping that means you're taking
the scheduler entirely out of the mix

00:27:55.170 --> 00:27:55.180
the scheduler entirely out of the mix
 

00:27:55.180 --> 00:27:58.140
the scheduler entirely out of the mix
and that way for instance you might

00:27:58.140 --> 00:27:58.150
and that way for instance you might
 

00:27:58.150 --> 00:28:00.120
and that way for instance you might
measure UI separately from network

00:28:00.120 --> 00:28:00.130
measure UI separately from network
 

00:28:00.130 --> 00:28:02.990
measure UI separately from network
separately from database and rendering

00:28:02.990 --> 00:28:03.000
separately from database and rendering
 

00:28:03.000 --> 00:28:05.790
separately from database and rendering
we also generally recommend fairly small

00:28:05.790 --> 00:28:05.800
we also generally recommend fairly small
 

00:28:05.800 --> 00:28:08.880
we also generally recommend fairly small
blocks on these are faster to run um and

00:28:08.880 --> 00:28:08.890
blocks on these are faster to run um and
 

00:28:08.890 --> 00:28:10.710
blocks on these are faster to run um and
here we've been probably less than 50

00:28:10.710 --> 00:28:10.720
here we've been probably less than 50
 

00:28:10.720 --> 00:28:12.560
here we've been probably less than 50
milliseconds

00:28:12.560 --> 00:28:12.570
milliseconds
 

00:28:12.570 --> 00:28:15.090
milliseconds
however the loop itself only has around

00:28:15.090 --> 00:28:15.100
however the loop itself only has around
 

00:28:15.100 --> 00:28:18.720
however the loop itself only has around
a 6 nanosecond overhead and this is like

00:28:18.720 --> 00:28:18.730
a 6 nanosecond overhead and this is like
 

00:28:18.730 --> 00:28:20.760
a 6 nanosecond overhead and this is like
running on a fairly old device at half

00:28:20.760 --> 00:28:20.770
running on a fairly old device at half
 

00:28:20.770 --> 00:28:22.830
running on a fairly old device at half
clocks um so you can measure really

00:28:22.830 --> 00:28:22.840
clocks um so you can measure really
 

00:28:22.840 --> 00:28:23.970
clocks um so you can measure really
small amounts of work with a

00:28:23.970 --> 00:28:23.980
small amounts of work with a
 

00:28:23.980 --> 00:28:27.090
small amounts of work with a
benchmarking library another important

00:28:27.090 --> 00:28:27.100
benchmarking library another important
 

00:28:27.100 --> 00:28:28.140
benchmarking library another important
thing to remember is that the

00:28:28.140 --> 00:28:28.150
thing to remember is that the
 

00:28:28.150 --> 00:28:29.880
thing to remember is that the
benchmarking library is primarily for

00:28:29.880 --> 00:28:29.890
benchmarking library is primarily for
 

00:28:29.890 --> 00:28:33.210
benchmarking library is primarily for
hot code because we run all of your your

00:28:33.210 --> 00:28:33.220
hot code because we run all of your your
 

00:28:33.220 --> 00:28:35.580
hot code because we run all of your your
code with warm up and we run it in a

00:28:35.580 --> 00:28:35.590
code with warm up and we run it in a
 

00:28:35.590 --> 00:28:37.470
code with warm up and we run it in a
loop that probably means that the code

00:28:37.470 --> 00:28:37.480
loop that probably means that the code
 

00:28:37.480 --> 00:28:40.410
loop that probably means that the code
inside is going to be JIT it now that's

00:28:40.410 --> 00:28:40.420
inside is going to be JIT it now that's
 

00:28:40.420 --> 00:28:42.150
inside is going to be JIT it now that's
great if it's something like work that's

00:28:42.150 --> 00:28:42.160
great if it's something like work that's
 

00:28:42.160 --> 00:28:44.190
great if it's something like work that's
done by your recyclerview but if it's

00:28:44.190 --> 00:28:44.200
done by your recyclerview but if it's
 

00:28:44.200 --> 00:28:45.750
done by your recyclerview but if it's
only run once in a while by your app

00:28:45.750 --> 00:28:45.760
only run once in a while by your app
 

00:28:45.760 --> 00:28:48.750
only run once in a while by your app
it's not as likely to get JIT it so be

00:28:48.750 --> 00:28:48.760
it's not as likely to get JIT it so be
 

00:28:48.760 --> 00:28:50.070
it's not as likely to get JIT it so be
very careful when you're benchmarking

00:28:50.070 --> 00:28:50.080
very careful when you're benchmarking
 

00:28:50.080 --> 00:28:50.940
very careful when you're benchmarking
startup

00:28:50.940 --> 00:28:50.950
startup
 

00:28:50.950 --> 00:28:52.999
startup
we generally recommend to only look only

00:28:52.999 --> 00:28:53.009
we generally recommend to only look only
 

00:28:53.009 --> 00:28:55.229
we generally recommend to only look only
benchmark the code that is inside of a

00:28:55.229 --> 00:28:55.239
benchmark the code that is inside of a
 

00:28:55.239 --> 00:28:56.970
benchmark the code that is inside of a
loop during startup so that it is more

00:28:56.970 --> 00:28:56.980
loop during startup so that it is more
 

00:28:56.980 --> 00:29:01.009
loop during startup so that it is more
likely to to be measured correctly

00:29:01.009 --> 00:29:01.019
likely to to be measured correctly
 

00:29:01.019 --> 00:29:04.200
likely to to be measured correctly
another thing to keep in mind is to be

00:29:04.200 --> 00:29:04.210
another thing to keep in mind is to be
 

00:29:04.210 --> 00:29:06.389
another thing to keep in mind is to be
aware of caches that might be anywhere

00:29:06.389 --> 00:29:06.399
aware of caches that might be anywhere
 

00:29:06.399 --> 00:29:09.930
aware of caches that might be anywhere
in your code or even in someone else's

00:29:09.930 --> 00:29:09.940
in your code or even in someone else's
 

00:29:09.940 --> 00:29:12.330
in your code or even in someone else's
code so here's a simple example of a

00:29:12.330 --> 00:29:12.340
code so here's a simple example of a
 

00:29:12.340 --> 00:29:17.489
code so here's a simple example of a
benchmark where we access a file and

00:29:17.489 --> 00:29:17.499
benchmark where we access a file and
 

00:29:17.499 --> 00:29:19.499
benchmark where we access a file and
check whether it exists maybe we observe

00:29:19.499 --> 00:29:19.509
check whether it exists maybe we observe
 

00:29:19.509 --> 00:29:21.570
check whether it exists maybe we observe
that this took a couple of milliseconds

00:29:21.570 --> 00:29:21.580
that this took a couple of milliseconds
 

00:29:21.580 --> 00:29:24.090
that this took a couple of milliseconds
during startup the problem is that the

00:29:24.090 --> 00:29:24.100
during startup the problem is that the
 

00:29:24.100 --> 00:29:26.340
during startup the problem is that the
OS is going to take this and it's going

00:29:26.340 --> 00:29:26.350
OS is going to take this and it's going
 

00:29:26.350 --> 00:29:28.229
OS is going to take this and it's going
to know that nothing has changed and

00:29:28.229 --> 00:29:28.239
to know that nothing has changed and
 

00:29:28.239 --> 00:29:30.389
to know that nothing has changed and
just serve you a cached value every time

00:29:30.389 --> 00:29:30.399
just serve you a cached value every time
 

00:29:30.399 --> 00:29:32.249
just serve you a cached value every time
the benchmark is going to be very

00:29:32.249 --> 00:29:32.259
the benchmark is going to be very
 

00:29:32.259 --> 00:29:34.080
the benchmark is going to be very
different than the behavior at startup

00:29:34.080 --> 00:29:34.090
different than the behavior at startup
 

00:29:34.090 --> 00:29:35.820
different than the behavior at startup
so be aware of this you can sometimes

00:29:35.820 --> 00:29:35.830
so be aware of this you can sometimes
 

00:29:35.830 --> 00:29:39.109
so be aware of this you can sometimes
take measures to create a different

00:29:39.109 --> 00:29:39.119
take measures to create a different
 

00:29:39.119 --> 00:29:41.369
take measures to create a different
create things differently for example

00:29:41.369 --> 00:29:41.379
create things differently for example
 

00:29:41.379 --> 00:29:42.930
create things differently for example
like Dustin should at the beginning with

00:29:42.930 --> 00:29:42.940
like Dustin should at the beginning with
 

00:29:42.940 --> 00:29:46.409
like Dustin should at the beginning with
the database another thing to consider

00:29:46.409 --> 00:29:46.419
the database another thing to consider
 

00:29:46.419 --> 00:29:49.619
the database another thing to consider
is potentially avoid over parameterizing

00:29:49.619 --> 00:29:49.629
is potentially avoid over parameterizing
 

00:29:49.629 --> 00:29:52.349
is potentially avoid over parameterizing
so correctness tests it's really easy to

00:29:52.349 --> 00:29:52.359
so correctness tests it's really easy to
 

00:29:52.359 --> 00:29:54.619
so correctness tests it's really easy to
say sweep over five different variables

00:29:54.619 --> 00:29:54.629
say sweep over five different variables
 

00:29:54.629 --> 00:29:57.810
say sweep over five different variables
recognize that okay overall 4,000 of

00:29:57.810 --> 00:29:57.820
recognize that okay overall 4,000 of
 

00:29:57.820 --> 00:30:00.090
recognize that okay overall 4,000 of
these tests none of them failed great

00:30:00.090 --> 00:30:00.100
these tests none of them failed great
 

00:30:00.100 --> 00:30:03.060
these tests none of them failed great
you get a pass that is a much harder

00:30:03.060 --> 00:30:03.070
you get a pass that is a much harder
 

00:30:03.070 --> 00:30:05.009
you get a pass that is a much harder
task for benchmarking because we're

00:30:05.009 --> 00:30:05.019
task for benchmarking because we're
 

00:30:05.019 --> 00:30:06.419
task for benchmarking because we're
getting something that isn't a simple

00:30:06.419 --> 00:30:06.429
getting something that isn't a simple
 

00:30:06.429 --> 00:30:08.759
getting something that isn't a simple
pass/fail more data can be more

00:30:08.759 --> 00:30:08.769
pass/fail more data can be more
 

00:30:08.769 --> 00:30:11.609
pass/fail more data can be more
difficult to deal with we recommend to

00:30:11.609 --> 00:30:11.619
difficult to deal with we recommend to
 

00:30:11.619 --> 00:30:13.649
difficult to deal with we recommend to
start targeting benchmarks at real-world

00:30:13.649 --> 00:30:13.659
start targeting benchmarks at real-world
 

00:30:13.659 --> 00:30:16.430
start targeting benchmarks at real-world
parameters instead of maybe going as

00:30:16.430 --> 00:30:16.440
parameters instead of maybe going as
 

00:30:16.440 --> 00:30:17.909
parameters instead of maybe going as
enthusiastically towards

00:30:17.909 --> 00:30:17.919
enthusiastically towards
 

00:30:17.919 --> 00:30:19.710
enthusiastically towards
parameterization as you might during a

00:30:19.710 --> 00:30:19.720
parameterization as you might during a
 

00:30:19.720 --> 00:30:24.180
parameterization as you might during a
unit test one thing I really want to

00:30:24.180 --> 00:30:24.190
unit test one thing I really want to
 

00:30:24.190 --> 00:30:25.289
unit test one thing I really want to
re-emphasize though that Dustin

00:30:25.289 --> 00:30:25.299
re-emphasize though that Dustin
 

00:30:25.299 --> 00:30:28.159
re-emphasize though that Dustin
mentioned before is please do not

00:30:28.159 --> 00:30:28.169
mentioned before is please do not
 

00:30:28.169 --> 00:30:31.710
mentioned before is please do not
compare devices this library is not

00:30:31.710 --> 00:30:31.720
compare devices this library is not
 

00:30:31.720 --> 00:30:33.779
compare devices this library is not
designed to compare the performance of

00:30:33.779 --> 00:30:33.789
designed to compare the performance of
 

00:30:33.789 --> 00:30:36.690
designed to compare the performance of
one device versus another we're really

00:30:36.690 --> 00:30:36.700
one device versus another we're really
 

00:30:36.700 --> 00:30:40.049
one device versus another we're really
focused on comparing code whether that's

00:30:40.049 --> 00:30:40.059
focused on comparing code whether that's
 

00:30:40.059 --> 00:30:41.580
focused on comparing code whether that's
framework code whether that's app code

00:30:41.580 --> 00:30:41.590
framework code whether that's app code
 

00:30:41.590 --> 00:30:44.549
framework code whether that's app code
on the same device same operating system

00:30:44.549 --> 00:30:44.559
on the same device same operating system
 

00:30:44.559 --> 00:30:47.249
on the same device same operating system
version the library optimizes for

00:30:47.249 --> 00:30:47.259
version the library optimizes for
 

00:30:47.259 --> 00:30:49.710
version the library optimizes for
stability it will have some factor of

00:30:49.710 --> 00:30:49.720
stability it will have some factor of
 

00:30:49.720 --> 00:30:51.659
stability it will have some factor of
difference that can vary from device to

00:30:51.659 --> 00:30:51.669
difference that can vary from device to
 

00:30:51.669 --> 00:30:54.239
difference that can vary from device to
device over what you see in a benchmark

00:30:54.239 --> 00:30:54.249
device over what you see in a benchmark
 

00:30:54.249 --> 00:30:55.889
device over what you see in a benchmark
versus what you see in reality and

00:30:55.889 --> 00:30:55.899
versus what you see in reality and
 

00:30:55.899 --> 00:30:58.049
versus what you see in reality and
that's because we do not account for

00:30:58.049 --> 00:30:58.059
that's because we do not account for
 

00:30:58.059 --> 00:31:00.899
that's because we do not account for
real world clocks for example if the

00:31:00.899 --> 00:31:00.909
real world clocks for example if the
 

00:31:00.909 --> 00:31:04.080
real world clocks for example if the
user touches down on their device starts

00:31:04.080 --> 00:31:04.090
user touches down on their device starts
 

00:31:04.090 --> 00:31:06.540
user touches down on their device starts
generally the clocks will ramp if a de

00:31:06.540 --> 00:31:06.550
generally the clocks will ramp if a de
 

00:31:06.550 --> 00:31:08.160
generally the clocks will ramp if a de
beauté user uses their device for a

00:31:08.160 --> 00:31:08.170
beauté user uses their device for a
 

00:31:08.170 --> 00:31:09.870
beauté user uses their device for a
while and it gets hot and at thermal

00:31:09.870 --> 00:31:09.880
while and it gets hot and at thermal
 

00:31:09.880 --> 00:31:12.390
while and it gets hot and at thermal
throttles it performs poorly the clocks

00:31:12.390 --> 00:31:12.400
throttles it performs poorly the clocks
 

00:31:12.400 --> 00:31:14.760
throttles it performs poorly the clocks
go down none of that is accounted for in

00:31:14.760 --> 00:31:14.770
go down none of that is accounted for in
 

00:31:14.770 --> 00:31:16.380
go down none of that is accounted for in
the benchmarking library and that's why

00:31:16.380 --> 00:31:16.390
the benchmarking library and that's why
 

00:31:16.390 --> 00:31:18.180
the benchmarking library and that's why
we don't recommend comparing devices

00:31:18.180 --> 00:31:18.190
we don't recommend comparing devices
 

00:31:18.190 --> 00:31:22.530
we don't recommend comparing devices
with our library so you might be

00:31:22.530 --> 00:31:22.540
with our library so you might be
 

00:31:22.540 --> 00:31:24.000
with our library so you might be
wondering okay how do I go about in

00:31:24.000 --> 00:31:24.010
wondering okay how do I go about in
 

00:31:24.010 --> 00:31:27.120
wondering okay how do I go about in
integrating this into my CI so there are

00:31:27.120 --> 00:31:27.130
integrating this into my CI so there are
 

00:31:27.130 --> 00:31:29.250
integrating this into my CI so there are
different tiers of adoption that you can

00:31:29.250 --> 00:31:29.260
different tiers of adoption that you can
 

00:31:29.260 --> 00:31:31.500
different tiers of adoption that you can
that you can start with to look at

00:31:31.500 --> 00:31:31.510
that you can start with to look at
 

00:31:31.510 --> 00:31:33.330
that you can start with to look at
exactly how deeply you want to get into

00:31:33.330 --> 00:31:33.340
exactly how deeply you want to get into
 

00:31:33.340 --> 00:31:35.940
exactly how deeply you want to get into
benchmarking the first is quick and

00:31:35.940 --> 00:31:35.950
benchmarking the first is quick and
 

00:31:35.950 --> 00:31:38.880
benchmarking the first is quick and
local it's very reasonable to do a trace

00:31:38.880 --> 00:31:38.890
local it's very reasonable to do a trace
 

00:31:38.890 --> 00:31:41.910
local it's very reasonable to do a trace
write a benchmark and measure the

00:31:41.910 --> 00:31:41.920
write a benchmark and measure the
 

00:31:41.920 --> 00:31:44.820
write a benchmark and measure the
performance make a change check in that

00:31:44.820 --> 00:31:44.830
performance make a change check in that
 

00:31:44.830 --> 00:31:47.160
performance make a change check in that
change without having to monitor the

00:31:47.160 --> 00:31:47.170
change without having to monitor the
 

00:31:47.170 --> 00:31:48.720
change without having to monitor the
performance over time and detect

00:31:48.720 --> 00:31:48.730
performance over time and detect
 

00:31:48.730 --> 00:31:50.280
performance over time and detect
regressions and in general this is

00:31:50.280 --> 00:31:50.290
regressions and in general this is
 

00:31:50.290 --> 00:31:51.980
regressions and in general this is
because unlike correctness tests

00:31:51.980 --> 00:31:51.990
because unlike correctness tests
 

00:31:51.990 --> 00:31:54.060
because unlike correctness tests
benchmarks usually get better because

00:31:54.060 --> 00:31:54.070
benchmarks usually get better because
 

00:31:54.070 --> 00:31:57.780
benchmarks usually get better because
you're deleting code now that said if

00:31:57.780 --> 00:31:57.790
you're deleting code now that said if
 

00:31:57.790 --> 00:31:59.610
you're deleting code now that said if
you can monitor them over time

00:31:59.610 --> 00:31:59.620
you can monitor them over time
 

00:31:59.620 --> 00:32:01.860
you can monitor them over time
potentially manually that's a totally

00:32:01.860 --> 00:32:01.870
potentially manually that's a totally
 

00:32:01.870 --> 00:32:03.240
potentially manually that's a totally
reasonable way to go and that's that's

00:32:03.240 --> 00:32:03.250
reasonable way to go and that's that's
 

00:32:03.250 --> 00:32:03.840
reasonable way to go and that's that's
even better

00:32:03.840 --> 00:32:03.850
even better
 

00:32:03.850 --> 00:32:07.350
even better
um but we want to recognize that there's

00:32:07.350 --> 00:32:07.360
um but we want to recognize that there's
 

00:32:07.360 --> 00:32:09.300
um but we want to recognize that there's
still value in manual monitoring of

00:32:09.300 --> 00:32:09.310
still value in manual monitoring of
 

00:32:09.310 --> 00:32:10.860
still value in manual monitoring of
benchmarks even if you don't have

00:32:10.860 --> 00:32:10.870
benchmarks even if you don't have
 

00:32:10.870 --> 00:32:13.380
benchmarks even if you don't have
regression testing because a automatic

00:32:13.380 --> 00:32:13.390
regression testing because a automatic
 

00:32:13.390 --> 00:32:14.970
regression testing because a automatic
regression detection because automatic

00:32:14.970 --> 00:32:14.980
regression detection because automatic
 

00:32:14.980 --> 00:32:17.550
regression detection because automatic
regression text detection is a complex

00:32:17.550 --> 00:32:17.560
regression text detection is a complex
 

00:32:17.560 --> 00:32:20.580
regression text detection is a complex
problem however if you do want to go all

00:32:20.580 --> 00:32:20.590
problem however if you do want to go all
 

00:32:20.590 --> 00:32:23.040
problem however if you do want to go all
the way to that point and we recommend

00:32:23.040 --> 00:32:23.050
the way to that point and we recommend
 

00:32:23.050 --> 00:32:25.770
the way to that point and we recommend
it it is it is just very it is something

00:32:25.770 --> 00:32:25.780
it it is it is just very it is something
 

00:32:25.780 --> 00:32:28.350
it it is it is just very it is something
to to recognize that it's not as simple

00:32:28.350 --> 00:32:28.360
to to recognize that it's not as simple
 

00:32:28.360 --> 00:32:29.880
to to recognize that it's not as simple
as detecting when does my benchmark go

00:32:29.880 --> 00:32:29.890
as detecting when does my benchmark go
 

00:32:29.890 --> 00:32:32.070
as detecting when does my benchmark go
down by say 1% because there's going to

00:32:32.070 --> 00:32:32.080
down by say 1% because there's going to
 

00:32:32.080 --> 00:32:34.410
down by say 1% because there's going to
be all sorts of times where it flakes a

00:32:34.410 --> 00:32:34.420
be all sorts of times where it flakes a
 

00:32:34.420 --> 00:32:35.880
be all sorts of times where it flakes a
little bit it goes down a little bit you

00:32:35.880 --> 00:32:35.890
little bit it goes down a little bit you
 

00:32:35.890 --> 00:32:37.470
little bit it goes down a little bit you
make a trade-off for one benchmark

00:32:37.470 --> 00:32:37.480
make a trade-off for one benchmark
 

00:32:37.480 --> 00:32:40.020
make a trade-off for one benchmark
versus another or you check in a feature

00:32:40.020 --> 00:32:40.030
versus another or you check in a feature
 

00:32:40.030 --> 00:32:41.940
versus another or you check in a feature
that just absolutely needs to make this

00:32:41.940 --> 00:32:41.950
that just absolutely needs to make this
 

00:32:41.950 --> 00:32:44.490
that just absolutely needs to make this
one code path slightly slower so if

00:32:44.490 --> 00:32:44.500
one code path slightly slower so if
 

00:32:44.500 --> 00:32:45.840
one code path slightly slower so if
you're if you're prepared to receive

00:32:45.840 --> 00:32:45.850
you're if you're prepared to receive
 

00:32:45.850 --> 00:32:47.550
you're if you're prepared to receive
emails for all those things by all means

00:32:47.550 --> 00:32:47.560
emails for all those things by all means
 

00:32:47.560 --> 00:32:51.360
emails for all those things by all means
just something to keep in mind all right

00:32:51.360 --> 00:32:51.370
just something to keep in mind all right
 

00:32:51.370 --> 00:32:53.160
just something to keep in mind all right
and so let's go through a few closing

00:32:53.160 --> 00:32:53.170
and so let's go through a few closing
 

00:32:53.170 --> 00:32:55.110
and so let's go through a few closing
notes we do have as Justin mentioned

00:32:55.110 --> 00:32:55.120
notes we do have as Justin mentioned
 

00:32:55.120 --> 00:32:57.780
notes we do have as Justin mentioned
early earlier an indie case ample that

00:32:57.780 --> 00:32:57.790
early earlier an indie case ample that
 

00:32:57.790 --> 00:32:58.800
early earlier an indie case ample that
shows how to use some of our

00:32:58.800 --> 00:32:58.810
shows how to use some of our
 

00:32:58.810 --> 00:33:01.320
shows how to use some of our
infrastructure together with C++ code

00:33:01.320 --> 00:33:01.330
infrastructure together with C++ code
 

00:33:01.330 --> 00:33:03.360
infrastructure together with C++ code
that's available on our Android

00:33:03.360 --> 00:33:03.370
that's available on our Android
 

00:33:03.370 --> 00:33:06.690
that's available on our Android
performance github repository and it

00:33:06.690 --> 00:33:06.700
performance github repository and it
 

00:33:06.700 --> 00:33:08.250
performance github repository and it
actually wraps the existing Google

00:33:08.250 --> 00:33:08.260
actually wraps the existing Google
 

00:33:08.260 --> 00:33:11.430
actually wraps the existing Google
benchmark C++ library to get numbers

00:33:11.430 --> 00:33:11.440
benchmark C++ library to get numbers
 

00:33:11.440 --> 00:33:13.590
benchmark C++ library to get numbers
directly from infrastructure that you

00:33:13.590 --> 00:33:13.600
directly from infrastructure that you
 

00:33:13.600 --> 00:33:15.150
directly from infrastructure that you
might already be using for C++

00:33:15.150 --> 00:33:15.160
might already be using for C++
 

00:33:15.160 --> 00:33:16.300
might already be using for C++
benchmarking

00:33:16.300 --> 00:33:16.310
benchmarking
 

00:33:16.310 --> 00:33:18.040
benchmarking
it captures the results together with

00:33:18.040 --> 00:33:18.050
it captures the results together with
 

00:33:18.050 --> 00:33:20.650
it captures the results together with
Java and Catalan benchmarks in our file

00:33:20.650 --> 00:33:20.660
Java and Catalan benchmarks in our file
 

00:33:20.660 --> 00:33:22.990
Java and Catalan benchmarks in our file
output and it applies all of our Android

00:33:22.990 --> 00:33:23.000
output and it applies all of our Android
 

00:33:23.000 --> 00:33:25.660
output and it applies all of our Android
specific tricks regarding stabilizing

00:33:25.660 --> 00:33:25.670
specific tricks regarding stabilizing
 

00:33:25.670 --> 00:33:30.310
specific tricks regarding stabilizing
clocks so now just to mention that this

00:33:30.310 --> 00:33:30.320
clocks so now just to mention that this
 

00:33:30.320 --> 00:33:32.260
clocks so now just to mention that this
is actually a fairly old library so why

00:33:32.260 --> 00:33:32.270
is actually a fairly old library so why
 

00:33:32.270 --> 00:33:34.180
is actually a fairly old library so why
haven't you heard of it before well this

00:33:34.180 --> 00:33:34.190
haven't you heard of it before well this
 

00:33:34.190 --> 00:33:36.580
haven't you heard of it before well this
library has been around since about 2016

00:33:36.580 --> 00:33:36.590
library has been around since about 2016
 

00:33:36.590 --> 00:33:40.140
library has been around since about 2016
used inside of the Android platform and

00:33:40.140 --> 00:33:40.150
used inside of the Android platform and
 

00:33:40.150 --> 00:33:43.510
used inside of the Android platform and
we use it all over the place we use it

00:33:43.510 --> 00:33:43.520
we use it all over the place we use it
 

00:33:43.520 --> 00:33:45.850
we use it all over the place we use it
for text for graphics for views for

00:33:45.850 --> 00:33:45.860
for text for graphics for views for
 

00:33:45.860 --> 00:33:47.650
for text for graphics for views for
resources for sequel light for

00:33:47.650 --> 00:33:47.660
resources for sequel light for
 

00:33:47.660 --> 00:33:49.240
resources for sequel light for
optimizing all of these different

00:33:49.240 --> 00:33:49.250
optimizing all of these different
 

00:33:49.250 --> 00:33:51.220
optimizing all of these different
components but for a long time it's been

00:33:51.220 --> 00:33:51.230
components but for a long time it's been
 

00:33:51.230 --> 00:33:53.050
components but for a long time it's been
very difficult to use externally because

00:33:53.050 --> 00:33:53.060
very difficult to use externally because
 

00:33:53.060 --> 00:33:56.020
very difficult to use externally because
we kind of needed you to have a rooted

00:33:56.020 --> 00:33:56.030
we kind of needed you to have a rooted
 

00:33:56.030 --> 00:33:57.730
we kind of needed you to have a rooted
device to run this on and that's easy

00:33:57.730 --> 00:33:57.740
device to run this on and that's easy
 

00:33:57.740 --> 00:33:59.620
device to run this on and that's easy
that that's easy for a platform

00:33:59.620 --> 00:33:59.630
that that's easy for a platform
 

00:33:59.630 --> 00:34:00.760
that that's easy for a platform
developer much harder for an app

00:34:00.760 --> 00:34:00.770
developer much harder for an app
 

00:34:00.770 --> 00:34:02.770
developer much harder for an app
developer but more recently we have

00:34:02.770 --> 00:34:02.780
developer but more recently we have
 

00:34:02.780 --> 00:34:04.840
developer but more recently we have
overhauled it for non rooted devices

00:34:04.840 --> 00:34:04.850
overhauled it for non rooted devices
 

00:34:04.850 --> 00:34:07.480
overhauled it for non rooted devices
we've switched over to Kotlin which gave

00:34:07.480 --> 00:34:07.490
we've switched over to Kotlin which gave
 

00:34:07.490 --> 00:34:09.490
we've switched over to Kotlin which gave
us some really nice benefits in terms of

00:34:09.490 --> 00:34:09.500
us some really nice benefits in terms of
 

00:34:09.500 --> 00:34:11.140
us some really nice benefits in terms of
function inlining for that measurement

00:34:11.140 --> 00:34:11.150
function inlining for that measurement
 

00:34:11.150 --> 00:34:13.990
function inlining for that measurement
loop and allow us to minimize overhead

00:34:13.990 --> 00:34:14.000
loop and allow us to minimize overhead
 

00:34:14.000 --> 00:34:16.570
loop and allow us to minimize overhead
so now libraries such as room navigation

00:34:16.570 --> 00:34:16.580
so now libraries such as room navigation
 

00:34:16.580 --> 00:34:19.570
so now libraries such as room navigation
and slices all use our benchmarking

00:34:19.570 --> 00:34:19.580
and slices all use our benchmarking
 

00:34:19.580 --> 00:34:23.530
and slices all use our benchmarking
library to make improvements so here's

00:34:23.530 --> 00:34:23.540
library to make improvements so here's
 

00:34:23.540 --> 00:34:25.690
library to make improvements so here's
an example from a from from the platform

00:34:25.690 --> 00:34:25.700
an example from a from from the platform
 

00:34:25.700 --> 00:34:27.550
an example from a from from the platform
from a couple of years ago I think this

00:34:27.550 --> 00:34:27.560
from a couple of years ago I think this
 

00:34:27.560 --> 00:34:29.020
from a couple of years ago I think this
was an O when we noticed that hey

00:34:29.020 --> 00:34:29.030
was an O when we noticed that hey
 

00:34:29.030 --> 00:34:31.450
was an O when we noticed that hey
toggling the visibility of a relatively

00:34:31.450 --> 00:34:31.460
toggling the visibility of a relatively
 

00:34:31.460 --> 00:34:32.740
toggling the visibility of a relatively
large tree of views was kind of

00:34:32.740 --> 00:34:32.750
large tree of views was kind of
 

00:34:32.750 --> 00:34:36.250
large tree of views was kind of
expensive so this was our CI over the

00:34:36.250 --> 00:34:36.260
expensive so this was our CI over the
 

00:34:36.260 --> 00:34:38.980
expensive so this was our CI over the
process of checking in a few changes so

00:34:38.980 --> 00:34:38.990
process of checking in a few changes so
 

00:34:38.990 --> 00:34:41.409
process of checking in a few changes so
at the beginning modifying these views

00:34:41.409 --> 00:34:41.419
at the beginning modifying these views
 

00:34:41.419 --> 00:34:43.810
at the beginning modifying these views
took 300 micro 302 50 microseconds and

00:34:43.810 --> 00:34:43.820
took 300 micro 302 50 microseconds and
 

00:34:43.820 --> 00:34:46.149
took 300 micro 302 50 microseconds and
we checked in an optimization for how

00:34:46.149 --> 00:34:46.159
we checked in an optimization for how
 

00:34:46.159 --> 00:34:48.909
we checked in an optimization for how
outlines were changed when views were

00:34:48.909 --> 00:34:48.919
outlines were changed when views were
 

00:34:48.919 --> 00:34:50.800
outlines were changed when views were
stored and so it went down a little bit

00:34:50.800 --> 00:34:50.810
stored and so it went down a little bit
 

00:34:50.810 --> 00:34:53.260
stored and so it went down a little bit
and we actually realized like okay most

00:34:53.260 --> 00:34:53.270
and we actually realized like okay most
 

00:34:53.270 --> 00:34:55.600
and we actually realized like okay most
of the work here is actually in view dot

00:34:55.600 --> 00:34:55.610
of the work here is actually in view dot
 

00:34:55.610 --> 00:34:57.340
of the work here is actually in view dot
invalidate it's doing a lot of work that

00:34:57.340 --> 00:34:57.350
invalidate it's doing a lot of work that
 

00:34:57.350 --> 00:34:58.840
invalidate it's doing a lot of work that
it doesn't need to anymore in a modern

00:34:58.840 --> 00:34:58.850
it doesn't need to anymore in a modern
 

00:34:58.850 --> 00:35:00.460
it doesn't need to anymore in a modern
hardware accelerated pipeline so we

00:35:00.460 --> 00:35:00.470
hardware accelerated pipeline so we
 

00:35:00.470 --> 00:35:02.520
hardware accelerated pipeline so we
checked in a complete overhaul of that

00:35:02.520 --> 00:35:02.530
checked in a complete overhaul of that
 

00:35:02.530 --> 00:35:05.560
checked in a complete overhaul of that
and of course we quickly reverted it

00:35:05.560 --> 00:35:05.570
and of course we quickly reverted it
 

00:35:05.570 --> 00:35:07.990
and of course we quickly reverted it
because it broke the world but we did we

00:35:07.990 --> 00:35:08.000
because it broke the world but we did we
 

00:35:08.000 --> 00:35:10.540
because it broke the world but we did we
did learn a lot of little of things that

00:35:10.540 --> 00:35:10.550
did learn a lot of little of things that
 

00:35:10.550 --> 00:35:12.130
did learn a lot of little of things that
we needed to change along that path and

00:35:12.130 --> 00:35:12.140
we needed to change along that path and
 

00:35:12.140 --> 00:35:14.440
we needed to change along that path and
after we were able to check that back in

00:35:14.440 --> 00:35:14.450
after we were able to check that back in
 

00:35:14.450 --> 00:35:16.630
after we were able to check that back in
we were able to get a total improvement

00:35:16.630 --> 00:35:16.640
we were able to get a total improvement
 

00:35:16.640 --> 00:35:19.990
we were able to get a total improvement
of 100% of 50% of taking that view

00:35:19.990 --> 00:35:20.000
of 100% of 50% of taking that view
 

00:35:20.000 --> 00:35:21.460
of 100% of 50% of taking that view
toggling from point three five

00:35:21.460 --> 00:35:21.470
toggling from point three five
 

00:35:21.470 --> 00:35:23.500
toggling from point three five
milliseconds per say 64 views or

00:35:23.500 --> 00:35:23.510
milliseconds per say 64 views or
 

00:35:23.510 --> 00:35:25.600
milliseconds per say 64 views or
whatever down to half of that which is a

00:35:25.600 --> 00:35:25.610
whatever down to half of that which is a
 

00:35:25.610 --> 00:35:27.760
whatever down to half of that which is a
huge improvement and we did this all

00:35:27.760 --> 00:35:27.770
huge improvement and we did this all
 

00:35:27.770 --> 00:35:29.530
huge improvement and we did this all
before we had automatic regression

00:35:29.530 --> 00:35:29.540
before we had automatic regression
 

00:35:29.540 --> 00:35:31.020
before we had automatic regression
testing

00:35:31.020 --> 00:35:31.030
testing
 

00:35:31.030 --> 00:35:33.850
testing
so in summary here we've seen through

00:35:33.850 --> 00:35:33.860
so in summary here we've seen through
 

00:35:33.860 --> 00:35:35.170
so in summary here we've seen through
all of these tricks that we talked about

00:35:35.170 --> 00:35:35.180
all of these tricks that we talked about
 

00:35:35.180 --> 00:35:36.910
all of these tricks that we talked about
benchmarking is a really complex problem

00:35:36.910 --> 00:35:36.920
benchmarking is a really complex problem
 

00:35:36.920 --> 00:35:39.070
benchmarking is a really complex problem
it's really hard to measure accurately

00:35:39.070 --> 00:35:39.080
it's really hard to measure accurately
 

00:35:39.080 --> 00:35:42.580
it's really hard to measure accurately
it's um it's it's completely foiled by

00:35:42.580 --> 00:35:42.590
it's um it's it's completely foiled by
 

00:35:42.590 --> 00:35:45.490
it's um it's it's completely foiled by
clock instability and background

00:35:45.490 --> 00:35:45.500
clock instability and background
 

00:35:45.500 --> 00:35:47.050
clock instability and background
interference can be a real source of

00:35:47.050 --> 00:35:47.060
interference can be a real source of
 

00:35:47.060 --> 00:35:49.180
interference can be a real source of
pain when you're trying to detect

00:35:49.180 --> 00:35:49.190
pain when you're trying to detect
 

00:35:49.190 --> 00:35:52.060
pain when you're trying to detect
changes that's why with Jetpack

00:35:52.060 --> 00:35:52.070
changes that's why with Jetpack
 

00:35:52.070 --> 00:35:54.060
changes that's why with Jetpack
benchmarking we've provided a simple API

00:35:54.060 --> 00:35:54.070
benchmarking we've provided a simple API
 

00:35:54.070 --> 00:35:56.500
benchmarking we've provided a simple API
we bundled in all the lessons we've

00:35:56.500 --> 00:35:56.510
we bundled in all the lessons we've
 

00:35:56.510 --> 00:35:58.390
we bundled in all the lessons we've
learned about getting stable numbers out

00:35:58.390 --> 00:35:58.400
learned about getting stable numbers out
 

00:35:58.400 --> 00:36:01.300
learned about getting stable numbers out
of a device and the Alpha is available

00:36:01.300 --> 00:36:01.310
of a device and the Alpha is available
 

00:36:01.310 --> 00:36:05.230
of a device and the Alpha is available
now thank you so much for coming if you

00:36:05.230 --> 00:36:05.240
now thank you so much for coming if you
 

00:36:05.240 --> 00:36:07.990
now thank you so much for coming if you
if you remember only one thing D Android

00:36:07.990 --> 00:36:08.000
if you remember only one thing D Android
 

00:36:08.000 --> 00:36:10.820
if you remember only one thing D Android
comm / benchmark thank you all so much

00:36:10.820 --> 00:36:10.830
comm / benchmark thank you all so much
 

00:36:10.830 --> 00:36:32.720
comm / benchmark thank you all so much
[Music]

