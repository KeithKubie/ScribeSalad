WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:01.760
Hello and good
morning, everybody.

00:00:01.760 --> 00:00:02.980
My name is Yigit Boyar.

00:00:02.980 --> 00:00:04.580
I'm a member of the
[? architecture ?]

00:00:04.580 --> 00:00:05.870
team in Android.

00:00:05.870 --> 00:00:09.390
But today, we'll talk
about Android architecture.

00:00:09.390 --> 00:00:12.390
And mostly about
next billion users.

00:00:12.390 --> 00:00:13.570
That's what NBU stands for.

00:00:17.580 --> 00:00:25.230
So what happens when you develop
an application is usually,

00:00:25.230 --> 00:00:28.310
you live in the United States,
or you live in these developed

00:00:28.310 --> 00:00:29.590
parts of the world.

00:00:29.590 --> 00:00:31.900
And this is your main user base.

00:00:31.900 --> 00:00:34.380
Internet is good or reliable.

00:00:34.380 --> 00:00:36.660
All the new stuff
comes up there.

00:00:36.660 --> 00:00:38.960
And then you're like, oh,
I'm doing my job really well.

00:00:38.960 --> 00:00:40.400
My application works very well.

00:00:40.400 --> 00:00:41.945
I'm a good developer.

00:00:41.945 --> 00:00:44.710
But that's not actually true.

00:00:44.710 --> 00:00:47.580
Most of the world cannot
use your application,

00:00:47.580 --> 00:00:49.500
or they don't have
a good experience.

00:00:49.500 --> 00:00:51.590
And when I say
most of the world,

00:00:51.590 --> 00:00:54.460
it's 78% of the
world population.

00:00:54.460 --> 00:00:55.210
That's huge.

00:00:55.210 --> 00:00:58.920
Four our of five people cannot
have a good experience with

00:00:58.920 --> 00:01:00.720
your application.

00:01:00.720 --> 00:01:01.220
Why?

00:01:01.220 --> 00:01:04.039
Because the
circumstances you test

00:01:04.039 --> 00:01:07.080
your application is so different
than what they actually

00:01:07.080 --> 00:01:07.960
observe.

00:01:07.960 --> 00:01:11.740
So today, we'll try to talk
about how do we close this gap?

00:01:11.740 --> 00:01:14.880
What are the things that
we should pay attention

00:01:14.880 --> 00:01:16.510
to make this a lot better.

00:01:16.510 --> 00:01:19.200
So this is from the
International Communication

00:01:19.200 --> 00:01:20.040
Union numbers.

00:01:20.040 --> 00:01:24.230
In the year 2000,
most of the world

00:01:24.230 --> 00:01:26.070
was in the developed countries.

00:01:26.070 --> 00:01:29.580
Like 75% of internet users
from developed countries.

00:01:29.580 --> 00:01:32.660
There was only 25% from
these developing countries,

00:01:32.660 --> 00:01:35.600
and they were not
buying enough purchases,

00:01:35.600 --> 00:01:37.520
[? or ?] [? you ?] would
mostly ignore them.

00:01:37.520 --> 00:01:38.735
Well, [? there was, ?] I guess,
more [INAUDIBLE] [? person ?]

00:01:38.735 --> 00:01:39.900
in the year 2000.

00:01:39.900 --> 00:01:41.870
But you got the point.

00:01:41.870 --> 00:01:46.600
By the year 2015, there are
3.2 billion internet users,

00:01:46.600 --> 00:01:49.690
and most of them are in
these developing countries.

00:01:49.690 --> 00:01:52.020
So if you ignore
these people, you're

00:01:52.020 --> 00:01:55.090
actually ignoring the
key chunk of user base.

00:01:55.090 --> 00:01:56.930
You're ignoring your future.

00:01:56.930 --> 00:02:00.210
If you want to be
successful, your application

00:02:00.210 --> 00:02:01.952
needs to work very
well for these users.

00:02:01.952 --> 00:02:02.910
This is very important.

00:02:02.910 --> 00:02:05.690
This is the future.

00:02:05.690 --> 00:02:08.190
And you may think,
this is another number.

00:02:08.190 --> 00:02:10.782
How many people have
broadband subscription

00:02:10.782 --> 00:02:11.740
in developed countries?

00:02:11.740 --> 00:02:12.690
It's 90%.

00:02:12.690 --> 00:02:15.202
Like, almost all
of us have internet

00:02:15.202 --> 00:02:16.910
connection on our
phones if you're living

00:02:16.910 --> 00:02:18.630
in one of these countries.

00:02:18.630 --> 00:02:22.910
But if you go into developing
countries, it's 40% of people.

00:02:22.910 --> 00:02:24.380
Like half of the
people don't have

00:02:24.380 --> 00:02:26.250
mobile broadband subscription.

00:02:26.250 --> 00:02:30.090
And even if they do, most
of these people keep it off.

00:02:30.090 --> 00:02:33.860
If you've been to India, and
like other parts of the world,

00:02:33.860 --> 00:02:38.560
people are very, very careful
about their data, and only 40%

00:02:38.560 --> 00:02:40.410
has it anyway.

00:02:40.410 --> 00:02:43.710
But you might think about, hey,
the mobile internet is first.

00:02:43.710 --> 00:02:46.550
When they have, and they
want to use my application,

00:02:46.550 --> 00:02:48.810
it will still work very well.

00:02:48.810 --> 00:02:51.640
Now let's look at some
other numbers to prove this.

00:02:51.640 --> 00:02:59.636
So overall in the world, the 3G
coverage by population is 69%.

00:02:59.636 --> 00:03:00.760
This is a very good number.

00:03:00.760 --> 00:03:05.234
Like 70% of the world population
has 3G coverage in their area.

00:03:05.234 --> 00:03:09.040
That's very good
internet by any means.

00:03:09.040 --> 00:03:12.120
But if you look at the
rural population, it's 30%.

00:03:12.120 --> 00:03:14.270
So if you're not
living in a city,

00:03:14.270 --> 00:03:18.472
there's a 30% chance that
your area has 3G coverage.

00:03:18.472 --> 00:03:19.430
And [? was ?] below 3G.

00:03:19.430 --> 00:03:21.940
We're talking about, like, Edge.

00:03:21.940 --> 00:03:24.620
So if you look at
urban population,

00:03:24.620 --> 00:03:26.740
so if you look in a
city, there is 90%.

00:03:26.740 --> 00:03:27.740
It's a very good number.

00:03:27.740 --> 00:03:31.590
90% of people have
3G at a given time.

00:03:31.590 --> 00:03:34.910
So I was talking about these
numbers before in a conference.

00:03:34.910 --> 00:03:37.880
I asked people when was the
last time you have seen Edge

00:03:37.880 --> 00:03:38.771
on your phone?

00:03:38.771 --> 00:03:39.520
You don't do that.

00:03:39.520 --> 00:03:40.710
You never get it.

00:03:40.710 --> 00:03:44.100
And someone replied
me on Twitter.

00:03:44.100 --> 00:03:45.770
You asked me last
time I had Edge?

00:03:45.770 --> 00:03:47.920
It's here at Droidcon
San Francisco.

00:03:47.920 --> 00:03:50.310
So even if you're
in San Francisco,

00:03:50.310 --> 00:03:51.650
this is sometimes what you get.

00:03:51.650 --> 00:03:53.420
It happens because
it's very hard

00:03:53.420 --> 00:03:57.300
to have a good coverage
for populated areas.

00:03:57.300 --> 00:04:00.850
And it doesn't end
up working well.

00:04:00.850 --> 00:04:01.880
So how do we fix this?

00:04:01.880 --> 00:04:02.527
Cache, right?

00:04:02.527 --> 00:04:03.360
Everybody does this.

00:04:03.360 --> 00:04:05.240
You use whatever
networking library.

00:04:05.240 --> 00:04:07.580
It catches your data,
you cache your images.

00:04:07.580 --> 00:04:08.870
You are good, right?

00:04:08.870 --> 00:04:09.760
No.

00:04:09.760 --> 00:04:12.330
So we'll look at an
example about that.

00:04:12.330 --> 00:04:16.810
They say I have this application
showing the news from sharks,

00:04:16.810 --> 00:04:19.040
Bay area team.

00:04:19.040 --> 00:04:21.350
So I click on the news.

00:04:21.350 --> 00:04:22.260
I read the news.

00:04:22.260 --> 00:04:24.320
It's all looking fine.

00:04:24.320 --> 00:04:26.705
And then I see this.

00:04:26.705 --> 00:04:27.580
How does this happen?

00:04:27.580 --> 00:04:31.700
Because I did go somewhere
else, I used my phone.

00:04:31.700 --> 00:04:32.590
I'm out-of-network.

00:04:32.590 --> 00:04:34.200
I come back to that page.

00:04:34.200 --> 00:04:36.420
The [? data ?] was
killed, restarted.

00:04:36.420 --> 00:04:38.910
Hey, you never faced that
page because you only

00:04:38.910 --> 00:04:41.540
faced the list of news,
but you never faced that

00:04:41.540 --> 00:04:43.030
particularly news page.

00:04:43.030 --> 00:04:45.850
Because you did not
cache it properly,

00:04:45.850 --> 00:04:47.540
you show a loading
bar to the user.

00:04:47.540 --> 00:04:51.480
Although you have the data, you
have a [? ACTP ?] cache that

00:04:51.480 --> 00:04:54.100
has that news item, but you
cannot show it to the user.

00:04:54.100 --> 00:04:54.920
That's very sad.

00:04:54.920 --> 00:04:56.944
That should not happen.

00:04:56.944 --> 00:04:59.110
So [? learning ?] [INAUDIBLE]
caching is not enough.

00:04:59.110 --> 00:05:02.370
If you're caching, you
should be catching your data.

00:05:02.370 --> 00:05:04.330
So now we say, OK.

00:05:04.330 --> 00:05:06.740
Hopefully [INAUDIBLE]
we agree on we should

00:05:06.740 --> 00:05:08.700
embrace the next billion users.

00:05:08.700 --> 00:05:10.750
And how do we do that?

00:05:10.750 --> 00:05:12.430
This is always a
question that comes on.

00:05:12.430 --> 00:05:13.600
And I always put the slide.

00:05:13.600 --> 00:05:15.400
Which architecture I choose?

00:05:15.400 --> 00:05:18.180
Every other day, there's
a new architecture article

00:05:18.180 --> 00:05:18.950
on the internet.

00:05:18.950 --> 00:05:19.697
It's crazy.

00:05:19.697 --> 00:05:21.280
Everybody [? puts on ?]
something new.

00:05:21.280 --> 00:05:23.300
This architecture,
that architecture.

00:05:23.300 --> 00:05:25.680
I have no idea
which one to choose.

00:05:25.680 --> 00:05:28.150
But the actually thing
is it doesn't matter.

00:05:28.150 --> 00:05:29.742
Who cares which
architecture you use?

00:05:29.742 --> 00:05:30.700
Your user doesn't care.

00:05:30.700 --> 00:05:31.860
It's good for you.

00:05:31.860 --> 00:05:32.420
You should.

00:05:32.420 --> 00:05:34.690
It is good for you to
scale their application,

00:05:34.690 --> 00:05:36.540
have it stable, test it well.

00:05:36.540 --> 00:05:39.280
But your users have no
idea what you are using.

00:05:39.280 --> 00:05:42.750
All they care about is
their user experience.

00:05:42.750 --> 00:05:45.560
So this is what should be
on your mind every time

00:05:45.560 --> 00:05:47.800
you write some code.

00:05:47.800 --> 00:05:49.120
So what to do.

00:05:49.120 --> 00:05:51.300
There's two main
things you need to do.

00:05:51.300 --> 00:05:53.550
First, your application
should work offline.

00:05:53.550 --> 00:05:56.830
Think about you're writing
an app for a desktop.

00:05:56.830 --> 00:06:01.210
10 years, 15 years ago when
there was usually no network.

00:06:01.210 --> 00:06:03.650
Think when you're writing it
up, plan everything that way.

00:06:03.650 --> 00:06:05.770
So your application should
always work offline.

00:06:05.770 --> 00:06:08.640
Should never require network.

00:06:08.640 --> 00:06:10.680
And you optimize for
the bad networks,

00:06:10.680 --> 00:06:12.870
because even if
you have network,

00:06:12.870 --> 00:06:14.760
it's not necessarily
a good network.

00:06:14.760 --> 00:06:16.820
I know on your
desk in your office

00:06:16.820 --> 00:06:18.810
is usually a good
network, but that's

00:06:18.810 --> 00:06:20.470
not what your users have.

00:06:20.470 --> 00:06:24.350
So you need to think about them.

00:06:24.350 --> 00:06:26.310
OK.

00:06:26.310 --> 00:06:28.730
So let's start with
offline applications.

00:06:28.730 --> 00:06:33.400
So what do I mean
by offline apps?

00:06:33.400 --> 00:06:36.210
The major thing you
need to be careful about

00:06:36.210 --> 00:06:40.000
is removing network from
your user experience.

00:06:40.000 --> 00:06:42.740
So when a user is interacting
with their application,

00:06:42.740 --> 00:06:45.360
hopefully that should never,
ever be a network [INAUDIBLE]

00:06:45.360 --> 00:06:48.420
in that [? flaw. ?] Well, if you
are doing your login page, yes.

00:06:48.420 --> 00:06:51.320
But there's only a few
times it's mandatory.

00:06:51.320 --> 00:06:53.111
Usually it's optional.

00:06:53.111 --> 00:06:54.110
So let's look at an app.

00:06:54.110 --> 00:06:55.040
There's a dating app.

00:06:55.040 --> 00:06:56.200
So there's a guy.

00:06:56.200 --> 00:06:59.110
And now you click
on the Like button,

00:06:59.110 --> 00:07:01.710
because you want to like-- and
you're seeing a model dialog.

00:07:01.710 --> 00:07:03.550
Liking Joe.

00:07:03.550 --> 00:07:04.541
I told you to like Joe.

00:07:04.541 --> 00:07:05.040
I know.

00:07:05.040 --> 00:07:06.420
Yes, you'll do that.

00:07:06.420 --> 00:07:09.007
Why do you have to
block me for that?

00:07:09.007 --> 00:07:09.590
Don't do that.

00:07:09.590 --> 00:07:10.890
This is so unnecessary.

00:07:10.890 --> 00:07:15.380
User doesn't need
to know about that.

00:07:15.380 --> 00:07:16.380
OK.

00:07:16.380 --> 00:07:17.580
So we say remove that.

00:07:17.580 --> 00:07:20.210
Don't bug the user about this.

00:07:20.210 --> 00:07:22.465
And if you very
briefly-- [INAUDIBLE]

00:07:22.465 --> 00:07:24.930
if you look at the application,
what happens there is you

00:07:24.930 --> 00:07:25.992
click on the button.

00:07:25.992 --> 00:07:27.450
It goes [INAUDIBLE]
[? presenter ?]

00:07:27.450 --> 00:07:30.140
view controller, whatever
you choose to use.

00:07:30.140 --> 00:07:32.300
And then it calls the network.

00:07:32.300 --> 00:07:34.840
When the network
decides to come back,

00:07:34.840 --> 00:07:36.430
you get it off
the modern dialog.

00:07:36.430 --> 00:07:37.870
But who cares?

00:07:37.870 --> 00:07:39.120
User doesn't even understand.

00:07:39.120 --> 00:07:40.880
Like my mom doesn't really
understand that there's

00:07:40.880 --> 00:07:42.296
a network request
[? somewhere. ?]

00:07:42.296 --> 00:07:44.660
She doesn't know
what network is.

00:07:44.660 --> 00:07:46.200
Get [? rid ?] of it.

00:07:46.200 --> 00:07:48.040
So [? instead, ?] do
something in model.

00:07:48.040 --> 00:07:52.610
Like model your data
locally so that when

00:07:52.610 --> 00:07:54.440
the user clicks
[? the ?] button,

00:07:54.440 --> 00:07:55.660
you just update the model.

00:07:55.660 --> 00:07:59.220
Your mark it as [? liked, ?]
[? they ?] [? save ?] 100

00:07:59.220 --> 00:08:00.850
milliseconds, 200 milliseconds.

00:08:00.850 --> 00:08:02.970
It comes when you
update the [? view. ?]

00:08:02.970 --> 00:08:04.960
Then your model tells
it to the network.

00:08:04.960 --> 00:08:07.470
Hey, there's a change
out here locally.

00:08:07.470 --> 00:08:09.160
Can you apply it to the server?

00:08:09.160 --> 00:08:10.460
And the server comes back.

00:08:10.460 --> 00:08:12.650
You refresh your [? view ?]
again because now we

00:08:12.650 --> 00:08:14.130
know you really change it.

00:08:14.130 --> 00:08:16.960
So if you implemented it this
way, it will look like this.

00:08:16.960 --> 00:08:18.620
You tap on the button.

00:08:18.620 --> 00:08:22.910
There is some sort of indication
that user receives the feedback

00:08:22.910 --> 00:08:24.670
instantly.

00:08:24.670 --> 00:08:28.770
And then when you finally
synchronize it, it turns red.

00:08:28.770 --> 00:08:31.580
So it's important that you
give a feedback to the user

00:08:31.580 --> 00:08:34.480
so they understand
something has changed.

00:08:34.480 --> 00:08:37.021
And now you [? finally also let
 them in. ?] And users learn

00:08:37.021 --> 00:08:37.520
this.

00:08:37.520 --> 00:08:41.720
And this is what we call a
responsive user experience.

00:08:41.720 --> 00:08:45.660
So look at the same
application again.

00:08:45.660 --> 00:08:47.240
I tap on it.

00:08:47.240 --> 00:08:47.990
Oh, it's yellow.

00:08:47.990 --> 00:08:48.640
Nice.

00:08:48.640 --> 00:08:49.970
I know something is happening.

00:08:49.970 --> 00:08:51.420
It received my tap.

00:08:51.420 --> 00:08:52.800
So I go back.

00:08:52.800 --> 00:08:54.100
There's other people.

00:08:54.100 --> 00:08:55.860
I tap someone else again.

00:08:55.860 --> 00:08:56.360
You go here.

00:08:56.360 --> 00:08:56.900
Nice.

00:08:56.900 --> 00:08:58.024
It's still doing something.

00:08:58.024 --> 00:09:00.920
It's consistent.

00:09:00.920 --> 00:09:03.930
It's good.

00:09:03.930 --> 00:09:05.520
OK, I did that again.

00:09:05.520 --> 00:09:06.540
Another use case.

00:09:06.540 --> 00:09:09.117
And I go to this page like
I'm just reading news, right?

00:09:09.117 --> 00:09:10.950
I stay there
[? while I'm doing ?] something

00:09:10.950 --> 00:09:11.870
else.

00:09:11.870 --> 00:09:13.840
And then Droid decides
to kill the application

00:09:13.840 --> 00:09:15.970
because we needed memory.

00:09:15.970 --> 00:09:18.054
And time passes.

00:09:18.054 --> 00:09:19.345
I come back to the application.

00:09:23.700 --> 00:09:24.770
And bang.

00:09:24.770 --> 00:09:26.420
I don't see it anymore.

00:09:26.420 --> 00:09:27.300
There was yellow.

00:09:27.300 --> 00:09:28.754
I put some
information-- like this

00:09:28.754 --> 00:09:29.920
is [INAUDIBLE] for the user.

00:09:29.920 --> 00:09:31.187
You put some comment.

00:09:31.187 --> 00:09:33.020
You [? can't ?] make
this not there anymore.

00:09:33.020 --> 00:09:35.910
Now you have no idea
what happened there.

00:09:35.910 --> 00:09:36.620
Did it post?

00:09:36.620 --> 00:09:37.347
Did it not post?

00:09:37.347 --> 00:09:37.930
What happened?

00:09:37.930 --> 00:09:39.810
Is a buggy app?

00:09:39.810 --> 00:09:42.220
So you don't want to do this.

00:09:42.220 --> 00:09:43.504
And now how do we fix this?

00:09:43.504 --> 00:09:44.920
So in the previous
one [? where ?]

00:09:44.920 --> 00:09:46.770
we said the view
controller calls the model.

00:09:46.770 --> 00:09:50.340
Model calls the network.

00:09:50.340 --> 00:09:52.190
OK, let's improve
this little a bit.

00:09:52.190 --> 00:09:54.485
Introduce something--
call it application logic,

00:09:54.485 --> 00:09:56.770
and make the model persistent.

00:09:56.770 --> 00:09:57.680
It's very important.

00:09:57.680 --> 00:10:00.840
You should definitely
use [? Eskilight, ?]

00:10:00.840 --> 00:10:01.507
use [INAUDIBLE].

00:10:01.507 --> 00:10:02.548
Use whatever you want we.

00:10:02.548 --> 00:10:03.350
We don't care.

00:10:03.350 --> 00:10:06.370
But use persistent data storage.

00:10:06.370 --> 00:10:09.620
So when the application logic
does any network request,

00:10:09.620 --> 00:10:12.570
it always updates
the persistent model.

00:10:12.570 --> 00:10:14.540
And then this fetches
an event, or you

00:10:14.540 --> 00:10:16.660
might be using [INAUDIBLE].

00:10:16.660 --> 00:10:18.390
Again, we don't care.

00:10:18.390 --> 00:10:19.160
[INAUDIBLE]

00:10:19.160 --> 00:10:23.460
And the view shows the
state on the model.

00:10:23.460 --> 00:10:25.480
There are two
important parts here.

00:10:25.480 --> 00:10:29.370
The model should be persistent,
and the view should always

00:10:29.370 --> 00:10:31.870
reflect what is in the model.

00:10:31.870 --> 00:10:36.120
So you don't just go and change
the bottom to selected state

00:10:36.120 --> 00:10:37.760
while you try to
make a web request.

00:10:37.760 --> 00:10:38.550
Don't do that.

00:10:38.550 --> 00:10:41.600
Update the model, let
the view refresh itself.

00:10:41.600 --> 00:10:43.460
Because when you
do this-- the user

00:10:43.460 --> 00:10:46.250
clicks click-- you tell
their application logic,

00:10:46.250 --> 00:10:47.830
I want to send a like.

00:10:47.830 --> 00:10:49.500
That updates the model.

00:10:49.500 --> 00:10:51.480
Model says, I have changed.

00:10:51.480 --> 00:10:53.900
Or the application logic
says, I have change.

00:10:53.900 --> 00:10:56.910
And your [INAUDIBLE], if user
is there, are like, all right.

00:10:56.910 --> 00:10:59.610
I should refresh myself
because the data I'm displaying

00:10:59.610 --> 00:11:01.540
has changed.

00:11:01.540 --> 00:11:02.820
So you go there.

00:11:02.820 --> 00:11:04.420
It refreshes [INAUDIBLE].

00:11:04.420 --> 00:11:07.640
This is when it is yellow
because [? there's ?] panic.

00:11:07.640 --> 00:11:09.570
It's not synced yet.

00:11:09.570 --> 00:11:11.410
And now, when the
application logic finally

00:11:11.410 --> 00:11:14.040
syncs it-- maybe three
days later, who cares--

00:11:14.040 --> 00:11:15.980
it updates the model again.

00:11:15.980 --> 00:11:17.870
And if you're
really still there,

00:11:17.870 --> 00:11:19.160
it's going to refresh itself.

00:11:19.160 --> 00:11:21.190
The [INAUDIBLE] is
you write these views.

00:11:21.190 --> 00:11:25.160
They try to represent what's
in the model and nothing else.

00:11:25.160 --> 00:11:29.330
Of course, some [? transient, ?]
temporary UI states.

00:11:29.330 --> 00:11:31.436
So we look at the
application again.

00:11:31.436 --> 00:11:33.310
We go there, and there
was a profile you see.

00:11:33.310 --> 00:11:34.080
You go back.

00:11:34.080 --> 00:11:35.310
You go to the other profile.

00:11:35.310 --> 00:11:35.810
You go back.

00:11:35.810 --> 00:11:39.510
You're using the
application for a while.

00:11:39.510 --> 00:11:42.330
And then what happens is you
go back to this list again,

00:11:42.330 --> 00:11:44.540
and there's a loading.

00:11:44.540 --> 00:11:47.240
I was in the application
two minutes ago.

00:11:47.240 --> 00:11:48.400
I saw that list.

00:11:48.400 --> 00:11:50.620
There is no way you are
loading that list because I

00:11:50.620 --> 00:11:51.750
know the list is there.

00:11:51.750 --> 00:11:54.367
So what went wrong here?

00:11:54.367 --> 00:11:55.450
So you saw this happening.

00:11:55.450 --> 00:11:58.170
Every time you go into your IU,
you fetch the list of users,

00:11:58.170 --> 00:11:58.670
right?

00:11:58.670 --> 00:12:01.410
You fetch the data,
if the user liked it.

00:12:01.410 --> 00:12:03.392
So this is your
background thread pull.

00:12:03.392 --> 00:12:05.600
You keep [? consuming ?]
[? these things. ?] You have

00:12:05.600 --> 00:12:07.360
multiple workers.

00:12:07.360 --> 00:12:09.610
So [? all ?] [? you do ?]
is refreshing user data from

00:12:09.610 --> 00:12:11.250
network.

00:12:11.250 --> 00:12:13.480
The other one is they
got [? big ?] stuff.

00:12:13.480 --> 00:12:15.310
Sends the user stats.

00:12:15.310 --> 00:12:18.810
And you went back to the UI, you
want to read the list of users

00:12:18.810 --> 00:12:19.606
from the disk.

00:12:19.606 --> 00:12:20.730
So you plant the right way.

00:12:20.730 --> 00:12:22.800
You are trying to
load it from the disk.

00:12:22.800 --> 00:12:24.870
But the problem
is your background

00:12:24.870 --> 00:12:28.450
turns are busy trying to
make a network request.

00:12:28.450 --> 00:12:30.660
This is so bad because
you know disk is there.

00:12:30.660 --> 00:12:33.040
You know you won't
be able to access it.

00:12:33.040 --> 00:12:35.630
But the network, you don't know.

00:12:35.630 --> 00:12:38.720
And you're making the
user wait for no reason.

00:12:38.720 --> 00:12:41.120
And the solution for
this is very simple.

00:12:41.120 --> 00:12:42.770
You just save different queues.

00:12:42.770 --> 00:12:44.130
For different type,
[? you want to ?] [? save ?]

00:12:44.130 --> 00:12:44.838
different queues.

00:12:44.838 --> 00:12:46.990
Well, you cannot just create
a queue for every type

00:12:46.990 --> 00:12:50.000
of [? run. ?] But usually,
at least you should have one

00:12:50.000 --> 00:12:54.157
for your network related stuff,
and one for your local access.

00:12:54.157 --> 00:12:56.115
Even for local access,
you'll probably just use

00:12:56.115 --> 00:12:57.199
a loader or an async task.

00:12:57.199 --> 00:12:59.739
[? They weren't ?] fast enough,
because those things are like

00:12:59.739 --> 00:13:00.756
100, 200 milliseconds.

00:13:00.756 --> 00:13:02.220
300 milliseconds.

00:13:02.220 --> 00:13:03.600
Very fast.

00:13:03.600 --> 00:13:06.880
So once we do this is we
add these tasks because we

00:13:06.880 --> 00:13:12.620
want to get data, they get
consumed in different queues.

00:13:12.620 --> 00:13:16.520
So even if the network is slow,
locally, everything is working.

00:13:16.520 --> 00:13:17.970
This is what we
call-- application

00:13:17.970 --> 00:13:19.000
should work offline.

00:13:19.000 --> 00:13:20.910
Everything just works.

00:13:20.910 --> 00:13:23.730
And then you're trying
to sync it later on.

00:13:23.730 --> 00:13:25.360
Of course, it's not
always everything.

00:13:25.360 --> 00:13:26.370
Whatever.

00:13:26.370 --> 00:13:28.440
So look at the other section.

00:13:28.440 --> 00:13:31.820
How do you optimize
for the next billion?

00:13:31.820 --> 00:13:33.388
And the next billion
looks like this.

00:13:37.820 --> 00:13:39.816
So this is 101.

00:13:39.816 --> 00:13:41.440
You need to translate
your application.

00:13:41.440 --> 00:13:45.700
If you want people to use it in
the other areas of the world,

00:13:45.700 --> 00:13:48.330
you want it to be translated.

00:13:48.330 --> 00:13:50.180
So you translate
the application.

00:13:50.180 --> 00:13:53.410
You translate your assets
because you have text there,

00:13:53.410 --> 00:13:55.390
and you also translate
your in-app purchases

00:13:55.390 --> 00:13:58.080
so that they can spend money.

00:13:58.080 --> 00:14:01.500
But actually, this is
not completely true.

00:14:01.500 --> 00:14:03.230
Translating is not enough.

00:14:03.230 --> 00:14:04.820
That's is not the right word.

00:14:04.820 --> 00:14:08.210
The right thing you
should do is localize.

00:14:08.210 --> 00:14:09.690
So localize your application.

00:14:09.690 --> 00:14:12.130
Don't just translate
it because let's say

00:14:12.130 --> 00:14:14.420
you have an application
about their family.

00:14:14.420 --> 00:14:17.000
Communicating with
their kids, whatever.

00:14:17.000 --> 00:14:19.070
On the Play Store
page, if you're

00:14:19.070 --> 00:14:21.520
an American family
in the United States,

00:14:21.520 --> 00:14:23.620
put an Indonesian
family in Indonesia.

00:14:23.620 --> 00:14:25.760
And if you're in China,
put a Chinese family.

00:14:25.760 --> 00:14:29.120
You should localize your assets
also within the application

00:14:29.120 --> 00:14:31.950
because this what will
make sense to that user.

00:14:31.950 --> 00:14:34.010
Every culture has
their differences.

00:14:34.010 --> 00:14:36.520
And if you want to make
best of localization,

00:14:36.520 --> 00:14:39.420
this is what you
should be doing.

00:14:39.420 --> 00:14:41.270
And the other thing
is text-free layouts.

00:14:41.270 --> 00:14:43.040
[INAUDIBLE] you can do this.

00:14:43.040 --> 00:14:44.090
It's really useful.

00:14:44.090 --> 00:14:45.950
For example, if you're
a messaging app,

00:14:45.950 --> 00:14:49.210
if you just want to say
sent, don't say sent.

00:14:49.210 --> 00:14:51.680
Put a check mark.

00:14:51.680 --> 00:14:53.240
[INAUDIBLE] very well.

00:14:53.240 --> 00:14:56.240
Or if it is read, put
double check marks.

00:14:56.240 --> 00:15:00.730
This helps you, first, you
don't need to translate it.

00:15:00.730 --> 00:15:02.290
It's fairly global.

00:15:02.290 --> 00:15:05.960
Your users learn it, and even
if your application is not

00:15:05.960 --> 00:15:08.230
messaging something
else-- the literacy rate

00:15:08.230 --> 00:15:10.180
may not be very
good in that area--

00:15:10.180 --> 00:15:13.900
this will help more users be
able to use your application.

00:15:13.900 --> 00:15:17.180
Another example, if you don't
need Wi-Fi don't say no Wi-Fi.

00:15:17.180 --> 00:15:17.870
Just put this.

00:15:17.870 --> 00:15:18.370
They learn.

00:15:18.370 --> 00:15:19.490
People learn these things.

00:15:19.490 --> 00:15:22.970
And multiple applications
use the same icons.

00:15:22.970 --> 00:15:24.840
And if you use the
material team and stuff,

00:15:24.840 --> 00:15:26.420
and user lands on
your application,

00:15:26.420 --> 00:15:27.549
they actually know it.

00:15:27.549 --> 00:15:28.590
They get the [INAUDIBLE].

00:15:28.590 --> 00:15:31.310
This is very important.

00:15:31.310 --> 00:15:34.170
The other thing is about
adaptive content fetching.

00:15:34.170 --> 00:15:38.480
So let's say this is an
application that shows photos.

00:15:38.480 --> 00:15:41.190
And this is the same UI.

00:15:41.190 --> 00:15:42.470
Pretty much looks the same.

00:15:42.470 --> 00:15:45.260
Of course the one on the
right is kind of low quality.

00:15:45.260 --> 00:15:49.470
But the one on the
left is 100% JPEG,

00:15:49.470 --> 00:15:51.770
and the right is 10% JPEG.

00:15:51.770 --> 00:15:56.850
It is almost 1/10 of it in
terms of size, and it looks OK.

00:15:56.850 --> 00:15:59.320
Now of course you don't
want to show a lower quality

00:15:59.320 --> 00:16:02.140
image to your users, but you
need to think about-- they

00:16:02.140 --> 00:16:03.710
either see the
lower quality image,

00:16:03.710 --> 00:16:05.450
or they see a blank screen.

00:16:05.450 --> 00:16:08.520
There's a big difference
between seeing a blank screen

00:16:08.520 --> 00:16:11.350
and a low quality image.

00:16:11.350 --> 00:16:14.370
And bonus points, you
can re-fetch the content.

00:16:14.370 --> 00:16:16.850
So you realize the
network is not very good.

00:16:16.850 --> 00:16:18.940
Your fetch the
lower quality image.

00:16:18.940 --> 00:16:20.730
And once you figure
out somewhere else,

00:16:20.730 --> 00:16:21.670
the network recovers.

00:16:21.670 --> 00:16:24.880
You refresh those images,
especially if it is free.

00:16:24.880 --> 00:16:26.790
You should do that.

00:16:26.790 --> 00:16:29.710
[INAUDIBLE] the connectivity
[? manager ?] API actually

00:16:29.710 --> 00:16:32.320
tells you if the network
is metered or not.

00:16:33.760 --> 00:16:36.230
So I want to give some
examples what we do

00:16:36.230 --> 00:16:37.590
at Google about these things.

00:16:37.590 --> 00:16:40.670
For example, if you're using
Google+, in the settings menu,

00:16:40.670 --> 00:16:44.710
there is a way to say,
OK, conserve data usage.

00:16:44.710 --> 00:16:47.770
Now, if you're even living
in the United States,

00:16:47.770 --> 00:16:50.110
you probably don't
really check because you

00:16:50.110 --> 00:16:51.410
have unlimited data.

00:16:51.410 --> 00:16:54.370
But the rest of the people
pay premiums for their data.

00:16:54.370 --> 00:16:57.210
So they're very, very
conscious about it.

00:16:57.210 --> 00:16:58.740
So you put the
settings like that.

00:16:58.740 --> 00:17:02.150
And in Google+, these
are what we actually do.

00:17:02.150 --> 00:17:05.970
If the network is fast, we
fetch a high quality JPEG.

00:17:05.970 --> 00:17:09.667
As the network goes slower,
we go lower, or maybe

00:17:09.667 --> 00:17:10.250
[? version ?].

00:17:10.250 --> 00:17:12.040
So we show a version.

00:17:12.040 --> 00:17:14.050
And it's like, instead
of seeing a blank screen,

00:17:14.050 --> 00:17:15.609
user sees some data.

00:17:15.609 --> 00:17:17.319
We help them see their data.

00:17:17.319 --> 00:17:21.440
It's a [? win-win. ?] And they
get a better user experience.

00:17:21.440 --> 00:17:22.800
And we also educate the users.

00:17:22.800 --> 00:17:23.800
This is also important.

00:17:23.800 --> 00:17:25.970
It's like, what does it
mean to conserve data?

00:17:25.970 --> 00:17:27.450
Why don't you always do it?

00:17:27.450 --> 00:17:29.420
Like, why are you
wasting my data?

00:17:29.420 --> 00:17:32.470
And if your users click
on there, we explain them,

00:17:32.470 --> 00:17:36.230
this is what it
means to save data.

00:17:36.230 --> 00:17:37.790
Another part is
adaptive behavior.

00:17:37.790 --> 00:17:39.400
Now, it's very common
in applications

00:17:39.400 --> 00:17:43.150
to have auto playing games,
or auto playing videos.

00:17:43.150 --> 00:17:45.510
What you should do
is, at this point,

00:17:45.510 --> 00:17:47.220
my user is showing my feed.

00:17:47.220 --> 00:17:48.780
Is the network fast?

00:17:48.780 --> 00:17:50.850
If the network is
fast, it's cool.

00:17:50.850 --> 00:17:52.970
Just go auto play the video.

00:17:52.970 --> 00:17:55.340
But if the network is
slow, don't do that.

00:17:55.340 --> 00:17:56.770
Just put a Play button.

00:17:56.770 --> 00:17:59.760
Don't waste their
network just because they

00:17:59.760 --> 00:18:01.070
may want to watch that video.

00:18:01.070 --> 00:18:03.250
That's a bad thing
for your users.

00:18:03.250 --> 00:18:07.410
And I have good network here,
so will play this video.

00:18:07.410 --> 00:18:11.060
Yes, good girl.

00:18:11.060 --> 00:18:11.560
[INAUDIBLE]

00:18:14.475 --> 00:18:16.600
OK, so, for example, this
is what we do on YouTube.

00:18:16.600 --> 00:18:21.110
In YouTube, if you go
to Quality Settings,

00:18:21.110 --> 00:18:24.010
there is an option
that says Auto.

00:18:24.010 --> 00:18:25.260
That's actually what it does.

00:18:25.260 --> 00:18:28.720
By checking the network
quality, we adjust your bitrate.

00:18:28.720 --> 00:18:31.260
And I'm sure you are so used
to this behavior you maybe

00:18:31.260 --> 00:18:32.035
don't even notice.

00:18:32.035 --> 00:18:34.570
But it takes time to implement.

00:18:34.570 --> 00:18:38.050
But the good news is the
ExoPlayer library from Google

00:18:38.050 --> 00:18:40.900
already support DASH
and smooth streaming.

00:18:40.900 --> 00:18:43.860
All you have to do
is use this library

00:18:43.860 --> 00:18:47.330
and let it handle these
different network protocols.

00:18:47.330 --> 00:18:50.570
Of course, also, your server
side needs to support it.

00:18:50.570 --> 00:18:51.120
Was not hard.

00:18:51.120 --> 00:18:51.620
It's easy.

00:18:51.620 --> 00:18:54.200
It's important.

00:18:54.200 --> 00:18:55.879
OK.

00:18:55.879 --> 00:18:57.150
Come on.

00:18:57.150 --> 00:18:57.930
All right.

00:18:57.930 --> 00:18:59.700
So this is another use case.

00:18:59.700 --> 00:19:01.650
Look at Uncle Bob.

00:19:01.650 --> 00:19:04.800
So this guy goes to
work every morning,

00:19:04.800 --> 00:19:09.100
takes the bus, maybe Google
bus, reads his news on the bus.

00:19:09.100 --> 00:19:11.440
Does the same thing
on the way back.

00:19:11.440 --> 00:19:13.050
This happens all the time.

00:19:13.050 --> 00:19:15.954
But what also happens
all the time is this.

00:19:15.954 --> 00:19:17.370
He's seeing a
loading [? dollop ?]

00:19:17.370 --> 00:19:22.880
when he tries to read his news
because there's like another 60

00:19:22.880 --> 00:19:25.480
people in the same bus trying
to use the same internet

00:19:25.480 --> 00:19:26.080
connection.

00:19:26.080 --> 00:19:28.150
And there's a lot
of other cars there.

00:19:28.150 --> 00:19:30.680
It's really like the
network gets congested,

00:19:30.680 --> 00:19:33.870
and no one gets a
good experience.

00:19:33.870 --> 00:19:35.013
How can we fix this?

00:19:35.013 --> 00:19:37.110
Well, the good news
is that this guy

00:19:37.110 --> 00:19:39.480
goes to work almost the
same time every morning.

00:19:39.480 --> 00:19:41.420
So he wakes up at 6:30.

00:19:41.420 --> 00:19:43.620
No brainer, set an alarm, right?

00:19:43.620 --> 00:19:46.920
We can set an alarm to
prepare the content for him.

00:19:46.920 --> 00:19:50.710
And also maybe, he leaves
the work at, like, 5:30

00:19:50.710 --> 00:19:51.440
every night.

00:19:51.440 --> 00:19:54.770
Let me set an alarm for
that and prepare the content

00:19:54.770 --> 00:19:58.374
so that they get some content
when they open the application.

00:19:58.374 --> 00:20:00.665
And the way we can do this
is, we have the alarmManager

00:20:00.665 --> 00:20:04.340
clause that will help you
wake up your application

00:20:04.340 --> 00:20:08.800
every morning, 6:30, so you
can pre-fetch your content.

00:20:08.800 --> 00:20:10.469
So let's say we implemented it.

00:20:10.469 --> 00:20:11.260
We are good, right?

00:20:11.260 --> 00:20:13.840
So all these users
have a good experience.

00:20:13.840 --> 00:20:17.650
Every morning, 6:30,
they get the latest news,

00:20:17.650 --> 00:20:18.890
and they are happy.

00:20:18.890 --> 00:20:20.610
But then we get more users.

00:20:20.610 --> 00:20:23.780
And more users make
this request at 6:30.

00:20:23.780 --> 00:20:25.030
And then this is what happens.

00:20:25.030 --> 00:20:27.170
Your cloud goes down.

00:20:27.170 --> 00:20:30.520
And you know what comes up
when your cloud goes down?

00:20:30.520 --> 00:20:33.000
Your system admin.

00:20:33.000 --> 00:20:35.530
That guy slept at like
4:30 AM in the morning.

00:20:35.530 --> 00:20:37.810
You woke him up at
6:30 with a pager.

00:20:37.810 --> 00:20:38.600
Why?

00:20:38.600 --> 00:20:41.370
Because you just made [? that ?]
[? because ?] 6:30 from every

00:20:41.370 --> 00:20:42.330
single client.

00:20:42.330 --> 00:20:44.120
And actually, it's a real story.

00:20:44.120 --> 00:20:49.750
We once seen a bug request
because from a provider.

00:20:49.750 --> 00:20:51.830
They said, there's a
bug with Android phones.

00:20:51.830 --> 00:20:54.880
Every morning, at this time,
we're getting so many request.

00:20:54.880 --> 00:20:57.020
Turns out, it was an
application like this.

00:20:57.020 --> 00:20:58.800
So we don't do that.

00:20:58.800 --> 00:21:00.400
How do we fix this?

00:21:00.400 --> 00:21:03.500
Super simple.

00:21:03.500 --> 00:21:07.460
So instead of just waking up
at 6:30, you randomize it.

00:21:07.460 --> 00:21:09.440
Wake up between 6:00 and 7:00.

00:21:09.440 --> 00:21:11.530
And then you wake
up each application

00:21:11.530 --> 00:21:14.040
in that random time.

00:21:14.040 --> 00:21:18.300
And then you're
server admin is happy.

00:21:18.300 --> 00:21:19.970
But then we are unhappy.

00:21:19.970 --> 00:21:23.270
Using AlarmManager, seriously?

00:21:23.270 --> 00:21:24.790
2016.

00:21:24.790 --> 00:21:25.290
Come on.

00:21:25.290 --> 00:21:26.120
How do we do this?

00:21:26.120 --> 00:21:28.120
We do this with JobScheduler.

00:21:28.120 --> 00:21:32.323
Or you can use JSON network
manager for the older API

00:21:32.323 --> 00:21:33.570
versions.

00:21:33.570 --> 00:21:36.090
So we wanted to do
this with JobScheduler.

00:21:36.090 --> 00:21:39.510
You create a job, you say,
OK, this is my service.

00:21:39.510 --> 00:21:41.370
You say, we want the
unmetered network.

00:21:41.370 --> 00:21:43.040
There is no reason
to cache the data

00:21:43.040 --> 00:21:45.900
if user is going to pay for it.

00:21:45.900 --> 00:21:50.930
And then we say, OK, start
the earliest, around 6:30.

00:21:50.930 --> 00:21:55.040
And then make it only
if the device is idle.

00:21:55.040 --> 00:21:57.520
And you say, if it
was only charging--

00:21:57.520 --> 00:21:59.055
these are all optional things.

00:21:59.055 --> 00:22:02.030
You say, all right, these are
all optional things that you

00:22:02.030 --> 00:22:04.960
cannot [? depend on in ?]
your use case.

00:22:04.960 --> 00:22:06.960
So what does this
overrideDeadline mean?

00:22:06.960 --> 00:22:10.010
So the idea here is that,
let's say we have this thing,

00:22:10.010 --> 00:22:12.300
and user forgot to
charge their phone.

00:22:12.300 --> 00:22:14.740
So it will wake
up in the morning.

00:22:14.740 --> 00:22:17.540
But what will happen
is the job will be just

00:22:17.540 --> 00:22:18.870
waiting there, sitting idle.

00:22:18.870 --> 00:22:21.260
Maybe user will go to
work, and then they

00:22:21.260 --> 00:22:22.180
will plug their phone.

00:22:22.180 --> 00:22:24.237
And then we will
fetch the content.

00:22:24.237 --> 00:22:26.320
It's already passed, like,
we missed the deadline.

00:22:26.320 --> 00:22:27.236
Why would you do this?

00:22:27.236 --> 00:22:29.100
So we tell the job
scheduler, hey,

00:22:29.100 --> 00:22:33.150
if you cannot do this
until 7:30, wake me up.

00:22:33.150 --> 00:22:39.050
So what we can do is,
when the job is started,

00:22:39.050 --> 00:22:42.180
you can simply check, OK,
did I get the deadline?

00:22:42.180 --> 00:22:43.420
Did the deadline expire?

00:22:43.420 --> 00:22:47.180
If the deadline expired, if
that's why I was woken up.

00:22:47.180 --> 00:22:49.110
This will [INAUDIBLE].

00:22:49.110 --> 00:22:51.000
Is the connection unlimited?

00:22:51.000 --> 00:22:52.760
If it is not, just
return false, I

00:22:52.760 --> 00:22:54.630
don't want to run
this job anymore.

00:22:54.630 --> 00:22:58.700
Or if you can say something
like, if the battery is

00:22:58.700 --> 00:23:01.770
charging, or is,
like, at least 75%,

00:23:01.770 --> 00:23:04.020
otherwise I will
not run this job.

00:23:04.020 --> 00:23:06.960
So this completely
depends on your use case.

00:23:06.960 --> 00:23:07.870
But you get the idea.

00:23:07.870 --> 00:23:10.700
Like, thing a [? beat, ?] try
to be total about these things.

00:23:10.700 --> 00:23:13.870
I think we provide enough main
APIs on the framework side

00:23:13.870 --> 00:23:15.440
to be able to
implement these things.

00:23:15.440 --> 00:23:17.280
And it's not hard.

00:23:17.280 --> 00:23:19.810
And in turn, your user receives
a really, really good user

00:23:19.810 --> 00:23:20.310
experience.

00:23:20.310 --> 00:23:22.360
This is important.

00:23:22.360 --> 00:23:25.460
So, for example, in YouTube,
you can go ahead and download

00:23:25.460 --> 00:23:29.610
a video for offline so that,
you know, you do it at home,

00:23:29.610 --> 00:23:31.440
you watch the TV
series, you download it,

00:23:31.440 --> 00:23:34.580
and while in the box,
you can watch it.

00:23:34.580 --> 00:23:37.000
Or in Maps, like,
recently, I was on vacation

00:23:37.000 --> 00:23:38.400
outside the country.

00:23:38.400 --> 00:23:41.300
And I just downloaded
the area on Google Maps.

00:23:41.300 --> 00:23:43.990
And even though I
didn't have data there,

00:23:43.990 --> 00:23:45.700
I could use my
phone to navigate.

00:23:45.700 --> 00:23:47.250
It was so nice.

00:23:47.250 --> 00:23:49.594
So these are like little
things that makes a huge user

00:23:49.594 --> 00:23:50.510
experience difference.

00:23:53.410 --> 00:23:55.970
Or, for example, another
example of pre-fetching,

00:23:55.970 --> 00:23:59.410
this is slightly different, but
this is what we do in Google+.

00:23:59.410 --> 00:24:02.200
So whenever we think
that there are new posts,

00:24:02.200 --> 00:24:08.320
we show a little touch button
that you can tap to refresh.

00:24:08.320 --> 00:24:11.370
So in there, what happens
behind the scenes is we detected

00:24:11.370 --> 00:24:16.930
our new post, we let the user
know, and if the user Tabs,

00:24:16.930 --> 00:24:19.190
we are going to go ahead
and fetch the content

00:24:19.190 --> 00:24:21.220
and then refresh the UI.

00:24:21.220 --> 00:24:23.070
But we changed
this a little bit.

00:24:23.070 --> 00:24:24.320
This is what we did.

00:24:24.320 --> 00:24:27.760
When we did a new post now, we
actually go ahead and fetch it

00:24:27.760 --> 00:24:30.910
because users in the application
we detected [INAUDIBLE],

00:24:30.910 --> 00:24:31.840
they want to see it.

00:24:31.840 --> 00:24:34.770
We are fairly comfortable
that they want that content.

00:24:34.770 --> 00:24:36.560
So we fetch it for them.

00:24:36.560 --> 00:24:39.512
And then we let the user know
that there is new content.

00:24:39.512 --> 00:24:41.220
But we don't just
refresh it because they

00:24:41.220 --> 00:24:42.469
might be doing something else.

00:24:42.469 --> 00:24:44.590
And it will be a
bad user experience.

00:24:44.590 --> 00:24:48.250
Instead we just notify the
user that there is new content.

00:24:48.250 --> 00:24:51.990
And if they tap, we
will refresh the data.

00:24:51.990 --> 00:24:55.470
Now, the difference between
these two user experience flaws

00:24:55.470 --> 00:24:57.860
is the first one takes
around three seconds.

00:24:57.860 --> 00:25:00.460
The second one
takes 0.3 seconds.

00:25:00.460 --> 00:25:02.180
This is almost 10x.

00:25:02.180 --> 00:25:05.630
There is a 9x difference--
you just change

00:25:05.630 --> 00:25:07.160
the order of two operations.

00:25:07.160 --> 00:25:09.790
A huge user
experience improvement

00:25:09.790 --> 00:25:14.076
with very, very little
effort is important.

00:25:14.076 --> 00:25:15.450
But if you're
doing pre-fetching,

00:25:15.450 --> 00:25:16.980
it's a very dangerous thing.

00:25:16.980 --> 00:25:18.270
It's really good for users.

00:25:18.270 --> 00:25:19.860
But it might be also real bad.

00:25:19.860 --> 00:25:21.290
So you need to be careful.

00:25:21.290 --> 00:25:23.830
First thing you should
be doing is balance

00:25:23.830 --> 00:25:25.130
for the available storage.

00:25:25.130 --> 00:25:26.590
Just don't fill up their phone.

00:25:26.590 --> 00:25:28.089
Especially in the
rest of the world,

00:25:28.089 --> 00:25:30.950
like, the phones
have lower memory.

00:25:30.950 --> 00:25:32.700
So you shouldn't
be filling it out

00:25:32.700 --> 00:25:33.866
with your pre-fetch content.

00:25:36.180 --> 00:25:39.840
Or, if you're going to fetch
some data that's expensive,

00:25:39.840 --> 00:25:41.420
let the user know.

00:25:41.420 --> 00:25:42.680
I want to do this update.

00:25:42.680 --> 00:25:45.750
Provide them with
settings for these things.

00:25:45.750 --> 00:25:49.200
These people are
really, really--

00:25:49.200 --> 00:25:51.780
they care about their data.

00:25:51.780 --> 00:25:53.317
They're really, really into it.

00:25:53.317 --> 00:25:54.650
So you should give them options.

00:25:54.650 --> 00:25:55.833
And they will use them.

00:25:58.680 --> 00:26:01.950
The other part is-- so I always
get this thing like, oh, now

00:26:01.950 --> 00:26:04.340
the Android devices have 2,
3 gigabytes of memory-- we

00:26:04.340 --> 00:26:05.920
don't need to care about it.

00:26:05.920 --> 00:26:06.700
Wrong.

00:26:06.700 --> 00:26:08.780
It's not like that
because first, the screens

00:26:08.780 --> 00:26:11.500
got a lot bigger, so we need to
use a lot more graphic memory.

00:26:11.500 --> 00:26:14.090
Your [? SS ?] get a lot
more higher quality.

00:26:14.090 --> 00:26:16.240
Those things are wasting
a lot more memory

00:26:16.240 --> 00:26:17.890
than they used to do before.

00:26:17.890 --> 00:26:21.230
Plus we try to run a lot more
many applications because it's

00:26:21.230 --> 00:26:23.260
the best for the user.

00:26:23.260 --> 00:26:24.780
So always measure your memory.

00:26:24.780 --> 00:26:27.339
And, like in the latest
versions of Android studio,

00:26:27.339 --> 00:26:29.130
this is so easy, you
just step on a button.

00:26:29.130 --> 00:26:32.180
I remember, before, you
will need to use, like, get

00:26:32.180 --> 00:26:34.450
the memory down from
DDMS, and then [INAUDIBLE]

00:26:34.450 --> 00:26:36.450
convert it, and then
open it in [? Eclipse ?].

00:26:36.450 --> 00:26:37.480
It was a mess.

00:26:37.480 --> 00:26:39.690
Now, in Android Studio,
just click on a button,

00:26:39.690 --> 00:26:41.820
it takes the
[INAUDIBLE] for you.

00:26:41.820 --> 00:26:44.270
I opens in this nice UI.

00:26:44.270 --> 00:26:45.040
And you know.

00:26:45.040 --> 00:26:47.330
There is usual suspects there.

00:26:47.330 --> 00:26:48.590
You just click on that.

00:26:48.590 --> 00:26:51.020
We will show you
all instances of it.

00:26:51.020 --> 00:26:53.880
You can check, OK, why
am retaining this object?

00:26:53.880 --> 00:26:55.910
And the coolest thing,
I love this thing,

00:26:55.910 --> 00:26:59.990
you can just right click on
the selected item, View Bitmap.

00:26:59.990 --> 00:27:01.330
Like how cool is that what?

00:27:01.330 --> 00:27:02.705
Do you know what
you have linked?

00:27:02.705 --> 00:27:05.782
This is so much faster than
what you were able to do before.

00:27:05.782 --> 00:27:08.240
So we're always spending time
on making these tools better,

00:27:08.240 --> 00:27:10.245
and you should take
advantage of them.

00:27:13.220 --> 00:27:16.810
So also in N, so you can have
seen, like, in marshmallow,

00:27:16.810 --> 00:27:20.000
in N, we're spending a lot
of time in battery life.

00:27:20.000 --> 00:27:22.765
This is very important for
us, overall system health.

00:27:22.765 --> 00:27:25.610
And we cannot do this
without your help.

00:27:25.610 --> 00:27:27.890
So in N, we also
introduced this new feature

00:27:27.890 --> 00:27:30.880
called Data Saver where
user can say, you know what?

00:27:30.880 --> 00:27:34.510
I want to limit application
data for the background apps.

00:27:34.510 --> 00:27:39.420
They don't get any data unless
the network is [? unlimited. ?]

00:27:39.420 --> 00:27:41.300
But if you're a
good application,

00:27:41.300 --> 00:27:43.140
user might whitelist you.

00:27:43.140 --> 00:27:45.280
So if you implemented
it properly,

00:27:45.280 --> 00:27:48.030
they will whitelist you, so
you will get the data while

00:27:48.030 --> 00:27:51.306
your competitor doesn't.

00:27:51.306 --> 00:27:53.210
And it only works
in metered networks.

00:27:53.210 --> 00:27:57.242
So we only block you if
we have a reason to do so.

00:27:57.242 --> 00:27:58.200
So how will you use it?

00:27:58.200 --> 00:28:00.590
So the connectivity manager
now has this new API.

00:28:00.590 --> 00:28:03.380
We can say, hey, is that
active network metered?

00:28:03.380 --> 00:28:06.860
And if it is metered, you can
get the background status,

00:28:06.860 --> 00:28:13.070
like you know if it is enabled,
or if you are whitelisted,

00:28:13.070 --> 00:28:14.430
or we are disabled.

00:28:14.430 --> 00:28:18.930
So the idea is that, even if
the user put Data Saver on,

00:28:18.930 --> 00:28:20.940
but you're whitelisted,
you should still

00:28:20.940 --> 00:28:23.722
be cautious about, OK, I don't
want to spend too much data.

00:28:23.722 --> 00:28:25.430
Hey, I have, like,
user [INAUDIBLE] data.

00:28:25.430 --> 00:28:26.480
That is just [INAUDIBLE].

00:28:26.480 --> 00:28:27.430
You can send it later.

00:28:27.430 --> 00:28:28.766
You don't need to send it now.

00:28:33.090 --> 00:28:36.290
So going to some more
offline use cases.

00:28:36.290 --> 00:28:39.030
And I want you to like
start thinking about, OK,

00:28:39.030 --> 00:28:42.900
how can I make my
application more offline?

00:28:42.900 --> 00:28:46.260
So this one use case, the first
time we give this talk a year

00:28:46.260 --> 00:28:49.300
ago people say, OK, like if
were a commercial app, right,

00:28:49.300 --> 00:28:51.740
there's a place where
people buy products,

00:28:51.740 --> 00:28:53.212
I cannot make it offline.

00:28:53.212 --> 00:28:55.670
Which is true, you cannot make
it offline because the price

00:28:55.670 --> 00:28:56.760
changes.

00:28:56.760 --> 00:29:00.080
There's no way you'll tell them,
hey, you bought this for $500,

00:29:00.080 --> 00:29:02.480
and then, one day later,
you charge them $700.

00:29:02.480 --> 00:29:03.445
You cannot do that.

00:29:03.445 --> 00:29:05.150
That would be rude.

00:29:05.150 --> 00:29:07.400
But there are still
things you can do.

00:29:07.400 --> 00:29:11.987
Your application, like
product information,

00:29:11.987 --> 00:29:14.320
when you buy something, when
I'm going to buy something,

00:29:14.320 --> 00:29:17.781
[? most likely, ?] I go to the
same page again, and again,

00:29:17.781 --> 00:29:18.280
and again.

00:29:18.280 --> 00:29:19.020
This will happen.

00:29:19.020 --> 00:29:21.050
This is a user behavior.

00:29:21.050 --> 00:29:22.390
So optimize for that.

00:29:22.390 --> 00:29:23.800
Keep the user data.

00:29:23.800 --> 00:29:24.630
Let them search.

00:29:24.630 --> 00:29:26.560
I will probably search
for the same products.

00:29:26.560 --> 00:29:28.140
Let them do a local search.

00:29:28.140 --> 00:29:29.640
Remember when we
talk about having

00:29:29.640 --> 00:29:31.510
a proper persistent model?

00:29:31.510 --> 00:29:34.780
It helps you here because you
can let them search locally

00:29:34.780 --> 00:29:38.580
but still let them know that,
I'm showing local results only.

00:29:38.580 --> 00:29:42.200
If they go to the product page,
show some sort of animation

00:29:42.200 --> 00:29:44.150
saying that, you cannot
buy this right now,

00:29:44.150 --> 00:29:45.900
I'm fetching the price.

00:29:45.900 --> 00:29:48.610
Your designer will give
you a better asset.

00:29:48.610 --> 00:29:50.920
And then, when the price
comes, you show it to them.

00:29:50.920 --> 00:29:52.990
So you don't block the user.

00:29:52.990 --> 00:29:55.620
But, for important
data, you just

00:29:55.620 --> 00:29:57.830
don't show it, or
show it grayed out.

00:29:57.830 --> 00:30:00.690
But think about this.

00:30:00.690 --> 00:30:02.710
Another example is
a messaging app.

00:30:02.710 --> 00:30:06.950
So they say, Jenny and Michael.

00:30:06.950 --> 00:30:07.880
So this is a couple.

00:30:07.880 --> 00:30:09.450
Jenny says, OK,
let's go to a movie.

00:30:09.450 --> 00:30:11.450
Michael says, sure, let's
watch "The Big Short."

00:30:11.450 --> 00:30:14.640
Jenny says, fine,
pick me up at 7:00.

00:30:14.640 --> 00:30:16.770
And OK, we'll meet at 7:00.

00:30:16.770 --> 00:30:20.920
But around 630 Michael realizes
that, hey, his Dog is sick.

00:30:20.920 --> 00:30:23.170
He doesn't want to
leave the dog home.

00:30:23.170 --> 00:30:25.760
So he says, hey,
Jenny, my dog is sick.

00:30:25.760 --> 00:30:26.780
How about you come over?

00:30:26.780 --> 00:30:28.870
We hang out at home?

00:30:28.870 --> 00:30:30.820
It's all [? good ?].

00:30:30.820 --> 00:30:33.050
Unless, you know,
the message isn't

00:30:33.050 --> 00:30:34.781
going be sent for no reason.

00:30:34.781 --> 00:30:35.280
Failed.

00:30:35.280 --> 00:30:36.820
Tap to try again.

00:30:36.820 --> 00:30:39.260
So as a developer,
I let the user know.

00:30:39.260 --> 00:30:41.510
You're actually not done.

00:30:41.510 --> 00:30:43.610
Because Michael,
you know, he wants

00:30:43.610 --> 00:30:45.970
to call his vet to get
some tips and stuff.

00:30:45.970 --> 00:30:47.960
So he already left
the application.

00:30:47.960 --> 00:30:51.770
So Michael did not know that
you couldn't send the message.

00:30:51.770 --> 00:30:54.990
That Michael could not know that
you didn't send the message.

00:30:54.990 --> 00:30:57.520
Jenny never saw the message.

00:30:57.520 --> 00:30:59.230
And this is Jenny's heart.

00:30:59.230 --> 00:31:03.100
It's broken because of you.

00:31:03.100 --> 00:31:06.810
[INAUDIBLE] OK.

00:31:06.810 --> 00:31:07.710
We have a solution.

00:31:07.710 --> 00:31:08.750
What could you do?

00:31:08.750 --> 00:31:10.208
You can do something
better, right?

00:31:10.208 --> 00:31:11.310
It's important.

00:31:11.310 --> 00:31:13.034
If you're [? the ?]
dating profile,

00:31:13.034 --> 00:31:15.200
and you couldn't send it
to the user now, it's fine.

00:31:15.200 --> 00:31:16.460
Like, it's not that important.

00:31:16.460 --> 00:31:17.793
This is a messaging application.

00:31:17.793 --> 00:31:19.380
It's an instant
messaging application.

00:31:19.380 --> 00:31:21.080
You have some responsibilities.

00:31:21.080 --> 00:31:23.910
So if you couldn't
send the message,

00:31:23.910 --> 00:31:26.085
and you know user didn't
see it, let them know.

00:31:26.085 --> 00:31:27.770
Show a notification.

00:31:27.770 --> 00:31:30.580
Because you already know that
user is not in your activity.

00:31:30.580 --> 00:31:34.730
You already know that they
did not see the message.

00:31:34.730 --> 00:31:36.800
So instead, you
show a notification.

00:31:36.800 --> 00:31:38.184
Michael calls his girlfriend.

00:31:38.184 --> 00:31:39.850
And they're happy
couple, thanks to you.

00:31:42.790 --> 00:31:44.870
And another thing that
you could, like, further

00:31:44.870 --> 00:31:47.850
improve the user experiences,
you can always let them know.

00:31:47.850 --> 00:31:50.420
Like if you're in the
screen they're messaging,

00:31:50.420 --> 00:31:53.870
if you know there's no internet
connection, just put it.

00:31:53.870 --> 00:31:57.250
By the way, if you're listening
for internet connection

00:31:57.250 --> 00:32:01.790
in [? an ?] or [? all ?], you
only receive that broadcast

00:32:01.790 --> 00:32:03.800
if you are the
front application.

00:32:03.800 --> 00:32:06.317
Don't register for that
broadcast in your manifest.

00:32:06.317 --> 00:32:07.650
[? It's ?] just stopped working.

00:32:07.650 --> 00:32:09.310
So you can try.

00:32:09.310 --> 00:32:10.920
It's not going to work.

00:32:10.920 --> 00:32:12.550
But your application,
you can still

00:32:12.550 --> 00:32:15.050
use the Connectivity Manager
and register that broadcast

00:32:15.050 --> 00:32:17.740
programatically.

00:32:17.740 --> 00:32:20.520
So as another example, if you
have a TV schedule application,

00:32:20.520 --> 00:32:23.260
of course they cannot
watch TV offline.

00:32:23.260 --> 00:32:24.410
But you can do some stuff.

00:32:24.410 --> 00:32:28.415
You can let them click on a
button and schedule an alarm.

00:32:28.415 --> 00:32:29.790
There's still
things that you can

00:32:29.790 --> 00:32:32.570
do because you can implant
all of this within the device

00:32:32.570 --> 00:32:34.320
without [INAUDIBLE]
network communication.

00:32:36.990 --> 00:32:39.144
So the idea is that
if, you start thinking

00:32:39.144 --> 00:32:40.310
about what can I do offline?

00:32:40.310 --> 00:32:41.860
What I can I do offline?

00:32:41.860 --> 00:32:43.940
You will find really,
really good use cases.

00:32:43.940 --> 00:32:46.164
And it's going to
differentiate your application.

00:32:46.164 --> 00:32:48.330
So even though we are talking
about this [? talk, ?]

00:32:48.330 --> 00:32:50.680
you say it's like next
billion users offline,

00:32:50.680 --> 00:32:54.360
this actually helps your
users all around the world.

00:32:54.360 --> 00:32:57.590
It's not only for them.

00:32:57.590 --> 00:33:00.070
So I want to quickly
go through this.

00:33:00.070 --> 00:33:03.770
It's like, OK, I'll say,
you synchronize the data.

00:33:03.770 --> 00:33:07.020
You update the persistent model,
and now you synchronize data.

00:33:07.020 --> 00:33:08.220
How do you do this?

00:33:08.220 --> 00:33:10.700
So luckily, scientist has
we're working on this problem.

00:33:10.700 --> 00:33:12.230
We don't have to solve it.

00:33:12.230 --> 00:33:14.130
There's something
operational transformer,

00:33:14.130 --> 00:33:16.860
like things like
Google Docs uses.

00:33:16.860 --> 00:33:18.756
Or there's conflict
free replication.

00:33:18.756 --> 00:33:20.380
There's a bunch of
things I don't know.

00:33:20.380 --> 00:33:21.820
There's a lot of [? articles ?].

00:33:21.820 --> 00:33:23.770
But you don't need them.

00:33:23.770 --> 00:33:25.695
What we apply is the
Pareto Principle.

00:33:25.695 --> 00:33:27.830
We will do the 20% of the work.

00:33:27.830 --> 00:33:29.390
We'll get the 80%
of the benefits.

00:33:29.390 --> 00:33:32.320
And we'll run away.

00:33:32.320 --> 00:33:35.190
For example, if you
have a post, or user,

00:33:35.190 --> 00:33:38.540
there's something you can like.

00:33:38.540 --> 00:33:41.040
And when user likes it,
you mark it as liked.

00:33:41.040 --> 00:33:41.990
You update the model.

00:33:44.610 --> 00:33:47.190
But what happens is, next time
like, that was another request

00:33:47.190 --> 00:33:49.700
running, and it fetches
the list we're posting at.

00:33:49.700 --> 00:33:52.660
It just overrides what
you have put there.

00:33:52.660 --> 00:33:54.310
That's a bad problem.

00:33:54.310 --> 00:33:55.370
How do you solve this?

00:33:55.370 --> 00:33:56.040
Very easy.

00:33:56.040 --> 00:33:59.090
You add another field that
you only modify locally.

00:33:59.090 --> 00:34:00.730
So it's yours.

00:34:00.730 --> 00:34:02.770
I call this, like, local here.

00:34:02.770 --> 00:34:05.120
So when you want to check
if user liked a post,

00:34:05.120 --> 00:34:09.060
all you do is, hey,
you update that field.

00:34:09.060 --> 00:34:12.080
When fetch the feed,
it doesn't override

00:34:12.080 --> 00:34:15.239
because that field doesn't
exist on the server side.

00:34:15.239 --> 00:34:18.810
And if you want to get,
when you are putting the UI,

00:34:18.810 --> 00:34:21.080
if you want to check
that the user liked this,

00:34:21.080 --> 00:34:22.130
well it's very simple.

00:34:22.130 --> 00:34:23.810
You check if there's
a local value.

00:34:23.810 --> 00:34:24.370
Show it.

00:34:24.370 --> 00:34:26.449
Otherwise, use
the value that you

00:34:26.449 --> 00:34:28.489
[INAUDIBLE] from the server.

00:34:28.489 --> 00:34:32.746
This is very simple thing,
super easy to implement.

00:34:32.746 --> 00:34:34.540
And it gives you
most of the benefit.

00:34:38.449 --> 00:34:41.480
So another example, let's
say you're fetching posts,

00:34:41.480 --> 00:34:44.659
some posts have been
deleted on the server.

00:34:44.659 --> 00:34:46.130
Tell your server guys.

00:34:46.130 --> 00:34:48.070
Let them send you the
list of deleted posts.

00:34:48.070 --> 00:34:50.132
It's so easy for them to do.

00:34:50.132 --> 00:34:52.090
And this way, you can
locally cache everything,

00:34:52.090 --> 00:34:53.465
[? or ?] show
everything locally,

00:34:53.465 --> 00:34:55.780
and if something has been
deleted on the server,

00:34:55.780 --> 00:34:57.750
you will eventually
get notified about it.

00:34:57.750 --> 00:35:00.270
And you will update
your local [? later ?].

00:35:00.270 --> 00:35:01.973
This is very easy
for them to do.

00:35:04.760 --> 00:35:06.550
So if you get
another example, you

00:35:06.550 --> 00:35:08.020
could be sending
the server, hey, I

00:35:08.020 --> 00:35:11.920
have the post between
8 and 31 when you make

00:35:11.920 --> 00:35:13.870
a call to get the new posts.

00:35:13.870 --> 00:35:17.560
Your [INAUDIBLE]
or whatever, right?

00:35:17.560 --> 00:35:20.800
And now the server can send
you which items from that range

00:35:20.800 --> 00:35:23.590
has been deleted.

00:35:23.590 --> 00:35:26.450
I know it's sometimes hard to
convince your backend people,

00:35:26.450 --> 00:35:27.991
like there's a
[? clash ?], everybody

00:35:27.991 --> 00:35:29.670
wants the other
people to do the work.

00:35:29.670 --> 00:35:32.620
And there's this thing like,
hey, I have a perfect REST API.

00:35:32.620 --> 00:35:35.567
So you make 25 requests
just to fetch a feed.

00:35:35.567 --> 00:35:36.525
Don't let them do that.

00:35:36.525 --> 00:35:37.750
Don't let them do that.

00:35:37.750 --> 00:35:38.470
Fight for it.

00:35:38.470 --> 00:35:40.940
It's important that they
provide you the right APIs

00:35:40.940 --> 00:35:43.112
for your application.

00:35:43.112 --> 00:35:44.320
So there's another case here.

00:35:44.320 --> 00:35:46.500
Like I've been trying to
update the profile page.

00:35:46.500 --> 00:35:48.620
And I have two
different clients.

00:35:48.620 --> 00:35:50.280
One of them changes
the federal color.

00:35:50.280 --> 00:35:51.610
The other one changes the name.

00:35:51.610 --> 00:35:52.700
And I get a conflict.

00:35:52.700 --> 00:35:55.860
How do you solve these
kind of conflicts?

00:35:55.860 --> 00:35:58.120
Add a version.

00:35:58.120 --> 00:36:00.810
Now your date is versioned.

00:36:00.810 --> 00:36:03.559
So when you make a request,
[? client ?] says, OK,

00:36:03.559 --> 00:36:06.100
[? change the favorite ?] color
to this one on top of version

00:36:06.100 --> 00:36:06.750
10.

00:36:06.750 --> 00:36:10.690
And then the server can
say, OK, since this version,

00:36:10.690 --> 00:36:12.564
I can apply this
[? diff ?] and do it.

00:36:12.564 --> 00:36:13.980
Or decide whatever
you want to do.

00:36:13.980 --> 00:36:15.930
Maybe you don't want
them to do that.

00:36:15.930 --> 00:36:19.150
The thing is, it will
happen very rarely,

00:36:19.150 --> 00:36:21.730
and you will be
handling that case.

00:36:21.730 --> 00:36:23.970
So these won't
override each other.

00:36:23.970 --> 00:36:27.870
And if you start versioning your
objects, your value objects,

00:36:27.870 --> 00:36:31.470
you get this nice
thing where, hey, you

00:36:31.470 --> 00:36:33.180
made a request of fetch posts.

00:36:33.180 --> 00:36:34.670
Some of them were updated.

00:36:34.670 --> 00:36:35.750
Server already knows.

00:36:35.750 --> 00:36:37.850
You told the server,
I have these items

00:36:37.850 --> 00:36:39.510
with these versions.

00:36:39.510 --> 00:36:41.710
The stuff that has been
changed, they could tell,

00:36:41.710 --> 00:36:44.105
hey, hey, these are the
posts that have been updated.

00:36:44.105 --> 00:36:45.230
And here is their new data.

00:36:45.230 --> 00:36:48.650
In one request, you
get all of the diff.

00:36:48.650 --> 00:36:50.742
Again, I'm not telling
you to do things this way.

00:36:50.742 --> 00:36:52.200
This is just a way
of doing things.

00:36:52.200 --> 00:36:53.415
It's very simple.

00:36:53.415 --> 00:36:54.248
And it is effective.

00:36:59.820 --> 00:37:01.982
So if you want to read
more about this topic,

00:37:01.982 --> 00:37:04.232
you can go learn about, like,
multiversion concurrence

00:37:04.232 --> 00:37:04.731
and control.

00:37:04.731 --> 00:37:06.930
It's widely used in databases.

00:37:06.930 --> 00:37:08.920
Like maybe some really,
really important,

00:37:08.920 --> 00:37:10.472
like learn about
operational transfer

00:37:10.472 --> 00:37:11.930
if this is really,
really important

00:37:11.930 --> 00:37:15.280
for you do you, like, multiple
clients changing the same data.

00:37:15.280 --> 00:37:16.840
So these are solved problems.

00:37:16.840 --> 00:37:18.630
You just need to
go and check them.

00:37:18.630 --> 00:37:20.730
So it's not hard.

00:37:20.730 --> 00:37:24.630
OK, I will go to some quickly
tips and tricks with a bite

00:37:24.630 --> 00:37:27.390
size information.

00:37:27.390 --> 00:37:30.400
As I said before, when
we talk about network,

00:37:30.400 --> 00:37:33.340
design your API for your client.

00:37:33.340 --> 00:37:35.880
[INAUDIBLE] like I have
a perfect REST API.

00:37:35.880 --> 00:37:37.660
No, that doesn't matter!

00:37:37.660 --> 00:37:41.120
The perfect API is the one
that my user experience

00:37:41.120 --> 00:37:42.170
fits the best.

00:37:42.170 --> 00:37:43.610
This is what you want.

00:37:43.610 --> 00:37:44.690
So do it.

00:37:44.690 --> 00:37:47.290
Tell them to do it for you.

00:37:47.290 --> 00:37:50.780
But your API should be
for your application.

00:37:50.780 --> 00:37:54.480
And whatever you can do on the
server, do it on the server.

00:37:54.480 --> 00:37:57.740
Like if they can pass metadata,
anything that will help you,

00:37:57.740 --> 00:37:58.270
do it there.

00:37:58.270 --> 00:38:01.800
Because it is much easier to
scale than the tiny device

00:38:01.800 --> 00:38:05.090
you have on your pocket.

00:38:05.090 --> 00:38:07.700
And one more thing you do
is batch your requests.

00:38:07.700 --> 00:38:11.080
Now again and again, we say,
battery life is very important.

00:38:11.080 --> 00:38:12.670
Date is very important.

00:38:12.670 --> 00:38:14.710
If you batch your
requests, the battery life

00:38:14.710 --> 00:38:15.570
will improve a lot.

00:38:15.570 --> 00:38:18.160
JobScheduler already
does it for you.

00:38:18.160 --> 00:38:21.410
So just use JobScheduler or
[? GCI Network Manager. ?] You

00:38:21.410 --> 00:38:22.580
will be a good citizen.

00:38:22.580 --> 00:38:23.964
We will love you.

00:38:23.964 --> 00:38:25.890
It's good things.

00:38:25.890 --> 00:38:28.810
So for example, this an
example of a bad API.

00:38:28.810 --> 00:38:30.360
This is a terrible API.

00:38:30.360 --> 00:38:33.690
It gives me a user, a
name, and a photoURL.

00:38:33.690 --> 00:38:35.767
I have no idea what that
photoURL represents.

00:38:35.767 --> 00:38:37.600
You put through it in
a [? stagnant ?] grid.

00:38:37.600 --> 00:38:39.170
It recycled the view.

00:38:39.170 --> 00:38:40.860
When you fetch the
photo, grid starts

00:38:40.860 --> 00:38:43.330
moving because you didn't
know how big the image is.

00:38:43.330 --> 00:38:45.270
You just put something
random there,

00:38:45.270 --> 00:38:47.790
and the image turned out
to be a real weird one.

00:38:47.790 --> 00:38:49.500
So your UI had to reschedule.

00:38:49.500 --> 00:38:51.150
It's terrible for the user.

00:38:51.150 --> 00:38:54.045
And it's very easy to fix.

00:38:54.045 --> 00:38:56.670
Tell your server to send you the
width and height of the image,

00:38:56.670 --> 00:38:58.440
so you can put the placeholder.

00:38:58.440 --> 00:39:00.397
Like anything in
RecyclerView loves this.

00:39:00.397 --> 00:39:01.980
Like when they come
[? online, ?] they

00:39:01.980 --> 00:39:03.650
want to have the final size.

00:39:03.650 --> 00:39:07.430
If your server sends it to
you, you have the final size.

00:39:07.430 --> 00:39:09.450
You can even send the palette.

00:39:09.450 --> 00:39:11.830
It's also very easy to
calculate on the server side

00:39:11.830 --> 00:39:14.020
instead of doing
it on the device.

00:39:14.020 --> 00:39:15.750
They send you the
palette of the picture.

00:39:15.750 --> 00:39:17.380
So while you are
fetching the picture,

00:39:17.380 --> 00:39:19.510
instead of just
showing the gray box,

00:39:19.510 --> 00:39:22.080
you show another box that has
the same background color,

00:39:22.080 --> 00:39:24.660
so you can like easily
transform to the new one.

00:39:24.660 --> 00:39:26.210
This improves user experience.

00:39:26.210 --> 00:39:28.370
It's very important.

00:39:28.370 --> 00:39:32.090
So to sum up everything,
the main goal

00:39:32.090 --> 00:39:34.070
here is you [? architecture ?]
your application

00:39:34.070 --> 00:39:35.410
for the user experience.

00:39:35.410 --> 00:39:36.690
They can be in United States.

00:39:36.690 --> 00:39:39.380
They can be Indonesia,
China, doesn't matter.

00:39:39.380 --> 00:39:41.756
The important thing is
their user experiences.

00:39:41.756 --> 00:39:44.230
It's your responsibility.

00:39:44.230 --> 00:39:45.930
Have a real local model.

00:39:45.930 --> 00:39:47.800
Just don't keep
things in a hash maps.

00:39:47.800 --> 00:39:50.000
Put them on to the SQL
[INAUDIBLE] realm, whatever

00:39:50.000 --> 00:39:52.330
you prefer, we don't care.

00:39:52.330 --> 00:39:54.640
But put it on disk.

00:39:54.640 --> 00:39:57.230
And when you write your
application don't think, OK,

00:39:57.230 --> 00:40:00.180
now I get this data from the
server, and I update this UI,

00:40:00.180 --> 00:40:02.630
a user clicks on this, I
make this other request.

00:40:02.630 --> 00:40:03.560
Don't do that.

00:40:03.560 --> 00:40:06.220
Think about, I have the
data on the disk, that's

00:40:06.220 --> 00:40:08.910
what I show to the
user, my user reacts.

00:40:08.910 --> 00:40:11.300
I have some logic to update
the data on the disk,

00:40:11.300 --> 00:40:13.010
and I show it all the time.

00:40:13.010 --> 00:40:15.340
And some other
application logic that

00:40:15.340 --> 00:40:17.560
tries to synchronize the
data with the server.

00:40:17.560 --> 00:40:20.360
It makes it a lot easier.

00:40:20.360 --> 00:40:22.490
And decouple.

00:40:22.490 --> 00:40:24.510
Like, you should
decouple these things.

00:40:24.510 --> 00:40:27.182
The part that's related
to the UI, and the disk,

00:40:27.182 --> 00:40:28.100
they know each other.

00:40:28.100 --> 00:40:30.610
You have an application logic
that talks to the network.

00:40:30.610 --> 00:40:34.040
When you decouple things, it
makes it a lot easier to test.

00:40:34.040 --> 00:40:35.750
But don't overdo it.

00:40:35.750 --> 00:40:39.080
Like when I see, like, there
is more powerful architectures,

00:40:39.080 --> 00:40:40.979
and people, hey, I
create an interface,

00:40:40.979 --> 00:40:43.020
an interface for the
factories, and the interface

00:40:43.020 --> 00:40:44.590
of the factory factories.

00:40:44.590 --> 00:40:46.070
It's like, don't do that.

00:40:46.070 --> 00:40:47.220
This is still a phone.

00:40:47.220 --> 00:40:49.690
If you look at the
framework code,

00:40:49.690 --> 00:40:53.176
we still write it as
we write C. You don't

00:40:53.176 --> 00:40:54.300
have to write it like that.

00:40:54.300 --> 00:40:56.050
Use [INAUDIBLE],
whatever, do it.

00:40:56.050 --> 00:40:58.290
Use it, if it makes
your application better.

00:40:58.290 --> 00:41:00.017
But don't over-architect.

00:41:00.017 --> 00:41:01.100
It's still a mobile phone.

00:41:01.100 --> 00:41:04.120
We are trying to run
many, many, applications

00:41:04.120 --> 00:41:05.450
on the same device.

00:41:05.450 --> 00:41:09.030
And even if the device say
four cores, eight cores,

00:41:09.030 --> 00:41:11.180
most of the time, only
one or two of those cores

00:41:11.180 --> 00:41:13.590
are actually really
capable of doing anything.

00:41:13.590 --> 00:41:16.060
Plus we try to keep
them [? low ?] mode

00:41:16.060 --> 00:41:18.150
or not run them at
all, to save battery.

00:41:20.730 --> 00:41:22.270
And act early.

00:41:22.270 --> 00:41:23.220
This is important.

00:41:23.220 --> 00:41:25.594
In a previous job I worked,
I [? paid ?] this [? step. ?]

00:41:25.594 --> 00:41:28.040
if you have this kind of
technical depth, it's really,

00:41:28.040 --> 00:41:29.090
really hard to [? pay ?].

00:41:29.090 --> 00:41:32.110
So the sooner you
start, the better it is.

00:41:32.110 --> 00:41:35.600
And one last note, something
to remember from this talk,

00:41:35.600 --> 00:41:36.850
know your enemies.

00:41:36.850 --> 00:41:38.526
Network is unreliable.

00:41:38.526 --> 00:41:40.400
You don't want to be
doing a network request.

00:41:40.400 --> 00:41:41.983
Every time you make
a network request,

00:41:41.983 --> 00:41:45.620
you should feel uncomfortable,
like, ew, what's going on.

00:41:45.620 --> 00:41:47.280
And then know your friends.

00:41:47.280 --> 00:41:48.297
Disk is your friend.

00:41:48.297 --> 00:41:49.130
Persists everything.

00:41:49.130 --> 00:41:50.290
It's very reliable.

00:41:50.290 --> 00:41:52.680
If the disk is broken, the
phone is already broken,

00:41:52.680 --> 00:41:54.284
so you don't need
to worry about it.

00:41:57.050 --> 00:41:58.150
So, it's your friend.

00:41:58.150 --> 00:42:00.410
It's actually your best friend.

00:42:00.410 --> 00:42:02.210
Thank you.

