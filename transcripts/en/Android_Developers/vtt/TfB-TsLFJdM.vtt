WEBVTT
Kind: captions
Language: en

00:00:00.301 --> 00:00:02.009
SPEAKER: Fonts can
play an important role

00:00:02.009 --> 00:00:04.800
in branding your app, but
using custom fonts used

00:00:04.800 --> 00:00:06.450
to be quite complicated.

00:00:06.450 --> 00:00:09.550
On top of this, having the
font files bundled in your app

00:00:09.550 --> 00:00:12.080
increased your APK
size considerably.

00:00:12.080 --> 00:00:14.850
With Android O and Support
Library 26 or above,

00:00:14.850 --> 00:00:17.490
we have added support for
two new features-- fonts

00:00:17.490 --> 00:00:20.370
as resources and
downloadable fonts.

00:00:20.370 --> 00:00:22.140
This means that you
have another resource

00:00:22.140 --> 00:00:25.830
folder called Font where you
can put your font assets.

00:00:25.830 --> 00:00:29.970
These can be TTF, Altura
files, but also XML files

00:00:29.970 --> 00:00:32.790
where you can define a font
family with different files

00:00:32.790 --> 00:00:34.800
for styles and weights.

00:00:34.800 --> 00:00:37.410
You can then reference
fonts from the XML using

00:00:37.410 --> 00:00:41.370
the fontfamily property in the
Text view or from the code,

00:00:41.370 --> 00:00:44.971
by getting a reference to the
typeface via the resources.

00:00:44.971 --> 00:00:46.470
With the Android
Studio integration,

00:00:46.470 --> 00:00:48.870
you can preview the font
resource or its usage

00:00:48.870 --> 00:00:50.880
in the Layout Editor.

00:00:50.880 --> 00:00:53.342
We also now support
downloadable fonts

00:00:53.342 --> 00:00:55.550
so this means that you don't
need to bundle your font

00:00:55.550 --> 00:00:57.930
file in your APK,
but rather the system

00:00:57.930 --> 00:01:00.960
will download them for you on
demand from a font provider,

00:01:00.960 --> 00:01:04.860
for example, from Google Fonts
from Google Play services.

00:01:04.860 --> 00:01:08.250
Moreover, if other apps on
the device use the same font,

00:01:08.250 --> 00:01:10.290
the system will just reuse it.

00:01:10.290 --> 00:01:12.750
If the font can't be downloaded,
the default system one

00:01:12.750 --> 00:01:14.130
will be used.

00:01:14.130 --> 00:01:16.170
The font is retrieved
synchronously

00:01:16.170 --> 00:01:18.600
when the layout
using it is inflated.

00:01:18.600 --> 00:01:20.700
To avoid the increase of
the first layout time,

00:01:20.700 --> 00:01:25.170
you can pre-declare fonts that
need retrieving at app start.

00:01:25.170 --> 00:01:28.140
Define which fonts will be
downloaded in a resource array

00:01:28.140 --> 00:01:30.580
and add the metadata tag
to declare the resource

00:01:30.580 --> 00:01:32.580
array in your manifest.

00:01:32.580 --> 00:01:35.020
You can also use the
font fetch strategy

00:01:35.020 --> 00:01:37.650
to tell the system to fetch
the font asynchronously

00:01:37.650 --> 00:01:39.390
with a timeout.

00:01:39.390 --> 00:01:41.790
So how do you get
to those fonts?

00:01:41.790 --> 00:01:44.580
In the Layout Editor, select
the text view and then

00:01:44.580 --> 00:01:48.380
under Properties, select
Font Family, More Fonts.

00:01:48.380 --> 00:01:50.460
Android Studio allows
you to pick any font

00:01:50.460 --> 00:01:53.190
from the extensive Google
Fonts catalog, all of them

00:01:53.190 --> 00:01:55.300
optimized to work on Android.

00:01:55.300 --> 00:01:57.020
Pick the font you
want and the size

00:01:57.020 --> 00:02:00.360
whether you want it to be
a downloadable font or not.

00:02:00.360 --> 00:02:02.250
If you want to avoid
downloading the file,

00:02:02.250 --> 00:02:05.040
either because you want to have
the font available even when

00:02:05.040 --> 00:02:07.890
the app is offline or because
you're targeting devices that

00:02:07.890 --> 00:02:09.780
don't use Google
Play services, you

00:02:09.780 --> 00:02:12.940
can always choose to
bundle the Google font.

00:02:12.940 --> 00:02:15.480
Font files will be automatically
added to the Font folder

00:02:15.480 --> 00:02:17.880
and the font
referenced in your XML.

00:02:17.880 --> 00:02:20.110
To apply the same font
in the entire app,

00:02:20.110 --> 00:02:22.680
use the Font Family
style item in your theme.

00:02:22.680 --> 00:02:25.635
Just watch out for any styles
that also use Font Family

00:02:25.635 --> 00:02:28.740
and can override the app theme.

00:02:28.740 --> 00:02:32.190
In some cases, you might need
to dynamically download fonts.

00:02:32.190 --> 00:02:35.220
To implement this, there are two
classes that you need to use--

00:02:35.220 --> 00:02:38.090
a font request that allows you
to set up which kind of font

00:02:38.090 --> 00:02:40.680
you want to download
and a fonts contract

00:02:40.680 --> 00:02:42.930
that allows to create
a typeface object

00:02:42.930 --> 00:02:44.880
based on the font request.

00:02:44.880 --> 00:02:46.590
If you're using the
Support Library,

00:02:46.590 --> 00:02:50.100
then just use the font request
and fonts compact contract

00:02:50.100 --> 00:02:51.900
from the support package.

00:02:51.900 --> 00:02:54.150
The fetching will be
done on a handler thread

00:02:54.150 --> 00:02:56.250
that you'll need to
provide, so just make

00:02:56.250 --> 00:02:58.250
sure that's not the UI thread.

00:02:58.250 --> 00:02:59.490
That's it.

00:02:59.490 --> 00:03:02.280
In just a few clicks
or a few lines of code,

00:03:02.280 --> 00:03:04.110
you can improve the
personality of your app

00:03:04.110 --> 00:03:08.130
by adding fonts, and all of this
with memory, network, and space

00:03:08.130 --> 00:03:09.330
savings.

00:03:09.330 --> 00:03:11.670
If you want to find out more
about working with fonts,

00:03:11.670 --> 00:03:14.010
check out the Android
documentation, the sample code,

00:03:14.010 --> 00:03:17.142
and the Google I/O talk on
What's New in Support Library.

00:03:17.142 --> 00:03:20.852
[MUSIC PLAYING]

