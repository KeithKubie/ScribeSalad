WEBVTT
Kind: captions
Language: en

00:00:04.810 --> 00:00:07.076
WAYNE PIEKARSKI: So my
name is Wayne Piekarski,

00:00:07.076 --> 00:00:08.700
and I'm a developer
advocate at Google.

00:00:08.700 --> 00:00:11.480
And so today we're going to
be talking about developing

00:00:11.480 --> 00:00:12.760
applications for Android Wear.

00:00:12.760 --> 00:00:14.260
So we're going to do
a bit of introduction,

00:00:14.260 --> 00:00:16.059
show you how Wear
works, and then we're

00:00:16.059 --> 00:00:17.220
going to get into
some of the real nuts

00:00:17.220 --> 00:00:19.210
and bolts of the
wearable support library,

00:00:19.210 --> 00:00:22.160
some of the things that make
developing for Wear unique.

00:00:22.160 --> 00:00:25.620
So as I said, I'm a
developer advocate at Google,

00:00:25.620 --> 00:00:28.221
and I work mainly in the areas
of Android and Ubiquitous

00:00:28.221 --> 00:00:28.720
computing.

00:00:28.720 --> 00:00:30.979
So we work on a lot of
the new form factors

00:00:30.979 --> 00:00:32.770
that Google's working
on, such as wearables

00:00:32.770 --> 00:00:35.402
and auto and Brillo
and Weave and so forth,

00:00:35.402 --> 00:00:37.360
so we're doing a lot of
those things like that.

00:00:37.360 --> 00:00:39.100
So that's kind of
what I work on.

00:00:39.100 --> 00:00:41.190
And another thing I'm
really excited about

00:00:41.190 --> 00:00:43.190
is, I'm at this Android
barbecue, so I was like,

00:00:43.190 --> 00:00:45.481
well you know what, I should
share my breakfast sausage

00:00:45.481 --> 00:00:46.830
recipe with everyone as well.

00:00:46.830 --> 00:00:48.410
So here's my little
recipe for it,

00:00:48.410 --> 00:00:50.080
and if you go to my
Google plus page,

00:00:50.080 --> 00:00:52.960
which is
google.com/+WaynePiekarski,

00:00:52.960 --> 00:00:53.990
you can see my recipe.

00:00:53.990 --> 00:00:56.430
Now this is like my favorite
breakfast sausage I've ever

00:00:56.430 --> 00:00:57.388
worked out how to make.

00:00:57.388 --> 00:00:59.710
So you can use it for chicken
fried steaks, biscuits

00:00:59.710 --> 00:01:02.830
and gravy, and
it's really simple.

00:01:02.830 --> 00:01:05.710
You take your own ground pork
and can you mix it up, and then

00:01:05.710 --> 00:01:06.750
you fry it up in a pan.

00:01:06.750 --> 00:01:08.600
You know, make sure you
use a non nonstick pan.

00:01:08.600 --> 00:01:09.650
You've got to use one
of those old school

00:01:09.650 --> 00:01:12.230
pans like a cast iron skillet
or something like that.

00:01:12.230 --> 00:01:15.060
And then you put some flour
in there and you make a roux.

00:01:15.060 --> 00:01:16.232
And then when you're
done, you can pour it

00:01:16.232 --> 00:01:17.720
over biscuits and
gravy, or you can put it

00:01:17.720 --> 00:01:19.178
on some of the
chicken fried steak,

00:01:19.178 --> 00:01:20.700
or all those kinds of things.

00:01:20.700 --> 00:01:23.270
Yeah so that's my talk so
I guess we're done now,

00:01:23.270 --> 00:01:26.007
so we can all go home right?

00:01:26.007 --> 00:01:28.340
Yeah so I think since we're
at the big Android barbecue,

00:01:28.340 --> 00:01:30.056
I probably should
share that with you.

00:01:30.056 --> 00:01:30.870
All right.

00:01:30.870 --> 00:01:33.190
Let's get back on track here.

00:01:33.190 --> 00:01:34.960
So we are into
Android Wear today.

00:01:34.960 --> 00:01:37.337
So look at this picture here.

00:01:37.337 --> 00:01:39.170
We've got a bunch of
people standing around,

00:01:39.170 --> 00:01:40.836
and they're all looking
at their phones,

00:01:40.836 --> 00:01:43.544
and they all appear--
they're kind of disengaged

00:01:43.544 --> 00:01:44.210
from each other.

00:01:44.210 --> 00:01:45.880
And we see this a lot nowadays.

00:01:45.880 --> 00:01:47.480
Like people go out
with their friends

00:01:47.480 --> 00:01:49.170
and no one's actually
talking to anyone,

00:01:49.170 --> 00:01:51.260
they're busy on their
phones doing stuff.

00:01:51.260 --> 00:01:54.089
And so we've been looking
at this kind of usage

00:01:54.089 --> 00:01:56.380
and we're like, what could
we do to make things better?

00:01:56.380 --> 00:01:58.810
So we know that phones
and tablets are useful,

00:01:58.810 --> 00:02:00.310
but it seems like
we're disconnected

00:02:00.310 --> 00:02:02.030
from the people around us.

00:02:02.030 --> 00:02:04.655
So Android Wear aims to sort
of complete that picture,

00:02:04.655 --> 00:02:06.530
and you can see here in
this photo everyone's

00:02:06.530 --> 00:02:08.259
happy having a great time.

00:02:08.259 --> 00:02:10.410
This is what happens
when use Android Wear.

00:02:10.410 --> 00:02:12.560
Anyway, just kidding.

00:02:12.560 --> 00:02:15.770
What it does is it helps
you stay in the moment

00:02:15.770 --> 00:02:17.700
with the people
that are around you.

00:02:17.700 --> 00:02:19.930
So it keeps you in a moment
when it's appropriate,

00:02:19.930 --> 00:02:23.760
but it gives you the information
you need when you need it,

00:02:23.760 --> 00:02:26.220
and it tries to avoid the
distraction of pulling

00:02:26.220 --> 00:02:28.590
your phone out of your
pocket and constantly

00:02:28.590 --> 00:02:29.312
being distracted.

00:02:29.312 --> 00:02:31.020
So let's look at this
in a different way.

00:02:31.020 --> 00:02:33.910
This is how it looks
like when use your phone

00:02:33.910 --> 00:02:34.970
on a day to day basis.

00:02:34.970 --> 00:02:36.553
You're doing real
life, then something

00:02:36.553 --> 00:02:38.640
happens, you pull your
phone out, you unlock it,

00:02:38.640 --> 00:02:41.190
you read some notification,
oh, OK, and then you're, oh,

00:02:41.190 --> 00:02:43.190
there's a news article,
I'll start reading that.

00:02:43.190 --> 00:02:45.439
And the next thing you know,
five minutes of your life

00:02:45.439 --> 00:02:49.290
has disappeared, and there's
this huge time and attention

00:02:49.290 --> 00:02:51.589
cost that it's
imposed on you to be

00:02:51.589 --> 00:02:52.880
able to use this kind of thing.

00:02:52.880 --> 00:02:55.760
So you might want to be
distracted in your device,

00:02:55.760 --> 00:02:58.200
but you also might be very
busy amongst your friends,

00:02:58.200 --> 00:03:02.340
and this isn't really
what you want to be doing.

00:03:02.340 --> 00:03:05.170
So with Android Wear, we're
attempting to change that.

00:03:05.170 --> 00:03:07.919
So there's your day,
start chugging along,

00:03:07.919 --> 00:03:09.960
something happens, you
quickly look at your watch

00:03:09.960 --> 00:03:11.650
and go, oh, cool I
better take that,

00:03:11.650 --> 00:03:13.900
or it's not that
important I'll skip.

00:03:13.900 --> 00:03:15.936
So it allows you to
have a quick look,

00:03:15.936 --> 00:03:17.060
quick glance at your watch.

00:03:17.060 --> 00:03:18.476
It has an always-on
display that's

00:03:18.476 --> 00:03:20.430
always showing
something, and it helps

00:03:20.430 --> 00:03:22.510
you to reduce the
overhead of being

00:03:22.510 --> 00:03:25.190
notified about things that are
going on in the real world.

00:03:25.190 --> 00:03:28.580
And so it allows you to be
more present in the real world,

00:03:28.580 --> 00:03:31.420
but yet more connected to the
virtual world with the things

00:03:31.420 --> 00:03:33.020
that are important to you.

00:03:33.020 --> 00:03:35.920
So what does this mean for
your development of apps?

00:03:35.920 --> 00:03:39.650
So to start with, it's a very
different interaction model.

00:03:39.650 --> 00:03:41.870
So with Android Wear
you can see we have

00:03:41.870 --> 00:03:43.730
a range of different devices.

00:03:43.730 --> 00:03:47.460
There are round displays,
there are square displays,

00:03:47.460 --> 00:03:50.520
the screen's really
small, and if you

00:03:50.520 --> 00:03:53.600
want to get a really good user
experience on wearable devices,

00:03:53.600 --> 00:03:55.494
you really need
to rethink the way

00:03:55.494 --> 00:03:57.410
that you program for it
and the way you use it

00:03:57.410 --> 00:03:58.650
and everything else.

00:03:58.650 --> 00:04:01.622
So one thing people
like to do, is

00:04:01.622 --> 00:04:04.080
they like to say, well I'm just
going to take my phone app,

00:04:04.080 --> 00:04:06.800
and sort of jam it on
to the wearable screen

00:04:06.800 --> 00:04:08.070
and make it really tiny.

00:04:08.070 --> 00:04:10.240
But that's not really
what you want to be doing.

00:04:10.240 --> 00:04:12.239
So the way you should
think about designing apps

00:04:12.239 --> 00:04:15.280
for wearables is
to say to yourself,

00:04:15.280 --> 00:04:18.880
what couldn't we do on the
phone that a wearable device now

00:04:18.880 --> 00:04:20.290
makes possible?

00:04:20.290 --> 00:04:22.630
And that's the kind of app
you should be building.

00:04:22.630 --> 00:04:26.924
And I think the killer app for
wearables in general is coming,

00:04:26.924 --> 00:04:28.840
and it's going to be
made by one of you people

00:04:28.840 --> 00:04:31.033
here, a developer
who's like, you

00:04:31.033 --> 00:04:32.842
know what, I have this
really amazing idea

00:04:32.842 --> 00:04:34.300
and it's going to
change the world.

00:04:34.300 --> 00:04:38.184
When Android and iPhones
came out many years ago,

00:04:38.184 --> 00:04:40.600
everyone thought they're just
going to be browsing the web

00:04:40.600 --> 00:04:42.422
and checking their
email, and now we've

00:04:42.422 --> 00:04:44.630
got all these exciting apps
that people use that they

00:04:44.630 --> 00:04:45.710
couldn't live without.

00:04:45.710 --> 00:04:48.210
Those are the killer apps
that define the platform.

00:04:48.210 --> 00:04:51.320
And so the killer app for Wear
can be created just by you

00:04:51.320 --> 00:04:53.896
because it's an open platform.

00:04:53.896 --> 00:04:56.270
And the next thing is that
when you build a wearable app,

00:04:56.270 --> 00:04:57.840
you have to actually try it.

00:04:57.840 --> 00:05:00.680
So you can't just run it on an
emulator on a massive desktop

00:05:00.680 --> 00:05:03.590
screen with a mouse, you have
to actually put it on your wrist

00:05:03.590 --> 00:05:05.400
and go for a run,
and while you're

00:05:05.400 --> 00:05:07.760
jogging you should try to
use your app by touching

00:05:07.760 --> 00:05:08.480
the screen.

00:05:08.480 --> 00:05:10.850
That's when you'll discover
if your little buttons are

00:05:10.850 --> 00:05:13.080
too small or if there's
some kind of problem

00:05:13.080 --> 00:05:14.400
with how you're doing things.

00:05:14.400 --> 00:05:16.560
So you're going to get
yourself in the situation

00:05:16.560 --> 00:05:18.420
and try it just like
a user would do.

00:05:18.420 --> 00:05:22.200
And so it's just things
that make Wear different.

00:05:22.200 --> 00:05:24.490
So this here is the
Android Wear interface.

00:05:24.490 --> 00:05:27.500
And so you can see
that we have-- there's

00:05:27.500 --> 00:05:29.960
no grid of icons to launch.

00:05:29.960 --> 00:05:32.100
It's simple, it's
glanceable, and it's

00:05:32.100 --> 00:05:34.910
built around micro
interactions, these very quick

00:05:34.910 --> 00:05:36.250
little gestures.

00:05:36.250 --> 00:05:38.570
You can look at your
watch in the corner.

00:05:38.570 --> 00:05:40.680
You don't have to use it
like you do with a phone.

00:05:40.680 --> 00:05:44.120
And the interface is divided
up into two primary behaviors.

00:05:44.120 --> 00:05:46.710
So we have the ability
to talk to the wearable.

00:05:46.710 --> 00:05:47.550
Use your voice.

00:05:47.550 --> 00:05:50.820
You say, OK, Google,
send a message.

00:05:50.820 --> 00:05:57.210
So you talk to the watch
to make it do things.

00:05:57.210 --> 00:05:58.990
So we call these actions.

00:05:58.990 --> 00:06:02.150
And then the next
thing is that once

00:06:02.150 --> 00:06:05.690
you say, OK, Google, it then
shows you a list of commands

00:06:05.690 --> 00:06:06.500
that are possible.

00:06:06.500 --> 00:06:08.083
So you can do things
like take a note,

00:06:08.083 --> 00:06:09.780
call me a ride,
things like that,

00:06:09.780 --> 00:06:12.330
and these are the things
that are available to you.

00:06:12.330 --> 00:06:15.810
Now, the wearable can send
information back to you

00:06:15.810 --> 00:06:16.340
as well.

00:06:16.340 --> 00:06:18.770
So we have these notification
cards that pop up.

00:06:18.770 --> 00:06:21.877
So we call this
the context stream.

00:06:21.877 --> 00:06:23.710
And so there's a variety
of different things

00:06:23.710 --> 00:06:26.840
that the wearable can send to
you to show you on the screen.

00:06:26.840 --> 00:06:29.050
Are you ready for the trip?

00:06:29.050 --> 00:06:31.690
You have a flight to JFK
coming up, your hotel

00:06:31.690 --> 00:06:33.330
information, things like that.

00:06:33.330 --> 00:06:35.220
This is stuff that
you're walking around,

00:06:35.220 --> 00:06:36.850
and your watch will
vibrate and you're like,

00:06:36.850 --> 00:06:38.310
oh, I've got to
get to the airport.

00:06:38.310 --> 00:06:41.660
So it's telling you things
that are important right

00:06:41.660 --> 00:06:43.030
now in the right place.

00:06:43.030 --> 00:06:44.500
We don't want to tell someone
about something that's

00:06:44.500 --> 00:06:45.880
happening eight hours from now.

00:06:45.880 --> 00:06:47.520
You want to tell them about
something that's right now

00:06:47.520 --> 00:06:48.790
and it's important.

00:06:48.790 --> 00:06:51.880
So this is the framework
that helps you to set you up

00:06:51.880 --> 00:06:54.150
for success on Android Wear.

00:06:54.150 --> 00:06:57.170
So if you want to make a
really good application,

00:06:57.170 --> 00:06:59.470
you have to carry this
philosophy into your apps

00:06:59.470 --> 00:07:01.070
as well.

00:07:01.070 --> 00:07:03.810
So for example, you have
to build wearable apps that

00:07:03.810 --> 00:07:07.070
are aware of the users' context,
their time, their location,

00:07:07.070 --> 00:07:08.390
their physical activity.

00:07:08.390 --> 00:07:10.210
That card bearer is
aware of the fact that

00:07:10.210 --> 00:07:12.860
going to take you 15 minutes to
get home right now because you

00:07:12.860 --> 00:07:14.760
put something in your
calendar that tells you

00:07:14.760 --> 00:07:18.240
that you need to
be home by then.

00:07:18.240 --> 00:07:21.540
A watch is also designed to
tell time in a split second.

00:07:21.540 --> 00:07:24.082
So when a user uses
a traditional watch,

00:07:24.082 --> 00:07:26.540
they just look at, know what
the time is, and they're done.

00:07:26.540 --> 00:07:28.706
And during this talk I'm
going to glance at my watch

00:07:28.706 --> 00:07:31.060
multiple times to find out
how I'm going for time.

00:07:31.060 --> 00:07:32.117
And so it's very quick.

00:07:32.117 --> 00:07:34.450
Your not seeing me pulling
my phone out and unlocking it

00:07:34.450 --> 00:07:35.810
and checking the time.

00:07:35.810 --> 00:07:38.782
And so if you can check
the time in a split second,

00:07:38.782 --> 00:07:40.490
you should also be
able to check whatever

00:07:40.490 --> 00:07:41.814
is going on in a split second.

00:07:41.814 --> 00:07:43.980
So here it's like turn right
onto Washington Street.

00:07:43.980 --> 00:07:45.930
This is a direction
right now, this

00:07:45.930 --> 00:07:47.310
is something you have to do.

00:07:47.310 --> 00:07:48.976
And it's very quick
and easy and there's

00:07:48.976 --> 00:07:52.139
an arrow pointing to
where you need to go.

00:07:52.139 --> 00:07:53.680
You can think of
Android Wear as kind

00:07:53.680 --> 00:07:55.110
of like a personal assistant.

00:07:55.110 --> 00:07:58.300
You ask it to do things, and it
does the right thing for you,

00:07:58.300 --> 00:07:59.830
and it just gets it right.

00:07:59.830 --> 00:08:03.240
So here it's got, send a
note to Jeff, I'm on my way.

00:08:03.240 --> 00:08:05.280
So these are very
simple actions you want

00:08:05.280 --> 00:08:06.240
and it would be
the kind of thing

00:08:06.240 --> 00:08:07.930
that if you had a
friend next to you, hey,

00:08:07.930 --> 00:08:09.550
can you send a message to
Jeff, tell him I'll be there

00:08:09.550 --> 00:08:10.870
in five minutes,
that's something

00:08:10.870 --> 00:08:12.078
your friend could do for you.

00:08:12.078 --> 00:08:14.780
It's a personal assistant
that's designed to help you.

00:08:14.780 --> 00:08:18.240
And finally you've got to focus
on very simple interactions.

00:08:18.240 --> 00:08:20.740
You've got only require
input when it's necessary.

00:08:20.740 --> 00:08:23.300
You should try to do the
right thing automatically.

00:08:23.300 --> 00:08:26.910
And most inputs are going to
be done with touches or swipes,

00:08:26.910 --> 00:08:29.350
and because the screen is very
small you have to make sure

00:08:29.350 --> 00:08:32.819
that you've got very large
touch targets, things

00:08:32.819 --> 00:08:34.860
that are easy to click
while a person is running,

00:08:34.860 --> 00:08:36.620
like we talked about before.

00:08:36.620 --> 00:08:38.780
So you want to avoid
fine-grained finger movements.

00:08:38.780 --> 00:08:40.613
You don't want to have
tiny little keyboards

00:08:40.613 --> 00:08:43.130
and things like that.

00:08:43.130 --> 00:08:45.380
So when you design your
Android Wear experience,

00:08:45.380 --> 00:08:48.300
you've got to keep these
kind of things in mind.

00:08:48.300 --> 00:08:49.964
So with that, now
we're going to talk

00:08:49.964 --> 00:08:51.380
about the nuts and
bolts of how we

00:08:51.380 --> 00:08:52.800
go about building applications.

00:08:52.800 --> 00:08:55.299
I really wanted to sort of set
the stage for how this works,

00:08:55.299 --> 00:08:58.790
because it helps to understand
that with Android Wear,

00:08:58.790 --> 00:09:00.870
the UI is probably the
most important thing.

00:09:00.870 --> 00:09:03.630
How it interacts with
the user is everything.

00:09:03.630 --> 00:09:05.100
You can't write
good code for this

00:09:05.100 --> 00:09:06.840
until you've seen how it works.

00:09:10.500 --> 00:09:11.000
All right.

00:09:11.000 --> 00:09:12.797
So let's go through
three topics now.

00:09:12.797 --> 00:09:14.880
We're going to talk about
how to do notifications,

00:09:14.880 --> 00:09:16.460
how to make your
own watch faces,

00:09:16.460 --> 00:09:18.210
and then how to design
your own full blown

00:09:18.210 --> 00:09:19.720
apps that run on Wear.

00:09:19.720 --> 00:09:21.920
So the first is notifications.

00:09:21.920 --> 00:09:23.770
Now, the cool thing
about notifications

00:09:23.770 --> 00:09:27.270
is that if you have a
notification on your phone,

00:09:27.270 --> 00:09:29.490
they're automatically
sent over to the wearable

00:09:29.490 --> 00:09:30.960
by the wearable companion app.

00:09:30.960 --> 00:09:33.290
So any standard
Android notification

00:09:33.290 --> 00:09:35.480
works for free on Android
Wear and you don't really

00:09:35.480 --> 00:09:36.670
need to do anything.

00:09:36.670 --> 00:09:38.400
Then you can extend
them to add features,

00:09:38.400 --> 00:09:40.386
but you don't need to.

00:09:40.386 --> 00:09:43.750
So to get this done,
there's no work required.

00:09:43.750 --> 00:09:46.760
They're just automatic.

00:09:46.760 --> 00:09:50.990
Also if you've implemented the
meteor API's or remote control

00:09:50.990 --> 00:09:53.512
client, the actual
controls for those

00:09:53.512 --> 00:09:55.470
are automatically sent
to the wearable as well.

00:09:55.470 --> 00:09:57.390
So any standard
music playing app,

00:09:57.390 --> 00:09:59.060
when you're playing
music on your phone,

00:09:59.060 --> 00:10:00.768
you'll see a notification
on you wearable

00:10:00.768 --> 00:10:03.550
that you can use to change
tracks, pick a different song,

00:10:03.550 --> 00:10:04.720
and things like that.

00:10:04.720 --> 00:10:08.530
And to get this done, once
again, no work required.

00:10:08.530 --> 00:10:11.560
Now, if you want to implement
slightly more complicated

00:10:11.560 --> 00:10:13.500
notifications, we
have some extensions

00:10:13.500 --> 00:10:15.200
that we've added
to notifications.

00:10:15.200 --> 00:10:17.210
So we have stacks,
pages, and replies,

00:10:17.210 --> 00:10:20.370
which allow you to make slightly
more complicated notifications

00:10:20.370 --> 00:10:22.590
that'll appear in a special
way on the wearable,

00:10:22.590 --> 00:10:24.880
but they'll still be regular
notifications on a phone.

00:10:24.880 --> 00:10:27.667
And you can add these features
and it won't break your app,

00:10:27.667 --> 00:10:30.000
even if your app is needed
to run on a Gingerbread phone

00:10:30.000 --> 00:10:31.310
or something like that.

00:10:31.310 --> 00:10:34.280
So these extensions allow
you to add a little bit more

00:10:34.280 --> 00:10:36.936
to notifications to make
them slightly more useful.

00:10:36.936 --> 00:10:38.310
The really cool
part is you don't

00:10:38.310 --> 00:10:40.184
need to do anything to
your app except adding

00:10:40.184 --> 00:10:42.880
a couple extra lines of code
in your notification section,

00:10:42.880 --> 00:10:45.240
and your app is already
sort of on the way

00:10:45.240 --> 00:10:47.490
there for Android Wear support.

00:10:47.490 --> 00:10:49.866
So it's really nice thing
about notifications.

00:10:49.866 --> 00:10:51.490
Later on, we're going
to talk about how

00:10:51.490 --> 00:10:54.580
to write full apps, which are
a very complete Android Wear

00:10:54.580 --> 00:10:55.262
experience.

00:10:55.262 --> 00:10:56.720
This is a great
way to get started.

00:10:56.720 --> 00:10:59.220
So if you are already an
existing Android web developer,

00:10:59.220 --> 00:11:01.640
you can easily add some
quick Android Wear support.

00:11:01.640 --> 00:11:03.270
Have a think about
it, try it out,

00:11:03.270 --> 00:11:04.644
and then you can
go the whole way

00:11:04.644 --> 00:11:07.740
if you decide that's
important for you.

00:11:07.740 --> 00:11:10.300
So watch faces are probably
one of the most exciting things

00:11:10.300 --> 00:11:11.680
that people love to talk about.

00:11:11.680 --> 00:11:14.550
So you can see
we've got a watch.

00:11:14.550 --> 00:11:18.330
The watch face is the screen
that is running on the watch

00:11:18.330 --> 00:11:19.100
all the time.

00:11:19.100 --> 00:11:22.790
So, when the user is
not using the screen,

00:11:22.790 --> 00:11:24.690
it is showing the
watch face, and you

00:11:24.690 --> 00:11:26.850
can load many different
watch faces onto a device.

00:11:26.850 --> 00:11:28.860
You download them
by the Play Store

00:11:28.860 --> 00:11:32.420
and it's probably the most
important part of a user's

00:11:32.420 --> 00:11:33.610
Android Wear experience.

00:11:33.610 --> 00:11:35.460
And you as an app
developer have the ability

00:11:35.460 --> 00:11:37.420
to make your own watch
faces of any kind.

00:11:37.420 --> 00:11:39.700
Analog, digital,
whatever you want.

00:11:39.700 --> 00:11:43.480
And so this is something
that people are really

00:11:43.480 --> 00:11:44.247
particular about.

00:11:44.247 --> 00:11:46.330
People like a watch face
that's designed for them.

00:11:46.330 --> 00:11:50.281
I like a digital watch
face that-- oops--

00:11:50.281 --> 00:11:53.002
I like a digital watch face in
orange, a lot of people don't.

00:11:53.002 --> 00:11:54.210
They like analog watch faces.

00:11:54.210 --> 00:11:55.880
So everyone's got a
different taste here.

00:11:55.880 --> 00:11:57.505
So there's a lot of
opportunity to make

00:11:57.505 --> 00:11:59.620
some really cool watch
faces that really

00:11:59.620 --> 00:12:00.840
change the way we tell time.

00:12:00.840 --> 00:12:02.715
So I'm going to talk to
you a little bit more

00:12:02.715 --> 00:12:05.110
about the API's that
are used to do this.

00:12:05.110 --> 00:12:06.762
So, with a watch
face, of course,

00:12:06.762 --> 00:12:08.220
the most important
thing is that it

00:12:08.220 --> 00:12:09.474
has to actually tell the time.

00:12:09.474 --> 00:12:10.890
So make sure you
always have that.

00:12:10.890 --> 00:12:13.667
It would be kind of silly
to make a watch face that

00:12:13.667 --> 00:12:15.750
shows a cloud and it's
saying it's raining outside

00:12:15.750 --> 00:12:17.374
but doesn't actually
tell the time.

00:12:17.374 --> 00:12:19.290
So people are probably
not going to like that.

00:12:19.290 --> 00:12:20.470
So you've got to make
sure you put that in.

00:12:20.470 --> 00:12:22.530
So you can use analog
hands like in this case,

00:12:22.530 --> 00:12:25.550
or you could put a digital
representation on top of it.

00:12:25.550 --> 00:12:27.704
Or you could use some other
kind of representation

00:12:27.704 --> 00:12:29.370
like you could print
it in binary or hex

00:12:29.370 --> 00:12:32.550
or whatever it is that you
think your developers want.

00:12:32.550 --> 00:12:34.710
So, you can do that too.

00:12:34.710 --> 00:12:36.895
Now, there's a status bar area.

00:12:36.895 --> 00:12:38.700
So you can see
there's a little alarm

00:12:38.700 --> 00:12:39.950
bell with a stroke through it.

00:12:39.950 --> 00:12:42.295
That's telling you that
notifications and alarms

00:12:42.295 --> 00:12:43.170
have been suppressed.

00:12:43.170 --> 00:12:45.870
So these are going to be put
on the screen by the system,

00:12:45.870 --> 00:12:49.420
and you need a place on your
screen for those to appear.

00:12:49.420 --> 00:12:52.450
So you can own the whole watch
face and draw what you want,

00:12:52.450 --> 00:12:55.410
but the system also needs to
put a few icons here and there

00:12:55.410 --> 00:12:58.190
that you need to make room for.

00:12:58.190 --> 00:13:00.680
And also notification
cards are going

00:13:00.680 --> 00:13:03.096
to pop up in the stream
on top of the watch face.

00:13:03.096 --> 00:13:04.970
So you need to be prepared
to deal with them.

00:13:04.970 --> 00:13:06.440
So what you can do
in some cases is

00:13:06.440 --> 00:13:11.490
you can resize your watch
face to not be under the card.

00:13:11.490 --> 00:13:13.592
In other cases, you
can also control

00:13:13.592 --> 00:13:15.550
how much the card pops
up and things like that.

00:13:15.550 --> 00:13:18.133
So you've got control over all
these things as part of the API

00:13:18.133 --> 00:13:19.540
for it.

00:13:19.540 --> 00:13:21.350
And you could also
add other things

00:13:21.350 --> 00:13:24.739
such is the time of day,
the current weather.

00:13:24.739 --> 00:13:26.280
A lot of the Android
Wear watch faces

00:13:26.280 --> 00:13:28.196
that are out, show things
like showing details

00:13:28.196 --> 00:13:30.810
from your calendar, showing the
weather, the tides, the moon,

00:13:30.810 --> 00:13:31.560
whatever you want.

00:13:31.560 --> 00:13:33.130
So you can have
different watch faces

00:13:33.130 --> 00:13:34.980
for different kinds
of people depending

00:13:34.980 --> 00:13:37.180
on what they want to do.

00:13:37.180 --> 00:13:40.416
So here are a few guidelines to
make sure you get this right.

00:13:40.416 --> 00:13:42.040
So the first thing
is that Android Wear

00:13:42.040 --> 00:13:43.610
comes in multiple form factors.

00:13:43.610 --> 00:13:45.370
So if you're designing
a watch face,

00:13:45.370 --> 00:13:48.500
you really want it to run on
both round and square watches.

00:13:48.500 --> 00:13:50.190
So it would be
kind of a bad idea

00:13:50.190 --> 00:13:52.760
to build a watch face
that only runs on square

00:13:52.760 --> 00:13:54.880
and if round people install
it, it doesn't work.

00:13:54.880 --> 00:13:55.790
People are going to
be upset, they're

00:13:55.790 --> 00:13:57.830
going to write bad
reviews about your app.

00:13:57.830 --> 00:14:00.370
So you really want to make
sure you cover both platforms.

00:14:00.370 --> 00:14:03.554
And in some cases, like
an analog watch face,

00:14:03.554 --> 00:14:04.970
if it's just got
some hands on it,

00:14:04.970 --> 00:14:07.011
that'll work both on a
round and a square device.

00:14:07.011 --> 00:14:09.180
In other cases you might
have to redesign the watch

00:14:09.180 --> 00:14:11.960
face completely, because
square is very different.

00:14:11.960 --> 00:14:15.140
The corners are present
whereas in a round watch

00:14:15.140 --> 00:14:18.910
they're chopped off, so you
might need to deal with that.

00:14:18.910 --> 00:14:22.350
Next Android Wear displays have
two modes that they run in.

00:14:22.350 --> 00:14:25.150
There is an interactive
mode and an ambient mode.

00:14:25.150 --> 00:14:27.580
So interactive mode is when
you're touching the screen,

00:14:27.580 --> 00:14:29.530
and you're interacting
with the device,

00:14:29.530 --> 00:14:31.740
you can actually
detect touches as well.

00:14:31.740 --> 00:14:35.110
And this is the mode that's
used when the user's giving

00:14:35.110 --> 00:14:36.690
their attention to the watch.

00:14:36.690 --> 00:14:39.100
Now, the screen is
fully active, you

00:14:39.100 --> 00:14:41.490
can have all the colors
and everything like that,

00:14:41.490 --> 00:14:44.050
but after a short
period of idle time,

00:14:44.050 --> 00:14:45.480
the watch goes
into what's called

00:14:45.480 --> 00:14:47.470
ambient or always-on mode.

00:14:47.470 --> 00:14:50.660
In this mode the screen
goes into a low power state,

00:14:50.660 --> 00:14:53.020
it reduces the amount of
colors that are available,

00:14:53.020 --> 00:14:54.580
and you should also
reduce the number

00:14:54.580 --> 00:14:57.830
of pixels that are drawn
on the screen to save power

00:14:57.830 --> 00:14:58.690
and to avoid burn.

00:14:58.690 --> 00:15:01.273
And we'll talk about
that a bit more in a sec.

00:15:01.273 --> 00:15:03.356
You'll see in this case
here, we have a watch face

00:15:03.356 --> 00:15:06.390
on the left which is full color,
and then it in ambient mode,

00:15:06.390 --> 00:15:08.310
it's just a black
screen with hands on it.

00:15:08.310 --> 00:15:11.140
So you need to design your watch
face to run in both of these

00:15:11.140 --> 00:15:15.480
modes, and you cannot render a
full colored image constantly

00:15:15.480 --> 00:15:17.270
in ambient mode
when it's sleeping.

00:15:17.270 --> 00:15:18.890
The watch won't allow that.

00:15:18.890 --> 00:15:23.490
And secondly, the watch
face refreshes continuously

00:15:23.490 --> 00:15:24.810
when you're in active mode.

00:15:24.810 --> 00:15:27.670
But when your ambient mode,
the watch goes to sleep

00:15:27.670 --> 00:15:30.380
and it only refreshes the
screen once every minute.

00:15:30.380 --> 00:15:32.290
So you should remove
the second hand,

00:15:32.290 --> 00:15:34.955
and you should only draw hours
and minutes, because we're

00:15:34.955 --> 00:15:35.830
trying to save power.

00:15:35.830 --> 00:15:38.884
So when the screen is an ambient
mode, the watch is not running.

00:15:38.884 --> 00:15:41.050
It's actually asleep and
the only thing that's awake

00:15:41.050 --> 00:15:43.610
is the display driver just
keeping that screen going.

00:15:43.610 --> 00:15:45.340
So it's a great
way to save power,

00:15:45.340 --> 00:15:48.390
and it means that you don't
have to flick your watch up

00:15:48.390 --> 00:15:49.610
to look at the time.

00:15:49.610 --> 00:15:52.390
The watch is always showing
the time, as you can see from,

00:15:52.390 --> 00:15:54.760
as I'm walking around, this
watch never shuts down.

00:15:54.760 --> 00:15:57.218
And that's one of the really
cool features of Android Wear,

00:15:57.218 --> 00:16:00.150
is the screen is
running all the time.

00:16:00.150 --> 00:16:02.650
Now, when we talk
about ambient mode,

00:16:02.650 --> 00:16:05.030
we also need to deal with
how it's implemented.

00:16:05.030 --> 00:16:08.250
So for example, certain
screens on Android Wear

00:16:08.250 --> 00:16:10.890
are called lower bit screens
when they go into ambient mode,

00:16:10.890 --> 00:16:13.150
they actually don't
allow full 24-bit color.

00:16:13.150 --> 00:16:15.700
They only allow
primary red, green,

00:16:15.700 --> 00:16:18.650
and blue colors, like only
certain colors are allowed.

00:16:18.650 --> 00:16:21.050
You can't render shades
and all that kind of thing.

00:16:21.050 --> 00:16:22.550
It's a feature of
the display driver

00:16:22.550 --> 00:16:24.150
that allows it to save power.

00:16:24.150 --> 00:16:26.740
Other displays go into
a black and white mode.

00:16:26.740 --> 00:16:29.470
And some displays, such
as overhead displays,

00:16:29.470 --> 00:16:31.630
actually require you
to only illuminate

00:16:31.630 --> 00:16:35.030
5% of the pixels
in low power mode.

00:16:35.030 --> 00:16:37.300
If you try to keep all the
pixels on the screen on all

00:16:37.300 --> 00:16:40.410
the time, what will happen is
that over time, the screen will

00:16:40.410 --> 00:16:43.680
burn in, and you'll
actually you'll

00:16:43.680 --> 00:16:45.850
see the pixels permanently
burnt in to the screen.

00:16:45.850 --> 00:16:48.152
And the other trick that
some of the displays do,

00:16:48.152 --> 00:16:49.860
is they'll actually
take your watch face,

00:16:49.860 --> 00:16:52.640
and every minute they would
jiggle it in a direction.

00:16:52.640 --> 00:16:54.950
So they'll jiggle it 10
pixels in either direction,

00:16:54.950 --> 00:16:57.420
and they use that to
help the watch face avoid

00:16:57.420 --> 00:16:58.980
burning your screen in as well.

00:16:58.980 --> 00:17:01.650
So you should never have
large patches of solid color

00:17:01.650 --> 00:17:04.290
because they will eventually
burn into the screen,

00:17:04.290 --> 00:17:06.490
and the jiggling can't
get around that either.

00:17:06.490 --> 00:17:08.410
So definitely you want
to try to make sure

00:17:08.410 --> 00:17:11.290
that you're careful about when
you design your ambient mode,

00:17:11.290 --> 00:17:13.900
because you need to keep a lot
of the pixels off to save power

00:17:13.900 --> 00:17:16.250
and to save the screen.

00:17:16.250 --> 00:17:17.940
So, when you're
writing a watch face,

00:17:17.940 --> 00:17:21.839
there is a class called
CanvasWatchFaceService.Engine

00:17:21.839 --> 00:17:24.410
that you're going to be
sort of implementing here.

00:17:24.410 --> 00:17:26.810
And inside of that
there's three methods.

00:17:26.810 --> 00:17:28.510
So this onCreate,
which is where you're

00:17:28.510 --> 00:17:30.502
going to take care of
initialization steps.

00:17:30.502 --> 00:17:32.460
So one thing you want to
make sure you do here,

00:17:32.460 --> 00:17:35.050
is you can have an image as the
background of your watch face,

00:17:35.050 --> 00:17:37.008
but you've got to make
sure the scale the image

00:17:37.008 --> 00:17:38.830
and do anything like
that in advance.

00:17:38.830 --> 00:17:41.610
You don't want to be scaling
the image on every redraw

00:17:41.610 --> 00:17:42.820
because it's very expensive.

00:17:42.820 --> 00:17:44.970
You'll generate a lot
of memory and so forth.

00:17:44.970 --> 00:17:47.290
So in onCreate you want to
do all of the initialization

00:17:47.290 --> 00:17:48.470
steps.

00:17:48.470 --> 00:17:51.730
The next thing is, there's a
method called onSurfaceChanged.

00:17:51.730 --> 00:17:56.600
And onSurfaceChanged is
called when-- it announces

00:17:56.600 --> 00:17:58.240
the size of the screen to you.

00:17:58.240 --> 00:18:00.250
So this is where you
would deal with things

00:18:00.250 --> 00:18:04.070
like resizing an image,
or anything, I guess

00:18:04.070 --> 00:18:06.740
it's possible in the future
that a watch could rotate,

00:18:06.740 --> 00:18:09.410
and if it rotates it would give
you an update onSurfaceChange.

00:18:09.410 --> 00:18:12.060
So onSurfaceChange is
where you're notified

00:18:12.060 --> 00:18:15.550
as to changes in the screen.

00:18:15.550 --> 00:18:17.600
And then finally all
the drawing itself

00:18:17.600 --> 00:18:19.250
is done in the onDraw method.

00:18:19.250 --> 00:18:22.290
So this is the method that's
called by the Android Wear

00:18:22.290 --> 00:18:25.040
system that says, draw
the watch right now.

00:18:25.040 --> 00:18:28.170
And so you should be
doing no calendar queries,

00:18:28.170 --> 00:18:30.290
you don't want to be
doing anything expensive,

00:18:30.290 --> 00:18:33.140
everything has to be
fast here, and that's

00:18:33.140 --> 00:18:34.260
where you draw everything.

00:18:34.260 --> 00:18:36.780
And, if you want, you can
have an animated watch

00:18:36.780 --> 00:18:38.940
face with smooth
ticking second hands.

00:18:38.940 --> 00:18:40.440
So no ticking, it
will just smoothly

00:18:40.440 --> 00:18:43.700
move by just repeatedly calling
onDraw over and over again.

00:18:43.700 --> 00:18:45.440
And then you call an
invalidate method,

00:18:45.440 --> 00:18:47.590
which then makes the
call onDraw repeatedly.

00:18:47.590 --> 00:18:50.290
But you don't want to be
doing that kind of work

00:18:50.290 --> 00:18:52.104
when you're in ambient
mode, because you

00:18:52.104 --> 00:18:53.520
want the display
to sleep, and you

00:18:53.520 --> 00:18:55.492
don't want to be
constantly hammering away

00:18:55.492 --> 00:18:56.700
trying to refresh the screen.

00:18:56.700 --> 00:18:58.880
So when you're in
ambient mode, your app

00:18:58.880 --> 00:19:00.070
needs to stop doing things.

00:19:00.070 --> 00:19:02.370
You don't want to
be doing too many--

00:19:02.370 --> 00:19:03.870
you don't want to
be doing any work.

00:19:03.870 --> 00:19:07.740
You want to be sleeping while
the watch is an ambient mode.

00:19:07.740 --> 00:19:09.750
So that's watch faces.

00:19:09.750 --> 00:19:12.660
Now let's talk about how we
go about actually building

00:19:12.660 --> 00:19:15.450
apps and making them
work on Android Wear.

00:19:15.450 --> 00:19:18.230
So Android Wear
devices are actually

00:19:18.230 --> 00:19:20.850
complete Android
implementations.

00:19:20.850 --> 00:19:21.750
They have everything.

00:19:21.750 --> 00:19:22.700
They have open OpenGl.

00:19:22.700 --> 00:19:26.920
They have all of the activities
and frameworks and everything

00:19:26.920 --> 00:19:29.910
that you've come to be used to
running regular Android apps.

00:19:29.910 --> 00:19:31.860
Probably the only two
things that are missing

00:19:31.860 --> 00:19:34.190
is that there's no video
codecs, and you don't have

00:19:34.190 --> 00:19:35.490
direct access to the internet.

00:19:35.490 --> 00:19:40.250
So you can't make HTTP
request to a web server

00:19:40.250 --> 00:19:42.530
and you're not able to play
video back on the screen.

00:19:42.530 --> 00:19:45.440
The codecs have been removed
to save power and battery

00:19:45.440 --> 00:19:47.159
and space on the device.

00:19:47.159 --> 00:19:49.200
And you also probably
shouldn't be playing videos

00:19:49.200 --> 00:19:50.772
on Android Wear device as well.

00:19:50.772 --> 00:19:53.230
If you're looking at something
for 30 seconds on the screen

00:19:53.230 --> 00:19:54.780
like watching a
video, you probably

00:19:54.780 --> 00:19:56.060
should be pulling your
phone out of your pocket

00:19:56.060 --> 00:19:57.750
and looking at it
on a regular screen.

00:19:57.750 --> 00:19:59.916
So certain things you really
don't want to be doing.

00:19:59.916 --> 00:20:01.772
And Android Wear devices
are very powerful

00:20:01.772 --> 00:20:03.980
and they're capable of doing
pretty much anything you

00:20:03.980 --> 00:20:05.600
can throw at them.

00:20:05.600 --> 00:20:08.290
The only difference is
the way they're packaged.

00:20:08.290 --> 00:20:11.390
And so the way it
works is that you

00:20:11.390 --> 00:20:14.090
build a wearable APK that's
going to be installed

00:20:14.090 --> 00:20:15.690
to the Android Wear device.

00:20:15.690 --> 00:20:19.440
But the wearable APK is not
sent directly to the wearable.

00:20:19.440 --> 00:20:22.240
What you do is you take the
wearable APK that you've built

00:20:22.240 --> 00:20:24.220
and you put it
inside the phone APK.

00:20:24.220 --> 00:20:26.732
You put it in the res/raw
directory basically.

00:20:26.732 --> 00:20:28.190
When it's in the
res/raw directory,

00:20:28.190 --> 00:20:31.120
you declare an XML file
and then you put it

00:20:31.120 --> 00:20:32.860
inside the main
phone APK and you

00:20:32.860 --> 00:20:35.710
push that phone APK
to the Play Store.

00:20:35.710 --> 00:20:38.620
When the user downloads
that phone APK, it arrives

00:20:38.620 --> 00:20:41.102
on their phone, and then the
wearable companion app goes,

00:20:41.102 --> 00:20:42.560
oh, there's a
wearable app in here.

00:20:42.560 --> 00:20:45.260
It takes that and installs
it onto your wearable,

00:20:45.260 --> 00:20:48.310
and then it installs
and it's ready to go.

00:20:48.310 --> 00:20:49.810
So the nice thing
about Android Wear

00:20:49.810 --> 00:20:53.010
is that over time, as different
companies add Wear support

00:20:53.010 --> 00:20:55.790
to their apps, your customers
just kind of get it for free.

00:20:55.790 --> 00:20:58.290
They don't need to go out of
their way to download a new app

00:20:58.290 --> 00:21:01.291
or to go and check any
boxes or do anything.

00:21:01.291 --> 00:21:02.540
It just happens automatically.

00:21:02.540 --> 00:21:03.956
That's the great
thing about Wear,

00:21:03.956 --> 00:21:06.510
is it's very easy for
customers to deal with.

00:21:06.510 --> 00:21:10.670
So, one final thing is that when
you update your app to the Play

00:21:10.670 --> 00:21:12.910
Store, you bump
the version codes,

00:21:12.910 --> 00:21:14.480
you push it on to
the Play Store,

00:21:14.480 --> 00:21:16.060
and then it downloads
to the phone.

00:21:16.060 --> 00:21:18.220
And the phone goes ah, there's
a new version of the app.

00:21:18.220 --> 00:21:19.800
I'll push it to the
wearable as well.

00:21:19.800 --> 00:21:21.680
So as a little
tip, very important

00:21:21.680 --> 00:21:24.410
that you get the version codes
on the wearable and phone sides

00:21:24.410 --> 00:21:25.314
to be the same.

00:21:25.314 --> 00:21:26.980
They have to have the
same package name,

00:21:26.980 --> 00:21:29.130
otherwise they won't be
able to talk to each other.

00:21:29.130 --> 00:21:32.920
So in Gradle, in Android
Studio, we have a wearApp.

00:21:32.920 --> 00:21:35.850
So you'll see this in the build
doc Gradle for the application.

00:21:35.850 --> 00:21:38.190
It'll say wearApp
project brackets wear.

00:21:38.190 --> 00:21:40.540
And what that says is,
take the wearable project,

00:21:40.540 --> 00:21:42.590
compile it, and
then bring that APK

00:21:42.590 --> 00:21:44.160
and put it inside the phone app.

00:21:44.160 --> 00:21:46.310
So it actually takes
care of all this for you.

00:21:46.310 --> 00:21:48.020
So when you're building
in release mode,

00:21:48.020 --> 00:21:50.770
the wearable APK's embedded
into the phone APK, just

00:21:50.770 --> 00:21:51.940
takes care of it for you.

00:21:51.940 --> 00:21:54.990
And a lot of our samples
implement this as well,

00:21:54.990 --> 00:21:58.000
so you can see how it's done.

00:21:58.000 --> 00:22:01.680
So let's talk now about things
that are wearable specific.

00:22:01.680 --> 00:22:03.980
So while they are
complete Android devices

00:22:03.980 --> 00:22:07.150
and they implement
everything that you've

00:22:07.150 --> 00:22:09.890
seen on Android before, so
you can reuse your same skills

00:22:09.890 --> 00:22:11.385
and knowledge,
there's a few things

00:22:11.385 --> 00:22:12.890
in Android Wear that
are different that you

00:22:12.890 --> 00:22:13.610
need to be aware of.

00:22:13.610 --> 00:22:15.193
So the rest of the
talk is going to be

00:22:15.193 --> 00:22:16.460
talking about those things.

00:22:16.460 --> 00:22:17.980
So we're going to
talk about sharing

00:22:17.980 --> 00:22:19.780
data between the
wearable and the phone,

00:22:19.780 --> 00:22:21.250
we're going to talk about
building custom user

00:22:21.250 --> 00:22:22.990
interfaces, and I'm
going to finish up

00:22:22.990 --> 00:22:27.510
by talking quickly about how we
implement voice interactions.

00:22:27.510 --> 00:22:29.560
So, as I said
before Android Wear

00:22:29.560 --> 00:22:32.430
devices don't have
direct network access.

00:22:32.430 --> 00:22:35.360
You'll sometimes season that
Android Wear devices support

00:22:35.360 --> 00:22:38.810
Wi-Fi and Bluetooth and if the
Android Wear devices connected

00:22:38.810 --> 00:22:43.010
in a certain way by Wi-Fi
sometimes there's access,

00:22:43.010 --> 00:22:45.280
but you can't rely
on that behavior.

00:22:45.280 --> 00:22:49.520
The only way to get proper
connectivity between the phone

00:22:49.520 --> 00:22:53.945
and the wearable is to use
what we call the data API

00:22:53.945 --> 00:22:55.756
and message API and so forth.

00:22:55.756 --> 00:22:58.130
And what they do is they allow
the wearable and the phone

00:22:58.130 --> 00:23:00.920
to talk to each other,
and then the phone

00:23:00.920 --> 00:23:02.770
can go and do the
network access for you.

00:23:02.770 --> 00:23:04.770
So if your wearable app
needs to go and find out

00:23:04.770 --> 00:23:06.367
what the weather
is, the wearable app

00:23:06.367 --> 00:23:08.200
will send a message to
the phone app saying,

00:23:08.200 --> 00:23:09.800
hey, tell me the
current weather.

00:23:09.800 --> 00:23:13.100
The phone will then make an HTTP
request to a weather website.

00:23:13.100 --> 00:23:15.190
It'll download the
weather information.

00:23:15.190 --> 00:23:17.250
It'll then go, ah, the
temperature today is 56.

00:23:17.250 --> 00:23:19.750
It'll then take that number,
send it over as a message

00:23:19.750 --> 00:23:22.150
to the wearable, and
the wearable onDraw it.

00:23:22.150 --> 00:23:24.780
You don't want the wearable
doing lots of heavy work.

00:23:24.780 --> 00:23:27.610
If the wearable is able
to make an HTTP request,

00:23:27.610 --> 00:23:29.790
you don't want it sitting
there making the query,

00:23:29.790 --> 00:23:31.810
pausing all the HTML
and cleaning it all up.

00:23:31.810 --> 00:23:34.180
You don't want the wearable
doing these kind of things.

00:23:34.180 --> 00:23:36.220
So that's important.

00:23:36.220 --> 00:23:38.460
And this communication
mechanism is implemented

00:23:38.460 --> 00:23:39.610
by Google Play services.

00:23:39.610 --> 00:23:41.750
So Play services
provides the framework

00:23:41.750 --> 00:23:44.210
that allows these devices
to talk to each other,

00:23:44.210 --> 00:23:46.730
and they're done by
asynchronous calls.

00:23:46.730 --> 00:23:49.690
So we're going to go through
now how to go about doing this.

00:23:49.690 --> 00:23:52.880
So there are three kinds of
data exchange that are possible.

00:23:52.880 --> 00:23:55.360
The first one is the node
API, and what this does

00:23:55.360 --> 00:23:57.540
is it tells you when two
devices are connected.

00:23:57.540 --> 00:24:01.630
So if a wearable and a phone
appear close to each other,

00:24:01.630 --> 00:24:03.435
then the node API
will say Yeah a device

00:24:03.435 --> 00:24:04.660
has just become connected.

00:24:04.660 --> 00:24:07.290
And if the wearable goes
off for a walk or the phone

00:24:07.290 --> 00:24:09.670
goes for a walk, then you'll
get a disconnect message

00:24:09.670 --> 00:24:12.800
so that you know that they're
no longer paired to each other.

00:24:12.800 --> 00:24:15.340
We have the message API,
which allows you to exchange

00:24:15.340 --> 00:24:17.150
low latency messages.

00:24:17.150 --> 00:24:20.886
So these are messages where the
phone might say, hey, wearable,

00:24:20.886 --> 00:24:22.510
make a noise or do
something right now,

00:24:22.510 --> 00:24:24.020
and the wearable will do it.

00:24:24.020 --> 00:24:26.240
However, if the wearable
is disconnected,

00:24:26.240 --> 00:24:27.620
that message will be lost.

00:24:27.620 --> 00:24:30.360
So you only use messages
in cases when something

00:24:30.360 --> 00:24:32.616
has to happen right now,
and if the message is lost,

00:24:32.616 --> 00:24:33.600
it's no big deal.

00:24:33.600 --> 00:24:35.170
So they're kind of
like UDP packets

00:24:35.170 --> 00:24:38.190
when you're doing TCP/IP.

00:24:38.190 --> 00:24:40.500
And then we also
have the data API.

00:24:40.500 --> 00:24:45.120
The data API allows you to
create a key value object that

00:24:45.120 --> 00:24:49.830
has something like, temperature
of 56, current weather raining.

00:24:49.830 --> 00:24:51.890
You can put that in
an object and then

00:24:51.890 --> 00:24:54.590
you can send it to all the
wearable devices on the network

00:24:54.590 --> 00:24:57.020
and it'll automatically
synchronize it for you,

00:24:57.020 --> 00:24:59.250
and you don't need to
worry about retransmitting.

00:24:59.250 --> 00:25:00.990
If the wearable
is not connected,

00:25:00.990 --> 00:25:04.110
when you bring it back
later on, the data items

00:25:04.110 --> 00:25:05.380
will be synchronized up.

00:25:05.380 --> 00:25:07.240
It takes care of all
those things for you,

00:25:07.240 --> 00:25:08.370
so it's really nice.

00:25:08.370 --> 00:25:11.110
And actually we have another
API, called the channel API,

00:25:11.110 --> 00:25:13.850
which allows you to make
connections to a wearable

00:25:13.850 --> 00:25:16.342
and send data over it so
you could stream some audio,

00:25:16.342 --> 00:25:17.300
or something like that.

00:25:17.300 --> 00:25:19.240
So there's a variety
of different APIs

00:25:19.240 --> 00:25:21.900
that we provide to [INAUDIBLE]
communicate back and forth

00:25:21.900 --> 00:25:23.910
from a phone to a wearable.

00:25:23.910 --> 00:25:26.456
So to quickly walk through
it, this is the node API.

00:25:26.456 --> 00:25:27.830
So you can see
here where there's

00:25:27.830 --> 00:25:29.550
a getConnectedNodes method.

00:25:29.550 --> 00:25:32.030
You call that, it returns you
a list of all the wearables

00:25:32.030 --> 00:25:33.180
that are connected.

00:25:33.180 --> 00:25:35.890
Important tip here is that
it's possible for users

00:25:35.890 --> 00:25:38.720
to have many Android Wear
devices connected to a phone.

00:25:38.720 --> 00:25:41.350
So when you get an array
back from that top call,

00:25:41.350 --> 00:25:43.310
you should not just
read the first element.

00:25:43.310 --> 00:25:45.610
You should read all of them
because some people like

00:25:45.610 --> 00:25:47.767
me have eight Android
Wear devices at their desk

00:25:47.767 --> 00:25:49.600
and I want all of them
to work all the time.

00:25:49.600 --> 00:25:51.580
So make sure you code
that up for me, otherwise

00:25:51.580 --> 00:25:53.900
my functionally won't work.

00:25:53.900 --> 00:25:56.390
So yeah people could have
many Android by devices.

00:25:56.390 --> 00:25:58.010
That's a very key
sort of mistake

00:25:58.010 --> 00:26:00.270
that some people make, is
they don't do that right.

00:26:00.270 --> 00:26:03.150
And then you simply
declare a node listener,

00:26:03.150 --> 00:26:05.970
and you get these methods
that are called when peers

00:26:05.970 --> 00:26:08.160
are connected or disconnected.

00:26:08.160 --> 00:26:11.180
So the message API, we have
a method called sendMessage.

00:26:11.180 --> 00:26:13.340
You simply pass in
the idea of the device

00:26:13.340 --> 00:26:14.720
you want to send a message to.

00:26:14.720 --> 00:26:16.480
You could pass it
in a string-- sorry,

00:26:16.480 --> 00:26:20.310
you pass it in a byte array--
it sends it to the device.

00:26:20.310 --> 00:26:22.270
And then you can
register a method

00:26:22.270 --> 00:26:25.430
to be called on message
received if a message arrives

00:26:25.430 --> 00:26:26.930
at your device.

00:26:26.930 --> 00:26:29.430
And finally for the
data API, you've

00:26:29.430 --> 00:26:31.590
got putDataItems
and getDataItems.

00:26:31.590 --> 00:26:35.010
Those allow you to put
data items into the store,

00:26:35.010 --> 00:26:36.860
they're synchronized
back and forth,

00:26:36.860 --> 00:26:38.520
and then you can
retrieve them back

00:26:38.520 --> 00:26:39.979
if messages are sent to you.

00:26:39.979 --> 00:26:41.520
And then there's
onDataChanged, which

00:26:41.520 --> 00:26:44.830
is called whenever an item
has arrived off the network.

00:26:44.830 --> 00:26:49.027
So, it's a very simple
API, and it helps deal

00:26:49.027 --> 00:26:51.360
with all the complexities of
sending data back and forth

00:26:51.360 --> 00:26:54.290
between wearables and phones.

00:26:54.290 --> 00:26:57.730
And finally there
is a base class

00:26:57.730 --> 00:27:00.580
called WearableListenerService
that you implement,

00:27:00.580 --> 00:27:03.030
which is what you put all
those other methods in to.

00:27:03.030 --> 00:27:07.310
And you have to declare it in
your AndroidManifest XML file.

00:27:07.310 --> 00:27:09.290
And that tells
Google Play services

00:27:09.290 --> 00:27:11.550
that it is allowed to send
these messages and data

00:27:11.550 --> 00:27:14.470
items to your app, to
allow them to communicate

00:27:14.470 --> 00:27:16.030
with the wearable.

00:27:16.030 --> 00:27:18.330
So that's basically it for
sending data back and forth.

00:27:18.330 --> 00:27:20.620
So it's a very
powerful API, and it's

00:27:20.620 --> 00:27:21.890
how communications are done.

00:27:21.890 --> 00:27:24.100
And as I said before,
make sure the package

00:27:24.100 --> 00:27:26.810
names and the version
codes and all that match

00:27:26.810 --> 00:27:29.040
between the wearable and
the phone application,

00:27:29.040 --> 00:27:31.164
otherwise they won't be
able to talk to each other.

00:27:31.164 --> 00:27:33.660
And it's not possible to
send data items or messages

00:27:33.660 --> 00:27:36.241
to a different app on
the system that doesn't

00:27:36.241 --> 00:27:37.240
match your package then.

00:27:37.240 --> 00:27:41.170
You'll have to come up with
some other mechanism to do that.

00:27:41.170 --> 00:27:43.350
So we've talked about
sending data, now

00:27:43.350 --> 00:27:45.070
let's talk about how
to build custom user

00:27:45.070 --> 00:27:46.600
interfaces on Android Wear.

00:27:46.600 --> 00:27:49.350
Because while Android
Wear is based on Android,

00:27:49.350 --> 00:27:51.862
if you actually look at the
user interface on the screen,

00:27:51.862 --> 00:27:53.320
it doesn't look a
lot like Android.

00:27:53.320 --> 00:27:54.320
It looks very different.

00:27:54.320 --> 00:27:56.140
The interface has
been designed to look

00:27:56.140 --> 00:28:00.210
great on wearables in
outdoor environments

00:28:00.210 --> 00:28:01.870
when you're walking around.

00:28:01.870 --> 00:28:04.620
So to do this, we
provide a library

00:28:04.620 --> 00:28:07.354
called the wearable support
library to help out with this.

00:28:07.354 --> 00:28:09.520
So in your Gradle file,
it's called com.google.andro

00:28:09.520 --> 00:28:13.380
id.support:wearable, and this
is what we call the wearable

00:28:13.380 --> 00:28:14.640
support library.

00:28:14.640 --> 00:28:17.200
So this wearable
support library provides

00:28:17.200 --> 00:28:20.550
functionality that's specific
to Android Wear devices

00:28:20.550 --> 00:28:23.800
but that doesn't belong in
the Android framework itself.

00:28:23.800 --> 00:28:26.850
So when we designed
Android Wear we

00:28:26.850 --> 00:28:30.530
want to have a common
experience across the platform

00:28:30.530 --> 00:28:31.970
so that apps look the same.

00:28:31.970 --> 00:28:33.890
So we wanted the
system apps, and apps

00:28:33.890 --> 00:28:36.300
written by developers like
you, to have a consistent look

00:28:36.300 --> 00:28:37.210
and feel.

00:28:37.210 --> 00:28:40.259
And so this library contains
reusable UI elements

00:28:40.259 --> 00:28:42.550
that you can use in your
code, to make your life easier

00:28:42.550 --> 00:28:44.572
so you don't have to
reinvent the wheel.

00:28:44.572 --> 00:28:46.030
So we use this
library for our apps

00:28:46.030 --> 00:28:48.530
as well, and so
if you've actually

00:28:48.530 --> 00:28:50.530
got any ideas for things
that are like you know,

00:28:50.530 --> 00:28:52.285
I really wish I had
a widget to do blah,

00:28:52.285 --> 00:28:54.660
you know, please come and tell
me or one of the developer

00:28:54.660 --> 00:28:56.118
advocates because
we'd like to hear

00:28:56.118 --> 00:28:58.770
more feedback about the
kind of things people want.

00:28:58.770 --> 00:29:02.500
So what is the wearable support
library and how does it work?

00:29:02.500 --> 00:29:05.230
It's different than the
Android support library.

00:29:05.230 --> 00:29:07.830
So you might be familiar
with Android support library.

00:29:07.830 --> 00:29:11.090
That is used to sort of
backport new Android features

00:29:11.090 --> 00:29:12.710
to old releases.

00:29:12.710 --> 00:29:14.460
The wearable support
library is different.

00:29:14.460 --> 00:29:16.280
It's designed as a
general support library

00:29:16.280 --> 00:29:17.905
that, these are things
that might never

00:29:17.905 --> 00:29:19.380
make in the
framework, but they're

00:29:19.380 --> 00:29:22.230
useful for designing
wearable apps.

00:29:22.230 --> 00:29:24.620
The next thing is that
it's compiled statically

00:29:24.620 --> 00:29:25.610
into your app.

00:29:25.610 --> 00:29:27.660
So if you do use the
wearable support library,

00:29:27.660 --> 00:29:29.620
the code is going
to be in your APK.

00:29:29.620 --> 00:29:31.760
It's not part of
the system itself.

00:29:31.760 --> 00:29:34.632
So your APK is going to get a
little larger when you use it.

00:29:34.632 --> 00:29:36.090
Now you can strip
out the parts you

00:29:36.090 --> 00:29:38.780
don't need with resource
minification and proguard,

00:29:38.780 --> 00:29:40.840
but just be aware that
that has to be done.

00:29:40.840 --> 00:29:44.840
So it doesn't have a
huge impact on APK.

00:29:44.840 --> 00:29:47.100
The actual library
itself is quite small,

00:29:47.100 --> 00:29:49.480
so it won't cause too
much flood in your APK.

00:29:49.480 --> 00:29:52.020
But it's something to be aware
of if you're working with it.

00:29:52.020 --> 00:29:54.634
It's also released
at different cycles

00:29:54.634 --> 00:29:56.550
that are independent of
the Android framework.

00:29:56.550 --> 00:29:59.330
So the Android framework is like
Marshmallow, Lollipop, KitKat,

00:29:59.330 --> 00:30:00.264
things like that.

00:30:00.264 --> 00:30:02.430
The wearable support library
is independent of that.

00:30:02.430 --> 00:30:05.090
It typically is released
whenever any Android Wear

00:30:05.090 --> 00:30:06.170
release comes out.

00:30:06.170 --> 00:30:10.430
So it's not-- changes
to the wearable support

00:30:10.430 --> 00:30:13.985
library are not dependent
on new APIs coming out.

00:30:13.985 --> 00:30:14.610
So that's nice.

00:30:14.610 --> 00:30:17.980
So we can add new features and
we can fix bugs very quickly.

00:30:17.980 --> 00:30:21.310
And this library
though, because it

00:30:21.310 --> 00:30:23.480
is a new library that
statically linked in,

00:30:23.480 --> 00:30:26.171
the API actually could change
a little bit between versions.

00:30:26.171 --> 00:30:27.670
So there's a
possibility that if you

00:30:27.670 --> 00:30:29.319
bump to a different
version, you might

00:30:29.319 --> 00:30:30.860
have to tweak your
code a little bit.

00:30:30.860 --> 00:30:32.040
But you can always
use the old version

00:30:32.040 --> 00:30:33.350
if that's what you want.

00:30:33.350 --> 00:30:36.000
So you need to be aware of the
fact that the API could change

00:30:36.000 --> 00:30:37.540
and it might break
backwards compatibility.

00:30:37.540 --> 00:30:38.880
So it's not like the
Android framework

00:30:38.880 --> 00:30:40.380
in that we guarantee
that it's going

00:30:40.380 --> 00:30:42.740
to work till forever, the
wearable support library will

00:30:42.740 --> 00:30:44.180
evolve over time.

00:30:44.180 --> 00:30:45.970
So how do we go about using it?

00:30:45.970 --> 00:30:47.710
So when you're
building-- will start,

00:30:47.710 --> 00:30:49.376
when you're writing
your buildup writeup

00:30:49.376 --> 00:30:50.800
file on the wearable
side, you've

00:30:50.800 --> 00:30:51.955
got the dependency section.

00:30:51.955 --> 00:30:53.330
So if you look at
the bottom, you

00:30:53.330 --> 00:30:55.830
can see it's got
play-services-wearable.

00:30:55.830 --> 00:30:58.440
So some of you may have used
Google Play services before,

00:30:58.440 --> 00:31:02.560
that's a pretty standard line
that you include that says

00:31:02.560 --> 00:31:04.560
give me play-services-wearble.

00:31:04.560 --> 00:31:07.460
Play services has actually
been broken up into pieces

00:31:07.460 --> 00:31:10.210
so that you can select
which parts of play service

00:31:10.210 --> 00:31:11.100
you want to import.

00:31:11.100 --> 00:31:13.020
Because play services
is a very large library,

00:31:13.020 --> 00:31:15.200
and you don't want to import
all of that into your app.

00:31:15.200 --> 00:31:16.783
By just adding
play-services-wearable,

00:31:16.783 --> 00:31:18.920
we are saying I just
want the data API

00:31:18.920 --> 00:31:22.090
and I just want the message
API and things like that.

00:31:22.090 --> 00:31:24.500
The wearable support
libraries is the top line,

00:31:24.500 --> 00:31:26.005
so we've said OK
com.google.andro

00:31:26.005 --> 00:31:29.220
id.support:wearable
include that library,

00:31:29.220 --> 00:31:31.091
and then we have
a plus at the end.

00:31:31.091 --> 00:31:32.840
Now some people would
say you should never

00:31:32.840 --> 00:31:35.640
use plus because what it
does it grabs the latest

00:31:35.640 --> 00:31:38.070
version of the wearable
support library.

00:31:38.070 --> 00:31:39.820
So you could be in the
middle of a release

00:31:39.820 --> 00:31:41.666
and then that day
Google releases

00:31:41.666 --> 00:31:43.540
a new version of the
wearable support library

00:31:43.540 --> 00:31:45.220
and you are like why
is my build broken,

00:31:45.220 --> 00:31:47.870
and it's because you said
grab the latest version.

00:31:47.870 --> 00:31:49.620
So if you want stability
with your builds,

00:31:49.620 --> 00:31:51.680
you should hard code
in the version number.

00:31:51.680 --> 00:31:53.850
So if you look on the Play
Services at the bottom,

00:31:53.850 --> 00:31:56.130
I've got colon 8.1.0.

00:31:56.130 --> 00:31:58.347
And that says use
version 8.1.0, and I

00:31:58.347 --> 00:31:59.930
don't care what the
newest version is,

00:31:59.930 --> 00:32:01.470
you must use that version.

00:32:01.470 --> 00:32:03.547
So right now wearable
support is 1.3

00:32:03.547 --> 00:32:05.880
but you can hard code that
depending on what you want to

00:32:05.880 --> 00:32:08.580
I have some test samples that
I use that have a plus in them,

00:32:08.580 --> 00:32:10.788
because I want to always
test with the latest version

00:32:10.788 --> 00:32:11.900
to see what's going on.

00:32:11.900 --> 00:32:13.759
But you can control
what happens here.

00:32:13.759 --> 00:32:15.550
But it's very important
that you understand

00:32:15.550 --> 00:32:18.682
the implications of plus
versus a version number.

00:32:18.682 --> 00:32:20.140
And this is a common
thing you need

00:32:20.140 --> 00:32:21.820
to understand when
you're writing

00:32:21.820 --> 00:32:24.480
any kind of Android app.

00:32:24.480 --> 00:32:27.049
And finally the middle
line that says provided.

00:32:27.049 --> 00:32:28.840
That is needed for when
you're implementing

00:32:28.840 --> 00:32:29.760
the always-on mode.

00:32:29.760 --> 00:32:31.970
We have a special
library that helps out.

00:32:31.970 --> 00:32:33.364
You'll need to
include that line.

00:32:33.364 --> 00:32:35.030
I way gone into too
much detail on that,

00:32:35.030 --> 00:32:37.210
but that's also
important as well.

00:32:37.210 --> 00:32:41.670
So when we introduced
Android Wear,

00:32:41.670 --> 00:32:45.740
one of the big differences was
that it had a round screen.

00:32:45.740 --> 00:32:48.950
So up until then, every computer
and everything we've ever had

00:32:48.950 --> 00:32:51.300
has been square
rectangular displays.

00:32:51.300 --> 00:32:53.630
So the introduction
of a round display

00:32:53.630 --> 00:32:56.560
is really beautiful as you can
see from these watches here,

00:32:56.560 --> 00:32:58.680
but it imposes
challenges for developers

00:32:58.680 --> 00:33:01.750
because people haven't thought
about round screens before.

00:33:01.750 --> 00:33:03.900
So widgets we're using
like textview and things

00:33:03.900 --> 00:33:05.920
like that, they don't
understand round screens.

00:33:05.920 --> 00:33:08.530
So we need to help
developers understand

00:33:08.530 --> 00:33:11.370
how to deal with round screens
and what we can do about it.

00:33:11.370 --> 00:33:13.800
So if you look on the left,
you've got the Moto 360.

00:33:13.800 --> 00:33:15.470
That actually has an
inset at the bottom

00:33:15.470 --> 00:33:17.790
or what some people call
a chin or a flat tire,

00:33:17.790 --> 00:33:19.477
which is 30 pixels in size.

00:33:19.477 --> 00:33:22.060
You've then got the next watch,
which is a square screen, even

00:33:22.060 --> 00:33:23.230
though it looks rounded.

00:33:23.230 --> 00:33:25.180
The next one is a round
screen with no inset,

00:33:25.180 --> 00:33:28.800
and then finally the last one
is a rectangular screen as well.

00:33:28.800 --> 00:33:31.380
So, we need to
write software that

00:33:31.380 --> 00:33:33.430
works on all of these screens.

00:33:33.430 --> 00:33:36.010
So if we want to
create a text view

00:33:36.010 --> 00:33:38.130
and put a large amount
of text on the screen,

00:33:38.130 --> 00:33:38.890
what would happen?

00:33:38.890 --> 00:33:40.306
On the far right
you can see we've

00:33:40.306 --> 00:33:44.330
got a regular rectangular
screen, the text fits nicely.

00:33:44.330 --> 00:33:45.890
However, on the
round screen, you

00:33:45.890 --> 00:33:48.760
can see the top, bottom,
right, left, everything is all

00:33:48.760 --> 00:33:49.830
chopped off.

00:33:49.830 --> 00:33:53.260
So you can't read
all of the text.

00:33:53.260 --> 00:33:55.610
It would be a really bad
idea to throw a pile of text

00:33:55.610 --> 00:33:57.380
on the screen and
not do anything

00:33:57.380 --> 00:33:59.260
about it because all
of your round customers

00:33:59.260 --> 00:34:00.350
are going to have a bad time.

00:34:00.350 --> 00:34:02.920
And there are a lot of Android
Wear round devices out there.

00:34:02.920 --> 00:34:05.290
So if you only
designed to square

00:34:05.290 --> 00:34:06.547
you're not going to do well.

00:34:06.547 --> 00:34:08.130
People are not going
to like your app.

00:34:08.130 --> 00:34:10.300
So what can we do about this?

00:34:10.300 --> 00:34:11.803
So wearable support
library provides

00:34:11.803 --> 00:34:14.219
three different classes that
you can use to help out here.

00:34:14.219 --> 00:34:16.469
We've got BoxInsetLayout,
WearableFrameLayout

00:34:16.469 --> 00:34:17.270
and WatchViewStub.

00:34:17.270 --> 00:34:18.894
We're going to go
through each of them,

00:34:18.894 --> 00:34:20.820
to show how to use them.

00:34:20.820 --> 00:34:24.040
So the first one
BoxInsetLayout, what it does

00:34:24.040 --> 00:34:26.690
is it adds padding around
the edges of your text view

00:34:26.690 --> 00:34:29.480
to prevent the
text from touching

00:34:29.480 --> 00:34:30.989
the edges of the screen.

00:34:30.989 --> 00:34:34.790
So you can see on the left
the BoxInsetLayout has added

00:34:34.790 --> 00:34:37.840
padding all around it, so
that the text never touches

00:34:37.840 --> 00:34:40.000
the round edge of the display.

00:34:40.000 --> 00:34:43.110
So we can read the
text, it looks nice,

00:34:43.110 --> 00:34:45.170
and that's quite cool.

00:34:45.170 --> 00:34:46.904
So how do we go about
implementing this?

00:34:46.904 --> 00:34:48.320
And finally,
actually before we do

00:34:48.320 --> 00:34:50.300
that, if you look on
the square screen,

00:34:50.300 --> 00:34:52.000
it's exactly the same as before.

00:34:52.000 --> 00:34:54.780
So we're using all of the
space of a square screen

00:34:54.780 --> 00:34:57.010
but on the round screen
we're making it fit.

00:34:57.010 --> 00:34:58.490
So how do we go
about doing this?

00:34:58.490 --> 00:35:05.090
What we do is in our layout XML
file, we have at the very top,

00:35:05.090 --> 00:35:11.380
where's my laser I put it
away-- there it is anyway,

00:35:11.380 --> 00:35:15.352
if you look at the top,
there's box inset layout

00:35:15.352 --> 00:35:17.051
can people see the cursor?

00:35:17.051 --> 00:35:17.550
No.

00:35:21.220 --> 00:35:23.398
Nope, my cursor is not working.

00:35:25.612 --> 00:35:27.070
If you look at the
top there, we've

00:35:27.070 --> 00:35:29.100
got at the top
level of hierarchy,

00:35:29.100 --> 00:35:31.520
we have a box inset layout.

00:35:31.520 --> 00:35:33.890
The box inset layout
contains the text view.

00:35:33.890 --> 00:35:37.400
And then inside the text view
we've defined an attribute app

00:35:37.400 --> 00:35:39.560
layout_box="all".

00:35:39.560 --> 00:35:42.190
And what that says is we're
living inside a box inset

00:35:42.190 --> 00:35:45.670
layout and I want to be
boxed on all four sides

00:35:45.670 --> 00:35:47.410
to do the implementation.

00:35:47.410 --> 00:35:52.830
And if you actually forget to
put that in, it won't be boxed.

00:35:52.830 --> 00:35:55.510
So it's very important that
you actually remember to put it

00:35:55.510 --> 00:35:58.910
inside a box inset layout and
also to set the attribute app

00:35:58.910 --> 00:36:00.760
layout_box="all."

00:36:00.760 --> 00:36:03.746
Now you could also, you don't
have to box around everything,

00:36:03.746 --> 00:36:05.620
you can actually box
just the left and right.

00:36:05.620 --> 00:36:09.010
So for example here you can see
the text is boxed on your left

00:36:09.010 --> 00:36:11.880
and right, and it's
allowed to flow completely

00:36:11.880 --> 00:36:13.990
to the top and bottom
parts of the screen.

00:36:13.990 --> 00:36:17.020
And implementation for this,
is we simply replace the word

00:36:17.020 --> 00:36:19.820
all with left and right.

00:36:19.820 --> 00:36:22.400
And you could also do
top and bottom as well,

00:36:22.400 --> 00:36:25.040
same here, you can see the
effect on the round screen.

00:36:25.040 --> 00:36:28.187
Typically you don't want to
always do a complete all box

00:36:28.187 --> 00:36:28.850
in.

00:36:28.850 --> 00:36:30.520
What you might want to
do is have it boxed just

00:36:30.520 --> 00:36:31.936
on the left and
the right and then

00:36:31.936 --> 00:36:35.070
have it scrollable because
the middle part of the screen

00:36:35.070 --> 00:36:37.362
is still quite usable, but
you don't want a box it

00:36:37.362 --> 00:36:38.820
all completely,
otherwise you waste

00:36:38.820 --> 00:36:39.986
a lot of screen real estate.

00:36:39.986 --> 00:36:42.870
So you want to squeeze
it much otherwise you are

00:36:42.870 --> 00:36:44.780
going to read much text at all.

00:36:44.780 --> 00:36:48.130
And so here's how we
do the top and bottom.

00:36:48.130 --> 00:36:51.750
Now finally, one thing
you will notice here

00:36:51.750 --> 00:36:54.970
is that when you put a text
view inside a box inset layout,

00:36:54.970 --> 00:36:58.150
the green background extends
all the way to the edges.

00:36:58.150 --> 00:37:00.610
Now you might want
to-- so the way

00:37:00.610 --> 00:37:03.380
it works is that the
margins of the text view

00:37:03.380 --> 00:37:06.060
are adjusted but not
the entire view itself.

00:37:06.060 --> 00:37:09.350
So if you actually want to force
the view to fit completely,

00:37:09.350 --> 00:37:12.310
and have a black background
or whatever the default is,

00:37:12.310 --> 00:37:15.170
you can actually put a whole
lot inside of a frame layout

00:37:15.170 --> 00:37:18.210
container and then put the frame
layout container inside the box

00:37:18.210 --> 00:37:19.300
inset layout.

00:37:19.300 --> 00:37:21.640
And so that's one
of the things you

00:37:21.640 --> 00:37:24.120
can do with it, if you want
the black border instead.

00:37:24.120 --> 00:37:25.995
You might want to have
other things appearing

00:37:25.995 --> 00:37:29.160
in those corners, and this
will allow you to do that.

00:37:29.160 --> 00:37:33.112
So while BoxInsetLayout is easy
to use-- you simply just add it

00:37:33.112 --> 00:37:35.810
to your layout hierarchy and
it boxes everything for you,

00:37:35.810 --> 00:37:38.167
pretty much automatically--
it's not very efficient,

00:37:38.167 --> 00:37:39.250
as we pointed out earlier.

00:37:39.250 --> 00:37:41.620
So there must be better
ways of dealing with this.

00:37:41.620 --> 00:37:44.850
So in one of the recent
wearable support libraries

00:37:44.850 --> 00:37:46.770
we added something called
WearableFrameLayout,

00:37:46.770 --> 00:37:50.080
and what this does is it
allows you to specify padding,

00:37:50.080 --> 00:37:52.800
an attributes for things
like centering or alignment,

00:37:52.800 --> 00:37:55.560
but you can specify different
attributes depending on if it's

00:37:55.560 --> 00:37:57.290
a round or a square device.

00:37:57.290 --> 00:38:00.820
So you can see here,
on the round display,

00:38:00.820 --> 00:38:02.830
I've got the green
boxes centered.

00:38:02.830 --> 00:38:05.040
I wanted 25dp margins.

00:38:05.040 --> 00:38:07.040
And then on square, I
want it to be left aligned

00:38:07.040 --> 00:38:08.270
with 5dp margins.

00:38:08.270 --> 00:38:11.340
And you can see that
they look very different

00:38:11.340 --> 00:38:14.370
on the round versus square,
but the implementation

00:38:14.370 --> 00:38:15.360
is quite easy.

00:38:15.360 --> 00:38:18.090
So if you look here, in
the WearableFrameLayout

00:38:18.090 --> 00:38:21.240
you can see we have
layout_gravityRound

00:38:21.240 --> 00:38:25.140
is centered, but layout_gravity
the default version

00:38:25.140 --> 00:38:27.750
is going to be the left aligned
whatever the default is.

00:38:27.750 --> 00:38:30.540
And you can see every time
we've thrown a round keyword

00:38:30.540 --> 00:38:33.250
into the attribute,
WearableFrameLayout

00:38:33.250 --> 00:38:35.640
looks at round or
not round to work out

00:38:35.640 --> 00:38:37.780
what it's going to do for
your particular device.

00:38:37.780 --> 00:38:40.000
So everything we just showed
in that previous example

00:38:40.000 --> 00:38:41.290
is encoded here.

00:38:41.290 --> 00:38:45.160
So the nice thing is that
you can have one single XML

00:38:45.160 --> 00:38:48.500
file that does layouts
for round and square,

00:38:48.500 --> 00:38:50.310
you can maintain them together.

00:38:50.310 --> 00:38:53.690
And it helps sort of to simplify
the process of-- one problem

00:38:53.690 --> 00:38:55.760
that people commonly do
is they define a round

00:38:55.760 --> 00:38:58.010
and a square layout, and
they change the square layout

00:38:58.010 --> 00:38:59.550
and they forget to
update the round layout

00:38:59.550 --> 00:39:00.925
and they've got
bugs in on round.

00:39:00.925 --> 00:39:04.850
So this helps to
avoid that problem.

00:39:04.850 --> 00:39:07.560
So finally, we have what's
called WatchViewStub, which

00:39:07.560 --> 00:39:09.780
is a class that
allows you to inflate

00:39:09.780 --> 00:39:12.550
two separate layouts that
depend on whether your on round

00:39:12.550 --> 00:39:13.600
or square.

00:39:13.600 --> 00:39:15.009
So you can see in
this case here,

00:39:15.009 --> 00:39:16.550
the layouts are
completely different.

00:39:16.550 --> 00:39:19.040
One of them has a gradient,
and the other one has a circle.

00:39:19.040 --> 00:39:20.710
They're totally nothing
to do with each other

00:39:20.710 --> 00:39:23.370
and that WatchViewStub inflates
the correct layout depending

00:39:23.370 --> 00:39:24.750
on which one you want.

00:39:24.750 --> 00:39:26.810
So if you look here,
the implementation

00:39:26.810 --> 00:39:29.560
is WatchViewStub, two
layout definitions,

00:39:29.560 --> 00:39:31.774
and those layouts are
defined in separate files.

00:39:31.774 --> 00:39:33.190
So the nice thing
here is that you

00:39:33.190 --> 00:39:35.230
get full control of
everything, there's

00:39:35.230 --> 00:39:37.910
no need to worry about trying
to express both layouts in one

00:39:37.910 --> 00:39:38.820
file.

00:39:38.820 --> 00:39:42.690
But the con of it all is that
you have to have two files,

00:39:42.690 --> 00:39:44.980
and you must remember
to update both of them

00:39:44.980 --> 00:39:46.880
and test on both
round and square

00:39:46.880 --> 00:39:48.110
whenever you make a change.

00:39:48.110 --> 00:39:51.290
Because you get that wrong,
then you'll have a problem.

00:39:51.290 --> 00:39:53.530
So those are sort of the
pros and cons of the three

00:39:53.530 --> 00:39:55.280
different ways you
can use, depending

00:39:55.280 --> 00:39:57.200
on what your app looks
like and which one you

00:39:57.200 --> 00:40:02.750
choose will very much depend
on the app that you're writing.

00:40:02.750 --> 00:40:05.800
So that's a quick
little rundown of what's

00:40:05.800 --> 00:40:07.585
available to support
round versus square.

00:40:07.585 --> 00:40:09.460
So what else in the
wearable support library?

00:40:09.460 --> 00:40:11.543
So here's a list of all
the different classes that

00:40:11.543 --> 00:40:13.040
are available in
there as of now,

00:40:13.040 --> 00:40:14.590
and I'm quickly going to
walk through them to show you

00:40:14.590 --> 00:40:16.250
a few things that are available
in case you weren't aware

00:40:16.250 --> 00:40:17.280
of it.

00:40:17.280 --> 00:40:19.700
So the first thing we have,
is that a lot of Android Wear

00:40:19.700 --> 00:40:23.130
apps have the ability to
show cards on the screen,

00:40:23.130 --> 00:40:27.440
and they also use this swiping
kind of interface where

00:40:27.440 --> 00:40:30.070
you can swipe sideways
to see different actions,

00:40:30.070 --> 00:40:32.590
you can scroll up and down,
so there's actually something

00:40:32.590 --> 00:40:35.370
called GridViewPager which
implements this ability

00:40:35.370 --> 00:40:37.036
to create a bunch of
fragments and then

00:40:37.036 --> 00:40:38.660
you can scroll up
and down through them

00:40:38.660 --> 00:40:41.100
and it implements the smooth
scrolling effect that you

00:40:41.100 --> 00:40:43.079
see on this example here.

00:40:43.079 --> 00:40:45.620
And this image actually is taken
from one of our samples coat

00:40:45.620 --> 00:40:47.610
XYZ tourist attractions.

00:40:47.610 --> 00:40:49.500
The next thing is,
is DotsPageIndicator,

00:40:49.500 --> 00:40:51.090
which if you look
at the very bottom

00:40:51.090 --> 00:40:54.090
there are five little dots
that as we swipe sideways

00:40:54.090 --> 00:40:55.510
you can see those dots changing.

00:40:55.510 --> 00:40:57.410
That's the dots
page indicator that

00:40:57.410 --> 00:40:58.900
shows you which page you're on.

00:40:58.900 --> 00:41:01.310
So we've written code that
provides this for you,

00:41:01.310 --> 00:41:03.768
so you don't need to worry
about writing this kind of thing

00:41:03.768 --> 00:41:04.890
yourself.

00:41:04.890 --> 00:41:08.590
Next we have ActionPage, which
you saw in the previous example

00:41:08.590 --> 00:41:10.310
where we were picking actions.

00:41:10.310 --> 00:41:13.570
ActionPage is the full screen
button with circular text

00:41:13.570 --> 00:41:14.640
that you see there.

00:41:14.640 --> 00:41:17.690
So most Android Wear
notifications and apps

00:41:17.690 --> 00:41:21.897
use this kind of button with
a little pingie in the middle

00:41:21.897 --> 00:41:23.480
to express things,
and people are used

00:41:23.480 --> 00:41:24.771
to seeing these kind of things.

00:41:24.771 --> 00:41:26.860
So if you use this it
does all work for you

00:41:26.860 --> 00:41:29.210
of handling the button
press and laying it out

00:41:29.210 --> 00:41:30.880
and it also gives
you a ripple feedback

00:41:30.880 --> 00:41:33.660
when you press it and it
has an action label that

00:41:33.660 --> 00:41:36.090
adjusts in size
depending on your screen

00:41:36.090 --> 00:41:37.530
so that it always fits.

00:41:37.530 --> 00:41:40.120
So it's kind of nice, and it
gives you the functionality

00:41:40.120 --> 00:41:41.995
that you've seen in
other apps without having

00:41:41.995 --> 00:41:43.940
to write it yourself.

00:41:43.940 --> 00:41:46.190
Next we have DismissOverlayView.

00:41:46.190 --> 00:41:48.290
It's a common paradigm
in Android Wear apps

00:41:48.290 --> 00:41:51.080
that you want to exit something,
you actually press and hold

00:41:51.080 --> 00:41:54.040
on the app and a
red X will pop up.

00:41:54.040 --> 00:41:56.380
You then press the
X to exit the app.

00:41:56.380 --> 00:41:58.380
So we've provided
the functionality

00:41:58.380 --> 00:41:59.650
that allows you to do this.

00:41:59.650 --> 00:42:02.290
So it gives you this pop up
that offers to let you quit out.

00:42:02.290 --> 00:42:06.400
So here it is in operation, and
then here's the code to do it.

00:42:06.400 --> 00:42:10.390
Now, actually, when you use
this DismissOverlayView,

00:42:10.390 --> 00:42:13.110
you need to suppress the
ability to swipe the app away.

00:42:13.110 --> 00:42:15.240
So on Android
Wear, you typically

00:42:15.240 --> 00:42:17.190
have the ability to grab
the app and flick it

00:42:17.190 --> 00:42:19.220
to the right, which
will exit the app.

00:42:19.220 --> 00:42:21.660
If you're using the
DismissOverlayView to exit out,

00:42:21.660 --> 00:42:23.890
you don't need that swipe
away gesture anymore.

00:42:23.890 --> 00:42:26.740
You might want to be making,
for example, a map out

00:42:26.740 --> 00:42:29.330
where you need to use the
finger to scroll around a map.

00:42:29.330 --> 00:42:32.350
You don't want the user to swipe
to the right to kill your app,

00:42:32.350 --> 00:42:34.300
you want to use it to
swipe map to the right.

00:42:34.300 --> 00:42:36.380
So in this code
here, you can see

00:42:36.380 --> 00:42:39.980
how we're creating a new custom
theme which actually disables

00:42:39.980 --> 00:42:42.742
window swipe to dismiss
and set it to false,

00:42:42.742 --> 00:42:44.200
and then in your
manifest file, you

00:42:44.200 --> 00:42:47.280
pick the theme that you just
created that suppresses swipe

00:42:47.280 --> 00:42:50.100
to the right.

00:42:50.100 --> 00:42:51.570
Next we have WearableListView.

00:42:51.570 --> 00:42:53.560
You may have seen on
Android Wear the ability

00:42:53.560 --> 00:42:56.660
to select from options, like
the settings area uses it,

00:42:56.660 --> 00:42:59.170
the app launch uses it, it's
a pretty common concept,

00:42:59.170 --> 00:43:01.530
so we've provided this
functionality so that you

00:43:01.530 --> 00:43:03.972
can provide some colors,
and some images, and text,

00:43:03.972 --> 00:43:05.680
and you can swipe up
and down through it.

00:43:05.680 --> 00:43:07.820
So this is very
common usage pattern,

00:43:07.820 --> 00:43:10.990
you write an adapter for it
and that's available as well.

00:43:13.825 --> 00:43:15.450
Let's just wait till
we get to the end.

00:43:15.450 --> 00:43:16.200
We're almost done.

00:43:16.200 --> 00:43:18.360
Then we can go through it.

00:43:18.360 --> 00:43:20.090
We had DelayedConfirmationView.

00:43:20.090 --> 00:43:24.420
So when you send a text message
on Android Wear, you say,

00:43:24.420 --> 00:43:27.290
send a message, I made
a reservation at 7:30.

00:43:27.290 --> 00:43:29.370
It then brings up
this dialogue that

00:43:29.370 --> 00:43:32.899
shows a ticking down timer that
shows that it's about to do it.

00:43:32.899 --> 00:43:34.940
So the nice thing about
this, is if the user does

00:43:34.940 --> 00:43:36.220
nothing the message is sent.

00:43:36.220 --> 00:43:38.370
But if the user realizes
the message is incorrect

00:43:38.370 --> 00:43:39.400
they can cancel it.

00:43:39.400 --> 00:43:42.280
So it was actually a nice way
of saying, instead of saying,

00:43:42.280 --> 00:43:43.720
are you sure you
want to send this

00:43:43.720 --> 00:43:46.250
it's I'm going to send this
unless you tell me not to.

00:43:46.250 --> 00:43:51.070
Just DelayedConfirmationView
helps with making that easier.

00:43:51.070 --> 00:43:54.450
So it uses the so-called image
you for the implementation

00:43:54.450 --> 00:43:58.300
of the circle and that provides
the set progress in the timer

00:43:58.300 --> 00:43:59.860
countdown as well.

00:43:59.860 --> 00:44:02.370
And to use-- we have
another thing called

00:44:02.370 --> 00:44:05.190
a ConfirmationActivity, which
is after the message has been

00:44:05.190 --> 00:44:07.890
sent, you can actually
pop up a green check box

00:44:07.890 --> 00:44:09.160
to say it was done.

00:44:09.160 --> 00:44:11.540
So the green check box is
actually an animated vector

00:44:11.540 --> 00:44:16.240
drawable that appears, and
you can use this code here,

00:44:16.240 --> 00:44:20.040
where you can start an activity
which brings this confirmation

00:44:20.040 --> 00:44:21.140
activity up on the screen.

00:44:21.140 --> 00:44:23.100
So you've seen all of
these different things

00:44:23.100 --> 00:44:28.460
appear in Android Wear
apps, this is how it's done.

00:44:28.460 --> 00:44:32.020
Also we have a CircledImageView
and a CircularButton.

00:44:32.020 --> 00:44:35.891
These are two different sort of
more little clickable widgets

00:44:35.891 --> 00:44:37.890
that you can use if you
want to implement pop up

00:44:37.890 --> 00:44:39.815
boxes that show various things.

00:44:39.815 --> 00:44:42.050
So these are all useful
for different kinds of apps

00:44:42.050 --> 00:44:43.341
that people might want to make.

00:44:43.341 --> 00:44:46.030
And remember, also to use
very large touch targets.

00:44:46.030 --> 00:44:48.140
You see those things
are very large

00:44:48.140 --> 00:44:50.550
compared to the size of the
emulator window I use there.

00:44:50.550 --> 00:44:52.590
You can only fit about
for those on the screen.

00:44:52.590 --> 00:44:53.860
You want to make sure
they're really big.

00:44:53.860 --> 00:44:55.220
You don't want to have
40 of these buttons

00:44:55.220 --> 00:44:56.660
on there, because
no one's going to go

00:44:56.660 --> 00:44:58.243
to press their finger
on it accurately

00:44:58.243 --> 00:45:00.470
to be able to press it.

00:45:00.470 --> 00:45:03.220
Finally, we have what's called
a RemoteInputIntent where

00:45:03.220 --> 00:45:05.820
you can actually start an
activity that brings up

00:45:05.820 --> 00:45:07.802
this RemoteInputIntent,
and it allows

00:45:07.802 --> 00:45:09.760
you to take advantage of
the speech recognition

00:45:09.760 --> 00:45:11.410
engine of Android Wear.

00:45:11.410 --> 00:45:13.910
So you can see there
it says Speak now,

00:45:13.910 --> 00:45:15.742
you can speak whatever
you want, it'll

00:45:15.742 --> 00:45:18.200
transcribe the text for it and
it will then return a string

00:45:18.200 --> 00:45:19.320
back to your app.

00:45:19.320 --> 00:45:22.660
Alternatively you and press
Draw emoji and you draw an emoji

00:45:22.660 --> 00:45:24.990
and it'll send you back the
emoji as a string as well.

00:45:24.990 --> 00:45:27.450
So you can actually use
emoji's and speech in your app

00:45:27.450 --> 00:45:29.820
without having to implement
all that stuff yourself.

00:45:29.820 --> 00:45:32.719
And Android Wear has a
really cool emoji recognizer

00:45:32.719 --> 00:45:35.010
that you can use, and you
don't have to write any of it

00:45:35.010 --> 00:45:36.930
yourself.

00:45:36.930 --> 00:45:38.240
So that's really nice.

00:45:38.240 --> 00:45:40.757
So that was a quick
rundown of some

00:45:40.757 --> 00:45:42.590
of the key features of
Android Wear that are

00:45:42.590 --> 00:45:44.674
very important to writing apps.

00:45:44.674 --> 00:45:46.090
So let's just
finish up by talking

00:45:46.090 --> 00:45:49.140
about Voice Actions, which
are key part of the platform.

00:45:49.140 --> 00:45:52.550
So as we mentioned
earlier, we have

00:45:52.550 --> 00:45:54.780
this concept at Android
Wear of OK Google

00:45:54.780 --> 00:45:57.660
take a note, book me a
ride, send a message, things

00:45:57.660 --> 00:45:58.550
like that.

00:45:58.550 --> 00:46:01.632
Those are system provided
actions that are task based,

00:46:01.632 --> 00:46:03.090
they're built into
the Android Wear

00:46:03.090 --> 00:46:05.569
platform and their specified
with an intent filter.

00:46:05.569 --> 00:46:07.610
And you can actually look
into those if you want.

00:46:07.610 --> 00:46:11.010
So if you have an app that
implements take a note,

00:46:11.010 --> 00:46:14.197
you can write an app
that takes notes.

00:46:14.197 --> 00:46:15.780
However, if you've
written an app that

00:46:15.780 --> 00:46:18.240
doesn't fit into any of the
existing tasks that are built

00:46:18.240 --> 00:46:20.590
into Android Wear,
you can also--

00:46:20.590 --> 00:46:23.380
the user can say OK Google,
start app name, where

00:46:23.380 --> 00:46:25.320
app name is the name
of your app as it's

00:46:25.320 --> 00:46:29.180
declared as a launcher icon
in the AndroidManifest XML.

00:46:29.180 --> 00:46:31.950
So you can see here,
you've got fitkeep

00:46:31.950 --> 00:46:35.740
and-- can't read the last
one-- WhatsApp or something.

00:46:35.740 --> 00:46:37.286
You can say, OK,
Google, start keep,

00:46:37.286 --> 00:46:38.410
and it'll bring the app up.

00:46:38.410 --> 00:46:41.819
So this is the way that your app
can always be launched easily.

00:46:41.819 --> 00:46:43.860
The user can use their
finger to launch your app,

00:46:43.860 --> 00:46:46.240
but they can also
speak it as well.

00:46:46.240 --> 00:46:48.510
And then finally, we have
the speech recognizer

00:46:48.510 --> 00:46:53.030
that we showed earlier, and
that was the RemoteInputIntent.

00:46:53.030 --> 00:46:54.472
You can use that as well.

00:46:54.472 --> 00:46:56.430
So those are sort of the
main ways you interact

00:46:56.430 --> 00:46:57.680
with Android Wear device.

00:46:57.680 --> 00:46:59.590
It's not just about
touching on the screen.

00:46:59.590 --> 00:47:02.700
It's about speech
recognition and not

00:47:02.700 --> 00:47:04.840
thinking about your
apps in terms of apps,

00:47:04.840 --> 00:47:07.470
but thinking about them in
terms of tasks that they solve.

00:47:07.470 --> 00:47:09.090
Users want to take notes.

00:47:09.090 --> 00:47:11.280
They don't want to
launch a note-taking app.

00:47:11.280 --> 00:47:14.010
And there's a different in
how you understand that.

00:47:14.010 --> 00:47:16.590
These are actually a list of
the actions that are currently

00:47:16.590 --> 00:47:17.640
in Android Wear, so
you can see there's

00:47:17.640 --> 00:47:19.889
a whole bunch of different
things that you can do here

00:47:19.889 --> 00:47:22.260
and those can change over time.

00:47:22.260 --> 00:47:23.360
So there you have it.

00:47:23.360 --> 00:47:27.570
So this is a summary
of the different things

00:47:27.570 --> 00:47:30.070
you can use to go about
creating Android Wear apps,

00:47:30.070 --> 00:47:31.610
and the different
things you can do.

00:47:31.610 --> 00:47:33.320
So we actually have
a code lab that's

00:47:33.320 --> 00:47:35.349
starting at 12:45
I believe, where

00:47:35.349 --> 00:47:37.390
the code lab is all about
creating your own watch

00:47:37.390 --> 00:47:38.410
face for Android Wear.

00:47:38.410 --> 00:47:40.536
So you can show up, we
have a starting sample,

00:47:40.536 --> 00:47:43.160
you can drag your own image in,
and you can create a watch face

00:47:43.160 --> 00:47:45.940
with a custom picture of your
dog or your cat or whatever.

00:47:45.940 --> 00:47:47.110
And it's a really
cool way of just sort

00:47:47.110 --> 00:47:48.570
of seeing how quickly
you can get started

00:47:48.570 --> 00:47:50.010
with Android Wear and emulator.

00:47:50.010 --> 00:47:51.676
And if you don't have
one you definitely

00:47:51.676 --> 00:47:53.030
need to go out and get one.

00:47:53.030 --> 00:47:56.200
They're really cool devices and
lots of apps on the Play Store

00:47:56.200 --> 00:47:59.030
now support them, and there's
a lot of functionality

00:47:59.030 --> 00:48:01.490
that's sort of interesting
for developers.

00:48:01.490 --> 00:48:04.070
And it's a great way of
differentiating your app.

00:48:04.070 --> 00:48:05.720
Because there's a
lot of apps out there

00:48:05.720 --> 00:48:08.030
that if you have a really great
Android Wear implementation,

00:48:08.030 --> 00:48:09.120
that might be the
thing that makes

00:48:09.120 --> 00:48:10.828
your app popular
amongst people and helps

00:48:10.828 --> 00:48:13.860
you to get a bit of a
foothold with more customers.

00:48:13.860 --> 00:48:16.970
So if you want to learn
more, we have a whole bunch

00:48:16.970 --> 00:48:20.171
of documentation on
developer.android.com/wear.

00:48:20.171 --> 00:48:22.045
We have design guidelines
on developer.androi

00:48:22.045 --> 00:48:25.410
d.com/design/wear where
we sort of talk about more

00:48:25.410 --> 00:48:27.840
of the design methodology and
how to make really beautiful

00:48:27.840 --> 00:48:29.260
apps.

00:48:29.260 --> 00:48:31.390
Google really cares
about design right now,

00:48:31.390 --> 00:48:34.282
and so it's really important
that you make nice apps that

00:48:34.282 --> 00:48:34.990
look really good.

00:48:34.990 --> 00:48:38.090
Don't just take old apps
and sort of squeeze them on

00:48:38.090 --> 00:48:39.162
to the wearable display.

00:48:39.162 --> 00:48:40.620
You'll really think
about the user,

00:48:40.620 --> 00:48:42.820
and do a really
nice job about it.

00:48:42.820 --> 00:48:45.740
So I post a whole bunch
of stuff on G+ constantly.

00:48:45.740 --> 00:48:48.680
So I'm one of the main developer
advocates for Android Wear,

00:48:48.680 --> 00:48:51.932
so every week or so I put out
tips and so forth about how

00:48:51.932 --> 00:48:53.890
to best take advantage
of the platforms, things

00:48:53.890 --> 00:48:55.720
I've discovered, new releases.

00:48:55.720 --> 00:48:58.450
So please find me on Google+ if
you're interested in learning

00:48:58.450 --> 00:49:00.050
more about the things that I do.

00:49:00.050 --> 00:49:01.910
And I said I talk about
Android Wear a lot,

00:49:01.910 --> 00:49:05.300
but we also took Android Auto
and Ubiquitous Computing.

00:49:05.300 --> 00:49:08.281
And also I will put my biscuits
and gravy recipe up on G+

00:49:08.281 --> 00:49:08.780
as well.

00:49:08.780 --> 00:49:10.380
So go check that out.

00:49:10.380 --> 00:49:13.075
So thanks very much for
coming and thanks a lot

00:49:13.075 --> 00:49:14.700
and I'm happy to talk
to you all later.

00:49:14.700 --> 00:49:15.200
Thank you.

00:49:20.369 --> 00:49:22.410
And I guess we've got a
few minutes for questions

00:49:22.410 --> 00:49:24.389
if anyone wants to ask anything.

00:49:24.389 --> 00:49:25.180
You got a question?

00:49:30.790 --> 00:49:32.470
AUDIENCE: Thank you.

00:49:32.470 --> 00:49:39.610
So I have question is when, when
we do action button on the Wear

00:49:39.610 --> 00:49:43.910
we slide and then you push
button on the quick view,

00:49:43.910 --> 00:49:49.410
but to send the data the signal
to the wearable alone or it

00:49:49.410 --> 00:49:52.720
will send the data
[INAUDIBLE] to the mobile app

00:49:52.720 --> 00:49:54.661
or it will be able
to do both anyhow?

00:49:54.661 --> 00:49:56.160
WAYNE PIEKARSKI:
So the question was

00:49:56.160 --> 00:49:58.970
is that when you press like
an action label or a button

00:49:58.970 --> 00:50:03.510
or something like that
will the press, which

00:50:03.510 --> 00:50:06.114
is will the press get
sent to the phone as well

00:50:06.114 --> 00:50:06.780
as the wearable.

00:50:06.780 --> 00:50:07.910
And the answer is no.

00:50:07.910 --> 00:50:11.760
So if the wearable created
these buttons and widgets,

00:50:11.760 --> 00:50:14.640
the callbacks or
whatever are only

00:50:14.640 --> 00:50:16.057
sent to the wearable itself.

00:50:16.057 --> 00:50:18.390
If you want the wearable to
send something to the phone,

00:50:18.390 --> 00:50:21.610
you to send a message or a data
item or something like that.

00:50:21.610 --> 00:50:23.640
Now, in the case
of notifications,

00:50:23.640 --> 00:50:26.360
if you create a
notification on the phone,

00:50:26.360 --> 00:50:28.300
the notification
appears on the wearable,

00:50:28.300 --> 00:50:31.430
if you click on to the actions,
that will get sent back

00:50:31.430 --> 00:50:32.490
to the phone.

00:50:32.490 --> 00:50:35.010
So that's only done in the
case of a notification,

00:50:35.010 --> 00:50:37.430
and it's only done in the
case of if the notification is

00:50:37.430 --> 00:50:39.050
created on the phone.

00:50:39.050 --> 00:50:42.140
It's actually possible to create
notifications on the wearable,

00:50:42.140 --> 00:50:44.490
those are not sent
back to the phone.

00:50:44.490 --> 00:50:47.635
So yeah typically,
the wearable never

00:50:47.635 --> 00:50:50.390
sends anything back,
except for notification

00:50:50.390 --> 00:50:51.536
created on the phone

00:50:51.536 --> 00:50:54.780
AUDIENCE: And is there any
way we make it to send back

00:50:54.780 --> 00:50:55.720
or it's just--

00:50:55.720 --> 00:50:57.590
WAYNE PIEKARSKI: You have to
write that mechanism yourself.

00:50:57.590 --> 00:50:59.173
So if you want to
send something back,

00:50:59.173 --> 00:51:01.280
you do a data item or
a message or a channel

00:51:01.280 --> 00:51:03.510
and then you can send
it back that way.

00:51:03.510 --> 00:51:05.186
Next question

00:51:05.186 --> 00:51:09.110
AUDIENCE: One question, when we
use the message API or the data

00:51:09.110 --> 00:51:14.280
API, for devices that
support Wi-Fi they connect

00:51:14.280 --> 00:51:15.950
through the Cloud right?

00:51:15.950 --> 00:51:19.010
Is there any way to
prevent that behavior?

00:51:19.010 --> 00:51:23.970
Like if we only want to send
messages or data items, only

00:51:23.970 --> 00:51:26.610
if they are connected
through Bluetooth,

00:51:26.610 --> 00:51:29.740
to avoid sending
data to the Cloud.

00:51:29.740 --> 00:51:32.050
Like I mean for a big
companies important to have

00:51:32.050 --> 00:51:37.321
your data like secure right,
and we don't want to send data--

00:51:37.321 --> 00:51:41.530
WAYNE PIEKARSKI: I mean
there's a-- in the node API,

00:51:41.530 --> 00:51:42.972
there's something
you can, there's

00:51:42.972 --> 00:51:44.680
a method-- can't
remember the name of it.

00:51:44.680 --> 00:51:47.820
But it basically is
local or something.

00:51:47.820 --> 00:51:49.820
So you can ask for
a list of devices,

00:51:49.820 --> 00:51:51.340
and then you can,
for each device,

00:51:51.340 --> 00:51:54.490
you can say is it local or not,
and that then would tell you

00:51:54.490 --> 00:51:56.470
if it's connected
via local pairing,

00:51:56.470 --> 00:51:59.240
or if it's still available but
it's connected by the Cloud

00:51:59.240 --> 00:52:00.030
somehow.

00:52:00.030 --> 00:52:02.430
So that could be a way that
you could avoid sending it

00:52:02.430 --> 00:52:03.720
through the cloud like that.

00:52:03.720 --> 00:52:07.820
But I mean, I guess
there's a possibility

00:52:07.820 --> 00:52:10.490
that it could switch from
Bluetooth so Wi-Fi mode

00:52:10.490 --> 00:52:12.240
and you could send
a message just

00:52:12.240 --> 00:52:14.200
as it's making the
transition so there's

00:52:14.200 --> 00:52:16.050
no way to mark a
message as do not ever

00:52:16.050 --> 00:52:18.320
send this to the Cloud.

00:52:18.320 --> 00:52:20.760
The same time though messages
in the Cloud are not stored,

00:52:20.760 --> 00:52:22.115
they're just sent--

00:52:22.115 --> 00:52:24.700
AUDIENCE: I'm worried
about the data API,

00:52:24.700 --> 00:52:28.860
because data API, normally you
push things into the network

00:52:28.860 --> 00:52:31.720
and then it gets synced
across all the clients.

00:52:31.720 --> 00:52:35.070
But because the Cloud knows
it's part of that network,

00:52:35.070 --> 00:52:38.990
there is no way to prevent
that data to actually go

00:52:38.990 --> 00:52:42.340
to the Cloud, but you still
want that syncing behavior,

00:52:42.340 --> 00:52:43.900
but only if they are connected.

00:52:43.900 --> 00:52:45.972
WAYNE PIEKARSKI: In
the case of data items,

00:52:45.972 --> 00:52:48.180
the thing is when you create
data items, synchronized

00:52:48.180 --> 00:52:50.430
all devices automatically,
I don't think there's a way

00:52:50.430 --> 00:52:52.634
to prevent that from happening.

00:52:52.634 --> 00:52:54.050
If it was really
important to you,

00:52:54.050 --> 00:52:56.932
I guess you could encrypt it.

00:52:56.932 --> 00:52:58.890
You'd have to do something
about that yourself,

00:52:58.890 --> 00:53:00.684
there's nothing to support that.

00:53:00.684 --> 00:53:01.860
Any other questions?

00:53:01.860 --> 00:53:03.650
Yeah-- Do you want
to grab the mic?

00:53:07.522 --> 00:53:10.546
AUDIENCE: So I have an LG
Urbane watch [INAUDIBLE].

00:53:10.546 --> 00:53:11.670
WAYNE PIEKARSKI: I'm sorry.

00:53:11.670 --> 00:53:13.510
AUDIENCE: I have
an LG Urbane watch.

00:53:13.510 --> 00:53:16.700
So that has like a standalone
Wi-Fi in that watch.

00:53:16.700 --> 00:53:18.930
So whenever I make
a headphone request

00:53:18.930 --> 00:53:21.180
when it is not connected
to my phone via Bluetooth,

00:53:21.180 --> 00:53:22.410
it works fine.

00:53:22.410 --> 00:53:25.300
But when it is connected
to my phone via Bluetooth,

00:53:25.300 --> 00:53:27.432
the Wi-Fi is
automatically disabled.

00:53:27.432 --> 00:53:29.890
So basically I cannot make a
network call if it's connected

00:53:29.890 --> 00:53:31.760
to Bluetooth via
Wi-Fi [INAUDIBLE].

00:53:31.760 --> 00:53:32.720
WAYNE PIEKARSKI: You
can't make a call?

00:53:32.720 --> 00:53:33.030
What?

00:53:33.030 --> 00:53:34.095
AUDIENCE: Like network call.

00:53:34.095 --> 00:53:35.470
WAYNE PIEKARSKI: A network call.

00:53:35.470 --> 00:53:36.770
AUDIENCE: Like via Wi-Fi.

00:53:36.770 --> 00:53:38.620
WAYNE PIEKARSKI: OK I mean
the thing is, the Wi-Fi--

00:53:38.620 --> 00:53:39.720
AUDIENCE: Is it specifically
designed like that?

00:53:39.720 --> 00:53:40.860
Or like, what's the
use case for that?

00:53:40.860 --> 00:53:42.990
WAYNE PIEKARSKI: Yeah so
the Wi-Fi feature is, it

00:53:42.990 --> 00:53:44.760
uses more power than Bluetooth.

00:53:44.760 --> 00:53:47.410
So we want to keep
Wi-Fi off when possible.

00:53:47.410 --> 00:53:49.160
So if everything's
working over Bluetooth,

00:53:49.160 --> 00:53:50.697
we will send things
over Bluetooth.

00:53:50.697 --> 00:53:52.530
Now I think what you're
asking is, is you've

00:53:52.530 --> 00:53:54.010
got an app that's running
on your watch that's

00:53:54.010 --> 00:53:55.321
trying to make HTTP requests.

00:53:55.321 --> 00:53:56.070
AUDIENCE: Exactly.

00:53:56.070 --> 00:53:56.986
WAYNE PIEKARSKI: Yeah.

00:53:56.986 --> 00:53:59.950
So you're not
supposed to do that.

00:53:59.950 --> 00:54:04.970
So if you want to do network
requests from the watch,

00:54:04.970 --> 00:54:07.110
you're relying on
behavior that's not really

00:54:07.110 --> 00:54:10.800
supposed to be used, so what
are you trying to request.

00:54:10.800 --> 00:54:13.680
AUDIENCE: I was trying to
develop some feature actually.

00:54:13.680 --> 00:54:15.220
I was trying to Wi-Fi--

00:54:15.220 --> 00:54:16.860
WAYNE PIEKARSKI: Yeah
it kind of works,

00:54:16.860 --> 00:54:18.780
the problem is you can't
keep the Wi-Fi feature on.

00:54:18.780 --> 00:54:20.030
You don't get to control that.

00:54:20.030 --> 00:54:22.736
So if Bluetooth is available,
it'll switch to Bluetooth.

00:54:22.736 --> 00:54:25.110
So the correct way to deal
with what you're trying to do,

00:54:25.110 --> 00:54:27.680
is if you really want to make
an arbitrary HTTP request.

00:54:27.680 --> 00:54:29.180
So if you want to
check the weather,

00:54:29.180 --> 00:54:32.760
send a message to the phone,
the phone gets the weather,

00:54:32.760 --> 00:54:35.034
and then you pause the
HTML, you extract out

00:54:35.034 --> 00:54:37.200
the temperature information,
send it as a data item.

00:54:37.200 --> 00:54:38.360
AUDIENCE: So all the
network operation

00:54:38.360 --> 00:54:40.180
should be done
within the phone app

00:54:40.180 --> 00:54:43.110
and the data should be passed to
either the data API or message

00:54:43.110 --> 00:54:43.610
API.

00:54:43.610 --> 00:54:45.318
WAYNE PIEKARSKI: Yeah
and that will work.

00:54:45.318 --> 00:54:47.140
Now if you really
wanted to get dirty,

00:54:47.140 --> 00:54:50.470
say the dirty solution
is you send a data

00:54:50.470 --> 00:54:54.867
item to the phone that says
HTTP://weather.com blah, blah,

00:54:54.867 --> 00:54:55.550
blah.

00:54:55.550 --> 00:54:59.592
And then the reply is the entire
HTTP response as a string,

00:54:59.592 --> 00:55:01.300
and then the wearable
could do all of it.

00:55:01.300 --> 00:55:04.430
So you can write yourself a
really cheapy little proxy

00:55:04.430 --> 00:55:06.570
over data items that
go back and forth.

00:55:06.570 --> 00:55:08.840
Or you could use a channel
API, but you're really not

00:55:08.840 --> 00:55:09.923
supposed to be doing that.

00:55:09.923 --> 00:55:11.660
You're going to
be doing it wrong

00:55:11.660 --> 00:55:13.610
and you're going to be
wasting a lot of power.

00:55:13.610 --> 00:55:16.490
So that's the
solution if you really

00:55:16.490 --> 00:55:18.180
wanted to be lazy about it.

00:55:18.180 --> 00:55:21.390
But the best solution is,
get the phone to do the work

00:55:21.390 --> 00:55:23.640
and strip the data down
into its simplest form,

00:55:23.640 --> 00:55:26.990
and then send it
back to the wearable.

00:55:26.990 --> 00:55:30.000
OK, I think we're out of time
so we do have a code lab,

00:55:30.000 --> 00:55:30.750
remember at 12:45.

00:55:30.750 --> 00:55:32.800
And actually my
colleague Michael Kwan,

00:55:32.800 --> 00:55:35.346
he's giving a talk
at 12:00, I think?

00:55:35.346 --> 00:55:36.720
He's giving a
talk, he's actually

00:55:36.720 --> 00:55:38.366
one of the engineers
on Android Wear.

00:55:38.366 --> 00:55:40.115
He did a lot of work
on power optimization

00:55:40.115 --> 00:55:42.466
and looking for bugs, and
he's a fantastic engineer,

00:55:42.466 --> 00:55:44.840
so you definitely, if you are
interested in Android Wear,

00:55:44.840 --> 00:55:46.970
you definitely hear
Michael's talk as well.

00:55:46.970 --> 00:55:50.070
Otherwise I'll be around a 12:45
at the code lab room talking

00:55:50.070 --> 00:55:51.381
about Android Wear watch faces.

00:55:51.381 --> 00:55:53.880
Feel free to come and talk to
us then or during the barbecue

00:55:53.880 --> 00:55:56.005
afterwards and thanks a
lot and I'll see you later.

00:55:56.005 --> 00:55:57.370
Thanks.

