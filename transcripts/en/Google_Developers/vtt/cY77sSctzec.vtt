WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.734
 

00:00:00.734 --> 00:00:02.400
MALE SPEAKER: OK so
here's the wireframe

00:00:02.400 --> 00:00:04.670
for the authentication flow,
which is really simple.

00:00:04.670 --> 00:00:06.628
They just put in their
username or their email.

00:00:06.628 --> 00:00:09.230
They need a strong password
to protect their data.

00:00:09.230 --> 00:00:11.490
They have capital letters,
numbers, punctuation--

00:00:11.490 --> 00:00:14.669
basic stuff-- minimum length
of password, no usernames,

00:00:14.669 --> 00:00:15.710
can't have them the same.

00:00:15.710 --> 00:00:16.793
They have no common words.

00:00:16.793 --> 00:00:19.260
If they get it wrong, a big
red X. They get it right,

00:00:19.260 --> 00:00:20.480
they get a nice green
check right there,

00:00:20.480 --> 00:00:21.400
and then they login.

00:00:21.400 --> 00:00:23.190
Simple.

00:00:23.190 --> 00:00:25.707
MALE SPEAKER 2: Why
don't we use Smart Lock?

00:00:25.707 --> 00:00:29.200
[MUSIC]

00:00:29.200 --> 00:00:35.700
 

00:00:35.700 --> 00:00:37.410
Hi, I'm Eiji.

00:00:37.410 --> 00:00:39.770
Let me show you
what is Smart Lock.

00:00:39.770 --> 00:00:42.470
Smart Lock makes
authenticating into devices,

00:00:42.470 --> 00:00:47.040
websites, and apps easier,
faster, and more secure.

00:00:47.040 --> 00:00:49.900
Among other Smart Lock features,
Smart Lock for Passwords

00:00:49.900 --> 00:00:52.750
unlock your websites
and apps using passwords

00:00:52.750 --> 00:00:55.420
stored in the cloud when
Chrome or Android is signed

00:00:55.420 --> 00:00:57.800
in with a Google account.

00:00:57.800 --> 00:01:01.460
Let's have a closer
look at how it works.

00:01:01.460 --> 00:01:03.240
Let's say you operate
a website that

00:01:03.240 --> 00:01:07.690
uses usernames and passwords
to authenticate users.

00:01:07.690 --> 00:01:10.630
Once a user is signed in
to your website on Chrome,

00:01:10.630 --> 00:01:13.470
Smart Lock can save the
credentials for your user

00:01:13.470 --> 00:01:16.560
so they don't need to remember
the password next time they

00:01:16.560 --> 00:01:19.010
visit your site using Chrome.

00:01:19.010 --> 00:01:21.560
And because Smart Lock
syncs to the cloud,

00:01:21.560 --> 00:01:23.670
the user's credentials
to your site

00:01:23.670 --> 00:01:26.500
are available on other devices.

00:01:26.500 --> 00:01:28.690
It's worked this way
across devices in Chrome

00:01:28.690 --> 00:01:29.830
for some time.

00:01:29.830 --> 00:01:31.560
But today [INAUDIBLE]
the credentials

00:01:31.560 --> 00:01:36.130
are also available to the apps
on the users' Android devices.

00:01:36.130 --> 00:01:37.860
This means that
Smart Lock enabled

00:01:37.860 --> 00:01:41.890
apps can now retrieve the user's
safety credential information

00:01:41.890 --> 00:01:44.970
and automatically
sign in the user.

00:01:44.970 --> 00:01:46.920
This also works in reverse.

00:01:46.920 --> 00:01:50.030
If a user starts with
authenticating on your Android

00:01:50.030 --> 00:01:53.590
app, your website can also
retrieve the user's credential

00:01:53.590 --> 00:01:55.480
information.

00:01:55.480 --> 00:01:57.550
Let's take a closer
look how you can

00:01:57.550 --> 00:02:02.150
enable Smart Lock for
Passwords on your Android app.

00:02:02.150 --> 00:02:04.070
Before you start
coding, make sure you

00:02:04.070 --> 00:02:07.730
have added Google Play
services revision 23 or later

00:02:07.730 --> 00:02:09.430
as a dependency.

00:02:09.430 --> 00:02:11.470
The first thing you
should do is to retrieve

00:02:11.470 --> 00:02:12.654
the user's password.

00:02:12.654 --> 00:02:14.820
In order to do that, call
AuthCredentialsAPIRequest.

00:02:14.820 --> 00:02:19.130
 

00:02:19.130 --> 00:02:21.750
By instantiating a
credential request and call

00:02:21.750 --> 00:02:25.690
setSupportPasswordLogin, you
can create username and password

00:02:25.690 --> 00:02:28.170
required to authenticate a user.

00:02:28.170 --> 00:02:30.600
Note that by calling
setAccountTypes,

00:02:30.600 --> 00:02:34.650
you can query [? predicted ?]
logins as well.

00:02:34.650 --> 00:02:37.500
The result will be written as
a callback with a Credential

00:02:37.500 --> 00:02:40.590
Request Result as the argument.

00:02:40.590 --> 00:02:44.300
By calling getStatus()
you can get its status.

00:02:44.300 --> 00:02:46.190
If the status
indicates success, that

00:02:46.190 --> 00:02:48.260
means there's only one
credential information

00:02:48.260 --> 00:02:50.720
associated with
the Google account.

00:02:50.720 --> 00:02:52.790
In that case, call
get Credential

00:02:52.790 --> 00:02:54.950
to obtain actual
credential information

00:02:54.950 --> 00:02:57.620
and proceed with
signing in the user.

00:02:57.620 --> 00:03:00.800
Otherwise let the user manually
sign in and save the credential

00:03:00.800 --> 00:03:01.300
information.

00:03:01.300 --> 00:03:04.420
 

00:03:04.420 --> 00:03:06.420
In order to save the
credential information,

00:03:06.420 --> 00:03:07.753
call Auth.CredentialsApi.save().

00:03:07.753 --> 00:03:09.860
 

00:03:09.860 --> 00:03:13.230
Save the credential information
can be created by instantiating

00:03:13.230 --> 00:03:17.350
a Credential object, then
calling setPassword(...).

00:03:17.350 --> 00:03:19.980
If you're running a web
version of the same app,

00:03:19.980 --> 00:03:23.560
make sure to link the
domain to your app.

00:03:23.560 --> 00:03:25.560
In order to do that,
verify the domain

00:03:25.560 --> 00:03:26.950
using Google Search Console.

00:03:26.950 --> 00:03:30.120
Then link your app to the domain
using Google Play Developer

00:03:30.120 --> 00:03:32.350
Console.

00:03:32.350 --> 00:03:34.660
Smart Lock for passwords
removes friction

00:03:34.660 --> 00:03:36.820
from your existing
authentication system

00:03:36.820 --> 00:03:40.770
by automatically signing
in users across devices.

00:03:40.770 --> 00:03:43.260
Once your user saves a
password to Smart Lock,

00:03:43.260 --> 00:03:45.150
they can skip entering
their credentials

00:03:45.150 --> 00:03:48.910
to access your app or site on
all of their Chrome and Android

00:03:48.910 --> 00:03:50.370
devices.

00:03:50.370 --> 00:03:52.120
We are working on Smart
Lock for Passwords

00:03:52.120 --> 00:03:54.930
APIs on other platforms, too.

00:03:54.930 --> 00:03:58.860
To keep updated and learn more
about Smart Lock for Passwords,

00:03:58.860 --> 00:04:01.490
head over to this document.

00:04:01.490 --> 00:04:02.980
I'm looking forward
to seeing you

00:04:02.980 --> 00:04:06.180
develop apps that are
personalized, yet low friction.

00:04:06.180 --> 00:04:09.290
 

00:04:09.290 --> 00:04:11.771
[ERASING]

00:04:11.771 --> 00:04:25.000
 

00:04:25.000 --> 00:04:26.330
MALE SPEAKER 2: Simple!

00:04:26.330 --> 00:04:29.680
[MUSIC]

00:04:29.680 --> 00:04:41.100
 

