WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:03.000
Now, we'll talk about a much
more efficient approach called

00:00:03.000 --> 00:00:04.750
the simplex algorithm.

00:00:04.750 --> 00:00:07.900
This actually will not be
polynomial time in the worst case.

00:00:07.900 --> 00:00:09.100
But as a practical matter,

00:00:09.100 --> 00:00:11.210
this algorithm is efficient
enough to be widely used.

00:00:12.220 --> 00:00:15.920
The simplex algorithm allows us to
move from one basic feasible solution

00:00:15.920 --> 00:00:17.120
to a better one.

00:00:17.120 --> 00:00:18.120
And by moving to better and

00:00:18.120 --> 00:00:20.990
better basic feasible solutions,
we eventually reach the optimum.

00:00:22.690 --> 00:00:23.810
For convenience,

00:00:23.810 --> 00:00:28.560
let's suppose that our current basis
consists of the first m columns of A.

00:00:28.560 --> 00:00:33.286
We'll call this sub-matrix B and
the remaining sub-matrix D.

00:00:33.286 --> 00:00:39.699
It will also be convenient to partition
X and C in an analogous fashion.

00:00:39.699 --> 00:00:45.370
Over all then, we can write our
standard form linear program like so.

00:00:45.370 --> 00:00:51.340
CB transposed times XB +
CD transposed times XD

00:00:51.340 --> 00:00:59.970
subject to the constraints that B times
XB + D times XD must be equal to B.

00:01:01.060 --> 00:01:06.080
And, of course, both XB and
XD must be non-negative.

00:01:06.080 --> 00:01:09.800
For the simplex algorithm we want to
consider the effects of swapping out

00:01:09.800 --> 00:01:13.290
one of the current basis columns for
another one.

00:01:13.290 --> 00:01:16.380
To do this we first want to
identify a good candidate for

00:01:16.380 --> 00:01:18.340
moving into the basis.

00:01:18.340 --> 00:01:21.200
One that will improve
the objective function.

00:01:21.200 --> 00:01:22.550
As the program stands however,

00:01:22.550 --> 00:01:26.600
it's not immediately clear which
if any are good candidates.

00:01:26.600 --> 00:01:30.470
Sure for some XI in XD here,

00:01:30.470 --> 00:01:33.650
the corresponding coefficient
might be positive.

00:01:33.650 --> 00:01:36.350
But raising the value
of that variable might

00:01:36.350 --> 00:01:39.500
force others to change
because of the constraints.

00:01:39.500 --> 00:01:42.050
Making the whole picture rather opaque.

00:01:42.050 --> 00:01:45.970
Therefore, it would be convenient to
parametrize our ability to move around

00:01:45.970 --> 00:01:48.850
in the flat defined
by these constraints,

00:01:48.850 --> 00:01:52.000
solely in terms of the variables in XD,

00:01:52.000 --> 00:01:55.170
the variables that we're thinking
about moving into the basis.

00:01:55.170 --> 00:01:57.430
By the way, I'll use the idea
of moving variables and

00:01:57.430 --> 00:02:01.700
moving columns into the basis
interchangeably throughout.

00:02:01.700 --> 00:02:06.390
To this end, we solve the equality
constraint for XB, so

00:02:06.390 --> 00:02:09.699
that we can substitute for
it where desired.

00:02:09.699 --> 00:02:13.330
First, we substitute it into
the objective function, and

00:02:13.330 --> 00:02:16.590
through a little manipulation,
we get this expression.

00:02:16.590 --> 00:02:20.510
This constant term here doesn't matter
since we're only considering the effects

00:02:20.510 --> 00:02:22.240
of changing XD.

00:02:22.240 --> 00:02:25.290
This quantity that gets
multiplied with XD however,

00:02:25.290 --> 00:02:27.900
is important enough that
it deserves its own name.

00:02:27.900 --> 00:02:29.640
We'll call it rD.

00:02:29.640 --> 00:02:32.989
In our reframing of
the problem therefore,

00:02:32.989 --> 00:02:36.258
we want to maximize rD
transpose times XD.

00:02:36.258 --> 00:02:38.020
How about the other constraints?

00:02:38.020 --> 00:02:40.700
Well, the first one goes
away with the substitution.

00:02:40.700 --> 00:02:45.120
This requirement however,
that XB be non-negative, remains.

00:02:45.120 --> 00:02:50.640
Substituting our equation for XB,
we get the constraint shown here.

00:02:50.640 --> 00:02:53.910
Of course,
XD must remain non-negative, as well.

00:02:53.910 --> 00:02:55.440
Note that XD equals 0.

00:02:55.440 --> 00:03:00.890
The current situation for
the algorithm is feasible, and it's easy

00:03:00.890 --> 00:03:07.080
to see a way to improve the objective
value just by looking at the vector rD.

00:03:07.080 --> 00:03:10.310
Our real goal, however,
is not just to climb up hill, but

00:03:10.310 --> 00:03:13.290
to figure out which column
should enter the basis.

