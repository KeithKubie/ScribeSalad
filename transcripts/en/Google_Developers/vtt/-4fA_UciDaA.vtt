WEBVTT
Kind: captions
Language: en

00:00:01.133 --> 00:00:03.167
Fowler: Hope you've had
a fun time fiddling

00:00:03.167 --> 00:00:05.968
with your new phones.

00:00:05.968 --> 00:00:09.601
I'm Martin Fowler.
This is Rebecca Parsons.

00:00:09.601 --> 00:00:14.400
We both--we'll be talking about
some of our experiences

00:00:14.400 --> 00:00:17.534
and thoughts for the future
about Google's App Engine,

00:00:17.534 --> 00:00:19.734
particularly
the new App Engine for Java,

00:00:19.734 --> 00:00:22.267
which several
of our colleagues were able

00:00:22.267 --> 00:00:26.367
to spend some time experimenting
with earlier this year

00:00:26.367 --> 00:00:30.501
and get some preliminary
thoughts about.

00:00:30.501 --> 00:00:33.167
To begin with, I think
we'll talk a little bit about

00:00:33.167 --> 00:00:36.834
who ThoughtWorks is
just in case you don't know.

00:00:36.834 --> 00:00:40.033
We are a company
that builds applications

00:00:40.033 --> 00:00:41.634
for people, primarily.

00:00:41.634 --> 00:00:44.567
We're about 1,000 or so people
scattered around the world.

00:00:44.567 --> 00:00:47.067
And we do a variety
of different kinds

00:00:47.067 --> 00:00:48.634
of applications.

00:00:48.634 --> 00:00:54.200
Some are internalish style
I.T. applications,

00:00:54.200 --> 00:00:56.868
such as one we worked on
for Caterpillar.

00:00:56.868 --> 00:00:59.868
We do some very public
web-fronted applications

00:00:59.868 --> 00:01:01.634
such as &lt;i&gt;Guardian&lt;/i&gt; online,

00:01:01.634 --> 00:01:04.334
which is a well-known
English language newspaper

00:01:04.334 --> 00:01:05.868
and media source.

00:01:05.868 --> 00:01:08.100
We build products
for other people.

00:01:08.100 --> 00:01:12.901
So Insurecom example
is a case where we built

00:01:12.901 --> 00:01:16.167
a product for a company
that then sold it

00:01:16.167 --> 00:01:18.133
on to its customers
which are insurance brokers.

00:01:18.133 --> 00:01:20.734
And we do some products
of our own kind.

00:01:20.734 --> 00:01:22.067
So example of that is Mingle,

00:01:22.067 --> 00:01:25.067
which is a project collaboration
and management tool.

00:01:25.067 --> 00:01:29.133
We use a range of different
platforms and languages.

00:01:29.133 --> 00:01:31.501
I would say
the vast majority of our work

00:01:31.501 --> 00:01:33.300
is either Java or .net.

00:01:33.300 --> 00:01:35.934
Probably slightly
majority .net at the moment.

00:01:35.934 --> 00:01:38.901
But there's a significant
amount of Ruby that we do.

00:01:38.901 --> 00:01:43.067
And we also do smatterings
of little environments as well.

00:01:43.067 --> 00:01:45.033
We like to play with lots
of different things.

00:01:45.033 --> 00:01:49.667
And our projects can be
for all about one or two people

00:01:49.667 --> 00:01:51.767
up to a couple of hundred's
probably our biggest

00:01:51.767 --> 00:01:53.267
at the moment.

00:01:53.267 --> 00:01:55.367
So we have quite a range
of different kinds of projects

00:01:55.367 --> 00:01:56.601
that we do.

00:01:56.601 --> 00:02:01.968
And quite a range of stuff
that we work with.

00:02:01.968 --> 00:02:04.300
For the first part
of the talk,

00:02:04.300 --> 00:02:05.934
I'm going to primarily
lead off

00:02:05.934 --> 00:02:08.234
and talk about some
of the experiments that we did

00:02:08.234 --> 00:02:10.267
with Google App Engine.

00:02:10.267 --> 00:02:13.000
We were in that kind of early,

00:02:13.000 --> 00:02:16.100
see-it-before-it's-released
phase

00:02:16.100 --> 00:02:18.200
and were able to get some people
to work with it.

00:02:18.200 --> 00:02:20.734
And then Rebecca
is gonna concentrate

00:02:20.734 --> 00:02:24.067
on talking about
some of our broader thoughts

00:02:24.067 --> 00:02:25.868
about the cloud.

00:02:25.868 --> 00:02:29.234
But we'll be interrupting
each other as we go.

00:02:29.234 --> 00:02:31.734
Parsons: Of course.

00:02:31.734 --> 00:02:33.300
Fowler: So we'll begin
with the experiments.

00:02:33.300 --> 00:02:35.267
And essentially what we did
with the experiments

00:02:35.267 --> 00:02:38.968
is we launched a bunch
of people out

00:02:38.968 --> 00:02:41.400
to say
here's Google App Engine,

00:02:41.400 --> 00:02:43.834
you've got a few days,
perhaps in between projects

00:02:43.834 --> 00:02:45.767
or we managed to allocate
some time,

00:02:45.767 --> 00:02:48.267
experiment with
some interesting stuff

00:02:48.267 --> 00:02:51.267
and tell us your conclusions.

00:02:51.267 --> 00:02:53.667
In fact, if you hunt around
on the ThoughtWorks blogs

00:02:53.667 --> 00:02:56.000
you can find a lot
of this kind of information.

00:02:56.000 --> 00:02:58.534
So a couple of people decided
they wanted to play around

00:02:58.534 --> 00:03:01.133
with the Clojure programming
language

00:03:01.133 --> 00:03:02.801
which is built on top
of Java.

00:03:02.801 --> 00:03:06.200
Another guy, Ola Bini,
played around with JRuby.

00:03:06.200 --> 00:03:08.300
Ola's one of the main committers
to JRuby,

00:03:08.300 --> 00:03:10.834
so he's a perfect person
to do this.

00:03:10.834 --> 00:03:12.834
And one of our folks
in India decided

00:03:12.834 --> 00:03:16.267
to work a little bit
with the GWT and JDO

00:03:16.267 --> 00:03:19.634
in a more straightforward
use of the Google App Engine.

00:03:19.634 --> 00:03:22.701
And Paul Hammant
decided as usual

00:03:22.701 --> 00:03:25.400
to do some really freaky stuff
involving Rich Clients.

00:03:25.400 --> 00:03:27.801
His aim is to try
and get rid of Flash

00:03:27.801 --> 00:03:30.667
and all this proprietary
Rich Client stuff

00:03:30.667 --> 00:03:33.868
and instead have source
downloaded through...

00:03:33.868 --> 00:03:37.400
in his case, using pieces
of either JavaScript

00:03:37.400 --> 00:03:40.033
or his particular preference,
using Ruby

00:03:40.033 --> 00:03:42.367
to execute
on the client's side.

00:03:42.367 --> 00:03:44.434
So we had a bunch of different
interesting things

00:03:44.434 --> 00:03:45.601
to work with.

00:03:45.601 --> 00:03:49.100
I believe Paul is doing
something in the, um...

00:03:49.100 --> 00:03:50.767
Parsons: Sandbox.
Fowler: Sandbox tomorrow.

00:03:50.767 --> 00:03:54.501
So certainly
take a look at that.

00:03:54.501 --> 00:03:58.868
So all of this stuff
really is based on the idea

00:03:58.868 --> 00:04:01.067
that, well, we have a cloud

00:04:01.067 --> 00:04:04.300
and we have on that cloud
Java.

00:04:04.300 --> 00:04:06.501
But from perhaps what a couple
of those experiments

00:04:06.501 --> 00:04:10.367
might've indicated,
it's actually not really Java

00:04:10.367 --> 00:04:12.534
that's on the cloud.

00:04:12.534 --> 00:04:15.701
It's much more the JVM itself.

00:04:15.701 --> 00:04:18.133
And one of the consequences
of the fact

00:04:18.133 --> 00:04:20.501
that you've got
the JVM on the cloud

00:04:20.501 --> 00:04:23.000
is that
you've got this ability

00:04:23.000 --> 00:04:25.901
to bring out
alternative languages.

00:04:25.901 --> 00:04:27.667
And that was clearly,
as you see,

00:04:27.667 --> 00:04:29.133
a part of some
of the experiments we do.

00:04:29.133 --> 00:04:30.834
Clojure and JRuby--

00:04:30.834 --> 00:04:33.033
But there's a lot of other,
of course, interesting languages

00:04:33.033 --> 00:04:36.033
that have been built
on the JVM recently,

00:04:36.033 --> 00:04:38.901
all of which are potentially
capable of running

00:04:38.901 --> 00:04:41.133
on the Google App Engine
for Java.

00:04:41.133 --> 00:04:43.501
Why is this interesting
to us?

00:04:43.501 --> 00:04:46.267
Well, I mentioned earlier on

00:04:46.267 --> 00:04:49.501
that we have got a significant
proportion of projects

00:04:49.501 --> 00:04:52.534
that we've done in Ruby
over the last few years--

00:04:52.534 --> 00:04:55.734
40-odd projects
that we've done in Ruby.

00:04:55.734 --> 00:04:58.300
And one of the things
that I did recently

00:04:58.300 --> 00:05:01.167
as the basis for a talk that
I gave at another conference

00:05:01.167 --> 00:05:02.901
was ask the question
of the people

00:05:02.901 --> 00:05:04.934
who worked on those projects

00:05:04.934 --> 00:05:07.000
which was really
about productivity.

00:05:07.000 --> 00:05:09.534
Is it more productive
to use Ruby

00:05:09.534 --> 00:05:14.367
than a more mainstream Java
or C#-style stack?

00:05:14.367 --> 00:05:17.334
And we're talking here
about Java

00:05:17.334 --> 00:05:19.434
or C# used intelligently,

00:05:19.434 --> 00:05:22.400
that is, not with
lots of EJBs or BizTalk

00:05:22.400 --> 00:05:25.701
or other productivity
destroyers.

00:05:25.701 --> 00:05:29.234
And the answer,
in a broad sense,

00:05:29.234 --> 00:05:31.067
was what you see here.

00:05:31.067 --> 00:05:33.400
The--in fact...

00:05:33.400 --> 00:05:36.834
I can boil down this answer,
in fact, to this pie

00:05:36.834 --> 00:05:39.801
which basically says
that a significant percentage

00:05:39.801 --> 00:05:41.767
of the people felt
that they were at least

00:05:41.767 --> 00:05:46.267
50% more productive working
in Ruby than they were in Java.

00:05:46.267 --> 00:05:50.234
And that's a significant piece
of information.

00:05:50.234 --> 00:05:53.701
And that's also a piece
of information

00:05:53.701 --> 00:05:56.501
that leads into some of these
other languages as well.

00:05:56.501 --> 00:06:00.067
But there are some important
productivity benefits

00:06:00.067 --> 00:06:02.767
about using some
of these languages

00:06:02.767 --> 00:06:04.701
that are built
on top of a JVM

00:06:04.701 --> 00:06:07.267
but not
being Java themselves.

00:06:07.267 --> 00:06:10.434
And that's why
we're interested in the fact

00:06:10.434 --> 00:06:12.868
that it's the JVM
that's on the cloud

00:06:12.868 --> 00:06:15.934
rather than just Java
on the cloud.

00:06:15.934 --> 00:06:19.434
Now having said this,
let's be honest about this.

00:06:19.434 --> 00:06:21.000
Most of the time,

00:06:21.000 --> 00:06:23.767
people who are gonna be using
Google App Engine for Java

00:06:23.767 --> 00:06:25.434
are gonna be using Java.

00:06:25.434 --> 00:06:27.801
The vast majority
I would expect

00:06:27.801 --> 00:06:30.200
would be cases of people
using Java.

00:06:30.200 --> 00:06:32.000
But it's worth
bearing in mind

00:06:32.000 --> 00:06:33.667
those other languages
simply because

00:06:33.667 --> 00:06:38.267
of the potential productivity
gains they can provide.

00:06:38.267 --> 00:06:40.300
Parsons: Particularly since
many of those languages

00:06:40.300 --> 00:06:42.667
are designed for
a particular purpose.

00:06:42.667 --> 00:06:45.667
And it's not so much
that Ruby is this great,

00:06:45.667 --> 00:06:48.100
wonderful language
that's so powerful,

00:06:48.100 --> 00:06:51.133
but if you lessen the distance
between what it is

00:06:51.133 --> 00:06:53.367
you're trying to express
and the language

00:06:53.367 --> 00:06:55.701
and what's natural to express
in that language,

00:06:55.701 --> 00:06:57.734
you are going to get
productivity improvements.

00:06:57.734 --> 00:07:00.300
So if you need a general purpose
language, great.

00:07:00.300 --> 00:07:02.300
If you can get by
in a very specialized language

00:07:02.300 --> 00:07:04.567
because you have
a very specialized problem,

00:07:04.567 --> 00:07:06.767
then the fact that
we have the JVM here

00:07:06.767 --> 00:07:08.567
on Google App Engine
means that we can use

00:07:08.567 --> 00:07:10.734
those more specialized
languages.

00:07:10.734 --> 00:07:15.901
Fowler: So the headline news
is Google App Engine

00:07:15.901 --> 00:07:22.400
takes Java and the JVM
and puts it on the cloud.

00:07:22.400 --> 00:07:27.734
However, the JVM isn't quite
all there as we know it.

00:07:27.734 --> 00:07:30.267
Usually for good reasons

00:07:30.267 --> 00:07:32.734
there are little holes
in the JVM

00:07:32.734 --> 00:07:35.534
which means that if you
just want to take some app

00:07:35.534 --> 00:07:36.868
that's been developed
on Java,

00:07:36.868 --> 00:07:39.300
you can't just say,
"Oh, let's just put--

00:07:39.300 --> 00:07:41.434
"copy the files
and transfer it

00:07:41.434 --> 00:07:44.267
to the Google App Engine
for Java and it will just work."

00:07:44.267 --> 00:07:46.100
It won't just work.

00:07:46.100 --> 00:07:49.400
There are definitely
different ways you have to think

00:07:49.400 --> 00:07:51.601
about developing
on the Google App Engine

00:07:51.601 --> 00:07:53.801
than you would
on a more traditional

00:07:53.801 --> 00:07:57.367
enterprise, Java-style stack.

00:07:57.367 --> 00:07:59.634
And there are three areas

00:07:59.634 --> 00:08:03.334
that experimenters
highlighted

00:08:03.334 --> 00:08:05.667
as issue areas
of things where you

00:08:05.667 --> 00:08:08.234
have to particularly
bear them in mind.

00:08:08.234 --> 00:08:10.934
And I'm really gonna
go through these three areas

00:08:10.934 --> 00:08:14.901
as really the main conclusions
from our experiments

00:08:14.901 --> 00:08:18.000
starting with testing.

00:08:18.000 --> 00:08:21.200
And testing is important
to me personally

00:08:21.200 --> 00:08:22.901
and to most of us
at ThoughtWorks

00:08:22.901 --> 00:08:26.234
because we are pretty anal
about testing.

00:08:26.234 --> 00:08:30.167
Whenever we see ourselves
writing any code,

00:08:30.167 --> 00:08:34.801
we always want to execute it
through tests.

00:08:34.801 --> 00:08:36.801
It's become a major part

00:08:36.801 --> 00:08:39.067
of our discipline
of development.

00:08:39.067 --> 00:08:41.334
And we do it partly
because of the fact

00:08:41.334 --> 00:08:43.601
that it allows us to put
systems in production

00:08:43.601 --> 00:08:47.100
with way less bugs than
otherwise would be possible.

00:08:47.100 --> 00:08:48.934
But primarily because it
actually makes us

00:08:48.934 --> 00:08:50.534
more productive.

00:08:50.534 --> 00:08:53.234
Although it may seem like
you're taking a lot of time

00:08:53.234 --> 00:08:56.000
to spend a lot of effort
in testing efforts,

00:08:56.000 --> 00:08:58.567
you make up that time hugely
by the fact

00:08:58.567 --> 00:09:00.634
that you're not spending
so much time debugging.

00:09:00.634 --> 00:09:04.868
And we think that this approach
to testing is very important.

00:09:04.868 --> 00:09:08.133
And furthermore, it's a testing
that we do at multiple levels.

00:09:08.133 --> 00:09:12.033
So you have JUnit style,
Java unit test kind of levels

00:09:12.033 --> 00:09:14.667
that go on with
a fairly tight loop.

00:09:14.667 --> 00:09:16.801
And then a longer loop
that uses more functional

00:09:16.801 --> 00:09:20.400
or acceptance tests using tools
like Selenium

00:09:20.400 --> 00:09:23.234
or Watir or WebDriver
it it's a web app

00:09:23.234 --> 00:09:26.234
or other tools that we put
together for non-web apps.

00:09:26.234 --> 00:09:28.400
But we have multiple layers
of testing

00:09:28.400 --> 00:09:31.634
and these are automated tests.

00:09:31.634 --> 00:09:34.801
So that as a result
we can take any version

00:09:34.801 --> 00:09:36.934
of our system,
we can compile it,

00:09:36.934 --> 00:09:38.834
automatically test it,
and get some sense

00:09:38.834 --> 00:09:41.400
as to whether there's any bugs
lurking around there.

00:09:41.400 --> 00:09:45.601
This is very much a core way
in which we work.

00:09:45.601 --> 00:09:50.100
And so any testing issues
for the Google App Engine

00:09:50.100 --> 00:09:53.100
are very important.

00:09:53.100 --> 00:09:56.334
Now when it comes
to executing some code,

00:09:56.334 --> 00:09:58.667
you've got two basic choices

00:09:58.667 --> 00:10:00.400
in a Google App Engine
environment

00:10:00.400 --> 00:10:02.067
for how you're going
to execute the code.

00:10:02.067 --> 00:10:05.601
One is to execute it
on the remote App Engine itself

00:10:05.601 --> 00:10:09.167
on the Google data center.

00:10:09.167 --> 00:10:12.534
But also you have
the option of executing it

00:10:12.534 --> 00:10:15.100
in a local development
environment.

00:10:15.100 --> 00:10:17.234
It's a special development
server

00:10:17.234 --> 00:10:20.801
that has been put together
for testing purposes.

00:10:20.801 --> 00:10:23.033
Both of these environments

00:10:23.033 --> 00:10:27.634
have strengths
and weaknesses in use.

00:10:27.634 --> 00:10:30.033
The first thing about working

00:10:30.033 --> 00:10:32.868
with the remote application
engine

00:10:32.868 --> 00:10:35.100
is you have to remember
you're working with

00:10:35.100 --> 00:10:37.167
a somewhat thinner pipe
than you're gonna have

00:10:37.167 --> 00:10:39.200
with a local development
server.

00:10:39.200 --> 00:10:41.133
And this is particularly
important to you

00:10:41.133 --> 00:10:45.934
if you're running these
fine-grained unit tests

00:10:45.934 --> 00:10:48.067
where you're typically wanting
to be able

00:10:48.067 --> 00:10:49.567
to run a test where you can
get an answer back

00:10:49.567 --> 00:10:51.033
in a matter of seconds.

00:10:51.033 --> 00:10:53.000
The fact that you actually have
to get the code

00:10:53.000 --> 00:10:56.601
and ship it all over
onto the Google system

00:10:56.601 --> 00:10:58.000
to be able to do that,

00:10:58.000 --> 00:11:00.033
that becomes
a significant factor

00:11:00.033 --> 00:11:04.167
when you're wanting
that degree of turnaround time.

00:11:04.167 --> 00:11:06.033
Then there's a couple
of other red flags

00:11:06.033 --> 00:11:07.400
that you have to deal with
as well.

00:11:07.400 --> 00:11:10.901
One is that in order
to actually execute stuff

00:11:10.901 --> 00:11:13.934
on the Google App Engine,
it has to start up at JVM

00:11:13.934 --> 00:11:15.934
whenever you want
to fire things off.

00:11:15.934 --> 00:11:19.300
And that still is a significant
bit of lag time

00:11:19.300 --> 00:11:20.634
that's involved.

00:11:20.634 --> 00:11:24.501
And, again, in the course
of what you have to do

00:11:24.501 --> 00:11:28.167
to get something on production,
it's not that big a deal.

00:11:28.167 --> 00:11:32.000
But when you're trying to run
a rapid rate of unit tests,

00:11:32.000 --> 00:11:34.868
then that startup time
can be a significant factor

00:11:34.868 --> 00:11:36.868
in your timing.

00:11:36.868 --> 00:11:38.901
The other problem with using
the Google App Engine

00:11:38.901 --> 00:11:41.000
is it's very difficult
to actually do

00:11:41.000 --> 00:11:44.267
the classic running
a set of unit tests.

00:11:44.267 --> 00:11:46.033
There's no real facilities there

00:11:46.033 --> 00:11:48.767
in order to be able to do
that run app at the moment.

00:11:48.767 --> 00:11:52.000
It's fine if you're using some
kind of more web-driven approach

00:11:52.000 --> 00:11:54.868
like Selenium or WebDriver
or the like.

00:11:54.868 --> 00:11:57.601
But for just running a batch
of unit tests,

00:11:57.601 --> 00:11:59.567
the App Engine
isn't really suited

00:11:59.567 --> 00:12:03.367
for doing something like that
at the moment.

00:12:03.367 --> 00:12:06.467
So a logical thing therefore
is to say well, we want

00:12:06.467 --> 00:12:08.734
at least a significant part
of that testing

00:12:08.734 --> 00:12:12.501
to be done through
the local development server.

00:12:12.501 --> 00:12:16.701
But yes, we have some red flags
there as well.

00:12:16.701 --> 00:12:19.767
And they really boil down
into two main problems.

00:12:19.767 --> 00:12:23.033
The first one and I think
the most serious one

00:12:23.033 --> 00:12:24.868
is that
the local development server

00:12:24.868 --> 00:12:27.934
isn't really an accurate clone
of what's going on

00:12:27.934 --> 00:12:31.234
on the Google App Engine
itself.

00:12:31.234 --> 00:12:34.434
All of our experimenters
ran into little cases

00:12:34.434 --> 00:12:37.167
where things wouldn't work
on the local development server

00:12:37.167 --> 00:12:41.701
but would work
on the full Google setup.

00:12:41.701 --> 00:12:44.601
And that, of course,
can lead to a lot of frustration

00:12:44.601 --> 00:12:46.367
because then you're faced
with the problem

00:12:46.367 --> 00:12:48.067
of, "Hmm, what do I do here?"

00:12:48.067 --> 00:12:50.400
Do I code around the local
app server

00:12:50.400 --> 00:12:52.267
even though it's going
to work fine remotely?

00:12:52.267 --> 00:12:54.701
Or do I have to disable
certain tests

00:12:54.701 --> 00:12:55.834
because they're going to fail

00:12:55.834 --> 00:12:57.901
for effectively spurious
reasons?

00:12:57.901 --> 00:12:59.701
And then of course
you get the reverse problem

00:12:59.701 --> 00:13:02.501
where it's going to work
on the local system

00:13:02.501 --> 00:13:05.033
but not work on the remote one.

00:13:05.033 --> 00:13:07.634
And you don't have to run
into too many of those glitches

00:13:07.634 --> 00:13:11.834
before you begin to lose trust
in the local development server.

00:13:11.834 --> 00:13:14.334
The second area
where you run into difficulty

00:13:14.334 --> 00:13:17.734
is in order to use Google
App Engine effectively,

00:13:17.734 --> 00:13:19.901
you want to use
a lot of the services

00:13:19.901 --> 00:13:22.467
that are packaged
in with the App Engine.

00:13:22.467 --> 00:13:25.767
But, of course, they're not
gonna run on your local server.

00:13:25.767 --> 00:13:29.934
So what Google does give you
is a certain degree of ability

00:13:29.934 --> 00:13:32.767
to be able to stub
those Google services

00:13:32.767 --> 00:13:34.934
so that you can at least
run test cases.

00:13:34.934 --> 00:13:37.634
But stubbing isn't always
what you want.

00:13:37.634 --> 00:13:40.767
And the way things are set up
makes it rather difficult

00:13:40.767 --> 00:13:44.100
for you to actually put
your own stubs into place,

00:13:44.100 --> 00:13:46.834
which a lot of the time
is what you'd want to do.

00:13:46.834 --> 00:13:51.133
And that problem is one
that will also exacerbate

00:13:51.133 --> 00:13:54.868
running the tests locally
on the local development server.

00:13:54.868 --> 00:13:57.067
Parsons: Now the good news
about a lot of those things

00:13:57.067 --> 00:13:59.667
is the fact that they're
all fixable problems.

00:13:59.667 --> 00:14:04.701
We pushed on the App Engine
in a way

00:14:04.701 --> 00:14:09.534
that traditional standard Java
applications probably wouldn't.

00:14:09.534 --> 00:14:13.334
And as we run into those,
those problems can be fixed

00:14:13.334 --> 00:14:16.000
to make sure
that the local clone

00:14:16.000 --> 00:14:19.734
is more and more in align
with what the cloud is.

00:14:19.734 --> 00:14:22.667
So as we run into those things,
they can be fixed.

00:14:22.667 --> 00:14:25.901
So it's something that
we expect to continue to improve

00:14:25.901 --> 00:14:29.067
as this product
gets more usage

00:14:29.067 --> 00:14:31.100
and we have more opportunities
to be able

00:14:31.100 --> 00:14:34.968
to push on this in particular
in the testing.

00:14:34.968 --> 00:14:36.968
We know that we push things
in testing

00:14:36.968 --> 00:14:38.167
far more than other people do,

00:14:38.167 --> 00:14:41.033
and so we kind of expect things
like this.

00:14:41.033 --> 00:14:42.968
Fowler: So there's
kind of two messages--

00:14:42.968 --> 00:14:44.334
with all of these three points

00:14:44.334 --> 00:14:46.934
there's kind of
two message streams here.

00:14:46.934 --> 00:14:48.934
One is to Google.

00:14:48.934 --> 00:14:50.434
And my message here to Google

00:14:50.434 --> 00:14:51.501
is get that
local development server

00:14:51.501 --> 00:14:52.868
so it's a proper clone.

00:14:52.868 --> 00:14:55.968
Make it so that you can easily
replace those stubs.

00:14:55.968 --> 00:14:57.968
That's stuff
that Google needs to do.

00:14:57.968 --> 00:15:00.801
And for people who are thinking
of deploying

00:15:00.801 --> 00:15:03.367
on the Google App Engine,
be wary about the testing.

00:15:03.367 --> 00:15:05.467
It's gonna be more awkward
for a while

00:15:05.467 --> 00:15:07.901
than we'd ideally
like it to be.

00:15:07.901 --> 00:15:09.868
And probably
a lot of the testing

00:15:09.868 --> 00:15:12.634
is ending up gonna have
to be driven

00:15:12.634 --> 00:15:15.200
through the App Engine,
through the browser.

00:15:15.200 --> 00:15:17.934
You're gonna rely on more
of that than you would like

00:15:17.934 --> 00:15:19.701
when you prefer running
local unit tests.

00:15:19.701 --> 00:15:22.400
There are things you can do
to make sure

00:15:22.400 --> 00:15:27.100
as minimum amount of tests touch
the tricky areas as possible.

00:15:27.100 --> 00:15:29.100
But you aren't going
to be able to build

00:15:29.100 --> 00:15:32.000
as broad a unit test net
as you would like,

00:15:32.000 --> 00:15:34.767
at least until the local
development server improves

00:15:34.767 --> 00:15:38.767
its mirroring.

00:15:38.767 --> 00:15:40.834
So that's our message
with testing.

00:15:40.834 --> 00:15:47.067
So the second topic
to move into is persistence.

00:15:47.067 --> 00:15:48.868
Now, as you may know,

00:15:48.868 --> 00:15:52.200
Google provides a persistence
mechanism for you

00:15:52.200 --> 00:15:55.801
called BigTable, which
is a very proven approach

00:15:55.801 --> 00:15:58.367
to handling persistence
for this kind

00:15:58.367 --> 00:16:00.968
of cloud architecture
because it's what Google uses

00:16:00.968 --> 00:16:03.834
for, well, Google Search.

00:16:03.834 --> 00:16:06.868
And we know that
that is battle proven

00:16:06.868 --> 00:16:08.601
with lots and lots of usage.

00:16:08.601 --> 00:16:11.601
And if you listen
to the descriptions,

00:16:11.601 --> 00:16:14.801
and indeed the name BigTable,
you'll say to yourself,

00:16:14.801 --> 00:16:16.767
"Oh, yes,
tabular data structures.

00:16:16.767 --> 00:16:18.300
"This is the kind of thing
I'm familiar.

00:16:18.300 --> 00:16:19.534
"Rows and tables.

00:16:19.534 --> 00:16:20.868
"I have a row, a table.

00:16:20.868 --> 00:16:23.100
Rows, and I
have columns there."

00:16:23.100 --> 00:16:26.200
Except those columns
can be any--

00:16:26.200 --> 00:16:29.968
given any arbitrary name
that's some string.

00:16:29.968 --> 00:16:32.033
And not all rows of this--

00:16:32.033 --> 00:16:34.634
no notion of rows
of a particular type

00:16:34.634 --> 00:16:36.734
where the columns
are all expected to be there

00:16:36.734 --> 00:16:39.968
because any row
can have any column it likes.

00:16:39.968 --> 00:16:44.300
Hang on--this is not feeling
like a table particularly.

00:16:44.300 --> 00:16:49.067
In fact, my view is thinking
of BigTable as a table

00:16:49.067 --> 00:16:51.367
is just going to lead you
mentally down the wrong path.

00:16:51.367 --> 00:16:54.434
Well, instead you have
to say to yourself is,

00:16:54.434 --> 00:16:57.300
"What we have here
is a nested HashMap."

00:16:57.300 --> 00:17:00.434
We basically have
some row pointer

00:17:00.434 --> 00:17:03.133
that gives you
a bunch of--

00:17:03.133 --> 00:17:05.767
basically points you to a
HashMap with a bunch of keys.

00:17:05.767 --> 00:17:09.534
which itself gives you
various bits of data.

00:17:09.534 --> 00:17:13.133
And a nested HashMap is a very
appropriate data structure

00:17:13.133 --> 00:17:14.801
for this kind of setup.

00:17:14.801 --> 00:17:16.801
I don't think it's
particularly coincidental

00:17:16.801 --> 00:17:18.601
that you look at a number
of big web properties

00:17:18.601 --> 00:17:21.734
and they've moved towards
a nested HashMap style

00:17:21.734 --> 00:17:23.834
data structure
for what they do.

00:17:23.834 --> 00:17:27.167
Amazon, for instance, also uses
a nested HashMap style model

00:17:27.167 --> 00:17:28.901
with its S3.

00:17:28.901 --> 00:17:31.100
But it is a different one

00:17:31.100 --> 00:17:33.868
to what most enterprise
developers are familiar with

00:17:33.868 --> 00:17:36.300
because in the enterprise,

00:17:36.300 --> 00:17:38.968
relational databases
rule supreme.

00:17:38.968 --> 00:17:42.167
Now there's a bit more
to the nested HashMap story.

00:17:42.167 --> 00:17:46.234
We also have the ability
in BigTable

00:17:46.234 --> 00:17:49.868
to effectively have
time-stamped versions

00:17:49.868 --> 00:17:52.501
of data for each of the keys
that you have.

00:17:52.501 --> 00:17:56.133
Now this is actually potentially
a very useful capability

00:17:56.133 --> 00:17:59.267
to allow the database to act
in a much more temporal way

00:17:59.267 --> 00:18:01.501
and be able to record
a history of information

00:18:01.501 --> 00:18:04.334
as opposed to just purely
current snapshots.

00:18:04.334 --> 00:18:08.300
But again, this is a relatively
unfamiliar thing

00:18:08.300 --> 00:18:10.267
for most of the developers

00:18:10.267 --> 00:18:14.367
that are used to developing
with relation to databases.

00:18:14.367 --> 00:18:17.367
Now, that's
the underlying engine.

00:18:17.367 --> 00:18:20.767
If you use BigTable,

00:18:20.767 --> 00:18:23.234
you will access it
through various APIs.

00:18:23.234 --> 00:18:26.067
And there are three main APIs
practicing from Java.

00:18:26.067 --> 00:18:29.601
One is a data store API,
and the data store API

00:18:29.601 --> 00:18:32.567
is the one that is really
the most natural one

00:18:32.567 --> 00:18:34.868
to the underlying data
structure.

00:18:34.868 --> 00:18:36.534
That is the one
that gives you the feel,

00:18:36.534 --> 00:18:40.067
I'm talking to a nested
HashMap here.

00:18:40.067 --> 00:18:43.834
Then there are two higher level
APIs, JDO and JPA,

00:18:43.834 --> 00:18:48.300
which are fairly standard
Java or entered APIs.

00:18:48.300 --> 00:18:50.300
You see them around a lot.

00:18:50.300 --> 00:18:54.634
And what that can lead some
people into thinking perhaps

00:18:54.634 --> 00:18:57.334
is that, well, if we
code our application based

00:18:57.334 --> 00:19:02.133
on JDO or JPA,
we don't really have to care

00:19:02.133 --> 00:19:03.467
about the fact
that it's BigTable

00:19:03.467 --> 00:19:05.534
as opposed
to a relational database

00:19:05.534 --> 00:19:07.000
sitting behind the scenes.

00:19:07.000 --> 00:19:10.601
We can hide the fact that
we're dealing with BigTable.

00:19:10.601 --> 00:19:13.400
Just write our application
to those higher level APIs,

00:19:13.400 --> 00:19:16.367
and all will be fine.

00:19:16.367 --> 00:19:18.434
You probably will hear people
claiming that.

00:19:18.434 --> 00:19:20.968
Maybe even people have claimed
that at this conference.

00:19:20.968 --> 00:19:24.000
I have a one-word response
to that claim.

00:19:24.000 --> 00:19:27.100
Bollocks.

00:19:27.100 --> 00:19:29.100
The thing with persistence
that we've learned

00:19:29.100 --> 00:19:32.067
time and time again
is that these abstraction layers

00:19:32.067 --> 00:19:34.234
are extremely valuable,

00:19:34.234 --> 00:19:36.234
they save you an enormous
amount of effort,

00:19:36.234 --> 00:19:40.234
but they only provide
that abstraction coverage

00:19:40.234 --> 00:19:42.801
to about 80% to 90%
of what you're doing.

00:19:42.801 --> 00:19:45.801
There's always a certain amount
of leakage

00:19:45.801 --> 00:19:47.434
with persistence APIs.

00:19:47.434 --> 00:19:49.534
When you have to go beyond
the abstraction layer

00:19:49.534 --> 00:19:51.534
and in
a relational database case,

00:19:51.534 --> 00:19:54.033
you have
to start talking SQL.

00:19:54.033 --> 00:19:56.968
Same thing is gonna happen
with BigTable.

00:19:56.968 --> 00:19:59.434
Using the higher level APIs,

00:19:59.434 --> 00:20:02.200
you can kind of forget
about BigTable's existence

00:20:02.200 --> 00:20:05.000
80% or 90% of the time.

00:20:05.000 --> 00:20:06.534
But a certain percentage
of the time,

00:20:06.534 --> 00:20:08.634
you need to know you're talking
to a nested HashMap.

00:20:08.634 --> 00:20:10.901
And you have to deal
with the way it allocates

00:20:10.901 --> 00:20:13.734
its rows across servers
and clusters things together

00:20:13.734 --> 00:20:15.367
and things of that kind

00:20:15.367 --> 00:20:17.601
if you want
a decent performance.

00:20:17.601 --> 00:20:19.868
And we all tend to want
enough performance

00:20:19.868 --> 00:20:22.400
that we're gonna have
to do this.

00:20:22.400 --> 00:20:24.934
This is gonna be a big shift

00:20:24.934 --> 00:20:27.100
for a lot of enterprise
developers.

00:20:27.100 --> 00:20:31.400
The relational database model
has had enterprise development

00:20:31.400 --> 00:20:35.334
in a complete lock
for a long, long time.

00:20:35.334 --> 00:20:37.267
And it's gonna be
a significant shift

00:20:37.267 --> 00:20:41.601
to move over
to the nested HashMap model.

00:20:41.601 --> 00:20:43.701
Parsons: We have high hopes
that it will happen.

00:20:43.701 --> 00:20:45.234
Fowler: We do.

00:20:45.234 --> 00:20:47.434
I mean, on the whole,
we quite like this.

00:20:47.434 --> 00:20:51.167
I think this is actually
a good shift to go through.

00:20:51.167 --> 00:20:54.234
And I'm not going to advise
Google to replace BigTable

00:20:54.234 --> 00:20:56.300
with relational databases.

00:20:56.300 --> 00:20:57.968
I don't think
that would at all

00:20:57.968 --> 00:20:59.634
be necessarily a good idea.

00:20:59.634 --> 00:21:01.634
But for you as users,

00:21:01.634 --> 00:21:04.234
if you're thinking of developing
for App Engine,

00:21:04.234 --> 00:21:06.667
you have to think about
that shift in persistence model.

00:21:06.667 --> 00:21:09.534
And that's one very big reason
why you can't just port

00:21:09.534 --> 00:21:11.133
a traditionally developed
Java app

00:21:11.133 --> 00:21:13.634
and just say, "Oh,
we'll put it on App Engine."

00:21:13.634 --> 00:21:15.601
Because you're gonna have to
change your persistence model

00:21:15.601 --> 00:21:18.400
and that is not gonna be
a small adjustment

00:21:18.400 --> 00:21:24.200
for most applications.

00:21:24.200 --> 00:21:27.868
So that's
the persistence story.

00:21:27.868 --> 00:21:33.067
The third topic to mention
is concurrency.

00:21:33.067 --> 00:21:36.601
Now, JVM has had
a very particular model

00:21:36.601 --> 00:21:38.934
about concurrency right
from the very beginning,

00:21:38.934 --> 00:21:43.234
and that is that you have
one broad memory space

00:21:43.234 --> 00:21:46.033
of objects that you're
dealing with in memory

00:21:46.033 --> 00:21:49.501
and multiple threads operating
across that memory space.

00:21:49.501 --> 00:21:52.767
And you have the power
to create new threads

00:21:52.767 --> 00:21:54.601
within that memory space
anytime you like

00:21:54.601 --> 00:21:57.167
and the responsibility
to arrange

00:21:57.167 --> 00:21:59.234
all the locking and stuff
so that you don't shoot yourself

00:21:59.234 --> 00:22:01.734
in the foot.

00:22:01.734 --> 00:22:03.501
The Google App Engine
operates

00:22:03.501 --> 00:22:05.701
on basically
a different model.

00:22:05.701 --> 00:22:09.067
It says that we actually have
separate memory spaces,

00:22:09.067 --> 00:22:15.133
each of which only has
a single thread operating in it.

00:22:15.133 --> 00:22:16.701
And you can't just create
a new thread

00:22:16.701 --> 00:22:19.234
within a memory space,
and certainly not

00:22:19.234 --> 00:22:21.701
to let it access
the same objects.

00:22:21.701 --> 00:22:24.234
If you want to communicate
between these memory spaces,

00:22:24.234 --> 00:22:26.834
then you operate
with a database.

00:22:26.834 --> 00:22:30.067
You operate with BigTable.

00:22:30.067 --> 00:22:35.033
Now, there are lots
of pluses and minuses here.

00:22:35.033 --> 00:22:39.067
The first thing
is that, notionally,

00:22:39.067 --> 00:22:40.601
the Google App Engine model

00:22:40.601 --> 00:22:43.701
of single threaded applications
communicating

00:22:43.701 --> 00:22:45.300
through
a transactional database

00:22:45.300 --> 00:22:48.501
is actually the way
a lot of people tend to think

00:22:48.501 --> 00:22:50.601
about web apps normally.

00:22:50.601 --> 00:22:53.968
A lot of people are wary
about shooting off threads

00:22:53.968 --> 00:22:55.167
left, right, and center
because they know

00:22:55.167 --> 00:22:57.100
it can shoot themselves
in the foot.

00:22:57.100 --> 00:22:59.267
So they tend to use a thread
to handle

00:22:59.267 --> 00:23:01.234
a particular web request
coming in.

00:23:01.234 --> 00:23:05.234
Do everything all on at least
logically a single thread.

00:23:05.234 --> 00:23:07.167
Storing stuff
off to a database

00:23:07.167 --> 00:23:10.567
or some other kind
of session storage or whatever.

00:23:10.567 --> 00:23:13.300
So the shift then, mentally,
in thinking

00:23:13.300 --> 00:23:16.868
from the traditional
Java structure

00:23:16.868 --> 00:23:18.734
to the Google App Engine
structure,

00:23:18.734 --> 00:23:21.300
that's not actually
that big a shift.

00:23:21.300 --> 00:23:26.100
Not at least
in the broad perspective.

00:23:26.100 --> 00:23:29.067
But there are details
where there is an issue.

00:23:29.067 --> 00:23:31.100
Now as I've mentioned,

00:23:31.100 --> 00:23:33.334
one thing you can't do
in the Google world

00:23:33.334 --> 00:23:35.968
is I've got a thread
operating on some data

00:23:35.968 --> 00:23:38.234
and I want to spin up
a new thread.

00:23:38.234 --> 00:23:43.200
Do that, you get an exception,
game over.

00:23:43.200 --> 00:23:44.567
Well, that's fairly obvious.

00:23:44.567 --> 00:23:47.267
I don't want to be doing that.

00:23:47.267 --> 00:23:49.901
However, there are cases
when it's not so obvious.

00:23:49.901 --> 00:23:52.334
I'm running some application,

00:23:52.334 --> 00:23:53.868
I've got some thread
going around here.

00:23:53.868 --> 00:23:56.300
I want to call some service
on an API,

00:23:56.300 --> 00:23:59.067
some third party library
that's part of my application.

00:23:59.067 --> 00:24:01.667
I don't really know very much
about this third party library

00:24:01.667 --> 00:24:03.467
but it's gonna do
some useful work for me

00:24:03.467 --> 00:24:05.067
so I call
a method on there.

00:24:05.067 --> 00:24:08.200
And what I don't know is that
that third party library

00:24:08.200 --> 00:24:09.834
has spun up a thread
without me knowing about it

00:24:09.834 --> 00:24:13.367
and I end up getting exceptions
that I wouldn't expect.

00:24:13.367 --> 00:24:18.000
And that is, unfortunately,
relatively common.

00:24:18.000 --> 00:24:20.334
Because everybody's
used to the Java model

00:24:20.334 --> 00:24:24.667
of concurrency,
people are fairly comfortable

00:24:24.667 --> 00:24:26.968
with the idea of it
to be spinning up threads.

00:24:26.968 --> 00:24:29.067
And if you've got some
third party library that's going

00:24:29.067 --> 00:24:31.067
to do that, you're not
going to be able to use it

00:24:31.067 --> 00:24:33.167
on App Engine.

00:24:33.167 --> 00:24:35.033
This also particularly
hits people

00:24:35.033 --> 00:24:37.434
if they're using some of those
alternative languages

00:24:37.434 --> 00:24:39.334
I talked about earlier on.

00:24:39.334 --> 00:24:43.367
A number of those languages
also do a lot of use of threads.

00:24:43.367 --> 00:24:46.000
In fact, part
of the experimentation

00:24:46.000 --> 00:24:47.968
is to make concurrency
more tractable,

00:24:47.968 --> 00:24:51.367
and so they do this spinning
of the threads routine.

00:24:51.367 --> 00:24:53.767
And as a result,
they're gonna have more problems

00:24:53.767 --> 00:24:56.834
on the App Engine
because of that.

00:24:56.834 --> 00:25:02.234
So on the whole,
the message to programmers there

00:25:02.234 --> 00:25:04.634
is you've got to be wary about
what libraries you're using

00:25:04.634 --> 00:25:06.567
and what technologies
you're using

00:25:06.567 --> 00:25:09.534
to know about how they're
dealing with thread management

00:25:09.534 --> 00:25:11.234
to know whether
you're going to be using them

00:25:11.234 --> 00:25:13.467
with the Google App Engine.

00:25:13.467 --> 00:25:17.033
But broadly,
the concurrency design

00:25:17.033 --> 00:25:20.067
that App Engine leads you to--
these separate memory spaces

00:25:20.067 --> 00:25:21.868
with a single thread
in each memory space--

00:25:21.868 --> 00:25:23.734
is actually a model
that I would much like

00:25:23.734 --> 00:25:25.234
to recommend to people.

00:25:25.234 --> 00:25:27.801
I think it's a much more
tractable concurrency model

00:25:27.801 --> 00:25:30.000
to work with that
kind of approach

00:25:30.000 --> 00:25:32.968
than the shared memory, multiple
threads kind of approach

00:25:32.968 --> 00:25:34.801
for the JVM encouraged.

00:25:34.801 --> 00:25:36.367
Parsons: And again,
over time, I mean,

00:25:36.367 --> 00:25:38.100
part of the power
of the Java platform

00:25:38.100 --> 00:25:40.133
is the significant number
of third party libraries

00:25:40.133 --> 00:25:41.467
that are available.

00:25:41.467 --> 00:25:43.133
You've got libraries
to do practically anything.

00:25:43.133 --> 00:25:46.534
Over time, as the Google
App Engine platform

00:25:46.534 --> 00:25:49.234
becomes more popular,
many of those libraries

00:25:49.234 --> 00:25:51.200
will be ported
in different ways,

00:25:51.200 --> 00:25:53.601
taking into account
the fact that the thread model

00:25:53.601 --> 00:25:54.734
is now different.

00:25:54.734 --> 00:25:56.067
So this is a third message.

00:25:56.067 --> 00:25:57.901
This is to the people
who are writing libraries,

00:25:57.901 --> 00:25:59.300
is to start thinking
about this.

00:25:59.300 --> 00:26:00.567
Are you actually--

00:26:00.567 --> 00:26:04.234
Do you really need to be able
to fire up threads

00:26:04.234 --> 00:26:07.000
or can you make
this functionality available

00:26:07.000 --> 00:26:10.400
to people who are using Java
on the Google App Engine

00:26:10.400 --> 00:26:12.367
in such a way that
we don't run up against

00:26:12.367 --> 00:26:14.367
some of those
security exceptions?

00:26:14.367 --> 00:26:16.634
So that's message number three
for this part.

00:26:16.634 --> 00:26:19.100
Fowler: Yeah.

00:26:19.100 --> 00:26:23.300
So that's three broad areas
that we've talked through.

00:26:23.300 --> 00:26:25.868
None of these I would argue
are show stoppers.

00:26:25.868 --> 00:26:29.734
And they're all things
that you've got to be wary of.

00:26:29.734 --> 00:26:32.734
But certainly
the Google App Engine

00:26:32.734 --> 00:26:34.767
certainly looks like
a reasonable platform.

00:26:34.767 --> 00:26:37.968
I am not in the position yet
to say it's definitely workable

00:26:37.968 --> 00:26:40.667
'cause I'd like to see
about half a dozen or so systems

00:26:40.667 --> 00:26:43.434
in production before
I can say that kind of thing,

00:26:43.434 --> 00:26:44.901
and it's still
too early for that.

00:26:44.901 --> 00:26:47.667
But it certainly looks like
a reasonable platform

00:26:47.667 --> 00:26:49.601
for a lot of cases to use.

00:26:49.601 --> 00:26:54.667
And that's really the conclusion
from our experiments

00:26:54.667 --> 00:26:56.501
and some of the thoughts
from that.

00:26:56.501 --> 00:26:58.300
And so now I'll switch over
to Rebecca

00:26:58.300 --> 00:27:02.334
to talk about the broader issue
of enterprise considerations.

00:27:02.334 --> 00:27:06.467
Parsons: So we tend
to write larger apps.

00:27:06.467 --> 00:27:09.901
And our experiments
kind of pushed on that as well.

00:27:09.901 --> 00:27:14.367
We don't always write just
traditional web applications

00:27:14.367 --> 00:27:16.400
and we do deal
with enterprises.

00:27:16.400 --> 00:27:18.067
And although you can say,

00:27:18.067 --> 00:27:20.968
"Well, there's hundreds
of thousands of millions

00:27:20.968 --> 00:27:23.267
"of small business people.

00:27:23.267 --> 00:27:24.901
Why do we have to worry
about enterprises?"

00:27:24.901 --> 00:27:26.801
Well, there's still a lot
of enterprise development

00:27:26.801 --> 00:27:28.467
going on out there.

00:27:28.467 --> 00:27:31.634
And, in fact, what you'll find
in a lot of these enterprises

00:27:31.634 --> 00:27:35.067
is there are
the early adopters.

00:27:35.067 --> 00:27:36.501
There's a whole lot of people
out there

00:27:36.501 --> 00:27:41.334
in that late majority
and who really are quite wary

00:27:41.334 --> 00:27:44.133
of new technology like this.

00:27:44.133 --> 00:27:50.534
So there are basically
three broad areas of concerns

00:27:50.534 --> 00:27:54.200
that enterprises have with
something like App Engine.

00:27:54.200 --> 00:27:57.367
I'm gonna start talking first
about some characteristics

00:27:57.367 --> 00:28:01.934
of the App Engine
and in really the space

00:28:01.934 --> 00:28:04.133
of different cloud offerings,

00:28:04.133 --> 00:28:06.667
and how those different
cloud offerings might,

00:28:06.667 --> 00:28:09.000
in fact, impact the way
an enterprise thinks

00:28:09.000 --> 00:28:12.133
about experimenting in the cloud
or moving into the cloud.

00:28:12.133 --> 00:28:15.133
Then I want to talk a little bit
about some of the paranoia

00:28:15.133 --> 00:28:17.000
that exists in enterprises

00:28:17.000 --> 00:28:19.901
to understand--why are
these people so afraid?

00:28:19.901 --> 00:28:21.734
What's really wrong with this?

00:28:21.734 --> 00:28:25.000
And try to talk through
some ways, then,

00:28:25.000 --> 00:28:27.167
that we can start
looking at how enterprises

00:28:27.167 --> 00:28:30.334
might get on an adoption path
to start using this

00:28:30.334 --> 00:28:34.334
and overcome a little bit
of their paranoia.

00:28:34.334 --> 00:28:37.200
So I want to start first
by talking about

00:28:37.200 --> 00:28:41.701
the landscape, if you will,
of cloud offerings.

00:28:41.701 --> 00:28:46.534
And I think it's important that
you think about this as a line.

00:28:46.534 --> 00:28:50.400
And we've got some markers
in this line at the moment

00:28:50.400 --> 00:28:53.701
which represent
current cloud implementations.

00:28:53.701 --> 00:28:55.501
But there's a whole lot
of space in there,

00:28:55.501 --> 00:28:58.467
and I think there's still
a lot of interesting areas

00:28:58.467 --> 00:29:00.601
for innovation for people
to start exploring

00:29:00.601 --> 00:29:04.200
the spaces
between those lines.

00:29:04.200 --> 00:29:06.133
So in a very general way,

00:29:06.133 --> 00:29:09.033
we have
our infrastructure clouds.

00:29:09.033 --> 00:29:13.000
Pure bones bare
infrastructure.

00:29:13.000 --> 00:29:15.968
Let's just have something
out there.

00:29:15.968 --> 00:29:17.767
It places an awful lot
of responsibility

00:29:17.767 --> 00:29:19.901
on the enterprise
to handle things

00:29:19.901 --> 00:29:22.567
like system administration
and all of that.

00:29:22.567 --> 00:29:24.200
But at least
you don't have a server

00:29:24.200 --> 00:29:25.701
sitting in your data center
anymore.

00:29:25.701 --> 00:29:27.901
So that's really
the most general infrastructure.

00:29:27.901 --> 00:29:30.200
You've got an incredible amount
of power

00:29:30.200 --> 00:29:32.367
but an incredible amount
of responsibility

00:29:32.367 --> 00:29:35.334
within your organization.

00:29:35.334 --> 00:29:38.534
Amazon is a good example
of that.

00:29:38.534 --> 00:29:40.267
Next is the platform.

00:29:40.267 --> 00:29:43.200
So I'm going to give you
something to play with

00:29:43.200 --> 00:29:44.567
on this infrastructure.

00:29:44.567 --> 00:29:47.534
I'm gonna give you
some restrictions.

00:29:47.534 --> 00:29:48.634
You're still gonna have
a fair amount of power.

00:29:48.634 --> 00:29:49.968
I mean, let's face it.

00:29:49.968 --> 00:29:51.701
The JVM is still
a pretty powerful platform

00:29:51.701 --> 00:29:53.234
to build on.

00:29:53.234 --> 00:29:57.067
But I am building something
of a box around you.

00:29:57.067 --> 00:29:58.734
I'm taking on
more responsibility

00:29:58.734 --> 00:30:01.067
as a cloud provider.

00:30:01.067 --> 00:30:04.100
You're giving up
some control to me.

00:30:04.100 --> 00:30:06.567
So we've got kind of
a middle ground here.

00:30:06.567 --> 00:30:10.868
Google App Engine
is a great example of this one.

00:30:10.868 --> 00:30:13.501
And finally,
we have the very specific.

00:30:13.501 --> 00:30:16.534
Salesforce.com is often
considered the standard here.

00:30:16.534 --> 00:30:19.634
This is
a very specific application

00:30:19.634 --> 00:30:20.934
that does a very narrow thing.

00:30:20.934 --> 00:30:23.033
I have very little
responsibility

00:30:23.033 --> 00:30:24.667
when I'm dealing
with Salesforce.

00:30:24.667 --> 00:30:27.067
They're handling virtually
everything for me.

00:30:27.067 --> 00:30:28.868
I've got some knobs to turn.

00:30:28.868 --> 00:30:30.734
I've got a few things
I can fiddle with.

00:30:30.734 --> 00:30:32.968
Yes, they have APIs,
but for the most part

00:30:32.968 --> 00:30:34.934
they're worrying about
most everything.

00:30:34.934 --> 00:30:37.968
However, although I'm sure
you could probably write

00:30:37.968 --> 00:30:41.167
a text editor in Salesforce,
you probably wouldn't want to.

00:30:41.167 --> 00:30:44.534
So I am giving up
some flexibility and some power

00:30:44.534 --> 00:30:46.067
but that's the whole point.

00:30:46.067 --> 00:30:49.968
This is an application-specific
cloud.

00:30:49.968 --> 00:30:52.400
Now, in particular,
I think there's a whole lot

00:30:52.400 --> 00:30:54.400
of interesting space
between the platform

00:30:54.400 --> 00:30:57.133
and the application
where we might start

00:30:57.133 --> 00:31:00.167
not having something quite
as specific as Salesforce,

00:31:00.167 --> 00:31:03.067
but something that's
more targeted to a domain.

00:31:03.067 --> 00:31:04.801
So we might start
looking at things

00:31:04.801 --> 00:31:06.834
like
statistical analysis clouds,

00:31:06.834 --> 00:31:09.767
where I still have something
of a programming environment

00:31:09.767 --> 00:31:11.901
but I have a much narrower
domain focus

00:31:11.901 --> 00:31:14.367
than something that's
general as the platform.

00:31:14.367 --> 00:31:17.000
So I think there are a whole lot
of points in there

00:31:17.000 --> 00:31:18.968
that are still
worthy of exploration

00:31:18.968 --> 00:31:21.734
as we start to understand
how different kinds

00:31:21.734 --> 00:31:24.067
of enterprises,
different kinds of applications

00:31:24.067 --> 00:31:28.767
can make use
of the benefits of the cloud.

00:31:28.767 --> 00:31:30.667
So what are those benefits?

00:31:30.667 --> 00:31:33.334
Elasticity is the first one.

00:31:33.334 --> 00:31:36.534
You really don't have
to think anymore about

00:31:36.534 --> 00:31:38.767
some of the characteristics
of your application

00:31:38.767 --> 00:31:40.968
that you used to have
to worry a whole lot about.

00:31:40.968 --> 00:31:44.901
The cloud will flex
with your requirements,

00:31:44.901 --> 00:31:47.434
and you don't have
to worry about it.

00:31:47.434 --> 00:31:49.734
And that's important,
particularly when you want

00:31:49.734 --> 00:31:51.834
to start thinking about
introducing something

00:31:51.834 --> 00:31:54.467
into an environment
that's as dynamic as the web.

00:31:54.467 --> 00:31:57.067
Who knows how popular
something's going to be.

00:31:57.067 --> 00:31:58.267
You put it out.

00:31:58.267 --> 00:32:02.200
Your server could crash
because you had no idea

00:32:02.200 --> 00:32:04.834
that you were all of a sudden
gonna be slash dotted,

00:32:04.834 --> 00:32:06.667
whereas in this environment,

00:32:06.667 --> 00:32:10.834
that infrastructure
can flex to meet your needs.

00:32:10.834 --> 00:32:12.767
To me this is one
of the most important.

00:32:12.767 --> 00:32:15.267
Low barrier to entry.

00:32:15.267 --> 00:32:17.367
One of the things
that used to happen

00:32:17.367 --> 00:32:19.234
a long, long time ago
when I didn't have

00:32:19.234 --> 00:32:22.300
so many gray hairs
is you had a lot of interaction

00:32:22.300 --> 00:32:25.667
between the business user
and the I.T. people.

00:32:25.667 --> 00:32:27.767
And someone
could sit down and say,

00:32:27.767 --> 00:32:30.534
"This is the vision
of what I want to have happen,"

00:32:30.534 --> 00:32:32.901
and the programmer was sitting
there and banging it out.

00:32:32.901 --> 00:32:35.300
And now we have
huge I.T. departments,

00:32:35.300 --> 00:32:37.501
and all of the separation
requirements documents

00:32:37.501 --> 00:32:39.300
and all of this stuff.

00:32:39.300 --> 00:32:41.033
What we need to do
is get business people

00:32:41.033 --> 00:32:43.167
and development people
back together again.

00:32:43.167 --> 00:32:46.267
One of the nice things
about the low barrier to entry

00:32:46.267 --> 00:32:49.167
of the cloud
in Google App Engine

00:32:49.167 --> 00:32:51.767
is now my business person
can come and sit down

00:32:51.767 --> 00:32:53.734
and say, "I've got this idea."

00:32:53.734 --> 00:32:57.634
And you can put it together
very quickly, very powerfully.

00:32:57.634 --> 00:33:00.667
Put something out there.
It's elastic.

00:33:00.667 --> 00:33:02.634
You can start
to get immediate feedback

00:33:02.634 --> 00:33:05.167
from your customers on--
does this really work or not?

00:33:05.167 --> 00:33:06.801
And if it's a good idea,

00:33:06.801 --> 00:33:08.667
then you can start
to think about,

00:33:08.667 --> 00:33:10.000
"So what else do I need to do

00:33:10.000 --> 00:33:12.434
to really make this
enterprise ready?"

00:33:12.434 --> 00:33:15.934
This low barrier to entry
should enable a lot

00:33:15.934 --> 00:33:17.634
of innovation
in the businesses

00:33:17.634 --> 00:33:20.133
where they can start trying out
some of their ideas

00:33:20.133 --> 00:33:23.367
and throwing out
the nine out of ten

00:33:23.367 --> 00:33:27.868
or 99 out of 100
that don't work.

00:33:27.868 --> 00:33:30.033
Pay as you go.

00:33:30.033 --> 00:33:34.000
To me, one of the most
devastating effects

00:33:34.000 --> 00:33:37.033
of the last 15 years
on the I.T. department

00:33:37.033 --> 00:33:39.400
is the fact that businesses
started thinking

00:33:39.400 --> 00:33:41.501
of their I.T. departments
as cost centers.

00:33:41.501 --> 00:33:44.033
And so they drove costs down,

00:33:44.033 --> 00:33:45.901
and then all of a sudden
they say to their CIO,

00:33:45.901 --> 00:33:47.467
"Why can't you innovate?"

00:33:47.467 --> 00:33:49.434
And I can't innovate because

00:33:49.434 --> 00:33:51.234
you made me
standardize everything

00:33:51.234 --> 00:33:53.033
because it had to be cheap.

00:33:53.033 --> 00:33:55.501
When you start working
in this kind of environment

00:33:55.501 --> 00:33:57.334
with this pay as you go model,

00:33:57.334 --> 00:34:00.367
you got a lot more flex
on your spend.

00:34:00.367 --> 00:34:04.167
You don't have to invest
in a huge data center

00:34:04.167 --> 00:34:07.634
if you don't need it
all the time.

00:34:07.634 --> 00:34:10.834
One of our clients,
for example, they're a retailer.

00:34:10.834 --> 00:34:13.567
Everyone knows when retailers
make all their money.

00:34:13.567 --> 00:34:16.334
They spec'd all
of their data centers

00:34:16.334 --> 00:34:19.901
so that they could lose
50% of their servers

00:34:19.901 --> 00:34:22.400
and still handle peak load

00:34:22.400 --> 00:34:25.767
with no more than 70%
utilization.

00:34:25.767 --> 00:34:29.534
Just think of the waste
of all those servers

00:34:29.534 --> 00:34:33.534
running the other 51 weeks
out of the year.

00:34:33.534 --> 00:34:35.901
But that was what they
had to do to stay in business.

00:34:35.901 --> 00:34:38.467
They had to pay all that
upfront.

00:34:38.467 --> 00:34:42.567
License hardware
to handle peak season.

00:34:42.567 --> 00:34:46.334
In the pay as you go model,
you use that--

00:34:46.334 --> 00:34:47.968
you pay for only what
you need to use

00:34:47.968 --> 00:34:49.434
when you need to use it.

00:34:49.434 --> 00:34:52.033
This is also wonderful
as you're trying to get started.

00:34:52.033 --> 00:34:54.167
And I think it also
is going to enable

00:34:54.167 --> 00:34:55.968
a lot of this innovation
I was talking about

00:34:55.968 --> 00:34:58.000
where you can start
experimenting with things

00:34:58.000 --> 00:35:00.200
without having to invest
in a massive data center

00:35:00.200 --> 00:35:04.400
to support something that you
might not actually want to do.

00:35:04.400 --> 00:35:07.534
And economies of scale.

00:35:07.534 --> 00:35:09.868
I don't anymore have to worry

00:35:09.868 --> 00:35:12.667
about how much my data center
costs me

00:35:12.667 --> 00:35:15.501
because I'm sharing all
of my costs with everybody else.

00:35:15.501 --> 00:35:19.701
And we can have people who can
be experts at these things.

00:35:19.701 --> 00:35:22.601
Let's face it, even a lot
of larger enterprises,

00:35:22.601 --> 00:35:25.868
they don't have the wherewithal
to have someone

00:35:25.868 --> 00:35:31.400
who's really an expert
in Oracle and in WebSphere

00:35:31.400 --> 00:35:34.834
and in BizTalk
and in SharePoint

00:35:34.834 --> 00:35:36.000
and on and on and on.

00:35:36.000 --> 00:35:37.834
And all of these enterprises,
they have

00:35:37.834 --> 00:35:41.767
to pick and choose where that
expertise is gonna come from.

00:35:41.767 --> 00:35:44.033
You pool
all those things together,

00:35:44.033 --> 00:35:47.334
and these cloud providers,
they do have the need

00:35:47.334 --> 00:35:49.567
for those
specialized resources,

00:35:49.567 --> 00:35:51.400
and we can start spreading
the cost of that

00:35:51.400 --> 00:35:53.834
so I don't have to worry
about it myself.

00:35:53.834 --> 00:35:56.100
And I don't have to make
those hard choices

00:35:56.100 --> 00:35:59.267
of, "Okay, I'm not gonna have
an expert in this."

00:35:59.267 --> 00:36:02.067
And when I get
into a world of hurt

00:36:02.067 --> 00:36:04.367
then I'm gonna have to go,
hat in hand,

00:36:04.367 --> 00:36:07.100
to one of my providers
and let them charge me

00:36:07.100 --> 00:36:09.567
ridiculous rates
because I'm in trouble.

00:36:09.567 --> 00:36:11.667
So those are
the kind of benefits.

00:36:11.667 --> 00:36:14.634
And you can see those benefits,
and they go across

00:36:14.634 --> 00:36:17.133
that entire space really
of different cloud offerings.

00:36:17.133 --> 00:36:21.434
Some of them have
more of an effect,

00:36:21.434 --> 00:36:23.501
say, on the more
application-specific one.

00:36:23.501 --> 00:36:26.567
But in general,
these benefits accrue

00:36:26.567 --> 00:36:30.868
regardless of where you are
in that continuum of clouds.

00:36:30.868 --> 00:36:32.901
This is also how
I start to think about--

00:36:32.901 --> 00:36:35.133
when is something
no longer a cloud?

00:36:35.133 --> 00:36:37.834
If you don't have all
of these capabilities,

00:36:37.834 --> 00:36:42.901
you're not really
in the cloud.

00:36:42.901 --> 00:36:45.267
So that's really a framework
of thinking about

00:36:45.267 --> 00:36:47.767
what the cloud is offering,

00:36:47.767 --> 00:36:50.167
what are some possibilities
for when you might

00:36:50.167 --> 00:36:51.934
really want to use it.

00:36:51.934 --> 00:36:55.000
Now, let's talk about some
of these concerns for a minute.

00:36:55.000 --> 00:36:57.534
As I said before,
there are a whole lot

00:36:57.534 --> 00:37:00.167
of enterprises that are far more
on that late adoption part

00:37:00.167 --> 00:37:02.400
of the curve.

00:37:02.400 --> 00:37:04.667
They'll let
somebody else experiment.

00:37:04.667 --> 00:37:07.334
We know several people
who would never dream

00:37:07.334 --> 00:37:09.501
of installing
a piece of software

00:37:09.501 --> 00:37:12.000
until it was
at least version 2.2.

00:37:12.000 --> 00:37:14.534
And I've had some who say,

00:37:14.534 --> 00:37:16.300
"Come talk to me when it's 5.

00:37:16.300 --> 00:37:18.868
"All those other ones,
you know?

00:37:18.868 --> 00:37:20.734
"They got to figure out
lots of stuff

00:37:20.734 --> 00:37:25.300
before I'm gonna risk
my enterprise."

00:37:25.300 --> 00:37:27.634
This is the standard one.

00:37:27.634 --> 00:37:32.501
Security, privacy,
and intellectual property.

00:37:32.501 --> 00:37:34.634
These are all variations
on a theme.

00:37:34.634 --> 00:37:37.367
But the first thing
to realize

00:37:37.367 --> 00:37:39.300
is how many times
when you hear on the news,

00:37:39.300 --> 00:37:43.367
"Yes, somebody just got their
database compromised again."

00:37:43.367 --> 00:37:45.634
You've got 2 million people
who now

00:37:45.634 --> 00:37:47.267
have their credit cards
cancelled

00:37:47.267 --> 00:37:49.267
and have to call everybody
because everybody

00:37:49.267 --> 00:37:52.434
has all their bills going
to their credit cards now.

00:37:52.434 --> 00:37:54.400
You don't hear them
talking about the fact

00:37:54.400 --> 00:37:58.767
that that data center
was hosted by IBM or EDS.

00:37:58.767 --> 00:38:03.000
You hear, "It's the institution
that lost the data."

00:38:03.000 --> 00:38:06.734
So here you're asking
an enterprise,

00:38:06.734 --> 00:38:10.200
with all of this value
in their market presence,

00:38:10.200 --> 00:38:15.367
to turn over complete control
of something that valuable

00:38:15.367 --> 00:38:17.300
to a different organization.

00:38:17.300 --> 00:38:19.501
It doesn't matter who it is.

00:38:19.501 --> 00:38:22.400
They're having to turn this over
to a different organization,

00:38:22.400 --> 00:38:24.934
and that's a scary thought
for enterprises.

00:38:24.934 --> 00:38:28.334
Yes, they aren't perfect
in protecting that, obviously,

00:38:28.334 --> 00:38:30.100
but at least
they have control.

00:38:30.100 --> 00:38:32.267
And if their reputation
gets trashed,

00:38:32.267 --> 00:38:34.601
they can fire someone.

00:38:34.601 --> 00:38:36.801
Yes, bye-bye, CIO.
It's your fault.

00:38:36.801 --> 00:38:39.234
I've got my sacrificial lamb.

00:38:39.234 --> 00:38:41.601
Now we can go back
and start to repair the damage.

00:38:41.601 --> 00:38:44.868
Enterprises worry
about things like that.

00:38:44.868 --> 00:38:48.434
And so they're gonna be hesitant
to turn over responsibility

00:38:48.434 --> 00:38:50.834
for something like that
to someone that they don't have

00:38:50.834 --> 00:38:54.534
a really big stick
to hold over.

00:38:54.534 --> 00:38:56.234
That's why
a lot of those SLAs

00:38:56.234 --> 00:38:59.434
that are in these
outsourced I.T. arrangements

00:38:59.434 --> 00:39:01.067
are so stringent.

00:39:01.067 --> 00:39:03.267
The enterprises at least feel
like they have a stick

00:39:03.267 --> 00:39:06.200
even if, in effect,
they don't.

00:39:06.200 --> 00:39:08.968
And then privacy.

00:39:08.968 --> 00:39:13.834
How is my data
going to be protected?

00:39:13.834 --> 00:39:16.601
How am I going
to ensure my customers

00:39:16.601 --> 00:39:19.067
that other people
aren't looking at that data?

00:39:19.067 --> 00:39:22.100
Or how am I
going to assure my CEO

00:39:22.100 --> 00:39:25.100
that my competitor can't get
to my customer database?

00:39:25.100 --> 00:39:27.968
So all kinds
of related items

00:39:27.968 --> 00:39:30.501
around--
just how secure is my data?

00:39:30.501 --> 00:39:33.501
I know if I've got it
locked away in my data center,

00:39:33.501 --> 00:39:36.200
I've got it protected and
I know what's happening to it.

00:39:36.200 --> 00:39:39.167
Now you're asking enterprise
to turn over

00:39:39.167 --> 00:39:41.634
what is arguably one
of their most valuable assets

00:39:41.634 --> 00:39:47.367
to somebody else
and let them take care of it.

00:39:47.367 --> 00:39:49.434
Next one
I hear a fair amount is,

00:39:49.434 --> 00:39:51.033
"Is it really cheaper?"

00:39:51.033 --> 00:39:52.367
You see
all these wonderful slides

00:39:52.367 --> 00:39:54.634
and okay, now we don't
have to pay for software

00:39:54.634 --> 00:39:56.133
and we don't have to pay
for hardware.

00:39:56.133 --> 00:39:58.367
Is it really cheaper?

00:39:58.367 --> 00:40:00.501
From an enterprise perspective,
when you start

00:40:00.501 --> 00:40:01.934
to think about this,

00:40:01.934 --> 00:40:05.033
a lot of those other slides
rely on the fact

00:40:05.033 --> 00:40:07.634
that pretty much everything's
going to the cloud.

00:40:07.634 --> 00:40:10.801
All my email, all my document,
all my collaboration,

00:40:10.801 --> 00:40:13.601
all my books, all of that stuff
is going to the cloud.

00:40:13.601 --> 00:40:15.667
As soon as it's not all,

00:40:15.667 --> 00:40:20.100
you're still left with servers
that you have to worry about.

00:40:20.100 --> 00:40:22.234
You're still left
with ops people

00:40:22.234 --> 00:40:23.834
that you still have to pay.

00:40:23.834 --> 00:40:26.734
So how much of this stuff
really has to go to the cloud

00:40:26.734 --> 00:40:29.501
before I start saving money?

00:40:29.501 --> 00:40:32.968
A lot of that's gonna depend
on the shape of the enterprise,

00:40:32.968 --> 00:40:35.234
how much--what
their other arrangements are.

00:40:35.234 --> 00:40:37.567
But there's still
this nagging doubt.

00:40:37.567 --> 00:40:39.834
"I keep hearing this stuff's
gonna save me money.

00:40:39.834 --> 00:40:44.968
And it never does, so why
should I believe it here?"

00:40:44.968 --> 00:40:46.968
I love this one.

00:40:46.968 --> 00:40:50.033
"But I'm gonna have to
reorganize my I.T. department."

00:40:50.033 --> 00:40:53.100
To which I say, "Good.
You probably need to."

00:40:53.100 --> 00:40:54.501
But let's face it.

00:40:54.501 --> 00:40:57.734
As soon as you start relying
on something like the cloud,

00:40:57.734 --> 00:41:01.400
your needs internally are going
to change a great deal.

00:41:01.400 --> 00:41:04.200
You might need
different kinds of people.

00:41:04.200 --> 00:41:06.567
In fact, you probably will need
different kinds of people,

00:41:06.567 --> 00:41:07.901
then that means
you're going to need

00:41:07.901 --> 00:41:09.400
a different
I.T. organization.

00:41:09.400 --> 00:41:11.334
This is not bad.

00:41:11.334 --> 00:41:16.434
But some organizations just
like to reorg. just because.

00:41:16.434 --> 00:41:17.667
Because it's fun.

00:41:17.667 --> 00:41:18.934
They like to print
new word charts.

00:41:18.934 --> 00:41:21.400
But these are
pretty disruptive activities

00:41:21.400 --> 00:41:23.434
for an enterprise to take on.

00:41:23.434 --> 00:41:27.033
And so even though it shouldn't
be that much of a problem,

00:41:27.033 --> 00:41:30.467
enterprises worry
about things like this.

00:41:30.467 --> 00:41:33.234
And, of course, at least
the enterprise architects

00:41:33.234 --> 00:41:34.901
will have something new to do
because they'll have

00:41:34.901 --> 00:41:37.167
to write a whole series
of new standards.

00:41:37.167 --> 00:41:39.968
How do you use the cloud?

00:41:39.968 --> 00:41:42.167
Which one of these features
can I really use?

00:41:42.167 --> 00:41:47.400
When should I
really expose BigTable?

00:41:47.400 --> 00:41:49.133
What are my standards?

00:41:49.133 --> 00:41:50.634
Of course
you need new standards.

00:41:50.634 --> 00:41:52.434
You're dealing
in a different platform.

00:41:52.434 --> 00:41:55.200
This is not a barrier,
but it's just another thing

00:41:55.200 --> 00:41:59.067
that an enterprise has to do.

00:41:59.067 --> 00:42:01.267
And the ever-popular
vendor lock in.

00:42:01.267 --> 00:42:07.534
If I go to Google App Engine,
well, then all of a sudden

00:42:07.534 --> 00:42:10.400
now they've
jacked up the prices

00:42:10.400 --> 00:42:11.767
by an order of magnitude,

00:42:11.767 --> 00:42:14.000
and I'm locked
into my cloud vendor.

00:42:14.000 --> 00:42:15.634
You're not locked
into a cloud vendor

00:42:15.634 --> 00:42:17.601
any more than you're locked
into any other vendor

00:42:17.601 --> 00:42:19.200
in your space,
and that hasn't stopped anybody

00:42:19.200 --> 00:42:22.167
from buying Oracle
or anything else.

00:42:22.167 --> 00:42:27.267
So yes, it does mean
that if you're on App Engine

00:42:27.267 --> 00:42:29.400
and you decide
you want to leave App Engine,

00:42:29.400 --> 00:42:30.801
you might have
to port something.

00:42:30.801 --> 00:42:34.901
I don't see how that's
significantly different.

00:42:34.901 --> 00:42:39.400
So the theme here is
yes, there are barriers

00:42:39.400 --> 00:42:41.801
that a large enterprise
is gonna have to get over.

00:42:41.801 --> 00:42:45.734
There's probably some things
in the security and I.T. space,

00:42:45.734 --> 00:42:48.534
particularly in demonstrating

00:42:48.534 --> 00:42:50.501
not just through
a legal document,

00:42:50.501 --> 00:42:55.667
but generating through tests
or other activities

00:42:55.667 --> 00:42:57.567
where you might actually say,

00:42:57.567 --> 00:43:00.300
"Okay, I'm gonna go
to one of the hacker conferences

00:43:00.300 --> 00:43:01.901
"and I'm going
to put a bounty on somebody

00:43:01.901 --> 00:43:03.701
who can break
into this system."

00:43:03.701 --> 00:43:06.133
So that I can start exploring
the vulnerabilities

00:43:06.133 --> 00:43:08.567
of my system so these
enterprises can start to think,

00:43:08.567 --> 00:43:10.334
"You know, if it's
that hard to break into,

00:43:10.334 --> 00:43:12.033
"maybe it is all right
for them to start

00:43:12.033 --> 00:43:13.601
keeping track of my data."

00:43:13.601 --> 00:43:15.834
But in general,
a lot of these things

00:43:15.834 --> 00:43:18.400
are just internal processes
and changes

00:43:18.400 --> 00:43:24.033
that an enterprise
is going to have to absorb.

00:43:24.033 --> 00:43:26.434
So those are the concerns.

00:43:26.434 --> 00:43:28.667
So how do we recommend
enterprises start

00:43:28.667 --> 00:43:30.601
to get over this?

00:43:30.601 --> 00:43:34.501
And I do think that a lot of
them are going to start to try.

00:43:34.501 --> 00:43:36.667
You're not gonna see them
putting

00:43:36.667 --> 00:43:41.501
their huge enterprise internal
systems on there day one.

00:43:41.501 --> 00:43:43.133
Not gonna happen.

00:43:43.133 --> 00:43:44.601
But I do think there are
several paths

00:43:44.601 --> 00:43:46.267
that they can take.

00:43:46.267 --> 00:43:49.167
And the first one is what
I was talking about earlier.

00:43:49.167 --> 00:43:51.400
With such a low barrier
to entry,

00:43:51.400 --> 00:43:54.400
I'm sure in many
of these enterprises,

00:43:54.400 --> 00:43:57.501
there are all kinds of people
with really great ideas

00:43:57.501 --> 00:44:00.234
that just need the ability
to start to deploy.

00:44:00.234 --> 00:44:02.000
And what's the common refrain
we hear?

00:44:02.000 --> 00:44:04.534
"It takes so long for I.T.
to do anything."

00:44:04.534 --> 00:44:07.567
Well, a forward-thinking CIO
would say,

00:44:07.567 --> 00:44:09.234
"Well, let me
start to use this

00:44:09.234 --> 00:44:12.767
and some of those ideas that
the CEO keeps tossing at me."

00:44:12.767 --> 00:44:14.534
Start to experiment
with some of this

00:44:14.534 --> 00:44:16.534
so I can get
quicker turnaround

00:44:16.534 --> 00:44:19.667
and I can start to provide
value back to my enterprise

00:44:19.667 --> 00:44:21.868
as well as I can start
to get comfortable

00:44:21.868 --> 00:44:26.868
with this thing called
App Engine.

00:44:26.868 --> 00:44:29.400
Big Ticket Single Shot.

00:44:29.400 --> 00:44:32.868
One of the most--
more compelling stories I heard

00:44:32.868 --> 00:44:35.334
at QCon last year
was the description

00:44:35.334 --> 00:44:37.067
of a data migration.

00:44:37.067 --> 00:44:39.634
Massive amount of data.

00:44:39.634 --> 00:44:42.901
They would've had to buy
huge servers to make this work.

00:44:42.901 --> 00:44:44.167
And they ran it in the cloud

00:44:44.167 --> 00:44:46.501
and it cost them about $20.

00:44:46.501 --> 00:44:49.767
Now, yes, that means
some of this very valuable

00:44:49.767 --> 00:44:52.534
enterprise data has to be
on the cloud for a little while,

00:44:52.534 --> 00:44:55.234
but you're not leaving it there
for very long.

00:44:55.234 --> 00:44:57.634
I can maybe get behind that,
particularly if you tell me

00:44:57.634 --> 00:44:59.601
I don't have to buy
a bunch of servers

00:44:59.601 --> 00:45:01.634
or rent a bunch of servers
and set them up

00:45:01.634 --> 00:45:04.100
and tear them down
and all of that kind of stuff.

00:45:04.100 --> 00:45:05.567
So I think this is another one

00:45:05.567 --> 00:45:10.734
where there's very high value,
single or nonrecurring

00:45:10.734 --> 00:45:15.934
application rungs where again
you can start to demonstrate,

00:45:15.934 --> 00:45:18.868
okay, this thing
really does work.

00:45:18.868 --> 00:45:20.834
I'm starting to get
a rhythm within my enterprise

00:45:20.834 --> 00:45:26.968
of making use of this new kind
of computational asset.

00:45:26.968 --> 00:45:29.968
Focusing on what matters.

00:45:29.968 --> 00:45:32.701
This is particularly important
for smaller organizations

00:45:32.701 --> 00:45:34.934
and you hear it
in enterprise speak.

00:45:34.934 --> 00:45:37.801
Focus on
your core competencies.

00:45:37.801 --> 00:45:41.167
Why should an enterprise
that's trying to spin up

00:45:41.167 --> 00:45:42.534
a completely new line
of business

00:45:42.534 --> 00:45:44.367
have to worry about things
like data centers?

00:45:44.367 --> 00:45:46.300
They don't worry
about plumbing.

00:45:46.300 --> 00:45:48.334
They don't worry
about the cleaning help.

00:45:48.334 --> 00:45:52.367
Some of these activities
are at that utility

00:45:52.367 --> 00:45:54.167
or infrastructural level.

00:45:54.167 --> 00:45:58.334
Let's not let my creative types
and my management bandwidth

00:45:58.334 --> 00:46:01.701
go at managing something that
someone else can take care of.

00:46:01.701 --> 00:46:04.501
Let me focus on things
that are important to me.

00:46:04.501 --> 00:46:07.934
What's my differentiator
in the marketplace?

00:46:07.934 --> 00:46:10.834
How am I going to address
my customers?

00:46:10.834 --> 00:46:14.200
How can I have this better
relationship with my customer?

00:46:14.200 --> 00:46:16.701
That's what enterprises
ought to be focusing on

00:46:16.701 --> 00:46:21.801
rather than thinking about
things like a data center.

00:46:21.801 --> 00:46:23.467
Fowler:
And this is also--

00:46:23.467 --> 00:46:25.968
we see
a considerable intersection

00:46:25.968 --> 00:46:30.367
between cloud computing
and agile software processes.

00:46:30.367 --> 00:46:32.400
And we've been
very heavily involved

00:46:32.400 --> 00:46:34.167
in agile software processes.

00:46:34.167 --> 00:46:37.634
We've been doing them
since the very early days.

00:46:37.634 --> 00:46:39.267
In the early days we'd kind
of have to do them in secret.

00:46:39.267 --> 00:46:41.501
Now we're doing them
much more visibly.

00:46:41.501 --> 00:46:43.934
And there's a number
of areas, I think,

00:46:43.934 --> 00:46:45.501
where the cloud
can help us with this.

00:46:45.501 --> 00:46:48.501
One particular area
is looking into how it affects

00:46:48.501 --> 00:46:51.167
work in deploying
into production.

00:46:51.167 --> 00:46:55.400
We are quite used to the fact
that we regularly deploy

00:46:55.400 --> 00:46:58.567
applications into production
and roll them over

00:46:58.567 --> 00:47:00.434
every couple of weeks or so.

00:47:00.434 --> 00:47:03.033
Even a fairly big project
like the &lt;i&gt;Guardian&lt;/i&gt; online,

00:47:03.033 --> 00:47:06.267
we might have 40 or 50 people
in the development team,

00:47:06.267 --> 00:47:08.133
but we're redeploying
into production

00:47:08.133 --> 00:47:09.801
every couple of weeks or so,

00:47:09.801 --> 00:47:11.968
or sometimes
even more frequently.

00:47:11.968 --> 00:47:13.501
In that kind of situation,

00:47:13.501 --> 00:47:16.567
deployment can be
a real pain in the neck.

00:47:16.567 --> 00:47:19.100
For a cloud system,
this can actually make things

00:47:19.100 --> 00:47:20.200
a lot more straightforward

00:47:20.200 --> 00:47:22.767
because we have
the kind of infrastructure

00:47:22.767 --> 00:47:25.634
that allows us to deploy
quickly into the cloud,

00:47:25.634 --> 00:47:27.334
often not
with some of the hassles

00:47:27.334 --> 00:47:29.234
that we might have from
some of the I.T. departments

00:47:29.234 --> 00:47:31.868
we've known over the years.

00:47:31.868 --> 00:47:35.434
Another very interesting
property of using the cloud here

00:47:35.434 --> 00:47:37.367
is to enable testing.

00:47:37.367 --> 00:47:38.934
I've commented about the fact
that testing

00:47:38.934 --> 00:47:40.567
is actually a bit
of an issue at the moment

00:47:40.567 --> 00:47:41.968
because of the difficulty
of getting that

00:47:41.968 --> 00:47:43.601
local test server.

00:47:43.601 --> 00:47:46.434
But one area where the cloud
can be really nice

00:47:46.434 --> 00:47:49.200
is it doesn't cost us
very much to spin up

00:47:49.200 --> 00:47:52.767
as many instances as we want
to be able to run tests.

00:47:52.767 --> 00:47:54.734
And we find this
at the moment

00:47:54.734 --> 00:47:57.100
with our Mingle project
collaboration tool.

00:47:57.100 --> 00:48:01.434
It's written once
but then it has to deploy

00:48:01.434 --> 00:48:03.434
on various different
operating systems--

00:48:03.434 --> 00:48:05.868
the Mac, Linux, Windows,

00:48:05.868 --> 00:48:08.067
various flavors of Windows.

00:48:08.067 --> 00:48:09.734
It's got to work
on all of these browsers.

00:48:09.734 --> 00:48:13.467
It's got to work on Firefox
and Safari and Chrome,

00:48:13.467 --> 00:48:15.767
and it's got to work
on that big browser

00:48:15.767 --> 00:48:17.434
that they damned mentioned
this morning,

00:48:17.434 --> 00:48:18.868
that they
make up in Redmond.

00:48:18.868 --> 00:48:21.701
And some old versions of that
can be a little bit tricky.

00:48:21.701 --> 00:48:24.534
Now you just do the math
of the combinatorial explosion

00:48:24.534 --> 00:48:26.434
of all of that and that's
a hell of a lot of servers

00:48:26.434 --> 00:48:28.067
you need to run tests.

00:48:28.067 --> 00:48:29.167
Perfect case for the cloud.

00:48:29.167 --> 00:48:30.567
Spin them all up,
run the tests,

00:48:30.567 --> 00:48:32.567
and you get rapid feedback.

00:48:32.567 --> 00:48:34.067
And, of course,
rapid feedback is the key

00:48:34.067 --> 00:48:39.434
to what you want
from this kind of testing.

00:48:39.434 --> 00:48:41.300
Parsons: And, of course,
the businesses

00:48:41.300 --> 00:48:43.300
who are always frustrated
with how slow

00:48:43.300 --> 00:48:45.334
I.T. departments are--
well, this gives you

00:48:45.334 --> 00:48:47.767
a much easier route
to work around.

00:48:47.767 --> 00:48:50.000
Now, we've actually gotten
fairly adept at getting around

00:48:50.000 --> 00:48:51.667
corporate I.T. departments

00:48:51.667 --> 00:48:54.501
with some of the client
relationships that we've had.

00:48:54.501 --> 00:48:56.367
But that's
a whole lot more difficult

00:48:56.367 --> 00:48:58.400
for a marketing manager
and such.

00:48:58.400 --> 00:49:01.167
And with something--with,
again, the low barrier to entry

00:49:01.167 --> 00:49:03.234
that Google App Engine has,

00:49:03.234 --> 00:49:07.400
now this person has
the ability to work around I.T.

00:49:07.400 --> 00:49:09.100
in a way they
haven't had to before

00:49:09.100 --> 00:49:10.534
or hadn't been able to before

00:49:10.534 --> 00:49:13.567
because I.T. owns the passwords
and they own the servers

00:49:13.567 --> 00:49:15.901
and they own the firewalls
and all of these things.

00:49:15.901 --> 00:49:18.601
You've got a lot more power
that is being pushed

00:49:18.601 --> 00:49:22.033
to the various business units
working in this model.

00:49:22.033 --> 00:49:24.000
Fowler: And this is nary
a history course

00:49:24.000 --> 00:49:25.534
teaching you
just something interesting.

00:49:25.534 --> 00:49:27.000
All of those kinds of concerns

00:49:27.000 --> 00:49:28.400
that were being talked about,

00:49:28.400 --> 00:49:30.467
they might sound
kind of familiar

00:49:30.467 --> 00:49:33.300
to those of you
with gray or little hair

00:49:33.300 --> 00:49:35.133
in the way that we are

00:49:35.133 --> 00:49:37.234
because we kind of heard
this argument before.

00:49:37.234 --> 00:49:39.367
This is, I think, a point
that Tim Bray pointed out

00:49:39.367 --> 00:49:40.667
really well on his blog.

00:49:40.667 --> 00:49:43.868
This was exactly the arguments
against the use of PCs.

00:49:43.868 --> 00:49:45.367
I.T. departments saying,

00:49:45.367 --> 00:49:46.834
"Oh, we can't have PCs.

00:49:46.834 --> 00:49:49.567
They're never gonna spread
for all these kinds of reasons."

00:49:49.567 --> 00:49:55.868
Well, draw a lesson
from history.

00:49:55.868 --> 00:49:58.534
Parsons: And the ever popular
quick and dirty,

00:49:58.534 --> 00:50:01.167
but in this case,
quick and not so dirty.

00:50:01.167 --> 00:50:02.901
You can actually
get some of these things up

00:50:02.901 --> 00:50:05.667
fairly quickly
and still maintain a fair amount

00:50:05.667 --> 00:50:07.534
of development rigor
and discipline.

00:50:07.534 --> 00:50:11.901
So yes, I'm sure it's possible
to write something very messy

00:50:11.901 --> 00:50:16.167
and awful and unmaintainable
in Google App Engine

00:50:16.167 --> 00:50:18.767
just like you can in every
other development platform

00:50:18.767 --> 00:50:21.200
known to man and even every one
that's probably

00:50:21.200 --> 00:50:23.334
still to be written.

00:50:23.334 --> 00:50:27.167
But you do have some pretty
powerful tools available

00:50:27.167 --> 00:50:30.000
that will allow you
to put something up quickly

00:50:30.000 --> 00:50:32.734
but not have to make
a lot of the compromises

00:50:32.734 --> 00:50:38.067
that we often have to make.

00:50:38.067 --> 00:50:40.601
And how much capacity
do I really need?

00:50:40.601 --> 00:50:43.000
The number of times
I've been asked by clients,

00:50:43.000 --> 00:50:46.000
"Well, can you tell me what
my data center capacity

00:50:46.000 --> 00:50:47.901
needs to be?"

00:50:47.901 --> 00:50:51.033
Well, can you give me
an accurate business forecast

00:50:51.033 --> 00:50:54.767
for the next 18 months
on what all of your activity

00:50:54.767 --> 00:50:56.801
at any given point in time
is going to look like?

00:50:56.801 --> 00:50:59.100
No.

00:50:59.100 --> 00:51:02.300
This same graph was the one
that was shown this morning

00:51:02.300 --> 00:51:03.501
in the keynote.

00:51:03.501 --> 00:51:06.434
This is the load
that was put onto the server

00:51:06.434 --> 00:51:11.934
when Obama's
town hall was done.

00:51:11.934 --> 00:51:15.968
Now think of what the poor
data center ops person

00:51:15.968 --> 00:51:19.133
would have to do
to be able to have that peak

00:51:19.133 --> 00:51:23.267
that's 1/2 an order
of magnitude greater

00:51:23.267 --> 00:51:26.634
than where that normal line
is down at the bottom.

00:51:26.634 --> 00:51:29.400
You're gonna have an awful lot
of very nervous people

00:51:29.400 --> 00:51:32.334
running around,
and you probably had to have,

00:51:32.334 --> 00:51:34.968
once again, built a data center
that could handle

00:51:34.968 --> 00:51:36.501
that capacity.

00:51:36.501 --> 00:51:38.701
That is if you actually thought
about it far enough in advance

00:51:38.701 --> 00:51:40.767
to be able to provision it.

00:51:40.767 --> 00:51:44.234
When you have no idea what your
profile's going to look like,

00:51:44.234 --> 00:51:46.601
you have no way
to plan a data center.

00:51:46.601 --> 00:51:50.634
You don't have to
in this model.

00:51:50.634 --> 00:51:54.200
And it can be throttled--
so back to that poor retailer

00:51:54.200 --> 00:51:56.000
who had to build
the huge data center

00:51:56.000 --> 00:51:58.200
that sat idle
for most of the year.

00:51:58.200 --> 00:52:01.167
You can run
at your base level

00:52:01.167 --> 00:52:03.033
for the vast majority
of the time,

00:52:03.033 --> 00:52:06.334
and it's only ratcheted up
when you need it.

00:52:06.334 --> 00:52:07.934
Through quotas and other things
like that,

00:52:07.934 --> 00:52:09.701
you could even
control this yourself

00:52:09.701 --> 00:52:13.100
to make sure that resources
are being utilized properly.

00:52:13.100 --> 00:52:17.267
So you have a lot finer control
over what your I.T. spend is

00:52:17.267 --> 00:52:19.267
and so the CIO
can start focusing

00:52:19.267 --> 00:52:20.834
on doing interesting things
rather than just

00:52:20.834 --> 00:52:24.634
keeping costs down.

00:52:24.634 --> 00:52:28.133
So those are the kinds of ways
that I can see

00:52:28.133 --> 00:52:30.234
even some of the more
conservative enterprises

00:52:30.234 --> 00:52:33.067
start to think
about using this, okay?

00:52:33.067 --> 00:52:37.334
Well, let's let loose
my marketing department.

00:52:37.334 --> 00:52:39.767
We need new market share
right now.

00:52:39.767 --> 00:52:41.267
We need new ideas.

00:52:41.267 --> 00:52:43.968
The expectations
from customers are tremendous.

00:52:43.968 --> 00:52:45.901
So let's enable
some of these people

00:52:45.901 --> 00:52:48.000
to start coming up
with some of these ideas

00:52:48.000 --> 00:52:50.100
and deploy them in the cloud.

00:52:50.100 --> 00:52:53.334
Or some of these
testing applications.

00:52:53.334 --> 00:52:56.701
Let's make my application
more solid,

00:52:56.701 --> 00:52:58.968
so again, my customers
won't be as unhappy.

00:52:58.968 --> 00:53:01.033
These are the kinds of things
that enterprises

00:53:01.033 --> 00:53:04.734
will start thinking about
and start to feel comfortable

00:53:04.734 --> 00:53:09.868
using this strange thing
called the cloud.

00:53:09.868 --> 00:53:13.133
Fowler: So that's
our prepared text as it were.

00:53:13.133 --> 00:53:15.501
We have a little bit of time
left for questions.

00:53:15.501 --> 00:53:16.968
So if you've got them,
please do,

00:53:16.968 --> 00:53:19.467
but come up to the mic
so that the cameraman

00:53:19.467 --> 00:53:22.834
can capture your questions
for posterity.

00:53:22.834 --> 00:53:24.334
Okay, go ahead.

00:53:24.334 --> 00:53:26.133
man: Hi, I have
a two part question.

00:53:26.133 --> 00:53:29.200
First part is I know
you've been working a lot

00:53:29.200 --> 00:53:32.534
on the main
specific languages, DSL.

00:53:32.534 --> 00:53:35.167
And I would like to know
if it has a parallel

00:53:35.167 --> 00:53:37.534
with what you're doing
with the Google Apps Engine.

00:53:37.534 --> 00:53:40.400
And the second part
of my question

00:53:40.400 --> 00:53:44.334
is just as Salesforce
has moved to the cloud,

00:53:44.334 --> 00:53:49.667
will your P systems
move to the cloud as well,

00:53:49.667 --> 00:53:53.834
either with Google Apps Engine
or some other system?

00:53:53.834 --> 00:53:56.067
Do you see them moving
to the cloud?

00:53:56.067 --> 00:53:58.267
Fowler: Two very different
questions.

00:53:58.267 --> 00:53:59.567
You take the first.

00:53:59.567 --> 00:54:03.801
Parsons: Yeah, so if you go back
to that infrastructure,

00:54:03.801 --> 00:54:07.367
platform application
specific space,

00:54:07.367 --> 00:54:10.501
I actually see DSLs
playing in that area

00:54:10.501 --> 00:54:12.167
between the platform
and the application space

00:54:12.167 --> 00:54:16.567
where you would start to see
those specific languages

00:54:16.567 --> 00:54:21.067
being constructed
to enable a narrower range

00:54:21.067 --> 00:54:24.300
of development to go on
on those specialized clouds.

00:54:24.300 --> 00:54:27.334
So I see there's a lot of
potential in that space there

00:54:27.334 --> 00:54:30.634
for people to start
putting up, again,

00:54:30.634 --> 00:54:35.334
domain-specific application
platforms in the clouds,

00:54:35.334 --> 00:54:37.067
leveraging things
like things like DSLs.

00:54:37.067 --> 00:54:38.901
Fowler: And also,
I think, there's--

00:54:38.901 --> 00:54:41.734
another interesting potential
synergy in the DSL space

00:54:41.734 --> 00:54:45.400
is one of the
on the edge interesting things

00:54:45.400 --> 00:54:47.734
in the main specific languages
is the classic tools

00:54:47.734 --> 00:54:49.167
called Language Workbenches,

00:54:49.167 --> 00:54:51.033
which are basically tools
that allow you to build

00:54:51.033 --> 00:54:54.667
your own DSLs and editing
environments that go with them.

00:54:54.667 --> 00:54:57.667
Those are actually
very well placed

00:54:57.667 --> 00:55:00.834
to try and provide you
the abstractions

00:55:00.834 --> 00:55:03.367
that will allow you to deploy
to a cloud environment

00:55:03.367 --> 00:55:06.267
with a little bit more
hiding of what's going on.

00:55:06.267 --> 00:55:08.267
And that could be
quite interesting

00:55:08.267 --> 00:55:10.100
because of the fact
that you've got a new tool

00:55:10.100 --> 00:55:11.734
and a new
deployment environment

00:55:11.734 --> 00:55:14.868
that's shaking up the world
enough to where I think the two

00:55:14.868 --> 00:55:16.567
could go
quite interestingly together.

00:55:16.567 --> 00:55:20.567
On the second question,
will the ARP vendors

00:55:20.567 --> 00:55:21.534
be moving to cloud?

00:55:21.534 --> 00:55:22.801
I would expect so, certainly.

00:55:22.801 --> 00:55:24.834
I mean, it's gonna be--

00:55:24.834 --> 00:55:27.133
I can't imagine why
if you're going to build

00:55:27.133 --> 00:55:29.634
and bring in an ARP vendor,
you're not gonna want

00:55:29.634 --> 00:55:32.234
to just shift all of
the managing of the data center

00:55:32.234 --> 00:55:34.367
over to a company
that specializes in it.

00:55:34.367 --> 00:55:38.734
I mean, the historic route
is you get these specializations

00:55:38.734 --> 00:55:41.567
of activity and I don't see
why running data centers

00:55:41.567 --> 00:55:43.300
is any exception.

00:55:43.300 --> 00:55:46.000
I would be very surprised
if in, say, 10, 20 years

00:55:46.000 --> 00:55:51.167
we still see significant
data centers held by companies.

00:55:51.167 --> 00:55:53.634
Because I think that
specialization could come.

00:55:53.634 --> 00:55:56.701
Parsons: The greater
complication there

00:55:56.701 --> 00:55:59.267
is so many enterprises
have customized

00:55:59.267 --> 00:56:02.133
their S.A.P. or their
PeopleSoft implementations

00:56:02.133 --> 00:56:04.467
to be very specific
to their business processes.

00:56:04.467 --> 00:56:08.234
And the effort that it would
take to migrate those

00:56:08.234 --> 00:56:10.067
into a cloud environment,

00:56:10.067 --> 00:56:11.534
unless they still have
all the same kinds

00:56:11.534 --> 00:56:12.934
of knobs to turn as they have

00:56:12.934 --> 00:56:15.801
in a standalone ERP
implementation,

00:56:15.801 --> 00:56:19.601
you're probably gonna see
a great deal of pain

00:56:19.601 --> 00:56:21.167
in the migration process.

00:56:21.167 --> 00:56:22.534
But I agree with Martin.

00:56:22.534 --> 00:56:24.534
It is going to happen.
It's just a matter of time.

00:56:24.534 --> 00:56:26.033
There are fewer knobs to turn

00:56:26.033 --> 00:56:27.667
in things
like the CRM environment.

00:56:27.667 --> 00:56:33.501
And I think that's why
the adoption into Salesforce

00:56:33.501 --> 00:56:36.200
has been greater than you
might've expected otherwise.

00:56:36.200 --> 00:56:37.634
If you think about it,

00:56:37.634 --> 00:56:39.434
that's a pretty valuable
enterprise asset.

00:56:39.434 --> 00:56:43.000
On the other hand,
the typical sales cycle

00:56:43.000 --> 00:56:44.701
doesn't vary as much.

00:56:44.701 --> 00:56:46.734
When you start looking at ERP,

00:56:46.734 --> 00:56:49.501
it's gonna be
a more complicated problem.

00:56:49.501 --> 00:56:52.634
man: Okay, thank you.

00:56:52.634 --> 00:56:54.100
man: Hi, thanks for the talk.

00:56:54.100 --> 00:56:55.801
I have two quick questions.

00:56:55.801 --> 00:56:59.767
I'm relatively new to
the concept of a generic HashMap

00:56:59.767 --> 00:57:03.367
becoming a kind of
a conceptual data store.

00:57:03.367 --> 00:57:06.033
And so I'm interested--in
the relational database world,

00:57:06.033 --> 00:57:07.534
they're really used
to being able

00:57:07.534 --> 00:57:09.601
to index tables
in all kinds of different ways

00:57:09.601 --> 00:57:13.200
and access data
in all kinds of different keys.

00:57:13.200 --> 00:57:16.300
Does that mean that
in this type of data store

00:57:16.300 --> 00:57:17.934
we would just have
to duplicate the data

00:57:17.934 --> 00:57:19.767
and just use different hash key
for different access?

00:57:19.767 --> 00:57:21.801
That's one question.

00:57:21.801 --> 00:57:23.801
The second one is whether
you've had any luck

00:57:23.801 --> 00:57:26.601
with JRuby on Rails
in the app store.

00:57:26.601 --> 00:57:32.100
Fowler: So, you can still
link stuff together pretty well

00:57:32.100 --> 00:57:36.701
using the notion of
the nested HashMaps because

00:57:36.701 --> 00:57:39.534
as long as you can
get at the keys

00:57:39.534 --> 00:57:41.467
and you know the path
through the nesting,

00:57:41.467 --> 00:57:43.133
you can hook things together.

00:57:43.133 --> 00:57:45.067
It is a different way
of thinking to relational.

00:57:45.067 --> 00:57:47.100
There's not an easy way
to kind of sum up

00:57:47.100 --> 00:57:49.133
the difference in thinking.

00:57:49.133 --> 00:57:51.367
I'm afraid it's one of those
things that you have

00:57:51.367 --> 00:57:53.100
to practice in order
to get used to.

00:57:53.100 --> 00:57:54.968
Now the second question
I didn't quite catch.

00:57:54.968 --> 00:57:56.934
man: It was whether
you had any luck

00:57:56.934 --> 00:58:00.033
with JRuby on Rails
on App Engine.

00:58:00.033 --> 00:58:02.767
Fowler: Well, Ola will talk
all about this tomorrow.

00:58:02.767 --> 00:58:04.634
He's got a whole talk
on JRuby.

00:58:04.634 --> 00:58:06.334
So we'll leave it to him.

00:58:06.334 --> 00:58:09.434
man: Hi, I have a couple
of questions.

00:58:09.434 --> 00:58:12.767
First is about you talked about
migration for a little bit

00:58:12.767 --> 00:58:17.934
and you talked about the lock-in
of the Google App Engine

00:58:17.934 --> 00:58:21.033
that exists
off any cloud platform.

00:58:21.033 --> 00:58:25.501
Do you think the notion
that it's difficult--

00:58:25.501 --> 00:58:30.501
it's more difficult to come out
of a platform than a database

00:58:30.501 --> 00:58:33.667
like in Oracle
is because lots of people

00:58:33.667 --> 00:58:36.901
have done, I mean, like,
a migration from Oracle

00:58:36.901 --> 00:58:39.300
to some other database
but nobody has really tried out,

00:58:39.300 --> 00:58:42.100
like, migrating an application
from Google App Engine

00:58:42.100 --> 00:58:45.167
to some other framework?

00:58:45.167 --> 00:58:46.601
And my second question
is regarding

00:58:46.601 --> 00:58:49.334
the adoption section
of your talk.

00:58:49.334 --> 00:58:51.767
You talked about a number
of compelling reasons.

00:58:51.767 --> 00:58:55.701
Which one in your understanding
or experience

00:58:55.701 --> 00:58:57.901
do you think will be
the most compelling

00:58:57.901 --> 00:59:00.501
for the enterprises
to actually make the move

00:59:00.501 --> 00:59:02.234
or start making the move?

00:59:02.234 --> 00:59:05.601
Parsons: Okay,
so on the first one,

00:59:05.601 --> 00:59:09.100
clearly migrations
that have been done before

00:59:09.100 --> 00:59:11.868
are easier and I do think
there is some aspect to that,

00:59:11.868 --> 00:59:14.400
just like with the libraries.

00:59:14.400 --> 00:59:16.000
People haven't rewritten
the libraries yet

00:59:16.000 --> 00:59:18.868
to deal with the different
concurrency model.

00:59:18.868 --> 00:59:20.300
That will happen over time.

00:59:20.300 --> 00:59:23.133
I think you will get more tools
to support these migrations.

00:59:23.133 --> 00:59:25.234
This is a little more
complicated

00:59:25.234 --> 00:59:26.934
because going from
relational to relational,

00:59:26.934 --> 00:59:30.200
at least you're staying within
the same conceptual model.

00:59:30.200 --> 00:59:32.634
You do in this world
have to think

00:59:32.634 --> 00:59:35.701
about applications differently,
or you at least should

00:59:35.701 --> 00:59:37.467
think about applications
differently.

00:59:37.467 --> 00:59:40.367
So the migration will be more
complicated as time goes on.

00:59:40.367 --> 00:59:42.801
I think we are gonna start
to see more and more tools

00:59:42.801 --> 00:59:44.534
that are available
for these kinds of things

00:59:44.534 --> 00:59:45.868
which will make it easier.

00:59:45.868 --> 00:59:49.834
So a lot of these issues
that we're raising--

00:59:49.834 --> 00:59:52.834
it's not a fundamental flaw
with the platform so much

00:59:52.834 --> 00:59:54.501
as the tools
haven't caught up.

00:59:54.501 --> 00:59:56.834
And we've been building tools
for Java for years,

00:59:56.834 --> 00:59:58.367
for all of these other languages
for years,

00:59:58.367 --> 01:00:00.167
and we're gonna do
the same thing here.

01:00:00.167 --> 01:00:02.634
As for the adoption,

01:00:02.634 --> 01:00:06.334
what I would like to say

01:00:06.334 --> 01:00:09.133
is it's that ability
to innovate.

01:00:09.133 --> 01:00:11.467
The flexibility of being able
to let loose

01:00:11.467 --> 01:00:13.667
the creative people
within an organization

01:00:13.667 --> 01:00:15.734
to start coming up
with new and better ways

01:00:15.734 --> 01:00:18.467
of doing business internally

01:00:18.467 --> 01:00:20.434
or interfacing with
our customers and such.

01:00:20.434 --> 01:00:22.234
And I think that's
a very compelling reason

01:00:22.234 --> 01:00:23.734
for a lot of enterprises.

01:00:23.734 --> 01:00:27.734
They complain constantly
about how slow I.T. is,

01:00:27.734 --> 01:00:29.634
how long it takes
to get anything done.

01:00:29.634 --> 01:00:31.868
So I think that should be
a very compelling reason

01:00:31.868 --> 01:00:34.100
for an enterprise.

01:00:34.100 --> 01:00:36.934
I think they're going to be
focusing a fair amount on cost.

01:00:36.934 --> 01:00:38.667
Fowler: Yeah, I think,
I mean, again,

01:00:38.667 --> 01:00:39.934
drawing lessons
from history,

01:00:39.934 --> 01:00:43.567
a lot of the people
who are getting into things

01:00:43.567 --> 01:00:46.534
like PCs started
by effectively trying

01:00:46.534 --> 01:00:48.367
to end-run around
I.T. departments

01:00:48.367 --> 01:00:49.901
where you've got
some business people

01:00:49.901 --> 01:00:52.434
and some technical people
who need to get something going

01:00:52.434 --> 01:00:53.701
and get something operating

01:00:53.701 --> 01:00:55.133
and don't want
to deal with the bureaucracy.

01:00:55.133 --> 01:00:57.100
And I suspect
that's gonna drive it.

01:00:57.100 --> 01:00:59.701
Because, let's face it,
by definition

01:00:59.701 --> 01:01:01.868
it's gonna be the early
adopters that are getting

01:01:01.868 --> 01:01:04.267
into Google App Engine
at the beginning.

01:01:04.267 --> 01:01:07.601
And they typically do that
kind of end-running behavior.

01:01:07.601 --> 01:01:09.367
And most of our clients,

01:01:09.367 --> 01:01:11.367
they're not ready for playing
around with this stuff

01:01:11.367 --> 01:01:13.067
broadly yet.

01:01:13.067 --> 01:01:14.801
But you'll always find
most large companies

01:01:14.801 --> 01:01:16.601
will have a few little
bubbles of people

01:01:16.601 --> 01:01:19.033
that have got something
and are prepared to run with it.

01:01:19.033 --> 01:01:20.901
And they will tend to do this

01:01:20.901 --> 01:01:23.033
for innovation-driven reasons,
I think.

01:01:23.033 --> 01:01:26.133
Parsons: Okay, and
we're getting close to time,

01:01:26.133 --> 01:01:29.100
so if we can cut off
the line where it is.

01:01:29.100 --> 01:01:30.901
man: Right, so my question
is more around

01:01:30.901 --> 01:01:32.601
the enterprise adoption.

01:01:32.601 --> 01:01:35.601
Sort of a follow on, I think,
large corporations

01:01:35.601 --> 01:01:37.767
actually understand
and realize the benefits

01:01:37.767 --> 01:01:39.734
of what cloud computing,
enterprise development,

01:01:39.734 --> 01:01:41.000
and the cloud
can do for them in terms

01:01:41.000 --> 01:01:43.033
of faster, better, cheaper.

01:01:43.033 --> 01:01:45.601
And they're typically
mandated to those organizations

01:01:45.601 --> 01:01:48.434
from CIO down
to the organization.

01:01:48.434 --> 01:01:49.634
How do we innovate?

01:01:49.634 --> 01:01:52.701
How do we be more faster
and do things cheaper?

01:01:52.701 --> 01:01:54.701
And I agree with
most of the analysis

01:01:54.701 --> 01:01:58.033
and the earlier private talk
about adoption

01:01:58.033 --> 01:02:00.400
with exception
of the last part which was

01:02:00.400 --> 01:02:02.767
really talking
about working around I.T.

01:02:02.767 --> 01:02:07.200
And I guess my question back
to you is with all this pressure

01:02:07.200 --> 01:02:09.834
from a financial perspective
and a need to innovate,

01:02:09.834 --> 01:02:11.434
instead of
working around I.T.,

01:02:11.434 --> 01:02:13.934
setting up the time
to actually figure out

01:02:13.934 --> 01:02:15.901
how to capture
the hearts and minds of I.T

01:02:15.901 --> 01:02:18.100
to actually
transform the company?

01:02:18.100 --> 01:02:19.434
And I understand
the historical perspective,

01:02:19.434 --> 01:02:24.300
but now, I mean, there's
so much pressure to change

01:02:24.300 --> 01:02:26.000
and the tools
are so different.

01:02:26.000 --> 01:02:28.000
So I guess it's just--

01:02:28.000 --> 01:02:31.133
is it not the time to actually
capture their hearts and minds?

01:02:31.133 --> 01:02:32.667
Parsons:
I actually think it is.

01:02:32.667 --> 01:02:34.634
And I think we're gonna see
I.T. departments

01:02:34.634 --> 01:02:35.868
that look very, very different

01:02:35.868 --> 01:02:38.701
and that could be
a very long debate.

01:02:38.701 --> 01:02:41.234
But I do think what
you're going to start to see

01:02:41.234 --> 01:02:42.767
is a separation
of an I.T. department

01:02:42.767 --> 01:02:47.100
into the very infrastructure
focused layers,

01:02:47.100 --> 01:02:49.567
which should be cost driven.

01:02:49.567 --> 01:02:52.000
And that area
of an organization

01:02:52.000 --> 01:02:54.133
that needs to be more dynamic
and more responsive

01:02:54.133 --> 01:02:55.801
and therefore closer
to the business.

01:02:55.801 --> 01:02:57.901
And I think once you
start thinking about I.T.

01:02:57.901 --> 01:02:59.501
and separating those things
rather than trying

01:02:59.501 --> 01:03:03.601
to manage this heterogeneous
mass in the same way,

01:03:03.601 --> 01:03:07.100
you can focus
on enabling the innovation

01:03:07.100 --> 01:03:10.234
and enabling the rapid change
within your I.T. organization

01:03:10.234 --> 01:03:13.334
which might end up then getting
dispersed a little bit more

01:03:13.334 --> 01:03:15.334
while you can
focus the cost savings

01:03:15.334 --> 01:03:18.200
on the things where it really
just is plumbing.

01:03:18.200 --> 01:03:20.100
And so I think you're going
to start to see more of that.

01:03:20.100 --> 01:03:22.934
And I do think there
is increasing pressure

01:03:22.934 --> 01:03:27.000
on organizations to start
making those changes.

01:03:27.000 --> 01:03:28.567
Last question.

01:03:28.567 --> 01:03:31.467
man: Hi.
Not a question actually.

01:03:31.467 --> 01:03:32.567
Just picking up on the fact

01:03:32.567 --> 01:03:34.033
that there were
two questions related

01:03:34.033 --> 01:03:37.968
to migrating applications built
on top of relational databases

01:03:37.968 --> 01:03:39.834
to the App Engine data store.

01:03:39.834 --> 01:03:42.000
I'm giving a talk
tomorrow at 1:15.

01:03:42.000 --> 01:03:43.400
It's called
"The Softer Side of Schemas."

01:03:43.400 --> 01:03:47.834
And this is--we've got
about 1/3 of the talk

01:03:47.834 --> 01:03:50.100
devoted to strategies
for moving applications

01:03:50.100 --> 01:03:52.234
on and off App Engine.

01:03:52.234 --> 01:03:54.400
So if this is of interest
to you, please stop by.

01:03:54.400 --> 01:03:55.534
Sorry to hijack.

01:03:55.534 --> 01:03:57.100
Parsons: And which track
are you in?

01:03:57.100 --> 01:03:58.400
man: The App Engine track.

01:03:58.400 --> 01:04:00.033
Parsons: Okay, very good.
Thank you.

01:04:00.033 --> 01:04:01.901
Thank you all
for your attention.

01:04:01.901 --> 01:04:03.334
Fowler: Thank you.

01:04:03.334 --> 01:04:06.067
[applause]

