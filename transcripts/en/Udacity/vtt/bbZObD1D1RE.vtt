WEBVTT
Kind: captions
Language: en

00:00:00.690 --> 00:00:03.350
Now, let's move on to
overloading operations.

00:00:03.350 --> 00:00:06.550
Here at the top, I've defined a struct
called TeamRecord that records

00:00:06.550 --> 00:00:09.850
the number of wins and
losses for a team.

00:00:09.850 --> 00:00:13.110
We'll just assume this struct is
describing the wins and losses for

00:00:13.110 --> 00:00:16.640
a team playing American football,
that's in season right now.

00:00:17.650 --> 00:00:21.420
Now, it would be convenient if we
could add two team records together

00:00:21.420 --> 00:00:23.780
like we would any other basic type.

00:00:23.780 --> 00:00:26.800
And that's what I'm trying to do here,
but

00:00:26.800 --> 00:00:29.970
unless we write a function that
describes how two team records could be

00:00:29.970 --> 00:00:34.580
added together the swif compiler won't
be able to perform this operation.

00:00:34.580 --> 00:00:38.890
So, to define addition we'll start
with funk and the the plus symbol.

00:00:40.040 --> 00:00:42.370
Then addition takes two arguments.

00:00:42.370 --> 00:00:45.140
An argument that goes on the left
side of the addition sign, and

00:00:45.140 --> 00:00:47.660
an argument that goes on the right side.

00:00:47.660 --> 00:00:50.120
Both of the arguments
should be team records, and

00:00:50.120 --> 00:00:54.180
we want to return a new team record
after performing what we described

00:00:54.180 --> 00:00:57.410
as the edition of two team records.

00:00:57.410 --> 00:01:00.880
So, for team records, we just want to
add the numbers of wins together, and

00:01:00.880 --> 00:01:02.270
the number of losses together.

00:01:03.410 --> 00:01:07.010
We can do this in one line, by returning
a new instance of team record, and

00:01:07.010 --> 00:01:10.530
adding the wins and
losses from the left and right side.

00:01:10.530 --> 00:01:12.440
In line right here.

00:01:12.440 --> 00:01:14.640
Now, our addition works
just like a charm.

00:01:14.640 --> 00:01:17.200
It takes the records for 2013 and 2014,

00:01:17.200 --> 00:01:21.480
it adds the wins together and
it adds the losses together.

00:01:21.480 --> 00:01:23.590
You can see that outputted here.

00:01:23.590 --> 00:01:27.280
You may be asking yourself if I
had to define the addition for

00:01:27.280 --> 00:01:31.520
team records, does that addition is
defined for Int, strings, floats,

00:01:31.520 --> 00:01:33.300
and other basic types too.

00:01:33.300 --> 00:01:37.750
Well, that's a great question,
and you're right they are.

00:01:37.750 --> 00:01:41.820
So, when you think about it, when we
defined addition here for Team Records,

00:01:41.820 --> 00:01:45.040
we were actually overloading
the addition operator to work for

00:01:45.040 --> 00:01:48.380
a new type, in this case, Team Record.

00:01:48.380 --> 00:01:52.400
So, we could in fact redefine
how addition works for any type,

00:01:52.400 --> 00:01:54.780
like the basic type ints.

00:01:54.780 --> 00:01:57.520
I'm going to go ahead and
do that now for demonstration purposes,

00:01:57.520 --> 00:02:00.870
but this would be a terrible
idea in real code.

00:02:00.870 --> 00:02:04.900
You can see now that the addition of
two ints gives up some really strange

00:02:04.900 --> 00:02:09.130
results and again,
this is a really, really bad idea.

00:02:09.130 --> 00:02:11.100
Do not do this in practice.

00:02:11.100 --> 00:02:12.270
I'm going to go ahead and
get rid of this for

00:02:12.270 --> 00:02:14.840
now just so
I don't have someone yell at me later.

