WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:03.140
Let's build up some objects that have a lot of similarities so

00:00:03.140 --> 00:00:05.660
that we can see how prototype chains might help us.

00:00:05.660 --> 00:00:08.550
On the right here, I'll show a picture of the objects that we're creating as we

00:00:08.550 --> 00:00:11.220
go and the relationships that they developed.

00:00:11.220 --> 00:00:14.490
Here we have a property lookup on the gold object.

00:00:14.490 --> 00:00:17.820
Let's consider every step of what happens when we do a property lookup for

00:00:17.820 --> 00:00:19.530
the key a in this object.

00:00:19.530 --> 00:00:22.080
The interpreter kicks off an investigation as to whether or

00:00:22.080 --> 00:00:24.930
not the gold object has the property we're looking for.

00:00:24.930 --> 00:00:27.830
Upon inspecting the object, the interpreter could tell that there

00:00:27.830 --> 00:00:31.050
is a pair available in this object that has the key a.

00:00:31.050 --> 00:00:33.340
The value that's associated with that pair is 1.

00:00:33.340 --> 00:00:36.480
And so the result of this lookup expression is going to be 1.

00:00:36.480 --> 00:00:41.280
In this case, our logging system would log value 1 out to the screen somewhere.

00:00:41.280 --> 00:00:45.570
My code assumes that there's some function called Log that already exists.

00:00:45.570 --> 00:00:48.740
In most environments, you would call it console.log.

00:00:48.740 --> 00:00:50.890
But, let's take a look at what happens when we ask for

00:00:50.890 --> 00:00:53.130
a property that we know the object doesn't have.

00:00:53.130 --> 00:00:55.070
First, that property lookup arrives at the object.

00:00:55.070 --> 00:00:59.550
And then the interpreter acknowledges the failure by providing undefined in

00:00:59.550 --> 00:01:02.030
response to this attempted lookup for z.

00:01:02.030 --> 00:01:04.550
And, so the lookup for z on the gold object,

00:01:04.550 --> 00:01:07.750
results in undefined which is what ultimately gets logged to the screen.

