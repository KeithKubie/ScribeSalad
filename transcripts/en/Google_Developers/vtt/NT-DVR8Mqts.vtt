WEBVTT
Kind: captions
Language: en

00:00:08.950 --> 00:00:11.500
Google Compute Engine recently
announced support for load

00:00:11.500 --> 00:00:14.300
balancing, allowing you to
easily distribute workloads

00:00:14.300 --> 00:00:17.270
and traffic evenly across two
or more virtual machines.

00:00:17.270 --> 00:00:19.320
I'm now going to show you the
process of setting up load

00:00:19.320 --> 00:00:21.920
balancing across two
web servers.

00:00:21.920 --> 00:00:23.870
Here's the Google Cloud Console,
where you can see

00:00:23.870 --> 00:00:26.490
that I've already created
two virtual machines.

00:00:26.490 --> 00:00:29.680
Both VMs already have Apache web
server installed, and I've

00:00:29.680 --> 00:00:32.570
updated the default web page on
both servers to display the

00:00:32.570 --> 00:00:33.960
name of the server.

00:00:33.960 --> 00:00:35.920
I've also updated the background
color of each

00:00:35.920 --> 00:00:38.750
default web page to match the
name of the server, so we can

00:00:38.750 --> 00:00:41.430
quickly tell which server's page
we're looking at, to test

00:00:41.430 --> 00:00:43.610
that everything is working
as expected.

00:00:43.610 --> 00:00:45.820
The other setup step that's
already been done is to create

00:00:45.820 --> 00:00:48.660
a firewall to allow internet
requests on port 80.

00:00:48.660 --> 00:00:52.180
We can see that by going to
Networks and selecting our

00:00:52.180 --> 00:00:54.460
default network.

00:00:54.460 --> 00:00:56.890
And here, under the Firewall
section, you can see that I've

00:00:56.890 --> 00:01:00.770
already created a firewall named
http1 and that it's set

00:01:00.770 --> 00:01:02.990
up to allow traffic
on port 80.

00:01:02.990 --> 00:01:07.020
Now let's take a look at the
new load balancing feature.

00:01:07.020 --> 00:01:09.620
There are three sections
associated with the feature,

00:01:09.620 --> 00:01:13.160
target pools, forwarding rules,
and health checks.

00:01:13.160 --> 00:01:15.310
We're about to create a
load-balanced target pool of

00:01:15.310 --> 00:01:18.170
multiple servers, so we need to
establish a way to confirm

00:01:18.170 --> 00:01:20.810
that each machine in the pool
is working as expected.

00:01:20.810 --> 00:01:22.950
We can do that by creating a
health check under the Health

00:01:22.950 --> 00:01:24.170
Check section.

00:01:24.170 --> 00:01:25.900
We'll click the New Health
Check button to create a

00:01:25.900 --> 00:01:27.170
health check.

00:01:27.170 --> 00:01:31.390
For the name, we'll enter
basic-health-check.

00:01:31.390 --> 00:01:34.070
For the time out, we'll
specify five seconds.

00:01:37.100 --> 00:01:40.170
And for the Unhealthy if value,
we'll specify one

00:01:40.170 --> 00:01:42.990
consecutive failure, and then
click Create to create the

00:01:42.990 --> 00:01:44.240
health check.

00:01:47.940 --> 00:01:49.650
And that's done.

00:01:49.650 --> 00:01:52.520
Now let's create a target pool
of VM instances that uses the

00:01:52.520 --> 00:01:55.300
health check we just created.

00:01:55.300 --> 00:01:57.660
Start the target pool creation
process by clicking the New

00:01:57.660 --> 00:01:59.870
Target Pool button.

00:01:59.870 --> 00:02:04.130
We'll name this pool
us-central1-pool.

00:02:04.130 --> 00:02:07.330
For the region, we'll select the
us-central1 region, which

00:02:07.330 --> 00:02:09.960
is where our VM instances
reside.

00:02:09.960 --> 00:02:13.560
Next, we'll add our VM instances
to the pool--

00:02:13.560 --> 00:02:18.100
first the red-server, then
the blue-server.

00:02:21.980 --> 00:02:24.990
Next, we'll select the health
check that we just created and

00:02:24.990 --> 00:02:27.120
then click Create to create
our target pool.

00:02:29.810 --> 00:02:31.170
And it's done.

00:02:31.170 --> 00:02:33.860
One thing to note is that you
can edit these target pools on

00:02:33.860 --> 00:02:35.950
the fly after they
are created.

00:02:35.950 --> 00:02:38.690
So to add more servers to a
given pool, all you have to do

00:02:38.690 --> 00:02:41.820
is create more VM instances,
and then Edit An Existing

00:02:41.820 --> 00:02:44.930
Target Pool to add
the servers.

00:02:44.930 --> 00:02:47.390
Removing servers is
done the same way.

00:02:47.390 --> 00:02:51.250
And then click Save to
save your changes.

00:02:51.250 --> 00:02:53.670
Now that we've got our target
pool created, the last thing

00:02:53.670 --> 00:02:56.150
we need to do is to create a
forwarding rule that will make

00:02:56.150 --> 00:03:00.170
our target pool accessible
at a single IP address.

00:03:00.170 --> 00:03:04.170
Click the New Forwarding Rule
button to create a new rule.

00:03:04.170 --> 00:03:08.330
We'll name this rule
us-central1-web.

00:03:08.330 --> 00:03:11.230
For the region, we'll specify
us-central1, which is where we

00:03:11.230 --> 00:03:13.140
created our target pool.

00:03:13.140 --> 00:03:15.850
For the external IP, we have the
option to create a static

00:03:15.850 --> 00:03:18.640
IP address, but we'll go with
the default option here, which

00:03:18.640 --> 00:03:20.030
is Ephemeral.

00:03:20.030 --> 00:03:23.530
For the protocol, we'll specify
TCP, which is also the

00:03:23.530 --> 00:03:25.070
default option.

00:03:25.070 --> 00:03:27.360
And here is where we can specify
a specific port or

00:03:27.360 --> 00:03:29.750
range of ports to associate
with the rule.

00:03:29.750 --> 00:03:33.670
We'll specify port 80, the
default port for HTTP-based

00:03:33.670 --> 00:03:35.050
web traffic.

00:03:35.050 --> 00:03:36.550
And here's where we can
select the target

00:03:36.550 --> 00:03:38.340
pool we just created.

00:03:38.340 --> 00:03:40.870
And finally, we'll click Create
to create the rule.

00:03:52.270 --> 00:03:53.690
And it's done.

00:03:53.690 --> 00:03:56.920
We've now got a load-balanced
cluster of two web servers.

00:03:56.920 --> 00:03:59.120
Let's test it out right now.

00:03:59.120 --> 00:04:02.270
The only things we need to test
it out are a browser and

00:04:02.270 --> 00:04:04.130
the IP address of the
forwarding rule

00:04:04.130 --> 00:04:06.030
that we just created.

00:04:06.030 --> 00:04:09.925
So let's copy this IP address,
and paste it into a new tab,

00:04:09.925 --> 00:04:11.660
and hit Enter.

00:04:11.660 --> 00:04:14.750
And there's the custom default
page for the red-server.

00:04:14.750 --> 00:04:18.350
Now when I hit Refresh, let's
see if we get a response from

00:04:18.350 --> 00:04:23.010
the other web server in our
load-balanced target pool.

00:04:23.010 --> 00:04:25.430
And there's the custom default
web page for the blue-server.

00:04:25.430 --> 00:04:25.870
Great!

00:04:25.870 --> 00:04:27.890
The serving load is being
balanced between the two

00:04:27.890 --> 00:04:29.470
servers in our target pool.

00:04:29.470 --> 00:04:31.990
Let's try it a few more times to
see that the load is being

00:04:31.990 --> 00:04:33.735
distributed on a round-robin
basis.

00:04:46.860 --> 00:04:49.150
Now let's stop one of the
servers to confirm that the

00:04:49.150 --> 00:04:51.390
health check for our load
balancing pool properly

00:04:51.390 --> 00:04:54.190
handles the situation and
redirects requests to the

00:04:54.190 --> 00:04:56.490
other server that's
still available.

00:04:56.490 --> 00:04:58.910
We'll go back to the Cloud
Console and select VM

00:04:58.910 --> 00:05:03.620
Instances, and click on the
red-server, and then scroll

00:05:03.620 --> 00:05:06.242
down to the SSH link.

00:05:06.242 --> 00:05:10.440
We'll copy that SSH command and
jump over to a terminal

00:05:10.440 --> 00:05:11.690
window to run it.

00:05:15.830 --> 00:05:17.700
We're now logged on
to the instance.

00:05:17.700 --> 00:05:20.390
Let's stop the web server.

00:05:20.390 --> 00:05:23.770
Here's the command we'll
run to stop Apache.

00:05:23.770 --> 00:05:27.030
We'll start by typing sudo to
run the command as superuser,

00:05:27.030 --> 00:05:29.680
then the location of the Apache
service, followed by

00:05:29.680 --> 00:05:30.990
the stop command.

00:05:30.990 --> 00:05:33.780
Let's run that.

00:05:33.780 --> 00:05:36.930
And the Apache web service on
this instance is now stopped.

00:05:36.930 --> 00:05:39.280
Let's go back to our target pool
and see how it responds

00:05:39.280 --> 00:05:40.530
to this change.

00:05:45.700 --> 00:05:47.520
And here we can see that the
health check for the red

00:05:47.520 --> 00:05:50.320
server is showing that
it's unhealthy.

00:05:50.320 --> 00:05:52.730
Our target pool now only
contains one healthy VM

00:05:52.730 --> 00:05:54.450
instance, blue-server.

00:05:54.450 --> 00:05:56.740
So if we go to the browser where
we were previously sent

00:05:56.740 --> 00:05:59.140
the default page of the
red-server, we should be able

00:05:59.140 --> 00:06:01.800
to reload the page and be
redirected to the blue-server

00:06:01.800 --> 00:06:03.170
without skipping a beat.

00:06:03.170 --> 00:06:05.550
Let's do that now.

00:06:05.550 --> 00:06:07.670
Here's the browser window
where we were previously

00:06:07.670 --> 00:06:09.550
forwarded to the red-server.

00:06:09.550 --> 00:06:14.700
When I click Reload, yes!

00:06:14.700 --> 00:06:17.420
We just got forwarded to the
blue-server, which is the only

00:06:17.420 --> 00:06:19.470
healthy VM that's still
available in our load

00:06:19.470 --> 00:06:20.940
balancing target pool.

00:06:20.940 --> 00:06:22.265
Let's try it a few more times.

00:06:29.160 --> 00:06:31.230
You can see that we're
consistently being routed to

00:06:31.230 --> 00:06:32.910
the healthy server in
our target pool.

00:06:32.910 --> 00:06:34.340
Excellent!

00:06:34.340 --> 00:06:36.840
I've shown you a very simple
example of using load

00:06:36.840 --> 00:06:39.080
balancing on Compute Engine.

00:06:39.080 --> 00:06:41.420
In addition to using the Cloud
Console to set up load

00:06:41.420 --> 00:06:44.920
balancing, we also offer a
command-line tool and RESTful

00:06:44.920 --> 00:06:47.450
APIs, so that you can integrate
load balancing

00:06:47.450 --> 00:06:49.440
directly into your code.

00:06:49.440 --> 00:06:52.640
Load balancing on Compute Engine
is highly scalable, so

00:06:52.640 --> 00:06:55.530
you can confidently create
multiple target pools,

00:06:55.530 --> 00:06:58.090
forwarding rules, and
health checks.

00:06:58.090 --> 00:07:00.770
Best of all, our load balancing
requires no manual

00:07:00.770 --> 00:07:03.100
pre-warming, even when
you anticipate

00:07:03.100 --> 00:07:05.300
significant traffic spikes.

00:07:05.300 --> 00:07:08.060
As you've just seen, it's simple
to set up a cluster of

00:07:08.060 --> 00:07:10.750
load-balanced web servers on
Compute Engine, and it's easy

00:07:10.750 --> 00:07:13.200
to customize the setup
to meet your needs.

00:07:13.200 --> 00:07:14.450
Thank you for watching.

