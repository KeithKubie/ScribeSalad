WEBVTT
Kind: captions
Language: en

00:00:02.465 --> 00:00:02.960
MANO MARKS:: Hi.

00:00:02.960 --> 00:00:04.920
Welcome to the Google Geo
Developers series.

00:00:04.920 --> 00:00:06.000
I'm Mano Marks.

00:00:06.000 --> 00:00:08.840
I'm a developer advocate on
Google's Geo Developer

00:00:08.840 --> 00:00:10.570
Relations team.

00:00:10.570 --> 00:00:13.970
I'd like to introduce you today
to John Coryat, who is

00:00:13.970 --> 00:00:17.920
going to be giving you a talk on
simulating map markers with

00:00:17.920 --> 00:00:19.350
tile layers.

00:00:19.350 --> 00:00:24.050
John did one of our most widely
viewed talks in the Geo

00:00:24.050 --> 00:00:28.580
Developers series in 2007 on
creating custom map types, and

00:00:28.580 --> 00:00:31.240
that still has a lot
of techniques

00:00:31.240 --> 00:00:32.409
that are valid today.

00:00:32.409 --> 00:00:34.970
So I encourage you view
that, as well.

00:00:34.970 --> 00:00:36.552
So take it away, John.

00:00:42.250 --> 00:00:45.240
JOHN CORYAT: Simulating markers
with a tile layer.

00:00:45.240 --> 00:00:48.070
This discussion is aimed at
those who understand advanced

00:00:48.070 --> 00:00:51.040
mapping techniques and have a
good knowledge of server-side

00:00:51.040 --> 00:00:55.435
languages and the Google
Maps v3 JavaScript API.

00:00:58.250 --> 00:00:59.660
My name is John Coryat.

00:00:59.660 --> 00:01:04.750
I'm with USNaviguide LLC I've
been working with Google Maps

00:01:04.750 --> 00:01:12.620
API since 2005, and I've created
dozens of web pages

00:01:12.620 --> 00:01:14.850
that use custom tile layers.

00:01:17.510 --> 00:01:25.550
We suggest that you view the
prerequisite to this

00:01:25.550 --> 00:01:28.290
discussion called Producing
Custom Maps

00:01:28.290 --> 00:01:30.320
with Google Maps API.

00:01:30.320 --> 00:01:34.450
You can find it on Google by
searching for Coryat, Google,

00:01:34.450 --> 00:01:36.560
and custom maps.

00:01:36.560 --> 00:01:39.200
It's a YouTube video.

00:01:39.200 --> 00:01:44.250
It focuses on the basics of the
tile system, tile math,

00:01:44.250 --> 00:01:50.530
and covers creating tiles
from large images.

00:01:50.530 --> 00:01:53.290
Also, why you would use a tile
layer, which is sort of an

00:01:53.290 --> 00:01:54.520
important topic.

00:01:54.520 --> 00:02:00.560
We suggest that you go through
the examples on that

00:02:00.560 --> 00:02:04.420
discussion, and view
that before

00:02:04.420 --> 00:02:05.670
proceeding with this one.

00:02:09.030 --> 00:02:10.690
Everyone is familiar
with the results of

00:02:10.690 --> 00:02:12.070
a Google Map search.

00:02:12.070 --> 00:02:18.200
Here we have a search for coffee
shops that has a number

00:02:18.200 --> 00:02:19.710
of lettered markers.

00:02:19.710 --> 00:02:22.140
Those are JavaScript objects.

00:02:22.140 --> 00:02:26.470
And also there's a secondary
result, which are the little

00:02:26.470 --> 00:02:29.230
red dots that are scattered
about the map.

00:02:29.230 --> 00:02:34.100
Those are also active simulated
markers that, when

00:02:34.100 --> 00:02:36.660
clicked on, will bring
up a result.

00:02:36.660 --> 00:02:40.730
What you may not know is that
those markers are actually a

00:02:40.730 --> 00:02:46.080
tile layer, and Google has
used this technology to

00:02:46.080 --> 00:02:49.320
display more results
than they could if

00:02:49.320 --> 00:02:53.370
they just used markers.

00:02:53.370 --> 00:02:56.890
Since it limits the number of
JavaScript objects, it allows

00:02:56.890 --> 00:03:00.626
them to depict hundreds more
results than they could if

00:03:00.626 --> 00:03:04.290
they just used the lettered
markers, which should probably

00:03:04.290 --> 00:03:07.590
be kept somewhere between
50 and 200 as a

00:03:07.590 --> 00:03:11.010
maximum results set.

00:03:11.010 --> 00:03:14.580
You could leverage this
technology for your own maps.

00:03:14.580 --> 00:03:18.250
If you have a problem of trying
to display more than a

00:03:18.250 --> 00:03:22.800
couple hundred points, this is
an excellent way to do that.

00:03:22.800 --> 00:03:27.580
The advantages are that it's
very fast, it's an efficient

00:03:27.580 --> 00:03:33.820
use of memory, and it doesn't
require JavaScript objects for

00:03:33.820 --> 00:03:35.950
each marker that you display.

00:03:35.950 --> 00:03:40.240
Instead, it uses the tiles,
which are just images.

00:03:40.240 --> 00:03:43.340
So you can put as many little
points on those images as you

00:03:43.340 --> 00:03:46.090
want, and it doesn't impact the

00:03:46.090 --> 00:03:48.320
performance of the web page.

00:03:48.320 --> 00:03:51.770
Another thing that's good about
to using this method is

00:03:51.770 --> 00:03:57.110
that it's more secure than
using JavaScript objects.

00:03:57.110 --> 00:04:00.630
When you use straight markers,
what you have to do is you

00:04:00.630 --> 00:04:04.080
have to pass all the data--

00:04:04.080 --> 00:04:07.920
the coordinates, the HTML,
everything that you need to

00:04:07.920 --> 00:04:12.880
display the markers has to be
passed, either as XML stream,

00:04:12.880 --> 00:04:17.279
JSON, or embedded directly
in your web page.

00:04:17.279 --> 00:04:19.690
This would allow an unscrupulous
developer to

00:04:19.690 --> 00:04:22.480
harvest your data and use
it for their own use.

00:04:22.480 --> 00:04:28.200
By using a tile layer, you're
obfuscating your data somewhat

00:04:28.200 --> 00:04:36.940
in that you're just passing a
tile with marker images on it.

00:04:36.940 --> 00:04:41.730
That still could be taken
apart by a fairly clever

00:04:41.730 --> 00:04:46.650
programmer, but you're making
it a lot more difficult for

00:04:46.650 --> 00:04:47.460
them to do it.

00:04:47.460 --> 00:04:49.440
Plus, then all they have
is the coordinate.

00:04:49.440 --> 00:04:51.830
They don't have any of the
HTML that goes behind it.

00:04:51.830 --> 00:04:55.000
They have to go and harvest that
data from your server as

00:04:55.000 --> 00:04:56.250
a separate step.

00:04:56.250 --> 00:04:59.740
I think you making it more
difficult for them, the odds

00:04:59.740 --> 00:05:04.220
are they'll leave your data
alone if you have

00:05:04.220 --> 00:05:06.130
this type of method.

00:05:06.130 --> 00:05:09.850
It does have a disadvantage in
that it requires additional

00:05:09.850 --> 00:05:14.650
bandwidth to transmit tiles, and
it requires a round-trip

00:05:14.650 --> 00:05:18.190
to the server when you click
on a marker in order to

00:05:18.190 --> 00:05:19.440
retrieve the data.

00:05:22.390 --> 00:05:24.510
Here's an example page that
we're going to use for this

00:05:24.510 --> 00:05:25.630
demonstration.

00:05:25.630 --> 00:05:30.640
It's the volcanoes of the world
from the Smithsonian

00:05:30.640 --> 00:05:32.520
volcano project.

00:05:32.520 --> 00:05:38.150
There are approximately 1,300
points included in this map.

00:05:38.150 --> 00:05:41.830
It works from zoom level 3 to
10, which is approximately

00:05:41.830 --> 00:05:44.040
4,000 tiles.

00:05:44.040 --> 00:05:47.350
As you can see, it looks
like they are markers.

00:05:47.350 --> 00:05:52.525
And they, in fact, are just
images on the tile layer.

00:05:52.525 --> 00:05:53.775
Now let's go to the demo.

00:06:09.120 --> 00:06:10.370
Start the recording.

00:06:17.760 --> 00:06:21.390
OK, here we have the
volcano web page.

00:06:21.390 --> 00:06:25.370
And as you can see, it looks
like there are lots

00:06:25.370 --> 00:06:26.310
of markers on there.

00:06:26.310 --> 00:06:29.100
And they're all kind of
clustered together.

00:06:29.100 --> 00:06:31.940
You can go around the
world with it.

00:06:31.940 --> 00:06:32.940
You can see it's quite snappy.

00:06:32.940 --> 00:06:34.630
It has no delay, even
though they're

00:06:34.630 --> 00:06:38.200
showing so many markers.

00:06:38.200 --> 00:06:39.700
Of course, they're
not real markers.

00:06:39.700 --> 00:06:44.110
They're points embedded
in a tile.

00:06:44.110 --> 00:06:47.470
And as we zoom in, they
become separated,

00:06:47.470 --> 00:06:48.450
as you would expect.

00:06:48.450 --> 00:06:51.610
You can see there are a lot
of volcanoes in Japan.

00:06:51.610 --> 00:06:55.506
And you can click on them.

00:06:55.506 --> 00:06:58.920
And that brings up a result.

00:06:58.920 --> 00:07:00.540
And as we zoom in further--

00:07:05.320 --> 00:07:09.750
this is approximately zoom
level seven, I believe.

00:07:09.750 --> 00:07:10.840
I changed the icon.

00:07:10.840 --> 00:07:14.170
You can do all kinds of things
on the server when you have

00:07:14.170 --> 00:07:19.180
the control of processing
it on the server side.

00:07:19.180 --> 00:07:23.240
For instance, you could use a
clustering algorithm to--

00:07:23.240 --> 00:07:28.300
instead of showing them all in
a big line, you could have a

00:07:28.300 --> 00:07:32.120
square, and put like 10, or 30,
or something like that in

00:07:32.120 --> 00:07:35.550
it to depict those markers.

00:07:35.550 --> 00:07:37.350
That's a very common way of
doing it, but you could have

00:07:37.350 --> 00:07:40.140
all that power on the server.

00:07:40.140 --> 00:07:46.930
Whereas, if you're delivering
markers to your web page, you

00:07:46.930 --> 00:07:48.395
have to handle all that
on the client.

00:07:48.395 --> 00:07:51.540
And that becomes a very
slow, draggy process.

00:07:51.540 --> 00:07:53.320
Here again, we'll click
on that one.

00:07:53.320 --> 00:07:56.410
And there's another one brought
up as an info window.

00:07:56.410 --> 00:07:59.860
Now, one thing that's important
as a concept is the

00:07:59.860 --> 00:08:02.030
concept of tolerance.

00:08:02.030 --> 00:08:03.760
Now, if I click out here in the
middle of the ocean where

00:08:03.760 --> 00:08:07.800
there are no volcanoes, I get a
message saying that there's

00:08:07.800 --> 00:08:10.190
no volcano within range.

00:08:10.190 --> 00:08:14.250
If I click relatively close,
it still gives me that.

00:08:14.250 --> 00:08:17.820
I have to click virtually on top
of the marker in order to

00:08:17.820 --> 00:08:20.270
bring up the info window.

00:08:20.270 --> 00:08:22.200
This is a concept
of tolerance.

00:08:22.200 --> 00:08:29.070
I use between 0 and 15 pixels
is considered a valid click.

00:08:29.070 --> 00:08:32.539
So that's something we'll talk
about later, but I just wanted

00:08:32.539 --> 00:08:34.610
to demonstrate tolerance.

00:08:34.610 --> 00:08:34.820
All right.

00:08:34.820 --> 00:08:36.080
So that's the demonstration.

00:08:36.080 --> 00:08:37.400
We'll go back to the slides.

00:09:09.150 --> 00:09:10.400
That concludes the demo.

00:09:13.240 --> 00:09:17.010
We include a useful Perl
module with this

00:09:17.010 --> 00:09:21.720
demonstration, or with
this discussion.

00:09:21.720 --> 00:09:23.110
This is called
USNaviguide_Google_Tiles.pm.

00:09:26.730 --> 00:09:29.800
It does all the tile
math for you.

00:09:29.800 --> 00:09:34.240
It has methods for calculating
all sorts of things that you

00:09:34.240 --> 00:09:39.650
might want to know about your
points or whatever, and it has

00:09:39.650 --> 00:09:40.410
to do with the tiles.

00:09:40.410 --> 00:09:42.780
For instance, you can calculate
all the tiles for a

00:09:42.780 --> 00:09:45.650
bounding box, or you can
calculate all the features for

00:09:45.650 --> 00:09:47.080
a single tile.

00:09:47.080 --> 00:09:53.460
Or you can calculate a tile name
for a pixel location, or

00:09:53.460 --> 00:09:55.890
convert a coordinate to a
pixel or a pixel to a

00:09:55.890 --> 00:09:56.920
coordinate.

00:09:56.920 --> 00:09:59.810
Or find the name of a tile from
a pixel coordinate, or a

00:09:59.810 --> 00:10:01.430
pixel location, and zoom.

00:10:01.430 --> 00:10:03.850
These are very important things
that you'll need if

00:10:03.850 --> 00:10:06.920
you're going to do any of
this tile-based work.

00:10:06.920 --> 00:10:09.950
Two things that were used in
this particular discussion are

00:10:09.950 --> 00:10:11.230
converting a coordinate--

00:10:11.230 --> 00:10:13.440
a latitude and longitude
coordinate--

00:10:13.440 --> 00:10:17.860
to a pixel location, and also
taking a coordinate and

00:10:17.860 --> 00:10:22.190
finding the name of the tile
that belongs with that.

00:10:22.190 --> 00:10:27.520
This is discussed in the
previous prerequisite.

00:10:27.520 --> 00:10:31.560
So if you have any questions
about tile math or the

00:10:31.560 --> 00:10:32.140
coordinates--

00:10:32.140 --> 00:10:36.820
how the coordinate system works
for the tile system--

00:10:36.820 --> 00:10:40.760
I suggest you review that
prerequisite, as it goes over

00:10:40.760 --> 00:10:42.200
all these things in
great detail.

00:10:47.390 --> 00:10:50.530
When you're simulating markers
on a tile layer, it takes a

00:10:50.530 --> 00:10:51.940
couple of steps to do this.

00:10:51.940 --> 00:10:54.760
First thing you do is you
calculate the tiles that are

00:10:54.760 --> 00:10:59.830
required, along with the
positions for the icon images

00:10:59.830 --> 00:11:01.420
on those tiles.

00:11:01.420 --> 00:11:03.970
And the second step is
to draw those tiles.

00:11:03.970 --> 00:11:05.675
And it does sound simple.

00:11:05.675 --> 00:11:08.930
It is fairly simple.

00:11:08.930 --> 00:11:13.080
It requires two tables
and a database.

00:11:13.080 --> 00:11:18.430
We used PostgreSQL for this
demonstration, which has some

00:11:18.430 --> 00:11:21.400
really great features, some
spatial features like finding

00:11:21.400 --> 00:11:25.320
points closest to
a coordinate.

00:11:25.320 --> 00:11:28.430
Things like that are very
useful in this type of

00:11:28.430 --> 00:11:29.680
discussion.

00:11:31.920 --> 00:11:35.830
The two tables we use, one is
the data table which contains

00:11:35.830 --> 00:11:39.670
the name, the HTML for the
info window, and the

00:11:39.670 --> 00:11:41.630
coordinate of the volcano.

00:11:41.630 --> 00:11:46.610
And then we create a temporary
table that contains the zoom

00:11:46.610 --> 00:11:50.540
number, the x and y tile
numbers, and the pixel

00:11:50.540 --> 00:11:55.690
location for the top left corner
of the icon image.

00:11:55.690 --> 00:11:58.770
Now, the top left corner is
important, because that's the

00:11:58.770 --> 00:12:04.960
only thing you need to know
about placing an icon image on

00:12:04.960 --> 00:12:06.460
a tile image.

00:12:06.460 --> 00:12:07.930
You need to know the
top left corner.

00:12:07.930 --> 00:12:14.370
That's your anchor point
when merging images.

00:12:14.370 --> 00:12:18.310
We use the GD library.

00:12:21.910 --> 00:12:25.310
It's a really good graphics
library for

00:12:25.310 --> 00:12:28.820
creating these images.

00:12:28.820 --> 00:12:32.640
I'm sure that if you're not
able to use GD, there's

00:12:32.640 --> 00:12:33.910
another one called
ImageMagick.

00:12:33.910 --> 00:12:36.400
That's another great
library, and there

00:12:36.400 --> 00:12:38.980
must be one for .net.

00:12:38.980 --> 00:12:41.380
I don't know the name of it,
but I'm sure there's a good

00:12:41.380 --> 00:12:43.820
one for that, as well.

00:12:43.820 --> 00:12:47.340
Now when you're calculating the
tiles required, you have

00:12:47.340 --> 00:12:51.900
this little issue that pops up,
and that's that icons can

00:12:51.900 --> 00:12:54.150
overlap tiles.

00:12:54.150 --> 00:12:57.870
A coordinate itself, or point,
like the point of a volcano,

00:12:57.870 --> 00:12:59.390
will only be on one tile.

00:12:59.390 --> 00:13:04.690
But when you expand it out to an
icon, which in this case is

00:13:04.690 --> 00:13:09.050
a 24 by 24 pixel image,
it can easily overlap

00:13:09.050 --> 00:13:10.610
onto separate tiles.

00:13:10.610 --> 00:13:14.690
Here you see icons are
overlapping onto the adjacent

00:13:14.690 --> 00:13:20.620
tile, which is something
you have to handle.

00:13:20.620 --> 00:13:22.910
Here's a worst case
scenario where you

00:13:22.910 --> 00:13:25.570
have an anchor point--

00:13:25.570 --> 00:13:29.430
the point itself is located in
the upper left hand corner of

00:13:29.430 --> 00:13:32.240
tile number four, within
just a couple of

00:13:32.240 --> 00:13:36.900
pixels of the tile boundary.

00:13:36.900 --> 00:13:39.530
In this case, we're using the
center of the tile as the

00:13:39.530 --> 00:13:40.280
anchor point.

00:13:40.280 --> 00:13:48.140
So if the coordinate is within
12 pixels, or half the icon

00:13:48.140 --> 00:13:52.475
size, of the boundary of the
tile, then that tile is going

00:13:52.475 --> 00:13:55.020
to overlap onto the next tile.

00:13:55.020 --> 00:13:59.030
We have to be able to handle
this in order to show the tile

00:13:59.030 --> 00:14:00.730
layers correctly.

00:14:00.730 --> 00:14:04.820
Now, there are two ways that
I've come up with to do this.

00:14:04.820 --> 00:14:08.700
One is called the fudging
method, where you force a

00:14:08.700 --> 00:14:11.850
coordinate or an icon
to be on one tile.

00:14:11.850 --> 00:14:16.200
And the other is the exact
method, where you handle this

00:14:16.200 --> 00:14:22.850
problem so that it's
shown correctly.

00:14:22.850 --> 00:14:25.150
Now with the fudging method,
what you do is you simply

00:14:25.150 --> 00:14:30.810
slide the anchor point of the
icon whatever number pixels

00:14:30.810 --> 00:14:36.370
you have as overlap so that
the icon fits on one tile.

00:14:36.370 --> 00:14:42.120
This could be very useful for
a number of conditions.

00:14:42.120 --> 00:14:45.360
Here we show the fudging method,
where we've moved

00:14:45.360 --> 00:14:46.890
these overlapping tiles.

00:14:46.890 --> 00:14:49.840
You see on the before fudge,
you see some of the icons

00:14:49.840 --> 00:14:50.760
overlapping.

00:14:50.760 --> 00:14:55.570
And after the fudge, the icons
reside on the tile.

00:14:55.570 --> 00:14:58.830
This works well for large
features, such as cities,

00:14:58.830 --> 00:15:05.640
parks, states, zip codes, post
codes, things like that that

00:15:05.640 --> 00:15:09.380
the icon could reside anywhere
inside that aerial feature and

00:15:09.380 --> 00:15:11.170
still be accurate.

00:15:11.170 --> 00:15:15.200
Where it starts to fall apart is
if you're trying to depict

00:15:15.200 --> 00:15:19.720
point features, like buildings,
or parks, or cars

00:15:19.720 --> 00:15:24.880
on roads, things like that--
transit stations.

00:15:24.880 --> 00:15:28.150
Anywhere where the icon, even
moving it a few pixels is

00:15:28.150 --> 00:15:32.960
going to affect the accuracy
of the map, fudging isn't

00:15:32.960 --> 00:15:34.890
really a good choice.

00:15:34.890 --> 00:15:38.200
Another place where fudging
doesn't work really well is if

00:15:38.200 --> 00:15:41.420
you have a very large
number of icons.

00:15:41.420 --> 00:15:44.090
If you have a large number of
icons, what happens when you

00:15:44.090 --> 00:15:48.160
fudge them is you create
artifacts on your tiles where

00:15:48.160 --> 00:15:50.630
the boundaries of the tiles will
be the only place that

00:15:50.630 --> 00:15:52.090
will be devoid of icons.

00:15:52.090 --> 00:15:54.853
And it's very obvious
to the eye once you

00:15:54.853 --> 00:15:56.103
run into that situation.

00:15:58.610 --> 00:16:01.410
Using the exact method, what
you do is you calculate the

00:16:01.410 --> 00:16:06.500
tiles that are required for
each corner of the icon.

00:16:06.500 --> 00:16:09.470
And if they all are the
same, then the icon

00:16:09.470 --> 00:16:10.890
resides on one tile.

00:16:10.890 --> 00:16:14.770
If they're not, then it's
overlapping somewhere.

00:16:14.770 --> 00:16:20.590
And what you do is you take the
tiles that are for each

00:16:20.590 --> 00:16:24.760
corner, and then you calculate
the position of the upper

00:16:24.760 --> 00:16:28.730
left-hand corner of the icon
for each of those tiles.

00:16:28.730 --> 00:16:31.170
And you add that into your
temporary table that we've

00:16:31.170 --> 00:16:32.810
created earlier.

00:16:32.810 --> 00:16:36.590
Now, what this can cause is, for
instance, in tile number

00:16:36.590 --> 00:16:44.370
four, the upper left hand corner
for the icon is off the

00:16:44.370 --> 00:16:45.460
tile completely.

00:16:45.460 --> 00:16:47.470
It's up into tile number one.

00:16:47.470 --> 00:16:50.710
So for tile number four, that
will give you relatively

00:16:50.710 --> 00:16:54.400
negative coordinates
for that tile.

00:16:54.400 --> 00:16:57.980
And so when you go to draw that
tile, you'll be trying to

00:16:57.980 --> 00:17:01.700
draw that icon starting in
a negative coordinate.

00:17:01.700 --> 00:17:03.670
Now, with GD this is handled
beautifully.

00:17:03.670 --> 00:17:08.030
It just will slide your icon
image out into nowhere, into

00:17:08.030 --> 00:17:14.530
nothingness, and only paint onto
your tile the part of the

00:17:14.530 --> 00:17:16.890
icon image that should
be there.

00:17:16.890 --> 00:17:21.640
So check your documentation with
whatever you're going to

00:17:21.640 --> 00:17:26.119
be using, and make sure that a
negative coordinate will not

00:17:26.119 --> 00:17:28.250
cause some sort of issue.

00:17:28.250 --> 00:17:30.290
If it does, you'll have to
handle it differently.

00:17:30.290 --> 00:17:33.130
But negative coordinates
work well with GD.

00:17:33.130 --> 00:17:39.190
And the only time in this
particular worst case scenario

00:17:39.190 --> 00:17:42.280
that the tile coordinates will
be positive is in tile number

00:17:42.280 --> 00:17:45.580
one where the upper left
hand corner resides

00:17:45.580 --> 00:17:47.270
actually on the tile.

00:17:47.270 --> 00:17:50.370
In two, three, and four, there
will be at least one negative

00:17:50.370 --> 00:17:51.620
coordinate.

00:17:53.620 --> 00:17:57.980
Now once you've cycled through
all your points and calculated

00:17:57.980 --> 00:18:00.940
the upper left-hand corners for
all the tiles that you're

00:18:00.940 --> 00:18:05.000
going to need, and you select
a distinct list of the tiles

00:18:05.000 --> 00:18:06.070
that are required.

00:18:06.070 --> 00:18:11.020
That's Select Distinct based
on the x and y tile names.

00:18:11.020 --> 00:18:12.770
And that gives you your
list of tiles

00:18:12.770 --> 00:18:14.790
that you have to produce.

00:18:14.790 --> 00:18:18.430
Then you cycle through those,
one at a time, and you gather

00:18:18.430 --> 00:18:23.450
all the points for that tile
that you are working on, and

00:18:23.450 --> 00:18:31.320
cycle through the records and
your temporary table, and draw

00:18:31.320 --> 00:18:34.250
onto that tile the icons.

00:18:37.000 --> 00:18:38.900
And then you output the tile,
and you go through until

00:18:38.900 --> 00:18:41.590
you've completed
the whole set.

00:18:41.590 --> 00:18:44.740
What you're creating is what's
called a sparse tile-set.

00:18:44.740 --> 00:18:47.320
In other words, there
will only be tiles

00:18:47.320 --> 00:18:49.850
for ones with data.

00:18:49.850 --> 00:18:51.985
You won't be creating
tiles that have no

00:18:51.985 --> 00:18:53.870
data, no blank tiles.

00:18:53.870 --> 00:18:58.600
Now what this ends up doing is,
in this case, we create

00:18:58.600 --> 00:19:05.070
4,000 tiles that have icon
images on them for the entire

00:19:05.070 --> 00:19:07.250
world, zooms 3 to 10.

00:19:07.250 --> 00:19:11.230
Now, if we were to create blank
tiles, in addition to

00:19:11.230 --> 00:19:15.630
tiles with data, we'd be
creating 1.4 million tiles.

00:19:15.630 --> 00:19:19.690
But by only producing tiles
that have data, we create

00:19:19.690 --> 00:19:23.060
4,000 tiles, which is
significantly less.

00:19:23.060 --> 00:19:26.970
That saves both in
time to process.

00:19:26.970 --> 00:19:29.490
It saves on space
on the server.

00:19:29.490 --> 00:19:32.530
It also allows the server to
retrieve the tiles a lot

00:19:32.530 --> 00:19:36.040
faster, because it doesn't have
to go through so many.

00:19:36.040 --> 00:19:41.090
We recommend also that you keep
your tiles in a separate

00:19:41.090 --> 00:19:42.620
directory for each zoom level.

00:19:42.620 --> 00:19:47.450
That facilitates recreating a
particular zoom level, and it

00:19:47.450 --> 00:19:50.495
also allows the server to pick
them up a lot faster.

00:19:54.310 --> 00:19:56.890
Once you've created your tiles,
then the next thing is

00:19:56.890 --> 00:19:59.872
to handle the simulated
marker clicks.

00:19:59.872 --> 00:20:02.650
Now, the way this works is you
create a listener in your

00:20:02.650 --> 00:20:06.510
JavaScript, in your map,
so that you're

00:20:06.510 --> 00:20:08.860
listening for clicks.

00:20:08.860 --> 00:20:12.120
When you get a click, what you
do is you send the click

00:20:12.120 --> 00:20:16.900
coordinate and the zoom to your
server for processing.

00:20:16.900 --> 00:20:20.915
The server click handler selects
the closest point out

00:20:20.915 --> 00:20:24.830
of the database to the click,
and then checks to make sure

00:20:24.830 --> 00:20:26.820
that it's within tolerance.

00:20:26.820 --> 00:20:29.260
And the way you do that is
with a simple distance

00:20:29.260 --> 00:20:34.860
formula, which is x1 minus x2
squared plus y1 minus y2

00:20:34.860 --> 00:20:39.360
squared equals the number of
pixels distance from the point

00:20:39.360 --> 00:20:42.470
that was clicked on to the point
that was selected out of

00:20:42.470 --> 00:20:43.820
the database.

00:20:43.820 --> 00:20:45.700
If that is within
the tolerance--

00:20:45.700 --> 00:20:50.070
and my usual number is somewhere
between 10 and 20.

00:20:50.070 --> 00:20:53.150
Mobile-type applications, I
suggest go a little bit

00:20:53.150 --> 00:20:56.550
higher, perhaps 20 pixels,
because it's going to be

00:20:56.550 --> 00:20:57.950
selected by a finger.

00:20:57.950 --> 00:21:03.900
But for regular desktop
applications, 10 pixels is

00:21:03.900 --> 00:21:05.230
usually enough--

00:21:05.230 --> 00:21:09.360
then you generate the XML that's
required by the client

00:21:09.360 --> 00:21:11.680
to produce an info window.

00:21:11.680 --> 00:21:15.140
Send that back, and then the
client displays the results.

00:21:15.140 --> 00:21:21.110
It's fairly simple, and it
doesn't require a lot of code.

00:21:21.110 --> 00:21:23.180
Now, one thing that you're going
to get is you're going

00:21:23.180 --> 00:21:26.030
to have a problem
with 404 errors

00:21:26.030 --> 00:21:28.200
that you have to handle.

00:21:28.200 --> 00:21:30.760
You don't have to handle it, but
it's probably a good idea

00:21:30.760 --> 00:21:34.800
to handle them with
the tile server.

00:21:34.800 --> 00:21:39.190
If you don't intercept the
request for a tile with a tile

00:21:39.190 --> 00:21:43.150
server, what ends up happening
is your error logs get loaded

00:21:43.150 --> 00:21:46.740
with a lot of messages,
404 messages.

00:21:46.740 --> 00:21:50.540
If, on the other hand, you
handle your 404 errors or your

00:21:50.540 --> 00:21:54.360
tile requests with a tile
server, what you can do is

00:21:54.360 --> 00:21:56.910
check to see if the
tile exists.

00:21:56.910 --> 00:21:59.850
If the tile exists, you
send it to the client.

00:21:59.850 --> 00:22:03.110
If it doesn't exist, you
send a blank image

00:22:03.110 --> 00:22:05.410
instead of a 404 error.

00:22:05.410 --> 00:22:13.060
This allows the server
to operate faster.

00:22:13.060 --> 00:22:17.180
It doesn't create a whole lot
of crap error messages in

00:22:17.180 --> 00:22:18.430
error logs.

00:22:18.430 --> 00:22:22.770
And you also can do some things
like, for instance, you

00:22:22.770 --> 00:22:27.230
can hide your tile directory
below the web viewable part in

00:22:27.230 --> 00:22:29.530
your server for security.

00:22:29.530 --> 00:22:34.070
You can also control access to
your tiles by embedding a

00:22:34.070 --> 00:22:39.450
security code in your web page
that's passed to the request.

00:22:39.450 --> 00:22:43.000
And if the security code doesn't
match or is incorrect,

00:22:43.000 --> 00:22:45.080
you either deliver
an error message,

00:22:45.080 --> 00:22:47.550
nothing, or a blank tile.

00:22:47.550 --> 00:22:52.330
And this will help keep
unscrupulous web developers

00:22:52.330 --> 00:22:55.120
from taking your hard-earned
work and putting it

00:22:55.120 --> 00:22:56.370
in their own pages.

00:22:58.560 --> 00:22:59.840
Well, that's the end
of this discussion.

00:22:59.840 --> 00:23:04.000
We have some resources that
go along with this.

00:23:04.000 --> 00:23:07.100
The program to create the
tiles is included.

00:23:07.100 --> 00:23:11.070
The v3 web page is included.

00:23:11.070 --> 00:23:13.970
The volcano.pl is the
click handler.

00:23:13.970 --> 00:23:16.060
We include that as well.

00:23:16.060 --> 00:23:20.510
The tile server that we just
discussed, the data itself,

00:23:20.510 --> 00:23:24.540
which you can download directly
from the Smithsonian

00:23:24.540 --> 00:23:25.480
volcano project.

00:23:25.480 --> 00:23:29.770
But we have it in a Postgres
dump format, which will make

00:23:29.770 --> 00:23:34.230
it easier if you're using
Postgres, the Perl module for

00:23:34.230 --> 00:23:36.100
doing the tile math.

00:23:36.100 --> 00:23:37.790
We have the slides that
were used in this

00:23:37.790 --> 00:23:39.830
presentation as a PDF.

00:23:39.830 --> 00:23:43.610
We also have an article that
gives a synopsis of this

00:23:43.610 --> 00:23:44.980
discussion.

00:23:44.980 --> 00:23:47.820
All above materials are
available under the Apache

00:23:47.820 --> 00:23:51.380
license, so use them
as you see fit.

00:23:51.380 --> 00:24:03.610
And the URL for that is
www.usnaviguide.com/ws-2010-08.

00:24:03.610 --> 00:24:04.860
Thank you very much.

