WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.381
[MUSIC PLAYING]

00:00:03.939 --> 00:00:05.230
ANDREW BROGDON: Hey, everybody.

00:00:05.230 --> 00:00:06.540
I'm Andrew from
the Flutter team.

00:00:06.540 --> 00:00:08.206
And in this video,
I'm going to tell you

00:00:08.206 --> 00:00:10.019
all about Flutter's
stateful widgets--

00:00:10.019 --> 00:00:12.060
what makes them different
from stateless widgets,

00:00:12.060 --> 00:00:13.772
how state objects
work, and more.

00:00:13.772 --> 00:00:16.230
This is actually the second in
a run of videos we're doing.

00:00:16.230 --> 00:00:17.880
So if you haven't
seen the first one,

00:00:17.880 --> 00:00:20.005
I recommend scrolling down
to the video description

00:00:20.005 --> 00:00:22.500
below, where we
have a link to it.

00:00:22.500 --> 00:00:24.210
If you have seen
that first video,

00:00:24.210 --> 00:00:27.030
you're probably pretty familiar
with stateless widgets.

00:00:27.030 --> 00:00:29.730
They're an immutable
configuration, or blueprint, so

00:00:29.730 --> 00:00:31.740
to speak, for an
element, which is what's

00:00:31.740 --> 00:00:33.700
actually placed on screen.

00:00:33.700 --> 00:00:35.940
Now, if you're like me, you
hear that and you think,

00:00:35.940 --> 00:00:37.615
immutable configs are
great, but I'm not

00:00:37.615 --> 00:00:39.990
writing an app that's just
going to draw itself and stop.

00:00:39.990 --> 00:00:41.220
What about data that changes?

00:00:41.220 --> 00:00:43.410
How do I track that
and update my UI?

00:00:43.410 --> 00:00:46.380
Well, that's where
stateful widget comes in.

00:00:46.380 --> 00:00:48.750
It provides immutable
configuration info

00:00:48.750 --> 00:00:51.720
and a state object that can
change over time and trigger

00:00:51.720 --> 00:00:53.460
rebuilds of the UI.

00:00:53.460 --> 00:00:56.230
Let's take a look at some code,
and I'll show you how it works.

00:00:56.230 --> 00:00:57.990
Here's a basic stateless widget.

00:00:57.990 --> 00:01:00.330
It takes a name and
count in its constructor,

00:01:00.330 --> 00:01:02.400
and it builds a text
widget to display them.

00:01:02.400 --> 00:01:04.120
Super simple.

00:01:04.120 --> 00:01:07.410
But let's say I need that
count to change over time.

00:01:07.410 --> 00:01:09.930
I can't change anything inside
a stateless widget, right?

00:01:09.930 --> 00:01:11.400
Count is final.

00:01:11.400 --> 00:01:15.360
So I'll turn this into
a stateful widget.

00:01:15.360 --> 00:01:19.410
Now I've got a couple classes,
a widget and a state object.

00:01:19.410 --> 00:01:21.660
The widget is responsible
for two things--

00:01:21.660 --> 00:01:25.080
holding onto that immutable
name value, which won't change,

00:01:25.080 --> 00:01:27.300
and creating the state object.

00:01:27.300 --> 00:01:29.190
The state object,
for its part, holds

00:01:29.190 --> 00:01:30.870
the count value,
which you'll notice

00:01:30.870 --> 00:01:32.400
is no longer tagged as final.

00:01:32.400 --> 00:01:34.740
It can change, and
the state object now

00:01:34.740 --> 00:01:36.030
builds child widgets.

00:01:36.030 --> 00:01:37.740
In this case, the
text widget that

00:01:37.740 --> 00:01:39.810
will display the name and count.

00:01:39.810 --> 00:01:41.850
To get a handle on
how this really works,

00:01:41.850 --> 00:01:45.820
let's take a look at the
widget and element trees.

00:01:45.820 --> 00:01:47.632
If you recall from
our previous video,

00:01:47.632 --> 00:01:49.090
it's the element
tree that actually

00:01:49.090 --> 00:01:50.950
represents what's on screen.

00:01:50.950 --> 00:01:53.990
The widgets are just
blueprints for those elements.

00:01:53.990 --> 00:01:56.620
Now, for stateless widgets, the
process of getting on screen

00:01:56.620 --> 00:01:58.910
is pretty straightforward.

00:01:58.910 --> 00:02:01.310
You give Flutter a stateless
widget, and Flutter says,

00:02:01.310 --> 00:02:02.980
no problem, I can display this.

00:02:02.980 --> 00:02:04.090
I just need an element.

00:02:04.090 --> 00:02:06.820
Hey, widget, can you
make an element for me?

00:02:06.820 --> 00:02:09.460
The stateless widget
creates a stateless element,

00:02:09.460 --> 00:02:11.950
and it's mounted into
the element tree.

00:02:11.950 --> 00:02:14.920
If that stateless widget has
child widgets that it builds,

00:02:14.920 --> 00:02:16.450
elements are made
from them, they

00:02:16.450 --> 00:02:19.360
get mounted, and so on down.

00:02:19.360 --> 00:02:22.300
With a stateful widget,
there's an extra step.

00:02:22.300 --> 00:02:24.220
Just like before,
first comes the widget.

00:02:24.220 --> 00:02:26.890
But when Flutter asks
it to create an element,

00:02:26.890 --> 00:02:29.470
it returns a stateful element.

00:02:29.470 --> 00:02:31.630
That stateful element then
goes back to the widget

00:02:31.630 --> 00:02:34.690
and says, hey, can you
make a state object for me?

00:02:34.690 --> 00:02:38.560
Which is what that
createState method is for.

00:02:38.560 --> 00:02:40.780
That method kicks out
a new state object,

00:02:40.780 --> 00:02:43.880
and the element holds onto it.

00:02:43.880 --> 00:02:45.460
Now it's time to
build child widgets,

00:02:45.460 --> 00:02:49.150
so stateful element calls the
state object's Build method.

00:02:49.150 --> 00:02:52.270
If we take a look at the code
from before, you'll see why.

00:02:52.270 --> 00:02:54.580
In order to build a text
with the correct string,

00:02:54.580 --> 00:02:57.250
we need the name property
from the widget and the count

00:02:57.250 --> 00:02:59.440
property from the state object.

00:02:59.440 --> 00:03:01.450
Because the state object
maintains a reference

00:03:01.450 --> 00:03:03.790
to the widget for widgets
maintaining state,

00:03:03.790 --> 00:03:06.430
it can access both
values and use them

00:03:06.430 --> 00:03:08.520
to construct the text widget.

00:03:08.520 --> 00:03:10.540
And there it is.

00:03:10.540 --> 00:03:13.150
Text is stateless, so it
creates a stateless element

00:03:13.150 --> 00:03:15.650
which gets mounted in the tree.

00:03:15.650 --> 00:03:17.980
Now, technically, text has
a few children of its own

00:03:17.980 --> 00:03:20.855
to help with accessibility and
actually rendering the text,

00:03:20.855 --> 00:03:23.230
but for this example I'm just
going to keep things simple

00:03:23.230 --> 00:03:25.210
and stop right here.

00:03:25.210 --> 00:03:29.570
So everything's built, and our
element tree is ready to go.

00:03:29.570 --> 00:03:33.220
All right, let's take another
look at the state object.

00:03:33.220 --> 00:03:36.820
Right now, nothing in here is
actually updating the state.

00:03:36.820 --> 00:03:39.130
Nothing's changing
that count property.

00:03:39.130 --> 00:03:41.830
But if I drop in a
gesture detector,

00:03:41.830 --> 00:03:44.320
I can use the setState
method in the state object

00:03:44.320 --> 00:03:46.120
to make a change.

00:03:46.120 --> 00:03:49.270
setState is a way for you to set
properties on the state object

00:03:49.270 --> 00:03:51.700
and trigger updates to the UI.

00:03:51.700 --> 00:03:53.830
You give it a function
that makes the changes,

00:03:53.830 --> 00:03:55.540
and the state object
runs it and make

00:03:55.540 --> 00:03:58.360
sure the UI gets
rebuilt afterwards.

00:03:58.360 --> 00:04:01.600
If we go back to the
diagram, when setState runs,

00:04:01.600 --> 00:04:03.220
the count gets incremented.

00:04:03.220 --> 00:04:05.500
Plus-- and here's
the important bit--

00:04:05.500 --> 00:04:08.470
the state object marks
its element as dirty,

00:04:08.470 --> 00:04:11.480
meaning it will rebuild its
children on the next frame.

00:04:11.480 --> 00:04:13.960
And here, I'm using frame
in the graphics card,

00:04:13.960 --> 00:04:16.750
60-frames-per-second sense.

00:04:16.750 --> 00:04:18.190
When that next
frame rolls around,

00:04:18.190 --> 00:04:20.061
just like before,
stateful element

00:04:20.061 --> 00:04:21.519
calls the Build
method in the state

00:04:21.519 --> 00:04:24.970
object to rebuild the children,
and out pops a new text widget

00:04:24.970 --> 00:04:27.730
that shows the new count.

00:04:27.730 --> 00:04:31.420
The old text widget goes away,
and in comes the new one.

00:04:31.420 --> 00:04:33.130
And here's a cool part.

00:04:33.130 --> 00:04:36.220
Because that new widget is
the same type as the old one--

00:04:36.220 --> 00:04:38.980
they're both text-- the
stateless element stays right

00:04:38.980 --> 00:04:40.930
where it is, and
just updates itself

00:04:40.930 --> 00:04:42.520
to reference the new widget.

00:04:42.520 --> 00:04:44.860
So that's a basic example
of how state objects can

00:04:44.860 --> 00:04:48.190
hold data that changes over time
and rebuild child widgets when

00:04:48.190 --> 00:04:49.300
it does.

00:04:49.300 --> 00:04:51.160
But there's another
really useful thing

00:04:51.160 --> 00:04:52.570
about state objects--

00:04:52.570 --> 00:04:54.590
they have a long lifespan.

00:04:54.590 --> 00:04:56.770
They can remain attached
to the element tree

00:04:56.770 --> 00:04:59.800
even when the original widget
gets replaced by a new one,

00:04:59.800 --> 00:05:02.170
as long as that new one
is of the same type.

00:05:02.170 --> 00:05:04.780
For example, if the
ItemCounter widget itself

00:05:04.780 --> 00:05:08.380
would rebuild, maybe from a
change above it in the tree,

00:05:08.380 --> 00:05:10.990
the original ItemCounter
widget goes away,

00:05:10.990 --> 00:05:13.450
but since the new one is
the same type of widget,

00:05:13.450 --> 00:05:15.850
the stateful element
and state object

00:05:15.850 --> 00:05:17.380
stay right where they are.

00:05:17.380 --> 00:05:18.874
They survive the
change in widgets,

00:05:18.874 --> 00:05:21.040
and just mark themselves
dirty so their children get

00:05:21.040 --> 00:05:24.430
rebuilt. Then the state
object's Build method kicks out

00:05:24.430 --> 00:05:26.770
a new text widget
using its count value,

00:05:26.770 --> 00:05:29.950
but with the new ItemCounter
widget's name value.

00:05:29.950 --> 00:05:33.610
The old text widget goes
away, the new one's mounted,

00:05:33.610 --> 00:05:35.380
and the stateless
element for the text

00:05:35.380 --> 00:05:36.569
stays right where it is.

00:05:36.569 --> 00:05:38.110
So that's how state
can be maintained

00:05:38.110 --> 00:05:40.240
even after the widget
that made the state object

00:05:40.240 --> 00:05:42.080
has been replaced.

00:05:42.080 --> 00:05:44.320
It's kind of like stateful
hot reload, right?

00:05:44.320 --> 00:05:46.030
You can push new
code to your device

00:05:46.030 --> 00:05:49.012
without changing where you are
in the app and what's going on.

00:05:49.012 --> 00:05:51.220
Here, we're building new
widgets with new properties,

00:05:51.220 --> 00:05:52.970
but that state stays the same.

00:05:52.970 --> 00:05:54.367
I'm not using it
in this example,

00:05:54.367 --> 00:05:56.200
but there's even a
method in the State class

00:05:56.200 --> 00:05:58.690
called didUpdateWidget
that you can override

00:05:58.690 --> 00:06:00.160
if your state
object needs to know

00:06:00.160 --> 00:06:02.200
when its widget gets replaced.

00:06:02.200 --> 00:06:03.821
Animated Container,
for example, uses

00:06:03.821 --> 00:06:06.070
this to know when it should
start animating the change

00:06:06.070 --> 00:06:07.760
from one config to another.

00:06:07.760 --> 00:06:09.610
So as you can see,
stateful widgets

00:06:09.610 --> 00:06:11.530
give you the power to
track data over time

00:06:11.530 --> 00:06:15.050
and update your app's UI to
match, which is really handy.

00:06:15.050 --> 00:06:17.620
The ironic thing is, though,
as you get better and better

00:06:17.620 --> 00:06:19.270
with Flutter,
you'll probably find

00:06:19.270 --> 00:06:22.240
yourself writing fewer and
fewer stateful widgets.

00:06:22.240 --> 00:06:24.850
One of the reasons is that a
lot of the common use cases

00:06:24.850 --> 00:06:26.330
have already been implemented.

00:06:26.330 --> 00:06:28.432
For example, say you
have a stream of data,

00:06:28.432 --> 00:06:30.640
and you want a stateful
widget that rebuilds whenever

00:06:30.640 --> 00:06:32.620
the stream emits a new value.

00:06:32.620 --> 00:06:34.360
Well, that's a stream
builder, and it's

00:06:34.360 --> 00:06:36.580
part of the Flutter framework.

00:06:36.580 --> 00:06:38.080
Another reason is
that if you've got

00:06:38.080 --> 00:06:40.159
a bunch of nested
stateful widgets,

00:06:40.159 --> 00:06:42.700
passing data through all those
build methods and constructors

00:06:42.700 --> 00:06:44.110
can get cumbersome.

00:06:44.110 --> 00:06:46.140
Fortunately, there's
another type of widget

00:06:46.140 --> 00:06:48.150
that makes it easy
to access data stored

00:06:48.150 --> 00:06:51.570
near the top of the tree even
if you're 100 widgets down.

00:06:51.570 --> 00:06:54.270
It's called InheritedWidget,
and we'll tell you all about it

00:06:54.270 --> 00:06:56.370
in the next video in the series.

00:06:56.370 --> 00:06:58.110
In the meantime,
for more information

00:06:58.110 --> 00:07:01.680
about Flutter and all its many
widgets, head to flutter.io.

00:07:01.680 --> 00:07:05.330
[MUSIC PLAYING]

