WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:05.040
We've already covered Signal, WhatsApp, Facebook private messages, these kind of things.

00:00:06.790 --> 00:00:14.340
Peer-to-peer, sort of two-person communication, which hopefully is end to end. And it means that no one can get in on that conversation,

00:00:15.070 --> 00:00:18.150
Impersonate us, read any messages, put in any messages themselves.

00:00:18.670 --> 00:00:20.939
Even the server, and this is a really good thing.

00:00:21.460 --> 00:00:26.970
This doesn't work as well in group messages. And maybe people don't actually know this.

00:00:29.560 --> 00:00:35.790
Last time we talked about end-to-end encryption in apps like Signal, WhatsApp, Facebook Messenger.

00:00:36.280 --> 00:00:43.860
Signal implemented this by default, Facebook Messenger has a private conversations thing you can enable and you definitely should enable

00:00:44.620 --> 00:00:48.239
so don't use the default because they'll be reading your messages, but

00:00:48.840 --> 00:00:55.460
These things kind of start to break down when we're looking at groups, right? What's true in terms of cryptographic security,

00:00:55.860 --> 00:01:01.100
what's true between you and me is not the same as when we bring Steve in. There were a lot of reasons for that.

00:01:01.100 --> 00:01:05.200
So let's imagine that we've got three people in a conversation, right or maybe just a couple of people

00:01:05.680 --> 00:01:07.400
So I'm here, this is Mike

00:01:07.680 --> 00:01:12.299
We're actually using not Alice and Bob this time, they'll be glad to be having a bit of a break

00:01:12.540 --> 00:01:14.720
I mean I thought about using it just to keep the trend going

00:01:15.120 --> 00:01:17.820
But let's not. So this is Sean and Steve over here

00:01:18.180 --> 00:01:24.040
Normally when we're talking about one of these applications I will have some kind of shared key with you

00:01:24.560 --> 00:01:28.880
We've got this double ratchet going on where we're sending messages back and forth keys are being updated

00:01:29.110 --> 00:01:32.579
So I will have a kind of encrypted communication channel with you

00:01:32.579 --> 00:01:36.269
Now, of course this is going through a server, but I'm not drawing a server in this image

00:01:36.269 --> 00:01:41.220
There's a few interesting properties that this particular conversation has. The first is obviously it's it's secret, right?

00:01:41.540 --> 00:01:44.120
This is encryption. Also, it has something called perfect forward secrecy

00:01:44.560 --> 00:01:51.810
Which means that if someone cracks one of our keys they can't use that to go back and crack all the other messages

00:01:52.509 --> 00:01:56.009
Previously to this because the keys are constantly updating and you can't go backwards

00:01:57.189 --> 00:02:02.249
it also has this kind of self-healing or post compromised security, which means that if you

00:02:02.700 --> 00:02:06.800
Let's say someone cracks one of my keys if they sort of look away even for a second,

00:02:07.200 --> 00:02:10.260
We can have some more communication and that problem goes away

00:02:10.780 --> 00:02:15.960
Essentially, to continually eavesdrop on our conversation, not only do you have to break one of our keys

00:02:16.700 --> 00:02:20.920
But you also have to see every single message from then on. If you miss one, you're out

00:02:20.930 --> 00:02:24.249
So the question I guess is if we want to do implement group conversations

00:02:24.250 --> 00:02:27.160
Which is where I'm sending messages to both you and Steve at the same time

00:02:27.920 --> 00:02:32.140
Can we still do these things? And the answer is a little bit but not totally

00:02:33.200 --> 00:02:39.100
So, okay. So let's imagine now we've got a three-way conversation.

00:02:40.060 --> 00:02:44.020
Now remember I have already got channels, but I've been perhaps talking to you beforehand

00:02:44.020 --> 00:02:46.510
And you and Steve have been talking as well separately

00:02:46.510 --> 00:02:50.349
Right, if it's the case that you're introduced to a group where you haven't been talking to them

00:02:50.349 --> 00:02:54.760
You will form a two-way conversation with that person immediately right as a way as a sort of prerequisite

00:02:55.160 --> 00:02:56.320
That's the way it's normally done

00:02:56.660 --> 00:03:00.480
Well, I suppose the sort of naive way of doing this would this be: whenever I want to send a message to the group

00:03:00.490 --> 00:03:02.350
I send a message to both of you

00:03:02.350 --> 00:03:07.600
Using our pairwise channels and then we have the benefits of the security of each of these channels

00:03:07.600 --> 00:03:13.260
I send that same message once encrypted using our keypairs and once encrypted using mine and Steve's keypairs

00:03:13.740 --> 00:03:17.240
And then kind of up to you and Steve to make sure these messages are in sync

00:03:17.800 --> 00:03:21.420
And if you then send a message, you're gonna send it this way. This is how our message works

00:03:21.420 --> 00:03:23.740
All right. This is not stupid, right

00:03:24.280 --> 00:03:30.320
The benefit you get is that each of the messages has the guaranteed security that we had with this sort of pairwise messaging:

00:03:30.500 --> 00:03:34.280
Self-healing, perfect forward secrecy, this kind of stuff.

00:03:34.760 --> 00:03:42.000
The problem is the more people you add to this group. So maybe you're a member of some kind of school thing, 50 people in the group, you're sending 50 messages

00:03:42.000 --> 00:03:43.560
And if you're not sending a text message

00:03:43.570 --> 00:03:47.320
Maybe you're sending a video suddenly the bandwidth becomes actually a bit of a problem

00:03:47.320 --> 00:03:50.080
This may not be an issue depending on the application

00:03:50.680 --> 00:03:55.380
But Whatsapp, Signal and others have decided that this is a bit of a problem, and this is not how they're going to do it.

00:03:56.020 --> 00:04:00.680
The next thing we could do is we could say well, why can't we use the same protocol to establish keys to get a group key?

00:04:02.140 --> 00:04:05.640
So you and me and Steve all team up

00:04:06.220 --> 00:04:11.240
We do our Diffie-Hellman in some way and that gets us one shared group key that we can then use, right?

00:04:11.560 --> 00:04:14.720
So then I encrypt a message to you both with the one group key

00:04:15.340 --> 00:04:19.640
Now, of course in practice I would just send the one message to the server and it would spread out

00:04:19.660 --> 00:04:23.289
So this will be called server-side fan-out. So a single message for me to the server

00:04:23.289 --> 00:04:26.309
The server knows it has to go to the group and it sends it out

00:04:26.860 --> 00:04:34.100
Now there are ways to turn Diffie-Hellman into a kind of three- or four- or n-way Diffie-Hellman

00:04:34.680 --> 00:04:39.900
They're usually using trees where two of us will do it, exchange, and then someone will do an exchange with that

00:04:40.960 --> 00:04:44.360
And and so on all the way up to the top where that's everyone's key

00:04:44.920 --> 00:04:49.589
The problem is that this takes time. It involves all the parties

00:04:50.220 --> 00:04:53.660
So implementing this in a way where Steve doesn't have to be online at the same time as me

00:04:54.300 --> 00:04:57.060
and at the same time as you, that's a problem

00:04:57.500 --> 00:05:01.400
And that's another of the things that we get from our pairwise messaging, this asynchronicity

00:05:02.320 --> 00:05:05.159
The other problem is that how often do we do this, right?

00:05:05.160 --> 00:05:10.200
If I create a group key with you and Steve and we chat for two years using that same key

00:05:10.270 --> 00:05:14.609
Maybe someone broke it one month in and has been reading all our messages for nearly two years

00:05:15.190 --> 00:05:21.150
Huge problem, right? So there's no self healing really unless we recompute these keys regularly

00:05:21.150 --> 00:05:24.460
So how does actually work, right? It's kind of a compromise

00:05:24.840 --> 00:05:31.960
What we do is we use our pairwise channels to establish a key and then we use group keys

00:05:32.440 --> 00:05:36.940
Kind of the big problem with this group key idea is that the Diffie-Hellman key exchange is complex

00:05:37.660 --> 00:05:40.560
and if people haven't got their phone switched on that's a huge problem

00:05:41.110 --> 00:05:46.379
one of the nice things would be if you and me could add Steve to a group when his phone's turned off

00:05:46.380 --> 00:05:49.710
And then a month later he remembers, turns his phone on it gets all the previous messages

00:05:49.780 --> 00:05:54.560
That would be really good. The way we do this is something called sender keys. So I'm going to write sender keys here

00:05:54.880 --> 00:05:59.400
A bit like our sending and receiving chains in a normal protocol,

00:05:59.710 --> 00:06:05.609
Each person comes up with a sending key, right? This is iterated for every message. So we have this perfect forward secrecy

00:06:06.360 --> 00:06:09.940
So, how do I give this to you? Well, I use the two-way communication we already have

00:06:10.640 --> 00:06:15.840
So I have a sender key for me. You have a sender key for Sean. This is not going to work

00:06:16.810 --> 00:06:22.050
And this is — yeah, I've not thought this through — This is a sender key for Steve

00:06:22.050 --> 00:06:24.929
I mean, this is a shambles and now I was only one letter, okay?

00:06:26.290 --> 00:06:28.290
Uh, anyway

00:06:29.650 --> 00:06:32.429
So at the very beginning we'd established a group

00:06:32.590 --> 00:06:35.789
So I send you a message which says this is my sender key for this group

00:06:35.790 --> 00:06:38.700
I send Steve a message. It says this is my sender key for this group

00:06:38.700 --> 00:06:42.749
You will do the same. It's a few initial messages, but it doesn't have to happen online

00:06:42.749 --> 00:06:47.519
I can send the messages and you can pick it up later. So that might sit on the server waiting for you

00:06:47.520 --> 00:06:52.840
Just like a normal WhatsApp message the server can't read it because it's protected using our end-to-end encryption

00:06:53.780 --> 00:07:01.340
From then on, when either I send a message I send it encrypted using my sender key and then I ratchet my sender key one tick

00:07:01.349 --> 00:07:03.718
If you are sending to someone you perhaps haven't had that before

00:07:03.759 --> 00:07:08.038
Someone said hey add this person to the group because they've joined the school or something

00:07:08.039 --> 00:07:13.199
In your previous season then presumably that then starts to use the stubs that we had in the previous thing?

00:07:13.960 --> 00:07:16.919
No, so what will happen: Yes, you mean the three keys?

00:07:17.469 --> 00:07:21.269
Yes, so what will happen is let's imagine, that we add a fourth person to the group

00:07:22.140 --> 00:07:26.400
Dave. Does Dave use WhatsApp?

00:07:27.540 --> 00:07:31.340
He does now, so Dave turns up. I've never spoken to Dave before on a mobile phone, right?

00:07:31.340 --> 00:07:37.460
So I will then perform a quick triple Diffie-Hellman handshake with Dave using the standard pairwise protocol we have

00:07:38.000 --> 00:07:40.520
And then I'll use that to distribute my sender key for this group

00:07:41.649 --> 00:07:44.459
And have a good thing is everyone can do this asynchronously

00:07:45.900 --> 00:07:52.280
There's an initial burst of messages you have to send which kind of increases linearly with the the amount of people you have

00:07:52.960 --> 00:07:57.420
20 people means 20 sender keys I have to send out but the server will handle most of that workload for me

00:07:57.760 --> 00:08:02.900
Everyone will know what key I'm going to be using because they just keep their receiving chains in sync with my sending chain

00:08:03.339 --> 00:08:09.599
but the disadvantage, and this is the key problem with group messaging like this

00:08:09.999 --> 00:08:13.049
Is that we've lost our self-healing property because these sender keys don't change

00:08:13.050 --> 00:08:16.379
They just ratchet along. We can't go back and find out a previous one

00:08:16.509 --> 00:08:18.509
But if anyone gets my key

00:08:18.779 --> 00:08:24.509
They can then intercept any message I ever send into this group and they can impersonate me by encrypting a message

00:08:24.909 --> 00:08:27.929
With that same key and there's no way of detecting this

00:08:28.629 --> 00:08:34.289
Now no one mentioned this in group conversation, but this is true of most group protocols at the moment

00:08:35.110 --> 00:08:39.329
It's not an absolute disaster because you know breaking these keys is not easy

00:08:39.329 --> 00:08:42.299
But essentially if we have a pairwise conversation

00:08:42.300 --> 00:08:46.640
And we invite Steve, what we've done is we've decreased security on our communication without realizing it

00:08:47.460 --> 00:08:51.600
We've gone from a double ratchet to a single ratchet. Is that right? Pretty much? Yeah, right

00:08:51.720 --> 00:08:59.120
So we've lost our Diffie-Hellman on the top that keeps things sort of self-healing, right, this post-compromise security

00:09:00.480 --> 00:09:05.360
There are papers out there now that have solutions to this that maybe will be implemented

00:09:05.360 --> 00:09:10.249
They'll be obviously have to be verified that they you know, they work and stuff that people will eventually solve this problem

00:09:10.249 --> 00:09:12.249
But at the moment it is not solved

00:09:12.869 --> 00:09:16.909
There's another problem: who's in this conversation, right? And do we trust everyone in this conversation?

00:09:17.399 --> 00:09:20.149
Remember that we looked at our safety numbers

00:09:20.309 --> 00:09:23.928
This was essentially your identity combined with my identity

00:09:24.029 --> 00:09:28.938
In a sort of hash form and if we have both have the same, we know we're the only two in this conversation

00:09:28.980 --> 00:09:31.879
As an aside for people who get interested

00:09:31.879 --> 00:09:35.839
I've gone through two different phones since then and so therefore you've no idea who yeah

00:09:35.879 --> 00:09:42.829
We haven't verified our public numbers this since you changed your phone. I'm kind of taking it on trust and I'm a bit skeptical

00:09:46.410 --> 00:09:51.019
So this is all this is all very nice for two person conversation, but for a multiple person conversation

00:09:51.329 --> 00:09:53.688
There isn't really a mechanism for doing this, right?

00:09:54.869 --> 00:10:00.289
You have to you could kind of go and verify all of your individual safety numbers of each pair, right? That would help

00:10:00.299 --> 00:10:03.709
It's a lot of work, especially if someone you don't know gets added to the group

00:10:03.709 --> 00:10:06.289
Maybe you're not in contact with that person sort of physically

00:10:07.319 --> 00:10:08.939
This is another drawback

00:10:08.939 --> 00:10:15.738
and actually there was an essay produced by someone from GCHQ recently that suggested have a quite a nice way for the government to

00:10:15.959 --> 00:10:22.219
Get access to some of these conversations for crime purposes would be just to be added as - as a silent party

00:10:22.350 --> 00:10:26.749
To this conversation right? Maybe the app could just whenever you create a group of three people

00:10:27.059 --> 00:10:30.379
It's actually a group of four people where one of them is the government

00:10:30.379 --> 00:10:32.599
I'll leave it to the comments to decide what they think of this

00:10:33.540 --> 00:10:37.759
Other video: Now I've got the token so I can load a value in, add the register into it and

00:10:37.829 --> 00:10:40.459
Store it back and hand the token and now I've got the token again

00:10:40.459 --> 00:10:41.879
I can load something into it

00:10:41.879 --> 00:10:42.689
into my register

00:10:42.689 --> 00:10:47.988
add something onto it so it back and pass the token on and I've got it so I can load the value in add the

00:10:47.989 --> 00:10:49.989
value from a register story back

