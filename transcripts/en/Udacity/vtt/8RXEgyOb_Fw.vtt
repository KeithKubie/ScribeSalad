WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.030
Now with all of this notation and
background behind us, we are ready for

00:00:03.030 --> 00:00:04.946
the Ford-Fulkerson method.

00:00:04.946 --> 00:00:07.840
As we'll see,
it's not really specific enough to merit

00:00:07.840 --> 00:00:11.890
being called an algorithm, though
sometimes we will call it that anyway.

00:00:11.890 --> 00:00:14.630
We begin by initializing the flow to 0.

00:00:14.630 --> 00:00:19.240
Then, while there is a path from
the source to the sink in the residual

00:00:19.240 --> 00:00:24.080
graph, we're going to calculate
the minimum capacity along this path.

00:00:24.080 --> 00:00:25.276
We'll call that b.

00:00:25.276 --> 00:00:28.210
And then we're going to
augment our flow,

00:00:28.210 --> 00:00:34.290
where the augmenting flow has b along
this path and 0 everywhere else.

00:00:34.290 --> 00:00:36.500
Once there are no more paths
in the residual graph,

00:00:36.500 --> 00:00:40.170
we just return the current flow that
we've found in this variable f.

00:00:41.310 --> 00:00:43.750
Let's see how this
work on a toy example.

00:00:43.750 --> 00:00:47.960
We start with 0 flow and
the capacities shown here.

00:00:47.960 --> 00:00:51.940
We find a path in the residual
graph that looks like this.

00:00:51.940 --> 00:00:54.630
The minimum capacity is 1, so

00:00:54.630 --> 00:01:00.490
we'll add that value to every edge
along the path in our original flow.

00:01:00.490 --> 00:01:04.830
The result is a new flow,
and a new residual graph.

00:01:04.830 --> 00:01:07.470
Here, there's only one st path.

00:01:07.470 --> 00:01:09.360
So we'll go ahead and choose that.

00:01:09.360 --> 00:01:13.390
Adding it to the old flow will cause
this flow across the middle to cancel

00:01:13.390 --> 00:01:18.050
out, leaving us with this flow and
this residual network.

00:01:18.050 --> 00:01:22.890
At this point, there are no st paths
in the residual graph, so we're done.

00:01:22.890 --> 00:01:26.960
Great, and it's easy to confirm that
the algorithm worked in this case.

00:01:26.960 --> 00:01:28.520
But how about in general?

00:01:28.520 --> 00:01:33.290
First, it's easy to verify
that f is indeed a flow.

00:01:33.290 --> 00:01:36.420
0 is a flow at the beginning,
and that each iteration

00:01:36.420 --> 00:01:40.610
we augment the current flow,
via flow in the residual graph.

00:01:40.610 --> 00:01:43.760
And as argued earlier,
this is indeed a flow.

00:01:43.760 --> 00:01:45.220
Does the algorithm terminate?

00:01:45.220 --> 00:01:50.150
Well, remember that the capacities are
all integral, so each augmenting flow,

00:01:50.150 --> 00:01:54.030
f prime,
has to have a value of at least 1.

00:01:54.030 --> 00:01:56.650
Otherwise the path
wouldn't be in the graph.

00:01:56.650 --> 00:02:01.540
Therefore, we can't have more iterations
that the maximum value for a flow.

00:02:02.540 --> 00:02:04.760
So, yes, it terminates.

00:02:04.760 --> 00:02:06.900
How much time does it
spend per iteration?

00:02:06.900 --> 00:02:10.280
Finding a path can be
done with search or

00:02:10.280 --> 00:02:14.090
depth first search in time
proportional to the number of edges.

00:02:14.090 --> 00:02:16.710
Constructing the residual graph itself

00:02:16.710 --> 00:02:19.440
takes time proportional
to the number of edges.

00:02:19.440 --> 00:02:22.550
And the number of edges in
the residual graph is, at most,

00:02:22.550 --> 00:02:25.350
twice the number of edges
in the original graph.

00:02:25.350 --> 00:02:29.660
Since we only possible
created those reverse edges.

00:02:29.660 --> 00:02:30.420
And of course,

00:02:30.420 --> 00:02:36.030
updating the flow requires a constant
amount of arithmetic per edge.

00:02:36.030 --> 00:02:39.890
So all in all then, we just have
order e times each iteration.

00:02:39.890 --> 00:02:43.030
That is, time proportional
to the number of edges.

00:02:43.030 --> 00:02:45.170
This is a good start for
the analysis, but

00:02:45.170 --> 00:02:46.880
it leaves us with some
unanswered questions.

00:02:47.890 --> 00:02:52.350
Most important perhaps, is whether
the return flow is a maximum flow.

00:02:52.350 --> 00:02:56.379
Sure, it's maximal in the sense that
we can't augment it any further.

00:02:56.379 --> 00:02:59.349
But how do we know that with
a different set of augmenting paths or

00:02:59.349 --> 00:03:02.099
perhaps with an entirely
different strategy altogether,

00:03:02.099 --> 00:03:05.040
we wouldn't have ended
up with a greater flow?

00:03:05.040 --> 00:03:09.380
Also, this bound on the number of
iterations is potentially exponential

00:03:09.380 --> 00:03:13.800
in the size of the input, leaving
us with an exponential algorithm.

00:03:13.800 --> 00:03:17.980
Perhaps there's some way to
improve either the analysis or

00:03:17.980 --> 00:03:20.480
the algorithm to get
a better running time.

00:03:20.480 --> 00:03:23.560
These two questions will occupy
the remainder of the lesson.

00:03:23.560 --> 00:03:26.620
We'll start by showing that
Ford-Fulkerson does indeed produce

00:03:26.620 --> 00:03:29.820
a maximum flow, and then we'll see
about improving its running time.

