WEBVTT
Kind: captions
Language: en

00:00:05.337 --> 00:00:06.920
SPEAKER: In the
previous videos, we've

00:00:06.920 --> 00:00:08.510
seen how the Oboe
library makes it

00:00:08.510 --> 00:00:10.910
easy to play low
latency audio, but what

00:00:10.910 --> 00:00:12.840
if you need to record audio.

00:00:12.840 --> 00:00:15.320
In this video, I'll show you
how to set up low latency

00:00:15.320 --> 00:00:17.390
streams for recording.

00:00:17.390 --> 00:00:21.230
Recording audio is done in much
the same way as playing audio.

00:00:21.230 --> 00:00:24.380
The main difference is that
our audio stream moves data

00:00:24.380 --> 00:00:26.880
from an audio
device, for example,

00:00:26.880 --> 00:00:30.410
the built in microphone,
rather than sending data to it.

00:00:30.410 --> 00:00:32.390
Before creating an
input audio stream,

00:00:32.390 --> 00:00:34.640
you'll need to make sure
that your app has acquired

00:00:34.640 --> 00:00:37.790
the record audio permission.

00:00:37.790 --> 00:00:39.320
To create the
input audio stream,

00:00:39.320 --> 00:00:42.830
we use an audio stream builder,
setting stream direction

00:00:42.830 --> 00:00:46.290
to input and the performance
mode to low latency.

00:00:46.290 --> 00:00:48.680
Now we can open the stream
by passing a reference

00:00:48.680 --> 00:00:51.350
to an audio stream pointer.

00:00:51.350 --> 00:00:53.180
After checking that
it opens successfully,

00:00:53.180 --> 00:00:54.920
you can start the stream.

00:00:54.920 --> 00:00:56.920
Data from the default
recording device

00:00:56.920 --> 00:00:58.500
will start moving
into the stream.

00:01:01.240 --> 00:01:03.400
There are two ways we
can read this data--

00:01:03.400 --> 00:01:05.800
either directly or
using a callback.

00:01:05.800 --> 00:01:07.420
It's possible to
obtain the lowest

00:01:07.420 --> 00:01:09.742
latency using both approaches.

00:01:09.742 --> 00:01:11.950
I'll demonstrate how to read
directly from the stream

00:01:11.950 --> 00:01:15.730
since the callback method was
covered in the previous video.

00:01:15.730 --> 00:01:18.790
The method we need is
unsurprisingly called read.

00:01:18.790 --> 00:01:21.040
It takes three parameters.

00:01:21.040 --> 00:01:24.820
Buffer is an array into which
the audio data will be read.

00:01:24.820 --> 00:01:28.090
Numb frames is the number
of audio frames to read,

00:01:28.090 --> 00:01:30.400
and time out nanoseconds
is the maximum number

00:01:30.400 --> 00:01:33.490
of nanoseconds which the
method will block for.

00:01:33.490 --> 00:01:35.500
If you specify 0
here, the method

00:01:35.500 --> 00:01:38.590
will return immediately,
copying only the data that

00:01:38.590 --> 00:01:41.270
was currently available
in the streams buffer.

00:01:41.270 --> 00:01:44.770
This is useful if you don't want
to block the current thread.

00:01:44.770 --> 00:01:48.490
So let's say we wanted to read
two milliseconds of audio data

00:01:48.490 --> 00:01:51.790
from a 16-bit mono audio stream.

00:01:51.790 --> 00:01:54.670
We can do this using
a blocking read.

00:01:54.670 --> 00:01:58.630
Start by creating an array
to store the frames of audio.

00:01:58.630 --> 00:02:00.190
The amount of data
we need to store

00:02:00.190 --> 00:02:02.590
will depend on the
streams sample rate.

00:02:02.590 --> 00:02:05.440
The timeout should be longer
than the amount of audio

00:02:05.440 --> 00:02:06.970
we want to read.

00:02:06.970 --> 00:02:09.009
In this case, we'll
use 3 milliseconds,

00:02:09.009 --> 00:02:11.260
and convert it to nanoseconds.

00:02:11.260 --> 00:02:14.320
Incidentally, Oboe provides
a number of useful constants

00:02:14.320 --> 00:02:17.050
for working with
different time units.

00:02:17.050 --> 00:02:18.550
Before we can read
from our stream,

00:02:18.550 --> 00:02:21.280
we need to clear out any
stale data which might already

00:02:21.280 --> 00:02:23.200
be in the streams buffer.

00:02:23.200 --> 00:02:25.780
To do this, we just
perform non-blocking reads

00:02:25.780 --> 00:02:28.180
of the whole buffer
until it's empty.

00:02:28.180 --> 00:02:29.920
Now, when we read
from the stream,

00:02:29.920 --> 00:02:33.170
we know we're reading the
most current audio data.

00:02:33.170 --> 00:02:36.850
After the read is completed,
we need to check the result.

00:02:36.850 --> 00:02:39.070
If it was OK, then
result of value

00:02:39.070 --> 00:02:40.840
will contain the
number of frames which

00:02:40.840 --> 00:02:42.910
were copied into our buffer.

00:02:42.910 --> 00:02:46.390
To read more data, surround
this block in a wild loop.

00:02:46.390 --> 00:02:47.920
This approach
allows us to process

00:02:47.920 --> 00:02:50.620
small buffers of up
to date audio data

00:02:50.620 --> 00:02:53.380
for processing and
moving elsewhere.

00:02:53.380 --> 00:02:55.270
After we're done, we
must close the stream.

00:02:55.270 --> 00:02:56.860
And after a stream
has been closed,

00:02:56.860 --> 00:02:59.450
it can no longer be accessed.

00:02:59.450 --> 00:03:03.430
This is a very simple example
of how to record audio.

00:03:03.430 --> 00:03:05.470
For more complex
examples, including

00:03:05.470 --> 00:03:08.050
how to implement synchronous
recording and playback,

00:03:08.050 --> 00:03:11.050
check out the live
effects sample on GetHub.

00:03:11.050 --> 00:03:14.140
You can also check out the
other videos in this series.

00:03:14.140 --> 00:03:16.090
The first video is an
introduction to Oboe,

00:03:16.090 --> 00:03:18.920
and shows why low latency
audio is important.

00:03:18.920 --> 00:03:20.350
And the second
video shows you how

00:03:20.350 --> 00:03:23.950
to create low latency audio
streams for playing sound.

00:03:23.950 --> 00:03:24.820
That's all for now.

00:03:24.820 --> 00:03:28.070
If you have any questions,
issues, or feature requests,

00:03:28.070 --> 00:03:30.570
please post them in the issues
section of the Oboe GetHub

00:03:30.570 --> 00:03:31.450
site.

00:03:31.450 --> 00:03:32.920
We'd really love
to hear from you.

00:03:32.920 --> 00:03:35.970
Good luck, and go
make some noise.

