WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:03.261
Caesar's cipher is also
called shift cipher,

00:00:03.261 --> 00:00:07.741
because each letter is map to another
letter by fixed amount of shift.

00:00:07.741 --> 00:00:14.858
So if we represent letters as numbers,
meaning A is 1, B is 2 and Z is 26.

00:00:14.858 --> 00:00:20.084
Then this encryption scheme or
cipher can be represented as the letter,

00:00:20.084 --> 00:00:24.379
meaning the integer plus n,
the fixed amount marked 26.

00:00:24.379 --> 00:00:27.900
Here the shift amount n is a secret,
or the key.

00:00:27.900 --> 00:00:31.210
And obviously,
there are only 26 possible keys.

00:00:31.210 --> 00:00:34.490
Therefore, it is easy to
break Caesar's cipher

00:00:34.490 --> 00:00:37.850
because you only need to
try 26 possible keys.

00:00:37.850 --> 00:00:40.750
A generalization of
this scheme is to allow

00:00:40.750 --> 00:00:43.230
arbitrary mapping of
one letter to another.

00:00:43.230 --> 00:00:47.340
That is, we no longer require that
a letter is map to another letter

00:00:47.340 --> 00:00:49.630
by always the fix amount of shift.

00:00:49.630 --> 00:00:50.710
Now of course,

00:00:50.710 --> 00:00:54.800
we need to avoid that two letters
are being mapped to the same letter.

00:00:54.800 --> 00:00:58.184
Demapping, meaning how each
letter is map to another,

00:00:58.184 --> 00:01:00.150
it is now the secret key.

00:01:00.150 --> 00:01:03.500
Can you tell,
how many possible keys are out there?

00:01:03.500 --> 00:01:07.490
Meaning, how many possible ways
to map one letter to another.

00:01:07.490 --> 00:01:10.250
The answer is 26 factorial,

00:01:10.250 --> 00:01:15.380
because there are 26 factorial number
of ways to map one letter to another.

00:01:15.380 --> 00:01:19.948
Please note that n factorial is
much larger than 2 to the n.

00:01:19.948 --> 00:01:25.153
For example, 26 factorial is
approximately 2 to the 88th,

00:01:25.153 --> 00:01:28.284
which is much larger than 2 to 26th.

00:01:28.284 --> 00:01:31.540
In other words,
this is very huge number.

00:01:31.540 --> 00:01:34.800
If the attacker attempts
to use brute force, or

00:01:34.800 --> 00:01:39.830
just blindly search all the possible
keys, it's going to take him long time,

00:01:39.830 --> 00:01:43.730
because there are 2 to the 88th
number of possible keys.

00:01:43.730 --> 00:01:46.410
So, what should the attacker do instead?

00:01:46.410 --> 00:01:49.990
Instead of trying all of the possible
keys, an attacker can analyze

00:01:49.990 --> 00:01:53.930
the statistical frequencies of
letters to break the schemes.

00:01:53.930 --> 00:01:58.770
For example, in English,
the most frequently used letter is E.

00:01:58.770 --> 00:02:03.190
And if in a cipher text,
the letter X is the most frequent,

00:02:03.190 --> 00:02:06.660
then there's a high probability
that E is mapped to X.

