WEBVTT
Kind: captions
Language: en

00:00:03.000 --> 00:00:05.000
Tattersall: Well, hey, everyone,
and a very warm welcome

00:00:05.000 --> 00:00:07.834
to the last session
of Google I/O 2011.

00:00:07.834 --> 00:00:09.667
I'm really, really
touched to see

00:00:09.667 --> 00:00:11.501
so many of you come here today.

00:00:11.501 --> 00:00:14.000
So today, we're talking
about Google Tasks.

00:00:14.000 --> 00:00:15.501
My name is David,

00:00:15.501 --> 00:00:17.534
and I am the product manager
for Google Tasks.

00:00:17.534 --> 00:00:19.501
We've come all the way
from the Zurich office

00:00:19.501 --> 00:00:21.000
in Switzerland
to talk to you today.

00:00:21.000 --> 00:00:23.000
If you are tweeting along
on your laptops

00:00:23.000 --> 00:00:24.501
or your new tablets,

00:00:24.501 --> 00:00:26.501
you can use the hashtags
#io2011 or #googleapps,

00:00:26.501 --> 00:00:28.067
and also while you're on there,

00:00:28.067 --> 00:00:30.801
you also might want
to follow is on @googletasks.

00:00:30.801 --> 00:00:33.300
During the session, there
will be a SpeakerMeter link

00:00:33.300 --> 00:00:35.801
so you can submit live feedback
as we're going along,

00:00:35.801 --> 00:00:38.367
and you can find that at
the Google short link there.

00:00:38.367 --> 00:00:41.300
Whoops.

00:00:41.300 --> 00:00:43.634
So... so...

00:00:43.634 --> 00:00:45.701
towards the end of last year,

00:00:45.701 --> 00:00:48.501
we decided to help
put a survey up

00:00:48.501 --> 00:00:51.667
and ask our users what they
thought we should focus on,

00:00:51.667 --> 00:00:53.634
uh, over the coming year.

00:00:53.634 --> 00:00:55.467
After all, Google's--
Google's motto is basically

00:00:55.467 --> 00:00:57.968
focus on the user,
and all else will follow,

00:00:57.968 --> 00:00:59.801
and we were
absolutely overwhelmed

00:00:59.801 --> 00:01:02.100
by the response
we got through this.

00:01:02.100 --> 00:01:05.267
We canvassed the best part
of 200,000 votes

00:01:05.267 --> 00:01:07.834
from just under 20,000 people,

00:01:07.834 --> 00:01:10.067
and we noticed two really,
really main things

00:01:10.067 --> 00:01:11.901
that stuck out from this.

00:01:11.901 --> 00:01:13.834
The first thing is
people asked us,

00:01:13.834 --> 00:01:15.634
Can we have
our tasks everywhere?

00:01:15.634 --> 00:01:18.067
We can already access
our tasks in Google Mail

00:01:18.067 --> 00:01:19.734
or in Google Calendar,

00:01:19.734 --> 00:01:22.133
and even on an iGoogle gadget
on my homepage,

00:01:22.133 --> 00:01:24.667
but I want to access it
from my mobile device.

00:01:24.667 --> 00:01:26.534
I want to be able
to access Tasks

00:01:26.534 --> 00:01:29.267
from many third-party web apps
which I use every day.

00:01:29.267 --> 00:01:31.534
And the second thing
which people asked us for,

00:01:31.534 --> 00:01:34.801
to make all this possible--
somebody said to us,

00:01:34.801 --> 00:01:38.033
"An API for third-party apps
would be absolutely incredible."

00:01:38.033 --> 00:01:41.334
Somebody else said to us, "Tasks
needs an API so badly it hurts."

00:01:41.334 --> 00:01:44.834
So we--we saw this
and we thought about it,

00:01:44.834 --> 00:01:46.734
and we, uh, we agreed with you.

00:01:46.734 --> 00:01:48.901
So this morning,
we're happy to announce

00:01:48.901 --> 00:01:52.400
the launch of the very first
Google Tasks API.

00:01:52.400 --> 00:01:55.334
[applause]

00:01:58.400 --> 00:02:00.400
Tattersall: So it's with
the release of this API

00:02:00.400 --> 00:02:02.300
that we're really
looking to you guys

00:02:02.300 --> 00:02:04.300
to help provide this universal
access to Tasks,

00:02:04.300 --> 00:02:06.300
which our users have been
asking for so badly.

00:02:06.300 --> 00:02:08.801
So we all know that you've
really come to this conference

00:02:08.801 --> 00:02:10.634
to see demos on Android phones,

00:02:10.634 --> 00:02:12.801
so we're gonna try
our first one straightaway.

00:02:12.801 --> 00:02:15.968
So here, you can see this is my,
uh, this is my GMAIL account,

00:02:15.968 --> 00:02:17.968
and I've set up
a little task list

00:02:17.968 --> 00:02:20.467
of things we want to talk about
during the day.

00:02:20.467 --> 00:02:22.133
Can we have the projector on?

00:02:22.133 --> 00:02:24.133
So on your--you'll have
to bear with us.

00:02:24.133 --> 00:02:26.133
We are tempting
the Wi-Fi gods a bit,

00:02:26.133 --> 00:02:27.968
trying a demo
with a live device.

00:02:27.968 --> 00:02:30.501
This is all completely live.
So what you can see here

00:02:30.501 --> 00:02:33.000
is my Android phone
is showing you my task lists,

00:02:33.000 --> 00:02:35.000
and these are fetched directly
from Google's service.

00:02:35.000 --> 00:02:37.501
This is all using the Java
client libraries that we provide

00:02:37.501 --> 00:02:40.000
out of the box.
It all works fine with Android.

00:02:40.000 --> 00:02:42.501
So I can click into "Shopping
Lists" and you can see a bunch

00:02:42.501 --> 00:02:45.000
of stuff that we need to buy
for our launch party tonight.

00:02:45.000 --> 00:02:46.901
So Andreas has got
the frozen pizza,

00:02:46.901 --> 00:02:49.033
but we still need
a few other things.

00:02:49.033 --> 00:02:51.100
I'm gonna click
into the Google I/O list,

00:02:51.100 --> 00:02:53.701
and you can see the things
that I want to talk about today.

00:02:53.701 --> 00:02:57.167
So let's try
and check off "Introduction."

00:02:57.167 --> 00:02:59.100
So now the phone
is communicating

00:02:59.100 --> 00:03:01.000
back through the API--
fingers crossed--

00:03:01.000 --> 00:03:02.868
to the Google service,

00:03:02.868 --> 00:03:05.934
and if we can switch back here--

00:03:05.934 --> 00:03:09.334
if, I, uh...

00:03:09.334 --> 00:03:11.167
We can see they got checked off,

00:03:11.167 --> 00:03:13.334
so that is the first live demo

00:03:13.334 --> 00:03:15.934
of the Google Tasks API working.

00:03:15.934 --> 00:03:19.133
So this--that's basically--

00:03:19.133 --> 00:03:21.167
The rest of the session
is gonna be about

00:03:21.167 --> 00:03:23.167
how you can build applications
just like this,

00:03:23.167 --> 00:03:25.767
which synchronize and engage
with Google Tasks.

00:03:25.767 --> 00:03:27.767
So that's my introduction
over with.

00:03:27.767 --> 00:03:29.434
Fabian's now gonna come up

00:03:29.434 --> 00:03:31.434
and talk a bit about
the data structure

00:03:31.434 --> 00:03:33.934
and how we represent things
like task lists and tasks

00:03:33.934 --> 00:03:35.934
and some of the kind of nuances
around that.

00:03:35.934 --> 00:03:37.801
Andreas is actually
gonna show you issues

00:03:37.801 --> 00:03:40.767
from live call to the API and do
a live demo to run you through

00:03:40.767 --> 00:03:43.267
a few common actions you might
be interested in, to show you

00:03:43.267 --> 00:03:45.767
actually what you need to do
to get the data back you want,

00:03:45.767 --> 00:03:47.434
and then Nicolas
is gonna come up

00:03:47.434 --> 00:03:49.934
and a little bit high-level
about the languages we support,

00:03:49.934 --> 00:03:52.434
the client libraries, how to use
them, and also, since we think

00:03:52.434 --> 00:03:54.934
a lot of you will be really
interested in synchronization,

00:03:54.934 --> 00:03:57.434
he's gonna walk through
a sample sync logic for you.

00:03:57.434 --> 00:03:59.267
And we've also had several teams

00:03:59.267 --> 00:04:01.334
using the API
over the past month or so,

00:04:01.334 --> 00:04:03.901
so I'm gonna invite Mavenlink,
Zoho, and Producteev

00:04:03.901 --> 00:04:06.400
to share what they've done,
to give you some cool demos,

00:04:06.400 --> 00:04:08.701
and also talk a bit
about what they learned

00:04:08.701 --> 00:04:11.300
and, um, some light lessons
and stuff like that.

00:04:11.300 --> 00:04:13.968
So I'd like
to invite up Fabian--

00:04:13.968 --> 00:04:16.634
Oh, before I invite up Fabian,
if you need to, uh,

00:04:16.634 --> 00:04:19.133
if you're online, you can go
straight to this URL.

00:04:19.133 --> 00:04:21.133
You can see all the
documentation, client libraries,

00:04:21.133 --> 00:04:23.634
and we might have enough
for a prize if someone manages

00:04:23.634 --> 00:04:26.133
to get a working integration
by the end of the session,

00:04:26.133 --> 00:04:29.167
so, Fabian.

00:04:29.167 --> 00:04:31.100
Schlup: Thanks, David.

00:04:33.167 --> 00:04:34.901
Schlup: Hi, everyone.
I'm Fabian, and...

00:04:34.901 --> 00:04:36.901
[speaking indistinctly]

00:04:36.901 --> 00:04:39.901
Google Tasks team in Zurich.
Can you hear me? Yes.

00:04:39.901 --> 00:04:43.367
As you've just seen
with David's demonstration,

00:04:43.367 --> 00:04:45.834
the Tasks API allows you
for the first time

00:04:45.834 --> 00:04:48.367
to access the tasks
as we see them today

00:04:48.367 --> 00:04:50.634
in GMAIL and in Calendar,

00:04:50.634 --> 00:04:52.934
and the iGoogle gadget,
for example.

00:04:52.934 --> 00:04:56.667
Um, so I'm gonna, you know,
walk with you through the basics

00:04:56.667 --> 00:04:58.567
of the Tasks API now.

00:04:58.567 --> 00:05:00.300
Who of you has attended

00:05:00.300 --> 00:05:04.000
the "Life of a Google
API Developer" talk yesterday?

00:05:05.567 --> 00:05:07.968
Schlup: Very few? Okay.
[laughs]

00:05:07.968 --> 00:05:10.501
So if you would have
attended that talk,

00:05:10.501 --> 00:05:13.501
you would find that much of what
has been covered there,

00:05:13.501 --> 00:05:15.501
you can apply to the Tasks API,

00:05:15.501 --> 00:05:18.501
as we have, you know,
built that API

00:05:18.501 --> 00:05:20.767
on Google's new
API infrastructure.

00:05:20.767 --> 00:05:23.334
but actually, I'm glad
many of you haven't attended,

00:05:23.334 --> 00:05:25.067
because then you're gonna
learn more here.

00:05:25.067 --> 00:05:28.667
So let's get started
with a brief overview.

00:05:28.667 --> 00:05:32.300
The Tasks API is available
at googleapis.com,

00:05:32.300 --> 00:05:35.334
and as many APIs
at Google nowadays,

00:05:35.334 --> 00:05:37.701
it's based on secure HTTP,

00:05:37.701 --> 00:05:40.100
on the RESTful
architectural style,

00:05:40.100 --> 00:05:43.534
and on JSON
for data representation.

00:05:43.534 --> 00:05:47.367
It's integrated
with the API Console,

00:05:47.367 --> 00:05:50.100
which some of you might already
be familiar with.

00:05:50.100 --> 00:05:53.267
It's a dashboard that allows
you as a developer

00:05:53.267 --> 00:05:55.701
to configure and register
your project

00:05:55.701 --> 00:05:59.734
and gives you access to
traffic reports, for example,

00:05:59.734 --> 00:06:01.767
where you can see
how many requests

00:06:01.767 --> 00:06:04.167
your application sends
to the Tasks API.

00:06:04.167 --> 00:06:07.033
This can be particularly useful

00:06:07.033 --> 00:06:09.968
if you're writing a client
application, for example,

00:06:09.968 --> 00:06:11.901
that you distribute to users

00:06:11.901 --> 00:06:14.067
and that talks
to the Tasks API directly.

00:06:14.067 --> 00:06:17.033
And this way, you usually don't
really have a good handle

00:06:17.033 --> 00:06:19.100
on how many requests
you send to us,

00:06:19.100 --> 00:06:21.167
and so this is
a great way to see.

00:06:21.167 --> 00:06:24.300
Also, you can regis--
or you can configure

00:06:24.300 --> 00:06:28.000
per-user traffic limits
and stuff like that.

00:06:29.801 --> 00:06:33.634
Schlup: The API is available
in the API's Explorer, as well.

00:06:33.634 --> 00:06:37.901
It's a Web interface to many
of Google's--Google's APIs,

00:06:37.901 --> 00:06:41.767
and it makes it really easy
to explore and discover an API

00:06:41.767 --> 00:06:43.834
through a Web browser.

00:06:43.834 --> 00:06:46.267
You can discover the methods

00:06:46.267 --> 00:06:48.300
and the operations
that are available.

00:06:48.300 --> 00:06:51.300
You can even send requests
and receive responses

00:06:51.300 --> 00:06:53.133
and see how it all works

00:06:53.133 --> 00:06:55.167
without having to write
a single line of code

00:06:55.167 --> 00:06:57.267
or dealing with authentication
and so on,

00:06:57.267 --> 00:07:00.267
and Andreas is gonna show you
a demo of the Tasks API

00:07:00.267 --> 00:07:03.834
using the Explorer
in just a minute.

00:07:03.834 --> 00:07:06.300
We also provide a set
of client libraries

00:07:06.300 --> 00:07:08.701
for major programming languages.

00:07:08.701 --> 00:07:12.200
That will help you to get
something up and running

00:07:12.200 --> 00:07:15.167
rather quickly.

00:07:15.167 --> 00:07:17.901
But so let's dive into
the specifics

00:07:17.901 --> 00:07:20.000
of Google Tasks and the new API.

00:07:20.000 --> 00:07:23.100
When we look at the task lists,

00:07:23.100 --> 00:07:25.067
at our I/O task list here,

00:07:25.067 --> 00:07:26.934
in--as it looks in GMAIL,

00:07:26.934 --> 00:07:30.000
on the left-hand side,
we can see a bunch of tasks.

00:07:30.000 --> 00:07:32.267
One has already been completed,

00:07:32.267 --> 00:07:34.000
some are nested,

00:07:34.000 --> 00:07:35.901
and on the right-hand side,

00:07:35.901 --> 00:07:37.901
we can see the details
for a particular task.

00:07:37.901 --> 00:07:40.367
We see stuff like due date,

00:07:40.367 --> 00:07:43.167
additional notes
that I can put in there.

00:07:43.167 --> 00:07:46.501
So there's basically
two entities to the system,

00:07:46.501 --> 00:07:49.167
which is tasks and task lists,

00:07:49.167 --> 00:07:51.934
and that's exactly
the two types of resources

00:07:51.934 --> 00:07:54.367
that we expose
through the RESTful API.

00:07:56.334 --> 00:07:58.567
Schlup: A list really just
only has a title.

00:07:58.567 --> 00:08:00.634
There's not much else to it.

00:08:00.634 --> 00:08:02.834
A task has several more fields

00:08:02.834 --> 00:08:05.100
that hold all the information
that we've just seen--

00:08:05.100 --> 00:08:08.000
title, due date, notes,
and so on,

00:08:08.000 --> 00:08:10.767
not all of which
are listed here.

00:08:10.767 --> 00:08:13.067
To that, I want
to point out quickly,

00:08:13.067 --> 00:08:15.501
because they don't correspond
that directly

00:08:15.501 --> 00:08:17.701
to something that we experience
in the UI,

00:08:17.701 --> 00:08:20.734
is the parent field
and the position fields

00:08:20.734 --> 00:08:22.400
that we have in our resource.

00:08:22.400 --> 00:08:24.501
For a nested task,

00:08:24.501 --> 00:08:28.300
the parent field will indicate
the I.D. of the parent task

00:08:28.300 --> 00:08:30.400
under which this one is nested,

00:08:30.400 --> 00:08:32.367
and the position field
is a string

00:08:32.367 --> 00:08:34.601
that lets us find out
about the ordering

00:08:34.601 --> 00:08:37.467
that the user defined in the UI.

00:08:37.467 --> 00:08:40.400
But I'll--I'll go into that
in a minute.

00:08:40.400 --> 00:08:42.868
So to get started

00:08:42.868 --> 00:08:45.968
and find out about
what lists a user has,

00:08:45.968 --> 00:08:49.534
we provide a collection
at a fixed URL

00:08:49.534 --> 00:08:54.267
ending in /users/@me/lists,
which will contain

00:08:54.267 --> 00:08:59.300
or which contains all the lists
of the authenticated user.

00:08:59.300 --> 00:09:02.868
So that's a great entry point
for an application

00:09:02.868 --> 00:09:06.701
to find out about, you know,
the lists that a user has

00:09:06.701 --> 00:09:09.200
if you've never
dealt with that user before.

00:09:09.200 --> 00:09:12.334
And then similarly, for--

00:09:12.334 --> 00:09:15.968
for, like, to find out about
the tasks on a specific list,

00:09:15.968 --> 00:09:19.567
there is a collection that will
hold that information,

00:09:19.567 --> 00:09:22.300
and the URL contains the I.D.

00:09:22.300 --> 00:09:25.901
of the list that you're actually
interested in.

00:09:25.901 --> 00:09:28.801
So we basically have
two types of resources,

00:09:28.801 --> 00:09:30.501
two types of collections,

00:09:30.501 --> 00:09:32.868
that we can interact with
in a RESTful way.

00:09:32.868 --> 00:09:36.567
Who of you is familiar
with the RESTful style

00:09:36.567 --> 00:09:39.567
of--of talking to APIs?

00:09:39.567 --> 00:09:41.501
Great. Many of you are,

00:09:41.501 --> 00:09:43.934
so I'm just gonna run through
the basic operations,

00:09:43.934 --> 00:09:45.901
uh, so we're on the same page.

00:09:45.901 --> 00:09:48.367
I listed the full URL end point

00:09:48.367 --> 00:09:51.367
of the two collections
in the system at the top,

00:09:51.367 --> 00:09:54.868
and the operations
that we can do on a collection

00:09:54.868 --> 00:09:58.200
is we can insert new element

00:09:58.200 --> 00:10:00.767
or we can just read back
the full list

00:10:00.767 --> 00:10:03.200
as a JSON ob--

00:10:03.200 --> 00:10:05.501
in a JSON representation,
basically,

00:10:05.501 --> 00:10:08.100
using HTTP POST or GET.

00:10:08.100 --> 00:10:10.434
And then the resources,

00:10:10.434 --> 00:10:12.901
so the individual
tasks and lists

00:10:12.901 --> 00:10:14.868
within these collections--

00:10:14.868 --> 00:10:17.734
their URL looks very similar
to the one of the collection.

00:10:17.734 --> 00:10:21.033
They just contain their specific
I.D.'s appended to the end,

00:10:21.033 --> 00:10:22.801
like this,

00:10:22.801 --> 00:10:24.701
and on individual resources,

00:10:24.701 --> 00:10:27.901
we have three operations
that we can basically perform,

00:10:27.901 --> 00:10:29.934
which is update that resource

00:10:29.934 --> 00:10:31.868
by sending a new representation,

00:10:31.868 --> 00:10:33.534
delete it,

00:10:33.534 --> 00:10:36.000
or read back
that specific resource,

00:10:36.000 --> 00:10:38.734
again, by using HTTP GET,

00:10:38.734 --> 00:10:42.067
PUT, or DELETE.

00:10:42.067 --> 00:10:44.067
In the Tasks API,
there's also something

00:10:44.067 --> 00:10:46.067
that looks
a little bit different

00:10:46.067 --> 00:10:47.934
that's related to ordering,

00:10:47.934 --> 00:10:50.334
and I just mentioned
the position field before.

00:10:50.334 --> 00:10:53.033
Here, I put a bunch of tasks

00:10:53.033 --> 00:10:55.901
and I put,
on the right-hand side,

00:10:55.901 --> 00:10:58.434
what the value of these
position fields could be

00:10:58.434 --> 00:11:00.267
for each one of these tasks.

00:11:00.267 --> 00:11:03.400
Remember, it's a string,
so it's not just numbers,

00:11:03.400 --> 00:11:06.400
but I put it here to make it
a bit more simple.

00:11:06.400 --> 00:11:09.400
The position string lets us know

00:11:09.400 --> 00:11:11.601
what the--or how the user

00:11:11.601 --> 00:11:15.067
ordered his task in the UI,

00:11:15.067 --> 00:11:18.601
and so by ordering the tasks

00:11:18.601 --> 00:11:21.167
by that string,
lexicographically,

00:11:21.167 --> 00:11:24.400
we will end up
with the right, um, order

00:11:24.400 --> 00:11:27.133
as the user defined it
in the UI.

00:11:27.133 --> 00:11:29.501
And as you--

00:11:29.501 --> 00:11:31.501
as tasks can be nested,

00:11:31.501 --> 00:11:34.501
this position string
always just applies

00:11:34.501 --> 00:11:36.801
to the tasks on the same level,

00:11:36.801 --> 00:11:40.701
just among the sibling tasks
under the same parent.

00:11:40.701 --> 00:11:43.901
They will define that ordering.

00:11:43.901 --> 00:11:46.100
So how about if we want
to move a task

00:11:46.100 --> 00:11:48.067
from, say, the end

00:11:48.067 --> 00:11:50.167
to, you know, under task 1 here

00:11:50.167 --> 00:11:53.434
and in between the two children
that are already there?

00:11:53.434 --> 00:11:56.868
In the UI, I can do this
with a simple drag and drop

00:11:56.868 --> 00:11:59.067
and it's done.

00:11:59.067 --> 00:12:01.567
In the API, we wanted
to do something similar

00:12:01.567 --> 00:12:03.701
and make it as easy as possible,

00:12:03.701 --> 00:12:07.000
so we provide a "move" method.

00:12:07.000 --> 00:12:10.634
It's basically, you take the URL
of a specific task,

00:12:10.634 --> 00:12:12.300
you append/move,

00:12:12.300 --> 00:12:16.734
and then you specify the I.D.
of both the new parent task

00:12:16.734 --> 00:12:18.901
that you want
to move your task under,

00:12:18.901 --> 00:12:21.367
and the I.D. of the task

00:12:21.367 --> 00:12:24.467
that you want to move your task
immediately after of,

00:12:24.467 --> 00:12:27.334
so the new previous task
in the ordering.

00:12:27.334 --> 00:12:30.033
And what the API
will do for you, then,

00:12:30.033 --> 00:12:32.734
is to move the task
exactly there,

00:12:32.734 --> 00:12:37.434
which is conceptually
updating its parent field

00:12:37.434 --> 00:12:40.167
to the new parent,
1 in this case,

00:12:40.167 --> 00:12:43.200
and updating its position string

00:12:43.200 --> 00:12:45.200
to an appropriate value

00:12:45.200 --> 00:12:48.901
so that the ordering will again,
you know, result in the--

00:12:48.901 --> 00:12:50.968
if you order
by that string again,

00:12:50.968 --> 00:12:54.033
it will result
in the right order.

00:12:54.033 --> 00:12:56.234
But let's do
some hands-on example,

00:12:56.234 --> 00:12:57.767
and I'm gonna
leave the stage to Andreas,

00:12:57.767 --> 00:13:02.934
who's gonna show you
the Tasks API in the Explorer.

00:13:02.934 --> 00:13:05.868
[applause]

00:13:10.000 --> 00:13:12.767
Signer: Thanks, Fabian,
for that great introduction

00:13:12.767 --> 00:13:14.834
on how the Tasks API works.

00:13:14.834 --> 00:13:17.200
Um, now it's time to look at

00:13:17.200 --> 00:13:20.167
some real examples in the wild.

00:13:20.167 --> 00:13:22.234
Um, in the next few minutes,

00:13:22.234 --> 00:13:25.234
I'm going to show you
how you can use the Tasks API

00:13:25.234 --> 00:13:28.901
to actually modify and manage
the tasks and task lists,

00:13:28.901 --> 00:13:31.367
and we're also going to look at

00:13:31.367 --> 00:13:33.501
the exact requests
and responses

00:13:33.501 --> 00:13:36.734
that you have to send
and that you will get back.

00:13:36.734 --> 00:13:40.033
To do so, I'm going to use
the APIs Explorer,

00:13:40.033 --> 00:13:41.868
as Fabian already mentioned.

00:13:41.868 --> 00:13:44.400
It's really a great tool
for experiments like that,

00:13:44.400 --> 00:13:46.234
because it allows you to easily

00:13:46.234 --> 00:13:49.501
explore the APIs
Google is exposing,

00:13:49.501 --> 00:13:51.167
discover new features--

00:13:51.167 --> 00:13:54.033
you'll see some short
documentation--write in it.

00:13:54.033 --> 00:13:57.400
You don't have to write
any line of code.

00:13:57.400 --> 00:14:01.000
Everything can be done using
the really easy-to-use UI,

00:14:01.000 --> 00:14:05.934
um, and it's available at
code.google.com/apis/explorer,

00:14:05.934 --> 00:14:09.334
so let me switch to the browser.

00:14:09.334 --> 00:14:12.834
This is the main page
of the APIs Explorer.

00:14:12.834 --> 00:14:15.601
On the left-hand side,

00:14:15.601 --> 00:14:17.601
you can see all the services

00:14:17.601 --> 00:14:19.567
that are exposed
by the Explorer.

00:14:19.567 --> 00:14:23.133
For this demo, obviously, we are
going to use the Tasks API,

00:14:23.133 --> 00:14:25.300
so I select "Tasks."

00:14:25.300 --> 00:14:27.267
Next to it,
you'll see the versions.

00:14:27.267 --> 00:14:29.701
We just launched,
so there's only v1.

00:14:29.701 --> 00:14:32.334
APIs Explorer already
preselected that.

00:14:32.334 --> 00:14:36.501
And right next to it,
you'll see all the methods

00:14:36.501 --> 00:14:39.300
that are exposed by that API.

00:14:39.300 --> 00:14:41.901
Um, this demo will focus on

00:14:41.901 --> 00:14:46.033
a sort of simple
but still real-world scenario.

00:14:46.033 --> 00:14:49.400
We are going to pick a task
from one of our task lists

00:14:49.400 --> 00:14:51.267
and then tick it off.

00:14:51.267 --> 00:14:53.934
So the first thing
I want to see is,

00:14:53.934 --> 00:14:55.934
What task lists do I have?

00:14:55.934 --> 00:14:58.067
To do that,

00:14:58.067 --> 00:15:02.334
I browse through
the mess--methods, excuse me.

00:15:02.334 --> 00:15:04.567
and there's tasklists.list.

00:15:04.567 --> 00:15:08.434
Documentation says it returns
the user's task lists,

00:15:08.434 --> 00:15:10.567
but you have
to be authenticated,

00:15:10.567 --> 00:15:14.467
so let's quickly switch
to private access.

00:15:14.467 --> 00:15:17.934
Now we're using private access.

00:15:17.934 --> 00:15:20.534
We selected
the tasklists.list method,

00:15:20.534 --> 00:15:22.734
and we can see the parameters

00:15:22.734 --> 00:15:24.834
that are supported
by that method.

00:15:24.834 --> 00:15:27.367
We have maxResults,
which is optional

00:15:27.367 --> 00:15:29.167
and defaults to 100,

00:15:29.167 --> 00:15:31.400
so we don't need
to set anything there.

00:15:31.400 --> 00:15:33.000
Then there's a pageToken

00:15:33.000 --> 00:15:35.434
that would allow you
to do pagination.

00:15:35.434 --> 00:15:39.200
If you don't want to get
the whole data set back,

00:15:39.200 --> 00:15:41.734
we don't want to set
anything there, as well,

00:15:41.734 --> 00:15:44.367
so all we have to do is execute,

00:15:44.367 --> 00:15:46.801
and on the bottom of the screen,

00:15:46.801 --> 00:15:49.367
you see now the request
and the response.

00:15:49.367 --> 00:15:51.868
Let me make this
a little bigger.

00:15:53.934 --> 00:15:56.133
Signer: On the first line,
you see the request

00:15:56.133 --> 00:15:58.567
that was actually issued
against our servers.

00:15:58.567 --> 00:16:02.801
You see that default URL
that points to the collection

00:16:02.801 --> 00:16:05.834
containing all my task lists,

00:16:05.834 --> 00:16:07.834
and you see the response.

00:16:07.834 --> 00:16:11.467
200. That's--that's great.
Everything worked.

00:16:11.467 --> 00:16:15.434
And we got back a collection
containing two items.

00:16:15.434 --> 00:16:19.901
One is the shopping list that
David showed in the beginning,

00:16:19.901 --> 00:16:24.133
and the other thing is
the Google I/O task list.

00:16:24.133 --> 00:16:27.734
This is the one where we're
pretty sure that our task is on,

00:16:27.734 --> 00:16:31.067
so let me quickly copy
the I.D. of the task list,

00:16:31.067 --> 00:16:33.567
because we're going
to need it in a minute.

00:16:33.567 --> 00:16:35.367
Now we switch back,

00:16:35.367 --> 00:16:37.601
and now let's look at
all the tasks

00:16:37.601 --> 00:16:39.968
that are actually
on that task list.

00:16:39.968 --> 00:16:44.834
To do that, we pick
the method tasks.lists,

00:16:44.834 --> 00:16:48.467
which returns all tasks
in a certain list.

00:16:48.467 --> 00:16:52.367
Now there's
the parameter tasklist

00:16:52.367 --> 00:16:54.601
that needs to be provided,

00:16:54.601 --> 00:16:56.534
and it should contain the I.D.

00:16:56.534 --> 00:16:58.667
of the task list
we want to look at,

00:16:58.667 --> 00:17:00.868
so let's paste in that I.D.

00:17:00.868 --> 00:17:04.300
There are a bunch of
other parameters, as well.

00:17:04.300 --> 00:17:07.834
Those allow you to do
a sort of fine-grained query.

00:17:07.834 --> 00:17:11.400
You can specify when the task
had to be completed

00:17:11.400 --> 00:17:12.868
or when it's due.

00:17:12.868 --> 00:17:14.834
Currently, we're not
interested in that.

00:17:14.834 --> 00:17:16.968
We just want to see everything
on that list,

00:17:16.968 --> 00:17:19.801
so we only populate
the tasklist parameter

00:17:19.801 --> 00:17:22.067
and click on Execute again.

00:17:24.000 --> 00:17:25.934
Signer: In the request
that was sent,

00:17:25.934 --> 00:17:27.801
you can now see that we switched

00:17:27.801 --> 00:17:30.734
from the collection
of all my task lists

00:17:30.734 --> 00:17:34.701
to the collection of all tasks
on one given list.

00:17:34.701 --> 00:17:37.934
The response was, again, okay,

00:17:37.934 --> 00:17:41.634
and we see there's four items

00:17:41.634 --> 00:17:44.734
in that result set.

00:17:44.734 --> 00:17:49.334
I'm currently demoing how you
can use the Tasks API,

00:17:49.334 --> 00:17:52.033
so let's just tick off
that task.

00:17:52.033 --> 00:17:54.701
Ticking off a task
basically just means

00:17:54.701 --> 00:17:57.634
upload the task again
with a different status.

00:17:57.634 --> 00:18:00.534
Currently, the status
is "needsAction,"

00:18:00.534 --> 00:18:02.400
which means that
it's not ticked yet,

00:18:02.400 --> 00:18:06.100
so let's change that status
to "completed."

00:18:06.100 --> 00:18:09.634
I'm copying away
the whole data of that task

00:18:09.634 --> 00:18:11.834
because this is what
I'm going to modify

00:18:11.834 --> 00:18:14.634
and upload,

00:18:14.634 --> 00:18:18.868
and updating a task
is done using tasks.update.

00:18:18.868 --> 00:18:21.300
It only takes two parameters,

00:18:21.300 --> 00:18:24.033
the tasklist I.D.
and the task I.D.,

00:18:24.033 --> 00:18:26.167
and, of course, a request body

00:18:26.167 --> 00:18:28.934
which contains the data that
we're actually going to send,

00:18:28.934 --> 00:18:30.634
so I click on the link.

00:18:30.634 --> 00:18:33.133
I paste in the data
that we copied before.

00:18:33.133 --> 00:18:38.100
I change the status from
"needsAction" to "completed,"

00:18:38.100 --> 00:18:42.667
and I'm pasting in
the task I.D.'s again.

00:18:42.667 --> 00:18:45.901
This is the tasklist I.D.,

00:18:45.901 --> 00:18:49.667
and somewhere below...

00:18:51.734 --> 00:18:54.267
Signer: Here's our task
that we were updating.

00:18:54.267 --> 00:18:56.501
Here's the I.D. of that task.

00:18:59.067 --> 00:19:02.434
Signer: And we
execute the request.

00:19:02.434 --> 00:19:06.601
You can see that API Explorer
now issued a PUT request,

00:19:06.601 --> 00:19:09.067
because we're actually
updating data

00:19:09.067 --> 00:19:12.701
and are uploading, um--we're
updating a task, excuse me,

00:19:12.701 --> 00:19:14.934
and are uploading data.

00:19:14.934 --> 00:19:18.667
You see the data
that we uploaded

00:19:18.667 --> 00:19:20.801
with the new status "completed."

00:19:20.801 --> 00:19:24.434
If we look at the response,
it's again 200.

00:19:24.434 --> 00:19:27.934
That's pretty cool,
and the server also--

00:19:27.934 --> 00:19:32.033
or the API also returns the data
as it sees it at the moment,

00:19:32.033 --> 00:19:35.200
so you see the status
has been changed to "completed,"

00:19:35.200 --> 00:19:37.100
and in addition to that,

00:19:37.100 --> 00:19:40.100
the server also set
the "completed" time stamp,

00:19:40.100 --> 00:19:44.033
which is the time when
the server received the request.

00:19:46.968 --> 00:19:50.100
Signer: As you can see,
it's really straightforward

00:19:50.100 --> 00:19:52.100
to use the APIs Explorer.
It's great.

00:19:52.100 --> 00:19:54.934
You can just try out stuff.
You immediately get responses.

00:19:54.934 --> 00:19:57.133
You immediately see
all the errors.

00:19:57.133 --> 00:19:59.934
Theoretically, you could now
use those requests

00:19:59.934 --> 00:20:01.868
and write your applications,

00:20:01.868 --> 00:20:03.801
but luckily, we have a clientlib

00:20:03.801 --> 00:20:05.934
that makes it
even more comfortable

00:20:05.934 --> 00:20:07.868
to talk to the Tasks API.

00:20:07.868 --> 00:20:10.701
and Nicolas is going
to talk about

00:20:10.701 --> 00:20:13.801
how to write apps
using those libs.

00:20:13.801 --> 00:20:16.734
[applause]

00:20:19.801 --> 00:20:21.734
Garnier: All right.
Thanks, Andreas.

00:20:21.734 --> 00:20:23.601
So hi, everyone.
My name is Nicolas,

00:20:23.601 --> 00:20:26.367
and I am part of the Tasks API
Developer Relations Team.

00:20:26.367 --> 00:20:28.067
So as Andreas mentioned,

00:20:28.067 --> 00:20:30.567
I'm going to show you how we can
use our client libraries,

00:20:30.567 --> 00:20:32.400
and specifically one of them,

00:20:32.400 --> 00:20:34.267
through a common
synchronization scenario,

00:20:34.267 --> 00:20:36.267
but first, let's see
what kind of libraries

00:20:36.267 --> 00:20:37.968
are available today.

00:20:37.968 --> 00:20:39.801
So we currently have available

00:20:39.801 --> 00:20:41.767
two libraries for
strongly typed languages,

00:20:41.767 --> 00:20:43.434
Java and .NET,

00:20:43.434 --> 00:20:45.267
and three for dynamic languages,

00:20:45.267 --> 00:20:47.100
so Python, PHP, and Ruby.

00:20:47.100 --> 00:20:48.834
So what's really interesting

00:20:48.834 --> 00:20:51.334
about the three client libraries
for dynamic languages

00:20:51.334 --> 00:20:55.200
is that they are actually gonna
use our API Discovery mechanism,

00:20:55.200 --> 00:20:58.234
um, to actually know
how to parse

00:20:58.234 --> 00:21:00.434
the response from the API,

00:21:00.434 --> 00:21:04.133
and how to generate messages
to send to the API

00:21:04.133 --> 00:21:05.868
so they're basically generic

00:21:05.868 --> 00:21:08.868
for all our APIs that support
the Discovery mechanism,

00:21:08.868 --> 00:21:12.534
and they're basically gonna,
you know, automatically,

00:21:12.534 --> 00:21:15.534
uh, and dynamically offer you
a business layer,

00:21:15.534 --> 00:21:18.434
basically, to use.

00:21:18.434 --> 00:21:20.934
So this one library
are basically,

00:21:20.934 --> 00:21:22.901
uh, making it easy for you to,

00:21:22.901 --> 00:21:25.634
for example, authenticate
using OAuth 1 and 2,

00:21:25.634 --> 00:21:27.901
which is definitely not
trivial to implement.

00:21:27.901 --> 00:21:29.901
They're also gonna handle,
you know, all the data

00:21:29.901 --> 00:21:32.501
from that handling,
such as parsing the response,

00:21:32.501 --> 00:21:35.100
and generating the, you know,

00:21:35.100 --> 00:21:37.300
JSON outputs
to the API, et cetera.

00:21:37.300 --> 00:21:40.367
For example, here, on that side,
you can see that the--

00:21:40.367 --> 00:21:43.400
using the Java and the Python
client library,

00:21:43.400 --> 00:21:45.934
you can actually get
your default tasks list

00:21:45.934 --> 00:21:47.868
really easily with a one-liner,

00:21:47.868 --> 00:21:49.901
and then, you know,
parse through those tasks

00:21:49.901 --> 00:21:53.901
really easily and in
the language specifically.

00:21:53.901 --> 00:21:56.901
Uh, so we're now going to,

00:21:56.901 --> 00:21:58.934
uh, to go through a common,

00:21:58.934 --> 00:22:02.434
but, you know, a simple but
common synchronization scenario,

00:22:02.434 --> 00:22:05.534
and that's basically what we're
doing on our Android app

00:22:05.534 --> 00:22:07.634
that David
has shown you earlier.

00:22:07.634 --> 00:22:10.634
So there's multiple aspects

00:22:10.634 --> 00:22:12.667
to that synchronization.

00:22:12.667 --> 00:22:15.167
The first aspect is that
at any moment, of course,

00:22:15.167 --> 00:22:18.167
a user can use your app
and modify a task,

00:22:18.167 --> 00:22:20.200
so that's gonna modify
the local version of your task,

00:22:20.200 --> 00:22:22.100
since you're gonna
keep, basically,

00:22:22.100 --> 00:22:24.267
probably a local copy
of all your tasks

00:22:24.267 --> 00:22:26.033
in a--in the local database.

00:22:26.033 --> 00:22:28.334
So also, at any moment,

00:22:28.334 --> 00:22:30.834
a user or any other app
using the API

00:22:30.834 --> 00:22:32.667
can modify the task that's--

00:22:32.667 --> 00:22:34.801
the remote task that's
located on Google's server,

00:22:34.801 --> 00:22:37.000
and therefore, which--

00:22:37.000 --> 00:22:39.801
therefore, you're gonna
have to synchronize to.

00:22:39.801 --> 00:22:41.901
Um, there's also
the second aspect of that,

00:22:41.901 --> 00:22:44.167
is you're gonna run--we're gonna
run a periodic job.

00:22:44.167 --> 00:22:46.000
Uh, basically, that can be done,

00:22:46.000 --> 00:22:49.133
you know, through a sync adapter
on an Android app

00:22:49.133 --> 00:22:52.467
or using a scheduled task story
on an App Engine app,

00:22:52.467 --> 00:22:55.000
or, you know, any other type
of periodical job

00:22:55.000 --> 00:22:57.033
on your own platform.

00:22:57.033 --> 00:23:00.133
So what we're gonna do during
this periodical job

00:23:00.133 --> 00:23:02.400
is we're gonna send
all the local modifications

00:23:02.400 --> 00:23:05.167
to the API, the one that,

00:23:05.167 --> 00:23:07.267
you know, your user
has modified,

00:23:07.267 --> 00:23:10.534
and then you're gonna get all
the modifications from the API,

00:23:10.534 --> 00:23:12.567
so we're gonna see that
in a minute,

00:23:12.567 --> 00:23:16.167
you know, how you can do that
using, uh, using some code.

00:23:16.167 --> 00:23:19.467
So to actually do that,
we're gonna use--

00:23:19.467 --> 00:23:22.400
and I'd like
to--to show you this, too,

00:23:22.400 --> 00:23:24.300
like, really useful API features

00:23:24.300 --> 00:23:26.801
that are available
in the Tasks API today,

00:23:26.801 --> 00:23:29.300
is the ability to do
conditional modification.

00:23:29.300 --> 00:23:32.100
You can do that by setting
an If-Match header

00:23:32.100 --> 00:23:35.300
along with your request,
uh, to the etag of the task,

00:23:35.300 --> 00:23:37.601
so the etag is like
a version number

00:23:37.601 --> 00:23:40.601
that your task is gonna--I mean,
that's assigned to your task.

00:23:40.601 --> 00:23:43.100
Um, when you do
a conditional modification,

00:23:43.100 --> 00:23:45.667
for example, a conditional
update of your task,

00:23:45.667 --> 00:23:48.667
what's gonna happen is that
if the task has been modified,

00:23:48.667 --> 00:23:50.501
you know, on Google's
server remotely,

00:23:50.501 --> 00:23:53.100
so basically, if the task
is not at the same version,

00:23:53.100 --> 00:23:55.000
you have a, you know,

00:23:55.000 --> 00:23:57.167
that you got the last time
you synchronized,

00:23:57.167 --> 00:23:58.834
uh, the update is gonna fail,

00:23:58.834 --> 00:24:00.901
and the API
is gonna let you know

00:24:00.901 --> 00:24:02.734
that your task is different,

00:24:02.734 --> 00:24:05.667
and that there's a conflict
to handle, basically.

00:24:05.667 --> 00:24:08.367
The second feature
is the ability to do polling,

00:24:08.367 --> 00:24:10.834
so that's very common
in many of our APIs,

00:24:10.834 --> 00:24:13.133
so you can use
the updatedMin URL parameter,

00:24:13.133 --> 00:24:14.901
setting a date, and using--

00:24:14.901 --> 00:24:17.801
and then the API is basically
gonna return you

00:24:17.801 --> 00:24:21.467
all the modifications
that happened since that date.

00:24:21.467 --> 00:24:24.467
So first, let me ask you,
Who is not a Java developer

00:24:24.467 --> 00:24:26.767
in the room?
Who doesn't know Java?

00:24:26.767 --> 00:24:28.601
All right, I'm not
raising my hand,

00:24:28.601 --> 00:24:30.100
though it's kind of weird,

00:24:30.100 --> 00:24:32.100
because that's my hand
on the screen, you know?

00:24:32.100 --> 00:24:34.100
[laughter]

00:24:34.100 --> 00:24:36.100
Signer: Thank you. I didn't
expect this joke to work, but...

00:24:36.100 --> 00:24:38.968
[laughs] Yeah, you know,
it's really hard to get

00:24:38.968 --> 00:24:41.467
a commercially licensed image,
so I just took my hand.

00:24:41.467 --> 00:24:44.434
Uh, all right, so I apologize
to you all,

00:24:44.434 --> 00:24:46.667
because, um,
yeah, all the samples--

00:24:46.667 --> 00:24:48.734
upcoming samples
are gonna be in Java,

00:24:48.734 --> 00:24:52.400
so hopefully, that was only
a couple people in the room.

00:24:52.400 --> 00:24:55.767
So, uh, what do you
first need to do--

00:24:55.767 --> 00:24:57.434
you know, the first action?

00:24:57.434 --> 00:24:59.601
A user modify your tasks
on your app, basically.

00:24:59.601 --> 00:25:02.167
So, obviously, you're gonna have
to save all the modifications

00:25:02.167 --> 00:25:04.033
on your local database.

00:25:04.033 --> 00:25:07.167
Then you're gonna mark the entry
as having been modified,

00:25:07.167 --> 00:25:09.767
so here, we don't push
the modification straightaway.

00:25:09.767 --> 00:25:12.267
We just marked it as
"Needs to be updated later,"

00:25:12.267 --> 00:25:13.968
during the sync cycle.

00:25:13.968 --> 00:25:15.767
Uh, then, very important,

00:25:15.767 --> 00:25:18.267
you need to save the modified
date of the task,

00:25:18.267 --> 00:25:19.968
you know, the date as--

00:25:19.968 --> 00:25:21.934
when the user basically
modified your task.

00:25:21.934 --> 00:25:24.567
That's gonna be useful
when you need to, you know,

00:25:24.567 --> 00:25:27.200
handle merging between two tasks
or, you know, conflicts.

00:25:27.200 --> 00:25:29.133
I'm not gonna show any code here

00:25:29.133 --> 00:25:31.434
because that's--basically
depends, you know,

00:25:31.434 --> 00:25:33.501
on your local database
or the platform you're using.

00:25:33.501 --> 00:25:35.901
There's no specific
API codes here.

00:25:35.901 --> 00:25:39.300
Um, then the second aspect
of the synchronization,

00:25:39.300 --> 00:25:40.968
the periodic job,

00:25:40.968 --> 00:25:42.968
which is a little
more interesting for us.

00:25:42.968 --> 00:25:45.968
The first part of this is you
are gonna push, periodically,

00:25:45.968 --> 00:25:49.567
all the modifications that
your user has done to the API.

00:25:49.567 --> 00:25:52.334
So here are
all the tasks involved,

00:25:52.334 --> 00:25:55.300
so the first part of this
is to get all the tasks

00:25:55.300 --> 00:25:57.634
that have been marked
from your local database.

00:25:57.634 --> 00:25:59.367
So, again, no specific API code.

00:25:59.367 --> 00:26:01.634
I'm just gonna mark, you know,
in bold blue like this,

00:26:01.634 --> 00:26:03.901
uh, all the methods that are
up to you to develop,

00:26:03.901 --> 00:26:06.133
basically, that use your,
you know, your own database,

00:26:06.133 --> 00:26:09.434
or, you know, other things
that's basically up to you.

00:26:09.434 --> 00:26:11.234
Then in the green box here,

00:26:11.234 --> 00:26:13.033
we're gonna do
the conditional update,

00:26:13.033 --> 00:26:15.667
so, you know, updating
a task conditionally--

00:26:15.667 --> 00:26:18.701
If the task has changed,
please let us know, basically,

00:26:18.701 --> 00:26:20.367
that's what it does.

00:26:20.367 --> 00:26:22.367
And then you have to remove
that modified marker,

00:26:22.367 --> 00:26:24.367
so it doesn't--you don't keep
updating the task

00:26:24.367 --> 00:26:26.801
on the next periodic cycle.

00:26:26.801 --> 00:26:30.667
So this is how you can do that
using our Java client library.

00:26:30.667 --> 00:26:34.300
So usually, you know,
updating a task is a one-liner,

00:26:34.300 --> 00:26:36.434
um, you know,
the second line here,

00:26:36.434 --> 00:26:39.167
uh, to which we've added
setting the If-Match header,

00:26:39.167 --> 00:26:41.934
so using the etag of the tasks,
and executed,

00:26:41.934 --> 00:26:44.467
and, you know, then
you remove the marker,

00:26:44.467 --> 00:26:46.634
uh, that the task
needs to be updated.

00:26:46.634 --> 00:26:50.300
And then, of course,
we shall not forget

00:26:50.300 --> 00:26:52.167
to, um, actually
handle conflicts,

00:26:52.167 --> 00:26:54.400
so if a, you know,
a conflict happened,

00:26:54.400 --> 00:26:57.100
this, you know, this, uh,

00:26:57.100 --> 00:26:59.834
this update, um, failed,

00:26:59.834 --> 00:27:03.767
the API is gonna return to you
a 412 Precondition Failed error,

00:27:03.767 --> 00:27:06.234
so an HTTP error, 412,

00:27:06.234 --> 00:27:08.167
and you can actually catch that

00:27:08.167 --> 00:27:10.234
using the HTTP response
exception in Java

00:27:10.234 --> 00:27:12.133
and just checking
the status code,

00:27:12.133 --> 00:27:14.033
because that's the exception
we're gonna return

00:27:14.033 --> 00:27:17.634
every time the API does not
return 200, basically,

00:27:17.634 --> 00:27:21.234
or, you know, 2XX.
200, 201, et cetera.

00:27:21.234 --> 00:27:25.367
So here, if it's
a 201--212--412, sorry,

00:27:25.367 --> 00:27:27.801
there's basically
a conflict to handle,

00:27:27.801 --> 00:27:29.767
so basically,
you're gonna have to merge

00:27:29.767 --> 00:27:32.334
your local version of your tasks
and the remote one,

00:27:32.334 --> 00:27:34.100
since, you know, they differ now

00:27:34.100 --> 00:27:36.033
and, um, they've both
been modified

00:27:36.033 --> 00:27:37.868
in two different systems.

00:27:37.868 --> 00:27:42.634
So a quicker--a quick word
about these merging strategies.

00:27:42.634 --> 00:27:44.400
Uh, there's many of them.

00:27:44.400 --> 00:27:46.133
Probably the most common one

00:27:46.133 --> 00:27:48.834
is just to simply keep
the last modified task--

00:27:48.834 --> 00:27:50.868
I mean, version of the task,
of the two.

00:27:50.868 --> 00:27:53.400
So you're gonna look
on Google's server,

00:27:53.400 --> 00:27:56.234
you know, Oh, when has
this task been modified?

00:27:56.234 --> 00:27:58.767
and the one you have,
and just pick the latest one--

00:27:58.767 --> 00:28:00.434
I mean, the latest modified one.

00:28:00.434 --> 00:28:02.300
There's also a few other ones.

00:28:02.300 --> 00:28:05.400
For example, you could choose
your version to always win,

00:28:05.400 --> 00:28:09.000
to always take, you know,
be preferred.

00:28:09.000 --> 00:28:10.701
You could also just
prompt the user,

00:28:10.701 --> 00:28:12.934
you know, ask him,
Oh, there's a conflict.

00:28:12.934 --> 00:28:14.501
Do you want to keep your version
or update to this one?

00:28:14.501 --> 00:28:17.300
You could also try
to do per-field merge,

00:28:17.300 --> 00:28:19.501
in which case,
you would need to keep

00:28:19.501 --> 00:28:21.567
a modified date on each field,

00:28:21.567 --> 00:28:24.634
and then you could actually do
per-field merge in some cases.

00:28:24.634 --> 00:28:26.300
Could be really interesting,

00:28:26.300 --> 00:28:29.300
and I'm just gonna show you
how you can do this,

00:28:29.300 --> 00:28:31.968
I mean, to keep
the last modified strategy,

00:28:31.968 --> 00:28:34.834
you know, merge strategy,
using our library.

00:28:34.834 --> 00:28:37.167
So it's also pretty simple.

00:28:37.167 --> 00:28:39.133
You're just gonna get
the remote task

00:28:39.133 --> 00:28:41.701
that has the same I.D.
and the same list,

00:28:41.701 --> 00:28:44.434
and then you're gonna, you know,
compare the two time stamps,

00:28:44.434 --> 00:28:47.767
and then just, you know,
choose whether you need to save

00:28:47.767 --> 00:28:49.501
the remote task
in your local database,

00:28:49.501 --> 00:28:52.767
or just, you know, update again
the remote task,

00:28:52.767 --> 00:28:55.033
uh, I mean, on the API,

00:28:55.033 --> 00:28:57.300
this time not conditionally,
just erasing it.

00:28:57.300 --> 00:28:59.667
You could also still
do it conditionally,

00:28:59.667 --> 00:29:02.968
but using the new etag
of the task you just got done.

00:29:02.968 --> 00:29:05.968
You know, just to make sure
the task has not been modified,

00:29:05.968 --> 00:29:07.701
if you're really unlucky,

00:29:07.701 --> 00:29:11.234
between the first
and the fourth line.

00:29:11.234 --> 00:29:14.834
All right, then the second part
of the synchronization here

00:29:14.834 --> 00:29:17.133
is we're gonna get
all the modified tasks

00:29:17.133 --> 00:29:20.200
from the API, and, you know,
update your local database.

00:29:20.200 --> 00:29:22.567
So here are some
of the tasks involved.

00:29:22.567 --> 00:29:24.501
Uh, we're basically
doing polling,

00:29:24.501 --> 00:29:26.801
so we're using
the "updatedMin" parameter.

00:29:26.801 --> 00:29:29.167
It's, again,
pretty simple to use.

00:29:29.167 --> 00:29:30.868
Usually, getting
the default task list

00:29:30.868 --> 00:29:32.567
only--is only a one-liner.

00:29:32.567 --> 00:29:34.234
Then we're gonna set

00:29:34.234 --> 00:29:36.234
the "updatedMin"
URL parameter, as I said,

00:29:36.234 --> 00:29:39.067
to a date to which
you've--you've saved,

00:29:39.067 --> 00:29:41.667
so basically, the date
of your last sync.

00:29:41.667 --> 00:29:43.501
You also have--

00:29:43.501 --> 00:29:45.667
you should not forget,
that's really important--

00:29:45.667 --> 00:29:49.534
to ask the API to show you
all the deleted tasks,

00:29:49.534 --> 00:29:51.667
basically, all the tasks
that have been deleted.

00:29:51.667 --> 00:29:53.868
Basically, it's gonna
return you tombstones,

00:29:53.868 --> 00:29:55.667
you know, like,
letting you know,

00:29:55.667 --> 00:29:57.400
oh, those five tasks
have been deleted.

00:29:57.400 --> 00:29:59.868
That way, you can update
your local database

00:29:59.868 --> 00:30:02.300
and the--you know,
remove those tasks.

00:30:02.300 --> 00:30:05.367
Then that's not really
API-specific.

00:30:05.367 --> 00:30:07.901
You're just gonna save that
to your local database,

00:30:07.901 --> 00:30:09.868
you know, erase
and update your tasks.

00:30:09.868 --> 00:30:12.868
Um, and yeah, sorry,
the last part here,

00:30:12.868 --> 00:30:14.534
in the green box,

00:30:14.534 --> 00:30:16.734
is you're gonna have to save
this new date, you know?

00:30:16.734 --> 00:30:19.400
Oh, that's my new
synchronization date.

00:30:19.400 --> 00:30:22.000
I want to use this date
for, you know, next round.

00:30:22.000 --> 00:30:25.067
So instead of just saving
the current date of your system,

00:30:25.067 --> 00:30:27.300
in which case you would
need your server,

00:30:27.300 --> 00:30:29.300
you know, really in sync
with Google's servers,

00:30:29.300 --> 00:30:32.367
a common trick here is just
to, actually, through--

00:30:32.367 --> 00:30:34.901
I mean, beyond the task
you've just got on here,

00:30:34.901 --> 00:30:37.367
on the previous subpart,

00:30:37.367 --> 00:30:40.868
you're just gonna, you know, try
to find the latest updated task,

00:30:40.868 --> 00:30:42.667
and just keep that date,

00:30:42.667 --> 00:30:44.767
and reuse that date
for, you know, next update.

00:30:44.767 --> 00:30:46.901
That way, you don't really
rely on having,

00:30:46.901 --> 00:30:49.901
you know, your two clocks
synchronized with Google.

00:30:49.901 --> 00:30:53.901
That's a, you know,
common--common code.

00:30:53.901 --> 00:30:56.033
Then you're gonna save that date

00:30:56.033 --> 00:30:58.100
and, you know use that
for later.

00:30:58.100 --> 00:31:00.067
So actually, then, that's it.

00:31:00.067 --> 00:31:02.133
If you follow these principles,
you should have

00:31:02.133 --> 00:31:03.901
a well-working
task configuration.

00:31:03.901 --> 00:31:07.100
I think I touched a cable here.

00:31:07.100 --> 00:31:08.968
All right, we're back,

00:31:08.968 --> 00:31:11.267
and, yeah, that's it.
Thank you very much.

00:31:11.267 --> 00:31:13.334
So I'm now gonna
let the stage to David

00:31:13.334 --> 00:31:15.534
for more exciting stuff.
Thanks very much.

00:31:15.534 --> 00:31:18.467
[applause]

00:31:20.501 --> 00:31:22.667
Tattersall: Okay, I'm gonna
stand well, well back

00:31:22.667 --> 00:31:24.167
from that cable.

00:31:24.167 --> 00:31:26.033
So that was all about
how to build stuff,

00:31:26.033 --> 00:31:27.501
and now I'm gonna
show you some stuff

00:31:27.501 --> 00:31:29.501
that's actually already
been built, and in a few cases,

00:31:29.501 --> 00:31:31.067
actually already
running in the wild

00:31:31.067 --> 00:31:33.000
and available
to people's users today.

00:31:33.000 --> 00:31:37.567
So obviously, we had
several teams using the API

00:31:37.567 --> 00:31:39.100
over the past few months,

00:31:39.100 --> 00:31:41.000
and I would now like to invite
up to the stage

00:31:41.000 --> 00:31:42.801
Roger, who is the founder

00:31:42.801 --> 00:31:45.067
and Vice President of Products
and Platform at Mavenlink,

00:31:45.067 --> 00:31:47.400
Naveen, who is
a tech lead at Zoho,

00:31:47.400 --> 00:31:50.300
and Ilan, who is the founder
and C.E.O. of Producteev.

00:31:50.300 --> 00:31:51.968
Guys.

00:31:51.968 --> 00:31:54.901
[applause]

00:31:59.534 --> 00:32:01.501
Neel: Thank you very much.

00:32:01.501 --> 00:32:04.334
Nicolas, thanks for the
land mine here on the keyboard.

00:32:04.334 --> 00:32:06.067
[laughter]

00:32:06.067 --> 00:32:09.868
Neel: Um, so let me switch
over to Mavenlink.

00:32:09.868 --> 00:32:12.200
So hi, I'm Roger.
I'm from Mavenlink.

00:32:12.200 --> 00:32:15.234
We were invited
by the Google guys

00:32:15.234 --> 00:32:18.033
to participate in
the Trusted Testers Program

00:32:18.033 --> 00:32:20.100
for the Tasks API,

00:32:20.100 --> 00:32:22.601
and I just want to express
my appreciation to them,

00:32:22.601 --> 00:32:24.267
and also thank my team,

00:32:24.267 --> 00:32:26.100
who's maybe watching
on YouTube right now,

00:32:26.100 --> 00:32:29.033
for all the hard work getting
this feature delivered.

00:32:29.033 --> 00:32:31.133
It's actually live
in production right now

00:32:31.133 --> 00:32:34.234
based on the release,
and we're really excited,

00:32:34.234 --> 00:32:36.801
and we've already gotten some
great customer feedback on it.

00:32:36.801 --> 00:32:38.467
So a little bit of background--

00:32:38.467 --> 00:32:40.467
Mavenlink is
an end-to-end application

00:32:40.467 --> 00:32:42.334
to do work with clients,

00:32:42.334 --> 00:32:45.400
so you'll see that I'm gonna
present a project workspace

00:32:45.400 --> 00:32:47.734
where we're doing
some--some work

00:32:47.734 --> 00:32:50.734
on a redesign for a web site
for one of our clients,

00:32:50.734 --> 00:32:54.834
Sean Crafts, and one of
his colleagues, Jeff Moore.

00:32:54.834 --> 00:32:59.801
Um, so, uh, we've been
in the Google Apps Marketplace

00:32:59.801 --> 00:33:01.534
for about a year.

00:33:01.534 --> 00:33:03.367
We were actually doing
the implementation

00:33:03.367 --> 00:33:05.200
of some of
the other integrations,

00:33:05.200 --> 00:33:07.467
uh, exactly a year ago today,

00:33:07.467 --> 00:33:10.167
while many of you
were at Google I/O,

00:33:10.167 --> 00:33:13.133
and now we're here,
less than one year later,

00:33:13.133 --> 00:33:15.033
uh, expanding
on some of that stuff,

00:33:15.033 --> 00:33:17.534
so just to give you
a little bit of background,

00:33:17.534 --> 00:33:20.467
our original integration
with all the stuff

00:33:20.467 --> 00:33:23.567
that you see on the right-hand
side of the screen,

00:33:23.567 --> 00:33:26.834
where we have our tasks,
deliverables, and milestones,

00:33:26.834 --> 00:33:29.467
we're actually syncing those
to your Google Calendar,

00:33:29.467 --> 00:33:32.200
so now, with the release
of the Google Tasks API,

00:33:32.200 --> 00:33:34.567
we were able to actually
synchronize the tasks,

00:33:34.567 --> 00:33:37.467
which is kind of the main,
um, system of record

00:33:37.467 --> 00:33:41.000
of what people are doing with
their clients in our system.

00:33:41.000 --> 00:33:43.167
We're able to sync that
with your task list,

00:33:43.167 --> 00:33:46.167
so that's what I'm gonna
show you now.

00:33:46.167 --> 00:33:48.534
So this has been a big request
for our customer.

00:33:48.534 --> 00:33:51.033
You can see here,
I'm in a project workspace.

00:33:51.033 --> 00:33:53.033
Just to kind of give you
a little perspective

00:33:53.033 --> 00:33:54.934
on what these guys were saying,

00:33:54.934 --> 00:33:57.167
uh, you know, you have tasks
and task lists.

00:33:57.167 --> 00:33:59.734
We create a task list
for each project,

00:33:59.734 --> 00:34:02.868
so you have one or more projects
with a client,

00:34:02.868 --> 00:34:06.868
and so we have our web site
redesign for ACME task list

00:34:06.868 --> 00:34:08.734
and then a bunch of subtasks

00:34:08.734 --> 00:34:10.767
that may or may not
be assigned to me.

00:34:10.767 --> 00:34:12.434
If they're not assigned to me,

00:34:12.434 --> 00:34:14.434
they don't come
in my Google Task list.

00:34:14.434 --> 00:34:16.434
If they are assigned
to me, they do.

00:34:16.434 --> 00:34:19.434
So we're kind of jumping into
the middle of a scenario here.

00:34:19.434 --> 00:34:21.567
We've done a scoping session
with a client,

00:34:21.567 --> 00:34:23.501
and now they're looking for us

00:34:23.501 --> 00:34:25.901
to upload
our revision 1 mock-ups,

00:34:25.901 --> 00:34:27.934
so I can fly that out,

00:34:27.934 --> 00:34:30.467
complete this task,

00:34:30.467 --> 00:34:32.868
which will complete it
in Mavenlink,

00:34:32.868 --> 00:34:36.167
and then I can go to
my Google Calendar

00:34:36.167 --> 00:34:38.200
or my Google e-mail,

00:34:38.200 --> 00:34:41.767
and when I refresh
the task list here...

00:34:44.501 --> 00:34:47.934
Neel: You can see that
the revision 1 mock-ups task

00:34:47.934 --> 00:34:50.734
is now completed,
and it's completed over here.

00:34:50.734 --> 00:34:52.467
We've done
a bidirectional sync.

00:34:52.467 --> 00:34:54.400
We didn't implement
some of the polling

00:34:54.400 --> 00:34:56.868
that Nicolas was mentioning,
but that's something

00:34:56.868 --> 00:34:58.934
that's gonna be
a future feature for us,

00:34:58.934 --> 00:35:01.601
but in this case,
we can complete more tasks

00:35:01.601 --> 00:35:03.868
if we did, maybe,
a review with our client

00:35:03.868 --> 00:35:07.100
and then come back to Mavenlink
and synchronize that.

00:35:07.100 --> 00:35:08.834
So we have a little sync button

00:35:08.834 --> 00:35:12.334
which kicks off a real-time poll
from Google

00:35:12.334 --> 00:35:14.601
and then in our workspace,

00:35:14.601 --> 00:35:16.634
uh, that AJAX is in
any completions,

00:35:16.634 --> 00:35:18.601
and you can see
that we actually had

00:35:18.601 --> 00:35:20.534
a few things to bulk sync here.

00:35:20.534 --> 00:35:23.033
This got completed, and then
we have a couple new tasks

00:35:23.033 --> 00:35:24.868
that were in
our Google Task list

00:35:24.868 --> 00:35:27.133
that maybe I created before,

00:35:27.133 --> 00:35:29.133
and so those get
synced up, as well.

00:35:29.133 --> 00:35:31.767
So that's kind of the demo.

00:35:31.767 --> 00:35:33.601
Um, you know, we'll--

00:35:33.601 --> 00:35:36.100
I think we're coming up
to the stage to ask--

00:35:36.100 --> 00:35:39.434
or answer any questions about
some of the best practices,

00:35:39.434 --> 00:35:41.701
but, you know, we're really
excited about this.

00:35:41.701 --> 00:35:45.934
We think that Tasks is really
the core of an e-mail workflow,

00:35:45.934 --> 00:35:49.167
and Google is essentially
enabling apps like mine

00:35:49.167 --> 00:35:52.701
to fit into that--
that third-party workflow.

00:35:52.701 --> 00:35:55.133
So it's live now, like I said,

00:35:55.133 --> 00:35:57.968
and actually, for Google I/O,

00:35:57.968 --> 00:36:00.567
we're offering
50% off Mavenlink for life.

00:36:00.567 --> 00:36:03.634
So if you'd like to come in,
sign up, give it a try,

00:36:03.634 --> 00:36:06.667
try out our APIs,
you can do that.

00:36:06.667 --> 00:36:09.300
Go to /googleio or ping me,

00:36:09.300 --> 00:36:12.200
and I can set you up, as well.

00:36:12.200 --> 00:36:15.133
[applause]

00:36:25.200 --> 00:36:27.200
Venkat: Thanks, Roger.

00:36:27.200 --> 00:36:29.334
Hello, everyone. I'm Naveen.

00:36:29.334 --> 00:36:31.334
I work for Zoho,
where I head the team

00:36:31.334 --> 00:36:33.567
responsible for
integrating Zoho

00:36:33.567 --> 00:36:36.634
with Google Apps Marketplace
and other OpenSocial apps.

00:36:36.634 --> 00:36:40.133
For those of you who are
not familiar with Zoho,

00:36:40.133 --> 00:36:42.434
we offer
around 25 online services

00:36:42.434 --> 00:36:44.767
ranging from the basic
productivity suite

00:36:44.767 --> 00:36:47.367
all the way up
to CRM project management

00:36:47.367 --> 00:36:51.000
invoicing, custom app building
platform, and much more.

00:36:52.601 --> 00:36:55.000
Venkat: We have integrated
most of our business apps

00:36:55.000 --> 00:36:56.767
with Google Apps Marketplace.

00:36:56.767 --> 00:36:58.501
Over the last one year,

00:36:58.501 --> 00:37:00.634
we have been consistently
adding new services

00:37:00.634 --> 00:37:02.367
to Google Apps Marketplace

00:37:02.367 --> 00:37:04.367
and have been constantly
enhancing features

00:37:04.367 --> 00:37:06.067
to our existing services.

00:37:06.067 --> 00:37:09.167
Zoho has thus grown to become
the largest vendor

00:37:09.167 --> 00:37:10.701
in Google Apps Marketplace.

00:37:10.701 --> 00:37:13.667
So coming to
Google Task integration,

00:37:13.667 --> 00:37:16.367
when you think
about task management,

00:37:16.367 --> 00:37:18.300
ideally, there should be
a single place

00:37:18.300 --> 00:37:20.167
where you can manage your tasks,

00:37:20.167 --> 00:37:22.334
but in reality,
that is not the case.

00:37:22.334 --> 00:37:25.467
You may manage your personal
tasks in one application,

00:37:25.467 --> 00:37:27.601
and if you're working
on a few projects,

00:37:27.601 --> 00:37:30.601
you may maintain your tasks
in a project management,

00:37:30.601 --> 00:37:32.300
and if you're a sales guy,

00:37:32.300 --> 00:37:35.934
you'll end up maintaining
your tasks in a CRM application.

00:37:35.934 --> 00:37:39.200
But what if you can manage
all your tasks

00:37:39.200 --> 00:37:40.934
in one single place?

00:37:40.934 --> 00:37:44.434
What if you can manage your
project and CRM-related tasks

00:37:44.434 --> 00:37:46.100
in one application?

00:37:46.100 --> 00:37:49.634
So this is basically what we
have done with theGoogle Tasks.

00:37:49.634 --> 00:37:53.400
We have integrated tasks
from Zoho CRM and Projects

00:37:53.400 --> 00:37:56.601
with Google Apps--Google Tasks.

00:37:56.601 --> 00:38:01.067
So, um, I will start
with Zoho CRM.

00:38:01.067 --> 00:38:04.334
Before that, uh, this
integration will go live soon,

00:38:04.334 --> 00:38:07.000
but for now, let me show you
the screenshots

00:38:07.000 --> 00:38:10.734
of, uh, how
this integration looks.

00:38:10.734 --> 00:38:13.501
So in Zoho CRM,
users will be presented

00:38:13.501 --> 00:38:15.467
with the configuration bar,

00:38:15.467 --> 00:38:18.267
where they can specify
the Google Task list

00:38:18.267 --> 00:38:20.834
to which the Zoho CRM task
can be pushed to.

00:38:20.834 --> 00:38:22.901
Once this setup is in place,

00:38:22.901 --> 00:38:25.000
the tasks that are added
in Zoho CRM

00:38:25.000 --> 00:38:26.701
can be pushed to Google Tasks.

00:38:26.701 --> 00:38:29.567
Also, when the user
edits a task in Zoho CRM,

00:38:29.567 --> 00:38:32.567
the changes will be updated
in Google Tasks, as well.

00:38:32.567 --> 00:38:34.801
Moving on,

00:38:34.801 --> 00:38:36.734
here's how we have
integrated Google Tasks

00:38:36.734 --> 00:38:38.701
with our project management app.

00:38:38.701 --> 00:38:42.567
Users' tasks in Zoho Projects
can be exported,

00:38:42.567 --> 00:38:44.868
along with their task list,
to Google Tasks.

00:38:44.868 --> 00:38:48.267
Also, if there are any changes
made in Zoho Projects,

00:38:48.267 --> 00:38:50.968
they will be automatically
updated in Google Tasks.

00:38:50.968 --> 00:38:53.834
To sync the modifications
in Google Tasks,

00:38:53.834 --> 00:38:56.133
we run a scheduler
for every 12 hours,

00:38:56.133 --> 00:38:58.033
and if there are any changes,

00:38:58.033 --> 00:39:02.901
it will be updated automatically
in the corresponding task.

00:39:02.901 --> 00:39:05.167
So I hope you find
this integration useful.

00:39:05.167 --> 00:39:08.133
We do have plans of extending
this integration

00:39:08.133 --> 00:39:10.100
to the rest of the services.

00:39:10.100 --> 00:39:12.100
I would like to thank Nicolas

00:39:12.100 --> 00:39:15.267
for inviting me
to showcase our integration,

00:39:15.267 --> 00:39:16.934
and also the Google team

00:39:16.934 --> 00:39:19.934
for their wonderful support
right through the integration.

00:39:19.934 --> 00:39:21.934
Thanks, guys.

00:39:21.934 --> 00:39:24.868
[applause]

00:39:29.934 --> 00:39:31.767
Abehassera: Hi, everyone.

00:39:31.767 --> 00:39:33.567
I'm Ilan Abehassera,

00:39:33.567 --> 00:39:36.367
and I'm the founder
and C.E.O. of Producteev.

00:39:36.367 --> 00:39:37.834
Um, for those of you
who are not aware

00:39:37.834 --> 00:39:39.601
of what Producteev is doing,

00:39:39.601 --> 00:39:42.234
we're basically building
a task management platform

00:39:42.234 --> 00:39:44.067
that lets you
collect your to-dos

00:39:44.067 --> 00:39:45.901
from a lot
of different locations,

00:39:45.901 --> 00:39:48.200
platforms, services, apps.

00:39:48.200 --> 00:39:52.133
We're available
in a lot of Google services,

00:39:52.133 --> 00:39:53.968
integration with Google apps,

00:39:53.968 --> 00:39:57.033
um, Google Talk,
the Chrome Web app store,

00:39:57.033 --> 00:39:59.567
Chrome extension,
and so on and so forth,

00:39:59.567 --> 00:40:03.100
and we're here today to present
the Google Tasks integration.

00:40:03.100 --> 00:40:06.667
All right, so I'm gonna do
a live demo.

00:40:06.667 --> 00:40:09.534
Uh, we never know
if it's gonna work or not,

00:40:09.534 --> 00:40:11.534
but we tried it
a couple of times

00:40:11.534 --> 00:40:13.534
and it should be working fine.

00:40:13.534 --> 00:40:16.334
Um, this is the Producteev
Web app here,

00:40:16.334 --> 00:40:18.834
so as you can see,
this is my Google I/O project.

00:40:18.834 --> 00:40:20.534
I have two tasks on it.

00:40:20.534 --> 00:40:23.033
The first time I'm gonna do--
the first thing I'm gonna do

00:40:23.033 --> 00:40:26.200
is connect my GMAIL account

00:40:26.200 --> 00:40:28.033
with Producteev.

00:40:28.033 --> 00:40:30.534
All right, so I'm doing
the whole process

00:40:30.534 --> 00:40:32.767
so you can see
how seamless it is

00:40:32.767 --> 00:40:35.767
to integrate both,
uh, products together.

00:40:35.767 --> 00:40:38.167
Now I'm going back
to my workspace,

00:40:38.167 --> 00:40:40.067
and now we're gonna see

00:40:40.067 --> 00:40:42.901
my Google Tasks widget,

00:40:42.901 --> 00:40:45.601
and as you can see,

00:40:45.601 --> 00:40:49.133
those two tasks are already
available in my task list.

00:40:49.133 --> 00:40:52.634
We also retrieve notes

00:40:52.634 --> 00:40:54.300
and deadlines.

00:40:54.300 --> 00:40:55.968
We synchronize both ways,

00:40:55.968 --> 00:40:58.968
so let me show you
how that works from GMAIL

00:40:58.968 --> 00:41:02.100
and Google Tasks to Producteev.

00:41:02.100 --> 00:41:05.534
So let me turn this e-mail
into a task here,

00:41:05.534 --> 00:41:07.534
so it's already available

00:41:07.534 --> 00:41:10.367
in my Google Task--Task list,

00:41:10.367 --> 00:41:13.801
and now I'm going back
to Producteev, refreshing,

00:41:13.801 --> 00:41:16.534
and it's right there, as well.

00:41:16.534 --> 00:41:18.701
Now just creating a new task,

00:41:18.701 --> 00:41:20.868
uh, let's say "new brochure"

00:41:20.868 --> 00:41:22.701
for next week.

00:41:22.701 --> 00:41:25.734
We also understand
natural language processing,

00:41:25.734 --> 00:41:28.634
so it's creating a new task
in Producteev.

00:41:28.634 --> 00:41:30.334
It was deadlined for next week.

00:41:30.334 --> 00:41:32.300
Going back to Google Tasks,

00:41:32.300 --> 00:41:35.868
refreshing,

00:41:35.868 --> 00:41:37.801
another time.

00:41:37.801 --> 00:41:40.367
It takes, usually,
five to ten seconds.

00:41:42.434 --> 00:41:44.267
Abehassera: It's gonna show up,

00:41:44.267 --> 00:41:46.634
um, I promise.

00:41:46.634 --> 00:41:49.234
And so basically,
just to sum it up,

00:41:49.234 --> 00:41:51.434
what we do is
retrieving your tasks,

00:41:51.434 --> 00:41:53.267
synchronize them both ways,

00:41:53.267 --> 00:41:57.167
getting your,
um, deadlines and notes

00:41:57.167 --> 00:41:59.033
on both services.

00:41:59.033 --> 00:42:01.968
Let's try, and then I'm moving
on to my last slide.

00:42:01.968 --> 00:42:04.501
There you go. Yeah.
[laughs]

00:42:04.501 --> 00:42:06.868
[applause]

00:42:06.868 --> 00:42:08.868
Abehassera: All right.

00:42:08.868 --> 00:42:10.801
So, um, quickly,

00:42:10.801 --> 00:42:13.534
about the technical
implementation itself--

00:42:13.534 --> 00:42:16.067
we really loved
the documentation.

00:42:16.067 --> 00:42:18.033
As you saw earlier,

00:42:18.033 --> 00:42:19.734
everything is very detailed.

00:42:19.734 --> 00:42:22.534
uh, lots of support
from the Google Tasks team,

00:42:22.534 --> 00:42:24.334
well-structured API,

00:42:24.334 --> 00:42:26.567
and also one of the--

00:42:26.567 --> 00:42:28.767
lots of requests
that we got for Producteev

00:42:28.767 --> 00:42:31.701
was the possibility
to turn any GMAIL e-mails

00:42:31.701 --> 00:42:35.133
into a task on Producteev,
and now it's doable,

00:42:35.133 --> 00:42:38.133
like I just showed you
in last, uh, last minute.

00:42:38.133 --> 00:42:39.801
Thank you very much,

00:42:39.801 --> 00:42:42.567
and thank you again
for the Google Tasks API.

00:42:42.567 --> 00:42:45.501
[applause]

00:42:47.901 --> 00:42:49.901
Tattersall: Thank you
very much, Ilan.

00:42:49.901 --> 00:42:52.734
So that's the end
of our talk now.

00:42:52.734 --> 00:42:56.234
Please, please do follow us
on Twitter, @googletasks.

00:42:56.234 --> 00:42:58.234
If you are tweeting,
the hashtags are here,

00:42:58.234 --> 00:43:00.234
and please also leave
some feedback, as well.

00:43:00.234 --> 00:43:02.300
That short link leads you
to the SpeakerMeter page.

00:43:02.300 --> 00:43:04.634
If you want to get
started straightaway,

00:43:04.634 --> 00:43:06.334
the URI is up there,

00:43:06.334 --> 00:43:08.801
and also I'd like to say,
just before we take questions,

00:43:08.801 --> 00:43:11.300
it's taken a great many people
to get this API out the door,

00:43:11.300 --> 00:43:13.801
and I'd like to say a huge, huge
thank-you to everyone involved.

00:43:13.801 --> 00:43:15.400
I'm not gonna try
and list everyone

00:43:15.400 --> 00:43:17.400
for fear of missing someone,
but you guys know who you are.

00:43:17.400 --> 00:43:19.067
I particularly want to say
thank you so much

00:43:19.067 --> 00:43:20.634
to the team back in Zurich,

00:43:20.634 --> 00:43:22.634
and also to Andreas,
our tireless tech lead,

00:43:22.634 --> 00:43:24.634
for keeping things running,
for Nicolas, for running

00:43:24.634 --> 00:43:26.634
a great Developer Relations
Program, and for Fabian,

00:43:26.634 --> 00:43:28.634
who literally sweat blood
and tears coding this API

00:43:28.634 --> 00:43:31.133
from scratch for you guys.
Thank you very much.

00:43:31.133 --> 00:43:33.934
[applause]

00:43:33.934 --> 00:43:35.601
Tattersall: Also,
I thank you very much

00:43:35.601 --> 00:43:37.100
for choosing this session,

00:43:37.100 --> 00:43:38.634
and have a great journey
back from I/O,

00:43:38.634 --> 00:43:40.667
and we'd love
to take any questions,

00:43:40.667 --> 00:43:43.000
if I can invite the team up.

00:43:43.000 --> 00:43:46.501
Coming up.

00:43:46.501 --> 00:43:48.801
So we have
the first question mic.

00:43:48.801 --> 00:43:52.467
man: Hi, so, um, the move method
you implemented--

00:43:52.467 --> 00:43:54.133
is it strictly a helper?

00:43:54.133 --> 00:43:55.801
I mean, obviously,
it's gonna enumerate

00:43:55.801 --> 00:43:57.801
the different positions
and find the right value

00:43:57.801 --> 00:43:59.467
to insert and so forth.

00:43:59.467 --> 00:44:02.033
Does it have carnal knowledge
that we would be unable

00:44:02.033 --> 00:44:04.534
to reproduce, or is it just
saving us the two-phase commit

00:44:04.534 --> 00:44:08.000
of doing back and forth,
and so forth?

00:44:08.000 --> 00:44:11.968
Schlup: Oh.

00:44:11.968 --> 00:44:14.467
Uh, so I'm not sure I under--
so, you said--

00:44:14.467 --> 00:44:16.133
what--what's your question?

00:44:16.133 --> 00:44:17.801
man: So you implemented
a move API.

00:44:17.801 --> 00:44:19.467
Schlup: Right.
man: But you exposed

00:44:19.467 --> 00:44:21.968
the attributes of the elements
so that I could do a GET

00:44:21.968 --> 00:44:24.968
and a PUT, and in theory, put it
back, but I have to have--

00:44:24.968 --> 00:44:26.968
you know, I'm updating the
position values and so forth.

00:44:26.968 --> 00:44:28.968
So is there something
about the move API

00:44:28.968 --> 00:44:31.467
that does things that
we could not that guarantee it

00:44:31.467 --> 00:44:33.300
to be better, more reliable,
or consistent?

00:44:33.300 --> 00:44:34.934
I mean, 'cause the values
you put in there

00:44:34.934 --> 00:44:36.501
are being generated
by the move API now.

00:44:36.501 --> 00:44:38.501
It's inserting new values
for those position values.

00:44:38.501 --> 00:44:40.501
So is there a convention?
Is there a pad?

00:44:40.501 --> 00:44:43.801
If some app is doing
its own thing, it moves itself

00:44:43.801 --> 00:44:46.300
its own way with its own set
of position values,

00:44:46.300 --> 00:44:48.300
is something else gonna
get screwed up by that?

00:44:48.300 --> 00:44:50.801
Like, was this purely a helper,
or is it that you have

00:44:50.801 --> 00:44:52.801
specific knowledge about
how things are supposed to be?

00:44:52.801 --> 00:44:55.300
Do you see my question or not?

00:44:55.300 --> 00:44:57.701
Schlup: It--it's not
purely a helper

00:44:57.701 --> 00:45:00.868
in that you cannot achieve
a move in any other way.

00:45:00.868 --> 00:45:02.634
man: You can't?

00:45:02.634 --> 00:45:05.734
If I do a--if I do a PUT
with the version number

00:45:05.734 --> 00:45:08.400
and the new position number
and the predecessor,

00:45:08.400 --> 00:45:10.634
why is that not the same thing?

00:45:10.634 --> 00:45:13.634
Schlup: So we--a task doesn't
have a field

00:45:13.634 --> 00:45:15.467
that defines its predecessor,

00:45:15.467 --> 00:45:17.300
but it only has
this position field...

00:45:17.300 --> 00:45:19.300
man: Ahh, the predecessor
is the same. Okay.

00:45:19.300 --> 00:45:21.801
Schlup: Which we update for you
when you do the move.

00:45:21.801 --> 00:45:23.801
man: But the position thing
determines the predecessor.

00:45:23.801 --> 00:45:25.801
If I look at the previous
set of values,

00:45:25.801 --> 00:45:27.801
I know the one, I can put
the thing in there.

00:45:27.801 --> 00:45:29.501
Schlup: I don't hear it...

00:45:29.501 --> 00:45:31.501
Tattersall: So the--I think--
you can't simply update

00:45:31.501 --> 00:45:33.501
the position field because
they're not simply sequential.

00:45:33.501 --> 00:45:35.501
They're kind of
automatically generated from

00:45:35.501 --> 00:45:37.501
behind the scenes, and so if
you end up with loads of tasks,

00:45:37.501 --> 00:45:40.000
at some point, you're gonna have
to do some sort of rebalancing.

00:45:40.000 --> 00:45:41.934
man: So what you're saying
is we really should

00:45:41.934 --> 00:45:43.934
absolutely not try to set
the position value anytime.

00:45:43.934 --> 00:45:46.467
Schlup: No, that's correct.
The position values

00:45:46.467 --> 00:45:48.467
are provided for you.
man: And we can't--

00:45:48.467 --> 00:45:50.968
although we can set them
in the API, we should not.

00:45:50.968 --> 00:45:52.968
Schlup: You cannot set them
in the API.

00:45:52.968 --> 00:45:55.467
man: Oh, so they just come back
for informational purposes,

00:45:55.467 --> 00:45:57.133
but--okay.
Schlup: Yes. Exactly, yes.

00:45:57.133 --> 00:45:59.133
man: That's the question I had.
All right, thanks.

00:45:59.133 --> 00:46:01.200
Schlup: Yeah.
Sorry about that.

00:46:01.200 --> 00:46:03.834
man: Uh, just
a best practices question.

00:46:03.834 --> 00:46:05.701
Uh, I have a task app

00:46:05.701 --> 00:46:09.200
that has multiple
broken-down fields

00:46:09.200 --> 00:46:11.033
and more specific data values,

00:46:11.033 --> 00:46:14.133
like quantity and location,

00:46:14.133 --> 00:46:15.801
things like that.

00:46:15.801 --> 00:46:19.300
What's the best practices for
syncing that with Google Tasks,

00:46:19.300 --> 00:46:21.434
which only has the title
and the notes

00:46:21.434 --> 00:46:23.100
and due date field?

00:46:23.100 --> 00:46:27.167
Is there a best practices
for how to itemize that

00:46:27.167 --> 00:46:30.067
in the notes field,
or what to eliminate?

00:46:35.634 --> 00:46:39.567
Signer: Yeah, so currently,
we don't support custom fields.

00:46:39.567 --> 00:46:43.367
Um, there's basically
no best practice yet.

00:46:43.367 --> 00:46:46.667
If you can easily somehow
serialize it into notes,

00:46:46.667 --> 00:46:50.033
and it will show up
in Google Tasks,

00:46:50.033 --> 00:46:52.067
and individuals
in GMAIL and Calendar,

00:46:52.067 --> 00:46:54.400
so you can choose

00:46:54.400 --> 00:46:57.300
sort of a half
machine-readable form

00:46:57.300 --> 00:47:00.133
which still makes sense
to real users,

00:47:00.133 --> 00:47:01.934
then that's cool,

00:47:01.934 --> 00:47:05.601
but we don't have any better
advice than that at the moment.

00:47:05.601 --> 00:47:07.667
man: Okay.

00:47:07.667 --> 00:47:10.167
woman: Hi, I missed
the early part of your talk,

00:47:10.167 --> 00:47:12.000
so if you covered it, I'm sorry.
Tattersall: [chuckles]

00:47:12.000 --> 00:47:13.667
woman: Um, it's actually
a two-part question.

00:47:13.667 --> 00:47:16.167
One was that it's usually
a very popular use case

00:47:16.167 --> 00:47:18.000
to be able to do
coordinated tasks,

00:47:18.000 --> 00:47:20.000
so if I have four people
in my family,

00:47:20.000 --> 00:47:22.501
can I have one PUT that goes
into all four accounts,

00:47:22.501 --> 00:47:24.501
and kind of like know
who's finishing it?

00:47:24.501 --> 00:47:27.000
Is the Tasks API gonna
support that down the line,

00:47:27.000 --> 00:47:29.501
in the sense of maybe
having a PUT to a group

00:47:29.501 --> 00:47:31.167
rather than a person?

00:47:31.167 --> 00:47:33.200
And the other part
of the question was,

00:47:33.200 --> 00:47:35.834
um, I think I saw something
which allows me

00:47:35.834 --> 00:47:38.000
to basically do a GET
from different applications

00:47:38.000 --> 00:47:39.834
for my--for my
task queue, right?

00:47:39.834 --> 00:47:42.000
So do you automatically
do notifications

00:47:42.000 --> 00:47:44.000
if one of the apps
deletes a task?

00:47:44.000 --> 00:47:45.667
Do you notify other apps

00:47:45.667 --> 00:47:47.667
that are looking at it,
things like that?

00:47:47.667 --> 00:47:50.167
Tattersall: So I can answer
the question about social tasks.

00:47:50.167 --> 00:47:52.000
So if you read our blog post,

00:47:52.000 --> 00:47:54.501
which was the beginning of
January, it basically summed up

00:47:54.501 --> 00:47:57.000
the results from the user survey
we did in December,

00:47:57.000 --> 00:47:59.501
and one of the largest feature
requests was for social tasks,

00:47:59.501 --> 00:48:01.567
so things like assigning tasks,
sharing tasks, sharing lists.

00:48:01.567 --> 00:48:04.067
So this is some feedback
we've obviously taken on board.

00:48:04.067 --> 00:48:06.567
I'm not putting a lot of energy
into the Tasks part his year,

00:48:06.567 --> 00:48:08.267
so I can't comment
on road maps specifically,

00:48:08.267 --> 00:48:10.734
but we definitely know
it's a really common use case.

00:48:10.734 --> 00:48:13.234
woman: Okay, so kind of
to build on that, I'm assuming

00:48:13.234 --> 00:48:15.234
there's no other attribute
that just says whether this is

00:48:15.234 --> 00:48:17.734
a public or a private task,
like at the very low level.

00:48:17.734 --> 00:48:19.400
There's no other attribute,
other than string,

00:48:19.400 --> 00:48:21.067
that defines the task, right?

00:48:21.067 --> 00:48:22.734
Tattersall: Sorry, I didn't
hear the question.

00:48:22.734 --> 00:48:24.734
woman: Oh, sorry. I was saying,
right now, on the Tasks,

00:48:24.734 --> 00:48:26.734
you don't have any attribute
that sets it to a public

00:48:26.734 --> 00:48:28.734
or private. It's just an app--
Tattersall: Yeah, right now,

00:48:28.734 --> 00:48:31.234
the only person who can access
the set of lists is yourself.

00:48:31.234 --> 00:48:32.901
woman: Is the person. Okay.

00:48:32.901 --> 00:48:34.901
Tattersall: Only private to you.
woman: All right, thanks.

00:48:34.901 --> 00:48:36.901
man: I noticed
in all of your examples,

00:48:36.901 --> 00:48:39.400
the PUTs have all
of the attributes of the task,

00:48:39.400 --> 00:48:42.400
but some of them are immutable,
so are they--can you--

00:48:42.400 --> 00:48:46.234
is there any, um, need
to specify those?

00:48:50.567 --> 00:48:52.734
Schlup: No, there's--no.
man: Okay, so you--

00:48:52.734 --> 00:48:54.567
Schlup: There's no need
to specify them.

00:48:54.567 --> 00:48:56.400
man: Partial updates are fine.
Schlup: Yeah.

00:48:56.400 --> 00:48:58.400
man: And I'm just curious
why--did you make

00:48:58.400 --> 00:49:00.400
a conscious decision
not to include client data,

00:49:00.400 --> 00:49:03.334
like maybe one private field
or one custom field?

00:49:03.334 --> 00:49:06.334
Or, why did you choose to leave
out custom fields altogether?

00:49:06.334 --> 00:49:08.667
Tattersall: There was the
question, are we gonna include

00:49:08.667 --> 00:49:11.167
custom fields at some point?
man: Yes, I guess that's it.

00:49:11.167 --> 00:49:13.701
Tattersall: It's a Labs API, so
we're gonna want to treat it

00:49:13.701 --> 00:49:16.167
on your feedback, so we know
it's a use case, basically.

00:49:16.167 --> 00:49:18.167
Schlup: We just tried
to focus, with version 1,

00:49:18.167 --> 00:49:20.667
to get out there what we have
available in GMAIL today

00:49:20.667 --> 00:49:22.501
and go--take it from there.

00:49:22.501 --> 00:49:24.334
man: It wasn't really
a criticism.

00:49:24.334 --> 00:49:26.667
I just--I was interested
in the thought process

00:49:26.667 --> 00:49:30.167
as much as, um, as much
as anything else. Thanks.

00:49:30.167 --> 00:49:32.000
Tattersall: Hey.

00:49:32.000 --> 00:49:35.000
man: Hi, um, I-I was wondering

00:49:35.000 --> 00:49:37.767
if, uh, the task

00:49:37.767 --> 00:49:40.634
has an associated e-mail,

00:49:40.634 --> 00:49:44.501
like when you select
the "More Actions" button,

00:49:44.501 --> 00:49:46.834
an associated task
with an e-mail,

00:49:46.834 --> 00:49:49.334
is that, that way now
in the API?

00:49:49.334 --> 00:49:52.334
Tattersall: So the--when you
create a task from the e-mail,

00:49:52.334 --> 00:49:54.334
can you get the e-mail thing?
man: Yeah.

00:49:54.334 --> 00:49:56.834
Tattersall: So, yeah, it's not
included in the API right now,

00:49:56.834 --> 00:49:58.834
but we're gonna be
bringing it out soon.

00:49:58.834 --> 00:50:00.667
man: Okay, and the other
question is,

00:50:00.667 --> 00:50:03.667
Since this task API
supports OAuth,

00:50:03.667 --> 00:50:08.000
um, is, uh, can we ask
Google Apps administrator

00:50:08.000 --> 00:50:13.000
access, uh, like,
all domains users task

00:50:13.000 --> 00:50:16.234
by--on behalf of them?

00:50:16.234 --> 00:50:18.634
Garnier: Uh, yeah, so we--

00:50:18.634 --> 00:50:21.167
the API do support
two-legged OAuth,

00:50:21.167 --> 00:50:23.501
so, yes, the administrator can--

00:50:23.501 --> 00:50:26.501
I mean, if he's
an administrator for,

00:50:26.501 --> 00:50:29.200
um, apps for
your business domain,

00:50:29.200 --> 00:50:31.033
yeah, he can access, you know,

00:50:31.033 --> 00:50:32.868
using the two-legged
OAuth mechanism,

00:50:32.868 --> 00:50:36.400
all the tasks from all his,
you know, users.

00:50:36.400 --> 00:50:40.334
man: Thank you.
Garnier: Yep, thank you.

00:50:40.334 --> 00:50:42.300
Tattersall: Are there
any more questions?

00:50:42.300 --> 00:50:45.467
Garnier: Yeah, I think
that's it. Last chance.

00:50:45.467 --> 00:50:48.968
We're gonna... [laughs]
We're gonna wrap it up.

00:50:48.968 --> 00:50:50.801
Tattersall: Did anyone get
an implementation running

00:50:50.801 --> 00:50:52.801
during the session,
or was I too, uh--

00:50:52.801 --> 00:50:55.300
Garnier: It's cool. We had
no hard questions. Thanks.

00:50:55.300 --> 00:50:57.467
Tattersall: Well, thank you
very much for coming, guys.

00:50:57.467 --> 00:50:59.467
Garnier: [speaking indistinctly]
No. [laughs]

00:50:59.467 --> 00:51:01.534
Tattersall: Yeah, thank you
very much for coming,

00:51:01.534 --> 00:51:03.400
uh, and have
a great journey home.

00:51:03.400 --> 00:51:06.000
I hope you enjoyed I/O, and
enjoy your new tablets, as well.

00:51:06.000 --> 00:51:08.334
They're coming, yes.
Garnier: Thank you very much.

