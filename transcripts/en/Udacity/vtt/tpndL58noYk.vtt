WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
This is the solution to homework 3.

00:00:02.000 --> 00:00:05.000
Homework 3 was basically built the shell of the blog.

00:00:05.000 --> 00:00:08.000
This is my local blog running on this local machine.

00:00:08.000 --> 00:00:13.000
If you recall, I wanted you to make a URL that would list some blog posts.

00:00:13.000 --> 00:00:18.000
Then I wanted you to make another URL, new post, which allows you to enter a new post.

00:00:18.000 --> 00:00:22.000
And posts have a subject which you enter there and a body that we enter here.

00:00:22.000 --> 00:00:25.000
Then when we submit this page, we get redirected to a permalink--

00:00:25.000 --> 00:00:28.000
a permalink is just a link to a specific post.

00:00:28.000 --> 00:00:33.000
In this case, it's /2, which is the ID of this blog entry.

00:00:33.000 --> 00:00:38.000
Then if we were to go back to just blog, we would see all of our blog posts.

00:00:38.000 --> 00:00:41.000
Actually, not all of our blog posts--the ten most recent blog posts

00:00:41.000 --> 00:00:43.000
sorted with the newest one first.

00:00:43.000 --> 00:00:46.000
Let me show you the code that I wrote to make this work.

00:00:46.000 --> 00:00:48.000
Here we are in the main source file.

00:00:48.000 --> 00:00:51.000
This is the source file I've been working from for all of these homeworks.

00:00:51.000 --> 00:00:54.000
A lot of this should look familiar. We've got the template-loading code here.

00:00:54.000 --> 00:00:56.000
That just basically says I'm going to have a directory called "templates,"

00:00:56.000 --> 00:00:58.000
and we're going to put those templates in there.

00:00:58.000 --> 00:01:01.000
Again I know we haven't discussed templates specifically in this class,

00:01:01.000 --> 00:01:04.000
because they're not required, but it does make life a little bit easier

00:01:04.000 --> 00:01:06.000
when you start generating more and more HTML.

00:01:06.000 --> 00:01:08.000
I'll walk you through all the templates that I've used.

00:01:08.000 --> 00:01:13.000
I've got my main handler I call bloghandler, and this adds just a few convenience functions.

00:01:13.000 --> 00:01:15.000
We've seen these before--write and render_str and render.

00:01:15.000 --> 00:01:18.000
Write just keeps me from having to type self.response.out all the time.

00:01:18.000 --> 00:01:22.000
Render_str takes a template name and some dictionary, basically, of parameters--

00:01:22.000 --> 00:01:24.000
things to substitute into the template.

00:01:24.000 --> 00:01:28.000
Render calls write and render_str to print out a template.

00:01:28.000 --> 00:01:30.000
Here is homework 1's solution.

00:01:30.000 --> 00:01:32.000
Now we get down to the actual solution here.

00:01:32.000 --> 00:01:34.000
A couple things I've had to do.

00:01:34.000 --> 00:01:38.000
This function--we didn't talk about this in the lecture--this is for the datastore.

00:01:38.000 --> 00:01:41.000
Basically, when you store things in Google's datastore, they need to have

00:01:41.000 --> 00:01:44.000
some sort of--well, they don't have to have a parent,

00:01:44.000 --> 00:01:47.000
but for organizing the data I found it's convenient to have a parent.

00:01:47.000 --> 00:01:50.000
This basically defines this is the blog key.

00:01:50.000 --> 00:01:53.000
This is going to be the value of the blog's parent.

00:01:53.000 --> 00:01:56.000
The parent is normally another element, but in our case we just give it a key for an element

00:01:56.000 --> 00:01:58.000
that doesn't even exist.

00:01:58.000 --> 00:02:01.000
I've kind of set the stage here for having multiple blogs

00:02:01.000 --> 00:02:03.000
even though we're not going to do that in this course.

00:02:03.000 --> 00:02:06.000
It takes a name parameter. By default the name just equals default.

00:02:06.000 --> 00:02:09.000
Here we get to something that you probably have to do,

00:02:09.000 --> 00:02:12.000
which is define the actual post entry or define the post class.

00:02:12.000 --> 00:02:18.000
Basically, all the this is is a list of the properties that a blog has or a blog entry has.

00:02:18.000 --> 00:02:21.000
It has a subject, which is a string property. It's required.

00:02:21.000 --> 00:02:25.000
It has content, which is a text property, which is required.

00:02:25.000 --> 00:02:29.000
Remember the difference between a string property and a text property is a string property

00:02:29.000 --> 00:02:34.000
has to be less than 500 characters, and text properties can be greater than 500 characters.

00:02:34.000 --> 00:02:37.000
Also, a string property can be indexed while a text property cannot.

00:02:37.000 --> 00:02:39.000
In theory I could have used text properties for both of these.

00:02:39.000 --> 00:02:41.000
I tried to stick to what was most appropriate, which would be

00:02:41.000 --> 00:02:43.000
which would be string for the subject and text for the body.

00:02:43.000 --> 00:02:47.000
Text also can have new lines in it, which obviously you want in a blog entry.

00:02:47.000 --> 00:02:49.000
Then we've got two time stamps.

00:02:49.000 --> 00:02:54.000
The first one is a date-time property of when the blog entry was created.

00:02:54.000 --> 00:02:59.000
This parameter auto<u>now</u>add basically says automatically make this property

00:02:59.000 --> 00:03:05.000
the current time when you create an object, so we don't have to set it, which is really convenient.

00:03:05.000 --> 00:03:08.000
Even more convenient is this auto_now function.

00:03:08.000 --> 00:03:13.000
What this does is every time we update the objects,

00:03:13.000 --> 00:03:18.000
it sets this property, last_mod, to be the time that we just updated an entry.

00:03:18.000 --> 00:03:21.000
If we were listing our blog, and we wanted to sort by creation time but also display

00:03:21.000 --> 00:03:24.000
when the last time they were updated.

00:03:24.000 --> 00:03:27.000
This property would let us do that and with this auto_now parameter equal True,

00:03:27.000 --> 00:03:31.000
the Google datastore will keep that property up-to-date, which is pretty handy.

00:03:31.000 --> 00:03:34.000
Now, I've added a function on the post object called render,

00:03:34.000 --> 00:03:38.000
which will basically render that blog entry.

00:03:38.000 --> 00:03:40.000
One thing it does is we're going to be rendering this in HTML

00:03:40.000 --> 00:03:43.000
but the user doesn't type in HTML for the most part.

00:03:43.000 --> 00:03:46.000
We want them to just be able to type in text with new lines in the text field,

00:03:46.000 --> 00:03:48.000
but we want to render it with a bunch of new lines.

00:03:48.000 --> 00:03:54.000
What this does is this replaces new lines in the input next into HTML line breaks.

00:03:54.000 --> 00:03:58.000
If we didn't do this--actually, I'll go ahead and show you want it looks like if we don't do this.

00:03:58.000 --> 00:04:02.000
I'm just going to comment out the rest of this line where we replace new lines with line breaks

00:04:02.000 --> 00:04:04.000
and then we'll see how this works in the browser.

00:04:04.000 --> 00:04:10.000
I've entered a basic blog entry--a little subject and some contents with multiple lines in it.

00:04:10.000 --> 00:04:13.000
I'm going to go ahead and submit this blog entry, and you can see that it

00:04:13.000 --> 00:04:16.000
brought us to this page--we see my subject and we see my body,

00:04:16.000 --> 00:04:19.000
and the contents of the blog entry are all on one line.

00:04:19.000 --> 00:04:22.000
Remember, this is because HTML takes all white space,

00:04:22.000 --> 00:04:26.000
spaces and new lines and tabs, and merges them into one space.

00:04:26.000 --> 00:04:28.000
That's all we get is one space.

00:04:28.000 --> 00:04:31.000
If we were to look at the source for this file,

00:04:31.000 --> 00:04:34.000
we'll see that the contents are actually rendered with multiple lines

00:04:34.000 --> 00:04:37.000
just like I typed them in the HTML, but when the browser renders that HTML,

00:04:37.000 --> 00:04:39.000
we just get the one line.

00:04:39.000 --> 00:04:42.000
The way we fix that is we replace all those new lines with line breaks.

00:04:42.000 --> 00:04:45.000
Let's go ahead and give this a whirl again with this string replacement on.

00:04:45.000 --> 00:04:49.000
I'll reload the page, and we see our new lines appear as we intended.

00:04:49.000 --> 00:04:54.000
If we look at the source, we can see that we've replaced our new lines with line breaks.

00:04:54.000 --> 00:04:57.000
That's what's causing our blog to display nicely.

00:04:57.000 --> 00:05:01.000
Now, we cold require the user to enter in actual line breaks as their typing the blog entry,

00:05:01.000 --> 00:05:03.000
but that's a little tedious.

00:05:03.000 --> 00:05:05.000
Although I still want them to be able to put other HTML in.

00:05:05.000 --> 00:05:07.000
Blogs have links and that sort of thing.

00:05:07.000 --> 00:05:10.000
It just makes it slightly easier. You didn't have to do this.

00:05:10.000 --> 00:05:13.000
I just wanted to show you how all that works.

