WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.370
FRANCIS MA: [INAUDIBLE].

00:00:01.370 --> 00:00:02.720
Good afternoon.

00:00:02.720 --> 00:00:04.220
How's everybody doing
here today?

00:00:04.220 --> 00:00:04.960
AUDIENCE: Good.

00:00:04.960 --> 00:00:05.330
FRANCIS MA: Excellent.

00:00:05.330 --> 00:00:08.930
You guys enjoying your Pixels,
the Chromebook?

00:00:08.930 --> 00:00:11.010
You've had time to play
around with it?

00:00:11.010 --> 00:00:12.000
Excellent.

00:00:12.000 --> 00:00:13.810
So my name is Francis,
Francis Ma.

00:00:13.810 --> 00:00:15.180
I'm one of the product managers
on the Google+

00:00:15.180 --> 00:00:16.800
platform team.

00:00:16.800 --> 00:00:17.980
CHRIS CARTLAND: My name's
Chris Cartland.

00:00:17.980 --> 00:00:20.500
And I'm a developer programs
engineer working on the

00:00:20.500 --> 00:00:22.050
Google+ platform.

00:00:22.050 --> 00:00:23.350
FRANCIS MA: And today, we're
going to be talking about

00:00:23.350 --> 00:00:25.870
cross-platform auth with
Google+ Sign-In.

00:00:25.870 --> 00:00:27.690
So just before we start,
I just want to

00:00:27.690 --> 00:00:28.820
gauge the crowd here.

00:00:28.820 --> 00:00:32.640
How many of you guys have
a cross-platform app?

00:00:32.640 --> 00:00:34.920
For example, you build
on Android and web,

00:00:34.920 --> 00:00:37.500
maybe iOS and web both.

00:00:37.500 --> 00:00:37.885
All right.

00:00:37.885 --> 00:00:38.180
CHRIS CARTLAND: Mostly hands.

00:00:38.180 --> 00:00:39.480
FRANCIS MA: There's a good
number of you, yeah.

00:00:39.480 --> 00:00:40.370
Excellent.

00:00:40.370 --> 00:00:44.210
So today, we're going to
be talking about--

00:00:44.210 --> 00:00:46.250
first, we're going to cover
auth, give you an overview of

00:00:46.250 --> 00:00:47.720
Google+ Sign-In.

00:00:47.720 --> 00:00:50.720
We're going to talk about how
this relates to your server

00:00:50.720 --> 00:00:51.740
and where auth comes in.

00:00:51.740 --> 00:00:53.970
We're going to go through the
various auth models of how you

00:00:53.970 --> 00:00:57.690
integrate this on the client
side, on the server side.

00:00:57.690 --> 00:00:59.760
And then lastly, we're going
to be taking questions.

00:00:59.760 --> 00:01:02.770
And for the audience who are
watching on our live stream,

00:01:02.770 --> 00:01:07.450
we have a Q&amp;A set up so that you
can also submit questions.

00:01:07.450 --> 00:01:11.110
And we also have the link at
the bottom of the slides so

00:01:11.110 --> 00:01:16.000
you guys can have the
URL as we go along.

00:01:16.000 --> 00:01:17.630
CHRIS CARTLAND: So let's start
talking about auth.

00:01:17.630 --> 00:01:20.130
I've been working a lot with
different applications to help

00:01:20.130 --> 00:01:21.600
integrate Google+ Sign-In.

00:01:21.600 --> 00:01:24.400
And I've realized that people
spend a lot of time talking

00:01:24.400 --> 00:01:25.960
about auth.

00:01:25.960 --> 00:01:28.690
And that's because it's really
important to get right.

00:01:28.690 --> 00:01:30.700
And in the next half hour, we're
going to try and make

00:01:30.700 --> 00:01:34.450
sure we can save you a lot of
time by explaining how to do

00:01:34.450 --> 00:01:37.580
auth correctly in your
cross-platform applications

00:01:37.580 --> 00:01:38.890
with Google+.

00:01:38.890 --> 00:01:41.120
So the first thing is that auth
is really talking about

00:01:41.120 --> 00:01:42.300
two different things.

00:01:42.300 --> 00:01:44.360
One of them is authentication.

00:01:44.360 --> 00:01:47.300
And that's knowing
who a user is.

00:01:47.300 --> 00:01:48.820
The second one is
authorization.

00:01:48.820 --> 00:01:51.110
And that's actually having
permission to do something.

00:01:51.110 --> 00:01:54.050
And in our case, it means having
something to do with

00:01:54.050 --> 00:01:56.070
Google, permission
to do something.

00:01:56.070 --> 00:01:58.740
So an example is I
have a California

00:01:58.740 --> 00:02:00.420
identification in my pocket.

00:02:00.420 --> 00:02:03.470
And if I showed that to anyone,
that would be pretty

00:02:03.470 --> 00:02:06.430
convincing to say that
I am Chris Cartland.

00:02:06.430 --> 00:02:08.720
However, if I showed up at
Moscone Center and tried to

00:02:08.720 --> 00:02:11.750
get in today to Google I/O, they
wouldn't let me in just

00:02:11.750 --> 00:02:13.130
with my identification.

00:02:13.130 --> 00:02:14.505
Because that doesn't
prove that I'm

00:02:14.505 --> 00:02:16.520
authorized to be here.

00:02:16.520 --> 00:02:19.830
And what I need instead is to
have my Google I/O badge.

00:02:19.830 --> 00:02:21.110
And that is my authorization.

00:02:21.110 --> 00:02:23.820
It says that I have permission
to do something with Google.

00:02:23.820 --> 00:02:26.540
And so there's a difference
between the two of them.

00:02:26.540 --> 00:02:29.170
And it's good to know that
when you're talking about

00:02:29.170 --> 00:02:31.590
authentication, which is knowing
who a user is, and

00:02:31.590 --> 00:02:36.410
authorization, which is having
access to do something.

00:02:36.410 --> 00:02:39.920
FRANCIS MA: So building your own
auth is really difficult.

00:02:39.920 --> 00:02:43.140
And that's something that we
don't recommend you do.

00:02:43.140 --> 00:02:46.820
You have to worry about things
like how you transport this--

00:02:46.820 --> 00:02:48.840
if [? users ?] to send your
password, are you sending it

00:02:48.840 --> 00:02:50.300
over an encrypted tunnel?

00:02:50.300 --> 00:02:51.780
How do you store it?

00:02:51.780 --> 00:02:53.720
Do you salt it, hash it?

00:02:53.720 --> 00:02:56.210
And also, sometimes maybe
just having one

00:02:56.210 --> 00:02:57.330
password is not enough.

00:02:57.330 --> 00:02:59.460
And you've got to worry
about 2-factor auth.

00:02:59.460 --> 00:03:01.680
And then lastly, a lot
of times, users

00:03:01.680 --> 00:03:02.700
forget their passwords.

00:03:02.700 --> 00:03:04.490
And I do that all the time.

00:03:04.490 --> 00:03:07.230
And it is something that you
definitely don't want to have

00:03:07.230 --> 00:03:09.970
to deal with in terms
of providing

00:03:09.970 --> 00:03:11.420
the customer support.

00:03:11.420 --> 00:03:15.680
So we encourage you not to
build your own auth.

00:03:15.680 --> 00:03:21.740
And oftentimes, when you don't
get this right, a lot of bad

00:03:21.740 --> 00:03:23.230
things can happen.

00:03:23.230 --> 00:03:26.120
For example, this is
not how you want to

00:03:26.120 --> 00:03:28.760
make headline news.

00:03:28.760 --> 00:03:30.860
So whenever you're thinking
about implementing your own

00:03:30.860 --> 00:03:34.770
auth, think about the
difficulties that you may

00:03:34.770 --> 00:03:37.270
potentially have run into
and the ramifications

00:03:37.270 --> 00:03:39.500
of getting it wrong.

00:03:39.500 --> 00:03:40.570
CHRIS CARTLAND: Fortunately,
you can

00:03:40.570 --> 00:03:42.670
use an identity provider.

00:03:42.670 --> 00:03:44.970
You want to do this because
it's easier for you.

00:03:44.970 --> 00:03:47.700
You don't have to do all the
hard things that Francis just

00:03:47.700 --> 00:03:49.180
talked about.

00:03:49.180 --> 00:03:51.680
It's also easier for your user
because they don't have to

00:03:51.680 --> 00:03:54.350
remember more passwords.

00:03:54.350 --> 00:03:56.830
So additionally, when you use
an identity provider you can

00:03:56.830 --> 00:04:00.210
often use features of those
specific platforms in order to

00:04:00.210 --> 00:04:02.440
make your app better.

00:04:02.440 --> 00:04:04.370
And we think this is a better
way to reach your goal.

00:04:04.370 --> 00:04:07.150
So we really recommend not to
build your own authentication

00:04:07.150 --> 00:04:10.050
and to use someone else
to do it for you.

00:04:10.050 --> 00:04:12.130
FRANCIS MA: So one such
provider is Google.

00:04:12.130 --> 00:04:13.845
A couple months ago, we launched
Google+ Sign-In.

00:04:16.730 --> 00:04:21.100
And with that, we handle
auth for you.

00:04:21.100 --> 00:04:25.150
Now, in addition to taking the
burdens off your hand, we have

00:04:25.150 --> 00:04:26.870
hundreds of millions
of users across

00:04:26.870 --> 00:04:28.050
all of Google services--

00:04:28.050 --> 00:04:32.130
things like Gmail, YouTube,
Android, and such--

00:04:32.130 --> 00:04:34.980
so that as an authentication
provider, your users don't

00:04:34.980 --> 00:04:36.700
have to create a new
account and you can

00:04:36.700 --> 00:04:38.680
delegate that to us.

00:04:38.680 --> 00:04:42.730
Secondly, we make it easy by
providing a lot of client

00:04:42.730 --> 00:04:46.850
libraries and SDKs so that you
don't have to worry about the

00:04:46.850 --> 00:04:47.570
nitty-gritties.

00:04:47.570 --> 00:04:49.580
And we handle a lot
of that for you.

00:04:49.580 --> 00:04:53.100
And lastly is by integrating
Google+ Sign-In, you also

00:04:53.100 --> 00:04:56.990
unlock the benefits of the
Google+ platform, from things

00:04:56.990 --> 00:04:59.590
like helping you drive
distribution, if you are an

00:04:59.590 --> 00:05:03.030
Android developer with our
over-the-air install feature;

00:05:03.030 --> 00:05:06.590
driving user engagement through
interactive posts; and

00:05:06.590 --> 00:05:08.750
writing app activities
to Google.

00:05:08.750 --> 00:05:10.310
So let's take a look
at how this works.

00:05:14.380 --> 00:05:16.380
CHRIS CARTLAND: So everything
with Google+ Sign-In is based

00:05:16.380 --> 00:05:17.370
on OAuth 2.0.

00:05:17.370 --> 00:05:22.290
And so this is a protocol that
allows a user to give some

00:05:22.290 --> 00:05:24.920
access to their account with
Google without giving you

00:05:24.920 --> 00:05:25.510
everything.

00:05:25.510 --> 00:05:28.070
So there's no password
sharing.

00:05:28.070 --> 00:05:29.610
There's scoped access.

00:05:29.610 --> 00:05:32.260
So you not only don't have to
share a password, but you

00:05:32.260 --> 00:05:36.070
don't have to give up your
entire life to an app just to

00:05:36.070 --> 00:05:37.590
let them do something.

00:05:37.590 --> 00:05:39.020
And this access is revocable.

00:05:39.020 --> 00:05:42.420
So it's a good security model in
case access does get in the

00:05:42.420 --> 00:05:44.580
wrong hands.

00:05:44.580 --> 00:05:47.420
In order to set up OAuth, you
need to start with the Google

00:05:47.420 --> 00:05:49.050
API console.

00:05:49.050 --> 00:05:50.710
And this is where you
set up a project.

00:05:50.710 --> 00:05:54.760
A project is the place where
all of your app starts.

00:05:54.760 --> 00:05:57.300
So you have your branding
information there, which is

00:05:57.300 --> 00:06:00.240
your name and a photo, so that
a user knows who they're

00:06:00.240 --> 00:06:02.210
authorizing.

00:06:02.210 --> 00:06:06.820
And within this one project, you
may have multiple clients.

00:06:06.820 --> 00:06:09.440
And that means you have
an Android app, an iOS

00:06:09.440 --> 00:06:11.440
app, and a web app.

00:06:11.440 --> 00:06:13.620
And with each of those, you need
to give Google a little

00:06:13.620 --> 00:06:16.440
bit of information so we know
where your app lives.

00:06:16.440 --> 00:06:19.390
So on Android and iOS and web,
you provide a little piece of

00:06:19.390 --> 00:06:20.340
information.

00:06:20.340 --> 00:06:23.350
And that all exists in one
project that a user is going

00:06:23.350 --> 00:06:25.270
to authorize.

00:06:25.270 --> 00:06:27.570
FRANCIS MA: So one of the key
things we definitely want you

00:06:27.570 --> 00:06:31.540
to take away with is that
setting up this project is

00:06:31.540 --> 00:06:32.920
very important.

00:06:32.920 --> 00:06:36.280
Having the right structure with
the top-level project and

00:06:36.280 --> 00:06:41.000
your clients underneath that
tells us this is your service.

00:06:41.000 --> 00:06:44.920
And relating to auth, this is
important because when a user

00:06:44.920 --> 00:06:48.130
signs in with Google and grants
consent to your app,

00:06:48.130 --> 00:06:50.960
you're granting consent to
your service, not just a

00:06:50.960 --> 00:06:51.980
specific client--

00:06:51.980 --> 00:06:55.310
not just to your Android app,
to your web app, or whatnot.

00:06:55.310 --> 00:06:56.560
It's about the whole thing.

00:06:56.560 --> 00:07:01.470
And yesterday, in the Android
keynote, Hugo announced the

00:07:01.470 --> 00:07:04.860
cross-platform single sign-on,
the notion that when a user

00:07:04.860 --> 00:07:08.740
signs in on the web, they get
automatically signed in on

00:07:08.740 --> 00:07:10.010
Android as well.

00:07:10.010 --> 00:07:13.300
So this is very important
to set up correctly.

00:07:13.300 --> 00:07:14.550
Keep that in mind.

00:07:20.370 --> 00:07:23.520
So now let's look at where
auth comes in to your

00:07:23.520 --> 00:07:24.120
architecture.

00:07:24.120 --> 00:07:26.580
Now, many of you are probably
familiar with this, where you

00:07:26.580 --> 00:07:29.110
have a client server
and Google.

00:07:29.110 --> 00:07:31.820
With auth, you need to think
about all three of these

00:07:31.820 --> 00:07:34.590
lines, whether it's
from connecting

00:07:34.590 --> 00:07:35.920
your client to Google--

00:07:35.920 --> 00:07:38.090
how do we know this is
really your client--

00:07:38.090 --> 00:07:40.820
from having your server
connected to Google, and also

00:07:40.820 --> 00:07:44.580
between your client and
your own server.

00:07:44.580 --> 00:07:47.320
So let's start by looking
at client-side auth.

00:07:47.320 --> 00:07:50.780
So to do client auth, it's
really about how you connect

00:07:50.780 --> 00:07:53.250
your client with Google
and making direct

00:07:53.250 --> 00:07:55.300
API calls from there.

00:07:55.300 --> 00:07:57.520
We're going to be walking
through how you do that over

00:07:57.520 --> 00:08:01.530
Android, iOS, and web.

00:08:01.530 --> 00:08:03.740
So starting with Android--

00:08:03.740 --> 00:08:06.490
on Android, we have Google Play
services, which is an

00:08:06.490 --> 00:08:11.030
extension of the Google Play
platform on Android for you to

00:08:11.030 --> 00:08:13.410
integrate with Google
services.

00:08:13.410 --> 00:08:17.310
With that, we've embedded all
the logic you need to handle

00:08:17.310 --> 00:08:19.730
auth so that you don't have
to worry about it.

00:08:19.730 --> 00:08:22.650
For you as a developer, all you
need is to integrate the

00:08:22.650 --> 00:08:26.610
client library, and we will deal
with the auth from there.

00:08:26.610 --> 00:08:29.680
And the good news about Google
Play services API is that it's

00:08:29.680 --> 00:08:32.870
available from Android
2.2 and up.

00:08:32.870 --> 00:08:34.900
So that for you as a developer,
you can have

00:08:34.900 --> 00:08:38.600
confidence that this API is
going to be there in a

00:08:38.600 --> 00:08:41.570
consistent manner, no matter
what version of Android the

00:08:41.570 --> 00:08:44.410
user is using.

00:08:44.410 --> 00:08:45.830
CHRIS CARTLAND: So let's
get started.

00:08:45.830 --> 00:08:48.730
Basically what we're trying to
do is get the user into a

00:08:48.730 --> 00:08:49.980
state where they
are connected.

00:08:49.980 --> 00:08:52.450
We'll come back to this diagram
in a moment, so don't

00:08:52.450 --> 00:08:54.780
worry too much about it.

00:08:54.780 --> 00:08:58.650
First of all, everything fits
into what would typically be

00:08:58.650 --> 00:09:00.830
like an activity lifecycle.

00:09:00.830 --> 00:09:01.370
onCreate--

00:09:01.370 --> 00:09:03.230
you need to create
the PlusClient.

00:09:03.230 --> 00:09:05.400
This is the object that
interacts with Google Play

00:09:05.400 --> 00:09:08.770
services and does all of
the hard work for you.

00:09:08.770 --> 00:09:09.590
onStart--

00:09:09.590 --> 00:09:11.840
you need to ask it to connect.

00:09:11.840 --> 00:09:12.715
And of course, onStop--

00:09:12.715 --> 00:09:15.700
you need it to disconnect, to
clean up the connection.

00:09:15.700 --> 00:09:17.880
And in the middle, while the
app is running, a user may

00:09:17.880 --> 00:09:21.000
need to click a sign-in button
in order to get started.

00:09:21.000 --> 00:09:24.630
We provide a button for you
in this button layout.

00:09:24.630 --> 00:09:28.200
And what's really nice is that
this is localized into the

00:09:28.200 --> 00:09:30.010
user's preferred speaking
language.

00:09:30.010 --> 00:09:31.830
So you don't have
to do that work.

00:09:36.160 --> 00:09:38.800
When your app tries to connect,
one of two things is

00:09:38.800 --> 00:09:39.610
going to happen.

00:09:39.610 --> 00:09:43.320
Either it's going to succeed,
and we call onConnected.

00:09:43.320 --> 00:09:44.300
And in that case, you're done.

00:09:44.300 --> 00:09:45.880
And you can already know
who the user is.

00:09:45.880 --> 00:09:47.960
It's very easy.

00:09:47.960 --> 00:09:49.820
The other option is that
it's going to fail.

00:09:49.820 --> 00:09:52.225
And that happens for a
number of reasons.

00:09:52.225 --> 00:09:55.010
Either the user hasn't chosen
an account yet.

00:09:55.010 --> 00:09:57.710
Maybe the user hasn't authorized
your app yet.

00:09:57.710 --> 00:10:00.580
And there can be many states in
there where a user hasn't

00:10:00.580 --> 00:10:03.560
quite fully authorized your
app and signed in.

00:10:03.560 --> 00:10:06.270
And so we just store that
failure because that means the

00:10:06.270 --> 00:10:09.290
user is not quite ready
to work with you yet.

00:10:09.290 --> 00:10:12.130
Now, when a user clicks the
sign-in button, that's when

00:10:12.130 --> 00:10:14.040
you try and actually
complete the steps

00:10:14.040 --> 00:10:17.270
necessary to sign in.

00:10:17.270 --> 00:10:19.820
You make sure that they clicked
the sign-in button,

00:10:19.820 --> 00:10:23.690
that we haven't already signed
in, and that we have a

00:10:23.690 --> 00:10:24.970
connection result.

00:10:24.970 --> 00:10:27.730
So this connection result was
that object be stored.

00:10:27.730 --> 00:10:30.650
And it contains an intent that
does everything that's

00:10:30.650 --> 00:10:32.770
necessary to get the
user signed in.

00:10:32.770 --> 00:10:34.980
You don't even have to worry
about what all those details

00:10:34.980 --> 00:10:37.620
are because Google Play
services handles

00:10:37.620 --> 00:10:39.645
all of that for you.

00:10:39.645 --> 00:10:41.500
The only thing you have to
do is ask Google Play

00:10:41.500 --> 00:10:42.580
services to do it.

00:10:42.580 --> 00:10:44.800
So we say mConnectionResult dot
startResolutionForResult.

00:10:47.810 --> 00:10:49.890
The user may go through a bunch
of steps through Google

00:10:49.890 --> 00:10:50.630
Play services.

00:10:50.630 --> 00:10:53.630
But once they've done whatever
they need to do,

00:10:53.630 --> 00:10:56.030
onActivityResult
will be called.

00:10:56.030 --> 00:10:58.780
And from there, you just have to
call Connect again with the

00:10:58.780 --> 00:10:59.850
PlusClient.

00:10:59.850 --> 00:11:05.010
And we expect this to trigger
the onConnected callback.

00:11:05.010 --> 00:11:09.180
So looking at this diagram
again, we start on onStart.

00:11:09.180 --> 00:11:11.420
And one of two things will
happen when we call Connect.

00:11:11.420 --> 00:11:15.210
Either we'll be connected and
finish, or it will fail.

00:11:15.210 --> 00:11:19.620
When we fail, that means we
store the connection result.

00:11:19.620 --> 00:11:21.560
And when the user clicks the
sign-in button, we try and

00:11:21.560 --> 00:11:22.180
resolve it.

00:11:22.180 --> 00:11:26.350
And there is a chance that
onActivityResult will go back

00:11:26.350 --> 00:11:27.480
to the failed state.

00:11:27.480 --> 00:11:29.410
And that's because the user
could have disconnected the

00:11:29.410 --> 00:11:33.420
app, or they could've changed
accounts on their device.

00:11:33.420 --> 00:11:36.090
But that's OK, because your
code already handles the

00:11:36.090 --> 00:11:37.330
resolution for that.

00:11:37.330 --> 00:11:39.330
And Google Play services is set
up to make sure that this

00:11:39.330 --> 00:11:41.880
is as easy as possible.

00:11:41.880 --> 00:11:42.760
FRANCIS MA: So we just
looked at how you

00:11:42.760 --> 00:11:44.120
can do that on Android.

00:11:44.120 --> 00:11:46.450
We also have that for
iOS, as well.

00:11:46.450 --> 00:11:49.780
Now, iOS is a little bit
different, where we handle all

00:11:49.780 --> 00:11:53.000
the auth logic for you in
the form of an SDK.

00:11:53.000 --> 00:11:57.500
So for you as a developer, you
can get our Google+ iOS SDK

00:11:57.500 --> 00:11:59.040
and integrate that
with your app.

00:11:59.040 --> 00:12:02.830
And we, again, handle
the auth for you.

00:12:02.830 --> 00:12:04.680
CHRIS CARTLAND: So on
iOS, we need to set

00:12:04.680 --> 00:12:07.220
up the sign-in object.

00:12:07.220 --> 00:12:10.480
So we set your client ID, which
is how Google knows

00:12:10.480 --> 00:12:12.020
which app you are.

00:12:12.020 --> 00:12:13.660
You can also specify
your scopes.

00:12:13.660 --> 00:12:16.960
And we say that we're going to
fetch the Google user ID.

00:12:16.960 --> 00:12:19.370
This is the fastest way for
us to actually just know

00:12:19.370 --> 00:12:20.960
who the user is.

00:12:20.960 --> 00:12:25.060
We set the sign-in delegate to
whatever's going to implement

00:12:25.060 --> 00:12:27.640
the GPPSignInDelegate
protocol.

00:12:27.640 --> 00:12:31.860
And that means that it will
call the object when it's

00:12:31.860 --> 00:12:33.780
completed the auth.

00:12:33.780 --> 00:12:35.395
The sign-in button's
really easy in iOS.

00:12:35.395 --> 00:12:37.340
You actually don't have
to write any code.

00:12:37.340 --> 00:12:40.720
You just have to add a button
to your view, change the

00:12:40.720 --> 00:12:42.900
custom class to GPPSignIn.

00:12:42.900 --> 00:12:46.250
And then the SDK takes care of
the rest, which also localizes

00:12:46.250 --> 00:12:50.920
the sign-in button to the
user's local language.

00:12:50.920 --> 00:12:53.060
You can always use
your own button.

00:12:53.060 --> 00:12:54.650
And if you do that, you should
follow our branding

00:12:54.650 --> 00:12:57.510
guidelines, which we have
in our documentation.

00:12:57.510 --> 00:13:02.250
And then you need to explicitly
call GPPSignIn

00:13:02.250 --> 00:13:04.250
sharedInstance authenticate.

00:13:04.250 --> 00:13:07.750
And that's because if you've
made your own button, the iOS

00:13:07.750 --> 00:13:11.660
SDK that Google provides cannot
handle it without you.

00:13:11.660 --> 00:13:16.100
So once you call that, though,
you will sign in the user,

00:13:16.100 --> 00:13:19.690
which takes the user to Google
to complete the authorization

00:13:19.690 --> 00:13:22.060
and authentication steps.

00:13:22.060 --> 00:13:26.670
When that's done, Google will
open your app with a URL with

00:13:26.670 --> 00:13:28.970
a custom scheme.

00:13:28.970 --> 00:13:30.040
And you need to handle
that URL.

00:13:30.040 --> 00:13:34.510
So this is where you typically
handle incoming URLs.

00:13:34.510 --> 00:13:38.100
And what we provide for
you is GPPURLHandler.

00:13:38.100 --> 00:13:39.970
And this is great because
it looks at the URL.

00:13:39.970 --> 00:13:42.770
It first figures out,
was this coming in

00:13:42.770 --> 00:13:45.350
from a signed-in user?

00:13:45.350 --> 00:13:48.290
If it is, it will return,
yes, it is.

00:13:48.290 --> 00:13:53.150
And it will also call
Finished with Auth.

00:13:53.150 --> 00:13:54.870
And it will give you all
the authentication

00:13:54.870 --> 00:13:55.740
information you need.

00:13:55.740 --> 00:13:57.190
It'll store everything
in the SDK.

00:13:57.190 --> 00:13:58.140
And you'll be ready to go.

00:13:58.140 --> 00:14:01.640
From there, you can just call
GPPSignIn sharedInstance to

00:14:01.640 --> 00:14:05.890
get information like
the user ID.

00:14:05.890 --> 00:14:08.260
FRANCIS MA: So we've covered
Android and iOS.

00:14:08.260 --> 00:14:10.240
For web, it's even easier.

00:14:10.240 --> 00:14:12.990
All you need to do is include
our JavaScript client onto

00:14:12.990 --> 00:14:16.370
your page and add the Google+
Sign-In button.

00:14:16.370 --> 00:14:20.170
And we'll handle the user auth
with a click of a button.

00:14:20.170 --> 00:14:23.700
And for you, you just have to
handle the auth callback.

00:14:23.700 --> 00:14:25.245
So let's take a look
at how this works.

00:14:25.245 --> 00:14:26.870
CHRIS CARTLAND: So really easy--
we provide a sign-in

00:14:26.870 --> 00:14:27.770
button for you.

00:14:27.770 --> 00:14:29.440
Again, you put your client
ID in there so we

00:14:29.440 --> 00:14:31.580
know who you are.

00:14:31.580 --> 00:14:34.880
Then you just need to include
plusone.js, which is the

00:14:34.880 --> 00:14:38.616
JavaScript that is the common
JavaScript that you'll use for

00:14:38.616 --> 00:14:43.000
the +1 button or for
other widgets.

00:14:43.000 --> 00:14:45.400
When the user has
authenticated,

00:14:45.400 --> 00:14:47.420
you will get a callback.

00:14:47.420 --> 00:14:50.760
And in that callback, you
will get an auth result.

00:14:50.760 --> 00:14:53.650
If the auth result has an access
token, which is a sign

00:14:53.650 --> 00:14:56.550
that they have information
that gives you access to

00:14:56.550 --> 00:14:58.650
Google, then you know that
they're authorized.

00:14:58.650 --> 00:15:01.190
And you can immediately start
making API calls.

00:15:01.190 --> 00:15:03.100
You actually don't even need
to look at the access token

00:15:03.100 --> 00:15:05.480
other than just to make sure
it's there, because the

00:15:05.480 --> 00:15:09.570
JavaScript library already uses
the tokens as necessary

00:15:09.570 --> 00:15:13.330
in order to make API calls.

00:15:13.330 --> 00:15:15.490
FRANCIS MA: So we've talked
about client-side auth.

00:15:15.490 --> 00:15:18.620
Now let's take a look
at how you do this

00:15:18.620 --> 00:15:20.280
on the server side.

00:15:20.280 --> 00:15:22.650
So with server auth, it's about
connecting the server

00:15:22.650 --> 00:15:23.690
with Google.

00:15:23.690 --> 00:15:28.015
Now when you have multiple
clients, oftentimes you would

00:15:28.015 --> 00:15:30.130
have back-end servers so you can
put a lot of your business

00:15:30.130 --> 00:15:32.510
logic in there so you don't have
to replicate it across

00:15:32.510 --> 00:15:33.670
your clients.

00:15:33.670 --> 00:15:35.840
Now, doing that--

00:15:35.840 --> 00:15:37.430
the good side is you don't
have to replicate it.

00:15:37.430 --> 00:15:40.190
But it is a little bit trickier
when it comes to

00:15:40.190 --> 00:15:43.450
auth, because now you have to
authenticate your client and

00:15:43.450 --> 00:15:45.240
server and then now also

00:15:45.240 --> 00:15:48.360
authenticate server with Google.

00:15:48.360 --> 00:15:50.736
So let's take a look
at how we do that.

00:15:50.736 --> 00:15:52.030
CHRIS CARTLAND: Let's
start with iOS.

00:15:52.030 --> 00:15:54.970
In this one, we're going to just
send the access token to

00:15:54.970 --> 00:15:55.530
your server.

00:15:55.530 --> 00:15:57.470
So this is the piece of
information that we need to

00:15:57.470 --> 00:16:00.040
get from the client, which has
already done all the steps

00:16:00.040 --> 00:16:02.230
we've talked about earlier.

00:16:02.230 --> 00:16:04.260
And we need to get that
information to your server.

00:16:04.260 --> 00:16:07.390
So make sure that you send
these tokens securely.

00:16:07.390 --> 00:16:09.990
And that's because they
are bearer tokens.

00:16:09.990 --> 00:16:13.430
Anyone who has them has
information about the user and

00:16:13.430 --> 00:16:16.150
can act on behalf in any
way that your app is

00:16:16.150 --> 00:16:17.380
authorized to do so.

00:16:17.380 --> 00:16:19.280
So make sure that you
don't lose those.

00:16:19.280 --> 00:16:20.930
Send them securely.

00:16:20.930 --> 00:16:22.870
Also, keep in mind that
these access tokens

00:16:22.870 --> 00:16:24.990
only last one hour.

00:16:24.990 --> 00:16:27.030
And they will expire.

00:16:27.030 --> 00:16:30.540
So design your app
accordingly.

00:16:30.540 --> 00:16:32.740
On Android, you can
do the same thing.

00:16:32.740 --> 00:16:37.230
You can get the access token
from GoogleAuthUtil.

00:16:37.230 --> 00:16:38.570
Again, send it securely.

00:16:38.570 --> 00:16:42.190
Make sure that your server
cannot [INAUDIBLE] these in

00:16:42.190 --> 00:16:45.310
order to protect your users.

00:16:45.310 --> 00:16:48.690
Once you have sent this token
to your server, you need to

00:16:48.690 --> 00:16:50.500
verify that access token.

00:16:50.500 --> 00:16:51.450
There's two things
you need to know.

00:16:51.450 --> 00:16:54.240
First, did this token
come from Google?

00:16:54.240 --> 00:16:56.290
If it didn't, then you
shouldn't be doing

00:16:56.290 --> 00:16:57.880
anything with it.

00:16:57.880 --> 00:17:01.600
Second is to make sure that
it is issued to you.

00:17:01.600 --> 00:17:04.680
The reason this is important
is if someone else were to

00:17:04.680 --> 00:17:09.579
send a Google access token for
their app to your server, they

00:17:09.579 --> 00:17:14.859
could sign in users to your
app without a user ever

00:17:14.859 --> 00:17:16.130
actually using your app.

00:17:16.130 --> 00:17:18.230
So you need to make sure that
you've checked that the client

00:17:18.230 --> 00:17:22.599
ID that you've set up in the API
console matches what you

00:17:22.599 --> 00:17:23.800
get from this token.

00:17:23.800 --> 00:17:27.760
And all this comes from the
token info endpoint, which you

00:17:27.760 --> 00:17:29.010
can see here.

00:17:32.660 --> 00:17:34.470
So that was sending
access tokens.

00:17:34.470 --> 00:17:37.590
Additionally, we have this
one-time code that you can

00:17:37.590 --> 00:17:39.120
send to your server.

00:17:39.120 --> 00:17:41.380
So it's very similar code.

00:17:41.380 --> 00:17:43.300
It's just a string.

00:17:43.300 --> 00:17:44.880
And you also want to send
that to your server.

00:17:44.880 --> 00:17:46.840
There's advantages here.

00:17:46.840 --> 00:17:48.690
The code can only be used
by your server.

00:17:48.690 --> 00:17:51.390
It is not a bearer token.

00:17:51.390 --> 00:17:54.840
This code can also get
an access token

00:17:54.840 --> 00:17:56.770
and a refresh token.

00:17:56.770 --> 00:17:58.270
Access tokens last one hour.

00:17:58.270 --> 00:18:00.770
Refresh tokens don't expire.

00:18:00.770 --> 00:18:04.620
So using this one-time code that
you send to your server,

00:18:04.620 --> 00:18:05.950
it's both more secure--

00:18:05.950 --> 00:18:08.460
because even if that code was
intercepted, it's useless to

00:18:08.460 --> 00:18:10.440
anybody except for you.

00:18:10.440 --> 00:18:12.770
And then secondly, you can get
a refresh token, which means

00:18:12.770 --> 00:18:20.030
your server can have access even
when the user is offline.

00:18:20.030 --> 00:18:23.270
On the web, we really recommend
sending the code.

00:18:23.270 --> 00:18:27.310
So you get the string from
the auth result--

00:18:27.310 --> 00:18:28.480
really easy.

00:18:28.480 --> 00:18:29.620
Send that to your server.

00:18:29.620 --> 00:18:32.960
You get all the benefits of
security as well as having the

00:18:32.960 --> 00:18:36.980
refresh token to
make API calls.

00:18:36.980 --> 00:18:39.650
When you get this code on your
server, you again need to do

00:18:39.650 --> 00:18:40.670
something with it.

00:18:40.670 --> 00:18:45.080
In this case, you just
exchange that code.

00:18:45.080 --> 00:18:47.410
Exchanging that code will give
you an access token.

00:18:47.410 --> 00:18:51.590
And if you ask for offline
access, you will also get a

00:18:51.590 --> 00:18:53.140
refresh token.

00:18:53.140 --> 00:18:56.230
This is really easy because our
client libraries take care

00:18:56.230 --> 00:18:58.060
of this for you.

00:18:58.060 --> 00:18:58.820
Like in Ruby--

00:18:58.820 --> 00:19:00.880
authorization.fe
tch_access_token.

00:19:00.880 --> 00:19:03.330
Credentials, you just
exchange code.

00:19:03.330 --> 00:19:04.880
Client, authenticate
with a code.

00:19:04.880 --> 00:19:07.520
So these are all just
one line, very easy.

00:19:07.520 --> 00:19:10.450
And our library will take care
of the exchange for you.

00:19:10.450 --> 00:19:13.010
And from there, you also again
don't have to worry about

00:19:13.010 --> 00:19:14.770
dealing with the access token
or refresh token.

00:19:14.770 --> 00:19:16.950
Because the library
does that for you.

00:19:16.950 --> 00:19:19.820
This is fully available
in our Quick Starts.

00:19:19.820 --> 00:19:22.820
You can pick your language and
have it running in 10 minutes.

00:19:22.820 --> 00:19:25.900
It's really easy.

00:19:25.900 --> 00:19:30.220
So looking at ways to enable
server-side auth--

00:19:30.220 --> 00:19:33.290
depending on which platform
you have, you can

00:19:33.290 --> 00:19:34.080
do different things.

00:19:34.080 --> 00:19:37.330
So all of them have
an access token.

00:19:37.330 --> 00:19:40.660
You can always just send that
string from your client to

00:19:40.660 --> 00:19:41.760
your server.

00:19:41.760 --> 00:19:43.940
You need to make sure you do it
securely because you really

00:19:43.940 --> 00:19:46.610
don't want anybody to
intercept those.

00:19:46.610 --> 00:19:48.560
But once you do that, then
you know who they are.

00:19:48.560 --> 00:19:52.780
And you'll be able to use that
token to make API requests.

00:19:52.780 --> 00:19:55.500
The better thing, if you can do
it, is to use the one-time

00:19:55.500 --> 00:19:56.800
code exchange.

00:19:56.800 --> 00:19:59.820
And that is not available
on iOS.

00:19:59.820 --> 00:20:03.630
Just this week, we are launching
it on Android.

00:20:03.630 --> 00:20:07.300
So you can get that code and
send it to your server.

00:20:07.300 --> 00:20:10.020
And of course, you
can do it on web.

00:20:10.020 --> 00:20:13.560
And of course, the code is more
secure, and you can get

00:20:13.560 --> 00:20:14.810
the refresh token.

00:20:17.450 --> 00:20:20.310
FRANCIS MA: So now that you've
looked at how you integrate

00:20:20.310 --> 00:20:22.980
auth across multiple platforms,
another thing to

00:20:22.980 --> 00:20:26.990
think about is oftentimes,
you're doing this because you

00:20:26.990 --> 00:20:30.260
already have an existing
auth system.

00:20:30.260 --> 00:20:33.240
And there are more things to
think about in that scenario

00:20:33.240 --> 00:20:36.660
for things like how do you
merge the user accounts.

00:20:36.660 --> 00:20:38.830
For example, if you already
have your own login and

00:20:38.830 --> 00:20:41.590
password, when a user comes in
and signs in with Google

00:20:41.590 --> 00:20:43.880
instead, you probably don't
want to create a brand-new

00:20:43.880 --> 00:20:45.110
user account.

00:20:45.110 --> 00:20:48.050
And instead, you would want to
take that and merge it so that

00:20:48.050 --> 00:20:49.770
they're not starting
from scratch.

00:20:49.770 --> 00:20:52.890
Now, our colleague Ian had
given a talk about this

00:20:52.890 --> 00:20:54.310
earlier in the day.

00:20:54.310 --> 00:20:57.450
And his session will be
available through YouTube and

00:20:57.450 --> 00:20:58.510
the archive as well.

00:20:58.510 --> 00:21:02.880
So be sure to check that out
if that applies for you.

00:21:02.880 --> 00:21:04.320
CHRIS CARTLAND: So what
did we just cover?

00:21:04.320 --> 00:21:05.290
We actually covered a lot.

00:21:05.290 --> 00:21:09.480
So we covered that you don't
want to build your own

00:21:09.480 --> 00:21:10.630
authentication system.

00:21:10.630 --> 00:21:12.625
That should be obvious,
especially if you went to Tim

00:21:12.625 --> 00:21:14.860
Bray's talk.

00:21:14.860 --> 00:21:16.590
Google+ makes authentication
easy.

00:21:16.590 --> 00:21:20.340
We've actually just shown you
how to do it on Android, how

00:21:20.340 --> 00:21:23.640
to do it on iOS, how to do it
on the web, and how to get

00:21:23.640 --> 00:21:26.760
information from each of
those to your server.

00:21:26.760 --> 00:21:29.030
We have code that shows you how
to deal with this on your

00:21:29.030 --> 00:21:32.400
server in five languages.

00:21:32.400 --> 00:21:37.280
You can take those and just use
it and run it immediately.

00:21:37.280 --> 00:21:41.790
All this is available in our
Quick Starts, which will take

00:21:41.790 --> 00:21:44.300
you 10 minutes to run.

00:21:44.300 --> 00:21:48.000
If you want to see a larger
application that kind of puts

00:21:48.000 --> 00:21:49.190
all the pieces together--

00:21:49.190 --> 00:21:52.740
it runs on Android, it runs on
iOS, and it runs on the web--

00:21:52.740 --> 00:21:55.570
you can take a look at
PhotoHunt, which is our big

00:21:55.570 --> 00:21:57.345
application that shows you kind
of how everything will

00:21:57.345 --> 00:21:58.680
fit together.

00:21:58.680 --> 00:22:00.910
This is available on
our website at

00:22:00.910 --> 00:22:02.160
developers.google.com/+.

00:22:04.000 --> 00:22:06.560
And we also have additional
code available on

00:22:06.560 --> 00:22:08.940
github.com/googleplus.

00:22:08.940 --> 00:22:11.410
And this will do things like--
there's a bunch of samples

00:22:11.410 --> 00:22:14.250
that we just released today
that will show you how to

00:22:14.250 --> 00:22:18.520
verify the tokens that
you send from

00:22:18.520 --> 00:22:20.850
your app to your server.

00:22:20.850 --> 00:22:23.890
So really, no matter which
platform you're coming from,

00:22:23.890 --> 00:22:26.290
you'll be able to bring
authentication and

00:22:26.290 --> 00:22:30.690
authorization all together in
one place and really make your

00:22:30.690 --> 00:22:33.260
application run everywhere that
your users want to be.

00:22:36.360 --> 00:22:37.090
FRANCIS MA: All right.

00:22:37.090 --> 00:22:38.500
Thanks for coming out.

00:22:38.500 --> 00:22:41.180
And we can take questions,
live questions here.

00:22:41.180 --> 00:22:47.334
And we'll also go on the live
Q&amp;A on the internet.

00:22:47.334 --> 00:22:47.822
Thank you.

00:22:47.822 --> 00:22:53.190
[APPLAUSE]

00:22:53.190 --> 00:22:54.180
AUDIENCE: Should I
go first, then?

00:22:54.180 --> 00:22:54.404
FRANCIS MA: All right.

00:22:54.404 --> 00:22:55.500
We have somebody here.

00:22:55.500 --> 00:22:57.380
AUDIENCE: So I just want to
make sure I understand the

00:22:57.380 --> 00:22:59.040
one-time token.

00:22:59.040 --> 00:23:00.770
So if my application--

00:23:00.770 --> 00:23:03.230
like say, if my Android
application--

00:23:03.230 --> 00:23:04.060
it requests--

00:23:04.060 --> 00:23:05.490
actually, let's start
with JavaScript.

00:23:05.490 --> 00:23:07.860
So do I need to change anything
in my JavaScript to

00:23:07.860 --> 00:23:10.190
indicate that I want a one-time
token that I'm going

00:23:10.190 --> 00:23:12.700
to exchange on my server
as opposed to a

00:23:12.700 --> 00:23:15.050
regular access token?

00:23:15.050 --> 00:23:18.440
And my second part of the
question is, if I do then

00:23:18.440 --> 00:23:21.400
exchange that token, my
server has the token.

00:23:21.400 --> 00:23:24.190
Do I need to then do something
application-specific on my

00:23:24.190 --> 00:23:28.840
server that passes back into,
say, my Android application,

00:23:28.840 --> 00:23:31.580
that then says, this is how I'm
authenticating between my

00:23:31.580 --> 00:23:34.320
server and my client,
essentially?

00:23:34.320 --> 00:23:36.150
Does that make sense
what I'm asking?

00:23:36.150 --> 00:23:40.210
Because I see that the server
then has a secure token that

00:23:40.210 --> 00:23:41.610
is only stored on the server.

00:23:41.610 --> 00:23:43.380
I'm not passing that
back and forth.

00:23:43.380 --> 00:23:44.710
But my client--

00:23:44.710 --> 00:23:48.960
if I disconnect, shut down the
app, and then come back, if

00:23:48.960 --> 00:23:50.760
I'm jumping back into the
server, the server needs to

00:23:50.760 --> 00:23:51.640
say, who are you?

00:23:51.640 --> 00:23:53.170
And I'm not asking them
to authenticate

00:23:53.170 --> 00:23:54.210
again at that point.

00:23:54.210 --> 00:23:54.600
Am I?

00:23:54.600 --> 00:23:56.720
Or can I trust--

00:23:56.720 --> 00:23:57.770
CHRIS CARTLAND: Yeah, so let's
start with the first one,

00:23:57.770 --> 00:23:58.800
because I can answer
that quickly.

00:23:58.800 --> 00:24:02.340
For JavaScript, the code
is just there.

00:24:02.340 --> 00:24:06.320
You have to ask for offline
access, which is a parameter

00:24:06.320 --> 00:24:08.290
in the button.

00:24:08.290 --> 00:24:10.600
And then the code will
be valid for

00:24:10.600 --> 00:24:11.960
getting a refresh token.

00:24:11.960 --> 00:24:14.370
The code is there even if you
don't ask for offline access.

00:24:14.370 --> 00:24:17.020
But it will just get you an
access token in that case.

00:24:17.020 --> 00:24:17.280
Sorry.

00:24:17.280 --> 00:24:19.230
So onto the second part
of your question.

00:24:19.230 --> 00:24:21.330
Can you try that
one more time?

00:24:21.330 --> 00:24:24.450
AUDIENCE: So let's say my
application, then, goes

00:24:24.450 --> 00:24:26.090
through the normal G+ sign-in.

00:24:26.090 --> 00:24:27.520
I request a token.

00:24:27.520 --> 00:24:30.360
I then go to send it to the
server, one-time token.

00:24:30.360 --> 00:24:31.900
The server exchanges it.

00:24:31.900 --> 00:24:35.520
And I've got an access
token on the server.

00:24:35.520 --> 00:24:36.910
My app, then--

00:24:36.910 --> 00:24:40.270
how does my server know that
it can trust the app?

00:24:40.270 --> 00:24:42.250
Because that one-time token
has expired, right?

00:24:42.250 --> 00:24:45.420
So I can't send that back
through and test it at Google

00:24:45.420 --> 00:24:46.310
and say, this is a valid?

00:24:46.310 --> 00:24:49.180
So my client disconnects.

00:24:49.180 --> 00:24:51.805
Do I just trust that the client
has authenticated and

00:24:51.805 --> 00:24:56.680
it's compiled Java code?

00:24:56.680 --> 00:24:58.490
CHRIS CARTLAND: So in that
connection where that code was

00:24:58.490 --> 00:25:02.553
sent, if you have a session of
some sort and you can know

00:25:02.553 --> 00:25:05.260
that that channel is the same
session, then once you've

00:25:05.260 --> 00:25:07.960
exchanged that code and it was
valid, you can trust all the

00:25:07.960 --> 00:25:10.790
information that was returned
from Google.

00:25:10.790 --> 00:25:15.410
Additionally, you know that that
session came from an app

00:25:15.410 --> 00:25:16.840
that was your app.

00:25:16.840 --> 00:25:19.360
Because that code won't work
unless it actually came from

00:25:19.360 --> 00:25:21.830
one of the clients that
Google set up.

00:25:21.830 --> 00:25:25.010
AUDIENCE: So it is sort of
application-specific?

00:25:25.010 --> 00:25:27.100
Every server-side library
will generate a

00:25:27.100 --> 00:25:28.430
session token for me.

00:25:28.430 --> 00:25:30.400
But that's happening in my app
that I need to then manage.

00:25:30.400 --> 00:25:34.120
CHRIS CARTLAND: So you have to
manage your own session there.

00:25:34.120 --> 00:25:37.880
If you don't have any sort of
sessions at all, and you need

00:25:37.880 --> 00:25:41.010
to send authentication
information with every

00:25:41.010 --> 00:25:44.940
request, what you can do
is use the ID token.

00:25:44.940 --> 00:25:47.610
We didn't actually cover
that in this talk.

00:25:47.610 --> 00:25:52.440
But one of the pieces of data
that you can get back on

00:25:52.440 --> 00:25:55.830
Android and the web
is an ID token.

00:25:55.830 --> 00:25:58.650
This can be sent along
with each request.

00:25:58.650 --> 00:26:02.490
And it can be very quickly
verified to know that it was

00:26:02.490 --> 00:26:04.650
from Google and that the
information contained within

00:26:04.650 --> 00:26:06.470
it is valid.

00:26:06.470 --> 00:26:08.880
And that will give
you the user ID.

00:26:08.880 --> 00:26:15.450
So the advantage of that is that
if you don't need to get

00:26:15.450 --> 00:26:18.330
the authorization information to
Google and you just need to

00:26:18.330 --> 00:26:21.590
authenticate that request
to your back

00:26:21.590 --> 00:26:25.060
end, you can offline--

00:26:25.060 --> 00:26:31.300
or if you have the assigned Java
web token that allows you

00:26:31.300 --> 00:26:34.640
to verify that it's real and
signed by Google and that it's

00:26:34.640 --> 00:26:36.190
for your app.

00:26:36.190 --> 00:26:41.010
You can take a look on
GitHub for how to

00:26:41.010 --> 00:26:43.110
validate the ID token.

00:26:43.110 --> 00:26:46.260
We have samples in all five
of our back end languages.

00:26:46.260 --> 00:26:48.330
AUDIENCE: So to clarify then--
so on my server, I would key

00:26:48.330 --> 00:26:51.470
in my database that I've got
this user ID in Google.

00:26:51.470 --> 00:26:53.520
And then from the client,
I send that token in.

00:26:53.520 --> 00:26:54.280
I validate it.

00:26:54.280 --> 00:26:55.710
And I come back and say,
this is the ID.

00:26:55.710 --> 00:26:57.940
And then I look up and say,
OK, now I've got this auth

00:26:57.940 --> 00:26:59.380
token and I can use
it effectively.

00:26:59.380 --> 00:27:00.090
That's basically--

00:27:00.090 --> 00:27:01.020
CHRIS CARTLAND: Yup,
that's right.

00:27:01.020 --> 00:27:01.955
AUDIENCE: Perfect.

00:27:01.955 --> 00:27:03.630
CHRIS CARTLAND: Yeah, thanks
for the question.

00:27:03.630 --> 00:27:04.730
FRANCIS MA: Another thing
to know, just to

00:27:04.730 --> 00:27:06.080
elaborate on that--

00:27:06.080 --> 00:27:09.410
one of our developer advocates,
Tim Bray, wrote an

00:27:09.410 --> 00:27:10.530
extensive article.

00:27:10.530 --> 00:27:14.510
It's called "How to Authenticate
Your Client with

00:27:14.510 --> 00:27:18.030
your Home Server." And this
is on the Android blog.

00:27:18.030 --> 00:27:20.550
And that also covers very
much in depth on

00:27:20.550 --> 00:27:21.500
what you just asked.

00:27:21.500 --> 00:27:23.450
CHRIS CARTLAND: I think
it's a blog post--

00:27:23.450 --> 00:27:26.030
"Verifying Back-End
Calls on Android."

00:27:26.030 --> 00:27:26.550
Something like that--

00:27:26.550 --> 00:27:28.550
I always get the name wrong.

00:27:28.550 --> 00:27:31.060
Let me look at one of the
questions on here.

00:27:31.060 --> 00:27:33.590
It says, "Can my application ask
the user's authorization

00:27:33.590 --> 00:27:36.680
to post or create a new item
in their Google+ stream?"

00:27:36.680 --> 00:27:41.080
So right now, our API, our REST
API, where you can just

00:27:41.080 --> 00:27:45.020
make post requests to it, does
not support writing directly

00:27:45.020 --> 00:27:46.120
to the stream.

00:27:46.120 --> 00:27:48.620
You can look at more at Google
Sign-In features, like app

00:27:48.620 --> 00:27:51.060
activity, which is a way
that you can actually

00:27:51.060 --> 00:27:53.160
write data to Google.

00:27:53.160 --> 00:27:54.730
Yeah, a live question.

00:27:54.730 --> 00:27:55.820
AUDIENCE: Yes.

00:27:55.820 --> 00:27:59.720
My question is, does the iOS
SDK integrate with existing

00:27:59.720 --> 00:28:01.490
Google+ app?

00:28:01.490 --> 00:28:06.570
Or is it like a web interface?

00:28:06.570 --> 00:28:10.060
Like for example, if you already
have the Google+ app

00:28:10.060 --> 00:28:12.150
like Facebook does
for [? use. ?]

00:28:12.150 --> 00:28:13.830
Switch to the Facebook app.

00:28:13.830 --> 00:28:16.850
It goes through the
OAuth token.

00:28:16.850 --> 00:28:20.310
And then you switch back to
your own application.

00:28:20.310 --> 00:28:22.800
FRANCIS MA: So with the iOS SDK,
if the user already has

00:28:22.800 --> 00:28:26.120
the Google+ app installed, we
will fast switch over to the

00:28:26.120 --> 00:28:29.250
Google+ app so that the user
doesn't have to retype their

00:28:29.250 --> 00:28:30.290
login and password.

00:28:30.290 --> 00:28:34.710
We use the logged-in user's
identity of the Google+ app.

00:28:34.710 --> 00:28:36.970
And then we just do the OAuth
connection there.

00:28:36.970 --> 00:28:39.830
But if the user doesn't have
the Google+ app installed,

00:28:39.830 --> 00:28:42.860
then we go to the browser.

00:28:42.860 --> 00:28:46.000
AUDIENCE: And is there any
chance that in the future, it

00:28:46.000 --> 00:28:49.010
will be integrated like a
Facebook or Twitter use now,

00:28:49.010 --> 00:28:52.020
or where they have like
a first-class

00:28:52.020 --> 00:28:53.760
integration with the iOS?

00:28:53.760 --> 00:28:56.380
Or you cannot comment on that?

00:28:56.380 --> 00:28:57.860
FRANCIS MA: We don't have
anything to announce at this

00:28:57.860 --> 00:28:59.260
time about that.

00:28:59.260 --> 00:28:59.820
CHRIS CARTLAND: But
we'd always like

00:28:59.820 --> 00:29:01.530
to make things better.

00:29:01.530 --> 00:29:04.720
We realize that right now, the
signing in experience is

00:29:04.720 --> 00:29:06.250
better on Android.

00:29:06.250 --> 00:29:07.210
But we'd always like to improve

00:29:07.210 --> 00:29:08.960
everything that we can.

00:29:08.960 --> 00:29:11.020
AUDIENCE: Thank you.

00:29:11.020 --> 00:29:14.320
CHRIS CARTLAND: Let's
see here.

00:29:14.320 --> 00:29:16.850
"Is there a difference between
a Google Apps for Business

00:29:16.850 --> 00:29:20.630
versus a Gmail user using
Google+ Sign-In a website/app?

00:29:20.630 --> 00:29:25.320
And can my website/app see if
that user is a Google Apps for

00:29:25.320 --> 00:29:26.820
Business user?"

00:29:26.820 --> 00:29:30.110
So Google Apps for Business
works just fine with Google+

00:29:30.110 --> 00:29:34.390
if the apps administrator
has Google+ turned on.

00:29:34.390 --> 00:29:36.320
So right now, it doesn't
work if the

00:29:36.320 --> 00:29:38.320
administrator turns that off.

00:29:38.320 --> 00:29:40.790
Other than that, once it's on,
you actually can't tell the

00:29:40.790 --> 00:29:44.850
difference between a user just
because they're a-- it's

00:29:44.850 --> 00:29:46.542
Google+ user.

00:29:46.542 --> 00:29:48.030
AUDIENCE: So does
that mean that--

00:29:48.030 --> 00:29:49.518
because I'm curious
about this, too.

00:29:49.518 --> 00:29:51.502
What if you are not a Google
Apps for Business?

00:29:51.502 --> 00:29:53.486
What if you're just a normal
Google user that has not

00:29:53.486 --> 00:29:54.974
turned on Google+?

00:29:54.974 --> 00:29:56.470
Can you still login
[INAUDIBLE]?

00:29:56.470 --> 00:29:57.125
CHRIS CARTLAND: Yeah,
so the ques--

00:29:57.125 --> 00:29:58.640
FRANCIS MA: Sorry, go ahead.

00:29:58.640 --> 00:30:02.120
To repeat the question
from the audience--

00:30:02.120 --> 00:30:05.850
the question was, if the user is
not already a Google+ user,

00:30:05.850 --> 00:30:07.870
can they use Google+ Sign-In?

00:30:07.870 --> 00:30:08.970
Is that correct?

00:30:08.970 --> 00:30:11.240
Yes, so the answer is, yes.

00:30:11.240 --> 00:30:15.570
As part of the sign-in flow,
if the user is not yet a

00:30:15.570 --> 00:30:19.250
Google+ user, we take them
through an upgrade flow where

00:30:19.250 --> 00:30:24.150
they do get to upgrade
as a Google+ user.

00:30:24.150 --> 00:30:30.490
And the process for that is
simply verifying their name so

00:30:30.490 --> 00:30:32.010
they have a Google+ profile.

00:30:32.010 --> 00:30:33.300
CHRIS CARTLAND: So we've written
the code that does

00:30:33.300 --> 00:30:35.460
that for you, like in Google
Play services.

00:30:35.460 --> 00:30:37.720
That takes you through
all the steps there.

00:30:37.720 --> 00:30:39.860
And on the web, we
do a quick flow.

00:30:39.860 --> 00:30:41.480
And then it takes you back.

00:30:41.480 --> 00:30:43.160
Same idea.

00:30:43.160 --> 00:30:44.530
Good question.

00:30:44.530 --> 00:30:45.200
Did you have something else?

00:30:45.200 --> 00:30:46.820
AUDIENCE: I have something about
this question, also.

00:30:46.820 --> 00:30:49.140
If a user cannot create a
Google+ account-- for example,

00:30:49.140 --> 00:30:51.600
if you do a game for the kids
and they cannot create Google+

00:30:51.600 --> 00:30:54.470
accounts because of the
age constraints.

00:30:54.470 --> 00:30:56.820
Is there a kind of fallback
scenario, that the user can

00:30:56.820 --> 00:30:59.440
just use the credentials from
Gmail or something like this?

00:30:59.440 --> 00:31:01.700
Because the identification
should work pretty much the

00:31:01.700 --> 00:31:05.940
same way like Google+.

00:31:05.940 --> 00:31:07.980
For the games, this will not
work, because the kids cannot

00:31:07.980 --> 00:31:09.890
create Google+ account.

00:31:09.890 --> 00:31:12.770
CHRIS CARTLAND: So you're asking
about accounts for

00:31:12.770 --> 00:31:15.410
people who don't meet the age
requirements to use Google+?

00:31:15.410 --> 00:31:15.780
AUDIENCE: Yes.

00:31:15.780 --> 00:31:18.985
So under 13 years old, you
cannot subscribe to Google+.

00:31:18.985 --> 00:31:21.310
So it means that for kids'
games, you cannot use

00:31:21.310 --> 00:31:22.930
this to sign in.

00:31:22.930 --> 00:31:26.350
CHRIS CARTLAND: So Google+
Sign-In won't work for people

00:31:26.350 --> 00:31:28.200
who cannot have a
Google+ account.

00:31:31.315 --> 00:31:34.080
AUDIENCE: Is there some
libraries which can work with

00:31:34.080 --> 00:31:36.955
just like Google authentication
without having

00:31:36.955 --> 00:31:38.820
Google+ account?

00:31:38.820 --> 00:31:40.560
Because authentication
mechanics are

00:31:40.560 --> 00:31:42.310
pretty much the same.

00:31:42.310 --> 00:31:45.670
OAuth is there and [INAUDIBLE]
is there.

00:31:45.670 --> 00:31:47.600
CHRIS CARTLAND: So like I say,
yeah, Google+ Sign-In does not

00:31:47.600 --> 00:31:50.760
work if a user can't have
a Google+ account.

00:31:50.760 --> 00:31:53.090
So we're restricted by that.

00:31:53.090 --> 00:31:56.950
FRANCIS MA: Part of the value
you get for integrating

00:31:56.950 --> 00:31:59.890
Google+ Sign-In is that you
also get to tap into the

00:31:59.890 --> 00:32:02.010
Google+ platform as well.

00:32:02.010 --> 00:32:04.970
So I've mentioned earlier, for
getting things like getting

00:32:04.970 --> 00:32:08.270
access to the user's social
graph, being able to post to

00:32:08.270 --> 00:32:11.670
Google+ with interactive posts,
and also using features

00:32:11.670 --> 00:32:13.920
like the over-the-air
app install.

00:32:13.920 --> 00:32:18.490
So that's the value you get
for using Google+ Sign-In.

00:32:18.490 --> 00:32:22.560
But that is very good point you
made, which is there is a

00:32:22.560 --> 00:32:27.010
set of users who may not be able
to upgrade and create a

00:32:27.010 --> 00:32:28.190
Google+ profile.

00:32:28.190 --> 00:32:31.120
And in that case, they
will not be able to

00:32:31.120 --> 00:32:32.230
sign in this way.

00:32:32.230 --> 00:32:33.860
AUDIENCE: Don't you think this
will be interesting to have

00:32:33.860 --> 00:32:36.070
like a limited set of API
which provides the

00:32:36.070 --> 00:32:39.880
authentication features but
not just Google+ features,

00:32:39.880 --> 00:32:42.880
which can be really beneficial
for the applications.

00:32:42.880 --> 00:32:45.360
But that's really strict from
posting [INAUDIBLE]

00:32:47.980 --> 00:32:50.070
[? plus ?] pages and
things like this.

00:32:50.070 --> 00:32:51.180
CHRIS CARTLAND: We're always
looking to make sure we can

00:32:51.180 --> 00:32:53.240
get more users to make
the system work.

00:32:53.240 --> 00:32:55.840
Like I said, it doesn't work
for apps users that have

00:32:55.840 --> 00:32:57.010
Google+ turned off.

00:32:57.010 --> 00:32:59.050
So there are these classes
of users that we can't

00:32:59.050 --> 00:33:01.070
quite use right now.

00:33:01.070 --> 00:33:04.030
But we think that we have a good
product for the ones that

00:33:04.030 --> 00:33:04.830
it does work for.

00:33:04.830 --> 00:33:09.430
Because we can do things like
cross-platform single sign-on.

00:33:09.430 --> 00:33:11.450
So like when you go to your
Android app, the onConnected

00:33:11.450 --> 00:33:14.120
callback is called
immediately.

00:33:14.120 --> 00:33:16.200
And those are things that
we can only do once

00:33:16.200 --> 00:33:17.940
everyone's in Google+.

00:33:17.940 --> 00:33:22.990
So we don't have everybody yet,
but we'd like to improve

00:33:22.990 --> 00:33:23.730
these situations.

00:33:23.730 --> 00:33:24.320
AUDIENCE: That's the
whole point.

00:33:24.320 --> 00:33:25.820
So you can't have
single sign-on

00:33:25.820 --> 00:33:27.080
without having Google+.

00:33:27.080 --> 00:33:30.200
Because authentication is there,
your Gmail and all

00:33:30.200 --> 00:33:31.430
other services.

00:33:31.430 --> 00:33:32.655
So you don't [INAUDIBLE]

00:33:32.655 --> 00:33:35.650
[? need ?] to have Google+
unless you really want to post

00:33:35.650 --> 00:33:37.500
on a Google+ page.

00:33:37.500 --> 00:33:41.710
So is there a way to split the
framework in two parts, like

00:33:41.710 --> 00:33:45.120
authentication part
and Google+ part?

00:33:45.120 --> 00:33:46.910
FRANCIS MA: Not at the moment
at this time, but that's a

00:33:46.910 --> 00:33:48.300
really good feedback.

00:33:48.300 --> 00:33:49.790
We'll take that back.

00:33:49.790 --> 00:33:51.910
Thank you.

00:33:51.910 --> 00:33:54.840
CHRIS CARTLAND: I'm going to
look at the question here.

00:33:54.840 --> 00:33:57.810
If you have multiple auth
systems, like you're a Django

00:33:57.810 --> 00:33:58.960
Auth user and Google+ Sign-In.

00:33:58.960 --> 00:34:01.975
Can I merge that account?" So
dealing with multiple accounts

00:34:01.975 --> 00:34:04.920
is something that Ian Barber's
talk talks about.

00:34:04.920 --> 00:34:09.440
It's actually-- he says using
Google+ Sign-In with other

00:34:09.440 --> 00:34:10.530
social sign--

00:34:10.530 --> 00:34:12.350
I forgot the title now.

00:34:12.350 --> 00:34:15.130
But that also deals with--
basically, you have different

00:34:15.130 --> 00:34:17.969
ways of authenticating a
user and how you keep

00:34:17.969 --> 00:34:19.770
all of those straight.

00:34:19.770 --> 00:34:22.469
So yeah, that would be a
good place to start.

00:34:22.469 --> 00:34:23.230
And I think he covered
that there.

00:34:23.230 --> 00:34:26.400
But basically, the idea is that
you do have to find some

00:34:26.400 --> 00:34:29.090
way that makes sense for the
user to merge different

00:34:29.090 --> 00:34:30.699
identities.

00:34:30.699 --> 00:34:32.634
And I don't know if you want
to add anything to that.

00:34:32.634 --> 00:34:34.659
FRANCIS MA: No, I think
that covers it.

00:34:34.659 --> 00:34:38.940
And the material will be posted
back on the Google I/O

00:34:38.940 --> 00:34:40.730
site for you guys to
look at after.

00:34:40.730 --> 00:34:43.310
So be sure to check that out.

00:34:43.310 --> 00:34:45.570
CHRIS CARTLAND: Cool.

00:34:45.570 --> 00:34:48.400
AUDIENCE: Actually, the
gentleman before me answered

00:34:48.400 --> 00:34:51.770
most of my questions but kind
of led to a new set of that.

00:34:51.770 --> 00:34:55.030
My big excitement this year is
all the push for education,

00:34:55.030 --> 00:34:56.340
like the next session
I'm going to.

00:34:56.340 --> 00:35:00.110
But what I just realized by his
question and your answers

00:35:00.110 --> 00:35:03.540
is that this whole Google+
authentication system is

00:35:03.540 --> 00:35:07.430
completely worthless in that
sector for that very reason.

00:35:07.430 --> 00:35:10.270
And I think maybe what he was
trying to ask and I'd like to

00:35:10.270 --> 00:35:14.690
ask is, does this have any
tie-in with the existing

00:35:14.690 --> 00:35:16.390
Google authentication system?

00:35:16.390 --> 00:35:19.350
Like if I open up Chrome and
I'm logged in, I get that

00:35:19.350 --> 00:35:21.170
little Sign-In As button.

00:35:21.170 --> 00:35:24.730
Or is that available to do
something like what this is

00:35:24.730 --> 00:35:29.940
doing for everyone that not
going to be old enough for G+?

00:35:29.940 --> 00:35:31.310
FRANCIS MA: So I think
there are two

00:35:31.310 --> 00:35:31.910
parts to your question.

00:35:31.910 --> 00:35:36.300
The first one is, how do you
address the class of users who

00:35:36.300 --> 00:35:39.130
are not able to participate
in G+?

00:35:39.130 --> 00:35:43.890
And as we discussed, yeah, that
is something that we're

00:35:43.890 --> 00:35:47.390
thinking about and to make
better over time.

00:35:47.390 --> 00:35:50.120
Now, the second question,
which was, hey, is this

00:35:50.120 --> 00:35:53.320
Google+ Sign-In built on
top of the existing

00:35:53.320 --> 00:35:54.510
authentication system?

00:35:54.510 --> 00:35:56.155
And the answer is yes, it is.

00:35:56.155 --> 00:36:00.530
It is built on top of the
existing Google auth system.

00:36:00.530 --> 00:36:05.125
We talked about using OAuth 2.0
and the standards there.

00:36:05.125 --> 00:36:06.380
AUDIENCE: It's not
just OAuth 2.0.

00:36:06.380 --> 00:36:10.840
And I can use that right now
for any Google user?

00:36:10.840 --> 00:36:11.280
FRANCIS MA: Yeah,
that's right.

00:36:11.280 --> 00:36:14.270
You can use that with
any Google user.

00:36:14.270 --> 00:36:14.460
That's right.

00:36:14.460 --> 00:36:15.180
AUDIENCE: Thank you.

00:36:15.180 --> 00:36:17.890
FRANCIS MA: You're welcome.

00:36:17.890 --> 00:36:18.440
CHRIS CARTLAND: All right.

00:36:18.440 --> 00:36:21.970
Next one here says, "If a user
updates his info like his

00:36:21.970 --> 00:36:24.500
email address on Google+, what
is the best practice to get

00:36:24.500 --> 00:36:28.720
notified about such a change
to update this info in the

00:36:28.720 --> 00:36:33.900
app?" So information to get
email is actually not part of

00:36:33.900 --> 00:36:34.980
the Google+ API.

00:36:34.980 --> 00:36:37.190
You can use a different OAuth
scope to get that.

00:36:37.190 --> 00:36:38.930
And it works just as well.

00:36:38.930 --> 00:36:41.970
You just add the userinfo.email
scope.

00:36:41.970 --> 00:36:44.690
And then from there, you make a
request to Google to get the

00:36:44.690 --> 00:36:45.680
email address.

00:36:45.680 --> 00:36:49.230
So if any of the information
in our API has changed, we

00:36:49.230 --> 00:36:51.710
don't actually have a
push system to tell

00:36:51.710 --> 00:36:52.920
you what that is.

00:36:52.920 --> 00:36:55.960
But you could call it again.

00:36:55.960 --> 00:36:57.690
FRANCIS MA: And I think
generally, it is a good

00:36:57.690 --> 00:37:01.640
practice to look at things
like your caching policy.

00:37:01.640 --> 00:37:03.460
It is possible that users
do change their

00:37:03.460 --> 00:37:05.140
information over time.

00:37:05.140 --> 00:37:10.070
And so for your app, it's good
that you go back and check it

00:37:10.070 --> 00:37:12.440
to make sure that you do have
the latest information.

00:37:15.260 --> 00:37:16.225
CHRIS CARTLAND: One last
question here.

00:37:16.225 --> 00:37:17.340
We're running out of time.

00:37:17.340 --> 00:37:19.990
AUDIENCE: Actually, my question
is quite similar

00:37:19.990 --> 00:37:24.600
with, it's a one-time code and
[INAUDIBLE] that he asked--

00:37:24.600 --> 00:37:25.170
very similar.

00:37:25.170 --> 00:37:29.610
So my question actually is,
for the iOS users, so that

00:37:29.610 --> 00:37:32.390
means the server cannot support
the offline sharing

00:37:32.390 --> 00:37:32.810
kind of things?

00:37:32.810 --> 00:37:33.180
CHRIS CARTLAND: Correct.

00:37:33.180 --> 00:37:34.870
Yeah, so from iOS, you
can't do that yet.

00:37:34.870 --> 00:37:38.230
And we'd like to think of ways
to make this better, but it's

00:37:38.230 --> 00:37:38.880
difficult right now.

00:37:38.880 --> 00:37:41.770
AUDIENCE: So is there like
a schedule for when

00:37:41.770 --> 00:37:43.420
we could have it?

00:37:43.420 --> 00:37:46.060
CHRIS CARTLAND: So we have some
technical limitations.

00:37:46.060 --> 00:37:47.010
Anyway, thanks for
your question.

00:37:47.010 --> 00:37:48.550
So we're actually out of time.

00:37:48.550 --> 00:37:52.210
But we'll be right out here
to answer any questions.

00:37:52.210 --> 00:37:53.840
You feel free to come
by and talk to us.

00:37:53.840 --> 00:37:55.010
But thank you so much.

00:37:55.010 --> 00:37:57.490
And enjoy the rest of I/O.

00:37:57.490 --> 00:37:58.740
FRANCIS MA: Thank you.

