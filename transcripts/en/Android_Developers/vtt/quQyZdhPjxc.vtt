WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.680
[MUSIC PLAYING]

00:00:07.680 --> 00:00:08.680
MAGNUS HYTTSTEN: Hello.

00:00:08.680 --> 00:00:10.320
My name is Magnus
Hyttsten, and I

00:00:10.320 --> 00:00:13.620
work on the Developers
Relation team here at Google.

00:00:13.620 --> 00:00:16.200
I'm going to talk about
the new, exciting API

00:00:16.200 --> 00:00:20.300
that we are launching called
the Google Drive Android API.

00:00:20.300 --> 00:00:22.640
Here's where I plan
to cover today.

00:00:22.640 --> 00:00:26.157
First of all, what is the
Google Drive Android API?

00:00:26.157 --> 00:00:27.990
Then I'm going to talk
about the features it

00:00:27.990 --> 00:00:31.780
has before I dig into two
very exciting ones, namely

00:00:31.780 --> 00:00:35.320
the transparent offline
syncing and the user interface

00:00:35.320 --> 00:00:36.350
component.

00:00:36.350 --> 00:00:39.750
And finally, I will talk about
how the Google Drive Android

00:00:39.750 --> 00:00:42.920
API relates to the
Storage Access Framework

00:00:42.920 --> 00:00:46.320
API released with KitKat.

00:00:46.320 --> 00:00:49.380
So first of all, what
is the Google Drive API?

00:00:49.380 --> 00:00:52.660
It's a native Android
API written in Java

00:00:52.660 --> 00:00:54.990
to access Google Drive content.

00:00:54.990 --> 00:00:58.510
At this time, you might ask,
has this not been done before?

00:00:58.510 --> 00:01:04.830
And the answer is yes, but
not as a native Android API.

00:01:04.830 --> 00:01:07.190
And this is very
important, because we

00:01:07.190 --> 00:01:09.650
have added a lot
of features that

00:01:09.650 --> 00:01:13.660
enables you to create shiny,
first-class Google Drive

00:01:13.660 --> 00:01:18.720
apps on Android even
without breaking a sweat.

00:01:18.720 --> 00:01:21.610
One feature that makes
this API very useful

00:01:21.610 --> 00:01:25.100
is that it incorporated
into Google Play services,

00:01:25.100 --> 00:01:28.430
a core part of the
Android device, so to say.

00:01:28.430 --> 00:01:31.660
And this has several
important benefits.

00:01:31.660 --> 00:01:34.150
First of all, this greatly
reduces the app size,

00:01:34.150 --> 00:01:35.200
which is perfect.

00:01:35.200 --> 00:01:38.260
Since it enables the app
to be downloaded faster,

00:01:38.260 --> 00:01:41.120
it does not need to
be updated as often.

00:01:41.120 --> 00:01:44.760
And it makes the app have a
smaller execution footprint.

00:01:44.760 --> 00:01:48.670
For example, it will not take up
as much memory, which is always

00:01:48.670 --> 00:01:50.920
a great thing, of course.

00:01:50.920 --> 00:01:53.780
But perhaps, an even
more exciting aspect

00:01:53.780 --> 00:01:56.070
of the Google Play
Services integration

00:01:56.070 --> 00:01:58.230
is that the API
will be compatible

00:01:58.230 --> 00:02:01.120
running on all devices
starting with Gingerbread.

00:02:01.120 --> 00:02:03.560
And this is no little
benefit as that

00:02:03.560 --> 00:02:06.980
will include 98% of the
Android devices out there.

00:02:06.980 --> 00:02:09.350
That means that you
can rest assured

00:02:09.350 --> 00:02:12.860
that this API can be used
by everyone out there.

00:02:12.860 --> 00:02:16.000
Just a tiny bit of devices
out there may not use it.

00:02:16.000 --> 00:02:19.210
But most of them will.

00:02:19.210 --> 00:02:22.010
And that brings us over to
the features of the API.

00:02:22.010 --> 00:02:23.680
So pretty much
everything you need

00:02:23.680 --> 00:02:25.990
to do to create a
great Google Drive app

00:02:25.990 --> 00:02:27.240
is included in the API.

00:02:27.240 --> 00:02:30.240
You can read, write,
update files and folders,

00:02:30.240 --> 00:02:33.830
traverse folder trees,
view and update metadata.

00:02:33.830 --> 00:02:36.130
There is a file
picker user interface.

00:02:36.130 --> 00:02:39.020
And you have transparent
offline syncing.

00:02:39.020 --> 00:02:42.080
So let's talk about that there's
a transparent offline syncing,

00:02:42.080 --> 00:02:43.320
to begin with.

00:02:43.320 --> 00:02:46.640
As you're aware, an Android
device is local storage,

00:02:46.640 --> 00:02:49.870
but Google Drive storage
resides in the cloud.

00:02:49.870 --> 00:02:52.740
Now, one little peculiar
thing about mobile devices

00:02:52.740 --> 00:02:57.320
is that you can never
trust network connectivity.

00:02:57.320 --> 00:02:59.970
It changes network
all the time, and it

00:02:59.970 --> 00:03:04.620
is very often so that it has
no network access at all.

00:03:04.620 --> 00:03:07.330
This makes storing things
in the cloud difficult.

00:03:07.330 --> 00:03:10.310
But not with the
Google Drive API,

00:03:10.310 --> 00:03:12.530
because the Google
Drive Android API,

00:03:12.530 --> 00:03:17.745
we make sure that your app will
never fail when it writes data.

00:03:17.745 --> 00:03:20.780
And should communication with
Google Drive not be possible,

00:03:20.780 --> 00:03:24.330
the API will temporarily
store data locally

00:03:24.330 --> 00:03:27.120
and later sync that
to Google Drive

00:03:27.120 --> 00:03:30.070
once connectivity has
been reestablished.

00:03:30.070 --> 00:03:33.770
For you as an Android developer,
this is, of course, great,

00:03:33.770 --> 00:03:36.440
because it takes all
the error management

00:03:36.440 --> 00:03:41.210
resulting from network
problems off your mind.

00:03:41.210 --> 00:03:44.160
Another great feature of
the Google Drive Android API

00:03:44.160 --> 00:03:46.280
is the user interface component.

00:03:46.280 --> 00:03:48.030
And in the first
release of the API,

00:03:48.030 --> 00:03:50.980
there is a folder and file
navigation and selector.

00:03:50.980 --> 00:03:53.560
This makes it really easy to
write an application where

00:03:53.560 --> 00:03:56.180
the user needs to
select folders or files.

00:03:56.180 --> 00:03:59.830
The only thing you need to do
is display this file picker.

00:03:59.830 --> 00:04:01.500
So how do you do that?

00:04:01.500 --> 00:04:03.720
Well, first of all,
you create an intent,

00:04:03.720 --> 00:04:06.990
which opens up the
file activity builder.

00:04:06.990 --> 00:04:10.800
Then the actual magic happens
when the intent is fired.

00:04:10.800 --> 00:04:14.050
The user will be able to select
the files or folders that they

00:04:14.050 --> 00:04:15.360
want.

00:04:15.360 --> 00:04:17.829
Once the user has
selected their files,

00:04:17.829 --> 00:04:21.190
the result will be available
in the onActivityResult method,

00:04:21.190 --> 00:04:23.080
as usual on Android.

00:04:23.080 --> 00:04:25.830
And finally, you get the
Drive ID for the content

00:04:25.830 --> 00:04:28.170
that you can work with.

00:04:28.170 --> 00:04:30.740
Finally, I would like to
say some words on the KitKat

00:04:30.740 --> 00:04:34.010
Storage API and how it relates
to the Google Drive Android

00:04:34.010 --> 00:04:35.370
API.

00:04:35.370 --> 00:04:38.040
Well, although both can
access and store information

00:04:38.040 --> 00:04:41.750
on Google Drive, there are some
fundamental design differences.

00:04:41.750 --> 00:04:46.070
The first one is that Google
Drive Android API only

00:04:46.070 --> 00:04:47.780
works with Google Drive.

00:04:47.780 --> 00:04:51.090
This allows Google to add
things to this API which

00:04:51.090 --> 00:04:53.140
are specific to Google Drive.

00:04:53.140 --> 00:04:57.110
On the other hand, the
Storage Access Framework

00:04:57.110 --> 00:04:58.770
is a generic API.

00:04:58.770 --> 00:05:01.870
And this enables it to work
with multiple different back-end

00:05:01.870 --> 00:05:04.740
storage technologies,
not only Google Drive,

00:05:04.740 --> 00:05:07.100
using a single interface.

00:05:07.100 --> 00:05:09.130
And here is a big difference.

00:05:09.130 --> 00:05:12.160
If you plan to do a very
tight and nice integration

00:05:12.160 --> 00:05:14.040
to work Google
Drive for your app,

00:05:14.040 --> 00:05:17.250
then Google Drive
Android API is perfect.

00:05:17.250 --> 00:05:19.820
Another feature
of Google Drive is

00:05:19.820 --> 00:05:21.920
that the developer
can safely assume

00:05:21.920 --> 00:05:25.410
that the user has already
signed into Google Drive.

00:05:25.410 --> 00:05:28.040
The Storage Access
Framework is excellent

00:05:28.040 --> 00:05:30.270
if your app needs to
access multiple storage

00:05:30.270 --> 00:05:33.070
technologies and not just Drive.

00:05:33.070 --> 00:05:34.780
And of course, having
said all of this,

00:05:34.780 --> 00:05:36.970
there is nothing
stopping you from using

00:05:36.970 --> 00:05:40.760
both at the same time,
of course-- All Google

00:05:40.760 --> 00:05:44.090
Drive-specific features as
well as a generic integration

00:05:44.090 --> 00:05:46.070
with other storage technologies.

00:05:46.070 --> 00:05:49.590
You should also be aware that
the Store Access Framework will

00:05:49.590 --> 00:05:53.569
only work on devices that
are ground in KitKat.

00:05:53.569 --> 00:05:55.610
And that's what I wanted
to present to you today.

00:05:55.610 --> 00:05:59.410
We are very excited to launch
the Google Drive Android

00:05:59.410 --> 00:06:01.950
API and the feature it contains.

00:06:01.950 --> 00:06:05.690
Now go out there and
create great apps

00:06:05.690 --> 00:06:08.560
using this Android
and Drive API.

00:06:08.560 --> 00:06:12.050
And don't forget to
tell us all about it.

