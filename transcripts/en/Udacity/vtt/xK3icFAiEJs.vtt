WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:02.020
Okay Michael, I have two quizzes for you. Okay?

00:00:02.020 --> 00:00:02.760
&gt;&gt; Yeah, yeah.

00:00:02.760 --> 00:00:06.710
&gt;&gt; Here's the first quiz, and here's the way it's set up.

00:00:06.710 --> 00:00:10.720
I want you to fill in the empty boxes of this table. Okay?

00:00:10.720 --> 00:00:11.210
&gt;&gt; Ooh.

00:00:11.210 --> 00:00:11.640
&gt;&gt; Got it.

00:00:11.640 --> 00:00:12.460
&gt;&gt; There's a lot of empty boxes.

00:00:12.460 --> 00:00:13.600
&gt;&gt; There's a lot of empty boxes.

00:00:13.600 --> 00:00:16.239
&gt;&gt; Okay, but Okay, let me make sure I understand what's going

00:00:16.239 --> 00:00:18.785
on here. So we're looking at

00:00:18.785 --> 00:00:20.830
three different algorithms that are learning algorithms.

00:00:20.830 --> 00:00:21.000
&gt;&gt; Yep.

00:00:21.000 --> 00:00:22.840
&gt;&gt; There's one One neural net

00:00:22.840 --> 00:00:24.140
&gt;&gt; No

00:00:24.140 --> 00:00:25.200
&gt;&gt; Okay, one nearest neighbor.

00:00:25.200 --> 00:00:25.440
&gt;&gt; Mm-hm

00:00:25.440 --> 00:00:27.620
&gt;&gt; K nearest neighbor and linear regression.

00:00:27.620 --> 00:00:28.680
&gt;&gt; Yep

00:00:28.680 --> 00:00:30.960
&gt;&gt; And for each one you want to know running time and space.

00:00:30.960 --> 00:00:31.213
&gt;&gt; Mm-hm.

00:00:31.213 --> 00:00:34.150
&gt;&gt; And this is on n points I assume, yeah, n

00:00:34.150 --> 00:00:36.700
sort, what does it mean for data points to be sorted?

00:00:36.700 --> 00:00:38.890
&gt;&gt; So let's assume we're living in a world where all

00:00:38.890 --> 00:00:42.050
of our data points are you know in r one. Okay.

00:00:42.050 --> 00:00:44.090
&gt;&gt; Oh okay that well that. That could be sorted.

00:00:44.090 --> 00:00:44.840
&gt;&gt; That could be. Yeah that could be

00:00:44.840 --> 00:00:46.670
sorted. And that you know we are going to be

00:00:46.670 --> 00:00:50.350
out putting some real numbers as well. So they're points on a, on a number line.

00:00:50.350 --> 00:00:53.800
So to make things simple for you. I'm going to

00:00:53.800 --> 00:00:55.920
say that the points that your given are already sorted.

00:00:55.920 --> 00:00:59.340
&gt;&gt; Oh ok alright. And yeah that makes sense. Its just

00:00:59.340 --> 00:01:01.940
a scaler. So then a query point is going to come in.

00:01:01.940 --> 00:01:05.040
And then its going to be some value. And were going to have

00:01:05.040 --> 00:01:08.481
to find the nearest neighbor or do the linear regression or whatever.

00:01:08.481 --> 00:01:08.710
&gt;&gt; Right.

00:01:08.710 --> 00:01:10.250
&gt;&gt; Alright now that's for running time. For

00:01:10.250 --> 00:01:13.720
now space your talking about the space of what.

00:01:13.720 --> 00:01:15.420
&gt;&gt; How much space you are going to have

00:01:15.420 --> 00:01:18.070
to do in order to accomplish your task. How much space

00:01:18.070 --> 00:01:20.670
you going to have to use in order to accomplish your task?

00:01:20.670 --> 00:01:22.810
&gt;&gt; So this is kind of like the the. The

00:01:22.810 --> 00:01:27.020
space that's representing the class enviro. Or the regression. After training.

00:01:27.020 --> 00:01:29.310
&gt;&gt; Yes. So actually that question

00:01:29.310 --> 00:01:30.750
about after training is important. You'll notice

00:01:30.750 --> 00:01:32.400
I've divided each of these algorithms

00:01:32.400 --> 00:01:34.870
into two phases. There's the learning phase.

00:01:34.870 --> 00:01:37.390
How much time it takes to learn. How much space you need to

00:01:37.390 --> 00:01:40.440
learn. Then there's the query phase. When I give you some new value and

00:01:40.440 --> 00:01:43.070
you have to output and answer. What's the running time for that

00:01:43.070 --> 00:01:45.550
and what are the space requirements for that? Okay? You got that?

00:01:45.550 --> 00:01:45.650
&gt;&gt; Yeah

00:01:45.650 --> 00:01:49.240
&gt;&gt; I want that for each one. Of these three algorithms.

00:01:49.240 --> 00:01:52.490
&gt;&gt; Except for one nearest neighbor which the, it appears

00:01:52.490 --> 00:01:54.440
as though you filled in for me to get me started.

00:01:54.440 --> 00:01:56.230
&gt;&gt; Right so just to get you started and make it easier for you know

00:01:56.230 --> 00:01:58.710
to know what I'm talking about. I'm talking about big o times here. Right. I'm

00:01:58.710 --> 00:02:02.420
not going to make you write out big o. Big o is implicit. So if we

00:02:02.420 --> 00:02:03.950
look at one nearest neighbor, and we

00:02:03.950 --> 00:02:05.730
ask well what's the running time of learning?

00:02:05.730 --> 00:02:09.530
Well, it's constant. Right? Because there's no learning.

00:02:09.530 --> 00:02:11.630
&gt;&gt; I see. You just take that sorted set of data

00:02:11.630 --> 00:02:14.450
points and you just pass it along through the query here.

00:02:14.450 --> 00:02:18.830
&gt;&gt; Right. Now, you could say that" Well, I'm going to

00:02:18.830 --> 00:02:20.930
take the data points or I'm going to copy them into this

00:02:20.930 --> 00:02:24.070
database," and so it's linear. But let's assume they already come in

00:02:24.070 --> 00:02:26.380
a data base, or some data structure that you can use, okay?

00:02:26.380 --> 00:02:27.140
&gt;&gt; Gotcha.

00:02:27.140 --> 00:02:29.480
&gt;&gt; Okay, so now that actually brings us

00:02:29.480 --> 00:02:30.980
to a nice little question about how much space,

00:02:30.980 --> 00:02:33.970
learning takes here. And, well because you have to store those points,

00:02:33.970 --> 00:02:37.300
and keep them around. The space requirements are big O of N.

00:02:37.300 --> 00:02:38.340
&gt;&gt; Yeah, that makes sense.

00:02:38.340 --> 00:02:40.800
&gt;&gt; Okay, good. So given that as an example. Do

00:02:40.800 --> 00:02:44.950
you think your one example in your data base. Mm, do

00:02:44.950 --> 00:02:48.240
you think you can use that to build up labels

00:02:48.240 --> 00:02:50.680
for all the rest of the phases of the different algorithms?

00:02:50.680 --> 00:02:51.620
&gt;&gt; Yeah, I think so.

00:02:51.620 --> 00:02:53.230
&gt;&gt; Okay, cool. Go for it.

