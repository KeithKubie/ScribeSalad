WEBVTT
Kind: captions
Language: en

00:00:08.970 --> 00:00:13.710
 Today is google's developer program Meiji Tanihara in Meiji 

00:00:12.900 --> 00:00:17.460
 is 

00:00:13.710 --> 00:00:21.840
 Today about fuses and locations and geofences 

00:00:17.460 --> 00:00:25.530
 The maps api v1 will be introduced together with the stand 

00:00:21.840 --> 00:00:29.550
 google maps android api v1 to is android 

00:00:25.530 --> 00:00:35.220
 It is an api that can be used by embedding google map in the app 

00:00:29.550 --> 00:00:41.860
 2d display was significantly improved from around v 1 by default 

00:00:35.220 --> 00:00:44.840
 It supports 360-degree rotation by gesture and also switches between map aerial photographs and 

00:00:41.860 --> 00:00:49.040
 It corresponds to the indoor map 

00:00:44.840 --> 00:00:50.060
 The ps location is provided by Google Play service is 

00:00:49.040 --> 00:00:55.610
 It is a function 

00:00:50.060 --> 00:01:02.449
 The main feature is that api is very easy to use 

00:00:55.610 --> 00:01:04.830
 Also, you can get location information anytime soon, yet the battery consumption of the app is minimized 

00:01:02.449 --> 00:01:10.830
 An app that can hold back 

00:01:04.830 --> 00:01:16.140
 From the direct use on the screen to the regular position in the background net background 

00:01:10.830 --> 00:01:23.250
 It has become api corresponding to a wide range of applications to obtain information 

00:01:16.140 --> 00:01:30.030
 The fence is an api for detecting intrusions into the circular area and the constitution. 

00:01:23.250 --> 00:01:32.520
 api is simple, but it is powerful as it can delete multiple upper variables registered in Ishido. 

00:01:30.030 --> 00:01:36.130
 Live implementation is now underground 

00:01:32.520 --> 00:01:43.190
 According to the distance from the current location to the area and the moving speed 

00:01:36.130 --> 00:01:48.700
 It is designed to reduce battery consumption by adjusting the frequency of location update 

00:01:43.190 --> 00:01:53.829
 Before we look at the actual usage, we will look at what the setup should do 

00:01:48.700 --> 00:01:58.310
 Both maps api and location client introduced this time 

00:01:53.829 --> 00:02:01.430
 It is included in the play service Izu client library 

00:01:58.310 --> 00:02:06.680
 If you are using Grades to build a projector 

00:02:01.430 --> 00:02:09.390
 Just add a line to the build. 

00:02:06.680 --> 00:02:14.010
 You can add a library 

00:02:09.390 --> 00:02:18.990
 If you are using Eclipse sdk directory 

00:02:14.010 --> 00:02:23.800
 Extract google google play service easlib project 

00:02:18.990 --> 00:02:28.240
 Add to the project as a library project 

00:02:23.800 --> 00:02:32.860
 You need api key to use maps api 

00:02:28.240 --> 00:02:36.700
 You can get the api key from the console without the google developer. 

00:02:32.860 --> 00:02:38.050
 Be careful because it is different from google play developer's console 

00:02:36.700 --> 00:02:41.290
 Please give me 

00:02:38.050 --> 00:02:45.940
 Please access the url you see 

00:02:41.290 --> 00:02:52.090
 Create a new project with the Create Project button 

00:02:45.940 --> 00:02:54.340
 Click api on the left tab in the created project and click api 

00:02:52.090 --> 00:02:58.840
 Open the tab 

00:02:54.340 --> 00:03:02.710
 Look for the item google maps android api v1 to 

00:02:58.840 --> 00:03:08.260
 Turn on the right toggle button 

00:03:02.710 --> 00:03:13.060
 Once you've done that, open the cree train Luz on the left tab this time and get public api 

00:03:08.260 --> 00:03:18.470
 Press the Create New Key button under Access 

00:03:13.060 --> 00:03:23.570
 Type of key to create choose android key 

00:03:18.470 --> 00:03:26.060
 Keystore fingerprint and app package in the displayed text box 

00:03:23.570 --> 00:03:32.000
 Enter a combination of names 

00:03:26.060 --> 00:03:38.720
 Separate the fingerprint and package name with a semicolon as in the example shown 

00:03:32.000 --> 00:03:40.640
 Since you can enter multiple combinations, for example, you can store key stores for both debugging and reasoning 

00:03:38.720 --> 00:03:45.260
 Can register 

00:03:40.640 --> 00:03:53.260
 Once it has been registered, it has a reputation for being a key for android application 

00:03:45.260 --> 00:03:53.260
 Since you can do that, you will need a string later that says api key 

00:03:53.400 --> 00:04:00.870
 Add metadata to app package to use maps api v 2 

00:03:59.220 --> 00:04:04.950
 need to do it 

00:04:00.870 --> 00:04:08.590
 Immediately below the manifest element of android manifest xml 

00:04:04.950 --> 00:04:13.819
 Add metadata elements as you see 

00:04:08.590 --> 00:04:17.570
 Please put the api key acquired earlier in the api key part 

00:04:13.819 --> 00:04:21.169
 To use the maps api and the location client 

00:04:17.570 --> 00:04:26.120
 You need permission to view as well as before 

00:04:21.169 --> 00:04:27.610
 Add it directly under the elements of the manifest of android manifest xml 

00:04:26.120 --> 00:04:33.219
 Please give me 

00:04:27.610 --> 00:04:38.210
 The first four are the required permissions to use map map The remaining two are 

00:04:33.219 --> 00:04:42.520
 It's for the location client Now you're ready 

00:04:38.210 --> 00:04:47.530
 First, let's take a quick look at how to use maps api 

00:04:42.520 --> 00:04:48.580
 Unlike in v 1 maps api v 2 maps are provided as fragments 

00:04:47.530 --> 00:04:54.099
 Will be 

00:04:48.580 --> 00:04:59.590
 In the example you see, support map fragment in the sound creation method of activity 

00:04:54.099 --> 00:05:02.510
 A class called map fragment in addition to the support map fragment being generated 

00:04:59.590 --> 00:05:05.180
 There is also api level 12 

00:05:02.510 --> 00:05:09.590
 I will only meet at the above 

00:05:05.180 --> 00:05:12.380
 Support instance of google map class for map fragment class 

00:05:09.590 --> 00:05:18.919
 You can get it with the get map method 

00:05:12.380 --> 00:05:23.720
 However, it is necessary to be careful because it will be painted until the loading is complete but will come back 

00:05:18.919 --> 00:05:25.169
 Various processing will be done through this google map class 

00:05:23.720 --> 00:05:29.610
 For example, of map 

00:05:25.169 --> 00:05:30.689
 When setting the display position, move camera method of google map class 

00:05:29.610 --> 00:05:35.490
 Use 

00:05:30.689 --> 00:05:38.480
 If you use the set my location na verdo method 

00:05:35.490 --> 00:05:43.370
 can be displayed on map 

00:05:38.480 --> 00:05:45.370
 Now let's use a location client class that provides field location 

00:05:43.370 --> 00:05:50.139
 Let's see 

00:05:45.370 --> 00:05:55.660
 Instantiating the calculation client is just new 

00:05:50.139 --> 00:05:59.710
 In the example you see, the fragment's sound register creation method is used to call it the first one 

00:05:55.660 --> 00:06:05.360
 The second argument of the argument is a connection callback 

00:05:59.710 --> 00:06:09.060
 The third is a connection field listener There is not on the screen, but two inter 

00:06:05.360 --> 00:06:13.169
 You need to implement each face method 

00:06:09.060 --> 00:06:18.020
 If you can create an instance call the connect method 

00:06:13.169 --> 00:06:21.050
 And compute client ready to use 

00:06:18.020 --> 00:06:25.879
 To start continuous acquisition of location information 

00:06:21.050 --> 00:06:30.050
 Use one method in request location up Connection call here 

00:06:25.879 --> 00:06:35.180
 Calling from back interface book connected method 

00:06:30.050 --> 00:06:38.009
 Take an instance of Location Dragon Quest as the first argument 

00:06:35.180 --> 00:06:42.629
 Always say in the set priority method 

00:06:38.009 --> 00:06:44.560
 Ise to specify the update interval in the sendral set interval method 

00:06:42.629 --> 00:06:50.380
 I will specify 

00:06:44.560 --> 00:06:56.470
 In this example, the highest priority as priority is designated as 8 lives. 

00:06:50.380 --> 00:06:57.340
 But I also want to shine with the priority balance and power itilow hack low 

00:06:56.470 --> 00:07:01.990
 power 

00:06:57.340 --> 00:07:04.550
 Because there is power of priority, let's use properly depending on the application 

00:07:01.990 --> 00:07:09.290
 The second argument is the location rate 

00:07:04.550 --> 00:07:11.300
 It is a location of the sound location change of the interface like the service 

00:07:09.290 --> 00:07:16.639
 Override the method 

00:07:11.300 --> 00:07:21.650
 This method is called whenever the location information is updated 

00:07:16.639 --> 00:07:23.740
 Call the move location up date method when the update is no longer needed 

00:07:21.650 --> 00:07:28.050
 I will stop the capital high 

00:07:23.740 --> 00:07:31.840
 Here we are calling from the fragment's sound pose method 

00:07:28.050 --> 00:07:36.639
 Finally, let's see how to use dione face 

00:07:31.840 --> 00:07:41.180
 Temporarily create an instantiation of the fence through the builder class 

00:07:36.639 --> 00:07:46.160
 Specify unique string id with set request id 

00:07:41.180 --> 00:07:50.750
 The red transition type specifies when to call back 

00:07:46.160 --> 00:07:54.750
 As shown in this example, when entering the area when entering the transition or 

00:07:50.750 --> 00:07:59.460
 If it is a transition exit, it is when it leaves the area 

00:07:54.750 --> 00:08:04.560
 Specify deadline for cows in zx piration duration 

00:07:59.460 --> 00:08:11.330
 In this example, this geofence is set to be effective all the time 

00:08:04.560 --> 00:08:16.939
 Then specify the center point and radius of the Philia in the set circular region 

00:08:11.330 --> 00:08:19.639
 In order to actually set the upper variable, the hatto of the location client class 

00:08:16.939 --> 00:08:22.699
 Call the fence is method 

00:08:19.639 --> 00:08:28.129
 An array of geofences as the first argument 

00:08:22.699 --> 00:08:31.190
 The second argument is the pending intent The third argument is the on at the teacher orphen 

00:08:28.129 --> 00:08:37.039
 Specify the seeds result seeds 

00:08:31.190 --> 00:08:38.270
 The pending intent specified here will be later when a geofence event occurs 

00:08:37.039 --> 00:08:43.010
 Used 

00:08:38.270 --> 00:08:47.240
 It is a template of the intent In this example the reception of the event is 

00:08:43.010 --> 00:08:51.209
 Because we decided to do with the intent service, 

00:08:47.240 --> 00:08:53.240
 I refine using the static method of Get service 

00:08:51.209 --> 00:08:53.240
 Hmm 

00:08:53.279 --> 00:09:02.310
 Let's take a look at the contents of the intent service that receives geofence events 

00:08:58.110 --> 00:09:08.490
 Now override the handle intent method and tober ride 

00:09:02.310 --> 00:09:12.980
 Processing the intent passed as an argument then the location client 

00:09:08.490 --> 00:09:17.660
 You can use the static methods provided by the class 

00:09:12.980 --> 00:09:22.550
 Should be error and get error code is available for error handling 

00:09:17.660 --> 00:09:23.480
 If you use the ket geo-fence transition, the kana part of anyone gets in the area 

00:09:22.550 --> 00:09:28.910
 I can do it 

00:09:23.480 --> 00:09:32.970
 get List of faces where birds are feeling the ring geo fence for the current event 

00:09:28.910 --> 00:09:37.570
 Returns a value obtained using a method like the one above 

00:09:32.970 --> 00:09:41.860
 Perform processing for the face once 

00:09:37.570 --> 00:09:43.030
 How was it? The functions of maps api v 2 and location client 

00:09:41.860 --> 00:09:50.400
 If you combine 

00:09:43.030 --> 00:09:50.400
 The potential of the app service is likely to expand greatly Thank you for watching 

