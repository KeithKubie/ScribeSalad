WEBVTT
Kind: captions
Language: en

00:00:08.610 --> 00:00:09.530
PAUL SAXMAN: Hello, welcome.

00:00:09.530 --> 00:00:11.980
My name is Paul Saxman, and
welcome to the premiere

00:00:11.980 --> 00:00:14.070
episode of The Mobile
Experience.

00:00:14.070 --> 00:00:16.480
In this series, we'll be
covering UI guidelines and

00:00:16.480 --> 00:00:18.390
design principles for building
location-based

00:00:18.390 --> 00:00:20.150
applications with maps.

00:00:20.150 --> 00:00:22.950
In this episode in particular,
we'll be covering how to

00:00:22.950 --> 00:00:26.240
implement a interface for
browsing a list of places

00:00:26.240 --> 00:00:28.850
using a scrollable view
interface, or

00:00:28.850 --> 00:00:30.690
ViewPager in Android.

00:00:30.690 --> 00:00:34.650
In iOS, the equivalent would
be a UIScrollView.

00:00:34.650 --> 00:00:37.660
Using pagination or paging.

00:00:37.660 --> 00:00:40.230
To demo, this technique, we're
going to actually build an

00:00:40.230 --> 00:00:42.340
application over a series
of episodes.

00:00:42.340 --> 00:00:45.860
We're calling this application
the Walkway app.

00:00:45.860 --> 00:00:50.310
The principle it's designed on
are based on what we presented

00:00:50.310 --> 00:00:51.320
in Google I/O--

00:00:51.320 --> 00:00:52.760
that was a walker app--

00:00:52.760 --> 00:00:54.870
in the show called Making
Location Meaningful with the

00:00:54.870 --> 00:00:56.700
Google Maps APIs.

00:00:56.700 --> 00:00:59.060
This application covers
a number of use cases.

00:00:59.060 --> 00:01:04.180
The primary use case is
displaying a view, or showing

00:01:04.180 --> 00:01:06.810
a route for exploring
a location.

00:01:06.810 --> 00:01:09.810
The user can view a list of
places along this route.

00:01:09.810 --> 00:01:12.550
They can choose which places
they want to maybe stop by or

00:01:12.550 --> 00:01:14.200
maybe not stop by.

00:01:14.200 --> 00:01:17.760
They can also tweak the types
of places they want to see.

00:01:17.760 --> 00:01:21.080
So if they want to stop by cafes
or museums, they can put

00:01:21.080 --> 00:01:21.600
that in there.

00:01:21.600 --> 00:01:22.920
Or maybe they don't want to
stop by these places.

00:01:22.920 --> 00:01:25.230
They'd rather stop by the bar.

00:01:25.230 --> 00:01:28.500
So basically, they establish a
route and also establish a

00:01:28.500 --> 00:01:30.590
series of places they
want to stop by.

00:01:30.590 --> 00:01:32.370
Another thing that we might add
to this application in the

00:01:32.370 --> 00:01:34.130
future is maybe a
social aspect.

00:01:34.130 --> 00:01:35.880
We could do something like
Ways for Walking.

00:01:35.880 --> 00:01:36.710
It might be kind of fun.

00:01:36.710 --> 00:01:38.940
But that would definitely
be in a much

00:01:38.940 --> 00:01:40.650
further future episode.

00:01:40.650 --> 00:01:43.600
So with that, why don't we jump
into a quick demo of the

00:01:43.600 --> 00:01:46.220
application the way
it is right now.

00:01:46.220 --> 00:01:48.970
You can see here, the
application takes some

00:01:48.970 --> 00:01:51.550
inspiration from the Google
Maps Mobile application.

00:01:51.550 --> 00:01:52.690
And that's actually
on purpose.

00:01:52.690 --> 00:01:55.490
They put a lot of effort into
building a nice user interface

00:01:55.490 --> 00:01:57.620
that is single-handed
exploration.

00:01:57.620 --> 00:01:59.820
You can see on the bottom here,
we have a ViewPager.

00:01:59.820 --> 00:02:02.740
The ViewPager is this is a
white box on the bottom.

00:02:02.740 --> 00:02:04.910
And right now, it says
the ferry building.

00:02:04.910 --> 00:02:08.479
And if you see, if I take this
ViewPager and I slide across,

00:02:08.479 --> 00:02:11.050
you see a new place in the
map, and you also see new

00:02:11.050 --> 00:02:12.440
place in the ViewPager.

00:02:12.440 --> 00:02:15.230
So right now it's saying
exploratorium.

00:02:15.230 --> 00:02:18.870
So this ViewPager, the point of
this is it allows the user

00:02:18.870 --> 00:02:21.450
to navigate through a list of
places very rapidly just using

00:02:21.450 --> 00:02:22.380
their thumb.

00:02:22.380 --> 00:02:24.800
Like I said, this is a
single-handed interface, which

00:02:24.800 --> 00:02:27.910
is very nice for if you're
carrying a bag, you're walking

00:02:27.910 --> 00:02:32.920
along carrying your coffee or
other beverage, and you just

00:02:32.920 --> 00:02:34.620
want to quickly browse
through this list of

00:02:34.620 --> 00:02:36.500
places on the map.

00:02:36.500 --> 00:02:38.550
Another thing you'll notice
about this interface as well

00:02:38.550 --> 00:02:42.220
is that we have a
nice big map.

00:02:42.220 --> 00:02:45.530
The purpose of the big map is to
allow the user really easy

00:02:45.530 --> 00:02:48.170
navigation with their thumb
on the map as well.

00:02:48.170 --> 00:02:51.250
Smaller map's actually a little
harder to get to more

00:02:51.250 --> 00:02:53.050
accurate positioning.

00:02:53.050 --> 00:02:56.890
And also, the larger map lets
us zoom out to a high enough

00:02:56.890 --> 00:03:00.090
level so that we can see of
the places at one time.

00:03:00.090 --> 00:03:02.090
So this is just a pre-canned
list of places that I put in

00:03:02.090 --> 00:03:02.790
the application.

00:03:02.790 --> 00:03:07.150
But future episodes will maybe
integrate with the Places API

00:03:07.150 --> 00:03:09.190
to do a dynamic list.

00:03:09.190 --> 00:03:11.200
And allow the user, like I said,
to add and remove their

00:03:11.200 --> 00:03:13.910
own places.

00:03:13.910 --> 00:03:16.780
Another thing you'll notice is
when I'm sliding the ViewPager

00:03:16.780 --> 00:03:18.730
is that there's only one
marker highlighted on

00:03:18.730 --> 00:03:20.570
the map at a time.

00:03:20.570 --> 00:03:23.210
So the highlighted marker
corresponds to what's

00:03:23.210 --> 00:03:24.200
displayed in the ViewPager.

00:03:24.200 --> 00:03:26.500
And the interesting thing about
this is this eliminates

00:03:26.500 --> 00:03:28.470
the need for using
info windows.

00:03:28.470 --> 00:03:32.560
So the bad thing about info
windows is if the map is

00:03:32.560 --> 00:03:34.610
scrolled off to the side and
the marker is no longer

00:03:34.610 --> 00:03:36.570
displayed, you no longer
see the last

00:03:36.570 --> 00:03:37.765
thing that you selected.

00:03:37.765 --> 00:03:40.120
But using the ViewPager, you
actually still see the place

00:03:40.120 --> 00:03:42.170
in the bottom of the screen.

00:03:42.170 --> 00:03:45.290
I can get back to the map.

00:03:45.290 --> 00:03:47.470
So as you see, as I'm scrolling
through the list of

00:03:47.470 --> 00:03:49.720
places in the ViewPager,
one markers

00:03:49.720 --> 00:03:51.490
highlighted at any one time.

00:03:51.490 --> 00:03:55.490
The other thing that I did here
is these dot markers--

00:03:55.490 --> 00:03:58.360
or measle markers,
of you may--

00:03:58.360 --> 00:04:00.240
these are also touchable
or clickable.

00:04:00.240 --> 00:04:04.280
If I click on one of these, it
takes focus, and ViewPager

00:04:04.280 --> 00:04:05.440
updates its position.

00:04:05.440 --> 00:04:08.590
So the nice thing about this
is the user can actually

00:04:08.590 --> 00:04:10.630
navigate entirely on the map.

00:04:10.630 --> 00:04:12.470
They don't actually have to
use the ViewPager if they

00:04:12.470 --> 00:04:13.900
don't want to.

00:04:13.900 --> 00:04:17.810
So they can explore the area
spatially using the map

00:04:17.810 --> 00:04:20.040
instead of exploring the places
using the ViewPager.

00:04:23.180 --> 00:04:25.070
Another thing that's implemented
here is if the

00:04:25.070 --> 00:04:27.210
user clicks on the highlighted
marker.

00:04:27.210 --> 00:04:28.700
You see you get this nice
zoom-in effect.

00:04:28.700 --> 00:04:32.060
This is the detail mode.

00:04:32.060 --> 00:04:34.680
You get the same effect if you
touch or just click the

00:04:34.680 --> 00:04:38.300
ViewPager for the highlighted
place.

00:04:38.300 --> 00:04:40.840
It zooms in and shows
detailed view.

00:04:40.840 --> 00:04:43.020
In a future episode, what we
can do is maybe add more

00:04:43.020 --> 00:04:45.780
detailed information
about the place.

00:04:45.780 --> 00:04:48.100
For example, on the Google Maps
Mobile application, what

00:04:48.100 --> 00:04:51.270
that does is when you click on
the place, it pulls up a

00:04:51.270 --> 00:04:53.570
drawer where you can actually
see more information.

00:04:53.570 --> 00:04:56.780
We're not going to try to
implement everything that the

00:04:56.780 --> 00:04:58.180
Google Maps Mobile
application does.

00:04:58.180 --> 00:05:02.080
But where it makes sense in
this application, we may

00:05:02.080 --> 00:05:04.170
integrate those designs.

00:05:04.170 --> 00:05:06.200
What I did with the
back button is it

00:05:06.200 --> 00:05:07.580
has two states now.

00:05:07.580 --> 00:05:10.500
One, if we're zoomed in in a
detailed mode, you see here if

00:05:10.500 --> 00:05:13.650
I click the Back button, it's
going to zoom back out to the

00:05:13.650 --> 00:05:14.700
full map mode.

00:05:14.700 --> 00:05:18.340
So essentially, the first mode
is resetting the map.

00:05:18.340 --> 00:05:21.890
The second mode is actually
going to reset the ViewPager

00:05:21.890 --> 00:05:23.830
so the user can get back
to the original

00:05:23.830 --> 00:05:25.320
location on the list.

00:05:25.320 --> 00:05:27.280
Because remember, this
is a walking path.

00:05:27.280 --> 00:05:29.530
So we're going from the ferry
building to the very last

00:05:29.530 --> 00:05:32.410
place, which is Yerba
Buena Gardens.

00:05:32.410 --> 00:05:34.380
So at some point, the user may
want to actually get back to

00:05:34.380 --> 00:05:36.680
the very first place.

00:05:36.680 --> 00:05:38.975
And using the back button's a
very nice way to do that.

00:05:38.975 --> 00:05:41.970
If I were building this
application in iOS, which

00:05:41.970 --> 00:05:44.010
doesn't have a Back button, you
probably want to put some

00:05:44.010 --> 00:05:47.710
kind of UI control maybe in the
title bar or in the menu

00:05:47.710 --> 00:05:51.050
bar, or an overlay over the map
that allows the user to

00:05:51.050 --> 00:05:54.220
actually reset their
map state.

00:05:54.220 --> 00:05:56.750
So with that, I'm going to start
jumping into a little

00:05:56.750 --> 00:05:59.310
bit of code to show
you how this is

00:05:59.310 --> 00:06:00.260
implemented in Android.

00:06:00.260 --> 00:06:03.060
This part'll get a little bit
boring for you iOS developers.

00:06:03.060 --> 00:06:06.230
But we'll potentially implement
the same interface

00:06:06.230 --> 00:06:08.400
in iOS in a future episode
and share that

00:06:08.400 --> 00:06:09.340
code with you as well.

00:06:09.340 --> 00:06:12.975
So if we take a look at the code
now for this application

00:06:12.975 --> 00:06:17.440
in Android, you can see here
that this is the layout file

00:06:17.440 --> 00:06:18.330
for the main interface.

00:06:18.330 --> 00:06:20.950
So we only have one
interface here.

00:06:20.950 --> 00:06:22.920
If you remember the application,
I've removed

00:06:22.920 --> 00:06:23.500
everything--

00:06:23.500 --> 00:06:26.520
all the superfluous
UI controls,

00:06:26.520 --> 00:06:27.720
like the action bar--

00:06:27.720 --> 00:06:28.570
for the time being.

00:06:28.570 --> 00:06:32.600
So all we have is the map and
the ViewPager at the bottom.

00:06:32.600 --> 00:06:33.780
You see this frame layout.

00:06:33.780 --> 00:06:36.720
This just allows me to do
overlays on top of the map.

00:06:36.720 --> 00:06:39.850
There's just a very
subtle shadow

00:06:39.850 --> 00:06:42.360
effect over the ViewPager.

00:06:42.360 --> 00:06:43.700
And the bottom here is where
you actually see

00:06:43.700 --> 00:06:44.550
the ViewPager itself.

00:06:44.550 --> 00:06:46.820
It's very simple to implement.

00:06:46.820 --> 00:06:49.310
It's part of the Support
Library, which means it's

00:06:49.310 --> 00:06:53.290
supported across a number of
different Android releases.

00:06:53.290 --> 00:06:57.610
And essentially, all you need
is a position for it and the

00:06:57.610 --> 00:06:59.370
layout width and height.

00:06:59.370 --> 00:07:00.870
I've actually specified
the height.

00:07:00.870 --> 00:07:04.090
I fixed the height to 85 DPI,
which was a nice height for

00:07:04.090 --> 00:07:05.580
thumb swiping.

00:07:05.580 --> 00:07:08.910
When you take a back to the
interface on the phone, it was

00:07:08.910 --> 00:07:09.990
a little bit sparse.

00:07:09.990 --> 00:07:11.620
There was just a little
bit of text in there.

00:07:11.620 --> 00:07:14.150
Eventually, we can add more
information to that ViewPager,

00:07:14.150 --> 00:07:15.150
similar to how we would

00:07:15.150 --> 00:07:19.120
potentially use an info window.

00:07:19.120 --> 00:07:23.390
So if we go back, actually, to
the code itself, instantiating

00:07:23.390 --> 00:07:24.070
the ViewPager.

00:07:24.070 --> 00:07:28.550
I'm just going to pull
it out of the layout.

00:07:28.550 --> 00:07:29.790
Give it a PagerAdapter.

00:07:29.790 --> 00:07:31.870
And I'll discuss the
PagerAdapter in a little bit.

00:07:31.870 --> 00:07:34.460
The PagerAdapter is how you
get the data and the views

00:07:34.460 --> 00:07:36.810
instantiated for
the ViewPager.

00:07:39.470 --> 00:07:42.170
And here, I implemented an
OnPageChangeListener.

00:07:42.170 --> 00:07:45.100
So this is how I'm capturing
these events as the user's

00:07:45.100 --> 00:07:47.710
swiping from left to right.

00:07:47.710 --> 00:07:55.340
And I'm using this event to
change the focused marker.

00:07:55.340 --> 00:07:57.920
So I'm taking the previously
focused marker, I'm shrinking

00:07:57.920 --> 00:07:59.230
it down to a dot marker.

00:07:59.230 --> 00:08:01.990
And the inverse, taking the
new highlighted marker and

00:08:01.990 --> 00:08:03.240
blowing it up.

00:08:05.150 --> 00:08:08.990
Let's take a look at
the PagerAdapter.

00:08:08.990 --> 00:08:11.470
So there's several different
versions of this.

00:08:11.470 --> 00:08:13.310
There's the PagerAdapter,
which is the base class.

00:08:13.310 --> 00:08:15.310
And then there's two concrete
implementations of this.

00:08:15.310 --> 00:08:17.730
There's the FragmentPagerAdapter
and the

00:08:17.730 --> 00:08:19.520
FragmentStatePagerAdapter.

00:08:19.520 --> 00:08:24.100
The latter two require you
to instantiate fragments.

00:08:24.100 --> 00:08:27.440
These are actually for the pages
in the view, ViewPager.

00:08:27.440 --> 00:08:30.190
I chose to use just a
PagerAdapter to instantiate

00:08:30.190 --> 00:08:33.385
views, not fragments, just
because it's a lot simpler for

00:08:33.385 --> 00:08:35.110
this use case.

00:08:35.110 --> 00:08:37.890
Future episodes, though, I'd
probably want to think about

00:08:37.890 --> 00:08:40.860
migrating to the
FragmentStateAdapter and

00:08:40.860 --> 00:08:44.340
actually making these pages
first-class citizens or

00:08:44.340 --> 00:08:45.630
reusable components.

00:08:45.630 --> 00:08:48.470
Right now, they're just baked
into the application.

00:08:48.470 --> 00:08:51.050
But this is a very simple, quick
and easy way to get up

00:08:51.050 --> 00:08:53.560
and running with these pages.

00:08:53.560 --> 00:08:55.780
As you can see, in the
application right now, it's

00:08:55.780 --> 00:08:59.005
just essentially the
name of the place.

00:08:59.005 --> 00:09:01.250
Here, I'm actually attaching an

00:09:01.250 --> 00:09:02.900
OnClickListener to the View.

00:09:02.900 --> 00:09:07.150
That's how I'm allowing the user
to actually zoom in to

00:09:07.150 --> 00:09:08.400
get the detailed view.

00:09:11.810 --> 00:09:14.100
A click event on the view, in
the ViewPager, allows us to

00:09:14.100 --> 00:09:16.700
zoom in to that particular
place on the map.

00:09:16.700 --> 00:09:20.530
So coordinating between the
map and the ViewPager.

00:09:20.530 --> 00:09:23.560
The way I'm actually doing all
this coordination in this code

00:09:23.560 --> 00:09:27.740
between the ViewPager and the
map is using indices.

00:09:27.740 --> 00:09:29.880
Because the ViewPager, when
you get events on the

00:09:29.880 --> 00:09:31.980
ViewPager, it's by position,
what page

00:09:31.980 --> 00:09:33.450
you're on in the ViewPager.

00:09:33.450 --> 00:09:36.240
I use that position to go back
to my collection of places or

00:09:36.240 --> 00:09:39.805
markers to actually update
them in the map.

00:09:39.805 --> 00:09:42.620
And that's this code
following below.

00:09:42.620 --> 00:09:47.340
The next thing that we'll
probably want to look at is

00:09:47.340 --> 00:09:49.980
the marker itself.

00:09:49.980 --> 00:09:54.020
So the markers are
fairly simple.

00:09:54.020 --> 00:09:57.100
All I did here, though, is I
added OnClickListener or

00:09:57.100 --> 00:09:58.590
onMarkerClick click
to the map.

00:09:58.590 --> 00:10:02.155
That allows me to
do two things.

00:10:02.155 --> 00:10:05.260
If the user clicks the currently
highlighted marker,

00:10:05.260 --> 00:10:09.920
you get the zoom-in feature,
or the detail view.

00:10:09.920 --> 00:10:12.250
If it's not the currently
selected one, then we go

00:10:12.250 --> 00:10:13.760
through that process
of highlighting it

00:10:13.760 --> 00:10:15.050
and updating it.

00:10:15.050 --> 00:10:18.030
So essentially, just telling
the ViewPager

00:10:18.030 --> 00:10:19.560
to update its item.

00:10:19.560 --> 00:10:23.290
Then the ViewPager gets that
event and does its work to

00:10:23.290 --> 00:10:25.960
change which marker
is highlighted.

00:10:25.960 --> 00:10:28.140
So that's pretty much
it for the code.

00:10:28.140 --> 00:10:31.340
There's a few things that I'll
probably want to add to this.

00:10:31.340 --> 00:10:34.300
Let's take a look at the
application one more time.

00:10:34.300 --> 00:10:36.470
So a few things.

00:10:36.470 --> 00:10:38.850
I ran a little mini
usability study.

00:10:38.850 --> 00:10:40.020
I took this application
and gave it

00:10:40.020 --> 00:10:41.380
to a few of my friends.

00:10:41.380 --> 00:10:43.130
I said, play around with it.

00:10:43.130 --> 00:10:45.070
Tell me what you think.

00:10:45.070 --> 00:10:47.130
And they gave me, actually,
some really good feedback.

00:10:47.130 --> 00:10:49.440
A few people isn't an
extensive study.

00:10:49.440 --> 00:10:53.480
But it's always good when you
have somebody else besides

00:10:53.480 --> 00:10:55.830
yourself, or somebody that you
aren't working really closely

00:10:55.830 --> 00:10:58.090
with on an application to
take a look and tell

00:10:58.090 --> 00:10:59.230
you what they think.

00:10:59.230 --> 00:11:03.380
So one bit of feedback that I
got is it's not always obvious

00:11:03.380 --> 00:11:05.650
that the ViewPager
is an interactive

00:11:05.650 --> 00:11:07.210
component on this interface.

00:11:07.210 --> 00:11:10.420
When you first start the
application, you just see

00:11:10.420 --> 00:11:11.650
whatever the default was here.

00:11:11.650 --> 00:11:13.360
This ferry building.

00:11:13.360 --> 00:11:15.600
It's not necessarily apparent
that you can actually swipe

00:11:15.600 --> 00:11:17.250
left and right on ViewPager.

00:11:17.250 --> 00:11:20.960
So one trick that we might think
about implementing here

00:11:20.960 --> 00:11:24.620
to actually make it apparent
to the user that it is

00:11:24.620 --> 00:11:28.000
interactive is on start up, you
can give it a little bit

00:11:28.000 --> 00:11:28.580
of a wiggle.

00:11:28.580 --> 00:11:30.870
So have the ViewPager maybe
move left and right, or

00:11:30.870 --> 00:11:34.060
actually iterate through
a few items to show

00:11:34.060 --> 00:11:36.080
the user how it works.

00:11:36.080 --> 00:11:38.090
You could do this only the first
couple of times on start

00:11:38.090 --> 00:11:41.950
up, and then not
do it anymore.

00:11:41.950 --> 00:11:45.090
And actually, I've seen that
implementation on another

00:11:45.090 --> 00:11:45.510
application.

00:11:45.510 --> 00:11:47.120
It was the Open Table
application that

00:11:47.120 --> 00:11:48.340
has a similar interface.

00:11:48.340 --> 00:11:50.380
They do that on start up.

00:11:50.380 --> 00:11:53.220
Another thing that you could do
is put in angle brackets on

00:11:53.220 --> 00:11:55.950
the right- or left-hand
side of the ViewPager.

00:11:55.950 --> 00:11:58.800
That generally indicates that
there's more information, give

00:11:58.800 --> 00:12:02.850
the user some kind of clue
that they can find more

00:12:02.850 --> 00:12:05.180
information to the
left or right.

00:12:05.180 --> 00:12:08.830
So it'd be a nice interface
thing to add to this

00:12:08.830 --> 00:12:10.300
application.

00:12:10.300 --> 00:12:11.190
Pager looping.

00:12:11.190 --> 00:12:15.720
So another bit of feedback that
I got is that when you to

00:12:15.720 --> 00:12:19.880
the beginning or end of this
list of places, it can be a

00:12:19.880 --> 00:12:22.520
little bit frustrating when
you can't continue on.

00:12:22.520 --> 00:12:26.120
You might want to, instead of
stopping at the last page or

00:12:26.120 --> 00:12:28.660
the last marker, actually just
flip over and start at the

00:12:28.660 --> 00:12:30.220
beginning again.

00:12:30.220 --> 00:12:32.090
I don't know if that's
necessarily easy to implement

00:12:32.090 --> 00:12:32.950
with the ViewPager.

00:12:32.950 --> 00:12:36.080
I think it might be more easy
if you had just a scrollable

00:12:36.080 --> 00:12:38.980
view of some sort.

00:12:38.980 --> 00:12:43.130
But one thing we could do is
potentially just, when the

00:12:43.130 --> 00:12:46.130
user gets to the end,
automatically take it back to

00:12:46.130 --> 00:12:47.330
the beginning.

00:12:47.330 --> 00:12:53.990
You could add a number of
repeated places, repeated

00:12:53.990 --> 00:12:55.470
views to the ViewPager.

00:12:55.470 --> 00:12:57.330
So as the user keep scrolling
on there,

00:12:57.330 --> 00:12:58.370
you're getting new views.

00:12:58.370 --> 00:13:00.950
But essentially, these are
views of the same data.

00:13:00.950 --> 00:13:03.320
A number of different
things we could do.

00:13:03.320 --> 00:13:05.680
But yeah, definitely it seems
like a little bit of a

00:13:05.680 --> 00:13:07.780
frustrating thing, to get to the
end of this list and not

00:13:07.780 --> 00:13:09.640
be able to start over.

00:13:09.640 --> 00:13:12.580
And one last thing.

00:13:12.580 --> 00:13:15.150
So as you can see, what's
happening here is, as I'm

00:13:15.150 --> 00:13:17.710
scrolling through this list of
places in the ViewPager, I'm

00:13:17.710 --> 00:13:19.820
actually re-centering the map.

00:13:19.820 --> 00:13:22.570
So the highlighted markers
in the center of the map.

00:13:22.570 --> 00:13:26.250
Which is a very nice design,
because you always have what's

00:13:26.250 --> 00:13:28.310
important in the middle.

00:13:28.310 --> 00:13:32.690
However, we wouldn't always have
to reposition the map if

00:13:32.690 --> 00:13:36.750
the newly highlighted marker
is already near the center.

00:13:36.750 --> 00:13:38.490
We could just highlight
that marker as the

00:13:38.490 --> 00:13:41.120
user scrolls through.

00:13:41.120 --> 00:13:43.830
And that allows, if the user has
repositioned the map, if

00:13:43.830 --> 00:13:46.240
they're looking at a
neighborhood that's more

00:13:46.240 --> 00:13:48.210
relevant, or an area of the map
that's more relevant to

00:13:48.210 --> 00:13:52.930
them, and they scroll to a new
marker that's on that place on

00:13:52.930 --> 00:13:55.070
the map already, we're
not actually

00:13:55.070 --> 00:13:57.190
re-centering the map for them.

00:13:57.190 --> 00:14:00.420
I actually played around
with that a little bit.

00:14:00.420 --> 00:14:03.400
It wasn't too easy to do
off the top of my head.

00:14:03.400 --> 00:14:08.050
Just because what you have to
do is you can tell which

00:14:08.050 --> 00:14:11.250
markers are on the
current map.

00:14:11.250 --> 00:14:12.990
But you can't tell how
much padding is

00:14:12.990 --> 00:14:13.810
around those markers.

00:14:13.810 --> 00:14:16.290
So for example, if one of these
markers was off to the

00:14:16.290 --> 00:14:18.390
edge, I could tell if
it was on the map.

00:14:18.390 --> 00:14:21.850
But I can't tell, if I inflate
the marker or make the marker

00:14:21.850 --> 00:14:25.090
bigger, if the markers is
visible on the map.

00:14:25.090 --> 00:14:27.970
So there's a few things that I
might try to play around with

00:14:27.970 --> 00:14:30.600
that for a future episode.

00:14:30.600 --> 00:14:33.550
But this is how we're going to
keep it for the time being.

00:14:33.550 --> 00:14:35.700
We don't think zoom is
necessarily a bad thing.

00:14:35.700 --> 00:14:38.670
But we always want to make
this a little bit better.

00:14:38.670 --> 00:14:42.440
There's a few things that
I was going to--

00:14:42.440 --> 00:14:45.050
a few things that are
interesting to mention about

00:14:45.050 --> 00:14:47.580
this interface as well.

00:14:47.580 --> 00:14:50.720
That I think we'll also work on
or potentially talk about

00:14:50.720 --> 00:14:51.300
in a future episode.

00:14:51.300 --> 00:14:53.480
You can see that I took
the action bar out.

00:14:53.480 --> 00:14:56.660
That's only just because I don't
have any other in-app

00:14:56.660 --> 00:14:59.160
navigation, presently,
in this application.

00:14:59.160 --> 00:15:02.560
If I didn't want to have other
activities, I'd definitely

00:15:02.560 --> 00:15:04.050
want to have an action bar.

00:15:04.050 --> 00:15:07.120
Otherwise, I'd also consider
putting in a navigation bar in

00:15:07.120 --> 00:15:07.730
a future episode.

00:15:07.730 --> 00:15:11.820
For example, if I want to
browse, or have other commands

00:15:11.820 --> 00:15:12.290
that you could do.

00:15:12.290 --> 00:15:16.210
Let's say if you want to add or
remove places from the list

00:15:16.210 --> 00:15:19.370
of places on the map, or redo
your search, a navigation bar

00:15:19.370 --> 00:15:20.800
would be nice.

00:15:20.800 --> 00:15:22.950
And the way to get to the
Navigation bar would be via

00:15:22.950 --> 00:15:23.900
the Action bar.

00:15:23.900 --> 00:15:25.640
Or actually, a drawer handle.

00:15:25.640 --> 00:15:30.358
But we'll play around with
that in future episodes.

00:15:30.358 --> 00:15:32.280
The other thing that's
interesting with this

00:15:32.280 --> 00:15:35.840
interface, you can actually see
in the code, is these dot

00:15:35.840 --> 00:15:38.610
markers are actually
shape drawables.

00:15:38.610 --> 00:15:42.630
So they're simple enough as
vector graphics, or vector

00:15:42.630 --> 00:15:45.610
shapes, that I can define them
as an XML shape drawable.

00:15:45.610 --> 00:15:48.180
They're just a circle with
a gradient inside.

00:15:48.180 --> 00:15:50.560
That allows me to actually scale
them to any size that I

00:15:50.560 --> 00:15:54.790
want, dynamically,
if I want to.

00:15:54.790 --> 00:15:57.090
And also, if I do want to change
the color of the style

00:15:57.090 --> 00:15:59.970
of these markers, I don't have
to go back to my drawing tool

00:15:59.970 --> 00:16:02.910
and regenerate raster
images for that.

00:16:02.910 --> 00:16:05.920
I could just go in and tweak
the color settings.

00:16:05.920 --> 00:16:08.610
I thought about actually doing
it even more dynamically.

00:16:08.610 --> 00:16:10.780
So for example, with the
highlighted marker.

00:16:10.780 --> 00:16:13.920
These are the default markers
they come with the maps SDK.

00:16:13.920 --> 00:16:16.700
You specify the hue that
you want to use.

00:16:16.700 --> 00:16:20.200
You take that hue and apply it
to the marker gradient so that

00:16:20.200 --> 00:16:25.620
you use the hue of the main
marker to define the color of

00:16:25.620 --> 00:16:28.950
the markers, but not
too much work.

00:16:28.950 --> 00:16:31.170
So having the shape drawable,
though, is actually a nice

00:16:31.170 --> 00:16:31.820
thing to do.

00:16:31.820 --> 00:16:32.580
Thanks for joining me.

00:16:32.580 --> 00:16:34.570
I hope you found this
episode helpful.

00:16:34.570 --> 00:16:36.420
The code that I demoed
today is actually all

00:16:36.420 --> 00:16:37.270
available on GitHub.

00:16:37.270 --> 00:16:39.120
The link is below.

00:16:39.120 --> 00:16:41.050
We're going to continue to build
this application out in

00:16:41.050 --> 00:16:41.640
future episodes.

00:16:41.640 --> 00:16:44.130
So if you have any feedback,
you can provide either on

00:16:44.130 --> 00:16:46.320
GitHub, in the GitHub
repository, or

00:16:46.320 --> 00:16:47.860
on our Google+ page.

00:16:47.860 --> 00:16:50.480
We're happy to get all your
feedback and potentially

00:16:50.480 --> 00:16:52.685
implement those ideas
in future shows.

00:16:52.685 --> 00:16:53.935
So thanks again.

