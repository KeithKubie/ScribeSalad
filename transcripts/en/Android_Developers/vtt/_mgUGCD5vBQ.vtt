WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
[MUSIC PLAYING]

00:00:04.380 --> 00:00:07.530
MARK MANDEL: So, welcome to
Large Scale Multiplayer Gaming

00:00:07.530 --> 00:00:09.090
with Open Source.

00:00:09.090 --> 00:00:10.900
My name is Mark Mandel.

00:00:10.900 --> 00:00:14.060
I am a Developer Advocate
for Google Cloud for games.

00:00:14.060 --> 00:00:16.478
And we're here to talk about
some multiplayer game stuff.

00:00:16.478 --> 00:00:17.520
Does that sound like fun?

00:00:17.520 --> 00:00:18.340
AUDIENCE: Yeah!

00:00:18.340 --> 00:00:19.650
MARK MANDEL: Yay!

00:00:19.650 --> 00:00:20.220
Awesome.

00:00:20.220 --> 00:00:21.387
Wow, you really are excited.

00:00:21.387 --> 00:00:22.402
This is fantastic.

00:00:22.402 --> 00:00:23.110
All right, great.

00:00:23.110 --> 00:00:25.680
So before we get
started, I would

00:00:25.680 --> 00:00:28.740
love to know a bit more
about all of you, just

00:00:28.740 --> 00:00:31.330
so I can get a sense of who you
all are and what you all do.

00:00:31.330 --> 00:00:34.090
And we can tailor the
content a little bit.

00:00:34.090 --> 00:00:37.248
So how many people here
work in the games industry?

00:00:37.248 --> 00:00:38.290
Oh, a good number of you.

00:00:38.290 --> 00:00:39.460
Excellent, awesome.

00:00:39.460 --> 00:00:42.560
How many of you work
on multiplayer games?

00:00:42.560 --> 00:00:43.060
Cool.

00:00:43.060 --> 00:00:45.220
How many of you want to
work in multiplayer games?

00:00:45.220 --> 00:00:45.782
Some of you.

00:00:45.782 --> 00:00:47.740
How many people were just
like, games are cool,

00:00:47.740 --> 00:00:48.882
this sounds like fun?

00:00:48.882 --> 00:00:49.500
AUDIENCE: Woo.

00:00:49.500 --> 00:00:50.750
MARK MANDEL: That's fine, too.

00:00:50.750 --> 00:00:51.250
That's cool.

00:00:51.250 --> 00:00:53.612
All right, so we'll cover
some foundational stuff,

00:00:53.612 --> 00:00:54.320
and we'll cover--

00:00:54.320 --> 00:00:55.945
so we'll get deeper
into some projects.

00:00:55.945 --> 00:00:59.380
And we'll talk about some
interesting and fun things.

00:00:59.380 --> 00:01:01.900
So before we get
started, though, I

00:01:01.900 --> 00:01:04.860
want to put some constraints
on things a little bit.

00:01:04.860 --> 00:01:07.470
When we say the words
multiplayer games,

00:01:07.470 --> 00:01:11.550
that can be a very broad
and distributed set

00:01:11.550 --> 00:01:13.570
of games outside in the world.

00:01:13.570 --> 00:01:15.360
So I want to bring
that in a little.

00:01:15.360 --> 00:01:17.520
So the types of
multiplayer games

00:01:17.520 --> 00:01:23.130
that I want to talk about today
are your very fast-paced online

00:01:23.130 --> 00:01:25.270
competitive multiplayer games.

00:01:25.270 --> 00:01:27.590
So we're talking your
"Overwatches," your "Fortnites"

00:01:27.590 --> 00:01:30.300
your "Apex Legends," your
"Rocket Leagues," those kinds

00:01:30.300 --> 00:01:33.030
of really fast-paced,
latency sensitive,

00:01:33.030 --> 00:01:35.820
online, real time
multiplayer games.

00:01:35.820 --> 00:01:38.340
Those are the types of
games I want talk about.

00:01:38.340 --> 00:01:41.390
Because they have some
particularly unique constraints

00:01:41.390 --> 00:01:43.590
and have some particularly
unique problems that they

00:01:43.590 --> 00:01:46.750
need to have solved to
work in a reliable fashion.

00:01:46.750 --> 00:01:49.530
So we're going to actually
see this demo today.

00:01:49.530 --> 00:01:51.818
I actually use a
FPS called Xonotic.

00:01:51.818 --> 00:01:52.860
Anyone here know Xonotic?

00:01:52.860 --> 00:01:55.330
A couple people, awesome.

00:01:55.330 --> 00:01:56.670
It's an open source FPS.

00:01:56.670 --> 00:01:59.130
If anyone played, like,
Unreal Tournament 2000

00:01:59.130 --> 00:02:00.870
or any derivatives
from there, you're

00:02:00.870 --> 00:02:03.040
probably quite familiar
with how it works.

00:02:03.040 --> 00:02:04.050
It has Capture the Flag.

00:02:04.050 --> 00:02:06.880
It has a lot of the classic
modes, all that kind of stuff.

00:02:06.880 --> 00:02:08.380
And we'll have a
look at that later.

00:02:08.380 --> 00:02:11.940
But that's very much the vein
of the type of multiplayer games

00:02:11.940 --> 00:02:14.526
that I want to be
talking about today.

00:02:14.526 --> 00:02:19.170
So, traditionally, how do
these kind of games work?

00:02:19.170 --> 00:02:22.100
There are several models
for how to do this.

00:02:22.100 --> 00:02:24.800
But I want to talk about one
very particular one, commonly

00:02:24.800 --> 00:02:27.530
referred to as
dedicated game servers.

00:02:27.530 --> 00:02:30.530
Because it has become one of
the most prevalent patterns that

00:02:30.530 --> 00:02:34.080
is used in especially AAA
large scale multiplayer games.

00:02:34.080 --> 00:02:36.140
So what does this look like?

00:02:36.140 --> 00:02:40.100
So you might have, say, a couple
of players, who are like, hey,

00:02:40.100 --> 00:02:41.620
I would like to play a game.

00:02:41.620 --> 00:02:42.530
So, cool.

00:02:42.530 --> 00:02:44.740
They take their game
clients, and they usually

00:02:44.740 --> 00:02:48.710
connect to some kind
of matchmaking system.

00:02:48.710 --> 00:02:50.230
So this matchmaking
system's job is

00:02:50.230 --> 00:02:52.660
to potentially take maybe
hundreds of thousands

00:02:52.660 --> 00:02:55.460
of players, take them
all in and say, OK,

00:02:55.460 --> 00:02:58.180
let's look at things like
maybe their skill rating, maybe

00:02:58.180 --> 00:03:00.700
their social graph,
maybe other aspects

00:03:00.700 --> 00:03:03.400
of their gameplay
experience, and group them

00:03:03.400 --> 00:03:06.830
together into a single gameplay
like group that's going

00:03:06.830 --> 00:03:08.180
to be a good experience, right?

00:03:08.180 --> 00:03:12.260
Like group me with people who
are likewise in my skill level,

00:03:12.260 --> 00:03:13.960
so it's not an
unbalanced matched.

00:03:13.960 --> 00:03:15.428
Or if there are
particular friends

00:03:15.428 --> 00:03:17.470
that I like playing with
a lot, put them together

00:03:17.470 --> 00:03:19.758
because that's a really
fun experience for me.

00:03:19.758 --> 00:03:21.550
And so this is a really
interesting problem

00:03:21.550 --> 00:03:24.070
because you do have to
process potentially thousands

00:03:24.070 --> 00:03:27.350
upon hundreds of thousands
of players at once,

00:03:27.350 --> 00:03:30.130
but the idea being that, yeah,
let's get a good gameplay

00:03:30.130 --> 00:03:31.870
experience happening
between the players

00:03:31.870 --> 00:03:33.940
that we have available
that are online

00:03:33.940 --> 00:03:35.720
and waiting to play a game.

00:03:35.720 --> 00:03:38.140
So once we've solved
that hard problem, cool.

00:03:38.140 --> 00:03:40.870
We've grouped together
our game, our players.

00:03:40.870 --> 00:03:41.980
We've got a group.

00:03:41.980 --> 00:03:45.790
We then need to create a
dedicated game server for them

00:03:45.790 --> 00:03:46.750
to play on.

00:03:46.750 --> 00:03:49.270
So this could be a whole
talk unto of itself,

00:03:49.270 --> 00:03:51.100
but essentially, a
dedicated game server

00:03:51.100 --> 00:03:54.850
is a full simulation of what
happens inside your game,

00:03:54.850 --> 00:03:57.148
like where your players
are, what they're doing.

00:03:57.148 --> 00:03:57.940
It's authoritative.

00:03:57.940 --> 00:04:00.100
It tells everything what
it is that it needs to do.

00:04:00.100 --> 00:04:02.810
So once we have our
players together,

00:04:02.810 --> 00:04:07.270
we need to talk to some sort of
dedicated game server manager

00:04:07.270 --> 00:04:08.260
system.

00:04:08.260 --> 00:04:09.760
And this system's
job is potentially

00:04:09.760 --> 00:04:12.160
to talk to thousands
upon thousands

00:04:12.160 --> 00:04:15.269
of machines that are distributed
around the world, all right?

00:04:15.269 --> 00:04:17.769
Because we need to have these
machines close to our players.

00:04:17.769 --> 00:04:18.850
Because latency matters.

00:04:18.850 --> 00:04:20.510
It matters a lot.

00:04:20.510 --> 00:04:22.570
So we're going to talk
to thousands of machines

00:04:22.570 --> 00:04:24.730
around the world and
basically be like, OK, we

00:04:24.730 --> 00:04:26.870
need to spin up one of
these dedicated game

00:04:26.870 --> 00:04:28.360
server processes.

00:04:28.360 --> 00:04:29.830
And therefore,
like which one has

00:04:29.830 --> 00:04:31.900
memory, which one has
enough CPU, what's

00:04:31.900 --> 00:04:34.840
its latency metrics compared to
what my players are, et cetera.

00:04:34.840 --> 00:04:37.090
Spin it up, and then turn
around and be like, cool,

00:04:37.090 --> 00:04:37.900
it's spun up.

00:04:37.900 --> 00:04:40.150
Now we need an IPM port.

00:04:40.150 --> 00:04:41.720
Where is this thing located?

00:04:41.720 --> 00:04:44.760
So we have an IPM port for
this dedicated game server.

00:04:44.760 --> 00:04:47.530
Send all that information
way back up the pipe

00:04:47.530 --> 00:04:49.870
to those two players that
are wanting to play a game.

00:04:49.870 --> 00:04:53.140
And then they can make a direct
connection to that game server

00:04:53.140 --> 00:04:54.380
by the IPM port.

00:04:54.380 --> 00:04:57.460
So they can interact directly
with that in-memory simulation

00:04:57.460 --> 00:04:59.410
as that player plays the game.

00:04:59.410 --> 00:05:01.810
So, it's a lot of work.

00:05:01.810 --> 00:05:03.820
Usually speaking, a
lot of this is bespoke.

00:05:03.820 --> 00:05:06.400
Most companies generally
do this themselves.

00:05:06.400 --> 00:05:08.690
It's probably less than ideal.

00:05:08.690 --> 00:05:10.690
So the things I want
to talk about today

00:05:10.690 --> 00:05:14.822
is very much what if there was--

00:05:14.822 --> 00:05:16.030
whoops, sorry, I'll go back--

00:05:16.030 --> 00:05:18.670
what if there was some
sort of open source

00:05:18.670 --> 00:05:22.468
standard for
matchmaking, wherein

00:05:22.468 --> 00:05:24.510
you don't have to solve
some of the hard problems

00:05:24.510 --> 00:05:27.090
around how do I process hundreds
of thousands of players?

00:05:27.090 --> 00:05:29.130
Wouldn't that be kind of nice?

00:05:29.130 --> 00:05:31.557
By the same token,
wouldn't it be really nice

00:05:31.557 --> 00:05:34.140
if there was some sort of open
source standard for game server

00:05:34.140 --> 00:05:35.490
management, right?

00:05:35.490 --> 00:05:37.350
I don't really care
about how to distribute

00:05:37.350 --> 00:05:40.140
this workload geographically
and how do I process--

00:05:40.140 --> 00:05:42.370
like, orchestrate these
things going up and down.

00:05:42.370 --> 00:05:44.160
I just want to write
my game servers.

00:05:44.160 --> 00:05:46.260
So that's what we're
going to talk about today.

00:05:46.260 --> 00:05:47.640
Sound like fun?

00:05:47.640 --> 00:05:48.870
Good.

00:05:48.870 --> 00:05:50.970
Before we get started,
hands up, people here

00:05:50.970 --> 00:05:52.380
who know what Kubernetes is.

00:05:52.380 --> 00:05:54.420
A lot of you, fantastic.

00:05:54.420 --> 00:05:55.260
Awesome.

00:05:55.260 --> 00:05:57.690
Both of the projects
we're going to talk today

00:05:57.690 --> 00:05:59.610
are heavily based on Kubernetes.

00:05:59.610 --> 00:06:02.288
But I want to bring it up for
three very important reasons.

00:06:02.288 --> 00:06:04.080
Now if you're not
familiar with Kubernetes,

00:06:04.080 --> 00:06:06.390
at a very core level, the
way I like to explain it,

00:06:06.390 --> 00:06:08.610
is a system for
programmatically being

00:06:08.610 --> 00:06:12.155
able to run software across
lots and lots of machines.

00:06:12.155 --> 00:06:14.530
Everything else on top of that
is really just nice sugar,

00:06:14.530 --> 00:06:16.590
but it's open source and
you can run it anywhere.

00:06:16.590 --> 00:06:19.290
And this is super
important because when

00:06:19.290 --> 00:06:21.030
latency counts for
multiplayer games,

00:06:21.030 --> 00:06:22.800
being able to put
your infrastructure

00:06:22.800 --> 00:06:26.130
close to your player base,
super, super important.

00:06:26.130 --> 00:06:28.500
So the projects I'm talking
about today are open source,

00:06:28.500 --> 00:06:29.833
and they will run on Kubernetes.

00:06:29.833 --> 00:06:32.730
And you can run Kubernetes
wherever it is you need to.

00:06:32.730 --> 00:06:35.910
So that means then if you want
to run it on us, like GKE,

00:06:35.910 --> 00:06:37.590
awesome, love it, great.

00:06:37.590 --> 00:06:39.532
But if you have
coverage, like maybe

00:06:39.532 --> 00:06:41.490
in particular areas of
the world where you just

00:06:41.490 --> 00:06:43.950
happen to have a player
base we don't cover so well,

00:06:43.950 --> 00:06:46.650
you can run it there on your
own hardware, on another cloud.

00:06:46.650 --> 00:06:48.000
That's really, really important.

00:06:48.000 --> 00:06:50.460
By the same token, you want to
run it in your own QA centers,

00:06:50.460 --> 00:06:52.127
you want to run it
on your own machines,

00:06:52.127 --> 00:06:54.160
you can totally do that as well.

00:06:54.160 --> 00:06:56.040
Secondly, this is
also really important.

00:06:56.040 --> 00:06:58.828
Standing on the shoulders of
giants, obviously, many of you

00:06:58.828 --> 00:06:59.370
are familiar.

00:06:59.370 --> 00:07:01.770
Kubernetes has a huge
number of developers

00:07:01.770 --> 00:07:05.100
working on it and a massive
ecosystem surrounding it.

00:07:05.100 --> 00:07:07.780
So we can take advantage
of all those tools as well.

00:07:07.780 --> 00:07:10.830
Finally, simplicity is
really important, too.

00:07:10.830 --> 00:07:13.080
Usually, I talk to
a lot of customers.

00:07:13.080 --> 00:07:14.670
And usually when I
talk to customers,

00:07:14.670 --> 00:07:17.340
they have one system for
their account management,

00:07:17.340 --> 00:07:19.200
and their marketplace,
and their inventory,

00:07:19.200 --> 00:07:20.483
and their player systems.

00:07:20.483 --> 00:07:22.650
And then when it comes to
multiplayer dedicated game

00:07:22.650 --> 00:07:25.540
servers, they're a
completely different system.

00:07:25.540 --> 00:07:29.640
If we can solidify on one base
platform for all our systems

00:07:29.640 --> 00:07:32.610
across the board, that's a lot
less ops knowledge, a lot less

00:07:32.610 --> 00:07:34.050
difference in tooling.

00:07:34.050 --> 00:07:36.300
Really, we can
really just not have

00:07:36.300 --> 00:07:38.790
to contextually switch as
we operate from one platform

00:07:38.790 --> 00:07:40.180
to another.

00:07:40.180 --> 00:07:41.200
Cool.

00:07:41.200 --> 00:07:43.180
Kubernetes gets me very excited.

00:07:43.180 --> 00:07:43.690
Fantastic.

00:07:43.690 --> 00:07:45.280
So let's get stuck into
the types of projects

00:07:45.280 --> 00:07:46.300
we want to talk about.

00:07:46.300 --> 00:07:48.970
So we were talking
about matchmaking.

00:07:48.970 --> 00:07:51.000
Open Match is a
project that came out,

00:07:51.000 --> 00:07:53.680
I want to say somewhere between
six to eight months ago.

00:07:53.680 --> 00:07:56.530
It's an open source
matchmaking framework.

00:07:56.530 --> 00:07:59.590
And I want to emphasize
the term framework here.

00:07:59.590 --> 00:08:02.200
It is built with flexibility,
scalability, and extensibility.

00:08:02.200 --> 00:08:03.290
What does that mean?

00:08:03.290 --> 00:08:06.970
Basically, we want to solve the
hard problems for matchmaking,

00:08:06.970 --> 00:08:09.970
but still allow you to
provide your custom match

00:08:09.970 --> 00:08:11.350
logic in the way
that makes sense

00:08:11.350 --> 00:08:15.020
for your game and your players.

00:08:15.020 --> 00:08:16.840
So horizontal
scalability, that stuff

00:08:16.840 --> 00:08:18.700
shouldn't be a problem for you.

00:08:18.700 --> 00:08:21.370
Really just focusing on
exactly the gameplay experience

00:08:21.370 --> 00:08:24.250
you want-- that's the
thing we care about.

00:08:24.250 --> 00:08:26.950
So, we're very flexible.

00:08:26.950 --> 00:08:29.100
We allow you to provide
attributes for your players

00:08:29.100 --> 00:08:30.517
as they come in
and out, basically

00:08:30.517 --> 00:08:31.860
arbitrarily as you need.

00:08:31.860 --> 00:08:34.650
And custom match
functions-- essentially,

00:08:34.650 --> 00:08:37.228
if you can put it inside
a Docker container,

00:08:37.228 --> 00:08:38.520
you can write a match function.

00:08:38.520 --> 00:08:40.980
So we don't restrict you in any
way in terms of what language

00:08:40.980 --> 00:08:43.272
you want to write it in, what
platform you write it in.

00:08:43.272 --> 00:08:45.210
As long as you can put
it inside a container,

00:08:45.210 --> 00:08:46.002
you are good to go.

00:08:49.000 --> 00:08:50.530
And the big thing
I think that gets

00:08:50.530 --> 00:08:52.900
me most excited about
Open Match is really

00:08:52.900 --> 00:08:55.760
the way it works concurrently.

00:08:55.760 --> 00:08:58.180
What we've seen traditionally
in matchmakers quite often,

00:08:58.180 --> 00:08:59.523
they hit certain scaling limits.

00:08:59.523 --> 00:09:01.690
And that was a problem we
very much wanted to solve.

00:09:01.690 --> 00:09:03.680
And I'll show a demo in
a little bit about this.

00:09:03.680 --> 00:09:05.513
But really, what we
want to be able to solve

00:09:05.513 --> 00:09:08.320
those hard problems of like,
I have a 100,000 players

00:09:08.320 --> 00:09:08.965
coming in.

00:09:08.965 --> 00:09:10.840
How do I concurrently
process match functions

00:09:10.840 --> 00:09:11.800
over these things?

00:09:11.800 --> 00:09:13.720
We want to solve
those problems for you

00:09:13.720 --> 00:09:18.860
and leave that kind of more game
specific stuff to yourselves.

00:09:18.860 --> 00:09:20.476
So we'll have a look at that.

00:09:20.476 --> 00:09:23.075
So, doo doo doo doo doo.

00:09:23.075 --> 00:09:25.305
If we can switch over to
my demo screen, please.

00:09:29.730 --> 00:09:30.350
Wonderful.

00:09:30.350 --> 00:09:31.320
Thank you so much.

00:09:31.320 --> 00:09:35.320
All right, so I have an
empty Kubernetes cluster.

00:09:35.320 --> 00:09:37.470
As you can see, it's
not entirely empty.

00:09:37.470 --> 00:09:39.350
I do have-- there we go.

00:09:42.040 --> 00:09:44.378
If I get config maps.

00:09:44.378 --> 00:09:46.920
I do have the configuration for
Open Match already installed.

00:09:46.920 --> 00:09:48.370
It's just the
standard config map

00:09:48.370 --> 00:09:51.130
that you get with the example,
but with debugging turned off.

00:09:51.130 --> 00:09:52.680
And I'm going to
install Open Match.

00:09:52.680 --> 00:09:57.720
So those not familiar--
not my example, sorry--

00:09:57.720 --> 00:10:00.610
we're just going to
install some YAML files.

00:10:00.610 --> 00:10:04.753
So Open Match uses Redis for
its persistent data store.

00:10:04.753 --> 00:10:06.170
You can either use
one in cluster,

00:10:06.170 --> 00:10:08.128
which we're going to do
here, or you could also

00:10:08.128 --> 00:10:12.410
use something like Memorystore
or any other managed Redis.

00:10:16.190 --> 00:10:16.700
Beautiful.

00:10:16.700 --> 00:10:18.980
And that's going to install
a bunch of stuff, right?

00:10:18.980 --> 00:10:19.580
And that's really it.

00:10:19.580 --> 00:10:21.080
There's nothing much
more else to it.

00:10:21.080 --> 00:10:22.910
There's a bunch of components
inside Open Match that

00:10:22.910 --> 00:10:25.040
are configurable, and we can
mix and match a few things.

00:10:25.040 --> 00:10:26.957
I'm not going to talk
too much about it today,

00:10:26.957 --> 00:10:27.960
but those exist.

00:10:27.960 --> 00:10:32.260
Now I'm going to copy paste here
because these are big commands.

00:10:32.260 --> 00:10:36.460
And we're going to put some
players inside Open Match.

00:10:36.460 --> 00:10:39.010
So what we're going to
do here is basically

00:10:39.010 --> 00:10:41.935
put in seven cycles of
10,000 game players,

00:10:41.935 --> 00:10:44.450
or 10,000 generated
players for us.

00:10:44.450 --> 00:10:46.540
Take a little second
for it to come up.

00:10:46.540 --> 00:10:47.830
Come on, run.

00:10:47.830 --> 00:10:51.340
So we're going to
spin up 70,000 players

00:10:51.340 --> 00:10:56.660
and insert those inside
our Open Match cluster.

00:10:59.400 --> 00:11:02.020
You know you want to work.

00:11:02.020 --> 00:11:04.252
The demo gods apparently
love me today.

00:11:04.252 --> 00:11:05.210
Come on, you can do it.

00:11:05.210 --> 00:11:07.220
I believe in you.

00:11:07.220 --> 00:11:08.190
There we go.

00:11:08.190 --> 00:11:08.690
There we go.

00:11:08.690 --> 00:11:11.600
Took a second.

00:11:11.600 --> 00:11:12.290
There we go.

00:11:12.290 --> 00:11:12.820
Wonderful.

00:11:12.820 --> 00:11:15.260
OK, so this is generating
10,000 players.

00:11:15.260 --> 00:11:16.760
We'll see a few
numbers of these.

00:11:16.760 --> 00:11:17.090
There we go.

00:11:17.090 --> 00:11:17.750
So there we go.

00:11:17.750 --> 00:11:18.470
Beautiful.

00:11:18.470 --> 00:11:20.180
Obviously, it hadn't downloaded
the image for a while,

00:11:20.180 --> 00:11:21.638
so that was taking
a little second.

00:11:21.638 --> 00:11:24.210
So that's now generating
some players, right?

00:11:24.210 --> 00:11:29.049
So 70,000, not a bad number.

00:11:29.049 --> 00:11:30.538
Here we go, here
we go, here we go.

00:11:30.538 --> 00:11:33.080
So while it's doing that, I'm
going to grab the next command.

00:11:33.080 --> 00:11:34.872
So what we're going to
do is we're actually

00:11:34.872 --> 00:11:39.100
going to run some matchmaking
once this is done.

00:11:39.100 --> 00:11:42.042
So you can actually see
the concurrency in action.

00:11:42.042 --> 00:11:45.530
All right, so we have
70,000 players, beautiful.

00:11:45.530 --> 00:11:47.432
All right, give me bash.

00:11:47.432 --> 00:11:49.640
Lovely, and I'm going to
steal this command because I

00:11:49.640 --> 00:11:51.500
can never remember how it goes.

00:11:51.500 --> 00:11:54.890
Wonderful.

00:11:54.890 --> 00:11:56.812
So what I'm going
to do is-- whoops.

00:11:56.812 --> 00:11:58.520
That takes a second
to come up sometimes.

00:11:58.520 --> 00:11:59.770
Let me run that again.

00:11:59.770 --> 00:12:00.710
There we go.

00:12:00.710 --> 00:12:02.540
That ran really quickly.

00:12:02.540 --> 00:12:05.110
So what we did there is we ran--

00:12:05.110 --> 00:12:07.440
let me scroll up.

00:12:07.440 --> 00:12:09.770
We ran a matchmaking
function, just a really simple

00:12:09.770 --> 00:12:13.137
matchmaking function that
we have inside the example.

00:12:13.137 --> 00:12:14.720
And we ran it with
a concurrency of 2.

00:12:14.720 --> 00:12:16.643
All right, just
concurrency of 2.

00:12:16.643 --> 00:12:18.560
And what we're actually
doing is we're looking

00:12:18.560 --> 00:12:20.030
for groups of 16 players.

00:12:22.355 --> 00:12:23.730
And so it's going
to run through.

00:12:23.730 --> 00:12:24.760
It's splitting that up.

00:12:24.760 --> 00:12:27.520
That's just really not
the best wrapping there.

00:12:27.520 --> 00:12:29.310
But you can see that
we're splitting it

00:12:29.310 --> 00:12:31.050
up into teams of 16.

00:12:31.050 --> 00:12:33.390
And then it splits it
up into four pools,

00:12:33.390 --> 00:12:36.765
each of about 14,000 players.

00:12:36.765 --> 00:12:38.640
And unsurprisingly, this
is pretty successful

00:12:38.640 --> 00:12:40.980
trying to find groups
of 16 inside 14,000.

00:12:40.980 --> 00:12:43.920
We have quite a
few to choose from.

00:12:43.920 --> 00:12:46.260
We have number of successes, 4.

00:12:46.260 --> 00:12:47.460
64 players matched.

00:12:47.460 --> 00:12:50.200
And we have a throughput of
about 26 players per second,

00:12:50.200 --> 00:12:52.110
which is not a lot,
but we can do better.

00:12:52.110 --> 00:12:55.890
So, let's actually
do the same thing,

00:12:55.890 --> 00:12:58.750
but let's bump that number
up to a concurrency of 20.

00:12:58.750 --> 00:13:02.425
So this usually
takes 10, 20 seconds.

00:13:02.425 --> 00:13:04.800
You'll start to see here,
it'll say insufficient players.

00:13:04.800 --> 00:13:06.960
That's because some of
our players' pool sizes

00:13:06.960 --> 00:13:08.290
are less than 16.

00:13:08.290 --> 00:13:11.410
And that happens in some
cases, and that's fine.

00:13:11.410 --> 00:13:14.068
But it's going to break apart
all the players that we have.

00:13:14.068 --> 00:13:15.110
And this is configurable.

00:13:15.110 --> 00:13:17.710
You can kind of play with
how things get broken apart.

00:13:17.710 --> 00:13:20.620
And then process a much
larger number of players,

00:13:20.620 --> 00:13:24.750
allowing us to get much better
throughput inside Open Match.

00:13:24.750 --> 00:13:25.250
There we go.

00:13:25.250 --> 00:13:26.180
All right, beautiful.

00:13:26.180 --> 00:13:27.860
So now we can see
here, we've actually

00:13:27.860 --> 00:13:30.270
matched about 4,200 players--

00:13:30.270 --> 00:13:33.930
a little better than the
64 odd we had before.

00:13:33.930 --> 00:13:35.450
Now we can get
through a throughput

00:13:35.450 --> 00:13:37.470
of more like 168
players per second.

00:13:37.470 --> 00:13:40.310
So this is how we can start to
distribute the workload of what

00:13:40.310 --> 00:13:42.800
happens inside Open
Match to be able to get

00:13:42.800 --> 00:13:44.223
higher throughput without--

00:13:44.223 --> 00:13:45.890
we really didn't have
to change anything

00:13:45.890 --> 00:13:47.330
inside our matching function.

00:13:47.330 --> 00:13:49.190
We just changed our
concurrency, which

00:13:49.190 --> 00:13:51.397
means we get some much
nicer massive throughput.

00:13:51.397 --> 00:13:52.730
Can we go back to slides please?

00:13:57.480 --> 00:13:58.910
Awesome.

00:13:58.910 --> 00:14:02.645
All right, so this is
a bit better, right?

00:14:02.645 --> 00:14:04.270
We didn't have to
write our matchmaker.

00:14:04.270 --> 00:14:05.770
Instead, with this
custom matchmaker

00:14:05.770 --> 00:14:08.770
we've put in Open Match, we
use common open source things

00:14:08.770 --> 00:14:11.210
like Redis, which many of you
are probably familiar with.

00:14:11.210 --> 00:14:14.410
And we're able to insert
Kubernetes and install

00:14:14.410 --> 00:14:16.390
Open Match on top of
that Kubernetes cluster

00:14:16.390 --> 00:14:18.030
as a customer appliance.

00:14:18.030 --> 00:14:19.040
And we're good to go.

00:14:19.040 --> 00:14:24.085
But that's great.

00:14:24.085 --> 00:14:25.960
We can still do the same
thing we had before,

00:14:25.960 --> 00:14:29.620
where we had players connecting
to dedicated game servers.

00:14:29.620 --> 00:14:31.620
Whoops, I want that sign.

00:14:31.620 --> 00:14:32.430
There we go.

00:14:32.430 --> 00:14:35.520
But we still have this
Server Manager, yeah?

00:14:35.520 --> 00:14:38.430
We still have this
bespoke thing that it

00:14:38.430 --> 00:14:42.630
would be really nice if I didn't
have to build, quite honestly.

00:14:42.630 --> 00:14:45.320
So this is where
we get into Agones.

00:14:45.320 --> 00:14:47.960
So Agones is another
open source project.

00:14:47.960 --> 00:14:50.180
It was built in
collaboration with Ubisoft.

00:14:50.180 --> 00:14:53.840
And it is an open source
project for hosting, scaling,

00:14:53.840 --> 00:14:57.033
and orchestrating dedicated game
servers on top of Kubernetes.

00:14:57.033 --> 00:14:58.950
I'm sure that wasn't
surprising at this point.

00:14:58.950 --> 00:15:00.825
I'm sure many of you
were seeing that coming.

00:15:03.117 --> 00:15:04.700
It's been a really
great collaboration

00:15:04.700 --> 00:15:05.660
between us and Ubisoft.

00:15:05.660 --> 00:15:07.257
I just want to highlight it.

00:15:07.257 --> 00:15:09.590
They've been able to bring
their institutional knowledge

00:15:09.590 --> 00:15:12.470
about how to run dedicated game
servers in large multiplayer

00:15:12.470 --> 00:15:13.757
games over to us.

00:15:13.757 --> 00:15:16.090
And we've been able to bring
our knowledge of Kubernetes

00:15:16.090 --> 00:15:17.555
and open source.

00:15:17.555 --> 00:15:18.930
And it's just been
really lovely.

00:15:18.930 --> 00:15:20.840
I have to be completely
honest with you.

00:15:20.840 --> 00:15:24.650
So, super delighted to be
working with them on this.

00:15:24.650 --> 00:15:27.420
So, let's look at
how Agones works.

00:15:27.420 --> 00:15:30.660
Very similarly, right, if you
have a dedicated game server

00:15:30.660 --> 00:15:32.430
and you can put it
inside a container,

00:15:32.430 --> 00:15:33.390
you are pretty much good to go.

00:15:33.390 --> 00:15:33.840
All right?

00:15:33.840 --> 00:15:35.757
I assume we're all fairly
familiar with Docker

00:15:35.757 --> 00:15:36.370
containers.

00:15:36.370 --> 00:15:38.078
That's something we're
all familiar with.

00:15:38.078 --> 00:15:38.610
Awesome.

00:15:38.610 --> 00:15:42.000
There is a dedicated SDK
that needs to be integrated

00:15:42.000 --> 00:15:43.820
in some way, shape, or form.

00:15:43.820 --> 00:15:46.780
That SDK tells us things like,
hey, this game server is ready,

00:15:46.780 --> 00:15:49.440
whether it's healthy or not,
access to configuration,

00:15:49.440 --> 00:15:50.420
things like that.

00:15:50.420 --> 00:15:51.670
But this is pretty easy to do.

00:15:51.670 --> 00:15:54.590
It's not an onerous task.

00:15:54.590 --> 00:15:57.740
We already support a variety
of languages, including C++,

00:15:57.740 --> 00:15:59.600
and Node, and Rust.

00:15:59.600 --> 00:16:02.150
But it is all GRPC
and/or REST based.

00:16:02.150 --> 00:16:04.010
So the short answer
is, if you have

00:16:04.010 --> 00:16:06.590
a game server in any
language, we can support it.

00:16:06.590 --> 00:16:07.430
You'll be fine.

00:16:07.430 --> 00:16:10.898
Actually, the unreal SDK will
be coming out this afternoon,

00:16:10.898 --> 00:16:12.440
once I put the
release candidate out.

00:16:12.440 --> 00:16:13.635
So that'll be nice, too.

00:16:13.635 --> 00:16:17.240
We have more stuff coming, yeah.

00:16:17.240 --> 00:16:21.080
So, hands up people here who
have written Kubernetes YAML

00:16:21.080 --> 00:16:22.550
files?

00:16:22.550 --> 00:16:23.630
Many of you, cool.

00:16:23.630 --> 00:16:24.860
If you haven't, that's fine.

00:16:24.860 --> 00:16:26.810
It's like one of
the declarative ways

00:16:26.810 --> 00:16:30.020
that you can tell
Kubernetes to do stuff.

00:16:30.020 --> 00:16:31.680
Anything you see
here in a YAML file,

00:16:31.680 --> 00:16:34.250
you can also do it directly
through the Kubernetes API

00:16:34.250 --> 00:16:35.880
as well.

00:16:35.880 --> 00:16:39.560
So, once you install Agones,
what it actually is doing

00:16:39.560 --> 00:16:43.970
is extending Kubernetes itself
to provide it new nouns--

00:16:43.970 --> 00:16:45.680
basically, new
actions that it knows

00:16:45.680 --> 00:16:47.543
how to do things with natively.

00:16:47.543 --> 00:16:49.460
And this is like one of
the really cool things

00:16:49.460 --> 00:16:51.960
about Kubernetes, is standing
of the shoulder of giants that

00:16:51.960 --> 00:16:53.970
gets me very, very excited.

00:16:53.970 --> 00:16:56.750
So once you install
Agones, it understands

00:16:56.750 --> 00:16:57.950
what a game server is.

00:16:57.950 --> 00:17:02.350
And it understands game
server life cycles.

00:17:02.350 --> 00:17:04.579
And this is really important
because game servers

00:17:04.579 --> 00:17:08.359
are kind of special in that when
you don't have players on game

00:17:08.359 --> 00:17:11.240
servers, and you spin them up,
if you delete game servers that

00:17:11.240 --> 00:17:14.849
don't have players on
them, nobody seems to mind.

00:17:14.849 --> 00:17:17.690
But when you delete game servers
that do have players on them,

00:17:17.690 --> 00:17:19.859
players seem to mind a lot.

00:17:19.859 --> 00:17:22.359
If they get their game shut
down in the middle of their game

00:17:22.359 --> 00:17:25.190
play experience,
they're not happy.

00:17:25.190 --> 00:17:26.361
They post things on Reddit.

00:17:26.361 --> 00:17:28.069
They tend to write
things, Steam reviews.

00:17:28.069 --> 00:17:30.020
It's just bad for everyone.

00:17:30.020 --> 00:17:32.870
So once we have this installed,
suddenly, Agones really

00:17:32.870 --> 00:17:35.150
does understand, oh,
there are players on here.

00:17:35.150 --> 00:17:37.440
We'll have a look at that
a little bit later as well.

00:17:37.440 --> 00:17:40.310
So here, we define
a game server.

00:17:40.310 --> 00:17:42.210
We can give it a name,
a referenceable name,

00:17:42.210 --> 00:17:44.930
or even have it
create one for us.

00:17:44.930 --> 00:17:48.210
We can specify the port
policies we want to have.

00:17:48.210 --> 00:17:50.390
Agones will manage
dynamic port allocation,

00:17:50.390 --> 00:17:54.030
so we can do that direct
connection we saw earlier.

00:17:54.030 --> 00:17:56.240
And then finally, we
specify the container

00:17:56.240 --> 00:17:58.550
that we want our
game server to be.

00:17:58.550 --> 00:18:00.980
For those of you who are more
familiar with Kubernetes,

00:18:00.980 --> 00:18:02.880
you can run a full
pod spec here as well.

00:18:02.880 --> 00:18:05.900
So if you want to run multiple
containers, or volume mounts,

00:18:05.900 --> 00:18:10.010
or config maps, or any of that
cool stuff, you totally can.

00:18:10.010 --> 00:18:13.340
But we can do better than
just individual game servers

00:18:13.340 --> 00:18:15.260
as well.

00:18:15.260 --> 00:18:17.570
We can do fleets
of game servers.

00:18:17.570 --> 00:18:20.065
So traditionally speaking,
what you probably

00:18:20.065 --> 00:18:21.440
want to do with
your game servers

00:18:21.440 --> 00:18:24.530
is spin them up and have
a warm set ready to go,

00:18:24.530 --> 00:18:26.510
waiting for players to come in.

00:18:26.510 --> 00:18:29.040
Game servers can take a
little while to spin up.

00:18:29.040 --> 00:18:32.250
So you want to have those
sitting there ready to go.

00:18:32.250 --> 00:18:35.780
So if people are familiar
with pods and deployments,

00:18:35.780 --> 00:18:37.050
very similar.

00:18:37.050 --> 00:18:39.810
We have game servers and fleets.

00:18:39.810 --> 00:18:43.400
So fleets are just
lots of game servers.

00:18:43.400 --> 00:18:45.950
We specify how many
replicas we want,

00:18:45.950 --> 00:18:49.250
and then we specify a
game server specification.

00:18:49.250 --> 00:18:51.680
And it's the job of the
fleet to ensure that we

00:18:51.680 --> 00:18:53.810
have lots of these ready to go.

00:18:53.810 --> 00:18:54.650
That's really it.

00:18:54.650 --> 00:18:57.470
If one of them falls over
or maybe one of them ends,

00:18:57.470 --> 00:18:59.330
we make sure we have
another one spun up,

00:18:59.330 --> 00:19:01.850
and it keeps them
alive and healthy.

00:19:01.850 --> 00:19:03.800
So here we have the
Xonotic game server here,

00:19:03.800 --> 00:19:07.570
and we have two replicas
of it available.

00:19:07.570 --> 00:19:09.740
Now, this is the fun
thing, and I think,

00:19:09.740 --> 00:19:12.870
again, something particular
to game servers themselves.

00:19:12.870 --> 00:19:14.540
We don't have load
balancers, right?

00:19:14.540 --> 00:19:17.210
So how do we get
players to a game server

00:19:17.210 --> 00:19:21.170
and mark it as, hey, players
are playing on this thing?

00:19:21.170 --> 00:19:24.050
So we have this concept of
what we call allocation.

00:19:24.050 --> 00:19:26.100
So here, I show it
as the YAML file.

00:19:26.100 --> 00:19:28.820
You would probably do it
if you are implementing it

00:19:28.820 --> 00:19:31.520
programmatically through
the Kubernetes API.

00:19:31.520 --> 00:19:36.080
But I say to
Agones, hey, I would

00:19:36.080 --> 00:19:38.660
like to create me an
allocation, please.

00:19:38.660 --> 00:19:42.080
Grab me a game server in
this particular instance out

00:19:42.080 --> 00:19:44.990
of the Xonotic fleet,
and mark it as allocated.

00:19:44.990 --> 00:19:46.510
And do it for me atomically.

00:19:46.510 --> 00:19:47.660
And do it for me safely.

00:19:47.660 --> 00:19:49.025
Right?

00:19:49.025 --> 00:19:50.900
That's an interesting
and fun problem, right?

00:19:50.900 --> 00:19:52.520
Other things could be
happening to your servers.

00:19:52.520 --> 00:19:53.990
They could be
coming up and down.

00:19:53.990 --> 00:19:56.330
But Agones solves that sort
of infrastructure problem

00:19:56.330 --> 00:19:59.270
of saying, oh, yeah, you've
got like 10,000 game servers

00:19:59.270 --> 00:20:00.280
running in this cluster.

00:20:00.280 --> 00:20:00.780
Awesome.

00:20:00.780 --> 00:20:02.540
Here's one that's safe, right?

00:20:02.540 --> 00:20:04.185
And it's now marked
as allocated.

00:20:04.185 --> 00:20:05.810
And so we know there
are players on it.

00:20:08.520 --> 00:20:10.320
So why don't I show
you that in action?

00:20:10.320 --> 00:20:11.560
Would that be kind of fun?

00:20:11.560 --> 00:20:12.200
Sweet.

00:20:12.200 --> 00:20:13.670
All right, can we switch
back over to demo?

00:20:13.670 --> 00:20:14.380
We already have.

00:20:14.380 --> 00:20:16.020
Oh, you're all amazing.

00:20:16.020 --> 00:20:20.013
So first thing I want
to do is install Agones.

00:20:20.013 --> 00:20:20.930
I'm going to use Helm.

00:20:20.930 --> 00:20:24.140
Helm's a package
manager for Kubernetes.

00:20:24.140 --> 00:20:27.320
So if you've ever used anything
like Yum, or Apt, or Homebrew,

00:20:27.320 --> 00:20:30.190
very much in that vein.

00:20:30.190 --> 00:20:33.410
So I'm just going
to install Agones.

00:20:33.410 --> 00:20:34.160
I like Helm.

00:20:34.160 --> 00:20:35.018
Helm's great.

00:20:35.018 --> 00:20:36.560
So it's going to
take the Helm chart.

00:20:36.560 --> 00:20:37.330
It's going to install it.

00:20:37.330 --> 00:20:38.260
Boom, there we go.

00:20:38.260 --> 00:20:41.200
It was literally that
easy, which is lovely.

00:20:41.200 --> 00:20:45.860
I can actually show
you, get pods namespace.

00:20:45.860 --> 00:20:48.110
We can now see that we have
several components already

00:20:48.110 --> 00:20:48.902
just sitting there.

00:20:48.902 --> 00:20:50.460
These are just the
parts of Agones.

00:20:50.460 --> 00:20:53.220
We actually really don't
care about them too much.

00:20:53.220 --> 00:20:56.570
So let's write, let's
run a Xonotic fleet,

00:20:56.570 --> 00:20:58.500
like we just saw earlier, right?

00:20:58.500 --> 00:21:03.790
So I can apply -f
examples/xonotic/fleet.yaml.

00:21:03.790 --> 00:21:04.490
Boom.

00:21:04.490 --> 00:21:05.300
OK, cool.

00:21:05.300 --> 00:21:06.590
So this creates a fleet.

00:21:06.590 --> 00:21:09.170
Now what's really cool about
extending Kubernetes as well,

00:21:09.170 --> 00:21:11.180
is all the extensions
go through the API,

00:21:11.180 --> 00:21:12.870
all the way down to the tooling.

00:21:12.870 --> 00:21:16.360
So I can now say get fleets.

00:21:16.360 --> 00:21:17.658
And it can show me fleets.

00:21:17.658 --> 00:21:19.200
And we'll see things,
like, oh, cool,

00:21:19.200 --> 00:21:20.947
we have two desired, awesome.

00:21:20.947 --> 00:21:22.030
That's what we had before.

00:21:22.030 --> 00:21:23.143
And two of them are ready.

00:21:23.143 --> 00:21:25.060
We can also look at them
slightly differently.

00:21:25.060 --> 00:21:27.064
We can also see game server.

00:21:27.064 --> 00:21:27.564
Right?

00:21:27.564 --> 00:21:29.939
We can see we have two that
are available and ready to go

00:21:29.939 --> 00:21:30.640
as well.

00:21:30.640 --> 00:21:31.420
That's awesome.

00:21:31.420 --> 00:21:32.925
But two games servers, boring.

00:21:32.925 --> 00:21:33.550
Let's get more.

00:21:35.893 --> 00:21:36.810
Let's scale our fleet.

00:21:39.723 --> 00:21:41.140
Also, I don't know
if you noticed,

00:21:41.140 --> 00:21:42.880
but I get tab
completion on here, too.

00:21:42.880 --> 00:21:45.280
I love this.

00:21:45.280 --> 00:21:48.440
Say, like 200 game servers,
that's way more fun, right?

00:21:48.440 --> 00:21:50.480
Much better number.

00:21:50.480 --> 00:21:53.197
And we can look at this in
a couple of different ways.

00:21:53.197 --> 00:21:54.530
So here, we have a fleet, right?

00:21:54.530 --> 00:21:55.550
We currently have 200.

00:21:55.550 --> 00:21:57.890
They're going to start
coming up to becoming ready.

00:21:57.890 --> 00:21:58.973
They spin up really quick.

00:21:58.973 --> 00:22:00.350
There we go, 57 looking great.

00:22:00.350 --> 00:22:01.580
Lovely.

00:22:01.580 --> 00:22:04.250
If we come across to
here, you can actually

00:22:04.250 --> 00:22:06.230
also start to see
some of the metrics

00:22:06.230 --> 00:22:09.120
that we have available
to us as well.

00:22:09.120 --> 00:22:12.543
This usually runs a
little bit behind.

00:22:12.543 --> 00:22:13.960
Because it pulls
every 30 seconds.

00:22:13.960 --> 00:22:15.010
It'll pick up in a sec.

00:22:15.010 --> 00:22:18.730
But we can start seeing things
like rate type, how many game

00:22:18.730 --> 00:22:21.952
servers we have, what state
they're in, count per type.

00:22:21.952 --> 00:22:23.410
So all the sort of
metrics that you

00:22:23.410 --> 00:22:26.020
need as well for running
game servers at scale

00:22:26.020 --> 00:22:28.758
come bundled in with Agones.

00:22:28.758 --> 00:22:30.800
Similarly, you have similar
things in Open Match.

00:22:30.800 --> 00:22:33.467
But these are the sort of things
that you shouldn't have to care

00:22:33.467 --> 00:22:35.240
about as a game developer.

00:22:35.240 --> 00:22:37.120
This should just be
stuff that you all need.

00:22:37.120 --> 00:22:39.700
How many game servers you're
running is a standard metric

00:22:39.700 --> 00:22:41.500
we should all just have.

00:22:41.500 --> 00:22:45.235
This shouldn't be stuff that
you have to build yourself.

00:22:45.235 --> 00:22:46.610
So we can see all
sorts of stuff.

00:22:46.610 --> 00:22:48.880
And this is just one dashboard
out of many dashboards

00:22:48.880 --> 00:22:50.640
that we have inside Agones.

00:22:53.508 --> 00:22:54.675
So we have a look over here.

00:22:54.675 --> 00:22:56.300
OK, so this is actually
the dashboard's

00:22:56.300 --> 00:22:57.330
running slightly behind.

00:22:57.330 --> 00:22:58.710
But we can see we
have 200 ready.

00:22:58.710 --> 00:23:00.030
That's amazing.

00:23:00.030 --> 00:23:01.017
So let's allocate.

00:23:01.017 --> 00:23:01.600
Let's do that.

00:23:01.600 --> 00:23:03.360
That'll be fun.

00:23:03.360 --> 00:23:07.680
Create -f examples/xonotic
/gameserverallocation.

00:23:07.680 --> 00:23:10.890
So I would probably normally
do this through an API,

00:23:10.890 --> 00:23:11.760
like I keep saying.

00:23:11.760 --> 00:23:13.593
But I'm going to do it
through the YAML file

00:23:13.593 --> 00:23:15.240
because that's what
used to using here.

00:23:15.240 --> 00:23:16.740
And I'm just going
to write -o yaml,

00:23:16.740 --> 00:23:19.770
so we can see the response
when it finally finishes.

00:23:19.770 --> 00:23:20.640
So boom.

00:23:20.640 --> 00:23:22.847
OK, so that's given us
an allocated game server.

00:23:22.847 --> 00:23:24.180
There's a bunch of stuff up top.

00:23:24.180 --> 00:23:28.140
The bit I really care
about here is this, right?

00:23:28.140 --> 00:23:31.045
State allocated, we have
an IP, we have a port,

00:23:31.045 --> 00:23:32.920
we have a game server
that's been given to us

00:23:32.920 --> 00:23:34.720
that's essentially sacrosanct.

00:23:34.720 --> 00:23:36.990
So, let's play a game.

00:23:39.860 --> 00:23:41.040
Does that sound like fun?

00:23:41.040 --> 00:23:41.890
Just move that over.

00:23:41.890 --> 00:23:44.970
Yeah, this is the fun bit.

00:23:44.970 --> 00:23:45.470
All right.

00:23:47.980 --> 00:23:48.620
Let's plug it.

00:23:48.620 --> 00:23:52.190
Let's see if I can type
really small things

00:23:52.190 --> 00:23:54.880
in front of a live audience.

00:23:54.880 --> 00:23:59.230
41:7899, join.

00:23:59.230 --> 00:24:01.070
Beautiful black screen
is actually good.

00:24:01.070 --> 00:24:03.880
All right, so this is going
to connect to the game server

00:24:03.880 --> 00:24:07.595
that we basically-- we spun up
200 of these entire cluster.

00:24:07.595 --> 00:24:09.970
Then we allocated it, and it
looked inside of the cluster

00:24:09.970 --> 00:24:12.960
and was like, hey, let's
spin up one of these.

00:24:12.960 --> 00:24:15.885
And then, there we go.

00:24:15.885 --> 00:24:17.260
I'm going to play
on my trackpad.

00:24:17.260 --> 00:24:21.160
This is me playing Xonotic on a
cluster that's running US east

00:24:21.160 --> 00:24:22.940
or US west, one or the other.

00:24:22.940 --> 00:24:26.050
There are some players
around here somewhere.

00:24:26.050 --> 00:24:28.075
Without fail, there we go.

00:24:28.075 --> 00:24:30.340
As soon as I play in front
of a group of people,

00:24:30.340 --> 00:24:31.510
there's never anyone around.

00:24:31.510 --> 00:24:32.177
Oh, there we go.

00:24:32.177 --> 00:24:35.110
Ha, yeah.

00:24:35.110 --> 00:24:39.234
The most important part of
this whole talk, really.

00:24:39.234 --> 00:24:40.410
All right, cool.

00:24:40.410 --> 00:24:42.743
That was fun, but I actually
want to show some other fun

00:24:42.743 --> 00:24:44.810
stuff off, too.

00:24:44.810 --> 00:24:47.255
So let's do a couple
more allocations

00:24:47.255 --> 00:24:48.380
because I want to show off.

00:24:48.380 --> 00:24:49.220
This is cool.

00:24:49.220 --> 00:24:54.500
So we can see here that we
have three game servers that

00:24:54.500 --> 00:24:56.120
are allocated, right?

00:24:56.120 --> 00:24:57.860
We essentially have
three game servers

00:24:57.860 --> 00:24:59.510
that have people playing on it.

00:24:59.510 --> 00:25:00.720
So let's scale this down.

00:25:00.720 --> 00:25:03.530
We're like, actually, these
game servers, we don't like it.

00:25:03.530 --> 00:25:05.870
There's something wrong with
it, something like that.

00:25:05.870 --> 00:25:07.850
So let's just say replica 0.

00:25:07.850 --> 00:25:11.150
Flip the table, and just be
like, we hate this thing now.

00:25:11.150 --> 00:25:14.420
So that's going to
start scaling that down.

00:25:14.420 --> 00:25:17.240
But we're always going to see
that those three allocated

00:25:17.240 --> 00:25:20.682
servers always stay there.

00:25:20.682 --> 00:25:22.140
Agones does a whole
bunch of stuff.

00:25:22.140 --> 00:25:24.530
But this, I think, is like
one of the core, basic things

00:25:24.530 --> 00:25:28.490
that it understands,
is that while we might

00:25:28.490 --> 00:25:30.260
have a variety of
these being shut down,

00:25:30.260 --> 00:25:32.240
we don't touch
allocated game servers.

00:25:32.240 --> 00:25:33.300
Super, super important.

00:25:33.300 --> 00:25:36.392
We don't interrupt a
player playing a game.

00:25:36.392 --> 00:25:37.100
Don't ever do it.

00:25:37.100 --> 00:25:38.150
It's bad.

00:25:38.150 --> 00:25:40.380
Bad, bad, bad, bad.

00:25:40.380 --> 00:25:42.023
So, lots and lots of fun.

00:25:42.023 --> 00:25:44.190
So yeah, if we actually run
that again, there we go.

00:25:44.190 --> 00:25:46.890
So we still always, we'll see
those allocated game servers,

00:25:46.890 --> 00:25:49.020
until the players finish
playing their games,

00:25:49.020 --> 00:25:51.145
and those game servers
self shut down.

00:25:51.145 --> 00:25:52.020
Very important stuff.

00:25:52.020 --> 00:25:53.295
Cool.

00:25:53.295 --> 00:25:54.930
Can we go back to
slides, please?

00:25:58.380 --> 00:25:59.760
Excellent.

00:25:59.760 --> 00:26:00.600
Wonderful.

00:26:00.600 --> 00:26:01.410
OK.

00:26:01.410 --> 00:26:07.270
So, things are always
better with friends.

00:26:07.270 --> 00:26:11.630
So let's see if we can
make this work together.

00:26:11.630 --> 00:26:16.930
So we do have stuff
wherein we can

00:26:16.930 --> 00:26:18.180
make these talk to each other.

00:26:21.610 --> 00:26:24.600
So what we can do is we
can install basically

00:26:24.600 --> 00:26:26.940
what we commonly refer to
as a director, or basically,

00:26:26.940 --> 00:26:30.420
glue code between Open Match
and a game server scaler,

00:26:30.420 --> 00:26:32.860
which can be custom
if you so desire.

00:26:32.860 --> 00:26:35.920
So that a matchmaker can take
the things in Open Match,

00:26:35.920 --> 00:26:36.420
right?

00:26:36.420 --> 00:26:38.610
You run your custom
match logic there.

00:26:38.610 --> 00:26:41.850
It can talk to Agones and be
like, hey, I've got players.

00:26:41.850 --> 00:26:44.040
Let's match make
and make a game.

00:26:44.040 --> 00:26:46.770
And then that game server
can be marked as allocated.

00:26:46.770 --> 00:26:48.750
Those players can
then play that game,

00:26:48.750 --> 00:26:53.060
and continue on, and
have a really good time.

00:26:53.060 --> 00:26:54.960
So, one slide,
we're back to demo.

00:26:54.960 --> 00:26:55.460
Fun.

00:26:59.200 --> 00:27:04.930
So in cooking show parlance,
here's one I prepared earlier.

00:27:04.930 --> 00:27:08.280
So I already have--

00:27:08.280 --> 00:27:11.100
whoops, that's al, not
what I want as all.

00:27:11.100 --> 00:27:13.080
I already have Open
Match installed.

00:27:13.080 --> 00:27:14.910
I have Agones installed.

00:27:14.910 --> 00:27:17.460
There's a bunch of stuff
already in this cluster.

00:27:17.460 --> 00:27:19.050
But what we're
going to do is we're

00:27:19.050 --> 00:27:23.095
going to create the fleet,
like we saw previously.

00:27:28.203 --> 00:27:29.870
So that's going to
create a fleet for us

00:27:29.870 --> 00:27:31.640
of a really simple game server.

00:27:31.640 --> 00:27:34.850
It literally just takes a UDP
packet with some text in it,

00:27:34.850 --> 00:27:37.000
and it spits out a log.

00:27:37.000 --> 00:27:38.630
I know Xonotic is
super exciting,

00:27:38.630 --> 00:27:42.380
but this is just very simple
for demonstrative purposes.

00:27:42.380 --> 00:27:43.880
And then what we're
also going to do

00:27:43.880 --> 00:27:46.490
is we're going to
install the director.

00:27:46.490 --> 00:27:49.320
Basically, this is the
glue code that says,

00:27:49.320 --> 00:27:51.380
hey, this is how I
want Open Match to talk

00:27:51.380 --> 00:27:54.980
to Agones to allocate
game servers for me,

00:27:54.980 --> 00:27:58.060
basically in the way
that makes sense for me.

00:27:58.060 --> 00:27:58.560
So cool.

00:27:58.560 --> 00:28:00.210
That's good to go.

00:28:00.210 --> 00:28:01.950
Lovely.

00:28:01.950 --> 00:28:05.047
I'm going to grab this from down
here because it's also got--

00:28:05.047 --> 00:28:05.880
oh yes, there we go.

00:28:05.880 --> 00:28:08.664
Beautiful.

00:28:08.664 --> 00:28:11.003
And then I'm going to
write a little script here.

00:28:11.003 --> 00:28:12.920
And then I'm going to
make sure this is ready.

00:28:12.920 --> 00:28:13.880
Beautiful.

00:28:13.880 --> 00:28:15.630
So this is going to
do a couple of things.

00:28:15.630 --> 00:28:19.172
So we're going to work on a
much smaller scale this time.

00:28:19.172 --> 00:28:20.880
We're just going to
work with one player,

00:28:20.880 --> 00:28:24.580
just so we can see the
flow all the way through.

00:28:24.580 --> 00:28:27.210
So here, this is just going to
generate one player for us--

00:28:27.210 --> 00:28:28.470
very simple, right?

00:28:28.470 --> 00:28:30.820
Nothing too complicated.

00:28:30.820 --> 00:28:33.060
But then we're
going to spin up a--

00:28:33.060 --> 00:28:35.520
once we've got one player,
Open Match in this instance

00:28:35.520 --> 00:28:38.020
is going to be like, oh, we
only need one player for a game.

00:28:38.020 --> 00:28:40.870
So cool, we can match make them.

00:28:40.870 --> 00:28:42.100
We're going to hit Enter.

00:28:42.100 --> 00:28:44.110
And it's going to go,
cool, we have a player.

00:28:44.110 --> 00:28:44.870
Awesome.

00:28:44.870 --> 00:28:46.750
We're going to go
and tell Agones,

00:28:46.750 --> 00:28:48.380
hey, allocate my game server.

00:28:48.380 --> 00:28:51.460
So this here, IPM import of
the game server that just got

00:28:51.460 --> 00:28:53.740
allocated to us from Agones--

00:28:53.740 --> 00:28:55.390
awesome.

00:28:55.390 --> 00:28:58.750
Next, this little script is
going to spin up a client.

00:28:58.750 --> 00:28:59.570
Lovely.

00:28:59.570 --> 00:29:01.120
So there's a little client.

00:29:01.120 --> 00:29:05.290
We can use it to send UDP
messages to the allocated game

00:29:05.290 --> 00:29:05.890
server.

00:29:05.890 --> 00:29:10.040
So why don't we actually
pop over to our other tab?

00:29:10.040 --> 00:29:12.160
We have a look at
our game servers.

00:29:12.160 --> 00:29:13.660
You see we have one that's--

00:29:13.660 --> 00:29:14.890
we have two that's allocated?

00:29:14.890 --> 00:29:17.040
That's fun.

00:29:17.040 --> 00:29:19.440
Let me see which one
is going on there.

00:29:19.440 --> 00:29:22.850
7616, I just want to get
the logs from the right one.

00:29:22.850 --> 00:29:23.850
76-- so it's this one.

00:29:23.850 --> 00:29:26.688
Beautiful.

00:29:26.688 --> 00:29:28.980
This may have been lying
around from before, so kubectl

00:29:28.980 --> 00:29:36.360
logs -f, simple udp.

00:29:36.360 --> 00:29:36.870
Beautiful.

00:29:36.870 --> 00:29:39.897
All right, so we can
see that that's running.

00:29:39.897 --> 00:29:41.230
Now let's send a little command.

00:29:41.230 --> 00:29:42.083
We'll say, Hello!

00:29:46.030 --> 00:29:48.370
Now I want you to ignore
the error bit at the bottom.

00:29:48.370 --> 00:29:51.250
Because demos always
fail the day before.

00:29:51.250 --> 00:29:54.370
But the bit that I care about
is where it says, hello, right?

00:29:54.370 --> 00:29:55.870
So I've got
connectivity now, right?

00:29:55.870 --> 00:29:57.310
I essentially can
play this game.

00:29:57.310 --> 00:29:58.660
I can send packets to it.

00:29:58.660 --> 00:30:00.618
In theory, it should be
able to send them back,

00:30:00.618 --> 00:30:02.800
but we'll ignore that for now.

00:30:02.800 --> 00:30:04.840
But we can work that
all the way through.

00:30:04.840 --> 00:30:07.930
So essentially, we've been
able to do the full stack

00:30:07.930 --> 00:30:10.930
from going from matchmaking all
the way through to allocation

00:30:10.930 --> 00:30:14.920
of game server and having
a person play the game.

00:30:14.920 --> 00:30:17.390
Now, we can quit this
and see something else

00:30:17.390 --> 00:30:18.740
that's also kind of cool.

00:30:18.740 --> 00:30:21.400
So what's going to happen
now is this little script

00:30:21.400 --> 00:30:25.248
is going to start just
allocating game servers.

00:30:25.248 --> 00:30:27.040
It's basically going
to keep adding players

00:30:27.040 --> 00:30:28.660
to the matchmaking queue.

00:30:28.660 --> 00:30:31.330
As it keeps doing that, it's
going to keep going to Agones

00:30:31.330 --> 00:30:33.320
and saying, hey, can I
have the game server?

00:30:33.320 --> 00:30:35.620
Now one thing we haven't
talked a bit about today

00:30:35.620 --> 00:30:38.380
is the auto scaling
capabilities of Agones.

00:30:38.380 --> 00:30:40.600
So here we have one of
our fleet auto scalers

00:30:40.600 --> 00:30:42.110
already set up for us.

00:30:42.110 --> 00:30:45.280
And we can see that
as we add players,

00:30:45.280 --> 00:30:47.710
our allocated game
servers goes back up to 6.

00:30:47.710 --> 00:30:49.540
The auto scaler is
starting to kick off.

00:30:49.540 --> 00:30:50.040
Right?

00:30:50.040 --> 00:30:51.650
We've got this at a
really low number.

00:30:51.650 --> 00:30:53.890
So you can see the
numbers go really slowly.

00:30:53.890 --> 00:30:55.830
Otherwise, it zooms
up really fast.

00:30:55.830 --> 00:30:57.580
But you can start to
see the numbers start

00:30:57.580 --> 00:30:59.780
to rise, as we have
the server to say, hey,

00:30:59.780 --> 00:31:03.060
can we have two ready game
servers at any point in time?

00:31:03.060 --> 00:31:05.660
And so every 30 seconds, it's
going to kick over and say, OK,

00:31:05.660 --> 00:31:06.635
cool, there we go.

00:31:06.635 --> 00:31:08.260
Let's add in number
two, and then we'll

00:31:08.260 --> 00:31:09.593
add some more matchmaking to it.

00:31:09.593 --> 00:31:11.530
And then we'll just
keep on rising through.

00:31:11.530 --> 00:31:14.130
So we have some nice
functionality there

00:31:14.130 --> 00:31:17.230
for auto scaling as well,
which is super cool.

00:31:17.230 --> 00:31:18.010
Awesome.

00:31:18.010 --> 00:31:20.350
Can I go back to slides, please?

00:31:20.350 --> 00:31:21.810
Excellent.

00:31:21.810 --> 00:31:23.860
All right.

00:31:23.860 --> 00:31:24.950
So what does this mean?

00:31:24.950 --> 00:31:28.110
So just wrap this up with
nice, visual diagrams.

00:31:28.110 --> 00:31:29.350
So we add the players.

00:31:29.350 --> 00:31:30.760
They want to play a game.

00:31:30.760 --> 00:31:32.190
And in this instance
now, they're

00:31:32.190 --> 00:31:33.670
going to talk to Open Match.

00:31:33.670 --> 00:31:35.628
All right, we're going
to have our custom match

00:31:35.628 --> 00:31:36.260
logic in there.

00:31:36.260 --> 00:31:36.610
Right?

00:31:36.610 --> 00:31:38.650
We're going to distribute
that player load over lots

00:31:38.650 --> 00:31:39.930
and lots of machines, right?

00:31:39.930 --> 00:31:41.830
We can do that for
you, which is lovely.

00:31:41.830 --> 00:31:45.910
And you just worry about
your custom match logic.

00:31:45.910 --> 00:31:49.240
From there, Open Match can talk
directly through the Kubernetes

00:31:49.240 --> 00:31:50.230
API, right?

00:31:50.230 --> 00:31:52.750
Usually through a director
or something similar

00:31:52.750 --> 00:31:54.580
that's hooked into
Open Match to tell it

00:31:54.580 --> 00:32:00.340
how we want it to allocate
game servers through Agones.

00:32:00.340 --> 00:32:02.980
Agones itself can then look at
a fleet of game servers that

00:32:02.980 --> 00:32:05.770
are already prewarmed and
ready to go, pull one out

00:32:05.770 --> 00:32:07.870
atomically, and be like,
all right, this one here,

00:32:07.870 --> 00:32:10.450
that's allocated, and
hand that information

00:32:10.450 --> 00:32:12.700
all the way back
up to the players

00:32:12.700 --> 00:32:14.380
who want to play a game.

00:32:14.380 --> 00:32:17.650
Then finally, those players
can connect directly

00:32:17.650 --> 00:32:19.370
to that game server,
as we saw here

00:32:19.370 --> 00:32:21.160
and as we saw with
the Xonotic demo,

00:32:21.160 --> 00:32:23.870
and continue to play that game.

00:32:23.870 --> 00:32:27.167
We didn't have to build
a lot of bespoke stuff.

00:32:27.167 --> 00:32:28.750
We can work on an
open standard, which

00:32:28.750 --> 00:32:30.672
means it can run anywhere.

00:32:30.672 --> 00:32:33.130
We can really just kind of
stand on the shoulders of giants

00:32:33.130 --> 00:32:35.830
ourselves as game developers
and take advantage

00:32:35.830 --> 00:32:38.050
of the tools that
already exist and really

00:32:38.050 --> 00:32:40.440
focus on the game play
state and the game

00:32:40.440 --> 00:32:42.400
play mechanics and
those aspects that

00:32:42.400 --> 00:32:44.190
really matter inside our game.

00:32:46.830 --> 00:32:49.920
So there's a bunch more
to both of these projects

00:32:49.920 --> 00:32:52.500
that we don't have time
to talk about today.

00:32:52.500 --> 00:32:54.000
I know I mentioned
it a bunch, but I

00:32:54.000 --> 00:32:55.792
want to hammer it home
anyway about working

00:32:55.792 --> 00:32:56.610
on cloud providers.

00:32:56.610 --> 00:32:58.170
It works across all
cloud providers.

00:32:58.170 --> 00:33:01.200
Basically, all these projects
work on Vanilla Kubernetes.

00:33:01.200 --> 00:33:03.900
There's nothing special
in any of those.

00:33:03.900 --> 00:33:06.000
Both projects have auto
scaling capabilities.

00:33:06.000 --> 00:33:07.890
We saw some of
that inside Agones.

00:33:07.890 --> 00:33:09.340
There's some more as well.

00:33:09.340 --> 00:33:11.700
Agones works with the
Kubernetes auto scaler.

00:33:11.700 --> 00:33:15.960
Open Match has similar auto
scaling capabilities as well.

00:33:15.960 --> 00:33:18.353
Both projects have
local development tools,

00:33:18.353 --> 00:33:20.520
so if you don't want to
spin up an entire Kubernetes

00:33:20.520 --> 00:33:23.070
cluster locally, you're able
to use some lightweight tooling

00:33:23.070 --> 00:33:24.570
to be able to
access and interact

00:33:24.570 --> 00:33:27.897
with and develop with both
of those projects as well.

00:33:27.897 --> 00:33:29.730
And as we saw briefly
as well, both projects

00:33:29.730 --> 00:33:31.770
have metrics and
dashboards, right?

00:33:31.770 --> 00:33:33.990
Metrics is really
important for those day

00:33:33.990 --> 00:33:35.397
three, day four operations.

00:33:35.397 --> 00:33:37.980
So we want to make sure that the
standard metrics that you all

00:33:37.980 --> 00:33:40.980
need to do those kind of
roles come along with both

00:33:40.980 --> 00:33:43.870
of these projects as well.

00:33:43.870 --> 00:33:45.880
On top of that, both
of these projects

00:33:45.880 --> 00:33:47.720
have pretty solid roadmaps.

00:33:47.720 --> 00:33:49.950
Agones is still
technically alpha.

00:33:49.950 --> 00:33:52.900
We are slated to go 1.0
at some point this year.

00:33:52.900 --> 00:33:54.250
Yes, that is a broad statement.

00:33:54.250 --> 00:33:57.110
I'm very happy with
broad statements.

00:33:57.110 --> 00:33:59.140
You'll see a lot
of things coming.

00:33:59.140 --> 00:34:01.120
More performance
improvements-- we've already

00:34:01.120 --> 00:34:02.495
done a whole bunch
of performance

00:34:02.495 --> 00:34:05.650
work, and we've made it
drastically more performant

00:34:05.650 --> 00:34:07.090
than it was before.

00:34:07.090 --> 00:34:08.880
The more metrics as well.

00:34:08.880 --> 00:34:10.630
We're going to do more
commercial engines,

00:34:10.630 --> 00:34:14.800
as I said, [INAUDIBLE] well,
the release candidate today.

00:34:14.800 --> 00:34:15.969
We're working on Unity soon.

00:34:15.969 --> 00:34:18.650
It's already on the 1.0 roadmap.

00:34:18.650 --> 00:34:21.947
How to sort out multi-cluster
is also front of mind.

00:34:21.947 --> 00:34:24.489
You're probably going to want
to run multiple little clusters

00:34:24.489 --> 00:34:25.570
around the world.

00:34:25.570 --> 00:34:27.639
So how you do
multi-cluster orchestration

00:34:27.639 --> 00:34:30.739
and multi-cluster allocation
is already in the works.

00:34:30.739 --> 00:34:32.739
And you can see some work
in the current release

00:34:32.739 --> 00:34:34.820
candidate for that as well.

00:34:34.820 --> 00:34:37.510
Also, Windows hosting--
many game developers

00:34:37.510 --> 00:34:38.830
use Windows machines.

00:34:38.830 --> 00:34:40.179
People want Windows hosting.

00:34:40.179 --> 00:34:43.840
Thankfully, in Kubernetes 1.14,
the GA support for Windows

00:34:43.840 --> 00:34:44.340
is there.

00:34:44.340 --> 00:34:46.090
We're just waiting on
that to trickle down

00:34:46.090 --> 00:34:47.360
into cloud providers as well.

00:34:47.360 --> 00:34:50.449
So lots of good stuff in that.

00:34:50.449 --> 00:34:54.050
On top of that, Open Match
also has a quite good roadmap

00:34:54.050 --> 00:34:55.310
coming up.

00:34:55.310 --> 00:34:57.877
They want to look at a
long-lived matching logic.

00:34:57.877 --> 00:34:59.960
So for example, if you
just want to have a service

00:34:59.960 --> 00:35:01.543
that's running up
and you consistently

00:35:01.543 --> 00:35:04.250
hit that so that you can
consistently hit that endpoint

00:35:04.250 --> 00:35:07.220
to run your custom match logic,
more metrics and dashboards

00:35:07.220 --> 00:35:07.970
there.

00:35:07.970 --> 00:35:10.140
Player and match tracing
is a big thing again.

00:35:10.140 --> 00:35:11.930
So you can trace
what is happening

00:35:11.930 --> 00:35:14.950
with each individual player as
they go through your system.

00:35:14.950 --> 00:35:16.700
And they also want
to look to increase

00:35:16.700 --> 00:35:19.550
and develop their build
chain for development tooling

00:35:19.550 --> 00:35:20.090
as well.

00:35:22.880 --> 00:35:25.460
I would be very remiss
if I didn't mention it.

00:35:25.460 --> 00:35:29.190
If you want to try out Agones,
it's currently running 0.8.1,

00:35:29.190 --> 00:35:30.690
so it's a couple
of versions behind.

00:35:30.690 --> 00:35:33.128
But if you just want a simple
getting started experience,

00:35:33.128 --> 00:35:35.420
with Agones, you can go to
the Google Cloud Marketplace

00:35:35.420 --> 00:35:37.828
now, click a couple
of buttons, and get

00:35:37.828 --> 00:35:38.870
a cluster up and running.

00:35:38.870 --> 00:35:41.232
And you can take it for a
spin, so it's super nice.

00:35:43.940 --> 00:35:46.740
Finally, before we
wrap up everything,

00:35:46.740 --> 00:35:48.530
I definitely want to
say both projects are

00:35:48.530 --> 00:35:50.060
very alive, very active.

00:35:50.060 --> 00:35:52.760
But we're always looking for
more contributors, more people

00:35:52.760 --> 00:35:54.590
to provide feedback.

00:35:54.590 --> 00:35:56.090
So if you are
interested, definitely

00:35:56.090 --> 00:35:57.260
get involved on Slack.

00:35:57.260 --> 00:36:00.080
Come hang out with us
on GitHub file bugs,

00:36:00.080 --> 00:36:01.430
send feature requests.

00:36:01.430 --> 00:36:04.280
We definitely are looking
for a diverse set of opinions

00:36:04.280 --> 00:36:06.920
from a wide variety of people
from the games industry

00:36:06.920 --> 00:36:08.540
to come help us
make these projects

00:36:08.540 --> 00:36:10.430
the best they possibly can be.

00:36:10.430 --> 00:36:12.680
That is the power
of open source.

00:36:12.680 --> 00:36:15.385
But before you run off as well,
if you have any questions,

00:36:15.385 --> 00:36:16.760
I'll be around at
the conference.

00:36:16.760 --> 00:36:18.450
If you go over into
the demo area build

00:36:18.450 --> 00:36:20.443
in scale for Google
Cloud, you can

00:36:20.443 --> 00:36:22.610
come talk to us as well
about both of these projects

00:36:22.610 --> 00:36:24.820
and see a demonstration as well.

00:36:24.820 --> 00:36:27.180
Finally, if you want to
follow us on Twitter,

00:36:27.180 --> 00:36:29.960
I'm @Neurotic, because I
joined Twitter in 2006,

00:36:29.960 --> 00:36:32.090
and that's something
you could do in 2006.

00:36:32.090 --> 00:36:34.940
But you can also follow the
Agones project on Agones dev,

00:36:34.940 --> 00:36:38.870
but you can also see Agones at
agones.dev and openmatch.dev

00:36:38.870 --> 00:36:41.130
for more information.

00:36:41.130 --> 00:36:44.210
Finally, thank you so much for
spending the last 40 minutes

00:36:44.210 --> 00:36:44.750
with me.

00:36:44.750 --> 00:36:47.342
I know your time is valuable,
so I really appreciate it.

00:36:47.342 --> 00:36:48.800
And I hope you all
have a wonderful

00:36:48.800 --> 00:36:50.630
I/O. Thank you so much.

00:36:50.630 --> 00:36:54.880
[MUSIC PLAYING]

