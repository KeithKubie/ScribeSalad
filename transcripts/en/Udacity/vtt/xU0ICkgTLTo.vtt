WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.840
So let's look at an example of how
a write-back cache would work.

00:00:03.840 --> 00:00:08.210
Say we have a small four entry
cache that is direct map.

00:00:08.210 --> 00:00:13.710
Each line has a valid bit,
a tag, and a dirty bit.

00:00:13.710 --> 00:00:17.320
We don't need the counter,
because in a direct map cache,

00:00:17.320 --> 00:00:18.980
we know exactly what to replace.

00:00:18.980 --> 00:00:21.110
We don't need counters to tell us that.

00:00:21.110 --> 00:00:24.670
Let's say that the processor is
doing this sequence of axises.

00:00:24.670 --> 00:00:29.490
And A, B, and
C map to different sets in the cache.

00:00:29.490 --> 00:00:31.250
The first axis is right A.

00:00:31.250 --> 00:00:33.400
So what we do is we have a miss.

00:00:33.400 --> 00:00:35.140
All of our valid bits are 0.

00:00:35.140 --> 00:00:37.910
So it doesn't matter what
the rest of the cache has,

00:00:37.910 --> 00:00:39.800
because none of the lines are valid.

00:00:39.800 --> 00:00:45.370
When we have the first right to A,
we will bring A here.

00:00:45.370 --> 00:00:47.790
We will change the value bit to one and

00:00:47.790 --> 00:00:50.530
we will change the tag
to correspond to A.

00:00:50.530 --> 00:00:54.190
Because this is all right, the
processor,as soon as the data is brought

00:00:54.190 --> 00:00:57.520
in will write it and
the dirty bit will be set to one.

00:00:57.520 --> 00:00:59.470
Next, we have a read to A.

00:00:59.470 --> 00:01:02.640
The processor checks the tag and
the valid bits,

00:01:02.640 --> 00:01:08.460
sees that the tag matches A, and the
valid bit is 1, so it can just use A.

00:01:08.460 --> 00:01:11.990
The fact that the dirty bit is 1,
doesn't change anything.

00:01:11.990 --> 00:01:16.550
Next let's say we have a read B,
we don't find anything that matches B

00:01:16.550 --> 00:01:22.020
in the cache, or maybe if this does, the
value of it is 0 so it doesn't matter.

00:01:22.020 --> 00:01:24.320
So we will have a miss and

00:01:24.320 --> 00:01:29.150
bring B into the cache,
change the tag to correspond to B,

00:01:29.150 --> 00:01:34.120
change the value bit to one to indicate
that we do have something here now, and

00:01:34.120 --> 00:01:38.990
because this is only a read,
the dirty bit will be 0.

00:01:38.990 --> 00:01:40.250
Next let's say we read C.

00:01:41.360 --> 00:01:46.520
It's an S, bring C in,
change the tag on the valid bit,

00:01:46.520 --> 00:01:50.350
it's a read, so
the dirty bit starts out as 0.

00:01:50.350 --> 00:01:57.000
Next what we have is a write To C,
we check if it's a hit and it is.

00:01:57.000 --> 00:02:01.490
We write only to the cache and
change the dirty bit to 1.

00:02:01.490 --> 00:02:06.680
And now as you can see, the dirty bit
for every line, indicates simply,

00:02:06.680 --> 00:02:12.440
was the line ever written, since it
was last brought into the cache?

00:02:12.440 --> 00:02:16.960
let's continue this by
an access to E that is RD and

00:02:16.960 --> 00:02:19.870
let's say that E maps to where A is.

00:02:19.870 --> 00:02:23.280
So now what need to happen is,
we're going to check here

00:02:24.460 --> 00:02:29.650
to see whether the tag matches E,
it doesn't so we have a miss.

00:02:29.650 --> 00:02:32.870
Our replacement policy is simple,
for direct map caches,

00:02:32.870 --> 00:02:35.300
we simply replace whatever is there.

00:02:35.300 --> 00:02:39.250
So at this point,
we cannot just bring in E from memory.

00:02:39.250 --> 00:02:42.960
First, we have to take the data for
A, that we have written, and

00:02:42.960 --> 00:02:44.890
not written to memory yet.

00:02:44.890 --> 00:02:49.380
Because the dirty bit is 1, this
block gets sent to memory as a right.

00:02:49.380 --> 00:02:54.840
After that happens, we can bring E in,
set the tag and value bit.

00:02:54.840 --> 00:02:59.950
And the dirty bit to 0 because
it's a RD, and this continues on.

00:02:59.950 --> 00:03:05.170
Let's say that now we have a RD to F,
which replaces B.

00:03:05.170 --> 00:03:08.710
Where we want to replace B,
we check the dirty bit is 0, so

00:03:08.710 --> 00:03:10.790
B doesn't get sent to memory.

00:03:10.790 --> 00:03:15.530
It simply gets overwritten with
a data from F, we fetch, and

00:03:15.530 --> 00:03:18.790
because this is a RD,
we get the 0 here, and so on.

