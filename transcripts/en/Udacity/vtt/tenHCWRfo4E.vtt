WEBVTT
Kind: captions
Language: en

00:00:00.100 --> 00:00:01.510
So the question is,

00:00:01.510 --> 00:00:06.280
how good is this function that we build
in order to do the classification?

00:00:06.280 --> 00:00:07.970
And you can't really answer that and
tell me,

00:00:07.970 --> 00:00:11.300
until you tell me what good means,
all right?

00:00:11.300 --> 00:00:14.060
And what good means, two things.

00:00:14.060 --> 00:00:17.751
First of all, what kinds of
mistakes does our classifier make?

00:00:17.751 --> 00:00:19.170
All right?

00:00:19.170 --> 00:00:21.190
And for each of those mistakes, sort of,

00:00:21.190 --> 00:00:24.030
how expensive is it to
make those mistakes?

00:00:24.030 --> 00:00:26.130
And when we build
a supervised classifier,

00:00:26.130 --> 00:00:30.910
or supervised classification, since we
know what the desired outputs are for

00:00:30.910 --> 00:00:35.840
a given set and then we can run
the thing as we're designing it, what we

00:00:35.840 --> 00:00:41.055
want to do is we want to minimize
the expected misclassification cost.

00:00:41.055 --> 00:00:43.510
Okay?
We want to make mistakes

00:00:43.510 --> 00:00:45.550
as infrequently as possible.

00:00:45.550 --> 00:00:49.960
And the more expensive the mistake is
the less often we want to make that

00:00:49.960 --> 00:00:51.562
particular mistake.

00:00:51.562 --> 00:00:55.530
All right, to do this,
to handle classification,

00:00:55.530 --> 00:00:58.530
there are two general strategies.

00:00:58.530 --> 00:01:02.530
The first method, which is referred to
as generative, you basically use your

00:01:02.530 --> 00:01:05.901
training data from class A to
build a model of class A.

00:01:06.930 --> 00:01:11.592
Separately, you build a model of class
B, you build a model of class c,

00:01:11.592 --> 00:01:13.930
you build a model of class d.

00:01:13.930 --> 00:01:16.030
And then when you're
given a new example,

00:01:16.030 --> 00:01:20.920
you say well does model A explain
it better, or model B, or model C.

00:01:20.920 --> 00:01:24.400
Whichever one explains it better,
that's my, that's the one I pick.

00:01:24.400 --> 00:01:28.014
And it's referred to as generative
because the idea is that I have a model

00:01:28.014 --> 00:01:31.512
that describes sort of all the different
possible things that would be

00:01:31.512 --> 00:01:32.120
of class A.

00:01:32.120 --> 00:01:33.160
At least, that's the hope.

00:01:33.160 --> 00:01:36.010
Or you could even think of it as
generating a set of examples that

00:01:36.010 --> 00:01:36.510
are class A.

00:01:37.510 --> 00:01:41.700
The other way of doing it,
is referred to as discriminative.

00:01:41.700 --> 00:01:46.610
Discriminative says, well, here's A, and
here's a bunch of things that are not A,

00:01:46.610 --> 00:01:50.020
and let me learn how to
discriminate between them.

00:01:50.020 --> 00:01:50.560
Okay?
So

00:01:50.560 --> 00:01:53.310
I'm not going to worry about
modeling what all of A is.

00:01:53.310 --> 00:01:55.890
What I want to do is,
if I only have As, Bs, and Cs,

00:01:55.890 --> 00:02:01.760
I have to look at how would I
discriminate between A or Bs and Cs?

00:02:01.760 --> 00:02:06.120
Or I could also do A versus B,
A versus C, B versus C and, and, and

00:02:06.120 --> 00:02:09.320
learn those, but the discriminative,
the discriminative approach

00:02:09.320 --> 00:02:15.110
focuses on learning the boundary,
the separator between our categories.

00:02:15.110 --> 00:02:18.180
Today what we're going to be doing
is talking about generative, and

00:02:18.180 --> 00:02:20.990
then we'll move on to discriminative
in a couple of future lessons.

