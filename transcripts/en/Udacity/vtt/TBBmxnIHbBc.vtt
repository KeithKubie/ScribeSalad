WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:03.260
Now that we've explored how
to display points on the map,

00:00:03.260 --> 00:00:05.630
we can give the user more
information about those points.

00:00:06.820 --> 00:00:10.550
Info windows are pop-up displays
which are shown at a given location,

00:00:10.550 --> 00:00:12.560
either with or without a marker.

00:00:12.560 --> 00:00:16.229
They're great for giving contexts,
such as text describing a location,

00:00:16.229 --> 00:00:18.849
or showing images related to it.

00:00:18.849 --> 00:00:22.430
Creating an info window works
very similarly to the marker

00:00:22.430 --> 00:00:25.950
in that we'll use an object and
several basic parameters.

00:00:25.950 --> 00:00:29.910
Creating a new info window instance only
requires that we put some content into

00:00:29.910 --> 00:00:34.730
the info window, a string or
a pre-defined set of elements.

00:00:34.730 --> 00:00:39.080
The info window though, unlike
the marker, won't open automatically.

00:00:39.080 --> 00:00:42.340
We need to add one more thing to
tell it when and where to open.

00:00:43.400 --> 00:00:44.740
We're adding an event listener so

00:00:44.740 --> 00:00:47.800
that the info window only opens
when we click on the market.

00:00:48.840 --> 00:00:52.950
Within the event listener,
we'll call the info window.open method.

00:00:52.950 --> 00:00:55.240
Passing in the map on which to open, and

00:00:55.240 --> 00:00:57.590
optionally, the marker
on which to anchor it.

00:00:58.680 --> 00:01:01.740
If we didn't pass in a marker,
we would need to give the info window

00:01:01.740 --> 00:01:05.120
a position property so
that it has a place to open.

00:01:05.120 --> 00:01:08.587
So if we click on the marker,
we can see our lonely info window.

00:01:09.670 --> 00:01:12.108
But we want to show a whole
bunch of locations.

00:01:12.108 --> 00:01:15.208
We don't want to show
the user just one house.

00:01:15.208 --> 00:01:18.960
I'm going to delete our single
point marker and info window.

00:01:18.960 --> 00:01:22.720
So here we've created an array of
objects with some listing titles, and

00:01:22.720 --> 00:01:25.600
a bunch of lat longs in
the initialize function, so

00:01:25.600 --> 00:01:28.900
that we have all of the information
we need in the browser.

00:01:28.900 --> 00:01:31.610
In your own projects,
we'd recommend using a database, and

00:01:31.610 --> 00:01:33.780
serving the information to your site.

00:01:33.780 --> 00:01:36.710
There are a bunch of features of
the API that allow you to easily render

00:01:36.710 --> 00:01:39.120
large amounts of data onto your map.

00:01:39.120 --> 00:01:42.150
You can read more about them in
the link, in the instructor notes.

00:01:42.150 --> 00:01:43.800
For now,
since we only have a few points,

00:01:43.800 --> 00:01:45.980
we're just going to keep
the data in the browser.

00:01:45.980 --> 00:01:47.760
Now instead of creating one marker,

00:01:47.760 --> 00:01:50.610
we'll make a whole bunch of
them out of this information.

00:01:50.610 --> 00:01:54.290
We'll add a blank marker array globally,
since we'll have only one of these for

00:01:54.290 --> 00:01:55.201
the listings in our site.

00:01:56.320 --> 00:02:01.107
Then we'll loop through the locations
we created in order to create one

00:02:01.107 --> 00:02:02.633
marker per location.

00:02:02.633 --> 00:02:07.592
We'll keep each newly created marker
instance in the markers array to keep

00:02:07.592 --> 00:02:08.900
them organized.

00:02:08.900 --> 00:02:12.210
Now, we want an info window to appear
when any one of the markers is clicked,

00:02:12.210 --> 00:02:15.240
and we want the content
to reflect that marker.

00:02:15.240 --> 00:02:17.740
So we'll add an on click
event to each marker.

00:02:18.810 --> 00:02:20.110
We'll make a separate function,

00:02:20.110 --> 00:02:23.640
passing in the marker that was clicked,
which is, this.

00:02:23.640 --> 00:02:26.910
And the info window that we
created on initialize here.

00:02:26.910 --> 00:02:29.460
This function is essentially
going to tell the info window to

00:02:29.460 --> 00:02:34.140
open at that marker, and populate with
information specific to that marker.

00:02:34.140 --> 00:02:36.500
We'll create this function below.

00:02:36.500 --> 00:02:39.090
Each time one of our
listing markers is clicked,

00:02:39.090 --> 00:02:42.370
this populate info window
function is going to be called.

00:02:42.370 --> 00:02:46.730
Essentially, all this is doing is
setting the content of the info window

00:02:46.730 --> 00:02:50.960
to the marker's title, and
opening the info window on that marker.

00:02:52.420 --> 00:02:56.470
Finally, we may have listings that
are outside the initial zoom area and

00:02:56.470 --> 00:03:00.073
we want to be able to adjust the
boundaries of the map to fit everything

00:03:00.073 --> 00:03:01.245
that we want the user to see.

00:03:02.470 --> 00:03:05.670
So we'll create a new
lat long bounds instance

00:03:05.670 --> 00:03:09.150
which captures the southwest and
northeast corners of the view port.

00:03:11.010 --> 00:03:13.640
Then we'll extend it for
every marker that we make.

00:03:14.730 --> 00:03:17.780
And finally, we'll tell the map
to fit itself to those bounds.

00:03:19.120 --> 00:03:22.430
Voila, we have a very
basic listings app.

00:03:22.430 --> 00:03:23.710
If I click each marker,

00:03:23.710 --> 00:03:26.310
a brief description of the listing
shows above that marker.

00:03:27.370 --> 00:03:30.850
Once you can do that, there's
a crazy number of things you can do.

00:03:30.850 --> 00:03:34.700
Change your markers to be custom icons,
put images, links,

00:03:34.700 --> 00:03:37.070
and other information into
the info windows, and more.

00:03:38.070 --> 00:03:41.500
If I wanted to, I could change all of my
markers to be pictures of Ajays head.

00:03:42.980 --> 00:03:46.110
But on a serious note, let's make one
more improvement before we move on

