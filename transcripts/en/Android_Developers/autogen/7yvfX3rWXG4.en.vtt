WEBVTT
Kind: captions
Language: en

00:00:00.633 --> 00:00:02.050
PIETRO MAGGI: With
Android Vitals,

00:00:02.050 --> 00:00:04.540
you identify performance
issues in your app.

00:00:04.540 --> 00:00:06.310
Android Vitals
provide information

00:00:06.310 --> 00:00:09.720
about battery use, stability,
rendering, app startup time,

00:00:09.720 --> 00:00:11.800
and permission request.

00:00:11.800 --> 00:00:13.690
In this DevBytes,
I'm going to show you

00:00:13.690 --> 00:00:16.030
how to address the
battery-related issues

00:00:16.030 --> 00:00:19.760
of stuck partial wake locks
and excessive wakeups.

00:00:19.760 --> 00:00:22.360
With the WakeLocks
API, you keep a device

00:00:22.360 --> 00:00:24.730
from entering the
sleep, and as a result,

00:00:24.730 --> 00:00:26.990
prevent it from
conserving the battery.

00:00:26.990 --> 00:00:29.620
A stuck wake lock occurs
when you acquire a wake lock

00:00:29.620 --> 00:00:30.790
but never release it.

00:00:30.790 --> 00:00:34.540
So the device keeps the CPU
running and drains the battery.

00:00:34.540 --> 00:00:37.240
What's the best way to avoid
stuck partial wake locks?

00:00:37.240 --> 00:00:40.170
Simple solution is to
stop to using them.

00:00:40.170 --> 00:00:41.930
In modern Android,
there is rarely

00:00:41.930 --> 00:00:44.470
the situation where you
have to use a wake lock.

00:00:44.470 --> 00:00:46.570
For example, take an activity.

00:00:46.570 --> 00:00:48.550
Whenever someone
is using your app

00:00:48.550 --> 00:00:51.250
and you want to keep the screen
on, instead of setting a wake

00:00:51.250 --> 00:00:53.980
lock, use a flag on the window
that will tell the system

00:00:53.980 --> 00:00:55.480
to keep the screen on.

00:00:55.480 --> 00:00:58.690
As a bonus, there is no
way to lift the flag.

00:00:58.690 --> 00:01:00.850
For services, if
you schedule them

00:01:00.850 --> 00:01:03.850
as job instead of using
custom free running services,

00:01:03.850 --> 00:01:07.490
the job scheduler also
release the wake lock for you.

00:01:07.490 --> 00:01:10.180
Similarly, if you use the
AlarmManager to schedule

00:01:10.180 --> 00:01:12.610
an alarm in
BroadcastReceiver, there

00:01:12.610 --> 00:01:16.030
will be a wake lock for you for
the duration of the on.Receive.

00:01:16.030 --> 00:01:18.300
If you don't use wake
locks, another benefit

00:01:18.300 --> 00:01:20.300
is that you don't need
to include the permission

00:01:20.300 --> 00:01:22.300
request in your manifest.

00:01:22.300 --> 00:01:26.570
But if you must use a wake lock,
always use a partial wake lock.

00:01:26.570 --> 00:01:28.810
[? Data ?] types of wake
locks are deprecated

00:01:28.810 --> 00:01:31.260
in the latest version Android.

00:01:31.260 --> 00:01:33.940
Always set a timeout
value in wakeLock.acquire

00:01:33.940 --> 00:01:35.800
so that the system
waking up the wake

00:01:35.800 --> 00:01:38.170
lock after the timeout expires.

00:01:38.170 --> 00:01:41.710
Also give your wake lock
a static, descriptive tag

00:01:41.710 --> 00:01:45.040
without counters, or even
worse, private or sensitive

00:01:45.040 --> 00:01:46.100
information.

00:01:46.100 --> 00:01:46.810
Why?

00:01:46.810 --> 00:01:49.000
Because Android Vitals
will report on the wake

00:01:49.000 --> 00:01:53.300
lock by name, making it easier
for you to debug issues.

00:01:53.300 --> 00:01:55.670
Finally, remember
to code defensively.

00:01:55.670 --> 00:01:57.820
Assume that things
can go wrong and use

00:01:57.820 --> 00:01:59.530
"try" and "finally"
blocks to make sure

00:01:59.530 --> 00:02:03.350
that you released wake locks as
soon as you are done with them.

00:02:03.350 --> 00:02:06.250
The second half of the Android
Vitals battery equation

00:02:06.250 --> 00:02:08.110
is excessive wakeups.

00:02:08.110 --> 00:02:10.330
The main contributor
to excessive wakeups

00:02:10.330 --> 00:02:12.970
is their use of the
older AlarmManager API.

00:02:12.970 --> 00:02:15.910
Specifically, the
WAKEUP type of alarms.

00:02:15.910 --> 00:02:17.710
When working with
AlarmManager, there

00:02:17.710 --> 00:02:20.290
are three Rs that
you should consider.

00:02:20.290 --> 00:02:23.410
Remove codes to wakeup
alarms, if possible,

00:02:23.410 --> 00:02:26.720
reduce the frequency if you
have to use a wakeup alarms,

00:02:26.720 --> 00:02:30.040
and replace your
alarm with other APIs.

00:02:30.040 --> 00:02:32.150
When it comes to
replacing, if they wakeup

00:02:32.150 --> 00:02:34.300
is for something
happening on your server,

00:02:34.300 --> 00:02:38.050
send it as a push message
using Firebase Cloud Messaging.

00:02:38.050 --> 00:02:40.420
For activity triggering
on the device,

00:02:40.420 --> 00:02:44.230
use one of the job scheduling
API, such a WorkManager,

00:02:44.230 --> 00:02:46.750
JobScheduler, or SyncManager.

00:02:46.750 --> 00:02:49.030
This intelligent job
scheduling mechanism

00:02:49.030 --> 00:02:51.810
gives you a lot for free,
such as the automatic backoff

00:02:51.810 --> 00:02:55.260
and retry if your job
fails for any reason,

00:02:55.260 --> 00:02:57.900
criteria-based scheduling,
so you can wake up

00:02:57.900 --> 00:03:00.490
the device only when it
has a network connection

00:03:00.490 --> 00:03:03.400
or is charging, doze
and standby compliance,

00:03:03.400 --> 00:03:06.460
and automatic wake
lock handling.

00:03:06.460 --> 00:03:09.490
Regardless of whether
Android Vitals is telling you

00:03:09.490 --> 00:03:11.680
there is a battery problem
in your app or not,

00:03:11.680 --> 00:03:13.630
remember to use Android
Studio and [INAUDIBLE]

00:03:13.630 --> 00:03:14.830
for [INAUDIBLE].

00:03:14.830 --> 00:03:18.220
With this tool, you can debug
any kind of wake lock problems

00:03:18.220 --> 00:03:21.920
and get details about alarms
and JobScheduler in your app.

00:03:21.920 --> 00:03:23.920
People will quickly
remove our app

00:03:23.920 --> 00:03:26.980
if they encounter battery
problems after installing it.

00:03:26.980 --> 00:03:29.000
Following the guidelines
in this video,

00:03:29.000 --> 00:03:31.120
you should be able to
avoid battery programs

00:03:31.120 --> 00:03:32.570
in the first place.

00:03:32.570 --> 00:03:36.550
But if you don't, Android Vitals
will quickly identify for you.

00:03:36.550 --> 00:03:39.310
To find out more about
Android Vitals and the ways

00:03:39.310 --> 00:03:41.950
of addressing battery
problems, check the resources

00:03:41.950 --> 00:03:44.080
listed in the video description.

00:03:44.080 --> 00:03:46.770
Remember, to find out about
this and other feature

00:03:46.770 --> 00:03:49.840
in the Play Console and get
tips to grow your app or games

00:03:49.840 --> 00:03:52.300
business, you can
use the Playbook app

00:03:52.300 --> 00:03:54.250
available on Google Play.

00:03:54.250 --> 00:03:55.390
Thanks for watching.

00:03:55.390 --> 00:03:58.740
[MUSIC PLAYING]

