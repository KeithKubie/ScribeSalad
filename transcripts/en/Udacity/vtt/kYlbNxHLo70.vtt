WEBVTT
Kind: captions
Language: en

00:00:00.830 --> 00:00:03.230
We're going to introduce one more list operation that will be

00:00:03.230 --> 00:00:06.410
very useful in building our web crawler and that's the

00:00:06.410 --> 00:00:09.700
Pop operation. Pop works like this. We have a list.

00:00:09.700 --> 00:00:11.790
We have .pop. This is similar to the way we

00:00:11.790 --> 00:00:15.190
use the find method. There are no inputs to pop,

00:00:15.190 --> 00:00:17.730
but we still need the parenthesis to show that we're

00:00:17.730 --> 00:00:21.870
calling a procedure and what it outputs is an element

00:00:21.870 --> 00:00:25.760
of the list. What pop does is it mutates the list.

00:00:25.760 --> 00:00:28.140
It removes the final element of the list.

00:00:28.140 --> 00:00:31.270
It also returns the value of that element. So,

00:00:31.270 --> 00:00:35.360
here's an example. If we started by initializing

00:00:35.360 --> 00:00:37.240
the variable a to be the list one, two,

00:00:37.240 --> 00:00:44.230
three. And then, we'll make b an alias for a, so here's what we have after those

00:00:44.230 --> 00:00:47.540
two statements. We have created a new list

00:00:47.540 --> 00:00:50.810
with elements one, two, three and a refers to

00:00:50.810 --> 00:00:55.660
that list, after the assign a to b statement, b also refers to

00:00:55.660 --> 00:01:00.550
that list, then we do x assign

00:01:00.550 --> 00:01:05.960
a pop to x. So the value of x will

00:01:05.960 --> 00:01:11.270
be three, that's what the last element was. That's what we get returned by pop.

00:01:11.270 --> 00:01:16.150
But it also mutates the value of the list. It removes that element. So now a

00:01:16.150 --> 00:01:19.306
refers to the list one, two. Since b was an a list for a,

00:01:19.306 --> 00:01:23.571
it also changed the value of b. b is now the list one, two.

