WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.800
I think I'm on fairly strong ground when I say that we haven't yet, in Computerphile, done recursion.

00:00:09.800 --> 00:00:12.500
This can get extremely hard.

00:00:12.680 --> 00:00:17.000
It is difficult to get your head around recursion, sometimes.

00:00:19.480 --> 00:00:22.440
In one way you can take a very mathematical view about it

00:00:22.440 --> 00:00:24.080
and close your eyes,

00:00:24.080 --> 00:00:26.040
and if you're a pure mathematician

00:00:26.040 --> 00:00:28.760
who thinks, as we computer scientists would say,

00:00:28.760 --> 00:00:31.600
exclusively "top down" about things,

00:00:31.600 --> 00:00:34.560
you can say, "Oh, it's just a formal definition, you know."

00:00:34.560 --> 00:00:37.840
Here's an example of something you can do recursively.

00:00:38.480 --> 00:00:49.100
Factorial of n is equal to n times factorial of n minus 1.

00:00:49.320 --> 00:00:52.560
And if you're used to mathematical thinking, well, that's absolutely alright.

00:00:52.560 --> 00:00:55.820
Of course, they will then go on, thank heavens, and say:

00:00:55.820 --> 00:00:58.760
"Ah, but you've got to stop that.  You're just going round and round"

00:00:58.760 --> 00:01:00.500
"chasing your own tail."

00:01:00.500 --> 00:01:03.600
"Because, what about factorial n minus 1, then?"

00:01:03.600 --> 00:01:05.600
Well, factorial n-1

00:01:05.600 --> 00:01:07.600
is the same as

00:01:07.600 --> 00:01:10.620
n minus 1 times factorial n minus 2.

00:01:10.620 --> 00:01:11.900
And the mathematician will say,

00:01:11.900 --> 00:01:14.100
Oh yes, all you're doing is re-labeling the n.

00:01:14.100 --> 00:01:17.660
Because, you know, what was n now becomes n-1, and so on.

00:01:17.680 --> 00:01:19.180
And yes, that's quite right.

00:01:19.500 --> 00:01:21.860
But certainly at the bottom of all this, you've got to have a way of

00:01:21.860 --> 00:01:24.140
dropping out and terminating this

00:01:24.140 --> 00:01:26.300
endless succession

00:01:26.300 --> 00:01:29.480
of things defined in terms of themselves.

00:01:29.480 --> 00:01:31.060
Your way out of all this

00:01:31.060 --> 00:01:33.760
is that when you hit factorial 1,

00:01:33.760 --> 00:01:35.760
that is defined to be 1.

00:01:35.920 --> 00:01:39.500
So let's take, um, an actual real example of this

00:01:39.500 --> 00:01:41.500
and one which we will later develop

00:01:41.500 --> 00:01:42.860
with a program.

00:01:42.860 --> 00:01:46.000
What we're saying -- I'll abbreviate it now

00:01:46.000 --> 00:01:48.860
as "fact" rather than "factorial".

00:01:48.860 --> 00:01:50.860
Factorial 4

00:01:50.860 --> 00:01:52.860
from this definition

00:01:52.860 --> 00:01:53.940
is

00:01:53.940 --> 00:01:58.200
4 times whatever factorial of

00:01:58.200 --> 00:01:59.040
[quietly] 4 minus 1?

00:01:59.040 --> 00:02:00.240
3 is.

00:02:00.540 --> 00:02:02.340
But factorial 3

00:02:02.340 --> 00:02:04.720
is [laughing] 3 times

00:02:04.720 --> 00:02:07.080
whatever factorial 2 is.

00:02:07.820 --> 00:02:13.120
Factorial 2 is
2 times whatever factorial 1 is.

00:02:13.120 --> 00:02:15.880
Ah!  But factorial 1 is 1.

00:02:17.200 --> 00:02:18.300
So there we are, then.

00:02:18.300 --> 00:02:22.480
Factorial 4 is
4 times 3 times 2 times 1

00:02:22.680 --> 00:02:23.880
is

00:02:23.880 --> 00:02:25.400
is
24.

00:02:25.400 --> 00:02:27.400
Factorial, if you wanted to work 'em out

00:02:27.400 --> 00:02:29.080
on a computer --

00:02:29.080 --> 00:02:31.920
You can do it one of two ways.

00:02:31.920 --> 00:02:35.640
You can do it recursively --

00:02:35.640 --> 00:02:42.920
and this really, as we will see, in its implementation, will need a stack;

00:02:43.100 --> 00:02:44.900
oh yes, it will.

00:02:45.380 --> 00:02:48.360
Or, you can do it iteratively.

00:02:48.560 --> 00:02:53.060
What does it mean to do it recursively?

00:02:53.060 --> 00:02:55.440
I will look at it very briefly here,

00:02:55.440 --> 00:02:58.820
but then I will do this for you on the stack.

00:02:58.820 --> 00:03:02.320
So, here's our recursive definition of factorial.

00:03:02.320 --> 00:03:05.740
In fact, I've put in a comment here, saying
"This is the recursive version."

00:03:05.740 --> 00:03:07.620
What I'm saying here is --

00:03:07.620 --> 00:03:09.740
there again, those of you familiar with

00:03:09.740 --> 00:03:11.740
any of the C-like languages,

00:03:11.740 --> 00:03:13.740
any of the C-like languages,
you know, Java, C++, whatever --

00:03:13.740 --> 00:03:15.740
you'll find this very familiar.

00:03:15.740 --> 00:03:19.360
The incoming parameter,

00:03:19.360 --> 00:03:21.800
or "argument" as it's sometimes called,

00:03:21.800 --> 00:03:23.420
is labeled "n".

00:03:23.980 --> 00:03:26.440
The name of the function is "factorial".

00:03:26.440 --> 00:03:29.240
And the answer delivered back by factorial

00:03:29.240 --> 00:03:31.780
will be an integer answer.

00:03:31.780 --> 00:03:33.360
So, every time you call it,

00:03:33.420 --> 00:03:35.780
it expects an incoming parameter,

00:03:35.780 --> 00:03:37.660
or argument, as it's sometimes called;

00:03:37.660 --> 00:03:39.540
and it will deliver you back an answer

00:03:39.540 --> 00:03:41.440
that's also another integer.

00:03:41.720 --> 00:03:45.120
Factorial is only defined for integers,
not for real numbers,

00:03:45.120 --> 00:03:46.820
not for any other sort of thing.

00:03:46.820 --> 00:03:49.600
Only for integers, and only for positive integers.

00:03:49.600 --> 00:03:51.600
It won't even work for negative ones.

00:03:52.360 --> 00:03:53.360
Okay.

00:03:53.360 --> 00:03:56.000
Now, this is almost like writing mathematics.

00:03:56.000 --> 00:03:57.400
It's almost like writing

00:03:57.480 --> 00:03:59.600
this definition I had up here, look.

00:03:59.600 --> 00:04:04.000
You say,
If the incoming argument is 1,

00:04:04.300 --> 00:04:06.300
then my answer is 1.

00:04:06.300 --> 00:04:08.300
The factorial of 1 is 1.

00:04:08.300 --> 00:04:12.380
So I return, to the outside world that wants to know --

00:04:12.380 --> 00:04:13.940
I return the answer 1.

00:04:13.940 --> 00:04:15.760
Factorial 1 is 1.

00:04:15.760 --> 00:04:18.640
Otherwise, I return back to the outside world

00:04:18.640 --> 00:04:20.040
that wants to know --

00:04:20.040 --> 00:04:22.300
I say, The factorial of anything else

00:04:22.300 --> 00:04:27.280
is n times the factorial of the number 1 less than it.

00:04:27.280 --> 00:04:29.560
What the secret is here,

00:04:30.220 --> 00:04:33.080
is the factorial of the next number below,

00:04:33.080 --> 00:04:37.340
you feed in as the so-called "actual parameter";

00:04:37.560 --> 00:04:42.260
the thing that is 1 less than the n you've got at the moment.

00:04:42.260 --> 00:04:43.440
So, if we can move 4,

00:04:43.440 --> 00:04:48.260
I return back 4 times factorial 3.

00:04:48.260 --> 00:04:51.800
What's n-1?
If n is 4, it's factorial 3.

00:04:51.800 --> 00:04:53.520
Ah!

00:04:53.800 --> 00:04:54.660
Oh, gosh!

00:04:54.660 --> 00:04:56.060
What this means is,

00:04:56.060 --> 00:04:57.500
I can't return the answer

00:04:57.500 --> 00:05:00.660
until I've worked out what factorial 3 is.

00:05:00.660 --> 00:05:04.340
So I dive back into this same piece of code,

00:05:04.340 --> 00:05:06.140
only this time --

00:05:06.140 --> 00:05:08.340
it's still calling it "n",

00:05:08.340 --> 00:05:11.420
but n has now changed into 3.

00:05:11.420 --> 00:05:14.480
So the first thing you have to get happy about

00:05:14.480 --> 00:05:17.240
is there isn't just one n.

00:05:17.240 --> 00:05:18.700
There's lots of them.

00:05:18.700 --> 00:05:21.780
They're all called "n", but they're all different;

00:05:21.780 --> 00:05:24.820
and they all have to be managed and kept separate.

00:05:25.320 --> 00:05:29.080
That's the first thing:  There is not just one n.

00:05:29.380 --> 00:05:31.600
Recursion wouldn't work if there were.

00:05:31.780 --> 00:05:33.940
And that way of keeping them separate

00:05:33.940 --> 00:05:36.420
just naturally falls out,

00:05:36.420 --> 00:05:38.420
no process for guessing,

00:05:38.420 --> 00:05:39.680
it's a stack.

00:05:39.740 --> 00:05:42.080
You need a stack to do this properly.

00:05:42.080 --> 00:05:46.420
Here's my main program.
Here's its environment; here's its data.

00:05:47.980 --> 00:05:50.780
What I'm going to do from here, the main program,

00:05:50.780 --> 00:05:51.800
is to say,

00:05:51.800 --> 00:05:53.800
I want factorial 4.

00:05:53.800 --> 00:05:55.820
In order for it to work correctly

00:05:55.820 --> 00:05:58.240
and have its own local variables,

00:05:58.240 --> 00:05:59.940
which of course includes

00:05:59.940 --> 00:06:01.480
all of these different

00:06:01.480 --> 00:06:03.400
instances of n, in this case,

00:06:03.400 --> 00:06:06.700
you put on what's called another stack frame,

00:06:06.700 --> 00:06:09.060
another whole area of the stack.

00:06:09.060 --> 00:06:10.220
And you say,

00:06:10.700 --> 00:06:11.500
That one

00:06:12.080 --> 00:06:13.300
is going to deliver back

00:06:13.540 --> 00:06:15.260
the answer to factorial 4.

00:06:15.720 --> 00:06:17.720
But factorial 4 then says,

00:06:17.720 --> 00:06:19.720
Can't work the answer out

00:06:19.720 --> 00:06:22.680
until I know what factorial 3 is.

00:06:23.300 --> 00:06:24.040
So, remember,

00:06:24.460 --> 00:06:25.740
this smaller white one

00:06:26.000 --> 00:06:27.960
is gonna work out factorial 3.

00:06:29.440 --> 00:06:30.520
It also

00:06:30.920 --> 00:06:32.080
does the usual trick,

00:06:32.220 --> 00:06:34.920
Oh, I don't know what factorial 3 is.

00:06:34.920 --> 00:06:36.400
It's 3 times factorial 2.

00:06:36.540 --> 00:06:38.420
So I've got to know what factorial 2 is.

00:06:38.680 --> 00:06:39.700
So here is the frame

00:06:40.180 --> 00:06:41.140
on the stack

00:06:41.340 --> 00:06:42.820
that will work out factorial 2.

00:06:43.260 --> 00:06:45.020
Finally, with a great sense of relief,

00:06:45.020 --> 00:06:46.760
factorial 2 says,

00:06:46.760 --> 00:06:47.880
All I know is that

00:06:47.880 --> 00:06:49.860
I'm 2 times factorial 1.

00:06:49.860 --> 00:06:51.180
There's factorial 1.

00:06:51.420 --> 00:06:52.500
At last.

00:06:52.980 --> 00:06:54.400
Factorial 1 says,

00:06:54.540 --> 00:06:55.540
I know what I am;

00:06:55.620 --> 00:06:56.720
I am the answer 1.

00:06:56.720 --> 00:06:58.720
The factorial 2 frame

00:06:58.720 --> 00:06:59.820
is waiting there

00:06:59.820 --> 00:07:01.160
on what you might call

00:07:01.160 --> 00:07:03.160
a "pending multiply".

00:07:03.160 --> 00:07:03.820
It's saying,

00:07:03.820 --> 00:07:08.420
I am 2 times whatever factorial 1 is.

00:07:08.420 --> 00:07:10.420
Factorial 1 says, Here you go,

00:07:10.420 --> 00:07:11.880
into the pending multiply,

00:07:12.260 --> 00:07:13.260
the answer's 1.

00:07:13.260 --> 00:07:14.900
And then the same thing happens.

00:07:14.900 --> 00:07:17.840
Oh!  So the answer to factorial 2, is 2.

00:07:18.080 --> 00:07:20.080
Where does that need to be delivered back to?

00:07:20.580 --> 00:07:23.040
It needs to be delivered back into the frame below,

00:07:23.040 --> 00:07:25.040
which is positively gasping

00:07:25.040 --> 00:07:26.700
because it wants to do

00:07:26.700 --> 00:07:29.340
3 times whatever factorial 2 is.

00:07:29.340 --> 00:07:31.340
It's 3 times 2.

00:07:31.700 --> 00:07:33.700
Now, where is it that's waiting for that?

00:07:33.700 --> 00:07:35.100
3 times 2 is 6.

00:07:35.100 --> 00:07:37.100
So, somewhere down here

00:07:37.400 --> 00:07:39.540
is a pending multiply in this frame,

00:07:39.540 --> 00:07:41.740
saying that factorial 4

00:07:41.740 --> 00:07:44.580
is 4 times whatever factorial 3 was.

00:07:44.580 --> 00:07:45.980
But we've just found out that

00:07:45.980 --> 00:07:49.180
factorial 3 ends up cascading down, delivering 6.

00:07:49.180 --> 00:07:51.940
4 times 6 is 24.

00:07:51.940 --> 00:07:53.940
Final pending multiply was done,

00:07:53.940 --> 00:07:55.940
and it gets delivered back

00:07:55.940 --> 00:07:58.220
into the main program

00:07:58.220 --> 00:08:00.760
and in the main program that I've got here --

00:08:00.760 --> 00:08:04.260
we'll put this out, of course, with a web link to it --

00:08:04.760 --> 00:08:07.100
all I do with the value when I get it back,

00:08:07.100 --> 00:08:08.400
is, I just print it out, or say

00:08:08.400 --> 00:08:11.100
The answer to factorial 4 is 24.

00:08:11.100 --> 00:08:14.300
That's back in the main program's area

00:08:14.300 --> 00:08:16.620
at the bottom of the stack.

00:08:16.840 --> 00:08:21.380
What you have to remember is that,
in these pending multiplies that we had,

00:08:21.380 --> 00:08:23.380
each one of them is holding onto

00:08:23.380 --> 00:08:26.060
a different value of n

00:08:26.060 --> 00:08:27.760
as the left-hand operand

00:08:27.760 --> 00:08:29.380
in its pending mulitply.

00:08:29.380 --> 00:08:33.080
This is saying, 4 times something;
the one above it said, 3 times something;

00:08:33.080 --> 00:08:35.000
2 times something; and so on.

00:08:35.000 --> 00:08:37.480
And the answers cascaded back down

00:08:37.480 --> 00:08:40.480
and dropped out at the bottom correctly.

00:08:45.560 --> 00:08:48.320
We'd like to thank Audible.com for sponsoring this computerphile video.

00:08:48.320 --> 00:08:50.320
They've got loads of books online.

00:08:50.320 --> 00:08:51.140
So, if you want to check one out,

00:08:51.140 --> 00:08:51.860
go over to

00:08:52.320 --> 00:08:54.080
audible.com/computerphile

00:08:54.640 --> 00:08:55.880
and you can download one for free

00:08:56.080 --> 00:08:57.040
if you sign up there.

00:08:57.140 --> 00:08:58.540
Today, I'd like to recommend

00:08:58.540 --> 00:08:59.720
Console Wars

00:08:59.720 --> 00:09:01.340
brand new book out by Blake Harris

00:09:01.340 --> 00:09:03.340
and it chronicles

00:09:03.340 --> 00:09:05.340
the console wars of the '90s

00:09:05.340 --> 00:09:07.340
between Nintendo and Sega

00:09:07.340 --> 00:09:09.340
when Sega did something really radical to take on

00:09:09.340 --> 00:09:12.780
the massive company that was, or corporation that was, Nintendo.

00:09:13.160 --> 00:09:15.160
Just shows how the players change as time goes on.

00:09:15.360 --> 00:09:17.360
It's a really, really interesting story.

00:09:17.360 --> 00:09:18.900
Uh, so check that out.

00:09:19.100 --> 00:09:21.360
Remember, audible dot com slash computerphile

00:09:21.780 --> 00:09:23.360
Sign up there to try out a free book.

00:09:23.360 --> 00:09:25.220
Thanks once again to them

00:09:25.240 --> 00:09:26.480
for supporting this video

00:09:26.480 --> 00:09:27.980
and other computerphile videos.

00:09:29.260 --> 00:09:31.260
And right up at the very top,

00:09:31.260 --> 00:09:33.640
the top of stack is often called

00:09:34.620 --> 00:09:36.840
the stack top pointer; SP for short.

00:09:36.840 --> 00:09:39.580
It's not an IBM one; it's developed by a company called Motorola.

