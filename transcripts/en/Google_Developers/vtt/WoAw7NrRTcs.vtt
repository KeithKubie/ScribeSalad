WEBVTT
Kind: captions
Language: en

00:00:01.160 --> 00:00:05.080
&gt;&gt;Joe Gregorio: Hi, I am Joe Gregorio and
I work for Google in developer relations.

00:00:05.080 --> 00:00:09.030
As part of our on going series on Atom Publishing
Protocol, today we are going to be covering

00:00:09.030 --> 00:00:13.410
some of the advanced features, if you haven't
had a chance yet please go to back and watch

00:00:13.410 --> 00:00:18.369
the introduction to the atom publishing protocol
which will cover all the basics. So let's

00:00:18.369 --> 00:00:25.039
begin, in this presentation we goanna be covering
four advanced features that we had not previously

00:00:25.039 --> 00:00:32.029
covered; Paging, Drafts, Category Documents
and the Slug header. Paging: Paging is for

00:00:32.029 --> 00:00:37.420
what happens when you have too many entries
for a single feed document. Previously we

00:00:37.420 --> 00:00:43.690
talked about you would go and do a get on
a collection, and you would retrieve the feed

00:00:43.690 --> 00:00:48.469
document and within that feed document there
would be entries and each entry would correspond

00:00:48.469 --> 00:00:55.649
to a web Blog entry. If there are a lot of
entries putting them all into a single feed

00:00:55.649 --> 00:01:01.210
would actually be a bad idea there could be
tens, hundreds or thousands of entries. The

00:01:01.210 --> 00:01:05.910
paging that is built in the atom publishing
protocol allows you to control how many of

00:01:05.910 --> 00:01:10.590
those entries you are actually going to receive.
The server decides how many entries go into

00:01:10.590 --> 00:01:15.820
a feed and you retrieve that feed and you
would like more entries you would follow the

00:01:15.820 --> 00:01:22.020
next link seen here. So it's a link element
with the relationship of next and you retrieve

00:01:22.020 --> 00:01:26.360
with a get element and when you arrive, when
you do that get feed you will receive yet

00:01:26.360 --> 00:01:35.290
another feed and or retrieve the next batch
of entries. Similarly that feed may contain

00:01:35.290 --> 00:01:39.720
another link element with the next batch of
entries within it and you can continue to

00:01:39.720 --> 00:01:47.610
follow it in a chain until you get all the
entries that you want. Drafts: Here we are

00:01:47.610 --> 00:01:56.050
talking about editing an entry without making
it public; if I post an entry to a collection

00:01:56.050 --> 00:02:02.810
I can add the App control element and inside
there add the draft element with the value

00:02:02.810 --> 00:02:09.850
of yes .That tells the publishing system to
keep it as a draft and not to make it public.

00:02:09.850 --> 00:02:15.100
It will still show up at the collection feed
and I can still edit it, add gets and puts

00:02:15.100 --> 00:02:20.500
within it, I can delete it and remove it from
the collection, but it will remain as part

00:02:20.500 --> 00:02:25.630
of and will not update the actual web Blog
itself and it will stay out of the public

00:02:25.630 --> 00:02:32.050
feed. When I change this value from yes to
no or remove the draft element completely

00:02:32.050 --> 00:02:38.820
it will no longer be a draft and when I update
that entry it will be made publicly available.

00:02:38.820 --> 00:02:47.010
Category documents: You can add category elements
to your entries and this is part of the atoms

00:02:47.010 --> 00:02:52.680
indication formula. What we need to know thou
in the publishing scenario is what categories

00:02:52.680 --> 00:02:58.710
are available to the client to use when he
creates an entry, those are actually listed

00:02:58.710 --> 00:03:06.400
in the service document and in here we can
see that there are two category elements that

00:03:06.400 --> 00:03:19.880
are possible to use that is Joke and Serious
in the skin which are defined by a Uri :http//example.org/extras-cats.

00:03:19.880 --> 00:03:25.700
Categories are listed in the collection element
in the workspace that you are working with

00:03:25.700 --> 00:03:30.930
in the service document. Now there could be
a lot of categories elements that are possible

00:03:30.930 --> 00:03:37.300
to use and another situation you could run
into is were you have categories that you

00:03:37.300 --> 00:03:45.670
have to reuse them among different collections.
So an alternative way of listing this information

00:03:45.670 --> 00:03:53.910
is to actually create a stand alone category
document and just reference the URI For that

00:03:53.910 --> 00:03:59.990
.So here we have a categories element and
just as an HREF and if I do a get on that

00:03:59.990 --> 00:04:06.760
URI I would actually retrieve a category document
as you can see here and this is the exact

00:04:06.760 --> 00:04:11.670
information that we got in the service document
but I can now reuse it in multiple collection

00:04:11.670 --> 00:04:18.650
by just referencing that URI .An optimization
that you see here is that the skin has actually

00:04:18.650 --> 00:04:24.910
been lifted up and is in the App categories
element and so it does not appear in each

00:04:24.910 --> 00:04:29.280
of the atom categories elements below this
is just an optimization so that you don't

00:04:29.280 --> 00:04:36.850
have to keep repeating the same information
and it still means the same thing. The Slug

00:04:36.850 --> 00:04:46.810
header suggests to the server what should
the URI of the entry be. This is just a suggestion

00:04:46.810 --> 00:04:53.660
to the server and the server can ignore this
and it is optional to implement this, and

00:04:53.660 --> 00:05:02.280
that is actually done by including a slug
header when you post to create a new entry.

00:05:02.280 --> 00:05:06.660
And that's it those are the four advanced
features of the atom publishing protocol that

00:05:06.660 --> 00:05:13.560
were not previously covered in the atom publishing
protocol presentation and that's it. Thanks

00:05:13.560 --> 00:05:14.740
very much and have fun.

