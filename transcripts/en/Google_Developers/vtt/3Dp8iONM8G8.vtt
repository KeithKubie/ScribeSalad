WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:01.875
TODD KERPELMAN: So
in a previous video,

00:00:01.875 --> 00:00:04.330
you learned that you can use
GCM to send notifications

00:00:04.330 --> 00:00:07.030
through APNs to iOS devices.

00:00:07.030 --> 00:00:10.070
But to many developers, APNs
is a bit of a black box.

00:00:10.070 --> 00:00:12.260
And come to think
of it, so is GCM.

00:00:12.260 --> 00:00:16.280
Put them together and you've
got a black rectangle, I guess.

00:00:16.280 --> 00:00:18.370
Well personally, I find
having a little background

00:00:18.370 --> 00:00:20.190
on how things work
underneath the hood

00:00:20.190 --> 00:00:22.330
can help out a lot
when stuff goes wrong.

00:00:22.330 --> 00:00:24.880
So let's shine a light on
half of this big old rectangle

00:00:24.880 --> 00:00:26.790
on this episode of "Route 85."

00:00:26.790 --> 00:00:29.790
[MUSIC PLAYING]

00:00:34.200 --> 00:00:37.950
So APNs is a service that sends
notifications to iOS devices,

00:00:37.950 --> 00:00:39.760
whether the target app
is in the foreground

00:00:39.760 --> 00:00:40.930
or in the background.

00:00:40.930 --> 00:00:42.000
So how does it work?

00:00:42.000 --> 00:00:44.830
Well for starters, you need two
important configuration bits

00:00:44.830 --> 00:00:46.130
to make this happen.

00:00:46.130 --> 00:00:47.904
First off-- the device token.

00:00:47.904 --> 00:00:49.820
You can basically think
of this as the address

00:00:49.820 --> 00:00:51.270
of the device you
want to talk to you,

00:00:51.270 --> 00:00:52.780
but one that's
unique for your app.

00:00:52.780 --> 00:00:55.520
It's also not really the
address of the device.

00:00:55.520 --> 00:00:57.520
You know how when rock
stars check into a hotel,

00:00:57.520 --> 00:00:58.540
they use a fake name?

00:00:58.540 --> 00:01:01.322
Well, the device token is kind
of like having that fake name.

00:01:01.322 --> 00:01:03.780
It lets the hotel manager know
that, hey, it's cool for you

00:01:03.780 --> 00:01:06.230
to visit your rock star friend,
because you know the alias

00:01:06.230 --> 00:01:07.700
that they're checked in under.

00:01:07.700 --> 00:01:08.315
Is that Matt and Kim?

00:01:08.315 --> 00:01:09.731
It kind of looks
like them, right?

00:01:09.731 --> 00:01:10.940
Yeah.

00:01:10.940 --> 00:01:12.960
So when your app gets
permission from your user

00:01:12.960 --> 00:01:16.660
to receive notifications, iOS
talks to APNs and requests

00:01:16.660 --> 00:01:19.540
a device token-- basically a
fake rock star name-- which

00:01:19.540 --> 00:01:21.600
is then given to your app.

00:01:21.600 --> 00:01:25.130
Now if you were just building an
iOS app using nothing but APNs,

00:01:25.130 --> 00:01:28.030
you'd need to pass this token
back to your server somehow.

00:01:28.030 --> 00:01:31.220
We'll get into what GCM
does at a later point.

00:01:31.220 --> 00:01:34.290
When your server passes this
device token back to APNs,

00:01:34.290 --> 00:01:36.050
it's your way of
both identifying

00:01:36.050 --> 00:01:39.290
the device you want to talk
to, as well as proving to APNs

00:01:39.290 --> 00:01:42.910
that you're allowed to notify
that device in the first place.

00:01:42.910 --> 00:01:45.210
The next bit you need
is the APNs certificate.

00:01:45.210 --> 00:01:46.590
This basically
allows your server

00:01:46.590 --> 00:01:48.510
to talk to APNs securely.

00:01:48.510 --> 00:01:51.090
And hang on, we've got some
massively over-simplified

00:01:51.090 --> 00:01:53.080
explanations coming your way.

00:01:53.080 --> 00:01:56.080
One common way for two devices
to talk to each other securely

00:01:56.080 --> 00:01:58.670
is to use public and
private key encryption.

00:01:58.670 --> 00:02:01.620
Alice encrypts messages
using Bob's public key, which

00:02:01.620 --> 00:02:04.680
only he can decode on his
side using his private key,

00:02:04.680 --> 00:02:07.080
and then vice versa.

00:02:07.080 --> 00:02:10.259
So let's imagine your server
is Alice in this scenario.

00:02:10.259 --> 00:02:13.160
And if you want to talk
back and forth to APNs,

00:02:13.160 --> 00:02:16.390
you're going to need your
own private key and APNs'

00:02:16.390 --> 00:02:17.950
public key.

00:02:17.950 --> 00:02:19.955
In some cases, like
the openssl tool

00:02:19.955 --> 00:02:21.580
that you can run from
the command line,

00:02:21.580 --> 00:02:24.650
you pass these two
keys in separately.

00:02:24.650 --> 00:02:28.290
But for many third party tools,
including GCM, these two keys

00:02:28.290 --> 00:02:30.870
are combined together, along
with some other information,

00:02:30.870 --> 00:02:33.410
into a p12 file that we
colloquially refer to

00:02:33.410 --> 00:02:35.605
as the APNs certificate.

00:02:35.605 --> 00:02:37.230
So with all that
background, let's look

00:02:37.230 --> 00:02:40.160
at what happens when we send
off a notification via APNs

00:02:40.160 --> 00:02:42.754
using, say, a little
server that you might have.

00:02:42.754 --> 00:02:44.420
For starters, we'll
use that certificate

00:02:44.420 --> 00:02:47.180
we just talked about, containing
your private key and APNs'

00:02:47.180 --> 00:02:50.650
public key, so that you can talk
securely to the APNs service.

00:02:50.650 --> 00:02:52.620
Yes, I know APNs
service is redundant.

00:02:52.620 --> 00:02:53.680
Shut up.

00:02:53.680 --> 00:02:55.340
Now when you send
off a notification,

00:02:55.340 --> 00:02:56.923
you're going to need
to include things

00:02:56.923 --> 00:02:58.820
like the notification
message, badge count,

00:02:58.820 --> 00:03:00.201
or any associated data.

00:03:00.201 --> 00:03:01.700
And you're going
to send all of that

00:03:01.700 --> 00:03:04.080
along with the device token.

00:03:04.080 --> 00:03:05.810
Now when APNs
receives that token,

00:03:05.810 --> 00:03:07.372
it's going to do
some verification.

00:03:07.372 --> 00:03:09.830
It'll make sure it's a valid
token, it hasn't been revoked,

00:03:09.830 --> 00:03:11.880
and that it actually
belongs to your app.

00:03:11.880 --> 00:03:14.150
At this point, if
everything looks good,

00:03:14.150 --> 00:03:16.440
it will go ahead and
schedule the delivery

00:03:16.440 --> 00:03:19.790
of that notification at
some point in the future.

00:03:19.790 --> 00:03:21.280
When does it
actually deliver it?

00:03:21.280 --> 00:03:22.850
Honestly, that's
kind of up to Apple.

00:03:22.850 --> 00:03:25.372
And they're not super explicit
about the logic they use.

00:03:25.372 --> 00:03:27.580
There are a lot of different
factors involved though.

00:03:27.580 --> 00:03:30.000
But you can influence this
by labeling your messages

00:03:30.000 --> 00:03:31.940
as high priority,
which has a priority

00:03:31.940 --> 00:03:35.804
value of 10 here, or a normal
priority, with a value of 5.

00:03:35.804 --> 00:03:37.720
A high priority message
would be for something

00:03:37.720 --> 00:03:39.553
where the user might
get upset if they don't

00:03:39.553 --> 00:03:40.870
receive their message on time.

00:03:40.870 --> 00:03:42.720
A chat message or
a calendar reminder

00:03:42.720 --> 00:03:44.840
is a good example here.

00:03:44.840 --> 00:03:47.810
A normal priority message is for
something less time critical.

00:03:47.810 --> 00:03:49.600
APNs will often
group these messages

00:03:49.600 --> 00:03:51.250
and send them all
at once as a way

00:03:51.250 --> 00:03:52.880
to conserve the user's battery.

00:03:52.880 --> 00:03:55.420
And they may even get
throttled and not send at all.

00:03:55.420 --> 00:03:58.440
But still, it's a good way of
respecting your user's battery.

00:03:58.440 --> 00:04:00.370
So if it's not an
urgent notification,

00:04:00.370 --> 00:04:02.584
consider sending
it normal priority.

00:04:02.584 --> 00:04:04.000
Now, what happens
when your device

00:04:04.000 --> 00:04:05.220
receives the notification?

00:04:05.220 --> 00:04:08.570
It depends a lot on what's going
on with your app at the time.

00:04:08.570 --> 00:04:10.030
If your app is in
the foreground,

00:04:10.030 --> 00:04:12.620
iOS will simply hand the
notification off to your app.

00:04:12.620 --> 00:04:14.960
It won't show any kind of
display at the system level.

00:04:14.960 --> 00:04:17.950
That's completely left up
for your app to deal with.

00:04:17.950 --> 00:04:19.519
If your app is in
the background,

00:04:19.519 --> 00:04:21.611
iOS will commonly show
a notification-- usually

00:04:21.611 --> 00:04:24.110
as a banner up on top here, but
it depends on your settings.

00:04:24.110 --> 00:04:26.670
And it will probably be listed
in the Notifications panel

00:04:26.670 --> 00:04:27.710
as well.

00:04:27.710 --> 00:04:29.690
If the user selects
that notification,

00:04:29.690 --> 00:04:31.574
your app will come back
into the foreground.

00:04:31.574 --> 00:04:33.240
And at that point,
your app has a chance

00:04:33.240 --> 00:04:35.557
to handle the notification.

00:04:35.557 --> 00:04:37.640
Now, there is one other
attribute of notifications

00:04:37.640 --> 00:04:38.670
you should be aware of.

00:04:38.670 --> 00:04:40.940
And that is the
content-available flag.

00:04:40.940 --> 00:04:43.049
The purpose of this
flag is to tell iOS

00:04:43.049 --> 00:04:44.840
that this would be a
good time for your app

00:04:44.840 --> 00:04:46.334
to do a little background work.

00:04:46.334 --> 00:04:48.750
For example, you might want
to tell your news app that you

00:04:48.750 --> 00:04:50.030
have some breaking
news available,

00:04:50.030 --> 00:04:52.050
and your app should go
and download and refresh

00:04:52.050 --> 00:04:53.830
the day's top headlines.

00:04:53.830 --> 00:04:55.620
Now, these notifications
always need

00:04:55.620 --> 00:04:57.410
to be sent as normal priority.

00:04:57.410 --> 00:05:00.669
And developers typically send
these as silent notifications.

00:05:00.669 --> 00:05:02.210
That is, they're
usually sent without

00:05:02.210 --> 00:05:04.230
an associated alert
message or sound,

00:05:04.230 --> 00:05:06.190
so the user doesn't notice them.

00:05:06.190 --> 00:05:08.790
When iOS gets these kind of
content-available messages,

00:05:08.790 --> 00:05:11.290
it will pass the notification
along to your app.

00:05:11.290 --> 00:05:13.349
And your app will have
up to 30 seconds--

00:05:13.349 --> 00:05:15.890
but it might be a little less,
depending on certain factors--

00:05:15.890 --> 00:05:18.350
to do whatever background work
it needs to do, and then let

00:05:18.350 --> 00:05:20.157
iOS know that it's finished.

00:05:20.157 --> 00:05:22.490
Now, how you actually handle
these notifications or what

00:05:22.490 --> 00:05:24.430
methods you use are
all very good topics

00:05:24.430 --> 00:05:26.470
that I'm going to
leave to another video.

00:05:26.470 --> 00:05:29.510
Honestly, you're troopers for
sticking out with me this far.

00:05:29.510 --> 00:05:30.190
So there you go.

00:05:30.190 --> 00:05:32.840
That's APNs in an
overly-simplified nutshell.

00:05:32.840 --> 00:05:35.490
But wait, this is a video
series on GCM, right?

00:05:35.490 --> 00:05:37.400
How does GCM fit in
this whole scenario?

00:05:37.400 --> 00:05:39.440
Well, we will take a
look at the second half

00:05:39.440 --> 00:05:41.990
of our black rectangle
in a future video.

00:05:41.990 --> 00:05:44.670
In the meantime, feel free to
check out our documentation.

00:05:44.670 --> 00:05:46.610
And we will see you
soon on "Route 85."

00:05:46.610 --> 00:05:49.660
[MUSIC PLAYING]

