WEBVTT
Kind: captions
Language: en

00:00:08.194 --> 00:00:10.020
ALAN SHANSKE: Hi, my name
is Alan Shanske.

00:00:10.020 --> 00:00:11.890
I'm an intern on the Android
Team at Google.

00:00:11.890 --> 00:00:13.720
And today I'll be talking
about Listview dragging

00:00:13.720 --> 00:00:14.680
animations.

00:00:14.680 --> 00:00:17.400
So the demo today is going to
be a simple Listview, where

00:00:17.400 --> 00:00:20.800
you can long-click on an item,
then drag it around.

00:00:20.800 --> 00:00:22.810
And you'll see that as you drag
the item around it will

00:00:22.810 --> 00:00:25.720
actually replace and move
around, swap the underlying

00:00:25.720 --> 00:00:28.320
data set, with the other
Listview items.

00:00:28.320 --> 00:00:31.590
So the main trick to doing this
animation was to realize

00:00:31.590 --> 00:00:33.960
that we're not actually moving
the views of the list you

00:00:33.960 --> 00:00:36.610
round but what you're going
to do is create a Bitmap

00:00:36.610 --> 00:00:39.380
drawable, overlay the Bitmap
drawable on top of the

00:00:39.380 --> 00:00:42.070
Listview, and then as you're
dragging your finger around,

00:00:42.070 --> 00:00:44.560
what's actually going to happen
is that we'll be moving

00:00:44.560 --> 00:00:47.210
the Bitmap drawable, but not
the view which is actually

00:00:47.210 --> 00:00:49.070
contained inside the Listview.

00:00:49.070 --> 00:00:51.390
So let's jump straight
to a demo.

00:00:51.390 --> 00:00:55.170
And so here we have just
a list of cheeses.

00:00:55.170 --> 00:01:00.140
We can click and hold on one of
the items in order to get

00:01:00.140 --> 00:01:02.580
hold of it, and then as we drag
it around you'll see that

00:01:02.580 --> 00:01:06.270
the items around it animate into
place while swapping the

00:01:06.270 --> 00:01:09.950
underlying data set change
and moving around.

00:01:09.950 --> 00:01:12.370
Furthermore, if the Bitmap
drawable, if the hover view

00:01:12.370 --> 00:01:14.520
that we have goes outside the
bounds of the Listview, you

00:01:14.520 --> 00:01:16.500
can see that the Listview starts
scrolling and also at

00:01:16.500 --> 00:01:21.330
the same time swapping elements
as we need to.

00:01:21.330 --> 00:01:24.410
Same thing goes when
it's above the

00:01:24.410 --> 00:01:25.430
valance of the Listview.

00:01:25.430 --> 00:01:29.480
When you let go of it, the item
just animates back into

00:01:29.480 --> 00:01:33.840
place into the Listview,
and normal Listview

00:01:33.840 --> 00:01:36.120
interactions ensue.

00:01:36.120 --> 00:01:38.180
So let's just jump
straight to code.

00:01:38.180 --> 00:01:41.450
The main file to look at here
is Dynamic Listview which

00:01:41.450 --> 00:01:44.010
extends a Listview object.

00:01:44.010 --> 00:01:47.310
And as you scroll down, the
first important thing to see

00:01:47.310 --> 00:01:51.030
is that we added an OnLongClick
item listener.

00:01:51.030 --> 00:01:53.530
So what happens when an item
has been selected via

00:01:53.530 --> 00:01:56.390
LongClick event we have
to do a few things.

00:01:56.390 --> 00:01:58.470
One, we have to determine what
the position is of the

00:01:58.470 --> 00:02:02.180
ClickDown event, we have to
determine which item was

00:02:02.180 --> 00:02:04.420
selected, and then we
also [INAUDIBLE]

00:02:04.420 --> 00:02:08.484
the view that was selected from
that spot, as well as the

00:02:08.484 --> 00:02:10.130
item that we associate
with it.

00:02:10.130 --> 00:02:11.990
Then the important thing that's
happening is we call

00:02:11.990 --> 00:02:14.400
this method called,
GetAndAddHoverView, which

00:02:14.400 --> 00:02:15.960
returns a Bitmap drawable.

00:02:15.960 --> 00:02:19.140
And what that does is capture
the contents of the view that

00:02:19.140 --> 00:02:22.210
was selected, it takes a screen
shot of it, adds the

00:02:22.210 --> 00:02:25.400
little black border around that
we saw, right here in

00:02:25.400 --> 00:02:29.950
GetBitmapWithBorder, and the
screen shot is captured right

00:02:29.950 --> 00:02:32.820
here in GetBitmapFromView.

00:02:32.820 --> 00:02:37.570
So once we capture the Bitmap
and we insert it into the

00:02:37.570 --> 00:02:40.890
Bitmap drawable, the important
thing to note is that Bitmap

00:02:40.890 --> 00:02:42.610
drawables have the
notion of bounds.

00:02:42.610 --> 00:02:45.730
So by modifying the bounds we
can modify where it's located,

00:02:45.730 --> 00:02:48.530
and then when we draw it on top
of the Listview it'll move

00:02:48.530 --> 00:02:52.590
around accordingly to how
the bounds are updated.

00:02:52.590 --> 00:02:55.770
OK, so moving on to the
OnLongItemClick listener, the

00:02:55.770 --> 00:02:57.710
important thing to note is that
when an item has been

00:02:57.710 --> 00:03:00.990
selected via LongItemClick event
there's a few things

00:03:00.990 --> 00:03:01.790
that we need to do.

00:03:01.790 --> 00:03:03.900
One, you need to determine what
the position is of the

00:03:03.900 --> 00:03:06.265
Down event was, you need to
determine the item number that

00:03:06.265 --> 00:03:09.610
was selected, and you also need
to retrieve the view that

00:03:09.610 --> 00:03:11.280
was clicked as well.

00:03:11.280 --> 00:03:13.660
So then what we're going to do
is call this method called,

00:03:13.660 --> 00:03:17.870
GetAndAddHoverView which all
it's going to do is return a

00:03:17.870 --> 00:03:20.640
Bitmap drawable that has the
same contents as the view that

00:03:20.640 --> 00:03:21.720
was selected.

00:03:21.720 --> 00:03:24.340
Using a couple methods here
year below, we're going to

00:03:24.340 --> 00:03:26.910
capture the contents of the
screen, add a black border

00:03:26.910 --> 00:03:30.730
around it which you saw in the
demo, and then we'll throw all

00:03:30.730 --> 00:03:32.790
of that into the Bitmap drawable
which then will be

00:03:32.790 --> 00:03:34.590
overlaid over our Listview.

00:03:34.590 --> 00:03:36.850
The important thing to note is
that Bitmap drawables do have

00:03:36.850 --> 00:03:39.370
the notion of bounds, so if we
do update the bounds of the

00:03:39.370 --> 00:03:42.270
Bitmap drawable we'll be able to
move it around accordingly

00:03:42.270 --> 00:03:44.830
on the screen to where we want
it to be in response to the

00:03:44.830 --> 00:03:46.310
user touches.

00:03:46.310 --> 00:03:49.440
That can get an AddHoverView,
the important thing to note is

00:03:49.440 --> 00:03:52.390
that we have to make sure the
visibility of the view that

00:03:52.390 --> 00:03:54.140
was selected is set
to invisible.

00:03:54.140 --> 00:03:56.680
So it's still going to be in the
Listview, and the Bitmap

00:03:56.680 --> 00:03:58.650
drawable is going to be
overlaying the Listview, but

00:03:58.650 --> 00:04:00.500
these two objects are completely
independent even

00:04:00.500 --> 00:04:04.300
though they correspond in
response to the user touches.

00:04:04.300 --> 00:04:07.570
The other trick that was
implemented in order to do

00:04:07.570 --> 00:04:13.660
this item swapping animation
is to know that whenever

00:04:13.660 --> 00:04:16.720
you're going to swap an item
you're only ever going to swap

00:04:16.720 --> 00:04:19.089
it with the item right above
it, or right below it.

00:04:19.089 --> 00:04:21.600
So that's why whenever a swap
animation takes place, or a

00:04:21.600 --> 00:04:24.090
dragging event begins, you
always need to retrieve the

00:04:24.090 --> 00:04:26.440
above item ID, and the
below item ID.

00:04:26.440 --> 00:04:31.600
By returning True for a stable
item IDs in this table array

00:04:31.600 --> 00:04:33.820
adapter, which is a custom array
adaptor implemented in

00:04:33.820 --> 00:04:37.250
this project, what you're
essentially saying is that

00:04:37.250 --> 00:04:41.060
every single item in your
Listview has a unique ID that

00:04:41.060 --> 00:04:43.680
you maintain yourself, and that
will never change for

00:04:43.680 --> 00:04:45.080
that corresponding object.

00:04:45.080 --> 00:04:47.900
So we know that this above and
below item ID will never

00:04:47.900 --> 00:04:51.880
change for the above and below
views around which are

00:04:51.880 --> 00:04:53.470
currently animating.

00:04:53.470 --> 00:04:56.440
There's some logic here
in GetViewForID and

00:04:56.440 --> 00:05:00.380
GetPositionForID where I was
able to actually retrieve a

00:05:00.380 --> 00:05:03.560
view given some item
ID, and vice versa.

00:05:03.560 --> 00:05:06.060
You can look at this later
in more detail if you're

00:05:06.060 --> 00:05:09.720
interested in seeing
how I did that.

00:05:09.720 --> 00:05:14.490
But the important thing here is
that in this batch draw, if

00:05:14.490 --> 00:05:17.070
I do have that Bitmap
drawable it will be

00:05:17.070 --> 00:05:18.230
drawn onto the screen.

00:05:18.230 --> 00:05:21.610
So what I'm doing here, if I'm
not in dragging event then my

00:05:21.610 --> 00:05:23.470
hover cell is going
to be null, I

00:05:23.470 --> 00:05:24.470
won't be drawing anything.

00:05:24.470 --> 00:05:27.970
If my hover cell is a non-null
object then I will draw it,

00:05:27.970 --> 00:05:30.850
it'll overlay the Listview
since I'm first calling

00:05:30.850 --> 00:05:31.510
[INAUDIBLE]

00:05:31.510 --> 00:05:34.640
and only then drawing the
hover cell on top of it.

00:05:34.640 --> 00:05:37.040
So now in OnTouch event there's
a few things that need

00:05:37.040 --> 00:05:37.820
to be done.

00:05:37.820 --> 00:05:41.090
When an ActionDown occurs I
don't yet know whether or not

00:05:41.090 --> 00:05:43.560
that's going to become a
dragging event or not, so

00:05:43.560 --> 00:05:46.510
either way I need to retrieve
the x and y-coordinates of the

00:05:46.510 --> 00:05:47.490
touch event.

00:05:47.490 --> 00:05:50.890
Then in ActionMove this is
where I actually move the

00:05:50.890 --> 00:05:54.050
hover cell in response
to the user touches.

00:05:54.050 --> 00:05:58.490
Firstly, I calculate the Delta
by how much the user has

00:05:58.490 --> 00:06:01.690
already moved his or her finger,
and then if I am

00:06:01.690 --> 00:06:04.530
indeed in a dragging event
then I need to offset the

00:06:04.530 --> 00:06:06.480
bounds of my hover cell.

00:06:06.480 --> 00:06:09.370
So here I offset the bounds, I
update the bounds, and then I

00:06:09.370 --> 00:06:12.520
call Invalidate which will call
DispatchDraw, draw the

00:06:12.520 --> 00:06:15.380
Listview, and then draw the
hover cell on top of it.

00:06:15.380 --> 00:06:18.380
The other thing I need to do is
call HandleCellSwitch which

00:06:18.380 --> 00:06:21.140
is where the logic for
determining whether an item

00:06:21.140 --> 00:06:24.250
cell swap is going
to take place.

00:06:24.250 --> 00:06:27.830
The way this works is I have a
couple bullions that determine

00:06:27.830 --> 00:06:31.740
whether or not my moving cell,
my Bitmap drawable has been

00:06:31.740 --> 00:06:36.020
shifted up or downwards enough
to actually completely overlap

00:06:36.020 --> 00:06:37.930
the cell that's above
or below it.

00:06:37.930 --> 00:06:40.540
If that is the case, then I
determine whether or not it

00:06:40.540 --> 00:06:43.380
was indeed moved up or moved
down and retrieve the item ID

00:06:43.380 --> 00:06:47.380
corresponding to the cell
which will be swapped.

00:06:47.380 --> 00:06:51.670
After I do that, I need to
swap the elements in the

00:06:51.670 --> 00:06:55.260
underlying data set change and
notify the adapter that data

00:06:55.260 --> 00:06:58.440
has indeed been changed.

00:06:58.440 --> 00:07:00.850
So what's going to happen when
the NotifyDataSetChange method

00:07:00.850 --> 00:07:05.100
is called is that the Listview
knows that the data is

00:07:05.100 --> 00:07:08.840
different so it's going to
invoke a layout and everything

00:07:08.840 --> 00:07:10.410
in the Listview will
be re-drawn.

00:07:10.410 --> 00:07:14.340
Before I do that, I want to make
sure that the cells that

00:07:14.340 --> 00:07:17.000
I need to be visible remain
visible, while the cell that

00:07:17.000 --> 00:07:19.120
is still in the swapping and
the dragging event is still

00:07:19.120 --> 00:07:21.490
invisible, so I update
those here.

00:07:21.490 --> 00:07:25.000
And then I also update my above
and below view, because

00:07:25.000 --> 00:07:27.420
now that a soft-swap has indeed
occurred in the data

00:07:27.420 --> 00:07:34.630
set, either the cell above it or
below it is now different.

00:07:34.630 --> 00:07:34.900
OK.

00:07:34.900 --> 00:07:37.800
And now the most important thing
here to actually have

00:07:37.800 --> 00:07:41.680
the cell animated to place when
a data set change has

00:07:41.680 --> 00:07:44.490
occurred is OnPreDrawListener.

00:07:44.490 --> 00:07:48.590
So what OnPreDrawListener does
is give you a call back where

00:07:48.590 --> 00:07:52.660
after OnMeasure and OnLayout
event are called, so after all

00:07:52.660 --> 00:07:56.060
the values for all of your
views, all of your widget on

00:07:56.060 --> 00:07:59.720
screen have already been
updated, but OnDraw has not

00:07:59.720 --> 00:08:00.660
yet been called.

00:08:00.660 --> 00:08:04.660
What this lets you do is
essentially gives you the

00:08:04.660 --> 00:08:07.580
power to access all the final
values that all the widgets

00:08:07.580 --> 00:08:10.220
will have, but before they've
actually been drawn onto the.

00:08:10.220 --> 00:08:10.880
Screen

00:08:10.880 --> 00:08:13.290
So you can do some custom
drawing here, given the final

00:08:13.290 --> 00:08:21.010
the values, and then once this
completes, you can return True

00:08:21.010 --> 00:08:24.330
for all of the other
default drawing to

00:08:24.330 --> 00:08:25.780
actually take place.

00:08:25.780 --> 00:08:28.860
So now in OnPreDraw, you
always want to remove

00:08:28.860 --> 00:08:32.950
PreDrawListener if you only
want to get in here once.

00:08:32.950 --> 00:08:36.100
And then what you want to do is
grab the cell that's being

00:08:36.100 --> 00:08:38.309
swapped, not the cell you're
dragging, but the cell that's

00:08:38.309 --> 00:08:40.270
going to swap into
the new place.

00:08:40.270 --> 00:08:43.260
You offset it by delta y because
you know that it's

00:08:43.260 --> 00:08:45.360
currently in its final position,
but you want to be

00:08:45.360 --> 00:08:48.020
in it's old position prior
to the date set change.

00:08:48.020 --> 00:08:51.520
So we calculate the delta
y, we set that to be the

00:08:51.520 --> 00:08:54.290
translation, and then we simply
use an Object Animator

00:08:54.290 --> 00:08:56.710
to animate the transition
y back to

00:08:56.710 --> 00:08:58.450
zero with some duration.

00:08:58.450 --> 00:09:00.920
So as you saw in the demo this
will actually achieve that

00:09:00.920 --> 00:09:04.680
sliding effect when the data
set change has occurred.

00:09:04.680 --> 00:09:07.600
Strolling down furthermore we
have SwapElements which is a

00:09:07.600 --> 00:09:10.430
simple method swapping the
underlying data set.

00:09:10.430 --> 00:09:13.720
And then TouchesEventsEnded,
the only important thing to

00:09:13.720 --> 00:09:17.700
note here is this Object
Animator that we create, and

00:09:17.700 --> 00:09:21.070
all this does is animate the
Bitmap drawable back into its

00:09:21.070 --> 00:09:24.100
correct position in the Listview
when a user has

00:09:24.100 --> 00:09:33.190
lifted his finger up from the
phone, as well as reset all

00:09:33.190 --> 00:09:36.530
our variables back to their
default values.

00:09:36.530 --> 00:09:40.760
The other important thing that
was really tricky to do is

00:09:40.760 --> 00:09:43.240
determining how we can actually
have the Listview

00:09:43.240 --> 00:09:46.810
scroll while you're dragging a
cell and making sure that all

00:09:46.810 --> 00:09:50.640
the above and below item
IDs get updated as

00:09:50.640 --> 00:09:52.060
we need them to.

00:09:52.060 --> 00:09:56.320
So here in HandleMobileScroll
is a method that

00:09:56.320 --> 00:09:59.170
gets called when we--

00:09:59.170 --> 00:10:01.700
so HandleMobileCellScroll is a
method that gets called every

00:10:01.700 --> 00:10:05.730
single time the user moves his
finger, and that calls this

00:10:05.730 --> 00:10:06.420
method here.

00:10:06.420 --> 00:10:09.960
All this does is use a few
methods available in view to

00:10:09.960 --> 00:10:13.820
determine whether or not the
bounds of the hover cell are

00:10:13.820 --> 00:10:17.250
either below or above the
bounds of the Listview.

00:10:17.250 --> 00:10:20.080
If that is the case, then we'll
call SmoothScrollBy

00:10:20.080 --> 00:10:23.440
either up or downwards,
and return True.

00:10:23.440 --> 00:10:25.800
And by returning True what we're
saying is that we are in

00:10:25.800 --> 00:10:29.570
a scrolling state, in a manual
scrolling state created by the

00:10:29.570 --> 00:10:31.080
fact that the bounds
are outside the

00:10:31.080 --> 00:10:32.670
bounds of the Listview.

00:10:32.670 --> 00:10:35.900
And if that is True, then we'll
know that after a scroll

00:10:35.900 --> 00:10:38.140
has completed we should continue
scrolling because

00:10:38.140 --> 00:10:42.240
we're still in the manual
scrolling state invoked by the

00:10:42.240 --> 00:10:44.370
bounds of the hover cell.

00:10:44.370 --> 00:10:47.630
So in order to do that, we add
the ScrollListener right here.

00:10:47.630 --> 00:10:50.030
And what that does is every
single time an OnScroll event

00:10:50.030 --> 00:10:54.420
has changed, has taken place, it
checks whether the first or

00:10:54.420 --> 00:10:57.370
a last visible cell in the
ListView has been updated.

00:10:57.370 --> 00:11:00.070
If that's the case, then that
means that new first or last

00:11:00.070 --> 00:11:04.270
item is a potential candidate
for an above or below cell to

00:11:04.270 --> 00:11:07.600
be swapped, and that means we
need to change those above and

00:11:07.600 --> 00:11:09.180
below item IDs.

00:11:09.180 --> 00:11:14.940
So we call those methods here,
and after a scroll is

00:11:14.940 --> 00:11:17.430
completed we call
HandleMobileScroll once again

00:11:17.430 --> 00:11:21.840
to keep that scrolling event
continuing and keep calling

00:11:21.840 --> 00:11:25.100
SmoothScrollBy as long as the
bounds are outside the bounds

00:11:25.100 --> 00:11:28.150
of the Listview.

00:11:28.150 --> 00:11:30.895
So pretty much, you can look at
the code if you want to see

00:11:30.895 --> 00:11:32.110
any more detail.

00:11:32.110 --> 00:11:35.770
But you can take Dynamic
Listview extend it, include in

00:11:35.770 --> 00:11:39.180
your project, and that's how
you can achieve a Listview

00:11:39.180 --> 00:11:41.700
which can then be dynamically
rearranged using user

00:11:41.700 --> 00:11:42.540
[INAUDIBLE].

00:11:42.540 --> 00:11:43.790
Thanks.

