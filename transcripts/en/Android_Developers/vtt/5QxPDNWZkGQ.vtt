WEBVTT
Kind: captions
Language: en

00:00:00.730 --> 00:00:02.430
BEN GABLE: Hello, everyone.

00:00:02.430 --> 00:00:04.520
As Sarah said, my
name is Ben Gable.

00:00:04.520 --> 00:00:07.460
I am a developer advocate
working in games.

00:00:07.460 --> 00:00:10.010
And I'm super excited
to be here today--

00:00:10.010 --> 00:00:10.710
two reasons.

00:00:10.710 --> 00:00:12.740
I used to be an ex-indie
game developer myself,

00:00:12.740 --> 00:00:15.204
before I joined Google,
as Sarah was as well.

00:00:15.204 --> 00:00:17.870
And also I went to school at the
DigiPen Institute of Technology

00:00:17.870 --> 00:00:20.119
over in Redmond, so Seattle
is kind of my old stomping

00:00:20.119 --> 00:00:21.690
grounds.

00:00:21.690 --> 00:00:23.780
So kind of continuing
the flow, there's

00:00:23.780 --> 00:00:25.155
going to be a lot
of information.

00:00:25.155 --> 00:00:28.130
I'm going to be going through
it very quickly to stay on time.

00:00:28.130 --> 00:00:30.950
So I'm here to talk to
you today about building

00:00:30.950 --> 00:00:32.090
an awesome game in Android.

00:00:32.090 --> 00:00:34.260
And really, what does that mean?

00:00:34.260 --> 00:00:36.230
Well, you guys know how
to build awesome games.

00:00:36.230 --> 00:00:39.650
It's all about building a
high-quality game in Android.

00:00:39.650 --> 00:00:43.652
Android is the largest mobile
operating system out there.

00:00:43.652 --> 00:00:45.860
And what that means is just
tons of people all around

00:00:45.860 --> 00:00:47.443
the world that are
going to be playing

00:00:47.443 --> 00:00:50.210
your game on different
devices, on different versions

00:00:50.210 --> 00:00:52.880
of the OS, and it's
a huge challenge.

00:00:52.880 --> 00:00:54.920
And you want to make
sure that you're

00:00:54.920 --> 00:00:57.710
developing a super high-quality
game so that when somebody

00:00:57.710 --> 00:01:00.197
picks it up on a certain
device or a certain version

00:01:00.197 --> 00:01:02.030
of Android, they don't
have that experience.

00:01:02.030 --> 00:01:03.613
Because if they have
a bad experience,

00:01:03.613 --> 00:01:05.899
it could turn into
bad reviews, or they

00:01:05.899 --> 00:01:08.190
could uninstall it, or not
tell their friends about it.

00:01:08.190 --> 00:01:12.290
So it's super
important to consider

00:01:12.290 --> 00:01:13.744
all the different
places and ways

00:01:13.744 --> 00:01:15.410
that people are going
to be experiencing

00:01:15.410 --> 00:01:16.439
your game on Android.

00:01:16.439 --> 00:01:18.230
And really, this breaks
down into two areas

00:01:18.230 --> 00:01:20.080
I'm going to talk about today.

00:01:20.080 --> 00:01:24.410
So first two areas is,
like, what's new in Android

00:01:24.410 --> 00:01:29.420
from a technical perspective,
and what are the new branch--

00:01:29.420 --> 00:01:31.650
so there's a new
branch called Chrome OS

00:01:31.650 --> 00:01:32.930
that we'll talk about a bit.

00:01:32.930 --> 00:01:38.190
And the second part is going
to touch more on, as indies--

00:01:38.190 --> 00:01:41.120
having resources to
test and make sure

00:01:41.120 --> 00:01:43.591
that your game is delivering
a high-quality experience

00:01:43.591 --> 00:01:44.090
is hard.

00:01:44.090 --> 00:01:45.810
So I'm going to talk
about maybe some solutions

00:01:45.810 --> 00:01:47.393
that you can consider
that, hopefully,

00:01:47.393 --> 00:01:50.180
will make that a lot
easier for your guys.

00:01:50.180 --> 00:01:51.790
So let's jump in.

00:01:51.790 --> 00:01:55.330
So Android P-- this just came
out a couple of months ago.

00:01:55.330 --> 00:01:57.180
And one thing I
wanted to bring up

00:01:57.180 --> 00:02:01.050
before we jump into Android
P is there was a new Play

00:02:01.050 --> 00:02:03.570
requirement that actually,
just yesterday, you

00:02:03.570 --> 00:02:06.300
need to be targeting
API level 26 or above

00:02:06.300 --> 00:02:09.360
in order to launch any
new updates for your game.

00:02:09.360 --> 00:02:11.830
So if you weren't already
aware of this update,

00:02:11.830 --> 00:02:13.849
and you're planning on
launching updates soon,

00:02:13.849 --> 00:02:15.390
you might have some
extra work to do.

00:02:15.390 --> 00:02:16.712
So please be aware of that.

00:02:16.712 --> 00:02:18.420
But the bigger thing
I wanted to bring up

00:02:18.420 --> 00:02:20.640
is, next year, we
have a new requirement

00:02:20.640 --> 00:02:23.160
coming, which is more
relevant to game developers.

00:02:23.160 --> 00:02:26.730
And that's, you'll need to ship
a 64-bit version of your game

00:02:26.730 --> 00:02:28.650
for whatever architecture
you're targeting.

00:02:28.650 --> 00:02:33.060
So this is something
that you could

00:02:33.060 --> 00:02:34.620
have lots of
external dependencies

00:02:34.620 --> 00:02:36.420
on third-party
plug-ins or something.

00:02:36.420 --> 00:02:37.920
Or your game engine,
you might have

00:02:37.920 --> 00:02:39.461
to consider updating
your game engine

00:02:39.461 --> 00:02:41.820
to support a 64-bit build.

00:02:41.820 --> 00:02:44.790
But as more and more 64-bit-only
devices are going to be

00:02:44.790 --> 00:02:46.680
launched in the
Android ecosystem,

00:02:46.680 --> 00:02:49.390
it's important to make sure
that games are available--

00:02:49.390 --> 00:02:52.110
so again, continuing
the theme of making sure

00:02:52.110 --> 00:02:54.570
that you're aware of all the
different kinds of flavors

00:02:54.570 --> 00:02:59.160
of devices that people are going
to be playing your game on.

00:02:59.160 --> 00:03:01.410
So notches have come to
the Android ecosystem.

00:03:01.410 --> 00:03:03.450
You guys have seen Pixel 3.

00:03:03.450 --> 00:03:06.040
I am personally not a notch
guy, but a lot of people are.

00:03:06.040 --> 00:03:08.550
So it's important to
consider that your game might

00:03:08.550 --> 00:03:11.310
be being played on a
Android device with a notch.

00:03:11.310 --> 00:03:14.152
So we've added a bunch of
APIs, best practices online,

00:03:14.152 --> 00:03:16.110
and actually some developer
tools where you can

00:03:16.110 --> 00:03:18.010
simulate notches on a device.

00:03:18.010 --> 00:03:19.620
So I recommend that
you take a look

00:03:19.620 --> 00:03:21.495
at how your game is
running on a notch device

00:03:21.495 --> 00:03:23.790
and make sure that the
UI is not being cut off

00:03:23.790 --> 00:03:27.000
or there are other rendering
issues either happening there.

00:03:27.000 --> 00:03:29.190
Notifications--
notification channels

00:03:29.190 --> 00:03:32.022
are now compulsory
as of API level 26.

00:03:32.022 --> 00:03:34.230
So you'll need to specify
a specific channel for each

00:03:34.230 --> 00:03:35.892
of one of your notifications.

00:03:35.892 --> 00:03:37.350
And basically, what
this lets users

00:03:37.350 --> 00:03:41.070
do is activate or deactivate
certain channels that they

00:03:41.070 --> 00:03:42.060
maybe care about.

00:03:42.060 --> 00:03:45.592
And also, they can customize
the behavior of each one

00:03:45.592 --> 00:03:46.800
of the notification channels.

00:03:46.800 --> 00:03:49.470
So really what this
means for you guys is

00:03:49.470 --> 00:03:51.570
to think about what
kind of channels

00:03:51.570 --> 00:03:54.660
you're putting your
notifications in and not

00:03:54.660 --> 00:03:57.690
spamming the user and
being aware that people

00:03:57.690 --> 00:04:01.060
might be turning things on and
off as they upgrade to Android

00:04:01.060 --> 00:04:02.880
P.

00:04:02.880 --> 00:04:04.860
For NDK, there's been
a bunch of new stuff

00:04:04.860 --> 00:04:07.140
that we'll go over briefly.

00:04:07.140 --> 00:04:09.190
Basically, we've added
APIs for neural networks

00:04:09.190 --> 00:04:10.860
on JNI shared memory.

00:04:10.860 --> 00:04:15.160
So that's a huge deal
and super exciting.

00:04:15.160 --> 00:04:19.320
We have now Client++ is the
default compiler for NDK

00:04:19.320 --> 00:04:20.490
builds.

00:04:20.490 --> 00:04:25.710
And libc++ is now the only STL
implementation that comes with

00:04:25.710 --> 00:04:26.220
the NDK.

00:04:26.220 --> 00:04:28.480
So please be aware of that.

00:04:28.480 --> 00:04:32.070
And then also, we've now
got the LLD linker as of r18

00:04:32.070 --> 00:04:34.470
is available for
testing, which we've seen

00:04:34.470 --> 00:04:37.380
can greatly speed up
your linker times.

00:04:37.380 --> 00:04:41.104
So sometimes building and
deploying is super slow.

00:04:41.104 --> 00:04:42.520
So I recommend you
check that out,

00:04:42.520 --> 00:04:44.940
as it could help you speed
up that process greatly.

00:04:44.940 --> 00:04:46.920
OK, some other
Android P features--

00:04:46.920 --> 00:04:52.860
we've got ARCore, Vulkan 1.1
support, neural network APIs.

00:04:52.860 --> 00:04:56.130
We've got a JobScheduler
for background workloads,

00:04:56.130 --> 00:04:59.610
which should be super
helpful for some of you.

00:04:59.610 --> 00:05:03.037
And also we've got an
indoor location API, which--

00:05:03.037 --> 00:05:05.370
you guys being indies, come
up with the craziest ideas--

00:05:05.370 --> 00:05:07.500
I'm sure somebody will come
up with an amazing game

00:05:07.500 --> 00:05:08.490
idea based around that.

00:05:08.490 --> 00:05:10.990
So excited to see what
you guys do with it.

00:05:10.990 --> 00:05:11.490
Cool.

00:05:11.490 --> 00:05:13.620
So now let's jump on
games on Chrome OS.

00:05:13.620 --> 00:05:15.690
So maybe a quick
question-- how many of you

00:05:15.690 --> 00:05:18.910
have used the Chromebook before?

00:05:18.910 --> 00:05:21.280
Yeah, OK, so some people.

00:05:21.280 --> 00:05:24.310
And how many of you were aware
that your Android games can now

00:05:24.310 --> 00:05:27.110
run on Chromebooks?

00:05:27.110 --> 00:05:28.830
OK, a few more, but not a lot.

00:05:28.830 --> 00:05:30.060
So this'll be exciting.

00:05:30.060 --> 00:05:33.755
So if you didn't know, Android
games can now run on Chrome OS.

00:05:33.755 --> 00:05:35.130
So you can see
here on the right,

00:05:35.130 --> 00:05:37.790
we've got the Pixelbook,
which is a more traditional

00:05:37.790 --> 00:05:39.740
laptop-style device.

00:05:39.740 --> 00:05:41.540
And just announced
was the Pixel Slate,

00:05:41.540 --> 00:05:44.420
which is coming out later
this month as a tablet

00:05:44.420 --> 00:05:46.220
with a detachable keyboard.

00:05:46.220 --> 00:05:51.280
And Chrome OS, as I said,
games can now run on Chrome OS.

00:05:51.280 --> 00:05:54.280
So your Android game is probably
running on Chrome OS right now.

00:05:54.280 --> 00:05:57.250
And there's probably people
that are asking to play it

00:05:57.250 --> 00:05:59.440
or are already playing it.

00:05:59.440 --> 00:06:01.660
The biggest ask
we've been getting

00:06:01.660 --> 00:06:05.290
from users on Chromebooks is
they want to play games on it.

00:06:05.290 --> 00:06:07.810
And Google is putting
a huge amount of effort

00:06:07.810 --> 00:06:10.090
into building out the
Chrome OS ecosystem.

00:06:10.090 --> 00:06:12.550
So again, kind of
going back to building

00:06:12.550 --> 00:06:14.499
that high-quality
experience, you

00:06:14.499 --> 00:06:16.540
might have users that are
playing on Chromebooks.

00:06:16.540 --> 00:06:18.610
And you should be
aware that they could

00:06:18.610 --> 00:06:19.960
be playing on Chromebooks.

00:06:19.960 --> 00:06:23.110
So this is a huge
new area of Android

00:06:23.110 --> 00:06:27.220
that presents a huge opportunity
to collect more users

00:06:27.220 --> 00:06:32.500
and also play it in a way
that, for your gameplay design

00:06:32.500 --> 00:06:35.260
might actually be a much
better way to play it.

00:06:35.260 --> 00:06:38.470
So then you might be asking,
deploying and testing

00:06:38.470 --> 00:06:40.810
and all these versions of
Android is already hard.

00:06:40.810 --> 00:06:42.592
Device fragmentation is real.

00:06:42.592 --> 00:06:43.300
I'm an indie dev.

00:06:43.300 --> 00:06:45.580
I know how that goes.

00:06:45.580 --> 00:06:47.470
How can we possibly
support Chrome OS?

00:06:47.470 --> 00:06:49.600
Well, the good news
is that most of it

00:06:49.600 --> 00:06:52.880
is probably already
done for you.

00:06:52.880 --> 00:06:56.160
The Play Store is the same on
Chrome OS and mobile devices

00:06:56.160 --> 00:06:56.690
currently.

00:06:56.690 --> 00:07:00.082
So if it's on the
Play Store right now,

00:07:00.082 --> 00:07:01.540
it's probably
running on Chrome OS.

00:07:01.540 --> 00:07:02.740
There are a few
permissions and stuff

00:07:02.740 --> 00:07:04.152
that, if you're
asking for it, it

00:07:04.152 --> 00:07:05.360
will list it as incompatible.

00:07:05.360 --> 00:07:06.980
But we can talk
about that later.

00:07:06.980 --> 00:07:10.300
It's the same APK on both
Chromebooks and mobile device.

00:07:10.300 --> 00:07:12.400
So there's no extra
libraries, no other plugins

00:07:12.400 --> 00:07:13.316
you have to integrate.

00:07:13.316 --> 00:07:15.310
It just works.

00:07:15.310 --> 00:07:17.890
And as we've seen,
a lot of times,

00:07:17.890 --> 00:07:21.237
90% of the time, the
games work great.

00:07:21.237 --> 00:07:23.320
But with that said, there
are some key differences

00:07:23.320 --> 00:07:24.920
I'll touch on in a moment.

00:07:24.920 --> 00:07:26.770
So how does this work?

00:07:26.770 --> 00:07:29.770
Basically, on top of the
Linux kernel on Chromebooks,

00:07:29.770 --> 00:07:33.310
you've got Chrome OS, and you've
now got the Android container.

00:07:33.310 --> 00:07:34.480
So it's not a VM.

00:07:34.480 --> 00:07:37.060
It's Android running natively
on top of the Linux kernel.

00:07:37.060 --> 00:07:38.569
It's the full
version of Android.

00:07:38.569 --> 00:07:40.360
It's on a stripped down
or special version.

00:07:40.360 --> 00:07:43.300
So anything that works
on a mobile device

00:07:43.300 --> 00:07:44.230
works on Chromebooks.

00:07:44.230 --> 00:07:46.150
So that makes it a lot
easier for developers

00:07:46.150 --> 00:07:48.910
to target and support it.

00:07:48.910 --> 00:07:51.380
And moving forward-- so
you can see Android P just

00:07:51.380 --> 00:07:55.720
hit the Canary Channel for
Chromebooks a couple weeks ago.

00:07:55.720 --> 00:07:58.020
Moving forward, all the
major releases of Android

00:07:58.020 --> 00:07:59.660
will also hit Chromebooks.

00:07:59.660 --> 00:08:01.390
And they'll
basically be in sync.

00:08:01.390 --> 00:08:05.690
So again, important to consider
that this is happening.

00:08:05.690 --> 00:08:07.740
So as I mentioned, there
are some key differences

00:08:07.740 --> 00:08:08.767
you should be aware of.

00:08:08.767 --> 00:08:10.600
So first off, you've
get the bigger screen--

00:08:10.600 --> 00:08:12.160
so more pixels to render.

00:08:12.160 --> 00:08:14.350
You could look at performance.

00:08:14.350 --> 00:08:17.110
Also, you could look
at UI considerations.

00:08:17.110 --> 00:08:19.950
You've got all this extra
screen real estate space

00:08:19.950 --> 00:08:22.080
to take advantage of.

00:08:22.080 --> 00:08:24.480
Default landscape
orientation-- so those of you

00:08:24.480 --> 00:08:27.330
with a portrait-default
orientation

00:08:27.330 --> 00:08:28.879
might want to take
a look at that.

00:08:28.879 --> 00:08:30.420
If you don't do
anything, there might

00:08:30.420 --> 00:08:34.230
be some giant, ugly black
bars there that are no good.

00:08:34.230 --> 00:08:36.820
On Chrome OS, dynamic
resizing is the default.

00:08:36.820 --> 00:08:39.000
So when you launch any
kind of Android app,

00:08:39.000 --> 00:08:41.460
it's in a window that can
be dynamically resized.

00:08:41.460 --> 00:08:44.077
Fortunately, in the game
world, we don't really

00:08:44.077 --> 00:08:46.410
deal with an dynamic resizing,
and a lot of game engines

00:08:46.410 --> 00:08:48.100
don't handle that very well.

00:08:48.100 --> 00:08:50.940
So consider maybe
disabling dynamic resizing

00:08:50.940 --> 00:08:53.270
or just locking to full screen.

00:08:53.270 --> 00:08:55.020
And then obviously,
the biggest difference

00:08:55.020 --> 00:08:57.780
is now you've got a keyboard,
in the case of the Pixelbook,

00:08:57.780 --> 00:08:59.250
attached to the device.

00:08:59.250 --> 00:09:01.200
And as we see more
and more games

00:09:01.200 --> 00:09:04.050
blurring the line between
consoles and PCs--

00:09:04.050 --> 00:09:06.610
you've get things
like PUBG, Fortnite.

00:09:06.610 --> 00:09:10.380
The same gameplay that's on
PC is now coming to Android.

00:09:10.380 --> 00:09:14.670
Obviously, implementing
keyboard and/or mouse controls

00:09:14.670 --> 00:09:17.550
could be a huge benefit to
provide the best possible game

00:09:17.550 --> 00:09:21.330
experience for your Android
players on that device.

00:09:21.330 --> 00:09:22.650
So consider that.

00:09:22.650 --> 00:09:24.540
Also, one thing
that's not listed here

00:09:24.540 --> 00:09:27.660
is that a lot of mobile
devices are ARM-based.

00:09:27.660 --> 00:09:30.550
And a lot of developers
don't ship an x86 version.

00:09:30.550 --> 00:09:32.880
A lot of Chromebooks
are x86-based.

00:09:32.880 --> 00:09:35.730
So you should be aware that
you might see some performance

00:09:35.730 --> 00:09:38.970
degradation due to the
translation that happens

00:09:38.970 --> 00:09:40.500
when you try to do an ARM--

00:09:40.500 --> 00:09:44.640
so an ARM APK will run
on an x86 through Houdini

00:09:44.640 --> 00:09:45.579
translation layer.

00:09:45.579 --> 00:09:47.370
But you'll kind of get
that overhead there.

00:09:47.370 --> 00:09:49.890
So if you can ship
an x86 version,

00:09:49.890 --> 00:09:53.580
you should definitely
take advantage of that.

00:09:53.580 --> 00:09:56.470
So Vainglory is a mobile
app, for example, developed

00:09:56.470 --> 00:09:58.120
by Super Evil Megacorp.

00:09:58.120 --> 00:10:00.550
They implemented
full skill bindings

00:10:00.550 --> 00:10:04.990
for their keyboard skill
bindings and item usage.

00:10:04.990 --> 00:10:07.720
And they still left the
touchscreen controls in.

00:10:07.720 --> 00:10:09.220
And they actually
told me they found

00:10:09.220 --> 00:10:12.460
an interesting hybrid approach
where you can tap the screen

00:10:12.460 --> 00:10:15.880
to select enemy heroes much
quicker than with a trackpad

00:10:15.880 --> 00:10:18.880
and then use the keyboard to
fire off skills and items.

00:10:18.880 --> 00:10:20.890
So they found a lot
of their pro players

00:10:20.890 --> 00:10:23.710
actually prefer that
input method compared

00:10:23.710 --> 00:10:26.210
to the one way or the other.

00:10:26.210 --> 00:10:29.980
And then Gameloft has developed
Asphalt 8 and recently

00:10:29.980 --> 00:10:31.960
Asphalt 9 for Chromebooks.

00:10:31.960 --> 00:10:34.840
And on mobile, they're just a
tilt- and touch-base control.

00:10:34.840 --> 00:10:36.430
But on Chromebooks,
they actually

00:10:36.430 --> 00:10:39.400
detect that the keyboard
is connected and allow you

00:10:39.400 --> 00:10:42.370
full WASD and
arrow key controls.

00:10:42.370 --> 00:10:43.945
And obviously on
the bigger screen,

00:10:43.945 --> 00:10:45.080
it looks a lot better too.

00:10:45.080 --> 00:10:46.414
They've got some great graphics.

00:10:46.414 --> 00:10:48.371
And the other interesting
thing that they found

00:10:48.371 --> 00:10:50.290
is that, when they
launched Asphalt 8,

00:10:50.290 --> 00:10:53.500
they found a 6x increase
in daily active users

00:10:53.500 --> 00:10:57.190
and 9x increase in
monetization, which,

00:10:57.190 --> 00:10:59.470
again, speaks to
Chromebooks-- people

00:10:59.470 --> 00:11:00.910
want to play games on them.

00:11:00.910 --> 00:11:05.650
And I think this speaks to
players are clamoring for it.

00:11:05.650 --> 00:11:07.780
One other quick note is
that Linux is actually

00:11:07.780 --> 00:11:08.830
on Chromebooks now too.

00:11:08.830 --> 00:11:12.580
So there's a full [? NVM ?]
running on Chromebooks

00:11:12.580 --> 00:11:15.194
that you can actually
install Android Studio.

00:11:15.194 --> 00:11:16.110
You can install Steam.

00:11:16.110 --> 00:11:17.485
It's not very fast yet.

00:11:17.485 --> 00:11:18.640
Don't worry, I tried.

00:11:18.640 --> 00:11:22.210
But we're really working on
trying to improve compatibility

00:11:22.210 --> 00:11:24.430
and speed of the Linux VM.

00:11:24.430 --> 00:11:28.721
So definitely check that
out if you get a chance.

00:11:28.721 --> 00:11:29.220
Cool.

00:11:29.220 --> 00:11:33.090
So that was a quick run through
of these big new branches

00:11:33.090 --> 00:11:35.160
and areas of things
that users are

00:11:35.160 --> 00:11:37.330
going to be experiencing
in the Android ecosystem.

00:11:37.330 --> 00:11:38.788
And you, as game
developers, should

00:11:38.788 --> 00:11:42.780
try to be aware of these new
features and these new devices

00:11:42.780 --> 00:11:45.330
that people are playing on and
try to target that and provide

00:11:45.330 --> 00:11:46.960
the high-quality experience.

00:11:46.960 --> 00:11:51.390
Now let's talk about testing and
how you can, from that aspect,

00:11:51.390 --> 00:11:54.930
provide a high,
stable performance,

00:11:54.930 --> 00:11:56.880
no crashing, fewer bugs.

00:11:56.880 --> 00:12:00.370
So we've got some tools
that we'll talk about here.

00:12:00.370 --> 00:12:03.580
And the first off, in
Android Studio 3.3,

00:12:03.580 --> 00:12:07.060
you can now sample
native C++ threads.

00:12:07.060 --> 00:12:11.620
So for any app that is API level
26 or above, you can do this.

00:12:11.620 --> 00:12:15.890
So maybe a raise of hands,
how many of you have never,

00:12:15.890 --> 00:12:19.330
ever left debug logging
code in production code

00:12:19.330 --> 00:12:20.200
when it's shipped?

00:12:20.200 --> 00:12:22.020
Anybody?

00:12:22.020 --> 00:12:22.520
OK.

00:12:22.520 --> 00:12:24.839
Good, because I was going
to call them a liar.

00:12:24.839 --> 00:12:26.630
So now, if you've done
something like this,

00:12:26.630 --> 00:12:28.677
"it might do something
cool" function.

00:12:28.677 --> 00:12:31.010
Inside Android Studio, I can
see the "might do something

00:12:31.010 --> 00:12:33.410
cool" function is doing
something not very cool at all.

00:12:33.410 --> 00:12:34.220
And I can fix that.

00:12:37.430 --> 00:12:39.570
Systrace is now coming
to Android Studio.

00:12:39.570 --> 00:12:42.210
It's not quite in Canary
yet, but it's coming.

00:12:42.210 --> 00:12:44.310
And basically,
systrace gives you

00:12:44.310 --> 00:12:47.760
a snapshot of how
your game is running

00:12:47.760 --> 00:12:50.980
on the Android in addition
to the Android system.

00:12:50.980 --> 00:12:53.640
So you might be
using Unity or Unreal

00:12:53.640 --> 00:12:55.870
or have your own profilers
that are happening,

00:12:55.870 --> 00:12:58.200
but they might not
give you as much detail

00:12:58.200 --> 00:13:00.180
about how your game
is running in terms

00:13:00.180 --> 00:13:02.130
of the rest of the
system processes.

00:13:02.130 --> 00:13:05.580
So inside Android
Studio, in a bit,

00:13:05.580 --> 00:13:07.920
you'll be able to
see this whole view.

00:13:07.920 --> 00:13:10.860
So you'll see up on the top,
you've got the CPU time.

00:13:10.860 --> 00:13:12.960
You've got your
different CPU cores.

00:13:12.960 --> 00:13:15.844
You've got display of all
the threads that are running.

00:13:15.844 --> 00:13:17.760
And at the bottom, you've
got your call chart.

00:13:17.760 --> 00:13:20.820
So there's a couple of
really useful use cases

00:13:20.820 --> 00:13:22.410
for this that will
hopefully make

00:13:22.410 --> 00:13:24.780
debugging and profiling
and optimizing

00:13:24.780 --> 00:13:27.340
for Android much easier.

00:13:27.340 --> 00:13:30.330
So the first here is
you can see that we've

00:13:30.330 --> 00:13:31.632
highlighted this thread.

00:13:31.632 --> 00:13:33.090
And I don't know
if you can see it,

00:13:33.090 --> 00:13:35.620
but there are some red
frames right there.

00:13:35.620 --> 00:13:38.350
So that kind of indicates
those are slow frames.

00:13:38.350 --> 00:13:42.000
So you can dig in and see,
maybe outside of your game,

00:13:42.000 --> 00:13:46.340
why something might be
causing those slow frames.

00:13:46.340 --> 00:13:48.020
And here, you can
actually see, on this,

00:13:48.020 --> 00:13:49.400
we've highlighted this thread.

00:13:49.400 --> 00:13:51.441
You can see it's jumping
across the different CPU

00:13:51.441 --> 00:13:54.600
cores, which could be causing
some performance impact.

00:13:54.600 --> 00:13:56.990
So you might consider
setting thread affinity

00:13:56.990 --> 00:13:59.930
for that specific thread
to stay on one core.

00:14:02.560 --> 00:14:05.990
And here we can see that this
is a very, very terrible frame.

00:14:05.990 --> 00:14:07.319
It's taking a long time.

00:14:07.319 --> 00:14:08.860
But now inside
Android Studio, you'll

00:14:08.860 --> 00:14:12.040
be able to dig in and
figure out why it's so slow.

00:14:12.040 --> 00:14:14.300
You can see down at the
call chart at the bottom,

00:14:14.300 --> 00:14:17.740
there are multiple
calls to inflate,

00:14:17.740 --> 00:14:19.840
which obviously is
inflating the frame time--

00:14:19.840 --> 00:14:22.300
so super useful
tools that are coming

00:14:22.300 --> 00:14:26.030
very soon that we hope you guys
will take advantage of and hope

00:14:26.030 --> 00:14:27.460
it provides value.

00:14:27.460 --> 00:14:29.390
Also, a super exciting--

00:14:29.390 --> 00:14:30.910
I think is the
biggest thing-- is

00:14:30.910 --> 00:14:32.860
you'll be able to
basically instrument

00:14:32.860 --> 00:14:35.570
and provide your own
events for your game.

00:14:35.570 --> 00:14:39.050
So you could do things like
set events around your loading

00:14:39.050 --> 00:14:39.550
screens.

00:14:39.550 --> 00:14:41.710
You could set events
around your shadow passes

00:14:41.710 --> 00:14:44.320
or other areas of
high-intensity gameplay

00:14:44.320 --> 00:14:46.420
where your performance
is a problem.

00:14:46.420 --> 00:14:48.730
And basically, that'll
show up inside systrace

00:14:48.730 --> 00:14:49.480
much more clearly.

00:14:49.480 --> 00:14:51.354
And you'll be able to
get those deep insights

00:14:51.354 --> 00:14:54.160
that you need in order
to optimize for Android.

00:14:54.160 --> 00:14:56.680
And in the future,
we're working on adding

00:14:56.680 --> 00:15:00.432
more support around
viewing v-sync events

00:15:00.432 --> 00:15:01.390
and timing around that.

00:15:01.390 --> 00:15:04.300
So there are some other
things coming to for games

00:15:04.300 --> 00:15:05.890
that will be announced really.

00:15:05.890 --> 00:15:06.440
Cool.

00:15:06.440 --> 00:15:08.690
And then one the other tools
that I wanted to bring up

00:15:08.690 --> 00:15:09.340
was GAPID.

00:15:09.340 --> 00:15:13.610
So GAPID basically-- it's
our graphics API debugger.

00:15:13.610 --> 00:15:16.840
It basically lets you
trace, inspect, and replay

00:15:16.840 --> 00:15:19.430
all of your draw calls.

00:15:19.430 --> 00:15:22.030
So for example, if you've
got some weird graphical bugs

00:15:22.030 --> 00:15:24.910
or maybe some performance
is not as you expect,

00:15:24.910 --> 00:15:27.690
you can sample a
portion of your gameplay

00:15:27.690 --> 00:15:30.790
and go through all the
frames, all the draw calls,

00:15:30.790 --> 00:15:34.360
view things like models,
textures, shaders, basically

00:15:34.360 --> 00:15:38.230
view everything that the system
is doing to compose that frame.

00:15:38.230 --> 00:15:43.000
So it gives a lot of insight
that you might not be aware of

00:15:43.000 --> 00:15:44.470
to help debug issues.

00:15:44.470 --> 00:15:47.860
It supports both OpenGL-
and Vulkan-based games.

00:15:47.860 --> 00:15:50.080
So if you're doing either
one, you should be covered.

00:15:50.080 --> 00:15:51.580
And it runs on both
Windows and Mac.

00:15:54.451 --> 00:15:54.950
Cool.

00:15:54.950 --> 00:15:56.533
So now, let's talk
about game testing,

00:15:56.533 --> 00:15:59.730
which we know game testing
on Android is hard--

00:15:59.730 --> 00:16:02.810
all these devices, all these
different versions of the OS.

00:16:02.810 --> 00:16:06.630
A lot of the existing tools are
also not built around games.

00:16:06.630 --> 00:16:08.200
So we kind of went on a quest.

00:16:08.200 --> 00:16:11.830
We wanted to find a solution
that was easy to write scripts

00:16:11.830 --> 00:16:13.197
inside of an IDE.

00:16:13.197 --> 00:16:14.780
You could run it on
your local device,

00:16:14.780 --> 00:16:18.260
run it maybe on a farm of
devices in the cloud somewhere,

00:16:18.260 --> 00:16:20.780
simple to use, and
confident in the results.

00:16:20.780 --> 00:16:24.310
And we actually found a solution
being built by a Chinese game

00:16:24.310 --> 00:16:26.870
developer called
NetEase, called Airtest.

00:16:26.870 --> 00:16:28.940
And basically what
it lets you do

00:16:28.940 --> 00:16:32.690
is test your production
APKs with no instrumentation

00:16:32.690 --> 00:16:33.230
required.

00:16:33.230 --> 00:16:34.730
You can run it on
your local device.

00:16:34.730 --> 00:16:38.170
And it also integrates
with Firebase Test Lab

00:16:38.170 --> 00:16:40.010
to run these tests on the cloud.

00:16:40.010 --> 00:16:42.920
So you can see here the IDE,
but I actually got a video here

00:16:42.920 --> 00:16:44.720
that we'll kind
of go through it.

00:16:44.720 --> 00:16:47.300
So you can see on the
right is your game.

00:16:47.300 --> 00:16:49.410
And then in the middle
is your script window.

00:16:49.410 --> 00:16:52.100
And as you play through the
game like you would normally,

00:16:52.100 --> 00:16:53.760
it's writing a test
script for you.

00:16:53.760 --> 00:16:58.910
So it's trying to do all the
things that you're doing.

00:16:58.910 --> 00:17:01.790
And basically,
what you can do is

00:17:01.790 --> 00:17:03.410
you can write out
this entire script.

00:17:03.410 --> 00:17:06.230
You can tell it to do things
like click on buttons,

00:17:06.230 --> 00:17:11.150
assert that player models that
should be there are there,

00:17:11.150 --> 00:17:12.450
move things up and down.

00:17:12.450 --> 00:17:15.270
Basically, anything that you
could do playing the game,

00:17:15.270 --> 00:17:17.839
Airtest can also emulate it.

00:17:17.839 --> 00:17:20.540
And then what you do
is you run the test.

00:17:20.540 --> 00:17:23.359
And it actually plays
through your game, each step,

00:17:23.359 --> 00:17:25.099
gives you all the output.

00:17:25.099 --> 00:17:29.234
And for each step in the
test, after it's done,

00:17:29.234 --> 00:17:30.650
it'll give you a
report here we'll

00:17:30.650 --> 00:17:34.520
see in a second that shows you
the results of all those steps.

00:17:34.520 --> 00:17:36.485
So it'll show you what
steps failed, if there

00:17:36.485 --> 00:17:38.870
are any warnings or errors.

00:17:38.870 --> 00:17:44.890
It'll give you a log
of all the screenshots

00:17:44.890 --> 00:17:46.840
of all of the different steps.

00:17:46.840 --> 00:17:48.490
So it's really
useful to maybe do

00:17:48.490 --> 00:17:50.740
this for things
like first-time user

00:17:50.740 --> 00:17:54.790
experience or tutorial level or
just other kinds of boilerplate

00:17:54.790 --> 00:17:58.060
areas of your gameplay that
you might test at one point

00:17:58.060 --> 00:18:00.790
and everything works fine.

00:18:00.790 --> 00:18:02.440
You go and you do a
bunch more changes

00:18:02.440 --> 00:18:04.420
for a couple more weeks,
some new features,

00:18:04.420 --> 00:18:06.370
and then you go back
and everything's broken.

00:18:06.370 --> 00:18:09.640
So this is a great way
of writing these tests

00:18:09.640 --> 00:18:12.520
and automating the whole process
that you don't have to do it

00:18:12.520 --> 00:18:14.230
over and over and over again.

00:18:14.230 --> 00:18:16.810
And kind of underlying
Airtest here

00:18:16.810 --> 00:18:18.760
is there are two
frameworks at work.

00:18:18.760 --> 00:18:22.180
There's Airtest, which is using
image recognition just looking

00:18:22.180 --> 00:18:23.780
at the pixels on the screen.

00:18:23.780 --> 00:18:26.740
And then if you want more
integrated testing or more kind

00:18:26.740 --> 00:18:28.630
of complex test cases,
you can integrate

00:18:28.630 --> 00:18:33.370
Poco, which basically, it
exposes the UI and object

00:18:33.370 --> 00:18:35.110
hierarchy inside your game.

00:18:35.110 --> 00:18:39.430
And there are plug-ins for
Poco, for Unity, Cocos,

00:18:39.430 --> 00:18:42.620
and other custom game engines.

00:18:42.620 --> 00:18:44.440
So you have two
flavors you can use

00:18:44.440 --> 00:18:47.080
depending on how deep you
want to integrate this testing

00:18:47.080 --> 00:18:48.340
solution.

00:18:48.340 --> 00:18:51.259
And the really interesting thing
here, and the most exciting

00:18:51.259 --> 00:18:53.425
thing is that this all
integrates with Firebase Test

00:18:53.425 --> 00:18:54.340
Lab.

00:18:54.340 --> 00:18:57.040
So what you can do--

00:18:57.040 --> 00:18:58.540
I guess those of
you that don't know

00:18:58.540 --> 00:19:00.450
what Firebase Test Lab
is-- it is basically

00:19:00.450 --> 00:19:01.600
a cloud of devices.

00:19:01.600 --> 00:19:03.940
There are physical
and virtual devices

00:19:03.940 --> 00:19:06.460
running all different
kinds of the Android OS.

00:19:06.460 --> 00:19:08.860
And you can upload
tests to it, and it

00:19:08.860 --> 00:19:11.590
will test your game for
you and give you reports.

00:19:11.590 --> 00:19:18.175
And with Airtest, you can
basically build your test APK.

00:19:18.175 --> 00:19:21.580
You can upload it to
Firebase Test Lab.

00:19:21.580 --> 00:19:25.240
You can create a suite of these
automated tests that will then

00:19:25.240 --> 00:19:27.459
kick off whenever you want.

00:19:27.459 --> 00:19:29.500
There's actually a command
line interface to hook

00:19:29.500 --> 00:19:30.875
into your continuous
integration.

00:19:30.875 --> 00:19:34.510
So every time one of your
developers pushes a change,

00:19:34.510 --> 00:19:37.690
it'll kick off these
tests and select

00:19:37.690 --> 00:19:40.930
which devices, which versions
of the OS you want to target.

00:19:40.930 --> 00:19:45.790
And it'll actually give
you a very detailed report

00:19:45.790 --> 00:19:49.070
that shows you all the failures.

00:19:49.070 --> 00:19:52.880
It shows you all
the system logs.

00:19:52.880 --> 00:19:55.996
It'll actually give you a
video replay of your tests

00:19:55.996 --> 00:19:56.870
of your game running.

00:19:56.870 --> 00:19:58.820
So you can actually
see and verify

00:19:58.820 --> 00:20:01.790
that what you thought it was
doing is actually being done.

00:20:01.790 --> 00:20:04.130
And it actually gives
you performance data,

00:20:04.130 --> 00:20:05.150
syncs to the video.

00:20:05.150 --> 00:20:07.280
So you can see
things like CPU time,

00:20:07.280 --> 00:20:09.650
memory usage, network usage.

00:20:09.650 --> 00:20:12.480
It's basically a QA
army at your fingertips.

00:20:12.480 --> 00:20:13.880
So it's super exciting.

00:20:13.880 --> 00:20:17.330
And I think this is one
of the biggest challenges

00:20:17.330 --> 00:20:18.872
for indie game
developers is that you

00:20:18.872 --> 00:20:20.871
don't have a lot of
resources to test your game.

00:20:20.871 --> 00:20:23.210
You're trying to build a
game, not necessarily test it.

00:20:23.210 --> 00:20:25.940
So being able to setup
these automated tests

00:20:25.940 --> 00:20:28.730
and just have them running
over and over again, again--

00:20:28.730 --> 00:20:31.160
make sure that you're
maintaining that high quality

00:20:31.160 --> 00:20:33.450
bar and delivering
a great experience.

00:20:33.450 --> 00:20:36.500
So here are some links
for some more information.

00:20:36.500 --> 00:20:39.160
You can find the IDE at
Airtest, the first one.

00:20:39.160 --> 00:20:42.430
And then we've got
some GitHub projects.

00:20:42.430 --> 00:20:46.290
And now let's talk about vitals.

00:20:46.290 --> 00:20:47.760
Sarah briefly mentioned this.

00:20:47.760 --> 00:20:51.000
But vitals-- you know
Airtest and Firebase Test

00:20:51.000 --> 00:20:53.640
Lab are for pre-launch
development,

00:20:53.640 --> 00:20:55.980
building new features, testing.

00:20:55.980 --> 00:20:58.770
Vitals is basically
a way to see--

00:20:58.770 --> 00:21:01.290
you get actual data
from devices that

00:21:01.290 --> 00:21:06.540
have opted into the Android
vitals diagnostic system.

00:21:06.540 --> 00:21:09.420
So you get actual reports
from actual user devices

00:21:09.420 --> 00:21:11.920
out in the wild that are
actually playing your game.

00:21:11.920 --> 00:21:14.330
So this is a huge deal.

00:21:14.330 --> 00:21:16.920
And why we made this
is that, basically, we

00:21:16.920 --> 00:21:20.060
found that 50% of
one-star reviews

00:21:20.060 --> 00:21:22.040
mentioned stability and bugs.

00:21:22.040 --> 00:21:23.840
Again, providing
that great experience

00:21:23.840 --> 00:21:26.480
has a really big
impact on your rating,

00:21:26.480 --> 00:21:28.910
which impacts your success.

00:21:28.910 --> 00:21:31.670
It's one of the many ways
that indie developers

00:21:31.670 --> 00:21:32.780
create success.

00:21:32.780 --> 00:21:34.140
So it's important.

00:21:34.140 --> 00:21:36.890
And you might have seen this
already in your Play Console.

00:21:36.890 --> 00:21:39.560
But you can go in, and you can
look at your Android vitals

00:21:39.560 --> 00:21:40.280
report.

00:21:40.280 --> 00:21:43.010
It will give you a
detailed breakdown

00:21:43.010 --> 00:21:45.890
of all the different crashes
and all these other things

00:21:45.890 --> 00:21:48.580
that vitals is monitoring for.

00:21:48.580 --> 00:21:50.600
And some of the
ones that might be

00:21:50.600 --> 00:21:53.450
of interest to game developers,
specifically, obviously,

00:21:53.450 --> 00:21:57.610
are-- these are bad behaviors
that Android vitals test for.

00:21:57.610 --> 00:21:58.740
So you've got crash rates.

00:21:58.740 --> 00:22:00.500
You've got ANRs.

00:22:00.500 --> 00:22:05.670
Around battery-- as Android
P has introduced a lot of new

00:22:05.670 --> 00:22:09.910
battery and power measuring
tools for the users,

00:22:09.910 --> 00:22:13.680
so if your game is up at
the top of this list of--

00:22:13.680 --> 00:22:16.260
it's a power hog, that puts
you in a dangerous territory

00:22:16.260 --> 00:22:19.800
of potentially getting
uninstalled or used less.

00:22:19.800 --> 00:22:25.230
So making sure that you're not
waking up the system too often,

00:22:25.230 --> 00:22:28.037
or you are--

00:22:28.037 --> 00:22:29.370
don't have any stuck wake locks.

00:22:29.370 --> 00:22:31.890
When your app tries
to get backgrounded,

00:22:31.890 --> 00:22:34.380
if you hold onto things
like audio handles or stuff

00:22:34.380 --> 00:22:37.380
like that, your game won't
be backgrounded properly

00:22:37.380 --> 00:22:39.470
and continue to draw power.

00:22:39.470 --> 00:22:39.970
Cool.

00:22:39.970 --> 00:22:41.080
So let's recap real quick.

00:22:41.080 --> 00:22:43.120
I went through a
lot of information.

00:22:43.120 --> 00:22:46.090
And really, again,
it's providing

00:22:46.090 --> 00:22:49.870
a high-quality experience
because that really

00:22:49.870 --> 00:22:52.390
directly impacts the
success of your indie game

00:22:52.390 --> 00:22:54.050
in the hands of users.

00:22:54.050 --> 00:22:56.050
So the first two
parts I talked about

00:22:56.050 --> 00:22:59.759
was, consider where the users
are going to be playing,

00:22:59.759 --> 00:23:01.800
what kinds of environments
your players are going

00:23:01.800 --> 00:23:03.100
to be playing your game in.

00:23:03.100 --> 00:23:05.890
So all these new Android
P devices that are out

00:23:05.890 --> 00:23:07.840
there have these new features.

00:23:07.840 --> 00:23:11.440
Maybe consider how you might
integrate those new features.

00:23:11.440 --> 00:23:13.355
Consider that people
will probably playing

00:23:13.355 --> 00:23:15.730
on Chrome OS moving forward
and that you should make sure

00:23:15.730 --> 00:23:18.570
that your game runs
great on Chrome OS.

00:23:18.570 --> 00:23:20.850
And then the second
part is really, again,

00:23:20.850 --> 00:23:22.320
once you ship a
high-quality game,

00:23:22.320 --> 00:23:23.880
maintain that quality bar.

00:23:23.880 --> 00:23:25.800
So profiling and
optimizing your game

00:23:25.800 --> 00:23:29.310
so it runs great on as
many devices as possible,

00:23:29.310 --> 00:23:31.680
testing early and
often, and using things

00:23:31.680 --> 00:23:34.960
like vitals to attack
production issues quickly.

00:23:34.960 --> 00:23:37.020
So all of these things
kind of come together

00:23:37.020 --> 00:23:39.032
and will allow you hopefully--

00:23:39.032 --> 00:23:41.490
I hope you found at least one
thing in here that will maybe

00:23:41.490 --> 00:23:44.710
help you guys provide that
higher-quality experience

00:23:44.710 --> 00:23:47.910
and take some load off
so you can focus more

00:23:47.910 --> 00:23:51.840
on building gameplay and
the super awesome innovative

00:23:51.840 --> 00:23:56.070
features and some of the more
boilerplate game quality type

00:23:56.070 --> 00:23:56.571
stuff.

00:23:56.571 --> 00:23:58.945
Hopefully there's something
in here that's useful for you

00:23:58.945 --> 00:23:59.500
guys.

00:23:59.500 --> 00:24:01.790
So thank you very
much for your time.

