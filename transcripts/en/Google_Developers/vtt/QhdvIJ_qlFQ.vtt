WEBVTT
Kind: captions
Language: en

00:00:00.064 --> 00:00:01.980
LAURENCE MORONEY: Hi,
and welcome to Geocache,

00:00:01.980 --> 00:00:04.110
where you can walk your way
through things that you can

00:00:04.110 --> 00:00:05.440
do with the Google Maps APIs.

00:00:05.440 --> 00:00:09.328
[MUSIC PLAYING]

00:00:12.660 --> 00:00:14.970
I'm Laurence Moroney,
and in this episode,

00:00:14.970 --> 00:00:17.840
I'm going to talk about
the geolocation APIs

00:00:17.840 --> 00:00:20.690
and how you can use them to
locate devices that may not

00:00:20.690 --> 00:00:24.680
have a GPS, such as rapidly
emerging breeds of internet

00:00:24.680 --> 00:00:27.410
of things devices, or,
of course, in places

00:00:27.410 --> 00:00:30.260
where GPS may not be available
due to tall buildings

00:00:30.260 --> 00:00:31.790
or other obstructions.

00:00:31.790 --> 00:00:34.250
The geolocation APIs
work by accepting

00:00:34.250 --> 00:00:37.220
the addresses and signal
strengths of cell towers

00:00:37.220 --> 00:00:39.500
and Wi-Fi access
points near you.

00:00:39.500 --> 00:00:42.650
From there, they can calculate
a likely latitude and longitude

00:00:42.650 --> 00:00:46.250
for your device using a
process called trilateration.

00:00:46.250 --> 00:00:48.110
It works like this.

00:00:48.110 --> 00:00:50.120
When you scan for
access points near you,

00:00:50.120 --> 00:00:52.290
the APIs in your
operating system

00:00:52.290 --> 00:00:55.040
will return the unique
identifier for those access

00:00:55.040 --> 00:00:57.530
points, as well as
the signal strength.

00:00:57.530 --> 00:01:00.590
So when you have the signal
strength and the frequency

00:01:00.590 --> 00:01:02.810
at which the access
point transmits,

00:01:02.810 --> 00:01:05.990
there's a formula called
the free-space path loss.

00:01:05.990 --> 00:01:08.600
And using it, you can
calculate a rough distance

00:01:08.600 --> 00:01:10.430
from that access point.

00:01:10.430 --> 00:01:12.740
Now of course, this will
only give you the distance

00:01:12.740 --> 00:01:14.005
from the access point.

00:01:14.005 --> 00:01:15.380
But if you have
a number of them,

00:01:15.380 --> 00:01:17.540
then you can scan
multiple points.

00:01:17.540 --> 00:01:20.030
And knowing the distance
that you are from each,

00:01:20.030 --> 00:01:23.120
this will allow you to
calculate where an overlap is.

00:01:23.120 --> 00:01:26.090
And from there, you can get
an estimate for your location.

00:01:26.090 --> 00:01:29.360
The geolocation API has the
coordinates of many access

00:01:29.360 --> 00:01:31.040
points and cell towers.

00:01:31.040 --> 00:01:33.800
So if you tell it the address
of the points near you

00:01:33.800 --> 00:01:35.640
and their signal
strength, then it

00:01:35.640 --> 00:01:38.750
can use this data to
calculate your likely position

00:01:38.750 --> 00:01:40.530
using this technique.

00:01:40.530 --> 00:01:42.410
So let's take a look
at how you do this.

00:01:42.410 --> 00:01:46.070
The easiest way is to scan
for Wi-Fi signals near you.

00:01:46.070 --> 00:01:48.680
Most operating systems
support this natively.

00:01:48.680 --> 00:01:52.940
In Linux, the command
is iw dev wlan0 scan.

00:01:52.940 --> 00:01:55.520
Or on Android, you'd
use a Wi-Fi manager

00:01:55.520 --> 00:01:58.730
that you can get from the
system and set its scan results

00:01:58.730 --> 00:02:01.130
to a list of scan result types.

00:02:01.130 --> 00:02:03.710
You can then access data
about signal strength

00:02:03.710 --> 00:02:07.070
and the identifier of the
access points from there.

00:02:07.070 --> 00:02:08.960
Once you have the
data, you structure it

00:02:08.960 --> 00:02:12.410
into a JSON file like this,
listing the access points

00:02:12.410 --> 00:02:14.390
you've seen, their
signal strength,

00:02:14.390 --> 00:02:16.790
signal to noise
ratio if available,

00:02:16.790 --> 00:02:19.660
and then you simply call
the geolocation API,

00:02:19.660 --> 00:02:22.420
passing at this data
and your API key.

00:02:22.420 --> 00:02:25.820
Here's how that would look
like with a curl command.

00:02:25.820 --> 00:02:28.720
If you're not familiar with
the concept of an API key

00:02:28.720 --> 00:02:31.550
or how to get one, you can
see so in the documentation

00:02:31.550 --> 00:02:33.320
at this link.

00:02:33.320 --> 00:02:36.380
Now once you pass this
to the geolocation API,

00:02:36.380 --> 00:02:38.810
you'll get a return value
containing a latitude,

00:02:38.810 --> 00:02:40.640
longitude, and estimation.

00:02:40.640 --> 00:02:42.440
And the estimation
is the rough distance

00:02:42.440 --> 00:02:46.590
that you are from that latitude
and longitude in meters.

00:02:46.590 --> 00:02:49.610
This is because it's calculating
your location by overlapping

00:02:49.610 --> 00:02:52.100
distances using
trilateration, giving you

00:02:52.100 --> 00:02:54.080
a circle that looks like this.

00:02:54.080 --> 00:02:57.830
The accuracy value is the
radius of that circle.

00:02:57.830 --> 00:03:01.070
And that's how you geolocate
using Wi-Fi or cell towers.

00:03:01.070 --> 00:03:03.650
This will work in indoor
scenarios, or those

00:03:03.650 --> 00:03:06.260
where you may not see the
GPS satellites-- for example,

00:03:06.260 --> 00:03:08.060
in cities with tall buildings.

00:03:08.060 --> 00:03:10.220
Particularly exciting
is the facility

00:03:10.220 --> 00:03:14.190
to geolocate internet of things
devices such as this one,

00:03:14.190 --> 00:03:16.790
a tiny computer the
size of a stick of gum

00:03:16.790 --> 00:03:18.560
that has built in Wi-Fi.

00:03:18.560 --> 00:03:21.650
Or this one, a robot
built on a Raspberry Pi

00:03:21.650 --> 00:03:24.770
device that geolocates
by sensing Wi-Fi access

00:03:24.770 --> 00:03:26.390
points around it.

00:03:26.390 --> 00:03:29.510
A great complementary
API is the Roads API,

00:03:29.510 --> 00:03:32.600
where if you aren't pinpointed
but you know that the device is

00:03:32.600 --> 00:03:36.900
moving along a road, you can
snap the readings to the road.

00:03:36.900 --> 00:03:39.260
Here's an example of where
I took a drive with a robot

00:03:39.260 --> 00:03:40.400
in my car.

00:03:40.400 --> 00:03:43.100
The gray line links where
the readings were taken,

00:03:43.100 --> 00:03:45.680
and geolocation gave me
a latitude, longitude,

00:03:45.680 --> 00:03:46.940
and estimation.

00:03:46.940 --> 00:03:49.160
I passed these to the
Roads API, and then I

00:03:49.160 --> 00:03:53.500
got the blue line showing that
I followed that specific road.

00:03:53.500 --> 00:03:55.435
That's the geolocation API.

00:03:55.435 --> 00:03:58.060
You can learn more at this link,
and if you have any questions,

00:03:58.060 --> 00:03:59.800
please leave them in
the comments below.

00:03:59.800 --> 00:04:01.508
Don't forget to hit
that subscribe button

00:04:01.508 --> 00:04:02.890
to see more Geocasts.

00:04:02.890 --> 00:04:05.940
[MUSIC PLAYING]

