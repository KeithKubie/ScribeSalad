WEBVTT
Kind: captions
Language: en

00:00:05.509 --> 00:00:08.600 align:start position:0%
 
hi<00:00:06.509><c> everyone</c><00:00:06.690><c> my</c><00:00:07.440><c> name</c><00:00:07.589><c> is</c><00:00:07.740><c> Jake</c><00:00:08.099><c> I</c><00:00:08.309><c> work</c><00:00:08.460><c> on</c>

00:00:08.600 --> 00:00:08.610 align:start position:0%
hi everyone my name is Jake I work on
 

00:00:08.610 --> 00:00:12.680 align:start position:0%
hi everyone my name is Jake I work on
the<00:00:08.760><c> Android</c><00:00:09.120><c> team</c><00:00:09.150><c> on</c><00:00:09.889><c> Kotlin</c><00:00:10.889><c> stuff</c><00:00:11.540><c> and</c><00:00:12.540><c> so</c>

00:00:12.680 --> 00:00:12.690 align:start position:0%
the Android team on Kotlin stuff and so
 

00:00:12.690 --> 00:00:14.360 align:start position:0%
the Android team on Kotlin stuff and so
today<00:00:13.019><c> I'm</c><00:00:13.139><c> gonna</c><00:00:13.230><c> be</c><00:00:13.410><c> talking</c><00:00:13.740><c> about</c><00:00:13.799><c> Android</c>

00:00:14.360 --> 00:00:14.370 align:start position:0%
today I'm gonna be talking about Android
 

00:00:14.370 --> 00:00:16.730 align:start position:0%
today I'm gonna be talking about Android
KTX<00:00:14.900><c> and</c><00:00:15.900><c> I'm</c><00:00:15.990><c> not</c><00:00:16.139><c> gonna</c><00:00:16.289><c> be</c><00:00:16.379><c> talking</c><00:00:16.680><c> about</c>

00:00:16.730 --> 00:00:16.740 align:start position:0%
KTX and I'm not gonna be talking about
 

00:00:16.740 --> 00:00:18.620 align:start position:0%
KTX and I'm not gonna be talking about
I'm<00:00:17.100><c> not</c><00:00:17.160><c> gonna</c><00:00:17.369><c> be</c><00:00:17.520><c> just</c><00:00:17.760><c> going</c><00:00:17.910><c> over</c><00:00:18.300><c> a</c><00:00:18.330><c> bunch</c>

00:00:18.620 --> 00:00:18.630 align:start position:0%
I'm not gonna be just going over a bunch
 

00:00:18.630 --> 00:00:20.900 align:start position:0%
I'm not gonna be just going over a bunch
of<00:00:18.810><c> the</c><00:00:19.199><c> stuff</c><00:00:19.260><c> that's</c><00:00:19.619><c> in</c><00:00:19.770><c> there</c><00:00:19.949><c> I</c><00:00:20.369><c> want</c><00:00:20.850><c> to</c>

00:00:20.900 --> 00:00:20.910 align:start position:0%
of the stuff that's in there I want to
 

00:00:20.910 --> 00:00:21.950 align:start position:0%
of the stuff that's in there I want to
make<00:00:21.000><c> it</c><00:00:21.119><c> a</c><00:00:21.150><c> little</c><00:00:21.270><c> more</c><00:00:21.359><c> interesting</c><00:00:21.869><c> than</c>

00:00:21.950 --> 00:00:21.960 align:start position:0%
make it a little more interesting than
 

00:00:21.960 --> 00:00:24.320 align:start position:0%
make it a little more interesting than
that<00:00:22.020><c> so</c><00:00:22.470><c> I'm</c><00:00:23.340><c> gonna</c><00:00:23.430><c> start</c><00:00:23.730><c> with</c><00:00:24.000><c> a</c><00:00:24.029><c> little</c>

00:00:24.320 --> 00:00:24.330 align:start position:0%
that so I'm gonna start with a little
 

00:00:24.330 --> 00:00:26.599 align:start position:0%
that so I'm gonna start with a little
bit<00:00:24.420><c> of</c><00:00:24.710><c> what</c><00:00:25.710><c> happened</c><00:00:26.099><c> last</c><00:00:26.160><c> year</c><00:00:26.430><c> at</c><00:00:26.580><c> Google</c>

00:00:26.599 --> 00:00:26.609 align:start position:0%
bit of what happened last year at Google
 

00:00:26.609 --> 00:00:29.330 align:start position:0%
bit of what happened last year at Google
i/o<00:00:26.939><c> I</c><00:00:27.359><c> was</c><00:00:28.170><c> here</c><00:00:28.349><c> last</c><00:00:28.380><c> year</c><00:00:28.859><c> talking</c><00:00:29.189><c> about</c>

00:00:29.330 --> 00:00:29.340 align:start position:0%
i/o I was here last year talking about
 

00:00:29.340 --> 00:00:31.900 align:start position:0%
i/o I was here last year talking about
how<00:00:29.640><c> you</c><00:00:29.699><c> can</c><00:00:30.029><c> write</c><00:00:30.179><c> extensions</c><00:00:30.750><c> for</c><00:00:31.080><c> Android</c>

00:00:31.900 --> 00:00:31.910 align:start position:0%
how you can write extensions for Android
 

00:00:31.910 --> 00:00:35.240 align:start position:0%
how you can write extensions for Android
types<00:00:32.910><c> such</c><00:00:33.510><c> as</c><00:00:33.540><c> this</c><00:00:34.050><c> example</c><00:00:34.260><c> where</c><00:00:34.890><c> we</c><00:00:35.100><c> have</c>

00:00:35.240 --> 00:00:35.250 align:start position:0%
types such as this example where we have
 

00:00:35.250 --> 00:00:37.370 align:start position:0%
types such as this example where we have
code<00:00:35.610><c> that</c><00:00:35.850><c> iterates</c><00:00:36.239><c> over</c><00:00:36.390><c> the</c><00:00:36.630><c> views</c><00:00:36.930><c> inside</c>

00:00:37.370 --> 00:00:37.380 align:start position:0%
code that iterates over the views inside
 

00:00:37.380 --> 00:00:40.160 align:start position:0%
code that iterates over the views inside
of<00:00:37.500><c> a</c><00:00:37.590><c> view</c><00:00:37.739><c> group</c><00:00:38.329><c> you</c><00:00:39.329><c> can</c><00:00:39.480><c> pull</c><00:00:39.690><c> that</c><00:00:39.719><c> common</c>

00:00:40.160 --> 00:00:40.170 align:start position:0%
of a view group you can pull that common
 

00:00:40.170 --> 00:00:42.920 align:start position:0%
of a view group you can pull that common
code<00:00:40.320><c> out</c><00:00:40.559><c> into</c><00:00:41.010><c> an</c><00:00:41.160><c> extension</c><00:00:41.809><c> what</c><00:00:42.809><c> this</c>

00:00:42.920 --> 00:00:42.930 align:start position:0%
code out into an extension what this
 

00:00:42.930 --> 00:00:46.459 align:start position:0%
code out into an extension what this
extension<00:00:43.290><c> does</c><00:00:43.649><c> is</c><00:00:43.950><c> enhance</c><00:00:44.850><c> a</c><00:00:45.239><c> type</c><00:00:45.989><c> that</c><00:00:46.350><c> we</c>

00:00:46.459 --> 00:00:46.469 align:start position:0%
extension does is enhance a type that we
 

00:00:46.469 --> 00:00:48.830 align:start position:0%
extension does is enhance a type that we
don't<00:00:46.649><c> control</c><00:00:47.010><c> the</c><00:00:47.370><c> view</c><00:00:47.550><c> group</c><00:00:47.789><c> type</c><00:00:48.030><c> we're</c>

00:00:48.830 --> 00:00:48.840 align:start position:0%
don't control the view group type we're
 

00:00:48.840 --> 00:00:53.240 align:start position:0%
don't control the view group type we're
allowed<00:00:49.170><c> to</c><00:00:50.090><c> essentially</c><00:00:51.090><c> create</c><00:00:51.329><c> a</c><00:00:52.250><c> member</c>

00:00:53.240 --> 00:00:53.250 align:start position:0%
allowed to essentially create a member
 

00:00:53.250 --> 00:00:54.650 align:start position:0%
allowed to essentially create a member
function<00:00:53.430><c> that's</c><00:00:53.910><c> not</c><00:00:54.059><c> actually</c><00:00:54.300><c> a</c><00:00:54.480><c> member</c>

00:00:54.650 --> 00:00:54.660 align:start position:0%
function that's not actually a member
 

00:00:54.660 --> 00:00:56.930 align:start position:0%
function that's not actually a member
function<00:00:54.960><c> it</c><00:00:55.680><c> actually</c><00:00:55.949><c> turns</c><00:00:56.160><c> into</c><00:00:56.280><c> a</c><00:00:56.460><c> static</c>

00:00:56.930 --> 00:00:56.940 align:start position:0%
function it actually turns into a static
 

00:00:56.940 --> 00:00:58.939 align:start position:0%
function it actually turns into a static
function<00:00:57.090><c> in</c><00:00:57.449><c> the</c><00:00:57.539><c> bytecode</c><00:00:57.750><c> with</c><00:00:58.739><c> the</c>

00:00:58.939 --> 00:00:58.949 align:start position:0%
function in the bytecode with the
 

00:00:58.949 --> 00:01:02.920 align:start position:0%
function in the bytecode with the
functionality<00:00:59.430><c> that</c><00:00:59.670><c> we</c><00:00:59.969><c> want</c><00:01:00.180><c> to</c><00:01:00.359><c> enhance</c>

00:01:02.920 --> 00:01:02.930 align:start position:0%
 
 

00:01:02.930 --> 00:01:05.990 align:start position:0%
 
and<00:01:03.930><c> so</c><00:01:04.140><c> we</c><00:01:04.350><c> can</c><00:01:04.500><c> take</c><00:01:04.680><c> our</c><00:01:04.949><c> original</c><00:01:05.430><c> code</c>

00:01:05.990 --> 00:01:06.000 align:start position:0%
and so we can take our original code
 

00:01:06.000 --> 00:01:08.870 align:start position:0%
and so we can take our original code
that<00:01:06.330><c> had</c><00:01:06.540><c> the</c><00:01:07.110><c> explicit</c><00:01:07.740><c> for</c><00:01:08.189><c> loop</c><00:01:08.369><c> in</c><00:01:08.520><c> it</c><00:01:08.670><c> and</c>

00:01:08.870 --> 00:01:08.880 align:start position:0%
that had the explicit for loop in it and
 

00:01:08.880 --> 00:01:11.510 align:start position:0%
that had the explicit for loop in it and
use<00:01:09.479><c> this</c><00:01:09.750><c> new</c><00:01:10.020><c> member</c><00:01:10.409><c> to</c><00:01:10.770><c> create</c><00:01:11.189><c> a</c><00:01:11.220><c> more</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
use this new member to create a more
 

00:01:11.520 --> 00:01:14.000 align:start position:0%
use this new member to create a more
concise<00:01:12.030><c> version</c><00:01:12.479><c> of</c><00:01:12.930><c> what</c><00:01:13.229><c> we</c><00:01:13.380><c> intended</c><00:01:13.950><c> to</c>

00:01:14.000 --> 00:01:14.010 align:start position:0%
concise version of what we intended to
 

00:01:14.010 --> 00:01:17.179 align:start position:0%
concise version of what we intended to
do<00:01:14.509><c> it</c><00:01:15.509><c> is</c><00:01:15.659><c> actually</c><00:01:16.140><c> visually</c><00:01:16.560><c> distinguished</c>

00:01:17.179 --> 00:01:17.189 align:start position:0%
do it is actually visually distinguished
 

00:01:17.189 --> 00:01:19.429 align:start position:0%
do it is actually visually distinguished
from<00:01:17.490><c> a</c><00:01:17.820><c> normal</c><00:01:18.299><c> member</c><00:01:18.509><c> function</c><00:01:19.020><c> that</c><00:01:19.259><c> it's</c>

00:01:19.429 --> 00:01:19.439 align:start position:0%
from a normal member function that it's
 

00:01:19.439 --> 00:01:21.469 align:start position:0%
from a normal member function that it's
italicized<00:01:20.070><c> if</c><00:01:20.549><c> you</c><00:01:20.700><c> use</c><00:01:20.880><c> dark</c><00:01:21.150><c> yellow</c><00:01:21.360><c> it</c>

00:01:21.469 --> 00:01:21.479 align:start position:0%
italicized if you use dark yellow it
 

00:01:21.479 --> 00:01:23.390 align:start position:0%
italicized if you use dark yellow it
will<00:01:21.540><c> actually</c><00:01:21.720><c> be</c><00:01:21.960><c> yellow</c><00:01:22.350><c> but</c><00:01:23.220><c> it's</c>

00:01:23.390 --> 00:01:23.400 align:start position:0%
will actually be yellow but it's
 

00:01:23.400 --> 00:01:25.010 align:start position:0%
will actually be yellow but it's
semantically<00:01:23.970><c> equivalent</c><00:01:24.090><c> to</c><00:01:24.630><c> calling</c><00:01:24.960><c> a</c>

00:01:25.010 --> 00:01:25.020 align:start position:0%
semantically equivalent to calling a
 

00:01:25.020 --> 00:01:26.660 align:start position:0%
semantically equivalent to calling a
member<00:01:25.320><c> or</c><00:01:25.500><c> the</c><00:01:25.650><c> intent</c><00:01:25.979><c> is</c><00:01:26.159><c> to</c><00:01:26.189><c> feel</c>

00:01:26.660 --> 00:01:26.670 align:start position:0%
member or the intent is to feel
 

00:01:26.670 --> 00:01:30.700 align:start position:0%
member or the intent is to feel
semantically<00:01:27.360><c> equivalent</c><00:01:28.340><c> and</c><00:01:29.340><c> so</c>

00:01:30.700 --> 00:01:30.710 align:start position:0%
semantically equivalent and so
 

00:01:30.710 --> 00:01:32.840 align:start position:0%
semantically equivalent and so
oftentimes<00:01:31.710><c> when</c><00:01:32.130><c> you</c><00:01:32.280><c> start</c><00:01:32.520><c> talking</c><00:01:32.670><c> about</c>

00:01:32.840 --> 00:01:32.850 align:start position:0%
oftentimes when you start talking about
 

00:01:32.850 --> 00:01:35.270 align:start position:0%
oftentimes when you start talking about
extension<00:01:33.479><c> functions</c><00:01:33.930><c> you</c><00:01:34.409><c> think</c><00:01:34.680><c> well</c><00:01:34.979><c> if</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
extension functions you think well if
 

00:01:35.280 --> 00:01:37.580 align:start position:0%
extension functions you think well if
this<00:01:35.880><c> is</c><00:01:36.000><c> so</c><00:01:36.150><c> useful</c><00:01:36.420><c> why</c><00:01:36.840><c> don't</c><00:01:36.990><c> we</c><00:01:37.110><c> just</c><00:01:37.320><c> put</c>

00:01:37.580 --> 00:01:37.590 align:start position:0%
this is so useful why don't we just put
 

00:01:37.590 --> 00:01:39.289 align:start position:0%
this is so useful why don't we just put
the<00:01:37.770><c> function</c><00:01:37.979><c> directly</c><00:01:38.610><c> off</c><00:01:38.909><c> do</c><00:01:39.030><c> you</c><00:01:39.060><c> group</c>

00:01:39.289 --> 00:01:39.299 align:start position:0%
the function directly off do you group
 

00:01:39.299 --> 00:01:41.660 align:start position:0%
the function directly off do you group
why<00:01:39.570><c> doesn't</c><00:01:39.930><c> view</c><00:01:40.079><c> group</c><00:01:40.320><c> just</c><00:01:40.560><c> offer</c><00:01:40.890><c> a</c><00:01:41.310><c> for</c>

00:01:41.660 --> 00:01:41.670 align:start position:0%
why doesn't view group just offer a for
 

00:01:41.670 --> 00:01:43.789 align:start position:0%
why doesn't view group just offer a for
each<00:01:41.820><c> and</c><00:01:42.119><c> a</c><00:01:42.150><c> for</c><00:01:42.360><c> each</c><00:01:42.479><c> index</c><00:01:42.869><c> that</c><00:01:43.229><c> takes</c><00:01:43.560><c> in</c>

00:01:43.789 --> 00:01:43.799 align:start position:0%
each and a for each index that takes in
 

00:01:43.799 --> 00:01:47.179 align:start position:0%
each and a for each index that takes in
a<00:01:43.979><c> lambda</c><00:01:44.490><c> and</c><00:01:45.560><c> really</c><00:01:46.560><c> the</c><00:01:46.680><c> reason</c><00:01:46.829><c> is</c>

00:01:47.179 --> 00:01:47.189 align:start position:0%
a lambda and really the reason is
 

00:01:47.189 --> 00:01:49.340 align:start position:0%
a lambda and really the reason is
because<00:01:47.579><c> of</c><00:01:47.729><c> the</c><00:01:47.820><c> lambda</c><00:01:48.270><c> when</c><00:01:49.020><c> we</c><00:01:49.110><c> pass</c><00:01:49.320><c> a</c>

00:01:49.340 --> 00:01:49.350 align:start position:0%
because of the lambda when we pass a
 

00:01:49.350 --> 00:01:53.960 align:start position:0%
because of the lambda when we pass a
lambda<00:01:49.979><c> in</c><00:01:50.420><c> Java</c><00:01:51.420><c> e</c><00:01:51.630><c> or</c><00:01:51.869><c> in</c><00:01:52.290><c> Kotlin</c><00:01:52.770><c> by</c><00:01:53.549><c> default</c>

00:01:53.960 --> 00:01:53.970 align:start position:0%
lambda in Java e or in Kotlin by default
 

00:01:53.970 --> 00:01:55.940 align:start position:0%
lambda in Java e or in Kotlin by default
that<00:01:54.180><c> has</c><00:01:54.329><c> to</c><00:01:54.479><c> create</c><00:01:54.720><c> an</c><00:01:54.990><c> anonymous</c><00:01:55.439><c> class</c>

00:01:55.940 --> 00:01:55.950 align:start position:0%
that has to create an anonymous class
 

00:01:55.950 --> 00:01:58.340 align:start position:0%
that has to create an anonymous class
which<00:01:56.430><c> eats</c><00:01:56.670><c> up</c><00:01:56.850><c> methods</c><00:01:57.420><c> and</c><00:01:57.750><c> causes</c><00:01:58.110><c> class</c>

00:01:58.340 --> 00:01:58.350 align:start position:0%
which eats up methods and causes class
 

00:01:58.350 --> 00:02:02.359 align:start position:0%
which eats up methods and causes class
loading<00:01:59.990><c> Kotlin</c><00:02:00.990><c> however</c><00:02:01.350><c> provides</c><00:02:01.950><c> language</c>

00:02:02.359 --> 00:02:02.369 align:start position:0%
loading Kotlin however provides language
 

00:02:02.369 --> 00:02:03.980 align:start position:0%
loading Kotlin however provides language
functionality<00:02:03.149><c> which</c><00:02:03.329><c> allows</c><00:02:03.750><c> us</c><00:02:03.960><c> to</c>

00:02:03.980 --> 00:02:03.990 align:start position:0%
functionality which allows us to
 

00:02:03.990 --> 00:02:07.310 align:start position:0%
functionality which allows us to
eliminate<00:02:04.520><c> that</c><00:02:05.520><c> lambdas</c><00:02:06.119><c> allocation</c><00:02:06.810><c> by</c>

00:02:07.310 --> 00:02:07.320 align:start position:0%
eliminate that lambdas allocation by
 

00:02:07.320 --> 00:02:09.380 align:start position:0%
eliminate that lambdas allocation by
marking<00:02:07.680><c> the</c><00:02:07.770><c> function</c><00:02:08.039><c> is</c><00:02:08.129><c> inline</c><00:02:08.520><c> the</c><00:02:08.849><c> body</c>

00:02:09.380 --> 00:02:09.390 align:start position:0%
marking the function is inline the body
 

00:02:09.390 --> 00:02:11.180 align:start position:0%
marking the function is inline the body
of<00:02:09.629><c> the</c><00:02:09.750><c> extension</c><00:02:10.200><c> gets</c><00:02:10.319><c> copied</c><00:02:10.830><c> into</c><00:02:11.039><c> the</c>

00:02:11.180 --> 00:02:11.190 align:start position:0%
of the extension gets copied into the
 

00:02:11.190 --> 00:02:12.760 align:start position:0%
of the extension gets copied into the
call<00:02:11.430><c> site</c><00:02:11.700><c> and</c><00:02:11.970><c> we</c><00:02:12.090><c> have</c><00:02:12.239><c> a</c><00:02:12.480><c> Z</c>

00:02:12.760 --> 00:02:12.770 align:start position:0%
call site and we have a Z
 

00:02:12.770 --> 00:02:17.890 align:start position:0%
call site and we have a Z
overhead<00:02:13.250><c> abstraction</c><00:02:16.540><c> let's</c><00:02:17.540><c> take</c><00:02:17.660><c> a</c><00:02:17.690><c> look</c>

00:02:17.890 --> 00:02:17.900 align:start position:0%
overhead abstraction let's take a look
 

00:02:17.900 --> 00:02:20.830 align:start position:0%
overhead abstraction let's take a look
at<00:02:17.960><c> another</c><00:02:18.080><c> example</c><00:02:18.640><c> an</c><00:02:19.640><c> API</c><00:02:20.000><c> 23</c><00:02:20.570><c> we</c><00:02:20.780><c> were</c>

00:02:20.830 --> 00:02:20.840 align:start position:0%
at another example an API 23 we were
 

00:02:20.840 --> 00:02:22.780 align:start position:0%
at another example an API 23 we were
able<00:02:20.960><c> to</c><00:02:21.080><c> get</c><00:02:21.350><c> a</c><00:02:21.380><c> system</c><00:02:21.770><c> service</c><00:02:22.160><c> based</c><00:02:22.400><c> on</c><00:02:22.580><c> a</c>

00:02:22.780 --> 00:02:22.790 align:start position:0%
able to get a system service based on a
 

00:02:22.790 --> 00:02:26.650 align:start position:0%
able to get a system service based on a
class<00:02:23.000><c> type</c><00:02:23.300><c> and</c><00:02:23.660><c> in</c><00:02:24.620><c> 27.1</c><00:02:25.430><c> of</c><00:02:25.940><c> the</c><00:02:26.180><c> support</c>

00:02:26.650 --> 00:02:26.660 align:start position:0%
class type and in 27.1 of the support
 

00:02:26.660 --> 00:02:29.260 align:start position:0%
class type and in 27.1 of the support
libraries<00:02:27.140><c> a</c><00:02:27.590><c> context</c><00:02:28.220><c> compat</c><00:02:28.670><c> version</c><00:02:29.150><c> of</c>

00:02:29.260 --> 00:02:29.270 align:start position:0%
libraries a context compat version of
 

00:02:29.270 --> 00:02:30.760 align:start position:0%
libraries a context compat version of
this<00:02:29.360><c> was</c><00:02:29.630><c> added</c><00:02:29.870><c> that</c><00:02:30.170><c> allowed</c><00:02:30.410><c> it</c><00:02:30.440><c> to</c><00:02:30.590><c> work</c>

00:02:30.760 --> 00:02:30.770 align:start position:0%
this was added that allowed it to work
 

00:02:30.770 --> 00:02:33.790 align:start position:0%
this was added that allowed it to work
on<00:02:30.860><c> all</c><00:02:31.070><c> API</c><00:02:31.370><c> levels</c><00:02:31.930><c> we</c><00:02:32.930><c> can</c><00:02:33.080><c> pull</c><00:02:33.260><c> this</c><00:02:33.440><c> into</c>

00:02:33.790 --> 00:02:33.800 align:start position:0%
on all API levels we can pull this into
 

00:02:33.800 --> 00:02:37.240 align:start position:0%
on all API levels we can pull this into
an<00:02:34.310><c> extension</c><00:02:35.200><c> that</c><00:02:36.200><c> is</c><00:02:36.320><c> also</c><00:02:36.530><c> in</c><00:02:36.800><c> line</c><00:02:37.010><c> like</c>

00:02:37.240 --> 00:02:37.250 align:start position:0%
an extension that is also in line like
 

00:02:37.250 --> 00:02:39.640 align:start position:0%
an extension that is also in line like
the<00:02:37.310><c> previous</c><00:02:37.820><c> one</c><00:02:38.030><c> but</c><00:02:38.990><c> doesn't</c><00:02:39.320><c> contain</c><00:02:39.590><c> a</c>

00:02:39.640 --> 00:02:39.650 align:start position:0%
the previous one but doesn't contain a
 

00:02:39.650 --> 00:02:41.830 align:start position:0%
the previous one but doesn't contain a
lambda<00:02:40.070><c> what</c><00:02:40.910><c> this</c><00:02:41.090><c> one</c><00:02:41.270><c> has</c><00:02:41.480><c> that's</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
lambda what this one has that's
 

00:02:41.840 --> 00:02:43.510 align:start position:0%
lambda what this one has that's
different<00:02:42.230><c> is</c><00:02:42.410><c> something</c><00:02:42.710><c> called</c><00:02:42.920><c> reified</c>

00:02:43.510 --> 00:02:43.520 align:start position:0%
different is something called reified
 

00:02:43.520 --> 00:02:46.510 align:start position:0%
different is something called reified
now<00:02:44.420><c> this</c><00:02:44.570><c> is</c><00:02:44.690><c> a</c><00:02:44.720><c> compiler</c><00:02:45.380><c> trick</c><00:02:45.680><c> and</c><00:02:46.040><c> what</c>

00:02:46.510 --> 00:02:46.520 align:start position:0%
now this is a compiler trick and what
 

00:02:46.520 --> 00:02:49.000 align:start position:0%
now this is a compiler trick and what
that<00:02:46.700><c> trick</c><00:02:46.940><c> does</c><00:02:47.180><c> is</c><00:02:47.450><c> it</c><00:02:47.630><c> forces</c><00:02:48.230><c> the</c><00:02:48.740><c> type</c>

00:02:49.000 --> 00:02:49.010 align:start position:0%
that trick does is it forces the type
 

00:02:49.010 --> 00:02:52.060 align:start position:0%
that trick does is it forces the type
information<00:02:49.430><c> of</c><00:02:49.970><c> the</c><00:02:50.450><c> generic</c><00:02:51.020><c> to</c><00:02:51.680><c> be</c><00:02:51.800><c> known</c>

00:02:52.060 --> 00:02:52.070 align:start position:0%
information of the generic to be known
 

00:02:52.070 --> 00:02:54.490 align:start position:0%
information of the generic to be known
at<00:02:52.310><c> compile</c><00:02:52.730><c> time</c><00:02:52.840><c> so</c><00:02:53.840><c> that</c><00:02:53.960><c> it</c><00:02:54.050><c> can</c><00:02:54.170><c> be</c><00:02:54.290><c> made</c>

00:02:54.490 --> 00:02:54.500 align:start position:0%
at compile time so that it can be made
 

00:02:54.500 --> 00:02:58.480 align:start position:0%
at compile time so that it can be made
available<00:02:54.560><c> at</c><00:02:55.490><c> runtime</c><00:02:55.940><c> and</c><00:02:57.070><c> so</c><00:02:58.070><c> this</c><00:02:58.220><c> is</c><00:02:58.340><c> what</c>

00:02:58.480 --> 00:02:58.490 align:start position:0%
available at runtime and so this is what
 

00:02:58.490 --> 00:03:01.030 align:start position:0%
available at runtime and so this is what
allows<00:02:58.730><c> us</c><00:02:58.760><c> to</c><00:02:58.970><c> take</c><00:02:59.770><c> where</c><00:03:00.770><c> we</c><00:03:00.890><c> would</c>

00:03:01.030 --> 00:03:01.040 align:start position:0%
allows us to take where we would
 

00:03:01.040 --> 00:03:02.950 align:start position:0%
allows us to take where we would
otherwise<00:03:01.160><c> be</c><00:03:01.640><c> calling</c><00:03:02.000><c> you</c><00:03:02.420><c> know</c><00:03:02.510><c> classic</c>

00:03:02.950 --> 00:03:02.960 align:start position:0%
otherwise be calling you know classic
 

00:03:02.960 --> 00:03:05.950 align:start position:0%
otherwise be calling you know classic
Java<00:03:03.350><c> on</c><00:03:03.680><c> notification</c><00:03:04.670><c> manager</c><00:03:05.060><c> we</c><00:03:05.690><c> can</c><00:03:05.870><c> now</c>

00:03:05.950 --> 00:03:05.960 align:start position:0%
Java on notification manager we can now
 

00:03:05.960 --> 00:03:08.980 align:start position:0%
Java on notification manager we can now
abstract<00:03:06.590><c> that</c><00:03:06.740><c> away</c><00:03:06.800><c> behind</c><00:03:07.280><c> this</c><00:03:07.990><c> extension</c>

00:03:08.980 --> 00:03:08.990 align:start position:0%
abstract that away behind this extension
 

00:03:08.990 --> 00:03:11.860 align:start position:0%
abstract that away behind this extension
and<00:03:09.350><c> so</c><00:03:09.680><c> our</c><00:03:09.920><c> calling</c><00:03:10.340><c> code</c><00:03:10.640><c> now</c><00:03:11.480><c> becomes</c>

00:03:11.860 --> 00:03:11.870 align:start position:0%
and so our calling code now becomes
 

00:03:11.870 --> 00:03:13.750 align:start position:0%
and so our calling code now becomes
simplified<00:03:12.380><c> to</c><00:03:12.650><c> just</c><00:03:12.680><c> be</c><00:03:13.010><c> able</c><00:03:13.100><c> to</c><00:03:13.370><c> pass</c><00:03:13.550><c> the</c>

00:03:13.750 --> 00:03:13.760 align:start position:0%
simplified to just be able to pass the
 

00:03:13.760 --> 00:03:16.660 align:start position:0%
simplified to just be able to pass the
generic<00:03:14.210><c> and</c><00:03:14.450><c> because</c><00:03:15.260><c> it's</c><00:03:15.380><c> reified</c><00:03:15.890><c> we</c><00:03:16.520><c> have</c>

00:03:16.660 --> 00:03:16.670 align:start position:0%
generic and because it's reified we have
 

00:03:16.670 --> 00:03:19.090 align:start position:0%
generic and because it's reified we have
the<00:03:17.480><c> implementation</c><00:03:17.660><c> of</c><00:03:18.140><c> that</c><00:03:18.200><c> has</c><00:03:18.470><c> access</c><00:03:18.709><c> to</c>

00:03:19.090 --> 00:03:19.100 align:start position:0%
the implementation of that has access to
 

00:03:19.100 --> 00:03:26.110 align:start position:0%
the implementation of that has access to
be<00:03:19.190><c> able</c><00:03:19.280><c> to</c><00:03:19.430><c> call</c><00:03:19.760><c> class</c><00:03:20.330><c> that</c><00:03:20.600><c> Java</c>

00:03:26.110 --> 00:03:26.120 align:start position:0%
 
 

00:03:26.120 --> 00:03:29.110 align:start position:0%
 
so<00:03:26.690><c> if</c><00:03:26.840><c> we</c><00:03:26.930><c> want</c><00:03:27.080><c> to</c><00:03:27.110><c> update</c><00:03:27.410><c> the</c><00:03:28.099><c> padding</c><00:03:28.580><c> of</c><00:03:28.760><c> a</c>

00:03:29.110 --> 00:03:29.120 align:start position:0%
so if we want to update the padding of a
 

00:03:29.120 --> 00:03:32.110 align:start position:0%
so if we want to update the padding of a
view<00:03:29.569><c> just</c><00:03:30.190><c> where</c><00:03:31.190><c> we're</c><00:03:31.310><c> only</c><00:03:31.459><c> specifying</c>

00:03:32.110 --> 00:03:32.120 align:start position:0%
view just where we're only specifying
 

00:03:32.120 --> 00:03:34.690 align:start position:0%
view just where we're only specifying
two<00:03:32.510><c> of</c><00:03:32.930><c> the</c><00:03:33.170><c> four</c><00:03:33.500><c> parameters</c><00:03:33.950><c> in</c><00:03:34.370><c> this</c><00:03:34.519><c> case</c>

00:03:34.690 --> 00:03:34.700 align:start position:0%
two of the four parameters in this case
 

00:03:34.700 --> 00:03:36.430 align:start position:0%
two of the four parameters in this case
we<00:03:34.910><c> want</c><00:03:35.060><c> to</c><00:03:35.090><c> update</c><00:03:35.269><c> both</c><00:03:35.599><c> the</c><00:03:35.840><c> left</c><00:03:36.080><c> and</c><00:03:36.319><c> the</c>

00:03:36.430 --> 00:03:36.440 align:start position:0%
we want to update both the left and the
 

00:03:36.440 --> 00:03:39.580 align:start position:0%
we want to update both the left and the
right<00:03:36.650><c> we</c><00:03:37.370><c> have</c><00:03:37.400><c> to</c><00:03:37.700><c> pull</c><00:03:37.910><c> out</c><00:03:38.090><c> the</c><00:03:38.590><c> existing</c>

00:03:39.580 --> 00:03:39.590 align:start position:0%
right we have to pull out the existing
 

00:03:39.590 --> 00:03:40.839 align:start position:0%
right we have to pull out the existing
padding<00:03:39.950><c> for</c><00:03:40.160><c> the</c><00:03:40.250><c> top</c><00:03:40.430><c> and</c><00:03:40.610><c> the</c><00:03:40.700><c> bottom</c>

00:03:40.839 --> 00:03:40.849 align:start position:0%
padding for the top and the bottom
 

00:03:40.849 --> 00:03:43.000 align:start position:0%
padding for the top and the bottom
because<00:03:41.480><c> Android</c><00:03:41.989><c> requires</c><00:03:42.410><c> you</c><00:03:42.650><c> to</c><00:03:42.799><c> specify</c>

00:03:43.000 --> 00:03:43.010 align:start position:0%
because Android requires you to specify
 

00:03:43.010 --> 00:03:46.960 align:start position:0%
because Android requires you to specify
all<00:03:43.489><c> four</c><00:03:45.099><c> this</c><00:03:46.099><c> is</c><00:03:46.280><c> something</c><00:03:46.580><c> that</c><00:03:46.610><c> we</c><00:03:46.819><c> can</c>

00:03:46.960 --> 00:03:46.970 align:start position:0%
all four this is something that we can
 

00:03:46.970 --> 00:03:51.509 align:start position:0%
all four this is something that we can
remedy<00:03:47.319><c> again</c><00:03:48.319><c> using</c><00:03:48.980><c> an</c><00:03:49.099><c> extension</c><00:03:49.370><c> function</c>

00:03:51.509 --> 00:03:51.519 align:start position:0%
remedy again using an extension function
 

00:03:51.519 --> 00:03:53.949 align:start position:0%
remedy again using an extension function
the<00:03:52.519><c> key</c><00:03:52.730><c> here</c><00:03:53.000><c> is</c><00:03:53.030><c> that</c><00:03:53.299><c> for</c><00:03:53.540><c> each</c><00:03:53.720><c> of</c><00:03:53.750><c> the</c>

00:03:53.949 --> 00:03:53.959 align:start position:0%
the key here is that for each of the
 

00:03:53.959 --> 00:03:55.600 align:start position:0%
the key here is that for each of the
arguments<00:03:54.560><c> on</c><00:03:54.709><c> this</c><00:03:54.980><c> new</c><00:03:55.190><c> function</c><00:03:55.580><c> that</c>

00:03:55.600 --> 00:03:55.610 align:start position:0%
arguments on this new function that
 

00:03:55.610 --> 00:03:58.120 align:start position:0%
arguments on this new function that
we've<00:03:55.849><c> defined</c><00:03:56.030><c> we're</c><00:03:56.870><c> specifying</c><00:03:57.170><c> a</c><00:03:57.680><c> default</c>

00:03:58.120 --> 00:03:58.130 align:start position:0%
we've defined we're specifying a default
 

00:03:58.130 --> 00:04:00.059 align:start position:0%
we've defined we're specifying a default
and<00:03:58.459><c> that</c><00:03:58.489><c> default</c><00:03:59.060><c> will</c><00:03:59.150><c> be</c><00:03:59.269><c> used</c><00:03:59.540><c> whether</c>

00:04:00.059 --> 00:04:00.069 align:start position:0%
and that default will be used whether
 

00:04:00.069 --> 00:04:03.039 align:start position:0%
and that default will be used whether
when<00:04:01.069><c> a</c><00:04:01.340><c> value</c><00:04:02.000><c> is</c><00:04:02.120><c> not</c><00:04:02.299><c> provided</c><00:04:02.810><c> for</c><00:04:02.989><c> that</c>

00:04:03.039 --> 00:04:03.049 align:start position:0%
when a value is not provided for that
 

00:04:03.049 --> 00:04:06.580 align:start position:0%
when a value is not provided for that
argument<00:04:04.840><c> so</c><00:04:05.840><c> it</c><00:04:05.900><c> allows</c><00:04:06.079><c> us</c><00:04:06.110><c> to</c><00:04:06.260><c> take</c><00:04:06.560><c> the</c>

00:04:06.580 --> 00:04:06.590 align:start position:0%
argument so it allows us to take the
 

00:04:06.590 --> 00:04:08.289 align:start position:0%
argument so it allows us to take the
calling<00:04:07.040><c> code</c><00:04:07.220><c> where</c><00:04:07.549><c> we're</c><00:04:07.700><c> specifying</c><00:04:07.880><c> all</c>

00:04:08.289 --> 00:04:08.299 align:start position:0%
calling code where we're specifying all
 

00:04:08.299 --> 00:04:11.699 align:start position:0%
calling code where we're specifying all
four<00:04:08.599><c> and</c><00:04:08.930><c> now</c><00:04:09.620><c> specify</c><00:04:09.950><c> them</c><00:04:10.400><c> as</c><00:04:10.610><c> just</c><00:04:11.090><c> two</c>

00:04:11.699 --> 00:04:11.709 align:start position:0%
four and now specify them as just two
 

00:04:11.709 --> 00:04:14.259 align:start position:0%
four and now specify them as just two
but<00:04:12.709><c> the</c><00:04:12.829><c> problem</c><00:04:13.190><c> here</c><00:04:13.370><c> is</c><00:04:13.430><c> that</c><00:04:13.760><c> you</c><00:04:14.150><c> know</c>

00:04:14.259 --> 00:04:14.269 align:start position:0%
but the problem here is that you know
 

00:04:14.269 --> 00:04:17.110 align:start position:0%
but the problem here is that you know
we've<00:04:14.739><c> eliminated</c><00:04:15.739><c> two</c><00:04:16.340><c> of</c><00:04:16.459><c> the</c><00:04:16.549><c> arguments</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
we've eliminated two of the arguments
 

00:04:17.120 --> 00:04:19.029 align:start position:0%
we've eliminated two of the arguments
but<00:04:17.389><c> since</c><00:04:18.079><c> we're</c><00:04:18.200><c> only</c><00:04:18.320><c> supplying</c><00:04:18.769><c> two</c>

00:04:19.029 --> 00:04:19.039 align:start position:0%
but since we're only supplying two
 

00:04:19.039 --> 00:04:21.099 align:start position:0%
but since we're only supplying two
Kotlin<00:04:19.609><c> takes</c><00:04:19.850><c> that</c><00:04:20.060><c> as</c><00:04:20.269><c> meaning</c><00:04:20.660><c> the</c><00:04:20.690><c> first</c>

00:04:21.099 --> 00:04:21.109 align:start position:0%
Kotlin takes that as meaning the first
 

00:04:21.109 --> 00:04:23.980 align:start position:0%
Kotlin takes that as meaning the first
two<00:04:21.350><c> and</c><00:04:21.590><c> this</c><00:04:22.430><c> the</c><00:04:22.789><c> latter</c><00:04:23.060><c> two</c><00:04:23.330><c> are</c><00:04:23.690><c> the</c><00:04:23.810><c> ones</c>

00:04:23.980 --> 00:04:23.990 align:start position:0%
two and this the latter two are the ones
 

00:04:23.990 --> 00:04:26.439 align:start position:0%
two and this the latter two are the ones
where<00:04:24.350><c> the</c><00:04:24.500><c> defaults</c><00:04:24.889><c> are</c><00:04:24.979><c> used</c><00:04:25.280><c> this</c><00:04:26.150><c> is</c><00:04:26.330><c> not</c>

00:04:26.439 --> 00:04:26.449 align:start position:0%
where the defaults are used this is not
 

00:04:26.449 --> 00:04:28.060 align:start position:0%
where the defaults are used this is not
what<00:04:26.600><c> we</c><00:04:26.720><c> intended</c><00:04:26.750><c> to</c><00:04:27.229><c> be</c><00:04:27.320><c> intended</c><00:04:27.680><c> to</c><00:04:27.889><c> do</c>

00:04:28.060 --> 00:04:28.070 align:start position:0%
what we intended to be intended to do
 

00:04:28.070 --> 00:04:30.159 align:start position:0%
what we intended to be intended to do
left<00:04:28.400><c> and</c><00:04:28.610><c> right</c><00:04:28.820><c> which</c><00:04:29.479><c> are</c><00:04:29.600><c> the</c><00:04:29.690><c> first</c><00:04:29.870><c> and</c>

00:04:30.159 --> 00:04:30.169 align:start position:0%
left and right which are the first and
 

00:04:30.169 --> 00:04:32.950 align:start position:0%
left and right which are the first and
third<00:04:30.550><c> another</c><00:04:31.550><c> language</c><00:04:31.760><c> feature</c><00:04:32.150><c> comes</c><00:04:32.780><c> to</c>

00:04:32.950 --> 00:04:32.960 align:start position:0%
third another language feature comes to
 

00:04:32.960 --> 00:04:34.260 align:start position:0%
third another language feature comes to
help<00:04:33.139><c> here</c>

00:04:34.260 --> 00:04:34.270 align:start position:0%
help here
 

00:04:34.270 --> 00:04:37.270 align:start position:0%
help here
which<00:04:35.270><c> is</c><00:04:35.419><c> named</c><00:04:35.630><c> arguments</c><00:04:36.280><c> named</c>

00:04:37.270 --> 00:04:37.280 align:start position:0%
which is named arguments named
 

00:04:37.280 --> 00:04:39.670 align:start position:0%
which is named arguments named
parameters<00:04:37.760><c> rather</c><00:04:38.000><c> by</c><00:04:38.840><c> specifying</c><00:04:39.320><c> the</c><00:04:39.500><c> name</c>

00:04:39.670 --> 00:04:39.680 align:start position:0%
parameters rather by specifying the name
 

00:04:39.680 --> 00:04:42.310 align:start position:0%
parameters rather by specifying the name
of<00:04:39.860><c> the</c><00:04:39.979><c> parameter</c><00:04:40.190><c> were</c><00:04:41.090><c> able</c><00:04:41.419><c> to</c><00:04:41.450><c> tell</c><00:04:42.020><c> the</c>

00:04:42.310 --> 00:04:42.320 align:start position:0%
of the parameter were able to tell the
 

00:04:42.320 --> 00:04:44.290 align:start position:0%
of the parameter were able to tell the
compiler<00:04:42.680><c> which</c><00:04:43.160><c> of</c><00:04:43.340><c> the</c><00:04:43.430><c> two</c><00:04:43.610><c> arguments</c><00:04:44.150><c> we</c>

00:04:44.290 --> 00:04:44.300 align:start position:0%
compiler which of the two arguments we
 

00:04:44.300 --> 00:04:46.540 align:start position:0%
compiler which of the two arguments we
were<00:04:44.360><c> specifying</c><00:04:44.990><c> and</c><00:04:45.260><c> allow</c><00:04:45.919><c> it</c><00:04:46.099><c> to</c><00:04:46.250><c> fill</c><00:04:46.430><c> in</c>

00:04:46.540 --> 00:04:46.550 align:start position:0%
were specifying and allow it to fill in
 

00:04:46.550 --> 00:04:55.170 align:start position:0%
were specifying and allow it to fill in
the<00:04:46.669><c> defaults</c><00:04:47.060><c> for</c><00:04:47.210><c> the</c><00:04:47.330><c> others</c>

00:04:55.170 --> 00:04:55.180 align:start position:0%
 
 

00:04:55.180 --> 00:04:58.140 align:start position:0%
 
okay<00:04:55.900><c> Android</c><00:04:56.740><c> has</c><00:04:56.920><c> Android</c><00:04:57.580><c> AP</c><00:04:57.820><c> eyes</c><00:04:57.910><c> have</c><00:04:58.120><c> a</c>

00:04:58.140 --> 00:04:58.150 align:start position:0%
okay Android has Android AP eyes have a
 

00:04:58.150 --> 00:05:00.540 align:start position:0%
okay Android has Android AP eyes have a
bunch<00:04:58.360><c> of</c><00:04:58.480><c> composite</c><00:04:59.320><c> types</c><00:04:59.590><c> these</c><00:05:00.400><c> are</c>

00:05:00.540 --> 00:05:00.550 align:start position:0%
bunch of composite types these are
 

00:05:00.550 --> 00:05:04.410 align:start position:0%
bunch of composite types these are
things<00:05:00.700><c> like</c><00:05:00.880><c> point</c><00:05:01.410><c> rectangle</c><00:05:02.490><c> pair</c><00:05:03.490><c> even</c>

00:05:04.410 --> 00:05:04.420 align:start position:0%
things like point rectangle pair even
 

00:05:04.420 --> 00:05:06.840 align:start position:0%
things like point rectangle pair even
the<00:05:04.480><c> location</c><00:05:04.810><c> class</c><00:05:05.260><c> these</c><00:05:06.130><c> composite</c><00:05:06.640><c> types</c>

00:05:06.840 --> 00:05:06.850 align:start position:0%
the location class these composite types
 

00:05:06.850 --> 00:05:09.030 align:start position:0%
the location class these composite types
are<00:05:07.060><c> just</c><00:05:07.240><c> wrappers</c><00:05:07.630><c> around</c><00:05:08.040><c> smaller</c>

00:05:09.030 --> 00:05:09.040 align:start position:0%
are just wrappers around smaller
 

00:05:09.040 --> 00:05:11.580 align:start position:0%
are just wrappers around smaller
individual<00:05:09.700><c> pieces</c><00:05:10.000><c> of</c><00:05:10.150><c> data</c><00:05:10.300><c> in</c><00:05:11.260><c> this</c><00:05:11.380><c> case</c>

00:05:11.580 --> 00:05:11.590 align:start position:0%
individual pieces of data in this case
 

00:05:11.590 --> 00:05:13.950 align:start position:0%
individual pieces of data in this case
I'm<00:05:11.740><c> calling</c><00:05:12.010><c> an</c><00:05:12.100><c> epi</c><00:05:12.400><c> which</c><00:05:12.790><c> has</c><00:05:13.000><c> a</c><00:05:13.030><c> rectangle</c>

00:05:13.950 --> 00:05:13.960 align:start position:0%
I'm calling an epi which has a rectangle
 

00:05:13.960 --> 00:05:17.160 align:start position:0%
I'm calling an epi which has a rectangle
which<00:05:14.170><c> is</c><00:05:14.200><c> a</c><00:05:14.590><c> composite</c><00:05:15.010><c> around</c><00:05:15.580><c> the</c><00:05:15.880><c> for</c><00:05:16.170><c> the</c>

00:05:17.160 --> 00:05:17.170 align:start position:0%
which is a composite around the for the
 

00:05:17.170 --> 00:05:19.800 align:start position:0%
which is a composite around the for the
left<00:05:17.350><c> top</c><00:05:17.560><c> right</c><00:05:17.590><c> and</c><00:05:17.890><c> bottom</c><00:05:18.600><c> values</c><00:05:19.600><c> of</c><00:05:19.750><c> a</c>

00:05:19.800 --> 00:05:19.810 align:start position:0%
left top right and bottom values of a
 

00:05:19.810 --> 00:05:21.960 align:start position:0%
left top right and bottom values of a
rectangle<00:05:20.380><c> and</c><00:05:20.650><c> if</c><00:05:21.520><c> you</c><00:05:21.610><c> need</c><00:05:21.730><c> to</c><00:05:21.850><c> do</c>

00:05:21.960 --> 00:05:21.970 align:start position:0%
rectangle and if you need to do
 

00:05:21.970 --> 00:05:24.540 align:start position:0%
rectangle and if you need to do
calculations<00:05:22.720><c> based</c><00:05:23.290><c> on</c><00:05:23.590><c> the</c><00:05:23.920><c> values</c><00:05:24.370><c> inside</c>

00:05:24.540 --> 00:05:24.550 align:start position:0%
calculations based on the values inside
 

00:05:24.550 --> 00:05:26.580 align:start position:0%
calculations based on the values inside
of<00:05:24.850><c> these</c><00:05:24.940><c> composite</c><00:05:25.510><c> types</c><00:05:25.720><c> you</c><00:05:26.380><c> have</c><00:05:26.470><c> to</c>

00:05:26.580 --> 00:05:26.590 align:start position:0%
of these composite types you have to
 

00:05:26.590 --> 00:05:29.850 align:start position:0%
of these composite types you have to
pull<00:05:26.800><c> them</c><00:05:27.010><c> out</c><00:05:27.100><c> into</c><00:05:27.510><c> individual</c><00:05:28.650><c> values</c><00:05:29.650><c> or</c>

00:05:29.850 --> 00:05:29.860 align:start position:0%
pull them out into individual values or
 

00:05:29.860 --> 00:05:32.630 align:start position:0%
pull them out into individual values or
variables<00:05:30.400><c> in</c><00:05:30.760><c> order</c><00:05:30.940><c> to</c><00:05:31.210><c> do</c><00:05:31.330><c> that</c>

00:05:32.630 --> 00:05:32.640 align:start position:0%
variables in order to do that
 

00:05:32.640 --> 00:05:36.090 align:start position:0%
variables in order to do that
calculation<00:05:33.640><c> and</c><00:05:34.000><c> then</c><00:05:34.540><c> potentially</c><00:05:35.410><c> put</c>

00:05:36.090 --> 00:05:36.100 align:start position:0%
calculation and then potentially put
 

00:05:36.100 --> 00:05:40.380 align:start position:0%
calculation and then potentially put
them<00:05:36.220><c> all</c><00:05:36.370><c> back</c><00:05:36.520><c> together</c><00:05:39.060><c> so</c><00:05:40.060><c> with</c><00:05:40.210><c> the</c><00:05:40.300><c> help</c>

00:05:40.380 --> 00:05:40.390 align:start position:0%
them all back together so with the help
 

00:05:40.390 --> 00:05:44.580 align:start position:0%
them all back together so with the help
of<00:05:40.540><c> the</c><00:05:40.660><c> extension</c><00:05:41.170><c> we</c><00:05:41.710><c> can</c><00:05:41.890><c> avoid</c><00:05:42.100><c> this</c><00:05:43.590><c> this</c>

00:05:44.580 --> 00:05:44.590 align:start position:0%
of the extension we can avoid this this
 

00:05:44.590 --> 00:05:46.140 align:start position:0%
of the extension we can avoid this this
one<00:05:44.770><c> is</c><00:05:44.950><c> a</c><00:05:44.980><c> little</c><00:05:45.400><c> bit</c><00:05:45.610><c> different</c><00:05:45.940><c> we</c><00:05:46.030><c> have</c><00:05:46.120><c> a</c>

00:05:46.140 --> 00:05:46.150 align:start position:0%
one is a little bit different we have a
 

00:05:46.150 --> 00:05:48.300 align:start position:0%
one is a little bit different we have a
new<00:05:46.270><c> keyword</c><00:05:46.540><c> called</c><00:05:46.900><c> an</c><00:05:47.080><c> operator</c><00:05:47.530><c> an</c>

00:05:48.300 --> 00:05:48.310 align:start position:0%
new keyword called an operator an
 

00:05:48.310 --> 00:05:50.520 align:start position:0%
new keyword called an operator an
operator<00:05:48.730><c> means</c><00:05:48.970><c> that</c><00:05:49.360><c> Kotlin</c><00:05:49.900><c> will</c><00:05:50.050><c> allow</c><00:05:50.320><c> us</c>

00:05:50.520 --> 00:05:50.530 align:start position:0%
operator means that Kotlin will allow us
 

00:05:50.530 --> 00:05:54.600 align:start position:0%
operator means that Kotlin will allow us
to<00:05:50.560><c> use</c><00:05:50.740><c> a</c><00:05:50.950><c> special</c><00:05:51.700><c> call</c><00:05:52.270><c> cite</c><00:05:52.600><c> syntax</c><00:05:53.610><c> and</c>

00:05:54.600 --> 00:05:54.610 align:start position:0%
to use a special call cite syntax and
 

00:05:54.610 --> 00:05:56.910 align:start position:0%
to use a special call cite syntax and
each<00:05:54.850><c> operator</c><00:05:55.480><c> function</c><00:05:56.200><c> has</c><00:05:56.500><c> a</c><00:05:56.530><c> very</c>

00:05:56.910 --> 00:05:56.920 align:start position:0%
each operator function has a very
 

00:05:56.920 --> 00:05:59.130 align:start position:0%
each operator function has a very
specific<00:05:57.400><c> name</c><00:05:57.910><c> a</c><00:05:58.180><c> well-known</c><00:05:58.690><c> name</c><00:05:58.720><c> you</c>

00:05:59.130 --> 00:05:59.140 align:start position:0%
specific name a well-known name you
 

00:05:59.140 --> 00:06:01.620 align:start position:0%
specific name a well-known name you
can't<00:05:59.380><c> just</c><00:05:59.560><c> make</c><00:05:59.710><c> up</c><00:05:59.890><c> any</c><00:06:00.040><c> name</c><00:06:00.310><c> and</c><00:06:00.550><c> the</c><00:06:01.450><c> name</c>

00:06:01.620 --> 00:06:01.630 align:start position:0%
can't just make up any name and the name
 

00:06:01.630 --> 00:06:04.530 align:start position:0%
can't just make up any name and the name
defines<00:06:02.080><c> which</c><00:06:02.530><c> call</c><00:06:03.310><c> site</c><00:06:03.550><c> syntax</c><00:06:04.030><c> that</c>

00:06:04.530 --> 00:06:04.540 align:start position:0%
defines which call site syntax that
 

00:06:04.540 --> 00:06:06.870 align:start position:0%
defines which call site syntax that
you're<00:06:04.780><c> intending</c><00:06:05.260><c> to</c><00:06:05.410><c> create</c><00:06:05.650><c> in</c><00:06:06.520><c> this</c><00:06:06.700><c> case</c>

00:06:06.870 --> 00:06:06.880 align:start position:0%
you're intending to create in this case
 

00:06:06.880 --> 00:06:08.970 align:start position:0%
you're intending to create in this case
it's<00:06:07.060><c> called</c><00:06:07.210><c> component</c><00:06:07.960><c> and</c><00:06:08.110><c> component</c>

00:06:08.970 --> 00:06:08.980 align:start position:0%
it's called component and component
 

00:06:08.980 --> 00:06:10.560 align:start position:0%
it's called component and component
allows<00:06:09.160><c> us</c><00:06:09.340><c> to</c><00:06:09.460><c> use</c><00:06:09.610><c> a</c><00:06:09.640><c> feature</c><00:06:09.940><c> of</c><00:06:10.090><c> Kotlin</c>

00:06:10.560 --> 00:06:10.570 align:start position:0%
allows us to use a feature of Kotlin
 

00:06:10.570 --> 00:06:13.380 align:start position:0%
allows us to use a feature of Kotlin
called<00:06:10.900><c> destructuring</c><00:06:11.680><c> and</c><00:06:12.010><c> so</c><00:06:12.760><c> our</c><00:06:12.940><c> original</c>

00:06:13.380 --> 00:06:13.390 align:start position:0%
called destructuring and so our original
 

00:06:13.390 --> 00:06:15.240 align:start position:0%
called destructuring and so our original
code<00:06:13.600><c> which</c><00:06:13.900><c> had</c><00:06:14.080><c> to</c><00:06:14.200><c> individually</c><00:06:14.830><c> pull</c><00:06:15.100><c> out</c>

00:06:15.240 --> 00:06:15.250 align:start position:0%
code which had to individually pull out
 

00:06:15.250 --> 00:06:19.590 align:start position:0%
code which had to individually pull out
the<00:06:15.520><c> four</c><00:06:15.760><c> different</c><00:06:17.340><c> components</c><00:06:18.480><c> can</c><00:06:19.480><c> now</c>

00:06:19.590 --> 00:06:19.600 align:start position:0%
the four different components can now
 

00:06:19.600 --> 00:06:21.930 align:start position:0%
the four different components can now
use<00:06:19.870><c> this</c><00:06:20.050><c> call</c><00:06:20.350><c> site</c><00:06:20.590><c> syntax</c><00:06:21.040><c> where</c><00:06:21.400><c> the</c>

00:06:21.930 --> 00:06:21.940 align:start position:0%
use this call site syntax where the
 

00:06:21.940 --> 00:06:23.580 align:start position:0%
use this call site syntax where the
rectangle<00:06:22.510><c> has</c><00:06:22.600><c> automatically</c><00:06:23.110><c> unpacked</c>

00:06:23.580 --> 00:06:23.590 align:start position:0%
rectangle has automatically unpacked
 

00:06:23.590 --> 00:06:26.280 align:start position:0%
rectangle has automatically unpacked
into<00:06:23.950><c> the</c><00:06:24.070><c> four</c><00:06:24.340><c> values</c><00:06:25.270><c> and</c><00:06:25.600><c> assigned</c><00:06:25.990><c> to</c>

00:06:26.280 --> 00:06:26.290 align:start position:0%
into the four values and assigned to
 

00:06:26.290 --> 00:06:31.100 align:start position:0%
into the four values and assigned to
four<00:06:27.480><c> variables</c><00:06:28.480><c> with</c><00:06:28.870><c> names</c><00:06:29.500><c> that</c><00:06:29.650><c> we</c><00:06:29.860><c> choose</c>

00:06:31.100 --> 00:06:31.110 align:start position:0%
four variables with names that we choose
 

00:06:31.110 --> 00:06:33.570 align:start position:0%
four variables with names that we choose
what's<00:06:32.110><c> really</c><00:06:32.350><c> nice</c><00:06:32.470><c> about</c><00:06:32.530><c> this</c><00:06:32.770><c> is</c><00:06:32.950><c> that</c><00:06:33.340><c> if</c>

00:06:33.570 --> 00:06:33.580 align:start position:0%
what's really nice about this is that if
 

00:06:33.580 --> 00:06:35.910 align:start position:0%
what's really nice about this is that if
you<00:06:33.730><c> don't</c><00:06:33.850><c> care</c><00:06:34.150><c> about</c><00:06:34.330><c> ones</c><00:06:34.690><c> later</c><00:06:35.080><c> on</c><00:06:35.320><c> you</c>

00:06:35.910 --> 00:06:35.920 align:start position:0%
you don't care about ones later on you
 

00:06:35.920 --> 00:06:37.470 align:start position:0%
you don't care about ones later on you
can<00:06:36.070><c> omit</c><00:06:36.340><c> them</c><00:06:36.580><c> and</c><00:06:36.760><c> if</c><00:06:37.060><c> you</c><00:06:37.150><c> don't</c><00:06:37.240><c> care</c>

00:06:37.470 --> 00:06:37.480 align:start position:0%
can omit them and if you don't care
 

00:06:37.480 --> 00:06:39.600 align:start position:0%
can omit them and if you don't care
about<00:06:37.630><c> ones</c><00:06:38.020><c> in</c><00:06:38.380><c> the</c><00:06:38.470><c> middle</c><00:06:38.770><c> you</c><00:06:39.160><c> can</c><00:06:39.190><c> specify</c>

00:06:39.600 --> 00:06:39.610 align:start position:0%
about ones in the middle you can specify
 

00:06:39.610 --> 00:06:41.610 align:start position:0%
about ones in the middle you can specify
them<00:06:39.970><c> as</c><00:06:40.090><c> underscore</c><00:06:40.630><c> and</c><00:06:40.840><c> so</c><00:06:41.260><c> if</c><00:06:41.320><c> we</c><00:06:41.440><c> just</c>

00:06:41.610 --> 00:06:41.620 align:start position:0%
them as underscore and so if we just
 

00:06:41.620 --> 00:06:43.260 align:start position:0%
them as underscore and so if we just
need<00:06:41.740><c> to</c><00:06:41.830><c> pull</c><00:06:42.010><c> out</c><00:06:42.160><c> two</c><00:06:42.370><c> of</c><00:06:42.400><c> the</c><00:06:42.580><c> values</c><00:06:42.940><c> we</c>

00:06:43.260 --> 00:06:43.270 align:start position:0%
need to pull out two of the values we
 

00:06:43.270 --> 00:06:51.740 align:start position:0%
need to pull out two of the values we
can<00:06:43.450><c> do</c><00:06:43.660><c> that</c><00:06:44.250><c> very</c><00:06:45.250><c> succinctly</c>

00:06:51.740 --> 00:06:51.750 align:start position:0%
 
 

00:06:51.750 --> 00:06:55.590 align:start position:0%
 
okay<00:06:52.750><c> an</c><00:06:53.470><c> experienced</c><00:06:54.010><c> cotton</c><00:06:54.460><c> user</c><00:06:54.670><c> might</c>

00:06:55.590 --> 00:06:55.600 align:start position:0%
okay an experienced cotton user might
 

00:06:55.600 --> 00:06:58.110 align:start position:0%
okay an experienced cotton user might
know<00:06:55.930><c> that</c><00:06:56.260><c> well</c><00:06:56.620><c> I</c><00:06:56.650><c> guess</c><00:06:56.890><c> we</c><00:06:57.040><c> flipped</c><00:06:57.790><c> it</c><00:06:57.910><c> we</c>

00:06:58.110 --> 00:06:58.120 align:start position:0%
know that well I guess we flipped it we
 

00:06:58.120 --> 00:07:05.820 align:start position:0%
know that well I guess we flipped it we
go<00:06:58.210><c> back</c><00:06:58.390><c> a</c><00:06:58.420><c> slide</c><00:07:03.270><c> okay</c><00:07:04.440><c> so</c><00:07:05.440><c> this</c><00:07:05.530><c> is</c><00:07:05.680><c> some</c>

00:07:05.820 --> 00:07:05.830 align:start position:0%
go back a slide okay so this is some
 

00:07:05.830 --> 00:07:07.950 align:start position:0%
go back a slide okay so this is some
code<00:07:06.040><c> that</c><00:07:06.070><c> shows</c><00:07:06.880><c> how</c><00:07:07.270><c> we</c><00:07:07.330><c> could</c><00:07:07.690><c> determine</c>

00:07:07.950 --> 00:07:07.960 align:start position:0%
code that shows how we could determine
 

00:07:07.960 --> 00:07:10.050 align:start position:0%
code that shows how we could determine
whether<00:07:08.200><c> or</c><00:07:08.320><c> not</c><00:07:08.410><c> a</c><00:07:08.500><c> string</c><00:07:08.980><c> contains</c><00:07:09.520><c> only</c>

00:07:10.050 --> 00:07:10.060 align:start position:0%
whether or not a string contains only
 

00:07:10.060 --> 00:07:13.140 align:start position:0%
whether or not a string contains only
digits<00:07:10.950><c> it</c><00:07:11.950><c> basically</c><00:07:12.430><c> just</c><00:07:12.550><c> loops</c><00:07:12.910><c> through</c>

00:07:13.140 --> 00:07:13.150 align:start position:0%
digits it basically just loops through
 

00:07:13.150 --> 00:07:15.090 align:start position:0%
digits it basically just loops through
the<00:07:13.240><c> characters</c><00:07:13.690><c> using</c><00:07:14.140><c> Cotton's</c><00:07:14.710><c> for</c><00:07:14.950><c> in</c>

00:07:15.090 --> 00:07:15.100 align:start position:0%
the characters using Cotton's for in
 

00:07:15.100 --> 00:07:17.880 align:start position:0%
the characters using Cotton's for in
syntax<00:07:15.520><c> checks</c><00:07:16.120><c> whether</c><00:07:16.360><c> it's</c><00:07:16.570><c> a</c><00:07:16.690><c> digit</c><00:07:17.080><c> using</c>

00:07:17.880 --> 00:07:17.890 align:start position:0%
syntax checks whether it's a digit using
 

00:07:17.890 --> 00:07:20.100 align:start position:0%
syntax checks whether it's a digit using
an<00:07:18.010><c> extension</c><00:07:18.370><c> function</c><00:07:18.880><c> on</c><00:07:19.090><c> character</c><00:07:19.810><c> and</c>

00:07:20.100 --> 00:07:20.110 align:start position:0%
an extension function on character and
 

00:07:20.110 --> 00:07:22.200 align:start position:0%
an extension function on character and
then<00:07:20.650><c> sets</c><00:07:21.250><c> a</c><00:07:21.340><c> value</c><00:07:21.640><c> to</c><00:07:21.760><c> true</c><00:07:21.910><c> or</c><00:07:22.030><c> false</c>

00:07:22.200 --> 00:07:22.210 align:start position:0%
then sets a value to true or false
 

00:07:22.210 --> 00:07:24.540 align:start position:0%
then sets a value to true or false
whether<00:07:22.720><c> the</c><00:07:23.140><c> text</c><00:07:23.500><c> it</c><00:07:23.680><c> whenever</c><00:07:23.980><c> it</c><00:07:24.220><c> detects</c>

00:07:24.540 --> 00:07:24.550 align:start position:0%
whether the text it whenever it detects
 

00:07:24.550 --> 00:07:28.050 align:start position:0%
whether the text it whenever it detects
an<00:07:24.700><c> on</c><00:07:24.880><c> digit</c><00:07:25.560><c> if</c><00:07:26.560><c> you're</c><00:07:27.040><c> an</c><00:07:27.580><c> experienced</c>

00:07:28.050 --> 00:07:28.060 align:start position:0%
an on digit if you're an experienced
 

00:07:28.060 --> 00:07:30.060 align:start position:0%
an on digit if you're an experienced
countless<00:07:28.270><c> or</c><00:07:28.720><c> you</c><00:07:28.930><c> might</c><00:07:29.110><c> know</c><00:07:29.410><c> about</c><00:07:29.770><c> the</c>

00:07:30.060 --> 00:07:30.070 align:start position:0%
countless or you might know about the
 

00:07:30.070 --> 00:07:32.460 align:start position:0%
countless or you might know about the
all<00:07:30.310><c> function</c><00:07:30.910><c> which</c><00:07:31.630><c> exists</c><00:07:31.990><c> on</c><00:07:32.050><c> string</c>

00:07:32.460 --> 00:07:32.470 align:start position:0%
all function which exists on string
 

00:07:32.470 --> 00:07:34.620 align:start position:0%
all function which exists on string
which<00:07:32.950><c> encapsulate</c><00:07:33.700><c> s--</c><00:07:33.730><c> the</c><00:07:33.940><c> same</c><00:07:34.150><c> looping</c>

00:07:34.620 --> 00:07:34.630 align:start position:0%
which encapsulate s-- the same looping
 

00:07:34.630 --> 00:07:37.410 align:start position:0%
which encapsulate s-- the same looping
allows<00:07:35.170><c> you</c><00:07:35.350><c> to</c><00:07:35.440><c> specify</c><00:07:35.680><c> a</c><00:07:35.980><c> predicate</c><00:07:36.640><c> which</c>

00:07:37.410 --> 00:07:37.420 align:start position:0%
allows you to specify a predicate which
 

00:07:37.420 --> 00:07:39.840 align:start position:0%
allows you to specify a predicate which
in<00:07:37.600><c> this</c><00:07:37.690><c> case</c><00:07:37.900><c> is</c><00:07:38.110><c> that</c><00:07:38.410><c> is</c><00:07:38.560><c> digit</c><00:07:39.040><c> it's</c>

00:07:39.840 --> 00:07:39.850 align:start position:0%
in this case is that is digit it's
 

00:07:39.850 --> 00:07:42.060 align:start position:0%
in this case is that is digit it's
actually<00:07:40.150><c> an</c><00:07:40.240><c> inline</c><00:07:40.510><c> function</c><00:07:40.960><c> so</c><00:07:41.260><c> it</c><00:07:41.410><c> D</c>

00:07:42.060 --> 00:07:42.070 align:start position:0%
actually an inline function so it D
 

00:07:42.070 --> 00:07:44.250 align:start position:0%
actually an inline function so it D
sugars<00:07:42.520><c> into</c><00:07:42.880><c> the</c><00:07:43.300><c> exact</c><00:07:43.600><c> same</c><00:07:43.810><c> thing</c><00:07:44.080><c> we</c>

00:07:44.250 --> 00:07:44.260 align:start position:0%
sugars into the exact same thing we
 

00:07:44.260 --> 00:07:46.760 align:start position:0%
sugars into the exact same thing we
would<00:07:44.440><c> have</c><00:07:44.470><c> wrote</c><00:07:44.770><c> in</c><00:07:44.980><c> the</c><00:07:45.160><c> previous</c><00:07:45.370><c> slide</c>

00:07:46.760 --> 00:07:46.770 align:start position:0%
would have wrote in the previous slide
 

00:07:46.770 --> 00:07:49.260 align:start position:0%
would have wrote in the previous slide
but<00:07:47.770><c> what's</c><00:07:47.950><c> interesting</c><00:07:48.070><c> is</c><00:07:48.580><c> that</c><00:07:48.610><c> Android</c>

00:07:49.260 --> 00:07:49.270 align:start position:0%
but what's interesting is that Android
 

00:07:49.270 --> 00:07:50.820 align:start position:0%
but what's interesting is that Android
actually<00:07:49.600><c> has</c><00:07:49.720><c> a</c><00:07:49.750><c> built-in</c><00:07:50.170><c> function</c><00:07:50.680><c> for</c>

00:07:50.820 --> 00:07:50.830 align:start position:0%
actually has a built-in function for
 

00:07:50.830 --> 00:07:52.650 align:start position:0%
actually has a built-in function for
this<00:07:50.980><c> and</c><00:07:51.280><c> I</c><00:07:51.340><c> suspect</c><00:07:51.640><c> that</c><00:07:51.970><c> a</c><00:07:52.090><c> lot</c><00:07:52.210><c> of</c><00:07:52.360><c> people</c>

00:07:52.650 --> 00:07:52.660 align:start position:0%
this and I suspect that a lot of people
 

00:07:52.660 --> 00:07:56.700 align:start position:0%
this and I suspect that a lot of people
don't<00:07:52.930><c> actually</c><00:07:53.140><c> know</c><00:07:53.530><c> this</c><00:07:53.710><c> exists</c><00:07:54.370><c> and</c><00:07:55.710><c> so</c>

00:07:56.700 --> 00:07:56.710 align:start position:0%
don't actually know this exists and so
 

00:07:56.710 --> 00:07:57.960 align:start position:0%
don't actually know this exists and so
this<00:07:56.980><c> is</c><00:07:57.100><c> something</c><00:07:57.400><c> that</c><00:07:57.580><c> we</c><00:07:57.670><c> can</c><00:07:57.820><c> actually</c>

00:07:57.960 --> 00:07:57.970 align:start position:0%
this is something that we can actually
 

00:07:57.970 --> 00:08:01.770 align:start position:0%
this is something that we can actually
take<00:07:58.420><c> and</c><00:07:58.690><c> turn</c><00:07:58.960><c> into</c><00:07:59.230><c> an</c><00:07:59.590><c> extension</c><00:08:00.010><c> but</c><00:08:00.780><c> you</c>

00:08:01.770 --> 00:08:01.780 align:start position:0%
take and turn into an extension but you
 

00:08:01.780 --> 00:08:04.500 align:start position:0%
take and turn into an extension but you
start<00:08:02.020><c> to</c><00:08:02.050><c> wonder</c><00:08:02.650><c> is</c><00:08:03.490><c> this</c><00:08:03.760><c> actually</c><00:08:04.270><c> worth</c>

00:08:04.500 --> 00:08:04.510 align:start position:0%
start to wonder is this actually worth
 

00:08:04.510 --> 00:08:06.780 align:start position:0%
start to wonder is this actually worth
its<00:08:04.750><c> weight</c><00:08:04.960><c> in</c><00:08:04.990><c> an</c><00:08:05.290><c> extension</c><00:08:05.710><c> what</c><00:08:06.070><c> value</c><00:08:06.640><c> do</c>

00:08:06.780 --> 00:08:06.790 align:start position:0%
its weight in an extension what value do
 

00:08:06.790 --> 00:08:09.240 align:start position:0%
its weight in an extension what value do
we<00:08:06.910><c> gain</c><00:08:07.210><c> by</c><00:08:07.600><c> turning</c><00:08:08.020><c> this</c><00:08:08.410><c> static</c><00:08:08.890><c> method</c>

00:08:09.240 --> 00:08:09.250 align:start position:0%
we gain by turning this static method
 

00:08:09.250 --> 00:08:12.390 align:start position:0%
we gain by turning this static method
that<00:08:09.550><c> we</c><00:08:09.670><c> can</c><00:08:09.700><c> call</c><00:08:10.060><c> into</c><00:08:10.420><c> an</c><00:08:10.780><c> extension</c><00:08:11.400><c> well</c>

00:08:12.390 --> 00:08:12.400 align:start position:0%
that we can call into an extension well
 

00:08:12.400 --> 00:08:14.640 align:start position:0%
that we can call into an extension well
for<00:08:12.580><c> one</c><00:08:12.840><c> it</c><00:08:13.840><c> changes</c><00:08:13.900><c> the</c><00:08:14.350><c> way</c><00:08:14.470><c> that</c><00:08:14.590><c> we</c>

00:08:14.640 --> 00:08:14.650 align:start position:0%
for one it changes the way that we
 

00:08:14.650 --> 00:08:17.430 align:start position:0%
for one it changes the way that we
invoke<00:08:15.100><c> to</c><00:08:15.820><c> feel</c><00:08:16.210><c> a</c><00:08:16.240><c> lot</c><00:08:16.540><c> more</c><00:08:16.720><c> natural</c><00:08:17.410><c> and</c>

00:08:17.430 --> 00:08:17.440 align:start position:0%
invoke to feel a lot more natural and
 

00:08:17.440 --> 00:08:21.060 align:start position:0%
invoke to feel a lot more natural and
idiomatic<00:08:17.980><c> and</c><00:08:18.160><c> Colin</c><00:08:18.490><c> sure</c><00:08:19.240><c> but</c><00:08:19.870><c> still</c><00:08:20.070><c> what</c>

00:08:21.060 --> 00:08:21.070 align:start position:0%
idiomatic and Colin sure but still what
 

00:08:21.070 --> 00:08:22.770 align:start position:0%
idiomatic and Colin sure but still what
is<00:08:21.340><c> there</c><00:08:21.610><c> really</c><00:08:21.820><c> value</c><00:08:22.240><c> that</c><00:08:22.360><c> we</c><00:08:22.450><c> extract</c>

00:08:22.770 --> 00:08:22.780 align:start position:0%
is there really value that we extract
 

00:08:22.780 --> 00:08:26.340 align:start position:0%
is there really value that we extract
from<00:08:22.990><c> this</c><00:08:24.570><c> the</c><00:08:25.570><c> biggest</c><00:08:25.780><c> one</c><00:08:26.050><c> that</c><00:08:26.200><c> I</c><00:08:26.230><c> think</c>

00:08:26.340 --> 00:08:26.350 align:start position:0%
from this the biggest one that I think
 

00:08:26.350 --> 00:08:28.140 align:start position:0%
from this the biggest one that I think
we<00:08:26.650><c> gain</c><00:08:26.800><c> from</c><00:08:26.830><c> this</c><00:08:27.280><c> is</c><00:08:27.550><c> that</c><00:08:27.610><c> when</c><00:08:27.970><c> you're</c><00:08:28.120><c> in</c>

00:08:28.140 --> 00:08:28.150 align:start position:0%
we gain from this is that when you're in
 

00:08:28.150 --> 00:08:30.570 align:start position:0%
we gain from this is that when you're in
the<00:08:28.300><c> IDE</c><00:08:28.720><c> you</c><00:08:29.200><c> have</c><00:08:29.560><c> your</c><00:08:29.770><c> string</c><00:08:30.100><c> and</c><00:08:30.370><c> you're</c>

00:08:30.570 --> 00:08:30.580 align:start position:0%
the IDE you have your string and you're
 

00:08:30.580 --> 00:08:32.520 align:start position:0%
the IDE you have your string and you're
wanting<00:08:31.090><c> to</c><00:08:31.120><c> go</c><00:08:31.480><c> and</c><00:08:31.720><c> determine</c><00:08:32.229><c> whether</c><00:08:32.440><c> or</c>

00:08:32.520 --> 00:08:32.530 align:start position:0%
wanting to go and determine whether or
 

00:08:32.530 --> 00:08:35.610 align:start position:0%
wanting to go and determine whether or
not<00:08:32.710><c> it's</c><00:08:33.960><c> you're</c><00:08:34.960><c> wanting</c><00:08:35.260><c> to</c><00:08:35.350><c> make</c><00:08:35.500><c> this</c>

00:08:35.610 --> 00:08:35.620 align:start position:0%
not it's you're wanting to make this
 

00:08:35.620 --> 00:08:37.350 align:start position:0%
not it's you're wanting to make this
query<00:08:36.010><c> as</c><00:08:36.220><c> to</c><00:08:36.400><c> whether</c><00:08:36.580><c> or</c><00:08:36.729><c> not</c><00:08:36.790><c> it</c><00:08:37.000><c> contains</c>

00:08:37.350 --> 00:08:37.360 align:start position:0%
query as to whether or not it contains
 

00:08:37.360 --> 00:08:40.230 align:start position:0%
query as to whether or not it contains
only<00:08:37.540><c> digits</c><00:08:38.670><c> if</c><00:08:39.670><c> you</c><00:08:39.850><c> didn't</c><00:08:40.120><c> know</c><00:08:40.210><c> that</c>

00:08:40.230 --> 00:08:40.240 align:start position:0%
only digits if you didn't know that
 

00:08:40.240 --> 00:08:42.180 align:start position:0%
only digits if you didn't know that
static<00:08:40.780><c> method</c><00:08:41.080><c> on</c><00:08:41.170><c> text</c><00:08:41.440><c> utils</c><00:08:41.770><c> was</c><00:08:41.979><c> there</c>

00:08:42.180 --> 00:08:42.190 align:start position:0%
static method on text utils was there
 

00:08:42.190 --> 00:08:44.520 align:start position:0%
static method on text utils was there
you<00:08:42.850><c> probably</c><00:08:43.150><c> would</c><00:08:43.330><c> never</c><00:08:43.510><c> find</c><00:08:43.750><c> it</c><00:08:43.960><c> when</c>

00:08:44.520 --> 00:08:44.530 align:start position:0%
you probably would never find it when
 

00:08:44.530 --> 00:08:46.680 align:start position:0%
you probably would never find it when
it's<00:08:44.650><c> extension</c><00:08:45.070><c> if</c><00:08:45.490><c> you</c><00:08:45.910><c> start</c><00:08:46.180><c> typing</c><00:08:46.390><c> in</c>

00:08:46.680 --> 00:08:46.690 align:start position:0%
it's extension if you start typing in
 

00:08:46.690 --> 00:08:50.490 align:start position:0%
it's extension if you start typing in
the<00:08:46.810><c> IDE</c><00:08:47.820><c> it</c><00:08:48.820><c> will</c><00:08:49.030><c> actually</c><00:08:49.350><c> show</c><00:08:50.350><c> this</c>

00:08:50.490 --> 00:08:50.500 align:start position:0%
the IDE it will actually show this
 

00:08:50.500 --> 00:08:53.010 align:start position:0%
the IDE it will actually show this
extension<00:08:50.980><c> in</c><00:08:51.160><c> autocomplete</c><00:08:51.870><c> where</c><00:08:52.870><c> it's</c>

00:08:53.010 --> 00:08:53.020 align:start position:0%
extension in autocomplete where it's
 

00:08:53.020 --> 00:08:55.920 align:start position:0%
extension in autocomplete where it's
much<00:08:53.230><c> more</c><00:08:53.380><c> discoverable</c><00:08:53.800><c> than</c><00:08:54.190><c> otherwise</c><00:08:54.930><c> so</c>

00:08:55.920 --> 00:08:55.930 align:start position:0%
much more discoverable than otherwise so
 

00:08:55.930 --> 00:08:59.070 align:start position:0%
much more discoverable than otherwise so
you<00:08:55.990><c> just</c><00:08:56.230><c> press</c><00:08:56.410><c> ENTER</c><00:08:56.740><c> and</c><00:08:56.890><c> get</c><00:08:57.160><c> it</c><00:08:58.080><c> alright</c>

00:08:59.070 --> 00:08:59.080 align:start position:0%
you just press ENTER and get it alright
 

00:08:59.080 --> 00:09:01.030 align:start position:0%
you just press ENTER and get it alright
so<00:08:59.350><c> I've</c><00:08:59.680><c> covered</c><00:08:59.860><c> a</c><00:09:00.040><c> few</c><00:09:00.310><c> extent</c>

00:09:01.030 --> 00:09:01.040 align:start position:0%
so I've covered a few extent
 

00:09:01.040 --> 00:09:03.579 align:start position:0%
so I've covered a few extent
here<00:09:01.459><c> I</c><00:09:01.970><c> just</c><00:09:02.389><c> wanted</c><00:09:02.750><c> to</c><00:09:02.839><c> remind</c><00:09:02.990><c> you</c><00:09:03.259><c> a</c><00:09:03.320><c> bit</c>

00:09:03.579 --> 00:09:03.589 align:start position:0%
here I just wanted to remind you a bit
 

00:09:03.589 --> 00:09:06.280 align:start position:0%
here I just wanted to remind you a bit
of<00:09:03.620><c> the</c><00:09:03.889><c> power</c><00:09:04.100><c> of</c><00:09:04.310><c> these</c><00:09:04.459><c> extensions</c><00:09:05.290><c> the</c>

00:09:06.280 --> 00:09:06.290 align:start position:0%
of the power of these extensions the
 

00:09:06.290 --> 00:09:07.900 align:start position:0%
of the power of these extensions the
fact<00:09:06.529><c> that</c><00:09:06.589><c> we</c><00:09:06.769><c> are</c><00:09:06.800><c> leveraging</c><00:09:07.130><c> language</c>

00:09:07.900 --> 00:09:07.910 align:start position:0%
fact that we are leveraging language
 

00:09:07.910 --> 00:09:10.420 align:start position:0%
fact that we are leveraging language
features<00:09:08.300><c> that</c><00:09:08.660><c> exist</c><00:09:09.050><c> only</c><00:09:09.230><c> in</c><00:09:09.500><c> Kotlin</c><00:09:09.949><c> not</c>

00:09:10.420 --> 00:09:10.430 align:start position:0%
features that exist only in Kotlin not
 

00:09:10.430 --> 00:09:13.210 align:start position:0%
features that exist only in Kotlin not
in<00:09:10.550><c> the</c><00:09:10.670><c> java</c><00:09:10.880><c> language</c><00:09:11.380><c> and</c><00:09:12.380><c> actually</c><00:09:12.769><c> some</c>

00:09:13.210 --> 00:09:13.220 align:start position:0%
in the java language and actually some
 

00:09:13.220 --> 00:09:14.470 align:start position:0%
in the java language and actually some
of<00:09:13.250><c> these</c><00:09:13.430><c> examples</c><00:09:13.730><c> were</c><00:09:14.120><c> going</c><00:09:14.209><c> to</c><00:09:14.329><c> keep</c>

00:09:14.470 --> 00:09:14.480 align:start position:0%
of these examples were going to keep
 

00:09:14.480 --> 00:09:15.670 align:start position:0%
of these examples were going to keep
coming<00:09:14.690><c> back</c><00:09:14.839><c> to</c><00:09:14.990><c> you</c><00:09:15.230><c> throughout</c><00:09:15.470><c> the</c><00:09:15.649><c> rest</c>

00:09:15.670 --> 00:09:15.680 align:start position:0%
coming back to you throughout the rest
 

00:09:15.680 --> 00:09:20.920 align:start position:0%
coming back to you throughout the rest
of<00:09:15.949><c> this</c><00:09:16.040><c> talk</c><00:09:18.550><c> so</c><00:09:19.550><c> all</c><00:09:19.970><c> the</c><00:09:20.300><c> extensions</c><00:09:20.750><c> that</c>

00:09:20.920 --> 00:09:20.930 align:start position:0%
of this talk so all the extensions that
 

00:09:20.930 --> 00:09:24.160 align:start position:0%
of this talk so all the extensions that
I<00:09:20.990><c> just</c><00:09:21.230><c> showed</c><00:09:21.829><c> are</c><00:09:22.190><c> part</c><00:09:22.790><c> of</c><00:09:22.970><c> the</c><00:09:23.389><c> Android</c>

00:09:24.160 --> 00:09:24.170 align:start position:0%
I just showed are part of the Android
 

00:09:24.170 --> 00:09:26.470 align:start position:0%
I just showed are part of the Android
KTX<00:09:24.709><c> library</c><00:09:25.279><c> that</c><00:09:25.519><c> we</c><00:09:25.610><c> announced</c><00:09:26.029><c> in</c><00:09:26.180><c> early</c>

00:09:26.470 --> 00:09:26.480 align:start position:0%
KTX library that we announced in early
 

00:09:26.480 --> 00:09:29.079 align:start position:0%
KTX library that we announced in early
February<00:09:27.160><c> there's</c><00:09:28.160><c> been</c><00:09:28.310><c> two</c><00:09:28.459><c> releases</c><00:09:28.880><c> since</c>

00:09:29.079 --> 00:09:29.089 align:start position:0%
February there's been two releases since
 

00:09:29.089 --> 00:09:33.759 align:start position:0%
February there's been two releases since
then<00:09:29.389><c> and</c><00:09:29.720><c> as</c><00:09:30.620><c> of</c><00:09:31.660><c> Tuesday</c><00:09:32.660><c> it's</c><00:09:32.959><c> now</c><00:09:33.139><c> part</c><00:09:33.529><c> of</c>

00:09:33.759 --> 00:09:33.769 align:start position:0%
then and as of Tuesday it's now part of
 

00:09:33.769 --> 00:09:36.160 align:start position:0%
then and as of Tuesday it's now part of
jetpack<00:09:34.310><c> it's</c><00:09:34.579><c> part</c><00:09:34.880><c> and</c><00:09:35.509><c> version</c><00:09:36.019><c> with</c>

00:09:36.160 --> 00:09:36.170 align:start position:0%
jetpack it's part and version with
 

00:09:36.170 --> 00:09:39.639 align:start position:0%
jetpack it's part and version with
jetpack<00:09:36.589><c> so</c><00:09:36.949><c> on</c><00:09:37.279><c> Tuesday</c><00:09:37.759><c> core</c><00:09:38.660><c> KTX</c><00:09:39.139><c> is</c><00:09:39.500><c> now</c>

00:09:39.639 --> 00:09:39.649 align:start position:0%
jetpack so on Tuesday core KTX is now
 

00:09:39.649 --> 00:09:43.660 align:start position:0%
jetpack so on Tuesday core KTX is now
100<00:09:40.089><c> alpha</c><00:09:41.089><c> one</c><00:09:41.800><c> it's</c><00:09:42.800><c> going</c><00:09:42.980><c> to</c><00:09:43.100><c> be</c><00:09:43.250><c> versioned</c>

00:09:43.660 --> 00:09:43.670 align:start position:0%
100 alpha one it's going to be versioned
 

00:09:43.670 --> 00:09:45.040 align:start position:0%
100 alpha one it's going to be versioned
and<00:09:43.819><c> released</c><00:09:44.120><c> with</c><00:09:44.329><c> future</c><00:09:44.660><c> jetpack</c>

00:09:45.040 --> 00:09:45.050 align:start position:0%
and released with future jetpack
 

00:09:45.050 --> 00:09:51.160 align:start position:0%
and released with future jetpack
libraries<00:09:48.670><c> so</c><00:09:49.670><c> we</c><00:09:49.819><c> call</c><00:09:50.000><c> this</c><00:09:50.149><c> core</c><00:09:50.420><c> KTX</c><00:09:50.930><c> when</c>

00:09:51.160 --> 00:09:51.170 align:start position:0%
libraries so we call this core KTX when
 

00:09:51.170 --> 00:09:52.480 align:start position:0%
libraries so we call this core KTX when
we<00:09:51.290><c> launched</c><00:09:51.680><c> which</c><00:09:51.860><c> was</c><00:09:52.009><c> kind</c><00:09:52.220><c> of</c><00:09:52.250><c> a</c><00:09:52.339><c> weird</c>

00:09:52.480 --> 00:09:52.490 align:start position:0%
we launched which was kind of a weird
 

00:09:52.490 --> 00:09:55.840 align:start position:0%
we launched which was kind of a weird
name<00:09:52.759><c> it</c><00:09:53.000><c> didn't</c><00:09:53.209><c> make</c><00:09:53.300><c> sense</c><00:09:54.399><c> this</c><00:09:55.399><c> was</c><00:09:55.610><c> for</c>

00:09:55.840 --> 00:09:55.850 align:start position:0%
name it didn't make sense this was for
 

00:09:55.850 --> 00:09:58.569 align:start position:0%
name it didn't make sense this was for
extensions<00:09:56.540><c> for</c><00:09:56.870><c> types</c><00:09:57.589><c> only</c><00:09:58.220><c> in</c><00:09:58.399><c> the</c>

00:09:58.569 --> 00:09:58.579 align:start position:0%
extensions for types only in the
 

00:09:58.579 --> 00:10:00.970 align:start position:0%
extensions for types only in the
framework<00:09:58.850><c> a</c><00:09:59.449><c> lot</c><00:09:59.870><c> of</c><00:09:59.990><c> people</c><00:10:00.199><c> suggested</c><00:10:00.740><c> can</c>

00:10:00.970 --> 00:10:00.980 align:start position:0%
framework a lot of people suggested can
 

00:10:00.980 --> 00:10:03.160 align:start position:0%
framework a lot of people suggested can
we<00:10:01.100><c> add</c><00:10:01.250><c> support</c><00:10:02.180><c> library</c><00:10:02.480><c> stuff</c><00:10:02.720><c> and</c><00:10:02.959><c> we</c><00:10:03.050><c> were</c>

00:10:03.160 --> 00:10:03.170 align:start position:0%
we add support library stuff and we were
 

00:10:03.170 --> 00:10:05.500 align:start position:0%
we add support library stuff and we were
very<00:10:03.410><c> adamant</c><00:10:03.589><c> about</c><00:10:03.889><c> saying</c><00:10:04.220><c> no</c><00:10:04.310><c> that</c><00:10:05.300><c> should</c>

00:10:05.500 --> 00:10:05.510 align:start position:0%
very adamant about saying no that should
 

00:10:05.510 --> 00:10:07.480 align:start position:0%
very adamant about saying no that should
hopefully<00:10:05.660><c> make</c><00:10:05.870><c> a</c><00:10:06.019><c> lot</c><00:10:06.230><c> more</c><00:10:06.380><c> sense</c><00:10:06.440><c> now</c><00:10:06.860><c> but</c>

00:10:07.480 --> 00:10:07.490 align:start position:0%
hopefully make a lot more sense now but
 

00:10:07.490 --> 00:10:09.730 align:start position:0%
hopefully make a lot more sense now but
even<00:10:07.910><c> this</c><00:10:08.120><c> isn't</c><00:10:08.360><c> exactly</c><00:10:08.870><c> true</c><00:10:09.170><c> because</c>

00:10:09.730 --> 00:10:09.740 align:start position:0%
even this isn't exactly true because
 

00:10:09.740 --> 00:10:12.790 align:start position:0%
even this isn't exactly true because
core<00:10:10.010><c> KTX</c><00:10:10.720><c> initially</c><00:10:11.720><c> depended</c><00:10:12.199><c> on</c><00:10:12.290><c> support</c>

00:10:12.790 --> 00:10:12.800 align:start position:0%
core KTX initially depended on support
 

00:10:12.800 --> 00:10:15.160 align:start position:0%
core KTX initially depended on support
compat<00:10:13.220><c> support</c><00:10:14.149><c> compat</c><00:10:14.480><c> is</c><00:10:14.660><c> there</c><00:10:14.839><c> to</c>

00:10:15.160 --> 00:10:15.170 align:start position:0%
compat support compat is there to
 

00:10:15.170 --> 00:10:18.579 align:start position:0%
compat support compat is there to
provide<00:10:15.560><c> backwards</c><00:10:16.250><c> compatibility</c><00:10:17.589><c> versions</c>

00:10:18.579 --> 00:10:18.589 align:start position:0%
provide backwards compatibility versions
 

00:10:18.589 --> 00:10:20.350 align:start position:0%
provide backwards compatibility versions
of<00:10:18.889><c> things</c><00:10:19.220><c> that</c><00:10:19.610><c> are</c><00:10:19.730><c> in</c><00:10:19.880><c> the</c><00:10:20.029><c> android</c>

00:10:20.350 --> 00:10:20.360 align:start position:0%
of things that are in the android
 

00:10:20.360 --> 00:10:23.079 align:start position:0%
of things that are in the android
framework<00:10:20.389><c> and</c><00:10:21.290><c> so</c><00:10:22.100><c> earlier</c><00:10:22.459><c> I</c><00:10:22.519><c> showed</c><00:10:22.850><c> the</c>

00:10:23.079 --> 00:10:23.089 align:start position:0%
framework and so earlier I showed the
 

00:10:23.089 --> 00:10:25.389 align:start position:0%
framework and so earlier I showed the
example<00:10:23.660><c> with</c><00:10:23.930><c> context</c><00:10:24.350><c> compat</c><00:10:24.800><c> that's</c>

00:10:25.389 --> 00:10:25.399 align:start position:0%
example with context compat that's
 

00:10:25.399 --> 00:10:27.189 align:start position:0%
example with context compat that's
something<00:10:25.760><c> that</c><00:10:25.910><c> came</c><00:10:26.089><c> from</c><00:10:26.149><c> support</c><00:10:26.899><c> compat</c>

00:10:27.189 --> 00:10:27.199 align:start position:0%
something that came from support compat
 

00:10:27.199 --> 00:10:29.949 align:start position:0%
something that came from support compat
and<00:10:27.560><c> so</c><00:10:28.399><c> now</c><00:10:28.579><c> with</c><00:10:28.760><c> the</c><00:10:28.910><c> jetpack</c><00:10:29.149><c> rebranding</c>

00:10:29.949 --> 00:10:29.959 align:start position:0%
and so now with the jetpack rebranding
 

00:10:29.959 --> 00:10:33.790 align:start position:0%
and so now with the jetpack rebranding
and<00:10:30.769><c> the</c><00:10:30.949><c> Android</c><00:10:31.339><c> X</c><00:10:31.519><c> packages</c><00:10:32.800><c> support</c>

00:10:33.790 --> 00:10:33.800 align:start position:0%
and the Android X packages support
 

00:10:33.800 --> 00:10:36.280 align:start position:0%
and the Android X packages support
compat<00:10:34.100><c> has</c><00:10:34.339><c> become</c><00:10:34.670><c> core</c><00:10:35.180><c> and</c><00:10:35.480><c> so</c><00:10:35.810><c> now</c><00:10:35.959><c> core</c>

00:10:36.280 --> 00:10:36.290 align:start position:0%
compat has become core and so now core
 

00:10:36.290 --> 00:10:39.939 align:start position:0%
compat has become core and so now core
KTX<00:10:36.860><c> lines</c><00:10:37.220><c> up</c><00:10:37.430><c> with</c><00:10:37.760><c> core</c><00:10:38.089><c> so</c><00:10:38.870><c> we</c><00:10:39.470><c> kind</c><00:10:39.889><c> of</c>

00:10:39.939 --> 00:10:39.949 align:start position:0%
KTX lines up with core so we kind of
 

00:10:39.949 --> 00:10:41.259 align:start position:0%
KTX lines up with core so we kind of
knew<00:10:40.069><c> what</c><00:10:40.190><c> we</c><00:10:40.310><c> were</c><00:10:40.459><c> doing</c><00:10:40.760><c> back</c><00:10:40.970><c> when</c><00:10:41.180><c> we</c>

00:10:41.259 --> 00:10:41.269 align:start position:0%
knew what we were doing back when we
 

00:10:41.269 --> 00:10:43.540 align:start position:0%
knew what we were doing back when we
started<00:10:41.600><c> this</c><00:10:41.779><c> and</c><00:10:42.680><c> now</c><00:10:42.889><c> it's</c><00:10:43.069><c> only</c><00:10:43.250><c> starting</c>

00:10:43.540 --> 00:10:43.550 align:start position:0%
started this and now it's only starting
 

00:10:43.550 --> 00:10:45.179 align:start position:0%
started this and now it's only starting
to<00:10:43.699><c> pay</c><00:10:43.880><c> off</c>

00:10:45.179 --> 00:10:45.189 align:start position:0%
to pay off
 

00:10:45.189 --> 00:10:47.980 align:start position:0%
to pay off
along<00:10:46.189><c> with</c><00:10:46.310><c> the</c><00:10:46.459><c> other</c><00:10:46.939><c> jetpack</c><00:10:47.389><c> libraries</c>

00:10:47.980 --> 00:10:47.990 align:start position:0%
along with the other jetpack libraries
 

00:10:47.990 --> 00:10:50.829 align:start position:0%
along with the other jetpack libraries
there's<00:10:48.380><c> actually</c><00:10:48.860><c> a</c><00:10:48.889><c> few</c><00:10:49.339><c> new</c><00:10:49.610><c> KTX</c><00:10:50.300><c> libraries</c>

00:10:50.829 --> 00:10:50.839 align:start position:0%
there's actually a few new KTX libraries
 

00:10:50.839 --> 00:10:53.079 align:start position:0%
there's actually a few new KTX libraries
that<00:10:51.050><c> are</c><00:10:51.110><c> launching</c><00:10:51.620><c> with</c><00:10:51.680><c> it</c><00:10:52.040><c> so</c><00:10:52.939><c> we</c><00:10:53.000><c> have</c>

00:10:53.079 --> 00:10:53.089 align:start position:0%
that are launching with it so we have
 

00:10:53.089 --> 00:10:56.259 align:start position:0%
that are launching with it so we have
ones<00:10:53.269><c> for</c><00:10:53.510><c> a</c><00:10:53.540><c> fragment</c><00:10:54.079><c> collection</c><00:10:55.269><c> sequel</c>

00:10:56.259 --> 00:10:56.269 align:start position:0%
ones for a fragment collection sequel
 

00:10:56.269 --> 00:10:58.090 align:start position:0%
ones for a fragment collection sequel
light<00:10:56.449><c> for</c><00:10:57.170><c> the</c><00:10:57.259><c> newer</c><00:10:57.439><c> components</c>

00:10:58.090 --> 00:10:58.100 align:start position:0%
light for the newer components
 

00:10:58.100 --> 00:11:01.449 align:start position:0%
light for the newer components
navigation<00:10:58.699><c> and</c><00:10:58.880><c> work</c><00:10:59.029><c> runtime</c><00:11:00.220><c> I'm</c><00:11:01.220><c> going</c><00:11:01.370><c> to</c>

00:11:01.449 --> 00:11:01.459 align:start position:0%
navigation and work runtime I'm going to
 

00:11:01.459 --> 00:11:03.309 align:start position:0%
navigation and work runtime I'm going to
touch<00:11:01.610><c> on</c><00:11:01.759><c> how</c><00:11:01.910><c> you</c><00:11:01.970><c> can</c><00:11:02.329><c> discover</c><00:11:02.779><c> these</c><00:11:03.050><c> a</c>

00:11:03.309 --> 00:11:03.319 align:start position:0%
touch on how you can discover these a
 

00:11:03.319 --> 00:11:05.519 align:start position:0%
touch on how you can discover these a
bit<00:11:03.500><c> later</c><00:11:03.769><c> but</c><00:11:04.550><c> I</c><00:11:04.610><c> want</c><00:11:04.790><c> to</c><00:11:04.850><c> talk</c><00:11:05.000><c> a</c><00:11:05.029><c> bit</c><00:11:05.269><c> about</c>

00:11:05.519 --> 00:11:05.529 align:start position:0%
bit later but I want to talk a bit about
 

00:11:05.529 --> 00:11:07.929 align:start position:0%
bit later but I want to talk a bit about
scoping<00:11:06.529><c> about</c><00:11:06.889><c> how</c><00:11:07.069><c> we</c><00:11:07.130><c> determine</c><00:11:07.699><c> whether</c>

00:11:07.929 --> 00:11:07.939 align:start position:0%
scoping about how we determine whether
 

00:11:07.939 --> 00:11:08.260 align:start position:0%
scoping about how we determine whether
or<00:11:08.000><c> not</c>

00:11:08.260 --> 00:11:08.270 align:start position:0%
or not
 

00:11:08.270 --> 00:11:11.860 align:start position:0%
or not
something<00:11:09.110><c> is</c><00:11:09.940><c> something</c><00:11:10.940><c> should</c><00:11:11.360><c> go</c><00:11:11.390><c> into</c>

00:11:11.860 --> 00:11:11.870 align:start position:0%
something is something should go into
 

00:11:11.870 --> 00:11:17.579 align:start position:0%
something is something should go into
one<00:11:12.320><c> of</c><00:11:12.350><c> these</c><00:11:12.470><c> libraries</c>

00:11:17.579 --> 00:11:17.589 align:start position:0%
 
 

00:11:17.589 --> 00:11:23.290 align:start position:0%
 
alright<00:11:18.589><c> so</c><00:11:18.830><c> in</c><00:11:19.190><c> core</c><00:11:19.640><c> TTX</c><00:11:20.890><c> 0.3</c><00:11:21.890><c> we</c><00:11:22.700><c> offered</c><00:11:23.149><c> an</c>

00:11:23.290 --> 00:11:23.300 align:start position:0%
alright so in core TTX 0.3 we offered an
 

00:11:23.300 --> 00:11:26.110 align:start position:0%
alright so in core TTX 0.3 we offered an
extension<00:11:23.810><c> that</c><00:11:23.930><c> looks</c><00:11:24.170><c> like</c><00:11:24.350><c> this</c><00:11:24.970><c> if</c><00:11:25.970><c> you</c>

00:11:26.110 --> 00:11:26.120 align:start position:0%
extension that looks like this if you
 

00:11:26.120 --> 00:11:27.310 align:start position:0%
extension that looks like this if you
look<00:11:26.240><c> at</c><00:11:26.390><c> its</c><00:11:26.540><c> signature</c>

00:11:27.310 --> 00:11:27.320 align:start position:0%
look at its signature
 

00:11:27.320 --> 00:11:29.860 align:start position:0%
look at its signature
it's<00:11:27.649><c> an</c><00:11:27.860><c> operator</c><00:11:28.310><c> and</c><00:11:29.089><c> it</c><00:11:29.330><c> operates</c><00:11:29.750><c> on</c>

00:11:29.860 --> 00:11:29.870 align:start position:0%
it's an operator and it operates on
 

00:11:29.870 --> 00:11:32.710 align:start position:0%
it's an operator and it operates on
color<00:11:30.470><c> and</c><00:11:30.740><c> the</c><00:11:31.459><c> name</c><00:11:31.640><c> is</c><00:11:31.820><c> plus</c><00:11:32.029><c> so</c><00:11:32.600><c> this</c>

00:11:32.710 --> 00:11:32.720 align:start position:0%
color and the name is plus so this
 

00:11:32.720 --> 00:11:35.500 align:start position:0%
color and the name is plus so this
allows<00:11:32.990><c> us</c><00:11:33.020><c> to</c><00:11:33.200><c> use</c><00:11:33.380><c> the</c><00:11:33.860><c> normal</c><00:11:34.399><c> plus</c><00:11:34.700><c> syntax</c>

00:11:35.500 --> 00:11:35.510 align:start position:0%
allows us to use the normal plus syntax
 

00:11:35.510 --> 00:11:38.110 align:start position:0%
allows us to use the normal plus syntax
for<00:11:35.839><c> adding</c><00:11:36.230><c> for</c><00:11:36.800><c> compositing</c><00:11:37.459><c> two</c><00:11:37.730><c> colors</c>

00:11:38.110 --> 00:11:38.120 align:start position:0%
for adding for compositing two colors
 

00:11:38.120 --> 00:11:40.420 align:start position:0%
for adding for compositing two colors
together<00:11:38.440><c> so</c><00:11:39.440><c> the</c><00:11:39.560><c> signature</c><00:11:39.950><c> it's</c>

00:11:40.420 --> 00:11:40.430 align:start position:0%
together so the signature it's
 

00:11:40.430 --> 00:11:43.750 align:start position:0%
together so the signature it's
definitely<00:11:40.940><c> an</c><00:11:41.060><c> extension</c><00:11:42.010><c> but</c><00:11:43.010><c> the</c><00:11:43.160><c> body</c><00:11:43.459><c> of</c>

00:11:43.750 --> 00:11:43.760 align:start position:0%
definitely an extension but the body of
 

00:11:43.760 --> 00:11:45.670 align:start position:0%
definitely an extension but the body of
this<00:11:43.940><c> looks</c><00:11:44.600><c> very</c><00:11:44.899><c> different</c><00:11:45.140><c> than</c><00:11:45.440><c> the</c><00:11:45.529><c> other</c>

00:11:45.670 --> 00:11:45.680 align:start position:0%
this looks very different than the other
 

00:11:45.680 --> 00:11:47.110 align:start position:0%
this looks very different than the other
extensions<00:11:46.220><c> we</c><00:11:46.399><c> looked</c><00:11:46.640><c> at</c><00:11:46.820><c> there's</c><00:11:47.060><c> a</c>

00:11:47.110 --> 00:11:47.120 align:start position:0%
extensions we looked at there's a
 

00:11:47.120 --> 00:11:50.740 align:start position:0%
extensions we looked at there's a
significant<00:11:47.899><c> amount</c><00:11:48.140><c> of</c><00:11:48.380><c> code</c><00:11:48.649><c> in</c><00:11:48.800><c> here</c><00:11:49.750><c> if</c>

00:11:50.740 --> 00:11:50.750 align:start position:0%
significant amount of code in here if
 

00:11:50.750 --> 00:11:54.280 align:start position:0%
significant amount of code in here if
you<00:11:51.709><c> look</c><00:11:51.920><c> inside</c><00:11:52.570><c> sport</c><00:11:53.570><c> compat</c><00:11:53.899><c> which</c><00:11:54.170><c> is</c>

00:11:54.280 --> 00:11:54.290 align:start position:0%
you look inside sport compat which is
 

00:11:54.290 --> 00:11:56.650 align:start position:0%
you look inside sport compat which is
that<00:11:54.470><c> core</c><00:11:54.800><c> there</c><00:11:55.610><c> is</c><00:11:55.790><c> a</c><00:11:55.820><c> color</c><00:11:56.180><c> utilities</c>

00:11:56.650 --> 00:11:56.660 align:start position:0%
that core there is a color utilities
 

00:11:56.660 --> 00:11:59.710 align:start position:0%
that core there is a color utilities
class<00:11:56.959><c> and</c><00:11:57.380><c> that</c><00:11:58.160><c> color</c><00:11:58.430><c> utilities</c><00:11:58.970><c> class</c><00:11:59.270><c> has</c>

00:11:59.710 --> 00:11:59.720 align:start position:0%
class and that color utilities class has
 

00:11:59.720 --> 00:12:02.440 align:start position:0%
class and that color utilities class has
a<00:11:59.750><c> method</c><00:12:00.320><c> called</c><00:12:00.350><c> composite</c><00:12:01.190><c> colors</c><00:12:01.730><c> that</c>

00:12:02.440 --> 00:12:02.450 align:start position:0%
a method called composite colors that
 

00:12:02.450 --> 00:12:04.750 align:start position:0%
a method called composite colors that
works<00:12:02.660><c> on</c><00:12:02.870><c> integer</c><00:12:03.620><c> colors</c><00:12:03.980><c> it</c><00:12:04.399><c> allows</c><00:12:04.610><c> you</c><00:12:04.730><c> to</c>

00:12:04.750 --> 00:12:04.760 align:start position:0%
works on integer colors it allows you to
 

00:12:04.760 --> 00:12:06.370 align:start position:0%
works on integer colors it allows you to
take<00:12:04.970><c> a</c><00:12:05.029><c> foreground</c><00:12:05.480><c> in</c><00:12:05.660><c> the</c><00:12:05.720><c> background</c><00:12:06.170><c> and</c>

00:12:06.370 --> 00:12:06.380 align:start position:0%
take a foreground in the background and
 

00:12:06.380 --> 00:12:09.340 align:start position:0%
take a foreground in the background and
turn<00:12:06.529><c> them</c><00:12:06.709><c> into</c><00:12:06.770><c> a</c><00:12:06.980><c> single</c><00:12:07.310><c> color</c><00:12:07.670><c> so</c><00:12:08.230><c> this</c><00:12:09.230><c> is</c>

00:12:09.340 --> 00:12:09.350 align:start position:0%
turn them into a single color so this is
 

00:12:09.350 --> 00:12:11.920 align:start position:0%
turn them into a single color so this is
the<00:12:09.440><c> perfect</c><00:12:09.770><c> candidate</c><00:12:10.190><c> for</c><00:12:10.480><c> placing</c><00:12:11.480><c> the</c>

00:12:11.920 --> 00:12:11.930 align:start position:0%
the perfect candidate for placing the
 

00:12:11.930 --> 00:12:14.290 align:start position:0%
the perfect candidate for placing the
implementation<00:12:12.890><c> of</c><00:12:13.100><c> where</c><00:12:13.670><c> that</c><00:12:13.850><c> what</c><00:12:14.149><c> that</c>

00:12:14.290 --> 00:12:14.300 align:start position:0%
implementation of where that what that
 

00:12:14.300 --> 00:12:17.590 align:start position:0%
implementation of where that what that
extension<00:12:14.630><c> function</c><00:12:15.110><c> was</c><00:12:16.149><c> into</c><00:12:17.149><c> this</c><00:12:17.300><c> class</c>

00:12:17.590 --> 00:12:17.600 align:start position:0%
extension function was into this class
 

00:12:17.600 --> 00:12:19.900 align:start position:0%
extension function was into this class
so<00:12:17.899><c> that</c><00:12:18.130><c> everyone</c><00:12:19.130><c> can</c><00:12:19.250><c> use</c><00:12:19.459><c> it</c><00:12:19.610><c> so</c><00:12:19.760><c> that</c><00:12:19.790><c> it</c>

00:12:19.900 --> 00:12:19.910 align:start position:0%
so that everyone can use it so that it
 

00:12:19.910 --> 00:12:22.150 align:start position:0%
so that everyone can use it so that it
can<00:12:19.970><c> be</c><00:12:20.060><c> used</c><00:12:20.240><c> from</c><00:12:20.420><c> the</c><00:12:21.350><c> java</c><00:12:21.589><c> language</c><00:12:21.770><c> or</c>

00:12:22.150 --> 00:12:22.160 align:start position:0%
can be used from the java language or
 

00:12:22.160 --> 00:12:27.100 align:start position:0%
can be used from the java language or
the<00:12:22.310><c> column</c><00:12:22.640><c> language</c><00:12:23.589><c> and</c><00:12:24.700><c> so</c><00:12:25.700><c> in</c><00:12:25.820><c> core</c><00:12:26.089><c> KTX</c>

00:12:27.100 --> 00:12:27.110 align:start position:0%
the column language and so in core KTX
 

00:12:27.110 --> 00:12:30.639 align:start position:0%
the column language and so in core KTX
1.0<00:12:28.300><c> this</c><00:12:29.300><c> actually</c><00:12:29.750><c> has</c><00:12:29.870><c> been</c><00:12:30.050><c> rewritten</c><00:12:30.350><c> to</c>

00:12:30.639 --> 00:12:30.649 align:start position:0%
1.0 this actually has been rewritten to
 

00:12:30.649 --> 00:12:35.199 align:start position:0%
1.0 this actually has been rewritten to
just<00:12:30.860><c> delegate</c><00:12:31.399><c> to</c><00:12:31.959><c> that</c><00:12:32.959><c> color</c><00:12:33.440><c> utils</c><00:12:33.860><c> so</c><00:12:34.730><c> the</c>

00:12:35.199 --> 00:12:35.209 align:start position:0%
just delegate to that color utils so the
 

00:12:35.209 --> 00:12:37.420 align:start position:0%
just delegate to that color utils so the
java<00:12:35.720><c> language</c><00:12:35.930><c> users</c><00:12:36.470><c> get</c><00:12:37.220><c> that</c>

00:12:37.420 --> 00:12:37.430 align:start position:0%
java language users get that
 

00:12:37.430 --> 00:12:39.850 align:start position:0%
java language users get that
functionality<00:12:37.940><c> but</c><00:12:38.720><c> the</c><00:12:38.839><c> colin</c><00:12:39.170><c> users</c><00:12:39.500><c> get</c>

00:12:39.850 --> 00:12:39.860 align:start position:0%
functionality but the colin users get
 

00:12:39.860 --> 00:12:44.500 align:start position:0%
functionality but the colin users get
the<00:12:40.070><c> enhanced</c><00:12:40.700><c> syntax</c><00:12:41.950><c> and</c><00:12:43.180><c> if</c><00:12:44.180><c> you</c><00:12:44.240><c> look</c><00:12:44.420><c> at</c>

00:12:44.500 --> 00:12:44.510 align:start position:0%
the enhanced syntax and if you look at
 

00:12:44.510 --> 00:12:46.060 align:start position:0%
the enhanced syntax and if you look at
the<00:12:44.630><c> extensions</c><00:12:45.110><c> that</c><00:12:45.230><c> we</c><00:12:45.440><c> talked</c><00:12:45.680><c> about</c><00:12:45.800><c> so</c>

00:12:46.060 --> 00:12:46.070 align:start position:0%
the extensions that we talked about so
 

00:12:46.070 --> 00:12:48.970 align:start position:0%
the extensions that we talked about so
far<00:12:46.329><c> the</c><00:12:47.329><c> bodies</c><00:12:47.959><c> of</c><00:12:48.200><c> them</c><00:12:48.380><c> the</c>

00:12:48.970 --> 00:12:48.980 align:start position:0%
far the bodies of them the
 

00:12:48.980 --> 00:12:51.210 align:start position:0%
far the bodies of them the
implementation<00:12:49.760><c> of</c><00:12:49.880><c> these</c><00:12:50.060><c> functions</c>

00:12:51.210 --> 00:12:51.220 align:start position:0%
implementation of these functions
 

00:12:51.220 --> 00:12:54.100 align:start position:0%
implementation of these functions
they're<00:12:52.220><c> all</c><00:12:52.399><c> trivial</c><00:12:53.120><c> they're</c><00:12:53.600><c> exceedingly</c>

00:12:54.100 --> 00:12:54.110 align:start position:0%
they're all trivial they're exceedingly
 

00:12:54.110 --> 00:12:56.889 align:start position:0%
they're all trivial they're exceedingly
trivial<00:12:54.589><c> and</c><00:12:54.800><c> that's</c><00:12:54.950><c> by</c><00:12:55.130><c> design</c><00:12:55.750><c> and</c><00:12:56.750><c> this</c>

00:12:56.889 --> 00:12:56.899 align:start position:0%
trivial and that's by design and this
 

00:12:56.899 --> 00:13:00.430 align:start position:0%
trivial and that's by design and this
gets<00:12:57.110><c> me</c><00:12:57.200><c> into</c><00:12:59.050><c> covering</c><00:13:00.050><c> some</c><00:13:00.260><c> of</c><00:13:00.290><c> the</c>

00:13:00.430 --> 00:13:00.440 align:start position:0%
gets me into covering some of the
 

00:13:00.440 --> 00:13:03.100 align:start position:0%
gets me into covering some of the
principles<00:13:01.010><c> that</c><00:13:01.160><c> we</c><00:13:01.310><c> want</c><00:13:01.610><c> to</c><00:13:02.020><c> that</c><00:13:03.020><c> we</c>

00:13:03.100 --> 00:13:03.110 align:start position:0%
principles that we want to that we
 

00:13:03.110 --> 00:13:05.019 align:start position:0%
principles that we want to that we
define<00:13:03.470><c> that</c><00:13:03.709><c> key</c><00:13:03.920><c> TX</c><00:13:04.250><c> extensions</c><00:13:04.940><c> should</c>

00:13:05.019 --> 00:13:05.029 align:start position:0%
define that key TX extensions should
 

00:13:05.029 --> 00:13:08.319 align:start position:0%
define that key TX extensions should
have<00:13:06.160><c> and</c><00:13:07.160><c> so</c><00:13:07.310><c> this</c><00:13:07.459><c> first</c><00:13:07.610><c> one</c><00:13:07.760><c> is</c><00:13:07.880><c> that</c><00:13:08.180><c> we</c>

00:13:08.319 --> 00:13:08.329 align:start position:0%
have and so this first one is that we
 

00:13:08.329 --> 00:13:10.720 align:start position:0%
have and so this first one is that we
want<00:13:08.510><c> to</c><00:13:08.570><c> adapt</c><00:13:09.130><c> functionality</c><00:13:10.130><c> that</c><00:13:10.310><c> already</c>

00:13:10.720 --> 00:13:10.730 align:start position:0%
want to adapt functionality that already
 

00:13:10.730 --> 00:13:14.079 align:start position:0%
want to adapt functionality that already
exists<00:13:11.329><c> and</c><00:13:12.220><c> if</c><00:13:13.220><c> we</c><00:13:13.310><c> want</c><00:13:13.490><c> to</c><00:13:13.520><c> add</c><00:13:13.670><c> any</c><00:13:13.940><c> new</c>

00:13:14.079 --> 00:13:14.089 align:start position:0%
exists and if we want to add any new
 

00:13:14.089 --> 00:13:15.370 align:start position:0%
exists and if we want to add any new
features<00:13:14.480><c> there</c><00:13:14.839><c> should</c><00:13:14.990><c> be</c><00:13:15.079><c> redirected</c>

00:13:15.370 --> 00:13:15.380 align:start position:0%
features there should be redirected
 

00:13:15.380 --> 00:13:17.650 align:start position:0%
features there should be redirected
upstream<00:13:16.190><c> to</c><00:13:16.730><c> a</c><00:13:16.760><c> place</c><00:13:17.089><c> for</c><00:13:17.329><c> their</c><00:13:17.480><c> language</c>

00:13:17.650 --> 00:13:17.660 align:start position:0%
upstream to a place for their language
 

00:13:17.660 --> 00:13:19.689 align:start position:0%
upstream to a place for their language
agnostic<00:13:17.990><c> where</c><00:13:18.529><c> both</c><00:13:18.740><c> languages</c><00:13:19.250><c> can</c><00:13:19.520><c> take</c>

00:13:19.689 --> 00:13:19.699 align:start position:0%
agnostic where both languages can take
 

00:13:19.699 --> 00:13:19.980 align:start position:0%
agnostic where both languages can take
it

00:13:19.980 --> 00:13:19.990 align:start position:0%
it
 

00:13:19.990 --> 00:13:22.800 align:start position:0%
it
each<00:13:20.110><c> of</c><00:13:20.290><c> them</c><00:13:20.700><c> other</c><00:13:21.700><c> examples</c><00:13:22.209><c> of</c><00:13:22.330><c> this</c><00:13:22.480><c> was</c>

00:13:22.800 --> 00:13:22.810 align:start position:0%
each of them other examples of this was
 

00:13:22.810 --> 00:13:25.920 align:start position:0%
each of them other examples of this was
there<00:13:23.589><c> was</c><00:13:23.680><c> some</c><00:13:23.830><c> HTML</c><00:13:24.040><c> compat</c><00:13:24.790><c> stuff</c><00:13:25.149><c> and</c><00:13:25.450><c> a</c>

00:13:25.920 --> 00:13:25.930 align:start position:0%
there was some HTML compat stuff and a
 

00:13:25.930 --> 00:13:27.960 align:start position:0%
there was some HTML compat stuff and a
path<00:13:26.200><c> iterator</c><00:13:26.709><c> that</c><00:13:27.430><c> were</c><00:13:27.580><c> implemented</c>

00:13:27.960 --> 00:13:27.970 align:start position:0%
path iterator that were implemented
 

00:13:27.970 --> 00:13:30.269 align:start position:0%
path iterator that were implemented
first<00:13:28.390><c> and</c><00:13:28.630><c> Corky</c><00:13:29.020><c> TX</c><00:13:29.350><c> that</c><00:13:29.649><c> have</c><00:13:29.770><c> since</c><00:13:30.010><c> moved</c>

00:13:30.269 --> 00:13:30.279 align:start position:0%
first and Corky TX that have since moved
 

00:13:30.279 --> 00:13:33.150 align:start position:0%
first and Corky TX that have since moved
upstream<00:13:30.880><c> into</c><00:13:31.420><c> core</c><00:13:31.690><c> to</c><00:13:32.470><c> be</c><00:13:32.589><c> able</c><00:13:32.620><c> to</c><00:13:32.920><c> use</c>

00:13:33.150 --> 00:13:33.160 align:start position:0%
upstream into core to be able to use
 

00:13:33.160 --> 00:13:36.019 align:start position:0%
upstream into core to be able to use
them<00:13:33.399><c> both</c><00:13:33.550><c> languages</c>

00:13:36.019 --> 00:13:36.029 align:start position:0%
them both languages
 

00:13:36.029 --> 00:13:38.220 align:start position:0%
them both languages
another<00:13:37.029><c> thing</c><00:13:37.240><c> that's</c><00:13:37.420><c> common</c><00:13:37.810><c> to</c><00:13:37.839><c> all</c><00:13:37.990><c> these</c>

00:13:38.220 --> 00:13:38.230 align:start position:0%
another thing that's common to all these
 

00:13:38.230 --> 00:13:42.030 align:start position:0%
another thing that's common to all these
extensions<00:13:38.890><c> is</c><00:13:39.480><c> that</c><00:13:40.480><c> they're</c><00:13:40.959><c> marked</c><00:13:41.740><c> as</c><00:13:41.860><c> in</c>

00:13:42.030 --> 00:13:42.040 align:start position:0%
extensions is that they're marked as in
 

00:13:42.040 --> 00:13:49.410 align:start position:0%
extensions is that they're marked as in
line<00:13:46.950><c> the</c><00:13:47.950><c> reason</c><00:13:48.100><c> that</c><00:13:48.339><c> we</c><00:13:48.459><c> do</c><00:13:48.580><c> in</c><00:13:48.820><c> line</c><00:13:49.060><c> on</c>

00:13:49.410 --> 00:13:49.420 align:start position:0%
line the reason that we do in line on
 

00:13:49.420 --> 00:13:51.750 align:start position:0%
line the reason that we do in line on
the<00:13:49.959><c> first</c><00:13:50.230><c> one</c><00:13:50.470><c> the</c><00:13:50.770><c> one</c><00:13:50.800><c> at</c><00:13:50.980><c> the</c><00:13:51.040><c> top</c><00:13:51.130><c> is</c><00:13:51.610><c> that</c>

00:13:51.750 --> 00:13:51.760 align:start position:0%
the first one the one at the top is that
 

00:13:51.760 --> 00:13:53.930 align:start position:0%
the first one the one at the top is that
we<00:13:51.970><c> want</c><00:13:52.149><c> to</c><00:13:52.180><c> avoid</c><00:13:52.300><c> the</c><00:13:52.600><c> lambda</c><00:13:52.959><c> allocation</c>

00:13:53.930 --> 00:13:53.940 align:start position:0%
we want to avoid the lambda allocation
 

00:13:53.940 --> 00:13:56.610 align:start position:0%
we want to avoid the lambda allocation
for<00:13:54.940><c> the</c><00:13:55.029><c> second</c><00:13:55.360><c> one</c><00:13:55.480><c> because</c><00:13:56.320><c> we're</c><00:13:56.470><c> using</c>

00:13:56.610 --> 00:13:56.620 align:start position:0%
for the second one because we're using
 

00:13:56.620 --> 00:13:57.900 align:start position:0%
for the second one because we're using
reified<00:13:57.250><c> generics</c>

00:13:57.900 --> 00:13:57.910 align:start position:0%
reified generics
 

00:13:57.910 --> 00:13:59.940 align:start position:0%
reified generics
we're<00:13:58.120><c> actually</c><00:13:58.390><c> forced</c><00:13:58.839><c> to</c><00:13:58.990><c> use</c><00:13:59.140><c> in</c><00:13:59.380><c> line</c><00:13:59.620><c> by</c>

00:13:59.940 --> 00:13:59.950 align:start position:0%
we're actually forced to use in line by
 

00:13:59.950 --> 00:14:03.780 align:start position:0%
we're actually forced to use in line by
the<00:14:00.010><c> compiler</c><00:14:01.260><c> the</c><00:14:02.260><c> third</c><00:14:02.500><c> the</c><00:14:03.250><c> component</c>

00:14:03.780 --> 00:14:03.790 align:start position:0%
the compiler the third the component
 

00:14:03.790 --> 00:14:07.440 align:start position:0%
the compiler the third the component
ones<00:14:03.940><c> and</c><00:14:04.300><c> the</c><00:14:04.839><c> very</c><00:14:04.990><c> bottom</c><00:14:05.350><c> one</c><00:14:05.580><c> are</c><00:14:06.580><c> all</c><00:14:07.240><c> in</c>

00:14:07.440 --> 00:14:07.450 align:start position:0%
ones and the very bottom one are all in
 

00:14:07.450 --> 00:14:10.019 align:start position:0%
ones and the very bottom one are all in
line<00:14:07.630><c> mostly</c><00:14:08.620><c> because</c><00:14:08.740><c> they're</c><00:14:09.130><c> just</c><00:14:09.279><c> aliases</c>

00:14:10.019 --> 00:14:10.029 align:start position:0%
line mostly because they're just aliases
 

00:14:10.029 --> 00:14:12.150 align:start position:0%
line mostly because they're just aliases
to<00:14:10.060><c> what</c><00:14:10.480><c> you</c><00:14:10.600><c> would</c><00:14:10.720><c> otherwise</c><00:14:10.959><c> write</c><00:14:11.589><c> if</c><00:14:11.830><c> the</c>

00:14:12.150 --> 00:14:12.160 align:start position:0%
to what you would otherwise write if the
 

00:14:12.160 --> 00:14:16.769 align:start position:0%
to what you would otherwise write if the
extension<00:14:12.430><c> didn't</c><00:14:12.850><c> exist</c><00:14:15.000><c> if</c><00:14:16.000><c> we</c><00:14:16.300><c> look</c><00:14:16.600><c> at</c><00:14:16.690><c> an</c>

00:14:16.769 --> 00:14:16.779 align:start position:0%
extension didn't exist if we look at an
 

00:14:16.779 --> 00:14:19.650 align:start position:0%
extension didn't exist if we look at an
example<00:14:16.870><c> of</c><00:14:17.610><c> something</c><00:14:18.610><c> that's</c><00:14:18.760><c> not</c><00:14:19.149><c> in</c><00:14:19.450><c> line</c>

00:14:19.650 --> 00:14:19.660 align:start position:0%
example of something that's not in line
 

00:14:19.660 --> 00:14:22.949 align:start position:0%
example of something that's not in line
in<00:14:19.959><c> core</c><00:14:20.320><c> KTX</c><00:14:20.830><c> we</c><00:14:21.760><c> have</c><00:14:21.910><c> this</c><00:14:22.060><c> iterator</c>

00:14:22.949 --> 00:14:22.959 align:start position:0%
in core KTX we have this iterator
 

00:14:22.959 --> 00:14:24.870 align:start position:0%
in core KTX we have this iterator
extension<00:14:23.560><c> to</c><00:14:23.740><c> viewgroup</c><00:14:24.130><c> which</c><00:14:24.430><c> allows</c><00:14:24.700><c> us</c>

00:14:24.870 --> 00:14:24.880 align:start position:0%
extension to viewgroup which allows us
 

00:14:24.880 --> 00:14:27.750 align:start position:0%
extension to viewgroup which allows us
to<00:14:24.910><c> use</c><00:14:25.180><c> collins</c><00:14:25.690><c> for</c><00:14:26.050><c> in</c><00:14:26.290><c> syntax</c><00:14:26.829><c> to</c><00:14:27.430><c> iterate</c>

00:14:27.750 --> 00:14:27.760 align:start position:0%
to use collins for in syntax to iterate
 

00:14:27.760 --> 00:14:31.350 align:start position:0%
to use collins for in syntax to iterate
over<00:14:27.790><c> the</c><00:14:28.000><c> views</c><00:14:28.270><c> in</c><00:14:28.420><c> a</c><00:14:28.510><c> view</c><00:14:28.720><c> group</c><00:14:30.149><c> this</c><00:14:31.149><c> is</c>

00:14:31.350 --> 00:14:31.360 align:start position:0%
over the views in a view group this is
 

00:14:31.360 --> 00:14:33.900 align:start position:0%
over the views in a view group this is
not<00:14:31.510><c> in</c><00:14:31.750><c> line</c><00:14:31.990><c> for</c><00:14:32.860><c> a</c><00:14:32.890><c> very</c><00:14:33.100><c> specific</c><00:14:33.310><c> reason</c>

00:14:33.900 --> 00:14:33.910 align:start position:0%
not in line for a very specific reason
 

00:14:33.910 --> 00:14:36.750 align:start position:0%
not in line for a very specific reason
and<00:14:34.120><c> that</c><00:14:34.930><c> is</c><00:14:34.990><c> because</c><00:14:35.079><c> it</c><00:14:35.740><c> defines</c><00:14:36.370><c> the</c>

00:14:36.750 --> 00:14:36.760 align:start position:0%
and that is because it defines the
 

00:14:36.760 --> 00:14:38.910 align:start position:0%
and that is because it defines the
implementation<00:14:37.450><c> of</c><00:14:37.570><c> this</c><00:14:37.750><c> function</c><00:14:38.200><c> defines</c>

00:14:38.910 --> 00:14:38.920 align:start position:0%
implementation of this function defines
 

00:14:38.920 --> 00:14:42.090 align:start position:0%
implementation of this function defines
an<00:14:39.220><c> anonymous</c><00:14:39.700><c> class</c><00:14:40.320><c> if</c><00:14:41.320><c> we</c><00:14:41.500><c> were</c><00:14:41.620><c> to</c><00:14:41.740><c> inline</c>

00:14:42.090 --> 00:14:42.100 align:start position:0%
an anonymous class if we were to inline
 

00:14:42.100 --> 00:14:43.560 align:start position:0%
an anonymous class if we were to inline
this<00:14:42.339><c> that</c><00:14:42.640><c> means</c><00:14:42.820><c> that</c><00:14:43.000><c> every</c><00:14:43.209><c> time</c><00:14:43.240><c> you</c><00:14:43.450><c> use</c>

00:14:43.560 --> 00:14:43.570 align:start position:0%
this that means that every time you use
 

00:14:43.570 --> 00:14:44.010 align:start position:0%
this that means that every time you use
it

00:14:44.010 --> 00:14:44.020 align:start position:0%
it
 

00:14:44.020 --> 00:14:46.290 align:start position:0%
it
an<00:14:44.500><c> anonymous</c><00:14:44.890><c> class</c><00:14:45.310><c> would</c><00:14:45.579><c> be</c><00:14:45.610><c> defined</c><00:14:46.029><c> at</c>

00:14:46.290 --> 00:14:46.300 align:start position:0%
an anonymous class would be defined at
 

00:14:46.300 --> 00:14:48.030 align:start position:0%
an anonymous class would be defined at
your<00:14:46.450><c> call</c><00:14:46.660><c> site</c><00:14:46.899><c> and</c><00:14:47.110><c> so</c><00:14:47.680><c> this</c><00:14:47.860><c> would</c>

00:14:48.030 --> 00:14:48.040 align:start position:0%
your call site and so this would
 

00:14:48.040 --> 00:14:50.370 align:start position:0%
your call site and so this would
increase<00:14:48.370><c> your</c><00:14:48.850><c> deck</c><00:14:49.029><c> size</c><00:14:49.240><c> method</c><00:14:49.690><c> count</c><00:14:50.050><c> and</c>

00:14:50.370 --> 00:14:50.380 align:start position:0%
increase your deck size method count and
 

00:14:50.380 --> 00:14:53.220 align:start position:0%
increase your deck size method count and
class<00:14:50.829><c> loading</c><00:14:51.360><c> we</c><00:14:52.360><c> explicitly</c><00:14:52.690><c> make</c><00:14:53.110><c> this</c>

00:14:53.220 --> 00:14:53.230 align:start position:0%
class loading we explicitly make this
 

00:14:53.230 --> 00:14:55.790 align:start position:0%
class loading we explicitly make this
not<00:14:53.470><c> inline</c><00:14:53.860><c> because</c><00:14:54.250><c> we</c><00:14:54.399><c> want</c><00:14:54.730><c> that</c><00:14:54.940><c> single</c>

00:14:55.790 --> 00:14:55.800 align:start position:0%
not inline because we want that single
 

00:14:55.800 --> 00:14:58.290 align:start position:0%
not inline because we want that single
implementation<00:14:56.800><c> to</c><00:14:57.070><c> be</c><00:14:57.160><c> reused</c><00:14:57.670><c> by</c><00:14:58.029><c> all</c><00:14:58.180><c> of</c>

00:14:58.290 --> 00:14:58.300 align:start position:0%
implementation to be reused by all of
 

00:14:58.300 --> 00:15:04.800 align:start position:0%
implementation to be reused by all of
the<00:14:58.420><c> callers</c><00:15:02.670><c> so</c><00:15:03.670><c> we</c><00:15:03.910><c> default</c><00:15:04.240><c> to</c><00:15:04.329><c> an</c>

00:15:04.800 --> 00:15:04.810 align:start position:0%
the callers so we default to an
 

00:15:04.810 --> 00:15:06.920 align:start position:0%
the callers so we default to an
extension<00:15:05.350><c> being</c><00:15:05.560><c> inline</c><00:15:05.980><c> unless</c><00:15:06.550><c> there</c><00:15:06.850><c> are</c>

00:15:06.920 --> 00:15:06.930 align:start position:0%
extension being inline unless there are
 

00:15:06.930 --> 00:15:10.410 align:start position:0%
extension being inline unless there are
allocation<00:15:07.930><c> reasons</c><00:15:08.850><c> and</c><00:15:09.850><c> I</c><00:15:10.000><c> should</c><00:15:10.209><c> note</c>

00:15:10.410 --> 00:15:10.420 align:start position:0%
allocation reasons and I should note
 

00:15:10.420 --> 00:15:13.319 align:start position:0%
allocation reasons and I should note
that<00:15:10.450><c> this</c><00:15:10.750><c> is</c><00:15:10.899><c> really</c><00:15:11.230><c> only</c><00:15:11.380><c> for</c><00:15:12.029><c> KTX</c><00:15:13.029><c> style</c>

00:15:13.319 --> 00:15:13.329 align:start position:0%
that this is really only for KTX style
 

00:15:13.329 --> 00:15:16.079 align:start position:0%
that this is really only for KTX style
extensions<00:15:13.959><c> in</c><00:15:14.200><c> normal</c><00:15:14.770><c> collin</c><00:15:15.100><c> code</c><00:15:15.310><c> this</c><00:15:15.940><c> is</c>

00:15:16.079 --> 00:15:16.089 align:start position:0%
extensions in normal collin code this is
 

00:15:16.089 --> 00:15:18.030 align:start position:0%
extensions in normal collin code this is
not<00:15:16.270><c> a</c><00:15:16.300><c> good</c><00:15:16.540><c> recommendation</c><00:15:17.200><c> you</c><00:15:17.410><c> don't</c><00:15:17.890><c> want</c>

00:15:18.030 --> 00:15:18.040 align:start position:0%
not a good recommendation you don't want
 

00:15:18.040 --> 00:15:20.250 align:start position:0%
not a good recommendation you don't want
to<00:15:18.100><c> default</c><00:15:18.399><c> the</c><00:15:18.520><c> inline</c><00:15:18.880><c> because</c><00:15:19.839><c> it</c><00:15:19.959><c> has</c><00:15:20.110><c> the</c>

00:15:20.250 --> 00:15:20.260 align:start position:0%
to default the inline because it has the
 

00:15:20.260 --> 00:15:22.320 align:start position:0%
to default the inline because it has the
potential<00:15:20.589><c> to</c><00:15:20.770><c> lead</c><00:15:21.100><c> to</c><00:15:21.399><c> actually</c>

00:15:22.320 --> 00:15:22.330 align:start position:0%
potential to lead to actually
 

00:15:22.330 --> 00:15:24.720 align:start position:0%
potential to lead to actually
having<00:15:22.720><c> a</c><00:15:22.780><c> negative</c><00:15:22.960><c> effect</c><00:15:23.200><c> on</c><00:15:23.560><c> your</c><00:15:24.550><c> code</c>

00:15:24.720 --> 00:15:24.730 align:start position:0%
having a negative effect on your code
 

00:15:24.730 --> 00:15:29.240 align:start position:0%
having a negative effect on your code
rather<00:15:25.060><c> than</c><00:15:25.210><c> a</c><00:15:25.360><c> positive</c><00:15:25.600><c> one</c>

00:15:29.240 --> 00:15:29.250 align:start position:0%
 
 

00:15:29.250 --> 00:15:32.550 align:start position:0%
 
all<00:15:30.250><c> right</c><00:15:30.400><c> so</c><00:15:31.020><c> earlier</c><00:15:32.020><c> when</c><00:15:32.140><c> we</c><00:15:32.200><c> showed</c><00:15:32.440><c> this</c>

00:15:32.550 --> 00:15:32.560 align:start position:0%
all right so earlier when we showed this
 

00:15:32.560 --> 00:15:34.610 align:start position:0%
all right so earlier when we showed this
extension<00:15:33.040><c> I</c><00:15:33.130><c> talked</c><00:15:33.340><c> about</c><00:15:33.460><c> how</c><00:15:33.760><c> the</c><00:15:33.820><c> inline</c>

00:15:34.610 --> 00:15:34.620 align:start position:0%
extension I talked about how the inline
 

00:15:34.620 --> 00:15:37.380 align:start position:0%
extension I talked about how the inline
modifier<00:15:35.620><c> coupled</c><00:15:36.220><c> with</c><00:15:36.280><c> the</c><00:15:36.670><c> fact</c><00:15:36.970><c> that</c>

00:15:37.380 --> 00:15:37.390 align:start position:0%
modifier coupled with the fact that
 

00:15:37.390 --> 00:15:39.840 align:start position:0%
modifier coupled with the fact that
there's<00:15:37.630><c> a</c><00:15:37.690><c> lambda</c><00:15:38.100><c> allows</c><00:15:39.100><c> this</c><00:15:39.310><c> extension</c>

00:15:39.840 --> 00:15:39.850 align:start position:0%
there's a lambda allows this extension
 

00:15:39.850 --> 00:15:43.890 align:start position:0%
there's a lambda allows this extension
to<00:15:40.000><c> be</c><00:15:40.030><c> a</c><00:15:40.330><c> zero</c><00:15:40.720><c> overhead</c><00:15:41.020><c> abstraction</c><00:15:42.450><c> in</c><00:15:43.450><c> the</c>

00:15:43.890 --> 00:15:43.900 align:start position:0%
to be a zero overhead abstraction in the
 

00:15:43.900 --> 00:15:47.550 align:start position:0%
to be a zero overhead abstraction in the
rio5<00:15:44.140><c> case</c><00:15:44.940><c> we</c><00:15:45.940><c> get</c><00:15:46.120><c> a</c><00:15:46.360><c> the</c><00:15:46.780><c> ability</c><00:15:47.140><c> to</c><00:15:47.170><c> have</c><00:15:47.530><c> a</c>

00:15:47.550 --> 00:15:47.560 align:start position:0%
rio5 case we get a the ability to have a
 

00:15:47.560 --> 00:15:50.070 align:start position:0%
rio5 case we get a the ability to have a
more<00:15:47.860><c> declarative</c><00:15:48.340><c> version</c><00:15:49.030><c> of</c><00:15:49.270><c> the</c><00:15:49.690><c> lookup</c>

00:15:50.070 --> 00:15:50.080 align:start position:0%
more declarative version of the lookup
 

00:15:50.080 --> 00:15:51.750 align:start position:0%
more declarative version of the lookup
at<00:15:50.260><c> the</c><00:15:50.410><c> call</c><00:15:50.620><c> site</c><00:15:50.860><c> without</c><00:15:51.190><c> having</c><00:15:51.340><c> to</c>

00:15:51.750 --> 00:15:51.760 align:start position:0%
at the call site without having to
 

00:15:51.760 --> 00:15:57.420 align:start position:0%
at the call site without having to
specify<00:15:52.180><c> the</c><00:15:52.240><c> colon</c><00:15:52.990><c> colon</c><00:15:53.200><c> class</c><00:15:53.500><c> Java</c><00:15:56.430><c> for</c>

00:15:57.420 --> 00:15:57.430 align:start position:0%
specify the colon colon class Java for
 

00:15:57.430 --> 00:15:59.450 align:start position:0%
specify the colon colon class Java for
updating<00:15:58.210><c> the</c><00:15:58.300><c> padding</c><00:15:58.690><c> we</c><00:15:58.840><c> get</c><00:15:59.020><c> to</c><00:15:59.140><c> use</c>

00:15:59.450 --> 00:15:59.460 align:start position:0%
updating the padding we get to use
 

00:15:59.460 --> 00:16:01.710 align:start position:0%
updating the padding we get to use
default<00:16:00.460><c> values</c><00:16:00.520><c> to</c><00:16:00.880><c> not</c><00:16:01.240><c> have</c><00:16:01.390><c> to</c><00:16:01.510><c> specify</c>

00:16:01.710 --> 00:16:01.720 align:start position:0%
default values to not have to specify
 

00:16:01.720 --> 00:16:03.600 align:start position:0%
default values to not have to specify
each<00:16:02.260><c> of</c><00:16:02.410><c> the</c><00:16:02.500><c> arguments</c><00:16:03.040><c> and</c><00:16:03.220><c> name</c>

00:16:03.600 --> 00:16:03.610 align:start position:0%
each of the arguments and name
 

00:16:03.610 --> 00:16:06.840 align:start position:0%
each of the arguments and name
parameters<00:16:04.180><c> to</c><00:16:04.600><c> specify</c><00:16:05.410><c> which</c><00:16:06.070><c> subset</c><00:16:06.670><c> of</c>

00:16:06.840 --> 00:16:06.850 align:start position:0%
parameters to specify which subset of
 

00:16:06.850 --> 00:16:08.400 align:start position:0%
parameters to specify which subset of
arguments<00:16:07.330><c> we</c><00:16:07.450><c> want</c><00:16:07.630><c> to</c><00:16:07.750><c> actually</c><00:16:08.110><c> provide</c>

00:16:08.400 --> 00:16:08.410 align:start position:0%
arguments we want to actually provide
 

00:16:08.410 --> 00:16:12.840 align:start position:0%
arguments we want to actually provide
for<00:16:09.930><c> the</c><00:16:10.930><c> destructuring</c><00:16:11.440><c> case</c><00:16:11.770><c> we</c><00:16:12.520><c> get</c><00:16:12.670><c> the</c>

00:16:12.840 --> 00:16:12.850 align:start position:0%
for the destructuring case we get the
 

00:16:12.850 --> 00:16:14.700 align:start position:0%
for the destructuring case we get the
fancy<00:16:13.060><c> syntax</c><00:16:13.630><c> that</c><00:16:13.900><c> allows</c><00:16:14.140><c> us</c><00:16:14.290><c> to</c><00:16:14.440><c> pull</c>

00:16:14.700 --> 00:16:14.710 align:start position:0%
fancy syntax that allows us to pull
 

00:16:14.710 --> 00:16:17.280 align:start position:0%
fancy syntax that allows us to pull
apart<00:16:15.070><c> the</c><00:16:15.160><c> component</c><00:16:15.970><c> variables</c><00:16:16.810><c> out</c><00:16:17.080><c> of</c><00:16:17.230><c> a</c>

00:16:17.280 --> 00:16:17.290 align:start position:0%
apart the component variables out of a
 

00:16:17.290 --> 00:16:21.560 align:start position:0%
apart the component variables out of a
composite<00:16:17.590><c> object</c><00:16:18.660><c> this</c><00:16:19.660><c> is</c><00:16:19.870><c> useful</c><00:16:20.530><c> this</c><00:16:21.040><c> is</c>

00:16:21.560 --> 00:16:21.570 align:start position:0%
composite object this is useful this is
 

00:16:21.570 --> 00:16:24.480 align:start position:0%
composite object this is useful this is
enabled<00:16:22.570><c> by</c><00:16:22.750><c> the</c><00:16:22.810><c> fact</c><00:16:22.930><c> that</c><00:16:23.230><c> we</c><00:16:23.440><c> are</c><00:16:23.860><c> we</c><00:16:24.460><c> have</c>

00:16:24.480 --> 00:16:24.490 align:start position:0%
enabled by the fact that we are we have
 

00:16:24.490 --> 00:16:26.760 align:start position:0%
enabled by the fact that we are we have
operator<00:16:25.000><c> overloading</c><00:16:25.330><c> Kotlin</c><00:16:26.050><c> we</c><00:16:26.650><c> also</c>

00:16:26.760 --> 00:16:26.770 align:start position:0%
operator overloading Kotlin we also
 

00:16:26.770 --> 00:16:29.070 align:start position:0%
operator overloading Kotlin we also
talked<00:16:27.010><c> about</c><00:16:27.100><c> how</c><00:16:27.400><c> we</c><00:16:28.150><c> were</c><00:16:28.240><c> able</c><00:16:28.300><c> to</c><00:16:28.510><c> add</c><00:16:28.720><c> the</c>

00:16:29.070 --> 00:16:29.080 align:start position:0%
talked about how we were able to add the
 

00:16:29.080 --> 00:16:35.520 align:start position:0%
talked about how we were able to add the
plus<00:16:29.350><c> or</c><00:16:29.620><c> color</c><00:16:32.610><c> for</c><00:16:33.610><c> this</c><00:16:33.730><c> one</c><00:16:34.110><c> we're</c><00:16:35.110><c> a</c><00:16:35.320><c> Lea</c>

00:16:35.520 --> 00:16:35.530 align:start position:0%
plus or color for this one we're a Lea
 

00:16:35.530 --> 00:16:38.070 align:start position:0%
plus or color for this one we're a Lea
Singh<00:16:35.800><c> in</c><00:16:36.210><c> extension</c><00:16:37.210><c> to</c><00:16:37.420><c> a</c><00:16:37.450><c> static</c><00:16:37.870><c> method</c>

00:16:38.070 --> 00:16:38.080 align:start position:0%
Singh in extension to a static method
 

00:16:38.080 --> 00:16:40.020 align:start position:0%
Singh in extension to a static method
and<00:16:38.950><c> this</c><00:16:39.070><c> is</c><00:16:39.220><c> just</c><00:16:39.460><c> to</c><00:16:39.550><c> help</c><00:16:39.640><c> improve</c>

00:16:40.020 --> 00:16:40.030 align:start position:0%
and this is just to help improve
 

00:16:40.030 --> 00:16:41.970 align:start position:0%
and this is just to help improve
discoverability<00:16:40.420><c> for</c><00:16:41.290><c> built-in</c><00:16:41.650><c> helpers</c>

00:16:41.970 --> 00:16:41.980 align:start position:0%
discoverability for built-in helpers
 

00:16:41.980 --> 00:16:44.690 align:start position:0%
discoverability for built-in helpers
that<00:16:42.339><c> you</c><00:16:42.460><c> might</c><00:16:42.610><c> otherwise</c><00:16:43.030><c> not</c><00:16:43.450><c> know</c><00:16:43.720><c> exist</c>

00:16:44.690 --> 00:16:44.700 align:start position:0%
that you might otherwise not know exist
 

00:16:44.700 --> 00:16:49.200 align:start position:0%
that you might otherwise not know exist
and<00:16:46.320><c> then</c><00:16:47.320><c> for</c><00:16:47.620><c> types</c><00:16:48.310><c> that</c><00:16:48.520><c> are</c><00:16:48.670><c> collection</c>

00:16:49.200 --> 00:16:49.210 align:start position:0%
and then for types that are collection
 

00:16:49.210 --> 00:16:51.840 align:start position:0%
and then for types that are collection
like<00:16:49.480><c> but</c><00:16:49.900><c> not</c><00:16:50.050><c> actually</c><00:16:50.589><c> collections</c><00:16:51.160><c> we</c>

00:16:51.840 --> 00:16:51.850 align:start position:0%
like but not actually collections we
 

00:16:51.850 --> 00:16:54.380 align:start position:0%
like but not actually collections we
have<00:16:52.000><c> the</c><00:16:52.120><c> ability</c><00:16:52.450><c> to</c><00:16:52.480><c> turn</c><00:16:53.020><c> them</c><00:16:53.290><c> into</c>

00:16:54.380 --> 00:16:54.390 align:start position:0%
have the ability to turn them into
 

00:16:54.390 --> 00:16:57.030 align:start position:0%
have the ability to turn them into
pseudo<00:16:55.390><c> collections</c><00:16:55.930><c> where</c><00:16:56.170><c> we</c><00:16:56.290><c> can</c><00:16:56.470><c> use</c><00:16:56.770><c> the</c>

00:16:57.030 --> 00:16:57.040 align:start position:0%
pseudo collections where we can use the
 

00:16:57.040 --> 00:16:59.310 align:start position:0%
pseudo collections where we can use the
affordances<00:16:57.910><c> of</c><00:16:58.089><c> the</c><00:16:58.180><c> language</c><00:16:58.570><c> as</c><00:16:58.839><c> if</c><00:16:59.170><c> they</c>

00:16:59.310 --> 00:16:59.320 align:start position:0%
affordances of the language as if they
 

00:16:59.320 --> 00:17:03.000 align:start position:0%
affordances of the language as if they
were<00:16:59.380><c> actual</c><00:17:00.010><c> collections</c><00:17:00.690><c> and</c><00:17:01.690><c> so</c><00:17:02.589><c> each</c><00:17:02.800><c> one</c>

00:17:03.000 --> 00:17:03.010 align:start position:0%
were actual collections and so each one
 

00:17:03.010 --> 00:17:06.110 align:start position:0%
were actual collections and so each one
of<00:17:03.130><c> those</c><00:17:03.280><c> has</c><00:17:03.790><c> a</c><00:17:04.180><c> very</c><00:17:04.810><c> Colin</c><00:17:05.380><c> specific</c>

00:17:06.110 --> 00:17:06.120 align:start position:0%
of those has a very Colin specific
 

00:17:06.120 --> 00:17:09.660 align:start position:0%
of those has a very Colin specific
language<00:17:07.120><c> feature</c><00:17:07.360><c> that</c><00:17:07.720><c> it</c><00:17:07.870><c> uses</c><00:17:08.079><c> and</c><00:17:08.709><c> we</c>

00:17:09.660 --> 00:17:09.670 align:start position:0%
language feature that it uses and we
 

00:17:09.670 --> 00:17:11.340 align:start position:0%
language feature that it uses and we
want<00:17:09.880><c> to</c><00:17:09.970><c> make</c><00:17:10.540><c> sure</c><00:17:10.569><c> that</c><00:17:10.930><c> all</c><00:17:11.140><c> these</c>

00:17:11.340 --> 00:17:11.350 align:start position:0%
want to make sure that all these
 

00:17:11.350 --> 00:17:13.949 align:start position:0%
want to make sure that all these
extensions<00:17:11.770><c> that</c><00:17:12.130><c> we're</c><00:17:12.250><c> defining</c><00:17:12.959><c> leverage</c>

00:17:13.949 --> 00:17:13.959 align:start position:0%
extensions that we're defining leverage
 

00:17:13.959 --> 00:17:15.630 align:start position:0%
extensions that we're defining leverage
some<00:17:14.260><c> feature</c><00:17:14.500><c> of</c><00:17:14.650><c> the</c><00:17:14.860><c> common</c><00:17:15.280><c> language</c><00:17:15.610><c> that</c>

00:17:15.630 --> 00:17:15.640 align:start position:0%
some feature of the common language that
 

00:17:15.640 --> 00:17:19.309 align:start position:0%
some feature of the common language that
doesn't<00:17:16.060><c> otherwise</c><00:17:16.480><c> exist</c><00:17:16.959><c> for</c><00:17:17.319><c> Java</c><00:17:17.770><c> callers</c>

00:17:19.309 --> 00:17:19.319 align:start position:0%
doesn't otherwise exist for Java callers
 

00:17:19.319 --> 00:17:22.290 align:start position:0%
doesn't otherwise exist for Java callers
we<00:17:20.319><c> want</c><00:17:20.500><c> to</c><00:17:20.560><c> resist</c><00:17:20.890><c> trying</c><00:17:21.100><c> to</c><00:17:21.400><c> fix</c><00:17:21.670><c> an</c><00:17:21.939><c> API</c>

00:17:22.290 --> 00:17:22.300 align:start position:0%
we want to resist trying to fix an API
 

00:17:22.300 --> 00:17:25.740 align:start position:0%
we want to resist trying to fix an API
just<00:17:22.839><c> by</c><00:17:23.079><c> creating</c><00:17:24.010><c> extensions</c><00:17:24.520><c> for</c><00:17:24.760><c> it</c><00:17:24.880><c> but</c>

00:17:25.740 --> 00:17:25.750 align:start position:0%
just by creating extensions for it but
 

00:17:25.750 --> 00:17:27.329 align:start position:0%
just by creating extensions for it but
rather<00:17:25.930><c> enhance</c><00:17:26.560><c> it</c><00:17:26.740><c> to</c><00:17:26.890><c> become</c><00:17:27.130><c> more</c>

00:17:27.329 --> 00:17:27.339 align:start position:0%
rather enhance it to become more
 

00:17:27.339 --> 00:17:29.250 align:start position:0%
rather enhance it to become more
pleasant<00:17:27.730><c> to</c><00:17:27.760><c> use</c><00:17:28.030><c> by</c><00:17:28.510><c> leveraging</c><00:17:28.900><c> these</c>

00:17:29.250 --> 00:17:29.260 align:start position:0%
pleasant to use by leveraging these
 

00:17:29.260 --> 00:17:29.870 align:start position:0%
pleasant to use by leveraging these
Scotland

00:17:29.870 --> 00:17:29.880 align:start position:0%
Scotland
 

00:17:29.880 --> 00:17:37.070 align:start position:0%
Scotland
specific<00:17:30.270><c> features</c><00:17:33.890><c> okay</c><00:17:35.840><c> one</c><00:17:36.840><c> of</c><00:17:36.870><c> the</c>

00:17:37.070 --> 00:17:37.080 align:start position:0%
specific features okay one of the
 

00:17:37.080 --> 00:17:40.640 align:start position:0%
specific features okay one of the
suggestions<00:17:37.560><c> we</c><00:17:37.860><c> get</c><00:17:38.840><c> quite</c><00:17:39.840><c> frequently</c><00:17:40.350><c> is</c>

00:17:40.640 --> 00:17:40.650 align:start position:0%
suggestions we get quite frequently is
 

00:17:40.650 --> 00:17:42.590 align:start position:0%
suggestions we get quite frequently is
to<00:17:40.860><c> take</c><00:17:41.070><c> something</c><00:17:41.430><c> like</c><00:17:41.820><c> set</c>

00:17:42.590 --> 00:17:42.600 align:start position:0%
to take something like set
 

00:17:42.600 --> 00:17:46.130 align:start position:0%
to take something like set
onclicklistener<00:17:43.050><c> and</c><00:17:44.480><c> write</c><00:17:45.480><c> an</c><00:17:45.630><c> extension</c>

00:17:46.130 --> 00:17:46.140 align:start position:0%
onclicklistener and write an extension
 

00:17:46.140 --> 00:17:47.660 align:start position:0%
onclicklistener and write an extension
which<00:17:46.380><c> allows</c><00:17:46.680><c> you</c><00:17:46.830><c> to</c><00:17:46.860><c> call</c><00:17:47.130><c> it</c><00:17:47.340><c> using</c>

00:17:47.660 --> 00:17:47.670 align:start position:0%
which allows you to call it using
 

00:17:47.670 --> 00:17:51.950 align:start position:0%
which allows you to call it using
something<00:17:48.000><c> like</c><00:17:48.150><c> click</c><00:17:48.570><c> or</c><00:17:48.870><c> on</c><00:17:49.320><c> click</c><00:17:50.960><c> this</c>

00:17:51.950 --> 00:17:51.960 align:start position:0%
something like click or on click this
 

00:17:51.960 --> 00:17:53.990 align:start position:0%
something like click or on click this
allows<00:17:52.260><c> the</c><00:17:52.500><c> calling</c><00:17:52.950><c> code</c><00:17:53.130><c> to</c><00:17:53.670><c> instead</c><00:17:53.940><c> of</c>

00:17:53.990 --> 00:17:54.000 align:start position:0%
allows the calling code to instead of
 

00:17:54.000 --> 00:17:57.200 align:start position:0%
allows the calling code to instead of
having<00:17:54.270><c> to</c><00:17:54.480><c> call</c><00:17:54.660><c> set</c><00:17:55.230><c> onclicklistener</c><00:17:56.210><c> we</c>

00:17:57.200 --> 00:17:57.210 align:start position:0%
having to call set onclicklistener we
 

00:17:57.210 --> 00:18:01.160 align:start position:0%
having to call set onclicklistener we
get<00:17:57.360><c> the</c><00:17:57.450><c> shorter</c><00:17:57.810><c> version</c><00:17:57.840><c> of</c><00:17:58.380><c> click</c><00:17:59.960><c> are</c><00:18:00.960><c> we</c>

00:18:01.160 --> 00:18:01.170 align:start position:0%
get the shorter version of click are we
 

00:18:01.170 --> 00:18:02.360 align:start position:0%
get the shorter version of click are we
leveraging<00:18:01.620><c> a</c><00:18:01.680><c> feature</c><00:18:01.920><c> of</c><00:18:02.100><c> the</c><00:18:02.190><c> language</c>

00:18:02.360 --> 00:18:02.370 align:start position:0%
leveraging a feature of the language
 

00:18:02.370 --> 00:18:05.600 align:start position:0%
leveraging a feature of the language
here<00:18:02.900><c> well</c><00:18:03.900><c> we're</c><00:18:04.650><c> leveraging</c><00:18:04.830><c> extension</c>

00:18:05.600 --> 00:18:05.610 align:start position:0%
here well we're leveraging extension
 

00:18:05.610 --> 00:18:07.760 align:start position:0%
here well we're leveraging extension
functions<00:18:06.030><c> but</c><00:18:06.330><c> not</c><00:18:06.630><c> really</c><00:18:07.290><c> we're</c><00:18:07.530><c> really</c>

00:18:07.760 --> 00:18:07.770 align:start position:0%
functions but not really we're really
 

00:18:07.770 --> 00:18:11.360 align:start position:0%
functions but not really we're really
just<00:18:07.980><c> creating</c><00:18:08.280><c> a</c><00:18:08.610><c> shorter</c><00:18:09.300><c> alias</c><00:18:09.800><c> what</c><00:18:10.800><c> value</c>

00:18:11.360 --> 00:18:11.370 align:start position:0%
just creating a shorter alias what value
 

00:18:11.370 --> 00:18:13.700 align:start position:0%
just creating a shorter alias what value
are<00:18:11.700><c> we</c><00:18:11.730><c> extracting</c><00:18:12.540><c> from</c><00:18:12.750><c> this</c><00:18:12.960><c> extension</c>

00:18:13.700 --> 00:18:13.710 align:start position:0%
are we extracting from this extension
 

00:18:13.710 --> 00:18:15.770 align:start position:0%
are we extracting from this extension
well<00:18:14.250><c> we're</c><00:18:14.460><c> typing</c><00:18:15.030><c> a</c><00:18:15.090><c> few</c><00:18:15.120><c> less</c><00:18:15.450><c> characters</c>

00:18:15.770 --> 00:18:15.780 align:start position:0%
well we're typing a few less characters
 

00:18:15.780 --> 00:18:17.870 align:start position:0%
well we're typing a few less characters
but<00:18:16.320><c> really</c><00:18:16.800><c> it's</c><00:18:17.070><c> all</c><00:18:17.160><c> auto-completed</c>

00:18:17.870 --> 00:18:17.880 align:start position:0%
but really it's all auto-completed
 

00:18:17.880 --> 00:18:21.860 align:start position:0%
but really it's all auto-completed
anyway<00:18:19.220><c> but</c><00:18:20.220><c> even</c><00:18:20.430><c> worse</c><00:18:20.580><c> what</c><00:18:21.150><c> precedent</c>

00:18:21.860 --> 00:18:21.870 align:start position:0%
anyway but even worse what precedent
 

00:18:21.870 --> 00:18:23.900 align:start position:0%
anyway but even worse what precedent
will<00:18:22.020><c> we</c><00:18:22.140><c> be</c><00:18:22.290><c> setting</c><00:18:22.620><c> here</c><00:18:22.830><c> by</c><00:18:23.100><c> by</c><00:18:23.520><c> adding</c>

00:18:23.900 --> 00:18:23.910 align:start position:0%
will we be setting here by by adding
 

00:18:23.910 --> 00:18:26.210 align:start position:0%
will we be setting here by by adding
this<00:18:24.060><c> extension</c><00:18:24.450><c> are</c><00:18:25.380><c> we</c><00:18:25.530><c> gonna</c><00:18:25.650><c> do</c><00:18:25.830><c> this</c><00:18:25.980><c> for</c>

00:18:26.210 --> 00:18:26.220 align:start position:0%
this extension are we gonna do this for
 

00:18:26.220 --> 00:18:30.740 align:start position:0%
this extension are we gonna do this for
every<00:18:26.730><c> listener</c><00:18:27.920><c> and</c><00:18:29.000><c> so</c><00:18:30.000><c> this</c><00:18:30.150><c> is</c><00:18:30.300><c> a</c><00:18:30.330><c> great</c>

00:18:30.740 --> 00:18:30.750 align:start position:0%
every listener and so this is a great
 

00:18:30.750 --> 00:18:32.720 align:start position:0%
every listener and so this is a great
example<00:18:30.900><c> of</c><00:18:31.380><c> something</c><00:18:31.590><c> we</c><00:18:31.830><c> explicitly</c><00:18:32.550><c> do</c>

00:18:32.720 --> 00:18:32.730 align:start position:0%
example of something we explicitly do
 

00:18:32.730 --> 00:18:38.960 align:start position:0%
example of something we explicitly do
not<00:18:32.970><c> want</c><00:18:33.210><c> to</c><00:18:33.300><c> do</c><00:18:33.480><c> in</c><00:18:33.780><c> the</c><00:18:34.350><c> KTX</c><00:18:34.770><c> libraries</c><00:18:37.970><c> if</c>

00:18:38.960 --> 00:18:38.970 align:start position:0%
not want to do in the KTX libraries if
 

00:18:38.970 --> 00:18:41.300 align:start position:0%
not want to do in the KTX libraries if
you're<00:18:39.090><c> not</c><00:18:39.210><c> familiar</c><00:18:39.390><c> with</c><00:18:39.600><c> the</c><00:18:39.810><c> term</c><00:18:40.310><c> we</c>

00:18:41.300 --> 00:18:41.310 align:start position:0%
you're not familiar with the term we
 

00:18:41.310 --> 00:18:43.760 align:start position:0%
you're not familiar with the term we
call<00:18:41.490><c> this</c><00:18:41.580><c> code</c><00:18:41.910><c> golf</c><00:18:42.210><c> where</c><00:18:43.020><c> you</c><00:18:43.590><c> have</c><00:18:43.740><c> a</c>

00:18:43.760 --> 00:18:43.770 align:start position:0%
call this code golf where you have a
 

00:18:43.770 --> 00:18:45.830 align:start position:0%
call this code golf where you have a
desire<00:18:44.310><c> to</c><00:18:44.340><c> create</c><00:18:44.790><c> the</c><00:18:45.030><c> shortest</c><00:18:45.540><c> code</c>

00:18:45.830 --> 00:18:45.840 align:start position:0%
desire to create the shortest code
 

00:18:45.840 --> 00:18:48.830 align:start position:0%
desire to create the shortest code
possible<00:18:46.880><c> this</c><00:18:47.880><c> is</c><00:18:48.060><c> something</c><00:18:48.360><c> we</c><00:18:48.450><c> do</c><00:18:48.720><c> not</c>

00:18:48.830 --> 00:18:48.840 align:start position:0%
possible this is something we do not
 

00:18:48.840 --> 00:18:50.270 align:start position:0%
possible this is something we do not
want<00:18:49.050><c> to</c><00:18:49.110><c> do</c><00:18:49.290><c> we're</c><00:18:49.500><c> not</c><00:18:49.530><c> here</c><00:18:49.890><c> to</c><00:18:50.010><c> just</c><00:18:50.190><c> make</c>

00:18:50.270 --> 00:18:50.280 align:start position:0%
want to do we're not here to just make
 

00:18:50.280 --> 00:18:55.460 align:start position:0%
want to do we're not here to just make
the<00:18:50.640><c> code</c><00:18:50.820><c> shorter</c><00:18:54.080><c> okay</c><00:18:55.080><c> there's</c><00:18:55.410><c> another</c>

00:18:55.460 --> 00:18:55.470 align:start position:0%
the code shorter okay there's another
 

00:18:55.470 --> 00:18:57.920 align:start position:0%
the code shorter okay there's another
one<00:18:55.830><c> that</c><00:18:55.980><c> gets</c><00:18:56.450><c> suggested</c><00:18:57.450><c> every</c><00:18:57.660><c> now</c><00:18:57.780><c> and</c>

00:18:57.920 --> 00:18:57.930 align:start position:0%
one that gets suggested every now and
 

00:18:57.930 --> 00:19:01.480 align:start position:0%
one that gets suggested every now and
then<00:18:58.050><c> and</c><00:18:58.320><c> that</c><00:18:58.410><c> I've</c><00:18:58.530><c> seen</c><00:18:58.770><c> people</c><00:18:59.280><c> using</c>

00:19:01.480 --> 00:19:01.490 align:start position:0%
then and that I've seen people using
 

00:19:01.490 --> 00:19:03.830 align:start position:0%
then and that I've seen people using
with<00:19:02.490><c> Android</c><00:19:02.910><c> because</c><00:19:03.150><c> of</c><00:19:03.450><c> the</c><00:19:03.570><c> different</c>

00:19:03.830 --> 00:19:03.840 align:start position:0%
with Android because of the different
 

00:19:03.840 --> 00:19:05.720 align:start position:0%
with Android because of the different
API<00:19:04.080><c> levels</c><00:19:04.140><c> we</c><00:19:04.560><c> have</c><00:19:04.680><c> to</c><00:19:04.770><c> support</c><00:19:05.160><c> you</c><00:19:05.520><c> very</c>

00:19:05.720 --> 00:19:05.730 align:start position:0%
API levels we have to support you very
 

00:19:05.730 --> 00:19:08.000 align:start position:0%
API levels we have to support you very
frequently<00:19:06.210><c> see</c><00:19:06.540><c> these</c><00:19:06.870><c> if</c><00:19:07.140><c> checks</c><00:19:07.500><c> around</c>

00:19:08.000 --> 00:19:08.010 align:start position:0%
frequently see these if checks around
 

00:19:08.010 --> 00:19:11.720 align:start position:0%
frequently see these if checks around
that<00:19:08.340><c> the</c><00:19:08.730><c> SDK</c><00:19:09.330><c> it</c><00:19:10.130><c> so</c><00:19:11.130><c> can</c><00:19:11.250><c> be</c><00:19:11.340><c> tempting</c><00:19:11.700><c> to</c>

00:19:11.720 --> 00:19:11.730 align:start position:0%
that the SDK it so can be tempting to
 

00:19:11.730 --> 00:19:13.730 align:start position:0%
that the SDK it so can be tempting to
pull<00:19:12.030><c> this</c><00:19:12.150><c> out</c><00:19:12.330><c> into</c><00:19:12.630><c> an</c><00:19:12.960><c> extension</c><00:19:13.320><c> where</c>

00:19:13.730 --> 00:19:13.740 align:start position:0%
pull this out into an extension where
 

00:19:13.740 --> 00:19:15.050 align:start position:0%
pull this out into an extension where
you<00:19:13.830><c> have</c><00:19:14.010><c> a</c><00:19:14.040><c> little</c><00:19:14.400><c> bit</c><00:19:14.550><c> more</c><00:19:14.730><c> declarative</c>

00:19:15.050 --> 00:19:15.060 align:start position:0%
you have a little bit more declarative
 

00:19:15.060 --> 00:19:19.430 align:start position:0%
you have a little bit more declarative
version<00:19:15.720><c> of</c><00:19:15.840><c> this</c><00:19:16.190><c> we</c><00:19:17.190><c> move</c><00:19:17.430><c> the</c><00:19:18.440><c> comparison</c>

00:19:19.430 --> 00:19:19.440 align:start position:0%
version of this we move the comparison
 

00:19:19.440 --> 00:19:21.920 align:start position:0%
version of this we move the comparison
into<00:19:19.800><c> an</c><00:19:19.890><c> extension</c><00:19:20.190><c> function</c><00:19:20.840><c> it's</c><00:19:21.840><c> an</c>

00:19:21.920 --> 00:19:21.930 align:start position:0%
into an extension function it's an
 

00:19:21.930 --> 00:19:23.420 align:start position:0%
into an extension function it's an
inline<00:19:22.290><c> function</c><00:19:22.740><c> so</c><00:19:22.950><c> we</c><00:19:23.010><c> don't</c><00:19:23.190><c> have</c><00:19:23.340><c> the</c>

00:19:23.420 --> 00:19:23.430 align:start position:0%
inline function so we don't have the
 

00:19:23.430 --> 00:19:26.240 align:start position:0%
inline function so we don't have the
overhead<00:19:23.880><c> the</c><00:19:24.320><c> lambdas</c><00:19:25.320><c> the</c><00:19:25.470><c> last</c><00:19:25.680><c> parameter</c>

00:19:26.240 --> 00:19:26.250 align:start position:0%
overhead the lambdas the last parameter
 

00:19:26.250 --> 00:19:28.670 align:start position:0%
overhead the lambdas the last parameter
so<00:19:26.490><c> you</c><00:19:26.550><c> get</c><00:19:26.700><c> the</c><00:19:26.820><c> nice</c><00:19:27.000><c> Kotlin</c><00:19:27.480><c> call</c><00:19:28.440><c> site</c>

00:19:28.670 --> 00:19:28.680 align:start position:0%
so you get the nice Kotlin call site
 

00:19:28.680 --> 00:19:31.070 align:start position:0%
so you get the nice Kotlin call site
syntax<00:19:29.190><c> and</c><00:19:29.550><c> it</c><00:19:30.120><c> turns</c><00:19:30.330><c> our</c><00:19:30.480><c> if</c><00:19:30.600><c> statement</c>

00:19:31.070 --> 00:19:31.080 align:start position:0%
syntax and it turns our if statement
 

00:19:31.080 --> 00:19:36.170 align:start position:0%
syntax and it turns our if statement
from<00:19:31.290><c> this</c><00:19:32.360><c> into</c><00:19:33.360><c> this</c><00:19:34.520><c> now</c><00:19:35.520><c> this</c><00:19:35.700><c> by</c><00:19:35.880><c> itself</c>

00:19:36.170 --> 00:19:36.180 align:start position:0%
from this into this now this by itself
 

00:19:36.180 --> 00:19:39.200 align:start position:0%
from this into this now this by itself
is<00:19:36.360><c> is</c><00:19:36.690><c> not</c><00:19:37.230><c> too</c><00:19:37.440><c> terrible</c><00:19:37.860><c> we're</c><00:19:38.850><c> really</c><00:19:39.030><c> not</c>

00:19:39.200 --> 00:19:39.210 align:start position:0%
is is not too terrible we're really not
 

00:19:39.210 --> 00:19:41.760 align:start position:0%
is is not too terrible we're really not
leveraging<00:19:39.750><c> any</c><00:19:40.140><c> of</c><00:19:40.230><c> the</c><00:19:40.380><c> language</c><00:19:40.740><c> features</c>

00:19:41.760 --> 00:19:41.770 align:start position:0%
leveraging any of the language features
 

00:19:41.770 --> 00:19:46.350 align:start position:0%
leveraging any of the language features
again<00:19:42.660><c> similar</c><00:19:43.660><c> to</c><00:19:43.870><c> the</c><00:19:43.960><c> last</c><00:19:44.170><c> one</c><00:19:44.730><c> we're</c><00:19:45.730><c> it's</c>

00:19:46.350 --> 00:19:46.360 align:start position:0%
again similar to the last one we're it's
 

00:19:46.360 --> 00:19:48.390 align:start position:0%
again similar to the last one we're it's
still<00:19:46.630><c> kind</c><00:19:46.870><c> of</c><00:19:46.900><c> an</c><00:19:47.050><c> alias</c><00:19:47.440><c> but</c><00:19:47.710><c> at</c><00:19:48.070><c> least</c><00:19:48.160><c> this</c>

00:19:48.390 --> 00:19:48.400 align:start position:0%
still kind of an alias but at least this
 

00:19:48.400 --> 00:19:50.190 align:start position:0%
still kind of an alias but at least this
one<00:19:48.610><c> you</c><00:19:48.760><c> can</c><00:19:48.910><c> argue</c><00:19:49.150><c> a</c><00:19:49.300><c> little</c><00:19:49.480><c> bit</c><00:19:49.690><c> more</c><00:19:49.900><c> for</c>

00:19:50.190 --> 00:19:50.200 align:start position:0%
one you can argue a little bit more for
 

00:19:50.200 --> 00:19:54.360 align:start position:0%
one you can argue a little bit more for
its<00:19:50.320><c> merits</c><00:19:51.450><c> but</c><00:19:52.450><c> there's</c><00:19:52.660><c> a</c><00:19:52.720><c> problem</c><00:19:53.370><c> while</c>

00:19:54.360 --> 00:19:54.370 align:start position:0%
its merits but there's a problem while
 

00:19:54.370 --> 00:19:57.390 align:start position:0%
its merits but there's a problem while
these<00:19:54.550><c> two</c><00:19:54.820><c> statements</c><00:19:55.240><c> are</c><00:19:55.330><c> equivalent</c><00:19:56.400><c> what</c>

00:19:57.390 --> 00:19:57.400 align:start position:0%
these two statements are equivalent what
 

00:19:57.400 --> 00:20:00.990 align:start position:0%
these two statements are equivalent what
happens<00:19:57.790><c> when</c><00:19:58.890><c> well</c><00:19:59.890><c> for</c><00:20:00.400><c> one</c><00:20:00.520><c> thing</c><00:20:00.700><c> is</c><00:20:00.850><c> that</c>

00:20:00.990 --> 00:20:01.000 align:start position:0%
happens when well for one thing is that
 

00:20:01.000 --> 00:20:03.060 align:start position:0%
happens when well for one thing is that
you<00:20:01.120><c> can</c><00:20:01.300><c> at</c><00:20:01.570><c> least</c><00:20:01.750><c> static</c><00:20:02.140><c> import</c><00:20:02.470><c> SDK</c><00:20:02.890><c> in</c>

00:20:03.060 --> 00:20:03.070 align:start position:0%
you can at least static import SDK in
 

00:20:03.070 --> 00:20:04.200 align:start position:0%
you can at least static import SDK in
and<00:20:03.309><c> then</c><00:20:03.460><c> they're</c><00:20:03.580><c> a</c><00:20:03.610><c> little</c><00:20:03.880><c> bit</c><00:20:03.970><c> closer</c>

00:20:04.200 --> 00:20:04.210 align:start position:0%
and then they're a little bit closer
 

00:20:04.210 --> 00:20:06.419 align:start position:0%
and then they're a little bit closer
that's<00:20:05.020><c> one</c><00:20:05.230><c> reason</c><00:20:05.440><c> why</c><00:20:05.740><c> this</c><00:20:05.800><c> is</c><00:20:06.130><c> less</c>

00:20:06.419 --> 00:20:06.429 align:start position:0%
that's one reason why this is less
 

00:20:06.429 --> 00:20:10.140 align:start position:0%
that's one reason why this is less
justified<00:20:07.770><c> but</c><00:20:08.770><c> one</c><00:20:08.920><c> thing</c><00:20:09.130><c> is</c><00:20:09.400><c> that</c><00:20:09.640><c> an</c><00:20:09.850><c> if</c>

00:20:10.140 --> 00:20:10.150 align:start position:0%
justified but one thing is that an if
 

00:20:10.150 --> 00:20:12.570 align:start position:0%
justified but one thing is that an if
statement<00:20:10.360><c> is</c><00:20:10.780><c> a</c><00:20:10.840><c> very</c><00:20:11.140><c> primitive</c><00:20:11.620><c> construct</c>

00:20:12.570 --> 00:20:12.580 align:start position:0%
statement is a very primitive construct
 

00:20:12.580 --> 00:20:16.080 align:start position:0%
statement is a very primitive construct
of<00:20:12.880><c> a</c><00:20:13.059><c> programming</c><00:20:13.480><c> language</c><00:20:13.960><c> and</c><00:20:14.820><c> because</c><00:20:15.820><c> an</c>

00:20:16.080 --> 00:20:16.090 align:start position:0%
of a programming language and because an
 

00:20:16.090 --> 00:20:18.330 align:start position:0%
of a programming language and because an
if<00:20:16.330><c> statement</c><00:20:16.540><c> is</c><00:20:16.929><c> not</c><00:20:17.140><c> just</c><00:20:17.380><c> an</c><00:20:17.500><c> if</c><00:20:17.650><c> statement</c>

00:20:18.330 --> 00:20:18.340 align:start position:0%
if statement is not just an if statement
 

00:20:18.340 --> 00:20:21.930 align:start position:0%
if statement is not just an if statement
there's<00:20:19.210><c> constructs</c><00:20:19.750><c> like</c><00:20:19.900><c> else</c><00:20:20.700><c> so</c><00:20:21.700><c> what</c><00:20:21.850><c> if</c>

00:20:21.930 --> 00:20:21.940 align:start position:0%
there's constructs like else so what if
 

00:20:21.940 --> 00:20:23.520 align:start position:0%
there's constructs like else so what if
your<00:20:22.059><c> requirements</c><00:20:22.630><c> change</c><00:20:22.840><c> such</c><00:20:23.230><c> that</c><00:20:23.410><c> you</c>

00:20:23.520 --> 00:20:23.530 align:start position:0%
your requirements change such that you
 

00:20:23.530 --> 00:20:25.890 align:start position:0%
your requirements change such that you
need<00:20:23.710><c> to</c><00:20:23.860><c> alter</c><00:20:24.190><c> the</c><00:20:24.220><c> behavior</c><00:20:24.370><c> on</c><00:20:24.970><c> these</c><00:20:25.690><c> two</c>

00:20:25.890 --> 00:20:25.900 align:start position:0%
need to alter the behavior on these two
 

00:20:25.900 --> 00:20:28.020 align:start position:0%
need to alter the behavior on these two
different<00:20:26.260><c> versions</c><00:20:26.700><c> well</c><00:20:27.700><c> if</c><00:20:27.790><c> you</c><00:20:27.910><c> were</c>

00:20:28.020 --> 00:20:28.030 align:start position:0%
different versions well if you were
 

00:20:28.030 --> 00:20:30.960 align:start position:0%
different versions well if you were
using<00:20:28.650><c> this</c><00:20:29.650><c> extension</c><00:20:30.190><c> that</c><00:20:30.280><c> you</c><00:20:30.429><c> wrote</c><00:20:30.670><c> in</c>

00:20:30.960 --> 00:20:30.970 align:start position:0%
using this extension that you wrote in
 

00:20:30.970 --> 00:20:33.150 align:start position:0%
using this extension that you wrote in
order<00:20:31.660><c> to</c><00:20:31.870><c> support</c><00:20:32.200><c> this</c><00:20:32.380><c> case</c><00:20:32.620><c> you</c><00:20:32.920><c> either</c>

00:20:33.150 --> 00:20:33.160 align:start position:0%
order to support this case you either
 

00:20:33.160 --> 00:20:35.910 align:start position:0%
order to support this case you either
have<00:20:33.640><c> to</c><00:20:33.670><c> change</c><00:20:34.660><c> back</c><00:20:34.990><c> to</c><00:20:35.320><c> using</c><00:20:35.740><c> an</c><00:20:35.800><c> if</c>

00:20:35.910 --> 00:20:35.920 align:start position:0%
have to change back to using an if
 

00:20:35.920 --> 00:20:38.700 align:start position:0%
have to change back to using an if
statement<00:20:36.130><c> or</c><00:20:36.870><c> you</c><00:20:37.870><c> have</c><00:20:38.020><c> to</c><00:20:38.140><c> modify</c><00:20:38.530><c> the</c>

00:20:38.700 --> 00:20:38.710 align:start position:0%
statement or you have to modify the
 

00:20:38.710 --> 00:20:40.410 align:start position:0%
statement or you have to modify the
function<00:20:39.010><c> where</c><00:20:39.580><c> maybe</c><00:20:39.820><c> it</c><00:20:39.970><c> takes</c><00:20:40.179><c> two</c>

00:20:40.410 --> 00:20:40.420 align:start position:0%
function where maybe it takes two
 

00:20:40.420 --> 00:20:42.090 align:start position:0%
function where maybe it takes two
lambdas<00:20:40.840><c> now</c><00:20:40.990><c> one</c><00:20:41.320><c> for</c><00:20:41.559><c> the</c><00:20:41.650><c> case</c><00:20:41.830><c> where</c>

00:20:42.090 --> 00:20:42.100 align:start position:0%
lambdas now one for the case where
 

00:20:42.100 --> 00:20:44.430 align:start position:0%
lambdas now one for the case where
you're<00:20:42.490><c> above</c><00:20:42.730><c> 19</c><00:20:43.240><c> one</c><00:20:43.720><c> for</c><00:20:43.929><c> the</c><00:20:44.020><c> case</c><00:20:44.200><c> where</c>

00:20:44.430 --> 00:20:44.440 align:start position:0%
you're above 19 one for the case where
 

00:20:44.440 --> 00:20:47.790 align:start position:0%
you're above 19 one for the case where
you're<00:20:44.559><c> not</c><00:20:46.020><c> because</c><00:20:47.020><c> we're</c><00:20:47.170><c> now</c><00:20:47.260><c> taking</c><00:20:47.320><c> two</c>

00:20:47.790 --> 00:20:47.800 align:start position:0%
you're not because we're now taking two
 

00:20:47.800 --> 00:20:49.950 align:start position:0%
you're not because we're now taking two
lambdas<00:20:48.190><c> in</c><00:20:48.309><c> this</c><00:20:48.429><c> function</c><00:20:48.880><c> we've</c><00:20:49.150><c> lost</c><00:20:49.540><c> the</c>

00:20:49.950 --> 00:20:49.960 align:start position:0%
lambdas in this function we've lost the
 

00:20:49.960 --> 00:20:52.320 align:start position:0%
lambdas in this function we've lost the
special<00:20:50.410><c> trailing</c><00:20:51.130><c> lambda</c><00:20:51.460><c> syntax</c><00:20:51.700><c> where</c><00:20:52.210><c> we</c>

00:20:52.320 --> 00:20:52.330 align:start position:0%
special trailing lambda syntax where we
 

00:20:52.330 --> 00:20:54.000 align:start position:0%
special trailing lambda syntax where we
we<00:20:52.600><c> now</c><00:20:52.750><c> have</c><00:20:52.929><c> to</c><00:20:53.020><c> pass</c><00:20:53.200><c> them</c><00:20:53.410><c> as</c><00:20:53.590><c> arguments</c>

00:20:54.000 --> 00:20:54.010 align:start position:0%
we now have to pass them as arguments
 

00:20:54.010 --> 00:20:56.460 align:start position:0%
we now have to pass them as arguments
inside<00:20:54.520><c> the</c><00:20:54.670><c> parentheses</c><00:20:55.179><c> whereas</c><00:20:55.960><c> before</c><00:20:56.320><c> we</c>

00:20:56.460 --> 00:20:56.470 align:start position:0%
inside the parentheses whereas before we
 

00:20:56.470 --> 00:21:00.000 align:start position:0%
inside the parentheses whereas before we
did<00:20:57.179><c> so</c><00:20:58.179><c> immediately</c><00:20:58.900><c> this</c><00:20:59.140><c> extension</c><00:20:59.559><c> starts</c>

00:21:00.000 --> 00:21:00.010 align:start position:0%
did so immediately this extension starts
 

00:21:00.010 --> 00:21:03.030 align:start position:0%
did so immediately this extension starts
falling<00:21:00.309><c> apart</c><00:21:00.630><c> if</c><00:21:01.630><c> we</c><00:21:02.080><c> introduce</c><00:21:02.590><c> another</c>

00:21:03.030 --> 00:21:03.040 align:start position:0%
falling apart if we introduce another
 

00:21:03.040 --> 00:21:05.280 align:start position:0%
falling apart if we introduce another
conditional<00:21:03.760><c> branch</c><00:21:04.000><c> maybe</c><00:21:04.540><c> we</c><00:21:04.780><c> need</c><00:21:04.929><c> to</c><00:21:04.960><c> vary</c>

00:21:05.280 --> 00:21:05.290 align:start position:0%
conditional branch maybe we need to vary
 

00:21:05.290 --> 00:21:08.160 align:start position:0%
conditional branch maybe we need to vary
the<00:21:05.440><c> behavior</c><00:21:05.800><c> across</c><00:21:06.750><c> api's</c><00:21:07.750><c> in</c><00:21:07.990><c> three</c>

00:21:08.160 --> 00:21:08.170 align:start position:0%
the behavior across api's in three
 

00:21:08.170 --> 00:21:08.630 align:start position:0%
the behavior across api's in three
different<00:21:08.350><c> ways</c>

00:21:08.630 --> 00:21:08.640 align:start position:0%
different ways
 

00:21:08.640 --> 00:21:11.610 align:start position:0%
different ways
well<00:21:09.640><c> there's</c><00:21:09.940><c> really</c><00:21:10.270><c> no</c><00:21:10.510><c> way</c><00:21:10.660><c> that</c><00:21:11.020><c> we</c><00:21:11.470><c> can</c>

00:21:11.610 --> 00:21:11.620 align:start position:0%
well there's really no way that we can
 

00:21:11.620 --> 00:21:14.640 align:start position:0%
well there's really no way that we can
make<00:21:11.800><c> the</c><00:21:11.950><c> extension</c><00:21:12.190><c> do</c><00:21:12.520><c> this</c><00:21:13.590><c> the</c><00:21:14.590><c> other</c>

00:21:14.640 --> 00:21:14.650 align:start position:0%
make the extension do this the other
 

00:21:14.650 --> 00:21:17.400 align:start position:0%
make the extension do this the other
thing<00:21:14.800><c> that</c><00:21:15.460><c> is</c><00:21:15.940><c> different</c><00:21:16.360><c> about</c><00:21:16.840><c> this</c>

00:21:17.400 --> 00:21:17.410 align:start position:0%
thing that is different about this
 

00:21:17.410 --> 00:21:19.530 align:start position:0%
thing that is different about this
extension<00:21:17.920><c> compared</c><00:21:18.670><c> to</c><00:21:18.820><c> the</c><00:21:18.940><c> if</c><00:21:19.090><c> statement</c>

00:21:19.530 --> 00:21:19.540 align:start position:0%
extension compared to the if statement
 

00:21:19.540 --> 00:21:21.870 align:start position:0%
extension compared to the if statement
is<00:21:19.690><c> that</c><00:21:19.750><c> we're</c><00:21:20.380><c> assuming</c><00:21:20.770><c> the</c><00:21:21.160><c> conditional</c>

00:21:21.870 --> 00:21:21.880 align:start position:0%
is that we're assuming the conditional
 

00:21:21.880 --> 00:21:23.490 align:start position:0%
is that we're assuming the conditional
that<00:21:22.000><c> we</c><00:21:22.090><c> want</c><00:21:22.270><c> to</c><00:21:22.330><c> check</c><00:21:22.540><c> is</c><00:21:22.809><c> greater</c><00:21:23.200><c> than</c><00:21:23.380><c> or</c>

00:21:23.490 --> 00:21:23.500 align:start position:0%
that we want to check is greater than or
 

00:21:23.500 --> 00:21:25.530 align:start position:0%
that we want to check is greater than or
equal<00:21:23.800><c> to</c><00:21:23.920><c> that</c><00:21:24.610><c> the</c><00:21:24.730><c> behavior</c><00:21:25.150><c> we</c><00:21:25.300><c> want</c><00:21:25.390><c> to</c>

00:21:25.530 --> 00:21:25.540 align:start position:0%
equal to that the behavior we want to
 

00:21:25.540 --> 00:21:27.510 align:start position:0%
equal to that the behavior we want to
run<00:21:25.720><c> in</c><00:21:25.960><c> the</c><00:21:26.050><c> lambda</c><00:21:26.260><c> we</c><00:21:26.650><c> only</c><00:21:26.800><c> want</c><00:21:27.010><c> to</c><00:21:27.100><c> run</c><00:21:27.250><c> on</c>

00:21:27.510 --> 00:21:27.520 align:start position:0%
run in the lambda we only want to run on
 

00:21:27.520 --> 00:21:30.299 align:start position:0%
run in the lambda we only want to run on
you<00:21:28.059><c> know</c><00:21:28.150><c> nineteen</c><00:21:28.600><c> plus</c><00:21:28.980><c> well</c><00:21:29.980><c> a</c><00:21:30.010><c> lot</c><00:21:30.190><c> of</c>

00:21:30.299 --> 00:21:30.309 align:start position:0%
you know nineteen plus well a lot of
 

00:21:30.309 --> 00:21:32.610 align:start position:0%
you know nineteen plus well a lot of
times<00:21:30.490><c> some</c><00:21:30.790><c> of</c><00:21:30.880><c> the</c><00:21:31.030><c> if</c><00:21:31.870><c> statements</c><00:21:32.410><c> again</c>

00:21:32.610 --> 00:21:32.620 align:start position:0%
times some of the if statements again
 

00:21:32.620 --> 00:21:34.919 align:start position:0%
times some of the if statements again
sdk<00:21:33.130><c> int</c><00:21:33.400><c> will</c><00:21:33.790><c> be</c><00:21:33.940><c> less</c><00:21:34.300><c> than</c><00:21:34.480><c> or</c><00:21:34.630><c> equal</c><00:21:34.660><c> to</c>

00:21:34.919 --> 00:21:34.929 align:start position:0%
sdk int will be less than or equal to
 

00:21:34.929 --> 00:21:37.049 align:start position:0%
sdk int will be less than or equal to
and<00:21:35.170><c> so</c><00:21:35.200><c> now</c><00:21:35.410><c> we</c><00:21:35.500><c> need</c><00:21:35.710><c> a</c><00:21:35.740><c> second</c><00:21:36.280><c> extension</c><00:21:36.640><c> in</c>

00:21:37.049 --> 00:21:37.059 align:start position:0%
and so now we need a second extension in
 

00:21:37.059 --> 00:21:43.770 align:start position:0%
and so now we need a second extension in
order<00:21:37.630><c> to</c><00:21:38.010><c> support</c><00:21:39.010><c> that</c><00:21:39.100><c> use</c><00:21:39.400><c> case</c><00:21:42.660><c> so</c><00:21:43.660><c> this</c>

00:21:43.770 --> 00:21:43.780 align:start position:0%
order to support that use case so this
 

00:21:43.780 --> 00:21:45.419 align:start position:0%
order to support that use case so this
is<00:21:43.900><c> another</c><00:21:44.200><c> example</c><00:21:44.440><c> of</c><00:21:44.950><c> something</c><00:21:45.220><c> that</c>

00:21:45.419 --> 00:21:45.429 align:start position:0%
is another example of something that
 

00:21:45.429 --> 00:21:48.750 align:start position:0%
is another example of something that
we're<00:21:45.580><c> not</c><00:21:45.610><c> looking</c><00:21:46.059><c> to</c><00:21:46.210><c> do</c><00:21:47.400><c> we</c><00:21:48.400><c> don't</c><00:21:48.520><c> want</c><00:21:48.700><c> to</c>

00:21:48.750 --> 00:21:48.760 align:start position:0%
we're not looking to do we don't want to
 

00:21:48.760 --> 00:21:51.810 align:start position:0%
we're not looking to do we don't want to
optimize<00:21:49.059><c> for</c><00:21:49.690><c> just</c><00:21:50.500><c> a</c><00:21:50.590><c> single</c><00:21:51.010><c> use</c><00:21:51.190><c> case</c><00:21:51.460><c> or</c><00:21:51.730><c> a</c>

00:21:51.810 --> 00:21:51.820 align:start position:0%
optimize for just a single use case or a
 

00:21:51.820 --> 00:21:54.480 align:start position:0%
optimize for just a single use case or a
specific<00:21:52.210><c> use</c><00:21:52.660><c> case</c><00:21:52.900><c> where</c>

00:21:54.480 --> 00:21:54.490 align:start position:0%
specific use case where
 

00:21:54.490 --> 00:21:58.470 align:start position:0%
specific use case where
extension<00:21:55.050><c> only</c><00:21:56.050><c> supports</c><00:21:56.770><c> one</c><00:21:57.670><c> way</c><00:21:58.210><c> of</c><00:21:58.360><c> doing</c>

00:21:58.470 --> 00:21:58.480 align:start position:0%
extension only supports one way of doing
 

00:21:58.480 --> 00:22:00.780 align:start position:0%
extension only supports one way of doing
something<00:21:58.840><c> and</c><00:21:59.170><c> then</c><00:21:59.800><c> when</c><00:22:00.190><c> you</c><00:22:00.280><c> need</c><00:22:00.460><c> to</c><00:22:00.490><c> move</c>

00:22:00.780 --> 00:22:00.790 align:start position:0%
something and then when you need to move
 

00:22:00.790 --> 00:22:02.669 align:start position:0%
something and then when you need to move
to<00:22:00.970><c> something</c><00:22:01.179><c> more</c><00:22:01.510><c> complex</c><00:22:02.050><c> you</c><00:22:02.440><c> have</c><00:22:02.559><c> to</c>

00:22:02.669 --> 00:22:02.679 align:start position:0%
to something more complex you have to
 

00:22:02.679 --> 00:22:04.980 align:start position:0%
to something more complex you have to
revert<00:22:03.070><c> to</c><00:22:03.100><c> the</c><00:22:03.340><c> original</c><00:22:03.520><c> behavior</c><00:22:04.240><c> we</c><00:22:04.870><c> want</c>

00:22:04.980 --> 00:22:04.990 align:start position:0%
revert to the original behavior we want
 

00:22:04.990 --> 00:22:08.040 align:start position:0%
revert to the original behavior we want
the<00:22:05.140><c> extensions</c><00:22:05.650><c> to</c><00:22:06.010><c> you</c><00:22:06.390><c> allow</c><00:22:07.390><c> you</c><00:22:07.450><c> to</c>

00:22:08.040 --> 00:22:08.050 align:start position:0%
the extensions to you allow you to
 

00:22:08.050 --> 00:22:09.570 align:start position:0%
the extensions to you allow you to
express<00:22:08.530><c> everything</c><00:22:08.920><c> you</c><00:22:09.160><c> would</c><00:22:09.280><c> need</c><00:22:09.400><c> to</c>

00:22:09.570 --> 00:22:09.580 align:start position:0%
express everything you would need to
 

00:22:09.580 --> 00:22:18.630 align:start position:0%
express everything you would need to
express<00:22:10.030><c> if</c><00:22:10.420><c> it</c><00:22:11.110><c> didn't</c><00:22:11.380><c> exist</c><00:22:17.130><c> okay</c><00:22:18.130><c> so</c><00:22:18.190><c> those</c>

00:22:18.630 --> 00:22:18.640 align:start position:0%
express if it didn't exist okay so those
 

00:22:18.640 --> 00:22:20.340 align:start position:0%
express if it didn't exist okay so those
all<00:22:19.120><c> the</c><00:22:19.330><c> extensions</c><00:22:19.750><c> we've</c><00:22:19.929><c> been</c><00:22:20.050><c> talking</c>

00:22:20.340 --> 00:22:20.350 align:start position:0%
all the extensions we've been talking
 

00:22:20.350 --> 00:22:22.110 align:start position:0%
all the extensions we've been talking
about<00:22:20.380><c> thus</c><00:22:20.710><c> far</c><00:22:20.740><c> have</c><00:22:21.190><c> been</c><00:22:21.220><c> ones</c><00:22:21.760><c> that</c><00:22:21.970><c> are</c>

00:22:22.110 --> 00:22:22.120 align:start position:0%
about thus far have been ones that are
 

00:22:22.120 --> 00:22:26.730 align:start position:0%
about thus far have been ones that are
in<00:22:22.240><c> the</c><00:22:22.270><c> core</c><00:22:22.660><c> KTX</c><00:22:23.170><c> library</c><00:22:24.929><c> I</c><00:22:25.929><c> don't</c><00:22:26.559><c> want</c><00:22:26.679><c> to</c>

00:22:26.730 --> 00:22:26.740 align:start position:0%
in the core KTX library I don't want to
 

00:22:26.740 --> 00:22:29.190 align:start position:0%
in the core KTX library I don't want to
go<00:22:26.860><c> through</c><00:22:27.190><c> a</c><00:22:27.460><c> ton</c><00:22:27.790><c> of</c><00:22:27.820><c> the</c><00:22:28.480><c> extensions</c><00:22:29.020><c> that</c>

00:22:29.190 --> 00:22:29.200 align:start position:0%
go through a ton of the extensions that
 

00:22:29.200 --> 00:22:30.990 align:start position:0%
go through a ton of the extensions that
are<00:22:29.350><c> in</c><00:22:29.530><c> these</c><00:22:29.679><c> other</c><00:22:29.860><c> libraries</c><00:22:30.370><c> again</c><00:22:30.880><c> I'm</c>

00:22:30.990 --> 00:22:31.000 align:start position:0%
are in these other libraries again I'm
 

00:22:31.000 --> 00:22:32.340 align:start position:0%
are in these other libraries again I'm
going<00:22:31.120><c> to</c><00:22:31.179><c> show</c><00:22:31.330><c> you</c><00:22:31.390><c> how</c><00:22:31.570><c> you</c><00:22:31.630><c> can</c><00:22:31.840><c> discover</c>

00:22:32.340 --> 00:22:32.350 align:start position:0%
going to show you how you can discover
 

00:22:32.350 --> 00:22:35.480 align:start position:0%
going to show you how you can discover
them<00:22:32.620><c> in</c><00:22:32.830><c> a</c><00:22:33.010><c> bit</c><00:22:33.160><c> but</c><00:22:33.970><c> I</c><00:22:34.150><c> want</c><00:22:34.360><c> to</c><00:22:34.450><c> touch</c><00:22:34.690><c> on</c>

00:22:35.480 --> 00:22:35.490 align:start position:0%
them in a bit but I want to touch on
 

00:22:35.490 --> 00:22:43.470 align:start position:0%
them in a bit but I want to touch on
touch<00:22:36.490><c> on</c><00:22:36.640><c> one</c><00:22:40.230><c> so</c><00:22:41.230><c> for</c><00:22:41.650><c> the</c><00:22:41.679><c> fragment</c><00:22:42.580><c> KTX</c><00:22:43.090><c> we</c>

00:22:43.470 --> 00:22:43.480 align:start position:0%
touch on one so for the fragment KTX we
 

00:22:43.480 --> 00:22:46.010 align:start position:0%
touch on one so for the fragment KTX we
have<00:22:43.690><c> an</c><00:22:43.780><c> extension</c><00:22:44.170><c> which</c><00:22:44.679><c> encapsulate</c><00:22:45.610><c> s--</c>

00:22:46.010 --> 00:22:46.020 align:start position:0%
have an extension which encapsulate s--
 

00:22:46.020 --> 00:22:48.780 align:start position:0%
have an extension which encapsulate s--
transactions<00:22:47.130><c> we</c><00:22:48.130><c> move</c><00:22:48.370><c> the</c><00:22:48.550><c> begin</c>

00:22:48.780 --> 00:22:48.790 align:start position:0%
transactions we move the begin
 

00:22:48.790 --> 00:22:51.780 align:start position:0%
transactions we move the begin
transaction<00:22:49.240><c> and</c><00:22:49.750><c> the</c><00:22:49.929><c> commit</c><00:22:50.790><c> function</c>

00:22:51.780 --> 00:22:51.790 align:start position:0%
transaction and the commit function
 

00:22:51.790 --> 00:22:54.750 align:start position:0%
transaction and the commit function
calls<00:22:52.000><c> into</c><00:22:52.540><c> an</c><00:22:52.630><c> extension</c><00:22:52.990><c> we</c><00:22:53.950><c> use</c><00:22:54.220><c> the</c><00:22:54.490><c> fact</c>

00:22:54.750 --> 00:22:54.760 align:start position:0%
calls into an extension we use the fact
 

00:22:54.760 --> 00:22:58.080 align:start position:0%
calls into an extension we use the fact
that<00:22:55.200><c> we</c><00:22:56.200><c> can</c><00:22:56.350><c> use</c><00:22:56.440><c> an</c><00:22:56.590><c> inline</c><00:22:56.950><c> function</c><00:22:57.400><c> and</c><00:22:57.940><c> a</c>

00:22:58.080 --> 00:22:58.090 align:start position:0%
that we can use an inline function and a
 

00:22:58.090 --> 00:23:00.390 align:start position:0%
that we can use an inline function and a
lambda<00:22:58.480><c> again</c><00:22:58.660><c> to</c><00:22:59.290><c> turn</c><00:22:59.470><c> this</c><00:22:59.590><c> into</c><00:22:59.830><c> a</c><00:23:00.010><c> zero</c>

00:23:00.390 --> 00:23:00.400 align:start position:0%
lambda again to turn this into a zero
 

00:23:00.400 --> 00:23:03.510 align:start position:0%
lambda again to turn this into a zero
overhead<00:23:00.640><c> thing</c><00:23:01.559><c> our</c><00:23:02.559><c> calling</c><00:23:02.980><c> code</c><00:23:03.160><c> then</c>

00:23:03.510 --> 00:23:03.520 align:start position:0%
overhead thing our calling code then
 

00:23:03.520 --> 00:23:07.470 align:start position:0%
overhead thing our calling code then
becomes<00:23:03.910><c> a</c><00:23:04.030><c> little</c><00:23:04.270><c> bit</c><00:23:04.360><c> shorter</c><00:23:06.360><c> where</c><00:23:07.360><c> we</c>

00:23:07.470 --> 00:23:07.480 align:start position:0%
becomes a little bit shorter where we
 

00:23:07.480 --> 00:23:09.480 align:start position:0%
becomes a little bit shorter where we
now<00:23:07.570><c> use</c><00:23:07.809><c> the</c><00:23:07.990><c> transaction</c><00:23:08.380><c> with</c><00:23:08.770><c> a</c><00:23:08.800><c> lambda</c>

00:23:09.480 --> 00:23:09.490 align:start position:0%
now use the transaction with a lambda
 

00:23:09.490 --> 00:23:12.780 align:start position:0%
now use the transaction with a lambda
body<00:23:10.350><c> so</c><00:23:11.350><c> if</c><00:23:11.500><c> you've</c><00:23:11.679><c> used</c><00:23:11.860><c> fragments</c><00:23:12.490><c> you'll</c>

00:23:12.780 --> 00:23:12.790 align:start position:0%
body so if you've used fragments you'll
 

00:23:12.790 --> 00:23:14.820 align:start position:0%
body so if you've used fragments you'll
know<00:23:12.940><c> that</c><00:23:12.970><c> commit</c><00:23:13.750><c> is</c><00:23:13.900><c> not</c><00:23:14.110><c> the</c><00:23:14.290><c> only</c>

00:23:14.820 --> 00:23:14.830 align:start position:0%
know that commit is not the only
 

00:23:14.830 --> 00:23:17.580 align:start position:0%
know that commit is not the only
commitment<00:23:15.790><c> function</c><00:23:16.510><c> there's</c><00:23:17.140><c> actually</c>

00:23:17.580 --> 00:23:17.590 align:start position:0%
commitment function there's actually
 

00:23:17.590 --> 00:23:20.280 align:start position:0%
commitment function there's actually
more<00:23:17.740><c> than</c><00:23:17.890><c> one</c><00:23:18.070><c> and</c><00:23:18.640><c> so</c><00:23:19.450><c> we</c><00:23:19.570><c> can</c><00:23:19.720><c> model</c><00:23:20.110><c> this</c>

00:23:20.280 --> 00:23:20.290 align:start position:0%
more than one and so we can model this
 

00:23:20.290 --> 00:23:23.400 align:start position:0%
more than one and so we can model this
by<00:23:20.740><c> doing</c><00:23:21.220><c> something</c><00:23:21.429><c> like</c><00:23:21.580><c> allowing</c><00:23:22.330><c> you</c><00:23:23.260><c> to</c>

00:23:23.400 --> 00:23:23.410 align:start position:0%
by doing something like allowing you to
 

00:23:23.410 --> 00:23:25.410 align:start position:0%
by doing something like allowing you to
supply<00:23:23.679><c> a</c><00:23:23.710><c> boolean</c><00:23:24.220><c> as</c><00:23:24.429><c> to</c><00:23:25.000><c> whether</c><00:23:25.179><c> or</c><00:23:25.330><c> not</c>

00:23:25.410 --> 00:23:25.420 align:start position:0%
supply a boolean as to whether or not
 

00:23:25.420 --> 00:23:28.650 align:start position:0%
supply a boolean as to whether or not
you<00:23:25.630><c> want</c><00:23:25.840><c> to</c><00:23:25.929><c> allow</c><00:23:26.500><c> state</c><00:23:26.980><c> loss</c><00:23:27.190><c> or</c><00:23:27.660><c> disallow</c>

00:23:28.650 --> 00:23:28.660 align:start position:0%
you want to allow state loss or disallow
 

00:23:28.660 --> 00:23:31.560 align:start position:0%
you want to allow state loss or disallow
state<00:23:28.929><c> loss</c><00:23:29.140><c> when</c><00:23:29.559><c> you're</c><00:23:29.710><c> committing</c><00:23:30.570><c> this</c>

00:23:31.560 --> 00:23:31.570 align:start position:0%
state loss when you're committing this
 

00:23:31.570 --> 00:23:34.910 align:start position:0%
state loss when you're committing this
is<00:23:31.720><c> really</c><00:23:31.929><c> easy</c><00:23:32.080><c> to</c><00:23:32.200><c> accommodate</c><00:23:33.210><c> but</c><00:23:34.210><c> it</c>

00:23:34.910 --> 00:23:34.920 align:start position:0%
is really easy to accommodate but it
 

00:23:34.920 --> 00:23:36.930 align:start position:0%
is really easy to accommodate but it
sort<00:23:35.920><c> of</c><00:23:36.010><c> goes</c><00:23:36.160><c> against</c><00:23:36.460><c> something</c><00:23:36.670><c> I</c><00:23:36.880><c> said</c>

00:23:36.930 --> 00:23:36.940 align:start position:0%
sort of goes against something I said
 

00:23:36.940 --> 00:23:39.960 align:start position:0%
sort of goes against something I said
earlier<00:23:37.240><c> where</c><00:23:38.110><c> and</c><00:23:39.100><c> we</c><00:23:39.250><c> can</c><00:23:39.370><c> update</c><00:23:39.520><c> our</c><00:23:39.760><c> call</c>

00:23:39.960 --> 00:23:39.970 align:start position:0%
earlier where and we can update our call
 

00:23:39.970 --> 00:23:42.030 align:start position:0%
earlier where and we can update our call
site<00:23:40.179><c> to</c><00:23:40.330><c> be</c><00:23:40.390><c> able</c><00:23:40.480><c> to</c><00:23:40.570><c> use</c><00:23:40.720><c> this</c><00:23:40.870><c> it</c><00:23:41.710><c> sort</c><00:23:41.920><c> of</c>

00:23:42.030 --> 00:23:42.040 align:start position:0%
site to be able to use this it sort of
 

00:23:42.040 --> 00:23:43.320 align:start position:0%
site to be able to use this it sort of
goes<00:23:42.160><c> against</c><00:23:42.490><c> something</c><00:23:42.610><c> I</c><00:23:42.790><c> said</c><00:23:42.850><c> earlier</c>

00:23:43.320 --> 00:23:43.330 align:start position:0%
goes against something I said earlier
 

00:23:43.330 --> 00:23:44.970 align:start position:0%
goes against something I said earlier
though<00:23:43.570><c> where</c><00:23:43.929><c> I</c><00:23:43.960><c> talked</c><00:23:44.320><c> about</c><00:23:44.410><c> minimizing</c>

00:23:44.970 --> 00:23:44.980 align:start position:0%
though where I talked about minimizing
 

00:23:44.980 --> 00:23:48.120 align:start position:0%
though where I talked about minimizing
the<00:23:45.520><c> impact</c><00:23:46.030><c> of</c><00:23:46.270><c> the</c><00:23:46.809><c> implementation</c><00:23:47.590><c> of</c>

00:23:48.120 --> 00:23:48.130 align:start position:0%
the impact of the implementation of
 

00:23:48.130 --> 00:23:51.090 align:start position:0%
the impact of the implementation of
these<00:23:48.340><c> extensions</c><00:23:49.320><c> since</c><00:23:50.320><c> this</c><00:23:50.470><c> is</c><00:23:50.620><c> an</c><00:23:50.770><c> inline</c>

00:23:51.090 --> 00:23:51.100 align:start position:0%
these extensions since this is an inline
 

00:23:51.100 --> 00:23:53.160 align:start position:0%
these extensions since this is an inline
function<00:23:51.309><c> and</c><00:23:51.790><c> then</c><00:23:52.690><c> we've</c><00:23:52.809><c> now</c><00:23:52.929><c> put</c><00:23:53.140><c> a</c>

00:23:53.160 --> 00:23:53.170 align:start position:0%
function and then we've now put a
 

00:23:53.170 --> 00:23:55.560 align:start position:0%
function and then we've now put a
conditional<00:23:53.920><c> inside</c><00:23:54.640><c> that</c><00:23:54.820><c> inline</c><00:23:55.120><c> function</c>

00:23:55.560 --> 00:23:55.570 align:start position:0%
conditional inside that inline function
 

00:23:55.570 --> 00:23:57.870 align:start position:0%
conditional inside that inline function
but<00:23:56.290><c> conditional</c><00:23:56.830><c> is</c><00:23:56.950><c> being</c><00:23:57.160><c> inlined</c>

00:23:57.870 --> 00:23:57.880 align:start position:0%
but conditional is being inlined
 

00:23:57.880 --> 00:24:00.660 align:start position:0%
but conditional is being inlined
into<00:23:58.390><c> all</c><00:23:58.570><c> the</c><00:23:58.809><c> call</c><00:23:58.990><c> sites</c><00:23:59.260><c> and</c><00:23:59.590><c> so</c><00:24:00.429><c> all</c><00:24:00.580><c> the</c>

00:24:00.660 --> 00:24:00.670 align:start position:0%
into all the call sites and so all the
 

00:24:00.670 --> 00:24:02.430 align:start position:0%
into all the call sites and so all the
call<00:24:00.880><c> sites</c><00:24:01.120><c> now</c><00:24:01.330><c> have</c><00:24:01.570><c> to</c><00:24:01.720><c> have</c>

00:24:02.430 --> 00:24:02.440 align:start position:0%
call sites now have to have
 

00:24:02.440 --> 00:24:05.220 align:start position:0%
call sites now have to have
additional<00:24:02.830><c> inside</c><00:24:03.129><c> of</c><00:24:03.279><c> them</c><00:24:03.960><c> so</c><00:24:04.960><c> is</c><00:24:05.110><c> this</c>

00:24:05.220 --> 00:24:05.230 align:start position:0%
additional inside of them so is this
 

00:24:05.230 --> 00:24:09.659 align:start position:0%
additional inside of them so is this
actually<00:24:05.620><c> a</c><00:24:05.889><c> bad</c><00:24:06.220><c> thing</c><00:24:08.250><c> well</c><00:24:09.250><c> if</c><00:24:09.370><c> we</c><00:24:09.429><c> look</c><00:24:09.549><c> at</c>

00:24:09.659 --> 00:24:09.669 align:start position:0%
actually a bad thing well if we look at
 

00:24:09.669 --> 00:24:11.639 align:start position:0%
actually a bad thing well if we look at
the<00:24:09.759><c> bytecode</c><00:24:09.940><c> that</c><00:24:10.629><c> gets</c><00:24:10.809><c> generated</c><00:24:10.870><c> from</c>

00:24:11.639 --> 00:24:11.649 align:start position:0%
the bytecode that gets generated from
 

00:24:11.649 --> 00:24:14.430 align:start position:0%
the bytecode that gets generated from
the<00:24:11.889><c> call</c><00:24:12.070><c> site</c><00:24:12.309><c> when</c><00:24:13.090><c> we</c><00:24:13.210><c> specify</c><00:24:13.960><c> allow</c>

00:24:14.430 --> 00:24:14.440 align:start position:0%
the call site when we specify allow
 

00:24:14.440 --> 00:24:17.100 align:start position:0%
the call site when we specify allow
state<00:24:14.740><c> loss</c><00:24:14.919><c> true</c><00:24:15.600><c> you</c><00:24:16.600><c> don't</c><00:24:16.690><c> really</c><00:24:16.899><c> have</c><00:24:16.990><c> to</c>

00:24:17.100 --> 00:24:17.110 align:start position:0%
state loss true you don't really have to
 

00:24:17.110 --> 00:24:18.810 align:start position:0%
state loss true you don't really have to
understand<00:24:17.500><c> byte</c><00:24:17.740><c> code</c><00:24:17.950><c> to</c><00:24:18.340><c> understand</c>

00:24:18.810 --> 00:24:18.820 align:start position:0%
understand byte code to understand
 

00:24:18.820 --> 00:24:20.340 align:start position:0%
understand byte code to understand
what's<00:24:18.940><c> going</c><00:24:19.149><c> on</c><00:24:19.269><c> here</c><00:24:19.509><c> there's</c><00:24:20.049><c> essentially</c>

00:24:20.340 --> 00:24:20.350 align:start position:0%
what's going on here there's essentially
 

00:24:20.350 --> 00:24:21.659 align:start position:0%
what's going on here there's essentially
three<00:24:20.500><c> function</c><00:24:21.190><c> calls</c>

00:24:21.659 --> 00:24:21.669 align:start position:0%
three function calls
 

00:24:21.669 --> 00:24:24.240 align:start position:0%
three function calls
the<00:24:22.149><c> first</c><00:24:22.360><c> one</c><00:24:22.539><c> is</c><00:24:22.659><c> begin</c><00:24:22.929><c> transaction</c><00:24:23.379><c> the</c>

00:24:24.240 --> 00:24:24.250 align:start position:0%
the first one is begin transaction the
 

00:24:24.250 --> 00:24:26.789 align:start position:0%
the first one is begin transaction the
second<00:24:24.580><c> one</c><00:24:24.669><c> is</c><00:24:24.820><c> that</c><00:24:24.940><c> replace</c><00:24:25.649><c> which</c><00:24:26.649><c> was</c>

00:24:26.789 --> 00:24:26.799 align:start position:0%
second one is that replace which was
 

00:24:26.799 --> 00:24:28.950 align:start position:0%
second one is that replace which was
inside<00:24:27.070><c> the</c><00:24:27.220><c> lambda</c><00:24:27.610><c> and</c><00:24:27.820><c> the</c><00:24:28.330><c> third</c><00:24:28.509><c> one</c><00:24:28.720><c> is</c>

00:24:28.950 --> 00:24:28.960 align:start position:0%
inside the lambda and the third one is
 

00:24:28.960 --> 00:24:31.759 align:start position:0%
inside the lambda and the third one is
just<00:24:29.379><c> a</c><00:24:29.710><c> call</c><00:24:30.100><c> to</c><00:24:30.279><c> commit</c><00:24:30.580><c> allowing</c><00:24:31.059><c> stay</c><00:24:31.330><c> loss</c>

00:24:31.759 --> 00:24:31.769 align:start position:0%
just a call to commit allowing stay loss
 

00:24:31.769 --> 00:24:35.039 align:start position:0%
just a call to commit allowing stay loss
there's<00:24:32.769><c> no</c><00:24:33.179><c> if</c><00:24:34.179><c> statement</c><00:24:34.750><c> here</c>

00:24:35.039 --> 00:24:35.049 align:start position:0%
there's no if statement here
 

00:24:35.049 --> 00:24:39.029 align:start position:0%
there's no if statement here
there's<00:24:35.259><c> no</c><00:24:35.470><c> conditional</c><00:24:37.889><c> and</c><00:24:38.889><c> that's</c>

00:24:39.029 --> 00:24:39.039 align:start position:0%
there's no conditional and that's
 

00:24:39.039 --> 00:24:41.580 align:start position:0%
there's no conditional and that's
because<00:24:39.480><c> since</c><00:24:40.480><c> this</c><00:24:40.570><c> is</c><00:24:40.720><c> an</c><00:24:40.870><c> inline</c><00:24:41.139><c> function</c>

00:24:41.580 --> 00:24:41.590 align:start position:0%
because since this is an inline function
 

00:24:41.590 --> 00:24:44.700 align:start position:0%
because since this is an inline function
and<00:24:41.830><c> since</c><00:24:42.100><c> the</c><00:24:42.460><c> argument</c><00:24:43.090><c> is</c><00:24:43.179><c> a</c><00:24:43.210><c> boolean</c><00:24:43.720><c> the</c>

00:24:44.700 --> 00:24:44.710 align:start position:0%
and since the argument is a boolean the
 

00:24:44.710 --> 00:24:47.129 align:start position:0%
and since the argument is a boolean the
compiler<00:24:45.279><c> actually</c><00:24:45.429><c> knows</c><00:24:45.909><c> at</c><00:24:46.450><c> compile</c><00:24:47.110><c> time</c>

00:24:47.129 --> 00:24:47.139 align:start position:0%
compiler actually knows at compile time
 

00:24:47.139 --> 00:24:51.960 align:start position:0%
compiler actually knows at compile time
what<00:24:47.950><c> value</c><00:24:48.399><c> you're</c><00:24:48.669><c> supplying</c><00:24:49.149><c> and</c><00:24:50.669><c> so</c><00:24:51.669><c> since</c>

00:24:51.960 --> 00:24:51.970 align:start position:0%
what value you're supplying and so since
 

00:24:51.970 --> 00:24:53.759 align:start position:0%
what value you're supplying and so since
it<00:24:52.120><c> knows</c><00:24:52.299><c> a</c><00:24:52.330><c> compile</c><00:24:52.870><c> time</c><00:24:52.899><c> it</c><00:24:53.409><c> can</c><00:24:53.620><c> actually</c>

00:24:53.759 --> 00:24:53.769 align:start position:0%
it knows a compile time it can actually
 

00:24:53.769 --> 00:24:55.799 align:start position:0%
it knows a compile time it can actually
do<00:24:54.009><c> dead</c><00:24:54.250><c> code</c><00:24:54.519><c> elimination</c><00:24:54.549><c> and</c><00:24:55.389><c> eliminate</c>

00:24:55.799 --> 00:24:55.809 align:start position:0%
do dead code elimination and eliminate
 

00:24:55.809 --> 00:24:58.320 align:start position:0%
do dead code elimination and eliminate
the<00:24:55.960><c> branches</c><00:24:56.409><c> that</c><00:24:56.799><c> can</c><00:24:57.070><c> never</c><00:24:57.639><c> possibly</c><00:24:58.149><c> be</c>

00:24:58.320 --> 00:24:58.330 align:start position:0%
the branches that can never possibly be
 

00:24:58.330 --> 00:25:02.549 align:start position:0%
the branches that can never possibly be
executed<00:24:59.019><c> and</c><00:24:59.309><c> so</c><00:25:00.309><c> you</c><00:25:00.370><c> actually</c><00:25:00.789><c> get</c><00:25:01.559><c> in</c>

00:25:02.549 --> 00:25:02.559 align:start position:0%
executed and so you actually get in
 

00:25:02.559 --> 00:25:04.499 align:start position:0%
executed and so you actually get in
bytecode<00:25:03.279><c> what's</c><00:25:03.700><c> equivalent</c><00:25:04.149><c> to</c><00:25:04.299><c> what</c><00:25:04.419><c> you</c>

00:25:04.499 --> 00:25:04.509 align:start position:0%
bytecode what's equivalent to what you
 

00:25:04.509 --> 00:25:08.279 align:start position:0%
bytecode what's equivalent to what you
otherwise<00:25:04.919><c> whatever</c><00:25:05.919><c> written</c><00:25:07.289><c> there's</c>

00:25:08.279 --> 00:25:08.289 align:start position:0%
otherwise whatever written there's
 

00:25:08.289 --> 00:25:11.490 align:start position:0%
otherwise whatever written there's
actually<00:25:08.559><c> more</c><00:25:08.769><c> commit</c><00:25:09.840><c> functions</c><00:25:10.840><c> there's</c>

00:25:11.490 --> 00:25:11.500 align:start position:0%
actually more commit functions there's
 

00:25:11.500 --> 00:25:12.990 align:start position:0%
actually more commit functions there's
one<00:25:11.769><c> which</c><00:25:11.950><c> allow</c><00:25:12.159><c> you</c><00:25:12.220><c> to</c><00:25:12.340><c> commit</c><00:25:12.580><c> now</c><00:25:12.759><c> and</c>

00:25:12.990 --> 00:25:13.000 align:start position:0%
one which allow you to commit now and
 

00:25:13.000 --> 00:25:14.580 align:start position:0%
one which allow you to commit now and
commit<00:25:13.210><c> so</c><00:25:13.389><c> we</c><00:25:13.419><c> can</c><00:25:13.629><c> also</c><00:25:13.750><c> support</c><00:25:14.139><c> that</c><00:25:14.230><c> by</c>

00:25:14.580 --> 00:25:14.590 align:start position:0%
commit so we can also support that by
 

00:25:14.590 --> 00:25:17.249 align:start position:0%
commit so we can also support that by
adding<00:25:14.919><c> an</c><00:25:15.309><c> additional</c><00:25:15.820><c> boolean</c><00:25:16.389><c> the</c><00:25:16.600><c> same</c>

00:25:17.249 --> 00:25:17.259 align:start position:0%
adding an additional boolean the same
 

00:25:17.259 --> 00:25:18.659 align:start position:0%
adding an additional boolean the same
thing<00:25:17.440><c> happens</c><00:25:17.769><c> here</c><00:25:17.830><c> even</c><00:25:18.370><c> though</c><00:25:18.460><c> they</c><00:25:18.610><c> are</c>

00:25:18.659 --> 00:25:18.669 align:start position:0%
thing happens here even though they are
 

00:25:18.669 --> 00:25:20.909 align:start position:0%
thing happens here even though they are
now<00:25:18.789><c> nested</c><00:25:19.240><c> dead</c><00:25:19.870><c> code</c><00:25:20.110><c> elimination</c><00:25:20.139><c> will</c>

00:25:20.909 --> 00:25:20.919 align:start position:0%
now nested dead code elimination will
 

00:25:20.919 --> 00:25:22.590 align:start position:0%
now nested dead code elimination will
make<00:25:21.070><c> it</c><00:25:21.220><c> so</c><00:25:21.429><c> that</c><00:25:21.610><c> there</c><00:25:21.820><c> is</c><00:25:22.029><c> only</c><00:25:22.299><c> one</c>

00:25:22.590 --> 00:25:22.600 align:start position:0%
make it so that there is only one
 

00:25:22.600 --> 00:25:27.440 align:start position:0%
make it so that there is only one
function<00:25:22.990><c> call</c><00:25:23.350><c> in</c><00:25:23.559><c> the</c><00:25:23.740><c> resulting</c><00:25:24.100><c> bytecode</c>

00:25:27.440 --> 00:25:27.450 align:start position:0%
 
 

00:25:27.450 --> 00:25:33.119 align:start position:0%
 
okay<00:25:29.490><c> as</c><00:25:30.490><c> part</c><00:25:30.820><c> of</c><00:25:30.909><c> the</c><00:25:31.600><c> this</c><00:25:32.379><c> effort</c><00:25:32.769><c> of</c><00:25:32.950><c> all</c>

00:25:33.119 --> 00:25:33.129 align:start position:0%
okay as part of the this effort of all
 

00:25:33.129 --> 00:25:35.310 align:start position:0%
okay as part of the this effort of all
these<00:25:33.340><c> releases</c><00:25:33.789><c> at</c><00:25:33.970><c> i/o</c><00:25:34.120><c> one</c><00:25:34.960><c> of</c><00:25:35.049><c> the</c><00:25:35.110><c> things</c>

00:25:35.310 --> 00:25:35.320 align:start position:0%
these releases at i/o one of the things
 

00:25:35.320 --> 00:25:38.090 align:start position:0%
these releases at i/o one of the things
that<00:25:35.529><c> we've</c><00:25:35.649><c> done</c><00:25:35.679><c> is</c><00:25:36.190><c> start</c><00:25:37.149><c> creating</c><00:25:37.600><c> a</c>

00:25:38.090 --> 00:25:38.100 align:start position:0%
that we've done is start creating a
 

00:25:38.100 --> 00:25:42.210 align:start position:0%
that we've done is start creating a
Collins<00:25:39.100><c> specific</c><00:25:39.789><c> view</c><00:25:40.330><c> of</c><00:25:40.740><c> the</c><00:25:41.740><c> libraries</c>

00:25:42.210 --> 00:25:42.220 align:start position:0%
Collins specific view of the libraries
 

00:25:42.220 --> 00:25:43.649 align:start position:0%
Collins specific view of the libraries
that<00:25:42.250><c> we</c><00:25:42.490><c> publish</c><00:25:42.850><c> and</c><00:25:43.120><c> the</c><00:25:43.269><c> android</c>

00:25:43.649 --> 00:25:43.659 align:start position:0%
that we publish and the android
 

00:25:43.659 --> 00:25:46.860 align:start position:0%
that we publish and the android
framework<00:25:43.840><c> itself</c><00:25:45.029><c> so</c><00:25:46.029><c> if</c><00:25:46.120><c> you</c><00:25:46.210><c> see</c><00:25:46.720><c> in</c><00:25:46.809><c> that</c>

00:25:46.860 --> 00:25:46.870 align:start position:0%
framework itself so if you see in that
 

00:25:46.870 --> 00:25:48.480 align:start position:0%
framework itself so if you see in that
blue<00:25:47.139><c> box</c><00:25:47.320><c> there</c><00:25:47.649><c> when</c><00:25:47.950><c> you</c><00:25:48.070><c> visit</c><00:25:48.370><c> the</c>

00:25:48.480 --> 00:25:48.490 align:start position:0%
blue box there when you visit the
 

00:25:48.490 --> 00:25:51.330 align:start position:0%
blue box there when you visit the
reference<00:25:48.879><c> reference</c><00:25:49.720><c> Docs</c><00:25:50.190><c> it'll</c><00:25:51.190><c> actually</c>

00:25:51.330 --> 00:25:51.340 align:start position:0%
reference reference Docs it'll actually
 

00:25:51.340 --> 00:25:54.389 align:start position:0%
reference reference Docs it'll actually
show<00:25:52.120><c> you</c><00:25:52.179><c> that</c><00:25:52.360><c> it</c><00:25:53.230><c> I</c><00:25:53.559><c> don't</c><00:25:53.860><c> ask</c><00:25:53.980><c> you</c><00:25:54.129><c> if</c><00:25:54.309><c> you</c>

00:25:54.389 --> 00:25:54.399 align:start position:0%
show you that it I don't ask you if you
 

00:25:54.399 --> 00:25:55.889 align:start position:0%
show you that it I don't ask you if you
want<00:25:54.549><c> to</c><00:25:54.580><c> view</c><00:25:54.700><c> a</c><00:25:54.759><c> Collins</c><00:25:55.210><c> specific</c><00:25:55.570><c> version</c>

00:25:55.889 --> 00:25:55.899 align:start position:0%
want to view a Collins specific version
 

00:25:55.899 --> 00:25:57.720 align:start position:0%
want to view a Collins specific version
of<00:25:55.990><c> the</c><00:25:56.049><c> platform</c><00:25:56.590><c> or</c><00:25:56.769><c> Android</c><00:25:57.129><c> X</c><00:25:57.279><c> libraries</c>

00:25:57.720 --> 00:25:57.730 align:start position:0%
of the platform or Android X libraries
 

00:25:57.730 --> 00:26:00.180 align:start position:0%
of the platform or Android X libraries
and<00:25:58.029><c> also</c><00:25:58.690><c> if</c><00:25:58.899><c> you</c><00:25:59.019><c> scroll</c><00:25:59.440><c> down</c><00:25:59.500><c> and</c><00:26:00.100><c> that</c>

00:26:00.180 --> 00:26:00.190 align:start position:0%
and also if you scroll down and that
 

00:26:00.190 --> 00:26:02.730 align:start position:0%
and also if you scroll down and that
left<00:26:00.460><c> navigation</c><00:26:00.879><c> pane</c><00:26:01.450><c> at</c><00:26:02.230><c> the</c><00:26:02.379><c> very</c><00:26:02.590><c> bottom</c>

00:26:02.730 --> 00:26:02.740 align:start position:0%
left navigation pane at the very bottom
 

00:26:02.740 --> 00:26:06.389 align:start position:0%
left navigation pane at the very bottom
we<00:26:03.429><c> have</c><00:26:03.610><c> links</c><00:26:04.539><c> to</c><00:26:04.690><c> them</c><00:26:04.840><c> as</c><00:26:04.990><c> well</c><00:26:05.169><c> and</c><00:26:06.159><c> what</c>

00:26:06.389 --> 00:26:06.399 align:start position:0%
we have links to them as well and what
 

00:26:06.399 --> 00:26:08.960 align:start position:0%
we have links to them as well and what
these<00:26:06.519><c> are</c><00:26:06.580><c> are</c>

00:26:08.960 --> 00:26:08.970 align:start position:0%
these are are
 

00:26:08.970 --> 00:26:12.020 align:start position:0%
these are are
a<00:26:09.030><c> Colin</c><00:26:09.870><c> view</c><00:26:10.380><c> of</c><00:26:10.710><c> these</c><00:26:10.980><c> libraries</c><00:26:11.610><c> and</c><00:26:11.880><c> so</c>

00:26:12.020 --> 00:26:12.030 align:start position:0%
a Colin view of these libraries and so
 

00:26:12.030 --> 00:26:14.899 align:start position:0%
a Colin view of these libraries and so
when<00:26:12.179><c> you're</c><00:26:12.330><c> browsing</c><00:26:12.630><c> through</c><00:26:13.559><c> say</c><00:26:14.549><c> the</c>

00:26:14.899 --> 00:26:14.909 align:start position:0%
when you're browsing through say the
 

00:26:14.909 --> 00:26:17.120 align:start position:0%
when you're browsing through say the
fragment<00:26:15.360><c> package</c><00:26:15.720><c> you'll</c><00:26:16.440><c> be</c><00:26:16.590><c> able</c><00:26:16.679><c> to</c><00:26:16.830><c> see</c>

00:26:17.120 --> 00:26:17.130 align:start position:0%
fragment package you'll be able to see
 

00:26:17.130 --> 00:26:20.360 align:start position:0%
fragment package you'll be able to see
the<00:26:17.370><c> extensions</c><00:26:18.000><c> for</c><00:26:18.570><c> fragment</c><00:26:19.350><c> inside</c><00:26:20.130><c> the</c>

00:26:20.360 --> 00:26:20.370 align:start position:0%
the extensions for fragment inside the
 

00:26:20.370 --> 00:26:22.279 align:start position:0%
the extensions for fragment inside the
documentation<00:26:21.090><c> it's</c><00:26:21.360><c> no</c><00:26:21.510><c> longer</c><00:26:21.870><c> completely</c>

00:26:22.279 --> 00:26:22.289 align:start position:0%
documentation it's no longer completely
 

00:26:22.289 --> 00:26:24.710 align:start position:0%
documentation it's no longer completely
separate<00:26:23.000><c> one</c><00:26:24.000><c> thing</c><00:26:24.150><c> that's</c><00:26:24.330><c> missing</c><00:26:24.510><c> right</c>

00:26:24.710 --> 00:26:24.720 align:start position:0%
separate one thing that's missing right
 

00:26:24.720 --> 00:26:26.779 align:start position:0%
separate one thing that's missing right
now<00:26:25.049><c> is</c><00:26:25.409><c> that</c><00:26:25.620><c> we</c><00:26:25.770><c> we</c><00:26:26.100><c> don't</c><00:26:26.280><c> actually</c><00:26:26.460><c> tell</c>

00:26:26.779 --> 00:26:26.789 align:start position:0%
now is that we we don't actually tell
 

00:26:26.789 --> 00:26:29.180 align:start position:0%
now is that we we don't actually tell
you<00:26:26.880><c> the</c><00:26:27.090><c> Maven</c><00:26:27.450><c> coordinates</c><00:26:27.990><c> of</c><00:26:28.320><c> the</c><00:26:28.830><c> the</c>

00:26:29.180 --> 00:26:29.190 align:start position:0%
you the Maven coordinates of the the
 

00:26:29.190 --> 00:26:31.159 align:start position:0%
you the Maven coordinates of the the
artifact<00:26:29.610><c> that</c><00:26:29.789><c> these</c><00:26:29.940><c> come</c><00:26:30.150><c> from</c><00:26:30.179><c> that's</c>

00:26:31.159 --> 00:26:31.169 align:start position:0%
artifact that these come from that's
 

00:26:31.169 --> 00:26:34.430 align:start position:0%
artifact that these come from that's
coming<00:26:31.470><c> soon</c><00:26:31.700><c> and</c><00:26:32.700><c> also</c><00:26:32.940><c> the</c><00:26:33.330><c> extensions</c><00:26:34.169><c> in</c>

00:26:34.430 --> 00:26:34.440 align:start position:0%
coming soon and also the extensions in
 

00:26:34.440 --> 00:26:35.390 align:start position:0%
coming soon and also the extensions in
core<00:26:34.740><c> KTX</c>

00:26:35.390 --> 00:26:35.400 align:start position:0%
core KTX
 

00:26:35.400 --> 00:26:39.080 align:start position:0%
core KTX
which<00:26:35.640><c> extends</c><00:26:36.270><c> the</c><00:26:36.679><c> platform</c><00:26:37.679><c> types</c><00:26:38.090><c> don't</c>

00:26:39.080 --> 00:26:39.090 align:start position:0%
which extends the platform types don't
 

00:26:39.090 --> 00:26:41.450 align:start position:0%
which extends the platform types don't
yet<00:26:39.419><c> show</c><00:26:39.659><c> up</c><00:26:39.840><c> on</c><00:26:40.110><c> the</c><00:26:40.530><c> platform</c><00:26:40.740><c> Doc's</c><00:26:41.039><c> but</c>

00:26:41.450 --> 00:26:41.460 align:start position:0%
yet show up on the platform Doc's but
 

00:26:41.460 --> 00:26:43.460 align:start position:0%
yet show up on the platform Doc's but
this<00:26:41.730><c> is</c><00:26:41.880><c> something</c><00:26:42.179><c> that</c><00:26:42.900><c> we</c><00:26:43.020><c> wanted</c><00:26:43.260><c> to</c><00:26:43.380><c> get</c>

00:26:43.460 --> 00:26:43.470 align:start position:0%
this is something that we wanted to get
 

00:26:43.470 --> 00:26:45.320 align:start position:0%
this is something that we wanted to get
out<00:26:43.650><c> to</c><00:26:44.340><c> show</c><00:26:44.610><c> you</c><00:26:44.669><c> that</c><00:26:44.880><c> it's</c><00:26:45.000><c> being</c><00:26:45.150><c> worked</c>

00:26:45.320 --> 00:26:45.330 align:start position:0%
out to show you that it's being worked
 

00:26:45.330 --> 00:26:48.770 align:start position:0%
out to show you that it's being worked
on<00:26:45.539><c> and</c><00:26:46.280><c> so</c><00:26:47.280><c> hopefully</c><00:26:47.580><c> those</c><00:26:48.390><c> two</c><00:26:48.600><c> things</c>

00:26:48.770 --> 00:26:48.780 align:start position:0%
on and so hopefully those two things
 

00:26:48.780 --> 00:26:54.620 align:start position:0%
on and so hopefully those two things
will<00:26:49.020><c> be</c><00:26:49.140><c> coming</c><00:26:49.289><c> soon</c><00:26:53.210><c> all</c><00:26:54.210><c> right</c><00:26:54.330><c> I</c><00:26:54.419><c> want</c><00:26:54.570><c> to</c>

00:26:54.620 --> 00:26:54.630 align:start position:0%
will be coming soon all right I want to
 

00:26:54.630 --> 00:26:57.260 align:start position:0%
will be coming soon all right I want to
touch<00:26:54.840><c> on</c><00:26:55.549><c> you</c><00:26:56.549><c> know</c><00:26:56.610><c> I'm</c><00:26:56.700><c> here</c><00:26:56.820><c> to</c><00:26:56.850><c> talk</c><00:26:57.030><c> about</c>

00:26:57.260 --> 00:26:57.270 align:start position:0%
touch on you know I'm here to talk about
 

00:26:57.270 --> 00:27:00.230 align:start position:0%
touch on you know I'm here to talk about
Android<00:26:57.600><c> KTX</c><00:26:58.169><c> but</c><00:26:58.500><c> callin</c><00:26:59.340><c> extensions</c>

00:27:00.230 --> 00:27:00.240 align:start position:0%
Android KTX but callin extensions
 

00:27:00.240 --> 00:27:02.090 align:start position:0%
Android KTX but callin extensions
there's<00:27:00.630><c> nothing</c><00:27:01.020><c> Android</c><00:27:01.380><c> specific</c><00:27:01.830><c> about</c>

00:27:02.090 --> 00:27:02.100 align:start position:0%
there's nothing Android specific about
 

00:27:02.100 --> 00:27:06.260 align:start position:0%
there's nothing Android specific about
it<00:27:03.169><c> what</c><00:27:04.169><c> we're</c><00:27:04.320><c> doing</c><00:27:04.650><c> is</c><00:27:05.270><c> building</c>

00:27:06.260 --> 00:27:06.270 align:start position:0%
it what we're doing is building
 

00:27:06.270 --> 00:27:08.690 align:start position:0%
it what we're doing is building
extensions<00:27:06.840><c> to</c><00:27:07.200><c> try</c><00:27:07.440><c> and</c><00:27:07.620><c> make</c><00:27:07.799><c> these</c>

00:27:08.690 --> 00:27:08.700 align:start position:0%
extensions to try and make these
 

00:27:08.700 --> 00:27:10.610 align:start position:0%
extensions to try and make these
libraries<00:27:09.179><c> more</c><00:27:09.330><c> Kotlin</c><00:27:09.750><c> friendly</c><00:27:10.110><c> and</c>

00:27:10.610 --> 00:27:10.620 align:start position:0%
libraries more Kotlin friendly and
 

00:27:10.620 --> 00:27:12.680 align:start position:0%
libraries more Kotlin friendly and
that's<00:27:10.740><c> something</c><00:27:10.980><c> that</c><00:27:11.159><c> any</c><00:27:11.669><c> library</c><00:27:12.330><c> can</c><00:27:12.510><c> do</c>

00:27:12.680 --> 00:27:12.690 align:start position:0%
that's something that any library can do
 

00:27:12.690 --> 00:27:15.350 align:start position:0%
that's something that any library can do
and<00:27:13.140><c> so</c><00:27:14.010><c> I</c><00:27:14.039><c> want</c><00:27:14.280><c> to</c><00:27:14.309><c> talk</c><00:27:14.490><c> about</c><00:27:14.669><c> the</c><00:27:15.179><c> ways</c>

00:27:15.350 --> 00:27:15.360 align:start position:0%
and so I want to talk about the ways
 

00:27:15.360 --> 00:27:18.110 align:start position:0%
and so I want to talk about the ways
that<00:27:15.860><c> we</c><00:27:16.860><c> think</c><00:27:16.890><c> about</c><00:27:17.370><c> how</c><00:27:17.549><c> we</c><00:27:17.610><c> can</c><00:27:17.940><c> make</c>

00:27:18.110 --> 00:27:18.120 align:start position:0%
that we think about how we can make
 

00:27:18.120 --> 00:27:19.789 align:start position:0%
that we think about how we can make
libraries<00:27:18.750><c> more</c><00:27:18.929><c> Kotlin</c><00:27:19.289><c> friendly</c><00:27:19.590><c> that</c>

00:27:19.789 --> 00:27:19.799 align:start position:0%
libraries more Kotlin friendly that
 

00:27:19.799 --> 00:27:21.440 align:start position:0%
libraries more Kotlin friendly that
applied<00:27:20.100><c> to</c><00:27:20.130><c> both</c><00:27:20.429><c> the</c><00:27:20.700><c> Android</c><00:27:20.970><c> libraries</c>

00:27:21.440 --> 00:27:21.450 align:start position:0%
applied to both the Android libraries
 

00:27:21.450 --> 00:27:23.090 align:start position:0%
applied to both the Android libraries
but<00:27:21.690><c> also</c><00:27:21.809><c> applied</c><00:27:22.110><c> to</c><00:27:22.140><c> libraries</c><00:27:22.740><c> that</c><00:27:22.890><c> you</c>

00:27:23.090 --> 00:27:23.100 align:start position:0%
but also applied to libraries that you
 

00:27:23.100 --> 00:27:27.520 align:start position:0%
but also applied to libraries that you
might<00:27:23.280><c> be</c><00:27:23.370><c> writing</c><00:27:23.580><c> or</c><00:27:24.000><c> you</c><00:27:24.240><c> might</c><00:27:24.390><c> be</c><00:27:24.480><c> using</c>

00:27:27.520 --> 00:27:27.530 align:start position:0%
 
 

00:27:27.530 --> 00:27:30.230 align:start position:0%
 
the<00:27:28.530><c> first</c><00:27:28.740><c> way</c><00:27:28.919><c> to</c><00:27:28.980><c> make</c><00:27:29.340><c> a</c><00:27:29.520><c> library</c><00:27:29.700><c> really</c>

00:27:30.230 --> 00:27:30.240 align:start position:0%
the first way to make a library really
 

00:27:30.240 --> 00:27:32.419 align:start position:0%
the first way to make a library really
column<00:27:30.690><c> friendly</c><00:27:31.020><c> is</c><00:27:31.200><c> just</c><00:27:31.470><c> rewrite</c><00:27:32.309><c> the</c>

00:27:32.419 --> 00:27:32.429 align:start position:0%
column friendly is just rewrite the
 

00:27:32.429 --> 00:27:34.669 align:start position:0%
column friendly is just rewrite the
whole<00:27:32.549><c> thing</c><00:27:32.610><c> in</c><00:27:32.880><c> Kotlin</c><00:27:33.270><c> I</c><00:27:33.480><c> mean</c><00:27:33.960><c> obviously</c>

00:27:34.669 --> 00:27:34.679 align:start position:0%
whole thing in Kotlin I mean obviously
 

00:27:34.679 --> 00:27:36.980 align:start position:0%
whole thing in Kotlin I mean obviously
this<00:27:35.280><c> isn't</c><00:27:35.460><c> feasible</c><00:27:35.850><c> for</c><00:27:36.330><c> every</c><00:27:36.570><c> library</c>

00:27:36.980 --> 00:27:36.990 align:start position:0%
this isn't feasible for every library
 

00:27:36.990 --> 00:27:40.039 align:start position:0%
this isn't feasible for every library
but<00:27:37.770><c> it's</c><00:27:37.919><c> certainly</c><00:27:38.190><c> an</c><00:27:38.340><c> option</c><00:27:38.520><c> for</c><00:27:39.000><c> some</c><00:27:39.419><c> if</c>

00:27:40.039 --> 00:27:40.049 align:start position:0%
but it's certainly an option for some if
 

00:27:40.049 --> 00:27:42.289 align:start position:0%
but it's certainly an option for some if
it's<00:27:40.230><c> a</c><00:27:40.289><c> library</c><00:27:40.500><c> that's</c><00:27:40.830><c> private</c><00:27:41.789><c> to</c><00:27:42.059><c> your</c>

00:27:42.289 --> 00:27:42.299 align:start position:0%
it's a library that's private to your
 

00:27:42.299 --> 00:27:44.779 align:start position:0%
it's a library that's private to your
app<00:27:42.720><c> it's</c><00:27:43.200><c> in</c><00:27:43.440><c> your</c><00:27:43.590><c> repository</c><00:27:43.860><c> or</c><00:27:44.429><c> its</c>

00:27:44.779 --> 00:27:44.789 align:start position:0%
app it's in your repository or its
 

00:27:44.789 --> 00:27:47.779 align:start position:0%
app it's in your repository or its
internal<00:27:45.330><c> to</c><00:27:45.480><c> your</c><00:27:45.600><c> company</c><00:27:46.049><c> and</c><00:27:46.890><c> you're</c>

00:27:47.779 --> 00:27:47.789 align:start position:0%
internal to your company and you're
 

00:27:47.789 --> 00:27:50.210 align:start position:0%
internal to your company and you're
already<00:27:47.970><c> using</c><00:27:48.210><c> Kotlin</c><00:27:48.770><c> this</c><00:27:49.770><c> is</c><00:27:49.919><c> a</c><00:27:49.950><c> viable</c>

00:27:50.210 --> 00:27:50.220 align:start position:0%
already using Kotlin this is a viable
 

00:27:50.220 --> 00:27:53.180 align:start position:0%
already using Kotlin this is a viable
option<00:27:51.440><c> doesn't</c><00:27:52.440><c> seem</c><00:27:52.620><c> like</c><00:27:52.830><c> something</c>

00:27:53.180 --> 00:27:53.190 align:start position:0%
option doesn't seem like something
 

00:27:53.190 --> 00:27:54.860 align:start position:0%
option doesn't seem like something
that's<00:27:53.400><c> totally</c><00:27:53.640><c> viable</c><00:27:54.210><c> for</c><00:27:54.510><c> say</c><00:27:54.840><c> the</c>

00:27:54.860 --> 00:27:54.870 align:start position:0%
that's totally viable for say the
 

00:27:54.870 --> 00:27:57.830 align:start position:0%
that's totally viable for say the
android<00:27:55.350><c> framework</c><00:27:55.380><c> and</c><00:27:56.240><c> I'm</c><00:27:57.240><c> not</c><00:27:57.480><c> quite</c><00:27:57.809><c> sure</c>

00:27:57.830 --> 00:27:57.840 align:start position:0%
android framework and I'm not quite sure
 

00:27:57.840 --> 00:28:00.230 align:start position:0%
android framework and I'm not quite sure
we're<00:27:58.289><c> at</c><00:27:58.380><c> the</c><00:27:58.500><c> stage</c><00:27:58.740><c> where</c><00:27:59.130><c> an</c><00:27:59.520><c> Android</c><00:28:00.059><c> X</c>

00:28:00.230 --> 00:28:00.240 align:start position:0%
we're at the stage where an Android X
 

00:28:00.240 --> 00:28:02.690 align:start position:0%
we're at the stage where an Android X
library<00:28:00.690><c> could</c><00:28:00.929><c> do</c><00:28:01.080><c> this</c><00:28:01.250><c> maybe</c><00:28:02.250><c> a</c><00:28:02.370><c> future</c>

00:28:02.690 --> 00:28:02.700 align:start position:0%
library could do this maybe a future
 

00:28:02.700 --> 00:28:04.730 align:start position:0%
library could do this maybe a future
Android<00:28:03.210><c> X</c><00:28:03.360><c> library</c><00:28:03.780><c> could</c><00:28:04.289><c> be</c><00:28:04.409><c> written</c><00:28:04.559><c> in</c>

00:28:04.730 --> 00:28:04.740 align:start position:0%
Android X library could be written in
 

00:28:04.740 --> 00:28:06.919 align:start position:0%
Android X library could be written in
Kotlin<00:28:05.130><c> that</c><00:28:05.850><c> seems</c><00:28:06.090><c> like</c><00:28:06.299><c> a</c><00:28:06.330><c> strong</c>

00:28:06.919 --> 00:28:06.929 align:start position:0%
Kotlin that seems like a strong
 

00:28:06.929 --> 00:28:13.640 align:start position:0%
Kotlin that seems like a strong
possibility<00:28:11.390><c> what</c><00:28:12.390><c> we've</c><00:28:12.539><c> chosen</c><00:28:12.570><c> to</c><00:28:13.200><c> do</c><00:28:13.380><c> with</c>

00:28:13.640 --> 00:28:13.650 align:start position:0%
possibility what we've chosen to do with
 

00:28:13.650 --> 00:28:16.580 align:start position:0%
possibility what we've chosen to do with
most<00:28:13.950><c> of</c><00:28:14.070><c> the</c><00:28:14.250><c> things</c><00:28:14.780><c> that</c><00:28:15.780><c> we</c><00:28:15.900><c> publish</c><00:28:16.350><c> is</c>

00:28:16.580 --> 00:28:16.590 align:start position:0%
most of the things that we publish is
 

00:28:16.590 --> 00:28:20.029 align:start position:0%
most of the things that we publish is
sibling<00:28:17.240><c> artifacts</c><00:28:18.240><c> so</c><00:28:19.020><c> the</c><00:28:19.230><c> the</c><00:28:19.590><c> main</c>

00:28:20.029 --> 00:28:20.039 align:start position:0%
sibling artifacts so the the main
 

00:28:20.039 --> 00:28:21.580 align:start position:0%
sibling artifacts so the the main
library<00:28:20.280><c> remains</c><00:28:20.880><c> written</c>

00:28:21.580 --> 00:28:21.590 align:start position:0%
library remains written
 

00:28:21.590 --> 00:28:23.980 align:start position:0%
library remains written
using<00:28:21.980><c> Java</c><00:28:22.340><c> language</c><00:28:22.580><c> and</c><00:28:23.150><c> we</c><00:28:23.240><c> ship</c><00:28:23.480><c> Kotlin</c>

00:28:23.980 --> 00:28:23.990 align:start position:0%
using Java language and we ship Kotlin
 

00:28:23.990 --> 00:28:25.960 align:start position:0%
using Java language and we ship Kotlin
language<00:28:24.260><c> features</c><00:28:24.620><c> as</c><00:28:24.860><c> a</c><00:28:24.890><c> sibling</c><00:28:25.190><c> artifacts</c>

00:28:25.960 --> 00:28:25.970 align:start position:0%
language features as a sibling artifacts
 

00:28:25.970 --> 00:28:27.700 align:start position:0%
language features as a sibling artifacts
what's<00:28:26.720><c> great</c><00:28:26.900><c> about</c><00:28:26.960><c> this</c><00:28:27.230><c> is</c><00:28:27.290><c> you</c><00:28:27.500><c> don't</c>

00:28:27.700 --> 00:28:27.710 align:start position:0%
what's great about this is you don't
 

00:28:27.710 --> 00:28:29.920 align:start position:0%
what's great about this is you don't
force<00:28:28.130><c> the</c><00:28:28.340><c> Kotlin</c><00:28:28.670><c> standard</c><00:28:29.030><c> library</c><00:28:29.480><c> onto</c>

00:28:29.920 --> 00:28:29.930 align:start position:0%
force the Kotlin standard library onto
 

00:28:29.930 --> 00:28:32.680 align:start position:0%
force the Kotlin standard library onto
your<00:28:30.670><c> consumers</c><00:28:31.670><c> unless</c><00:28:32.240><c> they</c><00:28:32.390><c> explicitly</c>

00:28:32.680 --> 00:28:32.690 align:start position:0%
your consumers unless they explicitly
 

00:28:32.690 --> 00:28:35.830 align:start position:0%
your consumers unless they explicitly
want<00:28:33.200><c> it</c><00:28:33.380><c> you</c><00:28:34.340><c> can</c><00:28:34.490><c> curate</c><00:28:34.910><c> the</c><00:28:35.120><c> extensions</c><00:28:35.630><c> to</c>

00:28:35.830 --> 00:28:35.840 align:start position:0%
want it you can curate the extensions to
 

00:28:35.840 --> 00:28:38.260 align:start position:0%
want it you can curate the extensions to
be<00:28:35.990><c> exactly</c><00:28:36.740><c> what's</c><00:28:36.890><c> needed</c><00:28:37.100><c> to</c><00:28:37.310><c> augment</c><00:28:38.090><c> your</c>

00:28:38.260 --> 00:28:38.270 align:start position:0%
be exactly what's needed to augment your
 

00:28:38.270 --> 00:28:41.950 align:start position:0%
be exactly what's needed to augment your
API<00:28:39.760><c> where</c><00:28:40.760><c> you</c><00:28:40.790><c> get</c><00:28:41.090><c> the</c><00:28:41.240><c> Kotlin</c><00:28:41.540><c> specific</c>

00:28:41.950 --> 00:28:41.960 align:start position:0%
API where you get the Kotlin specific
 

00:28:41.960 --> 00:28:44.380 align:start position:0%
API where you get the Kotlin specific
features<00:28:42.320><c> and</c><00:28:42.970><c> what's</c><00:28:43.970><c> really</c><00:28:44.150><c> nice</c><00:28:44.330><c> about</c>

00:28:44.380 --> 00:28:44.390 align:start position:0%
features and what's really nice about
 

00:28:44.390 --> 00:28:46.480 align:start position:0%
features and what's really nice about
this<00:28:44.750><c> is</c><00:28:44.960><c> you</c><00:28:44.990><c> don't</c><00:28:45.320><c> have</c><00:28:45.440><c> to</c><00:28:45.800><c> control</c><00:28:46.250><c> the</c>

00:28:46.480 --> 00:28:46.490 align:start position:0%
this is you don't have to control the
 

00:28:46.490 --> 00:28:48.520 align:start position:0%
this is you don't have to control the
library<00:28:46.940><c> that</c><00:28:47.120><c> you're</c><00:28:47.270><c> extending</c><00:28:47.630><c> so</c><00:28:48.440><c> if</c>

00:28:48.520 --> 00:28:48.530 align:start position:0%
library that you're extending so if
 

00:28:48.530 --> 00:28:50.710 align:start position:0%
library that you're extending so if
you're<00:28:48.650><c> just</c><00:28:48.830><c> consuming</c><00:28:49.430><c> a</c><00:28:49.520><c> library</c><00:28:49.940><c> and</c><00:28:50.210><c> you</c>

00:28:50.710 --> 00:28:50.720 align:start position:0%
you're just consuming a library and you
 

00:28:50.720 --> 00:28:52.330 align:start position:0%
you're just consuming a library and you
want<00:28:50.930><c> to</c><00:28:51.050><c> make</c><00:28:51.200><c> part</c><00:28:51.440><c> of</c><00:28:51.500><c> it</c><00:28:51.650><c> more</c><00:28:51.920><c> column</c>

00:28:52.330 --> 00:28:52.340 align:start position:0%
want to make part of it more column
 

00:28:52.340 --> 00:28:55.240 align:start position:0%
want to make part of it more column
friendly<00:28:53.230><c> you</c><00:28:54.230><c> can</c><00:28:54.260><c> do</c><00:28:54.530><c> that</c><00:28:54.710><c> you</c><00:28:54.830><c> can</c><00:28:54.980><c> do</c><00:28:55.100><c> that</c>

00:28:55.240 --> 00:28:55.250 align:start position:0%
friendly you can do that you can do that
 

00:28:55.250 --> 00:28:57.490 align:start position:0%
friendly you can do that you can do that
either<00:28:55.550><c> in</c><00:28:55.910><c> your</c><00:28:56.120><c> own</c><00:28:56.330><c> app</c><00:28:56.630><c> or</c><00:28:56.870><c> you</c><00:28:57.290><c> can</c>

00:28:57.490 --> 00:28:57.500 align:start position:0%
either in your own app or you can
 

00:28:57.500 --> 00:29:00.220 align:start position:0%
either in your own app or you can
publish<00:28:57.770><c> a</c><00:28:58.310><c> set</c><00:28:59.270><c> of</c><00:28:59.360><c> extensions</c><00:28:59.900><c> for</c><00:29:00.200><c> a</c>

00:29:00.220 --> 00:29:00.230 align:start position:0%
publish a set of extensions for a
 

00:29:00.230 --> 00:29:05.560 align:start position:0%
publish a set of extensions for a
library<00:29:00.920><c> that</c><00:29:01.010><c> someone</c><00:29:01.520><c> else</c><00:29:01.640><c> publishes</c><00:29:04.570><c> but</c>

00:29:05.560 --> 00:29:05.570 align:start position:0%
library that someone else publishes but
 

00:29:05.570 --> 00:29:08.080 align:start position:0%
library that someone else publishes but
is<00:29:05.690><c> this</c><00:29:05.900><c> the</c><00:29:06.110><c> only</c><00:29:06.340><c> are</c><00:29:07.340><c> these</c><00:29:07.550><c> the</c><00:29:07.610><c> only</c><00:29:07.940><c> two</c>

00:29:08.080 --> 00:29:08.090 align:start position:0%
is this the only are these the only two
 

00:29:08.090 --> 00:29:11.440 align:start position:0%
is this the only are these the only two
options<00:29:08.120><c> I</c><00:29:09.760><c> want</c><00:29:10.760><c> to</c><00:29:10.880><c> take</c><00:29:11.030><c> a</c><00:29:11.060><c> look</c><00:29:11.240><c> at</c>

00:29:11.440 --> 00:29:11.450 align:start position:0%
options I want to take a look at
 

00:29:11.450 --> 00:29:14.310 align:start position:0%
options I want to take a look at
something<00:29:11.840><c> that</c><00:29:12.620><c> I</c><00:29:12.650><c> think</c><00:29:12.830><c> will</c><00:29:13.160><c> lead</c><00:29:13.400><c> into</c><00:29:13.670><c> a</c>

00:29:14.310 --> 00:29:14.320 align:start position:0%
something that I think will lead into a
 

00:29:14.320 --> 00:29:18.850 align:start position:0%
something that I think will lead into a
third<00:29:15.320><c> somewhat</c><00:29:16.250><c> hybrid</c><00:29:16.670><c> option</c><00:29:17.620><c> and</c><00:29:18.620><c> I</c><00:29:18.740><c> go</c>

00:29:18.850 --> 00:29:18.860 align:start position:0%
third somewhat hybrid option and I go
 

00:29:18.860 --> 00:29:21.850 align:start position:0%
third somewhat hybrid option and I go
back<00:29:18.980><c> to</c><00:29:19.160><c> this</c><00:29:19.280><c> simple</c><00:29:19.610><c> alias</c><00:29:20.860><c> extension</c>

00:29:21.850 --> 00:29:21.860 align:start position:0%
back to this simple alias extension
 

00:29:21.860 --> 00:29:23.260 align:start position:0%
back to this simple alias extension
where<00:29:22.040><c> we've</c><00:29:22.220><c> taken</c><00:29:22.400><c> the</c><00:29:22.700><c> static</c><00:29:23.060><c> method</c>

00:29:23.260 --> 00:29:23.270 align:start position:0%
where we've taken the static method
 

00:29:23.270 --> 00:29:25.180 align:start position:0%
where we've taken the static method
defined<00:29:23.840><c> in</c><00:29:23.960><c> the</c><00:29:24.080><c> Java</c><00:29:24.290><c> language</c><00:29:24.500><c> and</c><00:29:24.980><c> turned</c>

00:29:25.180 --> 00:29:25.190 align:start position:0%
defined in the Java language and turned
 

00:29:25.190 --> 00:29:26.680 align:start position:0%
defined in the Java language and turned
it<00:29:25.280><c> into</c><00:29:25.460><c> an</c><00:29:25.670><c> extension</c><00:29:26.120><c> method</c><00:29:26.240><c> in</c><00:29:26.570><c> the</c>

00:29:26.680 --> 00:29:26.690 align:start position:0%
it into an extension method in the
 

00:29:26.690 --> 00:29:31.210 align:start position:0%
it into an extension method in the
Kotlin<00:29:27.080><c> language</c><00:29:29.680><c> if</c><00:29:30.680><c> we</c><00:29:30.860><c> look</c><00:29:31.010><c> at</c><00:29:31.130><c> the</c>

00:29:31.210 --> 00:29:31.220 align:start position:0%
Kotlin language if we look at the
 

00:29:31.220 --> 00:29:34.540 align:start position:0%
Kotlin language if we look at the
implementation<00:29:31.940><c> of</c><00:29:32.210><c> this</c><00:29:32.570><c> class</c><00:29:33.440><c> on</c><00:29:33.830><c> the</c><00:29:34.310><c> Java</c>

00:29:34.540 --> 00:29:34.550 align:start position:0%
implementation of this class on the Java
 

00:29:34.550 --> 00:29:37.110 align:start position:0%
implementation of this class on the Java
side<00:29:35.020><c> I've</c><00:29:36.020><c> included</c><00:29:36.320><c> the</c><00:29:36.590><c> first</c><00:29:36.740><c> line</c>

00:29:37.110 --> 00:29:37.120 align:start position:0%
side I've included the first line
 

00:29:37.120 --> 00:29:39.850 align:start position:0%
side I've included the first line
because<00:29:38.120><c> we</c><00:29:38.300><c> can</c><00:29:38.420><c> see</c><00:29:38.630><c> that</c><00:29:38.750><c> it</c><00:29:38.900><c> immediately</c>

00:29:39.850 --> 00:29:39.860 align:start position:0%
because we can see that it immediately
 

00:29:39.860 --> 00:29:41.980 align:start position:0%
because we can see that it immediately
dereferences<00:29:40.820><c> the</c><00:29:41.030><c> argument</c><00:29:41.540><c> that</c><00:29:41.660><c> we</c><00:29:41.780><c> pass</c>

00:29:41.980 --> 00:29:41.990 align:start position:0%
dereferences the argument that we pass
 

00:29:41.990 --> 00:29:44.320 align:start position:0%
dereferences the argument that we pass
in<00:29:42.260><c> as</c><00:29:43.100><c> soon</c><00:29:43.190><c> as</c><00:29:43.310><c> we</c><00:29:43.430><c> pass</c><00:29:43.580><c> in</c><00:29:43.760><c> a</c><00:29:43.790><c> string</c><00:29:43.880><c> it</c>

00:29:44.320 --> 00:29:44.330 align:start position:0%
in as soon as we pass in a string it
 

00:29:44.330 --> 00:29:46.840 align:start position:0%
in as soon as we pass in a string it
says<00:29:44.540><c> what's</c><00:29:44.840><c> the</c><00:29:44.960><c> you</c><00:29:45.350><c> know</c><00:29:45.440><c> maximum</c><00:29:46.130><c> number</c>

00:29:46.840 --> 00:29:46.850 align:start position:0%
says what's the you know maximum number
 

00:29:46.850 --> 00:29:48.940 align:start position:0%
says what's the you know maximum number
of<00:29:46.880><c> characters</c><00:29:47.420><c> that</c><00:29:47.660><c> I</c><00:29:47.690><c> can</c><00:29:47.900><c> iterate</c><00:29:48.080><c> over</c><00:29:48.290><c> in</c>

00:29:48.940 --> 00:29:48.950 align:start position:0%
of characters that I can iterate over in
 

00:29:48.950 --> 00:29:51.100 align:start position:0%
of characters that I can iterate over in
order<00:29:49.310><c> to</c><00:29:49.430><c> determine</c><00:29:49.730><c> whether</c><00:29:50.300><c> or</c><00:29:50.360><c> not</c><00:29:50.510><c> there</c>

00:29:51.100 --> 00:29:51.110 align:start position:0%
order to determine whether or not there
 

00:29:51.110 --> 00:29:55.680 align:start position:0%
order to determine whether or not there
are<00:29:51.140><c> digits</c><00:29:51.760><c> and</c><00:29:52.900><c> so</c><00:29:53.900><c> if</c><00:29:54.020><c> you've</c><00:29:54.140><c> been</c><00:29:54.170><c> using</c>

00:29:55.680 --> 00:29:55.690 align:start position:0%
are digits and so if you've been using
 

00:29:55.690 --> 00:30:00.070 align:start position:0%
are digits and so if you've been using
Kotlin<00:29:57.280><c> with</c><00:29:58.280><c> java</c><00:29:58.640><c> api</c><00:29:59.000><c> x'</c><00:29:59.120><c> you</c><00:29:59.780><c> might</c><00:29:59.930><c> know</c>

00:30:00.070 --> 00:30:00.080 align:start position:0%
Kotlin with java api x' you might know
 

00:30:00.080 --> 00:30:02.340 align:start position:0%
Kotlin with java api x' you might know
that<00:30:00.290><c> this</c><00:30:00.440><c> means</c><00:30:00.710><c> that</c><00:30:00.890><c> the</c><00:30:01.280><c> parameter</c><00:30:02.000><c> is</c>

00:30:02.340 --> 00:30:02.350 align:start position:0%
that this means that the parameter is
 

00:30:02.350 --> 00:30:05.380 align:start position:0%
that this means that the parameter is
going<00:30:03.350><c> to</c><00:30:03.590><c> be</c><00:30:04.100><c> exposed</c><00:30:04.460><c> as</c><00:30:04.790><c> what's</c><00:30:05.090><c> called</c><00:30:05.240><c> a</c>

00:30:05.380 --> 00:30:05.390 align:start position:0%
going to be exposed as what's called a
 

00:30:05.390 --> 00:30:07.270 align:start position:0%
going to be exposed as what's called a
platform<00:30:05.870><c> type</c><00:30:06.080><c> it</c><00:30:06.410><c> has</c><00:30:06.620><c> unknown</c><00:30:07.070><c> null</c>

00:30:07.270 --> 00:30:07.280 align:start position:0%
platform type it has unknown null
 

00:30:07.280 --> 00:30:10.060 align:start position:0%
platform type it has unknown null
ability<00:30:07.780><c> but</c><00:30:08.780><c> by</c><00:30:08.930><c> from</c><00:30:09.380><c> the</c><00:30:09.470><c> implementation</c>

00:30:10.060 --> 00:30:10.070 align:start position:0%
ability but by from the implementation
 

00:30:10.070 --> 00:30:12.400 align:start position:0%
ability but by from the implementation
we<00:30:10.640><c> know</c><00:30:10.820><c> right</c><00:30:11.030><c> away</c><00:30:11.090><c> that</c><00:30:11.330><c> this</c><00:30:11.810><c> method</c>

00:30:12.400 --> 00:30:12.410 align:start position:0%
we know right away that this method
 

00:30:12.410 --> 00:30:15.820 align:start position:0%
we know right away that this method
simply<00:30:12.860><c> cannot</c><00:30:13.370><c> extend</c><00:30:13.820><c> cannot</c><00:30:14.600><c> accept</c><00:30:15.140><c> null</c>

00:30:15.820 --> 00:30:15.830 align:start position:0%
simply cannot extend cannot accept null
 

00:30:15.830 --> 00:30:18.550 align:start position:0%
simply cannot extend cannot accept null
values<00:30:16.540><c> in</c><00:30:17.540><c> the</c><00:30:17.660><c> way</c><00:30:17.780><c> that</c><00:30:17.900><c> we</c><00:30:17.960><c> would</c><00:30:18.080><c> fix</c><00:30:18.350><c> this</c>

00:30:18.550 --> 00:30:18.560 align:start position:0%
values in the way that we would fix this
 

00:30:18.560 --> 00:30:22.900 align:start position:0%
values in the way that we would fix this
is<00:30:18.830><c> by</c><00:30:18.860><c> adding</c><00:30:19.220><c> the</c><00:30:20.030><c> non</c><00:30:20.240><c> null</c><00:30:20.450><c> annotation</c><00:30:21.910><c> so</c>

00:30:22.900 --> 00:30:22.910 align:start position:0%
is by adding the non null annotation so
 

00:30:22.910 --> 00:30:24.760 align:start position:0%
is by adding the non null annotation so
that<00:30:23.120><c> what</c><00:30:23.270><c> this</c><00:30:23.360><c> annotation</c><00:30:23.780><c> does</c><00:30:24.170><c> is</c><00:30:24.530><c> it</c>

00:30:24.760 --> 00:30:24.770 align:start position:0%
that what this annotation does is it
 

00:30:24.770 --> 00:30:27.640 align:start position:0%
that what this annotation does is it
informs<00:30:25.550><c> the</c><00:30:25.670><c> collin</c><00:30:26.150><c> compiler</c><00:30:26.750><c> that</c><00:30:27.500><c> there's</c>

00:30:27.640 --> 00:30:27.650 align:start position:0%
informs the collin compiler that there's
 

00:30:27.650 --> 00:30:29.920 align:start position:0%
informs the collin compiler that there's
a<00:30:27.740><c> restriction</c><00:30:28.220><c> that</c><00:30:28.700><c> there's</c><00:30:29.150><c> special</c>

00:30:29.920 --> 00:30:29.930 align:start position:0%
a restriction that there's special
 

00:30:29.930 --> 00:30:31.660 align:start position:0%
a restriction that there's special
behavior<00:30:30.050><c> that</c><00:30:30.560><c> it</c><00:30:30.710><c> needs</c><00:30:31.250><c> to</c><00:30:31.370><c> take</c><00:30:31.490><c> into</c>

00:30:31.660 --> 00:30:31.670 align:start position:0%
behavior that it needs to take into
 

00:30:31.670 --> 00:30:33.780 align:start position:0%
behavior that it needs to take into
account<00:30:31.760><c> where</c><00:30:32.360><c> it</c><00:30:32.600><c> needs</c><00:30:32.870><c> to</c>

00:30:33.780 --> 00:30:33.790 align:start position:0%
account where it needs to
 

00:30:33.790 --> 00:30:36.540 align:start position:0%
account where it needs to
in<00:30:33.960><c> force</c><00:30:34.960><c> that</c><00:30:35.350><c> no</c><00:30:35.620><c> one</c><00:30:35.800><c> passes</c><00:30:36.310><c> a</c>

00:30:36.540 --> 00:30:36.550 align:start position:0%
in force that no one passes a
 

00:30:36.550 --> 00:30:39.690 align:start position:0%
in force that no one passes a
potentially<00:30:37.330><c> nullable</c><00:30:37.690><c> value</c><00:30:38.080><c> or</c><00:30:38.350><c> null</c><00:30:39.130><c> into</c>

00:30:39.690 --> 00:30:39.700 align:start position:0%
potentially nullable value or null into
 

00:30:39.700 --> 00:30:44.190 align:start position:0%
potentially nullable value or null into
this<00:30:40.410><c> method</c><00:30:42.360><c> and</c><00:30:43.360><c> so</c><00:30:43.690><c> this</c><00:30:43.810><c> is</c><00:30:43.930><c> something</c>

00:30:44.190 --> 00:30:44.200 align:start position:0%
this method and so this is something
 

00:30:44.200 --> 00:30:46.920 align:start position:0%
this method and so this is something
this<00:30:44.650><c> is</c><00:30:44.710><c> all</c><00:30:44.950><c> this</c><00:30:45.700><c> is</c><00:30:45.880><c> enabling</c><00:30:46.480><c> a</c><00:30:46.570><c> language</c>

00:30:46.920 --> 00:30:46.930 align:start position:0%
this is all this is enabling a language
 

00:30:46.930 --> 00:30:48.720 align:start position:0%
this is all this is enabling a language
feature<00:30:47.110><c> in</c><00:30:47.380><c> Kotlin</c><00:30:47.770><c> that</c><00:30:48.130><c> simply</c><00:30:48.490><c> doesn't</c>

00:30:48.720 --> 00:30:48.730 align:start position:0%
feature in Kotlin that simply doesn't
 

00:30:48.730 --> 00:30:53.820 align:start position:0%
feature in Kotlin that simply doesn't
exist<00:30:48.970><c> in</c><00:30:49.540><c> Java</c><00:30:50.140><c> now</c><00:30:51.040><c> you</c><00:30:51.100><c> can</c><00:30:51.460><c> use</c><00:30:52.150><c> tools</c><00:30:52.830><c> that</c>

00:30:53.820 --> 00:30:53.830 align:start position:0%
exist in Java now you can use tools that
 

00:30:53.830 --> 00:30:56.040 align:start position:0%
exist in Java now you can use tools that
will<00:30:53.980><c> allow</c><00:30:54.220><c> this</c><00:30:54.850><c> enforcement</c><00:30:55.510><c> to</c><00:30:55.690><c> work</c><00:30:55.840><c> for</c>

00:30:56.040 --> 00:30:56.050 align:start position:0%
will allow this enforcement to work for
 

00:30:56.050 --> 00:30:58.410 align:start position:0%
will allow this enforcement to work for
a<00:30:56.080><c> job</c><00:30:56.290><c> but</c><00:30:57.250><c> it's</c><00:30:57.370><c> not</c><00:30:57.430><c> intrinsic</c><00:30:58.180><c> to</c><00:30:58.330><c> the</c>

00:30:58.410 --> 00:30:58.420 align:start position:0%
a job but it's not intrinsic to the
 

00:30:58.420 --> 00:31:03.000 align:start position:0%
a job but it's not intrinsic to the
language<00:30:58.720><c> itself</c><00:31:01.590><c> so</c><00:31:02.590><c> if</c><00:31:02.650><c> we</c><00:31:02.710><c> can</c><00:31:02.830><c> do</c>

00:31:03.000 --> 00:31:03.010 align:start position:0%
language itself so if we can do
 

00:31:03.010 --> 00:31:05.010 align:start position:0%
language itself so if we can do
something<00:31:03.250><c> like</c><00:31:03.370><c> that</c><00:31:03.490><c> for</c><00:31:03.730><c> null</c><00:31:03.940><c> Ness</c><00:31:04.180><c> if</c><00:31:04.570><c> we</c>

00:31:05.010 --> 00:31:05.020 align:start position:0%
something like that for null Ness if we
 

00:31:05.020 --> 00:31:06.720 align:start position:0%
something like that for null Ness if we
can<00:31:05.140><c> add</c><00:31:05.260><c> this</c><00:31:05.410><c> annotation</c><00:31:05.980><c> for</c><00:31:06.130><c> nullus</c><00:31:06.520><c> to</c>

00:31:06.720 --> 00:31:06.730 align:start position:0%
can add this annotation for nullus to
 

00:31:06.730 --> 00:31:08.550 align:start position:0%
can add this annotation for nullus to
inform<00:31:07.120><c> the</c><00:31:07.270><c> Kotlin</c><00:31:07.600><c> compiler</c><00:31:08.080><c> that</c><00:31:08.170><c> it</c><00:31:08.380><c> needs</c>

00:31:08.550 --> 00:31:08.560 align:start position:0%
inform the Kotlin compiler that it needs
 

00:31:08.560 --> 00:31:11.100 align:start position:0%
inform the Kotlin compiler that it needs
to<00:31:08.650><c> change</c><00:31:08.740><c> its</c><00:31:09.340><c> behavior</c><00:31:09.630><c> when</c><00:31:10.630><c> we</c><00:31:10.660><c> invoke</c>

00:31:11.100 --> 00:31:11.110 align:start position:0%
to change its behavior when we invoke
 

00:31:11.110 --> 00:31:13.860 align:start position:0%
to change its behavior when we invoke
this<00:31:11.350><c> method</c><00:31:11.520><c> can</c><00:31:12.520><c> we</c><00:31:12.580><c> do</c><00:31:12.730><c> this</c><00:31:12.910><c> for</c><00:31:13.180><c> something</c>

00:31:13.860 --> 00:31:13.870 align:start position:0%
this method can we do this for something
 

00:31:13.870 --> 00:31:17.460 align:start position:0%
this method can we do this for something
else<00:31:14.130><c> say</c><00:31:15.130><c> I</c><00:31:15.690><c> want</c><00:31:16.690><c> to</c><00:31:16.780><c> take</c><00:31:16.930><c> this</c><00:31:17.110><c> static</c>

00:31:17.460 --> 00:31:17.470 align:start position:0%
else say I want to take this static
 

00:31:17.470 --> 00:31:19.260 align:start position:0%
else say I want to take this static
method<00:31:17.830><c> where</c><00:31:18.130><c> the</c><00:31:18.160><c> first</c><00:31:18.520><c> argument</c><00:31:18.790><c> is</c>

00:31:19.260 --> 00:31:19.270 align:start position:0%
method where the first argument is
 

00:31:19.270 --> 00:31:22.560 align:start position:0%
method where the first argument is
really<00:31:19.720><c> the</c><00:31:19.930><c> the</c><00:31:20.440><c> receiver</c><00:31:20.920><c> and</c><00:31:21.340><c> can</c><00:31:22.210><c> I</c><00:31:22.300><c> say</c>

00:31:22.560 --> 00:31:22.570 align:start position:0%
really the the receiver and can I say
 

00:31:22.570 --> 00:31:24.150 align:start position:0%
really the the receiver and can I say
that<00:31:22.780><c> this</c><00:31:22.930><c> is</c><00:31:23.140><c> actually</c><00:31:23.530><c> going</c><00:31:23.560><c> to</c><00:31:23.950><c> be</c><00:31:24.070><c> an</c>

00:31:24.150 --> 00:31:24.160 align:start position:0%
that this is actually going to be an
 

00:31:24.160 --> 00:31:26.580 align:start position:0%
that this is actually going to be an
extension<00:31:24.550><c> function</c><00:31:24.870><c> when</c><00:31:25.870><c> can</c><00:31:26.230><c> vote</c><00:31:26.410><c> from</c>

00:31:26.580 --> 00:31:26.590 align:start position:0%
extension function when can vote from
 

00:31:26.590 --> 00:31:30.750 align:start position:0%
extension function when can vote from
Kotla<00:31:28.800><c> and</c><00:31:29.800><c> what</c><00:31:29.920><c> this</c><00:31:30.040><c> allows</c><00:31:30.280><c> us</c><00:31:30.490><c> to</c><00:31:30.610><c> do</c>

00:31:30.750 --> 00:31:30.760 align:start position:0%
Kotla and what this allows us to do
 

00:31:30.760 --> 00:31:33.270 align:start position:0%
Kotla and what this allows us to do
potentially<00:31:31.570><c> is</c><00:31:31.770><c> eliminate</c><00:31:32.770><c> the</c><00:31:32.920><c> need</c><00:31:33.070><c> to</c>

00:31:33.270 --> 00:31:33.280 align:start position:0%
potentially is eliminate the need to
 

00:31:33.280 --> 00:31:35.700 align:start position:0%
potentially is eliminate the need to
have<00:31:33.460><c> this</c><00:31:33.730><c> explicitly</c><00:31:34.690><c> defined</c><00:31:35.080><c> extension</c>

00:31:35.700 --> 00:31:35.710 align:start position:0%
have this explicitly defined extension
 

00:31:35.710 --> 00:31:38.640 align:start position:0%
have this explicitly defined extension
at<00:31:36.100><c> all</c><00:31:36.310><c> right</c><00:31:37.060><c> this</c><00:31:37.390><c> extension</c><00:31:37.870><c> only</c><00:31:38.110><c> exists</c>

00:31:38.640 --> 00:31:38.650 align:start position:0%
at all right this extension only exists
 

00:31:38.650 --> 00:31:40.440 align:start position:0%
at all right this extension only exists
you<00:31:38.800><c> change</c><00:31:39.160><c> the</c><00:31:39.550><c> calling</c><00:31:39.850><c> convention</c><00:31:40.000><c> to</c>

00:31:40.440 --> 00:31:40.450 align:start position:0%
you change the calling convention to
 

00:31:40.450 --> 00:31:42.630 align:start position:0%
you change the calling convention to
inform<00:31:40.960><c> the</c><00:31:41.230><c> compiler</c><00:31:41.830><c> that</c><00:31:42.310><c> we</c><00:31:42.400><c> want</c><00:31:42.580><c> to</c>

00:31:42.630 --> 00:31:42.640 align:start position:0%
inform the compiler that we want to
 

00:31:42.640 --> 00:31:46.580 align:start position:0%
inform the compiler that we want to
allow<00:31:42.940><c> you</c><00:31:43.000><c> to</c><00:31:43.360><c> call</c><00:31:43.570><c> it</c><00:31:43.750><c> in</c><00:31:43.870><c> a</c><00:31:43.960><c> different</c><00:31:44.110><c> way</c>

00:31:46.580 --> 00:31:46.590 align:start position:0%
 
 

00:31:46.590 --> 00:31:49.590 align:start position:0%
 
and<00:31:47.590><c> so</c><00:31:48.100><c> now</c><00:31:48.310><c> we're</c><00:31:48.490><c> left</c><00:31:48.640><c> with</c><00:31:48.880><c> just</c><00:31:49.060><c> this</c><00:31:49.270><c> the</c>

00:31:49.590 --> 00:31:49.600 align:start position:0%
and so now we're left with just this the
 

00:31:49.600 --> 00:31:51.840 align:start position:0%
and so now we're left with just this the
Kotlin<00:31:49.930><c> compiler</c><00:31:50.470><c> sees</c><00:31:51.370><c> that</c><00:31:51.550><c> annotation</c>

00:31:51.840 --> 00:31:51.850 align:start position:0%
Kotlin compiler sees that annotation
 

00:31:51.850 --> 00:31:53.730 align:start position:0%
Kotlin compiler sees that annotation
just<00:31:52.810><c> like</c><00:31:52.930><c> it's</c><00:31:53.110><c> all</c><00:31:53.260><c> the</c><00:31:53.410><c> non</c><00:31:53.560><c> null</c>

00:31:53.730 --> 00:31:53.740 align:start position:0%
just like it's all the non null
 

00:31:53.740 --> 00:31:56.160 align:start position:0%
just like it's all the non null
annotation<00:31:54.310><c> infer</c><00:31:55.150><c> something</c><00:31:55.510><c> from</c><00:31:55.870><c> it</c><00:31:56.050><c> and</c>

00:31:56.160 --> 00:31:56.170 align:start position:0%
annotation infer something from it and
 

00:31:56.170 --> 00:31:58.050 align:start position:0%
annotation infer something from it and
allows<00:31:56.680><c> you</c><00:31:56.860><c> to</c><00:31:56.980><c> call</c><00:31:57.160><c> it</c><00:31:57.340><c> in</c><00:31:57.490><c> a</c><00:31:57.550><c> way</c><00:31:57.700><c> that's</c>

00:31:58.050 --> 00:31:58.060 align:start position:0%
allows you to call it in a way that's
 

00:31:58.060 --> 00:32:03.690 align:start position:0%
allows you to call it in a way that's
more<00:31:58.330><c> idiomatic</c><00:31:58.800><c> for</c><00:31:59.800><c> that</c><00:31:59.950><c> language</c><00:32:02.250><c> in</c><00:32:03.250><c> the</c>

00:32:03.690 --> 00:32:03.700 align:start position:0%
more idiomatic for that language in the
 

00:32:03.700 --> 00:32:05.790 align:start position:0%
more idiomatic for that language in the
bytecode<00:32:03.880><c> we</c><00:32:04.570><c> get</c><00:32:04.750><c> what</c><00:32:05.110><c> we</c><00:32:05.200><c> otherwise</c><00:32:05.440><c> would</c>

00:32:05.790 --> 00:32:05.800 align:start position:0%
bytecode we get what we otherwise would
 

00:32:05.800 --> 00:32:07.650 align:start position:0%
bytecode we get what we otherwise would
have<00:32:05.920><c> written</c><00:32:06.070><c> right</c><00:32:06.400><c> we</c><00:32:06.580><c> still</c><00:32:06.850><c> get</c><00:32:07.030><c> the</c><00:32:07.060><c> the</c>

00:32:07.650 --> 00:32:07.660 align:start position:0%
have written right we still get the the
 

00:32:07.660 --> 00:32:09.690 align:start position:0%
have written right we still get the the
call<00:32:07.900><c> to</c><00:32:08.230><c> the</c><00:32:08.350><c> static</c><00:32:08.680><c> method</c><00:32:08.860><c> and</c><00:32:09.250><c> the</c>

00:32:09.690 --> 00:32:09.700 align:start position:0%
call to the static method and the
 

00:32:09.700 --> 00:32:15.030 align:start position:0%
call to the static method and the
receiver<00:32:10.060><c> becomes</c><00:32:10.510><c> the</c><00:32:10.720><c> first</c><00:32:10.930><c> argument</c><00:32:14.040><c> how</c>

00:32:15.030 --> 00:32:15.040 align:start position:0%
receiver becomes the first argument how
 

00:32:15.040 --> 00:32:19.500 align:start position:0%
receiver becomes the first argument how
about<00:32:15.190><c> this</c><00:32:15.280><c> example</c>

00:32:19.500 --> 00:32:19.510 align:start position:0%
 
 

00:32:19.510 --> 00:32:21.570 align:start position:0%
 
one<00:32:20.350><c> thing</c><00:32:20.530><c> you</c><00:32:20.620><c> might</c><00:32:20.770><c> have</c><00:32:20.920><c> noticed</c><00:32:21.250><c> is</c><00:32:21.400><c> that</c>

00:32:21.570 --> 00:32:21.580 align:start position:0%
one thing you might have noticed is that
 

00:32:21.580 --> 00:32:23.820 align:start position:0%
one thing you might have noticed is that
this<00:32:21.790><c> extension</c><00:32:22.420><c> is</c><00:32:22.660><c> named</c><00:32:22.930><c> update</c><00:32:23.410><c> padding</c>

00:32:23.820 --> 00:32:23.830 align:start position:0%
this extension is named update padding
 

00:32:23.830 --> 00:32:26.550 align:start position:0%
this extension is named update padding
not<00:32:24.070><c> set</c><00:32:24.400><c> padding</c><00:32:24.810><c> now</c><00:32:25.810><c> we</c><00:32:25.870><c> can</c><00:32:26.050><c> actually</c><00:32:26.200><c> call</c>

00:32:26.550 --> 00:32:26.560 align:start position:0%
not set padding now we can actually call
 

00:32:26.560 --> 00:32:30.270 align:start position:0%
not set padding now we can actually call
this<00:32:26.830><c> extension</c><00:32:27.460><c> set</c><00:32:28.330><c> padding</c><00:32:29.190><c> but</c><00:32:30.190><c> the</c>

00:32:30.270 --> 00:32:30.280 align:start position:0%
this extension set padding but the
 

00:32:30.280 --> 00:32:31.920 align:start position:0%
this extension set padding but the
problem<00:32:30.580><c> is</c><00:32:30.730><c> that</c><00:32:30.910><c> it</c><00:32:31.030><c> will</c><00:32:31.120><c> only</c><00:32:31.270><c> work</c><00:32:31.570><c> for</c><00:32:31.900><c> a</c>

00:32:31.920 --> 00:32:31.930 align:start position:0%
problem is that it will only work for a
 

00:32:31.930 --> 00:32:34.110 align:start position:0%
problem is that it will only work for a
subset<00:32:32.650><c> of</c><00:32:32.680><c> arguments</c><00:32:33.280><c> so</c><00:32:33.490><c> in</c><00:32:33.730><c> this</c><00:32:33.850><c> case</c>

00:32:34.110 --> 00:32:34.120 align:start position:0%
subset of arguments so in this case
 

00:32:34.120 --> 00:32:36.060 align:start position:0%
subset of arguments so in this case
we're<00:32:34.390><c> we're</c><00:32:34.540><c> just</c><00:32:34.690><c> passing</c><00:32:35.170><c> left</c><00:32:35.710><c> and</c><00:32:35.920><c> right</c>

00:32:36.060 --> 00:32:36.070 align:start position:0%
we're we're just passing left and right
 

00:32:36.070 --> 00:32:38.520 align:start position:0%
we're we're just passing left and right
values<00:32:36.490><c> we</c><00:32:37.360><c> could</c><00:32:37.540><c> call</c><00:32:37.720><c> that</c><00:32:37.750><c> set</c><00:32:38.140><c> padding</c>

00:32:38.520 --> 00:32:38.530 align:start position:0%
values we could call that set padding
 

00:32:38.530 --> 00:32:40.770 align:start position:0%
values we could call that set padding
and<00:32:38.650><c> it</c><00:32:38.740><c> would</c><00:32:38.830><c> work</c><00:32:39.010><c> fine</c><00:32:39.340><c> but</c><00:32:40.270><c> if</c><00:32:40.390><c> we</c><00:32:40.420><c> passed</c>

00:32:40.770 --> 00:32:40.780 align:start position:0%
and it would work fine but if we passed
 

00:32:40.780 --> 00:32:44.040 align:start position:0%
and it would work fine but if we passed
left<00:32:41.710><c> right</c><00:32:42.040><c> and</c><00:32:42.280><c> then</c><00:32:42.390><c> top</c><00:32:43.390><c> bottom</c>

00:32:44.040 --> 00:32:44.050 align:start position:0%
left right and then top bottom
 

00:32:44.050 --> 00:32:47.670 align:start position:0%
left right and then top bottom
we'd<00:32:44.680><c> be</c><00:32:44.800><c> supplying</c><00:32:45.160><c> four</c><00:32:45.790><c> arguments</c><00:32:46.410><c> and</c><00:32:47.410><c> the</c>

00:32:47.670 --> 00:32:47.680 align:start position:0%
we'd be supplying four arguments and the
 

00:32:47.680 --> 00:32:49.980 align:start position:0%
we'd be supplying four arguments and the
Kotlin<00:32:48.070><c> compiler</c><00:32:48.610><c> is</c><00:32:48.820><c> going</c><00:32:48.880><c> to</c><00:32:49.090><c> see</c><00:32:49.480><c> that</c><00:32:49.810><c> the</c>

00:32:49.980 --> 00:32:49.990 align:start position:0%
Kotlin compiler is going to see that the
 

00:32:49.990 --> 00:32:52.800 align:start position:0%
Kotlin compiler is going to see that the
real<00:32:50.320><c> set</c><00:32:50.710><c> padding</c><00:32:51.270><c> also</c><00:32:52.270><c> accepts</c><00:32:52.630><c> four</c>

00:32:52.800 --> 00:32:52.810 align:start position:0%
real set padding also accepts four
 

00:32:52.810 --> 00:32:53.970 align:start position:0%
real set padding also accepts four
arguments<00:32:53.110><c> and</c><00:32:53.440><c> it's</c><00:32:53.620><c> going</c><00:32:53.740><c> to</c><00:32:53.800><c> prefer</c>

00:32:53.970 --> 00:32:53.980 align:start position:0%
arguments and it's going to prefer
 

00:32:53.980 --> 00:32:56.430 align:start position:0%
arguments and it's going to prefer
calling<00:32:54.790><c> the</c><00:32:54.940><c> real</c><00:32:55.120><c> one</c><00:32:55.330><c> and</c><00:32:55.540><c> the</c><00:32:55.600><c> real</c><00:32:56.260><c> one</c>

00:32:56.430 --> 00:32:56.440 align:start position:0%
calling the real one and the real one
 

00:32:56.440 --> 00:32:58.170 align:start position:0%
calling the real one and the real one
doesn't<00:32:56.800><c> have</c><00:32:56.830><c> named</c><00:32:57.100><c> parameters</c><00:32:57.670><c> so</c><00:32:58.060><c> you're</c>

00:32:58.170 --> 00:32:58.180 align:start position:0%
doesn't have named parameters so you're
 

00:32:58.180 --> 00:33:00.480 align:start position:0%
doesn't have named parameters so you're
gonna<00:32:58.270><c> get</c><00:32:58.450><c> a</c><00:32:58.510><c> compilation</c><00:32:58.840><c> error</c><00:32:59.340><c> that's</c><00:33:00.340><c> the</c>

00:33:00.480 --> 00:33:00.490 align:start position:0%
gonna get a compilation error that's the
 

00:33:00.490 --> 00:33:01.920 align:start position:0%
gonna get a compilation error that's the
reason<00:33:00.760><c> we</c><00:33:00.850><c> have</c><00:33:00.880><c> to</c><00:33:01.090><c> name</c><00:33:01.270><c> this</c><00:33:01.510><c> update</c>

00:33:01.920 --> 00:33:01.930 align:start position:0%
reason we have to name this update
 

00:33:01.930 --> 00:33:06.990 align:start position:0%
reason we have to name this update
padding<00:33:04.890><c> if</c><00:33:05.890><c> we</c><00:33:06.040><c> look</c><00:33:06.190><c> at</c><00:33:06.310><c> the</c><00:33:06.430><c> real</c><00:33:06.610><c> set</c>

00:33:06.990 --> 00:33:07.000 align:start position:0%
padding if we look at the real set
 

00:33:07.000 --> 00:33:09.630 align:start position:0%
padding if we look at the real set
padding<00:33:07.740><c> simple</c><00:33:08.740><c> method</c><00:33:09.040><c> that</c><00:33:09.220><c> takes</c><00:33:09.370><c> four</c>

00:33:09.630 --> 00:33:09.640 align:start position:0%
padding simple method that takes four
 

00:33:09.640 --> 00:33:12.990 align:start position:0%
padding simple method that takes four
integers<00:33:10.890><c> what</c><00:33:11.890><c> if</c><00:33:11.980><c> we</c><00:33:12.100><c> could</c><00:33:12.220><c> inform</c><00:33:12.760><c> the</c>

00:33:12.990 --> 00:33:13.000 align:start position:0%
integers what if we could inform the
 

00:33:13.000 --> 00:33:15.780 align:start position:0%
integers what if we could inform the
Kotlin<00:33:13.330><c> compiler</c><00:33:13.870><c> that</c><00:33:14.280><c> these</c><00:33:15.280><c> parameters</c>

00:33:15.780 --> 00:33:15.790 align:start position:0%
Kotlin compiler that these parameters
 

00:33:15.790 --> 00:33:21.960 align:start position:0%
Kotlin compiler that these parameters
have<00:33:16.470><c> names</c><00:33:17.470><c> associated</c><00:33:18.130><c> with</c><00:33:18.250><c> them</c><00:33:20.850><c> now</c><00:33:21.850><c> it</c>

00:33:21.960 --> 00:33:21.970 align:start position:0%
have names associated with them now it
 

00:33:21.970 --> 00:33:23.550 align:start position:0%
have names associated with them now it
would<00:33:22.060><c> be</c><00:33:22.150><c> nice</c><00:33:22.300><c> to</c><00:33:22.330><c> infer</c><00:33:22.780><c> this</c><00:33:22.990><c> just</c><00:33:23.470><c> from</c>

00:33:23.550 --> 00:33:23.560 align:start position:0%
would be nice to infer this just from
 

00:33:23.560 --> 00:33:25.440 align:start position:0%
would be nice to infer this just from
the<00:33:23.770><c> parameter</c><00:33:24.160><c> names</c><00:33:24.370><c> directly</c><00:33:24.880><c> not</c><00:33:25.120><c> have</c><00:33:25.330><c> to</c>

00:33:25.440 --> 00:33:25.450 align:start position:0%
the parameter names directly not have to
 

00:33:25.450 --> 00:33:28.530 align:start position:0%
the parameter names directly not have to
specify<00:33:25.690><c> the</c><00:33:25.930><c> redundancy</c><00:33:27.120><c> but</c><00:33:28.120><c> I'll</c><00:33:28.240><c> argue</c>

00:33:28.530 --> 00:33:28.540 align:start position:0%
specify the redundancy but I'll argue
 

00:33:28.540 --> 00:33:30.480 align:start position:0%
specify the redundancy but I'll argue
that<00:33:28.750><c> for</c><00:33:29.290><c> one</c><00:33:29.440><c> it's</c><00:33:29.800><c> very</c><00:33:30.040><c> nice</c><00:33:30.220><c> being</c>

00:33:30.480 --> 00:33:30.490 align:start position:0%
that for one it's very nice being
 

00:33:30.490 --> 00:33:33.000 align:start position:0%
that for one it's very nice being
explicit<00:33:31.240><c> about</c><00:33:31.270><c> these</c><00:33:31.750><c> names</c><00:33:32.020><c> in</c><00:33:32.350><c> the</c>

00:33:33.000 --> 00:33:33.010 align:start position:0%
explicit about these names in the
 

00:33:33.010 --> 00:33:36.690 align:start position:0%
explicit about these names in the
annotation<00:33:33.810><c> in</c><00:33:34.810><c> Java</c><00:33:35.410><c> bytecode</c><00:33:35.950><c> there</c>

00:33:36.690 --> 00:33:36.700 align:start position:0%
annotation in Java bytecode there
 

00:33:36.700 --> 00:33:39.300 align:start position:0%
annotation in Java bytecode there
actually<00:33:37.120><c> is</c><00:33:37.270><c> a</c><00:33:37.300><c> way</c><00:33:37.600><c> for</c><00:33:37.930><c> you</c><00:33:38.050><c> to</c><00:33:38.080><c> supply</c><00:33:38.710><c> to</c>

00:33:39.300 --> 00:33:39.310 align:start position:0%
actually is a way for you to supply to
 

00:33:39.310 --> 00:33:41.970 align:start position:0%
actually is a way for you to supply to
retain<00:33:39.970><c> parameter</c><00:33:40.600><c> names</c><00:33:40.840><c> so</c><00:33:41.590><c> the</c><00:33:41.710><c> common</c>

00:33:41.970 --> 00:33:41.980 align:start position:0%
retain parameter names so the common
 

00:33:41.980 --> 00:33:44.310 align:start position:0%
retain parameter names so the common
compiler<00:33:42.310><c> could</c><00:33:42.550><c> in</c><00:33:42.670><c> theory</c><00:33:42.910><c> use</c><00:33:43.240><c> those</c><00:33:43.540><c> but</c>

00:33:44.310 --> 00:33:44.320 align:start position:0%
compiler could in theory use those but
 

00:33:44.320 --> 00:33:46.410 align:start position:0%
compiler could in theory use those but
one<00:33:44.470><c> problem</c><00:33:44.920><c> is</c><00:33:45.040><c> that</c><00:33:45.070><c> then</c><00:33:45.880><c> it</c><00:33:46.000><c> becomes</c><00:33:46.270><c> an</c>

00:33:46.410 --> 00:33:46.420 align:start position:0%
one problem is that then it becomes an
 

00:33:46.420 --> 00:33:48.210 align:start position:0%
one problem is that then it becomes an
all-or-nothing<00:33:46.900><c> thing</c><00:33:47.260><c> you</c><00:33:47.470><c> have</c><00:33:47.620><c> to</c><00:33:47.740><c> in</c><00:33:47.890><c> you</c>

00:33:48.210 --> 00:33:48.220 align:start position:0%
all-or-nothing thing you have to in you
 

00:33:48.220 --> 00:33:51.000 align:start position:0%
all-or-nothing thing you have to in you
have<00:33:48.340><c> to</c><00:33:48.460><c> opt</c><00:33:48.730><c> in</c><00:33:49.000><c> to</c><00:33:49.180><c> this</c><00:33:49.420><c> behavior</c><00:33:49.930><c> and</c><00:33:50.560><c> then</c>

00:33:51.000 --> 00:33:51.010 align:start position:0%
have to opt in to this behavior and then
 

00:33:51.010 --> 00:33:52.890 align:start position:0%
have to opt in to this behavior and then
suddenly<00:33:51.280><c> every</c><00:33:51.940><c> parameter</c><00:33:52.390><c> name</c><00:33:52.570><c> across</c>

00:33:52.890 --> 00:33:52.900 align:start position:0%
suddenly every parameter name across
 

00:33:52.900 --> 00:33:55.200 align:start position:0%
suddenly every parameter name across
your<00:33:53.080><c> library</c><00:33:53.560><c> is</c><00:33:53.740><c> set</c><00:33:53.920><c> in</c><00:33:54.040><c> stone</c><00:33:54.340><c> whereas</c>

00:33:55.200 --> 00:33:55.210 align:start position:0%
your library is set in stone whereas
 

00:33:55.210 --> 00:33:56.550 align:start position:0%
your library is set in stone whereas
with<00:33:55.330><c> annotations</c><00:33:55.720><c> that's</c><00:33:56.140><c> something</c><00:33:56.440><c> that</c>

00:33:56.550 --> 00:33:56.560 align:start position:0%
with annotations that's something that
 

00:33:56.560 --> 00:34:00.930 align:start position:0%
with annotations that's something that
you<00:33:56.680><c> could</c><00:33:57.030><c> incrementally</c><00:33:58.030><c> migrate</c><00:33:59.790><c> so</c><00:34:00.790><c> this</c>

00:34:00.930 --> 00:34:00.940 align:start position:0%
you could incrementally migrate so this
 

00:34:00.940 --> 00:34:03.180 align:start position:0%
you could incrementally migrate so this
solves<00:34:01.390><c> the</c><00:34:01.540><c> this</c><00:34:02.380><c> has</c><00:34:02.560><c> the</c><00:34:02.680><c> potential</c><00:34:03.040><c> to</c>

00:34:03.180 --> 00:34:03.190 align:start position:0%
solves the this has the potential to
 

00:34:03.190 --> 00:34:05.880 align:start position:0%
solves the this has the potential to
solve<00:34:03.460><c> the</c><00:34:03.730><c> naming</c><00:34:04.150><c> part</c><00:34:04.600><c> where</c><00:34:05.320><c> now</c><00:34:05.590><c> we</c><00:34:05.650><c> can</c>

00:34:05.880 --> 00:34:05.890 align:start position:0%
solve the naming part where now we can
 

00:34:05.890 --> 00:34:08.430 align:start position:0%
solve the naming part where now we can
call<00:34:06.100><c> the</c><00:34:06.220><c> real</c><00:34:06.400><c> method</c><00:34:06.660><c> from</c><00:34:07.660><c> Colin</c><00:34:08.200><c> and</c>

00:34:08.430 --> 00:34:08.440 align:start position:0%
call the real method from Colin and
 

00:34:08.440 --> 00:34:10.830 align:start position:0%
call the real method from Colin and
specify<00:34:09.100><c> the</c><00:34:09.129><c> four</c><00:34:09.460><c> arguments</c><00:34:10.030><c> in</c><00:34:10.179><c> any</c><00:34:10.450><c> order</c>

00:34:10.830 --> 00:34:10.840 align:start position:0%
specify the four arguments in any order
 

00:34:10.840 --> 00:34:13.830 align:start position:0%
specify the four arguments in any order
that<00:34:10.870><c> we</c><00:34:11.110><c> want</c><00:34:11.290><c> based</c><00:34:12.100><c> on</c><00:34:12.389><c> what</c><00:34:13.389><c> names</c><00:34:13.600><c> we</c>

00:34:13.830 --> 00:34:13.840 align:start position:0%
that we want based on what names we
 

00:34:13.840 --> 00:34:18.780 align:start position:0%
that we want based on what names we
provide<00:34:15.450><c> how</c><00:34:16.450><c> about</c><00:34:16.600><c> the</c><00:34:16.720><c> default</c><00:34:17.050><c> value</c><00:34:17.790><c> what</c>

00:34:18.780 --> 00:34:18.790 align:start position:0%
provide how about the default value what
 

00:34:18.790 --> 00:34:21.419 align:start position:0%
provide how about the default value what
if<00:34:18.909><c> we</c><00:34:19.000><c> could</c><00:34:19.149><c> pass</c><00:34:19.330><c> in</c><00:34:20.129><c> what</c><00:34:21.129><c> if</c><00:34:21.220><c> we</c><00:34:21.310><c> could</c>

00:34:21.419 --> 00:34:21.429 align:start position:0%
if we could pass in what if we could
 

00:34:21.429 --> 00:34:23.669 align:start position:0%
if we could pass in what if we could
specify<00:34:21.669><c> an</c><00:34:22.060><c> expression</c><00:34:22.629><c> a</c><00:34:22.750><c> Colin</c><00:34:23.139><c> expression</c>

00:34:23.669 --> 00:34:23.679 align:start position:0%
specify an expression a Colin expression
 

00:34:23.679 --> 00:34:27.419 align:start position:0%
specify an expression a Colin expression
which<00:34:24.460><c> allowed</c><00:34:24.790><c> the</c><00:34:25.149><c> compiler</c><00:34:25.810><c> to</c><00:34:26.399><c> supply</c><00:34:27.399><c> a</c>

00:34:27.419 --> 00:34:27.429 align:start position:0%
which allowed the compiler to supply a
 

00:34:27.429 --> 00:34:30.210 align:start position:0%
which allowed the compiler to supply a
default<00:34:27.940><c> when</c><00:34:28.840><c> one</c><00:34:29.020><c> wasn't</c><00:34:29.230><c> supplied</c><00:34:29.710><c> for</c><00:34:29.980><c> you</c>

00:34:30.210 --> 00:34:30.220 align:start position:0%
default when one wasn't supplied for you
 

00:34:30.220 --> 00:34:33.530 align:start position:0%
default when one wasn't supplied for you
by<00:34:31.060><c> you</c>

00:34:33.530 --> 00:34:33.540 align:start position:0%
 
 

00:34:33.540 --> 00:34:37.520 align:start position:0%
 
this<00:34:34.540><c> would</c><00:34:34.720><c> change</c><00:34:34.900><c> our</c><00:34:35.670><c> original</c><00:34:36.670><c> extension</c>

00:34:37.520 --> 00:34:37.530 align:start position:0%
this would change our original extension
 

00:34:37.530 --> 00:34:40.410 align:start position:0%
this would change our original extension
calling<00:34:38.530><c> convention</c><00:34:39.010><c> from</c><00:34:39.300><c> calling</c><00:34:40.300><c> our</c>

00:34:40.410 --> 00:34:40.420 align:start position:0%
calling convention from calling our
 

00:34:40.420 --> 00:34:42.300 align:start position:0%
calling convention from calling our
extension<00:34:40.960><c> to</c><00:34:41.230><c> actually</c><00:34:41.650><c> just</c><00:34:41.860><c> using</c><00:34:42.190><c> the</c>

00:34:42.300 --> 00:34:42.310 align:start position:0%
extension to actually just using the
 

00:34:42.310 --> 00:34:46.650 align:start position:0%
extension to actually just using the
real<00:34:42.460><c> method</c><00:34:43.050><c> and</c><00:34:44.370><c> then</c><00:34:45.370><c> in</c><00:34:45.460><c> the</c><00:34:45.550><c> bytecode</c><00:34:45.730><c> we</c>

00:34:46.650 --> 00:34:46.660 align:start position:0%
real method and then in the bytecode we
 

00:34:46.660 --> 00:34:48.690 align:start position:0%
real method and then in the bytecode we
get<00:34:46.810><c> the</c><00:34:46.930><c> thing</c><00:34:47.170><c> that</c><00:34:47.200><c> we've</c><00:34:47.530><c> started</c><00:34:48.430><c> with</c>

00:34:48.690 --> 00:34:48.700 align:start position:0%
get the thing that we've started with
 

00:34:48.700 --> 00:34:51.600 align:start position:0%
get the thing that we've started with
the<00:34:49.450><c> thing</c><00:34:49.720><c> that</c><00:34:50.020><c> our</c><00:34:50.350><c> explicit</c><00:34:50.950><c> extension</c>

00:34:51.600 --> 00:34:51.610 align:start position:0%
the thing that our explicit extension
 

00:34:51.610 --> 00:34:54.150 align:start position:0%
the thing that our explicit extension
would<00:34:52.090><c> in</c><00:34:52.330><c> line</c><00:34:52.540><c> too</c><00:34:52.750><c> but</c><00:34:53.530><c> now</c><00:34:53.650><c> the</c><00:34:53.710><c> extension</c>

00:34:54.150 --> 00:34:54.160 align:start position:0%
would in line too but now the extension
 

00:34:54.160 --> 00:34:57.360 align:start position:0%
would in line too but now the extension
doesn't<00:34:54.910><c> have</c><00:34:55.000><c> to</c><00:34:55.120><c> exist</c><00:34:55.450><c> the</c><00:34:56.320><c> metadata</c><00:34:56.860><c> that</c>

00:34:57.360 --> 00:34:57.370 align:start position:0%
doesn't have to exist the metadata that
 

00:34:57.370 --> 00:35:00.140 align:start position:0%
doesn't have to exist the metadata that
we<00:34:58.180><c> added</c><00:34:58.690><c> in</c><00:34:58.840><c> the</c><00:34:58.900><c> form</c><00:34:59.140><c> of</c><00:34:59.200><c> annotations</c>

00:35:00.140 --> 00:35:00.150 align:start position:0%
we added in the form of annotations
 

00:35:00.150 --> 00:35:02.520 align:start position:0%
we added in the form of annotations
informed<00:35:01.150><c> the</c><00:35:01.270><c> Colin</c><00:35:01.600><c> compiler</c><00:35:02.080><c> that</c><00:35:02.110><c> we</c>

00:35:02.520 --> 00:35:02.530 align:start position:0%
informed the Colin compiler that we
 

00:35:02.530 --> 00:35:04.890 align:start position:0%
informed the Colin compiler that we
wanted<00:35:02.830><c> to</c><00:35:03.010><c> enhance</c><00:35:03.340><c> our</c><00:35:03.940><c> ability</c><00:35:04.450><c> to</c><00:35:04.600><c> call</c>

00:35:04.890 --> 00:35:04.900 align:start position:0%
wanted to enhance our ability to call
 

00:35:04.900 --> 00:35:07.470 align:start position:0%
wanted to enhance our ability to call
this<00:35:05.350><c> function</c><00:35:05.620><c> in</c><00:35:06.460><c> a</c><00:35:06.580><c> call</c><00:35:06.760><c> and</c><00:35:06.910><c> specific</c><00:35:07.330><c> way</c>

00:35:07.470 --> 00:35:07.480 align:start position:0%
this function in a call and specific way
 

00:35:07.480 --> 00:35:11.070 align:start position:0%
this function in a call and specific way
leveraging<00:35:08.320><c> the</c><00:35:08.440><c> Kotlin</c><00:35:08.770><c> features</c><00:35:09.130><c> and</c><00:35:10.080><c> so</c>

00:35:11.070 --> 00:35:11.080 align:start position:0%
leveraging the Kotlin features and so
 

00:35:11.080 --> 00:35:15.990 align:start position:0%
leveraging the Kotlin features and so
we're<00:35:11.230><c> able</c><00:35:11.350><c> to</c><00:35:11.500><c> do</c><00:35:11.740><c> so</c><00:35:14.100><c> this</c><00:35:15.100><c> is</c><00:35:15.250><c> something</c><00:35:15.580><c> so</c>

00:35:15.990 --> 00:35:16.000 align:start position:0%
we're able to do so this is something so
 

00:35:16.000 --> 00:35:20.190 align:start position:0%
we're able to do so this is something so
colin<00:35:16.420><c> has</c><00:35:16.600><c> this</c><00:35:18.690><c> process</c><00:35:19.690><c> which</c><00:35:19.990><c> is</c><00:35:20.020><c> called</c>

00:35:20.190 --> 00:35:20.200 align:start position:0%
colin has this process which is called
 

00:35:20.200 --> 00:35:23.250 align:start position:0%
colin has this process which is called
keep<00:35:20.650><c> its</c><00:35:21.310><c> collin</c><00:35:21.930><c> evolution</c><00:35:22.930><c> and</c>

00:35:23.250 --> 00:35:23.260 align:start position:0%
keep its collin evolution and
 

00:35:23.260 --> 00:35:26.250 align:start position:0%
keep its collin evolution and
enhancement<00:35:24.010><c> process</c><00:35:24.750><c> and</c><00:35:25.750><c> just</c><00:35:26.170><c> this</c>

00:35:26.250 --> 00:35:26.260 align:start position:0%
enhancement process and just this
 

00:35:26.260 --> 00:35:28.320 align:start position:0%
enhancement process and just this
morning<00:35:26.500><c> we</c><00:35:26.740><c> proposed</c><00:35:27.340><c> this</c><00:35:27.820><c> these</c>

00:35:28.320 --> 00:35:28.330 align:start position:0%
morning we proposed this these
 

00:35:28.330 --> 00:35:31.680 align:start position:0%
morning we proposed this these
extensions<00:35:28.960><c> or</c><00:35:29.530><c> sorry</c><00:35:29.770><c> these</c><00:35:29.920><c> annotations</c><00:35:30.690><c> as</c>

00:35:31.680 --> 00:35:31.690 align:start position:0%
extensions or sorry these annotations as
 

00:35:31.690 --> 00:35:34.200 align:start position:0%
extensions or sorry these annotations as
keep<00:35:32.230><c> 1:10</c><00:35:32.800><c> so</c><00:35:33.610><c> this</c><00:35:33.700><c> is</c><00:35:33.820><c> something</c><00:35:34.090><c> we're</c>

00:35:34.200 --> 00:35:34.210 align:start position:0%
keep 1:10 so this is something we're
 

00:35:34.210 --> 00:35:38.460 align:start position:0%
keep 1:10 so this is something we're
proposing<00:35:34.510><c> to</c><00:35:34.840><c> add</c><00:35:34.990><c> to</c><00:35:36.600><c> the</c><00:35:37.600><c> Colin</c><00:35:37.930><c> compiler</c>

00:35:38.460 --> 00:35:38.470 align:start position:0%
proposing to add to the Colin compiler
 

00:35:38.470 --> 00:35:40.470 align:start position:0%
proposing to add to the Colin compiler
so<00:35:39.280><c> that</c><00:35:39.460><c> it</c><00:35:39.610><c> can</c><00:35:39.760><c> understand</c><00:35:40.240><c> these</c>

00:35:40.470 --> 00:35:40.480 align:start position:0%
so that it can understand these
 

00:35:40.480 --> 00:35:42.990 align:start position:0%
so that it can understand these
annotations<00:35:41.080><c> we</c><00:35:42.040><c> have</c><00:35:42.160><c> extension</c><00:35:42.490><c> function</c>

00:35:42.990 --> 00:35:43.000 align:start position:0%
annotations we have extension function
 

00:35:43.000 --> 00:35:44.850 align:start position:0%
annotations we have extension function
and<00:35:43.210><c> extension</c><00:35:43.630><c> property</c><00:35:44.110><c> which</c><00:35:44.410><c> are</c><00:35:44.560><c> for</c>

00:35:44.850 --> 00:35:44.860 align:start position:0%
and extension property which are for
 

00:35:44.860 --> 00:35:47.940 align:start position:0%
and extension property which are for
static<00:35:45.310><c> methods</c><00:35:46.350><c> default</c><00:35:47.350><c> value</c><00:35:47.710><c> which</c>

00:35:47.940 --> 00:35:47.950 align:start position:0%
static methods default value which
 

00:35:47.950 --> 00:35:49.740 align:start position:0%
static methods default value which
allows<00:35:48.220><c> supplying</c><00:35:48.670><c> default</c><00:35:49.120><c> values</c><00:35:49.480><c> for</c>

00:35:49.740 --> 00:35:49.750 align:start position:0%
allows supplying default values for
 

00:35:49.750 --> 00:35:53.910 align:start position:0%
allows supplying default values for
parameters<00:35:50.130><c> and</c><00:35:51.420><c> then</c><00:35:52.420><c> Katie</c><00:35:52.810><c> name</c><00:35:53.200><c> which</c>

00:35:53.910 --> 00:35:53.920 align:start position:0%
parameters and then Katie name which
 

00:35:53.920 --> 00:35:55.380 align:start position:0%
parameters and then Katie name which
allows<00:35:54.160><c> you</c><00:35:54.340><c> to</c><00:35:54.400><c> provide</c><00:35:54.700><c> an</c><00:35:54.910><c> alternate</c><00:35:55.360><c> name</c>

00:35:55.380 --> 00:35:55.390 align:start position:0%
allows you to provide an alternate name
 

00:35:55.390 --> 00:35:59.700 align:start position:0%
allows you to provide an alternate name
for<00:35:55.600><c> methods</c><00:35:56.310><c> fields</c><00:35:57.310><c> or</c><00:35:57.520><c> parameters</c><00:35:58.710><c> now</c>

00:35:59.700 --> 00:35:59.710 align:start position:0%
for methods fields or parameters now
 

00:35:59.710 --> 00:36:03.260 align:start position:0%
for methods fields or parameters now
it's<00:35:59.830><c> very</c><00:36:00.010><c> important</c><00:36:00.370><c> to</c><00:36:00.460><c> note</c><00:36:00.640><c> that</c><00:36:01.350><c> this</c><00:36:02.350><c> is</c>

00:36:03.260 --> 00:36:03.270 align:start position:0%
it's very important to note that this is
 

00:36:03.270 --> 00:36:06.000 align:start position:0%
it's very important to note that this is
this<00:36:04.270><c> is</c><00:36:04.330><c> extremely</c><00:36:04.810><c> early</c><00:36:05.080><c> these</c><00:36:05.710><c> names</c>

00:36:06.000 --> 00:36:06.010 align:start position:0%
this is extremely early these names
 

00:36:06.010 --> 00:36:07.950 align:start position:0%
this is extremely early these names
might<00:36:06.250><c> change</c><00:36:06.550><c> the</c><00:36:06.970><c> semantics</c><00:36:07.450><c> might</c><00:36:07.630><c> change</c>

00:36:07.950 --> 00:36:07.960 align:start position:0%
might change the semantics might change
 

00:36:07.960 --> 00:36:10.530 align:start position:0%
might change the semantics might change
this<00:36:08.410><c> may</c><00:36:08.620><c> never</c><00:36:08.950><c> actually</c><00:36:09.010><c> be</c><00:36:09.580><c> accepted</c><00:36:09.940><c> into</c>

00:36:10.530 --> 00:36:10.540 align:start position:0%
this may never actually be accepted into
 

00:36:10.540 --> 00:36:13.050 align:start position:0%
this may never actually be accepted into
the<00:36:10.630><c> Colin</c><00:36:10.900><c> compiler</c><00:36:11.520><c> we</c><00:36:12.520><c> have</c><00:36:12.700><c> been</c><00:36:12.850><c> working</c>

00:36:13.050 --> 00:36:13.060 align:start position:0%
the Colin compiler we have been working
 

00:36:13.060 --> 00:36:14.850 align:start position:0%
the Colin compiler we have been working
with<00:36:13.210><c> the</c><00:36:13.720><c> JetBrains</c><00:36:14.110><c> team</c><00:36:14.350><c> for</c><00:36:14.650><c> quite</c><00:36:14.770><c> a</c>

00:36:14.850 --> 00:36:14.860 align:start position:0%
with the JetBrains team for quite a
 

00:36:14.860 --> 00:36:16.680 align:start position:0%
with the JetBrains team for quite a
while<00:36:15.040><c> on</c><00:36:15.280><c> this</c><00:36:15.490><c> and</c><00:36:15.910><c> it's</c><00:36:16.120><c> actually</c><00:36:16.270><c> already</c>

00:36:16.680 --> 00:36:16.690 align:start position:0%
while on this and it's actually already
 

00:36:16.690 --> 00:36:18.390 align:start position:0%
while on this and it's actually already
some<00:36:17.200><c> of</c><00:36:17.230><c> this</c><00:36:17.440><c> is</c><00:36:17.620><c> already</c><00:36:17.830><c> prototyped</c>

00:36:18.390 --> 00:36:18.400 align:start position:0%
some of this is already prototyped
 

00:36:18.400 --> 00:36:21.540 align:start position:0%
some of this is already prototyped
inside<00:36:19.030><c> the</c><00:36:19.150><c> Colin</c><00:36:19.480><c> compiler</c><00:36:20.280><c> we</c><00:36:21.280><c> really</c>

00:36:21.540 --> 00:36:21.550 align:start position:0%
inside the Colin compiler we really
 

00:36:21.550 --> 00:36:24.420 align:start position:0%
inside the Colin compiler we really
think<00:36:21.730><c> this</c><00:36:21.850><c> would</c><00:36:22.030><c> be</c><00:36:22.240><c> a</c><00:36:23.140><c> way</c><00:36:23.860><c> that</c><00:36:24.130><c> we</c><00:36:24.190><c> could</c>

00:36:24.420 --> 00:36:24.430 align:start position:0%
think this would be a way that we could
 

00:36:24.430 --> 00:36:28.080 align:start position:0%
think this would be a way that we could
enhance<00:36:24.910><c> the</c><00:36:25.210><c> android</c><00:36:25.570><c> framework</c><00:36:26.220><c> for</c><00:36:27.220><c> Kotlin</c>

00:36:28.080 --> 00:36:28.090 align:start position:0%
enhance the android framework for Kotlin
 

00:36:28.090 --> 00:36:30.210 align:start position:0%
enhance the android framework for Kotlin
callers<00:36:28.570><c> without</c><00:36:29.230><c> actually</c><00:36:29.650><c> having</c><00:36:29.770><c> to</c><00:36:29.950><c> go</c>

00:36:30.210 --> 00:36:30.220 align:start position:0%
callers without actually having to go
 

00:36:30.220 --> 00:36:32.820 align:start position:0%
callers without actually having to go
and<00:36:30.540><c> rewrite</c><00:36:31.540><c> the</c><00:36:31.810><c> android</c><00:36:32.080><c> framework</c><00:36:32.110><c> or</c><00:36:32.740><c> at</c>

00:36:32.820 --> 00:36:32.830 align:start position:0%
and rewrite the android framework or at
 

00:36:32.830 --> 00:36:35.550 align:start position:0%
and rewrite the android framework or at
least<00:36:33.010><c> its</c><00:36:33.190><c> API</c><00:36:33.460><c> and</c><00:36:33.880><c> Kotlin</c><00:36:34.690><c> which</c><00:36:35.140><c> is</c><00:36:35.290><c> really</c>

00:36:35.550 --> 00:36:35.560 align:start position:0%
least its API and Kotlin which is really
 

00:36:35.560 --> 00:36:39.660 align:start position:0%
least its API and Kotlin which is really
not<00:36:35.710><c> feasible</c><00:36:37.350><c> and</c><00:36:38.350><c> it's</c><00:36:38.980><c> also</c><00:36:39.130><c> important</c><00:36:39.610><c> to</c>

00:36:39.660 --> 00:36:39.670 align:start position:0%
not feasible and it's also important to
 

00:36:39.670 --> 00:36:42.020 align:start position:0%
not feasible and it's also important to
note<00:36:39.910><c> that</c><00:36:40.080><c> while</c><00:36:41.080><c> this</c><00:36:41.230><c> is</c><00:36:41.290><c> an</c><00:36:41.560><c> option</c>

00:36:42.020 --> 00:36:42.030 align:start position:0%
note that while this is an option
 

00:36:42.030 --> 00:36:44.100 align:start position:0%
note that while this is an option
assuming<00:36:43.030><c> that</c><00:36:43.150><c> it</c><00:36:43.270><c> actually</c><00:36:43.420><c> makes</c><00:36:43.780><c> it</c><00:36:43.900><c> into</c>

00:36:44.100 --> 00:36:44.110 align:start position:0%
assuming that it actually makes it into
 

00:36:44.110 --> 00:36:46.230 align:start position:0%
assuming that it actually makes it into
the<00:36:44.140><c> Colin</c><00:36:44.500><c> compiler</c>

00:36:46.230 --> 00:36:46.240 align:start position:0%
the Colin compiler
 

00:36:46.240 --> 00:36:48.789 align:start position:0%
the Colin compiler
it<00:36:47.240><c> doesn't</c><00:36:47.660><c> totally</c><00:36:48.020><c> solve</c><00:36:48.260><c> every</c><00:36:48.710><c> problem</c>

00:36:48.789 --> 00:36:48.799 align:start position:0%
it doesn't totally solve every problem
 

00:36:48.799 --> 00:36:51.849 align:start position:0%
it doesn't totally solve every problem
that<00:36:49.369><c> our</c><00:36:49.520><c> existing</c><00:36:50.150><c> extensions</c><00:36:50.720><c> are</c><00:36:51.049><c> are</c>

00:36:51.849 --> 00:36:51.859 align:start position:0%
that our existing extensions are are
 

00:36:51.859 --> 00:36:55.390 align:start position:0%
that our existing extensions are are
solving<00:36:52.599><c> where</c><00:36:53.599><c> we</c><00:36:54.170><c> determine</c><00:36:55.099><c> these</c>

00:36:55.390 --> 00:36:55.400 align:start position:0%
solving where we determine these
 

00:36:55.400 --> 00:36:57.519 align:start position:0%
solving where we determine these
annotations<00:36:56.180><c> that</c><00:36:56.359><c> we</c><00:36:56.599><c> proposed</c><00:36:57.020><c> and</c><00:36:57.319><c> keep</c>

00:36:57.519 --> 00:36:57.529 align:start position:0%
annotations that we proposed and keep
 

00:36:57.529 --> 00:36:59.769 align:start position:0%
annotations that we proposed and keep
110<00:36:57.980><c> through</c><00:36:58.430><c> looking</c><00:36:58.910><c> through</c><00:36:59.240><c> a</c><00:36:59.270><c> bunch</c><00:36:59.630><c> of</c>

00:36:59.769 --> 00:36:59.779 align:start position:0%
110 through looking through a bunch of
 

00:36:59.779 --> 00:37:01.839 align:start position:0%
110 through looking through a bunch of
open<00:37:00.049><c> source</c><00:37:00.230><c> libraries</c><00:37:00.770><c> looking</c><00:37:01.609><c> through</c>

00:37:01.839 --> 00:37:01.849 align:start position:0%
open source libraries looking through
 

00:37:01.849 --> 00:37:04.750 align:start position:0%
open source libraries looking through
our<00:37:02.180><c> own</c><00:37:02.329><c> libraries</c><00:37:02.930><c> and</c><00:37:03.170><c> seeing</c><00:37:03.920><c> what</c><00:37:04.430><c> we</c>

00:37:04.750 --> 00:37:04.760 align:start position:0%
our own libraries and seeing what we
 

00:37:04.760 --> 00:37:06.190 align:start position:0%
our own libraries and seeing what we
thought<00:37:05.119><c> would</c><00:37:05.359><c> be</c><00:37:05.420><c> the</c><00:37:05.690><c> most</c><00:37:05.900><c> useful</c>

00:37:06.190 --> 00:37:06.200 align:start position:0%
thought would be the most useful
 

00:37:06.200 --> 00:37:10.170 align:start position:0%
thought would be the most useful
extensions<00:37:07.010><c> what</c><00:37:07.279><c> the</c><00:37:07.460><c> the</c><00:37:07.700><c> pattern</c><00:37:08.319><c> of</c><00:37:09.319><c> Java</c>

00:37:10.170 --> 00:37:10.180 align:start position:0%
extensions what the the pattern of Java
 

00:37:10.180 --> 00:37:15.190 align:start position:0%
extensions what the the pattern of Java
methods<00:37:12.760><c> were</c><00:37:13.760><c> such</c><00:37:14.420><c> that</c><00:37:14.569><c> they</c><00:37:14.869><c> would</c><00:37:14.990><c> want</c>

00:37:15.190 --> 00:37:15.200 align:start position:0%
methods were such that they would want
 

00:37:15.200 --> 00:37:19.359 align:start position:0%
methods were such that they would want
to<00:37:15.260><c> be</c><00:37:15.470><c> turned</c><00:37:15.650><c> into</c><00:37:15.859><c> extensions</c><00:37:16.599><c> and</c><00:37:17.920><c> so</c><00:37:18.920><c> the</c>

00:37:19.359 --> 00:37:19.369 align:start position:0%
to be turned into extensions and so the
 

00:37:19.369 --> 00:37:22.900 align:start position:0%
to be turned into extensions and so the
latter<00:37:19.609><c> two</c><00:37:19.880><c> really</c><00:37:20.329><c> are</c><00:37:20.539><c> complementary</c><00:37:21.910><c> the</c>

00:37:22.900 --> 00:37:22.910 align:start position:0%
latter two really are complementary the
 

00:37:22.910 --> 00:37:24.880 align:start position:0%
latter two really are complementary the
big<00:37:23.089><c> advantages</c><00:37:23.630><c> of</c><00:37:23.690><c> the</c><00:37:24.049><c> annotations</c><00:37:24.440><c> is</c>

00:37:24.880 --> 00:37:24.890 align:start position:0%
big advantages of the annotations is
 

00:37:24.890 --> 00:37:26.799 align:start position:0%
big advantages of the annotations is
that<00:37:25.099><c> you</c><00:37:25.250><c> you</c><00:37:25.640><c> retain</c><00:37:26.000><c> the</c><00:37:26.029><c> single</c><00:37:26.480><c> source</c><00:37:26.690><c> of</c>

00:37:26.799 --> 00:37:26.809 align:start position:0%
that you you retain the single source of
 

00:37:26.809 --> 00:37:30.819 align:start position:0%
that you you retain the single source of
truth<00:37:27.369><c> you</c><00:37:28.369><c> don't</c><00:37:28.549><c> have</c><00:37:28.849><c> to</c><00:37:29.119><c> really</c><00:37:29.930><c> know</c>

00:37:30.819 --> 00:37:30.829 align:start position:0%
truth you don't have to really know
 

00:37:30.829 --> 00:37:33.160 align:start position:0%
truth you don't have to really know
Kotlin<00:37:31.309><c> you</c><00:37:31.490><c> don't</c><00:37:31.670><c> have</c><00:37:31.789><c> to</c><00:37:31.940><c> add</c><00:37:32.170><c> Kotlin</c>

00:37:33.160 --> 00:37:33.170 align:start position:0%
Kotlin you don't have to add Kotlin
 

00:37:33.170 --> 00:37:34.569 align:start position:0%
Kotlin you don't have to add Kotlin
compiler<00:37:33.589><c> to</c><00:37:33.680><c> your</c><00:37:33.799><c> build</c><00:37:33.980><c> system</c><00:37:34.160><c> you</c><00:37:34.490><c> don't</c>

00:37:34.569 --> 00:37:34.579 align:start position:0%
compiler to your build system you don't
 

00:37:34.579 --> 00:37:37.299 align:start position:0%
compiler to your build system you don't
have<00:37:34.670><c> to</c><00:37:34.789><c> publish</c><00:37:35.150><c> tippling</c><00:37:35.510><c> artifacts</c><00:37:36.309><c> even</c>

00:37:37.299 --> 00:37:37.309 align:start position:0%
have to publish tippling artifacts even
 

00:37:37.309 --> 00:37:39.279 align:start position:0%
have to publish tippling artifacts even
if<00:37:37.369><c> you're</c><00:37:37.549><c> a</c><00:37:37.579><c> pure</c><00:37:38.000><c> Java</c><00:37:38.299><c> library</c><00:37:38.839><c> you</c><00:37:39.140><c> can</c>

00:37:39.279 --> 00:37:39.289 align:start position:0%
if you're a pure Java library you can
 

00:37:39.289 --> 00:37:42.400 align:start position:0%
if you're a pure Java library you can
add<00:37:39.619><c> these</c><00:37:39.770><c> annotations</c><00:37:40.400><c> and</c><00:37:40.730><c> just</c><00:37:41.410><c> enhance</c>

00:37:42.400 --> 00:37:42.410 align:start position:0%
add these annotations and just enhance
 

00:37:42.410 --> 00:37:44.680 align:start position:0%
add these annotations and just enhance
your<00:37:42.619><c> API</c><00:37:42.950><c> so</c><00:37:43.430><c> that</c><00:37:43.460><c> Kotlin</c><00:37:43.910><c> callers</c><00:37:44.240><c> get</c><00:37:44.510><c> the</c>

00:37:44.680 --> 00:37:44.690 align:start position:0%
your API so that Kotlin callers get the
 

00:37:44.690 --> 00:37:51.220 align:start position:0%
your API so that Kotlin callers get the
more<00:37:44.990><c> idiomatic</c><00:37:45.289><c> syntax</c><00:37:49.329><c> all</c><00:37:50.329><c> right</c><00:37:50.510><c> so</c><00:37:51.170><c> to</c>

00:37:51.220 --> 00:37:51.230 align:start position:0%
more idiomatic syntax all right so to
 

00:37:51.230 --> 00:37:53.589 align:start position:0%
more idiomatic syntax all right so to
sum<00:37:51.470><c> up</c><00:37:51.940><c> core</c><00:37:52.940><c> KTX</c>

00:37:53.589 --> 00:37:53.599 align:start position:0%
sum up core KTX
 

00:37:53.599 --> 00:37:56.440 align:start position:0%
sum up core KTX
is<00:37:53.779><c> now</c><00:37:54.319><c> part</c><00:37:54.920><c> of</c><00:37:55.039><c> android</c><00:37:55.579><c> jetpack</c><00:37:55.940><c> version</c>

00:37:56.440 --> 00:37:56.450 align:start position:0%
is now part of android jetpack version
 

00:37:56.450 --> 00:37:57.910 align:start position:0%
is now part of android jetpack version
with<00:37:56.599><c> android</c><00:37:56.990><c> jetpack</c><00:37:57.319><c> released</c><00:37:57.740><c> with</c>

00:37:57.910 --> 00:37:57.920 align:start position:0%
with android jetpack released with
 

00:37:57.920 --> 00:38:01.120 align:start position:0%
with android jetpack released with
Android<00:37:58.069><c> jetpack</c><00:37:59.319><c> there's</c><00:38:00.319><c> a</c><00:38:00.710><c> few</c><00:38:01.099><c> new</c>

00:38:01.120 --> 00:38:01.130 align:start position:0%
Android jetpack there's a few new
 

00:38:01.130 --> 00:38:03.220 align:start position:0%
Android jetpack there's a few new
artifacts<00:38:01.849><c> as</c><00:38:02.059><c> you</c><00:38:02.329><c> can</c><00:38:02.480><c> see</c><00:38:02.690><c> here</c><00:38:03.020><c> on</c><00:38:03.140><c> the</c>

00:38:03.220 --> 00:38:03.230 align:start position:0%
artifacts as you can see here on the
 

00:38:03.230 --> 00:38:05.670 align:start position:0%
artifacts as you can see here on the
screen<00:38:03.349><c> there's</c><00:38:04.160><c> definitely</c><00:38:04.640><c> more</c><00:38:04.819><c> coming</c>

00:38:05.670 --> 00:38:05.680 align:start position:0%
screen there's definitely more coming
 

00:38:05.680 --> 00:38:07.930 align:start position:0%
screen there's definitely more coming
notable<00:38:06.680><c> ones</c><00:38:06.859><c> that</c><00:38:07.130><c> we</c><00:38:07.220><c> think</c><00:38:07.400><c> are</c><00:38:07.549><c> missing</c>

00:38:07.930 --> 00:38:07.940 align:start position:0%
notable ones that we think are missing
 

00:38:07.940 --> 00:38:11.319 align:start position:0%
notable ones that we think are missing
our<00:38:08.270><c> slices</c><00:38:08.839><c> and</c><00:38:09.349><c> view</c><00:38:09.680><c> model</c><00:38:10.039><c> so</c><00:38:10.609><c> I</c><00:38:10.970><c> would</c><00:38:11.210><c> not</c>

00:38:11.319 --> 00:38:11.329 align:start position:0%
our slices and view model so I would not
 

00:38:11.329 --> 00:38:13.240 align:start position:0%
our slices and view model so I would not
be<00:38:11.390><c> surprised</c><00:38:11.869><c> to</c><00:38:12.049><c> see</c><00:38:12.140><c> artifacts</c><00:38:12.859><c> for</c><00:38:13.099><c> those</c>

00:38:13.240 --> 00:38:13.250 align:start position:0%
be surprised to see artifacts for those
 

00:38:13.250 --> 00:38:18.130 align:start position:0%
be surprised to see artifacts for those
in<00:38:13.700><c> the</c><00:38:14.150><c> coming</c><00:38:14.299><c> months</c><00:38:16.630><c> please</c><00:38:17.630><c> check</c><00:38:17.960><c> out</c>

00:38:18.130 --> 00:38:18.140 align:start position:0%
in the coming months please check out
 

00:38:18.140 --> 00:38:20.529 align:start position:0%
in the coming months please check out
the<00:38:18.470><c> Kotlin</c><00:38:19.309><c> version</c><00:38:19.849><c> of</c><00:38:20.029><c> the</c><00:38:20.180><c> reference</c>

00:38:20.529 --> 00:38:20.539 align:start position:0%
the Kotlin version of the reference
 

00:38:20.539 --> 00:38:25.269 align:start position:0%
the Kotlin version of the reference
document<00:38:21.099><c> or</c><00:38:22.099><c> yeah</c><00:38:23.089><c> the</c><00:38:23.240><c> reference</c><00:38:23.950><c> we</c><00:38:24.950><c> you</c>

00:38:25.269 --> 00:38:25.279 align:start position:0%
document or yeah the reference we you
 

00:38:25.279 --> 00:38:26.650 align:start position:0%
document or yeah the reference we you
know<00:38:25.400><c> this</c><00:38:25.549><c> is</c><00:38:25.670><c> this</c><00:38:25.910><c> is</c><00:38:26.029><c> extremely</c><00:38:26.390><c> early</c>

00:38:26.650 --> 00:38:26.660 align:start position:0%
know this is this is extremely early
 

00:38:26.660 --> 00:38:29.920 align:start position:0%
know this is this is extremely early
where<00:38:27.339><c> this</c><00:38:28.339><c> required</c><00:38:28.760><c> changes</c><00:38:29.270><c> in</c><00:38:29.420><c> daca</c><00:38:29.720><c> and</c>

00:38:29.920 --> 00:38:29.930 align:start position:0%
where this required changes in daca and
 

00:38:29.930 --> 00:38:33.279 align:start position:0%
where this required changes in daca and
and<00:38:30.500><c> how</c><00:38:30.680><c> we</c><00:38:30.710><c> produce</c><00:38:30.950><c> Docs</c><00:38:31.400><c> and</c><00:38:31.700><c> so</c><00:38:32.289><c> it's</c>

00:38:33.279 --> 00:38:33.289 align:start position:0%
and how we produce Docs and so it's
 

00:38:33.289 --> 00:38:34.510 align:start position:0%
and how we produce Docs and so it's
something<00:38:33.470><c> we</c><00:38:33.740><c> just</c><00:38:33.859><c> wanted</c><00:38:34.130><c> to</c><00:38:34.190><c> get</c><00:38:34.339><c> out</c>

00:38:34.510 --> 00:38:34.520 align:start position:0%
something we just wanted to get out
 

00:38:34.520 --> 00:38:36.760 align:start position:0%
something we just wanted to get out
there<00:38:34.700><c> and</c><00:38:34.880><c> show</c><00:38:35.119><c> you</c><00:38:35.180><c> as</c><00:38:35.390><c> a</c><00:38:35.420><c> preview</c><00:38:35.930><c> this</c><00:38:36.619><c> is</c>

00:38:36.760 --> 00:38:36.770 align:start position:0%
there and show you as a preview this is
 

00:38:36.770 --> 00:38:37.720 align:start position:0%
there and show you as a preview this is
definitely<00:38:37.039><c> something</c><00:38:37.339><c> that's</c><00:38:37.609><c> being</c>

00:38:37.720 --> 00:38:37.730 align:start position:0%
definitely something that's being
 

00:38:37.730 --> 00:38:42.220 align:start position:0%
definitely something that's being
actively<00:38:38.150><c> worked</c><00:38:38.270><c> on</c><00:38:41.049><c> there's</c><00:38:42.049><c> a</c><00:38:42.140><c> new</c>

00:38:42.220 --> 00:38:42.230 align:start position:0%
actively worked on there's a new
 

00:38:42.230 --> 00:38:45.789 align:start position:0%
actively worked on there's a new
component<00:38:42.859><c> on</c><00:38:43.220><c> the</c><00:38:43.700><c> Android</c><00:38:44.420><c> bug</c><00:38:44.720><c> tracker</c><00:38:45.049><c> for</c>

00:38:45.789 --> 00:38:45.799 align:start position:0%
component on the Android bug tracker for
 

00:38:45.799 --> 00:38:50.740 align:start position:0%
component on the Android bug tracker for
Android<00:38:46.339><c> KTX</c><00:38:47.829><c> because</c><00:38:48.829><c> core</c><00:38:49.760><c> KTX</c><00:38:50.240><c> and</c><00:38:50.539><c> all</c><00:38:50.630><c> the</c>

00:38:50.740 --> 00:38:50.750 align:start position:0%
Android KTX because core KTX and all the
 

00:38:50.750 --> 00:38:53.019 align:start position:0%
Android KTX because core KTX and all the
KTX<00:38:51.109><c> libraries</c><00:38:51.619><c> are</c><00:38:51.799><c> now</c><00:38:52.250><c> part</c><00:38:52.549><c> of</c><00:38:52.609><c> jetpack</c>

00:38:53.019 --> 00:38:53.029 align:start position:0%
KTX libraries are now part of jetpack
 

00:38:53.029 --> 00:38:56.180 align:start position:0%
KTX libraries are now part of jetpack
the<00:38:53.930><c> source</c><00:38:54.170><c> of</c><00:38:54.289><c> truth</c><00:38:54.500><c> has</c><00:38:54.710><c> moved</c><00:38:55.010><c> into</c><00:38:55.339><c> the</c>

00:38:56.180 --> 00:38:56.190 align:start position:0%
the source of truth has moved into the
 

00:38:56.190 --> 00:39:00.589 align:start position:0%
the source of truth has moved into the
support<00:38:57.109><c> repository</c><00:38:59.329><c> we're</c><00:39:00.329><c> gonna</c><00:39:00.420><c> be</c>

00:39:00.589 --> 00:39:00.599 align:start position:0%
support repository we're gonna be
 

00:39:00.599 --> 00:39:02.839 align:start position:0%
support repository we're gonna be
migrating<00:39:01.200><c> get</c><00:39:01.589><c> the</c><00:39:01.829><c> github</c><00:39:02.040><c> issues</c><00:39:02.490><c> on</c><00:39:02.760><c> the</c>

00:39:02.839 --> 00:39:02.849 align:start position:0%
migrating get the github issues on the
 

00:39:02.849 --> 00:39:06.020 align:start position:0%
migrating get the github issues on the
github<00:39:03.119><c> project</c><00:39:03.569><c> over</c><00:39:03.960><c> to</c><00:39:04.490><c> this</c><00:39:05.490><c> bug</c><00:39:05.760><c> tracker</c>

00:39:06.020 --> 00:39:06.030 align:start position:0%
github project over to this bug tracker
 

00:39:06.030 --> 00:39:08.510 align:start position:0%
github project over to this bug tracker
in<00:39:06.390><c> the</c><00:39:06.780><c> coming</c><00:39:07.050><c> weeks</c><00:39:07.260><c> but</c><00:39:08.040><c> it's</c><00:39:08.190><c> important</c>

00:39:08.510 --> 00:39:08.520 align:start position:0%
in the coming weeks but it's important
 

00:39:08.520 --> 00:39:10.130 align:start position:0%
in the coming weeks but it's important
to<00:39:08.579><c> note</c><00:39:08.760><c> that</c><00:39:08.790><c> we're</c><00:39:09.150><c> still</c><00:39:09.839><c> going</c><00:39:09.960><c> to</c><00:39:10.020><c> be</c>

00:39:10.130 --> 00:39:10.140 align:start position:0%
to note that we're still going to be
 

00:39:10.140 --> 00:39:12.530 align:start position:0%
to note that we're still going to be
accepting<00:39:10.710><c> poor</c><00:39:11.280><c> requests</c><00:39:11.819><c> to</c><00:39:12.240><c> the</c><00:39:12.359><c> github</c>

00:39:12.530 --> 00:39:12.540 align:start position:0%
accepting poor requests to the github
 

00:39:12.540 --> 00:39:15.290 align:start position:0%
accepting poor requests to the github
repo<00:39:13.069><c> and</c><00:39:14.069><c> syncing</c><00:39:14.490><c> things</c><00:39:14.670><c> back</c><00:39:14.880><c> out</c><00:39:15.030><c> to</c><00:39:15.210><c> the</c>

00:39:15.290 --> 00:39:15.300 align:start position:0%
repo and syncing things back out to the
 

00:39:15.300 --> 00:39:16.790 align:start position:0%
repo and syncing things back out to the
github<00:39:15.450><c> repo</c><00:39:15.839><c> it's</c><00:39:16.079><c> just</c><00:39:16.260><c> that</c><00:39:16.380><c> the</c><00:39:16.500><c> issues</c>

00:39:16.790 --> 00:39:16.800 align:start position:0%
github repo it's just that the issues
 

00:39:16.800 --> 00:39:18.740 align:start position:0%
github repo it's just that the issues
will<00:39:17.099><c> no</c><00:39:17.220><c> longer</c><00:39:17.430><c> be</c><00:39:17.849><c> the</c><00:39:18.000><c> source</c><00:39:18.210><c> of</c><00:39:18.329><c> truth</c><00:39:18.569><c> on</c>

00:39:18.740 --> 00:39:18.750 align:start position:0%
will no longer be the source of truth on
 

00:39:18.750 --> 00:39:20.690 align:start position:0%
will no longer be the source of truth on
github<00:39:19.109><c> it</c><00:39:19.650><c> will</c><00:39:19.800><c> be</c><00:39:19.920><c> on</c><00:39:20.069><c> the</c><00:39:20.190><c> Android</c><00:39:20.520><c> bug</c>

00:39:20.690 --> 00:39:20.700 align:start position:0%
github it will be on the Android bug
 

00:39:20.700 --> 00:39:23.500 align:start position:0%
github it will be on the Android bug
tracker

00:39:23.500 --> 00:39:23.510 align:start position:0%
 
 

00:39:23.510 --> 00:39:27.680 align:start position:0%
 
they<00:39:24.510><c> keep</c><00:39:25.200><c> was</c><00:39:26.130><c> proposed</c><00:39:26.550><c> I</c><00:39:26.880><c> created</c><00:39:27.569><c> the</c>

00:39:27.680 --> 00:39:27.690 align:start position:0%
they keep was proposed I created the
 

00:39:27.690 --> 00:39:30.380 align:start position:0%
they keep was proposed I created the
poor<00:39:27.900><c> request</c><00:39:28.079><c> about</c><00:39:28.500><c> an</c><00:39:28.770><c> hour</c><00:39:28.890><c> ago</c><00:39:29.180><c> please</c><00:39:30.180><c> go</c>

00:39:30.380 --> 00:39:30.390 align:start position:0%
poor request about an hour ago please go
 

00:39:30.390 --> 00:39:32.780 align:start position:0%
poor request about an hour ago please go
check<00:39:30.420><c> that</c><00:39:30.750><c> out</c><00:39:30.810><c> the</c><00:39:31.380><c> the</c><00:39:31.829><c> document</c><00:39:32.310><c> contains</c>

00:39:32.780 --> 00:39:32.790 align:start position:0%
check that out the the document contains
 

00:39:32.790 --> 00:39:36.770 align:start position:0%
check that out the the document contains
a<00:39:32.970><c> lot</c><00:39:33.150><c> more</c><00:39:33.329><c> detail</c><00:39:33.720><c> about</c><00:39:34.140><c> examples</c><00:39:35.660><c> like</c><00:39:36.660><c> I</c>

00:39:36.770 --> 00:39:36.780 align:start position:0%
a lot more detail about examples like I
 

00:39:36.780 --> 00:39:38.390 align:start position:0%
a lot more detail about examples like I
said<00:39:36.990><c> the</c><00:39:37.200><c> annotations</c><00:39:37.859><c> that</c><00:39:37.950><c> were</c><00:39:38.160><c> chosen</c>

00:39:38.390 --> 00:39:38.400 align:start position:0%
said the annotations that were chosen
 

00:39:38.400 --> 00:39:39.890 align:start position:0%
said the annotations that were chosen
are<00:39:38.730><c> the</c><00:39:38.819><c> ones</c><00:39:39.000><c> that</c><00:39:39.180><c> we</c><00:39:39.240><c> think</c><00:39:39.270><c> have</c><00:39:39.569><c> the</c><00:39:39.599><c> most</c>

00:39:39.890 --> 00:39:39.900 align:start position:0%
are the ones that we think have the most
 

00:39:39.900 --> 00:39:42.050 align:start position:0%
are the ones that we think have the most
impact<00:39:40.280><c> but</c><00:39:41.280><c> at</c><00:39:41.339><c> the</c><00:39:41.460><c> bottom</c><00:39:41.550><c> of</c><00:39:41.790><c> the</c><00:39:41.880><c> document</c>

00:39:42.050 --> 00:39:42.060 align:start position:0%
impact but at the bottom of the document
 

00:39:42.060 --> 00:39:44.809 align:start position:0%
impact but at the bottom of the document
you'll<00:39:42.450><c> see</c><00:39:42.630><c> that</c><00:39:42.839><c> there's</c><00:39:43.460><c> if</c><00:39:44.460><c> something</c>

00:39:44.809 --> 00:39:44.819 align:start position:0%
you'll see that there's if something
 

00:39:44.819 --> 00:39:46.130 align:start position:0%
you'll see that there's if something
like<00:39:44.910><c> this</c><00:39:45.089><c> gets</c><00:39:45.359><c> accepted</c><00:39:45.660><c> there's</c><00:39:46.079><c> a</c>

00:39:46.130 --> 00:39:46.140 align:start position:0%
like this gets accepted there's a
 

00:39:46.140 --> 00:39:47.780 align:start position:0%
like this gets accepted there's a
potential<00:39:46.470><c> for</c><00:39:46.619><c> a</c><00:39:46.800><c> future</c><00:39:46.980><c> enhancement</c><00:39:47.640><c> of</c>

00:39:47.780 --> 00:39:47.790 align:start position:0%
potential for a future enhancement of
 

00:39:47.790 --> 00:39:52.910 align:start position:0%
potential for a future enhancement of
even<00:39:48.060><c> more</c><00:39:50.030><c> the</c><00:39:51.030><c> the</c><00:39:51.480><c> link</c><00:39:51.690><c> to</c><00:39:51.839><c> that</c><00:39:51.990><c> should</c><00:39:52.680><c> be</c>

00:39:52.910 --> 00:39:52.920 align:start position:0%
even more the the link to that should be
 

00:39:52.920 --> 00:39:55.490 align:start position:0%
even more the the link to that should be
this<00:39:53.099><c> I</c><00:39:53.609><c> made</c><00:39:54.480><c> this</c><00:39:54.660><c> link</c><00:39:54.869><c> last</c><00:39:55.109><c> night</c><00:39:55.290><c> before</c>

00:39:55.490 --> 00:39:55.500 align:start position:0%
this I made this link last night before
 

00:39:55.500 --> 00:39:56.900 align:start position:0%
this I made this link last night before
I<00:39:55.650><c> submitted</c><00:39:56.010><c> it</c><00:39:56.190><c> so</c><00:39:56.430><c> hopefully</c><00:39:56.790><c> it's</c>

00:39:56.900 --> 00:39:56.910 align:start position:0%
I submitted it so hopefully it's
 

00:39:56.910 --> 00:40:01.770 align:start position:0%
I submitted it so hopefully it's
accurate<00:39:58.099><c> and</c><00:39:59.099><c> that's</c><00:39:59.880><c> it</c><00:40:00.060><c> thank</c><00:40:00.510><c> you</c>

00:40:01.770 --> 00:40:01.780 align:start position:0%
accurate and that's it thank you
 

00:40:01.780 --> 00:40:24.329 align:start position:0%
accurate and that's it thank you
[Music]

