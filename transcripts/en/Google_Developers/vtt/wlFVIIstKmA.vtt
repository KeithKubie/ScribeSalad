WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.670
With new, exciting
mobile devices coming out

00:00:03.670 --> 00:00:07.170
every day with new screen
sizes and resolutions,

00:00:07.170 --> 00:00:09.790
it can be difficult making
sure your images look

00:00:09.790 --> 00:00:13.651
best on every new device
that hits the stores.

00:00:13.651 --> 00:00:14.150
Hi.

00:00:14.150 --> 00:00:16.810
I'm Tenghui from the
Android UI Tokyo team,

00:00:16.810 --> 00:00:20.300
and I'm here to help you make
your graphics look their best

00:00:20.300 --> 00:00:23.320
by telling you all the new
vector graphics support

00:00:23.320 --> 00:00:27.530
we have added in
Android 5.0, Lollipop.

00:00:27.530 --> 00:00:32.009
So what are vector graphics, and
why would you want to use them?

00:00:32.009 --> 00:00:37.240
A normal bitmap represent images
as a set of pixels in a grid.

00:00:37.240 --> 00:00:40.470
But with vector graphics,
you can represent an image

00:00:40.470 --> 00:00:43.990
by describing the
object geometrically.

00:00:43.990 --> 00:00:45.930
This means you can
describe an image

00:00:45.930 --> 00:00:49.460
as a set of points,
lines, and curves,

00:00:49.460 --> 00:00:53.170
along with all the
associated color information.

00:00:53.170 --> 00:00:55.230
So how does this help you?

00:00:55.230 --> 00:01:00.540
The major advantage for vector
graphics is image scalability.

00:01:00.540 --> 00:01:03.080
Take a look at
this bitmap images.

00:01:03.080 --> 00:01:07.760
It looks fine on a low-res
screen with a size of 100x100.

00:01:07.760 --> 00:01:11.040
But if you would put it
on the high-res screen

00:01:11.040 --> 00:01:15.920
with a size of 400x400--
while we can scaled it out,

00:01:15.920 --> 00:01:18.910
you can see how it
ends up looking blurry.

00:01:18.910 --> 00:01:21.200
So what many
developers end up doing

00:01:21.200 --> 00:01:24.005
is creating multiple
versions of each image

00:01:24.005 --> 00:01:26.500
for different
display resolutions.

00:01:26.500 --> 00:01:29.760
This means more time
to create extra access,

00:01:29.760 --> 00:01:35.160
and more space taken up by
the APK and on the device.

00:01:35.160 --> 00:01:40.140
But with vector images, you only
need to create an image once,

00:01:40.140 --> 00:01:42.050
as an XML file.

00:01:42.050 --> 00:01:45.570
And it can scale beautifully
for all different DPIs

00:01:45.570 --> 00:01:47.370
for different devices.

00:01:47.370 --> 00:01:52.680
This not only save space, but
also simplify maintainance.

00:01:52.680 --> 00:01:55.710
You can also use vector
images for animation.

00:01:55.710 --> 00:01:57.770
Instead of having
multiple series

00:01:57.770 --> 00:02:00.780
of images for all
different DPIs,

00:02:00.780 --> 00:02:04.740
now all you need is
just several XML files.

00:02:04.740 --> 00:02:07.930
Prior to the Lollipop
release, if you ever

00:02:07.930 --> 00:02:11.080
wanted to draw anything
using vector representation,

00:02:11.080 --> 00:02:13.500
you had to manually do it
all in Java code, which

00:02:13.500 --> 00:02:15.300
was cumbersome.

00:02:15.300 --> 00:02:17.700
In Lollipop, we
have two new classes

00:02:17.700 --> 00:02:21.410
to support vector graphics
as our drawable resources.

00:02:21.410 --> 00:02:25.130
VectorDrawable, and
AnimatedVectorDrawable.

00:02:25.130 --> 00:02:28.530
VectorDrawable defines a
static drawable object,

00:02:28.530 --> 00:02:32.530
while AnimatedVectorDrawable
can add animations

00:02:32.530 --> 00:02:35.450
to the properties
of VectorDrawable.

00:02:35.450 --> 00:02:38.120
They are both
subclasses of Drawable,

00:02:38.120 --> 00:02:41.920
and they are both
represented by XML files.

00:02:41.920 --> 00:02:44.140
Let's take a look
at the XML structure

00:02:44.140 --> 00:02:46.360
of the VectorDrawable.

00:02:46.360 --> 00:02:50.250
Similar to the XVG format,
each VectorDrawable

00:02:50.250 --> 00:02:53.890
can be represented
as a tree hierarchy.

00:02:53.890 --> 00:02:56.730
Geometry is defined
in a path text, which

00:02:56.730 --> 00:02:59.970
are all the leaves of this tree.

00:02:59.970 --> 00:03:02.240
All the path descriptions
and joint attributes

00:03:02.240 --> 00:03:04.710
are inside this tech.

00:03:04.710 --> 00:03:07.210
All path will be joined
in the same order

00:03:07.210 --> 00:03:11.540
as they appear in the XML file.

00:03:11.540 --> 00:03:14.600
Transformations are defined
in a group tag which

00:03:14.600 --> 00:03:17.560
are the internal
nodes of the tree.

00:03:17.560 --> 00:03:21.470
Know that for each path
object, its transformation

00:03:21.470 --> 00:03:24.950
is inherited from all
its ancestor groups'

00:03:24.950 --> 00:03:28.480
transformation, applied
in the order from the top

00:03:28.480 --> 00:03:30.380
to the bottom.

00:03:30.380 --> 00:03:33.520
Here's how it looks
like in the XML file.

00:03:33.520 --> 00:03:35.430
You can clearly see
the tree structure

00:03:35.430 --> 00:03:37.620
with those highlighted texts.

00:03:37.620 --> 00:03:42.170
Feel free to see more details
in the link, as shown below.

00:03:42.170 --> 00:03:45.800
Now let's switch to the
AnimatedVectorDrawable.

00:03:45.800 --> 00:03:49.000
First, here is the
diagram of its structure.

00:03:49.000 --> 00:03:52.740
On the top, the
AnimatedVectorDrawable's XML

00:03:52.740 --> 00:03:55.550
is essentially a
little bit of glue

00:03:55.550 --> 00:03:58.520
which connects the
VectorDrawable's XML,

00:03:58.520 --> 00:04:02.680
on the bottom left, with
the object animator's XML

00:04:02.680 --> 00:04:05.680
files over there on
the bottom right,

00:04:05.680 --> 00:04:09.140
which describe the
animations for the properties

00:04:09.140 --> 00:04:11.490
of a VectorDrawable.

00:04:11.490 --> 00:04:14.220
To actually glue
those two things up,

00:04:14.220 --> 00:04:17.089
AnimatedVectorDrawable
uses names

00:04:17.089 --> 00:04:21.730
to find a target object inside
the VectorDrawable, like the G1

00:04:21.730 --> 00:04:23.070
here.

00:04:23.070 --> 00:04:26.060
Notice that the target
object to be animated

00:04:26.060 --> 00:04:29.640
can be either a group,
a path, or a [INAUDIBLE]

00:04:29.640 --> 00:04:32.540
and they must be uniquely named.

00:04:32.540 --> 00:04:36.000
Then, we can apply the
specified object animator,

00:04:36.000 --> 00:04:39.330
like the a.xml in this
example to the target

00:04:39.330 --> 00:04:43.370
object we just find by name.

00:04:43.370 --> 00:04:45.390
Inside the object
animator, we need

00:04:45.390 --> 00:04:48.100
to specify the property
name to animate,

00:04:48.100 --> 00:04:51.270
like the rotation
in this example,

00:04:51.270 --> 00:04:53.780
and the values for animation.

00:04:53.780 --> 00:04:56.580
Now, let's take a
look at an example

00:04:56.580 --> 00:04:59.100
of an AnimatedVectorDrawable.

00:04:59.100 --> 00:05:02.020
First, before adding
the animations,

00:05:02.020 --> 00:05:05.450
the image on the left shows
how the static VectorDrawable

00:05:05.450 --> 00:05:10.130
looks, and its XML code
is on the right hand side.

00:05:10.130 --> 00:05:13.980
If we add an animation of the
group's rotation property,

00:05:13.980 --> 00:05:20.010
like this, then we can get the
rotation animations, like this.

00:05:25.170 --> 00:05:28.620
If we add animation to the
path's color attributes,

00:05:28.620 --> 00:05:31.990
like this, then we
can change the color

00:05:31.990 --> 00:05:35.830
of the sun from orange
to red, like this.

00:05:41.440 --> 00:05:44.960
Moreover, if we animate
a path data attributes,

00:05:44.960 --> 00:05:51.590
like this, notice the value time
now is set to the path time.

00:05:51.590 --> 00:05:54.300
Then, we can change
the shape of the sun

00:05:54.300 --> 00:05:56.915
as a path morphing in
this cute animation.

00:06:03.100 --> 00:06:06.360
Now let's talk about some of
the trade offs and performance

00:06:06.360 --> 00:06:09.190
aspects of these new classes.

00:06:09.190 --> 00:06:12.060
VectorDrawable has
performance implications.

00:06:12.060 --> 00:06:15.790
With that in mind, my
suggestions are first,

00:06:15.790 --> 00:06:19.070
simplify the vector
representation of an object.

00:06:19.070 --> 00:06:22.730
For example, avoid using
many opt-to commands

00:06:22.730 --> 00:06:24.310
in the path data.

00:06:24.310 --> 00:06:28.290
Second, limit image size
of your VectorDrawable.

00:06:28.290 --> 00:06:30.280
Because these
Drawables are first

00:06:30.280 --> 00:06:34.210
drawn into bitmaps then uploaded
to the texture on the GPU,

00:06:34.210 --> 00:06:38.260
larger bitmaps means more
memory and more time to upload.

00:06:38.260 --> 00:06:41.610
Practically, I would
recommend using VectorDrawable

00:06:41.610 --> 00:06:45.250
for icons and buttons
with reasonable sizes.

00:06:45.250 --> 00:06:49.790
For example, less
than 200x200 DP.

00:06:49.790 --> 00:06:51.920
Third, don't update
the attributes

00:06:51.920 --> 00:06:55.020
of the VectorDrawable
unless necessary.

00:06:55.020 --> 00:06:58.980
When there's no changes to the
attributes like width, height,

00:06:58.980 --> 00:07:03.210
or alpha, our framework will
be able to keep a cached bitmap

00:07:03.210 --> 00:07:08.840
without redrawing the path or
reuploading texture to the GPU.

00:07:08.840 --> 00:07:12.410
For AnimatedVectorDrawable,
caching won't help here.

00:07:12.410 --> 00:07:15.920
So keep your animations
short and sweet.

00:07:15.920 --> 00:07:18.980
Additionally, animating
the path data attributes

00:07:18.980 --> 00:07:20.470
or the [INAUDIBLE]
path attributes

00:07:20.470 --> 00:07:22.450
are heavy operations.

00:07:22.450 --> 00:07:25.410
Try to see if you can
use transformation only

00:07:25.410 --> 00:07:29.750
for your animation to avoid
those heavy operations.

00:07:29.750 --> 00:07:32.190
One last question
you might have is,

00:07:32.190 --> 00:07:38.020
how do I create an XML file
for the VectorDrawable?

00:07:38.020 --> 00:07:41.630
Our tool team is hard at
work on building new tools

00:07:41.630 --> 00:07:45.010
to help you generate
these XML files.

00:07:45.010 --> 00:07:48.130
In the meantime, it's actually
possible to create them

00:07:48.130 --> 00:07:50.760
by hand with just a little work.

00:07:50.760 --> 00:07:53.200
First, you can use
any joint program

00:07:53.200 --> 00:07:57.910
that can export SVG
to create your images.

00:07:57.910 --> 00:08:01.620
Then, with a little
cutting and pasting,

00:08:01.620 --> 00:08:06.240
you can get the contents
into your XML files.

00:08:06.240 --> 00:08:08.930
The VectorDrawable and
AnimatedVectorDrawables

00:08:08.930 --> 00:08:10.590
are awesome classes
that can help

00:08:10.590 --> 00:08:15.590
you to build a better-looking,
smaller app in an easier way.

00:08:15.590 --> 00:08:18.270
Please follow these
links for more details

00:08:18.270 --> 00:08:19.970
on how to use them.

00:08:19.970 --> 00:08:21.740
Thank you.

