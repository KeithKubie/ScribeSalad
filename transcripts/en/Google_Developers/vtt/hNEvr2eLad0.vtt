WEBVTT
Kind: captions
Language: en

00:00:01.434 --> 00:00:02.767
Alex Moffat: Good afternoon.

00:00:02.767 --> 00:00:04.901
My name's Alex Moffat,
and this is Damon Lundin,

00:00:04.901 --> 00:00:06.868
and we're going to talk
about our experiences

00:00:06.868 --> 00:00:10.367
building Lombardi Blueprint
with "Gwit"

00:00:10.367 --> 00:00:14.033
or G-W-T as I should now
pronounce it.

00:00:14.033 --> 00:00:17.100
So this presentation
includes some examples,

00:00:17.100 --> 00:00:18.968
and you can download
the code for the examples

00:00:18.968 --> 00:00:22.334
from our blog
development.lombardi.com

00:00:22.334 --> 00:00:24.501
so you can actually run them
and don't have to worry about

00:00:24.501 --> 00:00:27.033
trying to read a couple
of lines of 18-point type

00:00:27.033 --> 00:00:29.033
and make up the rest of it.

00:00:29.033 --> 00:00:32.133
So a very quick slide
that Damon is gonna talk to...

00:00:32.133 --> 00:00:34.534
but before we get to that,
who here has got GWT code

00:00:34.534 --> 00:00:37.067
running in production
at the moment?

00:00:37.067 --> 00:00:41.667
And...who's experimented
with G-W-T?

00:00:41.667 --> 00:00:44.534
Great. Thanks so much.
So quickly, please.

00:00:44.534 --> 00:00:45.868
Damon Lundin: Okay,
so I guess I'm gonna

00:00:45.868 --> 00:00:47.501
go through this very quickly.

00:00:47.501 --> 00:00:49.067
We weren't sure what the level
of experience was gonna be,

00:00:49.067 --> 00:00:51.367
but basically, I think pretty
much everyone in the room knows

00:00:51.367 --> 00:00:53.067
that GWT is a toolkit

00:00:53.067 --> 00:00:55.601
that allows you to create
a JavaScript application

00:00:55.601 --> 00:00:57.334
written in Java.

00:00:57.334 --> 00:00:58.901
The obvious advantages are

00:00:58.901 --> 00:01:01.234
you can use all your favorite
Java tools

00:01:01.234 --> 00:01:02.501
like your development
environments,

00:01:02.501 --> 00:01:04.767
your debugging tools,
your testing tools,

00:01:04.767 --> 00:01:06.601
things like that,

00:01:06.601 --> 00:01:09.434
handle some of the differences
between different browsers.

00:01:09.434 --> 00:01:11.200
You still need to know
some things.

00:01:11.200 --> 00:01:13.300
GWT can't cover over
everything.

00:01:13.300 --> 00:01:15.968
But there's some differences
that it can take care of.

00:01:15.968 --> 00:01:18.534
One of the things
that you may not be aware of

00:01:18.534 --> 00:01:20.067
that is one of
my favorite features

00:01:20.067 --> 00:01:22.868
is the optimization
of the GWT compiler.

00:01:22.868 --> 00:01:26.200
The GWT compiler is capable
of doing optimizations

00:01:26.200 --> 00:01:28.467
like method inlining,
string interning,

00:01:28.467 --> 00:01:30.300
and a whole host
of other things

00:01:30.300 --> 00:01:31.834
that you wouldn't normally do

00:01:31.834 --> 00:01:34.567
if you were writing your
JavaScript application by hand.

00:01:34.567 --> 00:01:38.234
So even if you were writing
your application by hand,

00:01:38.234 --> 00:01:40.334
you're still not likely
to produce code

00:01:40.334 --> 00:01:42.000
that is as efficient

00:01:42.000 --> 00:01:44.467
as what comes out of
the GWT compiler.

00:01:44.467 --> 00:01:46.868
For those of you who are
experimenting with GWT

00:01:46.868 --> 00:01:49.334
or have an existing
JavaScript application,

00:01:49.334 --> 00:01:51.100
I also want to make
the point that

00:01:51.100 --> 00:01:54.033
you don't need to worry about
trying to use GWT

00:01:54.033 --> 00:01:55.467
with that existing code.

00:01:55.467 --> 00:01:56.667
GWT can integrate

00:01:56.667 --> 00:01:59.100
with existing JavaScript
libraries or code,

00:01:59.100 --> 00:02:02.300
and it can peacefully
coexist with that code.

00:02:02.300 --> 00:02:04.934
The application that we're
gonna show you here today

00:02:04.934 --> 00:02:07.033
was originally written
in JavaScript

00:02:07.033 --> 00:02:09.167
using the Dojo Toolkit.

00:02:09.167 --> 00:02:11.200
And when we decided
to use GWT,

00:02:11.200 --> 00:02:14.267
all of our new features
were implemented using GWT

00:02:14.267 --> 00:02:16.067
and over a period of time,

00:02:16.067 --> 00:02:18.400
we slowly migrated
the existing code--

00:02:18.400 --> 00:02:21.033
the existing JavaScript
code we had into GWT code.

00:02:21.033 --> 00:02:23.667
It was not something
that we had to do all at once.

00:02:23.667 --> 00:02:25.968
So I think that's an important
point to make.

00:02:25.968 --> 00:02:29.567
So Alex is now gonna show you
what we've done with GWT.

00:02:29.567 --> 00:02:31.734
Moffat: Right. And what
I want to talk about really--

00:02:31.734 --> 00:02:35.267
what I'm gonna try and show
is the UI

00:02:35.267 --> 00:02:37.767
more than any particular
features.

00:02:37.767 --> 00:02:41.567
So this is the home page
for Lombardi Blueprint.

00:02:41.567 --> 00:02:43.234
We have a list
of what's happened today,

00:02:43.234 --> 00:02:45.801
and I'm gonna look
at a particular project

00:02:45.801 --> 00:02:48.567
and then look at a map

00:02:48.567 --> 00:02:52.334
of a process
within that project.

00:02:52.334 --> 00:02:56.200
So...this is basically
the outline

00:02:56.200 --> 00:02:57.667
for what you would do
if you wanted to give a talk.

00:02:57.667 --> 00:02:59.067
So at the moment,

00:02:59.067 --> 00:03:00.434
I've got some sorts
of things I'm thinking about

00:03:00.434 --> 00:03:04.601
like I need slides,
I need to do an abstract,

00:03:04.601 --> 00:03:08.400
I probably need to rehearse.

00:03:08.400 --> 00:03:10.601
We got some travel
I got here...

00:03:10.601 --> 00:03:13.868
Now I can...I can do things
like...

00:03:13.868 --> 00:03:17.467
the abstract should probably
be before the slides.

00:03:17.467 --> 00:03:20.834
I need...let's make the slides
actually part of that.

00:03:20.834 --> 00:03:24.734
Let's do hotel and travel...

00:03:24.734 --> 00:03:27.767
and then print.

00:03:27.767 --> 00:03:31.133
You know, I need to...

00:03:31.133 --> 00:03:35.968
I need to submit this thing.

00:03:35.968 --> 00:03:37.968
So we've got here
is basically drag and drop.

00:03:37.968 --> 00:03:39.200
This is all JavaScript.

00:03:39.200 --> 00:03:41.467
I can move things around.
Stuff rearranges.

00:03:41.467 --> 00:03:44.501
We've got some animation.

00:03:44.501 --> 00:03:47.501
Panels fly in and out.

00:03:47.501 --> 00:03:49.834
Different views appear.

00:03:49.834 --> 00:03:54.634
It's all fairly fancy.
It's all done in GWT and HTML.

00:03:54.634 --> 00:03:59.067
Got things like expanding
and collapsing panels...

00:03:59.067 --> 00:04:01.801
and I just wanna point out
this bit down here at the bottom

00:04:01.801 --> 00:04:05.267
'cause we're gonna
come to this...later.

00:04:05.267 --> 00:04:06.801
So what I want you
to get out of this

00:04:06.801 --> 00:04:10.200
is this is a sort of look
that we have for an application.

00:04:10.200 --> 00:04:12.634
It's not like an Eclipse Style.

00:04:12.634 --> 00:04:14.834
I have, you know,
a tree on the left

00:04:14.834 --> 00:04:20.033
and a bunch of forms
in an area on the right.

00:04:20.033 --> 00:04:22.234
Because what I actually
want to talk about

00:04:22.234 --> 00:04:25.968
is how we do UI development
for that sort of UI.

00:04:25.968 --> 00:04:29.000
How do we go about
building that sort of thing?

00:04:29.000 --> 00:04:33.267
And the first...
probably most important point

00:04:33.267 --> 00:04:36.868
is it really--
it's based on...

00:04:36.868 --> 00:04:39.534
a foundation of everybody
in the team

00:04:39.534 --> 00:04:43.534
really has to feel that
it's a big part of their job,

00:04:43.534 --> 00:04:44.901
the most important part
of their job,

00:04:44.901 --> 00:04:46.701
to create a great
user experience.

00:04:46.701 --> 00:04:49.100
'Cause Blueprint is really
all about the user experience.

00:04:49.100 --> 00:04:52.167
People have really got
to enjoy using this tool,

00:04:52.167 --> 00:04:54.300
because otherwise they can
just cancel their subscription

00:04:54.300 --> 00:04:56.367
and stop using it.

00:04:56.367 --> 00:04:58.167
It's much more of a voluntary
sort of thing

00:04:58.167 --> 00:05:01.400
than apps that, you know,
you're going to force

00:05:01.400 --> 00:05:05.567
hundreds of people across
the organization to use.

00:05:05.567 --> 00:05:10.868
We have two user experience
user interface designers

00:05:10.868 --> 00:05:12.834
working on Blueprint.

00:05:12.834 --> 00:05:15.400
And they take...

00:05:15.400 --> 00:05:19.267
the market requirements
from product management

00:05:19.267 --> 00:05:21.601
and are responsible
for producing

00:05:21.601 --> 00:05:23.234
the visual realization
of those,

00:05:23.234 --> 00:05:24.801
so how are we actually gonna
present these features

00:05:24.801 --> 00:05:26.033
to the end user?

00:05:26.033 --> 00:05:27.734
And of course,
it starts with a white board.

00:05:27.734 --> 00:05:30.501
So you work out, you know, what
assumptions are you gonna make,

00:05:30.501 --> 00:05:31.634
what are the use cases,

00:05:31.634 --> 00:05:34.501
what are the various
process states?

00:05:34.501 --> 00:05:36.601
Let's draw some things
on pieces of paper

00:05:36.601 --> 00:05:38.000
and stick them on the wall

00:05:38.000 --> 00:05:40.400
and annotate them
with sticky notes...

00:05:40.400 --> 00:05:41.968
and then move on
to the next stage

00:05:41.968 --> 00:05:44.767
of producing
some quick mockups,

00:05:44.767 --> 00:05:47.334
some wireframing
in Illustrator.

00:05:47.334 --> 00:05:48.734
And at this point also,

00:05:48.734 --> 00:05:50.934
you can go out to users
and potential users

00:05:50.934 --> 00:05:54.400
and test the interface
as it is now.

00:05:54.400 --> 00:05:56.767
Are the features
readily discoverable?

00:05:56.767 --> 00:06:00.100
Does this actually present
in a reasonable way?

00:06:00.100 --> 00:06:02.734
And this is also a...

00:06:02.734 --> 00:06:04.267
a point where
the programmers can say,

00:06:04.267 --> 00:06:06.234
you know, that feature there

00:06:06.234 --> 00:06:08.334
is really gonna be incredibly
difficult for us to increment.

00:06:08.334 --> 00:06:12.000
Can you think of
another way to present it?

00:06:12.000 --> 00:06:15.634
Just as important
is mocking up the interaction.

00:06:15.634 --> 00:06:17.767
And this is partially
still an open question for us.

00:06:17.767 --> 00:06:20.968
We've used PowerPoint
or Keynote to present the flow.

00:06:20.968 --> 00:06:22.734
So I click on this button here.

00:06:22.734 --> 00:06:25.234
I wanna switch to another slide
showing the next screen.

00:06:25.234 --> 00:06:27.434
We're investigating a tool
called iPlotz

00:06:27.434 --> 00:06:32.968
that is an online way
of presenting...demos.

00:06:32.968 --> 00:06:34.968
But it is important to...

00:06:34.968 --> 00:06:37.033
to be able to mock
the interaction up cheaply

00:06:37.033 --> 00:06:38.367
at an early stage,

00:06:38.367 --> 00:06:40.701
rather than require everyone
to write the GWT code

00:06:40.701 --> 00:06:42.367
and then say, you know,

00:06:42.367 --> 00:06:44.868
"I want this panel to slide in
instead of slide up,"

00:06:44.868 --> 00:06:46.334
because that's gonna change
the way in which

00:06:46.334 --> 00:06:49.734
we actually do our layout.

00:06:49.734 --> 00:06:51.567
Then the final stage of this,
of course,

00:06:51.567 --> 00:06:52.834
is the high fidelity mockup.

00:06:52.834 --> 00:06:54.467
These are more expensive
to produce

00:06:54.467 --> 00:06:55.834
'cause it takes them
more time to do it,

00:06:55.834 --> 00:06:58.501
and these are done
in Photoshop.

00:06:58.501 --> 00:07:01.734
At this point, again,
we're testing...

00:07:01.734 --> 00:07:04.801
is this the right color choice,
is this the right look?

00:07:04.801 --> 00:07:06.667
And also,
it's great documentation

00:07:06.667 --> 00:07:08.133
when you're programming,

00:07:08.133 --> 00:07:10.601
if correctly annotated
with what are the font choices,

00:07:10.601 --> 00:07:12.667
what other colors
are involved here?

00:07:12.667 --> 00:07:16.234
The UI people also give us
all of the assets that we need,

00:07:16.234 --> 00:07:17.968
so all the nice
rounded corner bits,

00:07:17.968 --> 00:07:19.501
all of the icons,
all the colors,

00:07:19.501 --> 00:07:22.033
everything like that.

00:07:22.033 --> 00:07:24.601
The big question,
especially for me and Damon,

00:07:24.601 --> 00:07:27.801
is when you're faced with
a Photoshop mockup like that,

00:07:27.801 --> 00:07:29.868
how do you go about
converting that

00:07:29.868 --> 00:07:32.434
into actual running code?

00:07:32.434 --> 00:07:35.467
And our first one is you have
to be involved in the design.

00:07:35.467 --> 00:07:37.067
Because you don't want
to end up with something

00:07:37.067 --> 00:07:39.267
that you're not able
to implement.

00:07:39.267 --> 00:07:42.767
The converse and that...

00:07:42.767 --> 00:07:44.501
I really also ought to emphasize

00:07:44.501 --> 00:07:46.634
is we've certainly been

00:07:46.634 --> 00:07:48.901
strongly asked
to implement stuff

00:07:48.901 --> 00:07:50.601
that we thought
wasn't possible

00:07:50.601 --> 00:07:53.033
that we were actually
able to do.

00:07:53.033 --> 00:07:55.901
The designers are acting
as advocates

00:07:55.901 --> 00:07:58.000
for a great user experience,
so it's very important,

00:07:58.000 --> 00:08:02.000
if they consider something
to be important or vital,

00:08:02.000 --> 00:08:04.167
that we make our best
possible effort to do it

00:08:04.167 --> 00:08:05.801
and don't just say,
well, you know,

00:08:05.801 --> 00:08:07.334
rounded corners are a pain.

00:08:07.334 --> 00:08:10.834
Let's just make it
all square boxes.

00:08:10.834 --> 00:08:13.067
[chuckling]
Rounded corners are a pain.

00:08:13.067 --> 00:08:15.067
So the other point--

00:08:15.067 --> 00:08:16.968
you need to know
CSS and the HTML DOM.

00:08:16.968 --> 00:08:19.434
You need to know
what your toolkit is,

00:08:19.434 --> 00:08:20.767
and unfortunately
at the moment,

00:08:20.767 --> 00:08:22.534
there's no way of
getting around the fact

00:08:22.534 --> 00:08:24.667
that because you're building
for a browser

00:08:24.667 --> 00:08:29.567
you have to understand HTML
and you have to understand CSS.

00:08:29.567 --> 00:08:32.167
Because fundamentally,
it comes down to

00:08:32.167 --> 00:08:33.868
what is the appropriate
DOM structure

00:08:33.868 --> 00:08:36.634
that you're going to build
with your code

00:08:36.634 --> 00:08:39.534
and how am I
going to use G-W-T

00:08:39.534 --> 00:08:43.167
to create that structure
and manipulate it?

00:08:43.167 --> 00:08:45.567
While G-W-T is going to remove

00:08:45.567 --> 00:08:49.167
your browser specific JavaScript
and DOM issues,

00:08:49.167 --> 00:08:52.701
you still have to deal with
cross browser CSS issues,

00:08:52.701 --> 00:08:55.601
and you still have to
deal with browser quirks

00:08:55.601 --> 00:08:57.534
with things like
the Peekaboo bug

00:08:57.534 --> 00:08:59.033
and various other stuff

00:08:59.033 --> 00:09:00.934
that Damon could name
off the top of his head

00:09:00.934 --> 00:09:02.567
that just cause you
enormous pain

00:09:02.567 --> 00:09:04.534
when you get it working first
in Firefox,

00:09:04.534 --> 00:09:08.868
and it doesn't work in IE6.

00:09:08.868 --> 00:09:10.534
As an example,
I'm gonna go through

00:09:10.534 --> 00:09:12.634
how we construct basically

00:09:12.634 --> 00:09:14.467
something that looks very much
like this panel

00:09:14.467 --> 00:09:16.868
here at the bottom.

00:09:16.868 --> 00:09:19.601
And this is the actual example
that you can download

00:09:19.601 --> 00:09:21.000
in its final state.

00:09:21.000 --> 00:09:22.667
We've got a little add button
that you click,

00:09:22.667 --> 00:09:25.000
so we're adding these rows
with a bit of animation.

00:09:25.000 --> 00:09:28.868
We have a nice rounded ended
highlight thing.

00:09:28.868 --> 00:09:30.567
And again, you know,
you click the X,

00:09:30.567 --> 00:09:32.501
and it's removed
with a bit of animation.

00:09:32.501 --> 00:09:37.934
So I quite like it.
I think that looks okay.

00:09:37.934 --> 00:09:39.701
Go ahead and build that.

00:09:39.701 --> 00:09:41.234
I'm gonna start
with the header now.

00:09:41.234 --> 00:09:42.400
As I get into this,

00:09:42.400 --> 00:09:44.100
you will see that what
I am talking about doing

00:09:44.100 --> 00:09:46.934
is not what was described
as the fastest way to do it

00:09:46.934 --> 00:09:49.701
in the previous talk
that I just watched.

00:09:49.701 --> 00:09:52.501
So I'm gonna talk about nesting
a bunch of GWT widgets

00:09:52.501 --> 00:09:54.801
to get my layout
to look right.

00:09:54.801 --> 00:09:56.234
If I was gonna do it fast,

00:09:56.234 --> 00:09:57.868
I should probably use an
HTML panel with a lot of divs,

00:09:57.868 --> 00:10:01.567
but I don't...we...

00:10:01.567 --> 00:10:03.734
because we're not building
a toolkit,

00:10:03.734 --> 00:10:07.033
we spend our time optimizing
the bits that are gonna be slow.

00:10:07.033 --> 00:10:09.167
And a lot of the time
if it's fast enough,

00:10:09.167 --> 00:10:11.334
it's good enough for us.

00:10:11.334 --> 00:10:14.100
We will also do things like,
you know,

00:10:14.100 --> 00:10:15.734
we're gonna build the special,

00:10:15.734 --> 00:10:18.033
the specific case
that we're interested in

00:10:18.033 --> 00:10:20.667
because we don't have to build
a generalized layout system

00:10:20.667 --> 00:10:23.501
or a generalized system for
supporting any sort of header.

00:10:23.501 --> 00:10:25.467
So in this case here,

00:10:25.467 --> 00:10:26.834
what's the easiest way
to do this?

00:10:26.834 --> 00:10:29.801
I'm gonna have
an outer-like div

00:10:29.801 --> 00:10:31.200
surrounding all my contents.

00:10:31.200 --> 00:10:32.601
I'm gonna use a FlowPanel
for that.

00:10:32.601 --> 00:10:34.167
That's nice.

00:10:34.167 --> 00:10:36.367
I can use two FlowPanels
inside that,

00:10:36.367 --> 00:10:38.434
and I can use CSS
to make sure that I get

00:10:38.434 --> 00:10:40.167
the right-hand side
to float to the right

00:10:40.167 --> 00:10:44.000
and the left-hand side
to float to the left.

00:10:44.000 --> 00:10:48.000
I can use a GWT button
for the add button.

00:10:48.000 --> 00:10:49.334
And then I can use two labels

00:10:49.334 --> 00:10:50.734
to get me the top
and the bottom.

00:10:50.734 --> 00:10:52.400
And when I put them
inside the FlowPanel,

00:10:52.400 --> 00:10:54.400
they're gonna stack
vertically nicely.

00:10:54.400 --> 00:10:56.234
And I'm actually gonna get
the behavior I want.

00:10:56.234 --> 00:10:57.868
I'm gonna get
the resize behavior I want

00:10:57.868 --> 00:11:00.634
without any effort.

00:11:00.634 --> 00:11:03.534
So all I do is I go ahead.
I create my two labels.

00:11:03.534 --> 00:11:05.067
I'm building
from the inside out.

00:11:05.067 --> 00:11:07.701
I create my two labels,
create the left-hand side,

00:11:07.701 --> 00:11:10.334
set the style
and the two labels,

00:11:10.334 --> 00:11:12.701
create the button,
create the right-hand side,

00:11:12.701 --> 00:11:16.434
create the final header,
and put both of them in there.

00:11:16.434 --> 00:11:19.467
I don't bother creating
a special, you know,

00:11:19.467 --> 00:11:22.367
comp me--header widget
that extends Composite

00:11:22.367 --> 00:11:23.701
and wrap all this together,

00:11:23.701 --> 00:11:25.434
because I'm just doing
the specific header

00:11:25.434 --> 00:11:26.734
that I want right now.

00:11:26.734 --> 00:11:29.634
And again, this...

00:11:29.634 --> 00:11:31.767
is gonna be slower

00:11:31.767 --> 00:11:34.501
than doing it with HTML Panel
and divs,

00:11:34.501 --> 00:11:36.100
but on the other hand,

00:11:36.100 --> 00:11:39.968
you probably wouldn't
be able to tell in our app.

00:11:39.968 --> 00:11:42.033
The next one is
we're moving out.

00:11:42.033 --> 00:11:43.534
We've got this outer panel here,

00:11:43.534 --> 00:11:46.000
which is this thing
with rounded corners.

00:11:46.000 --> 00:11:48.400
And there are lots of different
ways of doing rounded corners,

00:11:48.400 --> 00:11:52.000
and we have probably tried
every single one of them...

00:11:52.000 --> 00:11:54.734
from, you know, Sliding Doors

00:11:54.734 --> 00:11:58.868
to single-width,
single-height divs

00:11:58.868 --> 00:12:01.167
to something that Damon invented

00:12:01.167 --> 00:12:02.734
that has things
absolutely positioned

00:12:02.734 --> 00:12:04.434
in the left and right.

00:12:04.434 --> 00:12:07.601
The easiest way to do this one
is a 9-cell table, of course.

00:12:07.601 --> 00:12:10.167
So I can stick the content
in the center

00:12:10.167 --> 00:12:12.934
and I can use...

00:12:12.934 --> 00:12:15.167
background images
to get the look that I want.

00:12:15.167 --> 00:12:16.634
And the great thing
about this

00:12:16.634 --> 00:12:19.567
is G-W-T provides you
a decorator panel

00:12:19.567 --> 00:12:21.267
that makes it dead easy.

00:12:21.267 --> 00:12:23.100
And here's a case where
I'm going to go ahead

00:12:23.100 --> 00:12:26.267
and actually create a...

00:12:26.267 --> 00:12:29.267
a widget of my own
to do it.

00:12:29.267 --> 00:12:32.100
I'm using Composite
because I don't want to expose

00:12:32.100 --> 00:12:34.934
any methods that I'm not
actually going to use,

00:12:34.934 --> 00:12:36.901
particularly because
I'm building

00:12:36.901 --> 00:12:38.167
a very specific case here

00:12:38.167 --> 00:12:39.968
where I pass the header
and the content in

00:12:39.968 --> 00:12:41.300
when I construct it.

00:12:41.300 --> 00:12:44.000
So I don't want to have
to support a use case

00:12:44.000 --> 00:12:45.934
where someone says,
"I want to remove the content

00:12:45.934 --> 00:12:50.167
and add something else
later on."

00:12:50.167 --> 00:12:52.167
And then here's
the two bits of CSS

00:12:52.167 --> 00:12:56.467
that are gonna give me the top
left and the top center images.

00:12:56.467 --> 00:12:58.734
The point about this
is really

00:12:58.734 --> 00:13:02.000
those two classes,
top left and top center,

00:13:02.000 --> 00:13:06.567
are set on the DOM structure

00:13:06.567 --> 00:13:12.734
created by
the GWT decorator panel.

00:13:12.734 --> 00:13:15.801
So how do you know...
what classes

00:13:15.801 --> 00:13:19.167
are actually available for you
in the styling?

00:13:19.167 --> 00:13:22.300
You can look
at the documentation,

00:13:22.300 --> 00:13:24.567
but what we tend to do
is knock up a quick example

00:13:24.567 --> 00:13:27.267
and then use Firebug
or the IE Developer Toolkit

00:13:27.267 --> 00:13:29.033
and go in and see,
you know,

00:13:29.033 --> 00:13:33.100
what's the actual structure
of what you've got.

00:13:33.100 --> 00:13:36.634
This is another one
which is in...

00:13:36.634 --> 00:13:39.234
contradiction of what
we have been told previously.

00:13:39.234 --> 00:13:40.868
Handling Window Resizing.

00:13:40.868 --> 00:13:42.501
So how do we handle
window resizing?

00:13:42.501 --> 00:13:44.734
What you want to do,
of course,

00:13:44.734 --> 00:13:47.400
is you want to use HTML
and CSS.

00:13:47.400 --> 00:13:48.801
You want to build it

00:13:48.801 --> 00:13:51.601
so that the browser handles
the resizing automatically.

00:13:51.601 --> 00:13:52.801
The problem is,

00:13:52.801 --> 00:13:54.834
the content in the center cell
of that example

00:13:54.834 --> 00:13:56.567
does not work like that.

00:13:56.567 --> 00:13:58.100
At least, I couldn't get it
to work like that

00:13:58.100 --> 00:14:01.434
across all the browsers.

00:14:01.434 --> 00:14:05.067
So with static HTML...
I'm doomed.

00:14:05.067 --> 00:14:07.100
With GWT, I can do
programmatic layout.

00:14:07.100 --> 00:14:08.400
And we do programmatic layout.

00:14:08.400 --> 00:14:09.567
If you look at Blueprint,

00:14:09.567 --> 00:14:11.033
we do quite a bit
of programmatic layout

00:14:11.033 --> 00:14:13.701
in various places, when
panels are removed or added.

00:14:13.701 --> 00:14:16.501
And from seeing the GWT 2.0 talk
this morning,

00:14:16.501 --> 00:14:18.033
we are looking forward

00:14:18.033 --> 00:14:20.801
to panels that do all that
automatically for us.

00:14:20.801 --> 00:14:22.334
At the moment, what we do

00:14:22.334 --> 00:14:24.300
is we listen to the ResizeEvent
from the window,

00:14:24.300 --> 00:14:26.834
calculate the child-size
and propagate it down.

00:14:26.834 --> 00:14:28.667
What we haven't done, though,

00:14:28.667 --> 00:14:30.400
is build something
like GridBagLayout

00:14:30.400 --> 00:14:32.200
for anyone
who's worked on Swing.

00:14:32.200 --> 00:14:33.701
We haven't built GridBagLayout,

00:14:33.701 --> 00:14:37.100
we haven't built a general
layout manager that takes...

00:14:37.100 --> 00:14:39.367
anything, you know,
configurable sizes

00:14:39.367 --> 00:14:40.667
and stuff like that.

00:14:40.667 --> 00:14:43.200
We program specifically
for what is the layout behavior

00:14:43.200 --> 00:14:46.000
of this particular thing
that we want.

00:14:46.000 --> 00:14:48.100
And there is actually
one extra wrinkle.

00:14:48.100 --> 00:14:52.901
Decorator panel doesn't support
having a widget in the header

00:14:52.901 --> 00:14:54.200
as it's currently built.

00:14:54.200 --> 00:14:55.734
And if you read that blog post,

00:14:55.734 --> 00:14:57.801
you can see the very small
change I had to do

00:14:57.801 --> 00:15:02.701
to actually support that.

00:15:02.701 --> 00:15:07.133
I move on to
the List and the Row.

00:15:07.133 --> 00:15:09.167
This is very similar
to the header,

00:15:09.167 --> 00:15:11.968
so I use a FlowPanel
to create the list,

00:15:11.968 --> 00:15:16.801
and I vertically stack a bunch
of divs to form the rows.

00:15:16.801 --> 00:15:19.200
And each of those rows is
made up of a number of sections

00:15:19.200 --> 00:15:23.567
which float to the left
and the right appropriately.

00:15:23.567 --> 00:15:25.467
Now, of course, when you're
floating the stuff

00:15:25.467 --> 00:15:27.067
to the right,
to the right in IE6,

00:15:27.067 --> 00:15:28.601
you have to add it
in the opposite order,

00:15:28.601 --> 00:15:30.501
or else it doesn't float
correctly...

00:15:30.501 --> 00:15:32.567
which you only discover
when you get to IE6

00:15:32.567 --> 00:15:36.400
after you've written it
on Firefox.

00:15:36.400 --> 00:15:38.801
The more interesting,
potentially, point of that

00:15:38.801 --> 00:15:40.567
is, you know, rounded corners.

00:15:40.567 --> 00:15:43.367
Rounded corners highlight
is quite nice

00:15:43.367 --> 00:15:44.767
and the designer said,

00:15:44.767 --> 00:15:48.868
"We really want the rounded
corner highlight."

00:15:48.868 --> 00:15:52.567
And in this case,
because we're prepared to accept

00:15:52.567 --> 00:15:54.434
a fixed-height row,

00:15:54.434 --> 00:15:57.634
I don't have to go
for a fancy...you know,

00:15:57.634 --> 00:15:59.133
multicell table solution

00:15:59.133 --> 00:16:01.000
that will handle rows
of different heights.

00:16:01.000 --> 00:16:02.334
I just say we're gonna have

00:16:02.334 --> 00:16:05.200
a 46-pixel or whatever it is
high row.

00:16:05.200 --> 00:16:07.033
And that lets me just use
background images,

00:16:07.033 --> 00:16:09.601
and CSS Style
did the whole thing.

00:16:09.601 --> 00:16:13.434
So I create a MouseHandler
for the mouseover event.

00:16:13.434 --> 00:16:16.734
And because I can get hold
of the source of the event,

00:16:16.734 --> 00:16:17.934
I can get hold of the row

00:16:17.934 --> 00:16:21.300
and just call a mouseover
method on that

00:16:21.300 --> 00:16:23.000
and add a focused style to it.

00:16:23.000 --> 00:16:24.467
The mouseout
does the opposite thing--

00:16:24.467 --> 00:16:26.300
takes away the focused style.

00:16:26.300 --> 00:16:28.968
And it's simply a case
of saying

00:16:28.968 --> 00:16:31.834
inside my row
on my rightEndCap...

00:16:31.834 --> 00:16:33.200
it's normally white

00:16:33.200 --> 00:16:35.434
when the row
also has the focused style.

00:16:35.434 --> 00:16:37.968
I'm gonna give it
a background-image,

00:16:37.968 --> 00:16:40.634
and that works very nicely.

00:16:40.634 --> 00:16:43.234
The final thing I want
to talk about is animation.

00:16:43.234 --> 00:16:45.367
For animation,
you've gotta use JavaScript,

00:16:45.367 --> 00:16:47.267
and therefore,
you've gotta use GWT.

00:16:47.267 --> 00:16:50.501
Certainly for the browsers
we support,

00:16:50.501 --> 00:16:53.434
there's no CSS3 support
right now.

00:16:53.434 --> 00:16:58.501
I mean, the majority
of our customers use IE6.

00:16:58.501 --> 00:17:00.167
So though it was nice to see

00:17:00.167 --> 00:17:02.400
all those HTML5 features
this morning,

00:17:02.400 --> 00:17:05.300
until someone can find a way
to automatically update

00:17:05.300 --> 00:17:08.234
all those IE6 browsers
to something else,

00:17:08.234 --> 00:17:12.901
we are still writing to a really
low lowest common denominator.

00:17:12.901 --> 00:17:14.934
A little animation
goes a long way.

00:17:14.934 --> 00:17:16.701
Don't overdo it.

00:17:16.701 --> 00:17:18.234
We've overdone it
in some cases

00:17:18.234 --> 00:17:21.033
and then had to
take it out again.

00:17:21.033 --> 00:17:23.901
But it really does help
users understand the behavior.

00:17:23.901 --> 00:17:27.033
So, you know, if you click
the delete button

00:17:27.033 --> 00:17:28.901
and then the row
suddenly disappears

00:17:28.901 --> 00:17:31.234
and then the row above
moves into its space

00:17:31.234 --> 00:17:33.200
and it doesn't look--

00:17:33.200 --> 00:17:35.601
especially if you scroll
off the bottom of the screen,

00:17:35.601 --> 00:17:37.067
like anything
has actually happened

00:17:37.067 --> 00:17:38.901
apart from the name
has changed--

00:17:38.901 --> 00:17:40.667
a bit of animation
can help you understand

00:17:40.667 --> 00:17:42.334
what's actually going on.

00:17:42.334 --> 00:17:44.000
And generally,
you're gonna change

00:17:44.000 --> 00:17:48.400
the size, the position,
or the opacity of elements.

00:17:48.400 --> 00:17:49.901
And to do the fading
in and out,

00:17:49.901 --> 00:17:52.300
I'm gonna use
the GWT Animation class

00:17:52.300 --> 00:17:54.000
and create a subclass of that.

00:17:54.000 --> 00:17:56.167
And I'm gonna override
the onUpdate method,

00:17:56.167 --> 00:17:59.400
because that's the only thing
I actually need.

00:17:59.400 --> 00:18:01.634
This is basically where
I'm gonna have my row class.

00:18:01.634 --> 00:18:03.901
Previously,
I create FadingRow

00:18:03.901 --> 00:18:06.567
which is gonna use
my new FadeInAnimation

00:18:06.567 --> 00:18:10.200
which is a subclass
of animation.

00:18:10.200 --> 00:18:12.167
So when I add the row,

00:18:12.167 --> 00:18:15.567
I just add it as normal
to my listPanel,

00:18:15.567 --> 00:18:19.434
to my FlowPanel,
then I call the fadeIn method.

00:18:19.434 --> 00:18:22.334
FadeIn creates me
new animation

00:18:22.334 --> 00:18:24.234
which I tell to execute,

00:18:24.234 --> 00:18:27.734
and it's gonna run
for 3/4 of a second.

00:18:27.734 --> 00:18:30.534
And my FadeInAnimation
is gonna extend Animation,

00:18:30.534 --> 00:18:33.667
and all it does
is set the opacity.

00:18:33.667 --> 00:18:36.667
Now, this DOMHelper class

00:18:36.667 --> 00:18:38.667
is an example
of deferred binding

00:18:38.667 --> 00:18:40.634
because, of course,
setting Opacity,

00:18:40.634 --> 00:18:42.767
the way you do that varies
across browsers.

00:18:42.767 --> 00:18:46.467
Particularly IE6.
You've got to use filters.

00:18:46.467 --> 00:18:49.634
So this DOMHelper
has multiple implementations

00:18:49.634 --> 00:18:51.033
that are chosen at compile time

00:18:51.033 --> 00:18:53.901
in order to get
the right effect.

00:18:55.634 --> 00:18:59.267
So that was really the...

00:18:59.267 --> 00:19:01.200
the UI portion of it,

00:19:01.200 --> 00:19:04.167
really an infinite amount
of taking pains

00:19:04.167 --> 00:19:07.167
and really concentrating hard

00:19:07.167 --> 00:19:09.267
on trying to get
a great user experience.

00:19:09.267 --> 00:19:11.734
Damon's gonna
talk more about

00:19:11.734 --> 00:19:15.300
how to get it
to work quickly.

00:19:15.300 --> 00:19:17.200
Lundin: Okay, I'm gonna
shift gears a little bit

00:19:17.200 --> 00:19:19.801
and talk about some of
the performance challenges

00:19:19.801 --> 00:19:23.100
that we've had
and how you go about building

00:19:23.100 --> 00:19:25.701
a highly performing
and complex application.

00:19:25.701 --> 00:19:27.267
Before I begin,

00:19:27.267 --> 00:19:31.767
I want to show one of the most
performance intensive parts

00:19:31.767 --> 00:19:36.067
of our product.

00:19:36.067 --> 00:19:38.968
Here's the process
that Alex has been working on.

00:19:38.968 --> 00:19:41.367
He's been showing you
what we call our map view

00:19:41.367 --> 00:19:43.834
which is a very simplified view
of a business process

00:19:43.834 --> 00:19:45.367
that a user may be creating.

00:19:45.367 --> 00:19:46.667
In addition to this,

00:19:46.667 --> 00:19:48.367
we have another view
on the same data

00:19:48.367 --> 00:19:51.901
that we call
our process diagram.

00:19:59.100 --> 00:20:01.767
So we switch over here,
and this allows us to build--

00:20:01.767 --> 00:20:03.400
this allows the user
to build out

00:20:03.400 --> 00:20:06.133
more detail into their process
than they could before.

00:20:06.133 --> 00:20:09.300
So let's say
we submitted a talk.

00:20:09.300 --> 00:20:11.033
We can insert a decision here.

00:20:11.033 --> 00:20:18.567
And we can say, you know,
was the talk accepted?

00:20:18.567 --> 00:20:20.734
Oops.
[chuckles]

00:20:23.167 --> 00:20:25.400
Yes, thank you.

00:20:25.400 --> 00:20:28.801
If no, then perhaps,
you know, we reevaluate.

00:20:32.501 --> 00:20:37.133
And then we go back and maybe
want to try again next year.

00:20:37.133 --> 00:20:39.000
We can also insert Swimlanes

00:20:39.000 --> 00:20:41.501
which represent
a person that's performing

00:20:41.501 --> 00:20:42.901
a particular action,

00:20:42.901 --> 00:20:47.234
so let's add one
for Alex and myself.

00:20:47.234 --> 00:20:49.467
And then we can simply
assign tasks

00:20:49.467 --> 00:20:54.000
by dragging these items
into different Swimlanes.

00:20:54.000 --> 00:20:56.100
I'm just gonna make
a bit of a mess here

00:20:56.100 --> 00:20:57.667
to show you some of the more
interesting things

00:20:57.667 --> 00:20:59.234
that we can do.

00:20:59.234 --> 00:21:01.734
We can add sub-processes,

00:21:01.734 --> 00:21:03.501
expandable and collapsible
sub-processes

00:21:03.501 --> 00:21:05.634
so the users can decide
what level of detail

00:21:05.634 --> 00:21:09.567
they wanna see in their
particular process.

00:21:09.567 --> 00:21:12.000
Now, for those of you who are
thinking to yourself

00:21:12.000 --> 00:21:14.200
that we've reinvented Visio
on the Web,

00:21:14.200 --> 00:21:15.567
I wanna point out

00:21:15.567 --> 00:21:17.501
that there's a very
important distinction here

00:21:17.501 --> 00:21:20.501
and that is as you saw me
editing this process here,

00:21:20.501 --> 00:21:23.601
I didn't have to worry about
where I was putting these items

00:21:23.601 --> 00:21:25.133
and how I was drawing
the lines.

00:21:25.133 --> 00:21:27.334
Blueprint basically
did all that work for me.

00:21:27.334 --> 00:21:30.434
Blueprint has built into it
a very sophisticated

00:21:30.434 --> 00:21:32.534
positioning
and routing algorithm.

00:21:32.534 --> 00:21:34.534
And this helps the user
resist the temptation

00:21:34.534 --> 00:21:37.000
to spend hours fiddling
with where, exactly,

00:21:37.000 --> 00:21:38.601
all their boxes go

00:21:38.601 --> 00:21:41.467
and how to get all those
little kinks out of their lines.

00:21:41.467 --> 00:21:43.968
But because of that,
it means that

00:21:43.968 --> 00:21:46.467
we have this computationally
intensive algorithm

00:21:46.467 --> 00:21:48.367
that sucks up
a lot of CPU cycles.

00:21:48.367 --> 00:21:50.934
And so that makes it
very difficult for us

00:21:50.934 --> 00:21:53.767
to spend a lot of time
doing other things.

00:21:53.767 --> 00:21:55.567
Unfortunately for us,

00:21:55.567 --> 00:21:57.634
we also have another
significant constraint,

00:21:57.634 --> 00:22:00.100
and that is most of
our customers

00:22:00.100 --> 00:22:02.501
are corporate business users

00:22:02.501 --> 00:22:05.567
who have little or no control
over their own machines.

00:22:05.567 --> 00:22:07.934
They can't install software,
they can't install plugins.

00:22:07.934 --> 00:22:11.200
We're basically limited
to what those users have.

00:22:11.200 --> 00:22:14.834
And despite all of the tears
of frustration that we have,

00:22:14.834 --> 00:22:17.067
most of them
are still using IE6.

00:22:17.067 --> 00:22:19.033
And unfortunately,
because of that,

00:22:19.033 --> 00:22:20.601
it means we have to write
an application

00:22:20.601 --> 00:22:23.100
that will work
even under IE6.

00:22:23.100 --> 00:22:25.367
And IE6 is, in fact,
what we're using here

00:22:25.367 --> 00:22:28.167
for this demo.

00:22:28.167 --> 00:22:31.801
Let me insert a link
to a larger process...

00:22:35.167 --> 00:22:37.200
Aptly called Large Process.

00:22:37.200 --> 00:22:39.801
And let's open this up.

00:22:39.801 --> 00:22:42.234
So I'm gonna open up a larger,
more complex process

00:22:42.234 --> 00:22:44.734
to show you a better idea
of scale

00:22:44.734 --> 00:22:46.067
on the types of things

00:22:46.067 --> 00:22:47.734
that we can do
in this application.

00:22:47.734 --> 00:22:49.601
Every time the user
reviews a process

00:22:49.601 --> 00:22:51.200
or every time
we make a change--

00:22:51.200 --> 00:22:53.868
when I added a new item
or I drew a new line

00:22:53.868 --> 00:22:55.634
or I expanded or collapsed
a sub-process,

00:22:55.634 --> 00:22:59.000
this algorithmic in Blueprint
is generating the entire layout

00:22:59.000 --> 00:23:00.567
every time.

00:23:00.567 --> 00:23:03.901
And that's something that
we need to do pretty quickly.

00:23:03.901 --> 00:23:06.667
So let's zoom out here and take
a look at what we've got here.

00:23:06.667 --> 00:23:08.000
So this is something that

00:23:08.000 --> 00:23:10.000
Blueprint generated
the entire layout for this

00:23:10.000 --> 00:23:15.167
when I open
this particular process.

00:23:15.167 --> 00:23:18.300
So let's talk about
how exactly we did this.

00:23:18.300 --> 00:23:20.968
Well, the implementation
that you see here

00:23:20.968 --> 00:23:23.501
is not the first implementation
of this that we did.

00:23:23.501 --> 00:23:26.200
The original implementation
we did is done in a pattern

00:23:26.200 --> 00:23:28.033
that's probably very familiar
to a lot of you

00:23:28.033 --> 00:23:31.300
and which I have
some example code up here.

00:23:31.300 --> 00:23:33.367
It's pretty traditional.

00:23:33.367 --> 00:23:35.200
This is traditional GWT code,

00:23:35.200 --> 00:23:36.968
something you might see
in Swing or Eclipse

00:23:36.968 --> 00:23:39.100
or any other UI-based framework,

00:23:39.100 --> 00:23:41.000
and it looks like this.

00:23:41.000 --> 00:23:43.267
In our case, we're gonna
iterate over all of these items

00:23:43.267 --> 00:23:45.634
that we wanna display
on our diagram,

00:23:45.634 --> 00:23:47.601
and we're gonna create
a widget

00:23:47.601 --> 00:23:49.234
to represent
each one of those items.

00:23:49.234 --> 00:23:51.033
Now, these widgets
are not simple objects.

00:23:51.033 --> 00:23:52.534
They're complex objects.

00:23:52.534 --> 00:23:56.801
They have other widgets,
FlowPanels, text areas, images,

00:23:56.801 --> 00:24:00.767
and other things like that
nested inside of them.

00:24:00.767 --> 00:24:02.801
In addition,
we're gonna want to create

00:24:02.801 --> 00:24:04.200
keyboard and mouse handlers,

00:24:04.200 --> 00:24:06.501
'cause we wanna be able
to respond to user action,

00:24:06.501 --> 00:24:09.701
so we create handlers and we
attach those to our widgets.

00:24:09.701 --> 00:24:11.400
And then once we've got
our widget,

00:24:11.400 --> 00:24:13.000
we add it to a root panel

00:24:13.000 --> 00:24:15.501
and it becomes
part of our application.

00:24:15.501 --> 00:24:19.300
Well, unfortunately,
this breaks down at some level.

00:24:19.300 --> 00:24:21.167
One of the most
expensive things

00:24:21.167 --> 00:24:23.601
that you can do in JavaScript
is object creation

00:24:23.601 --> 00:24:26.200
and garbage collection,
particularly in IE6.

00:24:26.200 --> 00:24:28.334
Now, this is something that
has gotten much better

00:24:28.334 --> 00:24:31.067
with every version of
the new browsers that come out.

00:24:31.067 --> 00:24:33.801
But if you're still having
to program against IE6,

00:24:33.801 --> 00:24:36.300
this is gonna be one of
your biggest problems.

00:24:36.300 --> 00:24:38.767
Every time I create
one of those widgets

00:24:38.767 --> 00:24:40.868
as well as all of those
nested widgets inside,

00:24:40.868 --> 00:24:42.634
every image, every text box,

00:24:42.634 --> 00:24:44.734
each time you do that,
GWT is constructing

00:24:44.734 --> 00:24:46.667
a JavaScript objects.

00:24:46.667 --> 00:24:49.167
So if you have
a lot of widgets,

00:24:49.167 --> 00:24:50.968
especially a lot of
complex widgets,

00:24:50.968 --> 00:24:52.334
you're creating
a lot of object.

00:24:52.334 --> 00:24:53.667
It could be hundreds,
thousands,

00:24:53.667 --> 00:24:55.767
or even tens of thousands
of objects.

00:24:55.767 --> 00:24:57.734
If you're doing that,
you're gonna find

00:24:57.734 --> 00:25:00.067
that your application
behaves very slow.

00:25:00.067 --> 00:25:02.734
In addition, we're creating
a JavaScript object

00:25:02.734 --> 00:25:04.133
for every one of those handlers.

00:25:04.133 --> 00:25:06.267
That's, again, a whole bunch
of JavaScript objects

00:25:06.267 --> 00:25:08.067
that we're creating.

00:25:08.067 --> 00:25:09.634
Once we create those,

00:25:09.634 --> 00:25:12.334
we're having to attach them
to every one of those widgets.

00:25:12.334 --> 00:25:16.534
Now, before any of you
think I'm dissing G-W-T here,

00:25:16.534 --> 00:25:17.868
I want to point out that

00:25:17.868 --> 00:25:19.834
this pattern that I've just
been talking about

00:25:19.834 --> 00:25:22.267
is what we use for almost
our entire application.

00:25:22.267 --> 00:25:24.901
The things
that Alex just showed,

00:25:24.901 --> 00:25:29.734
the map that he did a demo of,
uses that pattern.

00:25:29.734 --> 00:25:31.834
It works most of the time.

00:25:31.834 --> 00:25:34.234
But it breaks down
when the scale increases.

00:25:34.234 --> 00:25:35.634
It doesn't scale...

00:25:35.634 --> 00:25:37.400
as it did in the case
of our diagram.

00:25:37.400 --> 00:25:38.734
Especially where we have

00:25:38.734 --> 00:25:42.000
all these computationally
expensive algorithm.

00:25:42.000 --> 00:25:44.501
We can't spend a lot of time
creating JavaScript objects.

00:25:44.501 --> 00:25:47.467
So...how do we deal with that?

00:25:47.467 --> 00:25:50.701
Well, when we looked at coming
up with another implementation,

00:25:50.701 --> 00:25:53.801
the most important thing to us
was to make sure that we

00:25:53.801 --> 00:25:56.501
improved the responsiveness
of the application.

00:25:56.501 --> 00:25:59.400
We wanted to make sure that
when the user opens a process

00:25:59.400 --> 00:26:01.801
or they make a change
to one of their processes

00:26:01.801 --> 00:26:04.400
and we have to generate
a new layout for it,

00:26:04.400 --> 00:26:06.434
we want to get that result
to the user

00:26:06.434 --> 00:26:09.534
and show it to them
as quickly as possible.

00:26:09.534 --> 00:26:11.067
Well, the fastest way
to do that

00:26:11.067 --> 00:26:12.467
is to, unfortunately,

00:26:12.467 --> 00:26:14.634
regress to an earlier style
of programming

00:26:14.634 --> 00:26:17.467
and revert to generating
raw HTML

00:26:17.467 --> 00:26:19.501
instead of creating
all those widgets.

00:26:19.501 --> 00:26:22.968
In addition,
instead of creating handlers

00:26:22.968 --> 00:26:25.167
and attaching handlers
to all of our widgets,

00:26:25.167 --> 00:26:28.701
we're gonna use
fly-weight handlers.

00:26:28.701 --> 00:26:32.868
We'll have one instance
for every type of item

00:26:32.868 --> 00:26:35.033
instead of every widget.

00:26:35.033 --> 00:26:37.567
In our case, we have
12 different types of item.

00:26:37.567 --> 00:26:39.400
That's a fixed number.

00:26:39.400 --> 00:26:41.067
In our case, we'll have 24,

00:26:41.067 --> 00:26:43.501
so one for rendering
and one for event handling.

00:26:43.501 --> 00:26:45.067
And then instead of
attaching handlers

00:26:45.067 --> 00:26:46.601
to every one
of our widgets,

00:26:46.601 --> 00:26:51.300
we're gonna attach a handler
at one location on the diagram.

00:26:51.300 --> 00:26:53.200
Let's go through these
in a little more detail.

00:26:53.200 --> 00:26:56.734
So here we have
how we do our rendering.

00:26:56.734 --> 00:26:59.133
So this may look
familiar to you.

00:26:59.133 --> 00:27:01.567
This probably looks like
servlet code.

00:27:01.567 --> 00:27:04.000
But I want to remind you,
this is not servlet code.

00:27:04.000 --> 00:27:07.801
This is code running in GWT
in JavaScript on the client.

00:27:07.801 --> 00:27:11.200
We start off by creating
a string buffer,

00:27:11.200 --> 00:27:12.734
and then just as we did before,

00:27:12.734 --> 00:27:14.367
we're gonna iterate over
all of the items

00:27:14.367 --> 00:27:16.601
that we want to display
in our diagram,

00:27:16.601 --> 00:27:17.934
and we're gonna request

00:27:17.934 --> 00:27:20.934
one of these fly-weight
renderers that we have

00:27:20.934 --> 00:27:23.734
to generate the HTML
for that particular item.

00:27:23.734 --> 00:27:25.701
And you can see that
down here at the bottom.

00:27:25.701 --> 00:27:29.234
We simply append a bunch
of HTML to our string buffer.

00:27:29.234 --> 00:27:32.467
We add the dynamic elements
to it such as the id,

00:27:32.467 --> 00:27:35.200
its position...
any other of that information

00:27:35.200 --> 00:27:39.033
that belongs to
that layout.

00:27:39.033 --> 00:27:42.167
Once we have the HTML
for our entire diagram,

00:27:42.167 --> 00:27:45.200
we simply call this
setInnerHTML

00:27:45.200 --> 00:27:48.667
and it inserts all of that
HTML into the DOM all at once.

00:27:48.667 --> 00:27:51.200
This is the fastest way
to generate

00:27:51.200 --> 00:27:54.234
dynamic content on the client.

00:27:54.234 --> 00:27:56.334
When I was preparing
for this talk,

00:27:56.334 --> 00:27:58.701
I went back and I looked
through some of the prototyping

00:27:58.701 --> 00:28:01.968
that we did for this,

00:28:01.968 --> 00:28:04.467
and some of the numbers
we saw,

00:28:04.467 --> 00:28:07.734
you could get up to 12 times
improvement by doing this

00:28:07.734 --> 00:28:12.267
versus having
very complex widgets.

00:28:12.267 --> 00:28:14.968
Now let's talk about
Event Handling.

00:28:14.968 --> 00:28:17.067
So here we've got
some example HTML.

00:28:17.067 --> 00:28:18.734
This is sort of a snippet

00:28:18.734 --> 00:28:20.634
of the HTML
that we might have produced

00:28:20.634 --> 00:28:23.100
from this rendering
that we just had.

00:28:23.100 --> 00:28:25.367
In this case,
we've got two items

00:28:25.367 --> 00:28:28.868
represented by those two divs
up there at the top.

00:28:28.868 --> 00:28:30.567
Let's see what happens

00:28:30.567 --> 00:28:33.634
when a user clicks on
one of these elements.

00:28:33.634 --> 00:28:36.133
What happens is
the user generates an event

00:28:36.133 --> 00:28:38.734
at that innermost element
that the user clicked on.

00:28:38.734 --> 00:28:40.834
In this case,
that innermost DIV.

00:28:40.834 --> 00:28:44.901
The browser's gonna take
that element, that event,

00:28:44.901 --> 00:28:47.234
and bubble it up through
the HTML hierarchy

00:28:47.234 --> 00:28:49.067
until it gets to the top.

00:28:49.067 --> 00:28:50.834
And this is where
we're gonna put

00:28:50.834 --> 00:28:53.334
that single listener
I mentioned before...

00:28:53.334 --> 00:28:55.467
which looks like this.

00:28:55.467 --> 00:28:57.634
So here we have
this diagram class,

00:28:57.634 --> 00:28:59.200
and the first thing
we're doing

00:28:59.200 --> 00:29:01.367
is we're calling this
sinkEvents method.

00:29:01.367 --> 00:29:03.968
What this does is it
enables this class

00:29:03.968 --> 00:29:07.968
to listen for events
on this particular element.

00:29:07.968 --> 00:29:09.901
Now before,
we were creating handlers

00:29:09.901 --> 00:29:11.267
for every one of our widgets,

00:29:11.267 --> 00:29:12.801
and we were attaching
those handlers

00:29:12.801 --> 00:29:14.534
to every one
of those widgets.

00:29:14.534 --> 00:29:18.234
Now, with a single call,
with one line of code,

00:29:18.234 --> 00:29:23.000
I've enabled handling
for our entire diagram.

00:29:23.000 --> 00:29:26.167
Every time an event occurs
anywhere within your diagram,

00:29:26.167 --> 00:29:29.033
this method on browser event
gets called.

00:29:29.033 --> 00:29:31.434
Fortunately,
the browser tells us

00:29:31.434 --> 00:29:33.734
what, exactly, it was
that the user clicked on

00:29:33.734 --> 00:29:37.634
from this getEventTarget
method.

00:29:37.634 --> 00:29:38.834
That's gonna be
that innermost DIV

00:29:38.834 --> 00:29:40.434
that I mentioned before.

00:29:40.434 --> 00:29:43.868
Now, we don't really wanna know
what the innermost element was.

00:29:43.868 --> 00:29:46.267
We wanna know what that DIV
sort of at the top was,

00:29:46.267 --> 00:29:49.534
the DIV that represents
that top of that item.

00:29:49.534 --> 00:29:53.067
So what we do is we simply
walk backwards up the hierarchy

00:29:53.067 --> 00:29:56.501
until we find an element
that has an ID attribute on it.

00:29:56.501 --> 00:29:58.868
Once we've found that,
we know we've gotten to the top

00:29:58.868 --> 00:30:02.534
and now we know what item
it was that the user clicked on

00:30:02.534 --> 00:30:05.901
and we know its ID.

00:30:05.901 --> 00:30:09.167
Once we know the item
that the user clicked on,

00:30:09.167 --> 00:30:10.667
we can look up its type

00:30:10.667 --> 00:30:12.467
and then we can forward
this call

00:30:12.467 --> 00:30:15.767
to a handler
for that specific type.

00:30:15.767 --> 00:30:18.834
And then we can allow
a handler to handle that event,

00:30:18.834 --> 00:30:20.234
that item in a way

00:30:20.234 --> 00:30:22.534
that's specific to that
particular type of item,

00:30:22.534 --> 00:30:26.367
whatever it was.

00:30:26.367 --> 00:30:30.200
Now, this works in simple cases
such as mouseover.

00:30:30.200 --> 00:30:32.167
Let's say you want to
highlight a bunch of items

00:30:32.167 --> 00:30:34.067
as you're moving the mouse
across the screen.

00:30:34.067 --> 00:30:35.501
Well, when you're doing that,

00:30:35.501 --> 00:30:38.000
all you need to know
is what element it was

00:30:38.000 --> 00:30:39.901
that the user
moved their mouse over.

00:30:39.901 --> 00:30:42.601
But let's say like
instead of mouseover

00:30:42.601 --> 00:30:44.234
the user has clicked
on an item,

00:30:44.234 --> 00:30:46.434
and they're now dragging it
across the screen.

00:30:46.434 --> 00:30:48.801
Well, we want to know
not just what element it was

00:30:48.801 --> 00:30:50.534
that the user is dragging,

00:30:50.534 --> 00:30:52.067
but we wanna know
what other elements

00:30:52.067 --> 00:30:54.734
are underneath of it
or what elements may be near it,

00:30:54.734 --> 00:30:57.534
because we wanna find
possible drop targets.

00:30:57.534 --> 00:30:59.200
Well, at this point,

00:30:59.200 --> 00:31:01.701
all we have is a bunch of
HTML that we've generated.

00:31:01.701 --> 00:31:03.067
Really what we need

00:31:03.067 --> 00:31:04.834
is we need some more
useful data structures.

00:31:04.834 --> 00:31:07.868
We want to be able to
organize some data structures

00:31:07.868 --> 00:31:09.701
into, perhaps,
bounding boxes

00:31:09.701 --> 00:31:11.367
or something else
that's interesting

00:31:11.367 --> 00:31:14.267
so I don't have to search
the entire diagram.

00:31:14.267 --> 00:31:16.734
We really want get back
some of what we lost

00:31:16.734 --> 00:31:18.567
when we had
those widgets before.

00:31:18.567 --> 00:31:20.501
Previously, we could
ask the widgets, you know,

00:31:20.501 --> 00:31:21.968
are you a possible
drop target?

00:31:21.968 --> 00:31:24.934
And they can answer that.

00:31:24.934 --> 00:31:29.167
And unfortunately,
we don't have those anymore.

00:31:29.167 --> 00:31:31.300
One thing I want to go back to

00:31:31.300 --> 00:31:33.234
is that number one goal
that we had before

00:31:33.234 --> 00:31:34.934
which was we wanted
to make sure

00:31:34.934 --> 00:31:36.467
that when the user
makes a change,

00:31:36.467 --> 00:31:38.634
we want to show
that response to them

00:31:38.634 --> 00:31:41.133
as quickly as possible.

00:31:41.133 --> 00:31:43.367
Setting up these interesting
data structures

00:31:43.367 --> 00:31:46.133
is not necessary
to doing that.

00:31:46.133 --> 00:31:48.934
So we want to make sure
that when we generate this HTML

00:31:48.934 --> 00:31:51.767
that we get that
to the user immediately,

00:31:51.767 --> 00:31:53.434
and only after that

00:31:53.434 --> 00:31:54.968
do we wanna spend any time
that we need

00:31:54.968 --> 00:31:58.567
to set up these data structures.

00:31:58.567 --> 00:32:00.868
And this is how that works.

00:32:00.868 --> 00:32:02.667
So we start off here.

00:32:02.667 --> 00:32:05.033
We've got all of the HTML
that we've generated

00:32:05.033 --> 00:32:06.400
from our layout code.

00:32:06.400 --> 00:32:08.467
We've inserted into the DOM.

00:32:08.467 --> 00:32:11.367
The next thing we do
is we execute a DeferredCommand.

00:32:11.367 --> 00:32:13.200
And what this does
is it gives the browser

00:32:13.200 --> 00:32:16.033
the opportunity
to actually render that HTML

00:32:16.033 --> 00:32:17.701
and show it to the user.

00:32:17.701 --> 00:32:19.534
When the browser
is finished doing that,

00:32:19.534 --> 00:32:21.267
it will call
this DeferredCommand

00:32:21.267 --> 00:32:24.601
and execute
this createCache function.

00:32:24.601 --> 00:32:28.167
That cache function will
basically iterate over the DOM.

00:32:28.167 --> 00:32:30.133
All the information
that we need,

00:32:30.133 --> 00:32:31.601
where things are positioned,

00:32:31.601 --> 00:32:33.067
and how, exactly,
things are laid out

00:32:33.067 --> 00:32:35.067
is encoded
right there in the DOM.

00:32:35.067 --> 00:32:36.501
So all we're gonna do

00:32:36.501 --> 00:32:38.334
is we're gonna parse
the information back out.

00:32:38.334 --> 00:32:40.167
So here we get the element
from one of our items,

00:32:40.167 --> 00:32:42.701
we parse out its id,
its position,

00:32:42.701 --> 00:32:44.234
and then we can do
whatever we want

00:32:44.234 --> 00:32:45.634
with that data structure.

00:32:45.634 --> 00:32:47.801
We can arrange them
in any interesting way

00:32:47.801 --> 00:32:52.934
so that we can do
event handling in the future.

00:32:52.934 --> 00:32:55.934
Okay, now let's say
that you've done

00:32:55.934 --> 00:32:57.400
all of these things.

00:32:57.400 --> 00:33:01.400
You're down to raw HTML,
you're down to single listeners,

00:33:01.400 --> 00:33:04.801
and you're finding that
things still are a little slow.

00:33:04.801 --> 00:33:07.701
Maybe you've got an application
where under certain conditions

00:33:07.701 --> 00:33:09.300
things get too complicated

00:33:09.300 --> 00:33:12.200
and your application really
can't execute quickly enough.

00:33:12.200 --> 00:33:15.400
Well, there's one thing
that is unique to G-W-T,

00:33:15.400 --> 00:33:17.267
and that is you can
compile your code

00:33:17.267 --> 00:33:21.601
into both Java bytecode
and into JavaScript.

00:33:21.601 --> 00:33:25.067
Then your application
can decide at runtime

00:33:25.067 --> 00:33:26.968
whether or not to execute
that piece of code

00:33:26.968 --> 00:33:29.601
on the client
or on the server.

00:33:29.601 --> 00:33:32.133
You're gonna find
that in many cases

00:33:32.133 --> 00:33:35.400
the Java VM is much faster
than the JavaScript engines,

00:33:35.400 --> 00:33:37.067
particularly those in IE6.

00:33:37.067 --> 00:33:40.100
Now, again, those keep getting
better in every generation

00:33:40.100 --> 00:33:42.501
but if you're still working
with an older browser,

00:33:42.501 --> 00:33:43.868
you're gonna find that

00:33:43.868 --> 00:33:47.067
the Java VM really is
much faster.

00:33:47.067 --> 00:33:48.801
So now we get
to the point where

00:33:48.801 --> 00:33:53.000
we wanna decide...do I execute
this particular piece of code

00:33:53.000 --> 00:33:54.834
on the client, or do I
execute it on the server?

00:33:54.834 --> 00:33:57.501
Well, we argued over
a number of different options,

00:33:57.501 --> 00:34:00.067
you know, try and predict
how fast each one's gonna take,

00:34:00.067 --> 00:34:03.901
try and measure or estimate
network bandwidth or latency.

00:34:03.901 --> 00:34:05.234
But we decided in the end

00:34:05.234 --> 00:34:07.767
that the simplest algorithm
was the best.

00:34:07.767 --> 00:34:10.934
And the way that works is

00:34:10.934 --> 00:34:13.767
every time the user opens
a process for the first time--

00:34:13.767 --> 00:34:15.334
we're gonna go ahead

00:34:15.334 --> 00:34:17.133
and we're just
gonna do that on the client.

00:34:17.133 --> 00:34:18.934
Now, that could potentially
be slow,

00:34:18.934 --> 00:34:21.300
but we're only gonna
do that the first time.

00:34:21.300 --> 00:34:22.868
If that's not slow,

00:34:22.868 --> 00:34:25.567
if the user's using
a modern browser that's quick

00:34:25.567 --> 00:34:27.667
or they're working on
a small process,

00:34:27.667 --> 00:34:29.801
then we can continue
to generate those layout

00:34:29.801 --> 00:34:31.300
on the client.

00:34:31.300 --> 00:34:34.767
That'll give them the most
consistent and most responsive

00:34:34.767 --> 00:34:36.968
interaction
with our application.

00:34:36.968 --> 00:34:38.667
But if it turns out
it's not fast,

00:34:38.667 --> 00:34:40.300
if it's under
a certain threshold,

00:34:40.300 --> 00:34:41.901
in our case, two seconds,

00:34:41.901 --> 00:34:44.067
what's gonna happen
is the next time we do a layout

00:34:44.067 --> 00:34:46.767
we're gonna execute it
on the server instead.

00:34:46.767 --> 00:34:48.067
When we do that,

00:34:48.067 --> 00:34:49.767
we're gonna measure
the entire round trip.

00:34:49.767 --> 00:34:51.400
We're gonna send a request
to the server

00:34:51.400 --> 00:34:53.367
and measure how long it takes
to send that

00:34:53.367 --> 00:34:55.000
and get a response back.

00:34:55.000 --> 00:34:58.534
Once we've done that,
we know how fast the server is

00:34:58.534 --> 00:34:59.901
and we know how fast
the client is,

00:34:59.901 --> 00:35:01.300
and from there on out,

00:35:01.300 --> 00:35:05.467
we can simply pick whichever
the two of those is fastest.

00:35:05.467 --> 00:35:06.968
We also keep a running average,

00:35:06.968 --> 00:35:08.300
so if for some reason,

00:35:08.300 --> 00:35:10.000
one of those starts to get slow
over the other,

00:35:10.000 --> 00:35:15.067
we can actually just dynamically
switch back and forth.

00:35:15.067 --> 00:35:20.067
For us, the way that we do it
is we use a GWT RPC call.

00:35:20.067 --> 00:35:22.634
The interface
is actually very simple.

00:35:22.634 --> 00:35:24.667
We make an RPC call.

00:35:24.667 --> 00:35:26.634
We simply ask the server

00:35:26.634 --> 00:35:29.000
generate a layout
for this particular process,

00:35:29.000 --> 00:35:30.968
and it pretty much
just sends us a string

00:35:30.968 --> 00:35:33.167
with a bunch of HTML back in it.

00:35:33.167 --> 00:35:34.834
Now, because of that great
cache function

00:35:34.834 --> 00:35:36.000
I showed you a minute ago,

00:35:36.000 --> 00:35:37.501
the client
already has the ability

00:35:37.501 --> 00:35:40.501
to parse the information,
the layout information it needs,

00:35:40.501 --> 00:35:44.133
right out of that HTML.

00:35:44.133 --> 00:35:46.267
So I actually wanted
to give a quick demo

00:35:46.267 --> 00:35:50.701
to show how exactly
this works.

00:35:50.701 --> 00:35:55.767
So I'm gonna add a little
debug parameter...

00:35:55.767 --> 00:35:58.100
up here on our URL
to show us what's happening.

00:35:58.100 --> 00:35:59.767
Now, when I changed the URL,

00:35:59.767 --> 00:36:02.033
it's basically causing
this process to reload,

00:36:02.033 --> 00:36:04.534
so this is as if the user
is coming into this process

00:36:04.534 --> 00:36:05.934
for the first time.

00:36:05.934 --> 00:36:07.434
And as I said before,

00:36:07.434 --> 00:36:09.767
we're gonna generate
a client side layout.

00:36:09.767 --> 00:36:11.367
I don't know
if you can all see that,

00:36:11.367 --> 00:36:15.267
but that says client layout
4,047 milliseconds.

00:36:15.267 --> 00:36:18.501
That's obviously longer than
that 2-second threshold we had.

00:36:18.501 --> 00:36:20.801
So if I make a change
to this process,

00:36:20.801 --> 00:36:23.334
the next layout should
occur on the server.

00:36:23.334 --> 00:36:26.334
Server layout--797 milliseconds.

00:36:26.334 --> 00:36:30.434
So this is about
five times faster.

00:36:30.434 --> 00:36:32.501
So I hit undo...

00:36:32.501 --> 00:36:34.567
688 milliseconds.

00:36:34.567 --> 00:36:35.567
So as you can see,

00:36:35.567 --> 00:36:38.200
in one case,
the client is slow,

00:36:38.200 --> 00:36:39.667
but then we figure that out

00:36:39.667 --> 00:36:42.767
and we start executing the next
operations on the server.

00:36:42.767 --> 00:36:45.067
Now, there's one interesting
point about this

00:36:45.067 --> 00:36:47.667
which is this demonstration
right here

00:36:47.667 --> 00:36:51.267
actually gets less impressive
every year,

00:36:51.267 --> 00:36:54.067
and that's because the client
actually is getting faster.

00:36:54.067 --> 00:36:58.501
And I think this is a good
testament to using G-W-T

00:36:58.501 --> 00:37:02.067
and a good argument
for why you should use it.

00:37:02.067 --> 00:37:05.133
Every time a new version
of G-W-T is released,

00:37:05.133 --> 00:37:07.734
our application gets faster.

00:37:07.734 --> 00:37:10.667
We originally did this test
on 1.3

00:37:10.667 --> 00:37:13.000
when we upgraded from--
excuse me, on 1.4.

00:37:13.000 --> 00:37:17.234
When we upgraded to 1.5.,
we saw about a 10% improvement

00:37:17.234 --> 00:37:20.267
sort of in general
across our entire application.

00:37:20.267 --> 00:37:22.167
And that's part of
the reason why

00:37:22.167 --> 00:37:23.901
I've done this demo before

00:37:23.901 --> 00:37:26.334
and instead of 5X,
we've seen 9X difference

00:37:26.334 --> 00:37:27.767
between the client
and the server.

00:37:27.767 --> 00:37:31.067
So as the client gets faster,
this becomes less important.

00:37:31.067 --> 00:37:33.834
I've done a couple of tests
with 1.6

00:37:33.834 --> 00:37:37.000
which we haven't upgraded to
in production yet.

00:37:37.000 --> 00:37:38.701
We haven't seen a general

00:37:38.701 --> 00:37:40.334
performance improvement
for that,

00:37:40.334 --> 00:37:43.634
but for three of the processes
where I did a test

00:37:43.634 --> 00:37:45.701
for our layout portion
of it,

00:37:45.701 --> 00:37:48.200
two of them were 33% faster,

00:37:48.200 --> 00:37:51.400
and one of them
was 150% faster.

00:37:51.400 --> 00:37:53.167
And we didn't have to do
anything.

00:37:53.167 --> 00:37:54.534
All we had to do

00:37:54.534 --> 00:37:58.133
was upgrade the version
of G-W-T that we're using.

00:38:03.133 --> 00:38:04.567
And then finally,
to wrap up,

00:38:04.567 --> 00:38:06.501
we have just
a couple of slides

00:38:06.501 --> 00:38:11.400
that are just sort of a bunch
of random tidbits that we have,

00:38:11.400 --> 00:38:13.534
random thoughts
that we thought were useful.

00:38:13.534 --> 00:38:14.834
I don't know those of you

00:38:14.834 --> 00:38:16.467
who were at Bruce's talk
this morning,

00:38:16.467 --> 00:38:17.767
but he mentioned the fact

00:38:17.767 --> 00:38:20.868
that compiling G-W-T code
is very slow.

00:38:20.868 --> 00:38:24.434
For those of you
that started with 1.4 earlier,

00:38:24.434 --> 00:38:26.767
you know that when 1.5.
came out,

00:38:26.767 --> 00:38:28.834
it got a lot slower.

00:38:28.834 --> 00:38:30.667
Now, it's worth it,

00:38:30.667 --> 00:38:32.901
given all the optimizations
that the compiler does,

00:38:32.901 --> 00:38:35.000
but sometimes
it can be very painful.

00:38:35.000 --> 00:38:39.133
By default, when you ask
G-W-T to compile your Java

00:38:39.133 --> 00:38:40.601
into JavaScript,

00:38:40.601 --> 00:38:43.801
it's going to do that
for five different browsers.

00:38:43.801 --> 00:38:45.834
Now, when you are actively
working on development,

00:38:45.834 --> 00:38:48.968
you don't usually
need to be doing that.

00:38:48.968 --> 00:38:50.434
Usually, you're actively
debugging

00:38:50.434 --> 00:38:53.033
and working only on
a single browser at a time.

00:38:53.033 --> 00:38:54.868
Well, a very useful trick

00:38:54.868 --> 00:38:56.601
is that you can actually
tell G-W-T

00:38:56.601 --> 00:38:58.734
to only compile
for a single browser

00:38:58.734 --> 00:39:02.400
or a single locale
or a single permutation.

00:39:02.400 --> 00:39:07.434
So this is one of our
G-W-T module XML files.

00:39:07.434 --> 00:39:12.067
We simply have a line in here
that we keep commented out,

00:39:12.067 --> 00:39:13.801
and when I'm doing debugging

00:39:13.801 --> 00:39:16.467
and I wanna only build for,
in this case, Internet Explorer,

00:39:16.467 --> 00:39:19.334
I simply uncomment that line,
and next time I do a compile

00:39:19.334 --> 00:39:21.000
it's only gonna generate
the JavaScript

00:39:21.000 --> 00:39:22.434
for Internet Explorer.

00:39:22.434 --> 00:39:25.601
You're gonna find that this
saves you a lot of time.

00:39:28.000 --> 00:39:30.534
Moffat: Hosted mode
is another choice.

00:39:30.534 --> 00:39:32.534
Lundin: Yes.

00:39:32.534 --> 00:39:34.100
Yes, if you're using
hosted mode--

00:39:34.100 --> 00:39:36.067
Moffat: 'Cause I'm on the Mac,

00:39:36.067 --> 00:39:37.834
so I can't use hosted mode
to do IE6,

00:39:37.834 --> 00:39:39.400
which is why I want GBT 2.0.

00:39:39.400 --> 00:39:42.133
Lundin: Yes. Yeah, the main
advantage of hosted mode

00:39:42.133 --> 00:39:44.200
is, obviously, you don't
have to compile at all.

00:39:44.200 --> 00:39:47.267
You simply launch hosted mode,
and it compiles on the fly.

00:39:47.267 --> 00:39:49.200
You make a change,
you simply hit refresh,

00:39:49.200 --> 00:39:50.901
and it happens very quickly.

00:39:50.901 --> 00:39:52.801
This will probably actually
become completely unnecessary

00:39:52.801 --> 00:39:55.834
when G-W-T 2.0 comes out

00:39:55.834 --> 00:39:59.501
and they release the out of
process hosted mode,

00:39:59.501 --> 00:40:01.734
in which case you're almost
never going to need to

00:40:01.734 --> 00:40:06.000
actually compile--
do a GWT compile.

00:40:06.000 --> 00:40:09.000
A similar...

00:40:09.000 --> 00:40:11.000
tip that you can use
for this

00:40:11.000 --> 00:40:12.601
is that if you have
an application

00:40:12.601 --> 00:40:14.000
that's particularly large,

00:40:14.000 --> 00:40:16.534
you can also consider splitting
it into multiple modules.

00:40:16.534 --> 00:40:18.033
So in the case of Blueprint,

00:40:18.033 --> 00:40:19.801
we have a home page module,

00:40:19.801 --> 00:40:22.167
we have a process page module,
admin page module.

00:40:22.167 --> 00:40:23.634
When I'm doing development,

00:40:23.634 --> 00:40:25.801
I'm likely only working
on one of those at a time.

00:40:25.801 --> 00:40:29.400
So if I make changes
to a particular piece of code,

00:40:29.400 --> 00:40:31.200
I only recompile
that particular module.

00:40:31.200 --> 00:40:32.701
And it saves
a little bit of time

00:40:32.701 --> 00:40:35.701
instead of having to recompile
the entire application.

00:40:35.701 --> 00:40:38.367
Moffat: And also, sorry,
in 1.6 we...

00:40:38.367 --> 00:40:40.834
so at the moment for 1.53
we do our builds in Ant,

00:40:40.834 --> 00:40:43.267
and we use
the Ant parallel task.

00:40:43.267 --> 00:40:46.467
So we actually run like
all of our seven page--

00:40:46.467 --> 00:40:48.868
all of our compiles at once
at the same time.

00:40:48.868 --> 00:40:53.434
And then I've experimented a bit
with local workers in 1.64,

00:40:53.434 --> 00:40:55.200
you know, 'cause you can turn
the number of local workers

00:40:55.200 --> 00:40:56.634
up and down,

00:40:56.634 --> 00:40:58.200
and how does that interact
with parallel compiles?

00:40:58.200 --> 00:41:00.367
And for a single page,
it's faster for us

00:41:00.367 --> 00:41:04.267
to run like as many
local workers as you have cause.

00:41:04.267 --> 00:41:05.934
But if you're doing
multiple pages,

00:41:05.934 --> 00:41:07.534
it's still faster first
to run, you know,

00:41:07.534 --> 00:41:09.367
multiple pages in parallel.

00:41:09.367 --> 00:41:11.400
Because the portion
at the front of the compiler

00:41:11.400 --> 00:41:13.567
where it works out
what the permutations are...

00:41:13.567 --> 00:41:15.968
is for our page
is a fair portion

00:41:15.968 --> 00:41:17.501
of the actual compile time.

00:41:17.501 --> 00:41:19.534
So we don't save too much
if you're in a whole bunch

00:41:19.534 --> 00:41:23.767
of many local worker threads
in parallel.

00:41:23.767 --> 00:41:25.267
Lundin: And just
a few more comments.

00:41:25.267 --> 00:41:28.200
If you find yourself doing
a lot of DOM operations

00:41:28.200 --> 00:41:29.767
that are related to style,

00:41:29.767 --> 00:41:31.300
if you find yourself
basically

00:41:31.300 --> 00:41:33.968
imbedding CSS constants
in your application

00:41:33.968 --> 00:41:36.434
and calling getStyle
at setProperty

00:41:36.434 --> 00:41:38.934
with a value that never changes,
don't do that.

00:41:38.934 --> 00:41:41.234
Instead of executing
that code in GWT,

00:41:41.234 --> 00:41:43.234
which is a JavaScript
operation,

00:41:43.234 --> 00:41:44.968
put that in a CSS file.

00:41:44.968 --> 00:41:47.400
Your browser can evaluate
the CSS much faster

00:41:47.400 --> 00:41:49.133
than it can execute
the JavaScript

00:41:49.133 --> 00:41:51.767
and perform
that DOM manipulation.

00:41:51.767 --> 00:41:54.501
Avoid using iterators
over a list.

00:41:54.501 --> 00:41:56.067
This is a very minor point,

00:41:56.067 --> 00:41:58.067
but it's a very simple
thing to avoid doing.

00:41:58.067 --> 00:41:59.734
Every time you create
an iterator,

00:41:59.734 --> 00:42:01.234
which, unfortunately,
is also with

00:42:01.234 --> 00:42:03.501
the for each
language construct,

00:42:03.501 --> 00:42:05.067
that creates
a JavaScript object.

00:42:05.067 --> 00:42:07.200
And as I've already said,
JavaScript object creation

00:42:07.200 --> 00:42:08.901
is relatively expensive.

00:42:08.901 --> 00:42:11.701
If you iterate over the list
using an index instead,

00:42:11.701 --> 00:42:14.868
you saved yourself the creation
of a JavaScript object.

00:42:14.868 --> 00:42:17.033
If you find that you have
a long list

00:42:17.033 --> 00:42:18.934
of things
that you were creating

00:42:18.934 --> 00:42:21.167
that may be taking you
a long time,

00:42:21.167 --> 00:42:22.667
one thing that you can do

00:42:22.667 --> 00:42:25.067
to improve the perceived
performance of your application

00:42:25.067 --> 00:42:27.100
is split it into
incremental commands.

00:42:27.100 --> 00:42:29.868
Just like that deferred command
that I mentioned before,

00:42:29.868 --> 00:42:33.167
IncrementalCommand will allow
you to show your application

00:42:33.167 --> 00:42:34.367
in chunks.

00:42:34.367 --> 00:42:35.667
So if you have
a large list of things,

00:42:35.667 --> 00:42:38.934
you can show the first block
of things to the user

00:42:38.934 --> 00:42:41.534
while you're sort of
in the background

00:42:41.534 --> 00:42:43.634
working on
the next set of it.

00:42:43.634 --> 00:42:45.434
Now, it will still take
the same amount of time

00:42:45.434 --> 00:42:46.934
to do the entire thing,

00:42:46.934 --> 00:42:48.801
but at least you can get
the results,

00:42:48.801 --> 00:42:51.400
the first bits of results
to the user right away

00:42:51.400 --> 00:42:54.667
instead of making them wait
for the entire thing.

00:42:54.667 --> 00:42:57.067
And then lastly, when we've
done performance testing,

00:42:57.067 --> 00:42:59.734
you can't use hosted mode
for performance testing

00:42:59.734 --> 00:43:02.734
because
of the various com calls

00:43:02.734 --> 00:43:04.734
or the various integrations
with a browser.

00:43:04.734 --> 00:43:07.100
It doesn't behave
like a real browser would.

00:43:07.100 --> 00:43:09.501
In hosted mode you have
gtw-Log and System.out

00:43:09.501 --> 00:43:10.934
you can take advantage of.

00:43:10.934 --> 00:43:13.100
But you don't have those things
in an actual browser.

00:43:13.100 --> 00:43:15.033
And so there are a number
of things that you can do

00:43:15.033 --> 00:43:16.901
to try and get information
out of your browser,

00:43:16.901 --> 00:43:19.100
and one of the simplest
things that we do

00:43:19.100 --> 00:43:22.434
is simply open your application
in another frame

00:43:22.434 --> 00:43:24.834
and call document.write
on that frame,

00:43:24.834 --> 00:43:27.434
and you basically get
a console on your application.

00:43:27.434 --> 00:43:29.868
There's also a couple of
toolkits that you can do

00:43:29.868 --> 00:43:31.434
that do things similar.

00:43:31.434 --> 00:43:34.567
There's gwt-log library
as well as the Logging library

00:43:34.567 --> 00:43:36.968
in the gwt incubator.

00:43:36.968 --> 00:43:40.701
Moffat: We've also
done stuff with...

00:43:40.701 --> 00:43:44.000
there's a...

00:43:44.000 --> 00:43:45.634
package of code
called episodes,

00:43:45.634 --> 00:43:47.300
and the guy that wrote Yslow

00:43:47.300 --> 00:43:50.300
that collects performance
data on the client

00:43:50.300 --> 00:43:52.400
and then uses a web beacon

00:43:52.400 --> 00:43:54.300
to transfer it across
to the server.

00:43:54.300 --> 00:43:56.601
And then you can pull it out
of the web request logs.

00:43:56.601 --> 00:43:58.100
So we've actually got that in,

00:43:58.100 --> 00:44:00.200
so on the production site,

00:44:00.200 --> 00:44:03.567
we can track how long
it takes for people

00:44:03.567 --> 00:44:07.767
to go from on unload
on page A

00:44:07.767 --> 00:44:09.868
to load
to the beginning of page B

00:44:09.868 --> 00:44:13.501
so we know what server time is
in the round-trip time.

00:44:13.501 --> 00:44:15.868
And then we track various
other significant points

00:44:15.868 --> 00:44:20.000
until the end of either
on module load

00:44:20.000 --> 00:44:22.167
or to the pages loaded.

00:44:22.167 --> 00:44:24.267
And those are very
interesting numbers

00:44:24.267 --> 00:44:25.501
because you can see,
you know,

00:44:25.501 --> 00:44:26.767
what sort of performance

00:44:26.767 --> 00:44:29.701
are people actually
seeing on their browsers.

00:44:29.701 --> 00:44:32.968
So it's well worth
implementing that sort of stuff

00:44:32.968 --> 00:44:35.067
and also stuff--
we also have code in there

00:44:35.067 --> 00:44:37.467
where, if we get an exception
on the client,

00:44:37.467 --> 00:44:39.567
we send the information
back across to the server

00:44:39.567 --> 00:44:41.067
and dump it into
our debug logs,

00:44:41.067 --> 00:44:45.868
even if we're not
gonna show it to the customer.

00:44:45.868 --> 00:44:48.000
Which is a similar thing
to what was mentioned

00:44:48.000 --> 00:44:50.367
in the previous talk
about using a search

00:44:50.367 --> 00:44:52.434
instead of throwing exceptions.

00:44:52.434 --> 00:44:55.167
It's useful, if you've got
that sort of an error, though,

00:44:55.167 --> 00:44:56.667
to send it across
to the server,

00:44:56.667 --> 00:44:59.067
because you're clearly
having a problem in production

00:44:59.067 --> 00:45:00.567
and you'd like to know about it

00:45:00.567 --> 00:45:04.234
rather than have people see,
you know, exceptions

00:45:04.234 --> 00:45:08.133
or little pop-ups
at the bottom of their browsers.

00:45:08.133 --> 00:45:10.234
Lundin: Yep. And then I had
one last point on this

00:45:10.234 --> 00:45:12.934
that I guess didn't make it
up on the slide which is

00:45:12.934 --> 00:45:14.434
if you're working on GWT

00:45:14.434 --> 00:45:16.868
and you've got RPC calls
that you've been making,

00:45:16.868 --> 00:45:21.334
you may find the temptation
to send an empty HTML page

00:45:21.334 --> 00:45:23.734
or near-empty HTML page
to the client

00:45:23.734 --> 00:45:25.868
when the user first logs
into your application

00:45:25.868 --> 00:45:27.934
and then make a subsequent
RPC call

00:45:27.934 --> 00:45:29.701
to actually fetch
all the data.

00:45:29.701 --> 00:45:32.601
What you can do instead
is you can actually imbed

00:45:32.601 --> 00:45:35.133
the data that you need
right in the page.

00:45:35.133 --> 00:45:37.534
So in the example
of our processes,

00:45:37.534 --> 00:45:39.000
there's an awful lot
of information

00:45:39.000 --> 00:45:41.133
that we want to show
to the user right away.

00:45:41.133 --> 00:45:43.234
And the way that we do that
is we embed that data

00:45:43.234 --> 00:45:44.501
directly in the web page.

00:45:44.501 --> 00:45:46.767
You can either use JSON
for that

00:45:46.767 --> 00:45:48.667
or with, as with GWT 1.5,

00:45:48.667 --> 00:45:52.834
you can actually fake
an RPC call on the server

00:45:52.834 --> 00:45:56.367
and take its payload and embed
it directly in the HTML.

00:45:56.367 --> 00:45:58.234
Moffat: "Faking"--
he's making it sound like

00:45:58.234 --> 00:46:00.334
it's not supported,
but it actually is supported.

00:46:00.334 --> 00:46:01.901
It's a perfectly reasonable
legitimate way

00:46:01.901 --> 00:46:03.234
to go about doing this.

00:46:03.234 --> 00:46:04.901
Lundin: It doesn't actually
make an RPC call,

00:46:04.901 --> 00:46:07.067
but it generates
the same data--

00:46:07.067 --> 00:46:08.501
Moffat: You serialize
the payload

00:46:08.501 --> 00:46:11.534
as if for an RPC call,
stuff it into the HTML,

00:46:11.534 --> 00:46:13.300
and then pass it on
the client.

00:46:13.300 --> 00:46:16.601
Lundin: Yep. So that's all
we have for our presentation.

00:46:16.601 --> 00:46:21.100
If you have any questions,
please come up to the mike.

00:46:21.100 --> 00:46:22.100
[applause]

00:46:22.100 --> 00:46:23.968
Moffat: Thank you.

00:46:27.734 --> 00:46:30.133
And no one has any questions.
Excellent.

00:46:30.133 --> 00:46:32.100
[Lundin laughs]

00:46:34.934 --> 00:46:37.467
man: Thank you for...

00:46:37.467 --> 00:46:38.567
Moffat: Yes?

00:46:38.567 --> 00:46:40.234
man: Thank you for
a good presentation.

00:46:40.234 --> 00:46:41.801
A quick question.

00:46:41.801 --> 00:46:44.200
You mentioned several times
about how expensive it is

00:46:44.200 --> 00:46:47.200
to create a JavaScript object.

00:46:47.200 --> 00:46:50.801
Is there any work being done
that would make it

00:46:50.801 --> 00:46:54.934
a lot less expensive
to create a JavaScript object?

00:46:54.934 --> 00:46:58.000
And is there also any work
that you may be aware of

00:46:58.000 --> 00:47:01.067
where we can actually,

00:47:01.067 --> 00:47:02.567
instead of interpreting
JavaScript code,

00:47:02.567 --> 00:47:04.400
you can actually
compel JavaScript code

00:47:04.400 --> 00:47:06.067
and have it run--

00:47:06.067 --> 00:47:07.667
Lundin: I'm sorry,
what was that last bit?

00:47:07.667 --> 00:47:09.467
Moffat: Compile it, I mean--
man: Compel it. Right.

00:47:09.467 --> 00:47:11.267
So it's already
in machine-language format

00:47:11.267 --> 00:47:12.467
so you can run it
immediately.

00:47:12.467 --> 00:47:13.834
Moffat: I mean--

00:47:13.834 --> 00:47:15.267
man: Having it built
on the server

00:47:15.267 --> 00:47:17.567
and just ship it to the client
in machine-language format.

00:47:17.567 --> 00:47:20.267
Moffat: I mean, it's out of our
area of expertise,

00:47:20.267 --> 00:47:21.267
to be honest.

00:47:21.267 --> 00:47:22.667
We're sort of stuck with

00:47:22.667 --> 00:47:25.200
the browsers that we're stuck
with supporting,

00:47:25.200 --> 00:47:26.868
which get better and better.

00:47:26.868 --> 00:47:31.400
I know that the...
like Squirrelfish,

00:47:31.400 --> 00:47:33.801
whatever
that's now called in V8,

00:47:33.801 --> 00:47:37.434
do...
compilation-to-machine code

00:47:37.434 --> 00:47:39.067
on the client.

00:47:39.067 --> 00:47:41.868
I mean, they do the same
sort of things that JVMs do.

00:47:41.868 --> 00:47:45.167
And...you know,
there was a thing

00:47:45.167 --> 00:47:46.968
that Microsoft put out
about, you know,

00:47:46.968 --> 00:47:48.767
what's the best thing that--

00:47:48.767 --> 00:47:51.467
what do you want us to do
most in our IE9?

00:47:51.467 --> 00:47:53.868
And the one thing we want most
is to get rid of IE6,

00:47:53.868 --> 00:47:55.534
that they can't do.

00:47:55.534 --> 00:47:57.767
I mean, that's just--
unfortunately, we're at about...

00:47:57.767 --> 00:48:01.167
like 60 or 70% of our users
are on that thing.

00:48:01.167 --> 00:48:02.634
I mean,
once that goes away,

00:48:02.634 --> 00:48:04.934
life is gonna get so much
easier--we hope, of course.

00:48:04.934 --> 00:48:06.834
Lundin: Yeah, the basic
answer to your question

00:48:06.834 --> 00:48:08.667
is yes, there is work
being done on that,

00:48:08.667 --> 00:48:10.734
but it's being done
by the browser venders.

00:48:10.734 --> 00:48:14.367
And so as long as you're stuck
supporting older browsers...

00:48:14.367 --> 00:48:16.734
Moffat: As it's politely
phrased--older browsers,

00:48:16.734 --> 00:48:18.234
less capable browsers.

00:48:18.234 --> 00:48:20.501
Lundin: GWT has been doing
its best to make that faster,

00:48:20.501 --> 00:48:24.534
and it's doing
a pretty good job of it.

00:48:24.534 --> 00:48:26.934
man: Uh, the question is
have you compared

00:48:26.934 --> 00:48:32.934
the performance of your
Internet Explorer 6 application

00:48:32.934 --> 00:48:35.934
compared to Chrome
and Mozilla?

00:48:35.934 --> 00:48:38.033
Because your recommendation's

00:48:38.033 --> 00:48:43.467
how true they are
compared to different browsers.

00:48:43.467 --> 00:48:45.234
Lundin: It's kinda interesting

00:48:45.234 --> 00:48:46.901
because we know that
they're faster,

00:48:46.901 --> 00:48:48.634
and even considerably faster,

00:48:48.634 --> 00:48:50.067
so we actually
don't pay attention

00:48:50.067 --> 00:48:51.400
to their performance
very much,

00:48:51.400 --> 00:48:53.334
because we know
if it works for IE6

00:48:53.334 --> 00:48:55.434
then we're gonna be good
on all the other browsers.

00:48:55.434 --> 00:48:57.234
Moffat: There are some posts
on our blog

00:48:57.234 --> 00:48:58.968
where I have done comparisons.

00:48:58.968 --> 00:49:03.601
I mean, I've done
7, 8 Safari...

00:49:03.601 --> 00:49:06.767
Firefox and Chrome.

00:49:06.767 --> 00:49:09.234
I didn't do 6 because
it was just so appalling.

00:49:09.234 --> 00:49:12.000
I mean, even between those,
there's quite a difference.

00:49:12.000 --> 00:49:14.701
I mean, things are getting
really very, very fast now.

00:49:14.701 --> 00:49:16.501
Some of those demos

00:49:16.501 --> 00:49:18.601
that we saw during the keynote
this morning

00:49:18.601 --> 00:49:21.901
where they were doing stuff
in JavaScript...

00:49:21.901 --> 00:49:23.634
it's pretty amazing.

00:49:23.634 --> 00:49:25.534
And with the compilation
improvements as well,

00:49:25.534 --> 00:49:28.534
things are executing
a lot faster now

00:49:28.534 --> 00:49:31.767
than even when we started
a couple of years ago.

00:49:33.601 --> 00:49:36.300
man: Getting away from the
performance topic for a second,

00:49:36.300 --> 00:49:39.400
what kind of
back button behavior

00:49:39.400 --> 00:49:40.501
does your application have?

00:49:40.501 --> 00:49:41.968
And does GWT give you
a reasonable way

00:49:41.968 --> 00:49:43.467
to handle the back button

00:49:43.467 --> 00:49:46.200
to make it be
whatever you want it to be?

00:49:46.200 --> 00:49:48.300
Moffat: Pardon?
man: The back button.

00:49:48.300 --> 00:49:49.701
Moffat: Oh, the back button!

00:49:49.701 --> 00:49:52.200
Yes, GWT gives us
complete history support.

00:49:52.200 --> 00:49:53.200
So it's fine.

00:49:53.200 --> 00:49:54.601
You can do stuff like--

00:49:54.601 --> 00:49:56.100
I mean, not just back
between pages--

00:49:56.100 --> 00:50:00.000
but certainly in the...
the process map, isn't it?

00:50:00.000 --> 00:50:02.400
On the process page...
if you're on a diagram

00:50:02.400 --> 00:50:05.100
and you hit the back button,
you can go back to the map page.

00:50:05.100 --> 00:50:10.501
So it's more a case of actually
implementing it than...

00:50:10.501 --> 00:50:12.934
You basically follow
what they've documented

00:50:12.934 --> 00:50:15.000
as the way that you should do
it, and it works.

00:50:15.000 --> 00:50:17.100
There's no special tricks
or anything.

00:50:17.100 --> 00:50:18.934
They provide like
a history frame

00:50:18.934 --> 00:50:21.033
that you have to include
in your HTML.

00:50:21.033 --> 00:50:23.801
And then they use--I can't
remember exactly how it's done.

00:50:23.801 --> 00:50:26.701
I think it's done using hashtags
in the URL of the history frame.

00:50:26.701 --> 00:50:29.400
man: Right. Some of my users
think of the back button

00:50:29.400 --> 00:50:30.767
as the undo button.

00:50:30.767 --> 00:50:33.234
I wonder if you ran into that
in your UI testing.

00:50:33.234 --> 00:50:36.901
Moffat: Ah, no.
We actually have an undo button.

00:50:36.901 --> 00:50:38.400
Which is labeled undo,

00:50:38.400 --> 00:50:43.501
so hopefully we can get
away from that one.

00:50:43.501 --> 00:50:45.367
man: Hi. I have a question

00:50:45.367 --> 00:50:47.400
about the first part
of the presentation.

00:50:47.400 --> 00:50:49.501
Moffat: Yes?
man: The UI stuff?

00:50:49.501 --> 00:50:52.501
When you were showing
adding the users

00:50:52.501 --> 00:50:54.033
and the little highlight thing,

00:50:54.033 --> 00:50:57.000
you mentioned that
it's sort of an easy case

00:50:57.000 --> 00:50:59.701
because it's always gonna be
46 pixels high.

00:50:59.701 --> 00:51:04.567
And I'm wondering if you've
ever taken into account...

00:51:04.567 --> 00:51:06.434
when sometimes users
will change

00:51:06.434 --> 00:51:07.868
the size of the text
in their browser

00:51:07.868 --> 00:51:10.968
and how you factor that into
your design.

00:51:10.968 --> 00:51:12.968
Moffat: We're--we're--
I mean, let's be honest.

00:51:12.968 --> 00:51:15.300
We're very bad.
I mean, we don't.

00:51:15.300 --> 00:51:18.667
We just--it's gonna be like--
it's gonna look like this

00:51:18.667 --> 00:51:20.467
if you stick with
these font sizes.

00:51:20.467 --> 00:51:23.467
If you change the font size,
it's gonna look bad.

00:51:23.467 --> 00:51:25.267
I mean...

00:51:25.267 --> 00:51:31.200
I mean, that's one of the ones
where we're...the...

00:51:31.200 --> 00:51:33.067
I don't know how
to phrase it properly.

00:51:33.067 --> 00:51:36.067
Sometimes just good enough
is good enough for us.

00:51:36.067 --> 00:51:37.868
We try and get it
to look really good,

00:51:37.868 --> 00:51:40.567
the way we want it
to be displayed,

00:51:40.567 --> 00:51:43.868
but people doing
that sort of thing to--

00:51:43.868 --> 00:51:45.968
Also the other one
that's a big pain

00:51:45.968 --> 00:51:47.901
is changing DPI settings...

00:51:47.901 --> 00:51:51.968
can really play havoc
with the diagram.

00:51:51.968 --> 00:51:55.100
man: Yeah, 'cause in the
application that I'm working on,

00:51:55.100 --> 00:51:56.868
we're trying to deal with,
you know,

00:51:56.868 --> 00:51:58.067
users with different
screen sizes.

00:51:58.067 --> 00:51:59.467
Moffat: Yes.

00:51:59.467 --> 00:52:01.300
man: And a lot of times,
when a user has a big screen,

00:52:01.300 --> 00:52:04.033
the first thing they'll do
is just jack up the font size.

00:52:04.033 --> 00:52:07.367
Moffat: Yeah, yeah, I mean...
it can be done,

00:52:07.367 --> 00:52:10.033
but it's a lot more--
it's obviously a lot more work

00:52:10.033 --> 00:52:11.534
because you can't just say

00:52:11.534 --> 00:52:13.334
I'm gonna have
a fixed-height element.

00:52:13.334 --> 00:52:17.234
The other thing to do
is to push back on the...

00:52:17.234 --> 00:52:18.734
because it's a tradeoff,
isn't it?

00:52:18.734 --> 00:52:20.834
If you didn't have to have
the rounded ends

00:52:20.834 --> 00:52:22.167
on that highlight...

00:52:22.167 --> 00:52:23.701
you could actually do it
pretty easily,

00:52:23.701 --> 00:52:25.334
and it would look
fairly nice.

00:52:25.334 --> 00:52:26.834
man: Like using EM?
Moffat: Yeah.

00:52:26.834 --> 00:52:30.434
Or you can--the other one
I'd really like us to try

00:52:30.434 --> 00:52:33.434
at some point is some sort
of progressive enhancement.

00:52:33.434 --> 00:52:37.033
So, you know, if you're on
like a more capable browser,

00:52:37.033 --> 00:52:40.667
you get the better look,
but we can support a basic look

00:52:40.667 --> 00:52:42.734
that works with different
front sizes

00:52:42.734 --> 00:52:45.467
on less capable browsers.

00:52:45.467 --> 00:52:48.734
On all browsers, you can change
the font size and it looks okay.

00:52:48.734 --> 00:52:51.434
If you're using a more modern
one, you get rounded corners.

00:52:51.434 --> 00:52:54.734
But it's a case of...
sometimes product management

00:52:54.734 --> 00:52:57.434
isn't prepared to accept
the slightly less ugly look

00:52:57.434 --> 00:52:59.901
in exchange for a benefit
that, really, they don't see

00:52:59.901 --> 00:53:02.601
anyone is prepared to pay for,
honestly.

00:53:02.601 --> 00:53:04.701
man: Thanks.

00:53:04.701 --> 00:53:06.801
man: We spend a lot of effort
trying to be happy

00:53:06.801 --> 00:53:08.033
with automated unit tests,

00:53:08.033 --> 00:53:11.000
and GWT test case
is relatively slow,

00:53:11.000 --> 00:53:12.501
so what we found is--

00:53:12.501 --> 00:53:16.100
and I'm hoping you have better
approaches than what we found--

00:53:16.100 --> 00:53:17.667
is taking our controllers
and having--

00:53:17.667 --> 00:53:19.100
controllers
have no GWT code in them

00:53:19.100 --> 00:53:20.601
but just receive events,

00:53:20.601 --> 00:53:22.100
they tally all events.

00:53:22.100 --> 00:53:24.501
Then we can test that
the event handling is correct,

00:53:24.501 --> 00:53:26.200
and then assume
that the UI will react

00:53:26.200 --> 00:53:28.100
according to the events,
but the logic, at least,

00:53:28.100 --> 00:53:29.901
the business logic
with event handling

00:53:29.901 --> 00:53:32.000
could be separated
into a standard JDA test

00:53:32.000 --> 00:53:33.501
What else is there?

00:53:33.501 --> 00:53:35.901
What have you done to be able
to really, really--

00:53:35.901 --> 00:53:38.601
or hopefully really
unit test this also quickly?

00:53:38.601 --> 00:53:40.734
Moffat: You're like preaching
to the choir here.

00:53:40.734 --> 00:53:44.334
This is exactly
what Damon is all about

00:53:44.334 --> 00:53:47.000
is exactly the thing
that you're talking about.

00:53:47.000 --> 00:53:48.834
Because that thing is so slow,

00:53:48.834 --> 00:53:50.968
taking the UI
out of the equation

00:53:50.968 --> 00:53:55.100
is really all we've
been able to do...

00:53:55.100 --> 00:53:57.200
and, like you say,
rely on the fact

00:53:57.200 --> 00:53:59.601
that if someone
presses a button,

00:53:59.601 --> 00:54:01.434
the button event
is going to get to us.

00:54:01.434 --> 00:54:02.601
So what we have to test

00:54:02.601 --> 00:54:04.501
is from the controller
through the model

00:54:04.501 --> 00:54:07.200
and make sure that the model
is transformed in the right way.

00:54:07.200 --> 00:54:08.667
I haven't really seen
anything else.

00:54:08.667 --> 00:54:10.767
And we still have problems,
of course, with...

00:54:10.767 --> 00:54:12.267
we'd like an automated way

00:54:12.267 --> 00:54:14.701
to be able to script
actual browser testing

00:54:14.701 --> 00:54:18.868
so that we can automatically
run IE6 and Firefox and IE7,

00:54:18.868 --> 00:54:21.567
all those sorts of tests
through the actual browser.

00:54:21.567 --> 00:54:23.667
And, again, it's still
a painful process.

00:54:23.667 --> 00:54:25.467
Lundin: There is one thing
that we found that--

00:54:25.467 --> 00:54:27.267
man:...using selenium
to do that?

00:54:27.267 --> 00:54:28.267
Moffat: Pardon?

00:54:28.267 --> 00:54:29.667
man: Are you using selenium
to run--

00:54:29.667 --> 00:54:31.767
Moffat: No. We're using...

00:54:31.767 --> 00:54:33.267
wattage--no, not wattage.

00:54:33.267 --> 00:54:36.267
We're using Watir.
The Ruby-based one.

00:54:36.267 --> 00:54:38.067
Lundin: One point
I was gonna add

00:54:38.067 --> 00:54:40.234
is if you have a lot of

00:54:40.234 --> 00:54:42.934
interaction with native
JavaScript objects,

00:54:42.934 --> 00:54:45.601
then your hosted mode test
will be much slower.

00:54:45.601 --> 00:54:48.100
For a long time, like I said,
our application,

00:54:48.100 --> 00:54:49.767
which was originally
written in JavaScript,

00:54:49.767 --> 00:54:53.100
and so we had a core
heart of our application

00:54:53.100 --> 00:54:55.767
that remained JavaScript
for a very long time.

00:54:55.767 --> 00:54:57.267
And when we finally
got rid of it

00:54:57.267 --> 00:54:58.801
and made it 100% GWT,

00:54:58.801 --> 00:55:03.434
one set of tests dropped
from 12 minutes to 2 minutes.

00:55:03.434 --> 00:55:06.968
By getting rid of
the native interaction.

00:55:06.968 --> 00:55:08.734
man: Maybe you just
answered my question.

00:55:08.734 --> 00:55:10.834
Can you tell me about
your experiences

00:55:10.834 --> 00:55:14.434
going from Dojo to G-W-T?

00:55:14.434 --> 00:55:18.334
Moffat: Um...right,
so I mean, originally...

00:55:18.334 --> 00:55:21.067
originally what we did
was we built the original thing

00:55:21.067 --> 00:55:25.534
using Flash and HTML
with our own JavaScript.

00:55:25.534 --> 00:55:27.000
And that really
was pretty terrible,

00:55:27.000 --> 00:55:28.234
because the interaction

00:55:28.234 --> 00:55:30.601
with Flash and HTML
drag and drop's awful.

00:55:30.601 --> 00:55:33.634
Then we moved over to Dojo,

00:55:33.634 --> 00:55:36.267
and we managed to build
a first version with Dojo.

00:55:36.267 --> 00:55:39.033
The problem was, it was pretty
much un-maintainable.

00:55:39.033 --> 00:55:41.434
We found it very,
very difficult

00:55:41.434 --> 00:55:43.834
to deal with large quantities
of JavaScript.

00:55:43.834 --> 00:55:48.934
When we moved over to GWT,
or G-W-T,

00:55:48.934 --> 00:55:53.434
we...rewrote pretty much
page-by-page,

00:55:53.434 --> 00:55:59.434
and it came down to
it was faster to rewrite...

00:55:59.434 --> 00:56:02.434
the UI as GWT code

00:56:02.434 --> 00:56:04.567
and keep sort of
the client side model

00:56:04.567 --> 00:56:06.100
as JavaScript for a while.

00:56:06.100 --> 00:56:07.601
So what we would have would be

00:56:07.601 --> 00:56:10.601
all the data would be stored
effectively in JSON

00:56:10.601 --> 00:56:13.000
in JavaScript
in the client,

00:56:13.000 --> 00:56:15.701
and then we'd have
a GWT front end on top of that

00:56:15.701 --> 00:56:20.501
and JSNI methods calling
back and forth between the two.

00:56:20.501 --> 00:56:22.601
What we did end up with
after that, though,

00:56:22.601 --> 00:56:26.167
was a bunch of G-W-T code

00:56:26.167 --> 00:56:29.000
that looked like
converted Dojo code.

00:56:29.000 --> 00:56:31.100
So it was sort of
fairly horrible,

00:56:31.100 --> 00:56:32.801
and we've gradually
been going through

00:56:32.801 --> 00:56:36.367
getting rid of that.

00:56:36.367 --> 00:56:37.701
The app was much smaller

00:56:37.701 --> 00:56:39.701
at the time
we did the conversion.

00:56:39.701 --> 00:56:42.400
And there weren't really any...

00:56:42.400 --> 00:56:44.834
there were no "gotchas"
that I think we ran into.

00:56:44.834 --> 00:56:47.801
It was just a case of going
ahead and doing it,

00:56:47.801 --> 00:56:51.501
and it turned out to be--
to really be pretty easy.

00:56:51.501 --> 00:56:54.100
I mean, obviously, we wouldn't
be up here otherwise.

00:56:54.100 --> 00:56:55.767
But it's a great--

00:56:55.767 --> 00:56:59.767
I'm just an enormous fan
of the tooling that's available

00:56:59.767 --> 00:57:01.100
if you're writing in G-W-T.

00:57:01.100 --> 00:57:03.467
It's just tremendous.

00:57:03.467 --> 00:57:04.968
woman: I've got two questions.

00:57:04.968 --> 00:57:08.234
Number one, you said
you had three pages

00:57:08.234 --> 00:57:09.801
broken down into
three different modules.

00:57:09.801 --> 00:57:12.167
Moffat: We've actually got--
yeah, we've got more than that.

00:57:12.167 --> 00:57:14.267
We've got seven, I think,
something like that, but yeah.

00:57:14.267 --> 00:57:16.067
woman: How do you pass
the GUI state between them?

00:57:16.067 --> 00:57:19.367
Would that be through a flow
JavaScript variable or...

00:57:19.367 --> 00:57:22.601
Moffat: What we do is...

00:57:22.601 --> 00:57:25.767
our pages correspond--
I mean, they all reload.

00:57:25.767 --> 00:57:26.801
So like when you go from

00:57:26.801 --> 00:57:28.934
the project page
to the process page,

00:57:28.934 --> 00:57:30.734
the only information
we actually need to pass

00:57:30.734 --> 00:57:32.601
is which process
you're going to.

00:57:32.601 --> 00:57:35.300
So we don't need to...

00:57:35.300 --> 00:57:39.801
to pass any information
on the client between the pages.

00:57:39.801 --> 00:57:41.300
I mean,
the way we could do it

00:57:41.300 --> 00:57:44.567
is there's a window.name
hack--is it window.name?

00:57:44.567 --> 00:57:46.300
There's a hack you can do
on the window.name

00:57:46.300 --> 00:57:48.200
where you can stuff a whole
bunch of information

00:57:48.200 --> 00:57:50.234
into the window.name
on one page

00:57:50.234 --> 00:57:52.968
and actually pull it out
on the other page

00:57:52.968 --> 00:57:54.133
like kilobytes of data.

00:57:54.133 --> 00:57:55.400
So that's pretty cool,

00:57:55.400 --> 00:57:57.701
but we've never actually
had to do that.

00:57:57.701 --> 00:57:59.567
Lundin: I think
the bottom line is that

00:57:59.567 --> 00:58:01.734
if you do find that you need
to pass a lot of JavaScript

00:58:01.734 --> 00:58:03.434
from sort of one module
to the other,

00:58:03.434 --> 00:58:05.934
they really need to be
loaded as one module.

00:58:05.934 --> 00:58:08.033
So you really don't
wanna be doing

00:58:08.033 --> 00:58:09.834
a whole reload of the page.

00:58:09.834 --> 00:58:12.534
Every time you load
a page in GWT,

00:58:12.534 --> 00:58:14.634
There's this on module
load method that gets called.

00:58:14.634 --> 00:58:17.367
You really would only want
to have that happen once

00:58:17.367 --> 00:58:19.133
and then have, you know,
different tabs

00:58:19.133 --> 00:58:22.734
or different pages or
whatever you want to call them

00:58:22.734 --> 00:58:25.167
as a single module load.

00:58:25.167 --> 00:58:26.634
Moffat: Yeah.
woman: Okay.

00:58:26.634 --> 00:58:28.667
And number two,
as you mentioned

00:58:28.667 --> 00:58:30.701
that your diagram rendering
is done on service side

00:58:30.701 --> 00:58:33.033
and client side.
Moffat: Yep.

00:58:33.033 --> 00:58:36.367
woman: And according to
heuristics, you decide

00:58:36.367 --> 00:58:38.100
whether to pick this up
and start processing.

00:58:38.100 --> 00:58:39.834
Why don't you do it both
in parallel

00:58:39.834 --> 00:58:41.934
and just go with
the faster one?

00:58:41.934 --> 00:58:44.667
Lundin: Well...that's--
that's a very good question.

00:58:44.667 --> 00:58:48.234
One of the reason is because
JavaScript is single-threaded,

00:58:48.234 --> 00:58:50.968
once you start a layout
on the client,

00:58:50.968 --> 00:58:52.334
you can't stop it.

00:58:52.334 --> 00:58:55.434
Well, you could if you put in
a lot of breaks

00:58:55.434 --> 00:58:57.467
and use incremental commands
and things like that,

00:58:57.467 --> 00:58:59.033
but that would be
very complicated.

00:58:59.033 --> 00:59:01.400
So for us,
the basic problem was

00:59:01.400 --> 00:59:03.000
once we started layout
on the client,

00:59:03.000 --> 00:59:04.200
you can't stop it.

00:59:04.200 --> 00:59:06.701
And so we could throw off
one on the server,

00:59:06.701 --> 00:59:11.067
and if it comes back sooner,
we can't do anything with it.

00:59:11.067 --> 00:59:12.834
Moffat: 'Cause we wouldn't
actually be told

00:59:12.834 --> 00:59:15.300
until we'd finished the client
that the server had finished.

00:59:15.300 --> 00:59:17.734
So we're sort of...
at that point out of luck.

00:59:17.734 --> 00:59:19.567
Lundin: There would be ways
to do it, like I said,

00:59:19.567 --> 00:59:22.467
if you're using incremental
command and...

00:59:22.467 --> 00:59:25.501
splitting your JavaScript
to do lots of little pieces.

00:59:25.501 --> 00:59:27.601
But that would actually make
the client even slower,

00:59:27.601 --> 00:59:29.133
doing that.

00:59:29.133 --> 00:59:30.601
So in the end,

00:59:30.601 --> 00:59:32.434
we decided to stick
with the simple approach.

00:59:32.434 --> 00:59:36.334
Moffat: I think we're
actually...done, unfortunately.

00:59:36.334 --> 00:59:38.701
We can talk later.

00:59:38.701 --> 00:59:40.501
Thank you very much, everybody.
Thanks.

00:59:40.501 --> 00:59:44.434
[applause]

