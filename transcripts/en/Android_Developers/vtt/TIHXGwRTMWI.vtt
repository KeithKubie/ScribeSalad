WEBVTT
Kind: captions
Language: en

00:00:00.195 --> 00:00:01.820
ALAN VIVERETTE: Good
morning, everyone,

00:00:01.820 --> 00:00:04.240
and welcome to "Themes
and Styles Demystified."

00:00:04.240 --> 00:00:05.410
I'm Alan Viverette.

00:00:05.410 --> 00:00:07.570
I'm a tech lead on
the UI Toolkit team

00:00:07.570 --> 00:00:10.216
and the engineer responsible
for the Material themes.

00:00:10.216 --> 00:00:11.590
CHRIS BANES: Hi,
I'm Chris Banes,

00:00:11.590 --> 00:00:13.694
an engineer on the
Developer Relations team.

00:00:13.694 --> 00:00:16.110
I also work on AppCompat, so
I deal with themes and styles

00:00:16.110 --> 00:00:18.047
quite a lot.

00:00:18.047 --> 00:00:20.130
So it's great to see so
many faces in front of me,

00:00:20.130 --> 00:00:21.755
especially sunburned
ones, because it's

00:00:21.755 --> 00:00:25.160
been hot here in Mountain
View over the past day or two.

00:00:25.160 --> 00:00:26.630
So it's 9:00 AM here.

00:00:26.630 --> 00:00:29.030
And I can see quite a few
tired faces in front of me.

00:00:29.030 --> 00:00:31.470
So I thought I'd
start with a quiz.

00:00:31.470 --> 00:00:35.500
So the first question I've got.

00:00:35.500 --> 00:00:39.310
In what Android version
did Theme.Holo appear?

00:00:39.310 --> 00:00:40.940
Right, so Android Eclair?

00:00:40.940 --> 00:00:42.701
Hands up.

00:00:42.701 --> 00:00:44.450
Honeycomb?

00:00:44.450 --> 00:00:46.540
Oh, you're too clever.

00:00:46.540 --> 00:00:47.630
That's an easy one.

00:00:51.330 --> 00:00:53.600
How about the
DarkActionBar variant?

00:00:53.600 --> 00:00:55.320
Honeycomb?

00:00:55.320 --> 00:00:57.940
Honeycomb 3.2?

00:00:57.940 --> 00:00:59.510
A few.

00:00:59.510 --> 00:01:00.625
ICS?

00:01:00.625 --> 00:01:02.850
Eh.

00:01:02.850 --> 00:01:05.450
Third one, how did
selectableItemBackground

00:01:05.450 --> 00:01:07.370
change KitKat?

00:01:07.370 --> 00:01:09.586
Did it change to ripple?

00:01:09.586 --> 00:01:10.390
Uh, one.

00:01:13.300 --> 00:01:14.692
It changed to monochrome.

00:01:14.692 --> 00:01:17.361
I've pressed the
wrong button there.

00:01:17.361 --> 00:01:17.860
Don't worry.

00:01:17.860 --> 00:01:19.360
I've got a fourth.

00:01:19.360 --> 00:01:23.310
In what version can you use
Android:foreground on a View?

00:01:23.310 --> 00:01:25.860
Android 1.0?

00:01:25.860 --> 00:01:27.300
Oh, I got a few.

00:01:27.300 --> 00:01:28.940
ICS?

00:01:28.940 --> 00:01:29.910
A few again.

00:01:29.910 --> 00:01:31.446
How about Marshmallow?

00:01:31.446 --> 00:01:33.577
Ah, see, this is
my trick question.

00:01:33.577 --> 00:01:35.660
So you can actually use
Foreground on Frame Layout

00:01:35.660 --> 00:01:37.230
from API 1.

00:01:37.230 --> 00:01:39.490
But we only actually added
it and moved it up to View

00:01:39.490 --> 00:01:40.115
on Marshmallow.

00:01:40.115 --> 00:01:41.570
So that's why it's trick.

00:01:41.570 --> 00:01:43.480
Anyway, hope you're awake now.

00:01:43.480 --> 00:01:45.726
So this talk is all
about themes and styles.

00:01:45.726 --> 00:01:47.600
And we've realized
recently that there aren't

00:01:47.600 --> 00:01:49.480
that many people who know it.

00:01:49.480 --> 00:01:51.320
It's quite a dense topic.

00:01:51.320 --> 00:01:53.930
And there's lots of little
intricacies into it all.

00:01:53.930 --> 00:01:55.430
So we thought we'd
write these talks

00:01:55.430 --> 00:01:57.929
and try and give everyone
like a level playing field.

00:01:57.929 --> 00:01:59.970
So before we actually go
into the guts of it all,

00:01:59.970 --> 00:02:02.210
I thought we'd take a
quick refresher course

00:02:02.210 --> 00:02:05.190
and see what they actually are.

00:02:05.190 --> 00:02:06.700
So technically,
themes and styles

00:02:06.700 --> 00:02:08.690
are exactly the same thing.

00:02:08.690 --> 00:02:10.940
Internally, they're both
declared using the style tag.

00:02:10.940 --> 00:02:13.430
So in your resources,
you create your styles.

00:02:13.430 --> 00:02:15.763
And you'll notice that when
you actually create a theme,

00:02:15.763 --> 00:02:17.550
you're still using
the style tag.

00:02:17.550 --> 00:02:19.900
The only difference between
them is how you use them

00:02:19.900 --> 00:02:22.580
in your application.

00:02:22.580 --> 00:02:25.220
And we'll talk more
about that later.

00:02:25.220 --> 00:02:27.790
So at the simplest,
styles and themes--

00:02:27.790 --> 00:02:30.780
because they're the same thing--
are just key-value stores.

00:02:30.780 --> 00:02:33.010
So here we've got a
very, very simple style.

00:02:33.010 --> 00:02:35.630
And you'll notice that the
actual key is the attribute,

00:02:35.630 --> 00:02:37.680
so android:background
in this instance.

00:02:37.680 --> 00:02:41.540
And then the value
is color blue.

00:02:41.540 --> 00:02:43.690
So we've just mentioned
the word attributes there.

00:02:43.690 --> 00:02:45.898
And they're the key to what
themes and styles are all

00:02:45.898 --> 00:02:47.132
about.

00:02:47.132 --> 00:02:49.340
Now let's take a quick look
at what they actually are

00:02:49.340 --> 00:02:51.350
and how they work.

00:02:51.350 --> 00:02:54.720
So as we mentioned,
attributes are just keys.

00:02:54.720 --> 00:02:56.440
They're declared in
the Android framework

00:02:56.440 --> 00:02:58.370
and also in your apps.

00:02:58.370 --> 00:02:59.870
The important thing
to know, though,

00:02:59.870 --> 00:03:02.200
is that, yes, they are
keys, but they also

00:03:02.200 --> 00:03:04.970
declare what type that
can be set against them.

00:03:04.970 --> 00:03:07.610
And that's important because it
affects how the data is stored.

00:03:07.610 --> 00:03:09.550
So when the attribute
is read internally,

00:03:09.550 --> 00:03:13.330
it can affect how the
actual values are read.

00:03:13.330 --> 00:03:16.270
And it also affects things
like type conversion.

00:03:16.270 --> 00:03:21.769
So the system can actually
convert between types for you.

00:03:21.769 --> 00:03:24.310
And because of that we can do
some xmllint-ing based on this.

00:03:24.310 --> 00:03:26.960
So if you're using an attribute
with the wrong type of value,

00:03:26.960 --> 00:03:28.100
we can put that into lint.

00:03:28.100 --> 00:03:29.475
And we can sort
of flag it to you

00:03:29.475 --> 00:03:33.070
and make sure you're not going
to shoot itself in the foot.

00:03:33.070 --> 00:03:35.410
So these are the
types of format types

00:03:35.410 --> 00:03:36.900
that you can put in attributes.

00:03:36.900 --> 00:03:39.180
The ones on the are left
are all resource types.

00:03:39.180 --> 00:03:41.550
So they directly map
to a resource type

00:03:41.550 --> 00:03:43.160
that you can set
in your resources,

00:03:43.160 --> 00:03:46.520
so things like fraction,
float, string, blah blah.

00:03:46.520 --> 00:03:49.190
The ones on the right are
special in that they are only

00:03:49.190 --> 00:03:50.740
used for attributes.

00:03:50.740 --> 00:03:53.150
Flag is exactly
what it sounds like.

00:03:53.150 --> 00:03:54.720
It's a [INAUDIBLE].

00:03:54.720 --> 00:03:57.610
So you can have multiple flags
[INAUDIBLE] against each other.

00:03:57.610 --> 00:04:00.324
And then the second is enum,
which is exactly what it is.

00:04:00.324 --> 00:04:01.490
It's an enumeration of ints.

00:04:01.490 --> 00:04:03.250
So you only get one value back.

00:04:03.250 --> 00:04:06.360
And then you've got the last
one, which is reference.

00:04:06.360 --> 00:04:08.840
And that's kind of a
catch-all for everything else.

00:04:08.840 --> 00:04:11.540
So drawable uses this because
we don't have a drawable type.

00:04:11.540 --> 00:04:13.690
But basically it just
points to another resource.

00:04:13.690 --> 00:04:15.100
It points to a resource ID.

00:04:19.667 --> 00:04:21.250
So how you actually
declare attributes

00:04:21.250 --> 00:04:24.660
is like this, using the attr
tag, again, in your resources.

00:04:24.660 --> 00:04:27.335
So everything's quite
inside each other.

00:04:27.335 --> 00:04:29.960
And here you can see that there
are two things you need to set.

00:04:29.960 --> 00:04:31.380
The first of the name.

00:04:31.380 --> 00:04:33.590
So this is the actual
declaration for Android

00:04:33.590 --> 00:04:35.679
background using the framework.

00:04:35.679 --> 00:04:36.970
So it has a name of background.

00:04:36.970 --> 00:04:40.420
And then it declares
its type and its format.

00:04:40.420 --> 00:04:43.930
It can accept two types,
reference and color.

00:04:43.930 --> 00:04:47.100
Reference because it expects
a drawable, and color because,

00:04:47.100 --> 00:04:49.270
as we said earlier, it
can do type conversion.

00:04:49.270 --> 00:04:51.436
So what will happen is it
can it accept a color int,

00:04:51.436 --> 00:04:52.187
like an int value.

00:04:52.187 --> 00:04:54.270
And then the system will
automatically change that

00:04:54.270 --> 00:04:55.690
into a color drawable for you.

00:04:55.690 --> 00:05:00.130
So that's the type conversion
we were talking about earlier.

00:05:00.130 --> 00:05:02.160
So all attributes
provided by the framework

00:05:02.160 --> 00:05:03.889
are in the Android
schema, which is

00:05:03.889 --> 00:05:05.430
why at the top of
all of your layouts

00:05:05.430 --> 00:05:08.430
you have to declare
this name space.

00:05:08.430 --> 00:05:11.850
Now the name for the namespace,
in this case Android, which is

00:05:11.850 --> 00:05:13.786
in bold, is just a convention.

00:05:13.786 --> 00:05:14.910
You don't have to use this.

00:05:14.910 --> 00:05:16.880
You can name it
whatever you want.

00:05:16.880 --> 00:05:18.590
But I'd advise you
to keep using this

00:05:18.590 --> 00:05:21.600
because it clearly separates
what are your attributes

00:05:21.600 --> 00:05:25.170
and what are
Android's attributes.

00:05:25.170 --> 00:05:27.890
You can also declare custom
attributes in your app.

00:05:27.890 --> 00:05:30.050
And indeed, you're
probably already using

00:05:30.050 --> 00:05:32.924
libraries, which declare
their own attributes.

00:05:32.924 --> 00:05:34.840
Now it's important to
know that all attributes

00:05:34.840 --> 00:05:37.500
that are declared in your
app-- so even libraries

00:05:37.500 --> 00:05:40.160
are in like a global namespace.

00:05:40.160 --> 00:05:41.880
Now what that
practically means is

00:05:41.880 --> 00:05:44.856
that if two
libraries, basically,

00:05:44.856 --> 00:05:46.980
if there are two declarations
of the same attribute

00:05:46.980 --> 00:05:49.030
name in your app,
your app won't build,

00:05:49.030 --> 00:05:50.420
because you'll get a conflict.

00:05:50.420 --> 00:05:52.003
So it's something
to be careful about.

00:05:54.570 --> 00:05:57.030
Now as I just mentioned,
any attributes

00:05:57.030 --> 00:05:59.900
which are created in your app
or in your app's namespace.

00:05:59.900 --> 00:06:02.040
So instead of declaring
the Android namespace,

00:06:02.040 --> 00:06:03.560
you declare your app's one.

00:06:03.560 --> 00:06:05.920
Now you do that via this syntax.

00:06:05.920 --> 00:06:08.170
And you insert
your package name.

00:06:08.170 --> 00:06:09.980
Now we know that's
slightly clumsy to use.

00:06:09.980 --> 00:06:12.480
So the tools have
a quick shortcut.

00:06:12.480 --> 00:06:15.201
So instead of actually putting
the slash in your package name,

00:06:15.201 --> 00:06:17.450
you just do res-auto, and
it will do all the hard work

00:06:17.450 --> 00:06:18.152
for you.

00:06:21.080 --> 00:06:22.990
So we've just talked
about what they are.

00:06:22.990 --> 00:06:24.490
Now let's talk about
the differences

00:06:24.490 --> 00:06:27.590
and how you actually use them.

00:06:27.590 --> 00:06:31.420
So themes, now themes are
tied your context, which

00:06:31.420 --> 00:06:33.854
is why it takes two methods.

00:06:33.854 --> 00:06:35.270
It has two methods
on the context,

00:06:35.270 --> 00:06:37.170
one called setTheme,
which takes a resource

00:06:37.170 --> 00:06:38.710
ID pointing to a style.

00:06:38.710 --> 00:06:40.360
Now there's one
thing to note here.

00:06:40.360 --> 00:06:43.090
It's a kind of a badly named
method in that it doesn't set.

00:06:43.090 --> 00:06:44.210
It applies.

00:06:44.210 --> 00:06:47.476
So you'll already have a
theme on your activity.

00:06:47.476 --> 00:06:49.850
And then when you call this
method, it will apply on top.

00:06:49.850 --> 00:06:52.310
It doesn't actually wipe
anything out underneath.

00:06:52.310 --> 00:06:53.768
And then you have
a getTheme, which

00:06:53.768 --> 00:06:56.120
will return an instance
of the current theme.

00:06:56.120 --> 00:06:58.780
Now you'll typically set themes
in your Android manifest.

00:06:58.780 --> 00:07:01.820
So you'll set it in the
Android tag or whatever it is.

00:07:01.820 --> 00:07:03.724
Now internally all
that does is, just

00:07:03.724 --> 00:07:05.140
before your
[INAUDIBLE] is called,

00:07:05.140 --> 00:07:06.710
it will call setTheme for you.

00:07:06.710 --> 00:07:09.335
So it's exactly the same API as
what the framework are calling.

00:07:11.480 --> 00:07:13.766
Now themes don't actually
really do anything.

00:07:13.766 --> 00:07:15.960
I like to think of them
as like big configuration

00:07:15.960 --> 00:07:17.321
stores for everything else.

00:07:17.321 --> 00:07:19.070
So let's take a look
at some of the things

00:07:19.070 --> 00:07:21.870
which are actually in
there and what kind

00:07:21.870 --> 00:07:24.270
of configuration things are on.

00:07:24.270 --> 00:07:27.250
So the first thing is
default widget styles.

00:07:27.250 --> 00:07:31.110
So when you create a widget
in your layout, say EditText,

00:07:31.110 --> 00:07:33.611
it will have a default
style applied to it.

00:07:33.611 --> 00:07:35.735
And the way it finds out
what that default style is

00:07:35.735 --> 00:07:37.710
is from your theme.

00:07:37.710 --> 00:07:40.120
Now each different widget
has a different attribute

00:07:40.120 --> 00:07:41.690
for its default style.

00:07:41.690 --> 00:07:43.790
EditText is called
at editTextStyle.

00:07:43.790 --> 00:07:45.460
Text view is called
textViewStyle.

00:07:45.460 --> 00:07:47.480
You get the idea.

00:07:47.480 --> 00:07:50.870
But yeah, so that's
the default style.

00:07:50.870 --> 00:07:53.230
We have some color values.

00:07:53.230 --> 00:07:56.160
The ones you'll probably
mostly use are for text colors.

00:07:56.160 --> 00:07:58.510
So there's textColorPrimary,
secondary, tertiary.

00:07:58.510 --> 00:08:00.343
Alan's going to talk
more about these later,

00:08:00.343 --> 00:08:02.330
but there are others.

00:08:02.330 --> 00:08:03.984
Text appearance
styles, so again Alan

00:08:03.984 --> 00:08:05.650
is going to talk about
text appearances.

00:08:05.650 --> 00:08:10.030
But they're basically mini
styles which affect only text.

00:08:10.030 --> 00:08:13.080
Now this is where I think the
bulk of stuff is in themes.

00:08:13.080 --> 00:08:15.140
And that is window
configuration values.

00:08:15.140 --> 00:08:17.725
So when your activity is
created, and your dialog,

00:08:17.725 --> 00:08:20.990
a window is created
for you internally.

00:08:20.990 --> 00:08:24.070
And that is where your
whole View hierarchy sits.

00:08:24.070 --> 00:08:26.530
And above that is a
lot of framework stuff.

00:08:26.530 --> 00:08:28.040
So if you're using
an action bar,

00:08:28.040 --> 00:08:31.490
it will inject a load of
views for the action bar.

00:08:31.490 --> 00:08:33.630
And this is-- so all
the configuration

00:08:33.630 --> 00:08:35.809
values in your theme
is how that affects it.

00:08:35.809 --> 00:08:37.850
So there's also stuff for
like window transitions

00:08:37.850 --> 00:08:40.880
and all that kind of things.

00:08:40.880 --> 00:08:42.047
Then we have some drawables.

00:08:42.047 --> 00:08:43.755
Wouldn't it nice if
we provided some sort

00:08:43.755 --> 00:08:45.570
of off-the-shelf handy
drawables to use.

00:08:45.570 --> 00:08:47.140
And we do.

00:08:47.140 --> 00:08:50.450
The most important, I think,
is selectableItemBackground.

00:08:50.450 --> 00:08:52.520
That will give you a
really nice drawable

00:08:52.520 --> 00:08:55.010
to use as a background for a
view, like applicable view.

00:08:55.010 --> 00:08:56.551
And it will like
give you highlights.

00:08:56.551 --> 00:08:59.000
So on Material and above, it
will give you like a ripple.

00:08:59.000 --> 00:09:02.900
Before that it's kind
of like a state list.

00:09:02.900 --> 00:09:05.490
And then lastly is a section
we call Themeception.

00:09:05.490 --> 00:09:07.780
Alan's going talk
more about this later.

00:09:07.780 --> 00:09:10.554
But it's-- basically there are
certain components when created

00:09:10.554 --> 00:09:11.970
are allowed to
override the theme.

00:09:11.970 --> 00:09:13.636
And they'll pick it
out from your master

00:09:13.636 --> 00:09:16.296
theme in your activity.

00:09:16.296 --> 00:09:17.920
Right, so that's
themes out of the way.

00:09:17.920 --> 00:09:19.160
Let's talk about styles.

00:09:19.160 --> 00:09:20.152
Now styles do a lot.

00:09:20.152 --> 00:09:22.110
They're the things that
do the bulk of the work

00:09:22.110 --> 00:09:23.987
when styling your views.

00:09:23.987 --> 00:09:26.070
They're really handy for
the sort of decomposition

00:09:26.070 --> 00:09:26.920
of common stylings.

00:09:26.920 --> 00:09:30.730
They can reuse stuff
across different views.

00:09:30.730 --> 00:09:33.570
So let's take a
look at an example.

00:09:33.570 --> 00:09:34.705
So here we have a view.

00:09:34.705 --> 00:09:37.127
And we want to reuse
this background tag.

00:09:37.127 --> 00:09:38.710
Now this is kind of
a trivial example.

00:09:38.710 --> 00:09:40.430
Because you're only
reusing one thing.

00:09:40.430 --> 00:09:42.010
And you wouldn't
usually do this.

00:09:42.010 --> 00:09:43.760
You'd probably
reuse three or four.

00:09:43.760 --> 00:09:47.390
But it's a bit of an unwieldy
example if we do more.

00:09:47.390 --> 00:09:51.030
So we're going to reuse
this background tag.

00:09:51.030 --> 00:09:52.160
So here's our style for it.

00:09:52.160 --> 00:09:53.230
So we'll create a style.

00:09:53.230 --> 00:09:55.690
And then we'll put an
item in there pointing

00:09:55.690 --> 00:09:57.730
to the attribute, so the name.

00:09:57.730 --> 00:10:00.260
And then we'll put
our value within it.

00:10:00.260 --> 00:10:03.720
Now each attribute you set
goes into the item tag.

00:10:03.720 --> 00:10:06.070
Then once we've done that,
we can go back to our layout

00:10:06.070 --> 00:10:11.820
and swap the Android background
and replace it with a style

00:10:11.820 --> 00:10:13.059
tag pointing to the style.

00:10:13.059 --> 00:10:14.850
Now if you've got more
items in that style,

00:10:14.850 --> 00:10:17.835
they will be applied too.

00:10:17.835 --> 00:10:20.610
A bit of a pro-tip for
you, Android Studio

00:10:20.610 --> 00:10:23.030
does that whole flow for
you in a really nice way.

00:10:23.030 --> 00:10:24.854
If you go to the
Design tab when you're

00:10:24.854 --> 00:10:26.770
looking at a layout and
right click on a View,

00:10:26.770 --> 00:10:29.145
go Refactor, Refactor Style.

00:10:29.145 --> 00:10:30.810
It gives you a nice
little UI where

00:10:30.810 --> 00:10:33.500
you can like pull out attributes
and put them into a style.

00:10:33.500 --> 00:10:34.935
It will do it all for you.

00:10:34.935 --> 00:10:36.560
But the other really
good thing it does

00:10:36.560 --> 00:10:38.510
is that it will try and find
other views in your layout

00:10:38.510 --> 00:10:40.263
and then automatically
reuse the style.

00:10:40.263 --> 00:10:43.047
It's really cool.

00:10:43.047 --> 00:10:44.880
So hopefully now you
now know the difference

00:10:44.880 --> 00:10:46.290
between themes and styles.

00:10:46.290 --> 00:10:47.930
So let's have a look
at the intricacies

00:10:47.930 --> 00:10:50.130
of actually creating them.

00:10:50.130 --> 00:10:52.150
So one of the things that
you can do with styles

00:10:52.150 --> 00:10:54.410
is that they
support inheritance.

00:10:54.410 --> 00:10:55.950
Now themes and
styles can inherit

00:10:55.950 --> 00:10:57.908
from each other, which
is handy for when you're

00:10:57.908 --> 00:10:59.100
creating derivative styles.

00:10:59.100 --> 00:11:01.190
And you'll see
examples in a minute.

00:11:01.190 --> 00:11:04.590
Important thing to know is
that they overlay each other.

00:11:04.590 --> 00:11:06.840
There are a couple of ways
of implementing inheritance

00:11:06.840 --> 00:11:07.970
in styles.

00:11:07.970 --> 00:11:11.330
The first is implicitly,
using the dot notation.

00:11:11.330 --> 00:11:15.700
So the parent here would
be Widget.Material.Button.

00:11:15.700 --> 00:11:20.300
So it's the style before
the proceeding dot.

00:11:20.300 --> 00:11:21.590
You can also do it explicitly.

00:11:21.590 --> 00:11:23.640
And that's done
through the parent tag.

00:11:23.640 --> 00:11:25.630
So here we've got a style
called MyButtonStyle.

00:11:25.630 --> 00:11:27.910
And it sets an explicit parent.

00:11:27.910 --> 00:11:31.590
And as you'd guess, the
parent is what you've set.

00:11:31.590 --> 00:11:35.850
Now there's a small gotcha in
that the explicit way always

00:11:35.850 --> 00:11:37.080
wins over the implicit.

00:11:37.080 --> 00:11:39.079
So we've got style here,
which is using both dot

00:11:39.079 --> 00:11:40.410
notation, as in the name.

00:11:40.410 --> 00:11:42.460
But also has a parent tag.

00:11:42.460 --> 00:11:46.610
And the explicit
version always wins.

00:11:46.610 --> 00:11:48.910
Now the really powerful
thing when using styles

00:11:48.910 --> 00:11:51.136
is that you can reference
values from your theme.

00:11:51.136 --> 00:11:54.605
And that's done in attribute
thing we talked about earlier.

00:11:54.605 --> 00:11:56.230
So here we go back
to our style that we

00:11:56.230 --> 00:11:59.186
created, which sets the
backgrounds in my_drawable.

00:11:59.186 --> 00:12:00.620
And instead of
using that we want

00:12:00.620 --> 00:12:03.110
to use the
selectibleItemBackground, which

00:12:03.110 --> 00:12:05.640
we talked about earlier,
which is that nice clickable

00:12:05.640 --> 00:12:07.061
highlight.

00:12:07.061 --> 00:12:08.810
So this is the theme
that's actually used.

00:12:08.810 --> 00:12:10.501
So let's break that
down a little bit.

00:12:10.501 --> 00:12:12.000
Because it looks a
little bit alien.

00:12:12.000 --> 00:12:13.790
So let's break it down.

00:12:13.790 --> 00:12:15.330
First thing is
the question mark.

00:12:15.330 --> 00:12:16.746
Now that denotes
that we are going

00:12:16.746 --> 00:12:19.770
to be doing a theme lookup.

00:12:19.770 --> 00:12:21.204
The second bit,
the Android colon

00:12:21.204 --> 00:12:23.120
is the namespace we're
going to be looking up.

00:12:23.120 --> 00:12:27.377
So the name of-- the namespace
that the attribute is in.

00:12:27.377 --> 00:12:28.960
So if you're using
a custom attribute,

00:12:28.960 --> 00:12:32.800
you can put whatever
namespace you're setting to.

00:12:32.800 --> 00:12:34.334
Then we have attr slash.

00:12:34.334 --> 00:12:35.750
Now that denotes
the type of thing

00:12:35.750 --> 00:12:37.000
we're going to be looking up.

00:12:37.000 --> 00:12:38.500
Now in true Android
fashion, we only

00:12:38.500 --> 00:12:41.030
have one type, which is attr.

00:12:41.030 --> 00:12:43.850
So you can actually omit this,
which you'll see in a minute.

00:12:43.850 --> 00:12:45.350
And then we have
the last bit, which

00:12:45.350 --> 00:12:47.058
is the actual name of
the attribute we're

00:12:47.058 --> 00:12:48.700
going to be looking up.

00:12:48.700 --> 00:12:50.450
Now as I said, the
type is optional.

00:12:50.450 --> 00:12:52.600
Which is probably where
you've seen this syntax.

00:12:52.600 --> 00:12:54.490
So the attr slash is omitted.

00:12:54.490 --> 00:12:57.290
It works the same.

00:12:57.290 --> 00:12:59.040
So now we're going to
hand it over to Alan

00:12:59.040 --> 00:13:01.890
to go through Theme.Material.

00:13:01.890 --> 00:13:03.140
ALAN VIVERETTE: Thanks, Chris.

00:13:03.140 --> 00:13:05.140
So Chris just gave
you the technical side

00:13:05.140 --> 00:13:06.280
of what is a theme?

00:13:06.280 --> 00:13:07.040
What is a style?

00:13:07.040 --> 00:13:08.240
And how do we create them?

00:13:08.240 --> 00:13:10.550
So we're going to go hands
on with some of the material

00:13:10.550 --> 00:13:14.100
styles to learn what we have
as a base of building blocks

00:13:14.100 --> 00:13:19.300
for our own styles and how we
can apply these in practice.

00:13:19.300 --> 00:13:20.940
So first we have themes.

00:13:20.940 --> 00:13:24.710
Themes in Android are
prefixed with Theme dot.

00:13:24.710 --> 00:13:26.870
In Material it's Theme.Material.

00:13:26.870 --> 00:13:28.620
So everyone should be
familiar with these.

00:13:28.620 --> 00:13:30.620
We've got the
Material Dark theme.

00:13:30.620 --> 00:13:33.670
We have themes that have window
attributes for dialogues.

00:13:33.670 --> 00:13:35.170
And of course we
have themes that

00:13:35.170 --> 00:13:37.320
do some special things
like give you a dark action

00:13:37.320 --> 00:13:40.390
bar on top of a light theme.

00:13:40.390 --> 00:13:44.140
And if you look at the actual
framework definitions of these,

00:13:44.140 --> 00:13:47.910
it's just a huge bag of
attributes for colors, window

00:13:47.910 --> 00:13:51.220
attributes, things like that.

00:13:51.220 --> 00:13:52.520
We also have overlay themes.

00:13:52.520 --> 00:13:56.050
So these are themes that
define a subset of values

00:13:56.050 --> 00:13:57.630
that, as Chris
mentioned, get applied

00:13:57.630 --> 00:14:00.520
on top of your existing theme.

00:14:00.520 --> 00:14:04.570
So for example, Material.Light
contains only the colors

00:14:04.570 --> 00:14:06.280
relevant for a light theme.

00:14:06.280 --> 00:14:09.490
It's not going to change any
of your window attributes.

00:14:09.490 --> 00:14:12.350
For people who are developing
for older platforms,

00:14:12.350 --> 00:14:15.630
you may have noticed
on API 21 and 22,

00:14:15.630 --> 00:14:17.900
that if you set a color
accent in your theme

00:14:17.900 --> 00:14:21.460
and then you open a
dialogue, on API 21 and 22

00:14:21.460 --> 00:14:23.030
you're still going to get teal.

00:14:23.030 --> 00:14:26.000
Unless you explicitly go
and create a dialog theme

00:14:26.000 --> 00:14:27.960
that redefines
your accent color.

00:14:27.960 --> 00:14:31.640
In API 23, we added a
dialog overlay theme.

00:14:31.640 --> 00:14:35.370
This only redefines the window
attribute specific to dialogs.

00:14:35.370 --> 00:14:38.080
It gets applied on top
of your activity theme.

00:14:38.080 --> 00:14:40.560
So the host activity
that creates the dialog,

00:14:40.560 --> 00:14:42.940
we apply window
attributes on top of that.

00:14:42.940 --> 00:14:45.090
So your color accent,
anything else you've set

00:14:45.090 --> 00:14:49.800
gets propagated to dialogs
in API 23 and above.

00:14:49.800 --> 00:14:51.960
Overlay themes look like this.

00:14:51.960 --> 00:14:54.050
Again, it's just a
subset of the things that

00:14:54.050 --> 00:14:57.020
would have been defined
in the overall material

00:14:57.020 --> 00:14:59.240
light, or dark, or
whatever themes.

00:14:59.240 --> 00:15:01.560
You can create these
yourselves very easily.

00:15:01.560 --> 00:15:04.867
And then just use
Theme.applyStyle or setTheme

00:15:04.867 --> 00:15:05.575
in your activity.

00:15:08.200 --> 00:15:12.910
Material theme spec also defines
a number of text appearances.

00:15:12.910 --> 00:15:15.580
So for larger text you change
the opacity a little bit.

00:15:15.580 --> 00:15:20.170
For buttons you
may set all caps.

00:15:20.170 --> 00:15:22.290
These are prefixed
with TextAppearance.

00:15:22.290 --> 00:15:23.831
In material,
TextAppearance.Material.

00:15:26.820 --> 00:15:29.160
At the XML level,
these are just sets

00:15:29.160 --> 00:15:31.180
of attributes specific to text.

00:15:31.180 --> 00:15:33.670
And these are either
defined in your theme

00:15:33.670 --> 00:15:36.650
with TextAppearance
small attribute.

00:15:36.650 --> 00:15:39.470
Or you can apply them
directly to a text view using

00:15:39.470 --> 00:15:42.570
the android:textAppearance
attribute.

00:15:42.570 --> 00:15:45.580
So this is just going to
apply a set of text attributes

00:15:45.580 --> 00:15:48.990
to style your text.

00:15:48.990 --> 00:15:52.500
We also have a number of
default widget styles.

00:15:52.500 --> 00:15:54.844
So these are prefixed
with Widget.Material.

00:15:54.844 --> 00:15:56.260
They are going to
implement things

00:15:56.260 --> 00:15:58.530
that you'll recognize
from the Material spec.

00:15:58.530 --> 00:16:01.870
So for example, in
API 24, Android N,

00:16:01.870 --> 00:16:03.959
we've added a SeekBar.Discrete.

00:16:03.959 --> 00:16:04.625
Widget.Material.

00:16:04.625 --> 00:16:08.700
SeekBar.Discrete, which is going
to give you these little tick

00:16:08.700 --> 00:16:12.300
marks along each progress
point in your seek bar.

00:16:12.300 --> 00:16:15.620
You can check out API
demos for a longer example

00:16:15.620 --> 00:16:18.130
of some of the
different variations

00:16:18.130 --> 00:16:20.890
that we have on widget styles.

00:16:20.890 --> 00:16:23.730
But these you can apply to
your widgets with the style

00:16:23.730 --> 00:16:27.590
attribute So
style=SeekBar.discrete will

00:16:27.590 --> 00:16:30.750
give you these dots.

00:16:30.750 --> 00:16:32.810
And these are just
sets of attributes

00:16:32.810 --> 00:16:35.290
that are going to provide
defaults for your views.

00:16:35.290 --> 00:16:37.490
So for example, the
SeekBar Discreet

00:16:37.490 --> 00:16:40.770
has implicit inheritance
from the Material SeekBar.

00:16:40.770 --> 00:16:44.490
And we just redefine tick mark
so that we get those drawables

00:16:44.490 --> 00:16:47.030
at each progress point.

00:16:47.030 --> 00:16:49.110
So while we're
here, anybody who's

00:16:49.110 --> 00:16:50.700
really dug into
the material theme

00:16:50.700 --> 00:16:52.400
may have noticed
something unusual

00:16:52.400 --> 00:16:54.250
about our widget styles.

00:16:54.250 --> 00:16:57.920
And this is that the light
themes and dark themes

00:16:57.920 --> 00:16:59.790
are identical.

00:16:59.790 --> 00:17:02.060
So our light themes
typically just inherit

00:17:02.060 --> 00:17:05.900
directly from the default themes
and don't redefine anything.

00:17:05.900 --> 00:17:08.319
But under different
parent themes--

00:17:08.319 --> 00:17:10.900
so if your activity
is light or dark--

00:17:10.900 --> 00:17:14.210
you're still going to get
correctly colored widgets.

00:17:14.210 --> 00:17:16.569
How do we do that?

00:17:16.569 --> 00:17:18.730
Well, as Chris
mentioned, we have

00:17:18.730 --> 00:17:20.859
colors defined by the themes.

00:17:20.859 --> 00:17:24.250
And we're going to use
these in the widgets.

00:17:24.250 --> 00:17:26.109
So this allows really
high level styling

00:17:26.109 --> 00:17:27.440
of what things look like.

00:17:27.440 --> 00:17:29.550
Everybody should be
familiar with color accent

00:17:29.550 --> 00:17:30.640
from Material.

00:17:30.640 --> 00:17:32.730
This gives you a
little pop of color

00:17:32.730 --> 00:17:34.990
that shows up in various places.

00:17:34.990 --> 00:17:36.850
For the background
of Button.Color,

00:17:36.850 --> 00:17:39.721
the foreground of borderless
colored buttons, radio buttons,

00:17:39.721 --> 00:17:40.220
etc.

00:17:43.360 --> 00:17:46.960
And one example of
how to implement this.

00:17:46.960 --> 00:17:49.680
So for the colored button
that we just showed,

00:17:49.680 --> 00:17:53.120
we have a background that
points to a drawable.

00:17:53.120 --> 00:17:54.950
In that drawable,
which is just a ripple

00:17:54.950 --> 00:17:56.990
wrapping a rounded rect
shape-- we actually

00:17:56.990 --> 00:18:00.340
don't use P and Gs
anymore-- we have a tint.

00:18:00.340 --> 00:18:03.630
And that tint points
to a color state list.

00:18:03.630 --> 00:18:06.670
And that color state
list has and enabled

00:18:06.670 --> 00:18:07.870
and a disabled state.

00:18:07.870 --> 00:18:11.370
The enabled state
points to color accent.

00:18:11.370 --> 00:18:13.230
So when you see
that colored button,

00:18:13.230 --> 00:18:15.720
the default color is
going to be color accent

00:18:15.720 --> 00:18:20.790
tint on a white shape drawable
wrapped with a ripple.

00:18:20.790 --> 00:18:23.750
So let's talk a little bit
more about theme colors.

00:18:23.750 --> 00:18:26.430
We also have foreground
and background colors.

00:18:26.430 --> 00:18:29.800
So these are going to be white
and black or black and white,

00:18:29.800 --> 00:18:32.590
respectively, for the
light and dark themes.

00:18:32.590 --> 00:18:35.210
And what good does
this actually do us?

00:18:35.210 --> 00:18:38.310
You may not be using
flat black or flat white

00:18:38.310 --> 00:18:40.920
in your application a lot.

00:18:40.920 --> 00:18:43.650
Well, let's take the
switch for an example.

00:18:43.650 --> 00:18:46.330
So the switch has a couple
of different colors.

00:18:46.330 --> 00:18:48.820
And we could have
defined theme attributes

00:18:48.820 --> 00:18:52.260
for switch foreground,
switch background.

00:18:52.260 --> 00:18:56.460
And they're all basically just
variations on white or black.

00:18:56.460 --> 00:18:59.295
So let's dig into
the XML for this.

00:18:59.295 --> 00:19:03.150
The switch track is defined
as a rounded rect shape.

00:19:03.150 --> 00:19:05.540
Again, we don't really use PNGs.

00:19:05.540 --> 00:19:09.510
And it points to a color
state list for its tint.

00:19:09.510 --> 00:19:11.600
In the enabled
state, this is going

00:19:11.600 --> 00:19:15.110
to be a dropped alpha--
sorry, in the disabled state,

00:19:15.110 --> 00:19:17.260
this is going to inherit
the disabled alpha

00:19:17.260 --> 00:19:20.420
from the theme, which varies
based on light or dark theme.

00:19:20.420 --> 00:19:23.280
And it's going to use
the foreground color.

00:19:23.280 --> 00:19:28.450
So in the dark theme, you have a
dropped alpha version of white.

00:19:28.450 --> 00:19:31.130
This is applied on top
of a rounded rec that

00:19:31.130 --> 00:19:32.960
already has a dropped opacity.

00:19:32.960 --> 00:19:35.120
So we're going to end
up with everything

00:19:35.120 --> 00:19:37.710
being a slight variation
on the foreground color.

00:19:37.710 --> 00:19:41.240
And you can very easily use
this in your own widgets

00:19:41.240 --> 00:19:45.460
to get something that's going to
be consistent with your theme.

00:19:45.460 --> 00:19:48.690
We also have text colors,
as Chris mentioned.

00:19:48.690 --> 00:19:50.510
So we have a primary
text color, which

00:19:50.510 --> 00:19:53.230
is used to provide very
high contrast for things

00:19:53.230 --> 00:19:55.730
that the user needs to be
looking at immediately.

00:19:55.730 --> 00:19:57.450
We have secondary
text color, which

00:19:57.450 --> 00:19:58.900
is just a dropped opacity.

00:19:58.900 --> 00:20:01.680
And these are going to
follow the material specs.

00:20:01.680 --> 00:20:05.960
So I believe 84%
and 56% opacity.

00:20:05.960 --> 00:20:08.630
And they're going to
follow the theme colors.

00:20:08.630 --> 00:20:10.430
We also have inverse
versions of these,

00:20:10.430 --> 00:20:13.457
which we don't use so much
on the platform anymore.

00:20:13.457 --> 00:20:15.290
But if you're going to
be displaying content

00:20:15.290 --> 00:20:19.250
against, say, your accent
color, text primary inverse

00:20:19.250 --> 00:20:23.410
or secondary inverse is
a great way to do that.

00:20:23.410 --> 00:20:26.644
We also have color accent
primary and primary dark,

00:20:26.644 --> 00:20:28.810
which we added in Material,
and are going to provide

00:20:28.810 --> 00:20:30.640
your branding colors.

00:20:30.640 --> 00:20:33.480
So if you're pulling in color
accent, you get that color pop,

00:20:33.480 --> 00:20:35.820
you'll probably
want to use a white

00:20:35.820 --> 00:20:39.010
or use colored primary
inverse on top of that.

00:20:39.010 --> 00:20:41.420
So in a light theme,
you'll have a dark accent.

00:20:41.420 --> 00:20:43.790
In a dark theme you'll
have a light accent.

00:20:43.790 --> 00:20:47.140
And you can pull these into your
drawables and your color state

00:20:47.140 --> 00:20:48.140
lists.

00:20:48.140 --> 00:20:50.660
We also have color control
normal and activated.

00:20:50.660 --> 00:20:53.030
Control normal is great.

00:20:53.030 --> 00:20:57.490
And I really recommend everybody
use this if you have icons.

00:20:57.490 --> 00:20:59.270
So for example,
check boxes are going

00:20:59.270 --> 00:21:01.770
to use color control
normal by default.

00:21:01.770 --> 00:21:04.190
If you're pulling an
icon into your action bar

00:21:04.190 --> 00:21:06.210
and you tint it with
color control normal,

00:21:06.210 --> 00:21:08.430
it's going to be the
exact right opacity.

00:21:08.430 --> 00:21:11.060
And the number of times
that I've seen applications

00:21:11.060 --> 00:21:15.720
where the toolbar icons are
different by like 5% alpha,

00:21:15.720 --> 00:21:17.400
it kills me every time.

00:21:17.400 --> 00:21:22.150
So please use color control
normal for your icons.

00:21:22.150 --> 00:21:25.780
So looking at an
example from API demos,

00:21:25.780 --> 00:21:29.170
you can probably guess how a
lot of these widgets are set up.

00:21:29.170 --> 00:21:33.190
So we have compound buttons,
which is text color primary.

00:21:33.190 --> 00:21:34.970
We have that switch
text right below it,

00:21:34.970 --> 00:21:36.960
which is text color secondary.

00:21:36.960 --> 00:21:41.145
We have the accent color in the
activated state for our check

00:21:41.145 --> 00:21:44.390
boxes and radio buttons.

00:21:44.390 --> 00:21:48.240
And we have the color background
as our overall background,

00:21:48.240 --> 00:21:52.000
color background floating
as our card background.

00:21:52.000 --> 00:21:55.800
So you can look at a
screen shot of something,

00:21:55.800 --> 00:21:57.830
or look at an application,
and probably guess

00:21:57.830 --> 00:22:02.090
where a lot of the
colors are coming from.

00:22:02.090 --> 00:22:03.940
Right, so now we
have an overview

00:22:03.940 --> 00:22:05.710
of what's available
to us and how

00:22:05.710 --> 00:22:08.510
these are used to build the
framework themes and styles

00:22:08.510 --> 00:22:12.110
and how we can apply
these to our applications.

00:22:12.110 --> 00:22:15.140
And these are very
powerful tools in Android.

00:22:15.140 --> 00:22:17.350
And theme attributes
are especially powerful

00:22:17.350 --> 00:22:20.450
starting in API 21.

00:22:20.450 --> 00:22:23.810
So starting in API 21, you can
use color state lists and theme

00:22:23.810 --> 00:22:26.480
attributes to tint
your drawables.

00:22:26.480 --> 00:22:28.890
So you can specify
color control highlight

00:22:28.890 --> 00:22:31.260
for your ripple, which is
what we have is the default.

00:22:31.260 --> 00:22:34.500
And you can specify
ColorStateList as a tint

00:22:34.500 --> 00:22:37.930
or as a color for
XML defined shapes.

00:22:37.930 --> 00:22:40.990
So if you'd like to step away
from using PNGs all the time,

00:22:40.990 --> 00:22:42.760
maybe you have a bunch
of different PNGs

00:22:42.760 --> 00:22:46.040
for different colors of
states, you can just directly

00:22:46.040 --> 00:22:47.300
put a ColorStateList in.

00:22:47.300 --> 00:22:49.716
And when you press a button,
you'll get a different color.

00:22:51.920 --> 00:22:54.050
ColorStateLists support
theme attribute starting

00:22:54.050 --> 00:22:56.590
in the next API version, 22.

00:22:56.590 --> 00:23:00.100
This means that you can start
pulling in the foreground

00:23:00.100 --> 00:23:02.940
color, the accent
color, setting the alpha

00:23:02.940 --> 00:23:05.620
to match the theme in your
ColorStateLists, which

00:23:05.620 --> 00:23:07.550
is going to again,
help you step away

00:23:07.550 --> 00:23:11.097
from having drawable
selectors or individual PNGs

00:23:11.097 --> 00:23:12.055
for all of your assets.

00:23:14.630 --> 00:23:17.280
AppCompat also supports
ColorStateLists.

00:23:17.280 --> 00:23:21.110
Starting in version 24, you
can use AppCompatResources,

00:23:21.110 --> 00:23:23.230
which is going to provide
an alternate inflation

00:23:23.230 --> 00:23:25.690
path that can read
theme attributes

00:23:25.690 --> 00:23:28.010
from your ColorStateList XML.

00:23:28.010 --> 00:23:29.950
It does this
automatically internally.

00:23:29.950 --> 00:23:36.070
And you can do this at run
time for specific XML files.

00:23:36.070 --> 00:23:37.660
We also support view tinting.

00:23:37.660 --> 00:23:41.170
So what this means is, for
views that own drawable assets,

00:23:41.170 --> 00:23:45.280
things like the thumb in a
switch, the track in a progress

00:23:45.280 --> 00:23:49.430
bar, you can tint these either
from layout XML or at run-time

00:23:49.430 --> 00:23:51.410
using some accessor methods.

00:23:51.410 --> 00:23:54.720
So, for example, Switch
has a thumb and a track.

00:23:54.720 --> 00:23:57.200
And because it's a view,
it also has a background.

00:23:57.200 --> 00:23:59.440
All of these have
separate XML attributes

00:23:59.440 --> 00:24:01.000
that you can use to set a tint.

00:24:01.000 --> 00:24:02.530
These can take theme attributes.

00:24:02.530 --> 00:24:04.070
These can take ColorStateLists.

00:24:04.070 --> 00:24:06.510
In API 22, they can
take ColorStateLists

00:24:06.510 --> 00:24:08.270
of theme attributes.

00:24:08.270 --> 00:24:11.870
This is a really powerful way
to tint just a one off somewhere

00:24:11.870 --> 00:24:12.720
within your layout.

00:24:12.720 --> 00:24:14.550
So you need this
switch to be red,

00:24:14.550 --> 00:24:15.977
you can make it
red really easily.

00:24:15.977 --> 00:24:17.560
You need it red with
a disabled state,

00:24:17.560 --> 00:24:18.768
you can set a ColorStateList.

00:24:21.465 --> 00:24:23.590
As I mentioned, we have a
bunch of text appearances

00:24:23.590 --> 00:24:24.800
in the Material style.

00:24:24.800 --> 00:24:27.850
These are just bags
of text attributes.

00:24:27.850 --> 00:24:30.000
So you can apply these
to your text views using

00:24:30.000 --> 00:24:31.610
Android:textAppearance.

00:24:31.610 --> 00:24:33.810
And you can reapply
these at run time,

00:24:33.810 --> 00:24:37.440
which is actually something kind
of unusual for Android styles.

00:24:37.440 --> 00:24:41.580
So for most views, styles get
applied once at inflation time.

00:24:41.580 --> 00:24:43.600
For text views, you
can restyle them

00:24:43.600 --> 00:24:46.140
at run time, whenever
you need to, using

00:24:46.140 --> 00:24:50.140
the setTextAppearance, which
takes a style, which should be

00:24:50.140 --> 00:24:52.280
a textAppearance
or something that

00:24:52.280 --> 00:24:53.935
inherits from a textAppearance.

00:24:53.935 --> 00:24:56.005
It just defines a set
of text attributes.

00:24:58.620 --> 00:25:00.510
All right, so we've
learned some cool things

00:25:00.510 --> 00:25:04.190
about what's available to us
for creating styles and creating

00:25:04.190 --> 00:25:05.600
theme drawables.

00:25:05.600 --> 00:25:08.365
How can we apply this to
do something kind of cool?

00:25:08.365 --> 00:25:09.990
Well, we introduced
the day night theme

00:25:09.990 --> 00:25:11.360
in the support library.

00:25:11.360 --> 00:25:13.776
And this is something that
we've supported in the platform

00:25:13.776 --> 00:25:15.850
for actually quite a long time.

00:25:15.850 --> 00:25:20.280
So day night is implemented
as a resource qualifier.

00:25:20.280 --> 00:25:22.480
This has existed since API 8.

00:25:22.480 --> 00:25:25.490
Starting in API 23,
this is something

00:25:25.490 --> 00:25:29.627
that any application can
toggle through UI Mode Manager.

00:25:29.627 --> 00:25:31.210
So if you write an
application and you

00:25:31.210 --> 00:25:33.900
want to toggle the global
state of day night mode,

00:25:33.900 --> 00:25:35.550
you just go into
UI Mode Manager,

00:25:35.550 --> 00:25:37.630
and you can set a Night mode.

00:25:37.630 --> 00:25:40.810
When that changes, it's going
to be treated as a configuration

00:25:40.810 --> 00:25:43.300
change like you would
have for changing device

00:25:43.300 --> 00:25:48.390
orientation, which adds the
landscape resource qualifier.

00:25:48.390 --> 00:25:49.960
So this is going
to really simplify

00:25:49.960 --> 00:25:53.600
swapping light and dark
resources if your user either

00:25:53.600 --> 00:25:57.410
prefers dark or if you want to
set it up for automatic, where

00:25:57.410 --> 00:25:59.680
at night time maybe your
user will see a dark theme,

00:25:59.680 --> 00:26:02.750
and daytime they'll
see a light theme.

00:26:02.750 --> 00:26:06.450
So the actual implementation
of this relies on inheritance.

00:26:06.450 --> 00:26:08.900
So we specify a DayNightTheme.

00:26:08.900 --> 00:26:12.130
And we have the same name
in both our values and Night

00:26:12.130 --> 00:26:14.330
qualified values directories.

00:26:14.330 --> 00:26:16.340
And the only difference
is the parent

00:26:16.340 --> 00:26:17.930
that we're inheriting from.

00:26:17.930 --> 00:26:22.300
So under not Night or
the default qualifier,

00:26:22.300 --> 00:26:24.750
we're going to inherit
from Theme.Material.Light.

00:26:24.750 --> 00:26:26.510
And under the Night
qualifier, we're

00:26:26.510 --> 00:26:29.210
going to inherit from
the dark Material theme.

00:26:29.210 --> 00:26:33.430
Now the magic here is that when
we have this resource qualifier

00:26:33.430 --> 00:26:35.280
change, the
application's going to go

00:26:35.280 --> 00:26:36.620
through a lifecycle event.

00:26:36.620 --> 00:26:38.780
We'll get in on
configuration change.

00:26:38.780 --> 00:26:40.430
And we're going to
reload our theme

00:26:40.430 --> 00:26:43.110
using this new parent,
Which means everything

00:26:43.110 --> 00:26:47.720
that we inflate is going to
have different theme colors.

00:26:47.720 --> 00:26:50.820
Now you can also
define explicit colors.

00:26:50.820 --> 00:26:52.570
So if you want to have
a hard-coded color

00:26:52.570 --> 00:26:55.360
and define that differently
under Night or Not Night,

00:26:55.360 --> 00:26:56.270
you can do that.

00:26:56.270 --> 00:26:58.610
But it's easier to
rely on theme colors.

00:26:58.610 --> 00:27:01.380
So the end result of this
is that because everything

00:27:01.380 --> 00:27:03.120
gets inflated
against your theme,

00:27:03.120 --> 00:27:04.740
and we're using a
different parent,

00:27:04.740 --> 00:27:08.400
you're going to get either
dark or light resources.

00:27:08.400 --> 00:27:09.880
And in custom
widgets that you've

00:27:09.880 --> 00:27:11.747
made, where you're
using theme attributes,

00:27:11.747 --> 00:27:13.330
you're just going
to automatically get

00:27:13.330 --> 00:27:14.144
the right colors.

00:27:14.144 --> 00:27:15.685
So you don't have
to do a lot of work

00:27:15.685 --> 00:27:20.470
to switch between implementing
a light and a dark theme.

00:27:20.470 --> 00:27:22.970
As Chris demonstrated in our
What's New in Support Library

00:27:22.970 --> 00:27:27.140
talk yesterday, this has
been back ported to API 14

00:27:27.140 --> 00:27:28.632
through AppCompat.

00:27:28.632 --> 00:27:31.090
So if you want to implement a
light or dark, light and dark

00:27:31.090 --> 00:27:33.970
theme support in your
application, super easy.

00:27:33.970 --> 00:27:35.880
Most of the work is
already done for you.

00:27:35.880 --> 00:27:38.010
You just need to add
a little switch that

00:27:38.010 --> 00:27:39.490
will toggle Night mode.

00:27:42.060 --> 00:27:44.440
Right, so using
themes and attributes

00:27:44.440 --> 00:27:47.560
can help simplify switching
the visual presentation

00:27:47.560 --> 00:27:48.692
of your application.

00:27:48.692 --> 00:27:50.150
But what if you
want to change just

00:27:50.150 --> 00:27:54.470
a small portion of presentation
in your application?

00:27:54.470 --> 00:27:57.910
So we know that Theme.Material
can make your application look

00:27:57.910 --> 00:27:59.170
dark.

00:27:59.170 --> 00:28:01.000
We know that
Theme.Material.Light can make

00:28:01.000 --> 00:28:02.950
your application look light.

00:28:02.950 --> 00:28:05.480
But what if you want to have
something like a dark action

00:28:05.480 --> 00:28:07.822
bar, but the rest of your
application be light?

00:28:10.480 --> 00:28:13.370
Well, there's one way
you could do this.

00:28:13.370 --> 00:28:16.530
You could use the Light
Activity Light theme

00:28:16.530 --> 00:28:19.990
and then just specify
everything in your action bar

00:28:19.990 --> 00:28:21.760
manually to be dark.

00:28:21.760 --> 00:28:23.120
That's a little complicated.

00:28:23.120 --> 00:28:25.450
So maybe instead we'll
have a dark theme.

00:28:25.450 --> 00:28:28.330
And we'll just manually
specify everything

00:28:28.330 --> 00:28:29.940
in our activity,
all of our content,

00:28:29.940 --> 00:28:32.460
to be a different color.

00:28:32.460 --> 00:28:34.620
That ends up being
really, really tricky.

00:28:34.620 --> 00:28:37.720
So please don't do that.

00:28:37.720 --> 00:28:41.470
Don't hard code text colors.

00:28:41.470 --> 00:28:44.970
So there's an easier way, and
that is through overlay themes

00:28:44.970 --> 00:28:47.550
and specifying
themes on portions

00:28:47.550 --> 00:28:49.240
of your view hierarchy.

00:28:49.240 --> 00:28:52.230
And this is what we do with
the DarkActionBar theme.

00:28:52.230 --> 00:28:53.760
So we actually
redefine the theme

00:28:53.760 --> 00:28:59.770
that's used for the toolbar
section of your application.

00:28:59.770 --> 00:29:01.890
So everybody recalls
we have overlay themes.

00:29:01.890 --> 00:29:04.830
We have light theme that
pulls in light colors.

00:29:04.830 --> 00:29:08.230
We have dark theme that
pulls in dark colors.

00:29:08.230 --> 00:29:12.320
And these are implemented using
the android:theme attribute

00:29:12.320 --> 00:29:13.140
from XML.

00:29:13.140 --> 00:29:15.450
So this gets picked up
by the layout inflator.

00:29:15.450 --> 00:29:19.190
And it's going to replace,
or overlay, the theme

00:29:19.190 --> 00:29:24.040
used to inflate a subsection
of your view hierarchy.

00:29:24.040 --> 00:29:26.960
And the actual
implementation here

00:29:26.960 --> 00:29:30.180
is pulling the theme
attribute from your XML

00:29:30.180 --> 00:29:32.570
and then applying that as a
context theme wrapper, which

00:29:32.570 --> 00:29:33.880
is exactly what it sounds like.

00:29:33.880 --> 00:29:35.850
We take your inflation
context, and we're

00:29:35.850 --> 00:29:38.190
going to apply a
theme on top of that.

00:29:38.190 --> 00:29:40.490
We're then going to inflate
all of the child content

00:29:40.490 --> 00:29:42.920
against this new
wrapped context.

00:29:42.920 --> 00:29:46.650
So what you will
get is effectively

00:29:46.650 --> 00:29:49.710
the dark theme in
the section of layout

00:29:49.710 --> 00:29:55.510
that has Android theme equals
dark and light everywhere else.

00:29:55.510 --> 00:29:57.000
The actual
implementation of this

00:29:57.000 --> 00:29:59.270
relies on the default
layout that we

00:29:59.270 --> 00:30:02.040
provide for an activity
that has an action bar.

00:30:02.040 --> 00:30:05.780
So if you dig into some of
the XML files in the Android

00:30:05.780 --> 00:30:07.620
framework, Screen
Action Bar is what

00:30:07.620 --> 00:30:10.930
we inflate if you've requested
an action bar in your activity.

00:30:10.930 --> 00:30:13.360
And we're going to set the
Android theme attribute

00:30:13.360 --> 00:30:16.970
to inherit from the action
bar theme attribute defined

00:30:16.970 --> 00:30:20.630
in your theme, which has
attribute and theme a lot

00:30:20.630 --> 00:30:24.230
of times, which is why we
call this Themeception.

00:30:24.230 --> 00:30:27.480
So we're going to pull
in the dark theme on top

00:30:27.480 --> 00:30:32.000
of the light activity theme.

00:30:32.000 --> 00:30:35.690
We've defined Action Bar theme
in the DarkActionBar theme

00:30:35.690 --> 00:30:38.600
as Material.Dark.ActionBar.

00:30:38.600 --> 00:30:42.400
This is the dark overlay, which
pulls in the dark theme colors.

00:30:42.400 --> 00:30:45.300
It switches the text foreground
and background colors.

00:30:45.300 --> 00:30:48.470
And Action Bar sets up a
couple of special things

00:30:48.470 --> 00:30:54.012
for displaying the, let's see,
accent color in your toolbar.

00:30:54.012 --> 00:30:56.470
But the important part is that
we're pulling in dark colors

00:30:56.470 --> 00:30:59.830
on top of your base light theme.

00:30:59.830 --> 00:31:01.380
We also redefine
the pop up theme,

00:31:01.380 --> 00:31:04.500
so that you get a light pop
up on top of a dark action

00:31:04.500 --> 00:31:07.600
bar on top of a light activity.

00:31:07.600 --> 00:31:09.540
So we have three themes
at work here, all

00:31:09.540 --> 00:31:10.790
overlayed atop one another.

00:31:13.450 --> 00:31:17.690
We also support Android.Theme
through the AppCompat library.

00:31:17.690 --> 00:31:20.170
So this is going to work
all the way back to API 7

00:31:20.170 --> 00:31:22.850
for XML that gets inflated
throughout AppCompat.

00:31:22.850 --> 00:31:24.590
An inheritance of
the parent theme

00:31:24.590 --> 00:31:27.100
is going to work on
API 11 and above.

00:31:27.100 --> 00:31:30.490
And what this means is that
if you put Android:theme

00:31:30.490 --> 00:31:34.770
in your XML, on API 7 we will
apply it to that view only.

00:31:34.770 --> 00:31:36.960
On API 11 and above
we will apply it

00:31:36.960 --> 00:31:39.320
to all of the views
that are inflated

00:31:39.320 --> 00:31:41.101
as a child of that view.

00:31:43.810 --> 00:31:46.530
Right, now Chris is going to
cover some common mistakes

00:31:46.530 --> 00:31:50.820
that developers make when
using themes and styles.

00:31:50.820 --> 00:31:52.260
CHRIS BANES: Thanks, Alan.

00:31:52.260 --> 00:31:53.880
So as Alan said,
we're now going to go

00:31:53.880 --> 00:31:56.315
through some of the
things we see quite a lot,

00:31:56.315 --> 00:31:58.350
both in Google Apps
and also externally

00:31:58.350 --> 00:32:00.284
on things like stack overflow.

00:32:00.284 --> 00:32:02.450
Now hopefully I'll be able
to stop repeating myself.

00:32:02.450 --> 00:32:04.160
Because we see this a lot.

00:32:04.160 --> 00:32:06.067
And we always say
the same thing.

00:32:06.067 --> 00:32:07.900
So the first thing we're
going to go through

00:32:07.900 --> 00:32:10.311
is using the incorrect
style parent.

00:32:10.311 --> 00:32:12.060
So it's easier if we
go through an example

00:32:12.060 --> 00:32:14.790
and show you what
this can actually do.

00:32:14.790 --> 00:32:16.440
So here we have an EditText.

00:32:16.440 --> 00:32:18.362
Well, we have multiple EditText.

00:32:18.362 --> 00:32:20.820
And what we want to do, we want
to make every EditText have

00:32:20.820 --> 00:32:21.850
a different font.

00:32:21.850 --> 00:32:23.600
The medium font, but
it could be anything.

00:32:23.600 --> 00:32:26.099
So what we're going to do, we're
going to change the default

00:32:26.099 --> 00:32:27.150
style for EditText.

00:32:27.150 --> 00:32:30.920
And then set it to
have a medium font.

00:32:30.920 --> 00:32:33.740
So here we have example,
and here's our style.

00:32:33.740 --> 00:32:36.330
So, our style here, and
it's MyEditTextViewStyle.

00:32:36.330 --> 00:32:37.580
It could be whatever you want.

00:32:37.580 --> 00:32:39.650
But it sets one thing,
which is font family.

00:32:39.650 --> 00:32:41.410
And that's sets it to medium

00:32:41.410 --> 00:32:45.140
Now once you've done that, we'll
then reference it in our theme

00:32:45.140 --> 00:32:50.090
so it gets picked up as default.
And then you run your app,

00:32:50.090 --> 00:32:51.190
and you see this.

00:32:51.190 --> 00:32:53.250
Suddenly all of your
EditTexts have gone.

00:32:53.250 --> 00:32:54.540
You've lost all your styling.

00:32:54.540 --> 00:32:56.390
They're no longer editable.

00:32:56.390 --> 00:32:58.491
But you have changed
the font to medium.

00:33:01.140 --> 00:33:02.790
Now the reason why
this happened is

00:33:02.790 --> 00:33:06.790
that you didn't set a
parent on the style.

00:33:06.790 --> 00:33:09.490
And what that happens is
that you no longer pick up

00:33:09.490 --> 00:33:10.995
all of the system defaults.

00:33:10.995 --> 00:33:12.870
So you no longer get
the background, the fact

00:33:12.870 --> 00:33:16.520
that it's editable, all sorts of
weird and random things, which

00:33:16.520 --> 00:33:17.690
are in the style.

00:33:17.690 --> 00:33:20.205
So the way to fix it is you
just set the correct parent.

00:33:20.205 --> 00:33:22.330
Now the best way of finding
out what a parent is is

00:33:22.330 --> 00:33:24.414
just look at the theme
you're inheriting from.

00:33:24.414 --> 00:33:25.830
So if you're using
Theme.Material,

00:33:25.830 --> 00:33:26.800
just go into it.

00:33:26.800 --> 00:33:27.940
It is big.

00:33:27.940 --> 00:33:30.910
It's about 200 lines-ish.

00:33:30.910 --> 00:33:33.210
But it's all quite
nicely spaced out.

00:33:33.210 --> 00:33:34.497
They're all grouped together.

00:33:34.497 --> 00:33:35.580
It's not too hard to read.

00:33:38.459 --> 00:33:40.917
And suddenly once you've fixed
it, it all looks good again.

00:33:43.600 --> 00:33:45.870
Now this is quite a
technical mistake.

00:33:45.870 --> 00:33:47.760
You're all ready
going to mistake this

00:33:47.760 --> 00:33:49.737
if you're kind of
writing custom views.

00:33:49.737 --> 00:33:52.320
But it's the difference between
default style attr and default

00:33:52.320 --> 00:33:53.900
style res.

00:33:53.900 --> 00:33:55.900
Now there are two places
where you'll use this.

00:33:55.900 --> 00:33:59.000
The first is the 4-arg
constructor on View.

00:33:59.000 --> 00:34:01.205
Now that was added in API
21, so I doubt many of you

00:34:01.205 --> 00:34:02.039
are using it.

00:34:02.039 --> 00:34:03.830
But the main place
you're going to use this

00:34:03.830 --> 00:34:05.680
is in obtainStyledAttributes.

00:34:05.680 --> 00:34:08.254
And that is the way you actually
read attributes in Views.

00:34:08.254 --> 00:34:09.670
So here you can
see at the bottom,

00:34:09.670 --> 00:34:12.690
the last appearances are default
style attr and default style

00:34:12.690 --> 00:34:13.500
res.

00:34:13.500 --> 00:34:16.290
And the problem is that default
style attr should always

00:34:16.290 --> 00:34:18.886
point to an attr.

00:34:18.886 --> 00:34:20.469
So the default style
attr should point

00:34:20.469 --> 00:34:23.990
to an attribute in your theme
to pick the default style from.

00:34:23.990 --> 00:34:25.600
Now the last one,
default style res

00:34:25.600 --> 00:34:28.040
should point to an actual
resource, so an actual style

00:34:28.040 --> 00:34:28.650
resource.

00:34:28.650 --> 00:34:32.550
In this point, R.style.Widget
blah blah blah.

00:34:32.550 --> 00:34:36.760
Now if you mix them up,
basically thing stop working.

00:34:36.760 --> 00:34:38.840
Now following on
from that, there's

00:34:38.840 --> 00:34:42.440
some intricacies in how
obtainStyledAttributes actually

00:34:42.440 --> 00:34:43.694
works.

00:34:43.694 --> 00:34:45.360
And it's to do with
the order preference

00:34:45.360 --> 00:34:47.520
of how it reads an attribute.

00:34:47.520 --> 00:34:50.210
So when you're trying to
read a set of attributes,

00:34:50.210 --> 00:34:51.927
this is the order
it goes through.

00:34:51.927 --> 00:34:53.760
So the first thing it
looks for is the value

00:34:53.760 --> 00:34:55.080
in your attribute set.

00:34:55.080 --> 00:34:57.660
Now that, the
attribute set is what

00:34:57.660 --> 00:34:59.280
contains all the
attributes, which

00:34:59.280 --> 00:35:01.170
are set on you actual layouts.

00:35:01.170 --> 00:35:02.640
So if you have a
layout and you've

00:35:02.640 --> 00:35:05.100
set Android background on
it, it will be contained

00:35:05.100 --> 00:35:07.680
in the attribute style.

00:35:07.680 --> 00:35:09.980
The second thing it looks
for is the same value

00:35:09.980 --> 00:35:11.510
within any explicit style.

00:35:11.510 --> 00:35:13.920
So if you're use a style
tag pointing to a style,

00:35:13.920 --> 00:35:16.890
it will then look
for it in there.

00:35:16.890 --> 00:35:19.440
The first thing it looks for
is in the default style res.

00:35:19.440 --> 00:35:23.902
So that's in the actual concrete
pointer to a default style.

00:35:23.902 --> 00:35:25.860
Lastly it looks at the
attribute of the default

00:35:25.860 --> 00:35:27.990
style in your theme.

00:35:27.990 --> 00:35:30.600
And then finally it looks at
the base value in the theme.

00:35:30.600 --> 00:35:31.910
Now please don't rely on this.

00:35:31.910 --> 00:35:36.430
Because it leads on to the next
mistake, which is using view

00:35:36.430 --> 00:35:38.060
attributes in themes.

00:35:38.060 --> 00:35:41.200
So this is a mistake, which
actually someone on our team

00:35:41.200 --> 00:35:42.630
made recently.

00:35:42.630 --> 00:35:44.200
So here we have a theme.

00:35:44.200 --> 00:35:47.242
And we've set the Android
background tag on it.

00:35:47.242 --> 00:35:48.700
Now Android background
is something

00:35:48.700 --> 00:35:49.980
that you'd usually
use in a view.

00:35:49.980 --> 00:35:51.188
But here it's set in a theme.

00:35:55.120 --> 00:36:00.150
Now going back to the
obtainStyledAttributes bit,

00:36:00.150 --> 00:36:02.740
the last thing it looks for is
in the base value of the theme.

00:36:02.740 --> 00:36:04.490
Which basically means
that, because you've

00:36:04.490 --> 00:36:06.430
set that in your
theme, any view which

00:36:06.430 --> 00:36:10.495
doesn't have a background set
in it will then use this value.

00:36:10.495 --> 00:36:13.480
Which basically means, if you
set a background in your theme,

00:36:13.480 --> 00:36:15.750
let's say it the
color pink, every view

00:36:15.750 --> 00:36:17.880
which doesn't have an
explicit background

00:36:17.880 --> 00:36:19.420
will have this pink background.

00:36:19.420 --> 00:36:24.095
And that's a really big mistake
which you see quite often.

00:36:24.095 --> 00:36:26.470
Now we are actually going to
write more of these mistakes

00:36:26.470 --> 00:36:28.120
off into a blog post.

00:36:28.120 --> 00:36:31.466
So follow us on social,
and we'll post them up.

00:36:31.466 --> 00:36:33.130
All right, that's it.

00:36:33.130 --> 00:36:35.667
Hopefully you've learned some
stuff about themes and styles.

00:36:35.667 --> 00:36:36.500
Thank you very much.

00:36:36.500 --> 00:36:37.700
[APPLAUSE]

00:36:37.700 --> 00:36:41.950
[MUSIC PLAYING]

