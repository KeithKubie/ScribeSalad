WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Suppose we have the parsing state:

00:00:03.000 --> 00:00:05.000
(E --&gt; to E + E), and we've seen it all.

00:00:05.000 --> 00:00:07.000
There's nothing more in the future to see

00:00:07.000 --> 00:00:09.000
for this particular rewrite rule.

00:00:09.000 --> 00:00:11.000
Coming from chart state [B],

00:00:11.000 --> 00:00:15.000
we've previously seen (B) hidden tokens that aren't shown here on the left

00:00:15.000 --> 00:00:17.000
and this is all in chart state [A].

00:00:17.000 --> 00:00:20.000
I'm leaving (A) and (B) abstract

00:00:20.000 --> 00:00:23.000
so that we know how to write a general program that does this.

00:00:23.000 --> 00:00:27.000
We decided we wanted to look for (E --&gt; E + E)

00:00:27.000 --> 00:00:29.000
all the way back in chart state [B]--

00:00:29.000 --> 00:00:31.000
all the way back, after we'd seen B inputs.

00:00:31.000 --> 00:00:33.000
So if we view this as our input

00:00:33.000 --> 00:00:35.000
or sort of the bottom edge of our parse tree,

00:00:35.000 --> 00:00:37.000
as we're working on constructing it,

00:00:37.000 --> 00:00:39.000
these are some previous input tokens--

00:00:39.000 --> 00:00:41.000
maybe previous ints, previous pluses,

00:00:41.000 --> 00:00:43.000
maybe parentheses--if we extend our grammar.

00:00:43.000 --> 00:00:45.000
And at this point, we decided:

00:00:45.000 --> 00:00:48.000
I think I'm going to see an (E + E) in the future.

00:00:48.000 --> 00:00:50.000
And now we have.

00:00:50.000 --> 00:00:52.000
We've seen all three parts of it.

00:00:52.000 --> 00:00:58.000
So conceptually, it's as if we've seen the (E) right here.

00:00:58.000 --> 00:01:01.000
Let me firm this up with a concrete example.

00:01:01.000 --> 00:01:03.000
Let's go back in time and look at where we came from.

00:01:03.000 --> 00:01:05.000
Suppose I extend our grammar so that is has both

00:01:05.000 --> 00:01:09.000
Addition and Subtraction--whoa, the power--let's not get drunk!

00:01:09.000 --> 00:01:13.000
And one of our previous states in chart [B]

00:01:13.000 --> 00:01:16.000
had been: (E --&gt; to E), minus--this is where we were,

00:01:16.000 --> 00:01:20.000
and we were expecting an expression in (E).

00:01:20.000 --> 00:01:23.000
So by reduction--by prediction--

00:01:23.000 --> 00:01:26.000
we would have added in expectations to see

00:01:26.000 --> 00:01:28.000
things like (E + E).

00:01:28.000 --> 00:01:31.000
And in fact, that's where we got this state--that's why it says "from B"--

00:01:31.000 --> 00:01:36.000
we brought it in in chart state[B], based on doing the closure here.

00:01:36.000 --> 00:01:41.000
Well, now we seen enough input to actually make a single (E).

00:01:41.000 --> 00:01:43.000
We've seen (E + E); that reduces to (E).

00:01:43.000 --> 00:01:47.000
So it's as if we have this (E) in our input

00:01:47.000 --> 00:01:49.000
and we're going to shift over it.

00:01:49.000 --> 00:01:51.000
In some sense, this third approach--doing reduction--

00:01:51.000 --> 00:01:53.000
is like a combination of the previous two.

00:01:53.000 --> 00:01:57.000
If I've computed the closure in the past,

00:01:57.000 --> 00:01:59.000
and now we've seen enough of the input

00:01:59.000 --> 00:02:02.000
to actually use a reduction rule,

00:02:02.000 --> 00:02:04.000
it's as if I put an (E) in the input

00:02:04.000 --> 00:02:06.000
and we're going to shift right over it.

00:02:06.000 --> 00:02:08.000
So I'm just going to shift my finger over one,

00:02:08.000 --> 00:02:11.000
shift it over this (E)--where did this (E) come from?

00:02:11.000 --> 00:02:13.000
It came from here.

00:02:13.000 --> 00:02:16.000
We'd finished seeing all of its subcomponents.

00:02:16.000 --> 00:02:19.000
We now have a big (E)--whoop! We're done with it.

00:02:19.000 --> 00:02:24.000
Here's the real trick: this is one of the tricky parts of doing these reductions--

00:02:24.000 --> 00:02:27.000
note which chart state I added it to.

00:02:27.000 --> 00:02:30.000
We added it back to chart[A]

00:02:30.000 --> 00:02:34.000
because I don't want to forget that we've already seen a lot of these tokens.

00:02:34.000 --> 00:02:38.000
Remember the particular index we're using into our chart

00:02:38.000 --> 00:02:42.000
corresponds to how many of the input tokens we have to have seen so far.

00:02:42.000 --> 00:02:45.000
(A) was the farthest to the right, (B) over here.

00:02:45.000 --> 00:02:47.000
We definitely want to remember that we've seen

00:02:47.000 --> 00:02:51.000
all of these tokens in order to get to this point.

00:02:51.000 --> 00:02:54.000
This is the trickiest rule, so we'll do a worked example together,

00:02:54.000 --> 00:02:56.000
and then I'll ask for your input.

00:02:56.000 --> 00:02:58.000
Let's say we have the following grammar--if you look carefully at it,

00:02:58.000 --> 00:03:01.000
there's actually only one string in the language of this grammar:

00:03:01.000 --> 00:03:03.000
(a, bb, c).

00:03:03.000 --> 00:03:06.000
But I've added some extra nonterminals so that

00:03:06.000 --> 00:03:11.000
we'll get a chance to see how (bb) reduces to a bigger (B),

00:03:11.000 --> 00:03:13.000
by applying this rule in reverse,

00:03:13.000 --> 00:03:15.000
and then we keep going and do all the parsing.

00:03:15.000 --> 00:03:18.000
Unsurprisingly, the input will be: (a b b c).

00:03:18.000 --> 00:03:21.000
The only string in the language of the grammar, it's "bee-tastic".

00:03:21.000 --> 00:03:23.000
And now I'm going to work on making the chart.

00:03:23.000 --> 00:03:26.000
So let's say we haven't seen any of the input yet.

00:03:26.000 --> 00:03:28.000
We pick our starting nonterminal and, by convention,

00:03:28.000 --> 00:03:30.000
that's just the first one I mention.

00:03:30.000 --> 00:03:33.000
And actually, this is all there is; there's only one rule for the starting nonterminal.

00:03:33.000 --> 00:03:35.000
We haven't seen any of the input yet,

00:03:35.000 --> 00:03:38.000
and this red dot is not before a nonterminal

00:03:38.000 --> 00:03:41.000
so there's no closure operations to do.

00:03:41.000 --> 00:03:44.000
So we're totally fine--that's our entire parsing chart state.

00:03:44.000 --> 00:03:47.000
Now let's say we've seen one part of the input.

00:03:47.000 --> 00:03:49.000
We've seen the first token, (a).

00:03:49.000 --> 00:03:53.000
Well, that matches up exactly with the token we were expecting,

00:03:53.000 --> 00:03:55.000
to the right of the red dot,

00:03:55.000 --> 00:03:57.000
so we get to shift over it.

00:03:57.000 --> 00:03:59.000
And now I want to go back and make sure that we're recording

00:03:59.000 --> 00:04:01.000
all the right information.

00:04:01.000 --> 00:04:04.000
Officially, we need (from)-or position information--

00:04:04.000 --> 00:04:07.000
for each one of these parsing states.

00:04:07.000 --> 00:04:10.000
So here, we came from zero--we hadn't seen any tokens yet.

00:04:10.000 --> 00:04:13.000
This rule, we brought over from the previous state by shifting.

00:04:13.000 --> 00:04:15.000
It's still (from) position zero.

00:04:15.000 --> 00:04:19.000
There's nothing in the input that's not already visible here on the right-hand side.

00:04:19.000 --> 00:04:21.000
But now I'm going to bring in the closure,

00:04:21.000 --> 00:04:23.000
and we decided to perform the closure in state[1].

00:04:23.000 --> 00:04:25.000
So we write a (from1) here.

00:04:25.000 --> 00:04:28.000
Another way for you to think about this (from) or starting position is:

00:04:28.000 --> 00:04:31.000
there's really one more token--the (a)--

00:04:31.000 --> 00:04:34.000
that would be here on the left, but I'm not including it.

00:04:34.000 --> 00:04:36.000
So that's the one token we're missing.

00:04:36.000 --> 00:04:38.000
Here, the next input token is a (b).

00:04:38.000 --> 00:04:41.000
So can we shift on any of these rules?

00:04:41.000 --> 00:04:44.000
Well, this has a dot before a nonterminal, so we can't do anything here.

00:04:44.000 --> 00:04:46.000
But this one has a dot before a token--

00:04:46.000 --> 00:04:49.000
and it's the token we were expecting--we are so happy:

00:04:49.000 --> 00:04:52.000
(B goes to bb from 1)

00:04:52.000 --> 00:04:54.000
Now let's make the chart for 3 characters in the input.

00:04:54.000 --> 00:04:57.000
We've seen another (b)--so we go and look back previously.

00:04:57.000 --> 00:05:00.000
Are there any shifts we could do--oh--we could totally shift over that (b).

00:05:00.000 --> 00:05:03.000
All right. So here is the moment of truth

00:05:03.000 --> 00:05:06.000
for performing reductions

00:05:06.000 --> 00:05:09.000
We have the red dot at the end of a rule.

00:05:09.000 --> 00:05:11.000
There's nothing to the right of it,

00:05:11.000 --> 00:05:13.000
no more input to consume.

00:05:13.000 --> 00:05:16.000
So we're going to apply this (B --&gt; bb) rule

00:05:16.000 --> 00:05:18.000
in reverse.

00:05:18.000 --> 00:05:20.000
So we're going to look back to state[1].

00:05:20.000 --> 00:05:22.000
We're going to use this (from) information--

00:05:22.000 --> 00:05:24.000
Where'd it come from? It came from state[1]--

00:05:24.000 --> 00:05:28.000
and see: I could turn this (bb) in the input

00:05:28.000 --> 00:05:31.000
into a big (B), using this rule.

00:05:31.000 --> 00:05:34.000
Is there anyone who wants to see a big (B)?

00:05:34.000 --> 00:05:36.000
Back in state[1]?

00:05:36.000 --> 00:05:38.000
No--yes, there totally is!

00:05:38.000 --> 00:05:42.000
This rule here: (T) goes to (a) dot (Bc)--

00:05:42.000 --> 00:05:45.000
it's really looking to see a big (B).

00:05:45.000 --> 00:05:47.000
But we just made one--

00:05:47.000 --> 00:05:50.000
by reduction, by applying the rule in reverse.

00:05:50.000 --> 00:05:53.000
So, conceptually, you could go back and say:

00:05:53.000 --> 00:05:57.000
Oh--what if we'd seen this big (B) in the input?

00:05:57.000 --> 00:06:00.000
We've seen it right over here: (abb).

00:06:00.000 --> 00:06:04.000
Instead of seeing these two lower case (b)'s, we'd see the upper case (B).

00:06:04.000 --> 00:06:07.000
We'd take this rule--

00:06:07.000 --> 00:06:10.000
and transplant it over to this state,

00:06:10.000 --> 00:06:15.000
being careful to retain the original (from) information.

00:06:15.000 --> 00:06:17.000
Now let's just interpret this (from) information.

00:06:17.000 --> 00:06:20.000
Starting from zero tokens,

00:06:20.000 --> 00:06:23.000
we've seen (abb) in chart state[3],

00:06:23.000 --> 00:06:25.000
and those are all represented--

00:06:25.000 --> 00:06:28.000
they're all encoded in everything before the dot.

00:06:28.000 --> 00:06:30.000
In some sense, this lower case (a) has length1

00:06:30.000 --> 00:06:33.000
and this upper case (B) had length2.

00:06:33.000 --> 00:06:35.000
Those two, together, add up to three.

00:06:35.000 --> 00:06:39.000
So I don't need any more hidden tokens to be in the third chart state.

00:06:39.000 --> 00:06:43.000
So this last part, where I--from here, Step 1--

00:06:43.000 --> 00:06:46.000
went back over to here and found this rule,

00:06:46.000 --> 00:06:48.000
and then brought it back over here--

00:06:48.000 --> 00:06:51.000
1, 2, 3--this 3-step process--

00:06:51.000 --> 09:59:59.000
is reduction.

