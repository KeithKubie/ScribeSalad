WEBVTT
Kind: captions
Language: en

00:00:04.293 --> 00:00:08.430
CHET HAASE: Hi, I'm Chet Haase
from the Android team at

00:00:08.430 --> 00:00:10.690
Google, where I work on graphics
and animations.

00:00:10.690 --> 00:00:14.440
And today I wanted to talk a
little bit more about ListView

00:00:14.440 --> 00:00:17.970
animations, which I talked about
in a previous episode.

00:00:17.970 --> 00:00:21.240
This is another episode in a
series that I like to call,

00:00:21.240 --> 00:00:22.470
You're Doing It Wrong.

00:00:22.470 --> 00:00:26.650
So this is another item related
to the last one where

00:00:26.650 --> 00:00:29.540
there is a need to understand
how views are

00:00:29.540 --> 00:00:31.110
actually used by ListView.

00:00:31.110 --> 00:00:34.120
ListView recycles views, which
means that when those views

00:00:34.120 --> 00:00:36.410
are not on the screen, it may
use that view to hold

00:00:36.410 --> 00:00:37.450
different content.

00:00:37.450 --> 00:00:40.350
And you need to be aware of
that, especially when you're

00:00:40.350 --> 00:00:41.780
running animations,
so that you're not

00:00:41.780 --> 00:00:43.410
animating the wrong thing.

00:00:43.410 --> 00:00:46.820
So to demonstrate that, let's
take a look at a little demo.

00:00:46.820 --> 00:00:49.740
So we have this demo that I
call ListView Animations.

00:00:49.740 --> 00:00:52.660
And there's a long
list, and quite a

00:00:52.660 --> 00:00:54.380
boring one, of cheeses.

00:00:54.380 --> 00:00:56.510
Now, as I click on these
items, they're going to

00:00:56.510 --> 00:00:58.210
automatically fade
out and then be

00:00:58.210 --> 00:00:59.250
removed from the adapter.

00:00:59.250 --> 00:01:02.100
And the ListView is going to
update itself, and that cheese

00:01:02.100 --> 00:01:03.990
will no longer exist.

00:01:03.990 --> 00:01:05.780
So we can scroll someplace.

00:01:05.780 --> 00:01:06.920
We can delete this one.

00:01:06.920 --> 00:01:08.010
We can see the fadeout.

00:01:08.010 --> 00:01:10.850
And then the ListView
collapses around it.

00:01:10.850 --> 00:01:12.150
So all of that is good.

00:01:12.150 --> 00:01:15.880
But what happens if we delete
a couple of these and then

00:01:15.880 --> 00:01:17.350
fling the list?

00:01:17.350 --> 00:01:19.590
Hopefully, you can see
this on the screen.

00:01:19.590 --> 00:01:22.790
But what you should be able to
see is, as I'm flinging the

00:01:22.790 --> 00:01:25.780
list, there seem to be items
that have nothing to do with

00:01:25.780 --> 00:01:28.190
the ones that I clicked on
that are being removed.

00:01:28.190 --> 00:01:30.570
And this is because we're
running a fade animation on a

00:01:30.570 --> 00:01:34.090
view, which has since been
recycled and is being used for

00:01:34.090 --> 00:01:35.230
different content.

00:01:35.230 --> 00:01:36.500
Now, that doesn't mean
that the wrong

00:01:36.500 --> 00:01:37.680
item is being deleted.

00:01:37.680 --> 00:01:39.900
But it does mean that the wrong
view is being animated.

00:01:39.900 --> 00:01:42.200
So what happens is we
click on an item.

00:01:42.200 --> 00:01:44.380
It starts running a fade
animation on it.

00:01:44.380 --> 00:01:45.510
We fling the list.

00:01:45.510 --> 00:01:46.800
That view is off the screen.

00:01:46.800 --> 00:01:48.240
It gets reused for different
content.

00:01:48.240 --> 00:01:50.000
The view continues
fading, because

00:01:50.000 --> 00:01:51.775
it's the same instance.

00:01:51.775 --> 00:01:54.110
It's the same object inside.

00:01:54.110 --> 00:01:56.260
So it continues fading,
even though it now

00:01:56.260 --> 00:01:57.590
shows different content.

00:01:57.590 --> 00:02:00.390
And then when that animation is
done, then we automatically

00:02:00.390 --> 00:02:01.960
delete the original item.

00:02:01.960 --> 00:02:03.290
So the data is still intact.

00:02:03.290 --> 00:02:04.190
That's fine.

00:02:04.190 --> 00:02:07.590
But the visual experience on
the screen is just weird.

00:02:07.590 --> 00:02:09.190
We don't want to do
stuff like that.

00:02:09.190 --> 00:02:11.400
So there's a couple of ways that
you can account for this.

00:02:11.400 --> 00:02:13.660
And I want to talk about
those today.

00:02:13.660 --> 00:02:17.780
So for one thing, you could
use this item called View

00:02:17.780 --> 00:02:18.630
Property Animator.

00:02:18.630 --> 00:02:21.450
And as of Jelly Bean-- actually,
both of these ways

00:02:21.450 --> 00:02:24.050
of compensating for this are
in the Jelly Bean release.

00:02:24.050 --> 00:02:26.820
One is to use View Property
Animator, which internally

00:02:26.820 --> 00:02:29.440
tells the system, hey, I'm not
done with this view yet.

00:02:29.440 --> 00:02:32.110
So just let me run my
animation in peace.

00:02:32.110 --> 00:02:36.320
So if I'm using that for the
animations and then I do the

00:02:36.320 --> 00:02:39.830
fling operation, you'll see
that there is no more

00:02:39.830 --> 00:02:40.730
disruption on the screen.

00:02:40.730 --> 00:02:44.420
Nothing is being faded out in
the new views that we're

00:02:44.420 --> 00:02:47.820
seeing on the screen, because
we are persisting the views

00:02:47.820 --> 00:02:49.530
that had the animations
running on them.

00:02:49.530 --> 00:02:51.810
So, basically, we're grabbing it
and saying, you know what?

00:02:51.810 --> 00:02:52.800
I have a lock on this view.

00:02:52.800 --> 00:02:55.580
Don't recycle it yet, because
I'm in the middle of using it.

00:02:55.580 --> 00:02:57.780
If you don't want to use View
Property Animator, another way

00:02:57.780 --> 00:02:59.870
to get the same capability,
again, in the Jelly Bean

00:02:59.870 --> 00:03:01.740
release is to use this
new property

00:03:01.740 --> 00:03:03.140
called Transient State.

00:03:03.140 --> 00:03:04.840
So you can call this
method, saying, set

00:03:04.840 --> 00:03:05.890
has Transient State.

00:03:05.890 --> 00:03:08.700
And that tells us you're in the
middle of using it, and we

00:03:08.700 --> 00:03:11.010
won't recycle it until
you tell us to.

00:03:11.010 --> 00:03:12.880
So, again, we delete
some things.

00:03:12.880 --> 00:03:13.860
We fling the list.

00:03:13.860 --> 00:03:16.510
And we have no disruptive
experience on the screen,

00:03:16.510 --> 00:03:19.320
because we know that you are
still using those views that

00:03:19.320 --> 00:03:20.540
you are fading out.

00:03:20.540 --> 00:03:23.670
So interesting demo, more
interesting code.

00:03:23.670 --> 00:03:24.920
Let's take a look at that.

00:03:24.920 --> 00:03:27.370
So we have this class called
ListView Animations.

00:03:27.370 --> 00:03:30.760
We create the check boxes and
the list view and the adapter,

00:03:30.760 --> 00:03:31.720
all that stuff.

00:03:31.720 --> 00:03:32.960
The interesting part
is down here.

00:03:32.960 --> 00:03:34.780
What happens when we
click on an item?

00:03:34.780 --> 00:03:36.400
So when we click on it,
we're immediately

00:03:36.400 --> 00:03:37.430
going to run this animation.

00:03:37.430 --> 00:03:40.870
But how we run it depends on
which of those check boxes we

00:03:40.870 --> 00:03:43.320
check at the top for using View
Property Animator, or

00:03:43.320 --> 00:03:45.140
Transient State, or
none of those.

00:03:45.140 --> 00:03:49.320
So in the none of those case,
basically, we wind up in this

00:03:49.320 --> 00:03:49.970
code down here.

00:03:49.970 --> 00:03:52.580
We say, OK, I'm going to create
an Object Animator.

00:03:52.580 --> 00:03:54.610
And we're going to animate.

00:03:54.610 --> 00:03:57.190
In a previous episode, we saw
some basics on how to use

00:03:57.190 --> 00:03:57.930
Object Animator.

00:03:57.930 --> 00:03:59.380
We use a target object.

00:03:59.380 --> 00:04:00.530
We use a target property.

00:04:00.530 --> 00:04:02.770
We're going to animate the alpha
property on that view.

00:04:02.770 --> 00:04:05.250
And we're going to animate it to
zero from whatever value it

00:04:05.250 --> 00:04:07.810
has right now, which happens
to be one, fully opaque.

00:04:07.810 --> 00:04:09.370
It usually is.

00:04:09.370 --> 00:04:10.520
So we create the animation.

00:04:10.520 --> 00:04:12.190
We set a duration of 1,000.

00:04:12.190 --> 00:04:14.270
Way too long for this operation,
but for the

00:04:14.270 --> 00:04:16.529
purposes of this demo, I wanted
you to actually be able

00:04:16.529 --> 00:04:20.540
to see the animation and the
artifact as it was happening.

00:04:20.540 --> 00:04:23.350
The transient state
is not checked.

00:04:23.350 --> 00:04:25.100
So we're going to skip this
code here, which is the

00:04:25.100 --> 00:04:27.670
interesting part, which
we'll get to later.

00:04:27.670 --> 00:04:30.080
We're going to add a listener
so that we can actually

00:04:30.080 --> 00:04:33.160
restore these things later
and then remove it

00:04:33.160 --> 00:04:34.150
from the data set.

00:04:34.150 --> 00:04:37.500
So on animation end, when this
nice, little fade animation

00:04:37.500 --> 00:04:40.480
out to zero ends, we're going
to go in here and actually

00:04:40.480 --> 00:04:42.320
remove it from the
list of cheeses.

00:04:42.320 --> 00:04:45.120
Notify the data set change,
restore the alpha property,

00:04:45.120 --> 00:04:48.690
which is always important to do
with fading animations, and

00:04:48.690 --> 00:04:49.150
then we're done.

00:04:49.150 --> 00:04:50.320
And then we start
the animation.

00:04:50.320 --> 00:04:53.270
So life is good unless that
view got scrolled off the

00:04:53.270 --> 00:04:56.740
screen after the animation
started, in which case, the

00:04:56.740 --> 00:04:58.970
view has been reassigned to
different content when you get

00:04:58.970 --> 00:05:02.360
that disruptive experience
that we saw earlier.

00:05:02.360 --> 00:05:04.780
So the two workarounds
for it are to use a

00:05:04.780 --> 00:05:05.840
View Property Animator.

00:05:05.840 --> 00:05:08.560
So if you checked that box at
the top of this demo, then

00:05:08.560 --> 00:05:11.530
instead of using Object Animator
to animate that view,

00:05:11.530 --> 00:05:12.970
we're going to use View
Property Animator.

00:05:12.970 --> 00:05:16.360
And we do that by calling
code much like this.

00:05:16.360 --> 00:05:17.580
We say view.animate.

00:05:17.580 --> 00:05:20.430
That returns the instance of the
View Property Animator for

00:05:20.430 --> 00:05:21.950
that specific view.

00:05:21.950 --> 00:05:25.970
Set duration, again, we want an
unusually long duration for

00:05:25.970 --> 00:05:28.610
this animation just for the
purposes of this demo.

00:05:28.610 --> 00:05:31.730
And then we're going to animate
alpha to a value of

00:05:31.730 --> 00:05:34.230
zero from its current value,
which happens to be one.

00:05:34.230 --> 00:05:37.020
And when this animation
finishes, it's going to have

00:05:37.020 --> 00:05:39.940
an end action, which does
something remarkably similar

00:05:39.940 --> 00:05:41.090
to what we saw before.

00:05:41.090 --> 00:05:43.860
It's going to remove the item
from the cheese list, notify

00:05:43.860 --> 00:05:46.370
data set changed, and restore
the alpha property.

00:05:46.370 --> 00:05:46.960
And we're done.

00:05:46.960 --> 00:05:49.100
No special magic to
work around this.

00:05:49.100 --> 00:05:52.180
Instead, internally, we're doing
the right thing to tell

00:05:52.180 --> 00:05:55.280
the ListView, don't recycle this
view yet, because I'm in

00:05:55.280 --> 00:05:55.990
the middle of using it.

00:05:55.990 --> 00:05:59.400
And then when that animation is
done, it unsets that flag,

00:05:59.400 --> 00:06:02.770
and that view can be recycled
appropriately.

00:06:02.770 --> 00:06:05.350
The alternate way to do it, if
you're not using View Property

00:06:05.350 --> 00:06:08.860
Animator, you can have access
to this exact same

00:06:08.860 --> 00:06:11.810
functionality by calling set
has transient state.

00:06:11.810 --> 00:06:14.610
So if you checked that other
box at the top of the demo

00:06:14.610 --> 00:06:19.500
that said Transient State,
then we will say, set has

00:06:19.500 --> 00:06:20.180
transient state.

00:06:20.180 --> 00:06:22.540
So when you click on the item,
we're automatically going to

00:06:22.540 --> 00:06:25.770
flag that item in the ListView
as having transition state,

00:06:25.770 --> 00:06:29.420
which means the ListView will
not recycle that item until

00:06:29.420 --> 00:06:30.780
you tell it it's OK.

00:06:30.780 --> 00:06:32.130
So we're going to set
has transient state.

00:06:32.130 --> 00:06:34.690
We're going to run the same
exact animation as before.

00:06:34.690 --> 00:06:38.430
But OnAnimation end is going to
run this little additional

00:06:38.430 --> 00:06:40.890
bit of code, which restores
the transient state to its

00:06:40.890 --> 00:06:42.810
default state of false.

00:06:42.810 --> 00:06:44.430
So you click on the item.

00:06:44.430 --> 00:06:46.000
We start running the
Object Animator.

00:06:46.000 --> 00:06:46.960
It's fading out to View.

00:06:46.960 --> 00:06:47.730
It's all happy.

00:06:47.730 --> 00:06:48.980
You've set transient
state on it.

00:06:48.980 --> 00:06:50.020
We fling the list.

00:06:50.020 --> 00:06:51.760
That view still exists.

00:06:51.760 --> 00:06:53.470
Even though it's now off-screen
and you can't see

00:06:53.470 --> 00:06:56.230
it anymore, it's not being used
for other content, which

00:06:56.230 --> 00:06:58.750
is really the key to making
this animation

00:06:58.750 --> 00:07:00.400
actually work correctly.

00:07:00.400 --> 00:07:04.120
So ListView Animations, if you
want to do them right, be

00:07:04.120 --> 00:07:05.480
aware of that transient state.

00:07:05.480 --> 00:07:07.800
And don't try to animate stuff
that's going to be recycled

00:07:07.800 --> 00:07:09.150
with other content.

00:07:09.150 --> 00:07:10.400
Thanks.

