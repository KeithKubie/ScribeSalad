WEBVTT
Kind: captions
Language: en

00:00:01.312 --> 00:00:03.520
ALEX DANILO: Once upon a
time there was a little girl

00:00:03.520 --> 00:00:06.450
and a little boy who traveled
through the woods and got lost.

00:00:06.450 --> 00:00:07.890
And they came up
with a great idea

00:00:07.890 --> 00:00:09.660
of dropping bread
crumbs along the way

00:00:09.660 --> 00:00:11.299
so they could find
their way home.

00:00:15.184 --> 00:00:15.850
I'm Alex Danilo.

00:00:15.850 --> 00:00:19.250
And I want to talk about modern
bread crumbs in the form of GPS

00:00:19.250 --> 00:00:22.975
crumbs for your mobile phone.

00:00:22.975 --> 00:00:24.605
There are thousands
of apps out there

00:00:24.605 --> 00:00:25.580
that track you
when you're moving.

00:00:25.580 --> 00:00:27.430
And when you're
moving across space,

00:00:27.430 --> 00:00:30.265
you can grab GPS crumbs-- for
example, when you're driving,

00:00:30.265 --> 00:00:31.690
or cycling, or walking.

00:00:35.520 --> 00:00:38.640
Now this is great, except for
the problem of GPS jitter.

00:00:38.640 --> 00:00:40.140
If you're traveling
along a road,

00:00:40.140 --> 00:00:42.280
and you grab a whole lot
of crumbs along the way,

00:00:42.280 --> 00:00:44.696
chances are they won't actually
connect to the road you're

00:00:44.696 --> 00:00:45.690
traveling on.

00:00:45.690 --> 00:00:47.870
Like, for example, if
I grab these 10 crumbs,

00:00:47.870 --> 00:00:49.670
and then I try to draw
a line between them,

00:00:49.670 --> 00:00:51.211
it actually crosses
through buildings

00:00:51.211 --> 00:00:53.540
and doesn't follow the
road I was traveling on.

00:00:53.540 --> 00:00:55.370
This is due to a few
different reasons,

00:00:55.370 --> 00:00:57.815
like taking too few samples
along the way, or inaccuracy

00:00:57.815 --> 00:00:59.380
in the GPS crumb collection.

00:00:59.380 --> 00:01:02.350
But with the Roads API, it
provides a service where you

00:01:02.350 --> 00:01:05.750
can pass in your GPS crumbs
and get GPS crumbs back that

00:01:05.750 --> 00:01:08.680
actually snap to the road you've
been travelling on, and provide

00:01:08.680 --> 00:01:10.260
interpolation between them.

00:01:10.260 --> 00:01:12.270
So you can create
beautiful visualizations

00:01:12.270 --> 00:01:15.390
of GPS tracks of the roads
that you've been traveling on.

00:01:20.050 --> 00:01:22.200
Now, you can pass quite
a few crumbs at a time.

00:01:22.200 --> 00:01:23.770
And for example,
if you pass in 100,

00:01:23.770 --> 00:01:26.360
and say, interpolate it for
me, and generate the curves,

00:01:26.360 --> 00:01:28.040
you can get maybe 300 back.

00:01:28.040 --> 00:01:30.330
And this way you can plot
an accurate visualization

00:01:30.330 --> 00:01:31.960
of where you've been driving.

00:01:31.960 --> 00:01:34.350
Say you're building an app
to record your driving so you

00:01:34.350 --> 00:01:36.960
can compare with your friends.

00:01:36.960 --> 00:01:38.592
Or if you're cycling,
you might want

00:01:38.592 --> 00:01:40.050
to know what your
personal best is.

00:01:40.050 --> 00:01:42.410
And your app does this for you.

00:01:42.410 --> 00:01:44.480
Now the Roads API
gives you a perfect way

00:01:44.480 --> 00:01:47.830
to visualize this on your phone
with complete accuracy using

00:01:47.830 --> 00:01:50.230
Google's map data.

00:01:50.230 --> 00:01:53.480
Roads API also provides metadata
for enterprise customers.

00:01:53.480 --> 00:01:55.666
For example, if you're
building an asset tracker,

00:01:55.666 --> 00:01:57.790
you can get speed limits
for roads you've traveled.

00:01:57.790 --> 00:01:59.790
So if I've gong from
point A to point B,

00:01:59.790 --> 00:02:01.770
I can visualize it by
drawing different colors

00:02:01.770 --> 00:02:04.450
for the different speed
limit areas where I've gone.

00:02:04.450 --> 00:02:06.590
I can even give my users
alerts if they're speeding

00:02:06.590 --> 00:02:08.590
to make them safer drivers.

00:02:08.590 --> 00:02:11.589
We have a demo showing exactly
that right here at this URL.

00:02:11.589 --> 00:02:14.130
You can see the source code,
and you can use it as an example

00:02:14.130 --> 00:02:16.900
that you can build it to
your location where app.

00:02:16.900 --> 00:02:19.302
We also have full documentation
here on this website.

00:02:19.302 --> 00:02:21.010
And I'd encourage you
to incorporate this

00:02:21.010 --> 00:02:23.740
into any app that tracks
movement along roads today.

00:02:23.740 --> 00:02:26.720
Try out the Roads API
to give your users

00:02:26.720 --> 00:02:29.230
beautiful visualizations
of where they've been.

00:02:29.230 --> 00:02:32.360
I'm Alex Danilo for the Google
Developer Platform Team,

00:02:32.360 --> 00:02:35.120
and don't you "baguette" it.

