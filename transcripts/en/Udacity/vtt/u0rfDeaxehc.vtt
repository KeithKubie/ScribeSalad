WEBVTT
Kind: captions
Language: en

00:00:00.880 --> 00:00:02.719
Now, if you're a pretty observant gadget hound

00:00:02.719 --> 00:00:05.240
like me, you may be wondering how is it

00:00:05.240 --> 00:00:08.470
that these bucket breakdowns actually work. My Nexus

00:00:08.470 --> 00:00:11.530
7 tablet, for example, is only 800 pixels wide

00:00:11.530 --> 00:00:14.700
in the portrait orientation. This Galaxy x4 phone

00:00:14.700 --> 00:00:18.780
is actually 1080 pixels wide, in the same dimension.

00:00:18.780 --> 00:00:21.240
Even though the S4 has more pixels, it's

00:00:21.240 --> 00:00:25.060
somehow turning up as a phone. Why is this?

00:00:26.250 --> 00:00:28.750
The answer lies in a little bit of magic

00:00:28.750 --> 00:00:32.299
called the device pixel ratio, and the fact that once

00:00:32.299 --> 00:00:35.860
again, the web platform is lying to you. The device

00:00:35.860 --> 00:00:39.710
pixel ratio, is the ratio between device independent pixels and

00:00:39.710 --> 00:00:43.560
an actual physical pixel on the screen. Remember, back in

00:00:43.560 --> 00:00:45.750
the viewport lesson, when I said you should just give

00:00:45.750 --> 00:00:49.000
this magic boilerplate at the top of your file, and

00:00:49.000 --> 00:00:51.380
you'd get the actual number of pixels on the screen

00:00:51.380 --> 00:00:56.298
as your width? Well, that's not actually quite true, because we've a concept

00:00:56.298 --> 00:01:01.110
called a device independent pixel. The first time this

00:01:01.110 --> 00:01:06.010
really came into play, was when apple released the iphone 4. The original

00:01:06.010 --> 00:01:11.280
iphone and the iphone 3G and 3Gs, had a screen resolution

00:01:11.280 --> 00:01:16.410
of 320 by 480. The iphone 4, however, had what apple

00:01:16.410 --> 00:01:19.630
called a retina display, which doubled the horizontal and

00:01:19.630 --> 00:01:24.040
vertical resolution. To 640 by 960, but they still

00:01:24.040 --> 00:01:26.360
wanted text set in pixels to be the same

00:01:26.360 --> 00:01:29.270
height. To go back to the viewport lesson for

00:01:29.270 --> 00:01:32.430
a second, even with width set to device width,

00:01:32.430 --> 00:01:34.630
they still wanted to have the same pixel width

00:01:34.630 --> 00:01:37.300
fed to the layout algorithm, so you got consistent

00:01:37.300 --> 00:01:41.740
layout across the iphone 3 and iphone 4. In essence,

00:01:41.740 --> 00:01:43.640
they caused the lay out algorithm to lie

00:01:43.640 --> 00:01:47.102
again. Even though the screen is 640 x 960,

00:01:47.102 --> 00:01:50.126
the layout algorithm treats it like it's 320 x

00:01:50.126 --> 00:01:54.786
480. That way, sizes that formatted for the original

00:01:54.786 --> 00:01:58.080
320 x 480 screen still layout well on

00:01:58.080 --> 00:02:01.040
the higher resolution screen, and text and images are

00:02:01.040 --> 00:02:03.330
rendered at the higher resolution. So, it can look

00:02:03.330 --> 00:02:07.200
better as well. That's why, even on the iphone

00:02:07.200 --> 00:02:09.080
5, if you set a view port with device

00:02:09.080 --> 00:02:11.820
width, the browser width is returned to you as

00:02:11.820 --> 00:02:16.130
320 pixels not the actual 640 pixels that there're

00:02:16.130 --> 00:02:18.720
across the screen. There're are 2 device pixels for

00:02:18.720 --> 00:02:21.570
every pixel that the system lays out. The new

00:02:21.570 --> 00:02:23.870
screen, of course, is a little bit longer. So,

00:02:23.870 --> 00:02:28.820
the vertical dimension is different. Window.device pixel ratio captures

00:02:28.820 --> 00:02:32.790
this ratio. The number of device pixels, for every formatting

00:02:32.790 --> 00:02:35.930
pixel in the layout system. It's basically a way

00:02:35.930 --> 00:02:39.450
to identify the density of pixels on the screen. Now,

00:02:39.450 --> 00:02:42.450
this may not be the precise device pixel density.

00:02:42.450 --> 00:02:45.690
It's sometimes rounded to the nearest integer. But, this let's

00:02:45.690 --> 00:02:49.400
us know high resolution density the screen is, rather

00:02:49.400 --> 00:02:51.590
than just how many layout pixels there are on it.

00:02:53.030 --> 00:02:55.330
So, let's go back to the original question. How is

00:02:55.330 --> 00:02:58.080
it that the Galaxy S4 is getting the phone layout

00:02:58.080 --> 00:03:00.580
in our conference app, while my Nexus 7 is

00:03:00.580 --> 00:03:03.680
getting the tablet layout? Even though the S4 has couple

00:03:03.680 --> 00:03:06.870
hundred more pixels across, than the Nexus and we're using

00:03:06.870 --> 00:03:10.335
pixel count to switch in our media query. Well, the

00:03:10.335 --> 00:03:13.565
answer is device pixel ratio. The Galaxy S4 has

00:03:13.565 --> 00:03:16.890
a device pixel ratio of 3. The Nexus 7 is

00:03:16.890 --> 00:03:20.290
only 1.3. So, if you look at the formatting width,

00:03:20.290 --> 00:03:24.230
the width passed into the viewport, the windows screen width.

00:03:24.230 --> 00:03:31.221
Well, on the S4 it's 360. But on the Nexus 7, it's 601.

