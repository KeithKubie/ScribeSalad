WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.230
Now, it's time to finish 
creating our new view

00:00:02.230 --> 00:00:03.840
by drawing its contents.

00:00:03.840 --> 00:00:07.040
And, we do that within
our Custom View's onDraw method.

00:00:07.040 --> 00:00:09.110
Now, the Android Canvas
is pretty standard

00:00:09.110 --> 00:00:11.050
as far as canvas APIs go.

00:00:11.050 --> 00:00:14.110
It uses the Painter's algorithm, 
meaning that each new thing you paint

00:00:14.110 --> 00:00:15.680
will cover anything beneath it.

00:00:15.680 --> 00:00:20.160
The Canvas and Paint classes 
offer a variety of brushes and helpers

00:00:20.160 --> 00:00:23.196
to draw and fill lines, 
boxes, circles, and text

00:00:23.196 --> 00:00:25.482
with colors, patterns, 
gradients, and images,

00:00:25.482 --> 00:00:28.750
as well as offering the ability
to move, rotate, and scale the canvas

00:00:28.750 --> 00:00:29.970
while you draw.

00:00:29.970 --> 00:00:32.759
I could spend a lot of time here 
detailing exactly how to use

00:00:32.759 --> 00:00:33.954
each of these tools.

00:00:33.954 --> 00:00:36.718
But there's nothing unique to Android,
and it's covered really well

00:00:36.718 --> 00:00:38.972
on the documentation link below.

00:00:38.972 --> 00:00:41.930
It is possible though to create 
pretty advanced UIs this way.

00:00:41.930 --> 00:00:46.250
For example, if we start by drawing
a circle and then add a second circle,

00:00:46.250 --> 00:00:49.200
and then you just need to finish 
drawing the rest of the compass.

00:00:49.200 --> 00:00:51.050
Here's an example I prepared earlier.

00:00:51.050 --> 00:00:53.746
The specifics of what you draw 
are different for every view,

00:00:53.746 --> 00:00:56.762
but one thing that is consistent,
is the resource constraint device

00:00:56.762 --> 00:00:58.120
you're drawing on.

00:00:58.120 --> 00:01:00.326
And that the onDraw method
will be called every time

00:01:00.326 --> 00:01:01.682
the screen is refreshed,

00:01:01.682 --> 00:01:05.309
potentially many times a second; 
that means any object created here

00:01:05.309 --> 00:01:08.440
within your onDraw method, 
including things like paint objects,

00:01:08.440 --> 00:01:11.750
will be created and destroyed 
at an alarming frequency.

00:01:11.750 --> 00:01:14.950
Object creation and destruction 
can be expensive on Android;

00:01:14.950 --> 00:01:17.256
potentially effecting
the smoothness of your UI

00:01:17.256 --> 00:01:19.012
when garbage collection is initiated.

00:01:19.012 --> 00:01:20.018
The solution?

00:01:20.018 --> 00:01:22.995
Move the scope of any object
used within the onDraw loop,

00:01:22.995 --> 00:01:24.592
into the class scope.

00:01:24.592 --> 00:01:26.450
Go ahead and override
the onDraw method

00:01:26.450 --> 00:01:29.600
within your new view
and draw the new control.

00:01:29.600 --> 00:01:32.630
In fact, why not take this opportunity
to create a custom control

00:01:32.630 --> 00:01:35.750
that can display the wind speed
and direction fused within sunshine.

00:01:35.750 --> 00:01:38.040
Once you're done, 
you can add it to your layer

00:01:38.040 --> 00:01:42.200
using it it's full package name
and the class name in the XML like this.

00:01:42.200 --> 00:01:45.770
Run it and then post a screenshot
of your new view into the forum.

