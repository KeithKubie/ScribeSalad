WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:03.420
Now that you understand how to
interpret the results of the geocoding

00:00:03.420 --> 00:00:06.560
web service, let's switch back
to the JavaScript API and

00:00:06.560 --> 00:00:07.800
incorporate it into our app.

00:00:08.940 --> 00:00:13.140
We'll use the geocoding service client
side, since we'll need user input.

00:00:13.140 --> 00:00:14.290
The user searching for

00:00:14.290 --> 00:00:18.970
a new home may want to indicate
a location to base their search around.

00:00:18.970 --> 00:00:21.770
One way to do that would be to have
them enter a point of interest,

00:00:21.770 --> 00:00:23.000
a neighborhood or an address.

00:00:24.120 --> 00:00:26.310
After they do that we
can center our map and

00:00:26.310 --> 00:00:29.600
zoom it around that location
instead of showing the entire city.

00:00:31.570 --> 00:00:34.944
So, we'll define another
user input here in our HTML.

00:00:34.944 --> 00:00:38.817
I'm calling this zoom-to-area-text
because I'll prompt the user to focus on

00:00:38.817 --> 00:00:40.770
an area of the city.

00:00:40.770 --> 00:00:42.630
This would be useful if
we had a ton of listings.

00:00:44.240 --> 00:00:46.450
We'll also add a zoom button and

00:00:46.450 --> 00:00:49.280
a horizontal rule to keep
our page a little neater.

00:00:49.280 --> 00:00:50.590
I'm also adding some more CSS.

00:00:52.000 --> 00:00:55.980
Next, we'll create an event listener
in our initialized function, so that

00:00:55.980 --> 00:01:00.450
when the zoom to area button is clicked
we call our zoom to area function.

00:01:00.450 --> 00:01:02.110
Which we'll create below.

00:01:02.110 --> 00:01:06.325
The goal of this zoom to area function
is to take the user entered address,

00:01:06.325 --> 00:01:09.090
geocode it to get the lat-long, and

00:01:09.090 --> 00:01:12.420
then center the map on that lat-long and
zoom in.

00:01:12.420 --> 00:01:16.480
The first thing we'll do is
create a new geocoder instance.

00:01:16.480 --> 00:01:21.000
We'll then capture the user entered
address and make sure it isn't blank.

00:01:22.110 --> 00:01:24.180
Finally we'll geocode that address.

00:01:25.240 --> 00:01:28.410
We're also adding in a component
restriction here to keep it within

00:01:28.410 --> 00:01:31.820
the city so that they don't enter
an address outside of New York City.

00:01:31.820 --> 00:01:33.390
After we get the results,

00:01:33.390 --> 00:01:37.670
we'll check our geocoder status to
make sure it's okay, and then we'll

00:01:37.670 --> 00:01:41.770
use the resulting lat long we got
back to recenter the map and zoom in.

00:01:41.770 --> 00:01:43.081
If the results were not okay,

00:01:43.081 --> 00:01:47.480
we'll give the user a message that we
can't find the location they entered.

00:01:47.480 --> 00:01:49.830
We could also show some
more information here.

00:01:49.830 --> 00:01:52.470
Such as the actual status code received.

00:01:52.470 --> 00:01:55.945
So, if Ajay looks for Ajay land, we
could let him know we didn't find it as

00:01:55.945 --> 00:01:59.160
opposed to letting him know that we
got a server error or something.

00:01:59.160 --> 00:02:00.400
All right let's give this a go.

00:02:02.160 --> 00:02:03.370
I'm going to zoom in
on the East Village.

00:02:04.920 --> 00:02:08.800
Boom, now the user can zoom in
on the Upper East Side, SoHo,

00:02:08.800 --> 00:02:12.230
the East Village, any area that they're
interested in looking at houses within.

00:02:13.530 --> 00:02:15.100
So it's getting easier and easier for

00:02:15.100 --> 00:02:18.410
the user to see exactly what
listing they're interested in.

00:02:18.410 --> 00:02:20.230
Let's practice what we've
learned about geocoding.

