WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:05.170
At this point, we've defined a bipartite
graph and the notion of a matching.

00:00:05.170 --> 00:00:08.020
Now we're going to see
the connection with maximum flow.

00:00:08.020 --> 00:00:12.440
Intuitively, a maximum matching problem
should feel like we're trying to push

00:00:12.440 --> 00:00:14.880
as much stuff from one side of
the partition to the other.

00:00:14.880 --> 00:00:19.070
It should be no surprise, then, that
there turns out to be an easy reduction

00:00:19.070 --> 00:00:22.460
to the maximum flow problem,
which we've already studied.

00:00:22.460 --> 00:00:25.740
We build a flow network that
has the same set of vertices,

00:00:25.740 --> 00:00:29.530
plus two more which serve
as the source and the sink.

00:00:29.530 --> 00:00:34.240
We then add edges from the source
to one-half the partition, and

00:00:34.240 --> 00:00:37.710
from the other half
the partition to the sink.

00:00:37.710 --> 00:00:43.110
Internal edges are given a direction
from the source side to the sink side.

00:00:43.110 --> 00:00:45.410
All capacities are set to 1.

00:00:45.410 --> 00:00:49.770
Setting the capacities of the new
edges to 1 is important to insure that

00:00:49.770 --> 00:00:53.460
flow from or
to any vertex isn't more than 1.

00:00:53.460 --> 00:00:56.620
We only want to match each
of these vertices once.

00:00:56.620 --> 00:01:00.560
Having constructed the graph,
we run Ford-Fulkerson on it.

00:01:00.560 --> 00:01:04.690
And we return the edges with
positive flows as the matching.

00:01:04.690 --> 00:01:08.750
Actually, all edges will have
flows zero or one, as we'll see.

00:01:08.750 --> 00:01:11.730
The time analysis here is rather simple.

00:01:11.730 --> 00:01:14.390
Building the network is order E, or

00:01:14.390 --> 00:01:17.590
maybe order V depending on
the representation used.

00:01:17.590 --> 00:01:18.720
In any case, this is small,

00:01:18.720 --> 00:01:24.660
however, compared to the cost of running
Ford-Fulkerson, which is E times V.

00:01:24.660 --> 00:01:28.348
Note that V is a bound on the total
capacity of the flow, and

00:01:28.348 --> 00:01:31.450
hence a bound on the total
number of iterations.

00:01:31.450 --> 00:01:35.400
In this particular case,
this bound gives a better one

00:01:35.400 --> 00:01:39.560
than we would obtain either by the
scaling algorithm or by Edmonds-Karp.

00:01:39.560 --> 00:01:40.290
Lastly, of course,

00:01:40.290 --> 00:01:44.220
we have the step of simply returning
the edges with positive flows, and

00:01:44.220 --> 00:01:48.920
that's just a matter of writing
the answer out, so that's order V.

00:01:48.920 --> 00:01:51.478
Clearly, Ford-Fulkerson
is the dominant part, and

00:01:51.478 --> 00:01:53.820
we end up with an algorithm
that is order E times V.

