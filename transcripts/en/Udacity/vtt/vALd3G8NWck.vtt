WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.150
So, we need to build an app 
that adapts well to all different devices.

00:00:03.150 --> 00:00:06.070
But there's so many types of devices,
so where do we begin?

00:00:06.070 --> 00:00:09.500
Well, we can start by grouping them
into buckets based on physical size.

00:00:09.500 --> 00:00:14.470
We can have a bucket for phones,
and a bucket for 7-inch tablet's,

00:00:14.470 --> 00:00:17.500
and a bucket for 10-inch tablet's as well.

00:00:17.500 --> 00:00:20.430
You can go even more granular 
based on screen width.

00:00:20.430 --> 00:00:22.910
But these are the most common 
buckets that you'll need.

00:00:22.910 --> 00:00:26.110
Now, classifying based
on size alone is not enough.

00:00:26.110 --> 00:00:29.223
Even among devices of the same size, 
there's still a wide range

00:00:29.223 --> 00:00:30.616
of screen densities.

00:00:30.616 --> 00:00:33.910
Screen density is calculated
from the number of dots per inch

00:00:33.910 --> 00:00:36.003
on the device or DPI.

00:00:36.003 --> 00:00:40.516
The scale starts off with low density devices, 
also known as LDPI devices.

00:00:40.516 --> 00:00:44.680
It has about 120 dots per inch,
then it increases to medium denisty,

00:00:44.680 --> 00:00:48.740
high density, all the way to
extra, extra, extra high density devices,

00:00:48.740 --> 00:00:50.960
where the number
of dots per inch is much higher.

00:00:50.960 --> 00:00:54.760
So, how do we build an app that accounts
for all these different screen densities?

00:00:54.760 --> 00:00:56.920
Well, when we specify 
layout dimensions,

00:00:56.920 --> 00:01:00.240
we quickly realize
that we can't use pixels.

00:01:00.240 --> 00:01:04.360
For example, a 48 pixel button 
that looks fine on an MDPI device,

00:01:04.360 --> 00:01:07.490
will look much smaller
on a higher density device

00:01:07.490 --> 00:01:11.040
where the pixels are more compacted
and the physical size of 48 pixels

00:01:11.040 --> 00:01:12.470
is much smaller.

00:01:12.470 --> 00:01:14.720
The user wants a button
to be easily tappable,

00:01:14.720 --> 00:01:16.980
so it shouldn't change
based on screen density.

00:01:16.980 --> 00:01:20.340
So we need a consistent 
unit of measure to define physical size,

00:01:20.340 --> 00:01:23.660
and in Android we call that
density-independent pixels

00:01:23.660 --> 00:01:26.000
or dips, or dp for short.

00:01:26.000 --> 00:01:29.425
That way, a 48dp button will be 
the same physical size

00:01:29.425 --> 00:01:32.475
across all these different 
screen densities.

