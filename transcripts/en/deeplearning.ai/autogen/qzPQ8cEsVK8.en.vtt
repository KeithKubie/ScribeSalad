WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.360
in the previous video you saw the basic

00:00:02.360 --> 00:00:02.370
in the previous video you saw the basic
 

00:00:02.370 --> 00:00:04.220
in the previous video you saw the basic
blocks of implementing a deep neural

00:00:04.220 --> 00:00:04.230
blocks of implementing a deep neural
 

00:00:04.230 --> 00:00:07.160
blocks of implementing a deep neural
network a for propagation step for each

00:00:07.160 --> 00:00:07.170
network a for propagation step for each
 

00:00:07.170 --> 00:00:08.839
network a for propagation step for each
layer and a corresponding backward

00:00:08.839 --> 00:00:08.849
layer and a corresponding backward
 

00:00:08.849 --> 00:00:10.879
layer and a corresponding backward
propagation step let's see how you can

00:00:10.879 --> 00:00:10.889
propagation step let's see how you can
 

00:00:10.889 --> 00:00:12.560
propagation step let's see how you can
actually implement these steps will

00:00:12.560 --> 00:00:12.570
actually implement these steps will
 

00:00:12.570 --> 00:00:14.870
actually implement these steps will
start to for propagation recall that

00:00:14.870 --> 00:00:14.880
start to for propagation recall that
 

00:00:14.880 --> 00:00:18.109
start to for propagation recall that
what this will do is input a L minus 1

00:00:18.109 --> 00:00:18.119
what this will do is input a L minus 1
 

00:00:18.119 --> 00:00:21.980
what this will do is input a L minus 1
and output a L and the cash ZL and we

00:00:21.980 --> 00:00:21.990
and output a L and the cash ZL and we
 

00:00:21.990 --> 00:00:23.660
and output a L and the cash ZL and we
just said that from implementational

00:00:23.660 --> 00:00:23.670
just said that from implementational
 

00:00:23.670 --> 00:00:27.500
just said that from implementational
point of view maybe we'll cache WL + BL

00:00:27.500 --> 00:00:27.510
point of view maybe we'll cache WL + BL
 

00:00:27.510 --> 00:00:29.599
point of view maybe we'll cache WL + BL
as well just to make the functions call

00:00:29.599 --> 00:00:29.609
as well just to make the functions call
 

00:00:29.609 --> 00:00:31.040
as well just to make the functions call
a bit easier in the programming exercise

00:00:31.040 --> 00:00:31.050
a bit easier in the programming exercise
 

00:00:31.050 --> 00:00:33.530
a bit easier in the programming exercise
and so the equations for this should

00:00:33.530 --> 00:00:33.540
and so the equations for this should
 

00:00:33.540 --> 00:00:35.900
and so the equations for this should
already look familiar the way to

00:00:35.900 --> 00:00:35.910
already look familiar the way to
 

00:00:35.910 --> 00:00:38.420
already look familiar the way to
implement a fourth function is just this

00:00:38.420 --> 00:00:38.430
implement a fourth function is just this
 

00:00:38.430 --> 00:00:46.100
implement a fourth function is just this
equals WL x a l minus 1 plus B L and

00:00:46.100 --> 00:00:46.110
equals WL x a l minus 1 plus B L and
 

00:00:46.110 --> 00:00:50.779
equals WL x a l minus 1 plus B L and
then a l equals the activation function

00:00:50.779 --> 00:00:50.789
then a l equals the activation function
 

00:00:50.789 --> 00:00:56.029
then a l equals the activation function
applied to Z and if you want a vector

00:00:56.029 --> 00:00:56.039
applied to Z and if you want a vector
 

00:00:56.039 --> 00:01:00.340
applied to Z and if you want a vector
rise implementation then it's just that

00:01:00.340 --> 00:01:00.350
rise implementation then it's just that
 

00:01:00.350 --> 00:01:06.649
rise implementation then it's just that
times a L minus 1 plus B with the be

00:01:06.649 --> 00:01:06.659
times a L minus 1 plus B with the be
 

00:01:06.659 --> 00:01:09.679
times a L minus 1 plus B with the be
adding beeping uh python for costing and

00:01:09.679 --> 00:01:09.689
adding beeping uh python for costing and
 

00:01:09.689 --> 00:01:15.050
adding beeping uh python for costing and
a l equals he applied element wise to z

00:01:15.050 --> 00:01:15.060
a l equals he applied element wise to z
 

00:01:15.060 --> 00:01:19.130
a l equals he applied element wise to z
and remember on the diagram for the

00:01:19.130 --> 00:01:19.140
and remember on the diagram for the
 

00:01:19.140 --> 00:01:20.899
and remember on the diagram for the
forth step right we had this chain of

00:01:20.899 --> 00:01:20.909
forth step right we had this chain of
 

00:01:20.909 --> 00:01:23.570
forth step right we had this chain of
bosses going forward so you initialize

00:01:23.570 --> 00:01:23.580
bosses going forward so you initialize
 

00:01:23.580 --> 00:01:28.670
bosses going forward so you initialize
that with feeding and a 0 which is equal

00:01:28.670 --> 00:01:28.680
that with feeding and a 0 which is equal
 

00:01:28.680 --> 00:01:30.920
that with feeding and a 0 which is equal
to X so you know you initialize this

00:01:30.920 --> 00:01:30.930
to X so you know you initialize this
 

00:01:30.930 --> 00:01:32.870
to X so you know you initialize this
really what is the input to the first

00:01:32.870 --> 00:01:32.880
really what is the input to the first
 

00:01:32.880 --> 00:01:36.499
really what is the input to the first
one right it's really um a zero which is

00:01:36.499 --> 00:01:36.509
one right it's really um a zero which is
 

00:01:36.509 --> 00:01:39.590
one right it's really um a zero which is
the input features to either for one

00:01:39.590 --> 00:01:39.600
the input features to either for one
 

00:01:39.600 --> 00:01:40.969
the input features to either for one
training example if you're doing one

00:01:40.969 --> 00:01:40.979
training example if you're doing one
 

00:01:40.979 --> 00:01:45.170
training example if you're doing one
example at a time or a capital zero the

00:01:45.170 --> 00:01:45.180
example at a time or a capital zero the
 

00:01:45.180 --> 00:01:46.310
example at a time or a capital zero the
entire training set if you are

00:01:46.310 --> 00:01:46.320
entire training set if you are
 

00:01:46.320 --> 00:01:48.410
entire training set if you are
processing the entire training set so

00:01:48.410 --> 00:01:48.420
processing the entire training set so
 

00:01:48.420 --> 00:01:50.899
processing the entire training set so
that's the input to the first fort

00:01:50.899 --> 00:01:50.909
that's the input to the first fort
 

00:01:50.909 --> 00:01:52.639
that's the input to the first fort
function in the chain and then just

00:01:52.639 --> 00:01:52.649
function in the chain and then just
 

00:01:52.649 --> 00:01:54.289
function in the chain and then just
repeating this allows you to compute

00:01:54.289 --> 00:01:54.299
repeating this allows you to compute
 

00:01:54.299 --> 00:01:56.420
repeating this allows you to compute
forward propagation from left to right

00:01:56.420 --> 00:01:56.430
forward propagation from left to right
 

00:01:56.430 --> 00:01:58.910
forward propagation from left to right
next let's talk about the backward

00:01:58.910 --> 00:01:58.920
next let's talk about the backward
 

00:01:58.920 --> 00:02:02.090
next let's talk about the backward
propagation step here your goes to input

00:02:02.090 --> 00:02:02.100
propagation step here your goes to input
 

00:02:02.100 --> 00:02:06.709
propagation step here your goes to input
D al and output D al minus 1 and D wo

00:02:06.709 --> 00:02:06.719
D al and output D al minus 1 and D wo
 

00:02:06.719 --> 00:02:09.440
D al and output D al minus 1 and D wo
and DB let me just write out the steps

00:02:09.440 --> 00:02:09.450
and DB let me just write out the steps
 

00:02:09.450 --> 00:02:12.839
and DB let me just write out the steps
you need to compute these things

00:02:12.839 --> 00:02:12.849
you need to compute these things
 

00:02:12.849 --> 00:02:17.759
you need to compute these things
DZ l is equal to da l alamin Weis

00:02:17.759 --> 00:02:17.769
DZ l is equal to da l alamin Weis
 

00:02:17.769 --> 00:02:24.809
DZ l is equal to da l alamin Weis
product with G of L prime Z of L and

00:02:24.809 --> 00:02:24.819
product with G of L prime Z of L and
 

00:02:24.819 --> 00:02:27.149
product with G of L prime Z of L and
then computed derivatives

00:02:27.149 --> 00:02:27.159
then computed derivatives
 

00:02:27.159 --> 00:02:34.190
then computed derivatives
DW l equals d ZL times AF l minus 1 i

00:02:34.190 --> 00:02:34.200
DW l equals d ZL times AF l minus 1 i
 

00:02:34.200 --> 00:02:36.660
DW l equals d ZL times AF l minus 1 i
didn't explicitly put that in the cache

00:02:36.660 --> 00:02:36.670
didn't explicitly put that in the cache
 

00:02:36.670 --> 00:02:38.399
didn't explicitly put that in the cache
but it turns out you need this as well

00:02:38.399 --> 00:02:38.409
but it turns out you need this as well
 

00:02:38.409 --> 00:02:46.159
but it turns out you need this as well
and then DB l is equal to DZ l and

00:02:46.159 --> 00:02:46.169
and then DB l is equal to DZ l and
 

00:02:46.169 --> 00:02:52.080
and then DB l is equal to DZ l and
finally da of L minus 1 there's equal to

00:02:52.080 --> 00:02:52.090
finally da of L minus 1 there's equal to
 

00:02:52.090 --> 00:02:59.670
finally da of L minus 1 there's equal to
WL transpose times DZ l ok and I don't

00:02:59.670 --> 00:02:59.680
WL transpose times DZ l ok and I don't
 

00:02:59.680 --> 00:03:01.349
WL transpose times DZ l ok and I don't
want to go through the detailed

00:03:01.349 --> 00:03:01.359
want to go through the detailed
 

00:03:01.359 --> 00:03:02.939
want to go through the detailed
derivation for this but it turns out

00:03:02.939 --> 00:03:02.949
derivation for this but it turns out
 

00:03:02.949 --> 00:03:04.619
derivation for this but it turns out
that if you take this definition the da

00:03:04.619 --> 00:03:04.629
that if you take this definition the da
 

00:03:04.629 --> 00:03:07.619
that if you take this definition the da
and plug it in here then you get the

00:03:07.619 --> 00:03:07.629
and plug it in here then you get the
 

00:03:07.629 --> 00:03:09.420
and plug it in here then you get the
same formula as we had in there

00:03:09.420 --> 00:03:09.430
same formula as we had in there
 

00:03:09.430 --> 00:03:13.740
same formula as we had in there
previously for how you compute DZ l as a

00:03:13.740 --> 00:03:13.750
previously for how you compute DZ l as a
 

00:03:13.750 --> 00:03:15.809
previously for how you compute DZ l as a
function of the previous DZ ow in fact

00:03:15.809 --> 00:03:15.819
function of the previous DZ ow in fact
 

00:03:15.819 --> 00:03:18.689
function of the previous DZ ow in fact
well if I just plug that in here you end

00:03:18.689 --> 00:03:18.699
well if I just plug that in here you end
 

00:03:18.699 --> 00:03:24.420
well if I just plug that in here you end
up that DZ L is equal to WL plus 1

00:03:24.420 --> 00:03:24.430
up that DZ L is equal to WL plus 1
 

00:03:24.430 --> 00:03:32.999
up that DZ L is equal to WL plus 1
transpose DZ l plus 1 times G L prime z

00:03:32.999 --> 00:03:33.009
transpose DZ l plus 1 times G L prime z
 

00:03:33.009 --> 00:03:35.640
transpose DZ l plus 1 times G L prime z
FL I know this is a looks like a lot of

00:03:35.640 --> 00:03:35.650
FL I know this is a looks like a lot of
 

00:03:35.650 --> 00:03:37.619
FL I know this is a looks like a lot of
algebra but actually double check for

00:03:37.619 --> 00:03:37.629
algebra but actually double check for
 

00:03:37.629 --> 00:03:39.390
algebra but actually double check for
yourself that this is the equation we

00:03:39.390 --> 00:03:39.400
yourself that this is the equation we
 

00:03:39.400 --> 00:03:41.550
yourself that this is the equation we
had written down for back propagation

00:03:41.550 --> 00:03:41.560
had written down for back propagation
 

00:03:41.560 --> 00:03:43.589
had written down for back propagation
last week when we were doing in your

00:03:43.589 --> 00:03:43.599
last week when we were doing in your
 

00:03:43.599 --> 00:03:45.210
last week when we were doing in your
network with just a single hidden layer

00:03:45.210 --> 00:03:45.220
network with just a single hidden layer
 

00:03:45.220 --> 00:03:47.640
network with just a single hidden layer
and as reminder this times this

00:03:47.640 --> 00:03:47.650
and as reminder this times this
 

00:03:47.650 --> 00:03:49.979
and as reminder this times this
element-wise product but so all you need

00:03:49.979 --> 00:03:49.989
element-wise product but so all you need
 

00:03:49.989 --> 00:03:52.439
element-wise product but so all you need
is those four equations to implement

00:03:52.439 --> 00:03:52.449
is those four equations to implement
 

00:03:52.449 --> 00:03:55.619
is those four equations to implement
your backward function and then finally

00:03:55.619 --> 00:03:55.629
your backward function and then finally
 

00:03:55.629 --> 00:03:57.659
your backward function and then finally
I'll just write out the vectorized

00:03:57.659 --> 00:03:57.669
I'll just write out the vectorized
 

00:03:57.669 --> 00:04:01.159
I'll just write out the vectorized
version so the first line becomes DZ l

00:04:01.159 --> 00:04:01.169
version so the first line becomes DZ l
 

00:04:01.169 --> 00:04:06.420
version so the first line becomes DZ l
equals d a o element-wise product with

00:04:06.420 --> 00:04:06.430
equals d a o element-wise product with
 

00:04:06.430 --> 00:04:12.679
equals d a o element-wise product with
GL prime of z oh maybe no surprise there

00:04:12.679 --> 00:04:12.689
GL prime of z oh maybe no surprise there
 

00:04:12.689 --> 00:04:20.060
GL prime of z oh maybe no surprise there
DW l becomes 1 over m DZ l times

00:04:20.060 --> 00:04:20.070
DW l becomes 1 over m DZ l times
 

00:04:20.070 --> 00:04:24.710
DW l becomes 1 over m DZ l times
a o minus 1 transpose and then DB l

00:04:24.710 --> 00:04:24.720
a o minus 1 transpose and then DB l
 

00:04:24.720 --> 00:04:32.870
a o minus 1 transpose and then DB l
becomes 1 over m and Peter Som DZ L then

00:04:32.870 --> 00:04:32.880
becomes 1 over m and Peter Som DZ L then
 

00:04:32.880 --> 00:04:34.690
becomes 1 over m and Peter Som DZ L then
access equals 1

00:04:34.690 --> 00:04:34.700
access equals 1
 

00:04:34.700 --> 00:04:38.480
access equals 1
keep dims equals true we talked about

00:04:38.480 --> 00:04:38.490
keep dims equals true we talked about
 

00:04:38.490 --> 00:04:42.080
keep dims equals true we talked about
the use of an Peter Som in the previous

00:04:42.080 --> 00:04:42.090
the use of an Peter Som in the previous
 

00:04:42.090 --> 00:04:46.850
the use of an Peter Som in the previous
week to compute DB and the finally da L

00:04:46.850 --> 00:04:46.860
week to compute DB and the finally da L
 

00:04:46.860 --> 00:04:55.660
week to compute DB and the finally da L
minus 1 is WL transpose times D Z of L

00:04:55.660 --> 00:04:55.670
minus 1 is WL transpose times D Z of L
 

00:04:55.670 --> 00:04:58.760
minus 1 is WL transpose times D Z of L
so this allows you to input this

00:04:58.760 --> 00:04:58.770
so this allows you to input this
 

00:04:58.770 --> 00:05:07.100
so this allows you to input this
quantity da over here and output DW l DP

00:05:07.100 --> 00:05:07.110
quantity da over here and output DW l DP
 

00:05:07.110 --> 00:05:12.490
quantity da over here and output DW l DP
l the derivatives you need as well as da

00:05:12.490 --> 00:05:12.500
l the derivatives you need as well as da
 

00:05:12.500 --> 00:05:16.580
l the derivatives you need as well as da
L minus 1 right as follows so that's how

00:05:16.580 --> 00:05:16.590
L minus 1 right as follows so that's how
 

00:05:16.590 --> 00:05:19.100
L minus 1 right as follows so that's how
you implement the backward function so

00:05:19.100 --> 00:05:19.110
you implement the backward function so
 

00:05:19.110 --> 00:05:22.600
you implement the backward function so
just to summarize um take the input X

00:05:22.600 --> 00:05:22.610
just to summarize um take the input X
 

00:05:22.610 --> 00:05:25.670
just to summarize um take the input X
you might have the first layer maybe has

00:05:25.670 --> 00:05:25.680
you might have the first layer maybe has
 

00:05:25.680 --> 00:05:29.540
you might have the first layer maybe has
a rather activation function then go to

00:05:29.540 --> 00:05:29.550
a rather activation function then go to
 

00:05:29.550 --> 00:05:31.610
a rather activation function then go to
the second layer maybe uses another

00:05:31.610 --> 00:05:31.620
the second layer maybe uses another
 

00:05:31.620 --> 00:05:33.830
the second layer maybe uses another
value activation function goes to the

00:05:33.830 --> 00:05:33.840
value activation function goes to the
 

00:05:33.840 --> 00:05:36.560
value activation function goes to the
third layer maybe has a sigmoid

00:05:36.560 --> 00:05:36.570
third layer maybe has a sigmoid
 

00:05:36.570 --> 00:05:38.090
third layer maybe has a sigmoid
activation function if you're doing

00:05:38.090 --> 00:05:38.100
activation function if you're doing
 

00:05:38.100 --> 00:05:40.910
activation function if you're doing
binary classification and this outputs y

00:05:40.910 --> 00:05:40.920
binary classification and this outputs y
 

00:05:40.920 --> 00:05:44.660
binary classification and this outputs y
hat and then using Y hat you can compute

00:05:44.660 --> 00:05:44.670
hat and then using Y hat you can compute
 

00:05:44.670 --> 00:05:47.780
hat and then using Y hat you can compute
the loss and this allows you to start

00:05:47.780 --> 00:05:47.790
the loss and this allows you to start
 

00:05:47.790 --> 00:05:50.990
the loss and this allows you to start
your backward iteration I draw the

00:05:50.990 --> 00:05:51.000
your backward iteration I draw the
 

00:05:51.000 --> 00:05:52.670
your backward iteration I draw the
arrows for us I guess I don't have to

00:05:52.670 --> 00:05:52.680
arrows for us I guess I don't have to
 

00:05:52.680 --> 00:05:57.460
arrows for us I guess I don't have to
change pens too much where you were then

00:05:57.460 --> 00:05:57.470
 

00:05:57.470 --> 00:06:02.840
have back prop compute the derivatives

00:06:02.840 --> 00:06:02.850
have back prop compute the derivatives
 

00:06:02.850 --> 00:06:13.430
have back prop compute the derivatives
compute you know DW 3 DB 3 DW 2 DP 2 DW

00:06:13.430 --> 00:06:13.440
compute you know DW 3 DB 3 DW 2 DP 2 DW
 

00:06:13.440 --> 00:06:17.930
compute you know DW 3 DB 3 DW 2 DP 2 DW
1 DB 1 and along the way you would be

00:06:17.930 --> 00:06:17.940
1 DB 1 and along the way you would be
 

00:06:17.940 --> 00:06:20.000
1 DB 1 and along the way you would be
computing I guess the cash would

00:06:20.000 --> 00:06:20.010
computing I guess the cash would
 

00:06:20.010 --> 00:06:25.140
computing I guess the cash would
transfer Z 1 Z 2 Z 3

00:06:25.140 --> 00:06:25.150
transfer Z 1 Z 2 Z 3
 

00:06:25.150 --> 00:06:30.750
transfer Z 1 Z 2 Z 3
and here you pass backward da - and da

00:06:30.750 --> 00:06:30.760
and here you pass backward da - and da
 

00:06:30.760 --> 00:06:35.219
and here you pass backward da - and da
one this could compute da zero but we

00:06:35.219 --> 00:06:35.229
one this could compute da zero but we
 

00:06:35.229 --> 00:06:36.750
one this could compute da zero but we
won't use that so you can just discard

00:06:36.750 --> 00:06:36.760
won't use that so you can just discard
 

00:06:36.760 --> 00:06:38.790
won't use that so you can just discard
that right and so this is how you

00:06:38.790 --> 00:06:38.800
that right and so this is how you
 

00:06:38.800 --> 00:06:41.210
that right and so this is how you
implement for a prop and back prop for a

00:06:41.210 --> 00:06:41.220
implement for a prop and back prop for a
 

00:06:41.220 --> 00:06:44.400
implement for a prop and back prop for a
three-layer your network now there's

00:06:44.400 --> 00:06:44.410
three-layer your network now there's
 

00:06:44.410 --> 00:06:46.350
three-layer your network now there's
just one last detail that I didn't talk

00:06:46.350 --> 00:06:46.360
just one last detail that I didn't talk
 

00:06:46.360 --> 00:06:48.420
just one last detail that I didn't talk
about which is for the forward recursion

00:06:48.420 --> 00:06:48.430
about which is for the forward recursion
 

00:06:48.430 --> 00:06:51.450
about which is for the forward recursion
we would initialize it with the input

00:06:51.450 --> 00:06:51.460
we would initialize it with the input
 

00:06:51.460 --> 00:06:53.550
we would initialize it with the input
data X how about the backward recursion

00:06:53.550 --> 00:06:53.560
data X how about the backward recursion
 

00:06:53.560 --> 00:06:59.700
data X how about the backward recursion
well it turns out that D a of L when

00:06:59.700 --> 00:06:59.710
well it turns out that D a of L when
 

00:06:59.710 --> 00:07:01.230
well it turns out that D a of L when
you're using logistic regression when

00:07:01.230 --> 00:07:01.240
you're using logistic regression when
 

00:07:01.240 --> 00:07:03.000
you're using logistic regression when
you're doing binary classification is

00:07:03.000 --> 00:07:03.010
you're doing binary classification is
 

00:07:03.010 --> 00:07:08.790
you're doing binary classification is
equal to Y over a plus 1 minus y over 1

00:07:08.790 --> 00:07:08.800
equal to Y over a plus 1 minus y over 1
 

00:07:08.800 --> 00:07:11.250
equal to Y over a plus 1 minus y over 1
minus a so turns out that the derivative

00:07:11.250 --> 00:07:11.260
minus a so turns out that the derivative
 

00:07:11.260 --> 00:07:13.350
minus a so turns out that the derivative
of the loss function with respect to the

00:07:13.350 --> 00:07:13.360
of the loss function with respect to the
 

00:07:13.360 --> 00:07:16.170
of the loss function with respect to the
output we're expected Y hat can be shown

00:07:16.170 --> 00:07:16.180
output we're expected Y hat can be shown
 

00:07:16.180 --> 00:07:18.360
output we're expected Y hat can be shown
to be equal to dis if you're familiar

00:07:18.360 --> 00:07:18.370
to be equal to dis if you're familiar
 

00:07:18.370 --> 00:07:20.490
to be equal to dis if you're familiar
with calculus if you look up the loss

00:07:20.490 --> 00:07:20.500
with calculus if you look up the loss
 

00:07:20.500 --> 00:07:22.740
with calculus if you look up the loss
function L and take derivatives respect

00:07:22.740 --> 00:07:22.750
function L and take derivatives respect
 

00:07:22.750 --> 00:07:24.779
function L and take derivatives respect
to Y hat and respect to a you can show

00:07:24.779 --> 00:07:24.789
to Y hat and respect to a you can show
 

00:07:24.789 --> 00:07:27.180
to Y hat and respect to a you can show
that you get that formula so this is the

00:07:27.180 --> 00:07:27.190
that you get that formula so this is the
 

00:07:27.190 --> 00:07:29.520
that you get that formula so this is the
formula that you should use for da for

00:07:29.520 --> 00:07:29.530
formula that you should use for da for
 

00:07:29.530 --> 00:07:32.700
formula that you should use for da for
the final layer capital L and of course

00:07:32.700 --> 00:07:32.710
the final layer capital L and of course
 

00:07:32.710 --> 00:07:34.620
the final layer capital L and of course
if you were to have a vectorized

00:07:34.620 --> 00:07:34.630
if you were to have a vectorized
 

00:07:34.630 --> 00:07:36.960
if you were to have a vectorized
implementation then you initialize the

00:07:36.960 --> 00:07:36.970
implementation then you initialize the
 

00:07:36.970 --> 00:07:39.270
implementation then you initialize the
backward recursion not with this there

00:07:39.270 --> 00:07:39.280
backward recursion not with this there
 

00:07:39.280 --> 00:07:43.080
backward recursion not with this there
will be a capital A for the layer L

00:07:43.080 --> 00:07:43.090
will be a capital A for the layer L
 

00:07:43.090 --> 00:07:45.330
will be a capital A for the layer L
which is going to be you know the same

00:07:45.330 --> 00:07:45.340
which is going to be you know the same
 

00:07:45.340 --> 00:07:48.990
which is going to be you know the same
thing for the different examples right

00:07:48.990 --> 00:07:49.000
thing for the different examples right
 

00:07:49.000 --> 00:07:51.930
thing for the different examples right
over a for the first training example

00:07:51.930 --> 00:07:51.940
over a for the first training example
 

00:07:51.940 --> 00:07:54.870
over a for the first training example
plus 1 minus y for the first training

00:07:54.870 --> 00:07:54.880
plus 1 minus y for the first training
 

00:07:54.880 --> 00:07:57.510
plus 1 minus y for the first training
example over 1 minus a for the first

00:07:57.510 --> 00:07:57.520
example over 1 minus a for the first
 

00:07:57.520 --> 00:08:01.020
example over 1 minus a for the first
training example both on top down to the

00:08:01.020 --> 00:08:01.030
training example both on top down to the
 

00:08:01.030 --> 00:08:02.879
training example both on top down to the
M training example

00:08:02.879 --> 00:08:02.889
M training example
 

00:08:02.889 --> 00:08:06.180
M training example
so 1 minus a of them so that's how you

00:08:06.180 --> 00:08:06.190
so 1 minus a of them so that's how you
 

00:08:06.190 --> 00:08:09.480
so 1 minus a of them so that's how you
to implement the vectorized version

00:08:09.480 --> 00:08:09.490
to implement the vectorized version
 

00:08:09.490 --> 00:08:11.490
to implement the vectorized version
that's how you initialize the vectorized

00:08:11.490 --> 00:08:11.500
that's how you initialize the vectorized
 

00:08:11.500 --> 00:08:13.680
that's how you initialize the vectorized
version of backpropagation so you've now

00:08:13.680 --> 00:08:13.690
version of backpropagation so you've now
 

00:08:13.690 --> 00:08:15.960
version of backpropagation so you've now
seen the basic building blocks of both

00:08:15.960 --> 00:08:15.970
seen the basic building blocks of both
 

00:08:15.970 --> 00:08:18.300
seen the basic building blocks of both
for propagation as well as back

00:08:18.300 --> 00:08:18.310
for propagation as well as back
 

00:08:18.310 --> 00:08:21.689
for propagation as well as back
propagation now if you implement these

00:08:21.689 --> 00:08:21.699
propagation now if you implement these
 

00:08:21.699 --> 00:08:23.460
propagation now if you implement these
equations you will get a correct

00:08:23.460 --> 00:08:23.470
equations you will get a correct
 

00:08:23.470 --> 00:08:25.920
equations you will get a correct
implementation for prop and back prop to

00:08:25.920 --> 00:08:25.930
implementation for prop and back prop to
 

00:08:25.930 --> 00:08:27.779
implementation for prop and back prop to
get you the derivatives you need you

00:08:27.779 --> 00:08:27.789
get you the derivatives you need you
 

00:08:27.789 --> 00:08:29.070
get you the derivatives you need you
might be thinking wow those are all

00:08:29.070 --> 00:08:29.080
might be thinking wow those are all
 

00:08:29.080 --> 00:08:30.719
might be thinking wow those are all
equations I'm slightly confused I'm not

00:08:30.719 --> 00:08:30.729
equations I'm slightly confused I'm not
 

00:08:30.729 --> 00:08:32.339
equations I'm slightly confused I'm not
quite sure I see how this works and if

00:08:32.339 --> 00:08:32.349
quite sure I see how this works and if
 

00:08:32.349 --> 00:08:34.260
quite sure I see how this works and if
you're feeling that way my advice is

00:08:34.260 --> 00:08:34.270
you're feeling that way my advice is
 

00:08:34.270 --> 00:08:37.170
you're feeling that way my advice is
when you get to this week's programming

00:08:37.170 --> 00:08:37.180
when you get to this week's programming
 

00:08:37.180 --> 00:08:39.660
when you get to this week's programming
you will be able to implement these for

00:08:39.660 --> 00:08:39.670
you will be able to implement these for
 

00:08:39.670 --> 00:08:41.190
you will be able to implement these for
yourself and there'll be much more

00:08:41.190 --> 00:08:41.200
yourself and there'll be much more
 

00:08:41.200 --> 00:08:42.990
yourself and there'll be much more
concrete and I know there was a lot of

00:08:42.990 --> 00:08:43.000
concrete and I know there was a lot of
 

00:08:43.000 --> 00:08:45.000
concrete and I know there was a lot of
equations and maybe some of equations

00:08:45.000 --> 00:08:45.010
equations and maybe some of equations
 

00:08:45.010 --> 00:08:47.670
equations and maybe some of equations
didn't make complete sense but if you

00:08:47.670 --> 00:08:47.680
didn't make complete sense but if you
 

00:08:47.680 --> 00:08:49.530
didn't make complete sense but if you
work through the calculus and the linear

00:08:49.530 --> 00:08:49.540
work through the calculus and the linear
 

00:08:49.540 --> 00:08:51.540
work through the calculus and the linear
algebra which is not easy so you know

00:08:51.540 --> 00:08:51.550
algebra which is not easy so you know
 

00:08:51.550 --> 00:08:53.070
algebra which is not easy so you know
feel free to try but that's actually a

00:08:53.070 --> 00:08:53.080
feel free to try but that's actually a
 

00:08:53.080 --> 00:08:55.260
feel free to try but that's actually a
bundle more difficult derivations in

00:08:55.260 --> 00:08:55.270
bundle more difficult derivations in
 

00:08:55.270 --> 00:08:57.000
bundle more difficult derivations in
machine learning it turns out the

00:08:57.000 --> 00:08:57.010
machine learning it turns out the
 

00:08:57.010 --> 00:08:59.130
machine learning it turns out the
equations roll down at just the calculus

00:08:59.130 --> 00:08:59.140
equations roll down at just the calculus
 

00:08:59.140 --> 00:09:01.080
equations roll down at just the calculus
equations for computing the derivatives

00:09:01.080 --> 00:09:01.090
equations for computing the derivatives
 

00:09:01.090 --> 00:09:03.300
equations for computing the derivatives
especially in background but once again

00:09:03.300 --> 00:09:03.310
especially in background but once again
 

00:09:03.310 --> 00:09:04.830
especially in background but once again
if this feels a little bit abstract a

00:09:04.830 --> 00:09:04.840
if this feels a little bit abstract a
 

00:09:04.840 --> 00:09:06.690
if this feels a little bit abstract a
little bit mysterious to you my advice

00:09:06.690 --> 00:09:06.700
little bit mysterious to you my advice
 

00:09:06.700 --> 00:09:08.910
little bit mysterious to you my advice
is when you've done their prime exercise

00:09:08.910 --> 00:09:08.920
is when you've done their prime exercise
 

00:09:08.920 --> 00:09:11.180
is when you've done their prime exercise
it will feel a bit more concrete to you

00:09:11.180 --> 00:09:11.190
it will feel a bit more concrete to you
 

00:09:11.190 --> 00:09:13.320
it will feel a bit more concrete to you
although I have to say you know even

00:09:13.320 --> 00:09:13.330
although I have to say you know even
 

00:09:13.330 --> 00:09:15.210
although I have to say you know even
today when I implement a learning

00:09:15.210 --> 00:09:15.220
today when I implement a learning
 

00:09:15.220 --> 00:09:17.730
today when I implement a learning
algorithm sometimes even I'm surprised

00:09:17.730 --> 00:09:17.740
algorithm sometimes even I'm surprised
 

00:09:17.740 --> 00:09:18.780
algorithm sometimes even I'm surprised
when my learning algorithm

00:09:18.780 --> 00:09:18.790
when my learning algorithm
 

00:09:18.790 --> 00:09:20.310
when my learning algorithm
implementation works and it's because

00:09:20.310 --> 00:09:20.320
implementation works and it's because
 

00:09:20.320 --> 00:09:22.410
implementation works and it's because
lot of the complexity of machine

00:09:22.410 --> 00:09:22.420
lot of the complexity of machine
 

00:09:22.420 --> 00:09:24.360
lot of the complexity of machine
learning comes from the j-turn rather

00:09:24.360 --> 00:09:24.370
learning comes from the j-turn rather
 

00:09:24.370 --> 00:09:26.220
learning comes from the j-turn rather
than from the lines of code so sometimes

00:09:26.220 --> 00:09:26.230
than from the lines of code so sometimes
 

00:09:26.230 --> 00:09:28.170
than from the lines of code so sometimes
you feel like you implement a few lines

00:09:28.170 --> 00:09:28.180
you feel like you implement a few lines
 

00:09:28.180 --> 00:09:30.210
you feel like you implement a few lines
of code not question what it did but

00:09:30.210 --> 00:09:30.220
of code not question what it did but
 

00:09:30.220 --> 00:09:31.680
of code not question what it did but
there's almost magically works and

00:09:31.680 --> 00:09:31.690
there's almost magically works and
 

00:09:31.690 --> 00:09:33.450
there's almost magically works and
because of all the magic is actually not

00:09:33.450 --> 00:09:33.460
because of all the magic is actually not
 

00:09:33.460 --> 00:09:35.580
because of all the magic is actually not
in the piece of code you write which is

00:09:35.580 --> 00:09:35.590
in the piece of code you write which is
 

00:09:35.590 --> 00:09:37.350
in the piece of code you write which is
often you know not too long it's not

00:09:37.350 --> 00:09:37.360
often you know not too long it's not
 

00:09:37.360 --> 00:09:39.120
often you know not too long it's not
it's not exactly simple but there's not

00:09:39.120 --> 00:09:39.130
it's not exactly simple but there's not
 

00:09:39.130 --> 00:09:41.370
it's not exactly simple but there's not
you know ten thousand a hundred thousand

00:09:41.370 --> 00:09:41.380
you know ten thousand a hundred thousand
 

00:09:41.380 --> 00:09:43.230
you know ten thousand a hundred thousand
lines of code but you feed it so much

00:09:43.230 --> 00:09:43.240
lines of code but you feed it so much
 

00:09:43.240 --> 00:09:45.660
lines of code but you feed it so much
data that sometimes even don't work the

00:09:45.660 --> 00:09:45.670
data that sometimes even don't work the
 

00:09:45.670 --> 00:09:46.650
data that sometimes even don't work the
machine learning for a long time

00:09:46.650 --> 00:09:46.660
machine learning for a long time
 

00:09:46.660 --> 00:09:48.990
machine learning for a long time
sometimes it's so you know surprises me

00:09:48.990 --> 00:09:49.000
sometimes it's so you know surprises me
 

00:09:49.000 --> 00:09:50.370
sometimes it's so you know surprises me
a bit when my learning algorithm works

00:09:50.370 --> 00:09:50.380
a bit when my learning algorithm works
 

00:09:50.380 --> 00:09:52.410
a bit when my learning algorithm works
because a lot of the complexity of your

00:09:52.410 --> 00:09:52.420
because a lot of the complexity of your
 

00:09:52.420 --> 00:09:54.600
because a lot of the complexity of your
learning algorithm comes from the data

00:09:54.600 --> 00:09:54.610
learning algorithm comes from the data
 

00:09:54.610 --> 00:09:57.420
learning algorithm comes from the data
rather than necessarily from your

00:09:57.420 --> 00:09:57.430
rather than necessarily from your
 

00:09:57.430 --> 00:09:59.430
rather than necessarily from your
writing you know thousands and thousands

00:09:59.430 --> 00:09:59.440
writing you know thousands and thousands
 

00:09:59.440 --> 00:10:03.270
writing you know thousands and thousands
of lines of code all right so that's um

00:10:03.270 --> 00:10:03.280
of lines of code all right so that's um
 

00:10:03.280 --> 00:10:05.880
of lines of code all right so that's um
how you implement deep neural networks

00:10:05.880 --> 00:10:05.890
how you implement deep neural networks
 

00:10:05.890 --> 00:10:07.230
how you implement deep neural networks
in the game this will become more

00:10:07.230 --> 00:10:07.240
in the game this will become more
 

00:10:07.240 --> 00:10:08.880
in the game this will become more
concrete when you've done their primary

00:10:08.880 --> 00:10:08.890
concrete when you've done their primary
 

00:10:08.890 --> 00:10:12.210
concrete when you've done their primary
exercise before moving on I want to

00:10:12.210 --> 00:10:12.220
exercise before moving on I want to
 

00:10:12.220 --> 00:10:14.580
exercise before moving on I want to
discuss in the next video want to

00:10:14.580 --> 00:10:14.590
discuss in the next video want to
 

00:10:14.590 --> 00:10:17.040
discuss in the next video want to
discuss hyper parameters and parameters

00:10:17.040 --> 00:10:17.050
discuss hyper parameters and parameters
 

00:10:17.050 --> 00:10:18.870
discuss hyper parameters and parameters
it turns out that when you're training

00:10:18.870 --> 00:10:18.880
it turns out that when you're training
 

00:10:18.880 --> 00:10:20.940
it turns out that when you're training
deep nets being able to organize your

00:10:20.940 --> 00:10:20.950
deep nets being able to organize your
 

00:10:20.950 --> 00:10:22.950
deep nets being able to organize your
hyper parameters as well will help you

00:10:22.950 --> 00:10:22.960
hyper parameters as well will help you
 

00:10:22.960 --> 00:10:24.690
hyper parameters as well will help you
be more efficient in developing your

00:10:24.690 --> 00:10:24.700
be more efficient in developing your
 

00:10:24.700 --> 00:10:26.670
be more efficient in developing your
networks in the next video let's talk

00:10:26.670 --> 00:10:26.680
networks in the next video let's talk
 

00:10:26.680 --> 00:10:29.970
networks in the next video let's talk
about exactly what that means

