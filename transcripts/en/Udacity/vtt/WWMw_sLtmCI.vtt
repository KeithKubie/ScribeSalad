WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
For homework 5, what I asked you to do is add .json to the URLs

00:00:06.000 --> 00:00:09.000
and have the response return JSON.

00:00:09.000 --> 00:00:12.000
You can see here we've got the JSON response for the first entry--

00:00:12.000 --> 00:00:16.000
content and created, and it's got our date and last_modified and subject.

00:00:16.000 --> 00:00:18.000
It's got the text in there.

00:00:18.000 --> 00:00:23.000
If we were to go to a permalink for a particular blog entry and add JSON to that,

00:00:23.000 --> 00:00:26.000
we'd see JSON for that one entry.

00:00:26.000 --> 00:00:29.000
Let's take a look at the code that makes all this work.

00:00:29.000 --> 00:00:33.000
Here we are in our code. We're in the URL handler portion of things.

00:00:33.000 --> 00:00:40.000
I've changed our two URL handlers for blog to look for .json at the end of the URL.

00:00:40.000 --> 00:00:44.000
There are a couple ways of doing this, of checking to see.

00:00:44.000 --> 00:00:48.000
You could have made special handlers for JSON urls. That's fine.

00:00:48.000 --> 00:00:52.000
I chose to do it this way, and this is just some regular expression syntax to--

00:00:52.000 --> 00:00:55.000
basically the parentheses say look for this group of things,

00:00:55.000 --> 00:01:01.000
but this question mark colon says, and don't send it as a parameter into the handler

00:01:01.000 --> 00:01:04.000
like this set of parentheses does--remember--for the permalinks.

00:01:04.000 --> 00:01:11.000
This just says match /blog/ a number and optionally it can end in .json.

00:01:11.000 --> 00:01:17.000
We did that also on this one. This says match /blog/--that last slash is optional.

00:01:17.000 --> 00:01:19.000
That's what that question mark does.

00:01:19.000 --> 00:01:22.000
Then optionally the string .json.

00:01:22.000 --> 00:01:26.000
Actually, what this matches is any character JSON.

00:01:26.000 --> 00:01:29.000
These regular expressions should actually have slashes in them.

00:01:29.000 --> 00:01:32.000
Probably nobody will notice, and it's a bug that doesn't really hurt anybody.

00:01:32.000 --> 00:01:35.000
Anyway--there it is. Another bug in the wild.

00:01:35.000 --> 00:01:40.000
Anyway, let's look at the changes to the handlers that I needed to make.

00:01:40.000 --> 00:01:42.000
So remember we have blog handler.

00:01:42.000 --> 00:01:47.000
This is our class that is kind of the super class for all of our handlers that has all this handy stuff in it.

00:01:47.000 --> 00:01:49.000
I changed this initialized function.

00:01:49.000 --> 00:01:53.000
It's still looking up the users as before from the previous homework.

00:01:53.000 --> 00:01:57.000
Now I check to see if the request URL ends with .json.

00:01:57.000 --> 00:02:00.000
We're going to set on itself the format is JSON.

00:02:00.000 --> 00:02:03.000
Otherwise the format is going to be HTML.

00:02:03.000 --> 00:02:05.000
There are certainly better ways to do this

00:02:05.000 --> 00:02:09.000
if you had a much more complicated site where every page can be in HTML and JSON,

00:02:09.000 --> 00:02:13.000
but for our purposes for this homework, this'll work just fine.

00:02:13.000 --> 00:02:16.000
Then we go into our blog handlers where we're actually outputting the blog,

00:02:16.000 --> 00:02:19.000
and we need to just check out what the format should be.

00:02:19.000 --> 00:02:23.000
Another thing I added is on the post objects, we've got our render function,

00:02:23.000 --> 00:02:26.000
which returns the post in HTML.

00:02:26.000 --> 00:02:29.000
This is what we had before, using the templates.

00:02:29.000 --> 00:02:31.000
We don't need templates for JSON.

00:02:31.000 --> 00:02:35.000
What I do here is instead I create a dictionary representation of the post itself.

00:02:35.000 --> 00:02:40.000
This is a format string--this variable here, %c--which basically says print the date nicely

00:02:40.000 --> 00:02:43.000
and whatever locale you're in.

00:02:43.000 --> 00:02:47.000
We use that down here for the created and last_modified fields in this dictionary.

00:02:47.000 --> 00:02:53.000
Created equals self.created.strftime and then that time format string.

00:02:53.000 --> 00:02:58.000
We could put in lots of different format strings to make this date printout however you like.

00:02:58.000 --> 00:03:00.000
I just used %c. That's quick.

00:03:00.000 --> 00:03:03.000
Then I'll, of course, include the subject and the content in this dictionary.

00:03:03.000 --> 00:03:05.000
Why do we convert it to a dictionary?

00:03:05.000 --> 00:03:11.000
Because the JSON library in Python expects datatypes that it knows how to convert into JSON,

00:03:11.000 --> 00:03:16.000
which are lists, dictionaries, integers, floats, strings--that sort of thing.

00:03:16.000 --> 00:03:19.000
Actually the JSON library in Python doesn't know what a post object is.

00:03:19.000 --> 00:03:22.000
It doesn't know how to convert that to JSON.

00:03:22.000 --> 00:03:25.000
We create a dictionary representation of our object first,

00:03:25.000 --> 00:03:27.000
and then we can pass that into JSON later.

00:03:27.000 --> 00:03:31.000
If we come down here to the front page of our blog handler

00:03:31.000 --> 00:03:34.000
where we look up all the posts, I have a function now called get_posts(),

00:03:34.000 --> 00:03:41.000
which does some fancy things to prevent you guys from filling by blog with spam.

00:03:41.000 --> 00:03:44.000
I'm trying to avoid showing you that code.

00:03:44.000 --> 00:03:46.000
This used to be the SQL query.

00:03:46.000 --> 00:03:50.000
Here we check to see if the format is HTML, we call the front page template.

00:03:50.000 --> 00:03:53.000
This is old code. Otherwise, we assume it's JSON.

00:03:53.000 --> 00:03:56.000
This could probably be else if to be safe.

00:03:56.000 --> 00:04:00.000
We're going to call this render_json() function, which is defined above,

00:04:00.000 --> 00:04:02.000
and I'll show you that in a moment.

00:04:02.000 --> 00:04:09.000
Basically what it does is it takes a list of each post p, for p in "post," as a dictionary,

00:04:09.000 --> 00:04:12.000
calling this as_dict() function on each post.

00:04:12.000 --> 00:04:14.000
Then we'll render JSON.

00:04:14.000 --> 00:04:19.000
Here we are in the permalink handler for a particular blog post.

00:04:19.000 --> 00:04:23.000
We call that PostPage. This takes a parameter called "post_id."

00:04:23.000 --> 00:04:25.000
That comes in from the URL. We saw this in the previous homework.

00:04:25.000 --> 00:04:27.000
We just look up the post.

00:04:27.000 --> 00:04:29.000
If the post isn't there, we 404.

00:04:29.000 --> 00:04:35.000
If its format is basically else--if it's format HTML--use the HTML template.

00:04:35.000 --> 00:04:40.000
Otherwise, call self.render_json(), that post as a dictionary. Simple enough.

00:04:40.000 --> 00:04:44.000
The only function we haven't talked about yet is render_json(), and let's go find that.

00:04:44.000 --> 00:04:46.000
That's up above.

00:04:46.000 --> 00:04:48.000
Here we are in our blog handler again.

00:04:48.000 --> 00:04:50.000
One function I forgot to point out I added.

00:04:50.000 --> 00:04:53.000
We've got our write and our render_str and our render function,

00:04:53.000 --> 00:04:56.000
which is for rendering a template or for sending a template over the wire.

00:04:56.000 --> 00:05:02.000
I also added a render_json(), and what this does is this takes a d--

00:05:02.000 --> 00:05:06.000
I meant to kind of refer to dictionary, but actually in this case sometimes

00:05:06.000 --> 00:05:08.000
it's a dictionary and sometimes it's a list.

00:05:08.000 --> 00:05:12.000
It could be anything that is valid JSON. We use the JSON library in Python.

00:05:12.000 --> 00:05:15.000
We just imported that with import JSON.

00:05:15.000 --> 00:05:20.000
We get the JSON representation of this Python data structure by calling dumps.

00:05:20.000 --> 00:05:23.000
You did this in some of the quiz problems.

00:05:23.000 --> 00:05:29.000
Then we set the content type to application/json, and then we render our JSON text.

00:05:29.000 --> 00:05:31.000
And that's it. That's the homework.

00:05:31.000 --> 00:05:34.000
Not actually a whole lot of code, but a lot of little things you needed to figure out.

00:05:34.000 --> 00:05:38.000
I kind of realized after doing the solutions for homework 3 and 4

00:05:38.000 --> 00:05:42.000
that maybe you needed a more straightforward one.

00:05:42.000 --> 00:05:45.000
There you go--now your blog supports HTML

00:05:45.000 --> 00:05:49.000
and other people can download JSON versions of your blog if they want to write little tools

00:05:49.000 --> 00:05:51.000
on top of it, which would be pretty cool.

00:05:51.000 --> 00:05:53.980
Good job, and we'll see you next week.

