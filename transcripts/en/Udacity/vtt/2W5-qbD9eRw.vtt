WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
That's the whole compiler.

00:00:03.000 --> 00:00:07.000
I want to show you just a little bit of the possibility of doing some compiler optimizations.

00:00:07.000 --> 00:00:11.000
Notice this sort of barrier here where we introduce lambda, where we introduce a function.

00:00:11.000 --> 00:00:14.000
Remember I said that there's two parts to a compiler.

00:00:14.000 --> 00:00:17.000
There's the part where we're first defining a language.

00:00:17.000 --> 00:00:20.000
When we call lit and give it a string,

00:00:20.000 --> 00:00:23.000
then we're doing some work to build up this function that's going to do the work

00:00:23.000 --> 00:00:25.000
every time we call it again.

00:00:25.000 --> 00:00:29.000
Anything that's on the right of the lambda is stuff that gets done every time.

00:00:29.000 --> 00:00:33.000
Anything that's to the left is stuff that gets done only once.

00:00:33.000 --> 00:00:38.000
Notice that there is a part here building up this set of s that I'm doing every time,

00:00:38.000 --> 00:00:41.000
but that's wasteful because s doesn't depend on the input.

00:00:41.000 --> 00:00:44.000
S is always going to be the same.

00:00:44.000 --> 00:00:50.000
I can pull this out and do it at compile time rather than do it every time we call the resulting function.

00:00:50.000 --> 00:00:57.000
I'll make this set&lt;u&gt;of&lt;u&gt;s and I'll give that a name--set&lt;u&gt;of&lt;u&gt;s.&lt;/u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/u&gt;

00:00:57.000 --> 00:01:02.000
Over here I'll do set&lt;u&gt;of&lt;u&gt;s equals that value.&lt;/u&gt;&lt;/u&gt;

00:01:02.000 --> 00:01:05.000
It looks like I'd better break this up into multiple lines.

00:01:05.000 --> 00:01:11.000
Now I pulled out that precomputation so it only gets done once rather than gets done every time.

00:01:11.000 --> 00:01:13.000
You could look around for other places to do that.

00:01:13.000 --> 00:01:17.000
I could pull out the computation of this set of characters

00:01:17.000 --> 00:01:19.000
and do that only once as well.

00:01:19.000 --> 00:01:23.000
That's a lifting operation that stops us from repeating over and over again

00:01:23.000 --> 00:01:25.000
what we only need to do once.

00:01:25.000 --> 00:01:28.000
That's one of the advantages of having a compiler in the loop.

00:01:28.000 --> 99:59:59.000
There is a place to do something once rather than to have to repeat it every time.

