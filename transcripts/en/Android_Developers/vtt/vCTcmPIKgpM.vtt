WEBVTT
Kind: captions
Language: en

00:00:05.850 --> 00:00:07.410
CHET HAASE: Hi, I'm Chet Haase,
an engineer on the

00:00:07.410 --> 00:00:08.890
Android team at Google.

00:00:08.890 --> 00:00:11.440
I work on graphics and
animations, and today I wanted

00:00:11.440 --> 00:00:13.380
to talk a little
bit about that.

00:00:13.380 --> 00:00:15.690
Specifically, I want to talk
about Value Animator and

00:00:15.690 --> 00:00:17.870
Object Animator, and how you
can get different kinds of

00:00:17.870 --> 00:00:19.580
movement on the screen.

00:00:19.580 --> 00:00:21.960
So let's take a look
at a quick demo.

00:00:21.960 --> 00:00:25.370
I call this "Bouncer." I have
my little electric sheep at

00:00:25.370 --> 00:00:27.720
the top of the screen, and I
click on the screen, and a

00:00:27.720 --> 00:00:30.620
sheep moves down, in a very
boring fashion, to the bottom

00:00:30.620 --> 00:00:31.610
the screen.

00:00:31.610 --> 00:00:34.900
Not much of a bounce, so let's
take a look at another

00:00:34.900 --> 00:00:40.100
variation, which I call
"Bouncer One."

00:00:40.100 --> 00:00:43.830
So we run bounder one, and now
we're actually going back up

00:00:43.830 --> 00:00:46.630
to the top the screen, which
is a good start.

00:00:46.630 --> 00:00:48.940
It's actually continuing to
move, which is kind of what

00:00:48.940 --> 00:00:49.810
bouncing is about.

00:00:49.810 --> 00:00:51.360
But it's got this weird, linear

00:00:51.360 --> 00:00:53.450
oscillation thing going on.

00:00:53.450 --> 00:00:56.130
So let's see if we can
do a little better.

00:00:56.130 --> 00:00:59.570
We have this other variation,
which I call "Bouncer Two,"

00:00:59.570 --> 00:01:01.470
and I can click that, and all
of a sudden, we've got a

00:01:01.470 --> 00:01:02.150
bouncing motion.

00:01:02.150 --> 00:01:05.880
So we'll see how we create that
with one line of code.

00:01:05.880 --> 00:01:09.340
And finally, we've got this
other variation called

00:01:09.340 --> 00:01:11.490
"Bouncer Three," which is
going to look remarkably

00:01:11.490 --> 00:01:13.160
similar to bouncer two.

00:01:13.160 --> 00:01:16.520
We've got the same bouncing,
gravity motion going on there.

00:01:16.520 --> 00:01:19.490
The interesting part is in the
code, and how that one was

00:01:19.490 --> 00:01:21.700
created using a different
kind of animator.

00:01:21.700 --> 00:01:24.790
So let's look at the code now.

00:01:24.790 --> 00:01:28.710
So we've got this bouncer file,
go up to the top of it.

00:01:28.710 --> 00:01:31.390
You've got this activity called
"bouncer." We have a

00:01:31.390 --> 00:01:33.730
custom view, where we're going
to be drawing this sheep, as

00:01:33.730 --> 00:01:35.420
it moves around on the screen.

00:01:35.420 --> 00:01:38.010
And here we have a set
up shape, where

00:01:38.010 --> 00:01:39.130
we decode this resource.

00:01:39.130 --> 00:01:42.200
So this is the electric sheep
thing that I spent hours and

00:01:42.200 --> 00:01:44.480
hours drawing, because it's
such complex art.

00:01:44.480 --> 00:01:48.000
We get the width and height of
this thing, to position it

00:01:48.000 --> 00:01:52.220
appropriately later, so we can
center it in the screen.

00:01:52.220 --> 00:01:55.450
As we change the position
properties of this sheep-- to

00:01:55.450 --> 00:01:58.760
put it in the center of the
screen, or to move it down and

00:01:58.760 --> 00:02:00.870
back up the screen during
the animations--

00:02:00.870 --> 00:02:04.490
we call these setters, set
shape x and set shape y.

00:02:04.490 --> 00:02:07.420
And this one basically figures
out-- the only reason there's

00:02:07.420 --> 00:02:10.780
any complex code in here at
all is because we need to

00:02:10.780 --> 00:02:13.080
invalidate the correct area,
so that we erase where the

00:02:13.080 --> 00:02:16.150
sheep was, and then draw the
sheep in the correct area.

00:02:16.150 --> 00:02:18.470
Otherwise, we're going to leave
litter artifacts all

00:02:18.470 --> 00:02:20.080
over the screen, if we're
not a racing correctly.

00:02:20.080 --> 00:02:23.480
Or, if we just do an invalidate
of the entire view,

00:02:23.480 --> 00:02:25.530
then we're basically going to
be doing too much work,

00:02:25.530 --> 00:02:29.500
because there's no reason to
erase the entire view, if all

00:02:29.500 --> 00:02:32.320
you did was move the sheep
from here to here.

00:02:32.320 --> 00:02:35.600
So we get the union rectangle,
and we invalidate

00:02:35.600 --> 00:02:35.875
appropriately.

00:02:35.875 --> 00:02:38.830
And we do this for both
of the setters here.

00:02:38.830 --> 00:02:41.530
On Size Change, this allows
us to center the sheep

00:02:41.530 --> 00:02:43.740
appropriately when the size
of the window changes.

00:02:43.740 --> 00:02:47.310
And On Draw is where all of the
magic happens for actually

00:02:47.310 --> 00:02:48.740
drawing the sheep
on the screen.

00:02:48.740 --> 00:02:52.720
We simply draw the bit map at
the shape x and shape why

00:02:52.720 --> 00:02:55.040
properties that were
set before.

00:02:55.040 --> 00:02:57.880
For running the animation, we
have the Start Animation

00:02:57.880 --> 00:03:01.340
method here, that gets called
when you click on the thing.

00:03:01.340 --> 00:03:04.450
And we create a Value
Animator Object.

00:03:04.450 --> 00:03:07.070
And this is one of the new
classes that was created in

00:03:07.070 --> 00:03:11.410
the 3.0 release, part of an
overall, more robust timing

00:03:11.410 --> 00:03:12.610
and animation engine.

00:03:12.610 --> 00:03:16.360
Value animation animator is
basically the timing, the meat

00:03:16.360 --> 00:03:18.630
of the entire animation
package.

00:03:18.630 --> 00:03:23.590
It's the timing engine behind
Object Animator, Animator Set,

00:03:23.590 --> 00:03:26.030
and View Property Animator, and
we'll see all of these in

00:03:26.030 --> 00:03:27.720
future episodes.

00:03:27.720 --> 00:03:31.350
And all it is, is a timing
mechanism, a timing and value

00:03:31.350 --> 00:03:32.590
calculation mechanism.

00:03:32.590 --> 00:03:34.060
Doesn't know about views,
doesn't know

00:03:34.060 --> 00:03:35.030
about objects at all.

00:03:35.030 --> 00:03:40.460
All it knows how to do is to
calculate values, based on

00:03:40.460 --> 00:03:43.240
parameters that you give it
for the start and the end

00:03:43.240 --> 00:03:46.440
values, as well as durations,
and other properties which

00:03:46.440 --> 00:03:47.400
we'll see today.

00:03:47.400 --> 00:03:49.200
So we create this value
animator by

00:03:49.200 --> 00:03:50.440
calling Get Value Animator.

00:03:50.440 --> 00:03:54.040
This comes down here and says
Value Animator.offloat, and

00:03:54.040 --> 00:03:57.640
this is going to calculate
animation values between a

00:03:57.640 --> 00:04:00.690
starting value of zero, and
an ending value of one.

00:04:00.690 --> 00:04:02.160
And then we add an
update listener.

00:04:02.160 --> 00:04:05.460
And if you use Value Animator,
which is a more manual way of

00:04:05.460 --> 00:04:08.220
doing an animation, then you
probably want to have an

00:04:08.220 --> 00:04:08.890
update listener.

00:04:08.890 --> 00:04:10.940
And that's will get called on
every frame in the animation,

00:04:10.940 --> 00:04:14.530
and then you can do whatever you
want to with the values.

00:04:14.530 --> 00:04:16.570
So every time we get a call--

00:04:16.570 --> 00:04:18.540
let me reposition this code
a little bit, so you can

00:04:18.540 --> 00:04:20.829
actually see it on
the screen--

00:04:20.829 --> 00:04:23.960
on Animation Update, we get a
reference to the animation

00:04:23.960 --> 00:04:25.160
object itself.

00:04:25.160 --> 00:04:28.640
And then we can get the animated
fraction, so we can

00:04:28.640 --> 00:04:33.120
find out between value of zero
and one, what is the current

00:04:33.120 --> 00:04:34.750
animation fraction?

00:04:34.750 --> 00:04:36.720
And we could also get the
animated value at

00:04:36.720 --> 00:04:37.670
that time if we wanted.

00:04:37.670 --> 00:04:39.940
Here, we're just going between
zero and one, it doesn't

00:04:39.940 --> 00:04:40.380
really matter.

00:04:40.380 --> 00:04:42.800
And we basically use that
animation fraction, between

00:04:42.800 --> 00:04:45.470
zero and one, to affect the
height of the sheep.

00:04:45.470 --> 00:04:47.460
So we basically want to move the
sheep from the top of the

00:04:47.460 --> 00:04:50.000
screen, down to the bottom of
the screen, minus the height

00:04:50.000 --> 00:04:50.890
of the sheep.

00:04:50.890 --> 00:04:54.070
So we're going to take the zero
and one factors that we

00:04:54.070 --> 00:04:56.960
get during the animation itself,
and simply apply that

00:04:56.960 --> 00:05:01.050
directly as a proportion
of the height at which

00:05:01.050 --> 00:05:02.690
the sheep is drawn.

00:05:02.690 --> 00:05:04.520
And that's all to bouncer.

00:05:04.520 --> 00:05:06.860
So it gets a little bit more
interesting once we start

00:05:06.860 --> 00:05:08.560
adding actual bouncing
capabilities.

00:05:08.560 --> 00:05:11.310
All this one does is animate the
thing down to the bottom

00:05:11.310 --> 00:05:14.790
of the screen in a very
boring fashion.

00:05:14.790 --> 00:05:18.480
Bouncer one is a way to do
that with a little bit of

00:05:18.480 --> 00:05:19.050
repetition.

00:05:19.050 --> 00:05:21.270
This is the one that oscillated
down to the bottom

00:05:21.270 --> 00:05:22.730
of the screen and
then back up.

00:05:22.730 --> 00:05:24.880
So here, we get Value
Animator, same

00:05:24.880 --> 00:05:26.620
exact thing going on.

00:05:26.620 --> 00:05:29.660
But we also set a repeat count
of infinite, which means it's

00:05:29.660 --> 00:05:32.440
just going to repeat until you
finally quit the application

00:05:32.440 --> 00:05:34.240
because it's not very
interesting.

00:05:34.240 --> 00:05:37.010
And it's also going to set a
repeat mode reverse, so when

00:05:37.010 --> 00:05:38.670
it reaches the bottom,
it's going to

00:05:38.670 --> 00:05:40.050
animate back up to one.

00:05:40.050 --> 00:05:42.370
Internally, what that means is
the Value Animator is going to

00:05:42.370 --> 00:05:46.040
run from zero to one, and then
back to zero, and ad

00:05:46.040 --> 00:05:48.200
infinitum, until you kill
the application.

00:05:48.200 --> 00:05:49.810
Then we start the animation.

00:05:49.810 --> 00:05:50.920
That was the second animation.

00:05:50.920 --> 00:05:52.160
The third one was
the one where it

00:05:52.160 --> 00:05:53.170
was actually bouncing.

00:05:53.170 --> 00:05:55.930
It was speeding up as it fell
down, and then it slowed down

00:05:55.930 --> 00:05:58.520
as it went back up, sort of
a gravity motion to it.

00:05:58.520 --> 00:06:01.220
So that logic is in the bouncer
two file, and it's

00:06:01.220 --> 00:06:04.080
exactly like the previous one we
looked at, except for this

00:06:04.080 --> 00:06:06.650
one line of code where we
set an interpolator.

00:06:06.650 --> 00:06:09.380
An interpolator you can
think of as a way of

00:06:09.380 --> 00:06:11.200
re-interpreting time.

00:06:11.200 --> 00:06:14.400
And by reinterpreting time, we
also reinterpret how the

00:06:14.400 --> 00:06:15.780
values are calculated,
because those are

00:06:15.780 --> 00:06:17.220
based on the time value.

00:06:17.220 --> 00:06:20.790
So here we're saying, use an
accelerate interpolator, which

00:06:20.790 --> 00:06:23.910
means the longer you go the
faster you're going to get.

00:06:23.910 --> 00:06:27.380
But then, interestingly, when it
reverses, it's going to use

00:06:27.380 --> 00:06:28.550
the interpolator in reverse.

00:06:28.550 --> 00:06:30.380
So it's going to speed up on the
way down to one, and then

00:06:30.380 --> 00:06:32.450
it's going to slow down
back up to zero.

00:06:32.450 --> 00:06:35.370
And that's how we get the
bouncing behavior, as we go

00:06:35.370 --> 00:06:37.190
down and up the screen.

00:06:37.190 --> 00:06:39.500
And then finally, we can take
a look at the bouncer three

00:06:39.500 --> 00:06:43.350
file, which produced exactly
the same visual result, but

00:06:43.350 --> 00:06:44.910
with a little less code.

00:06:44.910 --> 00:06:48.610
This gets into use of the new
Object Animator class that

00:06:48.610 --> 00:06:50.320
also came out in 3.0.

00:06:50.320 --> 00:06:53.630
And this is a class that's
specifically not just about

00:06:53.630 --> 00:06:56.760
animating values, but about
animating the values on a

00:06:56.760 --> 00:06:59.890
target object and set
a target properties.

00:06:59.890 --> 00:07:03.380
In particular, we're going to
have an object animator--

00:07:03.380 --> 00:07:05.520
which is created right here--
that's going to animate

00:07:05.520 --> 00:07:06.940
integer values.

00:07:06.940 --> 00:07:11.970
It's going to use this target,
which is the custom view.

00:07:11.970 --> 00:07:14.930
And we're going to animate the
"shape Y" property, which is

00:07:14.930 --> 00:07:17.410
just a string that we're passing
in, which will then

00:07:17.410 --> 00:07:21.600
use reflection or JNI underneath
to say, given this

00:07:21.600 --> 00:07:25.490
string name, is there a setter
of this type that I can

00:07:25.490 --> 00:07:27.650
associate with this, and
then call that setter

00:07:27.650 --> 00:07:29.380
over time to animate.

00:07:29.380 --> 00:07:32.580
And in fact, it does find that,
because we have the set

00:07:32.580 --> 00:07:35.800
shape y setter that
we saw earlier.

00:07:35.800 --> 00:07:38.110
And it's going to animate that
property from the value of

00:07:38.110 --> 00:07:40.510
zero to the maximum value.

00:07:40.510 --> 00:07:42.640
So you can compare this to what
we saw before where we

00:07:42.640 --> 00:07:45.440
created the value animator, and
then we needed to use an

00:07:45.440 --> 00:07:47.810
update listener to actually
use that value over time.

00:07:47.810 --> 00:07:49.770
Object animator does
that all for you.

00:07:49.770 --> 00:07:51.650
You point it at the target
object to animate, the

00:07:51.650 --> 00:07:53.750
properties in that object
to animate, and

00:07:53.750 --> 00:07:54.990
the values to use.

00:07:54.990 --> 00:07:57.790
Then you simply start the
animation, and away it goes.

00:07:57.790 --> 00:08:01.000
It calculates the values, it
sets it on the target object,

00:08:01.000 --> 00:08:02.600
and it's basically a set
and forget thing.

00:08:02.600 --> 00:08:05.690
You create the animation, you
run it, and you're done.

00:08:05.690 --> 00:08:08.760
So this was a little bit about
the Property Animation system

00:08:08.760 --> 00:08:10.690
that started in 3.0.

00:08:10.690 --> 00:08:13.290
So if you're running devices
with 3.0, I would suggest you

00:08:13.290 --> 00:08:15.810
take a look at these classes,
in addition to the View

00:08:15.810 --> 00:08:18.780
Property Animator class, which
we'll see in a future episode.

00:08:18.780 --> 00:08:20.030
Thanks.

