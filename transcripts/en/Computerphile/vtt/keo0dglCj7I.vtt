WEBVTT
Kind: captions
Language: en

00:00:00.040 --> 00:00:03.310
that server could be overloaded it's
having trouble serving out all the data

00:00:03.310 --> 00:00:08.230
and so you're making these requests but
it's just maybe it's losing the request

00:00:08.230 --> 00:00:11.050
or it's something is crashing or
something's not working ready so you're

00:00:11.050 --> 00:00:13.750
not going to get this data back and it
might be in that case of hitting

00:00:13.750 --> 00:00:17.890
refresh refresh is causing these
requests to be reissued you get lucky

00:00:17.890 --> 00:00:21.460
and it means that you get your page back
and somebody else doesn't and so you buy

00:00:21.460 --> 00:00:27.250
your raffle tickets and somebody else doesn't

00:00:27.250 --> 00:00:27.850
you clicked on this URL

00:00:27.850 --> 00:00:31.810
so what's gonna happen this kind of
breaks up into in this case about three

00:00:31.810 --> 00:00:32.740
different components

00:00:32.740 --> 00:00:38.080
so you've got the path in the URL you've
got the name domain name tells you which

00:00:38.080 --> 00:00:43.660
website it is and you got protocol the
schema is called the scheme which is the

00:00:43.660 --> 00:00:47.200
protocol is going to use this case the
standard protocol HTTP you clicked on

00:00:47.200 --> 00:00:51.640
that wherever that is it could be an
email could be in a web browser it could

00:00:51.640 --> 00:00:54.520
be something you've tightened by and the
URL bar in your browser

00:00:54.520 --> 00:00:58.510
whatever it might be you clicked on it
and what's going to happen as a result

00:00:58.510 --> 00:00:59.140
of that

00:00:59.140 --> 00:01:02.079
so what logically speaking of that
there's a sort of high-level what has to

00:01:02.079 --> 00:01:04.839
happen is your computer now needs to
make a connection or your phone or

00:01:04.839 --> 00:01:08.110
whatever might be no need to make a
connection to the server that contains

00:01:08.110 --> 00:01:11.500
that data and send a request about data
and receive data back again

00:01:11.500 --> 00:01:13.750
so the first thing it's going to do is
work out which machine is a need to

00:01:13.750 --> 00:01:17.920
connect it because this is the internet
things don't have names that go IP

00:01:17.920 --> 00:01:21.970
addresses and so it needs to translate
the name which in this case example.com

00:01:21.970 --> 00:01:27.220
into some IP address so it can actually
get data to the destination because on

00:01:27.220 --> 00:01:30.490
the routine stuff that we've talked
about all that data all those packets

00:01:30.490 --> 00:01:33.700
are being routed through the network
based on their destination address

00:01:33.700 --> 00:01:36.820
you've got to put a destination address
in the packet and in this case you want

00:01:36.820 --> 00:01:39.790
to find the destination address the IP
address that corresponds to

00:01:39.790 --> 00:01:43.330
example.com so you look up the name and
you get the IP address

00:01:43.869 --> 00:01:47.439
there's a couple ways this can happen
kind of the communest ones are

00:01:47.439 --> 00:01:51.400
it might be a statically configured
there'll be a file on your system called

00:01:51.400 --> 00:01:54.909
post doc txt or medical side different
things on different systems but it says

00:01:54.909 --> 00:01:56.920
when you see this name is this address

00:01:56.920 --> 00:02:00.369
more commonly what will happen is it
will run a protocol called dns stands

00:02:00.369 --> 00:02:03.520
for the domain name system essentially
what happens with that is that your

00:02:03.520 --> 00:02:07.330
system before it tries to actually
connect this will construct a request

00:02:07.330 --> 00:02:09.210
that basically has a question

00:02:09.210 --> 00:02:13.140
the question will be what is example.com

00:02:13.140 --> 00:02:16.590
construct that as a request it may be
able to answer that locally so if you've

00:02:16.590 --> 00:02:19.170
made a previous connection to
example.com recently

00:02:19.170 --> 00:02:22.260
it might be that you already have a
translation to hand and so that your

00:02:22.260 --> 00:02:25.260
computer is only do anything other than
reuse the same answer

00:02:25.260 --> 00:02:28.680
but if you've never clicked on that
before then it's going to need to send

00:02:28.680 --> 00:02:32.130
that request out into the domain name
system to try and get a response back to

00:02:32.130 --> 00:02:35.340
say what IP address should i connect to
the protocol is quite simple

00:02:35.340 --> 00:02:38.220
it's a one-shot is the question what's
the answer but the service is

00:02:38.220 --> 00:02:41.610
constructed to operate this is quite
complex there's a lot of hierarchy in it

00:02:41.610 --> 00:02:47.070
lots of other service that will be
running in your you make a query to one

00:02:47.070 --> 00:02:49.860
server which may have to send a query on
to another server which was in turn on

00:02:49.860 --> 00:02:52.530
the server which eventually will have a
response that can get set back to you

00:02:52.530 --> 00:02:55.800
but let's say all that happens

00:02:55.800 --> 00:02:59.800
and so you get back the answer that
let's say it's you know 10.0.0.1

00:02:59.800 --> 00:03:02.640
second argument

00:03:02.640 --> 00:03:06.330
so you now know that to connect to
example.com you have to send packets to

00:03:06.330 --> 00:03:12.810
the machine with the address 10.0.0.1 
to get this answer so then you have to

00:03:12.810 --> 00:03:15.660
create a connection to you actually go
to connect the machine

00:03:15.660 --> 00:03:19.770
so you're going to use a protocol tcp to
do this and what that does is it sets of

00:03:19.770 --> 00:03:24.270
the connection to this destination and
then allows you to send a request for

00:03:24.270 --> 00:03:26.730
this path over that connection

00:03:26.730 --> 00:03:29.520
so the weighty speed works is you're
going to have let's say you've got your

00:03:29.520 --> 00:03:30.930
client here

00:03:30.930 --> 00:03:36.720
the example.com server 10.0.0.1 there so you're gonna send a

00:03:36.720 --> 00:03:41.280
packet and replied with a packet you
apply the packet

00:03:41.280 --> 00:03:48.390
this is called the three-way handshake
these are called syn syn ack ack

00:03:48.390 --> 00:03:53.720
so synchronize synchronize acknowledged
knowledge and at this point here

00:03:53.720 --> 00:03:58.440
you create the connection so both sides
now not to the other side exists and is

00:03:58.440 --> 00:04:01.380
trying to communicate with them and
where they are and how to get there was

00:04:01.380 --> 00:04:01.950
gonna stop

00:04:01.950 --> 00:04:04.860
you've now got this situation set up
we've got a connection so then what

00:04:04.860 --> 00:04:09.000
happens is he will actually send an HTTP
command over this connection you've

00:04:09.000 --> 00:04:14.580
created by transmitting a packet to the
example.com use this protocol tcp

00:04:14.580 --> 00:04:16.260
and in that packet

00:04:16.260 --> 00:04:18.459
let's say it's the old version of HTTP 1.0

00:04:18.459 --> 00:04:23.229
there will be a command that will
be something like get some path

00:04:23.229 --> 00:04:28.060
HTTP 1.0 and then it will be a new line
in line

00:04:28.060 --> 00:04:31.960
we actually used to be command the HTTP
protocol operating here is this get some

00:04:31.960 --> 00:04:32.710
path

00:04:32.710 --> 00:04:38.259
HTTP 1.0 your new line and that's the
HTTP command has been sent and so that

00:04:38.259 --> 00:04:42.250
gets sent through across this connection
to the server which can then respond

00:04:42.250 --> 00:04:48.460
with whatever it is that's associated
with the data so that might be a web

00:04:48.460 --> 00:04:51.940
page for example and so that web page
might get sent back in a single package

00:04:51.940 --> 00:04:56.289
might be so big it gets sent in multiple
packets the server interprets this URL

00:04:56.289 --> 00:05:01.960
this path some path turns into data
somehow the Internet of Things it stuff

00:05:01.960 --> 00:05:05.830
coming up it might be that what actually
happens there is that your fridge is

00:05:05.830 --> 00:05:09.340
turned off or washing machine gets turned on
so now you can be anything that happens

00:05:09.340 --> 00:05:13.539
there and then some data is read the
results from that is sent back to you

00:05:14.110 --> 00:05:18.909
so in the web 1.0 that would have been a
file will be found in the fastest and

00:05:18.909 --> 00:05:22.900
sent to you and web 2.0 it's
much more i said dynamic databases

00:05:22.900 --> 00:05:26.889
construction of assemblage of multiple
components to construct a page that they

00:05:26.889 --> 00:05:27.789
get sent back to you

00:05:27.789 --> 00:05:32.440
in fact it can happen in a kind of x so
this is the case for sending data back

00:05:32.440 --> 00:05:36.009
responding to this single URL commonly
what happens on the web page you get a

00:05:36.009 --> 00:05:38.770
web page into your browser having
clicked on a link and that web page

00:05:38.770 --> 00:05:42.520
won't be everything that it requires
self-contained it will contain

00:05:42.520 --> 00:05:46.690
references to other web pages that
contain references comedy to a CSS

00:05:46.690 --> 00:05:49.719
stylesheet it will contain a reference
to some JavaScript maybe several

00:05:49.719 --> 00:05:54.130
javascript libraries and so what happens
as a result of this is that lets say

00:05:54.130 --> 00:06:00.669
this this data comes back here and it
contains other references to some

00:06:00.669 --> 00:06:03.669
javascript file and it contains a
reference to

00:06:04.180 --> 00:06:10.060
style.com blast / food . CSS and will
contain more preference like that and

00:06:10.060 --> 00:06:12.729
then what would have to happen is your
web browser will interpret this as it's

00:06:12.729 --> 00:06:15.729
trying to render this page is trying to
put the page open from to you and it

00:06:15.729 --> 00:06:18.759
will start having to make connections to
each of these sites so that those data

00:06:18.759 --> 00:06:21.940
comes back my actually cause your
browser to fire

00:06:21.940 --> 00:06:25.210
a lot more of the sense that yeah and so
in love each of its most available for

00:06:25.210 --> 00:06:28.630
our it's a lot of it will be fine but
it's a neat but each this process would

00:06:28.630 --> 00:06:31.750
have to be going through each of those
so they'll have to be a dns resolution

00:06:31.750 --> 00:06:37.630
of some jas . , and start , whatever the
science there will have to be a TCP

00:06:37.630 --> 00:06:43.900
handshake that will go out to each of
those sites they will then have to be to

00:06:43.900 --> 00:06:51.490
get / jas file . jas that will have to
be to get food

00:06:52.300 --> 00:07:02.680
CSS HTTP 10 http/2 10 and so this simple
act of having clicked on that link could

00:07:02.680 --> 00:07:07.450
cause many name resolutions to happen
could cause many connections to be set

00:07:07.450 --> 00:07:11.080
up and it could cause lots of later and
commands to be issued in order to allow

00:07:11.080 --> 00:07:14.380
your browser to pull together everything
it needs to put that webpage on the

00:07:14.380 --> 00:07:17.470
screen from to you it doesn't come
immediately so I click it again and

00:07:17.470 --> 00:07:21.430
again and again and i think it because
it's not working does that all happen

00:07:21.430 --> 00:07:23.860
over and over again with the bird

00:07:23.860 --> 00:07:27.790
potentially yes it will depend on
exactly how that's interpreted so it

00:07:27.790 --> 00:07:31.150
might be that the browser decide
to ignore some of that because already

00:07:31.150 --> 00:07:31.720
busy

00:07:31.720 --> 00:07:35.560
it might be that it's going to reach the
whole thing it might be that it stops

00:07:35.560 --> 00:07:38.650
what's been happening early and just
throw it all away and starts again it

00:07:38.650 --> 00:07:42.700
might be that lets what's already
happening continue in the background in

00:07:42.700 --> 00:07:45.400
that hope that that's going to finish
sooner than the need to click that you

00:07:45.400 --> 00:07:48.370
just also some of the market
intelligence going on there but

00:07:48.370 --> 00:07:51.430
generally speaking it might be quicker
to not click again

00:07:51.430 --> 00:07:54.700
yeah it's only you need the often you
need to get a little bit of time to

00:07:54.700 --> 00:07:58.150
respond because it's a complex page or
the or the internet is busy there's lots

00:07:58.150 --> 00:08:01.720
of congestion or the server is busy it's
overloaded it can take some time to

00:08:01.720 --> 00:08:02.410
respond

00:08:02.410 --> 00:08:05.260
on the other hand one of the things that
can happen because of the way these

00:08:05.260 --> 00:08:09.190
protocols work is in this step in
particular the syn step this initial

00:08:09.190 --> 00:08:13.900
connection setup fails so that fails
down there that can take a long time for

00:08:13.900 --> 00:08:17.650
the system to retry that the other thing
is that if this DNS resolution fails

00:08:17.650 --> 00:08:21.610
it's not reliable on the protocol
and DNS doesn't retry for you

00:08:21.610 --> 00:08:24.310
the application has to request that to
happen all the operating system usually

00:08:24.310 --> 00:08:28.000
will request that to happen because this
gets initiated usually by your browser

00:08:28.000 --> 00:08:31.330
of making a function call system called
the operating system to say please could

00:08:31.330 --> 00:08:33.930
you look up his name for me then the
u.s. will do something

00:08:33.930 --> 00:08:37.800
background if that fails or that's
taking too long

00:08:37.800 --> 00:08:42.180
then again sometimes it might be that
clicking again actually does speed

00:08:42.180 --> 00:08:44.190
it up because it forces that to happen
sooner

00:08:44.190 --> 00:08:47.850
so there's no direct answer to that
literally tell you that's it

00:08:47.850 --> 00:08:51.420
because there's so many different
components in this and you've got the

00:08:51.420 --> 00:08:54.060
whole internet as well as all the other
bag of components

00:08:54.060 --> 00:08:57.930
it's complex there's lots of stuff
happening it's a complicated system

00:09:01.340 --> 00:09:05.300
we'd like to thank or double dot com for
sponsoring this computer file video and

00:09:05.300 --> 00:09:08.930
if you like books get over to
audible.com / computer file for the

00:09:08.930 --> 00:09:13.550
chance to check out an audio book for
free today would like to recommend Kim's

00:09:13.550 --> 00:09:18.800
etters countdown to zero day it's all
about Stuxnet the worm that sabotage

00:09:18.800 --> 00:09:23.330
Iran's nuclear effort and it tells the
story of how it was discovered and how

00:09:23.330 --> 00:09:27.740
it works to get over to audible.com /
computer file check out countdown to

00:09:27.740 --> 00:09:31.520
zero day by kim zetter and thanks once
again to audible.com for sponsoring

00:09:31.520 --> 00:09:33.649
computer file for this video

00:09:33.649 --> 00:09:37.399
when it was the Pakistan network
operator they tried to inject

00:09:37.399 --> 00:09:42.769
information into bgp to prevent people
connecting to youtube from within their

00:09:42.769 --> 00:09:46.490
network but because of the way they did
that that information propagated and it

00:09:46.490 --> 00:09:49.999
caused lots of other networks to also
fail to be able to connect to youtube

