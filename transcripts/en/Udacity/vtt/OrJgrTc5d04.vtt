WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
I want you to implement such a controller.

00:00:04.000 --> 00:00:06.000
Here is the code I've prepared for you.

00:00:06.000 --> 00:00:08.000
There is a class robot with which you're familiar.

00:00:08.000 --> 00:00:13.000
It has an "init." You can set the position using the function "set" as before.

00:00:13.000 --> 00:00:16.000
There are steering_noise and distance_noise.

00:00:16.000 --> 00:00:18.000
You're familiar with this.

00:00:18.000 --> 00:00:20.000
There is also something called "drift," which you won't use right now,

00:00:20.000 --> 00:00:22.000
but later on it'll become handy.

00:00:22.000 --> 00:00:28.000
There is your move command, all the way we've implemented before.

00:00:28.000 --> 00:00:33.000
I've improved a little bit the print out of the coordinates using floats.

00:00:33.000 --> 00:00:38.000
I want you to implement the run command, which takes as input the control parameter

00:00:38.000 --> 00:00:43.000
that governs the proportional response of the steering angle to the crosstrack error.

00:00:43.000 --> 00:00:48.000
The robot has an initial position of 0, 1, and 0, a speed of 1,

00:00:48.000 --> 00:00:51.000
and I wanted to simulate it for 100 steps.

00:00:51.000 --> 00:00:53.000
Here is what I envision to happen.

00:00:53.000 --> 00:00:57.000
Your robot is initially off the the x axis by 1.

00:00:57.000 --> 00:01:00.000
I want it to drive along the x axis.

00:01:00.000 --> 00:01:04.000
The y value is the same as the cross track error.

00:01:04.000 --> 00:01:08.000
By turning, inversely proportional to the y value,

00:01:08.000 --> 00:01:14.000
using a parameter tau that sets the response strength of the proportional controller.

00:01:14.000 --> 00:01:19.000
I want the robot to turn towards the x axis, drive in that direction, overshoot,

00:01:19.000 --> 00:01:22.000
turn around, and drive back.

00:01:22.000 --> 00:01:28.000
To do this, simulate the world for a 800 steps, and use a proportionality term

00:01:28.000 --> 00:01:35.000
that sets my steering angle alpha in proportion to the crosstrack error y.

00:01:35.000 --> 00:01:41.000
Enter your code here, and when you're done with it, and you run it with the coefficient 0.1,

00:01:41.000 --> 00:01:45.000
here's the output that I want you to produce. It's 100 lines.

00:01:45.000 --> 00:01:47.000
You can see the robot position starting 1 off in y.

00:01:47.000 --> 00:01:53.000
It then reduces y over time to go into negative territory.

00:01:53.000 --> 00:01:56.000
On the right side you see this corresponding steering orientation,

00:01:56.000 --> 00:02:02.000
and you can see as you move on the y coming back into positive territory,

00:02:02.000 --> 00:02:07.000
and you can see how the robot overshoots slowly around the reference trajectory of the x axis.

00:02:07.000 --> 09:59:59.000
Please go implement this.

