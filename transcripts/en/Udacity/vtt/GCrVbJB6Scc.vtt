WEBVTT
Kind: captions
Language: en

00:00:00.530 --> 00:00:01.940
Let's start with something simple.

00:00:01.940 --> 00:00:05.420
Let's say I don't like having
to call an integer an Int.

00:00:05.420 --> 00:00:06.720
Can we change that?

00:00:06.720 --> 00:00:08.000
Of course.

00:00:08.000 --> 00:00:13.721
We have the typealias statement, and
it always follows the same template.

00:00:13.721 --> 00:00:16.799
It's typealias,
new name equal old names.

00:00:16.799 --> 00:00:24.290
So, it would be typealias,
new name Integer, old name Int.

00:00:24.290 --> 00:00:28.900
&gt;From now on, I can use Integer
instead of Int whenever I feel like.

00:00:28.900 --> 00:00:30.890
It's all the same to the compiler.

00:00:30.890 --> 00:00:32.570
Let's see an example.

00:00:32.570 --> 00:00:37.130
These two lines that we have
here are exactly the same.

00:00:37.130 --> 00:00:42.960
Integer has become an alias for Int,
and we can use it any time we want.

00:00:42.960 --> 00:00:46.650
This truly becomes useful when dealing
with funky types such as those of

00:00:46.650 --> 00:00:48.570
functions and closures.

00:00:48.570 --> 00:00:51.921
As an example of an odd type,
it would be a function or

00:00:51.921 --> 00:00:55.350
a closer that takes an Int and
returns a name.

00:00:55.350 --> 00:01:01.480
The type for
this function would be this, (Int)-&gt;Int.

00:01:01.480 --> 00:01:02.600
That can be confusing.

00:01:02.600 --> 00:01:04.760
I don't like it, so
let's give it another name.

00:01:04.760 --> 00:01:07.610
And I'll call it InttoInt.

00:01:07.610 --> 00:01:08.960
Now this is much better.

00:01:08.960 --> 00:01:13.130
Now instead of having
to use this funky type,

00:01:13.130 --> 00:01:18.080
I can use simply InttoInt,
that makes our life much easier.

00:01:18.080 --> 00:01:19.900
Now let's create a typealias for

00:01:19.900 --> 00:01:24.860
a function that takes no parameters,
void, and returns an Int.

00:01:24.860 --> 00:01:29.940
And I'll call it IntMaker,
because it makes an Int out of thin air.

00:01:29.940 --> 00:01:34.700
Now we can use any of these types to
define a function that takes an integer

00:01:34.700 --> 00:01:39.380
and returns a integer, or one that
takes nothing, and returns an integer.

00:01:39.380 --> 00:01:40.850
This will become very,

00:01:40.850 --> 00:01:47.210
very useful in the next lesson where
we finally tackle variable capture.

00:01:47.210 --> 00:01:47.710
See you there.

