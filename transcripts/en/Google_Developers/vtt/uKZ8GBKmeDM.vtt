WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.729
&gt;&gt; PARLANTE: So, in this section, I want to
play up this idea of modules of existing code

00:00:05.729 --> 00:00:09.450
that you might want to use to just sort of
solve common problems. In this case, I'm going

00:00:09.450 --> 00:00:15.970
to show you some file system interface stuff
and also how you call an external process

00:00:15.970 --> 00:00:19.490
and capture its output and the like to do
something. So you can imagine using Python

00:00:19.490 --> 00:00:23.710
sort of--you might use Bash but just--it's
sort of a better Bash to sort of glue something

00:00:23.710 --> 00:00:30.769
together some sort of--some sort of utility.
So I'll start off in the interpreter here,

00:00:30.769 --> 00:00:38.250
fire up Python. And the first module I want
to talk about is the OS module since we're

00:00:38.250 --> 00:00:44.031
operating system, I think, and I'm just going
to do a DIR on it. So I import the OS module.

00:00:44.031 --> 00:00:47.500
I'm going to look inside of there, and you
can see there are all sorts of functions in

00:00:47.500 --> 00:00:55.410
there. There's obviously, you know, "setpgid"
and "nice." There are obviously kind of operating

00:00:55.410 --> 00:01:04.890
system-oriented utilities, have a very kind
of a UNIX-y feeling. In theory, these are--these

00:01:04.890 --> 00:01:09.010
try to be platform-independent. So if you
write a--wrote a Python program and it's running

00:01:09.010 --> 00:01:13.970
on Windows, some of these are stubbed out
where you could call, you know, and try to

00:01:13.970 --> 00:01:17.710
get the current time or whatever, and it's
going to translate it. I don't believe it's

00:01:17.710 --> 00:01:21.630
done perfectly, but it tries. So going through
those, there's a--there's at least, theoretically,

00:01:21.630 --> 00:01:29.070
a degree of platform independence. So I would
like to show you a couple--so obviously, there's

00:01:29.070 --> 00:01:34.320
tons of stuff in here. The one I'd like to
show you for starters is listdir. That one.

00:01:34.320 --> 00:01:40.070
So, actually, I could do help on it. Just
to show you how that works, so I say, "os.listdir."

00:01:40.070 --> 00:01:45.930
So it says--okay, what this does, it takes--nice
summary--it takes a path and it's going to

00:01:45.930 --> 00:01:50.140
give me a list of strings. So what it's going
to do is I give it a path to a directory and

00:01:50.140 --> 00:01:52.990
then it's going to figure out what all the
filenames are in that directory and just return

00:01:52.990 --> 00:01:59.540
it to me as a list of Python strings. So let
me go to the interpreter here. So to demonstrate

00:01:59.540 --> 00:02:04.290
this, what I thought I'll do is I'll modify
the long-suffering hello.py example to just,

00:02:04.290 --> 00:02:11.480
you know, I don't know, list files. So I'll
say "import os" here. I'll rename this list,

00:02:11.480 --> 00:02:18.670
upper case L. Let's say this will take a directory.
So let's see, I'll say, "filenames = os.listdir

00:02:18.670 --> 00:02:29.569
(dir)" and I just sort of as I've been encouraging
you to do for the exercise--well, I'll just

00:02:29.569 --> 00:02:35.200
print what that gives me for starters. So
here I'll say, lists are here in the main.

00:02:35.200 --> 00:02:39.090
I'll just leave it the way it is. So I'll
just assume that there's one command line

00:02:39.090 --> 00:02:46.730
argument and I'll just list it. So, hopefully,
it's in the same directory. So if I say, "hello."

00:02:46.730 --> 00:02:54.740
and you could see it's a, you know, it's found
so I'll do an ls; that way, we can access

00:02:54.740 --> 00:03:00.480
this information. So there's this .DS_Store
thing that the Macintosh, like, pathologically

00:03:00.480 --> 00:03:06.050
puts everywhere, and other than that, you'll
see there's just kind of regular file names.

00:03:06.050 --> 00:03:11.560
So let me make this code do something a little
more interesting. So at least I printed that

00:03:11.560 --> 00:03:18.280
it's there. So here, I'll--let's loop through
them. So I'll say, "for filename in filenames:"

00:03:18.280 --> 00:03:25.830
sort of typical kind of thing. So one thing
I can do, if I want to make a path out of

00:03:25.830 --> 00:03:31.290
this--but what's important to understand is
that when you do a listdir to get file names

00:03:31.290 --> 00:03:36.750
out of a directory, just that filename on
its own, just out in space, is not a valid

00:03:36.750 --> 00:03:42.590
path, right? It needs to be connected to the
directory it came from to make a valid path.

00:03:42.590 --> 00:03:45.350
So the way I could do that--and sort--you
always sort--you always sort--as soon as you

00:03:45.350 --> 00:03:48.180
call listdir, you're disconnecting the filename
from path. So you have to realize, you've

00:03:48.180 --> 00:03:51.410
immediately--now, with the current directory
as dot or something, you might be able to

00:03:51.410 --> 00:03:54.970
kind of fudge around some of these but then
you'd have a bug if someone was running in

00:03:54.970 --> 00:04:03.480
a different directory. So in the OS package,
there's an OS--there's a subpart called os.path.

00:04:03.480 --> 00:04:09.232
And inside of os.path, there are utilities
for manipulating file paths; taking them apart,

00:04:09.232 --> 00:04:13.150
putting them together, that kind of stuff.
And again, these are a little bit platform-independent,

00:04:13.150 --> 00:04:17.100
so on Windows or whatever, like, there's some
chance this might work. I'm sorry, it'll--it

00:04:17.100 --> 00:04:24.031
would definitely work. So, "join" takes a
directory and a filename and then puts them

00:04:24.031 --> 00:04:31.190
back together in a platform-valid way, so
that makes a valid path. So I could say, like,

00:04:31.190 --> 00:04:41.210
"print." I'll just print that. And then also,
there's an os.path.abspath; I'll do that on

00:04:41.210 --> 00:04:47.960
path. What that's going to do--it's kind of
like a PWD--oh, I'm sorry, it's path there.

00:04:47.960 --> 00:04:54.169
It takes the path and it's going to just fill
it out to be replete. So let's try that. So

00:04:54.169 --> 00:05:05.070
if I run that on dot and there's a module--okay,
what did I do wrong there? OS--oh, it's not

00:05:05.070 --> 00:05:13.600
absbath. All right. Well, let it be said,
my demos do not lack for realism. All right.

00:05:13.600 --> 00:05:19.750
So here, I'm running it on the directory dot,
and so then here, the, you know, the first

00:05:19.750 --> 00:05:24.320
line is it just puts it back together with
a slash. I think--let's just try--if I said

00:05:24.320 --> 00:05:30.861
like, "./" notice, it's smart about not doubling
up the slash there where if you just put it

00:05:30.861 --> 00:05:35.050
together with a plus, you would have done
the wrong thing in there; it would have said

00:05:35.050 --> 00:05:40.080
 ".//". Anyway, it's a nicety of going through
the real utility to do it right. And then

00:05:40.080 --> 00:05:45.010
here is, you know, this is just on my--oh
no, this is on my unit--my Google box or whatever.

00:05:45.010 --> 00:05:48.699
That's, you know, that's the full path of
the thing. And I'm sort of cheating on--just--I

00:05:48.699 --> 00:05:54.180
could have--you know, I could say, like, "/tmp"
and like, whatever--God knows what that is.

00:05:54.180 --> 00:05:59.080
It's some source thing or whatever. Anyway,
so I can--as an argument, I can just give

00:05:59.080 --> 00:06:05.620
it any directory. It's going to list it up.
All right, so let me go back to--so, mundane

00:06:05.620 --> 00:06:09.810
yet useful, all right? You want to be able
to manipulate list, do stuff with directory

00:06:09.810 --> 00:06:12.436
paths; take them apart; put them together.
I've shown you just a few of the utilities.

00:06:12.436 --> 00:06:15.919
You can look in there--you know, there's--yeah,
there's all the imaginable utilities you would

00:06:15.919 --> 00:06:19.111
want for manipulating that kind of stuff.
So let me show you--I'm going to drop back

00:06:19.111 --> 00:06:27.130
into Python here--I want to show you one other
one--just one I want. There's a os.path.exist('/tmp/foo').

00:06:27.130 --> 00:06:33.270
That's hopefully--I don't actually know if
that exists--oh, it does. All right, of course.

00:06:33.270 --> 00:06:45.120
How about "baz"? Oh, okay, that's not there.
There's also os.--I'm not going to run this

00:06:45.120 --> 00:06:51.130
one--"os.mikdir" you get a path if you want
to make something. And then finally, one that

00:06:51.130 --> 00:06:57.460
you would never in a million years would it
occur to you to find, but there's a module

00:06:57.460 --> 00:07:06.600
called, "s-h-u-til" of which I think, historically,
was sort of like shell utilities. And in s-h-u-til,

00:07:06.600 --> 00:07:15.080
there is a ".copy" and what this does is file
copying for you. So you give it a source path

00:07:15.080 --> 00:07:19.200
and a dest path and it just kind of like goes
right in there. Obviously, you could do it

00:07:19.200 --> 00:07:23.009
manually by reading the bytes of the file
or whatever, but if--yeah, it's--you just--yeah,

00:07:23.009 --> 00:07:26.970
as I was saying, living higher on the food
chain, yeah, you just want to call the thing

00:07:26.970 --> 00:07:31.949
that does that. I think the name of s-h-u-til--it
also shows how, I think, Python has grown

00:07:31.949 --> 00:07:36.130
sort of organically, right? It's not like
a committee got together and said, well, for

00:07:36.130 --> 00:07:39.110
a job, I feel like it's a much more a top-down
design with the names and stuff, where, you

00:07:39.110 --> 00:07:41.640
know--it's not that a committee got together
and said, "Well, I think we should have a

00:07:41.640 --> 00:07:44.880
file copying utility" and, you know, "Here's
what the names should be done." Instead--I'm

00:07:44.880 --> 00:07:49.889
just guessing--like, some guy said, "Oh, here,
I've made this s-h-u-til thing, you know,

00:07:49.889 --> 00:07:52.981
didn't really give a lot of thought into the
name and it was just kind of useful and it's

00:07:52.981 --> 00:07:56.860
open source so it just kind of gotten picked
up." And so now, by historical accident, like

00:07:56.860 --> 00:08:01.610
that's the slightly obscure name for that
utility is now, so typical kind of community-driven

00:08:01.610 --> 00:08:05.500
open source, you know? It's kind of lovable
and powerful, but yet like a little bit undisciplined.

00:08:05.500 --> 00:08:11.770
The--all righty, so that is the--that stuff
I wanted to show you with OS. Now, I wanted

00:08:11.770 --> 00:08:17.000
to show you another--I'm going to stick, I'm
going to stick with doing stuff in the interpreter

00:08:17.000 --> 00:08:21.460
just to reinforce that though. So, the other
thing I wanted to show you is how you launch

00:08:21.460 --> 00:08:27.110
an external process and wait for it to finish
like very common kind of, you know, utility,

00:08:27.110 --> 00:08:32.169
get things done, sort of things to do. There
are a bunch of Python modules that do this,

00:08:32.169 --> 00:08:36.429
a bizarrely large number. I'm going to show
you what I--if you only knew one, I think

00:08:36.429 --> 00:08:43.699
this is the most useful one. There's a module
called "commands." And inside of commands,

00:08:43.699 --> 00:08:52.449
there's a function called, "get status output,"
I'll do help on it. Oh, boy, the help is pretty

00:08:52.449 --> 00:08:57.569
short. What it does is it runs that command.
So it's going to shell out as an external

00:08:57.569 --> 00:09:01.050
process, it's going to run that command and
you're going to block. So it causes you to

00:09:01.050 --> 00:09:08.160
wait. It's going to wait for that certain
process to exit. And the standard out and

00:09:08.160 --> 00:09:12.739
standard error of that cell so process--so
process are captured; they're not just written

00:09:12.739 --> 00:09:16.420
onto your standard out--standard dir. So the
thing is--it's kind of sealed. So once the

00:09:16.420 --> 00:09:22.329
thing exits, then what gets--what output is
going to do is it returns a Tuple-length tube.

00:09:22.329 --> 00:09:25.250
Returning a Tuple is kind of the Python way
of saying, "Well look, I wanted to return

00:09:25.250 --> 00:09:29.500
two things," or two or three things or whatever
so you could just return a Tuple. The Tuple

00:09:29.500 --> 00:09:35.769
that it returns is--the first is the "int"
exit code. So just in a very typical UNIX-y

00:09:35.769 --> 00:09:40.129
kind of way where, you know, you can recover
the exit code out of there. And then the second

00:09:40.129 --> 00:09:44.339
is a big string, which is all of the output
of this thing. And in this case, I think it's

00:09:44.339 --> 00:09:48.889
both the standard output and the standard
error kind of caught into each other. Now,

00:09:48.889 --> 00:09:52.930
there are a bunch of variance of this if you
want to capture the standard dir separately

00:09:52.930 --> 00:09:57.259
or--all sorts of permutations are covered,
but this is the one we're going to use today.

00:09:57.259 --> 00:10:03.029
And so I'll get out of here and I think what
I'm going to do is I'm going to modify my--well,

00:10:03.029 --> 00:10:09.360
here, we'll leave this as list but I'm going
to, I'm going to have it work differently

00:10:09.360 --> 00:10:15.100
now. So I'm going to say, let's make this
command; I'll say, "'ls -l' + dir." It's kind

00:10:15.100 --> 00:10:20.730
of weird, right? So as a string, I'm putting
together like, "Oh, here's the thing I'd like

00:10:20.730 --> 00:10:26.379
to shell out and have it, like, launch the
ls program." And so then, I'm going to write

00:10:26.379 --> 00:10:33.040
a Tuple so I'll say, "status, output" is equal
to--actually, no here, I'm going to--let's

00:10:33.040 --> 00:10:39.639
skip this stuff. So the way I like to do these--well,
I'll do this one. So the way you call it is

00:10:39.639 --> 00:10:44.610
I'll say, "status output" that's the Tuple,
 "= commands.getstatusoutput" and I'll just

00:10:44.610 --> 00:10:53.210
pass in the command I want to do. And then
here, we'll just like, you know, print the

00:10:53.210 --> 00:11:00.049
output. Get rid of all these. And for a--normally,
I would forget to do the import and go through

00:11:00.049 --> 00:11:03.600
that but just--since we're short of time,
I'll just--I'll go ahead and do it correctly

00:11:03.600 --> 00:11:09.950
so import commands. All right, yeah, I think
that might work. All right. So I'd enter the

00:11:09.950 --> 00:11:17.439
Phyton. So if I say--I'm just going to give
it a dot again. Oh, there we go. So what that

00:11:17.439 --> 00:11:24.290
did is it put together the ls-l. It went through
the commands module. It launched it. My Phyton

00:11:24.290 --> 00:11:28.489
number waits, blocks. Eventually, the thing
ran. It produced your, you know, typical ls-l

00:11:28.489 --> 00:11:34.009
sort of output. And then, then I'm done. All
right, so now this is--now, I'm going to fix

00:11:34.009 --> 00:11:39.959
this up in a couple of ways. I'll regard this
as like, "Not quite right." So one thing I

00:11:39.959 --> 00:11:46.759
want to do is I want to notice if this thing
failed. And the way I'm going to do that,

00:11:46.759 --> 00:11:52.079
the simplest way is I'm just going to say,
"if status," if the status is non-zero, then

00:11:52.079 --> 00:11:56.029
I want to notice if there was an error. So
because status is coming through as an int

00:11:56.029 --> 00:11:59.339
(ph--if, you know, if it's zero, that's going
to count as false and the other value is kind

00:11:59.339 --> 00:12:02.179
of true. So that's sort of the most primitive
way of detecting an error here. So then I'm

00:12:02.179 --> 00:12:10.100
going to say something like print--I think
I could refer to "sys.stderr," you know, there's,

00:12:10.100 --> 00:12:15.430
you know, whatever. There was an error. Now,
I'm being little picky here because when you

00:12:15.430 --> 00:12:20.420
capture the standard error of a subprocess,
if I were to sort of squelch it, if I was

00:12:20.420 --> 00:12:25.779
just try to kind of eat it and hide it, it
makes the system undebuggable. I mean if you

00:12:25.779 --> 00:12:30.359
think about software systems where it's, you
know, some big thing with a lot of parts,

00:12:30.359 --> 00:12:34.410
the key piece of information when it's used
incorrectly which of course it is is that

00:12:34.410 --> 00:12:38.869
whatever the lowest level was that ran into
error reports it. It raises some kind of message

00:12:38.869 --> 00:12:44.569
like, "Hey, this didn't work and you are really
dependent on that low level letting you know.

00:12:44.569 --> 00:12:48.410
Or put the other way, if the low level fails
and remains silent, it's very, very difficult

00:12:48.410 --> 00:12:52.239
to debug. And I'm pointing this out because
this the rare case where we are capturing

00:12:52.239 --> 00:12:55.859
the standard error of that thing. And so we
are kind of responsible for making sure that

00:12:55.859 --> 00:13:02.740
it gets supported. So, I--and, I'll just say
something like that. And then I'm going to

00:13:02.740 --> 00:13:07.049
say "sys.exit(1)" I'm just going to be like,
yes, we are--I'm just--I'm giving up--I'm

00:13:07.049 --> 00:13:10.759
terminating. So, that is one--one thing I
would want to do. Now, the other thing I'm

00:13:10.759 --> 00:13:16.660
going to change here is when I'm--like suppose
you have a bug in your baby name's code, you

00:13:16.660 --> 00:13:20.480
know, you like did the regular expression
wrong. And like, really, what are the consequences

00:13:20.480 --> 00:13:24.519
of that? Oh, well, you know, whatever, some
of the baby name data is a little bit incorrect

00:13:24.519 --> 00:13:28.799
or you missed something. But having--an error
in your code, you just get like slightly bad

00:13:28.799 --> 00:13:35.989
data which is not that bad, I'm going to say.
Now, what if I have a bug here in the string

00:13:35.989 --> 00:13:40.709
where I'm putting together a command which
I'm about to shell out and run as me? And

00:13:40.709 --> 00:13:45.069
I just wanted to point out, the ramifications
of doing that wrong are potentially much worse.

00:13:45.069 --> 00:13:49.120
All right, that I'm--whenever I write command,
I'm immediately on this slightly heightened

00:13:49.120 --> 00:13:52.269
sense of paying attention. I'm like, "Okay,
well, yeah, I could really delete everything

00:13:52.269 --> 00:13:57.639
or whatever." So just to demonstrate that,
what if I were to change this to say, "'rm

00:13:57.639 --> 00:14:04.489
-rf' *" or let's say, you know, why stop there,"/*,"
right? Oh, I'm sorry, the directory is already

00:14:04.489 --> 00:14:08.209
there. It's an argument. Okay, there, all
right? Here, I'll--here, I'll show you. I'm

00:14:08.209 --> 00:14:12.319
going to save it, all right? Now, if you're
anything like me, like I maybe like, "Oh,

00:14:12.319 --> 00:14:17.189
okay, it sounds good, all right, so here's
what I recommend doing: when I'm writing this

00:14:17.189 --> 00:14:25.851
kind of stuff I'll say "print 'about to do
this:,'" Oh, there's the command. And then

00:14:25.851 --> 00:14:30.480
I'll just like return, whatever, just don't
get to the stuff below because you can sort

00:14:30.480 --> 00:14:33.810
of debug your program, all these other reading
directories or whatever kind of stuff and

00:14:33.810 --> 00:14:38.319
you can still have it printed, here's the
command it's going to do. And so it's more

00:14:38.319 --> 00:14:43.299
pleasing I think to debug it that way. So
let's just try this. So I'm going to save

00:14:43.299 --> 00:14:49.579
it and that definitely returns, right? Oh,
hey, you know, the snapshot directory will

00:14:49.579 --> 00:14:54.299
be out here. It's unscrapable. All right,
sorry. I just got on the wrong part. All right,

00:14:54.299 --> 00:15:01.149
so what I meant to do is go down here, "hello.py."
There was a--what's the problem with that?

00:15:01.149 --> 00:15:13.129
Did I forget a "if, print, if status print"--oh,
oh, oh, oh--all right, okay, this one's--okay,

00:15:13.129 --> 00:15:25.269
never mind that. Let me just--I'm not used
to write some text for--so, let me just get

00:15:25.269 --> 00:15:30.139
rid of that for now. All right, okay, so I'm
about to do this, "'rm -rf.'" So I'll be like,

00:15:30.139 --> 00:15:33.151
"Oh, oh, wait a minute, I didn't mean rf--rm-rf,
I meant "'ls -l'" so that's our--that's what

00:15:33.151 --> 00:15:35.660
we're going to do. So that's just kind of--I
mean, you know, in your next exercise, I'm

00:15:35.660 --> 00:15:39.669
going to ask you to shell out and so just,
you know, just for like saying it or whatever.

00:15:39.669 --> 00:15:47.309
Now, this error--I'll try to do it the other
way. The print syntax for writing--like normally,

00:15:47.309 --> 00:15:53.019
when we say "print," it just go to standard
out. But printing to another file handle,

00:15:53.019 --> 00:15:57.499
the syntax is sort of terrible. I'm going
to--I think--I think I can do "dot" right

00:15:57.499 --> 00:16:07.200
there. I'll put this together with a plus.
I think that's better. So let's see. Now,

00:16:07.200 --> 00:16:10.670
it's doing "'ls -l'," all right. Anyway, so
that's the--that is the better syntax for

00:16:10.670 --> 00:16:17.959
that. All righty, so let me show you--so those
are the two module things I want you to work

00:16:17.959 --> 00:16:25.439
on for this next bit. So let me show you our
next exercise. All right, so I'm going to

00:16:25.439 --> 00:16:32.389
go into day 2 here and the next one I want
to work on is "copyspecial." So as before,

00:16:32.389 --> 00:16:35.350
there's a printed form of the description
of this. So I'm just going to kind of demo

00:16:35.350 --> 00:16:37.519
through it, but then you really want to look
at the printed direction. So, you know, it's

00:16:37.519 --> 00:16:42.249
going to have a part A and a part B. This
one's a little smaller and so I want to spend

00:16:42.249 --> 00:16:45.569
like a little bit last on this one. If you
don't get to Part B, that's okay because then

00:16:45.569 --> 00:16:47.959
the third assignment, the last one I think
is the most interesting and that's one of

00:16:47.959 --> 00:16:51.279
the bigger ones so I want to make sure we
save time for that. Okay, so here's the idea

00:16:51.279 --> 00:16:59.859
with this. The idea is in the file system,
there are certain file names which are special.

00:16:59.859 --> 00:17:06.709
In a particular, I'm going to say that a file
name is special if it has the pattern that

00:17:06.709 --> 00:17:13.259
somewhere in the file name there are two underbars
and then one or more word characters followed

00:17:13.259 --> 00:17:20.569
by two underbars. And so for example, in this
directory, there are two special files. There's

00:17:20.569 --> 00:17:24.130
the "hello" and the something and then the
solution directory and copyspecial--well,

00:17:24.130 --> 00:17:28.720
those aren’t special. So, this is, you know,
sort of Google admin kind of thing. You got

00:17:28.720 --> 00:17:31.950
at least directories scattered all over the
place and you want to move from around and

00:17:31.950 --> 00:17:37.210
stuff. So the first thing I'd like to do,
let's see--now, if you run the command with

00:17:37.210 --> 00:17:41.220
no arguments, it always kind of tells you
what the--what the arguments are. So in this

00:17:41.220 --> 00:17:46.380
case, I can run it just with a directory.
So here, I'm going to run it on "dot" as the

00:17:46.380 --> 00:17:52.470
current directory. So if I run it on "dot"
what I want you to do--so it takes a directory

00:17:52.470 --> 00:17:56.750
as an argument. What I want you to do is I
want you to find all the special files and

00:17:56.750 --> 00:18:03.159
just list them. And oh, in particular, list
them by their absolute paths. The absolute

00:18:03.159 --> 00:18:06.260
path is something--if you were write a path
to a file or whatever, that's the path that's

00:18:06.260 --> 00:18:09.750
nice because it's independent of the process
that produced it. It doesn't depend on the

00:18:09.750 --> 00:18:14.880
notion of current directory. It's like this
really is where that file is. So that's the--that's

00:18:14.880 --> 00:18:19.679
the simplest case. Just find them, list them.
The next most complicated thing I want you

00:18:19.679 --> 00:18:26.330
to do is this thing takes a two-directory
argument. So I'll say "/tmp/"--now, I'm thinking

00:18:26.330 --> 00:18:31.370
of some random word I haven’t used. What
day is it today? Thursday, I'll say Thursday.

00:18:31.370 --> 00:18:39.370
All right, so in that case, what I wanted
to do is find all the special files and create

00:18:39.370 --> 00:18:43.200
that directory if it doesn't exist and copy
all the special files to it. So, I'll find

00:18:43.200 --> 00:18:49.490
out "cd /tmp/ thus" and do it--oh, somebody
checked it out over there. All right, I'll

00:18:49.490 --> 00:18:57.390
go back. That's Part B. So then, I'm pretty
happy if you get that. But if you just have

00:18:57.390 --> 00:19:04.429
enough time, then I also want you to have
a two-zip, which is very similar to the two-directory

00:19:04.429 --> 00:19:08.470
but instead, now I want to be able to say,
"blah.zip" and what I want it to do is I want

00:19:08.470 --> 00:19:15.080
to find all the special files, invoke the
zip utility to zip them all up into the zip

00:19:15.080 --> 00:19:21.770
file named here. So if I call that, and you
can see actually my debugging is still in

00:19:21.770 --> 00:19:27.700
here, right? "Command I'm about to do," and
then, oops, and then here is the zip command.

00:19:27.700 --> 00:19:32.810
Zip incidentally by the way--I think the worst
man page ever written. I defy you to find

00:19:32.810 --> 00:19:36.030
one less useful. It just talks about all the
stuff you would never want to do. And it never

00:19:36.030 --> 00:19:38.820
talks about the thing that you want to do--my
personal experience. So it turns out the command

00:19:38.820 --> 00:19:44.530
you want is "zip -j" and then the name of
the zip file and then you just--and then you

00:19:44.530 --> 00:19:50.990
just have all the paths. Now in this case
I used absolute paths--really the zip is going

00:19:50.990 --> 00:19:53.309
to have the same current directory as me,
so you could do the shorthand--anyway--depending

00:19:53.309 --> 00:19:57.160
on your tolerance for that kind of fragility.
It's fine. So that will--that will zip it

00:19:57.160 --> 00:20:01.750
up. Okay, so that is--that's the next exercise?
So I'd like you to go ahead and get started

00:20:01.750 --> 00:20:07.890
on that. And then let's say I'll pull you
guys back here a little before 2, and then

00:20:07.890 --> 00:20:09.469
we'll do the next exercises. All right, go.

