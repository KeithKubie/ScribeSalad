WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.700
We've done a lot of work so far on
weather scenarios for San Francisco and

00:00:05.700 --> 00:00:06.960
for Los Angeles.

00:00:06.960 --> 00:00:12.150
I put forward to you this probability
model - some of you say it's not very

00:00:12.150 --> 00:00:13.259
realistic.

00:00:13.259 --> 00:00:17.380
Quite right! This is a teaching example.
These are the probabilities because they

00:00:17.380 --> 00:00:24.440
suit me and that's what I say they are. But 
what we did last time was to say if you're

00:00:24.600 --> 00:00:28.020
worried that these could get distorted
in transmission

00:00:28.590 --> 00:00:32.130
what's the best thing to do? What's the
easiest thing to do?

00:00:32.130 --> 00:00:37.649
Well, the easiest thing to do -- I introduced
you to this idea of a checksum digit at

00:00:37.649 --> 00:00:38.550
the end.

00:00:38.550 --> 00:00:44.070
What it meant was that so long as only 
one of these bits got distorted in

00:00:44.070 --> 00:00:50.399
transmission you had a lovely situation
of, if you like, "good codes". But if you

00:00:50.399 --> 00:00:56.250
said hmmm!,  one bit gets distorted as 
long as it's only one bit out of the three

00:00:56.250 --> 00:01:01.260
you could end up with something like
this: 0 becoming a 1. You receive 010

00:01:01.260 --> 00:01:05.400
that's not in the list of valid codes
- there's an error has happened there

00:01:05.400 --> 00:01:11.130
and I think I covered also the fact that
you may know that there is an error there.

00:01:11.130 --> 00:01:15.090
This could arise in two or three
different ways but you don't know how it

00:01:15.090 --> 00:01:20.189
occurred. But at least it's nice to know
that an error did occur. And at the very

00:01:20.189 --> 00:01:25.979
end of the last discussion we said, well,
if you want to say to San Francisco:

00:01:26.610 --> 00:01:32.759
"I didn't receive your data correctly" you
could send either an "Acknowledge" or a

00:01:32.759 --> 00:01:39.720
"Not Acknowledge" signal. And I postulated
to you that we might decide that an

00:01:39.720 --> 00:01:44.820
Acknowledge signal to send back to San
Francisco, meaning I got your three bit

00:01:44.820 --> 00:01:50.490
code it makes sense to me; I got 000; It's
foggy; Wonderful! I like it! If that is

00:01:50.490 --> 00:01:56.790
the case send back a zero. On the other
hand if I received a 010. It's not in this

00:01:56.790 --> 00:01:58.500
allowed set of codes,

00:01:58.500 --> 00:02:03.360
I would send back what's technically called 
a NAK, and we use a 1 bit for that. And

00:02:03.360 --> 00:02:04.970
Many of you said:

00:02:04.970 --> 00:02:09.860
"What would happen if these
acknowledgement codes got clobbered on

00:02:09.860 --> 00:02:11.990
their way back to San Francisco?!"

00:02:11.990 --> 00:02:17.630
"How on earth would you then cope?" Well,
armed with what we know now, the simple

00:02:17.630 --> 00:02:23.030
approach instead of Acknowledge being a
single 0 will make it a double zero.

00:02:23.030 --> 00:02:28.520
Instead of "Not Acknowledge" being a 1

00:02:28.520 --> 00:02:33.320
let's make it a 11.  If one of
these gets altered you might get a 10

00:02:33.830 --> 00:02:39.740
you might get a 01. Similarly, here, if
just one bit of those gets altered you

00:02:39.740 --> 00:02:45.920
could equally end up with 01 or with 10.
You expect if you're back in San

00:02:45.920 --> 00:02:51.620
Francisco to either see a clean double
zero or a clean double one. If you get these

00:02:51.620 --> 00:02:56.480
you know that an error has occurred in
transmission.  But, as ever, you don't know

00:02:56.480 --> 00:02:57.920
how it occurred.

00:02:57.920 --> 00:03:01.910
Was it a distorted "Acknowledge" signal or
a distorted "Not Acknowledge" signal.

00:03:02.570 --> 00:03:06.890
Now this could go on forever, if we're
not careful, y know San Francisco

00:03:06.890 --> 00:03:09.080
sending back to Sacramento

00:03:09.080 --> 00:03:13.040
"I've got a Not Acknowledge on your
attempted Acknowledge signal". You just ...

00:03:13.040 --> 00:03:14.930
... it's not good.

00:03:14.930 --> 00:03:20.180
What you'd really like to do here - and this
is a very useful lead-in for me to lead

00:03:20.180 --> 00:03:22.280
into Hamming codes -

00:03:22.280 --> 00:03:27.350
let's see how we can build up a slightly
more sophisticated system,

00:03:27.350 --> 00:03:34.310
adding one extra bit more. If you do that
you can not only detect that an error

00:03:34.310 --> 00:03:37.430
has occurred but you can actually
correct it.

00:03:37.430 --> 00:03:41.870
This gentleman, Richard Hamming, comes
slightly after, I think, the person I've

00:03:41.870 --> 00:03:45.620
mentioned already - the great Godfather of
Information Theory,

00:03:45.620 --> 00:03:50.870
Claude Shannon. So those are the two big
names around about this era.

00:03:50.870 --> 00:03:57.440
Shortly after the Information Theory and optimal 
codes, and so on, but in noiseless conditions,

00:03:57.440 --> 00:04:02.209
Claude Shannon. A few years later comes
Richard Hamming saying: "How can we detect

00:04:02.209 --> 00:04:06.290
errors and, more to the point, how could
we begin to correct to them?"

00:04:06.290 --> 00:04:10.970
You've put this on a plate for me because
I can discuss it in terms of how to get

00:04:10.970 --> 00:04:13.490
an ACK and a NAK back to San Francisco

00:04:13.490 --> 00:04:19.160
so that you can decide and correct
it, if it gets clobbered?.

00:04:19.760 --> 00:04:27.470
From now on the ACK will be to send
three zeros. Tthe NAK will be to send

00:04:27.470 --> 00:04:31.640
three ones. Suppose you send three.

00:04:31.640 --> 00:04:34.640
Why is that magic? What does it do?

00:04:34.640 --> 00:04:39.170
If it's a 3-bit pattern that you're
sending, then if those get varied for any

00:04:39.170 --> 00:04:40.340
reason of noise,

00:04:40.340 --> 00:04:44.690
the total number of combinations in
three bits - as we know off-by-heart now, is

00:04:44.690 --> 00:04:47.330
2 to the power 3:  eight combinations.

00:04:47.330 --> 00:04:50.510
Let me just pluck out of thin air

00:04:50.510 --> 00:05:01.040
the idea of representing those eight
combinations possible, as being the

00:05:01.040 --> 00:05:03.200
corners of a cube.

00:05:03.200 --> 00:05:08.780
Let me not go through the algorithm for
creating a Hamming code but just pluck it

00:05:08.780 --> 00:05:11.240
out of thin air, as I'm so fond of doing.

00:05:11.240 --> 00:05:17.870
Let's call this one, up here, our good
code of 000.

00:05:18.710 --> 00:05:27.800
Let's call this one - at the back lower
corner of the cube - 111. So that one, if

00:05:27.800 --> 00:05:30.710
you like, is representing ACK.

00:05:30.710 --> 00:05:40.070
This one is representing NAK. So, so long as 
your properties of your [telephone] line were

00:05:40.070 --> 00:05:46.370
such that errors were relatively
infrequent, and you got mostly

00:05:46.370 --> 00:05:47.960
one-binary-digit errors, then fine.

00:05:47.960 --> 00:05:53.750
Here's what would happen. You might send
000 and it ended up as being received

00:05:53.750 --> 00:05:59.030
as 010 - the middle bit got damaged.

00:05:59.720 --> 00:06:05.720
You might send a 111 and it got received
as a 110 - a one got into a zero.

00:06:05.720 --> 00:06:14.240
You might, for example, have sent three
zeros that I'll represent over here but the

00:06:14.240 --> 00:06:15.320
left hand

00:06:15.320 --> 00:06:21.380
bit got hit and became looking like a one.
Here's 101.

00:06:22.790 --> 00:06:29.330
This one is 001 and this one down the
bottom is 011.

00:06:30.470 --> 00:06:34.580
Let me just circle - these are what was
actually transmitted.

00:06:34.580 --> 00:06:39.020
So, can you see that what you are now in the
lovely position of being able to say is:

00:06:39.020 --> 00:06:42.500
if I received three zeros that's bound
to be good.

00:06:43.010 --> 00:06:46.760
Similarly if you see 111 trust it. It's a NAK

00:06:46.760 --> 00:06:51.380
But if you receive a 010 what then should you do?

00:06:51.890 --> 00:07:00.380
The rule is "maximum likelihood", if I can
spell that, or "nearest neighbour"

00:07:00.950 --> 00:07:06.200
correction. You can correct what you've
received by saying the following: I

00:07:06.200 --> 00:07:08.540
received 010

00:07:08.540 --> 00:07:12.230
I know that that is not on my list of
good codewords because the only good

00:07:12.230 --> 00:07:14.180
ones are 000 and 111.

00:07:14.180 --> 00:07:21.590
What's the most likely way to correct
010 back into being something good?

00:07:22.100 --> 00:07:26.840
Well, the answer is by going up this line
here, that's distance one away,

00:07:26.840 --> 00:07:32.060
I change the middle bit back to zero
and I've corrected it to 000. If

00:07:32.060 --> 00:07:37.669
I receive 001 the most likely thing
that's happened - with only one error

00:07:37.669 --> 00:07:42.320
taking place - is that the trailing zero
here got damaged into a one.

00:07:42.320 --> 00:07:45.590
So, my correction should be like this

00:07:45.590 --> 00:07:53.300
go distance one along the cube's edges
like that. 100 corrects back to 000.

00:07:53.300 --> 00:07:59.750
Now, same thing again look, the majority of the
bits here - 110, two out of three, match up

00:07:59.750 --> 00:08:05.210
with 111. Therefore my best and
most likely correction is to turn the

00:08:05.210 --> 00:08:06.890
zero back into a one.

00:08:06.890 --> 00:08:11.720
How about 101? Oh yeah, obviously this was
sent and it was the middle bit

00:08:11.720 --> 00:08:15.200
that got hit and turned into a 0. So,
correct that one

00:08:15.200 --> 00:08:21.530
down here, Finally, over here 011. Again

00:08:21.530 --> 00:08:26.570
two-thirds of the bits are correct but
the leading 1 got hit and turned into a 0.

00:08:26.570 --> 00:08:32.660
I clearly have to correct to that. So, you
can see - looking at that - that for all of

00:08:32.660 --> 00:08:40.700
the six corners of the cube that are not
the good undamaged codes, you have with

00:08:40.700 --> 00:08:46.220
nearest-neighbour maximum-likelihood
correction, a distance-1 correction

00:08:46.220 --> 00:08:51.800
algorithm. But the final thing to notice
is that, for this to work and you may

00:08:51.800 --> 00:08:56.390
remember - going back to my original
example of when you can detect but you

00:08:56.390 --> 00:09:01.640
can't correct - the thing there was that the
distance between the good codes was two.

00:09:01.640 --> 00:09:07.040
Notice that what we're doing here, now, is
that between these good codes I shall

00:09:07.040 --> 00:09:09.050
use yet another colour.

00:09:09.050 --> 00:09:13.430
If you want to get from 000 to 111

00:09:13.430 --> 00:09:20.060
you have got to take a journey involving
one, two, three steps.

00:09:20.060 --> 00:09:24.140
No matter how you get there you can go one
two, three go

00:09:24.140 --> 00:09:27.470
one, two, three down there,

00:09:27.470 --> 00:09:31.910
the good codes are distance-3 apart.

00:09:32.450 --> 00:09:38.150
So, this is the simplest example i can
think of, of what was generalized by

00:09:38.150 --> 00:09:41.690
Richard Hamming into being Hamming codes.

00:09:41.690 --> 00:09:45.920
The way you actually build them up,
algorithmically, is a bit involved but

00:09:45.920 --> 00:09:50.480
let you all look up about this if you
want some more information. Essentially

00:09:50.480 --> 00:09:56.900
Hamming codes are really really good, and
absolutely definitive in their time, for

00:09:56.900 --> 00:10:00.530
doing distance-1 corrections, OK?.

00:10:00.530 --> 00:10:04.820
For coping with things where only one

00:10:04.820 --> 00:10:05.610
bit was in error.

00:10:05.610 --> 00:10:10.800
Where things get massively
mathematical, utterly fascinating and

00:10:10.800 --> 00:10:17.310
deeply involved are the moment you start
saying: "Well, I'd like to correct one bit

00:10:17.310 --> 00:10:18.959
but not just in a 3-bit pattern.

00:10:18.959 --> 00:10:24.240
How about in a 32-bit pattern". Yeah! OK!
Well, how many different ways can

00:10:24.240 --> 00:10:29.640
that go wrong? And how are we going to
keep all of these different 1-bit errors

00:10:29.640 --> 00:10:35.160
apart from one another? How can we keep
the good codes well apart in a much

00:10:35.160 --> 00:10:42.390
bigger bit pattern? And where things get
pretty hilariously hairy is if you say

00:10:42.390 --> 00:10:45.660
Hmmm!  I don't want to correct just one bit

00:10:45.660 --> 00:10:53.190
I want to correct three bits, up to four
bits, up to seven bits ... And that gets you

00:10:53.190 --> 00:11:01.230
seriously involved in stuff with names
like field theory, rings, groups, cosets

00:11:01.230 --> 00:11:04.230
and other lovely stuff like that.

