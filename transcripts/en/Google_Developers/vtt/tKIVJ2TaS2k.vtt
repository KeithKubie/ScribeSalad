WEBVTT
Kind: captions
Language: en

00:00:05.240 --> 00:00:06.662
PAUL KINLAN: Hello everyone.

00:00:06.662 --> 00:00:07.620
My name is Paul Kinlan.

00:00:07.620 --> 00:00:08.390
KARSTEN SCHMIDT: Hello.

00:00:08.390 --> 00:00:08.820
PAUL KINLAN: Hello.

00:00:08.820 --> 00:00:09.640
You are?

00:00:09.640 --> 00:00:10.590
KARSTEN SCHMIDT:
Karsten Schmidt.

00:00:10.590 --> 00:00:11.256
PAUL KINLAN: Hi.

00:00:11.256 --> 00:00:13.529
We're here today to talk
about DevArt and the work

00:00:13.529 --> 00:00:15.320
that you're doing with
that DevArt project,

00:00:15.320 --> 00:00:20.040
what the DevArt project is, kind
of how you can get involved,

00:00:20.040 --> 00:00:22.950
and how you can start to kind
of explore some of the things

00:00:22.950 --> 00:00:25.002
that you might want to
do inside that project.

00:00:25.002 --> 00:00:27.460
So I think it's probably best
to start with an introduction

00:00:27.460 --> 00:00:29.296
to DevArt and what DevArt is.

00:00:29.296 --> 00:00:32.780
So DevArt is a project
by Google in combination

00:00:32.780 --> 00:00:35.277
with the Barbican,
where we've commissioned

00:00:35.277 --> 00:00:37.860
a number of developers to create
new digital art, essentially,

00:00:37.860 --> 00:00:41.230
which will appear
inside the Barbican

00:00:41.230 --> 00:00:43.324
in a digital
revolutions exhibition.

00:00:43.324 --> 00:00:45.240
The really cool thing
is that there's actually

00:00:45.240 --> 00:00:48.760
an extra slot open for a
developer through the DevArt

00:00:48.760 --> 00:00:50.970
project to be commissioned,
or to be commissioned

00:00:50.970 --> 00:00:53.420
alongside the three
artists that we've got.

00:00:53.420 --> 00:00:57.709
And one of those
artists is Karsten.

00:00:57.709 --> 00:00:59.250
One of the things
I will say, though,

00:00:59.250 --> 00:01:02.380
is that what we're trying to
do with the DevArt project

00:01:02.380 --> 00:01:04.660
is take developers
and let them explore

00:01:04.660 --> 00:01:06.890
their creative abilities.

00:01:06.890 --> 00:01:09.430
Sometimes, me especially
as a developer,

00:01:09.430 --> 00:01:11.239
I don't normally think
I'm that creative.

00:01:11.239 --> 00:01:13.030
But given some inspiration,
I can go and do

00:01:13.030 --> 00:01:16.960
some really cool things
inside the art space

00:01:16.960 --> 00:01:19.770
with code and
computer technology.

00:01:19.770 --> 00:01:23.240
And that's what we're trying
to inside the DevArt project.

00:01:23.240 --> 00:01:26.860
So with that, I will
just hand over to Karsten

00:01:26.860 --> 00:01:29.300
and let you introduce
yourself to our audience

00:01:29.300 --> 00:01:32.110
and let people know what
they might know you for.

00:01:32.110 --> 00:01:33.510
KARSTEN SCHMIDT: Who I am.

00:01:33.510 --> 00:01:36.860
OK, I'm Karsten.

00:01:36.860 --> 00:01:38.690
From East Germany,
but been living

00:01:38.690 --> 00:01:41.410
in London for 15 years
now, or 16 years.

00:01:41.410 --> 00:01:46.790
And I started when I was 13
years old writing for six years

00:01:46.790 --> 00:01:51.330
roughly just assembly and
hex code on the 8-bit Atari.

00:01:51.330 --> 00:01:53.830
And I joined the
local demo scene,

00:01:53.830 --> 00:01:57.690
which then became less local
and became more Europe wide.

00:01:57.690 --> 00:02:03.130
And then, when I was 18, I
wrote a port of "Lemmings"

00:02:03.130 --> 00:02:06.357
for the Atari, and then I
had enough of computers.

00:02:06.357 --> 00:02:07.815
PAUL KINLAN: When
you say Atari, do

00:02:07.815 --> 00:02:09.085
you mean Atari ST or the Atari--

00:02:09.085 --> 00:02:09.930
KARSTEN SCHMIDT:
The 8-bit Atari.

00:02:09.930 --> 00:02:10.846
PAUL KINLAN: The 2600?

00:02:10.846 --> 00:02:14.980
KARSTEN SCHMIDT: No,
the 800XL or 130XE.

00:02:14.980 --> 00:02:16.860
That whole group or family.

00:02:16.860 --> 00:02:18.930
PAUL KINLAN: Oh wow, OK.

00:02:18.930 --> 00:02:20.846
KARSTEN SCHMIDT: The
last 8-bit Atari, really.

00:02:20.846 --> 00:02:21.679
PAUL KINLAN: Oh wow.

00:02:21.679 --> 00:02:23.400
My dad used to fix
Ataris like crazy.

00:02:23.400 --> 00:02:23.690
KARSTEN SCHMIDT: Cool.

00:02:23.690 --> 00:02:24.690
PAUL KINLAN: Yeah, anyway.

00:02:24.690 --> 00:02:25.390
That's a side story.

00:02:25.390 --> 00:02:26.723
Doesn't really matter that much.

00:02:26.723 --> 00:02:30.330
KARSTEN SCHMIDT: Yeah, let's
not start with the C64 on Atari.

00:02:30.330 --> 00:02:32.180
And then I had
enough of computers.

00:02:32.180 --> 00:02:35.340
Made music for four years.

00:02:35.340 --> 00:02:36.810
Had my own studio.

00:02:36.810 --> 00:02:41.650
And from that, I really--
from my demo scene days,

00:02:41.650 --> 00:02:45.250
because I've kind of been
thrown in the deep end totally,

00:02:45.250 --> 00:02:47.990
and I had no idea of
programming before or actually

00:02:47.990 --> 00:02:49.330
what a computer is.

00:02:49.330 --> 00:02:52.980
So we had in our heads
no distinction of this

00:02:52.980 --> 00:02:56.020
is programming, this is
making music, or chip tunes,

00:02:56.020 --> 00:02:59.690
or making your own types or
icons for tools you needed,

00:02:59.690 --> 00:03:04.110
or making your own big font
for scrolling text and all

00:03:04.110 --> 00:03:04.720
that stuff.

00:03:04.720 --> 00:03:08.760
So for us it was really
everything related.

00:03:08.760 --> 00:03:11.290
And almost everything was
achieved through programming,

00:03:11.290 --> 00:03:15.410
because in the old days,
there were no tools, really.

00:03:15.410 --> 00:03:17.140
If you wanted to do
interesting things,

00:03:17.140 --> 00:03:19.450
you had to write your own stuff.

00:03:19.450 --> 00:03:22.750
And I think that mentality,
in hindsight now,

00:03:22.750 --> 00:03:25.070
was really the best
school I ever got.

00:03:25.070 --> 00:03:26.970
And it was especially
that first year,

00:03:26.970 --> 00:03:31.700
we had eight months time to do
a computer game from scratch.

00:03:31.700 --> 00:03:33.420
None of us knew anything.

00:03:33.420 --> 00:03:36.250
And it was insane pressure.

00:03:36.250 --> 00:03:39.050
We had only one hour
computer time a week.

00:03:39.050 --> 00:03:41.300
And everything else
happened on paper.

00:03:41.300 --> 00:03:43.650
And that's why I
still have now most

00:03:43.650 --> 00:03:47.755
of my work, which is not related
to actually typing in code,

00:03:47.755 --> 00:03:50.200
it's still notebook
based really.

00:03:50.200 --> 00:03:53.310
And I can see how this
will change really.

00:03:53.310 --> 00:03:54.454
Like with the tablets and--

00:03:54.454 --> 00:03:56.995
PAUL KINLAN: So I'm trying to
compare your notes to the notes

00:03:56.995 --> 00:03:59.190
that I've made.

00:03:59.190 --> 00:04:01.890
So everyone can't see
this on the screen, but--

00:04:01.890 --> 00:04:02.724
[INTERPOSING VOICES]

00:04:02.724 --> 00:04:04.098
PAUL KINLAN: It's
a very in depth

00:04:04.098 --> 00:04:06.420
kind of notepad with a lot
of ideas about what he's

00:04:06.420 --> 00:04:10.447
trying to do inside this
DevArt project at least.

00:04:10.447 --> 00:04:12.530
I don't know whether we're
going to get the chance

00:04:12.530 --> 00:04:13.800
to go through all
that sub stuff today.

00:04:13.800 --> 00:04:15.050
KARSTEN SCHMIDT: Probably not.

00:04:15.050 --> 00:04:18.290
I mean, you can go to
the DevArt website.

00:04:18.290 --> 00:04:21.640
I will document my
project in more detail

00:04:21.640 --> 00:04:24.190
than I've done so far,
because it's still early days.

00:04:24.190 --> 00:04:26.655
There's a lot of moving ground.

00:04:26.655 --> 00:04:28.030
PAUL KINLAN:
Actually, that's one

00:04:28.030 --> 00:04:30.446
of the really interesting
things about the DevArt project,

00:04:30.446 --> 00:04:34.830
is that the site itself is
powered by GitHub, essentially.

00:04:34.830 --> 00:04:36.799
Well, the server
is on App Engine

00:04:36.799 --> 00:04:38.090
and a whole lot of other stuff.

00:04:38.090 --> 00:04:40.820
But the actual back end itself
where you would normally

00:04:40.820 --> 00:04:42.880
have this weird CMS
where you're actually

00:04:42.880 --> 00:04:46.020
trying to manage projects
is actually done and powered

00:04:46.020 --> 00:04:47.000
by GitHub.

00:04:47.000 --> 00:04:52.020
So Karsten's code and all the
blog entries that you're making

00:04:52.020 --> 00:04:54.381
are all in this one
repository inside GitHub.

00:04:54.381 --> 00:04:54.880
So you--

00:04:54.880 --> 00:04:56.838
KARSTEN SCHMIDT: And
mostly there are 3D files.

00:04:56.838 --> 00:04:59.066
And I made some mockups
for the exhibit.

00:04:59.066 --> 00:05:00.940
So these are all Blender
files, for instance.

00:05:00.940 --> 00:05:01.892
So you can find them.

00:05:01.892 --> 00:05:02.600
PAUL KINLAN: Yes.

00:05:02.600 --> 00:05:04.550
As I recall, you can
basically take the code,

00:05:04.550 --> 00:05:06.610
follow exactly what
Karsten's doing,

00:05:06.610 --> 00:05:09.350
kind of Commit by Commit by
Commit, which is really cool.

00:05:09.350 --> 00:05:11.655
And the other two artists
as well are Zach--

00:05:11.655 --> 00:05:12.780
KARSTEN SCHMIDT: Lieberman.

00:05:12.780 --> 00:05:15.220
PAUL KINLAN: Yeah,
Zach Lieberman.

00:05:15.220 --> 00:05:19.770
And-- I keep always getting the
name wrong-- Varvara and Mar.

00:05:19.770 --> 00:05:22.930
They're also all got their
projects on GitHub as well.

00:05:22.930 --> 00:05:24.990
And you can follow
along as you go along.

00:05:24.990 --> 00:05:26.350
And there's the code side of it.

00:05:26.350 --> 00:05:27.610
And then there's also the--

00:05:27.610 --> 00:05:28.430
KARSTEN SCHMIDT: The assets.

00:05:28.430 --> 00:05:30.305
PAUL KINLAN: The assets,
yeah, and the posts.

00:05:30.305 --> 00:05:31.730
So it is like many
blog posts, all

00:05:31.730 --> 00:05:33.716
powered by the
Markdown engine that's

00:05:33.716 --> 00:05:34.840
been built into it as well.

00:05:34.840 --> 00:05:36.298
So you can follow
everything along.

00:05:36.298 --> 00:05:37.382
It's really nice.

00:05:37.382 --> 00:05:38.965
And you can just go
to the DevArt site

00:05:38.965 --> 00:05:40.350
if you don't want
to go to GitHub

00:05:40.350 --> 00:05:42.920
and just view all the
content from there.

00:05:42.920 --> 00:05:45.390
So probably a lot of people
who are watching this

00:05:45.390 --> 00:05:48.064
know you from the Processing
scene as well and a couple

00:05:48.064 --> 00:05:48.730
of other things.

00:05:48.730 --> 00:05:52.127
Do you want to kind of talk
about where you went with that?

00:05:52.127 --> 00:05:54.460
KARSTEN SCHMIDT: Yeah, so the
reason I actually stumbled

00:05:54.460 --> 00:05:59.520
or came across Processing
really more or less by accident.

00:05:59.520 --> 00:06:02.240
Because I've been
doing web development

00:06:02.240 --> 00:06:07.380
from like '95 to 2005 really.

00:06:07.380 --> 00:06:10.140
And I've been spending
a lot of my time

00:06:10.140 --> 00:06:11.460
with Director and with Flash.

00:06:11.460 --> 00:06:15.530
And I really realized that
it's quite scary an endeavor

00:06:15.530 --> 00:06:18.550
to focus your entire
livelihood on a single tool.

00:06:18.550 --> 00:06:21.230
And so I started
looking for options

00:06:21.230 --> 00:06:22.980
and going back more to my roots.

00:06:22.980 --> 00:06:27.180
And not use a premade
tool but actually start

00:06:27.180 --> 00:06:29.690
working on my own
tools yet again.

00:06:29.690 --> 00:06:33.630
And I came across Processing
just by looking around

00:06:33.630 --> 00:06:37.430
for what is there Java
based at the moment.

00:06:37.430 --> 00:06:38.740
And it was really still young.

00:06:38.740 --> 00:06:42.040
It was 2003, spring 2003.

00:06:42.040 --> 00:06:43.600
And I found it
super interesting,

00:06:43.600 --> 00:06:47.870
and I just shoot an
email to Casey and Ben

00:06:47.870 --> 00:06:49.290
in how I can help.

00:06:49.290 --> 00:06:53.960
And I did then end up
contributing a few little bits

00:06:53.960 --> 00:06:55.060
to the graphics engine.

00:06:55.060 --> 00:06:58.890
But mainly started really using
Processing for my own work

00:06:58.890 --> 00:07:05.770
and realized that this is really
transforming everything I knew

00:07:05.770 --> 00:07:08.260
and actually everything
I wanted to do,

00:07:08.260 --> 00:07:13.180
but didn't really have the
tools to do that beforehand.

00:07:13.180 --> 00:07:18.780
And so it became, really, a
stepping stone in my career.

00:07:18.780 --> 00:07:21.580
But then I also
realized that there

00:07:21.580 --> 00:07:22.980
are a lot of things
in Processing

00:07:22.980 --> 00:07:25.930
which are really more or less
focused on just the display

00:07:25.930 --> 00:07:26.430
side.

00:07:26.430 --> 00:07:30.540
And really aiming for this
creative computing field as it

00:07:30.540 --> 00:07:32.220
was emerging back then.

00:07:32.220 --> 00:07:37.120
And I was more focused on
actually doing something which

00:07:37.120 --> 00:07:39.530
allows you to solve
actual design problems.

00:07:39.530 --> 00:07:41.970
So where you have, for
instance, not where it's

00:07:41.970 --> 00:07:44.870
a tool which is not just
making it easy to draw objects

00:07:44.870 --> 00:07:47.340
on screen, but actually
work with those objects

00:07:47.340 --> 00:07:50.870
as abstract entities
to do stuff with them.

00:07:50.870 --> 00:07:53.270
So for instance, instead
of just drawing in

00:07:53.270 --> 00:07:56.450
libs on screen, which you can do
in Canvas with one line of code

00:07:56.450 --> 00:07:58.920
or in Processing with
one line of code,

00:07:58.920 --> 00:08:00.857
the computer system
has no idea that this

00:08:00.857 --> 00:08:03.370
is a circle you
are just drawing.

00:08:03.370 --> 00:08:06.590
So what I started
then focusing on

00:08:06.590 --> 00:08:08.660
is to actually
provide a set of tools

00:08:08.660 --> 00:08:14.040
which allows you to work with
geometry initially as entities

00:08:14.040 --> 00:08:17.730
which you can analyze
and combine and transform

00:08:17.730 --> 00:08:19.390
from one into another.

00:08:19.390 --> 00:08:23.820
And I think I
realized how important

00:08:23.820 --> 00:08:27.080
that is to actually solve
real world projects, you know.

00:08:27.080 --> 00:08:29.190
And how you can
actually combine this

00:08:29.190 --> 00:08:32.049
with all the other interesting
things going on at the time

00:08:32.049 --> 00:08:33.370
and also now.

00:08:33.370 --> 00:08:37.530
Like, say, agent-based systems,
particle systems, physics.

00:08:37.530 --> 00:08:41.570
And then it just exploded
from there, really,

00:08:41.570 --> 00:08:42.919
in terms of scope.

00:08:42.919 --> 00:08:47.400
And in 2007, then I took
that seriously, really,

00:08:47.400 --> 00:08:51.980
and started setting up my own
studio, or really my own design

00:08:51.980 --> 00:08:52.480
practice.

00:08:52.480 --> 00:08:55.960
It wasn't ever a studio, really.

00:08:55.960 --> 00:08:59.620
And there I really tried to
focus for the first two years

00:08:59.620 --> 00:09:03.480
to recheck any form of
project which would not

00:09:03.480 --> 00:09:08.070
allowed that new open
source project to grow.

00:09:08.070 --> 00:09:10.760
So basically, I
turned down every work

00:09:10.760 --> 00:09:14.390
which would create some
form of repetition.

00:09:14.390 --> 00:09:17.260
And that actually allowed
me to work with people

00:09:17.260 --> 00:09:19.230
I never could work before.

00:09:19.230 --> 00:09:22.510
With like lighting designers,
architects, and that kind

00:09:22.510 --> 00:09:25.940
of other part of
the design world.

00:09:25.940 --> 00:09:29.660
And that, I still think, is
the most interesting part

00:09:29.660 --> 00:09:32.090
of my job today.

00:09:32.090 --> 00:09:37.200
I'm always trying to meander
between the commercial design

00:09:37.200 --> 00:09:40.810
world and the more artistic,
free form expression, which

00:09:40.810 --> 00:09:47.260
for me is mainly just research
for future and more pragmatic

00:09:47.260 --> 00:09:48.760
projects.

00:09:48.760 --> 00:09:51.183
PAUL KINLAN: So I
suppose like-- this

00:09:51.183 --> 00:09:53.970
is going to sound stupid--
is that the fun part for you?

00:09:53.970 --> 00:09:56.282
Or is it-- is this like--

00:09:56.282 --> 00:09:57.740
KARSTEN SCHMIDT:
I don't really-- I

00:09:57.740 --> 00:10:01.740
think it's a hard question.

00:10:01.740 --> 00:10:05.590
I think what is good when
you have a client project--

00:10:05.590 --> 00:10:09.170
and even this is essentially
a client project, you know.

00:10:09.170 --> 00:10:11.780
It's only in the art world we
called those people patrons

00:10:11.780 --> 00:10:12.720
versus clients.

00:10:12.720 --> 00:10:18.040
So I think the dynamics are not
that actually very different.

00:10:18.040 --> 00:10:20.780
But I think what always helps
is if you have a deadline.

00:10:20.780 --> 00:10:23.840
It just stops
procrastination and it

00:10:23.840 --> 00:10:26.430
keeps you focused on
achieving results.

00:10:26.430 --> 00:10:30.240
But I think the kind
of process is not

00:10:30.240 --> 00:10:34.127
very different to how I would
do a commercial project.

00:10:34.127 --> 00:10:35.418
PAUL KINLAN: Yeah, that's cool.

00:10:38.567 --> 00:10:40.900
So what I wanted to start us
talking about now, recently

00:10:40.900 --> 00:10:45.135
at least anyway, is more on
the everything is inside the,

00:10:45.135 --> 00:10:47.410
I want to say, digital
space, inside the computer.

00:10:47.410 --> 00:10:50.401
How do you see
this kind of work?

00:10:50.401 --> 00:10:52.650
We're going to show this
work in a little bit as well.

00:10:52.650 --> 00:10:56.290
How do you see the
interaction between, say,

00:10:56.290 --> 00:11:01.890
software and physical objects
and those type of experiences?

00:11:01.890 --> 00:11:03.410
KARSTEN SCHMIDT:
Well A, everyone

00:11:03.410 --> 00:11:05.820
knows it and it's
happening all around us.

00:11:05.820 --> 00:11:08.900
But this convergence of--
and I really hate the word

00:11:08.900 --> 00:11:10.990
but there's no better
English word for it.

00:11:10.990 --> 00:11:12.076
PAUL KINLAN: It's
better than synergy.

00:11:12.076 --> 00:11:13.117
KARSTEN SCHMIDT: Yes, OK.

00:11:13.117 --> 00:11:16.380
Yes, point taken.

00:11:16.380 --> 00:11:19.550
But I think everyone talks
about that everything

00:11:19.550 --> 00:11:22.100
becomes more and
more digital and we

00:11:22.100 --> 00:11:25.420
have more of our computing
elements and all sorts

00:11:25.420 --> 00:11:29.300
of objects which we didn't
have even five years ago.

00:11:29.300 --> 00:11:33.810
And I think what we
don't really realize yet,

00:11:33.810 --> 00:11:38.910
and a lot of people actually who
do more like software research

00:11:38.910 --> 00:11:41.560
they actually are becoming
more and more aware of it

00:11:41.560 --> 00:11:44.630
that hardware progress
is not slowing down,

00:11:44.630 --> 00:11:49.730
but software progress actually
is almost the more slower

00:11:49.730 --> 00:11:51.360
and software is
not there anymore.

00:11:51.360 --> 00:11:52.360
PAUL KINLAN: Why's that?

00:11:52.360 --> 00:11:58.160
KARSTEN SCHMIDT: Because
a lot of our algorithms

00:11:58.160 --> 00:11:59.720
were designed in the '60s.

00:11:59.720 --> 00:12:02.450
A lot of the key
algorithms-- and they

00:12:02.450 --> 00:12:06.775
don't actually transpose
that easily to a multi-core

00:12:06.775 --> 00:12:09.590
or fully distributed system.

00:12:09.590 --> 00:12:13.910
So I think we need a lot more
different ways of programming

00:12:13.910 --> 00:12:16.460
and actually thinking
about what code can do

00:12:16.460 --> 00:12:18.790
and how it actually does it.

00:12:18.790 --> 00:12:20.950
And that really means
we need to think more

00:12:20.950 --> 00:12:23.110
about the languages we
use in the first place.

00:12:23.110 --> 00:12:25.860
And that's something which
became, in the last three years

00:12:25.860 --> 00:12:29.120
for me, really
the main interest.

00:12:29.120 --> 00:12:33.550
To figure out A, because
software technology has

00:12:33.550 --> 00:12:38.030
progressed so far now that we
can design so-called domain

00:12:38.030 --> 00:12:42.880
specific languages
for, say, this project,

00:12:42.880 --> 00:12:45.710
I will design my own
little language simply

00:12:45.710 --> 00:12:47.680
because it makes a
lot of things easier.

00:12:47.680 --> 00:12:54.440
But the same thing can be
applied to more bigger aspects

00:12:54.440 --> 00:12:55.200
as well.

00:12:55.200 --> 00:12:59.260
And if you look at the history
of programming languages,

00:12:59.260 --> 00:13:01.450
you can really see
how much crossbreeding

00:13:01.450 --> 00:13:04.870
there is going on all the
time between those languages.

00:13:04.870 --> 00:13:09.240
And especially recently, we have
this kind of Cambrian explosion

00:13:09.240 --> 00:13:12.410
of languages where there's
so many coming out.

00:13:12.410 --> 00:13:15.510
Like Mozilla released
Rust now and this

00:13:15.510 --> 00:13:18.330
is what they're
heavily investing in.

00:13:18.330 --> 00:13:23.620
C++ has a new version even
though there is not that much

00:13:23.620 --> 00:13:28.220
impact happened, not much change
compared to previous ones.

00:13:28.220 --> 00:13:30.440
PAUL KINLAN: So do
you see-- I don't

00:13:30.440 --> 00:13:33.330
know whether this is the
right question or not.

00:13:33.330 --> 00:13:38.030
These languages like Rust,
C++, even Java Enclosure--

00:13:38.030 --> 00:13:40.810
which we're going to
talk about in a minute--

00:13:40.810 --> 00:13:42.250
they're all very
low level, right?

00:13:42.250 --> 00:13:44.124
Like they're designed
for programmers, right?

00:13:44.124 --> 00:13:47.665
When we talk about
DSLs, do we see that

00:13:47.665 --> 00:13:50.160
or do you see that going towards
more of the consumer space

00:13:50.160 --> 00:13:51.410
so people can build their own?

00:13:51.410 --> 00:13:52.890
KARSTEN SCHMIDT:
Yes, but there, I

00:13:52.890 --> 00:13:55.040
mean it's again what do
you consider programming?

00:13:55.040 --> 00:13:56.540
That's also one of
two things I want

00:13:56.540 --> 00:13:58.970
to explore in the
DevArt proposal is

00:13:58.970 --> 00:14:01.370
that what I'm
basically proposing

00:14:01.370 --> 00:14:04.160
is a kind of visual
form of programming

00:14:04.160 --> 00:14:05.230
which is super limited.

00:14:05.230 --> 00:14:07.850
It only has less
than five operators,

00:14:07.850 --> 00:14:09.910
or less than five words.

00:14:09.910 --> 00:14:15.430
And that kind of limitation,
history has shown us

00:14:15.430 --> 00:14:21.660
many times, has intense scope
for creative exploration.

00:14:21.660 --> 00:14:24.960
Because there's not
much to understand

00:14:24.960 --> 00:14:28.200
in terms of learning
vocabulary, and people

00:14:28.200 --> 00:14:31.190
who are interested to
achieve a certain idea,

00:14:31.190 --> 00:14:36.860
they will push those available
options to their limits.

00:14:36.860 --> 00:14:40.960
And I think if we think
about more recent projects

00:14:40.960 --> 00:14:44.860
like Node-RED, IBM's
thing and-- there's

00:14:44.860 --> 00:14:49.840
another similar note-based
[INAUDIBLE] kind

00:14:49.840 --> 00:14:52.240
of visual programming
thing which is coming out.

00:14:52.240 --> 00:14:55.280
I mean that has a
long history which

00:14:55.280 --> 00:14:57.010
is running pretty
much in parallel

00:14:57.010 --> 00:14:59.610
to the text based
form of programming.

00:14:59.610 --> 00:15:04.370
But I think those kind of high
level approaches to arranging

00:15:04.370 --> 00:15:09.790
moving bits of logic into
a consumer friendly way

00:15:09.790 --> 00:15:11.210
is happening more and more.

00:15:11.210 --> 00:15:13.352
There's also an
if-then, then that.

00:15:13.352 --> 00:15:14.060
PAUL KINLAN: Yes.

00:15:14.060 --> 00:15:19.160
KARSTEN SCHMIDT: And these are
all-- you can't call them DSLs,

00:15:19.160 --> 00:15:22.640
but technically they are.

00:15:22.640 --> 00:15:24.000
[INTERPOSING VOICES]

00:15:24.000 --> 00:15:26.870
KARSTEN SCHMIDT: They have
been so repurposed and so

00:15:26.870 --> 00:15:31.570
much designed and consumerized
that you can't call them

00:15:31.570 --> 00:15:34.850
a programming language as
such, but there's definitely

00:15:34.850 --> 00:15:37.447
an element of a
language in there.

00:15:37.447 --> 00:15:39.280
PAUL KINLAN: So you
mentioned about the idea

00:15:39.280 --> 00:15:42.055
of this really
constrained language which

00:15:42.055 --> 00:15:43.430
will help you
build your project.

00:15:43.430 --> 00:15:45.490
Well, help people who
interact with your project

00:15:45.490 --> 00:15:46.810
build things with it.

00:15:46.810 --> 00:15:48.268
Do you want to
explain a little bit

00:15:48.268 --> 00:15:49.860
about what your
project is for DevArt?

00:15:49.860 --> 00:15:50.735
KARSTEN SCHMIDT: Yes.

00:15:50.735 --> 00:15:54.120
So the idea of DevArt or
of my project for DevArt

00:15:54.120 --> 00:15:56.870
is that there will
be a 3D printer

00:15:56.870 --> 00:16:00.120
in the exhibit in the museum.

00:16:00.120 --> 00:16:03.430
And that printer will
print one object per day.

00:16:03.430 --> 00:16:05.940
And visitors in the
museum will basically

00:16:05.940 --> 00:16:08.630
take over the role
of the curator

00:16:08.630 --> 00:16:13.090
and choose what objects will
be printed for the next day.

00:16:13.090 --> 00:16:15.030
So there's a running vote.

00:16:15.030 --> 00:16:17.260
And if an object
has been printed,

00:16:17.260 --> 00:16:18.950
it can't be printed
again, simply

00:16:18.950 --> 00:16:22.780
to keep the pool
open for newcomers.

00:16:22.780 --> 00:16:27.020
And the other main
part, and it's really

00:16:27.020 --> 00:16:32.130
the main part of the project,
is a web based design tool slash

00:16:32.130 --> 00:16:37.090
exploration tool, which
is open to anyone, really.

00:16:37.090 --> 00:16:41.240
So I'm hoping that will be able
to run on a tablet as well.

00:16:41.240 --> 00:16:43.329
That's pending hardware.

00:16:43.329 --> 00:16:44.620
PAUL KINLAN: Using [INAUDIBLE]?

00:16:44.620 --> 00:16:45.590
KARSTEN SCHMIDT: Yes of course.

00:16:45.590 --> 00:16:46.200
PAUL KINLAN: You would
probably be good.

00:16:46.200 --> 00:16:47.575
KARSTEN SCHMIDT:
Of course, yeah.

00:16:47.575 --> 00:16:48.380
I mean, they--

00:16:48.380 --> 00:16:49.170
PAUL KINLAN: It could
work on an Android tablet,

00:16:49.170 --> 00:16:49.890
it might not work on an iPhone.

00:16:49.890 --> 00:16:50.973
KARSTEN SCHMIDT: Yeah, no.

00:16:50.973 --> 00:16:53.070
The thing is too I
think with webtrees

00:16:53.070 --> 00:16:55.960
as to the difference
between rendering

00:16:55.960 --> 00:16:57.980
and actually
geometry generation.

00:16:57.980 --> 00:17:00.830
So I think the
geometry generation,

00:17:00.830 --> 00:17:02.730
you can do obviously
in open share,

00:17:02.730 --> 00:17:05.619
you can use geometry shaders.

00:17:05.619 --> 00:17:09.319
But there's still
a big difference

00:17:09.319 --> 00:17:13.270
what has to run on
the CPU versus GPU.

00:17:13.270 --> 00:17:16.319
But we have App Engine, we
have Compute Cloud available.

00:17:16.319 --> 00:17:18.569
So these are the
kind of technologies

00:17:18.569 --> 00:17:24.170
where I'm trying to offload
at least part of the generator

00:17:24.170 --> 00:17:26.460
aspect into the cloud.

00:17:26.460 --> 00:17:28.650
If you have, for instance,
just your mobile phone,

00:17:28.650 --> 00:17:31.830
you can't expect to generate
a mesh with half a million

00:17:31.830 --> 00:17:35.194
vertices and kill your battery
not in the next 10 minutes.

00:17:35.194 --> 00:17:36.610
PAUL KINLAN: So I
have a question.

00:17:36.610 --> 00:17:38.565
Why would you need half
a million vertices?

00:17:38.565 --> 00:17:39.940
KARSTEN SCHMIDT:
Because what I'm

00:17:39.940 --> 00:17:46.190
after is really to explore how
a very simple design process can

00:17:46.190 --> 00:17:50.810
create a super
complex shape or form.

00:17:50.810 --> 00:17:53.380
And I don't want to
necessarily restrict

00:17:53.380 --> 00:17:54.610
what those forms can be.

00:17:54.610 --> 00:17:56.780
Obviously the design
process and options

00:17:56.780 --> 00:17:58.690
were restricted
indirectly, but I

00:17:58.690 --> 00:18:00.620
don't know yet what
the restrictions are.

00:18:00.620 --> 00:18:05.650
And I think it's a very that's
where it goes more into the art

00:18:05.650 --> 00:18:10.030
world, in my opinion, is that
what we are building here,

00:18:10.030 --> 00:18:11.760
or what I am proposing
to build here

00:18:11.760 --> 00:18:15.850
is actually an open
ended world, potentially.

00:18:15.850 --> 00:18:17.760
And it will be
down to the people

00:18:17.760 --> 00:18:22.560
and the interested parties who
will take part in that journey

00:18:22.560 --> 00:18:25.360
to explore what
that is, actually.

00:18:25.360 --> 00:18:27.570
And I think this is where
you have a big difference

00:18:27.570 --> 00:18:30.210
to a commercial client
project, where the client has

00:18:30.210 --> 00:18:33.480
a specific aim, what
needs to be achieved

00:18:33.480 --> 00:18:37.185
and here, this is
more or less fluid.

00:18:37.185 --> 00:18:38.560
PAUL KINLAN: So
one of the things

00:18:38.560 --> 00:18:41.520
that we were talking about,
this constrained language.

00:18:41.520 --> 00:18:45.460
So it's the client that is
constrained by the-- can you

00:18:45.460 --> 00:18:47.540
talk about how the
client and the server--

00:18:47.540 --> 00:18:49.081
KARSTEN SCHMIDT: So
I need to explain

00:18:49.081 --> 00:18:50.840
a bit more what the
design process is.

00:18:50.840 --> 00:18:55.390
So right now, the whole
project is called Code Factory,

00:18:55.390 --> 00:18:58.120
but this is really
just a working title.

00:18:58.120 --> 00:19:01.000
And it still is a
form of factory,

00:19:01.000 --> 00:19:03.800
what we are talking
about, but I think

00:19:03.800 --> 00:19:06.870
there needs to be more reference
to my recent thinking, which

00:19:06.870 --> 00:19:11.520
is all to do with biology
and initial embryonic stages

00:19:11.520 --> 00:19:12.360
of development.

00:19:12.360 --> 00:19:15.000
So once you have
the egg splitting

00:19:15.000 --> 00:19:19.950
into the initial ball of cells
and then actually forming

00:19:19.950 --> 00:19:26.410
a fully 3D object from an
initial almost flat structure.

00:19:26.410 --> 00:19:30.520
And so the design options
I'm exploring right now

00:19:30.520 --> 00:19:33.740
are simply doing proposing
a process which only allows

00:19:33.740 --> 00:19:38.700
you to subdivide existing
structures to extrude them

00:19:38.700 --> 00:19:44.400
or to actually replicate
them in different directions.

00:19:44.400 --> 00:19:46.240
And from those
three options, there

00:19:46.240 --> 00:19:48.570
are a few other
candidates which I still

00:19:48.570 --> 00:19:51.750
need to explore technically,
if this is actually possible.

00:19:51.750 --> 00:19:53.690
From those three
options, you should

00:19:53.690 --> 00:19:59.530
be able to generate a large
number of possibilities.

00:19:59.530 --> 00:20:03.620
And again, I don't want
to limit what you can do.

00:20:03.620 --> 00:20:05.939
But we can look at
some examples later.

00:20:05.939 --> 00:20:07.980
PAUL KINLAN: We're going
to switch to the screen.

00:20:07.980 --> 00:20:09.479
Switch now, or?

00:20:09.479 --> 00:20:11.020
KARSTEN SCHMIDT: So
what you see here

00:20:11.020 --> 00:20:13.980
is basically left
hand side are my EMacs

00:20:13.980 --> 00:20:17.040
and the right hand
side shows MeshLab,

00:20:17.040 --> 00:20:20.810
which is an open
source mesh viewer.

00:20:20.810 --> 00:20:25.990
So what you see here on the left
basically in Clojure and that--

00:20:25.990 --> 00:20:27.240
PAUL KINLAN: Clojure with a J?

00:20:27.240 --> 00:20:29.040
KARSTEN SCHMIDT:
Clojure with a J, yes.

00:20:29.040 --> 00:20:30.150
And we will get to that.

00:20:30.150 --> 00:20:32.675
There's also closure with an s.

00:20:32.675 --> 00:20:35.960
And that is Google's offering.

00:20:35.960 --> 00:20:38.650
Obviously a lot of you
probably will know that.

00:20:38.650 --> 00:20:45.090
So what this is here using is
it has not technically so much

00:20:45.090 --> 00:20:47.050
to do with DevArt
just yet, but it's

00:20:47.050 --> 00:20:50.360
using all the meshing
tools I've been building

00:20:50.360 --> 00:20:53.550
for the last few months to
actually make all that happen.

00:20:53.550 --> 00:20:56.120
But we can also start
with something simple.

00:20:56.120 --> 00:20:58.550
So for instance, we
have here an axis

00:20:58.550 --> 00:21:01.530
aligned bounding box, an AABB.

00:21:01.530 --> 00:21:03.610
You can look that
up on Wikipedia.

00:21:03.610 --> 00:21:07.990
So that's basically just a
cube positioned in 3D space.

00:21:07.990 --> 00:21:12.530
And we turn this into a mesh and
then we can also smoothen this,

00:21:12.530 --> 00:21:14.690
but let's just not do
it in the beginning.

00:21:14.690 --> 00:21:17.029
So if I refresh here.

00:21:17.029 --> 00:21:18.945
PAUL KINLAN: So you told
me earlier about the,

00:21:18.945 --> 00:21:20.360
was it the Catmull-Clark?

00:21:20.360 --> 00:21:21.680
Was there--

00:21:21.680 --> 00:21:23.370
KARSTEN SCHMIDT: Yeah,
so, Catmull-Clark

00:21:23.370 --> 00:21:28.780
is the name of a mesh
subdivision algorithm invented

00:21:28.780 --> 00:21:31.740
by Ed Catmull, and I
forgot this first name

00:21:31.740 --> 00:21:34.110
of the other person, Clark.

00:21:34.110 --> 00:21:34.640
Sorry.

00:21:34.640 --> 00:21:40.200
But Ed Catmull is one of the
founders of Pixar and formerly

00:21:40.200 --> 00:21:42.100
Industrial Light &amp; Magic.

00:21:42.100 --> 00:21:44.010
And what you can
basically do with that,

00:21:44.010 --> 00:21:46.550
so we have here the simple cube.

00:21:46.550 --> 00:21:49.320
And that is obviously
very boring.

00:21:49.320 --> 00:21:52.870
But then we can for instance
start running this also

00:21:52.870 --> 00:21:55.050
through the subdivision process.

00:21:55.050 --> 00:21:56.680
And now it already
looks like this.

00:21:56.680 --> 00:22:00.750
And because this can
be applied recursively.

00:22:00.750 --> 00:22:05.530
So if I reevaluate this,
refresh this after two stages,

00:22:05.530 --> 00:22:09.310
and if you do here
say for instance five,

00:22:09.310 --> 00:22:11.880
then it is a really smooth mesh.

00:22:11.880 --> 00:22:14.660
Even though technically
you are still only working

00:22:14.660 --> 00:22:17.730
with a box which is
eight points in space,

00:22:17.730 --> 00:22:21.790
you fuse simple
transformations, you end up

00:22:21.790 --> 00:22:24.270
with something far more complex.

00:22:24.270 --> 00:22:26.470
Here's another example where
we, for instance, start

00:22:26.470 --> 00:22:29.640
with a circle radius
100 and we turn it

00:22:29.640 --> 00:22:32.010
into a hexagon in this line.

00:22:32.010 --> 00:22:35.860
And then we extrude that
hexagon along the set axis

00:22:35.860 --> 00:22:44.130
and we end up with basically
something like that.

00:22:44.130 --> 00:22:47.560
Boring, but that's
besides the point.

00:22:47.560 --> 00:22:50.270
And then here we can
also extrude, instead

00:22:50.270 --> 00:22:53.930
of just the solid--
let's go a bit higher up,

00:22:53.930 --> 00:22:56.150
we extrude actually as a shell.

00:22:56.150 --> 00:23:00.230
So we basically get now
some walls on the side.

00:23:00.230 --> 00:23:02.800
And we also run this through
another subdivision process

00:23:02.800 --> 00:23:06.290
called Doo-Sabin,
which is almost

00:23:06.290 --> 00:23:09.370
the same as Catmull-Clark.

00:23:09.370 --> 00:23:11.580
And now I was too fast.

00:23:11.580 --> 00:23:15.170
We have to edit that.

00:23:15.170 --> 00:23:17.820
Come on.

00:23:17.820 --> 00:23:19.030
Yeah, here it was.

00:23:19.030 --> 00:23:20.840
And, oops.

00:23:23.760 --> 00:23:25.810
It needs to be edited, sorry.

00:23:25.810 --> 00:23:27.510
PAUL KINLAN: That's cool.

00:23:27.510 --> 00:23:28.720
KARSTEN SCHMIDT: Refresh.

00:23:28.720 --> 00:23:31.570
So here, then we end up
with something like that.

00:23:31.570 --> 00:23:33.240
So that was still
technically you

00:23:33.240 --> 00:23:35.830
can see the pentagon
very vaguely.

00:23:35.830 --> 00:23:40.290
One, two, three, four, five.

00:23:40.290 --> 00:23:42.870
But it has been smoothed
and we don't actually

00:23:42.870 --> 00:23:44.740
use all the points
for the side wall,

00:23:44.740 --> 00:23:47.780
so you can very quickly
get complex stuff here.

00:23:47.780 --> 00:23:52.960
We can also remove the
bottom and the top.

00:23:52.960 --> 00:23:58.560
So that means we will only
get the side walls now.

00:23:58.560 --> 00:24:01.560
And I was too fast again.

00:24:01.560 --> 00:24:03.730
Sorry.

00:24:03.730 --> 00:24:07.250
So now we only end up
with the side walls.

00:24:07.250 --> 00:24:15.300
But it's actually not connected,
so if we want the full shape,

00:24:15.300 --> 00:24:21.790
then we can-- there we go.

00:24:21.790 --> 00:24:25.230
You can still vaguely
see the pentagon.

00:24:25.230 --> 00:24:28.590
So here, you basically have
those three parameters again.

00:24:28.590 --> 00:24:31.240
The radius, number
of teeth, and then we

00:24:31.240 --> 00:24:33.140
define a profile,
which is basically

00:24:33.140 --> 00:24:36.270
the shape of an
individual tooth.

00:24:36.270 --> 00:24:40.590
And we can evaluate
that as well.

00:24:40.590 --> 00:24:43.080
And that forms then
something like this.

00:24:43.080 --> 00:24:47.910
So if you see, it's like
two lines of code really.

00:24:47.910 --> 00:24:50.320
And it's a super
powerful way of thinking

00:24:50.320 --> 00:24:52.720
about how objects are
actually designed.

00:24:52.720 --> 00:24:55.290
Everything is
parametric, everything

00:24:55.290 --> 00:24:57.850
can be replaced
by another process

00:24:57.850 --> 00:25:03.660
so that 100 might be coming in
from some other previous stage.

00:25:03.660 --> 00:25:07.010
And there's no reason why this
couldn't be, for instance,

00:25:07.010 --> 00:25:12.450
combined with a physics engine
which then actually calculates

00:25:12.450 --> 00:25:15.430
the rotation of the cogs if
you would have more than one

00:25:15.430 --> 00:25:18.060
in a system.

00:25:18.060 --> 00:25:21.800
And the other nice
thing is those files

00:25:21.800 --> 00:25:23.930
are immediately 3D printable.

00:25:23.930 --> 00:25:26.100
There's no further
post processing needed.

00:25:29.780 --> 00:25:31.880
So the reason now
maybe I should talk

00:25:31.880 --> 00:25:34.000
about why I am using
closure for that.

00:25:34.000 --> 00:25:34.840
PAUL KINLAN: Yeah,
that'd be cool.

00:25:34.840 --> 00:25:36.381
KARSTEN SCHMIDT:
Which is, so Clojure

00:25:36.381 --> 00:25:38.640
is a modern dialect of Lisp.

00:25:38.640 --> 00:25:42.300
And right now, as I'm
evaluating this here,

00:25:42.300 --> 00:25:43.980
this is running on the JVM.

00:25:43.980 --> 00:25:46.820
So basically all that
code you see on the left

00:25:46.820 --> 00:25:50.100
is compiled into Java bytecode.

00:25:50.100 --> 00:25:57.300
And Clojure has since 2012, if
I'm not mistaken-- yes summer

00:25:57.300 --> 00:26:03.220
of 2012-- it has a dialect
which is called clojurescript.

00:26:03.220 --> 00:26:07.330
And that uses the Google
closure with an s compiler

00:26:07.330 --> 00:26:12.380
to actually compile into really
heavily optimized JavaScript.

00:26:12.380 --> 00:26:17.080
So that means all that code
I am having here, I actually

00:26:17.080 --> 00:26:20.189
can compile into JavaScript
and run as well in the browser.

00:26:20.189 --> 00:26:21.230
PAUL KINLAN: That's cool.

00:26:21.230 --> 00:26:23.760
KARSTEN SCHMIDT: And there's
actually so much development

00:26:23.760 --> 00:26:27.380
happening around clojurescript
in the entire toolchain.

00:26:27.380 --> 00:26:29.910
So it's a super new project
and a super new language.

00:26:29.910 --> 00:26:32.900
Two years is nothing.

00:26:32.900 --> 00:26:35.600
But there's a lot of
momentum happening.

00:26:35.600 --> 00:26:40.130
And we have, for instance,
a so-called browser rebel,

00:26:40.130 --> 00:26:42.900
where you can have a
browser window open, enter

00:26:42.900 --> 00:26:44.410
your normal text editor.

00:26:44.410 --> 00:26:46.710
And all the changes
you do immediately

00:26:46.710 --> 00:26:48.500
get pushed into
the browser and you

00:26:48.500 --> 00:26:51.950
can create your DOM from
your normal text editor

00:26:51.950 --> 00:26:53.860
and manipulate anything.

00:26:53.860 --> 00:26:57.160
So that's even almost better
than JavaScript itself,

00:26:57.160 --> 00:27:00.960
even though it's using all
of the technology already

00:27:00.960 --> 00:27:02.680
existing.

00:27:02.680 --> 00:27:03.270
Yeah.

00:27:03.270 --> 00:27:05.547
PAUL KINLAN: So
you see yourself--

00:27:05.547 --> 00:27:07.130
I see we're probably
not going to have

00:27:07.130 --> 00:27:08.582
a cog function at DevArt.

00:27:08.582 --> 00:27:10.040
KARSTEN SCHMIDT:
Of course, no, no.

00:27:10.040 --> 00:27:14.910
As I say, those functions here,
they are for me to explore,

00:27:14.910 --> 00:27:17.990
not to explore, more
test the meshing

00:27:17.990 --> 00:27:21.700
features because all the meshes
itself is basically a graph

00:27:21.700 --> 00:27:24.630
structure and I need
to have something

00:27:24.630 --> 00:27:27.230
which can be
verified technically

00:27:27.230 --> 00:27:30.240
if all the subdivisions
actually makes sense,

00:27:30.240 --> 00:27:31.770
or the extrusion processes.

00:27:31.770 --> 00:27:37.280
So having a workflow like this
where I have a 3D preview tied

00:27:37.280 --> 00:27:41.490
to my editor is a perfect
way of developing.

00:27:41.490 --> 00:27:44.160
PAUL KINLAN: So what's the
next step for you in this?

00:27:44.160 --> 00:27:47.014
Because at some point, you're
going to have to go to-- this

00:27:47.014 --> 00:27:48.930
is what I'm actually
trying to explore myself,

00:27:48.930 --> 00:27:50.830
is that at some point you're
going to have to go not

00:27:50.830 --> 00:27:52.700
to product but to
get the point where--

00:27:52.700 --> 00:27:53.170
KARSTEN SCHMIDT: Prototype.

00:27:53.170 --> 00:27:53.820
PAUL KINLAN: Yeah,
the prototype.

00:27:53.820 --> 00:27:55.610
And then the final
implementation.

00:27:55.610 --> 00:27:57.850
Is this what you're doing here?

00:27:57.850 --> 00:27:59.640
Is this going to drive that?

00:27:59.640 --> 00:28:02.880
Or is this going to be
kind of complete scratched?

00:28:02.880 --> 00:28:04.440
KARSTEN SCHMIDT:
No, the toolchain

00:28:04.440 --> 00:28:06.040
is what I'm really working on.

00:28:06.040 --> 00:28:09.470
I have been working on
for over a year by now.

00:28:09.470 --> 00:28:12.210
It's actually the
fourth iteration.

00:28:12.210 --> 00:28:15.090
So basically, I maybe have
to rewind a little bit.

00:28:15.090 --> 00:28:16.970
So that project I
mentioned earlier,

00:28:16.970 --> 00:28:19.700
which I started in 2007,
was called toxiclibs.

00:28:19.700 --> 00:28:25.160
And that was basically a
library for Java initially.

00:28:25.160 --> 00:28:28.690
And it became one of
the biggest library

00:28:28.690 --> 00:28:31.000
packages for Processing,
and mainly has

00:28:31.000 --> 00:28:35.320
been used with Processing, even
though personally I have mainly

00:28:35.320 --> 00:28:36.520
used it with just Java.

00:28:36.520 --> 00:28:40.530
But in terms of
getting an audience,

00:28:40.530 --> 00:28:43.305
all the people I
wanted to address they

00:28:43.305 --> 00:28:45.330
are from the Processing camp.

00:28:45.330 --> 00:28:48.590
So it made sense to make
it friendly with Processing

00:28:48.590 --> 00:28:49.520
itself.

00:28:49.520 --> 00:28:53.190
And right now, this is
the fourth iteration

00:28:53.190 --> 00:28:57.540
off a redevelopment of
toxiclibs but in Clojure.

00:28:57.540 --> 00:29:03.375
Since I really want to go
back to web development more.

00:29:03.375 --> 00:29:06.960
And actually the browsers,
especially Chrome,

00:29:06.960 --> 00:29:09.850
have moved on so much
in the last few years

00:29:09.850 --> 00:29:13.010
where you can do those
things now realistically

00:29:13.010 --> 00:29:17.460
in the browser, not just
on 5% of the audience.

00:29:17.460 --> 00:29:21.540
But it's now mainstream and
you can do all those things.

00:29:21.540 --> 00:29:26.320
And what I also think there's
still a niche, because there's

00:29:26.320 --> 00:29:30.960
a lot of rendering engines and
3D engines for games and shader

00:29:30.960 --> 00:29:34.950
development and eye candy
stuff for web browsers.

00:29:34.950 --> 00:29:38.120
But this is more or less,
again, from the modeling side.

00:29:40.640 --> 00:29:44.610
I'm really highly interested in
the digital fabrication side.

00:29:44.610 --> 00:29:48.260
So for me, the geometry
aspects are far more important

00:29:48.260 --> 00:29:50.760
than the actual representation.

00:29:50.760 --> 00:29:51.992
PAUL KINLAN: That's cool.

00:29:51.992 --> 00:29:53.950
KARSTEN SCHMIDT: And you
can always piggy back,

00:29:53.950 --> 00:29:57.620
combine that with three.js or
any of the other frameworks

00:29:57.620 --> 00:29:58.850
you have.

00:29:58.850 --> 00:30:03.134
So it doesn't need
to be reinvented.

00:30:03.134 --> 00:30:03.800
PAUL KINLAN: OK.

00:30:03.800 --> 00:30:07.740
So what do you see
your next step as?

00:30:07.740 --> 00:30:11.400
KARSTEN SCHMIDT: So my
next step is to really--

00:30:11.400 --> 00:30:14.040
and I actually made that
step already, I just

00:30:14.040 --> 00:30:15.870
have nothing visually
to show yet--

00:30:15.870 --> 00:30:20.240
is to really work
on the operators

00:30:20.240 --> 00:30:23.280
which you can use to
create structures.

00:30:23.280 --> 00:30:25.680
So this is almost
thick, and that

00:30:25.680 --> 00:30:29.024
will be checked in over the
weekend into the GitHub.

00:30:29.024 --> 00:30:31.190
PAUL KINLAN: I think by the
time that this goes out,

00:30:31.190 --> 00:30:32.350
it'll probably already
be checked in there.

00:30:32.350 --> 00:30:34.020
KARSTEN SCHMIDT: OK, then it
will be already checked in.

00:30:34.020 --> 00:30:34.834
PAUL KINLAN: It's already done.

00:30:34.834 --> 00:30:35.650
Check it out.

00:30:35.650 --> 00:30:37.050
KARSTEN SCHMIDT: Yeah, exactly.

00:30:37.050 --> 00:30:40.910
And the next stage,
then, is to start

00:30:40.910 --> 00:30:42.780
developing in UI for that.

00:30:42.780 --> 00:30:44.970
Because right now
it is a nightmare

00:30:44.970 --> 00:30:47.460
to actually explore a
lot of those options

00:30:47.460 --> 00:30:53.270
because it is super abstract to
edit how those processes relate

00:30:53.270 --> 00:30:54.410
to each other.

00:30:54.410 --> 00:30:56.700
So I think the UI
development is what

00:30:56.700 --> 00:30:59.700
I will focus on for
the next two weeks.

00:30:59.700 --> 00:31:05.510
And then the stage after that is
actually to focus on App Engine

00:31:05.510 --> 00:31:09.022
and integrate this all
with the different modules.

00:31:09.022 --> 00:31:10.480
PAUL KINLAN: This
is going to sound

00:31:10.480 --> 00:31:12.570
like another really
stupid question.

00:31:12.570 --> 00:31:13.940
How do you decide when to stop?

00:31:13.940 --> 00:31:15.180
Like when you're done
with these things?

00:31:15.180 --> 00:31:17.080
KARSTEN SCHMIDT: When
I run out of time.

00:31:17.080 --> 00:31:17.710
PAUL KINLAN: Is
that literally it?

00:31:17.710 --> 00:31:19.043
KARSTEN SCHMIDT: Literally, yes.

00:31:21.160 --> 00:31:22.080
What I said earlier.

00:31:22.080 --> 00:31:25.620
I think deadlines are important
to stop procrastination,

00:31:25.620 --> 00:31:28.020
but for me personally,
they're also

00:31:28.020 --> 00:31:30.290
a hard stop for refactoring.

00:31:30.290 --> 00:31:33.020
I'm a manic refactorer.

00:31:33.020 --> 00:31:36.120
And as I said, this is
the fourth iteration

00:31:36.120 --> 00:31:36.880
of the library.

00:31:36.880 --> 00:31:40.830
I have three previous almost
completely developed prototypes

00:31:40.830 --> 00:31:44.210
I've throw out after doing
one or two projects with them

00:31:44.210 --> 00:31:46.980
because I realize that's
not what I wanted.

00:31:46.980 --> 00:31:50.330
And I also am quite
hardcore where

00:31:50.330 --> 00:31:54.230
I'm not shy to just pull
the plug on something

00:31:54.230 --> 00:31:59.580
if I don't think that IS
an innovation, personally.

00:31:59.580 --> 00:32:02.130
PAUL KINLAN: So this happens
in a lot of communities.

00:32:02.130 --> 00:32:05.182
And this is going
to sound stupid.

00:32:05.182 --> 00:32:07.306
Everything I say, I think
is going to sound stupid.

00:32:07.306 --> 00:32:08.472
KARSTEN SCHMIDT: It doesn't.

00:32:08.472 --> 00:32:10.677
PAUL KINLAN: Thank you.

00:32:10.677 --> 00:32:12.760
We'll have you on as another
guest again for that.

00:32:12.760 --> 00:32:15.260
No, what I was going to
say was this whole kind

00:32:15.260 --> 00:32:18.120
of pulling the plug on
things that don't work

00:32:18.120 --> 00:32:20.991
or things that don't work
for you at least anyway.

00:32:20.991 --> 00:32:23.240
You yourself, I think you're
probably happy with that.

00:32:23.240 --> 00:32:24.810
But what happens
to the people who

00:32:24.810 --> 00:32:26.060
potentially use your products?

00:32:26.060 --> 00:32:28.018
KARSTEN SCHMIDT: Well,
that's another thing why

00:32:28.018 --> 00:32:32.330
I'm especially with this case,
it's not really second album

00:32:32.330 --> 00:32:34.900
syndrome, but it's a little bit.

00:32:34.900 --> 00:32:38.310
There are like over 70,000
downloads for toxiclibs.

00:32:38.310 --> 00:32:40.250
So it's quite a
substantial number.

00:32:40.250 --> 00:32:43.950
And I know it is being
used by a lot of people

00:32:43.950 --> 00:32:45.120
on a regular basis.

00:32:45.120 --> 00:32:52.170
And I realize that,
how you say, it

00:32:52.170 --> 00:33:00.820
is very hard to do something
which fits my, sorry, rewind.

00:33:00.820 --> 00:33:05.000
So the initial reason
for developing toxiclibs

00:33:05.000 --> 00:33:07.850
was to actually
propel my own work.

00:33:07.850 --> 00:33:11.820
And it had to fit my own
workflow and my own skill

00:33:11.820 --> 00:33:15.720
set and I only then once
I realized, OK there's

00:33:15.720 --> 00:33:17.870
interest by the
community, I started

00:33:17.870 --> 00:33:20.650
then pushing and developing
lots of examples.

00:33:20.650 --> 00:33:24.310
And I did over 20 workshops
at universities worldwide.

00:33:24.310 --> 00:33:26.250
And a lot of those
workshops really

00:33:26.250 --> 00:33:32.200
have been a huge help factor
for actually developing

00:33:32.200 --> 00:33:35.030
more examples, which
have newcomers.

00:33:35.030 --> 00:33:39.800
And what I realized, though,
is that a lot of people

00:33:39.800 --> 00:33:42.600
still like the more
mathematical knowledge.

00:33:42.600 --> 00:33:46.210
Not everything in this field
is related to actual coding.

00:33:46.210 --> 00:33:48.580
And a lot of the
things you can't

00:33:48.580 --> 00:33:50.760
solve by just copy pasting.

00:33:50.760 --> 00:33:54.000
And most newcomers
really just copy paste.

00:33:54.000 --> 00:33:55.990
I've been there.

00:33:55.990 --> 00:33:57.600
I mean, you know the argument.

00:33:57.600 --> 00:34:01.930
If early web browsers wouldn't
have had reuse source,

00:34:01.930 --> 00:34:04.160
HTML would have never taken off.

00:34:04.160 --> 00:34:08.610
And the whole web itself,
not to this extent.

00:34:08.610 --> 00:34:10.949
So I think this is super
important, copy pasting,

00:34:10.949 --> 00:34:16.260
but at the same time you realize
that some of the assumptions

00:34:16.260 --> 00:34:19.179
I made, and especially
being a Java based library,

00:34:19.179 --> 00:34:22.630
you always try to fit
into the language.

00:34:22.630 --> 00:34:27.755
And now I even wrote a huge
blog post in 2011 or '12,

00:34:27.755 --> 00:34:31.489
I can't remember now, how I
see toxiclibs progressing.

00:34:31.489 --> 00:34:33.830
And Clojure was part
of that equation.

00:34:33.830 --> 00:34:35.870
But I still hope
to have something

00:34:35.870 --> 00:34:38.030
which is compatible with
the previous version.

00:34:38.030 --> 00:34:42.190
But those languages are almost
orthagonal to each other

00:34:42.190 --> 00:34:45.639
in terms of approach and
in terms of flexibility

00:34:45.639 --> 00:34:46.489
and what you can do.

00:34:46.489 --> 00:34:50.050
So why would I want
to limit myself now

00:34:50.050 --> 00:34:53.380
to do something which worked
with the previous version?

00:34:53.380 --> 00:34:55.834
Then I end up with an
MS-DOS kind of thing.

00:34:55.834 --> 00:34:57.292
PAUL KINLAN: I was
going to say, it

00:34:57.292 --> 00:34:58.800
feels like the
Microsoft problem.

00:34:58.800 --> 00:35:00.000
[INTERPOSING VOICES]

00:35:00.000 --> 00:35:03.330
KARSTEN SCHMIDT: It's
legacy problem in general.

00:35:03.330 --> 00:35:06.570
So I think this is a
small enough project where

00:35:06.570 --> 00:35:08.640
you can have a clean slate.

00:35:08.640 --> 00:35:12.240
And even if you believe
in semantic versioning

00:35:12.240 --> 00:35:15.090
like a lot of developers
do these days,

00:35:15.090 --> 00:35:17.400
every time you have a
major version change,

00:35:17.400 --> 00:35:21.110
that is basically
a breaking change,

00:35:21.110 --> 00:35:24.410
or a total re-imagining, of
what has been there before.

00:35:24.410 --> 00:35:27.120
Now, I think that's
where I am at this stage.

00:35:27.120 --> 00:35:30.147
And that's why I've been
also taking my time not

00:35:30.147 --> 00:35:32.480
to get it right, you can ever
get it right for everyone.

00:35:32.480 --> 00:35:35.500
But I think I've done
now a lot of projects,

00:35:35.500 --> 00:35:39.090
three commercial
ones, few examples.

00:35:39.090 --> 00:35:42.960
Where I see OK that works, and
it's actually understandable.

00:35:42.960 --> 00:35:46.270
I think even you without
knowing closure much.

00:35:46.270 --> 00:35:47.352
PAUL KINLAN: Yeah.

00:35:47.352 --> 00:35:48.810
KARSTEN SCHMIDT:
What I really love

00:35:48.810 --> 00:35:51.740
is this kind of-- maybe you
can switch back to the screen--

00:35:51.740 --> 00:35:55.780
but like in Clojure, you have
those kind of arrow operators

00:35:55.780 --> 00:35:58.580
which are kind of threading
and building pipelines

00:35:58.580 --> 00:36:01.120
almost like in Unix
where you have the pipe.

00:36:01.120 --> 00:36:04.260
So the output of
one process becomes

00:36:04.260 --> 00:36:05.620
the input for the next one.

00:36:05.620 --> 00:36:08.135
And that's a very nice way of--

00:36:08.135 --> 00:36:09.760
PAUL KINLAN: So me
just trying to think

00:36:09.760 --> 00:36:11.520
about your final product.

00:36:11.520 --> 00:36:14.020
So the idea was that
you could potentially,

00:36:14.020 --> 00:36:17.060
the final piece of art
essentially, this sculpture

00:36:17.060 --> 00:36:19.550
that is printed at the
end is just basically

00:36:19.550 --> 00:36:22.130
a series of pipes of all those
different multiple operations.

00:36:22.130 --> 00:36:22.600
KARSTEN SCHMIDT: Exactly.

00:36:22.600 --> 00:36:23.610
PAUL KINLAN: Boom
boom, boom boom.

00:36:23.610 --> 00:36:25.110
KARSTEN SCHMIDT:
And then we talked

00:36:25.110 --> 00:36:28.300
earlier about this,
about that there's

00:36:28.300 --> 00:36:30.060
a whole relationship to biology.

00:36:30.060 --> 00:36:33.350
So it's not just the
cell division aspect.

00:36:33.350 --> 00:36:37.270
It's also thinking about it from
a kind of genetic programming

00:36:37.270 --> 00:36:38.040
perspective.

00:36:38.040 --> 00:36:42.860
So you have on the one side, you
have the visitors in the museum

00:36:42.860 --> 00:36:45.340
being the curators and kind
of the fitness function

00:36:45.340 --> 00:36:51.140
of this genetic process, or the
genetic programming process.

00:36:51.140 --> 00:36:55.240
And then you have the authors
or designers, artists,

00:36:55.240 --> 00:36:57.740
who use the design
who are actually

00:36:57.740 --> 00:37:00.960
the population of
every generation.

00:37:00.960 --> 00:37:04.620
And there will be this
competition between those two

00:37:04.620 --> 00:37:08.270
camps to decide
what will be printed

00:37:08.270 --> 00:37:11.300
and what is actually
popular with the public.

00:37:11.300 --> 00:37:14.090
And that is on a macro level.

00:37:14.090 --> 00:37:16.700
On a technical level, all
those operates actually

00:37:16.700 --> 00:37:18.160
form a tree structure.

00:37:18.160 --> 00:37:22.230
So you can actually then copy
and paste different branches

00:37:22.230 --> 00:37:23.490
from those trees.

00:37:23.490 --> 00:37:28.350
And recycle basically DNA
sequences or subsections

00:37:28.350 --> 00:37:30.780
of DNA for that object.

00:37:30.780 --> 00:37:34.270
And you can just say, OK,
I have already here a half

00:37:34.270 --> 00:37:36.900
finished object, but
I want to now take

00:37:36.900 --> 00:37:40.910
that piece of DNA and copy
and paste it to this fragment

00:37:40.910 --> 00:37:42.819
and see what happens.

00:37:42.819 --> 00:37:43.860
PAUL KINLAN: That's cool.

00:37:43.860 --> 00:37:46.380
So we're probably going
to start to wrap up.

00:37:46.380 --> 00:37:48.910
There's a lot more I actually
want to talk to you about.

00:37:48.910 --> 00:37:51.457
So we would probably I'm going
to get commitment from you.

00:37:51.457 --> 00:37:53.790
Will you be able to do another
one of these [INAUDIBLE]?

00:37:53.790 --> 00:37:54.416
KARSTEN SCHMIDT: Yeah.

00:37:54.416 --> 00:37:54.832
PAUL KINLAN: Cool.

00:37:54.832 --> 00:37:55.373
There we are.

00:37:55.373 --> 00:37:57.075
You heard it.

00:37:57.075 --> 00:37:58.700
KARSTEN SCHMIDT: Not
next week, though.

00:37:58.700 --> 00:37:59.200
PAUL KINLAN: Not next week.

00:37:59.200 --> 00:37:59.940
No we'll toggle that.

00:37:59.940 --> 00:38:01.148
We'll wait a couple of weeks.

00:38:01.148 --> 00:38:02.260
It'll be fine.

00:38:02.260 --> 00:38:04.680
But I suppose one of the
things I want to try and get

00:38:04.680 --> 00:38:06.532
from this as well
is there's going

00:38:06.532 --> 00:38:08.990
to be a whole bunch of people
who are looking at DevArt who

00:38:08.990 --> 00:38:12.040
are just like me, who
can code pretty well.

00:38:12.040 --> 00:38:14.210
We're all very
technical, and we want

00:38:14.210 --> 00:38:16.860
to have a bit of an
outlet to try and explore

00:38:16.860 --> 00:38:23.609
what we can do
creatively with our code.

00:38:23.609 --> 00:38:25.150
If you could give
one piece of advice

00:38:25.150 --> 00:38:28.240
for getting people to
start thinking about this

00:38:28.240 --> 00:38:32.440
or even implementing
stuff, what would it be?

00:38:32.440 --> 00:38:35.270
KARSTEN SCHMIDT: Several
pieces of advice.

00:38:35.270 --> 00:38:38.970
Don't be afraid of
making mistakes is one.

00:38:38.970 --> 00:38:41.890
Like some of the most
interesting things

00:38:41.890 --> 00:38:46.430
I ever developed
is by having a bug.

00:38:46.430 --> 00:38:49.540
Which then turned out to
be a blessing in disguise.

00:38:49.540 --> 00:38:53.280
And also you can't
approach those projects

00:38:53.280 --> 00:38:57.970
very much with a fixed
mindset that you say, OK,

00:38:57.970 --> 00:39:01.090
literally examine-- I
want to create here a cog.

00:39:01.090 --> 00:39:02.050
That is fine.

00:39:02.050 --> 00:39:02.980
That's a small step.

00:39:02.980 --> 00:39:07.230
I can approach it like a
normal well defined process.

00:39:07.230 --> 00:39:11.495
But if you just want to
think about the power

00:39:11.495 --> 00:39:14.750
of, say, generative
design more, you

00:39:14.750 --> 00:39:16.620
need to more think
about, OK, what

00:39:16.620 --> 00:39:19.090
are my ingredients
without actually knowing

00:39:19.090 --> 00:39:21.170
what will come out as a result.

00:39:21.170 --> 00:39:22.940
And then be surprised.

00:39:22.940 --> 00:39:24.750
And then it's
simply refactoring.

00:39:24.750 --> 00:39:28.290
And you check different
variations of parameters

00:39:28.290 --> 00:39:30.810
and you let it play.

00:39:30.810 --> 00:39:37.090
And it's this really
interactive iterative process.

00:39:37.090 --> 00:39:39.910
But it's more
iterative in the sense

00:39:39.910 --> 00:39:45.300
that the process, because you
don't know what you will end up

00:39:45.300 --> 00:39:49.340
with actually is guiding
your own thinking as well.

00:39:49.340 --> 00:39:51.170
And I really think
that you don't

00:39:51.170 --> 00:39:53.470
have that in other
parts of design so much.

00:39:53.470 --> 00:39:54.556
PAUL KINLAN: Yeah.

00:39:54.556 --> 00:39:57.690
That's cool.

00:39:57.690 --> 00:39:59.877
Say developers don't
really know where to start.

00:39:59.877 --> 00:40:01.960
Would it be Processing,
for instance, [INAUDIBLE]?

00:40:01.960 --> 00:40:05.280
KARSTEN SCHMIDT: I still think
Processing is the best gateway

00:40:05.280 --> 00:40:08.100
drug to that world, yes.

00:40:08.100 --> 00:40:09.870
PAUL KINLAN: So
Processing, [INAUDIBLE].

00:40:09.870 --> 00:40:11.536
KARSTEN SCHMIDT:
OpenFrameworks as well.

00:40:11.536 --> 00:40:13.740
I mean, again, it
depends what you do.

00:40:13.740 --> 00:40:16.740
If you want to do more
interactive things which

00:40:16.740 --> 00:40:21.560
require a lot of, say, real
time video input computer vision

00:40:21.560 --> 00:40:26.210
type stuff, or you have intense
number pushing going on,

00:40:26.210 --> 00:40:27.750
I would use openFrameworks.

00:40:27.750 --> 00:40:30.180
But then again,
you're on the language

00:40:30.180 --> 00:40:31.720
which is C, very low level.

00:40:31.720 --> 00:40:35.170
You have a lot of package
simply from that language level

00:40:35.170 --> 00:40:38.730
where a framework can only
help you that much with.

00:40:38.730 --> 00:40:42.690
If you are simply after
quick exploration for idea

00:40:42.690 --> 00:40:48.050
of ideas without having to
learn really hard language,

00:40:48.050 --> 00:40:50.200
Processing is better
or even JavaScript.

00:40:50.200 --> 00:40:51.130
There's so many.

00:40:51.130 --> 00:40:54.490
I mean Processing by now I
really don't see as a tool

00:40:54.490 --> 00:40:55.870
itself anymore.

00:40:55.870 --> 00:40:59.850
It is an approach which
has taken over and heavily

00:40:59.850 --> 00:41:02.370
influenced almost every
other tool developed

00:41:02.370 --> 00:41:04.210
since then in that field.

00:41:04.210 --> 00:41:09.010
So I think there are so
many JavaScript libraries.

00:41:09.010 --> 00:41:10.340
I don't know about.

00:41:10.340 --> 00:41:10.760
PAUL KINLAN: I'll do that.

00:41:10.760 --> 00:41:12.680
I'll put a collection of
a couple of them together

00:41:12.680 --> 00:41:15.230
and you'll be able to click on
them from this video at least.

00:41:15.230 --> 00:41:17.400
I think there's some on
the DevArt site as well.

00:41:17.400 --> 00:41:18.733
KARSTEN SCHMIDT: Yeah, I'm sure.

00:41:18.733 --> 00:41:20.470
PAUL KINLAN: So
yeah, that's cool.

00:41:20.470 --> 00:41:21.984
So yes, thank you very much.

00:41:21.984 --> 00:41:23.900
We're going to have to
do another one of these

00:41:23.900 --> 00:41:26.900
as well, because there's a
lot of-- we talked about 3D

00:41:26.900 --> 00:41:29.710
printing a little bit
earlier on before the show.

00:41:29.710 --> 00:41:32.380
And it's really interesting and
I'd like to go into the whole--

00:41:32.380 --> 00:41:34.171
KARSTEN SCHMIDT: Bring
it in the next time.

00:41:34.171 --> 00:41:35.680
PAUL KINLAN: Are you serious?

00:41:35.680 --> 00:41:37.234
KARSTEN SCHMIDT:
I don't know yet.

00:41:37.234 --> 00:41:38.150
PAUL KINLAN: OK, cool.

00:41:38.150 --> 00:41:39.360
KARSTEN SCHMIDT:
We could, we could.

00:41:39.360 --> 00:41:40.318
PAUL KINLAN: We'll see.

00:41:40.318 --> 00:41:41.700
We'll see what happens.

00:41:41.700 --> 00:41:43.690
But anyway, thank you
very much for watching.

00:41:43.690 --> 00:41:47.540
If you're interested
in exploring what's

00:41:47.540 --> 00:41:50.950
possible with DevArt, go
to devart.withgoogle.com.

00:41:50.950 --> 00:41:55.200
Or you can click on the link
just below when it appears.

00:41:55.200 --> 00:41:56.860
That was pretty cool, wasn't it?

00:41:56.860 --> 00:41:59.520
You can click on the link
or just follow Karsten

00:41:59.520 --> 00:42:01.820
as well on Twitter and
other social networks

00:42:01.820 --> 00:42:04.761
that you might be on as well.

00:42:04.761 --> 00:42:05.260
Cool.

00:42:05.260 --> 00:42:05.510
Thank you.

00:42:05.510 --> 00:42:06.634
KARSTEN SCHMIDT: Thank you.

00:42:06.634 --> 00:42:08.130
Bye.

