WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:04.040
As with all architectural styles, there are benefits and costs.

00:00:04.040 --> 00:00:08.130
The benefits of the Layered Implicit Invocation architecture include im,

00:00:08.130 --> 00:00:09.710
improved reusability.

00:00:09.710 --> 00:00:13.360
Because the lower level components do not depend upon the upper

00:00:13.360 --> 00:00:16.090
level components, you can use them in other situations.

00:00:16.090 --> 00:00:17.860
So you can imagine taking.

00:00:17.860 --> 00:00:23.630
Our handler for the resized window and using that in other applications as well.

00:00:23.630 --> 00:00:28.760
There's also reduced complexity, because the, there are fewer the,

00:00:28.760 --> 00:00:33.770
the actual components know less about each other and everything is implicit but

00:00:33.770 --> 00:00:36.170
the complexity of the system can be reduced.

00:00:36.170 --> 00:00:38.420
Making it easier to understand and maintain.

00:00:38.420 --> 00:00:40.850
The, there is a cost, however.

00:00:40.850 --> 00:00:44.060
The cost is slightly increased overhead,

00:00:44.060 --> 00:00:47.710
that is performance overhead because of the extra levels of indirection.

00:00:47.710 --> 00:00:52.220
Whenever you have an indirection, okay, that means that there's a two-steps in,

00:00:52.220 --> 00:00:53.400
in resolving that.

00:00:53.400 --> 00:00:55.340
You make the call, and then, the call has to be.

00:00:56.710 --> 00:00:58.400
There has to be a call back and so on.

00:00:58.400 --> 00:01:02.300
For phase 2 after we have selected the style, we will assign the components to

00:01:02.300 --> 00:01:06.890
layers, determining the dependencies between the layers, and update the OCL.

00:01:06.890 --> 00:01:09.370
In particular we will insure that each constraint,

00:01:09.370 --> 00:01:11.720
is an equality with a single variable on the left hand side.

