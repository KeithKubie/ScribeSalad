WEBVTT
Kind: captions
Language: en

00:00:06.130 --> 00:00:06.660
SETH LADD: Welcome.

00:00:06.660 --> 00:00:10.270
We are live from the Google
I/O floor here with the

00:00:10.270 --> 00:00:13.310
co-founders and engineers on the
Dart project, Kasper Lund

00:00:13.310 --> 00:00:14.370
and Lars Bak.

00:00:14.370 --> 00:00:16.250
Thank you guys for joining us.

00:00:16.250 --> 00:00:18.590
My name is Seth Ladd, I'm a
developer advocate on the Dart

00:00:18.590 --> 00:00:21.010
project and today we're going
to learn all about Dart.

00:00:21.010 --> 00:00:22.290
So thanks guys.

00:00:22.290 --> 00:00:25.630
First we should talk,
Lars, what is Dart?

00:00:25.630 --> 00:00:27.190
And what can you do with it?

00:00:27.190 --> 00:00:28.950
LARS BAK: Well, Dart is
a new programming

00:00:28.950 --> 00:00:31.080
language and a platform.

00:00:31.080 --> 00:00:34.020
It includes libraries and
programming tools providing

00:00:34.020 --> 00:00:36.160
structure and web
applications.

00:00:36.160 --> 00:00:41.260
So basically, Dart is a new
product that has a goal of

00:00:41.260 --> 00:00:43.830
improving the productivity
of web developers.

00:00:43.830 --> 00:00:44.640
And it can be used today.

00:00:44.640 --> 00:00:47.160
You could download it
and try it out.

00:00:47.160 --> 00:00:48.200
SETH LADD: So you mentioned
the web.

00:00:48.200 --> 00:00:50.160
Kasper, where does Dart
actually run?

00:00:50.160 --> 00:00:52.320
KASPER LUND: Actually it runs
across the entire modern web.

00:00:52.320 --> 00:00:54.560
And so it runs in every
modern web browser.

00:00:54.560 --> 00:00:57.210
And Dart can be translated to
modern JavaScript and it runs

00:00:57.210 --> 00:01:00.300
just beautifully in
all new browsers.

00:01:00.300 --> 00:01:03.280
Even we do have builds of
Dart that runs with a

00:01:03.280 --> 00:01:04.879
native .VM as well.

00:01:04.879 --> 00:01:06.980
But I think the core of it
is that it really runs

00:01:06.980 --> 00:01:07.580
everywhere.

00:01:07.580 --> 00:01:08.470
SETH LADD: Awesome.

00:01:08.470 --> 00:01:09.670
Mobile and desktop?

00:01:09.670 --> 00:01:10.370
KASPER LUND: Mobile
and desktop.

00:01:10.370 --> 00:01:11.235
Yeah.

00:01:11.235 --> 00:01:11.700
SETH LADD: Perfect.

00:01:11.700 --> 00:01:13.200
So what's the latest
news on Dart?

00:01:13.200 --> 00:01:15.610
What did we learn
here from I/O?

00:01:15.610 --> 00:01:18.860
LARS BAK: Well, that's a lot of
stuff going around with us.

00:01:18.860 --> 00:01:21.180
Well, first of all, about Dart
is getting faster and faster.

00:01:21.180 --> 00:01:25.600
We have a virtual machine for
Dart and we are now clocking

00:01:25.600 --> 00:01:28.810
twice the speed of JavaScript,
so this is very exciting.

00:01:28.810 --> 00:01:31.330
Because one of the goals for
Dart is we have a very

00:01:31.330 --> 00:01:34.720
[? efficient ?] limitation,
because if you have a faster

00:01:34.720 --> 00:01:39.320
engine in the browser, you will
allow web applications

00:01:39.320 --> 00:01:41.570
available to us to be more
innovative in doing

00:01:41.570 --> 00:01:42.630
applications.

00:01:42.630 --> 00:01:46.150
So we want more advanced
apps in the browser.

00:01:46.150 --> 00:01:50.030
KASPER LUND: Everything about
applications and benchmarks

00:01:50.030 --> 00:01:54.140
starting to make good use of
the extra juice they're

00:01:54.140 --> 00:01:56.980
getting from Dart and it's fun
to see these benchmarks and

00:01:56.980 --> 00:01:59.530
applications come to life and
people are really starting to

00:01:59.530 --> 00:02:01.670
build new, cool things
on top of Dart.

00:02:01.670 --> 00:02:03.300
SETH LADD: Some of the other
news that I heard is the Dart

00:02:03.300 --> 00:02:04.430
language is stable.

00:02:04.430 --> 00:02:06.820
Where are we with the
core libraries?

00:02:06.820 --> 00:02:10.900
LARS BAK: The core libraries
are also stable.

00:02:10.900 --> 00:02:11.490
SETH LADD: Great.

00:02:11.490 --> 00:02:14.680
LARS BAK: So the latest release
in 4 we had with Dart,

00:02:14.680 --> 00:02:17.300
we really stopped further
development

00:02:17.300 --> 00:02:18.390
with the core library.

00:02:18.390 --> 00:02:21.320
So they're very consistent now
and you can pick it up and use

00:02:21.320 --> 00:02:22.720
it in a consistent way.

00:02:22.720 --> 00:02:25.920
And all the small pieces in
the libraries are fitting

00:02:25.920 --> 00:02:26.870
together nicely.

00:02:26.870 --> 00:02:28.460
So we're very proud of that.

00:02:28.460 --> 00:02:29.160
KASPER LUND: Yeah, you
don't have to worry

00:02:29.160 --> 00:02:30.230
about breaking changes.

00:02:30.230 --> 00:02:32.250
Like if you build something on
top of the Dart platform now

00:02:32.250 --> 00:02:34.910
using the libraries and the
language, they will run

00:02:34.910 --> 00:02:36.145
tomorrow, as well.

00:02:36.145 --> 00:02:36.490
SETH LADD: Great.

00:02:36.490 --> 00:02:38.500
Well, I know that you've both
worked on a lot of virtual

00:02:38.500 --> 00:02:39.270
machines before.

00:02:39.270 --> 00:02:40.370
Tell us something that's
different or

00:02:40.370 --> 00:02:42.320
unique now with Dart.

00:02:42.320 --> 00:02:44.490
LARS BAK: Well, first of all,
this is the first time we're

00:02:44.490 --> 00:02:46.060
doing a programming language.

00:02:46.060 --> 00:02:48.470
And since we had all this
experience in implementing

00:02:48.470 --> 00:02:51.260
programming languages, it's been
nice to be on both sides

00:02:51.260 --> 00:02:52.150
of the fence.

00:02:52.150 --> 00:02:54.660
We can do the design of the
programming language while

00:02:54.660 --> 00:02:57.750
thinking about how we perform
when we implemented it.

00:02:57.750 --> 00:03:01.730
So Dart has been designed
to be simple.

00:03:01.730 --> 00:03:05.225
And yet, we could still optimize
it when we implement

00:03:05.225 --> 00:03:06.855
it in a virtual machine.

00:03:06.855 --> 00:03:10.100
KASPER LUND: It's really built
from the ground up based on

00:03:10.100 --> 00:03:13.240
principles and designs that we
knew we could make run really

00:03:13.240 --> 00:03:13.770
efficiently.

00:03:13.770 --> 00:03:17.030
And we are starting to see that
come to life with that

00:03:17.030 --> 00:03:20.030
factor of two on certain
benchmarks and applications.

00:03:20.030 --> 00:03:22.000
So it's really nice.

00:03:22.000 --> 00:03:23.160
SETH LADD: And you guys,
speaking of speed, you showed

00:03:23.160 --> 00:03:24.900
a really cool demo in your
talk this morning.

00:03:24.900 --> 00:03:26.600
Tell us a little bit about that
and how you're able to

00:03:26.600 --> 00:03:28.200
unlock even more performance.

00:03:28.200 --> 00:03:30.590
KASPER LUND: Well,
I can do that.

00:03:30.590 --> 00:03:34.250
The demo we showed at the
session we had this morning

00:03:34.250 --> 00:03:37.500
was showing that Dart is capable
of taking advantage of

00:03:37.500 --> 00:03:39.470
what is know as SIMD
instructions found in most

00:03:39.470 --> 00:03:40.710
modern CPUs.

00:03:40.710 --> 00:03:44.030
And so syndi-instructions are
instructions that allow you to

00:03:44.030 --> 00:03:46.940
operate on four floating point
values and parallel.

00:03:46.940 --> 00:03:49.480
Making essentially three
new calculations and

00:03:49.480 --> 00:03:52.830
audio-processing and stuff like
that, much, much faster.

00:03:52.830 --> 00:03:57.500
So the demo we showed, had a
SMDI version and a non-SMDI

00:03:57.500 --> 00:04:00.650
version and the SMDI version was
running some 3D animation

00:04:00.650 --> 00:04:01.530
like four times faster.

00:04:01.530 --> 00:04:02.380
It was really--

00:04:02.380 --> 00:04:03.190
SETH LADD: Four times?

00:04:03.190 --> 00:04:03.790
That's awesome.

00:04:03.790 --> 00:04:04.950
Very cool.

00:04:04.950 --> 00:04:06.830
So who's using Dart
these days?

00:04:06.830 --> 00:04:10.300
We haven't quite hit 1.0, but is
anyone actually doing this?

00:04:10.300 --> 00:04:12.290
LARS BAK: Well, people inside
Google and outside Google are

00:04:12.290 --> 00:04:13.650
using Dart now, which
is great.

00:04:13.650 --> 00:04:18.120
So, you have companies like
Blossom doing a lot of web

00:04:18.120 --> 00:04:20.029
view component development
and also

00:04:20.029 --> 00:04:21.529
providing back to the community.

00:04:21.529 --> 00:04:26.710
So we have a site where people
can upload their packages.

00:04:26.710 --> 00:04:26.910
SETH LADD: Help.dartlang.org

00:04:26.910 --> 00:04:27.850
LARS BAK: Yeah.

00:04:27.850 --> 00:04:30.080
And so other parties
can use it.

00:04:30.080 --> 00:04:32.510
So this is very exciting and we
see a lot of traction this

00:04:32.510 --> 00:04:33.210
year on Dart.

00:04:33.210 --> 00:04:34.800
People are happy about
it and they seem

00:04:34.800 --> 00:04:37.100
productive when using it.

00:04:37.100 --> 00:04:38.080
KASPER LUND: I guess that's
the most important thing.

00:04:38.080 --> 00:04:39.980
People actually trying the
platform out and using it to

00:04:39.980 --> 00:04:42.520
build real things feel very,
very empowered by it and

00:04:42.520 --> 00:04:42.925
productive.

00:04:42.925 --> 00:04:44.320
That's awesome.

00:04:44.320 --> 00:04:45.890
SETH LADD: I know there's other
partners that are using

00:04:45.890 --> 00:04:46.750
and integrating Dart.

00:04:46.750 --> 00:04:48.240
WebStorm IntelliJ.

00:04:48.240 --> 00:04:49.820
They have a Dart plug-in,
for instance.

00:04:49.820 --> 00:04:54.320
And then today we saw Adobe
announce their FlashPro

00:04:54.320 --> 00:04:56.190
exports to Dart.

00:04:56.190 --> 00:04:59.200
That's really cool to see these
other products and APIs

00:04:59.200 --> 00:05:01.580
also playing in the
Dart ecosystem.

00:05:01.580 --> 00:05:03.120
KASPER LUND: Yeah, that's very
nice to see them being able to

00:05:03.120 --> 00:05:04.760
make use of the fact that
we run across the

00:05:04.760 --> 00:05:05.690
entire modern web.

00:05:05.690 --> 00:05:09.820
So you can take that code
generated from the Adobe tools

00:05:09.820 --> 00:05:12.170
and you can compile it further
to JavaScript that runs

00:05:12.170 --> 00:05:12.950
everywhere.

00:05:12.950 --> 00:05:15.340
Or you could make use of the
Dart VM and get a fantastic

00:05:15.340 --> 00:05:16.050
performance.

00:05:16.050 --> 00:05:17.390
It works really well.

00:05:17.390 --> 00:05:19.970
LARS BAK: So I just want to
add that Dart is an open

00:05:19.970 --> 00:05:20.860
source project.

00:05:20.860 --> 00:05:23.940
And we have many external
contributors to this project

00:05:23.940 --> 00:05:24.710
and this is great.

00:05:24.710 --> 00:05:26.990
That also allows other companies
like Adobe to

00:05:26.990 --> 00:05:29.960
provide input to us or even
change the code itself, if

00:05:29.960 --> 00:05:31.970
they choose to do so.

00:05:31.970 --> 00:05:33.650
SETH LADD: So how do developers
get started?

00:05:33.650 --> 00:05:35.450
Do I have to learn a whole
new programming language?

00:05:35.450 --> 00:05:36.920
I mean, what happens there?

00:05:36.920 --> 00:05:38.940
LARS BAK: Well, the good
thing about Dart is we

00:05:38.940 --> 00:05:40.180
didn't invent very much.

00:05:40.180 --> 00:05:43.750
So it's basically a very simple
program language, so if

00:05:43.750 --> 00:05:47.710
you have a background in
JavaScript, C# or Java, you

00:05:47.710 --> 00:05:50.370
can pick it up within an
hour, I would say.

00:05:50.370 --> 00:05:52.610
KASPER LUND: So all you need to
do is to go to our website,

00:05:52.610 --> 00:05:54.850
dartlang.org and download
a build of the

00:05:54.850 --> 00:05:56.250
editor and off you go.

00:05:56.250 --> 00:05:58.100
It's actually very easy
to get started.

00:05:58.100 --> 00:05:58.940
SETH LADD: Great.

00:05:58.940 --> 00:06:00.830
I want to go back to the
virtual machine aspect.

00:06:00.830 --> 00:06:02.720
I know you guys have done
a lot of VMs from Java,

00:06:02.720 --> 00:06:06.610
SmallTalk, V8, as well
and now Dart.

00:06:06.610 --> 00:06:09.110
I'm still curious about what are
some of the design aspects

00:06:09.110 --> 00:06:11.130
of the Dart language
that enables

00:06:11.130 --> 00:06:12.720
the VM to be so efficient?

00:06:12.720 --> 00:06:14.490
What's really the difference?

00:06:14.490 --> 00:06:17.300
LARS BAK: Well, the easiest way
to explain it is by making

00:06:17.300 --> 00:06:19.140
the contrast to JavaScript.

00:06:19.140 --> 00:06:21.510
In JavaScript you can
add properties on

00:06:21.510 --> 00:06:22.910
the fly to an update.

00:06:22.910 --> 00:06:24.850
That basically means, ahead of
time, you don't know the

00:06:24.850 --> 00:06:26.820
format of updates.

00:06:26.820 --> 00:06:29.890
In Dart, we have designed it
so that when you create an

00:06:29.890 --> 00:06:32.480
instance of a class, you know
exactly the format.

00:06:32.480 --> 00:06:35.920
That means that they don't
change the layout of an

00:06:35.920 --> 00:06:38.030
update, adjacent
to the program.

00:06:38.030 --> 00:06:40.970
That makes it much easier to
generate code for fetching

00:06:40.970 --> 00:06:42.730
fields and also takes
a [? cued ?]

00:06:42.730 --> 00:06:45.460
method from that update.

00:06:45.460 --> 00:06:47.300
KASPER LUND: And we actually
see a very big

00:06:47.300 --> 00:06:48.040
benefit from that.

00:06:48.040 --> 00:06:50.840
If you look at the generated
native code that the virtual

00:06:50.840 --> 00:06:53.000
machine produces, it's
a lot smaller.

00:06:53.000 --> 00:06:55.610
It's like a factor of three
smaller than the corresponding

00:06:55.610 --> 00:06:58.830
code generated from V8, which
is a pretty good indication

00:06:58.830 --> 00:07:00.740
that we're doing something
right.

00:07:00.740 --> 00:07:03.950
Like aiming for this more
simple internal

00:07:03.950 --> 00:07:05.290
structure of the VM.

00:07:05.290 --> 00:07:07.670
And that really helps
performance.

00:07:07.670 --> 00:07:08.170
LARS BAK: Another
thing we're also

00:07:08.170 --> 00:07:11.180
looking at is quick start-up.

00:07:11.180 --> 00:07:15.790
So when you contrast again
JavaScript to Dart, when you

00:07:15.790 --> 00:07:19.280
read in JavaScript program,
you actually execute

00:07:19.280 --> 00:07:22.360
JavaScript before you start
running the real program.

00:07:22.360 --> 00:07:23.510
In Dart it's different.

00:07:23.510 --> 00:07:25.695
You don't execute anything
before the first instruction

00:07:25.695 --> 00:07:27.680
in main is being executed.

00:07:27.680 --> 00:07:31.460
That allows us to apply
techniques like snapshotting

00:07:31.460 --> 00:07:33.460
to get ultra fast start-up.

00:07:33.460 --> 00:07:34.230
SETH LADD: And that's
incredibly

00:07:34.230 --> 00:07:35.220
important on mobile.

00:07:35.220 --> 00:07:37.610
Where every battery matters.

00:07:37.610 --> 00:07:38.390
Definitely.

00:07:38.390 --> 00:07:41.760
KASPER LUND: We're seeing this
technology where you can get

00:07:41.760 --> 00:07:44.090
snaps of an entire application
and read it and start it up

00:07:44.090 --> 00:07:45.140
really, really quickly.

00:07:45.140 --> 00:07:47.400
Being super, super important
on mobile, definitely.

00:07:47.400 --> 00:07:48.880
SETH LADD: And especially, if
you think about it, some

00:07:48.880 --> 00:07:50.990
applications they have
a meg of JavaScript.

00:07:50.990 --> 00:07:53.240
So imagine parsing in
that much text, just

00:07:53.240 --> 00:07:54.140
to get the app running.

00:07:54.140 --> 00:07:57.140
LARS BAK: On our benchmark, you
see that using snapshot

00:07:57.140 --> 00:08:00.150
will make startup
10 times faster.

00:08:00.150 --> 00:08:02.910
That means you only spend a
tenth of the energy when

00:08:02.910 --> 00:08:04.210
loading in the application.

00:08:04.210 --> 00:08:05.420
Which is great on mobile.

00:08:05.420 --> 00:08:06.440
SETH LADD: Especially here
at a conference.

00:08:06.440 --> 00:08:08.390
When your battery is
going to run out.

00:08:08.390 --> 00:08:10.180
I want my web apps to be fast.

00:08:10.180 --> 00:08:11.670
But this is a lot about
the virtual machine.

00:08:11.670 --> 00:08:13.060
What are we doing Dart to JS?

00:08:13.060 --> 00:08:15.230
To help keep those apps fast
even when we compile the

00:08:15.230 --> 00:08:15.870
JavaScript?

00:08:15.870 --> 00:08:17.650
KASPER LUND: So one of the
things that we do in Dart to

00:08:17.650 --> 00:08:21.230
JS, is we built a fairly
advanced calculation

00:08:21.230 --> 00:08:23.560
infrastructure that allows us
to do proper optimizations

00:08:23.560 --> 00:08:25.030
while we compile Dart
to JavaScript.

00:08:25.030 --> 00:08:28.330
So we do tree-shaking, where we
remove unused parts of your

00:08:28.330 --> 00:08:31.440
code and we do things like
inline and constant folding,

00:08:31.440 --> 00:08:34.350
and all the sort of classical
optimizations you do on code.

00:08:34.350 --> 00:08:36.950
That means that if you write
Dart code, we can generate

00:08:36.950 --> 00:08:38.740
reasonably efficient JavaScript
code that can

00:08:38.740 --> 00:08:40.039
actually compete with
handwritten JavaScript code in

00:08:40.039 --> 00:08:41.890
a lot of cases.

00:08:41.890 --> 00:08:45.625
And we're very much focused on
delivering small JavaScript

00:08:45.625 --> 00:08:46.400
code, as well.

00:08:46.400 --> 00:08:49.980
So we built in a support for
minifying the output, so that

00:08:49.980 --> 00:08:53.230
commonly used identifiers in
your code gets translated to

00:08:53.230 --> 00:08:55.270
smaller, shorter identifiers.

00:08:55.270 --> 00:08:57.280
That really helps a lot
on the code side.

00:08:57.280 --> 00:08:59.340
So it's built into the tool and
it's kind of nice that as

00:08:59.340 --> 00:09:01.050
a developer, you don't have
to worry about that.

00:09:01.050 --> 00:09:02.890
SETH LADD: I want the tool
to do it for me, frankly.

00:09:02.890 --> 00:09:03.470
KASPER LUND: Exactly.

00:09:03.470 --> 00:09:05.790
LARS BAK: Just to stress a
point, we are not trying to

00:09:05.790 --> 00:09:07.490
break the web platform
with Dart.

00:09:07.490 --> 00:09:11.730
The whole point is that even
though we don't have Dart in

00:09:11.730 --> 00:09:13.870
your browser, you can
still use it.

00:09:13.870 --> 00:09:17.310
So you can translate Dart to
JavaScript and use it on an

00:09:17.310 --> 00:09:20.060
existing browser without
the Dart VM.

00:09:20.060 --> 00:09:20.730
And I think that's
pretty cool.

00:09:20.730 --> 00:09:22.220
SETH LADD: That's incredibly
important.

00:09:22.220 --> 00:09:24.620
KASPER LUND: One of the examples
of that is actually

00:09:24.620 --> 00:09:26.880
the Dart's JS, the compiler
that translates Dart to

00:09:26.880 --> 00:09:28.860
JavaScript is actually written
in Dart itself.

00:09:28.860 --> 00:09:31.720
And it can actually translate
itself to JavaScript.

00:09:31.720 --> 00:09:34.810
And the JavaScript that it
translates to can actually run

00:09:34.810 --> 00:09:35.680
on any modern browser.

00:09:35.680 --> 00:09:37.610
It can run on your iPad.

00:09:37.610 --> 00:09:39.980
And that doesn't have
a Dart VM at all.

00:09:39.980 --> 00:09:43.370
So just the fact that you have
Dart that can actually

00:09:43.370 --> 00:09:46.190
translate to JavaScript that
runs across the entire mobile

00:09:46.190 --> 00:09:49.390
and desktop web, is very, very
important to us and very, very

00:09:49.390 --> 00:09:50.560
cool at the same time.

00:09:50.560 --> 00:09:51.420
SETH LADD: Well certainly
performance

00:09:51.420 --> 00:09:52.800
is incredibly important.

00:09:52.800 --> 00:09:55.270
We saw what happened when V8
came along and started a new

00:09:55.270 --> 00:09:57.540
renaissance performance and I
started to see what the Dart

00:09:57.540 --> 00:09:58.840
VM and the Dart tools
are out there.

00:09:58.840 --> 00:10:01.690
But there's a whole other
pillar in productivity.

00:10:01.690 --> 00:10:03.740
You talked a little bit about
how Dart enables developers to

00:10:03.740 --> 00:10:06.610
be more happy and productive,
as well.

00:10:06.610 --> 00:10:08.250
LARS BAK: Well, Dart
is more structured.

00:10:08.250 --> 00:10:10.967
That means that you can
have tools that

00:10:10.967 --> 00:10:12.400
can analyze the program.

00:10:12.400 --> 00:10:15.430
And you can have tools that
help you be organized to

00:10:15.430 --> 00:10:19.230
program, like refactoring
of code.

00:10:19.230 --> 00:10:22.400
We also have static types
you can use if

00:10:22.400 --> 00:10:23.710
you want to in Dart.

00:10:23.710 --> 00:10:26.210
And it allows you to have
more structured codes.

00:10:26.210 --> 00:10:28.200
So for instance, if you have
two different development

00:10:28.200 --> 00:10:31.420
teams that have to collaborate
on libraries, you can put in

00:10:31.420 --> 00:10:34.730
types on the interfaces to the
library, so people could see

00:10:34.730 --> 00:10:37.430
exactly what the intent is
in using the libraries.

00:10:37.430 --> 00:10:41.420
I think that improves
productivity because you don't

00:10:41.420 --> 00:10:44.340
have to go through a lot of
documentation to figure out

00:10:44.340 --> 00:10:45.080
what's going on.

00:10:45.080 --> 00:10:46.050
You don't have to dive
into the code.

00:10:46.050 --> 00:10:48.710
You can look at the interface
and you convince yourself this

00:10:48.710 --> 00:10:51.400
is the intended usage
of this library.

00:10:51.400 --> 00:10:53.570
KASPER LUND: Now that you
mention library, one of the

00:10:53.570 --> 00:10:57.590
other key points to boosting
productivity is also having

00:10:57.590 --> 00:10:59.250
good support for modularity.

00:10:59.250 --> 00:11:02.500
And Dart has that built in
as part of the language.

00:11:02.500 --> 00:11:05.630
So that makes it very easy to
share pieces of functionality

00:11:05.630 --> 00:11:07.720
and re-use pieces of
functionality, which makes you

00:11:07.720 --> 00:11:09.100
more efficient, as
a programmer.

00:11:09.100 --> 00:11:09.890
SETH LADD: Well, this
brings back to

00:11:09.890 --> 00:11:11.250
the Pub package manager.

00:11:11.250 --> 00:11:14.030
We've seen countless number of
packages where people have

00:11:14.030 --> 00:11:17.550
shared their new libraries and
behavior and functionality and

00:11:17.550 --> 00:11:19.960
the ecosystem grows.

00:11:19.960 --> 00:11:21.870
KASPER LUND: I think we're
seeing more than 200 packages

00:11:21.870 --> 00:11:25.940
on the Pub page at this point
and it's certainly growing by

00:11:25.940 --> 00:11:28.100
the minute, basically.

00:11:28.100 --> 00:11:29.510
LARS BAK: It makes me
happy to see the

00:11:29.510 --> 00:11:30.820
communities pick this up.

00:11:30.820 --> 00:11:34.410
This is exactly what we intended
with this platform.

00:11:34.410 --> 00:11:37.750
Programmers need choice when
doing web development and I

00:11:37.750 --> 00:11:40.640
think that is a good
alternative.

00:11:40.640 --> 00:11:43.180
And if it makes some programmers
more productive,

00:11:43.180 --> 00:11:45.760
you've succeeded basically.

00:11:45.760 --> 00:11:45.910
SETH LADD: Absolutely.

00:11:45.910 --> 00:11:47.300
So what does the future
hold for Dart?

00:11:47.300 --> 00:11:49.590
What can we expect to come up?

00:11:49.590 --> 00:11:51.580
LARS BAK: Well, should
I take that?

00:11:51.580 --> 00:11:51.830
KASPER LUND: Yes.

00:11:51.830 --> 00:11:52.430
[INAUDIBLE]

00:11:52.430 --> 00:11:56.100
LARS BAK: So first of all, we
are going to ship the Dart SDK

00:11:56.100 --> 00:11:58.470
1.0, here after summer.

00:11:58.470 --> 00:12:01.050
And we're excited about that,
we have a complete package.

00:12:01.050 --> 00:12:05.740
At the same time, we are taking
the program language

00:12:05.740 --> 00:12:08.330
Dart, and putting into
the standards body.

00:12:08.330 --> 00:12:09.090
Hopefully.

00:12:09.090 --> 00:12:10.780
It's in the process.

00:12:10.780 --> 00:12:13.390
And then we'll work really,
really hard to get into

00:12:13.390 --> 00:12:14.840
Chrome, as the next step.

00:12:14.840 --> 00:12:16.830
So it's really exciting.

00:12:16.830 --> 00:12:19.550
And when it gets into Chrome,
you'll see this VM speed up

00:12:19.550 --> 00:12:21.860
when you have your existing
Dart application.

00:12:21.860 --> 00:12:22.980
And that's exciting.

00:12:22.980 --> 00:12:24.510
Suddenly everything
runs faster.

00:12:24.510 --> 00:12:24.780
SETH LADD: That's right.

00:12:24.780 --> 00:12:27.195
It runs across the web, if you
happen to have the VM it's

00:12:27.195 --> 00:12:28.100
like an accelerator.

00:12:28.100 --> 00:12:28.390
LARS BAK: Exactly.

00:12:28.390 --> 00:12:29.520
KASPER LUND: And clearly
we're not done with a

00:12:29.520 --> 00:12:30.200
performance work yet.

00:12:30.200 --> 00:12:31.330
We can do even better.

00:12:31.330 --> 00:12:31.630
SETH LADD: Yeah.

00:12:31.630 --> 00:12:31.940
[INAUDIBLE]

00:12:31.940 --> 00:12:33.760
see the numbers are we're
not even at 1.0 yet.

00:12:33.760 --> 00:12:35.835
KASPER LUND: It looks good, but
it can get even better.

00:12:35.835 --> 00:12:36.220
SETH LADD: Absolutely.

00:12:36.220 --> 00:12:38.180
So Dart's an open
source project.

00:12:38.180 --> 00:12:40.490
You could participate on
GitHub and Google Code.

00:12:40.490 --> 00:12:43.560
And we ask you guys to go to
dartlang.org, download the SDK

00:12:43.560 --> 00:12:44.530
and the editor.

00:12:44.530 --> 00:12:46.260
And join the project, see
what you can build.

00:12:46.260 --> 00:12:48.700
We look forward to seeing
what you build with us.

00:12:48.700 --> 00:12:50.200
Thanks everyone.

00:12:50.200 --> 00:12:51.450
LARS BAK: Thanks.

