WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
In the real world, problems tend not to solve just one specific puzzle,

00:00:05.000 --> 00:00:08.000
but they exist in an environment.

00:00:08.000 --> 00:00:11.000
They occupy a niche in an environment that evolves over time,

00:00:11.000 --> 00:00:15.000
and we can plot the program's evolution

00:00:15.000 --> 00:00:18.000
through a multidimensional space,

00:00:18.000 --> 00:00:22.000
and we can think of the different axes along this space,

00:00:22.000 --> 00:00:26.000
and one of the most important axes is correctness.

00:00:26.000 --> 00:00:28.000
Does the program do the right thing?

00:00:28.000 --> 00:00:32.000
Another axis is efficiency.

00:00:32.000 --> 00:00:34.000
Does it do it fast enough?

00:00:34.000 --> 00:00:36.000
Another axis is features.

00:00:36.000 --> 00:00:38.000
What exactly does it do?

00:00:38.000 --> 00:00:42.000
And another one is elegance,

00:00:42.000 --> 00:00:47.000
and I'm using the word elegance here coming from Richard O'Keefe,

00:00:47.000 --> 00:00:51.000
a programmer who said "Elegance is not optional."

00:00:51.000 --> 00:00:54.000
And elegance encompasses a number of attributes,

00:00:54.000 --> 00:00:58.000
or as they're sometimes called, "ity."

00:00:58.000 --> 00:01:02.000
That is, things that end in i-t-y like clarity,

00:01:02.000 --> 00:01:06.000
simplicity, and generality are all part of elegance.

00:01:06.000 --> 00:01:09.000
We can think of our program as occupying a point

00:01:09.000 --> 00:01:13.000
in this multidimensional space, and we'd really like it to be

00:01:13.000 --> 00:01:17.000
over here on the right where the correctness is high,

00:01:17.000 --> 00:01:20.000
although correctness doesn't have to be 100%.

00:01:20.000 --> 00:01:24.000
We all use programs that crash occasionally, and the programs are still useful to us.

00:01:24.000 --> 00:01:28.000
And then over time, the program evolves and moves in some of these directions.

00:01:28.000 --> 00:01:31.000
If the program is too slow, then we have to move it up

00:01:31.000 --> 00:01:34.000
along the efficiency direction,

00:01:34.000 --> 00:01:38.000
so we have to re-architect it and move it up to make it faster.

00:01:38.000 --> 00:01:41.000
Over time, we want to add more features to our program,

00:01:41.000 --> 00:01:46.000
so say for a poker program we want to deal with

00:01:46.000 --> 00:01:50.000
wild cards, or we want to deal with having to deal with ties,

00:01:50.000 --> 00:01:53.000
and so we move out along the feature dimension

00:01:53.000 --> 00:01:56.000
and move that program to a new space.

00:01:56.000 --> 00:02:00.000
And then sometimes we think about moving the program to a new point

00:02:00.000 --> 00:02:04.000
in the space of elegance, so moving along the elegance dimension

00:02:04.000 --> 00:02:09.000
without increasing the correctness or features or efficiency.

00:02:09.000 --> 00:02:13.000
And in some sense you might think "Well, that's not really doing anything."

00:02:13.000 --> 00:02:18.000
"Changing the elegance isn't gaining you any of these features."

00:02:18.000 --> 00:02:21.000
But what it is gaining you is nothing right now,

00:02:21.000 --> 00:02:23.000
but it's gaining you something for the future.

00:02:23.000 --> 00:02:27.000
A program that is more elegant is easier to maintain,

00:02:27.000 --> 00:02:30.000
easier to change, and so what you're doing

00:02:30.000 --> 00:02:33.000
is you're buying time in the future by making the program

00:02:33.000 --> 00:02:35.000
easier to maintain today.

00:02:35.000 --> 00:02:39.000
Now, when I think of a point in this multidimensional space,

00:02:39.000 --> 00:02:42.000
here we have correctness, and we're up against the right edge

00:02:42.000 --> 00:02:45.000
but maybe not quite all the way to the right edge,

00:02:45.000 --> 00:02:47.000
and similarly with all these other features.

00:02:47.000 --> 00:02:50.000
Now, Voltaire was not a programmer,

00:02:50.000 --> 00:02:54.000
but he gave some very good advice to programmers and engineers.

00:02:54.000 --> 00:02:58.000
He said, "The best is the enemy of the good,"

00:02:58.000 --> 00:03:02.000
and so what Voltaire meant by this is if you're striving for perfection,

00:03:02.000 --> 00:03:04.000
then you may waste too much time.

00:03:04.000 --> 00:03:07.000
You may make a bad engineering tradeoff to say

00:03:07.000 --> 00:03:09.000
"I'm going to have to get to 100% correctness,

00:03:09.000 --> 00:03:12.000
and I'm going to spend so much time doing that when I could have been doing something else."

00:03:12.000 --> 00:03:18.000
"I could have been adding more features or adding other attributes to the program."

00:03:18.000 --> 00:03:22.000
So you have to learn to be a good engineer and make good tradeoffs.

00:03:22.000 --> 00:03:25.000
For any change you make in this multidimensional space,

00:03:25.000 --> 00:03:28.000
any improvement you make in any of the dimensions,

00:03:28.000 --> 00:03:30.000
there's a benefit to that.

00:03:30.000 --> 00:03:34.000
You make the program more correct or more featureful or more efficient.

00:03:34.000 --> 00:03:37.000
But there's also a cost. It takes you time to do that.

00:03:37.000 --> 00:03:39.000
And you have to learn to make the right tradeoffs and say

00:03:39.000 --> 00:03:41.000
"What do I need most?"

00:03:41.000 --> 00:03:44.000
"Which direction do I need to move, or am I done?"

00:03:44.000 --> 09:59:59.000
"Do I not have to move anymore?"

