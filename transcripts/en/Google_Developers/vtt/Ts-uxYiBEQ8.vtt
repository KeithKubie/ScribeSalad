WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.311
[MUSIC PLAYING]

00:00:07.185 --> 00:00:08.622
[APPLAUSE]

00:00:08.622 --> 00:00:10.290
FLORINA MUNTENESCU:
Hello, everyone.

00:00:10.290 --> 00:00:11.640
My name is Florina Muntenescu.

00:00:11.640 --> 00:00:14.330
I'm a developer
advocate at Google.

00:00:14.330 --> 00:00:16.605
At Google I/O
earlier this year, we

00:00:16.605 --> 00:00:18.500
launched Architecture
Components,

00:00:18.500 --> 00:00:20.480
a collection of
libraries that help

00:00:20.480 --> 00:00:24.770
you design robust, testable,
and maintainable apps.

00:00:24.770 --> 00:00:27.050
Since then, we've been
discussed a lot with--

00:00:27.050 --> 00:00:28.670
well, with a lot of you.

00:00:28.670 --> 00:00:31.370
And then we saw a
lot of questions

00:00:31.370 --> 00:00:33.770
that kept on
repeating, stuff like,

00:00:33.770 --> 00:00:37.130
OK, I'm already using
RxJava in my application.

00:00:37.130 --> 00:00:39.860
Should I start
using LiveData also?

00:00:39.860 --> 00:00:43.970
Or, my architecture is
implemented using MVP.

00:00:43.970 --> 00:00:46.310
Should I now move to MVVM?

00:00:46.310 --> 00:00:50.360
Or, I need to display a
large list in my application.

00:00:50.360 --> 00:00:52.280
What should I do?

00:00:52.280 --> 00:00:55.400
In today's talk, I want to
tell you our suggestions

00:00:55.400 --> 00:00:58.010
of how to handle all of these.

00:00:58.010 --> 00:01:00.620
But before we go
into this, I want

00:01:00.620 --> 00:01:03.080
to go a little bit over the
Architecture Components,

00:01:03.080 --> 00:01:05.780
just to make sure that
we're all on the same page.

00:01:05.780 --> 00:01:08.840
And also, I want to
mention a few of these

00:01:08.840 --> 00:01:14.250
do's and don'ts of the
Architecture Components.

00:01:14.250 --> 00:01:17.210
So let's say that this is
an activity that displays

00:01:17.210 --> 00:01:19.580
information about the user.

00:01:19.580 --> 00:01:21.800
One of the biggest
problems for us

00:01:21.800 --> 00:01:24.630
Android developers is
configuration change.

00:01:24.630 --> 00:01:27.350
So for example, when
you rotate your device,

00:01:27.350 --> 00:01:32.120
the activity gets destroyed
and then recreated.

00:01:32.120 --> 00:01:35.420
So to help with this, we
introduced a lifecycle

00:01:35.420 --> 00:01:37.430
and a lifecycle owner.

00:01:37.430 --> 00:01:40.790
So an activity or a
fragment has a lifecycle.

00:01:40.790 --> 00:01:44.690
Therefore, they are
a lifecycle owner.

00:01:44.690 --> 00:01:48.440
And the lifecycle
of a lifecycle owner

00:01:48.440 --> 00:01:51.740
can be observed by a
lifecycle observer.

00:01:51.740 --> 00:01:54.740
And in that observer,
we can define

00:01:54.740 --> 00:01:58.070
methods that will be called
whenever specific lifecycle

00:01:58.070 --> 00:02:00.080
events will be triggered.

00:02:00.080 --> 00:02:03.260
So all you need to do is
annotate those methods

00:02:03.260 --> 00:02:07.010
with OnLifecycleEvent
plus the event name

00:02:07.010 --> 00:02:10.100
that you're interested in.

00:02:10.100 --> 00:02:12.340
Architecture
Components provides one

00:02:12.340 --> 00:02:16.780
such lifecycle-aware
component, which is LiveData.

00:02:16.780 --> 00:02:20.860
LiveData is a data holder,
so it can hold information

00:02:20.860 --> 00:02:24.620
about the user, for example.

00:02:24.620 --> 00:02:28.825
And other components can set
the value that is being called.

00:02:31.900 --> 00:02:36.250
And activities and fragments,
so objects that have a lifecycle

00:02:36.250 --> 00:02:40.400
can observe that LiveData.

00:02:40.400 --> 00:02:44.720
And then they can react on
the changes of that LiveData,

00:02:44.720 --> 00:02:47.015
and then they can update
the UI, for example.

00:02:50.000 --> 00:02:53.680
But when the activity
is OnPause or OnDestroy,

00:02:53.680 --> 00:02:57.190
the subscriber is
removed, so the LiveData

00:02:57.190 --> 00:03:02.120
is considered inactive, and
the events are not propagated.

00:03:02.120 --> 00:03:05.820
But once the activity's
recreated, we subscribe again,

00:03:05.820 --> 00:03:07.060
and we can update the UI.

00:03:10.390 --> 00:03:12.910
The class designed
to store and manage

00:03:12.910 --> 00:03:16.180
the UI data that survives
configuration changes

00:03:16.180 --> 00:03:18.070
is the ViewModel.

00:03:18.070 --> 00:03:21.790
So let's see how the
lifecycle of the ViewModel

00:03:21.790 --> 00:03:25.360
actually looks like, compared
to the activity lifecycle.

00:03:25.360 --> 00:03:28.210
We can see that we can
create a ViewModel only

00:03:28.210 --> 00:03:30.310
once the activity is created.

00:03:30.310 --> 00:03:32.650
And then, the
ViewModel will only

00:03:32.650 --> 00:03:36.250
be destroyed when the
activity is finished.

00:03:36.250 --> 00:03:42.240
So more precisely, the ViewModel
survives configuration changes,

00:03:42.240 --> 00:03:46.600
but it will not survive
pressing back on your phone,

00:03:46.600 --> 00:03:48.820
killing the application
from recents,

00:03:48.820 --> 00:03:52.250
or when the fragment
kills your application.

00:03:52.250 --> 00:03:54.430
So this means that
the ViewModel is

00:03:54.430 --> 00:03:57.670
perfect for handling
long-running operations,

00:03:57.670 --> 00:04:00.340
because the ViewModel
will be updated

00:04:00.340 --> 00:04:03.850
independent of whether the
data is observed or not.

00:04:03.850 --> 00:04:06.910
So this means that you will no
longer get these null pointer

00:04:06.910 --> 00:04:11.600
exceptions when trying to
update a nonexistent View.

00:04:11.600 --> 00:04:14.570
So make sure you avoid
referencing Views

00:04:14.570 --> 00:04:16.850
in ViewModels,
because they can lead

00:04:16.850 --> 00:04:20.660
to memory leaks or crashes.

00:04:20.660 --> 00:04:23.870
So the mindset here
changes a little bit,

00:04:23.870 --> 00:04:27.170
because instead of pushing
the data to the UI,

00:04:27.170 --> 00:04:29.850
you let the UI
observe the changes.

00:04:29.850 --> 00:04:33.620
So just make sure you don't
hold any UI logic in the View,

00:04:33.620 --> 00:04:37.700
but rather move this in the
ViewModel so it can be easily

00:04:37.700 --> 00:04:39.740
unit tested.

00:04:39.740 --> 00:04:43.550
So for example, it would be
the ViewModel's responsibility

00:04:43.550 --> 00:04:46.520
to get the user, prepare
it to be displayed,

00:04:46.520 --> 00:04:48.470
and hold it for the UI.

00:04:48.470 --> 00:04:51.830
And then, the UI will
notify the ViewModel

00:04:51.830 --> 00:04:55.070
of the user's actions.

00:04:55.070 --> 00:04:57.850
The ViewModel would
work with a repository--

00:04:57.850 --> 00:04:59.690
this will be a class
that you define--

00:04:59.690 --> 00:05:02.930
to get and set the data.

00:05:02.930 --> 00:05:05.480
So the repository
models or modules

00:05:05.480 --> 00:05:08.300
are responsible for
handling data operations.

00:05:08.300 --> 00:05:12.200
They provide clean API to
the rest of the application.

00:05:12.200 --> 00:05:14.330
They know where to
get the data, what

00:05:14.330 --> 00:05:17.900
APIs call to make when
the data is updated.

00:05:17.900 --> 00:05:23.790
So you can see them as mediators
between different data sources.

00:05:23.790 --> 00:05:26.330
So it's a good idea
to have a data layer

00:05:26.330 --> 00:05:29.840
in your app completely unaware
of the presentation layer,

00:05:29.840 --> 00:05:33.200
because algorithms that
synchronize or keep

00:05:33.200 --> 00:05:36.530
caches or make database
synchronizations

00:05:36.530 --> 00:05:37.790
are quite complicated.

00:05:37.790 --> 00:05:41.840
So you want to make sure that
you add a single point of entry

00:05:41.840 --> 00:05:44.550
to your data.

00:05:44.550 --> 00:05:46.820
So this means that
the repository

00:05:46.820 --> 00:05:50.450
will know which API to call to
get the user from the network.

00:05:50.450 --> 00:05:53.870
And because we want to make
sure that we don't request

00:05:53.870 --> 00:05:55.880
the data too many
times, we're also

00:05:55.880 --> 00:05:59.720
going to save it
locally in the database.

00:05:59.720 --> 00:06:02.510
But to save the
data in database,

00:06:02.510 --> 00:06:06.530
Architecture Components comes
with a new library, Room.

00:06:06.530 --> 00:06:09.290
Room is a wrapper over
a SQLite database.

00:06:09.290 --> 00:06:13.580
It is an object mapping library
that provides data persistence

00:06:13.580 --> 00:06:16.720
with minimal boilerplate code.

00:06:16.720 --> 00:06:20.650
So for example, let's say that
this is our Users table, that

00:06:20.650 --> 00:06:24.490
has a user ID, which is a
primary key, and the name,

00:06:24.490 --> 00:06:27.640
and all sorts of other
information about the user.

00:06:27.640 --> 00:06:33.940
And what we want is, actually,
every instance of the role

00:06:33.940 --> 00:06:36.860
should be an instance
of a user object.

00:06:36.860 --> 00:06:41.050
So to do this, we
define a user data model

00:06:41.050 --> 00:06:43.290
that we just
annotate with Entity.

00:06:43.290 --> 00:06:48.280
Here, we define the primary
key and the column infos.

00:06:48.280 --> 00:06:50.800
To actually access the
data in the database,

00:06:50.800 --> 00:06:54.930
we work with DAOs, so
Data Access Objects.

00:06:54.930 --> 00:06:57.070
We're annotating
our class with DAO,

00:06:57.070 --> 00:07:00.070
and then we define
access points.

00:07:00.070 --> 00:07:05.470
So we can define queries,
inserts, update, and deletes.

00:07:05.470 --> 00:07:08.960
Queries can also return
LiveData objects.

00:07:08.960 --> 00:07:13.690
So they're making this
query an observable query.

00:07:13.690 --> 00:07:15.850
So what's an observable query?

00:07:15.850 --> 00:07:18.190
Let's say that we
have this Users table,

00:07:18.190 --> 00:07:21.380
and we want to get
the users by ID.

00:07:21.380 --> 00:07:24.030
So let's say that we're
interested in the user with ID

00:07:24.030 --> 00:07:25.210
4.

00:07:25.210 --> 00:07:28.930
So LiveData will
get the initial data

00:07:28.930 --> 00:07:32.560
from the database, which is
the user with the name John.

00:07:32.560 --> 00:07:36.520
But then when we obtain the data
in the table with, let's say,

00:07:36.520 --> 00:07:39.400
Mark instead of
John, the LiveData

00:07:39.400 --> 00:07:44.750
will automatically omit
that new information.

00:07:44.750 --> 00:07:47.800
So using observable
queries means

00:07:47.800 --> 00:07:52.000
that we have a UI that observes,
that reflects the latest

00:07:52.000 --> 00:07:56.440
changes in the databases,
because the repository would

00:07:56.440 --> 00:07:58.720
expose a LiveData
object, and then

00:07:58.720 --> 00:08:04.490
the ViewModel will also expose
a LiveData object for the UI.

00:08:04.490 --> 00:08:08.490
So what I've been mentioning
before, or until now

00:08:08.490 --> 00:08:11.010
with the ViewModels and
with the repositories,

00:08:11.010 --> 00:08:15.660
is what we call a guide
to App Architecture.

00:08:15.660 --> 00:08:20.160
It provides testability and
separations of concerns.

00:08:20.160 --> 00:08:23.230
But I saw that you've got
a few questions about this.

00:08:23.230 --> 00:08:26.520
So for example, how
many LiveData objects

00:08:26.520 --> 00:08:29.340
should I expose
from my ViewModel?

00:08:29.340 --> 00:08:33.030
Should I have-- so let's say
that the LiveData contains

00:08:33.030 --> 00:08:34.679
a model for the screen.

00:08:34.679 --> 00:08:37.250
Should I expose only one?

00:08:37.250 --> 00:08:39.880
Should I expose multiple?

00:08:39.880 --> 00:08:43.289
So let's say that the top
part contains some user

00:08:43.289 --> 00:08:47.220
information, and then the bottom
part, some general settings

00:08:47.220 --> 00:08:48.210
data.

00:08:48.210 --> 00:08:50.070
So you can see that,
actually, these are

00:08:50.070 --> 00:08:52.500
two different logical units.

00:08:52.500 --> 00:08:56.880
So what you could do is group
together these logical units.

00:08:56.880 --> 00:09:00.900
So you could expose a
LiveData for the user info

00:09:00.900 --> 00:09:03.395
and then another LiveData
for the settings.

00:09:06.410 --> 00:09:08.270
What if I'm using MVP?

00:09:08.270 --> 00:09:11.540
Should I switch to MVVM?

00:09:11.540 --> 00:09:15.290
So should you replace the
presenter with a ViewModel?

00:09:15.290 --> 00:09:16.920
Actually, it depends.

00:09:16.920 --> 00:09:19.070
It depends on the amount
of logic that you have,

00:09:19.070 --> 00:09:21.650
on how testable
your classes are.

00:09:21.650 --> 00:09:23.510
The main idea is
that you should keep

00:09:23.510 --> 00:09:27.380
the logic in the activities
and in fragments to a minimum.

00:09:27.380 --> 00:09:31.160
So what you could do is put a
ViewModel between the presenter

00:09:31.160 --> 00:09:34.130
and the repository and
still let the presenter work

00:09:34.130 --> 00:09:35.360
with the View.

00:09:35.360 --> 00:09:37.520
But what's extremely
important is not

00:09:37.520 --> 00:09:40.550
to let ViewModels and presenters
know about the Android

00:09:40.550 --> 00:09:42.290
framework classes.

00:09:42.290 --> 00:09:44.897
And make sure you
distribute responsibilities.

00:09:44.897 --> 00:09:46.480
Don't be afraid to
create new classes.

00:09:50.070 --> 00:09:54.870
Should I use LiveData if
I'm already using RxJava?

00:09:54.870 --> 00:09:57.540
If you're already
using RxJava, chances

00:09:57.540 --> 00:09:59.430
are your project looks
something like this.

00:09:59.430 --> 00:10:02.430
You're using it throughout
the entire application.

00:10:02.430 --> 00:10:05.700
You're using it on the network
part, on the database part.

00:10:05.700 --> 00:10:08.460
You have a repository
that exposes

00:10:08.460 --> 00:10:13.000
flowables or observables, and
ViewModels that also do that.

00:10:13.000 --> 00:10:18.680
So one way you can do this
is split the responsibility.

00:10:18.680 --> 00:10:23.160
LiveData was made for the UI, so
you could leverage that and let

00:10:23.160 --> 00:10:25.170
the LiveData handle
the connection

00:10:25.170 --> 00:10:29.340
between the ViewModel and
your activities or fragments.

00:10:29.340 --> 00:10:31.620
You could use
composite disposable,

00:10:31.620 --> 00:10:34.260
where you keep your
subscriptions to the RxJava,

00:10:34.260 --> 00:10:36.750
and then in the
ViewModel onClear,

00:10:36.750 --> 00:10:39.090
you just clear
those disposables.

00:10:42.880 --> 00:10:43.870
How about the data?

00:10:43.870 --> 00:10:45.170
How do we save it?

00:10:45.170 --> 00:10:47.110
Where do we save it?

00:10:47.110 --> 00:10:50.050
Should you save it in the
database, in the ViewModel?

00:10:50.050 --> 00:10:54.470
What should you save in
onSavedInstanceState?

00:10:54.470 --> 00:10:56.670
So before going over
the few scenarios,

00:10:56.670 --> 00:10:58.100
let's look at this again.

00:10:58.100 --> 00:11:01.730
So only when the activity
is finished-- only then,

00:11:01.730 --> 00:11:03.180
the ViewModel is clear.

00:11:03.180 --> 00:11:06.300
So let's remember this.

00:11:06.300 --> 00:11:09.690
So let's see what happens
when the application starts.

00:11:09.690 --> 00:11:13.340
When the activity starts,
you call onCreate, and then

00:11:13.340 --> 00:11:15.270
onCreate, we would
actually get that reference

00:11:15.270 --> 00:11:16.670
to the ViewModel.

00:11:16.670 --> 00:11:20.640
The ViewModel will talk to the
repository to get the user.

00:11:20.640 --> 00:11:23.670
So the repository would do
a request to the network,

00:11:23.670 --> 00:11:26.970
calling up getUser
from your back end.

00:11:26.970 --> 00:11:29.880
The repository will save
that user information

00:11:29.880 --> 00:11:33.480
in the database, and then it
will expose that information

00:11:33.480 --> 00:11:35.000
to the ViewModel.

00:11:35.000 --> 00:11:38.067
The ViewModel will create
the model for the UI,

00:11:38.067 --> 00:11:40.650
because maybe you don't want to
expose all of that information

00:11:40.650 --> 00:11:41.940
that you have about your user.

00:11:41.940 --> 00:11:44.520
Maybe only the first
name and the last name.

00:11:44.520 --> 00:11:47.790
And then, the activity
will use that information

00:11:47.790 --> 00:11:50.760
and will display it.

00:11:50.760 --> 00:11:54.755
Let's see what happens when
you do configuration changes.

00:11:54.755 --> 00:11:56.755
So for example, when
you're rotating the device.

00:11:59.660 --> 00:12:03.840
So on configuration change,
the onStop is being called.

00:12:03.840 --> 00:12:07.370
But the ViewModel still
exists, still holds a reference

00:12:07.370 --> 00:12:09.560
to the UI model.

00:12:09.560 --> 00:12:13.440
When the application goes to
foreground, or is recreated,

00:12:13.440 --> 00:12:15.690
the onStart is called.

00:12:15.690 --> 00:12:18.590
And then in our
display method, we just

00:12:18.590 --> 00:12:22.080
get a reference from that
UI model from the ViewModel.

00:12:22.080 --> 00:12:22.850
That's it.

00:12:22.850 --> 00:12:24.920
We don't need to work
with a repository at all.

00:12:27.690 --> 00:12:30.300
Let's say that our application
goes to background,

00:12:30.300 --> 00:12:32.712
and then the user
navigates back to the app.

00:12:37.340 --> 00:12:40.070
So in this case, when the
activity goes to background,

00:12:40.070 --> 00:12:43.130
onSave instance state is called.

00:12:43.130 --> 00:12:46.500
And then, when the activity
comes to foreground,

00:12:46.500 --> 00:12:49.520
we just display the
user information

00:12:49.520 --> 00:12:52.430
based on whatever we have
in the ViewModel-- again,

00:12:52.430 --> 00:12:56.350
without requesting
anything from the network.

00:12:56.350 --> 00:12:57.940
Scenario three.

00:12:57.940 --> 00:13:03.210
Application goes to background,
and then the process is killed.

00:13:03.210 --> 00:13:06.840
So in this case, when the
activity goes to background,

00:13:06.840 --> 00:13:09.160
we should, in
onSavedInstanceState,

00:13:09.160 --> 00:13:11.730
we should save the user ID.

00:13:11.730 --> 00:13:12.990
This is why.

00:13:12.990 --> 00:13:15.720
Because when the
process is killed,

00:13:15.720 --> 00:13:17.820
the ViewModel is also killed.

00:13:17.820 --> 00:13:20.790
So when the activity
starts, in the onCreate,

00:13:20.790 --> 00:13:23.830
we would have in the
bundle that user ID.

00:13:23.830 --> 00:13:27.930
So what we can do is just inform
the ViewModel about the user ID

00:13:27.930 --> 00:13:30.570
that we're interested in,
and then the ViewModel

00:13:30.570 --> 00:13:33.870
will just talk to the
repository to get the user.

00:13:33.870 --> 00:13:36.360
But the repository already
has that information

00:13:36.360 --> 00:13:39.510
in the database, so we no longer
need to do another network

00:13:39.510 --> 00:13:42.000
request just to get the user.

00:13:42.000 --> 00:13:44.310
So the
onSavedInstanceState allows

00:13:44.310 --> 00:13:46.710
us to have the minimum
amount of information

00:13:46.710 --> 00:13:50.700
that we need to restore our UI
without doing any extra network

00:13:50.700 --> 00:13:52.810
requests.

00:13:52.810 --> 00:13:56.340
So what should you
put in each of them?

00:13:56.340 --> 00:14:01.030
In the database, put the data
that survives process death.

00:14:01.030 --> 00:14:04.880
In the ViewModel, put the
data that's needed by the UI.

00:14:04.880 --> 00:14:07.690
And then, in
onSavedInstanceState,

00:14:07.690 --> 00:14:11.590
put the minimal information that
is needed to restore the data.

00:14:14.480 --> 00:14:17.000
Instead of just the
user, let's consider

00:14:17.000 --> 00:14:20.540
that we have a list of users.

00:14:20.540 --> 00:14:23.060
Many applications need to
load a lot of information

00:14:23.060 --> 00:14:24.710
from the database.

00:14:24.710 --> 00:14:26.600
Database queries
can take a long time

00:14:26.600 --> 00:14:29.460
to run and use a lot of memory.

00:14:29.460 --> 00:14:34.490
And we have a new paging library
that we will release soon

00:14:34.490 --> 00:14:38.580
that can help you
with all of this.

00:14:38.580 --> 00:14:41.610
So the main components
of the paging library

00:14:41.610 --> 00:14:44.070
are a PagedList
Adapter, that actually

00:14:44.070 --> 00:14:50.500
expands the RecyclerViewAdapter,
a PagedList, and a DataSource.

00:14:50.500 --> 00:14:53.830
The DataSource is an
interface for page sources

00:14:53.830 --> 00:14:56.200
to provide the data gradually.

00:14:56.200 --> 00:14:59.380
But you'll need to implement
one of the two DataSources,

00:14:59.380 --> 00:15:02.950
either a Keyed DataSource,
which will be used when you need

00:15:02.950 --> 00:15:07.700
to load item N based
on the item N minus 1,

00:15:07.700 --> 00:15:10.570
or a Tiled DataSource,
that allows

00:15:10.570 --> 00:15:15.880
you to jump in any place
of your data set instantly.

00:15:15.880 --> 00:15:19.950
And you also need to implement
another method, loadCount.

00:15:19.950 --> 00:15:22.140
This one would be
the one that tells

00:15:22.140 --> 00:15:25.710
whether you have an infinite
or a finite amount of items

00:15:25.710 --> 00:15:29.380
that you need to
display in your list.

00:15:29.380 --> 00:15:31.720
The PagedList is
a component that

00:15:31.720 --> 00:15:35.604
loads the data automatically and
can provide update signals to--

00:15:35.604 --> 00:15:37.270
for example, to the
RecyclerViewAdapter.

00:15:37.270 --> 00:15:40.930
Of The data is
loaded automatically

00:15:40.930 --> 00:15:43.330
from a DataSource on
the background thread.

00:15:43.330 --> 00:15:47.390
But then, it's consumed
on the main thread.

00:15:47.390 --> 00:15:50.330
And it supports both an
infinite scrolling list,

00:15:50.330 --> 00:15:53.840
but also countable lists.

00:15:53.840 --> 00:15:55.760
And you can configure
several things.

00:15:55.760 --> 00:15:59.390
You can configure the initial
load size, the page size,

00:15:59.390 --> 00:16:00.710
but also the prefetch distance.

00:16:03.570 --> 00:16:07.030
So here's the data flow.

00:16:07.030 --> 00:16:10.470
Let's say that we have some data
that we put on the DataSource

00:16:10.470 --> 00:16:12.450
on the background thread.

00:16:12.450 --> 00:16:15.030
The DataSource
invalidates the PagedList

00:16:15.030 --> 00:16:17.710
and updates its value.

00:16:17.710 --> 00:16:20.700
And then, on the main
thread, the PagedList

00:16:20.700 --> 00:16:23.830
notifies its observers
of the new value.

00:16:23.830 --> 00:16:27.870
So now the PagedListAdapter
knows about the new value.

00:16:27.870 --> 00:16:31.110
So on the background
thread, the PagedListAdapter

00:16:31.110 --> 00:16:35.400
needs to compute what's
changed, what's the difference.

00:16:35.400 --> 00:16:38.280
And then, back on the
UI thread, the View

00:16:38.280 --> 00:16:41.910
is updated in the
onBindViewHolder.

00:16:41.910 --> 00:16:44.040
So all of this
happens automatically.

00:16:44.040 --> 00:16:46.890
You just insert an
item in that database,

00:16:46.890 --> 00:16:52.470
and then you see it animated
in, and no UI code is required.

00:16:52.470 --> 00:16:53.040
OK.

00:16:53.040 --> 00:16:55.100
Let's look at the code a bit.

00:16:55.100 --> 00:16:57.210
So to tell the
PagedListAdapter how

00:16:57.210 --> 00:16:59.810
to compute the differences
between the two elements,

00:16:59.810 --> 00:17:03.480
you'll need to implement
a new class, DiffCallback.

00:17:03.480 --> 00:17:06.420
Here, you will
define two things.

00:17:06.420 --> 00:17:09.180
You will define how to compute
whether the contents are

00:17:09.180 --> 00:17:13.650
the same, and how to define
whether the items are the same.

00:17:16.940 --> 00:17:19.760
To simplify the connection
between the DataSource

00:17:19.760 --> 00:17:25.109
and the RecyclerView, we can
use a LivePaged ListProvider.

00:17:25.109 --> 00:17:27.740
So this will expose,
actually, a LiveData

00:17:27.740 --> 00:17:31.200
of a PagedList of our user.

00:17:31.200 --> 00:17:34.910
So all you will need to do
is provide a DataSource.

00:17:34.910 --> 00:17:38.240
But if that DataSource
is true, then it

00:17:38.240 --> 00:17:41.240
will be generated
for you in the DAO.

00:17:41.240 --> 00:17:44.300
You don't need to write any
invalidating handling code.

00:17:44.300 --> 00:17:47.690
You can simply bind the
LiveData of a PagedList

00:17:47.690 --> 00:17:51.310
to a PagedListAdapter and
get updates, invalidates,

00:17:51.310 --> 00:17:56.376
and lifecycle cleanup with a
single line of binding code.

00:17:56.376 --> 00:18:00.980
So in our user DAO, we would
return a LivePaged ListProvider

00:18:00.980 --> 00:18:06.100
of our users to get the
users by the last name.

00:18:06.100 --> 00:18:08.230
And then, in the
ViewModel, we would

00:18:08.230 --> 00:18:11.770
extend from the Architecture
Component ViewModel,

00:18:11.770 --> 00:18:13.210
and then we would
keep a reference

00:18:13.210 --> 00:18:17.050
to that LiveData
of our PagedList.

00:18:17.050 --> 00:18:20.110
And we will get that
reference from the DAO

00:18:20.110 --> 00:18:24.040
by calling getUsers
by the last name,

00:18:24.040 --> 00:18:26.830
and then calling Create
using the configuration

00:18:26.830 --> 00:18:27.860
that you want.

00:18:27.860 --> 00:18:31.080
So for example, setting
the page size to 50,

00:18:31.080 --> 00:18:36.940
setting the prefetch
distance to 50, and so on.

00:18:36.940 --> 00:18:38.980
In our activity,
the activity needs

00:18:38.980 --> 00:18:41.200
to be, of course,
a lifecycle owner.

00:18:41.200 --> 00:18:44.750
And then, in the onCreate,
we get the reference

00:18:44.750 --> 00:18:47.140
to our ViewModel.

00:18:47.140 --> 00:18:49.000
We get the reference
to the RecyclerView,

00:18:49.000 --> 00:18:52.090
and we create our adapter.

00:18:52.090 --> 00:18:55.240
And then we use
another handy class

00:18:55.240 --> 00:18:57.450
from the Architecture
Components-

00:18:57.450 --> 00:18:59.800
LiveListAdapterUtil.

00:18:59.800 --> 00:19:03.640
So this provides hooks for
LiveData and lifecycle,

00:19:03.640 --> 00:19:06.057
so you can bind with
just one line of code

00:19:06.057 --> 00:19:07.390
and not worry about the cleanup.

00:19:10.122 --> 00:19:11.830
And then, we are just
setting the adapter

00:19:11.830 --> 00:19:14.110
to the RecyclerView.

00:19:14.110 --> 00:19:15.700
Let's look at the adapter.

00:19:15.700 --> 00:19:19.120
So our adapter would
extend PagedListAdapter,

00:19:19.120 --> 00:19:20.830
and then it will
connect the user, which

00:19:20.830 --> 00:19:22.610
is the information
that's being displayed,

00:19:22.610 --> 00:19:25.090
with the user ViewHolder.

00:19:25.090 --> 00:19:29.380
And then we define the
callback, the DIFF_CALLBACK,

00:19:29.380 --> 00:19:31.930
for our user objects.

00:19:31.930 --> 00:19:35.200
And then in onBindViewHolder,
all we need to do

00:19:35.200 --> 00:19:38.151
is bind the item
to the ViewHolder.

00:19:38.151 --> 00:19:38.650
That's all.

00:19:41.300 --> 00:19:43.580
We have a lot of new
concepts and components

00:19:43.580 --> 00:19:45.950
with Architecture Components.

00:19:45.950 --> 00:19:48.870
But the thing is, you
can use them separately.

00:19:48.870 --> 00:19:51.110
So if you want, you'll
only be able to use

00:19:51.110 --> 00:19:55.760
lifecycle, LiveData, and
PagedList or only ViewModel,

00:19:55.760 --> 00:19:57.480
or only Room.

00:19:57.480 --> 00:20:00.760
But you can also
use them together.

00:20:00.760 --> 00:20:03.440
So start using the
Architecture Components

00:20:03.440 --> 00:20:05.360
to create a more
testable architecture

00:20:05.360 --> 00:20:07.140
for your application.

00:20:07.140 --> 00:20:07.930
Thank you.

00:20:07.930 --> 00:20:09.430
[APPLAUSE]

00:20:09.430 --> 00:20:13.380
[MUSIC PLAYING]

