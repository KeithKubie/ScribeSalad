WEBVTT
Kind: captions
Language: en

00:00:19.770 --> 00:00:21.930
ANDREW RINGLER: It's like
a file sharing system,

00:00:21.930 --> 00:00:25.860
like Dropbox, except you
manually take care of the files

00:00:25.860 --> 00:00:28.080
yourself and you worry
about merge conflicts.

00:00:28.080 --> 00:00:31.500
So if in Dropbox, you
and your collaborator

00:00:31.500 --> 00:00:34.920
added a document at the same
time, it tries to save both

00:00:34.920 --> 00:00:36.750
and it goes, aah,
something's wrong.

00:00:36.750 --> 00:00:39.920
And it makes one that
says "conflicted copy."

00:00:39.920 --> 00:00:45.186
And GitHub does a similar
thing but then it hands it back

00:00:45.186 --> 00:00:46.560
to you and it
says, I'm not going

00:00:46.560 --> 00:00:48.030
to save that
conflicted copy, you

00:00:48.030 --> 00:00:51.240
need to tell me what to do to
resolve that so that I only

00:00:51.240 --> 00:00:55.080
have one version of each file
and it's the master version.

00:00:55.080 --> 00:00:57.180
So GitHub, in a
nutshell, is just

00:00:57.180 --> 00:00:59.190
a way to share files
with other people

00:00:59.190 --> 00:01:02.520
collaboratively without
overwriting other people's

00:01:02.520 --> 00:01:05.400
stuff and without having
conflicts happen inside

00:01:05.400 --> 00:01:08.544
of the cloud where you're
able to share this document.

00:01:08.544 --> 00:01:09.960
So what I'm going
to go over today

00:01:09.960 --> 00:01:14.790
is GitHub and then briefly how
to add pages and upload them.

00:01:18.090 --> 00:01:21.520
So what is GitHub?

00:01:21.520 --> 00:01:25.320
Does anyone want to
explain what GitHub is?

00:01:25.320 --> 00:01:25.940
Or Git?

00:01:34.140 --> 00:01:35.005
The wild guess.

00:01:38.870 --> 00:01:41.670
OK.

00:01:41.670 --> 00:01:44.690
GitHub is a few things.

00:01:44.690 --> 00:01:55.770
GitHub is a web-based platform,
a website for sharing code,

00:01:55.770 --> 00:01:57.250
sharing software code--

00:01:57.250 --> 00:02:00.030
the source code of software.

00:02:00.030 --> 00:02:06.210
So it's created for developers
to collaborate on code.

00:02:06.210 --> 00:02:09.570
A lot of code on there
is open source code--

00:02:09.570 --> 00:02:13.140
code that the source code is
freely available to look at.

00:02:18.130 --> 00:02:19.560
So basically, it's
a website where

00:02:19.560 --> 00:02:24.120
you can navigate
other people's code,

00:02:24.120 --> 00:02:26.880
you can collaborate
on the same project.

00:02:32.192 --> 00:02:35.485
And you can also just look
at other people's projects

00:02:35.485 --> 00:02:38.215
so you can submit bug
reports to projects.

00:02:44.370 --> 00:02:50.200
So GitHub is the
sort of community.

00:02:50.200 --> 00:02:52.950
The other thing it is is
it's a piece of software

00:02:52.950 --> 00:02:56.270
based on a technology
called Git,

00:02:56.270 --> 00:03:06.120
G-I-T. Git is a piece
of software that

00:03:06.120 --> 00:03:13.970
lets you collaborate, basically
lets you share source code.

00:03:13.970 --> 00:03:18.920
And GitHub kind of extends
that by making a pretty website

00:03:18.920 --> 00:03:21.515
and a few other things.

00:03:29.130 --> 00:03:33.145
So Git is a piece of software
called version control.

00:03:33.145 --> 00:03:37.820
Has anyone heard
that term before?

00:03:37.820 --> 00:03:38.977
Yes?

00:03:38.977 --> 00:03:41.310
Does anyone want to explain
that term-- version control?

00:03:45.850 --> 00:03:50.860
It is a very fancy way of
saying keeping a history

00:03:50.860 --> 00:03:53.760
and storing multiple
versions of things.

00:03:53.760 --> 00:03:59.240
So for example,
say, you are working

00:03:59.240 --> 00:04:01.130
on some sort of document--

00:04:03.800 --> 00:04:06.830
maybe a really important essay.

00:04:06.830 --> 00:04:11.840
So this is my really
important essay.

00:04:11.840 --> 00:04:16.959
"My essay on bugs by Andrew."

00:04:19.600 --> 00:04:24.520
So you're working on this
essay, you save the essay.

00:04:31.730 --> 00:04:42.170
Then you make some
changes, you save it again.

00:04:42.170 --> 00:04:45.470
And then you're like, oh,
what was the first version

00:04:45.470 --> 00:04:47.330
of the essay I did?

00:04:47.330 --> 00:04:50.330
It looks so different now.

00:04:50.330 --> 00:04:51.880
So one of the
things you'll do is

00:04:51.880 --> 00:05:02.080
once you have a
version you like,

00:05:02.080 --> 00:05:05.770
maybe you'll take that version
and let's make a copy of it.

00:05:11.710 --> 00:05:13.350
Let's call it like v1--

00:05:13.350 --> 00:05:13.930
version 1.

00:05:17.826 --> 00:05:20.950
Now let's start
working on version 2.

00:05:20.950 --> 00:05:24.370
So if we mess something up, we
still have the first version.

00:05:34.520 --> 00:05:36.460
And then it's
getting really good.

00:05:36.460 --> 00:05:43.580
So then at this point,
we save our version 2.

00:05:49.110 --> 00:05:51.750
Let's call this one Final.

00:06:01.140 --> 00:06:05.830
So as you work on multiple
versions of the document,

00:06:05.830 --> 00:06:10.330
you want to save different
versions in case you mess up.

00:06:14.479 --> 00:06:16.395
You might have done that
with an essay before.

00:06:19.300 --> 00:06:21.707
You might submit an
essay to professor.

00:06:21.707 --> 00:06:23.290
They give you back
a different version

00:06:23.290 --> 00:06:25.840
with corrected changes--

00:06:25.840 --> 00:06:28.810
an annotated version.

00:06:28.810 --> 00:06:32.530
So version control in
software is just a fancy way

00:06:32.530 --> 00:06:34.330
of saying the same thing--

00:06:34.330 --> 00:06:39.940
it's making multiple
versions of things

00:06:39.940 --> 00:06:44.312
that you can go
back to and look at.

00:06:44.312 --> 00:06:47.020
The thing with Git, though,
is you don't actually

00:06:47.020 --> 00:06:48.550
have to do what I just did.

00:06:48.550 --> 00:06:50.320
It does all that
automatically for you.

00:07:00.060 --> 00:07:02.010
And that's similar to--

00:07:02.010 --> 00:07:07.500
has anyone heard of Time
Machine for your Apple?

00:07:07.500 --> 00:07:16.050
Time Machine on OS X is software
product that basically backs up

00:07:16.050 --> 00:07:19.830
your computer every hour, and
then if something messes up,

00:07:19.830 --> 00:07:22.320
you can restore your computer
to an earlier version.

00:07:27.700 --> 00:07:30.520
It has a nice little interface
like with a little time

00:07:30.520 --> 00:07:31.570
machine.

00:07:31.570 --> 00:07:34.750
You can go back and look
at previous versions

00:07:34.750 --> 00:07:35.510
of your computer.

00:07:38.960 --> 00:07:40.930
GitHub is really similar.

00:07:40.930 --> 00:07:46.670
It's very similar, except
it's tuned for working well

00:07:46.670 --> 00:07:49.910
with source code, so it
has a lot of other features

00:07:49.910 --> 00:07:54.740
that are useful for
software developers.

00:07:54.740 --> 00:07:56.990
So if you're programming,
eventually you

00:07:56.990 --> 00:08:00.140
will have to learn
Git at some point.

00:08:00.140 --> 00:08:03.710
And GitHub is like
the most popular way

00:08:03.710 --> 00:08:07.430
of using Git, that's
why people treat them

00:08:07.430 --> 00:08:08.690
as almost the same thing.

00:08:12.610 --> 00:08:15.920
So let's take a look.

00:08:15.920 --> 00:08:23.012
The way GitHub
organizes things is

00:08:23.012 --> 00:08:27.370
it has these things
called repositories.

00:08:27.370 --> 00:08:30.770
And repository, you
could think of it

00:08:30.770 --> 00:08:35.030
as like a folder or a project.

00:08:35.030 --> 00:08:38.909
So every different project you'd
want to different repository.

00:08:38.909 --> 00:08:52.960
So for this course website we
have one called mens-et-manus.

00:08:56.000 --> 00:09:00.059
So where is that?

00:09:00.059 --> 00:09:01.640
Ahh, here it is.

00:09:06.480 --> 00:09:10.200
One of the things GitHub does
is it provides this fancy home

00:09:10.200 --> 00:09:15.000
page for your projects, so
you can document your projects

00:09:15.000 --> 00:09:16.110
on the homepage.

00:09:23.680 --> 00:09:25.830
GitHub has a few ways
of interacting with it.

00:09:25.830 --> 00:09:31.140
You can look at your files from
the web interface, GitHub.com.

00:09:31.140 --> 00:09:34.510
There is also
text-based interfaces

00:09:34.510 --> 00:09:38.171
and a visual interface
of GitHub Desktop, which

00:09:38.171 --> 00:09:38.920
we'll use shortly.

00:09:43.790 --> 00:09:47.100
A few things to note.

00:09:47.100 --> 00:09:50.040
So this is the current,
latest version of your files.

00:09:50.040 --> 00:09:53.000
This is a view of
the latest version.

00:09:56.290 --> 00:09:58.800
Unlike Time Machine, it
doesn't automatically

00:09:58.800 --> 00:10:00.510
create a new version every hour.

00:10:03.130 --> 00:10:06.940
And if you used
Dropbox, Dropbox creates

00:10:06.940 --> 00:10:10.010
a new version of your file
every time you change it.

00:10:10.010 --> 00:10:15.370
GitHub does not
do that because it

00:10:15.370 --> 00:10:20.330
wants you to explicitly say when
you've made a working change.

00:10:20.330 --> 00:10:23.770
Because if you're changing
a piece of software,

00:10:23.770 --> 00:10:25.790
you might change
three or four files

00:10:25.790 --> 00:10:31.090
until you have a working next
version of your software.

00:10:31.090 --> 00:10:32.890
So you basically
have to tell Git

00:10:32.890 --> 00:10:37.000
every time you have a
new version that works.

00:10:37.000 --> 00:10:38.410
And that's called the commit.

00:10:38.410 --> 00:10:41.960
So the commits are
basically the history

00:10:41.960 --> 00:10:48.400
of every time you've made a
change and told GitHub about it

00:10:48.400 --> 00:10:49.830
AUDIENCE: Excuse me.

00:10:49.830 --> 00:10:53.670
I would like to know if
you made an account there

00:10:53.670 --> 00:10:58.790
and put the files for the
course, uploaded them there.

00:10:58.790 --> 00:10:59.880
ANDREW RINGLER: Yes.

00:10:59.880 --> 00:11:00.380
Yes

00:11:00.380 --> 00:11:04.682
AUDIENCE: And if we sign, we can
view this if we search for it.

00:11:04.682 --> 00:11:06.594
Do we have to have access?

00:11:06.594 --> 00:11:08.040
Do you have to give us access?

00:11:08.040 --> 00:11:10.440
ANDREW RINGLER: I do, yes.

00:11:10.440 --> 00:11:12.390
You'll notice a few things.

00:11:12.390 --> 00:11:16.500
There's a little lock
icon and there's also

00:11:16.500 --> 00:11:19.908
this text that says "private."

00:11:19.908 --> 00:11:22.350
So yes, until I add
you, you will not

00:11:22.350 --> 00:11:23.485
be able to see this URL.

00:11:27.177 --> 00:11:31.110
AUDIENCE: Are you going to?

00:11:31.110 --> 00:11:32.660
ANDREW RINGLER: Twist my arm.

00:11:32.660 --> 00:11:33.160
Yes.

00:11:33.160 --> 00:11:34.868
AUDIENCE: No, I wonder
if we are supposed

00:11:34.868 --> 00:11:37.350
to use anything in there.

00:11:37.350 --> 00:11:41.790
ANDREW RINGLER:
Yes, at some point

00:11:41.790 --> 00:11:45.370
I will ask you all to
email me your GitHub user

00:11:45.370 --> 00:11:46.810
names and [INAUDIBLE].

00:11:50.210 --> 00:11:50.710
OK.

00:11:53.460 --> 00:11:55.990
So the commits are
basically the history.

00:11:55.990 --> 00:11:57.890
It's good to name them well.

00:11:57.890 --> 00:12:01.511
So I said, "Link to electronic
books and schedule."

00:12:07.310 --> 00:12:09.680
That's when I added this
schedule to the website.

00:12:21.450 --> 00:12:23.450
"Added a group
project example"--

00:12:23.450 --> 00:12:24.570
that was five hours ago.

00:12:28.710 --> 00:12:32.380
So that's when I added this
example of group project.

00:12:32.380 --> 00:12:39.590
So I basically made changes
and notated the change.

00:12:39.590 --> 00:12:44.300
So you can view the whole
history of stuff on GitHub.

00:12:44.300 --> 00:12:48.170
There's also a ton of other
features which we don't use.

00:12:48.170 --> 00:12:51.800
You could submit bug
reports on their issues.

00:12:51.800 --> 00:12:53.690
You can create a wiki
for your project,

00:12:53.690 --> 00:12:56.460
which most people do not do.

00:13:04.200 --> 00:13:05.610
All right.

00:13:05.610 --> 00:13:09.420
The web interface--
you only really want

00:13:09.420 --> 00:13:11.980
to use it as a
view of your files.

00:13:11.980 --> 00:13:13.880
You don't actually
upload files there.

00:13:16.490 --> 00:13:19.230
There is this Upload button
and Create a New File button,

00:13:19.230 --> 00:13:23.610
but you don't want to use that.

00:13:23.610 --> 00:13:27.000
What we actually do want
to use is this program

00:13:27.000 --> 00:13:28.635
called GitHub Desktop.

00:13:32.970 --> 00:13:43.310
GitHub Desktop is
similar to Dropbox.

00:13:43.310 --> 00:13:45.220
Has anyone not heard of Dropbox?

00:13:48.040 --> 00:13:50.100
Has anyone heard of Dropbox?

00:13:50.100 --> 00:13:52.600
AUDIENCE: Yes.

00:13:52.600 --> 00:13:57.070
ANDREW RINGLER: Yes, it had
an IPO, it's a big company.

00:13:57.070 --> 00:14:04.410
So Dropbox-- yes, here you go.

00:14:04.410 --> 00:14:06.170
So Dropbox has a few things.

00:14:06.170 --> 00:14:10.950
It has a sleek little program
that runs continuously.

00:14:10.950 --> 00:14:21.550
And what it does is it takes
a folder on your hard disk.

00:14:21.550 --> 00:14:23.660
And any file you
put in it, Dropbox

00:14:23.660 --> 00:14:26.300
will upload it to the cloud.

00:14:26.300 --> 00:14:28.290
And if you have Dropbox
on two computers,

00:14:28.290 --> 00:14:30.270
it will automatically
sync them so you can

00:14:30.270 --> 00:14:31.561
have two folders look the same.

00:14:33.970 --> 00:14:42.270
GitHub Desktop is very similar
to that, except it does not

00:14:42.270 --> 00:14:45.450
do anything automatically.

00:14:45.450 --> 00:14:48.450
If you drop files in a
folder, it will detect them,

00:14:48.450 --> 00:14:52.240
but it won't automatically
push them up to the cloud.

00:14:52.240 --> 00:14:55.290
You have to do that manually.

00:14:55.290 --> 00:14:57.560
The reason is--
what I said before--

00:14:57.560 --> 00:15:01.170
is because you need
to really make sure

00:15:01.170 --> 00:15:04.780
this is a change that
won't break the software,

00:15:04.780 --> 00:15:17.150
so forcing developers
to write out the change,

00:15:17.150 --> 00:15:20.410
helps make the software
easier to maintain.

00:15:20.410 --> 00:15:25.040
OK, so in a moment--

00:15:29.920 --> 00:15:31.860
I'll run through this quickly.

00:15:36.880 --> 00:15:39.620
Let me tell you all the
steps that have to happen.

00:15:42.500 --> 00:15:50.910
In a moment, on your own,
you will create an account

00:15:50.910 --> 00:15:52.000
on GitHub.com.

00:15:52.000 --> 00:15:52.870
It's a free account.

00:15:52.870 --> 00:15:54.494
You can use any email
address you want.

00:15:57.974 --> 00:15:59.515
You'll then download
GitHub Desktop--

00:16:02.080 --> 00:16:03.390
that is also free software.

00:16:15.340 --> 00:16:20.150
Once you've done that, you
can log into GitHub Desktop

00:16:20.150 --> 00:16:27.250
and sync your cloud account with
this piece of software locally.

00:16:31.620 --> 00:16:35.140
Once you log in,
you basically then

00:16:35.140 --> 00:16:37.660
choose which repositories
you want to track.

00:16:40.700 --> 00:16:47.696
And to do that, we hit the
Plus button, we say Clone.

00:16:57.090 --> 00:16:59.100
Then we search for
the repository.

00:17:02.130 --> 00:17:05.260
We clone it.

00:17:05.260 --> 00:17:09.109
We choose a location to save it.

00:17:09.109 --> 00:17:10.021
I'll run.

00:17:10.021 --> 00:17:11.520
through this really
quickly and then

00:17:11.520 --> 00:17:14.810
I'll step back for
everyone to do it.

00:17:18.670 --> 00:17:20.510
So what it's doing,
a clone is basically

00:17:20.510 --> 00:17:22.930
making a copy of the repository.

00:17:22.930 --> 00:17:28.260
So there's a version in my
cloud at GitHub in California,

00:17:28.260 --> 00:17:29.476
I guess.

00:17:29.476 --> 00:17:32.550
So we're downloading that.

00:17:32.550 --> 00:17:36.450
Once we downloaded it, we
could see a very similar view

00:17:36.450 --> 00:17:39.200
to what we saw online.

00:17:39.200 --> 00:17:41.310
Here "Link to electronic
books and schedule"--

00:17:41.310 --> 00:17:43.200
that's same thing we
saw on the web page.

00:17:46.690 --> 00:17:50.730
We'll say, "No
uncommitted changes."

00:17:50.730 --> 00:17:52.290
Great.

00:17:52.290 --> 00:18:04.540
As I mentioned, if you
drop a file in the folder--

00:18:04.540 --> 00:18:09.010
GitHub Desktop has created
this folder for me, just

00:18:09.010 --> 00:18:09.985
like a normal folder.

00:18:12.500 --> 00:18:15.860
And these are all
the files in it.

00:18:15.860 --> 00:18:22.510
So if we drag a new file into
it, just like with Dropbox--

00:18:22.510 --> 00:18:26.800
let's drag up the final
version of an essay.

00:18:26.800 --> 00:18:32.130
So I dragged it into
our repository folder

00:18:32.130 --> 00:18:35.850
locally on my hard drive.

00:18:35.850 --> 00:18:38.190
If we search back
to GitHub Desktop,

00:18:38.190 --> 00:18:39.640
it's detected that change.

00:18:44.250 --> 00:18:45.940
Then we want to commit.

00:18:45.940 --> 00:18:51.630
So I said, "Added my
final essay version."

00:18:51.630 --> 00:18:53.670
You always have to write
out a commit message.

00:18:53.670 --> 00:18:57.860
It won't let you commit
without a message.

00:18:57.860 --> 00:19:00.500
So I said, "Added
final version."

00:19:00.500 --> 00:19:01.390
I'll say Commit.

00:19:05.630 --> 00:19:11.360
That actually committed
locally on your computer.

00:19:11.360 --> 00:19:13.390
So it creates the whole history.

00:19:13.390 --> 00:19:15.040
Then we have to
do another step--

00:19:15.040 --> 00:19:20.390
sync-- which syncs my
history on my laptop

00:19:20.390 --> 00:19:28.160
with the universal history
on GitHub.com in California.

00:19:28.160 --> 00:19:30.352
So once I hit Sync--

00:19:30.352 --> 00:19:38.986
if we go back to the
web page and reload it,

00:19:38.986 --> 00:19:41.270
we can see the essay is up here.

00:19:43.780 --> 00:19:46.980
And we now have 566 commits.

00:19:46.980 --> 00:19:47.930
The last one--

00:19:47.930 --> 00:19:49.640
"Andrew Ringler
committed a minute ago,"

00:19:49.640 --> 00:19:51.279
and my file essay version.

00:19:59.860 --> 00:20:06.860
That's basically the idea of the
whole flow of files on GitHub.

00:20:09.840 --> 00:20:12.570
Any questions so far?

