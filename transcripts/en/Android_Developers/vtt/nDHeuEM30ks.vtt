WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.060
[MUSIC PLAYING]

00:00:02.290 --> 00:00:04.580
It's important for your app
to stay up to date

00:00:04.580 --> 00:00:06.498
in order to give the latest
social feeds,

00:00:06.498 --> 00:00:08.360
news, and weather reports
to your users.

00:00:08.360 --> 00:00:10.320
But in truth, syncing too often

00:00:10.320 --> 00:00:13.640
can be the worst idea
for the performance of your application.

00:00:13.640 --> 00:00:16.420
My name is Colt McCanlis and
there's one hard and fast rule

00:00:16.420 --> 00:00:18.920
when it comes to syncing your
data over the network.

00:00:19.390 --> 00:00:20.876
Do not over sync.

00:00:20.876 --> 00:00:22.690
I mean, it's a pretty
common situation.

00:00:22.690 --> 00:00:24.075
The user has your app active,

00:00:24.075 --> 00:00:25.930
or maybe it was the last app they used.

00:00:25.930 --> 00:00:27.133
And you want to make sure

00:00:27.133 --> 00:00:29.180
that there's plenty of new data
available for them,

00:00:29.180 --> 00:00:30.520
so they won't close your app

00:00:30.520 --> 00:00:32.830
or let their attention wander elsewhere.

00:00:32.830 --> 00:00:34.400
So you sync, you sync a lot.

00:00:34.400 --> 00:00:35.363
You ping the server.

00:00:35.363 --> 00:00:38.670
You ask for new data and bring
it down as often as you can.

00:00:38.670 --> 00:00:41.570
But let's face it, this
is a horrible idea.

00:00:41.570 --> 00:00:43.530
Firstly, this destroys
the user's battery,

00:00:43.530 --> 00:00:44.880
and as we've said before,

00:00:44.880 --> 00:00:47.780
networking is the single 
biggest battery hog there is.

00:00:47.780 --> 00:00:51.200
Not only does it drain battery
just to initialize the chip,

00:00:51.200 --> 00:00:54.290
but then it keeps it awake for
an additional 20 to 60 seconds

00:00:54.290 --> 00:00:58.055
after you're done with your
request, also drawing power.

00:00:58.055 --> 00:01:00.150
In fact, you can fall into
a really bad place

00:01:00.150 --> 00:01:02.150
where each one 
of your networking requests

00:01:02.150 --> 00:01:04.439
ends up waking up the
radio and paying this cost.

00:01:04.439 --> 00:01:05.340
Not ideal.

00:01:05.340 --> 00:01:07.340
Secondly, consider the
sheer volume of bits

00:01:07.340 --> 00:01:09.540
that your app is now
responsible for requesting

00:01:09.540 --> 00:01:10.770
on the user's phone.

00:01:10.770 --> 00:01:13.060
For users on restricted-usage data plans

00:01:13.060 --> 00:01:14.840
this can be a make or break crime.

00:01:14.840 --> 00:01:17.780
I mean, one app eating up a
month's worth of bandwidth

00:01:17.780 --> 00:01:20.440
simply because it keeps pinging
the server for new data?

00:01:20.450 --> 00:01:21.570
Not a good idea.

00:01:21.570 --> 00:01:24.710
And this is also a double whammy 
because the slower the connection

00:01:24.710 --> 00:01:27.155
the longer the radio stays on
to help transfer data,

00:01:27.155 --> 00:01:29.910
meaning that you're not only 
being taxed for bits on the wire,

00:01:29.910 --> 00:01:32.460
but also draining more battery as a result.

00:01:32.460 --> 00:01:34.320
So... OK, so syncing too often is bad.

00:01:34.320 --> 00:01:35.994
But let's be realistic here.

00:01:35.994 --> 00:01:38.420
Your app needs the data in
order to provide the user

00:01:38.420 --> 00:01:39.640
with the best experience.

00:01:39.640 --> 00:01:42.330
We can't just cut syncing
out completely, right?

00:01:42.330 --> 00:01:44.180
And the truth is
you don't have to.

00:01:44.180 --> 00:01:46.330
There's a few handy tricks
that you can employ

00:01:46.340 --> 00:01:49.008
which will give the user 
the same sense of functionality

00:01:49.008 --> 00:01:51.140
but require much fewer requests.

00:01:51.140 --> 00:01:53.410
The key to this solution is
understanding the difference

00:01:53.410 --> 00:01:55.360
between stuff that has
to happen right now

00:01:55.360 --> 00:01:56.900
and stuff that could be delayed.

00:01:56.900 --> 00:01:59.000
Now, for example, if the user
takes an action

00:01:59.000 --> 00:02:01.356
requesting that their news feed
updates right now,

00:02:01.356 --> 00:02:03.360
well, then you pretty much
have to kick off that request.

00:02:03.370 --> 00:02:05.190
But, really, the
second and third types

00:02:05.190 --> 00:02:07.770
are where you can actually
start improving performance.

00:02:07.770 --> 00:02:10.030
The requests that happen
on regular intervals

00:02:10.030 --> 00:02:11.340
that keep things up to date

00:02:11.340 --> 00:02:13.577
but don't need to happen 
right this second.

00:02:13.577 --> 00:02:15.380
If it's not super
important right now,

00:02:15.380 --> 00:02:18.400
then you can be smarter
about how it's synced.

00:02:18.400 --> 00:02:22.350
Case in point, you should really never 
pull the server regularly for updates.

00:02:22.350 --> 00:02:24.737
You're basically just
wasting bandwidth and battery

00:02:24.737 --> 00:02:27.080
for the server to tell you
that nothing's changed.

00:02:27.080 --> 00:02:29.320
Instead, it's better to
leverage other services,

00:02:29.320 --> 00:02:31.050
like Google Cloud Messaging,

00:02:31.050 --> 00:02:34.100
which will let the server signal the
app when there's new content.

00:02:34.100 --> 00:02:37.053
This will reduce the amount
of battery churn the phone is doing

00:02:37.053 --> 00:02:39.350
and reduce the overall number
of server responses

00:02:39.350 --> 00:02:40.740
that you need to worry about.

00:02:40.740 --> 00:02:43.509
Now, if there's a situation
where you simply have to sync,

00:02:43.509 --> 00:02:46.370
then make sure that you're not
doing it on regular intervals.

00:02:46.370 --> 00:02:48.060
Now, remember this
wastes resources.

00:02:48.060 --> 00:02:51.320
And most of the time there won't
be new content waiting for you.

00:02:51.320 --> 00:02:54.620
Instead, adopt a back-off
pattern based on responses.

00:02:54.620 --> 00:02:56.750
For instance, if no
new data is available,

00:02:56.750 --> 00:02:59.050
double the length you wait
until you check again.

00:02:59.050 --> 00:03:00.970
And if nothing's
available the next time,

00:03:00.970 --> 00:03:02.437
double your wait length again.

00:03:02.437 --> 00:03:04.790
This will still allow you
to sync against the data

00:03:04.810 --> 00:03:06.950
but will slowly back away
from higher activity

00:03:06.950 --> 00:03:10.300
based on how frequent 
the server side information is updating.

00:03:10.300 --> 00:03:13.330
And don't forget you can
also adjust seek frequency

00:03:13.330 --> 00:03:14.430
based on user activity.

00:03:14.430 --> 00:03:17.020
For example, if you can detect
that the user is driving

00:03:17.020 --> 00:03:19.587
or running or if the phone
has entered into sleep mode,

00:03:19.587 --> 00:03:21.050
you can make a good assumption

00:03:21.050 --> 00:03:23.430
that they won't need data
at the same rate.

00:03:23.430 --> 00:03:24.680
On the other side, though,

00:03:24.680 --> 00:03:26.920
if you've noticed that 
the phone's been asleep for eight hours

00:03:26.920 --> 00:03:28.730
and suddenly starts
getting moved around,

00:03:28.730 --> 00:03:30.960
then there's a good chance
the user has just woken up,

00:03:30.960 --> 00:03:33.800
and it might be the right time
to kick off the sync request.

00:03:33.800 --> 00:03:36.670
And finally, don't hesitate
to adjust your sync frequency

00:03:36.670 --> 00:03:38.430
based on the state
of the device.

00:03:38.430 --> 00:03:41.850
Waiting for it to be plugged in 
or connected to Wi-Fi to do syncing

00:03:41.850 --> 00:03:45.150
helps keep the battery happy
while users are out and about.

00:03:45.150 --> 00:03:47.442
And the good news is that
you can update your app

00:03:47.442 --> 00:03:49.640
to adopt these patterns
without having to write

00:03:49.640 --> 00:03:50.910
a massive amount of code.

00:03:50.910 --> 00:03:54.450
GCMNetworkManager is a
Google Play services API

00:03:54.450 --> 00:03:56.820
which helps to schedule
network-oriented tasks

00:03:56.820 --> 00:03:58.660
and handle batching for you.

00:03:58.660 --> 00:04:01.520
This greatly simplifies
the implementation of common patterns

00:04:01.520 --> 00:04:03.620
such as waiting 
for networking connectivity,

00:04:03.620 --> 00:04:05.910
network retries,
and exponential backoff.

00:04:05.910 --> 00:04:07.690
Basically, all the
good stuff you need

00:04:07.690 --> 00:04:09.554
with one single, helpful API.

00:04:09.554 --> 00:04:12.850
And if you're ever wondering
how your application's using the network,

00:04:12.850 --> 00:04:15.240
make sure to check out 
the Networking Traffic Tool

00:04:15.240 --> 00:04:16.437
inside of Android Studio.

00:04:16.437 --> 00:04:19.270
It will easily show you
the frequency of your data transfers

00:04:19.270 --> 00:04:21.980
and the amount of data transferred
during each connection.

00:04:21.980 --> 00:04:24.380
Of course, that's what it
all comes down to, right?

00:04:24.380 --> 00:04:26.050
Watch some videos,
improve your app.

00:04:26.050 --> 00:04:27.230
Make your users happier.

00:04:27.230 --> 00:04:28.947
But you're not done yet.

00:04:28.947 --> 00:04:30.470
That's why you need to check out

00:04:30.470 --> 00:04:32.748
the rest of the Android 
Performance Patterns content

00:04:32.748 --> 00:04:35.290
And don't forget to join the
Google+ community as well.

00:04:35.290 --> 00:04:36.910
So keep calm,
profile your code.

00:04:36.910 --> 00:04:38.880
And always remember... perfmatters.

00:04:38.880 --> 00:04:41.330
[MUSIC PLAYING]

