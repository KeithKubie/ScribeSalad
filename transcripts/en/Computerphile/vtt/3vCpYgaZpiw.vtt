WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.160
There was an exploit found for—
that works on Linux—

00:00:03.160 --> 00:00:08.520
and because of the way its works, you'll see when we take it apart, it'll probably work on other Unixes as well—

00:00:08.520 --> 00:00:10.780
that if you type this one command in,

00:00:10.780 --> 00:00:16.800
then what you end up doing is getting full root control
of the machine just by typing in this one command.

00:00:16.800 --> 00:00:21.940
I should say that it doesn't work on all Linux
installations, it has to be set up in the right way,

00:00:21.940 --> 00:00:24.180
but a lot of the major ones are set up like that.

00:00:24.180 --> 00:00:27.580
So yeah, if you can remember the
command or can find it on Twitter,

00:00:27.580 --> 00:00:31.780
you can type this in and get full
access to control the machine.

00:00:33.700 --> 00:00:37.600
I think the best place to start is if I show it.
So let me just start up the laptop.

00:00:37.600 --> 00:00:40.980
I've got a Linux virtual machine.
It's running CentOS 7.

00:00:40.980 --> 00:00:46.460
I've just literally gone and downloaded this off the
CentOS website and we can now see what's going.

00:00:46.460 --> 00:00:49.180
You could type it in from inside
the graphical user interface.

00:00:49.180 --> 00:00:54.740
I've found it works slightly better
if you switch to a command line.

00:00:54.740 --> 00:01:00.120
So I've logged in here to the machine and I'm just
sitting at the command line in the standard place,

00:01:00.120 --> 00:01:05.800
and if I try and, say, change the password
of root to something else, it'll say:

00:01:05.800 --> 00:01:11.120
"Only root can specify a user name";
I'm not logged in with any sort of special permissions,

00:01:11.120 --> 00:01:14.560
but if I type in this command
that's been tweeted and so on:

00:01:14.560 --> 00:01:28.020
cd /etc; Xorg -fp "root [GARBLED SPEECH]
" -logfile shadow :1; su

00:01:28.020 --> 00:01:31.340
Right, so if we hit this...

00:01:31.340 --> 00:01:35.140
Boom! It goes off and sets a few
things up, the screen goes black,

00:01:35.140 --> 00:01:39.580
but if I switch back to my other
one, if I type su again...

00:01:40.420 --> 00:01:47.260
It's logged me in as root, and of course, I can now
change the password on root without any problems.

00:01:47.260 --> 00:01:48.580
How does this actually work?

00:01:48.580 --> 00:01:53.900
Well let's sort of break down this command,
because actually it's made of three commands;

00:01:53.900 --> 00:01:57.540
the semi-colons in the thing that
we're running actually just say,

00:01:57.540 --> 00:02:00.880
"execute this command, followed
by this one, followed by this one."

00:02:00.880 --> 00:02:07.340
So the first part of it, cd /etc. Now anyone
who's used any Linux will know what that does.

00:02:07.340 --> 00:02:12.280
It moves into the directory /etc, and if we
look in there, there's a whole load of files in there,

00:02:12.280 --> 00:02:14.500
and that's a standard Unix directory.

00:02:14.500 --> 00:02:18.180
Inside there, you've got the configuration files
that tell you how to mount the filesystems,

00:02:18.180 --> 00:02:21.480
how to start up the individual programs and things.

00:02:21.480 --> 00:02:26.840
Also what you have in there are the password file
and something called the shadow password file,

00:02:26.840 --> 00:02:32.380
which contain details of user's usernames
and passwords, what their user identifiers are,

00:02:32.380 --> 00:02:34.120
what their home directory is, and so on.

00:02:34.120 --> 00:02:36.440
So you've got those files in there.

00:02:36.440 --> 00:02:37.840
So that's the first command.

00:02:37.840 --> 00:02:41.420
Let's have a look at the last command
next, so we'll come back to the middle one.

00:02:41.420 --> 00:02:47.480
So the last command is su. The su
command basically says, "go superuser."

00:02:47.480 --> 00:02:54.100
So the su command will log you in, in the
same session, as a superuser—as root, basically.

00:02:54.100 --> 00:02:56.380
Now, normally, that would ask you for a password,

00:02:56.380 --> 00:03:01.160
but as we saw here, after you've done this
exploit, it doesn't ask you for a password.

00:03:01.160 --> 00:03:03.040
So what's going on?
What's the middle one?

00:03:03.040 --> 00:03:07.120
So we've got Xorg, and then we
call it with various commands.

00:03:07.120 --> 00:03:13.740
So we have -fp, and then we give it root: and then
various bits and pieces that I'm not going to write out,

00:03:13.740 --> 00:03:18.880
and then we have -logfile shadow :1.

00:03:18.880 --> 00:03:24.140
We're running the program Xorg. Xorg is the
program that draws everything on the screen,

00:03:24.140 --> 00:03:28.720
handles the graphics card and
things under Unix-/Linux-type machines.

00:03:28.720 --> 00:03:33.280
Often this will run as root so
that it can control the hardware.

00:03:33.280 --> 00:03:38.560
I think there are ways you can have it not run as
root, but by default, often it will be running as root.

00:03:38.560 --> 00:03:42.120
Now, sometimes, you need to be
able to start that as a non-root user,

00:03:42.120 --> 00:03:44.400
so there's a special way it's set
up that we'll look at in a minute

00:03:44.400 --> 00:03:49.840
which enables us to run it as a normal user
but still let that program have access as root.

00:03:49.840 --> 00:03:54.600
Normally, doing this on its own would not let us get
root, because we don't know the password, normally,

00:03:54.600 --> 00:03:58.380
but after we've executed this command,
this Xorg command, then we can get root.

00:03:58.380 --> 00:04:02.600
So what's going on here? Well, two
things we need to see what's happening on.

00:04:02.600 --> 00:04:07.480
First of all—certainly on this version
of Linux, not necessarily on all of them—

00:04:07.480 --> 00:04:13.040
this program is set up with what's called
the "SUID bit", or the "set UID bit" set on it.

00:04:13.040 --> 00:04:15.500
So if we actually have a look at the program,

00:04:15.500 --> 00:04:21.500
which is in /usr/bin/Xorg, we can
see that when we look at the program,

00:04:21.500 --> 00:04:26.780
it has this s-flag on it in the list
of attributes that it's got there.

00:04:26.780 --> 00:04:30.360
It's read/write and it's got the
s-flag. This means "set UID".

00:04:30.360 --> 00:04:33.180
All that means is that when that program is run,

00:04:33.180 --> 00:04:37.660
it runs it as the user ID that the
program is owned by on the disk,

00:04:37.660 --> 00:04:40.380
rather than by the current-user-that-started-it's ID.

00:04:40.380 --> 00:04:44.000
So this program then will run as root,
and normally you'd want that to happen.

00:04:44.000 --> 00:04:47.300
That in itself isn't an exploit,
that's what you want to happen.

00:04:47.300 --> 00:04:49.800
There's lots of programs that
work like that, you want that to do it,

00:04:49.800 --> 00:04:53.920
but it means that, because that program is
running as root, because of the way it's set up,

00:04:53.920 --> 00:04:58.160
it has access to files that the
normal user wouldn't have access to.

00:04:58.160 --> 00:05:04.120
For example, the ones in /etc
that set up the password file.

00:05:04.120 --> 00:05:07.380
If we break this command down a bit further,
we've got two parts of this command.

00:05:07.380 --> 00:05:11.180
We'll come back to this one in a second,
but the first one is relatively simple.

00:05:11.180 --> 00:05:17.320
It's just setting up the log file
to be output to the file shadow,

00:05:17.320 --> 00:05:21.740
which, of course, will be in the directory /etc
because we've already moved in to that directory.

00:05:21.740 --> 00:05:25.520
So all that's telling it is, "when you
write a log file telling me what's happening,"

00:05:25.520 --> 00:05:29.940
so you can track down any configuration errors if you
want to see what's— if things aren't working properly,

00:05:29.940 --> 00:05:32.920
it's gonna be called shadow in the current directory.

00:05:32.920 --> 00:05:40.600
Now, /etc/shadow is one of the files which
stores the password data for Linux and other Unixes.

00:05:40.600 --> 00:05:46.580
There's actually two—originally, it was /etc/passwd,
and that stored things, and that was world-readable,

00:05:46.580 --> 00:05:49.780
so you could actually read the hashed
versions of people's passwords—

00:05:49.780 --> 00:05:52.240
watch Mike's video on what
password hashing is up here.

00:05:52.240 --> 00:05:53.280
So that wasn't a good idea.

00:05:53.280 --> 00:05:57.300
So what they did is they sort of kept the
password file, took the hashes out of it,

00:05:57.300 --> 00:06:01.520
and put the hashes in a copy of
the password file called shadow,

00:06:01.520 --> 00:06:04.440
which "shadowed" the password files, hence the name.

00:06:04.440 --> 00:06:08.500
So that was only accessed by root, which
meant that when you needed to check a password,

00:06:08.500 --> 00:06:11.680
the root stuff could access it and do that, and so on.

00:06:11.680 --> 00:06:17.840
So we're overwriting that file, shadow, with
the log file. So, okay, well, why does that help us?

00:06:17.840 --> 00:06:24.320
Well, we get to the first part of the command,
which is this one here, which is setting the font path.

00:06:24.320 --> 00:06:29.020
So we're setting the font path—
which is what the -fp flag does—

00:06:29.020 --> 00:06:34.660
to have this string, "root:, blah, blah, blah". So why does setting the font path,

00:06:34.660 --> 00:06:40.860
coupled with setting— logging into the
shadow file, enable us to grab root access?

00:06:40.860 --> 00:06:45.760
Well, let's have a look at the log file
that was created when we ran the exploit.

00:06:45.760 --> 00:06:51.260
What we see is all the X logging
information as it's started up,

00:06:51.260 --> 00:06:55.340
telling you what version it is, what
operating system we're running on, build IDs,

00:06:55.340 --> 00:06:58.480
various information about what's happening and so on.

00:06:58.480 --> 00:07:02.760
So then we get down to this line here at the bottom
which is telling us what we've set the font path to,

00:07:02.760 --> 00:07:07.980
and it happily outputs every single
line that we set the font path to.

00:07:07.980 --> 00:07:13.240
Now, what have we set the font path to?
We've set it to the "root:, blah, blah, blah", and so on,

00:07:13.240 --> 00:07:14.880
and the interesting thing about that is—

00:07:14.880 --> 00:07:19.220
One: it's been copied out on a line
on its own in the new shadow file—

00:07:19.220 --> 00:07:21.900
okay, some spaces at the beginning,
but that's not a problem—

00:07:21.900 --> 00:07:26.340
but the format of that line we've
written is the exact format required

00:07:26.340 --> 00:07:31.940
to tell the operating system the
password for root and all its details,

00:07:31.940 --> 00:07:37.380
but in this case, the password would normally
be between the first two colons, and that's blank;

00:07:37.380 --> 00:07:38.620
there's no hash there.

00:07:38.620 --> 00:07:43.880
So when you run su, the program— the
operating system looks at the shadow password file,

00:07:43.880 --> 00:07:48.380
says, "there's no password there! I'll let you log in,"

00:07:48.380 --> 00:07:54.560
and so you've got this wonderfully clever, almost
old-school exploit. There's quite a few like this.

00:07:54.560 --> 00:08:00.000
There was one in Emacs back in the '80s, which Clifford Stoll documented in his book, The Cuckoo's Egg,

00:08:00.000 --> 00:08:02.180
and various others where you could do similar things.

00:08:02.180 --> 00:08:04.920
You could have programs that
had access to write as root,

00:08:04.920 --> 00:08:11.440
could copy files into the right place and then give you
root access when perhaps you weren't meant to have it,

00:08:11.440 --> 00:08:13.460
and exactly the same thing has happened here.

00:08:13.460 --> 00:08:17.560
We're allowed to run Xorg, because we
want to display things on the screen,

00:08:17.560 --> 00:08:21.820
and sometimes you'll have the machine
set up so the users start it when they need it,

00:08:21.820 --> 00:08:24.080
rather than it starting up in that environment.

00:08:24.080 --> 00:08:29.660
So running it would be okay, but having the
"set UID" bit set is what you need in those cases,

00:08:29.660 --> 00:08:37.800
but coupled with the fact that we can write
out arbitrary data in the font path into the file,

00:08:37.800 --> 00:08:42.700
coupled with the fact that we can then log that into the
shadow file, which we normally wouldn't have access to,

00:08:42.700 --> 00:08:46.680
we can change the password for root,
or any other user we'd want to,

00:08:46.680 --> 00:08:50.620
and then log in as that user without any issue.

00:08:50.620 --> 00:08:53.160
Now, of course, the problem
is that as soon as you do this,

00:08:53.160 --> 00:08:58.160
you've overwritten the shadow password
file with, basically, junk and lines,

00:08:58.160 --> 00:09:01.600
so you'd probably want to be able to revert things back.

00:09:01.600 --> 00:09:05.880
Whether you can do that is an interesting question.

00:09:05.880 --> 00:09:12.760
Hopefully, it's made a backup of the file;
shadow.old looks like it might be a thing.

00:09:12.760 --> 00:09:18.040
So yeah, there's a backup that we could then move back into place and hide it if we wanted to,

00:09:18.040 --> 00:09:24.600
but we've now managed to get root access. Once we've got that, we can set up our own user, raise our privileges,

00:09:24.600 --> 00:09:26.900
and then we've got full control of the machine.

00:09:26.900 --> 00:09:29.120
The person that discovered it probably sort of thought,

00:09:29.120 --> 00:09:35.160
"well, actually, okay, I can log into different places,
I can write the log file into various different places,"

00:09:35.160 --> 00:09:38.140
and you think, "well, okay, if I can
write the log file into different places,

00:09:38.140 --> 00:09:44.420
"can I use that as a sort of way to get
the data I want into the right place?"

00:09:44.420 --> 00:09:47.240
So that's what you try and do, you say,
"I can write this file here,"

00:09:47.240 --> 00:09:50.840
but, of course, as we saw, the format is very different,

00:09:50.840 --> 00:09:53.080
you've got all those square
brackets at the beginning of lines,

00:09:53.080 --> 00:09:56.540
and so you couldn't just use it
to, say, overwrite a program file.

00:09:56.540 --> 00:09:58.460
So, some of the other ones we've looked at,

00:09:58.460 --> 00:10:02.880
and they were just to overwrite a standard
program file and get an exploit that way,

00:10:02.880 --> 00:10:04.540
and so you look at what options you've got,

00:10:04.540 --> 00:10:09.920
and you think, "okay, well this font path thing
will print out the list of all the font paths,

00:10:09.920 --> 00:10:14.400
"so if you've got more than one font path, you'd
see them all on separate lines, one after the other.

00:10:14.400 --> 00:10:18.300
"Okay, I can use that, because you can
then write out a font path which isn't a path,

00:10:18.300 --> 00:10:23.020
"but is actually the data you
need for the shadow password file,"

00:10:23.020 --> 00:10:26.000
and suddenly, you've got your exploit that works.

00:10:26.000 --> 00:10:29.160
Now the reason this actually happened,
the reason this has been there—

00:10:29.160 --> 00:10:32.140
and apparently it's been in the code for
two years before someone discovered it—

00:10:32.140 --> 00:10:37.380
there used to be a check on the log file
command and the module path command—

00:10:37.380 --> 00:10:39.700
there's another slight way you can exploit this as well—

00:10:39.700 --> 00:10:43.080
that would check whether you were
running with elevated privileges, i.e. as root.

00:10:43.080 --> 00:10:45.760
If you were, it wouldn't let
you use the -logfile command.

00:10:45.760 --> 00:10:50.020
It also wouldn't let you change the module path,
which is another slight way you can exploit this as well.

00:10:50.020 --> 00:10:54.320
You could put some arbitrary code
and get that into the system as well,

00:10:54.320 --> 00:10:59.300
and when they were refactoring the
code, then they— for some reason,

00:10:59.300 --> 00:11:02.600
that bit of the check didn't get put back in, and so on.

00:11:02.600 --> 00:11:07.800
So the fix would be dead simple, you just put that bit
of code back in, so I think patches will be available,

00:11:07.800 --> 00:11:16.980
but the quickest way to fix this is—if you do—
is to remove the "set UID" bit from Xorg.

