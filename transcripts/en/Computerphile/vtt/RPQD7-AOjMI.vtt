WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.440
&gt;&gt; Sean: There's one thing that we keep coming
back to. It's this idea of Turing Complete.

00:00:04.440 --> 00:00:08.250
What does it mean and why do we need to
worry about it?

00:00:08.250 --> 00:00:12.900
&gt;&gt; DFB: Yeah! what does it mean to say "Is a
language - it's usually, in this context, a

00:00:12.900 --> 00:00:16.710
programming language - is, or is not, Turing
Complete?"

00:00:17.279 --> 00:00:22.650
Well, the obvious first example is that every
programming language you're familiar with

00:00:22.650 --> 00:00:29.699
I mean we'll refer to the usual suspects:
Fortran, Basic,  Pascal,  Cobol, C, C++, Java

00:00:30.300 --> 00:00:33.360
they are all Turing Complete.

00:00:33.360 --> 00:00:36.840
So what,

00:00:36.840 --> 00:00:42.480
fundamentally, does a thing have to be in
order to be Turing Complete? And the

00:00:42.480 --> 00:00:47.100
answer is it needs to be able to do everything

00:00:47.940 --> 00:00:53.070
that a Turing Machine can do. Mercifully we
have made several videos on this topic

00:00:53.070 --> 00:01:00.090
some from me, some from my colleague Mark Jago
and we have visited quite a lot of

00:01:00.090 --> 00:01:01.739
these issues.

00:01:01.739 --> 00:01:08.280
Just to recap a Turing Machine is
thought of as an endless infinite piece

00:01:08.280 --> 00:01:15.570
of tape and it has a read/write head
that goes over the top of the marks on

00:01:15.570 --> 00:01:19.110
that tape which can be anything you like
but conventionally, to keep it very

00:01:19.110 --> 00:01:24.630
simple. you can say it's zeros and ones. And you
can show that just the ability to read

00:01:24.630 --> 00:01:31.049
and write on an infinite piece of tape,
patterns of zeros and ones, is powerful

00:01:31.049 --> 00:01:36.689
enough to compute anything that can be
computed. Admittedly your low-level

00:01:36.689 --> 00:01:40.079
Turing program with all its zeros and
ones

00:01:40.079 --> 00:01:44.790
may be ten trillion times longer than your
compiled C program -

00:01:44.790 --> 00:01:47.420
I don't know - but in principle it can do

00:01:47.420 --> 00:01:54.080
exactly the same. Some people argue that
actually although it was Turing that

00:01:54.080 --> 00:01:58.850
brought this all to our attention,
in the late thirties, with the work he

00:01:58.850 --> 00:02:03.440
did, in some way, some people would say it
really ought to be called Babbage Complete

00:02:03.440 --> 00:02:08.030
because another UK -- well he was a
computer scientist actually in the way

00:02:08.030 --> 00:02:10.100
his brain worked.

00:02:10.100 --> 00:02:14.300
Charles Babbage:  many of you know he
started off by just doing very powerful

00:02:14.300 --> 00:02:16.880
calculating machines - difference engines

00:02:16.880 --> 00:02:19.850
Well going beyond that, some of you
will know that Charles Babbage said "Well

00:02:19.850 --> 00:02:26.450
that's just like a a calculator that you
have in your top pocket" but weighs about

00:02:26.450 --> 00:02:31.910
ten tons and full of cog wheels! But even
just using cog wheels he went on and

00:02:31.910 --> 00:02:39.110
said "I want to do something that really
can compute in the way that a human

00:02:39.110 --> 00:02:39.830
can do"

00:02:39.830 --> 00:02:46.340
And the one thing he realized straight
away is to make it really powerful

00:02:46.340 --> 00:02:47.450
enough

00:02:47.450 --> 00:02:52.579
you must at very minimum have what was
called in those days

00:02:53.450 --> 00:02:59.329
Conditional Branching - 'if' statements.
You've got to be able to say that I'm

00:02:59.329 --> 00:03:03.739
going to look at a certain cell on my
tape and if it's got a one in it I'm

00:03:03.739 --> 00:03:07.130
going to do this thing and if it's
got a zero in itIi'm going to do that

00:03:07.130 --> 00:03:07.820
thing.

00:03:07.820 --> 00:03:14.090
So it's this sort of two-way choice that
an if-then-else statement can give you.

00:03:14.090 --> 00:03:19.160
He said it's absolutely vital to be able
to do that because very often the

00:03:19.160 --> 00:03:24.829
computations that humans do depend on
the precise nature of the data they are given

00:03:24.829 --> 00:03:26.750
Some data will send you one way

00:03:26.750 --> 00:03:31.280
some data will send you another. So this
conditional branching is absolutely vital.

00:03:31.220 --> 00:03:38.000
And as a sort of, kind of, resultant side-
effect of that it also implicitly means

00:03:38.000 --> 00:03:43.970
that you've got have the ability to 'go to'
 somewhere different in your memory.

00:03:43.970 --> 00:03:48.650
For example, you might be saying "if this
condition is true then I carry on with

00:03:48.650 --> 00:03:53.989
the sequence of instructions that
immediately follow, but on the other hand

00:03:53.989 --> 00:03:57.530
if the else statement is true then I
have to go off somewhere else and do

00:03:57.530 --> 00:03:59.629
something different". Now

00:03:59.629 --> 00:04:04.909
all our undergraduates we absolutely do
not encourage the raw use of 'go-to's

00:04:04.909 --> 00:04:06.980
because it's not good,

00:04:06.980 --> 00:04:11.330
well structured, programming. But those
who have done assembler will know that

00:04:11.330 --> 00:04:13.159
under the hood you can't avoid it.

00:04:13.159 --> 00:04:19.669
You really do have go-to statements which
say: "I'm here, at location 88 or whatever,

00:04:19.669 --> 00:04:23.030
now jump off to location 200".

00:04:23.030 --> 00:04:30.200
So, if you like, the conditional branching
implies a go-to in that you might stay

00:04:30.200 --> 00:04:31.610
in this part of the tape

00:04:31.610 --> 00:04:35.599
you might jump off somewhere else. We've
seen on the Turing Machine videos it's

00:04:35.599 --> 00:04:39.200
perfectly possible to get your
read/write head chattering across the

00:04:39.200 --> 00:04:43.760
tape until it finds a pattern that it
likes the look of. The other thing for

00:04:43.760 --> 00:04:51.860
Turing Completeness is you must be able
to have arbitrary amounts of memory. At

00:04:51.860 --> 00:04:56.780
the very basic level you must be able to
have a long enough tape in either

00:04:56.780 --> 00:05:01.580
direction and our modern machines. What
that means is the totality of the RAM

00:05:01.580 --> 00:05:06.349
that you possess - you must be able to get
as much memory as the problem needs.

00:05:06.349 --> 00:05:08.520
So that's the fundamental thing then:

00:05:08.520 --> 00:05:15.300
as much memory as you need and
conditional branching and at the bedrock

00:05:15.300 --> 00:05:20.370
that is what you absolutely must have. 
&gt;&gt; Sean: So, if a Turing Machine has, in principle,

00:05:20.370 --> 00:05:24.060
unlimited memory - none of our
computers are Turing Machines, then?

00:05:24.060 --> 00:05:28.080
&gt;&gt; DFB: Sean, I'm  so glad you asked that question !
And I didn't prompt you - I didn't prime you

00:05:28.080 --> 00:05:31.650
in any way! But, yes, you can say that

00:05:31.650 --> 00:05:36.360
absolutely none of our so-called
infinitely powerful Turing Machines can

00:05:36.360 --> 00:05:41.759
be. Because they've all got finite memory.
And if you go back to the Chomsky hierarchy

00:05:41.759 --> 00:05:46.409
you will find if you can have arbitrary
amounts of memory and if things might go

00:05:46.409 --> 00:05:50.159
on forever and you never know whether
they're going to terminate or not in the

00:05:50.159 --> 00:05:53.250
general case then you're in Chomsky Type 0.

00:05:53.250 --> 00:05:59.069
But the moment you say "Ah! but it's got to
terminate within a finite amount of memory

00:05:59.069 --> 00:06:05.190
you're down in Chomsky Type 1. So
you can say "Yes, essentially finiteness

00:06:05.190 --> 00:06:11.129
of memory forces that restriction on
you anyway - down to Type 1 instead of Type 0".

