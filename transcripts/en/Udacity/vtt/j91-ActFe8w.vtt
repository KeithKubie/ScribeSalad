WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:01.900
So memcache has a way of avoiding this problem and actually

00:00:01.900 --> 00:00:03.550
has a couple of ways. And the first thing we are going to

00:00:03.550 --> 00:00:09.050
about is called CAS, which basically stands for Check and Set. And

00:00:09.050 --> 00:00:12.120
this basically makes two different it adds two commands to the protocol.

00:00:12.120 --> 00:00:14.830
One is called gets and this takes a key. And this

00:00:14.830 --> 00:00:18.960
is inside of get. And what this returns is, the value plus

00:00:18.960 --> 00:00:21.811
what they call a unique. Which is basically just like a hash

00:00:21.811 --> 00:00:25.115
of the value or a counter, it's, it's some value that's unique

00:00:25.115 --> 00:00:27.517
specific to this, to this value in memcached.

00:00:27.517 --> 00:00:30.530
And there's another command called cas, which takes

00:00:30.530 --> 00:00:33.880
a key, a value, just like set would.

00:00:33.880 --> 00:00:38.510
And also a unique and basically, the way this

00:00:38.510 --> 00:00:40.490
function works is for the key that you're

00:00:40.490 --> 00:00:43.520
setting. If the unique matches the unique that came

00:00:43.520 --> 00:00:46.340
out of memcached, overwrite it with a value

00:00:46.340 --> 00:00:50.200
and return, basically True. But if you don't pass

00:00:50.200 --> 00:00:52.770
any unique, or the key isn't in the cache, or the

00:00:52.770 --> 00:00:57.220
unique has changed. Don't set it and return False. So basically,

00:00:57.220 --> 00:00:59.420
what this allows you to do is, it gives you these

00:00:59.420 --> 00:01:03.210
two commands that prevents you from, from two people overriding the same

00:01:03.210 --> 00:01:05.570
key in the cache. So if, if we have two app

00:01:05.570 --> 00:01:09.900
servers. So if they both run this memcache.gets on a particular key

00:01:09.900 --> 00:01:12.520
at the same time. You know, they'll get two return values.

00:01:12.520 --> 00:01:15.180
They'll get the value, I'm going to call that v. And the unique,

00:01:15.180 --> 00:01:17.930
we'll call that u. And the fun of these app servers

00:01:17.930 --> 00:01:22.750
updates key. By calling cas, he wants to update key to

00:01:22.750 --> 00:01:26.130
the variable stored in y, using the unique u. This will

00:01:26.130 --> 00:01:28.630
succeed and it will return True. And if this guy tries

00:01:28.630 --> 00:01:32.000
to do the same thing, only, memcache will only accept one

00:01:32.000 --> 00:01:34.060
right at a time. It does it very, very fast but

00:01:34.060 --> 00:01:35.890
it'll only do one right at a time. So if this

00:01:35.890 --> 00:01:40.400
guy tries to run the exact same code, mc.cas. We are going to

00:01:40.400 --> 00:01:42.910
set key to a variable sort of y, passing

00:01:42.910 --> 00:01:46.473
in u. This one will return False. Because this,

00:01:46.473 --> 00:01:49.224
this app server got there first. And, and of

00:01:49.224 --> 00:01:52.521
the unique value stored in memcache changed. You know,

00:01:52.521 --> 00:01:54.081
what both of these app servers would really do,

00:01:54.081 --> 00:01:55.641
is that the, the code would look something like

00:01:55.641 --> 00:02:00.720
this. You know r equals and then like while r equals False. You

00:02:00.720 --> 00:02:05.770
have like, u, v equals mc.gets,

00:02:05.770 --> 00:02:11.560
r equals mc.cas k, y, u. So you have this

00:02:11.560 --> 00:02:14.480
loop where you basically, you know, get the new, get the

00:02:14.480 --> 00:02:16.400
new unique out of the memcached and then try to

00:02:16.400 --> 00:02:18.920
set it. And then once you're setting the unique that you

00:02:18.920 --> 00:02:21.540
got out of memcached. Or that is the unique that's

00:02:21.540 --> 00:02:24.380
stored in memcache now, matches the one that you got out,

00:02:24.380 --> 00:02:27.710
you know, that you made the correct edit. Now, generally you

00:02:27.710 --> 00:02:31.300
only use this when you're doing kind of a destructive operation

00:02:31.300 --> 00:02:34.210
to the cache. Like you're updating a list. You know, if you're just over writing

00:02:34.210 --> 00:02:35.740
something, you don't need to worry about it.

00:02:35.740 --> 00:02:37.710
But if you're kind of manipulating an object

00:02:37.710 --> 00:02:39.910
and the order of manipulation matters, you

00:02:39.910 --> 00:02:41.797
can use something like cas. And so what

00:02:41.797 --> 00:02:42.973
I'd like you to do is go ahead

00:02:42.973 --> 00:02:45.235
and implement these functions in our fake memcached.

