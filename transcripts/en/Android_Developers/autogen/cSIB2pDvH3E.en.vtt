WEBVTT
Kind: captions
Language: en

00:00:07.880 --> 00:00:10.220
 
hi my name is reto Meier and I'm the

00:00:10.220 --> 00:00:10.230
hi my name is reto Meier and I'm the
 

00:00:10.230 --> 00:00:11.930
hi my name is reto Meier and I'm the
tech lead for Google's Android developer

00:00:11.930 --> 00:00:11.940
tech lead for Google's Android developer
 

00:00:11.940 --> 00:00:14.089
tech lead for Google's Android developer
relations team this is the first in a

00:00:14.089 --> 00:00:14.099
relations team this is the first in a
 

00:00:14.099 --> 00:00:15.740
relations team this is the first in a
series of dev bytes created to help you

00:00:15.740 --> 00:00:15.750
series of dev bytes created to help you
 

00:00:15.750 --> 00:00:17.540
series of dev bytes created to help you
improve the battery efficiency of your

00:00:17.540 --> 00:00:17.550
improve the battery efficiency of your
 

00:00:17.550 --> 00:00:19.250
improve the battery efficiency of your
apps by changing the way you handle your

00:00:19.250 --> 00:00:19.260
apps by changing the way you handle your
 

00:00:19.260 --> 00:00:21.859
apps by changing the way you handle your
data transfers the mobile cell radio is

00:00:21.859 --> 00:00:21.869
data transfers the mobile cell radio is
 

00:00:21.869 --> 00:00:23.390
data transfers the mobile cell radio is
one of the biggest sources of battery

00:00:23.390 --> 00:00:23.400
one of the biggest sources of battery
 

00:00:23.400 --> 00:00:25.040
one of the biggest sources of battery
drain on modern smartphones so making

00:00:25.040 --> 00:00:25.050
drain on modern smartphones so making
 

00:00:25.050 --> 00:00:26.929
drain on modern smartphones so making
sure transfers use it efficiently can

00:00:26.929 --> 00:00:26.939
sure transfers use it efficiently can
 

00:00:26.939 --> 00:00:28.849
sure transfers use it efficiently can
make a dramatic difference to your apps

00:00:28.849 --> 00:00:28.859
make a dramatic difference to your apps
 

00:00:28.859 --> 00:00:31.220
make a dramatic difference to your apps
impact on the battery life now on the

00:00:31.220 --> 00:00:31.230
impact on the battery life now on the
 

00:00:31.230 --> 00:00:32.749
impact on the battery life now on the
surface this seems like a pretty simple

00:00:32.749 --> 00:00:32.759
surface this seems like a pretty simple
 

00:00:32.759 --> 00:00:35.510
surface this seems like a pretty simple
challenge if the cell radio drains the

00:00:35.510 --> 00:00:35.520
challenge if the cell radio drains the
 

00:00:35.520 --> 00:00:37.280
challenge if the cell radio drains the
battery just transfer as little data as

00:00:37.280 --> 00:00:37.290
battery just transfer as little data as
 

00:00:37.290 --> 00:00:39.709
battery just transfer as little data as
possible as infrequently as possible now

00:00:39.709 --> 00:00:39.719
possible as infrequently as possible now
 

00:00:39.719 --> 00:00:40.850
possible as infrequently as possible now
that's a good start but we want to

00:00:40.850 --> 00:00:40.860
that's a good start but we want to
 

00:00:40.860 --> 00:00:43.160
that's a good start but we want to
balance that with providing a great user

00:00:43.160 --> 00:00:43.170
balance that with providing a great user
 

00:00:43.170 --> 00:00:45.470
balance that with providing a great user
experience one with the data your users

00:00:45.470 --> 00:00:45.480
experience one with the data your users
 

00:00:45.480 --> 00:00:47.240
experience one with the data your users
need is available as soon as they need

00:00:47.240 --> 00:00:47.250
need is available as soon as they need
 

00:00:47.250 --> 00:00:49.190
need is available as soon as they need
it without them ever needing to hit

00:00:49.190 --> 00:00:49.200
it without them ever needing to hit
 

00:00:49.200 --> 00:00:51.110
it without them ever needing to hit
refresh now that requires understanding

00:00:51.110 --> 00:00:51.120
refresh now that requires understanding
 

00:00:51.120 --> 00:00:53.150
refresh now that requires understanding
how to optimize the timing of your data

00:00:53.150 --> 00:00:53.160
how to optimize the timing of your data
 

00:00:53.160 --> 00:00:55.189
how to optimize the timing of your data
transfers and that means understanding

00:00:55.189 --> 00:00:55.199
transfers and that means understanding
 

00:00:55.199 --> 00:00:57.410
transfers and that means understanding
the cell state machine now in order to

00:00:57.410 --> 00:00:57.420
the cell state machine now in order to
 

00:00:57.420 --> 00:00:59.299
the cell state machine now in order to
conserve power the cell radio isn't kept

00:00:59.299 --> 00:00:59.309
conserve power the cell radio isn't kept
 

00:00:59.309 --> 00:01:01.130
conserve power the cell radio isn't kept
on permanently in fact it goes through a

00:01:01.130 --> 00:01:01.140
on permanently in fact it goes through a
 

00:01:01.140 --> 00:01:03.560
on permanently in fact it goes through a
series of state transitions in order to

00:01:03.560 --> 00:01:03.570
series of state transitions in order to
 

00:01:03.570 --> 00:01:05.240
series of state transitions in order to
compromise between low latency data

00:01:05.240 --> 00:01:05.250
compromise between low latency data
 

00:01:05.250 --> 00:01:07.219
compromise between low latency data
transfers and minimizing the impact on

00:01:07.219 --> 00:01:07.229
transfers and minimizing the impact on
 

00:01:07.229 --> 00:01:11.469
transfers and minimizing the impact on
battery life it begins over here on

00:01:11.469 --> 00:01:11.479
battery life it begins over here on
 

00:01:11.479 --> 00:01:14.090
battery life it begins over here on
standby mode we're restoring minimal

00:01:14.090 --> 00:01:14.100
standby mode we're restoring minimal
 

00:01:14.100 --> 00:01:16.010
standby mode we're restoring minimal
power until an app initiates a data

00:01:16.010 --> 00:01:16.020
power until an app initiates a data
 

00:01:16.020 --> 00:01:18.140
power until an app initiates a data
transfer at this point it transitions to

00:01:18.140 --> 00:01:18.150
transfer at this point it transitions to
 

00:01:18.150 --> 00:01:20.240
transfer at this point it transitions to
full power mode a process that takes

00:01:20.240 --> 00:01:20.250
full power mode a process that takes
 

00:01:20.250 --> 00:01:22.310
full power mode a process that takes
around two seconds before performing the

00:01:22.310 --> 00:01:22.320
around two seconds before performing the
 

00:01:22.320 --> 00:01:24.410
around two seconds before performing the
transfer now rather than dropping back

00:01:24.410 --> 00:01:24.420
transfer now rather than dropping back
 

00:01:24.420 --> 00:01:25.850
transfer now rather than dropping back
to standby immediately after the

00:01:25.850 --> 00:01:25.860
to standby immediately after the
 

00:01:25.860 --> 00:01:27.530
to standby immediately after the
transfer is completed the radio will

00:01:27.530 --> 00:01:27.540
transfer is completed the radio will
 

00:01:27.540 --> 00:01:29.480
transfer is completed the radio will
remain in full power mode for a set tail

00:01:29.480 --> 00:01:29.490
remain in full power mode for a set tail
 

00:01:29.490 --> 00:01:31.789
remain in full power mode for a set tail
time just in case further transfers are

00:01:31.789 --> 00:01:31.799
time just in case further transfers are
 

00:01:31.799 --> 00:01:33.980
time just in case further transfers are
initiated within that window this

00:01:33.980 --> 00:01:33.990
initiated within that window this
 

00:01:33.990 --> 00:01:35.600
initiated within that window this
happens because dropping to a low-power

00:01:35.600 --> 00:01:35.610
happens because dropping to a low-power
 

00:01:35.610 --> 00:01:38.179
happens because dropping to a low-power
state reintroduces this powerup latency

00:01:38.179 --> 00:01:38.189
state reintroduces this powerup latency
 

00:01:38.189 --> 00:01:40.370
state reintroduces this powerup latency
not only that the transitioning between

00:01:40.370 --> 00:01:40.380
not only that the transitioning between
 

00:01:40.380 --> 00:01:43.010
not only that the transitioning between
states in and of itself is a significant

00:01:43.010 --> 00:01:43.020
states in and of itself is a significant
 

00:01:43.020 --> 00:01:45.410
states in and of itself is a significant
power drain now if nothing happens

00:01:45.410 --> 00:01:45.420
power drain now if nothing happens
 

00:01:45.420 --> 00:01:47.090
power drain now if nothing happens
during the five to ten second tail time

00:01:47.090 --> 00:01:47.100
during the five to ten second tail time
 

00:01:47.100 --> 00:01:48.350
during the five to ten second tail time
the radio drops to this intermediate

00:01:48.350 --> 00:01:48.360
the radio drops to this intermediate
 

00:01:48.360 --> 00:01:51.230
the radio drops to this intermediate
low-power state that uses less battery

00:01:51.230 --> 00:01:51.240
low-power state that uses less battery
 

00:01:51.240 --> 00:01:53.300
low-power state that uses less battery
than full power but has a lower startup

00:01:53.300 --> 00:01:53.310
than full power but has a lower startup
 

00:01:53.310 --> 00:01:55.880
than full power but has a lower startup
latency than standby if a new transfer

00:01:55.880 --> 00:01:55.890
latency than standby if a new transfer
 

00:01:55.890 --> 00:01:57.590
latency than standby if a new transfer
is initiated it will be promoted back to

00:01:57.590 --> 00:01:57.600
is initiated it will be promoted back to
 

00:01:57.600 --> 00:01:59.389
is initiated it will be promoted back to
full power mode and if nothing happens

00:01:59.389 --> 00:01:59.399
full power mode and if nothing happens
 

00:01:59.399 --> 00:02:00.800
full power mode and if nothing happens
for another thirty Seconds to a minute

00:02:00.800 --> 00:02:00.810
for another thirty Seconds to a minute
 

00:02:00.810 --> 00:02:03.139
for another thirty Seconds to a minute
it'll drop back to standby the exact

00:02:03.139 --> 00:02:03.149
it'll drop back to standby the exact
 

00:02:03.149 --> 00:02:04.940
it'll drop back to standby the exact
latencies Intel times vary between

00:02:04.940 --> 00:02:04.950
latencies Intel times vary between
 

00:02:04.950 --> 00:02:06.950
latencies Intel times vary between
carries or even within carriers

00:02:06.950 --> 00:02:06.960
carries or even within carriers
 

00:02:06.960 --> 00:02:08.990
carries or even within carriers
depending on where they are as carriers

00:02:08.990 --> 00:02:09.000
depending on where they are as carriers
 

00:02:09.000 --> 00:02:10.669
depending on where they are as carriers
try to balance low latency with longer

00:02:10.669 --> 00:02:10.679
try to balance low latency with longer
 

00:02:10.679 --> 00:02:12.440
try to balance low latency with longer
battery life based on things like cell

00:02:12.440 --> 00:02:12.450
battery life based on things like cell
 

00:02:12.450 --> 00:02:13.250
battery life based on things like cell
congestion

00:02:13.250 --> 00:02:13.260
congestion
 

00:02:13.260 --> 00:02:14.630
congestion
and typical prevailing network

00:02:14.630 --> 00:02:14.640
and typical prevailing network
 

00:02:14.640 --> 00:02:17.149
and typical prevailing network
conditions to understand how this might

00:02:17.149 --> 00:02:17.159
conditions to understand how this might
 

00:02:17.159 --> 00:02:19.880
conditions to understand how this might
affect your app design choices you start

00:02:19.880 --> 00:02:19.890
affect your app design choices you start
 

00:02:19.890 --> 00:02:22.460
affect your app design choices you start
with this simple equation then take the

00:02:22.460 --> 00:02:22.470
with this simple equation then take the
 

00:02:22.470 --> 00:02:23.899
with this simple equation then take the
square root of the sum of the latency

00:02:23.899 --> 00:02:23.909
square root of the sum of the latency
 

00:02:23.909 --> 00:02:25.789
square root of the sum of the latency
and idle times between each state and

00:02:25.789 --> 00:02:25.799
and idle times between each state and
 

00:02:25.799 --> 00:02:28.130
and idle times between each state and
then throw all of that out because it

00:02:28.130 --> 00:02:28.140
then throw all of that out because it
 

00:02:28.140 --> 00:02:29.960
then throw all of that out because it
really doesn't require any math to do

00:02:29.960 --> 00:02:29.970
really doesn't require any math to do
 

00:02:29.970 --> 00:02:31.250
really doesn't require any math to do
and it doesn't even matter what the

00:02:31.250 --> 00:02:31.260
and it doesn't even matter what the
 

00:02:31.260 --> 00:02:33.410
and it doesn't even matter what the
specific latency or tail times are for

00:02:33.410 --> 00:02:33.420
specific latency or tail times are for
 

00:02:33.420 --> 00:02:36.949
specific latency or tail times are for
any users of your app the solution comes

00:02:36.949 --> 00:02:36.959
any users of your app the solution comes
 

00:02:36.959 --> 00:02:39.199
any users of your app the solution comes
down to what I like to call the cookie

00:02:39.199 --> 00:02:39.209
down to what I like to call the cookie
 

00:02:39.209 --> 00:02:40.970
down to what I like to call the cookie
droid conundrum when scheduling

00:02:40.970 --> 00:02:40.980
droid conundrum when scheduling
 

00:02:40.980 --> 00:02:43.099
droid conundrum when scheduling
downloads do you transfer as much as you

00:02:43.099 --> 00:02:43.109
downloads do you transfer as much as you
 

00:02:43.109 --> 00:02:44.710
downloads do you transfer as much as you
can as infrequently as possible

00:02:44.710 --> 00:02:44.720
can as infrequently as possible
 

00:02:44.720 --> 00:02:46.789
can as infrequently as possible
minimizing the number of transfers at

00:02:46.789 --> 00:02:46.799
minimizing the number of transfers at
 

00:02:46.799 --> 00:02:49.280
minimizing the number of transfers at
the expense of bandwidth or do you take

00:02:49.280 --> 00:02:49.290
the expense of bandwidth or do you take
 

00:02:49.290 --> 00:02:51.080
the expense of bandwidth or do you take
the opposite approach transferring as

00:02:51.080 --> 00:02:51.090
the opposite approach transferring as
 

00:02:51.090 --> 00:02:53.000
the opposite approach transferring as
little as possible performing transfers

00:02:53.000 --> 00:02:53.010
little as possible performing transfers
 

00:02:53.010 --> 00:02:55.640
little as possible performing transfers
more frequently well on the surface the

00:02:55.640 --> 00:02:55.650
more frequently well on the surface the
 

00:02:55.650 --> 00:02:57.619
more frequently well on the surface the
little little cookie model appears sound

00:02:57.619 --> 00:02:57.629
little little cookie model appears sound
 

00:02:57.629 --> 00:03:00.140
little little cookie model appears sound
less data transferred means less

00:03:00.140 --> 00:03:00.150
less data transferred means less
 

00:03:00.150 --> 00:03:03.140
less data transferred means less
bandwidth and less time spent with the

00:03:03.140 --> 00:03:03.150
bandwidth and less time spent with the
 

00:03:03.150 --> 00:03:05.089
bandwidth and less time spent with the
radio active to transfer our data and

00:03:05.089 --> 00:03:05.099
radio active to transfer our data and
 

00:03:05.099 --> 00:03:06.800
radio active to transfer our data and
because we're downloading what we need

00:03:06.800 --> 00:03:06.810
because we're downloading what we need
 

00:03:06.810 --> 00:03:08.960
because we're downloading what we need
on demand we never download and process

00:03:08.960 --> 00:03:08.970
on demand we never download and process
 

00:03:08.970 --> 00:03:10.210
on demand we never download and process
more than we need

00:03:10.210 --> 00:03:10.220
more than we need
 

00:03:10.220 --> 00:03:12.680
more than we need
unfortunately this results in a heavily

00:03:12.680 --> 00:03:12.690
unfortunately this results in a heavily
 

00:03:12.690 --> 00:03:15.020
unfortunately this results in a heavily
fragmented use of the cell radio from

00:03:15.020 --> 00:03:15.030
fragmented use of the cell radio from
 

00:03:15.030 --> 00:03:16.430
fragmented use of the cell radio from
our knowledge of the cell radio state

00:03:16.430 --> 00:03:16.440
our knowledge of the cell radio state
 

00:03:16.440 --> 00:03:17.900
our knowledge of the cell radio state
machine we know that every time we

00:03:17.900 --> 00:03:17.910
machine we know that every time we
 

00:03:17.910 --> 00:03:20.059
machine we know that every time we
perform a data transfer the radio stays

00:03:20.059 --> 00:03:20.069
perform a data transfer the radio stays
 

00:03:20.069 --> 00:03:22.129
perform a data transfer the radio stays
active for at least 5 seconds of tail

00:03:22.129 --> 00:03:22.139
active for at least 5 seconds of tail
 

00:03:22.139 --> 00:03:24.589
active for at least 5 seconds of tail
time at full power followed by anywhere

00:03:24.589 --> 00:03:24.599
time at full power followed by anywhere
 

00:03:24.599 --> 00:03:27.140
time at full power followed by anywhere
from 10 to 60 seconds at lower power

00:03:27.140 --> 00:03:27.150
from 10 to 60 seconds at lower power
 

00:03:27.150 --> 00:03:29.360
from 10 to 60 seconds at lower power
before it finally returns to standby

00:03:29.360 --> 00:03:29.370
before it finally returns to standby
 

00:03:29.370 --> 00:03:31.550
before it finally returns to standby
that means every time you initiate a

00:03:31.550 --> 00:03:31.560
that means every time you initiate a
 

00:03:31.560 --> 00:03:32.960
that means every time you initiate a
transfer you're powering the cell

00:03:32.960 --> 00:03:32.970
transfer you're powering the cell
 

00:03:32.970 --> 00:03:35.659
transfer you're powering the cell
already up for at least 20 seconds now

00:03:35.659 --> 00:03:35.669
already up for at least 20 seconds now
 

00:03:35.669 --> 00:03:37.250
already up for at least 20 seconds now
we look at this more closely you can see

00:03:37.250 --> 00:03:37.260
we look at this more closely you can see
 

00:03:37.260 --> 00:03:39.920
we look at this more closely you can see
how an app like this one whose radio use

00:03:39.920 --> 00:03:39.930
how an app like this one whose radio use
 

00:03:39.930 --> 00:03:42.229
how an app like this one whose radio use
is indicated here can drain the battery

00:03:42.229 --> 00:03:42.239
is indicated here can drain the battery
 

00:03:42.239 --> 00:03:44.629
is indicated here can drain the battery
without transferring very much data each

00:03:44.629 --> 00:03:44.639
without transferring very much data each
 

00:03:44.639 --> 00:03:47.210
without transferring very much data each
of these small Peaks represents

00:03:47.210 --> 00:03:47.220
of these small Peaks represents
 

00:03:47.220 --> 00:03:49.250
of these small Peaks represents
something like analytics data being sent

00:03:49.250 --> 00:03:49.260
something like analytics data being sent
 

00:03:49.260 --> 00:03:51.229
something like analytics data being sent
back to the server every 15 seconds

00:03:51.229 --> 00:03:51.239
back to the server every 15 seconds
 

00:03:51.239 --> 00:03:54.080
back to the server every 15 seconds
while the larger Peaks they represent

00:03:54.080 --> 00:03:54.090
while the larger Peaks they represent
 

00:03:54.090 --> 00:03:56.210
while the larger Peaks they represent
intermittent transfers based on user

00:03:56.210 --> 00:03:56.220
intermittent transfers based on user
 

00:03:56.220 --> 00:03:57.890
intermittent transfers based on user
interaction maybe clicking on a news

00:03:57.890 --> 00:03:57.900
interaction maybe clicking on a news
 

00:03:57.900 --> 00:03:59.210
interaction maybe clicking on a news
article or looking at a restaurant

00:03:59.210 --> 00:03:59.220
article or looking at a restaurant
 

00:03:59.220 --> 00:04:01.849
article or looking at a restaurant
listing now beneath that we can see how

00:04:01.849 --> 00:04:01.859
listing now beneath that we can see how
 

00:04:01.859 --> 00:04:03.379
listing now beneath that we can see how
this affects the radio state machine

00:04:03.379 --> 00:04:03.389
this affects the radio state machine
 

00:04:03.389 --> 00:04:05.869
this affects the radio state machine
with blue showing active transfer times

00:04:05.869 --> 00:04:05.879
with blue showing active transfer times
 

00:04:05.879 --> 00:04:07.879
with blue showing active transfer times
the red indicating the radio remaining

00:04:07.879 --> 00:04:07.889
the red indicating the radio remaining
 

00:04:07.889 --> 00:04:10.069
the red indicating the radio remaining
in full power mode yellow showing lower

00:04:10.069 --> 00:04:10.079
in full power mode yellow showing lower
 

00:04:10.079 --> 00:04:12.080
in full power mode yellow showing lower
power mode and the gaps between showing

00:04:12.080 --> 00:04:12.090
power mode and the gaps between showing
 

00:04:12.090 --> 00:04:14.839
power mode and the gaps between showing
us where the radio is idle now we can

00:04:14.839 --> 00:04:14.849
us where the radio is idle now we can
 

00:04:14.849 --> 00:04:16.969
us where the radio is idle now we can
see straight away that there are no gaps

00:04:16.969 --> 00:04:16.979
see straight away that there are no gaps
 

00:04:16.979 --> 00:04:18.680
see straight away that there are no gaps
meaning that while this app is running

00:04:18.680 --> 00:04:18.690
meaning that while this app is running
 

00:04:18.690 --> 00:04:20.449
meaning that while this app is running
it's keeping the cell radio powered on

00:04:20.449 --> 00:04:20.459
it's keeping the cell radio powered on
 

00:04:20.459 --> 00:04:23.029
it's keeping the cell radio powered on
continuously in fact the regular updates

00:04:23.029 --> 00:04:23.039
continuously in fact the regular updates
 

00:04:23.039 --> 00:04:23.780
continuously in fact the regular updates
are alone

00:04:23.780 --> 00:04:23.790
are alone
 

00:04:23.790 --> 00:04:25.160
are alone
are enough to prevent the radio from

00:04:25.160 --> 00:04:25.170
are enough to prevent the radio from
 

00:04:25.170 --> 00:04:27.800
are enough to prevent the radio from
ever returning to an idle state that

00:04:27.800 --> 00:04:27.810
ever returning to an idle state that
 

00:04:27.810 --> 00:04:29.480
ever returning to an idle state that
shows us that the big cookie model is a

00:04:29.480 --> 00:04:29.490
shows us that the big cookie model is a
 

00:04:29.490 --> 00:04:31.430
shows us that the big cookie model is a
far better approach to coordinating our

00:04:31.430 --> 00:04:31.440
far better approach to coordinating our
 

00:04:31.440 --> 00:04:34.130
far better approach to coordinating our
data transfers in this example I've

00:04:34.130 --> 00:04:34.140
data transfers in this example I've
 

00:04:34.140 --> 00:04:36.110
data transfers in this example I've
bundled all of the repeating transfers

00:04:36.110 --> 00:04:36.120
bundled all of the repeating transfers
 

00:04:36.120 --> 00:04:37.790
bundled all of the repeating transfers
together and the intermittent transfers

00:04:37.790 --> 00:04:37.800
together and the intermittent transfers
 

00:04:37.800 --> 00:04:39.110
together and the intermittent transfers
have been largely replaced with

00:04:39.110 --> 00:04:39.120
have been largely replaced with
 

00:04:39.120 --> 00:04:41.540
have been largely replaced with
aggressive prefetching now obviously you

00:04:41.540 --> 00:04:41.550
aggressive prefetching now obviously you
 

00:04:41.550 --> 00:04:43.730
aggressive prefetching now obviously you
usually can't entirely predict what data

00:04:43.730 --> 00:04:43.740
usually can't entirely predict what data
 

00:04:43.740 --> 00:04:45.530
usually can't entirely predict what data
users might need nor can you ignore

00:04:45.530 --> 00:04:45.540
users might need nor can you ignore
 

00:04:45.540 --> 00:04:47.540
users might need nor can you ignore
either client or server side changes

00:04:47.540 --> 00:04:47.550
either client or server side changes
 

00:04:47.550 --> 00:04:50.000
either client or server side changes
that need to be synchronized but you can

00:04:50.000 --> 00:04:50.010
that need to be synchronized but you can
 

00:04:50.010 --> 00:04:51.590
that need to be synchronized but you can
aim to minimize the number of Radio

00:04:51.590 --> 00:04:51.600
aim to minimize the number of Radio
 

00:04:51.600 --> 00:04:53.030
aim to minimize the number of Radio
state transitions through a combination

00:04:53.030 --> 00:04:53.040
state transitions through a combination
 

00:04:53.040 --> 00:04:55.490
state transitions through a combination
of aggressive prefetching in addition to

00:04:55.490 --> 00:04:55.500
of aggressive prefetching in addition to
 

00:04:55.500 --> 00:04:57.200
of aggressive prefetching in addition to
batching and queuing any transfers that

00:04:57.200 --> 00:04:57.210
batching and queuing any transfers that
 

00:04:57.210 --> 00:04:58.940
batching and queuing any transfers that
aren't time critical and bundling these

00:04:58.940 --> 00:04:58.950
aren't time critical and bundling these
 

00:04:58.950 --> 00:05:00.860
aren't time critical and bundling these
with user initiated time critical

00:05:00.860 --> 00:05:00.870
with user initiated time critical
 

00:05:00.870 --> 00:05:02.960
with user initiated time critical
transfers or those initiated from the

00:05:02.960 --> 00:05:02.970
transfers or those initiated from the
 

00:05:02.970 --> 00:05:05.390
transfers or those initiated from the
server the result is a significant

00:05:05.390 --> 00:05:05.400
server the result is a significant
 

00:05:05.400 --> 00:05:06.890
server the result is a significant
improvement in the amount of battery

00:05:06.890 --> 00:05:06.900
improvement in the amount of battery
 

00:05:06.900 --> 00:05:08.840
improvement in the amount of battery
drain your app is responsible for in

00:05:08.840 --> 00:05:08.850
drain your app is responsible for in
 

00:05:08.850 --> 00:05:10.370
drain your app is responsible for in
comparison to the previous on-demand

00:05:10.370 --> 00:05:10.380
comparison to the previous on-demand
 

00:05:10.380 --> 00:05:12.200
comparison to the previous on-demand
approach the radio is now idle nearly

00:05:12.200 --> 00:05:12.210
approach the radio is now idle nearly
 

00:05:12.210 --> 00:05:14.510
approach the radio is now idle nearly
2/3 of the time even the active radio

00:05:14.510 --> 00:05:14.520
2/3 of the time even the active radio
 

00:05:14.520 --> 00:05:15.620
2/3 of the time even the active radio
percentage has dropped significantly

00:05:15.620 --> 00:05:15.630
percentage has dropped significantly
 

00:05:15.630 --> 00:05:17.480
percentage has dropped significantly
thanks to an improved download

00:05:17.480 --> 00:05:17.490
thanks to an improved download
 

00:05:17.490 --> 00:05:19.310
thanks to an improved download
efficiency as a result of transmitting

00:05:19.310 --> 00:05:19.320
efficiency as a result of transmitting
 

00:05:19.320 --> 00:05:22.310
efficiency as a result of transmitting
more data in each shot so taking the

00:05:22.310 --> 00:05:22.320
more data in each shot so taking the
 

00:05:22.320 --> 00:05:23.990
more data in each shot so taking the
cell radio into account you can minimize

00:05:23.990 --> 00:05:24.000
cell radio into account you can minimize
 

00:05:24.000 --> 00:05:25.550
cell radio into account you can minimize
the battery impact associated with your

00:05:25.550 --> 00:05:25.560
the battery impact associated with your
 

00:05:25.560 --> 00:05:27.680
the battery impact associated with your
apps data transfers by transferring as

00:05:27.680 --> 00:05:27.690
apps data transfers by transferring as
 

00:05:27.690 --> 00:05:29.330
apps data transfers by transferring as
little data as possible as infrequently

00:05:29.330 --> 00:05:29.340
little data as possible as infrequently
 

00:05:29.340 --> 00:05:31.820
little data as possible as infrequently
as possible defragment your network

00:05:31.820 --> 00:05:31.830
as possible defragment your network
 

00:05:31.830 --> 00:05:33.440
as possible defragment your network
access by prefetching batching and

00:05:33.440 --> 00:05:33.450
access by prefetching batching and
 

00:05:33.450 --> 00:05:34.880
access by prefetching batching and
bundling your transfers and a limit

00:05:34.880 --> 00:05:34.890
bundling your transfers and a limit
 

00:05:34.890 --> 00:05:36.860
bundling your transfers and a limit
client eliminate clients initiated

00:05:36.860 --> 00:05:36.870
client eliminate clients initiated
 

00:05:36.870 --> 00:05:38.620
client eliminate clients initiated
updates and pooling as much as possible

00:05:38.620 --> 00:05:38.630
updates and pooling as much as possible
 

00:05:38.630 --> 00:05:40.940
updates and pooling as much as possible
most important thing to remember is that

00:05:40.940 --> 00:05:40.950
most important thing to remember is that
 

00:05:40.950 --> 00:05:42.620
most important thing to remember is that
every time you transfer data no matter

00:05:42.620 --> 00:05:42.630
every time you transfer data no matter
 

00:05:42.630 --> 00:05:44.990
every time you transfer data no matter
how small the radio is powered up for

00:05:44.990 --> 00:05:45.000
how small the radio is powered up for
 

00:05:45.000 --> 00:05:46.040
how small the radio is powered up for
nearly half a minute

00:05:46.040 --> 00:05:46.050
nearly half a minute
 

00:05:46.050 --> 00:05:47.930
nearly half a minute
so every decision you make should be

00:05:47.930 --> 00:05:47.940
so every decision you make should be
 

00:05:47.940 --> 00:05:49.550
so every decision you make should be
based on minimizing the number of times

00:05:49.550 --> 00:05:49.560
based on minimizing the number of times
 

00:05:49.560 --> 00:05:51.860
based on minimizing the number of times
that this happens I dive into each of

00:05:51.860 --> 00:05:51.870
that this happens I dive into each of
 

00:05:51.870 --> 00:05:53.420
that this happens I dive into each of
these topics in more detail and other

00:05:53.420 --> 00:05:53.430
these topics in more detail and other
 

00:05:53.430 --> 00:05:54.980
these topics in more detail and other
videos in the efficient data transfer

00:05:54.980 --> 00:05:54.990
videos in the efficient data transfer
 

00:05:54.990 --> 00:05:56.840
videos in the efficient data transfer
series of devbytes including looking at

00:05:56.840 --> 00:05:56.850
series of devbytes including looking at
 

00:05:56.850 --> 00:05:58.070
series of devbytes including looking at
ways you can analyze your own data

00:05:58.070 --> 00:05:58.080
ways you can analyze your own data
 

00:05:58.080 --> 00:06:00.080
ways you can analyze your own data
transfer profile and how to implement

00:06:00.080 --> 00:06:00.090
transfer profile and how to implement
 

00:06:00.090 --> 00:06:01.670
transfer profile and how to implement
some of these best practices using

00:06:01.670 --> 00:06:01.680
some of these best practices using
 

00:06:01.680 --> 00:06:03.500
some of these best practices using
simple code patterns as well as

00:06:03.500 --> 00:06:03.510
simple code patterns as well as
 

00:06:03.510 --> 00:06:05.420
simple code patterns as well as
implementing sync adapters and Google

00:06:05.420 --> 00:06:05.430
implementing sync adapters and Google
 

00:06:05.430 --> 00:06:15.629
implementing sync adapters and Google
Cloud messaging solutions

00:06:15.629 --> 00:06:15.639
 
 

00:06:15.639 --> 00:06:17.699
 
you

