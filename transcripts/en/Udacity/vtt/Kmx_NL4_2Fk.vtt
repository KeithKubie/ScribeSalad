WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Welcome to the last unit in our debugging course where we review

00:00:04.000 --> 00:00:08.000
the material we've seen so far and put it all together.

00:00:08.000 --> 00:00:12.000
Now at the end of the course, let's put everything together to see

00:00:12.000 --> 00:00:15.000
what we do when we encounter a new bug.

00:00:15.000 --> 00:00:21.000
When we see a new bug, the first thing we do is to make sure it gets processed.

00:00:21.000 --> 00:00:24.000
So we enter it in the problem database.

00:00:24.000 --> 00:00:28.000
We've seen the stages the problem report goes through from unconfirmed

00:00:28.000 --> 00:00:32.000
via new to assigned, when it's assigned to an individual developer,

00:00:32.000 --> 00:00:35.000
and finally resolved and closed.

00:00:35.000 --> 00:00:43.000
Any new problem needs to go into the problem database.

00:00:43.000 --> 00:00:50.000
In the long run, checking problems also helps you in coming up with statistics

00:00:50.000 --> 00:00:55.000
on how long it takes you to fix a bug, how many bugs there are that still need to be fixed,

00:00:55.000 --> 00:00:59.000
as well as where are the bugs are that need to be fixed?

00:00:59.000 --> 00:01:04.000
Such that in your program, you know where the locations are

00:01:04.000 --> 00:01:10.000
that overtime have the highest bug density, and therefore needs special attention.

00:01:10.000 --> 00:01:16.000
For all of this, tracking the problem is the first prerequisite.

00:01:16.000 --> 00:01:23.000
The next step is to reproduce the problem because only when you are reproducing a problem,

00:01:23.000 --> 00:01:27.000
do you know whether you will actually be able to fix it.

00:01:27.000 --> 00:01:34.000
We have seen what the individual inputs are that all influence a program execution.

00:01:34.000 --> 00:01:41.000
Most important being static data, user interaction and the interaction with the environment

00:01:41.000 --> 00:01:48.000
but also more trouble issues like the debugger which influences the program

00:01:48.000 --> 00:01:53.000
or time randomness and other issues that may be hard to control.

00:01:53.000 --> 00:01:59.000
In order to reproduce the problem, you must get all of this under your control.

00:01:59.000 --> 00:02:05.000
Reproducing your problem can be particularly hard when you're collecting such data from the field

00:02:05.000 --> 00:02:10.000
because data and user interaction may contain sensitive data.

00:02:10.000 --> 00:02:17.000
This is why we have also seen the techniques of statistical debugging which relate execution features

00:02:17.000 --> 00:02:23.000
such as allowing the program being executed on that to failures and success

00:02:23.000 --> 00:02:27.000
by collecting such data from the field, you'll be able to find out

00:02:27.000 --> 00:02:32.000
which features of the execution correlate with failures

00:02:32.000 --> 00:02:38.000
and these features can be features such as executed lines or returned values of functions.

00:02:38.000 --> 00:02:43.000
The next step in debugging is to automate and simplify.

00:02:43.000 --> 00:02:46.000
The idea being that you write a test gate

00:02:46.000 --> 00:02:51.000
at which you can reproduce the bug at any time automatically.

00:02:51.000 --> 00:02:56.000
At first, this helpful, of course, for doing regression testing

00:02:56.000 --> 00:03:00.000
such that you can always verify whether the problem is there or not.

00:03:00.000 --> 00:03:05.000
However, results are helpful to automatically simplify the problem

00:03:05.000 --> 00:03:11.000
if you have a big input which causes a failure, then an automatic test

00:03:11.000 --> 00:03:15.000
can help you automatically simplifying this input.

00:03:15.000 --> 00:03:21.000
The technique of delta debugging takes this big input and with the help of an automatic test

00:03:21.000 --> 00:03:29.000
automatically simplifies it to an input in which every single item is relevant for reproducing the failure.

00:03:29.000 --> 00:03:36.000
This can be a great aid as it comes to understanding what makes the failure occur and what not.

00:03:36.000 --> 00:03:43.000
Once you have simplified the problem, the next step will be to find possible infection origin.

00:03:43.000 --> 00:03:48.000
If your program fails, you can see its execution as a succession of state.

00:03:48.000 --> 00:03:55.000
The last state is what you see as a failure and you want to figure out where did this failure come from.

00:03:55.000 --> 00:03:59.000
The concept of dependencies helps you figuring out

00:03:59.000 --> 00:04:04.000
the possible sources of an infection and rule out all the other ones.

00:04:04.000 --> 00:04:07.000
When you're tracking back where a failure came from,

00:04:07.000 --> 00:04:11.000
you frequently have the choice of looking at multiple possible origins.

00:04:11.000 --> 00:04:17.000
But you'd like to do is to focus first on those origins which are most likely.

00:04:17.000 --> 00:04:23.000
If you know that some state is already infected that is wrong, you will focus on this one first.

00:04:23.000 --> 00:04:29.000
If you know from some earlier state that this caused this later state,

00:04:29.000 --> 00:04:32.000
you will also like to focus on this one.

00:04:32.000 --> 00:04:39.000
If you know from statistical debugging that some feature is correlated with the failure, go for it.

00:04:39.000 --> 00:04:45.000
And if you have reason to believe that some particular state is likely to be buggy anyway,

00:04:45.000 --> 00:04:49.000
for instance, because of it's bug history, you also go for it.

00:04:49.000 --> 00:04:54.000
And we have seen techniques how to determine all of these in particular assertions

00:04:54.000 --> 00:05:00.000
which help a lot for finding out immediately during the execution

00:05:00.000 --> 00:05:03.000
whether some part of the state is erroneous or not.

00:05:03.000 --> 00:05:08.000
The sixth step is to isolate the infection chain.

00:05:08.000 --> 00:05:14.000
What this means is for every likely origin, you go and conduct an experiment

00:05:14.000 --> 00:05:17.000
to see whether it actually is the cause of the failure.

00:05:17.000 --> 00:05:22.000
For this, you used the scientific method. You set up a hypothesis.

00:05:22.000 --> 00:05:26.000
This could be the cause. This could be the cause. This could be the cause.

00:05:26.000 --> 00:05:29.000
Make up an appropriate prediction.

00:05:29.000 --> 00:05:33.000
Set up an experiment and based on the observation,

00:05:33.000 --> 00:05:38.000
you either refine your hypothesis or you reject your hypothesis.

00:05:38.000 --> 00:05:44.000
Be sure to make these steps explicit as it helps structure your thinking

00:05:44.000 --> 00:05:50.000
and as it helps you interrupting and resuming your debugging activities as needed.

00:05:50.000 --> 00:05:56.000
You repeat this going backwards throughout the program until you arrive at a place

00:05:56.000 --> 00:06:03.000
where the incoming data is same but the outgoing data is infected.

00:06:03.000 --> 00:06:11.000
The statement which generates this infection is the defect. This is the last step of debugging.

00:06:11.000 --> 00:06:17.000
To correct the defect, such that it no longer produces an infection

00:06:17.000 --> 00:06:21.000
but actually makes the program behave correctly.

00:06:21.000 --> 00:06:29.000
Before you fix the defect, you should be sure that the defect actually is the defect.

00:06:29.000 --> 00:06:34.000
That is that by changing it appropriately, the problem will be fixed.

00:06:34.000 --> 00:06:40.000
You should have a clear understanding about how your correction fixes the defect.

00:06:40.000 --> 00:06:43.000
And then, there are also some chores to be made.

00:06:43.000 --> 00:06:46.000
You need to verify that the failure no longer occurs.

00:06:46.000 --> 00:06:52.000
You need to make sure that your correction did not introduce new problems

00:06:52.000 --> 00:06:57.000
and again assertions as we've seen them in this course, helped you a lot with that.

00:06:57.000 --> 00:07:02.000
You may also wish to search your code to check whether the same mistake

00:07:02.000 --> 00:07:06.000
was made elsewhere and fix these locations as well.

00:07:06.000 --> 00:07:12.000
Note how these seven steps of debugging can be easily memorized by looking at their first letters

00:07:12.000 --> 00:07:15.000
which formed the word TRAFFIC.

00:07:15.000 --> 00:07:21.000
Traffic may not immediately be related to debugging unless

00:07:21.000 --> 00:07:27.000
you're debugging traffic programs but the way that infections propagate to the program

00:07:27.000 --> 00:07:30.000
and what's happening during a program execution

00:07:30.000 --> 00:07:35.000
can be as confusing as more than traffic in a real big city.

00:07:35.000 --> 00:07:41.000
With these seven steps, you're done with debugging. Congratulations!

00:07:41.000 --> 00:07:43.000
And now, let's move on to the next part.

