WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:01.930
Okay, the next thing I'd like to talk about is

00:00:01.930 --> 00:00:05.970
JSON. JSON serves the same purpose as XML, which is it's

00:00:05.970 --> 00:00:08.980
a nice kind of computer and human readable way to

00:00:08.980 --> 00:00:12.620
exchange data in a, in a consistent format. It stands for

00:00:12.620 --> 00:00:16.350
JavaScript Object Notation. The reason it says JavaScript is because

00:00:16.350 --> 00:00:19.900
JSON is actually valid JavaScript code. It might look something like

00:00:19.900 --> 00:00:22.310
this. You know, to use kind of our travel search example

00:00:22.310 --> 00:00:25.170
from before. We have kind of this dictionary structure. This actually

00:00:25.170 --> 00:00:28.210
looks a lot like a Python code, because Python and JavaScript have very

00:00:28.210 --> 00:00:30.710
similar syntax for dictionaries and lists. So,

00:00:30.710 --> 00:00:31.830
we have this dictionary. It might have

00:00:31.830 --> 00:00:35.540
a key called itineraries, who's value may be a list of other dictionaries. And

00:00:35.540 --> 00:00:38.440
in this case, we have a dictionary for each routing, or something like that.

00:00:38.440 --> 00:00:40.550
Or we have a dictionary for each leg, which may have, you know,

00:00:40.550 --> 00:00:43.580
a key for from, and a key for to, and a value for each

00:00:43.580 --> 00:00:47.680
of those. Now this might be, you know, leg 1, and this might be

00:00:47.680 --> 00:00:50.250
leg 2. And you can see, you know, leg 2 is also made up

00:00:50.250 --> 00:00:52.300
of another dictionary, which is what we use the curly

00:00:52.300 --> 00:00:54.310
braces for. Which has a couple key value pairs of

00:00:54.310 --> 00:00:57.820
it's own. You know, key from value IAD and key

00:00:57.820 --> 00:01:01.130
to value SEA. And we can close our list and we

00:01:01.130 --> 00:01:04.959
can close this dictionary. JSON is really handy for expressing

00:01:04.959 --> 00:01:07.970
these types of objects. Anything you can express in XML you

00:01:07.970 --> 00:01:12.700
can also express in JSON, except JSON is a little

00:01:12.700 --> 00:01:15.320
less verbose because you don't need these kind of opening and

00:01:15.320 --> 00:01:18.750
closing tags. You can build things up out of dictionaries or,

00:01:18.750 --> 00:01:22.180
you know, a mapping or an object depending on what vocabulary words

00:01:22.180 --> 00:01:24.950
you want to use, hash table, which is just a curly

00:01:24.950 --> 00:01:27.250
and then a list of key value pairs just like you would

00:01:27.250 --> 00:01:29.870
in Python, just like you would in JavaScript. You can also

00:01:29.870 --> 00:01:34.930
have lists, which are, use brackets just like Python does, and separate

00:01:34.930 --> 00:01:37.660
the values in the list with commas. So we can have 1,

00:01:37.660 --> 00:01:41.490
2 and the string three. So we can have both integers and

00:01:41.490 --> 00:01:44.620
strings in our lists or in the value of a hash table.

00:01:44.620 --> 00:01:46.590
The list can also be the value of a hash table. A

00:01:46.590 --> 00:01:49.770
list can also be an item in a list. This could look

00:01:49.770 --> 00:01:52.710
something like this and so we've got a list inside a list here

00:01:52.710 --> 00:01:56.000
a with two more data types, a Boolean which you are familiar

00:01:56.000 --> 00:01:59.180
with true or false and a float. And these are basically all the

00:01:59.180 --> 00:02:02.860
data types we can have in Jason int, string, Boolean, and float.

00:02:02.860 --> 00:02:06.970
We can of course also have null which would be inside, for example,

00:02:06.970 --> 00:02:09.710
the empty list. And our main data structures are

00:02:09.710 --> 00:02:12.967
dictionaries or mapping, which is the key to a value

00:02:12.967 --> 00:02:16.893
or multiple keys to multiple values and lists. So, what

00:02:16.893 --> 00:02:18.345
I'd I like to show you now is how to

00:02:18.345 --> 00:02:21.840
parse JSON in Python. Okay, we're in our Python

00:02:21.840 --> 00:02:25.190
interpreter. We can import JSON which is, is now included

00:02:25.190 --> 00:02:29.455
in Python's version 2.6 and newer. If your using Python

00:02:29.455 --> 00:02:32.000
2.5, I suggest you try to find 2.6 or 2.7.

00:02:32.000 --> 00:02:34.790
But I think app engine uses 2.7, which is what we've

00:02:34.790 --> 00:02:38.070
been using in this class, so you shouldn't have any problem importing

00:02:38.070 --> 00:02:41.450
JSON. If we were to make a JSON string in Python

00:02:41.450 --> 00:02:43.960
here, let's call it j. So, if we were to take a

00:02:43.960 --> 00:02:47.080
string to representing some JSON, in this case, it's basically a

00:02:47.080 --> 00:02:50.310
dictionary with two keys, "one" and "numbers", and the value for "one"

00:02:50.310 --> 00:02:52.812
is 1, and the value for "numbers" is the list [1, 2,

00:02:52.812 --> 00:02:57.730
3.5]. Let's parse that in JSON. JSON we use the function load

00:02:57.730 --> 00:03:01.240
S which basically stands for load string, there's also load but

00:03:01.240 --> 00:03:03.130
that expects a file. And in this case, we're going to be

00:03:03.130 --> 00:03:06.390
using just load S. When we run that, we get back

00:03:06.390 --> 00:03:10.820
a Python dictionary. With our same keys, numbers and 1, you know

00:03:10.820 --> 00:03:13.530
the order doesn't matter in python dictionaries, and our same values,

00:03:13.530 --> 00:03:16.630
1, and 1, 2 and 3.5. And so if we were to

00:03:16.630 --> 00:03:20.940
store that in a variable. D. We can manipulate it like

00:03:20.940 --> 00:03:23.540
this. We can look at d numbers and we get our list.

00:03:23.540 --> 00:03:25.990
We can look at d1 and we can see our number

00:03:25.990 --> 00:03:30.570
one. There's actually, because JSON looks just like Python, we could actually

00:03:30.570 --> 00:03:33.480
eval j, and what eval does is it actually treats this

00:03:33.480 --> 00:03:36.130
as Python code as if I had just typed this at the

00:03:36.130 --> 00:03:38.730
prompt. And this is the result we get. Now, that's a

00:03:38.730 --> 00:03:41.483
neat thing you can do. Never, ever do it. Because in addition

00:03:41.483 --> 00:03:44.846
to having, you know, valid JSON in here, somebody could actually

00:03:44.846 --> 00:03:48.390
have code that might, you know, do something to your computer. So,

00:03:48.390 --> 00:03:50.843
never use eval for parsing JSON. I just wanted

00:03:50.843 --> 00:03:52.943
to show that you can use eval to parse

00:03:52.943 --> 00:03:55.900
JSON. It's a really convenient thing when you're working

00:03:55.900 --> 00:03:58.280
in Python with JSON. The two sync up very nicely.

