WEBVTT
Kind: captions
Language: en

00:00:00.462 --> 00:00:01.980
So let's now look at what happens when in the

00:00:01.980 --> 00:00:06.870
case of strong consistency. In strong consistency, you're always guaranteed

00:00:06.870 --> 00:00:09.120
to get the data that has returned from a put

00:00:09.120 --> 00:00:12.890
operation towards the data store API. So when the query

00:00:12.890 --> 00:00:15.800
is received by the data story API, it will see

00:00:15.800 --> 00:00:17.960
that there are pending updates for the data that you

00:00:17.960 --> 00:00:21.640
are querying for. It will then wait and then get

00:00:21.640 --> 00:00:25.890
the data once the datastore backend has finished. And then

00:00:25.890 --> 00:00:28.610
it returns that result. That's why

00:00:28.610 --> 00:00:31.390
it's called strong consistency. The result from

00:00:31.390 --> 00:00:34.100
queries will always be consistent with put

00:00:34.100 --> 00:00:37.070
operations performed earlier toward the datastore API.

00:00:38.540 --> 00:00:41.070
So which is better, eventual consistency

00:00:41.070 --> 00:00:43.890
or strong consistency? Well that depends on

00:00:43.890 --> 00:00:46.688
your application. Let's look at two examples.

00:00:46.688 --> 00:00:49.910
The first one Posting a Blog Comment.

00:00:50.930 --> 00:00:53.680
In this case eventual consistency's probably best to

00:00:53.680 --> 00:00:56.430
use. This is because to update, it probably

00:00:56.430 --> 00:00:58.670
does not need to be immediate. And there

00:00:58.670 --> 00:01:01.450
is no operation dependency, in other words there are

00:01:01.450 --> 00:01:04.690
no subsequent operations that relies on data being

00:01:04.690 --> 00:01:07.920
completely up to date. What about this one? An

00:01:07.920 --> 00:01:11.940
atm money withdrawal. Well that's certainly candidate for

00:01:11.940 --> 00:01:16.010
strong consistency because even though you may not like

00:01:16.010 --> 00:01:19.970
it, the new balance should be reflected immediately and

00:01:19.970 --> 00:01:22.700
there may be operation dependency. For example, there may

00:01:22.700 --> 00:01:25.350
be purchases coming in on that account that depends

00:01:25.350 --> 00:01:28.280
on an up to date balance. You may now

00:01:28.280 --> 00:01:30.750
say, so why don't I use strong consistency all

00:01:30.750 --> 00:01:34.880
the time? Well, remember the use case. Strong consistency

00:01:34.880 --> 00:01:37.150
causes a lot of wait and locks in your

00:01:37.150 --> 00:01:41.060
application. So if you want to build applications that scale.

00:01:41.060 --> 00:01:43.500
You should use eventual consistency as often as

00:01:43.500 --> 00:01:49.130
possible. Luckily, datastore supports both of these models.

00:01:49.130 --> 00:01:51.190
You can use the default fast and scalable

00:01:51.190 --> 00:01:53.920
eventual consistency when required. And when you need

00:01:53.920 --> 00:01:57.410
to ensure strong consistency, that is also supported.

00:01:57.410 --> 00:02:00.370
Let's see how, because it's quite simple. You

00:02:00.370 --> 00:02:03.350
enforce strong consistency when you have an ancestor

00:02:03.350 --> 00:02:07.548
relationship and your query use filter by this ancestor.

00:02:07.548 --> 00:02:09.788
If those two conditions are met all children

00:02:09.788 --> 00:02:12.940
will be queried using strong consistency, in all other

00:02:12.940 --> 00:02:17.020
cases data will be retrieved using eventual consistency. As

00:02:17.020 --> 00:02:20.610
we already discussed, strong consistency has a performance and

00:02:20.610 --> 00:02:24.390
scalability penalty compared to eventual consistency. So you

00:02:24.390 --> 00:02:26.620
need to look at your application to determine the

00:02:26.620 --> 00:02:31.010
best option for every query situation. All right, enough

00:02:31.010 --> 00:02:33.740
theory for now. Time for a quiz. Good luck.

