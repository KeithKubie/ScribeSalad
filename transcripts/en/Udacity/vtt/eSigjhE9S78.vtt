WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:05.170
Let's now discuss the components of the RPC latency.

00:00:05.170 --> 00:00:07.640
By now we are all familiar with the semantics

00:00:07.640 --> 00:00:12.330
of RPC, namely, in RPC the client, is making

00:00:12.330 --> 00:00:15.100
a remote procedure call to a server, and it

00:00:15.100 --> 00:00:18.840
has to send the arguments of the call to

00:00:18.840 --> 00:00:20.810
the server so that the server can execute the

00:00:20.810 --> 00:00:23.360
server procedure and return the results back to the

00:00:23.360 --> 00:00:25.560
client. So if you look at the components of the

00:00:25.560 --> 00:00:28.771
RPC latency, it starts with the client, with a

00:00:28.771 --> 00:00:32.930
client call. So the client call subsumes a number

00:00:32.930 --> 00:00:35.790
of things. Number one, it is setting up the

00:00:35.790 --> 00:00:38.260
arguments for the call. The client has to set up

00:00:38.260 --> 00:00:41.510
the arguments for the procedure call. And then it

00:00:41.510 --> 00:00:44.200
makes a call into the kernel. And once the

00:00:44.200 --> 00:00:46.480
kernel is being informed that it wants to make

00:00:46.480 --> 00:00:50.980
this call, the kernel validates the call, and then marshals

00:00:50.980 --> 00:00:54.260
the arguments into a network packet, and sets

00:00:54.260 --> 00:00:56.790
up the controller to actually do the network

00:00:56.790 --> 00:01:00.840
transmission. That entire set of activities that the

00:01:00.840 --> 00:01:04.180
client program and the kernel is involved in, in

00:01:04.180 --> 00:01:07.150
getting ready a network packet to send out,

00:01:07.150 --> 00:01:10.100
is subsumed in this one line, which I say

00:01:10.100 --> 00:01:12.360
is the client call. The second part of

00:01:12.360 --> 00:01:16.110
the latency is the controller latency, and this is

00:01:16.110 --> 00:01:19.130
the part where the controller says, well, there is

00:01:19.130 --> 00:01:21.710
a message to be sent out. I know where

00:01:21.710 --> 00:01:24.860
it is in memory. I have to first DMA

00:01:24.860 --> 00:01:28.200
that message into my buffer and then put the

00:01:28.200 --> 00:01:32.000
message out on the wire. That's the controller latency

00:01:32.000 --> 00:01:35.510
and so this part of it is in hardware,

00:01:35.510 --> 00:01:38.030
and as operating system designer we're going to take what

00:01:38.030 --> 00:01:41.430
the hardware gives us. Controller latency is what you have,

00:01:41.430 --> 00:01:44.260
that given by the hardware. The third part of the

00:01:44.260 --> 00:01:47.440
latency is the time on the wire. Now this really

00:01:47.440 --> 00:01:52.150
depends, as one might imagine, on the distance between the

00:01:52.150 --> 00:01:54.680
client and the server. The limiting factor of course is

00:01:54.680 --> 00:01:58.550
speed of light. So, depending on the bandwidth that's available

00:01:58.550 --> 00:02:01.430
between the source and the destination, perhaps if you have

00:02:01.430 --> 00:02:04.290
to go through intermediate routers and so on. It is

00:02:04.290 --> 00:02:06.980
going to take a certain amount of time to go from

00:02:06.980 --> 00:02:09.680
the client to the server machine, and that we

00:02:09.680 --> 00:02:12.240
call as the time on the wire. So then, the

00:02:12.240 --> 00:02:16.950
message arrives over on the destination node, and it

00:02:16.950 --> 00:02:19.130
arrives in the form of an interrupt to the operating

00:02:19.130 --> 00:02:21.550
system. So, the interrupt has to be handled by

00:02:21.550 --> 00:02:24.730
the operating system, and part of handling the interrupt is

00:02:24.730 --> 00:02:27.650
moving the bits that come in on the wire

00:02:27.650 --> 00:02:32.570
into the controller buffer. And from the controller buffer into

00:02:32.570 --> 00:02:36.050
the memory of the node. So all of

00:02:36.050 --> 00:02:39.610
that activity is subsumed in this item number four,

00:02:39.610 --> 00:02:42.600
which I call the interrupt handling. So once the

00:02:42.600 --> 00:02:45.770
interrupt handling is complete, then we can set up

00:02:45.770 --> 00:02:49.060
the server procedure to execute the original call. Now,

00:02:49.060 --> 00:02:51.080
what is involved in that? Well, you have to

00:02:51.080 --> 00:02:55.180
locate the server procedure, and once you locate the

00:02:55.180 --> 00:02:58.270
server procedure, you have to dispatch the server procedure.

00:02:58.270 --> 00:03:00.970
And once you dispatch the server procedure, you

00:03:00.970 --> 00:03:05.210
have to unmarshal the network packet that comes in

00:03:05.210 --> 00:03:08.780
as the actual arguments for the call that the

00:03:08.780 --> 00:03:11.340
server procedure has to execute. So all of that

00:03:11.340 --> 00:03:14.570
setup is first done, and then the server procedure

00:03:14.570 --> 00:03:18.565
can actually execute the call. So this is the

00:03:18.565 --> 00:03:21.490
five-step process. From the time the client says, I

00:03:21.490 --> 00:03:24.020
want to make a RPC call to the point

00:03:24.020 --> 00:03:26.950
of actually executing the call, these are the layers

00:03:26.950 --> 00:03:30.560
of software and, of course, hardware and time on

00:03:30.560 --> 00:03:34.720
the wire, by which time you're ready to execute

00:03:34.720 --> 00:03:38.070
the server procedure. So even though it looks like a

00:03:38.070 --> 00:03:40.770
simple procedure call from the clients point of view,

00:03:40.770 --> 00:03:43.010
there is all this latency to be incurred in

00:03:43.010 --> 00:03:45.500
executing a remote procedure call. So at the end

00:03:45.500 --> 00:03:49.330
of step five, the server is all set to execute

00:03:49.330 --> 00:03:52.426
the procedure. Let's see what happens then. So step

00:03:52.426 --> 00:03:55.537
number six is server execution, meaning that it is actually

00:03:55.537 --> 00:03:58.645
executing the procedure. And of course, this is not under

00:03:58.645 --> 00:04:02.236
our control as operating system designer, because at this point,

00:04:02.236 --> 00:04:04.441
the amount of time that the server is going

00:04:04.441 --> 00:04:07.402
to execute this procedure depends really on the logic of

00:04:07.402 --> 00:04:10.111
the program that has been written as a client server

00:04:10.111 --> 00:04:14.584
program. And then, finally, once the server procedure has completed

00:04:14.584 --> 00:04:17.248
execution, then it says okay, I am ready to

00:04:17.248 --> 00:04:20.055
send the reply back to the client, and that's

00:04:20.055 --> 00:04:22.720
where we pick up again, so, what happens is

00:04:22.720 --> 00:04:26.400
that at that point, you are receiving the results. So,

00:04:26.400 --> 00:04:29.680
once again, just like when the client wanted to

00:04:29.680 --> 00:04:33.380
send the arguments, you have to convert the actual

00:04:33.380 --> 00:04:35.530
arguments into a network packet and send it out

00:04:35.530 --> 00:04:39.570
on the wire. Similarly,when the server is ready to reply,

00:04:39.570 --> 00:04:41.850
you have to take that reply, which is the results

00:04:41.850 --> 00:04:45.950
of the execution of this procedure, and make it into a

00:04:45.950 --> 00:04:48.700
network packet. And at this point, once it has been made

00:04:48.700 --> 00:04:50.920
into a network packet it has to be handed over to

00:04:50.920 --> 00:04:55.160
the controller, and the controller does exactly what we did

00:04:55.160 --> 00:04:58.204
on this side, which is to say the controller latency is

00:04:58.204 --> 00:05:00.400
gon, is going to be incurred. So that's why you see

00:05:00.400 --> 00:05:04.170
item number two appearing all over again in the return path.

00:05:04.170 --> 00:05:07.860
Similar to sending the arguments over to the server

00:05:07.860 --> 00:05:10.420
on the wire, the results have to be sent on

00:05:10.420 --> 00:05:13.140
the wire back to the client. And so you

00:05:13.140 --> 00:05:16.110
see that item number three, which is the time on

00:05:16.110 --> 00:05:18.360
the wire, is reappearing on the return path as

00:05:18.360 --> 00:05:22.960
well. Come over to this side. The incoming result message

00:05:22.960 --> 00:05:26.230
is going to result in a, an interrupt on the

00:05:26.230 --> 00:05:29.400
receiving node, the client node. And that is exactly similar

00:05:29.400 --> 00:05:32.400
to what happened on the server side item number four.

00:05:32.400 --> 00:05:35.300
So you see number item number four reappearing on the

00:05:35.300 --> 00:05:37.900
return path as well. So that is the interrupt handling

00:05:37.900 --> 00:05:42.010
part. And once that interrupt is handled, the operating system on

00:05:42.010 --> 00:05:44.900
the client side said, oh this was on behalf of

00:05:44.900 --> 00:05:48.080
this client, let me redispatch the client, set up the

00:05:48.080 --> 00:05:51.710
client so that the client can then receive the results,

00:05:51.710 --> 00:05:54.680
and restart execution where it left off. So the only two

00:05:54.680 --> 00:05:57.520
new things that we added in the return path

00:05:57.520 --> 00:06:00.100
was item number six and seven. Two, three, and

00:06:00.100 --> 00:06:03.070
four was exactly the same as what we saw

00:06:03.070 --> 00:06:05.330
on the way over to the server, that is being

00:06:05.330 --> 00:06:08.380
repeated on the way back to the client. So

00:06:08.380 --> 00:06:13.660
that's the seven step latency involved in the RPC, not

00:06:13.660 --> 00:06:16.870
worrying about the actual execution time of the server

00:06:16.870 --> 00:06:19.890
core itself because that is not in the purview of

00:06:19.890 --> 00:06:21.620
the operating system, it is in the purview of

00:06:21.620 --> 00:06:24.800
the client server program that the app developer has done.

