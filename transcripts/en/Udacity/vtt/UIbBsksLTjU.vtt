WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:04.300
So let's look at the upsides and
downsides of Direct-Mapped Caches.

00:00:04.300 --> 00:00:09.450
When we access the Direct-Mapped Cache,
we need to look in only one place.

00:00:09.450 --> 00:00:11.510
That makes this cache fast.

00:00:11.510 --> 00:00:14.660
If we need to look in more than one
place, then we need to wait for

00:00:14.660 --> 00:00:16.050
all of those to be read out.

00:00:16.050 --> 00:00:19.990
We then need to figure out which one
of them, if any need has it and so on.

00:00:19.990 --> 00:00:22.510
With the Direct Mapped Cache,
we just check in one place.

00:00:22.510 --> 00:00:24.060
If it's there, we have it.

00:00:24.060 --> 00:00:26.360
If it's not there, then it's a miss.

00:00:26.360 --> 00:00:29.290
So we can very quickly determine
whether we have a hit or not.

00:00:29.290 --> 00:00:31.000
So it's very good for hit time.

00:00:31.000 --> 00:00:34.830
It is also cheaper than more
complex caches because of it.

00:00:34.830 --> 00:00:38.690
We only need to do one comparison
on every access to the cache.

00:00:38.690 --> 00:00:41.430
So we only need to have
one type comparator.

00:00:41.430 --> 00:00:43.740
One valid bit checker and so on.

00:00:43.740 --> 00:00:45.860
And it also makes it energy efficient.

00:00:45.860 --> 00:00:48.720
We only need to do one type of
comparison, and one valid bit check

00:00:48.720 --> 00:00:53.970
per access, which spends less energy
than if we had to check more than one.

00:00:53.970 --> 00:00:57.470
The down sides of this cache
are related to the fact that the block

00:00:57.470 --> 00:00:59.560
must go in one place.

00:00:59.560 --> 00:01:03.440
To see why this is a problem consider
what happens if the processor

00:01:03.440 --> 00:01:07.980
frequently accesses blocks A and
B like this, where both A and

00:01:07.980 --> 00:01:11.160
B map to the same place in the cache.

00:01:11.160 --> 00:01:14.810
When we access A,
we will bring it to the cache.

00:01:14.810 --> 00:01:19.500
When we access B, we need to put it in
the same place where A is currently.

00:01:19.500 --> 00:01:21.110
So A needs to be kicked out.

00:01:21.110 --> 00:01:24.250
There is no choice about what
we kick out, A has to go out.

00:01:24.250 --> 00:01:27.960
When we access A again,
B needs to be kicked out and so on.

00:01:27.960 --> 00:01:32.260
So the downside of this cache is
that it can have these conflicts,

00:01:32.260 --> 00:01:35.190
where particular blocks
that we want to use.

00:01:35.190 --> 00:01:37.530
Fight over the one spot in the cache,

00:01:37.530 --> 00:01:41.100
although the cache has plenty of
other spots that are under utilized.

00:01:41.100 --> 00:01:44.328
What conflicts do is they
increase the miss rate.

00:01:45.460 --> 00:01:49.430
So we can have a cache that
has a fast hit time, but

00:01:49.430 --> 00:01:51.362
suffers in the miss rate in return.

