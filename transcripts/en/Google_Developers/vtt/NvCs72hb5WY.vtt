WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.610
FRED SAUER: All right.

00:00:00.610 --> 00:00:04.780
Here's a developer who is a
little bit conscious about the

00:00:04.780 --> 00:00:05.850
bill at the end of the day.

00:00:05.850 --> 00:00:09.200
He says, each day, I fight
to really save every

00:00:09.200 --> 00:00:10.950
penny on App Engine.

00:00:10.950 --> 00:00:12.126
MANDY WAITE: Don't we all.

00:00:12.126 --> 00:00:14.150
FRED SAUER: We all do.

00:00:14.150 --> 00:00:18.630
How could you help us better
profile our applications?

00:00:18.630 --> 00:00:22.140
App Stats, something you
actually mentioned, he thinks

00:00:22.140 --> 00:00:23.730
is a little bit hard to use.

00:00:23.730 --> 00:00:27.570
And what's the best way to
tune your application?

00:00:27.570 --> 00:00:28.310
MANDY WAITE: An interesting
question.

00:00:28.310 --> 00:00:31.200
OK, so we mentioned
App Stats earlier.

00:00:31.200 --> 00:00:33.130
I think we've discussed
it before.

00:00:33.130 --> 00:00:36.231
We think that App Stats is still
probably the way to go.

00:00:36.231 --> 00:00:37.850
It's built into the platform
already, no

00:00:37.850 --> 00:00:39.850
external tooling needed.

00:00:39.850 --> 00:00:41.196
It's there, ready to go.

00:00:41.196 --> 00:00:42.780
It will only profile
your RPCs.

00:00:42.780 --> 00:00:45.200
It won't tell you where all of
the hotpots in your code are.

00:00:45.200 --> 00:00:47.000
But it will definitely give you
a really good indication

00:00:47.000 --> 00:00:50.100
about what your application is
spending its time doing,

00:00:50.100 --> 00:00:53.070
particularly in terms of RPC
calls, calls to the data

00:00:53.070 --> 00:00:54.950
store, that's includes,
as well.

00:00:54.950 --> 00:00:56.440
It's very easy to get up
and running, as well.

00:00:56.440 --> 00:00:58.895
So I'm not sure if it's
difficult for you to actually

00:00:58.895 --> 00:01:01.533
get up and running and using it,
or if it's difficult for

00:01:01.533 --> 00:01:04.959
you to actually get anything
meaningful from it.

00:01:04.959 --> 00:01:08.110
But, generally, it's fairly
easy for both Java and for

00:01:08.110 --> 00:01:11.120
Python to get up and running
with App Stats.

00:01:11.120 --> 00:01:13.710
To get access to the console--

00:01:13.710 --> 00:01:16.520
they provide a custom console
you can have access to, which

00:01:16.520 --> 00:01:20.480
you can actually include in
your basic admin console.

00:01:20.480 --> 00:01:22.385
Once you have that available
to you, you can

00:01:22.385 --> 00:01:24.020
look at your RPCs.

00:01:24.020 --> 00:01:26.772
You can look at each one of
your requests, open up the

00:01:26.772 --> 00:01:28.570
request, and then drill down
into the request to see where

00:01:28.570 --> 00:01:30.290
you're spending your time.

00:01:30.290 --> 00:01:31.380
And even then, with Python--

00:01:31.380 --> 00:01:34.070
I'm not sure this is available
with Java-- but with Python,

00:01:34.070 --> 00:01:35.000
you can actually look
at the code that

00:01:35.000 --> 00:01:36.770
generated the RPC call.

00:01:36.770 --> 00:01:39.030
FRED SAUER: Yeah, in Python,
you have stack choices.

00:01:39.030 --> 00:01:40.170
That's right.

00:01:40.170 --> 00:01:42.690
MANDY WAITE: So with Python, you
can actually dive straight

00:01:42.690 --> 00:01:45.580
in to where the code is that's
actually calling the wrong RPC

00:01:45.580 --> 00:01:48.490
calls, and actually modify it
and redeploy the application

00:01:48.490 --> 00:01:50.350
to see what result you get.

00:01:50.350 --> 00:01:51.250
So that's really cool.

00:01:51.250 --> 00:01:54.225
So I think we recommend
using App Stats,

00:01:54.225 --> 00:01:56.440
definitely for RPCs.

00:01:56.440 --> 00:01:57.660
I'm not really familiar
with any other

00:01:57.660 --> 00:01:59.230
profiles for App Engine.

00:01:59.230 --> 00:02:00.930
Although I did briefly
at [INAUDIBLE]

00:02:00.930 --> 00:02:03.380
Academy actually produce a
profiler, Ben [? Cayman's ?]

00:02:03.380 --> 00:02:04.676
made one.

00:02:04.676 --> 00:02:06.780
Probably worth looking into.

00:02:06.780 --> 00:02:09.100
FRED SAUER: Yeah, check out
Ben [? Cayman's ?] blog.

00:02:09.100 --> 00:02:13.500
He does have a Python profiler
with some nice UI widgets that

00:02:13.500 --> 00:02:17.970
tell you about the loading
performance of your site.

00:02:17.970 --> 00:02:21.030
To kind of finish up on the App
Stats, I think what some

00:02:21.030 --> 00:02:24.920
of our users sometimes run into
is they feel like all the

00:02:24.920 --> 00:02:27.080
information that App Stats
provides is really

00:02:27.080 --> 00:02:28.190
overwhelming.

00:02:28.190 --> 00:02:31.430
And it's good maybe to
take a step back.

00:02:31.430 --> 00:02:35.090
And one of things that App Stats
provides that I really

00:02:35.090 --> 00:02:38.090
enjoy looking at is there's
these timeline graphs that

00:02:38.090 --> 00:02:40.760
give you a breakdown of
the RPCs visually.

00:02:40.760 --> 00:02:44.720
And 99% of the time when I'm
using App Stats, I only look

00:02:44.720 --> 00:02:45.560
at the graphs.

00:02:45.560 --> 00:02:49.340
There's a whole page [? throw ?]
of stack traces

00:02:49.340 --> 00:02:51.660
and debugging information
and data that's being

00:02:51.660 --> 00:02:53.560
sent back and forth.

00:02:53.560 --> 00:02:56.230
Almost everything related
to performance of your

00:02:56.230 --> 00:02:59.070
application, you can find just
by looking at the graph.

00:02:59.070 --> 00:03:02.590
You can see whether you have
data store reads that are

00:03:02.590 --> 00:03:05.030
staircased all sequentially
behind one another, or whether

00:03:05.030 --> 00:03:06.340
they're happening in parallel.

00:03:06.340 --> 00:03:09.890
You can see that you're making
a memcache call and then a

00:03:09.890 --> 00:03:12.125
data store call, which
tells you there's a

00:03:12.125 --> 00:03:15.230
memcache miss, right?

00:03:15.230 --> 00:03:17.650
So really just getting
comfortable with those graphs,

00:03:17.650 --> 00:03:22.330
I think, will provide most of
value with very little effort.

00:03:22.330 --> 00:03:24.145
MANDY WAITE: Would you recommend
it for running on

00:03:24.145 --> 00:03:24.856
production as well?

00:03:24.856 --> 00:03:27.220
FRED SAUER: I do, but
depending on the

00:03:27.220 --> 00:03:28.260
traffic of your site.

00:03:28.260 --> 00:03:31.770
If you only have a few requests
per second, then

00:03:31.770 --> 00:03:32.870
sure, run it.

00:03:32.870 --> 00:03:36.110
If you're doing a lot of
traffic, what we recommend is

00:03:36.110 --> 00:03:40.880
that you either deploy another
version in production that you

00:03:40.880 --> 00:03:44.470
hit so you can say version dot
your app ID dot [? appsweb ?]

00:03:44.470 --> 00:03:46.450
dot com and access
that directly.

00:03:46.450 --> 00:03:49.510
And that way you don't have
all the data from all the

00:03:49.510 --> 00:03:52.770
requests from all your users
piling on top of each other.

00:03:52.770 --> 00:03:55.500
But you can very carefully just
poke at your application

00:03:55.500 --> 00:03:57.770
and say, I'm going to do
this one request here.

00:03:57.770 --> 00:04:00.680
And then I want to see the
App Stats profile.

00:04:00.680 --> 00:04:04.570
We've even had people
with mobile clients.

00:04:04.570 --> 00:04:06.940
They'll have a couple
users that

00:04:06.940 --> 00:04:08.910
report performance problems.

00:04:08.910 --> 00:04:11.990
And they'll change their
application to send down a

00:04:11.990 --> 00:04:16.200
ping to those users and say, OK,
this mobile client should

00:04:16.200 --> 00:04:19.209
connect to a different
back-end name.

00:04:19.209 --> 00:04:23.110
And then those users are
isolated on their own version

00:04:23.110 --> 00:04:25.230
where you can do diagnostics.

00:04:25.230 --> 00:04:27.020
Maybe you can enable
some traces.

00:04:27.020 --> 00:04:29.180
You can enable App Stats.

00:04:29.180 --> 00:04:32.710
And then when everything's all
tuned, you tell the clients to

00:04:32.710 --> 00:04:35.170
go back to the original
version.

00:04:35.170 --> 00:04:37.650
So yeah, a lot of ways
to utilize it.

