WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:03.930
Okay, let's discuss the solution for our flushes,

00:00:03.930 --> 00:00:07.440
stalls and forwarding quiz. We have this five stage

00:00:07.440 --> 00:00:10.667
pipeline. We said already that for control dependencies,

00:00:10.667 --> 00:00:12.730
we have to use flushes. We have fetched the

00:00:12.730 --> 00:00:16.510
wrong instructions. Delaying them or trying to fix

00:00:16.510 --> 00:00:19.460
the values they read is not going to help us.

00:00:19.460 --> 00:00:21.710
So here we have to flush, and we

00:00:21.710 --> 00:00:25.686
don't stall or forward. For this state of dependence,

00:00:25.686 --> 00:00:31.362
at the time when the load is reading the R1 here, the multiply is producing the

00:00:31.362 --> 00:00:38.930
result here. The multiply has the result at the end of that cycle, and the load

00:00:38.930 --> 00:00:44.650
will need to compute the address at the beginning of the next cycle. So here, we

00:00:44.650 --> 00:00:50.980
can forward the value of R1 from the multiply to load, and don't have to stall.

00:00:50.980 --> 00:00:56.500
Again, we don't want to use flashes here. The final question is whether

00:00:56.500 --> 00:01:01.500
the load's result of R1, which needs to be fed to the add here, can

00:01:01.500 --> 00:01:06.300
be forwarded, or do we have to stall? When the add

00:01:06.300 --> 00:01:11.136
is reading R1 here, the load is here

00:01:11.136 --> 00:01:16.790
computing the address. It still has not accessed memory.

00:01:16.790 --> 00:01:19.994
In the next cycle the add is computing using

00:01:19.994 --> 00:01:23.109
the wrong value for one, while the load is

00:01:23.109 --> 00:01:25.990
still loading memory. So the load, only at the

00:01:25.990 --> 00:01:29.300
end of this cycle, has the proper value for one.

00:01:29.300 --> 00:01:31.244
Whereas the ADD, at the end of that cycle,

00:01:31.244 --> 00:01:34.428
has already computed the wrong result. So in this case,

00:01:34.428 --> 00:01:38.280
we have to stall. Interesting enough, we will actually,

00:01:38.280 --> 00:01:42.470
after that one stall cycle, forward to avoid stalling more.

00:01:42.470 --> 00:01:45.077
So we here, we have to have a stall, and

00:01:45.077 --> 00:01:49.250
we can after the stall, do forwarding or just stall more.

00:01:49.250 --> 00:01:51.690
But this is one of those situations where forwarding can

00:01:51.690 --> 00:01:54.140
not help you. You have to stall for a data dependence.

