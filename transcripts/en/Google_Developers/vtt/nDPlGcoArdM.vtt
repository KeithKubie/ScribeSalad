WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.479
[MUSIC PLAYING]

00:00:15.910 --> 00:00:17.830
DAG-INGE AAS: Two years
ago, we had a problem.

00:00:17.830 --> 00:00:19.371
SVEIN WILLASSEN: We
were a small team

00:00:19.371 --> 00:00:20.625
of developers based in Norway.

00:00:20.625 --> 00:00:22.000
DAG-INGE AAS: And
we wanted to be

00:00:22.000 --> 00:00:24.190
able to communicate
with friends and family

00:00:24.190 --> 00:00:25.650
in other parts of the world.

00:00:25.650 --> 00:00:27.191
SVEIN WILLASSEN:
But getting everyone

00:00:27.191 --> 00:00:29.010
to install the same
video chat application

00:00:29.010 --> 00:00:30.780
was just too painful.

00:00:30.780 --> 00:00:33.760
DAG-INGE AAS: So we decided
to build our own solution.

00:00:33.760 --> 00:00:35.970
With three students
in just two weeks,

00:00:35.970 --> 00:00:39.040
we made the Appear In web
app-- messaging and video

00:00:39.040 --> 00:00:42.510
chat, no plug-ins, no
installation required.

00:00:42.510 --> 00:00:45.730
SVEIN WILLASSEN: We used WebRTC,
a set of open source APIs

00:00:45.730 --> 00:00:47.510
for real time communications.

00:00:47.510 --> 00:00:50.610
DAG-INGE AAS: Only one problem,
as our web app got popular,

00:00:50.610 --> 00:00:53.020
we soon discovered
that WebRTC was not

00:00:53.020 --> 00:00:55.270
supported across all browsers.

00:00:55.270 --> 00:00:56.950
Some of our friends
wanted native apps

00:00:56.950 --> 00:00:59.060
for their phones and tablets.

00:00:59.060 --> 00:01:01.190
So after all that
wonderful webbiness,

00:01:01.190 --> 00:01:03.460
we realized that
in the real world

00:01:03.460 --> 00:01:06.030
we'd have to build native apps.

00:01:06.030 --> 00:01:08.720
But it turned out
that wasn't a problem.

00:01:08.720 --> 00:01:12.880
WebRTC has great support for
native iOS and Android apps.

00:01:12.880 --> 00:01:14.030
I'm Dag-Inge.

00:01:14.030 --> 00:01:16.000
SVEIN WILLASSEN: And I'm Svein.

00:01:16.000 --> 00:01:18.840
If you're a web developer
like me, hold onto your hat.

00:01:18.840 --> 00:01:20.440
By the end of this
video, you'll have

00:01:20.440 --> 00:01:24.790
resources to get started with
WebRTC on iOS and Android.

00:01:24.790 --> 00:01:27.820
DAG-INGE AAS: As we'll show you,
the APIs for iOS and Android

00:01:27.820 --> 00:01:30.000
parallel those for the web.

00:01:30.000 --> 00:01:33.700
WebRTC is an open standard
and secure peer-to-peer

00:01:33.700 --> 00:01:37.370
communication of
audio, video or data.

00:01:37.370 --> 00:01:40.350
In the past, a lot of
real time communication

00:01:40.350 --> 00:01:42.740
ran by a centralized service.

00:01:42.740 --> 00:01:45.840
That was inefficient
and expensive.

00:01:45.840 --> 00:01:48.720
WebRTC enables apps to
communicate directly

00:01:48.720 --> 00:01:51.980
from device-to-device,
peer-to-peer without going

00:01:51.980 --> 00:01:53.980
via a third party server.

00:01:53.980 --> 00:01:56.750
SVEIN WILLASSEN: This means
communication with WebRTC

00:01:56.750 --> 00:02:00.400
comes at very little cost
to you as a developer.

00:02:00.400 --> 00:02:04.060
Since WebRTC is built on
peer-to-peer communication,

00:02:04.060 --> 00:02:07.200
most of the data cost
is left to the network.

00:02:07.200 --> 00:02:10.160
DAG-INGE AAS: So WebRTC
works peer-to-peer.

00:02:10.160 --> 00:02:12.410
But they can't simply
shout into the internet,

00:02:12.410 --> 00:02:15.920
I want to exchange streaming
data with my friend's computer.

00:02:15.920 --> 00:02:18.960
WebRTC apps need to
negotiate a connection.

00:02:18.960 --> 00:02:22.120
In order to set up
a call, WebRTC apps

00:02:22.120 --> 00:02:24.980
first need to exchange
connectivity and media

00:02:24.980 --> 00:02:29.235
metadata, stuff like network
addresses and audio and video

00:02:29.235 --> 00:02:30.460
capabilities.

00:02:30.460 --> 00:02:32.460
This process is
called signaling.

00:02:32.460 --> 00:02:34.130
SVEIN WILLASSEN:
For signaling, you

00:02:34.130 --> 00:02:37.030
can use any two-way
messaging system.

00:02:37.030 --> 00:02:40.050
We chose WebSocket
with Socket.IO.

00:02:40.050 --> 00:02:44.259
Once a call is set up, media
flows directly between peers.

00:02:44.259 --> 00:02:46.300
DAG-INGE AAS: Having built
a signaling mechanism,

00:02:46.300 --> 00:02:49.080
the next step in your
WebRTC app is get video

00:02:49.080 --> 00:02:51.641
from the camera and audio
from the microphone.

00:02:51.641 --> 00:02:53.140
SVEIN WILLASSEN:
On the web, we used

00:02:53.140 --> 00:02:57.000
to the navigator.getUserMedia
method to access streams

00:02:57.000 --> 00:02:59.130
from the camera and microphone.

00:02:59.130 --> 00:03:00.780
DAG-INGE AAS: The
equivalent on Android

00:03:00.780 --> 00:03:03.780
is VideoCapturer to fetch
audio and video streams

00:03:03.780 --> 00:03:06.760
and VideoRenderer
to display video.

00:03:06.760 --> 00:03:09.250
VideoCapturer is a neat
wrap around a camera

00:03:09.250 --> 00:03:13.430
API allowing WebRTC to
create the mediastream.

00:03:13.430 --> 00:03:17.770
On iOS, RTCVideoCapturer
and RTCVideoRenderer

00:03:17.770 --> 00:03:19.264
do the same job.

00:03:19.264 --> 00:03:21.680
SVEIN WILLASSEN: Once we get
media streams from the camera

00:03:21.680 --> 00:03:25.370
and mic, we need to set up a
network connection to transmit

00:03:25.370 --> 00:03:27.720
the streams to other users.

00:03:27.720 --> 00:03:31.600
To do this on the web, we
have RTCPeerConnection,

00:03:31.600 --> 00:03:35.290
the JavaScript API for audio
and video communication.

00:03:35.290 --> 00:03:38.370
This is the core of WebRTC.

00:03:38.370 --> 00:03:42.210
The peer connection API does
a lot signal processing,

00:03:42.210 --> 00:03:45.840
codec handling, peer-to-peer
communication, security,

00:03:45.840 --> 00:03:48.272
bandwidth management, and so on.

00:03:48.272 --> 00:03:50.650
DAG-INGE AAS: On Android,
the equivalent API

00:03:50.650 --> 00:03:55.640
is PeerConnection and on
iOS it's RTCPeerConnection.

00:03:55.640 --> 00:03:59.590
WebRTC opens up
communications to all of us,

00:03:59.590 --> 00:04:03.980
open technology, free for
developers, free for end users.

00:04:03.980 --> 00:04:07.670
SVEIN WILLASSEN: WebRTC enabled
us with a team of only eight

00:04:07.670 --> 00:04:10.500
to build a competitor
for mainstream video chat

00:04:10.500 --> 00:04:11.020
application.

00:04:11.020 --> 00:04:13.360
DAG-INGE AAS: But WebRTC
enables a lot more

00:04:13.360 --> 00:04:14.970
than just video chats.

00:04:14.970 --> 00:04:17.420
Along with high performance
audio and video,

00:04:17.420 --> 00:04:19.649
WebRTC's peer-to-peer
architecture

00:04:19.649 --> 00:04:23.060
enables fast file sharing
and data communication.

00:04:23.060 --> 00:04:27.470
Peer-to-peer means less network
ops resulting in lower latency.

00:04:27.470 --> 00:04:31.720
We've seen WebRTC apps for music
collaboration, file sharing,

00:04:31.720 --> 00:04:35.340
health services,
robots and even gaming.

00:04:35.340 --> 00:04:40.230
To learn more, check out the
resources at g.co/webrtc.

00:04:40.230 --> 00:04:43.930
You'll find detailed guides,
sample code, demos for Android

00:04:43.930 --> 00:04:46.460
and iOS WebRTC developments.

00:04:46.460 --> 00:04:48.260
BOTH: Goodbye.

00:04:48.260 --> 00:04:49.810
NON-ENGLISH SPEECH]

