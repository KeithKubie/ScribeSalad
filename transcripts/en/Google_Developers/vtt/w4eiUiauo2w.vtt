WEBVTT
Kind: captions
Language: en

00:00:10.185 --> 00:00:11.520
JEFF POSNICK: Hey, everybody.

00:00:11.520 --> 00:00:14.720
This is Jeff Posnick with this
week's episode of "YouTube

00:00:14.720 --> 00:00:17.470
Developers Live." And we're
coming to you from New York

00:00:17.470 --> 00:00:19.490
City and we have a
special guest in

00:00:19.490 --> 00:00:21.130
town for today's episode.

00:00:21.130 --> 00:00:23.840
It's John Luther, who's the
product manager behind WebM

00:00:23.840 --> 00:00:28.090
and VP8 and all sorts of
other video goodness.

00:00:28.090 --> 00:00:28.860
So welcome, John.

00:00:28.860 --> 00:00:29.380
JOHN LUTHER: Thank you.

00:00:29.380 --> 00:00:29.920
Good afternoon.

00:00:29.920 --> 00:00:30.355
Good morning.

00:00:30.355 --> 00:00:31.044
Good night.

00:00:31.044 --> 00:00:32.780
Good evening, wherever
you happen to be.

00:00:32.780 --> 00:00:34.615
JEFF POSNICK: That's the beauty
of global audience.

00:00:34.615 --> 00:00:35.010
JOHN LUTHER: That's
the web, right?

00:00:35.010 --> 00:00:36.110
JEFF POSNICK: So you don't know
where you are and when

00:00:36.110 --> 00:00:37.270
you're watching.

00:00:37.270 --> 00:00:38.270
JOHN LUTHER: Or who's
watching.

00:00:38.270 --> 00:00:39.290
JEFF POSNICK: Exactly.

00:00:39.290 --> 00:00:39.590
Cool.

00:00:39.590 --> 00:00:44.590
So before we get started,
there's a lot of acronyms

00:00:44.590 --> 00:00:49.030
involved and there's a lot of
specific technical language

00:00:49.030 --> 00:00:52.310
that's used when talking about
video codecs and video file

00:00:52.310 --> 00:00:57.680
formats, and not everybody might
be familiar with them.

00:00:57.680 --> 00:00:59.820
So as not to lose everybody
from the very start of the

00:00:59.820 --> 00:01:02.620
show, maybe we could just go
through some basics to begin

00:01:02.620 --> 00:01:04.610
with so folks know what
we're talking about.

00:01:04.610 --> 00:01:05.990
JOHN LUTHER: Sure.

00:01:05.990 --> 00:01:08.890
JEFF POSNICK: So the phrases
video container, video codec,

00:01:08.890 --> 00:01:12.150
and audio codec seem pretty
important to me.

00:01:12.150 --> 00:01:12.330
JOHN LUTHER: Yes.

00:01:12.330 --> 00:01:13.880
JEFF POSNICK: And maybe you
could go into a little bit

00:01:13.880 --> 00:01:14.420
more about what they all do.

00:01:14.420 --> 00:01:15.190
JOHN LUTHER: It's funny you
should mention that because I

00:01:15.190 --> 00:01:16.720
happen to have a graphic
for this.

00:01:16.720 --> 00:01:18.250
JEFF POSNICK: I would love to
see the graphic, if we could

00:01:18.250 --> 00:01:19.950
bring that up on the screen.

00:01:19.950 --> 00:01:20.750
So there we go.

00:01:20.750 --> 00:01:23.330
JOHN LUTHER: So when we talk
about video for the web, which

00:01:23.330 --> 00:01:26.350
is our focus, I mean,
the WebM project is

00:01:26.350 --> 00:01:27.550
named that for a reason.

00:01:27.550 --> 00:01:29.930
Our primary focus is on
video for the web.

00:01:29.930 --> 00:01:32.110
We're not necessarily interested
in broadcast

00:01:32.110 --> 00:01:33.360
television, anything
like that.

00:01:33.360 --> 00:01:37.710
So for web video in most cases
what you have is a container,

00:01:37.710 --> 00:01:40.950
which is the file that
contains the media.

00:01:40.950 --> 00:01:45.070
So here I've kind of just laid
out all the steps of creating

00:01:45.070 --> 00:01:47.440
a video file.

00:01:47.440 --> 00:01:49.843
There's roughly the same for a
live stream, but just for that

00:01:49.843 --> 00:01:51.490
sake of simplicity
I made this.

00:01:51.490 --> 00:01:51.860
JEFF POSNICK: OK.

00:01:51.860 --> 00:01:53.890
JOHN LUTHER: So you start with
your application, which can be

00:01:53.890 --> 00:01:57.215
a camera, a video editing
software, wherever the media

00:01:57.215 --> 00:01:59.080
is originating from.

00:01:59.080 --> 00:02:02.120
And that will export raw media,

00:02:02.120 --> 00:02:03.245
video, and audio streams.

00:02:03.245 --> 00:02:03.560
JEFF POSNICK: OK.

00:02:03.560 --> 00:02:05.900
JOHN LUTHER: So then what we
do, like in the case of

00:02:05.900 --> 00:02:11.080
YouTube, we put those streams
into VP8 video encoder and a

00:02:11.080 --> 00:02:12.400
Vorbis audio coder.

00:02:12.400 --> 00:02:12.850
JEFF POSNICK: OK.

00:02:12.850 --> 00:02:16.700
JOHN LUTHER: So the VP8 video
codec is what Google acquired

00:02:16.700 --> 00:02:18.885
from On2 Technologies and what
we've been working on for the

00:02:18.885 --> 00:02:20.870
past, now, almost three years.

00:02:20.870 --> 00:02:21.350
JEFF POSNICK: OK.

00:02:21.350 --> 00:02:24.810
JOHN LUTHER: Vorbis is an open
source audio format that was

00:02:24.810 --> 00:02:30.370
developed by the Xiph
Foundation, Monty, Montgomery,

00:02:30.370 --> 00:02:32.160
Tim Terriberry, those guys,
if people are familiar.

00:02:32.160 --> 00:02:34.460
They're also the same guys
who are now working

00:02:34.460 --> 00:02:35.950
on Opus audio codec.

00:02:35.950 --> 00:02:36.670
JEFF POSNICK: OK.

00:02:36.670 --> 00:02:39.850
JOHN LUTHER: So when those
streams get encoded they get

00:02:39.850 --> 00:02:40.340
compressed.

00:02:40.340 --> 00:02:43.150
So the goal of all this is to
take these raw streams, which

00:02:43.150 --> 00:02:47.480
are very, very big, lots of
data, raw pixels, and compress

00:02:47.480 --> 00:02:52.430
that down into a stream that's
usable across the internet--

00:02:52.430 --> 00:02:52.695
JEFF POSNICK: Sure.

00:02:52.695 --> 00:02:52.960
JOHN LUTHER: --you
know, megabit

00:02:52.960 --> 00:02:54.810
connection, 2 megabits.

00:02:54.810 --> 00:02:57.085
So those are then muxed,
multiplexed--

00:02:57.085 --> 00:02:57.980
JEFF POSNICK: Yes.

00:02:57.980 --> 00:03:00.090
JOHN LUTHER: --into a container
file, which

00:03:00.090 --> 00:03:01.480
is your WebM file.

00:03:01.480 --> 00:03:01.960
JEFF POSNICK: OK.

00:03:01.960 --> 00:03:04.560
JOHN LUTHER: So within that you
can have multiple video

00:03:04.560 --> 00:03:05.770
streams, multiple
audio streams.

00:03:05.770 --> 00:03:09.470
In most cases you have
one audio, one video.

00:03:09.470 --> 00:03:12.870
And then that's what you sort
of put on your server.

00:03:12.870 --> 00:03:17.260
MIME type is WebM, so just like
a JPEG file contains a

00:03:17.260 --> 00:03:22.180
stream for the still image,
a Word document contains a

00:03:22.180 --> 00:03:24.430
stream of English or French.

00:03:24.430 --> 00:03:25.740
You kind of think of
it that way,--

00:03:25.740 --> 00:03:25.940
JEFF POSNICK: OK.

00:03:25.940 --> 00:03:27.120
JOHN LUTHER: --just a
way to wrap it all

00:03:27.120 --> 00:03:28.720
up in a nice package.

00:03:28.720 --> 00:03:31.280
And then when the client, the
web browser, the video tag in

00:03:31.280 --> 00:03:37.760
HTML, then demuxes that,
demultiplexes, it takes the

00:03:37.760 --> 00:03:40.800
video stream into the video
decoder, audio stream into the

00:03:40.800 --> 00:03:44.080
audio decoder, and then, through
the media pipeline and

00:03:44.080 --> 00:03:46.320
the browser, renders it all
through the screen.

00:03:46.320 --> 00:03:47.140
JEFF POSNICK: Cool, OK.

00:03:47.140 --> 00:03:48.760
JOHN LUTHER: That's how
the magic happens.

00:03:48.760 --> 00:03:51.980
That's the very, very minimal
description of what goes on.

00:03:51.980 --> 00:03:52.920
JEFF POSNICK: Fair enough.

00:03:52.920 --> 00:03:55.830
So if you hear VP8, we're
talking about the video codec.

00:03:55.830 --> 00:03:55.990
JOHN LUTHER: Correct.

00:03:55.990 --> 00:03:58.580
JEFF POSNICK: And if you hear
WebM, we're talking about the

00:03:58.580 --> 00:04:01.495
overall video file format
containing the muxed streams.

00:04:01.495 --> 00:04:02.205
JOHN LUTHER: Yeah.

00:04:02.205 --> 00:04:02.640
JEFF POSNICK: OK.

00:04:02.640 --> 00:04:04.400
Hopefully that answers
some questions.

00:04:04.400 --> 00:04:06.845
And one takeaway from the show,
if nothing else, people

00:04:06.845 --> 00:04:10.060
will understand video file
formats a little bit better.

00:04:10.060 --> 00:04:10.530
JOHN LUTHER: Exactly.

00:04:10.530 --> 00:04:10.860
JEFF POSNICK: Awesome.

00:04:10.860 --> 00:04:15.040
OK, so now that we know what
we're talking about, let's get

00:04:15.040 --> 00:04:18.180
into a little bit of the details
as to why somebody

00:04:18.180 --> 00:04:22.740
would actually want to use WebM
and VP8 versus some of

00:04:22.740 --> 00:04:25.170
the other [INAUDIBLE] and codecs
that are out there.

00:04:25.170 --> 00:04:27.560
What are some advantages?

00:04:27.560 --> 00:04:29.520
JOHN LUTHER: Well, one of the
advantages of VP8 is that it's

00:04:29.520 --> 00:04:31.250
a very, very efficient codec.

00:04:31.250 --> 00:04:38.940
I mean, it was developed roughly
2009-ish and then we

00:04:38.940 --> 00:04:39.720
acquired it in 2010.

00:04:39.720 --> 00:04:41.500
JEFF POSNICK: I was expecting
you to say 2,000 years ago.

00:04:41.500 --> 00:04:42.890
JOHN LUTHER: No, no.

00:04:42.890 --> 00:04:43.990
JEFF POSNICK: This is a
very ancient codec.

00:04:43.990 --> 00:04:45.053
JOHN LUTHER: [INAUDIBLE]
business that long,

00:04:45.053 --> 00:04:46.790
but not that long.

00:04:46.790 --> 00:04:48.930
JEFF POSNICK: Lots of papyrus,
hardware acceleration, stuff

00:04:48.930 --> 00:04:49.880
like that, but--

00:04:49.880 --> 00:04:52.060
JOHN LUTHER: We were drawing the
pixels by hand back when I

00:04:52.060 --> 00:04:52.900
first started.

00:04:52.900 --> 00:04:54.650
JEFF POSNICK: Yes.

00:04:54.650 --> 00:04:54.900
JOHN LUTHER: No.

00:04:54.900 --> 00:04:58.550
So you know, it's a modern
codec, as the parlance goes in

00:04:58.550 --> 00:04:59.670
the industry.

00:04:59.670 --> 00:05:02.160
It's very, very efficient.

00:05:02.160 --> 00:05:06.970
The quality that it delivers
is great, HD as well as

00:05:06.970 --> 00:05:08.050
smaller frame sizes.

00:05:08.050 --> 00:05:11.020
But also, one of the advantages
of VP8 is that it's

00:05:11.020 --> 00:05:12.736
a very low latency codec.

00:05:12.736 --> 00:05:15.080
JEFF POSNICK: OK, why
does that matter?

00:05:15.080 --> 00:05:16.260
JOHN LUTHER: Real-time
applications.

00:05:16.260 --> 00:05:19.470
For example, one of the things
that VP8 is proposed for now

00:05:19.470 --> 00:05:25.690
is the WebRTC project, which
is an open source real-time

00:05:25.690 --> 00:05:28.840
media project, for example, for
making video conferencing

00:05:28.840 --> 00:05:30.330
applications in the browser.

00:05:30.330 --> 00:05:30.780
JEFF POSNICK: Sure.

00:05:30.780 --> 00:05:31.430
JOHN LUTHER: Those
sorts of things.

00:05:31.430 --> 00:05:35.200
So at the IETF standards
organization, VP8 has been

00:05:35.200 --> 00:05:38.090
proposed as a mandatory codec
for that use case.

00:05:38.090 --> 00:05:38.585
JEFF POSNICK: OK.

00:05:38.585 --> 00:05:41.540
JOHN LUTHER: So what we can do
is with VP8, because the

00:05:41.540 --> 00:05:44.690
latency is so small, you can
have these very good video

00:05:44.690 --> 00:05:47.360
conferencing applications
where there's no delay.

00:05:47.360 --> 00:05:51.280
Even if the network gets kind
of funky, starts dropping

00:05:51.280 --> 00:05:53.670
packets, and all sorts of crazy
stuff happens, we can

00:05:53.670 --> 00:05:54.900
recover from errors.

00:05:54.900 --> 00:05:55.230
JEFF POSNICK: Sure.

00:05:55.230 --> 00:05:55.860
JOHN LUTHER: Lot
of that stuff.

00:05:55.860 --> 00:06:00.240
So we've designed it to be a
very good all around codec.

00:06:00.240 --> 00:06:04.520
But as part of that we wanted
it to be one codec.

00:06:04.520 --> 00:06:06.690
We didn't want profiles
and levels.

00:06:06.690 --> 00:06:09.590
And there's a lot of
other codecs--

00:06:09.590 --> 00:06:13.820
not necessarily that it's all
bad, but we wanted the design

00:06:13.820 --> 00:06:16.280
to be very simple and serve
every use case without having

00:06:16.280 --> 00:06:18.250
to have special decoders.

00:06:18.250 --> 00:06:18.990
JEFF POSNICK: OK.

00:06:18.990 --> 00:06:20.450
JOHN LUTHER: So other codecs,
you know when you hear about a

00:06:20.450 --> 00:06:24.860
profile in, for example, H.264
baseline profile, they're

00:06:24.860 --> 00:06:26.030
actually different codecs.

00:06:26.030 --> 00:06:26.410
JEFF POSNICK: OK.

00:06:26.410 --> 00:06:28.930
JOHN LUTHER: A baseline decoder
can't decode a high

00:06:28.930 --> 00:06:31.110
profile 264 stream.

00:06:31.110 --> 00:06:32.130
VP8 is VP8.

00:06:32.130 --> 00:06:36.275
A VP8 stream created from a
compliant encoder will play

00:06:36.275 --> 00:06:38.480
and decode in any VP8 decoder.

00:06:38.480 --> 00:06:42.310
So there's simplicity of design,
there's efficiency.

00:06:42.310 --> 00:06:45.200
We don't charge any money
for it, which a

00:06:45.200 --> 00:06:46.260
lot of people like.

00:06:46.260 --> 00:06:46.730
JEFF POSNICK: Sure.

00:06:46.730 --> 00:06:49.900
JOHN LUTHER: Other codecs
have royalties

00:06:49.900 --> 00:06:51.950
associated with them.

00:06:51.950 --> 00:06:54.490
We don't charge for VP8.

00:06:54.490 --> 00:06:56.300
It's a very wide open license.

00:06:56.300 --> 00:06:58.635
It's a BSD open-source
license.

00:07:01.280 --> 00:07:03.460
There are people out there
using it who aren't even

00:07:03.460 --> 00:07:05.870
calling it VP8 and they have
every right to do that.

00:07:05.870 --> 00:07:06.575
JEFF POSNICK: OK.

00:07:06.575 --> 00:07:06.833
JOHN LUTHER: That's [INAUDIBLE]

00:07:06.833 --> 00:07:08.640
the license allows.

00:07:08.640 --> 00:07:10.640
So that's--

00:07:10.640 --> 00:07:14.150
you know, overall
high-efficiency and

00:07:14.150 --> 00:07:15.260
simplicity of design.

00:07:15.260 --> 00:07:18.440
And decoding simplicity goes
with that as well.

00:07:18.440 --> 00:07:23.290
I mean, we can decode VP8 on
pretty minimal hardware

00:07:23.290 --> 00:07:24.650
[INAUDIBLE] in software.

00:07:24.650 --> 00:07:25.510
JEFF POSNICK: OK.

00:07:25.510 --> 00:07:25.920
JOHN LUTHER: Yeah.

00:07:25.920 --> 00:07:27.090
JEFF POSNICK: That sounds
pretty compelling.

00:07:27.090 --> 00:07:27.400
JOHN LUTHER: Yeah.

00:07:27.400 --> 00:07:28.950
JEFF POSNICK: Good to know.

00:07:28.950 --> 00:07:31.640
OK, so that's a little
bit about VP8.

00:07:31.640 --> 00:07:34.910
You mentioned the fact that VP8
kind of initially started

00:07:34.910 --> 00:07:39.346
as part of a separate company,
On2, that Google acquired.

00:07:39.346 --> 00:07:41.300
Can I just hear a little bit
about your history and your

00:07:41.300 --> 00:07:42.980
involvement with the
overall project?

00:07:42.980 --> 00:07:43.430
JOHN LUTHER: Yeah.

00:07:43.430 --> 00:07:43.920
JEFF POSNICK: [INAUDIBLE]

00:07:43.920 --> 00:07:46.780
with video working with.

00:07:46.780 --> 00:07:47.520
JOHN LUTHER: Let's see.

00:07:47.520 --> 00:07:52.730
Well, On2 started as a couple
of people from New York City

00:07:52.730 --> 00:07:54.810
and a school in upstate New
York called Rensselaer

00:07:54.810 --> 00:07:56.340
Polytechnic Institute.

00:07:56.340 --> 00:07:59.010
So they started this company
to initially do video in

00:07:59.010 --> 00:08:02.620
gaming systems like the Sega
Saturn and all things--

00:08:02.620 --> 00:08:03.710
JEFF POSNICK: That creates
it a little bit.

00:08:03.710 --> 00:08:06.780
JOHN LUTHER: You young people
out there, you might--

00:08:06.780 --> 00:08:09.820
so that was '93, '94.

00:08:09.820 --> 00:08:12.450
I came along in 2002.

00:08:12.450 --> 00:08:15.280
By then-- when it started it was
called Duck Corporation,

00:08:15.280 --> 00:08:16.470
just being silly.

00:08:16.470 --> 00:08:17.450
JEFF POSNICK: Sure.

00:08:17.450 --> 00:08:18.580
JOHN LUTHER: It became On2.

00:08:18.580 --> 00:08:20.090
2002 is when I joined.

00:08:20.090 --> 00:08:24.000
And then we developed a series
of, you know, the VP3 series,

00:08:24.000 --> 00:08:27.390
VP4, all the way up to VP7.

00:08:27.390 --> 00:08:31.400
And then we released
VP8 in 2009.

00:08:31.400 --> 00:08:32.809
Google acquired us in 2010.

00:08:32.809 --> 00:08:36.460
So I've been doing this
now for 11 years.

00:08:36.460 --> 00:08:37.289
JEFF POSNICK: OK.

00:08:37.289 --> 00:08:39.169
JOHN LUTHER: Which--

00:08:39.169 --> 00:08:40.866
you know, there are more and
more people who have been

00:08:40.866 --> 00:08:44.880
doing it that long, but I feel
like I have a lot of

00:08:44.880 --> 00:08:46.400
perspective on this stuff.

00:08:46.400 --> 00:08:48.330
And it takes a long time.

00:08:48.330 --> 00:08:53.220
And a lot of people have said,
or implied, that VP8 hasn't

00:08:53.220 --> 00:08:57.410
caught on, but this is pretty
much about when the curve

00:08:57.410 --> 00:08:58.010
starts to come.

00:08:58.010 --> 00:08:58.220
JEFF POSNICK: Sure.

00:08:58.220 --> 00:09:02.220
JOHN LUTHER: I mean, I remember
when H.264 was first

00:09:02.220 --> 00:09:05.460
ratified as a standard,
that was early 2000s.

00:09:05.460 --> 00:09:08.030
It really didn't come into
its own, at least

00:09:08.030 --> 00:09:09.930
for the web, until--

00:09:09.930 --> 00:09:13.110
really the iPad is what really
then sort of got everybody

00:09:13.110 --> 00:09:15.760
wanting to support it
and everything else.

00:09:15.760 --> 00:09:21.960
So I'm very bullish on VP8 for
the next many years, because

00:09:21.960 --> 00:09:23.150
there's hardware coming
to market.

00:09:23.150 --> 00:09:23.985
We can get into all
that stuff--

00:09:23.985 --> 00:09:24.400
JEFF POSNICK: Sure.

00:09:24.400 --> 00:09:25.980
JOHN LUTHER: For me, that's
my [INAUDIBLE].

00:09:25.980 --> 00:09:26.420
JEFF POSNICK: OK.

00:09:26.420 --> 00:09:28.270
Well, I mean it's wonderful
having somebody with your

00:09:28.270 --> 00:09:30.840
perspective on the show
to talk about this.

00:09:30.840 --> 00:09:32.060
JOHN LUTHER: Thanks.

00:09:32.060 --> 00:09:35.240
JEFF POSNICK: All right, so
let's say I'm just your

00:09:35.240 --> 00:09:37.785
average YouTube consumer.

00:09:37.785 --> 00:09:40.100
Like everybody out there, like
everybody who's watching us

00:09:40.100 --> 00:09:42.570
right now, I like watching
YouTube videos.

00:09:42.570 --> 00:09:45.700
But I'm not necessarily a
developer, and I'm not maybe

00:09:45.700 --> 00:09:46.220
creating videos.

00:09:46.220 --> 00:09:48.510
So what does WebM mean for me?

00:09:48.510 --> 00:09:51.890
Why should I care about WebM?

00:09:51.890 --> 00:09:56.340
JOHN LUTHER: Just for your
everyday user they don't

00:09:56.340 --> 00:09:57.460
really need to care.

00:09:57.460 --> 00:09:59.680
Or at least, we don't want them
to care in the sense that

00:09:59.680 --> 00:10:02.420
like, well, I only want to have
this-- all they want is a

00:10:02.420 --> 00:10:03.660
really good video experience.

00:10:03.660 --> 00:10:06.880
They want it to look good, same
priorities that we have,

00:10:06.880 --> 00:10:08.970
but they're going to
frame them in terms

00:10:08.970 --> 00:10:09.810
of watching a video.

00:10:09.810 --> 00:10:13.160
So it should start fast, it
should seek without a lot of

00:10:13.160 --> 00:10:14.150
weird stuttering.

00:10:14.150 --> 00:10:16.270
The audio, video should
never go out.

00:10:16.270 --> 00:10:20.420
You know, just very good viewing
experience that is

00:10:20.420 --> 00:10:22.090
seamless, that's what
they care about.

00:10:22.090 --> 00:10:27.660
And we feel like that's sort of
the focus of our project.

00:10:27.660 --> 00:10:28.610
That's what we're doing.

00:10:28.610 --> 00:10:29.475
JEFF POSNICK: Sure.

00:10:29.475 --> 00:10:31.740
JOHN LUTHER: And our, sort of,
charter, if you will, is to

00:10:31.740 --> 00:10:34.780
make video on the web
really great.

00:10:34.780 --> 00:10:36.530
Part of that's the codec,
but there's other

00:10:36.530 --> 00:10:38.610
parts of it as well.

00:10:38.610 --> 00:10:42.260
I also work with Chrome, the
browser, the video stack in

00:10:42.260 --> 00:10:44.020
there, making that a really
great experience.

00:10:44.020 --> 00:10:44.610
JEFF POSNICK: Sure.

00:10:44.610 --> 00:10:47.280
JOHN LUTHER: Other WebM partners
like Firefox, we're

00:10:47.280 --> 00:10:52.530
all kind of on this mission,
if you will, to take the

00:10:52.530 --> 00:10:54.700
technologies that we're
developing and make them great

00:10:54.700 --> 00:10:55.080
on the web.

00:10:55.080 --> 00:10:58.590
Because historically a lot of
the codecs that have been used

00:10:58.590 --> 00:11:01.150
for web video were not designed
for the web, they

00:11:01.150 --> 00:11:04.840
were designed for broadcast
television or use cases.

00:11:04.840 --> 00:11:05.930
JEFF POSNICK: OK.

00:11:05.930 --> 00:11:06.610
JOHN LUTHER: So, yeah.

00:11:06.610 --> 00:11:10.440
I mean, we certainly don't want
people to have to feel

00:11:10.440 --> 00:11:13.230
like they have to
know essentially

00:11:13.230 --> 00:11:14.740
how the codec works.

00:11:14.740 --> 00:11:16.660
We don't really want people
to have to know that.

00:11:16.660 --> 00:11:19.920
We just want them to be like,
oh, wow, this video looks

00:11:19.920 --> 00:11:21.600
great, it works great,
I wonder what it---

00:11:21.600 --> 00:11:22.180
why?

00:11:22.180 --> 00:11:24.310
And then you say, well, that's
because it's VP8.

00:11:24.310 --> 00:11:25.130
JEFF POSNICK: Gotchya.

00:11:25.130 --> 00:11:26.200
JOHN LUTHER: We care
about these things.

00:11:26.200 --> 00:11:28.072
So that's why we do it.

00:11:28.072 --> 00:11:31.660
JEFF POSNICK: And just for some
background on how YouTube

00:11:31.660 --> 00:11:38.040
is using WebM in embeds, we have
a very extensible iFrame

00:11:38.040 --> 00:11:38.910
Embed format now.

00:11:38.910 --> 00:11:41.460
And one of the things about the
iFrame Embed is that it'll

00:11:41.460 --> 00:11:46.430
kind of try to push the logic
of the video player and the

00:11:46.430 --> 00:11:52.450
video format to Run-time and not
have to hard code a flash

00:11:52.450 --> 00:11:53.930
player, URL, or anything
like that.

00:11:53.930 --> 00:11:56.570
So if you are somebody who's
watching a video and it

00:11:56.570 --> 00:11:59.330
happens to be embedded with the
iFrame Embed, there's a

00:11:59.330 --> 00:12:03.410
good chance that you might be
watching HTML5 video using the

00:12:03.410 --> 00:12:05.660
WebM video format
and not know it.

00:12:05.660 --> 00:12:08.360
So again, I think
this really--

00:12:08.360 --> 00:12:09.970
not necessarily knowing
it, but you might

00:12:09.970 --> 00:12:11.335
already be doing that.

00:12:11.335 --> 00:12:11.620
JOHN LUTHER: Yeah.

00:12:11.620 --> 00:12:12.950
JEFF POSNICK: And, you know, you
might be benefiting from

00:12:12.950 --> 00:12:14.930
all those things
that it offers.

00:12:14.930 --> 00:12:17.600
So it is definitely relevant
for folks like those.

00:12:17.600 --> 00:12:20.350
JOHN LUTHER: And there are cases
where as soon as you're

00:12:20.350 --> 00:12:22.880
not using it you might notice.

00:12:22.880 --> 00:12:26.120
For example, like I for a while
had a machine that--

00:12:26.120 --> 00:12:28.590
a computer that I won't
name [INAUDIBLE].

00:12:28.590 --> 00:12:31.900
And every time I would be
playing video from YouTube and

00:12:31.900 --> 00:12:36.720
H.264 the fan would start
running, whereas because one

00:12:36.720 --> 00:12:41.085
of our design goals is low
complexity on the decode side,

00:12:41.085 --> 00:12:43.060
it just never happened on
that machine when I was

00:12:43.060 --> 00:12:47.130
using HTML5 with WebM.

00:12:47.130 --> 00:12:50.090
So those sorts of things
start to matter

00:12:50.090 --> 00:12:50.850
when you notice them.

00:12:50.850 --> 00:12:53.400
We don't want anybody to ever
have to notice any of that

00:12:53.400 --> 00:12:57.770
stuff, just it works great and
we're doing the big work to

00:12:57.770 --> 00:12:59.995
make video on the web great.

00:12:59.995 --> 00:13:00.675
JEFF POSNICK: Cool.

00:13:00.675 --> 00:13:01.800
OK.

00:13:01.800 --> 00:13:05.010
Yeah, one kind of scenario that
we haven't really talked

00:13:05.010 --> 00:13:07.980
about publicly yet but I'm told
it's OK that we mention

00:13:07.980 --> 00:13:11.220
it here is that what about
people who want to watch some

00:13:11.220 --> 00:13:14.300
of the types of premium YouTube
content on a device

00:13:14.300 --> 00:13:15.685
that doesn't support flash?

00:13:15.685 --> 00:13:18.290
And how does WebM come into
the picture on that?

00:13:18.290 --> 00:13:21.430
JOHN LUTHER: So this
is pretty exciting.

00:13:21.430 --> 00:13:27.950
Last month we rolled out the
Samsung Chromebook devices

00:13:27.950 --> 00:13:32.270
that were released last fall,
which have been in very high

00:13:32.270 --> 00:13:34.010
demand on Amazon
and elsewhere.

00:13:34.010 --> 00:13:36.010
So what we did is we decided
to make that

00:13:36.010 --> 00:13:38.980
sort of an HTML5 platform.

00:13:38.980 --> 00:13:42.360
That's where we really thought
there was a great case to do

00:13:42.360 --> 00:13:43.400
more HTML5 stuff.

00:13:43.400 --> 00:13:46.410
So what we did on YouTube Movies
and Play Movies is on

00:13:46.410 --> 00:13:49.680
those devices, Samsung
Chromebooks, if you buy or

00:13:49.680 --> 00:13:53.800
rent a movie on YouTube Movies
or Play, that's a WebM

00:13:53.800 --> 00:13:56.542
experience, that plays WebM.

00:13:56.542 --> 00:13:59.330
JEFF POSNICK: And previously
you had to do that in flash

00:13:59.330 --> 00:13:59.790
player, or--

00:13:59.790 --> 00:14:00.970
JOHN LUTHER: Previously you'd
have to have Flash Player.

00:14:00.970 --> 00:14:02.660
JEFF POSNICK: Yeah, OK.

00:14:02.660 --> 00:14:06.210
JOHN LUTHER: So as far
as I know we're the

00:14:06.210 --> 00:14:07.600
first to ever do that.

00:14:07.600 --> 00:14:12.450
Because it also uses some things
that we've proposed at

00:14:12.450 --> 00:14:17.210
W3C for doing encrypted media
in the browser, media source

00:14:17.210 --> 00:14:23.060
extensions for HTML, so there's
a dash-like adaptive

00:14:23.060 --> 00:14:23.830
streaming going on.

00:14:23.830 --> 00:14:26.690
There's a whole bunch of
things and we said

00:14:26.690 --> 00:14:27.880
OK, let's do this.

00:14:27.880 --> 00:14:28.140
JEFF POSNICK: OK.

00:14:28.140 --> 00:14:29.430
JOHN LUTHER: Let's
do it all, end to

00:14:29.430 --> 00:14:33.060
end, HTML5, the browser.

00:14:33.060 --> 00:14:33.820
There's no flash.

00:14:33.820 --> 00:14:34.700
There's no plug-ins.

00:14:34.700 --> 00:14:35.520
There's no anything.

00:14:35.520 --> 00:14:39.680
That whole experience on that
device is all HTML.

00:14:39.680 --> 00:14:43.500
And we'll be rolling that out on
more Chromeless devices and

00:14:43.500 --> 00:14:47.820
other platforms soon, all
through the next year.

00:14:47.820 --> 00:14:49.880
JEFF POSNICK: And then, again,
this kind of fits into like if

00:14:49.880 --> 00:14:52.355
you're someone viewing, you
might not realize what's going

00:14:52.355 --> 00:14:53.040
on under the hood.

00:14:53.040 --> 00:14:55.690
But hopefully for the technical
audience out there,

00:14:55.690 --> 00:14:57.390
folks watching this,
it's pretty cool.

00:14:57.390 --> 00:14:58.270
It's exciting for
me, certainly.

00:14:58.270 --> 00:14:58.470
JOHN LUTHER: Yeah.

00:14:58.470 --> 00:14:59.860
It's exciting, you know--

00:14:59.860 --> 00:15:02.350
JEFF POSNICK: If you care about
these types of standards

00:15:02.350 --> 00:15:05.210
on the web and getting this type
of playback on more types

00:15:05.210 --> 00:15:06.690
of devices, it's very cool.

00:15:06.690 --> 00:15:10.820
JOHN LUTHER: Yeah,
that is part of--

00:15:10.820 --> 00:15:14.470
my job is doing the encrypted
media stuff and talking to

00:15:14.470 --> 00:15:16.300
people who want to do--

00:15:16.300 --> 00:15:20.090
a lot of content providers they
really want to do HTML5

00:15:20.090 --> 00:15:21.050
for a number of reasons.

00:15:21.050 --> 00:15:25.390
But primarily because right now
they have an app for this

00:15:25.390 --> 00:15:27.950
device, and an app for that
device, and this game console

00:15:27.950 --> 00:15:32.990
and they want to just unify all
that into a browser stack,

00:15:32.990 --> 00:15:35.520
so s I feel like
that's coming.

00:15:35.520 --> 00:15:38.240
And that's really exciting
because finally they'll be

00:15:38.240 --> 00:15:39.820
able to just deliver
one experience

00:15:39.820 --> 00:15:42.120
any device, any screen.

00:15:42.120 --> 00:15:44.090
Under the covers it will
all work the same way.

00:15:44.090 --> 00:15:47.280
It makes it really great for
users, first of all, but for

00:15:47.280 --> 00:15:50.390
them as well it just simplifies
things greatly for

00:15:50.390 --> 00:15:50.560
those guys.

00:15:50.560 --> 00:15:52.340
JEFF POSNICK: OK, cool.

00:15:52.340 --> 00:15:55.160
So we talked a little bit about
the experience of people

00:15:55.160 --> 00:15:56.810
who are watching content.

00:15:56.810 --> 00:15:58.870
What if you were a
website owner?

00:15:58.870 --> 00:16:01.570
And I talked a little bit before
about using the iFrame

00:16:01.570 --> 00:16:06.690
Embed for YouTube for enabling
types of rich playback, but

00:16:06.690 --> 00:16:10.300
exactly how widespread is WebM
support in the browser

00:16:10.300 --> 00:16:10.830
community out there?

00:16:10.830 --> 00:16:13.930
What's the chance that folks
visiting your site will have

00:16:13.930 --> 00:16:15.200
WebM support in their browser?

00:16:15.200 --> 00:16:18.490
JOHN LUTHER: The last numbers
that I ran were a few days ago

00:16:18.490 --> 00:16:24.130
and so the native support in the
browser, like WebM is in

00:16:24.130 --> 00:16:28.060
there, it's in the video tag,
that's now at about 57% when

00:16:28.060 --> 00:16:34.330
you combine Chrome, Firefox,
and the Opera browser.

00:16:34.330 --> 00:16:37.630
Now, there's also plug-ins
that you can install for

00:16:37.630 --> 00:16:40.200
Internet Explorer
to support WebM.

00:16:40.200 --> 00:16:44.590
If you then add that on that's
an addressable market--

00:16:44.590 --> 00:16:44.790
JEFF POSNICK: Sure.

00:16:44.790 --> 00:16:47.075
JOHN LUTHER: --of about
another 17%.

00:16:47.075 --> 00:16:47.380
JEFF POSNICK: OK.

00:16:47.380 --> 00:16:51.840
JOHN LUTHER: So the chances
are pretty good, and

00:16:51.840 --> 00:16:54.510
particularly with Chrome
and Firefox.

00:16:54.510 --> 00:16:59.540
And the performance in
both is very good.

00:16:59.540 --> 00:17:01.740
Since we launched it we've made
a lot of refinements.

00:17:01.740 --> 00:17:02.580
JEFF POSNICK: OK.

00:17:02.580 --> 00:17:03.520
That's good to hear.

00:17:03.520 --> 00:17:04.310
So--

00:17:04.310 --> 00:17:07.690
JOHN LUTHER: Oh, I should
mention Android as well.

00:17:07.690 --> 00:17:08.530
JEFF POSNICK: Sure.

00:17:08.530 --> 00:17:10.290
JOHN LUTHER: Ever since
Gingerbread, WebM has been

00:17:10.290 --> 00:17:11.140
supported in Android.

00:17:11.140 --> 00:17:12.480
JEFF POSNICK: It's a pretty
big platform.

00:17:12.480 --> 00:17:15.010
JOHN LUTHER: Yeah, I guess
it is, isn't it?

00:17:15.010 --> 00:17:18.500
A few hundred, whatever,
bazillion people.

00:17:18.500 --> 00:17:19.339
JEFF POSNICK: There you go.

00:17:19.339 --> 00:17:20.260
Don't quote us on that.

00:17:20.260 --> 00:17:23.650
JOHN LUTHER: No, that's not
a scientific figure.

00:17:23.650 --> 00:17:25.849
Bazillion I don't think is
a real number anyway.

00:17:25.849 --> 00:17:27.640
JEFF POSNICK: There you go.

00:17:27.640 --> 00:17:30.430
OK, so that's the website
owner point of view.

00:17:30.430 --> 00:17:33.610
Let's say a slightly different
scenario, I'm

00:17:33.610 --> 00:17:35.890
somebody who's a developer.

00:17:35.890 --> 00:17:40.360
Maybe I'm working on a video
creation application, or maybe

00:17:40.360 --> 00:17:44.730
I'm just interested in ways of
encoding video for use in my

00:17:44.730 --> 00:17:47.580
application because I'm
not doing necessarily

00:17:47.580 --> 00:17:49.930
browser-based playback, but I
know I want to have video

00:17:49.930 --> 00:17:54.940
playback or even video capture
within my application.

00:17:54.940 --> 00:17:56.340
What could WebM do for me?

00:17:56.340 --> 00:17:59.240
And do you maybe have some
examples of how you could

00:17:59.240 --> 00:18:01.042
interact with WebM
in that case?

00:18:01.042 --> 00:18:03.830
JOHN LUTHER: Yeah, I mean this
is one of the great things

00:18:03.830 --> 00:18:07.450
about the web and being a
developer is that it depends a

00:18:07.450 --> 00:18:09.240
lot on what you want to do
and what your needs are.

00:18:09.240 --> 00:18:13.940
If you have a small site and you
do a couple videos a week

00:18:13.940 --> 00:18:17.520
you can encode them on your
local desktop with--

00:18:17.520 --> 00:18:21.490
there's a lot of tools now
that support WebM.

00:18:21.490 --> 00:18:24.510
But let's say you have a higher
volume site where you

00:18:24.510 --> 00:18:27.160
may be getting dozens or
hundreds of videos a week,

00:18:27.160 --> 00:18:29.440
there are a lot of really
great cloud-based video

00:18:29.440 --> 00:18:34.240
encoding services now where they
have really great APIs.

00:18:34.240 --> 00:18:37.590
Most of them are kind
of REST-based.

00:18:37.590 --> 00:18:38.015
JEFF POSNICK: Sure.

00:18:38.015 --> 00:18:40.290
JOHN LUTHER: You send a file
in and then they give you a

00:18:40.290 --> 00:18:41.660
pointer back to encoder
version.

00:18:41.660 --> 00:18:43.140
It's very fast.

00:18:43.140 --> 00:18:44.900
They have really good presets.

00:18:44.900 --> 00:18:46.950
They take care of a lot of
the tweaking for you.

00:18:46.950 --> 00:18:47.620
JEFF POSNICK: Sure.

00:18:47.620 --> 00:18:50.560
And YouTube does support WebM as
an injection for that also.

00:18:50.560 --> 00:18:50.820
JOHN LUTHER: Oh, yeah.

00:18:50.820 --> 00:18:51.030
Yeah.

00:18:51.030 --> 00:18:52.810
JEFF POSNICK: So once you have
your WebM encoded file you

00:18:52.810 --> 00:18:54.695
could pass that along to
YouTube, obviously, and store

00:18:54.695 --> 00:18:56.830
it there and serve it there.

00:18:56.830 --> 00:18:59.110
JOHN LUTHER: I mean, there's
companies that are doing that

00:18:59.110 --> 00:19:00.570
even behind the scenes.

00:19:00.570 --> 00:19:03.940
Some gaming companies and things
are doing that as well.

00:19:03.940 --> 00:19:06.410
So then it becomes,
for a developer--

00:19:09.310 --> 00:19:10.080
it's like a lot of things.

00:19:10.080 --> 00:19:12.530
You want to focus on the user
experience of the site, making

00:19:12.530 --> 00:19:17.710
it work great, reliability,
encoding the videos.

00:19:17.710 --> 00:19:20.060
You can do that stuff
in the cloud now.

00:19:20.060 --> 00:19:23.110
And it's becoming so much easier
and you don't need a

00:19:23.110 --> 00:19:25.070
huge investment in a
lot of hardware.

00:19:25.070 --> 00:19:26.230
Because encoding video--

00:19:26.230 --> 00:19:30.000
it's not just VP8, all
video is very compute

00:19:30.000 --> 00:19:30.830
intensive to do.

00:19:30.830 --> 00:19:33.620
It's just sort of the
nature of the thing.

00:19:33.620 --> 00:19:36.480
JEFF POSNICK: That being said,
let's say you are somebody who

00:19:36.480 --> 00:19:40.100
wants to do on-device video
encoding, maybe because you're

00:19:40.100 --> 00:19:43.120
capturing, game play as part
of a game or something like

00:19:43.120 --> 00:19:45.400
that and you want to do the
encoding and then pass it

00:19:45.400 --> 00:19:47.890
along to YouTube.

00:19:47.890 --> 00:19:53.420
JOHN LUTHER: So, yeah, the SDK
that we have is called libvpx.

00:19:53.420 --> 00:19:56.720
It's open, it's up on
the site, anything.

00:19:56.720 --> 00:20:00.890
Right now that's sort of
mostly the C interface.

00:20:00.890 --> 00:20:01.390
JEFF POSNICK: OK.

00:20:01.390 --> 00:20:04.680
JOHN LUTHER: We've recently made
some J and I bindings for

00:20:04.680 --> 00:20:10.760
that so you can, right in Java,
talk to that SDK through

00:20:10.760 --> 00:20:11.730
Java interfaces.

00:20:11.730 --> 00:20:14.320
And one of the things that we'd
like the open community

00:20:14.320 --> 00:20:17.990
to do is develop more of those
bindings for other--

00:20:17.990 --> 00:20:20.410
because of the nature of
websites and things, not

00:20:20.410 --> 00:20:22.230
everybody's out there
hacking in C--

00:20:22.230 --> 00:20:23.010
JEFF POSNICK: Sure.

00:20:23.010 --> 00:20:24.230
JOHN LUTHER: --and C++.

00:20:24.230 --> 00:20:29.730
So Python bindings, and PHP, and
Pearl, or C#, we'd like to

00:20:29.730 --> 00:20:33.940
have language bindings to make
this stuff easy for anybody to

00:20:33.940 --> 00:20:36.620
just take the SDK and write any
kind of app they want and

00:20:36.620 --> 00:20:39.710
have the languages and
interfaces that they're

00:20:39.710 --> 00:20:43.900
familiar with, not a steep
learning curve.

00:20:43.900 --> 00:20:47.660
And it's sort of like the sky's
the limit for what you

00:20:47.660 --> 00:20:48.800
can do with that SDK.

00:20:48.800 --> 00:20:51.065
And then again, we don't
charge money for it.

00:20:51.065 --> 00:20:51.715
JEFF POSNICK: Sure.

00:20:51.715 --> 00:20:52.660
JOHN LUTHER: Anybody
can use it.

00:20:52.660 --> 00:20:56.350
Not only use it, but if they
find a bug or improve it then

00:20:56.350 --> 00:20:58.440
just send those changes
upstream and we're

00:20:58.440 --> 00:21:00.830
happy to take them.

00:21:00.830 --> 00:21:01.030
JEFF POSNICK: OK.

00:21:01.030 --> 00:21:04.400
So let's say I do want to go
out there and find some

00:21:04.400 --> 00:21:06.140
resources for how I
could get started

00:21:06.140 --> 00:21:07.870
with doing some encoding.

00:21:07.870 --> 00:21:10.250
I assume there is a canonical
website that

00:21:10.250 --> 00:21:11.360
folks should go to.

00:21:11.360 --> 00:21:12.530
JOHN LUTHER: There is.

00:21:12.530 --> 00:21:14.150
JEFF POSNICK: So maybe we can
pull that up on the screen.

00:21:14.150 --> 00:21:17.390
JOHN LUTHER: This is the
WebM project site.

00:21:17.390 --> 00:21:22.280
It's everything you need to know
about WebM, VP8, also the

00:21:22.280 --> 00:21:25.670
experimental codec
work we're doing.

00:21:25.670 --> 00:21:26.710
It's all here.

00:21:26.710 --> 00:21:27.790
JEFF POSNICK: And it's
webmproject.org?

00:21:27.790 --> 00:21:29.630
JOHN LUTHER: Yeah.

00:21:29.630 --> 00:21:36.540
So developers, this is sort of
more software developers and

00:21:36.540 --> 00:21:39.180
web developers as well, but this
is more for maybe people

00:21:39.180 --> 00:21:41.080
who want to contribute
to the codec.

00:21:41.080 --> 00:21:44.950
The tools section is I think
where this audience might find

00:21:44.950 --> 00:21:45.890
a lot of useful stuff.

00:21:45.890 --> 00:21:51.620
There's a lot of open source
tools that support WebM now.

00:21:51.620 --> 00:21:54.600
JEFF POSNICK: It seems like
FFmpeg might be the entry

00:21:54.600 --> 00:21:56.050
point that a lot
of people use.

00:21:56.050 --> 00:21:56.440
JOHN LUTHER: Yup.

00:21:56.440 --> 00:22:01.740
And FFmpeg has been really
great for WebM because it

00:22:01.740 --> 00:22:04.990
underlies so much software now
for doing video processing.

00:22:04.990 --> 00:22:08.520
Not only open-source stuff, but
a lot of the cloud-based

00:22:08.520 --> 00:22:12.110
services, a lot of video sites
use it behind the scenes now.

00:22:12.110 --> 00:22:16.850
So these are just some of the
commercial tools, the

00:22:16.850 --> 00:22:18.340
cloud-based things.

00:22:18.340 --> 00:22:23.890
So if you did want to get
adventurous and start using

00:22:23.890 --> 00:22:27.430
FFmpeg to create WebM files,
what I've done here-- this is

00:22:27.430 --> 00:22:32.620
just a very simple and quick
demo of how you would do that.

00:22:32.620 --> 00:22:38.450
So let's find like this one.

00:22:38.450 --> 00:22:41.940
So this is just a pretty simple
command to create a

00:22:41.940 --> 00:22:46.870
WebM file from a .MoveFile I
have that is a H.264 file.

00:22:46.870 --> 00:22:47.510
JEFF POSNICK: OK.

00:22:47.510 --> 00:22:49.080
JOHN LUTHER: So what
this is doing

00:22:49.080 --> 00:22:51.330
is the quality settings--

00:22:51.330 --> 00:22:54.880
there's sort of different
modes in VP8 for

00:22:54.880 --> 00:22:56.170
encoding the video.

00:22:56.170 --> 00:22:58.290
There's real-time, good, best.

00:22:58.290 --> 00:23:00.710
Good is in most cases, even
though it's a little bit

00:23:00.710 --> 00:23:03.340
non-intuitive, good is
usually what you want

00:23:03.340 --> 00:23:04.690
because it's faster.

00:23:04.690 --> 00:23:09.330
Best is designed for squeezing
the absolute best out of it,

00:23:09.330 --> 00:23:10.830
but it's going to take a
lot more processing.

00:23:10.830 --> 00:23:12.410
JEFF POSNICK: Maybe create an
[INAUDIBLE] that's like really

00:23:12.410 --> 00:23:14.380
good just to let people know
that this is really good.

00:23:14.380 --> 00:23:15.190
And best like--

00:23:15.190 --> 00:23:15.690
JOHN LUTHER: Best is--

00:23:15.690 --> 00:23:18.590
JEFF POSNICK: --a little insane,
a little too much.

00:23:18.590 --> 00:23:20.750
JOHN LUTHER: It should
be, like, wait a long

00:23:20.750 --> 00:23:22.350
time, not so long.

00:23:22.350 --> 00:23:23.620
JEFF POSNICK: Yeah.

00:23:23.620 --> 00:23:26.170
JOHN LUTHER: But for most use
cases, especially for web

00:23:26.170 --> 00:23:32.810
video, the good setting is
usually where you want to be.

00:23:32.810 --> 00:23:37.590
You can control in the encoder
how much CPU the encode takes.

00:23:37.590 --> 00:23:40.030
You can set a lower priority
if you want.

00:23:40.030 --> 00:23:42.510
It'll take longer, but if you
want to then be doing other

00:23:42.510 --> 00:23:43.580
stuff on that machine--

00:23:43.580 --> 00:23:46.350
JEFF POSNICK: For instance, if
you are including this as part

00:23:46.350 --> 00:23:48.660
of a game or some sort of
application where you're

00:23:48.660 --> 00:23:50.380
capturing video and
then encoding it.

00:23:50.380 --> 00:23:51.130
That [INAUDIBLE].

00:23:51.130 --> 00:23:52.770
JOHN LUTHER: Yeah, that's
a perfect example.

00:23:52.770 --> 00:23:56.430
In gameplay you would want to be
setting this to real-time.

00:23:56.430 --> 00:24:00.380
Because whether you're writing
it to disc or sending it up to

00:24:00.380 --> 00:24:02.250
YouTube of some more of a stream
you want to be doing

00:24:02.250 --> 00:24:03.240
that encoding in real-time.

00:24:03.240 --> 00:24:05.000
And VP8's a very good
real-time--

00:24:05.000 --> 00:24:07.130
JEFF POSNICK: I was actually a
little confused when we were

00:24:07.130 --> 00:24:08.320
talking before and you were
saying real-time.

00:24:08.320 --> 00:24:11.790
So real-time does not mean
you're going to get the

00:24:11.790 --> 00:24:14.070
encoding done as quick
as possible.

00:24:14.070 --> 00:24:15.460
Sorry, it does mean that it's
going to be as quick as

00:24:15.460 --> 00:24:18.760
possible, but it's not
necessarily as high a quality

00:24:18.760 --> 00:24:21.610
as you might get with the best
setting or even the good.

00:24:21.610 --> 00:24:22.160
JOHN LUTHER: Yeah, right.

00:24:22.160 --> 00:24:23.150
It's not--

00:24:23.150 --> 00:24:24.380
JEFF POSNICK: It's for scenarios
where getting the

00:24:24.380 --> 00:24:27.670
real-time transcoding done is
the most important thing.

00:24:27.670 --> 00:24:28.410
JOHN LUTHER: Yes.

00:24:28.410 --> 00:24:29.780
And that's why it's
called real-time,

00:24:29.780 --> 00:24:30.820
it's not called live.

00:24:30.820 --> 00:24:31.570
JEFF POSNICK: OK.

00:24:31.570 --> 00:24:31.995
JOHN LUTHER: That's the
other distinction.

00:24:31.995 --> 00:24:33.220
A lot of people say, well,
that's the live mode.

00:24:33.220 --> 00:24:34.340
Well, it's not really.

00:24:34.340 --> 00:24:38.080
That's the one that will be
encoding stuff in real-time

00:24:38.080 --> 00:24:39.840
even if you're writing it
to a disk for later.

00:24:39.840 --> 00:24:42.370
But if you want to be encoding
stuff as it's happening

00:24:42.370 --> 00:24:45.090
without having like a gigantic
buffer of gameplay that you

00:24:45.090 --> 00:24:46.260
then have to do--

00:24:46.260 --> 00:24:47.200
JEFF POSNICK: Ok, great.

00:24:47.200 --> 00:24:47.560
JOHN LUTHER: So, yeah.

00:24:47.560 --> 00:24:49.736
That's pretty much the
use case for it.

00:24:49.736 --> 00:24:50.590
JEFF POSNICK: OK.

00:24:50.590 --> 00:24:53.480
JOHN LUTHER: So then this
command just scales.

00:24:53.480 --> 00:24:57.300
There are some settings here
for setting the bit rate.

00:24:57.300 --> 00:25:00.910
And then this bit rate
threshold here, BT.

00:25:00.910 --> 00:25:03.880
This is essentially saying
because this is a variable,

00:25:03.880 --> 00:25:08.270
bit rate and code, that
easier sections of--

00:25:08.270 --> 00:25:12.710
if there's a lot of static areas
in the video, you don't

00:25:12.710 --> 00:25:14.870
want to encode those again,
it's redundant.

00:25:14.870 --> 00:25:16.625
You just carry them over
from frame to frame.

00:25:16.625 --> 00:25:18.660
But in other harder sections
you want to throw

00:25:18.660 --> 00:25:19.490
more bits at those.

00:25:19.490 --> 00:25:22.280
This just says, OK, I don't want
you to ever go over twice

00:25:22.280 --> 00:25:24.730
the target bit rate because you
don't want gigantic spikes

00:25:24.730 --> 00:25:25.770
in the VBR.

00:25:25.770 --> 00:25:26.180
JEFF POSNICK: Gotchya.

00:25:26.180 --> 00:25:27.330
JOHN LUTHER: That's really
all that is.

00:25:27.330 --> 00:25:27.460
JEFF POSNICK: OK.

00:25:27.460 --> 00:25:28.540
JOHN LUTHER: And it's
going to scale it.

00:25:28.540 --> 00:25:30.880
I'm going to dedicate
four threads to

00:25:30.880 --> 00:25:33.800
this, processor cores.

00:25:33.800 --> 00:25:36.660
And we're going to do
this in two passes.

00:25:36.660 --> 00:25:37.840
First pass.

00:25:37.840 --> 00:25:40.070
And then this one below is
pretty much the same stuff.

00:25:40.070 --> 00:25:42.680
I don't actually need
all these up front.

00:25:42.680 --> 00:25:44.500
So the second pass is the
one that's actually

00:25:44.500 --> 00:25:44.990
going to do the work.

00:25:44.990 --> 00:25:45.550
JEFF POSNICK: OK.

00:25:45.550 --> 00:25:49.900
JOHN LUTHER: First pass really
runs through very fast.

00:25:49.900 --> 00:25:52.650
It says, OK, get a handle on
what's going on here and

00:25:52.650 --> 00:25:54.960
gather some statistics and look
for where there might be

00:25:54.960 --> 00:25:56.790
redundancies just to get
a kind of overview.

00:25:56.790 --> 00:26:00.250
And then the second pass is
where the actual real encoding

00:26:00.250 --> 00:26:01.730
and compression is
going to happen.

00:26:01.730 --> 00:26:02.390
JEFF POSNICK: Oh, that's
interesting.

00:26:02.390 --> 00:26:04.305
I didn't realize
that that was--

00:26:04.305 --> 00:26:06.430
You have two sets of double
ampersands there.

00:26:06.430 --> 00:26:08.130
I don't know if that's going
to mess up your--

00:26:08.130 --> 00:26:08.930
JOHN LUTHER: Oh, thank you.

00:26:08.930 --> 00:26:09.580
Good eye, good eye.

00:26:09.580 --> 00:26:09.680
JEFF POSNICK: Yeah.

00:26:09.680 --> 00:26:17.020
JOHN LUTHER: All right, so for
the SD case we'll just paste

00:26:17.020 --> 00:26:18.330
that in there.

00:26:18.330 --> 00:26:23.780
And this maybe to some people
looks very scary.

00:26:23.780 --> 00:26:28.160
What is going on here, all
this command line stuff?

00:26:28.160 --> 00:26:30.270
This FFmpeg instance--

00:26:30.270 --> 00:26:31.000
this is a Mac.

00:26:31.000 --> 00:26:34.300
I installed this from MacPorts
in five minutes.

00:26:34.300 --> 00:26:36.040
JEFF POSNICK: Sure.

00:26:36.040 --> 00:26:38.340
JOHN LUTHER: Sudo port install,
FFmpeg, and VP8'Ss in

00:26:38.340 --> 00:26:40.310
there, WebM muxer's in there.

00:26:40.310 --> 00:26:43.530
All that stuff just comes right
down, same for Linux.

00:26:43.530 --> 00:26:46.040
Windows, a little
bit trickier.

00:26:46.040 --> 00:26:48.120
I don't have as much experience

00:26:48.120 --> 00:26:49.370
doing FFmpeg on Windows.

00:26:49.370 --> 00:26:51.880
But for Mac and Linux
it's just a snap.

00:26:51.880 --> 00:26:52.290
JEFF POSNICK: OK.

00:26:52.290 --> 00:26:54.870
And, again, this use case is for
people that maybe want to

00:26:54.870 --> 00:26:58.550
run their own encoding from
the command line.

00:26:58.550 --> 00:27:01.370
But if you're writing an
application there are bindings

00:27:01.370 --> 00:27:02.870
and [INAUDIBLE]

00:27:02.870 --> 00:27:04.320
say things that you don't use.

00:27:04.320 --> 00:27:05.430
JOHN LUTHER: Yeah, FFmpeg--

00:27:05.430 --> 00:27:08.730
I mean, you could
do that with it.

00:27:08.730 --> 00:27:09.640
It's more of a--

00:27:09.640 --> 00:27:12.195
if you can run it on a server
from the command line, you

00:27:12.195 --> 00:27:13.990
could batch these things.

00:27:13.990 --> 00:27:14.930
But, yeah, you're right.

00:27:14.930 --> 00:27:17.400
If you were developing more of
a lower level application you

00:27:17.400 --> 00:27:20.530
might want to just take libvpx
library, the libvorbis

00:27:20.530 --> 00:27:22.710
library, and then we have
another library for

00:27:22.710 --> 00:27:24.560
the muxer, the WebM.

00:27:24.560 --> 00:27:27.470
In some cases people aren't
muxing them, they're actually

00:27:27.470 --> 00:27:28.800
keeping the stream separate.

00:27:28.800 --> 00:27:29.510
JEFF POSNICK: Interesting.

00:27:29.510 --> 00:27:31.590
JOHN LUTHER: Yeah, that's
another whole other

00:27:31.590 --> 00:27:32.270
discussion.

00:27:32.270 --> 00:27:33.701
So that's done.

00:27:33.701 --> 00:27:36.300
JEFF POSNICK: OK.

00:27:36.300 --> 00:27:42.920
JOHN LUTHER: And you can see
here, right here, this is just

00:27:42.920 --> 00:27:44.995
a test video that was created.

00:27:44.995 --> 00:27:48.125
The guys at Elemental, there
were a lot of these MPEG test

00:27:48.125 --> 00:27:50.880
clips they recreated
them at 4K.

00:27:50.880 --> 00:27:52.590
So that's it.

00:27:52.590 --> 00:27:53.710
JEFF POSNICK: There you go.

00:27:53.710 --> 00:27:56.630
I mean, it's a little
unfortunate that the end

00:27:56.630 --> 00:27:58.200
result here is just--

00:27:58.200 --> 00:28:01.160
it's like when you
see a TV screen--

00:28:01.160 --> 00:28:01.440
JOHN LUTHER: Right.

00:28:01.440 --> 00:28:03.670
JEFF POSNICK: --and the
commercial on TV it's like,

00:28:03.670 --> 00:28:06.320
OK, well this doesn't really
tell you what the actual video

00:28:06.320 --> 00:28:08.425
quality is as I'm watching
it on my TV.

00:28:08.425 --> 00:28:11.210
So you're watching that as
part of a video stream.

00:28:11.210 --> 00:28:13.791
JOHN LUTHER: It's hard
especially when I go to a lot

00:28:13.791 --> 00:28:16.160
of shows and do give
presentations and it's on a

00:28:16.160 --> 00:28:18.160
gigantic projector.

00:28:18.160 --> 00:28:21.100
Yeah, people are like
OK, whatever.

00:28:21.100 --> 00:28:22.570
And it's also like,
look it's done.

00:28:22.570 --> 00:28:24.510
It's like, well, yeah
it made a video.

00:28:24.510 --> 00:28:24.610
OK.

00:28:24.610 --> 00:28:25.910
JEFF POSNICK: Yes.

00:28:25.910 --> 00:28:27.640
But try it out yourself
I guess.

00:28:27.640 --> 00:28:30.190
JOHN LUTHER: Yeah, definitely
try it yourself.

00:28:30.190 --> 00:28:32.326
Write to me or to us.

00:28:32.326 --> 00:28:34.010
I can give you my settings.

00:28:34.010 --> 00:28:36.390
There are some WebM
presets in FFmpeg.

00:28:36.390 --> 00:28:36.950
JEFF POSNICK: Sure.

00:28:36.950 --> 00:28:37.870
JOHN LUTHER: We don't have time
to go through that, but

00:28:37.870 --> 00:28:41.750
that's also easy to do.

00:28:41.750 --> 00:28:46.720
But I'm very lucky to do what
I do, because I get to mess

00:28:46.720 --> 00:28:49.060
around with this stuff.

00:28:49.060 --> 00:28:51.230
Who wouldn't want to watch
TV for a living?

00:28:51.230 --> 00:28:52.885
Well, maybe I don't watch TV.

00:28:52.885 --> 00:28:54.100
But to get to watch--

00:28:54.100 --> 00:28:54.670
JEFF POSNICK: I watch video.

00:28:54.670 --> 00:28:56.640
I always have an excuse to
watch YouTube videos.

00:28:56.640 --> 00:28:57.220
JOHN LUTHER: That's true.

00:28:57.220 --> 00:28:57.440
I'm testing.

00:28:57.440 --> 00:28:58.610
JEFF POSNICK: I know exactly
how you feel.

00:28:58.610 --> 00:29:00.570
I'm debugging.

00:29:00.570 --> 00:29:01.090
JOHN LUTHER: Exactly.

00:29:01.090 --> 00:29:02.660
JEFF POSNICK: Exactly.

00:29:02.660 --> 00:29:03.640
So OK, cool.

00:29:03.640 --> 00:29:05.450
So that's another use case
we've gone through.

00:29:05.450 --> 00:29:08.600
Let's it say a completely
different use case.

00:29:08.600 --> 00:29:11.050
I'm like a hardware
entertainment device

00:29:11.050 --> 00:29:14.240
manufacturer and I want to make
sure my device has good

00:29:14.240 --> 00:29:20.270
support for WebM, presumably
decoding, maybe encoding.

00:29:20.270 --> 00:29:21.750
What are some resources
that are available?

00:29:21.750 --> 00:29:23.490
JOHN LUTHER: Sure.

00:29:23.490 --> 00:29:26.380
In most cases for something like
a consumer electronics,

00:29:26.380 --> 00:29:31.160
that would be primarily a
decoding use case though, we

00:29:31.160 --> 00:29:34.900
do have WebBPX ported to ARM.

00:29:34.900 --> 00:29:36.250
So there's the software.

00:29:36.250 --> 00:29:37.990
Like I said, it's an Android.

00:29:37.990 --> 00:29:41.070
There's also now what I was
mentioning earlier about these

00:29:41.070 --> 00:29:41.940
things taking time.

00:29:41.940 --> 00:29:44.590
And we're just sort of coming
over the crest of this, but

00:29:44.590 --> 00:29:48.010
we're now getting to, and we
worked really hard on this, is

00:29:48.010 --> 00:29:50.240
having a lot of hardware
companies, people who make the

00:29:50.240 --> 00:29:54.050
actual chips that go into
devices, put VP8 decoding on

00:29:54.050 --> 00:29:55.370
those chips in hardware.

00:29:55.370 --> 00:29:56.020
JEFF POSNICK: Great.

00:29:56.020 --> 00:30:02.160
JOHN LUTHER: Having that stuff
burned in silicon is much more

00:30:02.160 --> 00:30:03.670
efficient then software
just because

00:30:03.670 --> 00:30:04.965
there's not as much overhead.

00:30:04.965 --> 00:30:08.200
It uses far less battery
power for devices.

00:30:08.200 --> 00:30:09.620
So it's cool.

00:30:09.620 --> 00:30:14.130
I mean, we're now seeing VP8
silicon coming from Samsung,

00:30:14.130 --> 00:30:16.170
Qualcomm, Broadcom.

00:30:16.170 --> 00:30:19.940
A lot of these major
semiconductor makers are

00:30:19.940 --> 00:30:21.580
rolling this stuff out.

00:30:21.580 --> 00:30:25.210
We also as part of our project
have an actual hardware team

00:30:25.210 --> 00:30:29.930
and their job is to design
these codecs in a sort of

00:30:29.930 --> 00:30:33.020
middle tier language.

00:30:33.020 --> 00:30:35.810
Verilog, RTL, these are very--

00:30:35.810 --> 00:30:38.990
these are not the kind of things
you guys I hope maybe

00:30:38.990 --> 00:30:39.970
don't have to deal with.

00:30:39.970 --> 00:30:40.720
But these guys--

00:30:40.720 --> 00:30:42.250
JEFF POSNICK: Right, join
us next week for Verilog

00:30:42.250 --> 00:30:43.030
developer's log live.

00:30:43.030 --> 00:30:44.690
JOHN LUTHER: For a Verilog--

00:30:44.690 --> 00:30:45.440
it's kind of cool.

00:30:45.440 --> 00:30:47.353
These guys are way
up in Finland,

00:30:47.353 --> 00:30:49.240
like in northern Finland.

00:30:49.240 --> 00:30:52.690
And they're like little wizards
up there doing all

00:30:52.690 --> 00:30:53.530
this magic stuff.

00:30:53.530 --> 00:30:55.315
I have no idea how it works.

00:30:55.315 --> 00:30:55.640
JEFF POSNICK: Yeah.

00:30:55.640 --> 00:30:58.110
I think for software people,
the folks who deal with

00:30:58.110 --> 00:30:59.680
hardware it's always just--

00:30:59.680 --> 00:31:00.610
JOHN LUTHER: It's a
whole other world.

00:31:00.610 --> 00:31:01.800
JEFF POSNICK: Yeah, you're
kind of blown away.

00:31:01.800 --> 00:31:04.210
JOHN LUTHER: So if you are
somebody who said, well, I've

00:31:04.210 --> 00:31:05.110
looked at the offerings--

00:31:05.110 --> 00:31:11.950
and on our site there's a page
where we list all the--

00:31:11.950 --> 00:31:12.910
JEFF POSNICK: [INAUDIBLE]

00:31:12.910 --> 00:31:13.790
bring that up.

00:31:13.790 --> 00:31:15.130
JOHN LUTHER: We can give
that link later.

00:31:15.130 --> 00:31:17.190
I don't right away have it.

00:31:17.190 --> 00:31:19.940
JEFF POSNICK: And it's
at webmproject.org.

00:31:19.940 --> 00:31:21.613
JOHN LUTHER: Yeah,
webmproject.org.

00:31:21.613 --> 00:31:24.640
That's it right here
under hardware.

00:31:24.640 --> 00:31:28.160
Also there's a Wiki page that
lists like all the chips now

00:31:28.160 --> 00:31:30.230
that are shipping with VP8
in them and so forth.

00:31:30.230 --> 00:31:32.950
So anyway, these guys take these
designs and if you were

00:31:32.950 --> 00:31:37.350
somebody who wanted to make your
own chip with VP8 in it,

00:31:37.350 --> 00:31:40.570
encoding or decoding, we would
license those designs to you.

00:31:40.570 --> 00:31:44.600
And then you could go to an
ASIC manufacturer and make

00:31:44.600 --> 00:31:45.180
your own chip.

00:31:45.180 --> 00:31:48.160
And a lot of people have
done that and they're

00:31:48.160 --> 00:31:49.890
listed on the site.

00:31:49.890 --> 00:31:51.360
Some of the companies have
written their own

00:31:51.360 --> 00:31:54.270
implementations, which, again,
that's fine with us.

00:31:54.270 --> 00:31:54.420
JEFF POSNICK: Sure.

00:31:54.420 --> 00:31:57.350
JOHN LUTHER: It's what the
license is all about.

00:31:57.350 --> 00:32:00.010
So, yeah, if device people--

00:32:00.010 --> 00:32:03.910
there's a whole ecosystem
for that that's

00:32:03.910 --> 00:32:05.360
finally growing up.

00:32:05.360 --> 00:32:08.660
And this is what we knew would
take time and we're happy that

00:32:08.660 --> 00:32:10.080
it's all starting to
come together.

00:32:10.080 --> 00:32:11.940
JEFF POSNICK: OK, awesome.

00:32:11.940 --> 00:32:15.170
So I definitely do not want
you to reveal anything

00:32:15.170 --> 00:32:18.420
confidential or anything you
should not be talking about,

00:32:18.420 --> 00:32:21.520
but what kind of things are
you working on now in the

00:32:21.520 --> 00:32:25.020
whole codec space?

00:32:25.020 --> 00:32:26.980
What are some things that might
be in the pipeline that

00:32:26.980 --> 00:32:28.960
we should look forward to?

00:32:28.960 --> 00:32:31.330
JOHN LUTHER: Well, one of the
things that is different now

00:32:31.330 --> 00:32:35.680
is when we were On2 we were a
proprietary company, we did

00:32:35.680 --> 00:32:38.270
this stuff to sell.

00:32:38.270 --> 00:32:40.190
Now, it's an open project,
everything we

00:32:40.190 --> 00:32:40.940
do is in the open.

00:32:40.940 --> 00:32:46.770
So VP9, which we've been working
on for a while and is

00:32:46.770 --> 00:32:48.950
starting to come together and
we're seeing some pretty

00:32:48.950 --> 00:32:49.690
amazing results.

00:32:49.690 --> 00:32:51.190
That's all been done
in the open.

00:32:51.190 --> 00:32:51.900
JEFF POSNICK: OK.

00:32:51.900 --> 00:32:55.150
JOHN LUTHER: I mean, in this
experimental branch that I

00:32:55.150 --> 00:33:01.010
have talked about is where
starting from VP8--

00:33:01.010 --> 00:33:04.270
and now we have more resources
with Google, more engineers to

00:33:04.270 --> 00:33:05.100
put on this stuff.

00:33:05.100 --> 00:33:09.930
They've put some pretty amazing
stuff into VP9.

00:33:09.930 --> 00:33:12.530
I don't know how much people
want to know about things like

00:33:12.530 --> 00:33:17.800
superblocks and macroblocks and
vector prediction and all

00:33:17.800 --> 00:33:20.000
this kind of-- there's a
lot of very cool stuff.

00:33:20.000 --> 00:33:22.340
JEFF POSNICK: Well, I'm
personally interested and I

00:33:22.340 --> 00:33:23.360
happen to be here with
you right now.

00:33:23.360 --> 00:33:23.900
So--

00:33:23.900 --> 00:33:24.400
JOHN LUTHER: OK.

00:33:24.400 --> 00:33:25.600
JEFF POSNICK: ---whatever
they [INAUDIBLE].

00:33:25.600 --> 00:33:27.380
JOHN LUTHER: You guys just
hit mute for a minute.

00:33:27.380 --> 00:33:31.640
JEFF POSNICK: No, so I guess
I'm always curious, like,

00:33:31.640 --> 00:33:34.860
where are the areas that
we can still improve?

00:33:34.860 --> 00:33:37.270
At this point after spending
decades, I know there are

00:33:37.270 --> 00:33:40.410
people who've spent decades
looking at these thing, what

00:33:40.410 --> 00:33:41.390
areas are right for
breakthroughs?

00:33:41.390 --> 00:33:44.900
Is it just a question of like
throwing more hardware speed

00:33:44.900 --> 00:33:47.010
at things and be able to do
things you couldn't do before,

00:33:47.010 --> 00:33:49.210
or other algorithms?

00:33:49.210 --> 00:33:50.440
JOHN LUTHER: More hardware
never hurts.

00:33:50.440 --> 00:33:55.560
But having been in this while--
and you do hear it

00:33:55.560 --> 00:33:57.030
from people, well, at this
point it's all just

00:33:57.030 --> 00:33:58.420
incremental improvements.

00:34:00.940 --> 00:34:03.520
Again, our kind of charter is to
sort of reject that kind of

00:34:03.520 --> 00:34:09.330
thinking and do whatever,
wild stuff.

00:34:09.330 --> 00:34:09.670
JEFF POSNICK: Sure.

00:34:09.670 --> 00:34:11.530
JOHN LUTHER: There's a lot of
things that we want to do in

00:34:11.530 --> 00:34:15.810
the future that do get away
from the more traditional

00:34:15.810 --> 00:34:18.244
what's called a DCT-based
codec, you

00:34:18.244 --> 00:34:19.275
know, discrete cosine.

00:34:19.275 --> 00:34:22.570
That's sort of the core
of how it's done.

00:34:22.570 --> 00:34:27.060
You know, we kind of challenge
ourselves to do the big

00:34:27.060 --> 00:34:29.659
thinking about that stuff and
not just a couple percent

00:34:29.659 --> 00:34:31.040
here, a couple percent there.

00:34:31.040 --> 00:34:36.060
In VP9 we're seeing huge, huge
improvements over VP8.

00:34:36.060 --> 00:34:40.960
I mean, it's a gigantic leap
forward in terms of the

00:34:40.960 --> 00:34:45.290
efficiency of the codec and what
it's capable of doing.

00:34:45.290 --> 00:34:49.800
And a lot of that has been
just hard research--

00:34:49.800 --> 00:34:50.120
JEFF POSNICK: Sure.

00:34:50.120 --> 00:34:55.699
JOHN LUTHER: --and a lot of
very smart people, not me,

00:34:55.699 --> 00:34:59.050
people a lot smarter than me
working on the code and the

00:34:59.050 --> 00:34:59.670
algorithms.

00:34:59.670 --> 00:35:02.001
JEFF POSNICK: OK, fair enough.

00:35:02.001 --> 00:35:02.490
Cool.

00:35:02.490 --> 00:35:03.710
All right, thank you.

00:35:03.710 --> 00:35:07.260
So I'm just checking out real
quick the Google Moderator

00:35:07.260 --> 00:35:08.050
link that we have set up.

00:35:08.050 --> 00:35:10.680
Unfortunately we do not have any
questions right now from

00:35:10.680 --> 00:35:12.060
the external audience.

00:35:12.060 --> 00:35:12.160
JOHN LUTHER: Oh, come
on, you guys.

00:35:12.160 --> 00:35:15.140
JEFF POSNICK: So hopefully I was
able to ask on everyone's

00:35:15.140 --> 00:35:17.230
behalf all the questions that
people wanted to know.

00:35:17.230 --> 00:35:20.670
JOHN LUTHER: And if there's
something they want to ask,

00:35:20.670 --> 00:35:24.330
johnluther@webmproject.org or
jluther@google.com, either one

00:35:24.330 --> 00:35:25.200
will get to me.

00:35:25.200 --> 00:35:25.600
JEFF POSNICK: That's great.

00:35:25.600 --> 00:35:27.280
JOHN LUTHER: We also
have WebM-discuss.

00:35:27.280 --> 00:35:29.580
There's a list of the mailing
lists on our site

00:35:29.580 --> 00:35:31.150
where people can--

00:35:31.150 --> 00:35:33.405
there's one for apps, one
for codec development.

00:35:33.405 --> 00:35:33.750
JEFF POSNICK: Sure.

00:35:33.750 --> 00:35:35.630
JOHN LUTHER: You can ask
questions there.

00:35:35.630 --> 00:35:38.390
We're always looking for
contributions to the project,

00:35:38.390 --> 00:35:41.270
code, documentation, whatever.

00:35:41.270 --> 00:35:44.830
Advocacy, anything people want
to do, everybody's welcome.

00:35:44.830 --> 00:35:45.120
JEFF POSNICK: Great.

00:35:45.120 --> 00:35:46.400
Good to know.

00:35:46.400 --> 00:35:47.630
All right.

00:35:47.630 --> 00:35:51.520
So I think that is about it for
our interview with John.

00:35:51.520 --> 00:35:53.950
I'm going put a quick plug at
the end of the show as we do

00:35:53.950 --> 00:35:57.540
on every show that Google's
Developer Relations team is

00:35:57.540 --> 00:36:01.880
hiring and
developers.google.com/jobs is

00:36:01.880 --> 00:36:05.590
the place to go, if you are
interested in doing what I do

00:36:05.590 --> 00:36:06.465
such as interviewing--

00:36:06.465 --> 00:36:06.890
JOHN LUTHER: I would
want to do that.

00:36:06.890 --> 00:36:08.840
JEFF POSNICK: --cool people on
top of all the other stuff

00:36:08.840 --> 00:36:10.290
that Developer Relations does.

00:36:10.290 --> 00:36:13.130
So check that out if
you're interested.

00:36:13.130 --> 00:36:15.740
And I just really want to thank
John again, it's been an

00:36:15.740 --> 00:36:16.150
awesome show.

00:36:16.150 --> 00:36:17.240
JOHN LUTHER: Thank you.

00:36:17.240 --> 00:36:18.190
No, I appreciate
the invitation.

00:36:18.190 --> 00:36:19.410
It was great.

00:36:19.410 --> 00:36:20.245
JEFF POSNICK: Very cool.

00:36:20.245 --> 00:36:20.620
OK.

00:36:20.620 --> 00:36:21.150
JOHN LUTHER: Thanks everybody.

00:36:21.150 --> 00:36:22.400
JEFF POSNICK: Bye everybody.

