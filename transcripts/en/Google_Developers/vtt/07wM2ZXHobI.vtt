WEBVTT
Kind: captions
Language: en

00:00:10.050 --> 00:00:10.840
ERIC LEICHTENSCHLAG:
Hello, everybody.

00:00:10.840 --> 00:00:13.000
My name is Eric Leichtenschlag,
from the AdMob

00:00:13.000 --> 00:00:15.580
SDK developer relations team
here at Google, and I'm here

00:00:15.580 --> 00:00:18.170
today to talk to you about
AdMob Mediation, and more

00:00:18.170 --> 00:00:21.230
specifically, custom events and
their use cases and how

00:00:21.230 --> 00:00:23.840
you can use them.

00:00:23.840 --> 00:00:25.570
So first off, you guys
might be wondering,

00:00:25.570 --> 00:00:27.480
what are custom events?

00:00:27.480 --> 00:00:30.740
A custom event is a mechanism
used to execute some custom

00:00:30.740 --> 00:00:34.330
code in your app that can serve
a view into the ad space

00:00:34.330 --> 00:00:38.000
instead of just showing an ad
from a normal ad network.

00:00:38.000 --> 00:00:42.110
This could be an ad from a
network that's not supported

00:00:42.110 --> 00:00:46.840
by Mediation or any other custom
view that you put in.

00:00:46.840 --> 00:00:48.790
So why would you use it?

00:00:48.790 --> 00:00:50.750
If you want to incorporate an
ad network that doesn't have

00:00:50.750 --> 00:00:53.560
an AdMob Mediation adapter, then
you could write your own

00:00:53.560 --> 00:00:58.270
custom event to serve that
network, and you can also show

00:00:58.270 --> 00:01:00.030
some custom view instead
of an ad.

00:01:02.610 --> 00:01:04.940
So let's walk through how you
can set up this custom event

00:01:04.940 --> 00:01:08.490
and write your own code to
serve this custom view.

00:01:08.490 --> 00:01:12.940
So the first thing you want to
do is, in your AdMob settings

00:01:12.940 --> 00:01:14.530
in your Mediation placement,
you'll want to

00:01:14.530 --> 00:01:15.920
add a custom event.

00:01:15.920 --> 00:01:18.540
And the custom event has
three properties--

00:01:18.540 --> 00:01:21.930
a label, a class name,
and a parameter.

00:01:21.930 --> 00:01:24.470
The label is just a name for
your custom event, so in this

00:01:24.470 --> 00:01:27.000
example, we called it
AdMobCustomEvent.

00:01:27.000 --> 00:01:30.800
The class name is your fully
qualified class path to the

00:01:30.800 --> 00:01:31.950
custom class you're
going to write.

00:01:31.950 --> 00:01:35.610
In this case it could be
your.package.CustomAd.

00:01:35.610 --> 00:01:39.100
And the parameter is just some
parameter that you will need

00:01:39.100 --> 00:01:42.880
in your app to make the request
or to get this ad or

00:01:42.880 --> 00:01:45.250
this custom view that
you want to show.

00:01:45.250 --> 00:01:47.350
We'll walk through some examples
later of how you

00:01:47.350 --> 00:01:50.070
would use this.

00:01:50.070 --> 00:01:52.510
And then in your app you would
create this class-- that

00:01:52.510 --> 00:01:55.120
your.package.CustomAd class--

00:01:55.120 --> 00:01:56.700
and that class would implement
the custom

00:01:56.700 --> 00:01:58.850
event banner interface.

00:01:58.850 --> 00:02:00.260
This interface has
two methods--

00:02:00.260 --> 00:02:03.420
request banner ad and
destroy method.

00:02:03.420 --> 00:02:06.500
The main one is request banner
ad, and in this method, you

00:02:06.500 --> 00:02:11.300
will take in a banner listener,
an activity, your

00:02:11.300 --> 00:02:14.565
label and serverParameter
defined on the server, the

00:02:14.565 --> 00:02:18.640
AdSize for the request, some
AdRequest parameters, and this

00:02:18.640 --> 00:02:21.050
extra object that you can pass
to your custom event from

00:02:21.050 --> 00:02:22.360
within your app.

00:02:22.360 --> 00:02:25.210
The main things to note here
are the custom event banner

00:02:25.210 --> 00:02:29.300
listener, you will use this to
send back notifications from

00:02:29.300 --> 00:02:31.380
the custom event to the
Mediation layer to let you

00:02:31.380 --> 00:02:34.880
know to tell Mediation that
you've got an ad or you

00:02:34.880 --> 00:02:36.130
didn't get an ad.

00:02:39.210 --> 00:02:43.100
So in addition to that request
banner ad method, you will

00:02:43.100 --> 00:02:48.820
also implement
CustomEventBannerListener, and

00:02:48.820 --> 00:02:51.550
you'll take that banner
listener, and you'll send

00:02:51.550 --> 00:02:54.210
these messages back, depending
on how your

00:02:54.210 --> 00:02:55.240
custom event operates.

00:02:55.240 --> 00:02:58.540
If you receive an ad or you
want to show a custom view

00:02:58.540 --> 00:03:01.560
into your ad space, you'll call
back with onReceivedAd

00:03:01.560 --> 00:03:03.410
and pass the view that
you want to show.

00:03:03.410 --> 00:03:05.880
Again, this could be an ad from
another network or custom

00:03:05.880 --> 00:03:07.540
view of your own.

00:03:07.540 --> 00:03:09.890
And if you don't want to return
an ad, you just call

00:03:09.890 --> 00:03:14.010
onFailedToReceiveAd, and AdMob
Mediation will just go to the

00:03:14.010 --> 00:03:17.220
next network and try to fetch an
ad from the next network in

00:03:17.220 --> 00:03:20.130
your Mediation placement.

00:03:20.130 --> 00:03:22.380
You can also invoke onClick
when your ad is clicked.

00:03:22.380 --> 00:03:26.730
This'll track clicks in the
AdMob Mediation reporting.

00:03:26.730 --> 00:03:29.040
You also might want to call
onPresentScreen or

00:03:29.040 --> 00:03:34.550
onDismissScreen if your ad or
custom view launches another

00:03:34.550 --> 00:03:39.450
screen and the app is no
longer in control.

00:03:39.450 --> 00:03:42.060
So that's it from planning
custom events.

00:03:42.060 --> 00:03:43.940
Now we're going to walk through
some sample custom

00:03:43.940 --> 00:03:46.800
events that you can implement.

00:03:46.800 --> 00:03:49.410
So the first example is
Percentage House Ads.

00:03:49.410 --> 00:03:53.350
This example will allow you to
request AdMob House Ads a

00:03:53.350 --> 00:03:55.170
percentage of the time.

00:03:55.170 --> 00:03:58.140
This is a little bit different
than the AdMob House Ads

00:03:58.140 --> 00:03:59.960
network that you can implement
with Mediation.

00:03:59.960 --> 00:04:05.590
A couple key differences are
when putting custom ads into

00:04:05.590 --> 00:04:09.190
your Mediation placement in the
back end, if you define

00:04:09.190 --> 00:04:12.900
your configuration with ECPM,
you might have house ads at

00:04:12.900 --> 00:04:16.040
the very back of the flow, and
if you have other networks

00:04:16.040 --> 00:04:17.406
that are filling every
request, you won't

00:04:17.406 --> 00:04:19.220
show any house ads.

00:04:19.220 --> 00:04:22.800
And if you put house ads as a
percentage and do percentage

00:04:22.800 --> 00:04:26.800
allocation, then you might get
house ads a percentage of the

00:04:26.800 --> 00:04:29.190
time, but then you cannot
configure other

00:04:29.190 --> 00:04:30.990
networks via ECPM.

00:04:30.990 --> 00:04:35.140
Maybe you have one network that
pays more per click, and

00:04:35.140 --> 00:04:37.700
you want to serve them every
time that you're not doing

00:04:37.700 --> 00:04:39.740
your house ads, but because
you're doing percentage

00:04:39.740 --> 00:04:42.190
placement, you don't really
have that much control.

00:04:42.190 --> 00:04:47.790
In addition, AdMob caches the
configuration from the server

00:04:47.790 --> 00:04:48.920
for 300 seconds.

00:04:48.920 --> 00:04:52.500
So if you get house ads first
from your percentage order,

00:04:52.500 --> 00:04:54.980
then you're going to serve house
ads for 300 seconds.

00:04:54.980 --> 00:04:56.950
And depending on what your
refresh is, you make it five

00:04:56.950 --> 00:05:00.746
or six house ads in a row, and
you might not want that.

00:05:00.746 --> 00:05:03.060
So this percentage house ads
custom event gives you a lot

00:05:03.060 --> 00:05:04.350
of flexibility.

00:05:04.350 --> 00:05:09.370
You can put it first in your
Mediation stack with ECPM, and

00:05:09.370 --> 00:05:13.380
the app can control how often it
would show that house ad or

00:05:13.380 --> 00:05:16.210
decide to fail, and I'll show
you how that happens.

00:05:16.210 --> 00:05:19.110
So the label for this custom
event example is just

00:05:19.110 --> 00:05:20.820
Percentage House Ads.

00:05:20.820 --> 00:05:22.366
The class I'm going to implement
is com.google.examp

00:05:22.366 --> 00:05:23.616
le.ads.customeve
nts.impl.PercentageHouseAds.

00:05:28.950 --> 00:05:31.610
And I'm passing in two
parameters here.

00:05:31.610 --> 00:05:33.730
Since the parameter is going to
be a string, I'm actually

00:05:33.730 --> 00:05:37.280
passing in some JSON, and I'm
going to have the app kind of

00:05:37.280 --> 00:05:40.640
decode that JSON and
get these values.

00:05:40.640 --> 00:05:43.700
It's going to be the publisher
ID, which is trafficked to

00:05:43.700 --> 00:05:47.380
house ads, and you can also set
this up in the AdMob UI,

00:05:47.380 --> 00:05:51.130
and as well as a percentage
for how often you want to

00:05:51.130 --> 00:05:54.720
serve this house ad.

00:05:54.720 --> 00:05:58.860
And below this, we have the
sample ECPM values for

00:05:58.860 --> 00:06:00.430
trafficking these ads.

00:06:00.430 --> 00:06:04.120
So in this example I have, I'm
going to have house ads valued

00:06:04.120 --> 00:06:05.440
higher than the AdMob network.

00:06:05.440 --> 00:06:07.500
So what's going to happen is,
I'm going to try House Ads

00:06:07.500 --> 00:06:09.330
first, and if that fails,
I'm going to go

00:06:09.330 --> 00:06:12.080
to the AdMob network.

00:06:12.080 --> 00:06:15.110
So now let's walk through how
you might implement this.

00:06:15.110 --> 00:06:18.580
So our custom class is going
to implement the request

00:06:18.580 --> 00:06:20.960
BannerAd method, and we're
going to store the

00:06:20.960 --> 00:06:23.150
bannerListener for
callbacks later.

00:06:23.150 --> 00:06:24.500
And the first thing we're
going to do is

00:06:24.500 --> 00:06:26.090
extract these values.

00:06:26.090 --> 00:06:30.400
I said we passed in JSON to that
server parameter, and so

00:06:30.400 --> 00:06:33.040
we're going to create a new JSON
object here and try to

00:06:33.040 --> 00:06:35.070
get the string publisher
ID and the

00:06:35.070 --> 00:06:38.270
percentage from this JSON.

00:06:38.270 --> 00:06:41.460
If we entered bad JSON, or for
whatever reason we can't parse

00:06:41.460 --> 00:06:45.270
it, it will just log a message
and quit, so this fails

00:06:45.270 --> 00:06:46.150
gracefully.

00:06:46.150 --> 00:06:48.430
If this happens, then we just
won't ever serve a house ad,

00:06:48.430 --> 00:06:51.400
and we'll just go on to
the AdMob network.

00:06:51.400 --> 00:06:54.250
So at this point, we'll have
our publisher ID as well as

00:06:54.250 --> 00:06:57.980
our percentage, and we'll
construct a random number.

00:06:57.980 --> 00:07:00.330
And if this random number is
higher than the percentage, we

00:07:00.330 --> 00:07:02.480
won't return the house ad, and
if it's less, we will return

00:07:02.480 --> 00:07:03.880
the house ad.

00:07:03.880 --> 00:07:08.350
So let's pick a random number
and say it's 53.

00:07:08.350 --> 00:07:11.310
Since 53 is greater than 50,
we're just not going to show

00:07:11.310 --> 00:07:12.780
the house ad.

00:07:12.780 --> 00:07:16.790
But if it's less than 50, then
we will show the house ad.

00:07:16.790 --> 00:07:20.560
So similarly, if you wanted to
do house ads 5% of the time,

00:07:20.560 --> 00:07:23.390
then if the random number was
greater than five, you just

00:07:23.390 --> 00:07:24.880
wouldn't show the house
ad, but if it was less

00:07:24.880 --> 00:07:27.300
than five, we would.

00:07:27.300 --> 00:07:30.150
And creating the house ad is
very simple-- we just creating

00:07:30.150 --> 00:07:34.090
a new AdView, pass it the
activity and the ad size and

00:07:34.090 --> 00:07:36.460
that publisher ID
from the server.

00:07:36.460 --> 00:07:39.950
We set the AdListener so we can
listen for when the house

00:07:39.950 --> 00:07:42.500
ad comes back, and we can
send that event back

00:07:42.500 --> 00:07:44.390
to mediation layer.

00:07:44.390 --> 00:07:46.050
And then we'll just load an
ad with the new AdRequest.

00:07:50.260 --> 00:07:57.500
And then in the callbacks, when
we get the house ad from

00:07:57.500 --> 00:08:00.150
AdMob, we'll set the
bannedListener and call

00:08:00.150 --> 00:08:02.920
onReceivedAd and pass
in the ad view.

00:08:02.920 --> 00:08:06.040
So this tells AdMob Mediation,
hey, I have this ad view with

00:08:06.040 --> 00:08:08.350
my house ad, please show it.

00:08:08.350 --> 00:08:11.630
If for some reason the request
to get the house ad fails,

00:08:11.630 --> 00:08:15.290
we'll just tell Mediation that
we failed to get that ad, and

00:08:15.290 --> 00:08:17.320
it'll move on to the
next network.

00:08:17.320 --> 00:08:21.240
And if we click that ad we'll
call the onClick methods so

00:08:21.240 --> 00:08:23.450
that it gets logged in mediation
reporting, and we'll

00:08:23.450 --> 00:08:28.140
also call onPresentScreen to
let the user know that we

00:08:28.140 --> 00:08:30.830
launched a view on top.

00:08:30.830 --> 00:08:34.690
These callbacks are important
because you'll, as the user,

00:08:34.690 --> 00:08:37.320
get them when implementing
your app.

00:08:37.320 --> 00:08:40.700
So this is custom event code is
separate from your normal

00:08:40.700 --> 00:08:44.150
AdMob declaration, but when you
declare your AdMob AdView,

00:08:44.150 --> 00:08:48.420
you might want to know when the
user clicks on an ad and

00:08:48.420 --> 00:08:51.970
presents a new screen, just so
you can maybe pause your game.

00:08:51.970 --> 00:08:54.050
So by having your custom
events send this

00:08:54.050 --> 00:08:59.070
onPresentScreen message,
Mediation will then tell you

00:08:59.070 --> 00:09:02.020
in your main app code that
hey, we're presenting

00:09:02.020 --> 00:09:06.590
something on the screen, and
you can listen for that and

00:09:06.590 --> 00:09:10.100
pause your game or something
you need to.

00:09:10.100 --> 00:09:13.680
So I'm going to run a little
bit of a demo here.

00:09:13.680 --> 00:09:17.120
So I have a couple examples on
this app and the first one

00:09:17.120 --> 00:09:19.100
here is percentage house ads.

00:09:19.100 --> 00:09:23.980
So in this example, here is this
Mediation ID that I have

00:09:23.980 --> 00:09:25.660
set up already on the server.

00:09:25.660 --> 00:09:28.550
And in this example, I'm
actually overriding what the

00:09:28.550 --> 00:09:31.580
server has with this own
percentage, so that I can just

00:09:31.580 --> 00:09:33.130
demonstrate it for you.

00:09:33.130 --> 00:09:38.310
Say I put in 50% here
and request ad.

00:09:38.310 --> 00:09:40.940
We're noticing that the random
number was 47, and it was less

00:09:40.940 --> 00:09:44.646
than 50, so we're going to get
this percentage house ad.

00:09:44.646 --> 00:09:49.550
But if I try it again, 87 this
time, is going to be greater

00:09:49.550 --> 00:09:52.480
than 50, so we're going to skip
the house ad and based on

00:09:52.480 --> 00:09:55.275
the configuration I mentioned
before, we go to AdMob for an

00:09:55.275 --> 00:09:58.090
ad, and look, we're getting
back an AdMob ad.

00:09:58.090 --> 00:10:00.270
So this is a great way for every
refresh to just check,

00:10:00.270 --> 00:10:02.510
hey, should I get a custom
events or not?

00:10:02.510 --> 00:10:05.260
And if I change this number to
something like five, maybe you

00:10:05.260 --> 00:10:08.380
only want to show house
ads 5% of the time,

00:10:08.380 --> 00:10:09.440
then there you go.

00:10:09.440 --> 00:10:12.140
92 is greater than 5, so
we'll skip house ad.

00:10:12.140 --> 00:10:14.640
So this is a great way to show
house ads a certain percentage

00:10:14.640 --> 00:10:15.570
of the time.

00:10:15.570 --> 00:10:18.180
As you notice, on every single
request, we're making this

00:10:18.180 --> 00:10:19.040
check again.

00:10:19.040 --> 00:10:21.703
So you're not going to get house
ads five or six times in

00:10:21.703 --> 00:10:26.730
a row like you would if you set
up house ads just via the

00:10:26.730 --> 00:10:28.120
AdMob house ads network already

00:10:28.120 --> 00:10:30.480
available within Mediation.

00:10:30.480 --> 00:10:32.390
You could get a different
ad every time.

00:10:32.390 --> 00:10:35.080
And you could set this
percentage however you want.

00:10:35.080 --> 00:10:37.720
When you do implement this
yourself, you probably will

00:10:37.720 --> 00:10:40.230
not have a percentage input.

00:10:40.230 --> 00:10:42.060
Again, you'll get the number
for the server.

00:10:42.060 --> 00:10:45.090
And this Mediation ID you'll
also have set up, and so

00:10:45.090 --> 00:10:46.500
you're app won't need to
have these inputs.

00:10:53.460 --> 00:10:59.180
So the next example is
just the demo again.

00:10:59.180 --> 00:11:02.640
We request an ad, so sometimes
we'll get percentage house

00:11:02.640 --> 00:11:07.460
ads, the next time we'll
get just an AdMob ad.

00:11:07.460 --> 00:11:10.270
So the next demon I have
is for birthday ads.

00:11:10.270 --> 00:11:13.350
So this is just a simple example
that says, hey, if

00:11:13.350 --> 00:11:15.460
it's your birthday, I'll just
show you this birthday image

00:11:15.460 --> 00:11:16.770
instead of showing you an ad.

00:11:16.770 --> 00:11:20.445
Maybe if your app gets user
information and knows what the

00:11:20.445 --> 00:11:23.090
user's birthday is, you might
kind of as a happy birthday

00:11:23.090 --> 00:11:25.950
thing say, I'm not going
to show you ads today.

00:11:25.950 --> 00:11:26.810
So we're going to just
go through an

00:11:26.810 --> 00:11:28.560
example of how that works.

00:11:28.560 --> 00:11:31.990
So this label is just Birthday
Image, and our class name is

00:11:31.990 --> 00:11:33.740
going to be BirthdayAds.

00:11:33.740 --> 00:11:36.940
And in this case, we don't need
a server parameter, just

00:11:36.940 --> 00:11:38.450
for how the implementation
works.

00:11:38.450 --> 00:11:40.670
So I just passed
in unused here.

00:11:40.670 --> 00:11:44.260
The apps not actually going
to use this parameter.

00:11:44.260 --> 00:11:46.540
And then for the ad network
set up, again I have the

00:11:46.540 --> 00:11:50.240
birthday image event set at a
higher ECPM than the AdMob

00:11:50.240 --> 00:11:51.830
network so that we'll
try to serve the

00:11:51.830 --> 00:11:54.980
birthday image first.

00:11:54.980 --> 00:11:56.450
So let's now walk through
the implementation

00:11:56.450 --> 00:11:59.280
for birthday ads.

00:11:59.280 --> 00:12:01.430
So one thing you want to do
for this example that's a

00:12:01.430 --> 00:12:04.190
little bit different than the
previous example was we're

00:12:04.190 --> 00:12:07.250
going to have to tell the custom
event what the user's

00:12:07.250 --> 00:12:08.460
birthday is.

00:12:08.460 --> 00:12:11.960
So in your main app code, when
you're creating your main ad

00:12:11.960 --> 00:12:15.710
request, you're going to want to
pass in an extra value, and

00:12:15.710 --> 00:12:18.820
this can be done through the
custom event extras class.

00:12:18.820 --> 00:12:22.200
And we're going to pass in
the user's birthday.

00:12:22.200 --> 00:12:25.720
So in this case, we're going
to get the birthday from a

00:12:25.720 --> 00:12:29.860
user input, and get the year,
month, and day and pass that

00:12:29.860 --> 00:12:33.250
birthday into the
network extras.

00:12:33.250 --> 00:12:36.330
Something important to note here
is this extra.addExtra

00:12:36.330 --> 00:12:38.510
line with the custom
event label.

00:12:38.510 --> 00:12:42.330
So when creating custom event
extras, it's just key value

00:12:42.330 --> 00:12:44.980
pairs, but the key has
to be the label

00:12:44.980 --> 00:12:46.650
of your custom event.

00:12:46.650 --> 00:12:48.750
So going back to this
birthday image--

00:12:48.750 --> 00:12:50.820
Birthday space Image--

00:12:50.820 --> 00:12:53.560
that's going to have to be the
key to this custom event

00:12:53.560 --> 00:12:54.640
extras that you add.

00:12:54.640 --> 00:12:57.870
And so I have it here defined as
a constant in my class, and

00:12:57.870 --> 00:13:00.600
the value is just going
to be the birthday.

00:13:00.600 --> 00:13:01.700
And we're going to
set the network

00:13:01.700 --> 00:13:03.470
lectures on that request.

00:13:03.470 --> 00:13:07.000
So what this'll do is when a
custom then comes in for

00:13:07.000 --> 00:13:10.940
Birthday Image, that birthday
will get passed and as the

00:13:10.940 --> 00:13:13.210
custom event extra, and
we'll go through

00:13:13.210 --> 00:13:14.460
that in the next slide.

00:13:16.570 --> 00:13:21.210
So in our requestBannerAd
method, the last parameter, if

00:13:21.210 --> 00:13:25.360
you remember from before, is the
object customEventExtra.

00:13:25.360 --> 00:13:28.840
And so, in this case, our class
is going to check the

00:13:28.840 --> 00:13:32.310
customEventExtra and try to cast
it as the calendar that

00:13:32.310 --> 00:13:33.650
we passed in.

00:13:33.650 --> 00:13:36.330
If we, for whatever reason,
can't cast as a calendar or

00:13:36.330 --> 00:13:38.810
couldn't pass the birthday or
couldn't find it, we're just

00:13:38.810 --> 00:13:40.780
going to fail to receive an ad,
and again we're just going

00:13:40.780 --> 00:13:44.400
to the next ad network
and request AdMob.

00:13:44.400 --> 00:13:46.250
But if we can parse the
birthday, then we're going to

00:13:46.250 --> 00:13:47.770
continue on.

00:13:47.770 --> 00:13:50.135
And again if there's some
kind of exception,

00:13:50.135 --> 00:13:51.663
it will just fail.

00:13:55.120 --> 00:13:56.620
So once we have this birthday.

00:13:56.620 --> 00:13:59.220
We can then check if it
actually is their

00:13:59.220 --> 00:14:00.130
birthday on that day.

00:14:00.130 --> 00:14:04.270
So we can just get the current
date with just creating a new

00:14:04.270 --> 00:14:07.520
Gregorian calendar, and just
check if the month and the day

00:14:07.520 --> 00:14:08.130
are the same.

00:14:08.130 --> 00:14:10.990
And if they are, then it's their
birthday, and we'll show

00:14:10.990 --> 00:14:13.670
them this custom birthday ad.

00:14:13.670 --> 00:14:17.230
So in this case, I have just an
image that's static in the

00:14:17.230 --> 00:14:19.160
app, it's in my resources.

00:14:19.160 --> 00:14:22.040
And just the example I have
happened to be an animated

00:14:22.040 --> 00:14:24.630
gif, so in this example we'll
just create a web view and

00:14:24.630 --> 00:14:30.160
load it with this URL from our
resources, birthday.gif, and

00:14:30.160 --> 00:14:34.180
we'll just call onRecievedAd
with that webview.

00:14:34.180 --> 00:14:36.300
If it's not your birthday,
will just, again, fail to

00:14:36.300 --> 00:14:38.150
receive the ad and just move
on to the next network.

00:14:40.830 --> 00:14:42.620
So this is what the
demo looks like.

00:14:42.620 --> 00:14:45.130
You can enter your birthday
here, and if it is your

00:14:45.130 --> 00:14:48.180
birthday then it'll show this
happy birthday image.

00:14:48.180 --> 00:14:50.780
And it's not clickable, so the
user can't accidentally click

00:14:50.780 --> 00:14:53.840
it and go to a new screen.

00:14:53.840 --> 00:14:55.840
And if it's not their birthday,
then we'll move on

00:14:55.840 --> 00:15:00.510
the next network and
get an AdMob ad.

00:15:00.510 --> 00:15:02.215
So we'll try walking through
this demo now.

00:15:08.510 --> 00:15:10.490
So again, this is the Mediation
placement ID I

00:15:10.490 --> 00:15:12.670
already set up on the server.

00:15:12.670 --> 00:15:14.130
If you want to set up
your own, then you

00:15:14.130 --> 00:15:16.360
could change this.

00:15:16.360 --> 00:15:20.620
And today happens to be April
29th, so if I request ad, I

00:15:20.620 --> 00:15:23.670
pass this into the user, and it
is their birthday, and so

00:15:23.670 --> 00:15:26.190
we get a happy birthday image.

00:15:26.190 --> 00:15:28.310
And so maybe in your own
implementation you just

00:15:28.310 --> 00:15:29.410
wouldn't show an ad at all.

00:15:29.410 --> 00:15:31.030
You would say, it's your
birthday, I'm not going to

00:15:31.030 --> 00:15:34.070
show you any ads, enjoy
an ad-free day.

00:15:34.070 --> 00:15:38.610
Maybe if we say our birthday
is March 29th, which is not

00:15:38.610 --> 00:15:41.240
today, then we'll realize that's
not your birthday,

00:15:41.240 --> 00:15:43.530
we'll go on to the next network,
and we'll get the

00:15:43.530 --> 00:15:44.780
AdMob ad again.

00:15:48.380 --> 00:15:50.860
So that's a cool little
example of how to give

00:15:50.860 --> 00:15:53.210
somebody a birthday treat and
just not show them ads that

00:15:53.210 --> 00:15:56.320
day and show them this birthday
image, and it's just

00:15:56.320 --> 00:15:57.570
a nice touch.

00:15:59.750 --> 00:16:02.720
The final example I'm going to
show you guys is an in-app

00:16:02.720 --> 00:16:04.670
purchase example.

00:16:04.670 --> 00:16:11.080
This in-app purchase ad will
launch an in-app billing flow,

00:16:11.080 --> 00:16:13.600
and so you can actually
ask the user to

00:16:13.600 --> 00:16:14.560
make an in-app purchase.

00:16:14.560 --> 00:16:16.900
Maybe do you want a
get rid of ads?

00:16:16.900 --> 00:16:20.350
You can upgrade, make an
in-app purchase to get

00:16:20.350 --> 00:16:22.760
something ad free, and you can
show this in a certain amount

00:16:22.760 --> 00:16:24.250
of the time.

00:16:24.250 --> 00:16:25.430
So I'm going to walk you through
how you can do a

00:16:25.430 --> 00:16:28.930
custom event to invoke
an in-app purchase.

00:16:28.930 --> 00:16:32.220
So in this case, our label is
just In app purchase, our

00:16:32.220 --> 00:16:35.790
class name is going to be the
InAppPurchase class, and we're

00:16:35.790 --> 00:16:37.670
also not going to need a server
parameter for this, so

00:16:37.670 --> 00:16:39.950
I called it unused.

00:16:39.950 --> 00:16:43.570
For my network configuration, I
have in-app purchase turned

00:16:43.570 --> 00:16:47.580
on higher, and in this case, I
have AdMob turned off, just so

00:16:47.580 --> 00:16:50.420
if the in-app purchase doesn't
work, then we just

00:16:50.420 --> 00:16:51.670
won't get any ads.

00:16:54.160 --> 00:16:55.740
So how does this work?

00:16:55.740 --> 00:16:58.050
In your requestBannerAd method,
the first thing you

00:16:58.050 --> 00:17:02.960
want to do is try to find out
if the user made a purchase.

00:17:02.960 --> 00:17:05.950
In this case, we're using the
test purchase of in-app

00:17:05.950 --> 00:17:09.660
billing library, just kind
of as a proof of concept.

00:17:09.660 --> 00:17:12.760
This madeTestPurchase method
is checking the shared

00:17:12.760 --> 00:17:13.819
preferences.

00:17:13.819 --> 00:17:16.810
So in this example, once we
make the in-app purchase,

00:17:16.810 --> 00:17:20.200
we're just going to store in the
shared preferences, hey, I

00:17:20.200 --> 00:17:22.650
made the in-app purchase, so I
don't need to do this again,

00:17:22.650 --> 00:17:24.339
and just don't show ads.

00:17:24.339 --> 00:17:26.329
So if we've already made the
purchase, we're just going to

00:17:26.329 --> 00:17:31.820
fail to receive the ad, and
we just won't get any ads.

00:17:31.820 --> 00:17:35.230
If we haven't, we're going to
start the in-app billing flow.

00:17:35.230 --> 00:17:38.290
So this example is largely taken
from the trivial drive

00:17:38.290 --> 00:17:41.230
example provided with the Google
in-app billing library,

00:17:41.230 --> 00:17:44.860
version three, and it has all
these helper classes, so we're

00:17:44.860 --> 00:17:47.870
going to an in-app billing
helper, pass in the activity

00:17:47.870 --> 00:17:50.100
and our public key.

00:17:50.100 --> 00:17:53.400
The public key can be anything
if you're just doing the

00:17:53.400 --> 00:17:56.700
testPurchase, it doesn't have
to be an actual value.

00:17:56.700 --> 00:18:00.070
The first thing we're going to
do is set it up, start it up,

00:18:00.070 --> 00:18:05.110
and when the setup finishes, if
this setup succeeds, then

00:18:05.110 --> 00:18:08.830
we can move on, otherwise we'll
just fail to get the ad.

00:18:08.830 --> 00:18:11.220
And after it sets up, we'll want
to query the inventory to

00:18:11.220 --> 00:18:13.340
see have we made a
purchase already.

00:18:13.340 --> 00:18:15.550
So sometimes you might have
made the purchase, but not

00:18:15.550 --> 00:18:18.111
have stored that you actually
made it yet, you might not

00:18:18.111 --> 00:18:20.610
have consumed it.

00:18:20.610 --> 00:18:22.690
So this checks for the case
where we actually made the

00:18:22.690 --> 00:18:26.300
purchase but didn't consume
it yet, while the

00:18:26.300 --> 00:18:29.020
madeTestPurchase check at the
top checks if we already

00:18:29.020 --> 00:18:30.270
consumed it.

00:18:33.380 --> 00:18:38.640
So in querying the inventory, if
the inventory query fails,

00:18:38.640 --> 00:18:41.640
again, we'll fail to return an
ad, because we all know if the

00:18:41.640 --> 00:18:44.220
user made a test purchase
or not.

00:18:44.220 --> 00:18:45.590
Otherwise, we check
if the purchase is

00:18:45.590 --> 00:18:46.800
made, but not consumed.

00:18:46.800 --> 00:18:50.490
So once we get this inventory
result, we'll check for the

00:18:50.490 --> 00:18:57.220
test successful purchase
SKU, and we have that

00:18:57.220 --> 00:19:01.110
testPurchaseInventory if the
testPurchase is not null and

00:19:01.110 --> 00:19:04.760
we verified that this is
actually a valid purchase.

00:19:04.760 --> 00:19:06.730
Again, when you're doing in-app
billing yourself,

00:19:06.730 --> 00:19:09.670
you're actually going to want to
verify that the payload is

00:19:09.670 --> 00:19:14.460
valid so that nobody can hack
the in-app purchase.

00:19:14.460 --> 00:19:18.580
If you've already made this
testPurchase, then we're going

00:19:18.580 --> 00:19:21.640
to consume it, and once we
consume it, we'll just fail to

00:19:21.640 --> 00:19:24.700
return an ad, because we've
already made the purchase.

00:19:24.700 --> 00:19:27.500
Otherwise, we're going
to get the ad.

00:19:27.500 --> 00:19:29.820
We're going to create the in-app
purchase ad and call

00:19:29.820 --> 00:19:31.550
onReceivedAd.

00:19:31.550 --> 00:19:35.730
So I'm going to walk through
how we create it.

00:19:35.730 --> 00:19:39.360
So I just want to go back to the
point that custom events

00:19:39.360 --> 00:19:41.010
only take in a view, it
doesn't necessarily

00:19:41.010 --> 00:19:42.270
have to be an ad.

00:19:42.270 --> 00:19:46.360
So in this case, our ad is
just going to be a view.

00:19:46.360 --> 00:19:49.340
So just creating a relative
layout here with a button on

00:19:49.340 --> 00:19:55.150
the right side that says
upgrade, and some text that

00:19:55.150 --> 00:19:58.170
says, do you want to upgrade?

00:19:58.170 --> 00:20:00.190
So here I'm showing how we're
going to add the purchase

00:20:00.190 --> 00:20:03.290
button, and when it's clicked,
we're going to start launching

00:20:03.290 --> 00:20:06.650
the purchase flow,
iabhelper.launchPurchaseFlow,

00:20:06.650 --> 00:20:07.900
with that purchase.

00:20:12.300 --> 00:20:15.660
So I didn't show you all the
code here, but we'll have a

00:20:15.660 --> 00:20:17.640
sample app kind of demonstrating
this, and we can

00:20:17.640 --> 00:20:19.330
walk through it more,
but here's kind of

00:20:19.330 --> 00:20:21.320
how the demo works.

00:20:21.320 --> 00:20:24.890
Again, we have our Mediation
placement ID up top that I set

00:20:24.890 --> 00:20:28.260
up, and you can request an ad,
and if you haven't made the

00:20:28.260 --> 00:20:31.470
in-app purchase yet, you'll get
this view at the bottom.

00:20:31.470 --> 00:20:33.540
And this is in the same ad
space, and it says, you want

00:20:33.540 --> 00:20:34.820
to remove ads?

00:20:34.820 --> 00:20:36.150
If so, upgrade.

00:20:36.150 --> 00:20:37.600
And if you click the upgrade
button, you'll

00:20:37.600 --> 00:20:39.830
make the sample purchase.

00:20:39.830 --> 00:20:42.030
Again, if you wanted to actually
do in-app billing,

00:20:42.030 --> 00:20:45.260
you're going to want to go to
the Android console and set up

00:20:45.260 --> 00:20:48.940
your in-app billing SKUs.

00:20:48.940 --> 00:20:53.470
But for this sample, we can
use the sample SKU.

00:20:53.470 --> 00:20:56.180
And if you make this payment,
then the next time you request

00:20:56.180 --> 00:20:58.490
the ad, you can check, oh, the
purchase was already made, we

00:20:58.490 --> 00:20:59.830
don't need to show the ad.

00:20:59.830 --> 00:21:03.130
And we just won't show an ad.

00:21:03.130 --> 00:21:06.550
So I can't give you a demo on
the simulator here, because it

00:21:06.550 --> 00:21:10.300
doesn't have in-app billing
enabled, but I can walk

00:21:10.300 --> 00:21:11.720
through some more of
the code here.

00:21:18.050 --> 00:21:20.920
So here's the full create
in-app purchase.

00:21:20.920 --> 00:21:22.750
We're actually creating a text
view that says do you want to

00:21:22.750 --> 00:21:25.440
remove ads?

00:21:25.440 --> 00:21:28.520
And that's going to go on the
left side, and the button,

00:21:28.520 --> 00:21:30.285
upgrade, is going to go
on the right side with

00:21:30.285 --> 00:21:33.420
this onClick listener.

00:21:33.420 --> 00:21:34.670
This is done over here.

00:21:38.060 --> 00:21:40.310
Here's our queryInventory
finished, we saw this on the

00:21:40.310 --> 00:21:42.220
slide as well.

00:21:42.220 --> 00:21:43.930
If the result failed, then we're
just going to fail to

00:21:43.930 --> 00:21:45.560
return an ad.

00:21:45.560 --> 00:21:48.810
Otherwise, we check if we made
this purchase, and if we have,

00:21:48.810 --> 00:21:50.060
we're going to consume it.

00:21:52.880 --> 00:21:55.280
Something I didn't put in the
slides is once the purchase is

00:21:55.280 --> 00:22:00.570
finished and we verified that
the purchase is valid, then

00:22:00.570 --> 00:22:02.510
we're just going to save the
testPurchase, which is just

00:22:02.510 --> 00:22:04.790
going to put it in shared
preferences, and then we're

00:22:04.790 --> 00:22:07.230
going to consume it.

00:22:07.230 --> 00:22:09.210
The main reason that we're
consuming it is just for the

00:22:09.210 --> 00:22:11.740
sample to be able to clear the
purchase and be able to

00:22:11.740 --> 00:22:12.900
purchase it again.

00:22:12.900 --> 00:22:16.610
If you want to make it an
infinite thing where you don't

00:22:16.610 --> 00:22:19.630
ever consume it, then you can
just not consume, and then

00:22:19.630 --> 00:22:23.105
your custom event can just query
the inventory, and if

00:22:23.105 --> 00:22:26.030
it's there it knows it doesn't
need to show an ad.

00:22:26.030 --> 00:22:30.180
The consuming part was just
for the demo purposes.

00:22:30.180 --> 00:22:33.890
Finally, when we've consumed it,
again, we're going to see

00:22:33.890 --> 00:22:37.090
the testPurchase and we're just
going to fail to return

00:22:37.090 --> 00:22:38.960
an ad, because we just consumed
it, we just made the

00:22:38.960 --> 00:22:41.456
purchase, we don't need
to have an ad anymore.

00:22:45.380 --> 00:22:48.290
Again, you're going to want to
verify that the payload is

00:22:48.290 --> 00:22:50.660
valid when you do it yourself,
but in this case, we're just

00:22:50.660 --> 00:22:52.930
always assuming it's true.

00:22:52.930 --> 00:22:55.690
And here, just a couple wrappers
for checking if they

00:22:55.690 --> 00:22:57.130
made the test purchase.

00:22:57.130 --> 00:23:00.490
Again, we're just checking
shared preferences, and saving

00:23:00.490 --> 00:23:04.940
the test purchase is also just
done with shared preferences.

00:23:04.940 --> 00:23:07.720
We're going to put the Boolean
and commit it.

00:23:10.520 --> 00:23:13.560
Also remember that we need to
implement the destroy method

00:23:13.560 --> 00:23:16.160
when doing a custom event.

00:23:16.160 --> 00:23:17.900
It doesn't really need to do
much, in this case, we're just

00:23:17.900 --> 00:23:20.270
setting the activity passed to
us to null so that we don't

00:23:20.270 --> 00:23:21.750
have any memory leaks.

00:23:28.440 --> 00:23:30.620
So these are all the
demos I have.

00:23:30.620 --> 00:23:33.370
Again, custom events are very
powerful, you've seen a couple

00:23:33.370 --> 00:23:35.480
examples here of what
they can do.

00:23:35.480 --> 00:23:37.350
You can also integrate--

00:23:37.350 --> 00:23:39.220
the standard example would be
just to integrate some other

00:23:39.220 --> 00:23:43.300
ad network and just return
another ad network's view

00:23:43.300 --> 00:23:46.380
within that custom event, maybe
for network that's not

00:23:46.380 --> 00:23:50.150
supported for AdMob
directly with an

00:23:50.150 --> 00:23:52.570
AdMob Mediation adapter.

00:23:52.570 --> 00:23:55.530
Some resources here are the
custom event sample project

00:23:55.530 --> 00:23:58.020
will be available on our
Google code project,

00:23:58.020 --> 00:24:00.500
google-mobile-dev.

00:24:00.500 --> 00:24:03.000
You can download our SDK
from our mobile ads

00:24:03.000 --> 00:24:05.630
SDK developer docs.

00:24:05.630 --> 00:24:10.950
Google.com/ads/admob is where
you can set up your AdMob

00:24:10.950 --> 00:24:12.860
Mediation placements.

00:24:12.860 --> 00:24:15.660
To learn more about custom
events, we actually have a

00:24:15.660 --> 00:24:18.530
class on it, and you can learn
just more about how customs

00:24:18.530 --> 00:24:21.290
events work with the APIs.

00:24:21.290 --> 00:24:24.660
We also have our developer docs,
our forum, our Google+

00:24:24.660 --> 00:24:27.190
page, and our blog, where you
can just find a lot more

00:24:27.190 --> 00:24:28.940
information about AdMob.

00:24:28.940 --> 00:24:30.940
And if you have any questions
you can ask us on our

00:24:30.940 --> 00:24:33.120
developer forums.

00:24:33.120 --> 00:24:35.100
So I hope you guys learned a lot
more about custom events

00:24:35.100 --> 00:24:37.760
today and have some cool ideas
about how you can implement

00:24:37.760 --> 00:24:38.850
them in your app.

00:24:38.850 --> 00:24:40.100
Thanks for watching.

