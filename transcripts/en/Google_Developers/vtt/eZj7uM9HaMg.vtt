WEBVTT
Kind: captions
Language: en

00:00:00.484 --> 00:00:01.150
WESLEY CHUN: Hi.

00:00:01.150 --> 00:00:02.850
This is Wesley Chun from Google.

00:00:02.850 --> 00:00:05.800
You may know me as a longtime
member of the Python community,

00:00:05.800 --> 00:00:08.080
but in this episode,
I'll try to actually use

00:00:08.080 --> 00:00:10.260
some of those skills to
show you how you can change

00:00:10.260 --> 00:00:13.050
the world by building a
globally accessible app starting

00:00:13.050 --> 00:00:14.930
with just 10 lines of code.

00:00:14.930 --> 00:00:18.960
Yes, I'm giving you an
idea for your next startup.

00:00:18.960 --> 00:00:21.720
Assuming you want a wildly
successful business,

00:00:21.720 --> 00:00:23.490
time to market is
of the essence,

00:00:23.490 --> 00:00:25.210
so you need to move
quickly and use

00:00:25.210 --> 00:00:27.340
tools that get your
service out there sooner.

00:00:27.340 --> 00:00:30.470
One idea is to come up with
an MVP, or Minimally Viable

00:00:30.470 --> 00:00:33.120
Product-- quickly to
see whether we can build

00:00:33.120 --> 00:00:36.890
a service without a web or
mobile app, both of which

00:00:36.890 --> 00:00:38.160
can come later.

00:00:38.160 --> 00:00:40.870
Instead, we can simply
create a bare bones service

00:00:40.870 --> 00:00:43.230
that users can reach.

00:00:43.230 --> 00:00:44.810
How are we going to do that?

00:00:44.810 --> 00:00:48.170
Well, what's one thing that
everyone online has access to?

00:00:48.170 --> 00:00:49.990
That's right-- email.

00:00:49.990 --> 00:00:52.760
We've all got an email from
a person or a computer,

00:00:52.760 --> 00:00:55.020
and you've probably
sent email to a person.

00:00:55.020 --> 00:00:57.602
But have you ever sent
email to a computer?

00:00:57.602 --> 00:00:59.060
Well, you're going
to learn it now,

00:00:59.060 --> 00:01:00.670
because that's
what's allowing you

00:01:00.670 --> 00:01:03.850
to skip native implementation
for V1, because email

00:01:03.850 --> 00:01:07.210
is compatible across all
devices, mobile or desktop.

00:01:07.210 --> 00:01:08.710
This also means
that we're looking

00:01:08.710 --> 00:01:12.830
at building an app
that receives email.

00:01:12.830 --> 00:01:16.070
Now why is an app that
receives email a big deal?

00:01:16.070 --> 00:01:20.180
Well, many services send email,
but that's less interesting,

00:01:20.180 --> 00:01:22.440
because it's just a
single function call.

00:01:22.440 --> 00:01:26.620
Now being able to receive and
process those messages, that's

00:01:26.620 --> 00:01:30.210
more intriguing, and as you can
tell with the big bang here,

00:01:30.210 --> 00:01:32.260
I think much more powerful.

00:01:32.260 --> 00:01:34.690
Your users email your
service, and your app

00:01:34.690 --> 00:01:36.650
responds to those requests.

00:01:36.650 --> 00:01:37.450
Think about it.

00:01:37.450 --> 00:01:40.550
You typically email a person,
but can you just as easily

00:01:40.550 --> 00:01:42.060
email an application?

00:01:42.060 --> 00:01:43.190
Of course.

00:01:43.190 --> 00:01:45.010
On top of that,
users don't really

00:01:45.010 --> 00:01:47.400
need to download another
app since email is already

00:01:47.400 --> 00:01:50.760
likely available
on their devices.

00:01:50.760 --> 00:01:53.170
By allowing users to send
commands to your service,

00:01:53.170 --> 00:01:55.940
you've opened up the door
to many possibilities,

00:01:55.940 --> 00:01:59.000
such as updating user
settings, transferring money

00:01:59.000 --> 00:02:02.140
to a relative, reordering all
that prescription medicine,

00:02:02.140 --> 00:02:05.610
making a small purchase, or
turning on or off the TV,

00:02:05.610 --> 00:02:07.990
heater, or alarm at
home or a business,

00:02:07.990 --> 00:02:11.330
all from an email message
that's coded correctly and sent

00:02:11.330 --> 00:02:12.470
to your service.

00:02:12.470 --> 00:02:15.832
Imagine emailing your mom
and then emailing your house,

00:02:15.832 --> 00:02:18.040
say to shut off the lights,
because you left so early

00:02:18.040 --> 00:02:19.460
for the airport this morning.

00:02:19.460 --> 00:02:21.230
Doesn't that sound crazy?

00:02:21.230 --> 00:02:24.100
Well, automated processing
is also more scalable,

00:02:24.100 --> 00:02:27.330
enabling the ability to process
hundreds or thousands of email

00:02:27.330 --> 00:02:29.670
messages and performing
service requests

00:02:29.670 --> 00:02:31.807
in a very short period of time.

00:02:31.807 --> 00:02:33.640
Now, it's very much of
a client server model

00:02:33.640 --> 00:02:35.640
if you're familiar with that.

00:02:35.640 --> 00:02:40.620
So anyway, how can we possibly
do this in 10 lines of code?

00:02:40.620 --> 00:02:42.680
By leveraging Google
App Engine, so you

00:02:42.680 --> 00:02:45.230
don't have to worry about
things like the hardware,

00:02:45.230 --> 00:02:47.370
the operating system,
network programming,

00:02:47.370 --> 00:02:50.650
databases, and most
importantly, email servers.

00:02:50.650 --> 00:02:52.640
Similarly, Python
lets you get a lot

00:02:52.640 --> 00:02:54.740
done with very
few lines of code.

00:02:54.740 --> 00:02:58.140
The syntax is pretty easy, so
even if you don't know Python,

00:02:58.140 --> 00:03:01.290
you can still follow along in
this tutorial and mentally map

00:03:01.290 --> 00:03:04.530
to your favorite
programming language.

00:03:04.530 --> 00:03:06.970
However, while this video
is beginner-friendly,

00:03:06.970 --> 00:03:09.730
we're not going to introduce
you to developing on App Engine,

00:03:09.730 --> 00:03:12.830
so if you are new, just do
the Getting Started tutorial

00:03:12.830 --> 00:03:14.570
that's online,
and you'll be set.

00:03:14.570 --> 00:03:17.370
When you're ready, create a
new Hello World app either

00:03:17.370 --> 00:03:20.400
using the Launcher UI that
comes with App Engine when

00:03:20.400 --> 00:03:23.270
you download it or copy
the code from the tutorial,

00:03:23.270 --> 00:03:25.660
because we're going
to start from there.

00:03:25.660 --> 00:03:28.380
We only need to edit
the app.yaml config

00:03:28.380 --> 00:03:33.830
file and the main main.py
Python controller file.

00:03:33.830 --> 00:03:37.410
Believe it or not, building this
app only requires a few steps.

00:03:37.410 --> 00:03:39.680
One, create the skeleton app.

00:03:39.680 --> 00:03:40.480
Done.

00:03:40.480 --> 00:03:42.900
Step two, enable
receiving email.

00:03:42.900 --> 00:03:44.750
It's just a config change.

00:03:44.750 --> 00:03:48.180
Three, bring in the library code
that supports email handling.

00:03:48.180 --> 00:03:52.340
Four, add the code that
uses that library, and five,

00:03:52.340 --> 00:03:54.830
route all inbound email
messages to the handle

00:03:54.830 --> 00:03:58.240
that you wrote in step four.

00:03:58.240 --> 00:04:00.000
Step two is just a
config change, right?

00:04:00.000 --> 00:04:01.650
So add these two
red lines of code

00:04:01.650 --> 00:04:04.640
that you see here to your
app.yaml config file.

00:04:04.640 --> 00:04:06.770
It's a new section
called Inbound Services,

00:04:06.770 --> 00:04:09.330
and it goes right above
the Handler section.

00:04:09.330 --> 00:04:11.860
App Engine supports
several inbound services,

00:04:11.860 --> 00:04:13.990
but the one we care
about is email.

00:04:13.990 --> 00:04:15.300
So that's what we do.

00:04:15.300 --> 00:04:17.310
And that's it.

00:04:17.310 --> 00:04:19.550
Your app can now receive email.

00:04:19.550 --> 00:04:21.310
All the other code
changes will take place

00:04:21.310 --> 00:04:26.200
in the controller, which is
main.py, so let's go there.

00:04:26.200 --> 00:04:28.290
Now let's bring in the
App Engine component

00:04:28.290 --> 00:04:29.754
that handles receiving email.

00:04:29.754 --> 00:04:31.420
Oh, by the way, we
took out the comments

00:04:31.420 --> 00:04:33.090
that were auto-generated
at the top,

00:04:33.090 --> 00:04:35.040
so that it's easier
to see the code.

00:04:35.040 --> 00:04:38.500
So now add these two
red lines of code.

00:04:38.500 --> 00:04:40.350
Line 1 is import logging.

00:04:40.350 --> 00:04:41.940
What we're doing
in the prototype

00:04:41.940 --> 00:04:44.200
is to log the senders
of the email messages

00:04:44.200 --> 00:04:45.600
that our app receives.

00:04:45.600 --> 00:04:49.410
Obviously, you can do more,
but we're just getting started.

00:04:49.410 --> 00:04:51.360
Line 3 imports the
App Engine code

00:04:51.360 --> 00:04:52.870
that handles the
receipt of email,

00:04:52.870 --> 00:04:54.560
as you can probably guess.

00:04:54.560 --> 00:04:57.030
Well, why are the import
lines in this order?

00:04:57.030 --> 00:04:59.340
Well, it's a Python
best practice.

00:04:59.340 --> 00:05:02.850
System imports like logging come
first, followed by third party

00:05:02.850 --> 00:05:05.450
library codes, such as webapp2.

00:05:05.450 --> 00:05:09.530
Next are any local SDK Tools,
such as the App Engine APIs,

00:05:09.530 --> 00:05:14.260
and finally, if we had any local
modules, those would go last.

00:05:14.260 --> 00:05:16.680
Now let's handle incoming email.

00:05:16.680 --> 00:05:19.750
This is done by adding this
three-line handler class.

00:05:19.750 --> 00:05:23.020
The receive method pulls out the
sender's address and logs it.

00:05:23.020 --> 00:05:24.910
Now there are
other email message

00:05:24.910 --> 00:05:27.537
attributes that you can access,
because to change the world,

00:05:27.537 --> 00:05:29.120
you're going to have
to use everything

00:05:29.120 --> 00:05:31.700
else like the email
subject and body

00:05:31.700 --> 00:05:35.240
and the sender and
receiver email addresses.

00:05:35.240 --> 00:05:38.350
All right, the final step--
redirect all the inbound email

00:05:38.350 --> 00:05:40.970
requests to the handler
that we just added.

00:05:40.970 --> 00:05:42.900
When someone points their
browser at your app,

00:05:42.900 --> 00:05:45.970
and sees Hello World, how do
you think that actually happens?

00:05:45.970 --> 00:05:49.290
Line 14, it forwards
the request for slash,

00:05:49.290 --> 00:05:51.170
which is your homepage,
to the main handler

00:05:51.170 --> 00:05:53.270
on lines 5 through 7.

00:05:53.270 --> 00:05:56.270
Think of the app variable
on lines 13 through 16

00:05:56.270 --> 00:05:59.770
as the dispatch table of
where we forward requests.

00:05:59.770 --> 00:06:03.800
Each route comes in the form
of a path and handler 2-tuple

00:06:03.800 --> 00:06:06.630
so we need to add something
similar for inbound email.

00:06:06.630 --> 00:06:08.790
When App Engine
handles inbound email,

00:06:08.790 --> 00:06:11.630
messages will be posted to
your app at that special path,

00:06:11.630 --> 00:06:12.963
which is /_ah/mail/emailaddress.

00:06:16.340 --> 00:06:18.940
Since we're going to handle all
emails with the same handler,

00:06:18.940 --> 00:06:20.980
we'll use a regular
expression-- or regex--

00:06:20.980 --> 00:06:24.980
matching all such addresses,
hence why we have dot plus.

00:06:24.980 --> 00:06:26.810
That redirects to email handler.

00:06:26.810 --> 00:06:29.400
Oh, by the way, don't
forget that trailing comma

00:06:29.400 --> 00:06:32.690
at the end of line 14, which
is why it's kind of red too.

00:06:32.690 --> 00:06:34.730
Otherwise, you'll
get a runtime error.

00:06:34.730 --> 00:06:36.940
Hey, I just helped you
pass an interview question,

00:06:36.940 --> 00:06:39.250
so feel good about it.

00:06:39.250 --> 00:06:40.310
And that's it.

00:06:40.310 --> 00:06:42.060
Ignoring the imports
and blank lines,

00:06:42.060 --> 00:06:45.230
we're left with about 10 lines
of code that do all the work.

00:06:45.230 --> 00:06:47.470
Now if you're really
pedantic and recognize

00:06:47.470 --> 00:06:50.111
that the routing table is
actually just one single Python

00:06:50.111 --> 00:06:52.110
statement, well, you can
cut that down to seven,

00:06:52.110 --> 00:06:54.570
and if you're only counting the
number of lines that we added,

00:06:54.570 --> 00:06:55.590
well, it's down to six.

00:06:55.590 --> 00:06:57.080
Amazing!

00:06:57.080 --> 00:06:59.240
Believe it or not, this
is a fully working app

00:06:59.240 --> 00:07:00.690
that does the basics.

00:07:00.690 --> 00:07:03.710
We don't have a web app, unless
you count the Hello World bit,

00:07:03.710 --> 00:07:06.760
and neither did we create an
Android or iOS mobile client,

00:07:06.760 --> 00:07:07.510
right?

00:07:07.510 --> 00:07:08.640
But you could.

00:07:08.640 --> 00:07:11.570
And easily, by using
Google Cloud Endpoints.

00:07:11.570 --> 00:07:14.420
You can click on the video
there and check it out.

00:07:14.420 --> 00:07:15.050
All right.

00:07:15.050 --> 00:07:17.440
Now let's run it.

00:07:17.440 --> 00:07:20.532
The App Engine SDK comes with
a development server, or dev

00:07:20.532 --> 00:07:21.990
server, which lets
you run your app

00:07:21.990 --> 00:07:25.160
locally to test with before
you deploy live to Google.

00:07:25.160 --> 00:07:28.830
When you do this by either
clicking run on the launcher UI

00:07:28.830 --> 00:07:32.470
or using the command line
tool, make sure, by the way,

00:07:32.470 --> 00:07:35.820
that you note the port numbers
for both the main app as well

00:07:35.820 --> 00:07:38.790
as the admin console, because
we're going to use both.

00:07:38.790 --> 00:07:42.670
Point your browser at the
main app at local host 8080.

00:07:42.670 --> 00:07:45.700
You should see the main handler
in action rendering Hello

00:07:45.700 --> 00:07:47.070
World.

00:07:47.070 --> 00:07:50.520
Since we're only in dev, you
can only simulate sending email.

00:07:50.520 --> 00:07:54.200
And to do that, you need to
get to the dev server admin

00:07:54.200 --> 00:07:54.920
console.

00:07:54.920 --> 00:07:57.660
So now point your browser at the
other port, which is local host

00:07:57.660 --> 00:07:59.730
8000.

00:07:59.730 --> 00:08:01.990
Once you're there,
what we really want

00:08:01.990 --> 00:08:05.550
is the inbound mail link in
the left nav, so click that.

00:08:05.550 --> 00:08:08.610
You'll see this form to
send a fake email with.

00:08:08.610 --> 00:08:11.940
Before we do that, let's talk
about what we're sending first.

00:08:11.940 --> 00:08:14.340
Recognize you're going to have
to validate every message,

00:08:14.340 --> 00:08:16.964
because you're going to need to
make sure that every request is

00:08:16.964 --> 00:08:20.150
real, not spam, not fake,
and most importantly,

00:08:20.150 --> 00:08:23.360
not sent by someone on
behalf of someone else.

00:08:23.360 --> 00:08:26.590
Invalid messages coming
from unrecognized users that

00:08:26.590 --> 00:08:28.250
don't follow your
security protocol

00:08:28.250 --> 00:08:31.170
like a secret passphrase
or two factor auth

00:08:31.170 --> 00:08:32.950
or just aren't
structured correctly

00:08:32.950 --> 00:08:35.720
can simply be dropped
or logged as desired.

00:08:35.720 --> 00:08:37.440
As you can see in the
message body here,

00:08:37.440 --> 00:08:39.740
we've got a lot of stuff
that can be potentially used

00:08:39.740 --> 00:08:41.809
for this purpose
if we were creating

00:08:41.809 --> 00:08:44.680
more than just a prototype.

00:08:44.680 --> 00:08:45.180
All right.

00:08:45.180 --> 00:08:46.270
Enough business logic.

00:08:46.270 --> 00:08:48.100
Let's talk about sending email.

00:08:48.100 --> 00:08:50.560
So App Engine apps receive
email sent to any address

00:08:50.560 --> 00:08:53.810
of the format
xxx@APP_ID.appspotmail.com,

00:08:53.810 --> 00:08:57.950
where xxx is a recipient,
and your app ID is the host.

00:08:57.950 --> 00:09:00.420
Be sure to use appspotmail
in the domain name

00:09:00.420 --> 00:09:02.576
rather than appspot.com.

00:09:02.576 --> 00:09:06.050
In this demo, let's pretend I
created this awesome service

00:09:06.050 --> 00:09:08.880
for our press team, allowing
them to issue new press

00:09:08.880 --> 00:09:11.060
releases with a single command.

00:09:11.060 --> 00:09:14.060
We're using the Publish
command for the recipient.

00:09:14.060 --> 00:09:16.265
Receiving email is
our fake app ID.

00:09:16.265 --> 00:09:18.140
By the way, that's really
someone else's app,

00:09:18.140 --> 00:09:19.723
so don't send anything
there if you're

00:09:19.723 --> 00:09:21.641
going to run in production.

00:09:21.641 --> 00:09:23.390
It doesn't really
matter in the dev server

00:09:23.390 --> 00:09:26.270
as no emails are actually sent.

00:09:26.270 --> 00:09:30.670
Once you click Send and see
Request Succeeded message,

00:09:30.670 --> 00:09:33.900
check your logs and verify
that your handler was called.

00:09:33.900 --> 00:09:35.660
Click the Logs button
in the launcher

00:09:35.660 --> 00:09:38.940
or check out the command line
output sent to the console.

00:09:38.940 --> 00:09:40.700
You should see
Received a Message

00:09:40.700 --> 00:09:45.120
From whatever fake
sender address you used.

00:09:45.120 --> 00:09:48.430
Running this live in production
requires only a few more steps.

00:09:48.430 --> 00:09:50.590
Make sure you've got
that unique ID plugged

00:09:50.590 --> 00:09:52.100
into your app.yaml file.

00:09:52.100 --> 00:09:53.640
Then go to the
launcher, and click

00:09:53.640 --> 00:09:56.550
Deploy to send your code to
Google after authenticating.

00:09:56.550 --> 00:09:58.380
Or you can also use
the command line tool.

00:10:01.750 --> 00:10:03.900
Once the app's uploaded,
check that it's

00:10:03.900 --> 00:10:06.320
up by going to the Hello
World page in the browser

00:10:06.320 --> 00:10:07.840
just like we did
for the dev server,

00:10:07.840 --> 00:10:09.881
only you'll be pointing
at yourappID.appspot.com.

00:10:11.750 --> 00:10:15.640
Now pull up your favorite, warm,
cozy-up-by-the-fireplace email

00:10:15.640 --> 00:10:17.839
client to send a real
email message to your app.

00:10:17.839 --> 00:10:20.255
Again, it should go to some
xxx@yourappid.appspotmail.com.

00:10:23.850 --> 00:10:26.860
After sending, go to
your Apps Admin Console

00:10:26.860 --> 00:10:30.370
at cloud.google.com/console,
selecting your app,

00:10:30.370 --> 00:10:33.090
and clicking App Engine
in the left nav bar.

00:10:33.090 --> 00:10:36.230
In the App Engine sub
nav bar, click on logs.

00:10:36.230 --> 00:10:37.670
In the middle of
the admin screen,

00:10:37.670 --> 00:10:41.410
you should see exactly what you
wanted-- your email handler's

00:10:41.410 --> 00:10:42.860
log message.

00:10:42.860 --> 00:10:44.820
Booyah!

00:10:44.820 --> 00:10:46.340
What do we do next?

00:10:46.340 --> 00:10:47.974
Well, if you want
to skip the typing

00:10:47.974 --> 00:10:49.890
and get straight to the
source, click the link

00:10:49.890 --> 00:10:51.740
to download the zip file.

00:10:51.740 --> 00:10:54.340
If for some reason, you
want a slower step-by-step,

00:10:54.340 --> 00:10:56.910
a full treatment can be found
in the Google App Engine

00:10:56.910 --> 00:10:59.970
chapter of Core Python
Applications Programming.

00:10:59.970 --> 00:11:01.570
Otherwise, that's it.

00:11:01.570 --> 00:11:04.450
We've just built a Python
App Engine app together.

00:11:04.450 --> 00:11:05.860
It can receive email.

00:11:05.860 --> 00:11:08.400
It's less than or equal
to 10 lines of code.

00:11:08.400 --> 00:11:10.480
Now it's up to you
to change the world.

00:11:10.480 --> 00:11:13.690
Seriously, you've got the
makings of a new business here.

00:11:13.690 --> 00:11:16.960
Go out, and be successful on
the Google Cloud Platform.

00:11:16.960 --> 00:11:19.140
Thanks for tuning in.

