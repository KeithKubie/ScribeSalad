WEBVTT
Kind: captions
Language: en

00:00:02.210 --> 00:00:03.390
JP GIL : Hi everyone.

00:00:03.390 --> 00:00:06.010
I'm JP Gil, and I'm a designer
on the Android Wear team.

00:00:06.010 --> 00:00:08.299
And I led the design for
bringing Material Designs

00:00:08.299 --> 00:00:08.840
to wearables.

00:00:08.840 --> 00:00:10.300
PAUL SOULOS: Hi,
I'm Paul Soulos.

00:00:10.300 --> 00:00:12.320
I'm an engineer on
the Android Wear team.

00:00:12.320 --> 00:00:15.600
And I built some of the Material
Design library features.

00:00:15.600 --> 00:00:18.210
JP GIL : Material Design is
a key aspect of Wear 2.0.

00:00:18.210 --> 00:00:20.710
Today we're going to talk about
how you can design and build

00:00:20.710 --> 00:00:23.450
apps for Android Wear, using
Google's design guidelines

00:00:23.450 --> 00:00:24.647
called Material Design.

00:00:24.647 --> 00:00:26.980
PAUL SOULOS: After we go
through some design principles,

00:00:26.980 --> 00:00:28.650
I'm going to show you
how to build an app using

00:00:28.650 --> 00:00:29.775
some of the new components.

00:00:32.460 --> 00:00:35.350
JP GIL : Material Design is
Google's visual language.

00:00:35.350 --> 00:00:37.700
It's been designed to work
across multiple platforms,

00:00:37.700 --> 00:00:40.370
devices, and screen sizes.

00:00:40.370 --> 00:00:43.450
It provides a toolkit for
designers and developers,

00:00:43.450 --> 00:00:46.390
along with a comprehensive
set of guidelines and design

00:00:46.390 --> 00:00:48.270
principles.

00:00:48.270 --> 00:00:51.200
This image on the screen is
an abstract representation

00:00:51.200 --> 00:00:53.860
of different screen sizes,
going from the big TV

00:00:53.860 --> 00:00:59.110
on the screen-- on the back,
to desktops, tablets, phones,

00:00:59.110 --> 00:01:02.972
and the white little small dot
there, that's a watch screen.

00:01:02.972 --> 00:01:04.680
Today we're focused
on the little screen.

00:01:04.680 --> 00:01:06.970
And we show you how we
extended Material Design

00:01:06.970 --> 00:01:08.170
to work on wearables.

00:01:08.170 --> 00:01:10.132
And how it will help
with design apps.

00:01:10.132 --> 00:01:12.090
If you want to know more
about Material Design,

00:01:12.090 --> 00:01:13.381
please visit design.google.com.

00:01:17.210 --> 00:01:19.230
Material Design
for wearables can

00:01:19.230 --> 00:01:22.060
be describing three key areas.

00:01:22.060 --> 00:01:24.320
A focus on vertical
layouts to improve

00:01:24.320 --> 00:01:25.718
simplicity and usability.

00:01:28.710 --> 00:01:31.600
The use of dark colors,
which are less interruptive

00:01:31.600 --> 00:01:36.010
and can save battery
on OLED displays.

00:01:36.010 --> 00:01:40.520
And a set of new UI components
and app design patterns

00:01:40.520 --> 00:01:43.280
that help designers
create great looking apps,

00:01:43.280 --> 00:01:45.760
developers build
apps more quickly,

00:01:45.760 --> 00:01:47.800
and users have a more
consistent app experience.

00:01:51.000 --> 00:01:54.360
Material Design on Android
Wear 2.0 isn't just for apps,

00:01:54.360 --> 00:01:57.130
and it extends
across the system.

00:01:57.130 --> 00:02:00.130
The principles used in apps
are observed in other system

00:02:00.130 --> 00:02:04.050
components like notifications,
the App Launcher,

00:02:04.050 --> 00:02:07.089
input mechanisms on the device,
and other parts of the system.

00:02:10.180 --> 00:02:12.120
Here you can see a
few app illustrations

00:02:12.120 --> 00:02:15.770
designed with these principles.

00:02:15.770 --> 00:02:20.290
Layouts are vertical,
they use darker colors,

00:02:20.290 --> 00:02:25.064
and also have some UI components
and app design patterns.

00:02:25.064 --> 00:02:26.480
Let's talk about
vertical layouts.

00:02:29.150 --> 00:02:32.300
Originally, we left things
really open in Android Wear.

00:02:32.300 --> 00:02:35.600
We saw developers and users
get confused with the freedom

00:02:35.600 --> 00:02:39.400
to scroll left, right, up,
down, in all directions

00:02:39.400 --> 00:02:42.520
basically in apps and the OS.

00:02:42.520 --> 00:02:44.390
We found that restricting
the primary axis

00:02:44.390 --> 00:02:48.510
to just the vertical axis just
helps people orient themselves

00:02:48.510 --> 00:02:49.527
and get things done.

00:02:52.150 --> 00:02:55.680
The notifications stream
in Android Wear 2.0

00:02:55.680 --> 00:02:59.000
is one of the core examples
of this vertical principle.

00:02:59.000 --> 00:03:02.030
Users navigate vertically,
starting from the watch

00:03:02.030 --> 00:03:06.240
face to check their
incoming notifications.

00:03:06.240 --> 00:03:10.330
Once they open a notification,
as you see on the right image,

00:03:10.330 --> 00:03:12.290
the notification
expands vertically

00:03:12.290 --> 00:03:16.286
to reveal more content
and more actions.

00:03:16.286 --> 00:03:18.410
Sometimes your app may need
a horizontal container,

00:03:18.410 --> 00:03:20.220
and that's also OK.

00:03:20.220 --> 00:03:22.110
For example, if you
have an inline photo

00:03:22.110 --> 00:03:24.979
carousel in your app.

00:03:24.979 --> 00:03:26.520
What is really
important in this case

00:03:26.520 --> 00:03:29.710
is that users understand
the hierarchy of your app.

00:03:29.710 --> 00:03:32.510
They need to understand that
this horizontal container is

00:03:32.510 --> 00:03:35.140
contained within a vertical
container, the parent

00:03:35.140 --> 00:03:36.770
container, and that's OK.

00:03:36.770 --> 00:03:39.600
So it's important for
users to understand

00:03:39.600 --> 00:03:42.708
that the main axis of
the app is vertical.

00:03:46.270 --> 00:03:49.510
Dark colors are a central
part of Material Design

00:03:49.510 --> 00:03:51.580
for wearables.

00:03:51.580 --> 00:03:55.850
Previous UIs on Android Wear
used a light color scheme.

00:03:55.850 --> 00:03:58.560
We found that brighter
colors use more battery

00:03:58.560 --> 00:04:03.240
and can be interruptive
when the screen is active.

00:04:03.240 --> 00:04:06.190
This app example uses
a light colored scheme,

00:04:06.190 --> 00:04:09.950
like you typically see on phone
apps using Material Design.

00:04:09.950 --> 00:04:13.260
The primary color chosen
here is purple 500

00:04:13.260 --> 00:04:16.595
from the Material
Design color palette.

00:04:16.595 --> 00:04:18.720
This color is used to
highlight content and actions

00:04:18.720 --> 00:04:20.620
in different
sections of the app,

00:04:20.620 --> 00:04:24.490
and it does already give a
distinctive look to the app.

00:04:24.490 --> 00:04:27.490
Light colors have two
main issues, however.

00:04:27.490 --> 00:04:29.820
One is that light
colors are less energy

00:04:29.820 --> 00:04:32.410
efficient in OLED
displays, because they

00:04:32.410 --> 00:04:36.280
need to light the pixels
with brighter intensity.

00:04:36.280 --> 00:04:39.850
For example, white pixels
need to light up the RGB

00:04:39.850 --> 00:04:42.610
diodes in your pixels at 100%.

00:04:42.610 --> 00:04:44.150
So the more white
and light colors

00:04:44.150 --> 00:04:46.810
you have in your app, the less
battery efficient your app

00:04:46.810 --> 00:04:48.870
will be.

00:04:48.870 --> 00:04:51.849
The other issue is more
of a social nature.

00:04:51.849 --> 00:04:54.390
Imagine you are in a restaurant
having a pleasant candlelight

00:04:54.390 --> 00:04:56.389
dinner, probably in this
restaurant they run out

00:04:56.389 --> 00:04:57.930
of candles, it's really dark.

00:04:57.930 --> 00:05:01.070
And you receive a message
notification from a friend.

00:05:01.070 --> 00:05:06.760
Because watches are visible
on your wrist at all times--

00:05:06.760 --> 00:05:07.710
or most of the times.

00:05:07.710 --> 00:05:09.084
If you have long
sleeves, they're

00:05:09.084 --> 00:05:10.730
not going to be visible.

00:05:10.730 --> 00:05:13.140
Your display may disrupt
the pleasant atmosphere

00:05:13.140 --> 00:05:16.080
when you get a notification.

00:05:16.080 --> 00:05:19.610
This situation would probably
not happen with dark colors.

00:05:19.610 --> 00:05:22.420
Here's the same app
example using a dark theme.

00:05:22.420 --> 00:05:25.950
Using the same primary
color, purple 500,

00:05:25.950 --> 00:05:30.010
we arrived at all the
colors in this example.

00:05:30.010 --> 00:05:32.680
Differently to light
colors, dark colors

00:05:32.680 --> 00:05:36.320
make the screens less
bright when they're active

00:05:36.320 --> 00:05:37.960
and save battery
in OLED displays.

00:05:40.550 --> 00:05:42.860
We've also designed our
system notifications

00:05:42.860 --> 00:05:47.260
to automatically adapt
to your app color.

00:05:47.260 --> 00:05:50.260
So it creates a
unified experience.

00:05:50.260 --> 00:05:52.180
For your app though,
that I show here,

00:05:52.180 --> 00:05:55.770
we derived these colors using
a method that we developed.

00:05:55.770 --> 00:05:59.060
And they are derived from
the purple 500 manually.

00:05:59.060 --> 00:06:02.360
And I'm going to
show how we did it.

00:06:02.360 --> 00:06:05.800
So this is our primary
color, purple 500

00:06:05.800 --> 00:06:08.737
from the Material
Design palette.

00:06:08.737 --> 00:06:11.070
This color can be expressed
in different color notations

00:06:11.070 --> 00:06:14.000
like RGB, red, green, blue.

00:06:14.000 --> 00:06:17.917
Here we're showing the
decimal values for RGB.

00:06:17.917 --> 00:06:19.750
Another common way to
show the values of RGB

00:06:19.750 --> 00:06:22.380
is with hexadecimal values.

00:06:22.380 --> 00:06:28.120
It's usually very common in web
apps and Android apps as well.

00:06:28.120 --> 00:06:30.630
Yet there is another notation
called hue, saturation,

00:06:30.630 --> 00:06:34.260
and brightness, and that's
the notation we used

00:06:34.260 --> 00:06:37.570
to develop our color system.

00:06:37.570 --> 00:06:39.850
If you look at the
app, we have hue,

00:06:39.850 --> 00:06:42.720
which is expressed in
degrees, brightness

00:06:42.720 --> 00:06:46.000
in percentage--
excuse me-- saturation

00:06:46.000 --> 00:06:48.664
in percentage and brightness
also in percentage.

00:06:52.260 --> 00:06:54.060
To create the
colors, we manipulate

00:06:54.060 --> 00:06:57.070
the brightness
values of this color.

00:06:57.070 --> 00:06:59.670
And we're going to
show you how we did it.

00:06:59.670 --> 00:07:03.600
So let's imagine our color would
just move from a color world

00:07:03.600 --> 00:07:06.650
to a black and white world,
and that every sub-color could

00:07:06.650 --> 00:07:09.700
be expressed by just
the brightness value

00:07:09.700 --> 00:07:11.710
of the sub-colors.

00:07:11.710 --> 00:07:15.550
As you see here in the
image below, purple 500.

00:07:15.550 --> 00:07:19.890
If you bring this color back
to the happy, colorful world,

00:07:19.890 --> 00:07:22.280
that's how its sub-color
would look like.

00:07:22.280 --> 00:07:24.240
We named five
different sub colors

00:07:24.240 --> 00:07:27.520
that we think can cover
most of your app's needs.

00:07:27.520 --> 00:07:30.730
Here they are from
light to dark.

00:07:30.730 --> 00:07:32.410
Accent.

00:07:32.410 --> 00:07:34.700
So as I mentioned
before, we just

00:07:34.700 --> 00:07:37.450
moved the brightness
values on the color.

00:07:37.450 --> 00:07:41.340
So accent-- we moved the
brightness up to 100%.

00:07:41.340 --> 00:07:43.270
Then you have
lighter UI elements,

00:07:43.270 --> 00:07:46.750
where you moved
down from 74% to 65.

00:07:46.750 --> 00:07:50.110
And you go down to
40% to UI elements,

00:07:50.110 --> 00:07:53.300
then 30% for
lighter backgrounds,

00:07:53.300 --> 00:07:57.390
and 50% for dark backgrounds.

00:07:57.390 --> 00:08:01.950
Now let's see how these colors
are applied in our example.

00:08:01.950 --> 00:08:04.920
We used accent color
sparingly throughout the UI.

00:08:04.920 --> 00:08:09.040
In this example, we're just
highlighting the user name

00:08:09.040 --> 00:08:12.350
and the time stamp.

00:08:12.350 --> 00:08:15.280
We used the lighter
background color

00:08:15.280 --> 00:08:17.360
in most of the UI's background.

00:08:17.360 --> 00:08:20.510
And to section off certain
areas of the background,

00:08:20.510 --> 00:08:24.710
we decided to use the
dark background color.

00:08:24.710 --> 00:08:28.660
Active elements in the UI, like
elements where you take action,

00:08:28.660 --> 00:08:31.990
like the action drawer or
the primary action button,

00:08:31.990 --> 00:08:34.299
they use a lot of UI elements.

00:08:34.299 --> 00:08:36.799
And to separate the
primary action button

00:08:36.799 --> 00:08:40.380
on the left screen,
we used a UI element.

00:08:40.380 --> 00:08:45.640
It's almost like a
intermediary background.

00:08:45.640 --> 00:08:48.380
Luckily, this color,
purple 500, isn't alone

00:08:48.380 --> 00:08:50.120
in this happy color world.

00:08:50.120 --> 00:08:51.530
They have a lot of friends.

00:08:51.530 --> 00:08:54.150
We also updated the
complete Material Design

00:08:54.150 --> 00:08:55.850
color palettes to
help you choose darker

00:08:55.850 --> 00:08:59.230
colors for your applications.

00:08:59.230 --> 00:09:01.600
We needed however, to
make a few adjustments

00:09:01.600 --> 00:09:05.090
to make the palette more
readable and more accessible.

00:09:05.090 --> 00:09:07.940
So we optimized the saturation
for some of the sub-colors

00:09:07.940 --> 00:09:09.550
in the blue range,
as you see here

00:09:09.550 --> 00:09:15.040
on the image, and
the yellow range.

00:09:15.040 --> 00:09:16.830
If you want to know
more about colors,

00:09:16.830 --> 00:09:18.870
please visit our
Material spec site,

00:09:18.870 --> 00:09:21.630
and the URL here is
on the bottom corner.

00:09:24.221 --> 00:09:24.720
OK.

00:09:24.720 --> 00:09:27.780
We talked about vertical
layouts and darker colors,

00:09:27.780 --> 00:09:30.660
two of the key areas of
Material Design for wearables.

00:09:30.660 --> 00:09:32.970
Let's talk now about the
last one, UI components

00:09:32.970 --> 00:09:35.960
and patterns.

00:09:35.960 --> 00:09:40.790
We walk you through the basic
anatomy of a Material Design

00:09:40.790 --> 00:09:44.070
app for Wear 2.0.

00:09:44.070 --> 00:09:47.950
Imagine this circle in
isometric perspective

00:09:47.950 --> 00:09:51.000
is the screen of your watch.

00:09:51.000 --> 00:09:54.060
The app will have a
vertical container

00:09:54.060 --> 00:09:56.630
with a vertical layout.

00:09:56.630 --> 00:10:00.260
And this layout will use
a dark color palette.

00:10:00.260 --> 00:10:04.050
And it uses two components
that Paul will show you

00:10:04.050 --> 00:10:07.360
how to build in your app today.

00:10:07.360 --> 00:10:13.080
Wearable Action Drawer and
Wearable Navigation Drawer.

00:10:13.080 --> 00:10:15.080
Let's see how they work.

00:10:15.080 --> 00:10:16.850
A Navigation Drawer
helps users navigate

00:10:16.850 --> 00:10:19.590
between sections of your app.

00:10:19.590 --> 00:10:22.756
It sits vertically on the
top of the content containers

00:10:22.756 --> 00:10:23.755
outside of the viewport.

00:10:26.760 --> 00:10:31.660
So if you look at this
image here of a fake mail

00:10:31.660 --> 00:10:34.910
app that we call Mailbox.

00:10:34.910 --> 00:10:38.010
You see the containers-- the
main containers of the app,

00:10:38.010 --> 00:10:40.420
they're all vertical.

00:10:40.420 --> 00:10:45.240
And the Navigation
Drawer sits on top of it.

00:10:45.240 --> 00:10:48.150
The navigation in the Drawer
is actually horizontal,

00:10:48.150 --> 00:10:50.130
and it's on purpose,
because the only way

00:10:50.130 --> 00:10:52.780
to move between different
horizontal containers--

00:10:52.780 --> 00:10:55.170
vertical containers
is horizontally.

00:10:55.170 --> 00:10:58.130
Because I know someone is going
to ask that question later.

00:10:58.130 --> 00:11:00.820
This horizontal motion helps us
enter different vertical views

00:11:00.820 --> 00:11:02.580
in your application.

00:11:02.580 --> 00:11:05.130
For example, if you want
to switch between mailbox

00:11:05.130 --> 00:11:10.600
to settings to contacts
page to your drafts.

00:11:10.600 --> 00:11:13.112
This is how the Navigation
Drawer works in action.

00:11:13.112 --> 00:11:16.830
The users pull from the top,
navigate between left and right

00:11:16.830 --> 00:11:17.847
to arrive at the view.

00:11:17.847 --> 00:11:18.638
It's pretty simple.

00:11:25.140 --> 00:11:26.734
We've also implemented
a peek behavior

00:11:26.734 --> 00:11:28.400
to remind users that
the Drawer actually

00:11:28.400 --> 00:11:30.390
exists outside of the viewport.

00:11:30.390 --> 00:11:34.180
Sometimes users may forget
there is something there.

00:11:34.180 --> 00:11:36.850
The Drawer peeks as soon
as the user scrolls back

00:11:36.850 --> 00:11:40.070
to the top of the current view,
as you see on the animation,

00:11:40.070 --> 00:11:43.500
and the Drawer just peeks in.

00:11:43.500 --> 00:11:46.000
Users don't have actually to
scroll all the way to the top

00:11:46.000 --> 00:11:47.416
to get to the
Drawer, the Drawer's

00:11:47.416 --> 00:11:49.080
available at all times.

00:11:49.080 --> 00:11:51.442
You just have to pull from
the top edge of the screen,

00:11:51.442 --> 00:11:52.650
and the Drawer will be there.

00:11:56.630 --> 00:11:59.840
And Action Drawer,
it's the one that sits

00:11:59.840 --> 00:12:02.130
on the bottom of the screen.

00:12:02.130 --> 00:12:04.620
And Action Drawer allows
users to access actions

00:12:04.620 --> 00:12:07.860
for specific usage contexts.

00:12:07.860 --> 00:12:10.910
Let's look at the example of
the conversation in a messaging

00:12:10.910 --> 00:12:12.500
app.

00:12:12.500 --> 00:12:15.440
There are a few possible
actions here, could be more,

00:12:15.440 --> 00:12:17.550
but I'm just showing a few.

00:12:17.550 --> 00:12:22.435
Replying to the message, adding
a photo, sharing a location,

00:12:22.435 --> 00:12:24.060
adding more people
to the conversation.

00:12:31.800 --> 00:12:35.430
So to access the actions, users
just have to pull up the Drawer

00:12:35.430 --> 00:12:39.090
and tap it in the overflow icon.

00:12:39.090 --> 00:12:41.190
And as we did with
the Navigation Drawer,

00:12:41.190 --> 00:12:43.600
uses can open that
Drawer at any time

00:12:43.600 --> 00:12:46.590
by pulling from the
bottom edge of the screen.

00:12:46.590 --> 00:12:49.040
In fact, we found
in usability studies

00:12:49.040 --> 00:12:51.370
that once users
discovered that behavior,

00:12:51.370 --> 00:12:53.110
they don't even wait
for the peek state.

00:12:53.110 --> 00:12:55.443
They know the Drawer is there,
they just open the Drawer

00:12:55.443 --> 00:12:58.370
and perform the actions.

00:12:58.370 --> 00:13:02.562
So what happens if you have
only one action in your Drawer?

00:13:02.562 --> 00:13:04.020
So if you have only
one action, you

00:13:04.020 --> 00:13:05.260
don't need an overflow icon.

00:13:05.260 --> 00:13:09.500
So the overflow helps you figure
out there's more actions there,

00:13:09.500 --> 00:13:11.000
but we only have one.

00:13:11.000 --> 00:13:14.690
We debated whether we should
have a Drawer and just the peek

00:13:14.690 --> 00:13:17.080
state with that icon in it.

00:13:17.080 --> 00:13:19.180
And we found out
that, sometimes,

00:13:19.180 --> 00:13:22.070
if you use an icon that
users have never seen before,

00:13:22.070 --> 00:13:24.590
it's useful to have a
Drawer with just one action,

00:13:24.590 --> 00:13:27.926
so they can actually associate
the action with the icon.

00:13:32.760 --> 00:13:34.910
So tapping on the
action as you're

00:13:34.910 --> 00:13:37.900
going to see in
the animation now,

00:13:37.900 --> 00:13:40.620
instead of opening the Drawer,
it will perform the action

00:13:40.620 --> 00:13:43.020
directly.

00:13:43.020 --> 00:13:47.999
So in this case, when the
user taps on the action,

00:13:47.999 --> 00:13:49.665
he would just reply
to the conversation.

00:13:52.390 --> 00:13:54.530
To prevent unnecessary
spin obstruction,

00:13:54.530 --> 00:13:58.930
the Drawer also has a
peek and hide behavior.

00:13:58.930 --> 00:14:02.560
In this animation, you see
how the Drawer disappears

00:14:02.560 --> 00:14:04.630
and it reappears when
the user's trying

00:14:04.630 --> 00:14:06.690
to go back to the bottom
of the conversation.

00:14:06.690 --> 00:14:10.890
That means, let's say, you
receive a message from a friend

00:14:10.890 --> 00:14:12.760
and they ask you a question.

00:14:12.760 --> 00:14:15.680
You want to go back into
the conversation history,

00:14:15.680 --> 00:14:17.030
you find out what you want.

00:14:17.030 --> 00:14:19.176
As you go back down,
we assume that you're

00:14:19.176 --> 00:14:20.800
trying to actually
reply to the action.

00:14:20.800 --> 00:14:24.160
So we peek the Drawer in
for you as a convenience.

00:14:24.160 --> 00:14:27.560
In this case, maybe you just
want to go from the bottom

00:14:27.560 --> 00:14:29.539
as well.

00:14:29.539 --> 00:14:30.955
Now I'll hand it
over to Paul, who

00:14:30.955 --> 00:14:32.990
will show you how to
build these components

00:14:32.990 --> 00:14:35.260
PAUL SOULOS: Thanks, JP.

00:14:35.260 --> 00:14:37.560
Now, you learned about
the design behind Drawers,

00:14:37.560 --> 00:14:39.590
I'm going to show you
how to implement them.

00:14:39.590 --> 00:14:42.444
The Drawers are a new feature
in the wearable support library.

00:14:42.444 --> 00:14:44.360
And if you're familiar
at implementing Drawers

00:14:44.360 --> 00:14:46.234
on a phone, then you
pretty much already know

00:14:46.234 --> 00:14:48.570
how to implement them
on a wearable as well.

00:14:48.570 --> 00:14:50.850
So first, we're going to go
through some more generic,

00:14:50.850 --> 00:14:53.465
easy to implement use cases:
the wearable Action Drawer

00:14:53.465 --> 00:14:55.060
and wearable Navigation Drawer.

00:14:55.060 --> 00:14:57.239
And afterwards, we'll
take a little deeper dive

00:14:57.239 --> 00:14:58.780
and show you how to
build some custom

00:14:58.780 --> 00:15:00.500
Drawers if your
application should

00:15:00.500 --> 00:15:04.430
be a little more tailored
to the user experience.

00:15:04.430 --> 00:15:06.240
So wearable drawer
layout is the container

00:15:06.240 --> 00:15:07.860
that everything goes within.

00:15:07.860 --> 00:15:09.837
Here you're going to
define your content.

00:15:09.837 --> 00:15:11.920
This is going to be the
vertically scrolling thing

00:15:11.920 --> 00:15:13.580
that JP spoke about.

00:15:13.580 --> 00:15:15.410
And within it, you're
also going to define

00:15:15.410 --> 00:15:19.640
an Action Drawer and a
wearable Navigation Drawer.

00:15:19.640 --> 00:15:21.390
To get the peeking
behavior, you need

00:15:21.390 --> 00:15:23.150
to enable nested scrolling.

00:15:23.150 --> 00:15:25.507
What this does is it allows
the wearable drawer layout

00:15:25.507 --> 00:15:27.590
to understand the movement
that's occurring deeper

00:15:27.590 --> 00:15:30.530
within the view hierarchy, so
that it knows when to peek.

00:15:30.530 --> 00:15:32.340
For instance, when
you scroll to the top,

00:15:32.340 --> 00:15:35.220
the wearable drawer layout needs
to peek the Navigation Drawer.

00:15:35.220 --> 00:15:39.000
So you can do this by enabling
nestedScrollingEnabled

00:15:39.000 --> 00:15:41.600
on standard Android
view, such as ListView.

00:15:41.600 --> 00:15:43.140
Some of the Android
Support views

00:15:43.140 --> 00:15:46.050
like RecyclerView and
NestedScrollView implement this

00:15:46.050 --> 00:15:48.960
by default.

00:15:48.960 --> 00:15:51.479
On the left is a Navigation
Drawer on a phone.

00:15:51.479 --> 00:15:53.770
It's generally pulled from
the left side of the screen,

00:15:53.770 --> 00:15:55.570
or you tap the hamburger menu.

00:15:55.570 --> 00:15:58.150
And it allows the user to
navigate the application.

00:15:58.150 --> 00:15:59.940
On the right, you can
see the same thing,

00:15:59.940 --> 00:16:02.750
the wearable Navigation
Drawer for use on watches.

00:16:02.750 --> 00:16:04.800
It's pulled down from
the top of the screen.

00:16:04.800 --> 00:16:06.300
And it allows the
users to navigate

00:16:06.300 --> 00:16:10.530
between different columns
of vertical content.

00:16:10.530 --> 00:16:12.920
Navigation Drawers are populated
through the same adopter

00:16:12.920 --> 00:16:15.870
construct that you're already
familiar with on Android.

00:16:15.870 --> 00:16:19.032
There's only a few
methods to implement.

00:16:19.032 --> 00:16:19.740
It's really easy.

00:16:19.740 --> 00:16:22.087
Let's go through building one.

00:16:22.087 --> 00:16:23.670
So you pull down the
Navigation Drawer

00:16:23.670 --> 00:16:25.130
from the top of
the screen, and you

00:16:25.130 --> 00:16:27.790
see that you're in
the mailbox section.

00:16:27.790 --> 00:16:29.990
The user knows that there
is one section to the left

00:16:29.990 --> 00:16:31.890
and two the right
from the indicators

00:16:31.890 --> 00:16:33.140
at the bottom of the screen.

00:16:33.140 --> 00:16:35.810
You define this by filling
in the getCount method

00:16:35.810 --> 00:16:36.920
from the adapter.

00:16:36.920 --> 00:16:40.920
And in particular, the section
that the user is currently on

00:16:40.920 --> 00:16:44.460
is highlighted by
a larger circle.

00:16:44.460 --> 00:16:47.320
To set the label,
getItemText is called,

00:16:47.320 --> 00:16:49.070
and that's what sets
the label for it.

00:16:49.070 --> 00:16:50.650
And then there's
also getItemDrawable

00:16:50.650 --> 00:16:51.569
which sets the icon.

00:16:51.569 --> 00:16:53.610
And that's all that's
needed to populate the view

00:16:53.610 --> 00:16:54.830
for a Navigation Drawer.

00:16:54.830 --> 00:16:57.770
It's really simple and quick.

00:16:57.770 --> 00:17:01.010
There are two other methods
to discuss: onItemsSelected

00:17:01.010 --> 00:17:03.330
and notifyDatasetChange.

00:17:03.330 --> 00:17:05.829
onItemSelected is called
when the user navigates left

00:17:05.829 --> 00:17:07.569
or right within the Drawer.

00:17:07.569 --> 00:17:09.270
And this gives you
the opportunity

00:17:09.270 --> 00:17:11.150
to change the underlying view.

00:17:11.150 --> 00:17:13.810
For instance, if the user
goes in the mailbox section

00:17:13.810 --> 00:17:16.530
to the settings section,
that gives you an opportunity

00:17:16.530 --> 00:17:19.280
to change the underlying content
to reflect the new settings

00:17:19.280 --> 00:17:20.609
screen.

00:17:20.609 --> 00:17:23.130
notifyDataSetChanged
is called when

00:17:23.130 --> 00:17:25.920
the data backing the adapter
changes after the adapter

00:17:25.920 --> 00:17:27.300
was set.

00:17:27.300 --> 00:17:30.170
This notifies the Navigation
Drawer that the data behind it

00:17:30.170 --> 00:17:32.570
is no longer valid, and it
needs to redraw the view,

00:17:32.570 --> 00:17:34.700
so that I can get the
new icons and labels.

00:17:37.890 --> 00:17:39.694
Actions Drawers are
a great compliment

00:17:39.694 --> 00:17:41.360
to wearable Navigation
Drawers, and they

00:17:41.360 --> 00:17:43.068
allow the user to
quickly perform actions

00:17:43.068 --> 00:17:44.820
on the content and the screen.

00:17:44.820 --> 00:17:47.060
On the left, you can
see an action menu

00:17:47.060 --> 00:17:49.930
as it is implemented on
the phone, generally opened

00:17:49.930 --> 00:17:52.174
by clicking the overflow menu.

00:17:52.174 --> 00:17:54.090
And on the right, is a
wearable Action Drawer,

00:17:54.090 --> 00:17:57.940
open by pulling up from
the bottom of the screen.

00:17:57.940 --> 00:18:00.850
Actions on phones and
wearables are both implemented

00:18:00.850 --> 00:18:04.680
using the Android menu API.

00:18:04.680 --> 00:18:07.990
If your action menu is static,
and it does not change,

00:18:07.990 --> 00:18:11.230
the easiest way to fill it in
is to specify a menu resource

00:18:11.230 --> 00:18:12.410
in your XML.

00:18:12.410 --> 00:18:15.400
Here you can see that we created
an action_menu attribute,

00:18:15.400 --> 00:18:19.600
and we're just pointing it
to a menu resource file.

00:18:19.600 --> 00:18:21.544
Alternatively, your
actions may need

00:18:21.544 --> 00:18:22.710
to be a little more dynamic.

00:18:22.710 --> 00:18:25.660
And you can populate
them in code as well.

00:18:25.660 --> 00:18:29.680
Here we're using a menu inflator
to put a menu resource file

00:18:29.680 --> 00:18:32.880
into the menu that we retrieved
from the Action Drawer.

00:18:32.880 --> 00:18:35.260
This is exactly what happens
behind the scenes when you

00:18:35.260 --> 00:18:37.280
specify an attribute with XML .

00:18:37.280 --> 00:18:39.240
So if that's what you're
planning on doing,

00:18:39.240 --> 00:18:42.497
then it's a little
easier to point XML.

00:18:42.497 --> 00:18:44.330
So here we're going to
clear the Action menu

00:18:44.330 --> 00:18:46.829
and go through building one in
code without using a resource

00:18:46.829 --> 00:18:48.890
file.

00:18:48.890 --> 00:18:52.140
So you can call on the menu
object, the add method, where

00:18:52.140 --> 00:18:55.400
you're going to pass on the item
ID as well as the text to use.

00:18:55.400 --> 00:18:57.320
And once that menu
item has been created,

00:18:57.320 --> 00:18:59.590
you can set an icon on it.

00:18:59.590 --> 00:19:01.626
Later on, if you no
longer need the menu item

00:19:01.626 --> 00:19:03.500
and want to remove it
from the Action Drawer,

00:19:03.500 --> 00:19:09.460
you just call removeItem on the
menu and pass in the item ID.

00:19:09.460 --> 00:19:11.830
There are two ways to
interact and retrieve

00:19:11.830 --> 00:19:14.170
events that are occurring
with an Action Drawer.

00:19:14.170 --> 00:19:16.220
First, you can set
a ClickListener

00:19:16.220 --> 00:19:18.290
on the entire menu.

00:19:18.290 --> 00:19:21.160
When you do this, and whenever
anything in the Actual Drawer

00:19:21.160 --> 00:19:23.340
is clicked, this
method will be called.

00:19:23.340 --> 00:19:26.200
And then, from within here,
you can get the item ID

00:19:26.200 --> 00:19:30.390
and then act accordingly once
you know where it was clicked.

00:19:30.390 --> 00:19:33.180
Alternatively, you can set
an individual ClickListener

00:19:33.180 --> 00:19:36.464
on a specific menu item, this
will intercept the click event.

00:19:36.464 --> 00:19:37.880
So if the user
clicks on something

00:19:37.880 --> 00:19:41.120
that had-- if a general menu
has a defined ClickListener,

00:19:41.120 --> 00:19:43.210
and a specific item
has one as well,

00:19:43.210 --> 00:19:45.320
the specific one
will be called first,

00:19:45.320 --> 00:19:46.990
and you can respond accordingly.

00:19:46.990 --> 00:19:48.830
And if you return
true, the event

00:19:48.830 --> 00:19:51.240
will be considered consumed,
and will never propagate

00:19:51.240 --> 00:19:54.330
to the general ClickListener.

00:19:54.330 --> 00:19:55.770
One thing in
particular to note is

00:19:55.770 --> 00:19:58.940
that there are two instances
of onMenuItemClickListener.

00:19:58.940 --> 00:20:01.620
The first comes from the
wearable Action Drawer class,

00:20:01.620 --> 00:20:03.161
and this is the one
that you're going

00:20:03.161 --> 00:20:04.580
to set on the entire menu.

00:20:04.580 --> 00:20:06.950
The second one comes
from the MenuItem class.

00:20:06.950 --> 00:20:09.450
This is what you're going to
use for setting a ClickListener

00:20:09.450 --> 00:20:13.140
on a specific menu item.

00:20:13.140 --> 00:20:15.430
The standard navigation
in Action Drawers,

00:20:15.430 --> 00:20:16.889
if they don't see
your application,

00:20:16.889 --> 00:20:18.013
you don't need to use them.

00:20:18.013 --> 00:20:19.340
You can create a custom one.

00:20:19.340 --> 00:20:21.430
That gives you the
peeking and drag behavior

00:20:21.430 --> 00:20:23.800
that users have come to expect
on the operating system,

00:20:23.800 --> 00:20:25.800
but it allows you to put
in some peek and drawer

00:20:25.800 --> 00:20:29.050
content that's more specified
for your application.

00:20:29.050 --> 00:20:31.380
Let's take a look at
how Spotify uses them.

00:20:31.380 --> 00:20:32.900
In the first
example, you can see

00:20:32.900 --> 00:20:35.835
that they've replaced the
peek overflow icon with a play

00:20:35.835 --> 00:20:37.080
and pause button.

00:20:37.080 --> 00:20:39.800
And this means, whenever the
user's using an application,

00:20:39.800 --> 00:20:41.610
they can change the
state of the music

00:20:41.610 --> 00:20:43.900
right there, without
having to open the Drawer.

00:20:43.900 --> 00:20:45.750
And if they decide to
pull the Drawer up,

00:20:45.750 --> 00:20:48.850
you can see the custom
drawer contents on the right.

00:20:48.850 --> 00:20:50.510
The custom drawer
shows a full set

00:20:50.510 --> 00:20:53.010
of media controls and
some song information,

00:20:53.010 --> 00:20:55.590
such as the title,
the artist, as well as

00:20:55.590 --> 00:20:59.200
the duration and time left going
around the edges of the screen.

00:20:59.200 --> 00:21:01.374
Now Spotify could have used
a regular Action Drawer

00:21:01.374 --> 00:21:03.540
and had all of these controls
and information listed

00:21:03.540 --> 00:21:06.160
vertically, but we've
come to associate

00:21:06.160 --> 00:21:09.060
moving to the next song to
the right of the pause button.

00:21:09.060 --> 00:21:11.020
So in this case, it
really made sense for them

00:21:11.020 --> 00:21:13.070
to create their
own custom drawer

00:21:13.070 --> 00:21:17.910
and used a UI that people
are already familiar with.

00:21:17.910 --> 00:21:20.480
Wearable Action Drawer and
wearable Navigation Drawer

00:21:20.480 --> 00:21:22.900
both extend from the
wearableDrawerView class.

00:21:22.900 --> 00:21:24.929
So when you create
a custom drawer,

00:21:24.929 --> 00:21:26.720
you're going to want
to use that base class

00:21:26.720 --> 00:21:28.880
and place your
content within it.

00:21:28.880 --> 00:21:32.010
You need to set layout_gravity
on the DrawerView,

00:21:32.010 --> 00:21:33.680
so it knows whether
it exists on the top

00:21:33.680 --> 00:21:35.210
or bottom of the screen.

00:21:35.210 --> 00:21:39.370
In this example, we're
using a drawer on the top.

00:21:39.370 --> 00:21:41.700
If the content within
your drawer also scrolls,

00:21:41.700 --> 00:21:43.910
you'll need to enable
nested scrolling again.

00:21:43.910 --> 00:21:45.880
This just helps
wearableDrawerLayout understand

00:21:45.880 --> 00:21:47.600
the movement that's
occurring beneath so that it

00:21:47.600 --> 00:21:48.720
can make everything fluid.

00:21:51.280 --> 00:21:54.680
In your code, there are two
methods in wearableDrawerView.

00:21:54.680 --> 00:21:57.860
There is setPeekContent
and setDrawerContent.

00:21:57.860 --> 00:22:00.602
And both of these methods
take Android view arguments,

00:22:00.602 --> 00:22:02.685
and they follow all the
standard view conventions.

00:22:02.685 --> 00:22:06.760
So you can set a
ClickListener on a peak state

00:22:06.760 --> 00:22:10.240
if you want to
respond differently.

00:22:10.240 --> 00:22:12.580
In some cases, your
app may need to respond

00:22:12.580 --> 00:22:14.040
depending on the drawer state.

00:22:14.040 --> 00:22:16.600
So you can use a
DrawerStateCallback, which

00:22:16.600 --> 00:22:18.460
lets you know when a
drawer has been opened,

00:22:18.460 --> 00:22:20.500
closed, or the state changes.

00:22:20.500 --> 00:22:22.890
We've also defined a few
states, such as dragging,

00:22:22.890 --> 00:22:24.344
when the user drags
the drawer up.

00:22:24.344 --> 00:22:26.510
And if they let go a little
early before they finish

00:22:26.510 --> 00:22:28.051
dragging and it has
a little bit more

00:22:28.051 --> 00:22:29.850
to move before it
settles in place,

00:22:29.850 --> 00:22:31.527
it'll be using the
settling state.

00:22:31.527 --> 00:22:33.360
And once it's finally
stopped moving either,

00:22:33.360 --> 00:22:38.030
in an open or closed state,
the state will switch to idle.

00:22:38.030 --> 00:22:40.470
Here are a few of our
partners using the drawers.

00:22:40.470 --> 00:22:42.860
On the left is Lifesum.

00:22:42.860 --> 00:22:45.460
They track your food intake,
and they use an Action Drawer

00:22:45.460 --> 00:22:48.240
that you can open up to add
an extra meal whether it's

00:22:48.240 --> 00:22:50.870
breakfast, lunch,
dinner, or a snack.

00:22:50.870 --> 00:22:52.800
They also implement
a Navigation Drawer

00:22:52.800 --> 00:22:57.070
to help you move between
food, water, and exercise.

00:22:57.070 --> 00:22:59.850
On the right is ToDoist, and
they're using an Action Drawer

00:22:59.850 --> 00:23:05.580
to let you take actions and add
new to do items in your list.

00:23:05.580 --> 00:23:07.620
Wearable drawers are but
a few of the components

00:23:07.620 --> 00:23:09.590
available in Android Wear 2.0.

00:23:09.590 --> 00:23:11.260
If the drawers
don't suit your app,

00:23:11.260 --> 00:23:15.260
and they're a little too much UI
for what you need to get done,

00:23:15.260 --> 00:23:17.150
feel free to use some
other principles.

00:23:17.150 --> 00:23:18.941
Here is primary action button.

00:23:18.941 --> 00:23:21.190
And this allows the user to
take an action immediately

00:23:21.190 --> 00:23:23.180
upon entering a
view or activity.

00:23:23.180 --> 00:23:26.590
This is similar to offloading
action button on a phone.

00:23:26.590 --> 00:23:30.070
So in the case of an email
app, besides reading emails,

00:23:30.070 --> 00:23:32.370
users may want to frequently
compose a new one.

00:23:32.370 --> 00:23:34.180
So here using a
primary action button

00:23:34.180 --> 00:23:36.850
to define that right at the
top of the screen and help them

00:23:36.850 --> 00:23:39.860
build that immediately.

00:23:39.860 --> 00:23:42.700
Inline action buttons should
be used when it's important

00:23:42.700 --> 00:23:44.700
that the user gets to
the bottom of the content

00:23:44.700 --> 00:23:46.330
before taking an action.

00:23:46.330 --> 00:23:48.492
So in this example, we
put the share button

00:23:48.492 --> 00:23:50.950
at the bottom of the content,
because it's really important

00:23:50.950 --> 00:23:53.250
that people read what they're
sharing before they share it.

00:23:53.250 --> 00:23:53.749
Right?

00:23:56.330 --> 00:23:58.720
Confirmation overlays
display a temporary message

00:23:58.720 --> 00:24:00.400
to express a state change.

00:24:00.400 --> 00:24:03.880
So in this case, the user has
successfully sent a message.

00:24:03.880 --> 00:24:08.300
So you're going to pass in a
success confirmation overlay,

00:24:08.300 --> 00:24:09.775
now we'll use the green arrow.

00:24:09.775 --> 00:24:11.150
And if you look
at the API, there

00:24:11.150 --> 00:24:15.850
are a few other states defined
to use different icons there.

00:24:15.850 --> 00:24:17.820
And finally, there are
progress indicators

00:24:17.820 --> 00:24:19.403
which let the user
know that something

00:24:19.403 --> 00:24:20.710
is happening behind the scenes.

00:24:20.710 --> 00:24:22.390
It's important to use
these if anything is not

00:24:22.390 --> 00:24:24.220
going to be instant, so
that the user doesn't think

00:24:24.220 --> 00:24:26.553
your app stalled, and they
know that something's coming,

00:24:26.553 --> 00:24:28.290
they just have to
wait another second.

00:24:28.290 --> 00:24:30.400
All of these pieces
can be combined

00:24:30.400 --> 00:24:33.100
to create a rich and tailored
experience for your application

00:24:33.100 --> 00:24:35.530
on Wear.

00:24:35.530 --> 00:24:38.760
Android Wear 2.0 has a new
wearable support library

00:24:38.760 --> 00:24:42.280
that includes all the components
we've discussed today and more.

00:24:42.280 --> 00:24:44.030
To get this support
library, you need

00:24:44.030 --> 00:24:46.290
to add a dependency to
the wearable support

00:24:46.290 --> 00:24:49.860
library in your
Gradle build file.

00:24:49.860 --> 00:24:52.920
This Gradle file is depending on
the developer preview version,

00:24:52.920 --> 00:24:55.290
so it uses the suffix alpha1.

00:24:55.290 --> 00:24:58.260
The exact dependency will change
throughout the preview period,

00:24:58.260 --> 00:25:02.144
and we'll finally
settle on 2.0.0.

00:25:02.144 --> 00:25:04.830
To find the exact
dependency, please visit

00:25:04.830 --> 00:25:07.600
the Wear developer site, where
you can also find guides,

00:25:07.600 --> 00:25:10.212
tutorials, and reference.

00:25:10.212 --> 00:25:12.420
We put a lot of thought into
Material Design on Wear.

00:25:12.420 --> 00:25:14.660
And we're only able to touch
on a small portion of it

00:25:14.660 --> 00:25:15.920
during the session.

00:25:15.920 --> 00:25:19.110
The guidelines we've spoken
about today, as well as others,

00:25:19.110 --> 00:25:22.227
are available in the Material
Design for Wear spec site.

00:25:22.227 --> 00:25:23.810
And with that, I'll
hand it over to JP

00:25:23.810 --> 00:25:27.620
to discuss some best practices.

00:25:27.620 --> 00:25:30.522
JP GIL : Thanks Paul.

00:25:30.522 --> 00:25:32.230
Now that we've learned
how to design apps

00:25:32.230 --> 00:25:34.820
with Material Design
on Wear 2.0 and how

00:25:34.820 --> 00:25:37.970
to build some of our
components, let's

00:25:37.970 --> 00:25:40.690
briefly talk about some general
best practices for creating

00:25:40.690 --> 00:25:43.590
smartwatch app experiences.

00:25:43.590 --> 00:25:46.514
Smart watches have unique
limitations and capabilities.

00:25:46.514 --> 00:25:48.430
And many of the design
patterns and principles

00:25:48.430 --> 00:25:51.470
developed for
smartphones should not

00:25:51.470 --> 00:25:54.930
be directly applied to watches.

00:25:54.930 --> 00:25:57.590
The first thing is to
understand use cases.

00:25:57.590 --> 00:25:59.560
When designing apps
for smartwatches,

00:25:59.560 --> 00:26:01.120
focus on use cases
that makes sense

00:26:01.120 --> 00:26:03.540
for the watch environment.

00:26:03.540 --> 00:26:06.130
Watches allow users
to get information

00:26:06.130 --> 00:26:10.210
at a glance, such as the
arrival of the next bus.

00:26:10.210 --> 00:26:13.630
And to take actions quickly,
like responding to a message.

00:26:13.630 --> 00:26:17.500
Avoid complex applications
that require a lot of input

00:26:17.500 --> 00:26:21.640
and have too much
information density.

00:26:21.640 --> 00:26:24.070
The best wearable
apps are glanceable,

00:26:24.070 --> 00:26:26.340
that means when you look at
your watch at your wrist,

00:26:26.340 --> 00:26:29.310
you know what they are
trying to tell you.

00:26:29.310 --> 00:26:30.830
They're easy to tap.

00:26:30.830 --> 00:26:35.530
You don't want to fumble on
the UI to try to take action.

00:26:35.530 --> 00:26:39.210
And help users
complete tasks quickly.

00:26:39.210 --> 00:26:42.140
So help your users go
from A to B quickly,

00:26:42.140 --> 00:26:46.464
don't add unnecessary
steps in between.

00:26:46.464 --> 00:26:48.130
They keep you connected
to both the real

00:26:48.130 --> 00:26:49.780
and the virtual worlds.

00:26:49.780 --> 00:26:54.160
And we look forward to
see what you come up with.

00:26:54.160 --> 00:26:56.860
Wear apps should be designed
to support your app's core

00:26:56.860 --> 00:26:58.690
functionality.

00:26:58.690 --> 00:27:01.080
Don't include unnecessary
features, actions,

00:27:01.080 --> 00:27:04.920
or content in your app's UI.

00:27:04.920 --> 00:27:07.750
So if you look at the example
of the email app, the Mailbox

00:27:07.750 --> 00:27:11.330
fake app, you probably
want to include the ability

00:27:11.330 --> 00:27:16.180
to reply to messages or
to compose new messages.

00:27:16.180 --> 00:27:19.840
And maybe on a watch, you
don't want to print your email.

00:27:19.840 --> 00:27:21.340
I mean who does
print, email anyway?

00:27:21.340 --> 00:27:23.460
But you don't want to print
email from your watch.

00:27:23.460 --> 00:27:24.240
Right?

00:27:24.240 --> 00:27:28.254
Or add a label or a show
original HTML content, probably

00:27:28.254 --> 00:27:29.920
that's not the kind
of functionality you

00:27:29.920 --> 00:27:33.740
want to have on a watch app.

00:27:33.740 --> 00:27:36.340
The last thing is when
you design for watches,

00:27:36.340 --> 00:27:40.350
design for round devices first.

00:27:40.350 --> 00:27:42.950
Unlike phones that have
rectangular screens,

00:27:42.950 --> 00:27:45.700
the majority of Android
Wear devices in the market

00:27:45.700 --> 00:27:48.540
have a round screen.

00:27:48.540 --> 00:27:53.300
A circle fits within a square
and has a 22% smaller surface

00:27:53.300 --> 00:27:54.240
area.

00:27:54.240 --> 00:27:57.060
With that, you make sure that
your layouts were both on round

00:27:57.060 --> 00:28:00.130
and square devices.

00:28:00.130 --> 00:28:03.540
Round screens have a
smaller usable surface.

00:28:03.540 --> 00:28:06.540
So remember, a circle
fits inside of a square,

00:28:06.540 --> 00:28:09.040
and if you put another square
inside of that circle-- I know

00:28:09.040 --> 00:28:12.040
this will be crazy, but-- the
square inside that circle,

00:28:12.040 --> 00:28:13.790
that's your safe area.

00:28:13.790 --> 00:28:17.490
So don't put important
information outside

00:28:17.490 --> 00:28:19.720
of that square
inside the circle.

00:28:19.720 --> 00:28:24.370
So the edges around
that circle, those

00:28:24.370 --> 00:28:27.970
are probably the parts
of the UI that you

00:28:27.970 --> 00:28:29.800
want to put your
secondary information.

00:28:29.800 --> 00:28:31.800
They're also pretty small,
so you don't want to,

00:28:31.800 --> 00:28:36.850
for example in the top edge
of the circle-- if you squeeze

00:28:36.850 --> 00:28:38.870
a title there, it's
going to be very small.

00:28:38.870 --> 00:28:44.490
So for primary information,
use the center of the circle.

00:28:44.490 --> 00:28:47.120
The same is for text.

00:28:47.120 --> 00:28:49.770
For laying text in
a circular device,

00:28:49.770 --> 00:28:51.740
you also have to observe
the same margins.

00:28:51.740 --> 00:28:53.300
And margins for
circular devices have

00:28:53.300 --> 00:28:57.295
to be a little bit wider to
have a more pleasant experience.

00:29:00.030 --> 00:29:02.000
PAUL SOULOS: So how do
you build for both round

00:29:02.000 --> 00:29:03.650
and square devices?

00:29:03.650 --> 00:29:07.630
Well, we added some new resource
qualifiers to help you do this.

00:29:07.630 --> 00:29:11.960
On the top, we have, under our
resources, a values-notround.

00:29:11.960 --> 00:29:13.580
So here we're going
to find things

00:29:13.580 --> 00:29:16.140
that we want to use
for our square screens.

00:29:16.140 --> 00:29:18.730
So in the dimensions file,
we have a left padding

00:29:18.730 --> 00:29:20.360
defined with 12dp.

00:29:20.360 --> 00:29:23.894
So this just moves the content
in a little bit from the bezel,

00:29:23.894 --> 00:29:26.060
and gives a little white
space to make a better user

00:29:26.060 --> 00:29:27.340
experience.

00:29:27.340 --> 00:29:29.931
As JP just discussed,
on round screens,

00:29:29.931 --> 00:29:32.180
you're going to want to move
content in a little more.

00:29:32.180 --> 00:29:36.200
So on the bottom, we're
defining a values-round folder.

00:29:36.200 --> 00:29:38.590
And within that, we're creating
another dimensions file.

00:29:38.590 --> 00:29:42.650
Here we're overriding the
left padding to use 36dp.

00:29:42.650 --> 00:29:45.950
So here, if you're using a
round device, at runtime,

00:29:45.950 --> 00:29:48.300
the application will
choose which to use.

00:29:48.300 --> 00:29:51.160
So it in this case, it'll
use 36 and push the content

00:29:51.160 --> 00:29:53.100
in a little further
away from the edge.

00:29:53.100 --> 00:29:55.230
This doesn't just apply
to the values folder,

00:29:55.230 --> 00:29:57.210
but anything in the
resource directory.

00:29:57.210 --> 00:30:00.290
For instance, you
can have layout-round

00:30:00.290 --> 00:30:02.590
if you want a completely
different layout for a round

00:30:02.590 --> 00:30:05.310
device.

00:30:05.310 --> 00:30:08.120
It's important to use
your apps as a user would.

00:30:08.120 --> 00:30:10.520
You may develop docked at
your desk or on an emulator,

00:30:10.520 --> 00:30:12.470
but watches are worn on a wrist.

00:30:12.470 --> 00:30:15.100
For this new form factor,
it's very important

00:30:15.100 --> 00:30:17.680
that you do some real world
testing, which you may not

00:30:17.680 --> 00:30:19.950
be as used to with a phone.

00:30:19.950 --> 00:30:22.900
A great way to test is to
get up, put your watch on, go

00:30:22.900 --> 00:30:25.020
outside, and maybe take a run.

00:30:25.020 --> 00:30:27.860
Imagine you're building
a fitness application,

00:30:27.860 --> 00:30:29.780
and everything works
great at your desk.

00:30:29.780 --> 00:30:32.480
You follow the Material
Design principles,

00:30:32.480 --> 00:30:34.400
everything is really
fluid and snappy.

00:30:34.400 --> 00:30:35.250
It's great.

00:30:35.250 --> 00:30:38.750
But before you ship it to users,
you put it on and go for a run.

00:30:38.750 --> 00:30:40.960
Once you're exercising
and breathing heavily,

00:30:40.960 --> 00:30:42.510
you may notice that
the buttons that

00:30:42.510 --> 00:30:44.094
were really easy to
click at your desk

00:30:44.094 --> 00:30:46.468
are a little bit more difficult
when your wrist is moving

00:30:46.468 --> 00:30:48.060
around and creates
a moving target,

00:30:48.060 --> 00:30:49.440
because you're
breathing heavily.

00:30:49.440 --> 00:30:51.406
So now you go back
to your desk, create

00:30:51.406 --> 00:30:53.780
the buttons a little larger,
and by the time you ship it,

00:30:53.780 --> 00:30:57.017
the users are going to
have a great experience.

00:30:57.017 --> 00:30:59.100
PAUL SOULOS: Thank you for
attending this session.

00:30:59.100 --> 00:31:01.120
JP and I really
hope you enjoyed it.

00:31:01.120 --> 00:31:03.600
We want to teach you not
only how to design and build

00:31:03.600 --> 00:31:06.690
wearable apps, but also why
the design decisions we made

00:31:06.690 --> 00:31:10.070
are practical for small
and various form factors.

00:31:10.070 --> 00:31:11.940
You can start building
apps today by going

00:31:11.940 --> 00:31:15.720
g.co/wearpreview.

00:31:15.720 --> 00:31:17.820
The next session in this
room is on watch faces

00:31:17.820 --> 00:31:19.147
and complications.

00:31:19.147 --> 00:31:20.980
And if you missed any
of the sessions today,

00:31:20.980 --> 00:31:24.300
they'll all be available
on YouTube shortly.

00:31:24.300 --> 00:31:26.170
One of the reasons
we're doing this preview

00:31:26.170 --> 00:31:27.530
is to get your feedback.

00:31:27.530 --> 00:31:29.670
So please use the
Wearable Preview,

00:31:29.670 --> 00:31:33.130
and if you have any API
suggestions or find any bugs,

00:31:33.130 --> 00:31:39.512
you can let us know at
g.co/wearpreviewbug.

00:31:39.512 --> 00:31:40.720
JP GIL : Thank you very much.

00:31:40.720 --> 00:31:41.636
PAUL SOULOS: Thank you

00:31:41.636 --> 00:31:45.340
[APPLAUSE]

00:31:45.340 --> 00:31:51.000
[MUSIC PLAYING]

