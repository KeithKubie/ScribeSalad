WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:01.230
&gt;&gt; Okay, Michael.

00:00:01.230 --> 00:00:03.650
&gt;&gt; Okay, so problem one, where you're maximizing the

00:00:03.650 --> 00:00:06.970
number of 1s, to represent the optima here, or the

00:00:06.970 --> 00:00:10.360
influence of any given bit on the fitness value,

00:00:10.360 --> 00:00:14.090
they're all independent. They all just contribute whatever they contribute.

00:00:14.090 --> 00:00:16.620
And so I don't see any reason to capture

00:00:16.620 --> 00:00:20.030
other dependencies. We're, we're, you know, local information is enough.

00:00:20.030 --> 00:00:22.100
Is that, is that enough to say that the answer,

00:00:22.100 --> 00:00:24.670
that the one goes in the last box for independent?

00:00:24.670 --> 00:00:25.220
&gt;&gt; That's correct.

00:00:27.170 --> 00:00:28.654
&gt;&gt; But it's, I guess, I guess what

00:00:28.654 --> 00:00:30.615
I don't quite understand is in, in the case

00:00:30.615 --> 00:00:32.363
of the, so we want to know, what's the

00:00:32.363 --> 00:00:35.675
probability, yeah, it's a funny thing we're representing, right?

00:00:35.675 --> 00:00:36.057
&gt;&gt; Yeah.

00:00:36.057 --> 00:00:38.811
&gt;&gt; So if we, the, like, the third position, we're saying,

00:00:38.811 --> 00:00:41.511
well what's the probability that if this is a 1 that we're

00:00:41.511 --> 00:00:44.481
going to be above a certain value, and what's the probability if,

00:00:44.481 --> 00:00:47.287
if it's a zero, we're going to be above a certain value.

00:00:47.287 --> 00:00:48.060
&gt;&gt; Mm-hm.

00:00:48.060 --> 00:00:49.985
&gt;&gt; And that doesn't really exactly capture

00:00:49.985 --> 00:00:52.267
the way the fitness function works. But

00:00:52.267 --> 00:00:55.207
I guess, oh, I guess because we're drawing from, we're drawing the

00:00:55.207 --> 00:00:57.910
rest of the things at random, the rest of the values at random?

00:00:57.910 --> 00:00:59.350
&gt;&gt; Mm-hm. Yeah, we are.

00:00:59.350 --> 00:01:01.970
&gt;&gt; So is that where the meaning comes from, then?

00:01:01.970 --> 00:01:05.948
&gt;&gt; Yeah, think about it this way. Remember, the probability distribution

00:01:05.948 --> 00:01:10.264
that we care about, p sub theta, is basically uniform for all

00:01:10.264 --> 00:01:14.165
x's such that the fitness value is greater than or equal

00:01:14.165 --> 00:01:17.800
to theta. So imagine we start out with theta equal to 0,

00:01:17.800 --> 00:01:19.610
let's say, which is the lowest value that you could

00:01:19.610 --> 00:01:22.940
get? Well then, what's probability of bit 1 being a 1?

00:01:22.940 --> 00:01:23.940
&gt;&gt; Okay

00:01:23.940 --> 00:01:26.157
&gt;&gt; For all values greater than or equal to, well, it's 1/2.

00:01:26.157 --> 00:01:26.602
&gt;&gt; Okay.

00:01:26.602 --> 00:01:30.400
&gt;&gt; Because every single value is okay. And so

00:01:30.400 --> 00:01:32.896
in order to get a uniform distribution across n

00:01:32.896 --> 00:01:37.320
bits, I can sample each bit independently, uniformly, and

00:01:37.320 --> 00:01:40.190
that will give me an overall uniform distribution. Agreed?

00:01:40.190 --> 00:01:40.926
&gt;&gt; I do agree with that, yeah.

00:01:40.926 --> 00:01:42.917
&gt;&gt; Okay. Now, at the very, very end,

00:01:42.917 --> 00:01:47.150
when I have all 1s as the maximum value, that's also easy to represent.

00:01:47.150 --> 00:01:49.588
Because the probability, what's the probability of

00:01:49.588 --> 00:01:51.775
bit 1 being 1? For the optimum value.

00:01:51.775 --> 00:01:52.470
&gt;&gt; 1.

00:01:52.470 --> 00:01:54.628
&gt;&gt; Yes, the probability of bit 2 is?

00:01:54.628 --> 00:01:55.307
&gt;&gt; 1.

00:01:55.307 --> 00:01:57.117
&gt;&gt; And the probability of bit 3?

00:01:57.117 --> 00:01:59.530
&gt;&gt; Point, no, 1.

00:01:59.530 --> 00:02:02.710
&gt;&gt; Exactly, and they all can be independently represented.

00:02:02.710 --> 00:02:05.423
So we can definitely represent the minimum theta value.

00:02:05.423 --> 00:02:06.339
&gt;&gt; Streams, yeah.

00:02:06.339 --> 00:02:08.070
&gt;&gt; Yeah, so, we can represent the maximum.

00:02:08.070 --> 00:02:10.788
The question here is, or at least in terms of, you know, you're

00:02:10.788 --> 00:02:14.380
likely to find the answer. The question here is, can this distribution represent

00:02:14.380 --> 00:02:17.740
values of theta in between? So imagine theta was, let's say I had

00:02:17.740 --> 00:02:23.321
four bits here, like we're doing here. And let's imagine theta was 2.

00:02:23.321 --> 00:02:23.903
&gt;&gt; Good.

00:02:23.903 --> 00:02:28.355
&gt;&gt; Now, notice that when theta is 2, it's not just the number of

00:02:28.355 --> 00:02:33.311
points that will give you exactly 2, it's the ones that will give you

00:02:33.311 --> 00:02:34.700
at least 2. 2.

00:02:34.700 --> 00:02:38.920
&gt;&gt; Right. And 3, and 4. So how many

00:02:38.920 --> 00:02:41.770
different ways are there to get 4? Well, there's only

00:02:41.770 --> 00:02:44.650
one way to get a value of 4, and that

00:02:44.650 --> 00:02:47.385
is all 1s. How many different ways can you do

00:02:47.385 --> 00:02:50.520
3? Well, there's 4 ways to get 3. You

00:02:50.520 --> 00:02:51.975
basically have to choose the one that you give as

00:02:51.975 --> 00:02:55.420
0, right? And each one of those bits, each one

00:02:55.420 --> 00:02:58.320
of these values will be a 1, three quarters of

00:02:58.320 --> 00:03:02.260
the time. And how many different ways can you

00:03:02.260 --> 00:03:06.740
get 2? Well it's n choose 2, which is, something.

00:03:06.740 --> 00:03:07.075
&gt;&gt; 6.

00:03:07.075 --> 00:03:11.000
&gt;&gt; 6, so you can actually write all of those out and count

00:03:11.000 --> 00:03:14.910
the number of times that each one is a 1. And those are all

00:03:14.910 --> 00:03:17.990
your samples, and you just simply estimate it. And you'll end up with a

00:03:17.990 --> 00:03:20.938
uniform distribution which will be consistent with

00:03:20.938 --> 00:03:23.149
the examples that I just sampled from,

00:03:23.149 --> 00:03:27.723
but will probably not exactly capture p sub theta. because it will sometimes be

00:03:27.723 --> 00:03:32.960
able to generate with probability greater than 0, say, a value of all 0s.

00:03:32.960 --> 00:03:35.440
&gt;&gt; Yes, okay, good. That was what I was concerned about. And

00:03:35.440 --> 00:03:38.600
so this is, this is just an approximation, even in the simple case.

00:03:38.600 --> 00:03:40.965
&gt;&gt; Right. And so, and that's actually

00:03:40.965 --> 00:03:43.970
pretty interesting, right? So, yeah, we know that

00:03:43.970 --> 00:03:45.630
the extreme values can be represented by

00:03:45.630 --> 00:03:48.220
an independent distribution, but it's not clear that

00:03:48.220 --> 00:03:51.250
all the values in between can be represented by

00:03:51.250 --> 00:03:53.230
such a simple distribution. But that's always going to be

00:03:53.230 --> 00:03:55.700
the case. What you want is a distribution that

00:03:55.700 --> 00:04:01.450
will definitely capture the optimum and, or optima, and gives

00:04:01.450 --> 00:04:04.090
you a good chance of generating samples that get

00:04:04.090 --> 00:04:06.398
you closer to the optimum along the way. So even

00:04:06.398 --> 00:04:09.596
though in the case before where theta is 2,

00:04:09.596 --> 00:04:13.262
we might still generate examples where you get a fitness

00:04:13.262 --> 00:04:17.317
of 0 or 1, you have a high probability if you generate enough

00:04:17.317 --> 00:04:22.792
samples of actually getting values of theta greater than 2, 3, or 4, even.

00:04:22.792 --> 00:04:23.355
&gt;&gt; Got it.

00:04:23.355 --> 00:04:24.047
&gt;&gt; Okay.

00:04:24.047 --> 00:04:26.495
&gt;&gt; Alright, so I, so, given that, I think I can do the next

00:04:26.495 --> 00:04:28.630
two without too much more difficulty. So,

00:04:28.630 --> 00:04:31.030
for number 2 problem 2, maximize the number

00:04:31.030 --> 00:04:35.610
of alternations, we pointed out that it's really important to, to know who your,

00:04:35.610 --> 00:04:36.930
what your neighbor is, because you want

00:04:36.930 --> 00:04:38.360
to be a different value than your neighbor.

00:04:38.360 --> 00:04:38.991
&gt;&gt; Mm-hm.

00:04:38.991 --> 00:04:42.480
&gt;&gt; And the chain gives you exactly that information without anything extra.

00:04:42.480 --> 00:04:42.930
&gt;&gt; Right.

00:04:42.930 --> 00:04:44.660
&gt;&gt; So I would put the 2 in the first box.

00:04:44.660 --> 00:04:45.930
&gt;&gt; Yep.

00:04:45.930 --> 00:04:49.340
&gt;&gt; And finally, well, there's only one box left. So I'd put the 3

00:04:49.340 --> 00:04:52.890
in the middle box. But I guess the interesting to, to look at here

00:04:52.890 --> 00:04:55.710
is that it is surprisingly appropriate, right?

00:04:55.710 --> 00:04:58.070
So, that the coloring problem, it is

00:04:58.070 --> 00:05:01.340
specifically saying, well, the, my value depends

00:05:01.340 --> 00:05:03.370
on, you know, what's a good value

00:05:03.370 --> 00:05:06.130
for me depends on, I guess, several of my neighbors, not just one.

00:05:06.130 --> 00:05:07.230
&gt;&gt; Right.

00:05:07.230 --> 00:05:08.810
&gt;&gt; But I feel I could, you could capture a

00:05:08.810 --> 00:05:13.220
lot of the necessary information by finding a good dependency tree.

00:05:13.220 --> 00:05:18.400
&gt;&gt; Right. And it turns out that in practice, as our readers

00:05:18.400 --> 00:05:21.700
and listeners will see, from one of the resources that we're making

00:05:21.700 --> 00:05:25.320
available to them, that in practice, mimic does very well on problems

00:05:25.320 --> 00:05:28.490
like this. Even where you have really complicated graph structures. It tends

00:05:28.490 --> 00:05:29.890
to do much better than a lot of the other

00:05:29.890 --> 00:05:34.030
randomized optimization problems. And that's because what we've got here

00:05:34.030 --> 00:05:36.880
in this graph is structure. And what mimic is trying

00:05:36.880 --> 00:05:39.500
to represent, is in fact, structure. In fact, in all

00:05:39.500 --> 00:05:42.240
of these cases, well, except for the, the first case.

00:05:42.240 --> 00:05:46.250
There's not a single answer often. There are possibly many

00:05:46.250 --> 00:05:49.830
answers, but the answers all have in common their relationship

00:05:49.830 --> 00:05:53.674
to one, to some underlying structure. So in the maximizing

00:05:53.674 --> 00:05:59.498
alternations case, you have 010101 or 101010. These are

00:05:59.498 --> 00:06:02.200
two completely different values. In fact, as you pointed out

00:06:02.200 --> 00:06:05.890
when I asked you this earlier, they're complimentary. But,

00:06:05.890 --> 00:06:08.920
each one has a very simple structure, which is, every

00:06:08.920 --> 00:06:11.730
bit is different from its neighbor to the l,

00:06:11.730 --> 00:06:13.810
actually both of its neighbors. Every bit is different from

00:06:13.810 --> 00:06:17.150
its neighbors. And that doesn't matter what their values are.

00:06:17.150 --> 00:06:19.150
Given the value of one of them, it actually completely

00:06:19.150 --> 00:06:22.440
determines the value of everything else. And so mimic doesn't

00:06:22.440 --> 00:06:24.560
get lost trying to bounce back and forth between this

00:06:24.560 --> 00:06:28.580
possible maximum and this possible maximum. Instead, it represents both

00:06:28.580 --> 00:06:30.250
of them at the same time. Because the only thing

00:06:30.250 --> 00:06:32.810
that matters is the relationships. So, in fact, that gets

00:06:32.810 --> 00:06:34.990
us to the last bit of things I wanted to

00:06:34.990 --> 00:06:38.090
talk about, which are sort of practical features of mimic

00:06:38.090 --> 00:06:39.790
and what we kind of learn by thinking this way.

