WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:03.519
[Music]

00:00:03.519 --> 00:00:03.529
[Music]
 

00:00:03.529 --> 00:00:06.559
[Music]
good afternoon welcome my name is Jerome

00:00:06.559 --> 00:00:06.569
good afternoon welcome my name is Jerome
 

00:00:06.569 --> 00:00:08.390
good afternoon welcome my name is Jerome
do--she and I'm the belt system lead at

00:00:08.390 --> 00:00:08.400
do--she and I'm the belt system lead at
 

00:00:08.400 --> 00:00:11.030
do--she and I'm the belt system lead at
Google hi I'm Leo Samer product manager

00:00:11.030 --> 00:00:11.040
Google hi I'm Leo Samer product manager
 

00:00:11.040 --> 00:00:13.730
Google hi I'm Leo Samer product manager
and Android team and I'm jvo chakra I'm

00:00:13.730 --> 00:00:13.740
and Android team and I'm jvo chakra I'm
 

00:00:13.740 --> 00:00:16.369
and Android team and I'm jvo chakra I'm
a lead for the developer tools ok let's

00:00:16.369 --> 00:00:16.379
a lead for the developer tools ok let's
 

00:00:16.379 --> 00:00:18.500
a lead for the developer tools ok let's
start with what we worked on last year

00:00:18.500 --> 00:00:18.510
start with what we worked on last year
 

00:00:18.510 --> 00:00:21.429
start with what we worked on last year
so the very first thing that we did was

00:00:21.429 --> 00:00:21.439
so the very first thing that we did was
 

00:00:21.439 --> 00:00:23.480
so the very first thing that we did was
you know we've been working on namespace

00:00:23.480 --> 00:00:23.490
you know we've been working on namespace
 

00:00:23.490 --> 00:00:25.700
you know we've been working on namespace
resources German I actually stood here

00:00:25.700 --> 00:00:25.710
resources German I actually stood here
 

00:00:25.710 --> 00:00:27.620
resources German I actually stood here
last year and we talked a lot about

00:00:27.620 --> 00:00:27.630
last year and we talked a lot about
 

00:00:27.630 --> 00:00:31.130
last year and we talked a lot about
namespace resources and sadly it has not

00:00:31.130 --> 00:00:31.140
namespace resources and sadly it has not
 

00:00:31.140 --> 00:00:33.410
namespace resources and sadly it has not
shipped yet we have gotten a lot of

00:00:33.410 --> 00:00:33.420
shipped yet we have gotten a lot of
 

00:00:33.420 --> 00:00:35.360
shipped yet we have gotten a lot of
feedback from you and we're very happy

00:00:35.360 --> 00:00:35.370
feedback from you and we're very happy
 

00:00:35.370 --> 00:00:37.069
feedback from you and we're very happy
for that thank you

00:00:37.069 --> 00:00:37.079
for that thank you
 

00:00:37.079 --> 00:00:40.220
for that thank you
and as we kept working on it we realized

00:00:40.220 --> 00:00:40.230
and as we kept working on it we realized
 

00:00:40.230 --> 00:00:43.340
and as we kept working on it we realized
a couple of things the first one is we

00:00:43.340 --> 00:00:43.350
a couple of things the first one is we
 

00:00:43.350 --> 00:00:46.340
a couple of things the first one is we
need we needed more features from Gradle

00:00:46.340 --> 00:00:46.350
need we needed more features from Gradle
 

00:00:46.350 --> 00:00:49.160
need we needed more features from Gradle
in order to efficiently process areas

00:00:49.160 --> 00:00:49.170
in order to efficiently process areas
 

00:00:49.170 --> 00:00:51.500
in order to efficiently process areas
that are not namespaced enabled but you

00:00:51.500 --> 00:00:51.510
that are not namespaced enabled but you
 

00:00:51.510 --> 00:00:52.760
that are not namespaced enabled but you
still want to consume in a namespace

00:00:52.760 --> 00:00:52.770
still want to consume in a namespace
 

00:00:52.770 --> 00:00:55.189
still want to consume in a namespace
module so we've been working with a

00:00:55.189 --> 00:00:55.199
module so we've been working with a
 

00:00:55.199 --> 00:00:56.600
module so we've been working with a
greater team very closely over the last

00:00:56.600 --> 00:00:56.610
greater team very closely over the last
 

00:00:56.610 --> 00:00:58.639
greater team very closely over the last
years and we got that down so it's now

00:00:58.639 --> 00:00:58.649
years and we got that down so it's now
 

00:00:58.649 --> 00:01:00.680
years and we got that down so it's now
available in writer the second thing

00:01:00.680 --> 00:01:00.690
available in writer the second thing
 

00:01:00.690 --> 00:01:03.290
available in writer the second thing
that we realized is that studio needed a

00:01:03.290 --> 00:01:03.300
that we realized is that studio needed a
 

00:01:03.300 --> 00:01:05.780
that we realized is that studio needed a
lot of work studio has its own

00:01:05.780 --> 00:01:05.790
lot of work studio has its own
 

00:01:05.790 --> 00:01:08.780
lot of work studio has its own
understanding of resources it passes all

00:01:08.780 --> 00:01:08.790
understanding of resources it passes all
 

00:01:08.790 --> 00:01:10.730
understanding of resources it passes all
your files as you change them it build

00:01:10.730 --> 00:01:10.740
your files as you change them it build
 

00:01:10.740 --> 00:01:13.280
your files as you change them it build
its own index and that is used for code

00:01:13.280 --> 00:01:13.290
its own index and that is used for code
 

00:01:13.290 --> 00:01:17.120
its own index and that is used for code
completion resource references for

00:01:17.120 --> 00:01:17.130
completion resource references for
 

00:01:17.130 --> 00:01:19.580
completion resource references for
navigation as well as rendering and so

00:01:19.580 --> 00:01:19.590
navigation as well as rendering and so
 

00:01:19.590 --> 00:01:21.859
navigation as well as rendering and so
we needed to update this to be able to

00:01:21.859 --> 00:01:21.869
we needed to update this to be able to
 

00:01:21.869 --> 00:01:23.450
we needed to update this to be able to
handle both the important m-space

00:01:23.450 --> 00:01:23.460
handle both the important m-space
 

00:01:23.460 --> 00:01:26.899
handle both the important m-space
projects and non namespace projects and

00:01:26.899 --> 00:01:26.909
projects and non namespace projects and
 

00:01:26.909 --> 00:01:28.550
projects and non namespace projects and
then you're all aware of project mobile

00:01:28.550 --> 00:01:28.560
then you're all aware of project mobile
 

00:01:28.560 --> 00:01:30.200
then you're all aware of project mobile
you know the last six months we've been

00:01:30.200 --> 00:01:30.210
you know the last six months we've been
 

00:01:30.210 --> 00:01:31.910
you know the last six months we've been
working mostly on quality and not on new

00:01:31.910 --> 00:01:31.920
working mostly on quality and not on new
 

00:01:31.920 --> 00:01:33.590
working mostly on quality and not on new
features and so all of that was put on

00:01:33.590 --> 00:01:33.600
features and so all of that was put on
 

00:01:33.600 --> 00:01:36.710
features and so all of that was put on
hold and so as soon as Marvel is done

00:01:36.710 --> 00:01:36.720
hold and so as soon as Marvel is done
 

00:01:36.720 --> 00:01:38.510
hold and so as soon as Marvel is done
then we'll keep working on that and

00:01:38.510 --> 00:01:38.520
then we'll keep working on that and
 

00:01:38.520 --> 00:01:40.700
then we'll keep working on that and
we'll be able to hopefully ship

00:01:40.700 --> 00:01:40.710
we'll be able to hopefully ship
 

00:01:40.710 --> 00:01:42.950
we'll be able to hopefully ship
namespace resources soon in the meantime

00:01:42.950 --> 00:01:42.960
namespace resources soon in the meantime
 

00:01:42.960 --> 00:01:45.530
namespace resources soon in the meantime
we have made some small improvements to

00:01:45.530 --> 00:01:45.540
we have made some small improvements to
 

00:01:45.540 --> 00:01:47.780
we have made some small improvements to
the resource pipeline processing one of

00:01:47.780 --> 00:01:47.790
the resource pipeline processing one of
 

00:01:47.790 --> 00:01:49.969
the resource pipeline processing one of
them for example in library resources we

00:01:49.969 --> 00:01:49.979
them for example in library resources we
 

00:01:49.979 --> 00:01:52.520
them for example in library resources we
directly generate the our class as class

00:01:52.520 --> 00:01:52.530
directly generate the our class as class
 

00:01:52.530 --> 00:01:54.469
directly generate the our class as class
files rather than Java code that needs

00:01:54.469 --> 00:01:54.479
files rather than Java code that needs
 

00:01:54.479 --> 00:01:56.420
files rather than Java code that needs
to be compiled in order to reduce the

00:01:56.420 --> 00:01:56.430
to be compiled in order to reduce the
 

00:01:56.430 --> 00:01:59.810
to be compiled in order to reduce the
strain on the Java compilation we have a

00:01:59.810 --> 00:01:59.820
strain on the Java compilation we have a
 

00:01:59.820 --> 00:02:01.609
strain on the Java compilation we have a
few more changes that I've been going in

00:02:01.609 --> 00:02:01.619
few more changes that I've been going in
 

00:02:01.619 --> 00:02:04.670
few more changes that I've been going in
master very recently you know that we'll

00:02:04.670 --> 00:02:04.680
master very recently you know that we'll
 

00:02:04.680 --> 00:02:08.600
master very recently you know that we'll
be shipping probably in 3.6 all right

00:02:08.600 --> 00:02:08.610
be shipping probably in 3.6 all right
 

00:02:08.610 --> 00:02:09.940
be shipping probably in 3.6 all right
let's talk a little bit about

00:02:09.940 --> 00:02:09.950
let's talk a little bit about
 

00:02:09.950 --> 00:02:12.930
let's talk a little bit about
multi-threading in the envelope again

00:02:12.930 --> 00:02:12.940
multi-threading in the envelope again
 

00:02:12.940 --> 00:02:15.180
multi-threading in the envelope again
so for a few years we've encouraged

00:02:15.180 --> 00:02:15.190
so for a few years we've encouraged
 

00:02:15.190 --> 00:02:18.750
so for a few years we've encouraged
users to go modular because some modules

00:02:18.750 --> 00:02:18.760
users to go modular because some modules
 

00:02:18.760 --> 00:02:21.150
users to go modular because some modules
can be built in parallel that's true

00:02:21.150 --> 00:02:21.160
can be built in parallel that's true
 

00:02:21.160 --> 00:02:22.740
can be built in parallel that's true
because all interactions between some

00:02:22.740 --> 00:02:22.750
because all interactions between some
 

00:02:22.750 --> 00:02:25.200
because all interactions between some
modules have to be done through files so

00:02:25.200 --> 00:02:25.210
modules have to be done through files so
 

00:02:25.210 --> 00:02:27.030
modules have to be done through files so
there's no side effects no side channels

00:02:27.030 --> 00:02:27.040
there's no side effects no side channels
 

00:02:27.040 --> 00:02:28.200
there's no side effects no side channels
so it's really good

00:02:28.200 --> 00:02:28.210
so it's really good
 

00:02:28.210 --> 00:02:29.790
so it's really good
unfortunately that's not true when

00:02:29.790 --> 00:02:29.800
unfortunately that's not true when
 

00:02:29.800 --> 00:02:31.320
unfortunately that's not true when
you're talking about a single module

00:02:31.320 --> 00:02:31.330
you're talking about a single module
 

00:02:31.330 --> 00:02:33.480
you're talking about a single module
right so basically what happens is that

00:02:33.480 --> 00:02:33.490
right so basically what happens is that
 

00:02:33.490 --> 00:02:35.670
right so basically what happens is that
Gradle has to run every single task

00:02:35.670 --> 00:02:35.680
Gradle has to run every single task
 

00:02:35.680 --> 00:02:38.490
Gradle has to run every single task
sequentially so obviously we've tried to

00:02:38.490 --> 00:02:38.500
sequentially so obviously we've tried to
 

00:02:38.500 --> 00:02:41.490
sequentially so obviously we've tried to
improve to optimize things by using

00:02:41.490 --> 00:02:41.500
improve to optimize things by using
 

00:02:41.500 --> 00:02:43.590
improve to optimize things by using
executive services and trying to shard

00:02:43.590 --> 00:02:43.600
executive services and trying to shard
 

00:02:43.600 --> 00:02:45.600
executive services and trying to shard
the implementation of some of our tasks

00:02:45.600 --> 00:02:45.610
the implementation of some of our tasks
 

00:02:45.610 --> 00:02:48.060
the implementation of some of our tasks
but you know it doesn't really fix the

00:02:48.060 --> 00:02:48.070
but you know it doesn't really fix the
 

00:02:48.070 --> 00:02:50.520
but you know it doesn't really fix the
entire issue and on top of that you know

00:02:50.520 --> 00:02:50.530
entire issue and on top of that you know
 

00:02:50.530 --> 00:02:52.290
entire issue and on top of that you know
we have executive services or the

00:02:52.290 --> 00:02:52.300
we have executive services or the
 

00:02:52.300 --> 00:02:53.850
we have executive services or the
plugins they have other executive

00:02:53.850 --> 00:02:53.860
plugins they have other executive
 

00:02:53.860 --> 00:02:55.560
plugins they have other executive
services Caudle demon has its own

00:02:55.560 --> 00:02:55.570
services Caudle demon has its own
 

00:02:55.570 --> 00:02:57.690
services Caudle demon has its own
executive services so the result is that

00:02:57.690 --> 00:02:57.700
executive services so the result is that
 

00:02:57.700 --> 00:03:00.120
executive services so the result is that
we tend to overwhelm the build machines

00:03:00.120 --> 00:03:00.130
we tend to overwhelm the build machines
 

00:03:00.130 --> 00:03:01.800
we tend to overwhelm the build machines
when we read builds that's really not

00:03:01.800 --> 00:03:01.810
when we read builds that's really not
 

00:03:01.810 --> 00:03:05.100
when we read builds that's really not
good so to solve this problem we've

00:03:05.100 --> 00:03:05.110
good so to solve this problem we've
 

00:03:05.110 --> 00:03:08.070
good so to solve this problem we've
worked with Gradle on a new API which is

00:03:08.070 --> 00:03:08.080
worked with Gradle on a new API which is
 

00:03:08.080 --> 00:03:12.030
worked with Gradle on a new API which is
called the workers the workers are

00:03:12.030 --> 00:03:12.040
called the workers the workers are
 

00:03:12.040 --> 00:03:13.980
called the workers the workers are
side-effect free because you have to

00:03:13.980 --> 00:03:13.990
side-effect free because you have to
 

00:03:13.990 --> 00:03:15.780
side-effect free because you have to
basically sell you lies all the input

00:03:15.780 --> 00:03:15.790
basically sell you lies all the input
 

00:03:15.790 --> 00:03:18.090
basically sell you lies all the input
parameters to every work item and it's

00:03:18.090 --> 00:03:18.100
parameters to every work item and it's
 

00:03:18.100 --> 00:03:19.890
parameters to every work item and it's
going to be dis I realized when the work

00:03:19.890 --> 00:03:19.900
going to be dis I realized when the work
 

00:03:19.900 --> 00:03:21.750
going to be dis I realized when the work
item is going to execute so that means

00:03:21.750 --> 00:03:21.760
item is going to execute so that means
 

00:03:21.760 --> 00:03:23.400
item is going to execute so that means
that if you change the parameters after

00:03:23.400 --> 00:03:23.410
that if you change the parameters after
 

00:03:23.410 --> 00:03:26.790
that if you change the parameters after
you do submission the submit II will

00:03:26.790 --> 00:03:26.800
you do submission the submit II will
 

00:03:26.800 --> 00:03:29.130
you do submission the submit II will
never see those changes so there's no no

00:03:29.130 --> 00:03:29.140
never see those changes so there's no no
 

00:03:29.140 --> 00:03:30.710
never see those changes so there's no no
side-effect

00:03:30.710 --> 00:03:30.720
side-effect
 

00:03:30.720 --> 00:03:33.750
side-effect
Gradle cannot so much better maintain

00:03:33.750 --> 00:03:33.760
Gradle cannot so much better maintain
 

00:03:33.760 --> 00:03:36.090
Gradle cannot so much better maintain
the number of threads being used and the

00:03:36.090 --> 00:03:36.100
the number of threads being used and the
 

00:03:36.100 --> 00:03:39.060
the number of threads being used and the
load word the workload so in your sure

00:03:39.060 --> 00:03:39.070
load word the workload so in your sure
 

00:03:39.070 --> 00:03:40.440
load word the workload so in your sure
that you're not going to theoretically

00:03:40.440 --> 00:03:40.450
that you're not going to theoretically
 

00:03:40.450 --> 00:03:43.229
that you're not going to theoretically
overwhelm the machine anymore and on top

00:03:43.229 --> 00:03:43.239
overwhelm the machine anymore and on top
 

00:03:43.239 --> 00:03:45.330
overwhelm the machine anymore and on top
of that it's relatively easy to retrofit

00:03:45.330 --> 00:03:45.340
of that it's relatively easy to retrofit
 

00:03:45.340 --> 00:03:48.720
of that it's relatively easy to retrofit
clusters to use workers so we've been

00:03:48.720 --> 00:03:48.730
clusters to use workers so we've been
 

00:03:48.730 --> 00:03:50.699
clusters to use workers so we've been
quite busy at doing this but let's look

00:03:50.699 --> 00:03:50.709
quite busy at doing this but let's look
 

00:03:50.709 --> 00:03:54.900
quite busy at doing this but let's look
and how this impacts to build by using

00:03:54.900 --> 00:03:54.910
and how this impacts to build by using
 

00:03:54.910 --> 00:03:56.610
and how this impacts to build by using
workers so here we've got a single

00:03:56.610 --> 00:03:56.620
workers so here we've got a single
 

00:03:56.620 --> 00:03:59.729
workers so here we've got a single
module and has three tasks a and you've

00:03:59.729 --> 00:03:59.739
module and has three tasks a and you've
 

00:03:59.739 --> 00:04:02.370
module and has three tasks a and you've
got B and C's which depends on a so on

00:04:02.370 --> 00:04:02.380
got B and C's which depends on a so on
 

00:04:02.380 --> 00:04:04.380
got B and C's which depends on a so on
top of these graphics it's what's

00:04:04.380 --> 00:04:04.390
top of these graphics it's what's
 

00:04:04.390 --> 00:04:05.640
top of these graphics it's what's
happening today when you don't use

00:04:05.640 --> 00:04:05.650
happening today when you don't use
 

00:04:05.650 --> 00:04:07.110
happening today when you don't use
workers right so you've got the three

00:04:07.110 --> 00:04:07.120
workers right so you've got the three
 

00:04:07.120 --> 00:04:09.199
workers right so you've got the three
tasks that have to execute sequentially

00:04:09.199 --> 00:04:09.209
tasks that have to execute sequentially
 

00:04:09.209 --> 00:04:12.750
tasks that have to execute sequentially
now when you use a worker like you can

00:04:12.750 --> 00:04:12.760
now when you use a worker like you can
 

00:04:12.760 --> 00:04:14.280
now when you use a worker like you can
see that the task B is putting a worker

00:04:14.280 --> 00:04:14.290
see that the task B is putting a worker
 

00:04:14.290 --> 00:04:16.140
see that the task B is putting a worker
as soon as the worker is being spawned

00:04:16.140 --> 00:04:16.150
as soon as the worker is being spawned
 

00:04:16.150 --> 00:04:17.940
as soon as the worker is being spawned
because there's no side effect possible

00:04:17.940 --> 00:04:17.950
because there's no side effect possible
 

00:04:17.950 --> 00:04:20.190
because there's no side effect possible
any longer Gradle is capable of electing

00:04:20.190 --> 00:04:20.200
any longer Gradle is capable of electing
 

00:04:20.200 --> 00:04:21.599
any longer Gradle is capable of electing
a new task for execution

00:04:21.599 --> 00:04:21.609
a new task for execution
 

00:04:21.609 --> 00:04:24.330
a new task for execution
so here tax task C can start executing

00:04:24.330 --> 00:04:24.340
so here tax task C can start executing
 

00:04:24.340 --> 00:04:26.250
so here tax task C can start executing
on a different thread

00:04:26.250 --> 00:04:26.260
on a different thread
 

00:04:26.260 --> 00:04:28.620
on a different thread
the worker 4b is completing so obviously

00:04:28.620 --> 00:04:28.630
the worker 4b is completing so obviously
 

00:04:28.630 --> 00:04:30.750
the worker 4b is completing so obviously
it's very positive because t2 in this

00:04:30.750 --> 00:04:30.760
it's very positive because t2 in this
 

00:04:30.760 --> 00:04:34.680
it's very positive because t2 in this
particular case is is much before t1 so

00:04:34.680 --> 00:04:34.690
particular case is is much before t1 so
 

00:04:34.690 --> 00:04:36.240
particular case is is much before t1 so
now if you do more and more of this you

00:04:36.240 --> 00:04:36.250
now if you do more and more of this you
 

00:04:36.250 --> 00:04:37.560
now if you do more and more of this you
can imagine that now there's got to be

00:04:37.560 --> 00:04:37.570
can imagine that now there's got to be
 

00:04:37.570 --> 00:04:39.360
can imagine that now there's got to be
more and more threads being used

00:04:39.360 --> 00:04:39.370
more and more threads being used
 

00:04:39.370 --> 00:04:44.310
more and more threads being used
throughout the build unfortunately you

00:04:44.310 --> 00:04:44.320
throughout the build unfortunately you
 

00:04:44.320 --> 00:04:45.570
throughout the build unfortunately you
can end up in a situation which is not

00:04:45.570 --> 00:04:45.580
can end up in a situation which is not
 

00:04:45.580 --> 00:04:47.780
can end up in a situation which is not
exactly what you wanted in particular

00:04:47.780 --> 00:04:47.790
exactly what you wanted in particular
 

00:04:47.790 --> 00:04:50.700
exactly what you wanted in particular
workers are an implementation detail of

00:04:50.700 --> 00:04:50.710
workers are an implementation detail of
 

00:04:50.710 --> 00:04:52.650
workers are an implementation detail of
your task implementation so basically

00:04:52.650 --> 00:04:52.660
your task implementation so basically
 

00:04:52.660 --> 00:04:54.420
your task implementation so basically
that means that there is no decoration

00:04:54.420 --> 00:04:54.430
that means that there is no decoration
 

00:04:54.430 --> 00:04:56.760
that means that there is no decoration
Caudill does not know if your task is

00:04:56.760 --> 00:04:56.770
Caudill does not know if your task is
 

00:04:56.770 --> 00:04:58.620
Caudill does not know if your task is
going to be using workers or if it's not

00:04:58.620 --> 00:04:58.630
going to be using workers or if it's not
 

00:04:58.630 --> 00:05:00.780
going to be using workers or if it's not
going to be workers so it cannot like in

00:05:00.780 --> 00:05:00.790
going to be workers so it cannot like in
 

00:05:00.790 --> 00:05:02.970
going to be workers so it cannot like in
a select your task just because it seems

00:05:02.970 --> 00:05:02.980
a select your task just because it seems
 

00:05:02.980 --> 00:05:04.980
a select your task just because it seems
it's gonna be faster so in this

00:05:04.980 --> 00:05:04.990
it's gonna be faster so in this
 

00:05:04.990 --> 00:05:07.320
it's gonna be faster so in this
particular case it decided to schedule

00:05:07.320 --> 00:05:07.330
particular case it decided to schedule
 

00:05:07.330 --> 00:05:09.450
particular case it decided to schedule
tasks see before test be nothing

00:05:09.450 --> 00:05:09.460
tasks see before test be nothing
 

00:05:09.460 --> 00:05:11.130
tasks see before test be nothing
prevents it from doing that and when

00:05:11.130 --> 00:05:11.140
prevents it from doing that and when
 

00:05:11.140 --> 00:05:13.470
prevents it from doing that and when
that happen well we fall back into where

00:05:13.470 --> 00:05:13.480
that happen well we fall back into where
 

00:05:13.480 --> 00:05:15.240
that happen well we fall back into where
we started really because the tasks the

00:05:15.240 --> 00:05:15.250
we started really because the tasks the
 

00:05:15.250 --> 00:05:17.910
we started really because the tasks the
executive or because there's no other

00:05:17.910 --> 00:05:17.920
executive or because there's no other
 

00:05:17.920 --> 00:05:21.840
executive or because there's no other
possible parallelism that can happen

00:05:21.840 --> 00:05:21.850
possible parallelism that can happen
 

00:05:21.850 --> 00:05:23.910
possible parallelism that can happen
that as we will have to wait for task C

00:05:23.910 --> 00:05:23.920
that as we will have to wait for task C
 

00:05:23.920 --> 00:05:25.440
that as we will have to wait for task C
to be finished and then the workers will

00:05:25.440 --> 00:05:25.450
to be finished and then the workers will
 

00:05:25.450 --> 00:05:26.580
to be finished and then the workers will
be spooned but at that point there's

00:05:26.580 --> 00:05:26.590
be spooned but at that point there's
 

00:05:26.590 --> 00:05:29.310
be spooned but at that point there's
nothing less nothing else to be run so

00:05:29.310 --> 00:05:29.320
nothing less nothing else to be run so
 

00:05:29.320 --> 00:05:30.990
nothing less nothing else to be run so
basically you end up exactly the same

00:05:30.990 --> 00:05:31.000
basically you end up exactly the same
 

00:05:31.000 --> 00:05:32.880
basically you end up exactly the same
situation as you started from so it's

00:05:32.880 --> 00:05:32.890
situation as you started from so it's
 

00:05:32.890 --> 00:05:36.500
situation as you started from so it's
not that great right so to fix this is

00:05:36.500 --> 00:05:36.510
not that great right so to fix this is
 

00:05:36.510 --> 00:05:40.200
not that great right so to fix this is
basically to switch all of your tasks to

00:05:40.200 --> 00:05:40.210
basically to switch all of your tasks to
 

00:05:40.210 --> 00:05:42.810
basically to switch all of your tasks to
use workers because at that point if you

00:05:42.810 --> 00:05:42.820
use workers because at that point if you
 

00:05:42.820 --> 00:05:44.540
use workers because at that point if you
go back to test B being generated

00:05:44.540 --> 00:05:44.550
go back to test B being generated
 

00:05:44.550 --> 00:05:47.160
go back to test B being generated
executive first you can see that the

00:05:47.160 --> 00:05:47.170
executive first you can see that the
 

00:05:47.170 --> 00:05:50.010
executive first you can see that the
task C being scheduled as soon as the

00:05:50.010 --> 00:05:50.020
task C being scheduled as soon as the
 

00:05:50.020 --> 00:05:53.700
task C being scheduled as soon as the
worker for that as B starts because you

00:05:53.700 --> 00:05:53.710
worker for that as B starts because you
 

00:05:53.710 --> 00:05:55.410
worker for that as B starts because you
have a worker C it really does not

00:05:55.410 --> 00:05:55.420
have a worker C it really does not
 

00:05:55.420 --> 00:05:59.100
have a worker C it really does not
impact the overall build time but if

00:05:59.100 --> 00:05:59.110
impact the overall build time but if
 

00:05:59.110 --> 00:06:01.020
impact the overall build time but if
gradall decides that he wants to

00:06:01.020 --> 00:06:01.030
gradall decides that he wants to
 

00:06:01.030 --> 00:06:03.750
gradall decides that he wants to
schedule tasks C first you can see now

00:06:03.750 --> 00:06:03.760
schedule tasks C first you can see now
 

00:06:03.760 --> 00:06:06.990
schedule tasks C first you can see now
that the task B will complete a lot

00:06:06.990 --> 00:06:07.000
that the task B will complete a lot
 

00:06:07.000 --> 00:06:09.300
that the task B will complete a lot
earlier than what we've seen before

00:06:09.300 --> 00:06:09.310
earlier than what we've seen before
 

00:06:09.310 --> 00:06:14.000
earlier than what we've seen before
right so this is very brief description

00:06:14.000 --> 00:06:14.010
right so this is very brief description
 

00:06:14.010 --> 00:06:16.680
right so this is very brief description
but basically what is important to

00:06:16.680 --> 00:06:16.690
but basically what is important to
 

00:06:16.690 --> 00:06:19.860
but basically what is important to
realize is that if you have yourself

00:06:19.860 --> 00:06:19.870
realize is that if you have yourself
 

00:06:19.870 --> 00:06:22.170
realize is that if you have yourself
tasks that you've wrote if you have

00:06:22.170 --> 00:06:22.180
tasks that you've wrote if you have
 

00:06:22.180 --> 00:06:24.720
tasks that you've wrote if you have
yourself a plug-in you really really

00:06:24.720 --> 00:06:24.730
yourself a plug-in you really really
 

00:06:24.730 --> 00:06:26.520
yourself a plug-in you really really
should consider switching all of your

00:06:26.520 --> 00:06:26.530
should consider switching all of your
 

00:06:26.530 --> 00:06:29.190
should consider switching all of your
tasks to use workers we have converted

00:06:29.190 --> 00:06:29.200
tasks to use workers we have converted
 

00:06:29.200 --> 00:06:31.560
tasks to use workers we have converted
90% of the cutter plug-in tasks to

00:06:31.560 --> 00:06:31.570
90% of the cutter plug-in tasks to
 

00:06:31.570 --> 00:06:33.390
90% of the cutter plug-in tasks to
workers so that means we are ready to

00:06:33.390 --> 00:06:33.400
workers so that means we are ready to
 

00:06:33.400 --> 00:06:35.520
workers so that means we are ready to
play well with each other and also with

00:06:35.520 --> 00:06:35.530
play well with each other and also with
 

00:06:35.530 --> 00:06:37.890
play well with each other and also with
ourselves because we've seen that as we

00:06:37.890 --> 00:06:37.900
ourselves because we've seen that as we
 

00:06:37.900 --> 00:06:39.390
ourselves because we've seen that as we
were switching

00:06:39.390 --> 00:06:39.400
were switching
 

00:06:39.400 --> 00:06:41.040
were switching
some other tasks to workers we actually

00:06:41.040 --> 00:06:41.050
some other tasks to workers we actually
 

00:06:41.050 --> 00:06:43.830
some other tasks to workers we actually
accelerated overall real time especially

00:06:43.830 --> 00:06:43.840
accelerated overall real time especially
 

00:06:43.840 --> 00:06:46.590
accelerated overall real time especially
for projects that have a very few number

00:06:46.590 --> 00:06:46.600
for projects that have a very few number
 

00:06:46.600 --> 00:06:48.540
for projects that have a very few number
of modules or even like a single module

00:06:48.540 --> 00:06:48.550
of modules or even like a single module
 

00:06:48.550 --> 00:06:51.180
of modules or even like a single module
so we can stop thing making things more

00:06:51.180 --> 00:06:51.190
so we can stop thing making things more
 

00:06:51.190 --> 00:06:54.779
so we can stop thing making things more
and parallel it's on by default in 3.5

00:06:54.779 --> 00:06:54.789
and parallel it's on by default in 3.5
 

00:06:54.789 --> 00:06:57.450
and parallel it's on by default in 3.5
so you don't have to do anything except

00:06:57.450 --> 00:06:57.460
so you don't have to do anything except
 

00:06:57.460 --> 00:06:59.640
so you don't have to do anything except
if you use Kotlin if you use got in any

00:06:59.640 --> 00:06:59.650
if you use Kotlin if you use got in any
 

00:06:59.650 --> 00:07:01.640
if you use Kotlin if you use got in any
particularly if you use annotations

00:07:01.640 --> 00:07:01.650
particularly if you use annotations
 

00:07:01.650 --> 00:07:04.320
particularly if you use annotations
processors you need to turn it on

00:07:04.320 --> 00:07:04.330
processors you need to turn it on
 

00:07:04.330 --> 00:07:08.100
processors you need to turn it on
4k apt to be able to to leverage the

00:07:08.100 --> 00:07:08.110
4k apt to be able to to leverage the
 

00:07:08.110 --> 00:07:09.990
4k apt to be able to to leverage the
feature I suspect it going to be on by

00:07:09.990 --> 00:07:10.000
feature I suspect it going to be on by
 

00:07:10.000 --> 00:07:11.400
feature I suspect it going to be on by
default pretty soon but so far you have

00:07:11.400 --> 00:07:11.410
default pretty soon but so far you have
 

00:07:11.410 --> 00:07:17.640
default pretty soon but so far you have
to do it manually okay so one other

00:07:17.640 --> 00:07:17.650
to do it manually okay so one other
 

00:07:17.650 --> 00:07:18.930
to do it manually okay so one other
thing that we've worked a lot is

00:07:18.930 --> 00:07:18.940
thing that we've worked a lot is
 

00:07:18.940 --> 00:07:22.950
thing that we've worked a lot is
artifact transform so artifact transform

00:07:22.950 --> 00:07:22.960
artifact transform so artifact transform
 

00:07:22.960 --> 00:07:26.310
artifact transform so artifact transform
a way to process dependencies during

00:07:26.310 --> 00:07:26.320
a way to process dependencies during
 

00:07:26.320 --> 00:07:28.560
a way to process dependencies during
configuration of a project we don't have

00:07:28.560 --> 00:07:28.570
configuration of a project we don't have
 

00:07:28.570 --> 00:07:30.150
configuration of a project we don't have
access to the dependency graph so we

00:07:30.150 --> 00:07:30.160
access to the dependency graph so we
 

00:07:30.160 --> 00:07:31.980
access to the dependency graph so we
don't know how many artifacts you know

00:07:31.980 --> 00:07:31.990
don't know how many artifacts you know
 

00:07:31.990 --> 00:07:34.439
don't know how many artifacts you know
gonna be consuming because it takes time

00:07:34.439 --> 00:07:34.449
gonna be consuming because it takes time
 

00:07:34.449 --> 00:07:36.600
gonna be consuming because it takes time
to resolve the dependencies and so we

00:07:36.600 --> 00:07:36.610
to resolve the dependencies and so we
 

00:07:36.610 --> 00:07:39.920
to resolve the dependencies and so we
cannot create a per task

00:07:39.920 --> 00:07:39.930
cannot create a per task
 

00:07:39.930 --> 00:07:42.120
cannot create a per task
dependency task in case we want to

00:07:42.120 --> 00:07:42.130
dependency task in case we want to
 

00:07:42.130 --> 00:07:44.520
dependency task in case we want to
process dependencies to do extract areas

00:07:44.520 --> 00:07:44.530
process dependencies to do extract areas
 

00:07:44.530 --> 00:07:46.680
process dependencies to do extract areas
or predicting or things like that

00:07:46.680 --> 00:07:46.690
or predicting or things like that
 

00:07:46.690 --> 00:07:49.469
or predicting or things like that
so this is a new API that was introduced

00:07:49.469 --> 00:07:49.479
so this is a new API that was introduced
 

00:07:49.479 --> 00:07:51.750
so this is a new API that was introduced
actually a little while back that we've

00:07:51.750 --> 00:07:51.760
actually a little while back that we've
 

00:07:51.760 --> 00:07:53.159
actually a little while back that we've
been using three since trudeau

00:07:53.159 --> 00:07:53.169
been using three since trudeau
 

00:07:53.169 --> 00:07:55.050
been using three since trudeau
we work very closely with Gradle again

00:07:55.050 --> 00:07:55.060
we work very closely with Gradle again
 

00:07:55.060 --> 00:07:57.990
we work very closely with Gradle again
and we've been using that since 300 in

00:07:57.990 --> 00:07:58.000
and we've been using that since 300 in
 

00:07:58.000 --> 00:07:59.850
and we've been using that since 300 in
order to extract air in a more efficient

00:07:59.850 --> 00:07:59.860
order to extract air in a more efficient
 

00:07:59.860 --> 00:08:01.339
order to extract air in a more efficient
way than we used to do before

00:08:01.339 --> 00:08:01.349
way than we used to do before
 

00:08:01.349 --> 00:08:03.719
way than we used to do before
unfortunately the API was not enough for

00:08:03.719 --> 00:08:03.729
unfortunately the API was not enough for
 

00:08:03.729 --> 00:08:05.570
unfortunately the API was not enough for
to enable us to do things like

00:08:05.570 --> 00:08:05.580
to enable us to do things like
 

00:08:05.580 --> 00:08:08.490
to enable us to do things like
predicting and disagree and there's a

00:08:08.490 --> 00:08:08.500
predicting and disagree and there's a
 

00:08:08.500 --> 00:08:10.649
predicting and disagree and there's a
couple of reasons for that one of them

00:08:10.649 --> 00:08:10.659
couple of reasons for that one of them
 

00:08:10.659 --> 00:08:13.529
couple of reasons for that one of them
it did not allow incremental inputs it

00:08:13.529 --> 00:08:13.539
it did not allow incremental inputs it
 

00:08:13.539 --> 00:08:16.830
it did not allow incremental inputs it
did not really super caching and the

00:08:16.830 --> 00:08:16.840
did not really super caching and the
 

00:08:16.840 --> 00:08:18.000
did not really super caching and the
other thing is that the scheduling was

00:08:18.000 --> 00:08:18.010
other thing is that the scheduling was
 

00:08:18.010 --> 00:08:20.670
other thing is that the scheduling was
not very good we you it used to run as

00:08:20.670 --> 00:08:20.680
not very good we you it used to run as
 

00:08:20.680 --> 00:08:23.219
not very good we you it used to run as
soon just before the output of the

00:08:23.219 --> 00:08:23.229
soon just before the output of the
 

00:08:23.229 --> 00:08:25.649
soon just before the output of the
transform was needed rather than work as

00:08:25.649 --> 00:08:25.659
transform was needed rather than work as
 

00:08:25.659 --> 00:08:28.170
transform was needed rather than work as
soon as the input of the transform was

00:08:28.170 --> 00:08:28.180
soon as the input of the transform was
 

00:08:28.180 --> 00:08:30.629
soon as the input of the transform was
ready so in term of critic saying that

00:08:30.629 --> 00:08:30.639
ready so in term of critic saying that
 

00:08:30.639 --> 00:08:32.310
ready so in term of critic saying that
new scheduling is going to give us a lot

00:08:32.310 --> 00:08:32.320
new scheduling is going to give us a lot
 

00:08:32.320 --> 00:08:34.829
new scheduling is going to give us a lot
of benefits so we've been starting to

00:08:34.829 --> 00:08:34.839
of benefits so we've been starting to
 

00:08:34.839 --> 00:08:36.899
of benefits so we've been starting to
use that for predicting and assuring and

00:08:36.899 --> 00:08:36.909
use that for predicting and assuring and
 

00:08:36.909 --> 00:08:37.949
use that for predicting and assuring and
I'm going to show you a little bit what

00:08:37.949 --> 00:08:37.959
I'm going to show you a little bit what
 

00:08:37.959 --> 00:08:40.769
I'm going to show you a little bit what
that looks like so this is a chrome

00:08:40.769 --> 00:08:40.779
that looks like so this is a chrome
 

00:08:40.779 --> 00:08:42.899
that looks like so this is a chrome
trace output john will talk about this

00:08:42.899 --> 00:08:42.909
trace output john will talk about this
 

00:08:42.909 --> 00:08:46.560
trace output john will talk about this
output in a little and what we have here

00:08:46.560 --> 00:08:46.570
output in a little and what we have here
 

00:08:46.570 --> 00:08:48.230
output in a little and what we have here
is a project with about 100 modules

00:08:48.230 --> 00:08:48.240
is a project with about 100 modules
 

00:08:48.240 --> 00:08:50.740
is a project with about 100 modules
running on a machine with a lot of code

00:08:50.740 --> 00:08:50.750
running on a machine with a lot of code
 

00:08:50.750 --> 00:08:53.470
running on a machine with a lot of code
and every little square is basically a

00:08:53.470 --> 00:08:53.480
and every little square is basically a
 

00:08:53.480 --> 00:08:55.629
and every little square is basically a
task happening in one of the modules and

00:08:55.629 --> 00:08:55.639
task happening in one of the modules and
 

00:08:55.639 --> 00:08:57.160
task happening in one of the modules and
so what you can see here without

00:08:57.160 --> 00:08:57.170
so what you can see here without
 

00:08:57.170 --> 00:08:59.620
so what you can see here without
artifact transform is in order for us to

00:08:59.620 --> 00:08:59.630
artifact transform is in order for us to
 

00:08:59.630 --> 00:09:01.360
artifact transform is in order for us to
schedule predicting we cannot have to

00:09:01.360 --> 00:09:01.370
schedule predicting we cannot have to
 

00:09:01.370 --> 00:09:04.060
schedule predicting we cannot have to
wait until all the modules already and

00:09:04.060 --> 00:09:04.070
wait until all the modules already and
 

00:09:04.070 --> 00:09:06.250
wait until all the modules already and
have been built for us to have a task

00:09:06.250 --> 00:09:06.260
have been built for us to have a task
 

00:09:06.260 --> 00:09:09.280
have been built for us to have a task
that consume all of those outputs and

00:09:09.280 --> 00:09:09.290
that consume all of those outputs and
 

00:09:09.290 --> 00:09:10.960
that consume all of those outputs and
then start doing the predicting and in

00:09:10.960 --> 00:09:10.970
then start doing the predicting and in
 

00:09:10.970 --> 00:09:12.910
then start doing the predicting and in
fact we do it with the dexing of the

00:09:12.910 --> 00:09:12.920
fact we do it with the dexing of the
 

00:09:12.920 --> 00:09:14.439
fact we do it with the dexing of the
main app and so you can see this task

00:09:14.439 --> 00:09:14.449
main app and so you can see this task
 

00:09:14.449 --> 00:09:17.259
main app and so you can see this task
key or two at the end that's you know

00:09:17.259 --> 00:09:17.269
key or two at the end that's you know
 

00:09:17.269 --> 00:09:19.210
key or two at the end that's you know
taking a lot of time and also during a

00:09:19.210 --> 00:09:19.220
taking a lot of time and also during a
 

00:09:19.220 --> 00:09:20.829
taking a lot of time and also during a
time where we can't do that much

00:09:20.829 --> 00:09:20.839
time where we can't do that much
 

00:09:20.839 --> 00:09:22.750
time where we can't do that much
processing because it's very at the end

00:09:22.750 --> 00:09:22.760
processing because it's very at the end
 

00:09:22.760 --> 00:09:26.019
processing because it's very at the end
of the project you know in the app when

00:09:26.019 --> 00:09:26.029
of the project you know in the app when
 

00:09:26.029 --> 00:09:28.090
of the project you know in the app when
all you're done is basically packaging

00:09:28.090 --> 00:09:28.100
all you're done is basically packaging
 

00:09:28.100 --> 00:09:30.120
all you're done is basically packaging
and Dex merging and do a few things

00:09:30.120 --> 00:09:30.130
and Dex merging and do a few things
 

00:09:30.130 --> 00:09:33.490
and Dex merging and do a few things
so with transforms we can schedule that

00:09:33.490 --> 00:09:33.500
so with transforms we can schedule that
 

00:09:33.500 --> 00:09:35.379
so with transforms we can schedule that
or greater schedule that for us much

00:09:35.379 --> 00:09:35.389
or greater schedule that for us much
 

00:09:35.389 --> 00:09:37.689
or greater schedule that for us much
earlier and as soon as a module

00:09:37.689 --> 00:09:37.699
earlier and as soon as a module
 

00:09:37.699 --> 00:09:40.389
earlier and as soon as a module
generates its jar it can schedule the

00:09:40.389 --> 00:09:40.399
generates its jar it can schedule the
 

00:09:40.399 --> 00:09:43.750
generates its jar it can schedule the
predicting library and it can be cached

00:09:43.750 --> 00:09:43.760
predicting library and it can be cached
 

00:09:43.760 --> 00:09:46.629
predicting library and it can be cached
on its own so you have much more caching

00:09:46.629 --> 00:09:46.639
on its own so you have much more caching
 

00:09:46.639 --> 00:09:48.730
on its own so you have much more caching
granularity because you don't cache the

00:09:48.730 --> 00:09:48.740
granularity because you don't cache the
 

00:09:48.740 --> 00:09:52.090
granularity because you don't cache the
whole task that does all the predicting

00:09:52.090 --> 00:09:52.100
whole task that does all the predicting
 

00:09:52.100 --> 00:09:55.120
whole task that does all the predicting
so just on this module on this project

00:09:55.120 --> 00:09:55.130
so just on this module on this project
 

00:09:55.130 --> 00:09:56.740
so just on this module on this project
sorry with hundred modules you can see

00:09:56.740 --> 00:09:56.750
sorry with hundred modules you can see
 

00:09:56.750 --> 00:09:58.720
sorry with hundred modules you can see
that a clean build is improved by 15% by

00:09:58.720 --> 00:09:58.730
that a clean build is improved by 15% by
 

00:09:58.730 --> 00:10:02.530
that a clean build is improved by 15% by
this introduction another thing that

00:10:02.530 --> 00:10:02.540
this introduction another thing that
 

00:10:02.540 --> 00:10:04.569
this introduction another thing that
we've been working on a lot is lazy task

00:10:04.569 --> 00:10:04.579
we've been working on a lot is lazy task
 

00:10:04.579 --> 00:10:06.309
we've been working on a lot is lazy task
configuration we've been working on for

00:10:06.309 --> 00:10:06.319
configuration we've been working on for
 

00:10:06.319 --> 00:10:08.019
configuration we've been working on for
quite a while but we've basically made

00:10:08.019 --> 00:10:08.029
quite a while but we've basically made
 

00:10:08.029 --> 00:10:10.960
quite a while but we've basically made
everything lazy but mostly and we wanted

00:10:10.960 --> 00:10:10.970
everything lazy but mostly and we wanted
 

00:10:10.970 --> 00:10:12.220
everything lazy but mostly and we wanted
to kind of show you the impact that it

00:10:12.220 --> 00:10:12.230
to kind of show you the impact that it
 

00:10:12.230 --> 00:10:14.740
to kind of show you the impact that it
can have so on the left side you have

00:10:14.740 --> 00:10:14.750
can have so on the left side you have
 

00:10:14.750 --> 00:10:16.840
can have so on the left side you have
the same exact module you know hundred

00:10:16.840 --> 00:10:16.850
the same exact module you know hundred
 

00:10:16.850 --> 00:10:18.780
the same exact module you know hundred
project module and odd module projects

00:10:18.780 --> 00:10:18.790
project module and odd module projects
 

00:10:18.790 --> 00:10:20.769
project module and odd module projects
and you can see that if you're running

00:10:20.769 --> 00:10:20.779
and you can see that if you're running
 

00:10:20.779 --> 00:10:22.540
and you can see that if you're running
without a Z task we configure almost

00:10:22.540 --> 00:10:22.550
without a Z task we configure almost
 

00:10:22.550 --> 00:10:24.819
without a Z task we configure almost
19,000 tasks that's a lot of tasks to

00:10:24.819 --> 00:10:24.829
19,000 tasks that's a lot of tasks to
 

00:10:24.829 --> 00:10:27.069
19,000 tasks that's a lot of tasks to
configure and on the right side with the

00:10:27.069 --> 00:10:27.079
configure and on the right side with the
 

00:10:27.079 --> 00:10:29.379
configure and on the right side with the
right flag on we only configure about

00:10:29.379 --> 00:10:29.389
right flag on we only configure about
 

00:10:29.389 --> 00:10:32.949
right flag on we only configure about
3,000 2,400 of which actually needed by

00:10:32.949 --> 00:10:32.959
3,000 2,400 of which actually needed by
 

00:10:32.959 --> 00:10:35.230
3,000 2,400 of which actually needed by
the build and there's a little bit under

00:10:35.230 --> 00:10:35.240
the build and there's a little bit under
 

00:10:35.240 --> 00:10:37.480
the build and there's a little bit under
800 actually created eagerly this is a

00:10:37.480 --> 00:10:37.490
800 actually created eagerly this is a
 

00:10:37.490 --> 00:10:39.790
800 actually created eagerly this is a
bug that we need to fix in our plugin a

00:10:39.790 --> 00:10:39.800
bug that we need to fix in our plugin a
 

00:10:39.800 --> 00:10:41.620
bug that we need to fix in our plugin a
few of them actually needed the some of

00:10:41.620 --> 00:10:41.630
few of them actually needed the some of
 

00:10:41.630 --> 00:10:43.809
few of them actually needed the some of
them are not and when you look in detail

00:10:43.809 --> 00:10:43.819
them are not and when you look in detail
 

00:10:43.819 --> 00:10:45.610
them are not and when you look in detail
at the time you can see that

00:10:45.610 --> 00:10:45.620
at the time you can see that
 

00:10:45.620 --> 00:10:47.769
at the time you can see that
configuration goes from 128 seconds to

00:10:47.769 --> 00:10:47.779
configuration goes from 128 seconds to
 

00:10:47.779 --> 00:10:50.980
configuration goes from 128 seconds to
about one second but then you also have

00:10:50.980 --> 00:10:50.990
about one second but then you also have
 

00:10:50.990 --> 00:10:53.110
about one second but then you also have
some of that time lost back in the

00:10:53.110 --> 00:10:53.120
some of that time lost back in the
 

00:10:53.120 --> 00:10:54.879
some of that time lost back in the
growth calculation right so what's

00:10:54.879 --> 00:10:54.889
growth calculation right so what's
 

00:10:54.889 --> 00:10:56.860
growth calculation right so what's
happening is that as Gradle build a task

00:10:56.860 --> 00:10:56.870
happening is that as Gradle build a task
 

00:10:56.870 --> 00:10:59.079
happening is that as Gradle build a task
graph of all the tasks to execute it

00:10:59.079 --> 00:10:59.089
graph of all the tasks to execute it
 

00:10:59.089 --> 00:11:01.210
graph of all the tasks to execute it
realize that well it needs to configure

00:11:01.210 --> 00:11:01.220
realize that well it needs to configure
 

00:11:01.220 --> 00:11:02.249
realize that well it needs to configure
those

00:11:02.249 --> 00:11:02.259
those
 

00:11:02.259 --> 00:11:03.840
those
but overall we have city hanging about

00:11:03.840 --> 00:11:03.850
but overall we have city hanging about
 

00:11:03.850 --> 00:11:06.299
but overall we have city hanging about
25% configured configuration time on

00:11:06.299 --> 00:11:06.309
25% configured configuration time on
 

00:11:06.309 --> 00:11:12.179
25% configured configuration time on
this project so another thing that we

00:11:12.179 --> 00:11:12.189
this project so another thing that we
 

00:11:12.189 --> 00:11:14.090
this project so another thing that we
talked about a lot last year was

00:11:14.090 --> 00:11:14.100
talked about a lot last year was
 

00:11:14.100 --> 00:11:16.650
talked about a lot last year was
incremental and additional processing so

00:11:16.650 --> 00:11:16.660
incremental and additional processing so
 

00:11:16.660 --> 00:11:18.210
incremental and additional processing so
again with Godot we worked on

00:11:18.210 --> 00:11:18.220
again with Godot we worked on
 

00:11:18.220 --> 00:11:20.669
again with Godot we worked on
implementing the ability to have

00:11:20.669 --> 00:11:20.679
implementing the ability to have
 

00:11:20.679 --> 00:11:22.499
implementing the ability to have
incremental compilation even when there

00:11:22.499 --> 00:11:22.509
incremental compilation even when there
 

00:11:22.509 --> 00:11:24.269
incremental compilation even when there
is annotation processors on the class

00:11:24.269 --> 00:11:24.279
is annotation processors on the class
 

00:11:24.279 --> 00:11:27.539
is annotation processors on the class
pass this has been delivered so now we

00:11:27.539 --> 00:11:27.549
pass this has been delivered so now we
 

00:11:27.549 --> 00:11:29.939
pass this has been delivered so now we
have the ability to run incremental

00:11:29.939 --> 00:11:29.949
have the ability to run incremental
 

00:11:29.949 --> 00:11:31.619
have the ability to run incremental
obviously this is dependent on

00:11:31.619 --> 00:11:31.629
obviously this is dependent on
 

00:11:31.629 --> 00:11:34.280
obviously this is dependent on
annotation processors to play well and

00:11:34.280 --> 00:11:34.290
annotation processors to play well and
 

00:11:34.290 --> 00:11:36.900
annotation processors to play well and
here we have a list of the top ten

00:11:36.900 --> 00:11:36.910
here we have a list of the top ten
 

00:11:36.910 --> 00:11:39.299
here we have a list of the top ten
annotation processors as we see being

00:11:39.299 --> 00:11:39.309
annotation processors as we see being
 

00:11:39.309 --> 00:11:42.119
annotation processors as we see being
used through our performance data and

00:11:42.119 --> 00:11:42.129
used through our performance data and
 

00:11:42.129 --> 00:11:44.400
used through our performance data and
we've already converted six of them and

00:11:44.400 --> 00:11:44.410
we've already converted six of them and
 

00:11:44.410 --> 00:11:45.840
we've already converted six of them and
we are still working on the four

00:11:45.840 --> 00:11:45.850
we are still working on the four
 

00:11:45.850 --> 00:11:48.119
we are still working on the four
remaining ones we will continue

00:11:48.119 --> 00:11:48.129
remaining ones we will continue
 

00:11:48.129 --> 00:11:50.999
remaining ones we will continue
monitoring this list of most use

00:11:50.999 --> 00:11:51.009
monitoring this list of most use
 

00:11:51.009 --> 00:11:52.679
monitoring this list of most use
annotation processors at least open

00:11:52.679 --> 00:11:52.689
annotation processors at least open
 

00:11:52.689 --> 00:11:54.689
annotation processors at least open
sourced ones and we will try to convert

00:11:54.689 --> 00:11:54.699
sourced ones and we will try to convert
 

00:11:54.699 --> 00:11:56.850
sourced ones and we will try to convert
them as much as we can but you have to

00:11:56.850 --> 00:11:56.860
them as much as we can but you have to
 

00:11:56.860 --> 00:11:58.470
them as much as we can but you have to
be careful again that if you have your

00:11:58.470 --> 00:11:58.480
be careful again that if you have your
 

00:11:58.480 --> 00:12:00.629
be careful again that if you have your
own annotation processors it's very

00:12:00.629 --> 00:12:00.639
own annotation processors it's very
 

00:12:00.639 --> 00:12:04.590
own annotation processors it's very
important that you you make the effort

00:12:04.590 --> 00:12:04.600
important that you you make the effort
 

00:12:04.600 --> 00:12:06.869
important that you you make the effort
to make it incremental capable usually

00:12:06.869 --> 00:12:06.879
to make it incremental capable usually
 

00:12:06.879 --> 00:12:10.319
to make it incremental capable usually
it's not very complicated one thing that

00:12:10.319 --> 00:12:10.329
it's not very complicated one thing that
 

00:12:10.329 --> 00:12:11.970
it's not very complicated one thing that
we also did as part of this work is to

00:12:11.970 --> 00:12:11.980
we also did as part of this work is to
 

00:12:11.980 --> 00:12:14.910
we also did as part of this work is to
make sure we blame correctly the

00:12:14.910 --> 00:12:14.920
make sure we blame correctly the
 

00:12:14.920 --> 00:12:16.769
make sure we blame correctly the
annotation processors which are being

00:12:16.769 --> 00:12:16.779
annotation processors which are being
 

00:12:16.779 --> 00:12:18.749
annotation processors which are being
configured and that are not uh not that

00:12:18.749 --> 00:12:18.759
configured and that are not uh not that
 

00:12:18.759 --> 00:12:21.269
configured and that are not uh not that
are not incremental capable so that if

00:12:21.269 --> 00:12:21.279
are not incremental capable so that if
 

00:12:21.279 --> 00:12:22.799
are not incremental capable so that if
you are a provider of an annotation

00:12:22.799 --> 00:12:22.809
you are a provider of an annotation
 

00:12:22.809 --> 00:12:25.109
you are a provider of an annotation
processor you will get started getting

00:12:25.109 --> 00:12:25.119
processor you will get started getting
 

00:12:25.119 --> 00:12:27.480
processor you will get started getting
some you know maybe angry emails from

00:12:27.480 --> 00:12:27.490
some you know maybe angry emails from
 

00:12:27.490 --> 00:12:30.059
some you know maybe angry emails from
Yui from your users that you know why is

00:12:30.059 --> 00:12:30.069
Yui from your users that you know why is
 

00:12:30.069 --> 00:12:31.289
Yui from your users that you know why is
your annotation process you're not

00:12:31.289 --> 00:12:31.299
your annotation process you're not
 

00:12:31.299 --> 00:12:33.509
your annotation process you're not
capable of handling incremental

00:12:33.509 --> 00:12:33.519
capable of handling incremental
 

00:12:33.519 --> 00:12:37.590
capable of handling incremental
compilation yet so if you see things

00:12:37.590 --> 00:12:37.600
compilation yet so if you see things
 

00:12:37.600 --> 00:12:39.119
compilation yet so if you see things
which are open source please talk to the

00:12:39.119 --> 00:12:39.129
which are open source please talk to the
 

00:12:39.129 --> 00:12:40.859
which are open source please talk to the
author if you fix which are in-house you

00:12:40.859 --> 00:12:40.869
author if you fix which are in-house you
 

00:12:40.869 --> 00:12:41.999
author if you fix which are in-house you
will have to fix it yourself obviously

00:12:41.999 --> 00:12:42.009
will have to fix it yourself obviously
 

00:12:42.009 --> 00:12:44.519
will have to fix it yourself obviously
we also have a page on our documentation

00:12:44.519 --> 00:12:44.529
we also have a page on our documentation
 

00:12:44.529 --> 00:12:47.069
we also have a page on our documentation
at least all of the annotation processor

00:12:47.069 --> 00:12:47.079
at least all of the annotation processor
 

00:12:47.079 --> 00:12:48.840
at least all of the annotation processor
that were converted on this list for

00:12:48.840 --> 00:12:48.850
that were converted on this list for
 

00:12:48.850 --> 00:12:50.249
that were converted on this list for
some other ones which are not in the top

00:12:50.249 --> 00:12:50.259
some other ones which are not in the top
 

00:12:50.259 --> 00:12:52.769
some other ones which are not in the top
ten the version at which they started

00:12:52.769 --> 00:12:52.779
ten the version at which they started
 

00:12:52.779 --> 00:12:55.559
ten the version at which they started
being incremental capable and we also

00:12:55.559 --> 00:12:55.569
being incremental capable and we also
 

00:12:55.569 --> 00:12:57.269
being incremental capable and we also
list the wunst and the plans that we

00:12:57.269 --> 00:12:57.279
list the wunst and the plans that we
 

00:12:57.279 --> 00:13:00.269
list the wunst and the plans that we
have feel free to send us email if you

00:13:00.269 --> 00:13:00.279
have feel free to send us email if you
 

00:13:00.279 --> 00:13:01.829
have feel free to send us email if you
want us to add some stuff there but it's

00:13:01.829 --> 00:13:01.839
want us to add some stuff there but it's
 

00:13:01.839 --> 00:13:03.539
want us to add some stuff there but it's
basically the reference about what's

00:13:03.539 --> 00:13:03.549
basically the reference about what's
 

00:13:03.549 --> 00:13:07.300
basically the reference about what's
available today

00:13:07.300 --> 00:13:07.310
 

00:13:07.310 --> 00:13:09.429
and since we are at it we also added

00:13:09.429 --> 00:13:09.439
and since we are at it we also added
 

00:13:09.439 --> 00:13:12.579
and since we are at it we also added
support for Kathleen obviously so now if

00:13:12.579 --> 00:13:12.589
support for Kathleen obviously so now if
 

00:13:12.589 --> 00:13:14.139
support for Kathleen obviously so now if
you use Kathleen and you have annotation

00:13:14.139 --> 00:13:14.149
you use Kathleen and you have annotation
 

00:13:14.149 --> 00:13:16.360
you use Kathleen and you have annotation
processors we also have the ability to

00:13:16.360 --> 00:13:16.370
processors we also have the ability to
 

00:13:16.370 --> 00:13:19.540
processors we also have the ability to
run KPT in incremental mode it's

00:13:19.540 --> 00:13:19.550
run KPT in incremental mode it's
 

00:13:19.550 --> 00:13:21.069
run KPT in incremental mode it's
dependent obviously on the same

00:13:21.069 --> 00:13:21.079
dependent obviously on the same
 

00:13:21.079 --> 00:13:22.749
dependent obviously on the same
annotation processors being incremental

00:13:22.749 --> 00:13:22.759
annotation processors being incremental
 

00:13:22.759 --> 00:13:25.119
annotation processors being incremental
but as you can see on those graphs the

00:13:25.119 --> 00:13:25.129
but as you can see on those graphs the
 

00:13:25.129 --> 00:13:27.579
but as you can see on those graphs the
numbers are pretty impressive we are

00:13:27.579 --> 00:13:27.589
numbers are pretty impressive we are
 

00:13:27.589 --> 00:13:29.259
numbers are pretty impressive we are
really continuing to push forward the

00:13:29.259 --> 00:13:29.269
really continuing to push forward the
 

00:13:29.269 --> 00:13:31.389
really continuing to push forward the
CRO mentality as being you know a very

00:13:31.389 --> 00:13:31.399
CRO mentality as being you know a very
 

00:13:31.399 --> 00:13:36.639
CRO mentality as being you know a very
important feature of the plugin okay so

00:13:36.639 --> 00:13:36.649
important feature of the plugin okay so
 

00:13:36.649 --> 00:13:38.980
important feature of the plugin okay so
one other thing that we did is we try to

00:13:38.980 --> 00:13:38.990
one other thing that we did is we try to
 

00:13:38.990 --> 00:13:41.170
one other thing that we did is we try to
improve the performance of sync insights

00:13:41.170 --> 00:13:41.180
improve the performance of sync insights
 

00:13:41.180 --> 00:13:43.689
improve the performance of sync insights
to do a lot of the time spent when you

00:13:43.689 --> 00:13:43.699
to do a lot of the time spent when you
 

00:13:43.699 --> 00:13:45.519
to do a lot of the time spent when you
import a project is actually spent in

00:13:45.519 --> 00:13:45.529
import a project is actually spent in
 

00:13:45.529 --> 00:13:48.340
import a project is actually spent in
Gradle and so if you look at the old

00:13:48.340 --> 00:13:48.350
Gradle and so if you look at the old
 

00:13:48.350 --> 00:13:50.350
Gradle and so if you look at the old
thing that we had before the first thing

00:13:50.350 --> 00:13:50.360
thing that we had before the first thing
 

00:13:50.360 --> 00:13:51.790
thing that we had before the first thing
that we need to do is build that model

00:13:51.790 --> 00:13:51.800
that we need to do is build that model
 

00:13:51.800 --> 00:13:53.470
that we need to do is build that model
right we need to query great early in

00:13:53.470 --> 00:13:53.480
right we need to query great early in
 

00:13:53.480 --> 00:13:55.420
right we need to query great early in
order to know which module you have what

00:13:55.420 --> 00:13:55.430
order to know which module you have what
 

00:13:55.430 --> 00:13:57.220
order to know which module you have what
are the properties and what's the

00:13:57.220 --> 00:13:57.230
are the properties and what's the
 

00:13:57.230 --> 00:13:58.840
are the properties and what's the
dependency between module and external

00:13:58.840 --> 00:13:58.850
dependency between module and external
 

00:13:58.850 --> 00:14:00.939
dependency between module and external
libraries and so we have to call Gretel

00:14:00.939 --> 00:14:00.949
libraries and so we have to call Gretel
 

00:14:00.949 --> 00:14:04.210
libraries and so we have to call Gretel
which configure their projects because

00:14:04.210 --> 00:14:04.220
which configure their projects because
 

00:14:04.220 --> 00:14:05.559
which configure their projects because
we need dependencies we resolve the

00:14:05.559 --> 00:14:05.569
we need dependencies we resolve the
 

00:14:05.569 --> 00:14:08.710
we need dependencies we resolve the
dependency and then we query that model

00:14:08.710 --> 00:14:08.720
dependency and then we query that model
 

00:14:08.720 --> 00:14:10.949
dependency and then we query that model
the model query is actually very quick

00:14:10.949 --> 00:14:10.959
the model query is actually very quick
 

00:14:10.959 --> 00:14:14.170
the model query is actually very quick
and then well Android relies a lot on

00:14:14.170 --> 00:14:14.180
and then well Android relies a lot on
 

00:14:14.180 --> 00:14:16.179
and then well Android relies a lot on
generated source code right your our

00:14:16.179 --> 00:14:16.189
generated source code right your our
 

00:14:16.189 --> 00:14:19.900
generated source code right your our
class a IDL run the script so we always

00:14:19.900 --> 00:14:19.910
class a IDL run the script so we always
 

00:14:19.910 --> 00:14:22.059
class a IDL run the script so we always
call in to another build that configures

00:14:22.059 --> 00:14:22.069
call in to another build that configures
 

00:14:22.069 --> 00:14:23.710
call in to another build that configures
again resolve dependency and then run

00:14:23.710 --> 00:14:23.720
again resolve dependency and then run
 

00:14:23.720 --> 00:14:26.590
again resolve dependency and then run
some tests so we worked closely again

00:14:26.590 --> 00:14:26.600
some tests so we worked closely again
 

00:14:26.600 --> 00:14:28.269
some tests so we worked closely again
with Gradle in order to contribute some

00:14:28.269 --> 00:14:28.279
with Gradle in order to contribute some
 

00:14:28.279 --> 00:14:30.460
with Gradle in order to contribute some
changes to the tooling a PRF greater in

00:14:30.460 --> 00:14:30.470
changes to the tooling a PRF greater in
 

00:14:30.470 --> 00:14:31.960
changes to the tooling a PRF greater in
order to be able to do both in the same

00:14:31.960 --> 00:14:31.970
order to be able to do both in the same
 

00:14:31.970 --> 00:14:32.319
order to be able to do both in the same
build

00:14:32.319 --> 00:14:32.329
build
 

00:14:32.329 --> 00:14:33.850
build
so now we can do only one single

00:14:33.850 --> 00:14:33.860
so now we can do only one single
 

00:14:33.860 --> 00:14:35.650
so now we can do only one single
configuration we can do one dependency

00:14:35.650 --> 00:14:35.660
configuration we can do one dependency
 

00:14:35.660 --> 00:14:37.840
configuration we can do one dependency
resolution then we query the model and

00:14:37.840 --> 00:14:37.850
resolution then we query the model and
 

00:14:37.850 --> 00:14:40.329
resolution then we query the model and
during the query of the model we as we

00:14:40.329 --> 00:14:40.339
during the query of the model we as we
 

00:14:40.339 --> 00:14:41.949
during the query of the model we as we
acquire it and we process it inside our

00:14:41.949 --> 00:14:41.959
acquire it and we process it inside our
 

00:14:41.959 --> 00:14:44.379
acquire it and we process it inside our
plugin we accumulate the list of tasks

00:14:44.379 --> 00:14:44.389
plugin we accumulate the list of tasks
 

00:14:44.389 --> 00:14:46.629
plugin we accumulate the list of tasks
that represent you know generating

00:14:46.629 --> 00:14:46.639
that represent you know generating
 

00:14:46.639 --> 00:14:48.220
that represent you know generating
sources and then we schedule them and

00:14:48.220 --> 00:14:48.230
sources and then we schedule them and
 

00:14:48.230 --> 00:14:50.889
sources and then we schedule them and
then Gradle will ruin them after we also

00:14:50.889 --> 00:14:50.899
then Gradle will ruin them after we also
 

00:14:50.899 --> 00:14:52.869
then Gradle will ruin them after we also
did a change here because studio now is

00:14:52.869 --> 00:14:52.879
did a change here because studio now is
 

00:14:52.879 --> 00:14:55.809
did a change here because studio now is
able to create virtual classes for our

00:14:55.809 --> 00:14:55.819
able to create virtual classes for our
 

00:14:55.819 --> 00:14:59.259
able to create virtual classes for our
right so as I mentioned earlier studio

00:14:59.259 --> 00:14:59.269
right so as I mentioned earlier studio
 

00:14:59.269 --> 00:15:01.540
right so as I mentioned earlier studio
is passing your dependency or resource

00:15:01.540 --> 00:15:01.550
is passing your dependency or resource
 

00:15:01.550 --> 00:15:03.549
is passing your dependency or resource
file as you edit them and it's always

00:15:03.549 --> 00:15:03.559
file as you edit them and it's always
 

00:15:03.559 --> 00:15:05.110
file as you edit them and it's always
knows what's going on and so it's

00:15:05.110 --> 00:15:05.120
knows what's going on and so it's
 

00:15:05.120 --> 00:15:06.850
knows what's going on and so it's
creating some virtual our classes so

00:15:06.850 --> 00:15:06.860
creating some virtual our classes so
 

00:15:06.860 --> 00:15:08.350
creating some virtual our classes so
that it doesn't have to rely on the

00:15:08.350 --> 00:15:08.360
that it doesn't have to rely on the
 

00:15:08.360 --> 00:15:10.150
that it doesn't have to rely on the
build so if you had a string to your

00:15:10.150 --> 00:15:10.160
build so if you had a string to your
 

00:15:10.160 --> 00:15:11.799
build so if you had a string to your
file you don't have to build in order to

00:15:11.799 --> 00:15:11.809
file you don't have to build in order to
 

00:15:11.809 --> 00:15:13.179
file you don't have to build in order to
update your class it's just don't

00:15:13.179 --> 00:15:13.189
update your class it's just don't
 

00:15:13.189 --> 00:15:16.749
update your class it's just don't
virtually for you and so since we do

00:15:16.749 --> 00:15:16.759
virtually for you and so since we do
 

00:15:16.759 --> 00:15:18.579
virtually for you and so since we do
that we don't have to bill it anymore so

00:15:18.579 --> 00:15:18.589
that we don't have to bill it anymore so
 

00:15:18.589 --> 00:15:19.920
that we don't have to bill it anymore so
as you sing the post

00:15:19.920 --> 00:15:19.930
as you sing the post
 

00:15:19.930 --> 00:15:23.370
as you sing the post
Singh build which is now integrated just

00:15:23.370 --> 00:15:23.380
Singh build which is now integrated just
 

00:15:23.380 --> 00:15:24.810
Singh build which is now integrated just
does not run that task and therefore you

00:15:24.810 --> 00:15:24.820
does not run that task and therefore you
 

00:15:24.820 --> 00:15:31.139
does not run that task and therefore you
have a faster sink as well so another

00:15:31.139 --> 00:15:31.149
have a faster sink as well so another
 

00:15:31.149 --> 00:15:32.400
have a faster sink as well so another
thing we launched as you may have heard

00:15:32.400 --> 00:15:32.410
thing we launched as you may have heard
 

00:15:32.410 --> 00:15:35.400
thing we launched as you may have heard
is apply changes and this enables you to

00:15:35.400 --> 00:15:35.410
is apply changes and this enables you to
 

00:15:35.410 --> 00:15:37.680
is apply changes and this enables you to
make small edits and deploy while

00:15:37.680 --> 00:15:37.690
make small edits and deploy while
 

00:15:37.690 --> 00:15:40.110
make small edits and deploy while
keeping your app in its state there's

00:15:40.110 --> 00:15:40.120
keeping your app in its state there's
 

00:15:40.120 --> 00:15:41.699
keeping your app in its state there's
actually pretty fast because it does not

00:15:41.699 --> 00:15:41.709
actually pretty fast because it does not
 

00:15:41.709 --> 00:15:44.910
actually pretty fast because it does not
restart the app but unlike instant run

00:15:44.910 --> 00:15:44.920
restart the app but unlike instant run
 

00:15:44.920 --> 00:15:47.790
restart the app but unlike instant run
which some of you may know it does not

00:15:47.790 --> 00:15:47.800
which some of you may know it does not
 

00:15:47.800 --> 00:15:50.250
which some of you may know it does not
modify the build instead it really finds

00:15:50.250 --> 00:15:50.260
modify the build instead it really finds
 

00:15:50.260 --> 00:15:52.769
modify the build instead it really finds
the classes on the fly and use some new

00:15:52.769 --> 00:15:52.779
the classes on the fly and use some new
 

00:15:52.779 --> 00:15:54.600
the classes on the fly and use some new
runtime instrumentation from the

00:15:54.600 --> 00:15:54.610
runtime instrumentation from the
 

00:15:54.610 --> 00:15:57.900
runtime instrumentation from the
platform because it depends on this new

00:15:57.900 --> 00:15:57.910
platform because it depends on this new
 

00:15:57.910 --> 00:15:59.460
platform because it depends on this new
runtime instrumentation it's only

00:15:59.460 --> 00:15:59.470
runtime instrumentation it's only
 

00:15:59.470 --> 00:16:01.920
runtime instrumentation it's only
available for devices running Android 8

00:16:01.920 --> 00:16:01.930
available for devices running Android 8
 

00:16:01.930 --> 00:16:05.250
available for devices running Android 8
and above it works best when you're

00:16:05.250 --> 00:16:05.260
and above it works best when you're
 

00:16:05.260 --> 00:16:07.290
and above it works best when you're
making really small changes inside our

00:16:07.290 --> 00:16:07.300
making really small changes inside our
 

00:16:07.300 --> 00:16:09.060
making really small changes inside our
class or making small edit to our

00:16:09.060 --> 00:16:09.070
class or making small edit to our
 

00:16:09.070 --> 00:16:11.040
class or making small edit to our
resources but as you may have heard from

00:16:11.040 --> 00:16:11.050
resources but as you may have heard from
 

00:16:11.050 --> 00:16:14.130
resources but as you may have heard from
tor earlier today this project also

00:16:14.130 --> 00:16:14.140
tor earlier today this project also
 

00:16:14.140 --> 00:16:15.570
tor earlier today this project also
brought a lot of improvement for every

00:16:15.570 --> 00:16:15.580
brought a lot of improvement for every
 

00:16:15.580 --> 00:16:20.850
brought a lot of improvement for every
build we'll also looked at the build

00:16:20.850 --> 00:16:20.860
build we'll also looked at the build
 

00:16:20.860 --> 00:16:24.300
build we'll also looked at the build
output window and try to improve it we

00:16:24.300 --> 00:16:24.310
output window and try to improve it we
 

00:16:24.310 --> 00:16:26.430
output window and try to improve it we
improved the UI and also the underlying

00:16:26.430 --> 00:16:26.440
improved the UI and also the underlying
 

00:16:26.440 --> 00:16:29.040
improved the UI and also the underlying
parser to really make sure that all of

00:16:29.040 --> 00:16:29.050
parser to really make sure that all of
 

00:16:29.050 --> 00:16:31.140
parser to really make sure that all of
your build errors show up as a node in

00:16:31.140 --> 00:16:31.150
your build errors show up as a node in
 

00:16:31.150 --> 00:16:35.100
your build errors show up as a node in
this window we extract the relevant

00:16:35.100 --> 00:16:35.110
this window we extract the relevant
 

00:16:35.110 --> 00:16:36.780
this window we extract the relevant
information to make sure you have a file

00:16:36.780 --> 00:16:36.790
information to make sure you have a file
 

00:16:36.790 --> 00:16:40.019
information to make sure you have a file
information line pointers the details on

00:16:40.019 --> 00:16:40.029
information line pointers the details on
 

00:16:40.029 --> 00:16:42.480
information line pointers the details on
the error and we improved the UI a

00:16:42.480 --> 00:16:42.490
the error and we improved the UI a
 

00:16:42.490 --> 00:16:45.329
the error and we improved the UI a
little bit to expand the tree scroll and

00:16:45.329 --> 00:16:45.339
little bit to expand the tree scroll and
 

00:16:45.339 --> 00:16:47.390
little bit to expand the tree scroll and
select the error node automatically

00:16:47.390 --> 00:16:47.400
select the error node automatically
 

00:16:47.400 --> 00:16:50.010
select the error node automatically
there's a small change but we hope it

00:16:50.010 --> 00:16:50.020
there's a small change but we hope it
 

00:16:50.020 --> 00:16:53.610
there's a small change but we hope it
make your life easier so as you can see

00:16:53.610 --> 00:16:53.620
make your life easier so as you can see
 

00:16:53.620 --> 00:16:56.340
make your life easier so as you can see
we've been yeah go for build output

00:16:56.340 --> 00:16:56.350
we've been yeah go for build output
 

00:16:56.350 --> 00:16:58.949
we've been yeah go for build output
window

00:16:58.949 --> 00:16:58.959
 

00:16:58.959 --> 00:17:01.449
so as you can see we've been pretty busy

00:17:01.449 --> 00:17:01.459
so as you can see we've been pretty busy
 

00:17:01.459 --> 00:17:03.850
so as you can see we've been pretty busy
adding a lot of new stuff to the build

00:17:03.850 --> 00:17:03.860
adding a lot of new stuff to the build
 

00:17:03.860 --> 00:17:07.000
adding a lot of new stuff to the build
system but I cannot talk about build

00:17:07.000 --> 00:17:07.010
system but I cannot talk about build
 

00:17:07.010 --> 00:17:08.460
system but I cannot talk about build
without mentioning build speed

00:17:08.460 --> 00:17:08.470
without mentioning build speed
 

00:17:08.470 --> 00:17:11.319
without mentioning build speed
so let me deep dive into this a bit

00:17:11.319 --> 00:17:11.329
so let me deep dive into this a bit
 

00:17:11.329 --> 00:17:12.640
so let me deep dive into this a bit
because it's really one of our top

00:17:12.640 --> 00:17:12.650
because it's really one of our top
 

00:17:12.650 --> 00:17:17.160
because it's really one of our top
priorities first let me set the stage to

00:17:17.160 --> 00:17:17.170
priorities first let me set the stage to
 

00:17:17.170 --> 00:17:19.750
priorities first let me set the stage to
measure build speed internally we use a

00:17:19.750 --> 00:17:19.760
measure build speed internally we use a
 

00:17:19.760 --> 00:17:21.880
measure build speed internally we use a
set of benchmarks we use some open

00:17:21.880 --> 00:17:21.890
set of benchmarks we use some open
 

00:17:21.890 --> 00:17:23.590
set of benchmarks we use some open
source project like Santa tracker mean

00:17:23.590 --> 00:17:23.600
source project like Santa tracker mean
 

00:17:23.600 --> 00:17:26.520
source project like Santa tracker mean
SDK 15 and 28 from multi dexing and

00:17:26.520 --> 00:17:26.530
SDK 15 and 28 from multi dexing and
 

00:17:26.530 --> 00:17:29.110
SDK 15 and 28 from multi dexing and
another one called tank takeo me and

00:17:29.110 --> 00:17:29.120
another one called tank takeo me and
 

00:17:29.120 --> 00:17:33.039
another one called tank takeo me and
signal but those are a small ish so we

00:17:33.039 --> 00:17:33.049
signal but those are a small ish so we
 

00:17:33.049 --> 00:17:35.020
signal but those are a small ish so we
really wanted to test on large projects

00:17:35.020 --> 00:17:35.030
really wanted to test on large projects
 

00:17:35.030 --> 00:17:37.690
really wanted to test on large projects
so we generated two project one with

00:17:37.690 --> 00:17:37.700
so we generated two project one with
 

00:17:37.700 --> 00:17:40.390
so we generated two project one with
about a hundred module 97 to be precise

00:17:40.390 --> 00:17:40.400
about a hundred module 97 to be precise
 

00:17:40.400 --> 00:17:43.750
about a hundred module 97 to be precise
and fifty of everything from modules so

00:17:43.750 --> 00:17:43.760
and fifty of everything from modules so
 

00:17:43.760 --> 00:17:47.919
and fifty of everything from modules so
15 classes 50 layout etc we also created

00:17:47.919 --> 00:17:47.929
15 classes 50 layout etc we also created
 

00:17:47.929 --> 00:17:50.860
15 classes 50 layout etc we also created
an equivalent project of the same size

00:17:50.860 --> 00:17:50.870
an equivalent project of the same size
 

00:17:50.870 --> 00:17:54.030
an equivalent project of the same size
but all squeezed into one module and

00:17:54.030 --> 00:17:54.040
but all squeezed into one module and
 

00:17:54.040 --> 00:17:57.310
but all squeezed into one module and
both of the Prados projects have 200

00:17:57.310 --> 00:17:57.320
both of the Prados projects have 200
 

00:17:57.320 --> 00:18:00.159
both of the Prados projects have 200
external dependencies and every time we

00:18:00.159 --> 00:18:00.169
external dependencies and every time we
 

00:18:00.169 --> 00:18:01.750
external dependencies and every time we
make a change to the build plug-in R

00:18:01.750 --> 00:18:01.760
make a change to the build plug-in R
 

00:18:01.760 --> 00:18:04.030
make a change to the build plug-in R
event those projects on various

00:18:04.030 --> 00:18:04.040
event those projects on various
 

00:18:04.040 --> 00:18:06.310
event those projects on various
scenarios so let me walk you through

00:18:06.310 --> 00:18:06.320
scenarios so let me walk you through
 

00:18:06.320 --> 00:18:10.090
scenarios so let me walk you through
some of those one scenario is to make a

00:18:10.090 --> 00:18:10.100
some of those one scenario is to make a
 

00:18:10.100 --> 00:18:12.220
some of those one scenario is to make a
code change so we change a little bit of

00:18:12.220 --> 00:18:12.230
code change so we change a little bit of
 

00:18:12.230 --> 00:18:15.190
code change so we change a little bit of
code and rebuild the project on the open

00:18:15.190 --> 00:18:15.200
code and rebuild the project on the open
 

00:18:15.200 --> 00:18:16.390
code and rebuild the project on the open
source project you can see some

00:18:16.390 --> 00:18:16.400
source project you can see some
 

00:18:16.400 --> 00:18:19.210
source project you can see some
improvement ranging from 24 to 36

00:18:19.210 --> 00:18:19.220
improvement ranging from 24 to 36
 

00:18:19.220 --> 00:18:25.740
improvement ranging from 24 to 36
percent improvement between 3.1 and 3.5

00:18:25.740 --> 00:18:25.750
 

00:18:25.750 --> 00:18:28.060
when we looked at the two very large

00:18:28.060 --> 00:18:28.070
when we looked at the two very large
 

00:18:28.070 --> 00:18:31.480
when we looked at the two very large
project and here the legend is large 100

00:18:31.480 --> 00:18:31.490
project and here the legend is large 100
 

00:18:31.490 --> 00:18:32.830
project and here the legend is large 100
is the one with a hundred module and

00:18:32.830 --> 00:18:32.840
is the one with a hundred module and
 

00:18:32.840 --> 00:18:34.810
is the one with a hundred module and
large one is the one where everything is

00:18:34.810 --> 00:18:34.820
large one is the one where everything is
 

00:18:34.820 --> 00:18:37.510
large one is the one where everything is
quiz into one module we can see that we

00:18:37.510 --> 00:18:37.520
quiz into one module we can see that we
 

00:18:37.520 --> 00:18:41.860
quiz into one module we can see that we
improved by between 50 and 80 percent in

00:18:41.860 --> 00:18:41.870
improved by between 50 and 80 percent in
 

00:18:41.870 --> 00:18:43.870
improved by between 50 and 80 percent in
other words here we divided the bill

00:18:43.870 --> 00:18:43.880
other words here we divided the bill
 

00:18:43.880 --> 00:18:47.169
other words here we divided the bill
speed by 2 on the large project with a

00:18:47.169 --> 00:18:47.179
speed by 2 on the large project with a
 

00:18:47.179 --> 00:18:50.380
speed by 2 on the large project with a
lot of modules and by 5 on the single

00:18:50.380 --> 00:18:50.390
lot of modules and by 5 on the single
 

00:18:50.390 --> 00:18:54.250
lot of modules and by 5 on the single
module 1 the big improvement in 3.4 here

00:18:54.250 --> 00:18:54.260
module 1 the big improvement in 3.4 here
 

00:18:54.260 --> 00:18:56.890
module 1 the big improvement in 3.4 here
is largely related to the java c

00:18:56.890 --> 00:18:56.900
is largely related to the java c
 

00:18:56.900 --> 00:18:59.289
is largely related to the java c
incrementality that was added or that

00:18:59.289 --> 00:18:59.299
incrementality that was added or that
 

00:18:59.299 --> 00:19:02.620
incrementality that was added or that
was improved alright another scenario we

00:19:02.620 --> 00:19:02.630
was improved alright another scenario we
 

00:19:02.630 --> 00:19:04.299
was improved alright another scenario we
ran is making change to resources

00:19:04.299 --> 00:19:04.309
ran is making change to resources
 

00:19:04.309 --> 00:19:07.210
ran is making change to resources
because that happens and so here again

00:19:07.210 --> 00:19:07.220
because that happens and so here again
 

00:19:07.220 --> 00:19:09.220
because that happens and so here again
on the open source project we can see

00:19:09.220 --> 00:19:09.230
on the open source project we can see
 

00:19:09.230 --> 00:19:10.130
on the open source project we can see
improvement ranging

00:19:10.130 --> 00:19:10.140
improvement ranging
 

00:19:10.140 --> 00:19:15.640
improvement ranging
from 26 to 53 percent and in the large

00:19:15.640 --> 00:19:15.650
from 26 to 53 percent and in the large
 

00:19:15.650 --> 00:19:18.020
from 26 to 53 percent and in the large
project we also see good improvements

00:19:18.020 --> 00:19:18.030
project we also see good improvements
 

00:19:18.030 --> 00:19:21.470
project we also see good improvements
ranging in the 30 ish percent so those

00:19:21.470 --> 00:19:21.480
ranging in the 30 ish percent so those
 

00:19:21.480 --> 00:19:23.990
ranging in the 30 ish percent so those
are two important scenarios editing a

00:19:23.990 --> 00:19:24.000
are two important scenarios editing a
 

00:19:24.000 --> 00:19:25.910
are two important scenarios editing a
source code or editing resources there's

00:19:25.910 --> 00:19:25.920
source code or editing resources there's
 

00:19:25.920 --> 00:19:29.540
source code or editing resources there's
others that we ran on and we're going to

00:19:29.540 --> 00:19:29.550
others that we ran on and we're going to
 

00:19:29.550 --> 00:19:31.160
others that we ran on and we're going to
aggregate the scenarios that I just show

00:19:31.160 --> 00:19:31.170
aggregate the scenarios that I just show
 

00:19:31.170 --> 00:19:33.500
aggregate the scenarios that I just show
you we saw an average build speed

00:19:33.500 --> 00:19:33.510
you we saw an average build speed
 

00:19:33.510 --> 00:19:36.560
you we saw an average build speed
improvements by 35 percent between 3.1

00:19:36.560 --> 00:19:36.570
improvements by 35 percent between 3.1
 

00:19:36.570 --> 00:19:40.340
improvements by 35 percent between 3.1
and 3.5 all right so so far we're happy

00:19:40.340 --> 00:19:40.350
and 3.5 all right so so far we're happy
 

00:19:40.350 --> 00:19:44.960
and 3.5 all right so so far we're happy
but but we also look at real bill speed

00:19:44.960 --> 00:19:44.970
but but we also look at real bill speed
 

00:19:44.970 --> 00:19:47.240
but but we also look at real bill speed
that's the one that experienced that's

00:19:47.240 --> 00:19:47.250
that's the one that experienced that's
 

00:19:47.250 --> 00:19:50.390
that's the one that experienced that's
experienced by all of you and we do this

00:19:50.390 --> 00:19:50.400
experienced by all of you and we do this
 

00:19:50.400 --> 00:19:52.400
experienced by all of you and we do this
by aggregating data that all of you or

00:19:52.400 --> 00:19:52.410
by aggregating data that all of you or
 

00:19:52.410 --> 00:19:54.890
by aggregating data that all of you or
the one of you that share with us when

00:19:54.890 --> 00:19:54.900
the one of you that share with us when
 

00:19:54.900 --> 00:19:56.450
the one of you that share with us when
you opt into sharing usage statistics

00:19:56.450 --> 00:19:56.460
you opt into sharing usage statistics
 

00:19:56.460 --> 00:19:58.670
you opt into sharing usage statistics
with us and so here shameless plug if

00:19:58.670 --> 00:19:58.680
with us and so here shameless plug if
 

00:19:58.680 --> 00:20:01.730
with us and so here shameless plug if
you do not please opt in its aggregated

00:20:01.730 --> 00:20:01.740
you do not please opt in its aggregated
 

00:20:01.740 --> 00:20:03.320
you do not please opt in its aggregated
and it helps us a ton and it's in the

00:20:03.320 --> 00:20:03.330
and it helps us a ton and it's in the
 

00:20:03.330 --> 00:20:06.590
and it helps us a ton and it's in the
system settings so when we aggregate

00:20:06.590 --> 00:20:06.600
system settings so when we aggregate
 

00:20:06.600 --> 00:20:09.140
system settings so when we aggregate
those data we see that the median build

00:20:09.140 --> 00:20:09.150
those data we see that the median build
 

00:20:09.150 --> 00:20:12.410
those data we see that the median build
speed increased by 25 percent in the

00:20:12.410 --> 00:20:12.420
speed increased by 25 percent in the
 

00:20:12.420 --> 00:20:16.430
speed increased by 25 percent in the
last year ish not though that this is

00:20:16.430 --> 00:20:16.440
last year ish not though that this is
 

00:20:16.440 --> 00:20:18.380
last year ish not though that this is
not really showing the improvement from

00:20:18.380 --> 00:20:18.390
not really showing the improvement from
 

00:20:18.390 --> 00:20:20.450
not really showing the improvement from
3/4 which just when stable a couple

00:20:20.450 --> 00:20:20.460
3/4 which just when stable a couple
 

00:20:20.460 --> 00:20:22.970
3/4 which just when stable a couple
weeks ago as well as 3/5 which just when

00:20:22.970 --> 00:20:22.980
weeks ago as well as 3/5 which just when
 

00:20:22.980 --> 00:20:29.120
weeks ago as well as 3/5 which just when
beta yesterday so now I show you some

00:20:29.120 --> 00:20:29.130
beta yesterday so now I show you some
 

00:20:29.130 --> 00:20:31.220
beta yesterday so now I show you some
graph going down some graphs going up I

00:20:31.220 --> 00:20:31.230
graph going down some graphs going up I
 

00:20:31.230 --> 00:20:34.100
graph going down some graphs going up I
mean starting wondering why well the

00:20:34.100 --> 00:20:34.110
mean starting wondering why well the
 

00:20:34.110 --> 00:20:35.930
mean starting wondering why well the
reason is that while our benchmark

00:20:35.930 --> 00:20:35.940
reason is that while our benchmark
 

00:20:35.940 --> 00:20:38.780
reason is that while our benchmark
projects are pretty static your real

00:20:38.780 --> 00:20:38.790
projects are pretty static your real
 

00:20:38.790 --> 00:20:41.270
projects are pretty static your real
projects are growing you're adding line

00:20:41.270 --> 00:20:41.280
projects are growing you're adding line
 

00:20:41.280 --> 00:20:42.680
projects are growing you're adding line
of code you're adding feeders you're

00:20:42.680 --> 00:20:42.690
of code you're adding feeders you're
 

00:20:42.690 --> 00:20:44.960
of code you're adding feeders you're
adding new Gradle plug-in and this grows

00:20:44.960 --> 00:20:44.970
adding new Gradle plug-in and this grows
 

00:20:44.970 --> 00:20:49.550
adding new Gradle plug-in and this grows
impact your build speed so if you're

00:20:49.550 --> 00:20:49.560
impact your build speed so if you're
 

00:20:49.560 --> 00:20:50.840
impact your build speed so if you're
trying to reconciliate these graphs

00:20:50.840 --> 00:20:50.850
trying to reconciliate these graphs
 

00:20:50.850 --> 00:20:52.220
trying to reconciliate these graphs
going down and up let me walk you

00:20:52.220 --> 00:20:52.230
going down and up let me walk you
 

00:20:52.230 --> 00:20:56.690
going down and up let me walk you
through a real life example looking at

00:20:56.690 --> 00:20:56.700
through a real life example looking at
 

00:20:56.700 --> 00:20:59.540
through a real life example looking at
Spotify in the last year and a half the

00:20:59.540 --> 00:20:59.550
Spotify in the last year and a half the
 

00:20:59.550 --> 00:21:01.970
Spotify in the last year and a half the
project grew by 25% when you're looking

00:21:01.970 --> 00:21:01.980
project grew by 25% when you're looking
 

00:21:01.980 --> 00:21:06.290
project grew by 25% when you're looking
at line of code and 234 cents when

00:21:06.290 --> 00:21:06.300
at line of code and 234 cents when
 

00:21:06.300 --> 00:21:09.290
at line of code and 234 cents when
looking at modules that's about 3x the

00:21:09.290 --> 00:21:09.300
looking at modules that's about 3x the
 

00:21:09.300 --> 00:21:12.440
looking at modules that's about 3x the
growth in a year and a half it's huge at

00:21:12.440 --> 00:21:12.450
growth in a year and a half it's huge at
 

00:21:12.450 --> 00:21:14.360
growth in a year and a half it's huge at
the same time cleanbid slowed down by

00:21:14.360 --> 00:21:14.370
the same time cleanbid slowed down by
 

00:21:14.370 --> 00:21:19.070
the same time cleanbid slowed down by
38% so I'm gonna normalize using line of

00:21:19.070 --> 00:21:19.080
38% so I'm gonna normalize using line of
 

00:21:19.080 --> 00:21:21.080
38% so I'm gonna normalize using line of
code growth and it's still a slow down

00:21:21.080 --> 00:21:21.090
code growth and it's still a slow down
 

00:21:21.090 --> 00:21:23.799
code growth and it's still a slow down
by 10% on build not great I've made

00:21:23.799 --> 00:21:23.809
by 10% on build not great I've made
 

00:21:23.809 --> 00:21:26.320
by 10% on build not great I've made
this shows some of the current limits

00:21:26.320 --> 00:21:26.330
this shows some of the current limits
 

00:21:26.330 --> 00:21:28.489
this shows some of the current limits
that our pipeline have when we're

00:21:28.489 --> 00:21:28.499
that our pipeline have when we're
 

00:21:28.499 --> 00:21:30.049
that our pipeline have when we're
dealing with hundreds and hundreds of

00:21:30.049 --> 00:21:30.059
dealing with hundreds and hundreds of
 

00:21:30.059 --> 00:21:32.330
dealing with hundreds and hundreds of
modules especially around resource

00:21:32.330 --> 00:21:32.340
modules especially around resource
 

00:21:32.340 --> 00:21:33.919
modules especially around resource
pipeline but that's something we're

00:21:33.919 --> 00:21:33.929
pipeline but that's something we're
 

00:21:33.929 --> 00:21:37.489
pipeline but that's something we're
working on and note also here but this

00:21:37.489 --> 00:21:37.499
working on and note also here but this
 

00:21:37.499 --> 00:21:39.529
working on and note also here but this
is not showing anything from three four

00:21:39.529 --> 00:21:39.539
is not showing anything from three four
 

00:21:39.539 --> 00:21:44.810
is not showing anything from three four
and three five but the clean bill

00:21:44.810 --> 00:21:44.820
and three five but the clean bill
 

00:21:44.820 --> 00:21:46.549
and three five but the clean bill
doesn't necessarily represents your

00:21:46.549 --> 00:21:46.559
doesn't necessarily represents your
 

00:21:46.559 --> 00:21:49.820
doesn't necessarily represents your
day-to-day bills when you build multiple

00:21:49.820 --> 00:21:49.830
day-to-day bills when you build multiple
 

00:21:49.830 --> 00:21:52.609
day-to-day bills when you build multiple
times a day hopefully a lot of those

00:21:52.609 --> 00:21:52.619
times a day hopefully a lot of those
 

00:21:52.619 --> 00:21:55.219
times a day hopefully a lot of those
bills are incremental and so if you look

00:21:55.219 --> 00:21:55.229
bills are incremental and so if you look
 

00:21:55.229 --> 00:21:58.489
bills are incremental and so if you look
again at the Spotify change that's part

00:21:58.489 --> 00:21:58.499
again at the Spotify change that's part
 

00:21:58.499 --> 00:22:01.039
again at the Spotify change that's part
if I project the incremental build

00:22:01.039 --> 00:22:01.049
if I project the incremental build
 

00:22:01.049 --> 00:22:04.639
if I project the incremental build
actually got faster by 37% and if I

00:22:04.639 --> 00:22:04.649
actually got faster by 37% and if I
 

00:22:04.649 --> 00:22:06.919
actually got faster by 37% and if I
normalize again on the growth from line

00:22:06.919 --> 00:22:06.929
normalize again on the growth from line
 

00:22:06.929 --> 00:22:09.109
normalize again on the growth from line
of code there's actually two times

00:22:09.109 --> 00:22:09.119
of code there's actually two times
 

00:22:09.119 --> 00:22:12.169
of code there's actually two times
faster not too bad actually shows that

00:22:12.169 --> 00:22:12.179
faster not too bad actually shows that
 

00:22:12.179 --> 00:22:14.330
faster not too bad actually shows that
making sure everything that can be

00:22:14.330 --> 00:22:14.340
making sure everything that can be
 

00:22:14.340 --> 00:22:17.239
making sure everything that can be
incremental actually is is really

00:22:17.239 --> 00:22:17.249
incremental actually is is really
 

00:22:17.249 --> 00:22:22.519
incremental actually is is really
important and as I've mentioned when we

00:22:22.519 --> 00:22:22.529
important and as I've mentioned when we
 

00:22:22.529 --> 00:22:24.769
important and as I've mentioned when we
add cash ability to the mix it's even

00:22:24.769 --> 00:22:24.779
add cash ability to the mix it's even
 

00:22:24.779 --> 00:22:27.320
add cash ability to the mix it's even
better and so you see here with a lot of

00:22:27.320 --> 00:22:27.330
better and so you see here with a lot of
 

00:22:27.330 --> 00:22:29.180
better and so you see here with a lot of
improvement we make to cash ability to

00:22:29.180 --> 00:22:29.190
improvement we make to cash ability to
 

00:22:29.190 --> 00:22:32.509
improvement we make to cash ability to
the task the Spotify build cashed this

00:22:32.509 --> 00:22:32.519
the task the Spotify build cashed this
 

00:22:32.519 --> 00:22:35.210
the task the Spotify build cashed this
time improved by 50% while the project

00:22:35.210 --> 00:22:35.220
time improved by 50% while the project
 

00:22:35.220 --> 00:22:37.759
time improved by 50% while the project
was growing so again to normalize with

00:22:37.759 --> 00:22:37.769
was growing so again to normalize with
 

00:22:37.769 --> 00:22:39.979
was growing so again to normalize with
the growth of line of code that's about

00:22:39.979 --> 00:22:39.989
the growth of line of code that's about
 

00:22:39.989 --> 00:22:42.440
the growth of line of code that's about
three times faster if their project have

00:22:42.440 --> 00:22:42.450
three times faster if their project have
 

00:22:42.450 --> 00:22:48.440
three times faster if their project have
not grown in the same time so hopefully

00:22:48.440 --> 00:22:48.450
not grown in the same time so hopefully
 

00:22:48.450 --> 00:22:49.789
not grown in the same time so hopefully
all those graphs show you that we are

00:22:49.789 --> 00:22:49.799
all those graphs show you that we are
 

00:22:49.799 --> 00:22:52.430
all those graphs show you that we are
working very hard to keep improving

00:22:52.430 --> 00:22:52.440
working very hard to keep improving
 

00:22:52.440 --> 00:22:54.469
working very hard to keep improving
build speed and help you get more

00:22:54.469 --> 00:22:54.479
build speed and help you get more
 

00:22:54.479 --> 00:22:58.549
build speed and help you get more
productive and the first and best tip to

00:22:58.549 --> 00:22:58.559
productive and the first and best tip to
 

00:22:58.559 --> 00:23:00.379
productive and the first and best tip to
get your build speed down is to upgrade

00:23:00.379 --> 00:23:00.389
get your build speed down is to upgrade
 

00:23:00.389 --> 00:23:01.969
get your build speed down is to upgrade
to the latest Android Gradle plug-in

00:23:01.969 --> 00:23:01.979
to the latest Android Gradle plug-in
 

00:23:01.979 --> 00:23:05.960
to the latest Android Gradle plug-in
version but we know we still have a lot

00:23:05.960 --> 00:23:05.970
version but we know we still have a lot
 

00:23:05.970 --> 00:23:07.639
version but we know we still have a lot
of work to do mainly around

00:23:07.639 --> 00:23:07.649
of work to do mainly around
 

00:23:07.649 --> 00:23:09.799
of work to do mainly around
configuration time resource processing

00:23:09.799 --> 00:23:09.809
configuration time resource processing
 

00:23:09.809 --> 00:23:11.629
configuration time resource processing
especially as I mentioned on this

00:23:11.629 --> 00:23:11.639
especially as I mentioned on this
 

00:23:11.639 --> 00:23:13.369
especially as I mentioned on this
project with lots and lots of modules

00:23:13.369 --> 00:23:13.379
project with lots and lots of modules
 

00:23:13.379 --> 00:23:18.830
project with lots and lots of modules
and continued improved parallelism

00:23:18.830 --> 00:23:18.840
 

00:23:18.840 --> 00:23:22.200
but that's not all we know that many of

00:23:22.200 --> 00:23:22.210
but that's not all we know that many of
 

00:23:22.210 --> 00:23:25.350
but that's not all we know that many of
you use additional custom Gradle plugin

00:23:25.350 --> 00:23:25.360
you use additional custom Gradle plugin
 

00:23:25.360 --> 00:23:29.010
you use additional custom Gradle plugin
and we want to help there too so for

00:23:29.010 --> 00:23:29.020
and we want to help there too so for
 

00:23:29.020 --> 00:23:31.050
and we want to help there too so for
that working on a build speed

00:23:31.050 --> 00:23:31.060
that working on a build speed
 

00:23:31.060 --> 00:23:33.960
that working on a build speed
attribution tool in Android studio the

00:23:33.960 --> 00:23:33.970
attribution tool in Android studio the
 

00:23:33.970 --> 00:23:35.520
attribution tool in Android studio the
goal is to help you understand which

00:23:35.520 --> 00:23:35.530
goal is to help you understand which
 

00:23:35.530 --> 00:23:38.250
goal is to help you understand which
plug-in and which tasks are actually

00:23:38.250 --> 00:23:38.260
plug-in and which tasks are actually
 

00:23:38.260 --> 00:23:40.860
plug-in and which tasks are actually
affecting your build speed most and what

00:23:40.860 --> 00:23:40.870
affecting your build speed most and what
 

00:23:40.870 --> 00:23:42.030
affecting your build speed most and what
you can do about it

00:23:42.030 --> 00:23:42.040
you can do about it
 

00:23:42.040 --> 00:23:43.830
you can do about it
because some time you're using a plug-in

00:23:43.830 --> 00:23:43.840
because some time you're using a plug-in
 

00:23:43.840 --> 00:23:45.390
because some time you're using a plug-in
that we don't write so we want to help

00:23:45.390 --> 00:23:45.400
that we don't write so we want to help
 

00:23:45.400 --> 00:23:48.510
that we don't write so we want to help
you tell the plug-in owner if it's you

00:23:48.510 --> 00:23:48.520
you tell the plug-in owner if it's you
 

00:23:48.520 --> 00:23:50.550
you tell the plug-in owner if it's you
or someone else what's going wrong and

00:23:50.550 --> 00:23:50.560
or someone else what's going wrong and
 

00:23:50.560 --> 00:23:52.950
or someone else what's going wrong and
what what they can do to help and this

00:23:52.950 --> 00:23:52.960
what what they can do to help and this
 

00:23:52.960 --> 00:23:58.140
what what they can do to help and this
will be in Android studio very soon all

00:23:58.140 --> 00:23:58.150
will be in Android studio very soon all
 

00:23:58.150 --> 00:23:59.970
will be in Android studio very soon all
right so we're gonna talk about some

00:23:59.970 --> 00:23:59.980
right so we're gonna talk about some
 

00:23:59.980 --> 00:24:02.430
right so we're gonna talk about some
tips and some tools about helping you

00:24:02.430 --> 00:24:02.440
tips and some tools about helping you
 

00:24:02.440 --> 00:24:05.310
tips and some tools about helping you
better configure your project so the

00:24:05.310 --> 00:24:05.320
better configure your project so the
 

00:24:05.320 --> 00:24:06.330
better configure your project so the
first thing I want to mention is that

00:24:06.330 --> 00:24:06.340
first thing I want to mention is that
 

00:24:06.340 --> 00:24:07.770
first thing I want to mention is that
you know configuration should really be

00:24:07.770 --> 00:24:07.780
you know configuration should really be
 

00:24:07.780 --> 00:24:08.520
you know configuration should really be
fast

00:24:08.520 --> 00:24:08.530
fast
 

00:24:08.530 --> 00:24:11.100
fast
I talked to developer lot we you know

00:24:11.100 --> 00:24:11.110
I talked to developer lot we you know
 

00:24:11.110 --> 00:24:13.080
I talked to developer lot we you know
with developer who tell me that you know

00:24:13.080 --> 00:24:13.090
with developer who tell me that you know
 

00:24:13.090 --> 00:24:15.440
with developer who tell me that you know
the configuration is fairly slow

00:24:15.440 --> 00:24:15.450
the configuration is fairly slow
 

00:24:15.450 --> 00:24:17.340
the configuration is fairly slow
actually talk to the developer just

00:24:17.340 --> 00:24:17.350
actually talk to the developer just
 

00:24:17.350 --> 00:24:19.170
actually talk to the developer just
today telling me hundred and 50 module

00:24:19.170 --> 00:24:19.180
today telling me hundred and 50 module
 

00:24:19.180 --> 00:24:21.630
today telling me hundred and 50 module
almost 10 second configuration and this

00:24:21.630 --> 00:24:21.640
almost 10 second configuration and this
 

00:24:21.640 --> 00:24:23.460
almost 10 second configuration and this
is really not in line with what the

00:24:23.460 --> 00:24:23.470
is really not in line with what the
 

00:24:23.470 --> 00:24:25.650
is really not in line with what the
baseline should be right so we wanted to

00:24:25.650 --> 00:24:25.660
baseline should be right so we wanted to
 

00:24:25.660 --> 00:24:27.540
baseline should be right so we wanted to
look at how fast should configuration be

00:24:27.540 --> 00:24:27.550
look at how fast should configuration be
 

00:24:27.550 --> 00:24:30.540
look at how fast should configuration be
so using the same project project that's

00:24:30.540 --> 00:24:30.550
so using the same project project that's
 

00:24:30.550 --> 00:24:33.540
so using the same project project that's
about hundred modules you know and and

00:24:33.540 --> 00:24:33.550
about hundred modules you know and and
 

00:24:33.550 --> 00:24:34.980
about hundred modules you know and and
those modules don't do a lot of

00:24:34.980 --> 00:24:34.990
those modules don't do a lot of
 

00:24:34.990 --> 00:24:36.270
those modules don't do a lot of
configuration right there's only one

00:24:36.270 --> 00:24:36.280
configuration right there's only one
 

00:24:36.280 --> 00:24:37.620
configuration right there's only one
plug-in the android plug-in and it

00:24:37.620 --> 00:24:37.630
plug-in the android plug-in and it
 

00:24:37.630 --> 00:24:39.180
plug-in the android plug-in and it
mostly set up some dependencies and

00:24:39.180 --> 00:24:39.190
mostly set up some dependencies and
 

00:24:39.190 --> 00:24:40.800
mostly set up some dependencies and
nothing else so when we look at

00:24:40.800 --> 00:24:40.810
nothing else so when we look at
 

00:24:40.810 --> 00:24:42.600
nothing else so when we look at
configuration using Bill scans we see

00:24:42.600 --> 00:24:42.610
configuration using Bill scans we see
 

00:24:42.610 --> 00:24:44.370
configuration using Bill scans we see
that the configuration takes about a

00:24:44.370 --> 00:24:44.380
that the configuration takes about a
 

00:24:44.380 --> 00:24:47.070
that the configuration takes about a
second which you know adds up to about

00:24:47.070 --> 00:24:47.080
second which you know adds up to about
 

00:24:47.080 --> 00:24:49.590
second which you know adds up to about
10 millisecond per module now of course

00:24:49.590 --> 00:24:49.600
10 millisecond per module now of course
 

00:24:49.600 --> 00:24:51.930
10 millisecond per module now of course
the task graph computation is there too

00:24:51.930 --> 00:24:51.940
the task graph computation is there too
 

00:24:51.940 --> 00:24:53.520
the task graph computation is there too
but depending on what you're building

00:24:53.520 --> 00:24:53.530
but depending on what you're building
 

00:24:53.530 --> 00:24:56.010
but depending on what you're building
you may not do all of it but here for a

00:24:56.010 --> 00:24:56.020
you may not do all of it but here for a
 

00:24:56.020 --> 00:24:57.510
you may not do all of it but here for a
large you know for building the whole

00:24:57.510 --> 00:24:57.520
large you know for building the whole
 

00:24:57.520 --> 00:25:00.570
large you know for building the whole
app we see about under two second

00:25:00.570 --> 00:25:00.580
app we see about under two second
 

00:25:00.580 --> 00:25:03.780
app we see about under two second
configuration so if you have 200 modules

00:25:03.780 --> 00:25:03.790
configuration so if you have 200 modules
 

00:25:03.790 --> 00:25:06.030
configuration so if you have 200 modules
you should see four seconds if you're

00:25:06.030 --> 00:25:06.040
you should see four seconds if you're
 

00:25:06.040 --> 00:25:08.160
you should see four seconds if you're
already seeing 510 seconds and you have

00:25:08.160 --> 00:25:08.170
already seeing 510 seconds and you have
 

00:25:08.170 --> 00:25:10.170
already seeing 510 seconds and you have
1020 module you Kelly something's

00:25:10.170 --> 00:25:10.180
1020 module you Kelly something's
 

00:25:10.180 --> 00:25:12.420
1020 module you Kelly something's
happening right and it's it's actually

00:25:12.420 --> 00:25:12.430
happening right and it's it's actually
 

00:25:12.430 --> 00:25:14.880
happening right and it's it's actually
hard right now to configure to figure

00:25:14.880 --> 00:25:14.890
hard right now to configure to figure
 

00:25:14.890 --> 00:25:16.890
hard right now to configure to figure
out exactly what's happening but be

00:25:16.890 --> 00:25:16.900
out exactly what's happening but be
 

00:25:16.900 --> 00:25:18.570
out exactly what's happening but be
aware that basically every code that you

00:25:18.570 --> 00:25:18.580
aware that basically every code that you
 

00:25:18.580 --> 00:25:20.760
aware that basically every code that you
put in your DSL right because it's code

00:25:20.760 --> 00:25:20.770
put in your DSL right because it's code
 

00:25:20.770 --> 00:25:25.650
put in your DSL right because it's code
will at time and there isn't a whole lot

00:25:25.650 --> 00:25:25.660
will at time and there isn't a whole lot
 

00:25:25.660 --> 00:25:27.870
will at time and there isn't a whole lot
of way to make that faster right the

00:25:27.870 --> 00:25:27.880
of way to make that faster right the
 

00:25:27.880 --> 00:25:29.400
of way to make that faster right the
best way to do it is just you know run a

00:25:29.400 --> 00:25:29.410
best way to do it is just you know run a
 

00:25:29.410 --> 00:25:31.240
best way to do it is just you know run a
JVM profiler

00:25:31.240 --> 00:25:31.250
JVM profiler
 

00:25:31.250 --> 00:25:32.980
JVM profiler
and see exactly what's happening you may

00:25:32.980 --> 00:25:32.990
and see exactly what's happening you may
 

00:25:32.990 --> 00:25:34.900
and see exactly what's happening you may
be using some plugins that do things

00:25:34.900 --> 00:25:34.910
be using some plugins that do things
 

00:25:34.910 --> 00:25:36.640
be using some plugins that do things
that they shouldn't be doing that are

00:25:36.640 --> 00:25:36.650
that they shouldn't be doing that are
 

00:25:36.650 --> 00:25:38.320
that they shouldn't be doing that are
just slow and of course I mean that

00:25:38.320 --> 00:25:38.330
just slow and of course I mean that
 

00:25:38.330 --> 00:25:40.600
just slow and of course I mean that
there's a few obvious candidates right

00:25:40.600 --> 00:25:40.610
there's a few obvious candidates right
 

00:25:40.610 --> 00:25:43.570
there's a few obvious candidates right
you know don't resolve or dependencies

00:25:43.570 --> 00:25:43.580
you know don't resolve or dependencies
 

00:25:43.580 --> 00:25:45.790
you know don't resolve or dependencies
during configuration don't configure all

00:25:45.790 --> 00:25:45.800
during configuration don't configure all
 

00:25:45.800 --> 00:25:47.680
during configuration don't configure all
the tasks eagerly but really the only

00:25:47.680 --> 00:25:47.690
the tasks eagerly but really the only
 

00:25:47.690 --> 00:25:49.090
the tasks eagerly but really the only
way to do that if you're using

00:25:49.090 --> 00:25:49.100
way to do that if you're using
 

00:25:49.100 --> 00:25:51.130
way to do that if you're using
third-party plugin is to profile it

00:25:51.130 --> 00:25:51.140
third-party plugin is to profile it
 

00:25:51.140 --> 00:25:53.620
third-party plugin is to profile it
somehow

00:25:53.620 --> 00:25:53.630
 

00:25:53.630 --> 00:25:56.590
so in term of speed which you know to

00:25:56.590 --> 00:25:56.600
so in term of speed which you know to
 

00:25:56.600 --> 00:25:57.820
so in term of speed which you know to
increase your build speed we'll see

00:25:57.820 --> 00:25:57.830
increase your build speed we'll see
 

00:25:57.830 --> 00:26:01.770
increase your build speed we'll see
still recommend doing several modules

00:26:01.770 --> 00:26:01.780
still recommend doing several modules
 

00:26:01.780 --> 00:26:04.510
still recommend doing several modules
and you know Jerome talked a lot about

00:26:04.510 --> 00:26:04.520
and you know Jerome talked a lot about
 

00:26:04.520 --> 00:26:06.190
and you know Jerome talked a lot about
workers or you can get pallet them for

00:26:06.190 --> 00:26:06.200
workers or you can get pallet them for
 

00:26:06.200 --> 00:26:08.440
workers or you can get pallet them for
worker but you know we also showed that

00:26:08.440 --> 00:26:08.450
worker but you know we also showed that
 

00:26:08.450 --> 00:26:10.690
worker but you know we also showed that
workers have some limitation right you

00:26:10.690 --> 00:26:10.700
workers have some limitation right you
 

00:26:10.700 --> 00:26:13.000
workers have some limitation right you
know you have to spawn them from your

00:26:13.000 --> 00:26:13.010
know you have to spawn them from your
 

00:26:13.010 --> 00:26:14.410
know you have to spawn them from your
task and what you're doing that you

00:26:14.410 --> 00:26:14.420
task and what you're doing that you
 

00:26:14.420 --> 00:26:16.420
task and what you're doing that you
can't run any other task and so you're

00:26:16.420 --> 00:26:16.430
can't run any other task and so you're
 

00:26:16.430 --> 00:26:17.710
can't run any other task and so you're
always going to get better parallelism

00:26:17.710 --> 00:26:17.720
always going to get better parallelism
 

00:26:17.720 --> 00:26:19.840
always going to get better parallelism
from multiple modules so you should

00:26:19.840 --> 00:26:19.850
from multiple modules so you should
 

00:26:19.850 --> 00:26:22.270
from multiple modules so you should
still try to go there in addition to

00:26:22.270 --> 00:26:22.280
still try to go there in addition to
 

00:26:22.280 --> 00:26:23.560
still try to go there in addition to
that you know we see more and more

00:26:23.560 --> 00:26:23.570
that you know we see more and more
 

00:26:23.570 --> 00:26:25.000
that you know we see more and more
developers actually using caching

00:26:25.000 --> 00:26:25.010
developers actually using caching
 

00:26:25.010 --> 00:26:27.070
developers actually using caching
distributed caching or local caching and

00:26:27.070 --> 00:26:27.080
distributed caching or local caching and
 

00:26:27.080 --> 00:26:29.470
distributed caching or local caching and
so imagine if you have you know a few

00:26:29.470 --> 00:26:29.480
so imagine if you have you know a few
 

00:26:29.480 --> 00:26:31.810
so imagine if you have you know a few
local changes and then you rebase your

00:26:31.810 --> 00:26:31.820
local changes and then you rebase your
 

00:26:31.820 --> 00:26:33.340
local changes and then you rebase your
changes on top of some changes coming

00:26:33.340 --> 00:26:33.350
changes on top of some changes coming
 

00:26:33.350 --> 00:26:34.930
changes on top of some changes coming
from upstream if you have a single

00:26:34.930 --> 00:26:34.940
from upstream if you have a single
 

00:26:34.940 --> 00:26:36.880
from upstream if you have a single
module well you know if you have some

00:26:36.880 --> 00:26:36.890
module well you know if you have some
 

00:26:36.890 --> 00:26:38.290
module well you know if you have some
Java files that have changed you're

00:26:38.290 --> 00:26:38.300
Java files that have changed you're
 

00:26:38.300 --> 00:26:39.490
Java files that have changed you're
going to have to rerun the whole Java

00:26:39.490 --> 00:26:39.500
going to have to rerun the whole Java
 

00:26:39.500 --> 00:26:41.020
going to have to rerun the whole Java
compilation if you have a hundred

00:26:41.020 --> 00:26:41.030
compilation if you have a hundred
 

00:26:41.030 --> 00:26:43.810
compilation if you have a hundred
modules and you only have a couple maybe

00:26:43.810 --> 00:26:43.820
modules and you only have a couple maybe
 

00:26:43.820 --> 00:26:45.610
modules and you only have a couple maybe
three four or five modules that are

00:26:45.610 --> 00:26:45.620
three four or five modules that are
 

00:26:45.620 --> 00:26:47.920
three four or five modules that are
touched all the other modules are good

00:26:47.920 --> 00:26:47.930
touched all the other modules are good
 

00:26:47.930 --> 00:26:50.560
touched all the other modules are good
candidate to actually get the output

00:26:50.560 --> 00:26:50.570
candidate to actually get the output
 

00:26:50.570 --> 00:26:52.090
candidate to actually get the output
directly from the cache so you have

00:26:52.090 --> 00:26:52.100
directly from the cache so you have
 

00:26:52.100 --> 00:26:53.890
directly from the cache so you have
better cache granularity and more likely

00:26:53.890 --> 00:26:53.900
better cache granularity and more likely
 

00:26:53.900 --> 00:26:56.140
better cache granularity and more likely
to get faster build from that and then

00:26:56.140 --> 00:26:56.150
to get faster build from that and then
 

00:26:56.150 --> 00:26:57.580
to get faster build from that and then
the other aspect of it is compilation

00:26:57.580 --> 00:26:57.590
the other aspect of it is compilation
 

00:26:57.590 --> 00:26:59.050
the other aspect of it is compilation
avoidance none of the project we showed

00:26:59.050 --> 00:26:59.060
avoidance none of the project we showed
 

00:26:59.060 --> 00:27:00.700
avoidance none of the project we showed
in your benchmark actually use

00:27:00.700 --> 00:27:00.710
in your benchmark actually use
 

00:27:00.710 --> 00:27:03.580
in your benchmark actually use
competition avoidance but it's a very

00:27:03.580 --> 00:27:03.590
competition avoidance but it's a very
 

00:27:03.590 --> 00:27:05.440
competition avoidance but it's a very
useful tool so I want to run through a

00:27:05.440 --> 00:27:05.450
useful tool so I want to run through a
 

00:27:05.450 --> 00:27:07.270
useful tool so I want to run through a
scenario that explain a little bit to

00:27:07.270 --> 00:27:07.280
scenario that explain a little bit to
 

00:27:07.280 --> 00:27:08.890
scenario that explain a little bit to
what competition avoidance is because we

00:27:08.890 --> 00:27:08.900
what competition avoidance is because we
 

00:27:08.900 --> 00:27:10.840
what competition avoidance is because we
still see some developer not really

00:27:10.840 --> 00:27:10.850
still see some developer not really
 

00:27:10.850 --> 00:27:12.940
still see some developer not really
understanding what's going on so let's

00:27:12.940 --> 00:27:12.950
understanding what's going on so let's
 

00:27:12.950 --> 00:27:14.560
understanding what's going on so let's
say you have an app that depends on

00:27:14.560 --> 00:27:14.570
say you have an app that depends on
 

00:27:14.570 --> 00:27:16.390
say you have an app that depends on
library one that depends on library -

00:27:16.390 --> 00:27:16.400
library one that depends on library -
 

00:27:16.400 --> 00:27:18.580
library one that depends on library -
that depends on library 3 and so we want

00:27:18.580 --> 00:27:18.590
that depends on library 3 and so we want
 

00:27:18.590 --> 00:27:19.750
that depends on library 3 and so we want
to see the impact of competition

00:27:19.750 --> 00:27:19.760
to see the impact of competition
 

00:27:19.760 --> 00:27:22.720
to see the impact of competition
avoidance when library 2 declares its

00:27:22.720 --> 00:27:22.730
avoidance when library 2 declares its
 

00:27:22.730 --> 00:27:24.550
avoidance when library 2 declares its
dependency on library 3 one way or the

00:27:24.550 --> 00:27:24.560
dependency on library 3 one way or the
 

00:27:24.560 --> 00:27:24.790
dependency on library 3 one way or the
other

00:27:24.790 --> 00:27:24.800
other
 

00:27:24.800 --> 00:27:26.260
other
and so we're going to look at it by

00:27:26.260 --> 00:27:26.270
and so we're going to look at it by
 

00:27:26.270 --> 00:27:28.720
and so we're going to look at it by
looking at a bunch of tasks compilation

00:27:28.720 --> 00:27:28.730
looking at a bunch of tasks compilation
 

00:27:28.730 --> 00:27:31.210
looking at a bunch of tasks compilation
tasks dexing or they're using Java 7 or

00:27:31.210 --> 00:27:31.220
tasks dexing or they're using Java 7 or
 

00:27:31.220 --> 00:27:32.770
tasks dexing or they're using Java 7 or
Java 8 it's actually has a difference

00:27:32.770 --> 00:27:32.780
Java 8 it's actually has a difference
 

00:27:32.780 --> 00:27:35.530
Java 8 it's actually has a difference
and then packaging all of that when you

00:27:35.530 --> 00:27:35.540
and then packaging all of that when you
 

00:27:35.540 --> 00:27:38.200
and then packaging all of that when you
do a code change on library 3 so by

00:27:38.200 --> 00:27:38.210
do a code change on library 3 so by
 

00:27:38.210 --> 00:27:39.730
do a code change on library 3 so by
default of course if you do a change on

00:27:39.730 --> 00:27:39.740
default of course if you do a change on
 

00:27:39.740 --> 00:27:41.560
default of course if you do a change on
library 3 library is gonna have to run

00:27:41.560 --> 00:27:41.570
library 3 library is gonna have to run
 

00:27:41.570 --> 00:27:43.270
library 3 library is gonna have to run
it's taxing whether it's Java 7 or Java

00:27:43.270 --> 00:27:43.280
it's taxing whether it's Java 7 or Java
 

00:27:43.280 --> 00:27:44.330
it's taxing whether it's Java 7 or Java
8 and it's gonna

00:27:44.330 --> 00:27:44.340
8 and it's gonna
 

00:27:44.340 --> 00:27:45.410
8 and it's gonna
and then at the end you're gonna have to

00:27:45.410 --> 00:27:45.420
and then at the end you're gonna have to
 

00:27:45.420 --> 00:27:46.880
and then at the end you're gonna have to
package everything and none of the

00:27:46.880 --> 00:27:46.890
package everything and none of the
 

00:27:46.890 --> 00:27:48.770
package everything and none of the
library are involved in the packaging so

00:27:48.770 --> 00:27:48.780
library are involved in the packaging so
 

00:27:48.780 --> 00:27:50.450
library are involved in the packaging so
it's only affecting that particular

00:27:50.450 --> 00:27:50.460
it's only affecting that particular
 

00:27:50.460 --> 00:27:53.360
it's only affecting that particular
module so let's say you do a code

00:27:53.360 --> 00:27:53.370
module so let's say you do a code
 

00:27:53.370 --> 00:27:55.010
module so let's say you do a code
implementation challenge right so you

00:27:55.010 --> 00:27:55.020
implementation challenge right so you
 

00:27:55.020 --> 00:27:56.840
implementation challenge right so you
just go in the library module and you

00:27:56.840 --> 00:27:56.850
just go in the library module and you
 

00:27:56.850 --> 00:27:58.960
just go in the library module and you
just change the content of a method

00:27:58.960 --> 00:27:58.970
just change the content of a method
 

00:27:58.970 --> 00:28:01.820
just change the content of a method
Gradle will do completion avoidance for

00:28:01.820 --> 00:28:01.830
Gradle will do completion avoidance for
 

00:28:01.830 --> 00:28:03.560
Gradle will do completion avoidance for
you automatically so it will detect that

00:28:03.560 --> 00:28:03.570
you automatically so it will detect that
 

00:28:03.570 --> 00:28:05.510
you automatically so it will detect that
the API of library 3 did not change and

00:28:05.510 --> 00:28:05.520
the API of library 3 did not change and
 

00:28:05.520 --> 00:28:08.210
the API of library 3 did not change and
you will not recompile either library to

00:28:08.210 --> 00:28:08.220
you will not recompile either library to
 

00:28:08.220 --> 00:28:10.700
you will not recompile either library to
library one application it works out of

00:28:10.700 --> 00:28:10.710
library one application it works out of
 

00:28:10.710 --> 00:28:11.960
library one application it works out of
the box you it doesn't really matter

00:28:11.960 --> 00:28:11.970
the box you it doesn't really matter
 

00:28:11.970 --> 00:28:13.550
the box you it doesn't really matter
whether you use API or implementation

00:28:13.550 --> 00:28:13.560
whether you use API or implementation
 

00:28:13.560 --> 00:28:15.650
whether you use API or implementation
for dependencies it just works right

00:28:15.650 --> 00:28:15.660
for dependencies it just works right
 

00:28:15.660 --> 00:28:16.730
for dependencies it just works right
that's kind of like really your

00:28:16.730 --> 00:28:16.740
that's kind of like really your
 

00:28:16.740 --> 00:28:20.090
that's kind of like really your
best-case scenario now if you do a

00:28:20.090 --> 00:28:20.100
best-case scenario now if you do a
 

00:28:20.100 --> 00:28:22.730
best-case scenario now if you do a
challenge in library 3 that adds a

00:28:22.730 --> 00:28:22.740
challenge in library 3 that adds a
 

00:28:22.740 --> 00:28:25.730
challenge in library 3 that adds a
public method and I'm talking here about

00:28:25.730 --> 00:28:25.740
public method and I'm talking here about
 

00:28:25.740 --> 00:28:27.860
public method and I'm talking here about
adding it without actually using it and

00:28:27.860 --> 00:28:27.870
adding it without actually using it and
 

00:28:27.870 --> 00:28:31.040
adding it without actually using it and
you've declared library to as an API

00:28:31.040 --> 00:28:31.050
you've declared library to as an API
 

00:28:31.050 --> 00:28:34.910
you've declared library to as an API
library 3 as an api of library 2 then

00:28:34.910 --> 00:28:34.920
library 3 as an api of library 2 then
 

00:28:34.920 --> 00:28:36.200
library 3 as an api of library 2 then
you're going to recompile everything

00:28:36.200 --> 00:28:36.210
you're going to recompile everything
 

00:28:36.210 --> 00:28:38.210
you're going to recompile everything
alright so you're gonna run compilation

00:28:38.210 --> 00:28:38.220
alright so you're gonna run compilation
 

00:28:38.220 --> 00:28:40.040
alright so you're gonna run compilation
on library to library and an app of

00:28:40.040 --> 00:28:40.050
on library to library and an app of
 

00:28:40.050 --> 00:28:41.870
on library to library and an app of
course the output is gonna be the same

00:28:41.870 --> 00:28:41.880
course the output is gonna be the same
 

00:28:41.880 --> 00:28:44.840
course the output is gonna be the same
so at least in the case of Java 7 you

00:28:44.840 --> 00:28:44.850
so at least in the case of Java 7 you
 

00:28:44.850 --> 00:28:46.760
so at least in the case of Java 7 you
don't need to run text again right

00:28:46.760 --> 00:28:46.770
don't need to run text again right
 

00:28:46.770 --> 00:28:48.590
don't need to run text again right
because Gradle will look at the input of

00:28:48.590 --> 00:28:48.600
because Gradle will look at the input of
 

00:28:48.600 --> 00:28:50.180
because Gradle will look at the input of
Dex and will say well it's exactly the

00:28:50.180 --> 00:28:50.190
Dex and will say well it's exactly the
 

00:28:50.190 --> 00:28:51.890
Dex and will say well it's exactly the
same thing that I had before nothing to

00:28:51.890 --> 00:28:51.900
same thing that I had before nothing to
 

00:28:51.900 --> 00:28:54.680
same thing that I had before nothing to
do however for Java 8 that's different

00:28:54.680 --> 00:28:54.690
do however for Java 8 that's different
 

00:28:54.690 --> 00:28:58.190
do however for Java 8 that's different
the disagreeing process has to look at

00:28:58.190 --> 00:28:58.200
the disagreeing process has to look at
 

00:28:58.200 --> 00:29:00.290
the disagreeing process has to look at
the dependencies so when it process

00:29:00.290 --> 00:29:00.300
the dependencies so when it process
 

00:29:00.300 --> 00:29:02.600
the dependencies so when it process
library 1 it has to go and look at

00:29:02.600 --> 00:29:02.610
library 1 it has to go and look at
 

00:29:02.610 --> 00:29:05.240
library 1 it has to go and look at
library 2 and library 3 what their API

00:29:05.240 --> 00:29:05.250
library 2 and library 3 what their API
 

00:29:05.250 --> 00:29:08.150
library 2 and library 3 what their API
is is it using some language feature

00:29:08.150 --> 00:29:08.160
is is it using some language feature
 

00:29:08.160 --> 00:29:10.400
is is it using some language feature
that it need to disagree and therefore

00:29:10.400 --> 00:29:10.410
that it need to disagree and therefore
 

00:29:10.410 --> 00:29:12.350
that it need to disagree and therefore
it impact the output of library 1 so you

00:29:12.350 --> 00:29:12.360
it impact the output of library 1 so you
 

00:29:12.360 --> 00:29:14.720
it impact the output of library 1 so you
have to redo everything now if you

00:29:14.720 --> 00:29:14.730
have to redo everything now if you
 

00:29:14.730 --> 00:29:16.700
have to redo everything now if you
change the dependency from library to

00:29:16.700 --> 00:29:16.710
change the dependency from library to
 

00:29:16.710 --> 00:29:19.100
change the dependency from library to
library using implementation you save a

00:29:19.100 --> 00:29:19.110
library using implementation you save a
 

00:29:19.110 --> 00:29:20.780
library using implementation you save a
little bit right basically what you're

00:29:20.780 --> 00:29:20.790
little bit right basically what you're
 

00:29:20.790 --> 00:29:23.240
little bit right basically what you're
doing is you're telling the consumer of

00:29:23.240 --> 00:29:23.250
doing is you're telling the consumer of
 

00:29:23.250 --> 00:29:25.280
doing is you're telling the consumer of
library to that library 3 is hidden from

00:29:25.280 --> 00:29:25.290
library to that library 3 is hidden from
 

00:29:25.290 --> 00:29:27.170
library to that library 3 is hidden from
them so app and library 1 do not see

00:29:27.170 --> 00:29:27.180
them so app and library 1 do not see
 

00:29:27.180 --> 00:29:30.200
them so app and library 1 do not see
library 3 at all so automatically you

00:29:30.200 --> 00:29:30.210
library 3 at all so automatically you
 

00:29:30.210 --> 00:29:32.530
library 3 at all so automatically you
don't run the Java compilation on them

00:29:32.530 --> 00:29:32.540
don't run the Java compilation on them
 

00:29:32.540 --> 00:29:35.870
don't run the Java compilation on them
however right now we still do predicting

00:29:35.870 --> 00:29:35.880
however right now we still do predicting
 

00:29:35.880 --> 00:29:38.660
however right now we still do predicting
in the case of the sugaring that is

00:29:38.660 --> 00:29:38.670
in the case of the sugaring that is
 

00:29:38.670 --> 00:29:40.970
in the case of the sugaring that is
actually a problem in a plugin that we

00:29:40.970 --> 00:29:40.980
actually a problem in a plugin that we
 

00:29:40.980 --> 00:29:43.250
actually a problem in a plugin that we
need to fix but once you do that then

00:29:43.250 --> 00:29:43.260
need to fix but once you do that then
 

00:29:43.260 --> 00:29:45.800
need to fix but once you do that then
you will also not run dexing right which

00:29:45.800 --> 00:29:45.810
you will also not run dexing right which
 

00:29:45.810 --> 00:29:47.990
you will also not run dexing right which
is important because especially in the

00:29:47.990 --> 00:29:48.000
is important because especially in the
 

00:29:48.000 --> 00:29:49.760
is important because especially in the
case of Java 8 when you use to Rebecca

00:29:49.760 --> 00:29:49.770
case of Java 8 when you use to Rebecca
 

00:29:49.770 --> 00:29:51.770
case of Java 8 when you use to Rebecca
language features we have to run it very

00:29:51.770 --> 00:29:51.780
language features we have to run it very
 

00:29:51.780 --> 00:29:53.960
language features we have to run it very
often it's extremely hard to try to

00:29:53.960 --> 00:29:53.970
often it's extremely hard to try to
 

00:29:53.970 --> 00:29:56.120
often it's extremely hard to try to
reduce the cases where you you're not

00:29:56.120 --> 00:29:56.130
reduce the cases where you you're not
 

00:29:56.130 --> 00:29:57.560
reduce the cases where you you're not
doing predicting

00:29:57.560 --> 00:29:57.570
doing predicting
 

00:29:57.570 --> 00:29:59.570
doing predicting
we are doing it very often as soon as an

00:29:59.570 --> 00:29:59.580
we are doing it very often as soon as an
 

00:29:59.580 --> 00:30:01.280
we are doing it very often as soon as an
API change and here I'm not necessarily

00:30:01.280 --> 00:30:01.290
API change and here I'm not necessarily
 

00:30:01.290 --> 00:30:03.350
API change and here I'm not necessarily
talking about an API that matters to app

00:30:03.350 --> 00:30:03.360
talking about an API that matters to app
 

00:30:03.360 --> 00:30:04.970
talking about an API that matters to app
and everyone and library - right you

00:30:04.970 --> 00:30:04.980
and everyone and library - right you
 

00:30:04.980 --> 00:30:07.490
and everyone and library - right you
could have a public class with a public

00:30:07.490 --> 00:30:07.500
could have a public class with a public
 

00:30:07.500 --> 00:30:09.140
could have a public class with a public
method that you only use internally in

00:30:09.140 --> 00:30:09.150
method that you only use internally in
 

00:30:09.150 --> 00:30:11.180
method that you only use internally in
library 3 and it's still gonna go and

00:30:11.180 --> 00:30:11.190
library 3 and it's still gonna go and
 

00:30:11.190 --> 00:30:12.800
library 3 and it's still gonna go and
trigger a bunch of changes in your

00:30:12.800 --> 00:30:12.810
trigger a bunch of changes in your
 

00:30:12.810 --> 00:30:15.050
trigger a bunch of changes in your
consuming modules so competition

00:30:15.050 --> 00:30:15.060
consuming modules so competition
 

00:30:15.060 --> 00:30:17.000
consuming modules so competition
avoidance is very useful start using it

00:30:17.000 --> 00:30:17.010
avoidance is very useful start using it
 

00:30:17.010 --> 00:30:18.680
avoidance is very useful start using it
it's gonna get better as we improve the

00:30:18.680 --> 00:30:18.690
it's gonna get better as we improve the
 

00:30:18.690 --> 00:30:20.600
it's gonna get better as we improve the
plug-in and it's really gonna make your

00:30:20.600 --> 00:30:20.610
plug-in and it's really gonna make your
 

00:30:20.610 --> 00:30:24.260
plug-in and it's really gonna make your
bill fasters some caveats to

00:30:24.260 --> 00:30:24.270
bill fasters some caveats to
 

00:30:24.270 --> 00:30:27.410
bill fasters some caveats to
parallelization we see some developer

00:30:27.410 --> 00:30:27.420
parallelization we see some developer
 

00:30:27.420 --> 00:30:30.350
parallelization we see some developer
telling us yeah I have 10 20 modules and

00:30:30.350 --> 00:30:30.360
telling us yeah I have 10 20 modules and
 

00:30:30.360 --> 00:30:32.030
telling us yeah I have 10 20 modules and
then they say well I have one big app

00:30:32.030 --> 00:30:32.040
then they say well I have one big app
 

00:30:32.040 --> 00:30:34.310
then they say well I have one big app
module with like 90% of my code that's

00:30:34.310 --> 00:30:34.320
module with like 90% of my code that's
 

00:30:34.320 --> 00:30:35.900
module with like 90% of my code that's
not helping you should really make you

00:30:35.900 --> 00:30:35.910
not helping you should really make you
 

00:30:35.910 --> 00:30:38.300
not helping you should really make you
know as small modules as you can and

00:30:38.300 --> 00:30:38.310
know as small modules as you can and
 

00:30:38.310 --> 00:30:40.850
know as small modules as you can and
then as Leo mentioned earlier our

00:30:40.850 --> 00:30:40.860
then as Leo mentioned earlier our
 

00:30:40.860 --> 00:30:42.230
then as Leo mentioned earlier our
resource back line is not very efficient

00:30:42.230 --> 00:30:42.240
resource back line is not very efficient
 

00:30:42.240 --> 00:30:44.060
resource back line is not very efficient
for multi module in fact if you see the

00:30:44.060 --> 00:30:44.070
for multi module in fact if you see the
 

00:30:44.070 --> 00:30:48.980
for multi module in fact if you see the
the chart that it shows for research

00:30:48.980 --> 00:30:48.990
the chart that it shows for research
 

00:30:48.990 --> 00:30:51.980
the chart that it shows for research
change for large module with one with

00:30:51.980 --> 00:30:51.990
change for large module with one with
 

00:30:51.990 --> 00:30:53.840
change for large module with one with
one module and with hundred module the

00:30:53.840 --> 00:30:53.850
one module and with hundred module the
 

00:30:53.850 --> 00:30:55.340
one module and with hundred module the
Huntersville is slower than one module

00:30:55.340 --> 00:30:55.350
Huntersville is slower than one module
 

00:30:55.350 --> 00:30:57.830
Huntersville is slower than one module
that's not per area as we start working

00:30:57.830 --> 00:30:57.840
that's not per area as we start working
 

00:30:57.840 --> 00:31:00.020
that's not per area as we start working
on in space again and additional changes

00:31:00.020 --> 00:31:00.030
on in space again and additional changes
 

00:31:00.030 --> 00:31:02.510
on in space again and additional changes
to resource pipeline will get much

00:31:02.510 --> 00:31:02.520
to resource pipeline will get much
 

00:31:02.520 --> 00:31:04.460
to resource pipeline will get much
better performance in building module

00:31:04.460 --> 00:31:04.470
better performance in building module
 

00:31:04.470 --> 00:31:10.850
better performance in building module
boots alright so how can you understand

00:31:10.850 --> 00:31:10.860
boots alright so how can you understand
 

00:31:10.860 --> 00:31:12.950
boots alright so how can you understand
your performance I mean we all know that

00:31:12.950 --> 00:31:12.960
your performance I mean we all know that
 

00:31:12.960 --> 00:31:15.950
your performance I mean we all know that
the unavoidable system is an very open

00:31:15.950 --> 00:31:15.960
the unavoidable system is an very open
 

00:31:15.960 --> 00:31:18.260
the unavoidable system is an very open
environment you're not constrained you

00:31:18.260 --> 00:31:18.270
environment you're not constrained you
 

00:31:18.270 --> 00:31:19.520
environment you're not constrained you
can have your own plugins you can have

00:31:19.520 --> 00:31:19.530
can have your own plugins you can have
 

00:31:19.530 --> 00:31:21.740
can have your own plugins you can have
your own annotation processors you can

00:31:21.740 --> 00:31:21.750
your own annotation processors you can
 

00:31:21.750 --> 00:31:23.480
your own annotation processors you can
write code in the Bill of the huddle so

00:31:23.480 --> 00:31:23.490
write code in the Bill of the huddle so
 

00:31:23.490 --> 00:31:25.130
write code in the Bill of the huddle so
all these things compound to each other

00:31:25.130 --> 00:31:25.140
all these things compound to each other
 

00:31:25.140 --> 00:31:27.590
all these things compound to each other
and eventually it's very difficult for

00:31:27.590 --> 00:31:27.600
and eventually it's very difficult for
 

00:31:27.600 --> 00:31:28.970
and eventually it's very difficult for
us to deliver something that we know

00:31:28.970 --> 00:31:28.980
us to deliver something that we know
 

00:31:28.980 --> 00:31:30.170
us to deliver something that we know
we'd go from well because you can

00:31:30.170 --> 00:31:30.180
we'd go from well because you can
 

00:31:30.180 --> 00:31:33.230
we'd go from well because you can
customize it to no end so you need tools

00:31:33.230 --> 00:31:33.240
customize it to no end so you need tools
 

00:31:33.240 --> 00:31:34.460
customize it to no end so you need tools
to be able to understand how these

00:31:34.460 --> 00:31:34.470
to be able to understand how these
 

00:31:34.470 --> 00:31:36.230
to be able to understand how these
things work and so you've got already a

00:31:36.230 --> 00:31:36.240
things work and so you've got already a
 

00:31:36.240 --> 00:31:37.930
things work and so you've got already a
few tools that are provided by God or

00:31:37.930 --> 00:31:37.940
few tools that are provided by God or
 

00:31:37.940 --> 00:31:41.330
few tools that are provided by God or
the cuddle scan is one of them it's very

00:31:41.330 --> 00:31:41.340
the cuddle scan is one of them it's very
 

00:31:41.340 --> 00:31:44.270
the cuddle scan is one of them it's very
effective it will give you information

00:31:44.270 --> 00:31:44.280
effective it will give you information
 

00:31:44.280 --> 00:31:46.610
effective it will give you information
about why the tasks run what where the

00:31:46.610 --> 00:31:46.620
about why the tasks run what where the
 

00:31:46.620 --> 00:31:48.320
about why the tasks run what where the
dependencies all this kind of

00:31:48.320 --> 00:31:48.330
dependencies all this kind of
 

00:31:48.330 --> 00:31:50.360
dependencies all this kind of
information will be given to you one of

00:31:50.360 --> 00:31:50.370
information will be given to you one of
 

00:31:50.370 --> 00:31:51.980
information will be given to you one of
the only caveat that it has is that it

00:31:51.980 --> 00:31:51.990
the only caveat that it has is that it
 

00:31:51.990 --> 00:31:53.900
the only caveat that it has is that it
forces you to upload some information to

00:31:53.900 --> 00:31:53.910
forces you to upload some information to
 

00:31:53.910 --> 00:31:55.820
forces you to upload some information to
the Velo servers so it's this

00:31:55.820 --> 00:31:55.830
the Velo servers so it's this
 

00:31:55.830 --> 00:31:57.230
the Velo servers so it's this
information contains things like you

00:31:57.230 --> 00:31:57.240
information contains things like you
 

00:31:57.240 --> 00:32:00.050
information contains things like you
know file paths file names via names and

00:32:00.050 --> 00:32:00.060
know file paths file names via names and
 

00:32:00.060 --> 00:32:01.430
know file paths file names via names and
stuff like that so we understand that

00:32:01.430 --> 00:32:01.440
stuff like that so we understand that
 

00:32:01.440 --> 00:32:03.620
stuff like that so we understand that
you know not everyone wants to send this

00:32:03.620 --> 00:32:03.630
you know not everyone wants to send this
 

00:32:03.630 --> 00:32:06.500
you know not everyone wants to send this
to the external world so therefore there

00:32:06.500 --> 00:32:06.510
to the external world so therefore there
 

00:32:06.510 --> 00:32:08.330
to the external world so therefore there
are some other tools the profiler is

00:32:08.330 --> 00:32:08.340
are some other tools the profiler is
 

00:32:08.340 --> 00:32:09.290
are some other tools the profiler is
another sim

00:32:09.290 --> 00:32:09.300
another sim
 

00:32:09.300 --> 00:32:11.660
another sim
tool that you can use it will still give

00:32:11.660 --> 00:32:11.670
tool that you can use it will still give
 

00:32:11.670 --> 00:32:14.750
tool that you can use it will still give
you information about why your tasks run

00:32:14.750 --> 00:32:14.760
you information about why your tasks run
 

00:32:14.760 --> 00:32:17.330
you information about why your tasks run
and all that kind of stuff it's it's not

00:32:17.330 --> 00:32:17.340
and all that kind of stuff it's it's not
 

00:32:17.340 --> 00:32:19.310
and all that kind of stuff it's it's not
super visual but it's still interesting

00:32:19.310 --> 00:32:19.320
super visual but it's still interesting
 

00:32:19.320 --> 00:32:20.600
super visual but it's still interesting
and it's still something you should

00:32:20.600 --> 00:32:20.610
and it's still something you should
 

00:32:20.610 --> 00:32:23.060
and it's still something you should
consider using but to help you further

00:32:23.060 --> 00:32:23.070
consider using but to help you further
 

00:32:23.070 --> 00:32:26.480
consider using but to help you further
we developed an ability to have comm

00:32:26.480 --> 00:32:26.490
we developed an ability to have comm
 

00:32:26.490 --> 00:32:28.690
we developed an ability to have comm
trace being generated out of your builds

00:32:28.690 --> 00:32:28.700
trace being generated out of your builds
 

00:32:28.700 --> 00:32:31.310
trace being generated out of your builds
so what we do now is that we are capable

00:32:31.310 --> 00:32:31.320
so what we do now is that we are capable
 

00:32:31.320 --> 00:32:34.460
so what we do now is that we are capable
of of generating these and we can

00:32:34.460 --> 00:32:34.470
of of generating these and we can
 

00:32:34.470 --> 00:32:37.790
of of generating these and we can
display very visually all the tasks that

00:32:37.790 --> 00:32:37.800
display very visually all the tasks that
 

00:32:37.800 --> 00:32:40.430
display very visually all the tasks that
are being scheduled per thread so you

00:32:40.430 --> 00:32:40.440
are being scheduled per thread so you
 

00:32:40.440 --> 00:32:41.870
are being scheduled per thread so you
can see here on the left-hand side of

00:32:41.870 --> 00:32:41.880
can see here on the left-hand side of
 

00:32:41.880 --> 00:32:43.820
can see here on the left-hand side of
the front numbers you can see the tasks

00:32:43.820 --> 00:32:43.830
the front numbers you can see the tasks
 

00:32:43.830 --> 00:32:45.320
the front numbers you can see the tasks
here you've got for instance the tasks

00:32:45.320 --> 00:32:45.330
here you've got for instance the tasks
 

00:32:45.330 --> 00:32:47.360
here you've got for instance the tasks
in magenta which is the merge resources

00:32:47.360 --> 00:32:47.370
in magenta which is the merge resources
 

00:32:47.370 --> 00:32:49.790
in magenta which is the merge resources
you can even see the workers which are

00:32:49.790 --> 00:32:49.800
you can even see the workers which are
 

00:32:49.800 --> 00:32:53.170
you can even see the workers which are
spawn for that package particular tasks

00:32:53.170 --> 00:32:53.180
spawn for that package particular tasks
 

00:32:53.180 --> 00:32:55.430
spawn for that package particular tasks
executing and by the way you can see

00:32:55.430 --> 00:32:55.440
executing and by the way you can see
 

00:32:55.440 --> 00:32:57.650
executing and by the way you can see
here visually that as soon as the task

00:32:57.650 --> 00:32:57.660
here visually that as soon as the task
 

00:32:57.660 --> 00:32:59.870
here visually that as soon as the task
is done spooning the workers the next

00:32:59.870 --> 00:32:59.880
is done spooning the workers the next
 

00:32:59.880 --> 00:33:02.690
is done spooning the workers the next
task can start which is the process

00:33:02.690 --> 00:33:02.700
task can start which is the process
 

00:33:02.700 --> 00:33:05.000
task can start which is the process
application manifest in green so you can

00:33:05.000 --> 00:33:05.010
application manifest in green so you can
 

00:33:05.010 --> 00:33:08.060
application manifest in green so you can
see how here very visually how then your

00:33:08.060 --> 00:33:08.070
see how here very visually how then your
 

00:33:08.070 --> 00:33:10.160
see how here very visually how then your
tasks can can be running in parallel

00:33:10.160 --> 00:33:10.170
tasks can can be running in parallel
 

00:33:10.170 --> 00:33:12.350
tasks can can be running in parallel
even within a single module because here

00:33:12.350 --> 00:33:12.360
even within a single module because here
 

00:33:12.360 --> 00:33:14.210
even within a single module because here
there's only one module on blue here

00:33:14.210 --> 00:33:14.220
there's only one module on blue here
 

00:33:14.220 --> 00:33:15.490
there's only one module on blue here
we've got threads

00:33:15.490 --> 00:33:15.500
we've got threads
 

00:33:15.500 --> 00:33:18.230
we've got threads
these are threads which are just you

00:33:18.230 --> 00:33:18.240
these are threads which are just you
 

00:33:18.240 --> 00:33:20.540
these are threads which are just you
know used using the executive services

00:33:20.540 --> 00:33:20.550
know used using the executive services
 

00:33:20.550 --> 00:33:22.400
know used using the executive services
so this gives you a very good visual

00:33:22.400 --> 00:33:22.410
so this gives you a very good visual
 

00:33:22.410 --> 00:33:26.890
so this gives you a very good visual
again about how we use the jvm resources

00:33:26.890 --> 00:33:26.900
again about how we use the jvm resources
 

00:33:26.900 --> 00:33:29.000
again about how we use the jvm resources
you can even go a little deeper

00:33:29.000 --> 00:33:29.010
you can even go a little deeper
 

00:33:29.010 --> 00:33:31.070
you can even go a little deeper
for instance here you can see that the

00:33:31.070 --> 00:33:31.080
for instance here you can see that the
 

00:33:31.080 --> 00:33:33.650
for instance here you can see that the
task execution span is this magenta

00:33:33.650 --> 00:33:33.660
task execution span is this magenta
 

00:33:33.660 --> 00:33:35.600
task execution span is this magenta
color you can see that there is the

00:33:35.600 --> 00:33:35.610
color you can see that there is the
 

00:33:35.610 --> 00:33:38.450
color you can see that there is the
up-to-date check such the time that God

00:33:38.450 --> 00:33:38.460
up-to-date check such the time that God
 

00:33:38.460 --> 00:33:40.490
up-to-date check such the time that God
will spend to figure out the funds which

00:33:40.490 --> 00:33:40.500
will spend to figure out the funds which
 

00:33:40.500 --> 00:33:42.980
will spend to figure out the funds which
are out to date then you've got the task

00:33:42.980 --> 00:33:42.990
are out to date then you've got the task
 

00:33:42.990 --> 00:33:45.500
are out to date then you've got the task
implementation which is the old phases

00:33:45.500 --> 00:33:45.510
implementation which is the old phases
 

00:33:45.510 --> 00:33:47.930
implementation which is the old phases
so that's really the code of the task

00:33:47.930 --> 00:33:47.940
so that's really the code of the task
 

00:33:47.940 --> 00:33:50.060
so that's really the code of the task
itself and then we even further down

00:33:50.060 --> 00:33:50.070
itself and then we even further down
 

00:33:50.070 --> 00:33:52.400
itself and then we even further down
we've we kind of like you know split it

00:33:52.400 --> 00:33:52.410
we've we kind of like you know split it
 

00:33:52.410 --> 00:33:53.600
we've we kind of like you know split it
up and further to get the different

00:33:53.600 --> 00:33:53.610
up and further to get the different
 

00:33:53.610 --> 00:33:55.310
up and further to get the different
phases so that gives us a lot of

00:33:55.310 --> 00:33:55.320
phases so that gives us a lot of
 

00:33:55.320 --> 00:33:57.170
phases so that gives us a lot of
information about how those tasks are

00:33:57.170 --> 00:33:57.180
information about how those tasks are
 

00:33:57.180 --> 00:33:59.600
information about how those tasks are
implemented so this is for our tasks

00:33:59.600 --> 00:33:59.610
implemented so this is for our tasks
 

00:33:59.610 --> 00:34:02.210
implemented so this is for our tasks
obviously if you were to run this chrome

00:34:02.210 --> 00:34:02.220
obviously if you were to run this chrome
 

00:34:02.220 --> 00:34:04.820
obviously if you were to run this chrome
trace with a different plugin or with

00:34:04.820 --> 00:34:04.830
trace with a different plugin or with
 

00:34:04.830 --> 00:34:06.770
trace with a different plugin or with
your own tasks you will see your tasks

00:34:06.770 --> 00:34:06.780
your own tasks you will see your tasks
 

00:34:06.780 --> 00:34:08.030
your own tasks you will see your tasks
as well but it would not be as

00:34:08.030 --> 00:34:08.040
as well but it would not be as
 

00:34:08.040 --> 00:34:10.550
as well but it would not be as
descriptive as this nevertheless would

00:34:10.550 --> 00:34:10.560
descriptive as this nevertheless would
 

00:34:10.560 --> 00:34:12.020
descriptive as this nevertheless would
be still very interesting visually to

00:34:12.020 --> 00:34:12.030
be still very interesting visually to
 

00:34:12.030 --> 00:34:13.610
be still very interesting visually to
figure out where those tasks belong and

00:34:13.610 --> 00:34:13.620
figure out where those tasks belong and
 

00:34:13.620 --> 00:34:15.860
figure out where those tasks belong and
so on so now if you face yourself with

00:34:15.860 --> 00:34:15.870
so on so now if you face yourself with
 

00:34:15.870 --> 00:34:17.419
so on so now if you face yourself with
you know the impression that your build

00:34:17.419 --> 00:34:17.429
you know the impression that your build
 

00:34:17.429 --> 00:34:21.279
you know the impression that your build
is slow which I'm sure is 99% of you

00:34:21.279 --> 00:34:21.289
is slow which I'm sure is 99% of you
 

00:34:21.289 --> 00:34:23.440
is slow which I'm sure is 99% of you
we would really recommend that if you

00:34:23.440 --> 00:34:23.450
we would really recommend that if you
 

00:34:23.450 --> 00:34:25.119
we would really recommend that if you
want to file a bug or tell us that you

00:34:25.119 --> 00:34:25.129
want to file a bug or tell us that you
 

00:34:25.129 --> 00:34:26.500
want to file a bug or tell us that you
know the build is slow and it should be

00:34:26.500 --> 00:34:26.510
know the build is slow and it should be
 

00:34:26.510 --> 00:34:28.419
know the build is slow and it should be
improved that you provide us at the very

00:34:28.419 --> 00:34:28.429
improved that you provide us at the very
 

00:34:28.429 --> 00:34:30.940
improved that you provide us at the very
least this contrast so that we can

00:34:30.940 --> 00:34:30.950
least this contrast so that we can
 

00:34:30.950 --> 00:34:33.279
least this contrast so that we can
visually look into what's going on there

00:34:33.279 --> 00:34:33.289
visually look into what's going on there
 

00:34:33.289 --> 00:34:35.889
visually look into what's going on there
is no PII information we don't have fine

00:34:35.889 --> 00:34:35.899
is no PII information we don't have fine
 

00:34:35.899 --> 00:34:37.359
is no PII information we don't have fine
names we don't have task name we know

00:34:37.359 --> 00:34:37.369
names we don't have task name we know
 

00:34:37.369 --> 00:34:39.009
names we don't have task name we know
that variant names there's nothing in

00:34:39.009 --> 00:34:39.019
that variant names there's nothing in
 

00:34:39.019 --> 00:34:41.980
that variant names there's nothing in
there that should be of any concern this

00:34:41.980 --> 00:34:41.990
there that should be of any concern this
 

00:34:41.990 --> 00:34:43.750
there that should be of any concern this
is the same data that we use that's the

00:34:43.750 --> 00:34:43.760
is the same data that we use that's the
 

00:34:43.760 --> 00:34:45.759
is the same data that we use that's the
data that we upload to our server so if

00:34:45.759 --> 00:34:45.769
data that we upload to our server so if
 

00:34:45.769 --> 00:34:48.220
data that we upload to our server so if
you opted in the server that we do to

00:34:48.220 --> 00:34:48.230
you opted in the server that we do to
 

00:34:48.230 --> 00:34:50.529
you opted in the server that we do to
the data that Leo used to do all these

00:34:50.529 --> 00:34:50.539
the data that Leo used to do all these
 

00:34:50.539 --> 00:34:52.450
the data that Leo used to do all these
graphs earlier you don't share anything

00:34:52.450 --> 00:34:52.460
graphs earlier you don't share anything
 

00:34:52.460 --> 00:34:56.019
graphs earlier you don't share anything
else so to have the trace enabled you

00:34:56.019 --> 00:34:56.029
else so to have the trace enabled you
 

00:34:56.029 --> 00:34:59.500
else so to have the trace enabled you
just need to add this property and then

00:34:59.500 --> 00:34:59.510
just need to add this property and then
 

00:34:59.510 --> 00:35:01.210
just need to add this property and then
you will find a JSON file inside the

00:35:01.210 --> 00:35:01.220
you will find a JSON file inside the
 

00:35:01.220 --> 00:35:03.849
you will find a JSON file inside the
build on the weight profile that JSON

00:35:03.849 --> 00:35:03.859
build on the weight profile that JSON
 

00:35:03.859 --> 00:35:06.039
build on the weight profile that JSON
file you can use it in Chrome you can

00:35:06.039 --> 00:35:06.049
file you can use it in Chrome you can
 

00:35:06.049 --> 00:35:08.380
file you can use it in Chrome you can
load the chrome tracing facility in

00:35:08.380 --> 00:35:08.390
load the chrome tracing facility in
 

00:35:08.390 --> 00:35:10.000
load the chrome tracing facility in
chrome and then you can load that file

00:35:10.000 --> 00:35:10.010
chrome and then you can load that file
 

00:35:10.010 --> 00:35:11.859
chrome and then you can load that file
and then you will see exactly what I

00:35:11.859 --> 00:35:11.869
and then you will see exactly what I
 

00:35:11.869 --> 00:35:13.720
and then you will see exactly what I
just displayed in the previous slides

00:35:13.720 --> 00:35:13.730
just displayed in the previous slides
 

00:35:13.730 --> 00:35:17.500
just displayed in the previous slides
again it is super visual very useful it

00:35:17.500 --> 00:35:17.510
again it is super visual very useful it
 

00:35:17.510 --> 00:35:19.599
again it is super visual very useful it
taught us a few things when we started

00:35:19.599 --> 00:35:19.609
taught us a few things when we started
 

00:35:19.609 --> 00:35:21.579
taught us a few things when we started
looking at this even ourselves so I

00:35:21.579 --> 00:35:21.589
looking at this even ourselves so I
 

00:35:21.589 --> 00:35:23.049
looking at this even ourselves so I
totally recommend that if you have a

00:35:23.049 --> 00:35:23.059
totally recommend that if you have a
 

00:35:23.059 --> 00:35:24.970
totally recommend that if you have a
very sophisticated build you try this

00:35:24.970 --> 00:35:24.980
very sophisticated build you try this
 

00:35:24.980 --> 00:35:27.130
very sophisticated build you try this
because you might get some few surprises

00:35:27.130 --> 00:35:27.140
because you might get some few surprises
 

00:35:27.140 --> 00:35:30.279
because you might get some few surprises
around there and with that I'd like to

00:35:30.279 --> 00:35:30.289
around there and with that I'd like to
 

00:35:30.289 --> 00:35:31.780
around there and with that I'd like to
thank you for coming today

00:35:31.780 --> 00:35:31.790
thank you for coming today
 

00:35:31.790 --> 00:35:53.170
thank you for coming today
[Music]

