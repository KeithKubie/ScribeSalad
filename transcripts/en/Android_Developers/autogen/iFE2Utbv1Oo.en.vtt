WEBVTT
Kind: captions
Language: en

00:00:01.500 --> 00:00:05.380 align:start position:0%
 
[Music]

00:00:05.380 --> 00:00:05.390 align:start position:0%
[Music]
 

00:00:05.390 --> 00:00:08.089 align:start position:0%
[Music]
hello<00:00:06.390><c> everyone</c><00:00:06.720><c> I'm</c><00:00:07.080><c> David</c><00:00:07.379><c> Cyr</c><00:00:07.710><c> I'm</c><00:00:07.950><c> the</c>

00:00:08.089 --> 00:00:08.099 align:start position:0%
hello everyone I'm David Cyr I'm the
 

00:00:08.099 --> 00:00:09.290 align:start position:0%
hello everyone I'm David Cyr I'm the
lead<00:00:08.400><c> of</c><00:00:08.550><c> the</c><00:00:08.639><c> Mountain</c><00:00:08.880><c> View</c><00:00:08.910><c> Android</c>

00:00:09.290 --> 00:00:09.300 align:start position:0%
lead of the Mountain View Android
 

00:00:09.300 --> 00:00:11.990 align:start position:0%
lead of the Mountain View Android
runtime<00:00:09.510><c> team</c><00:00:09.950><c> we're</c><00:00:10.950><c> the</c><00:00:11.040><c> folks</c><00:00:11.160><c> that</c><00:00:11.519><c> build</c>

00:00:11.990 --> 00:00:12.000 align:start position:0%
runtime team we're the folks that build
 

00:00:12.000 --> 00:00:13.570 align:start position:0%
runtime team we're the folks that build
the<00:00:12.059><c> code</c><00:00:12.240><c> that</c><00:00:12.420><c> runs</c><00:00:12.480><c> on</c><00:00:12.750><c> your</c><00:00:12.780><c> phone</c><00:00:13.200><c> and</c>

00:00:13.570 --> 00:00:13.580 align:start position:0%
the code that runs on your phone and
 

00:00:13.580 --> 00:00:16.220 align:start position:0%
the code that runs on your phone and
loads<00:00:14.580><c> your</c><00:00:14.759><c> applications</c><00:00:15.420><c> runs</c><00:00:15.900><c> them</c><00:00:16.080><c> and</c>

00:00:16.220 --> 00:00:16.230 align:start position:0%
loads your applications runs them and
 

00:00:16.230 --> 00:00:24.380 align:start position:0%
loads your applications runs them and
manages<00:00:16.590><c> their</c><00:00:16.770><c> memory</c><00:00:20.869><c> so</c><00:00:22.730><c> so</c><00:00:23.730><c> last</c><00:00:24.029><c> year</c><00:00:24.240><c> our</c>

00:00:24.380 --> 00:00:24.390 align:start position:0%
manages their memory so so last year our
 

00:00:24.390 --> 00:00:26.540 align:start position:0%
manages their memory so so last year our
team<00:00:24.600><c> presented</c><00:00:25.260><c> the</c><00:00:25.619><c> evolution</c><00:00:26.039><c> of</c><00:00:26.099><c> art</c><00:00:26.279><c> and</c>

00:00:26.540 --> 00:00:26.550 align:start position:0%
team presented the evolution of art and
 

00:00:26.550 --> 00:00:28.580 align:start position:0%
team presented the evolution of art and
we<00:00:27.180><c> describe</c><00:00:27.480><c> some</c><00:00:27.660><c> of</c><00:00:27.689><c> the</c><00:00:27.810><c> techniques</c><00:00:28.439><c> we're</c>

00:00:28.580 --> 00:00:28.590 align:start position:0%
we describe some of the techniques we're
 

00:00:28.590 --> 00:00:30.050 align:start position:0%
we describe some of the techniques we're
using<00:00:28.740><c> at</c><00:00:28.920><c> the</c><00:00:29.010><c> runtime</c><00:00:29.429><c> and</c><00:00:29.640><c> how</c><00:00:29.760><c> you</c><00:00:29.820><c> can</c>

00:00:30.050 --> 00:00:30.060 align:start position:0%
using at the runtime and how you can
 

00:00:30.060 --> 00:00:31.630 align:start position:0%
using at the runtime and how you can
really<00:00:30.390><c> see</c><00:00:30.570><c> the</c><00:00:30.689><c> goodness</c><00:00:30.869><c> that</c><00:00:31.199><c> we</c><00:00:31.289><c> bring</c>

00:00:31.630 --> 00:00:31.640 align:start position:0%
really see the goodness that we bring
 

00:00:31.640 --> 00:00:34.370 align:start position:0%
really see the goodness that we bring
this<00:00:32.640><c> year</c><00:00:32.910><c> so</c><00:00:33.510><c> last</c><00:00:33.809><c> year</c><00:00:33.989><c> we</c><00:00:34.079><c> talked</c><00:00:34.260><c> about</c>

00:00:34.370 --> 00:00:34.380 align:start position:0%
this year so last year we talked about
 

00:00:34.380 --> 00:00:36.190 align:start position:0%
this year so last year we talked about
the<00:00:34.680><c> profile</c><00:00:35.070><c> got</c><00:00:35.219><c> it</c><00:00:35.309><c> up</c><00:00:35.399><c> compilation</c>

00:00:36.190 --> 00:00:36.200 align:start position:0%
the profile got it up compilation
 

00:00:36.200 --> 00:00:38.690 align:start position:0%
the profile got it up compilation
how<00:00:37.200><c> you</c><00:00:37.260><c> can</c><00:00:37.440><c> make</c><00:00:37.500><c> your</c><00:00:37.770><c> experience</c><00:00:38.550><c> better</c>

00:00:38.690 --> 00:00:38.700 align:start position:0%
how you can make your experience better
 

00:00:38.700 --> 00:00:40.130 align:start position:0%
how you can make your experience better
by<00:00:38.910><c> understanding</c><00:00:38.969><c> how</c><00:00:39.420><c> programs</c><00:00:39.809><c> run</c><00:00:40.020><c> on</c>

00:00:40.130 --> 00:00:40.140 align:start position:0%
by understanding how programs run on
 

00:00:40.140 --> 00:00:42.350 align:start position:0%
by understanding how programs run on
your<00:00:40.200><c> phone</c><00:00:40.440><c> we</c><00:00:41.430><c> talked</c><00:00:41.640><c> about</c><00:00:41.730><c> how</c><00:00:41.940><c> important</c>

00:00:42.350 --> 00:00:42.360 align:start position:0%
your phone we talked about how important
 

00:00:42.360 --> 00:00:45.740 align:start position:0%
your phone we talked about how important
it<00:00:42.480><c> is</c><00:00:42.540><c> to</c><00:00:42.950><c> keep</c><00:00:43.950><c> memory</c><00:00:44.250><c> usage</c><00:00:44.579><c> down</c><00:00:44.789><c> and</c><00:00:45.059><c> to</c>

00:00:45.740 --> 00:00:45.750 align:start position:0%
it is to keep memory usage down and to
 

00:00:45.750 --> 00:00:48.940 align:start position:0%
it is to keep memory usage down and to
make<00:00:45.780><c> memory</c><00:00:46.110><c> allocation</c><00:00:46.649><c> blindingly</c><00:00:47.309><c> fast</c>

00:00:48.940 --> 00:00:48.950 align:start position:0%
make memory allocation blindingly fast
 

00:00:48.950 --> 00:00:52.369 align:start position:0%
make memory allocation blindingly fast
and<00:00:50.120><c> we</c><00:00:51.120><c> talked</c><00:00:51.360><c> about</c><00:00:51.510><c> just-in-time</c>

00:00:52.369 --> 00:00:52.379 align:start position:0%
and we talked about just-in-time
 

00:00:52.379 --> 00:00:54.350 align:start position:0%
and we talked about just-in-time
compilation<00:00:52.739><c> and</c><00:00:53.340><c> how</c><00:00:53.820><c> we</c><00:00:53.879><c> can</c><00:00:54.030><c> get</c><00:00:54.180><c> great</c>

00:00:54.350 --> 00:00:54.360 align:start position:0%
compilation and how we can get great
 

00:00:54.360 --> 00:00:55.850 align:start position:0%
compilation and how we can get great
performance<00:00:54.570><c> from</c><00:00:55.110><c> your</c><00:00:55.289><c> applications</c>

00:00:55.850 --> 00:00:55.860 align:start position:0%
performance from your applications
 

00:00:55.860 --> 00:00:58.479 align:start position:0%
performance from your applications
without<00:00:56.730><c> the</c><00:00:56.850><c> annoying</c><00:00:57.090><c> optimizing</c><00:00:57.809><c> dialogue</c>

00:00:58.479 --> 00:00:58.489 align:start position:0%
without the annoying optimizing dialogue
 

00:00:58.489 --> 00:01:00.770 align:start position:0%
without the annoying optimizing dialogue
so<00:00:59.489><c> you</c><00:00:59.520><c> heard</c><00:00:59.730><c> last</c><00:00:59.940><c> year</c><00:01:00.090><c> about</c><00:01:00.390><c> how</c><00:01:00.539><c> great</c>

00:01:00.770 --> 00:01:00.780 align:start position:0%
so you heard last year about how great
 

00:01:00.780 --> 00:01:04.270 align:start position:0%
so you heard last year about how great
things<00:01:00.960><c> are</c><00:01:01.170><c> but</c><00:01:02.010><c> it</c><00:01:02.100><c> was</c><00:01:02.190><c> just</c><00:01:02.370><c> the</c><00:01:02.550><c> beginning</c>

00:01:04.270 --> 00:01:04.280 align:start position:0%
things are but it was just the beginning
 

00:01:04.280 --> 00:01:06.560 align:start position:0%
things are but it was just the beginning
now<00:01:05.280><c> that</c><00:01:05.460><c> your</c><00:01:05.580><c> phone</c><00:01:05.729><c> knows</c><00:01:05.939><c> more</c><00:01:06.210><c> about</c><00:01:06.240><c> how</c>

00:01:06.560 --> 00:01:06.570 align:start position:0%
now that your phone knows more about how
 

00:01:06.570 --> 00:01:08.840 align:start position:0%
now that your phone knows more about how
your<00:01:06.720><c> applications</c><00:01:07.229><c> execute</c><00:01:07.770><c> we</c><00:01:08.520><c> can</c><00:01:08.700><c> focus</c>

00:01:08.840 --> 00:01:08.850 align:start position:0%
your applications execute we can focus
 

00:01:08.850 --> 00:01:10.580 align:start position:0%
your applications execute we can focus
on<00:01:09.150><c> loading</c><00:01:09.420><c> only</c><00:01:09.540><c> the</c><00:01:09.720><c> parts</c><00:01:10.049><c> that</c><00:01:10.229><c> are</c>

00:01:10.580 --> 00:01:10.590 align:start position:0%
on loading only the parts that are
 

00:01:10.590 --> 00:01:13.219 align:start position:0%
on loading only the parts that are
important<00:01:10.979><c> to</c><00:01:11.070><c> you</c><00:01:11.250><c> so</c><00:01:12.150><c> apps</c><00:01:12.330><c> load</c><00:01:12.570><c> faster</c><00:01:13.049><c> and</c>

00:01:13.219 --> 00:01:13.229 align:start position:0%
important to you so apps load faster and
 

00:01:13.229 --> 00:01:17.330 align:start position:0%
important to you so apps load faster and
use<00:01:14.010><c> less</c><00:01:14.130><c> memory</c><00:01:14.549><c> and</c><00:01:16.159><c> speaking</c><00:01:17.159><c> of</c><00:01:17.220><c> less</c>

00:01:17.330 --> 00:01:17.340 align:start position:0%
use less memory and speaking of less
 

00:01:17.340 --> 00:01:19.160 align:start position:0%
use less memory and speaking of less
memory<00:01:17.700><c> we've</c><00:01:18.390><c> made</c><00:01:18.540><c> your</c><00:01:18.659><c> applications</c>

00:01:19.160 --> 00:01:19.170 align:start position:0%
memory we've made your applications
 

00:01:19.170 --> 00:01:21.679 align:start position:0%
memory we've made your applications
spent<00:01:19.350><c> less</c><00:01:19.470><c> time</c><00:01:19.530><c> reclaiming</c><00:01:20.100><c> and</c><00:01:20.479><c> even</c><00:01:21.479><c> less</c>

00:01:21.679 --> 00:01:21.689 align:start position:0%
spent less time reclaiming and even less
 

00:01:21.689 --> 00:01:25.039 align:start position:0%
spent less time reclaiming and even less
time<00:01:22.009><c> allocating</c><00:01:23.009><c> memory</c><00:01:23.130><c> and</c><00:01:23.840><c> of</c><00:01:24.840><c> course</c>

00:01:25.039 --> 00:01:25.049 align:start position:0%
time allocating memory and of course
 

00:01:25.049 --> 00:01:26.929 align:start position:0%
time allocating memory and of course
with<00:01:25.229><c> a</c><00:01:25.259><c> just-in-time</c><00:01:25.650><c> compiler</c><00:01:26.189><c> we</c><00:01:26.820><c> can</c>

00:01:26.929 --> 00:01:26.939 align:start position:0%
with a just-in-time compiler we can
 

00:01:26.939 --> 00:01:28.219 align:start position:0%
with a just-in-time compiler we can
focus<00:01:27.060><c> on</c><00:01:27.240><c> making</c><00:01:27.270><c> your</c><00:01:27.450><c> applications</c><00:01:28.020><c> run</c>

00:01:28.219 --> 00:01:28.229 align:start position:0%
focus on making your applications run
 

00:01:28.229 --> 00:01:29.109 align:start position:0%
focus on making your applications run
even<00:01:28.439><c> faster</c>

00:01:29.109 --> 00:01:29.119 align:start position:0%
even faster
 

00:01:29.119 --> 00:01:31.460 align:start position:0%
even faster
nicolas<00:01:30.119><c> and</c><00:01:30.240><c> art</c><00:01:30.420><c> will</c><00:01:30.900><c> be</c><00:01:30.930><c> talking</c><00:01:31.320><c> to</c><00:01:31.380><c> you</c>

00:01:31.460 --> 00:01:31.470 align:start position:0%
nicolas and art will be talking to you
 

00:01:31.470 --> 00:01:36.920 align:start position:0%
nicolas and art will be talking to you
in<00:01:31.530><c> just</c><00:01:31.740><c> a</c><00:01:31.890><c> moment</c><00:01:32.220><c> about</c><00:01:32.250><c> that</c><00:01:35.930><c> you'll</c>

00:01:36.920 --> 00:01:36.930 align:start position:0%
in just a moment about that you'll
 

00:01:36.930 --> 00:01:38.690 align:start position:0%
in just a moment about that you'll
notice<00:01:37.170><c> I</c><00:01:37.229><c> mentioned</c><00:01:37.590><c> using</c><00:01:38.130><c> less</c><00:01:38.369><c> memory</c>

00:01:38.690 --> 00:01:38.700 align:start position:0%
notice I mentioned using less memory
 

00:01:38.700 --> 00:01:40.999 align:start position:0%
notice I mentioned using less memory
twice<00:01:39.200><c> so</c><00:01:40.200><c> let's</c><00:01:40.380><c> start</c><00:01:40.560><c> by</c><00:01:40.650><c> talking</c><00:01:40.829><c> about</c>

00:01:40.999 --> 00:01:41.009 align:start position:0%
twice so let's start by talking about
 

00:01:41.009 --> 00:01:43.639 align:start position:0%
twice so let's start by talking about
that<00:01:41.750><c> I'm</c><00:01:42.750><c> going</c><00:01:42.930><c> to</c><00:01:42.990><c> begin</c><00:01:43.170><c> by</c><00:01:43.290><c> talking</c><00:01:43.350><c> a</c>

00:01:43.639 --> 00:01:43.649 align:start position:0%
that I'm going to begin by talking a
 

00:01:43.649 --> 00:01:44.749 align:start position:0%
that I'm going to begin by talking a
little<00:01:43.680><c> bit</c><00:01:43.920><c> about</c><00:01:44.040><c> how</c><00:01:44.189><c> we</c><00:01:44.250><c> rearranged</c><00:01:44.700><c> your</c>

00:01:44.749 --> 00:01:44.759 align:start position:0%
little bit about how we rearranged your
 

00:01:44.759 --> 00:01:47.060 align:start position:0%
little bit about how we rearranged your
application<00:01:45.329><c> to</c><00:01:45.390><c> use</c><00:01:45.479><c> less</c><00:01:45.659><c> memory</c><00:01:45.840><c> and</c><00:01:46.110><c> then</c>

00:01:47.060 --> 00:01:47.070 align:start position:0%
application to use less memory and then
 

00:01:47.070 --> 00:01:48.620 align:start position:0%
application to use less memory and then
matthew<00:01:47.369><c> is</c><00:01:47.549><c> going</c><00:01:47.729><c> to</c><00:01:47.790><c> tell</c><00:01:47.939><c> tell</c><00:01:48.420><c> you</c><00:01:48.540><c> about</c>

00:01:48.620 --> 00:01:48.630 align:start position:0%
matthew is going to tell tell you about
 

00:01:48.630 --> 00:01:52.429 align:start position:0%
matthew is going to tell tell you about
how<00:01:48.979><c> we</c><00:01:49.979><c> improve</c><00:01:50.640><c> our</c><00:01:50.909><c> heap</c><00:01:51.090><c> sizes</c><00:01:51.479><c> reduce</c><00:01:52.290><c> the</c>

00:01:52.429 --> 00:01:52.439 align:start position:0%
how we improve our heap sizes reduce the
 

00:01:52.439 --> 00:01:55.760 align:start position:0%
how we improve our heap sizes reduce the
jank<00:01:52.970><c> reduce</c><00:01:53.970><c> the</c><00:01:54.210><c> pause</c><00:01:54.420><c> times</c><00:01:54.780><c> and</c><00:01:55.049><c> have</c>

00:01:55.760 --> 00:01:55.770 align:start position:0%
jank reduce the pause times and have
 

00:01:55.770 --> 00:02:00.230 align:start position:0%
jank reduce the pause times and have
even<00:01:56.549><c> better</c><00:01:56.700><c> allocation</c><00:01:57.299><c> types</c><00:01:59.090><c> first</c><00:02:00.090><c> a</c>

00:02:00.230 --> 00:02:00.240 align:start position:0%
even better allocation types first a
 

00:02:00.240 --> 00:02:01.700 align:start position:0%
even better allocation types first a
little<00:02:00.360><c> review</c><00:02:00.659><c> of</c><00:02:00.689><c> how</c><00:02:00.930><c> Android</c>

00:02:01.700 --> 00:02:01.710 align:start position:0%
little review of how Android
 

00:02:01.710 --> 00:02:03.530 align:start position:0%
little review of how Android
applications<00:02:02.340><c> work</c><00:02:02.610><c> on</c><00:02:02.820><c> your</c><00:02:03.270><c> Android</c><00:02:03.509><c> phone</c>

00:02:03.530 --> 00:02:03.540 align:start position:0%
applications work on your Android phone
 

00:02:03.540 --> 00:02:06.410 align:start position:0%
applications work on your Android phone
an<00:02:04.460><c> application</c><00:02:05.460><c> comes</c><00:02:05.610><c> in</c><00:02:05.729><c> an</c><00:02:05.820><c> apk</c><00:02:06.180><c> file</c>

00:02:06.410 --> 00:02:06.420 align:start position:0%
an application comes in an apk file
 

00:02:06.420 --> 00:02:08.570 align:start position:0%
an application comes in an apk file
which<00:02:07.200><c> contains</c><00:02:07.590><c> one</c><00:02:07.740><c> or</c><00:02:07.890><c> more</c><00:02:08.009><c> Dex</c><00:02:08.310><c> files</c>

00:02:08.570 --> 00:02:08.580 align:start position:0%
which contains one or more Dex files
 

00:02:08.580 --> 00:02:11.100 align:start position:0%
which contains one or more Dex files
these<00:02:09.479><c> contain</c><00:02:09.840><c> the</c><00:02:09.929><c> instructions</c><00:02:10.259><c> for</c>

00:02:11.100 --> 00:02:11.110 align:start position:0%
these contain the instructions for
 

00:02:11.110 --> 00:02:14.550 align:start position:0%
these contain the instructions for
executing<00:02:11.770><c> your</c><00:02:11.890><c> application</c><00:02:12.990><c> art</c><00:02:13.990><c> uses</c><00:02:14.410><c> the</c>

00:02:14.550 --> 00:02:14.560 align:start position:0%
executing your application art uses the
 

00:02:14.560 --> 00:02:15.860 align:start position:0%
executing your application art uses the
Dex<00:02:14.740><c> file</c><00:02:14.920><c> to</c><00:02:15.070><c> get</c><00:02:15.160><c> information</c><00:02:15.370><c> about</c>

00:02:15.860 --> 00:02:15.870 align:start position:0%
Dex file to get information about
 

00:02:15.870 --> 00:02:19.440 align:start position:0%
Dex file to get information about
instructions<00:02:16.870><c> to</c><00:02:17.020><c> run</c><00:02:17.340><c> strings</c><00:02:18.450><c> class</c>

00:02:19.440 --> 00:02:19.450 align:start position:0%
instructions to run strings class
 

00:02:19.450 --> 00:02:21.200 align:start position:0%
instructions to run strings class
relationships<00:02:20.170><c> and</c><00:02:20.440><c> lots</c><00:02:20.620><c> of</c><00:02:20.710><c> other</c><00:02:20.860><c> things</c>

00:02:21.200 --> 00:02:21.210 align:start position:0%
relationships and lots of other things
 

00:02:21.210 --> 00:02:23.400 align:start position:0%
relationships and lots of other things
and<00:02:22.210><c> the</c><00:02:22.390><c> Dex</c><00:02:22.570><c> files</c><00:02:22.750><c> are</c><00:02:22.900><c> loaded</c><00:02:23.020><c> into</c><00:02:23.260><c> memory</c>

00:02:23.400 --> 00:02:23.410 align:start position:0%
and the Dex files are loaded into memory
 

00:02:23.410 --> 00:02:26.760 align:start position:0%
and the Dex files are loaded into memory
by<00:02:23.740><c> art</c><00:02:24.600><c> loading</c><00:02:25.600><c> these</c><00:02:25.690><c> files</c><00:02:26.020><c> has</c><00:02:26.350><c> both</c><00:02:26.680><c> a</c>

00:02:26.760 --> 00:02:26.770 align:start position:0%
by art loading these files has both a
 

00:02:26.770 --> 00:02:32.070 align:start position:0%
by art loading these files has both a
ram<00:02:26.980><c> and</c><00:02:27.220><c> a</c><00:02:27.760><c> startup</c><00:02:28.090><c> time</c><00:02:28.240><c> cost</c><00:02:30.540><c> so</c><00:02:31.540><c> when</c><00:02:31.990><c> you</c>

00:02:32.070 --> 00:02:32.080 align:start position:0%
ram and a startup time cost so when you
 

00:02:32.080 --> 00:02:34.200 align:start position:0%
ram and a startup time cost so when you
run<00:02:32.260><c> for</c><00:02:32.560><c> instance</c><00:02:32.890><c> naps</c><00:02:33.220><c> one</c><00:02:34.000><c> of</c><00:02:34.120><c> our</c>

00:02:34.200 --> 00:02:34.210 align:start position:0%
run for instance naps one of our
 

00:02:34.210 --> 00:02:36.210 align:start position:0%
run for instance naps one of our
favorite<00:02:34.480><c> application</c><00:02:35.020><c> your</c><00:02:35.800><c> phone</c><00:02:35.980><c> reads</c>

00:02:36.210 --> 00:02:36.220 align:start position:0%
favorite application your phone reads
 

00:02:36.220 --> 00:02:38.190 align:start position:0%
favorite application your phone reads
the<00:02:36.340><c> Dex</c><00:02:36.490><c> files</c><00:02:36.700><c> into</c><00:02:36.910><c> memory</c><00:02:37.240><c> and</c><00:02:37.480><c> you</c><00:02:38.050><c> can</c>

00:02:38.190 --> 00:02:38.200 align:start position:0%
the Dex files into memory and you can
 

00:02:38.200 --> 00:02:40.130 align:start position:0%
the Dex files into memory and you can
see<00:02:38.380><c> amounts</c><00:02:38.860><c> of</c><00:02:39.010><c> thousands</c><00:02:39.400><c> of</c><00:02:39.460><c> pages</c>

00:02:40.130 --> 00:02:40.140 align:start position:0%
see amounts of thousands of pages
 

00:02:40.140 --> 00:02:42.330 align:start position:0%
see amounts of thousands of pages
multiple<00:02:41.140><c> megabytes</c><00:02:41.530><c> worth</c><00:02:41.710><c> of</c><00:02:41.920><c> information</c>

00:02:42.330 --> 00:02:42.340 align:start position:0%
multiple megabytes worth of information
 

00:02:42.340 --> 00:02:43.460 align:start position:0%
multiple megabytes worth of information
are<00:02:42.400><c> loaded</c><00:02:42.610><c> into</c><00:02:42.700><c> memory</c>

00:02:43.460 --> 00:02:43.470 align:start position:0%
are loaded into memory
 

00:02:43.470 --> 00:02:45.630 align:start position:0%
are loaded into memory
now<00:02:44.470><c> the</c><00:02:44.530><c> Dex</c><00:02:44.800><c> files</c><00:02:45.040><c> were</c><00:02:45.190><c> produced</c><00:02:45.490><c> by</c><00:02:45.610><c> a</c>

00:02:45.630 --> 00:02:45.640 align:start position:0%
now the Dex files were produced by a
 

00:02:45.640 --> 00:02:47.370 align:start position:0%
now the Dex files were produced by a
developer<00:02:46.150><c> and</c><00:02:46.270><c> the</c><00:02:46.630><c> typical</c><00:02:46.960><c> developer</c>

00:02:47.370 --> 00:02:47.380 align:start position:0%
developer and the typical developer
 

00:02:47.380 --> 00:02:49.800 align:start position:0%
developer and the typical developer
tools<00:02:47.620><c> don't</c><00:02:48.520><c> really</c><00:02:48.880><c> know</c><00:02:49.060><c> about</c><00:02:49.330><c> the</c><00:02:49.630><c> use</c>

00:02:49.800 --> 00:02:49.810 align:start position:0%
tools don't really know about the use
 

00:02:49.810 --> 00:02:51.840 align:start position:0%
tools don't really know about the use
cases<00:02:50.110><c> that</c><00:02:50.320><c> are</c><00:02:51.130><c> going</c><00:02:51.280><c> to</c><00:02:51.340><c> be</c><00:02:51.430><c> important</c><00:02:51.790><c> to</c>

00:02:51.840 --> 00:02:51.850 align:start position:0%
cases that are going to be important to
 

00:02:51.850 --> 00:02:54.240 align:start position:0%
cases that are going to be important to
you<00:02:51.910><c> on</c><00:02:52.090><c> your</c><00:02:52.240><c> phone</c><00:02:52.560><c> so</c><00:02:53.560><c> the</c><00:02:53.680><c> Dex</c><00:02:53.860><c> files</c><00:02:54.070><c> may</c>

00:02:54.240 --> 00:02:54.250 align:start position:0%
you on your phone so the Dex files may
 

00:02:54.250 --> 00:02:56.250 align:start position:0%
you on your phone so the Dex files may
have<00:02:54.459><c> unimportant</c><00:02:55.450><c> things</c><00:02:55.630><c> on</c><00:02:55.870><c> the</c><00:02:56.080><c> same</c>

00:02:56.250 --> 00:02:56.260 align:start position:0%
have unimportant things on the same
 

00:02:56.260 --> 00:03:00.960 align:start position:0%
have unimportant things on the same
pages<00:02:56.530><c> as</c><00:02:56.830><c> important</c><00:02:57.790><c> things</c><00:02:58.000><c> like</c><00:02:59.970><c> for</c>

00:03:00.960 --> 00:03:00.970 align:start position:0%
pages as important things like for
 

00:03:00.970 --> 00:03:04.170 align:start position:0%
pages as important things like for
example<00:03:02.010><c> the</c><00:03:03.010><c> way</c><00:03:03.130><c> you</c><00:03:03.190><c> use</c><00:03:03.490><c> Maps</c><00:03:03.760><c> you</c><00:03:04.030><c> may</c>

00:03:04.170 --> 00:03:04.180 align:start position:0%
example the way you use Maps you may
 

00:03:04.180 --> 00:03:05.910 align:start position:0%
example the way you use Maps you may
only<00:03:04.330><c> use</c><00:03:04.450><c> some</c><00:03:04.840><c> of</c><00:03:04.959><c> the</c><00:03:05.080><c> methods</c><00:03:05.410><c> that</c><00:03:05.500><c> were</c>

00:03:05.910 --> 00:03:05.920 align:start position:0%
only use some of the methods that were
 

00:03:05.920 --> 00:03:10.230 align:start position:0%
only use some of the methods that were
in<00:03:06.040><c> the</c><00:03:06.130><c> Dex</c><00:03:06.280><c> files</c><00:03:06.780><c> or</c><00:03:08.760><c> some</c><00:03:09.760><c> of</c><00:03:09.880><c> the</c><00:03:09.970><c> strings</c>

00:03:10.230 --> 00:03:10.240 align:start position:0%
in the Dex files or some of the strings
 

00:03:10.240 --> 00:03:13.350 align:start position:0%
in the Dex files or some of the strings
that<00:03:10.480><c> are</c><00:03:10.540><c> there</c><00:03:10.840><c> are</c><00:03:11.410><c> not</c><00:03:11.820><c> seen</c><00:03:12.820><c> in</c><00:03:13.060><c> your</c><00:03:13.209><c> use</c>

00:03:13.350 --> 00:03:13.360 align:start position:0%
that are there are not seen in your use
 

00:03:13.360 --> 00:03:18.560 align:start position:0%
that are there are not seen in your use
case<00:03:14.730><c> as</c><00:03:15.730><c> I</c><00:03:15.850><c> told</c><00:03:16.000><c> you</c><00:03:16.090><c> before</c><00:03:16.470><c> in</c><00:03:17.470><c> Android</c><00:03:17.950><c> an</c>

00:03:18.560 --> 00:03:18.570 align:start position:0%
case as I told you before in Android an
 

00:03:18.570 --> 00:03:21.090 align:start position:0%
case as I told you before in Android an
art<00:03:19.570><c> introduced</c><00:03:19.959><c> profile</c><00:03:20.320><c> based</c><00:03:20.500><c> compilation</c>

00:03:21.090 --> 00:03:21.100 align:start position:0%
art introduced profile based compilation
 

00:03:21.100 --> 00:03:24.360 align:start position:0%
art introduced profile based compilation
in<00:03:21.670><c> Android</c><00:03:22.510><c> oh</c><00:03:22.600><c> we</c><00:03:23.440><c> have</c><00:03:23.620><c> clever</c><00:03:23.830><c> new</c><00:03:24.010><c> uses</c>

00:03:24.360 --> 00:03:24.370 align:start position:0%
in Android oh we have clever new uses
 

00:03:24.370 --> 00:03:26.850 align:start position:0%
in Android oh we have clever new uses
for<00:03:24.550><c> this</c><00:03:24.900><c> several</c><00:03:25.900><c> clever</c><00:03:26.110><c> new</c><00:03:26.260><c> uses</c><00:03:26.530><c> in</c><00:03:26.650><c> fact</c>

00:03:26.850 --> 00:03:26.860 align:start position:0%
for this several clever new uses in fact
 

00:03:26.860 --> 00:03:28.590 align:start position:0%
for this several clever new uses in fact
but<00:03:27.580><c> one</c><00:03:27.730><c> of</c><00:03:27.760><c> the</c><00:03:27.910><c> ones</c><00:03:28.000><c> I'm</c><00:03:28.180><c> here</c><00:03:28.390><c> to</c><00:03:28.480><c> talk</c>

00:03:28.590 --> 00:03:28.600 align:start position:0%
but one of the ones I'm here to talk
 

00:03:28.600 --> 00:03:30.750 align:start position:0%
but one of the ones I'm here to talk
about<00:03:28.660><c> is</c><00:03:29.080><c> improving</c><00:03:29.800><c> the</c><00:03:29.860><c> Dex</c><00:03:30.040><c> file</c><00:03:30.220><c> locality</c>

00:03:30.750 --> 00:03:30.760 align:start position:0%
about is improving the Dex file locality
 

00:03:30.760 --> 00:03:34.320 align:start position:0%
about is improving the Dex file locality
the<00:03:31.630><c> idea</c><00:03:31.930><c> is</c><00:03:32.019><c> simple</c><00:03:32.670><c> use</c><00:03:33.670><c> the</c><00:03:33.820><c> gyp</c><00:03:34.000><c> profile</c>

00:03:34.320 --> 00:03:34.330 align:start position:0%
the idea is simple use the gyp profile
 

00:03:34.330 --> 00:03:35.970 align:start position:0%
the idea is simple use the gyp profile
information<00:03:34.870><c> to</c><00:03:34.959><c> move</c><00:03:35.110><c> the</c><00:03:35.350><c> important</c><00:03:35.800><c> things</c>

00:03:35.970 --> 00:03:35.980 align:start position:0%
information to move the important things
 

00:03:35.980 --> 00:03:37.229 align:start position:0%
information to move the important things
the<00:03:36.100><c> things</c><00:03:36.400><c> that</c><00:03:36.489><c> have</c><00:03:36.640><c> been</c><00:03:36.670><c> used</c><00:03:36.940><c> by</c><00:03:37.060><c> you</c>

00:03:37.229 --> 00:03:37.239 align:start position:0%
the things that have been used by you
 

00:03:37.239 --> 00:03:38.790 align:start position:0%
the things that have been used by you
and<00:03:37.570><c> your</c><00:03:37.720><c> usage</c><00:03:38.050><c> of</c><00:03:38.110><c> the</c><00:03:38.200><c> applications</c>

00:03:38.790 --> 00:03:38.800 align:start position:0%
and your usage of the applications
 

00:03:38.800 --> 00:03:42.770 align:start position:0%
and your usage of the applications
closer<00:03:39.340><c> together</c><00:03:39.580><c> and</c><00:03:40.470><c> this</c><00:03:41.470><c> is</c><00:03:41.530><c> all</c><00:03:41.830><c> done</c>

00:03:42.770 --> 00:03:42.780 align:start position:0%
closer together and this is all done
 

00:03:42.780 --> 00:03:45.210 align:start position:0%
closer together and this is all done
seamlessly<00:03:43.780><c> and</c><00:03:43.989><c> transparently</c><00:03:44.050><c> to</c><00:03:44.920><c> the</c><00:03:45.010><c> user</c>

00:03:45.210 --> 00:03:45.220 align:start position:0%
seamlessly and transparently to the user
 

00:03:45.220 --> 00:03:49.430 align:start position:0%
seamlessly and transparently to the user
as<00:03:45.489><c> we</c><00:03:45.910><c> compile</c><00:03:46.209><c> applications</c><00:03:46.780><c> on</c><00:03:46.870><c> the</c><00:03:46.959><c> device</c>

00:03:49.430 --> 00:03:49.440 align:start position:0%
 
 

00:03:49.440 --> 00:03:52.020 align:start position:0%
 
so<00:03:50.440><c> after</c><00:03:50.680><c> we</c><00:03:50.769><c> run</c><00:03:50.920><c> your</c><00:03:51.070><c> application</c><00:03:51.550><c> once</c><00:03:51.790><c> at</c>

00:03:52.020 --> 00:03:52.030 align:start position:0%
so after we run your application once at
 

00:03:52.030 --> 00:03:53.520 align:start position:0%
so after we run your application once at
least<00:03:52.060><c> to</c><00:03:52.300><c> collect</c><00:03:52.570><c> the</c><00:03:52.690><c> profile</c><00:03:52.989><c> information</c>

00:03:53.520 --> 00:03:53.530 align:start position:0%
least to collect the profile information
 

00:03:53.530 --> 00:03:55.199 align:start position:0%
least to collect the profile information
we<00:03:53.980><c> use</c><00:03:54.040><c> information</c><00:03:54.370><c> about</c><00:03:54.670><c> what</c><00:03:54.910><c> parts</c><00:03:55.150><c> of</c>

00:03:55.199 --> 00:03:55.209 align:start position:0%
we use information about what parts of
 

00:03:55.209 --> 00:03:56.370 align:start position:0%
we use information about what parts of
the<00:03:55.269><c> application</c><00:03:55.390><c> we're</c><00:03:55.840><c> important</c><00:03:56.140><c> to</c><00:03:56.230><c> you</c>

00:03:56.370 --> 00:03:56.380 align:start position:0%
the application we're important to you
 

00:03:56.380 --> 00:03:58.410 align:start position:0%
the application we're important to you
we<00:03:57.340><c> gather</c><00:03:57.519><c> the</c><00:03:57.670><c> important</c><00:03:58.030><c> methods</c><00:03:58.300><c> together</c>

00:03:58.410 --> 00:03:58.420 align:start position:0%
we gather the important methods together
 

00:03:58.420 --> 00:04:00.300 align:start position:0%
we gather the important methods together
and<00:03:59.380><c> leave</c><00:03:59.530><c> the</c><00:03:59.590><c> unimportant</c><00:04:00.040><c> methods</c>

00:04:00.300 --> 00:04:00.310 align:start position:0%
and leave the unimportant methods
 

00:04:00.310 --> 00:04:02.970 align:start position:0%
and leave the unimportant methods
together<00:04:00.430><c> as</c><00:04:00.790><c> you</c><00:04:01.780><c> can</c><00:04:01.900><c> see</c><00:04:02.080><c> on</c><00:04:02.410><c> the</c><00:04:02.590><c> right</c>

00:04:02.970 --> 00:04:02.980 align:start position:0%
together as you can see on the right
 

00:04:02.980 --> 00:04:06.650 align:start position:0%
together as you can see on the right
they're<00:04:03.239><c> a</c><00:04:04.239><c> lot</c><00:04:04.870><c> fewer</c><00:04:05.019><c> pages</c><00:04:05.530><c> are</c><00:04:05.739><c> accessed</c>

00:04:06.650 --> 00:04:06.660 align:start position:0%
they're a lot fewer pages are accessed
 

00:04:06.660 --> 00:04:09.449 align:start position:0%
they're a lot fewer pages are accessed
especially<00:04:07.660><c> the</c><00:04:07.810><c> methods</c><00:04:08.140><c> of</c><00:04:08.380><c> when</c><00:04:09.250><c> we</c><00:04:09.340><c> use</c>

00:04:09.449 --> 00:04:09.459 align:start position:0%
especially the methods of when we use
 

00:04:09.459 --> 00:04:13.199 align:start position:0%
especially the methods of when we use
profiling<00:04:09.880><c> information</c><00:04:11.820><c> now</c><00:04:12.820><c> let's</c><00:04:13.000><c> take</c><00:04:13.180><c> a</c>

00:04:13.199 --> 00:04:13.209 align:start position:0%
profiling information now let's take a
 

00:04:13.209 --> 00:04:15.300 align:start position:0%
profiling information now let's take a
look<00:04:13.840><c> at</c><00:04:13.989><c> what</c><00:04:14.410><c> type</c><00:04:14.560><c> of</c><00:04:14.680><c> RAM</c><00:04:14.799><c> improvements</c><00:04:15.250><c> we</c>

00:04:15.300 --> 00:04:15.310 align:start position:0%
look at what type of RAM improvements we
 

00:04:15.310 --> 00:04:17.250 align:start position:0%
look at what type of RAM improvements we
see<00:04:15.489><c> after</c><00:04:15.640><c> launching</c><00:04:16.000><c> a</c><00:04:16.030><c> few</c><00:04:16.209><c> apps</c><00:04:16.390><c> a</c><00:04:16.690><c> few</c><00:04:17.169><c> of</c>

00:04:17.250 --> 00:04:17.260 align:start position:0%
see after launching a few apps a few of
 

00:04:17.260 --> 00:04:18.900 align:start position:0%
see after launching a few apps a few of
our<00:04:17.290><c> favorites</c><00:04:17.650><c> again</c><00:04:17.859><c> as</c><00:04:18.519><c> you</c><00:04:18.700><c> can</c><00:04:18.820><c> see</c>

00:04:18.900 --> 00:04:18.910 align:start position:0%
our favorites again as you can see
 

00:04:18.910 --> 00:04:19.770 align:start position:0%
our favorites again as you can see
there's<00:04:19.090><c> a</c><00:04:19.150><c> significant</c><00:04:19.690><c> reduction</c>

00:04:19.770 --> 00:04:19.780 align:start position:0%
there's a significant reduction
 

00:04:19.780 --> 00:04:21.870 align:start position:0%
there's a significant reduction
typically<00:04:20.440><c> around</c><00:04:20.620><c> a</c><00:04:20.770><c> third</c><00:04:20.979><c> in</c><00:04:21.669><c> these</c>

00:04:21.870 --> 00:04:21.880 align:start position:0%
typically around a third in these
 

00:04:21.880 --> 00:04:23.280 align:start position:0%
typically around a third in these
applications

00:04:23.280 --> 00:04:23.290 align:start position:0%
applications
 

00:04:23.290 --> 00:04:27.990 align:start position:0%
applications
it's<00:04:23.620><c> less</c><00:04:24.100><c> member</c><00:04:24.430><c> used</c><00:04:24.670><c> by</c><00:04:25.530><c> decks</c><00:04:27.000><c> after</c>

00:04:27.990 --> 00:04:28.000 align:start position:0%
it's less member used by decks after
 

00:04:28.000 --> 00:04:30.630 align:start position:0%
it's less member used by decks after
layout<00:04:28.530><c> this</c><00:04:29.530><c> Ram</c><00:04:29.710><c> production</c><00:04:30.100><c> also</c><00:04:30.250><c> improved</c>

00:04:30.630 --> 00:04:30.640 align:start position:0%
layout this Ram production also improved
 

00:04:30.640 --> 00:04:32.190 align:start position:0%
layout this Ram production also improved
launch<00:04:30.820><c> time</c><00:04:31.090><c> on</c><00:04:31.240><c> devices</c><00:04:31.600><c> that</c><00:04:31.780><c> have</c><00:04:32.020><c> slower</c>

00:04:32.190 --> 00:04:32.200 align:start position:0%
launch time on devices that have slower
 

00:04:32.200 --> 00:04:33.960 align:start position:0%
launch time on devices that have slower
flash<00:04:32.500><c> because</c><00:04:32.770><c> you're</c><00:04:33.070><c> pulling</c><00:04:33.670><c> in</c><00:04:33.760><c> fewer</c>

00:04:33.960 --> 00:04:33.970 align:start position:0%
flash because you're pulling in fewer
 

00:04:33.970 --> 00:04:36.000 align:start position:0%
flash because you're pulling in fewer
pages<00:04:34.390><c> and</c><00:04:34.510><c> have</c><00:04:34.600><c> spending</c><00:04:34.960><c> less</c><00:04:35.110><c> time</c><00:04:35.140><c> paging</c>

00:04:36.000 --> 00:04:36.010 align:start position:0%
pages and have spending less time paging
 

00:04:36.010 --> 00:04:39.750 align:start position:0%
pages and have spending less time paging
applications<00:04:36.550><c> off</c><00:04:36.670><c> of</c><00:04:36.880><c> the</c><00:04:36.970><c> flesh</c><00:04:38.610><c> so</c><00:04:39.610><c> that's</c>

00:04:39.750 --> 00:04:39.760 align:start position:0%
applications off of the flesh so that's
 

00:04:39.760 --> 00:04:41.010 align:start position:0%
applications off of the flesh so that's
it<00:04:39.850><c> for</c><00:04:39.940><c> my</c><00:04:40.060><c> partner</c><00:04:40.360><c> over</c><00:04:40.450><c> to</c><00:04:40.570><c> Matthew</c><00:04:40.750><c> who's</c>

00:04:41.010 --> 00:04:41.020 align:start position:0%
it for my partner over to Matthew who's
 

00:04:41.020 --> 00:04:42.210 align:start position:0%
it for my partner over to Matthew who's
going<00:04:41.170><c> to</c><00:04:41.230><c> tell</c><00:04:41.320><c> you</c><00:04:41.440><c> about</c><00:04:41.530><c> our</c><00:04:41.740><c> new</c><00:04:41.890><c> garbage</c>

00:04:42.210 --> 00:04:42.220 align:start position:0%
going to tell you about our new garbage
 

00:04:42.220 --> 00:04:45.680 align:start position:0%
going to tell you about our new garbage
collector<00:04:43.650><c> thank</c><00:04:44.650><c> you</c><00:04:44.740><c> David</c>

00:04:45.680 --> 00:04:45.690 align:start position:0%
collector thank you David
 

00:04:45.690 --> 00:04:48.510 align:start position:0%
collector thank you David
another<00:04:46.690><c> thing</c><00:04:47.020><c> that</c><00:04:47.050><c> saves</c><00:04:47.500><c> RAM</c><00:04:47.800><c> is</c><00:04:48.190><c> the</c><00:04:48.370><c> new</c>

00:04:48.510 --> 00:04:48.520 align:start position:0%
another thing that saves RAM is the new
 

00:04:48.520 --> 00:04:52.260 align:start position:0%
another thing that saves RAM is the new
concurrent<00:04:50.250><c> okay</c><00:04:51.280><c> you</c><00:04:51.730><c> could</c><00:04:51.880><c> current</c><00:04:52.210><c> a</c>

00:04:52.260 --> 00:04:52.270 align:start position:0%
concurrent okay you could current a
 

00:04:52.270 --> 00:04:55.470 align:start position:0%
concurrent okay you could current a
coffee<00:04:52.510><c> and</c><00:04:52.780><c> garbage</c><00:04:53.140><c> collector</c><00:04:53.560><c> now</c><00:04:54.480><c> Android</c>

00:04:55.470 --> 00:04:55.480 align:start position:0%
coffee and garbage collector now Android
 

00:04:55.480 --> 00:04:57.360 align:start position:0%
coffee and garbage collector now Android
has<00:04:55.630><c> had</c><00:04:55.810><c> a</c><00:04:55.840><c> compacting</c><00:04:56.590><c> garbage</c><00:04:56.950><c> collector</c>

00:04:57.360 --> 00:04:57.370 align:start position:0%
has had a compacting garbage collector
 

00:04:57.370 --> 00:04:59.160 align:start position:0%
has had a compacting garbage collector
that<00:04:57.550><c> runs</c><00:04:57.760><c> for</c><00:04:57.880><c> background</c><00:04:58.300><c> apps</c><00:04:58.540><c> since</c>

00:04:59.160 --> 00:04:59.170 align:start position:0%
that runs for background apps since
 

00:04:59.170 --> 00:05:02.100 align:start position:0%
that runs for background apps since
Android<00:04:59.650><c> L</c><00:04:59.850><c> but</c><00:05:00.850><c> unfortunately</c><00:05:01.660><c> since</c><00:05:01.930><c> this</c>

00:05:02.100 --> 00:05:02.110 align:start position:0%
Android L but unfortunately since this
 

00:05:02.110 --> 00:05:04.020 align:start position:0%
Android L but unfortunately since this
collector<00:05:02.530><c> is</c><00:05:02.620><c> non</c><00:05:02.800><c> concurrent</c><00:05:03.310><c> I</c><00:05:03.490><c> meant</c><00:05:03.880><c> that</c>

00:05:04.020 --> 00:05:04.030 align:start position:0%
collector is non concurrent I meant that
 

00:05:04.030 --> 00:05:05.520 align:start position:0%
collector is non concurrent I meant that
there<00:05:04.120><c> was</c><00:05:04.180><c> a</c><00:05:04.240><c> GC</c><00:05:04.630><c> pause</c><00:05:04.870><c> for</c><00:05:05.200><c> the</c><00:05:05.260><c> entire</c>

00:05:05.520 --> 00:05:05.530 align:start position:0%
there was a GC pause for the entire
 

00:05:05.530 --> 00:05:11.400 align:start position:0%
there was a GC pause for the entire
duration<00:05:08.790><c> so</c><00:05:09.790><c> basically</c><00:05:10.540><c> the</c><00:05:11.050><c> problem</c><00:05:11.230><c> with</c>

00:05:11.400 --> 00:05:11.410 align:start position:0%
duration so basically the problem with
 

00:05:11.410 --> 00:05:12.780 align:start position:0%
duration so basically the problem with
having<00:05:11.500><c> a</c><00:05:11.680><c> GC</c><00:05:11.950><c> pause</c><00:05:12.160><c> for</c><00:05:12.460><c> the</c><00:05:12.490><c> entire</c>

00:05:12.780 --> 00:05:12.790 align:start position:0%
having a GC pause for the entire
 

00:05:12.790 --> 00:05:15.540 align:start position:0%
having a GC pause for the entire
duration<00:05:12.970><c> of</c><00:05:13.300><c> the</c><00:05:13.420><c> GC</c><00:05:13.840><c> is</c><00:05:14.080><c> that</c><00:05:14.830><c> it</c><00:05:15.250><c> can</c><00:05:15.400><c> last</c>

00:05:15.540 --> 00:05:15.550 align:start position:0%
duration of the GC is that it can last
 

00:05:15.550 --> 00:05:17.280 align:start position:0%
duration of the GC is that it can last
hundreds<00:05:15.940><c> of</c><00:05:16.000><c> milliseconds</c><00:05:16.630><c> and</c><00:05:16.810><c> this</c><00:05:17.110><c> would</c>

00:05:17.280 --> 00:05:17.290 align:start position:0%
hundreds of milliseconds and this would
 

00:05:17.290 --> 00:05:19.350 align:start position:0%
hundreds of milliseconds and this would
very<00:05:17.500><c> likely</c><00:05:17.560><c> cause</c><00:05:18.280><c> jank</c><00:05:18.670><c> for</c><00:05:19.000><c> foreground</c>

00:05:19.350 --> 00:05:19.360 align:start position:0%
very likely cause jank for foreground
 

00:05:19.360 --> 00:05:24.270 align:start position:0%
very likely cause jank for foreground
applications<00:05:20.910><c> in</c><00:05:22.020><c> Android</c><00:05:23.020><c> Oh</c><00:05:23.200><c> art</c><00:05:23.770><c> now</c><00:05:24.070><c> could</c>

00:05:24.270 --> 00:05:24.280 align:start position:0%
applications in Android Oh art now could
 

00:05:24.280 --> 00:05:26.520 align:start position:0%
applications in Android Oh art now could
currently<00:05:24.490><c> compact</c><00:05:25.060><c> the</c><00:05:25.270><c> heap</c><00:05:25.450><c> of</c><00:05:25.720><c> background</c>

00:05:26.520 --> 00:05:26.530 align:start position:0%
currently compact the heap of background
 

00:05:26.530 --> 00:05:30.210 align:start position:0%
currently compact the heap of background
and<00:05:26.740><c> foreground</c><00:05:27.160><c> applications</c><00:05:28.200><c> this</c><00:05:29.220><c> enables</c>

00:05:30.210 --> 00:05:30.220 align:start position:0%
and foreground applications this enables
 

00:05:30.220 --> 00:05:31.890 align:start position:0%
and foreground applications this enables
compaction<00:05:30.850><c> of</c><00:05:31.060><c> many</c><00:05:31.300><c> long-lived</c>

00:05:31.890 --> 00:05:31.900 align:start position:0%
compaction of many long-lived
 

00:05:31.900 --> 00:05:33.810 align:start position:0%
compaction of many long-lived
applications<00:05:32.620><c> such</c><00:05:33.070><c> as</c><00:05:33.100><c> the</c><00:05:33.400><c> Android</c><00:05:33.700><c> system</c>

00:05:33.810 --> 00:05:33.820 align:start position:0%
applications such as the Android system
 

00:05:33.820 --> 00:05:37.470 align:start position:0%
applications such as the Android system
process<00:05:34.420><c> and</c><00:05:34.630><c> Google</c><00:05:35.140><c> Play</c><00:05:35.320><c> services</c><00:05:36.480><c> since</c>

00:05:37.470 --> 00:05:37.480 align:start position:0%
process and Google Play services since
 

00:05:37.480 --> 00:05:38.940 align:start position:0%
process and Google Play services since
these<00:05:37.630><c> processes</c><00:05:38.170><c> were</c><00:05:38.290><c> long-lived</c>

00:05:38.940 --> 00:05:38.950 align:start position:0%
these processes were long-lived
 

00:05:38.950 --> 00:05:40.860 align:start position:0%
these processes were long-lived
they<00:05:39.130><c> tended</c><00:05:39.460><c> to</c><00:05:39.640><c> have</c><00:05:39.790><c> a</c><00:05:39.820><c> high</c><00:05:40.150><c> fragmentation</c>

00:05:40.860 --> 00:05:40.870 align:start position:0%
they tended to have a high fragmentation
 

00:05:40.870 --> 00:05:43.850 align:start position:0%
they tended to have a high fragmentation
over<00:05:41.140><c> the</c><00:05:41.470><c> time</c><00:05:41.710><c> that</c><00:05:42.160><c> they</c><00:05:42.220><c> were</c><00:05:42.310><c> executing</c>

00:05:43.850 --> 00:05:43.860 align:start position:0%
over the time that they were executing
 

00:05:43.860 --> 00:05:48.660 align:start position:0%
over the time that they were executing
let's<00:05:44.860><c> take</c><00:05:45.040><c> a</c><00:05:45.070><c> look</c><00:05:45.280><c> at</c><00:05:45.430><c> a</c><00:05:45.490><c> GC</c><00:05:45.850><c> process</c><00:05:47.670><c> unlike</c>

00:05:48.660 --> 00:05:48.670 align:start position:0%
let's take a look at a GC process unlike
 

00:05:48.670 --> 00:05:50.790 align:start position:0%
let's take a look at a GC process unlike
its<00:05:48.880><c> predecessor</c><00:05:49.510><c> the</c><00:05:49.690><c> new</c><00:05:49.810><c> GC</c><00:05:50.200><c> is</c><00:05:50.380><c> region</c>

00:05:50.790 --> 00:05:50.800 align:start position:0%
its predecessor the new GC is region
 

00:05:50.800 --> 00:05:54.390 align:start position:0%
its predecessor the new GC is region
based<00:05:51.810><c> starting</c><00:05:52.810><c> out</c><00:05:52.930><c> the</c><00:05:53.290><c> GC</c><00:05:53.710><c> does</c><00:05:54.100><c> a</c><00:05:54.130><c> brief</c>

00:05:54.390 --> 00:05:54.400 align:start position:0%
based starting out the GC does a brief
 

00:05:54.400 --> 00:05:56.670 align:start position:0%
based starting out the GC does a brief
pause<00:05:54.700><c> to</c><00:05:55.120><c> identify</c><00:05:55.600><c> which</c><00:05:56.050><c> regions</c><00:05:56.500><c> we</c><00:05:56.620><c> are</c>

00:05:56.670 --> 00:05:56.680 align:start position:0%
pause to identify which regions we are
 

00:05:56.680 --> 00:05:59.550 align:start position:0%
pause to identify which regions we are
going<00:05:56.890><c> to</c><00:05:57.010><c> evacuate</c><00:05:57.540><c> these</c><00:05:58.540><c> regions</c><00:05:59.020><c> are</c><00:05:59.200><c> also</c>

00:05:59.550 --> 00:05:59.560 align:start position:0%
going to evacuate these regions are also
 

00:05:59.560 --> 00:06:03.180 align:start position:0%
going to evacuate these regions are also
known<00:05:59.740><c> as</c><00:05:59.950><c> the</c><00:06:00.190><c> source</c><00:06:00.430><c> region</c><00:06:01.920><c> threads</c><00:06:02.920><c> then</c>

00:06:03.180 --> 00:06:03.190 align:start position:0%
known as the source region threads then
 

00:06:03.190 --> 00:06:06.210 align:start position:0%
known as the source region threads then
resume<00:06:03.610><c> from</c><00:06:03.850><c> the</c><00:06:03.970><c> pause</c><00:06:04.620><c> after</c><00:06:05.620><c> having</c><00:06:06.010><c> walk</c>

00:06:06.210 --> 00:06:06.220 align:start position:0%
resume from the pause after having walk
 

00:06:06.220 --> 00:06:09.690 align:start position:0%
resume from the pause after having walk
their<00:06:06.490><c> stacks</c><00:06:08.040><c> next</c><00:06:09.040><c> up</c><00:06:09.190><c> is</c><00:06:09.340><c> the</c><00:06:09.460><c> largest</c>

00:06:09.690 --> 00:06:09.700 align:start position:0%
their stacks next up is the largest
 

00:06:09.700 --> 00:06:13.590 align:start position:0%
their stacks next up is the largest
phase<00:06:09.970><c> of</c><00:06:10.180><c> the</c><00:06:10.240><c> GC</c><00:06:10.630><c> the</c><00:06:10.900><c> copying</c><00:06:11.320><c> phase</c><00:06:11.560><c> in</c><00:06:12.600><c> the</c>

00:06:13.590 --> 00:06:13.600 align:start position:0%
phase of the GC the copying phase in the
 

00:06:13.600 --> 00:06:15.570 align:start position:0%
phase of the GC the copying phase in the
copying<00:06:14.050><c> phase</c><00:06:14.290><c> reachable</c><00:06:14.950><c> objects</c><00:06:15.460><c> are</c>

00:06:15.570 --> 00:06:15.580 align:start position:0%
copying phase reachable objects are
 

00:06:15.580 --> 00:06:17.070 align:start position:0%
copying phase reachable objects are
copied<00:06:15.880><c> from</c><00:06:15.970><c> the</c><00:06:16.060><c> source</c><00:06:16.360><c> region</c><00:06:16.600><c> the</c>

00:06:17.070 --> 00:06:17.080 align:start position:0%
copied from the source region the
 

00:06:17.080 --> 00:06:20.310 align:start position:0%
copied from the source region the
destination<00:06:17.710><c> regions</c><00:06:18.750><c> finally</c><00:06:19.750><c> in</c><00:06:19.930><c> the</c>

00:06:20.310 --> 00:06:20.320 align:start position:0%
destination regions finally in the
 

00:06:20.320 --> 00:06:22.980 align:start position:0%
destination regions finally in the
reclaim<00:06:20.650><c> phase</c><00:06:20.890><c> the</c><00:06:21.280><c> GC</c><00:06:21.610><c> frees</c><00:06:21.910><c> the</c><00:06:22.090><c> ram</c><00:06:22.270><c> for</c>

00:06:22.980 --> 00:06:22.990 align:start position:0%
reclaim phase the GC frees the ram for
 

00:06:22.990 --> 00:06:26.490 align:start position:0%
reclaim phase the GC frees the ram for
the<00:06:23.080><c> source</c><00:06:23.290><c> regions</c>

00:06:26.490 --> 00:06:26.500 align:start position:0%
 
 

00:06:26.500 --> 00:06:30.480 align:start position:0%
 
starting<00:06:27.220><c> with</c><00:06:27.310><c> the</c><00:06:27.400><c> pause</c><00:06:27.580><c> phase</c><00:06:28.980><c> the</c><00:06:29.980><c> pauses</c>

00:06:30.480 --> 00:06:30.490 align:start position:0%
starting with the pause phase the pauses
 

00:06:30.490 --> 00:06:32.670 align:start position:0%
starting with the pause phase the pauses
are<00:06:30.670><c> pretty</c><00:06:31.180><c> small</c><00:06:31.540><c> during</c><00:06:32.080><c> the</c><00:06:32.170><c> pause</c><00:06:32.350><c> one</c><00:06:32.650><c> of</c>

00:06:32.670 --> 00:06:32.680 align:start position:0%
are pretty small during the pause one of
 

00:06:32.680 --> 00:06:34.560 align:start position:0%
are pretty small during the pause one of
the<00:06:32.830><c> key</c><00:06:33.040><c> steps</c><00:06:33.400><c> is</c><00:06:33.700><c> identifying</c><00:06:34.330><c> which</c>

00:06:34.560 --> 00:06:34.570 align:start position:0%
the key steps is identifying which
 

00:06:34.570 --> 00:06:37.800 align:start position:0%
the key steps is identifying which
regions<00:06:34.960><c> to</c><00:06:35.080><c> evacuate</c><00:06:36.390><c> the</c><00:06:37.390><c> goal</c><00:06:37.600><c> of</c>

00:06:37.800 --> 00:06:37.810 align:start position:0%
regions to evacuate the goal of
 

00:06:37.810 --> 00:06:39.990 align:start position:0%
regions to evacuate the goal of
evacuation<00:06:38.560><c> is</c><00:06:38.800><c> to</c><00:06:39.190><c> copy</c><00:06:39.370><c> all</c><00:06:39.670><c> of</c><00:06:39.700><c> the</c>

00:06:39.990 --> 00:06:40.000 align:start position:0%
evacuation is to copy all of the
 

00:06:40.000 --> 00:06:41.970 align:start position:0%
evacuation is to copy all of the
reachable<00:06:40.390><c> objects</c><00:06:40.900><c> out</c><00:06:41.050><c> of</c><00:06:41.290><c> regions</c><00:06:41.680><c> with</c>

00:06:41.970 --> 00:06:41.980 align:start position:0%
reachable objects out of regions with
 

00:06:41.980 --> 00:06:45.060 align:start position:0%
reachable objects out of regions with
high<00:06:42.120><c> fragmentation</c><00:06:43.770><c> after</c><00:06:44.770><c> this</c><00:06:44.920><c> is</c>

00:06:45.060 --> 00:06:45.070 align:start position:0%
high fragmentation after this is
 

00:06:45.070 --> 00:06:47.460 align:start position:0%
high fragmentation after this is
accomplished<00:06:45.580><c> UC</c><00:06:46.240><c> can</c><00:06:46.450><c> release</c><00:06:46.810><c> the</c><00:06:46.960><c> RAM</c><00:06:47.110><c> for</c>

00:06:47.460 --> 00:06:47.470 align:start position:0%
accomplished UC can release the RAM for
 

00:06:47.470 --> 00:06:51.330 align:start position:0%
accomplished UC can release the RAM for
these<00:06:47.620><c> regions</c><00:06:48.300><c> in</c><00:06:49.350><c> this</c><00:06:50.350><c> example</c><00:06:50.710><c> the</c><00:06:51.040><c> GC</c>

00:06:51.330 --> 00:06:51.340 align:start position:0%
these regions in this example the GC
 

00:06:51.340 --> 00:06:52.950 align:start position:0%
these regions in this example the GC
picks<00:06:51.580><c> the</c><00:06:51.730><c> middle</c><00:06:51.970><c> two</c><00:06:52.180><c> regions</c><00:06:52.600><c> as</c><00:06:52.780><c> the</c>

00:06:52.950 --> 00:06:52.960 align:start position:0%
picks the middle two regions as the
 

00:06:52.960 --> 00:06:54.570 align:start position:0%
picks the middle two regions as the
source<00:06:53.170><c> regions</c><00:06:53.560><c> because</c><00:06:53.830><c> these</c><00:06:54.040><c> both</c><00:06:54.400><c> have</c>

00:06:54.570 --> 00:06:54.580 align:start position:0%
source regions because these both have
 

00:06:54.580 --> 00:07:00.270 align:start position:0%
source regions because these both have
more<00:06:54.970><c> than</c><00:06:55.150><c> 20%</c><00:06:55.660><c> fragmentation</c><00:06:58.890><c> next</c><00:06:59.890><c> up</c><00:07:00.070><c> is</c>

00:07:00.270 --> 00:07:00.280 align:start position:0%
more than 20% fragmentation next up is
 

00:07:00.280 --> 00:07:03.870 align:start position:0%
more than 20% fragmentation next up is
the<00:07:00.400><c> copying</c><00:07:00.730><c> phase</c><00:07:01.050><c> in</c><00:07:02.250><c> the</c><00:07:03.250><c> copying</c><00:07:03.610><c> phase</c>

00:07:03.870 --> 00:07:03.880 align:start position:0%
the copying phase in the copying phase
 

00:07:03.880 --> 00:07:05.940 align:start position:0%
the copying phase in the copying phase
the<00:07:04.090><c> GC</c><00:07:04.390><c> copies</c><00:07:04.750><c> all</c><00:07:04.930><c> reachable</c><00:07:05.380><c> objects</c><00:07:05.860><c> from</c>

00:07:05.940 --> 00:07:05.950 align:start position:0%
the GC copies all reachable objects from
 

00:07:05.950 --> 00:07:07.620 align:start position:0%
the GC copies all reachable objects from
resource<00:07:06.340><c> regions</c><00:07:06.820><c> to</c><00:07:06.970><c> the</c><00:07:07.000><c> destination</c>

00:07:07.620 --> 00:07:07.630 align:start position:0%
resource regions to the destination
 

00:07:07.630 --> 00:07:09.780 align:start position:0%
resource regions to the destination
regions<00:07:08.050><c> with</c><00:07:08.260><c> the</c><00:07:08.290><c> goal</c><00:07:08.560><c> that</c><00:07:08.800><c> no</c><00:07:09.070><c> objects</c>

00:07:09.780 --> 00:07:09.790 align:start position:0%
regions with the goal that no objects
 

00:07:09.790 --> 00:07:11.690 align:start position:0%
regions with the goal that no objects
will<00:07:09.940><c> reference</c><00:07:10.150><c> the</c><00:07:10.810><c> source</c><00:07:11.050><c> regions</c><00:07:11.470><c> after</c>

00:07:11.690 --> 00:07:11.700 align:start position:0%
will reference the source regions after
 

00:07:11.700 --> 00:07:16.200 align:start position:0%
will reference the source regions after
collection<00:07:12.700><c> is</c><00:07:12.970><c> completed</c><00:07:14.370><c> the</c><00:07:15.370><c> GC</c><00:07:15.700><c> also</c>

00:07:16.200 --> 00:07:16.210 align:start position:0%
collection is completed the GC also
 

00:07:16.210 --> 00:07:17.880 align:start position:0%
collection is completed the GC also
updates<00:07:16.600><c> the</c><00:07:16.780><c> references</c><00:07:17.290><c> to</c><00:07:17.530><c> these</c><00:07:17.650><c> regions</c>

00:07:17.880 --> 00:07:17.890 align:start position:0%
updates the references to these regions
 

00:07:17.890 --> 00:07:19.350 align:start position:0%
updates the references to these regions
to<00:07:18.130><c> point</c><00:07:18.370><c> to</c><00:07:18.490><c> the</c><00:07:18.610><c> new</c><00:07:18.730><c> addresses</c><00:07:19.150><c> of</c><00:07:19.270><c> the</c>

00:07:19.350 --> 00:07:19.360 align:start position:0%
to point to the new addresses of the
 

00:07:19.360 --> 00:07:24.659 align:start position:0%
to point to the new addresses of the
object<00:07:22.140><c> now</c><00:07:23.140><c> this</c><00:07:23.740><c> application</c><00:07:23.980><c> threads</c><00:07:24.550><c> are</c>

00:07:24.659 --> 00:07:24.669 align:start position:0%
object now this application threads are
 

00:07:24.669 --> 00:07:26.340 align:start position:0%
object now this application threads are
running<00:07:24.700><c> concurrently</c><00:07:25.120><c> during</c><00:07:25.540><c> the</c><00:07:26.050><c> garbage</c>

00:07:26.340 --> 00:07:26.350 align:start position:0%
running concurrently during the garbage
 

00:07:26.350 --> 00:07:28.409 align:start position:0%
running concurrently during the garbage
collector<00:07:26.740><c> the</c><00:07:27.370><c> GC</c><00:07:27.700><c> needs</c><00:07:27.940><c> a</c><00:07:28.030><c> way</c><00:07:28.120><c> to</c><00:07:28.180><c> make</c>

00:07:28.409 --> 00:07:28.419 align:start position:0%
collector the GC needs a way to make
 

00:07:28.419 --> 00:07:29.610 align:start position:0%
collector the GC needs a way to make
sure<00:07:28.570><c> that</c><00:07:28.720><c> these</c><00:07:28.870><c> stores</c><00:07:29.140><c> don't</c><00:07:29.410><c> end</c><00:07:29.530><c> up</c>

00:07:29.610 --> 00:07:29.620 align:start position:0%
sure that these stores don't end up
 

00:07:29.620 --> 00:07:31.350 align:start position:0%
sure that these stores don't end up
reading<00:07:29.919><c> a</c><00:07:29.980><c> field</c><00:07:30.280><c> that</c><00:07:30.580><c> points</c><00:07:30.940><c> to</c><00:07:31.060><c> a</c><00:07:31.090><c> source</c>

00:07:31.350 --> 00:07:31.360 align:start position:0%
reading a field that points to a source
 

00:07:31.360 --> 00:07:35.130 align:start position:0%
reading a field that points to a source
region<00:07:32.370><c> to</c><00:07:33.370><c> accomplish</c><00:07:33.850><c> this</c><00:07:34.060><c> the</c><00:07:34.450><c> GC</c><00:07:34.780><c> uses</c>

00:07:35.130 --> 00:07:35.140 align:start position:0%
region to accomplish this the GC uses
 

00:07:35.140 --> 00:07:40.020 align:start position:0%
region to accomplish this the GC uses
technique<00:07:35.500><c> called</c><00:07:35.800><c> a</c><00:07:35.980><c> read</c><00:07:36.130><c> barrier</c><00:07:36.490><c> a</c><00:07:39.030><c> read</c>

00:07:40.020 --> 00:07:40.030 align:start position:0%
technique called a read barrier a read
 

00:07:40.030 --> 00:07:41.760 align:start position:0%
technique called a read barrier a read
barrier<00:07:40.330><c> is</c><00:07:40.480><c> a</c><00:07:40.510><c> small</c><00:07:40.870><c> amount</c><00:07:41.140><c> of</c><00:07:41.290><c> work</c><00:07:41.530><c> done</c>

00:07:41.760 --> 00:07:41.770 align:start position:0%
barrier is a small amount of work done
 

00:07:41.770 --> 00:07:44.400 align:start position:0%
barrier is a small amount of work done
for<00:07:42.010><c> every</c><00:07:42.250><c> field</c><00:07:42.490><c> read</c><00:07:42.990><c> the</c><00:07:43.990><c> read</c><00:07:44.169><c> barrier</c>

00:07:44.400 --> 00:07:44.410 align:start position:0%
for every field read the read barrier
 

00:07:44.410 --> 00:07:46.170 align:start position:0%
for every field read the read barrier
prevents<00:07:44.860><c> the</c><00:07:45.220><c> threads</c><00:07:45.520><c> from</c><00:07:45.729><c> ever</c><00:07:45.880><c> seeing</c>

00:07:46.170 --> 00:07:46.180 align:start position:0%
prevents the threads from ever seeing
 

00:07:46.180 --> 00:07:47.850 align:start position:0%
prevents the threads from ever seeing
references<00:07:46.780><c> to</c><00:07:46.900><c> the</c><00:07:46.990><c> source</c><00:07:47.229><c> regions</c><00:07:47.650><c> by</c>

00:07:47.850 --> 00:07:47.860 align:start position:0%
references to the source regions by
 

00:07:47.860 --> 00:07:49.440 align:start position:0%
references to the source regions by
intercepting<00:07:48.310><c> the</c><00:07:48.580><c> reads</c><00:07:48.760><c> and</c><00:07:48.970><c> then</c><00:07:49.030><c> copying</c>

00:07:49.440 --> 00:07:49.450 align:start position:0%
intercepting the reads and then copying
 

00:07:49.450 --> 00:07:52.310 align:start position:0%
intercepting the reads and then copying
the<00:07:49.630><c> objects</c><00:07:50.050><c> of</c><00:07:50.320><c> destination</c><00:07:50.890><c> regions</c><00:07:51.250><c> in</c>

00:07:52.310 --> 00:07:52.320 align:start position:0%
the objects of destination regions in
 

00:07:52.320 --> 00:07:54.750 align:start position:0%
the objects of destination regions in
this<00:07:53.320><c> example</c><00:07:53.650><c> there's</c><00:07:54.070><c> a</c><00:07:54.160><c> thread</c><00:07:54.370><c> attempting</c>

00:07:54.750 --> 00:07:54.760 align:start position:0%
this example there's a thread attempting
 

00:07:54.760 --> 00:07:57.600 align:start position:0%
this example there's a thread attempting
to<00:07:54.880><c> read</c><00:07:55.030><c> foo</c><00:07:55.300><c> X</c><00:07:55.870><c> this</c><00:07:56.710><c> is</c><00:07:56.890><c> a</c><00:07:56.919><c> reference</c><00:07:57.340><c> to</c><00:07:57.460><c> a</c>

00:07:57.600 --> 00:07:57.610 align:start position:0%
to read foo X this is a reference to a
 

00:07:57.610 --> 00:08:00.659 align:start position:0%
to read foo X this is a reference to a
bar<00:07:57.880><c> object</c><00:07:58.600><c> in</c><00:07:58.750><c> the</c><00:07:58.870><c> source</c><00:07:59.080><c> region</c><00:07:59.490><c> the</c><00:08:00.490><c> read</c>

00:08:00.659 --> 00:08:00.669 align:start position:0%
bar object in the source region the read
 

00:08:00.669 --> 00:08:02.670 align:start position:0%
bar object in the source region the read
barrier<00:08:00.970><c> intercepts</c><00:08:01.510><c> this</c><00:08:01.720><c> read</c><00:08:01.990><c> copies</c><00:08:02.560><c> the</c>

00:08:02.670 --> 00:08:02.680 align:start position:0%
barrier intercepts this read copies the
 

00:08:02.680 --> 00:08:04.770 align:start position:0%
barrier intercepts this read copies the
object<00:08:03.040><c> the</c><00:08:03.160><c> destination</c><00:08:03.760><c> region</c><00:08:04.090><c> and</c><00:08:04.270><c> also</c>

00:08:04.770 --> 00:08:04.780 align:start position:0%
object the destination region and also
 

00:08:04.780 --> 00:08:11.070 align:start position:0%
object the destination region and also
returns<00:08:05.620><c> the</c><00:08:05.740><c> new</c><00:08:05.860><c> address</c><00:08:09.900><c> copying</c><00:08:10.900><c> process</c>

00:08:11.070 --> 00:08:11.080 align:start position:0%
returns the new address copying process
 

00:08:11.080 --> 00:08:13.500 align:start position:0%
returns the new address copying process
continues<00:08:11.860><c> copying</c><00:08:12.340><c> moving</c><00:08:12.790><c> objects</c><00:08:13.270><c> as</c><00:08:13.360><c> well</c>

00:08:13.500 --> 00:08:13.510 align:start position:0%
continues copying moving objects as well
 

00:08:13.510 --> 00:08:15.480 align:start position:0%
continues copying moving objects as well
as<00:08:13.660><c> doing</c><00:08:13.870><c> repairs</c><00:08:14.229><c> if</c><00:08:14.500><c> necessary</c><00:08:15.040><c> until</c>

00:08:15.480 --> 00:08:15.490 align:start position:0%
as doing repairs if necessary until
 

00:08:15.490 --> 00:08:16.890 align:start position:0%
as doing repairs if necessary until
there<00:08:15.610><c> are</c><00:08:15.700><c> no</c><00:08:15.790><c> longer</c><00:08:16.030><c> any</c><00:08:16.150><c> references</c><00:08:16.810><c> to</c>

00:08:16.890 --> 00:08:16.900 align:start position:0%
there are no longer any references to
 

00:08:16.900 --> 00:08:20.460 align:start position:0%
there are no longer any references to
the<00:08:17.050><c> from</c><00:08:17.260><c> reach</c><00:08:17.470><c> to</c><00:08:17.740><c> the</c><00:08:17.830><c> source</c><00:08:18.070><c> region</c><00:08:19.470><c> at</c>

00:08:20.460 --> 00:08:20.470 align:start position:0%
the from reach to the source region at
 

00:08:20.470 --> 00:08:22.740 align:start position:0%
the from reach to the source region at
this<00:08:20.830><c> point</c><00:08:21.130><c> the</c><00:08:21.310><c> GC</c><00:08:21.640><c> begins</c><00:08:22.090><c> the</c><00:08:22.390><c> reclaimed</c>

00:08:22.740 --> 00:08:22.750 align:start position:0%
this point the GC begins the reclaimed
 

00:08:22.750 --> 00:08:28.200 align:start position:0%
this point the GC begins the reclaimed
phase<00:08:23.940><c> as</c><00:08:25.740><c> you</c><00:08:26.740><c> can</c><00:08:26.890><c> see</c><00:08:27.100><c> here</c><00:08:27.460><c> there</c><00:08:28.000><c> are</c><00:08:28.090><c> no</c>

00:08:28.200 --> 00:08:28.210 align:start position:0%
phase as you can see here there are no
 

00:08:28.210 --> 00:08:29.670 align:start position:0%
phase as you can see here there are no
longer<00:08:28.390><c> any</c><00:08:28.510><c> references</c><00:08:29.229><c> to</c><00:08:29.380><c> the</c><00:08:29.470><c> source</c>

00:08:29.670 --> 00:08:29.680 align:start position:0%
longer any references to the source
 

00:08:29.680 --> 00:08:31.620 align:start position:0%
longer any references to the source
regions<00:08:30.100><c> so</c><00:08:30.610><c> the</c><00:08:30.760><c> garbage</c><00:08:31.060><c> collector</c><00:08:31.450><c> can</c>

00:08:31.620 --> 00:08:31.630 align:start position:0%
regions so the garbage collector can
 

00:08:31.630 --> 00:08:33.899 align:start position:0%
regions so the garbage collector can
free<00:08:31.810><c> all</c><00:08:31.960><c> the</c><00:08:32.169><c> ram</c><00:08:32.320><c> for</c><00:08:32.530><c> these</c><00:08:32.650><c> regions</c><00:08:32.909><c> and</c>

00:08:33.899 --> 00:08:33.909 align:start position:0%
free all the ram for these regions and
 

00:08:33.909 --> 00:08:36.719 align:start position:0%
free all the ram for these regions and
while<00:08:34.060><c> we</c><00:08:34.180><c> are</c><00:08:34.270><c> left</c><00:08:34.479><c> with</c><00:08:34.750><c> is</c><00:08:35.020><c> a</c><00:08:35.520><c> heap</c><00:08:36.520><c> that</c>

00:08:36.719 --> 00:08:36.729 align:start position:0%
while we are left with is a heap that
 

00:08:36.729 --> 00:08:38.340 align:start position:0%
while we are left with is a heap that
has<00:08:36.820><c> much</c><00:08:37.089><c> less</c><00:08:37.270><c> wasted</c><00:08:37.750><c> RAM</c>

00:08:38.340 --> 00:08:38.350 align:start position:0%
has much less wasted RAM
 

00:08:38.350 --> 00:08:43.530 align:start position:0%
has much less wasted RAM
-<00:08:38.710><c> when</c><00:08:38.860><c> the</c><00:08:38.980><c> collection</c><00:08:39.340><c> begins</c><00:08:42.480><c> now</c><00:08:43.480><c> you</c>

00:08:43.530 --> 00:08:43.540 align:start position:0%
- when the collection begins now you
 

00:08:43.540 --> 00:08:45.090 align:start position:0%
- when the collection begins now you
might<00:08:43.780><c> be</c><00:08:43.810><c> wondering</c><00:08:43.930><c> how</c><00:08:44.260><c> much</c><00:08:44.440><c> RAM</c><00:08:44.710><c> can</c><00:08:44.950><c> we</c>

00:08:45.090 --> 00:08:45.100 align:start position:0%
might be wondering how much RAM can we
 

00:08:45.100 --> 00:08:46.620 align:start position:0%
might be wondering how much RAM can we
save<00:08:45.340><c> by</c><00:08:45.370><c> compacting</c><00:08:45.970><c> foreground</c>

00:08:46.620 --> 00:08:46.630 align:start position:0%
save by compacting foreground
 

00:08:46.630 --> 00:08:48.240 align:start position:0%
save by compacting foreground
applications<00:08:47.290><c> as</c><00:08:47.440><c> well</c><00:08:47.680><c> as</c><00:08:47.950><c> background</c>

00:08:48.240 --> 00:08:48.250 align:start position:0%
applications as well as background
 

00:08:48.250 --> 00:08:51.030 align:start position:0%
applications as well as background
applications<00:08:48.990><c> well</c><00:08:49.990><c> the</c><00:08:50.290><c> average</c><00:08:50.410><c> heap</c><00:08:50.800><c> size</c>

00:08:51.030 --> 00:08:51.040 align:start position:0%
applications well the average heap size
 

00:08:51.040 --> 00:08:53.490 align:start position:0%
applications well the average heap size
is<00:08:51.340><c> 32</c><00:08:51.910><c> percent</c><00:08:52.120><c> smaller</c><00:08:52.600><c> occured</c><00:08:53.230><c> to</c><00:08:53.380><c> the</c>

00:08:53.490 --> 00:08:53.500 align:start position:0%
is 32 percent smaller occured to the
 

00:08:53.500 --> 00:08:55.500 align:start position:0%
is 32 percent smaller occured to the
Android<00:08:53.800><c> n</c><00:08:53.950><c> concurrent</c><00:08:54.580><c> mark-sweep</c><00:08:54.790><c> garbage</c>

00:08:55.500 --> 00:08:55.510 align:start position:0%
Android n concurrent mark-sweep garbage
 

00:08:55.510 --> 00:08:58.920 align:start position:0%
Android n concurrent mark-sweep garbage
collector<00:08:55.930><c> and</c><00:08:56.700><c> RAM</c><00:08:57.700><c> lost</c><00:08:58.000><c> the</c><00:08:58.240><c> GC</c><00:08:58.540><c> overhead</c>

00:08:58.920 --> 00:08:58.930 align:start position:0%
collector and RAM lost the GC overhead
 

00:08:58.930 --> 00:09:03.840 align:start position:0%
collector and RAM lost the GC overhead
is<00:08:59.140><c> also</c><00:08:59.440><c> a</c><00:08:59.470><c> little</c><00:08:59.650><c> bit</c><00:08:59.800><c> smaller</c><00:09:02.850><c> one</c>

00:09:03.840 --> 00:09:03.850 align:start position:0%
is also a little bit smaller one
 

00:09:03.850 --> 00:09:05.460 align:start position:0%
is also a little bit smaller one
important<00:09:04.330><c> factor</c><00:09:04.720><c> about</c><00:09:04.990><c> concurrent</c>

00:09:05.460 --> 00:09:05.470 align:start position:0%
important factor about concurrent
 

00:09:05.470 --> 00:09:06.870 align:start position:0%
important factor about concurrent
garbage<00:09:05.500><c> collectors</c><00:09:06.190><c> is</c><00:09:06.430><c> how</c><00:09:06.610><c> long</c>

00:09:06.870 --> 00:09:06.880 align:start position:0%
garbage collectors is how long
 

00:09:06.880 --> 00:09:10.200 align:start position:0%
garbage collectors is how long
application<00:09:07.510><c> threads</c><00:09:07.750><c> are</c><00:09:07.900><c> suspended</c><00:09:09.210><c> every</c>

00:09:10.200 --> 00:09:10.210 align:start position:0%
application threads are suspended every
 

00:09:10.210 --> 00:09:11.880 align:start position:0%
application threads are suspended every
millisecond<00:09:10.840><c> that</c><00:09:11.140><c> the</c><00:09:11.230><c> threads</c><00:09:11.500><c> are</c><00:09:11.650><c> paused</c>

00:09:11.880 --> 00:09:11.890 align:start position:0%
millisecond that the threads are paused
 

00:09:11.890 --> 00:09:14.370 align:start position:0%
millisecond that the threads are paused
or<00:09:12.220><c> suspended</c><00:09:12.790><c> is</c><00:09:12.940><c> one</c><00:09:13.180><c> less</c><00:09:13.420><c> millisecond</c><00:09:14.080><c> to</c>

00:09:14.370 --> 00:09:14.380 align:start position:0%
or suspended is one less millisecond to
 

00:09:14.380 --> 00:09:18.150 align:start position:0%
or suspended is one less millisecond to
prepare<00:09:14.710><c> the</c><00:09:14.830><c> next</c><00:09:14.980><c> frame</c><00:09:15.280><c> for</c><00:09:15.640><c> the</c><00:09:15.700><c> UI</c><00:09:17.160><c> with</c>

00:09:18.150 --> 00:09:18.160 align:start position:0%
prepare the next frame for the UI with
 

00:09:18.160 --> 00:09:20.940 align:start position:0%
prepare the next frame for the UI with
the<00:09:18.280><c> new</c><00:09:18.430><c> GC</c><00:09:18.850><c> the</c><00:09:19.120><c> average</c><00:09:19.390><c> pause</c><00:09:19.630><c> times</c><00:09:19.990><c> 0.4</c>

00:09:20.940 --> 00:09:20.950 align:start position:0%
the new GC the average pause times 0.4
 

00:09:20.950 --> 00:09:23.040 align:start position:0%
the new GC the average pause times 0.4
milliseconds<00:09:21.700><c> compared</c><00:09:22.240><c> to</c><00:09:22.360><c> 2.5</c>

00:09:23.040 --> 00:09:23.050 align:start position:0%
milliseconds compared to 2.5
 

00:09:23.050 --> 00:09:26.640 align:start position:0%
milliseconds compared to 2.5
milliseconds<00:09:23.770><c> in</c><00:09:23.890><c> Android</c><00:09:24.310><c> N</c><00:09:24.460><c> and</c><00:09:25.140><c> a</c><00:09:26.140><c> 99%</c>

00:09:26.640 --> 00:09:26.650 align:start position:0%
milliseconds in Android N and a 99%
 

00:09:26.650 --> 00:09:29.850 align:start position:0%
milliseconds in Android N and a 99%
worst<00:09:27.070><c> case</c><00:09:27.370><c> for</c><00:09:27.610><c> large</c><00:09:27.910><c> heap</c><00:09:28.150><c> is</c><00:09:28.390><c> a</c><00:09:28.860><c> 2.6</c>

00:09:29.850 --> 00:09:29.860 align:start position:0%
worst case for large heap is a 2.6
 

00:09:29.860 --> 00:09:31.980 align:start position:0%
worst case for large heap is a 2.6
milliseconds<00:09:30.550><c> instead</c><00:09:30.730><c> of</c><00:09:31.060><c> 11</c><00:09:31.270><c> milliseconds</c>

00:09:31.980 --> 00:09:31.990 align:start position:0%
milliseconds instead of 11 milliseconds
 

00:09:31.990 --> 00:09:37.650 align:start position:0%
milliseconds instead of 11 milliseconds
in<00:09:32.140><c> under</c><00:09:32.410><c> 10</c><00:09:35.550><c> finally</c><00:09:36.550><c> always</c><00:09:36.910><c> compacting</c>

00:09:37.650 --> 00:09:37.660 align:start position:0%
in under 10 finally always compacting
 

00:09:37.660 --> 00:09:39.720 align:start position:0%
in under 10 finally always compacting
the<00:09:37.690><c> heap</c><00:09:37.960><c> has</c><00:09:38.320><c> enabled</c><00:09:38.650><c> Hart</c><00:09:39.100><c> to</c><00:09:39.370><c> switch</c><00:09:39.580><c> to</c><00:09:39.700><c> a</c>

00:09:39.720 --> 00:09:39.730 align:start position:0%
the heap has enabled Hart to switch to a
 

00:09:39.730 --> 00:09:42.350 align:start position:0%
the heap has enabled Hart to switch to a
new<00:09:39.790><c> thread</c><00:09:40.240><c> local</c><00:09:40.390><c> bump</c><00:09:40.840><c> pointer</c><00:09:41.110><c> allocator</c>

00:09:42.350 --> 00:09:42.360 align:start position:0%
new thread local bump pointer allocator
 

00:09:42.360 --> 00:09:45.090 align:start position:0%
new thread local bump pointer allocator
this<00:09:43.360><c> is</c><00:09:43.540><c> simple</c><00:09:43.870><c> this</c><00:09:43.930><c> alligator</c><00:09:44.560><c> is</c><00:09:44.740><c> simpler</c>

00:09:45.090 --> 00:09:45.100 align:start position:0%
this is simple this alligator is simpler
 

00:09:45.100 --> 00:09:47.220 align:start position:0%
this is simple this alligator is simpler
and<00:09:45.130><c> faster</c><00:09:45.700><c> than</c><00:09:46.270><c> the</c><00:09:46.360><c> free</c><00:09:46.510><c> list</c><00:09:46.720><c> alligator</c>

00:09:47.220 --> 00:09:47.230 align:start position:0%
and faster than the free list alligator
 

00:09:47.230 --> 00:09:50.520 align:start position:0%
and faster than the free list alligator
it<00:09:47.440><c> replaces</c><00:09:48.900><c> overall</c><00:09:49.900><c> this</c><00:09:50.230><c> means</c><00:09:50.440><c> the</c>

00:09:50.520 --> 00:09:50.530 align:start position:0%
it replaces overall this means the
 

00:09:50.530 --> 00:09:52.950 align:start position:0%
it replaces overall this means the
allocation<00:09:51.010><c> is</c><00:09:51.100><c> around</c><00:09:51.310><c> 70%</c><00:09:51.730><c> faster</c><00:09:52.390><c> compared</c>

00:09:52.950 --> 00:09:52.960 align:start position:0%
allocation is around 70% faster compared
 

00:09:52.960 --> 00:09:54.660 align:start position:0%
allocation is around 70% faster compared
to<00:09:53.020><c> Android</c><00:09:53.350><c> n</c><00:09:53.500><c> and</c><00:09:53.740><c> if</c><00:09:54.010><c> you</c><00:09:54.100><c> go</c><00:09:54.190><c> further</c><00:09:54.400><c> back</c>

00:09:54.660 --> 00:09:54.670 align:start position:0%
to Android n and if you go further back
 

00:09:54.670 --> 00:09:57.330 align:start position:0%
to Android n and if you go further back
allocations<00:09:55.570><c> are</c><00:09:55.750><c> 18</c><00:09:56.050><c> times</c><00:09:56.350><c> faster</c><00:09:56.950><c> than</c>

00:09:57.330 --> 00:09:57.340 align:start position:0%
allocations are 18 times faster than
 

00:09:57.340 --> 00:10:00.510 align:start position:0%
allocations are 18 times faster than
KitKat<00:09:57.820><c> on</c><00:09:58.090><c> a</c><00:09:58.120><c> device</c><00:09:58.450><c> adjusted</c><00:09:58.930><c> basis</c><00:09:59.520><c> and</c>

00:10:00.510 --> 00:10:00.520 align:start position:0%
KitKat on a device adjusted basis and
 

00:10:00.520 --> 00:10:02.400 align:start position:0%
KitKat on a device adjusted basis and
now<00:10:00.640><c> off</c><00:10:01.480><c> the</c><00:10:01.540><c> Nicolas</c><00:10:02.080><c> for</c><00:10:02.290><c> other</c>

00:10:02.400 --> 00:10:02.410 align:start position:0%
now off the Nicolas for other
 

00:10:02.410 --> 00:10:09.810 align:start position:0%
now off the Nicolas for other
optimizations

00:10:09.810 --> 00:10:09.820 align:start position:0%
 
 

00:10:09.820 --> 00:10:13.480 align:start position:0%
 
Thank<00:10:10.820><c> You</c><00:10:10.880><c> Matthew</c><00:10:11.800><c> so</c><00:10:12.800><c> besides</c><00:10:13.010><c> managing</c>

00:10:13.480 --> 00:10:13.490 align:start position:0%
Thank You Matthew so besides managing
 

00:10:13.490 --> 00:10:15.640 align:start position:0%
Thank You Matthew so besides managing
application<00:10:14.150><c> memory</c><00:10:14.450><c> are</c><00:10:15.020><c> is</c><00:10:15.470><c> also</c>

00:10:15.640 --> 00:10:15.650 align:start position:0%
application memory are is also
 

00:10:15.650 --> 00:10:17.800 align:start position:0%
application memory are is also
responsible<00:10:16.250><c> for</c><00:10:16.400><c> encoding</c><00:10:16.880><c> executing</c>

00:10:17.800 --> 00:10:17.810 align:start position:0%
responsible for encoding executing
 

00:10:17.810 --> 00:10:20.800 align:start position:0%
responsible for encoding executing
application<00:10:18.290><c> code</c><00:10:18.440><c> and</c><00:10:19.450><c> for</c><00:10:20.450><c> every</c><00:10:20.720><c> hundred</c>

00:10:20.800 --> 00:10:20.810 align:start position:0%
application code and for every hundred
 

00:10:20.810 --> 00:10:23.020 align:start position:0%
application code and for every hundred
release<00:10:21.230><c> our</c><00:10:21.680><c> team</c><00:10:22.010><c> spent</c><00:10:22.340><c> a</c><00:10:22.490><c> significant</c>

00:10:23.020 --> 00:10:23.030 align:start position:0%
release our team spent a significant
 

00:10:23.030 --> 00:10:27.010 align:start position:0%
release our team spent a significant
time<00:10:23.230><c> optimizing</c><00:10:24.230><c> wherever</c><00:10:24.740><c> we</c><00:10:24.920><c> can</c><00:10:25.100><c> so</c><00:10:26.020><c> in</c>

00:10:27.010 --> 00:10:27.020 align:start position:0%
time optimizing wherever we can so in
 

00:10:27.020 --> 00:10:29.470 align:start position:0%
time optimizing wherever we can so in
this<00:10:27.110><c> talk</c><00:10:27.380><c> we</c><00:10:28.040><c> want</c><00:10:28.130><c> to</c><00:10:28.340><c> share</c><00:10:28.550><c> with</c><00:10:28.700><c> you</c><00:10:28.880><c> two</c>

00:10:29.470 --> 00:10:29.480 align:start position:0%
this talk we want to share with you two
 

00:10:29.480 --> 00:10:30.880 align:start position:0%
this talk we want to share with you two
major<00:10:29.720><c> accomplishments</c><00:10:30.470><c> we've</c><00:10:30.590><c> made</c><00:10:30.740><c> for</c>

00:10:30.880 --> 00:10:30.890 align:start position:0%
major accomplishments we've made for
 

00:10:30.890 --> 00:10:33.490 align:start position:0%
major accomplishments we've made for
this<00:10:30.980><c> release</c><00:10:31.300><c> the</c><00:10:32.300><c> first</c><00:10:32.540><c> is</c><00:10:32.870><c> a</c><00:10:32.930><c> performance</c>

00:10:33.490 --> 00:10:33.500 align:start position:0%
this release the first is a performance
 

00:10:33.500 --> 00:10:35.410 align:start position:0%
this release the first is a performance
if<00:10:33.650><c> city</c><00:10:33.980><c> and</c><00:10:34.190><c> the</c><00:10:34.640><c> second</c><00:10:34.940><c> is</c><00:10:35.000><c> about</c><00:10:35.090><c> you</c><00:10:35.390><c> a</c>

00:10:35.410 --> 00:10:35.420 align:start position:0%
if city and the second is about you a
 

00:10:35.420 --> 00:10:40.660 align:start position:0%
if city and the second is about you a
new<00:10:35.750><c> optimization</c><00:10:36.320><c> framework</c><00:10:36.470><c> for</c><00:10:36.740><c> loops</c><00:10:39.670><c> let</c>

00:10:40.660 --> 00:10:40.670 align:start position:0%
new optimization framework for loops let
 

00:10:40.670 --> 00:10:42.520 align:start position:0%
new optimization framework for loops let
me<00:10:40.790><c> start</c><00:10:41.030><c> with</c><00:10:41.090><c> the</c><00:10:41.300><c> performance</c><00:10:41.930><c> city</c><00:10:42.290><c> and</c>

00:10:42.520 --> 00:10:42.530 align:start position:0%
me start with the performance city and
 

00:10:42.530 --> 00:10:43.810 align:start position:0%
me start with the performance city and
an<00:10:42.620><c> r2</c><00:10:43.010><c> let</c><00:10:43.160><c> me</c><00:10:43.220><c> talk</c><00:10:43.370><c> about</c><00:10:43.400><c> loop</c>

00:10:43.810 --> 00:10:43.820 align:start position:0%
an r2 let me talk about loop
 

00:10:43.820 --> 00:10:47.620 align:start position:0%
an r2 let me talk about loop
optimizations<00:10:45.820><c> so</c><00:10:46.820><c> to</c><00:10:46.880><c> validate</c><00:10:47.270><c> all</c><00:10:47.510><c> the</c>

00:10:47.620 --> 00:10:47.630 align:start position:0%
optimizations so to validate all the
 

00:10:47.630 --> 00:10:49.690 align:start position:0%
optimizations so to validate all the
optimizations<00:10:48.200><c> we</c><00:10:48.350><c> do</c><00:10:48.500><c> we</c><00:10:49.310><c> have</c><00:10:49.430><c> our</c><00:10:49.580><c> own</c>

00:10:49.690 --> 00:10:49.700 align:start position:0%
optimizations we do we have our own
 

00:10:49.700 --> 00:10:52.780 align:start position:0%
optimizations we do we have our own
benchmarks<00:10:50.620><c> where</c><00:10:51.620><c> we</c><00:10:51.800><c> look</c><00:10:51.980><c> for</c><00:10:52.190><c> regressions</c>

00:10:52.780 --> 00:10:52.790 align:start position:0%
benchmarks where we look for regressions
 

00:10:52.790 --> 00:10:54.670 align:start position:0%
benchmarks where we look for regressions
and<00:10:52.970><c> improvements</c><00:10:53.450><c> but</c><00:10:54.230><c> we</c><00:10:54.290><c> also</c><00:10:54.440><c> want</c><00:10:54.650><c> to</c>

00:10:54.670 --> 00:10:54.680 align:start position:0%
and improvements but we also want to
 

00:10:54.680 --> 00:10:56.890 align:start position:0%
and improvements but we also want to
make<00:10:54.830><c> sure</c><00:10:55.070><c> that</c><00:10:55.360><c> optimizations</c><00:10:56.360><c> do</c><00:10:56.660><c> matter</c>

00:10:56.890 --> 00:10:56.900 align:start position:0%
make sure that optimizations do matter
 

00:10:56.900 --> 00:11:00.580 align:start position:0%
make sure that optimizations do matter
for<00:10:57.290><c> real</c><00:10:57.800><c> Android</c><00:10:58.130><c> apps</c><00:10:59.170><c> so</c><00:11:00.170><c> for</c><00:11:00.320><c> the</c><00:11:00.380><c> old</c>

00:11:00.580 --> 00:11:00.590 align:start position:0%
for real Android apps so for the old
 

00:11:00.590 --> 00:11:02.530 align:start position:0%
for real Android apps so for the old
release<00:11:00.910><c> we</c><00:11:01.910><c> have</c><00:11:02.000><c> invested</c><00:11:02.450><c> our</c>

00:11:02.530 --> 00:11:02.540 align:start position:0%
release we have invested our
 

00:11:02.540 --> 00:11:04.120 align:start position:0%
release we have invested our
optimizations<00:11:03.200><c> on</c><00:11:03.410><c> one</c><00:11:03.620><c> of</c><00:11:03.650><c> our</c><00:11:03.830><c> Android</c>

00:11:04.120 --> 00:11:04.130 align:start position:0%
optimizations on one of our Android
 

00:11:04.130 --> 00:11:09.370 align:start position:0%
optimizations on one of our Android
applications<00:11:04.670><c> sheet</c><00:11:07.540><c> over</c><00:11:08.540><c> the</c><00:11:08.750><c> years</c><00:11:09.020><c> the</c>

00:11:09.370 --> 00:11:09.380 align:start position:0%
applications sheet over the years the
 

00:11:09.380 --> 00:11:11.530 align:start position:0%
applications sheet over the years the
our<00:11:09.620><c> team</c><00:11:09.920><c> and</c><00:11:10.100><c> the</c><00:11:10.190><c> sheets</c><00:11:10.430><c> team</c><00:11:10.670><c> I've</c><00:11:11.240><c> worked</c>

00:11:11.530 --> 00:11:11.540 align:start position:0%
our team and the sheets team I've worked
 

00:11:11.540 --> 00:11:13.600 align:start position:0%
our team and the sheets team I've worked
on<00:11:11.630><c> benchmarking</c><00:11:12.170><c> the</c><00:11:12.320><c> core</c><00:11:12.610><c> computational</c>

00:11:13.600 --> 00:11:13.610 align:start position:0%
on benchmarking the core computational
 

00:11:13.610 --> 00:11:17.410 align:start position:0%
on benchmarking the core computational
logic<00:11:13.760><c> in</c><00:11:14.180><c> the</c><00:11:14.480><c> cheats</c><00:11:14.750><c> app</c><00:11:15.080><c> or</c><00:11:16.420><c> sheets</c>

00:11:17.410 --> 00:11:17.420 align:start position:0%
logic in the cheats app or sheets
 

00:11:17.420 --> 00:11:19.120 align:start position:0%
logic in the cheats app or sheets
benchmark<00:11:17.870><c> suite</c><00:11:17.990><c> is</c><00:11:18.380><c> composed</c><00:11:18.860><c> of</c><00:11:18.950><c> three</c>

00:11:19.120 --> 00:11:19.130 align:start position:0%
benchmark suite is composed of three
 

00:11:19.130 --> 00:11:22.120 align:start position:0%
benchmark suite is composed of three
kinds<00:11:19.310><c> of</c><00:11:19.460><c> benchmarks</c><00:11:21.130><c> benchmarking</c>

00:11:22.120 --> 00:11:22.130 align:start position:0%
kinds of benchmarks benchmarking
 

00:11:22.130 --> 00:11:25.060 align:start position:0%
kinds of benchmarks benchmarking
low-level<00:11:22.610><c> runtime</c><00:11:23.000><c> capabilities</c><00:11:24.070><c> Corsi's</c>

00:11:25.060 --> 00:11:25.070 align:start position:0%
low-level runtime capabilities Corsi's
 

00:11:25.070 --> 00:11:27.730 align:start position:0%
low-level runtime capabilities Corsi's
formal<00:11:25.460><c> evaluation</c><00:11:26.000><c> and</c><00:11:26.620><c> benchmarks</c><00:11:27.620><c> that</c>

00:11:27.730 --> 00:11:27.740 align:start position:0%
formal evaluation and benchmarks that
 

00:11:27.740 --> 00:11:32.770 align:start position:0%
formal evaluation and benchmarks that
shuffle<00:11:28.220><c> ran</c><00:11:28.400><c> themselves</c><00:11:30.040><c> and</c><00:11:31.750><c> we're</c><00:11:32.750><c> very</c>

00:11:32.770 --> 00:11:32.780 align:start position:0%
shuffle ran themselves and we're very
 

00:11:32.780 --> 00:11:34.120 align:start position:0%
shuffle ran themselves and we're very
excited<00:11:33.050><c> to</c><00:11:33.470><c> share</c><00:11:33.650><c> with</c><00:11:33.800><c> you</c><00:11:33.860><c> that</c><00:11:34.040><c> in</c>

00:11:34.120 --> 00:11:34.130 align:start position:0%
excited to share with you that in
 

00:11:34.130 --> 00:11:36.460 align:start position:0%
excited to share with you that in
android<00:11:34.400><c> do</c><00:11:34.600><c> we</c><00:11:35.600><c> make</c><00:11:35.840><c> significant</c>

00:11:36.460 --> 00:11:36.470 align:start position:0%
android do we make significant
 

00:11:36.470 --> 00:11:39.300 align:start position:0%
android do we make significant
improvements<00:11:36.610><c> to</c><00:11:37.610><c> our</c><00:11:37.640><c> runtime</c><00:11:38.060><c> and</c><00:11:38.300><c> compiler</c>

00:11:39.300 --> 00:11:39.310 align:start position:0%
improvements to our runtime and compiler
 

00:11:39.310 --> 00:11:42.310 align:start position:0%
improvements to our runtime and compiler
up<00:11:40.310><c> to</c><00:11:40.610><c> the</c><00:11:40.730><c> point</c><00:11:41.000><c> that</c><00:11:41.750><c> we</c><00:11:41.930><c> are</c><00:11:41.960><c> now</c><00:11:42.170><c> running</c>

00:11:42.310 --> 00:11:42.320 align:start position:0%
up to the point that we are now running
 

00:11:42.320 --> 00:11:44.260 align:start position:0%
up to the point that we are now running
eight<00:11:42.680><c> of</c><00:11:43.040><c> eight</c><00:11:43.640><c> out</c><00:11:44.000><c> of</c><00:11:44.030><c> the</c><00:11:44.180><c> nine</c>

00:11:44.260 --> 00:11:44.270 align:start position:0%
eight of eight out of the nine
 

00:11:44.270 --> 00:11:47.110 align:start position:0%
eight of eight out of the nine
benchmarking<00:11:45.110><c> sheets</c><00:11:45.380><c> from</c><00:11:46.190><c> two</c><00:11:46.430><c> times</c><00:11:46.730><c> -</c>

00:11:47.110 --> 00:11:47.120 align:start position:0%
benchmarking sheets from two times -
 

00:11:47.120 --> 00:11:49.240 align:start position:0%
benchmarking sheets from two times -
three<00:11:47.240><c> times</c><00:11:47.330><c> faster</c><00:11:48.040><c> compared</c><00:11:49.040><c> to</c><00:11:49.070><c> our</c>

00:11:49.240 --> 00:11:49.250 align:start position:0%
three times faster compared to our
 

00:11:49.250 --> 00:11:55.480 align:start position:0%
three times faster compared to our
previous<00:11:49.490><c> release</c><00:11:49.970><c> Naga</c>

00:11:55.480 --> 00:11:55.490 align:start position:0%
 
 

00:11:55.490 --> 00:11:58.640 align:start position:0%
 
you<00:11:56.490><c> may</c><00:11:56.610><c> remember</c><00:11:56.820><c> a</c><00:11:57.000><c> similar</c><00:11:57.360><c> graph</c><00:11:57.650><c> and</c>

00:11:58.640 --> 00:11:58.650 align:start position:0%
you may remember a similar graph and
 

00:11:58.650 --> 00:12:00.080 align:start position:0%
you may remember a similar graph and
this<00:11:58.860><c> one</c><00:11:59.070><c> that</c><00:11:59.250><c> we</c><00:11:59.340><c> presently</c><00:11:59.640><c> the</c><00:11:59.790><c> keynote</c>

00:12:00.080 --> 00:12:00.090 align:start position:0%
this one that we presently the keynote
 

00:12:00.090 --> 00:12:03.740 align:start position:0%
this one that we presently the keynote
years<00:12:00.510><c> ago</c><00:12:01.370><c> this</c><00:12:02.370><c> is</c><00:12:02.580><c> actually</c><00:12:02.910><c> a</c><00:12:02.940><c> snapshot</c><00:12:03.270><c> of</c>

00:12:03.740 --> 00:12:03.750 align:start position:0%
years ago this is actually a snapshot of
 

00:12:03.750 --> 00:12:07.250 align:start position:0%
years ago this is actually a snapshot of
our<00:12:04.110><c> benchmark</c><00:12:04.590><c> monitoring</c><00:12:05.520><c> tool</c><00:12:06.230><c> where</c><00:12:07.230><c> we</c>

00:12:07.250 --> 00:12:07.260 align:start position:0%
our benchmark monitoring tool where we
 

00:12:07.260 --> 00:12:09.980 align:start position:0%
our benchmark monitoring tool where we
track<00:12:07.560><c> over</c><00:12:07.770><c> time</c><00:12:07.920><c> the</c><00:12:08.490><c> impact</c><00:12:08.760><c> of</c><00:12:08.940><c> each</c><00:12:09.600><c> evil</c>

00:12:09.980 --> 00:12:09.990 align:start position:0%
track over time the impact of each evil
 

00:12:09.990 --> 00:12:13.510 align:start position:0%
track over time the impact of each evil
change<00:12:10.260><c> we</c><00:12:10.410><c> do</c><00:12:10.530><c> in</c><00:12:10.620><c> art</c><00:12:10.830><c> on</c><00:12:11.070><c> our</c><00:12:11.540><c> benchmarks</c>

00:12:13.510 --> 00:12:13.520 align:start position:0%
change we do in art on our benchmarks
 

00:12:13.520 --> 00:12:16.070 align:start position:0%
change we do in art on our benchmarks
for<00:12:14.520><c> this</c><00:12:14.730><c> graph</c><00:12:14.970><c> where</c><00:12:15.300><c> we</c><00:12:15.330><c> see</c><00:12:15.690><c> that</c><00:12:15.930><c> the</c>

00:12:16.070 --> 00:12:16.080 align:start position:0%
for this graph where we see that the
 

00:12:16.080 --> 00:12:18.140 align:start position:0%
for this graph where we see that the
sheets<00:12:16.350><c> aggregate</c><00:12:16.830><c> score</c><00:12:17.130><c> keeps</c><00:12:17.970><c> on</c>

00:12:18.140 --> 00:12:18.150 align:start position:0%
sheets aggregate score keeps on
 

00:12:18.150 --> 00:12:20.360 align:start position:0%
sheets aggregate score keeps on
improving<00:12:18.300><c> month</c><00:12:18.840><c> after</c><00:12:19.110><c> month</c><00:12:19.280><c> between</c><00:12:20.280><c> the</c>

00:12:20.360 --> 00:12:20.370 align:start position:0%
improving month after month between the
 

00:12:20.370 --> 00:12:24.680 align:start position:0%
improving month after month between the
two<00:12:20.520><c> Android</c><00:12:21.480><c> and</c><00:12:21.810><c> ad</c><00:12:21.870><c> with</c><00:12:21.990><c> all</c><00:12:22.170><c> release</c><00:12:23.690><c> so</c>

00:12:24.680 --> 00:12:24.690 align:start position:0%
two Android and ad with all release so
 

00:12:24.690 --> 00:12:26.030 align:start position:0%
two Android and ad with all release so
let<00:12:24.780><c> me</c><00:12:24.900><c> pick</c><00:12:25.110><c> al</c><00:12:25.200><c> explain</c><00:12:25.530><c> to</c><00:12:25.650><c> you</c><00:12:25.740><c> the</c><00:12:25.860><c> major</c>

00:12:26.030 --> 00:12:26.040 align:start position:0%
let me pick al explain to you the major
 

00:12:26.040 --> 00:12:31.460 align:start position:0%
let me pick al explain to you the major
improvements<00:12:26.340><c> we</c><00:12:26.640><c> made</c><00:12:26.670><c> for</c><00:12:27.060><c> o</c><00:12:30.050><c> so</c><00:12:31.050><c> one</c><00:12:31.260><c> major</c>

00:12:31.460 --> 00:12:31.470 align:start position:0%
improvements we made for o so one major
 

00:12:31.470 --> 00:12:32.900 align:start position:0%
improvements we made for o so one major
change<00:12:31.830><c> is</c><00:12:32.040><c> of</c><00:12:32.190><c> course</c><00:12:32.400><c> on</c><00:12:32.550><c> your</c><00:12:32.580><c> garbage</c>

00:12:32.900 --> 00:12:32.910 align:start position:0%
change is of course on your garbage
 

00:12:32.910 --> 00:12:35.620 align:start position:0%
change is of course on your garbage
collector<00:12:33.300><c> that</c><00:12:33.870><c> Matthew</c><00:12:34.200><c> just</c><00:12:34.440><c> introduced</c>

00:12:35.620 --> 00:12:35.630 align:start position:0%
collector that Matthew just introduced
 

00:12:35.630 --> 00:12:37.970 align:start position:0%
collector that Matthew just introduced
overall<00:12:36.630><c> and</c><00:12:36.990><c> improve</c><00:12:37.350><c> the</c><00:12:37.470><c> performance</c><00:12:37.560><c> of</c>

00:12:37.970 --> 00:12:37.980 align:start position:0%
overall and improve the performance of
 

00:12:37.980 --> 00:12:39.370 align:start position:0%
overall and improve the performance of
sheets<00:12:38.220><c> by</c><00:12:38.490><c> 40%</c>

00:12:39.370 --> 00:12:39.380 align:start position:0%
sheets by 40%
 

00:12:39.380 --> 00:12:41.660 align:start position:0%
sheets by 40%
thanks<00:12:40.380><c> to</c><00:12:40.470><c> thread-local</c><00:12:40.860><c> allocation</c><00:12:41.370><c> buffer</c>

00:12:41.660 --> 00:12:41.670 align:start position:0%
thanks to thread-local allocation buffer
 

00:12:41.670 --> 00:12:46.630 align:start position:0%
thanks to thread-local allocation buffer
and<00:12:41.880><c> faster</c><00:12:42.660><c> collections</c>

00:12:46.630 --> 00:12:46.640 align:start position:0%
 
 

00:12:46.640 --> 00:12:49.580 align:start position:0%
 
the<00:12:47.640><c> next</c><00:12:47.910><c> major</c><00:12:48.090><c> influence</c><00:12:48.570><c> we</c><00:12:48.660><c> made</c><00:12:48.870><c> is</c><00:12:49.200><c> our</c>

00:12:49.580 --> 00:12:49.590 align:start position:0%
the next major influence we made is our
 

00:12:49.590 --> 00:12:52.460 align:start position:0%
the next major influence we made is our
in<00:12:49.710><c> liner</c><00:12:50.120><c> which</c><00:12:51.120><c> gave</c><00:12:51.390><c> us</c><00:12:51.420><c> another</c><00:12:51.750><c> 20%</c><00:12:52.080><c> boost</c>

00:12:52.460 --> 00:12:52.470 align:start position:0%
in liner which gave us another 20% boost
 

00:12:52.470 --> 00:12:56.840 align:start position:0%
in liner which gave us another 20% boost
and<00:12:54.110><c> this</c><00:12:55.110><c> was</c><00:12:55.320><c> what</c><00:12:55.560><c> this</c><00:12:55.920><c> optimization</c><00:12:56.460><c> was</c>

00:12:56.840 --> 00:12:56.850 align:start position:0%
and this was what this optimization was
 

00:12:56.850 --> 00:12:58.400 align:start position:0%
and this was what this optimization was
only<00:12:57.120><c> the</c><00:12:57.270><c> easiest</c><00:12:57.570><c> optimizations</c><00:12:58.260><c> we've</c>

00:12:58.400 --> 00:12:58.410 align:start position:0%
only the easiest optimizations we've
 

00:12:58.410 --> 00:13:00.410 align:start position:0%
only the easiest optimizations we've
made<00:12:58.590><c> because</c><00:12:59.460><c> we</c><00:12:59.730><c> already</c><00:12:59.850><c> had</c><00:13:00.060><c> it</c><00:13:00.150><c> in</c><00:13:00.210><c> liner</c>

00:13:00.410 --> 00:13:00.420 align:start position:0%
made because we already had it in liner
 

00:13:00.420 --> 00:13:03.140 align:start position:0%
made because we already had it in liner
in<00:13:00.570><c> EM</c><00:13:01.220><c> but</c><00:13:02.220><c> what</c><00:13:02.340><c> happened</c><00:13:02.670><c> in</c><00:13:02.730><c> the</c><00:13:02.790><c> end</c><00:13:02.970><c> is</c>

00:13:03.140 --> 00:13:03.150 align:start position:0%
in EM but what happened in the end is
 

00:13:03.150 --> 00:13:04.580 align:start position:0%
in EM but what happened in the end is
that<00:13:03.180><c> now</c><00:13:03.450><c> we're</c><00:13:03.660><c> doing</c><00:13:03.840><c> all</c><00:13:04.020><c> the</c><00:13:04.140><c> computation</c>

00:13:04.580 --> 00:13:04.590 align:start position:0%
that now we're doing all the computation
 

00:13:04.590 --> 00:13:06.740 align:start position:0%
that now we're doing all the computation
in<00:13:04.680><c> the</c><00:13:04.740><c> background</c><00:13:05.160><c> and</c><00:13:05.430><c> we</c><00:13:06.240><c> only</c><00:13:06.390><c> compiled</c>

00:13:06.740 --> 00:13:06.750 align:start position:0%
in the background and we only compiled
 

00:13:06.750 --> 00:13:09.230 align:start position:0%
in the background and we only compiled
important<00:13:07.110><c> things</c><00:13:07.320><c> I</c><00:13:07.560><c> mean</c><00:13:08.340><c> we</c><00:13:08.700><c> can</c><00:13:08.820><c> avoid</c><00:13:09.060><c> the</c>

00:13:09.230 --> 00:13:09.240 align:start position:0%
important things I mean we can avoid the
 

00:13:09.240 --> 00:13:13.370 align:start position:0%
important things I mean we can avoid the
code<00:13:09.420><c> bloating</c><00:13:09.870><c> when</c><00:13:10.560><c> we</c><00:13:10.680><c> in</c><00:13:10.770><c> line</c><00:13:12.260><c> with</c><00:13:13.260><c> those</c>

00:13:13.370 --> 00:13:13.380 align:start position:0%
code bloating when we in line with those
 

00:13:13.380 --> 00:13:14.810 align:start position:0%
code bloating when we in line with those
two<00:13:13.620><c> improvements</c><00:13:13.830><c> implemented</c><00:13:14.520><c> in</c><00:13:14.610><c> the</c><00:13:14.670><c> end</c>

00:13:14.810 --> 00:13:14.820 align:start position:0%
two improvements implemented in the end
 

00:13:14.820 --> 00:13:18.830 align:start position:0%
two improvements implemented in the end
it<00:13:15.060><c> was</c><00:13:15.900><c> a</c><00:13:15.930><c> lot</c><00:13:16.170><c> easy</c><00:13:16.410><c> for</c><00:13:17.040><c> us</c><00:13:17.190><c> to</c><00:13:17.550><c> do</c><00:13:18.270><c> a</c><00:13:18.300><c> more</c>

00:13:18.830 --> 00:13:18.840 align:start position:0%
it was a lot easy for us to do a more
 

00:13:18.840 --> 00:13:21.890 align:start position:0%
it was a lot easy for us to do a more
aggressive<00:13:19.140><c> aligning</c><00:13:19.770><c> for</c><00:13:20.640><c> oh</c><00:13:20.720><c> so</c><00:13:21.720><c> for</c>

00:13:21.890 --> 00:13:21.900 align:start position:0%
aggressive aligning for oh so for
 

00:13:21.900 --> 00:13:24.350 align:start position:0%
aggressive aligning for oh so for
example<00:13:22.290><c> we</c><00:13:23.130><c> now</c><00:13:23.250><c> in</c><00:13:23.400><c> line</c><00:13:23.490><c> across</c><00:13:23.700><c> textiles</c>

00:13:24.350 --> 00:13:24.360 align:start position:0%
example we now in line across textiles
 

00:13:24.360 --> 00:13:26.510 align:start position:0%
example we now in line across textiles
we<00:13:25.290><c> in</c><00:13:25.410><c> line</c><00:13:25.590><c> methods</c><00:13:26.040><c> which</c><00:13:26.190><c> could</c><00:13:26.310><c> end</c><00:13:26.460><c> up</c>

00:13:26.510 --> 00:13:26.520 align:start position:0%
we in line methods which could end up
 

00:13:26.520 --> 00:13:28.640 align:start position:0%
we in line methods which could end up
throwing<00:13:26.730><c> and</c><00:13:27.060><c> we</c><00:13:27.660><c> give</c><00:13:27.840><c> a</c><00:13:27.870><c> much</c><00:13:28.170><c> larger</c>

00:13:28.640 --> 00:13:28.650 align:start position:0%
throwing and we give a much larger
 

00:13:28.650 --> 00:13:30.860 align:start position:0%
throwing and we give a much larger
aligning<00:13:29.070><c> budget</c><00:13:29.430><c> so</c><00:13:29.970><c> more</c><00:13:30.180><c> methods</c><00:13:30.600><c> get</c><00:13:30.720><c> in</c>

00:13:30.860 --> 00:13:30.870 align:start position:0%
aligning budget so more methods get in
 

00:13:30.870 --> 00:13:36.050 align:start position:0%
aligning budget so more methods get in
line<00:13:31.050><c> now</c><00:13:34.100><c> let's</c><00:13:35.100><c> move</c><00:13:35.280><c> to</c><00:13:35.340><c> an</c><00:13:35.460><c> optimization</c>

00:13:36.050 --> 00:13:36.060 align:start position:0%
line now let's move to an optimization
 

00:13:36.060 --> 00:13:38.870 align:start position:0%
line now let's move to an optimization
that<00:13:36.180><c> did</c><00:13:36.330><c> require</c><00:13:36.630><c> some</c><00:13:36.690><c> work</c><00:13:37.290><c> and</c><00:13:37.790><c> helps</c><00:13:38.790><c> us</c>

00:13:38.870 --> 00:13:38.880 align:start position:0%
that did require some work and helps us
 

00:13:38.880 --> 00:13:42.440 align:start position:0%
that did require some work and helps us
increase<00:13:39.060><c> the</c><00:13:39.240><c> sheets</c><00:13:39.630><c> code</c><00:13:39.840><c> like</c><00:13:40.380><c> 15%</c><00:13:41.450><c> this</c>

00:13:42.440 --> 00:13:42.450 align:start position:0%
increase the sheets code like 15% this
 

00:13:42.450 --> 00:13:43.910 align:start position:0%
increase the sheets code like 15% this
is<00:13:42.600><c> called</c><00:13:42.810><c> that</c><00:13:43.080><c> optimization</c><00:13:43.650><c> is</c><00:13:43.710><c> called</c>

00:13:43.910 --> 00:13:43.920 align:start position:0%
is called that optimization is called
 

00:13:43.920 --> 00:13:49.610 align:start position:0%
is called that optimization is called
code<00:13:44.100><c> thinking</c><00:13:47.600><c> it's</c><00:13:48.600><c> an</c><00:13:48.750><c> optimization</c><00:13:49.440><c> that</c>

00:13:49.610 --> 00:13:49.620 align:start position:0%
code thinking it's an optimization that
 

00:13:49.620 --> 00:13:52.550 align:start position:0%
code thinking it's an optimization that
it<00:13:49.740><c> essentially</c><00:13:50.100><c> moves</c><00:13:50.520><c> instructions</c><00:13:51.560><c> next</c>

00:13:52.550 --> 00:13:52.560 align:start position:0%
it essentially moves instructions next
 

00:13:52.560 --> 00:13:54.470 align:start position:0%
it essentially moves instructions next
that<00:13:52.770><c> to</c><00:13:53.250><c> instructions</c><00:13:53.790><c> that</c><00:13:53.940><c> actually</c><00:13:54.300><c> use</c>

00:13:54.470 --> 00:13:54.480 align:start position:0%
that to instructions that actually use
 

00:13:54.480 --> 00:13:57.350 align:start position:0%
that to instructions that actually use
them<00:13:55.100><c> so</c><00:13:56.100><c> typically</c><00:13:56.520><c> what</c><00:13:56.670><c> you</c><00:13:56.730><c> want</c><00:13:56.820><c> to</c><00:13:56.970><c> do</c><00:13:57.090><c> is</c>

00:13:57.350 --> 00:13:57.360 align:start position:0%
them so typically what you want to do is
 

00:13:57.360 --> 00:14:00.770 align:start position:0%
them so typically what you want to do is
the<00:13:57.570><c> instructions</c><00:13:58.050><c> are</c><00:13:58.200><c> that</c><00:13:58.650><c> are</c><00:13:59.780><c> really</c>

00:14:00.770 --> 00:14:00.780 align:start position:0%
the instructions are that are really
 

00:14:00.780 --> 00:14:03.140 align:start position:0%
the instructions are that are really
being<00:14:01.020><c> used</c><00:14:01.220><c> you</c><00:14:02.220><c> want</c><00:14:02.370><c> to</c><00:14:02.460><c> move</c><00:14:02.610><c> them</c><00:14:02.820><c> closer</c>

00:14:03.140 --> 00:14:03.150 align:start position:0%
being used you want to move them closer
 

00:14:03.150 --> 00:14:05.480 align:start position:0%
being used you want to move them closer
to<00:14:03.600><c> where</c><00:14:04.020><c> they</c><00:14:04.170><c> are</c><00:14:04.200><c> used</c><00:14:04.470><c> so</c><00:14:04.980><c> the</c>

00:14:05.480 --> 00:14:05.490 align:start position:0%
to where they are used so the
 

00:14:05.490 --> 00:14:07.160 align:start position:0%
to where they are used so the
instructions<00:14:05.940><c> are</c><00:14:06.060><c> not</c><00:14:06.090><c> in</c><00:14:06.480><c> a</c><00:14:06.600><c> regular</c><00:14:06.780><c> flow</c>

00:14:07.160 --> 00:14:07.170 align:start position:0%
instructions are not in a regular flow
 

00:14:07.170 --> 00:14:08.190 align:start position:0%
instructions are not in a regular flow
of<00:14:07.200><c> your</c>

00:14:08.190 --> 00:14:08.200 align:start position:0%
of your
 

00:14:08.200 --> 00:14:10.740 align:start position:0%
of your
want<00:14:08.740><c> to</c><00:14:08.800><c> move</c><00:14:08.920><c> them</c><00:14:09.070><c> to</c><00:14:09.240><c> the</c><00:14:10.240><c> intestinal</c>

00:14:10.740 --> 00:14:10.750 align:start position:0%
want to move them to the intestinal
 

00:14:10.750 --> 00:14:14.850 align:start position:0%
want to move them to the intestinal
cases<00:14:12.180><c> that's</c><00:14:13.180><c> fairly</c><00:14:13.420><c> abstract</c><00:14:13.630><c> so</c><00:14:14.620><c> let</c><00:14:14.740><c> me</c>

00:14:14.850 --> 00:14:14.860 align:start position:0%
cases that's fairly abstract so let me
 

00:14:14.860 --> 00:14:15.930 align:start position:0%
cases that's fairly abstract so let me
give<00:14:14.980><c> you</c><00:14:15.070><c> an</c><00:14:15.160><c> example</c><00:14:15.400><c> to</c><00:14:15.550><c> make</c><00:14:15.730><c> it</c><00:14:15.850><c> more</c>

00:14:15.930 --> 00:14:15.940 align:start position:0%
give you an example to make it more
 

00:14:15.940 --> 00:14:22.700 align:start position:0%
give you an example to make it more
concrete<00:14:19.230><c> here's</c><00:14:20.230><c> an</c><00:14:20.320><c> accept</c><00:14:20.650><c> of</c><00:14:20.890><c> sheets</c><00:14:21.370><c> code</c>

00:14:22.700 --> 00:14:22.710 align:start position:0%
concrete here's an accept of sheets code
 

00:14:22.710 --> 00:14:25.430 align:start position:0%
concrete here's an accept of sheets code
there's<00:14:23.710><c> a</c><00:14:23.800><c> method</c><00:14:24.100><c> called</c><00:14:24.340><c> who</c><00:14:24.790><c> ate</c><00:14:24.910><c> range</c>

00:14:25.430 --> 00:14:25.440 align:start position:0%
there's a method called who ate range
 

00:14:25.440 --> 00:14:28.170 align:start position:0%
there's a method called who ate range
takes<00:14:26.440><c> two</c><00:14:26.650><c> integers</c><00:14:26.800><c> and</c><00:14:27.310><c> returns</c><00:14:27.970><c> a</c><00:14:28.060><c> new</c>

00:14:28.170 --> 00:14:28.180 align:start position:0%
takes two integers and returns a new
 

00:14:28.180 --> 00:14:33.090 align:start position:0%
takes two integers and returns a new
range<00:14:30.450><c> the</c><00:14:31.450><c> query</c><00:14:31.690><c> range</c><00:14:31.840><c> method</c><00:14:32.290><c> shows</c><00:14:33.070><c> a</c>

00:14:33.090 --> 00:14:33.100 align:start position:0%
range the query range method shows a
 

00:14:33.100 --> 00:14:36.590 align:start position:0%
range the query range method shows a
helper<00:14:33.460><c> method</c><00:14:34.770><c> called</c><00:14:35.770><c> check</c><00:14:36.010><c> condition</c>

00:14:36.590 --> 00:14:36.600 align:start position:0%
helper method called check condition
 

00:14:36.600 --> 00:14:38.850 align:start position:0%
helper method called check condition
that<00:14:37.600><c> will</c><00:14:37.750><c> check</c><00:14:37.990><c> the</c><00:14:38.110><c> required</c><00:14:38.410><c> conditions</c>

00:14:38.850 --> 00:14:38.860 align:start position:0%
that will check the required conditions
 

00:14:38.860 --> 00:14:41.970 align:start position:0%
that will check the required conditions
for<00:14:39.040><c> creating</c><00:14:39.670><c> a</c><00:14:39.760><c> range</c><00:14:40.620><c> if</c><00:14:41.620><c> those</c><00:14:41.830><c> conditions</c>

00:14:41.970 --> 00:14:41.980 align:start position:0%
for creating a range if those conditions
 

00:14:41.980 --> 00:14:45.740 align:start position:0%
for creating a range if those conditions
are<00:14:42.310><c> not</c><00:14:42.370><c> met</c><00:14:42.630><c> we'll</c><00:14:43.630><c> throw</c><00:14:43.810><c> an</c><00:14:43.870><c> error</c>

00:14:45.740 --> 00:14:45.750 align:start position:0%
are not met we'll throw an error
 

00:14:45.750 --> 00:14:49.920 align:start position:0%
are not met we'll throw an error
notice<00:14:46.750><c> how</c><00:14:46.990><c> the</c><00:14:47.070><c> check</c><00:14:48.070><c> condition</c><00:14:48.580><c> is</c><00:14:48.760><c> a</c><00:14:49.630><c> very</c>

00:14:49.920 --> 00:14:49.930 align:start position:0%
notice how the check condition is a very
 

00:14:49.930 --> 00:14:53.520 align:start position:0%
notice how the check condition is a very
first<00:14:50.290><c> method</c><00:14:50.740><c> and</c><00:14:51.930><c> this</c><00:14:52.930><c> is</c><00:14:53.050><c> important</c><00:14:53.440><c> to</c>

00:14:53.520 --> 00:14:53.530 align:start position:0%
first method and this is important to
 

00:14:53.530 --> 00:14:56.190 align:start position:0%
first method and this is important to
notice<00:14:54.150><c> because</c><00:14:55.150><c> it</c><00:14:55.420><c> will</c><00:14:55.510><c> affect</c><00:14:55.630><c> the</c><00:14:55.990><c> code</c>

00:14:56.190 --> 00:14:56.200 align:start position:0%
notice because it will affect the code
 

00:14:56.200 --> 00:15:00.540 align:start position:0%
notice because it will affect the code
that<00:14:56.290><c> is</c><00:14:56.410><c> being</c><00:14:56.440><c> sent</c><00:14:56.920><c> to</c><00:14:57.850><c> our</c><00:14:58.480><c> runtime</c><00:14:59.550><c> here's</c>

00:15:00.540 --> 00:15:00.550 align:start position:0%
that is being sent to our runtime here's
 

00:15:00.550 --> 00:15:05.300 align:start position:0%
that is being sent to our runtime here's
how<00:15:01.650><c> so</c><00:15:02.650><c> you</c><00:15:02.680><c> start</c><00:15:02.950><c> with</c><00:15:03.070><c> a</c><00:15:03.100><c> simple</c><00:15:03.460><c> method</c>

00:15:05.300 --> 00:15:05.310 align:start position:0%
how so you start with a simple method
 

00:15:05.310 --> 00:15:08.010 align:start position:0%
how so you start with a simple method
the<00:15:06.310><c> Java</c><00:15:06.520><c> compiler</c><00:15:06.760><c> actually</c><00:15:07.150><c> did</c><00:15:07.630><c> sugars</c>

00:15:08.010 --> 00:15:08.020 align:start position:0%
the Java compiler actually did sugars
 

00:15:08.020 --> 00:15:12.210 align:start position:0%
the Java compiler actually did sugars
the<00:15:08.980><c> varargs</c><00:15:09.460><c> call</c><00:15:09.880><c> to</c><00:15:11.010><c> allocating</c><00:15:12.010><c> a</c><00:15:12.100><c> new</c>

00:15:12.210 --> 00:15:12.220 align:start position:0%
the varargs call to allocating a new
 

00:15:12.220 --> 00:15:15.210 align:start position:0%
the varargs call to allocating a new
object<00:15:13.050><c> putting</c><00:15:14.050><c> that</c><00:15:14.260><c> allocating</c><00:15:15.160><c> a</c><00:15:15.190><c> new</c>

00:15:15.210 --> 00:15:15.220 align:start position:0%
object putting that allocating a new
 

00:15:15.220 --> 00:15:19.230 align:start position:0%
object putting that allocating a new
array<00:15:15.810><c> putting</c><00:15:16.810><c> in</c><00:15:16.870><c> an</c><00:15:16.960><c> array</c><00:15:17.850><c> boxed</c><00:15:18.850><c> versions</c>

00:15:19.230 --> 00:15:19.240 align:start position:0%
array putting in an array boxed versions
 

00:15:19.240 --> 00:15:22.470 align:start position:0%
array putting in an array boxed versions
of<00:15:19.480><c> start</c><00:15:20.050><c> and</c><00:15:20.200><c> end</c><00:15:20.380><c> and</c><00:15:20.940><c> then</c><00:15:21.940><c> passing</c><00:15:22.390><c> this</c>

00:15:22.470 --> 00:15:22.480 align:start position:0%
of start and end and then passing this
 

00:15:22.480 --> 00:15:25.380 align:start position:0%
of start and end and then passing this
array<00:15:22.750><c> to</c><00:15:22.870><c> check</c><00:15:23.050><c> condition</c><00:15:23.500><c> and</c><00:15:24.120><c> this</c><00:15:25.120><c> is</c><00:15:25.270><c> an</c>

00:15:25.380 --> 00:15:25.390 align:start position:0%
array to check condition and this is an
 

00:15:25.390 --> 00:15:27.300 align:start position:0%
array to check condition and this is an
Android<00:15:25.570><c> specific</c><00:15:26.170><c> this</c><00:15:26.650><c> is</c><00:15:26.830><c> what</c><00:15:27.010><c> the</c><00:15:27.100><c> Java</c>

00:15:27.300 --> 00:15:27.310 align:start position:0%
Android specific this is what the Java
 

00:15:27.310 --> 00:15:28.710 align:start position:0%
Android specific this is what the Java
compiler<00:15:27.610><c> does</c><00:15:27.910><c> when</c><00:15:28.240><c> compiled</c><00:15:28.570><c> to</c><00:15:28.690><c> bytecode</c>

00:15:28.710 --> 00:15:28.720 align:start position:0%
compiler does when compiled to bytecode
 

00:15:28.720 --> 00:15:32.940 align:start position:0%
compiler does when compiled to bytecode
and<00:15:31.260><c> these</c><00:15:32.260><c> instructions</c><00:15:32.770><c> are</c><00:15:32.860><c> not</c>

00:15:32.940 --> 00:15:32.950 align:start position:0%
and these instructions are not
 

00:15:32.950 --> 00:15:35.760 align:start position:0%
and these instructions are not
completely<00:15:33.370><c> free</c><00:15:34.020><c> yes</c><00:15:35.020><c> we</c><00:15:35.260><c> made</c><00:15:35.410><c> allocations</c>

00:15:35.760 --> 00:15:35.770 align:start position:0%
completely free yes we made allocations
 

00:15:35.770 --> 00:15:37.170 align:start position:0%
completely free yes we made allocations
extremely<00:15:36.370><c> fast</c><00:15:36.610><c> with</c><00:15:36.790><c> the</c><00:15:36.880><c> new</c><00:15:37.000><c> garbage</c>

00:15:37.170 --> 00:15:37.180 align:start position:0%
extremely fast with the new garbage
 

00:15:37.180 --> 00:15:39.180 align:start position:0%
extremely fast with the new garbage
collector<00:15:37.660><c> but</c><00:15:38.470><c> having</c><00:15:38.740><c> to</c><00:15:38.830><c> create</c><00:15:39.010><c> this</c>

00:15:39.180 --> 00:15:39.190 align:start position:0%
collector but having to create this
 

00:15:39.190 --> 00:15:41.250 align:start position:0%
collector but having to create this
array<00:15:39.520><c> the</c><00:15:39.880><c> boxed</c><00:15:40.240><c> versions</c><00:15:40.660><c> of</c><00:15:40.810><c> storing</c><00:15:41.110><c> and</c>

00:15:41.250 --> 00:15:41.260 align:start position:0%
array the boxed versions of storing and
 

00:15:41.260 --> 00:15:44.040 align:start position:0%
array the boxed versions of storing and
all<00:15:42.100><c> the</c><00:15:42.430><c> time</c><00:15:42.670><c> the</c><00:15:43.000><c> method</c><00:15:43.300><c> is</c><00:15:43.390><c> executed</c><00:15:43.870><c> is</c>

00:15:44.040 --> 00:15:44.050 align:start position:0%
all the time the method is executed is
 

00:15:44.050 --> 00:15:47.720 align:start position:0%
all the time the method is executed is
not<00:15:44.470><c> really</c><00:15:44.650><c> ideal</c><00:15:46.020><c> so</c><00:15:47.020><c> here's</c><00:15:47.230><c> how</c><00:15:47.320><c> we</c><00:15:47.440><c> avoid</c>

00:15:47.720 --> 00:15:47.730 align:start position:0%
not really ideal so here's how we avoid
 

00:15:47.730 --> 00:15:52.950 align:start position:0%
not really ideal so here's how we avoid
executed<00:15:48.730><c> completely</c><00:15:51.180><c> first</c><00:15:52.180><c> we</c><00:15:52.630><c> can</c><00:15:52.780><c> easily</c>

00:15:52.950 --> 00:15:52.960 align:start position:0%
executed completely first we can easily
 

00:15:52.960 --> 00:15:55.650 align:start position:0%
executed completely first we can easily
inline<00:15:53.440><c> the</c><00:15:53.620><c> call</c><00:15:53.800><c> to</c><00:15:53.890><c> check</c><00:15:54.070><c> condition</c><00:15:54.660><c> so</c>

00:15:55.650 --> 00:15:55.660 align:start position:0%
inline the call to check condition so
 

00:15:55.660 --> 00:15:57.510 align:start position:0%
inline the call to check condition so
int<00:15:55.810><c> only</c><00:15:55.990><c> this</c><00:15:56.980><c> is</c><00:15:57.100><c> how</c><00:15:57.160><c> the</c><00:15:57.310><c> code</c><00:15:57.490><c> is</c>

00:15:57.510 --> 00:15:57.520 align:start position:0%
int only this is how the code is
 

00:15:57.520 --> 00:16:02.220 align:start position:0%
int only this is how the code is
transformed<00:15:58.090><c> in</c><00:15:58.270><c> art</c>

00:16:02.220 --> 00:16:02.230 align:start position:0%
 
 

00:16:02.230 --> 00:16:06.820 align:start position:0%
 
notice<00:16:03.230><c> how</c><00:16:03.770><c> arcs</c><00:16:04.280><c> now</c><00:16:04.490><c> is</c><00:16:04.900><c> only</c><00:16:05.900><c> used</c><00:16:06.260><c> in</c><00:16:06.590><c> the</c>

00:16:06.820 --> 00:16:06.830 align:start position:0%
notice how arcs now is only used in the
 

00:16:06.830 --> 00:16:11.860 align:start position:0%
notice how arcs now is only used in the
in<00:16:06.980><c> French</c><00:16:09.910><c> so</c><00:16:10.910><c> where</c><00:16:11.060><c> the</c><00:16:11.120><c> compiler</c><00:16:11.450><c> can</c><00:16:11.660><c> do</c>

00:16:11.860 --> 00:16:11.870 align:start position:0%
in French so where the compiler can do
 

00:16:11.870 --> 00:16:14.890 align:start position:0%
in French so where the compiler can do
is<00:16:12.170><c> move</c><00:16:12.860><c> the</c><00:16:13.130><c> allocation</c><00:16:13.730><c> and</c><00:16:13.850><c> the</c><00:16:14.390><c> boxing</c>

00:16:14.890 --> 00:16:14.900 align:start position:0%
is move the allocation and the boxing
 

00:16:14.900 --> 00:16:17.710 align:start position:0%
is move the allocation and the boxing
closer<00:16:15.650><c> to</c><00:16:16.460><c> where</c><00:16:16.610><c> arcs</c><00:16:16.970><c> is</c><00:16:17.090><c> being</c><00:16:17.300><c> used</c><00:16:17.480><c> in</c>

00:16:17.710 --> 00:16:17.720 align:start position:0%
closer to where arcs is being used in
 

00:16:17.720 --> 00:16:21.610 align:start position:0%
closer to where arcs is being used in
the<00:16:18.290><c> exceptional</c><00:16:18.770><c> flow</c><00:16:20.260><c> so</c><00:16:21.260><c> at</c><00:16:21.350><c> the</c><00:16:21.470><c> end</c><00:16:21.530><c> of</c>

00:16:21.610 --> 00:16:21.620 align:start position:0%
the exceptional flow so at the end of
 

00:16:21.620 --> 00:16:23.710 align:start position:0%
the exceptional flow so at the end of
this<00:16:21.710><c> optimization</c><00:16:22.400><c> what</c><00:16:23.210><c> the</c><00:16:23.330><c> compilers</c>

00:16:23.710 --> 00:16:23.720 align:start position:0%
this optimization what the compilers
 

00:16:23.720 --> 00:16:26.200 align:start position:0%
this optimization what the compilers
made<00:16:23.930><c> sure</c><00:16:24.110><c> of</c><00:16:24.320><c> is</c><00:16:24.500><c> that</c><00:16:25.220><c> only</c><00:16:25.610><c> the</c><00:16:25.940><c> require</c>

00:16:26.200 --> 00:16:26.210 align:start position:0%
made sure of is that only the require
 

00:16:26.210 --> 00:16:28.090 align:start position:0%
made sure of is that only the require
instructions<00:16:26.750><c> will</c><00:16:26.930><c> be</c><00:16:26.960><c> executed</c><00:16:27.110><c> in</c><00:16:27.740><c> the</c>

00:16:28.090 --> 00:16:28.100 align:start position:0%
instructions will be executed in the
 

00:16:28.100 --> 00:16:34.960 align:start position:0%
instructions will be executed in the
normal<00:16:28.400><c> flow</c><00:16:32.980><c> the</c><00:16:33.980><c> last</c><00:16:34.160><c> optimization</c><00:16:34.760><c> I</c><00:16:34.820><c> want</c>

00:16:34.960 --> 00:16:34.970 align:start position:0%
normal flow the last optimization I want
 

00:16:34.970 --> 00:16:37.150 align:start position:0%
normal flow the last optimization I want
to<00:16:35.090><c> mention</c><00:16:35.270><c> here</c><00:16:35.420><c> is</c><00:16:35.780><c> class</c><00:16:36.710><c> your</c><00:16:36.980><c> key</c>

00:16:37.150 --> 00:16:37.160 align:start position:0%
to mention here is class your key
 

00:16:37.160 --> 00:16:42.640 align:start position:0%
to mention here is class your key
analysis<00:16:40.540><c> class</c><00:16:41.540><c> search</c><00:16:41.780><c> analysis</c><00:16:42.380><c> is</c><00:16:42.620><c> a</c>

00:16:42.640 --> 00:16:42.650 align:start position:0%
analysis class search analysis is a
 

00:16:42.650 --> 00:16:44.470 align:start position:0%
analysis class search analysis is a
pretty<00:16:42.980><c> common</c><00:16:43.250><c> technique</c><00:16:43.640><c> in</c><00:16:43.850><c> object</c>

00:16:44.470 --> 00:16:44.480 align:start position:0%
pretty common technique in object
 

00:16:44.480 --> 00:16:47.080 align:start position:0%
pretty common technique in object
oriented<00:16:44.600><c> language</c><00:16:45.220><c> what</c><00:16:46.220><c> a</c><00:16:46.250><c> runtime</c><00:16:46.730><c> will</c>

00:16:47.080 --> 00:16:47.090 align:start position:0%
oriented language what a runtime will
 

00:16:47.090 --> 00:16:50.590 align:start position:0%
oriented language what a runtime will
try<00:16:47.270><c> to</c><00:16:47.300><c> infer</c><00:16:48.100><c> classes</c><00:16:49.100><c> or</c><00:16:49.220><c> methods</c><00:16:49.610><c> that</c><00:16:49.730><c> can</c>

00:16:50.590 --> 00:16:50.600 align:start position:0%
try to infer classes or methods that can
 

00:16:50.600 --> 00:16:53.530 align:start position:0%
try to infer classes or methods that can
be<00:16:50.750><c> made</c><00:16:50.930><c> final</c><00:16:52.120><c> even</c><00:16:53.120><c> though</c><00:16:53.240><c> they</c><00:16:53.360><c> aren't</c>

00:16:53.530 --> 00:16:53.540 align:start position:0%
be made final even though they aren't
 

00:16:53.540 --> 00:16:57.400 align:start position:0%
be made final even though they aren't
markets<00:16:54.050><c> final</c><00:16:55.840><c> having</c><00:16:56.840><c> this</c><00:16:57.230><c> information</c>

00:16:57.400 --> 00:16:57.410 align:start position:0%
markets final having this information
 

00:16:57.410 --> 00:17:01.450 align:start position:0%
markets final having this information
internally<00:16:58.600><c> gives</c><00:16:59.600><c> a</c><00:16:59.750><c> lot</c><00:16:59.870><c> of</c><00:16:59.900><c> room</c><00:17:00.530><c> for</c><00:17:01.130><c> the</c>

00:17:01.450 --> 00:17:01.460 align:start position:0%
internally gives a lot of room for the
 

00:17:01.460 --> 00:17:04.030 align:start position:0%
internally gives a lot of room for the
compiler<00:17:01.990><c> for</c><00:17:02.990><c> more</c><00:17:03.170><c> optimizations</c><00:17:03.830><c> for</c>

00:17:04.030 --> 00:17:04.040 align:start position:0%
compiler for more optimizations for
 

00:17:04.040 --> 00:17:09.120 align:start position:0%
compiler for more optimizations for
example<00:17:04.940><c> you</c><00:17:05.690><c> can</c><00:17:05.839><c> do</c><00:17:05.930><c> more</c><00:17:06.080><c> inlining</c><00:17:07.150><c> and</c>

00:17:09.120 --> 00:17:09.130 align:start position:0%
example you can do more inlining and
 

00:17:09.130 --> 00:17:13.090 align:start position:0%
example you can do more inlining and
because<00:17:10.130><c> Java</c><00:17:10.430><c> has</c><00:17:10.550><c> dynamic</c><00:17:10.760><c> clustering</c><00:17:12.100><c> we</c>

00:17:13.090 --> 00:17:13.100 align:start position:0%
because Java has dynamic clustering we
 

00:17:13.100 --> 00:17:14.890 align:start position:0%
because Java has dynamic clustering we
will<00:17:13.250><c> bail</c><00:17:13.520><c> out</c><00:17:13.760><c> of</c><00:17:13.790><c> this</c><00:17:14.000><c> optimizations</c>

00:17:14.890 --> 00:17:14.900 align:start position:0%
will bail out of this optimizations
 

00:17:14.900 --> 00:17:17.470 align:start position:0%
will bail out of this optimizations
if<00:17:15.040><c> sudden</c><00:17:16.040><c> you</c><00:17:16.130><c> would</c><00:17:16.220><c> suddenly</c><00:17:16.610><c> a</c><00:17:16.820><c> new</c><00:17:17.000><c> a</c><00:17:17.240><c> new</c>

00:17:17.470 --> 00:17:17.480 align:start position:0%
if sudden you would suddenly a new a new
 

00:17:17.480 --> 00:17:19.810 align:start position:0%
if sudden you would suddenly a new a new
class<00:17:17.720><c> gets</c><00:17:17.959><c> loaded</c><00:17:18.200><c> and</c><00:17:18.670><c> all</c><00:17:19.670><c> the</c>

00:17:19.810 --> 00:17:19.820 align:start position:0%
class gets loaded and all the
 

00:17:19.820 --> 00:17:22.210 align:start position:0%
class gets loaded and all the
optimizations<00:17:20.000><c> we</c><00:17:20.540><c> did</c><00:17:20.780><c> by</c><00:17:21.350><c> inferring</c><00:17:21.800><c> final</c>

00:17:22.210 --> 00:17:22.220 align:start position:0%
optimizations we did by inferring final
 

00:17:22.220 --> 00:17:29.030 align:start position:0%
optimizations we did by inferring final
classes<00:17:22.550><c> and</c><00:17:22.670><c> methods</c><00:17:22.810><c> become</c><00:17:23.810><c> invalid</c>

00:17:29.030 --> 00:17:29.040 align:start position:0%
 
 

00:17:29.040 --> 00:17:31.350 align:start position:0%
 
so<00:17:30.040><c> this</c><00:17:30.160><c> sums</c><00:17:30.400><c> up</c><00:17:30.490><c> the</c><00:17:30.550><c> optimizations</c><00:17:31.180><c> I</c><00:17:31.270><c> will</c>

00:17:31.350 --> 00:17:31.360 align:start position:0%
so this sums up the optimizations I will
 

00:17:31.360 --> 00:17:34.200 align:start position:0%
so this sums up the optimizations I will
instruct<00:17:31.630><c> you</c><00:17:31.720><c> about</c><00:17:32.490><c> for</c><00:17:33.490><c> the</c><00:17:33.580><c> record</c><00:17:33.940><c> we'll</c>

00:17:34.200 --> 00:17:34.210 align:start position:0%
instruct you about for the record we'll
 

00:17:34.210 --> 00:17:36.570 align:start position:0%
instruct you about for the record we'll
also<00:17:34.330><c> did</c><00:17:34.570><c> a</c><00:17:34.600><c> bunch</c><00:17:34.840><c> of</c><00:17:35.020><c> other</c><00:17:35.590><c> improvements</c>

00:17:36.570 --> 00:17:36.580 align:start position:0%
also did a bunch of other improvements
 

00:17:36.580 --> 00:17:39.960 align:start position:0%
also did a bunch of other improvements
for<00:17:37.360><c> this</c><00:17:37.480><c> release</c><00:17:37.750><c> such</c><00:17:38.680><c> as</c><00:17:38.920><c> faster</c><00:17:39.790><c> type</c>

00:17:39.960 --> 00:17:39.970 align:start position:0%
for this release such as faster type
 

00:17:39.970 --> 00:17:42.660 align:start position:0%
for this release such as faster type
checks<00:17:40.440><c> faster</c><00:17:41.440><c> access</c><00:17:41.620><c> is</c><00:17:41.890><c> pop-out</c><00:17:42.160><c> code</c><00:17:42.400><c> for</c>

00:17:42.660 --> 00:17:42.670 align:start position:0%
checks faster access is pop-out code for
 

00:17:42.670 --> 00:17:46.010 align:start position:0%
checks faster access is pop-out code for
class<00:17:42.910><c> of</c><00:17:43.090><c> strings</c><00:17:43.830><c> faster</c><00:17:44.830><c> gni</c><00:17:45.130><c> transitions</c>

00:17:46.010 --> 00:17:46.020 align:start position:0%
class of strings faster gni transitions
 

00:17:46.020 --> 00:17:49.790 align:start position:0%
class of strings faster gni transitions
more<00:17:47.020><c> compiler</c><00:17:47.440><c> instances</c><00:17:47.890><c> and</c><00:17:48.160><c> a</c><00:17:49.120><c> lot</c><00:17:49.270><c> more</c>

00:17:49.790 --> 00:17:49.800 align:start position:0%
more compiler instances and a lot more
 

00:17:49.800 --> 00:17:53.360 align:start position:0%
more compiler instances and a lot more
well<00:17:50.800><c> did</c><00:17:51.310><c> not</c><00:17:51.340><c> have</c><00:17:51.580><c> the</c><00:17:51.670><c> space</c><00:17:51.760><c> to</c><00:17:51.940><c> list</c><00:17:52.240><c> here</c>

00:17:53.360 --> 00:17:53.370 align:start position:0%
well did not have the space to list here
 

00:17:53.370 --> 00:17:55.620 align:start position:0%
well did not have the space to list here
so<00:17:54.370><c> for</c><00:17:54.520><c> the</c><00:17:54.580><c> interest</c><00:17:54.820><c> of</c><00:17:54.940><c> time</c><00:17:55.120><c> I'm</c><00:17:55.450><c> not</c>

00:17:55.620 --> 00:17:55.630 align:start position:0%
so for the interest of time I'm not
 

00:17:55.630 --> 00:17:57.060 align:start position:0%
so for the interest of time I'm not
going<00:17:55.780><c> to</c><00:17:55.840><c> go</c><00:17:55.900><c> into</c><00:17:56.110><c> details</c><00:17:56.500><c> on</c><00:17:56.890><c> these</c>

00:17:57.060 --> 00:17:57.070 align:start position:0%
going to go into details on these
 

00:17:57.070 --> 00:17:59.910 align:start position:0%
going to go into details on these
optimizations<00:17:58.230><c> instead</c><00:17:59.230><c> I'm</c><00:17:59.440><c> going</c><00:17:59.620><c> to</c><00:17:59.770><c> head</c>

00:17:59.910 --> 00:17:59.920 align:start position:0%
optimizations instead I'm going to head
 

00:17:59.920 --> 00:18:02.430 align:start position:0%
optimizations instead I'm going to head
over<00:18:00.130><c> to</c><00:18:00.160><c> art</c><00:18:00.870><c> we're</c><00:18:01.870><c> going</c><00:18:02.080><c> to</c><00:18:02.170><c> tell</c><00:18:02.320><c> you</c>

00:18:02.430 --> 00:18:02.440 align:start position:0%
over to art we're going to tell you
 

00:18:02.440 --> 00:18:04.890 align:start position:0%
over to art we're going to tell you
about<00:18:02.670><c> the</c><00:18:03.670><c> whole</c><00:18:03.820><c> new</c><00:18:04.060><c> set</c><00:18:04.330><c> of</c><00:18:04.360><c> loop</c>

00:18:04.890 --> 00:18:04.900 align:start position:0%
about the whole new set of loop
 

00:18:04.900 --> 00:18:16.110 align:start position:0%
about the whole new set of loop
optimizations<00:18:12.900><c> Thank</c><00:18:13.900><c> You</c><00:18:14.020><c> Nicholas</c><00:18:14.850><c> so</c><00:18:15.850><c> if</c>

00:18:16.110 --> 00:18:16.120 align:start position:0%
optimizations Thank You Nicholas so if
 

00:18:16.120 --> 00:18:19.200 align:start position:0%
optimizations Thank You Nicholas so if
you<00:18:16.300><c> don't</c><00:18:17.130><c> look</c><00:18:18.130><c> at</c><00:18:18.310><c> virtual</c><00:18:18.790><c> method</c>

00:18:19.200 --> 00:18:19.210 align:start position:0%
you don't look at virtual method
 

00:18:19.210 --> 00:18:21.170 align:start position:0%
you don't look at virtual method
overhead<00:18:19.660><c> or</c><00:18:19.870><c> general</c><00:18:20.260><c> runtime</c><00:18:20.650><c> overhead</c>

00:18:21.170 --> 00:18:21.180 align:start position:0%
overhead or general runtime overhead
 

00:18:21.180 --> 00:18:23.550 align:start position:0%
overhead or general runtime overhead
programs<00:18:22.180><c> tend</c><00:18:22.420><c> to</c><00:18:22.570><c> spend</c><00:18:22.810><c> most</c><00:18:23.020><c> of</c><00:18:23.170><c> the</c><00:18:23.320><c> time</c>

00:18:23.550 --> 00:18:23.560 align:start position:0%
programs tend to spend most of the time
 

00:18:23.560 --> 00:18:27.060 align:start position:0%
programs tend to spend most of the time
in<00:18:23.800><c> loops</c><00:18:24.120><c> so</c><00:18:25.120><c> besides</c><00:18:25.750><c> all</c><00:18:25.930><c> the</c><00:18:26.110><c> good</c><00:18:26.800><c> stuff</c>

00:18:27.060 --> 00:18:27.070 align:start position:0%
in loops so besides all the good stuff
 

00:18:27.070 --> 00:18:28.620 align:start position:0%
in loops so besides all the good stuff
that<00:18:27.280><c> Nicholas</c><00:18:27.550><c> already</c><00:18:27.820><c> talked</c><00:18:28.120><c> about</c><00:18:28.240><c> it</c>

00:18:28.620 --> 00:18:28.630 align:start position:0%
that Nicholas already talked about it
 

00:18:28.630 --> 00:18:31.140 align:start position:0%
that Nicholas already talked about it
can<00:18:28.870><c> really</c><00:18:29.050><c> pay</c><00:18:29.380><c> off</c><00:18:29.410><c> by</c><00:18:29.980><c> optimizing</c><00:18:30.850><c> loops</c>

00:18:31.140 --> 00:18:31.150 align:start position:0%
can really pay off by optimizing loops
 

00:18:31.150 --> 00:18:34.290 align:start position:0%
can really pay off by optimizing loops
specifically<00:18:31.960><c> and</c><00:18:32.230><c> I</c><00:18:33.190><c> will</c><00:18:33.370><c> discuss</c><00:18:34.060><c> some</c><00:18:34.270><c> of</c>

00:18:34.290 --> 00:18:34.300 align:start position:0%
specifically and I will discuss some of
 

00:18:34.300 --> 00:18:37.800 align:start position:0%
specifically and I will discuss some of
these<00:18:34.570><c> in</c><00:18:34.840><c> this</c><00:18:35.020><c> part</c><00:18:36.540><c> optimizations</c><00:18:37.540><c> really</c>

00:18:37.800 --> 00:18:37.810 align:start position:0%
these in this part optimizations really
 

00:18:37.810 --> 00:18:39.990 align:start position:0%
these in this part optimizations really
always<00:18:37.990><c> consist</c><00:18:38.560><c> of</c><00:18:38.680><c> an</c><00:18:38.800><c> analysis</c><00:18:39.490><c> part</c><00:18:39.760><c> where</c>

00:18:39.990 --> 00:18:40.000 align:start position:0%
always consist of an analysis part where
 

00:18:40.000 --> 00:18:41.520 align:start position:0%
always consist of an analysis part where
you<00:18:40.090><c> look</c><00:18:40.240><c> at</c><00:18:40.360><c> the</c><00:18:40.450><c> program</c><00:18:40.900><c> and</c><00:18:41.110><c> an</c>

00:18:41.520 --> 00:18:41.530 align:start position:0%
you look at the program and an
 

00:18:41.530 --> 00:18:43.140 align:start position:0%
you look at the program and an
optimization<00:18:42.250><c> part</c><00:18:42.460><c> where</c><00:18:42.730><c> you</c><00:18:42.820><c> actually</c>

00:18:43.140 --> 00:18:43.150 align:start position:0%
optimization part where you actually
 

00:18:43.150 --> 00:18:45.420 align:start position:0%
optimization part where you actually
perform<00:18:43.300><c> the</c><00:18:43.720><c> transformations</c><00:18:44.620><c> and</c><00:18:44.890><c> you</c><00:18:45.280><c> can</c>

00:18:45.420 --> 00:18:45.430 align:start position:0%
perform the transformations and you can
 

00:18:45.430 --> 00:18:47.430 align:start position:0%
perform the transformations and you can
see<00:18:45.610><c> here</c><00:18:45.910><c> like</c><00:18:46.210><c> a</c><00:18:46.240><c> list</c><00:18:46.600><c> of</c><00:18:46.750><c> all</c><00:18:46.930><c> the</c><00:18:47.080><c> work</c><00:18:47.230><c> we</c>

00:18:47.430 --> 00:18:47.440 align:start position:0%
see here like a list of all the work we
 

00:18:47.440 --> 00:18:50.160 align:start position:0%
see here like a list of all the work we
did<00:18:47.590><c> for</c><00:18:47.620><c> all</c><00:18:47.980><c> but</c><00:18:48.790><c> I'll</c><00:18:48.910><c> only</c><00:18:49.120><c> touch</c><00:18:49.420><c> on</c><00:18:49.660><c> a</c><00:18:49.780><c> few</c>

00:18:50.160 --> 00:18:50.170 align:start position:0%
did for all but I'll only touch on a few
 

00:18:50.170 --> 00:18:54.060 align:start position:0%
did for all but I'll only touch on a few
of<00:18:50.440><c> those</c><00:18:50.590><c> in</c><00:18:50.950><c> the</c><00:18:51.040><c> interest</c><00:18:51.280><c> of</c><00:18:51.370><c> time</c><00:18:53.070><c> but</c>

00:18:54.060 --> 00:18:54.070 align:start position:0%
of those in the interest of time but
 

00:18:54.070 --> 00:18:55.980 align:start position:0%
of those in the interest of time but
before<00:18:54.400><c> I</c><00:18:54.430><c> do</c><00:18:54.580><c> that</c><00:18:54.700><c> let's</c><00:18:55.360><c> first</c><00:18:55.600><c> look</c><00:18:55.810><c> at</c>

00:18:55.980 --> 00:18:55.990 align:start position:0%
before I do that let's first look at
 

00:18:55.990 --> 00:18:57.780 align:start position:0%
before I do that let's first look at
what<00:18:56.050><c> loop</c><00:18:56.380><c> optimizations</c><00:18:57.070><c> can</c><00:18:57.280><c> do</c><00:18:57.430><c> for</c><00:18:57.670><c> you</c>

00:18:57.780 --> 00:18:57.790 align:start position:0%
what loop optimizations can do for you
 

00:18:57.790 --> 00:19:00.380 align:start position:0%
what loop optimizations can do for you
so<00:18:58.690><c> here</c><00:18:58.930><c> you</c><00:18:59.050><c> see</c><00:18:59.080><c> a</c><00:18:59.320><c> graph</c><00:18:59.710><c> that</c><00:18:59.770><c> quotes</c>

00:19:00.380 --> 00:19:00.390 align:start position:0%
so here you see a graph that quotes
 

00:19:00.390 --> 00:19:02.610 align:start position:0%
so here you see a graph that quotes
Android<00:19:01.390><c> all</c><00:19:01.630><c> versus</c><00:19:02.080><c> Android</c><00:19:02.350><c> end</c>

00:19:02.610 --> 00:19:02.620 align:start position:0%
Android all versus Android end
 

00:19:02.620 --> 00:19:05.070 align:start position:0%
Android all versus Android end
performance<00:19:02.980><c> so</c><00:19:03.400><c> higher</c><00:19:03.640><c> is</c><00:19:03.910><c> better</c><00:19:04.150><c> and</c><00:19:04.510><c> the</c>

00:19:05.070 --> 00:19:05.080 align:start position:0%
performance so higher is better and the
 

00:19:05.080 --> 00:19:07.050 align:start position:0%
performance so higher is better and the
color<00:19:05.320><c> encoding</c><00:19:05.710><c> shows</c><00:19:06.160><c> you</c><00:19:06.340><c> specifically</c>

00:19:07.050 --> 00:19:07.060 align:start position:0%
color encoding shows you specifically
 

00:19:07.060 --> 00:19:10.560 align:start position:0%
color encoding shows you specifically
where<00:19:07.980><c> loop</c><00:19:08.980><c> optimizations</c><00:19:09.730><c> in</c><00:19:09.940><c> general</c><00:19:10.360><c> the</c>

00:19:10.560 --> 00:19:10.570 align:start position:0%
where loop optimizations in general the
 

00:19:10.570 --> 00:19:13.110 align:start position:0%
where loop optimizations in general the
blue<00:19:10.750><c> stuff</c><00:19:11.050><c> has</c><00:19:11.380><c> helped</c><00:19:11.830><c> and</c><00:19:12.040><c> the</c><00:19:12.670><c> red</c><00:19:12.850><c> stuff</c>

00:19:13.110 --> 00:19:13.120 align:start position:0%
blue stuff has helped and the red stuff
 

00:19:13.120 --> 00:19:14.940 align:start position:0%
blue stuff has helped and the red stuff
where<00:19:13.450><c> factorization</c><00:19:14.440><c> which</c><00:19:14.590><c> I'll</c><00:19:14.770><c> talk</c>

00:19:14.940 --> 00:19:14.950 align:start position:0%
where factorization which I'll talk
 

00:19:14.950 --> 00:19:17.370 align:start position:0%
where factorization which I'll talk
about<00:19:15.220><c> briefly</c><00:19:15.460><c> has</c><00:19:15.940><c> helped</c><00:19:16.390><c> and</c><00:19:17.050><c> you</c><00:19:17.140><c> see</c>

00:19:17.370 --> 00:19:17.380 align:start position:0%
about briefly has helped and you see
 

00:19:17.380 --> 00:19:19.710 align:start position:0%
about briefly has helped and you see
that<00:19:17.650><c> benchmarks</c><00:19:18.280><c> on</c><00:19:18.430><c> the</c><00:19:18.550><c> left</c><00:19:18.970><c> like</c><00:19:19.450><c> loop</c>

00:19:19.710 --> 00:19:19.720 align:start position:0%
that benchmarks on the left like loop
 

00:19:19.720 --> 00:19:22.350 align:start position:0%
that benchmarks on the left like loop
and<00:19:19.930><c> some</c><00:19:20.200><c> really</c><00:19:20.920><c> get</c><00:19:21.220><c> unrealistic</c><00:19:21.940><c> highs</c>

00:19:22.350 --> 00:19:22.360 align:start position:0%
and some really get unrealistic highs
 

00:19:22.360 --> 00:19:25.050 align:start position:0%
and some really get unrealistic highs
speed<00:19:23.020><c> ups</c><00:19:23.230><c> and</c><00:19:23.530><c> it</c><00:19:24.010><c> is</c><00:19:24.160><c> really</c><00:19:24.490><c> as</c><00:19:24.610><c> a</c><00:19:24.670><c> result</c>

00:19:25.050 --> 00:19:25.060 align:start position:0%
speed ups and it is really as a result
 

00:19:25.060 --> 00:19:27.330 align:start position:0%
speed ups and it is really as a result
of<00:19:25.180><c> that</c><00:19:25.330><c> we</c><00:19:25.510><c> broke</c><00:19:25.840><c> the</c><00:19:26.080><c> benchmark</c><00:19:26.680><c> so</c><00:19:27.190><c> we</c>

00:19:27.330 --> 00:19:27.340 align:start position:0%
of that we broke the benchmark so we
 

00:19:27.340 --> 00:19:29.010 align:start position:0%
of that we broke the benchmark so we
were<00:19:27.460><c> able</c><00:19:27.820><c> to</c><00:19:27.850><c> transform</c><00:19:28.390><c> loops</c><00:19:28.720><c> into</c>

00:19:29.010 --> 00:19:29.020 align:start position:0%
were able to transform loops into
 

00:19:29.020 --> 00:19:30.990 align:start position:0%
were able to transform loops into
closed-form<00:19:29.590><c> expressions</c><00:19:30.340><c> that</c><00:19:30.520><c> execute</c>

00:19:30.990 --> 00:19:31.000 align:start position:0%
closed-form expressions that execute
 

00:19:31.000 --> 00:19:33.540 align:start position:0%
closed-form expressions that execute
really<00:19:31.360><c> fast</c><00:19:31.630><c> and</c><00:19:31.960><c> although</c><00:19:32.890><c> that's</c><00:19:33.160><c> always</c>

00:19:33.540 --> 00:19:33.550 align:start position:0%
really fast and although that's always
 

00:19:33.550 --> 00:19:35.220 align:start position:0%
really fast and although that's always
nice<00:19:34.030><c> to</c><00:19:34.270><c> have</c><00:19:34.450><c> the</c><00:19:34.660><c> ability</c><00:19:34.810><c> in</c><00:19:35.200><c> your</c>

00:19:35.220 --> 00:19:35.230 align:start position:0%
nice to have the ability in your
 

00:19:35.230 --> 00:19:38.070 align:start position:0%
nice to have the ability in your
compiler<00:19:35.710><c> it's</c><00:19:36.070><c> not</c><00:19:36.460><c> very</c><00:19:36.670><c> realistic</c><00:19:37.360><c> but</c><00:19:37.900><c> as</c>

00:19:38.070 --> 00:19:38.080 align:start position:0%
compiler it's not very realistic but as
 

00:19:38.080 --> 00:19:40.350 align:start position:0%
compiler it's not very realistic but as
you<00:19:38.230><c> go</c><00:19:38.410><c> to</c><00:19:38.470><c> the</c><00:19:38.650><c> right</c><00:19:38.950><c> of</c><00:19:39.250><c> the</c><00:19:39.370><c> graph</c><00:19:39.550><c> you</c><00:19:39.910><c> see</c>

00:19:40.350 --> 00:19:40.360 align:start position:0%
you go to the right of the graph you see
 

00:19:40.360 --> 00:19:42.200 align:start position:0%
you go to the right of the graph you see
more<00:19:40.570><c> realistic</c><00:19:41.170><c> speed</c><00:19:41.440><c> ups</c>

00:19:42.200 --> 00:19:42.210 align:start position:0%
more realistic speed ups
 

00:19:42.210 --> 00:19:45.160 align:start position:0%
more realistic speed ups
like<00:19:42.510><c> LUN</c><00:19:43.350><c> Linpack</c><00:19:43.830><c> obtained</c><00:19:44.370><c> like</c><00:19:44.550><c> 10%</c>

00:19:45.160 --> 00:19:45.170 align:start position:0%
like LUN Linpack obtained like 10%
 

00:19:45.170 --> 00:19:51.620 align:start position:0%
like LUN Linpack obtained like 10%
improvements<00:19:46.170><c> by</c><00:19:46.520><c> factorizations</c><00:19:50.630><c> so</c>

00:19:51.620 --> 00:19:51.630 align:start position:0%
improvements by factorizations so
 

00:19:51.630 --> 00:19:53.900 align:start position:0%
improvements by factorizations so
central<00:19:52.200><c> to</c><00:19:52.230><c> all</c><00:19:52.650><c> loop</c><00:19:52.980><c> optimizations</c>

00:19:53.900 --> 00:19:53.910 align:start position:0%
central to all loop optimizations
 

00:19:53.910 --> 00:19:55.490 align:start position:0%
central to all loop optimizations
is<00:19:53.970><c> always</c><00:19:54.510><c> induction</c><00:19:55.110><c> variable</c>

00:19:55.490 --> 00:19:55.500 align:start position:0%
is always induction variable
 

00:19:55.500 --> 00:19:57.590 align:start position:0%
is always induction variable
recognitions<00:19:56.190><c> and</c><00:19:56.790><c> that</c><00:19:56.970><c> consists</c><00:19:57.420><c> of</c>

00:19:57.590 --> 00:19:57.600 align:start position:0%
recognitions and that consists of
 

00:19:57.600 --> 00:20:00.440 align:start position:0%
recognitions and that consists of
finding<00:19:58.410><c> expressions</c><00:19:59.220><c> that</c><00:19:59.430><c> progress</c><00:20:00.060><c> in</c><00:20:00.360><c> a</c>

00:20:00.440 --> 00:20:00.450 align:start position:0%
finding expressions that progress in a
 

00:20:00.450 --> 00:20:02.750 align:start position:0%
finding expressions that progress in a
regular<00:20:00.840><c> and</c><00:20:00.870><c> predictable</c><00:20:01.230><c> way</c><00:20:01.680><c> in</c><00:20:02.190><c> your</c><00:20:02.430><c> loop</c>

00:20:02.750 --> 00:20:02.760 align:start position:0%
regular and predictable way in your loop
 

00:20:02.760 --> 00:20:05.720 align:start position:0%
regular and predictable way in your loop
and<00:20:03.030><c> the</c><00:20:03.930><c> most</c><00:20:04.140><c> common</c><00:20:04.620><c> example</c><00:20:05.100><c> is</c><00:20:05.190><c> a</c><00:20:05.250><c> linear</c>

00:20:05.720 --> 00:20:05.730 align:start position:0%
and the most common example is a linear
 

00:20:05.730 --> 00:20:08.660 align:start position:0%
and the most common example is a linear
induction<00:20:06.060><c> so</c><00:20:07.020><c> here</c><00:20:07.320><c> in</c><00:20:07.440><c> this</c><00:20:07.560><c> example</c><00:20:07.950><c> the</c>

00:20:08.660 --> 00:20:08.670 align:start position:0%
induction so here in this example the
 

00:20:08.670 --> 00:20:10.520 align:start position:0%
induction so here in this example the
basic<00:20:09.060><c> loop</c><00:20:09.210><c> counter</c><00:20:09.660><c> I</c><00:20:09.690><c> is</c><00:20:09.930><c> a</c><00:20:10.110><c> linear</c>

00:20:10.520 --> 00:20:10.530 align:start position:0%
basic loop counter I is a linear
 

00:20:10.530 --> 00:20:12.890 align:start position:0%
basic loop counter I is a linear
induction<00:20:10.830><c> but</c><00:20:11.580><c> also</c><00:20:11.760><c> the</c><00:20:12.090><c> expression</c><00:20:12.330><c> J</c>

00:20:12.890 --> 00:20:12.900 align:start position:0%
induction but also the expression J
 

00:20:12.900 --> 00:20:14.630 align:start position:0%
induction but also the expression J
shown<00:20:13.320><c> in</c><00:20:13.560><c> blue</c><00:20:13.770><c> is</c><00:20:13.980><c> a</c><00:20:14.010><c> linear</c><00:20:14.400><c> induction</c>

00:20:14.630 --> 00:20:14.640 align:start position:0%
shown in blue is a linear induction
 

00:20:14.640 --> 00:20:17.240 align:start position:0%
shown in blue is a linear induction
every<00:20:15.600><c> time</c><00:20:15.840><c> around</c><00:20:16.170><c> the</c><00:20:16.410><c> iteration</c><00:20:17.010><c> its</c>

00:20:17.240 --> 00:20:17.250 align:start position:0%
every time around the iteration its
 

00:20:17.250 --> 00:20:21.280 align:start position:0%
every time around the iteration its
increments<00:20:18.090><c> by</c><00:20:18.630><c> a</c><00:20:18.660><c> loop</c><00:20:19.620><c> invariant</c><00:20:19.880><c> constants</c>

00:20:21.280 --> 00:20:21.290 align:start position:0%
increments by a loop invariant constants
 

00:20:21.290 --> 00:20:24.260 align:start position:0%
increments by a loop invariant constants
there's<00:20:22.290><c> many</c><00:20:22.500><c> more</c><00:20:22.790><c> induction</c><00:20:23.790><c> variables</c>

00:20:24.260 --> 00:20:24.270 align:start position:0%
there's many more induction variables
 

00:20:24.270 --> 00:20:26.510 align:start position:0%
there's many more induction variables
and<00:20:24.510><c> you</c><00:20:24.600><c> see</c><00:20:24.840><c> some</c><00:20:25.500><c> of</c><00:20:25.650><c> them</c><00:20:25.830><c> depicted</c><00:20:26.370><c> here</c>

00:20:26.510 --> 00:20:26.520 align:start position:0%
and you see some of them depicted here
 

00:20:26.520 --> 00:20:28.700 align:start position:0%
and you see some of them depicted here
on<00:20:26.670><c> the</c><00:20:26.790><c> graph</c><00:20:27.000><c> and</c><00:20:27.300><c> detecting</c><00:20:28.110><c> as</c><00:20:28.230><c> many</c><00:20:28.530><c> of</c>

00:20:28.700 --> 00:20:28.710 align:start position:0%
on the graph and detecting as many of
 

00:20:28.710 --> 00:20:31.310 align:start position:0%
on the graph and detecting as many of
them<00:20:28.920><c> as</c><00:20:28.950><c> possible</c><00:20:29.610><c> is</c><00:20:29.820><c> always</c><00:20:30.450><c> good</c><00:20:30.750><c> for</c><00:20:31.260><c> the</c>

00:20:31.310 --> 00:20:31.320 align:start position:0%
them as possible is always good for the
 

00:20:31.320 --> 00:20:36.110 align:start position:0%
them as possible is always good for the
next<00:20:31.650><c> phase</c><00:20:31.830><c> the</c><00:20:32.160><c> actual</c><00:20:32.490><c> optimizations</c><00:20:35.120><c> so</c>

00:20:36.110 --> 00:20:36.120 align:start position:0%
next phase the actual optimizations so
 

00:20:36.120 --> 00:20:38.390 align:start position:0%
next phase the actual optimizations so
let's<00:20:36.420><c> look</c><00:20:36.690><c> at</c><00:20:36.840><c> what</c><00:20:37.020><c> loop</c><00:20:37.440><c> optimizations</c>

00:20:38.390 --> 00:20:38.400 align:start position:0%
let's look at what loop optimizations
 

00:20:38.400 --> 00:20:41.810 align:start position:0%
let's look at what loop optimizations
can<00:20:38.610><c> benefit</c><00:20:39.270><c> from</c><00:20:39.500><c> induction</c><00:20:40.500><c> variables</c><00:20:41.100><c> so</c>

00:20:41.810 --> 00:20:41.820 align:start position:0%
can benefit from induction variables so
 

00:20:41.820 --> 00:20:43.970 align:start position:0%
can benefit from induction variables so
here<00:20:42.150><c> you</c><00:20:42.300><c> see</c><00:20:42.330><c> a</c><00:20:42.720><c> somewhat</c><00:20:43.350><c> synthetic</c>

00:20:43.970 --> 00:20:43.980 align:start position:0%
here you see a somewhat synthetic
 

00:20:43.980 --> 00:20:46.880 align:start position:0%
here you see a somewhat synthetic
example<00:20:44.790><c> where</c><00:20:45.480><c> the</c><00:20:45.870><c> compiler</c><00:20:46.200><c> can</c><00:20:46.500><c> easily</c>

00:20:46.880 --> 00:20:46.890 align:start position:0%
example where the compiler can easily
 

00:20:46.890 --> 00:20:48.950 align:start position:0%
example where the compiler can easily
see<00:20:47.100><c> that</c><00:20:47.280><c> in</c><00:20:47.430><c> the</c><00:20:47.550><c> innermost</c><00:20:47.850><c> loop</c><00:20:48.270><c> the</c>

00:20:48.950 --> 00:20:48.960 align:start position:0%
see that in the innermost loop the
 

00:20:48.960 --> 00:20:51.170 align:start position:0%
see that in the innermost loop the
increment<00:20:49.470><c> to</c><00:20:49.560><c> sum</c><00:20:49.950><c> actually</c><00:20:50.850><c> is</c><00:20:50.940><c> very</c>

00:20:51.170 --> 00:20:51.180 align:start position:0%
increment to sum actually is very
 

00:20:51.180 --> 00:20:53.930 align:start position:0%
increment to sum actually is very
predictable<00:20:51.930><c> since</c><00:20:52.440><c> the</c><00:20:52.560><c> loop</c><00:20:52.710><c> only</c><00:20:52.980><c> iterates</c>

00:20:53.930 --> 00:20:53.940 align:start position:0%
predictable since the loop only iterates
 

00:20:53.940 --> 00:20:56.410 align:start position:0%
predictable since the loop only iterates
hundred<00:20:54.270><c> times</c><00:20:54.540><c> it</c><00:20:54.810><c> can</c><00:20:55.290><c> actually</c><00:20:55.440><c> replace</c>

00:20:56.410 --> 00:20:56.420 align:start position:0%
hundred times it can actually replace
 

00:20:56.420 --> 00:20:59.870 align:start position:0%
hundred times it can actually replace
the<00:20:57.420><c> sum</c><00:20:57.690><c> hoisted</c><00:20:58.350><c> out</c><00:20:58.500><c> with</c><00:20:59.190><c> a</c><00:20:59.220><c> closed</c><00:20:59.550><c> form</c>

00:20:59.870 --> 00:20:59.880 align:start position:0%
the sum hoisted out with a closed form
 

00:20:59.880 --> 00:21:02.150 align:start position:0%
the sum hoisted out with a closed form
expression<00:21:00.000><c> that</c><00:21:00.900><c> just</c><00:21:01.170><c> adds</c><00:21:01.470><c> hundreds</c><00:21:01.980><c> at</c><00:21:02.130><c> a</c>

00:21:02.150 --> 00:21:02.160 align:start position:0%
expression that just adds hundreds at a
 

00:21:02.160 --> 00:21:02.860 align:start position:0%
expression that just adds hundreds at a
time

00:21:02.860 --> 00:21:02.870 align:start position:0%
time
 

00:21:02.870 --> 00:21:05.210 align:start position:0%
time
after<00:21:03.870><c> you've</c><00:21:03.990><c> done</c><00:21:04.230><c> that</c><00:21:04.470><c> you</c><00:21:04.920><c> can</c><00:21:04.950><c> actually</c>

00:21:05.210 --> 00:21:05.220 align:start position:0%
after you've done that you can actually
 

00:21:05.220 --> 00:21:07.220 align:start position:0%
after you've done that you can actually
hoist<00:21:05.520><c> it</c><00:21:05.760><c> again</c><00:21:06.030><c> out</c><00:21:06.270><c> of</c><00:21:06.510><c> the</c><00:21:06.630><c> next</c><00:21:06.900><c> loop</c><00:21:07.080><c> if</c>

00:21:07.220 --> 00:21:07.230 align:start position:0%
hoist it again out of the next loop if
 

00:21:07.230 --> 00:21:09.620 align:start position:0%
hoist it again out of the next loop if
you<00:21:07.800><c> take</c><00:21:08.040><c> a</c><00:21:08.070><c> little</c><00:21:08.400><c> bit</c><00:21:08.520><c> care</c><00:21:08.790><c> of</c><00:21:08.940><c> the</c><00:21:09.420><c> fact</c>

00:21:09.620 --> 00:21:09.630 align:start position:0%
you take a little bit care of the fact
 

00:21:09.630 --> 00:21:11.300 align:start position:0%
you take a little bit care of the fact
that<00:21:09.720><c> the</c><00:21:09.900><c> loop</c><00:21:10.050><c> may</c><00:21:10.230><c> not</c><00:21:10.380><c> be</c><00:21:10.530><c> taken</c><00:21:10.950><c> when</c><00:21:11.130><c> n</c><00:21:11.280><c> is</c>

00:21:11.300 --> 00:21:11.310 align:start position:0%
that the loop may not be taken when n is
 

00:21:11.310 --> 00:21:13.910 align:start position:0%
that the loop may not be taken when n is
negative<00:21:11.970><c> so</c><00:21:12.900><c> after</c><00:21:13.380><c> that</c><00:21:13.530><c> the</c><00:21:13.740><c> whole</c>

00:21:13.910 --> 00:21:13.920 align:start position:0%
negative so after that the whole
 

00:21:13.920 --> 00:21:15.770 align:start position:0%
negative so after that the whole
computation<00:21:14.580><c> has</c><00:21:14.760><c> been</c><00:21:14.910><c> hoisted</c><00:21:15.270><c> out</c><00:21:15.420><c> of</c><00:21:15.660><c> the</c>

00:21:15.770 --> 00:21:15.780 align:start position:0%
computation has been hoisted out of the
 

00:21:15.780 --> 00:21:17.720 align:start position:0%
computation has been hoisted out of the
loop<00:21:15.960><c> and</c><00:21:16.110><c> the</c><00:21:16.650><c> whole</c><00:21:16.830><c> double</c><00:21:17.220><c> loop</c><00:21:17.370><c> can</c><00:21:17.610><c> be</c>

00:21:17.720 --> 00:21:17.730 align:start position:0%
loop and the whole double loop can be
 

00:21:17.730 --> 00:21:20.600 align:start position:0%
loop and the whole double loop can be
eliminated<00:21:18.110><c> so</c><00:21:19.110><c> in</c><00:21:19.260><c> this</c><00:21:19.410><c> case</c><00:21:19.740><c> the</c><00:21:20.430><c> whole</c>

00:21:20.600 --> 00:21:20.610 align:start position:0%
eliminated so in this case the whole
 

00:21:20.610 --> 00:21:22.940 align:start position:0%
eliminated so in this case the whole
loop<00:21:20.880><c> is</c><00:21:21.120><c> replaced</c><00:21:21.690><c> by</c><00:21:21.810><c> closed</c><00:21:22.260><c> form</c><00:21:22.680><c> and</c>

00:21:22.940 --> 00:21:22.950 align:start position:0%
loop is replaced by closed form and
 

00:21:22.950 --> 00:21:24.830 align:start position:0%
loop is replaced by closed form and
that's<00:21:23.220><c> one</c><00:21:23.460><c> of</c><00:21:23.610><c> the</c><00:21:23.760><c> examples</c><00:21:23.820><c> that</c><00:21:24.480><c> I</c><00:21:24.540><c> showed</c>

00:21:24.830 --> 00:21:24.840 align:start position:0%
that's one of the examples that I showed
 

00:21:24.840 --> 00:21:26.240 align:start position:0%
that's one of the examples that I showed
in<00:21:24.870><c> the</c><00:21:25.080><c> beginning</c><00:21:25.170><c> very</c><00:21:25.740><c> broke</c><00:21:26.040><c> the</c>

00:21:26.240 --> 00:21:26.250 align:start position:0%
in the beginning very broke the
 

00:21:26.250 --> 00:21:30.170 align:start position:0%
in the beginning very broke the
benchmark<00:21:27.470><c> obviously</c><00:21:28.640><c> your</c><00:21:29.640><c> code</c><00:21:29.940><c> you'll</c>

00:21:30.170 --> 00:21:30.180 align:start position:0%
benchmark obviously your code you'll
 

00:21:30.180 --> 00:21:32.210 align:start position:0%
benchmark obviously your code you'll
probably<00:21:30.600><c> not</c><00:21:30.780><c> benefit</c><00:21:31.290><c> this</c><00:21:31.500><c> greatly</c><00:21:31.800><c> from</c>

00:21:32.210 --> 00:21:32.220 align:start position:0%
probably not benefit this greatly from
 

00:21:32.220 --> 00:21:34.340 align:start position:0%
probably not benefit this greatly from
optimizations<00:21:33.180><c> but</c><00:21:33.600><c> having</c><00:21:33.930><c> this</c><00:21:34.020><c> ability</c>

00:21:34.340 --> 00:21:34.350 align:start position:0%
optimizations but having this ability
 

00:21:34.350 --> 00:21:38.360 align:start position:0%
optimizations but having this ability
can<00:21:34.830><c> really</c><00:21:35.670><c> kick</c><00:21:36.480><c> in</c><00:21:36.750><c> like</c><00:21:37.290><c> after</c><00:21:37.860><c> you</c><00:21:37.950><c> inline</c>

00:21:38.360 --> 00:21:38.370 align:start position:0%
can really kick in like after you inline
 

00:21:38.370 --> 00:21:41.540 align:start position:0%
can really kick in like after you inline
library<00:21:38.910><c> code</c><00:21:39.260><c> not</c><00:21:40.260><c> to</c><00:21:40.410><c> the</c><00:21:40.530><c> same</c><00:21:40.710><c> degree</c><00:21:40.770><c> but</c>

00:21:41.540 --> 00:21:41.550 align:start position:0%
library code not to the same degree but
 

00:21:41.550 --> 00:21:44.090 align:start position:0%
library code not to the same degree but
still<00:21:42.000><c> nice</c><00:21:42.240><c> to</c><00:21:42.270><c> be</c><00:21:42.600><c> able</c><00:21:42.750><c> to</c><00:21:42.930><c> to</c><00:21:43.440><c> optimize</c>

00:21:44.090 --> 00:21:44.100 align:start position:0%
still nice to be able to to optimize
 

00:21:44.100 --> 00:21:48.790 align:start position:0%
still nice to be able to to optimize
your<00:21:44.280><c> induction</c><00:21:44.580><c> variables</c>

00:21:48.790 --> 00:21:48.800 align:start position:0%
 
 

00:21:48.800 --> 00:21:50.890 align:start position:0%
 
another<00:21:49.520><c> example</c><00:21:49.700><c> where</c><00:21:50.420><c> induction</c>

00:21:50.890 --> 00:21:50.900 align:start position:0%
another example where induction
 

00:21:50.900 --> 00:21:52.660 align:start position:0%
another example where induction
variables<00:21:51.290><c> can</c><00:21:51.440><c> help</c><00:21:51.680><c> you</c><00:21:51.860><c> is</c><00:21:52.070><c> it</c><00:21:52.430><c> bounced</c>

00:21:52.660 --> 00:21:52.670 align:start position:0%
variables can help you is it bounced
 

00:21:52.670 --> 00:21:55.270 align:start position:0%
variables can help you is it bounced
check<00:21:52.970><c> eliminations</c><00:21:53.720><c> so</c><00:21:54.410><c> when</c><00:21:54.620><c> you</c><00:21:54.740><c> access</c><00:21:55.130><c> an</c>

00:21:55.270 --> 00:21:55.280 align:start position:0%
check eliminations so when you access an
 

00:21:55.280 --> 00:21:57.490 align:start position:0%
check eliminations so when you access an
array<00:21:55.550><c> you</c><00:21:56.150><c> always</c><00:21:56.510><c> need</c><00:21:56.720><c> to</c><00:21:56.750><c> test</c><00:21:57.110><c> to</c><00:21:57.320><c> see</c>

00:21:57.490 --> 00:21:57.500 align:start position:0%
array you always need to test to see
 

00:21:57.500 --> 00:21:59.110 align:start position:0%
array you always need to test to see
whether<00:21:57.680><c> the</c><00:21:57.890><c> subscripts</c><00:21:58.370><c> can</c><00:21:58.580><c> go</c><00:21:58.730><c> out</c><00:21:58.910><c> of</c>

00:21:59.110 --> 00:21:59.120 align:start position:0%
whether the subscripts can go out of
 

00:21:59.120 --> 00:22:00.520 align:start position:0%
whether the subscripts can go out of
bounds<00:21:59.270><c> and</c><00:21:59.630><c> if</c><00:21:59.690><c> they</c><00:21:59.840><c> do</c><00:21:59.900><c> you</c><00:22:00.020><c> throw</c><00:22:00.380><c> an</c>

00:22:00.520 --> 00:22:00.530 align:start position:0%
bounds and if they do you throw an
 

00:22:00.530 --> 00:22:02.980 align:start position:0%
bounds and if they do you throw an
exception<00:22:00.700><c> but</c><00:22:01.700><c> if</c><00:22:01.880><c> you</c><00:22:02.030><c> know</c><00:22:02.270><c> the</c><00:22:02.630><c> exact</c>

00:22:02.980 --> 00:22:02.990 align:start position:0%
exception but if you know the exact
 

00:22:02.990 --> 00:22:04.660 align:start position:0%
exception but if you know the exact
range<00:22:03.230><c> that</c><00:22:03.530><c> induction</c><00:22:03.800><c> variables</c><00:22:04.310><c> will</c><00:22:04.460><c> take</c>

00:22:04.660 --> 00:22:04.670 align:start position:0%
range that induction variables will take
 

00:22:04.670 --> 00:22:07.510 align:start position:0%
range that induction variables will take
you<00:22:05.210><c> can</c><00:22:05.360><c> often</c><00:22:05.690><c> eliminate</c><00:22:06.200><c> those</c><00:22:06.530><c> tests</c>

00:22:07.510 --> 00:22:07.520 align:start position:0%
you can often eliminate those tests
 

00:22:07.520 --> 00:22:09.520 align:start position:0%
you can often eliminate those tests
completely<00:22:08.210><c> so</c><00:22:08.720><c> here</c><00:22:08.930><c> you</c><00:22:09.050><c> seen</c><00:22:09.290><c> an</c><00:22:09.410><c> example</c>

00:22:09.520 --> 00:22:09.530 align:start position:0%
completely so here you seen an example
 

00:22:09.530 --> 00:22:13.330 align:start position:0%
completely so here you seen an example
that<00:22:10.010><c> both</c><00:22:10.250><c> the</c><00:22:10.520><c> XS</c><00:22:10.850><c> -</c><00:22:11.000><c> a</c><00:22:11.030><c> and</c><00:22:11.420><c> B</c><00:22:11.920><c> will</c><00:22:12.920><c> never</c><00:22:13.160><c> go</c>

00:22:13.330 --> 00:22:13.340 align:start position:0%
that both the XS - a and B will never go
 

00:22:13.340 --> 00:22:15.340 align:start position:0%
that both the XS - a and B will never go
out<00:22:13.370><c> of</c><00:22:13.700><c> bounds</c><00:22:13.850><c> so</c><00:22:14.570><c> the</c><00:22:14.720><c> compiler</c><00:22:15.020><c> can</c>

00:22:15.340 --> 00:22:15.350 align:start position:0%
out of bounds so the compiler can
 

00:22:15.350 --> 00:22:17.560 align:start position:0%
out of bounds so the compiler can
statically<00:22:15.650><c> remove</c><00:22:16.280><c> those</c><00:22:16.520><c> tests</c><00:22:16.880><c> and</c><00:22:17.150><c> the</c>

00:22:17.560 --> 00:22:17.570 align:start position:0%
statically remove those tests and the
 

00:22:17.570 --> 00:22:19.750 align:start position:0%
statically remove those tests and the
program<00:22:17.990><c> as</c><00:22:18.140><c> a</c><00:22:18.170><c> result</c><00:22:18.590><c> will</c><00:22:18.830><c> execute</c><00:22:19.160><c> a</c><00:22:19.550><c> lot</c>

00:22:19.750 --> 00:22:19.760 align:start position:0%
program as a result will execute a lot
 

00:22:19.760 --> 00:22:26.740 align:start position:0%
program as a result will execute a lot
faster<00:22:24.160><c> induction</c><00:22:25.160><c> variables</c><00:22:25.550><c> also</c><00:22:25.850><c> tell</c><00:22:26.090><c> how</c>

00:22:26.740 --> 00:22:26.750 align:start position:0%
faster induction variables also tell how
 

00:22:26.750 --> 00:22:29.620 align:start position:0%
faster induction variables also tell how
often<00:22:27.200><c> looks</c><00:22:27.470><c> iterate</c><00:22:28.010><c> so</c><00:22:28.400><c> if</c><00:22:29.180><c> you</c><00:22:29.330><c> know</c><00:22:29.450><c> that</c>

00:22:29.620 --> 00:22:29.630 align:start position:0%
often looks iterate so if you know that
 

00:22:29.630 --> 00:22:31.720 align:start position:0%
often looks iterate so if you know that
it's<00:22:29.900><c> only</c><00:22:30.020><c> a</c><00:22:30.200><c> few</c><00:22:30.320><c> times</c><00:22:30.920><c> you</c><00:22:31.460><c> can</c><00:22:31.580><c> actually</c>

00:22:31.720 --> 00:22:31.730 align:start position:0%
it's only a few times you can actually
 

00:22:31.730 --> 00:22:35.110 align:start position:0%
it's only a few times you can actually
completely<00:22:32.360><c> unroll</c><00:22:32.960><c> the</c><00:22:33.170><c> loop</c><00:22:33.200><c> and</c><00:22:34.120><c> the</c>

00:22:35.110 --> 00:22:35.120 align:start position:0%
completely unroll the loop and the
 

00:22:35.120 --> 00:22:36.520 align:start position:0%
completely unroll the loop and the
advantage<00:22:35.540><c> of</c><00:22:35.660><c> enrolling</c><00:22:36.020><c> is</c><00:22:36.260><c> that</c><00:22:36.410><c> you</c>

00:22:36.520 --> 00:22:36.530 align:start position:0%
advantage of enrolling is that you
 

00:22:36.530 --> 00:22:38.230 align:start position:0%
advantage of enrolling is that you
completely<00:22:36.980><c> removed</c><00:22:37.520><c> the</c><00:22:37.700><c> loop</c><00:22:37.850><c> control</c>

00:22:38.230 --> 00:22:38.240 align:start position:0%
completely removed the loop control
 

00:22:38.240 --> 00:22:40.480 align:start position:0%
completely removed the loop control
overhead<00:22:38.780><c> it</c><00:22:39.020><c> reduces</c><00:22:39.800><c> the</c><00:22:40.010><c> code</c><00:22:40.220><c> size</c>

00:22:40.480 --> 00:22:40.490 align:start position:0%
overhead it reduces the code size
 

00:22:40.490 --> 00:22:42.850 align:start position:0%
overhead it reduces the code size
because<00:22:40.880><c> you</c><00:22:41.000><c> don't</c><00:22:41.210><c> have</c><00:22:41.390><c> to</c><00:22:41.570><c> control</c><00:22:41.870><c> to</c>

00:22:42.850 --> 00:22:42.860 align:start position:0%
because you don't have to control to
 

00:22:42.860 --> 00:22:45.790 align:start position:0%
because you don't have to control to
iterate<00:22:43.340><c> and</c><00:22:43.640><c> it</c><00:22:44.450><c> often</c><00:22:44.930><c> enables</c><00:22:45.350><c> like</c>

00:22:45.790 --> 00:22:45.800 align:start position:0%
iterate and it often enables like
 

00:22:45.800 --> 00:22:47.800 align:start position:0%
iterate and it often enables like
constant<00:22:46.280><c> folding</c><00:22:46.490><c> so</c><00:22:47.210><c> you</c><00:22:47.270><c> see</c><00:22:47.570><c> an</c><00:22:47.690><c> example</c>

00:22:47.800 --> 00:22:47.810 align:start position:0%
constant folding so you see an example
 

00:22:47.810 --> 00:22:50.050 align:start position:0%
constant folding so you see an example
here<00:22:48.410><c> where</c><00:22:48.740><c> the</c><00:22:48.920><c> blue</c><00:22:49.100><c> part</c><00:22:49.370><c> shows</c><00:22:49.670><c> that</c><00:22:49.910><c> the</c>

00:22:50.050 --> 00:22:50.060 align:start position:0%
here where the blue part shows that the
 

00:22:50.060 --> 00:22:52.120 align:start position:0%
here where the blue part shows that the
loop<00:22:50.210><c> only</c><00:22:50.420><c> iterate</c><00:22:50.900><c> from</c><00:22:51.080><c> 10</c><00:22:51.380><c> to</c><00:22:51.560><c> 10</c><00:22:51.770><c> so</c><00:22:52.070><c> it</c>

00:22:52.120 --> 00:22:52.130 align:start position:0%
loop only iterate from 10 to 10 so it
 

00:22:52.130 --> 00:22:54.370 align:start position:0%
loop only iterate from 10 to 10 so it
actually<00:22:52.430><c> only</c><00:22:52.550><c> iterates</c><00:22:53.060><c> once</c><00:22:53.360><c> so</c><00:22:54.080><c> you</c><00:22:54.140><c> can</c>

00:22:54.370 --> 00:22:54.380 align:start position:0%
actually only iterates once so you can
 

00:22:54.380 --> 00:22:55.870 align:start position:0%
actually only iterates once so you can
replace<00:22:54.620><c> the</c><00:22:54.860><c> whole</c><00:22:55.040><c> loop</c><00:22:55.220><c> with</c><00:22:55.430><c> a</c><00:22:55.460><c> single</c>

00:22:55.870 --> 00:22:55.880 align:start position:0%
replace the whole loop with a single
 

00:22:55.880 --> 00:22:57.910 align:start position:0%
replace the whole loop with a single
statement<00:22:56.180><c> and</c><00:22:56.600><c> as</c><00:22:56.990><c> a</c><00:22:57.020><c> result</c><00:22:57.470><c> you</c><00:22:57.620><c> can</c><00:22:57.650><c> also</c>

00:22:57.910 --> 00:22:57.920 align:start position:0%
statement and as a result you can also
 

00:22:57.920 --> 00:23:00.010 align:start position:0%
statement and as a result you can also
constant<00:22:58.610><c> fold</c><00:22:58.850><c> to</c><00:22:59.030><c> multiplication</c><00:22:59.420><c> and</c>

00:23:00.010 --> 00:23:00.020 align:start position:0%
constant fold to multiplication and
 

00:23:00.020 --> 00:23:02.650 align:start position:0%
constant fold to multiplication and
already<00:23:00.710><c> do</c><00:23:00.890><c> that</c><00:23:01.070><c> at</c><00:23:01.220><c> compile</c><00:23:01.640><c> time</c><00:23:01.670><c> so</c><00:23:02.540><c> the</c>

00:23:02.650 --> 00:23:02.660 align:start position:0%
already do that at compile time so the
 

00:23:02.660 --> 00:23:05.350 align:start position:0%
already do that at compile time so the
program<00:23:02.990><c> will</c><00:23:03.170><c> run</c><00:23:03.320><c> a</c><00:23:03.380><c> lot</c><00:23:03.710><c> faster</c><00:23:04.360><c> again</c>

00:23:05.350 --> 00:23:05.360 align:start position:0%
program will run a lot faster again
 

00:23:05.360 --> 00:23:08.080 align:start position:0%
program will run a lot faster again
typical<00:23:06.290><c> code</c><00:23:06.530><c> Volt's</c><00:23:07.070><c> optimized</c><00:23:07.520><c> right</c><00:23:07.820><c> away</c>

00:23:08.080 --> 00:23:08.090 align:start position:0%
typical code Volt's optimized right away
 

00:23:08.090 --> 00:23:10.330 align:start position:0%
typical code Volt's optimized right away
but<00:23:08.540><c> of</c><00:23:08.690><c> the</c><00:23:08.840><c> inlining</c><00:23:09.470><c> or</c><00:23:09.620><c> other</c><00:23:09.860><c> forms</c><00:23:10.250><c> of</c>

00:23:10.330 --> 00:23:10.340 align:start position:0%
but of the inlining or other forms of
 

00:23:10.340 --> 00:23:12.550 align:start position:0%
but of the inlining or other forms of
specializations<00:23:11.240><c> these</c><00:23:11.690><c> situations</c><00:23:12.320><c> are</c>

00:23:12.550 --> 00:23:12.560 align:start position:0%
specializations these situations are
 

00:23:12.560 --> 00:23:15.120 align:start position:0%
specializations these situations are
cure<00:23:12.980><c> and</c><00:23:13.190><c> they</c><00:23:13.820><c> can</c><00:23:13.970><c> help</c><00:23:14.120><c> improve</c><00:23:14.690><c> your</c>

00:23:15.120 --> 00:23:15.130 align:start position:0%
cure and they can help improve your
 

00:23:15.130 --> 00:23:21.610 align:start position:0%
cure and they can help improve your
performance<00:23:20.050><c> so</c><00:23:21.050><c> the</c><00:23:21.170><c> last</c><00:23:21.350><c> loop</c>

00:23:21.610 --> 00:23:21.620 align:start position:0%
performance so the last loop
 

00:23:21.620 --> 00:23:23.920 align:start position:0%
performance so the last loop
optimization<00:23:22.190><c> I</c><00:23:22.250><c> want</c><00:23:22.400><c> to</c><00:23:22.490><c> talk</c><00:23:22.610><c> about</c><00:23:22.910><c> is</c><00:23:23.150><c> the</c>

00:23:23.920 --> 00:23:23.930 align:start position:0%
optimization I want to talk about is the
 

00:23:23.930 --> 00:23:27.220 align:start position:0%
optimization I want to talk about is the
ability<00:23:24.140><c> of</c><00:23:24.380><c> Android</c><00:23:24.800><c> all</c><00:23:25.070><c> to</c><00:23:25.430><c> act</c><00:23:25.880><c> to</c><00:23:26.870><c> take</c>

00:23:27.220 --> 00:23:27.230 align:start position:0%
ability of Android all to act to take
 

00:23:27.230 --> 00:23:30.190 align:start position:0%
ability of Android all to act to take
advantage<00:23:27.710><c> of</c><00:23:27.920><c> Cindy</c><00:23:28.460><c> instructions</c><00:23:29.210><c> so</c><00:23:29.810><c> Cindy</c>

00:23:30.190 --> 00:23:30.200 align:start position:0%
advantage of Cindy instructions so Cindy
 

00:23:30.200 --> 00:23:31.810 align:start position:0%
advantage of Cindy instructions so Cindy
instructions<00:23:30.740><c> are</c><00:23:31.010><c> instructions</c><00:23:31.700><c> that</c>

00:23:31.810 --> 00:23:31.820 align:start position:0%
instructions are instructions that
 

00:23:31.820 --> 00:23:33.660 align:start position:0%
instructions are instructions that
perform<00:23:31.880><c> a</c><00:23:32.330><c> single</c><00:23:32.720><c> operation</c>

00:23:33.660 --> 00:23:33.670 align:start position:0%
perform a single operation
 

00:23:33.670 --> 00:23:36.400 align:start position:0%
perform a single operation
simultaneously<00:23:34.670><c> to</c><00:23:34.880><c> multiple</c><00:23:35.480><c> data</c><00:23:35.690><c> operands</c>

00:23:36.400 --> 00:23:36.410 align:start position:0%
simultaneously to multiple data operands
 

00:23:36.410 --> 00:23:39.000 align:start position:0%
simultaneously to multiple data operands
so<00:23:36.620><c> you</c><00:23:37.040><c> see</c><00:23:37.340><c> an</c><00:23:37.460><c> example</c><00:23:37.790><c> here</c><00:23:38.000><c> where</c><00:23:38.630><c> one</c>

00:23:39.000 --> 00:23:39.010 align:start position:0%
so you see an example here where one
 

00:23:39.010 --> 00:23:41.410 align:start position:0%
so you see an example here where one
instruction<00:23:40.010><c> actually</c><00:23:40.130><c> does</c><00:23:40.460><c> four</c><00:23:40.850><c> additions</c>

00:23:41.410 --> 00:23:41.420 align:start position:0%
instruction actually does four additions
 

00:23:41.420 --> 00:23:44.110 align:start position:0%
instruction actually does four additions
at<00:23:41.690><c> the</c><00:23:41.840><c> same</c><00:23:42.050><c> time</c><00:23:42.410><c> and</c><00:23:42.740><c> all</c><00:23:43.490><c> our</c><00:23:43.520><c> target</c>

00:23:44.110 --> 00:23:44.120 align:start position:0%
at the same time and all our target
 

00:23:44.120 --> 00:23:48.880 align:start position:0%
at the same time and all our target
platforms<00:23:44.720><c> are</c><00:23:45.020><c> Intel</c><00:23:45.680><c> mitts</c><00:23:46.100><c> they</c><00:23:46.700><c> have</c><00:23:47.890><c> such</c>

00:23:48.880 --> 00:23:48.890 align:start position:0%
platforms are Intel mitts they have such
 

00:23:48.890 --> 00:23:51.130 align:start position:0%
platforms are Intel mitts they have such
instructions<00:23:49.550><c> and</c><00:23:49.820><c> if</c><00:23:50.180><c> you</c><00:23:50.300><c> take</c><00:23:50.600><c> advantage</c>

00:23:51.130 --> 00:23:51.140 align:start position:0%
instructions and if you take advantage
 

00:23:51.140 --> 00:23:52.780 align:start position:0%
instructions and if you take advantage
of<00:23:51.260><c> them</c><00:23:51.440><c> it</c><00:23:51.650><c> can</c><00:23:51.830><c> greatly</c><00:23:52.100><c> improve</c><00:23:52.670><c> the</c>

00:23:52.780 --> 00:23:52.790 align:start position:0%
of them it can greatly improve the
 

00:23:52.790 --> 00:23:54.610 align:start position:0%
of them it can greatly improve the
performance<00:23:53.510><c> of</c><00:23:53.690><c> certain</c><00:23:53.960><c> classes</c><00:23:54.590><c> of</c>

00:23:54.610 --> 00:23:54.620 align:start position:0%
performance of certain classes of
 

00:23:54.620 --> 00:23:58.539 align:start position:0%
performance of certain classes of
programs

00:23:58.539 --> 00:23:58.549 align:start position:0%
 
 

00:23:58.549 --> 00:24:01.669 align:start position:0%
 
so<00:23:59.549><c> converting</c><00:24:00.240><c> sequential</c><00:24:00.900><c> code</c><00:24:01.140><c> and</c><00:24:01.500><c> we</c>

00:24:01.669 --> 00:24:01.679 align:start position:0%
so converting sequential code and we
 

00:24:01.679 --> 00:24:03.530 align:start position:0%
so converting sequential code and we
typically<00:24:02.070><c> focus</c><00:24:02.340><c> on</c><00:24:02.670><c> loops</c><00:24:02.910><c> but</c><00:24:03.150><c> it</c><00:24:03.270><c> doesn't</c>

00:24:03.530 --> 00:24:03.540 align:start position:0%
typically focus on loops but it doesn't
 

00:24:03.540 --> 00:24:05.630 align:start position:0%
typically focus on loops but it doesn't
have<00:24:03.630><c> to</c><00:24:03.750><c> be</c><00:24:03.840><c> restricted</c><00:24:04.410><c> to</c><00:24:04.440><c> that</c><00:24:04.679><c> into</c><00:24:05.340><c> code</c>

00:24:05.630 --> 00:24:05.640 align:start position:0%
have to be restricted to that into code
 

00:24:05.640 --> 00:24:06.980 align:start position:0%
have to be restricted to that into code
it<00:24:05.880><c> exploits</c><00:24:06.270><c> to</c><00:24:06.510><c> send</c><00:24:06.780><c> the</c><00:24:06.870><c> instructions</c>

00:24:06.980 --> 00:24:06.990 align:start position:0%
it exploits to send the instructions
 

00:24:06.990 --> 00:24:10.630 align:start position:0%
it exploits to send the instructions
that<00:24:07.500><c> process</c><00:24:08.130><c> is</c><00:24:08.250><c> called</c><00:24:08.480><c> factorization</c><00:24:09.480><c> and</c>

00:24:10.630 --> 00:24:10.640 align:start position:0%
that process is called factorization and
 

00:24:10.640 --> 00:24:13.280 align:start position:0%
that process is called factorization and
it's<00:24:11.640><c> illustrated</c><00:24:12.360><c> here</c><00:24:12.630><c> where</c><00:24:12.840><c> on</c><00:24:12.990><c> the</c><00:24:13.110><c> left</c>

00:24:13.280 --> 00:24:13.290 align:start position:0%
it's illustrated here where on the left
 

00:24:13.290 --> 00:24:14.500 align:start position:0%
it's illustrated here where on the left
you<00:24:13.530><c> see</c><00:24:13.559><c> a</c><00:24:13.740><c> loop</c><00:24:14.010><c> that</c><00:24:14.340><c> iterates</c>

00:24:14.500 --> 00:24:14.510 align:start position:0%
you see a loop that iterates
 

00:24:14.510 --> 00:24:16.700 align:start position:0%
you see a loop that iterates
sequentially<00:24:15.510><c> and</c><00:24:15.720><c> on</c><00:24:16.049><c> the</c><00:24:16.170><c> right</c><00:24:16.350><c> you</c><00:24:16.530><c> see</c>

00:24:16.700 --> 00:24:16.710 align:start position:0%
sequentially and on the right you see
 

00:24:16.710 --> 00:24:18.380 align:start position:0%
sequentially and on the right you see
the<00:24:16.830><c> vector</c><00:24:17.160><c> loop</c><00:24:17.309><c> that</c><00:24:17.520><c> actually</c><00:24:17.850><c> goes</c><00:24:18.090><c> by</c>

00:24:18.380 --> 00:24:18.390 align:start position:0%
the vector loop that actually goes by
 

00:24:18.390 --> 00:24:21.470 align:start position:0%
the vector loop that actually goes by
for<00:24:18.450><c> and</c><00:24:19.640><c> in</c><00:24:20.640><c> order</c><00:24:20.970><c> to</c><00:24:21.030><c> do</c><00:24:21.330><c> this</c>

00:24:21.470 --> 00:24:21.480 align:start position:0%
for and in order to do this
 

00:24:21.480 --> 00:24:23.900 align:start position:0%
for and in order to do this
transformation<00:24:22.230><c> this</c><00:24:22.380><c> vectorization</c><00:24:22.920><c> you</c>

00:24:23.900 --> 00:24:23.910 align:start position:0%
transformation this vectorization you
 

00:24:23.910 --> 00:24:26.390 align:start position:0%
transformation this vectorization you
need<00:24:24.090><c> somes</c><00:24:24.390><c> very</c><00:24:24.720><c> specific</c><00:24:25.320><c> analysis</c><00:24:25.920><c> you</c>

00:24:26.390 --> 00:24:26.400 align:start position:0%
need somes very specific analysis you
 

00:24:26.400 --> 00:24:28.070 align:start position:0%
need somes very specific analysis you
have<00:24:26.429><c> to</c><00:24:26.700><c> detect</c><00:24:27.059><c> and</c><00:24:27.360><c> resolve</c><00:24:27.510><c> memory</c>

00:24:28.070 --> 00:24:28.080 align:start position:0%
have to detect and resolve memory
 

00:24:28.080 --> 00:24:30.230 align:start position:0%
have to detect and resolve memory
conflicts<00:24:28.650><c> between</c><00:24:28.830><c> the</c><00:24:29.160><c> loop</c><00:24:29.309><c> iterations</c><00:24:30.030><c> to</c>

00:24:30.230 --> 00:24:30.240 align:start position:0%
conflicts between the loop iterations to
 

00:24:30.240 --> 00:24:32.180 align:start position:0%
conflicts between the loop iterations to
see<00:24:30.450><c> if</c><00:24:30.660><c> you</c><00:24:31.080><c> can</c><00:24:31.200><c> actually</c><00:24:31.380><c> execute</c><00:24:31.799><c> them</c><00:24:32.100><c> in</c>

00:24:32.180 --> 00:24:32.190 align:start position:0%
see if you can actually execute them in
 

00:24:32.190 --> 00:24:34.280 align:start position:0%
see if you can actually execute them in
parallel<00:24:32.520><c> you</c><00:24:33.270><c> may</c><00:24:33.450><c> want</c><00:24:33.660><c> to</c><00:24:33.720><c> be</c><00:24:33.840><c> a</c><00:24:33.870><c> little</c><00:24:34.110><c> bit</c>

00:24:34.280 --> 00:24:34.290 align:start position:0%
parallel you may want to be a little bit
 

00:24:34.290 --> 00:24:35.990 align:start position:0%
parallel you may want to be a little bit
more<00:24:34.440><c> strict</c><00:24:34.770><c> about</c><00:24:35.070><c> alignments</c><00:24:35.850><c> because</c>

00:24:35.990 --> 00:24:36.000 align:start position:0%
more strict about alignments because
 

00:24:36.000 --> 00:24:37.640 align:start position:0%
more strict about alignments because
seen<00:24:36.360><c> the</c><00:24:36.480><c> instructions</c><00:24:36.990><c> often</c><00:24:37.260><c> require</c>

00:24:37.640 --> 00:24:37.650 align:start position:0%
seen the instructions often require
 

00:24:37.650 --> 00:24:41.990 align:start position:0%
seen the instructions often require
stricter<00:24:38.450><c> alignments</c><00:24:40.250><c> on</c><00:24:41.250><c> the</c><00:24:41.400><c> memory</c><00:24:41.700><c> and</c>

00:24:41.990 --> 00:24:42.000 align:start position:0%
stricter alignments on the memory and
 

00:24:42.000 --> 00:24:45.230 align:start position:0%
stricter alignments on the memory and
you<00:24:42.990><c> want</c><00:24:43.169><c> to</c><00:24:43.260><c> detect</c><00:24:43.530><c> idiomatic</c><00:24:44.340><c> construct</c>

00:24:45.230 --> 00:24:45.240 align:start position:0%
you want to detect idiomatic construct
 

00:24:45.240 --> 00:24:46.700 align:start position:0%
you want to detect idiomatic construct
you'll<00:24:45.450><c> see</c><00:24:45.600><c> an</c><00:24:45.660><c> example</c><00:24:45.960><c> of</c><00:24:46.110><c> that</c><00:24:46.169><c> shortly</c>

00:24:46.700 --> 00:24:46.710 align:start position:0%
you'll see an example of that shortly
 

00:24:46.710 --> 00:24:48.860 align:start position:0%
you'll see an example of that shortly
stuff<00:24:47.549><c> that</c><00:24:47.760><c> you</c><00:24:47.880><c> cannot</c><00:24:48.150><c> really</c><00:24:48.360><c> express</c>

00:24:48.860 --> 00:24:48.870 align:start position:0%
stuff that you cannot really express
 

00:24:48.870 --> 00:24:50.930 align:start position:0%
stuff that you cannot really express
with<00:24:49.049><c> single</c><00:24:49.380><c> operators</c><00:24:49.890><c> in</c><00:24:50.070><c> your</c><00:24:50.280><c> sequential</c>

00:24:50.930 --> 00:24:50.940 align:start position:0%
with single operators in your sequential
 

00:24:50.940 --> 00:24:53.210 align:start position:0%
with single operators in your sequential
codes<00:24:51.210><c> but</c><00:24:51.870><c> if</c><00:24:52.049><c> you</c><00:24:52.169><c> detect</c><00:24:52.470><c> them</c><00:24:52.710><c> you</c><00:24:52.830><c> can</c><00:24:53.010><c> map</c>

00:24:53.210 --> 00:24:53.220 align:start position:0%
codes but if you detect them you can map
 

00:24:53.220 --> 00:24:54.980 align:start position:0%
codes but if you detect them you can map
them<00:24:53.370><c> onto</c><00:24:53.490><c> very</c><00:24:53.880><c> efficient</c><00:24:54.540><c> sim</c><00:24:54.840><c> the</c>

00:24:54.980 --> 00:24:54.990 align:start position:0%
them onto very efficient sim the
 

00:24:54.990 --> 00:25:00.919 align:start position:0%
them onto very efficient sim the
instructions<00:24:58.940><c> so</c><00:24:59.940><c> let's</c><00:25:00.179><c> just</c><00:25:00.390><c> explore</c><00:25:00.809><c> this</c>

00:25:00.919 --> 00:25:00.929 align:start position:0%
instructions so let's just explore this
 

00:25:00.929 --> 00:25:02.770 align:start position:0%
instructions so let's just explore this
whole<00:25:01.080><c> factorization</c><00:25:01.740><c> with</c><00:25:01.890><c> a</c><00:25:01.919><c> case</c><00:25:02.190><c> study</c>

00:25:02.770 --> 00:25:02.780 align:start position:0%
whole factorization with a case study
 

00:25:02.780 --> 00:25:05.810 align:start position:0%
whole factorization with a case study
suppose<00:25:03.780><c> they</c><00:25:03.960><c> keep</c><00:25:04.110><c> on</c><00:25:04.260><c> a</c><00:25:04.290><c> like</c><00:25:05.040><c> display</c><00:25:05.790><c> a</c>

00:25:05.810 --> 00:25:05.820 align:start position:0%
suppose they keep on a like display a
 

00:25:05.820 --> 00:25:07.549 align:start position:0%
suppose they keep on a like display a
string<00:25:06.240><c> of</c><00:25:06.390><c> pictures</c><00:25:06.870><c> like</c><00:25:07.080><c> these</c><00:25:07.320><c> paintings</c>

00:25:07.549 --> 00:25:07.559 align:start position:0%
string of pictures like these paintings
 

00:25:07.559 --> 00:25:10.100 align:start position:0%
string of pictures like these paintings
here<00:25:07.950><c> on</c><00:25:08.040><c> the</c><00:25:08.160><c> graph</c><00:25:08.400><c> on</c><00:25:08.669><c> your</c><00:25:08.760><c> display</c><00:25:09.419><c> and</c>

00:25:10.100 --> 00:25:10.110 align:start position:0%
here on the graph on your display and
 

00:25:10.110 --> 00:25:12.799 align:start position:0%
here on the graph on your display and
you<00:25:10.350><c> want</c><00:25:10.530><c> to</c><00:25:10.679><c> transition</c><00:25:11.130><c> smoothly</c><00:25:12.030><c> from</c><00:25:12.510><c> one</c>

00:25:12.799 --> 00:25:12.809 align:start position:0%
you want to transition smoothly from one
 

00:25:12.809 --> 00:25:14.600 align:start position:0%
you want to transition smoothly from one
picture<00:25:13.200><c> to</c><00:25:13.380><c> the</c><00:25:13.650><c> other</c><00:25:13.890><c> you</c><00:25:14.130><c> don't</c><00:25:14.309><c> want</c><00:25:14.520><c> to</c>

00:25:14.600 --> 00:25:14.610 align:start position:0%
picture to the other you don't want to
 

00:25:14.610 --> 00:25:16.640 align:start position:0%
picture to the other you don't want to
just<00:25:14.760><c> show</c><00:25:15.360><c> one</c><00:25:15.600><c> and</c><00:25:15.780><c> on</c><00:25:15.900><c> the</c><00:25:16.020><c> other</c><00:25:16.140><c> you</c><00:25:16.470><c> want</c>

00:25:16.640 --> 00:25:16.650 align:start position:0%
just show one and on the other you want
 

00:25:16.650 --> 00:25:18.169 align:start position:0%
just show one and on the other you want
to<00:25:16.740><c> sort</c><00:25:16.890><c> of</c><00:25:16.980><c> have</c><00:25:17.100><c> a</c><00:25:17.130><c> transition</c><00:25:17.730><c> in</c><00:25:17.880><c> the</c><00:25:17.970><c> tree</c>

00:25:18.169 --> 00:25:18.179 align:start position:0%
to sort of have a transition in the tree
 

00:25:18.179 --> 00:25:20.390 align:start position:0%
to sort of have a transition in the tree
and<00:25:18.480><c> you</c><00:25:18.870><c> want</c><00:25:19.020><c> to</c><00:25:19.110><c> do</c><00:25:19.200><c> that</c><00:25:19.350><c> real</c><00:25:19.559><c> time</c><00:25:19.919><c> you</c>

00:25:20.390 --> 00:25:20.400 align:start position:0%
and you want to do that real time you
 

00:25:20.400 --> 00:25:22.340 align:start position:0%
and you want to do that real time you
don't<00:25:20.610><c> know</c><00:25:20.700><c> the</c><00:25:20.850><c> stream</c><00:25:21.090><c> in</c><00:25:21.240><c> advance</c><00:25:21.600><c> and</c><00:25:21.870><c> of</c>

00:25:22.340 --> 00:25:22.350 align:start position:0%
don't know the stream in advance and of
 

00:25:22.350 --> 00:25:23.900 align:start position:0%
don't know the stream in advance and of
course<00:25:22.590><c> you</c><00:25:22.710><c> want</c><00:25:22.860><c> to</c><00:25:22.919><c> do</c><00:25:23.040><c> it</c><00:25:23.160><c> in</c><00:25:23.309><c> an</c><00:25:23.429><c> efficient</c>

00:25:23.900 --> 00:25:23.910 align:start position:0%
course you want to do it in an efficient
 

00:25:23.910 --> 00:25:28.760 align:start position:0%
course you want to do it in an efficient
way<00:25:26.570><c> so</c><00:25:27.570><c> one</c><00:25:27.929><c> way</c><00:25:28.110><c> to</c><00:25:28.140><c> get</c><00:25:28.440><c> a</c><00:25:28.470><c> smooth</c>

00:25:28.760 --> 00:25:28.770 align:start position:0%
way so one way to get a smooth
 

00:25:28.770 --> 00:25:30.530 align:start position:0%
way so one way to get a smooth
transition<00:25:29.190><c> is</c><00:25:29.490><c> actually</c><00:25:29.850><c> performing</c><00:25:30.419><c> a</c>

00:25:30.530 --> 00:25:30.540 align:start position:0%
transition is actually performing a
 

00:25:30.540 --> 00:25:33.110 align:start position:0%
transition is actually performing a
crossfade<00:25:31.320><c> so</c><00:25:32.010><c> what</c><00:25:32.160><c> you</c><00:25:32.309><c> do</c><00:25:32.429><c> is</c><00:25:32.610><c> it's</c><00:25:32.910><c> called</c>

00:25:33.110 --> 00:25:33.120 align:start position:0%
crossfade so what you do is it's called
 

00:25:33.120 --> 00:25:35.539 align:start position:0%
crossfade so what you do is it's called
rounding<00:25:33.840><c> housing</c><00:25:34.230><c> act</c><00:25:34.410><c> so</c><00:25:34.919><c> basically</c><00:25:35.309><c> you</c>

00:25:35.539 --> 00:25:35.549 align:start position:0%
rounding housing act so basically you
 

00:25:35.549 --> 00:25:38.000 align:start position:0%
rounding housing act so basically you
take<00:25:35.760><c> the</c><00:25:35.820><c> average</c><00:25:36.750><c> of</c><00:25:36.960><c> two</c><00:25:36.990><c> pictures</c><00:25:37.590><c> and</c><00:25:37.770><c> you</c>

00:25:38.000 --> 00:25:38.010 align:start position:0%
take the average of two pictures and you
 

00:25:38.010 --> 00:25:40.310 align:start position:0%
take the average of two pictures and you
showed<00:25:38.280><c> it</c><00:25:38.429><c> in</c><00:25:38.640><c> between</c><00:25:38.820><c> the</c><00:25:39.030><c> two</c><00:25:39.120><c> pictures</c><00:25:39.750><c> so</c>

00:25:40.310 --> 00:25:40.320 align:start position:0%
showed it in between the two pictures so
 

00:25:40.320 --> 00:25:43.130 align:start position:0%
showed it in between the two pictures so
the<00:25:40.799><c> example</c><00:25:41.309><c> here</c><00:25:41.610><c> you</c><00:25:42.419><c> see</c><00:25:42.570><c> the</c><00:25:42.690><c> shipwreck</c>

00:25:43.130 --> 00:25:43.140 align:start position:0%
the example here you see the shipwreck
 

00:25:43.140 --> 00:25:46.370 align:start position:0%
the example here you see the shipwreck
on<00:25:43.410><c> the</c><00:25:43.559><c> bar</c><00:25:43.770><c> on</c><00:25:43.980><c> the</c><00:25:44.130><c> top</c><00:25:44.160><c> and</c><00:25:44.520><c> the</c><00:25:44.700><c> quiet</c><00:25:45.480><c> fire</c>

00:25:46.370 --> 00:25:46.380 align:start position:0%
on the bar on the top and the quiet fire
 

00:25:46.380 --> 00:25:48.530 align:start position:0%
on the bar on the top and the quiet fire
on<00:25:46.620><c> the</c><00:25:46.740><c> bottom</c><00:25:47.130><c> and</c><00:25:47.309><c> the</c><00:25:47.970><c> picture</c><00:25:48.299><c> that</c><00:25:48.330><c> you</c>

00:25:48.530 --> 00:25:48.540 align:start position:0%
on the bottom and the picture that you
 

00:25:48.540 --> 00:25:50.840 align:start position:0%
on the bottom and the picture that you
show<00:25:48.720><c> in-between</c><00:25:49.290><c> will</c><00:25:49.799><c> sort</c><00:25:50.549><c> of</c><00:25:50.610><c> be</c><00:25:50.669><c> an</c>

00:25:50.840 --> 00:25:50.850 align:start position:0%
show in-between will sort of be an
 

00:25:50.850 --> 00:25:52.760 align:start position:0%
show in-between will sort of be an
average<00:25:51.240><c> of</c><00:25:51.390><c> the</c><00:25:51.540><c> two</c><00:25:51.690><c> pictures</c><00:25:51.900><c> showing</c><00:25:52.530><c> them</c>

00:25:52.760 --> 00:25:52.770 align:start position:0%
average of the two pictures showing them
 

00:25:52.770 --> 00:25:55.430 align:start position:0%
average of the two pictures showing them
at<00:25:52.890><c> the</c><00:25:52.980><c> same</c><00:25:53.160><c> time</c><00:25:53.220><c> it</c><00:25:53.760><c> forms</c><00:25:54.120><c> a</c><00:25:54.210><c> nice</c><00:25:54.440><c> smooth</c>

00:25:55.430 --> 00:25:55.440 align:start position:0%
at the same time it forms a nice smooth
 

00:25:55.440 --> 00:25:58.159 align:start position:0%
at the same time it forms a nice smooth
transition<00:25:55.880><c> so</c><00:25:56.880><c> how</c><00:25:57.059><c> do</c><00:25:57.120><c> you</c><00:25:57.330><c> code</c><00:25:57.630><c> it</c><00:25:57.840><c> and</c><00:25:58.080><c> you</c>

00:25:58.159 --> 00:25:58.169 align:start position:0%
transition so how do you code it and you
 

00:25:58.169 --> 00:25:59.930 align:start position:0%
transition so how do you code it and you
don't<00:25:58.410><c> want</c><00:25:58.559><c> to</c><00:25:58.650><c> go</c><00:25:58.740><c> to</c><00:25:58.799><c> a</c><00:25:58.950><c> native</c><00:25:59.429><c> solution</c>

00:25:59.930 --> 00:25:59.940 align:start position:0%
don't want to go to a native solution
 

00:25:59.940 --> 00:26:01.640 align:start position:0%
don't want to go to a native solution
you<00:26:00.059><c> want</c><00:26:00.270><c> to</c><00:26:00.390><c> don't</c><00:26:00.750><c> want</c><00:26:00.840><c> to</c><00:26:01.020><c> use</c><00:26:01.110><c> the</c><00:26:01.260><c> NDK</c>

00:26:01.640 --> 00:26:01.650 align:start position:0%
you want to don't want to use the NDK
 

00:26:01.650 --> 00:26:03.770 align:start position:0%
you want to don't want to use the NDK
you<00:26:01.860><c> don't</c><00:26:02.040><c> want</c><00:26:02.190><c> to</c><00:26:02.250><c> use</c><00:26:02.370><c> GPU</c><00:26:02.820><c> code</c><00:26:03.030><c> you</c><00:26:03.540><c> just</c>

00:26:03.770 --> 00:26:03.780 align:start position:0%
you don't want to use GPU code you just
 

00:26:03.780 --> 00:26:08.529 align:start position:0%
you don't want to use GPU code you just
want<00:26:03.960><c> to</c><00:26:04.080><c> stay</c><00:26:04.500><c> at</c><00:26:04.710><c> source</c><00:26:05.040><c> level</c>

00:26:08.529 --> 00:26:08.539 align:start position:0%
 
 

00:26:08.539 --> 00:26:11.199 align:start position:0%
 
so<00:26:09.169><c> here</c><00:26:09.469><c> you</c><00:26:09.649><c> see</c><00:26:09.859><c> a</c><00:26:10.129><c> method</c><00:26:10.669><c> that</c><00:26:10.820><c> could</c><00:26:11.059><c> do</c>

00:26:11.199 --> 00:26:11.209 align:start position:0%
so here you see a method that could do
 

00:26:11.209 --> 00:26:13.419 align:start position:0%
so here you see a method that could do
such<00:26:11.419><c> a</c><00:26:11.449><c> crossfade</c><00:26:12.139><c> so</c><00:26:12.919><c> you</c><00:26:12.979><c> have</c><00:26:13.190><c> two</c>

00:26:13.419 --> 00:26:13.429 align:start position:0%
such a crossfade so you have two
 

00:26:13.429 --> 00:26:15.849 align:start position:0%
such a crossfade so you have two
incoming<00:26:13.969><c> byte</c><00:26:14.509><c> arrays</c><00:26:14.929><c> which</c><00:26:15.259><c> represented</c>

00:26:15.849 --> 00:26:15.859 align:start position:0%
incoming byte arrays which represented
 

00:26:15.859 --> 00:26:19.569 align:start position:0%
incoming byte arrays which represented
pictures<00:26:16.429><c> X</c><00:26:16.820><c> 1</c><00:26:17.119><c> and</c><00:26:17.299><c> X</c><00:26:17.359><c> 2</c><00:26:17.539><c> and</c><00:26:18.229><c> you</c><00:26:18.709><c> go</c><00:26:18.979><c> for</c><00:26:19.339><c> like</c>

00:26:19.569 --> 00:26:19.579 align:start position:0%
pictures X 1 and X 2 and you go for like
 

00:26:19.579 --> 00:26:22.269 align:start position:0%
pictures X 1 and X 2 and you go for like
an<00:26:19.940><c> 0</c><00:26:20.719><c> extension</c><00:26:21.469><c> and</c><00:26:21.649><c> an</c><00:26:21.739><c> averaging</c>

00:26:22.269 --> 00:26:22.279 align:start position:0%
an 0 extension and an averaging
 

00:26:22.279 --> 00:26:24.699 align:start position:0%
an 0 extension and an averaging
operation<00:26:22.459><c> and</c><00:26:23.269><c> then</c><00:26:23.749><c> you</c><00:26:23.899><c> computes</c><00:26:24.320><c> the</c><00:26:24.529><c> X</c>

00:26:24.699 --> 00:26:24.709 align:start position:0%
operation and then you computes the X
 

00:26:24.709 --> 00:26:28.569 align:start position:0%
operation and then you computes the X
out<00:26:25.269><c> so</c><00:26:26.269><c> keeping</c><00:26:27.229><c> this</c><00:26:27.379><c> at</c><00:26:27.649><c> source</c><00:26:28.009><c> level</c><00:26:28.249><c> is</c>

00:26:28.569 --> 00:26:28.579 align:start position:0%
out so keeping this at source level is
 

00:26:28.579 --> 00:26:30.909 align:start position:0%
out so keeping this at source level is
of<00:26:28.729><c> course</c><00:26:29.269><c> a</c><00:26:29.359><c> much</c><00:26:29.659><c> easier</c><00:26:29.899><c> way</c><00:26:30.409><c> of</c>

00:26:30.909 --> 00:26:30.919 align:start position:0%
of course a much easier way of
 

00:26:30.919 --> 00:26:33.159 align:start position:0%
of course a much easier way of
expressing<00:26:31.789><c> such</c><00:26:32.119><c> an</c><00:26:32.239><c> algorithm</c><00:26:32.509><c> it's</c><00:26:32.929><c> easy</c>

00:26:33.159 --> 00:26:33.169 align:start position:0%
expressing such an algorithm it's easy
 

00:26:33.169 --> 00:26:35.589 align:start position:0%
expressing such an algorithm it's easy
to<00:26:33.409><c> write</c><00:26:33.589><c> as</c><00:26:33.979><c> debug</c><00:26:34.399><c> maintain</c><00:26:34.909><c> etc</c><00:26:35.389><c> you</c><00:26:35.570><c> don't</c>

00:26:35.589 --> 00:26:35.599 align:start position:0%
to write as debug maintain etc you don't
 

00:26:35.599 --> 00:26:38.139 align:start position:0%
to write as debug maintain etc you don't
have<00:26:35.869><c> to</c><00:26:35.989><c> use</c><00:26:36.139><c> the</c><00:26:36.349><c> the</c><00:26:36.639><c> NDK</c><00:26:37.639><c> you</c><00:26:37.699><c> don't</c><00:26:37.999><c> have</c>

00:26:38.139 --> 00:26:38.149 align:start position:0%
have to use the the NDK you don't have
 

00:26:38.149 --> 00:26:45.430 align:start position:0%
have to use the the NDK you don't have
to<00:26:38.269><c> use</c><00:26:38.479><c> GPU</c><00:26:38.959><c> counts</c><00:26:42.369><c> so</c><00:26:43.509><c> Android</c><00:26:44.509><c> n</c><00:26:44.749><c> will</c>

00:26:45.430 --> 00:26:45.440 align:start position:0%
to use GPU counts so Android n will
 

00:26:45.440 --> 00:26:47.829 align:start position:0%
to use GPU counts so Android n will
actually<00:26:45.889><c> translate</c><00:26:46.819><c> the</c><00:26:47.209><c> loop</c><00:26:47.389><c> that</c><00:26:47.539><c> I</c><00:26:47.659><c> just</c>

00:26:47.829 --> 00:26:47.839 align:start position:0%
actually translate the loop that I just
 

00:26:47.839 --> 00:26:49.449 align:start position:0%
actually translate the loop that I just
showed<00:26:48.079><c> to</c><00:26:48.259><c> the</c><00:26:48.440><c> sequential</c><00:26:48.829><c> code</c><00:26:49.159><c> on</c><00:26:49.369><c> the</c>

00:26:49.449 --> 00:26:49.459 align:start position:0%
showed to the sequential code on the
 

00:26:49.459 --> 00:26:52.869 align:start position:0%
showed to the sequential code on the
left<00:26:49.699><c> and</c><00:26:49.999><c> Android</c><00:26:50.749><c> all</c><00:26:50.989><c> will</c><00:26:51.469><c> now</c><00:26:51.879><c> generate</c>

00:26:52.869 --> 00:26:52.879 align:start position:0%
left and Android all will now generate
 

00:26:52.879 --> 00:26:55.059 align:start position:0%
left and Android all will now generate
the<00:26:53.389><c> simply</c><00:26:53.749><c> called</c><00:26:53.989><c> shown</c><00:26:54.229><c> on</c><00:26:54.379><c> the</c><00:26:54.469><c> right</c><00:26:54.649><c> and</c>

00:26:55.059 --> 00:26:55.069 align:start position:0%
the simply called shown on the right and
 

00:26:55.069 --> 00:26:57.249 align:start position:0%
the simply called shown on the right and
I<00:26:55.639><c> don't</c><00:26:55.819><c> expect</c><00:26:56.209><c> you</c><00:26:56.329><c> to</c><00:26:56.359><c> dress</c><00:26:56.869><c> this</c><00:26:57.079><c> whole</c>

00:26:57.249 --> 00:26:57.259 align:start position:0%
I don't expect you to dress this whole
 

00:26:57.259 --> 00:26:59.229 align:start position:0%
I don't expect you to dress this whole
assembly<00:26:57.559><c> right</c><00:26:57.949><c> away</c><00:26:58.219><c> but</c><00:26:58.489><c> just</c><00:26:58.699><c> focus</c><00:26:59.119><c> on</c>

00:26:59.229 --> 00:26:59.239 align:start position:0%
assembly right away but just focus on
 

00:26:59.239 --> 00:27:01.869 align:start position:0%
assembly right away but just focus on
the<00:26:59.359><c> parts</c><00:26:59.659><c> that</c><00:26:59.749><c> have</c><00:26:59.989><c> been</c><00:27:00.229><c> highlighted</c><00:27:01.190><c> so</c>

00:27:01.869 --> 00:27:01.879 align:start position:0%
the parts that have been highlighted so
 

00:27:01.879 --> 00:27:04.239 align:start position:0%
the parts that have been highlighted so
first<00:27:02.149><c> of</c><00:27:02.329><c> all</c><00:27:02.419><c> in</c><00:27:02.629><c> orange</c><00:27:03.049><c> you</c><00:27:03.829><c> see</c><00:27:03.859><c> that</c><00:27:04.159><c> the</c>

00:27:04.239 --> 00:27:04.249 align:start position:0%
first of all in orange you see that the
 

00:27:04.249 --> 00:27:07.779 align:start position:0%
first of all in orange you see that the
sequential<00:27:04.639><c> loop</c><00:27:05.389><c> goes</c><00:27:05.989><c> by</c><00:27:06.319><c> one</c><00:27:06.589><c> it</c><00:27:07.069><c> does</c><00:27:07.429><c> one</c>

00:27:07.779 --> 00:27:07.789 align:start position:0%
sequential loop goes by one it does one
 

00:27:07.789 --> 00:27:09.969 align:start position:0%
sequential loop goes by one it does one
byte<00:27:08.119><c> at</c><00:27:08.389><c> a</c><00:27:08.419><c> time</c><00:27:08.539><c> before</c><00:27:09.379><c> it</c><00:27:09.589><c> goes</c><00:27:09.769><c> to</c><00:27:09.949><c> the</c>

00:27:09.969 --> 00:27:09.979 align:start position:0%
byte at a time before it goes to the
 

00:27:09.979 --> 00:27:10.599 align:start position:0%
byte at a time before it goes to the
other<00:27:10.159><c> one</c>

00:27:10.599 --> 00:27:10.609 align:start position:0%
other one
 

00:27:10.609 --> 00:27:14.709 align:start position:0%
other one
in<00:27:10.669><c> contrast</c><00:27:11.569><c> the</c><00:27:12.079><c> same</c><00:27:12.349><c> decode</c><00:27:12.709><c> goes</c><00:27:13.459><c> by</c><00:27:13.759><c> 16</c>

00:27:14.709 --> 00:27:14.719 align:start position:0%
in contrast the same decode goes by 16
 

00:27:14.719 --> 00:27:18.639 align:start position:0%
in contrast the same decode goes by 16
it<00:27:15.019><c> does</c><00:27:15.409><c> 16</c><00:27:15.919><c> bytes</c><00:27:16.129><c> at</c><00:27:16.339><c> the</c><00:27:16.429><c> same</c><00:27:16.609><c> time</c><00:27:17.649><c> the</c>

00:27:18.639 --> 00:27:18.649 align:start position:0%
it does 16 bytes at the same time the
 

00:27:18.649 --> 00:27:19.930 align:start position:0%
it does 16 bytes at the same time the
other<00:27:18.679><c> thing</c><00:27:19.009><c> that</c><00:27:19.039><c> you</c><00:27:19.279><c> notice</c><00:27:19.639><c> is</c><00:27:19.729><c> that</c><00:27:19.789><c> the</c>

00:27:19.930 --> 00:27:19.940 align:start position:0%
other thing that you notice is that the
 

00:27:19.940 --> 00:27:22.959 align:start position:0%
other thing that you notice is that the
loop<00:27:20.239><c> body</c><00:27:21.199><c> is</c><00:27:21.559><c> a</c><00:27:21.619><c> lot</c><00:27:21.859><c> shorter</c><00:27:21.919><c> for</c><00:27:22.699><c> the</c><00:27:22.789><c> same</c>

00:27:22.959 --> 00:27:22.969 align:start position:0%
loop body is a lot shorter for the same
 

00:27:22.969 --> 00:27:25.959 align:start position:0%
loop body is a lot shorter for the same
decode<00:27:23.329><c> and</c><00:27:23.629><c> that's</c><00:27:24.259><c> a</c><00:27:24.589><c> result</c><00:27:25.190><c> of</c><00:27:25.369><c> the</c><00:27:25.549><c> yellow</c>

00:27:25.959 --> 00:27:25.969 align:start position:0%
decode and that's a result of the yellow
 

00:27:25.969 --> 00:27:28.479 align:start position:0%
decode and that's a result of the yellow
highlighted<00:27:26.899><c> instructions</c><00:27:27.469><c> on</c><00:27:27.709><c> the</c><00:27:28.219><c> left</c>

00:27:28.479 --> 00:27:28.489 align:start position:0%
highlighted instructions on the left
 

00:27:28.489 --> 00:27:30.489 align:start position:0%
highlighted instructions on the left
there's<00:27:29.059><c> a</c><00:27:29.149><c> lot</c><00:27:29.419><c> of</c><00:27:29.569><c> instructions</c><00:27:30.109><c> required</c>

00:27:30.489 --> 00:27:30.499 align:start position:0%
there's a lot of instructions required
 

00:27:30.499 --> 00:27:32.379 align:start position:0%
there's a lot of instructions required
to<00:27:30.679><c> do</c><00:27:30.799><c> the</c><00:27:30.919><c> zero</c><00:27:31.159><c> extension</c><00:27:31.909><c> and</c><00:27:32.149><c> the</c>

00:27:32.379 --> 00:27:32.389 align:start position:0%
to do the zero extension and the
 

00:27:32.389 --> 00:27:35.199 align:start position:0%
to do the zero extension and the
rounding<00:27:32.869><c> housing</c><00:27:33.799><c> and</c><00:27:34.039><c> on</c><00:27:34.339><c> the</c><00:27:35.029><c> right</c>

00:27:35.199 --> 00:27:35.209 align:start position:0%
rounding housing and on the right
 

00:27:35.209 --> 00:27:37.479 align:start position:0%
rounding housing and on the right
there's<00:27:35.509><c> a</c><00:27:35.629><c> singles</c><00:27:36.259><c> idiomatic</c><00:27:36.799><c> instruction</c>

00:27:37.479 --> 00:27:37.489 align:start position:0%
there's a singles idiomatic instruction
 

00:27:37.489 --> 00:27:40.629 align:start position:0%
there's a singles idiomatic instruction
that<00:27:37.789><c> can</c><00:27:38.029><c> takes</c><00:27:38.299><c> care</c><00:27:38.599><c> of</c><00:27:38.629><c> that</c><00:27:39.129><c> so</c><00:27:40.129><c> all</c><00:27:40.429><c> this</c>

00:27:40.629 --> 00:27:40.639 align:start position:0%
that can takes care of that so all this
 

00:27:40.639 --> 00:27:44.769 align:start position:0%
that can takes care of that so all this
combined<00:27:41.419><c> makes</c><00:27:42.909><c> sure</c><00:27:43.909><c> that</c><00:27:44.209><c> the</c><00:27:44.359><c> loop</c><00:27:44.509><c> runs</c>

00:27:44.769 --> 00:27:44.779 align:start position:0%
combined makes sure that the loop runs
 

00:27:44.779 --> 00:27:47.889 align:start position:0%
combined makes sure that the loop runs
about<00:27:45.079><c> 10</c><00:27:45.409><c> times</c><00:27:45.619><c> faster</c><00:27:46.339><c> if</c><00:27:46.549><c> you</c><00:27:46.969><c> just</c><00:27:47.209><c> look</c>

00:27:47.889 --> 00:27:47.899 align:start position:0%
about 10 times faster if you just look
 

00:27:47.899 --> 00:27:53.859 align:start position:0%
about 10 times faster if you just look
at<00:27:48.139><c> the</c><00:27:48.619><c> loop</c><00:27:50.799><c> however</c><00:27:51.799><c> if</c><00:27:52.099><c> you</c><00:27:52.969><c> look</c><00:27:53.419><c> at</c><00:27:53.690><c> the</c>

00:27:53.859 --> 00:27:53.869 align:start position:0%
at the loop however if you look at the
 

00:27:53.869 --> 00:27:55.869 align:start position:0%
at the loop however if you look at the
real<00:27:54.079><c> application</c><00:27:54.279><c> where</c><00:27:55.279><c> this</c><00:27:55.429><c> loop</c><00:27:55.699><c> is</c>

00:27:55.869 --> 00:27:55.879 align:start position:0%
real application where this loop is
 

00:27:55.879 --> 00:27:58.029 align:start position:0%
real application where this loop is
actually<00:27:56.239><c> part</c><00:27:56.659><c> of</c><00:27:56.749><c> a</c><00:27:56.899><c> larger</c><00:27:57.349><c> thing</c><00:27:57.769><c> where</c>

00:27:58.029 --> 00:27:58.039 align:start position:0%
actually part of a larger thing where
 

00:27:58.039 --> 00:27:59.859 align:start position:0%
actually part of a larger thing where
there's<00:27:58.219><c> a</c><00:27:58.309><c> like</c><00:27:58.519><c> a</c><00:27:58.549><c> handler</c><00:27:59.059><c> requesting</c><00:27:59.719><c> new</c>

00:27:59.859 --> 00:27:59.869 align:start position:0%
there's a like a handler requesting new
 

00:27:59.869 --> 00:28:01.989 align:start position:0%
there's a like a handler requesting new
pictures<00:28:00.319><c> etc</c><00:28:00.499><c> you</c><00:28:01.399><c> can</c><00:28:01.609><c> see</c><00:28:01.789><c> that</c>

00:28:01.989 --> 00:28:01.999 align:start position:0%
pictures etc you can see that
 

00:28:01.999 --> 00:28:03.639 align:start position:0%
pictures etc you can see that
vectorization<00:28:02.359><c> made</c><00:28:03.319><c> the</c><00:28:03.440><c> difference</c>

00:28:03.639 --> 00:28:03.649 align:start position:0%
vectorization made the difference
 

00:28:03.649 --> 00:28:06.279 align:start position:0%
vectorization made the difference
between<00:28:04.059><c> rendering</c><00:28:05.059><c> at</c><00:28:05.179><c> a</c><00:28:05.209><c> slow</c><00:28:05.569><c> 20</c><00:28:06.079><c> frames</c>

00:28:06.279 --> 00:28:06.289 align:start position:0%
between rendering at a slow 20 frames
 

00:28:06.289 --> 00:28:09.729 align:start position:0%
between rendering at a slow 20 frames
per<00:28:06.529><c> seconds</c><00:28:08.019><c> and</c><00:28:09.019><c> the</c><00:28:09.199><c> fact</c><00:28:09.379><c> of</c><00:28:09.559><c> the</c>

00:28:09.729 --> 00:28:09.739 align:start position:0%
per seconds and the fact of the
 

00:28:09.739 --> 00:28:11.709 align:start position:0%
per seconds and the fact of the
factorization<00:28:10.069><c> we</c><00:28:10.519><c> vendor</c><00:28:10.819><c> at</c><00:28:10.909><c> 60</c><00:28:11.299><c> frames</c><00:28:11.569><c> per</c>

00:28:11.709 --> 00:28:11.719 align:start position:0%
factorization we vendor at 60 frames per
 

00:28:11.719 --> 00:28:13.839 align:start position:0%
factorization we vendor at 60 frames per
second<00:28:12.199><c> and</c><00:28:12.379><c> that's</c><00:28:12.709><c> actually</c><00:28:13.009><c> as</c><00:28:13.309><c> fast</c><00:28:13.639><c> as</c>

00:28:13.839 --> 00:28:13.849 align:start position:0%
second and that's actually as fast as
 

00:28:13.849 --> 00:28:16.059 align:start position:0%
second and that's actually as fast as
you<00:28:13.969><c> can</c><00:28:14.149><c> go</c><00:28:14.359><c> like</c><00:28:15.019><c> you</c><00:28:15.139><c> cannot</c><00:28:15.440><c> render</c><00:28:15.739><c> much</c>

00:28:16.059 --> 00:28:16.069 align:start position:0%
you can go like you cannot render much
 

00:28:16.069 --> 00:28:18.249 align:start position:0%
you can go like you cannot render much
faster<00:28:16.639><c> so</c><00:28:17.239><c> that</c><00:28:17.419><c> really</c><00:28:17.629><c> shows</c><00:28:17.779><c> that</c>

00:28:18.249 --> 00:28:18.259 align:start position:0%
faster so that really shows that
 

00:28:18.259 --> 00:28:20.589 align:start position:0%
faster so that really shows that
factorization<00:28:19.069><c> has</c><00:28:19.549><c> given</c><00:28:20.029><c> you</c><00:28:20.119><c> the</c><00:28:20.269><c> power</c><00:28:20.299><c> to</c>

00:28:20.589 --> 00:28:20.599 align:start position:0%
factorization has given you the power to
 

00:28:20.599 --> 00:28:22.280 align:start position:0%
factorization has given you the power to
render<00:28:20.869><c> at</c><00:28:21.139><c> a</c><00:28:21.169><c> very</c><00:28:21.440><c> acceptable</c>

00:28:22.280 --> 00:28:22.290 align:start position:0%
render at a very acceptable
 

00:28:22.290 --> 00:28:24.650 align:start position:0%
render at a very acceptable
and<00:28:22.800><c> you</c><00:28:22.920><c> actually</c><00:28:23.130><c> have</c><00:28:23.520><c> CPU</c><00:28:23.940><c> cycles</c><00:28:24.480><c> to</c>

00:28:24.650 --> 00:28:24.660 align:start position:0%
and you actually have CPU cycles to
 

00:28:24.660 --> 00:28:26.630 align:start position:0%
and you actually have CPU cycles to
spare<00:28:25.050><c> because</c><00:28:25.530><c> it</c><00:28:25.830><c> doesn't</c><00:28:26.190><c> need</c><00:28:26.310><c> the</c><00:28:26.430><c> full</c>

00:28:26.630 --> 00:28:26.640 align:start position:0%
spare because it doesn't need the full
 

00:28:26.640 --> 00:28:28.940 align:start position:0%
spare because it doesn't need the full
power<00:28:26.670><c> to</c><00:28:27.150><c> go</c><00:28:27.300><c> to</c><00:28:27.360><c> the</c><00:28:27.570><c> 60</c><00:28:27.930><c> frames</c><00:28:28.110><c> per</c><00:28:28.350><c> second</c>

00:28:28.940 --> 00:28:28.950 align:start position:0%
power to go to the 60 frames per second
 

00:28:28.950 --> 00:28:32.300 align:start position:0%
power to go to the 60 frames per second
and<00:28:29.480><c> all</c><00:28:30.480><c> this</c><00:28:30.720><c> was</c><00:28:31.350><c> made</c><00:28:31.560><c> possible</c><00:28:31.590><c> by</c><00:28:32.100><c> the</c>

00:28:32.300 --> 00:28:32.310 align:start position:0%
and all this was made possible by the
 

00:28:32.310 --> 00:28:34.970 align:start position:0%
and all this was made possible by the
vectorization<00:28:32.760><c> you</c><00:28:33.270><c> don't</c><00:28:33.510><c> need</c><00:28:33.720><c> to</c><00:28:34.380><c> write</c>

00:28:34.970 --> 00:28:34.980 align:start position:0%
vectorization you don't need to write
 

00:28:34.980 --> 00:28:38.600 align:start position:0%
vectorization you don't need to write
like<00:28:35.750><c> T</c><00:28:36.750><c> DS</c><00:28:36.930><c> NDK</c><00:28:37.470><c> code</c><00:28:37.770><c> anymore</c><00:28:38.040><c> you</c><00:28:38.430><c> can</c><00:28:38.580><c> just</c>

00:28:38.600 --> 00:28:38.610 align:start position:0%
like T DS NDK code anymore you can just
 

00:28:38.610 --> 00:28:43.490 align:start position:0%
like T DS NDK code anymore you can just
Express<00:28:39.180><c> the</c><00:28:39.210><c> loop</c><00:28:40.050><c> at</c><00:28:40.260><c> source</c><00:28:40.530><c> platform</c>

00:28:43.490 --> 00:28:43.500 align:start position:0%
 
 

00:28:43.500 --> 00:28:57.429 align:start position:0%
 
[Music]

