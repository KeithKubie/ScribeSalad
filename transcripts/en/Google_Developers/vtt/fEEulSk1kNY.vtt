WEBVTT
Kind: captions
Language: en

00:00:02.780 --> 00:00:05.110
Let's take a moment to make
something insanely clear.

00:00:05.110 --> 00:00:07.110
As far as battery's
concerned, networking

00:00:07.110 --> 00:00:09.995
is the biggest, baddest,
dirtiest offender there is.

00:00:09.995 --> 00:00:11.870
My name is Colt McAnlis,
and the largest wins

00:00:11.870 --> 00:00:14.151
that you can get with
respect to battery efficiency

00:00:14.151 --> 00:00:16.650
are going to come from adjusting
how you use your networking

00:00:16.650 --> 00:00:17.151
hardware.

00:00:17.151 --> 00:00:19.650
Remember that inside your phone
is a small piece of hardware

00:00:19.650 --> 00:00:21.190
that's effectively a ham radio.

00:00:21.190 --> 00:00:23.320
Its whole purpose is to
communicate with local cell

00:00:23.320 --> 00:00:26.042
towers and transmit data
to them at high volumes.

00:00:26.042 --> 00:00:28.250
The trick here, though, is
that the chip isn't always

00:00:28.250 --> 00:00:29.540
active in drawing power.

00:00:29.540 --> 00:00:30.920
It starts in a
powered down state

00:00:30.920 --> 00:00:32.628
and then when some
data needs to be sent,

00:00:32.628 --> 00:00:34.620
it turns on and
transfers the data.

00:00:34.620 --> 00:00:36.690
Once the packet is
sent, the radio chip

00:00:36.690 --> 00:00:39.020
will stay awake for a
while just in case there's

00:00:39.020 --> 00:00:40.840
a response from the server.

00:00:40.840 --> 00:00:43.090
If there's no activity after
a certain amount of time,

00:00:43.090 --> 00:00:45.180
the radio will then go
back to sleep in order

00:00:45.180 --> 00:00:46.102
to save battery life.

00:00:46.102 --> 00:00:47.685
What's important
here is understanding

00:00:47.685 --> 00:00:50.110
that at each stage of
the radio's life cycle,

00:00:50.110 --> 00:00:52.200
it draws different
amounts of battery.

00:00:52.200 --> 00:00:55.080
See there's a high battery drain
when the chip first wakes up,

00:00:55.080 --> 00:00:58.560
some additional spikes when
packets are sent and received,

00:00:58.560 --> 00:01:01.050
and then finally, a continuous
draw for the duration of the

00:01:01.050 --> 00:01:02.440
keep awake time.

00:01:02.440 --> 00:01:04.700
As such, optimizing
your networking hardware

00:01:04.700 --> 00:01:06.920
that uses battery
has everything to do

00:01:06.920 --> 00:01:10.680
with when you transfer data
and how you transfer data.

00:01:10.680 --> 00:01:12.860
Let's start by taking a
look at the when part.

00:01:12.860 --> 00:01:15.000
Firstly, understand that there's
a difference between networking

00:01:15.000 --> 00:01:17.220
tasks that have to happen
right now versus ones

00:01:17.220 --> 00:01:18.290
that can be delayed.

00:01:18.290 --> 00:01:20.140
For example, the
user clicks refresh

00:01:20.140 --> 00:01:22.540
to load a new batch of tweets
for a trending hashtag.

00:01:22.540 --> 00:01:25.010
Since this is a
user-initiated action,

00:01:25.010 --> 00:01:26.856
your app should
respond immediately,

00:01:26.856 --> 00:01:28.230
which is a different
kind of work

00:01:28.230 --> 00:01:31.140
than uploading analytics data,
or sinking background tasks,

00:01:31.140 --> 00:01:33.290
or resizing all of
your social photos.

00:01:33.290 --> 00:01:35.390
Well the first set has
to happen immediately

00:01:35.390 --> 00:01:37.270
in order to provide
feedback to the user.

00:01:37.270 --> 00:01:39.220
The second set can
easily be deferred

00:01:39.220 --> 00:01:41.010
or pushed it off
until a later time

00:01:41.010 --> 00:01:43.860
when it may be more efficient
for the battery to do so.

00:01:43.860 --> 00:01:45.650
You can see how bad
of a problem this

00:01:45.650 --> 00:01:48.920
is by running Battery Historian
and looking at the mobile Radio

00:01:48.920 --> 00:01:50.830
Row for your application.

00:01:50.830 --> 00:01:52.980
Each of those red
bars represent when

00:01:52.980 --> 00:01:54.520
the mobile radio is active.

00:01:54.520 --> 00:01:56.630
Any gaps between
those bars represent

00:01:56.630 --> 00:01:58.340
when the radio is asleep.

00:01:58.340 --> 00:02:00.530
If you see lots of
narrow bars and gaps,

00:02:00.530 --> 00:02:02.280
this can point to
performance problems

00:02:02.280 --> 00:02:04.613
since it means that you're
churning through lots of wake

00:02:04.613 --> 00:02:06.920
up and sleep iterations
for your radio chip.

00:02:06.920 --> 00:02:09.199
Now you can improve
this pattern slightly

00:02:09.199 --> 00:02:10.750
by deferring work at run time.

00:02:10.750 --> 00:02:12.980
That is, rather than
doing a request each time

00:02:12.980 --> 00:02:15.660
it's being demanded, instead
batch all that work together

00:02:15.660 --> 00:02:19.330
and execute it in one large
push at a future time.

00:02:19.330 --> 00:02:20.950
You can see the
result of this back

00:02:20.950 --> 00:02:22.480
in Battery Historian,
which you'll

00:02:22.480 --> 00:02:26.744
see large blocks of red activity
coupled with large gaps.

00:02:26.744 --> 00:02:28.160
The battery
improvement here comes

00:02:28.160 --> 00:02:30.120
from removing the
per instance wake up

00:02:30.120 --> 00:02:33.425
and wait costs and averages is
it over a number of requests.

00:02:33.425 --> 00:02:35.050
And, of course, you
can defer that work

00:02:35.050 --> 00:02:37.850
to an even later time, like
when the phone is on Wi-Fi

00:02:37.850 --> 00:02:39.030
or plugged it.

00:02:39.030 --> 00:02:40.610
In both cases,
networking requests

00:02:40.610 --> 00:02:43.100
will be a lot more
efficient on battery.

00:02:43.100 --> 00:02:45.970
Of course, the problem is that
writing code to batch, cash,

00:02:45.970 --> 00:02:47.620
and defer all these
networking requests

00:02:47.620 --> 00:02:50.750
can be a really, really
difficult job to get done,

00:02:50.750 --> 00:02:52.230
which is why we've
done it for you.

00:02:52.230 --> 00:02:54.200
The job scheduler
API that rolled out

00:02:54.200 --> 00:02:56.450
with the L release of
Android provides a full suite

00:02:56.450 --> 00:02:59.910
of functions that do all of this
work and more on your behalf.

00:02:59.910 --> 00:03:01.109
Make sure you take a look.

00:03:01.109 --> 00:03:03.650
Now for the stuff that has to
happen right now-- like pulling

00:03:03.650 --> 00:03:05.190
down those awesome
hashtags-- you

00:03:05.190 --> 00:03:08.230
can still do a lot of things to
help reduce the burden there.

00:03:08.230 --> 00:03:10.702
Firstly, you should take
advantage of pre-fetching.

00:03:10.702 --> 00:03:12.660
Effectively, try to
predict what the user might

00:03:12.660 --> 00:03:15.230
need in the next five to
10 minutes, or one to five

00:03:15.230 --> 00:03:16.920
megs of data,
whichever is larger.

00:03:16.920 --> 00:03:18.840
And fetch that
content ahead of time.

00:03:18.840 --> 00:03:20.340
So that you can
eliminate the burden

00:03:20.340 --> 00:03:23.470
of those smaller individual
requests over that future time

00:03:23.470 --> 00:03:24.110
frame.

00:03:24.110 --> 00:03:27.400
Secondly, make sure that your
highly compressing any content

00:03:27.400 --> 00:03:30.220
that you have control over
uploading or downloading.

00:03:30.220 --> 00:03:33.390
In general, the battery
performance of the CPU cycles

00:03:33.390 --> 00:03:36.200
needed to compress or
decompress that content is often

00:03:36.200 --> 00:03:38.490
going to be much lower
than the overhead of what

00:03:38.490 --> 00:03:42.130
the radio would use to transfer
that payload across the net.

00:03:42.130 --> 00:03:44.640
And if you're ever wondering
how your app is using

00:03:44.640 --> 00:03:47.470
its networking resources, check
out the Networking Profiling

00:03:47.470 --> 00:03:49.820
Tool inside of Android
Studio, which will give you

00:03:49.820 --> 00:03:52.260
a broad overview of
run networking requests

00:03:52.260 --> 00:03:54.930
recur, how long they
occur, and how much data

00:03:54.930 --> 00:03:56.932
they transfer along
the way with them.

00:03:56.932 --> 00:03:59.390
But of course, there's tons of
other things that you can do

00:03:59.390 --> 00:04:01.630
to help optimize battery
draining in your applications,

00:04:01.630 --> 00:04:04.005
which is why you should check
out the rest of the Android

00:04:04.005 --> 00:04:06.620
Performance Patterns resources
and join the Google+ community

00:04:06.620 --> 00:04:09.040
for other great advice from
developers in the trenches.

00:04:09.040 --> 00:04:11.880
So keep calm, profile your
code, and always remember,

00:04:11.880 --> 00:04:13.730
perf matters.

