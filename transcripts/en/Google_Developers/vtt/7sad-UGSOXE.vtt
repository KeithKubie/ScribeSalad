WEBVTT
Kind: captions
Language: en

00:00:01.040 --> 00:00:05.740
Hi, welcome to the WebGL
debugging screencast. In this

00:00:05.740 --> 00:00:09.400
screencast, I'm going to go
through the basics of

00:00:09.400 --> 00:00:12.900
debugging your WebGL
applications.

00:00:12.900 --> 00:00:19.010
To get started, I have here the
Khronos WebGL wiki page

00:00:19.010 --> 00:00:20.580
about debugging.

00:00:20.580 --> 00:00:23.105
This is a nice source
of links.

00:00:23.105 --> 00:00:26.270
It links you to WebGL Inspector,
which is nice for

00:00:26.270 --> 00:00:28.320
WebGL debugging.

00:00:28.320 --> 00:00:33.950
It also has a link to the WebGL
debug scripts, which is

00:00:33.950 --> 00:00:37.400
a little piece of JavaScript
that gives you tools to debug

00:00:37.400 --> 00:00:40.500
your WebGL applications.

00:00:40.500 --> 00:00:48.010
In particular, it has got a
WebGL debug context, which is

00:00:48.010 --> 00:00:55.930
a special wrapper for a WebGL
context that makes all GL

00:00:55.930 --> 00:00:59.990
errors show up in the
JavaScript console.

00:00:59.990 --> 00:01:06.290
So you can also customize
it to do

00:01:06.290 --> 00:01:08.110
JavaScript style error handling.

00:01:08.110 --> 00:01:14.120
So that instead of getting back
an error number, you can

00:01:14.120 --> 00:01:18.250
make it actually throw an
exception when you get an

00:01:18.250 --> 00:01:20.330
error on a GL call.

00:01:20.330 --> 00:01:25.740
And what the debug context does
is after each call to GL,

00:01:25.740 --> 00:01:30.570
it calls gl.geterror to
get the error code.

00:01:30.570 --> 00:01:37.200
This causes a performance
penalty if you use it in your

00:01:37.200 --> 00:01:38.060
production code.

00:01:38.060 --> 00:01:40.045
But for debugging, it's great.

00:01:43.550 --> 00:01:48.290
It also has this little
function,

00:01:48.290 --> 00:01:53.915
WebGLDebugUtils.glEnumToString,
which lets you take one of

00:01:53.915 --> 00:01:58.980
those cryptic error codes and
gets the name for the error.

00:01:58.980 --> 00:02:00.230
Very useful.

00:02:02.990 --> 00:02:07.420
Next, I'm going to show you
the WebGL Inspector.

00:02:07.420 --> 00:02:11.610
So the WebGL Inspector
is a little Chrome

00:02:11.610 --> 00:02:14.380
extension by Ben Vanik.

00:02:14.380 --> 00:02:20.750
And it's probably easier to
show you what it does.

00:02:20.750 --> 00:02:23.390
So it is on GetHub,
benvanik.gethub.

00:02:23.390 --> 00:02:24.640
com/WebGL-Inspector.

00:02:27.740 --> 00:02:33.220
I'm going to show you the live
demo of the WebGL Inspector.

00:02:33.220 --> 00:02:37.430
So here we have a WebGL demo
running on the screen.

00:02:37.430 --> 00:02:44.430
And click on the UI button, we
get the WebGL Inspector.

00:02:44.430 --> 00:02:47.200
And now I'm going to go through

00:02:47.200 --> 00:02:49.720
some of the easy features.

00:02:49.720 --> 00:02:58.800
So Programs tab, you have got
the shaders and the GL

00:02:58.800 --> 00:03:05.530
programs. And these have the
uniforms, the attributes, the

00:03:05.530 --> 00:03:10.970
shader sources, the status
for the shaders.

00:03:10.970 --> 00:03:13.480
So if you've got problems
with your shaders,

00:03:13.480 --> 00:03:15.610
you can see it here.

00:03:15.610 --> 00:03:19.770
Then there's a Buffers pane,
which shows you all the

00:03:19.770 --> 00:03:24.092
buffers used in your
WebGL program.

00:03:24.092 --> 00:03:28.750
And here you can see what is
inside of buffer, what is the

00:03:28.750 --> 00:03:35.980
size of the buffer, and
what has been done

00:03:35.980 --> 00:03:39.430
to the buffer recently.

00:03:39.430 --> 00:03:40.610
If we look up--

00:03:40.610 --> 00:03:42.380
I think it's this one.

00:03:42.380 --> 00:03:49.160
Yeah, here we have
an 89k buffer.

00:03:49.160 --> 00:03:52.180
And here is a 600k buffer.

00:03:52.180 --> 00:03:56.070
And with these, you don't see
the buffer contents directly.

00:03:56.070 --> 00:04:00.770
But you have to click on this
link to show them, which I'm

00:04:00.770 --> 00:04:04.230
not going to click, because I
think it's going to crash the

00:04:04.230 --> 00:04:05.900
browser if I do that.

00:04:09.716 --> 00:04:10.410
I'll do that anyway.

00:04:10.410 --> 00:04:13.740
Let's see what happens.

00:04:13.740 --> 00:04:15.570
Yeah.

00:04:15.570 --> 00:04:19.700
OK, well, that was surprisingly
fast. So 89k

00:04:19.700 --> 00:04:22.870
buffer, perfectly OK.

00:04:22.870 --> 00:04:24.120
No problem.

00:04:26.130 --> 00:04:29.040
You also have a Textures pane
that shows you all the

00:04:29.040 --> 00:04:35.900
textures in your WebGL
application, texture settings

00:04:35.900 --> 00:04:40.550
and what has been done
to the texture.

00:04:40.550 --> 00:04:45.190
And in the Textures pane, you
can see all the textures in

00:04:45.190 --> 00:04:46.830
your WebGL program.

00:04:46.830 --> 00:04:51.250
And you can see the texture
parameters for each texture

00:04:51.250 --> 00:04:53.170
and the texture content.

00:04:53.170 --> 00:04:59.090
Because this is a texture that
was passed as a null texture--

00:04:59.090 --> 00:05:04.460
that is it is a GPU site texture
that the WebGL program

00:05:04.460 --> 00:05:06.610
is editing in the GPU--

00:05:06.610 --> 00:05:11.430
we don't see anything in
the texture contents.

00:05:11.430 --> 00:05:16.780
This is one problem with WebGL
Inspector at the moment which

00:05:16.780 --> 00:05:19.186
I think could be fixed.

00:05:21.910 --> 00:05:24.950
But if you have a normal
texture, you should see the

00:05:24.950 --> 00:05:26.210
contents of the texture A-OK.

00:05:29.000 --> 00:05:34.000
In the State panel, you get a
state snapshot of the current

00:05:34.000 --> 00:05:36.000
WebGL context state.

00:05:36.000 --> 00:05:42.660
It has all the blending and
the blend colors, color

00:05:42.660 --> 00:05:48.563
values, maximum attributes
and such like.

00:05:51.710 --> 00:05:57.490
In the Timeline pane, you can
see what's happening in your

00:05:57.490 --> 00:05:59.160
WebGL program.

00:05:59.160 --> 00:06:04.480
The timeline view shows you what
you are doing with WebGL.

00:06:04.480 --> 00:06:09.080
So it shows you how much time
it takes per frame to render

00:06:09.080 --> 00:06:10.230
your WebGL scene.

00:06:10.230 --> 00:06:13.670
And it shows you how many
textures you are allocating,

00:06:13.670 --> 00:06:19.244
how many programs you are
using, and so on.

00:06:19.244 --> 00:06:21.350
Now If we go the Trace panel--

00:06:21.350 --> 00:06:24.010
this is the first panel, but
I'm taking the class.

00:06:24.010 --> 00:06:27.660
So the Trace panel is the last
panel that I'm going to go to.

00:06:27.660 --> 00:06:30.610
And when I click on the Capture
button, what I get

00:06:30.610 --> 00:06:37.350
here is what happened
during this frame.

00:06:37.350 --> 00:06:43.710
Here's the image that was drawn,
and then all the DL

00:06:43.710 --> 00:06:50.610
calls we did to draw
that frame.

00:06:50.610 --> 00:06:53.430
Very useful, very nice.

00:06:53.430 --> 00:06:54.670
Let's move on.

00:06:54.670 --> 00:07:01.550
So for Unit Testing GL, the Maps
GL team here at Google

00:07:01.550 --> 00:07:05.280
built this little thing,
glsl-unit, which is a unit

00:07:05.280 --> 00:07:11.530
testing framework for GLSL
code in the WebGL.

00:07:11.530 --> 00:07:12.910
And--

00:07:12.910 --> 00:07:15.505
testing frameworks that allows
you to write and run Unit

00:07:15.505 --> 00:07:19.000
Tests for your WebGL
GLSL code.

00:07:19.000 --> 00:07:22.560
GLSL units will run your test
code on the graphics card and

00:07:22.560 --> 00:07:24.030
extract the results.

00:07:24.030 --> 00:07:27.910
So it will be identical to the
execution environment of your

00:07:27.910 --> 00:07:30.170
shader coding production.

00:07:30.170 --> 00:07:32.850
And that is the great thing
about GLSL units.

00:07:36.110 --> 00:07:39.080
If you want to hear more about
GLSL units and how the Maps

00:07:39.080 --> 00:07:47.240
team was developing WebGL, you
can go to this YouTube talk

00:07:47.240 --> 00:07:50.460
from GTAC 2011.

00:07:50.460 --> 00:07:55.680
It's Developing and
Testing WebGL.

00:07:55.680 --> 00:07:59.690
It's by Roy Williams, one
of the MapsGL engineers.

00:07:59.690 --> 00:08:05.540
And GTAC stands for Google Test
Automation Conference.

00:08:05.540 --> 00:08:11.750
And this is a great talk for
real-life WebGL use in a

00:08:11.750 --> 00:08:13.950
non-game setting.

00:08:13.950 --> 00:08:17.240
So go there and check it out.

00:08:17.240 --> 00:08:21.650
This is about all I have
to say about WebGL

00:08:21.650 --> 00:08:22.840
debugging for now.

00:08:22.840 --> 00:08:27.110
So thanks for watching
and get hacking.

