WEBVTT
Kind: captions
Language: en

00:00:00.840 --> 00:00:04.560
So much of mapping is focused
on lat long coordinates, but

00:00:04.560 --> 00:00:06.450
who ever knows those?

00:00:06.450 --> 00:00:11.250
A really important feature in the Google
Maps APIs is the ability to go back and

00:00:11.250 --> 00:00:15.800
forth between lat longs and places,
like the happiest place on earth.

00:00:15.800 --> 00:00:20.660
This is called geo coding, taking
an address and getting the lat wrong.

00:00:21.670 --> 00:00:25.875
And reverse geocoding, getting
the address or place from a lat long.

00:00:27.180 --> 00:00:30.480
We'll test out using the geocoding API,

00:00:30.480 --> 00:00:34.520
VN HTTP request,
to get a lat long back from an address.

00:00:36.300 --> 00:00:38.390
I copied this request right
from our developer sites.

00:00:39.520 --> 00:00:42.470
All of the requests start out
in the same name space, and

00:00:42.470 --> 00:00:48.300
then specify the service, and the output
format, in either JSON or XML.

00:00:48.300 --> 00:00:50.930
We then specify the input parameters.

00:00:50.930 --> 00:00:55.299
The required parameters here are only
the address and your API key.

00:00:55.299 --> 00:00:59.394
We can also optionally include things
such as the component restriction,

00:00:59.394 --> 00:01:02.170
to limit the results to a city or
a country.

00:01:02.170 --> 00:01:05.774
Or a region bias to tell the geocoder
that certain regions are better than

00:01:05.774 --> 00:01:07.798
others for the results that you expect.

00:01:07.798 --> 00:01:10.592
Let's execute this and
see what we get back.

00:01:10.592 --> 00:01:13.576
Okay, at the highest level we
get back a few things here.

00:01:13.576 --> 00:01:17.170
The first thing that we'll
look at its the status.

00:01:17.170 --> 00:01:20.150
This tells us whether our
request was successful, and

00:01:20.150 --> 00:01:23.870
is also largely shared between
the various web services.

00:01:23.870 --> 00:01:25.650
There are several
possibilities that we can see.

00:01:25.650 --> 00:01:30.320
OK, means it found one or more results,
so that is the one we want.

00:01:31.880 --> 00:01:34.919
Invalid request, means something
wasn't right in our request.

00:01:36.130 --> 00:01:39.220
Unknown error, usually means there's
some kind of error on the server, and

00:01:39.220 --> 00:01:42.090
the request can be repeated
until it's successful.

00:01:42.090 --> 00:01:44.868
We'll talk later about over
query limit errors and

00:01:44.868 --> 00:01:48.305
also request denied errors, so
don't worry about those yet.

00:01:48.305 --> 00:01:53.028
The address component section has
information broken down into things such

00:01:53.028 --> 00:01:56.800
as street, town, neighborhood,
country, state, etc.

00:01:57.930 --> 00:02:01.330
We also get a formatted address
that we can use on its own.

00:02:01.330 --> 00:02:05.490
The geometry contains the lat
long of the actual location and

00:02:05.490 --> 00:02:07.350
other important info.

00:02:07.350 --> 00:02:11.608
And finally we get a place ID which
is another unique identifier for any

00:02:11.608 --> 00:02:16.462
place ranging from a whole country down
to the granularity of a single address.

00:02:16.462 --> 00:02:19.710
We'll use that in conjunction with
the places API later in the course.

00:02:21.260 --> 00:02:24.750
Right now we're interested in
the geometry, so let's focus on that.

00:02:24.750 --> 00:02:28.471
This location is the lat
long that we're looking for.

00:02:28.471 --> 00:02:32.020
The location type is
also very important.

00:02:32.020 --> 00:02:33.970
This tells us more about
the point that we got back.

00:02:35.140 --> 00:02:38.980
Since this is a rooftop, it means we
got an exact match for our location.

00:02:40.300 --> 00:02:44.245
Other values could be range interpolated
which means that the geocoder

00:02:44.245 --> 00:02:47.615
approximated a point based
on surrounding points.

00:02:47.615 --> 00:02:51.715
Or geometric center, which means
that we got the center of a line.

00:02:51.715 --> 00:02:55.145
For example, if we had searched only for
a road without an address,

00:02:55.145 --> 00:02:56.559
we would get the center of that road.

00:02:57.720 --> 00:03:00.480
Let's take another look at
the address components.

00:03:00.480 --> 00:03:03.940
If we had done reverse geocoding,
for example, and specified

00:03:03.940 --> 00:03:08.200
a lat long in our request instead of an
address, we'd be looking for this data.

00:03:08.200 --> 00:03:13.150
We can get the exact street address, or
we can pull out other useful things.

00:03:13.150 --> 00:03:15.170
For example, the county, or

00:03:15.170 --> 00:03:18.890
that this address is on
the Upper East Side of Manhattan.

00:03:18.890 --> 00:03:23.630
Typically, the components contain more
information than the formatted address.

00:03:23.630 --> 00:03:25.455
So if you needed
the detailed information,

00:03:25.455 --> 00:03:27.555
you'd need to parse through them.

00:03:27.555 --> 00:03:30.105
The link in the instructor
notes has some detailed info on

00:03:30.105 --> 00:03:31.125
all the address components.

00:03:32.195 --> 00:03:34.695
&gt;&gt; Before we go back and
improve our listings app

00:03:34.695 --> 00:03:38.345
let's review some stuff about
the HTTP requests and responses.

