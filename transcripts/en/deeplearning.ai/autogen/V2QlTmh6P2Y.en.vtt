WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.840 align:start position:0%
 
the<00:00:00.480><c> ability</c><00:00:00.960><c> of</c><00:00:01.230><c> pythons</c><00:00:01.770><c> allows</c><00:00:02.220><c> you</c><00:00:02.460><c> to</c><00:00:02.700><c> use</c>

00:00:02.840 --> 00:00:02.850 align:start position:0%
the ability of pythons allows you to use
 

00:00:02.850 --> 00:00:05.480 align:start position:0%
the ability of pythons allows you to use
broadcasting<00:00:03.720><c> operations</c><00:00:04.380><c> and</c><00:00:05.220><c> more</c>

00:00:05.480 --> 00:00:05.490 align:start position:0%
broadcasting operations and more
 

00:00:05.490 --> 00:00:07.670 align:start position:0%
broadcasting operations and more
generally<00:00:06.000><c> the</c><00:00:06.029><c> great</c><00:00:06.420><c> flexibility</c><00:00:07.109><c> of</c><00:00:07.500><c> the</c>

00:00:07.670 --> 00:00:07.680 align:start position:0%
generally the great flexibility of the
 

00:00:07.680 --> 00:00:10.280 align:start position:0%
generally the great flexibility of the
Python<00:00:08.130><c> numpy</c><00:00:08.610><c> programming</c><00:00:09.150><c> language</c><00:00:09.540><c> is</c><00:00:09.690><c> I</c>

00:00:10.280 --> 00:00:10.290 align:start position:0%
Python numpy programming language is I
 

00:00:10.290 --> 00:00:12.410 align:start position:0%
Python numpy programming language is I
think<00:00:10.349><c> both</c><00:00:10.920><c> our</c><00:00:11.099><c> strength</c><00:00:11.429><c> as</c><00:00:11.639><c> well</c><00:00:12.210><c> as</c><00:00:12.389><c> a</c>

00:00:12.410 --> 00:00:12.420 align:start position:0%
think both our strength as well as a
 

00:00:12.420 --> 00:00:14.419 align:start position:0%
think both our strength as well as a
weakness<00:00:12.750><c> of</c><00:00:13.380><c> the</c><00:00:13.559><c> programming</c><00:00:13.830><c> language</c><00:00:13.889><c> I</c>

00:00:14.419 --> 00:00:14.429 align:start position:0%
weakness of the programming language I
 

00:00:14.429 --> 00:00:16.700 align:start position:0%
weakness of the programming language I
think<00:00:15.150><c> it's</c><00:00:15.269><c> a</c><00:00:15.360><c> strength</c><00:00:15.630><c> because</c><00:00:16.199><c> the</c><00:00:16.470><c> great</c>

00:00:16.700 --> 00:00:16.710 align:start position:0%
think it's a strength because the great
 

00:00:16.710 --> 00:00:18.470 align:start position:0%
think it's a strength because the great
expressivity<00:00:17.310><c> of</c><00:00:17.730><c> the</c><00:00:17.850><c> language</c><00:00:18.270><c> to</c><00:00:18.359><c> create</c>

00:00:18.470 --> 00:00:18.480 align:start position:0%
expressivity of the language to create
 

00:00:18.480 --> 00:00:20.630 align:start position:0%
expressivity of the language to create
flexibility<00:00:19.170><c> of</c><00:00:19.320><c> the</c><00:00:19.410><c> language</c><00:00:19.800><c> lets</c><00:00:20.279><c> you</c><00:00:20.460><c> get</c>

00:00:20.630 --> 00:00:20.640 align:start position:0%
flexibility of the language lets you get
 

00:00:20.640 --> 00:00:22.310 align:start position:0%
flexibility of the language lets you get
a<00:00:20.699><c> lot</c><00:00:20.910><c> done</c><00:00:20.939><c> you</c><00:00:21.449><c> know</c><00:00:21.539><c> with</c><00:00:21.660><c> even</c><00:00:22.020><c> just</c><00:00:22.230><c> a</c>

00:00:22.310 --> 00:00:22.320 align:start position:0%
a lot done you know with even just a
 

00:00:22.320 --> 00:00:24.740 align:start position:0%
a lot done you know with even just a
single<00:00:22.680><c> line</c><00:00:22.859><c> of</c><00:00:22.890><c> code</c><00:00:23.180><c> but</c><00:00:24.180><c> there's</c><00:00:24.449><c> also</c><00:00:24.600><c> a</c>

00:00:24.740 --> 00:00:24.750 align:start position:0%
single line of code but there's also a
 

00:00:24.750 --> 00:00:27.439 align:start position:0%
single line of code but there's also a
weakness<00:00:24.960><c> because</c><00:00:25.439><c> with</c><00:00:26.189><c> broadcasting</c><00:00:27.150><c> and</c>

00:00:27.439 --> 00:00:27.449 align:start position:0%
weakness because with broadcasting and
 

00:00:27.449 --> 00:00:28.970 align:start position:0%
weakness because with broadcasting and
this<00:00:27.660><c> great</c><00:00:28.019><c> amount</c><00:00:28.289><c> of</c><00:00:28.410><c> flexibility</c>

00:00:28.970 --> 00:00:28.980 align:start position:0%
this great amount of flexibility
 

00:00:28.980 --> 00:00:31.130 align:start position:0%
this great amount of flexibility
sometimes<00:00:29.880><c> is</c><00:00:30.210><c> possible</c><00:00:30.720><c> we</c><00:00:30.840><c> can</c><00:00:30.960><c> introduce</c>

00:00:31.130 --> 00:00:31.140 align:start position:0%
sometimes is possible we can introduce
 

00:00:31.140 --> 00:00:33.170 align:start position:0%
sometimes is possible we can introduce
very<00:00:31.650><c> subtle</c><00:00:32.189><c> bugs</c><00:00:32.399><c> a</c><00:00:32.520><c> very</c><00:00:32.700><c> strange-looking</c>

00:00:33.170 --> 00:00:33.180 align:start position:0%
very subtle bugs a very strange-looking
 

00:00:33.180 --> 00:00:35.479 align:start position:0%
very subtle bugs a very strange-looking
bugs<00:00:33.690><c> if</c><00:00:34.079><c> you</c><00:00:34.320><c> aren't</c><00:00:34.500><c> familiar</c><00:00:34.620><c> with</c><00:00:35.190><c> all</c><00:00:35.340><c> of</c>

00:00:35.479 --> 00:00:35.489 align:start position:0%
bugs if you aren't familiar with all of
 

00:00:35.489 --> 00:00:37.520 align:start position:0%
bugs if you aren't familiar with all of
the<00:00:35.579><c> intricacies</c><00:00:36.239><c> of</c><00:00:36.270><c> how</c><00:00:36.570><c> broadcasting</c><00:00:37.350><c> and</c>

00:00:37.520 --> 00:00:37.530 align:start position:0%
the intricacies of how broadcasting and
 

00:00:37.530 --> 00:00:39.830 align:start position:0%
the intricacies of how broadcasting and
how<00:00:37.590><c> features</c><00:00:37.860><c> like</c><00:00:38.190><c> broadcasting</c><00:00:38.790><c> work</c><00:00:38.969><c> for</c>

00:00:39.830 --> 00:00:39.840 align:start position:0%
how features like broadcasting work for
 

00:00:39.840 --> 00:00:42.170 align:start position:0%
how features like broadcasting work for
example<00:00:39.989><c> if</c><00:00:40.440><c> you</c><00:00:40.649><c> take</c><00:00:40.890><c> a</c><00:00:40.950><c> column</c><00:00:41.790><c> vector</c><00:00:42.149><c> and</c>

00:00:42.170 --> 00:00:42.180 align:start position:0%
example if you take a column vector and
 

00:00:42.180 --> 00:00:44.720 align:start position:0%
example if you take a column vector and
add<00:00:42.629><c> it</c><00:00:42.809><c> to</c><00:00:42.840><c> a</c><00:00:43.020><c> row</c><00:00:43.260><c> vector</c><00:00:43.710><c> you</c><00:00:44.219><c> might</c><00:00:44.399><c> expect</c>

00:00:44.720 --> 00:00:44.730 align:start position:0%
add it to a row vector you might expect
 

00:00:44.730 --> 00:00:46.700 align:start position:0%
add it to a row vector you might expect
it<00:00:44.940><c> to</c><00:00:45.180><c> throw</c><00:00:45.450><c> up</c><00:00:45.510><c> a</c><00:00:45.660><c> you</c><00:00:46.079><c> know</c><00:00:46.170><c> dimension</c>

00:00:46.700 --> 00:00:46.710 align:start position:0%
it to throw up a you know dimension
 

00:00:46.710 --> 00:00:48.590 align:start position:0%
it to throw up a you know dimension
mismatch<00:00:47.100><c> or</c><00:00:47.309><c> type</c><00:00:47.610><c> error</c><00:00:47.910><c> or</c><00:00:48.090><c> something</c>

00:00:48.590 --> 00:00:48.600 align:start position:0%
mismatch or type error or something
 

00:00:48.600 --> 00:00:51.049 align:start position:0%
mismatch or type error or something
but<00:00:48.750><c> you</c><00:00:49.350><c> might</c><00:00:49.559><c> actually</c><00:00:49.800><c> get</c><00:00:50.129><c> back</c><00:00:50.340><c> a</c><00:00:50.579><c> matrix</c>

00:00:51.049 --> 00:00:51.059 align:start position:0%
but you might actually get back a matrix
 

00:00:51.059 --> 00:00:52.970 align:start position:0%
but you might actually get back a matrix
is<00:00:51.270><c> the</c><00:00:51.360><c> sum</c><00:00:51.570><c> of</c><00:00:51.629><c> a</c><00:00:51.840><c> row</c><00:00:52.020><c> vector</c><00:00:52.410><c> and</c><00:00:52.440><c> a</c><00:00:52.590><c> column</c>

00:00:52.970 --> 00:00:52.980 align:start position:0%
is the sum of a row vector and a column
 

00:00:52.980 --> 00:00:56.660 align:start position:0%
is the sum of a row vector and a column
vector<00:00:53.309><c> so</c><00:00:54.020><c> there</c><00:00:55.020><c> is</c><00:00:55.199><c> an</c><00:00:55.410><c> internal</c><00:00:55.920><c> logic</c><00:00:56.250><c> to</c>

00:00:56.660 --> 00:00:56.670 align:start position:0%
vector so there is an internal logic to
 

00:00:56.670 --> 00:00:58.549 align:start position:0%
vector so there is an internal logic to
these<00:00:56.820><c> strange</c><00:00:57.239><c> effects</c><00:00:57.600><c> of</c><00:00:57.780><c> Python</c><00:00:58.230><c> but</c><00:00:58.410><c> you</c>

00:00:58.549 --> 00:00:58.559 align:start position:0%
these strange effects of Python but you
 

00:00:58.559 --> 00:01:00.770 align:start position:0%
these strange effects of Python but you
are<00:00:58.710><c> familiar</c><00:00:59.250><c> with</c><00:00:59.460><c> Python</c><00:00:59.670><c> now</c><00:01:00.449><c> I've</c><00:01:00.539><c> seen</c>

00:01:00.770 --> 00:01:00.780 align:start position:0%
are familiar with Python now I've seen
 

00:01:00.780 --> 00:01:03.410 align:start position:0%
are familiar with Python now I've seen
some<00:01:00.840><c> students</c><00:01:01.590><c> have</c><00:01:02.010><c> very</c><00:01:02.370><c> strange</c><00:01:02.940><c> very</c>

00:01:03.410 --> 00:01:03.420 align:start position:0%
some students have very strange very
 

00:01:03.420 --> 00:01:06.440 align:start position:0%
some students have very strange very
hard<00:01:03.809><c> to</c><00:01:04.019><c> find</c><00:01:04.290><c> bugs</c><00:01:04.729><c> so</c><00:01:05.729><c> what</c><00:01:06.000><c> I</c><00:01:06.030><c> want</c><00:01:06.210><c> to</c><00:01:06.270><c> do</c>

00:01:06.440 --> 00:01:06.450 align:start position:0%
hard to find bugs so what I want to do
 

00:01:06.450 --> 00:01:08.899 align:start position:0%
hard to find bugs so what I want to do
in<00:01:06.750><c> this</c><00:01:06.990><c> video</c><00:01:07.170><c> is</c><00:01:07.380><c> share</c><00:01:07.860><c> view</c><00:01:08.130><c> a</c><00:01:08.369><c> couple</c><00:01:08.820><c> of</c>

00:01:08.899 --> 00:01:08.909 align:start position:0%
in this video is share view a couple of
 

00:01:08.909 --> 00:01:10.340 align:start position:0%
in this video is share view a couple of
tips<00:01:09.119><c> and</c><00:01:09.240><c> tricks</c><00:01:09.360><c> that</c><00:01:09.869><c> have</c><00:01:09.930><c> been</c><00:01:10.110><c> very</c>

00:01:10.340 --> 00:01:10.350 align:start position:0%
tips and tricks that have been very
 

00:01:10.350 --> 00:01:13.250 align:start position:0%
tips and tricks that have been very
useful<00:01:10.860><c> for</c><00:01:11.070><c> me</c><00:01:11.250><c> to</c><00:01:11.540><c> eliminate</c><00:01:12.540><c> or</c><00:01:12.750><c> simplify</c>

00:01:13.250 --> 00:01:13.260 align:start position:0%
useful for me to eliminate or simplify
 

00:01:13.260 --> 00:01:15.770 align:start position:0%
useful for me to eliminate or simplify
and<00:01:13.590><c> eliminate</c><00:01:14.040><c> all</c><00:01:14.189><c> the</c><00:01:14.570><c> strange</c><00:01:15.570><c> looking</c>

00:01:15.770 --> 00:01:15.780 align:start position:0%
and eliminate all the strange looking
 

00:01:15.780 --> 00:01:18.020 align:start position:0%
and eliminate all the strange looking
both<00:01:16.110><c> in</c><00:01:16.320><c> my</c><00:01:16.470><c> own</c><00:01:16.680><c> code</c><00:01:16.979><c> and</c><00:01:17.040><c> I</c><00:01:17.400><c> hope</c><00:01:17.580><c> that</c><00:01:17.820><c> with</c>

00:01:18.020 --> 00:01:18.030 align:start position:0%
both in my own code and I hope that with
 

00:01:18.030 --> 00:01:20.090 align:start position:0%
both in my own code and I hope that with
these<00:01:18.210><c> tips</c><00:01:18.479><c> and</c><00:01:18.570><c> tricks</c><00:01:18.659><c> you</c><00:01:19.290><c> also</c><00:01:19.530><c> be</c><00:01:19.979><c> able</c>

00:01:20.090 --> 00:01:20.100 align:start position:0%
these tips and tricks you also be able
 

00:01:20.100 --> 00:01:22.700 align:start position:0%
these tips and tricks you also be able
to<00:01:20.520><c> much</c><00:01:21.030><c> more</c><00:01:21.180><c> easily</c><00:01:21.450><c> write</c><00:01:21.990><c> bug</c><00:01:22.380><c> free</c>

00:01:22.700 --> 00:01:22.710 align:start position:0%
to much more easily write bug free
 

00:01:22.710 --> 00:01:26.570 align:start position:0%
to much more easily write bug free
Python<00:01:23.400><c> in</c><00:01:23.520><c> my</c><00:01:23.820><c> code</c><00:01:24.119><c> to</c><00:01:25.159><c> illustrate</c><00:01:26.159><c> one</c><00:01:26.490><c> of</c>

00:01:26.570 --> 00:01:26.580 align:start position:0%
Python in my code to illustrate one of
 

00:01:26.580 --> 00:01:29.690 align:start position:0%
Python in my code to illustrate one of
the<00:01:26.729><c> less</c><00:01:27.090><c> intuitive</c><00:01:27.600><c> effects</c><00:01:28.500><c> of</c><00:01:28.860><c> Python</c>

00:01:29.690 --> 00:01:29.700 align:start position:0%
the less intuitive effects of Python
 

00:01:29.700 --> 00:01:31.700 align:start position:0%
the less intuitive effects of Python
numpy<00:01:30.030><c> especially</c><00:01:30.570><c> how</c><00:01:30.960><c> you</c><00:01:31.020><c> construct</c>

00:01:31.700 --> 00:01:31.710 align:start position:0%
numpy especially how you construct
 

00:01:31.710 --> 00:01:33.980 align:start position:0%
numpy especially how you construct
vectors<00:01:32.130><c> in</c><00:01:32.340><c> Python</c><00:01:32.670><c> numpy</c><00:01:33.030><c> let</c><00:01:33.689><c> me</c><00:01:33.810><c> do</c><00:01:33.960><c> a</c>

00:01:33.980 --> 00:01:33.990 align:start position:0%
vectors in Python numpy let me do a
 

00:01:33.990 --> 00:01:36.830 align:start position:0%
vectors in Python numpy let me do a
quick<00:01:34.200><c> demo</c><00:01:34.560><c> let's</c><00:01:35.070><c> say</c><00:01:35.189><c> I</c><00:01:35.220><c> set</c><00:01:35.490><c> a</c><00:01:35.670><c> equals</c><00:01:36.540><c> NP</c>

00:01:36.830 --> 00:01:36.840 align:start position:0%
quick demo let's say I set a equals NP
 

00:01:36.840 --> 00:01:43.130 align:start position:0%
quick demo let's say I set a equals NP
dot<00:01:37.380><c> random</c><00:01:37.820><c> dot</c><00:01:38.820><c> R</c><00:01:39.119><c> and</c><00:01:39.630><c> n</c><00:01:40.220><c> 5</c><00:01:41.600><c> so</c><00:01:42.600><c> this</c><00:01:42.780><c> creates</c>

00:01:43.130 --> 00:01:43.140 align:start position:0%
dot random dot R and n 5 so this creates
 

00:01:43.140 --> 00:01:47.120 align:start position:0%
dot random dot R and n 5 so this creates
a<00:01:44.240><c> five</c><00:01:45.240><c> random</c><00:01:45.810><c> Gaussian</c><00:01:46.350><c> there</c><00:01:46.710><c> vols</c>

00:01:47.120 --> 00:01:47.130 align:start position:0%
a five random Gaussian there vols
 

00:01:47.130 --> 00:01:50.389 align:start position:0%
a five random Gaussian there vols
stored<00:01:47.670><c> in</c><00:01:47.790><c> an</c><00:01:47.880><c> array</c><00:01:48.030><c> a</c><00:01:48.210><c> and</c><00:01:48.860><c> so</c><00:01:49.860><c> let's</c><00:01:50.159><c> print</c>

00:01:50.389 --> 00:01:50.399 align:start position:0%
stored in an array a and so let's print
 

00:01:50.399 --> 00:01:55.999 align:start position:0%
stored in an array a and so let's print
a<00:01:51.290><c> and</c><00:01:52.290><c> now</c><00:01:53.070><c> it</c><00:01:53.729><c> turns</c><00:01:54.030><c> out</c><00:01:54.180><c> that</c><00:01:54.439><c> the</c><00:01:55.439><c> shape</c><00:01:55.770><c> of</c>

00:01:55.999 --> 00:01:56.009 align:start position:0%
a and now it turns out that the shape of
 

00:01:56.009 --> 00:02:00.880 align:start position:0%
a and now it turns out that the shape of
a<00:01:56.219><c> when</c><00:01:57.180><c> you</c><00:01:57.270><c> do</c><00:01:57.450><c> this</c><00:01:57.630><c> is</c><00:01:57.899><c> this</c><00:01:58.140><c> 5</c><00:01:58.710><c> kamar</c><00:01:59.369><c> on</c>

00:02:00.880 --> 00:02:00.890 align:start position:0%
a when you do this is this 5 kamar on
 

00:02:00.890 --> 00:02:04.370 align:start position:0%
a when you do this is this 5 kamar on
structure<00:02:01.890><c> and</c><00:02:01.920><c> so</c><00:02:02.880><c> this</c><00:02:03.090><c> is</c><00:02:03.210><c> called</c><00:02:03.479><c> a</c><00:02:03.630><c> rank</c><00:02:03.930><c> 1</c>

00:02:04.370 --> 00:02:04.380 align:start position:0%
structure and so this is called a rank 1
 

00:02:04.380 --> 00:02:07.340 align:start position:0%
structure and so this is called a rank 1
array<00:02:04.860><c> in</c><00:02:05.369><c> Python</c><00:02:05.939><c> and</c><00:02:06.180><c> it's</c><00:02:06.360><c> neither</c><00:02:06.600><c> a</c><00:02:06.990><c> row</c>

00:02:07.340 --> 00:02:07.350 align:start position:0%
array in Python and it's neither a row
 

00:02:07.350 --> 00:02:09.889 align:start position:0%
array in Python and it's neither a row
vector<00:02:07.380><c> in</c><00:02:07.860><c> nor</c><00:02:08.099><c> a</c><00:02:08.310><c> column</c><00:02:08.789><c> vector</c><00:02:08.819><c> and</c><00:02:09.450><c> this</c>

00:02:09.889 --> 00:02:09.899 align:start position:0%
vector in nor a column vector and this
 

00:02:09.899 --> 00:02:11.990 align:start position:0%
vector in nor a column vector and this
leads<00:02:10.200><c> it</c><00:02:10.379><c> has</c><00:02:10.560><c> some</c><00:02:10.860><c> 13</c><00:02:11.489><c> Allah</c><00:02:11.700><c> teaches</c>

00:02:11.990 --> 00:02:12.000 align:start position:0%
leads it has some 13 Allah teaches
 

00:02:12.000 --> 00:02:12.839 align:start position:0%
leads it has some 13 Allah teaches
effects<00:02:12.540><c> over</c>

00:02:12.839 --> 00:02:12.849 align:start position:0%
effects over
 

00:02:12.849 --> 00:02:15.899 align:start position:0%
effects over
I<00:02:13.329><c> print</c><00:02:13.629><c> a</c><00:02:13.810><c> transpose</c><00:02:14.469><c> it</c><00:02:14.739><c> ends</c><00:02:15.609><c> up</c><00:02:15.730><c> looking</c>

00:02:15.899 --> 00:02:15.909 align:start position:0%
I print a transpose it ends up looking
 

00:02:15.909 --> 00:02:18.839 align:start position:0%
I print a transpose it ends up looking
the<00:02:16.239><c> same</c><00:02:16.480><c> as</c><00:02:16.719><c> a</c><00:02:16.989><c> so</c><00:02:17.049><c> a</c><00:02:17.319><c> and</c><00:02:17.769><c> a</c><00:02:17.920><c> transpose</c><00:02:17.950><c> and</c>

00:02:18.839 --> 00:02:18.849 align:start position:0%
the same as a so a and a transpose and
 

00:02:18.849 --> 00:02:20.729 align:start position:0%
the same as a so a and a transpose and
you're<00:02:18.969><c> looking</c><00:02:19.239><c> the</c><00:02:19.329><c> same</c><00:02:19.359><c> and</c><00:02:19.780><c> if</c><00:02:20.349><c> I</c><00:02:20.439><c> print</c>

00:02:20.729 --> 00:02:20.739 align:start position:0%
you're looking the same and if I print
 

00:02:20.739 --> 00:02:23.610 align:start position:0%
you're looking the same and if I print
the<00:02:21.069><c> inner</c><00:02:21.280><c> product</c><00:02:21.909><c> between</c><00:02:22.150><c> a</c><00:02:23.019><c> and</c><00:02:23.290><c> a</c>

00:02:23.610 --> 00:02:23.620 align:start position:0%
the inner product between a and a
 

00:02:23.620 --> 00:02:26.429 align:start position:0%
the inner product between a and a
transpose<00:02:23.650><c> here</c><00:02:24.579><c> you</c><00:02:24.819><c> might</c><00:02:24.999><c> think</c><00:02:25.239><c> a</c><00:02:25.420><c> times</c><00:02:26.170><c> a</c>

00:02:26.429 --> 00:02:26.439 align:start position:0%
transpose here you might think a times a
 

00:02:26.439 --> 00:02:28.259 align:start position:0%
transpose here you might think a times a
transpose<00:02:26.499><c> is</c><00:02:27.189><c> maybe</c><00:02:27.430><c> the</c><00:02:27.519><c> outer</c><00:02:27.700><c> product</c>

00:02:28.259 --> 00:02:28.269 align:start position:0%
transpose is maybe the outer product
 

00:02:28.269 --> 00:02:30.360 align:start position:0%
transpose is maybe the outer product
should<00:02:28.480><c> give</c><00:02:28.659><c> you</c><00:02:28.749><c> a</c><00:02:28.780><c> matrix</c><00:02:28.989><c> maybe</c><00:02:29.439><c> but</c><00:02:30.189><c> if</c><00:02:30.310><c> I</c>

00:02:30.360 --> 00:02:30.370 align:start position:0%
should give you a matrix maybe but if I
 

00:02:30.370 --> 00:02:34.259 align:start position:0%
should give you a matrix maybe but if I
do<00:02:30.430><c> that</c><00:02:30.700><c> use</c><00:02:31.180><c> then</c><00:02:31.739><c> get</c><00:02:32.739><c> back</c><00:02:32.859><c> a</c><00:02:32.889><c> number</c><00:02:33.269><c> so</c>

00:02:34.259 --> 00:02:34.269 align:start position:0%
do that use then get back a number so
 

00:02:34.269 --> 00:02:36.629 align:start position:0%
do that use then get back a number so
what<00:02:34.780><c> I</c><00:02:34.810><c> would</c><00:02:35.049><c> recommend</c><00:02:35.170><c> is</c><00:02:35.859><c> that</c><00:02:36.129><c> when</c>

00:02:36.629 --> 00:02:36.639 align:start position:0%
what I would recommend is that when
 

00:02:36.639 --> 00:02:38.849 align:start position:0%
what I would recommend is that when
you're<00:02:36.790><c> coding</c><00:02:37.120><c> neural</c><00:02:37.750><c> networks</c><00:02:38.170><c> that</c><00:02:38.709><c> you</c>

00:02:38.849 --> 00:02:38.859 align:start position:0%
you're coding neural networks that you
 

00:02:38.859 --> 00:02:41.520 align:start position:0%
you're coding neural networks that you
just<00:02:39.040><c> not</c><00:02:39.459><c> use</c><00:02:39.849><c> data</c><00:02:40.180><c> structures</c><00:02:40.719><c> where</c><00:02:41.439><c> the</c>

00:02:41.520 --> 00:02:41.530 align:start position:0%
just not use data structures where the
 

00:02:41.530 --> 00:02:43.619 align:start position:0%
just not use data structures where the
shape<00:02:41.799><c> is</c><00:02:42.040><c> this</c><00:02:42.219><c> you</c><00:02:42.519><c> know</c><00:02:42.609><c> five</c><00:02:42.909><c> comma</c><00:02:43.329><c> n</c>

00:02:43.619 --> 00:02:43.629 align:start position:0%
shape is this you know five comma n
 

00:02:43.629 --> 00:02:46.830 align:start position:0%
shape is this you know five comma n
comma<00:02:44.079><c> ranked</c><00:02:45.069><c> one</c><00:02:45.310><c> array</c><00:02:45.609><c> instead</c><00:02:46.450><c> if</c><00:02:46.780><c> you</c>

00:02:46.830 --> 00:02:46.840 align:start position:0%
comma ranked one array instead if you
 

00:02:46.840 --> 00:02:53.789 align:start position:0%
comma ranked one array instead if you
set<00:02:47.709><c> a</c><00:02:48.069><c> to</c><00:02:48.370><c> be</c><00:02:48.969><c> from</c><00:02:49.450><c> this</c><00:02:52.230><c> five</c><00:02:53.230><c> point</c><00:02:53.500><c> one</c>

00:02:53.789 --> 00:02:53.799 align:start position:0%
set a to be from this five point one
 

00:02:53.799 --> 00:02:57.149 align:start position:0%
set a to be from this five point one
then<00:02:54.400><c> this</c><00:02:54.730><c> commits</c><00:02:55.629><c> a</c><00:02:55.870><c> to</c><00:02:56.469><c> be</c><00:02:56.620><c> five</c><00:02:56.919><c> by</c><00:02:57.129><c> one</c>

00:02:57.149 --> 00:02:57.159 align:start position:0%
then this commits a to be five by one
 

00:02:57.159 --> 00:03:00.030 align:start position:0%
then this commits a to be five by one
column<00:02:57.730><c> vector</c><00:02:58.299><c> and</c><00:02:58.449><c> whereas</c><00:02:59.319><c> previously</c><00:02:59.769><c> a</c>

00:03:00.030 --> 00:03:00.040 align:start position:0%
column vector and whereas previously a
 

00:03:00.040 --> 00:03:02.009 align:start position:0%
column vector and whereas previously a
and<00:03:00.310><c> a</c><00:03:00.459><c> transpose</c><00:03:00.489><c> look</c><00:03:01.150><c> the</c><00:03:01.299><c> same</c><00:03:01.480><c> review</c><00:03:01.870><c> now</c>

00:03:02.009 --> 00:03:02.019 align:start position:0%
and a transpose look the same review now
 

00:03:02.019 --> 00:03:04.709 align:start position:0%
and a transpose look the same review now
print<00:03:02.349><c> a</c><00:03:02.560><c> transpose</c><00:03:03.159><c> now</c><00:03:03.430><c> a</c><00:03:03.699><c> transpose</c><00:03:04.389><c> is</c><00:03:04.659><c> a</c>

00:03:04.709 --> 00:03:04.719 align:start position:0%
print a transpose now a transpose is a
 

00:03:04.719 --> 00:03:07.679 align:start position:0%
print a transpose now a transpose is a
row<00:03:05.409><c> vector</c><00:03:05.790><c> notice</c><00:03:06.790><c> one</c><00:03:06.969><c> subtle</c><00:03:07.329><c> difference</c>

00:03:07.679 --> 00:03:07.689 align:start position:0%
row vector notice one subtle difference
 

00:03:07.689 --> 00:03:09.959 align:start position:0%
row vector notice one subtle difference
on<00:03:07.959><c> in</c><00:03:08.409><c> this</c><00:03:08.680><c> data</c><00:03:08.889><c> structure</c><00:03:09.189><c> there</c><00:03:09.579><c> are</c><00:03:09.609><c> two</c>

00:03:09.959 --> 00:03:09.969 align:start position:0%
on in this data structure there are two
 

00:03:09.969 --> 00:03:11.459 align:start position:0%
on in this data structure there are two
square<00:03:10.419><c> brackets</c><00:03:10.900><c> when</c><00:03:11.019><c> you</c><00:03:11.079><c> print</c><00:03:11.319><c> a</c>

00:03:11.459 --> 00:03:11.469 align:start position:0%
square brackets when you print a
 

00:03:11.469 --> 00:03:13.170 align:start position:0%
square brackets when you print a
transpose<00:03:12.040><c> whereas</c><00:03:12.370><c> previously</c><00:03:12.849><c> there</c><00:03:13.090><c> was</c>

00:03:13.170 --> 00:03:13.180 align:start position:0%
transpose whereas previously there was
 

00:03:13.180 --> 00:03:14.849 align:start position:0%
transpose whereas previously there was
one<00:03:13.480><c> square</c><00:03:13.810><c> bracket</c><00:03:14.290><c> so</c><00:03:14.530><c> that's</c><00:03:14.739><c> the</c>

00:03:14.849 --> 00:03:14.859 align:start position:0%
one square bracket so that's the
 

00:03:14.859 --> 00:03:17.219 align:start position:0%
one square bracket so that's the
difference<00:03:15.189><c> between</c><00:03:15.280><c> a</c><00:03:15.730><c> this</c><00:03:16.719><c> is</c><00:03:16.870><c> really</c><00:03:17.199><c> a</c>

00:03:17.219 --> 00:03:17.229 align:start position:0%
difference between a this is really a
 

00:03:17.229 --> 00:03:21.509 align:start position:0%
difference between a this is really a
one<00:03:17.650><c> by</c><00:03:17.829><c> five</c><00:03:18.129><c> matrix</c><00:03:19.229><c> versus</c><00:03:20.229><c> a</c><00:03:20.500><c> one</c><00:03:21.250><c> of</c><00:03:21.400><c> these</c>

00:03:21.509 --> 00:03:21.519 align:start position:0%
one by five matrix versus a one of these
 

00:03:21.519 --> 00:03:24.270 align:start position:0%
one by five matrix versus a one of these
are<00:03:21.759><c> rank</c><00:03:22.030><c> one</c><00:03:22.389><c> arrays</c><00:03:22.810><c> and</c><00:03:23.139><c> if</c><00:03:23.769><c> you</c><00:03:23.889><c> print</c>

00:03:24.270 --> 00:03:24.280 align:start position:0%
are rank one arrays and if you print
 

00:03:24.280 --> 00:03:27.270 align:start position:0%
are rank one arrays and if you print
save<00:03:24.939><c> these</c><00:03:25.299><c> product</c><00:03:26.139><c> between</c><00:03:26.470><c> a</c><00:03:26.680><c> and</c><00:03:26.949><c> a</c>

00:03:27.270 --> 00:03:27.280 align:start position:0%
save these product between a and a
 

00:03:27.280 --> 00:03:30.330 align:start position:0%
save these product between a and a
transpose<00:03:27.329><c> then</c><00:03:28.329><c> this</c><00:03:28.959><c> gives</c><00:03:29.949><c> you</c><00:03:30.040><c> the</c><00:03:30.159><c> outer</c>

00:03:30.330 --> 00:03:30.340 align:start position:0%
transpose then this gives you the outer
 

00:03:30.340 --> 00:03:33.059 align:start position:0%
transpose then this gives you the outer
product<00:03:30.909><c> of</c><00:03:31.239><c> a</c><00:03:31.479><c> vector</c><00:03:31.689><c> R</c><00:03:32.109><c> and</c><00:03:32.290><c> so</c><00:03:32.590><c> the</c><00:03:32.799><c> ultra</c>

00:03:33.059 --> 00:03:33.069 align:start position:0%
product of a vector R and so the ultra
 

00:03:33.069 --> 00:03:35.819 align:start position:0%
product of a vector R and so the ultra
profitable<00:03:33.489><c> vector</c><00:03:33.879><c> gives</c><00:03:34.359><c> you</c><00:03:34.449><c> a</c><00:03:34.509><c> matrix</c><00:03:34.959><c> so</c>

00:03:35.819 --> 00:03:35.829 align:start position:0%
profitable vector gives you a matrix so
 

00:03:35.829 --> 00:03:38.640 align:start position:0%
profitable vector gives you a matrix so
let's<00:03:36.069><c> look</c><00:03:36.220><c> in</c><00:03:36.340><c> greater</c><00:03:36.519><c> detail</c><00:03:36.970><c> at</c><00:03:37.299><c> what</c><00:03:38.139><c> we</c>

00:03:38.640 --> 00:03:38.650 align:start position:0%
let's look in greater detail at what we
 

00:03:38.650 --> 00:03:41.129 align:start position:0%
let's look in greater detail at what we
just<00:03:38.799><c> saw</c><00:03:39.040><c> here</c><00:03:39.310><c> the</c><00:03:40.299><c> first</c><00:03:40.540><c> command</c><00:03:40.930><c> that</c><00:03:40.989><c> we</c>

00:03:41.129 --> 00:03:41.139 align:start position:0%
just saw here the first command that we
 

00:03:41.139 --> 00:03:44.509 align:start position:0%
just saw here the first command that we
ran<00:03:41.319><c> just</c><00:03:41.590><c> now</c><00:03:41.739><c> was</c><00:03:42.220><c> this</c><00:03:42.549><c> and</c><00:03:42.879><c> this</c><00:03:43.419><c> created</c><00:03:44.199><c> a</c>

00:03:44.509 --> 00:03:44.519 align:start position:0%
ran just now was this and this created a
 

00:03:44.519 --> 00:03:49.199 align:start position:0%
ran just now was this and this created a
data<00:03:45.519><c> structure</c><00:03:45.909><c> where</c><00:03:46.840><c> a</c><00:03:47.019><c> dot</c><00:03:47.739><c> shape</c><00:03:48.209><c> was</c>

00:03:49.199 --> 00:03:49.209 align:start position:0%
data structure where a dot shape was
 

00:03:49.209 --> 00:03:53.009 align:start position:0%
data structure where a dot shape was
this<00:03:49.540><c> a</c><00:03:49.709><c> funny</c><00:03:50.709><c> thing</c><00:03:50.949><c> v</c><00:03:51.310><c> comma</c><00:03:52.060><c> and</c><00:03:52.449><c> so</c><00:03:52.750><c> this</c>

00:03:53.009 --> 00:03:53.019 align:start position:0%
this a funny thing v comma and so this
 

00:03:53.019 --> 00:03:57.569 align:start position:0%
this a funny thing v comma and so this
is<00:03:53.530><c> called</c><00:03:54.040><c> a</c><00:03:54.250><c> rank</c><00:03:55.060><c> one</c><00:03:55.530><c> array</c><00:03:56.530><c> and</c><00:03:56.829><c> this</c><00:03:57.400><c> is</c><00:03:57.549><c> a</c>

00:03:57.569 --> 00:03:57.579 align:start position:0%
is called a rank one array and this is a
 

00:03:57.579 --> 00:03:59.459 align:start position:0%
is called a rank one array and this is a
very<00:03:57.759><c> funny</c><00:03:58.030><c> data</c><00:03:58.269><c> structure</c><00:03:58.719><c> it</c><00:03:58.930><c> doesn't</c>

00:03:59.459 --> 00:03:59.469 align:start position:0%
very funny data structure it doesn't
 

00:03:59.469 --> 00:04:01.229 align:start position:0%
very funny data structure it doesn't
behave<00:03:59.709><c> consistently</c><00:03:59.919><c> as</c><00:04:00.549><c> either</c><00:04:00.790><c> a</c><00:04:00.909><c> row</c>

00:04:01.229 --> 00:04:01.239 align:start position:0%
behave consistently as either a row
 

00:04:01.239 --> 00:04:04.289 align:start position:0%
behave consistently as either a row
vector<00:04:01.269><c> nor</c><00:04:01.989><c> a</c><00:04:02.280><c> column</c><00:04:03.280><c> vector</c><00:04:03.669><c> which</c><00:04:04.030><c> makes</c>

00:04:04.289 --> 00:04:04.299 align:start position:0%
vector nor a column vector which makes
 

00:04:04.299 --> 00:04:06.809 align:start position:0%
vector nor a column vector which makes
some<00:04:04.449><c> of</c><00:04:04.509><c> this</c><00:04:04.719><c> effects</c><00:04:05.109><c> non-intuitive</c><00:04:06.099><c> so</c>

00:04:06.809 --> 00:04:06.819 align:start position:0%
some of this effects non-intuitive so
 

00:04:06.819 --> 00:04:08.759 align:start position:0%
some of this effects non-intuitive so
what<00:04:07.090><c> I'm</c><00:04:07.180><c> going</c><00:04:07.299><c> to</c><00:04:07.359><c> recommend</c><00:04:07.509><c> um</c><00:04:08.079><c> is</c><00:04:08.739><c> that</c>

00:04:08.759 --> 00:04:08.769 align:start position:0%
what I'm going to recommend um is that
 

00:04:08.769 --> 00:04:10.529 align:start position:0%
what I'm going to recommend um is that
when<00:04:09.280><c> you</c><00:04:09.459><c> are</c><00:04:09.519><c> doing</c><00:04:10.180><c> your</c><00:04:10.359><c> program</c>

00:04:10.529 --> 00:04:10.539 align:start position:0%
when you are doing your program
 

00:04:10.539 --> 00:04:11.969 align:start position:0%
when you are doing your program
exercises<00:04:11.229><c> or</c><00:04:11.439><c> in</c><00:04:11.500><c> fact</c><00:04:11.680><c> when</c><00:04:11.889><c> you're</c>

00:04:11.969 --> 00:04:11.979 align:start position:0%
exercises or in fact when you're
 

00:04:11.979 --> 00:04:14.099 align:start position:0%
exercises or in fact when you're
implementing<00:04:12.400><c> which</c><00:04:13.030><c> is</c><00:04:13.180><c> regression</c><00:04:13.569><c> on</c><00:04:13.959><c> your</c>

00:04:14.099 --> 00:04:14.109 align:start position:0%
implementing which is regression on your
 

00:04:14.109 --> 00:04:17.370 align:start position:0%
implementing which is regression on your
networks<00:04:14.560><c> that</c><00:04:14.859><c> you</c><00:04:14.949><c> just</c><00:04:15.189><c> do</c><00:04:15.789><c> not</c><00:04:16.030><c> use</c><00:04:16.380><c> these</c>

00:04:17.370 --> 00:04:17.380 align:start position:0%
networks that you just do not use these
 

00:04:17.380 --> 00:04:22.260 align:start position:0%
networks that you just do not use these
rank<00:04:18.250><c> one</c><00:04:18.549><c> arrays</c><00:04:20.340><c> instead</c><00:04:21.340><c> if</c><00:04:21.669><c> every</c><00:04:22.029><c> time</c>

00:04:22.260 --> 00:04:22.270 align:start position:0%
rank one arrays instead if every time
 

00:04:22.270 --> 00:04:25.560 align:start position:0%
rank one arrays instead if every time
you<00:04:22.349><c> create</c><00:04:23.349><c> an</c><00:04:23.440><c> array</c><00:04:23.740><c> you</c><00:04:24.310><c> commit</c><00:04:24.789><c> to</c><00:04:25.060><c> making</c>

00:04:25.560 --> 00:04:25.570 align:start position:0%
you create an array you commit to making
 

00:04:25.570 --> 00:04:29.340 align:start position:0%
you create an array you commit to making
either<00:04:25.810><c> a</c><00:04:26.170><c> column</c><00:04:26.680><c> vector</c><00:04:27.040><c> so</c><00:04:27.220><c> this</c><00:04:27.460><c> crazy</c><00:04:28.350><c> 501</c>

00:04:29.340 --> 00:04:29.350 align:start position:0%
either a column vector so this crazy 501
 

00:04:29.350 --> 00:04:31.220 align:start position:0%
either a column vector so this crazy 501
vector<00:04:29.710><c> or</c><00:04:29.920><c> commit</c><00:04:30.310><c> to</c><00:04:30.430><c> making</c><00:04:30.610><c> a</c><00:04:30.940><c> row</c><00:04:31.150><c> vector</c>

00:04:31.220 --> 00:04:31.230 align:start position:0%
vector or commit to making a row vector
 

00:04:31.230 --> 00:04:33.870 align:start position:0%
vector or commit to making a row vector
then<00:04:32.230><c> the</c><00:04:32.320><c> behavior</c><00:04:32.830><c> of</c><00:04:32.890><c> your</c><00:04:33.130><c> vectors</c><00:04:33.520><c> will</c>

00:04:33.870 --> 00:04:33.880 align:start position:0%
then the behavior of your vectors will
 

00:04:33.880 --> 00:04:37.080 align:start position:0%
then the behavior of your vectors will
may<00:04:34.690><c> be</c><00:04:34.720><c> easier</c><00:04:35.140><c> to</c><00:04:35.260><c> understand</c><00:04:35.790><c> so</c><00:04:36.790><c> in</c><00:04:36.940><c> this</c>

00:04:37.080 --> 00:04:37.090 align:start position:0%
may be easier to understand so in this
 

00:04:37.090 --> 00:04:41.580 align:start position:0%
may be easier to understand so in this
case<00:04:37.360><c> a</c><00:04:38.220><c> dot</c><00:04:39.220><c> shape</c><00:04:39.550><c> is</c><00:04:40.360><c> going</c><00:04:41.050><c> to</c><00:04:41.140><c> be</c><00:04:41.230><c> equal</c><00:04:41.560><c> to</c>

00:04:41.580 --> 00:04:41.590 align:start position:0%
case a dot shape is going to be equal to
 

00:04:41.590 --> 00:04:44.700 align:start position:0%
case a dot shape is going to be equal to
5<00:04:41.950><c> comma</c><00:04:42.310><c> 1</c><00:04:42.610><c> and</c><00:04:42.790><c> so</c><00:04:43.480><c> this</c><00:04:43.750><c> behaves</c><00:04:44.200><c> a</c><00:04:44.470><c> lot</c><00:04:44.650><c> like</c>

00:04:44.700 --> 00:04:44.710 align:start position:0%
5 comma 1 and so this behaves a lot like
 

00:04:44.710 --> 00:04:47.910 align:start position:0%
5 comma 1 and so this behaves a lot like
they<00:04:45.100><c> or</c><00:04:45.940><c> that</c><00:04:46.180><c> this</c><00:04:46.330><c> is</c><00:04:46.600><c> a</c><00:04:46.660><c> column</c><00:04:47.290><c> vector</c><00:04:47.320><c> and</c>

00:04:47.910 --> 00:04:47.920 align:start position:0%
they or that this is a column vector and
 

00:04:47.920 --> 00:04:50.160 align:start position:0%
they or that this is a column vector and
that's<00:04:48.700><c> why</c><00:04:48.880><c> you</c><00:04:49.300><c> might</c><00:04:49.540><c> you</c><00:04:49.720><c> can</c><00:04:49.900><c> think</c><00:04:50.080><c> of</c>

00:04:50.160 --> 00:04:50.170 align:start position:0%
that's why you might you can think of
 

00:04:50.170 --> 00:04:52.350 align:start position:0%
that's why you might you can think of
this<00:04:50.290><c> as</c><00:04:50.350><c> a</c><00:04:50.530><c> 5</c><00:04:50.800><c> by</c><00:04:50.950><c> 1</c><00:04:51.190><c> matrix</c><00:04:51.400><c> or</c><00:04:51.880><c> as</c><00:04:51.940><c> a</c><00:04:52.030><c> column</c>

00:04:52.350 --> 00:04:52.360 align:start position:0%
this as a 5 by 1 matrix or as a column
 

00:04:52.360 --> 00:04:55.710 align:start position:0%
this as a 5 by 1 matrix or as a column
vector<00:04:52.390><c> and</c><00:04:52.870><c> here</c><00:04:53.680><c> a</c><00:04:54.010><c> dot</c><00:04:54.910><c> shape</c><00:04:55.180><c> is</c><00:04:55.390><c> going</c><00:04:55.600><c> to</c>

00:04:55.710 --> 00:04:55.720 align:start position:0%
vector and here a dot shape is going to
 

00:04:55.720 --> 00:04:58.190 align:start position:0%
vector and here a dot shape is going to
be<00:04:55.840><c> 1</c><00:04:56.230><c> comma</c><00:04:56.560><c> 5</c><00:04:56.860><c> and</c><00:04:57.220><c> this</c><00:04:57.370><c> behaves</c>

00:04:58.190 --> 00:04:58.200 align:start position:0%
be 1 comma 5 and this behaves
 

00:04:58.200 --> 00:05:02.520 align:start position:0%
be 1 comma 5 and this behaves
consistently<00:04:59.200><c> as</c><00:04:59.500><c> a</c><00:04:59.980><c> row</c><00:05:00.430><c> vector</c><00:05:01.200><c> so</c><00:05:02.200><c> when</c><00:05:02.410><c> you</c>

00:05:02.520 --> 00:05:02.530 align:start position:0%
consistently as a row vector so when you
 

00:05:02.530 --> 00:05:04.260 align:start position:0%
consistently as a row vector so when you
need<00:05:02.680><c> a</c><00:05:02.710><c> vector</c><00:05:03.130><c> I</c><00:05:03.160><c> would</c><00:05:03.460><c> say</c><00:05:03.610><c> either</c><00:05:03.880><c> use</c>

00:05:04.260 --> 00:05:04.270 align:start position:0%
need a vector I would say either use
 

00:05:04.270 --> 00:05:08.220 align:start position:0%
need a vector I would say either use
this<00:05:04.510><c> or</c><00:05:04.570><c> this</c><00:05:05.140><c> but</c><00:05:05.770><c> not</c><00:05:05.980><c> a</c><00:05:06.220><c> Rank</c><00:05:06.490><c> 1</c><00:05:06.610><c> array</c><00:05:07.230><c> one</c>

00:05:08.220 --> 00:05:08.230 align:start position:0%
this or this but not a Rank 1 array one
 

00:05:08.230 --> 00:05:10.200 align:start position:0%
this or this but not a Rank 1 array one
more<00:05:08.410><c> thing</c><00:05:08.620><c> that</c><00:05:08.800><c> I</c><00:05:08.860><c> do</c><00:05:09.040><c> a</c><00:05:09.070><c> lot</c><00:05:09.310><c> to</c><00:05:09.490><c> my</c><00:05:09.610><c> code</c><00:05:09.880><c> is</c>

00:05:10.200 --> 00:05:10.210 align:start position:0%
more thing that I do a lot to my code is
 

00:05:10.210 --> 00:05:12.450 align:start position:0%
more thing that I do a lot to my code is
if<00:05:10.540><c> I'm</c><00:05:10.750><c> not</c><00:05:10.780><c> entirely</c><00:05:11.200><c> sure</c><00:05:11.380><c> what's</c><00:05:12.280><c> the</c>

00:05:12.450 --> 00:05:12.460 align:start position:0%
if I'm not entirely sure what's the
 

00:05:12.460 --> 00:05:15.870 align:start position:0%
if I'm not entirely sure what's the
dimension<00:05:12.790><c> of</c><00:05:13.360><c> one</c><00:05:13.660><c> of</c><00:05:13.780><c> my</c><00:05:13.870><c> vectors</c><00:05:14.380><c> are</c><00:05:15.370><c> often</c>

00:05:15.870 --> 00:05:15.880 align:start position:0%
dimension of one of my vectors are often
 

00:05:15.880 --> 00:05:17.730 align:start position:0%
dimension of one of my vectors are often
throw<00:05:16.210><c> in</c><00:05:16.420><c> an</c><00:05:16.600><c> assertion</c><00:05:16.930><c> statement</c><00:05:17.590><c> like</c>

00:05:17.730 --> 00:05:17.740 align:start position:0%
throw in an assertion statement like
 

00:05:17.740 --> 00:05:19.440 align:start position:0%
throw in an assertion statement like
this<00:05:17.770><c> to</c><00:05:18.190><c> make</c><00:05:18.310><c> sure</c><00:05:18.490><c> in</c><00:05:18.610><c> this</c><00:05:18.730><c> case</c><00:05:18.790><c> that</c><00:05:19.240><c> this</c>

00:05:19.440 --> 00:05:19.450 align:start position:0%
this to make sure in this case that this
 

00:05:19.450 --> 00:05:21.990 align:start position:0%
this to make sure in this case that this
is<00:05:19.660><c> a</c><00:05:19.840><c> five</c><00:05:20.740><c> by</c><00:05:20.890><c> one</c><00:05:21.130><c> vector</c><00:05:21.370><c> so</c><00:05:21.790><c> this</c><00:05:21.910><c> is</c><00:05:21.970><c> a</c>

00:05:21.990 --> 00:05:22.000 align:start position:0%
is a five by one vector so this is a
 

00:05:22.000 --> 00:05:24.690 align:start position:0%
is a five by one vector so this is a
column<00:05:22.540><c> vector</c><00:05:22.770><c> these</c><00:05:23.770><c> assertions</c><00:05:24.130><c> are</c>

00:05:24.690 --> 00:05:24.700 align:start position:0%
column vector these assertions are
 

00:05:24.700 --> 00:05:27.030 align:start position:0%
column vector these assertions are
really<00:05:25.180><c> inexpensive</c><00:05:25.570><c> to</c><00:05:25.930><c> execute</c><00:05:26.680><c> and</c><00:05:26.920><c> they</c>

00:05:27.030 --> 00:05:27.040 align:start position:0%
really inexpensive to execute and they
 

00:05:27.040 --> 00:05:29.730 align:start position:0%
really inexpensive to execute and they
also<00:05:27.220><c> help</c><00:05:27.730><c> to</c><00:05:28.450><c> serve</c><00:05:28.660><c> as</c><00:05:28.810><c> documentation</c><00:05:29.410><c> for</c>

00:05:29.730 --> 00:05:29.740 align:start position:0%
also help to serve as documentation for
 

00:05:29.740 --> 00:05:32.370 align:start position:0%
also help to serve as documentation for
your<00:05:29.830><c> code</c><00:05:30.040><c> so</c><00:05:30.070><c> don't</c><00:05:30.520><c> hesitate</c><00:05:31.330><c> to</c><00:05:31.390><c> throw</c><00:05:32.230><c> an</c>

00:05:32.370 --> 00:05:32.380 align:start position:0%
your code so don't hesitate to throw an
 

00:05:32.380 --> 00:05:33.930 align:start position:0%
your code so don't hesitate to throw an
assertion<00:05:32.680><c> statements</c><00:05:33.280><c> like</c><00:05:33.400><c> this</c><00:05:33.610><c> one</c><00:05:33.820><c> if</c>

00:05:33.930 --> 00:05:33.940 align:start position:0%
assertion statements like this one if
 

00:05:33.940 --> 00:05:36.570 align:start position:0%
assertion statements like this one if
you<00:05:34.210><c> like</c><00:05:34.360><c> it</c><00:05:34.570><c> and</c><00:05:35.500><c> then</c><00:05:35.680><c> finally</c><00:05:35.890><c> if</c><00:05:36.340><c> for</c><00:05:36.550><c> some</c>

00:05:36.570 --> 00:05:36.580 align:start position:0%
you like it and then finally if for some
 

00:05:36.580 --> 00:05:38.490 align:start position:0%
you like it and then finally if for some
reason<00:05:37.060><c> you</c><00:05:37.240><c> do</c><00:05:37.450><c> end</c><00:05:37.660><c> up</c><00:05:37.780><c> with</c><00:05:37.840><c> a</c><00:05:38.080><c> rank</c><00:05:38.290><c> one</c>

00:05:38.490 --> 00:05:38.500 align:start position:0%
reason you do end up with a rank one
 

00:05:38.500 --> 00:05:42.900 align:start position:0%
reason you do end up with a rank one
array<00:05:38.740><c> you</c><00:05:39.490><c> can</c><00:05:39.850><c> reshape</c><00:05:40.540><c> this</c><00:05:41.110><c> a</c><00:05:41.790><c> equals</c><00:05:42.790><c> a</c>

00:05:42.900 --> 00:05:42.910 align:start position:0%
array you can reshape this a equals a
 

00:05:42.910 --> 00:05:46.800 align:start position:0%
array you can reshape this a equals a
dot<00:05:43.150><c> reshape</c><00:05:43.660><c> into</c><00:05:44.880><c> say</c><00:05:45.880><c> a</c><00:05:45.910><c> five</c><00:05:46.180><c> by</c><00:05:46.330><c> one</c><00:05:46.360><c> array</c>

00:05:46.800 --> 00:05:46.810 align:start position:0%
dot reshape into say a five by one array
 

00:05:46.810 --> 00:05:49.650 align:start position:0%
dot reshape into say a five by one array
or<00:05:47.080><c> one</c><00:05:47.350><c> by</c><00:05:47.470><c> five</c><00:05:47.740><c> arrays</c><00:05:48.430><c> so</c><00:05:48.790><c> that</c><00:05:49.000><c> it</c><00:05:49.210><c> behaves</c>

00:05:49.650 --> 00:05:49.660 align:start position:0%
or one by five arrays so that it behaves
 

00:05:49.660 --> 00:05:51.420 align:start position:0%
or one by five arrays so that it behaves
more<00:05:49.870><c> consistently</c><00:05:50.560><c> as</c><00:05:50.710><c> either</c><00:05:50.890><c> a</c><00:05:51.040><c> column</c>

00:05:51.420 --> 00:05:51.430 align:start position:0%
more consistently as either a column
 

00:05:51.430 --> 00:05:54.450 align:start position:0%
more consistently as either a column
vector<00:05:51.460><c> or</c><00:05:51.940><c> row</c><00:05:52.630><c> vector</c><00:05:53.050><c> so</c><00:05:53.830><c> sometimes</c><00:05:54.250><c> seen</c>

00:05:54.450 --> 00:05:54.460 align:start position:0%
vector or row vector so sometimes seen
 

00:05:54.460 --> 00:05:56.790 align:start position:0%
vector or row vector so sometimes seen
students<00:05:54.850><c> and</c><00:05:55.090><c> that</c><00:05:55.210><c> was</c><00:05:55.420><c> very</c><00:05:55.450><c> hard</c><00:05:56.350><c> to</c><00:05:56.470><c> track</c>

00:05:56.790 --> 00:05:56.800 align:start position:0%
students and that was very hard to track
 

00:05:56.800 --> 00:05:58.680 align:start position:0%
students and that was very hard to track
down<00:05:56.830><c> bugs</c><00:05:57.310><c> because</c><00:05:57.730><c> of</c><00:05:57.880><c> other</c><00:05:58.060><c> non-intuitive</c>

00:05:58.680 --> 00:05:58.690 align:start position:0%
down bugs because of other non-intuitive
 

00:05:58.690 --> 00:06:01.230 align:start position:0%
down bugs because of other non-intuitive
effects<00:05:59.230><c> of</c><00:05:59.470><c> rank</c><00:05:59.740><c> one</c><00:05:59.830><c> arrays</c><00:06:00.430><c> by</c>

00:06:01.230 --> 00:06:01.240 align:start position:0%
effects of rank one arrays by
 

00:06:01.240 --> 00:06:03.150 align:start position:0%
effects of rank one arrays by
eliminating<00:06:01.780><c> rank</c><00:06:02.140><c> one</c><00:06:02.350><c> of</c><00:06:02.470><c> rays</c><00:06:02.650><c> on</c><00:06:02.890><c> my</c><00:06:03.010><c> own</c>

00:06:03.150 --> 00:06:03.160 align:start position:0%
eliminating rank one of rays on my own
 

00:06:03.160 --> 00:06:06.360 align:start position:0%
eliminating rank one of rays on my own
code<00:06:03.400><c> I</c><00:06:03.610><c> think</c><00:06:03.820><c> my</c><00:06:04.210><c> code</c><00:06:04.480><c> became</c><00:06:04.900><c> simpler</c><00:06:05.440><c> and</c>

00:06:06.360 --> 00:06:06.370 align:start position:0%
code I think my code became simpler and
 

00:06:06.370 --> 00:06:08.340 align:start position:0%
code I think my code became simpler and
I<00:06:06.580><c> did</c><00:06:06.790><c> not</c><00:06:07.000><c> actually</c><00:06:07.210><c> find</c><00:06:07.600><c> it</c><00:06:07.750><c> restrictive</c>

00:06:08.340 --> 00:06:08.350 align:start position:0%
I did not actually find it restrictive
 

00:06:08.350 --> 00:06:09.960 align:start position:0%
I did not actually find it restrictive
in<00:06:08.530><c> terms</c><00:06:08.740><c> of</c><00:06:08.950><c> things</c><00:06:09.250><c> like</c><00:06:09.400><c> an</c><00:06:09.490><c> expressing</c>

00:06:09.960 --> 00:06:09.970 align:start position:0%
in terms of things like an expressing
 

00:06:09.970 --> 00:06:11.910 align:start position:0%
in terms of things like an expressing
code<00:06:10.180><c> to</c><00:06:10.360><c> just</c><00:06:10.480><c> never</c><00:06:10.750><c> use</c><00:06:11.110><c> a</c><00:06:11.140><c> rank</c><00:06:11.440><c> one</c><00:06:11.650><c> array</c>

00:06:11.910 --> 00:06:11.920 align:start position:0%
code to just never use a rank one array
 

00:06:11.920 --> 00:06:15.240 align:start position:0%
code to just never use a rank one array
and<00:06:12.540><c> so</c><00:06:13.540><c> takeaways</c><00:06:14.020><c> are</c><00:06:14.260><c> to</c><00:06:14.710><c> simplify</c><00:06:15.100><c> your</c>

00:06:15.240 --> 00:06:15.250 align:start position:0%
and so takeaways are to simplify your
 

00:06:15.250 --> 00:06:15.510 align:start position:0%
and so takeaways are to simplify your
code

00:06:15.510 --> 00:06:15.520 align:start position:0%
code
 

00:06:15.520 --> 00:06:17.580 align:start position:0%
code
don't<00:06:15.790><c> use</c><00:06:16.000><c> rank</c><00:06:16.240><c> one</c><00:06:16.450><c> with</c><00:06:16.630><c> Ray's</c><00:06:16.810><c> always</c><00:06:17.170><c> use</c>

00:06:17.580 --> 00:06:17.590 align:start position:0%
don't use rank one with Ray's always use
 

00:06:17.590 --> 00:06:20.430 align:start position:0%
don't use rank one with Ray's always use
either<00:06:17.890><c> n</c><00:06:18.190><c> by</c><00:06:18.670><c> one</c><00:06:18.970><c> matrices</c><00:06:19.440><c> basically</c>

00:06:20.430 --> 00:06:20.440 align:start position:0%
either n by one matrices basically
 

00:06:20.440 --> 00:06:23.190 align:start position:0%
either n by one matrices basically
column<00:06:20.740><c> vectors</c><00:06:21.100><c> or</c><00:06:21.370><c> one</c><00:06:21.880><c> by</c><00:06:22.090><c> n</c><00:06:22.330><c> matrices</c><00:06:22.780><c> or</c>

00:06:23.190 --> 00:06:23.200 align:start position:0%
column vectors or one by n matrices or
 

00:06:23.200 --> 00:06:25.140 align:start position:0%
column vectors or one by n matrices or
basically<00:06:23.500><c> row</c><00:06:23.680><c> vectors</c><00:06:24.190><c> feel</c><00:06:24.580><c> free</c><00:06:24.730><c> to</c><00:06:24.820><c> toss</c>

00:06:25.140 --> 00:06:25.150 align:start position:0%
basically row vectors feel free to toss
 

00:06:25.150 --> 00:06:26.760 align:start position:0%
basically row vectors feel free to toss
a<00:06:25.300><c> lot</c><00:06:25.450><c> of</c><00:06:25.540><c> assertion</c><00:06:26.020><c> statements</c><00:06:26.590><c> so</c>

00:06:26.760 --> 00:06:26.770 align:start position:0%
a lot of assertion statements so
 

00:06:26.770 --> 00:06:28.470 align:start position:0%
a lot of assertion statements so
double-check<00:06:27.130><c> the</c><00:06:27.400><c> dimensions</c><00:06:27.880><c> or</c><00:06:28.000><c> matrices</c>

00:06:28.470 --> 00:06:28.480 align:start position:0%
double-check the dimensions or matrices
 

00:06:28.480 --> 00:06:31.110 align:start position:0%
double-check the dimensions or matrices
and<00:06:28.660><c> rays</c><00:06:28.870><c> and</c><00:06:29.280><c> also</c><00:06:30.280><c> you</c><00:06:30.520><c> know</c><00:06:30.580><c> don't</c><00:06:30.850><c> be</c><00:06:30.910><c> shy</c>

00:06:31.110 --> 00:06:31.120 align:start position:0%
and rays and also you know don't be shy
 

00:06:31.120 --> 00:06:33.540 align:start position:0%
and rays and also you know don't be shy
about<00:06:31.300><c> calling</c><00:06:31.870><c> the</c><00:06:32.020><c> reshape</c><00:06:32.440><c> operation</c><00:06:33.070><c> to</c>

00:06:33.540 --> 00:06:33.550 align:start position:0%
about calling the reshape operation to
 

00:06:33.550 --> 00:06:35.370 align:start position:0%
about calling the reshape operation to
make<00:06:33.700><c> sure</c><00:06:33.880><c> that</c><00:06:34.180><c> your</c><00:06:34.360><c> matrices</c><00:06:34.720><c> or</c><00:06:35.169><c> your</c>

00:06:35.370 --> 00:06:35.380 align:start position:0%
make sure that your matrices or your
 

00:06:35.380 --> 00:06:37.390 align:start position:0%
make sure that your matrices or your
vectors<00:06:36.160><c> are</c><00:06:36.430><c> the</c><00:06:36.490><c> dimension</c>

00:06:37.390 --> 00:06:37.400 align:start position:0%
vectors are the dimension
 

00:06:37.400 --> 00:06:39.670 align:start position:0%
vectors are the dimension
you<00:06:37.520><c> needed</c><00:06:37.820><c> to</c><00:06:37.940><c> be</c><00:06:37.970><c> so</c><00:06:38.810><c> that</c><00:06:38.840><c> I</c><00:06:39.320><c> hope</c><00:06:39.650><c> that</c>

00:06:39.670 --> 00:06:39.680 align:start position:0%
you needed to be so that I hope that
 

00:06:39.680 --> 00:06:42.550 align:start position:0%
you needed to be so that I hope that
this<00:06:40.130><c> set</c><00:06:40.460><c> of</c><00:06:40.669><c> suggestions</c><00:06:41.300><c> helps</c><00:06:41.960><c> you</c><00:06:42.110><c> to</c>

00:06:42.550 --> 00:06:42.560 align:start position:0%
this set of suggestions helps you to
 

00:06:42.560 --> 00:06:44.650 align:start position:0%
this set of suggestions helps you to
eliminate<00:06:43.130><c> a</c><00:06:43.160><c> cause</c><00:06:43.460><c> of</c><00:06:43.490><c> bugs</c><00:06:43.850><c> that</c><00:06:44.030><c> they're</c>

00:06:44.650 --> 00:06:44.660 align:start position:0%
eliminate a cause of bugs that they're
 

00:06:44.660 --> 00:06:46.719 align:start position:0%
eliminate a cause of bugs that they're
from<00:06:44.870><c> from</c><00:06:45.139><c> from</c><00:06:45.169><c> Python</c><00:06:45.710><c> code</c><00:06:45.919><c> and</c><00:06:46.160><c> makes</c><00:06:46.610><c> the</c>

00:06:46.719 --> 00:06:46.729 align:start position:0%
from from from Python code and makes the
 

00:06:46.729 --> 00:06:50.470 align:start position:0%
from from from Python code and makes the
program<00:06:47.030><c> exercise</c><00:06:47.360><c> easier</c><00:06:47.750><c> to</c><00:06:48.229><c> complete</c>

