WEBVTT
Kind: captions
Language: en

00:00:06.400 --> 00:00:08.920
CHET HAASE: Good afternoon
and welcome to "What's

00:00:08.920 --> 00:00:09.871
New in Android."

00:00:09.871 --> 00:00:11.620
I guess this thing is
being live streamed,

00:00:11.620 --> 00:00:13.119
so we should also
say good afternoon

00:00:13.119 --> 00:00:14.565
to everybody else in the world.

00:00:14.565 --> 00:00:15.940
DAN SANDLER:
[NON ENGLISH SPEECH]

00:00:15.940 --> 00:00:18.330
CHET HAASE: That's right,
or something like that.

00:00:18.330 --> 00:00:19.240
I am Chet Haase.

00:00:19.240 --> 00:00:21.202
I'm on the Android
UI Toolkit team.

00:00:21.202 --> 00:00:22.410
DAN SANDLER: I'm Dan Sandler.

00:00:22.410 --> 00:00:25.460
I'm on the Android System UI
team in the Boston office.

00:00:25.460 --> 00:00:26.280
Boston!

00:00:26.280 --> 00:00:28.780
CHET HAASE: And thank you
for the overwhelming applause

00:00:28.780 --> 00:00:29.280
there.

00:00:29.280 --> 00:00:30.210
That was fantastic.

00:00:30.210 --> 00:00:34.461
[APPLAUSE]

00:00:34.461 --> 00:00:34.960
All right.

00:00:34.960 --> 00:00:35.709
Thanks for coming.

00:00:35.709 --> 00:00:37.980
That's all we've got today.

00:00:37.980 --> 00:00:39.060
Goodnight.

00:00:39.060 --> 00:00:43.620
So let's talk about, I don't
know, what's new in Android.

00:00:43.620 --> 00:00:47.350
We want to talk
about API and things

00:00:47.350 --> 00:00:50.620
like that, except we had the
idea that we should really

00:00:50.620 --> 00:00:51.610
step it up this year.

00:00:51.610 --> 00:00:53.318
DAN SANDLER: We need
to be inspirational.

00:00:53.318 --> 00:00:54.630
We need to encourage people.

00:00:54.630 --> 00:00:55.870
We need to open their mind.

00:00:55.870 --> 00:01:03.260
We need API, functions
worth calling.

00:01:03.260 --> 00:01:03.760
Sorry.

00:01:03.760 --> 00:01:05.135
I've got to pose
for the picture.

00:01:08.310 --> 00:01:10.270
CHET HAASE: So we're
going to talk about-- we'd

00:01:10.270 --> 00:01:11.936
like to talk about
all of the new stuff,

00:01:11.936 --> 00:01:14.240
but it turns out we really
don't have the time.

00:01:14.240 --> 00:01:15.770
We put so much
stuff in the slides

00:01:15.770 --> 00:01:17.740
that we basically spent
yesterday ripping out

00:01:17.740 --> 00:01:18.810
about two thirds of it.

00:01:18.810 --> 00:01:21.060
DAN SANDLER: There's, like,
another whole hour of talk

00:01:21.060 --> 00:01:23.100
that we could do on
the director's cut.

00:01:23.100 --> 00:01:23.260
CHET HAASE: Yeah.

00:01:23.260 --> 00:01:24.460
Look for the deleted scenes.

00:01:24.460 --> 00:01:24.780
There are a lot of them.

00:01:24.780 --> 00:01:25.759
DAN SANDLER: Unrated.

00:01:25.759 --> 00:01:28.300
CHET HAASE: So let's dive right
in and talk about some stuff,

00:01:28.300 --> 00:01:31.610
starting with let's talk
about M. So a lot of people

00:01:31.610 --> 00:01:35.880
are probably wondering
what M stands for.

00:01:35.880 --> 00:01:38.390
I know we are.

00:01:38.390 --> 00:01:39.210
Any guesses?

00:01:39.210 --> 00:01:41.530
Any guesses?

00:01:41.530 --> 00:01:43.395
My personal guess is Mmmmm.

00:01:46.510 --> 00:01:51.895
But today, more importantly, M
stands for M Developer Preview.

00:01:51.895 --> 00:01:55.220
[APPLAUSE]

00:01:55.220 --> 00:01:58.510
So let's talk about how to
actually build preview apps.

00:01:58.510 --> 00:02:01.050
So first of all, get the tool.

00:02:01.050 --> 00:02:05.400
So go to the site, get the tool,
download the SDK and Android

00:02:05.400 --> 00:02:07.960
Studio 1.3, and you
create your project

00:02:07.960 --> 00:02:10.190
the same way that you
always create your project,

00:02:10.190 --> 00:02:12.800
and then you go in and you
modify the project structure.

00:02:12.800 --> 00:02:16.690
What you're going to do is
build against Android M Preview,

00:02:16.690 --> 00:02:17.780
not surprisingly.

00:02:17.780 --> 00:02:19.720
And then if you look,
you don't have to edit.

00:02:19.720 --> 00:02:20.494
Please don't edit.

00:02:20.494 --> 00:02:21.910
Look in your
build.gradle profile.

00:02:21.910 --> 00:02:25.260
It'll probably say something
like "complie SDK version

00:02:25.260 --> 00:02:27.890
Android MNC," and then you know
that you're off and running

00:02:27.890 --> 00:02:29.765
and you can use the new
APIs that we're going

00:02:29.765 --> 00:02:31.650
to be talking about today.

00:02:31.650 --> 00:02:33.670
So write the code, and
then obviously, you're

00:02:33.670 --> 00:02:34.721
going to test it.

00:02:34.721 --> 00:02:37.220
There won't be any bugs, but
if there are, you can debug it.

00:02:37.220 --> 00:02:40.270
And then just go ahead and do
it again until you're done.

00:02:40.270 --> 00:02:41.810
An extra thing
that we should add

00:02:41.810 --> 00:02:44.319
is that the Preview
process this year

00:02:44.319 --> 00:02:46.860
is a little bit different than
the Preview process last year.

00:02:46.860 --> 00:02:49.750
We intend to actually have a
couple of different versions

00:02:49.750 --> 00:02:50.250
out there.

00:02:50.250 --> 00:02:52.160
So we're going to
incorporate the feedback

00:02:52.160 --> 00:02:54.520
that we get, and we have some
issues that we know about

00:02:54.520 --> 00:02:57.070
that we're working on still
internally, fix those bugs,

00:02:57.070 --> 00:02:58.940
come out with another
Preview release,

00:02:58.940 --> 00:03:00.700
fix those bugs from
that Preview cycle,

00:03:00.700 --> 00:03:01.950
come out with another release.

00:03:01.950 --> 00:03:03.724
And then sometime
after that dotted

00:03:03.724 --> 00:03:06.140
line that's sufficiently vague
that we're not pinning down

00:03:06.140 --> 00:03:10.496
a date on that one, we've
got a final release.

00:03:10.496 --> 00:03:11.620
That's the Preview release.

00:03:11.620 --> 00:03:15.110
Now let's talk about a
slew of APIs and features

00:03:15.110 --> 00:03:16.140
in no particular order.

00:03:16.140 --> 00:03:17.640
DAN SANDLER: In no
particular order,

00:03:17.640 --> 00:03:19.010
but we do want to talk
about some of the things

00:03:19.010 --> 00:03:20.140
that you saw in the
keynote, and one

00:03:20.140 --> 00:03:21.556
of the first ones--
hopefully this

00:03:21.556 --> 00:03:23.500
is exciting to all of
you-- is the changes

00:03:23.500 --> 00:03:26.002
that we made in App
Permissions for M

00:03:26.002 --> 00:03:27.460
to promote all
kinds of great stuff

00:03:27.460 --> 00:03:28.630
around installing and upgrading.

00:03:28.630 --> 00:03:29.890
So let's take a look at it.

00:03:29.890 --> 00:03:32.431
You may recall this is what it
looks like when somebody wants

00:03:32.431 --> 00:03:33.662
to install your app today.

00:03:33.662 --> 00:03:36.120
It is a wall of permissions
because if your app has reached

00:03:36.120 --> 00:03:37.760
a sufficient level
of complexity,

00:03:37.760 --> 00:03:39.270
in addition to
being sentient, it

00:03:39.270 --> 00:03:40.900
has to request
basically everything,

00:03:40.900 --> 00:03:42.520
and the user says,
OK, fine, whatever.

00:03:42.520 --> 00:03:46.420
It's not like I'm not going to
install Hangouts, let's say.

00:03:46.420 --> 00:03:51.390
In M, we push the button,
and let's see what happens.

00:03:51.390 --> 00:03:52.559
In M, runtime permissions.

00:03:52.559 --> 00:03:54.600
So when you install an
app, you see none of that.

00:03:54.600 --> 00:03:56.570
You click Install, it
downloads, it installs.

00:03:56.570 --> 00:03:58.492
That's it, completely
friction free.

00:03:58.492 --> 00:04:00.200
And then when the app
wants to go and use

00:04:00.200 --> 00:04:02.010
some feature of the
device, then you

00:04:02.010 --> 00:04:03.580
get the runtime
permission prompt.

00:04:03.580 --> 00:04:05.887
For an app that is going to
use a bunch of permissions,

00:04:05.887 --> 00:04:08.667
you know there's some things
without which it doesn't work--

00:04:08.667 --> 00:04:11.250
if you've got a camera app, it
needs the camera-- we recommend

00:04:11.250 --> 00:04:13.120
doing a warm welcome where
you ask for all those things

00:04:13.120 --> 00:04:13.550
upfront.

00:04:13.550 --> 00:04:15.591
But for other kinds of
permissions where you only

00:04:15.591 --> 00:04:17.892
need it occasionally, like
recording audio in Keep

00:04:17.892 --> 00:04:19.350
if you're going to
do a voice memo,

00:04:19.350 --> 00:04:23.440
you can wait until the
right time to ask the user.

00:04:23.440 --> 00:04:25.820
The user has ultimate
control over these things.

00:04:25.820 --> 00:04:27.850
Not only can the user
deny them in the moment,

00:04:27.850 --> 00:04:29.410
but they can go
back into Settings

00:04:29.410 --> 00:04:31.730
and find out all the
permissions that your app has

00:04:31.730 --> 00:04:33.950
and all of the apps that
have a particular permission

00:04:33.950 --> 00:04:39.230
and turn them off individually,
line item a la carte.

00:04:39.230 --> 00:04:40.361
That's a blank slide.

00:04:40.361 --> 00:04:42.110
It's basically everything
that you've ever

00:04:42.110 --> 00:04:44.090
asked for in
Android permissions,

00:04:44.090 --> 00:04:46.720
and now your app
has to deal with it.

00:04:46.720 --> 00:04:48.600
What does that mean in practice?

00:04:48.600 --> 00:04:51.720
It means that you can ask for
any information at any time

00:04:51.720 --> 00:04:53.790
if you're targeting M. If
you're not targeting M,

00:04:53.790 --> 00:04:55.366
you don't get any of this stuff.

00:04:55.366 --> 00:04:56.740
Legacy apps who
are not targeting

00:04:56.740 --> 00:04:58.760
M, the experience they
will get is basically

00:04:58.760 --> 00:05:01.660
what you have today pre-M, wall
of permissions at install time.

00:05:01.660 --> 00:05:03.670
There's no other way to do it.

00:05:03.670 --> 00:05:07.237
Users can go by and, for M
apps, deny those permissions

00:05:07.237 --> 00:05:08.070
at the request time.

00:05:08.070 --> 00:05:10.550
For legacy apps, they can
still go back into Settings.

00:05:10.550 --> 00:05:12.344
For an app that has
not been updated to M,

00:05:12.344 --> 00:05:13.760
if you are on an
M device, you can

00:05:13.760 --> 00:05:16.420
go ahead and turn those
permissions off, even

00:05:16.420 --> 00:05:17.154
for a legacy app.

00:05:17.154 --> 00:05:19.820
There's a dialog box in Settings
that says, whoa, hang on there,

00:05:19.820 --> 00:05:20.660
Tex.

00:05:20.660 --> 00:05:23.670
This app has not been updated
to M. It might not work right.

00:05:23.670 --> 00:05:26.800
But the user will still be
able to turn those things off.

00:05:26.800 --> 00:05:30.210
So even if you don't have any
plans immediately to rev for M,

00:05:30.210 --> 00:05:32.530
you need to test your
app in the M emulator

00:05:32.530 --> 00:05:34.820
to find out what happens
when those precious, precious

00:05:34.820 --> 00:05:37.130
permissions get
disabled by the user.

00:05:37.130 --> 00:05:39.195
There is a session--
is it today?

00:05:39.195 --> 00:05:39.820
Is it tomorrow?

00:05:39.820 --> 00:05:40.530
It'll be on YouTube regardless.

00:05:40.530 --> 00:05:41.310
CHET HAASE: It
might even be both.

00:05:41.310 --> 00:05:42.643
DAN SANDLER: Might even be both.

00:05:42.643 --> 00:05:44.240
"Permissions in M,
Best Practices."

00:05:44.240 --> 00:05:45.230
You definitely
want to go to that.

00:05:45.230 --> 00:05:47.090
They will get into all
the nitty gritty details

00:05:47.090 --> 00:05:48.850
of how to ask for
permission at runtime,

00:05:48.850 --> 00:05:51.040
what to do if you don't
get it, and so forth.

00:05:51.040 --> 00:05:51.830
CHET HAASE: Actually,
for everything

00:05:51.830 --> 00:05:53.621
that we're talking
about today, where there

00:05:53.621 --> 00:05:56.860
is an applicable session or
sandbox talk at the conference,

00:05:56.860 --> 00:05:59.500
we'll call it out and
suggest that you go there

00:05:59.500 --> 00:06:00.720
for the deeper details.

00:06:00.720 --> 00:06:02.810
As we said before, we
don't have a lot of time

00:06:02.810 --> 00:06:06.710
to cover things in any deep
amount of detail ourselves,

00:06:06.710 --> 00:06:07.210
so--

00:06:07.210 --> 00:06:08.110
DAN SANDLER: Are you
telling me to hurry up?

00:06:08.110 --> 00:06:09.850
Is that what you're saying?

00:06:09.850 --> 00:06:10.880
CHET HAASE: I think
you're telling me to.

00:06:10.880 --> 00:06:11.880
DAN SANDLER: I think so.

00:06:11.880 --> 00:06:13.390
CHET HAASE: Let's talk
about one of those things

00:06:13.390 --> 00:06:15.950
that we'll cover very, very
quickly, voice interaction.

00:06:15.950 --> 00:06:19.300
So there is a new thing
called VoiceInteractor

00:06:19.300 --> 00:06:22.120
that allows you to interact
with the voice input system.

00:06:22.120 --> 00:06:24.130
So there was already
the capability

00:06:24.130 --> 00:06:27.310
for a voice action of the
user to launch an intent

00:06:27.310 --> 00:06:29.320
and do something with
your application,

00:06:29.320 --> 00:06:32.160
but now you can actually
ask for clarifying

00:06:32.160 --> 00:06:34.670
information or confirmations
that become maybe

00:06:34.670 --> 00:06:36.120
audio responses to the user.

00:06:36.120 --> 00:06:40.780
So you add this new category to
your intent filter, the voice

00:06:40.780 --> 00:06:43.407
category, and then in your
code, you could already do this.

00:06:43.407 --> 00:06:45.240
You could say, was this
a voice interaction?

00:06:45.240 --> 00:06:46.365
Go ahead and do some stuff.

00:06:46.365 --> 00:06:48.140
But now you can
actually say, well

00:06:48.140 --> 00:06:51.380
actually, here's a string
to create a prompt out of.

00:06:51.380 --> 00:06:56.529
Pass this back through creating
the confirmation object.

00:06:56.529 --> 00:06:58.820
You're going to create a
voice interaction confirmation

00:06:58.820 --> 00:06:59.871
request.

00:06:59.871 --> 00:07:01.620
And then the prompt
goes back to the user,

00:07:01.620 --> 00:07:03.078
they do something
with it, and then

00:07:03.078 --> 00:07:05.060
the information comes
back to your activity,

00:07:05.060 --> 00:07:06.559
you get the appropriate
information,

00:07:06.559 --> 00:07:08.360
take the appropriate action.

00:07:08.360 --> 00:07:10.110
DAN SANDLER: Let's
talk about Fingerprint.

00:07:10.110 --> 00:07:12.710
We saw a lot of
this in the keynote.

00:07:12.710 --> 00:07:14.394
It's actually
pretty simple APIs.

00:07:14.394 --> 00:07:16.060
There are two major
ways to get into it.

00:07:16.060 --> 00:07:18.309
One, you can talk to the
brand new Fingerprint Manager

00:07:18.309 --> 00:07:20.632
in the Android Hardware
Package, I believe,

00:07:20.632 --> 00:07:22.090
and you can say,
hey, authenticate.

00:07:22.090 --> 00:07:24.670
What this does is it verifies
that the authorized user is

00:07:24.670 --> 00:07:28.120
present and is able to provide
one of the multiple enrolled

00:07:28.120 --> 00:07:30.410
fingers on the
fingerprint sensor.

00:07:30.410 --> 00:07:31.160
So you can enroll.

00:07:31.160 --> 00:07:33.570
You can say, I want this
finger, I want that finger.

00:07:33.570 --> 00:07:36.936
And this manages to check
to see whether the user can

00:07:36.936 --> 00:07:39.060
provide one of those fingers,
again, on the sensor.

00:07:39.060 --> 00:07:40.964
But your app controls
all of the UI.

00:07:40.964 --> 00:07:42.630
So if you want something
that's branded,

00:07:42.630 --> 00:07:44.852
if you've got your
own fancy animations,

00:07:44.852 --> 00:07:45.810
you can do all of that.

00:07:45.810 --> 00:07:49.410
This is all completely
behind the scenes APIs

00:07:49.410 --> 00:07:51.475
that you can call to
read from the sensor.

00:07:51.475 --> 00:07:53.100
If, on the other
hand, you don't really

00:07:53.100 --> 00:07:54.310
need to bother with
the UI and you just

00:07:54.310 --> 00:07:56.530
want to make sure that
the user is still there,

00:07:56.530 --> 00:07:58.380
you can use the existing
Keyguard Manager

00:07:58.380 --> 00:08:01.730
API Create Confirm Device
Credential Intent, essentially

00:08:01.730 --> 00:08:03.340
show the lock screen again.

00:08:03.340 --> 00:08:04.380
Show the lock screen
and allow the user

00:08:04.380 --> 00:08:06.296
to authenticate by
whatever means they usually

00:08:06.296 --> 00:08:09.800
use to get into the device, so
a pin or a password or a pattern

00:08:09.800 --> 00:08:12.462
or, on devices that
support it, a fingerprint.

00:08:12.462 --> 00:08:14.170
You do this to start
activity for result,

00:08:14.170 --> 00:08:16.150
you check for the OK result,
and then you're good to go

00:08:16.150 --> 00:08:17.784
and you know that
the user is there.

00:08:17.784 --> 00:08:19.950
We have sample code up on
the Google Samples section

00:08:19.950 --> 00:08:22.810
of GitHub, Android Fingerprint
Dialog, Android Confirm

00:08:22.810 --> 00:08:24.820
Credential, and there's
also a sandbox talk

00:08:24.820 --> 00:08:27.370
about this today and tomorrow
about fingerprint and payments

00:08:27.370 --> 00:08:27.520
APIs.

00:08:27.520 --> 00:08:29.500
We don't have time to
talk about pay right now.

00:08:29.500 --> 00:08:30.730
Go to that sandbox talk.

00:08:30.730 --> 00:08:32.146
Learn more.

00:08:32.146 --> 00:08:34.039
CHET HAASE: Let's
talk about backup.

00:08:34.039 --> 00:08:36.669
So we already back up a
bunch of stuff on the system.

00:08:36.669 --> 00:08:39.107
You get a new device,
you get settings

00:08:39.107 --> 00:08:40.690
that are associated
with your account,

00:08:40.690 --> 00:08:43.470
so we back up things like
Wi-Fi settings between devices

00:08:43.470 --> 00:08:44.192
and accounts.

00:08:44.192 --> 00:08:45.650
So all of that
stuff already works.

00:08:45.650 --> 00:08:49.220
So the new thing in M is by
default, all the data for all

00:08:49.220 --> 00:08:52.630
the apps that are
targeting M and greater

00:08:52.630 --> 00:08:54.730
is going to be backed up
automatically by default

00:08:54.730 --> 00:08:56.820
and then stored in
the user's account.

00:08:56.820 --> 00:08:59.730
You have the ability to opt
in and out of various portions

00:08:59.730 --> 00:09:02.530
of that if you want, so we can
see some simple sample code

00:09:02.530 --> 00:09:03.400
here.

00:09:03.400 --> 00:09:05.650
So you can specify
an XML file that's

00:09:05.650 --> 00:09:07.600
going to live in your
XML resource directory

00:09:07.600 --> 00:09:09.650
and then use these
Include and Exclude

00:09:09.650 --> 00:09:12.440
tags to say what exactly
you want backed up

00:09:12.440 --> 00:09:14.250
or what exactly you
do not want backed up.

00:09:14.250 --> 00:09:15.940
By default, everything
is backed up,

00:09:15.940 --> 00:09:18.800
but if you use an Include tag,
then we will only do that,

00:09:18.800 --> 00:09:20.991
or everything's backed up
and you use Exclude tags

00:09:20.991 --> 00:09:22.990
and we're going to pull
those things out and not

00:09:22.990 --> 00:09:25.380
back those up at your choice.

00:09:25.380 --> 00:09:27.810
Again, sandbox talk
that you should go to,

00:09:27.810 --> 00:09:29.770
"Unleashing the Power
of Android Backup,"

00:09:29.770 --> 00:09:31.977
so check that out
in your schedule.

00:09:31.977 --> 00:09:33.560
Let's talk about
Google Play Services.

00:09:33.560 --> 00:09:35.090
7.5 is out.

00:09:35.090 --> 00:09:37.690
I hope it's out, or maybe we
should just delete this slide

00:09:37.690 --> 00:09:38.670
before I talk about it.

00:09:38.670 --> 00:09:38.810
DAN SANDLER: No, no.

00:09:38.810 --> 00:09:40.737
CHET HAASE: Let's assume
that it's out by now.

00:09:40.737 --> 00:09:42.820
Let's talk about one of
the most exciting features

00:09:42.820 --> 00:09:45.440
there is GCM Network Manager.

00:09:45.440 --> 00:09:47.330
If anybody's familiar
with Job Scheduler,

00:09:47.330 --> 00:09:50.695
a very cool way of making
sure that your network

00:09:50.695 --> 00:09:53.070
traffic, your network requests,
are going to be much more

00:09:53.070 --> 00:09:54.567
optimal for the
device in general.

00:09:54.567 --> 00:09:56.150
You're going to batch
these things up.

00:09:56.150 --> 00:09:58.430
You're only going to do them
at certain optimal times

00:09:58.430 --> 00:10:01.400
when the device is charging,
when it's on Wi-Fi, whatever.

00:10:01.400 --> 00:10:04.630
That was awesome but it's
specific to L. GCM Network

00:10:04.630 --> 00:10:07.630
Manager takes that same
idea and extends it

00:10:07.630 --> 00:10:09.350
to releases prior to that.

00:10:09.350 --> 00:10:11.250
Everybody that's opting
into this system,

00:10:11.250 --> 00:10:13.890
it'll be able to batch up
all those requests together.

00:10:13.890 --> 00:10:16.990
Then on L, it will use the
underlying Job Scheduler

00:10:16.990 --> 00:10:19.600
technology and APIs, but
on previous releases,

00:10:19.600 --> 00:10:23.979
it uses its own home animation--
I'm talking about animations

00:10:23.979 --> 00:10:25.270
again even when I shouldn't be.

00:10:25.270 --> 00:10:26.590
DAN SANDLER: We really
can't stop you, can we?

00:10:26.590 --> 00:10:27.631
CHET HAASE: I don't know.

00:10:27.631 --> 00:10:28.395
Implementation.

00:10:28.395 --> 00:10:30.520
I'm going to use the word
"implementation" instead.

00:10:30.520 --> 00:10:32.311
That works a little
better in this context.

00:10:32.311 --> 00:10:33.460
I'm going to go with that.

00:10:33.460 --> 00:10:35.834
So it's going to use its own
stuff internally prior to L,

00:10:35.834 --> 00:10:37.980
and you're going to get
similar functionality

00:10:37.980 --> 00:10:40.470
across many releases,
so check that out.

00:10:40.470 --> 00:10:43.570
Also check out many of the
other things in the latest Play

00:10:43.570 --> 00:10:44.590
Services release.

00:10:44.590 --> 00:10:46.790
You've got Maps on Android Wear,
some of the other stuff listed

00:10:46.790 --> 00:10:47.331
on the slide.

00:10:47.331 --> 00:10:49.740
More importantly, go to the
"What's New in Google Play

00:10:49.740 --> 00:10:50.980
Services" session.

00:10:50.980 --> 00:10:53.980
I believe that's two
from now this afternoon,

00:10:53.980 --> 00:10:55.900
so check that out for
deeper information.

00:10:55.900 --> 00:10:57.570
DAN SANDLER: Let's
talk about power.

00:10:57.570 --> 00:10:58.528
Do you want more power?

00:10:58.528 --> 00:10:59.940
Sure, we all do.

00:10:59.940 --> 00:11:03.390
In M, the focus has been
on improving battery life,

00:11:03.390 --> 00:11:06.070
specifically improving
screen off battery life.

00:11:06.070 --> 00:11:08.270
A device that you're not
holding, not plugged in,

00:11:08.270 --> 00:11:10.630
it should be able to sit
there for kind of a long time.

00:11:10.630 --> 00:11:12.171
In the keynote, you
heard about Doze,

00:11:12.171 --> 00:11:14.160
which is the big new
device-wide feature that

00:11:14.160 --> 00:11:15.160
is helping us with this.

00:11:15.160 --> 00:11:17.570
Essentially, a device that is
untouched for a long period

00:11:17.570 --> 00:11:18.670
of time becomes inactive.

00:11:18.670 --> 00:11:20.530
We're actually using
the accelerometer

00:11:20.530 --> 00:11:22.770
to see if you are actually
moving this device around.

00:11:22.770 --> 00:11:24.562
If it's in your pocket,
this doesn't count,

00:11:24.562 --> 00:11:26.311
but a device that is
sitting on the table,

00:11:26.311 --> 00:11:28.850
sitting on the couch, sitting
in a bag for a long period

00:11:28.850 --> 00:11:32.010
becomes inactive and waits
longer and longer to wake

00:11:32.010 --> 00:11:36.380
up for scheduled repeating
events and things like that.

00:11:36.380 --> 00:11:40.470
Now, as Dave said, if
there are real time alarms,

00:11:40.470 --> 00:11:42.250
if there are high
priority GCM tickles,

00:11:42.250 --> 00:11:44.791
things like that, sure, we'll
wake the device up immediately.

00:11:44.791 --> 00:11:46.750
We don't want to miss
an important text.

00:11:46.750 --> 00:11:48.280
CHET HAASE: Also earthquakes.

00:11:48.280 --> 00:11:49.600
DAN SANDLER: Well, OK.

00:11:49.600 --> 00:11:52.930
You work on that app
for the accelerometer.

00:11:52.930 --> 00:11:55.120
And then as soon as
you pick up the device,

00:11:55.120 --> 00:11:57.530
start interacting with it in
some way, even plug it in,

00:11:57.530 --> 00:12:00.702
Doze turns off, the device
goes back to syncing as normal.

00:12:00.702 --> 00:12:02.410
We're going to take
the same idea as well

00:12:02.410 --> 00:12:04.862
and apply it to individual
apps that you haven't used

00:12:04.862 --> 00:12:06.570
for a long period of
time, and by long, I

00:12:06.570 --> 00:12:07.910
mean more on the order of days.

00:12:07.910 --> 00:12:09.270
We call this app Standby.

00:12:09.270 --> 00:12:11.230
So an app that you
installed a long time ago,

00:12:11.230 --> 00:12:12.860
you kind of forgot about
it, you're not using it.

00:12:12.860 --> 00:12:14.210
After a while,
it's going to lose

00:12:14.210 --> 00:12:16.418
network access and the
ability to do other background

00:12:16.418 --> 00:12:19.365
tasks so it can't sit there
and just continually sip

00:12:19.365 --> 00:12:22.030
away at the coulombs
hiding in your battery.

00:12:22.030 --> 00:12:25.100
So that app is going to go
dormant until you use it again

00:12:25.100 --> 00:12:28.840
or until the device
gets plugged in.

00:12:28.840 --> 00:12:33.797
Let's talk about what we saw
in the keynote as Now on Tap.

00:12:33.797 --> 00:12:35.380
In the APIs, you'll
see this is called

00:12:35.380 --> 00:12:37.560
Support for an Assistant.

00:12:37.560 --> 00:12:39.855
In order to talk
to the assistant,

00:12:39.855 --> 00:12:42.105
we have some new APIs that
you can look at on activity

00:12:42.105 --> 00:12:43.510
in applications
so you can provide

00:12:43.510 --> 00:12:45.176
very specific information
that you think

00:12:45.176 --> 00:12:47.750
is going to be relevant to
something like Now on Tap

00:12:47.750 --> 00:12:50.344
to be able to provide you just
in time help for the user.

00:12:50.344 --> 00:12:51.760
So what you're
going to want to do

00:12:51.760 --> 00:12:54.900
is see the SDK docs as part
of the M Preview release

00:12:54.900 --> 00:12:56.990
to figure out how to use
those and integrate those

00:12:56.990 --> 00:12:59.387
into your app to
provide the best data.

00:12:59.387 --> 00:13:01.845
CHET HAASE: Data binding, one
of the most exciting features

00:13:01.845 --> 00:13:05.730
to come out of the
toolkit arena right now.

00:13:05.730 --> 00:13:09.210
It's an idea that's been
around in various forms

00:13:09.210 --> 00:13:11.450
elsewhere for years,
and we're incorporating

00:13:11.450 --> 00:13:13.750
some of those ideas here,
where it's the ability

00:13:13.750 --> 00:13:17.310
to connect the data model
to some of the UI elements

00:13:17.310 --> 00:13:18.240
in your application.

00:13:18.240 --> 00:13:20.360
This is something
that you do already.

00:13:20.360 --> 00:13:22.491
An application that's
all UI and no data

00:13:22.491 --> 00:13:23.490
is basically a demo app.

00:13:23.490 --> 00:13:24.360
That's what I write.

00:13:24.360 --> 00:13:25.470
I write demo apps.

00:13:25.470 --> 00:13:27.530
But real applications
should actually have data,

00:13:27.530 --> 00:13:30.070
and when they do, you want
to propagate that information

00:13:30.070 --> 00:13:31.590
to the UI, and when
it changes, you

00:13:31.590 --> 00:13:32.954
need to propagate the changes.

00:13:32.954 --> 00:13:34.370
And you end up
creating listeners,

00:13:34.370 --> 00:13:36.480
you end up creating property
change notifications.

00:13:36.480 --> 00:13:38.639
You've got setters and
getters all over the place

00:13:38.639 --> 00:13:39.180
in your code.

00:13:39.180 --> 00:13:41.010
It's not difficult
code to write but it's

00:13:41.010 --> 00:13:42.942
a lot of tedious
boilerplate that you write

00:13:42.942 --> 00:13:44.150
over and over and over again.

00:13:44.150 --> 00:13:47.455
Wouldn't it be nice if we
could actually do that for you?

00:13:47.455 --> 00:13:49.080
So that's the idea
behind data binding.

00:13:49.080 --> 00:13:50.276
Let's take a simple example.

00:13:50.276 --> 00:13:51.650
I think this is
an example that's

00:13:51.650 --> 00:13:54.590
going to be used in the sandbox
talk that you should go to.

00:13:54.590 --> 00:13:57.191
There's one this afternoon
and one tomorrow as well.

00:13:57.191 --> 00:13:59.440
So you've got this idea where
you've got some pictures

00:13:59.440 --> 00:14:01.200
and you have prices
associated with the items that

00:14:01.200 --> 00:14:02.460
are shown in the pictures.

00:14:02.460 --> 00:14:05.600
So you probably have some
item in your RecyclerView

00:14:05.600 --> 00:14:08.260
that's binding to some
TextView and ImageView.

00:14:08.260 --> 00:14:09.985
Through data binding,
we don't have time

00:14:09.985 --> 00:14:11.360
to go through the
entire example,

00:14:11.360 --> 00:14:13.620
but I can show you
the end result.

00:14:13.620 --> 00:14:15.530
You end up having this
new type of resource

00:14:15.530 --> 00:14:18.320
file that we've defined
called a Layout.

00:14:18.320 --> 00:14:21.030
It's not a view layout
but it's an overall layout

00:14:21.030 --> 00:14:23.690
that has both the view
hierarchy information as well

00:14:23.690 --> 00:14:26.329
as this section of
data that you associate

00:14:26.329 --> 00:14:27.370
with that view hierarchy.

00:14:27.370 --> 00:14:29.539
So here, you can see that
we have the layout file

00:14:29.539 --> 00:14:30.830
and then we have this variable.

00:14:30.830 --> 00:14:33.334
We said, OK, we're going to
have this item thing that we're

00:14:33.334 --> 00:14:35.250
going to call Item that
we can refer to, then,

00:14:35.250 --> 00:14:39.250
within the file, and then
we have the ImageView

00:14:39.250 --> 00:14:41.470
and the TextView that
can automatically

00:14:41.470 --> 00:14:43.540
bind to the data in there.

00:14:43.540 --> 00:14:45.040
So using this simple
language, they

00:14:45.040 --> 00:14:47.990
can say OK, give me the field in
there and bind to that instead.

00:14:47.990 --> 00:14:50.110
And they can also do
additional processing on that

00:14:50.110 --> 00:14:52.060
so they can actually
format the string,

00:14:52.060 --> 00:14:56.710
pick up a string format object
from the Strings resource file

00:14:56.710 --> 00:14:59.360
and attach that to extra
information associated

00:14:59.360 --> 00:15:00.410
with several variables.

00:15:00.410 --> 00:15:03.180
So very powerful, very
simple, and also very

00:15:03.180 --> 00:15:04.870
performant because
all of the hard

00:15:04.870 --> 00:15:06.690
work is actually
done at build time.

00:15:06.690 --> 00:15:09.450
So it takes all the information
created in your resource files,

00:15:09.450 --> 00:15:12.310
preprocesses that into
the code that's actually

00:15:12.310 --> 00:15:13.310
going to run at runtime.

00:15:13.310 --> 00:15:15.643
So we're not doing anything
tricky like using reflection

00:15:15.643 --> 00:15:18.250
at runtime, which you
really wouldn't want to do.

00:15:18.250 --> 00:15:21.940
Instead, we preprocess this
into very efficient mechanisms

00:15:21.940 --> 00:15:24.640
that work fast enough
at runtime for you.

00:15:24.640 --> 00:15:27.160
So please check out
the talk in the future.

00:15:27.160 --> 00:15:28.570
Let's talk about some more--

00:15:28.570 --> 00:15:29.190
[APPLAUSE]

00:15:29.190 --> 00:15:30.180
Yay data binding.

00:15:30.180 --> 00:15:30.746
DAN SANDLER: Fans
of data binding.

00:15:30.746 --> 00:15:31.759
Awesome.

00:15:31.759 --> 00:15:32.550
We found our crowd.

00:15:32.550 --> 00:15:33.530
These are our people, Chet.

00:15:33.530 --> 00:15:34.350
CHET HAASE: You
know, they should

00:15:34.350 --> 00:15:36.266
have talked about data
binding in the keynote.

00:15:36.266 --> 00:15:38.320
When we talked about
keynote items, no applause.

00:15:38.320 --> 00:15:40.044
Data binding, big applause.

00:15:40.044 --> 00:15:41.960
We're going to go back,
we're going to rewind,

00:15:41.960 --> 00:15:43.530
we're going to redo
the keynote, and it's

00:15:43.530 --> 00:15:44.750
going to be all
about data binding,

00:15:44.750 --> 00:15:45.800
two and a half hours
on data binding.

00:15:45.800 --> 00:15:46.520
DAN SANDLER: We'll
fix this in post.

00:15:46.520 --> 00:15:46.710
CHET HAASE: That's right.

00:15:46.710 --> 00:15:47.480
Excellent.

00:15:47.480 --> 00:15:49.090
All right, UI features.

00:15:49.090 --> 00:15:52.800
This is a mix of stuff,
the most important of which

00:15:52.800 --> 00:15:55.466
is probably the Android
Design Support Library.

00:15:55.466 --> 00:15:56.840
Again, there's a
sandbox talk you

00:15:56.840 --> 00:15:59.680
should go to to find out
the specific details there.

00:15:59.680 --> 00:16:01.990
So with material
design, we had lots

00:16:01.990 --> 00:16:04.030
of suggestions and
patterns and said,

00:16:04.030 --> 00:16:06.070
this is the new
way to do things.

00:16:06.070 --> 00:16:08.180
And then developers went
forth and did things

00:16:08.180 --> 00:16:10.030
and they wrote a lot
of code in the process

00:16:10.030 --> 00:16:10.670
trying to figure out.

00:16:10.670 --> 00:16:12.503
Everybody was doing
their own implementation

00:16:12.503 --> 00:16:13.260
of this and that.

00:16:13.260 --> 00:16:15.218
What we're trying to do
with the Design Support

00:16:15.218 --> 00:16:17.956
Library is embed some of those
practices into these components

00:16:17.956 --> 00:16:19.080
that we then just give you.

00:16:19.080 --> 00:16:21.840
And you can use these,
hopefully get up

00:16:21.840 --> 00:16:24.580
to speed on material
design a little bit faster

00:16:24.580 --> 00:16:26.000
and use our implementation.

00:16:26.000 --> 00:16:27.360
It's going to be a
little more consistent

00:16:27.360 --> 00:16:29.776
and it's certainly going to
be a little bit easier for you

00:16:29.776 --> 00:16:30.416
to do that.

00:16:30.416 --> 00:16:32.040
The first of which
is worth mentioning,

00:16:32.040 --> 00:16:33.080
the Coordinator Layout.

00:16:33.080 --> 00:16:34.660
This is something
that associates

00:16:34.660 --> 00:16:37.070
the views, the hierarchy, and
then the behaviors of those

00:16:37.070 --> 00:16:37.889
views in there.

00:16:37.889 --> 00:16:40.180
Several of the components
that we're talking about here

00:16:40.180 --> 00:16:41.980
plug into the
coordinator layout so

00:16:41.980 --> 00:16:44.180
that they can interact
together and participate

00:16:44.180 --> 00:16:45.610
in this common playground.

00:16:45.610 --> 00:16:49.250
We have the Snackbar component,
we've got TabLayout widgets,

00:16:49.250 --> 00:16:52.840
we've got NavigationView,
TextInputLayout.

00:16:52.840 --> 00:16:55.170
This is the ability
to actually see

00:16:55.170 --> 00:16:56.840
some text that says
what you're supposed

00:16:56.840 --> 00:16:59.400
to be doing with this thing, as
well as some error validation

00:16:59.400 --> 00:17:00.592
text in there.

00:17:00.592 --> 00:17:01.300
And then the FAB.

00:17:01.300 --> 00:17:03.550
Everybody always asked us
for the FAB, and we're like,

00:17:03.550 --> 00:17:05.210
it's just a circle
with a shadow,

00:17:05.210 --> 00:17:06.460
but apparently they wanted it.

00:17:06.460 --> 00:17:07.890
DAN SANDLER: Now it's
an inspirational circle

00:17:07.890 --> 00:17:08.359
with a shadow.

00:17:08.359 --> 00:17:09.859
CHET HAASE: It's
very inspirational.

00:17:09.859 --> 00:17:11.250
I'm inspired.

00:17:11.250 --> 00:17:12.730
Some other random UI changes.

00:17:12.730 --> 00:17:15.010
There's work ongoing
in RecyclerView,

00:17:15.010 --> 00:17:18.750
powerful new replacement-ish
for a list view

00:17:18.750 --> 00:17:21.260
that came out in
the last release.

00:17:21.260 --> 00:17:23.079
There's other features
and functionality

00:17:23.079 --> 00:17:26.430
going into that, so just swipe
to dismiss and drag and drop,

00:17:26.430 --> 00:17:28.359
and some new animations
associated with that.

00:17:28.359 --> 00:17:29.600
See, animations work there.

00:17:29.600 --> 00:17:30.630
DAN SANDLER: They did.

00:17:30.630 --> 00:17:33.240
CHET HAASE: So animations
in its implementation.

00:17:33.240 --> 00:17:35.515
And then we have some changes
in WebView PostMessage

00:17:35.515 --> 00:17:37.140
so you can have the
ability to interact

00:17:37.140 --> 00:17:40.310
between WebView and JavaScript
and post messages there.

00:17:40.310 --> 00:17:42.930
We also have more
diagnostic capability

00:17:42.930 --> 00:17:45.980
around WebView clients,
and also the ability

00:17:45.980 --> 00:17:49.414
to pre-render to an off
screen raster in a situation

00:17:49.414 --> 00:17:51.330
where otherwise it might
flicker on the screen

00:17:51.330 --> 00:17:52.163
during an animation.

00:17:52.163 --> 00:17:53.420
It takes up more memory.

00:17:53.420 --> 00:17:54.940
There's a trade
off between memory

00:17:54.940 --> 00:17:57.397
and preserving those
bits more solidly,

00:17:57.397 --> 00:17:59.730
so you can make the right
decision for your application.

00:17:59.730 --> 00:18:01.146
DAN SANDLER: And
all that stuff is

00:18:01.146 --> 00:18:03.540
in the SDK docs as well as
part of the M Preview release,

00:18:03.540 --> 00:18:04.160
I believe.

00:18:04.160 --> 00:18:04.660
Yes.

00:18:04.660 --> 00:18:05.743
CHET HAASE: Notifications.

00:18:05.743 --> 00:18:07.980
Why don't you talk
about notifications?

00:18:07.980 --> 00:18:08.460
DAN SANDLER: You
thought you were

00:18:08.460 --> 00:18:10.340
going to get away without
me giving you a notification

00:18:10.340 --> 00:18:11.550
lecture, but this is my baby.

00:18:11.550 --> 00:18:13.050
I'm going to talk
about notifications.

00:18:13.050 --> 00:18:14.550
Fortunately, there
isn't nearly as

00:18:14.550 --> 00:18:16.450
much to take in as
there was in Lollipop.

00:18:16.450 --> 00:18:20.279
Lollipop was kind of
a bumper crop for us.

00:18:20.279 --> 00:18:22.570
In M, the first thing I need
to explain is a new class.

00:18:22.570 --> 00:18:25.040
Chet let me work in his team's
package for a little while

00:18:25.040 --> 00:18:27.160
and build something called Icon.

00:18:27.160 --> 00:18:28.760
Icon is not all
that complicated.

00:18:28.760 --> 00:18:30.530
That's why I built it.

00:18:30.530 --> 00:18:33.560
All it does is hold either
a drawable resource ID

00:18:33.560 --> 00:18:35.880
or a bitmap or a
byte array that you

00:18:35.880 --> 00:18:37.880
promise contains a
compressed bitmap of the sort

00:18:37.880 --> 00:18:39.680
that bitmap factory can decode.

00:18:39.680 --> 00:18:40.950
Why do we need this?

00:18:40.950 --> 00:18:42.980
Because now, when you
build a notification,

00:18:42.980 --> 00:18:46.536
you can just pass one of these
Icon objects to set small icon.

00:18:46.536 --> 00:18:47.910
You are using the
builder, right?

00:18:47.910 --> 00:18:49.870
Nobody's calling Set
Latest Event Info anymore?

00:18:49.870 --> 00:18:51.370
CHET HAASE: Who's
using the builder?

00:18:51.370 --> 00:18:52.590
DAN SANDLER: That's right.

00:18:52.590 --> 00:18:53.810
CHET HAASE: Who's not
using the builder?

00:18:53.810 --> 00:18:54.640
DAN SANDLER: I'll
see you outside.

00:18:54.640 --> 00:18:55.473
CHET HAASE: Get out.

00:18:55.473 --> 00:18:57.570
DAN SANDLER: That's right.

00:18:57.570 --> 00:18:58.410
So great, Dan.

00:18:58.410 --> 00:19:00.570
So you took what was
one line of code,

00:19:00.570 --> 00:19:03.290
Set Small Icon of a resource ID,
and now you've made it three.

00:19:03.290 --> 00:19:04.956
Now I have to construct
this other icon.

00:19:04.956 --> 00:19:07.310
By the way, the old Set Small
Icon API does still work.

00:19:07.310 --> 00:19:09.247
We don't deprecate APIs
that fast around here.

00:19:09.247 --> 00:19:11.080
How long does it take
before we can actually

00:19:11.080 --> 00:19:13.090
kill a deprecated API?

00:19:13.090 --> 00:19:14.942
CHET HAASE: Three
milliseconds-- no.

00:19:14.942 --> 00:19:16.150
DAN SANDLER: 17 milliseconds.

00:19:16.150 --> 00:19:16.650
No, wait.

00:19:16.650 --> 00:19:17.550
That's a frame.

00:19:17.550 --> 00:19:18.430
CHET HAASE: We're
going to drop a frame.

00:19:18.430 --> 00:19:19.070
That's true.

00:19:19.070 --> 00:19:19.680
DAN SANDLER: OK, that's good.

00:19:19.680 --> 00:19:21.120
No jank, not on this stage.

00:19:21.120 --> 00:19:22.800
OK, Dan, why do we bother?

00:19:22.800 --> 00:19:24.000
Why is this important?

00:19:24.000 --> 00:19:26.190
I told you that an icon
can contain a resource ID.

00:19:26.190 --> 00:19:28.800
It can also contain a bitmap.

00:19:28.800 --> 00:19:31.760
You can use a bitmap so the
first time as the small icon

00:19:31.760 --> 00:19:32.640
in a notification.

00:19:32.640 --> 00:19:35.620
So if you've ever written an app
that posts notification icons

00:19:35.620 --> 00:19:39.790
like these and you've had to
cut 60,000 assets to contain

00:19:39.790 --> 00:19:42.430
every combination of
weather and temperature,

00:19:42.430 --> 00:19:44.230
although for California
users, obviously,

00:19:44.230 --> 00:19:46.880
you just need the one, now
you can generate these things

00:19:46.880 --> 00:19:49.180
on the fly using a bitmap.

00:19:49.180 --> 00:19:52.294
If you download an asset
from your web back end

00:19:52.294 --> 00:19:54.710
or something, an avatar icon
or something and it's a ping,

00:19:54.710 --> 00:19:56.330
you don't even need
to decompress it.

00:19:56.330 --> 00:19:57.580
So this actually saves memory.

00:19:57.580 --> 00:20:00.274
This saves time moving
things between processes.

00:20:00.274 --> 00:20:01.440
I'm pretty excited about it.

00:20:01.440 --> 00:20:03.210
CHET HAASE: Ladies and
gentlemen, icons with bitmaps.

00:20:03.210 --> 00:20:04.130
DAN SANDLER: There we go.

00:20:04.130 --> 00:20:04.671
That's right.

00:20:04.671 --> 00:20:06.510
[APPLAUSE]

00:20:06.510 --> 00:20:08.195
Sometimes, it's
the little things.

00:20:08.195 --> 00:20:09.070
CHET HAASE: Who knew?

00:20:09.070 --> 00:20:09.986
DAN SANDLER: Who knew?

00:20:09.986 --> 00:20:10.780
Let's move on.

00:20:10.780 --> 00:20:12.380
CHET HAASE: Let's talk
about some text stuff.

00:20:12.380 --> 00:20:14.088
A couple of different
interesting changes

00:20:14.088 --> 00:20:14.940
going on there.

00:20:14.940 --> 00:20:18.572
First of all, the gestures
around text selection

00:20:18.572 --> 00:20:20.530
have been improved, make
it a little bit faster

00:20:20.530 --> 00:20:24.590
to choose things more
accurately and more quickly.

00:20:24.590 --> 00:20:27.150
So you drag the handles out
and as you expand the area,

00:20:27.150 --> 00:20:29.030
you expand by word,
and as you contract,

00:20:29.030 --> 00:20:30.310
you contract by character.

00:20:30.310 --> 00:20:31.840
So you can have
the same precision

00:20:31.840 --> 00:20:34.114
but you can also select
larger blocks of text

00:20:34.114 --> 00:20:35.780
much more quickly
than you could before.

00:20:35.780 --> 00:20:38.240
Also, I want to point your
eyes to the screenshot

00:20:38.240 --> 00:20:40.870
where you can see the
floating palette of actions.

00:20:40.870 --> 00:20:43.410
This is maybe not such an
issue on a small phone screen,

00:20:43.410 --> 00:20:45.120
but if you're using
a large tablet device

00:20:45.120 --> 00:20:46.536
and you select
text way down there

00:20:46.536 --> 00:20:48.482
and then you have to
reach all the way up

00:20:48.482 --> 00:20:50.440
to the top of the screen
to hit the action bar,

00:20:50.440 --> 00:20:53.232
sometimes it's so tedious for
we people that don't actually

00:20:53.232 --> 00:20:54.940
get much exercise
during our coding days.

00:20:54.940 --> 00:20:55.410
DAN SANDLER: My arthritis, yeah.

00:20:55.410 --> 00:20:56.340
There's no way.

00:20:56.340 --> 00:20:58.590
CHET HAASE: So what we have
now are floating palettes,

00:20:58.590 --> 00:21:00.590
and we've enabled this
by default in TextView.

00:21:00.590 --> 00:21:03.430
So you've got a TextView up,
which this example is from,

00:21:03.430 --> 00:21:05.780
and you select the text and
automatically, the floating

00:21:05.780 --> 00:21:07.591
palette of actions
is right there.

00:21:07.591 --> 00:21:10.090
If you have other views that
are not these default TextViews

00:21:10.090 --> 00:21:12.590
that we enable this for, you
can set your own action mode,

00:21:12.590 --> 00:21:14.530
get the same behavior.

00:21:14.530 --> 00:21:17.330
We also have the
ability to process text.

00:21:17.330 --> 00:21:20.290
So you can create the
capability in your activity

00:21:20.290 --> 00:21:23.062
to receive this
information to say, oh,

00:21:23.062 --> 00:21:24.270
they just selected this text.

00:21:24.270 --> 00:21:25.280
What would you
like to do with it?

00:21:25.280 --> 00:21:27.120
You can translate
that information,

00:21:27.120 --> 00:21:28.750
you can replace
the word for them,

00:21:28.750 --> 00:21:30.250
you can send back
other suggestions,

00:21:30.250 --> 00:21:34.430
you can do other things with
the text that got sent in,

00:21:34.430 --> 00:21:37.260
so check out the new
text processing APIs.

00:21:37.260 --> 00:21:40.139
And also, there was a lot of
work done with both performance

00:21:40.139 --> 00:21:42.180
to enable this higher
quality formatting, as well

00:21:42.180 --> 00:21:43.221
as the formatting itself.

00:21:43.221 --> 00:21:46.190
So we have the
ability to format text

00:21:46.190 --> 00:21:49.480
much more nicely
with hyphenations,

00:21:49.480 --> 00:21:51.572
and also to shape that text.

00:21:51.572 --> 00:21:52.530
DAN SANDLER: Hey, Chet.

00:21:52.530 --> 00:21:54.760
I think people have
been watching for an API

00:21:54.760 --> 00:21:55.730
like this for a while.

00:21:55.730 --> 00:21:56.560
CHET HAASE: Have they?

00:21:56.560 --> 00:21:57.520
So you know what this means?

00:21:57.520 --> 00:21:58.269
DAN SANDLER: I do.

00:21:58.269 --> 00:22:00.040
CHET HAASE: All right.

00:22:00.040 --> 00:22:01.680
Well, there it is.

00:22:01.680 --> 00:22:03.890
We're done.

00:22:03.890 --> 00:22:05.890
You may be wondering,
why would you want

00:22:05.890 --> 00:22:10.020
your text in a circular format?

00:22:10.020 --> 00:22:12.310
DAN SANDLER: We did
this joke already.

00:22:12.310 --> 00:22:14.500
We already-- all right,
let's start again.

00:22:14.500 --> 00:22:16.804
I'm Dan.

00:22:16.804 --> 00:22:18.470
CHET HAASE: I was
doing a different one.

00:22:18.470 --> 00:22:19.525
DAN SANDLER: I see.

00:22:19.525 --> 00:22:20.650
CHET HAASE: Parallel jokes.

00:22:20.650 --> 00:22:23.510
App Linking go.

00:22:23.510 --> 00:22:25.430
DAN SANDLER: So App Linking.

00:22:25.430 --> 00:22:27.610
We touched on this a
little bit in the keynote.

00:22:27.610 --> 00:22:28.890
The problem that
we're trying to solve

00:22:28.890 --> 00:22:30.650
is one that we created
with an amazing feature

00:22:30.650 --> 00:22:32.520
in Android, that is to
say, intent filters.

00:22:32.520 --> 00:22:34.930
You as an app can say,
by the way, these URLs,

00:22:34.930 --> 00:22:36.640
I know what to do with them.

00:22:36.640 --> 00:22:39.180
You're expecting that the user,
having had an app installed

00:22:39.180 --> 00:22:42.040
that knows how to handle
a particular URL subset

00:22:42.040 --> 00:22:43.910
can do the right thing with it.

00:22:43.910 --> 00:22:46.100
But sometimes you have an
app and you have a domain

00:22:46.100 --> 00:22:47.470
and they're owned by
the same developer,

00:22:47.470 --> 00:22:48.930
and that relationship
is stronger,

00:22:48.930 --> 00:22:50.596
and so App Links are
about understanding

00:22:50.596 --> 00:22:51.600
that relationship.

00:22:51.600 --> 00:22:54.020
We've got documentation about
this on the Preview site

00:22:54.020 --> 00:22:54.692
as well.

00:22:54.692 --> 00:22:56.400
So what we're going
to do with App Links,

00:22:56.400 --> 00:22:57.858
the way that you
establish the link

00:22:57.858 --> 00:23:00.990
that you saw in the keynote
where a URL goes directly

00:23:00.990 --> 00:23:03.240
to your app if you also
control that domain is you're

00:23:03.240 --> 00:23:04.060
going to have two files.

00:23:04.060 --> 00:23:06.150
One, you're going to have
a Statements declaration.

00:23:06.150 --> 00:23:08.330
We put that on the website
in a well known location,

00:23:08.330 --> 00:23:11.000
specifically .well-known.

00:23:11.000 --> 00:23:12.590
It's a bundle of
JSON that includes,

00:23:12.590 --> 00:23:15.190
among other things,
the APK package

00:23:15.190 --> 00:23:20.150
name and the certificate hash
that you extract from Keytool.

00:23:20.150 --> 00:23:22.920
You'll note that here in the
example, it's HTTP example.com.

00:23:22.920 --> 00:23:25.750
That'll be HTTPS by
the time M is finished.

00:23:25.750 --> 00:23:28.030
You put the statements
JSON up on your web server,

00:23:28.030 --> 00:23:29.480
and then in your manifest-- wow.

00:23:29.480 --> 00:23:30.314
That jumped quickly.

00:23:30.314 --> 00:23:31.146
What happened there?

00:23:31.146 --> 00:23:31.670
There we go.

00:23:31.670 --> 00:23:34.151
In your manifest, you
say Android Auto Verify.

00:23:34.151 --> 00:23:34.900
That's all you do.

00:23:34.900 --> 00:23:36.399
You add that to
your existing intent

00:23:36.399 --> 00:23:38.190
filter that can
handle certain URLs,

00:23:38.190 --> 00:23:44.189
and now we will go and look for
that statements.json manifest

00:23:44.189 --> 00:23:44.980
from your manifest.

00:23:44.980 --> 00:23:46.540
So here's what happens
at install time.

00:23:46.540 --> 00:23:48.581
When your app goes in,
the Package Manager looks,

00:23:48.581 --> 00:23:50.820
sees Auto Verify, will
go to the website,

00:23:50.820 --> 00:23:52.690
try to pull down
statements.json,

00:23:52.690 --> 00:23:55.090
match that hash to the sign
in certificate on your APK.

00:23:55.090 --> 00:23:58.430
And if everything works out just
fine, an App Link is created

00:23:58.430 --> 00:24:00.920
and now links to those
URLs will open in your app

00:24:00.920 --> 00:24:04.835
without bringing up the
intent disambiguation chooser.

00:24:04.835 --> 00:24:07.130
If anything fails about
that, if the website

00:24:07.130 --> 00:24:09.940
doesn't have statements.json, if
the certificate doesn't match,

00:24:09.940 --> 00:24:11.610
if the package
doesn't match, nothing

00:24:11.610 --> 00:24:13.470
happens, you revert
to the old behavior,

00:24:13.470 --> 00:24:15.560
and those URLs will pop
up an intent chooser that

00:24:15.560 --> 00:24:18.260
allows you to pick between the
browser or the various apps

00:24:18.260 --> 00:24:20.617
on the device that can
handle that URL stem.

00:24:20.617 --> 00:24:22.450
And of course, as with
everything else in M,

00:24:22.450 --> 00:24:24.000
the user can take control.

00:24:24.000 --> 00:24:28.736
You can go and review and modify
those App Links in Settings.

00:24:28.736 --> 00:24:33.480
[APPLAUSE]

00:24:33.480 --> 00:24:35.990
CHET HAASE: Can we
talk about sharing?

00:24:35.990 --> 00:24:38.140
Let's talk about Direct
Share, which is the ability

00:24:38.140 --> 00:24:42.140
to share deeper information
about your activity,

00:24:42.140 --> 00:24:44.220
or specifically, deeper
links into your activity

00:24:44.220 --> 00:24:45.600
when appropriate.

00:24:45.600 --> 00:24:48.190
So wouldn't it be nice
if someone clicked

00:24:48.190 --> 00:24:49.570
on something, it
fired an intent,

00:24:49.570 --> 00:24:51.990
and you actually had
some context around that

00:24:51.990 --> 00:24:54.280
and could actually share
something more interesting?

00:24:54.280 --> 00:24:56.770
So instead of launching your
overall chat application,

00:24:56.770 --> 00:24:58.520
you could actually
launch the conversation

00:24:58.520 --> 00:25:00.500
that was in progress
with the contact

00:25:00.500 --> 00:25:02.500
that they just clicked on.

00:25:02.500 --> 00:25:04.170
Wouldn't it be nice
if you could offer

00:25:04.170 --> 00:25:07.260
alternatives that appeared
in the Chooser dialog

00:25:07.260 --> 00:25:07.960
like this stuff?

00:25:07.960 --> 00:25:10.135
So here's how you do it
through Direct Share.

00:25:10.135 --> 00:25:14.490
You provide information
with your intent filter

00:25:14.490 --> 00:25:16.280
about chooser target service.

00:25:16.280 --> 00:25:20.950
You say, when you're going to do
this intent, launch my service,

00:25:20.950 --> 00:25:23.110
and my service can
be defined like this.

00:25:23.110 --> 00:25:25.100
Say, it's a chooser
target service

00:25:25.100 --> 00:25:27.330
and you're going to
implement that service

00:25:27.330 --> 00:25:28.820
and override this
method and say,

00:25:28.820 --> 00:25:31.680
when this method is called,
I'm going to return potentially

00:25:31.680 --> 00:25:33.782
a list of possible
targets, including

00:25:33.782 --> 00:25:35.240
maybe the overall
activity and some

00:25:35.240 --> 00:25:36.880
of the deeper
activities, the deeper

00:25:36.880 --> 00:25:38.450
links that are appropriate.

00:25:38.450 --> 00:25:39.850
And then what
you're going to get

00:25:39.850 --> 00:25:41.266
is something more
like this, where

00:25:41.266 --> 00:25:44.540
you have the typical activities
at the bottom that were already

00:25:44.540 --> 00:25:45.310
listed before.

00:25:45.310 --> 00:25:47.070
We already have this
capability, but maybe

00:25:47.070 --> 00:25:48.854
some of these deeper
links up at the top

00:25:48.854 --> 00:25:50.520
that are more appropriate
to the context

00:25:50.520 --> 00:25:54.260
that the user was actually
interested in at the time.

00:25:54.260 --> 00:25:58.320
DAN SANDLER: Let's talk a little
bit about support for stylus.

00:25:58.320 --> 00:26:00.590
We actually supported
styluses since way

00:26:00.590 --> 00:26:01.860
back in Ice Cream Sandwich.

00:26:01.860 --> 00:26:04.107
We've had constants in
the MotionEvent APIs

00:26:04.107 --> 00:26:06.440
to allow you to detect that
a particular touch stream is

00:26:06.440 --> 00:26:07.815
actually not coming
from a finger

00:26:07.815 --> 00:26:09.540
at all but coming
from a stylus tool.

00:26:09.540 --> 00:26:11.150
We've got buttons
that you can query

00:26:11.150 --> 00:26:13.910
to see if they're being
depressed, pressure and size

00:26:13.910 --> 00:26:14.960
data as well.

00:26:14.960 --> 00:26:16.610
Now, of course, as
many of you know,

00:26:16.610 --> 00:26:18.568
you can get some of that
pressure and size data

00:26:18.568 --> 00:26:21.270
out of a piece of capacitive
glass, but for a stylus,

00:26:21.270 --> 00:26:23.110
you get accurate information.

00:26:23.110 --> 00:26:25.020
Unfortunately,
until now, this only

00:26:25.020 --> 00:26:27.850
worked for a wired digitized,
like a tablet that you plug in,

00:26:27.850 --> 00:26:32.390
or a built in active digitizer,
like a device with its own pen.

00:26:32.390 --> 00:26:35.430
So what we've brought in
M is a couple of things.

00:26:35.430 --> 00:26:37.250
First of all, a
declaration that you

00:26:37.250 --> 00:26:42.929
can create a data stream,
Bluetooth HID over GITT.

00:26:42.929 --> 00:26:45.470
If you're a Bluetooth LE person,
that means something to you.

00:26:45.470 --> 00:26:46.490
CHET HAASE: No, no, no.

00:26:46.490 --> 00:26:47.850
Bit gat bat.

00:26:47.850 --> 00:26:48.670
Get over bat.

00:26:48.670 --> 00:26:49.753
DAN SANDLER: Chet crashed.

00:26:49.753 --> 00:26:51.912
We're going to have
to restart him.

00:26:51.912 --> 00:26:53.620
If you send your
pressure and button data

00:26:53.620 --> 00:26:57.070
over the HID protocol
over BLE, Android M

00:26:57.070 --> 00:27:00.370
will fuse this with
touch data on the glass.

00:27:00.370 --> 00:27:03.690
What this means is you can
build a Bluetooth stylus

00:27:03.690 --> 00:27:05.850
that then is
reported as a stylus

00:27:05.850 --> 00:27:09.150
to any app on any M device
that supports Bluetooth LE.

00:27:09.150 --> 00:27:10.920
You don't need special
hardware that's

00:27:10.920 --> 00:27:12.110
dedicated to that device.

00:27:12.110 --> 00:27:13.610
The app does not
need to be revised

00:27:13.610 --> 00:27:15.851
to support a particular
type of stylus protocol.

00:27:15.851 --> 00:27:18.100
It just gets touch stream
events through motion event,

00:27:18.100 --> 00:27:20.308
and if you are aware and
you care that it's a stylus,

00:27:20.308 --> 00:27:21.720
you can interrogate that data.

00:27:21.720 --> 00:27:25.510
So this is stylus support for
every app in every M device,

00:27:25.510 --> 00:27:28.640
given the correct hardware
on the stylus side.

00:27:28.640 --> 00:27:29.140
Wow.

00:27:29.140 --> 00:27:30.700
This is doubled up.

00:27:30.700 --> 00:27:31.790
Thank you.

00:27:31.790 --> 00:27:32.640
We've got one more.

00:27:32.640 --> 00:27:33.980
It's taken a couple bumps here.

00:27:33.980 --> 00:27:35.180
I may need to ask you to do it.

00:27:35.180 --> 00:27:35.840
CHET HAASE: Do you
want me to use that?

00:27:35.840 --> 00:27:37.550
You need some practice
with that clicker.

00:27:37.550 --> 00:27:38.508
DAN SANDLER: All right.

00:27:38.508 --> 00:27:39.540
Watch it.

00:27:39.540 --> 00:27:41.740
I do want to point
out that we're also

00:27:41.740 --> 00:27:43.560
adding a couple
revisions to MotionEvent

00:27:43.560 --> 00:27:45.200
in M to help you
deal with styli.

00:27:45.200 --> 00:27:47.787
For one, we're going to have
Action Button Press, Action

00:27:47.787 --> 00:27:49.620
Button Release, which
we didn't have before.

00:27:49.620 --> 00:27:50.860
Previously, you would
have to just check

00:27:50.860 --> 00:27:53.400
to see what the button state
was when you got another motion

00:27:53.400 --> 00:27:54.160
event.

00:27:54.160 --> 00:27:55.930
We've also introduced
new constants

00:27:55.930 --> 00:27:58.460
for the primary and
secondary stylus button

00:27:58.460 --> 00:28:02.610
which map to the secondary
and tertiary input device

00:28:02.610 --> 00:28:03.929
button using the previous API.

00:28:03.929 --> 00:28:05.720
So if you were looking
at secondary before,

00:28:05.720 --> 00:28:07.580
you're going to get
stylus primary now.

00:28:07.580 --> 00:28:09.020
It'll all be in the docs.

00:28:09.020 --> 00:28:10.850
We also have new
gesture support.

00:28:10.850 --> 00:28:13.530
So you can use Scale
Gesture Detector to enable

00:28:13.530 --> 00:28:15.577
a stylus scale gesture.

00:28:15.577 --> 00:28:16.660
Click the button and drag.

00:28:16.660 --> 00:28:19.160
It's very much like the tap
and a half drag scale gesture

00:28:19.160 --> 00:28:21.641
that we support in a lot
of apps on Android today.

00:28:21.641 --> 00:28:23.640
And you can also add a
listener for specifically

00:28:23.640 --> 00:28:25.098
when the stylus
button gets pressed

00:28:25.098 --> 00:28:27.630
to make it really easy to do
things like picking up objects

00:28:27.630 --> 00:28:29.160
and drag and drop them.

00:28:29.160 --> 00:28:31.210
And now's the time
for the next slide.

00:28:31.210 --> 00:28:33.430
CHET HAASE: Now let's talk
about graphics and media.

00:28:33.430 --> 00:28:36.600
RenderScript compute, some
incremental changes there.

00:28:36.600 --> 00:28:37.495
So support for BLAS.

00:28:37.495 --> 00:28:38.630
Who knows what BLAS is?

00:28:38.630 --> 00:28:40.764
Of course, basic linear
algebra sub-programs.

00:28:40.764 --> 00:28:43.180
DAN SANDLER: I think there
were actually crickets in here.

00:28:43.180 --> 00:28:43.934
Did you notice?

00:28:43.934 --> 00:28:46.380
CHET HAASE: I think
they were dead crickets.

00:28:46.380 --> 00:28:48.460
Really big matrices
for calculating really

00:28:48.460 --> 00:28:50.860
big things, allocation-less
launches so you

00:28:50.860 --> 00:28:53.630
can have the size of the kernel
that's now directly associated

00:28:53.630 --> 00:28:55.780
with the data itself,
and ScriptGroups, more

00:28:55.780 --> 00:28:58.410
optimizations for
launching these things that

00:28:58.410 --> 00:29:01.010
then will execute together.

00:29:01.010 --> 00:29:02.830
In the Camera API,
there's other camera

00:29:02.830 --> 00:29:05.340
to API changes that we're
not going into here.

00:29:05.340 --> 00:29:07.170
I would suggest you
check out the docs

00:29:07.170 --> 00:29:09.280
to learn more interesting
information there.

00:29:09.280 --> 00:29:11.690
But I did want to mention
the new Torch capability.

00:29:11.690 --> 00:29:14.660
It allows you to have flashlight
capability in your app

00:29:14.660 --> 00:29:17.390
without actually owning and
running the camera device.

00:29:17.390 --> 00:29:20.300
It used to be hard coded,
linked with the camera,

00:29:20.300 --> 00:29:23.220
and you had to get this really
heavyweight and battery sucking

00:29:23.220 --> 00:29:25.614
thing running when all
you really wanted to do

00:29:25.614 --> 00:29:26.780
was light up the flashlight.

00:29:26.780 --> 00:29:28.440
Now it's associated
with the camera

00:29:28.440 --> 00:29:30.606
but you're not actually
running the camera full time

00:29:30.606 --> 00:29:31.790
while the flashlight is on.

00:29:31.790 --> 00:29:34.280
So a new, simple API to
interact with that there.

00:29:34.280 --> 00:29:36.150
Are, some important
optimizations

00:29:36.150 --> 00:29:37.360
in the arena of Alpha.

00:29:37.360 --> 00:29:39.390
This is a really
small and subtle thing

00:29:39.390 --> 00:29:41.650
that ends up being a
real performance problem

00:29:41.650 --> 00:29:44.780
that we see on our group a lot
where people will associate

00:29:44.780 --> 00:29:46.700
Alpha with a TextView.

00:29:46.700 --> 00:29:49.020
Sometimes when people
just want gray text,

00:29:49.020 --> 00:29:50.560
they'll set it to
be white but then

00:29:50.560 --> 00:29:53.380
they'll set a translucency
value on a very large TextView,

00:29:53.380 --> 00:29:56.770
causing performance problems in
things like notification panel.

00:29:56.770 --> 00:29:58.530
DAN SANDLER: [CLEARING THROAT]

00:29:58.530 --> 00:30:01.540
CHET HAASE: So when we detect
that internally and someone's

00:30:01.540 --> 00:30:04.120
set a translucent
value on a view,

00:30:04.120 --> 00:30:07.080
then we can turn that into a
hardware layer automatically,

00:30:07.080 --> 00:30:09.570
which is a lot faster for
us to then just create

00:30:09.570 --> 00:30:12.210
the layer once, draw to it, and
then make that translucent, as

00:30:12.210 --> 00:30:15.780
opposed to redrawing this
external buffer every time

00:30:15.780 --> 00:30:17.650
we process the drawing
for that thing.

00:30:17.650 --> 00:30:19.030
So we do this automatically.

00:30:19.030 --> 00:30:23.730
However, we still suggest that
you set a layer type manually

00:30:23.730 --> 00:30:25.560
whenever you actually need it.

00:30:25.560 --> 00:30:27.510
It's a better
approach in general.

00:30:27.510 --> 00:30:29.260
So you can use the Set
Layer Type in View.

00:30:29.260 --> 00:30:33.150
You can also use the With Layer
API in View Property Animator.

00:30:33.150 --> 00:30:34.660
Specifically, the
reason to do this

00:30:34.660 --> 00:30:37.150
is because we're going to
create that layer the first time

00:30:37.150 --> 00:30:39.460
that we know you need it,
but if that first time

00:30:39.460 --> 00:30:40.970
is the first frame
of an animation,

00:30:40.970 --> 00:30:42.803
you're going to suffer
a little bit of jank,

00:30:42.803 --> 00:30:45.020
a little performance hiccup
as we create and render

00:30:45.020 --> 00:30:45.790
that layer.

00:30:45.790 --> 00:30:48.310
So it's better for you to do
it ahead of time than for us

00:30:48.310 --> 00:30:50.817
to do it automatically
for you lazily.

00:30:50.817 --> 00:30:53.150
DAN SANDLER: My four-year-old's
favorite color is clear,

00:30:53.150 --> 00:30:55.515
so she's really excited
about this new API.

00:30:55.515 --> 00:30:56.890
CHET HAASE: She's
so transparent.

00:31:00.040 --> 00:31:03.700
Let's talk about audio
quickly, quickly.

00:31:03.700 --> 00:31:04.280
MIDI.

00:31:04.280 --> 00:31:07.220
So you could already
do MIDI if you wanted

00:31:07.220 --> 00:31:08.710
to do it all by yourself.

00:31:08.710 --> 00:31:12.190
So you're down there at the USB
level getting the byte stream

00:31:12.190 --> 00:31:15.380
and doing everything you
could all on your lonesome.

00:31:15.380 --> 00:31:19.460
So instead, we introduced the
new android.media.midi package

00:31:19.460 --> 00:31:22.062
to do a lot of the
heavy lifting for you.

00:31:22.062 --> 00:31:23.770
So we'll give you the
actual byte stream.

00:31:23.770 --> 00:31:25.380
You still need to figure
out what the codes are.

00:31:25.380 --> 00:31:27.020
That's kind of the
way MIDI works.

00:31:27.020 --> 00:31:28.520
But you can create
a Device Manager,

00:31:28.520 --> 00:31:30.800
you can create the Input
and the Output port,

00:31:30.800 --> 00:31:32.470
send information,
get information,

00:31:32.470 --> 00:31:35.190
create a MIDI service that
can listen for information

00:31:35.190 --> 00:31:36.152
coming into the system.

00:31:36.152 --> 00:31:38.610
And it's important to note it's
both sides of the equation.

00:31:38.610 --> 00:31:41.550
You can have an Android app that
is sending the note information

00:31:41.550 --> 00:31:45.510
out to samples on some external
device that are playing those.

00:31:45.510 --> 00:31:49.320
You can also have a keyboard
or other MIDI device connected

00:31:49.320 --> 00:31:51.097
through USB to
the Android device

00:31:51.097 --> 00:31:53.180
and it's actually sending
the note information in,

00:31:53.180 --> 00:31:56.150
and maybe your app is actually
playing the samples directly.

00:31:56.150 --> 00:31:57.375
So two way communication.

00:31:57.375 --> 00:31:59.790
That's what music is all about.

00:31:59.790 --> 00:32:01.300
Also higher resolution audio.

00:32:01.300 --> 00:32:03.789
There's always work going
on in the quality arena.

00:32:03.789 --> 00:32:05.330
So we have audio
samples that are now

00:32:05.330 --> 00:32:07.960
single precision float instead
of the 16-bit samples we

00:32:07.960 --> 00:32:08.780
had before.

00:32:08.780 --> 00:32:12.660
We have 96 kilohertz sample
rate instead of the 44.1 or 48

00:32:12.660 --> 00:32:16.750
kilohertz, and we have
multichannel USB digital audio.

00:32:16.750 --> 00:32:18.570
So yay.

00:32:18.570 --> 00:32:21.570
Let's talk a little
bit about tools.

00:32:21.570 --> 00:32:22.880
Android Studio 1.3.

00:32:22.880 --> 00:32:24.970
They talked about
this in the keynote.

00:32:24.970 --> 00:32:28.080
Integrated testing support,
data binding, yay, tooling,

00:32:28.080 --> 00:32:31.100
especially syntax, understanding
for some of the new language

00:32:31.100 --> 00:32:33.350
stuff that you saw in
the XML resource file

00:32:33.350 --> 00:32:35.820
that we were looking at, some
tooling support around vector

00:32:35.820 --> 00:32:38.890
drawables, new annotations
all the time to make it easier

00:32:38.890 --> 00:32:42.880
to get more type safe code and
more information from the ID

00:32:42.880 --> 00:32:45.350
itself, and also
Android NDK development.

00:32:45.350 --> 00:32:48.230
You heard this stuff about
native code development

00:32:48.230 --> 00:32:49.760
within Android Studio.

00:32:49.760 --> 00:32:52.500
Please go to the next
session after this one.

00:32:52.500 --> 00:32:54.760
Tor and folks were convinced
that we're basically

00:32:54.760 --> 00:32:57.750
the warm up act for them, so we
encourage you to stick around

00:32:57.750 --> 00:32:59.700
for the lead act in the band.

00:32:59.700 --> 00:33:01.950
So go to their session
immediately following this one,

00:33:01.950 --> 00:33:04.130
I believe in this room.

00:33:04.130 --> 00:33:05.240
And Systrace.

00:33:05.240 --> 00:33:08.060
So who agrees with me
this is a simple UI?

00:33:08.060 --> 00:33:09.190
I get it.

00:33:09.190 --> 00:33:11.270
It's obvious.

00:33:11.270 --> 00:33:12.060
One person.

00:33:12.060 --> 00:33:13.516
Excellent.

00:33:13.516 --> 00:33:14.390
You, sir, are insane.

00:33:14.390 --> 00:33:15.810
DAN SANDLER: It might
be Dave Burke, actually.

00:33:15.810 --> 00:33:16.180
CHET HAASE: What's that?

00:33:16.180 --> 00:33:17.679
DAN SANDLER: It
might be Dave Burke.

00:33:17.679 --> 00:33:19.340
CHET HAASE: It could be.

00:33:19.340 --> 00:33:23.590
So Systrace is probably the
most powerful performance tool

00:33:23.590 --> 00:33:26.140
that we have, certainly in the
graphics performance arena.

00:33:26.140 --> 00:33:28.425
It gives you a broad
spectrum of here's everything

00:33:28.425 --> 00:33:30.050
that was going on in
the system that we

00:33:30.050 --> 00:33:33.200
know about at the time when you
were experiencing performance

00:33:33.200 --> 00:33:33.700
problems.

00:33:33.700 --> 00:33:35.640
But it's difficult
sometimes to know

00:33:35.640 --> 00:33:38.850
what to do with that information
because some people think

00:33:38.850 --> 00:33:42.147
this is not obvious to look
at this obviously beautiful UI

00:33:42.147 --> 00:33:44.480
and understand what was
actually going on in the system.

00:33:44.480 --> 00:33:47.620
So what we did was we added
even more information to it.

00:33:47.620 --> 00:33:50.110
Can I borrow that laser pointer?

00:33:50.110 --> 00:33:55.570
So if you'll see up
here-- can you get

00:33:55.570 --> 00:33:58.420
me a laser pointer that works?

00:33:58.420 --> 00:34:00.090
Those little circles
in the middle

00:34:00.090 --> 00:34:01.440
there are basically tips.

00:34:01.440 --> 00:34:04.100
You can click on those to get
more information about what

00:34:04.100 --> 00:34:05.060
was actually going on.

00:34:05.060 --> 00:34:07.550
So we're preprocessing
the information there

00:34:07.550 --> 00:34:10.060
to diagnose some of the
common performance problems

00:34:10.060 --> 00:34:13.300
that we've seen and explain to
you what's actually going on

00:34:13.300 --> 00:34:16.040
so that you have something
more actionable to do

00:34:16.040 --> 00:34:18.949
besides staring at
your Systrace output.

00:34:18.949 --> 00:34:20.590
So here's an example.

00:34:20.590 --> 00:34:22.590
So you might click on
that red button down there

00:34:22.590 --> 00:34:24.409
and you might get
something like this.

00:34:24.409 --> 00:34:25.590
So you're going to
click on the red button

00:34:25.590 --> 00:34:28.048
and it's going to highlight
the things that it's analyzing,

00:34:28.048 --> 00:34:29.830
the problems that it
saw, and then it's

00:34:29.830 --> 00:34:32.630
going to give you a little
annotation down at the bottom

00:34:32.630 --> 00:34:35.540
and say, here was the problem
that we diagnosed there.

00:34:35.540 --> 00:34:37.139
You are actually
during inflation,

00:34:37.139 --> 00:34:39.190
you're stalling the UI thread
while you're doing this.

00:34:39.190 --> 00:34:40.273
This is a bad thing to do.

00:34:40.273 --> 00:34:41.230
Shame on you.

00:34:41.230 --> 00:34:43.350
And then over on the
right, we have a summary

00:34:43.350 --> 00:34:45.300
of all of the
problems that we saw,

00:34:45.300 --> 00:34:47.100
buckets of the various problems.

00:34:47.100 --> 00:34:50.250
In general, what we see
in diagnosing applications

00:34:50.250 --> 00:34:54.440
internally is that by fixing
a couple of key problems,

00:34:54.440 --> 00:34:56.840
you're going to knock out
most of these problems.

00:34:56.840 --> 00:34:58.700
It's like when you
get compilation errors

00:34:58.700 --> 00:35:01.100
and there's 4,000
compilation errors,

00:35:01.100 --> 00:35:06.810
and then you fix one bug and
now you're down to only 3,947.

00:35:06.810 --> 00:35:08.860
So there are several
common problems

00:35:08.860 --> 00:35:12.440
that you might run into that
are sourced in one problem area.

00:35:12.440 --> 00:35:15.160
So check out the buckets,
check out the notations there,

00:35:15.160 --> 00:35:20.040
and go optimize your
application, please.

00:35:20.040 --> 00:35:22.480
DAN SANDLER: Let's talk a
little bit about the compiler.

00:35:22.480 --> 00:35:24.784
I remember my grad
compilers class,

00:35:24.784 --> 00:35:27.200
which means that I sort of
remember what these things are.

00:35:27.200 --> 00:35:28.930
The ART team is
continually working

00:35:28.930 --> 00:35:31.220
on improving the new runtime.

00:35:31.220 --> 00:35:33.440
The upshot of all this
stuff, the register allocator

00:35:33.440 --> 00:35:36.950
and things like this, the
inlining and so forth,

00:35:36.950 --> 00:35:39.610
the biggest impact, in addition
to just faster running code,

00:35:39.610 --> 00:35:41.330
is improved memory
use particularly

00:35:41.330 --> 00:35:42.170
on low end devices.

00:35:42.170 --> 00:35:44.003
Every time they improve
one of these things,

00:35:44.003 --> 00:35:46.440
you get back megabytes of
memory in your process.

00:35:46.440 --> 00:35:48.060
It's really important.

00:35:48.060 --> 00:35:50.794
We also have a new get
runtime stat API inside ART

00:35:50.794 --> 00:35:52.460
so that you can go
and actually find out

00:35:52.460 --> 00:35:53.834
a little bit of
the details about

00:35:53.834 --> 00:35:55.839
what's going on in the runtime.

00:35:55.839 --> 00:35:58.380
CHET HAASE: And some other stuff
that we really couldn't find

00:35:58.380 --> 00:35:59.450
appropriate categories for.

00:35:59.450 --> 00:36:00.991
We'll go through
this really quickly.

00:36:00.991 --> 00:36:04.085
External storage, the ability
to adopt permanent storage

00:36:04.085 --> 00:36:06.460
as one of the devices that
you want to use on the system.

00:36:06.460 --> 00:36:09.550
So users can do this and then
move things around there.

00:36:09.550 --> 00:36:11.990
The important key is two things.

00:36:11.990 --> 00:36:13.230
One is there's no new APIs.

00:36:13.230 --> 00:36:15.840
You don't need to do anything
but you do need to test.

00:36:15.840 --> 00:36:17.350
So make sure that
you're not hard

00:36:17.350 --> 00:36:20.110
coding the locations
of your app or your app

00:36:20.110 --> 00:36:21.580
data or other
resources that you're

00:36:21.580 --> 00:36:24.100
using, because what happens
if the user adopts one

00:36:24.100 --> 00:36:26.000
of these devices,
moves stuff around,

00:36:26.000 --> 00:36:29.960
and your app can no longer
find what it needs to function?

00:36:29.960 --> 00:36:33.900
So there are no Preview devices
with this capability right now

00:36:33.900 --> 00:36:35.880
because the devices that
we have system images

00:36:35.880 --> 00:36:38.230
for don't have these devices
that you can actually

00:36:38.230 --> 00:36:40.990
adopt permanently, these
permanent USB devices.

00:36:40.990 --> 00:36:43.660
So instead, you can attach
temporary USB storage

00:36:43.660 --> 00:36:46.220
and test it with the commands
that we have down here,

00:36:46.220 --> 00:36:48.810
the Set Prop Persist
FW Force Adoptable

00:36:48.810 --> 00:36:51.170
One, but that's
obvious, isn't it?

00:36:51.170 --> 00:36:51.670
All right.

00:36:51.670 --> 00:36:53.620
Developing for Android.

00:36:53.620 --> 00:36:55.264
So I pushed this
right before the talk,

00:36:55.264 --> 00:36:56.680
and probably right
after the talk,

00:36:56.680 --> 00:36:58.357
I'll find out that
I shouldn't have.

00:36:58.357 --> 00:37:00.190
But in the meantime,
you can check this out.

00:37:00.190 --> 00:37:02.850
So a lot of the folks
in the platform team--

00:37:02.850 --> 00:37:05.230
runtime folks, maps
folks, framework,

00:37:05.230 --> 00:37:07.260
UI toolkit-- got together.

00:37:07.260 --> 00:37:10.740
People will ask us questions
all the time about the best

00:37:10.740 --> 00:37:12.840
approach for doing this
or that, or we find out

00:37:12.840 --> 00:37:15.370
about ways that people are
accessing memory or creating

00:37:15.370 --> 00:37:17.620
objects or hitting the network
or whatever and we say,

00:37:17.620 --> 00:37:19.828
don't do it like that, and
then they would say, well,

00:37:19.828 --> 00:37:21.645
how should we do it instead?

00:37:21.645 --> 00:37:23.270
We don't like to
answer those questions

00:37:23.270 --> 00:37:24.353
because we're really busy.

00:37:24.353 --> 00:37:26.190
So instead, eventually,
we got together

00:37:26.190 --> 00:37:28.190
and we wrote an
incredibly long article

00:37:28.190 --> 00:37:31.240
with our brain dump of
a lot of the basic rules

00:37:31.240 --> 00:37:32.609
that people should know about.

00:37:32.609 --> 00:37:34.650
We put this into an article
that was entirely too

00:37:34.650 --> 00:37:39.200
long to publish in its entirety
so we broke it into chapters

00:37:39.200 --> 00:37:41.640
and we pushed the first
two right before this talk.

00:37:41.640 --> 00:37:47.630
They're on Medium.com in the
new Google Developers channel

00:37:47.630 --> 00:37:49.180
community thing.

00:37:49.180 --> 00:37:51.520
It's on the new Google
Developers thing on Medium.com.

00:37:51.520 --> 00:37:53.650
Please check those out.

00:37:53.650 --> 00:37:57.080
We'll be pushing the rest of the
chapters in the next few days

00:37:57.080 --> 00:38:00.490
and you can follow us on G+ to
find out where they are or just

00:38:00.490 --> 00:38:03.400
go to the Google Developers
community and you will see them

00:38:03.400 --> 00:38:04.340
there.

00:38:04.340 --> 00:38:08.230
So what are you waiting for
besides the end of this talk?

00:38:08.230 --> 00:38:11.360
Please go check out the Preview,
please download the bits

00:38:11.360 --> 00:38:13.200
for the SDK, as well
as Android Studio.

00:38:13.200 --> 00:38:15.840
Get the system image in
Flash appropriate devices.

00:38:15.840 --> 00:38:16.950
Please report bugs.

00:38:16.950 --> 00:38:19.130
The whole point of
having preview releases

00:38:19.130 --> 00:38:21.800
is not just to tease you
with what we're working on.

00:38:21.800 --> 00:38:24.320
It's actually to have
you run it in situations

00:38:24.320 --> 00:38:26.630
that we may not be
testing internally

00:38:26.630 --> 00:38:29.060
and then to get the feedback
from you about what you need

00:38:29.060 --> 00:38:30.970
or what problems you saw.

00:38:30.970 --> 00:38:33.570
And then finally, we
mentioned the sandbox talks

00:38:33.570 --> 00:38:36.987
and the sessions at Google
I/O, but the DevBytes are maybe

00:38:36.987 --> 00:38:39.320
even more important than the
sandbox talks because those

00:38:39.320 --> 00:38:41.400
are actually going to be
recorded and pushed out

00:38:41.400 --> 00:38:43.089
over the next 100
days or something.

00:38:43.089 --> 00:38:44.630
There's going to be
a lot of DevBytes

00:38:44.630 --> 00:38:46.750
around a lot of the
technical details and things

00:38:46.750 --> 00:38:48.350
that we talked about today.

00:38:48.350 --> 00:38:50.890
So please check those out
on the Google Developers

00:38:50.890 --> 00:38:54.270
channel starting now and then
going through the summer.

00:38:54.270 --> 00:38:57.090
And I believe that's it.

00:38:57.090 --> 00:39:01.220
We have one minute and
10 seconds for questions,

00:39:01.220 --> 00:39:02.750
and probably zero
time for answers.

00:39:02.750 --> 00:39:03.720
DAN SANDLER: I don't think that
that's really going to happen.

00:39:03.720 --> 00:39:04.320
People are going
to take that long

00:39:04.320 --> 00:39:05.690
to get up to the microphone.

00:39:05.690 --> 00:39:06.430
CHET HAASE: Yeah.

00:39:06.430 --> 00:39:08.120
DAN SANDLER: However, we
will be out on the floor.

00:39:08.120 --> 00:39:09.980
We'll be out in the
Playground area.

00:39:09.980 --> 00:39:11.339
We're taking questions.

00:39:11.339 --> 00:39:13.380
Please go to the sandbox
talks that we mentioned.

00:39:13.380 --> 00:39:15.881
Please look up the DevBytes.

00:39:15.881 --> 00:39:17.630
CHET HAASE: And also,
please give feedback

00:39:17.630 --> 00:39:19.160
on this session and
all the sessions

00:39:19.160 --> 00:39:20.190
that you're seeing
at the conference.

00:39:20.190 --> 00:39:22.420
Go into the app or go
onto the I/O website

00:39:22.420 --> 00:39:25.314
and you can do it directly
in the Session pages there,

00:39:25.314 --> 00:39:26.230
and I think that's it.

00:39:26.230 --> 00:39:26.810
Thanks for coming.

00:39:26.810 --> 00:39:28.185
DAN SANDLER: Thank
you very much.

00:39:28.185 --> 00:39:31.130
[APPLAUSE]

