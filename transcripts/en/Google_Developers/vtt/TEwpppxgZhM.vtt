WEBVTT
Kind: captions
Language: en

00:00:08.109 --> 00:00:10.460
PETE LEPAGE: All right,
welcome everybody.

00:00:10.460 --> 00:00:12.430
Thanks for joining me.

00:00:12.430 --> 00:00:16.490
I did hear a little rumor
earlier that the description

00:00:16.490 --> 00:00:18.390
for this was that you might
be coming up and

00:00:18.390 --> 00:00:19.470
showing off your apps.

00:00:19.470 --> 00:00:23.530
If you were expecting that,
not so much today.

00:00:23.530 --> 00:00:25.660
What did you guys think of
the keynote this morning?

00:00:25.660 --> 00:00:27.540
Liked it, yeah?

00:00:27.540 --> 00:00:29.030
Awesome Cirque du
Soleil thing?

00:00:29.030 --> 00:00:30.410
Cool, yeah?

00:00:30.410 --> 00:00:32.390
All right, sweet.

00:00:32.390 --> 00:00:35.760
I'm going to be talking about
how to take a web app and turn

00:00:35.760 --> 00:00:39.500
it into one of the new Chrome
packaged applications using

00:00:39.500 --> 00:00:43.940
the new technologies that we've
got available to us.

00:00:43.940 --> 00:00:46.430
Chrome packaged applications
do a lot of things that are

00:00:46.430 --> 00:00:47.610
really cool.

00:00:47.610 --> 00:00:50.780
And really allow us as
developers to build

00:00:50.780 --> 00:00:54.020
applications using the
technology that we know today

00:00:54.020 --> 00:00:57.120
already, that we know how to
use, divs and C S S and all

00:00:57.120 --> 00:00:58.880
that great JavaScript stuff.

00:00:58.880 --> 00:01:02.460
And build applications that feel
like they're installed,

00:01:02.460 --> 00:01:10.830
that break out of the browser
so that they don't have that

00:01:10.830 --> 00:01:12.200
browser bar cross the top.

00:01:12.200 --> 00:01:15.695
They don't feel like that
experience of oh, I've got to

00:01:15.695 --> 00:01:17.310
open the browser and then I
got to go to this site.

00:01:17.310 --> 00:01:20.150
You click a button on the doc,
or you click something on the

00:01:20.150 --> 00:01:24.830
start menu, and the application
starts just as

00:01:24.830 --> 00:01:26.080
you'd expect it to.

00:01:29.230 --> 00:01:33.280
With an enhanced UI that allows
us to really be able to

00:01:33.280 --> 00:01:35.510
do things that we can't
normally do in web

00:01:35.510 --> 00:01:36.430
applications.

00:01:36.430 --> 00:01:37.980
I want to be able to
open a window.

00:01:37.980 --> 00:01:40.740
I want to be able to move
it around or resize it.

00:01:40.740 --> 00:01:44.280
I want to be able to do things
that with web applications I

00:01:44.280 --> 00:01:48.330
can do today, but I might get
blocked because I'm not

00:01:48.330 --> 00:01:51.230
allowed to open new pop-up
windows and things like that.

00:01:51.230 --> 00:01:54.670
So an enhanced UI that really
lets us get beyond what we're

00:01:54.670 --> 00:01:57.560
used to doing.

00:01:57.560 --> 00:02:01.230
Offline by default, apps
that just work.

00:02:01.230 --> 00:02:04.240
Today when an app gets installed
on your computer,

00:02:04.240 --> 00:02:05.540
you expect it to work.

00:02:05.540 --> 00:02:08.190
When an app get installed on
your phone, you start it, you

00:02:08.190 --> 00:02:10.009
expect it to work whether
you've got an internet

00:02:10.009 --> 00:02:11.540
connection or not.

00:02:11.540 --> 00:02:15.260
Chrome packaged applications
should work like that.

00:02:15.260 --> 00:02:17.500
Web applications should
work like that.

00:02:17.500 --> 00:02:21.790
And we need to get users
thinking about that, right?

00:02:21.790 --> 00:02:24.370
I got made fun of a little bit
when I used this reference, so

00:02:24.370 --> 00:02:28.890
pardon me, but when my mom
starts a web app, she goes to

00:02:28.890 --> 00:02:31.270
Gmail or wherever she's going.

00:02:31.270 --> 00:02:33.260
If her computer's not connected,
she doesn't think

00:02:33.260 --> 00:02:35.050
that it's going to
work if it's not

00:02:35.050 --> 00:02:36.480
connected to the internet.

00:02:36.480 --> 00:02:39.540
So for her, we need
to really say hey,

00:02:39.540 --> 00:02:40.980
these apps work offline.

00:02:40.980 --> 00:02:45.230
And Chrome packaged applications
allow us to do

00:02:45.230 --> 00:02:47.730
that within this new model
that we've now got.

00:02:50.320 --> 00:02:54.580
And my battery is dead, so I
guess I'm going to have to

00:02:54.580 --> 00:02:55.270
move around.

00:02:55.270 --> 00:02:57.960
My name is Pete LePage, I'm a
Developer Advocate on the

00:02:57.960 --> 00:02:58.990
Chrome Team.

00:02:58.990 --> 00:03:03.260
And it's my job to help folks
like you guys build web

00:03:03.260 --> 00:03:07.140
applications, build Chrome
packaged applications, and

00:03:07.140 --> 00:03:09.710
really take advantage of all the
cool stuff that you saw in

00:03:09.710 --> 00:03:11.220
the keynote this morning.

00:03:11.220 --> 00:03:15.435
And be able to get better access
to your customers, to

00:03:15.435 --> 00:03:18.810
your users, and to all the fun
stuff that Chrome really has

00:03:18.810 --> 00:03:20.330
to offer for you.

00:03:20.330 --> 00:03:21.640
You can find me on Google+.

00:03:21.640 --> 00:03:25.990
I'm also on Twitter, though I
don't tweet very often, as

00:03:25.990 --> 00:03:26.890
well as my blog.

00:03:26.890 --> 00:03:30.170
And I've got some stuff
up on GitHub.

00:03:30.170 --> 00:03:34.740
So when I think about the legacy
packaged app, this is

00:03:34.740 --> 00:03:36.930
what a legacy packaged
app looks like.

00:03:36.930 --> 00:03:40.180
I've still got the address bar
up at the top, I still need to

00:03:40.180 --> 00:03:41.230
start it in the same way.

00:03:41.230 --> 00:03:47.860
In fact, let's get out of here
and let's have a look at a

00:03:47.860 --> 00:03:49.090
little packaged app.

00:03:49.090 --> 00:03:52.580
So we're going to take a
look at this particular

00:03:52.580 --> 00:03:53.270
application.

00:03:53.270 --> 00:03:57.160
This is just a simple
RSS reader that

00:03:57.160 --> 00:03:58.510
I've gone and built.

00:03:58.510 --> 00:04:01.590
Because I wanted to see what
it was like to build an

00:04:01.590 --> 00:04:05.290
application and then convert it
to a packaged application.

00:04:05.290 --> 00:04:10.380
So you can see I've got a list
of different feeds available.

00:04:10.380 --> 00:04:13.520
I can go, I can scroll down, I
can go click on one of these.

00:04:13.520 --> 00:04:16.170
But I still have the address
bar up here, I

00:04:16.170 --> 00:04:18.160
can't open new Windows.

00:04:18.160 --> 00:04:22.250
It's not exactly the best
connection, it's not exactly

00:04:22.250 --> 00:04:25.800
the best experience that I
really want to have as I'm

00:04:25.800 --> 00:04:32.140
reading through my RSS feeds
and all of that.

00:04:32.140 --> 00:04:36.660
So I chose this application in
particular because it does a

00:04:36.660 --> 00:04:38.150
couple of things really well.

00:04:38.150 --> 00:04:42.730
One, it's a single-page
application.

00:04:42.730 --> 00:04:45.240
So it works really well,
there's not a lot of

00:04:45.240 --> 00:04:48.020
navigation from page
to page to page.

00:04:48.020 --> 00:04:51.020
It should work offline.

00:04:51.020 --> 00:04:53.420
I should be able to take all of
that data that I've got and

00:04:53.420 --> 00:04:56.380
all of the stuff that I'm used
to using, and I should be able

00:04:56.380 --> 00:04:59.560
to just say all right, great,
I want to access all of that

00:04:59.560 --> 00:05:01.320
without having to do
anything else.

00:05:05.130 --> 00:05:08.810
So we're going to walk
through what I went

00:05:08.810 --> 00:05:10.270
through to get there.

00:05:10.270 --> 00:05:21.020
So let's go back ti the slides
for a sec and try that again.

00:05:21.020 --> 00:05:24.470
Hey, there we go, that looks
a little better.

00:05:24.470 --> 00:05:27.340
So when you think of a legacy
packaged app, you had a

00:05:27.340 --> 00:05:28.250
manifest file.

00:05:28.250 --> 00:05:31.290
How many people have built a
packaged app or a Chrome app

00:05:31.290 --> 00:05:32.760
in the past?

00:05:32.760 --> 00:05:35.210
All right, so few people,
about half the room.

00:05:35.210 --> 00:05:37.640
So you had a manifest file,
and that manifest file was

00:05:37.640 --> 00:05:40.560
really what told Chrome how your
apps should work and what

00:05:40.560 --> 00:05:43.020
it should start, where
it should go.

00:05:43.020 --> 00:05:47.960
And within that manifest, it had
effectively a link, or it

00:05:47.960 --> 00:05:50.180
said hey, when you start
I want you to go

00:05:50.180 --> 00:05:52.040
open this index file.

00:05:52.040 --> 00:05:55.580
And that index file might go off
and grab any resources it

00:05:55.580 --> 00:05:58.300
might need, any HTML,
or C S S.

00:05:58.300 --> 00:06:01.960
But all of that stuff fit into
as a package, into a zip file,

00:06:01.960 --> 00:06:04.570
that you uploaded to the
Chrome Web Store.

00:06:04.570 --> 00:06:07.770
And it could also sometimes
have a background page.

00:06:07.770 --> 00:06:10.990
And you might use that
background page to say go pull

00:06:10.990 --> 00:06:13.770
for data so that you
could pull data

00:06:13.770 --> 00:06:15.970
down and save it somewhere.

00:06:15.970 --> 00:06:19.290
You might use some
context menus.

00:06:19.290 --> 00:06:22.140
But all of that stuff, you'd
have to set up a loop.

00:06:22.140 --> 00:06:24.360
You'd have to either use a loop,
you'd have to use set

00:06:24.360 --> 00:06:27.930
interval, there were a whole
bunch of things that would

00:06:27.930 --> 00:06:30.800
cause some pain in the
butt sometimes.

00:06:30.800 --> 00:06:35.050
And could potentially, if you
didn't write it very well or

00:06:35.050 --> 00:06:39.170
used some bad practices or worst
practices, if such a

00:06:39.170 --> 00:06:43.580
thing exists, could affect the
performance of Chrome for

00:06:43.580 --> 00:06:45.280
everything else.

00:06:45.280 --> 00:06:48.450
So one of the things that we
really wanted to address as we

00:06:48.450 --> 00:06:53.110
started making these
enhancements to Chrome

00:06:53.110 --> 00:06:55.270
packaged apps is
how we do that.

00:06:55.270 --> 00:06:58.560
How do we make it easier so
that the applications that

00:06:58.560 --> 00:07:04.800
you're writing, it's harder
to do the wrong thing.

00:07:04.800 --> 00:07:06.720
So let's get started
and have a look at

00:07:06.720 --> 00:07:09.050
how I converted this.

00:07:09.050 --> 00:07:10.930
Now, I'm going to throw
up this warning.

00:07:10.930 --> 00:07:13.560
I'm just going to say
time out for a sec.

00:07:13.560 --> 00:07:16.920
This is a developer preview,
this is not something that you

00:07:16.920 --> 00:07:20.330
can go ship a production-level
app on.

00:07:20.330 --> 00:07:22.930
If you do, congratulations.

00:07:22.930 --> 00:07:25.330
You can't get it in the
Chrome Web Store.

00:07:25.330 --> 00:07:28.850
But if you give it out to a
bunch of users, it probably

00:07:28.850 --> 00:07:30.820
will break at some point
in the future.

00:07:30.820 --> 00:07:33.750
So just that word of warning as
you're playing with this.

00:07:33.750 --> 00:07:36.540
If you're like hey, this worked
yesterday, but now that

00:07:36.540 --> 00:07:38.200
I got a Chrome update
it doesn't work.

00:07:38.200 --> 00:07:41.500
Go have a look at the docs for
known issues in any updates.

00:07:41.500 --> 00:07:45.950
Because things are changing on
a regular basis, and we're

00:07:45.950 --> 00:07:49.120
working to get a lot of
new great stuff added.

00:07:49.120 --> 00:07:52.580
And sometimes that means taking
your feedback and going

00:07:52.580 --> 00:07:55.310
oh, guess we didn't think
about that one too well.

00:07:55.310 --> 00:07:57.200
I guess we better change that.

00:07:57.200 --> 00:08:00.060
So getting your feedback is
really important to us.

00:08:00.060 --> 00:08:02.680
We want to hear what you
have to say about these

00:08:02.680 --> 00:08:04.890
applications as you're
building them.

00:08:04.890 --> 00:08:06.370
What are your experiences?

00:08:06.370 --> 00:08:09.430
How do we need to make these
things better so that you can

00:08:09.430 --> 00:08:15.600
build the type of applications
that you want to build?

00:08:15.600 --> 00:08:20.390
So with the new architecture,
it changes a little bit.

00:08:20.390 --> 00:08:23.870
Remember before we had our
manifest which would then

00:08:23.870 --> 00:08:26.570
kick-off an index file?

00:08:26.570 --> 00:08:29.350
In a new Chrome packaged
application, instead of

00:08:29.350 --> 00:08:32.289
kicking-off an index file,
the first thing that the

00:08:32.289 --> 00:08:35.770
application does is it kicks-off
a background script.

00:08:35.770 --> 00:08:40.900
So that background script, think
very similarly to if

00:08:40.900 --> 00:08:45.120
you're writing a native
application for Windows or for

00:08:45.120 --> 00:08:46.810
Android or for any
other device.

00:08:46.810 --> 00:08:50.700
There's some kind of like C#
file, or there's some main

00:08:50.700 --> 00:08:53.920
file that might kick open other
windows and all that

00:08:53.920 --> 00:08:54.600
kind of stuff.

00:08:54.600 --> 00:08:56.380
It works in the same way.

00:08:56.380 --> 00:08:58.740
So that background script is
going to go, and it's going to

00:08:58.740 --> 00:09:01.010
start running first thing.

00:09:01.010 --> 00:09:04.930
And when you want to start the
application, it then goes and

00:09:04.930 --> 00:09:07.770
opens your application
UI window.

00:09:07.770 --> 00:09:11.180
So it says, oh hey, the
user wants to start.

00:09:11.180 --> 00:09:13.640
I guess I should open this
window up, and it goes and

00:09:13.640 --> 00:09:14.860
opens that window.

00:09:14.860 --> 00:09:17.290
So the difference here, and
the really important thing

00:09:17.290 --> 00:09:19.340
here, is that background
script needs

00:09:19.340 --> 00:09:20.340
to listen for events.

00:09:20.340 --> 00:09:22.780
We'll talk about
that in a sec.

00:09:22.780 --> 00:09:25.750
So the application that we used,
we didn't use all of the

00:09:25.750 --> 00:09:29.510
technology that's possibly
available to us,

00:09:29.510 --> 00:09:30.710
but we used a bunch.

00:09:30.710 --> 00:09:36.830
When we used the Chrome
experimental apps API--

00:09:36.830 --> 00:09:39.250
maybe it's just standing
too far away.

00:09:39.250 --> 00:09:40.210
Maybe if I go over here.

00:09:40.210 --> 00:09:42.430
We used the chrome.storage.sync.

00:09:42.430 --> 00:09:43.720
I'm going to talk about
each of these in

00:09:43.720 --> 00:09:44.660
depth in a little bit.

00:09:44.660 --> 00:09:48.600
But chrome.storage.sync, how
many people used chrome.sync

00:09:48.600 --> 00:09:51.550
in Chrome when they used Chrome
today to sync all your

00:09:51.550 --> 00:09:54.340
passwords, your favorites,
all that kind of stuff?

00:09:54.340 --> 00:09:57.880
And, kind of cool,
chrome.storage.sync basically

00:09:57.880 --> 00:10:00.510
lets you take whatever you want
for your application,

00:10:00.510 --> 00:10:03.440
within a set of limits
obviously, and store that

00:10:03.440 --> 00:10:04.440
stuff up in the cloud.

00:10:04.440 --> 00:10:07.120
So that no matter which computer
I'm logged into, I

00:10:07.120 --> 00:10:10.190
have all of those settings
synced across all machines.

00:10:10.190 --> 00:10:13.400
So I can have maybe my
credentials, maybe a list of

00:10:13.400 --> 00:10:14.860
read items.

00:10:14.860 --> 00:10:18.770
All of that stuff I can keep
synced in the cloud.

00:10:18.770 --> 00:10:23.530
Chrome.storage.local which is
very similar, but it only is

00:10:23.530 --> 00:10:25.890
local to that specific
machine.

00:10:25.890 --> 00:10:29.850
We use Chrome alerts to notify
the user of a bunch of stuff.

00:10:29.850 --> 00:10:32.620
We use sandbox pages, and I'm
going to talk about Content

00:10:32.620 --> 00:10:35.140
Security Policy in a little
bit and why we'd

00:10:35.140 --> 00:10:37.000
use a sandbox page.

00:10:37.000 --> 00:10:38.830
And we used Angular.js.

00:10:38.830 --> 00:10:42.260
We used Angular.js because
Angular did something that

00:10:42.260 --> 00:10:45.310
made our lives a little
bit easier.

00:10:45.310 --> 00:10:47.880
How many people have heard of
Content Security Policy?

00:10:47.880 --> 00:10:50.320
Yay, OK, only a couple hands.

00:10:50.320 --> 00:10:52.450
We're going to go into
more depth on this.

00:10:52.450 --> 00:10:55.570
This is something that's really
important, but it could

00:10:55.570 --> 00:10:57.180
change the way we think
about a lot of stuff.

00:10:57.180 --> 00:10:59.930
And it's, like I said, it's
really important and it will

00:10:59.930 --> 00:11:03.150
make the web a lot safer.

00:11:03.150 --> 00:11:04.480
Nice big eye chart.

00:11:04.480 --> 00:11:06.560
This is how the app is
kind of laid out.

00:11:06.560 --> 00:11:09.880
So you can see right there in
the center of the app is that

00:11:09.880 --> 00:11:10.560
background page.

00:11:10.560 --> 00:11:13.800
And that background page goes
and does all of the stuff we

00:11:13.800 --> 00:11:14.690
need to do.

00:11:14.690 --> 00:11:18.410
And I promise, we will get into
real code here shortly.

00:11:18.410 --> 00:11:20.400
I think it's like one slide
or two slides away.

00:11:20.400 --> 00:11:23.280
So we've got that background
page, and it goes off and

00:11:23.280 --> 00:11:26.490
kicks-off the app page there
at the very bottom.

00:11:26.490 --> 00:11:29.650
It goes over and it gets access
to data in different

00:11:29.650 --> 00:11:31.460
data places.

00:11:31.460 --> 00:11:33.565
And it goes up to the cloud
and it asks for feeds.

00:11:37.700 --> 00:11:40.520
So the first thing we need to
do in our application is we

00:11:40.520 --> 00:11:42.210
need to update the manifest.

00:11:42.210 --> 00:11:46.690
The manifest for a new packaged
app has changed a

00:11:46.690 --> 00:11:47.900
little bit, and I want
to highlight a

00:11:47.900 --> 00:11:48.615
couple of the changes.

00:11:48.615 --> 00:11:51.510
So the first thing that changes
is we need to add a

00:11:51.510 --> 00:11:53.360
manifest version 2.

00:11:53.360 --> 00:11:57.020
Manifest version 2 tells Chrome,
hey, this is a new

00:11:57.020 --> 00:11:59.340
Chrome packaged app.

00:11:59.340 --> 00:12:03.720
It also turns on Content
Security Policy.

00:12:03.720 --> 00:12:07.730
Second thing, we want to add
offline true, because our apps

00:12:07.730 --> 00:12:09.110
are designed to work offline.

00:12:09.110 --> 00:12:12.320
Everything that we have we need
for our application is

00:12:12.320 --> 00:12:17.560
sitting there in our zip file in
our package that we zipped

00:12:17.560 --> 00:12:20.400
up and uploaded and
is good to go.

00:12:20.400 --> 00:12:23.000
The next thing is we
need to add the

00:12:23.000 --> 00:12:25.500
app background scripts.

00:12:25.500 --> 00:12:30.180
If you remember before in V1
apps, that was where we put

00:12:30.180 --> 00:12:30.920
our index file.

00:12:30.920 --> 00:12:32.970
We said, hey, this
is my index file.

00:12:32.970 --> 00:12:35.560
And then finally, we need to
add a couple of specific

00:12:35.560 --> 00:12:36.620
permissions.

00:12:36.620 --> 00:12:40.790
We need to add the app window
permission which says hey, we

00:12:40.790 --> 00:12:42.840
want to be able to open windows,
we need to be able to

00:12:42.840 --> 00:12:43.760
manipulate windows.

00:12:43.760 --> 00:12:45.540
We want to do all that stuff.

00:12:45.540 --> 00:12:47.670
And then we need experimental.

00:12:47.670 --> 00:12:51.680
Now, we are only going to need
experimental while we're in an

00:12:51.680 --> 00:12:54.530
experimental stage, so
that will go away

00:12:54.530 --> 00:12:57.190
sometime in the future.

00:12:57.190 --> 00:13:00.720
And that right now is one of the
things that will prevent

00:13:00.720 --> 00:13:03.360
your app from getting uploaded
to the Chrome Web Store.

00:13:03.360 --> 00:13:05.710
So if you go and you're like,
hey, I got this great app and

00:13:05.710 --> 00:13:06.830
I want to get it in,
and you're like

00:13:06.830 --> 00:13:07.840
why won't it upload?

00:13:07.840 --> 00:13:10.740
Well, that's a big part
of the reason.

00:13:10.740 --> 00:13:15.370
So let's go and actually
do that.

00:13:15.370 --> 00:13:17.990
So I have here my text editor.

00:13:17.990 --> 00:13:20.620
And don't worry, we got some
nice decent size fonts here.

00:13:20.620 --> 00:13:26.270
And instead of doing it in
there, I'm going to do it in

00:13:26.270 --> 00:13:29.420
my Updated, and I'm going
to go grab my manifest.

00:13:29.420 --> 00:13:33.210
All right, so we need to
add a couple of things.

00:13:33.210 --> 00:13:39.640
So we need to add our manifest
version, and we want to set

00:13:39.640 --> 00:13:41.620
that guy at two, right?

00:13:41.620 --> 00:13:48.430
We want to add offline enabled,
and we want to set

00:13:48.430 --> 00:13:50.050
that to true.

00:13:50.050 --> 00:13:54.750
Then, remember we said we had
to change from the index to

00:13:54.750 --> 00:13:57.760
instead use our background
page?

00:13:57.760 --> 00:14:01.770
So I'm going to say background,
and I'm going to

00:14:01.770 --> 00:14:11.020
go here and say scripts, and
turn that into an array,

00:14:11.020 --> 00:14:14.270
because we can have multiple
background scripts.

00:14:14.270 --> 00:14:18.050
And I'm just going to say
background.js, and I'm going

00:14:18.050 --> 00:14:20.790
to put that in my js folder.

00:14:20.790 --> 00:14:24.785
All right, two other things
we need to do.

00:14:29.150 --> 00:14:41.010
Run permissions, and appWindow,
and experimental.

00:14:41.010 --> 00:14:48.120
All right, so we've done
all the things we

00:14:48.120 --> 00:14:50.290
needed to do here.

00:14:50.290 --> 00:14:53.220
So we've got our manifest
set to go.

00:14:53.220 --> 00:14:55.500
We can't actually go hit run
yet, because we don't have our

00:14:55.500 --> 00:14:56.180
background page.

00:14:56.180 --> 00:14:59.550
So let's have a look at what
is in our background page.

00:15:02.730 --> 00:15:05.870
So in our background page we're
going to put primarily

00:15:05.870 --> 00:15:07.950
just one chunk of
code for now.

00:15:07.950 --> 00:15:11.520
And that's the listen for the
application start event.

00:15:11.520 --> 00:15:14.980
So instead of doing loops and
all kinds of other stuff like

00:15:14.980 --> 00:15:21.420
we did before in the legacy
packaged apps, everything is

00:15:21.420 --> 00:15:23.620
event-driven, event-based.

00:15:23.620 --> 00:15:27.750
So we want to say right there
in the top bit of our app,

00:15:27.750 --> 00:15:31.120
Chrome experimental app
unlaunched, add listener.

00:15:31.120 --> 00:15:33.440
So we want to say we want
to listen for an event.

00:15:33.440 --> 00:15:36.990
And we then say all right, when
that event fires we want

00:15:36.990 --> 00:15:39.910
to start and create
a new window.

00:15:39.910 --> 00:15:43.370
And the window we want to create
is the index HTML.

00:15:43.370 --> 00:15:45.800
Now, I can also add a couple
additional properties.

00:15:45.800 --> 00:15:49.110
So I can say I want that window
to open up at 1024 by

00:15:49.110 --> 00:15:55.170
768, I wanted it to open at 100
pixels over and 100 pixels

00:15:55.170 --> 00:15:58.170
down, and type shell.

00:15:58.170 --> 00:16:01.860
All right, we're just going
to cheat a little bit.

00:16:01.860 --> 00:16:15.690
We're going to copy this and new
file, paste that guy in,

00:16:15.690 --> 00:16:16.940
background.js.

00:16:19.210 --> 00:16:23.540
So we've got our background
page in, so it's there.

00:16:23.540 --> 00:16:26.675
Now when the app starts, we're
going to be good to go.

00:16:30.040 --> 00:16:32.710
There's a couple other events
that we can listen for, like

00:16:32.710 --> 00:16:36.180
the uninstalled and an
on suspend event.

00:16:36.180 --> 00:16:37.880
We're not going to worry about
those right now, because

00:16:37.880 --> 00:16:40.690
really the only thing we want to
do right now when we start

00:16:40.690 --> 00:16:43.550
is the on start.

00:16:43.550 --> 00:16:46.750
Couple of things we need to
do just in preparation.

00:16:46.750 --> 00:16:50.060
In the future we probably
won't have to do this,

00:16:50.060 --> 00:16:52.890
but for now we do.

00:16:52.890 --> 00:16:55.520
This stuff is only available
in Chrome Canary.

00:16:55.520 --> 00:16:59.320
There's a reason for that, kind
of fun, kind of a little

00:16:59.320 --> 00:17:01.940
bit on the edge.

00:17:01.940 --> 00:17:03.510
Chrome Canary's where
you can always get

00:17:03.510 --> 00:17:06.119
the latest and greatest.

00:17:06.119 --> 00:17:08.190
It will be in dev
channel soon.

00:17:08.190 --> 00:17:10.720
Now the great thing about
running it in Chrome Canary is

00:17:10.720 --> 00:17:13.700
that you can run Chrome Canary
and Chrome Stable or Chrome

00:17:13.700 --> 00:17:16.680
Beta or Chrome Dev
side by side.

00:17:16.680 --> 00:17:18.760
So that way if you're ever like
OK, well, I want to go

00:17:18.760 --> 00:17:21.460
try something and see how it
works and I still need to

00:17:21.460 --> 00:17:24.349
actually be able to browse and
do my real stuff, you can have

00:17:24.349 --> 00:17:25.569
those both side by side.

00:17:25.569 --> 00:17:28.700
So Chrome Canary, and then we
need to just go add our app,

00:17:28.700 --> 00:17:31.260
just like we did with the
legacy packaged app.

00:17:31.260 --> 00:17:33.170
So the first thing I'm
going to do, let's go

00:17:33.170 --> 00:17:35.000
over to Chrome Canary.

00:17:35.000 --> 00:17:39.410
And I'm going to close this guy
out, I'm going to go to

00:17:39.410 --> 00:17:41.990
Tools, and Extensions.

00:17:44.640 --> 00:17:47.100
So I've already checked the
developer mode, so I'm going

00:17:47.100 --> 00:17:49.961
to go and load an unpacked
extension.

00:17:49.961 --> 00:17:54.440
So I'm going to grab this, click
Select, a-ha, all right,

00:17:54.440 --> 00:18:02.934
dictionary keys must be
quoted, so line 16.

00:18:02.934 --> 00:18:05.470
You know that pink thing that's
right there might have

00:18:05.470 --> 00:18:07.140
given it away when I was
doing this early.

00:18:14.445 --> 00:18:15.810
Try that again.

00:18:18.980 --> 00:18:22.820
All right, so now if I
go over here, you'll

00:18:22.820 --> 00:18:24.610
notice I've got my legacy.

00:18:24.610 --> 00:18:26.720
We've got my final, so we'll see
what that looks like in a

00:18:26.720 --> 00:18:29.290
sec, but I've got the updated.

00:18:29.290 --> 00:18:31.680
One thing you'll notice, the
difference between the legacy

00:18:31.680 --> 00:18:36.580
and the updated, the legacy is
kind of gray there because I

00:18:36.580 --> 00:18:39.400
don't have an internet
connection right now.

00:18:39.400 --> 00:18:43.110
By putting that offline enabled
there, it tells the

00:18:43.110 --> 00:18:46.200
app hey, this app
works offline.

00:18:46.200 --> 00:18:49.340
And as we go through and have
a look at why it works

00:18:49.340 --> 00:18:52.420
offline, you'll get into this
a little bit deeper.

00:18:52.420 --> 00:18:54.890
But let's go and
start our app.

00:18:54.890 --> 00:19:02.550
Hmm, OK, it's started, but it
doesn't look very good.

00:19:02.550 --> 00:19:04.910
I would expect to see some
numbers there, I'd expect to

00:19:04.910 --> 00:19:06.930
see some data.

00:19:06.930 --> 00:19:10.700
At least we have an app running,
our window opened.

00:19:10.700 --> 00:19:13.219
We've got a sad panda, we
can deal with sad panda.

00:19:18.010 --> 00:19:21.470
All right, so let's see that in
action, we already saw it.

00:19:21.470 --> 00:19:22.790
What happened there?

00:19:22.790 --> 00:19:25.530
We actually got hit by something
called Content

00:19:25.530 --> 00:19:28.820
Security Policy there.

00:19:28.820 --> 00:19:30.310
I asked how many people
have heard about

00:19:30.310 --> 00:19:32.590
Content Security Policy.

00:19:32.590 --> 00:19:34.940
It's a new thing that's coming,
and it's going to make

00:19:34.940 --> 00:19:36.000
the web a lot safer.

00:19:36.000 --> 00:19:40.230
But it also makes things a
little bit different for us as

00:19:40.230 --> 00:19:42.590
developers, because we have
to approach things

00:19:42.590 --> 00:19:44.280
in a different way.

00:19:44.280 --> 00:19:48.050
I kind of like to use a little
bit of an analogy of it, and

00:19:48.050 --> 00:19:51.850
talk about it as when you
take the kids trick

00:19:51.850 --> 00:19:54.340
or treating at Halloween.

00:19:54.340 --> 00:19:56.950
They go out to all these
strangers' houses and the

00:19:56.950 --> 00:19:59.980
strangers give them candy.

00:19:59.980 --> 00:20:04.830
And you get home, and as
parents, the parents sort

00:20:04.830 --> 00:20:06.920
through the candy and say you
can have this, you can't have

00:20:06.920 --> 00:20:08.100
this, you can have this.

00:20:08.100 --> 00:20:11.360
As a kid, you're like I want
all of it, it's all good.

00:20:11.360 --> 00:20:13.680
Like, you want all that
candy, but some of

00:20:13.680 --> 00:20:16.130
it's potentially dangerous.

00:20:16.130 --> 00:20:17.730
The web is very similar.

00:20:17.730 --> 00:20:24.510
When we say hey, you can take
anything you want, you might

00:20:24.510 --> 00:20:25.790
get good stuff, right?

00:20:25.790 --> 00:20:29.050
You might get great stuff, you
might get great data feeds,

00:20:29.050 --> 00:20:31.230
you might get whatever
you want.

00:20:31.230 --> 00:20:35.710
But somebody out there might be
malicious and say oh, I'm

00:20:35.710 --> 00:20:38.430
going to give you some bad
stuff, and you're going to get

00:20:38.430 --> 00:20:40.830
something like a cross-site
scripting vulnerability.

00:20:40.830 --> 00:20:46.010
Well, Content Security Policy
basically says on the web you

00:20:46.010 --> 00:20:50.190
are allowed to get content, data
source, whatever, from

00:20:50.190 --> 00:20:52.770
these places, but
not from these.

00:20:52.770 --> 00:20:55.440
So just like when your parents
came in at Halloween and said

00:20:55.440 --> 00:20:58.760
you can have this candy but you
can't have this, Content

00:20:58.760 --> 00:21:00.540
Security Policy does
that same thing.

00:21:00.540 --> 00:21:04.230
It says this is safe,
this is not.

00:21:04.230 --> 00:21:07.690
Now with Chrome packaged apps,
we said you know what, let's

00:21:07.690 --> 00:21:10.870
make these apps as
safe as we can.

00:21:10.870 --> 00:21:15.040
So we put a relatively strict
set of rules on that.

00:21:15.040 --> 00:21:16.750
So let's talk about a couple
of the things that are

00:21:16.750 --> 00:21:20.490
potentially dangerous, why
we block them, and

00:21:20.490 --> 00:21:22.530
what's going on.

00:21:22.530 --> 00:21:25.880
So any code that comes from
outside of your control, so

00:21:25.880 --> 00:21:29.110
that's not delivered in the
package of your application,

00:21:29.110 --> 00:21:30.730
is going to be blocked.

00:21:30.730 --> 00:21:34.280
That means if you try and go
get Google Analytics, the

00:21:34.280 --> 00:21:38.310
ga.js kind of code, that's
going to be blocked.

00:21:38.310 --> 00:21:40.240
Sure, you get it from
Google Analytics.

00:21:40.240 --> 00:21:43.060
We're probably not evil, at
least I hope we're not.

00:21:43.060 --> 00:21:44.500
Well, we've got this
thing that says

00:21:44.500 --> 00:21:45.680
don't be evil, right?

00:21:45.680 --> 00:21:49.550
So that's OK, but we don't know
where you're going to go

00:21:49.550 --> 00:21:50.410
get all this stuff from.

00:21:50.410 --> 00:21:53.560
So we say if it's not your
package, you can't have it.

00:21:53.560 --> 00:21:55.870
Because you might go and get
something from somebody else's

00:21:55.870 --> 00:21:58.580
source, maybe somebody said
oh hey, I'll host Google

00:21:58.580 --> 00:21:59.760
Analytics code for you.

00:21:59.760 --> 00:22:03.030
And all a sudden it's not
actually that code anymore,

00:22:03.030 --> 00:22:04.670
and they're doing something
malicious with it.

00:22:04.670 --> 00:22:07.760
So if it's code from outside of
your control, you can't put

00:22:07.760 --> 00:22:09.140
it in the app.

00:22:09.140 --> 00:22:12.970
Second thing, we block
inline scripts,

00:22:12.970 --> 00:22:14.800
including JavaScript URLs.

00:22:17.710 --> 00:22:20.550
That one kind of sucks, right?

00:22:20.550 --> 00:22:22.040
We're kind of used to
sometimes doing

00:22:22.040 --> 00:22:22.820
that kind of stuff.

00:22:22.820 --> 00:22:26.270
Now, it's not exactly a best
practice for doing that, but

00:22:26.270 --> 00:22:29.730
inline scripts-- the problem
with inline scripts is, so

00:22:29.730 --> 00:22:32.590
we're looking through this HTML,
and we come across a

00:22:32.590 --> 00:22:33.220
script block.

00:22:33.220 --> 00:22:35.840
Well, if we come across a script
block, how do we know

00:22:35.840 --> 00:22:39.330
that you as the developer
actually put that in there

00:22:39.330 --> 00:22:43.070
versus somebody injecting that
in via some kind of cross-site

00:22:43.070 --> 00:22:45.170
scripting attack, or
something else?

00:22:45.170 --> 00:22:51.030
So anything that could get
injected into the HTML, nope,

00:22:51.030 --> 00:22:54.230
sorry, we're not going to let
that happen because it could

00:22:54.230 --> 00:22:57.980
potentially allow that
cross-site scripting.

00:22:57.980 --> 00:23:00.840
This one I think should be
pretty obvious why we don't

00:23:00.840 --> 00:23:02.620
let you have eval.

00:23:02.620 --> 00:23:05.720
Eval is kind of evil, it's
one letter away.

00:23:05.720 --> 00:23:11.420
So unsafe code execution like
eval, because you could

00:23:11.420 --> 00:23:15.540
basically take any text, run it
through eval, turn it into

00:23:15.540 --> 00:23:19.470
some nice, cool, nasty
script, not so good.

00:23:19.470 --> 00:23:23.170
Pretty much every browser today
supports JSON.parse and

00:23:23.170 --> 00:23:23.920
JSON.stringify.

00:23:23.920 --> 00:23:24.630
String/file.

00:23:24.630 --> 00:23:28.620
So realistically, the need for
eval is pretty limited.

00:23:28.620 --> 00:23:31.670
There are a few places where
eval is useful and

00:23:31.670 --> 00:23:32.920
where eval is good.

00:23:36.930 --> 00:23:40.910
Safe, good, protecting your
users, protecting your

00:23:40.910 --> 00:23:44.575
customers, protecting your
data, potentially evil.

00:23:44.575 --> 00:23:49.480
Hmm, I usually like the
safe, good better.

00:23:49.480 --> 00:23:51.720
So let's have a look at a
practical example, like a very

00:23:51.720 --> 00:23:53.250
specific example here.

00:23:53.250 --> 00:23:56.500
So this is in the HTML of my
application, I've got a

00:23:56.500 --> 00:24:00.270
function that says callme and
it prints out a little line.

00:24:00.270 --> 00:24:04.440
And I've got a button, and the
button has an onclick directly

00:24:04.440 --> 00:24:08.400
on it that calls the function,
and I've got

00:24:08.400 --> 00:24:09.820
some text in there.

00:24:09.820 --> 00:24:12.430
So that's not going
to work, right?

00:24:12.430 --> 00:24:20.040
We've got both an inline script
block, and we've got

00:24:20.040 --> 00:24:22.790
inline script in our
button as well--

00:24:22.790 --> 00:24:24.740
not going to happen.

00:24:24.740 --> 00:24:26.570
So here's the better
way to do it.

00:24:26.570 --> 00:24:29.560
It's a couple more lines of
code, but it's the better

00:24:29.560 --> 00:24:30.700
practice to do it.

00:24:30.700 --> 00:24:37.880
First thing we do, we've got our
script block that links to

00:24:37.880 --> 00:24:40.630
our file, and then we put
our button there that

00:24:40.630 --> 00:24:42.230
says hey, call me.

00:24:42.230 --> 00:24:44.920
It's got an ID on the button so
that we can get access to

00:24:44.920 --> 00:24:46.140
it a little bit later.

00:24:46.140 --> 00:24:48.500
And then we have our
function in the

00:24:48.500 --> 00:24:50.670
JavaScript that says callme.

00:24:50.670 --> 00:24:55.040
And we add an event listener
to say hey, go grab that

00:24:55.040 --> 00:24:58.100
callme button and add a listen
so that when the user clicks

00:24:58.100 --> 00:25:00.270
on it maybe they call.

00:25:00.270 --> 00:25:05.370
Sorry, bad pun, bad joke, I like
that song, I admit it.

00:25:05.370 --> 00:25:08.540
I'll go away in shame now.

00:25:08.540 --> 00:25:10.600
So this is the better
way to do it.

00:25:10.600 --> 00:25:13.440
There's a bunch of really great
content out there that

00:25:13.440 --> 00:25:16.590
talks about CSP.

00:25:16.590 --> 00:25:18.800
I've got a link to it at the end
of the slides, it's really

00:25:18.800 --> 00:25:20.660
worth having a look at.

00:25:20.660 --> 00:25:24.770
Converting from inline script
blocks and that kind of stuff,

00:25:24.770 --> 00:25:26.570
not an impossible thing to do.

00:25:26.570 --> 00:25:29.080
It takes a little bit of work
and a little bit of rethinking

00:25:29.080 --> 00:25:31.420
on our part, but something
really important

00:25:31.420 --> 00:25:33.140
that we should do.

00:25:33.140 --> 00:25:36.182
So one of the things I'm going
to do, let's actually get out

00:25:36.182 --> 00:25:39.350
of here for a sec.

00:25:39.350 --> 00:25:42.910
And before we go over there,
let's tab over here.

00:25:42.910 --> 00:25:47.920
So one of the reasons why I
chose to use this app and why

00:25:47.920 --> 00:25:55.870
I chose to use Angular, is
Angular actually has some CSP

00:25:55.870 --> 00:26:00.470
ability to deal with it right
inside so that I don't have to

00:26:00.470 --> 00:26:02.510
go and deal with all
the craziness.

00:26:02.510 --> 00:26:03.790
I can actually just go ng-csp.

00:26:07.490 --> 00:26:11.910
And that now, if I did
everything right, I'm going to

00:26:11.910 --> 00:26:20.060
close this guy, open this up,
and I didn't do it right.

00:26:20.060 --> 00:26:27.306
All right, I'm going to cheat
one sec, I'm going to have a

00:26:27.306 --> 00:26:28.650
look at my file over here.

00:26:28.650 --> 00:26:30.710
Ng-csp, that was the
right thing to do?

00:26:30.710 --> 00:26:34.270
Oh, yeah, reloading helps.

00:26:36.990 --> 00:26:43.700
So over here, go reload my
app, and sure enough, it

00:26:43.700 --> 00:26:45.870
doesn't work again.

00:26:45.870 --> 00:26:47.810
I can come back to that, because
I've actually got

00:26:47.810 --> 00:26:49.960
something else I'm going to
do in my next step here.

00:26:57.680 --> 00:27:01.100
So one of the other things that
is really important and

00:27:01.100 --> 00:27:07.030
really useful to do in moving
your app to a packaged app, is

00:27:07.030 --> 00:27:11.590
taking that shared and common
functionality, pulling it out

00:27:11.590 --> 00:27:15.810
of your JavaScript places where
it's going to get used

00:27:15.810 --> 00:27:17.910
in multiple places,
and putting it

00:27:17.910 --> 00:27:19.700
into the same place.

00:27:19.700 --> 00:27:24.140
So with the RSS reader
application we've got, it goes

00:27:24.140 --> 00:27:28.800
up and it pulls for data, and
then it pulls that down and it

00:27:28.800 --> 00:27:30.650
goes and puts it into
a data store.

00:27:30.650 --> 00:27:34.610
So for something like this, we
want to take that and put that

00:27:34.610 --> 00:27:36.910
into the background page.

00:27:36.910 --> 00:27:39.390
So that we take all that shared
code that's all over

00:27:39.390 --> 00:27:42.210
the place, maybe a little bit
spaghetti-like, and try and

00:27:42.210 --> 00:27:46.640
really reduce some of the
work that's going on.

00:27:46.640 --> 00:27:49.330
One of the ways that
you can do that and

00:27:49.330 --> 00:27:50.520
that's really useful--

00:27:50.520 --> 00:27:55.380
we'll dive into the
chrome.storage API in a sec--

00:27:55.380 --> 00:27:59.540
but in my application I could
take this chrome.storage

00:27:59.540 --> 00:28:02.700
listener and I can say hey,
anytime anything changed I

00:28:02.700 --> 00:28:04.780
want you to go listen
for this.

00:28:04.780 --> 00:28:11.415
And I want to update all of the
rest of the page so that

00:28:11.415 --> 00:28:14.490
oh hey, I just got new feeds,
let's go update what's

00:28:14.490 --> 00:28:15.740
displayed to the user.

00:28:18.940 --> 00:28:24.340
So I was talking a little bit
about the package, making

00:28:24.340 --> 00:28:26.210
stuff work offline.

00:28:26.210 --> 00:28:29.280
And making applications work
offline, we can do it on the

00:28:29.280 --> 00:28:32.870
web today, but it is a small
pain in the bum to put it

00:28:32.870 --> 00:28:33.690
mildly, right?

00:28:33.690 --> 00:28:36.880
Like, there's AppCache, then
you've got to deal with well,

00:28:36.880 --> 00:28:37.560
where are you going to put it?

00:28:37.560 --> 00:28:39.480
Are you going to put it in an
index db, you going to put it

00:28:39.480 --> 00:28:41.380
in local storage, are you
going to put it--

00:28:41.380 --> 00:28:43.800
where are you going to put it?

00:28:43.800 --> 00:28:47.470
And well, typically as web
developers we say hey, let's

00:28:47.470 --> 00:28:53.170
go get data from the cloud and
then display it on screen.

00:28:53.170 --> 00:28:56.140
Oh well, maybe we should just
store it locally, too.

00:28:56.140 --> 00:28:59.350
So when you start to think about
your applications and

00:28:59.350 --> 00:29:03.460
how they should work offline, we
want to think about them in

00:29:03.460 --> 00:29:06.520
a little bit of a
different way.

00:29:06.520 --> 00:29:09.860
So we've got our packaged app,
and our packaged app should

00:29:09.860 --> 00:29:12.860
talk to a local data
store first.

00:29:12.860 --> 00:29:15.870
So some kind of local
data storage.

00:29:15.870 --> 00:29:20.220
That way, if I have no network
connection I'm always going to

00:29:20.220 --> 00:29:22.410
be able to pull data in.

00:29:22.410 --> 00:29:25.020
I start my app, hey look,
there's data.

00:29:25.020 --> 00:29:28.190
It may be stale and old data,
but at least I've got

00:29:28.190 --> 00:29:28.860
something, right?

00:29:28.860 --> 00:29:32.870
Like, you go to Goggle+, you go
to any other site, you want

00:29:32.870 --> 00:29:35.485
to see something when
the app starts.

00:29:38.780 --> 00:29:42.800
Now, it'd be really kick butt if
we could also store all of

00:29:42.800 --> 00:29:44.700
that data in the cloud
so that it was synced

00:29:44.700 --> 00:29:47.130
across all of my computers.

00:29:47.130 --> 00:29:50.610
So that I didn't have to go oh,
hey, well I haven't run

00:29:50.610 --> 00:29:53.550
this app in a while on this
computer, so I guess I don't

00:29:53.550 --> 00:29:54.470
have this data.

00:29:54.470 --> 00:29:57.520
I want all the stuff synced
across the cloud so that I

00:29:57.520 --> 00:30:00.650
open my Chromebook, great,
I've got all that data.

00:30:00.650 --> 00:30:05.110
I open my iPad with Chrome on
it, I've got all that data.

00:30:05.110 --> 00:30:08.540
I've got, open whatever device
I've got, I've got all of that

00:30:08.540 --> 00:30:10.410
stuff synced across the cloud.

00:30:10.410 --> 00:30:12.870
And there's a great new Chrome
API that's going

00:30:12.870 --> 00:30:14.700
to help me do that.

00:30:14.700 --> 00:30:22.390
And then finally, from our local
data store, or from our

00:30:22.390 --> 00:30:26.070
background page, we want to go
and have that talk to the

00:30:26.070 --> 00:30:29.050
backend services for
our application.

00:30:29.050 --> 00:30:33.440
So our packaged app, our UI, is
never talking to any kind

00:30:33.440 --> 00:30:36.190
of application server-side
stuff.

00:30:36.190 --> 00:30:39.470
All of that is happening on
a separate business layer.

00:30:39.470 --> 00:30:43.030
When you think about, if you've
taken computer science

00:30:43.030 --> 00:30:45.840
classes and you separate out,
hey, here's my business layer,

00:30:45.840 --> 00:30:47.890
here's my display layer,
here's all this stuff.

00:30:47.890 --> 00:30:51.120
You're separating all those out
and that's what we really

00:30:51.120 --> 00:30:52.810
want to see in these
packaged apps.

00:30:52.810 --> 00:30:56.410
So that your app talks to
the data store, pulls

00:30:56.410 --> 00:30:58.010
everything in there.

00:30:58.010 --> 00:31:00.850
And then the background page or
any of those other pieces

00:31:00.850 --> 00:31:03.740
then go and pull stuff
in so that we can

00:31:03.740 --> 00:31:06.640
deal with those pieces.

00:31:06.640 --> 00:31:13.340
So we have this new set of
chrome.storage APIs.

00:31:13.340 --> 00:31:18.760
They give you all the power of
Google's Chrome Sync stuff

00:31:18.760 --> 00:31:22.080
without having to go deal with
oh, well, I got to go set up a

00:31:22.080 --> 00:31:22.990
bunch of servers.

00:31:22.990 --> 00:31:24.850
I got to figure out how
to do data syncing.

00:31:24.850 --> 00:31:28.110
I got to figure out how to
do all these things.

00:31:28.110 --> 00:31:31.910
Now it's not meant for
you to store tons and

00:31:31.910 --> 00:31:32.930
tons and tons of data.

00:31:32.930 --> 00:31:37.330
That's Google Drive, and we do
have some easy abilities for

00:31:37.330 --> 00:31:38.300
you to get into that.

00:31:38.300 --> 00:31:40.990
They're not quite there yet,
we're not going to talk about

00:31:40.990 --> 00:31:42.820
those in today's session.

00:31:42.820 --> 00:31:48.770
But to be able to store user
settings, not necessarily

00:31:48.770 --> 00:31:51.610
login information, but
application settings, or

00:31:51.610 --> 00:31:55.660
little bits of data like key
value pairs is exactly what we

00:31:55.660 --> 00:31:58.840
want to use this chrome.storage
API.

00:31:58.840 --> 00:32:00.600
So there's a couple of things
we need to do it in

00:32:00.600 --> 00:32:01.370
order to use it.

00:32:01.370 --> 00:32:04.980
One, we need to turn on the
storage permission, because it

00:32:04.980 --> 00:32:06.550
needs a permission.

00:32:06.550 --> 00:32:09.770
And then there's two things we
can do, we can get and we

00:32:09.770 --> 00:32:11.940
could save--

00:32:11.940 --> 00:32:14.200
or I guess that's
technically set.

00:32:14.200 --> 00:32:16.720
There are some other APIs, but
these are the key things I

00:32:16.720 --> 00:32:18.500
want to show you here.

00:32:18.500 --> 00:32:23.550
So if I want to save something,
I use this set.

00:32:23.550 --> 00:32:25.460
Let me highlight this out
here for a sec, and

00:32:25.460 --> 00:32:27.310
we send it in object.

00:32:27.310 --> 00:32:30.720
That object is just a name value
pair, or a JSON Object.

00:32:30.720 --> 00:32:34.830
So I've got hey, here's all of
the Chromium articles that

00:32:34.830 --> 00:32:37.470
I've got that I want to
save, and I give it

00:32:37.470 --> 00:32:39.700
that list of items.

00:32:39.700 --> 00:32:43.960
And then I've got a call back
that's used to say all right,

00:32:43.960 --> 00:32:47.260
everything's saved, you're good
to go, all hunky dory.

00:32:50.220 --> 00:32:57.290
To get that stuff out of the
back side, we use the

00:32:57.290 --> 00:33:05.630
chrome.storage.sync.get, and we
just ask for what we want

00:33:05.630 --> 00:33:07.280
and we give it a call
back again.

00:33:07.280 --> 00:33:10.220
And so Chrome says OK,
yep, you want that?

00:33:10.220 --> 00:33:12.880
Sure, no problem, I'll give
that to you in a sec.

00:33:12.880 --> 00:33:15.570
Goes off, gets it, and pulls
it down and gives it to you

00:33:15.570 --> 00:33:18.330
via that callback.

00:33:18.330 --> 00:33:23.950
So let's actually go take a look
at the code we've got.

00:33:23.950 --> 00:33:28.650
And trying to do the two things
that I just talked

00:33:28.650 --> 00:33:33.550
about up on stage would have
been a little messy because it

00:33:33.550 --> 00:33:35.070
changes a lot of stuff
in this application.

00:33:35.070 --> 00:33:39.140
So I want to show you the things
that we did in order to

00:33:39.140 --> 00:33:39.970
get that to work.

00:33:39.970 --> 00:33:45.120
So our background page before,
you remember, was just that

00:33:45.120 --> 00:33:47.790
start for our application.

00:33:47.790 --> 00:33:53.530
So we've got that still in here,
so we add our Chrome

00:33:53.530 --> 00:34:01.250
Experimental app launched, and
we open up our window.

00:34:01.250 --> 00:34:05.380
And we've moved a lot of the
code that our application is

00:34:05.380 --> 00:34:08.219
using out into here.

00:34:08.219 --> 00:34:12.960
So we've got a factor here
that's going to go and do our

00:34:12.960 --> 00:34:13.790
feed fetching.

00:34:13.790 --> 00:34:23.290
So all of our feed fetching, all
of our feed syncing, all

00:34:23.290 --> 00:34:26.489
of that is done here in
our background page.

00:34:26.489 --> 00:34:31.020
So we've got our factory to
get our feeds, we've got a

00:34:31.020 --> 00:34:34.280
factory again here where we're
refreshing things, and then

00:34:34.280 --> 00:34:38.860
we've got some angular stuff as
well down here, just sort

00:34:38.860 --> 00:34:41.620
of angular filtering stuff.

00:34:41.620 --> 00:34:45.520
We've also gone and created
a store module.

00:34:45.520 --> 00:34:48.389
So Angular allows you to have
these concepts of modules.

00:34:48.389 --> 00:34:51.620
So we've got in here our store
module, we create our factory,

00:34:51.620 --> 00:34:56.449
and we want to say hey, we've
got our state store and our

00:34:56.449 --> 00:34:57.699
content store.

00:35:02.080 --> 00:35:08.000
As we're working on this, we
sort of said OK, we're storing

00:35:08.000 --> 00:35:10.680
large amounts of data.

00:35:10.680 --> 00:35:13.410
How do we do that in
a really good way?

00:35:13.410 --> 00:35:16.950
How do we take all of that
information and put it in the

00:35:16.950 --> 00:35:22.770
user's hands without sending
lots of data up to the cloud,

00:35:22.770 --> 00:35:26.680
without overloading all the
user's synced storage space

00:35:26.680 --> 00:35:28.420
and complexities?

00:35:28.420 --> 00:35:34.870
Said OK, well, what if we
separate out the blog feed,

00:35:34.870 --> 00:35:40.130
each RSS poster, each RSS
item, from its state?

00:35:40.130 --> 00:35:43.130
So we said we want to sync all
of the state, whether it's

00:35:43.130 --> 00:35:47.490
been read or not, and whether
it's been starred or not, and

00:35:47.490 --> 00:35:48.700
we're going to store that
up in the cloud.

00:35:48.700 --> 00:35:51.680
Because that's, what,
two bits?

00:35:51.680 --> 00:35:54.390
It's not even a byte for
that matter, because

00:35:54.390 --> 00:35:56.940
it's just like a Boolean.

00:35:56.940 --> 00:36:01.800
And then we store all of the
information about the feeds on

00:36:01.800 --> 00:36:04.140
the user's local computer,
because we can always go get

00:36:04.140 --> 00:36:07.240
those later, those
are easy to get.

00:36:07.240 --> 00:36:12.870
So we've separated those two
things in our data storage.

00:36:12.870 --> 00:36:17.070
And then when we go to actually
get these things,

00:36:17.070 --> 00:36:18.320
just sort of scroll down here.

00:36:25.430 --> 00:36:30.490
So we go and get our feeds from
content storage, which

00:36:30.490 --> 00:36:33.390
Angular then has a way to say
hey, if there's everything in

00:36:33.390 --> 00:36:36.340
there, we want to go and do
a forEach on each of them.

00:36:36.340 --> 00:36:39.530
So we're going to go and iterate
through each item and

00:36:39.530 --> 00:36:42.155
go and add them to the
user's display.

00:36:45.480 --> 00:36:47.910
So let's go and add this guy.

00:36:47.910 --> 00:36:50.860
So I'm going to load our
unpacked extension, and we'll

00:36:50.860 --> 00:36:52.540
grab number three that
we've refactored.

00:37:01.010 --> 00:37:05.990
And sure enough, now we
don't have anything.

00:37:05.990 --> 00:37:08.730
But that's OK right now,
because I don't have us

00:37:08.730 --> 00:37:10.730
plugged into the network
right yet.

00:37:10.730 --> 00:37:13.720
So now we've got all
of our data.

00:37:13.720 --> 00:37:16.240
Everything works right, but
we're trying to pull

00:37:16.240 --> 00:37:18.600
everything from our
local machine,

00:37:18.600 --> 00:37:19.900
we don't have anything.

00:37:19.900 --> 00:37:21.050
So let's try it again.

00:37:21.050 --> 00:37:23.330
I'm going to close the window.

00:37:23.330 --> 00:37:27.480
Actually, I'm going to
join a network first.

00:37:27.480 --> 00:37:31.120
I'm going to be a little bit
brave, I'm going to try it on

00:37:31.120 --> 00:37:33.600
wireless first.

00:37:33.600 --> 00:37:34.890
Think we can get it
working today?

00:37:40.130 --> 00:37:42.050
All right, so close
this window.

00:37:48.180 --> 00:37:54.880
And so it's fair enough,
now we've got our data.

00:37:54.880 --> 00:37:58.340
So we've got everything in
there, and I'm going to go

00:37:58.340 --> 00:37:59.590
turn Wi-Fi off again.

00:38:02.660 --> 00:38:05.210
So now because I've turned the
Wi-Fi off, if we try and go

00:38:05.210 --> 00:38:10.530
get everything from the
server it should work.

00:38:10.530 --> 00:38:18.860
So close this guy out, start it
again, refactored, and sure

00:38:18.860 --> 00:38:21.500
enough we have everything
back again.

00:38:21.500 --> 00:38:24.940
Now if I were to go and try this
on another computer that

00:38:24.940 --> 00:38:29.230
I'm signed into, all of the
things that I've read are

00:38:29.230 --> 00:38:31.520
going to be synced across
the different computers.

00:38:31.520 --> 00:38:34.010
Now it's going to have to go and
pull that data down on the

00:38:34.010 --> 00:38:37.880
second computer, but the key
point being it knows what I've

00:38:37.880 --> 00:38:40.700
read, knows what I've starred,
it knows what I like.

00:38:40.700 --> 00:38:46.070
So I'm able to store specific
sets of information about what

00:38:46.070 --> 00:38:49.730
I'm really interested in, or how
I want to go and do these

00:38:49.730 --> 00:38:51.765
things, across different
places.

00:39:02.260 --> 00:39:05.730
Keeping the application up to
date is also really useful.

00:39:05.730 --> 00:39:09.670
It would be nice if when I
first started the app it

00:39:09.670 --> 00:39:13.805
didn't have to go and download
all the stuff and say all

00:39:13.805 --> 00:39:18.230
right that first time, but
instead it just always stayed

00:39:18.230 --> 00:39:19.000
up to date.

00:39:19.000 --> 00:39:21.660
So that the first time I started
it, or that first time

00:39:21.660 --> 00:39:24.840
I opened it after not using it
for two days, all of my data's

00:39:24.840 --> 00:39:26.650
there, right?

00:39:26.650 --> 00:39:29.790
You go to Google+, wouldn't it
be nice if that first time it

00:39:29.790 --> 00:39:33.190
loaded it was all fresh data
instead of going oh, now I got

00:39:33.190 --> 00:39:36.800
to wait for it to load, do ta
do ta do, OK, now I can see

00:39:36.800 --> 00:39:37.270
what I want.

00:39:37.270 --> 00:39:39.820
We want that ability so that
when users start the

00:39:39.820 --> 00:39:43.480
application, users want
that fast, fast.

00:39:43.480 --> 00:39:45.390
They want--

00:39:45.390 --> 00:39:48.340
there's something else, like a
different app that's just as

00:39:48.340 --> 00:39:51.620
good but theirs is faster,
they're going to go use the

00:39:51.620 --> 00:39:52.660
faster app.

00:39:52.660 --> 00:39:54.570
They're going to use somebody
else's app.

00:39:54.570 --> 00:39:56.930
So we want to make sure your
apps are nice and snappy, your

00:39:56.930 --> 00:39:58.490
apps are nice and fast.

00:39:58.490 --> 00:40:02.840
So there's this new
Chrome.alarms API, and it

00:40:02.840 --> 00:40:07.920
works very similarly to set
time out or set interval.

00:40:07.920 --> 00:40:10.640
It's got three--

00:40:10.640 --> 00:40:13.480
I guess it's got three, I
thought it had four--

00:40:13.480 --> 00:40:15.080
it's got three different
settings on it.

00:40:15.080 --> 00:40:19.530
One, Delay, so you can say hey,
from the time you fire

00:40:19.530 --> 00:40:24.060
this event, I want you to wait
five minutes and then fire.

00:40:24.060 --> 00:40:27.170
It's got a Period, which is very
similar to set interval,

00:40:27.170 --> 00:40:30.030
and it's going to fire
every X minutes.

00:40:30.030 --> 00:40:32.900
And then finally there's a
When that's like for a

00:40:32.900 --> 00:40:35.230
specific time.

00:40:35.230 --> 00:40:38.690
Now for alarms, to use that,
again we need to turn on a

00:40:38.690 --> 00:40:42.980
specific permission.

00:40:42.980 --> 00:40:47.000
So we're going to say hey, we
need that alarms permission.

00:40:47.000 --> 00:40:49.810
And then we go and
create an alarm.

00:40:49.810 --> 00:40:53.790
We give it a name, and we give
it a particular property.

00:40:53.790 --> 00:40:56.290
So whether we want it to fire
in a period of minutes,

00:40:56.290 --> 00:40:58.150
whether we want to fire
it in a delay,

00:40:58.150 --> 00:41:00.160
or a when, or whatever.

00:41:00.160 --> 00:41:03.480
So in this particular case,
we're going to use a period in

00:41:03.480 --> 00:41:07.080
five minutes, which is
going to fire the

00:41:07.080 --> 00:41:09.380
event every five minutes.

00:41:09.380 --> 00:41:14.070
Now, remember one of the things
that I said earlier was

00:41:14.070 --> 00:41:19.060
that it's really important that
these apps really work

00:41:19.060 --> 00:41:21.780
seamlessly and not cause
a lot of headache or

00:41:21.780 --> 00:41:22.480
anything like that.

00:41:22.480 --> 00:41:26.490
So we don't want to have
functions that are sitting

00:41:26.490 --> 00:41:27.100
there looping.

00:41:27.100 --> 00:41:28.650
We want everything to
be event-based.

00:41:28.650 --> 00:41:31.510
So because this is an event,
we need to create

00:41:31.510 --> 00:41:34.150
an add event listener.

00:41:34.150 --> 00:41:36.040
So we're going to add
our event listener.

00:41:36.040 --> 00:41:38.230
So I'm going to go and I'm just
going to-- in fact, we'll

00:41:38.230 --> 00:41:40.270
pop this into our application.

00:41:42.910 --> 00:41:45.550
And I'm going to
put this into--

00:41:45.550 --> 00:41:47.920
not that background--

00:41:47.920 --> 00:41:49.600
and I'm just going to close a
couple of these so that we can

00:41:49.600 --> 00:41:50.890
actually see where we are.

00:41:54.900 --> 00:41:57.280
I've put in a place where I want
to put my background, so

00:41:57.280 --> 00:42:02.760
I'm going to add my listener.

00:42:02.760 --> 00:42:06.120
Let's make that a
little prettier.

00:42:06.120 --> 00:42:10.130
And the other thing we need
to do is start our alarm.

00:42:10.130 --> 00:42:12.500
Now I've already added the
alarms permission, so we don't

00:42:12.500 --> 00:42:13.750
need to go add that.

00:42:16.490 --> 00:42:19.930
Pop that in, now the app will
stay up to date and everything

00:42:19.930 --> 00:42:22.180
will fire every five minutes.

00:42:22.180 --> 00:42:26.720
Now, I probably should have
picked a blog feed that was

00:42:26.720 --> 00:42:29.110
posting more than every five
minutes, or probably posting

00:42:29.110 --> 00:42:32.760
once a day right now because
of I/O. But you can imagine

00:42:32.760 --> 00:42:34.840
for something like this where
you've got something that you

00:42:34.840 --> 00:42:38.510
want to keep up to date, maybe
a friend's feed, or maybe

00:42:38.510 --> 00:42:43.620
something from Twitter, or any
other API that's changing on a

00:42:43.620 --> 00:42:47.260
regular basis, you want that
to fire much more quickly.

00:42:57.070 --> 00:43:00.540
So there's a bunch of other new
functionality in APIs that

00:43:00.540 --> 00:43:04.600
are available to us that
are pretty slick.

00:43:04.600 --> 00:43:07.935
Some of them didn't really fit
into the app all that well.

00:43:15.070 --> 00:43:17.520
Because of the way the app was
written, they didn't really

00:43:17.520 --> 00:43:18.610
fit all that well.

00:43:18.610 --> 00:43:20.890
They were one of those things
where it's like ah, OK, well

00:43:20.890 --> 00:43:22.920
this wasn't really particularly
needed.

00:43:22.920 --> 00:43:25.750
But I still thought they were
really cool and definitely

00:43:25.750 --> 00:43:27.000
worth talking about.

00:43:30.930 --> 00:43:34.490
There's a new Identity API
that's available that allows

00:43:34.490 --> 00:43:36.460
you to have your application
automatically

00:43:36.460 --> 00:43:38.630
log into Google services.

00:43:38.630 --> 00:43:41.450
So the user says hey, I want to
log in to this particular

00:43:41.450 --> 00:43:43.460
Google service.

00:43:43.460 --> 00:43:46.740
This is really for making it
easy so that you can get

00:43:46.740 --> 00:43:50.110
things up to drive, or if you
want to access any of the

00:43:50.110 --> 00:43:52.760
other APIs that Google
has to offer.

00:43:52.760 --> 00:43:55.080
So there's a couple of things
that we need do here in

00:43:55.080 --> 00:43:57.530
order to use it.

00:43:57.530 --> 00:44:03.750
First thing you need to do, add
that identity permission.

00:44:03.750 --> 00:44:09.980
And then we create a new block
within the manifest file, and

00:44:09.980 --> 00:44:15.560
we say OAuth 2.0 so it uses
the OAuth 2.0 protocol, I

00:44:15.560 --> 00:44:17.330
guess it is.

00:44:17.330 --> 00:44:20.070
And we go in and we provide
a client ID.

00:44:20.070 --> 00:44:27.030
So you get your client ID
from the dev console, so

00:44:27.030 --> 00:44:29.170
code.google.com/API/console.

00:44:29.170 --> 00:44:33.280
You get your client ID from
there, and then you specify

00:44:33.280 --> 00:44:36.120
the scopes that you want
to get access to.

00:44:36.120 --> 00:44:42.350
Much like you do if you're
writing any kind of other web

00:44:42.350 --> 00:44:44.320
app that uses OAuth.

00:44:44.320 --> 00:44:47.090
We take all that complexity, all
that pain in the butt-- if

00:44:47.090 --> 00:44:50.240
you've ever done OAuth 2.0,
it's definitely at least

00:44:50.240 --> 00:44:53.770
easier than OAuth 1.0, but it's
still not exactly the

00:44:53.770 --> 00:44:55.830
most fun thing to do.

00:44:55.830 --> 00:44:58.020
And we simplify it for
you all in here.

00:44:58.020 --> 00:45:01.790
So we'll ask the user to sign
in, yep, great, here you go.

00:45:01.790 --> 00:45:04.970
And then you don't ever have
to worry about it again,

00:45:04.970 --> 00:45:09.220
because all those requests that
you make will be done

00:45:09.220 --> 00:45:10.470
with the right set
of permissions.

00:45:15.100 --> 00:45:18.030
And then there's also when
you need to go get the

00:45:18.030 --> 00:45:20.730
authentication token, there's
just a simple API that you

00:45:20.730 --> 00:45:23.750
call and say hey, go
get me that token.

00:45:23.750 --> 00:45:27.470
All right, we're good to go,
we can start doing things.

00:45:27.470 --> 00:45:33.060
One of the ways that I wanted
to use this and see myself

00:45:33.060 --> 00:45:38.410
using this for in the future,
is if you wanted to build an

00:45:38.410 --> 00:45:44.340
offline RSS reader that actually
grabs the user's feed

00:45:44.340 --> 00:45:48.470
from Google Reader, you could
use exactly this API to say

00:45:48.470 --> 00:45:50.620
all right, let's go authenticate
the user.

00:45:50.620 --> 00:45:53.800
Now we can go and get their feed
information, figure out

00:45:53.800 --> 00:45:56.350
what they're reading and
pull it in that way.

00:45:56.350 --> 00:45:59.550
So that way instead of having to
go deal with anything else,

00:45:59.550 --> 00:46:00.940
we're golden.

00:46:00.940 --> 00:46:04.240
We can just, sweet, don't have
to write anything crazy in

00:46:04.240 --> 00:46:06.920
order to do that.

00:46:06.920 --> 00:46:11.130
There's a bunch of other stuff
that I think is pretty slick.

00:46:11.130 --> 00:46:13.860
Context menus, like real apps.

00:46:13.860 --> 00:46:16.540
If I've got an app that's
installed on my computer, I

00:46:16.540 --> 00:46:18.540
expect to be able to right-click
on it and pull up

00:46:18.540 --> 00:46:19.910
a context menu.

00:46:19.910 --> 00:46:22.780
Chrome apps have the ability
to say hey, I

00:46:22.780 --> 00:46:23.900
want a context menu.

00:46:23.900 --> 00:46:26.750
So through Chrome context
menus create, you

00:46:26.750 --> 00:46:28.670
can go and do that.

00:46:28.670 --> 00:46:29.590
All of these--

00:46:29.590 --> 00:46:31.640
don't worry about writing any
of these down if you can't

00:46:31.640 --> 00:46:34.220
really read it all that well.

00:46:34.220 --> 00:46:36.780
You can go check the slides
later, or have a look at some

00:46:36.780 --> 00:46:38.590
of the docs--

00:46:38.590 --> 00:46:40.440
create windows.

00:46:40.440 --> 00:46:44.350
Apps should be able to create
as many windows as often as

00:46:44.350 --> 00:46:48.260
they want without being spammy
or annoying, but

00:46:48.260 --> 00:46:49.570
real apps can do that.

00:46:49.570 --> 00:46:51.990
We're kind of prevented from
doing that on the web.

00:46:51.990 --> 00:46:53.920
For a good reason most
of the time.

00:46:53.920 --> 00:46:58.320
But we just say create a
window, provide a URL--

00:46:58.320 --> 00:47:00.720
that URL is a local URL.

00:47:00.720 --> 00:47:04.960
We can't say open a URL to HTTP
whack whack Google, or

00:47:04.960 --> 00:47:06.720
whack whack whatever,
it has to be a

00:47:06.720 --> 00:47:10.080
file within our package.

00:47:10.080 --> 00:47:13.280
We've got great stuff for doing
window manipulation.

00:47:13.280 --> 00:47:15.270
So I can go and set
focus on a window.

00:47:15.270 --> 00:47:18.750
I could say this window should
be in focus right now, or

00:47:18.750 --> 00:47:20.960
minimize and maximize windows.

00:47:20.960 --> 00:47:24.870
Just like you can with regular
applications that

00:47:24.870 --> 00:47:25.950
the user has installed.

00:47:25.950 --> 00:47:28.980
They're used to having app do
that, like hey, this app, I

00:47:28.980 --> 00:47:30.440
want you to go away because
I'm not really

00:47:30.440 --> 00:47:32.350
using you right now.

00:47:32.350 --> 00:47:33.330
Great, done.

00:47:33.330 --> 00:47:37.380
We can have them restore, move
and resize, just like we can

00:47:37.380 --> 00:47:40.195
with regular installed
applications.

00:47:43.170 --> 00:47:44.440
One of the ones that
I think is kind of

00:47:44.440 --> 00:47:45.920
cool, text to speech.

00:47:45.920 --> 00:47:50.570
So you can have your apps
start talking to you.

00:47:50.570 --> 00:47:53.270
There's even one that'll listen
for what you say, so

00:47:53.270 --> 00:47:54.993
there's a speech recognition.

00:47:54.993 --> 00:47:59.170
Hmm, speech recognition plus a
little text speech, you could

00:47:59.170 --> 00:48:01.070
start writing your
own kind of fun--

00:48:01.070 --> 00:48:03.630
anyway, you can figure out where
we're going on that one,

00:48:03.630 --> 00:48:07.650
or where I think you should
go on that one.

00:48:07.650 --> 00:48:10.200
There's a couple other API
changes that I want to call

00:48:10.200 --> 00:48:14.140
out because I think they're
pretty important.

00:48:14.140 --> 00:48:15.085
Links.

00:48:15.085 --> 00:48:17.920
When we're used to writing web
apps, we put links in our

00:48:17.920 --> 00:48:18.320
apps, right?

00:48:18.320 --> 00:48:20.840
Like, you've got a link that
goes to here, you've got a

00:48:20.840 --> 00:48:22.630
link that goes to there.

00:48:22.630 --> 00:48:26.580
Links will open in a new Chrome
window if they go to

00:48:26.580 --> 00:48:28.470
somewhere external.

00:48:28.470 --> 00:48:29.960
So keep that in mind.

00:48:29.960 --> 00:48:32.855
That like hey, if you put a
link to HTTP whack whack

00:48:32.855 --> 00:48:35.780
Google.com, it's going to go and
open up a browser window.

00:48:35.780 --> 00:48:37.620
It's not going to
open up within

00:48:37.620 --> 00:48:39.980
your application window.

00:48:39.980 --> 00:48:45.370
So links to outside places will
open in a new window.

00:48:45.370 --> 00:48:49.243
By default, this one threw me
when I first did it, because I

00:48:49.243 --> 00:48:50.840
was like, why can't
I select anything?

00:48:50.840 --> 00:48:52.090
I'm trying select something.

00:48:54.450 --> 00:48:56.380
Think about most applications
that you have.

00:48:56.380 --> 00:48:58.880
You can't go and select most
of the text on there unless

00:48:58.880 --> 00:49:00.240
it's a text box.

00:49:00.240 --> 00:49:04.060
So just like an installed
application, you can't select

00:49:04.060 --> 00:49:06.700
the text in one of these
applications unless you

00:49:06.700 --> 00:49:12.070
specifically say this region,
this block here, the C S S div

00:49:12.070 --> 00:49:14.410
span, whatever, is selectable.

00:49:14.410 --> 00:49:18.140
So by default, we say
user select is none.

00:49:18.140 --> 00:49:22.320
We can't put iframes in there,
we got to use something called

00:49:22.320 --> 00:49:25.940
the browser tag instead.

00:49:25.940 --> 00:49:28.460
Again, that's a security
thing.

00:49:28.460 --> 00:49:32.050
Think about hey, we've got this
app, this great app, and

00:49:32.050 --> 00:49:33.450
we let you put an iframe in.

00:49:33.450 --> 00:49:37.050
Or you're rendering content from
somewhere else and they

00:49:37.050 --> 00:49:38.440
put an iframe in.

00:49:38.440 --> 00:49:43.230
All of a sudden you've just
opened this gigantic potential

00:49:43.230 --> 00:49:45.640
security vulnerability, because
other people could

00:49:45.640 --> 00:49:48.160
start putting anything they want
within your application.

00:49:48.160 --> 00:49:51.210
So we make it very explicit
what you can and can't put

00:49:51.210 --> 00:49:52.090
into those.

00:49:52.090 --> 00:49:55.740
You could create some sandboxed
iframes, and the

00:49:55.740 --> 00:49:58.590
browser tag is a
sandbox thing.

00:49:58.590 --> 00:50:02.520
If you didn't make it to Eric
and Mehi's session earlier,

00:50:02.520 --> 00:50:06.350
they showed some specific
demos around that.

00:50:06.350 --> 00:50:08.980
Kind of neat stuff.

00:50:08.980 --> 00:50:16.080
Local storage and Web SQL
are also turned off.

00:50:16.080 --> 00:50:17.660
Local storage is turned
off primarily

00:50:17.660 --> 00:50:20.580
for performance reasons.

00:50:20.580 --> 00:50:23.820
It's synchronous, so hey,
go put something

00:50:23.820 --> 00:50:26.420
into the data storage.

00:50:26.420 --> 00:50:28.790
OK, please wait while
I do that.

00:50:32.790 --> 00:50:34.350
Applications should be fast.

00:50:34.350 --> 00:50:37.750
Having synchronous things
happening is not exactly going

00:50:37.750 --> 00:50:38.850
to do that.

00:50:38.850 --> 00:50:40.600
We've also turned off Web SQL.

00:50:40.600 --> 00:50:44.160
It is a deprecated API.

00:50:44.160 --> 00:50:45.710
Will it ever go away
from the web?

00:50:45.710 --> 00:50:48.070
Probably not, but it's
not getting the

00:50:48.070 --> 00:50:49.550
attention it deserves.

00:50:49.550 --> 00:50:53.750
So instead, use something like
index db, which has a pretty

00:50:53.750 --> 00:51:00.880
strong following right now and
it's got good browser support.

00:51:00.880 --> 00:51:03.020
The FileSystem API is
another great one.

00:51:03.020 --> 00:51:06.840
It allows you to store big
files on the user's file

00:51:06.840 --> 00:51:10.680
system in a sandboxed
environment so you can't

00:51:10.680 --> 00:51:13.600
exactly go read their resume and
their user documents file

00:51:13.600 --> 00:51:15.280
or something like that.

00:51:15.280 --> 00:51:17.880
Or use the storage API that I
talked about earlier, so that

00:51:17.880 --> 00:51:20.370
you can go in and say hey, I
want to store something on the

00:51:20.370 --> 00:51:23.830
user's computer, I want it
synced up into the cloud, or

00:51:23.830 --> 00:51:28.070
maybe I just want it locally
in this one specific place.

00:51:28.070 --> 00:51:32.630
Most plug-ins and a number of
the Chrome extension things

00:51:32.630 --> 00:51:33.410
are disabled.

00:51:33.410 --> 00:51:39.010
So you can't go put some kind
of plug-in in your app, we

00:51:39.010 --> 00:51:40.280
stopped those from happening.

00:51:40.280 --> 00:51:44.220
We think the web can be built
without any plug-ins.

00:51:44.220 --> 00:51:46.770
You saw this morning in the
keynote, the Cirque du Soleil

00:51:46.770 --> 00:51:48.850
thing, there were no
plug-ins there.

00:51:48.850 --> 00:51:53.140
That was all HTML, C S S and a
bunch of divs and some images.

00:51:53.140 --> 00:51:56.660
So all that stuff can be done
without plug-ins, so let's

00:51:56.660 --> 00:51:58.670
start doing that.

00:51:58.670 --> 00:52:00.170
And finally--

00:52:00.170 --> 00:52:07.060
I know I'm guilty of it myself
sometime, you put in an alert

00:52:07.060 --> 00:52:08.320
or something like that
so you can do

00:52:08.320 --> 00:52:11.130
debugging modal dialogs.

00:52:11.130 --> 00:52:13.610
Users don't want
modal dialogs.

00:52:13.610 --> 00:52:17.680
So instead, use custom light
boxes, use other things so

00:52:17.680 --> 00:52:19.960
that the app can keep running.

00:52:19.960 --> 00:52:23.180
Because the one key thing
about modal dialogues is

00:52:23.180 --> 00:52:26.860
they're not just a modal for
what the user's doing, but

00:52:26.860 --> 00:52:29.130
they also stop the
app from running.

00:52:29.130 --> 00:52:31.255
So any of the JavaScript is just
sitting there going do da

00:52:31.255 --> 00:52:35.090
do da do, we're not
doing anything.

00:52:35.090 --> 00:52:37.960
I could stand up here for three
minutes and not say

00:52:37.960 --> 00:52:40.390
anything, and it's
just as boring.

00:52:40.390 --> 00:52:44.030
So you want your app
to keep running.

00:52:44.030 --> 00:52:45.280
So what's next?

00:52:47.780 --> 00:52:50.510
You could start using this and
start playing with this today

00:52:50.510 --> 00:52:53.270
to really build apps that break
out of the browser.

00:52:53.270 --> 00:52:56.100
I go back to those first
four points.

00:52:56.100 --> 00:52:58.550
They break out of the browser so
they don't have the address

00:52:58.550 --> 00:53:04.190
bar, so they don't look like a
browser-based application.

00:53:04.190 --> 00:53:09.750
Takes that power that we think
the web has, and really allows

00:53:09.750 --> 00:53:14.800
it to break out of there and
become a much bigger platform.

00:53:14.800 --> 00:53:17.990
The enhanced UI so that you can
control how applications

00:53:17.990 --> 00:53:22.140
look, how they feel, how they
open and close windows.

00:53:22.140 --> 00:53:25.490
They feel like they're
installed, that they work

00:53:25.490 --> 00:53:26.520
offline by default.

00:53:26.520 --> 00:53:29.740
This is the one I think I'm most
excited about, because it

00:53:29.740 --> 00:53:33.910
means that I can write stuff
that works offline and that

00:53:33.910 --> 00:53:36.510
people expect to work offline.

00:53:36.510 --> 00:53:40.460
I'm going to say, I'm going to
use it again, and some people

00:53:40.460 --> 00:53:41.120
will make fun of me.

00:53:41.120 --> 00:53:43.880
My mom doesn't expect web
apps to work offline.

00:53:43.880 --> 00:53:48.190
She's going to expect these to
work offline, so we got to

00:53:48.190 --> 00:53:49.990
start building them this way.

00:53:49.990 --> 00:53:53.160
And finally, really takes
advantage of the native

00:53:53.160 --> 00:53:55.730
capabilities through new APIs.

00:53:55.730 --> 00:53:58.600
I didn't get into it at all in
this session, but you should

00:53:58.600 --> 00:54:00.720
drop by the Chrome
booth afterwards.

00:54:00.720 --> 00:54:04.660
We actually have taken one of
these new packaged apps, used

00:54:04.660 --> 00:54:08.870
the Bluetooth API through this
packaged app, and we're

00:54:08.870 --> 00:54:11.320
controlling a LEGO Mindstorm
robot with it.

00:54:11.320 --> 00:54:15.210
So you've got access to
Bluetooth, USB, TCP, UDP.

00:54:15.210 --> 00:54:20.070
You've got great access to truly
the device that these

00:54:20.070 --> 00:54:22.630
applications are running on.

00:54:22.630 --> 00:54:24.590
But most importantly, you can
start testing this today.

00:54:24.590 --> 00:54:29.560
Go install the Chrome Canary
build and start playing,

00:54:29.560 --> 00:54:32.400
because there's a lot of
great stuff there.

00:54:32.400 --> 00:54:35.210
There's a bunch of really good
resources if you're looking to

00:54:35.210 --> 00:54:36.930
get started in this.

00:54:36.930 --> 00:54:40.740
The Chrome packaged apps
documentation, the URLs there,

00:54:40.740 --> 00:54:43.520
these slides will go up
online momentarily.

00:54:43.520 --> 00:54:49.500
But if you go to
developers.google.com/chrome,

00:54:49.500 --> 00:54:51.820
all of that stuff will
be linked from there.

00:54:51.820 --> 00:54:53.700
If you've got questions, you're
working on something

00:54:53.700 --> 00:54:56.900
and you're like why isn't
this working?

00:54:56.900 --> 00:54:59.620
Send an email to the
Chromium-Apps Mailing List.

00:54:59.620 --> 00:55:02.570
We all have a whole bunch of
great sample applications, so

00:55:02.570 --> 00:55:06.740
you can see how some of these
applications were built.

00:55:06.740 --> 00:55:09.770
And finally, the last one that
I put up on there because I

00:55:09.770 --> 00:55:11.200
thought it was really useful.

00:55:11.200 --> 00:55:13.850
Mike West, who's at the back
of the room, wrote a

00:55:13.850 --> 00:55:16.560
wonderfully fantastic
article that is an

00:55:16.560 --> 00:55:18.300
introduction to CSP.

00:55:18.300 --> 00:55:22.150
I gave you sort of a taste of
it today, but he goes into a

00:55:22.150 --> 00:55:26.600
lot more depth, additional
things it's useful for.

00:55:26.600 --> 00:55:30.550
And if you're going to use it
in a website, how you can go

00:55:30.550 --> 00:55:33.330
and adjust some of the different
permissions to

00:55:33.330 --> 00:55:37.160
restrict or loosen things
for websites.

00:55:37.160 --> 00:55:40.650
You can't change them in a
Chrome packaged app, but you

00:55:40.650 --> 00:55:43.740
can change them on the web.

00:55:43.740 --> 00:55:46.690
With that, I want to say thank
you guys very much for coming

00:55:46.690 --> 00:55:47.980
and sticking with me.

00:55:47.980 --> 00:55:53.090
I hope this was somewhat
interesting for you.

00:55:53.090 --> 00:55:55.170
The link to the slides is up
there, you could see it,

00:55:55.170 --> 00:55:59.850
goo.gl/5krvb.

00:55:59.850 --> 00:56:02.170
The slides are up there now.

00:56:02.170 --> 00:56:03.740
I'll say thank you,
I'll open it up

00:56:03.740 --> 00:56:04.990
to any of your questions.

00:56:11.916 --> 00:56:15.965
AUDIENCE: So how would I put
Analytics into an app?

00:56:15.965 --> 00:56:17.420
PETE LEPAGE: That's
a great question.

00:56:17.420 --> 00:56:19.750
So the question, I guess I
don't need to repeat them

00:56:19.750 --> 00:56:22.090
because we have microphones.

00:56:22.090 --> 00:56:25.360
We are working on an Analytics
API that will allow you to go

00:56:25.360 --> 00:56:28.640
and do that so that you can
just say hey, here's my

00:56:28.640 --> 00:56:34.990
Analytics UA string, and here's
the things I want to

00:56:34.990 --> 00:56:35.830
[? apply. ?]

00:56:35.830 --> 00:56:38.350
We're not ready with it yet, but
it will be coming at some

00:56:38.350 --> 00:56:39.462
point in the near future.

00:56:39.462 --> 00:56:41.822
AUDIENCE: Could I copy
the Analytics js

00:56:41.822 --> 00:56:43.240
files and package them?

00:56:43.240 --> 00:56:45.710
PETE LEPAGE: So the question
was, can I copy the Analytics

00:56:45.710 --> 00:56:48.760
js files and include them
in your package?

00:56:48.760 --> 00:56:49.490
You could try.

00:56:49.490 --> 00:56:51.230
My guess is it probably
won't work, I

00:56:51.230 --> 00:56:52.480
haven't tried it myself.

00:56:54.670 --> 00:56:56.690
It uses cookies, so
the answer is no.

00:56:56.690 --> 00:56:57.940
There you go.

00:57:00.174 --> 00:57:02.590
AUDIENCE: Is this stuff going
to work on Chrome

00:57:02.590 --> 00:57:03.980
for Android and iOS?

00:57:03.980 --> 00:57:08.370
PETE LEPAGE: So Chrome for
Android, Chrome for iOS, it's

00:57:08.370 --> 00:57:10.060
something we're definitely
thinking about.

00:57:10.060 --> 00:57:12.290
I think as Sundar said this
morning, it's something we

00:57:12.290 --> 00:57:14.165
want to bring there, it's
not there today.

00:57:17.430 --> 00:57:21.940
I want it just as soon as you
guys do, because hey, if I can

00:57:21.940 --> 00:57:24.640
write an app and have it work
everywhere, I'm a happy guy.

00:57:29.490 --> 00:57:32.890
AUDIENCE: When can I write
my Chrome app in Dart?

00:57:32.890 --> 00:57:34.900
PETE LEPAGE: When can you write
your Chrome app in Dart?

00:57:34.900 --> 00:57:40.760
I believe you can write your
Chrome app in Dart today.

00:57:40.760 --> 00:57:42.490
I'll give you two answers.

00:57:42.490 --> 00:57:45.020
One, you can write it in Dart
today, compile it down to

00:57:45.020 --> 00:57:48.420
JavaScript, done, you
can publish today.

00:57:48.420 --> 00:57:53.600
In Dart, I'm not sure how close
the Dartium browser is

00:57:53.600 --> 00:57:56.140
staying to the Chrome
dev channel.

00:57:56.140 --> 00:58:00.400
So whenever those guys are close
to whatever we have in

00:58:00.400 --> 00:58:01.880
dev today is then.

00:58:01.880 --> 00:58:06.083
AUDIENCE: The Manifest
by JSON had a

00:58:06.083 --> 00:58:08.418
JavaScript function call?

00:58:08.418 --> 00:58:11.480
PETE LEPAGE: Yes, so that's
a good question.

00:58:11.480 --> 00:58:13.826
I don't have an answer
to that.

00:58:13.826 --> 00:58:15.060
Do either of you guys
know offhand?

00:58:15.060 --> 00:58:16.868
MALE SPEAKER: Right now
they [INAUDIBLE].

00:58:24.570 --> 00:58:28.980
PETE LEPAGE: So right now
JavaScript only, but it is

00:58:28.980 --> 00:58:31.040
something that potentially
is coming?

00:58:31.040 --> 00:58:32.020
Is--

00:58:32.020 --> 00:58:33.620
yeah, well.

00:58:33.620 --> 00:58:38.466
So Mehi is one of
the developers.

00:58:38.466 --> 00:58:41.190
MEHI: Hi, I'm one of the
engineers on Chrome apps.

00:58:41.190 --> 00:58:46.210
So these APIs have a language
agnostic binding system, and

00:58:46.210 --> 00:58:48.870
the goal is to expose them
to Dart Native Client and

00:58:48.870 --> 00:58:49.880
JavaScript.

00:58:49.880 --> 00:58:52.830
Right now only the JavaScript
part is implemented, but

00:58:52.830 --> 00:58:54.380
coming soon those other two.

00:58:57.302 --> 00:58:58.180
PETE LEPAGE: Cool.

00:58:58.180 --> 00:58:59.430
Any other questions?

00:59:02.490 --> 00:59:04.860
All right, well that's
the way to finish.

00:59:04.860 --> 00:59:07.400
I'm sorry, I'm going to let
you out a minute and 20

00:59:07.400 --> 00:59:09.640
seconds early, I hope
you don't mind.

00:59:09.640 --> 00:59:12.590
Thanks guys, have a great
day, have a great I/O.

