WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:04.520
So one you still can't do in the Conference Central application is that you

00:00:04.520 --> 00:00:07.450
can't get the conferences that you have

00:00:07.450 --> 00:00:09.970
registered to attend. So now you're going to

00:00:09.970 --> 00:00:14.390
go ahead and add that functionality. You're going to be implementing the

00:00:14.390 --> 00:00:19.660
getConferencesToAttend method, which is going to return a collection.

00:00:20.900 --> 00:00:25.290
Of all the conferences that the user has registered

00:00:25.290 --> 00:00:29.260
to attend. This list will continue to include conferences

00:00:29.260 --> 00:00:31.970
that they've actually already attended, so it's not just

00:00:31.970 --> 00:00:33.750
the ones that they will attend but the ones

00:00:33.750 --> 00:00:36.260
that they registered to attend. You're going to work with the

00:00:36.260 --> 00:00:39.860
skeleton implementation of get conferences to attend. You can

00:00:39.860 --> 00:00:42.780
find this skeleton definition in the same file where you

00:00:42.780 --> 00:00:46.270
found the skeleton definition for register for conference. So

00:00:46.270 --> 00:00:49.730
you're going to go ahead and add the getConferencesToAttend method to

00:00:49.730 --> 00:00:54.110
Conference API and then you can implement the to do's. So

00:00:54.110 --> 00:00:58.570
as usual if the users null throw an authorization exception because

00:00:58.570 --> 00:01:00.900
we do need to know the user if we don't know

00:01:00.900 --> 00:01:03.020
who the person is then how can we find the Conferences

00:01:03.020 --> 00:01:05.290
that they want to go to. And then you're going to

00:01:05.290 --> 00:01:09.610
get the profile for the user. And again if the profile

00:01:09.610 --> 00:01:12.540
doesn't exist, got to throw another error. And then here's where

00:01:12.540 --> 00:01:15.130
you're going to do the real work. You're going to get

00:01:15.130 --> 00:01:20.570
a lit of the strings of the keys to attend, then you're going to have to iterate

00:01:20.570 --> 00:01:23.860
over that list and turn every keyString into

00:01:23.860 --> 00:01:27.030
an actual key, and then, you're going to have to

00:01:27.030 --> 00:01:30.670
load conferences for the keys and of course

00:01:30.670 --> 00:01:34.560
return the list of conferences. All right. So the

00:01:34.560 --> 00:01:36.140
first thing to do is to add the

00:01:36.140 --> 00:01:40.010
skeleton implementation of get conferences to attend to the

00:01:40.010 --> 00:01:43.080
conference API. And then, go ahead and fill

00:01:43.080 --> 00:01:46.070
in the to do's, to implement the function.

00:01:46.070 --> 00:01:47.820
So one more thing you might need to

00:01:47.820 --> 00:01:52.100
know, is that you can use ofy().load().keys, pass in

00:01:52.100 --> 00:01:55.950
a keysList, and then call a .values() to

00:01:55.950 --> 00:01:58.160
load the entities once you have a list of

00:01:58.160 --> 00:02:01.188
their keys. So go ahead and implement the

00:02:01.188 --> 00:02:05.095
getConferencesToAttend() method now. Then I have a question for

00:02:05.095 --> 00:02:07.710
you: why can't you just return the

00:02:07.710 --> 00:02:10.190
value of the profile's conference keys to attend

00:02:10.190 --> 00:02:12.810
property? After all, we have this property,

00:02:12.810 --> 00:02:15.940
conference keys to attend, so why can't get

00:02:15.940 --> 00:02:19.653
conferences to attend? Just simply return conference

00:02:19.653 --> 00:02:23.130
keys to attend. Is it because the profile

00:02:23.130 --> 00:02:27.110
stores conferences names, not keys? Or is it

00:02:27.110 --> 00:02:31.090
because the profile stores conference keys as strings?

00:02:31.090 --> 00:02:34.780
Or in fact you actually could do it, it's just a less efficient way to do it.

