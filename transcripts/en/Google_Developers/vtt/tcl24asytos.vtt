WEBVTT
Kind: captions
Language: en

00:00:05.430 --> 00:00:07.490
COREY GOLDFEDER: Hello, and
welcome to "Use What You Know,

00:00:07.490 --> 00:00:10.650
Building Web Apps and Services
with Google Apps Script." My

00:00:10.650 --> 00:00:11.690
name's Corey Goldfeder.

00:00:11.690 --> 00:00:13.720
I'm a software engineer on
Google Apps Script, and I'll

00:00:13.720 --> 00:00:14.930
be your host today.

00:00:14.930 --> 00:00:17.580
So before we begin, this session
has a little bit of an

00:00:17.580 --> 00:00:19.860
audience participation
interactive section.

00:00:19.860 --> 00:00:22.860
So if you have a laptop, tablet,
smartphone-- which

00:00:22.860 --> 00:00:26.270
should be everyone, except
for Googlers--

00:00:26.270 --> 00:00:27.380
please pull it out.

00:00:27.380 --> 00:00:29.220
And you'll have a chance to use
it, assuming you can get

00:00:29.220 --> 00:00:31.000
on the Wi-Fi.

00:00:31.000 --> 00:00:32.040
OK.

00:00:32.040 --> 00:00:33.870
So use what you know.

00:00:33.870 --> 00:00:35.110
You already know
a lot of stuff.

00:00:35.110 --> 00:00:36.380
You're sitting in this room.

00:00:36.380 --> 00:00:37.630
You're at a Google developer
conference.

00:00:37.630 --> 00:00:41.290
You probably know a few things
like HTML, CSS, and

00:00:41.290 --> 00:00:44.210
JavaScript, and JSON,
RSS, XML.

00:00:44.210 --> 00:00:46.940
DML These are not new words
to you, certainly.

00:00:46.940 --> 00:00:51.670
And what you don't know is how
to use this stuff in Google

00:00:51.670 --> 00:00:52.840
Apps Script.

00:00:52.840 --> 00:00:55.670
And you also don't know why
there is a dog, a napping dog,

00:00:55.670 --> 00:00:56.610
on my slide.

00:00:56.610 --> 00:00:58.870
So I want to solve the easy
mystery first, which is I

00:00:58.870 --> 00:01:00.320
really like dogs.

00:01:00.320 --> 00:01:01.830
But we're going to go
to the harder one.

00:01:01.830 --> 00:01:03.360
That's going to take
a full session.

00:01:03.360 --> 00:01:06.820
So settle in.

00:01:06.820 --> 00:01:07.100
OK.

00:01:07.100 --> 00:01:09.120
So a brief history of
Google Apps Script.

00:01:09.120 --> 00:01:11.650
The ghosts of I/O past, things
we've launched, particularly

00:01:11.650 --> 00:01:14.200
in reference to user
interfaces.

00:01:14.200 --> 00:01:16.980
So let me give a history of
where Apps Script came from.

00:01:16.980 --> 00:01:20.050
We started off embedding
inside of Google Apps,

00:01:20.050 --> 00:01:21.600
spreadsheets and sites,
primarily.

00:01:21.600 --> 00:01:24.490
You can manipulate your
Calendar, Gmail, Contacts--

00:01:24.490 --> 00:01:25.385
lots of other services.

00:01:25.385 --> 00:01:26.970
There's a whole long list.

00:01:26.970 --> 00:01:30.350
And you configure scripts in
response to events on time, on

00:01:30.350 --> 00:01:33.260
editing a spreadsheet, on the
Form submit, and so on.

00:01:33.260 --> 00:01:35.350
But we grew up to
be a bit more.

00:01:35.350 --> 00:01:37.500
We're also a platform for
building standalone web apps

00:01:37.500 --> 00:01:38.420
and services.

00:01:38.420 --> 00:01:41.750
You can build a script to be
deployed at its own URL.

00:01:41.750 --> 00:01:44.260
It can be published directly
to the Chrome Web Store.

00:01:44.260 --> 00:01:46.340
We launched that integration
yesterday.

00:01:46.340 --> 00:01:48.640
And it can just be authorized
to you or to your domain.

00:01:48.640 --> 00:01:50.470
If you don't want it to be a
public script, you can write

00:01:50.470 --> 00:01:53.380
your own little programs that
run on the Google cloud and

00:01:53.380 --> 00:01:55.910
our web apps, just for you, or
just your friends, or just

00:01:55.910 --> 00:01:57.760
your domain.

00:01:57.760 --> 00:02:03.947
So, in 2010, at Google I/O, we
launched UiApp, which is based

00:02:03.947 --> 00:02:05.440
on the Google Web Toolkit.

00:02:05.440 --> 00:02:07.130
It's a cross-browser
widget library

00:02:07.130 --> 00:02:08.570
for Google Apps Script.

00:02:08.570 --> 00:02:11.510
Easy to write, pretty easy to
understand, and the key is you

00:02:11.510 --> 00:02:12.970
don't have too maintain
separate

00:02:12.970 --> 00:02:13.950
client and server code.

00:02:13.950 --> 00:02:17.270
You write one script that has
both your client parts, your

00:02:17.270 --> 00:02:19.540
server parts, it all
gets managed.

00:02:19.540 --> 00:02:21.720
If you've done this before, or
if you've just used Google Web

00:02:21.720 --> 00:02:23.580
Toolkit, this will look
fairly familiar.

00:02:23.580 --> 00:02:24.790
You create an application.

00:02:24.790 --> 00:02:26.230
Here, we're going
to add a label.

00:02:26.230 --> 00:02:28.780
And then, serve the app
and a little bit

00:02:28.780 --> 00:02:29.890
of Apps Script lingo.

00:02:29.890 --> 00:02:32.620
You always start a web app with
a function called doGet.

00:02:32.620 --> 00:02:32.960
OK.

00:02:32.960 --> 00:02:35.590
So this is a very basic UiApp.

00:02:35.590 --> 00:02:38.030
In 2011, we said, well,
UiApp, sometimes it

00:02:38.030 --> 00:02:38.890
takes a lot of code.

00:02:38.890 --> 00:02:40.450
So let's let you draw
an interface.

00:02:40.450 --> 00:02:42.095
We launched the GUI Builder.

00:02:42.095 --> 00:02:44.250
It's a What You See Is
What You Get user

00:02:44.250 --> 00:02:46.450
interface Builder for UiApp.

00:02:46.450 --> 00:02:48.050
You can build interfaces without
writing anything.

00:02:48.050 --> 00:02:50.330
And it's compatible with UiApp,
both in the sense that

00:02:50.330 --> 00:02:53.100
you can embed these things
inside of a UiApp.

00:02:53.100 --> 00:02:56.080
You can use UiApp code
to manipulate or

00:02:56.080 --> 00:02:57.100
extend one of these.

00:02:57.100 --> 00:02:59.855
It really was generating the
same stuff as UiApp.

00:02:59.855 --> 00:03:02.455
So if you're following along,
probably this year, we're

00:03:02.455 --> 00:03:04.550
going to launch something
related to user interfaces.

00:03:04.550 --> 00:03:06.400
It seems like a good bet,
particularly because we

00:03:06.400 --> 00:03:08.520
launched it yesterday.

00:03:08.520 --> 00:03:11.950
So what I hear a lot from you
guys is, sometimes I just want

00:03:11.950 --> 00:03:13.560
to write HTML.

00:03:13.560 --> 00:03:14.220
OK.

00:03:14.220 --> 00:03:15.270
So we're listening.

00:03:15.270 --> 00:03:16.710
Sometimes you don't want
to write UiApp.

00:03:16.710 --> 00:03:19.200
You want to go down to the
metal, where metal

00:03:19.200 --> 00:03:20.910
as defined as HTML.

00:03:20.910 --> 00:03:22.630
And just write what
you want it to be.

00:03:22.630 --> 00:03:25.710
So I'm really excited to be
introducing HTML service.

00:03:25.710 --> 00:03:27.040
I'm a little less excited,
because my

00:03:27.040 --> 00:03:28.540
PM leaked it yesterday.

00:03:28.540 --> 00:03:31.450
But I'm still very excited to
be introducing HTML service,

00:03:31.450 --> 00:03:33.800
which is a totally new direction
for writing web apps

00:03:33.800 --> 00:03:35.080
in Apps Script.

00:03:35.080 --> 00:03:37.390
Rather than using our widget
library, you can write

00:03:37.390 --> 00:03:39.900
standard HTML, JavaScript,
CSS.

00:03:39.900 --> 00:03:42.170
You can use jQuery
and jQuery UI.

00:03:42.170 --> 00:03:43.600
You don't have to, but
they are supported.

00:03:43.600 --> 00:03:44.930
You can go for it.

00:03:44.930 --> 00:03:47.320
And you have a built-in API to
run functions in the Google

00:03:47.320 --> 00:03:48.250
Apps Script server.

00:03:48.250 --> 00:03:50.740
So now, you can actually write
the browser application you

00:03:50.740 --> 00:03:53.590
wanted to, directly the way you
wanted to, and still not

00:03:53.590 --> 00:03:55.770
lose any of that awesome Google
Apps Script power,

00:03:55.770 --> 00:03:58.850
where you can call all these
APIs, no need to go to a

00:03:58.850 --> 00:04:00.230
dashboard, enable things.

00:04:00.230 --> 00:04:04.730
Just start using everything in
Google, and build your app.

00:04:04.730 --> 00:04:04.960
OK.

00:04:04.960 --> 00:04:08.650
So let's take a quick look at
what this actually looks like.

00:04:08.650 --> 00:04:09.420
So a few changes.

00:04:09.420 --> 00:04:12.910
We're going to make a little
app called My HTML App--

00:04:12.910 --> 00:04:14.430
wonder why.

00:04:14.430 --> 00:04:16.980
And the first thing you'll
notice, it says, code dot gs.

00:04:16.980 --> 00:04:18.860
Because we now have two
types of files--

00:04:18.860 --> 00:04:23.510
HTML files, dot HTML, and script
files for Google Apps

00:04:23.510 --> 00:04:24.790
Script dot gs.

00:04:24.790 --> 00:04:25.090
Great.

00:04:25.090 --> 00:04:27.590
So in the HTML file, we're going
to write a little bit of

00:04:27.590 --> 00:04:29.800
HTML, just a little Hello
World example.

00:04:29.800 --> 00:04:34.860
And I'll make a bold to prove
that it's actually HTML, which

00:04:34.860 --> 00:04:36.440
is hard to do.

00:04:36.440 --> 00:04:40.680
So save it.

00:04:40.680 --> 00:04:42.830
We're going to write a little
function, the standard Apps

00:04:42.830 --> 00:04:46.310
Script function to serve
up a web app.

00:04:46.310 --> 00:04:49.720
So we're going to load
that file by name.

00:04:49.720 --> 00:04:53.090
As I said before, we create
the function called doGet.

00:04:53.090 --> 00:04:54.440
That's the entire web app.

00:04:54.440 --> 00:04:57.350
It's going to serve
what we just made.

00:04:57.350 --> 00:04:58.750
So manage your version.

00:04:58.750 --> 00:05:00.270
We always have to publish
a version before

00:05:00.270 --> 00:05:02.210
we make a web app.

00:05:02.210 --> 00:05:03.460
I made a page.

00:05:05.560 --> 00:05:07.250
And now we deploy.

00:05:07.250 --> 00:05:09.890
Deploying in Google Apps
Script is always a joy.

00:05:09.890 --> 00:05:11.420
It's a few clicks.

00:05:11.420 --> 00:05:13.600
If it runs as you, or as a
person accessing it, you can

00:05:13.600 --> 00:05:15.480
choose who has access to it.

00:05:15.480 --> 00:05:17.830
I chose that it's for
me and only for me.

00:05:17.830 --> 00:05:18.990
No one else can access it.

00:05:18.990 --> 00:05:22.940
I get a URL, and there is,
hopefully, some HTML.

00:05:22.940 --> 00:05:25.240
Google Apps Script can
now serve HTML.

00:05:25.240 --> 00:05:27.880
"Hello World." OK.

00:05:27.880 --> 00:05:30.330
[APPLAUSE]

00:05:30.330 --> 00:05:32.730
COREY GOLDFEDER: So if I
wanted to, I could have

00:05:32.730 --> 00:05:33.990
published this to the
Chrome Web Store.

00:05:33.990 --> 00:05:37.610
But I suspect that there is a
lack of a need for another

00:05:37.610 --> 00:05:40.020
"Hello World" app in the
Chrome Web Store.

00:05:40.020 --> 00:05:43.820
So let's build something a
little more interesting with

00:05:43.820 --> 00:05:44.410
this stuff.

00:05:44.410 --> 00:05:45.890
And I'm going to invert
the normal

00:05:45.890 --> 00:05:47.380
structure of these talks.

00:05:47.380 --> 00:05:49.450
Rather than build it up
incrementally, I'm going to

00:05:49.450 --> 00:05:52.020
show you a whole thing, and then
see what your interests

00:05:52.020 --> 00:05:52.800
are, hopefully.

00:05:52.800 --> 00:05:55.030
And then we'll take it apart
and see how it was built.

00:05:55.030 --> 00:05:57.070
So let's build something
fun with Gmail.

00:05:57.070 --> 00:06:00.520
So I'm going to play another
video for you, because I don't

00:06:00.520 --> 00:06:02.920
trust the Wi-Fi here anymore
than you do.

00:06:02.920 --> 00:06:04.410
So I have my email inbox.

00:06:04.410 --> 00:06:05.710
There's a lot of
messages there.

00:06:05.710 --> 00:06:08.290
I wish I understood
the gist of what's

00:06:08.290 --> 00:06:09.470
going on in my inbox.

00:06:09.470 --> 00:06:13.280
I just, at a glance, see what
people are sending me.

00:06:13.280 --> 00:06:15.741
Luckily, I've created
a script.

00:06:15.741 --> 00:06:18.740
So I go to script.google.com.

00:06:18.740 --> 00:06:23.570
This script, it's about 30 lines
of Apps Script code.

00:06:23.570 --> 00:06:25.350
You can see it uses Gmail App.

00:06:25.350 --> 00:06:29.240
It has about 100 lines of
jQuery, jQuery UI, CSS,

00:06:29.240 --> 00:06:29.710
JavaScript.

00:06:29.710 --> 00:06:31.370
And we'll do a quick run
through of this at

00:06:31.370 --> 00:06:32.280
the end of the talk.

00:06:32.280 --> 00:06:33.100
I just want to show it to you.

00:06:33.100 --> 00:06:34.840
It's not very big.

00:06:34.840 --> 00:06:35.460
We're going to deploy this.

00:06:35.460 --> 00:06:37.320
I've already deployed it-- so
it's already a version--

00:06:37.320 --> 00:06:42.470
to get the URL And here is a tag
cloud, live off my Gmail.

00:06:42.470 --> 00:06:44.120
I have it updating
every 30 seconds.

00:06:44.120 --> 00:06:46.570
But I can click on a tag,
and see the threads.

00:06:46.570 --> 00:06:50.710
They load in asynchronously,
AJAX.

00:06:50.710 --> 00:06:54.850
I can click on a link to
the real Gmail message.

00:06:54.850 --> 00:06:57.760
So this is a really cool
Understanding Your Gmail app

00:06:57.760 --> 00:07:00.250
built in a tiny amount
of Apps Script.

00:07:00.250 --> 00:07:00.670
OK.

00:07:00.670 --> 00:07:03.460
So I'm going to do something
exceedingly foolish right now,

00:07:03.460 --> 00:07:06.180
which is, I'm going to give you
all the URL for this app.

00:07:06.180 --> 00:07:11.050
It's goo dot gl slash lowercase
x, capital A,

00:07:11.050 --> 00:07:13.470
lowercase a, capital O, capital
R. Leave it up there

00:07:13.470 --> 00:07:14.820
for a second.

00:07:14.820 --> 00:07:17.910
And this is published so that
it runs as you, the

00:07:17.910 --> 00:07:19.010
person using it.

00:07:19.010 --> 00:07:20.620
So it's going to ask for
your authorization.

00:07:20.620 --> 00:07:22.500
And the reason I'm giving it
to you this way, and not

00:07:22.500 --> 00:07:24.180
through the Chrome Web Store,
et cetera, is this is

00:07:24.180 --> 00:07:25.340
definitely a demo app.

00:07:25.340 --> 00:07:26.740
It may not work.

00:07:26.740 --> 00:07:29.050
I threw this together over
a course of two hours.

00:07:29.050 --> 00:07:31.630
So if it breaks, I don't
want this littering

00:07:31.630 --> 00:07:32.740
the Chrome Web Store.

00:07:32.740 --> 00:07:36.820
So I'm going to do something
even stupider right now.

00:07:36.820 --> 00:07:38.920
So I'm going to give you the
email address that I was

00:07:38.920 --> 00:07:42.100
using, which is
appsscriptio@gmail.com--

00:07:42.100 --> 00:07:44.140
appsscript, there are
two S's in there,

00:07:44.140 --> 00:07:46.170
appsscriptio@gmail.com.

00:07:46.170 --> 00:07:48.610
Please, over the next 20
minutes, message me.

00:07:48.610 --> 00:07:51.070
Send anything you like with
the following caveats.

00:07:51.070 --> 00:07:52.610
Keep it clean.

00:07:52.610 --> 00:07:54.170
And realize that it might
show up on the

00:07:54.170 --> 00:07:55.490
screen during my demo.

00:07:55.490 --> 00:07:58.080
And so, it might be on the
YouTube video, et cetera.

00:07:58.080 --> 00:08:00.260
So if you do not want
your email to be

00:08:00.260 --> 00:08:01.940
visible, don't send it.

00:08:01.940 --> 00:08:02.280
OK.

00:08:02.280 --> 00:08:04.210
So I'm leaving this up
for another second.

00:08:04.210 --> 00:08:06.420
You can try the app, yourself,
right now.

00:08:06.420 --> 00:08:10.010
goo dot gl, lowercase x,
capital A, lowercase a,

00:08:10.010 --> 00:08:13.160
capital O, capital R. And you
can send something to my

00:08:13.160 --> 00:08:15.390
account, where we'll look at
my cloud at the end at

00:08:15.390 --> 00:08:16.640
appsscriptio@gmail.com.

00:08:18.160 --> 00:08:18.370
OK.

00:08:18.370 --> 00:08:21.000
I hope, now, you see that you
can build really cool stuff

00:08:21.000 --> 00:08:22.610
with Apps Script in
HTML service.

00:08:22.610 --> 00:08:24.360
So let's take a dive
into this.

00:08:24.360 --> 00:08:26.540
Because this is an advanced
session, and we're going to

00:08:26.540 --> 00:08:28.380
see some code.

00:08:28.380 --> 00:08:29.120
Use what you know.

00:08:29.120 --> 00:08:30.240
This is our credo.

00:08:30.240 --> 00:08:32.909
The technologies you know,
standard HTML, CSS, and

00:08:32.909 --> 00:08:33.890
JavaScript--

00:08:33.890 --> 00:08:35.820
optionally, jQuery
and jQuery UI.

00:08:35.820 --> 00:08:37.059
A lot of other plug-ins
will work.

00:08:37.059 --> 00:08:39.900
I keep stressing jQuery and
jQuery UI, because we actually

00:08:39.900 --> 00:08:40.595
test those libraries.

00:08:40.595 --> 00:08:42.669
And that's part of our
test suite, so we

00:08:42.669 --> 00:08:43.650
know those will work.

00:08:43.650 --> 00:08:45.700
But there are many other
JavaScript libraries that you

00:08:45.700 --> 00:08:47.180
can just plug in, and it
will work with this.

00:08:47.180 --> 00:08:50.130
And at the end of the session
we'll see why something would

00:08:50.130 --> 00:08:54.990
or wouldn't work and what
you can expect to work.

00:08:54.990 --> 00:08:57.410
And you still get everything
that you know an love about

00:08:57.410 --> 00:08:57.880
Apps Script.

00:08:57.880 --> 00:08:59.700
You get the authentication
with Google Accounts.

00:08:59.700 --> 00:09:03.810
So you can say, only for these
people, only for this domain.

00:09:03.810 --> 00:09:06.700
You get access to all the Apps
Script APIs that use Gmail

00:09:06.700 --> 00:09:07.870
app, in that example.

00:09:07.870 --> 00:09:09.320
You'll get painless
deployment.

00:09:09.320 --> 00:09:12.360
A click or two, and your
web app is ready to go.

00:09:12.360 --> 00:09:13.780
And you get embedding
in Google Apps.

00:09:13.780 --> 00:09:15.300
So I didn't demo this yet.

00:09:15.300 --> 00:09:18.820
But anywhere you could show a
UiApp in the past, you can now

00:09:18.820 --> 00:09:20.160
show also in HTML service.

00:09:20.160 --> 00:09:23.470
Which means you can have HTML
with jQuery embedded in sites

00:09:23.470 --> 00:09:24.660
and embedded in spreadsheets.

00:09:24.660 --> 00:09:26.850
You can open up a dialog
in spreadsheets, with a

00:09:26.850 --> 00:09:29.570
full-blown web app that you
wrote, that is living inside a

00:09:29.570 --> 00:09:30.820
spreadsheet.

00:09:33.410 --> 00:09:34.550
So how do I call the server?

00:09:34.550 --> 00:09:37.050
Because it's really cool that
I can generate this HTML.

00:09:37.050 --> 00:09:38.090
It's pretty on the client.

00:09:38.090 --> 00:09:39.970
But it's not really interesting,
unless I can make

00:09:39.970 --> 00:09:42.180
calls back to the Google
Apps Script server

00:09:42.180 --> 00:09:45.490
and make it do things.

00:09:45.490 --> 00:09:45.770
OK.

00:09:45.770 --> 00:09:46.700
So introducing--

00:09:46.700 --> 00:09:49.590
this, I'm really excited about--
the google.script API.

00:09:49.590 --> 00:09:51.970
And this is a real big change
for us, because this is the

00:09:51.970 --> 00:09:56.130
first time Apps Script is
launching a client-side API.

00:09:56.130 --> 00:09:58.400
This does not live
on our servers.

00:09:58.400 --> 00:09:59.710
This is going to live
in your browser.

00:09:59.710 --> 00:10:04.800
And you can call our servers
with this and run scripts.

00:10:04.800 --> 00:10:06.680
So you could make these calls
through the app script server

00:10:06.680 --> 00:10:07.900
from your client code.

00:10:07.900 --> 00:10:09.605
You not to worry about
AJAX and XHR.

00:10:09.605 --> 00:10:11.310
And if you don't know what
those words are, great,

00:10:11.310 --> 00:10:12.760
because you have to
worry about them.

00:10:12.760 --> 00:10:13.980
We're going to do all
that for you.

00:10:13.980 --> 00:10:16.630
You're going to make a function
call on the client.

00:10:16.630 --> 00:10:18.860
Magically, it will happen
on the server.

00:10:18.860 --> 00:10:20.310
And the response
will come back.

00:10:20.310 --> 00:10:23.550
And that's all you are going
to have to know about.

00:10:23.550 --> 00:10:25.590
So here's a basic example.

00:10:25.590 --> 00:10:28.020
I write a function on the server
called doSomething,

00:10:28.020 --> 00:10:30.900
which logs that it, in
fact, did something.

00:10:30.900 --> 00:10:33.090
And then I'm going to write a
function on the client, in my

00:10:33.090 --> 00:10:34.290
browser code.

00:10:34.290 --> 00:10:35.545
So inside a  tag,
google.script.run.doSomething.

00:10:38.710 --> 00:10:40.660
And that's going to call the
function on the server.

00:10:40.660 --> 00:10:43.150
I just want to point out, right
now, the structure of

00:10:43.150 --> 00:10:43.810
the slides.

00:10:43.810 --> 00:10:45.910
Because this is going to be the
rest of the presentation.

00:10:45.910 --> 00:10:48.300
On the top, I have some Google
Apps Script code, that's

00:10:48.300 --> 00:10:48.880
server code.

00:10:48.880 --> 00:10:51.250
That would be in
a code.gs file.

00:10:51.250 --> 00:10:54.040
On the bottom, I have some
HTML and JavaScript code.

00:10:54.040 --> 00:10:55.710
That would be in an HTML file.

00:10:55.710 --> 00:10:57.590
And since we're going to be
talking about the interaction

00:10:57.590 --> 00:11:01.380
of these two files, virtually
every slide will have some

00:11:01.380 --> 00:11:06.170
Google Apps Script code
and some HTML code.

00:11:06.170 --> 00:11:07.880
So you can do more than
just call a function.

00:11:07.880 --> 00:11:10.660
You can pass information from
the client to the server.

00:11:10.660 --> 00:11:13.410
Here, I have a function,
getSubject, which in our Gmail

00:11:13.410 --> 00:11:15.400
app might have been
useful to get the

00:11:15.400 --> 00:11:17.550
subject of the message.

00:11:17.550 --> 00:11:19.990
On the client, I can call it
with a string, "a gmail thread

00:11:19.990 --> 00:11:22.360
id." Hopefully, it would be
an actual Gmail thread ID.

00:11:22.360 --> 00:11:24.840
And on the server, I will
have that parameter.

00:11:24.840 --> 00:11:25.850
Now it's not just strings.

00:11:25.850 --> 00:11:29.090
You could pass Booleans,
numbers, arrays, objects.

00:11:29.090 --> 00:11:31.520
Basically, anything that can
be converted to JSON

00:11:31.520 --> 00:11:33.330
you can send up.

00:11:33.330 --> 00:11:34.850
And you don't actually have
to do the conversion.

00:11:34.850 --> 00:11:37.010
You don't have to stringify
it and unstringify.

00:11:37.010 --> 00:11:38.020
We will do that for you.

00:11:38.020 --> 00:11:42.890
So you can just add a send any
object up, and it will get

00:11:42.890 --> 00:11:43.940
copied to the server.

00:11:43.940 --> 00:11:46.310
I'm not going to show here,
because it's a little bit too

00:11:46.310 --> 00:11:47.330
deep, even for this session.

00:11:47.330 --> 00:11:50.520
But you can even send up files
through a file upload.

00:11:50.520 --> 00:11:52.190
So you can send up
an entire files.

00:11:52.190 --> 00:11:54.750
They get uploaded to the
server in an Ajaxy way.

00:11:54.750 --> 00:11:58.770
You can use them, save them to
your drive, save them to a

00:11:58.770 --> 00:12:02.320
site, email them, and
return a response.

00:12:02.320 --> 00:12:03.370
And that's really cool.

00:12:03.370 --> 00:12:07.940
It's in the user guide, which
was updated today as well.

00:12:07.940 --> 00:12:09.820
You can return a value
from your functions.

00:12:09.820 --> 00:12:11.240
So here, I've filled in the top

00:12:11.240 --> 00:12:12.840
function, no longer a comment.

00:12:12.840 --> 00:12:13.730
GmailApp.

00:12:13.730 --> 00:12:15.620
We're going to getThreads
for that threadId.

00:12:15.620 --> 00:12:18.470
And The First Message
is Subject.

00:12:18.470 --> 00:12:20.790
See, that's the subject that
gets shown in Gmail in the

00:12:20.790 --> 00:12:21.780
user interface.

00:12:21.780 --> 00:12:23.720
So I'm returning it.

00:12:23.720 --> 00:12:26.020
But how does it get handled
in the client?

00:12:26.020 --> 00:12:27.850
Because if you guys know
anything about JavaScript,

00:12:27.850 --> 00:12:29.900
JavaScript is single threaded
on the client.

00:12:29.900 --> 00:12:33.260
Which means that if we waited
for the server to respond with

00:12:33.260 --> 00:12:35.770
the answer, your entire browser
would freeze while

00:12:35.770 --> 00:12:36.810
that was going on.

00:12:36.810 --> 00:12:37.890
That's not a good idea.

00:12:37.890 --> 00:12:40.650
So what happens is when you
make a function call, in

00:12:40.650 --> 00:12:43.560
google.script, it's
asynchronous.

00:12:43.560 --> 00:12:45.410
So the function gets called
to the server.

00:12:45.410 --> 00:12:48.380
And then your code continues
where it was.

00:12:48.380 --> 00:12:51.030
You can specify a Handler,
a Success Handler.

00:12:51.030 --> 00:12:52.730
Here's what I've done here.

00:12:52.730 --> 00:12:55.550
I specified a Success Handler
called myHandler.

00:12:55.550 --> 00:12:57.480
And when the server is finished,
if it returned a

00:12:57.480 --> 00:13:03.030
value, it will call your Handler
with that value.

00:13:03.030 --> 00:13:04.310
And here's an example
of a Handler.

00:13:04.310 --> 00:13:07.620
So this Handler would just
alert, pop up a browser

00:13:07.620 --> 00:13:10.690
message box saying, "The subject
was," and the subject

00:13:10.690 --> 00:13:11.160
of this thread.

00:13:11.160 --> 00:13:15.630
But this is actually a full
use case of google.script.

00:13:15.630 --> 00:13:18.420
I have a function I'm calling
on the server.

00:13:18.420 --> 00:13:19.570
It returns a value.

00:13:19.570 --> 00:13:21.090
So we get the full round trip.

00:13:21.090 --> 00:13:23.560
And it gets handled by a
function on the client.

00:13:23.560 --> 00:13:25.910
Now, you can do more than
that if your server

00:13:25.910 --> 00:13:27.140
function throws an error.

00:13:27.140 --> 00:13:29.900
So here I'm using x.y
X doesn't exist.

00:13:29.900 --> 00:13:31.210
Y doesn't exist.

00:13:31.210 --> 00:13:33.460
Easiest way I know, in three
characters, to produce a

00:13:33.460 --> 00:13:35.260
Reference Error in JavaScript.

00:13:35.260 --> 00:13:37.680
So that's going to
cause a problem.

00:13:37.680 --> 00:13:40.770
And on the client side, I can
add a FailureHandler, which

00:13:40.770 --> 00:13:42.830
will get an error object
with the same

00:13:42.830 --> 00:13:44.120
message from the server.

00:13:44.120 --> 00:13:46.700
So we'll get that Reference
Error on the client, and they

00:13:46.700 --> 00:13:47.920
can do something with it.

00:13:47.920 --> 00:13:50.470
You can mix and match
SuccessHandler,

00:13:50.470 --> 00:13:50.720
FailureHandler.

00:13:50.720 --> 00:13:50.920
Handler.

00:13:50.920 --> 00:13:52.750
There are other options
as well.

00:13:52.750 --> 00:13:55.080
And you can look, again, in our
user guide for a deeper

00:13:55.080 --> 00:13:57.020
dive on the things you can
do these functions.

00:13:57.020 --> 00:13:58.210
But it's really straightforward.

00:13:58.210 --> 00:14:00.750
So I just want to go through
this really clearly.

00:14:00.750 --> 00:14:03.030
google.script.run--

00:14:03.030 --> 00:14:04.800
you can add Success and
FailureHandlers--

00:14:04.800 --> 00:14:07.210
dot function name
in your script.

00:14:07.210 --> 00:14:09.200
Whatever function names
are in your script

00:14:09.200 --> 00:14:10.070
exist on the client.

00:14:10.070 --> 00:14:14.070
You can just call them, as if
they were client functions.

00:14:14.070 --> 00:14:15.250
OK.

00:14:15.250 --> 00:14:17.380
Now, sometimes I hear,
that's cool.

00:14:17.380 --> 00:14:19.240
I can create web pages.

00:14:19.240 --> 00:14:20.180
I can call back.

00:14:20.180 --> 00:14:22.640
But I want to create
dynamic HTML.

00:14:22.640 --> 00:14:25.860
I want my page to actually
have content in it that's

00:14:25.860 --> 00:14:27.010
driven by the script.

00:14:27.010 --> 00:14:28.180
And we've got your back.

00:14:28.180 --> 00:14:31.505
So introducing Google Apps
Script Templates.

00:14:31.505 --> 00:14:33.820
And this I'm more than
super excited about.

00:14:33.820 --> 00:14:36.330
This is, I think the most
exciting thing for me today.

00:14:36.330 --> 00:14:38.020
Google Apps Script Templates--

00:14:38.020 --> 00:14:42.710
I want a HTML page, let's say,
with data from a spreadsheet.

00:14:42.710 --> 00:14:46.190
And I could generate it in
code, but that's a pain.

00:14:46.190 --> 00:14:48.280
So what I'm going to
do, again, is use

00:14:48.280 --> 00:14:49.700
a templating language.

00:14:49.700 --> 00:14:53.390
If you have used PHP, ASP,
JSP, embedded JavaScript,

00:14:53.390 --> 00:14:55.430
there's a Wikipedia page that
lists all of these.

00:14:55.430 --> 00:14:57.000
I think there's 200 of them.

00:14:57.000 --> 00:14:58.910
Anything with scriptlet tags--

00:14:58.910 --> 00:15:01.110
this is going to look really
familiar to you.

00:15:01.110 --> 00:15:03.660
You can mix and match JavaScript
directly into your

00:15:03.660 --> 00:15:06.480
HTML with the very
industry-standard

00:15:06.480 --> 00:15:07.770
scriptlet-style tag.

00:15:07.770 --> 00:15:10.510
So you do a tag that opens
with a question mark.

00:15:10.510 --> 00:15:11.750
And closes with a
question mark.

00:15:11.750 --> 00:15:13.500
And in between, is JavaScript.

00:15:13.500 --> 00:15:16.730
And that JavaScript is going to
manipulate the HTML inside.

00:15:16.730 --> 00:15:21.180
So if you have a for loop, the
HTML inside that loop will be

00:15:21.180 --> 00:15:25.350
output every time in that for
loop, just like PHP, or ASP,

00:15:25.350 --> 00:15:27.950
or JSP, or everything
like that.

00:15:27.950 --> 00:15:29.200
A little grace note.

00:15:29.200 --> 00:15:31.980
You may notice that I've
italicized the code that's

00:15:31.980 --> 00:15:33.630
inside the scriptlet tags.

00:15:33.630 --> 00:15:36.250
Because on the Google Apps
Script editor, you'll

00:15:36.250 --> 00:15:37.000
actually see that.

00:15:37.000 --> 00:15:39.770
So we italicize code that gets
thrown on the server.

00:15:39.770 --> 00:15:41.840
And we don't italicize
client-side scripts.

00:15:41.840 --> 00:15:45.280
So you can, at a glance, tell
which parts of your app are

00:15:45.280 --> 00:15:47.480
running on the server and
dynamically generating stuff,

00:15:47.480 --> 00:15:51.030
and which parts of your app
are running on the client.

00:15:51.030 --> 00:15:52.160
So I think that's pretty cool.

00:15:52.160 --> 00:15:54.870
I think it's cool enough
to actually do a demo.

00:15:54.870 --> 00:15:57.530
Beforehand, I just want to go
through the three things you

00:15:57.530 --> 00:15:59.820
need to know about Google
Apps Script Templates.

00:15:59.820 --> 00:16:01.430
First is a scriptlet tag.

00:16:01.430 --> 00:16:03.040
We call it a standard
scriptlet.

00:16:03.040 --> 00:16:05.380
That's the question mark
question mark tag.

00:16:05.380 --> 00:16:06.270
And that just adds code.

00:16:06.270 --> 00:16:09.025
So if you want to add for loop
around some HTML, that's the

00:16:09.025 --> 00:16:09.690
way you do it.

00:16:09.690 --> 00:16:12.170
The second one should be
very familiar also.

00:16:12.170 --> 00:16:13.730
It's the question
mark equals tag.

00:16:13.730 --> 00:16:16.800
We call that a printing
scriptlet, because it runs

00:16:16.800 --> 00:16:19.280
some code and also prints out
a value into the stream.

00:16:19.280 --> 00:16:22.460
So this is the easiest way to
get a value from your server

00:16:22.460 --> 00:16:25.460
code into your dynamically
created page.

00:16:25.460 --> 00:16:28.100
And finally, there's a force
printing scriptlet, which does

00:16:28.100 --> 00:16:28.610
something about escaping.

00:16:28.610 --> 00:16:31.040
And I'm going to not
explain that now.

00:16:31.040 --> 00:16:32.080
Let's show you the demo.

00:16:32.080 --> 00:16:33.890
And then after the demo, it
should be a little easier to

00:16:33.890 --> 00:16:36.920
explain what a force printing
scriptlet is.

00:16:36.920 --> 00:16:37.640
So let's play this.

00:16:37.640 --> 00:16:38.760
I have a spreadsheet.

00:16:38.760 --> 00:16:41.070
And in the spreadsheet, I have
the things I like and don't

00:16:41.070 --> 00:16:42.700
like about various
days of the week.

00:16:42.700 --> 00:16:44.210
For example, Friday.

00:16:44.210 --> 00:16:45.730
I like the fact that it's
before Saturday.

00:16:45.730 --> 00:16:49.870
I don't like the fact that
it's after Thursday.

00:16:49.870 --> 00:16:51.520
Here's a really simple
function.

00:16:51.520 --> 00:16:52.840
I'm going to zoom
in a little bit.

00:16:52.840 --> 00:16:53.930
I use HTMLService.

00:16:53.930 --> 00:16:56.460
I'm going to create a template
from a file.

00:16:56.460 --> 00:16:58.865
I'm using a SpreadsheetApp to
get the active spreadsheet to

00:16:58.865 --> 00:17:00.640
get the data, stuffing
that onto a

00:17:00.640 --> 00:17:02.150
variable on the template.

00:17:02.150 --> 00:17:04.670
In the template, it's the same
code I just showed you.

00:17:04.670 --> 00:17:07.520
I just added a little bit of
styles around it, some CSS,

00:17:07.520 --> 00:17:09.400
some class names in the
style sheet up top.

00:17:09.400 --> 00:17:11.010
But that's selected
as the same code

00:17:11.010 --> 00:17:12.109
that was in my slide.

00:17:12.109 --> 00:17:13.890
So this is just for loop.

00:17:13.890 --> 00:17:16.550
And if we run this function,
it's actually going to show

00:17:16.550 --> 00:17:18.490
this is a dialog in
the spreadsheet.

00:17:18.490 --> 00:17:20.839
So there is the exact same data
in the spreadsheet as in

00:17:20.839 --> 00:17:22.579
HTML dialog in the
spreadsheet.

00:17:22.579 --> 00:17:26.365
And again, I could've done
jQuery, AJAX stuff, calls to

00:17:26.365 --> 00:17:28.150
other servers, anything
I wanted to there.

00:17:28.150 --> 00:17:29.650
Let me show you how
templates work.

00:17:29.650 --> 00:17:31.870
So here, I'm logging a function
called t.getCode,

00:17:31.870 --> 00:17:33.520
template get code.

00:17:33.520 --> 00:17:37.365
I look at the logs,
in a second.

00:17:37.365 --> 00:17:39.356
If I look at the logs, I'm
going to see this mess of

00:17:39.356 --> 00:17:40.080
JavaScript.

00:17:40.080 --> 00:17:41.510
And here's a really
cool feature of

00:17:41.510 --> 00:17:42.680
Google Apps Script Templates.

00:17:42.680 --> 00:17:45.130
We actually generate
intermediate JavaScript that

00:17:45.130 --> 00:17:46.040
you can debug.

00:17:46.040 --> 00:17:47.350
And we show it to you.

00:17:47.350 --> 00:17:51.170
So you can, at any point, get
the code, see what it is, look

00:17:51.170 --> 00:17:54.340
for bugs, fix them, if you want,
or go back to template

00:17:54.340 --> 00:17:54.850
and fix them.

00:17:54.850 --> 00:17:57.600
And you can really debug what's
actually going on.

00:17:57.600 --> 00:18:01.710
If you would like a different
view of it, there's actually a

00:18:01.710 --> 00:18:03.590
different function, which
we'll see in a second--

00:18:03.590 --> 00:18:08.890
getCodeWithComments, which
is also a debug function.

00:18:08.890 --> 00:18:12.300
It's going to give you the same
code we saw, just, this

00:18:12.300 --> 00:18:14.900
time, with an interesting
set of comments.

00:18:14.900 --> 00:18:17.030
Let me just Copy, Paste it out,
because it's hard to see

00:18:17.030 --> 00:18:18.280
in the logger.

00:18:23.040 --> 00:18:26.430
So every line of the original
template is a comment to the

00:18:26.430 --> 00:18:27.750
corresponding line
in the script.

00:18:27.750 --> 00:18:29.550
So you can easily find
where your bugs are.

00:18:29.550 --> 00:18:31.610
If you have a mistake, this
is a line preserving

00:18:31.610 --> 00:18:32.470
transformation.

00:18:32.470 --> 00:18:34.870
So you can actually see,
here's my bug.

00:18:34.870 --> 00:18:35.800
Here it is in the script.

00:18:35.800 --> 00:18:37.270
Let me go to the template
and fix it.

00:18:37.270 --> 00:18:39.540
And this is the fastest way I
know to debug a template.

00:18:39.540 --> 00:18:42.500
Much easier than grepping around
the template, trying to

00:18:42.500 --> 00:18:43.800
figure out what happened.

00:18:43.800 --> 00:18:46.145
Because this is line
transforming, the code that

00:18:46.145 --> 00:18:48.390
you generate actually has
some cool properties.

00:18:48.390 --> 00:18:50.280
If I add that same reference
error here--

00:18:50.280 --> 00:18:52.260
so throw an error.

00:18:52.260 --> 00:18:55.250
Let's notice it's on line six.

00:18:55.250 --> 00:18:56.105
OK.

00:18:56.105 --> 00:18:57.355
We've noticed.

00:19:00.230 --> 00:19:01.480
I run the function.

00:19:05.260 --> 00:19:06.510
I should get an error.

00:19:08.980 --> 00:19:10.540
And, in fact, the error
is on line six.

00:19:10.540 --> 00:19:12.560
Because the intermediate code
we generate is line

00:19:12.560 --> 00:19:13.040
preserving.

00:19:13.040 --> 00:19:15.890
So rather than hide this behind
a layer and not let you

00:19:15.890 --> 00:19:17.390
see what's going on,
we want you see

00:19:17.390 --> 00:19:18.690
exactly what's happening.

00:19:18.690 --> 00:19:20.520
This is a JavaScript
transformation.

00:19:20.520 --> 00:19:21.290
And you can see it.

00:19:21.290 --> 00:19:23.110
And you can work with it and
make it work for you.

00:19:27.340 --> 00:19:27.640
OK.

00:19:27.640 --> 00:19:31.420
So what was that stuff about
escaping and force printing?

00:19:31.420 --> 00:19:33.170
We have two types of
printing scriptlets

00:19:33.170 --> 00:19:34.210
in Apps Script Templates.

00:19:34.210 --> 00:19:37.640
We have the regular printing
scriptlet, which makes sure

00:19:37.640 --> 00:19:40.490
you don't do a common mistake
that can really bite you in a

00:19:40.490 --> 00:19:43.810
web app, which is, it doesn't
let you accidentally inject

00:19:43.810 --> 00:19:45.530
JavaScript or HTML.

00:19:45.530 --> 00:19:47.860
If you use a printing scriptlet,
and you have, let's

00:19:47.860 --> 00:19:51.340
say, some HTML or script markup,
it will actually

00:19:51.340 --> 00:19:53.300
contextually turn it
into a string.

00:19:53.300 --> 00:19:54.770
If you're inside JavaScript,
it will become

00:19:54.770 --> 00:19:55.750
a JavaScript string.

00:19:55.750 --> 00:19:58.620
If you're inside an HTML
attribute, you will correctly

00:19:58.620 --> 00:20:00.150
escape with HTML entities.

00:20:00.150 --> 00:20:02.150
Wherever you are, it will
say, no problem.

00:20:02.150 --> 00:20:04.215
I will make this
appear as text.

00:20:04.215 --> 00:20:06.820
If you use a forced printing
scriptlet, you know what

00:20:06.820 --> 00:20:07.540
you're doing.

00:20:07.540 --> 00:20:09.260
And it's going to print
exactly what you

00:20:09.260 --> 00:20:10.550
said into the stream.

00:20:10.550 --> 00:20:12.340
So here's the difference.

00:20:12.340 --> 00:20:14.536
I have a little template
on top.

00:20:14.536 --> 00:20:17.620
I have a string with a script.

00:20:17.620 --> 00:20:19.070
The script does a
very bad thing.

00:20:19.070 --> 00:20:20.590
It says so.

00:20:20.590 --> 00:20:22.600
And I have two forced printing
scriptlets that are going to

00:20:22.600 --> 00:20:24.835
both print out the same
exact string.

00:20:24.835 --> 00:20:26.260
I'm sorry, two printing
scriptlets.

00:20:26.260 --> 00:20:28.800
One is a printing one, and one
is a forced printing one.

00:20:28.800 --> 00:20:29.940
Here's the output.

00:20:29.940 --> 00:20:31.660
The printing one actually
prints in the

00:20:31.660 --> 00:20:33.420
text of that script.

00:20:33.420 --> 00:20:34.780
So you can't make a mistake.

00:20:34.780 --> 00:20:36.530
You can't have an XSS attack.

00:20:36.530 --> 00:20:40.040
You can't have someone injecting
JavaScript or HTML

00:20:40.040 --> 00:20:42.880
that you didn't expect, or
styles into your code.

00:20:42.880 --> 00:20:45.020
The forced printing one looks
like it did nothing.

00:20:45.020 --> 00:20:47.620
But actually, it printed a
script tag, which is not

00:20:47.620 --> 00:20:50.320
visible and is doing
the very bad thing.

00:20:50.320 --> 00:20:53.520
So as a rule of thumb, use the
printing scriptlets, which are

00:20:53.520 --> 00:20:56.100
the standard-looking
scriptlets--

00:20:56.100 --> 00:20:58.100
the ones that look like
every other language.

00:20:58.100 --> 00:20:59.970
And only use the force printing
scriptlets when you

00:20:59.970 --> 00:21:00.670
know what you're doing.

00:21:00.670 --> 00:21:02.660
And you know exactly where your
data comes from, and you

00:21:02.660 --> 00:21:06.660
trust that it doesn't have
anything nasty embedded in it.

00:21:06.660 --> 00:21:08.070
So let me recap HTMLService.

00:21:11.050 --> 00:21:13.850
Use HTMLService to serve
HTML and JavaScript.

00:21:13.850 --> 00:21:16.740
Call back to the server with
google.script, with our new

00:21:16.740 --> 00:21:18.600
client-side API.

00:21:18.600 --> 00:21:20.280
And generate dynamic
content with

00:21:20.280 --> 00:21:21.260
Google Apps Script Templates.

00:21:21.260 --> 00:21:23.770
I think, together, this is a
really powerful set of tools

00:21:23.770 --> 00:21:25.800
for building web apps with Apps
Script, in a way that you

00:21:25.800 --> 00:21:27.050
couldn't do before.

00:21:29.200 --> 00:21:31.940
HTMLServices does have some
limitations, because it runs

00:21:31.940 --> 00:21:34.590
on the script.google.com domain,
which means that we're

00:21:34.590 --> 00:21:36.750
serving it on google.com.

00:21:36.750 --> 00:21:38.910
And we have to make sure
that certain dangerous

00:21:38.910 --> 00:21:40.500
things can't happen.

00:21:40.500 --> 00:21:42.910
The first thing that HTMLService
limits you to is

00:21:42.910 --> 00:21:45.380
ECMAScript 5, ES5, strict mode,
which is the newest

00:21:45.380 --> 00:21:46.630
version of JavaScript.

00:21:46.630 --> 00:21:49.850
Now, even on a browser doesn't
support ES5 strict mode,

00:21:49.850 --> 00:21:56.000
HTMLService rewrites your code
to emulate ES5 strict mode.

00:21:56.000 --> 00:21:57.450
In practice, that means
you don't get with.

00:21:57.450 --> 00:21:58.310
You don't get a val.

00:21:58.310 --> 00:21:59.790
You don't get arguements.callee.

00:21:59.790 --> 00:22:03.255
You should rarely notice the
difference between ECMAScript

00:22:03.255 --> 00:22:05.890
3, which is the current
standard, and ECMAScript 5.

00:22:05.890 --> 00:22:07.430
It's hard to tell.

00:22:07.430 --> 00:22:09.760
Scripts can't access cookies
or other browser resources.

00:22:09.760 --> 00:22:10.940
You can navigate the history.

00:22:10.940 --> 00:22:11.960
You can't get cookies.

00:22:11.960 --> 00:22:14.650
These are security provisions to
make sure that you can't do

00:22:14.650 --> 00:22:16.160
things that the user
didn't expect.

00:22:16.160 --> 00:22:18.760
And at some point, while we may
look into opening some of

00:22:18.760 --> 00:22:21.420
these up, at the moment, this
is the state of the world.

00:22:21.420 --> 00:22:22.510
And finally, scripts can't

00:22:22.510 --> 00:22:24.270
dynamically install new scripts.

00:22:24.270 --> 00:22:27.870
You can't get around our sandbox
by writing a script

00:22:27.870 --> 00:22:29.765
tag into the DOM and loading
in something

00:22:29.765 --> 00:22:30.740
from somewhere else.

00:22:30.740 --> 00:22:32.160
I think that last one,
actually, is

00:22:32.160 --> 00:22:33.140
worthy of its own slide.

00:22:33.140 --> 00:22:35.970
Because it's probably the one
place it's easy to get tripped

00:22:35.970 --> 00:22:38.740
in HTMLService, is
this restriction.

00:22:38.740 --> 00:22:41.160
So like I said, first, you can't
dynamically add a new

00:22:41.160 --> 00:22:42.250
script tag.

00:22:42.250 --> 00:22:45.630
That's the obvious place where
this restriction shows up.

00:22:45.630 --> 00:22:48.070
The less obvious
place is this.

00:22:48.070 --> 00:22:48.820
This will work.

00:22:48.820 --> 00:22:51.590
I write a new button into
the DOM, just a text.

00:22:51.590 --> 00:22:54.570
And I associate a function
with that button.

00:22:54.570 --> 00:22:55.570
It's a ClickHandler.

00:22:55.570 --> 00:22:57.870
That is totally fine,
and that will work.

00:22:57.870 --> 00:23:00.600
This, which is a common pattern,
will not work.

00:23:00.600 --> 00:23:02.990
I write a function with
an onClick handler

00:23:02.990 --> 00:23:04.400
and write in as text.

00:23:04.400 --> 00:23:07.060
And the reason that won't work
is that, to our sandbox, that

00:23:07.060 --> 00:23:08.970
looks like a brand new script
that we have no

00:23:08.970 --> 00:23:09.800
idea what it is.

00:23:09.800 --> 00:23:11.100
We've never seen it before.

00:23:11.100 --> 00:23:12.835
And we can't properly
guarantee that we

00:23:12.835 --> 00:23:14.050
can sanitize it.

00:23:14.050 --> 00:23:16.230
Now, the good news is we
actually think we do know how

00:23:16.230 --> 00:23:17.040
to do this.

00:23:17.040 --> 00:23:20.190
And we're looking forward to
lifting all these restrictions

00:23:20.190 --> 00:23:21.150
in the near term.

00:23:21.150 --> 00:23:23.620
But for the moment, what we're
launching is you cannot

00:23:23.620 --> 00:23:26.890
dynamically install new scripts,
either via script tag

00:23:26.890 --> 00:23:29.100
or via this method.

00:23:29.100 --> 00:23:32.710
Now, it's not just about
limitations.

00:23:32.710 --> 00:23:35.110
HTMLService also gives you some
awesome new stuff that

00:23:35.110 --> 00:23:37.860
you wouldn't get with just
plain old JavaScript.

00:23:37.860 --> 00:23:40.680
First of all, we emulate
ECMAScript 5 strict mode

00:23:40.680 --> 00:23:41.590
everywhere.

00:23:41.590 --> 00:23:44.160
Which means that regardless of
what browser you're actually

00:23:44.160 --> 00:23:46.270
running on, you know what
version of JavaScript is

00:23:46.270 --> 00:23:46.860
actually running.

00:23:46.860 --> 00:23:48.680
It will always be the same.

00:23:48.680 --> 00:23:50.800
We fill in missing
modern JavaScript

00:23:50.800 --> 00:23:52.320
functions on all browsers.

00:23:52.320 --> 00:23:56.070
If you've used array.map,
function.bind, object.keys,

00:23:56.070 --> 00:23:59.220
these really super useful
functions that exists in

00:23:59.220 --> 00:24:01.660
modern browsers, well, now
they're available in every

00:24:01.660 --> 00:24:04.670
browser, not just Firefox,
Chrome, Safari, and Opera.

00:24:04.670 --> 00:24:08.730
So you can use all these
modern functions on any

00:24:08.730 --> 00:24:10.450
browser you like.

00:24:10.450 --> 00:24:13.190
You can use jQuery and jQuery
UI, even embedded in a

00:24:13.190 --> 00:24:13.940
spreadsheet.

00:24:13.940 --> 00:24:15.470
This is really awesome.

00:24:15.470 --> 00:24:18.220
Inside that spreadsheet
dialog that I showed

00:24:18.220 --> 00:24:19.630
you, you can do anything.

00:24:19.630 --> 00:24:21.580
And the reason is we
trust our sandbox.

00:24:21.580 --> 00:24:24.850
And so, whatever you're doing
in there, go wild.

00:24:24.850 --> 00:24:26.510
If you could do it in a web app,
you can do it inside a

00:24:26.510 --> 00:24:27.770
spreadsheet.

00:24:27.770 --> 00:24:30.210
Now, Google Caja, which is the
underlying technology here, is

00:24:30.210 --> 00:24:30.890
open source.

00:24:30.890 --> 00:24:34.890
You can get to it as
developers.google.com/caja.

00:24:34.890 --> 00:24:37.080
This is cool, because if
you see a feature or a

00:24:37.080 --> 00:24:39.050
bug, help us fix it.

00:24:39.050 --> 00:24:41.450
This is an open source project
with really, really active

00:24:41.450 --> 00:24:42.270
development.

00:24:42.270 --> 00:24:45.560
And we are using the latest
version of it, as soon as it

00:24:45.560 --> 00:24:46.830
gets pushed.

00:24:46.830 --> 00:24:50.520
So you can join in with us, and
make this service better.

00:24:54.370 --> 00:24:56.230
So I have a few minutes left.

00:24:56.230 --> 00:24:58.570
And I feel like I have
enough time to launch

00:24:58.570 --> 00:25:00.070
one more major service.

00:25:00.070 --> 00:25:01.780
And I'm really excited, because
this is the first

00:25:01.780 --> 00:25:06.580
thing I'm launching that my
PM has not yet leaked.

00:25:06.580 --> 00:25:07.970
Sometimes I hear
from you guys.

00:25:07.970 --> 00:25:09.720
I don't want to return HTML.

00:25:09.720 --> 00:25:14.190
I just want to return JSON,
or RSS, or XML, or

00:25:14.190 --> 00:25:15.750
something like that.

00:25:15.750 --> 00:25:17.470
Well, we heard you
say that too.

00:25:17.470 --> 00:25:21.410
So introducing ContentService,
the twin of HTMLService for

00:25:21.410 --> 00:25:22.740
everything that is not HTML.

00:25:22.740 --> 00:25:24.700
You can return text
from a script.

00:25:24.700 --> 00:25:28.410
And by text, I mean you can
return JSON, RSS, XML, Atom.

00:25:28.410 --> 00:25:31.290
Whatever it is you're writing
for a service, you can return

00:25:31.290 --> 00:25:32.140
it from a script.

00:25:32.140 --> 00:25:35.070
This is perfect for writing
things that will be consumed

00:25:35.070 --> 00:25:36.350
by other programs.

00:25:36.350 --> 00:25:38.720
So if you're writing something
for consumption by an RSS

00:25:38.720 --> 00:25:41.240
reader, like Google Reader, or
something for consumption by

00:25:41.240 --> 00:25:44.280
another API, or another web
service that you want to be

00:25:44.280 --> 00:25:45.860
able to hit your script
and do something.

00:25:45.860 --> 00:25:47.930
If you're writing something so
that an App Engine program

00:25:47.930 --> 00:25:51.050
could call your script, and
get back a JSON response,

00:25:51.050 --> 00:25:53.790
using your script as an
API, this is for you.

00:25:53.790 --> 00:25:56.110
And no Caja or UiApp
sanitization applied.

00:25:56.110 --> 00:25:57.890
Whatever you told us to return,

00:25:57.890 --> 00:25:59.140
this is what we return.

00:25:59.140 --> 00:26:00.880
The way we do that, if you look
in our user docs, you'll

00:26:00.880 --> 00:26:04.220
see the tricks we have to
do to make that safe.

00:26:04.220 --> 00:26:06.460
But as far as you're concerned,
you return text.

00:26:06.460 --> 00:26:08.250
You say, I'd like to
serve this text.

00:26:08.250 --> 00:26:09.500
We serve that text.

00:26:09.500 --> 00:26:12.180
And you can use it
in services.

00:26:12.180 --> 00:26:13.400
This is the entire API.

00:26:13.400 --> 00:26:15.380
I would love to complicate
it, make it sound

00:26:15.380 --> 00:26:16.380
complicated and cool.

00:26:16.380 --> 00:26:19.750
But no, you do ContentService
, createTextOutput, put the

00:26:19.750 --> 00:26:21.540
content you want in.

00:26:21.540 --> 00:26:23.150
And then you can optionally
set a MimeType.

00:26:23.150 --> 00:26:24.450
You don't even have
set a MimeType.

00:26:24.450 --> 00:26:25.430
It defaults to PLAIN_TEXT.

00:26:25.430 --> 00:26:27.980
You return that from a script,
from a doGet function.

00:26:27.980 --> 00:26:29.730
You have an API or a service.

00:26:29.730 --> 00:26:31.140
That is all there is to it.

00:26:31.140 --> 00:26:33.540
In fact, I'm not even going to
show you the "Hello World"

00:26:33.540 --> 00:26:36.060
demo, because this would
be the entire thing.

00:26:36.060 --> 00:26:38.300
And it would show "Hello World."
So let's go with a

00:26:38.300 --> 00:26:40.190
slightly more interesting
demo.

00:26:40.190 --> 00:26:42.530
That email address,
appsscriptio@gmail.com, which

00:26:42.530 --> 00:26:45.680
you have been assiduously
emailing things to, I hope.

00:26:45.680 --> 00:26:46.930
AUDIENCE: [INAUDIBLE].

00:26:48.780 --> 00:26:49.660
COREY GOLDFEDER: We'll
talk about that.

00:26:49.660 --> 00:26:53.220
Well, that email address that
I had prerecorded a video

00:26:53.220 --> 00:26:58.380
from, I would like to see it
not just as a tag cloud.

00:26:58.380 --> 00:27:00.040
But I'd actually like
to see a version of

00:27:00.040 --> 00:27:03.030
this as an RSS feed.

00:27:03.030 --> 00:27:05.730
Let's see how easy
that is to do.

00:27:05.730 --> 00:27:09.350
I claim I can do this in 4 lines
of Apps Script code and

00:27:09.350 --> 00:27:11.310
15 lines of HTML.

00:27:11.310 --> 00:27:13.880
So I'm using ContentService.c
reateTextOutput.

00:27:13.880 --> 00:27:15.710
I'm using HTMLServices
Templates.

00:27:15.710 --> 00:27:17.550
I'm not actually serving HTML.

00:27:17.550 --> 00:27:20.320
I'm just using the template
structure to build an RSS

00:27:20.320 --> 00:27:23.340
feed, because XML, HTML,
it's all the same.

00:27:23.340 --> 00:27:25.090
I use GmailApp.getInboxThreads.

00:27:25.090 --> 00:27:26.460
I'm calling it from inside
the template.

00:27:26.460 --> 00:27:26.970
That will work.

00:27:26.970 --> 00:27:27.740
Why not?

00:27:27.740 --> 00:27:28.930
I loop through the threads.

00:27:28.930 --> 00:27:32.095
For each thread, I created
an RSS item.

00:27:32.095 --> 00:27:35.010
It's pretty straightforward.

00:27:35.010 --> 00:27:37.050
And then I'm going to publish
this as a script

00:27:37.050 --> 00:27:40.370
and see what happens.

00:27:40.370 --> 00:27:41.630
I have to authorize
it, of course.

00:27:41.630 --> 00:27:43.485
You have to authorize this, so
that it can use your Gmail.

00:27:48.350 --> 00:27:49.600
Our new deployment.

00:27:55.760 --> 00:27:56.780
And I'm going to deploy this.

00:27:56.780 --> 00:27:57.210
Be careful.

00:27:57.210 --> 00:27:59.230
I have to deploy this so that
it's visible to anyone,

00:27:59.230 --> 00:28:01.650
including Anonymous, because
Google Reader

00:28:01.650 --> 00:28:04.000
visits URLs as Anonymous.

00:28:04.000 --> 00:28:05.680
It has no credentials when
it visits a URL.

00:28:05.680 --> 00:28:09.430
So it's crucial that if I want
this be read by a RSS reader,

00:28:09.430 --> 00:28:10.740
that anyone has to be
able to hit it.

00:28:10.740 --> 00:28:12.520
In practice, that means that
anyone could to read this

00:28:12.520 --> 00:28:13.830
feed, if they had the URL.

00:28:13.830 --> 00:28:16.930
And so it's not a great idea
to put something private in

00:28:16.930 --> 00:28:18.750
that feed, unless you're very
careful about not giving

00:28:18.750 --> 00:28:20.030
anyone that URL.

00:28:20.030 --> 00:28:20.100
OK.

00:28:20.100 --> 00:28:21.240
Here's the big red
Subscribe button.

00:28:21.240 --> 00:28:23.680
I'm going to drop in that URL.

00:28:23.680 --> 00:28:24.350
I want to be clear.

00:28:24.350 --> 00:28:26.100
This is the URL of
a script that I'm

00:28:26.100 --> 00:28:27.620
treating as an RSS feed.

00:28:27.620 --> 00:28:28.995
Click Add.

00:28:28.995 --> 00:28:31.250
And here we go.

00:28:31.250 --> 00:28:33.950
There is my email
as an RSS feed.

00:28:33.950 --> 00:28:36.500
Fifteen lines of HTML
Templates, four

00:28:36.500 --> 00:28:37.760
lines of Apps Script.

00:28:37.760 --> 00:28:41.148
Tell me how hard this would be
to do on any other platform.

00:28:41.148 --> 00:28:48.120
[APPLAUSE]

00:28:48.120 --> 00:28:50.140
COREY GOLDFEDER: So I want to
just emphasize, you can do a

00:28:50.140 --> 00:28:53.545
lot more with this than just
turn Gmail into RSS, which is,

00:28:53.545 --> 00:28:54.820
itself, kind of awesome.

00:28:54.820 --> 00:28:56.230
You can filter RSS feeds.

00:28:56.230 --> 00:28:59.392
There's a great Google
FeedFetcher API that can fetch

00:28:59.392 --> 00:29:00.425
any RSS feed in any format.

00:29:00.425 --> 00:29:02.430
It gives you a standard
JSON output.

00:29:02.430 --> 00:29:03.620
And you can build feeds
out of that.

00:29:03.620 --> 00:29:05.220
So you can build filtered
versions of

00:29:05.220 --> 00:29:06.210
your favorite feeds.

00:29:06.210 --> 00:29:08.290
You can pull in two feeds
together, and output a

00:29:08.290 --> 00:29:09.250
combined feed.

00:29:09.250 --> 00:29:13.410
You can take one feed in, and
output two URLs that have

00:29:13.410 --> 00:29:14.430
different parts of the feed.

00:29:14.430 --> 00:29:15.960
You can do anything you want.

00:29:15.960 --> 00:29:16.910
And that's just with RSS.

00:29:16.910 --> 00:29:20.210
You can build APIs that
return JSON, XML.

00:29:20.210 --> 00:29:22.200
Like I said, anything
that's text, build

00:29:22.200 --> 00:29:24.670
it with this stuff.

00:29:24.670 --> 00:29:26.910
So that raises an important
question.

00:29:26.910 --> 00:29:28.370
What should I use?

00:29:28.370 --> 00:29:28.830
I have UiApp.

00:29:28.830 --> 00:29:30.020
I have a ContentService.

00:29:30.020 --> 00:29:31.630
I have HTMLService.

00:29:31.630 --> 00:29:32.980
Which one do I use when?

00:29:32.980 --> 00:29:35.120
And the answer is, it depends
on what you want.

00:29:35.120 --> 00:29:36.960
All of our output types
complement each

00:29:36.960 --> 00:29:38.530
other pretty well.

00:29:38.530 --> 00:29:40.920
Use UiApp, if you're building
a simple, cross-browser

00:29:40.920 --> 00:29:41.800
compatible UI.

00:29:41.800 --> 00:29:44.310
You don't want to deal
with writing client

00:29:44.310 --> 00:29:45.270
code and server code.

00:29:45.270 --> 00:29:48.050
You want to show a few buttons,
some text, have some

00:29:48.050 --> 00:29:49.710
interaction, maybe some AJAX.

00:29:49.710 --> 00:29:52.500
But the basic idea here is you
want it to be simple code.

00:29:52.500 --> 00:29:56.920
And you don't want to have to
deal separately with the HTML.

00:29:56.920 --> 00:29:59.650
HTMLService to build complex
AJAX web apps.

00:29:59.650 --> 00:30:01.280
You want to write down to the
metal, and make something that

00:30:01.280 --> 00:30:03.700
screams, make something that's
exactly what you wanted,

00:30:03.700 --> 00:30:04.990
HTMLService is for you.

00:30:04.990 --> 00:30:07.260
You can write exactly what you
wanted and still call back

00:30:07.260 --> 00:30:09.730
into Google script
anytime you want.

00:30:09.730 --> 00:30:12.470
And use ContentService to build
services and RSS feeds,

00:30:12.470 --> 00:30:14.640
things that are consumed
not by user,

00:30:14.640 --> 00:30:16.230
but by another program.

00:30:16.230 --> 00:30:16.960
Pretty straightforward.

00:30:16.960 --> 00:30:19.540
I think it's easy to choose,
depending on your result, what

00:30:19.540 --> 00:30:20.710
you want to do.

00:30:20.710 --> 00:30:22.870
Remember, the same script can
actually serve all three.

00:30:22.870 --> 00:30:25.620
You can have a parameter and
the URL at the end, and so

00:30:25.620 --> 00:30:28.318
have the same script serving an
RSS view of something and

00:30:28.318 --> 00:30:32.630
an HTML view, depending on the
URL parameters you put in.

00:30:32.630 --> 00:30:34.957
So let me just wrap up all the
things that Google Apps Script

00:30:34.957 --> 00:30:37.120
has launched this week, because
I just want to point

00:30:37.120 --> 00:30:38.400
out how awesome this is.

00:30:38.400 --> 00:30:40.540
We have really changed
the product.

00:30:40.540 --> 00:30:42.650
And I think it's much more
powerful today than it was a

00:30:42.650 --> 00:30:43.650
few days ago.

00:30:43.650 --> 00:30:45.450
We launched standalone scripts
that aren't tied to

00:30:45.450 --> 00:30:46.280
spreadsheets.

00:30:46.280 --> 00:30:47.920
They live at script.google.com.

00:30:47.920 --> 00:30:50.700
Or you can go to Google Drive,
click the Create More menu,

00:30:50.700 --> 00:30:53.590
and see scripts right
there in your drive.

00:30:53.590 --> 00:30:55.200
We launched scripts that run
with the authority of the

00:30:55.200 --> 00:30:56.390
user, not the script author.

00:30:56.390 --> 00:30:59.430
So it runs not as
me, but as you.

00:30:59.430 --> 00:31:02.540
When you run it, you get to
authorize it yourself.

00:31:02.540 --> 00:31:05.200
The ScriptDB store, a database
for building scripts that need

00:31:05.200 --> 00:31:05.920
a database.

00:31:05.920 --> 00:31:07.980
A JSON-based NoSQL store.

00:31:07.980 --> 00:31:10.950
And there's a talk on this in
Room 7 at 5:15, by Drew.

00:31:10.950 --> 00:31:12.480
And I really encourage you
to go do it, because

00:31:12.480 --> 00:31:13.730
you'll learn a lot.

00:31:16.600 --> 00:31:18.010
Direct Chrome Web Store
integration.

00:31:18.010 --> 00:31:19.100
Again, we launched
that yesterday.

00:31:19.100 --> 00:31:22.290
A few clicks, and your app is
packaged up, ready to go into

00:31:22.290 --> 00:31:22.960
Chrome Web Store.

00:31:22.960 --> 00:31:26.870
All you need to do is add a
description and an icon.

00:31:26.870 --> 00:31:29.360
HTMLService and Templates are
building dynamic web apps.

00:31:29.360 --> 00:31:31.100
If you don't know what that is,
you have been asleep for

00:31:31.100 --> 00:31:34.290
40 minutes, and shame on you.

00:31:34.290 --> 00:31:36.650
ContentService for building
services and feeds.

00:31:36.650 --> 00:31:39.810
That is a lot of stuff.

00:31:39.810 --> 00:31:42.180
I just want to run through the
code of Gmail tags one time,

00:31:42.180 --> 00:31:43.830
because I promised this
at the beginning.

00:31:43.830 --> 00:31:45.220
And I didn't really
deliver on that.

00:31:45.220 --> 00:31:47.540
So I'm not going
to go through--

00:31:47.540 --> 00:31:49.780
before everyone starts
glazing over--

00:31:49.780 --> 00:31:50.550
all the code.

00:31:50.550 --> 00:31:52.660
I just want to demonstrate the
fact that the things that we

00:31:52.660 --> 00:31:54.840
talked about today are what's
inside of this.

00:31:54.840 --> 00:31:55.860
There's a doGet function.

00:31:55.860 --> 00:31:58.500
It's creating a template
from a file, just

00:31:58.500 --> 00:31:59.960
like we talked about.

00:31:59.960 --> 00:32:01.500
There's a function
getThreadBody.

00:32:01.500 --> 00:32:03.450
It's just like the getSubject
function.

00:32:03.450 --> 00:32:08.070
It takes an id and returns
the body of a thread.

00:32:08.070 --> 00:32:09.470
This one is a little
more complicated.

00:32:09.470 --> 00:32:11.040
It gets the tag cloud.

00:32:11.040 --> 00:32:13.090
It does a lot of analytics about
what's the common words

00:32:13.090 --> 00:32:13.780
in your Gmail.

00:32:13.780 --> 00:32:14.630
But it's purely Apps Script.

00:32:14.630 --> 00:32:15.420
There's nothing new about it.

00:32:15.420 --> 00:32:18.160
It's just a little bit
of App Script.

00:32:18.160 --> 00:32:19.640
Here we're using, on the
client, in the HTML,

00:32:19.640 --> 00:32:21.270
jQuery, jQuery UI.

00:32:21.270 --> 00:32:25.180
We have a server variable,
getGmailTags.

00:32:25.180 --> 00:32:26.610
And here's something
really cool.

00:32:26.610 --> 00:32:29.370
We can pass server variable to
the client, by writing it

00:32:29.370 --> 00:32:30.920
right into the HTML.

00:32:30.920 --> 00:32:34.750
So here we are with our tags in
the client equals tags from

00:32:34.750 --> 00:32:35.480
the server.

00:32:35.480 --> 00:32:39.100
And that data is now baked into
the HTML that we serve.

00:32:39.100 --> 00:32:40.710
That's some jQuery
and jQuery UI.

00:32:40.710 --> 00:32:42.590
I think we'll just
skip over that.

00:32:42.590 --> 00:32:45.410
Look on jQuery's website to
learn how to do that stuff.

00:32:45.410 --> 00:32:47.570
Here we have a google.script.run
with a

00:32:47.570 --> 00:32:48.620
SuccessHandler.

00:32:48.620 --> 00:32:50.410
I inlined the SuccessHandler,
so it looks a little

00:32:50.410 --> 00:32:50.980
complicated.

00:32:50.980 --> 00:32:53.220
But at the bottom, down there,
you can see it's

00:32:53.220 --> 00:32:55.780
google.script.run,
getGmailTags.

00:32:55.780 --> 00:32:57.570
Same function from the server.

00:32:57.570 --> 00:33:00.160
Once we're calling it at the
top, and once we're calling in

00:33:00.160 --> 00:33:00.480
the middle.

00:33:00.480 --> 00:33:02.570
And this is actually refreshing
every 30 seconds.

00:33:02.570 --> 00:33:04.050
Here's a lot of styles.

00:33:04.050 --> 00:33:04.920
We'll skip over those.

00:33:04.920 --> 00:33:06.210
They're just regular styles.

00:33:06.210 --> 00:33:06.400
And

00:33:06.400 --> 00:33:07.860
At the bottom, here's
a little template.

00:33:07.860 --> 00:33:09.590
Because the first time we load
the page, we don't want to

00:33:09.590 --> 00:33:12.780
make AJAX call and have to
get the clouds that way.

00:33:12.780 --> 00:33:15.000
So the first time we load the
page, we write the cloud

00:33:15.000 --> 00:33:16.320
directly in with the template.

00:33:16.320 --> 00:33:19.400
And after that, every time
afterwards, we refresh it.

00:33:19.400 --> 00:33:19.670
OK.

00:33:19.670 --> 00:33:21.180
That is actually
the entire app.

00:33:21.180 --> 00:33:22.490
And it's really not
that complicated.

00:33:22.490 --> 00:33:26.560
88 lines of HTML and JavaScript,
a little bit of

00:33:26.560 --> 00:33:29.920
Google App Script.

00:33:29.920 --> 00:33:32.050
So let me do this.

00:33:35.670 --> 00:33:36.990
Mine is working.

00:33:36.990 --> 00:33:40.260
So here is my version of the
app, coming off of my page.

00:33:40.260 --> 00:33:43.690
And I actually have no idea
what's here, because this is

00:33:43.690 --> 00:33:45.030
different from what I showed
you in the video.

00:33:45.030 --> 00:33:46.070
Because people have
emailed things.

00:33:46.070 --> 00:33:49.470
So I'm going to click the very
large JavaScript word and see

00:33:49.470 --> 00:33:53.030
what threads have to
do with JavaScript.

00:33:53.030 --> 00:33:55.450
Loading from the server.

00:33:55.450 --> 00:34:02.025
"Webapps are hard, let's go
scripting." So there we go.

00:34:02.025 --> 00:34:03.940
The law of demos
did not apply.

00:34:03.940 --> 00:34:06.280
All I want is a bit of HTML, a
side of JavaScript and data

00:34:06.280 --> 00:34:08.420
centers for as far as
the eye can see.

00:34:08.420 --> 00:34:11.120
I have weird friends.

00:34:11.120 --> 00:34:11.600
OK.

00:34:11.600 --> 00:34:14.440
So one more thing to show
you in this demo.

00:34:14.440 --> 00:34:15.370
There's a little
Uglify button.

00:34:15.370 --> 00:34:17.110
It's, unfortunately,
offscreen.

00:34:17.110 --> 00:34:18.130
It says Uglify.

00:34:18.130 --> 00:34:19.030
I'm going to click it.

00:34:19.030 --> 00:34:20.130
It will make things ugly.

00:34:20.130 --> 00:34:22.929
And the reason for doing that is
I want to demonstrate this

00:34:22.929 --> 00:34:24.620
is real client code.

00:34:24.620 --> 00:34:27.320
That's actually a fairly
interesting thing that's very

00:34:27.320 --> 00:34:29.875
hard to do with UiApp and
trivial to do with

00:34:29.875 --> 00:34:30.560
HTMLService.

00:34:30.560 --> 00:34:32.909
And I just want to demonstrate
that this is straight up

00:34:32.909 --> 00:34:34.030
client code.

00:34:34.030 --> 00:34:35.750
I'm writing style sheets in.

00:34:35.750 --> 00:34:38.600
I just flipped the style name
on one top-level item.

00:34:38.600 --> 00:34:40.440
And that flipped everything
over, and I can go right back

00:34:40.440 --> 00:34:41.690
to prettified.

00:34:44.830 --> 00:34:46.110
Moral of the story.

00:34:46.110 --> 00:34:47.870
Go away, or I will replace
you with a very

00:34:47.870 --> 00:34:49.380
small Google Apps Script.

00:34:49.380 --> 00:34:51.679
There's so much that Google
Apps Script can do with so

00:34:51.679 --> 00:34:52.320
little code.

00:34:52.320 --> 00:34:54.130
And I think that's the
coolest thing.

00:34:54.130 --> 00:34:55.305
You go to script.google.com.

00:34:55.305 --> 00:34:56.900
You type a few lines of code.

00:34:56.900 --> 00:34:59.840
You click a menu or two,
and there is your app.

00:34:59.840 --> 00:35:00.380
That's it.

00:35:00.380 --> 00:35:01.440
There's no deploying.

00:35:01.440 --> 00:35:02.560
There's no making JARs.

00:35:02.560 --> 00:35:04.280
There's no XML configuration.

00:35:04.280 --> 00:35:06.900
You don't even need
a separate ID.

00:35:06.900 --> 00:35:09.550
On any web computer, you go
to script.google.com.

00:35:09.550 --> 00:35:12.720
You type in the logic, just
the logic of what you're

00:35:12.720 --> 00:35:13.710
trying to do--

00:35:13.710 --> 00:35:15.580
none of the boilerplate,
just the logic of what

00:35:15.580 --> 00:35:16.680
you wanted to do.

00:35:16.680 --> 00:35:17.440
And there you are.

00:35:17.440 --> 00:35:20.480
There's your web app.

00:35:20.480 --> 00:35:20.820
OK.

00:35:20.820 --> 00:35:22.680
So I'm printing Thank You.

00:35:22.680 --> 00:35:24.970
Not force printing, because I
don't know who that came from.

00:35:24.970 --> 00:35:27.960
And I just want to point out,
before we take any questions,

00:35:27.960 --> 00:35:29.730
that you can join the Google
Apps Script community on

00:35:29.730 --> 00:35:30.810
stackoverflow.com.

00:35:30.810 --> 00:35:33.950
We have an active community of
questions, answers-- both from

00:35:33.950 --> 00:35:36.380
the team and from external
developers, like yourselves.

00:35:36.380 --> 00:35:37.500
Thank you very much.

00:35:37.500 --> 00:35:39.112
And any questions?

00:35:39.112 --> 00:35:46.560
[APPLAUSE]

00:35:46.560 --> 00:35:48.110
COREY GOLDFEDER: I just want to
say, if there is anyone who

00:35:48.110 --> 00:35:50.120
does have a question, if you can
come to the microphones in

00:35:50.120 --> 00:35:52.680
the middle, so that they'll show
up on the YouTube video.

00:35:52.680 --> 00:35:53.930
And we can hear them.

00:35:56.540 --> 00:36:00.050
AUDIENCE: So, my question is,
what we would be the URL of

00:36:00.050 --> 00:36:01.350
this app that you showed us?

00:36:01.350 --> 00:36:02.150
COREY GOLDFEDER: I'm sorry?

00:36:02.150 --> 00:36:04.240
AUDIENCE: What is the
URL of this app?

00:36:04.240 --> 00:36:06.070
COREY GOLDFEDER: I can get
back to it afterwards.

00:36:06.070 --> 00:36:07.615
I actually don't remember it
off the top of my head.

00:36:07.615 --> 00:36:07.940
AUDIENCE: Yeah.

00:36:07.940 --> 00:36:10.750
But can you control what's
the URL of the--

00:36:10.750 --> 00:36:13.010
COREY GOLDFEDER: So, the URL
that comes from the script is

00:36:13.010 --> 00:36:13.850
tied to the script.

00:36:13.850 --> 00:36:17.000
But of course, you can alias
it any way you like.

00:36:17.000 --> 00:36:19.510
You can make any URL redirect
to that URL,

00:36:19.510 --> 00:36:20.400
so that will work.

00:36:20.400 --> 00:36:24.220
AUDIENCE: And can you deploy
some extra resources, like

00:36:24.220 --> 00:36:25.440
CSSice or images?

00:36:25.440 --> 00:36:25.740
COREY GOLDFEDER: Yes.

00:36:25.740 --> 00:36:28.210
You can link in external
CSS resources, external

00:36:28.210 --> 00:36:28.950
JavaScript.

00:36:28.950 --> 00:36:31.400
Anything you link in gets
linked in on the server.

00:36:31.400 --> 00:36:33.410
So even though it looks like
a link on the client, we

00:36:33.410 --> 00:36:35.920
actually link it in on the
server, parse it out and

00:36:35.920 --> 00:36:36.560
sanitize it right there.

00:36:36.560 --> 00:36:39.830
AUDIENCE: But you have to host
it from another server, yeah?

00:36:39.830 --> 00:36:40.080
COREY GOLDFEDER: OK.

00:36:40.080 --> 00:36:41.340
So you can do two things.

00:36:41.340 --> 00:36:44.270
You can host it from another
server, if you want to.

00:36:44.270 --> 00:36:47.120
That's where I got the jQuery
library from and the CSS that

00:36:47.120 --> 00:36:47.990
I was using.

00:36:47.990 --> 00:36:50.610
You can also have
an HTML file.

00:36:50.610 --> 00:36:53.290
It's not a CSS file, but you
can have a style tag in it,

00:36:53.290 --> 00:36:56.640
and just inline it
directly in.

00:36:56.640 --> 00:36:58.760
You can build Apps Script
libraries that have all kinds

00:36:58.760 --> 00:36:59.990
of client code in them.

00:36:59.990 --> 00:37:02.930
And instead of doing link
source equals, you

00:37:02.930 --> 00:37:03.820
just inline them in.

00:37:03.820 --> 00:37:06.000
In practice, there's no
difference, because we are

00:37:06.000 --> 00:37:08.560
going to inline any external
resources anyways, the way

00:37:08.560 --> 00:37:09.890
that we do the sanitization.

00:37:09.890 --> 00:37:12.620
So there's no performance
difference between inlining

00:37:12.620 --> 00:37:14.200
and linking an external
resource.

00:37:14.200 --> 00:37:17.350
AUDIENCE: And images I have
to host outside of the--

00:37:17.350 --> 00:37:17.830
COREY GOLDFEDER: Images.

00:37:17.830 --> 00:37:20.120
So I didn't mention something.

00:37:20.120 --> 00:37:25.260
Images, we proxy them through
Google image proxy.

00:37:25.260 --> 00:37:27.410
So they have to be
publicly visible.

00:37:27.410 --> 00:37:29.110
But aside from that, they
can be anywhere.

00:37:29.110 --> 00:37:31.820
So anywhere you could use an
image with UiApp before you

00:37:31.820 --> 00:37:32.260
can use now.

00:37:32.260 --> 00:37:36.680
We do not have integrated image
hosting for Google Apps

00:37:36.680 --> 00:37:39.090
Script at the moment.

00:37:39.090 --> 00:37:41.300
AUDIENCE: It looks like I can
use it for most of the apps I

00:37:41.300 --> 00:37:42.440
will be writing.

00:37:42.440 --> 00:37:46.250
So what I shouldn't
use it for?

00:37:46.250 --> 00:37:48.330
What are the use cases
I shouldn't use them?

00:37:48.330 --> 00:37:49.820
COREY GOLDFEDER: I think this
is really great when you're

00:37:49.820 --> 00:37:54.050
trying to build something that's
about Google Apps.

00:37:54.050 --> 00:37:56.530
Where what are trying to build
requires deep integration or

00:37:56.530 --> 00:37:58.470
fast integration with
Google Apps.

00:37:58.470 --> 00:37:59.900
Because you have all
these APIs, right?

00:37:59.900 --> 00:38:00.990
They're baked right in.

00:38:00.990 --> 00:38:03.320
You can see that it's a single
line of code to get my inbox

00:38:03.320 --> 00:38:05.310
spreads from Gmail.

00:38:05.310 --> 00:38:06.220
Everything is like that.

00:38:06.220 --> 00:38:07.440
All the APIs are like that.

00:38:07.440 --> 00:38:10.910
So if you're writing an app
that's about Google, about

00:38:10.910 --> 00:38:13.390
your account or the user's
account, this is a really

00:38:13.390 --> 00:38:14.080
great tool.

00:38:14.080 --> 00:38:15.880
If you're trying to build a
service that has nothing to do

00:38:15.880 --> 00:38:18.740
with Google, some of the
limitations we're putting on

00:38:18.740 --> 00:38:21.680
you are going to be limiting
unnecessarily.

00:38:21.680 --> 00:38:23.390
The rewriting of HTML,
et cetera.

00:38:23.390 --> 00:38:25.110
You won't need those things,
because you're not using any

00:38:25.110 --> 00:38:26.670
Google features anyways.

00:38:26.670 --> 00:38:31.180
So for those cases, Google, as
a company, has a lot of ways

00:38:31.180 --> 00:38:32.560
that you can build apps.

00:38:32.560 --> 00:38:34.290
But if you're trying to do tight
integration with apps

00:38:34.290 --> 00:38:37.250
and particularly we're trying to
do extensions to Apps, this

00:38:37.250 --> 00:38:39.100
is the only way to write
extensions to apps.

00:38:39.100 --> 00:38:40.705
So if you're trying to do
anything with tight

00:38:40.705 --> 00:38:41.990
integration to apps,
I really encourage

00:38:41.990 --> 00:38:44.290
you to use Apps Script.

00:38:44.290 --> 00:38:45.010
AUDIENCE: OK, thanks.

00:38:45.010 --> 00:38:46.260
This is great.

00:38:48.450 --> 00:38:51.340
AUDIENCE: You mentioned pictures
must be [INAUDIBLE]

00:38:51.340 --> 00:38:52.060
publicly.

00:38:52.060 --> 00:38:56.050
So I cannot take any images
from my Google Drive?

00:38:56.050 --> 00:38:57.960
COREY GOLDFEDER: If there's a
publicly visible URL for that

00:38:57.960 --> 00:39:00.070
image, I believe you can
set that in Drive.

00:39:00.070 --> 00:39:00.850
Although I could be wrong.

00:39:00.850 --> 00:39:02.530
I believe there's a way
to set a publicly--

00:39:02.530 --> 00:39:03.720
AUDIENCE: But only
if it's public?

00:39:03.720 --> 00:39:04.530
COREY GOLDFEDER: It
has to be public.

00:39:04.530 --> 00:39:08.590
This is, actually, a security
restriction for very

00:39:08.590 --> 00:39:09.380
interesting reasons.

00:39:09.380 --> 00:39:11.840
There's a lot of dangerous
things you can do with images,

00:39:11.840 --> 00:39:15.240
shockingly dangerous code that
an image can cost to execute.

00:39:15.240 --> 00:39:18.370
All we do is make sure that
that image that you load

00:39:18.370 --> 00:39:19.860
doesn't have any of those
things in it.

00:39:19.860 --> 00:39:21.590
And we need to be able
to load that on the

00:39:21.590 --> 00:39:23.310
server, not on the client.

00:39:23.310 --> 00:39:24.990
Because on the client,
it's too late.

00:39:24.990 --> 00:39:27.930
Once we've loaded that image,
we can detect that something

00:39:27.930 --> 00:39:28.800
bad happened.

00:39:28.800 --> 00:39:31.370
AUDIENCE: But if it's already
on Google Drive, you have

00:39:31.370 --> 00:39:32.570
access to it.

00:39:32.570 --> 00:39:33.270
COREY GOLDFEDER: That
is a good point.

00:39:33.270 --> 00:39:36.090
And in the future, we probably
should look into an

00:39:36.090 --> 00:39:37.930
integration where we can serve
directly from Drive.

00:39:37.930 --> 00:39:39.760
AUDIENCE: --or from
the Picasa.

00:39:39.760 --> 00:39:41.130
COREY GOLDFEDER: And
I see that my

00:39:41.130 --> 00:39:42.320
team members are nodding.

00:39:42.320 --> 00:39:44.110
This is something we
have talked about.

00:39:44.110 --> 00:39:47.270
At the moment, we do not treat
pictures from Google any

00:39:47.270 --> 00:39:49.490
different than any
other pictures.

00:39:49.490 --> 00:39:52.040
But that is definitely something
that is certainly

00:39:52.040 --> 00:39:53.660
something we've thought about
and should think about.

00:39:53.660 --> 00:39:57.120
AUDIENCE: What about PDF?

00:39:57.120 --> 00:39:57.600
COREY GOLDFEDER: Actually,
I don't know.

00:39:57.600 --> 00:39:58.400
I think PDFs will work.

00:39:58.400 --> 00:39:59.830
We should find out.

00:39:59.830 --> 00:40:01.610
AUDIENCE: I mean,
private PDFs?

00:40:01.610 --> 00:40:03.750
COREY GOLDFEDER: There's
no difference.

00:40:03.750 --> 00:40:06.580
Anything you're showing on an
image tag is going to have to

00:40:06.580 --> 00:40:08.650
go through the public path.

00:40:08.650 --> 00:40:10.140
AUDIENCE: OK.

00:40:10.140 --> 00:40:11.310
COREY GOLDFEDER: But you
can link to things.

00:40:11.310 --> 00:40:13.180
Because you can link to things,
and load them in the

00:40:13.180 --> 00:40:15.930
page, et cetera.

00:40:15.930 --> 00:40:17.110
Are there any other questions?

00:40:17.110 --> 00:40:19.950
There are two microphones.

00:40:19.950 --> 00:40:22.910
Going once, going twice.

00:40:22.910 --> 00:40:24.390
Well, thank you very much.

00:40:24.390 --> 00:40:25.860
And I hope that you
enjoy working

00:40:25.860 --> 00:40:27.110
with Google Apps Script.

