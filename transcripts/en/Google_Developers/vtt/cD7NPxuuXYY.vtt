WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:02.671
WOJTEK KALICINSKI: Have you
ever had to join a new team

00:00:02.671 --> 00:00:04.370
and jump into coding
quickly, but found

00:00:04.370 --> 00:00:06.820
that setting up all the
tools and external libraries

00:00:06.820 --> 00:00:08.307
is taking forever?

00:00:08.307 --> 00:00:10.640
I know the last thing I need
when approaching a deadline

00:00:10.640 --> 00:00:13.450
is to spend time trying
to make my project build.

00:00:13.450 --> 00:00:16.059
That's why Android Studio
includes a simple to use

00:00:16.059 --> 00:00:19.390
and powerful build system based
on Gradle that makes you more

00:00:19.390 --> 00:00:21.660
productive from the get-go.

00:00:21.660 --> 00:00:23.720
It favors convention
over configuration,

00:00:23.720 --> 00:00:26.230
giving you [INAUDIBLE]
defaults to get you started,

00:00:26.230 --> 00:00:28.910
while still allowing for more
advanced features like better

00:00:28.910 --> 00:00:32.970
library management, built-in
multi-APK support, and more.

00:00:32.970 --> 00:00:34.600
Let me show you a few examples.

00:00:34.600 --> 00:00:37.520
Your build configuration and
all your projects' dependencies

00:00:37.520 --> 00:00:40.870
are kept in Gradle build files
using an intuitive declarative

00:00:40.870 --> 00:00:42.110
syntax.

00:00:42.110 --> 00:00:43.690
These files are
the single source

00:00:43.690 --> 00:00:45.470
of truth about your project.

00:00:45.470 --> 00:00:48.670
What this means is essentially
that any changes you make here

00:00:48.670 --> 00:00:51.330
will be automatically
reflected in the IDE,

00:00:51.330 --> 00:00:53.500
so features like code
completion, for example,

00:00:53.500 --> 00:00:56.930
are always up to date with
your project's configuration.

00:00:56.930 --> 00:00:59.350
Even better, the same
build files can also

00:00:59.350 --> 00:01:01.440
be used by Gradle
on the command line

00:01:01.440 --> 00:01:03.730
and in your continuous
integration server,

00:01:03.730 --> 00:01:06.140
ensuring consistent
and reproducible builds

00:01:06.140 --> 00:01:07.620
in any environment.

00:01:07.620 --> 00:01:09.770
When you've spent years
with Android Eclipse,

00:01:09.770 --> 00:01:12.180
it is a big task to
learn a new build system.

00:01:12.180 --> 00:01:14.670
That's why when importing
a project from Eclipse,

00:01:14.670 --> 00:01:18.020
Android Studio automatically
creates Gradle files for you,

00:01:18.020 --> 00:01:20.510
and even identifies
commonly used libraries

00:01:20.510 --> 00:01:22.400
and brings them in
as dependencies.

00:01:22.400 --> 00:01:25.700
The basic configuration for you
app like the application ID,

00:01:25.700 --> 00:01:29.020
minimum and target SDK,
and versioning information

00:01:29.020 --> 00:01:30.670
are now declared in
the default config

00:01:30.670 --> 00:01:32.580
section of the build file.

00:01:32.580 --> 00:01:35.180
You can also see any
local and remote libraries

00:01:35.180 --> 00:01:38.240
that your project depends on
in the dependency section.

00:01:38.240 --> 00:01:40.090
In the case when
Android Studio fails

00:01:40.090 --> 00:01:43.080
to recognize your dependency
when importing a project,

00:01:43.080 --> 00:01:45.570
or if you're just looking
to add a new library,

00:01:45.570 --> 00:01:48.220
you can easily find out the
right package name and version

00:01:48.220 --> 00:01:51.826
to put here by using
the Maven search dialog.

00:01:51.826 --> 00:01:53.450
If you're still
confused, and just want

00:01:53.450 --> 00:01:56.060
to get started quickly,
you can get some examples

00:01:56.060 --> 00:01:58.970
of useful libraries like the
F [? Compact ?] and others

00:01:58.970 --> 00:02:01.400
on the Gradle.please website.

00:02:01.400 --> 00:02:04.580
Another challenge when creating
or using third party libraries

00:02:04.580 --> 00:02:06.440
was that there used
to be no efficient way

00:02:06.440 --> 00:02:08.650
to distribute additional
Android-specific

00:02:08.650 --> 00:02:10.840
resources along with code.

00:02:10.840 --> 00:02:12.770
You either had to move
directories around

00:02:12.770 --> 00:02:14.760
or be limited to
a JAR file, which

00:02:14.760 --> 00:02:17.210
can only contain Java classes.

00:02:17.210 --> 00:02:18.950
With Gradle, we've
introduced support

00:02:18.950 --> 00:02:21.500
for the Android
Archive Format, AAR,

00:02:21.500 --> 00:02:23.870
for short, which lets
you publish or attach

00:02:23.870 --> 00:02:27.950
to your project a self-contained
library with all its resources,

00:02:27.950 --> 00:02:30.120
assets, and even
manifest entries.

00:02:30.120 --> 00:02:32.940
But there is so much more in
Android Studio than just better

00:02:32.940 --> 00:02:34.360
library management.

00:02:34.360 --> 00:02:36.980
Have you ever had to build
multiple versions of your app

00:02:36.980 --> 00:02:39.990
and deal with code duplication
or other workarounds?

00:02:39.990 --> 00:02:42.320
With the flexibility
of Gradle, you

00:02:42.320 --> 00:02:43.790
can now create
different variants

00:02:43.790 --> 00:02:46.460
of the same application
from a single project.

00:02:46.460 --> 00:02:48.420
You get to debug and
release build types

00:02:48.420 --> 00:02:50.760
by default, and together
with product flavors

00:02:50.760 --> 00:02:54.740
that you set up, they create
what we call build variants.

00:02:54.740 --> 00:02:56.345
Build types and
product flavors are

00:02:56.345 --> 00:02:59.200
a very powerful and
customizable concept.

00:02:59.200 --> 00:03:02.290
For example, you can define
separate sign-in configurations

00:03:02.290 --> 00:03:04.720
for each build
type, or if you want

00:03:04.720 --> 00:03:07.210
to upload a free and paid
version of your app to the Play

00:03:07.210 --> 00:03:10.810
Store, you could override the
application ID previously known

00:03:10.810 --> 00:03:12.940
as Package Name
for both flavors.

00:03:12.940 --> 00:03:13.540
Easy.

00:03:13.540 --> 00:03:16.270
Moreover, each type,
flavor, and variant

00:03:16.270 --> 00:03:19.250
can contain its own bits
of code and resources,

00:03:19.250 --> 00:03:22.250
which will be merged
with the main code base.

00:03:22.250 --> 00:03:24.800
It's even possible to specify
additional permissions

00:03:24.800 --> 00:03:27.620
and components or
override manifest settings

00:03:27.620 --> 00:03:29.770
that you only want to
have in certain flavors

00:03:29.770 --> 00:03:31.320
but not in others.

00:03:31.320 --> 00:03:34.140
You can use this mechanism
together with multi-APK support

00:03:34.140 --> 00:03:38.310
in the Play Store to create and
publish device-specific APKs

00:03:38.310 --> 00:03:42.480
for different screen densities,
CPU types, or API levels.

00:03:42.480 --> 00:03:45.390
The important wins here are
a better developer experience

00:03:45.390 --> 00:03:49.080
for you and smaller download
sizes for your users.

00:03:49.080 --> 00:03:51.210
When working with
variants, Android Studio

00:03:51.210 --> 00:03:54.360
will only show files relevant to
the currently selected version

00:03:54.360 --> 00:03:56.040
in the Project Overview.

00:03:56.040 --> 00:03:58.560
To change which version of
your app you want to work on,

00:03:58.560 --> 00:04:00.630
use the Build Variants pane.

00:04:00.630 --> 00:04:03.090
You can also check out all
the automatically generated

00:04:03.090 --> 00:04:07.130
build tasks for each of your
variants in the Gradle sidebar.

00:04:07.130 --> 00:04:08.830
Just use the
Assemble task if you

00:04:08.830 --> 00:04:11.900
want to build all possible
configurations of your app.

00:04:11.900 --> 00:04:13.830
As you can see,
with Android Studio,

00:04:13.830 --> 00:04:15.760
we finally have
a modern powerful

00:04:15.760 --> 00:04:19.750
build system that takes the pain
out of managing your projects.

00:04:19.750 --> 00:04:22.480
We've just scratched the surface
of what's possible with Gradle

00:04:22.480 --> 00:04:25.550
in this video, so if you
have any other questions,

00:04:25.550 --> 00:04:28.080
join our community on Google+.

00:04:28.080 --> 00:04:32.070
See you in the next Android
Studio videos very soon.

