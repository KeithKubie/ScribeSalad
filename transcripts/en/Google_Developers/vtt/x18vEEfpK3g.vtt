WEBVTT
Kind: captions
Language: en

00:00:01.992 --> 00:00:03.160
RACHEL SHEARER: Hi.

00:00:03.160 --> 00:00:04.570
My name is Rachel Shearer.

00:00:04.570 --> 00:00:07.080
I'm a software engineer on
the Google Accessibility

00:00:07.080 --> 00:00:08.240
Engineering Team.

00:00:08.240 --> 00:00:10.310
And I'm here to talk about
making your web apps

00:00:10.310 --> 00:00:13.980
accessible using HTML5
and ChromeVox.

00:00:13.980 --> 00:00:15.630
So I'm actually going
to start this thing

00:00:15.630 --> 00:00:18.540
right off with a demo.

00:00:18.540 --> 00:00:21.080
I'm guessing that some of you
have seen this page before.

00:00:21.080 --> 00:00:24.010
This is Sergey's Google+
profile page.

00:00:24.010 --> 00:00:26.256
There's a UI control in the
upper right called the Add to

00:00:26.256 --> 00:00:29.460
Circles widget that you can use
if you want to add Sergey

00:00:29.460 --> 00:00:31.560
to one of your Google+
circles.

00:00:31.560 --> 00:00:33.900
You just hover over it with your
mouse and you can see the

00:00:33.900 --> 00:00:36.030
drop-down menu open
up underneath.

00:00:36.030 --> 00:00:39.720
You can interact with this menu
by checking checkboxes.

00:00:39.720 --> 00:00:41.870
You can create a new circle
at the bottom.

00:00:41.870 --> 00:00:45.480
And I'm guessing that most
of you out there probably

00:00:45.480 --> 00:00:48.050
interact with the control the
same way, hovering over it

00:00:48.050 --> 00:00:49.320
with your mouse.

00:00:49.320 --> 00:00:52.170
And so this is an interaction
that looks really good, and it

00:00:52.170 --> 00:00:54.240
performs really well for you.

00:00:54.240 --> 00:00:56.540
But now, I want you to
try something for me.

00:00:56.540 --> 00:00:58.820
Imagine that you can't
see the screen.

00:00:58.820 --> 00:01:01.230
And you can close your
eyes if that helps.

00:01:01.230 --> 00:01:03.980
So you can't see the screen and
you want to add Sergey to

00:01:03.980 --> 00:01:05.150
your circles.

00:01:05.150 --> 00:01:07.150
But if you can't see
the screen, then

00:01:07.150 --> 00:01:08.580
you can't use a mouse.

00:01:08.580 --> 00:01:10.590
So maybe you'll be using
a keyboard instead.

00:01:10.590 --> 00:01:13.650
But how do you hover over the
Add to Circles widget if

00:01:13.650 --> 00:01:15.930
you're just using a keyboard?

00:01:15.930 --> 00:01:17.630
The answer is you can't.

00:01:17.630 --> 00:01:19.130
It's impossible.

00:01:19.130 --> 00:01:22.140
So this is an example of a UI
interaction that looks really

00:01:22.140 --> 00:01:25.230
good and performs really well,
but it only performs really

00:01:25.230 --> 00:01:27.330
well for a certain
kind of user.

00:01:27.330 --> 00:01:30.280
And that's the kind of user
who can use a mouse.

00:01:30.280 --> 00:01:32.980
But as web developers, it's
really important for us to

00:01:32.980 --> 00:01:35.020
take into account that there's
lots of different kinds of

00:01:35.020 --> 00:01:37.870
users, and not all of them
can use a mouse.

00:01:37.870 --> 00:01:39.880
And we really need to make sure
that we're doing a good

00:01:39.880 --> 00:01:41.760
job for those users.

00:01:41.760 --> 00:01:44.500
And that's what accessibility is
all about, making your web

00:01:44.500 --> 00:01:46.400
apps usable by everyone.

00:01:46.400 --> 00:01:49.080
It includes people who can't
use the mouse, and it also

00:01:49.080 --> 00:01:51.990
includes people who use
assistive technology.

00:01:51.990 --> 00:01:55.170
Assistive technology is
basically software or hardware

00:01:55.170 --> 00:01:57.400
that makes it easier for someone
with a disability to

00:01:57.400 --> 00:01:59.050
use the internet.

00:01:59.050 --> 00:02:01.380
So there are lots of different
types of disabilities and

00:02:01.380 --> 00:02:03.510
special needs that
users might have.

00:02:03.510 --> 00:02:06.240
But for the purposes of this
tutorial, I'm going to focus

00:02:06.240 --> 00:02:10.120
on solutions for three groups
of users, blind users, users

00:02:10.120 --> 00:02:13.380
with low vision, and
motor-impaired users.

00:02:13.380 --> 00:02:15.490
And the reason for that is that
we know something very

00:02:15.490 --> 00:02:17.430
powerful about these users.

00:02:17.430 --> 00:02:19.930
We actually have a lot of
information about how they're

00:02:19.930 --> 00:02:22.330
going to be accessing
our apps.

00:02:22.330 --> 00:02:25.040
Blind users will generally use a
screen reader that describes

00:02:25.040 --> 00:02:27.220
the page using speech
or Braille output.

00:02:27.220 --> 00:02:29.000
And I actually have a
picture of a Braille

00:02:29.000 --> 00:02:31.020
display right here.

00:02:31.020 --> 00:02:33.370
This is a close-up of
a Braille display.

00:02:33.370 --> 00:02:36.250
And most blind users who use a
screen reader, whether or not

00:02:36.250 --> 00:02:38.900
it has speech output or Braille
output, will use

00:02:38.900 --> 00:02:41.260
standard keyboard for input.

00:02:41.260 --> 00:02:43.870
Low vision users will generally
use large fonts or

00:02:43.870 --> 00:02:45.630
something called a
screen magnifier.

00:02:45.630 --> 00:02:47.450
And I'll show you what a
screen magnifier looks

00:02:47.450 --> 00:02:49.590
like on this tab.

00:02:49.590 --> 00:02:52.340
So this is an example of
a screen magnifier.

00:02:52.340 --> 00:02:54.930
I'm selecting part of the page,
and you can see that

00:02:54.930 --> 00:02:57.670
it's expanding at the top,
making it really big, so that

00:02:57.670 --> 00:03:00.312
someone who has low vision
will be able to see it.

00:03:00.312 --> 00:03:02.720
And so that's the second
type of user.

00:03:02.720 --> 00:03:05.610
Motor-impaired users, who can't
use a mouse, might use

00:03:05.610 --> 00:03:08.200
some kind of special keyboard
or even a voice control

00:03:08.200 --> 00:03:10.490
interface to interact
with your app.

00:03:10.490 --> 00:03:13.930
So because we know a lot about
the assistive technology these

00:03:13.930 --> 00:03:16.820
users are going to be using, we
can do a lot to make sure

00:03:16.820 --> 00:03:19.420
that our web apps perform
well for them.

00:03:19.420 --> 00:03:21.780
I also want to note that these
three groups of users have

00:03:21.780 --> 00:03:23.490
something big in common.

00:03:23.490 --> 00:03:25.850
And I've actually already
talked about it.

00:03:25.850 --> 00:03:28.730
These three groups of users
can't use the mouse.

00:03:28.730 --> 00:03:31.340
So when you're testing your
apps, it's really important to

00:03:31.340 --> 00:03:33.700
make sure that you test it with
the keyword and that you

00:03:33.700 --> 00:03:36.770
can use it without
using a mouse.

00:03:36.770 --> 00:03:38.830
So now that we know a little bit
about the different kinds

00:03:38.830 --> 00:03:41.530
of users who might be accessing
our app I want to

00:03:41.530 --> 00:03:43.900
talk a little bit more
about testing.

00:03:43.900 --> 00:03:46.200
I already mentioned that we
should be testing our apps

00:03:46.200 --> 00:03:47.330
using just the keyboard.

00:03:47.330 --> 00:03:49.970
But I want to introduce a tool
that I'm going to be using

00:03:49.970 --> 00:03:52.240
during this talk.

00:03:52.240 --> 00:03:53.970
This is ChromeVox.

00:03:53.970 --> 00:03:56.320
ChromeVox is a screen reader
for Chrome that my team at

00:03:56.320 --> 00:03:57.390
Google built.

00:03:57.390 --> 00:03:59.500
ChromeVox will help me
demonstrate better how an

00:03:59.500 --> 00:04:02.940
assistive technology user might
experience a web app.

00:04:02.940 --> 00:04:04.720
It's really easy to use,
because it's a Chrome

00:04:04.720 --> 00:04:07.990
extension, and it was designed
completely for the web.

00:04:07.990 --> 00:04:10.590
You control it using keyboard
shortcuts, and it speaks the

00:04:10.590 --> 00:04:14.290
contents of pages using
the Chrome TTS API.

00:04:14.290 --> 00:04:16.820
There's a lot of other kinds of
screen readers, but we feel

00:04:16.820 --> 00:04:19.950
that ChromeVox particularly
shines as a testing tool.

00:04:19.950 --> 00:04:22.480
It interprets pages pretty much
the same way that other

00:04:22.480 --> 00:04:23.740
screen readers do.

00:04:23.740 --> 00:04:26.280
But because it's a Chrome
extension it's really easy for

00:04:26.280 --> 00:04:29.110
developers to set up and use.

00:04:29.110 --> 00:04:31.090
So how does ChromeVox work?

00:04:31.090 --> 00:04:34.380
Well, it works the same way as
any other screen reader.

00:04:34.380 --> 00:04:35.590
Let me demonstrate.

00:04:35.590 --> 00:04:37.520
It's actually been running in
the background this entire

00:04:37.520 --> 00:04:39.710
time, but I'm going to turn it
on now to let you hear what it

00:04:39.710 --> 00:04:40.783
sounds like.

00:04:40.783 --> 00:04:43.000
CHROMEVOX: Screen readers
and magnifier--

00:04:43.000 --> 00:04:44.790
RACHEL SHEARER: So I'm going
to walk through this slide

00:04:44.790 --> 00:04:47.130
using keyboard shortcuts that
control ChromeVox so you can

00:04:47.130 --> 00:04:48.330
hear what it has to say.

00:04:48.330 --> 00:04:49.370
And it actually already started

00:04:49.370 --> 00:04:51.420
speaking this slide already.

00:04:51.420 --> 00:04:52.380
CHROMEVOX: Heading
[? group ?].

00:04:52.380 --> 00:04:54.060
Screen Reader Introduction.

00:04:54.060 --> 00:04:55.490
Heading two.

00:04:55.490 --> 00:04:59.150
Screen readers and magnifiers
allow the user to explore both

00:04:59.150 --> 00:05:01.670
static text and interactive
elements.

00:05:01.670 --> 00:05:03.510
RACHEL SHEARER: All I'm doing is
using the keyboard to drive

00:05:03.510 --> 00:05:04.780
ChromeVox around the page.

00:05:04.780 --> 00:05:07.900
CHROMEVOX: Here's an example
web form to demonstrate.

00:05:07.900 --> 00:05:08.990
Enter your name.

00:05:08.990 --> 00:05:10.530
Edit text.

00:05:10.530 --> 00:05:12.580
Choose your favorite
color, red.

00:05:12.580 --> 00:05:14.530
List box 1 of 10.

00:05:14.530 --> 00:05:16.140
Submit button.

00:05:16.140 --> 00:05:17.610
Having trouble?

00:05:17.610 --> 00:05:19.180
Click here for help.

00:05:19.180 --> 00:05:20.020
Link.

00:05:20.020 --> 00:05:21.950
RACHEL SHEARER: So you saw that
ChromeVox WAS not only

00:05:21.950 --> 00:05:26.190
speaking the static text, but
it was also giving you sound

00:05:26.190 --> 00:05:29.050
indicators of what kind of
UI element that you were

00:05:29.050 --> 00:05:30.800
interacting with at
any given time.

00:05:30.800 --> 00:05:33.810
And that's basically how all
screen readers work.

00:05:33.810 --> 00:05:35.970
So someone who can't see the
screen is going to get the

00:05:35.970 --> 00:05:37.730
full experience of what's
on the screen.

00:05:37.730 --> 00:05:39.960
So now that we know more about
the different kinds of

00:05:39.960 --> 00:05:42.460
assistive technology and how
we can test our apps using

00:05:42.460 --> 00:05:45.460
only the keyboard and screen
reader like ChromeVox, let's

00:05:45.460 --> 00:05:49.050
talk about how we get there, how
we get to building a more

00:05:49.050 --> 00:05:50.660
accessible app.

00:05:50.660 --> 00:05:53.020
First, I'm going to talk about
the building blocks, the

00:05:53.020 --> 00:05:54.730
essential things that you need
to know when you're just

00:05:54.730 --> 00:05:56.050
starting out.

00:05:56.050 --> 00:05:57.640
And then I'm going to introduce
an approach that

00:05:57.640 --> 00:06:00.270
we've been trying out here
at Google, a systematic

00:06:00.270 --> 00:06:02.590
step-by-step approach to testing
and building for

00:06:02.590 --> 00:06:04.160
accessibility.

00:06:04.160 --> 00:06:06.580
After that, I'm going to go
a little deeper and talk a

00:06:06.580 --> 00:06:09.840
little bit more about custom
interactive controls, some of

00:06:09.840 --> 00:06:12.430
the more complex interactions
that you see, like the Add to

00:06:12.430 --> 00:06:13.890
Circles widget.

00:06:13.890 --> 00:06:16.150
And then, at the end, I'm going
to list some tools and

00:06:16.150 --> 00:06:18.120
resources that you can
use to help you.

00:06:18.120 --> 00:06:20.810
So let's start from scratch,
at the DOM.

00:06:20.810 --> 00:06:23.140
We can look at the DOM of a page
by opening it up in the

00:06:23.140 --> 00:06:26.130
Developer Tools, which I'm
going to do right now.

00:06:26.130 --> 00:06:29.120
So this right here in the
left-hand pane is the DOM.

00:06:29.120 --> 00:06:30.820
You can see all of the
slide elements.

00:06:30.820 --> 00:06:32.580
Inside this slide you
see the hgroup

00:06:32.580 --> 00:06:33.990
element and the article.

00:06:33.990 --> 00:06:37.690
And you see the slide that I'm
looking at right now, and this

00:06:37.690 --> 00:06:39.630
is the DOM structure,
article tags,

00:06:39.630 --> 00:06:41.930
headings, and the hierarchy.

00:06:41.930 --> 00:06:44.670
So the interesting thing about
the DOM is visually impaired

00:06:44.670 --> 00:06:47.020
users using assistive technology
like a screen

00:06:47.020 --> 00:06:49.750
reader see only the DOM.

00:06:49.750 --> 00:06:51.590
It doesn't matter what
your page looks like.

00:06:51.590 --> 00:06:54.250
They see only the building
blocks of the page.

00:06:54.250 --> 00:06:56.040
And keyboard-only
users navigate

00:06:56.040 --> 00:06:57.710
the page in DOM order.

00:06:57.710 --> 00:07:00.330
So they go basically top to
bottom in the DOM, moving

00:07:00.330 --> 00:07:02.850
focus around to navigate
the page.

00:07:02.850 --> 00:07:05.110
So you really have to adjust
your thinking here.

00:07:05.110 --> 00:07:07.900
The DOM is the users' mental
image of the page.

00:07:07.900 --> 00:07:10.150
They can't see what the page
looks like, and they're only

00:07:10.150 --> 00:07:11.400
seeing the DOM.

00:07:11.400 --> 00:07:14.620
So the way you build your app,
the app skeleton, that's the

00:07:14.620 --> 00:07:16.590
way these users are going
to interact with it.

00:07:16.590 --> 00:07:19.040
So knowing this, we can think
of some best practices that

00:07:19.040 --> 00:07:20.660
will help these users.

00:07:20.660 --> 00:07:23.170
The first is that we want to
create logical sections of the

00:07:23.170 --> 00:07:25.320
document, to group interface
elements

00:07:25.320 --> 00:07:27.130
that are related together.

00:07:27.130 --> 00:07:30.700
And you can use HTML5 semantic
elements like nav and header

00:07:30.700 --> 00:07:33.880
to make this easier, NAV to
group all your navigation

00:07:33.880 --> 00:07:35.990
elements together, and
header to group

00:07:35.990 --> 00:07:37.320
all your header content.

00:07:37.320 --> 00:07:39.840
And there's other HTML5
semantic elements too.

00:07:39.840 --> 00:07:43.510
Even some old school ones, like
h1, h2, and h3 will help

00:07:43.510 --> 00:07:46.810
users better understand the
structure of your app.

00:07:46.810 --> 00:07:48.890
You also want to make sure that
parTS of controls are

00:07:48.890 --> 00:07:50.800
grouped together in the DOM.

00:07:50.800 --> 00:07:53.320
So I see this a lot, where
you'll have a drop-down menu

00:07:53.320 --> 00:07:56.070
button somewhere in the DOM, but
drop-down menu itself is

00:07:56.070 --> 00:07:58.170
all the way at the
end of the DOM.

00:07:58.170 --> 00:08:01.680
And you can use CSS to make this
make sense visually, but

00:08:01.680 --> 00:08:03.970
if someone sees only the DOM,
they're not going to know

00:08:03.970 --> 00:08:05.920
where that menu is, because
it's all the way at

00:08:05.920 --> 00:08:07.640
the end of the DOM.

00:08:07.640 --> 00:08:10.000
So you can make things easier
by grouping things that are

00:08:10.000 --> 00:08:13.210
supposed to be together
together in the DOM.

00:08:13.210 --> 00:08:15.800
And then this last point is
pretty basic, but I'm going to

00:08:15.800 --> 00:08:16.850
say it again.

00:08:16.850 --> 00:08:19.420
You really want to make sure
that you're using CSS for

00:08:19.420 --> 00:08:21.660
layout instead of
using tables.

00:08:21.660 --> 00:08:24.650
For these users, tables
mean structured data.

00:08:24.650 --> 00:08:27.620
They can't see what the page
looks like, so using tables to

00:08:27.620 --> 00:08:29.190
lay out your page is
going to be very

00:08:29.190 --> 00:08:32.220
confusing for these users.

00:08:32.220 --> 00:08:34.820
So this slide is an example
of the things

00:08:34.820 --> 00:08:36.130
I was talking about.

00:08:36.130 --> 00:08:38.360
This is a quote that looks like
it makes a certain amount

00:08:38.360 --> 00:08:39.450
of sense visually.

00:08:39.450 --> 00:08:43.780
"The rain in Spain stays mainly
in the plain." So let's

00:08:43.780 --> 00:08:45.530
see how ChromeVox reads it.

00:08:45.530 --> 00:08:48.450
And remember that ChromeVox,
because of the screen reader,

00:08:48.450 --> 00:08:50.250
is reading only the DOM.

00:08:50.250 --> 00:08:52.110
So let's see what ChromeVox
does as I move

00:08:52.110 --> 00:08:53.150
it through the page.

00:08:53.150 --> 00:08:54.110
CHROMEVOX: Here's a quote.

00:08:54.110 --> 00:08:56.300
article.

00:08:56.300 --> 00:09:02.450
"The plain in rain stays
mainly in the Spain."

00:09:02.450 --> 00:09:04.640
RACHEL SHEARER: So that didn't
make a whole lot of sense.

00:09:04.640 --> 00:09:08.250
And even though this sentence
makes total sense visually,

00:09:08.250 --> 00:09:10.480
ChromeVox was jumping
all over the place.

00:09:10.480 --> 00:09:13.480
And that's because if I open up
the Developer Inspector and

00:09:13.480 --> 00:09:16.890
inspect these elements, you'll
see that the DOM for the page

00:09:16.890 --> 00:09:19.480
actually looks like this.

00:09:19.480 --> 00:09:21.780
The DOM underneath the
page has these words

00:09:21.780 --> 00:09:22.710
all over the place.

00:09:22.710 --> 00:09:26.175
"Plain in rain stays mainly in
the Spain." And we've used CSS

00:09:26.175 --> 00:09:28.960
to position it in a way that
looks like it makes sense.

00:09:28.960 --> 00:09:31.960
But ChromeVox is reading
the DOM.

00:09:31.960 --> 00:09:33.810
The layout of these words in
the DOM is exactly what

00:09:33.810 --> 00:09:35.390
ChromeVox is going to read.

00:09:35.390 --> 00:09:37.850
It doesn't know what the page
looks like visually.

00:09:37.850 --> 00:09:39.990
It's only reading the DOM.

00:09:39.990 --> 00:09:42.140
So it's really important to make
sure that your DOM make

00:09:42.140 --> 00:09:44.320
sense when you're building
a web app.

00:09:44.320 --> 00:09:47.300
The next thing I want to talk
about is interactive controls.

00:09:47.300 --> 00:09:50.280
And this, I swear, is one of the
easiest things you can do

00:09:50.280 --> 00:09:52.700
to improve the accessibility
of your site.

00:09:52.700 --> 00:09:55.500
Instead of using generic divs
and spans for buttons and

00:09:55.500 --> 00:09:58.930
links and stuff like that, use
the native HTML tag that's

00:09:58.930 --> 00:10:00.460
most appropriate.

00:10:00.460 --> 00:10:03.830
I use the terms div soup and
span salad to describe apps

00:10:03.830 --> 00:10:04.990
that are built like this.

00:10:04.990 --> 00:10:06.460
Don't use div soup.

00:10:06.460 --> 00:10:07.870
Don't use span salad.

00:10:07.870 --> 00:10:10.610
It just creates a really
confusing DOM, and it confuses

00:10:10.610 --> 00:10:11.980
these users.

00:10:11.980 --> 00:10:13.710
And there's two reasons why.

00:10:13.710 --> 00:10:17.430
First, screen readers can't
identify generic divs or spans

00:10:17.430 --> 00:10:18.660
as controls.

00:10:18.660 --> 00:10:21.150
They just see a div or a span
in the DOM, and they don't

00:10:21.150 --> 00:10:22.820
know what that's
supposed to be.

00:10:22.820 --> 00:10:25.350
They don't know that your span
with an onclick handler is

00:10:25.350 --> 00:10:26.700
supposed to be a link.

00:10:26.700 --> 00:10:28.830
They can't crawl through the
JavaScript to try and figure

00:10:28.830 --> 00:10:31.410
out exactly what the
developer meant.

00:10:31.410 --> 00:10:32.820
So they're just not going
to speak it as

00:10:32.820 --> 00:10:34.820
interactive at all.

00:10:34.820 --> 00:10:38.050
And a user can completely skip
over things that you want them

00:10:38.050 --> 00:10:40.630
to interact with because you've
identified them only as

00:10:40.630 --> 00:10:42.450
spans and divs.

00:10:42.450 --> 00:10:45.780
Also, spans and divs aren't
focusable by default.

00:10:45.780 --> 00:10:47.600
They won't receive
keyboard events.

00:10:47.600 --> 00:10:49.130
And this is even worse.

00:10:49.130 --> 00:10:52.120
A user who can see the screen
and who is trying to interact

00:10:52.120 --> 00:10:54.910
with something that you styled
as a button, if that's not

00:10:54.910 --> 00:10:57.110
focusable, they're never going
to be able to send the

00:10:57.110 --> 00:10:58.620
keyboard events do it.

00:10:58.620 --> 00:11:01.670
So no div soup and
no span salad.

00:11:01.670 --> 00:11:04.870
Use native HTML tags
wherever you can.

00:11:04.870 --> 00:11:07.620
I also want to note that there's
no reason not to use

00:11:07.620 --> 00:11:09.390
them for modern browsers.

00:11:09.390 --> 00:11:11.630
You can style them however you
want, and you can make them

00:11:11.630 --> 00:11:12.920
look like anything.

00:11:12.920 --> 00:11:14.430
And they give you focus
management and

00:11:14.430 --> 00:11:16.140
keyword support for free.

00:11:16.140 --> 00:11:19.040
Screen readers know exactly
how to identify them, and

00:11:19.040 --> 00:11:20.800
users know how to use them.

00:11:20.800 --> 00:11:23.270
And that's really one of the
most important parts.

00:11:23.270 --> 00:11:26.390
So this slide is a quick example
of how this works.

00:11:26.390 --> 00:11:28.060
On this slide there's
a button.

00:11:28.060 --> 00:11:30.175
And you can see that created
it using a div

00:11:30.175 --> 00:11:31.890
and an onclick handler.

00:11:31.890 --> 00:11:34.480
So let's see what
ChromeVox says.

00:11:34.480 --> 00:11:36.530
I'm going to turn ChromeVox
on again.

00:11:36.530 --> 00:11:39.350
CHROMEVOX: Spain heading
group custom button.

00:11:39.350 --> 00:11:42.300
Live coding example,
heading two.

00:11:42.300 --> 00:11:43.690
RACHEL SHEARER: So I'm just
going to move ChromeVox

00:11:43.690 --> 00:11:47.130
through this slide and we'll
see what it does.

00:11:47.130 --> 00:11:48.370
CHROMEVOX: Click
on this button.

00:11:48.370 --> 00:11:49.490
Article.

00:11:49.490 --> 00:11:50.300
Send.

00:11:50.300 --> 00:11:51.990
Clickable.

00:11:51.990 --> 00:11:55.155
RACHEL SHEARER: So you'll see it
said the word send, and it

00:11:55.155 --> 00:11:56.370
said clickable.

00:11:56.370 --> 00:11:58.550
But there's no indication
that it's a button.

00:11:58.550 --> 00:12:00.520
ChromeVox knows to
say clickable.

00:12:00.520 --> 00:12:03.050
It's smart enough to say
clickable when it encounters

00:12:03.050 --> 00:12:05.555
something that has an onclick
handler to let the user know

00:12:05.555 --> 00:12:08.140
that this button is somehow
interactive.

00:12:08.140 --> 00:12:11.690
But as a keyboard-only user,
if I try to press Enter in

00:12:11.690 --> 00:12:12.870
order to interact with
this button--

00:12:12.870 --> 00:12:15.020
I'm pressing Enter
like crazy now--

00:12:15.020 --> 00:12:15.900
nothing happens.

00:12:15.900 --> 00:12:18.530
That keyboard event isn't
getting sent to that button,

00:12:18.530 --> 00:12:21.100
and nothing is happening
on the page.

00:12:21.100 --> 00:12:24.170
But the good thing is, the fix
for this is really easy.

00:12:24.170 --> 00:12:26.660
You want to change this
div into a button.

00:12:26.660 --> 00:12:29.175
It's just one simple change,
and I'll make it right now.

00:12:29.175 --> 00:12:31.100
I'm going to turn ChromeVox
off first.

00:12:31.100 --> 00:12:33.010
CHROMEVOX: ChromeVox
is now inactive.

00:12:33.010 --> 00:12:35.880
RACHEL SHEARER: So I'm just
going to change this div tag

00:12:35.880 --> 00:12:38.770
into a button.

00:12:38.770 --> 00:12:41.170
And you'll see that nothing
visually on the page changed.

00:12:41.170 --> 00:12:44.020
The CSS is doing everything
right.

00:12:44.020 --> 00:12:46.080
So now let's try this out
with ChromeVox again.

00:12:49.260 --> 00:12:50.600
CHROMEVOX: Refresh button.

00:12:50.600 --> 00:12:50.970
RACHEL SHEARER: OK.

00:12:50.970 --> 00:12:53.160
Let's move on to the Send button
and see what happens.

00:12:53.160 --> 00:12:54.900
CHROMEVOX: Send button.

00:12:54.900 --> 00:12:55.190
RACHEL SHEARER: Right.

00:12:55.190 --> 00:12:55.890
This is great.

00:12:55.890 --> 00:12:57.830
ChromeVox said, send button.

00:12:57.830 --> 00:13:00.260
And it used an audio indicator
to indicate

00:13:00.260 --> 00:13:01.370
that this is a button.

00:13:01.370 --> 00:13:05.595
And if I press Enter, the alert
opens, just like the

00:13:05.595 --> 00:13:08.466
onclick handler is supposed
to do in the code.

00:13:08.466 --> 00:13:09.810
CHROMEVOX: Send button.

00:13:09.810 --> 00:13:12.190
RACHEL SHEARER: So this was a
really simple change, and this

00:13:12.190 --> 00:13:14.070
is something that is really
simple to do.

00:13:14.070 --> 00:13:16.720
But it can really save you a lot
of time later on, so you

00:13:16.720 --> 00:13:19.210
don't have to reimplement all
of this stuff later on your

00:13:19.210 --> 00:13:20.820
div soup and span salad.

00:13:20.820 --> 00:13:23.280
The next thing I want to
talk about is labeling.

00:13:23.280 --> 00:13:25.980
Labeling is also something that
is really important, now

00:13:25.980 --> 00:13:27.720
that we're talking
about controls.

00:13:27.720 --> 00:13:28.770
You want to make sure
that you're

00:13:28.770 --> 00:13:30.640
labeling your form elements.

00:13:30.640 --> 00:13:33.650
And the label element is really
perfect for this task.

00:13:33.650 --> 00:13:35.860
Another thing that you want to
make sure you're doing is

00:13:35.860 --> 00:13:38.470
labelling your images with
the alt attribute.

00:13:38.470 --> 00:13:40.150
And this is really
important too.

00:13:40.150 --> 00:13:43.270
All images need to have the alt
attribute, not just some

00:13:43.270 --> 00:13:45.830
of them, all of your images.

00:13:45.830 --> 00:13:48.890
And the reason why is that if
there is no alt attribute on

00:13:48.890 --> 00:13:51.430
an image, a screen reader is
just going to try and speak

00:13:51.430 --> 00:13:52.540
that image anyway.

00:13:52.540 --> 00:13:55.060
It's going to try and identify
that image to the user.

00:13:55.060 --> 00:13:58.140
But it's just going to speak
the file name of the image.

00:13:58.140 --> 00:14:01.390
And for really complex web apps,
that can get horrible.

00:14:01.390 --> 00:14:03.870
The final names for some of the
images that I see every

00:14:03.870 --> 00:14:07.130
day are really, really long
strings of characters.

00:14:07.130 --> 00:14:10.370
And that gives users a really
terrible experience.

00:14:10.370 --> 00:14:13.550
And I just want to say, if the
experience is that bad, these

00:14:13.550 --> 00:14:15.120
users will just leave.

00:14:15.120 --> 00:14:18.540
A page full of unlabeled form
fields and unlabeled images is

00:14:18.540 --> 00:14:21.210
a terrible experience
for users.

00:14:21.210 --> 00:14:22.910
And so there's two kinds
of alt texts

00:14:22.910 --> 00:14:24.290
that you need to have.

00:14:24.290 --> 00:14:27.450
Every image needs to have it,
but important images need to

00:14:27.450 --> 00:14:29.560
have descriptive alt texts.

00:14:29.560 --> 00:14:33.176
This is alt text that actually
describes what the image is.

00:14:33.176 --> 00:14:35.520
For images that are decorative,
you can give them

00:14:35.520 --> 00:14:36.720
blank alt text.

00:14:36.720 --> 00:14:39.630
So this is alt text that tells
the screen reader that it can

00:14:39.630 --> 00:14:41.460
skip this image entirely.

00:14:41.460 --> 00:14:43.990
Blank alt text tells the screen
reader not to try to

00:14:43.990 --> 00:14:46.820
read the file name, just skip
the image entirely.

00:14:46.820 --> 00:14:48.130
It's not necessary.

00:14:48.130 --> 00:14:51.300
And so you can see on this slide
I've got an image that's

00:14:51.300 --> 00:14:52.810
essentially a bullet point,
and I'm giving

00:14:52.810 --> 00:14:53.840
it blank alt text.

00:14:53.840 --> 00:14:56.050
We don't need a screen reader
going through a page, reading

00:14:56.050 --> 00:14:57.920
all of the bullet points.

00:14:57.920 --> 00:14:59.230
It's just not necessary.

00:14:59.230 --> 00:15:02.790
So this next slide is another
live example.

00:15:02.790 --> 00:15:05.020
This is a form that looks
like a lot of forms

00:15:05.020 --> 00:15:06.400
that I see every day.

00:15:06.400 --> 00:15:09.020
You've got these labels
underneath these text fields,

00:15:09.020 --> 00:15:10.550
username and PIN.

00:15:10.550 --> 00:15:13.150
And they're positioned visually
underneath the form.

00:15:13.150 --> 00:15:15.160
But you can see in the code
underneath that they're not

00:15:15.160 --> 00:15:18.570
actually explicitly associated
with the form the DOM.

00:15:18.570 --> 00:15:20.890
And we also have an image,
just for fun, that's

00:15:20.890 --> 00:15:22.480
unlabelled.

00:15:22.480 --> 00:15:25.195
So let's see what ChromeVox
does with this page.

00:15:25.195 --> 00:15:28.860
CHROMEVOX: Password edit
text, edit text.

00:15:28.860 --> 00:15:30.980
RACHEL SHEARER: So you'll see
it's saying, edit text and

00:15:30.980 --> 00:15:32.560
password edit text.

00:15:32.560 --> 00:15:36.100
It's saying password edit text
because we gave that input

00:15:36.100 --> 00:15:37.890
field the type password.

00:15:37.890 --> 00:15:39.360
So that's a little bit
better than just

00:15:39.360 --> 00:15:40.950
saying blank edit text.

00:15:40.950 --> 00:15:43.550
But for both of these fields,
there's actually no indication

00:15:43.550 --> 00:15:45.500
what the user is supposed
to put in there.

00:15:45.500 --> 00:15:46.520
There's no label.

00:15:46.520 --> 00:15:48.700
A user would have no idea what
they're supposed to do.

00:15:48.700 --> 00:15:50.440
Let's try out the image.

00:15:50.440 --> 00:15:53.490
CHROMEVOX: Password edit text,
nine zero one P three N nine

00:15:53.490 --> 00:15:55.140
four T three image.

00:15:55.140 --> 00:15:56.210
CHROMEVOX: So this is
an example of what

00:15:56.210 --> 00:15:57.370
I was talking about.

00:15:57.370 --> 00:15:59.810
It can't figure out that image
is supposed to be, so it just

00:15:59.810 --> 00:16:01.050
reads the file name.

00:16:01.050 --> 00:16:03.430
And it's totally inexplicable
what this image is supposed to

00:16:03.430 --> 00:16:05.480
be if you can't see
the screen.

00:16:05.480 --> 00:16:08.295
So, you can clearly see that
navigating around a page that

00:16:08.295 --> 00:16:11.380
is full of unlabeled field and
images will get really tedious

00:16:11.380 --> 00:16:13.200
for a user.

00:16:13.200 --> 00:16:16.080
And again, this is another
really easy fix.

00:16:16.080 --> 00:16:21.670
If you change these spans that
have username and PIN, you

00:16:21.670 --> 00:16:25.160
change it into labels using
the label tag, you can fix

00:16:25.160 --> 00:16:26.490
this problem really easily.

00:16:26.490 --> 00:16:28.120
So let's do that right now.

00:16:28.120 --> 00:16:29.535
CHROMEVOX: ChromeVox
is now inactive.

00:16:32.050 --> 00:16:36.780
RACHEL SHEARER: I'm changing
this span to be a label tag.

00:16:36.780 --> 00:16:38.560
And I'm changing the second
span to be a label.

00:16:38.560 --> 00:16:41.680
I'm going to actually explicitly
associate it with

00:16:41.680 --> 00:16:43.710
the username field in the DOM.

00:16:46.420 --> 00:16:48.370
And this second one is going
to explicitly be associated

00:16:48.370 --> 00:16:50.710
with the password field.

00:16:50.710 --> 00:16:53.020
And you'll see, again, visually
that nothing changed.

00:16:53.020 --> 00:16:55.740
CSS is still styling
things correctly.

00:16:55.740 --> 00:16:58.940
And then I'm also going to give
this poor image an alt

00:16:58.940 --> 00:17:03.280
tag, Golden Gate Photo.

00:17:03.280 --> 00:17:03.760
All right.

00:17:03.760 --> 00:17:05.560
So I've made these changes.

00:17:05.560 --> 00:17:06.710
Let's try it again
with ChromeVox

00:17:06.710 --> 00:17:09.780
and see what happens.

00:17:09.780 --> 00:17:12.680
CHROMEVOX: Article username
edit text.

00:17:12.680 --> 00:17:14.540
RACHEL SHEARER: So you see, it's
actually saying, username

00:17:14.540 --> 00:17:17.910
edit text, whereas before it
was just saying edit text.

00:17:17.910 --> 00:17:20.170
CHROMEVOX: P-I-N password
edit text.

00:17:20.170 --> 00:17:21.390
RACHEL SHEARER: And this
is really great.

00:17:21.390 --> 00:17:24.450
It's also saying P-I-N edit
text instead of password.

00:17:24.450 --> 00:17:27.079
You can see how that distinction
on this page might

00:17:27.079 --> 00:17:27.940
be really important.

00:17:27.940 --> 00:17:29.500
So it's important to make
sure this password

00:17:29.500 --> 00:17:31.210
field is labeled correctly.

00:17:31.210 --> 00:17:32.770
Let's see how that
image sounds.

00:17:32.770 --> 00:17:34.876
CHROMEVOX: Golden Gate Photo.

00:17:34.876 --> 00:17:36.900
RACHEL SHEARER: So you can see,
right away, making these

00:17:36.900 --> 00:17:39.220
simple changes enabled ChromeVox
to interpret this

00:17:39.220 --> 00:17:40.910
page correctly to the user.

00:17:40.910 --> 00:17:42.680
The user gets better information
about what these

00:17:42.680 --> 00:17:44.750
form fields are supposed
to be.

00:17:44.750 --> 00:17:46.690
And it's low-hanging fruit
like this that is

00:17:46.690 --> 00:17:48.430
really easy to fix.

00:17:48.430 --> 00:17:50.970
The thing is, it's easier to
build this stuff in from the

00:17:50.970 --> 00:17:54.330
beginning rather than having to
go back later and find all

00:17:54.330 --> 00:17:56.810
of your form fields that aren't
labeled and all of your

00:17:56.810 --> 00:17:58.370
images that are missing
alt text.

00:17:58.370 --> 00:18:01.830
So this next topic is about
managing focus.

00:18:01.830 --> 00:18:04.090
And we're going to get a little
bit more advanced here.

00:18:04.090 --> 00:18:05.380
Basically, you want
to make sure that

00:18:05.380 --> 00:18:06.910
you're managing focus.

00:18:06.910 --> 00:18:08.720
And the reason for
this the simple.

00:18:08.720 --> 00:18:11.440
Users who are not using the
mouse, keyboard-only users,

00:18:11.440 --> 00:18:13.230
are navigating through
your page by moving

00:18:13.230 --> 00:18:15.100
focus through the DOM.

00:18:15.100 --> 00:18:18.070
You can think of focus
as like their cursor.

00:18:18.070 --> 00:18:20.340
So you can really help these
users out by making sure that

00:18:20.340 --> 00:18:23.790
you know where focus is and by
managing it appropriately.

00:18:23.790 --> 00:18:25.290
I'm going to give you a quick
demo of what someone

00:18:25.290 --> 00:18:28.810
navigating through page using
focus looks like.

00:18:28.810 --> 00:18:32.320
I'm going to use the
google.com/accessibility site.

00:18:32.320 --> 00:18:33.990
I'm just going to press Tab.

00:18:33.990 --> 00:18:36.080
And you can see that this little
blue box is moving

00:18:36.080 --> 00:18:38.590
around the page as
I press Tab.

00:18:38.590 --> 00:18:40.410
Pressing Tab in a browser
moves focus

00:18:40.410 --> 00:18:41.160
throughout the page.

00:18:41.160 --> 00:18:43.510
It's just moving it linearly
down the DOM.

00:18:43.510 --> 00:18:46.740
And you can see it move
throughout this page.

00:18:46.740 --> 00:18:49.720
So someone that is navigating
without using a mouse, someone

00:18:49.720 --> 00:18:52.660
who is navigating using the
keyboard, can press Tab to

00:18:52.660 --> 00:18:55.330
move linearly up and down
the DOM, or Shift-Tab

00:18:55.330 --> 00:18:57.130
to move back up.

00:18:57.130 --> 00:18:58.910
So why is this important?

00:18:58.910 --> 00:19:02.490
Well, you can place focus
by using element.focus.

00:19:02.490 --> 00:19:04.850
And if you pay attention to what
the user is doing, you

00:19:04.850 --> 00:19:07.760
can really make things easier
for them by putting focus into

00:19:07.760 --> 00:19:11.120
appropriate places as the user
is performing a task.

00:19:11.120 --> 00:19:13.920
And when the user is done with a
certain task, you can return

00:19:13.920 --> 00:19:15.770
focus to where it was before.

00:19:15.770 --> 00:19:17.620
And if you do these things,
you're really going

00:19:17.620 --> 00:19:19.200
to help them out.

00:19:19.200 --> 00:19:21.910
A lot of times, I see apps
where focus might just be

00:19:21.910 --> 00:19:23.480
dropped on the floor.

00:19:23.480 --> 00:19:26.940
And that actually means that
focus is being reset back to

00:19:26.940 --> 00:19:28.370
the top of the page.

00:19:28.370 --> 00:19:30.500
And that can be really
frustrating.

00:19:30.500 --> 00:19:32.400
If you're in the middle of
editing something, and the

00:19:32.400 --> 00:19:34.960
focus is dropped on the floor,
and you're sent all the way

00:19:34.960 --> 00:19:37.940
back to the top of the DOM,
that's frustrating.

00:19:37.940 --> 00:19:40.120
And it's something that is
really common for users to

00:19:40.120 --> 00:19:41.700
experience.

00:19:41.700 --> 00:19:44.400
I'm just going to quickly show
you what that is like.

00:19:44.400 --> 00:19:47.390
And again, this is something
that I see all the time.

00:19:47.390 --> 00:19:49.190
It's a pop-up dialog button.

00:19:49.190 --> 00:19:50.960
And you can see that
if you click on it,

00:19:50.960 --> 00:19:52.780
it opens the dialog.

00:19:52.780 --> 00:19:56.480
And you can press OK, and
the dialog disappears.

00:19:56.480 --> 00:19:58.920
And if you look at the code
below, you might be able to

00:19:58.920 --> 00:20:01.220
notice that there's
a red flag here.

00:20:01.220 --> 00:20:04.300
The dialog in the DOM,
this thing, is

00:20:04.300 --> 00:20:06.810
actually before the button.

00:20:06.810 --> 00:20:08.920
And you can remember from
earlier that I said that you

00:20:08.920 --> 00:20:10.340
want to make sure that
things in your

00:20:10.340 --> 00:20:11.960
DOM are grouped logically.

00:20:11.960 --> 00:20:15.030
So the fact that this dialog
is before the button, that

00:20:15.030 --> 00:20:16.490
doesn't look super good.

00:20:16.490 --> 00:20:18.210
But let's see what
ChromeVox does.

00:20:21.480 --> 00:20:24.330
Turning ChromeVox on.

00:20:24.330 --> 00:20:28.400
CHROMEVOX: Adding group pop-up
dialog, live coding example,

00:20:28.400 --> 00:20:29.160
heading two.

00:20:29.160 --> 00:20:29.970
RACHEL SHEARER: So we're
on the heading.

00:20:29.970 --> 00:20:31.210
Let's tab to the button.

00:20:31.210 --> 00:20:33.270
CHROMEVOX: Heading group
article, buy

00:20:33.270 --> 00:20:35.100
more printer ink button.

00:20:35.100 --> 00:20:36.670
RACHEL SHEARER: I'm going to
press Enter, and hopefully the

00:20:36.670 --> 00:20:38.452
dialog will open.

00:20:38.452 --> 00:20:38.930
Great.

00:20:38.930 --> 00:20:42.900
The dialog opened, but the weird
thing is that the little

00:20:42.900 --> 00:20:44.900
orange outlined, the purple and
orange online, shows you

00:20:44.900 --> 00:20:45.990
where focus is.

00:20:45.990 --> 00:20:47.610
And focus didn't move.

00:20:47.610 --> 00:20:49.550
Focus is still on the button.

00:20:49.550 --> 00:20:52.480
This dialog is open, but
ChromeVox didn't speak

00:20:52.480 --> 00:20:54.920
anything, and focus is
still on the button.

00:20:54.920 --> 00:20:58.110
So a user who can't see the
screen has no idea that

00:20:58.110 --> 00:20:58.980
something happened.

00:20:58.980 --> 00:21:01.520
They have no idea that the
dialog even opened.

00:21:01.520 --> 00:21:03.930
And that's a really
bad experience.

00:21:03.930 --> 00:21:07.590
And if the user did somehow try
and get into the dialog,

00:21:07.590 --> 00:21:09.630
like maybe they're a
keyboard-only user who can see

00:21:09.630 --> 00:21:12.420
the screen, they'll have to
tab all the way around the

00:21:12.420 --> 00:21:15.480
page before they can get
back to that dialog.

00:21:15.480 --> 00:21:17.100
And that's something that users
might not be able to

00:21:17.100 --> 00:21:18.800
figure out.

00:21:18.800 --> 00:21:22.610
You'll notice that if I open
the dialog, and somehow get

00:21:22.610 --> 00:21:26.100
inside of it, and I close the
dialog, focus just gets

00:21:26.100 --> 00:21:27.610
dropped on the floor.

00:21:27.610 --> 00:21:29.690
The previously focused element--
you can see a little

00:21:29.690 --> 00:21:30.670
orange square--

00:21:30.670 --> 00:21:31.450
that's gone.

00:21:31.450 --> 00:21:33.290
It's not in the DOM anymore.

00:21:33.290 --> 00:21:35.900
And nothing happened.

00:21:35.900 --> 00:21:37.510
ChromeVox didn't
speak anything.

00:21:37.510 --> 00:21:39.310
And I don't know where
I am on the page.

00:21:39.310 --> 00:21:41.040
And you actually have
to tab backwards--

00:21:41.040 --> 00:21:42.430
CHROMEVOX: Exiting dialog.

00:21:42.430 --> 00:21:44.050
RACHEL SHEARER: --to get
back to the button.

00:21:44.050 --> 00:21:47.710
So that's a poor experience
as well.

00:21:47.710 --> 00:21:50.960
But the fix for this, again,
is actually pretty easy.

00:21:50.960 --> 00:21:52.580
You might be noticing a pattern
here, that all these

00:21:52.580 --> 00:21:54.410
fixes are actually
pretty easy.

00:21:54.410 --> 00:21:56.730
And the good thing is there's a
number of different ways you

00:21:56.730 --> 00:21:58.790
can improve this experience.

00:21:58.790 --> 00:22:01.430
One of the ways is actually
putting focus on the button as

00:22:01.430 --> 00:22:03.630
soon as the dialog opens.

00:22:03.630 --> 00:22:06.920
So you can see here in
the code, I'm inside

00:22:06.920 --> 00:22:08.650
this method, confirm.

00:22:08.650 --> 00:22:10.340
And this is when the
dialog opens.

00:22:10.340 --> 00:22:16.350
So I'm just going to set focus
on the OK button in the dialog

00:22:16.350 --> 00:22:19.710
as part of the dialog opening,
using .focus.

00:22:19.710 --> 00:22:22.380
Then I'm also going to be a nice
person, and I'm going to

00:22:22.380 --> 00:22:25.420
set focus back on the button
when the dialog closes.

00:22:25.420 --> 00:22:29.770
So this button is
called Confirm.

00:22:29.770 --> 00:22:33.970
I'm going to set focus back
on that button there.

00:22:33.970 --> 00:22:36.260
Just double checking,
confirm, OK good.

00:22:36.260 --> 00:22:39.870
So now that I've added .focus
to the confirm and close

00:22:39.870 --> 00:22:42.630
dialog methods, let's see if
we've improved this experience

00:22:42.630 --> 00:22:44.110
at all for our users.

00:22:44.110 --> 00:22:46.220
I'm going to turn ChromeVox
back on.

00:22:46.220 --> 00:22:47.910
CHROMEVOX: Article
refresh button.

00:22:47.910 --> 00:22:49.730
RACHEL SHEARER: Move back
up to the button.

00:22:49.730 --> 00:22:51.930
CHROMEVOX: Buy more printer
ink button.

00:22:51.930 --> 00:22:53.430
RACHEL SHEARER: And
open the dialog.

00:22:53.430 --> 00:22:55.460
CHROMEVOX: Entering dialog.

00:22:55.460 --> 00:22:56.920
RACHEL SHEARER: So you'll
see right away that

00:22:56.920 --> 00:22:58.030
this is much better.

00:22:58.030 --> 00:23:00.760
ChromeVox announced that we
entered the dialog, and focus

00:23:00.760 --> 00:23:03.170
is thrown right back
onto the OK button.

00:23:03.170 --> 00:23:06.070
And even better, a user who can
see the screen and is may

00:23:06.070 --> 00:23:10.110
be only using the keyboard
starts right off in that

00:23:10.110 --> 00:23:12.660
dialog and they can interact
with it right away.

00:23:12.660 --> 00:23:15.250
A ChromeVox user or any screen
reader user would be able to

00:23:15.250 --> 00:23:17.390
navigate around the dialog and
figure out what they're

00:23:17.390 --> 00:23:19.120
supposed to be doing.

00:23:19.120 --> 00:23:21.080
So let's try closing
the dialog.

00:23:21.080 --> 00:23:23.430
I'm going to hit Enter
on the OK button.

00:23:23.430 --> 00:23:24.950
CHROMEVOX: Exiting dialog.

00:23:24.950 --> 00:23:26.100
RACHEL SHEARER: And you'll
see that ChromeVox

00:23:26.100 --> 00:23:27.420
said, exiting dialog.

00:23:27.420 --> 00:23:29.260
And focus is thrown right
back onto the Buy

00:23:29.260 --> 00:23:30.780
More Printer Ink button.

00:23:30.780 --> 00:23:33.130
So the user is right back where
they started, and you've

00:23:33.130 --> 00:23:34.810
helped them out a lot when
they're going through this

00:23:34.810 --> 00:23:36.860
dialog workflow.

00:23:36.860 --> 00:23:39.210
So the last thing I want to talk
about, while I'm talking

00:23:39.210 --> 00:23:42.100
about building blocks, is
keyboard shortcuts.

00:23:42.100 --> 00:23:44.920
And keyboard shortcuts can be
really helpful to help users

00:23:44.920 --> 00:23:47.050
navigate through your
app efficiently.

00:23:47.050 --> 00:23:49.340
And they're also really good
for power users, who maybe

00:23:49.340 --> 00:23:51.890
aren't using assistive
technology and who maybe can

00:23:51.890 --> 00:23:52.990
see the screen.

00:23:52.990 --> 00:23:55.940
But for power users, who use
your app a lot, keyboard

00:23:55.940 --> 00:23:57.920
shortcuts can be really great.

00:23:57.920 --> 00:23:59.480
There's two different kinds.

00:23:59.480 --> 00:24:01.180
Navigation shortcuts
jump between

00:24:01.180 --> 00:24:03.130
major interactive areas.

00:24:03.130 --> 00:24:05.820
You can think of these like
the J and K shortcuts in

00:24:05.820 --> 00:24:08.230
Google+ that move between
posts in the Stream.

00:24:08.230 --> 00:24:11.560
And I'll show those off
to you right now.

00:24:11.560 --> 00:24:13.030
I'm on the Google+ page.

00:24:13.030 --> 00:24:15.040
I'm going to go into
my Stream.

00:24:15.040 --> 00:24:19.150
And you can see that I can use
J and K keyboard shortcuts to

00:24:19.150 --> 00:24:20.910
move between posts.

00:24:20.910 --> 00:24:22.960
These are navigation
shortcuts.

00:24:22.960 --> 00:24:24.850
They're great because they
help break your UI into

00:24:24.850 --> 00:24:26.050
different units.

00:24:26.050 --> 00:24:28.790
They prevent users from having
to do a bunch of tabbing in

00:24:28.790 --> 00:24:32.070
order to get to the next post
in their Google+ Stream.

00:24:32.070 --> 00:24:33.690
The second type of
keyboard shortcut

00:24:33.690 --> 00:24:35.430
is an action shortcut.

00:24:35.430 --> 00:24:37.540
Action shortcuts basically just

00:24:37.540 --> 00:24:39.590
simplify a user's workflow.

00:24:39.590 --> 00:24:42.990
So in Google+ the equivalent of
this would be pressing R to

00:24:42.990 --> 00:24:44.920
reply to a post.

00:24:44.920 --> 00:24:47.290
So you'll see, you just press
that one keyboard shortcut--

00:24:47.290 --> 00:24:48.550
I just pressed R--

00:24:48.550 --> 00:24:50.410
and it opens up a
new reply field.

00:24:50.410 --> 00:24:53.510
And you can start composing
right away, instead of having

00:24:53.510 --> 00:24:57.000
to find the Reply button, and
press it, and open it back up.

00:24:57.000 --> 00:25:00.910
It's really simple, and it
enables a complex action.

00:25:00.910 --> 00:25:02.910
The important thing to remember
about shortcuts,

00:25:02.910 --> 00:25:04.220
though, is that they
really need to

00:25:04.220 --> 00:25:06.090
be documented somewhere.

00:25:06.090 --> 00:25:08.690
And even if they are documented,
not all users are

00:25:08.690 --> 00:25:10.310
going to know about them.

00:25:10.310 --> 00:25:12.790
So keyboard shortcuts are
great, but they're not a

00:25:12.790 --> 00:25:15.050
Band-Aid for an inaccessible
page.

00:25:15.050 --> 00:25:16.620
You might have all the keyboard
shortcuts in the

00:25:16.620 --> 00:25:19.370
world, but if you don't label
your form fields, and you

00:25:19.370 --> 00:25:22.010
don't have alt attributes, a
user is still going to have a

00:25:22.010 --> 00:25:23.360
bad experience.

00:25:23.360 --> 00:25:25.760
So keyboard shortcuts are great,
but they don't solve

00:25:25.760 --> 00:25:27.130
all problems.

00:25:27.130 --> 00:25:29.710
So now that I've given you the
building blocks, let's move on

00:25:29.710 --> 00:25:32.000
and talk about a systematic
approach to building

00:25:32.000 --> 00:25:34.190
accessible web apps.

00:25:34.190 --> 00:25:37.670
First, you want to take care
of the most basic errors.

00:25:37.670 --> 00:25:39.340
You want to clean up the
low-hanging fruit.

00:25:39.340 --> 00:25:41.620
Look at your DOM order and
make sure that related

00:25:41.620 --> 00:25:43.780
controls are grouped together.

00:25:43.780 --> 00:25:47.090
You can create logical groups
with semantic tags like nav,

00:25:47.090 --> 00:25:50.540
header, h1, and the landmark
ARIA roles.

00:25:50.540 --> 00:25:52.900
I'll be talking about ARIA
in a couple of slides,

00:25:52.900 --> 00:25:54.980
so hold on for that.

00:25:54.980 --> 00:25:57.670
The next thing you want to do
is use native HTML5 controls

00:25:57.670 --> 00:26:01.720
wherever possible, and try to
avoid div soup and span salad.

00:26:01.720 --> 00:26:05.060
Finally, you want to label
your controls and images.

00:26:05.060 --> 00:26:07.760
And the great thing about these
basic errors is that

00:26:07.760 --> 00:26:11.340
they're easier to catch and
fix early in the process.

00:26:11.340 --> 00:26:14.100
But once you catch them, the
fixes are really easy.

00:26:14.100 --> 00:26:17.010
Next, you want to think about
keyboard navigation.

00:26:17.010 --> 00:26:19.880
Try your app out with just the
keyboard, and make sure that

00:26:19.880 --> 00:26:22.930
you can reach all interactive
controls by tabbing.

00:26:22.930 --> 00:26:24.760
Make sure you can use
enter and space to

00:26:24.760 --> 00:26:26.330
interact with UI controls.

00:26:26.330 --> 00:26:29.150
And manage focus to make sure
that users can perform tasks

00:26:29.150 --> 00:26:31.320
with the keyboard efficiently.

00:26:31.320 --> 00:26:34.610
Keyboard navigation is so, so
important to take care of

00:26:34.610 --> 00:26:36.710
early in the development
process.

00:26:36.710 --> 00:26:39.610
When you get keyboard navigation
working, you ensure

00:26:39.610 --> 00:26:42.100
that screen reader users will
be able to navigate through

00:26:42.100 --> 00:26:44.420
your UI controls individually.

00:26:44.420 --> 00:26:47.050
You also ensure that screen
reader users will be able to

00:26:47.050 --> 00:26:49.110
activate those controls.

00:26:49.110 --> 00:26:50.870
By taking care of DOM structure
and keyboard

00:26:50.870 --> 00:26:53.980
navigation, you'll have
done 90% of the work

00:26:53.980 --> 00:26:56.680
that you have to do.

00:26:56.680 --> 00:26:59.100
So now that we've discussed
the building blocks of

00:26:59.100 --> 00:27:01.170
accessible web applications,
let's talk

00:27:01.170 --> 00:27:03.170
about the other 10%.

00:27:03.170 --> 00:27:05.680
In this part of the talk, I'm
going to give more detailed

00:27:05.680 --> 00:27:08.440
information about custom
interactive controls.

00:27:08.440 --> 00:27:11.510
And I'm going to use Add to
Circles widget from Google+ as

00:27:11.510 --> 00:27:14.650
an example throughout
this section.

00:27:14.650 --> 00:27:17.070
So native tags are
really great.

00:27:17.070 --> 00:27:18.810
Native links and buttons
are awesome.

00:27:18.810 --> 00:27:22.170
But if you want to enable
complex interactions like the

00:27:22.170 --> 00:27:25.070
Add to Circles widget, in many
cases, you're going to end up

00:27:25.070 --> 00:27:26.460
with div soup.

00:27:26.460 --> 00:27:28.160
But it's not the end
of the world.

00:27:28.160 --> 00:27:31.170
What you need to do is
reimplement the semantics of a

00:27:31.170 --> 00:27:33.870
native control on the
custom control.

00:27:33.870 --> 00:27:36.970
And I actually already talked
to you about how to do this.

00:27:36.970 --> 00:27:39.230
You want to think about focus
management for your custom

00:27:39.230 --> 00:27:41.660
control, and it's also important
to think about

00:27:41.660 --> 00:27:43.090
keyboard support.

00:27:43.090 --> 00:27:45.970
Reimplementing both of those
things is going to give your

00:27:45.970 --> 00:27:48.300
users a really good
experience.

00:27:48.300 --> 00:27:50.870
You also need to do additional
work for screen readers.

00:27:50.870 --> 00:27:53.640
And that's adding something
called ARIA attributes.

00:27:53.640 --> 00:27:56.480
I said before that it's
impossible for screen readers

00:27:56.480 --> 00:27:58.250
to identify what a bunch
of divs in the DOM

00:27:58.250 --> 00:27:59.660
are supposed to be.

00:27:59.660 --> 00:28:02.930
So adding ARIA attributes gives
screen readers a hint as

00:28:02.930 --> 00:28:05.200
to what your custom controls
are supposed to be, so they

00:28:05.200 --> 00:28:08.350
can do a better job interpreting
them to the user.

00:28:08.350 --> 00:28:10.980
So it helps you work around the
downsides of div soup for

00:28:10.980 --> 00:28:12.910
screen readers.

00:28:12.910 --> 00:28:16.350
So coming back to the Add to
Circles widget, it's pretty

00:28:16.350 --> 00:28:18.600
much the definition
of div soup.

00:28:18.600 --> 00:28:21.070
And this is the simplified
version of the

00:28:21.070 --> 00:28:22.270
Add to Circles widget.

00:28:22.270 --> 00:28:25.540
The actual code for it would
not even fit on this page.

00:28:25.540 --> 00:28:28.690
And it's mostly divs
and spans.

00:28:28.690 --> 00:28:31.050
The Add to Circles widget,
implemented just like you see

00:28:31.050 --> 00:28:34.410
here, is impossible for a screen
reader to understand.

00:28:34.410 --> 00:28:36.670
And it would be really difficult
for a keyboard-only

00:28:36.670 --> 00:28:38.310
user to use it.

00:28:38.310 --> 00:28:40.070
So I'm actually going
to walk you through

00:28:40.070 --> 00:28:41.920
how we improved it.

00:28:41.920 --> 00:28:45.490
It's still div soup, but we've
got extra information in there

00:28:45.490 --> 00:28:48.480
to make it a lot easier for
keyboard-only users and screen

00:28:48.480 --> 00:28:50.750
reader users to use.

00:28:50.750 --> 00:28:52.640
I'll walk you through the code,
because I'll be talking

00:28:52.640 --> 00:28:53.890
about this later.

00:28:53.890 --> 00:28:56.330
The first div that you see here
is the Add to Circles

00:28:56.330 --> 00:28:57.720
widget itself.

00:28:57.720 --> 00:29:00.080
And the second div
is the drop-down.

00:29:00.080 --> 00:29:03.090
You can see it's got a bunch
of divs for checkboxes.

00:29:03.090 --> 00:29:04.840
And it's actually appended
at the end of

00:29:04.840 --> 00:29:07.000
the DOM for CSS reasons.

00:29:07.000 --> 00:29:10.940
So that's one of the things
that we needed to fix.

00:29:10.940 --> 00:29:14.720
So the first thing we have
to do is manage focus.

00:29:14.720 --> 00:29:16.470
Remember when I said
that divs and spans

00:29:16.470 --> 00:29:18.270
aren't keyboard focusable?

00:29:18.270 --> 00:29:21.260
Well, you can make them keyboard
focusable by adding

00:29:21.260 --> 00:29:23.430
an attribute called tabindex.

00:29:23.430 --> 00:29:26.000
There's a bunch of different
ways to add tabindex, and

00:29:26.000 --> 00:29:27.750
they're listed on this slide.

00:29:27.750 --> 00:29:30.910
But essentially, if you add
tabindex equals zero to a div,

00:29:30.910 --> 00:29:33.700
it adds that div into
the tab order.

00:29:33.700 --> 00:29:36.130
So if you have a user who is
navigating around the page by

00:29:36.130 --> 00:29:39.530
pressing Tab, that user will be
able to focus on that div

00:29:39.530 --> 00:29:41.300
and send it keyboard events.

00:29:41.300 --> 00:29:44.190
So to tabindex is really,
really important.

00:29:44.190 --> 00:29:46.770
You can add keyboard handling,
and you can add labels, and

00:29:46.770 --> 00:29:49.190
all that stuff I talked about
earlier, but if your divs

00:29:49.190 --> 00:29:52.950
aren't focusable, a user won't
be able to interact with them.

00:29:52.950 --> 00:29:55.410
And so that's why it's
so important.

00:29:55.410 --> 00:29:57.980
After that, you want to make
sure that you're placing focus

00:29:57.980 --> 00:30:00.500
wherever necessary with
element.focus.

00:30:00.500 --> 00:30:03.370
Remember, we can proactively
place focus that way to create

00:30:03.370 --> 00:30:06.620
an efficient workflow
for users.

00:30:06.620 --> 00:30:09.090
So with custom controls, you
also want to make sure that

00:30:09.090 --> 00:30:11.560
you show the keyboard
some love.

00:30:11.560 --> 00:30:14.800
You want to add key handlers so
that a user can use Enter

00:30:14.800 --> 00:30:17.180
and Space and arrows
and Escape to

00:30:17.180 --> 00:30:19.040
interact with your control.

00:30:19.040 --> 00:30:21.780
And one of the best ways I've
found to do this is to pick a

00:30:21.780 --> 00:30:24.520
native control and then
try and mimic it.

00:30:24.520 --> 00:30:27.830
This can be a native control
as simple as a button or a

00:30:27.830 --> 00:30:30.960
select box, or it can be
something as complicated as

00:30:30.960 --> 00:30:33.740
something that you'd find on a
native operating system, like

00:30:33.740 --> 00:30:36.370
a tab panel or something
like that.

00:30:36.370 --> 00:30:39.190
But these kinds of native
controls usually handle keys

00:30:39.190 --> 00:30:42.250
like Enter or the arrow
keys really well.

00:30:42.250 --> 00:30:45.760
And users know how to interact
with these kinds of widget.

00:30:45.760 --> 00:30:48.500
They know to press the arrow
keys to move up and down in a

00:30:48.500 --> 00:30:49.770
select box.

00:30:49.770 --> 00:30:52.540
So if you mimic that native
control, a user is

00:30:52.540 --> 00:30:55.880
automatically going to know a
lot about what they have to do

00:30:55.880 --> 00:30:58.050
in order to interact
with your control.

00:30:58.050 --> 00:31:01.870
And these W3C actually has a
really good guide to common

00:31:01.870 --> 00:31:03.530
keyboard patterns
that you see.

00:31:03.530 --> 00:31:05.630
I'm going to open it up here so
you can actually see what

00:31:05.630 --> 00:31:06.880
this looks like.

00:31:09.360 --> 00:31:11.500
Here, under the Design
Patterns section.

00:31:11.500 --> 00:31:14.440
So, if you look at this guide,
you can actually get a good

00:31:14.440 --> 00:31:17.590
idea for what users might expect
when they encounter

00:31:17.590 --> 00:31:18.660
your control.

00:31:18.660 --> 00:31:21.850
So this code is just an example
of what a keyboard

00:31:21.850 --> 00:31:24.440
handler might look like
underneath here, with return

00:31:24.440 --> 00:31:26.850
on reply key down and checking
for key codes

00:31:26.850 --> 00:31:29.000
and stuff like that.

00:31:29.000 --> 00:31:31.860
So back to the Add to
Circles widget.

00:31:31.860 --> 00:31:34.720
What you're going to be doing is
picking native elements and

00:31:34.720 --> 00:31:37.540
then trying to mimic them,
just like I said before.

00:31:37.540 --> 00:31:41.280
The Add to Circles widget, to
a keyboard-only user or a

00:31:41.280 --> 00:31:43.830
screen reader user, is probably

00:31:43.830 --> 00:31:45.560
is most like a button.

00:31:45.560 --> 00:31:47.890
To a sighted user, you
hover over it.

00:31:47.890 --> 00:31:48.570
But then again, a

00:31:48.570 --> 00:31:50.320
keyboard-only user can't hover.

00:31:50.320 --> 00:31:53.030
So let's make it
like a button.

00:31:53.030 --> 00:31:55.660
And so making it like a button,
the first thing we're

00:31:55.660 --> 00:31:57.900
going to do add tabindex
equals zero to make it

00:31:57.900 --> 00:31:59.780
keyboard focusable.

00:31:59.780 --> 00:32:01.950
That's probably always the first
thing you're going to do

00:32:01.950 --> 00:32:04.290
you on a custom UI control.

00:32:04.290 --> 00:32:06.620
And then, after we do that,
we're going to add keyboard

00:32:06.620 --> 00:32:08.730
events like Enter and Space.

00:32:08.730 --> 00:32:10.970
We're going to listen for those
so that we can activate

00:32:10.970 --> 00:32:13.130
the button and show
the drop-down.

00:32:13.130 --> 00:32:17.010
Remember, a keyboard-only user
can't do hover, so Enter and

00:32:17.010 --> 00:32:20.210
Space mimic the behavior of a
regular button, and a user is

00:32:20.210 --> 00:32:24.240
going to be expect to
be able to do that.

00:32:24.240 --> 00:32:27.280
As for the menu itself,
it's a drop-down menu.

00:32:27.280 --> 00:32:30.630
And it's actually kind of
like a modal dialog.

00:32:30.630 --> 00:32:33.130
If you think about it, when you
hover over the button--

00:32:33.130 --> 00:32:35.870
and I'll show you what that
looks like again.

00:32:35.870 --> 00:32:40.500
So if you go back to the Google+
Add to Circles button,

00:32:40.500 --> 00:32:41.710
you hover over it,
you have this

00:32:41.710 --> 00:32:43.480
modal dialog that appears.

00:32:43.480 --> 00:32:46.670
And you can interact with it,
you can check buttons, you can

00:32:46.670 --> 00:32:47.270
do whatever.

00:32:47.270 --> 00:32:50.340
But once you move the mouse away
from it, that drop-down

00:32:50.340 --> 00:32:51.620
disappears.

00:32:51.620 --> 00:32:55.010
And that's pretty much the same
way a modal dialog works.

00:32:55.010 --> 00:32:57.540
You can't interact with the rest
of the page until a modal

00:32:57.540 --> 00:32:59.930
dialog disappears.

00:32:59.930 --> 00:33:03.040
So we decided that we should
implement dialog behavior for

00:33:03.040 --> 00:33:05.420
this drop-down menu.

00:33:05.420 --> 00:33:08.580
The way dialogs work, as we saw
in that earlier example,

00:33:08.580 --> 00:33:11.900
is that you want to focus on the
first focusable element,

00:33:11.900 --> 00:33:14.740
like we did on the OK button
in the dialog example.

00:33:14.740 --> 00:33:17.700
So that's what we want to do
for the drop-down menu.

00:33:17.700 --> 00:33:20.220
We ask for the first focusable
element and we

00:33:20.220 --> 00:33:22.280
put focus on it.

00:33:22.280 --> 00:33:23.860
The next thing that you
want to do is trap

00:33:23.860 --> 00:33:25.860
focus inside the dialog.

00:33:25.860 --> 00:33:28.550
You don't want the person to
accidentally fall out and not

00:33:28.550 --> 00:33:30.400
know where they are
on the page.

00:33:30.400 --> 00:33:33.150
We also added Escape as a
keyboard shortcut, because

00:33:33.150 --> 00:33:34.170
that's something
that's commonly

00:33:34.170 --> 00:33:36.360
found in native dialogs.

00:33:36.360 --> 00:33:39.710
Then another important thing to
remember, when the dialog

00:33:39.710 --> 00:33:42.890
closes we want it to set focus
back onto the Add to Circles

00:33:42.890 --> 00:33:45.940
widget, instead of dropping
it on the floor.

00:33:45.940 --> 00:33:48.770
So I'll show you an example
of how this works.

00:33:48.770 --> 00:33:51.720
I'm just going to use the
keyboard instead of ChromeVox.

00:33:51.720 --> 00:33:54.810
So let's go back to Sundar's
profile, and I'm going to get

00:33:54.810 --> 00:34:01.840
keyboard focus on the Add to
Circles button, and I'm going

00:34:01.840 --> 00:34:03.560
to press Enter.

00:34:03.560 --> 00:34:06.380
And you can see, right away,
the dialog opened.

00:34:06.380 --> 00:34:08.850
There's a little blue outline
around that checkbox that

00:34:08.850 --> 00:34:11.409
shows that we have focus
on that checkbox.

00:34:11.409 --> 00:34:13.469
And I can use Tab to kind
of move through the

00:34:13.469 --> 00:34:16.120
rest of this dialog.

00:34:16.120 --> 00:34:18.940
So if I decided that I'm done,
and I'm going to be following

00:34:18.940 --> 00:34:20.699
Sundar, I press Escape.

00:34:20.699 --> 00:34:23.469
And you can see, page focus
goes right back to that

00:34:23.469 --> 00:34:25.210
button, which is great.

00:34:25.210 --> 00:34:26.840
That's exactly what we
want to see from this

00:34:26.840 --> 00:34:28.639
Add to Circles button.

00:34:28.639 --> 00:34:31.980
So next, I want to talk about
screen reader accessibility

00:34:31.980 --> 00:34:33.650
and the Add to Circles widget.

00:34:33.650 --> 00:34:36.010
And I mentioned ARIA before.

00:34:36.010 --> 00:34:39.280
So our Add to Circles widget
is a pile of divs.

00:34:39.280 --> 00:34:42.199
And as I pointed out earlier,
screen readers have real

00:34:42.199 --> 00:34:44.170
difficulty identifying
what a pile of divs

00:34:44.170 --> 00:34:45.710
is supposed to be.

00:34:45.710 --> 00:34:49.409
So ARIA is essentially a set
of HTML5 attributes that

00:34:49.409 --> 00:34:52.449
actually provide that
information to screen readers.

00:34:52.449 --> 00:34:55.170
The information that a sighted
user gets visually you can

00:34:55.170 --> 00:34:58.350
provide to a screen reader user
by noting with ARIA, this

00:34:58.350 --> 00:35:01.750
div is a button, or this
div is a menu.

00:35:01.750 --> 00:35:04.180
It's important to note that you
have to do everything else

00:35:04.180 --> 00:35:07.350
that I talked about earlier
in addition to ARIA.

00:35:07.350 --> 00:35:10.480
Just adding an ARIA attribute
doesn't actually give a widget

00:35:10.480 --> 00:35:11.310
keyboard handling.

00:35:11.310 --> 00:35:12.230
Or focus management.

00:35:12.230 --> 00:35:13.500
Or anything like that.

00:35:13.500 --> 00:35:15.440
You still need to
add that stuff.

00:35:15.440 --> 00:35:18.820
ARIA is just a layer on top that
specifically helps screen

00:35:18.820 --> 00:35:21.430
readers identify what
things are.

00:35:21.430 --> 00:35:23.290
So let's talk about
ARIA roles.

00:35:23.290 --> 00:35:26.720
There are two categories of ARIA
attributes, ARIA roles

00:35:26.720 --> 00:35:28.740
and ARIA states and
properties.

00:35:28.740 --> 00:35:30.730
The role attribute is static.

00:35:30.730 --> 00:35:34.570
It indicates that this generic
tag is behaving a certain way.

00:35:34.570 --> 00:35:37.790
So in this example, this div
here is going to be behaving

00:35:37.790 --> 00:35:38.900
like a button.

00:35:38.900 --> 00:35:41.350
It's taking on the
role of a button.

00:35:41.350 --> 00:35:46.040
So the ARIA attribute on this
div of is role equals button.

00:35:46.040 --> 00:35:48.020
You can also use ARIA attributes
to indicate

00:35:48.020 --> 00:35:49.410
composite controls.

00:35:49.410 --> 00:35:52.780
So those complex interactive
controls I mentioned before

00:35:52.780 --> 00:35:55.640
that don't really have a native
HTML equivalent, you

00:35:55.640 --> 00:35:57.720
can use ARIA there too.

00:35:57.720 --> 00:36:00.540
We can explicitly state that
this next div is playing the

00:36:00.540 --> 00:36:03.240
role of menu item
using the role

00:36:03.240 --> 00:36:05.330
equals menu item attribute.

00:36:05.330 --> 00:36:07.540
And there's a lot of different
roles that you can pick and

00:36:07.540 --> 00:36:10.770
choose from to add to your
generic controls.

00:36:10.770 --> 00:36:13.170
Another type of role that
I mentioned earlier is a

00:36:13.170 --> 00:36:14.600
landmark role.

00:36:14.600 --> 00:36:17.830
And that's a role that can be
used to organize the DOM in

00:36:17.830 --> 00:36:19.700
the same way that I
mentioned before.

00:36:19.700 --> 00:36:22.940
You can use a landmark role to
actually identify separate

00:36:22.940 --> 00:36:25.200
areas of your app to
screen reader.

00:36:25.200 --> 00:36:28.310
You can use them together with
the new HTML5 semantic tags to

00:36:28.310 --> 00:36:30.660
create a really rich
user experience.

00:36:30.660 --> 00:36:33.960
So in this example, I used to
the section semantic tag, but

00:36:33.960 --> 00:36:36.390
also gave it the
role of search.

00:36:36.390 --> 00:36:38.810
This indicates to a screen
reader that this section of

00:36:38.810 --> 00:36:42.430
the site is the search
section.

00:36:42.430 --> 00:36:46.050
A second category of ARIA
attribute contains ARIA states

00:36:46.050 --> 00:36:47.140
and properties.

00:36:47.140 --> 00:36:49.110
These are both dynamic.

00:36:49.110 --> 00:36:52.010
ARIA states add dynamic
information about the current

00:36:52.010 --> 00:36:53.550
state of an element.

00:36:53.550 --> 00:36:56.160
And you can use them in addition
to roles to identify

00:36:56.160 --> 00:36:58.330
what an element is
currently doing.

00:36:58.330 --> 00:37:01.400
For example, this div this
acting like a checkbox, so it

00:37:01.400 --> 00:37:03.510
has role equals checkbox.

00:37:03.510 --> 00:37:07.990
It also has the ARIA attribute
ARIA checked equals true.

00:37:07.990 --> 00:37:11.000
And as this checkbox gets
checked and unchecked, we can

00:37:11.000 --> 00:37:14.210
actually update this ARIA
state in our JavaScript.

00:37:14.210 --> 00:37:18.000
And this tells a screen reader
to tell the user this div is

00:37:18.000 --> 00:37:21.350
actually a checkbox, and
it's currently checked.

00:37:21.350 --> 00:37:23.790
There's a bunch of different
states associated with the

00:37:23.790 --> 00:37:26.650
different roles that you can use
to add richer information

00:37:26.650 --> 00:37:29.690
about the current state
of a dynamic control.

00:37:29.690 --> 00:37:33.550
One type of ARIA property is
the aria-live property.

00:37:33.550 --> 00:37:36.110
And this is a little bit more
complicated, so I'm not going

00:37:36.110 --> 00:37:38.330
to go into a ton of
detail right now.

00:37:38.330 --> 00:37:40.880
But essentially, you can use
it to identify dynamic

00:37:40.880 --> 00:37:42.540
content on a page.

00:37:42.540 --> 00:37:45.340
So if you add the aria-live
attribute, you're adding it to

00:37:45.340 --> 00:37:47.590
elements that are going
to get updated.

00:37:47.590 --> 00:37:49.970
And you can use the attribute
to describe the types of

00:37:49.970 --> 00:37:53.790
updates that this element is
going to be receiving.

00:37:53.790 --> 00:37:56.510
And if you want more
information, here's a link to

00:37:56.510 --> 00:38:00.250
the W3C guide to live regions,
which I'll open up.

00:38:00.250 --> 00:38:02.090
So you can see, there's a whole
section here in this

00:38:02.090 --> 00:38:03.620
document on live region
properties

00:38:03.620 --> 00:38:04.690
and how to use them.

00:38:04.690 --> 00:38:07.010
And this document can be really
valuable if you're

00:38:07.010 --> 00:38:09.990
trying to learn about
how to do this.

00:38:09.990 --> 00:38:12.470
Aria-live regions are something
that can be really

00:38:12.470 --> 00:38:15.690
useful if you have a very
complex page that is receiving

00:38:15.690 --> 00:38:18.550
updates all at once that might
not be in the same area where

00:38:18.550 --> 00:38:20.430
the user has focus.

00:38:20.430 --> 00:38:23.260
If you remember that keyboard
focus is like a cursor, and if

00:38:23.260 --> 00:38:25.400
you have a lot of stuff that is
happening outside of where

00:38:25.400 --> 00:38:28.590
that cursor is, things get
confusing really fast.

00:38:28.590 --> 00:38:31.790
So the aria-live property is
super useful and can really

00:38:31.790 --> 00:38:33.940
help you out there.

00:38:33.940 --> 00:38:36.470
So let's go back to the
Add to Circles widget.

00:38:36.470 --> 00:38:39.570
Now we know about ARIA, and
we have this pile of divs.

00:38:39.570 --> 00:38:42.380
So we want to make sure that
we add some ARIA to ensure

00:38:42.380 --> 00:38:44.836
that a screen reader user can
understand what the Add to

00:38:44.836 --> 00:38:47.540
Circles widget is supposed
to be doing.

00:38:47.540 --> 00:38:50.180
So the first thing that we're
going to specify is that this

00:38:50.180 --> 00:38:51.990
element is a button.

00:38:51.990 --> 00:38:56.680
So we're going to add role
equals button to this widget.

00:38:56.680 --> 00:38:59.880
And you'll notice that we have
tabindex equals zero in there,

00:38:59.880 --> 00:39:02.630
which is really, really
important for ARIA.

00:39:02.630 --> 00:39:06.910
Again, adding a tabindex
attribute spans to your

00:39:06.910 --> 00:39:08.840
generic elements really
should be the first

00:39:08.840 --> 00:39:10.790
thing that you do.

00:39:10.790 --> 00:39:13.460
We also want to specify that the
Add to Circles drop-down

00:39:13.460 --> 00:39:17.640
dialog is, in fact, a dialog,
like we decided earlier.

00:39:17.640 --> 00:39:19.990
So we're going to add
role equals dialog.

00:39:19.990 --> 00:39:23.260
And we did, unfortunately, also
use divs for checkboxes

00:39:23.260 --> 00:39:26.740
here, so we also want to specify
that those divs are

00:39:26.740 --> 00:39:28.320
indeed checkboxes.

00:39:28.320 --> 00:39:30.920
So we give them role equals
checkbox and update ARIA

00:39:30.920 --> 00:39:34.010
checked in the JavaScript as the
person checks or unchecks

00:39:34.010 --> 00:39:35.980
the checkbox.

00:39:35.980 --> 00:39:38.080
So now that we've added all of
this ARIA for screen reader

00:39:38.080 --> 00:39:39.982
users, let's try out the Add to

00:39:39.982 --> 00:39:42.010
Circles widget with ChromeVox.

00:39:42.010 --> 00:39:44.260
So here we are on Sundar's
profile.

00:39:44.260 --> 00:39:45.910
And you can see the Add
to Circles widget

00:39:45.910 --> 00:39:47.770
right at the top.

00:39:47.770 --> 00:39:50.090
Let's try and interact with
that Add to Circles widget

00:39:50.090 --> 00:39:53.790
using ChromeVox to see if we can
add Sundar to our circles.

00:39:53.790 --> 00:39:55.606
So I'm going to use ChromeVox
to navigate to the Add to

00:39:55.606 --> 00:39:56.590
Circles widget.

00:39:56.590 --> 00:39:59.580
CHROMEVOX: Navigation, Add
to Circles button.

00:39:59.580 --> 00:40:00.270
RACHEL SHEARER: So
that's great.

00:40:00.270 --> 00:40:03.370
You can see that ChromeVox said,
Add to Circles button.

00:40:03.370 --> 00:40:06.100
There's no indication that this
is actually some kind of

00:40:06.100 --> 00:40:08.400
strange widget that has a hover
target and you need to

00:40:08.400 --> 00:40:10.110
hover over it.

00:40:10.110 --> 00:40:11.690
A user who can't see the
screen doesn't care

00:40:11.690 --> 00:40:12.760
about any of that.

00:40:12.760 --> 00:40:15.180
We say that it's a button, and
they know how to interact with

00:40:15.180 --> 00:40:16.000
the button.

00:40:16.000 --> 00:40:18.630
So let's press Enter and
see what happens.

00:40:18.630 --> 00:40:20.270
CHROMEVOX: Entering dialog.

00:40:20.270 --> 00:40:21.380
RACHEL SHEARER: So
this is great.

00:40:21.380 --> 00:40:23.450
You can see that focus moved
to that checkbox, and

00:40:23.450 --> 00:40:25.750
ChromeVox said, entering
dialog.

00:40:25.750 --> 00:40:29.940
You can move around with Tab to
the other checkboxes, and

00:40:29.940 --> 00:40:30.290
ChromeVox--

00:40:30.290 --> 00:40:31.980
Well, let's see what
ChromeVox says.

00:40:31.980 --> 00:40:33.060
CHROMEVOX: Zero family.

00:40:33.060 --> 00:40:34.700
Checkbox not checked.

00:40:34.700 --> 00:40:35.980
Zero acquaintances.

00:40:35.980 --> 00:40:37.460
Checkbox not checked.

00:40:37.460 --> 00:40:38.610
Five following.

00:40:38.610 --> 00:40:40.170
Checkbox not checked.

00:40:40.170 --> 00:40:41.220
RACHEL SHEARER: So
this is great.

00:40:41.220 --> 00:40:44.030
You can use tab to move around
this drop-down dialog.

00:40:44.030 --> 00:40:47.580
And ChromeVox is speaking it
just like you'd expect.

00:40:47.580 --> 00:40:49.650
Let's press Spacebar.

00:40:49.650 --> 00:40:51.380
CHROMEVOX: Checked
six following.

00:40:51.380 --> 00:40:52.390
Checkbox checked.

00:40:52.390 --> 00:40:54.050
RACHEL SHEARER: And you can see
that ChromeVox updates as

00:40:54.050 --> 00:40:55.220
the checkbox is checked.

00:40:55.220 --> 00:40:57.440
It's actually listening for
those ARIA changes, and it's

00:40:57.440 --> 00:40:59.760
letting you know that this
checkbox is checked.

00:40:59.760 --> 00:41:01.440
Let's press Escape to
close the dialog.

00:41:01.440 --> 00:41:03.570
CHROMEVOX: Exiting dialog.

00:41:03.570 --> 00:41:04.820
RACHEL SHEARER: So
this is awesome.

00:41:04.820 --> 00:41:06.740
The dialog went away, and
ChromeVox announced that

00:41:06.740 --> 00:41:08.550
you're exiting the dialog.

00:41:08.550 --> 00:41:11.580
There's no indication that this
is a drop-down and not

00:41:11.580 --> 00:41:14.310
really technically a dialog,
and you might have had to

00:41:14.310 --> 00:41:16.160
hover over it.

00:41:16.160 --> 00:41:17.700
Someone who can't see
a screen, this

00:41:17.700 --> 00:41:19.080
interaction is perfect.

00:41:19.080 --> 00:41:22.200
It's composed of UI elements
that they know how to interact

00:41:22.200 --> 00:41:24.280
with, buttons and dialogs.

00:41:24.280 --> 00:41:26.470
Because people have interacted
with this stuff before, they

00:41:26.470 --> 00:41:27.650
know how to do it.

00:41:27.650 --> 00:41:30.510
So it makes things a lot
easier for these users.

00:41:30.510 --> 00:41:34.620
The Add to Circles widget seems
really complicated.

00:41:34.620 --> 00:41:38.210
You've got to hover, it's not
a standard UI control.

00:41:38.210 --> 00:41:41.150
But you can see with the
combination of managing focus,

00:41:41.150 --> 00:41:44.460
keeping track of keyboard, and
adding ARIA, we can turn it

00:41:44.460 --> 00:41:46.750
into something that makes a
lot of sense for different

00:41:46.750 --> 00:41:48.160
kinds of users.

00:41:48.160 --> 00:41:50.210
Let's go over how we got here.

00:41:50.210 --> 00:41:52.120
First, you want to make sure
that you're structuring your

00:41:52.120 --> 00:41:53.780
DOM in a sensible way.

00:41:53.780 --> 00:41:55.480
It's true for all web apps.

00:41:55.480 --> 00:41:58.650
And it's also true for custom
controls themselves.

00:41:58.650 --> 00:42:01.100
You also want to make sure that
you're using native HTML

00:42:01.100 --> 00:42:04.960
tags wherever possible to save
yourself extra work later.

00:42:04.960 --> 00:42:06.550
You also want to make
sure your controls

00:42:06.550 --> 00:42:08.450
and images are labeled.

00:42:08.450 --> 00:42:11.060
You want to make sure you have
intuitive focus management,

00:42:11.060 --> 00:42:13.570
that you're guiding the user
around the page by moving

00:42:13.570 --> 00:42:15.560
focus proactively.

00:42:15.560 --> 00:42:17.560
You also want to make sure
that your app can be used

00:42:17.560 --> 00:42:18.890
entirely with the keyboard.

00:42:18.890 --> 00:42:21.230
Because, remember,
not all users are

00:42:21.230 --> 00:42:22.780
able to use the mouse.

00:42:22.780 --> 00:42:25.620
You have to have keyboard
handling and focus management

00:42:25.620 --> 00:42:28.060
so you can unplug your mouse,
use your app, and have

00:42:28.060 --> 00:42:30.720
everything work just like
you expect it to.

00:42:30.720 --> 00:42:33.990
And additionally, include ARIA
for screen reader users, to

00:42:33.990 --> 00:42:36.230
help screen reader users
in the midst of div

00:42:36.230 --> 00:42:39.700
soup and span salad.

00:42:39.700 --> 00:42:42.250
So now I'm going to list some
tools and resources that can

00:42:42.250 --> 00:42:46.490
help you get your app to being
a more accessible experience.

00:42:46.490 --> 00:42:48.890
The first one is ChromeVox,
which I was using to

00:42:48.890 --> 00:42:49.980
demonstrate.

00:42:49.980 --> 00:42:52.690
It's actually built in on Chrome
OS, and it's available

00:42:52.690 --> 00:42:55.030
as an extension for Chrome
on other platforms.

00:42:55.030 --> 00:42:56.990
It's something that any
developer can install on

00:42:56.990 --> 00:42:58.810
Chrome and use right away.

00:42:58.810 --> 00:43:00.600
And the great thing about
ChromeVox is that it's also

00:43:00.600 --> 00:43:01.530
open source.

00:43:01.530 --> 00:43:03.505
So you can access the source
code at this google-axs-chrom

00:43:03.505 --> 00:43:08.040
e.code.google.com link
on the slide.

00:43:08.040 --> 00:43:11.020
There's other no-cost screen
readers out there, VoiceOver

00:43:11.020 --> 00:43:13.290
and NVDA are examples of them.

00:43:13.290 --> 00:43:16.170
As a developer, it's super
important to test your app

00:43:16.170 --> 00:43:19.010
using just the keyboard, but
it's also good to take a test

00:43:19.010 --> 00:43:21.280
drive with a screen reader.

00:43:21.280 --> 00:43:24.220
Some other libraries with
accessibility support include

00:43:24.220 --> 00:43:27.120
Dojo Toolkit, GWT,
and jQuery UI.

00:43:27.120 --> 00:43:30.390
So if you're trying to build
your web app using components

00:43:30.390 --> 00:43:33.180
that already exist, these
libraries are good to look at,

00:43:33.180 --> 00:43:35.680
because they can take care of
a lot of this accessibility

00:43:35.680 --> 00:43:36.650
stuff for you.

00:43:36.650 --> 00:43:39.130
So whether you're building a
web app from scratch, or

00:43:39.130 --> 00:43:41.890
you're working on refining a
complex UI control like the

00:43:41.890 --> 00:43:44.690
Add to Circles widget, it's
definitely possible to deliver

00:43:44.690 --> 00:43:47.500
a dynamic, accessible experience
that looks really

00:43:47.500 --> 00:43:50.570
good to sighted users, but
performs really well for all

00:43:50.570 --> 00:43:52.050
kinds of users.

00:43:52.050 --> 00:43:55.210
The first step in this process
is really easy, just close

00:43:55.210 --> 00:43:59.470
your eyes or unplug your mouse
and try to use your app.

00:43:59.470 --> 00:44:01.910
Once you try that, you can
probably figure out some

00:44:01.910 --> 00:44:05.170
things to fix that can make the
experience a lot better.

00:44:05.170 --> 00:44:09.270
And finally, following HTML5
standards, especially ARIA,

00:44:09.270 --> 00:44:12.120
are going to get you the rest
of the way there, to an app

00:44:12.120 --> 00:44:14.660
that works well for everybody.

00:44:14.660 --> 00:44:16.800
So thank you very much
for tuning into

00:44:16.800 --> 00:44:19.000
this developer tutorial.

00:44:19.000 --> 00:44:20.850
I hope you had a lot of fun
watching it, or at least

00:44:20.850 --> 00:44:22.290
learned something.

00:44:22.290 --> 00:44:25.600
You can talk to me on Google+
using this goo.gl shortlink

00:44:25.600 --> 00:44:26.750
that's on this slide.

00:44:26.750 --> 00:44:29.220
And on Twitter, my handle
is rachelshe.

00:44:29.220 --> 00:44:31.030
So I look forward to
hearing from you.

00:44:31.030 --> 00:44:32.820
And that's it.

