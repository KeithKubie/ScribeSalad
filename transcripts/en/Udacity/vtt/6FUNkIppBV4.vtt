WEBVTT
Kind: captions
Language: en

00:00:00.012 --> 00:00:04.038
Now, we reach the dreaded point in every game development cycle where we have to

00:00:04.038 --> 00:00:08.021
start worrying about performance. Now, for a small map, the code we have will

00:00:08.021 --> 00:00:12.213
work perfectly well, but for large maps we quickly incur significant overhead.

00:00:12.213 --> 00:00:16.187
This makes sense, since what we're actually doing is drawing the entire map

00:00:16.187 --> 00:00:20.510
every single frame regardless of what's actually visible to the canvas. Instead

00:00:20.510 --> 00:00:24.231
of this, let's only draw the tiles that are on the screen at any given time.

00:00:24.231 --> 00:00:27.954
This saves considerably on the total number of draw calls per frame that are

00:00:27.954 --> 00:00:31.435
done which is typically where the bottlenecks are in high performance

00:00:31.435 --> 00:00:35.559
applications. Now, to implement this, notice that we've added a new viewRect

00:00:35.559 --> 00:00:39.377
object wihtin our tile map class. This object represents the coordinates, as

00:00:39.377 --> 00:00:43.182
well as width and heighth of our visible canvass. To take advantage of this, we

00:00:43.182 --> 00:00:46.954
have to modify our drawing function slightly. First, we'll need to check our

00:00:46.954 --> 00:00:50.724
world x and world y values against the current viewRect position and size, and

00:00:50.724 --> 00:00:54.625
stop processing that tile if it's outside of our viewRect. Next, we have to

00:00:54.625 --> 00:00:59.098
modify our worldX and worldY coordinates so they take into account the view

00:00:59.098 --> 00:01:03.642
rectangle offset, ensuring that the x and y value that they pass to drawImage

00:01:03.642 --> 00:01:06.743
are canvas-oriented rather than world-oriented.

