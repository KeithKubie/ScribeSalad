WEBVTT
Kind: captions
Language: en

00:20:17.904 --> 00:20:23.385
Welcome to Android Dev Summit 
2018.  Welcome to Android Dev 

00:20:24.627 --> 00:20:33.494
Summit 2018.  Welcome to Android
Dev Summit 2018.  Welcome to 

00:20:34.691 --> 00:20:37.619
Android Dev Summit 2018. 

00:31:32.125 --> 00:31:38.824
&gt;&gt; Everyone, please welcome to 
the stage, Dave Burke.

00:31:43.599 --> 00:31:47.684
[Applause]
Hey, everyone. And welcome to 

00:31:47.685 --> 00:31:50.585
the 2018 Android

00:31:53.784 --> 00:31:57.162
Developer Summit.  This is an 
event for developers, by 

00:31:57.566 --> 00:32:02.527
developers, with tons of 
in-depth content and most 

00:32:02.888 --> 00:32:06.280
importantly, direct access to 
the engineers.  We have so many 

00:32:06.281 --> 00:32:10.252
of them here this week that I'm 
pretty sure Android 

00:32:10.712 --> 00:32:15.987
development's going to stop.  
We have attendees from over 70 

00:32:16.290 --> 00:32:20.111
countries, both in-person and on
the livestream.  

00:32:20.112 --> 00:32:25.594
Now, speaking of history, it was
-- we're about to celebrate our 

00:32:25.595 --> 00:32:31.267
10th anniversary of Android and 
it was about 10 years ago that 

00:32:33.700 --> 00:32:42.400
customers were unboxing their G1
devices.  There's huge potential

00:32:42.401 --> 00:32:49.666
for the G1, developers create 
more applications for Google 

00:32:49.667 --> 00:32:52.795
Android.  
It did okay.  But it's what came

00:32:53.341 --> 00:32:57.455
next and what you built on 
Android that fundamentally 

00:32:57.839 --> 00:33:01.066
changed the mobile industry.  
10 years ago, the mobile 

00:33:01.067 --> 00:33:03.138
landscapes looked very 
different. 

00:33:10.510 --> 00:33:16.139
Mobile platforms were not 
friendly.  Each OS required 

00:33:17.030 --> 00:33:20.081
completely different and 
non-transferrable skills so it 

00:33:20.082 --> 00:33:25.272
was impossible to build a mobile
app at-scale.  

00:33:25.273 --> 00:33:30.116
In building 44, a small team of 
dedicated engineers were quietly

00:33:30.607 --> 00:33:35.899
working on a crazy project.  The
idea was bold.  To build a new 

00:33:36.481 --> 00:33:40.454
open source operating system 
that any device maker could use 

00:33:40.967 --> 00:33:46.270
with a powerful SDK that put 
developers first.  To many at 

00:33:46.479 --> 00:33:50.082
the time, this seemed like a 
hair-brained idea.  What did 

00:33:50.528 --> 00:33:52.605
Google know about 
telecommunications and how could

00:33:52.606 --> 00:33:55.711
it possibly influence this 
established industry?  

00:33:55.712 --> 00:33:59.338
It was an intense time for the 
Android team.  And to add to the

00:34:00.107 --> 00:34:07.695
drama, while getting close to 
launching version 1.0, Apple 

00:34:09.444 --> 00:34:16.548
announced the iPhone.  We had 
the sooner device and the Dream 

00:34:16.825 --> 00:34:22.529
device, which included a 
touchscreen.  We had no choice 

00:34:22.813 --> 00:34:26.962
to accelerate the schedule.  We 
felt like we had a window to 

00:34:27.605 --> 00:34:34.540
deliver on our vision of the 
smartphone before it launched.  

00:34:34.541 --> 00:34:40.717
So we started a tradition of 
putting on a huge breakfast in 

00:34:41.000 --> 00:34:45.617
building 44.  Bacon, eggs, 
pastries, you name it.  And it 

00:34:45.976 --> 00:34:51.355
was super productive.  No 
meetings, just coding.  And in 

00:34:51.776 --> 00:34:57.401
parallel, release planning.  
These cats do not know about 

00:34:57.612 --> 00:34:58.826
Android Studio's code 
completion.  

00:34:58.827 --> 00:35:05.661
You would have a previous week's
version of Android, but by the 

00:35:08.846 --> 00:35:11.549
evening, notification would 
appear.  It was like watching 

00:35:11.836 --> 00:35:16.279
the OS come alive before your 
eyes.  

00:35:16.280 --> 00:35:23.284
One of the big challenges is the
bootstrapping problem.  And why 

00:35:23.813 --> 00:35:28.901
would a user buy a phone with no
applications?  So, we did two 

00:35:28.902 --> 00:35:34.498
things.  First, the core Android
team wrote mobile app versions 

00:35:34.781 --> 00:35:37.834
of Google's desktop services 

00:35:41.243 --> 00:35:46.183
from gmail to Maps to YouTube.  
We experienced the framework at 

00:35:46.414 --> 00:35:52.993
the same time.  
But to make the platform shine, 

00:35:53.296 --> 00:35:58.409
we needed apps from across the 
industry.  We launched an 

00:35:59.144 --> 00:36:03.589
early-look SDK and announced the
Android developer challenge, 

00:36:04.459 --> 00:36:09.316
with $20 million to be awarded. 
Developers responded and by 

00:36:10.198 --> 00:36:16.014
April 2008, we had over 2,000 
submissions.  

00:36:16.015 --> 00:36:21.082
And it was amazing, given there 
were no physical devices, just 

00:36:21.514 --> 00:36:25.060
the emulator.  The apps were 
surprisingly diverse from games 

00:36:25.331 --> 00:36:31.037
to social networks and utilities
and location and GPS were the 

00:36:31.038 --> 00:36:34.488
top-used features, along with 
camera and media and messaging. 

00:36:34.771 --> 00:36:40.350
So it really showed this pent-up
demand for developers to be 

00:36:41.686 --> 00:36:44.237
creative on mobile and use 
features.  

00:36:44.238 --> 00:36:50.026
Some of the winning apps are 
still around today, like 

00:36:51.276 --> 00:36:57.706
Life360.  It paved the way for 
apps and businesses.  The 

00:36:58.045 --> 00:37:02.168
T-Mobile G1 launched.  It was 
the predecessor to Google Play 

00:37:02.169 --> 00:37:06.872
and it had over 50 apps on day 
one.  One week later, we opened 

00:37:07.094 --> 00:37:12.304
this door for developer uploads 
and advanced capabilities like 

00:37:13.022 --> 00:37:16.089
in-app purchases and broader 
country support were yet to be 

00:37:16.090 --> 00:37:19.118
built.  
The following 10 years was one 

00:37:19.474 --> 00:37:23.206
of rapid evolution.  In the 
early days, we were doing two 

00:37:23.838 --> 00:37:28.093
big releases a year and our lead
program manager, at the time, 

00:37:28.375 --> 00:37:33.028
made this off-hand suggestion 
that we code name it after 

00:37:33.268 --> 00:37:36.585
desserts and that idea stuck and
here's what came next.  So, 

00:37:37.396 --> 00:37:41.284
Android 1.5, Cupcake, we were 
eating a lot of Cupcakes at the 

00:37:41.755 --> 00:37:45.437
time, adding virtual keyboard 
support so we no longer required

00:37:46.956 --> 00:37:53.722
the physical keyboard.  We added
the copy and paste.  

00:37:53.723 --> 00:37:58.782
There were different screen 
densities and sizes, thereby 

00:37:58.783 --> 00:38:05.317
laying factors that will come a 
couple years later.  That was 

00:38:05.771 --> 00:38:11.246
Diane Hackborn's idea.  
Android 2 Eclair changed driving

00:38:16.100 --> 00:38:20.102
forever with Google Maps 
navigation.  

00:38:20.103 --> 00:38:24.825
Froyo had voice actions, which 
allowed you to get directions 

00:38:24.826 --> 00:38:31.135
and taking notes and setting 
alarms.  That was the precursor 

00:38:31.556 --> 00:38:38.567
to today's Google Assistant.  
Gingerbread was the first 

00:38:38.568 --> 00:38:43.404
mainstream version of Android.  
With Honeycomb, we added support

00:38:43.646 --> 00:38:47.334
for tablets with the hollow 
theme.  But, now we had a 

00:38:47.713 --> 00:38:50.283
problem because phones were 
shipping on Gingerbread and 

00:38:50.861 --> 00:38:53.416
tablets were shipping on 
Honeycomb.  So we

00:38:56.636 --> 00:39:00.524
merged both with Ice Cream 
Sandwich and we introduced more 

00:39:00.525 --> 00:39:05.632
intuitive navigation with the 
use of gestures and that release

00:39:08.460 --> 00:39:12.389
saw the arrial quick settings.  
Jellybean included

00:39:16.455 --> 00:39:20.736
project butter.  And smooth 
animations are something that I 

00:39:20.737 --> 00:39:22.737
personally

00:39:23.973 --> 00:39:27.495
ubzesabout.  
Android Kit Kat came with 

00:39:28.006 --> 00:39:36.720
project with 512 megabytes and 
DSP off-loaded Google Hot word. 

00:39:37.016 --> 00:39:40.460
Android 5 Lollipop followed and 
was the mother of all releases. 

00:39:40.687 --> 00:39:44.959
It brought material design to 
Android, giving it an entirely 

00:39:44.960 --> 00:39:50.340
new look and feel and so between
Project Butter and design, we 

00:39:50.767 --> 00:39:55.915
changed the narrative, giving it
a beautiful refined.  

00:39:55.916 --> 00:39:57.916
Lollipop also introduced

00:39:58.924 --> 00:40:06.038
support for new categories for 
wearables, auto and TV.  There 

00:40:06.344 --> 00:40:09.940
was the work profile, which 
we've been building on.  

00:40:09.941 --> 00:40:12.545
Lollipop was such an epic 
release that we frankly needed 

00:40:12.954 --> 00:40:17.724
to spend our energy in Android 6
Marshmallow on improving 

00:40:18.099 --> 00:40:24.786
quality.  We made an overhaul of
privacy with the introduction of

00:40:24.787 --> 00:40:31.854
runtime permissions.  
Nougat brought virtual support. 

00:40:33.621 --> 00:40:38.844
Oreo had entry-level smartphones
and came with a massive overhaul

00:40:39.745 --> 00:40:43.303
of the hardware interface layer 
to help speed up and reduce the 

00:40:43.304 --> 00:40:48.605
cost of doing upgrades.  
Finally this year, we launched 

00:40:48.606 --> 00:40:51.640
Android Pie, which is an 
AI-first experience.  It 

00:40:53.376 --> 00:40:59.923
contains tons of UI improvements
and introduces the concept of 

00:40:59.924 --> 00:41:03.112
well-being.  
I think it's pretty incredible 

00:41:03.404 --> 00:41:07.503
to see just how far we have all 
come in a decade of smartphone 

00:41:07.504 --> 00:41:09.569
development.  And while we're 
solving different problems 

00:41:09.952 --> 00:41:14.386
today, it's clear the principles
upon which we built Android are 

00:41:14.387 --> 00:41:20.727
just as true today as they were 
10 years ago.  Giving developers

00:41:21.012 --> 00:41:25.434
a powerful SDK or open source 
code to enable device makers 

00:41:25.435 --> 00:41:27.435
from entry level to high-end and

00:41:30.079 --> 00:41:34.090
ever-improving UX.  
So, what is the next 10 have in 

00:41:34.556 --> 00:41:37.650
store for Android?  Well, I 
obviously don't have a crystal 

00:41:37.651 --> 00:41:40.624
ball, but there are three trends
that I want to call out that I 

00:41:41.082 --> 00:41:45.931
think are important.  One, 
smartphones are getting smarter.

00:41:46.526 --> 00:41:52.848
Two, multi-screen computing is 
becoming pervasive and our 

00:41:53.127 --> 00:41:57.174
phones are going to be able to 
help us with safety and digital 

00:41:58.349 --> 00:42:02.484
well-being.  
Our smartphones are getting 

00:42:03.126 --> 00:42:06.986
smarter.  AI will enable your 
phone to get to know you better.

00:42:06.987 --> 00:42:12.016
You can see this in Android Pie 
running on Google Pixel.  The 

00:42:12.017 --> 00:42:15.686
screen brightness automatically 
learns your preferences and in 

00:42:16.678 --> 00:42:20.004
next apps are predicted to save 
you time.  And the camera is 

00:42:20.275 --> 00:42:28.576
able to recognize objects in 
realtime with Google Lens.  

00:42:28.577 --> 00:42:34.149
For developers wanting to tap 
into AI, we announced ML Kit.  

00:42:34.451 --> 00:42:36.467
Whether you're new or 
experienced

00:42:39.723 --> 00:42:44.114
in machine learning, it has face
detection and more. 

00:42:44.115 --> 00:42:50.725
It builds on the neural networks
API by DSP and

00:42:58.685 --> 00:43:04.362
NPUs.  
API, boost performance, 

00:43:04.768 --> 00:43:10.894
MobileNet, for TensorFlow, runs 
eight times faster using NNAPI 

00:43:11.515 --> 00:43:16.195
on the Qualcomm Snapdragon.  You
can expect NPUs to become faster

00:43:16.469 --> 00:43:20.677
in the next few years.  
The second trend goes beyond 

00:43:21.169 --> 00:43:25.512
phones.  We're investing heavily
in a multi-screen experience.  

00:43:25.759 --> 00:43:29.518
This means a great Android 
experience across TVs, 

00:43:31.153 --> 00:43:40.220
wearables, cars and Chromebooks.
For example, user engagement on 

00:43:40.508 --> 00:43:45.938
Android TV is grown.  This year,
Android auto has seen 250% user 

00:43:46.348 --> 00:43:52.923
growth and our partners launched
9th watches.  

00:43:52.924 --> 00:43:58.049
Just when you thought you'd seen
everything in phones, we're 

00:43:58.717 --> 00:44:05.614
about to see a new idea.  
Foldables.  They take advantage 

00:44:05.615 --> 00:44:08.893
of technology.  The screen can 
literally bend and fold and you 

00:44:08.894 --> 00:44:14.147
can think of the device as both 
a phone and a tablet.  And 

00:44:15.556 --> 00:44:20.630
broadly, two variants.  When 
folded, it looks like a phone so

00:44:20.631 --> 00:44:24.658
it fits in your pocket or purse 
and the defining feature for 

00:44:24.659 --> 00:44:29.829
this form factor is something we
call, screen continuity.  You 

00:44:30.128 --> 00:44:34.679
might start a video on the 
folded, smaller screen, but 

00:44:35.098 --> 00:44:39.050
later sit down and want a more 
immersive experience.  You can 

00:44:39.488 --> 00:44:44.379
unfold the devis to get a larger
screen.  As you unfold, the app 

00:44:44.829 --> 00:44:47.870
transfers to the bigger screen 
without missing a beat.  

00:44:47.871 --> 00:44:53.690
It's an exciting concept and we 
expect to see foedable devices 

00:44:53.981 --> 00:44:56.886
from several Android 
manufacturers.  We're working 

00:44:57.309 --> 00:45:00.232
with Samsung on a new device 
they plan to launch early next 

00:45:00.582 --> 00:45:03.522
year, which you'll hear about 
later today.  

00:45:03.523 --> 00:45:06.487
For our part, we're enhancing 
Android to take advantage of 

00:45:07.339 --> 00:45:11.046
this new form factor, with as 
little work as possible from 

00:45:11.312 --> 00:45:15.749
you.  We're adding resizable 
flags so your app can respond to

00:45:15.750 --> 00:45:19.286
folding and unfolding and we 
expect to see a lot of 

00:45:19.571 --> 00:45:23.890
innovation over the next few 
years.  

00:45:23.891 --> 00:45:29.128
The third trend is safety and 
well-being.  Smartphones have 

00:45:29.129 --> 00:45:34.571
gone from non-existent to in 
depensable.  In the very idea of

00:45:34.572 --> 00:45:42.143
leaving your home without your 
smartphone literally sends 

00:45:43.015 --> 00:45:46.542
shivers down people's spines. 

00:45:50.773 --> 00:45:54.898
Beyond utility, we FWEEL a 
responsibility to your safety 

00:45:55.692 --> 00:45:59.946
and well-being.  More than 80% 
of emergency calls originate 

00:46:00.250 --> 00:46:07.538
from mobile phones.  However, 
locating these phones can be 

00:46:08.307 --> 00:46:11.307
challenging since technologies 
fail indoors or have a radius 

00:46:11.932 --> 00:46:15.467
that's too large.  
In a serious emergency, it can 

00:46:15.468 --> 00:46:20.721
mean the difference between life
and death.  We launched 

00:46:21.499 --> 00:46:23.499
Android's

00:46:24.789 --> 00:46:28.614
Emergency Location Services.  
When you dial 911 or your 

00:46:29.532 --> 00:46:31.532
country's equivalent, your 
location is

00:46:34.664 --> 00:46:40.395
accurately calculated and sent 
directly to the emergency 

00:46:40.576 --> 00:46:43.126
provider.  
ELS is built in to 99% of 

00:46:43.383 --> 00:46:46.571
Android phones, all there way 
back to version 4 and we're 

00:46:46.799 --> 00:46:50.582
continuing to look at new ways 
to improve your safety.  

00:46:50.583 --> 00:46:54.363
Now, having a smartphone with 
you all day is awesome, but we 

00:46:54.559 --> 00:46:57.918
also want to make sure you're in
control of your digital 

00:46:58.449 --> 00:47:02.067
well-being and we know that 72% 
of people are concerned with 

00:47:02.553 --> 00:47:05.815
amount of time they spend on 
tech.  

00:47:05.816 --> 00:47:09.745
So with Android Pie this year, 
we introduced new tools to let 

00:47:10.198 --> 00:47:14.426
you control usage with app 
limits, gray scale wind-down and

00:47:15.308 --> 00:47:20.298
Do Not Disturb.  Like most 
features, we've added developer 

00:47:20.707 --> 00:47:27.800
hooks so you can tell if Do Not 
Disturb is enabled and you can 

00:47:28.067 --> 00:47:30.642
implement an intent filter.  
We're continuing to invest in 

00:47:30.859 --> 00:47:34.262
the space with lots of 
enhancements planned.  Okay.  

00:47:34.515 --> 00:47:37.605
So, let's wrap-up.  Android, 
from the beginning, was 

00:47:38.019 --> 00:47:43.583
conceived as a platform built 
around developers.  We poured a 

00:47:43.584 --> 00:47:47.707
ton of energy into growing this

00:47:51.507 --> 00:47:56.446
ecosystem from the ground up.  
And in return, you've been an 

00:47:56.447 --> 00:47:58.843
amazing community building 
incredible apps and services 

00:47:59.303 --> 00:48:02.191
that enable and delight users 
the world over.  We simply could

00:48:02.192 --> 00:48:04.910
not do this without you.  So, 
thank you.  

00:48:04.911 --> 00:48:09.332
So with that, let's get down to 
business.  I'm excited to hand 

00:48:09.623 --> 00:48:17.540
it over to Steph and team to 
talk about the resent work we've

00:48:17.729 --> 00:48:21.461
been doing.  Thank you.

00:49:55.433 --> 00:49:59.749
[Applause]
&gt;&gt; Hey, everyone.  I'm Steph.  

00:50:01.004 --> 00:50:04.031
I'm on the Android team and Dave
is right.  You're not on top of 

00:50:04.284 --> 00:50:08.880
it, you're a part of what we do.
Kotlin's a great example.  It's 

00:50:09.145 --> 00:50:13.203
not a Google-designed language. 
It was not maybe the obvious 

00:50:13.501 --> 00:50:15.884
choice, but it was the best 
choice, as you made clear.  We 

00:50:16.129 --> 00:50:20.077
could see developers voting with
their feet in the adoption and 

00:50:20.078 --> 00:50:23.434
the months before we announced 
support.  Like Kotlin, our 

00:50:24.803 --> 00:50:28.552
developer investments come down 
to two things at heart.  

00:50:28.553 --> 00:50:33.499
Number one, your feedback.  And 
number two, Google engineers 

00:50:33.977 --> 00:50:37.678
using Android and thinking, how 
do I make something people will 

00:50:37.957 --> 00:50:41.271
love?  So, the past several 
years, we've been investing 

00:50:41.471 --> 00:50:45.722
deeply in Android's developer 
experience.  It's been guided by

00:50:45.723 --> 00:50:49.494
your feedback.  We're going to 
talk about some new things that 

00:50:49.804 --> 00:50:52.811
we have to share. 
So each year, we've been 

00:50:53.092 --> 00:51:00.062
investing.  Let's start with 
ides.  We demoed Android Studio

00:51:09.978 --> 00:51:17.709
at I/o.  Profilers, mobile 
layout tools, better

00:51:21.875 --> 00:51:27.335
R C++.  We wanted to add the 
little things, whether that's 

00:51:27.336 --> 00:51:29.876
Maven integration to Lint 
checks.  

00:51:29.877 --> 00:51:35.815
Second APIs.  In 2016, Diane 
Hackborn wrote a famous post on 

00:51:35.816 --> 00:51:39.268
app architecture saying, we're 
not opinionated.  To which she 

00:51:41.034 --> 00:51:43.500
repl replied, please be 
opinionates.

00:51:43.501 --> 00:51:45.501
[Laughter]
So we created architecture 

00:51:45.875 --> 00:51:50.458
components and refined them over
many EAPs and expanded them into

00:51:50.957 --> 00:51:54.283
Android Jetpack.  We see Jetpack
as the future of our mobile 

00:51:54.622 --> 00:51:59.051
APIs.  They are opinionated and 
easy to use, intuitive APIs that

00:51:59.558 --> 00:52:04.391
work on 95% of devices.  We want
them to integrate seamlessly 

00:52:04.392 --> 00:52:08.665
with Android's core primitives 
so you get the best possible 

00:52:10.358 --> 00:52:13.353
combination of efficiency and 
deep control. 

00:52:13.354 --> 00:52:16.849
Expect to see us continue 
expanding Jetpack every year.  

00:52:16.850 --> 00:52:22.431
Third was languages.  In 2017, 
we announced support for Kotlin.

00:52:22.851 --> 00:52:30.002
We've added since then, ide 
support, API and moved it into 

00:52:32.604 --> 00:52:35.312
the Kotlin Foundation.  
Fourth, app delivery.  So, 

00:52:35.655 --> 00:52:42.627
developers have always loved the
Play store, that's great when 

00:52:42.905 --> 00:52:46.600
you want to launch fast.  You 
told us app size is way to big. 

00:52:46.601 --> 00:52:52.271
We announced the App Bundle and 
Dynamic Delivery.  They are 

00:52:52.560 --> 00:52:56.596
sliming down apps worldwide with
most apps saving up to and over 

00:52:57.231 --> 00:53:00.280
30%.  
Finally, security.  Android was 

00:53:01.135 --> 00:53:05.793
built with security in mind from
day one, with application 

00:53:06.410 --> 00:53:11.398
sandboxing.  We've expanded our 
mobile security services.  

00:53:11.399 --> 00:53:16.641
Today, 99% of abusive apps are 
taken down before anyone can 

00:53:16.969 --> 00:53:22.268
install and after you install, 
we use Google Play to protect 

00:53:22.583 --> 00:53:25.916
and scan over 50 billion apps 
every day.  Every app on every 

00:53:27.342 --> 00:53:31.434
connected device.  And we find a
potentially harmful app, we 

00:53:32.276 --> 00:53:35.437
disable it or we remove it.  
Let's say you're doing 

00:53:35.954 --> 00:53:38.853
everything right and you 
accidentally get caught in this 

00:53:38.854 --> 00:53:42.946
net without someone to talk to. 
This is a place I think we need 

00:53:42.947 --> 00:53:46.370
to do better.  We need to make 
it much easier for you to reach 

00:53:47.028 --> 00:53:51.908
us in these cases.  So, our 
engineers will be here, 

00:53:52.270 --> 00:53:54.906
tomorrow, at the fireside chat, 
to talk with you about it and 

00:53:55.511 --> 00:53:58.498
get your feedback. 
Now another way we protect the 

00:53:58.914 --> 00:54:01.832
ecosystem is moving APIs to 
target current APIs.  You told 

00:54:02.125 --> 00:54:06.150
us, okay, makes sense.  But 
please give us a long notice 

00:54:06.405 --> 00:54:09.345
period so that's why we gave 
almost a year's notice.  We 

00:54:09.853 --> 00:54:16.304
think of you as a part of how we
work, whether it's early ideas, 

00:54:16.759 --> 00:54:20.604
beta and iterating after launch.
We really want to be trustworthy

00:54:20.872 --> 00:54:24.510
and we've heard about things you
love like Architecture Component

00:54:24.794 --> 00:54:28.690
and Kotlin.  Sometimes we have 
underestimated the time it takes

00:54:29.142 --> 00:54:33.783
to get things right, like 
instant run.  What we've heard 

00:54:34.224 --> 00:54:37.501
is you want from us open sharing
so you can see things that are 

00:54:37.713 --> 00:54:43.645
early, as long as we're clear.  
As well as things that are ready

00:54:44.138 --> 00:54:48.660
for production.  
Today, I'm going to share a 

00:54:48.972 --> 00:54:53.465
range of early ideas.  I want to
walk you through two big themes.

00:54:53.734 --> 00:54:58.815
First, foundations, using 
languages and libraries to work 

00:54:59.076 --> 00:55:05.185
smarter.  Second, productivity. 
Using mobile ides, console and 

00:55:05.843 --> 00:55:09.519
distribution to develop easier, 
have higher quality apps and to 

00:55:09.709 --> 00:55:12.980
grow adoption.  
We're going to start with 

00:55:13.245 --> 00:55:16.185
foundations and Kotlin.  
Throughout, I wanted you to hear

00:55:16.186 --> 00:55:19.620
from some of the people who have
been instrumental in these 

00:55:20.134 --> 00:55:23.349
projects.  So, we're going to 
start with someone who was key 

00:55:23.629 --> 00:55:27.772
in the Kotlin decision, he's a 
huge contributor to Android, 

00:55:28.326 --> 00:55:30.762
both while he was in the 
community, now in the Google 

00:55:31.015 --> 00:55:36.550
team.  It's a privilege to turn 
things over to Jake Wharton.

00:55:42.110 --> 00:55:44.341
[Applause]
Hey, everyone.  So, I'm jake, 

00:55:44.662 --> 00:55:47.842
I'm part of the team working on 
Kotlin for Android and it's been

00:55:48.836 --> 00:55:53.001
18 months since Steph was on 
stage at Google I/O announcing 

00:55:53.002 --> 00:55:57.758
Kotlin would be supported as a 
new first-class language.  

00:55:57.759 --> 00:56:00.318
Something that had never been 
done in the history of Android. 

00:56:01.110 --> 00:56:04.690
Based on positive feedback from 
developers, it's clear that this

00:56:04.691 --> 00:56:09.201
was the right choice.  According
to GitHub, Kotlin is the number 

00:56:10.077 --> 00:56:12.077
Worker fastest-growing language 
in terms

00:56:14.080 --> 00:56:20.036
of contributors.  Stack Overflow
places it as number two.  

00:56:20.037 --> 00:56:25.053
In Android, 46% of proAndroid 
developers are using Kotlin to 

00:56:25.868 --> 00:56:27.868
build their apps. 

00:56:29.556 --> 00:56:35.152
This is according to a survey.  
In October, we had 118, 000 

00:56:35.153 --> 00:56:39.872
seven-day active projects using 
Kotlin in Android Studio.  This 

00:56:39.873 --> 00:56:44.028
is based on those who opt-in.  
10 X increase from the numbers 

00:56:44.445 --> 00:56:46.915
last year.  
Now when Kotlin support was 

00:56:47.144 --> 00:56:52.313
announced, there were a bunch of
apps that were using in the Play

00:56:53.393 --> 00:56:57.221
store.  Includes WeChat, Amazon

00:57:00.479 --> 00:57:04.911
Kindle and Twitter.  It moved 
into the Kotlin Foundation and 

00:57:05.446 --> 00:57:09.476
we're fortunate to partner with 
JetBrains.  

00:57:09.477 --> 00:57:13.219
Just last week, they released 
the newest version of Kotlin, 

00:57:13.612 --> 00:57:17.482
1.3 with new language features, 
APIs, bug fixes and performance 

00:57:18.100 --> 00:57:21.598
improvements.  For example, 
in-line classes, which in most 

00:57:21.953 --> 00:57:25.171
cases, don't actually allocate 
like a normal class would unless

00:57:25.449 --> 00:57:29.196
they're boxed.  For constrained 
devices that we target, avoiding

00:57:29.810 --> 00:57:33.960
allocation while still 
restraining typesafety is a big 

00:57:34.202 --> 00:57:43.501
one The Kotlin library includes 
a set of numbers, such as UByte 

00:57:43.781 --> 00:57:47.353
and ULong.  And in addition to 
Kotlin code targeting Android or

00:57:47.755 --> 00:57:54.123
the JVM, you can target 
JavaScript or native code.  This

00:57:54.646 --> 00:57:59.866
unlocks the possibility of using
more on platforms The 

00:58:02.067 --> 00:58:09.052
long-awaited support is in 1.3, 
which is a lighter version of 

00:58:09.384 --> 00:58:12.929
threading.  It combines how you 
do operations.  

00:58:12.930 --> 00:58:17.530
Things that are essential to 
every Android app.  And, as I'm 

00:58:17.531 --> 00:58:22.346
sure you are, we are looking 
forward to using these new 

00:58:22.347 --> 00:58:27.210
Kotlin features in the 
Kotlin-specific APIs.  The 

00:58:27.211 --> 00:58:30.969
majority has been through the 
Kotlin extensions through 

00:58:30.970 --> 00:58:32.970
Jetpack.  
We announced the Kotlin 

00:58:33.836 --> 00:58:35.836
extensions

00:58:38.960 --> 00:58:44.429
were expanding to KTX.  And all 
these are now available at 

00:58:44.430 --> 00:58:46.681
stable releases.  
Since then, though, as new APIs 

00:58:47.107 --> 00:58:56.045
are added to existing libraries 
or new libraries, the KTX 

00:58:56.046 --> 00:59:01.209
extensions are being built 
alongside, navigation, paging, 

00:59:01.210 --> 00:59:03.603
Slices have extensions being 
built with them.  

00:59:03.604 --> 00:59:12.560
We're starting to go beyond, 
lifecycle is going to let you 

00:59:12.839 --> 00:59:17.136
launch it and have 
cancellations.  WorkManager with

00:59:17.793 --> 00:59:23.179
a work object based on 
Coroutine.  They provide more 

00:59:23.180 --> 00:59:27.999
close operability.  
If you want to get started with,

00:59:28.000 --> 00:59:32.642
say, Coroutines on Android, 
there's a new codelab, it covers

00:59:33.363 --> 00:59:39.843
work, testing of Coroutines.  
Since Kotlin isn't a language 

00:59:40.474 --> 00:59:48.064
for building Android apps, 
Google cloud platforms has it.  

00:59:50.137 --> 00:59:57.199
And finally, new udacity courses
are available today.  They use 

00:59:57.200 --> 01:00:01.839
both Jetpack and popular 
third-party libraries To speak 

01:00:01.840 --> 01:00:08.801
more about Jetpack as a whole, 
I'd like to turn it over to 

01:00:08.802 --> 01:00:11.371
Romain Guy.
[Applause]

01:00:11.372 --> 01:00:19.756
&gt;&gt; Hi, I work on the Android 
framework team.  A few months 

01:00:19.757 --> 01:00:22.577
ago, we announced Jetpack.  It 
builds on the foundation that we

01:00:22.896 --> 01:00:28.326
laid out with support library.  
We also added new tools and 

01:00:28.665 --> 01:00:31.197
libraries to the mix.  It is 
about less

01:00:34.503 --> 01:00:38.208
code and more devices.  All 
Jetpack libraries are backwards 

01:00:38.781 --> 01:00:42.457
compatible.  We first started 
running early access programs 

01:00:42.458 --> 01:00:48.566
about two years ago and then our
first one was 18 months ago at 

01:00:48.567 --> 01:00:51.199
Google I/O 2017.  Out of

01:00:55.229 --> 01:01:02.123
the top 1,000 applications, more
are using it.

01:01:02.124 --> 01:01:09.056
Jetpack is using New York Times,
EverNote, Pandora, Twitter and 

01:01:09.306 --> 01:01:12.937
many more.  Apps built all over 
the world in India, Germany, 

01:01:13.692 --> 01:01:18.947
France, Korea, Israel, China, 
U.S. And more.  

01:01:18.948 --> 01:01:23.281
Also, at I/O, we have new 
libraries for paging, 

01:01:24.791 --> 01:01:27.929
navigation, WorkManager and 
Slices.  These are in early 

01:01:27.930 --> 01:01:31.034
faces of development, they're 
being used in 38,000

01:01:35.333 --> 01:01:41.168
applications worldwide.  
We know that many of you have 

01:01:42.399 --> 01:01:48.909
expressed the desire than simply
give feedback.  We moved it all 

01:01:49.318 --> 01:01:54.513
to public.  You can see bug 
fixes and features in realtime. 

01:01:54.921 --> 01:02:01.043
All you need is Android Studio 
and a public SDK.  We also want 

01:02:03.845 --> 01:02:07.707
to use AOSP.  Our hope to 
earlier access will help us 

01:02:08.015 --> 01:02:11.817
refine and ship even better 
libraries.  So, please join us. 

01:02:11.818 --> 01:02:16.597
With Jetpack, we introduced 
Architecture Component 

01:02:17.593 --> 01:02:21.235
libraries, navigation and 
WorkManager.  There is a 

01:02:21.701 --> 01:02:25.013
simplified way to have the 
principles in the application 

01:02:25.159 --> 01:02:31.617
using a single activity.  You 
have consistent animations and 

01:02:32.853 --> 01:02:37.374
easier animated transitions.  
WorkManager makes it easy to 

01:02:37.648 --> 01:02:41.881
perform background tasks.  You 
do not need to whether you 

01:02:42.282 --> 01:02:52.226
should be using Job Scheduler, 
JobDispatcher or alarmmanager.  

01:02:52.508 --> 01:02:56.500
If you have any feedback about 
those APIs, the Android teams 

01:02:56.782 --> 01:03:00.726
are here today and tomorrow, so 
now is the time to give us that 

01:03:00.995 --> 01:03:04.108
feedback.  
We introduced Android Slices, a 

01:03:04.109 --> 01:03:08.171
new way to bring users to your 
applications.  It is a mini

01:03:11.598 --> 01:03:16.619
snippet.  It can help users book
a flight, call a ride and so on.

01:03:17.056 --> 01:03:20.360
We want to take the time to get 
things right.  After working 

01:03:20.361 --> 01:03:26.676
with several of you on the APIs,
we're moving into public EAP at 

01:03:27.308 --> 01:03:34.501
the end of the month.  We will 
run experiments surfacing Slices

01:03:34.502 --> 01:03:40.558
in Google results.  
Our team has been hard at work 

01:03:40.892 --> 01:03:47.563
bringing numerous improvements 
to libraries.  In 2.1, you have 

01:03:48.358 --> 01:03:54.963
more control over usage.  2.1 is
our biggest launch since 1.0.  

01:03:55.202 --> 01:04:00.472
We have search tables and 
integration.  

01:04:00.473 --> 01:04:03.795
3.2 brings most faster 

01:04:07.322 --> 01:04:10.492
multi-module.  
One thing you told us worked 

01:04:10.741 --> 01:04:15.357
pretty well was 
deeply-integrated tools and 

01:04:16.183 --> 01:04:23.704
libraries.  A new great example 
is navigation.  You can 

01:04:25.165 --> 01:04:28.548
easily-understand and build it 
in your application.  

01:04:28.549 --> 01:04:33.557
Let's go straight to a demo.  
Here, it was already partially 

01:04:33.847 --> 01:04:40.055
done.  You can see the flow of 
navigation.  If I run the demo 

01:04:40.561 --> 01:04:44.710
in the emulator, and we wait for
Gradle to do its job, I can 

01:04:44.969 --> 01:04:47.725
click on leaderboards and see 
different profiles.  If I click 

01:04:47.883 --> 01:04:52.584
on the profile, nothing happens.
I can go back to the editor, add

01:04:53.072 --> 01:04:57.078
a new screen, select the 
fragment to the user profiles 

01:04:57.079 --> 01:05:01.643
and then the link -- the 
leaderboard screen to the user 

01:05:01.925 --> 01:05:07.513
profile.  I also need to add an 
argument for the selected user. 

01:05:07.912 --> 01:05:16.709
And it's a string.  And just 
rerun the app.  Wait for Gradle.

01:05:20.763 --> 01:05:23.994
Want to chat with me after this?
[Laughter]

01:05:23.995 --> 01:05:28.130
If I click on the profile, now I
can see the profile.  You can 

01:05:28.432 --> 01:05:32.897
see there are no animations, no 
transitions.  So if I go back 

01:05:33.179 --> 01:05:38.067
and select this navigation no  
flow, I can choose which 

01:05:38.068 --> 01:05:41.692
animations I want.  I'm going to
choose the intro animations and 

01:05:44.148 --> 01:05:50.791
the exit animations.  And now, 
if I rerun the app, one last 

01:05:51.987 --> 01:05:55.893
time, go back to leaderboards 
and now you can see the 

01:05:56.180 --> 01:06:00.627
transition.  
So if you want to play with -- 

01:06:02.924 --> 01:06:04.604
[Applause]
So, in you want to play with 

01:06:04.605 --> 01:06:09.192
animation, all you have to do is
download Android Studio from 

01:06:09.527 --> 01:06:11.990
beta today.  
As we expand the Jetpack 

01:06:12.275 --> 01:06:16.051
libraries, we're focused on your
feedback.  So please let us 

01:06:16.298 --> 01:06:23.189
know.  We want to know about 
animations, UI, we are here 

01:06:23.688 --> 01:06:27.186
today.  We are here tomorrow.  
With that, I would like to turn 

01:06:27.562 --> 01:06:34.379
it over to Karen, who will let 
you know about our plans.  

01:06:34.380 --> 01:06:35.522
Thanks.
[Applause]

01:06:35.523 --> 01:06:41.964
&gt;&gt; Hi.  I'm Karen.  I'm on the 
team that builds Android Studio 

01:06:41.965 --> 01:06:45.362
and Android Jetpack.  To build 
on top of that, I'm going to 

01:06:45.730 --> 01:06:50.099
talk about productivity.  For 
3.2, we asked ourselves, what 

01:06:50.436 --> 01:06:54.271
can we do to have a meaningful 
impact on productivity and where

01:06:54.664 --> 01:06:59.902
do you spend the most of your 
time.  We heard it's build 

01:06:59.903 --> 01:07:05.451
speed.  Something you do every 
day.  Something you do every 

01:07:06.245 --> 01:07:10.412
day, multiple times a day and 
every time you're waiting for 

01:07:10.732 --> 01:07:15.134
that build to finish, we know 
it's a minute wasted.  We found 

01:07:15.440 --> 01:07:19.462
two things to be true, the first
thing we found is that build 

01:07:19.463 --> 01:07:22.504
speeds is actually getting 
slower over time.  The second 

01:07:22.781 --> 01:07:27.694
thing we found is that new 
releases of Studio are actually 

01:07:27.695 --> 01:07:33.063
improving build times.  We saw 
build speeds get faster by 42%. 

01:07:33.711 --> 01:07:38.505
Something's going on and we had 
to take a deeper look.  

01:07:38.506 --> 01:07:45.407
Codebases are getting larger, 
custom build-ins are adding to 

01:07:45.577 --> 01:07:51.031
times are negating the benefit 
of incremental builds.  If you 

01:07:51.444 --> 01:07:56.629
have many modules, research 
management can add time, as 

01:07:56.918 --> 01:07:59.776
well.  It is outgrowing our 
build improvements.  We are 

01:08:01.420 --> 01:08:04.914
committed to making build 
faster.  A large part of the 

01:08:05.894 --> 01:08:08.571
time, on build here, this week, 
you can listen and learn more 

01:08:09.223 --> 01:08:12.000
about what we're doing.  We want
to get this right and we need 

01:08:12.001 --> 01:08:15.763
your help to do it.  We're 
giving ourselves goals and 

01:08:15.764 --> 01:08:19.542
working on attribution tools to 
better-understand what's 

01:08:20.347 --> 01:08:24.332
affecting your build in your 
projects and we're making Gradle

01:08:25.606 --> 01:08:29.425
faster. 
We know that speed is better.  

01:08:29.426 --> 01:08:32.526
It's about trying things out, 
iterating and failing fast and 

01:08:33.992 --> 01:08:39.770
doing it again.  With instant 
run, we want to quickly apply 

01:08:40.070 --> 01:08:43.373
changes.  Part of that is around
deployment times. We know they 

01:08:43.651 --> 01:08:46.233
play a huge part and we've 
shipped an update in Android Pie

01:08:46.858 --> 01:08:49.474
where we're seeing a big 
difference in real-world and 

01:08:50.083 --> 01:08:59.135
sample projects between Pie and 
Oreo.  If you're using USB, we 

01:08:59.625 --> 01:09:03.097
have seen close to that emulator
speed.  Please let us know if 

01:09:03.632 --> 01:09:07.138
you're interested in giving 
early feedback.  

01:09:07.139 --> 01:09:10.099
That takes us to emulators.  
Because we want to make 

01:09:10.100 --> 01:09:15.841
iteration speed faster, we're 
investing in emulators for every

01:09:16.660 --> 01:09:22.447
OS.  We show you a snapshot and 
boot up and switch in under two 

01:09:23.617 --> 01:09:26.367
seconds.  
Productivity is also about 

01:09:26.516 --> 01:09:33.886
making the hard problems easier.
We heard it's hard to know how 

01:09:33.887 --> 01:09:39.170
you app is affecting battery 
life.  You can visualize the 

01:09:39.942 --> 01:09:43.611
battery usage and inspect 
background events.  

01:09:43.612 --> 01:09:47.989
The new beta for Android Studio 
3.3 is available today and was 

01:09:47.990 --> 01:09:53.808
just released moments ago.  
We know that in order for it to 

01:09:53.809 --> 01:09:57.202
be delightful, it has to be not 
just stable, but it has to be 

01:09:57.713 --> 01:10:00.631
rock-solid stable because of the
number of hours that you spend 

01:10:00.908 --> 01:10:04.190
there.  The main focus for our 
next few releases will be 

01:10:04.865 --> 01:10:10.254
quality, which we're calling 
Project Marble.  Fixing user 

01:10:10.913 --> 01:10:13.941
impacting bugs and investing our
infrastructure and tools.  We 

01:10:13.942 --> 01:10:17.243
know that sometimes we've missed
memory leaks before we've 

01:10:17.850 --> 01:10:21.035
shipped so we're building tools 
to help protect those leaks 

01:10:21.322 --> 01:10:26.543
before they even happen.  
Dave mentioned how millions of 

01:10:26.795 --> 01:10:35.294
Android apps run on chromebooks,
we're bringing it to Chrome OS 

01:10:35.604 --> 01:10:39.884
later next year.  
Now, I'd like to invite Matt 

01:10:40.290 --> 01:10:44.180
Henderson to share more about 
app size and what we're doing 

01:10:45.794 --> 01:10:49.194
with the Android App Bundle.
[Applause]

01:10:49.195 --> 01:10:56.921
So, I work on developer tools, 
like the Play console.  Apps 

01:10:56.922 --> 01:11:02.718
have grown dramatically in size.
The average is up five times 

01:11:02.719 --> 01:11:09.405
since 2012.  But larger size 
carries a cost.  It reduces the 

01:11:09.693 --> 01:11:15.859
install conversion rate and it 
increases uninstall rate.  You 

01:11:16.823 --> 01:11:23.775
told us that using multi-APK was
a painful way to reduce app 

01:11:24.268 --> 01:11:29.564
size.  So the Android App Bundle
makes it much simpler.  Using 

01:11:29.565 --> 01:11:33.873
the App Bundle, we reduce size 
by generating an APK for the 

01:11:34.275 --> 01:11:38.985
languages, the screen density, 
the CPU architecture that each 

01:11:39.235 --> 01:11:44.650
user needs.  And it's working.  
While size reductions vary, on 

01:11:44.651 --> 01:11:49.691
average, apps are seeing a 35% 
reduction in size compared to a 

01:11:51.467 --> 01:11:56.083
universal APK.  
Now, with the recent stable 

01:11:56.361 --> 01:12:01.408
release of Android Studio 3.2, 
App Bundles and production have 

01:12:02.514 --> 01:12:06.416
taken off.  They're up ten 
times.  Thousands of developers 

01:12:07.719 --> 01:12:10.784
have embraced App Bundle and the
number in production total 

01:12:12.007 --> 01:12:15.426
billions of installs.  And 
Google's apps, they're 

01:12:16.594 --> 01:12:23.189
switching, too.  YouTube, Google
Maps, photos, Google News are 

01:12:23.403 --> 01:12:28.520
all in production.  Photos, for 
example, is now 40% smaller.  

01:12:28.809 --> 01:12:36.230
So, we're really excited about 
the App Bundle's potential.  We 

01:12:36.811 --> 01:12:41.567
sign APK for delivery to the end
user.  This is highly-secure.  

01:12:41.972 --> 01:12:47.462
We protect your key in the same 
memory that -- in the same 

01:12:47.916 --> 01:12:55.208
storage we protect Google's own 
keys.  It allows us to process 

01:12:56.034 --> 01:12:59.351
the App Bundle to generate the 
optimized APKs and this allows 

01:12:59.352 --> 01:13:04.064
you to benefit from additional 
optimizations in the future.  

01:13:04.807 --> 01:13:08.543
Starting right now, so I'm happy
to announce that the App Bundle 

01:13:08.821 --> 01:13:14.158
now supports uncompressed native
libraries.  This utilizes an 

01:13:14.953 --> 01:13:18.872
existing Android platform 
feature that was little used 

01:13:18.873 --> 01:13:27.629
because in the past, you would 
have had to use devices.  We 

01:13:28.288 --> 01:13:31.177
have no additional developer 
work needed.  The App Bundle now

01:13:32.227 --> 01:13:34.227
makes apps

01:13:36.199 --> 01:13:43.951
using native libraries 8% 
smaller to download.  

01:13:43.952 --> 01:13:51.751
By adding dynamic features, you 
can add any app functionality 

01:13:52.541 --> 01:13:56.546
on-demand.  For example, you 
don't need to send that same big

01:13:56.880 --> 01:14:02.172
feature to 100% of your users if
it's only going to be used by 

01:14:02.173 --> 01:14:07.048
10% of them.  And you don't need
to keep big features that are 

01:14:07.354 --> 01:14:11.090
only used once.  Dynamic 
features can be installed and 

01:14:11.993 --> 01:14:15.650
uninstalled dynamically when 
your app requests it.  

01:14:15.651 --> 01:14:19.579
Or, you can chose to defer 
installing to a later time, when

01:14:19.580 --> 01:14:25.855
the app goes to the background. 
Facebook was one of our launch 

01:14:26.651 --> 01:14:30.858
partners.  And they are using 
dynamic features in production 

01:14:30.859 --> 01:14:34.918
in the main Facebook app and in 
Facebook Lite.  For example, 

01:14:35.295 --> 01:14:39.576
card scanning is a feature that 
only a small percentage of 

01:14:39.577 --> 01:14:44.346
Facebook's user base is using so
moving it to a dynamic feature 

01:14:44.347 --> 01:14:51.117
avoids it taking up almost two 
megabytes on each user's device 

01:14:51.402 --> 01:14:58.475
Within an App Bundle, installed 
and instant apps can have the 

01:14:59.529 --> 01:15:05.275
same base module and the same 
dynamic feature modules.  

01:15:05.276 --> 01:15:08.940
Separating it out is a great way
to get your base small enough to

01:15:09.611 --> 01:15:13.516
offer an instant app experience.
Now, you can start building and 

01:15:13.993 --> 01:15:22.043
testing dynamic features using 
Android Studio 3.2 today and 

01:15:22.436 --> 01:15:27.671
join our beta Now, I'd like to 
invite

01:15:33.175 --> 01:15:39.034
you up to talk more.
&gt;&gt; Thanks, Matt.  We've heard 

01:15:39.347 --> 01:15:43.552
your feedback, that you'd like 
to more control to ensure users 

01:15:43.553 --> 01:15:49.052
are running the latest and 
greatest version of your app.  

01:15:51.617 --> 01:15:55.681
There's the Google Play update 
API.  There's an immediate 

01:15:56.003 --> 01:15:59.497
update flow where they have a 
full-screen experience, they can

01:15:59.973 --> 01:16:04.823
accept the update and have it 
installed immediately.  Many of 

01:16:05.347 --> 01:16:08.928
you have implemented similar 
variance in your app.  This new 

01:16:09.281 --> 01:16:12.785
implementation is less 
error-prone and super easy to 

01:16:13.262 --> 01:16:17.115
integrate. 
Next is flexible updates.  

01:16:17.116 --> 01:16:20.789
Flexible updates are really cool
because they actually allow the 

01:16:21.079 --> 01:16:25.637
update experience to be 
integrated into your app.  As an

01:16:28.182 --> 01:16:31.377
example, Google Chrome nudges 
users.  If the user accepts that

01:16:32.584 --> 01:16:35.777
update, the download happens in 
the background and the user can 

01:16:36.066 --> 01:16:39.371
continue to use your app.  When 
the download is complete, it's 

01:16:39.682 --> 01:16:43.800
up to you, as the developer, to 
decide if you'd like the update 

01:16:45.444 --> 01:16:49.476
to be applied immediately or if 
you'd like it applied the next 

01:16:49.477 --> 01:16:52.312
time the app is in the 
background.  Google Chrome is 

01:16:53.309 --> 01:16:57.652
testing this now and we're 
excited to be testing access 

01:16:58.059 --> 01:17:03.350
coming soon.  
Next instant apps.  Instants 

01:17:03.576 --> 01:17:09.144
apps are avail on 1.3 billion 
devices.  We've been hard at 

01:17:09.145 --> 01:17:11.479
work on simplifying the 
development experience for 

01:17:11.763 --> 01:17:15.145
instant apps.  Earlier this 
year, we increased the size 

01:17:16.541 --> 01:17:21.448
limit for instant apps from 4 
megabytes to 10 megabytes.  Many

01:17:22.004 --> 01:17:24.929
developers are already able to 
get under that size limit 

01:17:25.248 --> 01:17:30.056
without additional work.  
 Additionally, the dynamic 

01:17:30.778 --> 01:17:35.378
features are instant compatible.
We've also made it possible to 

01:17:36.014 --> 01:17:40.737
upload and test intent apps of 
any size.  You canexperience 

01:17:40.738 --> 01:17:45.469
iterate on the user  at the same
time you're optimizing for size.

01:17:47.904 --> 01:17:49.904
And we've also made

01:17:52.607 --> 01:17:56.262
web URLs.  
You can reroute your users into 

01:17:56.263 --> 01:17:58.745
your instant experience 
automatically.  

01:17:58.746 --> 01:18:02.463
Lastly, I'm excited to announce 
that today, in Android Studio 

01:18:02.464 --> 01:18:07.090
3.3 beta, you can now have a 
single Android Studio that 

01:18:07.255 --> 01:18:10.682
houses your instant and 
installed apps.  This 

01:18:11.115 --> 01:18:15.009
dramatically helps.  
Additionally, the App Bundle can

01:18:15.010 --> 01:18:20.387
be uploaded once to the Play 
developer console.  

01:18:20.388 --> 01:18:24.778
We're super excited about that. 
And, with that, back to

01:18:32.608 --> 01:18:33.674
Steph.
[Applause]

01:18:32.608 --> 01:18:38.318
&gt;&gt; Android's open source means 
it's an incredible to watch what

01:18:38.319 --> 01:18:43.088
you're building on top of the 
platform.  With over 2 billion 

01:18:43.361 --> 01:18:49.833
devices, three-quarters of [no 

01:19:39.677 --> 01:19:40.098
audio]
audio]. 

01:19:40.099 --> 01:19:47.856
So, that's it for the keynote.  
Thank you.  I hope you enjoy 

01:19:49.570 --> 01:19:50.997
Android Dev Summit. 
[Applause]

01:19:50.998 --> 01:19:57.153
&gt;&gt; Now, everyone, please give a 
warm welcome to Dan 

01:20:00.593 --> 01:20:02.593
Galpin.

01:20:11.505 --> 01:20:13.523
[Applause]
 [Loss of

01:20:25.151 --> 01:20:27.702
I first wanted to give a 
shout-out to everyone on the 

01:20:28.347 --> 01:20:35.363
livestream, I hope you could all
be here in person.  You can also

01:20:35.995 --> 01:20:41.710
follow the online action on 
Twitter.  

01:20:41.711 --> 01:20:47.604
And now, I need my next slide.
[Laughter]

01:20:47.605 --> 01:20:50.790
Otherwise, I'll have to 
improvise.  I can do this.  So, 

01:20:50.791 --> 01:20:53.442
there's a lot of stuff going on 
here, today.  One of the things 

01:20:53.730 --> 01:20:58.792
I want all of you, onsite, to be
able to take advantage of is the

01:20:59.189 --> 01:21:04.752
fact that we have a tremendous 
amount of Android experts 

01:21:05.209 --> 01:21:07.916
available here in office hours. 
It will be out in the lobbies, 

01:21:07.917 --> 01:21:12.739
next to these rooms.  Whether 
you're here or tuning in 

01:21:13.499 --> 01:21:16.118
remotely, check out the Android 
Dev Summit app so you can look 

01:21:16.445 --> 01:21:19.236
at all the events and build your
own schedule.  

01:21:19.237 --> 01:21:21.635
Now you'll notice we have 
different sections throughout 

01:21:21.636 --> 01:21:26.215
the day.  This is a bit of an 
experiment and the 20-minute 

01:21:26.499 --> 01:21:29.890
sessions are going to run 
back-to-back with the intention 

01:21:30.101 --> 01:21:32.247
that you watch both sessions 
because there's no time to leave

01:21:32.514 --> 01:21:36.224
the room.  Also, we have 
lightning talks that are going 

01:21:36.490 --> 01:21:40.957
to be a speed round where we 
move as quickly aspossible to 

01:21:41.457 --> 01:21:46.002
smash as much content to 40 
minutes.  

01:21:46.003 --> 01:21:50.932
We're going to have Q&amp;A with the
presenters, outside of these.  

01:21:51.876 --> 01:21:55.199
Make sure to check out the 
schedule posted on the wall.  We

01:21:55.485 --> 01:21:59.333
have so many that wanted to talk
to you that we actually can't 

01:21:59.914 --> 01:22:03.246
fit them here at all once.  You 
want to make sure that you're 

01:22:03.663 --> 01:22:06.076
here so that the engineer that 
worked on bugs that you might be

01:22:06.542 --> 01:22:10.221
interested are actually going to
be there to defend themselves. 

01:22:14.047 --> 01:22:16.728
LAEF  [Laughter]
Office hours will be running all

01:22:17.123 --> 01:22:21.340
day so you're allowed to skip 
class if you want to go to 

01:22:22.680 --> 01:22:28.995
office hours.  And decides, 
we're going to be running all 

01:22:29.950 --> 01:22:33.399
the these.  
We have having a party later on.

01:22:33.682 --> 01:22:36.196
Get ready for an epic night of 
music and standing around and 

01:22:38.538 --> 01:22:40.018
talking to people.
[Laughter]

01:22:40.019 --> 01:22:42.979
And that's it.  I really 
appreciate everything.  We have 

01:22:43.668 --> 01:22:46.486
a little break now and so enjoy 
the rest of

01:22:58.617 --> 01:23:02.671
Android Dev Summit [Applause]
Everyone, our next session will 

01:23:03.076 --> 01:23:06.093
begin in 10 minutes. 

01:40:53.986 --> 01:41:00.791
   Welcome, everyone.  Welcome 
back.  Our program is going to 

01:41:01.127 --> 01:41:04.943
be underway in three minutes.  
We ask that you mute your mobile

01:41:05.261 --> 01:41:08.511
devices and thank you for taking
your seats.  

01:41:08.512 --> 01:41:13.377
Our program will begin in three 
minutes. 

01:44:14.184 --> 01:44:16.184
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:26.194
minutes.  
minutes.  

01:44:24.861 --> 01:44:29.092
minutes.  
  I haven't done anything yet.

01:44:29.093 --> 01:44:33.949
  Thanks for coming.  My name is
Jose Alcérreca.

01:44:33.950 --> 01:44:37.287
My name is Yigit Boyar.  I'm an 
engineer.

01:44:37.553 --> 01:44:42.052
Today, we're going to talk about
LiveData.  LiveData is one of 

01:44:42.053 --> 01:44:45.317
the first Architecture Component
that we've released last year 

01:44:45.318 --> 01:44:49.116
and in this talk, we're going to
explain what it is.  We're going

01:44:49.400 --> 01:44:53.335
to talk about some of the 
transformations you can do, how 

01:44:53.336 --> 01:45:00.339
to come been LiveDatas and talk 
about patterns and anti-patterns

01:45:01.274 --> 01:45:06.362
you might want to avoid.  
We're going to explain all these

01:45:08.046 --> 01:45:10.730
characteristics, but first, 
we're going to start with 

01:45:11.117 --> 01:45:14.411
observable, what's an 
observable?  So, in our 

01:45:16.389 --> 01:45:20.399
object-oriented world, probably 
the easiest way of communicated 

01:45:20.889 --> 01:45:24.927
one component and another is 
having a reference from one 

01:45:25.196 --> 01:45:30.873
object from another and call it 
directly.  

01:45:30.874 --> 01:45:35.122
However, in Android, this might 
have problems.  Components have 

01:45:35.343 --> 01:45:42.045
different likecycles and 
different lifespans.  This is 

01:45:42.951 --> 01:45:45.942
the ViewModel scope diagram.  
Simple thing like device 

01:45:46.151 --> 01:45:49.933
rotation can re-create the 
activity.  So, you probably know

01:45:50.895 --> 01:45:54.058
that having a reference of 
activity in this ViewModel would

01:45:54.335 --> 01:45:58.509
be a bad idea because it leads 
to memory leaks, even crashes 

01:45:58.510 --> 01:46:04.000
with no exceptions.  
So, instead of having a 

01:46:04.528 --> 01:46:10.419
reference AKactivity, we're 
going to have in the activity.  

01:46:10.420 --> 01:46:14.765
How to we send data?  We're 
going to let the activity 

01:46:14.766 --> 01:46:18.983
observe the ViewModel.  And for 
that, we're going to use 

01:46:19.268 --> 01:46:22.578
observables LiveData.  
Let's see how this looks with a 

01:46:23.031 --> 01:46:27.984
little bit of code.  In the 
ViewModel, we expose our 

01:46:27.985 --> 01:46:33.027
LiveData.  You're going to see a
little examples of how to expose

01:46:33.028 --> 01:46:36.401
LiveData from our ViewModel.  In
our activity, we make the actual

01:46:37.228 --> 01:46:41.114
subscription and we do that by 
calling the observe method.  The

01:46:41.396 --> 01:46:47.428
first parameter is something 
called likecycle.  Yigit is 

01:46:47.746 --> 01:46:50.443
going to talk about this.  
The second part is an 

01:46:51.018 --> 01:46:55.751
observeable.  This is what's 
called whenever the observable, 

01:46:55.752 --> 01:47:04.657
the LiveData's value is changed.
  So, Jose mentioned you want to

01:47:04.997 --> 01:47:08.746
reference an object in the 
larger scope, like a ViewModel 

01:47:09.381 --> 01:47:13.458
from an object in a smaller 
scope, like an activity.  But of

01:47:13.459 --> 01:47:16.517
course when you observe 
something, it has to keep a 

01:47:16.878 --> 01:47:19.983
reference back to you to be able
to call it so there is a 

01:47:20.768 --> 01:47:26.986
reference.  But why is this not 
a problem with LiveData?  It is 

01:47:27.513 --> 01:47:31.909
a component.  To be able to 
observe LiveData, you have to 

01:47:33.091 --> 01:47:37.357
provide the lifecycle and it 
maintains your subscription for 

01:47:38.566 --> 01:47:43.788
free.  So, if you're observer's 
lifecycle is not in a good 

01:47:44.090 --> 01:47:48.144
state, it's not going to call 
you back.  Or when your activity

01:47:48.376 --> 01:47:55.093
or fragment is destroyed, it 
will call it back for you.  

01:47:55.094 --> 01:48:02.156
If you go back to the previous 
graph, your LiveData observer 

01:48:03.052 --> 01:48:07.091
will only be called when it is 
started and before it starts.  

01:48:07.092 --> 01:48:10.244
You don't need to care about

01:48:15.109 --> 01:48:19.358
fragment.  
Probably the most, like, 

01:48:19.702 --> 01:48:24.297
distinctive property of LiveData
is the data holder.  It's not --

01:48:24.298 --> 01:48:29.179
we keep saying this, it's not a 
stream, it's a value holder.  If

01:48:29.498 --> 01:48:34.351
you go back to our previous 
graphs, on the right, we have 

01:48:34.713 --> 01:48:40.076
LiveData in ViewModel and on the
left is activity or fragment 

01:48:41.250 --> 01:48:44.319
observing this.  Once you set 
the LiveData, it is passed to 

01:48:44.693 --> 01:48:47.732
the activity.  When it changes, 
the activity receives a new 

01:48:48.299 --> 01:48:51.539
updated value.  
The difference happens when you 

01:48:51.811 --> 01:48:55.013
change the value when 
observeable is not in an active 

01:48:55.297 --> 01:49:02.933
state, it has no idea that it is
the activity.  While your 

01:49:03.794 --> 01:49:07.925
activity's still in the 
background, you send a new value

01:49:08.115 --> 01:49:11.947
and your activity still doesn't 
see this.  

01:49:11.948 --> 01:49:16.690
Now, the data holder property 
comes in now when your activity 

01:49:16.996 --> 01:49:21.689
comes back, what user is seeing 
in the foreground.  It receives 

01:49:23.904 --> 01:49:29.210
the latest value from the 
ViewModel.  It only cares about 

01:49:29.487 --> 01:49:33.461
holding a single value and it's 
the latest value.  This works 

01:49:33.462 --> 01:49:36.676
perfect for UI because you only 
want to show what it is right 

01:49:36.677 --> 01:49:40.356
now.  But, if you are trying to 
process this, this is not what 

01:49:40.656 --> 01:49:44.276
you're looking for.  
Similarly, if you change the 

01:49:44.599 --> 01:49:49.437
value after activity is 
destroyed, nothing happens.

01:49:50.527 --> 01:49:57.986
Okay.  Let's talk about 
LiveData.  The libraries 

01:49:58.854 --> 01:50:03.398
provides map.  We already said 
that LiveData's great to 

01:50:03.995 --> 01:50:07.258
communicate view and a 
ViewModel.  What if we have a 

01:50:09.521 --> 01:50:14.186
third component, maybe a 
deposit?  How do we make this 

01:50:14.666 --> 01:50:20.655
from the ViewModel?  We don't 
have a lifecycle there.  What if

01:50:20.937 --> 01:50:27.583
it is observing data sources, in
this case?  Well, Yigit said to 

01:50:27.584 --> 01:50:32.300
me, if you need a lifecycle in 
your ViewModel, you probably 

01:50:33.477 --> 01:50:39.000
need a transformation, but 
that's actually wrong.

01:50:39.001 --> 01:50:41.174
[Laughter]
Sorry, Yigit.  What I say is 

01:50:41.906 --> 01:50:48.406
that you definitely need a 
transformation.  Don't eve R use

01:50:50.716 --> 01:50:54.706
lifecycle.  
So, how do we make a bridge 

01:50:55.102 --> 01:50:57.102
between the view and

01:50:59.992 --> 01:51:01.992
this?  We use a map.  A 

01:51:05.080 --> 01:51:08.587
one-to-one static 
transformation.  We use 

01:51:08.588 --> 01:51:12.362
LiveData, ViewModel result.  
It's the result of a 

01:51:12.936 --> 01:51:18.488
transformation's map.  The first
parameter is the source, the 

01:51:19.223 --> 01:51:22.900
LiveData source and the second 
parameter is the transformation 

01:51:23.230 --> 01:51:27.276
function.  It's converting from 
the data of the model to the UI 

01:51:27.549 --> 01:51:31.708
model.  This is how the 
signature would look like in 

01:51:31.872 --> 01:51:36.810
Kotlin.  It has source, which is
a LiveData of X and it returns a

01:51:36.811 --> 01:51:41.711
LiveData y.  So, it's a breach 
of LiveDatas and in the middle, 

01:51:41.712 --> 01:51:46.766
we have a transformation 
function that transtorms from X 

01:51:47.259 --> 01:51:51.440
to Y.  It doesn't know anything 
about LiveData.

01:51:52.345 --> 01:51:55.966
So, when you establish the 
transformation, the key, here, 

01:51:56.596 --> 01:52:02.639
is the lifecycle is carried over
for you.  Let's say you run a 

01:52:02.640 --> 01:52:06.605
transformation of a couple of 
LiveData and you hold on to it. 

01:52:07.619 --> 01:52:12.347
When someone -- that lifecycle 
is propagated to the LiveData 

01:52:12.849 --> 01:52:17.613
elements without you doing 
anything and it's completely 

01:52:17.853 --> 01:52:22.601
managed by us, so it's 
completely safe.  

01:52:22.602 --> 01:52:26.717
We have switchMaps. You have an 
application I you have a user 

01:52:27.419 --> 01:52:33.852
measure that keeps the log user 
ID.  When you grab it, you need 

01:52:35.379 --> 01:52:40.492
to talk to your user to get the 
user object and that probably 

01:52:41.158 --> 01:52:45.602
goes to the database and to the 
server.  It turns the LiveData, 

01:52:45.813 --> 01:52:50.122
as well.  Because user object 
might change, right?  It might 

01:52:50.567 --> 01:52:55.258
return you the cache.  So you're
in this situation where you have

01:52:55.556 --> 01:52:59.541
LiveData and a LiveData for user
and you need to chain these 

01:52:59.945 --> 01:53:05.234
things.  So networks, if you are
chaining from an ID to a user, 

01:53:05.676 --> 01:53:07.676
how do we change from

01:53:11.767 --> 01:53:17.992
an ID, that's switchMap.  
We provided LiveData and our 

01:53:18.272 --> 01:53:22.748
function, this time, returns the
LiveData.  So, signature looks 

01:53:22.749 --> 01:53:27.498
like this.  You have a source.  
At the end, you have a LiveData 

01:53:28.471 --> 01:53:33.942
and you provide a function that 
converts the X to LiveData.  

01:53:34.161 --> 01:53:38.412
What this technically does is 
every time the user ID changes, 

01:53:38.785 --> 01:53:41.960
it calls your function.  You 
give it a new LiveData, it takes

01:53:42.488 --> 01:53:47.437
it from in previous data and 
that is the new one.  Like 

01:53:47.828 --> 01:53:51.664
switches tracks or like 
switchboards.  

01:53:51.665 --> 01:53:57.084
It's completely managed for you.
You get all the benefits of 

01:53:57.355 --> 01:54:03.375
using LiveData.  
Now, we only provide Map and 

01:54:04.339 --> 01:54:07.889
switchMap.  You don't have a 
million transformations.  This 

01:54:08.199 --> 01:54:12.503
is very limiting and sometimes 
you may want to write you own 

01:54:12.791 --> 01:54:15.770
and we don't want to provide 
many.  If you want to write your

01:54:16.104 --> 01:54:21.901
own, it's very easy.  If I show 
you the little code we have for 

01:54:23.378 --> 01:54:25.922
the mapping implementation, it 
returns the LiveData and you 

01:54:26.392 --> 01:54:32.687
give it a function, right.  All 
it does is creates this 

01:54:33.764 --> 01:54:36.046
MediatorLiveData and it is a 
source for the MediatorLiveData.

01:54:36.047 --> 01:54:40.394
It kind of tells us that the 
value of this MediatorLiveData 

01:54:41.909 --> 01:54:45.380
is derived from this other 
LiveData.  So whenever that 

01:54:45.660 --> 01:54:49.299
other LiveData changes, call my 
call-back and in the call-back, 

01:54:49.685 --> 01:54:53.511
we apply the function to the 
value and set the value on the 

01:54:53.927 --> 01:54:57.306
MediatorLiveData.  This is super
simple to write.  And there is 

01:54:57.607 --> 01:55:02.930
no lifecycle here, but all of 
this code is lifecycle.  

01:55:02.931 --> 01:55:08.900
So, if it's so easy, let's 
create a new one.  Let's say we 

01:55:08.901 --> 01:55:13.857
want to do a bunch of strings 
and you want to have the total. 

01:55:15.465 --> 01:55:18.309
LiveData and another LiveData 
and you have a LiveData that has

01:55:18.770 --> 01:55:23.483
the total number of characters 
in those elements and it updates

01:55:24.355 --> 01:55:29.181
if any of those values update.  
So, we call the total line.  We 

01:55:29.445 --> 01:55:33.671
receive a list of LiveDatas and 
we return the LiveData.  What we

01:55:34.874 --> 01:55:38.314
do, here, is we have a function.
It is very simple.  It goes 

01:55:38.718 --> 01:55:41.933
through all of the LiveDatas and
sums their length.  We need to 

01:55:42.988 --> 01:55:50.254
account for nulls here because 
LiveData has nulls.  Look at all

01:55:50.581 --> 01:55:54.986
the LiveData values and the 
total length.  Once we did that,

01:55:56.146 --> 01:56:00.686
we add each given LiveData as a 
source to our mediator.  It says

01:56:01.280 --> 01:56:05.216
the value of this mediator 
depends on this other LiveData. 

01:56:05.217 --> 01:56:09.101
Any time it changes, it calls 
back our function, which 

01:56:09.489 --> 01:56:13.857
calculates the new value for the
MediatorLiveData.  

01:56:13.858 --> 01:56:18.411
And this is, like, four lines of
code and you have a 

01:56:19.734 --> 01:56:22.942
transformation of your 
LiveDatas.  

01:56:22.943 --> 01:56:26.422
Now, there are some common 
mistakes you can make while 

01:56:26.703 --> 01:56:29.584
using LiveData and we want to 
touch base on these things.  One

01:56:29.871 --> 01:56:39.332
thing we see a lot is, let's say
you -- you use JSON,

01:56:40.205 --> 01:56:44.006
using transformation for that is
not a good idea because it is a 

01:56:44.265 --> 01:56:47.954
value holder.  The long string 
you fetch from your server is 

01:56:47.955 --> 01:56:52.944
going to stay in memory.  It's 
going to hold on to that so you 

01:56:53.283 --> 01:56:56.891
probably don't want to use 
LiveData for something like 

01:56:57.121 --> 01:57:00.377
that.  
  Okay.  The second item is 

01:57:00.683 --> 01:57:06.319
about sharing instances of 
LiveData.  At one point, I was 

01:57:06.768 --> 01:57:12.104
trying to make an app with 
LiveDatas and I had a repository

01:57:12.290 --> 01:57:17.340
that was there.  I said, okay, I
can just save some LiveDatas and

01:57:17.652 --> 01:57:24.469
share a single LiveData.  I a 
repository, it takes a data 

01:57:24.739 --> 01:57:27.503
source and the LiveData we're 
returning in load item is shared

01:57:27.775 --> 01:57:31.991
by everyone that calls load 
item.  

01:57:31.992 --> 01:57:39.333
Now, this is fine, it works.  
But this a very interesting 

01:57:39.779 --> 01:57:45.730
case.  This anti pattern is 
about you thinking about which 

01:57:46.059 --> 01:57:51.032
servers are going to be active. 
There is this case, in Android, 

01:57:51.033 --> 01:57:56.075
where two activities are going 
to be active at the same time.  

01:57:56.565 --> 01:58:00.834
Imagine activity 1 observes item
number 1 and activity number two

01:58:01.463 --> 01:58:06.562
observes number two.  When we 
load activity 2, it's going to 

01:58:07.852 --> 01:58:13.246
load data for item 2.  Activity 
one is also going to receive 

01:58:13.598 --> 01:58:18.318
that data.  Because it's in the 
middle of the animation, you're 

01:58:18.319 --> 01:58:25.778
going to see a flash, a glitch. 
  You created a field that's an 

01:58:26.061 --> 01:58:29.762
instance of LiveData, you're 
probably doing it wrong.

01:58:29.763 --> 01:58:35.985
The solution is to create a 
LiveData every time.  It's very 

01:58:35.986 --> 01:58:39.735
light-weight.  
The third item is about where 

01:58:39.736 --> 01:58:43.034
and when to create your 
transformations and this is all 

01:58:43.642 --> 01:58:46.943
about wiring.  It's similar to 
when you create a circuit.  You 

01:58:47.243 --> 01:58:52.291
lay down your components and you
wire everything up and for one 

01:58:52.292 --> 01:58:56.435
set of inputs, you're going to 
have a known set of outputs.  

01:58:56.888 --> 01:59:01.051
But you don't unplug a wire when
it's in operation and plug it in

01:59:01.052 --> 01:59:05.004
somewhere else.  This is exactly
what this ViewModel is doing.  

01:59:05.271 --> 01:59:08.265
Lots of horrible things 
happening in this ViewModel, by 

01:59:08.607 --> 01:59:09.766
the way.
[Laughter]

01:59:09.767 --> 01:59:15.589
For starters --
  You should have a, don't do 

01:59:16.977 --> 01:59:21.072
this, in this slide.
[Laughter]

01:59:21.073 --> 01:59:26.201
Someone copy-pasted and then 
blamed us.

01:59:26.202 --> 01:59:28.644
[Laughter]
  It's exposing item data, which

01:59:28.971 --> 01:59:35.784
is a valuable.  And also, it's 
exposing a mutable LiveData.  

01:59:37.696 --> 01:59:42.770
You should almost never do this.
You should always expose 

01:59:42.771 --> 01:59:47.314
something that is immutable so 
your observers can't change it. 

01:59:47.829 --> 01:59:52.636
So, after subscription, we call 
load data from our activity to 

01:59:52.865 --> 02:00:00.138
set the ID of the thing we want 
to load and we reassigning item 

02:00:01.119 --> 02:00:05.047
data to something.  Something 
happened, so the observer is not

02:00:06.433 --> 02:00:10.296
going to know --
  Actually, even if you're 

02:00:11.744 --> 02:00:13.744
returning LiveData and your 

02:00:16.253 --> 02:00:19.586
observe observer's subscribing, 
they're doing the new one.

02:00:20.129 --> 02:00:23.532
So, the solution to this 
requires a little bit of 

02:00:23.739 --> 02:00:26.526
planning.  We have two 
LiveDatas.  One is mutable and 

02:00:26.527 --> 02:00:29.880
it's private to this ViewModel. 
And the other one is the one 

02:00:32.908 --> 02:00:37.999
that is exposed from the 
ViewModel.  The is 

02:00:38.000 --> 02:00:41.874
transformation source map.  It 
is that mutable LiveData so 

02:00:42.114 --> 02:00:48.964
every time that item ID changes,
the transformation is going to 

02:00:49.512 --> 02:00:52.690
be called with the appropriate 
ID.  

02:00:52.691 --> 02:00:57.635
After the subscription to this 
item data has happened, we call 

02:00:58.751 --> 02:01:04.021
load data, we pass the string, 
it might come from the intent 

02:01:04.914 --> 02:01:08.255
and when we set the value, it 
triggers an update and 

02:01:08.599 --> 02:01:14.149
everything is going to work as 
you expected it to work.

02:01:14.150 --> 02:01:19.242
Okay.  So, we like to think 
LiveData is awesome and is 

02:01:19.243 --> 02:01:22.924
solves all the problems, but it 
doesn't.  We see people trying 

02:01:24.590 --> 02:01:28.941
to use it in other areas.  I 
want to make it clear, if you're

02:01:29.704 --> 02:01:31.704
writing an application for 

02:01:34.579 --> 02:01:43.508
operators, you totally bought 
into this, use RxJava. 

02:01:46.779 --> 02:01:54.526
If you have things that are not 
related to lifecycle or UI, you 

02:01:54.527 --> 02:01:58.998
are trying to synchronize it to 
the the back-end, there's no 

02:01:59.283 --> 02:02:04.360
reason to use LiveData for 
something like that.  Use a 

02:02:04.810 --> 02:02:09.842
call-back.  
Another use case is having these

02:02:11.552 --> 02:02:15.860
operations, you have data and 
convert it and log back and 

02:02:16.143 --> 02:02:22.162
return it.  For those things, if
you are using Kotlin, it is a 

02:02:22.443 --> 02:02:30.291
new, exciting area.  You might 
use RxJava, but don't use 

02:02:30.590 --> 02:02:33.926
LiveData.  LiveData works very 
well as the last layer for your 

02:02:33.927 --> 02:02:40.715
UI.  It's perfectly okay.  If 
you try to scale it, it's just 

02:02:41.101 --> 02:02:45.303
not going to work.  
So, many things we mentioned in 

02:02:45.601 --> 02:02:50.210
this talk -- actually Jose has 
more.  You can go read them.  

02:02:50.680 --> 02:02:56.933
Check out our samples on GitHub.
We have simple uses of LiveData,

02:02:56.934 --> 02:03:02.121
as well as complicated with 
using Room.  Has multiple data 

02:03:03.700 --> 02:03:09.111
sources, transformations and you
can look at the code.  If it has

02:03:10.594 --> 02:03:13.102
bugs, you can blame this guy.  
He wrote it.  

02:03:13.103 --> 02:03:18.282
Yeah.  Thank you very much for 
coming.  I hope this was useful 

02:03:18.555 --> 02:03:22.969
and we will be in -- after the 
talks.  

02:03:22.970 --> 02:03:24.970
Thank you. 
  Thank you.

02:03:58.001 --> 02:03:58.373
[Applause]
[Applause]

02:03:58.374 --> 02:03:59.707
[Applause]
[Applause]

02:03:58.374 --> 02:04:01.063
[Applause]
[Applause]

02:04:01.064 --> 02:04:01.693
[Applause]
[Applause]

02:04:01.694 --> 02:04:03.694
Okay. 

02:04:05.999 --> 02:04:09.467
We will start.  Sorry. 

02:04:12.508 --> 02:04:14.508
Okay. 

02:04:18.147 --> 02:04:23.068
This guy's new, who are you?
[Laughter]

02:04:23.069 --> 02:04:26.229
I'm Daniel Santiago.  I work 
mainly in Room. 

02:04:26.495 --> 02:04:31.628
Okay.  So, today, we are going 
to talk about Room.  But, before

02:04:32.632 --> 02:04:37.320
we -- I don't think my clicker's
working.  Nope.

02:04:37.590 --> 02:04:41.947
Working on it, guys.
  Okay.  Sorry.  All right.  

02:04:42.681 --> 02:04:47.768
Yes, it started working.  Now 
I'm trying to go back.  Okay.  

02:04:48.995 --> 02:04:55.221
Now -- yes.  All cool.  
So, why do you want Room or do 

02:04:55.814 --> 02:04:59.269
you want to write Room?  We 
asked people to write 

02:05:01.001 --> 02:05:03.003
offline-ready applications

02:05:07.005 --> 02:05:12.271
[no audioaudio]. 
It's pretty much impossible.  So

02:05:12.638 --> 02:05:20.441
for this reason, you do need a 
database.  We have esculite.  

02:05:20.749 --> 02:05:23.986
It's very fast and when you need
to optimize it for your use 

02:05:24.354 --> 02:05:30.503
case, it's very easy to do so.  
It's a really powerful query 

02:05:31.274 --> 02:05:33.410
language.  You can express many 
things and make

02:05:37.008 --> 02:05:41.149
it concise.  
And SQLite scales very well.  

02:05:42.494 --> 02:05:47.008
For an application, you probably
won't have much data, but you 

02:05:47.477 --> 02:05:53.795
can have multiple gigabytes.  
For your 

02:05:58.252 --> 02:05:59.922
scalables, SQLite would be 
perfect.  

02:05:59.923 --> 02:06:05.232
You need to write out of 
boilerplate to convert between 

02:06:05.425 --> 02:06:09.615
your Java and your SQLite.  
There's no compile time safety 

02:06:09.865 --> 02:06:16.277
so if you're building a query 
and you forget an "if "case, 

02:06:16.895 --> 02:06:19.734
you're going to get a runtime 
crash.  

02:06:19.735 --> 02:06:23.739
You cannot observe what has 
changed.  We want people to 

02:06:24.017 --> 02:06:27.877
write reactive applications or 
UIs and if you can't observe, it

02:06:27.878 --> 02:06:32.799
is hard.  You have to build it 
yourself.  So, we build it for 

02:06:33.094 --> 02:06:39.189
you.  So, about two years ago, 
we ship Room, we introduce 

02:06:39.657 --> 02:06:44.028
compile time safety and a strong
ID integration. As you can 

02:06:44.587 --> 02:06:46.534
notice with Room, with 
navigations, this is a big thing

02:06:46.535 --> 02:06:54.836
for us.  We want to develop 
librarlibraries, together with 

02:06:54.837 --> 02:07:00.344
Android Studio. 
This year's I/O, we had SQLite 

02:07:00.632 --> 02:07:07.924
and support for paging so you 
can have data sets, queries and 

02:07:08.198 --> 02:07:12.790
log them.  
The release is a conversion from

02:07:12.791 --> 02:07:17.911
Android support to AndroidX.  We
kept it the same as 1.1 so you 

02:07:18.193 --> 02:07:24.351
can have an easy migration.  
2.1, we're going to talk about 

02:07:24.352 --> 02:07:34.179
today.  This is 2.0.  We have, 
like, full text search, wheels, 

02:07:34.435 --> 02:07:37.675
AutoValue and more stuff.
  One of the pretty cool new 

02:07:38.052 --> 02:07:44.827
feature s we added in 2.1 is 
full-textsearch.  It's a way to 

02:07:45.159 --> 02:07:48.834
index text documents and make 
them searchable.  Let's take a 

02:07:49.191 --> 02:07:55.787
look at an example.  Imagine we 
have a music app and we want to 

02:07:56.057 --> 02:07:59.538
search function.  You want to 
type something, you want to be 

02:07:59.959 --> 02:08:05.170
able to find songs within that 
music app.  If we have Room, we 

02:08:05.669 --> 02:08:09.126
expression, we store this song 
data in a table that's an 

02:08:09.367 --> 02:08:14.524
entity.  Conveniently, we have 
our label objects and our song 

02:08:14.826 --> 02:08:19.144
labels, you know, what's the 
song name, label name and artist

02:08:19.527 --> 02:08:22.726
name, this is kind of what we 
want to search and make the 

02:08:22.930 --> 02:08:28.991
index.  
If we were to do this, we need 

02:08:30.311 --> 02:08:35.337
to write a query and you had to 
use the operator.  This is not 

02:08:35.602 --> 02:08:41.057
very good.  It's very limited.  
That percentage sign is kind of 

02:08:41.785 --> 02:08:49.137
like a wild card and this --
  Even if you index that query

02:08:53.369 --> 02:08:56.621
column, SQLite won't be able to 
use it.

02:08:58.219 --> 02:09:04.116
So, don't do this.  Moreover, if
you try to actually search 

02:09:04.662 --> 02:09:08.668
across, you have to expand this 
query.  And this, as you can 

02:09:08.669 --> 02:09:13.701
see, doesn't easily scale.  
They helped us with this 

02:09:13.904 --> 02:09:19.423
situation because it now creates
a table and all the columns are 

02:09:19.424 --> 02:09:21.651
-- you now want to take your

02:09:24.713 --> 02:09:29.378
entity.  
Now, in your query, you use a 

02:09:30.957 --> 02:09:36.975
different operator and we were 
seeing the same column and that 

02:09:37.245 --> 02:09:39.749
basically tells the mash 
operator that you want to search

02:09:40.222 --> 02:09:47.842
across all those labels so this 
helps us with searching.  

02:09:47.843 --> 02:09:55.259
You might say, oh, I can use 
this on all of my tables, but 

02:09:55.585 --> 02:10:00.784
not quite.  It consumes more 
space because when you create a 

02:10:01.184 --> 02:10:04.691
table, you create a table and 
that's back by a few tables and 

02:10:04.990 --> 02:10:09.603
a lot of the information. This 
is known as chatter tables, when

02:10:09.604 --> 02:10:13.710
you query from your table, the 
information comes from these 

02:10:14.019 --> 02:10:20.827
tables. 
There's also a few things.  You 

02:10:21.137 --> 02:10:24.672
cannot have keys or compose 
primary keys. But there's one 

02:10:24.968 --> 02:10:26.968
pretty neat 

02:10:29.015 --> 02:10:32.556
feature, which is external 
content and going back to this, 

02:10:32.557 --> 02:10:36.321
if we wanted to use our real 
table and create a second table 

02:10:36.322 --> 02:10:41.300
for only our labels, we just 
basically use that annotation, 

02:10:41.301 --> 02:10:46.968
but we told it, hey, my data is 
actually going to be storing 

02:10:46.969 --> 02:10:49.939
this other table that I already 
have.  

02:10:49.940 --> 02:10:55.841
Conveniently, this data class 
and virtual table has labels.  

02:10:56.258 --> 02:11:01.434
In the previous one, even the 
URL is not what we wanted to 

02:11:01.869 --> 02:11:05.051
index.  
What happens now is we have a 

02:11:05.329 --> 02:11:09.677
table in front of it and behind 
it, we have the same shadow 

02:11:10.013 --> 02:11:14.653
tables for indexes but the 
actual content we store in the 

02:11:14.654 --> 02:11:18.035
table we have.  This is way 
better in saving space and it's 

02:11:18.439 --> 02:11:25.924
a little bit more flexible.  
To query this external table, 

02:11:26.339 --> 02:11:29.550
you do have to query from the 
virtual table and then you would

02:11:29.551 --> 02:11:34.096
do a join because we want to get
the songs and similarly, you 

02:11:34.345 --> 02:11:36.613
would still use match.  
One thing, though, is that 

02:11:37.112 --> 02:11:41.434
because these are two different 
tables, when you insert into the

02:11:41.435 --> 02:11:46.266
sound tables, things are not 
actually inserted, which means 

02:11:46.564 --> 02:11:49.915
it doesn't get updated so you 
have to do that yourself.  But 

02:11:49.916 --> 02:11:52.949
you know, we don't want you 
doing this.  We want to make it 

02:11:53.275 --> 02:11:56.883
easy.  When you use Room, it 
will create trigger for you to 

02:11:56.884 --> 02:12:04.437
keep these two things in sync, 
that's pretty cool.

02:12:04.438 --> 02:12:10.091
Another important feature is 
support for database views.  We 

02:12:10.367 --> 02:12:16.705
have songs and albums and a song
might be in multiple albums so 

02:12:17.222 --> 02:12:23.125
we have a junction table that 
associates the songs.  Now, this

02:12:23.126 --> 02:12:27.669
is all cool.  You want to fetch 
a listing and have the album 

02:12:28.122 --> 02:12:32.736
name and all the songs in it as 
a list.  Okay, cool.  We have 

02:12:32.737 --> 02:12:37.021
the list and we write a query 
and fetch from that junction 

02:12:37.269 --> 02:12:41.301
table.  You cannot do this 
because that table doesn't have 

02:12:41.847 --> 02:12:45.672
the song's name or the album's 
title.  You kind of need to 

02:12:46.254 --> 02:12:50.227
write a query like this where 
you fetch from the table and 

02:12:50.712 --> 02:12:55.268
join it with the song and table 
and then you can return your 

02:12:55.269 --> 02:12:59.111
list and data.  
SQLite is powerful that you can 

02:12:59.413 --> 02:13:03.992
express this, if you find 
yourself writing these things, 

02:13:05.035 --> 02:13:07.888
it is like a boilerplate.  It 
could be cool if you could have 

02:13:08.146 --> 02:13:12.825
a table that has the song and 
the album together, without 

02:13:13.362 --> 02:13:16.133
duplicating the data into that 
data and the songs and the album

02:13:17.353 --> 02:13:22.404
titles.  This is where database 
views come into place.  You 

02:13:22.861 --> 02:13:26.512
basically write the query that 
defines album and song together 

02:13:26.513 --> 02:13:32.619
as a query.  You annotate an 
entity with that database view. 

02:13:34.370 --> 02:13:39.171
And in that, this is the same 
Room.  You can have any with the

02:13:40.300 --> 02:13:45.416
fields or whatnot. 
Once you declare it, add it to 

02:13:45.686 --> 02:13:50.171
your Room database -- so we have
that declaration, if you try to 

02:13:51.196 --> 02:13:55.291
rewrite the previous query, you 
select from that table.  Well, 

02:13:55.662 --> 02:13:59.166
we are selected from a view, 
that table doesn't exist.  But 

02:13:59.167 --> 02:14:06.632
for all intents and purposes of 
querying, that's a table.  Now 

02:14:06.916 --> 02:14:10.612
it's much more simpler because 
it's like a table.  You can also

02:14:11.029 --> 02:14:17.520
return or even return the live 
data because we know how that is

02:14:17.521 --> 02:14:21.091
constructed, we know when it 
might change so you can get the 

02:14:21.394 --> 02:14:24.005
LiveData and run queries.  You 
can do everything you can do 

02:14:24.283 --> 02:14:30.226
with a table, except you cannot 
do inserts and updates.  But you

02:14:30.227 --> 02:14:34.235
can have views inside other 
views.  

02:14:34.236 --> 02:14:39.513
So, this makes it much nicer to 
write queries and allows you to 

02:14:40.181 --> 02:14:43.344
logically address your data.  
Another important feature we 

02:14:43.345 --> 02:14:47.866
have added is support for 
multiple instances.  So, let's 

02:14:48.062 --> 02:14:50.448
say we are writing the 
applications, we have a play 

02:14:50.830 --> 02:14:54.860
list, all the songs and we have 
a sync service that goes and 

02:14:55.401 --> 02:15:01.324
pulls the names, updates from my
play list.  When you're using 

02:15:01.325 --> 02:15:04.458
Room, if the sync service 
updates the database, it 

02:15:04.886 --> 02:15:09.520
automatically updates the UI and
this is a super cool feature 

02:15:09.949 --> 02:15:19.271
because you write these.  This 
works perfectly,

02:15:20.719 --> 02:15:26.193
but then your application is 
bloated so you decide to go into

02:15:28.313 --> 02:15:34.837
background posses.  
It pulls the song, writes into 

02:15:34.838 --> 02:15:40.315
the database and the UI has no 
idea.  It doesn't know the 

02:15:40.316 --> 02:15:44.889
database has changed because it 
only knows if the same Room.  We

02:15:44.890 --> 02:15:49.739
don't get that information from 
SQLite.  

02:15:49.740 --> 02:15:59.076
Now, with Room 2.1, you can in 
build multiinstances which will 

02:15:59.356 --> 02:16:04.524
look for other instances of 
Room.  Once you do that, now 

02:16:04.815 --> 02:16:09.193
your background process service 
can update the database and all 

02:16:09.490 --> 02:16:13.812
this in Room will update 
automatically.  Now, this is all

02:16:14.138 --> 02:16:19.675
by default because we need to 
create the server s.  It is a 

02:16:19.676 --> 02:16:24.918
cost that most people don't 
need.  We enabled this flag to 

02:16:24.919 --> 02:16:29.267
take advantage of this feature.
  Another feature we added, 

02:16:29.823 --> 02:16:32.811
which was actually requested by 
the community, was added value 

02:16:33.017 --> 02:16:35.757
support.  If you're using 
Kotlin, you don't have to worry 

02:16:36.041 --> 02:16:42.195
about this because you have data
classes.  If not, you might be 

02:16:42.651 --> 02:16:48.306
using other values.  Room can 
understand these AutoValue 

02:16:48.670 --> 02:16:52.077
annotated objects.  If you know 
a little bit about value, you 

02:16:52.078 --> 02:16:55.320
have an abstract class and you 
annotate it with other values.  

02:16:55.617 --> 02:17:00.474
Now you can annotate that same 
abstract value and Room will be 

02:17:01.168 --> 02:17:03.522
able to discover you want to 
make a table for it. 

02:17:07.791 --> 02:17:11.674
These can now be annotated with 
Room annotations through the key

02:17:12.013 --> 02:17:14.554
column information and things 
like that.  

02:17:14.555 --> 02:17:22.651
The only caveat is that you have
to add AutoValue computation and

02:17:23.087 --> 02:17:25.867
this is the annotation that 
makes these two tools work 

02:17:26.738 --> 02:17:28.779
together.
  To support this, normally 

02:17:29.102 --> 02:17:33.533
these annotations were only 
limited to fields and we needed 

02:17:33.534 --> 02:17:38.833
to extend it to let you put them
on those abstract methods but it

02:17:38.834 --> 02:17:44.040
only works if you're using 
AutoValue. 

02:17:44.041 --> 02:17:47.874
Similarly, if you were using a 
normal class, you would would 

02:17:48.153 --> 02:17:54.368
have fields.  You still need 
that factory method and Room 

02:17:54.369 --> 02:18:01.433
will be able to discover this.  
You would use the abstract class

02:18:01.982 --> 02:18:09.843
that you would declare. 
Another highly-requested feature

02:18:10.583 --> 02:18:18.246
that has been requested for 
awhile is this.  You can have a 

02:18:19.370 --> 02:18:24.424
sync return times and insert, 
update and delete.  We listen.  

02:18:24.425 --> 02:18:27.839
When you request, we'll listen.
[Laughter]

02:18:27.840 --> 02:18:32.248
This is actually -- this is only
available in rx, that's 

02:18:33.106 --> 02:18:35.106
interesting.
  It might

02:18:38.807 --> 02:18:44.454
be available --
  So Room 2.1 is a really big 

02:18:44.455 --> 02:18:49.502
release, the full-text search, 
the database views.  When we 

02:18:49.833 --> 02:18:55.729
decided which features to work 
on, we were basically relying on

02:18:56.046 --> 02:18:58.046
your 

02:19:01.212 --> 02:19:07.098
feedback.  People really wanted 
it.  This is our philosophy, we 

02:19:07.099 --> 02:19:10.265
look at what the community is 
doing, how are they using it, 

02:19:10.266 --> 02:19:14.012
what do they want and implement 
it.  So, please, like, try to 

02:19:14.013 --> 02:19:19.062
use 2.1.  It's a very big 
release and we want to ship it 

02:19:19.297 --> 02:19:22.563
as stable as soon as possible 
and we need your feedback.  

02:19:22.564 --> 02:19:25.790
We look at in number of apps 
shipping through them and see 

02:19:26.089 --> 02:19:30.211
how they are using.  We look for
the incoming box -- we don't 

02:19:30.481 --> 02:19:37.947
really have box, but sometimes. 
Look for incoming user error.

02:19:38.997 --> 02:19:40.745
[Laughter]
To fix them.  

02:19:40.746 --> 02:19:44.325
So, please work with us and 
we'll try to wrap it up and ship

02:19:44.846 --> 02:19:51.503
it and also, please let us know 
what other features you want in 

02:19:51.504 --> 02:19:55.513
Room All right.  Thanks a lot 
for coming to this talk.  I hope

02:19:55.514 --> 02:19:59.408
it was useful.
[Applause]

02:19:59.818 --> 02:20:02.152
Thank you. 
  We will be in the sandbox 

02:20:02.153 --> 02:20:08.481
area, after the talk.
  Thank you. 

02:20:08.772 --> 02:20:12.048
Everyone, our next session, in 
this room, will begin in 10 

02:20:14.497 --> 02:20:16.497
minutes.  Thanks.  

02:20:20.712 --> 02:20:22.712
minutes.  Thanks.  

02:30:51.564 --> 02:30:58.913
   Welcome, everyone.  Welcome 
back.  Our next session will get

02:30:58.914 --> 02:31:03.113
underway in about two minutes.  
As a courtesy to our presenters,

02:31:03.916 --> 02:31:09.916
we ask you to mute your devices.
We'll get under way in about two

02:31:10.628 --> 02:31:12.628
minutes. 

02:32:43.182 --> 02:32:47.508
  Hey, everyone, welcome to our 
lightning round and this is 

02:32:47.782 --> 02:32:53.966
where we try to smash an in 
credible amount of content into 

02:32:54.989 --> 02:32:59.122
This is going to be40 minutes.  
really, really fun.  We have an

02:33:04.043 --> 02:33:06.052
incredibly-distinguished set of 
speakers and I'm going to talk 

02:33:06.648 --> 02:33:09.528
really fast.  If you hear a 
gong, that means somebody has 

02:33:10.440 --> 02:33:14.057
gone over.  We are going to try 
to move this really, really 

02:33:14.058 --> 02:33:17.870
quickly.  
Our first talk is going to be 

02:33:18.460 --> 02:33:26.116
about JNI.  Please welcome 
Elliot Hughes.

02:33:26.117 --> 02:33:30.392
[Applause]
  My name's Elliot Hughes.  I've

02:33:30.977 --> 02:33:37.903
working for Android for awhile. 
My first job on Android was 

02:33:38.188 --> 02:33:43.031
working on the JNI libraries and
cleaning up some of the bugs.  

02:33:43.032 --> 02:33:49.572
First off, I'll show you what 
you're expecting to see when you

02:33:49.855 --> 02:33:53.553
see JNI, which is code that 
looks like this.  I'm guessing 

02:33:54.205 --> 02:33:57.101
no one can tell that the code 
that does anything useful isn't 

02:33:57.102 --> 02:34:00.317
on that screen yet.  And I'm 
guessing no one can tell me 

02:34:00.511 --> 02:34:03.709
where the useful line is in 
that, either.  

02:34:03.710 --> 02:34:08.536
This talk is how to not do that.
How do we get away from that?  

02:34:09.156 --> 02:34:16.806
The one-line answer is, use C++ 
better.  If you're using the 

02:34:20.492 --> 02:34:24.174
CAPIs, it is tricky.  You end up
with a nesting style.  There are

02:34:24.464 --> 02:34:28.500
a lot of special cases, like, 
I'm trying to throw an 

02:34:29.188 --> 02:34:34.233
exception, but there's already 
an exception pending.  

02:34:34.234 --> 02:34:38.190
So, don't write that in every 
single JNI method.  Write that 

02:34:38.745 --> 02:34:42.830
once.  And in particular, have 
classes that let you use a 

02:34:43.037 --> 02:34:48.609
string as a string.  You know, 
use a J string as if it's a 

02:34:48.961 --> 02:34:54.334
string.  Similar for a raise.  
You don't want to do with a J 

02:34:54.335 --> 02:34:59.251
when you can use operator square
brackets.  

02:34:59.252 --> 02:35:06.260
Local references, too.  The 
strings and rimative arrays are 

02:35:06.813 --> 02:35:10.894
most of them.  Exceptions, 
harder than they look and the --

02:35:11.057 --> 02:35:14.383
the sort of raw primitives you 
get in JNI are not super useful.

02:35:15.316 --> 02:35:19.194
They expect you to find the 
class yourself and create an 

02:35:19.997 --> 02:35:23.158
instance.  If you want to 
actually include a proper detail

02:35:23.583 --> 02:35:29.358
message or a cause, you end up 
doing weird things like, I need 

02:35:29.359 --> 02:35:34.119
to find the constructer for 
this.  Blah, blah, blah.  It's a

02:35:34.439 --> 02:35:38.130
lot of code, especially if you 
deal with special cases.  Having

02:35:38.631 --> 02:35:45.876
a function that takes a format 
string is a huge relief and -- 

02:35:46.143 --> 02:35:48.968
right.  
I've been talking about this in 

02:35:48.969 --> 02:35:53.218
the abstract saying, you should 
use these things.  There are 

02:35:53.956 --> 02:35:57.567
many choices and I think a 
problem a lot of people have is 

02:35:57.858 --> 02:36:01.066
they get hung up on what's the 
best way to do this?  Any of 

02:36:01.330 --> 02:36:06.791
these are better than writing 
the code that we saw.  Android 

02:36:07.066 --> 02:36:13.282
uses a native helper.  It has 
things to do the stuff I've been

02:36:13.628 --> 02:36:16.809
talking about.  If you don't 
like any of the others on the 

02:36:17.182 --> 02:36:18.944
internet, you can write your 
own.  

02:36:18.945 --> 02:36:21.788
So, what does it look like if 
you switch to using something 

02:36:22.104 --> 02:36:26.633
like this?  This is the same 
code.  This is the same two 

02:36:27.264 --> 02:36:31.374
slides we had before, now 
condensed into one.  I think 

02:36:32.823 --> 02:36:37.633
five seconds is enough time to 
see what does the work here.  

02:36:37.634 --> 02:36:42.402
You don't need to have the style
where we have the constructers 

02:36:42.403 --> 02:36:49.596
and we check, did that actually 
work?  If we're prepared to use 

02:36:49.862 --> 02:36:54.001
C++ exceptions, that is more 
advanced.  This gets you 90% of 

02:36:55.162 --> 02:36:57.937
the benefit with 20% of the 
effort.  This is what the code 

02:36:58.472 --> 02:37:04.211
looks like in Android for that 
call.  

02:37:04.212 --> 02:37:08.408
So, that was a really simple 
thing, where there really was 

02:37:08.409 --> 02:37:13.210
just one line of active 
ingredient in there, but this 

02:37:13.743 --> 02:37:18.121
scales really well.  Our 
recommendation is you try to 

02:37:18.122 --> 02:37:25.311
keep your code like that.  Don't
mix all the JNI boilerplate 

02:37:25.565 --> 02:37:31.928
stuff.  On the other end, you 
wouldn't mix your business logic

02:37:33.218 --> 02:37:36.578
and UI rendering stuff.  It 's 
similar advice, don't do that.  

02:37:36.740 --> 02:37:40.236
If you want a good example of 
this, the Android system OS 

02:37:40.514 --> 02:37:45.496
class is implementing exactly 
this same way.  It's super 

02:37:46.327 --> 02:37:52.162
repetitive, really boring and 
that's the way we like it. 

02:37:52.163 --> 02:37:57.475
If you need to worry about old 
Android releases and you have 

02:37:57.776 --> 02:38:04.541
multiple SO files, that can get 
tricky.  We recommend you go to 

02:38:04.815 --> 02:38:09.015
GitHub.  The files on compress, 
that was mentioned earlier in 

02:38:09.424 --> 02:38:13.602
the keynote.  One, big library 
is generally bigger than lots of

02:38:13.882 --> 02:38:17.554
small libraries. 
Thank you.  If you have 

02:38:17.744 --> 02:38:21.521
questions, please come find me. 
I'll be doing open house all 

02:38:23.575 --> 02:38:27.656
afternoon.  Thank you.
[Applause]

02:38:28.398 --> 02:38:34.468
I wanted to share with you a 
short story about my experience 

02:38:34.469 --> 02:38:39.846
with the Kotlin multiplatform 
project.  When we come and talk 

02:38:40.090 --> 02:38:44.081
about Android and Kotlin, what 
we really mean is Kotlin JVM, 

02:38:44.082 --> 02:38:49.489
that's the Kotlin that we know 
that gets confiled to Java 

02:38:49.833 --> 02:38:53.421
bytecode and we can transform it
and run it on Android.  It can 

02:38:53.687 --> 02:38:58.350
run on cloud servers and our 
desktops and so on.  

02:38:58.351 --> 02:39:08.070
There are two more flavors of 
Kotlin, JVM. 

02:39:08.478 --> 02:39:17.425
And then there's Kotlin/Native 
that can run or target various 

02:39:18.310 --> 02:39:22.511
platforms, even web assembly and
even Android.  

02:39:22.512 --> 02:39:26.683
How would we actually get 
started with this.  Kotlin 1.3 

02:39:26.684 --> 02:39:34.228
has a new structure.  If you 
apply that, you can then select 

02:39:34.474 --> 02:39:38.419
from a set of presets to target 
any of these platforms.  Here, 

02:39:39.271 --> 02:39:44.573
I'm targeting an Android library
and a JS target.  When you add 

02:39:44.967 --> 02:39:48.642
these to your module, it 
automatically creates source 

02:39:48.934 --> 02:39:53.281
sets for these Kotlin files.  If
you put your Kotlin files in the

02:39:53.485 --> 02:40:00.001
JS main folder, they will get 
compiled to JavaScript files.  

02:40:00.002 --> 02:40:04.011
What do I mean by 
platform-specific Kotlin, the 

02:40:04.293 --> 02:40:07.741
reference pages for each of the 
Kotlin packages, you mouse over 

02:40:08.134 --> 02:40:12.255
any of them, in the top-right, 
you see these multi-colored 

02:40:12.256 --> 02:40:16.027
chips that tell you which 
compilation target this is 

02:40:16.622 --> 02:40:20.897
available on.  The Kotlin 
browser package, that lets you 

02:40:21.191 --> 02:40:26.815
access interfaces from the web 
browser environment only makes 

02:40:27.146 --> 02:40:33.722
sense on the JS target.  
Fortunately, they are available 

02:40:34.276 --> 02:40:37.545
all cross all the compilation 
targets.  You can see Kotlin 

02:40:37.979 --> 02:40:41.453
Common.  This is a pure Kotlin 
library that can run independent

02:40:42.251 --> 02:40:43.808
from any platform it's 
targeting.  

02:40:43.809 --> 02:40:47.619
In fact, if you add 
multi-platform plugin to your 

02:40:47.620 --> 02:40:50.902
project, along with the 
platform-specific set, you get a

02:40:51.283 --> 02:40:54.740
common source set where you can 
put platform-independent code.  

02:40:55.209 --> 02:40:57.209
The thing about 
platform-independent code, it 

02:40:57.740 --> 02:41:01.719
cannot call any of the platform 
APIs.  It cannot call any of the

02:41:02.701 --> 02:41:06.546
JS-specific or Android-specific 
APIs.  The other way works.  You

02:41:06.547 --> 02:41:10.362
can have your platform-specific 
code, it depends on a shared 

02:41:11.015 --> 02:41:14.353
common library or source set.  
So, knowing all that, I set out 

02:41:14.894 --> 02:41:22.705
to write an example app just to 
learn about Kotlin a platform 

02:41:23.519 --> 02:41:30.161
and I wrote a game.  I still 
need to create an Android app 

02:41:30.719 --> 02:41:33.840
with Android-specific code just 
like I normally would and then a

02:41:34.984 --> 02:41:43.005
web page with JavaScript code to
initialize things to my app.  In

02:41:43.567 --> 02:41:49.718
my case, the sudoku engine, I 
take it out and put it in a 

02:41:50.394 --> 02:41:54.441
shared library used Kotlin 
Common.  And in fact, the only 

02:41:55.226 --> 02:41:58.256
source set I have is common main
so I put all my code there and 

02:41:59.165 --> 02:42:02.771
that means it's available across
all the platforms I choose to 

02:42:03.173 --> 02:42:05.385
target.  
But then I thought, okay, I have

02:42:06.019 --> 02:42:11.481
this core engine for solving my 
code but I would also like to 

02:42:11.917 --> 02:42:15.815
draw the board on my screen and 
why code it separately if it 

02:42:16.141 --> 02:42:21.534
should look the same on each of 
them?  Wouldn't it be nice if I 

02:42:21.846 --> 02:42:25.577
had an API the drawing on the 
screen?  But then what I want to

02:42:25.843 --> 02:42:31.427
do is I want to actually have it
delegate to each of the 

02:42:31.789 --> 02:42:35.435
platform's implementation.  I 
want to use the Android canvas 

02:42:35.763 --> 02:42:38.982
and the HTML to draw on the 
website.  The thing is, I just 

02:42:40.091 --> 02:42:43.316
told you that Kotlin Common code
cannot call any platform 

02:42:43.923 --> 02:42:48.085
interfaces so I can't depends on
these.  How does it work in 

02:42:48.086 --> 02:42:52.245
Kotlin?  
Well, there's this expect an 

02:42:52.676 --> 02:42:56.465
actual mechanism that lets you 
declare expected classes in your

02:42:56.986 --> 02:43:01.667
common code, which is like 
almost defining an interface in 

02:43:02.065 --> 02:43:06.408
Java.  In my platform-specific 
source sets, I provide the 

02:43:07.619 --> 02:43:10.767
actual implementation that can 
use APIs, just as the Android 

02:43:10.962 --> 02:43:13.528
canvas.  
Now, when I add that dependency 

02:43:13.780 --> 02:43:17.739
from my common source set to the
other one, it looks something 

02:43:18.024 --> 02:43:21.871
like this.  But, actually, when 
compiling for a specific 

02:43:22.146 --> 02:43:28.149
platform, such as JS, this 
dependency will actually use 

02:43:29.035 --> 02:43:30.229
HTML canvas.
[Laughter]

02:43:30.230 --> 02:43:33.854
Okay.  If I could just show the 
link to the project so that 

02:43:34.168 --> 02:43:38.617
everyone can look at it, that 
would be great.

02:43:50.086 --> 02:43:51.210
[Laughter]
[Applause]

02:43:51.211 --> 02:43:53.211
Yeah, that's it. 

02:43:59.822 --> 02:44:02.726
[Applause and cheers]
  I guess not.

02:44:02.727 --> 02:44:04.808
[Laughter]
I'm Nick Butcher.  I'm a 

02:44:06.439 --> 02:44:08.439
designer and

02:44:10.955 --> 02:44:15.566
engineer at Google and I love 
vectors.  Most assets in your 

02:44:15.874 --> 02:44:19.194
applications should be vectors 
these days.  Vectors are 

02:44:19.195 --> 02:44:24.820
awesome.  They're sharp on every
single density display.  They're

02:44:25.760 --> 02:44:30.584
also extremely flexible and I 
want to talk about this so you 

02:44:30.585 --> 02:44:34.988
can get the most out of vectors.
So, most vectors in your app 

02:44:35.189 --> 02:44:38.439
probably look something like 
this.  They have parts and 

02:44:38.440 --> 02:44:42.427
hard-coding a color.  Something 
like this, fill or stroke here. 

02:44:42.830 --> 02:44:46.800
Maybe you're using a color 
resource.  There's a lot more 

02:44:47.112 --> 02:44:49.984
you can do here.  The first 
thing is using theme colors.  

02:44:50.266 --> 02:44:55.749
So, you can use theme colors in 
two ways.  You can apply a theme

02:44:56.026 --> 02:45:03.458
color as a tint.  It will tint 
the entire drawable.  Here is 

02:45:04.292 --> 02:45:09.531
for the icons and you can have 
one, single asset that displays 

02:45:10.028 --> 02:45:12.905
in different themes.  You no 
longer have to worry what color 

02:45:13.200 --> 02:45:16.189
asset you got from your 
designers, that they got exactly

02:45:16.386 --> 02:45:19.250
the right shade of gray you 
need.  It will be tinted at

02:45:24.523 --> 02:45:27.120
runtime so it's always correct. 
In this example, I'm going to 

02:45:27.459 --> 02:45:30.928
use color primary.  Say you have
a sports app, which using a 

02:45:30.929 --> 02:45:37.730
theme for a given team.  You can
reference that theme color so 

02:45:39.228 --> 02:45:45.927
you have a single drawable.  
Vector support and lists, you 

02:45:45.928 --> 02:45:51.282
can do some fun stuff.  We're 
changing color.  Or perhaps you 

02:45:51.544 --> 02:45:55.006
have a list app where when a row
item is selected, you can change

02:45:55.230 --> 02:46:00.085
the renderings.  You could do 
this with a drawable and flip 

02:46:00.249 --> 02:46:04.099
between them.  If the rendering 
is 99% the same, you want to 

02:46:04.383 --> 02:46:08.081
save the stroke here, this saves
duplication.  You define it like

02:46:08.344 --> 02:46:12.623
this in your color resources and
refer to it as you would like a 

02:46:13.665 --> 02:46:15.815
color resource. 
My favorite feature is gradient.

02:46:17.090 --> 02:46:22.415
Vectors support linear, radial 
and sweep.  A linear has a 

02:46:23.865 --> 02:46:25.865
start, end,

02:46:28.872 --> 02:46:30.872
X y coordinate

02:46:32.965 --> 02:46:34.965
s.  
You can actually get much more 

02:46:36.159 --> 02:46:39.032
fine-grained and embed these 
tags inside it to find 

02:46:39.331 --> 02:46:44.353
individual color stops.  Here, 
I'm going for a color at 72% of 

02:46:44.354 --> 02:46:48.471
the way through.  
You define gradients in a 

02:46:49.340 --> 02:46:54.182
directory or the in-line 
resource syntax and it build 

02:46:54.815 --> 02:46:58.593
time, it will extract it to a 
color resource, which is handy. 

02:46:59.605 --> 02:47:06.790
Gradients have been super handy.
Here's an illustration from an 

02:47:07.127 --> 02:47:12.863
I/O app.  It would have been 
one-fifth of the what we had to 

02:47:13.511 --> 02:47:18.385
ship.  It's useful for adaptive 
icons.  Vectors don't support 

02:47:19.797 --> 02:47:23.507
drop shadows.  If you need to 
build a customized spinner, this

02:47:23.508 --> 02:47:30.635
is necessary to achieve. 
Gradients have certain shapes, 

02:47:30.636 --> 02:47:34.293
but they can be transformed, 
like rotated and so on.  I 

02:47:34.580 --> 02:47:38.171
wanted to create this 
oval-shaped shadow.  So I did 

02:47:38.172 --> 02:47:42.093
this by drawing a circle with a 
radial gradient and using the 

02:47:42.337 --> 02:47:47.773
scale y feature to transform it 
to produce the effect that is 

02:47:47.974 --> 02:47:54.782
after.  If it doesn't fill the 
entire shape, you can use this. 

02:47:54.783 --> 02:48:00.485
It continues to color outwards. 
If you use a repeat mode, it 

02:48:01.135 --> 02:48:03.856
will repeat and continue.  Or a 
mirror mode will go back and 

02:48:04.509 --> 02:48:09.498
forth through the gradient.  
You can also use gradients which

02:48:09.763 --> 02:48:16.730
don't go through different 
colors.  You can have the solid 

02:48:16.998 --> 02:48:19.838
color block.  Why would you want
a gradient that doesn't do that?

02:48:20.272 --> 02:48:23.514
You can have some fun.  This 
example is one single shape 

02:48:23.793 --> 02:48:29.348
using a radial gradient.  You 
can do a loading spinner or 

02:48:30.348 --> 02:48:35.858
combine it.  This is the 
gradient over this area and you 

02:48:35.859 --> 02:48:41.615
can have some fun animating it. 
So, hopefully I've shown you 

02:48:42.539 --> 02:48:46.579
that vectors are sharp, small 
and effective.  I want to show 

02:48:46.580 --> 02:48:52.066
you what you can build.  This is
a single drawable vector.  I had

02:48:52.503 --> 02:48:56.775
the pleasure of animating it.  
This is one vector drawable, 

02:48:57.631 --> 02:49:01.609
extremely small, extremely 
sharp.  That's vector drawables.

02:49:02.039 --> 02:49:04.488
Thank you very much.

02:49:12.095 --> 02:49:14.095
[Applause]
[Applause]

02:49:34.921 --> 02:49:40.694
  We have a short pause while we
have the next session queuing 

02:49:41.965 --> 02:49:43.965
up.  I hope you enjoyed that

02:49:49.767 --> 02:49:51.767
vector-oriented presentation.  
We're going to get into a little

02:49:52.826 --> 02:49:54.826
bit of

02:49:59.996 --> 02:50:01.996
Data Binding, 

02:50:12.490 --> 02:50:14.998
hopefully. 
So, how's everyone enjoying the 

02:50:15.215 --> 02:50:15.999
summit so far?  
[Applause and cheers]

02:50:16.000 --> 02:50:21.609
I want a little bit more 
enthusiasm, but I'll take it.

02:50:21.610 --> 02:50:23.610
[Laughter]
And, we are so excited to be 

02:50:23.677 --> 02:50:25.750
doing this again.  It's the 
first time we've done this in 

02:50:26.664 --> 02:50:31.293
three years and it is so great 
to get out in front of you for 

02:50:31.684 --> 02:50:37.145
Android's 10th anniversary.  
And, again, thank you, all.  I 

02:50:37.591 --> 02:50:41.666
know many of you -- how many of 
you traveled for more than 1,000

02:50:42.205 --> 02:50:47.826
miles to be here.  Wow!  All 
right.  That's amazing.  

02:50:47.827 --> 02:50:54.062
We're almost there, I think.  
All right.  Hold on, we're 

02:50:56.628 --> 02:51:00.933
having technical difficulties.  
Are we ready?  All right.  

02:51:00.934 --> 02:51:06.000
Excellent.  Let's do this.  
Level Up with Data Binding.  

02:51:06.874 --> 02:51:11.854
When Data Binding was back in 
2015, my reaction was, what have

02:51:16.667 --> 02:51:20.381
we done?  Expressions.  Data 
Binding is pretty cool.  You can

02:51:20.382 --> 02:51:24.717
actually choose how much you 
want to use.  It's the beginner 

02:51:24.981 --> 02:51:32.864
level.  Immediate benefits.  At 
the intermediate level, you get 

02:51:35.631 --> 02:51:41.692
custom binding adapters.  You 
have data from UI and UI to 

02:51:42.177 --> 02:51:47.110
data.  Let's get rid of find 
view by ID.  

02:51:47.111 --> 02:51:48.878
[Applause and cheers]
We need to enable Data Binding. 

02:51:48.879 --> 02:51:53.881
All you have to do is set Data 
Binding equals true in your 

02:51:54.151 --> 02:51:58.595
Gradle file and put layout 
wrappers.  You can do that in 

02:51:59.421 --> 02:52:04.464
Android Studio automatically 
know by pulling down and saying 

02:52:04.675 --> 02:52:12.211
convert to Data Binding layout. 
You can inflate it and set your 

02:52:12.501 --> 02:52:17.783
attributes like this.  You're 
going to want to use real Data 

02:52:18.738 --> 02:52:24.370
Binding so let's talk about 
binding expressions.  We declare

02:52:25.214 --> 02:52:28.686
variables in this data section 
of our layout and then we can 

02:52:31.617 --> 02:52:41.483
use expressions in layout Xml 
attributes.  They are in curly 

02:52:41.484 --> 02:52:45.514
braces.  Here are examples.  
We're designing a text property 

02:52:45.823 --> 02:52:49.824
to a ViewModel property.  In the
second one, height of zero and 

02:52:50.185 --> 02:52:56.788
in the third one, we use a 
lambda, which gets past the text

02:52:57.771 --> 02:53:04.190
few.  On the fourth one, it has 
another view.  

02:53:04.191 --> 02:53:07.602
Now, to give Data Binding 
access, we set the binding 

02:53:07.862 --> 02:53:11.180
object like this after inflating
the layout.  So, pretty 

02:53:12.585 --> 02:53:15.203
straightforward and then our 
ViewModel is now available to 

02:53:15.677 --> 02:53:18.732
that layout.  But the real 
question is, how does this all 

02:53:19.133 --> 02:53:21.802
work?  And the answer is, there 
is no magic in Data Binding.  

02:53:22.755 --> 02:53:29.398
But it does seem like Meige  
magic and that's because we have

02:53:29.399 --> 02:53:34.857
adapters.  Every call is made a 
binding adapter.  You can see 

02:53:34.858 --> 02:53:42.334
the code and use a debugger.  
That last line is actually the 

02:53:42.598 --> 02:53:46.669
set text we're looking for.  
They make it behave 

02:53:46.840 --> 02:53:49.017
intelligently across all these 
views.  

02:53:49.018 --> 02:53:52.845
Looking at the source files will
help you build your own custom 

02:53:53.374 --> 02:53:59.908
binding adapters.  So, let's 
talk about it.  The adapters 

02:54:00.371 --> 02:54:04.473
take one or more attribute 
names.  The method takes a view 

02:54:04.474 --> 02:54:06.474
of the first

02:54:08.916 --> 02:54:13.047
parameter.  They can just -- 
adapters can differ just by data

02:54:13.525 --> 02:54:18.123
types.  So you can also use 
adapters to override the 

02:54:19.337 --> 02:54:23.329
behavior.  This makes the image 
load glide but you have to be 

02:54:23.622 --> 02:54:30.730
careful with this.  We also 
could do a bunch of stuff with 

02:54:31.554 --> 02:54:37.030
advanced binding adapters.  
Sometimes the old one is good, 

02:54:37.031 --> 02:54:40.722
like listener.  The binding 
compiler will pass the old one 

02:54:41.000 --> 02:54:43.495
into the first one.  
And, also, you can use 

02:54:44.474 --> 02:54:48.242
multiattributes, which is pretty
cool.  So you can define these 

02:54:48.870 --> 02:54:53.851
multiple attributes here, when 
you declare the binding adapter 

02:54:53.852 --> 02:54:59.650
and those are both available to 
your code.  Observebility is 

02:55:00.189 --> 02:55:02.835
cool.  We can use LiveData to 
automatically do observation.  

02:55:03.093 --> 02:55:09.004
This is pretty cool.  We're only
exposing an immutable class 

02:55:09.005 --> 02:55:14.380
here.  And then you just expose 
a LiveData using Kotlin.  

02:55:14.381 --> 02:55:17.846
And then you need to do one more
additional change.  You need to 

02:55:17.847 --> 02:55:24.111
set the lifecycle owner so you 
can observe it.  

02:55:24.112 --> 02:55:27.642
Two-way Data Binding.  This is 
really trivial when you're 

02:55:28.239 --> 02:55:32.688
actually using LiveData.  You 
can use one-way Data Binding in 

02:55:32.974 --> 02:55:38.222
two ways.  You can actually call
this with two-way Data Binding 

02:55:38.731 --> 02:55:43.211
with at equals.  We can observe 
LiveData.  So, in this case, 

02:55:43.692 --> 02:55:47.608
it's fine to expose it and then 
we set the lifecycle owner and 

02:55:47.609 --> 02:55:51.845
we use at the at equals notation
and that's it.  Two-way Data 

02:55:52.112 --> 02:55:59.258
Binding.  Maybe that's not so 
expert anymore.  

02:55:59.259 --> 02:56:05.086
Check out the Data Binding 
codelab.  There you go.

02:56:09.944 --> 02:56:12.387
[Applause]
  Hey, everyone.  My name is 

02:56:12.749 --> 02:56:16.517
Carmen and I'm on the Android 
performance team and today I'm 

02:56:16.801 --> 02:56:21.152
going to show you examples of 
analyzing performance using 

02:56:21.314 --> 02:56:24.429
Systrace.  Before I do, I want 
to remind you that your app is 

02:56:24.632 --> 02:56:28.554
not an island.  It's running on 
top of several layers, the phone

02:56:29.170 --> 02:56:34.309
hardware, the Android framework,
libraries, AB tests.  The 

02:56:34.702 --> 02:56:37.282
reality might actually surprise 
you.  And this is where Systrace

02:56:37.980 --> 02:56:42.202
comes in.  So Systrace is a tool
that let's you collect precise 

02:56:42.671 --> 02:56:45.276
timing information about what's 
going on, on your device, and 

02:56:45.442 --> 02:56:50.565
visual it.  It records down to 
the individual CPU time slice.  

02:56:50.875 --> 02:56:55.041
It's the most important tool we 
have for debugging issues.  We 

02:56:55.442 --> 02:57:00.934
have given talks about how to 
use Systrace in the past.  

02:57:00.935 --> 02:57:05.307
Google for the I/O talk.  
Today, I want to talk about the 

02:57:05.704 --> 02:57:11.596
issues you can find.  I used 
Systrace for three apps I don't 

02:57:12.516 --> 02:57:16.159
use.  Let's jump in.  With the 
first app, when I look at the 

02:57:16.432 --> 02:57:21.098
trace, three different activity 
starts jumped out at me right 

02:57:21.472 --> 02:57:25.176
away.  There's a lot of reasons 
to use trampoline activities.  I

02:57:25.528 --> 02:57:30.235
see when developers are trying 
to use a splash screen.  They 

02:57:30.529 --> 02:57:35.983
definitely impact your launch 
time.  If you're trying to make 

02:57:36.524 --> 02:57:40.252
a splash screen, you could set 
up a launch theme or refactor 

02:57:40.771 --> 02:57:44.463
your code so you only open the 
separate activity when you need 

02:57:44.464 --> 02:57:49.141
to.  I don't know why this app 
has these activities, maybe they

02:57:49.427 --> 02:57:54.647
are critical.  
In the same app, I also browsed 

02:57:54.909 --> 02:58:00.802
through the names of the views, 
it looks like it's a drawer 

02:58:01.078 --> 02:58:08.489
views.  They often have a lot of
child views.  Sometimes we need 

02:58:08.776 --> 02:58:14.717
them immediately for UX reasons.
They could save 42 more mill 

02:58:15.467 --> 02:58:18.141
seconds.  
The second app is following what

02:58:18.142 --> 02:58:21.724
I would expect.  There's no 
extra activities or services 

02:58:21.725 --> 02:58:24.352
being started.  I dug in more 
and clicked on the views being 

02:58:24.624 --> 02:58:29.536
inflated and the names of the 
widgets I could see matched up 

02:58:29.537 --> 02:58:33.405
with what was visible with the 
app.  Then I saw this gap in 

02:58:33.733 --> 02:58:36.313
activity inside blind 
application that takes up 30 

02:58:36.658 --> 02:58:42.932
milli seconds.  I'll see its 
monitor contention.  Monitor 

02:58:43.195 --> 02:58:47.960
contention is saying lock 
contention, where the owner of 

02:58:48.297 --> 02:58:53.097
the lock of the thread.  And so 
I scrolled down and I did see 

02:58:53.279 --> 02:58:56.664
activity during this time.  
And then it's giving me a 

02:58:56.930 --> 02:59:00.513
pointer to the stack.  I wasn't 
familiar with realm.  It's like 

02:59:00.923 --> 02:59:07.143
a mobile database library like 
Sequel.  This may be or may not 

02:59:07.144 --> 02:59:10.365
be something you can fix because
you might need to coordinate 

02:59:10.961 --> 02:59:12.961
with the Realm

02:59:15.222 --> 02:59:19.953
library.  
Either way, this is another 

02:59:23.110 --> 02:59:25.091
potentialpotential 30 mill 
second. 

02:59:25.092 --> 02:59:28.655
There are two activities being 
started, but there's another 

02:59:28.946 --> 02:59:32.705
potential improvement here.  I 
included the thread name, this 

02:59:33.821 --> 02:59:37.160
is the UI thread.  If we scroll 
down, we can see these 

02:59:37.562 --> 02:59:43.927
background threads running.  CPU
0, CPU 1 CPU 2.  It's awesome 

02:59:43.928 --> 02:59:48.783
they made background threads but
there's a potential performance 

02:59:49.149 --> 02:59:53.076
issue.  These background threads
are doing a lot of blocking I/O.

02:59:53.596 --> 02:59:56.306
So that's the orange sections.  
They're kind of hard to see.  

02:59:56.579 --> 03:00:00.598
So you can see there's some I/O 
happening.  Now it turns out 

03:00:00.599 --> 03:00:05.987
that on a lot of devices, we 
have to be concerned about I/O 

03:00:05.988 --> 03:00:09.729
contention.  There's not 
necessarily more than one 

03:00:10.319 --> 03:00:13.895
channel to use.  They may be 
slowing down the I/O request 

03:00:13.896 --> 03:00:18.671
from the UI thread.  That is 
highlighted down below.  We see 

03:00:19.967 --> 03:00:25.653
the busy 4 milli seconds.  We 
can see that in this section, we

03:00:26.104 --> 03:00:31.961
spend 107 milli seconds.  We 
could shorten this if we move 

03:00:31.962 --> 03:00:36.623
the background activity and 
overlap with is somening else.  

03:00:37.033 --> 03:00:40.442
All I needed to do was clone.  
You can open the output HTML 

03:00:40.443 --> 03:00:43.376
file in your browser and see 
everything that I showed you 

03:00:43.377 --> 03:00:46.474
today.  And this barely 
scratches the surface of what 

03:00:46.789 --> 03:00:51.133
you can do with Systrace.  I was
able to identify these 

03:00:51.997 --> 03:00:53.707
opportunities in apps I don't 
work on.  

03:00:53.708 --> 03:00:58.620
When you look at a trace of your
own app, it's going to make 100 

03:00:58.621 --> 03:01:02.227
times more sense to you.  And, 
you can even add your own trace 

03:01:02.228 --> 03:01:05.033
points inside your app code so 
you can see the context of 

03:01:05.824 --> 03:01:09.344
what's running in your app from 
within the trace.  

03:01:09.345 --> 03:01:12.396
Thank you.
[Applause]

03:01:12.397 --> 03:01:14.397
PRAEF 

03:01:31.750 --> 03:01:37.545
Hi, everyone.  Hope we've been 
enjoying the day one so far. 

03:01:43.833 --> 03:01:48.285
I'm parul.  We want to talk to 
you about certain practices that

03:01:48.532 --> 03:01:52.436
you, as app developers can adopt
to build products that continue 

03:01:52.636 --> 03:01:57.888
to value users, at the same 
time, protect their right to 

03:01:58.250 --> 03:02:01.947
privacy.  We want Android to be 
a platform where you can offer 

03:02:02.955 --> 03:02:09.011
personalized experiences and at 
the same time, privacy is 

03:02:09.639 --> 03:02:12.634
important and transparency in 
terms of what data you're 

03:02:12.901 --> 03:02:16.406
collecting and how you're using 
it.

03:02:16.684 --> 03:02:21.871
So, it can serve as a platform 
to build social experiences.  We

03:02:21.872 --> 03:02:28.455
have ongoing efforts.  So, 
things we want to touch upon 

03:02:28.673 --> 03:02:34.248
today are how your apps are 
accessing user data, ensuring 

03:02:34.765 --> 03:02:42.983
your user's know what is being 
accessed and transparency.  

03:02:42.984 --> 03:02:50.121
So, we have a multi-level 
approach.  We focus on improving

03:02:50.902 --> 03:02:55.911
APIs.
  We set up for keeping abuse in

03:02:55.912 --> 03:03:00.408
check and assuring that a level 
playing field is provided and a 

03:03:00.409 --> 03:03:05.832
safe experience for our users. 
  We've built out to identify 

03:03:06.479 --> 03:03:10.616
when apps may be abusing a 
user's personal information. 

03:03:10.617 --> 03:03:15.800
  We also have human reviewers, 
so it's not bots and AI, but 

03:03:15.801 --> 03:03:20.039
actually people who review the 
apps to make sure the user's 

03:03:20.916 --> 03:03:25.566
right to privacy is secured and 
the safe experience is provided.

03:03:25.567 --> 03:03:34.759
We also invest heavily in 
surcurity.  We have the security

03:03:35.092 --> 03:03:38.060
program and vulnerability 
program.  Feel free to drop more

03:03:38.061 --> 03:03:41.698
if you want to know more about 
these.

03:03:42.011 --> 03:03:47.890
Finally, we have Google Play, 
which helps users conserve their

03:03:48.243 --> 03:03:53.857
privacy and security -- sorry.
  Why are we here speaking to 

03:03:54.321 --> 03:03:58.011
you today?  We feel privacy and 
security is a partnership 

03:03:58.245 --> 03:04:01.945
between the platform and 
developers, as you.  You, as 

03:04:02.315 --> 03:04:06.125
developers, who build these 
apps, play a very big role in 

03:04:07.000 --> 03:04:12.845
the ecosystem.  You can advocate
for better privacy policies and 

03:04:13.067 --> 03:04:17.582
ensure it is not compromised at 
the right of users privacy. 

03:04:17.583 --> 03:04:22.015
For example, if you have a 
request to collect certain 

03:04:22.389 --> 03:04:25.690
information about a user from 
their device, a question all way

03:04:25.912 --> 03:04:29.764
worth asking is, do we really 
need it?  How do you plan to use

03:04:29.765 --> 03:04:36.449
it?  And are we still using it? 
There reason is that it is 

03:04:36.699 --> 03:04:42.166
actually not really uncommon for
certain information to be 

03:04:42.167 --> 03:04:48.396
collected, which is actually 
never used and is sometimes 

03:04:49.015 --> 03:04:51.264
abandoned.
  Some data we see being 

03:04:52.104 --> 03:05:00.251
collected includes IMI, a list 
of installed apps, to target ads

03:05:01.673 --> 03:05:05.921
to them.  Collecting information
of an app information or a 

03:05:05.922 --> 03:05:09.984
network, such as the name or 
strength.  You probably always 

03:05:10.379 --> 03:05:14.986
don't need such information. 
So, for a few cases, we have 

03:05:15.622 --> 03:05:20.846
privacyprivacy options.  Some 
examples include we encourage 

03:05:20.847 --> 03:05:28.712
you to use instance IDs.  If 
you're trying to confirm the 

03:05:30.885 --> 03:05:34.465
user's phone number, we 
recommend you use this.  You can

03:05:36.446 --> 03:05:39.836
also consider qualification 
instead of fine location and 

03:05:39.837 --> 03:05:43.969
then if you want to see if a 
user in the core, you could 

03:05:43.970 --> 03:05:48.820
check for the focus rather than 
requesting the read phone state,

03:05:49.304 --> 03:05:52.679
which gives out a lot more data.
  Lastly, you want to ensure 

03:05:52.680 --> 03:05:56.730
that your users are available of
what data is being collected and

03:05:56.967 --> 03:06:02.481
how it is being used.  This is 
not just a best practice, but a 

03:06:02.948 --> 03:06:07.012
requirement.  If a user is not 
aware that some data about them 

03:06:07.402 --> 03:06:11.349
is about to be collected and for
what purpose it is being used, 

03:06:11.651 --> 03:06:14.870
you are required to disclose it 
to them and get permission to do

03:06:15.257 --> 03:06:19.798
so.  
The data's being collected off 

03:06:19.799 --> 03:06:23.931
the in-store app for fraud 
prevention purposes so this 

03:06:24.118 --> 03:06:27.601
needed to be disclosed to the 
user and only after the user 

03:06:27.959 --> 03:06:33.863
consents to it should the data 
be transferred. 

03:06:33.864 --> 03:06:37.809
We've worked hard and we're 
going to walk you through a few 

03:06:38.090 --> 03:06:42.125
of those changes.  In Android 9,
we split up the call log 

03:06:43.064 --> 03:06:48.342
permissions from the phone 
permission group into their own 

03:06:48.524 --> 03:06:52.585
permission group call log.  If 
your app is requesting -- 

03:06:52.586 --> 03:06:57.440
reading phone numbers from the 
phone's state broadcast chain, 

03:06:57.441 --> 03:07:02.371
we are requesting you to ask for
a call log and state 

03:07:02.372 --> 03:07:07.157
permissions.  
In Android 8, replaced it with a

03:07:07.158 --> 03:07:11.351
build with function that 
requires a read phone state 

03:07:11.632 --> 03:07:18.766
permission.  Please make sure 
you use if for valid reasons.

03:07:19.215 --> 03:07:25.141
  Speaking of limited access, 
apps running in the background 

03:07:25.493 --> 03:07:29.140
will require the following 
restriction s. You will no 

03:07:29.424 --> 03:07:35.358
longer have access to mic or 
camera in the background, 

03:07:35.683 --> 03:07:39.771
sensors.  If your app needs 
access to sensor events on 

03:07:40.181 --> 03:07:45.188
devices, you will need to use a 
full-ground service and to 

03:07:45.757 --> 03:07:51.004
further-inform and protect the 
user, the system will add a 

03:07:51.232 --> 03:07:56.689
visual aid when they are 
accessing the camera or mic. 

03:07:57.839 --> 03:08:05.561
  Our contacts provided API used
to allow apps to provide data to

03:08:06.435 --> 03:08:11.332
glean information.  As of 
January next year, a limited set

03:08:12.109 --> 03:08:18.127
of contact fields and methods 
will be made obsolete.  

03:08:18.128 --> 03:08:22.689
So if your app is accessing or 
updating these fields, we ask 

03:08:22.690 --> 03:08:26.531
you to use alternative methods. 
You could fulfill certain use 

03:08:26.806 --> 03:08:31.559
cases by using private content 
providers or storing data in 

03:08:32.509 --> 03:08:38.459
your back-end systems. 
  So this was a really brief 

03:08:40.192 --> 03:08:46.114
talk.  We hope we've been able 
to offer you insight to build 

03:08:46.115 --> 03:08:50.392
apps that are conscious.  As 
we've mentioned, we definitely 

03:08:50.713 --> 03:08:53.012
believe that security and 
privacy is a partnership between

03:08:53.277 --> 03:08:55.986
you, the developer, and our 
platform.  If you have any 

03:08:56.649 --> 03:09:01.053
questions about it, please do 
come find us at the office hours

03:09:01.317 --> 03:09:05.117
and I hope you have a great 
summit.  Thank you so much.

03:09:05.118 --> 03:09:07.118
Thank you.

03:09:42.586 --> 03:09:42.792
[Applause]
[Applause]

03:09:42.793 --> 03:09:43.569
[Applause]
[Applause]

03:09:43.570 --> 03:09:44.825
[Applause]
[Applause]

03:09:44.826 --> 03:09:45.437
[Applause]
[Applause]

03:09:45.438 --> 03:09:47.793
Contained a guide to app 
architecture, which shows one 

03:09:48.505 --> 03:09:53.093
way they can combine to have a 
testable and maintainable app.  

03:09:55.128 --> 03:09:57.128
The separation

04:29:22.508 --> 04:29:27.932
of concerns   Hello, everyone.  
It's great to be here.  My name 

04:29:27.933 --> 04:29:32.064
is Phil Adams.  I'm a 
researcher.

04:29:32.065 --> 04:29:36.365
And I'm Pierre Lecesne.
  We're here to talk about how 

04:29:36.992 --> 04:29:40.545
we're rethinking app 
distribution on Google Play.  

04:29:40.546 --> 04:29:46.966
We'll talk about the format and 
share features we've been 

04:29:47.252 --> 04:29:51.480
working on.  Tostart with, let's
talk about app size and the 

04:29:51.481 --> 04:29:56.136
impact it's having on your app. 
Why does app size even matter?  

04:29:56.408 --> 04:29:59.626
We shared this chart at Google 
I/O and you saw it earlier 

04:29:59.627 --> 04:30:04.107
today.  It shows when the app 
gets bigger, install success 

04:30:04.588 --> 04:30:10.505
rate goes down.  Many users 
don't have enough space left on 

04:30:10.506 --> 04:30:15.329
their device. Data can be 
expensive and connection speeds,

04:30:15.685 --> 04:30:19.726
slow.  I want you to think about
your own experience, too.  How 

04:30:19.997 --> 04:30:25.799
many have you seen a warning 
from Play?  

04:30:25.800 --> 04:30:29.610
We've started looking into this 
area more closely and found that

04:30:29.611 --> 04:30:34.231
freeing up space is a major 
driver of uninstalls.  This is a

04:30:34.833 --> 04:30:37.830
problem for people with 
low-storage devices. 

04:30:38.662 --> 04:30:43.185
It's also a problem with 
high-end devices who fill up the

04:30:43.722 --> 04:30:53.606
devices with HD content.  One in
five devices in the U.K. have 

04:30:54.316 --> 04:31:00.157
low storage.  A key request we 
hear from developers is also for

04:31:00.424 --> 04:31:05.512
help understanding and 
uninstalls.  We ran a user 

04:31:05.817 --> 04:31:10.819
research study to see why users,
in the U.S., uninstall apps.  

04:31:10.820 --> 04:31:16.127
The leading reason was quality. 
However, the leading reason apps

04:31:16.128 --> 04:31:21.710
games were uninstalled after a 
month was to free-up space.  

04:31:21.990 --> 04:31:25.116
Apps and games keep getting 
bigger.  They have grown over 

04:31:25.396 --> 04:31:30.100
five times on average.  Newer 
devices have more storage, but 

04:31:30.402 --> 04:31:36.257
the app, games, photos and HD 
videos keep getting bigger, too.

04:31:37.146 --> 04:31:42.103
Making your app big puts it at 
risk to suffer from all these 

04:31:42.104 --> 04:31:45.433
downsides.  They lose 
acquisitions and get uninstalled

04:31:45.816 --> 04:31:49.502
to free up space.  I'm sure you 
already know that and you've 

04:31:50.015 --> 04:31:53.798
probably just considered it a 
trade-off.  Do you add new 

04:31:54.191 --> 04:31:59.306
features?  Lose installs and 
drive more uninstalls?  We don't

04:31:59.736 --> 04:32:04.013
want you to have to worry about 
these trade-offs.  

04:32:04.014 --> 04:32:10.015
For a few years, there's been a 
way to optimize.  You can use 

04:32:10.298 --> 04:32:12.501
multiple SDKs, but 

04:32:15.796 --> 04:32:25.447
it's incredibly inefficient.  In
number of APKs grows quickly, 64

04:32:27.426 --> 04:32:34.134
bits, 34 bits.  
It also doesn't help with some 

04:32:34.755 --> 04:32:38.022
of the dimensions.  The 
languages are in every APK.  We 

04:32:38.308 --> 04:32:41.808
can do better.  Let us show you 
the solution we have built for 

04:32:42.201 --> 04:32:47.422
this and see how the new app 
model helps make your life 

04:32:47.776 --> 04:32:49.776
easier.
  So, the new app model is focus

04:32:50.205 --> 04:32:55.143
on improving the whole user 
acquisition journey.  It helps 

04:32:55.144 --> 04:32:59.850
by making your apps smaller, 
directly improving install and 

04:32:59.851 --> 04:33:03.373
uninstall rates.  It makes your 
releasing more manageable.  

04:33:03.374 --> 04:33:07.529
In that context, for the rest of
today's session, we'll talk 

04:33:08.124 --> 04:33:11.459
about steps we want to help you 
with.  First, we want to help 

04:33:11.460 --> 04:33:16.472
you convert more installs and 
minimize uninstalls by building 

04:33:16.716 --> 04:33:20.109
smaller apps.  Then, we want to 
make it possible for you to 

04:33:20.641 --> 04:33:25.426
deliver different features to 
different audiences, on-demand. 

04:33:25.988 --> 04:33:29.512
And, finally, we want to help 
you keep your users up-to-date 

04:33:30.555 --> 04:33:32.851
on the latest and greatest 
versions of your app.  

04:33:32.852 --> 04:33:37.134
Let's start with how to make 
your app smaller.  This is where

04:33:38.968 --> 04:33:45.799
we good be gan with the App 
Bundle.  It is the app 

04:33:45.800 --> 04:33:49.670
publishing format.  Apps that 
have adopted it have seen a 

04:33:50.730 --> 04:33:56.697
saving of 35%.  That's compared 
to a universal APK and that's 

04:33:56.980 --> 04:34:00.997
quite a bit.  How does it lead 
to such savings?  Here's the big

04:34:01.490 --> 04:34:05.468
idea, Google Play can assist and
take care of delivering just 

04:34:05.815 --> 04:34:10.691
what's needed on your behalf.  
There's no need to send a bunch 

04:34:11.490 --> 04:34:15.208
of languages and device 
resources.  We support three 

04:34:16.980 --> 04:34:22.526
slices dimensions out of the 
box, language, screen densities 

04:34:23.005 --> 04:34:28.485
and architecture.  All of this 
is made possible by split APKs, 

04:34:28.892 --> 04:34:36.400
we added in Android Lollipop.  
Split APKs allow multiple APKs 

04:34:36.577 --> 04:34:40.091
to be on one app.  They can be 
installed in different 

04:34:40.531 --> 04:34:45.320
combinations, on different 
devices and can be installed all

04:34:45.676 --> 04:34:50.331
at once or piece by piece.  
Given a bundle, Google Play 

04:34:52.005 --> 04:34:56.943
starts by putting everything 
that is common in the base APK. 

04:34:57.468 --> 04:35:02.361
This is the manue fest and dex 
files.  We

04:35:05.701 --> 04:35:10.785
generate a different MRIT APK.  
It is all the drawables that 

04:35:10.786 --> 04:35:13.761
would have had that device and 
density.  

04:35:13.762 --> 04:35:19.194
We then also generate different 
split APKs for each native 

04:35:20.385 --> 04:35:22.519
architecture and generate a 
separate split for each language

04:35:23.474 --> 04:35:28.640
supported by your app putting 
each string in a different APK. 

04:35:28.641 --> 04:35:33.245
Together, we call these 
configuration splits or config 

04:35:33.246 --> 04:35:36.099
splits. 
  When we go to serve an app to 

04:35:36.694 --> 04:35:42.437
a device, we only need to serve 
a portion.  We will install the 

04:35:42.438 --> 04:35:47.491
base APKs, as well as the 
density split, the architecture 

04:35:48.046 --> 04:35:50.729
split and the English language 
split.  It can get a bit 

04:35:51.151 --> 04:35:55.248
trickier than that.  I speak 
both French and English and have

04:35:55.795 --> 04:36:01.386
specified both languages so my 
pixel will not only receive the 

04:36:01.749 --> 04:36:04.662
correct density and architecture
split, but the French and 

04:36:04.923 --> 04:36:11.788
English language splits.  If I 
move to Brazil and learn 

04:36:12.080 --> 04:36:15.108
Portuguese, it will attempt to 
download the language split for 

04:36:15.501 --> 04:36:21.638
all the apps on my phone.  
For devices, which don't support

04:36:22.241 --> 04:36:28.628
it, they with have stand-alone 
APKs for API and screen density.

04:36:30.307 --> 04:36:38.659
Each of these contain all the 
necessary files.  My old Galaxy 

04:36:38.851 --> 04:36:43.475
will run it.  All the languages 
are included in those APKs.  

04:36:43.755 --> 04:36:46.839
Putting it all together, the 
picture looks like this.  You 

04:36:47.018 --> 04:36:50.021
actually don't need to worry 
about all the details of how 

04:36:50.022 --> 04:36:54.519
these APKs are generated.  All 
you have to do is upload a 

04:36:55.375 --> 04:36:58.301
single app bundle and select the
right things to serve for each 

04:36:58.572 --> 04:37:03.755
device.  
To summarize, the App Bundle 

04:37:03.756 --> 04:37:10.842
contains everything, signs each 
APK to deliver to devices.  

04:37:10.843 --> 04:37:14.375
Because Play is now signing the 
APKs, this means you need to 

04:37:14.789 --> 04:37:17.942
upload your signing key to 
Google Play.  This is part of 

04:37:18.866 --> 04:37:20.866
the program

04:37:22.600 --> 04:37:27.811
called App signing by Play.  
Is this secure?  The answer is, 

04:37:28.757 --> 04:37:33.952
absolutely.  As you can imagine,
Google takes this very 

04:37:34.391 --> 04:37:38.964
seriously.  We protect your key 
in the same storage we protect 

04:37:39.179 --> 04:37:43.498
Google's own keys.  You'll 
benefit from our owngoing 

04:37:43.888 --> 04:37:45.460
investments.
  We've been chatting to 

04:37:45.461 --> 04:37:49.165
developers who are already using
the App Bundle about what they 

04:37:49.642 --> 04:37:55.581
like.  Recently, we've conducted
a workshop with developers from 

04:37:55.582 --> 04:38:01.639
India, they have millions of 
active installs and they're very

04:38:06.172 --> 04:38:08.943
sophistsophisticated about 
keeping their app sizes small.  

04:38:08.944 --> 04:38:12.999
It improves their conversion 
rates.

04:38:13.000 --> 04:38:19.159
Red Bus says it is more 
streamlined.  Switching was a 

04:38:19.712 --> 04:38:23.148
simple process and they were 
testing with the bundle within 

04:38:23.413 --> 04:38:27.183
an hour.  It's just not 
developers in India, all the 

04:38:27.184 --> 04:38:31.489
developers have switched and 
have seen fantastic-size 

04:38:32.301 --> 04:38:38.286
savings.  56% size saving 
compared to a universal APK.  

04:38:38.557 --> 04:38:42.918
It's hard to get that from

04:38:49.264 --> 04:38:52.204
incremental.  
Google apps are adopting the 

04:38:53.467 --> 04:38:58.428
bundle and production and seeing
strong savings, as well.  Google

04:38:59.114 --> 04:39:04.599
MapsMaps, Google News 27, they 
report streamlining of their 

04:39:04.600 --> 04:39:06.915
release process and noticed

04:39:10.217 --> 04:39:13.850
isn't experimental, this is 
ready.  There are thousands of 

04:39:14.996 --> 04:39:16.996
apps --

04:39:19.361 --> 04:39:21.654
thousands of app bundle s in 
production.

04:39:21.655 --> 04:39:27.189
So, when you adopt the App 
Bundle, you're not only gaining 

04:39:27.484 --> 04:39:34.940
size saving, today, you'll be 
benefiting from automatic 

04:39:35.325 --> 04:39:40.191
optimizations.  Here is another 
one.  We've added a new Android 

04:39:40.828 --> 04:39:45.970
platform to the App Bundle 
called uncompressed native 

04:39:46.217 --> 04:39:50.471
libraries.  Native libraries 
have to be uncompressed from the

04:39:50.472 --> 04:39:55.831
APK before the platform can use 
them.  The end user ends up with

04:39:56.593 --> 04:40:00.740
two copies of the library.  They
can read it directly from the 

04:40:01.222 --> 04:40:10.330
APK if it's left uncompressed.  
You will need two versions of 

04:40:10.331 --> 04:40:14.245
your app.  If you're using the 
App Bundle, you give us your 

04:40:17.339 --> 04:40:23.719
libraries and we re-create it.  
The size savings we're seeing 

04:40:24.307 --> 04:40:29.367
are around 16% reduction on size
and 8% reduction in download 

04:40:29.966 --> 04:40:34.815
size.  As I explained, the app 
is smaller on disk because it 

04:40:34.993 --> 04:40:38.996
does not need to make a copy.  
It is smaller because our 

04:40:39.277 --> 04:40:42.942
compression algorithms perform 
better on data that is not 

04:40:43.335 --> 04:40:51.843
already compressed.  Our partner
saw savings of 22% and 16% on 

04:40:51.844 --> 04:40:59.162
their download size.  And these 
savings are in addition to the 

04:40:59.651 --> 04:41:02.329
size savings they're already 
seeing.  

04:41:02.330 --> 04:41:06.300
With this optimizing, the 
download size is smaller, faster

04:41:06.301 --> 04:41:14.407
to install and takes up less 
room on disk.  

04:41:14.408 --> 04:41:18.726
Now, we still want you to remain
in control to when these 

04:41:19.012 --> 04:41:24.447
optimizations should be pushed 
to your users.  Play will only 

04:41:25.407 --> 04:41:28.043
apply optimizations that have 
been built with the version of 

04:41:29.650 --> 04:41:33.608
Gradle that introduces the 
optimization.  The uncompressed 

04:41:34.097 --> 04:41:38.483
native libraries will only be 
applied to your app if you build

04:41:38.742 --> 04:41:45.510
it with Gradle 3.3. 
  Now, let's take a look at how 

04:41:45.902 --> 04:41:52.429
you can build, test and publish 
Android App Bundles.  You can 

04:41:52.430 --> 04:41:55.839
build App Bundle in the 3.2 
stable release of Android 

04:41:56.074 --> 04:41:58.953
Studio.  It is very similar to 
building an APK for most 

04:41:59.223 --> 04:42:01.900
developers so it's easy to 
switch.  

04:42:01.901 --> 04:42:06.286
For who prefer the command line 
or wish to integrate with 

04:42:07.414 --> 04:42:12.230
automated build systems, the 
Gradle Android plugin provides 

04:42:12.452 --> 04:42:19.136
tasks to build bundles.  You 
would use the assemble task.  

04:42:19.435 --> 04:42:24.392
With the Android App Bundle, you
use the new bundle task.  

04:42:24.393 --> 04:42:29.534
Similar to assemble tasks, you 
can build specific flavors.  

04:42:29.994 --> 04:42:36.497
The bundle task will generate an
Android app bundle with flavor 

04:42:36.940 --> 04:42:41.546
and build type chosen.  It is 
called bundle.aab.  

04:42:41.547 --> 04:42:45.894
We do want developeressess to 
retain control over their 

04:42:46.453 --> 04:42:51.222
splits.  If you need to disable 
splitting, you can do so using 

04:42:51.871 --> 04:42:56.324
the new bundle block, as shown 
here.  

04:42:56.325 --> 04:43:01.245
Android Studio and Gradle are 
not only ways you can build 

04:43:01.547 --> 04:43:07.172
bundles today.  They are open 
source, others are already 

04:43:07.926 --> 04:43:12.039
adopting them.  Games using 
Unity can build Android App 

04:43:12.356 --> 04:43:15.794
Bundles, too.  They added 
support in the beta release and 

04:43:16.142 --> 04:43:20.465
you can join the beta program 
now.

04:43:20.466 --> 04:43:26.954
So, now, let's see how you can 
adapt your testing.  During the 

04:43:27.677 --> 04:43:30.602
development phase, when you need
to iterate quickly, you don't 

04:43:30.603 --> 04:43:34.458
need to go through the App 
Bundle.  You can build through 

04:43:34.760 --> 04:43:37.513
Studio, much faster.  Before a 
release, you may want to test 

04:43:38.623 --> 04:43:43.209
the APKs that would be generated
from the App Bundle.  This is as

04:43:43.210 --> 04:43:47.831
easy as creating a new run 
configuration and selecting APK 

04:43:48.106 --> 04:43:51.648
from App Bundle.  Studio, under 
the hood, uses the same tool 

04:43:52.049 --> 04:43:56.319
Play does so we'll get high 
fidelityfidelity.  

04:43:56.320 --> 04:44:02.033
When you want to share the APKs,
generated from the app bundle, 

04:44:02.439 --> 04:44:06.886
you can use it.  This is what 
Play and Gradle use on their 

04:44:06.887 --> 04:44:10.322
hood to generate APKs.  It is 
transparent about how we 

04:44:10.953 --> 04:44:16.194
generate APKs and you can 
download it on the GitHub repo 

04:44:16.502 --> 04:44:19.926
you see here.  
It generates what we call an 

04:44:20.713 --> 04:44:23.931
APK-set archive which will 
contain all the APKs for all the

04:44:23.932 --> 04:44:29.724
devices that your app supports. 
You can share this archive and 

04:44:32.270 --> 04:44:35.779
still use bundle tool, which 
will simulate what Play does.  

04:44:35.780 --> 04:44:42.077
As you can imagine, an APK set 
can become quite big so if you 

04:44:42.078 --> 04:44:48.320
want to build it for a given 
device, you can do it with 

04:44:49.302 --> 04:44:52.798
specification.  You can share it
around and can be installed on 

04:44:53.799 --> 04:44:55.823
the devices.  
This is what the common line 

04:44:56.085 --> 04:45:01.241
looks like, to build the APK set
archive.  In this case, when 

04:45:03.076 --> 04:45:06.716
instructor bundle to build APKs 
only for the connected device.  

04:45:06.994 --> 04:45:11.274
If you don't have a device 
at-hand, if you're generating it

04:45:11.275 --> 04:45:15.742
from a CI system, you can do 
device specification in this 

04:45:16.256 --> 04:45:23.082
JSON format.  
If you want a unique APK, you 

04:45:24.283 --> 04:45:31.173
can build a universal APK.  It 
can be installed on any device 

04:45:33.043 --> 04:45:34.375
and is very convenient for 
sharing.  

04:45:34.376 --> 04:45:40.217
The best way is to go through 
the internal test track on the 

04:45:40.479 --> 04:45:47.812
console.  You can get, bite for 
bite, what your userishess will 

04:45:47.813 --> 04:45:49.817
get.  It is similar to

04:45:53.002 --> 04:45:56.203
the alpha and beta tracks.  
There is no delay between the 

04:45:56.657 --> 04:45:58.657
upload and 

04:46:01.223 --> 04:46:05.000
being avail on the device.  
You can create a list of emails.

04:46:05.946 --> 04:46:10.630
The testers can follow the link 
and they'll receive 

04:46:10.976 --> 04:46:12.799
automatically the latest 
version.  

04:46:12.800 --> 04:46:16.371
We know that for some of you, 
these testing options are not 

04:46:16.643 --> 04:46:20.710
ideal and we see a gap in 
testing with Android Studio and 

04:46:21.140 --> 04:46:27.041
tracks.  We're thinking really 
hard about how to close this 

04:46:27.335 --> 04:46:31.663
gap.
  So now you've built and tests 

04:46:32.413 --> 04:46:37.824
bundles, let's talk about a new 
view.  In the Play console, 

04:46:38.229 --> 04:46:42.445
we're starting to show an 
estimate when we think an app 

04:46:42.919 --> 04:46:46.972
could benefit from the App 
Bundle.  We'll calculate what 

04:46:47.245 --> 04:46:50.273
you could save if you switch.  
Once you choose to switch, you 

04:46:50.677 --> 04:46:54.322
manage your release just like 
you did with APKs.  Simply 

04:46:54.323 --> 04:46:59.847
create a new release and drop 
the App Bundle in the same 

04:47:01.070 --> 04:47:07.089
location.  In order to aid your 
migration, you can upload APKs 

04:47:07.616 --> 04:47:10.806
on your production track.  When 
you do this, Play is not going 

04:47:11.363 --> 04:47:16.025
to reassign the APK.  
We did this so you can feel 

04:47:16.311 --> 04:47:21.050
confident feeling out the App 
Bundle with a small amount of 

04:47:21.569 --> 04:47:24.455
users first.  
Once you've uploaded it, you 

04:47:24.456 --> 04:47:29.608
review your release, you roll it
out.  And that's it.  I can't 

04:47:29.876 --> 04:47:34.455
stress this enough, there's no 
multi-APK to deal with.  Play 

04:47:34.456 --> 04:47:39.332
console has created all the APKs
for the devices supported for 

04:47:39.484 --> 04:47:42.607
you.  
Now that you've uploaded your 

04:47:42.832 --> 04:47:46.830
App Bundle and Play's done this 
heavy lifting, it would be nice 

04:47:47.155 --> 04:47:51.802
to have an overview of what Play
has done for you.  We've built a

04:47:52.058 --> 04:47:57.274
new tool called bundle explorer,
which lets you navigate your 

04:47:57.846 --> 04:48:03.417
uploaded bundles.  
On the first screen of bundle 

04:48:03.655 --> 04:48:06.898
explorer, you'll see the size 
savings.  This is going to be 

04:48:07.441 --> 04:48:13.272
different, device by device, so 
we calculated this using a 

04:48:14.303 --> 04:48:18.924
popular configeration.  If you 
click on view devices, you can 

04:48:19.599 --> 04:48:24.158
see which devices are in each 
bucket.  

04:48:24.159 --> 04:48:27.820
Alternatively, you can search 
for supported device by name to 

04:48:28.052 --> 04:48:33.188
download the set of generated 
APKs that get served to that 

04:48:33.412 --> 04:48:36.436
particular device.  This is 
helpful when you get a bug 

04:48:36.696 --> 04:48:41.335
report so you can get the exact 
APKs that Play has served to it.

04:48:41.753 --> 04:48:45.819
We haven't forgotten about 
everyone who uses our publishing

04:48:46.684 --> 04:48:52.192
APKs, it is available by the API
and automation and CI tools are 

04:48:52.916 --> 04:48:58.178
adopting the bundle.  You will 
find all the documentation as 

04:48:58.450 --> 04:49:00.450
these URLs. 

04:49:13.110 --> 04:49:15.110
[No 

04:49:25.995 --> 04:49:28.986
audio]. 
  You can reduce the size of 

04:49:29.813 --> 04:49:34.895
your app.  Some features may be 
used by 10% of your users, to 

04:49:35.313 --> 04:49:40.178
avoid having the disk space for 
a feature they don't use, you 

04:49:40.719 --> 04:49:49.360
can choose to retract it.  
Dynamic features can be used or 

04:49:49.563 --> 04:49:52.678
you can defer them from 
installing them to a later time 

04:49:53.367 --> 04:49:56.839
when the app goes [no 

04:50:19.271 --> 04:50:21.848
audio]. 
  They evaluate the app size 

04:50:22.052 --> 04:50:24.934
impact to ensure that the 
benefit of the feature is worth 

04:50:25.904 --> 04:50:34.259
the size increase.  Dynamic 
features mean they can increase 

04:50:35.687 --> 04:50:38.490
it.  
Dynamic features help Facebook 

04:50:38.671 --> 04:50:43.370
with their high-end strategy.  
They are able to deliver 

04:50:43.689 --> 04:50:47.213
advanced features to just 
supported devices and remove 

04:50:47.214 --> 04:50:50.649
larming features that are not 
used often to avoid taking up 

04:50:50.959 --> 04:50:54.882
space on that device forever.  
Facebook has told us that 

04:50:55.141 --> 04:50:58.239
dynamic features work well when 
they are working on a new 

04:50:58.591 --> 04:51:01.763
feature.  They can have a 
separate team of engineers 

04:51:02.083 --> 04:51:05.554
working on it and they can add 
the app and add it to the app 

04:51:06.304 --> 04:51:10.323
without increasing the base app 
size at install time.  

04:51:10.324 --> 04:51:17.703
Here are some of the examples of
dynamic features.  They are in 

04:51:19.480 --> 04:51:24.681
production.  Froexample, card 
scanning is a feature that only 

04:51:24.682 --> 04:51:33.613
a small percentage of users are 
using.  It avoids it taking 2 

04:51:33.890 --> 04:51:39.195
megabytes.  Another one is 
realtime communication.  Only 

04:51:39.518 --> 04:51:42.334
users with devices who can 
support them and actually want 

04:51:42.650 --> 04:51:47.788
to use them need to download it.
What might that experience look 

04:51:48.054 --> 04:51:53.234
like for a user?  Let's take a 
simple example.  Imagine that 

04:51:53.235 --> 04:51:57.242
you have a recipe app and you 
want to keep it small.  While 

04:51:57.999 --> 04:52:00.948
all of your users like to browse
for recipes, only a small 

04:52:02.836 --> 04:52:05.529
fraction of them like to add 
recipes and you notice that this

04:52:06.194 --> 04:52:09.469
takes up significant size in 
your app.  You can choose to 

04:52:10.360 --> 04:52:13.831
break these feature out into its
own module and serve it only 

04:52:14.107 --> 04:52:17.894
when needed.  We can see what it
looks like for the user here.  

04:52:18.115 --> 04:52:23.736
The app opens, and then the user
goes to add a recipe.  The app 

04:52:23.737 --> 04:52:29.297
then requested the module be 
installed.  It's downloaded with

04:52:29.298 --> 04:52:37.212
progress visible to the user and
it's ready to be used after a 

04:52:38.988 --> 04:52:42.457
few seconds.  
Which parts of your apps might 

04:52:42.672 --> 04:52:47.042
make good candidates to be 
broken out?  If only a small 

04:52:47.985 --> 04:52:52.451
fraction of your users, use this
feature, it could be a good 

04:52:52.716 --> 04:52:56.925
candidate.  And finally, 
consider if users can wait a few

04:52:56.926 --> 04:53:01.204
seconds before downloading and 
using that feature. 

04:53:04.229 --> 04:53:10.428
If you're interested in 
modularizing your app, I 

04:53:12.373 --> 04:53:16.249
encourage you to look the 
articles.

04:53:16.250 --> 04:53:20.138
Now that we have covered how 
dynamic features work, let's see

04:53:20.394 --> 04:53:26.526
how to create them.  To create a
dynamic module in Android

04:53:30.034 --> 04:53:32.843
3.0, use the wizard.  Choose 
dynamic feature module.  Type in

04:53:32.844 --> 04:53:38.231
your module's name and Android 
Studio will download a new 

04:53:38.232 --> 04:53:42.247
feature for you.  Under the 
hood, this is what Studio does. 

04:53:42.541 --> 04:53:46.179
A split identifier is added.  In
this case, we'll call it add 

04:53:46.658 --> 04:53:49.619
recipient.  This is how the 
Android platform recognizes that

04:53:50.446 --> 04:53:55.124
although this APK has the same 
package name, it's a different 

04:53:55.488 --> 04:54:00.217
module name.  
A new tag is added for 

04:54:01.441 --> 04:54:05.061
distribution aspects.  It reads 
properties of the modules of 

04:54:05.062 --> 04:54:08.987
your app.  
Next, you declare that this is 

04:54:09.698 --> 04:54:14.758
an on-demand module, meaning 
that it will be only delivered 

04:54:14.759 --> 04:54:19.593
to users devices when you 
request it.  Note that on-demand

04:54:20.549 --> 04:54:24.217
modules are only supported since
Android L so you need to specify

04:54:24.488 --> 04:54:32.952
what Play should do when it 
generates the pre-L APKs. This 

04:54:32.953 --> 04:54:37.951
is configuring using the fusing 
tag.  

04:54:37.952 --> 04:54:42.679
Here's an example with our 
recipe app.  We have two dynamic

04:54:45.095 --> 04:54:49.623
features.  It has equal true and
the module is fuse equals false.

04:54:49.624 --> 04:54:59.363
You can see that Play will only 
add it in the pre-L APK.  

04:54:59.364 --> 04:55:04.475
In the dynamic module, you can 
see a new Gradle plugin being 

04:55:05.395 --> 04:55:09.801
used.  You also have to add the 
base module to access 

04:55:10.263 --> 04:55:13.736
functionality from the base 
module.  Looking at the build 

04:55:13.981 --> 04:55:19.260
Gradle, the only change is to 
declare all dynamic modules.  

04:55:19.261 --> 04:55:23.553
Gradle will make the resources 
stored available to them.  

04:55:23.554 --> 04:55:28.027
Now that we've created our 
on-demand modules, let's write 

04:55:28.785 --> 04:55:32.095
the code to download them.  In 
order to interact with the Play 

04:55:32.096 --> 04:55:37.786
store, we have to use the split 
install API, which is part of 

04:55:37.787 --> 04:55:41.749
the Play core library.  This is 
a library that communicates with

04:55:42.522 --> 04:55:47.446
the Play store.  The Play store 
communicates with Play servers. 

04:55:47.717 --> 04:55:54.733
The API is structured using the 
same task framework from Google 

04:55:56.251 --> 04:55:59.963
Play services.  Installations is
by the split manager.  You 

04:56:00.182 --> 04:56:06.438
construct a request with all the
modules you wish to download and

04:56:07.012 --> 04:56:10.034
install the splits required for 
the requested modules.  

04:56:10.035 --> 04:56:12.035
For large modules, you'll need 

04:56:15.240 --> 04:56:19.894
to obtain the user confirmation.
You'll need to do this whenever 

04:56:20.703 --> 04:56:22.703
an app requests more than 10

04:56:26.384 --> 04:56:33.365
mega bytes.  You can listen for 
updates and display this 

04:56:34.486 --> 04:56:39.840
progress to users.  Here, we 
show the download progress bar. 

04:56:40.128 --> 04:56:45.684
 Alternative option is to use 
the deferred installation API.  

04:56:45.685 --> 04:56:50.656
These will be installed at a 
convenient time for the user, 

04:56:50.657 --> 04:56:54.610
generally when they aren't using
the device and are on WiFi and 

04:56:54.812 --> 04:56:58.582
charging.  
Because of this, we allow you to

04:56:59.771 --> 04:57:04.090
install up to 100 megabytes with
our requiring user confirmation.

04:57:05.036 --> 04:57:12.115
It allows you to manage your 
on-demand modules.  You can 

04:57:12.451 --> 04:57:18.367
uninstall modules that are no 
longer required by the app.  

04:57:18.880 --> 04:57:23.168
So, when installing an on-demand
module, the app does not need to

04:57:23.625 --> 04:57:27.543
be restarted.  Code is available
immediately and your resources 

04:57:28.948 --> 04:57:33.771
and assets are available once 
you refresh the content object. 

04:57:33.772 --> 04:57:43.095
On Android L And M, it needs to 
fully restart.  We include a 

04:57:43.339 --> 04:57:46.935
split library which has splits 
for L and M until the app goes 

04:57:47.226 --> 04:57:50.644
into the background and we can 
properly install it.  If you are

04:57:51.692 --> 04:57:57.896
familiar with it, you will set 
up split compat in a very 

04:57:58.318 --> 04:58:01.346
similar way.  
You can use the split 

04:58:01.617 --> 04:58:05.960
application as you default 
application or you can simply 

04:58:06.225 --> 04:58:11.098
extend.  And if none of these 
options suit you, you can choose

04:58:11.466 --> 04:58:16.187
to override the context in your 
application and invoke split 

04:58:16.188 --> 04:58:18.958
compat at install.  
Now, let's talk about 

04:58:19.546 --> 04:58:24.369
versioning.  When you release an
adate to your app, Play ilwill 

04:58:24.712 --> 04:58:29.039
update the base module and any 
on-demand modules so the version

04:58:29.351 --> 04:58:35.110
of your modules are always in 
sync.  Partners tell us this is 

04:58:35.532 --> 04:58:38.740
something they really like about
this model.

04:58:38.741 --> 04:58:42.571
Let's now talk about the final 
step here, helping users update 

04:58:42.572 --> 04:58:45.519
to the latest and greatest 
version of your app.  You know 

04:58:45.964 --> 04:58:51.641
that Play offers auto update 
functionality and many users do 

04:58:52.169 --> 04:58:58.347
have automatic updates turned 
on.  In some markets, it's not 

04:58:58.602 --> 04:59:02.927
uncommon to have it turned on 
but their device to not meet the

04:59:03.763 --> 04:59:08.785
requirements.  For example, they
might not connect to WiFi.  

04:59:08.786 --> 04:59:10.786
I'm

04:59:12.353 --> 04:59:16.489
happy to share we're launching a
new feature.  You can call this 

04:59:16.490 --> 04:59:20.159
API to determine first there is 
an update available and then if

04:59:23.597 --> 04:59:27.110
so, you can share a prompt to 
your user s.  The flow is 

04:59:27.515 --> 04:59:31.307
designed to immediate critical 
use cases, such as user privacy 

04:59:31.308 --> 04:59:35.197
or revenue-affecting bugs.  It's
a full-screen experience where 

04:59:35.198 --> 04:59:40.876
the user is expected to wait for
the update to be applied.  We 

04:59:40.877 --> 04:59:44.439
take of restarting the app for 
you.  

04:59:44.440 --> 04:59:47.269
Some of you have built similar 
flows for yourselves.  But this 

04:59:47.623 --> 04:59:52.455
is a standardized method that 
you can use with very little 

04:59:52.916 --> 04:59:54.662
effort.  
Instead of that immediate 

04:59:54.663 --> 04:59:58.102
update, you can also put 
together a flexible update which

04:59:58.526 --> 05:00:01.923
does not have to be applied 
straight away.  The really cool 

05:00:02.364 --> 05:00:06.008
thing about this API is that you
completely customize the update 

05:00:07.262 --> 05:00:12.900
flow so that it feels like part 
of your app.  You may choose to 

05:00:14.531 --> 05:00:18.547
nudge users, like Google Chrome 
is doing in this example.  The 

05:00:18.966 --> 05:00:22.827
download happens in the 
background so the user can keep 

05:00:23.055 --> 05:00:26.131
using the app.  The update is 
complete, it's up to you, and 

05:00:26.479 --> 05:00:29.682
your app, to decide how to 
prompt the user to restart.  Or 

05:00:29.898 --> 05:00:34.688
you can simply wait until the 
app goes into the background.  

05:00:35.055 --> 05:00:37.970
Google Chrome is testing this 
now and we're inviting early 

05:00:38.294 --> 05:00:42.856
access partners to start testing
this with us, as well.  Talk to 

05:00:42.857 --> 05:00:44.845
your manager if you're 
interested.  

05:00:44.846 --> 05:00:48.847
Let's take a look at the code 
that allows that flexible in-app

05:00:48.848 --> 05:00:52.657
update to work.  First, you can 
request an instance of app 

05:00:52.658 --> 05:00:56.986
update manager.  And then 
request the app update info.  

05:00:56.987 --> 05:01:01.368
This result is going to contain 
the update availability status. 

05:01:01.369 --> 05:01:05.976
If an update is available and 
the update is allowed, the 

05:01:06.236 --> 05:01:11.607
returned app update contains an 
intent to start the flow.  

05:01:11.608 --> 05:01:15.912
If the app is allowed to start, 
you would extract this pending 

05:01:16.196 --> 05:01:19.596
intent and start it.  This will 
start the download and 

05:01:19.935 --> 05:01:22.511
installation.  
You can monitor the state of an 

05:01:22.940 --> 05:01:27.191
update by registering a listener
for status updates.  When the 

05:01:28.118 --> 05:01:34.921
download is complete, you can 
choose to install it directly or

05:01:34.922 --> 05:01:38.583
defer to install it.  The 
restart happens when a complete 

05:01:39.320 --> 05:01:44.246
update is called.  
So to recap this new API, 

05:01:44.707 --> 05:01:47.050
ensuring your users get the 
latest update is important.  And

05:01:47.051 --> 05:01:50.115
you can make that happen by 
following some of these 

05:01:50.825 --> 05:01:53.872
best-practices up here on the 
screen and also by integrating 

05:01:54.286 --> 05:01:57.732
by our in-app updates API.  The 
API is available for any app and

05:01:57.733 --> 05:02:03.200
so you can get started with it, 
in parallel to switching with 

05:02:03.372 --> 05:02:05.515
the App Bundle. 
  And, that's it.  We've now 

05:02:05.516 --> 05:02:09.892
covered how to make your apps 
smaller and create dynamic 

05:02:10.611 --> 05:02:14.986
features and how you can ensure 
that your users stay on the 

05:02:15.512 --> 05:02:21.514
latest version of your app.  
If you want to chat, you can 

05:02:21.515 --> 05:02:25.262
find us in the office hours.  If
you want to share about what 

05:02:25.537 --> 05:02:30.751
we've talked about, the post of 
this link is a great place to 

05:02:30.752 --> 05:02:34.291
start.  Enjoy the rest of your 
day.  Thank you.

05:02:45.462 --> 05:02:47.628
[Applause]
  Everyone, the next session, in

05:02:48.607 --> 05:02:55.780
this room, begins promptly, at 
2:50.  Thank you. 

05:06:40.317 --> 05:06:42.317
2:50.  Thank you.  

05:06:48.893 --> 05:06:51.426
2:50.  Thank you.  
2:50.  Thank you.  

05:06:48.893 --> 05:06:50.893
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.238
2:50.  Thank you.  
2:50.  Thank you.  

05:15:33.705 --> 05:15:36.195
2:50.  Thank you.  
   Good afternoon, everyone.  

05:15:36.196 --> 05:15:40.366
Our program will resume in three
minutes.  We remind you, as a 

05:15:40.647 --> 05:15:45.861
courtesy to the presenters, to 
please mute all mobile devices. 

05:15:46.262 --> 05:15:48.262
Thank 

05:16:37.209 --> 05:16:39.209
you.  

05:18:34.321 --> 05:18:34.626
Thank you.  
Thank you.  

05:18:34.627 --> 05:18:36.227
Thank you.  
Thank you.  

05:18:34.627 --> 05:18:36.227
Thank you.  
Thank you.  

05:18:34.627 --> 05:18:35.501
Thank you.  
Thank you.  

05:18:35.502 --> 05:18:36.794
Thank you.  
Thank you.  

05:18:36.795 --> 05:18:37.082
Thank you.  
Thank you.  

05:18:37.083 --> 05:18:38.683
Thank you.  
Thank you.  

05:18:37.083 --> 05:18:38.683
Thank you.  
Thank you.  

05:18:37.083 --> 05:18:38.341
Thank you.  
Thank you.  

05:18:38.342 --> 05:18:39.942
Thank you.  
Thank you.  

05:18:38.342 --> 05:18:39.942
Thank you.  
Thank you.  

05:18:38.342 --> 05:18:41.822
Hi, my name is Kodlee.
  And I'm Rasekh.  Here to talk 

05:18:42.126 --> 05:18:46.683
to you about what's new about 
app developer and Android Auto. 

05:18:47.471 --> 05:18:53.772
We're excited about the 
automotive space right now,

05:18:59.791 --> 05:19:03.076
connectivity, electrification.  
Cars are turning into full-blown

05:19:03.539 --> 05:19:08.293
computers on wheel.  They have 
cameras, screens of all shapes 

05:19:08.559 --> 05:19:12.619
and sizes everywhere.  
Android Auto is an effort from 

05:19:12.977 --> 05:19:17.155
Google and our automotive 
partners to bring these together

05:19:17.156 --> 05:19:23.661
and bring a safe experience for 
drivers everywhere.  Of course, 

05:19:23.969 --> 05:19:30.697
that's easier said than done.  
Many different input types, from

05:19:30.698 --> 05:19:35.081
touchscreens to touch pads, many
different screen shapes, sizes 

05:19:35.082 --> 05:19:40.146
and resolutions.  Today, you can
see that vision at work in any 

05:19:41.365 --> 05:19:44.241
Android Auto-compatible carment 
drivers have access to their 

05:19:44.510 --> 05:19:48.273
favorite apps right from their 
car's display and developers 

05:19:48.274 --> 05:19:51.967
build their app once without 
worrying about different makes 

05:19:52.246 --> 05:19:57.579
and models.  Today, we'll talk 
about two of the most important 

05:19:59.577 --> 05:20:01.577
app categories, 

05:20:04.259 --> 05:20:06.719
mesinging and media. 
  First is

05:20:15.408 --> 05:20:18.472
messaging.  That's where 
CarExtender came into play.  

05:20:18.473 --> 05:20:21.398
CarExtender allowed a way for 
messaging apps to provide 

05:20:21.910 --> 05:20:25.939
details and a way to reply to 
conversations to Android Auto.  

05:20:26.360 --> 05:20:32.077
But sense Android N, apps could 
stylize their notifications with

05:20:32.813 --> 05:20:35.592
MessagingStyle.  It is a huge 
step up for CarExtender, as it 

05:20:37.366 --> 05:20:42.156
allows messaging apps to bring 
conversation into the 

05:20:42.718 --> 05:20:46.443
notification.  Not only does it 
provide a nicer UI, but it 

05:20:48.573 --> 05:20:54.614
provides affordances like 
applying and liking.  

05:20:54.615 --> 05:20:58.626
Android Auto now fully-supports 
the use of MessagingStyle 

05:20:59.057 --> 05:21:01.967
without the need for 
CarExtender.  This means Android

05:21:03.178 --> 05:21:07.237
Auto and the assistant allow 
group messaging.  For 

05:21:08.002 --> 05:21:11.129
MessagingStyle, apps not only 
gain a richer user experience 

05:21:11.409 --> 05:21:14.939
and the benefit of automotive 
support.  

05:21:14.940 --> 05:21:19.435
So, let's see how Android Auto 
interfaces with this, starting 

05:21:20.136 --> 05:21:23.704
on the messaging app side.  From
Android Auto's point of view, 

05:21:24.050 --> 05:21:27.790
messaging apps have three core 
functions.  Notifying users of 

05:21:28.716 --> 05:21:34.834
messages, marking those messages
as read and replying.  Apps can 

05:21:35.132 --> 05:21:38.178
implement reading and replying 
with services.  These services 

05:21:38.461 --> 05:21:41.286
can be triggered inturnally with

05:21:44.668 --> 05:21:47.727
intents or externally with 
pending intents.  Notifying is 

05:21:48.261 --> 05:21:50.948
done via an Android notification
and the messaging information is

05:21:51.396 --> 05:21:57.085
provided with the 
MessagingStyle.  The mark is 

05:21:57.782 --> 05:22:02.610
read and reply are wrapped in 
intentions.  Note here that the 

05:22:02.995 --> 05:22:08.152
reply action has a remote input 
that's added, that acts an input

05:22:08.369 --> 05:22:12.805
field for the reply.  
And that's the messaging app's 

05:22:12.806 --> 05:22:16.268
architecture.  Moving on to the 
other side of the notification, 

05:22:16.869 --> 05:22:19.977
we can see how Android Auto 
leverages these objects.  They 

05:22:19.978 --> 05:22:24.965
will post an in-car notification
and once tapped on, will read 

05:22:25.251 --> 05:22:30.310
aloud the messages.  The mark is
read pending.  The user's given 

05:22:30.648 --> 05:22:33.898
the choice to respond and if 
taken, a transcription of that 

05:22:34.230 --> 05:22:38.033
response is set in that remote 
input.  The reply pending intent

05:22:38.251 --> 05:22:41.403
is then fired.  
And that's the entire Android 

05:22:41.679 --> 05:22:44.904
Auto flow so let's see how we 
can put that into code.  First, 

05:22:45.189 --> 05:22:48.838
the app needs to declare support
for Android Auto.  To do that, 

05:22:48.839 --> 05:22:54.435
it needs to create a new XML 
file linked in the Android 

05:22:54.881 --> 05:22:58.167
manifest.  This file says that 
it has notifications that 

05:22:59.273 --> 05:23:02.561
Android Auto should take a look 
at.  Note that for messaging 

05:23:03.908 --> 05:23:10.815
apps that support SMS, this 
needs to be added.  So, now 

05:23:11.104 --> 05:23:15.994
Android Auto's taking a look at 
our messages, we can build up 

05:23:15.995 --> 05:23:19.157
the messaging style.  We can't 
really have a conversation 

05:23:19.511 --> 05:23:23.237
without people so we have to add
the user of the device.  We 

05:23:23.525 --> 05:23:26.259
create a new person object.  
Person is used to set things 

05:23:27.487 --> 05:23:34.306
like the user's name, their icon
and unique key.  So, we create 

05:23:34.615 --> 05:23:39.613
this device user and we create 
the MessagingStyle with it.  We 

05:23:39.944 --> 05:23:41.729
can add our conversation 
information.  

05:23:41.730 --> 05:23:47.438
So, I'm from Seattle and I love 
skiing so I'm setting it to ski 

05:23:47.744 --> 05:23:51.615
group.  Because I'm taking 
multiple friends, this is a 

05:23:52.129 --> 05:23:55.452
group conversation so the 
messaging app needs to set it as

05:23:55.453 --> 05:23:57.916
such.  Note here that 
conversation title and whether 

05:23:58.159 --> 05:24:01.583
or not the conversation is a 
group can be set independently. 

05:24:02.032 --> 05:24:07.822
This is new in Android P and has
been back-ported in the compat 

05:24:08.006 --> 05:24:10.358
library.  
Finally, we can add all the 

05:24:10.627 --> 05:24:13.693
messages in this conversation in
the order they were received.  

05:24:14.058 --> 05:24:19.198
In this case, my friend wants to
coordinate breakfast, so there's

05:24:19.532 --> 05:24:23.333
the text, the timestamp and the 
sender.  With this conversation 

05:24:23.334 --> 05:24:28.937
set up, it's time to add the 
actions.  For the reply action, 

05:24:29.278 --> 05:24:32.375
we in stantiate an action 
building and set the semantic 

05:24:32.555 --> 05:24:36.347
action to semantic action reply.
That must also tell the OS that 

05:24:36.623 --> 05:24:41.666
firing the reply pending intent 
won't show any extra UI.  This 

05:24:42.989 --> 05:24:45.603
is especially important in 
Android Auto because we don't 

05:24:46.992 --> 05:24:50.725
want to be distracting users.  
The reply action is supplied 

05:24:51.141 --> 05:24:56.963
with that remote input I talked 
about earlier.  On the mark as 

05:24:57.594 --> 05:25:01.156
read side, it is done the same 
way.  It is set to semantic 

05:25:01.816 --> 05:25:07.228
action, mark as read and we tell
the OS that pending that intent 

05:25:07.229 --> 05:25:11.656
won't show extra UI.  The mark 
as read action does not need a 

05:25:11.965 --> 05:25:16.056
remote input.  
So that's all three pieces, the 

05:25:16.236 --> 05:25:18.713
notification can now be built.  
For reference, here are the 

05:25:18.714 --> 05:25:25.352
three elements we created.  
MessagingStyle, which holds our 

05:25:25.768 --> 05:25:29.708
conversation, reply and mark as 
read action.  To build a 

05:25:30.080 --> 05:25:33.493
notification, some boilerplate 
is provided and we set the 

05:25:33.763 --> 05:25:37.955
messaging style.  We can add our
actions.  Here is where the 

05:25:38.670 --> 05:25:44.126
messaging app has some options. 
The reply is a regular, visible 

05:25:44.854 --> 05:25:50.881
action and the mark as read is 
added as invisible.  One can add

05:25:51.136 --> 05:25:56.296
both as visible or invisible.  
This changes how it shows up in 

05:25:56.704 --> 05:26:02.355
the mobile UI.  On Android Auto,
actions are never shown but it 

05:26:02.356 --> 05:26:07.233
can read visible and invisible 
actions.  

05:26:07.234 --> 05:26:10.464
The messaging app can post the 
notification and now we have 

05:26:11.368 --> 05:26:15.155
planned breakfast on the road 
and our ski trip is under way.

05:26:15.361 --> 05:26:21.410
  And now that we've coordinated
with everybody, let's find 

05:26:22.677 --> 05:26:27.153
something to listen to.  Getting
driver's access to their content

05:26:27.356 --> 05:26:32.623
should be front and center.  I'm
going to talk about new features

05:26:33.588 --> 05:26:41.317
to enhance the usability of 
media apps.  We want to make it 

05:26:41.568 --> 05:26:48.830
more visually pleasing and 
enabling search results.  Let's 

05:26:48.831 --> 05:26:53.221
go over the architecture that an
app has when communicating with 

05:26:53.222 --> 05:26:56.834
the Android Auto.  The first 
thing a media app is a media 

05:26:57.265 --> 05:27:00.637
browser service.  It provides a 
tree of playable and browsable 

05:27:00.998 --> 05:27:04.266
items.  Browsable items are 
basically things to organize app

05:27:04.626 --> 05:27:10.332
content instead of returning a 
giant list of playable items.  

05:27:10.935 --> 05:27:15.451
They implement the ownload 
children method, which adds the 

05:27:16.442 --> 05:27:21.429
tree.  Here in our first call, 
it would return home, recently 

05:27:21.697 --> 05:27:25.738
played, recommended and play 
lists.  Since this is running in

05:27:26.400 --> 05:27:31.590
a car, we recommend that media 
apps only provide two levels in 

05:27:31.591 --> 05:27:34.479
the tree to avoid distracting 
drivers.  

05:27:34.480 --> 05:27:38.904
Now, once a user has picked 
something playable from the 

05:27:38.905 --> 05:27:44.418
browse tree, the media session 
service is used to play music 

05:27:44.419 --> 05:27:48.817
and provide metadata and 
controls.  For example, our 

05:27:49.094 --> 05:27:55.770
media app supports play/pause, 
play forward and skip back.  

05:27:55.771 --> 05:27:59.300
There's also the ability to 
provide their own custom 

05:27:59.301 --> 05:28:04.718
actions, maybe something like 
30-second skip.  Obviously, we 

05:28:04.719 --> 05:28:08.155
want to get the user away from 
touches or doing things so we 

05:28:08.156 --> 05:28:13.042
bring in the assistant.  Might 
say something like, hey, Google,

05:28:13.043 --> 05:28:18.737
play my ski jams.  They perform 
speech recognition and request 

05:28:19.314 --> 05:28:22.546
that it play the query and music
starts playing.  

05:28:22.547 --> 05:28:27.028
We're going to take a one step 
farther today.  We're giving you

05:28:27.434 --> 05:28:32.309
the ability for media apps to 
implement an additional 

05:28:32.310 --> 05:28:37.708
function, onsearch, and once the
music has started playing from a

05:28:38.979 --> 05:28:47.228
Google Assistant query, they can
provide additional results.  It 

05:28:48.006 --> 05:28:55.988
provided a ski trip from this 
year, as well as last year.

05:28:55.989 --> 05:29:00.493
This should look pretty 
familiar.  This is the onsearch 

05:29:00.494 --> 05:29:06.775
method.  It takes the query 
string, an extras bundle and a 

05:29:07.880 --> 05:29:11.198
result object which the app 
fills in and sends back to 

05:29:11.891 --> 05:29:14.960
Android Auto.  Apps should 
return an empty list if they get

05:29:15.434 --> 05:29:19.030
a query they don't support.  
Second, for queries

05:29:23.335 --> 05:29:26.856
that can't be answered sink 
cruinously, it let's them know 

05:29:26.857 --> 05:29:31.198
not to send anything back right 
away.  Apps can do extra work 

05:29:32.657 --> 05:29:35.097
before sending the results to 
Android Auto.  

05:29:35.098 --> 05:29:38.182
Finally, when the results are 
ready, they can send the result 

05:29:38.917 --> 05:29:41.148
and the result object and 
Android Auto will be notified 

05:29:41.149 --> 05:29:47.231
and show the results on-screen. 
All the code snippets come from 

05:29:47.232 --> 05:29:52.482
the universal music player, an 
open source media app published 

05:29:52.483 --> 05:29:57.291
on GitHub.  It can be cloned, 
compiled and used as a great 

05:29:57.559 --> 05:29:59.787
reference building your own 
media app.  

05:29:59.788 --> 05:30:04.714
So, our media app returns a list
of items in the ski jams query. 

05:30:05.158 --> 05:30:09.468
It returns two play lists and an
album.  It could be nice to 

05:30:11.723 --> 05:30:16.058
Android Auto could group those 
items.  Fortunately, we're 

05:30:17.091 --> 05:30:19.980
introducing a way to do that.  
Here's an example function where

05:30:20.260 --> 05:30:24.318
your media app might use from an
internal representation of a 

05:30:24.567 --> 05:30:31.147
media item into the media item 
compat.  We can annotate items 

05:30:31.799 --> 05:30:34.657
with a category extra and 
Android Auto will group any 

05:30:35.099 --> 05:30:40.399
adjacent items with the same 
category.  For the two ski trips

05:30:40.400 --> 05:30:45.902
play lists, we can annotate with
play lists and Android Auto will

05:30:46.161 --> 05:30:49.044
add them for you.  
We're also adding some 

05:30:49.729 --> 05:30:53.552
additional annotations on media 
items that would be really 

05:30:53.870 --> 05:30:57.496
useful on our trip.  I might be 
heading out to the mountains 

05:30:57.783 --> 05:31:03.523
with my family, I might worry 
about a song coming up with 

05:31:03.830 --> 05:31:08.062
explicit content.  We are able 
to say this has exlicit content 

05:31:08.332 --> 05:31:11.577
and Android Auto can show that 
in the UI.  I might not have 

05:31:11.845 --> 05:31:15.130
great bandwidth, I'd love to 
know if they've been downloaded 

05:31:15.507 --> 05:31:18.742
or maybe I don't want to burn my
data on music that I'm playing. 

05:31:19.132 --> 05:31:23.152
We can also annotate with 
whether or not media items have 

05:31:23.513 --> 05:31:27.659
been downloaded and are already 
on the device.  

05:31:27.660 --> 05:31:32.219
Great.  Looks like the ski trip 
2018 is downloaded, doesn't have

05:31:32.649 --> 05:31:38.194
any explicit content, great 
choice for my trip out to the 

05:31:38.469 --> 05:31:40.631
mountains.  
There's one more function that 

05:31:40.996 --> 05:31:45.782
needed updating, the media 
browser service is called when a

05:31:46.108 --> 05:31:51.565
media app is first connected to 
by Android Auto.  In order for 

05:31:51.997 --> 05:31:55.650
search, you'll need to add a 
couple of extras to let Android 

05:31:55.996 --> 05:32:03.565
Auto know you support those 
features.  As I mentioned, we're

05:32:04.462 --> 05:32:10.016
introducing consent styling and 
Android Auto will be 

05:32:11.555 --> 05:32:14.656
interpreting it in a much more 
visually pleasing way.  Folders 

05:32:15.039 --> 05:32:20.549
will be interpreted as lists.  
But for playable items, things 

05:32:20.847 --> 05:32:24.343
like songs or albums or play 
lists, we're going to be showing

05:32:24.618 --> 05:32:29.149
them now as grids.  Most of 
thesethese items have richer 

05:32:29.150 --> 05:32:32.651
content that users can identify 
by seeing much easier than 

05:32:32.949 --> 05:32:35.061
reading and much safer when 
you're in the car. 

05:32:35.062 --> 05:32:38.255
There are times when a list is 
better than a grid.  For 

05:32:38.716 --> 05:32:44.462
example, in a podcast app, each 
of the individual podcasts would

05:32:44.463 --> 05:32:47.501
have individual art that is much
more visually representative 

05:32:47.775 --> 05:32:51.976
while the episodes, instead, 
they'd have all the same art but

05:32:52.958 --> 05:32:56.080
different episode titles and 
lengths and status and it would 

05:32:56.363 --> 05:33:00.197
be much better to show them as 
lists.  

05:33:00.198 --> 05:33:02.198
In the

05:33:04.264 --> 05:33:08.394
ongetroute function, they can 
say, I prefer them to be grids. 

05:33:08.725 --> 05:33:12.880
My playable items to be lists.  
Or vice versa.  They have full 

05:33:12.881 --> 05:33:16.802
control over how we're slowing 
the items.  

05:33:16.803 --> 05:33:20.189
I already mentioned the 
universal media player.  I just 

05:33:20.350 --> 05:33:25.129
want to reiterate, it's a great,
comprehensive media app.  It 

05:33:25.130 --> 05:33:30.108
gaves you implementation of a 
media app that actually plays 

05:33:30.517 --> 05:33:38.284
music and it's for Android Auto 
as well as Wear and Android TV. 

05:33:38.710 --> 05:33:43.098
I encourage you to check out the
Android media controller, 

05:33:43.397 --> 05:33:48.598
another open source on GitHub.  
It will connect to your app's 

05:33:49.115 --> 05:33:53.106
session and shows you 
information in a clear, semantic

05:33:53.584 --> 05:34:01.240
format.  If you're using 
whitelisting, it would probably 

05:34:01.660 --> 05:34:06.106
be a good idea to add the white 
list.  

05:34:06.107 --> 05:34:13.622
So to sum up, we've shown code 
samples for MessagingStyle, 

05:34:13.951 --> 05:34:19.182
actions, attaching new extras 
for media items metadata and 

05:34:20.028 --> 05:34:22.037
declaring support for content 
browse and search.

05:34:22.354 --> 05:34:25.090
So, great.  We look forward to 
seeing all of your messaging and

05:34:25.404 --> 05:34:30.319
media apps in the car.  Rasekh 
and I will be available tomorrow

05:34:30.596 --> 05:34:34.597
morning at office hours to 
answer any questions you have 

05:34:35.002 --> 05:34:37.507
about Android Auto.  
Thank you so much for 

05:34:43.147 --> 05:34:45.147
watching. 

05:34:49.775 --> 05:34:54.275
[Applause]
  Hi, everyone.  Thank you for 

05:34:54.572 --> 05:34:57.880
coming and watching my session, 
which is going to be Android on 

05:34:57.881 --> 05:35:02.731
large screens.  Just waiting for
it to pop 

05:35:08.280 --> 05:35:12.237
up.  Cool.  So as we all know, 
Android has evolved from just 

05:35:12.238 --> 05:35:17.218
being a phone platform.  It's 
available on watches and cars, 

05:35:17.219 --> 05:35:22.765
as we just heard.  Desktop, 
phones and specifically the 

05:35:22.766 --> 05:35:26.454
mobile space has already changed
drastically.

05:35:26.455 --> 05:35:32.192
Let's see what your mobile is 
running on today.  

05:35:32.193 --> 05:35:35.058
Starting on the phone, it's what
we all develop for mainly.  A 

05:35:35.446 --> 05:35:40.573
couple keys about the platform, 
portrait-first, touch-first and 

05:35:41.955 --> 05:35:46.418
full-screen first.  A lot of 
apps lock rotation.  Some users 

05:35:46.419 --> 05:35:48.945
use multi-window or styles and 
things like that.  Majority of 

05:35:49.330 --> 05:35:54.448
your users are using it with 
regular touchscreens and in full

05:35:54.449 --> 05:35:59.970
screen.  Moving on to tablets.  
Both oriantsations are 

05:36:00.258 --> 05:36:05.048
first-class citizens.  If you 
lock a portrait, users can still

05:36:05.049 --> 05:36:09.885
use your app in the portrait 
landscape.  Larger screens do 

05:36:09.886 --> 05:36:13.978
bring challenges, design-wise, 
and the ability to do different 

05:36:14.261 --> 05:36:16.511
things and take more advantage 
of the real estate and allow 

05:36:16.860 --> 05:36:22.513
your users to do things faster. 
The different medium brings a 

05:36:23.303 --> 05:36:27.242
different focus on what apps are
going to be used for, content 

05:36:27.967 --> 05:36:32.030
apps or media consumption apps, 
productivity apps, things that 

05:36:32.031 --> 05:36:35.135
can really take advantage of the
larger screen.  

05:36:35.136 --> 05:36:38.788
And then moving on to kind of 
the desktop platforms.  You 

05:36:39.084 --> 05:36:43.403
know, we have Chromeless, we 
have 

05:36:46.629 --> 05:36:51.351
OEMs.  Also, Android has now 
brought the ability to take 

05:36:53.244 --> 05:36:56.155
advantage of having external 
displays.  Even if it's running 

05:36:56.418 --> 05:36:59.997
on a phone, it could be 
displayed to an external 

05:37:00.345 --> 05:37:03.293
monitor.  This is where the 
biggest difference comes in 

05:37:03.294 --> 05:37:07.363
where it 's landscape first, all
these environments have some 

05:37:08.134 --> 05:37:13.038
sort of window resizes and you 
have new first-class input 

05:37:13.793 --> 05:37:16.902
methods such as keyboard and 
mouse and track pads that shift 

05:37:17.179 --> 05:37:20.630
with the device or will be 
connected.  

05:37:20.631 --> 05:37:23.955
So, what's a focus on when 
you're thinking about how to 

05:37:23.956 --> 05:37:26.817
bring your apps to all these 
platforms and have a good user 

05:37:27.345 --> 05:37:32.075
experience?  Number one is 
design.  Again, if you've really

05:37:32.412 --> 05:37:36.014
been focusing on phones, most of
your designs are very 

05:37:36.771 --> 05:37:39.375
portrait-based and 
smaller-screen based.  Window 

05:37:39.376 --> 05:37:42.166
management is probably the 
biggest place where we see 

05:37:42.339 --> 05:37:46.688
issues with partners apps, 
dealing with resizing, 

05:37:47.209 --> 05:37:49.783
multi-window consideration or 
problems we've never had to 

05:37:50.098 --> 05:37:53.309
focus on before.  
We're going to talk about the 

05:37:53.888 --> 05:37:57.764
tooling available from Google to
make sure you're able to develop

05:37:58.100 --> 05:38:01.573
for these platforms and bring it
into your actual cycle.  

05:38:01.574 --> 05:38:06.148
So, talking about design, raise 
your hands if you have layouts 

05:38:07.588 --> 05:38:12.058
for large screens or lablets at 
all?  A lot more people than I 

05:38:12.376 --> 05:38:15.357
expected.  Cool.  So, you know, 
biggest thing is just thinking 

05:38:17.116 --> 05:38:23.007
about largest screens again.  
For the last couple of years, 

05:38:23.400 --> 05:38:26.672
we've seen a lot more apps come 
out that might lock to portrait,

05:38:26.673 --> 05:38:30.844
which makes sense.  With a more 
-- more and more growing number 

05:38:30.845 --> 05:38:36.521
of platforms that are running 
your APK, but showing a 

05:38:36.881 --> 05:38:39.550
different form factor or 
platform, it's time to start 

05:38:40.104 --> 05:38:43.344
thinking again about how to 
bring the best experience to 

05:38:43.686 --> 05:38:48.522
those areas.  
A really bad example of design 

05:38:49.876 --> 05:38:54.727
is Google Play Music, which is 
always great.  A couple things 

05:38:55.198 --> 05:39:02.998
about this that are not great, 
super-stretched layout, tons of 

05:39:02.999 --> 05:39:06.931
space that could be used for 
descriptions.  The biggest key 

05:39:07.402 --> 05:39:11.028
here, though, is there's no line
dividers, which on a phone is 

05:39:14.405 --> 05:39:19.220
fine because see what options 
menu you're clicking on.  When 

05:39:19.609 --> 05:39:22.978
you take it to a larger 
landscape layout, it's hard to 

05:39:24.077 --> 05:39:27.471
follow the lines and see what 
item you're pressing the options

05:39:27.472 --> 05:39:32.178
menu for. 
An external partner is One 

05:39:33.271 --> 05:39:36.262
Passward.  It's your standard 
list of items you'll drill down 

05:39:36.765 --> 05:39:40.195
into.  When you move to a larger
screen, they really take 

05:39:40.196 --> 05:39:43.831
advantage of the real estate 
going to almost like a 

05:39:44.263 --> 05:39:47.591
three-panel layout, allowing the
user to get whatever content 

05:39:47.894 --> 05:39:52.163
they need in a lot less clicks 
and a lot faster.  Also, being 

05:39:52.164 --> 05:39:55.595
able to showcase more 
information at the same time.  

05:39:55.866 --> 05:39:59.713
So, kind of going back to the 
same point is, again, building 

05:40:00.011 --> 05:40:03.172
layouts for both orientations 
and there's a couple big keys 

05:40:03.435 --> 05:40:09.055
for this.  Again, not all 
platforms are portrait-first.  A

05:40:09.331 --> 05:40:11.933
lot of the desktop environments,
if you're building for portrait,

05:40:11.934 --> 05:40:15.588
you're going to have a pretty 
bad user experience when I want 

05:40:16.041 --> 05:40:19.359
to use your app in full screen 
or the top-half of the screen.  

05:40:19.360 --> 05:40:22.081
On top of that, resizing 
capabilities allow the user to 

05:40:22.496 --> 05:40:26.280
make your app whatever size 
orientation or screen ratio that

05:40:26.745 --> 05:40:30.147
they really want to.  So, you 
really want to let the user 

05:40:30.536 --> 05:40:35.371
really decide how they want to 
use your app.  

05:40:35.372 --> 05:40:42.935
Going back to kind of mainly the
desktop platforms is designing 

05:40:42.936 --> 05:40:48.590
for mediums other than touch.  
Take into consideration how your

05:40:48.861 --> 05:40:56.441
app works with a mouse or 
stylus.  The UX patterns are 

05:40:56.783 --> 05:41:01.091
different for touch than 
non-touch.  Things like 

05:41:01.714 --> 05:41:05.055
right-clicking are different 
than what we're used to with 

05:41:06.238 --> 05:41:10.413
long-pressing.  Whereas when you
right-click on a desktop, you're

05:41:11.106 --> 05:41:15.039
usually expecting a pop-up 
context menu.  So, taking the 

05:41:15.306 --> 05:41:20.021
time to really think about how 
your app works for the different

05:41:20.512 --> 05:41:24.765
UX considerations. 
The other big one we noticed is 

05:41:25.028 --> 05:41:27.893
hover actions.  On the web or 
desktop environments with the 

05:41:28.469 --> 05:41:32.205
mouse, you expect some type of 
feedback when you move your 

05:41:32.833 --> 05:41:35.993
mouse over an action item to let
you know there is something you 

05:41:35.994 --> 05:41:40.699
can do there, whether it's 
clickable or dragbable.  There's

05:41:40.700 --> 05:41:45.099
some feedback.  Myself, even if 
I use the app on a phone, 

05:41:46.883 --> 05:41:52.467
extensively, Google Drive is a 
good example of this, Android on

05:41:52.468 --> 05:41:55.977
Chrome OS, I'll miss actions 
that I can actually do because 

05:41:55.978 --> 05:42:01.089
just navtly on this platform, 
I'm expecting hover actions. 

05:42:01.989 --> 05:42:05.902
I'm going to go over two simple 
APIs.  There are many APIs that 

05:42:06.209 --> 05:42:10.170
help handle a lot of these input
methods and things such as mouse

05:42:10.171 --> 05:42:13.413
scrolling and things and there 
will be resources when the 

05:42:13.414 --> 05:42:17.192
slides get posted.  
Right-clicking, which is one of 

05:42:17.617 --> 05:42:22.396
the feature blocks, is super 
easy.  You make sure you're exes

05:42:24.075 --> 05:42:28.955
posing whatever behavior you 
have on long-press.  Again, also

05:42:29.786 --> 05:42:34.268
hopefully considering any type 
of UX changes you need to make. 

05:42:34.703 --> 05:42:38.340
And setting a hover listening to
watch for the user's pointer 

05:42:38.620 --> 05:42:41.951
hovering over the item and out. 
Again, this is really the 

05:42:42.296 --> 05:42:46.298
biggest one we see that will 
lead to misfunctionality or 

05:42:46.816 --> 05:42:49.767
really give you the desktop 
native feel or even kind of the 

05:42:50.149 --> 05:42:55.962
large-screen native feel.  
In terms of hovering, most of 

05:42:56.823 --> 05:43:01.487
our native components do handle 
this. The contrast and change 

05:43:01.879 --> 05:43:06.089
may not be enough for you or 
your users or especially 

05:43:08.533 --> 05:43:12.122
accessibility things like that. 
At the end of the day, though, 

05:43:12.123 --> 05:43:17.542
you know how your users use the 
app and you know the product so,

05:43:17.901 --> 05:43:23.729
you know, take some time and use
your app on different platforms 

05:43:24.241 --> 05:43:29.873
and think about how you'd expect
the app to behave.  It might not

05:43:29.874 --> 05:43:35.735
need to focus on mouse input or 
keyboard input.  Where a 

05:43:36.178 --> 05:43:39.034
productivity app is going to 
take advantage of the screen 

05:43:39.673 --> 05:43:45.347
real estate and find a way for 
users to do what they want to.  

05:43:45.720 --> 05:43:52.811
Talking about window management.
This is the biggest area we see

05:43:58.965 --> 05:44:03.347
challenges.  I love rotation 
because I see so many apps that 

05:44:03.348 --> 05:44:07.594
lock to portrait, which is 
completely understandbable but 

05:44:07.871 --> 05:44:13.459
it really shows where the 
experience falls.  If you do 

05:44:14.620 --> 05:44:18.490
lock portrait on Chrome OS, this
is what your app will look like.

05:44:18.884 --> 05:44:23.573
You'll get these super black 
bars on the side and it's wasted

05:44:26.839 --> 05:44:36.644
screen real estate.  It gives a 
non-native [no audio]. 

05:44:36.645 --> 05:44:41.194
Now, why do we -- to run away 
from handleing configuration 

05:44:41.195 --> 05:44:46.296
changes because they've always 
been rather difficult to deal 

05:44:46.297 --> 05:44:51.797
with.  Configuration changes are
more important than ever.  

05:44:51.798 --> 05:44:55.749
Resizing and multi-window brings
a lot of new configuration 

05:44:56.032 --> 05:45:01.872
change paradigms and challenges.
Chrome OS is probomy one of the 

05:45:01.873 --> 05:45:05.294
most complex of the resizing 
strategies because it does 

05:45:06.468 --> 05:45:08.929
trigger configuration changes 
pretty frequently.  I know some 

05:45:10.526 --> 05:45:12.953
of the other desktop platforms 
don't cause as many 

05:45:12.954 --> 05:45:17.576
configuration changes.  On top 
of that, with bigger screens, 

05:45:18.468 --> 05:45:20.468
multi-window is going to be used

05:45:22.771 --> 05:45:29.279
much more frequently.  
This is a quick thing about how 

05:45:29.814 --> 05:45:32.733
resizing on Chrome OS works.  
Anytime one of those labels 

05:45:33.022 --> 05:45:35.944
changes, it's going through a 
complete destroy and rebuild 

05:45:36.112 --> 05:45:40.039
process.  So you can imagine 
that this can get triggered 

05:45:40.753 --> 05:45:43.092
substantially faster and

05:45:46.466 --> 05:45:49.109
substantially more often than on
a phone.  

05:45:49.110 --> 05:45:53.327
Jetpack helps with this.  The 
things like ViewModel and being 

05:45:53.672 --> 05:46:00.003
able to build your own 
components allows you to take 

05:46:00.441 --> 05:46:03.914
your business logic in your 
activity, anything you're doing 

05:46:04.214 --> 05:46:09.079
to save state so your activity 
destroy and rebuild process is 

05:46:09.308 --> 05:46:12.429
really quick.  
Your app will not always be in 

05:46:13.073 --> 05:46:18.815
focus.  Again, this isn't new.  
With Android N, we brought 

05:46:20.412 --> 05:46:23.552
multi-window.  I know most of us
that work with a large monitor 

05:46:23.891 --> 05:46:27.196
have multiple things up at once 
and you need to make sure that 

05:46:27.828 --> 05:46:31.243
your content is visible and 
playing.  So make sure that 

05:46:31.513 --> 05:46:33.513
you're still displaying

05:46:37.164 --> 05:46:40.255
messaging or your content 
continues to play.  

05:46:40.256 --> 05:46:46.112
Take advantage of the features. 
Larger screens and external 

05:46:46.414 --> 05:46:48.810
monitors bring new 
possibilities.  One of the 

05:46:49.334 --> 05:46:53.183
things we've seen some of the 
apps do, that really kind of 

05:46:53.184 --> 05:46:59.215
bring a better experience, is 
allowing -- email compose 

05:46:59.486 --> 05:47:02.975
windows or new documents being 
shown in different tasks so the 

05:47:03.230 --> 05:47:07.480
user can see their email, plus 
this new email they're creating 

05:47:07.481 --> 05:47:11.002
in a different window.  
Something that we released quite

05:47:11.199 --> 05:47:16.299
a bit ago, but is now being a 
lot more is drag and drop.  

05:47:16.300 --> 05:47:21.985
Again, these desktop platforms 
specifically, users expect drag 

05:47:24.631 --> 05:47:28.719
and drop to be a thing.  So, 
think about if drag and drop 

05:47:29.044 --> 05:47:33.428
kind of makes sense in your app 
and how you can kind of bring it

05:47:33.429 --> 05:47:36.475
to these platforms.  
And then not really window 

05:47:36.476 --> 05:47:40.668
management, but different 
features that are kind of new to

05:47:40.669 --> 05:47:44.992
these ecosystems is different 
info capabilities and 

05:47:45.419 --> 05:47:49.472
specifically, like, increased 
stylus usage.  The biggest thing

05:47:49.784 --> 05:47:53.540
that we've seen that users have 
loved is the ability to have 

05:47:53.882 --> 05:48:00.020
keyboard shortcuts and keyboard 
navigation so if there are 

05:48:00.021 --> 05:48:04.581
things they use often, they are 
able to do things faster, get in

05:48:04.791 --> 05:48:08.378
and out of the app and get it 
done as quick as possible.  

05:48:08.379 --> 05:48:12.317
So, this is great and all but 
how do we actually build for 

05:48:12.318 --> 05:48:16.030
this?  Moving on to tooling, you
know, it would be awful if I 

05:48:16.031 --> 05:48:19.026
came up here and talked about, 
you should do all these things 

05:48:19.027 --> 05:48:22.632
yet there are no tools to make 
this possible.  Most of the 

05:48:23.080 --> 05:48:29.482
tooling devices that we do -- 
tooling examples we do have are 

05:48:30.174 --> 05:48:34.946
around Chrome OS.  A, it's our 
platform and, B, it's the 

05:48:35.253 --> 05:48:40.529
platform we have.  Most devices 
ship with a keyboard intrack.  

05:48:40.884 --> 05:48:45.369
Some don't have a touchscreen.  
So, it's kind of the best all in

05:48:46.048 --> 05:48:50.123
one platform to test on.  We're 
working on bringing some 

05:48:50.410 --> 05:48:55.329
integration around larger 
screens in Chrome OS.  Lint 

05:48:55.566 --> 05:48:59.634
additions are coming soon.  It's
my job, once this event's over, 

05:49:00.602 --> 05:49:03.518
to finish this.  We're look ing 
at more things we can bring to 

05:49:03.519 --> 05:49:06.518
the ide.  It's great to have 
devices you can test on, but we 

05:49:06.838 --> 05:49:09.474
want to be able to give quicker 
feedback and things to look for 

05:49:09.979 --> 05:49:13.520
while you're actually developing
in the ide.  So if you have 

05:49:14.049 --> 05:49:18.175
ideas, please come let me know. 
There's a Chrome OS emulator 

05:49:19.384 --> 05:49:23.195
that's currently in preview.  If
you don't have devices, you can 

05:49:23.505 --> 05:49:26.466
download the emulator and start 
to see where your app falls 

05:49:27.006 --> 05:49:31.654
apart.  Things that don't work. 
Things that crash.  You know, et

05:49:31.941 --> 05:49:35.521
cetera.  
One of the biggest complaints 

05:49:35.824 --> 05:49:39.376
for developer for Chrome OS and 
testing has been having to use 

05:49:39.790 --> 05:49:47.381
ADB over WiFi and development 
cycle's been crappy.  On the HP 

05:49:47.811 --> 05:49:53.868
Chromebook and Pixelbook, you 
can bring the devices into the 

05:49:54.961 --> 05:49:58.816
same development cycle you do 
with phones.  We hope to bring 

05:49:59.133 --> 05:50:02.790
more and more -- more and more 
devices to this feature.  

05:50:02.791 --> 05:50:07.444
But the easiest way, really, is 
just to run Android Studio on 

05:50:07.709 --> 05:50:11.426
Chrome OS.  This is available on
the Pixelbook on preview and 

05:50:11.839 --> 05:50:17.815
we're hoping to bring it to more
devices thin future. This is on 

05:50:18.787 --> 05:50:23.937
the Android Chrome OS table.  To
be able to build the app and 

05:50:24.371 --> 05:50:26.863
deploy directly to the device 
makes the whole

05:50:30.452 --> 05:50:32.514
development cycle substantially 
easier and faster. 

05:50:32.515 --> 05:50:36.795
There's more and more platforms 
that are running APKs, whether 

05:50:37.505 --> 05:50:40.950
they're different flavors or 
mobile APK.  So make sure your 

05:50:41.394 --> 05:50:44.699
app is, too.  
Thank you.  Again, please ask 

05:50:45.172 --> 05:50:49.289
any questions, any suggestions 
that you have for tooling, any 

05:50:49.568 --> 05:50:52.822
things you've ran into when 
trying to develop for larger 

05:50:52.823 --> 05:50:56.724
screen platforms, I would love 
to hear about so that we can 

05:50:57.000 --> 05:50:59.551
tackle this.  Thank you.

05:51:03.253 --> 05:51:05.029
[Applause]
  All right.  So, I just want to

05:51:05.030 --> 05:51:11.113
let everyone know.  It is 
currently snack time.  So, we 

05:51:11.301 --> 05:51:14.531
have snacks [no 

06:29:18.058 --> 06:29:18.667
audio]
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.668
. 
. 

06:29:18.668 --> 06:29:19.729
. 
. 

06:29:19.730 --> 06:29:21.730
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:24.047
. 
. 

06:29:23.047 --> 06:29:25.047
. 

06:29:29.056 --> 06:29:31.056
. 

06:29:33.500 --> 06:29:35.500
. 

06:29:38.327 --> 06:29:40.327
. 

06:29:43.694 --> 06:29:45.694
. 

06:29:49.037 --> 06:29:51.037
. 

06:29:52.158 --> 06:29:54.780
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:55.781
. 
. 

06:29:54.781 --> 06:29:56.781
. 
. 

06:29:59.955 --> 06:30:01.955
. 

06:30:05.136 --> 06:30:07.136
. 

06:30:10.421 --> 06:30:12.421
. 

06:30:15.563 --> 06:30:17.563
. 

06:30:20.820 --> 06:30:22.820
. 

06:30:26.001 --> 06:30:28.001
. 

06:30:31.207 --> 06:30:33.207
. 

06:30:36.303 --> 06:30:38.303
. 

06:30:41.689 --> 06:30:43.689
. 

06:30:46.759 --> 06:30:48.759
. 

06:30:52.022 --> 06:30:54.022
. 

06:30:57.173 --> 06:30:59.173
. 

06:31:02.378 --> 06:31:04.378
. 

06:31:07.683 --> 06:31:09.683
. 

06:31:12.767 --> 06:31:14.767
. 

06:31:17.972 --> 06:31:19.972
. 

06:31:23.229 --> 06:31:25.229
. 

06:31:28.437 --> 06:31:30.437
. 

06:31:33.655 --> 06:31:35.655
. 

06:31:38.855 --> 06:31:40.855
. 

06:31:44.070 --> 06:31:46.070
. 

06:31:49.276 --> 06:31:51.276
. 

06:31:54.368 --> 06:31:56.368
. 

06:31:59.596 --> 06:32:01.596
. 

06:32:04.815 --> 06:32:06.815
. 

06:32:10.007 --> 06:32:12.007
. 

06:32:15.185 --> 06:32:17.185
. 

06:32:20.436 --> 06:32:22.436
. 

06:32:32.907 --> 06:32:34.907
. 

06:37:44.201 --> 06:37:49.296
All you have to do is use the 
right plugin.  You have the base

06:37:49.546 --> 06:37:53.470
function and then you apply the 
application plugin, which you 

06:37:54.255 --> 06:38:00.165
have used for years.  You can 
apply the dynamic feature.  Now,

06:38:00.166 --> 06:38:04.369
we have to declare a special 
dependency from the base module 

06:38:04.370 --> 06:38:07.564
to all of the different feature 
and I will explain to you later 

06:38:08.686 --> 06:38:11.875
why this is necessary.  
Obviously, you have a dependency

06:38:12.095 --> 06:38:15.597
from the module to the base, but
you need to make dependency from

06:38:15.863 --> 06:38:23.738
the base to the futures.  So, as
an example here, we've got the

06:38:33.891 --> 06:38:38.924
flow.  You have a base module 
and three modules.  Nothing too 

06:38:39.221 --> 06:38:42.465
specific.  It depends on the 
base.  

06:38:42.466 --> 06:38:49.318
Now, by adding the DSL 
declaration, we're declaring 

06:38:49.713 --> 06:38:56.196
that the module A, B And c are 
future models.  We have this 

06:38:57.707 --> 06:39:01.909
dependency going both ways.  
So, when we go through the build

06:39:01.910 --> 06:39:07.129
flow, the first thing that we do
is that we build normally all 

06:39:07.130 --> 06:39:12.264
the files into classes.  That's 
normal.  That's the normal 

06:39:12.925 --> 06:39:16.724
process that we go through when 
we build each of these different

06:39:18.432 --> 06:39:22.984
modules.  The thing that really 
starts to differ is we are 

06:39:24.346 --> 06:39:29.202
publishing back all of this job 
files back to the main module 

06:39:29.203 --> 06:39:32.054
and that's absolutely module 
because you need to have a 

06:39:32.328 --> 06:39:35.326
global view of the application. 
You can't do a shrinking on the 

06:39:35.685 --> 06:39:37.685
future module because you will 

06:39:40.269 --> 06:39:43.156
not know how and what the class 
is. 

06:39:43.157 --> 06:39:47.905
So, once you have those 
published to the basis, you can 

06:39:48.919 --> 06:39:55.421
feed it to the shrinker and it 
will create equivalent text 

06:39:55.769 --> 06:40:04.153
files.  There is a one-to-one 
method.  But, it's not exactly a

06:40:04.154 --> 06:40:08.636
1:1.  Let's say you had classes 
that were in your base module 

06:40:08.911 --> 06:40:16.087
that you thought would be shared
by different features but used 

06:40:16.784 --> 06:40:20.682
used by module B, but the 
splitter can move that instead 

06:40:21.612 --> 06:40:26.216
of keeping them inside the main 
dexter jar of the main module.  

06:40:27.368 --> 06:40:32.465
Otherwise, you can more or less 
imagine there's a 1:1.  You have

06:40:33.111 --> 06:40:37.052
all these text files still 
residing in the base module, now

06:40:37.432 --> 06:40:39.460
they're going to flow back into 
the 

06:40:42.672 --> 06:40:47.278
originated module.  We do that 
so we can have -- as you can 

06:40:47.279 --> 06:40:50.878
see, at the beginning, we 

06:40:54.438 --> 06:40:58.692
had compilation, it was 
paralyzed.  If you have a 

06:40:59.505 --> 06:41:03.471
powerful machine, they run in 
parallel and it becomes a 

06:41:03.866 --> 06:41:09.058
bottleneck because it has to 
wait for all the modules to be 

06:41:09.371 --> 06:41:11.924
ready to do the shrinking and 
then we can move back the 

06:41:12.369 --> 06:41:14.379
processing to each of the same 
modules.  

06:41:14.380 --> 06:41:19.196
So, you can see that adding 
modularity to your application 

06:41:19.686 --> 06:41:23.431
might be a good self-practice.  
We're going to get much faster 

06:41:23.432 --> 06:41:30.442
of a time.  We move as much as 
we can and we can run all of 

06:41:31.242 --> 06:41:34.314
those in parallel as much as 
possible.  

06:41:34.315 --> 06:41:39.137
Once this is done in parallel --
one this is pushed back to each 

06:41:41.346 --> 06:41:47.710
feature module, we can 
eventually create all the 

06:41:48.522 --> 06:41:53.150
necessarily APKs or artifacts.  
All of those, again, are in 

06:41:53.674 --> 06:41:58.853
parallel.  The shrinker is 
usually not a problem because --

06:41:58.854 --> 06:42:06.068
not a problem because usually 
people do not use shrinker 

06:42:06.272 --> 06:42:09.852
during the builds.  But we 
really try to limit this 

06:42:10.748 --> 06:42:15.194
bottlenecks as much as we can 
and how we have enhanced the 

06:42:16.103 --> 06:42:21.847
processing with this type of 
improvements. 

06:42:21.848 --> 06:42:28.981
Another thing that we did was 
D8, that's a new JVM bind codes 

06:42:29.940 --> 06:42:35.091
translator.  We will essentially
remove the old one, which is DX.

06:42:35.588 --> 06:42:40.206
If you are using DX, you need to
start panicking because we are 

06:42:40.207 --> 06:42:44.683
going to remove it.  So if you 
are using DX because you issues 

06:42:46.648 --> 06:42:52.586
with D8, you must follow through
to figure what's wrong.  

06:42:52.587 --> 06:42:58.115
Otherwise you're going to get 
stuck in the past.  R8 is going 

06:42:58.541 --> 06:43:03.011
to follow the path.  It's 
available now to try.  We are 

06:43:03.012 --> 06:43:07.209
very happy with the results we 
are getting so far, so it's very

06:43:07.210 --> 06:43:10.998
stable.  You should definitely 
try it.  Eventually it'll become

06:43:11.271 --> 06:43:14.486
stable and you can guess what's 
going to happen to the old code 

06:43:15.355 --> 06:43:19.734
shrinker, eventually we will 
remove it and replace it with 

06:43:20.044 --> 06:43:23.032
R8.  There is a session tomorrow
that will give you more 

06:43:23.406 --> 06:43:26.568
technical details about how 
these two libraries are 

06:43:26.846 --> 06:43:31.105
implemented.  
Okay.  Let's talk a little bit 

06:43:31.842 --> 06:43:38.126
about what's next in 3.3.  So, 
the first thing I want to talk 

06:43:38.392 --> 06:43:42.791
about is tasks.  The concept of 
task -- lazy task is -- you 

06:43:43.174 --> 06:43:48.520
should really understand it as a
task that will only get 

06:43:48.801 --> 06:43:58.646
initialized if it's on thee 
excuse. You've got two variant. 

06:43:58.975 --> 06:44:08.858
If you debug, there's no need to
initialize the task.  So, what 

06:44:08.859 --> 06:44:12.770
we used to do, unfortunately -- 
so this was done before in this 

06:44:13.182 --> 06:44:15.753
particular example where we used
to create all the tasks.  We 

06:44:16.026 --> 06:44:19.260
still have to do that.  But add 
the creation time, we're also 

06:44:19.761 --> 06:44:21.761
configuring them.  So we're 

06:44:24.919 --> 06:44:34.226
configuring all of them.  
With task, we have the tool to 

06:44:34.513 --> 06:44:41.757
delay of the initialization 
until it knows that those tangs 

06:44:41.758 --> 06:44:46.005
with executed.  What it means is
that it's going to be up-to-date

06:44:47.070 --> 06:44:51.642
checked.  Meaning, it's going to
look if the task needs to run or

06:44:51.643 --> 06:44:59.620
not by running its up-to-date 
checks.  Maybe executed if it's 

06:44:59.621 --> 06:45:05.036
out of date.  
So, how to you do lazy tasks?  

06:45:06.310 --> 06:45:10.879
It's basically similar to the 
old style, but you can see that 

06:45:11.117 --> 06:45:15.927
now the configuration code, 
which is in blue here, will only

06:45:16.476 --> 06:45:20.261
be called if the task is on the 
execution task graph.  Now we 

06:45:20.544 --> 06:45:25.662
used to pay a lot of attention 
to all of our configuration 

06:45:25.663 --> 06:45:28.927
tasks, to make this 
configuration block as lean as 

06:45:29.185 --> 06:45:35.148
possible because they were 
always executed.  So we tried to

06:45:35.313 --> 06:45:39.373
keep it as lean as possible with
no access to disk, no access to 

06:45:39.733 --> 06:45:43.289
network, for instance.  
Now, it's probably a little bit 

06:45:43.290 --> 06:45:47.929
more okay to do more work in 
those configuration if you 

06:45:48.182 --> 06:45:53.777
really have to, but you have to 
remember two things.  First, if 

06:45:54.222 --> 06:45:58.314
you do real work, it will still 
impact your build time because 

06:46:00.473 --> 06:46:03.358
the configuration time is still 
a thread event.  All of the 

06:46:03.359 --> 06:46:06.701
configuration will happen the 
one after the other.  The more 

06:46:06.702 --> 06:46:12.686
you do, the longer it will take.
Configuration time happens all 

06:46:12.976 --> 06:46:19.307
the time.  It's very anowing.  
The second thing is to not look 

06:46:19.623 --> 06:46:25.340
up tasks anymore.  So when you 
have customization -- a lot of 

06:46:25.936 --> 06:46:28.867
people are doing project, get 
task by name.  Stuff like that. 

06:46:29.139 --> 06:46:37.418
This will actually look up the 
task and  and initialize it. It 

06:46:37.689 --> 06:46:40.548
will do that and all the 
dependancies as well, all the 

06:46:41.064 --> 06:46:44.626
tasks and output so you 
basically have a good chance of 

06:46:44.965 --> 06:46:49.049
initializing it.  Instead of 
doing that, you should get a 

06:46:49.395 --> 06:46:54.600
provider and get a lazy object 
of the task itself and use that 

06:46:54.601 --> 06:46:58.058
to register your dependency.  
Now, what you can also do, if 

06:46:58.059 --> 06:47:03.071
you want to have access to the 
output of a task, is use that 

06:47:03.894 --> 06:47:08.007
provider and map the output 
using the start of API to get 

06:47:08.199 --> 06:47:11.828
provider so it's basically a 
promise on the folder or a 

06:47:12.232 --> 06:47:18.671
promise of a regular file that 
the task that executes will give

06:47:18.843 --> 06:47:26.618
you it later.  You can get an 
object, that object does not 

06:47:27.029 --> 06:47:30.599
initial ize the task itself.  
Getting this provider does not 

06:47:31.911 --> 06:47:35.122
initialize the task, does not 
force it to run and it's really 

06:47:35.392 --> 06:47:38.469
lazy.  It contains dependency 
and information which means you 

06:47:38.470 --> 06:47:42.930
don't have to register yourself 
as a dependence of the task.  

06:47:42.931 --> 06:47:47.309
Holding the object will allow 
you to not only get the object, 

06:47:47.310 --> 06:47:54.136
but also register your 
dependency. Eventually, you can 

06:47:54.137 --> 06:47:57.357
do a get and that will get you 
the object you can use.  

06:47:57.358 --> 06:48:02.657
So, here when it is getting 
configured, all the dependancy 

06:48:02.658 --> 06:48:07.649
will get configured and so on 
and so forth.  We are 

06:48:08.270 --> 06:48:11.392
retrofitting all of our tasks 
using providers and stuff like 

06:48:11.710 --> 06:48:17.099
that.  If you use customization 
a lot, you need to look into 

06:48:17.318 --> 06:48:21.285
these APIs in 3.3.  
And now Chris will talk about 

06:48:22.289 --> 06:48:29.400
other improvements we have made.
  Yes.  Another optimization is 

06:48:32.248 --> 06:48:37.210
classes.  Previously, for every 
single dependency and every 

06:48:37.516 --> 06:48:41.753
subject, and alongside your 
actual classes.  It just 

06:48:41.754 --> 06:48:46.173
generates a jar containing the 
class directly.  And especially 

06:48:46.174 --> 06:48:51.358
for those with many libraries 
and lots of dependencys, this 

06:48:51.762 --> 06:48:58.104
avoided a lot of compilation.  
For large multi-modal builds, we

06:48:58.105 --> 06:49:03.362
saw a large percentage of 
speed-ups.  

06:49:03.363 --> 06:49:12.903
So the class system has been 
rewritten.  Rather than relying 

06:49:14.308 --> 06:49:17.756
on the ones on disk.  It 
actually speeds up indexing in 

06:49:18.037 --> 06:49:24.210
Android Studio, as well.  Even 
for older Gradle plugins.  This 

06:49:25.015 --> 06:49:33.514
does, however, break some Gradle
plugins, including Butter Knife.

06:49:33.870 --> 06:49:43.650
It is in library device in 3.3. 
Gradle now has supports

06:49:46.617 --> 06:49:51.147
for annotation processing.  
We're working to support the 

06:49:51.148 --> 06:49:57.847
most popular annotation 
processes, including dagger, 

06:49:58.120 --> 06:50:02.383
Room, Gride.  
And to allow to be an isolated 

06:50:03.355 --> 06:50:07.359
annotation processor, speeding 
it up even more.  We also want 

06:50:07.725 --> 06:50:10.588
to help you understand that 
build time impact of annotation 

06:50:10.903 --> 06:50:15.092
processes.  We want to report to
you, like, which -- time spent 

06:50:15.487 --> 06:50:20.303
in and how much did they cost?  
On that theme, there are several

06:50:21.085 --> 06:50:26.104
other areas we want to give you 
better insight into your build, 

06:50:26.392 --> 06:50:30.974
easily and simply.  If you're 
using annotation processes, it's

06:50:31.278 --> 06:50:34.391
really critical you have that 
insight because it's often a 

06:50:35.182 --> 06:50:39.522
bottleneck for a lot of builds 
we see.  When a task causes you 

06:50:39.791 --> 06:50:43.188
trouble, it's great to know the 
Gradle plugin or the script and 

06:50:43.605 --> 06:50:48.173
what triggered it to run.  And 
we're working to make finding 

06:50:48.174 --> 06:50:50.759
that out more easily.  
We also want to help you find 

06:50:50.760 --> 06:50:55.421
these types of issues, even if 
you're not actively looking for 

06:50:56.461 --> 06:50:58.461
them.  Longer-term,

06:50:59.712 --> 06:51:04.734
we want Android Studio to flag 
if there is an issue and point 

06:51:04.735 --> 06:51:11.649
you toward the greater build 
scan.  

06:51:11.650 --> 06:51:17.129
Okay.  So, on from these better 
insights to complete rewrites.  

06:51:17.566 --> 06:51:21.639
Android resource namespacing.  
Resource namespacing is a 

06:51:21.912 --> 06:51:25.066
completely new pipeline for 
compiling and linking Android 

06:51:26.188 --> 06:51:31.587
resources.  We're doing this for
two reasons.  Firstly, speed up 

06:51:31.881 --> 06:51:34.835
the build and make it easier to 
understand and we want better 

06:51:35.134 --> 06:51:41.768
support dynamic features.  
Looking at how thingessess work 

06:51:42.244 --> 06:51:48.883
now, there are two namespaces.  
That means if you have two 

06:51:49.163 --> 06:51:52.182
libraries, the same name and the
same type, they have to pick one

06:51:52.476 --> 06:51:59.181
and it's not always clear what 
the right thing to do is.  It 

06:51:59.788 --> 06:52:07.883
makes splitting your APK much 
more difficult.  Where those 

06:52:09.267 --> 06:52:12.566
resources come from and where 
they go is really important.  

06:52:13.424 --> 06:52:17.602
Each library is compiled and 
linked separately and then 

06:52:18.785 --> 06:52:23.946
linked together in the final 
APK.  When you're using 

06:52:24.704 --> 06:52:29.161
resources from both XML and 
Java, you need to be explicit 

06:52:29.641 --> 06:52:33.370
about where they came from.  If 
they're in the library that 

06:52:33.784 --> 06:52:38.998
defined it, the next XML, you 
need to use the name space.  

06:52:40.248 --> 06:52:44.056
This also means they no longer 
override each other just because

06:52:44.369 --> 06:52:47.567
they have the same name.  When 
you need overrides, we're 

06:52:47.860 --> 06:52:52.453
working on a new way to do that 
explicitly.  

06:52:52.454 --> 06:52:57.641
ARs will be backwards compatible
so you can have all the benefits

06:52:59.302 --> 06:53:04.702
of namespacing.  
Okay.  Passing on to Izabela to 

06:53:04.703 --> 06:53:09.232
tell you a little bit more about
the details.

06:53:09.233 --> 06:53:17.497
Thank you.  Now that we know 
what namespacing is, you might 

06:53:17.772 --> 06:53:20.300
find yourself asking your 
questions like, where is that 

06:53:20.301 --> 06:53:24.819
resource coming from or what is 
the proper syntax?  Or, how do I

06:53:25.339 --> 06:53:29.077
even namespace my dependancies? 
The answer to all these 

06:53:29.311 --> 06:53:34.741
questions is, we'll fix it for 
you.

06:53:34.742 --> 06:53:39.241
[Laughter]
So, yes, so the solution is 

06:53:39.637 --> 06:53:44.532
automatic namespacing or auto 
namespacing for sure.  First is 

06:53:44.533 --> 06:53:51.621
the oughtmotic rewriting tool in
the ideal.  And the second one 

06:53:52.086 --> 06:53:58.372
are the transforms and tasks in 
the Gradle plugin that will 

06:53:58.895 --> 06:54:01.873
rewrite your remote 
dependancies, under the hood, no

06:54:02.984 --> 06:54:05.572
action required.  
Here is an example of a 

06:54:06.383 --> 06:54:09.598
dependency graph.  The blue 
nodes are local modules that can

06:54:09.868 --> 06:54:15.628
be rewritten using the ide tool.
The three orange nodes are not 

06:54:17.295 --> 06:54:20.978
namespaced, classic remote 
libraries that will be 

06:54:21.362 --> 06:54:24.801
automatically rewritten.  All 
the resources, classes, the 

06:54:25.041 --> 06:54:28.462
manifests will be rewritten to 
use the full resource namespace.

06:54:29.017 --> 06:54:34.642
And finally, the green nodes are
-- they represent dependancies 

06:54:34.643 --> 06:54:39.753
that are already namespaced so 
they will not be modified at 

06:54:39.948 --> 06:54:42.242
all.  
Let's see what types of changes 

06:54:42.608 --> 06:54:48.143
we can see after this migration 
takes place.  In the bytecode, 

06:54:48.429 --> 06:54:52.733
you can see that now there will 
be different classes present.  

06:54:52.734 --> 06:54:55.817
If a resource was defined in a 
different module or remote 

06:54:56.181 --> 06:55:00.748
library, you'll see the package 
of the class change to match 

06:55:01.712 --> 06:55:03.712
that package.  In the

06:55:07.585 --> 06:55:14.042
On-Device  -- XML resources, 
you'll see it at the @ symbol.  

06:55:14.261 --> 06:55:19.205
And finally, another way 
resources can be referenced is 

06:55:19.206 --> 06:55:27.376
in attributes, for example, in 
layouts.  Here, it will be 

06:55:28.913 --> 06:55:31.662
modified to point and the 
attribute will use this new 

06:55:32.262 --> 06:55:36.579
namespace, as well.  Since we're
on the topic of resources, let's

06:55:37.770 --> 06:55:42.100
talk about visibility.  Probably
many of you created an Android 

06:55:43.250 --> 06:55:46.383
library with a lot of effort 
declaring which resources are 

06:55:46.680 --> 06:55:52.717
public and published this with a
.txt only for consumers to 

06:55:52.955 --> 06:55:55.928
ignore it.  This currently is 
only a Lint warning.  This code 

06:55:57.337 --> 06:56:01.080
compiles and runs fine at 
runtime, completely ignoring the

06:56:01.604 --> 06:56:06.257
intended visibility of the 
resource.  I'm sure many of you 

06:56:07.016 --> 06:56:09.959
actually ignored these warnings,
as well.  

06:56:09.960 --> 06:56:15.526
We want to introduce visibility.
So, these violations will now 

06:56:15.527 --> 06:56:21.058
become build errors instead so 
we'll catch them early and three

06:56:21.059 --> 06:56:24.655
levels of visibility.  One, 
public.  This means these 

06:56:25.169 --> 06:56:29.953
resources will be present both 
in the public classes and the 

06:56:30.382 --> 06:56:34.213
private classes for that local 
module.  

06:56:34.214 --> 06:56:40.502
Private resources, only present 
in private classes and last, 

06:56:41.088 --> 06:56:47.581
private XML-only resources. They
will not be present any classes 

06:56:47.582 --> 06:56:52.734
at all.  Instead, you can only 
reference them from other XML 

06:56:53.041 --> 06:56:57.884
files within that module.  
This will result in smaller 

06:56:58.156 --> 06:57:04.686
classes, both compile and 
runtime.  And, also, resource 

06:57:05.422 --> 06:57:08.863
similar to the class or

06:57:12.185 --> 06:57:16.928
method in Kotlin.
  Thank you.

06:57:16.929 --> 06:57:18.840
[Applause]
  All right.  So, as you can 

06:57:18.841 --> 06:57:24.031
see, we're working on a lot of 
things and many of which we hope

06:57:24.317 --> 06:57:27.031
would help build speed.  Going 
back to my point around 

06:57:27.372 --> 06:57:31.633
awareness and tooling, I wanted 
to share some things you can do 

06:57:31.940 --> 06:57:35.016
today to understand your build 
better and improve its 

06:57:35.387 --> 06:57:40.135
performances.  So, the first 
things is to upgrade.  My first 

06:57:40.443 --> 06:57:44.761
graph, we do improve with every 
release and so if you're really 

06:57:44.762 --> 06:57:50.253
-- care about your build speed, 
the best thing to do is upgrade 

06:57:50.254 --> 06:57:57.049
to the latest beta, stable, 
Canary, whatever you feel 

06:57:58.387 --> 06:58:00.545
comfortable with. 
There are some tools you can 

06:58:00.828 --> 06:58:03.256
start leverages to 
better-understand your builds.  

06:58:05.399 --> 06:58:12.131
One that I really like is a free
tool from Gradle.  It implodes 

06:58:12.393 --> 06:58:20.972
some of your data into Gradle 
servers and provides dashboards.

06:58:21.524 --> 06:58:23.913
If you're trying to understand 
what's going on with your build,

06:58:23.914 --> 06:58:31.679
why is it slow, this is a very, 
very useful resource to use.  

06:58:32.919 --> 06:58:34.933
If sharing some of your build

06:58:39.442 --> 06:58:45.324
data with Gradle is something 
you don't feel comfortable with,

06:58:50.479 --> 06:58:53.178
there's--profile.  Definitely 
not as rich, but it provides 

06:58:53.518 --> 06:58:58.338
some information and it remains 
local.  You can combine it 

06:59:00.506 --> 06:59:03.554
with--info which gives you 
information on a given task. 

06:59:09.436 --> 06:59:13.038
 Another tip is file bug.  We 
try to test all of our releases 

06:59:13.039 --> 06:59:18.818
on any environment and use cases
we can, but there's aways 

06:59:20.157 --> 06:59:22.831
different configurations out 
there.  Please file bugs when 

06:59:22.832 --> 06:59:28.577
you encounter issues.  Please 
include a scan with it.  It 

06:59:28.984 --> 06:59:34.169
really helps us go deeper into 
the issue and understand what's 

06:59:34.170 --> 06:59:38.148
going on.  
Last, but not least, if you're 

06:59:39.135 --> 06:59:42.827
writing plugins, whether it's 
for you to publish them or 

06:59:44.106 --> 06:59:47.326
customize a little bit, your 
build file, here's a set of tips

06:59:48.075 --> 06:59:54.409
to follow.  So, first, as Jerome
eluded to, it is to set up 

06:59:54.410 --> 06:59:59.086
tasks, not really do anything 
else.  Remember, if you need to 

06:59:59.429 --> 07:00:02.826
compute things for up-to-date 
checks, you can always use 

07:00:04.004 --> 07:00:07.371
provider and suppliers to always
run those checks if your task is

07:00:07.372 --> 07:00:13.493
part of the active graph.  
For example, in configuration, 

07:00:14.029 --> 07:00:17.697
you should not do things like 
query get, read a file, search 

07:00:17.943 --> 07:00:21.276
for a connected device or 
compute anything.  Configuration

07:00:21.579 --> 07:00:26.914
is really just a place to set up
tasks.  And it's a place to set 

07:00:27.342 --> 07:00:30.953
up all tasks.  Because build 
doesn't really know what pass is

07:00:31.244 --> 07:00:35.206
going to take in events so try 
to set up all of your tasks in 

07:00:36.103 --> 07:00:41.402
the configuration step.  
Regarding task s, make sure that

07:00:41.601 --> 07:00:46.917
each task's declared all input 
and outputs, even if it's 

07:00:46.918 --> 07:00:50.624
non-file one and make sure 
they're incremental and 

07:00:50.882 --> 07:00:53.220
cacheable.  
If your were working with a 

07:00:53.700 --> 07:00:58.344
complex step, try to split it 
into multiple tasks.  This helps

07:00:58.763 --> 07:01:03.772
with the incrementtality because
some tasks could be up-to-date. 

07:01:04.333 --> 07:01:09.501
If you have multiple tasks, they
could run in parallel.  So it 

07:01:09.788 --> 07:01:13.270
helps with incrementality and 
parallelism.  

07:01:13.271 --> 07:01:17.271
This third best-practice sounds 
obviously, but I still want to 

07:01:18.225 --> 07:01:21.821
put it out there.  Make sure 
they don't write into or delete 

07:01:22.915 --> 07:01:29.496
any other task output.  
When you write tasks, use Java 

07:01:29.497 --> 07:01:36.703
and Kotlin.  And put them in a 
plugin/folder.  

07:01:36.704 --> 07:01:40.281
And last, but not least, as 
you've heard from Jerome, 

07:01:41.396 --> 07:01:46.500
leverage a new worker API -- no,
we didn't talk about this. 

07:01:46.501 --> 07:01:51.454
I did talk about stuff though.
  That really helps with 

07:01:51.775 --> 07:01:56.125
problems.  If you didn't get 
clear pictures of all of what I 

07:01:56.126 --> 07:01:59.674
just said, don't worry.  We're 
working on a full write-up 

07:02:00.128 --> 07:02:02.994
covering everything that we 
talked about around speed, 

07:02:04.376 --> 07:02:06.447
around the findings that I 
shared, the tooling and the best

07:02:07.063 --> 07:02:10.994
practices and more, so, stay 
tuned.  

07:02:10.995 --> 07:02:16.180
To recap, here's the takeaway 
from this session.  First, we 

07:02:16.962 --> 07:02:20.415
shared some finding on speed and
that basically a little bit 

07:02:20.416 --> 07:02:24.968
outpaced by some of the 
features, the plugins and all 

07:02:25.435 --> 07:02:28.778
the other things but we're 
taking this very seriously so 

07:02:29.155 --> 07:02:32.189
we're doubling-down or efforts 
on better tooling and 

07:02:32.474 --> 07:02:36.135
attribution and continuing to 
improve performances.  

07:02:36.136 --> 07:02:39.885
We share the new features in 3.2
and I definitely encourage you 

07:02:40.267 --> 07:02:43.297
to upgrade to 3.2, if you 
haven't already.  

07:02:43.298 --> 07:02:47.135
And we mentioned some of the 
things that were working for 3.3

07:02:48.090 --> 07:02:52.274
and beyond.  3.3 beta is 
available. So, I encourage you 

07:02:52.551 --> 07:02:55.951
to try it.  It has some of the 
things we mentioned, like lazy 

07:02:56.241 --> 07:03:01.828
tasks and others.  
And last, I talked about some of

07:03:01.829 --> 07:03:08.672
the tools that you can use -- --
profile. 

07:03:13.795 --> 07:03:18.790
That's it for today.  I want to 
make a bad joke, but unlike 

07:03:19.144 --> 07:03:24.161
build, we finished earlier than 
expected.  We're going to be out

07:03:24.162 --> 07:03:27.854
there with -- in the speaker Q&amp;A
or at the studio booths today 

07:03:28.402 --> 07:03:33.217
and tomorrow, if you have any 
questions.  

07:03:33.218 --> 07:03:35.218
So, thank you.

07:04:28.588 --> 07:04:28.864
[Applause]
[Applause]

07:04:28.865 --> 07:04:29.097
[Applause]
[Applause]

07:04:29.098 --> 07:04:29.839
[Applause]
[Applause]

07:04:29.840 --> 07:04:31.173
[Applause]
[Applause]

07:04:29.840 --> 07:04:31.173
[Applause]
[Applause]

07:04:29.840 --> 07:04:32.097
[Applause]
  Everyone, the next session, in

07:04:32.355 --> 07:04:40.587
this room, will begin at 4:50.  
Thank you, 

07:04:43.599 --> 07:04:45.599
everyone.  

07:16:19.607 --> 07:16:19.894
Thank you, everyone.  
Thank you, everyone.  

07:16:19.895 --> 07:16:20.159
Thank you, everyone.  
Thank you, everyone.  

07:16:20.160 --> 07:16:23.093
Thank you, everyone.  
Thank you, everyone.  

07:16:20.160 --> 07:16:23.093
Thank you, everyone.  
Thank you, everyone.  

07:16:20.160 --> 07:16:20.611
Thank you, everyone.  
Thank you, everyone.  

07:16:20.612 --> 07:16:23.545
Thank you, everyone.  
Thank you, everyone.  

07:16:20.612 --> 07:16:20.826
Thank you, everyone.  
Thank you, everyone.  

07:16:20.827 --> 07:16:23.760
Thank you, everyone.  
Thank you, everyone.  

07:16:20.827 --> 07:16:21.184
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:24.118
Thank you, everyone.  
Thank you, everyone.  

07:16:21.185 --> 07:16:23.621
Thank you, everyone.  
Thank you, everyone.  

07:16:23.622 --> 07:16:25.622
Thank you, everyone.  

07:16:28.005 --> 07:16:30.938
Thank you, everyone.  
Thank you, everyone.  

07:16:28.005 --> 07:16:30.938
Thank you, everyone.  
Thank you, everyone.  

07:16:28.005 --> 07:16:30.876
Thank you, everyone.  
Thank you, everyone.  

07:16:30.877 --> 07:16:32.877
Thank you, everyone.  
Thank you, everyone.  

07:16:36.052 --> 07:16:38.052
Thank you, everyone.  

07:16:39.100 --> 07:16:40.582
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:43.516
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:43.516
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:43.516
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:43.516
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:43.516
Thank you, everyone.  
Thank you, everyone.  

07:16:40.583 --> 07:16:42.901
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:45.835
Thank you, everyone.  
Thank you, everyone.  

07:16:42.902 --> 07:16:46.502
Thank you, everyone.  
  Welcome back, everyone.  As a 

07:16:42.902 --> 07:16:46.702
point of information, this 
session will get under way in 

07:16:42.902 --> 07:16:47.168
two minutes.  And we ask you, as
a courtesy to the presenters, to

07:16:42.902 --> 07:16:46.968
take a moment to silent your 
phones and digital devices.  We 

07:16:42.902 --> 07:16:47.168
thank everyone.  Come on in and 
be seated.  Our program will get

07:16:42.902 --> 07:16:44.902
under way in two minutes. 

07:18:59.471 --> 07:19:05.202
  Hello.  Good afternoon.  I'm 
super excited to be here and 

07:19:05.203 --> 07:19:08.533
today, we're going to be talking
about ConstraintLayout and how 

07:19:08.791 --> 07:19:15.769
to use the visual editor to 
effectively make constraints in 

07:19:16.003 --> 07:19:19.452
Android Studio.
  I'm Chris, UX designer and 

07:19:19.775 --> 07:19:23.592
I'll be talking about some of 
the new features we've added.

07:19:24.362 --> 07:19:27.196
  And I'm Sean McQuillan, 
developer advocate for Android. 

07:19:27.197 --> 07:19:31.275
After we talk about the basics 

07:19:34.978 --> 07:19:38.616
in 1.0-1.1, we'll talk about 
some of the constraints.  

07:19:38.617 --> 07:19:44.431
When I add a view to a 
ConstraintLayout in the editor, 

07:19:45.045 --> 07:19:49.621
I'll have one in the top, left, 
right and bottom.  If I go to 

07:19:50.614 --> 07:19:57.192
the view inspector, I'm going to
add a constraints to view.  In 

07:19:57.616 --> 07:20:02.592
ConstraintLayout, before I added
this constraints, it will lay it

07:20:03.443 --> 07:20:10.733
out somewhere in the screen.  
It's 30DP and I have 

07:20:10.734 --> 07:20:13.654
fully-constrained this view and 
now ConstraintLayout knows how 

07:20:13.997 --> 07:20:17.351
to solve where this goes.  We'll
start with a simple example how 

07:20:17.352 --> 07:20:19.352
to build up more 

07:20:21.817 --> 07:20:25.232
complex examples of constraints.
I would change this to be

07:20:29.389 --> 07:20:32.818
50DP or add a constraint to the 
side.  

07:20:32.819 --> 07:20:37.158
If I add another to the bottom, 
I'm going to center this view on

07:20:38.293 --> 07:20:41.429
the entire ConstraintLayout and 
this trick is going to work 

07:20:41.776 --> 07:20:44.614
everywhere in ConstraintLayout. 
This is how you center a view 

07:20:44.892 --> 07:20:48.600
inside or on top of another 
view.  

07:20:48.601 --> 07:20:53.476
So, let's take a look at one 
more thing I can do.  So, if I 

07:20:53.746 --> 07:20:57.488
look at the slider that's over 
on the left.  It starts at 50 

07:20:57.489 --> 07:21:00.149
when I've constrained the top 
and bottom and I can change 

07:21:00.451 --> 07:21:06.524
that.  I can change it up to 25.
Instead of centering, it will 

07:21:07.485 --> 07:21:10.860
introduce the bias to the 
layout.  It's going to lay that 

07:21:11.096 --> 07:21:15.849
out 25% along the way, 75% along
the way and a horizontal slider,

07:21:16.153 --> 07:21:19.743
as well.  
So, let's dive in further into 

07:21:19.744 --> 07:21:24.263
this view inspector and take a 
look at what's available in the 

07:21:25.243 --> 07:21:30.786
special editor.  There's this 
triple chev going on.  John said

07:21:31.059 --> 07:21:34.660
it's because it's wrapped 
content and it's trying to pull 

07:21:35.244 --> 07:21:39.866
in as hard as it can from both 
sides.  I can change it to fixed

07:21:41.130 --> 07:21:43.130
width.  That's

07:21:44.893 --> 07:21:49.252
100DP.  So match constraints is 
a new feature, a new way to lay 

07:21:49.253 --> 07:21:53.558
out views.  Take out all of the 
views available. 

07:21:53.559 --> 07:21:57.675
I'm constrained off the right 
and the left so it's the same 

07:21:57.676 --> 07:22:01.185
thing as full parent.  This is 
how you would take up the whole 

07:22:01.186 --> 07:22:05.811
screen.  You wouldn't want to 
use full parent in 

07:22:05.977 --> 07:22:09.336
ConstraintLayout.  I get this 
really interesting icon here.  I

07:22:09.947 --> 07:22:13.641
thought this was a heartbeat, 
for the longest time.  I asked 

07:22:14.058 --> 07:22:17.897
John about this.  That's 
actually a spring and on some 

07:22:18.148 --> 07:22:22.629
versions of Android Studio, you 
get two springs and on others, 

07:22:22.630 --> 07:22:25.890
you get one.  
So, let's switch this back over 

07:22:26.439 --> 07:22:30.168
to wrap content and add another 
view so we can start building 

07:22:30.169 --> 07:22:33.848
more complex layouts.  I'm going
to add an image view and 

07:22:34.136 --> 07:22:36.136
constrain it so it's

07:22:39.343 --> 07:22:46.547
20DP.  It's going to move the 
image view so it's 20DP.  I'm 

07:22:46.548 --> 07:22:51.076
going to add another constraint 
and the image view is going to 

07:22:51.077 --> 07:22:56.083
center itself. 
We can do this on another view, 

07:22:56.477 --> 07:23:00.643
as well.  
Now, I want to change the width 

07:23:00.981 --> 07:23:05.117
of this view from wrap content 
to match constraints.  And this 

07:23:05.746 --> 07:23:08.618
time, instead of match 
constraints, it's going to take 

07:23:08.876 --> 07:23:14.006
the width of this text view, 
whatever size this text view, it

07:23:14.007 --> 07:23:18.722
will try to match that 
constraint and this new control 

07:23:19.009 --> 07:23:24.103
shows up.  This little line, it 
creates a little triangle.  I 

07:23:24.533 --> 07:23:27.647
enable an aspect ratio.  This is
a really nice feature, if you 

07:23:28.196 --> 07:23:34.622
want to display an image with an
aspect ratio.  Images, when we 

07:23:35.403 --> 07:23:43.114
get them from designers, they 
want 1-by-1.  You're laughing 

07:23:43.495 --> 07:23:48.514
because you're a designer.
  It's my fault.  Sorry.

07:23:48.515 --> 07:23:52.650
[Laughter]
  We can set up exactly what our

07:23:52.651 --> 07:23:57.874
designers want for and resize 
this view as the text changes 

07:23:58.442 --> 07:24:02.989
while maintaining this aspect 
ratio.  If I set it to 3:1, I 

07:24:02.990 --> 07:24:08.632
set one aspect ratio that says, 
I'd like to this to be one 

07:24:08.911 --> 07:24:12.740
constraint, 3:1.  And another 
saying this can be no wider than

07:24:13.548 --> 07:24:18.314
this text box.  ConstraintLayout
has to solve this and it will 

07:24:18.315 --> 07:24:22.215
use the contraints from the text
box.  

07:24:22.216 --> 07:24:26.107
I can free up another dimension.
So if I change the height to be 

07:24:27.216 --> 07:24:31.112
match constraints, it's capable 
of resizing both dimensions so 

07:24:31.499 --> 07:24:37.835
now it can set the 3:1 aspect 
ratio.  So, that's all we can do

07:24:37.836 --> 07:24:42.541
with just a single, you know 
element or two elements.  Let's 

07:24:42.750 --> 07:24:45.973
add more of a complex view and 
talk about how to lay things out

07:24:46.801 --> 07:24:49.610
with more features with 
ConstraintLayout.  

07:24:49.611 --> 07:24:59.198
My designer sent me this lovely 
email form.  This is talk about

07:24:59.613 --> 07:25:02.264
ConstraintLayout and not Login 
forms.  Don't copy this, there's

07:25:02.594 --> 07:25:07.210
many problems.  There's a couple
things going on.  The labels are

07:25:08.236 --> 07:25:12.414
right-aligned to some sort of 
invisible line.  The edit text 

07:25:12.842 --> 07:25:16.196
is left-aligned and the Login 
and new account button are 

07:25:16.519 --> 07:25:20.130
hanging off and there appears to
be a line.  

07:25:20.131 --> 07:25:27.616
And then at the same time, email
and password are vertically 

07:25:27.910 --> 07:25:30.656
centered on the screen.  How are
we going to lay out those, you 

07:25:30.657 --> 07:25:35.747
know, text views?  We have the 
email text and the email edit 

07:25:36.129 --> 07:25:43.009
text.  We could align the top of
the text view to the top.  That 

07:25:43.010 --> 07:25:47.126
would be incorrect.  If we look 
at font metrics, we have this 

07:25:47.419 --> 07:25:51.125
baseline at the bottom.  In 
English and most languages, 

07:25:51.456 --> 07:25:55.531
almost everything sits on and 
the ascender line and that 

07:25:55.924 --> 07:25:57.924
dashed line is the descends

07:26:06.232 --> 07:26:08.775
descender line.  
This creates a single line of 

07:26:08.776 --> 07:26:13.031
text for our eyes and allows us 
to read it as a cohairants unit 

07:26:13.612 --> 07:26:18.623
so we want to do that in 
ConstraintLayout.  I'm going to 

07:26:19.235 --> 07:26:24.984
get this control.  It looks like
this, I've enlarged it 

07:26:25.643 --> 07:26:28.856
substantially.  I get my 
favorite control.  It blinks in 

07:26:29.521 --> 07:26:33.538
the editor, I call it the 
green-glowing orb of baseline.  

07:26:33.539 --> 07:26:40.445
We can go to the edit text and 
drag from one baseline to the 

07:26:40.866 --> 07:26:43.621
other and create a constraint 
saying these text views should 

07:26:43.902 --> 07:26:46.786
have the same baseline.  And 
we'll do that for all the other 

07:26:47.358 --> 07:26:50.213
text views on the screen here in
order to set up all the baseline

07:26:51.189 --> 07:26:53.425
alignments.  
When you line up text next to 

07:26:53.665 --> 07:26:58.346
text, you almost always want to 
use the baseline.  That's the 

07:26:58.863 --> 07:27:01.939
correct way to do that in 
ConstraintLayout.  Let's put 

07:27:01.940 --> 07:27:07.164
that Login button on the screen.
It has to be constrained on the 

07:27:08.325 --> 07:27:11.603
left edit text.  How to do this 
centering, the email and 

07:27:12.113 --> 07:27:15.080
password is vertically centered 
on the screen.  How am I going 

07:27:15.081 --> 07:27:20.495
to do that?  We put a constraint
on both side of the screen and 

07:27:21.513 --> 07:27:25.860
centers.  I'll put it from email
to the top of the screen.  From 

07:27:26.611 --> 07:27:29.450
password from the bottom of the 
screen and so far, this makes 

07:27:29.830 --> 07:27:32.343
sense.  
Now, I guess I'm going to have 

07:27:32.777 --> 07:27:37.143
to add a constraint from 
password to email.  So, I'm 

07:27:37.144 --> 07:27:40.038
going to do that and this is 
going to center password between

07:27:40.354 --> 07:27:43.352
email and the bottom of the 
screen.  Let's pull email back 

07:27:44.367 --> 07:27:54.147
down with another constraint and
I'll solve this problem.  This 

07:27:55.060 --> 07:28:00.088
introduces a chain.  
Now of course, setting up all 

07:28:00.584 --> 07:28:04.263
the constraints is tedious.  You
can go into right-click on 

07:28:04.657 --> 07:28:07.996
center and choose vertically.  
When I have email and password 

07:28:08.274 --> 07:28:12.380
selected, it's going to set up 
all of the constraints that I 

07:28:12.656 --> 07:28:15.719
just talked about.  So, inside 
of a chain, there's actually 

07:28:15.720 --> 07:28:21.328
three different ways it can get 
laid out -- four, technically.  

07:28:21.583 --> 07:28:25.885
We have spread, which means 
evenly distribute everything.  

07:28:25.886 --> 07:28:29.708
Spread inside, which is 
basically the same thing except 

07:28:31.991 --> 07:28:37.226
the first and last elements get 
pushed to the side.  Then we 

07:28:37.518 --> 07:28:43.199
have pack.  We're going to use a
packed chain to center these 

07:28:43.200 --> 07:28:46.880
views together.  There's one 
more thing we need to do.  We 

07:28:46.881 --> 07:28:50.171
need to put this invisible line 
in the middle of the screen.  So

07:28:50.172 --> 07:28:56.244
to do that, I'm going to go to 
helpers and add a vertical 

07:28:57.038 --> 07:29:01.292
guideline.  You can think of it 
as a new edge of the screen.  I 

07:29:01.654 --> 07:29:05.260
have one on the left and now I 
put an edge of the screen in the

07:29:05.869 --> 07:29:12.046
middle of the screen I can use 
as an anchor for constraints.  I

07:29:12.047 --> 07:29:16.528
take the text views and create 
constraints from those.  To kind

07:29:16.529 --> 07:29:19.225
of visualize what this is doing 
underneath, if I move the 

07:29:19.757 --> 07:29:23.328
guideline, it's actually going 
to move the entire layout now.  

07:29:23.700 --> 07:29:27.378
So, let's move that back and 
then let's get another design 

07:29:27.681 --> 07:29:30.777
because it turned out that 
design was not performing very 

07:29:30.778 --> 07:29:35.339
well.  After many user studies, 
we've discovered the solution is

07:29:36.812 --> 07:29:41.564
left-aligning the labels.  So, 
let's try to do that.  Well, I 

07:29:41.565 --> 07:29:44.211
did it and I translated it to 
German and this is what 

07:29:44.853 --> 07:29:49.382
happened.  This is not great.  
So, what happened here?  So, it 

07:29:49.640 --> 07:29:53.858
turns out, if I lay this out 
similar to the way I just did, 

07:29:54.128 --> 07:29:58.714
so, password's the longest field
in these labels so if I set up a

07:29:59.067 --> 07:30:02.481
constraint and another 
constraint from edit text down 

07:30:03.057 --> 07:30:06.362
to the password edit text, this 
is going to work great in 

07:30:06.643 --> 07:30:11.194
English.  When I translate it to
German, it is no longer correct.

07:30:11.446 --> 07:30:14.964
So what I'm going to need is 
something that's dynamic, that's

07:30:14.965 --> 07:30:19.228
based on all these things.  Kind
of like a view group.  

07:30:19.229 --> 07:30:22.437
Basically, I might want a linear
layout.  I'm in 

07:30:22.438 --> 07:30:25.096
ConstraintLayout, so how do I do
that in ConstraintLayout?  

07:30:25.097 --> 07:30:32.077
There's another helper and we're
going to use that now.  If we 

07:30:32.078 --> 07:30:35.397
use add vertical barrier, this 
allows you to add a barrier to 

07:30:35.398 --> 07:30:40.574
the screen.  It is like a view 
group.  It's a grouping code.  

07:30:40.575 --> 07:30:47.513
We can open up the componentry 
and add it.  It's a view that's 

07:30:47.985 --> 07:30:51.739
added to the screen.  It's 
positioned on one side or the 

07:30:52.207 --> 07:30:57.137
other of all of the views that 
are inside of it.  By default, 

07:30:57.138 --> 07:30:59.456
it's on the left.  If I open the

07:31:03.192 --> 07:31:06.755
attributes  pane, I can set it 
up to the end.  

07:31:06.756 --> 07:31:12.626
I will set up the constraints 
and translate my English into 

07:31:13.208 --> 07:31:20.008
German.  So, that's really it.  
That's all of the features in 

07:31:20.286 --> 07:31:24.709
ConstraintLayout 1.0 and 1.1.  
So Chris is going to talk about 

07:31:24.998 --> 07:31:30.914
more tricks that can be used to 
use the visual editor to build 

07:31:31.533 --> 07:31:36.712
constraints. 
  Cool.  Thanks, Sean.  So, with

07:31:36.713 --> 07:31:42.513
constraint layout, we've 
introduced many consents. We 

07:31:42.514 --> 07:31:47.393
started with constraintss, 
margins and chains.  We've 

07:31:48.327 --> 07:31:51.243
introduced guidelines and 
barriers and groups and many 

07:31:51.570 --> 07:31:55.210
more helpers to come and there's
motion layout.  One thing that 

07:31:55.487 --> 07:32:01.085
we've heard consistently is that
as we've added more concepts, 

07:32:01.238 --> 07:32:05.022
it's becoming increasingly 
harder to manage all of these 

07:32:05.650 --> 07:32:07.650
with ConstraintLayout. 
And so, what I'm here to tell 

07:32:07.734 --> 07:32:12.484
you, today, is that we've 
actually been improving this in 

07:32:13.293 --> 07:32:18.279
the visual editor in Android 
Studio.  The four areas are 

07:32:18.280 --> 07:32:24.938
creating constraints, and new 
view and tricks on zooming and 

07:32:25.209 --> 07:32:28.509
panning and then of course, 
using sample data, which we 

07:32:29.350 --> 07:32:32.716
introduced back in 3.2.  
So creating constraints, in this

07:32:33.266 --> 07:32:38.417
case, we have two components.  
An image view and a text view.  

07:32:38.712 --> 07:32:43.968
If we want to center the image 
view, we put one constraint on 

07:32:44.146 --> 07:32:50.243
the top and one of there bottom.
Let's take that lovely Login 

07:32:50.991 --> 07:32:54.233
form from below.  We have 
labels, we have inputs, some 

07:32:55.070 --> 07:32:59.857
buttons.  But from the 
constraint point of view, we 

07:32:59.858 --> 07:33:02.629
have this guideline in the 
middle, the Login button 

07:33:02.958 --> 07:33:07.048
constrained to the bottom and 
right of the input.  We have the

07:33:07.342 --> 07:33:11.551
inputs constrained to the 
guideline.  Because they are all

07:33:11.924 --> 07:33:15.255
pretty close to each other, when
you're dragging these around, it

07:33:15.256 --> 07:33:19.160
can be pretty challening to get 
it right.

07:33:19.161 --> 07:33:23.693
Even when I made that slide, I 
hid half the constraints because

07:33:23.694 --> 07:33:27.720
it was too busy. 
  Yeah, it was very simplified, 

07:33:27.990 --> 07:33:30.838
actually.  
We've added the ability to add 

07:33:31.233 --> 07:33:34.374
constraints directly with the 
context menu.  If you have 

07:33:34.375 --> 07:33:38.091
components that are really close
to each other, this makes it a 

07:33:38.307 --> 07:33:41.192
lot more precise and direct to 
set those constraints.  So, in 

07:33:41.505 --> 07:33:45.201
this case -- and this is 
available in 3.3 beta, as well, 

07:33:45.202 --> 07:33:51.359
so you can try it out today.  
And so, in this case, we have 

07:33:51.360 --> 07:33:55.434
this lovely cat picture.  You 
can just simply constrain it to 

07:33:55.793 --> 07:33:59.809
the parent.  So, what does it 
look like if you have multiple 

07:34:00.729 --> 07:34:04.396
components?  So, in this case, 
we have these two text views 

07:34:04.855 --> 07:34:09.073
that are really close to each 
other and so I'm not sure if 

07:34:09.333 --> 07:34:13.550
people have tried to create it, 
it becomes painful when you're 

07:34:13.551 --> 07:34:18.100
going from the bottom of one to 
the top of the other.  You can 

07:34:18.356 --> 07:34:21.682
keep the two selected, and then 
when you open up the context 

07:34:22.560 --> 07:34:25.197
menu, there's this constraint 
menu and you can see the two 

07:34:25.452 --> 07:34:28.338
elements you want to use are 
there and then you can easily 

07:34:28.881 --> 07:34:32.423
cascade to the right constraint 
that you want.  

07:34:32.424 --> 07:34:36.151
In this case, we're only showing
the start and end and that's 

07:34:36.839 --> 07:34:41.003
because, in this case, the top 
and bottom constraints have 

07:34:41.367 --> 07:34:43.449
already been set so we don't 
show them.  

07:34:43.450 --> 07:34:47.177
So, here, we want to constrain 
the location icon to this 

07:34:47.435 --> 07:34:54.179
vertical guideline on the left. 
So, if you use the drag and drop

07:34:57.868 --> 07:35:00.988
method, you get all these --

07:35:06.147 --> 07:35:08.595
 Sean's favorite green flashing 
stuff.  If you're trying to 

07:35:08.939 --> 07:35:12.599
target some of these smaller 
things like the following text 

07:35:12.600 --> 07:35:17.428
or numbers, it gets hard when 
you're trying to do drag and 

07:35:17.958 --> 07:35:21.278
drop.  Again, this makes a lot 
more direct so you can select 

07:35:21.482 --> 07:35:25.366
the guideline and use the 
context menu. 

07:35:25.367 --> 07:35:28.938
If you really don't want to 
select these things, you can use

07:35:30.059 --> 07:35:37.880
the component tree.  This 
becomes useful.  It does the 

07:35:38.091 --> 07:35:40.813
exact same thing.  
But if you do like drag and 

07:35:40.814 --> 07:35:44.026
drop, you know, you can still do
it and one thing that we've 

07:35:44.293 --> 07:35:47.847
tried to make easier is actually
when you drag it and so in this 

07:35:48.326 --> 07:35:53.534
case, we have this new gesture 
which, pending, is called drag 

07:35:54.092 --> 07:35:57.271
to center.  As you drag, you now
see all these little targets and

07:35:58.340 --> 07:36:02.886
so instead of trying to actually
target those specific green 

07:36:02.887 --> 07:36:06.516
dots, you can simply drag to the
middle of the thing you want to 

07:36:06.829 --> 07:36:11.505
constrain to.  
In this case, if I drag from the

07:36:12.210 --> 07:36:17.470
Mountain View text view, I can 
drag to the cat picture and get 

07:36:17.471 --> 07:36:21.526
a pop-up menu that shows me the 
two constraints I can set.  

07:36:21.527 --> 07:36:24.696
Because we're going from the 
left of the mountain view text 

07:36:25.512 --> 07:36:31.364
view to the cat picture, the two
constraints are the left and 

07:36:31.365 --> 07:36:33.365
right.  
And we actually have this, as 

07:36:33.712 --> 07:36:37.971
well, which comes in handy when 
you have overlapping views and 

07:36:37.972 --> 07:36:41.151
so this one's pretty simple but 
sometimes you have views you 

07:36:41.637 --> 07:36:44.735
want to hide and show at runtime
and so all you have to do is 

07:36:45.324 --> 07:36:50.679
drag to wherever -- to the 
target and what we'll do is 

07:36:51.177 --> 07:36:54.571
actually figure out which fews 
are under the pixel and show you

07:36:54.803 --> 07:36:59.343
a context menu accordingly.  
So, if we move on to view 

07:36:59.840 --> 07:37:05.092
options, so, the design surface 
has always had view options to 

07:37:05.093 --> 07:37:10.741
take advantage of when you're 
working with your layouts.  The 

07:37:11.021 --> 07:37:15.763
two are show all constraints and
live rendering.  So, if we go 

07:37:15.764 --> 07:37:19.842
back to our Login form, we're 
going to reuse this a lot.

07:37:19.843 --> 07:37:22.151
[Laughter]
You know, the constraints are 

07:37:22.152 --> 07:37:25.198
set here.  But the thing is, 
when you're trying to -- let's 

07:37:25.468 --> 07:37:29.598
say you're new to this layout 
and you're trying to edit 

07:37:29.777 --> 07:37:33.213
constraints on one of these 
controls, there is a lot going 

07:37:33.214 --> 07:37:36.983
on.  And this is simplified 
compared to the normal design 

07:37:37.240 --> 07:37:39.240
surface.  And so what we've

07:37:43.207 --> 07:37:49.387
3.3 is added this option to show
all constraints but it's turned 

07:37:49.388 --> 07:37:54.107
off by default.  What we'll do 
is we only show the constraints 

07:37:54.108 --> 07:37:58.732
on the actively-selected 
component.  It makes it easier 

07:37:58.733 --> 07:38:04.286
to work with the component 
you're working with.  

07:38:04.287 --> 07:38:08.059
Of course, you can easily turn 
this back on if you do want to 

07:38:08.613 --> 07:38:10.603
see all the constraints at the 
same time.  

07:38:10.604 --> 07:38:14.231
And so this is kind of showing 
you a side-by-side.  On the 

07:38:14.754 --> 07:38:18.035
left, we have it turned off.  On
the right, we have it turned on.

07:38:18.709 --> 07:38:22.742
Especially in the design surface
or design mode, it cleans it up 

07:38:23.013 --> 07:38:27.570
a lot because you don't have 
arrows and margin, especially 

07:38:28.209 --> 07:38:33.068
for the 322 and following and 
the 20 followers.  Blueprint 

07:38:33.431 --> 07:38:37.296
mode is the same thing.  Even 
though blueprint mode is heavily

07:38:37.935 --> 07:38:40.839
simplified, it still gets a 
little hairy to look at.  And 

07:38:41.331 --> 07:38:45.923
so, we think this is a good 
option, as well, here The other 

07:38:45.924 --> 07:38:51.105
view option we have is live 
rendering, we've done live 

07:38:51.383 --> 07:39:00.619
rendering for quite some time.  
Let me go back.  Can I go back? 

07:39:00.620 --> 07:39:09.320
Oh.  And so, it's on by default 
but depending on the specs of 

07:39:09.321 --> 07:39:12.469
your machine, it can be slow.  
You might make a mistake.  Often

07:39:12.873 --> 07:39:17.808
times when I've tried to use it,
I've tried to create a 

07:39:18.310 --> 07:39:21.687
constraint and the button will 
move after it and that causes me

07:39:21.688 --> 07:39:27.173
to make more mistakes.  And so 
if you turn it off, it's much 

07:39:27.455 --> 07:39:31.126
faster as you drag and move 
things around.  You can still 

07:39:31.127 --> 07:39:34.787
see the bounding boxes and so 
you'll know where things end up.

07:39:35.058 --> 07:39:40.210
The only downside is it doesn't 
render as you drag 

07:39:40.211 --> 07:39:43.982
Alternatively, you can use 
blueprint mode.  Here, we don't 

07:39:43.983 --> 07:39:48.524
do any live renderings.  This is
the best way to work with 

07:39:48.703 --> 07:39:54.023
ConstraintLayout because you can
focus on the constraints So to 

07:39:54.024 --> 07:39:59.623
set these options, they're in 
the top-left corner and if you 

07:39:59.624 --> 07:40:04.526
want to switch, that is using 
the blue layers icon, as well.  

07:40:04.930 --> 07:40:10.195
Zooming and panning.  So, you've
actually been able to zoom and 

07:40:10.196 --> 07:40:15.297
pan in the lab editor and it 
comes really in handy when 

07:40:15.632 --> 07:40:18.010
you're dealing with 
ConstraintLayout when things are

07:40:18.011 --> 07:40:20.504
really small or close to each 
other or overlapping.  What 

07:40:20.776 --> 07:40:27.913
we've done, in 3.3, is changed 
the keyboard shortcuts to match 

07:40:27.914 --> 07:40:34.979
more from Photo Shop and Sketch.
You can use command or control 

07:40:36.121 --> 07:40:38.121
and then the equal

07:40:43.726 --> 07:40:45.787
[no audio]. 

07:40:55.465 --> 07:41:00.398
So, it's command and control and
then command and control with 

07:41:00.399 --> 07:41:04.616
the mouse and pinch in the 
opposite direction.  And then 

07:41:04.878 --> 07:41:08.555
zoom to fit, so if you're zoomed
in and you want to get back to 

07:41:09.000 --> 07:41:13.535
that layout, you can use command
and control, plus zero.  

07:41:13.536 --> 07:41:16.851
And so then, if you're zoomed in
and you don't actually want to 

07:41:17.037 --> 07:41:20.340
zoom out, but you want to pan 
around, you can actually do so 

07:41:20.637 --> 07:41:23.267
by holding space and using the 
mouse to click and drag.  This 

07:41:23.709 --> 07:41:28.715
is kind of a familiar gesture if
you've used Photo Shop or other 

07:41:29.299 --> 07:41:32.178
design tools.  
And so the last tip is using 

07:41:32.758 --> 07:41:36.355
sample data and so with sample 
data, in ConstraintLayout, it's 

07:41:36.650 --> 07:41:39.068
easier to preview how your 
layouts will respond to 

07:41:39.570 --> 07:41:43.670
different content types at 
runtime and so we introduced 

07:41:44.004 --> 07:41:47.048
sample data helpers to make it 
easier to work within the design

07:41:47.575 --> 07:41:54.026
surface.  Specifically for image
views, text views and 

07:41:58.758 --> 07:42:01.743
recycler views.  
And so with the image view, we 

07:42:02.044 --> 07:42:05.626
have two sample sets.  We have 
avatars and scenic backgrounds. 

07:42:05.790 --> 07:42:09.654
And so if you -- and if you want
to add your own images to the 

07:42:10.015 --> 07:42:14.207
sample data, you can do so.  You
just create a sample data 

07:42:14.208 --> 07:42:17.728
directly at the root of your 
project.  Sample data, with your

07:42:18.377 --> 07:42:23.168
image views constrained, you can
quickly switch between different

07:42:23.457 --> 07:42:29.965
types of images and set 
different ratios so you can see 

07:42:29.966 --> 07:42:33.774
how your layout responds without
having to run your app With text

07:42:34.074 --> 07:42:40.655
view, we have sample data.  We 
have cities.  We have dates, 

07:42:40.656 --> 07:42:45.129
full names.  If you want your 
own sample data, you can create 

07:42:45.130 --> 07:42:49.544
it at the root of your project 
and I think we support flat text

07:42:50.011 --> 07:42:55.545
files and JSON.  With text 
views, this is more important 

07:42:55.546 --> 07:43:00.136
because you have text views for 
open-ended content.  

07:43:00.137 --> 07:43:05.143
We have domestic shorthair is a 
very short description.  On the 

07:43:05.897 --> 07:43:08.230
right, this is a bunch of text 
plopped in there.  And so, you 

07:43:08.427 --> 07:43:11.662
know, without having to run our 
app, you can see, just with 

07:43:12.273 --> 07:43:16.287
sample data, how your layout 
responds   So, I don't need to 

07:43:16.565 --> 07:43:22.279
copy lorm ipson off the internet
anymore?

07:43:22.280 --> 07:43:24.026
[Laughter]
  I think as you mentioned, this

07:43:24.027 --> 07:43:27.896
is great for testing out across 
different languages. 

07:43:27.897 --> 07:43:31.855
And so, with that, I'll hand it 
back to Sean to talk about some 

07:43:32.162 --> 07:43:36.413
new features.
  Thanks, Chris.  So, that 

07:43:37.179 --> 07:43:44.911
covers everything in 1.1 and 
1.2.  Now I want to move on to 

07:43:48.146 --> 07:43:51.312
new features coming out in 
ConstraintLayout 2.0.  Who has 

07:43:51.620 --> 07:43:55.300
tried playing with motion editor
already?  So, I see five people.

07:43:55.585 --> 07:44:00.949
So, hopefully we can give, like,
a nice introduction here to the 

07:44:01.485 --> 07:44:05.639
basic concepts and Chris is 
going to talk about the design 

07:44:05.640 --> 07:44:09.168
surface.  
So motion layout allows you to 

07:44:09.734 --> 07:44:12.511
build dynamic layouts using all 
the features of ConstraintLayout

07:44:12.512 --> 07:44:16.526
we talked about earlier and 
changing the constraints over 

07:44:16.807 --> 07:44:21.904
time.  We see building a 
collapsible header that Chris 

07:44:22.630 --> 07:44:27.687
Banes put together.  So you can 
see that title image actually 

07:44:28.091 --> 07:44:32.092
hides itself behind the view as 
it scrolls up.  It's a pretty 

07:44:32.336 --> 07:44:35.688
dramatic animation.  Before we 
get to something like that, 

07:44:35.689 --> 07:44:38.618
let's talk about what we can 
build with MotionLayout, it can 

07:44:39.295 --> 07:44:42.722
be used to build collapsible 
headers, state feedback or 

07:44:43.020 --> 07:44:48.335
transitions, maybe the open and 
closed state of a draw and you 

07:44:48.617 --> 07:44:53.151
can make most of the animations 
in this presentation, as well.  

07:44:53.440 --> 07:44:57.224
To understand motion and 
animation, it's really important

07:44:58.404 --> 07:45:02.080
to take a step back and think 
about what defines an animation,

07:45:02.425 --> 07:45:07.079
not just on Android, but a 
Disney movie.  They are defined 

07:45:07.289 --> 07:45:10.673
by a start and an end.  I start 
over here.  I'm here.  And then 

07:45:10.891 --> 07:45:15.308
I'm ending over here.  And in 
betweenbetween, over time, I 

07:45:15.931 --> 07:45:19.946
created an animation so that's a
very complex motion.  Let's talk

07:45:20.150 --> 07:45:23.841
about a simple one.  I'm going 
to put a blue dot on the screen 

07:45:23.842 --> 07:45:27.115
and I'd like to build an 
animation.  In order to do that,

07:45:27.925 --> 07:45:32.168
I have to define a start.  I 
have to define an end.  I'm 

07:45:32.169 --> 07:45:36.540
going to put that in the bottom 
right-corner with constraints 

07:45:37.003 --> 07:45:40.517
and in order to build a 
animation, all I do is 

07:45:40.946 --> 07:45:43.466
transition from one to the end. 
That's what MotionLayout will do

07:45:43.467 --> 07:45:48.907
for you.  It'll figure out how 
to transition that blue dot from

07:45:48.908 --> 07:45:51.998
the start, down to the end.  
To build a MotionLayout, you 

07:45:52.465 --> 07:45:55.496
have to start with a 
MotionLayout in your 

07:45:58.606 --> 07:46:06.057
XML.  We did that so it would 
have all the features of 

07:46:06.346 --> 07:46:11.062
ConstraintLayout.  It points to 
a motion scene, which is a 

07:46:11.682 --> 07:46:14.880
separate XML file and you encode
the start and end information 

07:46:15.279 --> 07:46:20.910
that defines your animation.  
The start and end are defined in

07:46:21.471 --> 07:46:25.545
terms of constraint sets.  What 
are constraint sets?  You may be

07:46:25.546 --> 07:46:29.615
familiar with this already.  
What we've been talking about, 

07:46:29.795 --> 07:46:34.381
so far, is this.  The views, the
actual labels, plus all of the 

07:46:34.382 --> 07:46:37.482
constraints and all of the 
sizing information.  A 

07:46:37.773 --> 07:46:40.647
constraint set is just this 
part.  Just the constraints and 

07:46:40.911 --> 07:46:45.274
just the sizing information.  It
points to IDs of actual views 

07:46:45.568 --> 07:46:53.822
but doesn't contain the views. 
If I animate a constraint, it 

07:46:54.124 --> 07:46:57.485
would look like that.  If I 
applied it to an animation, it 

07:46:57.486 --> 07:47:00.144
would look like that.  
Let's build a fairly 

07:47:02.501 --> 07:47:06.059
easy-to-follow-along easy 
layout.  Here, we have a pretty 

07:47:06.330 --> 07:47:11.159
dramatic reveal animation, the 
title comes up top, the subtitle

07:47:11.160 --> 07:47:14.911
expands down below.  At the same
time, the image in the 

07:47:15.269 --> 07:47:18.737
background is resizing itself.  
So there's a lot of things going

07:47:19.145 --> 07:47:22.322
on.  This might actually be hard
to write in code, but it's 

07:47:22.970 --> 07:47:25.454
fairly easy to write using 
MotionLayout.  So, let's take a 

07:47:25.455 --> 07:47:28.444
look at how we're going to do 
that.  To make a MotionLayout, 

07:47:28.749 --> 07:47:32.513
I'm just going to add -- I'm 
going to define the start and 

07:47:32.815 --> 07:47:35.824
the end.  The start, I'm going 
to move the title off the screen

07:47:36.027 --> 07:47:38.990
and do that by making a 
constraint to the end of the 

07:47:39.249 --> 07:47:43.098
title to the start of the view 
-- to the ConstraintLayout.

07:47:43.099 --> 07:47:47.216
ConstraintLayout's very happy to
lay your views out of it, if you

07:47:47.889 --> 07:47:51.538
ask it to.  
We're also going to do the same 

07:47:52.270 --> 07:47:56.641
thing on the bottom, where we're
going to put a constraint to 

07:47:56.642 --> 07:48:01.222
push the description text off 
the screen.  Then to actually 

07:48:01.223 --> 07:48:07.027
build that, we're going to go 
ahead and make a MotionLayout.  

07:48:07.028 --> 07:48:10.680
This is a subclass of 
ConstraintLayout.  It has a 

07:48:10.880 --> 07:48:15.160
layout tag. Here, I'm going to 
call it spacing.  Then I have to

07:48:15.471 --> 07:48:18.758
define my layout, which is just 
the views.  I don't give it 

07:48:18.759 --> 07:48:21.994
widths and heights, I don't 
constrain anything.  I'm 

07:48:22.265 --> 07:48:24.851
literally just going to make a 
list of three text views and an 

07:48:25.888 --> 07:48:28.581
image view.  
Now I'm going to go to the file 

07:48:29.522 --> 07:48:35.061
I was talking about earlier.  
This is the motion scene file.  

07:48:35.062 --> 07:48:38.014
Inside that, it defines a 
transition and a transition has 

07:48:38.015 --> 07:48:41.316
a start and an end.  Again, 
that's the thing that defines an

07:48:41.978 --> 07:48:45.890
animation.  An animation always 
has a beginning and it always 

07:48:46.279 --> 07:48:49.550
has an end.  To define start, 
I'm going to make a constraint 

07:48:49.891 --> 07:48:54.898
set and a constraint set is just
a tag.  It has an

07:49:02.492 --> 07:49:11.305
ide -- ID.  
But, we'll say which ID, I'm 

07:49:12.148 --> 07:49:15.501
going to set its height, width 
and padding.  I'll constrain -- 

07:49:15.917 --> 07:49:20.191
to push it off the screen, I'm 
going to constrain to the end of

07:49:20.192 --> 07:49:24.116
parent and do the same thing for
the constrain set, end.  I'm 

07:49:24.117 --> 07:49:26.780
going to go ahead and make the 
title view constrain the start 

07:49:27.146 --> 07:49:29.995
to the start of parent.  And 
this brings that title on to the

07:49:30.320 --> 07:49:34.980
screen.  I'm going to do the 
same thing for all the other 

07:49:35.215 --> 07:49:40.637
views in this layout, as well.  
It's a clarity of XML and I 

07:49:40.872 --> 07:49:43.429
built this animation.  
So now I'm going to pass it back

07:49:43.637 --> 07:49:50.845
to Chris, who's going to talk a 
little bit more about --

07:49:50.846 --> 07:49:57.364
The motion editor.  So, at I/O 
this year, we gave you a sneak 

07:49:57.365 --> 07:50:03.787
peek of the motion editor.  
We've been working pretty hard 

07:50:03.788 --> 07:50:08.082
on it but it's not quit ready 
yet.  We wanted to make sure 

07:50:08.083 --> 07:50:12.856
that we focus on getting some 
foundational pieces in place 

07:50:12.857 --> 07:50:20.317
before we release it.  We don't 
want to be too impatient and get

07:50:20.655 --> 07:50:29.863
it right, unlike things like 
instant run. 

07:50:31.563 --> 07:50:34.685
[Laughter]
The motion library has been out 

07:50:34.686 --> 07:50:39.386
for awhile.  We wanted to nail 
the right animation concepts and

07:50:39.787 --> 07:50:44.473
roles required.  The library 
also needs to be 

07:50:47.524 --> 07:50:49.018
performant.  
John and Nicolas has been 

07:50:49.019 --> 07:50:52.473
working hard on the library.  
They love your feedback and all 

07:50:52.750 --> 07:50:55.973
the cool demos that have been 
coming out.  So, please, keep it

07:50:56.297 --> 07:51:01.618
coming and thank you.  
The other thing is the quality 

07:51:01.942 --> 07:51:06.371
of Android Studio.  It's been 
the primary focus for us in 3.3 

07:51:06.650 --> 07:51:12.828
and the upcoming 3.4 release.  
We've made performance and 

07:51:13.153 --> 07:51:16.846
interactions improvements 
because it has to be able to 

07:51:17.373 --> 07:51:21.276
render animations at 60 frames 
per second and making it easier 

07:51:21.586 --> 07:51:25.641
to work with constraints because
you have to know how to use 

07:51:25.949 --> 07:51:28.076
ConstraintLayout and so we think
that if we invest in the quality

07:51:28.444 --> 07:51:33.843
now in the tool, it will 
actually make the MotionLayout 

07:51:34.171 --> 07:51:39.532
editor better With that, I'm 
here to show you very early 

07:51:39.533 --> 07:51:44.324
exploration of the motion 
editor.  This is mockups, not 

07:51:44.325 --> 07:51:50.026
the build.  I'm the designer.
  This is all made in Photo 

07:51:51.335 --> 07:51:55.691
Shop.
  Feel free to find me or Sean 

07:51:55.959 --> 07:52:00.423
and I think John's here, too.  
If we take the example from 

07:52:00.861 --> 07:52:05.420
before we have the space picture
and text views animating in, 

07:52:05.421 --> 07:52:08.512
let's use that as the context of
what we'll see in the motion 

07:52:08.746 --> 07:52:12.708
editor.  So, what does that 
actually look like?  So, here, 

07:52:13.007 --> 07:52:17.964
we have a new perspective on the
component tree, for now we're 

07:52:18.248 --> 07:52:21.584
calling the transitions view.  
For the purpose of the talk, I'm

07:52:21.897 --> 07:52:26.512
going to talk about this new 
view because we think this is 

07:52:28.416 --> 07:52:32.932
the most significant  KNT part. 
You'll have the property panel 

07:52:32.933 --> 07:52:36.342
and pallet.  We haven't quite 
figured out the details about 

07:52:36.343 --> 07:52:40.646
how that integrates with the 
timeline or view.  So, stay 

07:52:40.974 --> 07:52:43.873
tuned for that.  
So, in this case, we have the 

07:52:43.874 --> 07:52:46.824
start of the transition and so 
you can see the text views are 

07:52:47.001 --> 07:52:50.651
off the view port but you can 
see there's a motion path that 

07:52:51.658 --> 07:52:54.202
goes from outside and in.  We 
don't actually render the text 

07:52:54.538 --> 07:52:57.671
views outside the view port 
today, but that's definitely 

07:52:57.672 --> 07:53:00.923
something we will need to have 
for animation because we know 

07:53:01.198 --> 07:53:04.786
that's a very typical animation 
example to have things fly in.  

07:53:05.261 --> 07:53:09.414
And so if we kind of fast 
forward halfway through the 

07:53:09.595 --> 07:53:14.567
transition, you can see the text
views have moved halfway in and 

07:53:14.568 --> 07:53:18.065
we have the space image zoomed 
back out and that's kind of what

07:53:18.917 --> 07:53:26.711
we intended here.  So, if we 
rewind, let's go deeper on what 

07:53:26.712 --> 07:53:30.722
this transition view actually 
does.  So, we're only showing 

07:53:30.723 --> 07:53:35.223
one transition now and it's 
uniquely named by its start and 

07:53:35.554 --> 07:53:39.948
end constraint set.  You can 
have multiple transitions per 

07:53:40.198 --> 07:53:42.558
MotionLayout and so with this 
drop-down, you'll be able to 

07:53:43.082 --> 07:53:47.097
switch between the different 
transitions and we'll load the 

07:53:47.414 --> 07:53:49.671
corresponding constraint sets 
and change the timelines so you 

07:53:49.949 --> 07:53:53.156
can see how the components 
change.  

07:53:53.157 --> 07:53:57.588
Each transition has its own 
properties, which is the start 

07:53:58.187 --> 07:54:03.289
and end constraint set.  It has 
duration expressed in 

07:54:05.570 --> 07:54:07.939
milliseconds.  
So, if we move down, we have the

07:54:09.258 --> 07:54:12.498
timeline.  And so you have, 
starting from the left, you have

07:54:12.806 --> 07:54:17.347
the play back bar, you can loop 
the animation as many times as 

07:54:17.656 --> 07:54:21.146
you want.  You can quickly jump 
to the start or the end.  If you

07:54:21.599 --> 07:54:25.447
want to speed up or slow down 
the animation, we allow that, as

07:54:25.448 --> 07:54:28.418
well.  Just to tune the 
animation perfectly.  

07:54:28.419 --> 07:54:32.090
And we have this time control 
here so you can actually step 

07:54:32.628 --> 07:54:36.477
through millisecond, by 
millisecond and then for the 

07:54:36.811 --> 07:54:41.702
timeline itself, you know, we 
show from zero to 100, 100 being

07:54:41.703 --> 07:54:44.415
the end.  You can use this 
slider here to make the timeline

07:54:44.724 --> 07:54:47.877
bigger or smaller depending on 
which part of the transition you

07:54:47.878 --> 07:54:52.746
want to focus on.  
And so we move down and see all 

07:54:54.089 --> 07:54:56.260
the components that you can 
animate in the MotionLayout.  

07:54:57.125 --> 07:55:01.075
Each component will show they 
have a start and end constrain 

07:55:01.076 --> 07:55:04.854
set, which are required to 
animate anything.  And so if we 

07:55:05.420 --> 07:55:11.964
look specifically at this space 
flash image, it has a key 

07:55:13.130 --> 07:55:16.666
attribute or key frame which we 
will change halfway through the 

07:55:17.461 --> 07:55:19.986
animation.  
If we zoom out, they corresponds

07:55:22.854 --> 07:55:27.816
sponds to the same ones.  Here's
my components I'm animating and 

07:55:28.339 --> 07:55:31.770
where they're starting and 
ending and what are the actual 

07:55:32.404 --> 07:55:36.283
motion paths.  
And so, that's kind of where we 

07:55:36.492 --> 07:55:41.061
are with the motion editor.  We 
hope to get it out soon, but I 

07:55:41.780 --> 07:55:44.571
can't promise anything.
  Next year.

07:55:44.572 --> 07:55:48.947
[Laughter]
  Some time in 2019.  And that's

07:55:50.489 --> 07:55:52.489
it.

07:56:03.385 --> 07:56:06.358
[Applause]
  Everyone, the next session, in

07:56:06.972 --> 07:56:11.005
this theater, will begin at 
5:40.  Thank you. 

08:06:53.143 --> 08:06:58.023
5:40.  Thank you.  
  Welcome back, everyone.  The 

08:06:58.888 --> 08:07:05.526
program is going to get under 
way in about two minutes.  Our 

08:07:08.126 --> 08:07:12.500
program will resume in two and a
half minutes. 

08:10:41.810 --> 08:10:42.043
half minutes.  
half minutes.  

08:10:42.044 --> 08:10:44.044
half minutes.  
half minutes.  

08:10:42.044 --> 08:10:44.044
half minutes.  

08:10:46.636 --> 08:10:48.636
half minutes.  
half minutes.  

08:10:46.636 --> 08:10:48.636
half minutes.  
half minutes.  

08:10:46.636 --> 08:10:48.636
half minutes.  
[No audio]

08:11:09.309 --> 08:11:13.948
In the end, I will talk about 
what we're working on.  Two 

08:11:16.456 --> 08:11:26.089
years ago, Google CEO we'll move
to mobile-first world.  It means

08:11:26.090 --> 08:11:30.726
machine learning and mobile.  
Years and years, more and more 

08:11:31.290 --> 08:11:35.459
mobile apps are using machine 
learning to produce fascinateg 

08:11:37.065 --> 08:11:40.056
user experience.  More and more 
machine learning logic is 

08:11:41.062 --> 08:11:46.257
shifting from the server running
the cloud to the mobile device 

08:11:46.258 --> 08:11:52.760
in your pocket.  It has many  
fast,advantages.  It's it does 

08:11:53.320 --> 08:11:59.166
not need to spend costs.  It 
also runs anytime, anywhere, 

08:11:59.452 --> 08:12:03.366
with and without network 
connectivity.  It also provides 

08:12:03.758 --> 08:12:06.062
better production for user 
privacy since the data does not 

08:12:06.588 --> 08:12:10.962
have to leave the device.  Let 
me take a quick poll here.  How 

08:12:11.137 --> 08:12:14.700
many of you traveled from 
outside of California to attend 

08:12:15.349 --> 08:12:20.905
this dev summit?  Wow!  Welcome.
Welcome to Silicon Valley.  I 

08:12:20.906 --> 08:12:27.250
hope you get a chance to visit 
Golden Gate Bridge and enjoy 

08:12:27.251 --> 08:12:30.870
good food.  
Talking about food, my 

08:12:31.144 --> 08:12:35.748
biological watch tells me it's 
time for dinner.  So, where 

08:12:36.288 --> 08:12:42.139
should I eat?  Well, I'll pull 
out my phone, ask Google 

08:12:42.406 --> 08:12:49.712
Assistant.  Hi, Google, I'm 
hungry.  Any good restaurants 

08:12:50.332 --> 08:12:53.932
around here?  They recommend 
where to go for dinner around 

08:12:53.933 --> 08:12:58.965
the area and location I'm 
currently at.  When I tell it a 

08:12:59.240 --> 08:13:03.569
new place, I would like to take 
a lot of photos. 

08:13:24.594 --> 08:13:29.158
Mobile device can now run really
increasingly for  machine

08:13:32.546 --> 08:13:34.725
learning tasks.  Last spring, I 
took my family to Tuscany in 

08:13:34.996 --> 08:13:41.209
Italy.  We drove around those 
beautiful hilltop towns.  There 

08:13:41.511 --> 08:13:48.212
are many signs, but I don't 
speak Italian, unfortunately.  I

08:13:48.573 --> 08:13:54.681
wish I do.  How do I know what 
it means?  Here's where Google 

08:13:56.863 --> 08:13:58.863
Translate came to 

08:14:08.284 --> 08:14:10.813
rescue.  It will use a natural 
language processing to translate

08:14:11.196 --> 08:14:16.390
the text from one language into 
another. 

08:14:16.391 --> 08:14:21.249
Finally, it uses speech to 
convert text into voice and tell

08:14:21.513 --> 08:14:26.552
me what the sign is, in my own 
language.  

08:14:26.553 --> 08:14:31.187
All these involve machine 
learning.  There is a seamless 

08:14:31.188 --> 08:14:35.110
and powerful user experience.  
This all look great.  But as a 

08:14:35.412 --> 08:14:39.268
developer, how do I do something
like this? 

08:14:43.484 --> 08:14:48.037
Machine learning requires 
specialized knowledge and years 

08:14:48.038 --> 08:14:54.848
of experience.  It requires a 
large amount of good 

08:14:54.849 --> 08:14:59.976
high-quality data.  
The mobile device has very 

08:15:00.273 --> 08:15:05.025
limited computing power.  Models
run on a server in the cloud are

08:15:06.192 --> 08:15:10.365
often too large or too complex. 
You need to spend a lot of 

08:15:10.909 --> 08:15:16.669
effort to optimize model for the
mobile usage.  After, finally, 

08:15:16.670 --> 08:15:23.309
the app is built, you need to 
worry about how do I deploy, 

08:15:23.779 --> 08:15:31.216
that becomes another headache.  
Take all these problems, we 

08:15:31.488 --> 08:15:36.683
launched ML Kit, which helps the
mobile developers build Android 

08:15:37.544 --> 08:15:42.176
and OS apps using machine 
learning technologies.  

08:15:42.177 --> 08:15:46.052
ML Kit is aimed at making 
machine learning easy for mobile

08:15:46.626 --> 08:15:51.150
developers just because you want
to use machine learning on 

08:15:51.595 --> 08:15:55.597
mobile, it does not mean you 
need to worry about collecting 

08:15:55.876 --> 08:16:01.639
data, building models, 
optimizing, hosting, deployment,

08:16:03.189 --> 08:16:07.179
downloading.  ML Kit will take 
care of all of this for you.  We

08:16:07.493 --> 08:16:14.987
provide common models that work 
out of box.  They optimized for 

08:16:14.988 --> 08:16:19.032
speed, accuracy and efficiency 
for the mobile device.  

08:16:19.033 --> 08:16:25.891
We provide one consistent API 
across both Android

08:16:29.521 --> 08:16:35.400
and i OS.  
For commonly-needed machine 

08:16:36.258 --> 08:16:39.597
learning tasks, we have base API
that come with pretrained Google

08:16:40.046 --> 08:16:45.541
models that work out of the box.
There are five APIs we're 

08:16:45.845 --> 08:16:50.507
supporting.  The test 
recognition API are on the 

08:16:50.954 --> 08:16:53.100
ondevice and cloud.  It can 
recognize Latin

08:16:57.712 --> 08:17:01.161
characters and a wide range of 
languages and special 

08:17:02.296 --> 08:17:05.402
characters.  
Face detection is API the 

08:17:05.875 --> 08:17:11.071
support to have faces in image 
and well as live video 

08:17:11.850 --> 08:17:14.924
streaming.  We have contour 
detection which can help you 

08:17:15.303 --> 08:17:20.698
identify different parts of the 
face and then apply face mask.  

08:17:20.699 --> 08:17:24.859
The barcode scanning can be used
to detect one-dimensional and 

08:17:27.835 --> 08:17:35.003
two-dimensional barcodes.  Image
labeling API can detect objects 

08:17:35.278 --> 08:17:40.913
inside the photo.  For ondevice 
and the cloud.  The ondevice 

08:17:40.914 --> 08:17:46.040
covers most of the common things
you see in photos.  While the 

08:17:46.277 --> 08:17:50.116
cloud API can support 10,000 
labels across many categories.  

08:17:51.420 --> 08:17:56.219
Finally, our landmark API can 
recognize well-known places in 

08:17:57.030 --> 08:18:02.687
the photo, like White House or 
Eiffel Tower.  If this does not 

08:18:02.688 --> 08:18:06.286
fit your need and you're an 
experienced developer with the 

08:18:07.022 --> 08:18:10.307
knowledge on how to build and 
train models, you're more than 

08:18:10.731 --> 08:18:15.640
welcome to bring your own Custom
Model.  We run it on TensorFlow.

08:18:16.071 --> 08:18:22.516
It is an open source framework 
for learning and TensorFlow Lite

08:18:22.992 --> 08:18:26.127
is optimized for mobile 
platforms.  For models trained 

08:18:26.128 --> 08:18:32.417
with TensorFlow, we provide your
tools to convert and compress 

08:18:32.889 --> 08:18:37.068
into a format.  While you're 
using Custom Model, you can do 

08:18:37.806 --> 08:18:41.540
it inside your app or host it in
the cloud.  If you choose the 

08:18:41.776 --> 08:18:44.447
latter option to host in the 
cloud, it does not mean you need

08:18:44.761 --> 08:18:50.431
to build your own cloud server. 
ML Kit will find a way for you. 

08:18:50.724 --> 08:18:54.182
We will manage the model 
hosting, deployment, 

08:18:54.867 --> 08:19:00.216
downloading, upgrade and the 
ongoing experimentation.  

08:19:00.217 --> 08:19:03.306
Since ML Kit was launched six 
months ago at the Google I/O, we

08:19:03.307 --> 08:19:08.596
have made several enhancements. 
First, we greatly-enhanced our 

08:19:08.877 --> 08:19:14.269
face detention model, which is 
now 18 times faster and 13% to 

08:19:14.568 --> 08:19:19.371
24% more accurate.  We also 
polished our text recognition 

08:19:19.909 --> 08:19:23.956
API by making them more 
streamlined and consistent 

08:19:24.286 --> 08:19:29.264
across both ondevice and the 
cloud.  In addition, we launched

08:19:29.265 --> 08:19:38.290
face contour detection.  You can
see now you can use the API to

08:19:42.114 --> 08:19:45.511
identify the contours of the 
face in the photo.  It includes 

08:19:46.117 --> 08:19:51.532
the entire face, both eyebrows, 
eyes, nose and lips. This is 

08:19:52.096 --> 08:19:58.188
where the realtime apps can put 
the face mask like a goggle or 

08:19:58.189 --> 08:20:03.471
some funny nose on the face and 
make the mask move with the face

08:20:04.374 --> 08:20:09.223
in the live video streaming.  
Next, I'm going to share some 

08:20:09.224 --> 08:20:16.039
tips and practices for how to 
use ML Kit so I can build 

08:20:17.269 --> 08:20:21.176
impressive mobile apps using 
machine 

08:20:30.684 --> 08:20:34.237
learning.  
Poor image focus can hurt the 

08:20:34.698 --> 08:20:38.174
accuracy.  Second, you should 
ensure the image has sufficient 

08:20:38.175 --> 08:20:42.197
size.  For example, for face 
detection, you should have at 

08:20:44.252 --> 08:20:51.253
least 100-by 100 pixels for each
face.  If you want detection in 

08:20:52.986 --> 08:20:54.986
the selfie mode, it should be 

08:20:58.516 --> 08:21:04.051
200-by-200.  For language API, 
it should be 16-by-16 in size.  

08:21:04.418 --> 08:21:09.258
If you use our cloud API to 
recognize Chinese, Japanese and 

08:21:09.527 --> 08:21:15.182
Korean, each character should be
at least 24-by-24.  Similarly, 

08:21:16.539 --> 08:21:19.540
barcode has the size 
requirement.  Please check out 

08:21:19.959 --> 08:21:24.301
online documentation for more 
details.  

08:21:24.302 --> 08:21:27.227
Machine learning and libraries 
can be large, which can slow 

08:21:27.508 --> 08:21:31.732
down the app download.  There 
are two ways to reduce the APK 

08:21:31.733 --> 08:21:37.454
size.  First, you can build your
app as an Android App Bundle.  

08:21:38.303 --> 08:21:41.868
By doing that, you enable Google
Play to automatically generate 

08:21:42.322 --> 08:21:44.948
APKs for specific screen 
density, architecture as well as

08:21:45.236 --> 08:21:50.429
the languages.  Your user only 
have to download the APK and 

08:21:50.430 --> 08:21:55.337
match their device configuration
Another way you can reduce API14

08:21:57.627 --> 08:22:02.677
RR RR size is if it is not a 
primary purpose, you could move 

08:22:02.969 --> 08:22:07.795
machine learning features, which
require ML Kit into a dynamic 

08:22:08.061 --> 08:22:13.537
feature model.  That way, you 
prevent users for downloading 

08:22:13.913 --> 08:22:16.913
model, which sometimes can be 
large.  

08:22:16.914 --> 08:22:26.015
We all know machine learning 
involves a lot of computation, 

08:22:26.016 --> 08:22:29.096
so, the speed becomes really 
important.  Here are tips on how

08:22:29.477 --> 08:22:33.797
to improve.  You can reduce the 
image resolution and video frame

08:22:34.084 --> 08:22:39.457
rate to limit amount of 
computation it involves.  When 

08:22:39.458 --> 08:22:43.435
the current frame speed process,
you should also throttle 

08:22:44.662 --> 08:22:48.086
incoming video frames, which 
increases memory, as well as 

08:22:48.430 --> 08:22:52.333
slow down the performance. 
For realtime face detection, you

08:22:52.621 --> 08:22:57.114
should use face fast mode, which
luckily is the default mode.  

08:22:57.390 --> 08:23:00.977
Often times, resolution is 
sufficient for face detection.  

08:23:00.978 --> 08:23:06.143
For realtime processing, you 
should also choose between 

08:23:06.705 --> 08:23:09.116
contour detection versus 
classification or landmark 

08:23:09.410 --> 08:23:13.088
detection, but not both.  
Because doing both could be 

08:23:13.319 --> 08:23:18.186
expensive and may not be fit for
the realtime processing of the 

08:23:18.458 --> 08:23:21.800
slow device.  
Another tip and trick you should

08:23:21.801 --> 08:23:25.831
use is, you should wait for 
detection to finish before 

08:23:26.557 --> 08:23:32.262
rendering the face and contour 
together.  You can check out our

08:23:33.136 --> 08:23:37.083
online quickstart app on GitHub 
for more details.  

08:23:37.084 --> 08:23:41.760
To illustrate what I mean, I 
will do a live demo.  Let's 

08:23:42.402 --> 08:23:48.017
switch to the demo mode.  So, 
for the purpose of demo, I'm 

08:23:49.274 --> 08:23:51.569
using slower, 3-year-old

08:23:54.730 --> 08:24:02.074
Nexus 5 X phone.  In the first 
video, I'm going to show you, 

08:24:02.075 --> 08:24:07.889
without any tips and we do not 
do video -- any drawing to make 

08:24:08.181 --> 08:24:13.084
sure the contour and the face 
are together so if you just call

08:24:13.369 --> 08:24:20.451
the API without any performance 
improvement, you can see, the 

08:24:20.988 --> 08:24:26.037
contours are not full in the 
face.  And there's a big gap 

08:24:26.392 --> 08:24:31.739
between these two.  
All right.  So, now I switch to 

08:24:32.487 --> 08:24:36.715
another version, after applying 
performance tips. 

08:24:40.535 --> 08:24:48.605
In this version, it's using the 
exact same Nexus 5X

08:24:51.045 --> 08:24:56.204
phone.  Also, we wait for the 
detection to finish before 

08:24:56.205 --> 08:25:01.196
render both the face and the 
contour.  As you can see now, 

08:25:01.197 --> 08:25:07.349
the contours are full in the 
face all the time.  There's no 

08:25:07.350 --> 08:25:09.664
more gap.  Cool.  
So, let's switch back to

08:25:16.219 --> 08:25:17.166
the slides.
[Applause]

08:25:17.167 --> 08:25:22.591
If you're using our Custom Model
API, how to include model is 

08:25:22.753 --> 08:25:29.081
something you should consider.  
There are two ways, you can 

08:25:29.082 --> 08:25:31.799
bundle inside your app or host 
it on the cloud.  If you bundle 

08:25:32.095 --> 08:25:34.095
your model on the 

08:25:37.231 --> 08:25:39.878
app, it's available immediately.
It doesn't need any downloading.

08:25:40.223 --> 08:25:44.835
You get a bigger app because app
contains the model.  It may slow

08:25:44.836 --> 08:25:49.619
down the app download.  Also, 
you cannot change the model 

08:25:50.498 --> 08:25:53.988
without a new app release.  On 
the other hand, if you host a 

08:25:54.245 --> 08:25:58.207
model in the cloud, we provide 
all the hosting support for you.

08:25:58.467 --> 08:26:01.819
You get a smaller app size 
because the app does not contain

08:26:02.437 --> 08:26:07.421
the model, which translates into
a faster installation.  You also

08:26:07.921 --> 08:26:10.993
can choose the download model 
only if it's needed.  The model 

08:26:11.524 --> 08:26:14.879
updates can come over the air 
into the app without any new app

08:26:15.300 --> 08:26:18.636
release.  
You can also use remote config 

08:26:19.536 --> 08:26:26.527
and AB testing provided by 
Firebase.  The drawback of 

08:26:26.528 --> 08:26:31.417
hosting model on the cloud is, 
obviously, it means 

08:26:32.113 --> 08:26:34.872
connectivity.  When there's no 
connectivity, you cannot 

08:26:35.135 --> 08:26:38.611
download the model.  Also, the 
model will not be available 

08:26:38.931 --> 08:26:42.675
until they're downloaded.  
So, a third option is using a 

08:26:43.281 --> 08:26:47.807
hybrid approach.  You can bundle
the model in the app, so make it

08:26:48.217 --> 08:26:53.971
usable right away.  Then you can
receive model updates over the 

08:26:54.277 --> 08:26:58.594
air from the cloud.  If you're 
using our base API, it's 

08:26:58.797 --> 08:27:08.088
provided in two different forms.
For the better terms, SDK.  The 

08:27:08.696 --> 08:27:12.828
model's actually provided by the
Google Play service so it's 

08:27:12.829 --> 08:27:16.368
across all apps so the app, 
itself, does not have to contain

08:27:16.802 --> 08:27:23.681
the model, which will make your 
app smaller.  Text recognition 

08:27:24.716 --> 08:27:29.266
are provided through the SDK.  
The second type is thick SDKs.  

08:27:30.627 --> 08:27:34.270
The models are bound inside the 
SDK.  Each app will have their 

08:27:34.271 --> 08:27:37.824
own copy of the model, which 
will increase the app size.  

08:27:37.825 --> 08:27:41.340
Face detection and image 
labeling are supported through 

08:27:41.707 --> 08:27:46.589
the thick SDKs.  
To use this type of SDK and SDKs

08:27:47.243 --> 08:27:51.036
provided by the ML Kit, you need
to include the appropriate ML 

08:27:53.368 --> 08:27:56.845
Kit dependancies in your app.  
Inside that file, inside this 

08:27:57.142 --> 08:28:01.197
dependency section, if you want 
to use the API support through 

08:28:01.198 --> 08:28:07.429
the thin SDK, you should add the
dependency called Firebase.  And

08:28:07.912 --> 08:28:10.997
in addition, if you want to use 
thick SDK, you should still keep

08:28:12.055 --> 08:28:16.114
this line, because all the API 
entry points are coming from 

08:28:16.367 --> 08:28:20.338
this thing SDK dependency.  But 
you also need to add additional 

08:28:20.973 --> 08:28:25.416
dependancies.  If you want to 
use image recognition, image 

08:28:25.687 --> 08:28:33.267
detection, then you need to add 
the firebase ML vision because 

08:28:33.268 --> 08:28:39.416
it's a thick SDK.  
Similarly, for image labeling, 

08:28:39.838 --> 08:28:44.347
you need to add image label 
model dependency.  

08:28:44.348 --> 08:28:48.275
Next, I will talk about a few 
new areas we're currently 

08:28:48.276 --> 08:28:55.852
working on.  A few new ML Kit 
features are either under 

08:28:56.954 --> 08:29:02.101
development or in early testing 
phase.  We started with natural

08:29:06.235 --> 08:29:10.520
language processes.  We have 
smart replies.  We are also 

08:29:10.817 --> 08:29:14.796
planning to go into other areas,
like speech.  At the same time, 

08:29:14.797 --> 08:29:18.833
we will continue to enhance 
performance and accuracy of base

08:29:19.951 --> 08:29:23.018
APIs.  
We launched model compression 

08:29:23.670 --> 08:29:27.344
and conversion service to our 
alpha services, which helped 

08:29:27.345 --> 08:29:31.423
them to convert and compress 
large model into a smaller and 

08:29:31.710 --> 08:29:36.206
faster versions for mobile 
usage.  The conversion service 

08:29:36.866 --> 08:29:42.705
is alpha, using pruning, 
quantization and transfer 

08:29:42.943 --> 08:29:47.281
learning to retrain the large 
models, make them smaller and 

08:29:47.774 --> 08:29:50.118
faster without sacrificing too 
much accuracy

08:29:54.479 --> 08:29:56.479
YAERS.  

08:29:57.623 --> 08:30:03.936
 Fishbrain allows you to share 
the photos of your catch.  It 

08:30:04.266 --> 08:30:08.634
can identify any fish with a 
photo.  Their model is more

08:30:11.809 --> 08:30:18.226
than 80 megabytes.  By using our
conversion and compression, they

08:30:18.415 --> 08:30:23.083
were able to reduce it.  They 
only maintain the same level of 

08:30:23.472 --> 08:30:27.108
accuracy, it is slightly better.
If you are interested in trying 

08:30:27.516 --> 08:30:31.649
out our model compression 
service, please join our alpha 

08:30:32.644 --> 08:30:36.544
program by signing up today at 

08:30:44.267 --> 08:30:46.267
g.co/firebase/sign-up. 
I hope you enjoyed the talk 

08:30:46.789 --> 08:30:52.146
today and can take home some 
tips and I can't wait to see 

08:30:52.545 --> 08:30:57.179
what you will build with ML Kit.
If you have questions, I'll be 

08:30:57.430 --> 08:31:01.639
outside in the lounge and we'll 
also be in office hours.  Thanks

08:31:02.286 --> 08:31:04.609
so much for listening.

08:31:53.678 --> 08:31:53.981
[Applause]
[Applause]

08:31:53.982 --> 08:31:55.315
[Applause]
[Applause]

08:31:53.982 --> 08:31:54.571
[Applause]
[Applause]

08:31:54.572 --> 08:31:55.905
[Applause]
[Applause]

08:31:54.572 --> 08:31:56.572
[Applause]
[Applause]

08:31:58.312 --> 08:32:00.312
Hi, everyone.  Welcome to

08:32:03.449 --> 08:32:08.124
Modern Android Notifications.  
My name is Jingyu. 

08:32:08.125 --> 08:32:12.803
I'm Paul Matthews.  I'm a 
developer advocate in London.  

08:32:13.160 --> 08:32:20.626
So, three years ago, on this 
stage, Chris Ren gave this quote

08:32:20.627 --> 08:32:24.211
and it's a brilliant one.  Don't
annoy in user, respect them, 

08:32:24.612 --> 08:32:28.171
empower them, delight them, 
connect them to the people they 

08:32:28.706 --> 08:32:33.228
care about.  And this is still 
very much true today.  So, we'll

08:32:33.625 --> 08:32:39.149
look at channels and how you can
use them in your app.  What's 

08:32:40.627 --> 08:32:43.982
new in notifications and 
finally, digital well-being.  

08:32:44.233 --> 08:32:49.495
First, how to respect your 
users.  So respect your user's 

08:32:50.115 --> 08:32:54.414
attention.  Don't annoy the 
user, respect them.  Some useful

08:32:54.415 --> 08:32:58.426
tips, so do respect the user's 
settings.  So, if they've 

08:32:58.782 --> 08:33:02.348
communicated to you, in your 
app, that they want a certain 

08:33:02.578 --> 08:33:05.762
setting for your notifications, 
then you should respect that.  

08:33:05.763 --> 08:33:09.709
Don't try and override it.  
Don't try and ignore it.  You 

08:33:09.873 --> 08:33:12.496
should check that the 
notifications you're sending are

08:33:13.123 --> 08:33:16.100
not blocked.  That they do still
want to hear these 

08:33:16.382 --> 08:33:20.423
notifications.  And finally, if 
you're capable in your app, you 

08:33:20.734 --> 08:33:24.338
should back up any settings they
have told you about 

08:33:24.614 --> 08:33:28.763
notifications and make sure 
they're synced over install

08:33:32.303 --> 08:33:34.652
and devices. 
You should use well-structured 

08:33:35.015 --> 08:33:41.298
apps, making use of the styles, 
such as messaging style, inbox 

08:33:41.299 --> 08:33:46.142
style, big-picture style.  You 
should make sure your 

08:33:46.412 --> 08:33:53.186
notifications are timely.  Using
high priority messages to ensure

08:33:53.498 --> 08:33:58.296
they get your messages when you 
in tend them to get your 

08:34:00.215 --> 08:34:03.923
notifications.  And prioritize 
the notifications and making 

08:34:05.100 --> 08:34:09.599
them look better.  
So some don'ts, don't send these

08:34:10.502 --> 08:34:13.114
notifications and forget about 
them.  We want you to use the 

08:34:13.475 --> 08:34:16.941
platform features that are there
to help you.  For instance, auto

08:34:17.948 --> 08:34:22.865
cancel, making sure they 
disappear.  Timeouts, is it 

08:34:23.531 --> 08:34:27.875
relevant after four hours?  And 
synchronizing across the 

08:34:27.876 --> 08:34:32.247
devices.  If you know they use 
your app on multiple devices, 

08:34:32.248 --> 08:34:37.921
you should try and synchronize 
notifications they read on one. 

08:34:38.390 --> 08:34:41.463
So don't send notifications that
are not actionable.  The point 

08:34:41.825 --> 08:34:45.462
of notifications is that they're
there to be used.  By 

08:34:45.791 --> 08:34:48.118
definition, the user wants to 
know something, which means they

08:34:48.392 --> 08:34:54.334
generally need to do something. 
So don't send them a 

08:34:54.610 --> 08:35:02.048
notification that says, hey, we 
synced some things in the 

08:35:02.656 --> 08:35:05.703
background.  
Don't annoy in user, use alert 

08:35:05.966 --> 08:35:09.485
once and don't make sure they're
getting buzzed crazy while 

08:35:09.868 --> 08:35:12.583
they're standing up on stage, 
presenting about notifications. 

08:35:12.799 --> 08:35:16.155
Make sure it is representative 
of what you want.  If you're a 

08:35:16.156 --> 08:35:21.037
chat app, maybe children group 
notification behavior.  

08:35:21.038 --> 08:35:25.111
So, respect the user, otherwise,
they might just

08:35:28.721 --> 08:35:33.098
turn off your notifications and 
they might choose to uninstall 

08:35:33.099 --> 08:35:35.631
your app, which would be far 
worse.  

08:35:35.632 --> 08:35:41.346
There are platform features that
deliberately enable 

08:35:41.518 --> 08:35:44.498
notifications being turned off. 
For instance, notifications are 

08:35:44.919 --> 08:35:49.476
being posted and the users maybe
keep swiping it away and so now,

08:35:50.112 --> 08:35:53.440
in P, we prompt the user, do you
really care about this 

08:35:53.746 --> 08:35:57.186
notification?  Do you really 
want to see this content?  This 

08:35:58.068 --> 08:36:01.695
acts on channels if you're not 
describing your channels 

08:36:01.696 --> 08:36:05.860
correctly, this can lead to some
confusion and perhaps some lost 

08:36:06.763 --> 08:36:10.710
notifications.  
So, let's look more at 

08:36:10.951 --> 08:36:17.160
notifications channels.  They 
provide granular control.  

08:36:17.161 --> 08:36:20.284
Channels are the way to empower 
them.  So let's look at how to 

08:36:21.247 --> 08:36:24.942
use them.  First of all, they're
now required on all apps, as 

08:36:25.229 --> 08:36:28.758
we've -- they're required on API
26 and that should be 

08:36:29.204 --> 08:36:33.715
everywhere.  They help the user 
categorize.  So they help you 

08:36:33.927 --> 08:36:37.864
categorize your notifications 
that help the user to interact 

08:36:37.865 --> 08:36:40.636
with them.  
And finally, they allow the user

08:36:40.808 --> 08:36:44.123
to customize their settings.  
So, the user has the final say. 

08:36:44.447 --> 08:36:47.108
So, if you think something's 
important and they don't think 

08:36:47.109 --> 08:36:52.748
it is, they can tell you this.  
So, let's look at the best 

08:36:53.091 --> 08:36:57.744
practices.  Again, you should 
allow the users to manage their 

08:36:58.231 --> 08:37:03.959
notifications through the 
channel creation.  You should 

08:37:04.247 --> 08:37:06.766
allow them to maybe deep link 
into settings to change these 

08:37:07.037 --> 08:37:10.974
things, if they're expressing an
interest of working with your 

08:37:11.306 --> 08:37:14.394
notifications channels, perhaps 
they want to be able to change 

08:37:14.605 --> 08:37:19.001
the importance of something.  
So, setting the right importance

08:37:19.287 --> 08:37:25.157
level for a notification channel
seems like an obvious one, but 

08:37:25.158 --> 08:37:28.869
it's so easy to overlook.  
User settings, you should 

08:37:29.338 --> 08:37:33.954
respect the user settings, but 
back them up when you can and 

08:37:34.204 --> 08:37:37.659
don't try to abuse them by 
deleting and re-creating.  

08:37:37.660 --> 08:37:43.304
Other don'ts are only using one 
channel.  This is a clear 

08:37:43.602 --> 08:37:47.238
notification smell, if you like.
If you've only got one channel 

08:37:47.432 --> 08:37:50.426
in your application, there's 
probably something else you need

08:37:50.427 --> 08:37:54.838
to be looking at.  If you 
provide poor descriptions for 

08:37:55.224 --> 08:37:59.412
users so they don't understand 
the uses of a channel, they 

08:37:59.776 --> 08:38:03.021
won't be able to able.  If you 
use wrong or blocked channels.  

08:38:03.319 --> 08:38:06.466
They're trying to communicate to
you that that don't like this 

08:38:07.294 --> 08:38:09.647
content and you should respect 
that. 

08:38:09.648 --> 08:38:13.566
Spamming the user with 
notification channels is not the

08:38:13.567 --> 08:38:19.344
best way to proceed.  
Choosing your channels carefully

08:38:19.633 --> 08:38:22.925
can help.  Think of your users 
when you choose your channels.  

08:38:23.514 --> 08:38:28.475
Think of the user and how they 
might want to interact with your

08:38:28.476 --> 08:38:33.933
app.  For instance, it's a bad 
idea to create channels around 

08:38:34.298 --> 08:38:38.094
your importance level.  This 
isn't what notification channels

08:38:38.470 --> 08:38:44.337
are for.  You should group them 
around categories like tagging 

08:38:45.848 --> 08:38:51.030
in a photo, tagged posts.  
You should also think about 

08:38:52.111 --> 08:38:55.421
creating notifications when 
there's more control needed.  

08:38:55.731 --> 08:38:59.922
For instance, if I'm on a chat 
app and have a general channel 

08:38:59.923 --> 08:39:03.359
the all chat notifications 
coming in but then I express an 

08:39:04.787 --> 08:39:07.577
interest in controlling a family
chat group, you should create a 

08:39:09.044 --> 08:39:13.190
channel and allow the user to 
dive deeper and have

08:39:16.489 --> 08:39:24.725
more control. 
Lazily creating, that is if they

08:39:25.016 --> 08:39:27.807
don't receive a message through 
your app, you don't need to 

08:39:28.079 --> 08:39:33.449
create the channel for that.  
And then, the user can provide 

08:39:33.651 --> 08:39:36.776
feedback to you, to say, look, 
this is useful or this isn't 

08:39:36.777 --> 08:39:40.907
useful and you should listen to 
that.  So, in Android P, we 

08:39:41.306 --> 08:39:45.610
added broadcasts for listening 
in to blocking -- to blocking or

08:39:45.611 --> 08:39:48.905
changing state of your 
notification channels.  You 

08:39:48.906 --> 08:39:51.608
should understand those and you 
should react to them.  You 

08:39:51.609 --> 08:39:54.863
should maybe back them up so the
next time you create a channel 

08:39:55.144 --> 08:39:57.725
on a different device, it makes 
sense.  

08:39:57.726 --> 08:40:01.705
You can query these APIs at 
runtime, also, to find out how 

08:40:01.706 --> 08:40:04.141
the user interacts with your 
channels.  

08:40:04.142 --> 08:40:09.420
So, now look at what's new in 
notifications. 

08:40:09.421 --> 08:40:15.050
Thank you, Paul.  Okay.  Now 
let's look at what else is new 

08:40:16.676 --> 08:40:20.280
in notifications in Android 9.  
We added updates to make the 

08:40:21.193 --> 08:40:25.068
notifications easier to read and
scan through.  We added more 

08:40:25.422 --> 08:40:28.289
padding notifications and we 
went back to using the rounded 

08:40:29.146 --> 08:40:35.934
corners at the top and bottom.  
They love the smooth app opening

08:40:36.554 --> 08:40:42.138
animation you are seeing here on
the slide instead of closing the

08:40:42.139 --> 08:40:50.783
notification and opening the 
app, now the notification goes 

08:40:50.784 --> 08:40:54.061
smoothly in the app.  You need 
to make sure you're starting 

08:40:56.986 --> 08:41:00.055
your activity directly and your 
active starts quickly.  

08:41:00.056 --> 08:41:03.987
Since, for most users, the 
notification they care about the

08:41:04.166 --> 08:41:07.976
most are the ones connecting 
them with the people they care, 

08:41:08.241 --> 08:41:13.333
so we enhanced our messaging 
style.  Messaging experience, by

08:41:13.886 --> 08:41:21.779
adding a new person class.  Once
you use API 28 and if you're 

08:41:22.732 --> 08:41:25.706
using MessagingStyle in 
notification, we have now moved 

08:41:25.930 --> 08:41:29.097
people's Avatar to the left of 
the notification and you can set

08:41:29.098 --> 08:41:31.776
that Avatar by using the set 
icon method.  

08:41:31.777 --> 08:41:37.785
We also added support for images
and stickers in the messages 

08:41:38.195 --> 08:41:41.731
notification by using set data, 
you can add image in your 

08:41:43.136 --> 08:41:46.802
messages notification directly. 
The other feature that I love, 

08:41:47.113 --> 08:41:51.344
on Android, is direct reply.  
But come times when I'm replying

08:41:51.345 --> 08:41:55.124
to a notification, I would 
accidentally tap on the 

08:41:55.556 --> 08:41:58.279
notification and that will open 
the app and my response is lost.

08:41:58.600 --> 08:42:04.962
Android 9, you can help the user
with this.  By retrieving the 

08:42:05.257 --> 08:42:07.707
draft, you can populate the 
response in your app.  So, make 

08:42:08.128 --> 08:42:11.520
the user experience better, 
delight them.  

08:42:11.521 --> 08:42:17.006
If you already support smart 
reply in your app, we 

08:42:18.377 --> 08:42:21.161
highly-recommend you use this 
API to also display them in your

08:42:21.653 --> 08:42:24.683
notification.  Instead of 
replying to the notification, 

08:42:25.114 --> 08:42:29.977
user can now just tap one of 
them and to reply.  

08:42:29.978 --> 08:42:36.320
Okay.  Here's an example we have
for using the new APIs.  First, 

08:42:36.732 --> 08:42:40.858
we're going to create an 
instance -- person instance 

08:42:40.859 --> 08:42:46.044
here.  So, we're going do use 
the person.  We are setting the 

08:42:46.424 --> 08:42:50.416
name, the URI, the icon for this
person and this is going to 

08:42:50.811 --> 08:42:54.479
represent the center in the 
message. And then, we're going 

08:42:54.723 --> 08:42:57.387
to pass that to this message 
that we're creating here.  As 

08:42:57.684 --> 08:43:01.249
you can see, we're passing the 
instance of the person, not like

08:43:01.250 --> 08:43:05.413
before where we were passing the
name of that person.  We also 

08:43:05.869 --> 08:43:08.739
want to include the image, so 
we're using the set data method 

08:43:11.090 --> 08:43:14.186
to include that image.  
And then after that, we're 

08:43:14.487 --> 08:43:19.446
adding this message with another
message so we're adding two 

08:43:20.154 --> 08:43:22.274
messages into this 
MessagingStyle notification and 

08:43:22.643 --> 08:43:27.398
we're setting the style into our
notification.  

08:43:27.399 --> 08:43:32.874
Okay.  So, here's a quick 
summary of some of the dos and 

08:43:32.875 --> 08:43:36.219
don'ts when you're using 
MessagingStyle.  First, please 

08:43:36.804 --> 08:43:40.980
use MessagingStyle for messages.
And this also applies for if 

08:43:41.928 --> 08:43:44.269
you're using Android Auto or 
Android Wear.  If you're 

08:43:44.532 --> 08:43:47.634
ascending messaging 
notifications, please use 

08:43:48.554 --> 08:43:51.745
MessagingStyle.  In the past, 
we've seen developers switching 

08:43:53.839 --> 08:43:58.916
between MessagingStyles in order
to that big image expansion 

08:43:59.751 --> 08:44:04.099
presentation.  But now, with set
data method, you don't need to 

08:44:04.954 --> 08:44:06.976
do that.  You can use 
MessagingStyle and this will 

08:44:07.222 --> 08:44:10.849
create a consistent experience 
for the user.  

08:44:10.850 --> 08:44:14.800
And it's always good to add the 
icon for the people in the 

08:44:15.372 --> 08:44:18.469
notification so we 
highly-recommend you use that to

08:44:18.747 --> 08:44:24.462
add the Avatar.  If you don't 
set it, we'll use the initial of

08:44:24.674 --> 08:44:29.877
the person's name.  And finally,
if your app supports smart 

08:44:30.094 --> 08:44:34.135
reply, please add that into your
notification so you're creating 

08:44:34.505 --> 08:44:38.211
a better experience for in user.
And here's a few things you want

08:44:38.212 --> 08:44:43.739
to avoid.  There are a lot of 
good reasons to Auto-cancel a 

08:44:44.004 --> 08:44:49.357
notification.  In order to give 
the user a clean and up-to-date 

08:44:50.256 --> 08:44:52.566
notification jar, after they 
reply to a messaging 

08:44:52.840 --> 08:44:56.619
notification, this is not one of
those cases.  You would want to 

08:44:57.181 --> 08:45:00.545
keep that notification there so 
if the user wants to reply to 

08:45:00.822 --> 08:45:03.281
this conversation and reply 
afterwards so please don't 

08:45:03.809 --> 08:45:06.539
cancel that and let the user 
swipe away when they're finished

08:45:06.540 --> 08:45:09.575
with the conversation. 
The other bad behavior that 

08:45:09.855 --> 08:45:16.188
we've seen in the past is some 
developers are setting this in 

08:45:16.505 --> 08:45:20.321
order to achieve a visual 
presentation.  Please don't do 

08:45:20.516 --> 08:45:23.965
that.  There are two reasons. 
One is because it will break 

08:45:24.302 --> 08:45:28.640
Android 9 on the presentation 
and the other -- and the other 

08:45:28.876 --> 08:45:33.808
reason is because a person 
without a name is not a real 

08:45:34.444 --> 08:45:35.110
person.
[Laughter]

08:45:35.111 --> 08:45:39.952
So, up until now, we've talked 
about how you can reach the user

08:45:39.953 --> 08:45:43.179
-- how you can help your user 
connect with people they care 

08:45:43.180 --> 08:45:47.092
about and how you can make your 
notification a better experience

08:45:47.093 --> 08:45:50.691
for the user but I want to hit a
pause here and look at app usage

08:45:50.946 --> 08:45:56.109
from the other side.  Since as 
much as I want to get that 

08:45:56.110 --> 08:45:59.412
notification from my friend and 
family, I still need need time 

08:45:59.958 --> 08:46:04.135
away from the device. 
So, to help user with this, we 

08:46:04.680 --> 08:46:09.019
announced the digital well-being
at I/O this year.  If you have a

08:46:09.555 --> 08:46:13.918
device running Android 9, I 
highly-recommend you download it

08:46:14.333 --> 08:46:18.272
from the Play store and sign up 
for beta.  

08:46:18.273 --> 08:46:22.690
So, this is what digital 
well-being will show us.  It 

08:46:22.967 --> 08:46:28.317
provides an overview of our app 
usage and provides a dashboard 

08:46:29.494 --> 08:46:33.453
that shows our time spending on 
each app and the number of 

08:46:33.752 --> 08:46:39.516
notifications we've received.  I
personally love to use it to 

08:46:40.320 --> 08:46:46.898
learn where I'm spending my time
but sometimes I would see some 

08:46:47.216 --> 08:46:52.086
apps are sending me 
notifications unexpectedly.  One

08:46:52.087 --> 08:46:56.362
question you might have is how 
are the notifications counted?  

08:46:58.024 --> 08:47:00.478
The goal is to track user 

08:47:04.109 --> 08:47:07.451
interruptinterruptions.  Any 
updates that's visible to the 

08:47:07.452 --> 08:47:12.129
user are counted as one.  If 
you're sending a notification to

08:47:12.130 --> 08:47:14.995
the block channel, that is not 
counted here.  

08:47:14.996 --> 08:47:19.347
So, in this case, I saw this app
is sending me lots of 

08:47:19.696 --> 08:47:22.710
notifications so I got curious. 
I went into the dashboard and I 

08:47:23.048 --> 08:47:27.179
opened that to see the hourly 
breakdown.  And as you can see 

08:47:28.072 --> 08:47:34.258
here, I got a notification every
hour that day and even at 4:00 

08:47:34.535 --> 08:47:38.719
a.m. in the morning, I got eight
notifications.  So if this 

08:47:38.899 --> 08:47:41.848
notification are high 
importance, I would be woken up 

08:47:41.849 --> 08:47:45.343
in the middle of the night.  
Thankfully, that's not the case.

08:47:45.617 --> 08:47:50.399
But if these notifications are 
push notifications and they are 

08:47:50.671 --> 08:47:53.851
sent uses high priority message,
which means this app is 

08:47:54.483 --> 08:47:58.048
constantly waking up a deep-dose
device.  If I want to have good 

08:47:58.445 --> 08:48:03.968
battery in the morning, I might 
uninstall this app.  For now, I 

08:48:04.369 --> 08:48:11.656
will turn on D&amp;D so I don't get 
disturbed.  

08:48:11.657 --> 08:48:18.985
It provides ways for users to 
disconnect and reduce 

08:48:19.329 --> 08:48:22.628
interruption.  You can turn it 
on by flipping your device, 

08:48:22.629 --> 08:48:27.737
which is super convenient.  But 
what if this is super important 

08:48:27.977 --> 08:48:32.245
notification that the user 
actually wants to receive?  So 

08:48:32.246 --> 08:48:36.425
for those, here's the few advice
for you.  First, set the right 

08:48:36.592 --> 08:48:41.338
category to your notification.  
As we can see here, in the do 

08:48:41.609 --> 08:48:47.019
not disturb setting, user can 
choose what to block and what to

08:48:47.173 --> 08:48:51.544
allow and set exceptions on 
calls, reminders and events. If 

08:48:51.545 --> 08:48:54.447
your notification belongs to one
of them, please tag your 

08:48:54.997 --> 08:48:59.877
notification as such.  
Here, I listed a few categories 

08:48:59.878 --> 08:49:02.020
which corresponds to the 
exceptions on the other side.  

08:49:02.484 --> 08:49:05.735
As I said, if your notification 
belongs to one of these 

08:49:06.663 --> 08:49:11.051
categories, please let us know 
by tagging them.  

08:49:11.052 --> 08:49:14.979
The other advice that we have is
if this is a notification coming

08:49:15.267 --> 08:49:20.040
from another person, please tag 
your notification. As you can 

08:49:20.041 --> 08:49:28.723
see here, in the digtell -- user
can choose who they want to get 

08:49:29.031 --> 08:49:31.538
notified from.  So, please add 
that person in your notification

08:49:32.399 --> 08:49:35.165
and add the associated 

08:49:38.575 --> 08:49:43.911
URI, if possible.  You'll bypass
Do Not Disturb.  When user turn 

08:49:43.912 --> 08:49:48.523
it on, they really don't want to
be disturbed.  So if you're 

08:49:48.524 --> 08:49:52.283
sending a notification that's 
not expected, that will really 

08:49:52.284 --> 08:49:59.181
annoy them.  So please don't 
abuse these APIs.  

08:49:59.182 --> 08:50:03.122
This brings us back to the code 
we have at the beginning.  

08:50:03.123 --> 08:50:05.973
Whenever you're sending a 
notification, don't annoy the 

08:50:06.423 --> 08:50:09.485
user, respect them, empower 
them, delight them and connect 

08:50:09.692 --> 08:50:13.315
them to the people they care 
about.  

08:50:13.316 --> 08:50:15.316
Thank you.

08:50:27.195 --> 08:50:27.554
[Applause]
[Applause]

08:50:27.555 --> 08:50:29.555
[Applause]

08:58:46.946 --> 08:58:48.946
[Applause]

