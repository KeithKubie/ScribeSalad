WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:14.591
&gt;&gt; LASSEN: Okay. Federation, so this is a
pretty high-level description of Federation

00:00:14.591 --> 00:00:23.710
and there's some pointers to some of the--some
of the next steps that we need to look at

00:00:23.710 --> 00:00:32.360
to make the Federation protocol more useful.
And so I'm going to go through some of the--fairly

00:00:32.360 --> 00:00:40.720
quickly go through the structure of the protocol.
I expect that some of you know it pretty well.

00:00:40.720 --> 00:00:46.659
But let me go through it and then, you know,
anybody who's not particularly familiar with

00:00:46.659 --> 00:00:56.839
it might be better equipped to ask the right
questions afterwards. So here, I put up some

00:00:56.839 --> 00:01:10.440
of the dry runs from last year when we launched
this. So with Google Wave, we sort of took

00:01:10.440 --> 00:01:15.850
an ambitious path that we've been on and said
that the Google Wave, we have something here

00:01:15.850 --> 00:01:27.260
that could replace email. I know exactly what
the--how it looks today. But we definitely

00:01:27.260 --> 00:01:35.800
wanted to look at communication in a, you
know, trend--in the new communication model

00:01:35.800 --> 00:01:44.310
that address, you know. Many people use emails
today with hosted services like Hotmail and

00:01:44.310 --> 00:01:52.390
Gmail. And there's so much that you don't
take advantage of that we wanted to explore.

00:01:52.390 --> 00:02:07.270
So here--there's a--that's a pound when you
use one service like Google Wave right there

00:02:07.270 --> 00:02:13.300
to take advantage of that, you know, instead
of you have--that's being an immutable copy

00:02:13.300 --> 00:02:18.840
of the email message for each one who is on
the email thread, there's a single shared

00:02:18.840 --> 00:02:24.810
unmutable object and that's how we can get
live typing and so on and you can edit your

00:02:24.810 --> 00:02:36.470
message after you sent it and so on. But to
have a generally useful communication protocol,

00:02:36.470 --> 00:02:43.840
you'd want Federation. You'd want your hosting
service to be able to talk to others. So here

00:02:43.840 --> 00:02:53.680
are three services that you should be able
to share Waves across organization boundaries.

00:02:53.680 --> 00:03:01.010
So when it comes to Federation Wave probably
doesn't have as much new to offer as it does

00:03:01.010 --> 00:03:11.069
in a single hosted service, so we will look
very much at email and XMPP and other preexisting

00:03:11.069 --> 00:03:17.650
federated protocols. And I think the Federation
protocol has a number of things in common

00:03:17.650 --> 00:03:26.820
than model about--around some of the same
concepts, you know. You look up there, the

00:03:26.820 --> 00:03:37.440
other guys with DNS and on. Indeed, the Federation
protocol runs on top of XMPP. And so whereas

00:03:37.440 --> 00:03:46.989
with emails, you send these immutable emails
to each other, what you want to achieve with

00:03:46.989 --> 00:03:57.940
Wave Federation is that you share these mutable
objects. And so the way we model that is that

00:03:57.940 --> 00:04:04.030
it's this--the deltas that form waves are
immutable. You mutate that by appending deltas

00:04:04.030 --> 00:04:17.470
to the--delta history. And so if you'll get--so
you share waves across Wave providers by sharing

00:04:17.470 --> 00:04:21.549
deltas much the same way as you will email
and then you log. Everybody then composes

00:04:21.549 --> 00:04:32.979
this and then look at the resulting waves
and that's how we share waves. Wow, that looks

00:04:32.979 --> 00:04:44.310
terrible. Okay, well, here two Wave providers--the
message protocol is then about sharing deltas.

00:04:44.310 --> 00:04:50.480
And a lot of this is--so we started with looking
at a single service in the time server protocol

00:04:50.480 --> 00:04:58.699
and then we--then we built a Federation protocol
that could tie things together. And the Federation

00:04:58.699 --> 00:05:02.499
protocol is, in some ways, simpler than the
time server protocol because we'd just share

00:05:02.499 --> 00:05:09.319
deltas and then we count on the other end
to this of Wave server that we're talking

00:05:09.319 --> 00:05:16.360
to and it has the power to construct--to pull
together these deltas and reconstruct the

00:05:16.360 --> 00:05:34.400
Waves. And so, as a matter of both sort of
economy of expression and--what was the other

00:05:34.400 --> 00:05:43.669
[INDISTINCT]--so we just share deltas. We
don't share snapshots of waves. So if on my

00:05:43.669 --> 00:05:51.660
Wave there's a participant from another domain
that--then and is it--edit to the Wave, then

00:05:51.660 --> 00:05:56.369
the delta goes across. So I suppose it's a
delta that adds a participant from another

00:05:56.369 --> 00:06:01.099
domain then just that delta goes across. It
reaches that other domain, and it sees as

00:06:01.099 --> 00:06:06.740
a delta. And if hasn't been part of that Wave
before, it can see that the version is not

00:06:06.740 --> 00:06:12.449
so and then it turns around and asks for the
history of deltas up to that point and so

00:06:12.449 --> 00:06:21.139
it can complete contiguous delta history up
to current. So what we--it stands here is

00:06:21.139 --> 00:06:26.619
we--one Wave server, the host of Wave, it
broadcasts the deltas to the others. They

00:06:26.619 --> 00:06:34.589
can turn around and request history. And so--and
I won't really cover that in this morning's

00:06:34.589 --> 00:06:46.939
talk. So then what I didn't cover was the
security aspect of it. So when we launched

00:06:46.939 --> 00:06:53.610
Wave just before, we had a thorough security
review. We had the [INDISTINCT] visit us in

00:06:53.610 --> 00:06:59.189
Sydney and they looked at the whole Wave product
and then they also took a look at the Federation

00:06:59.189 --> 00:07:07.680
protocol. Then they also said, "Hey, that
looks better than email," you know, "[INDISTINCT]

00:07:07.680 --> 00:07:14.731
let's get some proper authentication into
the protocol." The more that they identify

00:07:14.731 --> 00:07:25.369
that there's an extra attack vector in Wave
that makes it particularly useful to have

00:07:25.369 --> 00:07:37.509
a proper authentication. So the thing is that--so
if you have here three Wave providers; love.com,

00:07:37.509 --> 00:07:44.789
evil.com, and peace.com and you have somebody
from love.com and peace.com that talk to each

00:07:44.789 --> 00:07:51.759
other, they might be talking to each other
on a Wave that's hosted in the third place.

00:07:51.759 --> 00:08:03.810
So there's sort of a Wave provider in the
middle thing going on here. And so we wouldn't

00:08:03.810 --> 00:08:10.919
want that Wave provider in the middle to start
spoofing messages so that if I think I'm talking

00:08:10.919 --> 00:08:19.589
to somebody from--somebody I trust from another
domain that--I want to know that the message

00:08:19.589 --> 00:08:30.550
came from them. And so, therefore, they introduced
then a security model here where all the messages

00:08:30.550 --> 00:08:46.690
are signed by the author's Wave provider and
these signatures are propagated. So anything

00:08:46.690 --> 00:08:53.390
that--somebody from love.com writes and is
propagated to peace.com, peace.com will insist

00:08:53.390 --> 00:09:02.230
that if this is supposed to be coming from
love.com, then it must be signed by a love.com

00:09:02.230 --> 00:09:20.140
certificate. So, yeah, the Wave server of
the author of the delta--so this is authentication

00:09:20.140 --> 00:09:29.071
between the servers, so it's not the end user.
So the assumption here is that each Wave provider

00:09:29.071 --> 00:09:37.680
is--should be authenticating its users. So
it's the job of the Wave provider to identify

00:09:37.680 --> 00:09:48.770
that it's on at googlewave.com, or love.com,
or whatever on the user. And then the only

00:09:48.770 --> 00:09:55.950
thing that is authenticated across the Federation
protocol is that information is from the server

00:09:55.950 --> 00:10:04.280
that it's supposed to. So I use whatever secure,
authenticated connection there is between

00:10:04.280 --> 00:10:10.020
my plan and my Wave provider. Then my Wave
provider then takes my message and signs it

00:10:10.020 --> 00:10:21.480
with the--here, in this case, is acmewave.com
with its certificate and then it's verified

00:10:21.480 --> 00:10:36.650
throughout. The--so if you are hosting--let's
see. So if you're--right. So if you are love.com

00:10:36.650 --> 00:10:41.740
or peace.com in this scenario here, then you
should be--you should sign the deltas you

00:10:41.740 --> 00:10:48.380
submit and whatever you--is broadcasted to
you from evil.com, you verify the signatures

00:10:48.380 --> 00:11:00.660
then--are good. And it is the responsibility
of whoever hosts the Wave--it's evil.com to

00:11:00.660 --> 00:11:09.420
host copies of the certificates. Being the
host of the Wave, it means that on the signed

00:11:09.420 --> 00:11:18.020
deltas that are coming in from the participants--participating
domains, evil.com will want to verify the

00:11:18.020 --> 00:11:25.270
signatures on incoming messages. So it will
retrieve the certificates that goes with them.

00:11:25.270 --> 00:11:32.960
So if peace.com sends a delta across, evil.com
will ask for the certificate from peace.com.

00:11:32.960 --> 00:11:41.820
And then the contract must store that certificate
in its security database, so that if immediately,

00:11:41.820 --> 00:11:49.970
a long time later, some other party is on
the wavelet and wants to verify the history

00:11:49.970 --> 00:11:55.520
is properly signed all the way back then they
can go to evil.com and get a certificate.

00:11:55.520 --> 00:12:01.320
That is because who knows if it was peace.com?
Maybe that service is not running anymore

00:12:01.320 --> 00:12:12.601
so you might not be able to find that certificate
from the source anymore. Then another piece

00:12:12.601 --> 00:12:19.300
of the puzzle here is that the deltas that
are signed--are signed together with the history

00:12:19.300 --> 00:12:30.470
hash, rolling hash, or the server authoritative
delta history of the Wave; that severely limits

00:12:30.470 --> 00:12:42.560
how the Wave provider in the middle can read
all the messages. It's only up to--basically

00:12:42.560 --> 00:12:50.230
up to what we can do with OT, meaning that
the--only when there's some simultaneous messages

00:12:50.230 --> 00:12:55.160
being sent across can it choose to show them
in one way or the other and indeed in that

00:12:55.160 --> 00:13:06.300
case, the participating parties, that there
is no sort of true order and things.

00:13:06.300 --> 00:13:15.220
The transport, as I said, we use XMPP. So
the Wave server talks in Wave in a Box. The

00:13:15.220 --> 00:13:25.730
Wave server talks, uses the--what's called
component interface of the XMPP servers to

00:13:25.730 --> 00:13:34.040
connect to a running XMPP server. And then,
yeah, that's all in the nitty-gritty about

00:13:34.040 --> 00:13:43.200
Discovery and so on to--that these Wave servers
sitting behind the different XMPP servers

00:13:43.200 --> 00:13:55.230
to find each other. So this is my highlight
description of Federation. And so this afternoon,

00:13:55.230 --> 00:14:02.680
there'll be a session where we'll talk about
both the transfer protocol and Federation

00:14:02.680 --> 00:14:12.720
protocol and we can drill into various points
that we want to explore. But let me just sort

00:14:12.720 --> 00:14:18.130
of put on a slide here. This is from May this
year, Google I/O. This was a list of the federated

00:14:18.130 --> 00:14:23.440
providers at the time. So I don't know actually
how much of that is still true and where the

00:14:23.440 --> 00:14:32.040
others are on the list now. This includes
various parties who demonstrated prototypes

00:14:32.040 --> 00:14:43.980
of products federating.
Okay, some things that are missing from the

00:14:43.980 --> 00:14:56.740
protocol and that we should fix in order to
make it robust enough to--we can get real,

00:14:56.740 --> 00:15:03.670
you know, mission critical communication running
on Federation protocol is that there's--here

00:15:03.670 --> 00:15:13.380
are a number of things that we were planning
to do but we never got around to before in

00:15:13.380 --> 00:15:20.060
Wave precautions. One of the big things that
we think is necessary is reliable delivery.

00:15:20.060 --> 00:15:25.480
So these messages are sent across XMPP and
they make it or they don't make it, that's

00:15:25.480 --> 00:15:34.480
not good enough. And so this morning, I mentioned
that--how reliable messaging across the Wave

00:15:34.480 --> 00:15:43.960
bus is necessary to build reliable indexing
and I think--and it's our belief that a similar--it's

00:15:43.960 --> 00:15:50.270
a very similar story about Federation and
a similar mechanisms can be used. So we did

00:15:50.270 --> 00:15:56.240
build a reliable delivery messages across
the Wave bus in the Google Wave production

00:15:56.240 --> 00:16:07.291
systems and we were working on extending that
to Federation until we stopped. Another thing

00:16:07.291 --> 00:16:19.170
I think is important to make Federation useful
is to have a support for groups and as Ian

00:16:19.170 --> 00:16:26.680
also mentioned today. This is an important
aspect of a proper collaboration tool. We

00:16:26.680 --> 00:16:33.610
were--we also have a notion of groups in Google
Wave and that was a work in progress. We were--I

00:16:33.610 --> 00:16:42.420
had also identified this as one of the areas
that we needed to be done better to enhance

00:16:42.420 --> 00:16:48.220
the usability of Wave and we should definitely
support that across the Federation. So we

00:16:48.220 --> 00:16:58.670
were--we have some designs for that. They're
not--so there are various internal notes that

00:16:58.670 --> 00:17:04.929
I can--I'm happy to share the ideas we had
about these things with anybody who's interested

00:17:04.929 --> 00:17:15.749
to talk about it here this week. Attachments.
I think that we all--we also have some designs

00:17:15.749 --> 00:17:20.351
for that. I think it's a relatively straightforward
problem. We could--I think we could find a

00:17:20.351 --> 00:17:27.740
protocol for this. It's not even certain whether
you would need to change the Federation protocol

00:17:27.740 --> 00:17:35.000
assistance or whether you could build some
conventions around that--if there's an attachment

00:17:35.000 --> 00:17:47.919
to a Wave that you--within the Wave, the documents
in the Wave, you could provide a description

00:17:47.919 --> 00:17:49.760
of the attachment and it could maybe be served
out by HTTPS or something like that. So...

00:17:49.760 --> 00:18:01.470
&gt;&gt; So, for attachments, are we talking about
library attachments and then the attachments

00:18:01.470 --> 00:18:10.610
have transferred to [INDISTINCT] caching or
there's a [INDISTINCT] manner or just be normalized

00:18:10.610 --> 00:18:12.590
in the way that attachments are sort of fetched
[INDISTINCT]...

00:18:12.590 --> 00:18:20.429
&gt;&gt; LASSEN: I think the best solution would
be to let the Wave providers distribute it

00:18:20.429 --> 00:18:30.289
much like deltas and cache it for the users.
Again, if you look at the case of attachment

00:18:30.289 --> 00:18:34.549
stuff about with some Wave provider that goes
offline one day and if others had depend on

00:18:34.549 --> 00:18:41.669
that Wave, it would be useful to have that
cached copies around. And then...

00:18:41.669 --> 00:19:19.190
&gt;&gt; From the attachment [INDISTINCT] I think
one thing to bear in mind is whether you are

00:19:19.190 --> 00:19:20.190
actually wanting to federate the reference
to an attachment or [INDISTINCT] because,

00:19:20.190 --> 00:19:21.190
you know, a load of [INDISTINCT] being maintained
in a repository in Google Docs or a content

00:19:21.190 --> 00:19:22.190
manager repository, I mean, nor interested
in it [INDISTINCT] the reference to that document

00:19:22.190 --> 00:19:24.170
and really the content if you're not really
trying to do live editing in the document

00:19:24.170 --> 00:19:25.170
necessarily.
&gt;&gt; LASSEN: But--so when we talk about attachments

00:19:25.170 --> 00:19:28.929
in waves, they were--they were, yeah, embedded
by another attachment. So I think if you want

00:19:28.929 --> 00:19:34.139
something like that then you should, you know,
in the text of the Wave or in some structured

00:19:34.139 --> 00:19:43.009
content of the Wave, you should write a reference
and share that. So this is about when you

00:19:43.009 --> 00:19:47.159
actually embed a binary data in the commutable
binary data.

00:19:47.159 --> 00:19:54.200
&gt;&gt; It's just like with e-mail, you can either
send the actual attachments or you just send

00:19:54.200 --> 00:19:58.159
a link to the live document.
&gt;&gt; Yeah, I think...

00:19:58.159 --> 00:20:05.759
&gt;&gt; LASSEN: At least we never considered the
idea of hosting an attachment that's mutable

00:20:05.759 --> 00:20:13.409
in some way. Then there's something that came
up as we get along--around long enough. When

00:20:13.409 --> 00:20:22.850
a year passed after the first--that one prototype
was out there, our certs start expiring and

00:20:22.850 --> 00:20:28.450
nothing worked anymore so we always knew that
this would--will happen, that we should have--we

00:20:28.450 --> 00:20:37.450
should do something about it but we didn't
meet the deadline. And so I believe we should,

00:20:37.450 --> 00:20:45.210
in the spec, explain that expired certs should
be--you should host the expired certs and

00:20:45.210 --> 00:20:53.769
host metadata about when they expire and revoked--are
revoked so that--and you see old messages

00:20:53.769 --> 00:21:01.149
from--that were signed by certs that are expired
today that you can see that they were good

00:21:01.149 --> 00:21:13.639
at the time.

00:21:13.639 --> 00:21:18.640
Yeah. And then I had--I brought--from Sydney,
I brought a laundry list of the protocol bugs

00:21:18.640 --> 00:21:24.100
and omissions that we are aware of that I
don't think we filed the issues for them.

00:21:24.100 --> 00:21:32.000
So if anybody's actually working on a Federation
protocol, we should probably find an option

00:21:32.000 --> 00:21:39.290
to get this week and sit together, and share
our notes on what's broken in there. Then

00:21:39.290 --> 00:21:50.419
some other stuff. So in order to make a Federation
more useful as sort of at the end-user level,

00:21:50.419 --> 00:21:58.510
so--but when you use the Wave panel on an
ACME Wave, and that Wave banged and so on,

00:21:58.510 --> 00:22:04.249
these blank avatars and so on indicate, you
know, that we should find our way to get these

00:22:04.249 --> 00:22:11.960
avatar images across. And it'll be good to
have their presence federated and so on. And

00:22:11.960 --> 00:22:23.480
so--and on the whole, be aware that the Federation
protocol is very low level deliberately so

00:22:23.480 --> 00:22:32.389
in that diagram of concentric circles that
Alex had at the end of his model talk. And

00:22:32.389 --> 00:22:37.360
so the data that sets--so everything that
the Wave server does including Federation

00:22:37.360 --> 00:22:43.759
is sort of at the lowest level. It core has
just--it's shaping our around these low level

00:22:43.759 --> 00:22:49.169
operations and those operations transform.
And it doesn't--the Wave server is not supposed

00:22:49.169 --> 00:22:55.090
to be known where it's talking about what's
the content of these things. And things--and

00:22:55.090 --> 00:23:05.590
in that general principle of trying to avoid
that application level feature requirements

00:23:05.590 --> 00:23:14.330
seep into--to the model to make--causing us
to create funny ops and stuff that cause a

00:23:14.330 --> 00:23:22.509
lot of churn and it's difficult to check for
the greatness criteria as necessary down at

00:23:22.509 --> 00:23:28.369
the core. Similar--something like profiles
and presence that hopefully can be done by

00:23:28.369 --> 00:23:34.850
modeling things in waves so using other protocols,
you know, presence. You could go either way,

00:23:34.850 --> 00:23:40.919
define presence within waves and federates
presence information, or say that it's better

00:23:40.919 --> 00:23:48.299
to use XMPP or other presence protocols, and
provide guidelines for how the service should

00:23:48.299 --> 00:23:57.480
tie these things together. And something that
held back us federating: Wave.google.com.

00:23:57.480 --> 00:24:04.429
We only have federated the Wave Sandbox developer
instance. One thing that held us back was

00:24:04.429 --> 00:24:09.509
that we were hosting all these, you know,
Google [INDISTINCT] domain. All these different

00:24:09.509 --> 00:24:17.100
domains were hosted on that Wave.google.com
instance. And we couldn't sit around with

00:24:17.100 --> 00:24:26.279
private keys for all those domains. So to
be--the signing was unworkable. And it's exactly

00:24:26.279 --> 00:24:33.139
the same problem. There's something that is
relevant to the XMPP community. We want to

00:24:33.139 --> 00:24:42.580
be able to host many domains in one XMPP.
So and they are working solutions for that.

00:24:42.580 --> 00:24:49.419
They have something called Domain Name Assertions
where you--if you have your domain hosted

00:24:49.419 --> 00:24:58.179
by some hosting provider with lots of domains,
then you write into your set of records and

00:24:58.179 --> 00:25:06.190
DNS that you delegate to that other domain
to sign for your--on your behalf. And then

00:25:06.190 --> 00:25:11.739
the hosting server just uses google.com to
see if--to sign all these many domains. And

00:25:11.739 --> 00:25:18.870
then you--whoever wants to verify will go
to and see that each of those had--in DNS

00:25:18.870 --> 00:25:26.279
have said that they were okay with that. And
so--yeah. But whether we want to address that,

00:25:26.279 --> 00:25:36.649
it depends on whether we want to support these
kinds of services. And then we tie it to this

00:25:36.649 --> 00:25:43.780
particular data type of these documents and
the participant lists in Wave search, the

00:25:43.780 --> 00:25:48.639
other Federation protocol. It would be good
to loosen that up and I don't think it's anything

00:25:48.639 --> 00:25:54.961
particular. So the Federation protocol ought
to be able to work with any OT data type with

00:25:54.961 --> 00:26:04.740
their relevant properties. And this is the
last slide. I won't say much about this but--so

00:26:04.740 --> 00:26:12.730
there's some things one could--that in principle
sounds attractive. For instance, maybe you

00:26:12.730 --> 00:26:18.409
could share Wave faster if you just if--by
the Federation get a snapshot of the Wave

00:26:18.409 --> 00:26:23.309
rather than pull out the potentially very
big history. And I'm not sure exactly how

00:26:23.309 --> 00:26:27.179
that would work with the security model. So,
one could look at it but it's not clear to

00:26:27.179 --> 00:26:33.550
me how to do it. And another thing is that
wavelets are hosted by a specific domain.

00:26:33.550 --> 00:26:41.730
If that domain goes out of service and there
are--you know, if evil.com will shut down,

00:26:41.730 --> 00:26:46.659
and love and peace want to keep controlling
the Wave, they can't--they'd just sit on these

00:26:46.659 --> 00:26:53.440
copies and there's nothing to let them assume
ownership of this. And again, I don't know

00:26:53.440 --> 00:27:02.639
how to do it but, you know, peer to peer collaborative
systems exist. Who knows? Maybe one could

00:27:02.639 --> 00:27:08.789
modify the Federation protocols so that you
don't have this rigidity. And another thing--and

00:27:08.789 --> 00:27:15.130
again, I have no idea where to go with this
or whether it's even useful, but this email

00:27:15.130 --> 00:27:23.979
address style user ID's, it's that antiquated
notion, these hotwired user domain association

00:27:23.979 --> 00:27:30.741
and the user ID is--I don't know if that was
the right way to go. We were not up for the

00:27:30.741 --> 00:27:41.119
task of solving that problem when we--when
we built the Federation protocol. But--I don't

00:27:41.119 --> 00:27:47.179
know what--whether there are things to consider
there, but in the long term, that might be

00:27:47.179 --> 00:27:55.399
something to take a look at. Yup? Sorry, I
ran a lot. There'll be a session for discussion

00:27:55.399 --> 00:27:56.399
later today but I'm happy to take some quick
questions now.

00:27:56.399 --> 00:28:07.950
&gt;&gt; You take a X--using XMPP is, one the whole,
a positive for Federation or becoming an obsolete

00:28:07.950 --> 00:28:18.399
[INDISTINCT]? Then, I know, you know, agreed
[INDISTINCT] domain.

00:28:18.399 --> 00:28:28.200
&gt;&gt; LASSEN: Yeah. So it is a little bit awkward
how many hops an operation runs through in

00:28:28.200 --> 00:28:38.960
and out of a Wave running to the XMPP and
the encoding binary encoding and stances and

00:28:38.960 --> 00:28:48.919
XMPPs is op construction. And yeah, in Joseph's
talk, there are many things you have to configure

00:28:48.919 --> 00:28:54.749
today to get something working overnight in
process of more and more of the good stuff.

00:28:54.749 --> 00:28:58.369
And...
&gt;&gt; So there are a lot of many good paths today...

00:28:58.369 --> 00:29:09.100
&gt;&gt; LASSEN: Right. So I was always asking myself
that question. I think in many ways, we successfully

00:29:09.100 --> 00:29:14.169
got some shortcuts to getting things off the
ground this way. So in hindsight, we did the

00:29:14.169 --> 00:29:24.080
right thing but I think it will be useful
to look at and feasible to try multiple transports

00:29:24.080 --> 00:29:29.570
that you could do just like--you can have
multiple clients or protocols running against

00:29:29.570 --> 00:29:36.120
a Wave server, then we could have multiple
transports for the Federation.

00:29:36.120 --> 00:29:46.279
&gt;&gt; Yes, okay. Ever applies to the reverse
[INDISTINCT], and somebody had mentioned the

00:29:46.279 --> 00:29:59.190
idea of having protocol or service on sort
of [INDISTINCT] server, which would do the

00:29:59.190 --> 00:30:03.480
time warp transformation for you or help with
that [INDISTINCT]?

00:30:03.480 --> 00:30:10.830
&gt;&gt; LASSEN: Yeah, the same thought occurred
to me that I think that would be--that would

00:30:10.830 --> 00:30:14.570
be a sane thing to do. I think it would fit
in nicely with the protocol that it wouldn't

00:30:14.570 --> 00:30:22.340
violate any of the principles in there. So
it would specifically save you from transferring

00:30:22.340 --> 00:30:27.039
all that data if you just want to transform
that anchor.

00:30:27.039 --> 00:30:31.979
&gt;&gt; Yeah.
&gt;&gt; LASSEN: So it's not entirely clear whether

00:30:31.979 --> 00:30:40.289
you would want--in all relevant cases, you
would want the data anyway. So you--okay,

00:30:40.289 --> 00:30:54.369
probably this for running off but, Scott?
There you are. Please take it away.

