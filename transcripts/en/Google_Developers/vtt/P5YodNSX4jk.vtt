WEBVTT
Kind: captions
Language: en

00:00:09.830 --> 00:00:10.430
Hi.

00:00:10.430 --> 00:00:13.290
My name is Andrei Mouravski
from the Dart team.

00:00:13.290 --> 00:00:16.730
And I'm here to tell you how the
Dart project can help you

00:00:16.730 --> 00:00:20.620
become a better developer, and
the tools that are available

00:00:20.620 --> 00:00:24.210
for Dart developers to
make better code.

00:00:24.210 --> 00:00:29.110
The Dart project is different
from other web development,

00:00:29.110 --> 00:00:34.420
because we have a lot of tools
included in the SDK that you

00:00:34.420 --> 00:00:37.100
can get everything, batteries
included.

00:00:37.100 --> 00:00:41.220
Traditional web development is
scattered, and you have to

00:00:41.220 --> 00:00:45.230
find your own package manager,
and you have to work with a

00:00:45.230 --> 00:00:47.500
bunch of different tools that
don't really integrate well.

00:00:47.500 --> 00:00:50.430
But the great thing about Dart
is that it's very toolable.

00:00:53.590 --> 00:00:57.820
You can get started with
Dart by going to

00:00:57.820 --> 00:01:02.840
dartlang.org/tools, where you
can download the SDK and the

00:01:02.840 --> 00:01:09.090
editor, which we'll be using
for most of this talk.

00:01:09.090 --> 00:01:14.300
The editor has all of the tools
that you need to write,

00:01:14.300 --> 00:01:22.170
edit, test, document, analyze,
publish, and deploy your

00:01:22.170 --> 00:01:26.330
applications to the world.

00:01:26.330 --> 00:01:30.210
Something about me is that
people tell me that I'm too

00:01:30.210 --> 00:01:33.900
timid, and I have a problem
where people don't take me

00:01:33.900 --> 00:01:35.550
seriously on the internet.

00:01:35.550 --> 00:01:39.750
So I want to build a Dart
application that can help me

00:01:39.750 --> 00:01:44.860
be more persuasive on message
boards, comment threads.

00:01:44.860 --> 00:01:49.660
So let's go make something
that will help.

00:01:49.660 --> 00:01:54.510
Let's make an argument clinic
app that helps you become a

00:01:54.510 --> 00:01:56.100
better speaker.

00:01:56.100 --> 00:01:57.970
So we're going to build
this in several parts.

00:01:57.970 --> 00:02:01.380
We're going to make a text
enhancer that takes your text

00:02:01.380 --> 00:02:03.140
and turns it into something
better.

00:02:03.140 --> 00:02:05.630
We'll write the unit tests
so we know it works.

00:02:05.630 --> 00:02:08.460
We'll have documentation so
that we can use it in the

00:02:08.460 --> 00:02:11.009
future, and others
can use our code.

00:02:11.009 --> 00:02:13.400
And then we'll put it together
into a web app, and then share

00:02:13.400 --> 00:02:16.640
it with the world.

00:02:16.640 --> 00:02:20.210
So let's begin by building the
library text enhancer.

00:02:23.680 --> 00:02:25.350
So this is the Dart Editor.

00:02:25.350 --> 00:02:31.080
It was built as a plug-in on top
of Eclipse, but it is its

00:02:31.080 --> 00:02:34.360
own separate editor.

00:02:34.360 --> 00:02:38.040
And it has many useful features
like auto-complete

00:02:38.040 --> 00:02:42.180
and refactoring that
I will show you.

00:02:42.180 --> 00:02:46.920
So this library takes code and
turns it into uppercase so

00:02:46.920 --> 00:02:53.270
your comments are
more persuasive.

00:02:53.270 --> 00:02:57.520
But what if we want to change
this code later?

00:02:57.520 --> 00:03:00.380
We have this quiet
text.toUpperCase.

00:03:00.380 --> 00:03:05.010
And maybe I want to change how
I want to enhance text.

00:03:05.010 --> 00:03:09.140
So let's refactor this in one
step so that we can have it

00:03:09.140 --> 00:03:11.350
individually.

00:03:11.350 --> 00:03:14.290
I could highlight text
and right click.

00:03:14.290 --> 00:03:17.170
Click Extract Method, which
pops open a dialogue.

00:03:17.170 --> 00:03:20.130
And here, this will let me
extract a method and rename

00:03:20.130 --> 00:03:22.210
it, and have it as a
separate method.

00:03:22.210 --> 00:03:25.800
So let's call this something
persuasive.

00:03:28.440 --> 00:03:31.000
So now you see that we have
a new method that was

00:03:31.000 --> 00:03:32.400
added to the file.

00:03:32.400 --> 00:03:37.980
And the previous instance of
that code was replaced here

00:03:37.980 --> 00:03:41.240
with the new call
to the method.

00:03:41.240 --> 00:03:43.380
So how do I know my code is
doing what I want, if it's

00:03:43.380 --> 00:03:46.140
really enhancing my text?

00:03:46.140 --> 00:03:48.740
Well, we would use
a unit test.

00:03:48.740 --> 00:03:50.880
But where would I get
a unit test library?

00:03:54.260 --> 00:03:58.570
The pub package manager is
available from the Dart SDK.

00:03:58.570 --> 00:04:03.240
And it exists as a service and
a tool that you can use to

00:04:03.240 --> 00:04:09.100
share, use, and distribute
packages, which are

00:04:09.100 --> 00:04:10.470
bunches of Dart code.

00:04:14.660 --> 00:04:18.050
Pub.dartlang.org is a great
place you can go to check out

00:04:18.050 --> 00:04:20.850
all the different packages
that are available.

00:04:20.850 --> 00:04:24.400
There are packages for
everything from servers to

00:04:24.400 --> 00:04:27.440
database connectors to
task runners, which

00:04:27.440 --> 00:04:30.300
are all worth using.

00:04:30.300 --> 00:04:36.890
The entry point to any package
is a file called pubspec.yaml.

00:04:36.890 --> 00:04:39.740
And this is a file that
describes your

00:04:39.740 --> 00:04:42.250
application or package.

00:04:42.250 --> 00:04:47.470
And it also lists the
dependencies that your package

00:04:47.470 --> 00:04:49.010
depends on.

00:04:49.010 --> 00:04:50.260
So let's take a look at that.

00:04:52.680 --> 00:05:00.430
The Dart editor has a handy
pubspec editor so that you can

00:05:00.430 --> 00:05:03.720
edit the fields in
an easy fashion.

00:05:03.720 --> 00:05:06.270
Here you see that I have the
name of the package, the

00:05:06.270 --> 00:05:08.860
author of the version,
and the description.

00:05:08.860 --> 00:05:10.620
And we're going to
add a dependency.

00:05:10.620 --> 00:05:13.490
So I know that there is a
great pub package called

00:05:13.490 --> 00:05:17.240
unittest, so I'm going to import
that by clicking the

00:05:17.240 --> 00:05:18.490
Add Dependency button.

00:05:20.670 --> 00:05:25.910
So this will just say that the
unit test package is a

00:05:25.910 --> 00:05:28.880
dependency for your
own package.

00:05:28.880 --> 00:05:34.240
We click Pub Install from here
or from the Tools menu to

00:05:34.240 --> 00:05:36.005
install all the dependencies.

00:05:40.190 --> 00:05:44.730
So this populates the packages
folder with all the packages

00:05:44.730 --> 00:05:46.580
that we depend on.

00:05:46.580 --> 00:05:49.440
So you see that there is this
meta package which was

00:05:49.440 --> 00:05:52.480
included even though it's not
one of our dependencies.

00:05:52.480 --> 00:05:55.640
Transitive dependencies
are also

00:05:55.640 --> 00:05:57.840
included in your own package.

00:05:57.840 --> 00:06:03.750
So unit test depends on meta,
which is added to your own

00:06:03.750 --> 00:06:08.010
package so that the unit task
can function properly.

00:06:08.010 --> 00:06:09.746
Let's go to one of our tests.

00:06:12.300 --> 00:06:18.320
So here we have a simple test
to check if the shout method

00:06:18.320 --> 00:06:21.540
does what we think
it's going to do.

00:06:21.540 --> 00:06:25.240
But you see that there are these
warnings on the side

00:06:25.240 --> 00:06:27.820
that the test function
is not defined.

00:06:27.820 --> 00:06:34.050
We need to import the test
library into our Dart file so

00:06:34.050 --> 00:06:35.300
we can use it.

00:06:37.970 --> 00:06:42.700
And you do that by using
the package:import.

00:06:42.700 --> 00:06:46.760
So this will import the unit
test package, which cleared up

00:06:46.760 --> 00:06:48.370
all the warnings for test.

00:06:48.370 --> 00:06:51.210
However, there's another warning
here, which says that

00:06:51.210 --> 00:06:52.730
the shout is not defined.

00:06:52.730 --> 00:06:55.620
Even though we're in the same
package, you still need to

00:06:55.620 --> 00:07:00.220
include all of the Dart files,
the individual dependencies--

00:07:00.220 --> 00:07:04.230
in this case the
shoutify file.

00:07:04.230 --> 00:07:06.440
And you import that the
same way as you

00:07:06.440 --> 00:07:09.333
would any other package.

00:07:14.150 --> 00:07:17.050
So now you see that the
warning went away now.

00:07:17.050 --> 00:07:18.840
But I forgot a semicolon.

00:07:18.840 --> 00:07:23.310
And the Dart editor will tell
you any time you forget

00:07:23.310 --> 00:07:24.240
something like this.

00:07:24.240 --> 00:07:25.840
It will highlight errors.

00:07:25.840 --> 00:07:27.820
So it expected to find
a semicolon.

00:07:27.820 --> 00:07:30.800
So we're going to add a
semicolon and save.

00:07:30.800 --> 00:07:34.370
And now this code should work.

00:07:34.370 --> 00:07:37.650
You can test that the code
works by hitting the Run

00:07:37.650 --> 00:07:41.230
button up here, or using
Control-R or

00:07:41.230 --> 00:07:43.190
Command-R to run it.

00:07:43.190 --> 00:07:46.780
So let's run it and see
what the output is.

00:07:46.780 --> 00:07:50.240
The unit tests all passed,
as you see here,

00:07:50.240 --> 00:07:51.490
and everything succeeded.

00:07:55.740 --> 00:07:57.420
So what happens if a
unit tests fails?

00:07:57.420 --> 00:08:00.920
Let's change this to from "a
little mouse" to "a little

00:08:00.920 --> 00:08:05.990
moose." And this is going to
fail because we changed how

00:08:05.990 --> 00:08:06.950
the test runs.

00:08:06.950 --> 00:08:09.680
But let's see what actually
is happening.

00:08:09.680 --> 00:08:12.930
In the Dart editor, you can
set a breakpoint to pause

00:08:12.930 --> 00:08:17.160
execution of the code by right
clicking in the margin and

00:08:17.160 --> 00:08:19.080
hitting Toggle Breakpoint.

00:08:19.080 --> 00:08:26.750
So now when we hit Run, the unit
test library has paused.

00:08:26.750 --> 00:08:29.400
And you can see the stack trace

00:08:29.400 --> 00:08:31.230
of the current execution.

00:08:31.230 --> 00:08:37.000
And you see that the loud text
is different from what we

00:08:37.000 --> 00:08:38.760
expect it to be.

00:08:38.760 --> 00:08:41.270
And so this test will fail.

00:08:41.270 --> 00:08:46.100
The debugger lets you step into
code and step over code,

00:08:46.100 --> 00:08:49.650
just like a debugger in other
IDEs, so that you

00:08:49.650 --> 00:08:50.970
can examine the code.

00:08:50.970 --> 00:08:54.000
And it'll give you the values
of any of the local and

00:08:54.000 --> 00:08:55.650
top-level variables.

00:08:55.650 --> 00:08:59.270
So let's stop debugging
and click Resume.

00:08:59.270 --> 00:09:03.930
And you see that our tests
failed, and they printed out

00:09:03.930 --> 00:09:05.410
all sorts of unhappy messages.

00:09:05.410 --> 00:09:09.270
And you see the failure
up here.

00:09:09.270 --> 00:09:14.400
Let's take out this breakpoint
and move on.

00:09:14.400 --> 00:09:16.330
So we have these unit tests.

00:09:16.330 --> 00:09:21.560
But how do we know if our code
is going to be stable, or if

00:09:21.560 --> 00:09:24.220
other people try to depend on
the shoutify library, whether

00:09:24.220 --> 00:09:28.370
they can be assured that
the code works?

00:09:28.370 --> 00:09:30.240
Or, for that matter, what
happens if one of our

00:09:30.240 --> 00:09:32.080
dependencies stops working?

00:09:32.080 --> 00:09:34.440
What if unit test has a breaking
change and we need to

00:09:34.440 --> 00:09:36.490
change things?

00:09:36.490 --> 00:09:40.010
Well, for this we have
drone.io, which is a

00:09:40.010 --> 00:09:44.260
continuous integration service
that monitors your GitHub

00:09:44.260 --> 00:09:49.640
repository or code.google
repository or BitBucket.

00:09:49.640 --> 00:09:55.350
And whenever it detects a change
in your repository or

00:09:55.350 --> 00:09:59.810
in a repository of one of your
dependencies, or if one of

00:09:59.810 --> 00:10:03.800
your dependencies is changed,
then it will rerun all of your

00:10:03.800 --> 00:10:10.120
tests and then submit to you a
notification of whether it

00:10:10.120 --> 00:10:11.540
passed or failed.

00:10:11.540 --> 00:10:12.610
So let's try that.

00:10:12.610 --> 00:10:15.960
So right now I have
a failing test.

00:10:15.960 --> 00:10:18.210
And previously, I had
a passing test.

00:10:18.210 --> 00:10:26.320
So let's go to commit all
the changes I have now.

00:10:26.320 --> 00:10:28.950
And I'm going to push
this repository, and

00:10:28.950 --> 00:10:31.880
we'll see what happens.

00:10:31.880 --> 00:10:33.130
I'm switching over
to drone.io.

00:10:38.080 --> 00:10:39.760
And my push is still
happening.

00:10:39.760 --> 00:10:43.060
But now that it is finished
pushing, you see that on

00:10:43.060 --> 00:10:46.310
drone.io, the build has
already started.

00:10:46.310 --> 00:10:47.850
We can click into it.

00:10:47.850 --> 00:10:52.620
And quickly enough, it shows
that our build failed.

00:10:52.620 --> 00:10:58.510
This is also available as a
badge that you can embed into

00:10:58.510 --> 00:11:04.560
a repository or as a dynamic
png, which I have on the

00:11:04.560 --> 00:11:06.100
package here.

00:11:06.100 --> 00:11:08.550
So it used to be passing, but
if we refresh, you see that

00:11:08.550 --> 00:11:09.070
it's failing.

00:11:09.070 --> 00:11:11.880
So anybody that goes to
pub.dartlang.org into your

00:11:11.880 --> 00:11:15.170
package can see that your latest
tests are not passing.

00:11:15.170 --> 00:11:20.430
So they might not want
to use your package.

00:11:20.430 --> 00:11:23.350
Let's go back and fix that.

00:11:23.350 --> 00:11:27.270
And we won't worry about
pushing it again.

00:11:27.270 --> 00:11:33.520
So to maintain a good package,
you probably want to have good

00:11:33.520 --> 00:11:34.450
documentation.

00:11:34.450 --> 00:11:37.210
Documentation is sort
of like flossing.

00:11:37.210 --> 00:11:39.820
It's something that you don't
always want to do, but you'll

00:11:39.820 --> 00:11:44.320
really thank yourself
later if you do it.

00:11:44.320 --> 00:11:47.140
Documentation in Dart
looks like this.

00:11:47.140 --> 00:11:50.730
There are two forms of
documentation comments.

00:11:50.730 --> 00:11:53.260
There is the /** model,
which lets you

00:11:53.260 --> 00:11:54.650
do multi-line comments.

00:11:54.650 --> 00:11:57.540
And then there's the ///, which
lets you do single line

00:11:57.540 --> 00:12:02.380
comments, or you can chain a
couple of /// comments to have

00:12:02.380 --> 00:12:04.830
a multi-line comment.

00:12:04.830 --> 00:12:08.180
And once you add documentation,
your

00:12:08.180 --> 00:12:14.070
documentation will look
something like this.

00:12:14.070 --> 00:12:19.620
So it will look like the API
documentation for Dart itself,

00:12:19.620 --> 00:12:22.650
which you can see here.

00:12:22.650 --> 00:12:28.740
So api.dartlang.org is a great
resource for seeing all of the

00:12:28.740 --> 00:12:32.840
packaged libraries that
come with Dart, and

00:12:32.840 --> 00:12:36.100
seeing how they work.

00:12:36.100 --> 00:12:40.250
So now that we have
documentation and we have unit

00:12:40.250 --> 00:12:43.960
tests, we might want
to publish our app.

00:12:43.960 --> 00:12:46.330
So it's going to look like it's
failing, but we still

00:12:46.330 --> 00:12:51.370
want to get our new
code up on pub.

00:12:51.370 --> 00:12:56.250
The way that you do this
is by using pub itself

00:12:56.250 --> 00:12:58.030
to publish the app.

00:12:58.030 --> 00:13:00.140
You can do this in several ways,
but one way is to go

00:13:00.140 --> 00:13:02.000
back to your pubspec.

00:13:02.000 --> 00:13:04.790
And there's a button next to
the Pub Install button that

00:13:04.790 --> 00:13:08.450
says publish to Publish
to Pub.

00:13:08.450 --> 00:13:15.550
You click on this, then a
dialogue will ask you if you

00:13:15.550 --> 00:13:16.850
really want to publish this.

00:13:16.850 --> 00:13:21.050
And I want to really enable
people to be heard on the

00:13:21.050 --> 00:13:25.240
internet in their comments and
threads and, really, when they

00:13:25.240 --> 00:13:26.580
have important things to say.

00:13:26.580 --> 00:13:30.760
So let's publish this.

00:13:30.760 --> 00:13:34.850
So this is going to go through
the process of

00:13:34.850 --> 00:13:35.770
publishing to pub.

00:13:35.770 --> 00:13:38.290
And you see that it was
uploaded successfully.

00:13:38.290 --> 00:13:42.390
If we go back to pub,
we see that

00:13:42.390 --> 00:13:45.000
our version has increased.

00:13:45.000 --> 00:13:50.530
So our latest package is already
on pub, and other

00:13:50.530 --> 00:13:53.220
people can start using it.

00:13:53.220 --> 00:13:58.650
So now that we are done with
that, how about we go back to

00:13:58.650 --> 00:14:01.100
our web app.

00:14:01.100 --> 00:14:05.790
So what is our web app going
to look like to begin with?

00:14:05.790 --> 00:14:07.750
So this is what I
built before.

00:14:07.750 --> 00:14:10.150
And right now it doesn't
really do anything.

00:14:10.150 --> 00:14:16.050
Right now, you can edit some
text, and click a button.

00:14:16.050 --> 00:14:17.480
But it doesn't do anything.

00:14:17.480 --> 00:14:21.480
It doesn't really make my
message any more clear.

00:14:21.480 --> 00:14:26.210
So let's do that by modifying
this code.

00:14:26.210 --> 00:14:32.020
We can go to the Dart file I
have for this application.

00:14:32.020 --> 00:14:35.830
And you see here that on
a click, it updates the

00:14:35.830 --> 00:14:37.950
value of the text.

00:14:37.950 --> 00:14:44.650
We want to increase the volume
of our message, so we need to

00:14:44.650 --> 00:14:46.350
use the shout.

00:14:46.350 --> 00:14:54.180
Here we can just modify the text
to be shout(text), which

00:14:54.180 --> 00:14:55.520
is how our method works.

00:14:55.520 --> 00:14:57.490
And we already know it works
because of the unit tests.

00:14:57.490 --> 00:15:02.270
However, we don't have
this test included.

00:15:02.270 --> 00:15:04.900
You could try to import
it like this.

00:15:11.120 --> 00:15:15.030
But this isn't going to work,
because this is a different

00:15:15.030 --> 00:15:16.530
application, and it
doesn't know about

00:15:16.530 --> 00:15:18.180
the shoutify library.

00:15:18.180 --> 00:15:21.830
So we go to the pubspec
for this library.

00:15:21.830 --> 00:15:25.400
And we add it as a dependency
just like we did with unit

00:15:25.400 --> 00:15:29.700
test, except now we have
our own package that

00:15:29.700 --> 00:15:30.650
we can depend on.

00:15:30.650 --> 00:15:35.465
So we run Pub Install to get
everything up and running.

00:15:35.465 --> 00:15:37.870
And we go back here.

00:15:37.870 --> 00:15:40.420
And we save again.

00:15:40.420 --> 00:15:44.030
And now everything is working.

00:15:44.030 --> 00:15:46.780
So now we can deploy
this to the web.

00:15:46.780 --> 00:15:52.040
One tool that you have available
is Dartium, which is

00:15:52.040 --> 00:15:57.440
a development browser that
has the Dart virtual

00:15:57.440 --> 00:16:00.020
machine built in.

00:16:00.020 --> 00:16:07.370
To run it, you right click on
your main Dart or HTML file,

00:16:07.370 --> 00:16:10.620
and they you say
Run In Dartium.

00:16:10.620 --> 00:16:13.220
However, one thing that's great
about having the VM

00:16:13.220 --> 00:16:16.680
included is that you can debug
your application right from

00:16:16.680 --> 00:16:17.990
the Dart editor.

00:16:17.990 --> 00:16:21.640
So let's Toggle Breakpoint right
here, just like we did

00:16:21.640 --> 00:16:28.260
earlier, and right click Run In
Dartium, which will run our

00:16:28.260 --> 00:16:29.280
new application.

00:16:29.280 --> 00:16:31.340
So let's see what happens.

00:16:31.340 --> 00:16:40.780
So let's say "I disagree with
you," which is lackluster.

00:16:40.780 --> 00:16:49.860
Click here, and it clearly makes
your message pop more.

00:16:52.980 --> 00:16:55.174
Let me try this again.

00:17:02.930 --> 00:17:08.980
To get the debugging, I needed
to run Dartium from the HTML

00:17:08.980 --> 00:17:11.579
file, which I did not.

00:17:11.579 --> 00:17:16.170
And so now I am waiting for
the Dartium to load so

00:17:16.170 --> 00:17:18.880
I could debug it.

00:17:24.950 --> 00:17:30.440
But as it is not loading, I am
going to show you how else you

00:17:30.440 --> 00:17:32.550
can deploy your Dart
applications.

00:17:37.740 --> 00:17:43.620
There is a common myth that goes
a little bit like this.

00:17:43.620 --> 00:17:47.130
But Dart is not just
for Chrome.

00:17:47.130 --> 00:17:52.440
It runs in all modern web
browsers using a compiler

00:17:52.440 --> 00:17:55.020
called dart2js, which
converts Dart code

00:17:55.020 --> 00:17:57.690
into JavaScript code.

00:17:57.690 --> 00:18:01.770
We have been making a lot of
progress and many improvements

00:18:01.770 --> 00:18:04.430
in reducing the size of the
JavaScript code that's

00:18:04.430 --> 00:18:06.630
generated from Dart code.

00:18:06.630 --> 00:18:12.670
So if after you minify using
dart2js and run gzip on your

00:18:12.670 --> 00:18:17.215
web server, you can reduce the
size of your JavaScript code

00:18:17.215 --> 00:18:21.050
to something really manageable
and deploy it everywhere.

00:18:21.050 --> 00:18:23.270
However, you're not just
writing in JavaScript.

00:18:23.270 --> 00:18:27.000
You have the full complement
of Dart tools, and you have

00:18:27.000 --> 00:18:31.680
the type system, and you have
the package manager--

00:18:31.680 --> 00:18:34.210
all of this stuff included which
you wouldn't get with

00:18:34.210 --> 00:18:36.820
JavaScript.

00:18:36.820 --> 00:18:41.140
So let's see what this looks
like in different browsers.

00:18:41.140 --> 00:18:43.470
So to run in JavaScript,
you right click

00:18:43.470 --> 00:18:47.050
again on the HTML file.

00:18:47.050 --> 00:18:49.650
And you click Run
As JavaScript.

00:18:49.650 --> 00:18:51.650
And this will create
the JavaScript

00:18:51.650 --> 00:18:52.940
version of your code.

00:18:52.940 --> 00:19:00.020
So you see here that when you
click on the button, you see

00:19:00.020 --> 00:19:01.880
that it works.

00:19:01.880 --> 00:19:03.990
Something else you can do.

00:19:03.990 --> 00:19:09.920
In browsers that support source
maps, you can go into

00:19:09.920 --> 00:19:14.370
the actual Dart file from the
developer tools, and debug it

00:19:14.370 --> 00:19:17.110
straight from the browser,
from Dart in this case.

00:19:17.110 --> 00:19:19.890
So here I could set
a breakpoint in

00:19:19.890 --> 00:19:21.610
the developer tools.

00:19:21.610 --> 00:19:25.310
And now when I click on this
button, it actually pauses the

00:19:25.310 --> 00:19:27.340
execution of the
JavaScript app.

00:19:27.340 --> 00:19:30.160
But I'm still looking
at the Dart code.

00:19:30.160 --> 00:19:34.080
So this makes it very easy to
debug your applications in

00:19:34.080 --> 00:19:36.970
different browsers where there
are source maps available.

00:19:36.970 --> 00:19:41.310
And this is included
automatically whenever you

00:19:41.310 --> 00:19:42.560
compile the dart2js.

00:19:45.030 --> 00:19:49.320
So just to show you that we
mean business, here is the

00:19:49.320 --> 00:19:53.480
same application in Firefox--

00:19:53.480 --> 00:19:55.940
works as you would imagine.

00:19:55.940 --> 00:19:59.700
And here it is Internet
Explorer.

00:19:59.700 --> 00:20:03.290
And I forgot to refresh.

00:20:03.290 --> 00:20:05.280
And here it works perfectly.

00:20:07.790 --> 00:20:11.790
So let's go back and see
what else we could do.

00:20:11.790 --> 00:20:16.080
So I've shown you how to build,
test, deploy, and

00:20:16.080 --> 00:20:19.150
document this package.

00:20:19.150 --> 00:20:23.540
But maybe you're not too
interested in working in the

00:20:23.540 --> 00:20:24.190
Dart editor.

00:20:24.190 --> 00:20:27.430
Or maybe you want to SSH into
a machine where you're more

00:20:27.430 --> 00:20:28.090
comfortable working.

00:20:28.090 --> 00:20:30.450
Or maybe you have a different
text editor.

00:20:30.450 --> 00:20:34.000
Well I'm happy to say that all
of the tools that I've shown

00:20:34.000 --> 00:20:37.760
you-- dart2js, the documentation
generator, pub--

00:20:37.760 --> 00:20:43.520
are all available on
the command line.

00:20:43.520 --> 00:20:46.950
So here I could do
pub install.

00:20:46.950 --> 00:20:49.020
And if I was in the
right directory

00:20:49.020 --> 00:20:50.270
it would have worked.

00:20:52.310 --> 00:20:53.390
I do pub install.

00:20:53.390 --> 00:20:55.070
And it does the same thing.

00:20:55.070 --> 00:20:57.470
It resolves all dependencies
and installs them.

00:20:57.470 --> 00:21:02.350
You do the same thing with
dart2js, the Dart

00:21:02.350 --> 00:21:03.710
documentation tool--

00:21:03.710 --> 00:21:06.330
all of this can run from
the command line.

00:21:06.330 --> 00:21:10.900
But we also have support for
a full complement of text

00:21:10.900 --> 00:21:14.980
editors and IDEs like Eclipse
and WebStorm, which have

00:21:14.980 --> 00:21:16.490
really great integration.

00:21:16.490 --> 00:21:18.870
But I want to show you something
that we have fairly

00:21:18.870 --> 00:21:22.700
recently is our Sublime
integration.

00:21:22.700 --> 00:21:26.650
So you can install the Dart
plug-in for Sublime using the

00:21:26.650 --> 00:21:27.900
package control plug-in.

00:21:30.990 --> 00:21:34.680
And it's as simple as doing
Package Control, Install

00:21:34.680 --> 00:21:37.970
Package, and then Dart.

00:21:37.970 --> 00:21:42.170
And fairly quickly, your package
will be installed.

00:21:42.170 --> 00:21:44.780
And then you could set
syntax to Dart.

00:21:44.780 --> 00:21:48.780
And then your Dart code will
be syntax highlighted.

00:21:48.780 --> 00:21:50.570
From here, you could also
do pub install.

00:21:53.170 --> 00:21:57.950
You can also run the analyzer,
which will tell you about any

00:21:57.950 --> 00:22:00.980
errors you have in your code.

00:22:00.980 --> 00:22:03.710
For example, if I remove this
semicolon and I run the

00:22:03.710 --> 00:22:07.670
analyzer, then it will tell
me that there is a missing

00:22:07.670 --> 00:22:09.400
semicolon right here
in Sublime.

00:22:09.400 --> 00:22:13.120
So you can keep your
productivity high with the

00:22:13.120 --> 00:22:16.760
editor that you're used to.

00:22:16.760 --> 00:22:20.320
There's way more tools than I
could possibly go into in this

00:22:20.320 --> 00:22:21.450
short amount of time.

00:22:21.450 --> 00:22:25.530
But here a couple of libraries
that are available in pub.

00:22:25.530 --> 00:22:30.730
There's really excellent
task runners.

00:22:30.730 --> 00:22:34.300
The web UI library is great
for building modern user

00:22:34.300 --> 00:22:38.200
interfaces with a model
view, whatever model.

00:22:38.200 --> 00:22:41.400
There is a great build
pack for Heroku.

00:22:41.400 --> 00:22:44.620
So if you have a server-side
application, you could push it

00:22:44.620 --> 00:22:49.660
to Heroku in one step and have
your application live.

00:22:49.660 --> 00:22:51.830
And there's way more.

00:22:51.830 --> 00:22:53.880
And more is coming
out all the time.

00:22:57.560 --> 00:23:00.020
So if we go back to the argument
clinic and see if we

00:23:00.020 --> 00:23:03.680
accomplished everything we
wanted to, we saw that we were

00:23:03.680 --> 00:23:06.570
able to be more persuasive
on the internet.

00:23:06.570 --> 00:23:09.350
And we made it possible for
other people to use our

00:23:09.350 --> 00:23:13.690
application by sharing it
as a web app and as

00:23:13.690 --> 00:23:16.030
a package on pub.

00:23:16.030 --> 00:23:22.160
So perhaps if somebody wants
to mash up a text enhancer

00:23:22.160 --> 00:23:25.650
with some social network,
they could do so

00:23:25.650 --> 00:23:28.480
using the APIs provided.

00:23:28.480 --> 00:23:32.220
And I think I've made the
world a little better by

00:23:32.220 --> 00:23:35.515
making your comments
more persuasive.

00:23:39.420 --> 00:23:41.610
Thank you for listening
to this talk.

00:23:41.610 --> 00:23:45.300
If you want to find out more
about Dart, you can go to

00:23:45.300 --> 00:23:46.330
dartlang.org.

00:23:46.330 --> 00:23:49.510
There we have a full complement
of videos,

00:23:49.510 --> 00:23:55.640
articles, documentation,
tutorials, mailing lists.

00:23:55.640 --> 00:24:00.460
You can also catch us on the
Google+ community Dartisans.

00:24:00.460 --> 00:24:06.500
And most of all, I want you to
go out and be productive, and

00:24:06.500 --> 00:24:07.900
give it what for.

00:24:07.900 --> 00:24:09.150
Thanks.

