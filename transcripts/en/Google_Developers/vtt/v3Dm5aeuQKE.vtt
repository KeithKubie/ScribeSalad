WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.340
[MUSIC PLAYING]

00:00:06.340 --> 00:00:07.990
DAVE SMITH: Good
afternoon, everybody.

00:00:07.990 --> 00:00:10.011
How's I/O far?

00:00:10.011 --> 00:00:10.510
Oh come on.

00:00:10.510 --> 00:00:10.720
Come on.

00:00:10.720 --> 00:00:10.960
Come on.

00:00:10.960 --> 00:00:11.230
Come on.

00:00:11.230 --> 00:00:11.830
Give me something.

00:00:11.830 --> 00:00:12.330
[APPLAUSE]

00:00:12.330 --> 00:00:14.090
There we go.

00:00:14.090 --> 00:00:14.590
Awesome.

00:00:14.590 --> 00:00:15.135
Awesome.

00:00:15.135 --> 00:00:16.760
Well, thank you so
much for joining us.

00:00:16.760 --> 00:00:17.676
My name is Dave Smith.

00:00:17.676 --> 00:00:19.750
I'm a developer advocate
on the IoT platform team

00:00:19.750 --> 00:00:20.554
here at Google.

00:00:20.554 --> 00:00:21.970
RENATO MANGENI:
I'm Renato Mangeni

00:00:21.970 --> 00:00:24.000
and I'm a Develop Blog
programs engineer.

00:00:24.000 --> 00:00:25.862
I work in [INAUDIBLE]
here at Google

00:00:25.862 --> 00:00:27.820
DAVE SMITH: And we're
here to talk to you today

00:00:27.820 --> 00:00:31.210
a little bit about how you can
easily get started developing

00:00:31.210 --> 00:00:34.090
for Android Things using a
tool you probably already know,

00:00:34.090 --> 00:00:36.152
which is Android Studio.

00:00:36.152 --> 00:00:38.110
So let's talk a little
bit about Android Things

00:00:38.110 --> 00:00:40.870
for just a minute Android Things
is an extension of the Android

00:00:40.870 --> 00:00:43.570
platform to a brand
new form factor,

00:00:43.570 --> 00:00:45.105
in this case for
Embedded in IoT.

00:00:45.105 --> 00:00:46.480
This is something
that we've done

00:00:46.480 --> 00:00:49.180
in the past with other
form factors such as Where,

00:00:49.180 --> 00:00:51.120
Android TV, Android Auto.

00:00:51.120 --> 00:00:53.980
And Android Things is just
yet another form factor

00:00:53.980 --> 00:00:56.397
where we're bringing all the
power of the Android platform

00:00:56.397 --> 00:00:57.896
in the framework
that you're already

00:00:57.896 --> 00:00:59.530
familiar with to
this new form factor

00:00:59.530 --> 00:01:01.820
in building new use cases.

00:01:01.820 --> 00:01:04.269
This is a really great
thing for embedded in IoT,

00:01:04.269 --> 00:01:08.350
specifically because it brings
Android's best-in-class tools

00:01:08.350 --> 00:01:12.280
to a space that traditionally
hasn't had very well integrated

00:01:12.280 --> 00:01:13.210
tooling.

00:01:13.210 --> 00:01:15.040
You know, often
developing environments,

00:01:15.040 --> 00:01:17.890
debugging environments in
Embedded, are decoupled,

00:01:17.890 --> 00:01:18.670
they're separated.

00:01:18.670 --> 00:01:20.710
There's not a real well
integrated experience

00:01:20.710 --> 00:01:21.940
in a lot of cases.

00:01:21.940 --> 00:01:24.820
And that's what makes Android
Things and Android Studio

00:01:24.820 --> 00:01:27.940
so awesome, is the fact that
we have this fully integrated

00:01:27.940 --> 00:01:29.680
development
experience, where you

00:01:29.680 --> 00:01:32.770
can use these powerful
tools like Android Studio

00:01:32.770 --> 00:01:35.890
to develop, debug, and
deploy your applications

00:01:35.890 --> 00:01:39.230
to your devices for development
and then again into production.

00:01:39.230 --> 00:01:42.640
Basically, it makes embedded
development as simple

00:01:42.640 --> 00:01:44.560
as mobile development
has become because

00:01:44.560 --> 00:01:47.800
of these powerful tools.

00:01:47.800 --> 00:01:50.574
So most of you
are probably-- let

00:01:50.574 --> 00:01:51.740
me just see a show of hands.

00:01:51.740 --> 00:01:54.310
How many of you are Android
developers in the room?

00:01:54.310 --> 00:01:58.660
How many of you use Android
Studio roughly every day?

00:01:58.660 --> 00:01:59.500
OK, great.

00:01:59.500 --> 00:02:02.730
So this is awesome, because you
guys already know this tool.

00:02:02.730 --> 00:02:05.020
And you know all of the
amazing things that it

00:02:05.020 --> 00:02:08.259
can do for you, in terms of
development and deployment,

00:02:08.259 --> 00:02:11.020
but just to give you some
background or some idea here.

00:02:11.020 --> 00:02:14.710
This means that now you can use
some of these amazing Android

00:02:14.710 --> 00:02:16.210
Studio features
that you're already

00:02:16.210 --> 00:02:20.020
familiar with like Instant Run,
the UI Layout Builders, and all

00:02:20.020 --> 00:02:23.680
of these great tools to
now build applications

00:02:23.680 --> 00:02:25.030
for embedded devices.

00:02:25.030 --> 00:02:26.740
This also means that
you can leverage

00:02:26.740 --> 00:02:29.890
all of the deep integrations
that are already in Android

00:02:29.890 --> 00:02:31.750
Studio for Google services.

00:02:31.750 --> 00:02:34.420
The deep integrations for
things like Firebase as well as

00:02:34.420 --> 00:02:36.580
the Google Cloud Platform.

00:02:36.580 --> 00:02:38.260
And in addition
to these features,

00:02:38.260 --> 00:02:41.620
Android Studio also has these
fully featured debugging

00:02:41.620 --> 00:02:43.150
and profiling tools.

00:02:43.150 --> 00:02:46.150
You have this amazing
step through debugger

00:02:46.150 --> 00:02:48.670
that you can set watch
points, execute arbitrary

00:02:48.670 --> 00:02:49.930
code expressions.

00:02:49.930 --> 00:02:52.457
You can do all of these
things on your target device

00:02:52.457 --> 00:02:54.790
the same way you do when you
do your Android development

00:02:54.790 --> 00:02:56.110
and apps today.

00:02:56.110 --> 00:02:58.550
But in addition, we also have
all of these new profiling

00:02:58.550 --> 00:02:59.050
tools.

00:02:59.050 --> 00:03:01.424
You saw some of them were just
announced at the developer

00:03:01.424 --> 00:03:05.470
keynote yesterday, for profiling
CPU performance, memory, object

00:03:05.470 --> 00:03:07.960
allocations, and tracking
down issues in your program

00:03:07.960 --> 00:03:09.470
and performance problems.

00:03:09.470 --> 00:03:11.920
So all of these tools that
we've announced here at IO,

00:03:11.920 --> 00:03:13.336
as well as the
ones you're already

00:03:13.336 --> 00:03:15.280
familiar with using
in Android Studio,

00:03:15.280 --> 00:03:17.320
you can now apply
those same tools

00:03:17.320 --> 00:03:21.204
to developing for
embedded and for IoT.

00:03:21.204 --> 00:03:23.370
All right, so that's enough
about talking about what

00:03:23.370 --> 00:03:25.170
you probably already know.

00:03:25.170 --> 00:03:26.790
Let's talk about the new stuff.

00:03:26.790 --> 00:03:28.860
So as you probably
heard yesterday,

00:03:28.860 --> 00:03:32.190
we announced the new preview
of Android Studio 3.0,

00:03:32.190 --> 00:03:35.100
and one of the new features
in Android Studio 3.0

00:03:35.100 --> 00:03:39.760
is direct support for Android
Things as a device form factor.

00:03:39.760 --> 00:03:41.680
So let's take a look
at what we've added.

00:03:41.680 --> 00:03:44.820
So now if you are using the
Preview of Android Studio

00:03:44.820 --> 00:03:47.790
and you create a new project,
what you'll see is Android

00:03:47.790 --> 00:03:50.820
Things is now listed as
one of those form factors

00:03:50.820 --> 00:03:53.406
that you can select when
you build a new project.

00:03:53.406 --> 00:03:54.780
Now the interesting
thing to note

00:03:54.780 --> 00:03:58.320
here is that it's not mutually
exclusive with phone and tablet

00:03:58.320 --> 00:03:59.550
or any of the others.

00:03:59.550 --> 00:04:01.890
So in theory, you could
build an application

00:04:01.890 --> 00:04:05.846
that targets both phone and
tablet and Android Things.

00:04:05.846 --> 00:04:07.470
Interesting use case
for this might be,

00:04:07.470 --> 00:04:10.410
maybe you want to build a
companion application that

00:04:10.410 --> 00:04:12.890
goes along with what's
running on Android Things

00:04:12.890 --> 00:04:15.108
and you'd like to share
as much code as possible.

00:04:15.108 --> 00:04:17.399
You could actually build them
into the same application

00:04:17.399 --> 00:04:19.529
project, just using
different entry points

00:04:19.529 --> 00:04:20.730
via different activities.

00:04:20.730 --> 00:04:23.980
We'll talk about that a
little bit more in a bit.

00:04:23.980 --> 00:04:25.750
All right, so what
does that actually do?

00:04:25.750 --> 00:04:28.240
When I check that little
Android Things box,

00:04:28.240 --> 00:04:30.190
what is being added
to my project?

00:04:30.190 --> 00:04:31.990
So what that does,
is it walks through,

00:04:31.990 --> 00:04:33.700
and when it creates
the new project,

00:04:33.700 --> 00:04:36.340
it automatically adds the
Android Things support

00:04:36.340 --> 00:04:38.740
libraries to that
project for you,

00:04:38.740 --> 00:04:40.510
in the form of the
Gradle Dependency,

00:04:40.510 --> 00:04:42.672
as well as the required
manifest element there.

00:04:42.672 --> 00:04:44.380
If you've been through
our documentation,

00:04:44.380 --> 00:04:46.450
you've seen us telling
you to manually add

00:04:46.450 --> 00:04:48.908
these things if you've been
playing around with the preview

00:04:48.908 --> 00:04:50.350
before, and now
Android Studio is

00:04:50.350 --> 00:04:52.490
going to add them for
you automatically.

00:04:52.490 --> 00:04:54.910
So if you're not familiar with
Android Things development

00:04:54.910 --> 00:04:57.640
directly, this support
library essentially

00:04:57.640 --> 00:05:01.720
adds a bunch of new APIs that
are specific to Android Things

00:05:01.720 --> 00:05:04.870
for interacting with low
level peripheral devices.

00:05:04.870 --> 00:05:07.989
And these APIs have names
like GPIO, PWM, SPI,

00:05:07.989 --> 00:05:10.030
and all the other ones
that we have listed there.

00:05:10.030 --> 00:05:11.260
And maybe you've
heard of those things.

00:05:11.260 --> 00:05:12.310
Maybe you haven't.

00:05:12.310 --> 00:05:13.960
But essentially
they're all interfaces

00:05:13.960 --> 00:05:16.630
that are used to connect low
level hardware like buttons,

00:05:16.630 --> 00:05:19.580
LEDs, sensors, and
things like that.

00:05:19.580 --> 00:05:21.130
So now you can
communicate with those

00:05:21.130 --> 00:05:23.800
directly inside of your
app, and the support library

00:05:23.800 --> 00:05:26.560
allows you to do that,
and now Android Studio

00:05:26.560 --> 00:05:28.850
will automatically add
that to your project

00:05:28.850 --> 00:05:31.162
if you target Android things.

00:05:31.162 --> 00:05:32.620
The next thing that
you'll see when

00:05:32.620 --> 00:05:35.170
you create a new project
targeting Android Things

00:05:35.170 --> 00:05:38.830
is an activity dialog to
add a new empty activity

00:05:38.830 --> 00:05:40.370
to your project.

00:05:40.370 --> 00:05:43.150
Now this is also important
because an Android Things

00:05:43.150 --> 00:05:47.447
application must have at least
one main entry point activity.

00:05:47.447 --> 00:05:49.780
So to discuss that a little
bit, let me kind of walk you

00:05:49.780 --> 00:05:52.390
through what happens when
Android Things starts up

00:05:52.390 --> 00:05:53.415
for the first time.

00:05:53.415 --> 00:05:54.790
So Android Things
is a little bit

00:05:54.790 --> 00:05:56.350
different than
traditional Android

00:05:56.350 --> 00:05:59.620
in that there's not a launcher
application on the device

00:05:59.620 --> 00:06:02.440
that the user would choose
to pick a particular app

00:06:02.440 --> 00:06:04.840
and then launch that so that
they can interact with it.

00:06:04.840 --> 00:06:06.631
It's not to say that
Android Things doesn't

00:06:06.631 --> 00:06:08.800
have a graphical display,
because it might.

00:06:08.800 --> 00:06:11.440
But what it does mean, is that
we have to somehow provide

00:06:11.440 --> 00:06:14.260
a mechanism, so that
Android can automatically

00:06:14.260 --> 00:06:16.720
launch whatever the
primary application is

00:06:16.720 --> 00:06:19.660
that you've developed, once
this system fully boots.

00:06:19.660 --> 00:06:22.150
So the way that we do that,
is once Android is finished

00:06:22.150 --> 00:06:24.580
booting, there is an
intermediary app that we've

00:06:24.580 --> 00:06:27.040
built into the system
called the IoT launcher.

00:06:27.040 --> 00:06:30.640
And that launcher is looking
for a very specific activity

00:06:30.640 --> 00:06:32.650
of intent on the
system that it can

00:06:32.650 --> 00:06:35.440
launch as the first
main application that's

00:06:35.440 --> 00:06:38.675
ready to run whatever
code you've developed.

00:06:38.675 --> 00:06:41.050
Now again, if you've done some
Android Things development

00:06:41.050 --> 00:06:43.684
before, you might have seen
this in our documentation.

00:06:43.684 --> 00:06:45.100
But essentially,
it means that you

00:06:45.100 --> 00:06:47.140
are creating an
activity that has

00:06:47.140 --> 00:06:51.310
an intent filter that includes
this IoT launcher category.

00:06:51.310 --> 00:06:53.050
And the IoT launcher
app will look

00:06:53.050 --> 00:06:55.420
for an activity
that has that filter

00:06:55.420 --> 00:06:58.420
and automatically launch it
as the primary application

00:06:58.420 --> 00:06:59.397
on the device.

00:06:59.397 --> 00:07:01.480
Now from that point, you
can do whatever you like.

00:07:01.480 --> 00:07:02.814
You could start other services.

00:07:02.814 --> 00:07:04.480
You could even launch
other applications

00:07:04.480 --> 00:07:06.100
if you have multiple APKs.

00:07:06.100 --> 00:07:09.790
But that single entry point that
we require to get your app up

00:07:09.790 --> 00:07:10.670
and running.

00:07:10.670 --> 00:07:12.820
And again when you use
the new activity template

00:07:12.820 --> 00:07:14.950
in Android Studio,
what it's going to do

00:07:14.950 --> 00:07:17.350
is automatically add
all of that boilerplate

00:07:17.350 --> 00:07:19.155
to the manifest for
you, so that you

00:07:19.155 --> 00:07:20.530
don't have to
remember to do that

00:07:20.530 --> 00:07:23.960
for that specific activity.

00:07:23.960 --> 00:07:27.410
All right, so one more
thing about Android Studio.

00:07:27.410 --> 00:07:30.710
I mentioned before that there
is a possibility for having

00:07:30.710 --> 00:07:33.950
a display on an Android Things
device, but it's not required.

00:07:33.950 --> 00:07:37.490
We say that essentially displays
are optional in Android Things.

00:07:37.490 --> 00:07:40.212
Because of that there are
some Android behaviors that

00:07:40.212 --> 00:07:41.670
might work a little
bit differently

00:07:41.670 --> 00:07:44.510
than traditional Android, and
one of those that's very common

00:07:44.510 --> 00:07:48.230
are APIs that would typically
show a dialog to the user.

00:07:48.230 --> 00:07:50.240
One example is runtime
permissions, probably

00:07:50.240 --> 00:07:51.620
the most common.

00:07:51.620 --> 00:07:54.080
Now, the issue with showing
a runtime permissions dialog

00:07:54.080 --> 00:07:56.640
to require access
to particular APIs

00:07:56.640 --> 00:08:00.200
is we can't necessarily do
that if there's no display.

00:08:00.200 --> 00:08:03.980
So in Android Things these
dialogs do not display

00:08:03.980 --> 00:08:07.220
and permissions are granted
to applications by default,

00:08:07.220 --> 00:08:09.140
even if they're
dangerous permissions.

00:08:09.140 --> 00:08:11.930
We say that they're
granted at install time,

00:08:11.930 --> 00:08:14.942
but it turns out there's a
little bit of an implementation

00:08:14.942 --> 00:08:16.400
difference in here
that some of you

00:08:16.400 --> 00:08:19.040
may have experienced if you've
done the development so far.

00:08:19.040 --> 00:08:20.660
It turns out that
those permissions

00:08:20.660 --> 00:08:24.530
are granted when the when
the device first boots.

00:08:24.530 --> 00:08:28.160
So on reboot, the device will
grant application permissions

00:08:28.160 --> 00:08:30.380
based on what they've
requested in their manifest.

00:08:30.380 --> 00:08:33.350
So there's no dialogue, but
during development, this

00:08:33.350 --> 00:08:34.770
creates a bit of a gap.

00:08:34.770 --> 00:08:37.520
There's actually a period of
time between when you install

00:08:37.520 --> 00:08:39.503
your app on the
device the first time,

00:08:39.503 --> 00:08:41.419
and when it may or may
not have been rebooted,

00:08:41.419 --> 00:08:43.752
where that permission is not
granted to you and that can

00:08:43.752 --> 00:08:46.490
cause some friction when
you're doing development .

00:08:46.490 --> 00:08:49.970
There are ways around this by
manually rebooting the device,

00:08:49.970 --> 00:08:52.070
or in some cases,
you can manually

00:08:52.070 --> 00:08:54.470
install the APK using
the grant permissions

00:08:54.470 --> 00:08:56.840
flag to override all of this.

00:08:56.840 --> 00:09:00.710
In Android Studio 3.0 preview,
this is now done for you.

00:09:00.710 --> 00:09:03.410
When we detect that you are
connecting to an Android Things

00:09:03.410 --> 00:09:06.290
target device and you
download your code out

00:09:06.290 --> 00:09:08.630
of Android Studio,
we will automatically

00:09:08.630 --> 00:09:11.150
grant those permissions
at install time the way

00:09:11.150 --> 00:09:13.940
you expect, so that you don't
have to do these manual work

00:09:13.940 --> 00:09:15.680
arounds, or reboot the device.

00:09:15.680 --> 00:09:18.272
All this is now much smoother,
much easier to work with,

00:09:18.272 --> 00:09:19.730
now that we've got
full integration

00:09:19.730 --> 00:09:22.640
with Android Studio.

00:09:22.640 --> 00:09:26.377
OK, so now I'd like to show you
some of this stuff in practice.

00:09:26.377 --> 00:09:27.960
So I'm going to hand
it over to Renato

00:09:27.960 --> 00:09:29.251
who's going to show you a demo.

00:09:29.251 --> 00:09:31.622
Can we switch the demo please?

00:09:31.622 --> 00:09:32.830
RENATO MANGENI: Hi, everyone.

00:09:32.830 --> 00:09:35.136
Are you ready for
a live coding demo?

00:09:35.136 --> 00:09:37.430
[APPLAUSE]

00:09:37.430 --> 00:09:39.420
Hold your claps for later.

00:09:39.420 --> 00:09:42.170
Let's check if everything
works as expected.

00:09:42.170 --> 00:09:45.390
I just launched the
Android Studio 3.0,

00:09:45.390 --> 00:09:46.760
which we've just launched.

00:09:46.760 --> 00:09:48.320
We just announced
that yesterday.

00:09:48.320 --> 00:09:49.610
You can download it right now.

00:09:49.610 --> 00:09:53.450
It's public, but it's
on Canary Channel.

00:09:53.450 --> 00:09:55.790
So it's not stable.

00:09:55.790 --> 00:09:58.232
That means this is risky.

00:09:58.232 --> 00:09:59.440
What we are going to do here.

00:09:59.440 --> 00:10:01.820
I'm going to start a new
project, a new Android Things

00:10:01.820 --> 00:10:05.210
project, from scratch, using
the support that we just

00:10:05.210 --> 00:10:07.706
added to Android Studio,
and then from there

00:10:07.706 --> 00:10:09.080
we're going to do
something else.

00:10:17.250 --> 00:10:22.223
I will enable form factor
support for Android Things.

00:10:22.223 --> 00:10:27.220
I will add a empty activity,
just like Dave showed,

00:10:27.220 --> 00:10:29.500
and I don't want to
deal with UI now,

00:10:29.500 --> 00:10:33.460
because I would actually
run this app on this device

00:10:33.460 --> 00:10:36.160
as you can see here
and this device has

00:10:36.160 --> 00:10:39.280
no UI, no traditional UI,
so let's disable that.

00:10:43.000 --> 00:10:44.530
OK, now it's
generating a project.

00:10:44.530 --> 00:10:47.290
I will explain a little
bit of what this device is.

00:10:47.290 --> 00:10:50.200
This is one of the many boards
that we support Android Things

00:10:50.200 --> 00:10:52.640
on, and on top of
that you can see

00:10:52.640 --> 00:10:55.210
a, what we call a
hat, which is just

00:10:55.210 --> 00:11:00.170
a board with a bunch of sensors
and buttons and segments

00:11:00.170 --> 00:11:00.870
plays, etc.

00:11:00.870 --> 00:11:03.860
We are going to play
with that a little bit.

00:11:03.860 --> 00:11:06.760
OK, here we have the activity.

00:11:06.760 --> 00:11:12.550
If I switch to my
[? build gradle, ?]

00:11:12.550 --> 00:11:16.030
you can see that the Android
Things support library

00:11:16.030 --> 00:11:18.770
is added automatically.

00:11:18.770 --> 00:11:20.870
So I'm ready to do something.

00:11:20.870 --> 00:11:22.660
What do you want me to do, Dave?

00:11:22.660 --> 00:11:24.470
DAVE SMITH: Well, I
guess the first project

00:11:24.470 --> 00:11:26.110
everybody does with
hardware is a blinky light.

00:11:26.110 --> 00:11:27.800
That's kind of the "Hello
world" of hardware.

00:11:27.800 --> 00:11:28.030
So let's-

00:11:28.030 --> 00:11:28.820
RENATO MANGENI:
Hello world, right?

00:11:28.820 --> 00:11:29.486
DAVE SMITH: Yep.

00:11:29.486 --> 00:11:31.630
RENATO MANGENI: OK, let's
do a Hello world here.

00:11:31.630 --> 00:11:32.650
First thing.

00:11:32.650 --> 00:11:35.770
We have this notion of a
driver on Android Things.

00:11:35.770 --> 00:11:38.530
We don't want to you guys
to do all the low level

00:11:38.530 --> 00:11:41.740
stuff for every
standard peripheral,

00:11:41.740 --> 00:11:44.210
every standard
sensor, or display.

00:11:44.210 --> 00:11:46.660
So we provide that and
we count on the community

00:11:46.660 --> 00:11:50.560
to provide more of
those high level drivers

00:11:50.560 --> 00:11:51.310
for these sensors.

00:11:51.310 --> 00:11:53.810
So you don't have to
deal with I squared S,

00:11:53.810 --> 00:11:56.740
I squared C, SPI, and
those low level protocols

00:11:56.740 --> 00:12:00.010
every time you just
want your blinky LED.

00:12:00.010 --> 00:12:03.040
For this particular hat,
for this particular board

00:12:03.040 --> 00:12:06.730
with a lot of sensors, we
created a method driver

00:12:06.730 --> 00:12:10.470
that contains every single
sensor or peripheral

00:12:10.470 --> 00:12:11.770
that has in that board.

00:12:12.310 --> 00:12:18.555
So I would start by adding
the dependency on that driver.

00:12:29.173 --> 00:12:30.652
Is it better?

00:12:40.520 --> 00:12:42.725
OK, so I just added dependency.

00:12:42.725 --> 00:12:45.890
This library is
published on J Center,

00:12:45.890 --> 00:12:50.000
so it means that when
I sync, it will add

00:12:50.000 --> 00:12:53.840
all the transity of dependency.

00:12:53.840 --> 00:12:55.040
And why it does that?

00:12:55.040 --> 00:12:57.041
I will go back to my activity.

00:13:04.260 --> 00:13:05.480
OK.

00:13:05.480 --> 00:13:17.165
Now-- I will start
with Open the LED.

00:13:17.165 --> 00:13:20.260
See, there are three LEDs
here that are currently on.

00:13:20.260 --> 00:13:22.610
There is a red, green, and blue.

00:13:22.610 --> 00:13:26.300
And by using this
class from the driver,

00:13:26.300 --> 00:13:28.430
I can open any of these.

00:13:28.430 --> 00:13:29.330
I opened the red.

00:13:29.330 --> 00:13:32.200
Now, there is an exception.

00:13:32.200 --> 00:13:35.965
I would just handle it
the default way and--

00:13:40.890 --> 00:13:42.140
set the value.

00:13:42.140 --> 00:13:47.460
I also added the LED
direction as out.

00:13:47.460 --> 00:13:50.130
So this is something that
we send the signal to,

00:13:50.130 --> 00:13:53.040
not something that we
collect the signal from.

00:13:53.040 --> 00:13:57.180
And I would throw
that in the loop.

00:13:57.180 --> 00:14:00.030
I'm pretty sure
Dave has something

00:14:00.030 --> 00:14:01.384
to complain about that.

00:14:01.384 --> 00:14:02.550
We'll talk about that later.

00:14:16.710 --> 00:14:19.590
OK, if you are an
Android developer,

00:14:19.590 --> 00:14:22.040
you can see that what
we are doing here--

00:14:22.040 --> 00:14:24.170
we open up the LED.

00:14:24.170 --> 00:14:25.850
We got into a loop.

00:14:25.850 --> 00:14:28.520
And we set the value
every 300 milliseconds

00:14:28.520 --> 00:14:31.100
to an alternate value.

00:14:31.100 --> 00:14:35.460
And now, I will run the app.

00:14:35.460 --> 00:14:37.010
Here are the devices I have.

00:14:37.010 --> 00:14:41.450
The only device I have
connected is the IMX 7D,

00:14:41.450 --> 00:14:42.380
which is this board.

00:14:46.790 --> 00:14:49.030
Cross your fingers, please.

00:14:49.030 --> 00:14:50.860
If all goes well
after some time,

00:14:50.860 --> 00:14:54.020
the red LED will start blinking.

00:15:02.330 --> 00:15:03.048
It's working.

00:15:03.048 --> 00:15:04.381
[APPLAUSE]

00:15:04.880 --> 00:15:05.690
Awesome, right?

00:15:05.690 --> 00:15:07.330
I'm done.

00:15:07.330 --> 00:15:08.720
DAVE SMITH: So it works.

00:15:08.720 --> 00:15:09.400
That's great.

00:15:09.400 --> 00:15:12.190
But you're a pretty
experienced Android developer.

00:15:12.190 --> 00:15:14.660
I'm not real sure that
putting an infinite

00:15:14.660 --> 00:15:17.577
While loop and On Create is
the best way to handle this.

00:15:17.577 --> 00:15:18.910
You think maybe we can fix that?

00:15:18.910 --> 00:15:19.660
RENATO MANGENI: I told you guys.

00:15:19.660 --> 00:15:20.160
Yeah.

00:15:20.160 --> 00:15:22.030
I knew he would
complain about that.

00:15:22.030 --> 00:15:24.910
OK, so that's a very good point.

00:15:24.910 --> 00:15:28.680
Despite not having a UI, Android
Things should not do it--

00:15:28.680 --> 00:15:30.880
you have to follow the
same rules of Android.

00:15:30.880 --> 00:15:32.980
You should not block
the main triad.

00:15:32.980 --> 00:15:33.700
Why?

00:15:33.700 --> 00:15:35.680
If you don't have a
why, you don't need

00:15:35.680 --> 00:15:37.300
to refresh your why, right?

00:15:37.300 --> 00:15:39.700
However, you have events
like keyboard events

00:15:39.700 --> 00:15:43.340
that can still be sent
to your applications,

00:15:43.340 --> 00:15:44.440
to your main triad.

00:15:44.440 --> 00:15:45.850
You have sensor events.

00:15:45.850 --> 00:15:48.270
So you have a bunch
of other stuff.

00:15:48.270 --> 00:15:50.710
So you should not
block the main triad.

00:15:50.710 --> 00:15:54.384
That's a main route for Android.

00:15:54.384 --> 00:15:56.050
And that is something
we are doing here.

00:15:56.050 --> 00:15:58.440
So let's fix that.

00:15:58.440 --> 00:16:00.200
The way I'm going to fix this--

00:16:00.200 --> 00:16:02.320
there are multiple
ways you should do it.

00:16:02.320 --> 00:16:05.500
You guys probably know
you can create a service.

00:16:05.500 --> 00:16:07.060
You can create a triad.

00:16:07.060 --> 00:16:09.220
I would do it the
simplest way here.

00:16:09.220 --> 00:16:11.290
I'd just create a handler,
attach that handler

00:16:11.290 --> 00:16:16.000
to the main triad,
and add each set value

00:16:16.000 --> 00:16:17.800
to the end of the looper--

00:16:17.800 --> 00:16:19.540
of the main triad looper.

00:16:19.540 --> 00:16:22.730
It's going to look less
complicated than it sounds.

00:16:46.212 --> 00:16:47.670
DAVE SMITH: So as
Renato mentioned,

00:16:47.670 --> 00:16:49.086
one of the things
that we're doing

00:16:49.086 --> 00:16:51.740
is we're ensuring that
the main thread in Android

00:16:51.740 --> 00:16:55.010
continues to remain free so
that system events can still

00:16:55.010 --> 00:16:56.810
come into your
application, whether those

00:16:56.810 --> 00:17:00.020
are lifecycle events or
he mentioned input events.

00:17:00.020 --> 00:17:01.920
This also means
that, in general,

00:17:01.920 --> 00:17:04.880
if you have to do any
regular polling of an input

00:17:04.880 --> 00:17:06.619
or something along
those lines, you

00:17:06.619 --> 00:17:08.599
want to make sure that you
don't do that on the main thread

00:17:08.599 --> 00:17:09.260
either.

00:17:09.260 --> 00:17:11.512
So in this case, we're
scheduling an output.

00:17:11.512 --> 00:17:13.220
So the way that we're
doing this is fine.

00:17:13.220 --> 00:17:16.010
But if we need to pull a
sensor or read some value

00:17:16.010 --> 00:17:18.089
from another input
on a regular basis,

00:17:18.089 --> 00:17:21.044
we might actually want to use
a background thread to do that.

00:17:21.044 --> 00:17:22.460
Now, it could be
a handler thread.

00:17:22.460 --> 00:17:24.710
That seems to be the simplest
way to sort of modify

00:17:24.710 --> 00:17:26.310
what's being done in this case.

00:17:26.310 --> 00:17:28.280
Or you can use AsyncTask
or other things

00:17:28.280 --> 00:17:29.960
that suit your
development workflow,

00:17:29.960 --> 00:17:31.250
because it's just Android.

00:17:31.250 --> 00:17:33.350
They all work the
same way you expect.

00:17:33.350 --> 00:17:35.690
But it's important to
realize that when you're

00:17:35.690 --> 00:17:37.460
working with some
of this hardware,

00:17:37.460 --> 00:17:40.400
it's still good to offload those
regular, repeated, long-running

00:17:40.400 --> 00:17:43.684
operations of the main thread,
even though it's not a network

00:17:43.684 --> 00:17:46.100
access or something that you
might otherwise traditionally

00:17:46.100 --> 00:17:49.120
consider as one of those
blocking operations.

00:17:49.120 --> 00:17:50.660
RENATO MANGENI: OK, good job.

00:17:50.660 --> 00:17:51.360
Yep.

00:17:51.360 --> 00:17:52.910
DAVE SMITH: Sorry.

00:17:52.910 --> 00:17:55.190
RENATO MANGENI: And
now, we have the code

00:17:55.190 --> 00:17:57.980
that supposedly should work.

00:17:57.980 --> 00:17:59.850
Again, let's cross
the figures again.

00:17:59.850 --> 00:18:03.320
Actually, first, let me just
go over it pretty quickly.

00:18:03.320 --> 00:18:04.370
I have the handler.

00:18:04.370 --> 00:18:07.280
The difference
between now and before

00:18:07.280 --> 00:18:08.660
is that now I have a handler.

00:18:08.660 --> 00:18:14.510
And the handler sliced out the
walk that the looper was doing,

00:18:14.510 --> 00:18:17.240
the While loop was
doing, into this method--

00:18:17.240 --> 00:18:18.500
Run and Reschedule.

00:18:18.500 --> 00:18:19.830
It does exactly the same.

00:18:19.830 --> 00:18:21.830
However, at the end,
it posted itself

00:18:21.830 --> 00:18:23.390
at the end of the looper.

00:18:23.390 --> 00:18:27.890
So it can do whatever has
to do like reading a sensor

00:18:27.890 --> 00:18:30.299
or reading keys,
processing any event that's

00:18:30.299 --> 00:18:31.340
come into the main triad.

00:18:31.340 --> 00:18:32.600
And then it does another step.

00:18:32.600 --> 00:18:35.360
And then it reschedules again.

00:18:35.360 --> 00:18:37.380
Again, it is not specific
for Android Things.

00:18:37.380 --> 00:18:39.050
This is Android.

00:18:39.050 --> 00:18:42.530
And, oh, you won't
know if it's working

00:18:42.530 --> 00:18:46.040
or not, because it
was blinking before.

00:18:46.040 --> 00:18:50.090
I would change the
LED to the green one.

00:18:50.090 --> 00:18:51.490
So you don't have to trust me.

00:19:10.940 --> 00:19:11.470
Done.

00:19:11.470 --> 00:19:12.970
DAVE SMITH: There you go.

00:19:12.970 --> 00:19:13.970
RENATO MANGENI: Awesome.

00:19:13.970 --> 00:19:14.940
DAVE SMITH: All right.

00:19:14.940 --> 00:19:15.440
That's good.

00:19:15.440 --> 00:19:16.370
RENATO MANGENI: OK, now, right?

00:19:16.370 --> 00:19:17.911
DAVE SMITH: That's
good-looking code.

00:19:17.911 --> 00:19:19.730
I think we're following
a pattern here.

00:19:19.730 --> 00:19:20.771
RENATO MANGENI: Bye, bye.

00:19:20.771 --> 00:19:22.460
DAVE SMITH: Well,
we work for Google.

00:19:22.460 --> 00:19:23.918
I feel like we
should be able to do

00:19:23.918 --> 00:19:26.300
a little bit better than
just blink a light on stage.

00:19:26.300 --> 00:19:29.030
You said something about sensors
and displays on this board.

00:19:29.030 --> 00:19:29.340
RENATO MANGENI: OK.

00:19:29.340 --> 00:19:30.260
DAVE SMITH: Can we get something
a little more interesting

00:19:30.260 --> 00:19:30.740
going?

00:19:30.740 --> 00:19:31.730
RENATO MANGENI:
OK, we can do that.

00:19:31.730 --> 00:19:32.610
We can do that.

00:19:32.610 --> 00:19:37.080
So as I mentioned, there is
one sensor-- one main censor

00:19:37.080 --> 00:19:41.300
in this board, which is
this tiny thing here.

00:19:41.300 --> 00:19:46.630
Can you see right here?

00:19:46.630 --> 00:19:48.370
It is the BNP 280.

00:19:48.370 --> 00:19:53.000
It's a temperature and
ambient pressure sensor.

00:19:53.000 --> 00:20:01.460
And we can easily connect to
that using the Rainbow HAT

00:20:01.460 --> 00:20:02.210
driver.

00:20:02.210 --> 00:20:03.290
So let's do it.

00:20:06.840 --> 00:20:10.560
And what I'm going to do is
not only read from the sensor--

00:20:10.560 --> 00:20:14.445
I also show the results like
the temperature on the segment

00:20:14.445 --> 00:20:17.700
display here, right?

00:20:17.700 --> 00:20:19.570
DAVE SMITH: I think
that's a better demo.

00:20:19.570 --> 00:20:22.030
RENATO MANGENI: See?

00:20:22.030 --> 00:20:23.830
And how I'm going to do that?

00:20:23.830 --> 00:20:26.050
That's really easy.

00:20:28.450 --> 00:20:30.450
DAVE SMITH: So what you
may have noticed already

00:20:30.450 --> 00:20:32.190
is earlier in the
presentation, I

00:20:32.190 --> 00:20:34.530
talked about interacting
with a lot of these things

00:20:34.530 --> 00:20:38.040
using low-level buses like
GPIO, I squared C, et cetera.

00:20:38.040 --> 00:20:40.260
And none of that is
actually in this code.

00:20:40.260 --> 00:20:41.940
The reason for that
is that the driver

00:20:41.940 --> 00:20:44.370
that we've written for this
specific peripheral or rainbow

00:20:44.370 --> 00:20:47.105
hat abstracts all of that away.

00:20:47.105 --> 00:20:49.230
So there's two reasons that
we're showing you this.

00:20:49.230 --> 00:20:51.780
First of all,
using these drivers

00:20:51.780 --> 00:20:53.799
is a much faster way
of getting started

00:20:53.799 --> 00:20:55.590
without necessarily
having to deal with all

00:20:55.590 --> 00:20:56.880
those low-level details.

00:20:56.880 --> 00:20:59.159
But these drivers are also
open source on GitHub.

00:20:59.159 --> 00:21:01.450
And we'll mention a link to
that a little bit later on.

00:21:01.450 --> 00:21:03.390
So you can also use
them as a reference

00:21:03.390 --> 00:21:06.420
to see how to build something
with these abstractions using

00:21:06.420 --> 00:21:08.730
those interfaces directly,
and you can read the code.

00:21:08.730 --> 00:21:09.540
Are you done yet?

00:21:09.540 --> 00:21:09.720
RENATO MANGENI: Yeah.

00:21:09.720 --> 00:21:10.510
Of course.

00:21:10.510 --> 00:21:12.960
You take too long talking.

00:21:12.960 --> 00:21:16.830
So on in the On Create,
I initiate the driver,

00:21:16.830 --> 00:21:20.160
and I initiate the display
with a few default values.

00:21:20.160 --> 00:21:23.010
And here in the loop,
I will keep the LED

00:21:23.010 --> 00:21:25.570
so you see that it's processing.

00:21:25.570 --> 00:21:35.020
And I will display on the
display the sensor value--

00:21:35.020 --> 00:21:36.327
Read Temperature.

00:21:36.327 --> 00:21:36.910
And that's it.

00:21:53.570 --> 00:21:55.040
[APPLAUSE]

00:21:58.490 --> 00:22:01.640
If you were wondering,
this is in Celsius, OK?

00:22:01.640 --> 00:22:03.380
You have to do some conversion.

00:22:03.380 --> 00:22:04.755
DAVE SMITH: All
right, very good.

00:22:04.755 --> 00:22:05.751
I can see.

00:22:05.751 --> 00:22:07.584
Can we switch back to
the slides real quick?

00:22:11.840 --> 00:22:13.110
There we go.

00:22:13.110 --> 00:22:14.510
Awesome.

00:22:14.510 --> 00:22:16.340
So you've just
seen how easy it is

00:22:16.340 --> 00:22:18.530
to get started very quickly
using the new Android

00:22:18.530 --> 00:22:21.770
Studio to create a new
project, add some code to it,

00:22:21.770 --> 00:22:23.150
and communicate
with peripherals.

00:22:23.150 --> 00:22:25.430
And you've seen how easy
that is to do in Java.

00:22:25.430 --> 00:22:27.720
But, again, if you were
at the keynote yesterday,

00:22:27.720 --> 00:22:30.260
you heard that Kotlin is
now a first-class citizen

00:22:30.260 --> 00:22:32.360
in Android Studio as
part of the new preview.

00:22:32.360 --> 00:22:36.050
So can we use Kotlin to
develop for Android Things?

00:22:36.050 --> 00:22:37.550
Well, I don't see why not.

00:22:37.550 --> 00:22:39.470
So this is not from the demo.

00:22:39.470 --> 00:22:41.772
But just a simple
example of Java--

00:22:41.772 --> 00:22:43.730
I've thrown up here to
give you an idea of what

00:22:43.730 --> 00:22:45.521
some of this code might
look like if you're

00:22:45.521 --> 00:22:47.870
interacting with other
peripherals on the hat.

00:22:47.870 --> 00:22:50.780
This is actually communicating
with that Rainbow LED

00:22:50.780 --> 00:22:53.240
strip that was on the
top there, as well as

00:22:53.240 --> 00:22:54.530
interacting with the button.

00:22:54.530 --> 00:22:56.030
And it's just doing
some basic setup

00:22:56.030 --> 00:22:58.490
to change the color based
on a button in Java.

00:22:58.490 --> 00:23:00.990
This code snippet is
fairly straightforward.

00:23:00.990 --> 00:23:03.150
It's about 25 lines of code.

00:23:03.150 --> 00:23:04.790
But what if we were
to take that sample

00:23:04.790 --> 00:23:07.550
and write it in Kotlin instead?

00:23:07.550 --> 00:23:10.220
The same code looks a
little bit like this.

00:23:10.220 --> 00:23:11.810
We've dropped out almost--

00:23:11.810 --> 00:23:14.236
well, actually, a little
more than 10 lines of code.

00:23:14.236 --> 00:23:15.860
And you can see some
of the things that

00:23:15.860 --> 00:23:19.070
are gone-- the Try Catch blocks
are no longer there anymore.

00:23:19.070 --> 00:23:22.430
The callback is much
cleaner using a lambda.

00:23:22.430 --> 00:23:25.400
And even the array initializers
are also much more expressive

00:23:25.400 --> 00:23:26.300
and easy to read.

00:23:26.300 --> 00:23:29.240
So this code is a lot more
concise and a lot more

00:23:29.240 --> 00:23:30.680
of a joy to even write.

00:23:30.680 --> 00:23:31.940
So what do you think, Renato?

00:23:31.940 --> 00:23:34.520
Can we show them Kotlin running
on the Android Things board?

00:23:34.520 --> 00:23:35.750
RENATO MANGENI: It's
getting too complicated.

00:23:35.750 --> 00:23:36.320
Yeah, sure.

00:23:36.320 --> 00:23:36.590
Why not?

00:23:36.590 --> 00:23:37.830
DAVE SMITH: All right, let's
switch back to the demos

00:23:37.830 --> 00:23:39.060
and see if you can do it.

00:23:39.060 --> 00:23:43.190
RENATO MANGENI: So, again,
this was just launched.

00:23:43.190 --> 00:23:46.550
I will just prepare you guys
if something goes wrong.

00:23:46.550 --> 00:23:48.200
What we are going
to do here is we're

00:23:48.200 --> 00:23:50.800
going to start a new project.

00:23:50.800 --> 00:23:54.050
The Kotlin support
on Android Studio--

00:23:54.050 --> 00:23:57.980
you can add Kotlin and
Java at the same time

00:23:57.980 --> 00:23:59.150
in the same project.

00:23:59.150 --> 00:24:01.280
Just to simplify
things, and so you guys

00:24:01.280 --> 00:24:05.180
know that I'm not cheating here,
I will start a new project.

00:24:05.180 --> 00:24:05.680
OK?

00:24:17.620 --> 00:24:22.510
And I would add Kotlin's
support obviously.

00:24:22.510 --> 00:24:26.830
Again, let's not
do a Fauna tablet.

00:24:26.830 --> 00:24:28.015
Let's do Android Things--

00:24:30.940 --> 00:24:34.450
same anti activity--
same no UI layout.

00:24:45.705 --> 00:24:47.580
DAVE SMITH: So one of
the things you can see,

00:24:47.580 --> 00:24:48.996
if you haven't
seen this demo yet,

00:24:48.996 --> 00:24:52.090
is that when you include
Kotlin support, by default,

00:24:52.090 --> 00:24:54.199
the main activity is
created in Kotlin.

00:24:54.199 --> 00:24:56.740
There's a little bit of a Java
conversion that happens there.

00:24:56.740 --> 00:24:59.660
But we're automatically
in Kotlin already.

00:24:59.660 --> 00:25:01.830
RENATO MANGENI: Yeah,
this is the main activity.

00:25:01.830 --> 00:25:03.120
And it's in Kotlin.

00:25:03.120 --> 00:25:04.450
And it does nothing.

00:25:04.450 --> 00:25:07.500
So now it's my job to
do something with that.

00:25:07.500 --> 00:25:14.810
First, I will add the dependency
on, if you guys remember well--

00:25:29.450 --> 00:25:30.650
the same dependency.

00:25:30.650 --> 00:25:34.530
See, our driver is
written in Java.

00:25:34.530 --> 00:25:35.030
It's there.

00:25:35.030 --> 00:25:36.270
It's open source.

00:25:36.270 --> 00:25:38.180
You can look at Java.

00:25:38.180 --> 00:25:40.790
It's published as
a Java library.

00:25:40.790 --> 00:25:42.920
It functions as a Java AR.

00:25:42.920 --> 00:25:46.280
And the fact that in Kotlin
you can just add the dependency

00:25:46.280 --> 00:25:49.050
and use it for free--

00:25:49.050 --> 00:25:52.070
there's no extra
steps to use that.

00:25:52.070 --> 00:25:53.390
That's really amazing.

00:25:58.440 --> 00:25:59.896
You know what?

00:25:59.896 --> 00:26:02.580
I just remembered something--

00:26:02.580 --> 00:26:04.307
I'm not that Kotlin developer.

00:26:06.432 --> 00:26:08.140
DAVE SMITH: Is there
something in the IDE

00:26:08.140 --> 00:26:09.723
maybe we could use
to help you around?

00:26:09.723 --> 00:26:14.150
RENATO MANGENI: Yeah, in fact,
luckily I kept this class here.

00:26:14.150 --> 00:26:21.000
I will just add a little bit
of more correctness to it.

00:26:21.000 --> 00:26:24.560
And I will copy my class--

00:26:24.560 --> 00:26:26.880
Control C, Alt Tab--

00:26:26.880 --> 00:26:28.971
select everything here
on the Kotlin side.

00:26:28.971 --> 00:26:29.970
This is the Kotlin file.

00:26:29.970 --> 00:26:39.240
OK and I will Control
V. And boom, here it is.

00:26:39.240 --> 00:26:41.430
DAVE SMITH: Automatically
converted into Kotlin.

00:26:41.430 --> 00:26:42.810
So you are a Kotlin developer.

00:26:42.810 --> 00:26:43.370
You just didn't know it.

00:26:43.370 --> 00:26:45.690
RENATO MANGENI: I just
became a Kotlin developer.

00:26:45.690 --> 00:26:47.150
Yeah, si, my code is great.

00:26:47.150 --> 00:26:48.690
I have a lot of
exclamation points.

00:26:48.690 --> 00:26:50.100
DAVE SMITH: That's awesome.

00:26:50.100 --> 00:26:52.170
RENATO MANGENI: So you
don't trust me, right?

00:26:52.170 --> 00:26:53.190
Of course you don't.

00:26:53.190 --> 00:26:55.800
I wouldn't trust myself.

00:26:55.800 --> 00:26:58.200
Let's confirm that it's working.

00:26:58.200 --> 00:27:00.660
Currently, I have the
blue LED here, right?

00:27:00.660 --> 00:27:03.700
So let me change that to the--

00:27:03.700 --> 00:27:05.190
what color do you want?

00:27:05.190 --> 00:27:06.600
Red?

00:27:06.600 --> 00:27:07.620
OK, that's a red.

00:27:07.620 --> 00:27:08.690
It show bad on the TV.

00:27:11.091 --> 00:27:11.590
See?

00:27:11.590 --> 00:27:13.330
I'm running the Kotlin app.

00:27:13.330 --> 00:27:16.871
I'm not running the Java app.

00:27:31.601 --> 00:27:32.583
Launching.

00:27:38.272 --> 00:27:38.980
DAVE SMITH: Boom!

00:27:38.980 --> 00:27:39.627
There we go.

00:27:39.627 --> 00:27:40.550
[APPLAUSE]

00:27:40.550 --> 00:27:41.550
RENATO MANGENI: Awesome!

00:27:41.550 --> 00:27:43.534
DAVE SMITH: Nicely
done, sir, nicely done.

00:27:43.534 --> 00:27:45.450
All right, let's switch
back the sides please.

00:27:49.869 --> 00:27:51.350
OK.

00:27:51.350 --> 00:27:53.900
So we've given you
just a very quick tour

00:27:53.900 --> 00:27:56.450
today of the new features
in Android Studio

00:27:56.450 --> 00:28:00.020
that are specific to Android
Things, as well as just a very

00:28:00.020 --> 00:28:02.000
simple walkthrough of
how you can get started

00:28:02.000 --> 00:28:04.083
and how quick and easy it
is to really just get up

00:28:04.083 --> 00:28:05.630
and running from
zero to a working

00:28:05.630 --> 00:28:08.091
project using all the tools
that are available here.

00:28:08.091 --> 00:28:10.340
A couple of things while
you're here at the conference

00:28:10.340 --> 00:28:11.630
that I think you
should check out--

00:28:11.630 --> 00:28:13.340
first of all, we're going
to be in office hours

00:28:13.340 --> 00:28:14.330
immediately after this.

00:28:14.330 --> 00:28:15.590
So if we don't
have an opportunity

00:28:15.590 --> 00:28:17.150
to answer your
questions during Q&amp;A,

00:28:17.150 --> 00:28:18.380
you can always
follow us over there,

00:28:18.380 --> 00:28:19.850
and we'll continue
the discussion.

00:28:19.850 --> 00:28:22.640
Also, we have a bunch of
Android Things code labs

00:28:22.640 --> 00:28:23.630
in the Codelab section.

00:28:23.630 --> 00:28:25.490
We have four of
them, ranging from

00:28:25.490 --> 00:28:28.760
some basic peripheral stuff
like this to using TensorFlow.

00:28:28.760 --> 00:28:30.590
So check those out,
and you can play around

00:28:30.590 --> 00:28:32.590
with Android Things in
the Codelab area as well.

00:28:32.590 --> 00:28:35.048
Once you get home, and you want
to start doing some of this

00:28:35.048 --> 00:28:37.340
development for yourself,
check out the Android Things

00:28:37.340 --> 00:28:39.395
documentation, which is
on the Android dev site

00:28:39.395 --> 00:28:41.570
at developer.android.com/things.

00:28:41.570 --> 00:28:45.230
Download the new Android Studio
Canary at Studio Preview.

00:28:45.230 --> 00:28:46.860
And we also like
to encourage you,

00:28:46.860 --> 00:28:48.620
if you're working
with Android Things,

00:28:48.620 --> 00:28:52.700
to join the IoT developers
community that we have on G+.

00:28:52.700 --> 00:28:54.470
Us and other folks
from the IoT team

00:28:54.470 --> 00:28:57.380
are constantly on there
answering questions,

00:28:57.380 --> 00:28:59.780
and helping folks
out, and watching

00:28:59.780 --> 00:29:01.760
you share your cool
projects and other things

00:29:01.760 --> 00:29:03.301
that you're doing
with the community.

00:29:03.301 --> 00:29:05.630
So please check that
out as you go as well.

00:29:05.630 --> 00:29:07.740
It looks like we've got
some time for questions.

00:29:07.740 --> 00:29:09.050
So if you do have
questions, please

00:29:09.050 --> 00:29:10.430
feel free to come
up to the mics.

00:29:10.430 --> 00:29:13.192
Otherwise, thank you very
much for your time today.

00:29:13.192 --> 00:29:16.306
[MUSIC PLAYING]

