WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.868
[MUSIC PLAYING]

00:00:06.879 --> 00:00:08.670
ELLIOT HUGHES: Hi, my
name's Elliot Hughes.

00:00:08.670 --> 00:00:10.489
I've worked on Android
for a while now,

00:00:10.489 --> 00:00:12.030
and actually, my
first job on Android

00:00:12.030 --> 00:00:15.000
was working on the
Java core libraries

00:00:15.000 --> 00:00:18.610
and actually cleaning up
some of the bugs in our JNI.

00:00:18.610 --> 00:00:21.480
So first off, I'll show
you what you're probably

00:00:21.480 --> 00:00:24.750
expecting to see when you think
JNI, which is code that looks

00:00:24.750 --> 00:00:28.992
like this, and I'm
guessing no one can

00:00:28.992 --> 00:00:31.200
tell that the code that
actually does anything useful

00:00:31.200 --> 00:00:32.960
isn't on that screen yet.

00:00:32.960 --> 00:00:35.550
And I'm guessing that no one
can tell me within five seconds

00:00:35.550 --> 00:00:37.440
where the useful line
in that either is.

00:00:37.440 --> 00:00:40.720
So this is-- this talk is
basically how to not do that.

00:00:40.720 --> 00:00:42.640
How do we get away from that?

00:00:42.640 --> 00:00:46.370
And the one line answer
is use C++ better.

00:00:46.370 --> 00:00:51.690
If you-- if you're
using the C APIs, which

00:00:51.690 --> 00:00:54.300
is what most people
do, it's really tricky.

00:00:54.300 --> 00:00:56.220
You end up with a sort
of Go To Fail style,

00:00:56.220 --> 00:00:59.610
or you have this nested IF
style that we had there.

00:00:59.610 --> 00:01:01.110
And there are a lot
of special cases

00:01:01.110 --> 00:01:03.421
as well, like I'm trying
to throw an exception,

00:01:03.421 --> 00:01:05.129
but there's already
an exception pending.

00:01:05.129 --> 00:01:05.920
What do I do there?

00:01:05.920 --> 00:01:07.920
How do I chain that
to be the cause

00:01:07.920 --> 00:01:09.930
of the previous exception?

00:01:09.930 --> 00:01:13.530
So don't write that in
every single JNI method.

00:01:13.530 --> 00:01:14.730
Write that once.

00:01:14.730 --> 00:01:17.340
And in particular,
have classes that let

00:01:17.340 --> 00:01:21.120
you use a string as a string--

00:01:21.120 --> 00:01:24.510
use a J string as
if it's a substring.

00:01:24.510 --> 00:01:26.580
Similar for arrays--
you don't want

00:01:26.580 --> 00:01:28.770
to be having to deal
with a J byte array

00:01:28.770 --> 00:01:30.660
when you could just
use operator square

00:01:30.660 --> 00:01:33.450
brackets to just use
it like a normal array.

00:01:33.450 --> 00:01:35.404
Local references,
too, and there's

00:01:35.404 --> 00:01:36.570
a long list of other things.

00:01:36.570 --> 00:01:39.330
But the strings and
primitive arrays, I think,

00:01:39.330 --> 00:01:40.410
are the two major ones.

00:01:40.410 --> 00:01:43.470
Most of the benefit
you get is from that.

00:01:43.470 --> 00:01:46.020
Exceptions-- harder
than they look,

00:01:46.020 --> 00:01:48.660
and the sort of raw
primitives you get in JNI

00:01:48.660 --> 00:01:50.970
are not super useful.

00:01:50.970 --> 00:01:53.100
The-- they expect you to
find the class yourself.

00:01:53.100 --> 00:01:56.136
They expect you to
create an instance.

00:01:56.136 --> 00:01:59.640
If you want to actually
include a proper detail

00:01:59.640 --> 00:02:03.960
message or a cause, you end
up doing weird things like,

00:02:03.960 --> 00:02:05.910
I need to find the
constructor for my--

00:02:05.910 --> 00:02:08.352
for this exception, and
then I need to invoke the--

00:02:08.352 --> 00:02:09.060
blah, blah, blah.

00:02:09.060 --> 00:02:10.770
It's a lot of code,
especially if you

00:02:10.770 --> 00:02:13.710
deal with special cases,
so having a function that

00:02:13.710 --> 00:02:18.260
just takes a PRINTF style
format string is a huge relief,

00:02:18.260 --> 00:02:21.597
and great.

00:02:21.597 --> 00:02:23.930
So I've been talking about
this kind of in the abstract.

00:02:23.930 --> 00:02:26.160
I've been saying, you
should do these things.

00:02:26.160 --> 00:02:29.150
There are many choices
that you can use for this,

00:02:29.150 --> 00:02:31.310
and I think a problem
a lot of people

00:02:31.310 --> 00:02:33.870
have is they get hung up on
what's the exact perfect way

00:02:33.870 --> 00:02:34.370
to do this.

00:02:34.370 --> 00:02:35.390
What's the best?

00:02:35.390 --> 00:02:36.122
Doesn't matter.

00:02:36.122 --> 00:02:38.330
Any of these are better than
writing the kind of code

00:02:38.330 --> 00:02:40.220
that we saw on the
first couple of slides.

00:02:40.220 --> 00:02:42.440
Android itself uses
Lib Native Helper,

00:02:42.440 --> 00:02:43.650
which you can find in AOSP.

00:02:43.650 --> 00:02:45.240
It's in the root directory.

00:02:45.240 --> 00:02:46.920
There's a bunch of
header only stuff

00:02:46.920 --> 00:02:49.800
for doing the things
I've been talking about,

00:02:49.800 --> 00:02:52.494
or if you don't like any of
the others on the internet,

00:02:52.494 --> 00:02:53.660
you can just write your own.

00:02:53.660 --> 00:02:55.380
That-- they're
really not that hard.

00:02:55.380 --> 00:02:57.504
So what does it look like
if you actually do switch

00:02:57.504 --> 00:02:58.750
to using something like this?

00:02:58.750 --> 00:02:59.760
This is the same code.

00:02:59.760 --> 00:03:02.402
This is the same two slides
that we had before, now

00:03:02.402 --> 00:03:03.110
condensed to one.

00:03:03.110 --> 00:03:05.510
I think five seconds
is plenty of time

00:03:05.510 --> 00:03:08.210
for you to actually see
which is the line that

00:03:08.210 --> 00:03:10.820
actually does the work there.

00:03:10.820 --> 00:03:12.620
You can make this shorter.

00:03:12.620 --> 00:03:15.680
You don't actually need to
have the style where we have

00:03:15.680 --> 00:03:20.420
the constructors, and then we
check did that actually work

00:03:20.420 --> 00:03:23.660
if you're prepared to use C++
exceptions and do some kind

00:03:23.660 --> 00:03:26.180
of transformation, but
that's a more advanced topic.

00:03:26.180 --> 00:03:30.110
I think this gets you 90% of the
benefit for 20% of the effort,

00:03:30.110 --> 00:03:33.080
so this is what Android
does internally.

00:03:33.080 --> 00:03:34.640
This is actually
what the code looks

00:03:34.640 --> 00:03:36.230
like in Android for that call.

00:03:39.998 --> 00:03:42.590
So that was a
really simple thing

00:03:42.590 --> 00:03:44.090
where there really
was just one line

00:03:44.090 --> 00:03:48.210
of active ingredient in there,
but this scales really well.

00:03:48.210 --> 00:03:51.700
And our recommendation
is that you actually--

00:03:51.700 --> 00:03:53.330
you try to keep
your code like that,

00:03:53.330 --> 00:03:56.480
so don't mix all
the JNI boilerplate

00:03:56.480 --> 00:03:58.790
stuff in with your actual code.

00:03:58.790 --> 00:04:01.445
Keep those separate in the
same way that you wouldn't--

00:04:01.445 --> 00:04:02.820
on the other end
of the spectrum,

00:04:02.820 --> 00:04:04.910
if you wouldn't
mix your business

00:04:04.910 --> 00:04:06.800
logic and your UI
rendering stuff.

00:04:06.800 --> 00:04:09.470
Down here, it's
similar sort of advice.

00:04:09.470 --> 00:04:12.410
Don't do that.

00:04:12.410 --> 00:04:13.880
Again, if you want
a good example

00:04:13.880 --> 00:04:16.040
of this, the Android
system OS class,

00:04:16.040 --> 00:04:18.769
is implemented exactly this way.

00:04:18.769 --> 00:04:21.631
The implementation's super
repetitive, really boring,

00:04:21.631 --> 00:04:22.880
and that's the way we like it.

00:04:22.880 --> 00:04:25.230
It's hard to make mistakes.

00:04:25.230 --> 00:04:26.870
I'm running out of
time, so I'll just

00:04:26.870 --> 00:04:28.310
go through this very quickly.

00:04:28.310 --> 00:04:31.790
If you need to worry about
old Android releases,

00:04:31.790 --> 00:04:34.980
and you have multiple SO files,
that can get very tricky.

00:04:34.980 --> 00:04:38.180
We recommend that you
consider the ReLinker project.

00:04:38.180 --> 00:04:40.020
You can find that on Github.

00:04:40.020 --> 00:04:42.710
The storing SO
file's uncompressed.

00:04:42.710 --> 00:04:45.120
That was mentioned
earlier in the keynote.

00:04:45.120 --> 00:04:46.820
One big library is
generally better

00:04:46.820 --> 00:04:48.860
than lots of small libraries.

00:04:48.860 --> 00:04:49.640
Thank you.

00:04:49.640 --> 00:04:51.830
If you have questions,
come and find me.

00:04:51.830 --> 00:04:54.430
I'll be in-- I'll be doing
open hours all afternoon.

00:04:54.430 --> 00:04:55.190
So thank you.

00:04:55.190 --> 00:04:58.240
[MUSIC PLAYING]

