WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So how can we take an algorithm and put that into a Boolean formula?

00:00:03.000 --> 00:00:06.000
Well, that's where Cook and Levin had another ingenious idea,

00:00:06.000 --> 00:00:09.000
because they said you can look at an algorithm

00:00:09.000 --> 00:00:12.000
running on a RAM as a series of snapshots,

00:00:12.000 --> 00:00:14.000
and what I mean by this is the following:

00:00:14.000 --> 00:00:16.000
So assume you have an algorithm on a

00:00:16.000 --> 00:00:19.000
non-deterministic RAM that runs in polynomial time,

00:00:19.000 --> 00:00:23.000
so you have a point in time T equals 0, that's when your algorithm starts out,

00:00:23.000 --> 00:00:28.000
then you have T equals 1, T equals 2, so those are the time steps here.

00:00:28.000 --> 00:00:32.000
And the final time step is going to be some polynomial of N.

00:00:32.000 --> 00:00:35.000
That is clear because we're looking at an algorithm

00:00:35.000 --> 00:00:37.000
that solves a problem that lies in NP,

00:00:37.000 --> 00:00:42.000
So that means it only takes polynomial time on a non-deterministic RAM at least.

00:00:42.000 --> 00:00:46.000
Now if you look at what happens on the RAM in each time step,

00:00:46.000 --> 00:00:48.000
I can basically draw you the following picture.

00:00:48.000 --> 00:00:50.000
If you recall from unit one what the RAM looks like,

00:00:50.000 --> 00:00:52.000
the RAM has only a few components.

00:00:52.000 --> 00:00:55.000
The RAM has a read-only memory,

00:00:55.000 --> 00:00:58.000
the RAM has a program or the algorithm running,

00:00:58.000 --> 00:01:01.000
so this algorithm here is basically the program running,

00:01:01.000 --> 00:01:05.000
and just as I would write the algorithm line by line by line,

00:01:05.000 --> 00:01:07.000
I can also write it in this way,

00:01:07.000 --> 00:01:09.000
so this here would be the first line of code,

00:01:09.000 --> 00:01:12.000
then this would be the second line of code, and so on.

00:01:12.000 --> 00:01:15.000
And finally, the RAM had a reading and writing memory,

00:01:15.000 --> 00:01:19.000
so we had some memory cells here holding the variables,

00:01:19.000 --> 00:01:21.000
and those variables, of course, are changed by the program

00:01:21.000 --> 00:01:24.000
depending on what's here in the input.

00:01:24.000 --> 00:01:26.000
And now comes the neat part that Cook and Levin observed,

00:01:26.000 --> 00:01:29.000
because what they observed is

00:01:29.000 --> 00:01:32.000
that when you look at an algorithm working on the RAM,

00:01:32.000 --> 00:01:37.000
then you can depict that as a number of these snapshots,

00:01:37.000 --> 00:01:42.000
so if you say, add T equals 0,

00:01:42.000 --> 00:01:45.000
these are the contents of the read-only memory.

00:01:45.000 --> 00:01:48.000
This is, actually we need other information,

00:01:48.000 --> 00:01:50.000
we also needs to know where the program is at,

00:01:50.000 --> 00:01:52.000
but you can basically say, this is the input here,

00:01:52.000 --> 00:01:56.000
this is the program, and this is the line of the program that we're executing right now,

00:01:56.000 --> 00:01:59.000
and this here is the contents of the read/write memory.

00:01:59.000 --> 00:02:02.000
In the beginning this will be empty,

00:02:02.000 --> 00:02:05.000
but as the algorithm works, it will also put some content in here,

00:02:05.000 --> 00:02:07.000
and then, of course, the program moves on.

00:02:07.000 --> 00:02:10.000
It can also jump back and forth here,

00:02:10.000 --> 00:02:14.000
and of course, we will have more and more content in the memory,

00:02:14.000 --> 00:02:19.000
and at a certain point in time the program will say, I'm done,

00:02:19.000 --> 00:02:21.000
and it will hopefully have a certain output here.

00:02:21.000 --> 00:02:23.000
But since we're working with decision problems,

00:02:23.000 --> 00:02:29.000
actually it's only interesting to us if the program says, yes or no at the end.

00:02:29.000 --> 00:02:33.000
So for decision problems we don't even really care about what's in here,

00:02:33.000 --> 00:02:37.000
we would care about that if we were solving the optimization problem

00:02:37.000 --> 00:02:39.000
or want additional information,

00:02:39.000 --> 00:02:41.000
but actually for a decision problem,

00:02:41.000 --> 00:02:43.000
it would just be important for us to know

00:02:43.000 --> 00:02:46.000
at which line of code the algorithm finishes.

00:02:46.000 --> 00:02:50.000
If it finishes at a return statement that will return yes to us

00:02:50.000 --> 00:02:54.000
or a return statement that will return no to us.

00:02:54.000 --> 00:02:57.000
Now let's have a closer look at those snapshots,

00:02:57.000 --> 00:02:59.000
and we'll actually do that as a quiz.

00:02:59.000 --> 00:03:02.000
So this here is one snapshot.

00:03:02.000 --> 00:03:07.000
I would like you to tell me what we can say about a single snapshot

00:03:07.000 --> 00:03:11.000
and also about all of these snapshots here.

00:03:11.000 --> 00:03:13.000
So there are 3 statements,

00:03:13.000 --> 00:03:16.000
each of which I would like you to check this box if you think they are true

00:03:16.000 --> 00:03:18.000
and otherwise leave it blank.

00:03:18.000 --> 00:03:23.000
So the first claim you could make is that each snapshot has size polynomial in N,

00:03:23.000 --> 00:03:26.000
and N is the size of the input as always.

00:03:26.000 --> 00:03:29.000
Secondly, you could claim that there can be

00:03:29.000 --> 00:03:33.000
an exponential number of snapshots if we look at all of the time steps.

00:03:33.000 --> 00:03:37.000
And finally, one claim that I would like you to check out as well is

00:03:37.000 --> 00:03:40.000
all snapshots, if taken together,

00:03:40.000 --> 00:03:43.000
so this whole part here,

00:03:43.000 --> 00:03:45.000
have polynomial size,

00:03:45.000 --> 00:03:47.000
and by polynomial size, I again mean that it's some

00:03:47.000 --> 00:03:50.000
polynomial of the input size that we're always using.

00:03:50.000 --> 00:03:52.000
You should keep in mind that the algorithm

00:03:52.000 --> 00:03:56.000
that we're looking at is an algorithm for a problem in NP,

00:03:56.000 --> 99:59:59.000
and it runs on a non-deterministic RAM.

