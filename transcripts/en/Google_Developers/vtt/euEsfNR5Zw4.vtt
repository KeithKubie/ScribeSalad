WEBVTT
Kind: captions
Language: en

00:00:07.270 --> 00:00:09.340
EVE ANDERSON: Good
afternoon, everyone.

00:00:09.340 --> 00:00:10.740
My name is Eve Anderson.

00:00:10.740 --> 00:00:14.330
I lead the accessibility
engineering group at Google.

00:00:14.330 --> 00:00:16.680
And I'm here with
some of my colleagues.

00:00:16.680 --> 00:00:20.100
We have software
engineers Phil Weaver,

00:00:20.100 --> 00:00:22.460
Hugh Oh, and Casey Burkhardt.

00:00:22.460 --> 00:00:26.430
We're also joined by a very
special guest, Mark Riccobono,

00:00:26.430 --> 00:00:30.290
the President of the National
Federation of the Blind.

00:00:30.290 --> 00:00:34.140
Today, we're going to talk with
you about improving your apps

00:00:34.140 --> 00:00:36.710
accessibility to
make it work better

00:00:36.710 --> 00:00:38.840
for people with disabilities.

00:00:38.840 --> 00:00:43.570
This is a very important topic,
and I'm glad you're here.

00:00:43.570 --> 00:00:46.920
The World Health
Organization estimates

00:00:46.920 --> 00:00:50.870
that 15% of the
world's population

00:00:50.870 --> 00:00:53.260
has some form of disability.

00:00:53.260 --> 00:00:55.460
That's over one billion people.

00:00:55.460 --> 00:00:59.240
To put that into context, that's
three times the population

00:00:59.240 --> 00:01:01.580
of the United States
and more than all

00:01:01.580 --> 00:01:04.239
of Europe put together.

00:01:04.239 --> 00:01:08.850
By making your app accessible
to people with disabilities,

00:01:08.850 --> 00:01:12.240
you have the ability
to empower people,

00:01:12.240 --> 00:01:14.750
to help give people
independence,

00:01:14.750 --> 00:01:17.890
to help give them
access to knowledge.

00:01:17.890 --> 00:01:22.430
Furthermore, a well-designed
accessible application

00:01:22.430 --> 00:01:25.890
can be more usable for
all users of your app.

00:01:25.890 --> 00:01:28.450
So by working on
accessibility, it

00:01:28.450 --> 00:01:32.620
will pay dividends over time.

00:01:32.620 --> 00:01:36.210
Now I'd like to introduce
you to Phil Weaver

00:01:36.210 --> 00:01:39.040
and Hugh Oh will
be doing the demo.

00:01:39.040 --> 00:01:42.220
We're going to show you
some accessibility features

00:01:42.220 --> 00:01:45.570
of the Android platform
and talk about what

00:01:45.570 --> 00:01:49.020
you can do to help make
sure that your app works

00:01:49.020 --> 00:01:50.720
with these features.

00:01:50.720 --> 00:01:51.660
Take it away.

00:01:55.525 --> 00:01:57.150
PHIL WEAVER: So my
name is Phil Weaver.

00:01:57.150 --> 00:02:01.240
I'm a software engineer in the
accessibility team at Google.

00:02:01.240 --> 00:02:03.750
And as Eve mentioned,
accessibility's aim

00:02:03.750 --> 00:02:07.220
is really to help serve the
billion people worldwide

00:02:07.220 --> 00:02:10.509
who are affected by
some form of disability.

00:02:10.509 --> 00:02:12.300
Now, a billion is
really a lot of people

00:02:12.300 --> 00:02:13.885
to try to wrap your head around.

00:02:13.885 --> 00:02:15.870
It's really possible to do.

00:02:15.870 --> 00:02:19.510
There's not one thing we can
do to help all billion people.

00:02:19.510 --> 00:02:22.770
So it's impossible to
make generalizations.

00:02:22.770 --> 00:02:25.830
But I've built some really
valuable relationships

00:02:25.830 --> 00:02:29.120
with a number of people with
disabilities as friends,

00:02:29.120 --> 00:02:32.150
as neighbors, as co-workers.

00:02:32.150 --> 00:02:33.970
And I really value
these relationships,

00:02:33.970 --> 00:02:37.010
both professionally as someone
who works on accessibility,

00:02:37.010 --> 00:02:40.080
but more importantly
really personally as far

00:02:40.080 --> 00:02:42.020
as what they bring to my life.

00:02:42.020 --> 00:02:44.020
And I think these
relationships are

00:02:44.020 --> 00:02:48.550
a reminder of both what we would
lose if we weren't including

00:02:48.550 --> 00:02:50.902
people with disabilities
as well as we are now

00:02:50.902 --> 00:02:52.360
and really how much
potential there

00:02:52.360 --> 00:02:54.220
is if we can bring
more people into this

00:02:54.220 --> 00:02:56.070
fold and include
more and more people.

00:02:58.311 --> 00:03:00.810
And that's really what we're
trying to do with accessibility

00:03:00.810 --> 00:03:03.420
is include people and
workplaces and schools

00:03:03.420 --> 00:03:05.960
in the design of
our technologies.

00:03:05.960 --> 00:03:07.640
And the way I think
about accessibility

00:03:07.640 --> 00:03:11.830
is it's challenging our
assumptions about our users

00:03:11.830 --> 00:03:14.990
and about the things we
design and then finding

00:03:14.990 --> 00:03:16.280
a better way to design things.

00:03:16.280 --> 00:03:18.405
And it ends up being a
better outcome for everyone.

00:03:21.160 --> 00:03:23.040
So the relationship
with somebody

00:03:23.040 --> 00:03:26.300
with a disability that I
value the most is with my son.

00:03:26.300 --> 00:03:28.080
So he was born
with a disability,

00:03:28.080 --> 00:03:29.930
and he's now six years old.

00:03:29.930 --> 00:03:32.510
And watching him grow
has really forced

00:03:32.510 --> 00:03:34.470
me to look at a
lot of assumptions

00:03:34.470 --> 00:03:37.114
that I've held my own beliefs.

00:03:37.114 --> 00:03:39.030
And it's also made me a
really strong advocate

00:03:39.030 --> 00:03:41.940
for inclusive education.

00:03:41.940 --> 00:03:44.490
As a parent, it's obvious why
I'd be interested in that.

00:03:44.490 --> 00:03:47.920
I want him to grow up and get
used to living in the world

00:03:47.920 --> 00:03:49.820
that he's going to
grow into and hopefully

00:03:49.820 --> 00:03:52.254
be a big productive part of.

00:03:52.254 --> 00:03:53.670
But the interesting
thing about it

00:03:53.670 --> 00:03:56.730
is that research really shows
that including everybody

00:03:56.730 --> 00:03:58.609
in the same classroom
in education

00:03:58.609 --> 00:04:01.150
is actually good for everybody--
it's good for his classmates

00:04:01.150 --> 00:04:02.080
too.

00:04:02.080 --> 00:04:04.500
It exposes classmates to
a wider group of people.

00:04:04.500 --> 00:04:07.160
It forces his teachers
to think more critically

00:04:07.160 --> 00:04:10.399
about the assumptions they're
making about their students.

00:04:10.399 --> 00:04:11.940
And the educational
outcomes actually

00:04:11.940 --> 00:04:15.480
end up being better
for everybody.

00:04:15.480 --> 00:04:19.200
And interestingly, the same
story happens with software.

00:04:19.200 --> 00:04:21.760
So I suspect a lot of us
here use auto complete.

00:04:21.760 --> 00:04:24.140
I probably couldn't
live without it.

00:04:24.140 --> 00:04:26.500
And not everybody realize
that it was actually

00:04:26.500 --> 00:04:28.650
invented to help people
with disabilities

00:04:28.650 --> 00:04:30.910
to communicate more effectively.

00:04:30.910 --> 00:04:33.940
Somebody who can't speak
or has trouble typing,

00:04:33.940 --> 00:04:38.300
the ability to auto complete is
actually a tremendous benefit.

00:04:38.300 --> 00:04:40.770
And 20 odd years ago, that
was actually the application.

00:04:40.770 --> 00:04:42.600
People were writing
academic papers

00:04:42.600 --> 00:04:45.160
about how to do auto
complete really targeted

00:04:45.160 --> 00:04:47.147
at that user base.

00:04:47.147 --> 00:04:48.730
And today, we don't
really think of it

00:04:48.730 --> 00:04:50.250
as an accessibility
accommodation.

00:04:50.250 --> 00:04:52.290
It's something that
we just use every day

00:04:52.290 --> 00:04:53.970
without thinking about it.

00:04:53.970 --> 00:04:55.570
I think that's an
interesting example

00:04:55.570 --> 00:04:57.890
that when we challenge
the assumptions we make

00:04:57.890 --> 00:05:00.540
about our users, we can
come up with solutions that

00:05:00.540 --> 00:05:02.130
have tremendous
benefits not just

00:05:02.130 --> 00:05:03.880
for the people we start
off thinking about

00:05:03.880 --> 00:05:06.010
but to help everybody.

00:05:06.010 --> 00:05:08.540
We get these new thinking
we get new designs new ideas

00:05:08.540 --> 00:05:09.845
and new categories of products.

00:05:12.780 --> 00:05:14.630
But we want to talk
about your app.

00:05:14.630 --> 00:05:17.050
So we figured we'd
start with an app.

00:05:17.050 --> 00:05:19.770
And the app we're going to
use is one that Eve wrote.

00:05:19.770 --> 00:05:21.380
This is to help
everybody memorize

00:05:21.380 --> 00:05:25.260
digits of pi-- so a noble goal.

00:05:25.260 --> 00:05:28.780
So what we're going to do is
look at how this app works,

00:05:28.780 --> 00:05:31.670
talk about the assumptions
that it's default design makes,

00:05:31.670 --> 00:05:35.120
and see how the accessibility
features in Android

00:05:35.120 --> 00:05:37.450
can relax those assumptions.

00:05:37.450 --> 00:05:39.420
And look at some best
practices that apps

00:05:39.420 --> 00:05:42.250
can follow to make
that process work well

00:05:42.250 --> 00:05:45.260
and introduce some testing
tools for the nuts and bolts

00:05:45.260 --> 00:05:46.260
of these best practices.

00:05:49.920 --> 00:05:52.550
So she calls it elephant
pi because elephants

00:05:52.550 --> 00:05:54.220
have good memories.

00:05:54.220 --> 00:05:57.430
And this is the test
yourself activity.

00:05:57.430 --> 00:05:59.730
So it lets you type
in digits of pi

00:05:59.730 --> 00:06:01.710
and it tells you when
you got something wrong.

00:06:01.710 --> 00:06:05.470
So Hugh is going to start this
app and show you how it works

00:06:05.470 --> 00:06:08.110
and hopefully impress everybody
with his knowledge of pi.

00:06:08.110 --> 00:06:10.738
So we can switch
to the wolf please.

00:06:10.738 --> 00:06:12.880
HUGH OH: Hi, I'm Hugh.

00:06:12.880 --> 00:06:16.240
I'm a software engineer
on the accessibility team,

00:06:16.240 --> 00:06:19.440
and I'm just going to show you
what the default behavior will

00:06:19.440 --> 00:06:21.590
be with elephant pi.

00:06:21.590 --> 00:06:23.800
So I've got a keypad
here at the bottom.

00:06:23.800 --> 00:06:28.140
And so as I type them
out-- so 3.14159--

00:06:28.140 --> 00:06:30.870
it also reflects that
in a text box above.

00:06:30.870 --> 00:06:33.020
And if I go ahead
and make a mistake,

00:06:33.020 --> 00:06:37.960
it will go ahead and tell me
what the digit should have been

00:06:37.960 --> 00:06:40.314
and highlights the
wrong digit in red.

00:06:40.314 --> 00:06:41.480
So this is the default case.

00:06:41.480 --> 00:06:44.766
It's simple but
effective in learning pi.

00:06:44.766 --> 00:06:48.030
EVE ANDERSON: All right, you
can go back to the slides.

00:06:48.030 --> 00:06:52.400
So if any of you just got funded
and you're developing an app

00:06:52.400 --> 00:06:54.020
to help people
memorize digits of pi,

00:06:54.020 --> 00:06:55.490
then I guess you're
going to spend

00:06:55.490 --> 00:06:59.460
the rest of this day just trying
to pivot to something new.

00:06:59.460 --> 00:07:01.210
But fortunately,
apparently your investors

00:07:01.210 --> 00:07:03.820
have an irrational exuberance.

00:07:03.820 --> 00:07:06.937
But what we've seen is
the default experience.

00:07:06.937 --> 00:07:08.770
And it's really making
a lot of assumptions.

00:07:08.770 --> 00:07:10.590
And if you're used to
the default experience,

00:07:10.590 --> 00:07:12.339
you may not really be
thinking about them.

00:07:12.339 --> 00:07:15.470
But we're assuming users
can see this great.

00:07:15.470 --> 00:07:17.240
We're assuming that
users can touch

00:07:17.240 --> 00:07:19.400
the screen with a reasonable
amount of precision--

00:07:19.400 --> 00:07:21.481
that they can read, that
they can understand what

00:07:21.481 --> 00:07:23.230
the directions are
saying, understand what

00:07:23.230 --> 00:07:25.940
they're supposed to be doing.

00:07:25.940 --> 00:07:29.510
And perhaps most
tenuous of all, we're

00:07:29.510 --> 00:07:31.670
assuming that people
actually want to hear

00:07:31.670 --> 00:07:34.580
others memorize digits of pi.

00:07:34.580 --> 00:07:37.809
And not all these assumptions
are true for all the users--

00:07:37.809 --> 00:07:40.100
certainly, they're not true
for everybody in this room.

00:07:40.100 --> 00:07:43.050
And accessibility isn't going to
address all these assumptions.

00:07:43.050 --> 00:07:44.720
This one you probably
have to challenge

00:07:44.720 --> 00:07:46.820
with user testing or something.

00:07:46.820 --> 00:07:48.820
Hopefully, user testing
that would include users

00:07:48.820 --> 00:07:50.325
with disabilities.

00:07:50.325 --> 00:07:51.700
But with accessibility,
we really

00:07:51.700 --> 00:07:53.720
can address some
assumptions that

00:07:53.720 --> 00:07:57.720
become real barriers for
people to access in technology.

00:07:57.720 --> 00:07:59.350
We'll take a look
at a few of them.

00:07:59.350 --> 00:08:01.670
We have the services called
accessibility services

00:08:01.670 --> 00:08:02.580
in Android.

00:08:02.580 --> 00:08:05.620
And the first one I want to
show you is called TalkBack.

00:08:05.620 --> 00:08:06.990
And this ships with Android.

00:08:06.990 --> 00:08:08.710
And it's a screen reader.

00:08:08.710 --> 00:08:11.150
And what a screen reader
does is remove the assumption

00:08:11.150 --> 00:08:14.080
that users can see the screen.

00:08:14.080 --> 00:08:16.850
But it replaces it with the
assumption that users can hear.

00:08:16.850 --> 00:08:18.850
And so it'll read
what's on the screen,

00:08:18.850 --> 00:08:23.280
and guide with this spoken
feedback, guide users

00:08:23.280 --> 00:08:27.420
to find the actions they want
to take to navigate the device.

00:08:27.420 --> 00:08:30.640
So Hugh is now going to show
you the pi app using TalkBack.

00:08:30.640 --> 00:08:34.100
Switch back to the wolf please.

00:08:34.100 --> 00:08:37.250
HUGH OH: OK, so we have
the same exact application.

00:08:37.250 --> 00:08:39.290
But let's go ahead
and turn on TalkBack.

00:08:39.290 --> 00:08:41.130
I'll go ahead and
turn it back on.

00:08:41.130 --> 00:08:42.309
TALKBACK: Test yourself.

00:08:42.309 --> 00:08:45.960
HUGH OH: OK, so I will go
ahead and use a feature

00:08:45.960 --> 00:08:48.350
called ExploreByTouch where
it reads out everything

00:08:48.350 --> 00:08:51.150
that I'm touching as I explore
the screen with my finger.

00:08:51.150 --> 00:08:53.490
So let's go ahead and
go over to the three

00:08:53.490 --> 00:08:55.480
and see what we can find.

00:08:55.480 --> 00:08:56.560
TALKBACK: One button.

00:08:56.560 --> 00:08:57.480
Two button.

00:08:57.480 --> 00:08:58.270
Three button.

00:08:58.270 --> 00:08:59.936
HUGH OH: And then
once I have the button

00:08:59.936 --> 00:09:03.260
that I want to select, I
just go ahead and double tap.

00:09:03.260 --> 00:09:05.707
And it appears as if I tapped
it from the earlier case.

00:09:05.707 --> 00:09:06.790
So let's do a couple more.

00:09:06.790 --> 00:09:08.860
TALKBACK: Point button.

00:09:08.860 --> 00:09:10.290
One button.

00:09:10.290 --> 00:09:12.670
HUGH OH: And let's go ahead
and make a mistake right now

00:09:12.670 --> 00:09:13.817
and see what happens.

00:09:13.817 --> 00:09:15.150
TALKBACK: Wrong, should be four.

00:09:15.150 --> 00:09:18.690
HUGH OH: And it notifies me
audibly on top of visually

00:09:18.690 --> 00:09:21.310
to tell me, hey, you've
got a digit wrong.

00:09:21.310 --> 00:09:26.980
And this is how TalkBack
interacts with elephant pi.

00:09:26.980 --> 00:09:29.780
PHIL WEAVER: OK, let's
go back to the slides.

00:09:29.780 --> 00:09:30.785
So that's TalkBack.

00:09:30.785 --> 00:09:32.910
There's another service
that can work with TalkBack

00:09:32.910 --> 00:09:34.220
called BrailleBack.

00:09:34.220 --> 00:09:35.870
And so that replaces
the assumption

00:09:35.870 --> 00:09:38.860
that users can hear with one
that they can read Braille.

00:09:38.860 --> 00:09:40.750
And it sends all
the spoken feedback

00:09:40.750 --> 00:09:42.897
to a refreshable
Braille display.

00:09:42.897 --> 00:09:44.730
And we're not going to
demo that right here.

00:09:44.730 --> 00:09:46.080
It's sort of a tactile demo.

00:09:46.080 --> 00:09:49.610
If you're interested to see
how a Braille display works,

00:09:49.610 --> 00:09:51.802
we're over in the
google.org area.

00:09:51.802 --> 00:09:53.260
And you're welcome
to stop by later

00:09:53.260 --> 00:09:56.350
and talk about
anything you like.

00:09:56.350 --> 00:09:59.330
So all these things expand
the Android user base.

00:09:59.330 --> 00:10:01.490
And another thing
we can do is try

00:10:01.490 --> 00:10:04.140
to relax the assumptions that
users can touch the screen

00:10:04.140 --> 00:10:06.340
with any degree of precision.

00:10:06.340 --> 00:10:08.650
And so we have switch
access that does this.

00:10:08.650 --> 00:10:12.410
And it ships with Android
starting and Lollipop.

00:10:12.410 --> 00:10:15.190
And it replaces this assumption
that users can touch the screen

00:10:15.190 --> 00:10:17.250
as long as they have a switch.

00:10:17.250 --> 00:10:18.765
These switches
could be big buttons

00:10:18.765 --> 00:10:20.640
like Hugh is going to
demonstrate in a moment

00:10:20.640 --> 00:10:23.980
or something as high tech
as determining when somebody

00:10:23.980 --> 00:10:25.730
can contract a single muscle.

00:10:25.730 --> 00:10:28.520
So this is really trying to make
as few assumptions about users

00:10:28.520 --> 00:10:33.320
as possible in their ability
to control the device.

00:10:33.320 --> 00:10:35.540
So Hugh is now going
to drive the pi

00:10:35.540 --> 00:10:36.952
app using a single button.

00:10:36.952 --> 00:10:39.410
And he's going to use a feature
called auto scanning, which

00:10:39.410 --> 00:10:43.210
is going to highlight each item
one at a time on the screen--

00:10:43.210 --> 00:10:45.120
everything that's
clickable-- and then

00:10:45.120 --> 00:10:47.286
when it gets to the thing
that he wants to click on,

00:10:47.286 --> 00:10:48.670
he hits the button again.

00:10:48.670 --> 00:10:50.787
So let's switch back
to the wolf please.

00:10:53.410 --> 00:10:56.020
HUGH OH: OK, so we're
back to our original app.

00:10:56.020 --> 00:10:59.710
And as you can see here, I've
got a brand new button here--

00:10:59.710 --> 00:11:00.720
also known as a switch.

00:11:00.720 --> 00:11:02.490
And I've only got one.

00:11:02.490 --> 00:11:04.302
So it both starts
the auto-scanning,

00:11:04.302 --> 00:11:06.760
which starts from the top left
and goes to the bottom right

00:11:06.760 --> 00:11:08.050
and goes linearly.

00:11:08.050 --> 00:11:12.542
And the same button will
also select an element.

00:11:12.542 --> 00:11:14.500
So let's go ahead and
see what that looks like.

00:11:14.500 --> 00:11:15.583
So I started the scanning.

00:11:15.583 --> 00:11:18.360
It starts on the top left
and goes to every actual one.

00:11:18.360 --> 00:11:21.900
And then I hit it again and
it's as if I had touched it.

00:11:21.900 --> 00:11:25.580
So we can go ahead and
make a mistake here,

00:11:25.580 --> 00:11:29.000
and it still notifies
you visually that, hey,

00:11:29.000 --> 00:11:30.140
something wrong happened.

00:11:30.140 --> 00:11:31.980
But it still behaves
exactly the same way.

00:11:31.980 --> 00:11:37.340
So this is how switch access
interacts with elephant pi.

00:11:37.340 --> 00:11:40.700
PHIL WEAVER: So go back
to the slides please.

00:11:40.700 --> 00:11:43.730
So there we have three
services-- TalkBack,

00:11:43.730 --> 00:11:47.900
BrailleBack and switch access--
that remove and replace

00:11:47.900 --> 00:11:49.990
different assumptions
that we make about users

00:11:49.990 --> 00:11:52.031
and how they're going to
interact with an Android

00:11:52.031 --> 00:11:52.532
device.

00:11:52.532 --> 00:11:53.906
Now, the nice
thing about Android

00:11:53.906 --> 00:11:55.160
is it's a very open platform.

00:11:55.160 --> 00:11:58.330
So any developer can write a new
service with a completely new

00:11:58.330 --> 00:12:01.680
interaction model to try to
address whatever assumptions

00:12:01.680 --> 00:12:04.410
he or she wants to break down,
serve any group of users.

00:12:04.410 --> 00:12:07.390
In theory, every user could
actually have his or her very

00:12:07.390 --> 00:12:08.270
own experience.

00:12:08.270 --> 00:12:11.740
This is sort of a way of
doing mass customization.

00:12:11.740 --> 00:12:14.300
But how does this work?

00:12:14.300 --> 00:12:16.280
So very high level,
this magic happens

00:12:16.280 --> 00:12:17.680
inside the Android framework.

00:12:17.680 --> 00:12:19.740
So the Android
framework knows what's

00:12:19.740 --> 00:12:21.930
being put on the screen,
what's clickable,

00:12:21.930 --> 00:12:23.930
where it is, what its
bounds on the screen are,

00:12:23.930 --> 00:12:27.080
what has text, so
on and so forth.

00:12:27.080 --> 00:12:31.810
And it builds an event stream of
everything going on the screen.

00:12:31.810 --> 00:12:34.950
And accessibility services
can subscribe to the stream

00:12:34.950 --> 00:12:37.620
and can pay attention to
different parts of it.

00:12:37.620 --> 00:12:40.229
So the switch access
service is going

00:12:40.229 --> 00:12:42.270
to really care about when
clickable things change

00:12:42.270 --> 00:12:43.420
on the screen.

00:12:43.420 --> 00:12:46.030
TalkBack and BrailleBack need
to understand when something

00:12:46.030 --> 00:12:48.080
happens called live
region that will need

00:12:48.080 --> 00:12:50.670
to be announced to the user.

00:12:50.670 --> 00:12:53.500
And the nice thing about this
is the app really is unaware

00:12:53.500 --> 00:12:55.621
that this is going on.

00:12:55.621 --> 00:12:57.120
It's not aware of
this back channel,

00:12:57.120 --> 00:12:59.270
but it can do quite
a bit to support it.

00:13:02.270 --> 00:13:05.510
So one of things it can do
is add content descriptions.

00:13:05.510 --> 00:13:07.310
I said Android knows
what's on the screen,

00:13:07.310 --> 00:13:09.780
but what it doesn't
know is what it means.

00:13:09.780 --> 00:13:14.420
So if I use text buttons or Eve
would use text buttons instead

00:13:14.420 --> 00:13:19.329
of image buttons to
enter digits of pi,

00:13:19.329 --> 00:13:21.620
Android would have known
exactly what these things were

00:13:21.620 --> 00:13:22.740
because they're labeled.

00:13:22.740 --> 00:13:26.640
But instead, we needed to have
these pretty purple circles.

00:13:26.640 --> 00:13:28.240
And these become images.

00:13:28.240 --> 00:13:31.600
And when we use images to
convey information to users,

00:13:31.600 --> 00:13:33.180
we're making the
implicit assumption

00:13:33.180 --> 00:13:35.440
that they can see the images.

00:13:35.440 --> 00:13:37.780
So we need some way to
make that this mean can get

00:13:37.780 --> 00:13:40.370
conveyed in other ways as well.

00:13:40.370 --> 00:13:43.435
And the main way we do that is
through content descriptions.

00:13:43.435 --> 00:13:47.070
These extra text that you
can add to any view that gets

00:13:47.070 --> 00:13:50.500
passed along to any active
accessibility services.

00:13:50.500 --> 00:13:53.500
So we've content descriptions
to all these buttons-- one, two,

00:13:53.500 --> 00:13:55.186
three, four, and so on.

00:13:55.186 --> 00:13:56.560
And notice they
say what they do.

00:13:56.560 --> 00:13:59.490
And TalkBack ads on the fact
that their role in this thing

00:13:59.490 --> 00:14:01.190
is a button.

00:14:01.190 --> 00:14:06.000
So the single most common
accessibility related bug

00:14:06.000 --> 00:14:08.210
is for someone just to
forget to put a content

00:14:08.210 --> 00:14:10.110
description on an image.

00:14:10.110 --> 00:14:14.010
And then TalkBack has to
automatically label it.

00:14:14.010 --> 00:14:16.030
And it essentially becomes
difficult for users

00:14:16.030 --> 00:14:17.740
who can't see the
screen to understand

00:14:17.740 --> 00:14:20.320
what a button is going to do.

00:14:20.320 --> 00:14:23.680
So if everybody
does nothing else,

00:14:23.680 --> 00:14:26.320
if you add content
descriptions to all images that

00:14:26.320 --> 00:14:28.700
convey meaning, that
will really help

00:14:28.700 --> 00:14:34.075
us relax that assumption that
all users can see the screen.

00:14:34.075 --> 00:14:36.205
The other thing is not
all text on the screen

00:14:36.205 --> 00:14:37.080
is equally important.

00:14:37.080 --> 00:14:39.510
Some of it can just be left
on the screen for users

00:14:39.510 --> 00:14:43.450
to discover on their own-- like
the directions of what to do.

00:14:43.450 --> 00:14:46.940
But some text, like when
Hugh makes a mistake

00:14:46.940 --> 00:14:50.452
on entering digits of pi, he
wants to know that right away.

00:14:50.452 --> 00:14:51.910
You don't want to
type one thing in

00:14:51.910 --> 00:14:52.920
and then have to
scroll around to see

00:14:52.920 --> 00:14:54.740
if you got something
wrong or right

00:14:54.740 --> 00:14:56.740
and then go and
enter another digit.

00:14:56.740 --> 00:14:59.150
And so we made
this a live region.

00:14:59.150 --> 00:15:02.930
And a live region means that
whenever that view updates,

00:15:02.930 --> 00:15:05.720
it's going to generate an extra
event in this event stream

00:15:05.720 --> 00:15:09.570
that accessibility services
can pay attention to.

00:15:09.570 --> 00:15:12.572
And we label it Polite, not just
because we like to be polite,

00:15:12.572 --> 00:15:15.030
but that means it shouldn't
really interrupt anything else.

00:15:15.030 --> 00:15:16.404
So this is important
information,

00:15:16.404 --> 00:15:18.690
but it's not like we have
to stop all other audio

00:15:18.690 --> 00:15:20.970
from playing before we
can tell people that they

00:15:20.970 --> 00:15:22.434
got a digit wrong of pi.

00:15:25.160 --> 00:15:27.427
So that's a little bit
about what we did to the app

00:15:27.427 --> 00:15:28.885
to make it work
well with TalkBack.

00:15:31.470 --> 00:15:33.820
Now let's break it.

00:15:33.820 --> 00:15:36.110
So we'll go through and take
this nice accessible app

00:15:36.110 --> 00:15:39.070
that you've wrote and we'll
delete all the content

00:15:39.070 --> 00:15:41.160
descriptions except
one, where we'll just

00:15:41.160 --> 00:15:42.160
add some redundant text.

00:15:42.160 --> 00:15:43.360
We'll add the fact
that it's a button.

00:15:43.360 --> 00:15:44.859
And we'll get rid
of the live region

00:15:44.859 --> 00:15:46.080
too just for good measure.

00:15:46.080 --> 00:15:48.121
And now Hugh can show you
this broken experience.

00:15:50.414 --> 00:15:51.580
So let's switch to the wolf.

00:15:54.220 --> 00:15:57.520
HUGH OH: OK, so it
looks exactly the same.

00:15:57.520 --> 00:16:00.080
But let's hear what a broken
experience sounds like.

00:16:00.080 --> 00:16:02.270
So let's go ahead and
enable TalkBack again.

00:16:02.270 --> 00:16:03.990
TALKBACK: Test yourself.

00:16:03.990 --> 00:16:06.740
HUGH OH: So we unable
everything and then

00:16:06.740 --> 00:16:08.620
we had a redundant
button at the seven.

00:16:08.620 --> 00:16:10.370
So let's make our way
to the seven button.

00:16:10.370 --> 00:16:12.060
I'll be passing over the
one and the four button.

00:16:12.060 --> 00:16:13.680
Let's hear what
those sound like.

00:16:13.680 --> 00:16:15.650
TALKBACK: Buton 96, unlabeled.

00:16:15.650 --> 00:16:18.000
Button 79, unlabeled.

00:16:18.000 --> 00:16:19.930
Seven button button.

00:16:19.930 --> 00:16:22.600
HUGH OH: So you can hear
it tried its best to give

00:16:22.600 --> 00:16:26.410
a name to unlabeled
buttons, but like we said,

00:16:26.410 --> 00:16:28.160
we don't understand the meaning.

00:16:28.160 --> 00:16:31.810
And then seven button button
had a redundant button in there.

00:16:31.810 --> 00:16:34.514
So let's also hear what happens
if I get something wrong,

00:16:34.514 --> 00:16:35.930
and let's just do
that right away.

00:16:35.930 --> 00:16:37.880
So I'll double tap.

00:16:37.880 --> 00:16:40.590
And so it shows us visually
that we've got something wrong,

00:16:40.590 --> 00:16:42.340
but we're missing
the audio queue here.

00:16:42.340 --> 00:16:47.010
And this is how TalkBack
interacts with an inaccessible

00:16:47.010 --> 00:16:47.870
version of the app.

00:16:51.630 --> 00:16:54.150
PHIL WEAVER: Let's switch
back to the slides.

00:16:54.150 --> 00:16:56.210
So those are a couple
of issues that affected

00:16:56.210 --> 00:16:58.200
the experience with talkback.

00:16:58.200 --> 00:17:00.760
But switch access makes
very different assumptions

00:17:00.760 --> 00:17:03.980
about our users, and thus is
affected by different types

00:17:03.980 --> 00:17:06.170
of accessibility related bugs.

00:17:06.170 --> 00:17:08.900
So I'll show you one example.

00:17:08.900 --> 00:17:11.210
So in order to structure
the Android UI,

00:17:11.210 --> 00:17:13.114
I've added a bunch
of linear layouts.

00:17:13.114 --> 00:17:14.530
And actually I've
got at least one

00:17:14.530 --> 00:17:16.113
in there that isn't
strictly required.

00:17:16.113 --> 00:17:18.490
Sometimes I end up adding a
couple extra layouts in there

00:17:18.490 --> 00:17:20.210
just to try to get
things to look right.

00:17:20.210 --> 00:17:23.710
Once I get to that point,
I figure, OK, good enough.

00:17:23.710 --> 00:17:25.140
And generally, it
is good enough.

00:17:25.140 --> 00:17:29.050
But if we say that
all of these things

00:17:29.050 --> 00:17:32.320
are clickable-- so we make
extraneous views on the screen

00:17:32.320 --> 00:17:34.770
clickable-- now we've
told the Android framework

00:17:34.770 --> 00:17:36.230
that these do something.

00:17:36.230 --> 00:17:38.010
And so it's going to
tell switch access.

00:17:38.010 --> 00:17:39.760
Switch access wants
to make sure that it's

00:17:39.760 --> 00:17:42.590
giving all the options
it can to the users.

00:17:42.590 --> 00:17:44.600
And so it's going to
surface these extra

00:17:44.600 --> 00:17:46.225
I call them decoy
clickable views.

00:17:46.225 --> 00:17:49.210
It's going to surface
those to our users.

00:17:49.210 --> 00:17:52.690
And that creates a confusing
and slow experience that really

00:17:52.690 --> 00:17:54.910
isn't good enough anymore.

00:17:54.910 --> 00:17:57.240
So we'll look at the
pi app one last time

00:17:57.240 --> 00:17:59.807
using the switch access
with this broken activity.

00:17:59.807 --> 00:18:01.015
So we'll go back to the wolf.

00:18:04.860 --> 00:18:07.320
HUGH OH: OK, so we have
the same inaccessible app,

00:18:07.320 --> 00:18:11.150
but let's see how the breakages
happen with switch access.

00:18:11.150 --> 00:18:14.360
So I've got my single red button
here, the same one from before.

00:18:14.360 --> 00:18:16.270
But let's start
the auto scanning.

00:18:16.270 --> 00:18:19.830
And as you can see, there's
these extra outlines

00:18:19.830 --> 00:18:22.310
that are being
presented to the user.

00:18:22.310 --> 00:18:25.330
And there's no real
rhyme or reason

00:18:25.330 --> 00:18:27.880
why they're grouping the
entire thing or given rows,

00:18:27.880 --> 00:18:29.497
but as far as the
user is concerned,

00:18:29.497 --> 00:18:31.580
it seems like these are
supposed to be actionable.

00:18:31.580 --> 00:18:34.204
So I'm going to go ahead and let
this finish its auto scanning.

00:18:34.204 --> 00:18:39.790
And I'm going to try to select
one of these brand new dummy

00:18:39.790 --> 00:18:40.410
containers.

00:18:40.410 --> 00:18:42.890
So let's go ahead
and see what happens.

00:18:42.890 --> 00:18:44.592
So nothing happened.

00:18:44.592 --> 00:18:46.550
It's confusing to the
user as to what happened,

00:18:46.550 --> 00:18:49.527
and on top of that,
you have to scan

00:18:49.527 --> 00:18:51.110
through these every
single time, which

00:18:51.110 --> 00:18:53.490
can make for a really
grueling experience

00:18:53.490 --> 00:18:55.470
when you have to scan
through all these.

00:18:55.470 --> 00:18:57.190
These are just obstacles in the
way that are slowing you down.

00:18:57.190 --> 00:18:59.130
And this is how switch
access interacts

00:18:59.130 --> 00:19:03.530
with the same inaccessible
version of the app.

00:19:03.530 --> 00:19:06.710
PHIL WEAVER: OK, let's
go back to the slides.

00:19:06.710 --> 00:19:08.680
So to see these kinds
of bugs, we really

00:19:08.680 --> 00:19:10.970
have to start an
accessibility service.

00:19:10.970 --> 00:19:13.340
We've implemented the same
activity twice in order

00:19:13.340 --> 00:19:15.480
to demonstrate these bugs.

00:19:15.480 --> 00:19:19.650
But you really can't
tell them apart

00:19:19.650 --> 00:19:22.440
if you're just using the
default experience of touching

00:19:22.440 --> 00:19:24.457
the screen, seeing the screen.

00:19:24.457 --> 00:19:26.040
But obviously they
have a major effect

00:19:26.040 --> 00:19:26.950
on accessibility services.

00:19:26.950 --> 00:19:28.830
And I've shown you the
code as we went along.

00:19:28.830 --> 00:19:33.310
Here's the DIF between
the two activities.

00:19:33.310 --> 00:19:36.450
These are very
small scale changes.

00:19:36.450 --> 00:19:39.830
And a big aspect of
improving apps accessibility

00:19:39.830 --> 00:19:42.270
is essentially to make
sure this kind of code

00:19:42.270 --> 00:19:44.860
gets into the app source.

00:19:44.860 --> 00:19:48.010
This is fairly typical for
the scale of changes needed

00:19:48.010 --> 00:19:51.020
to make an activity accessible.

00:19:51.020 --> 00:19:53.180
But they're also
easy to overlook.

00:19:53.180 --> 00:19:56.730
Developers are working very
hard to make sure their default

00:19:56.730 --> 00:20:00.580
experience is ready to ship, and
it takes a lot about discipline

00:20:00.580 --> 00:20:03.430
to make sure this kind of
markup still gets into the app

00:20:03.430 --> 00:20:05.500
and gets in there consistently.

00:20:05.500 --> 00:20:08.280
And the problem is
very similar to making

00:20:08.280 --> 00:20:09.830
sure the stuff we're
working on today

00:20:09.830 --> 00:20:12.800
doesn't break the stuff
that we worked on last week.

00:20:12.800 --> 00:20:15.940
So testing is the way we can
make sure that accessibility

00:20:15.940 --> 00:20:18.750
gets done right.

00:20:18.750 --> 00:20:19.935
So let's talk about testing.

00:20:19.935 --> 00:20:22.060
And Casey is going to--
thanks a lot for your help,

00:20:22.060 --> 00:20:23.780
Hugh-- Casey is going
to show us a cool thing

00:20:23.780 --> 00:20:24.696
we've been working on.

00:20:38.840 --> 00:20:41.850
CASEY BURKHARDT:
Let's have Phil's mic.

00:20:41.850 --> 00:20:44.780
PHIL WEAVER: So we've been
doing a demonstration all along

00:20:44.780 --> 00:20:46.280
about how to test
for accessibility.

00:20:46.280 --> 00:20:48.760
We started TalkBack, we
started switch access,

00:20:48.760 --> 00:20:50.140
we saw how things worked.

00:20:50.140 --> 00:20:52.020
Ideally, we'd start
up BrailleBack,

00:20:52.020 --> 00:20:55.060
and ideally we'd find
every accessibility service

00:20:55.060 --> 00:20:57.220
that anyone in the developer
community has built

00:20:57.220 --> 00:20:59.810
and try that out as well.

00:20:59.810 --> 00:21:01.170
This is going to take some time.

00:21:01.170 --> 00:21:02.510
It's going to be hard to scale.

00:21:02.510 --> 00:21:04.200
We're not going to be able to do
this, certainly, every time we

00:21:04.200 --> 00:21:05.675
make a change to our app.

00:21:05.675 --> 00:21:07.675
And we're going to have
to train any testers who

00:21:07.675 --> 00:21:13.140
are going to do this kind of
testing on every service that's

00:21:13.140 --> 00:21:13.750
out there.

00:21:16.300 --> 00:21:18.730
But what if there
was an app that could

00:21:18.730 --> 00:21:21.440
automate some of this testing?

00:21:21.440 --> 00:21:23.220
Somewhat interested,
very interested,

00:21:23.220 --> 00:21:25.410
extremely interested?

00:21:25.410 --> 00:21:28.240
So Casey is going to show
us a project that we've

00:21:28.240 --> 00:21:30.760
been working on in
Google Research that

00:21:30.760 --> 00:21:32.370
does a lot of this automation.

00:21:32.370 --> 00:21:33.620
CASEY BURKHARDT: Thanks, Phil.

00:21:33.620 --> 00:21:35.614
PHIL WEAVER: Let's
switch to the wolf.

00:21:38.497 --> 00:21:40.330
CASEY BURKHARDT: My
name is Casey Burkhardt.

00:21:40.330 --> 00:21:41.788
I'm a software
engineer on Google's

00:21:41.788 --> 00:21:43.835
accessibility engineering
team and research.

00:21:43.835 --> 00:21:46.210
And we just wanted to give
you an early look at something

00:21:46.210 --> 00:21:49.440
we've been working on
to help make identifying

00:21:49.440 --> 00:21:52.670
accessibility issues within
your Android applications

00:21:52.670 --> 00:21:54.320
fast and easy.

00:21:54.320 --> 00:21:56.700
Here we have the same
broken activity--

00:21:56.700 --> 00:21:58.090
the same test
yourself activity--

00:21:58.090 --> 00:22:00.820
that we've
intentionally introduced

00:22:00.820 --> 00:22:02.760
some accessibility issues.

00:22:02.760 --> 00:22:05.090
So basically,
you've seen earlier

00:22:05.090 --> 00:22:07.710
how these issues impact the
experience with TalkBack

00:22:07.710 --> 00:22:08.812
and switch access.

00:22:08.812 --> 00:22:10.520
The only thing different
with this device

00:22:10.520 --> 00:22:13.800
is we've enabled Accessibility
Checker for Android.

00:22:13.800 --> 00:22:16.650
And what that's done is it
has placed a floating action

00:22:16.650 --> 00:22:19.400
button near the top
right of the display.

00:22:19.400 --> 00:22:21.000
And if we click
this action button,

00:22:21.000 --> 00:22:24.000
it's going to actually trigger
an accessibility evaluation

00:22:24.000 --> 00:22:27.370
of the foreground activity
of the current application.

00:22:27.370 --> 00:22:29.530
And it's going to use the
same exact accessibility

00:22:29.530 --> 00:22:33.430
APIs that TalkBack or
BrailleBack or switch access

00:22:33.430 --> 00:22:36.790
might use to provide more
information to the user

00:22:36.790 --> 00:22:38.430
about your application.

00:22:38.430 --> 00:22:39.960
Except, it's
looking specifically

00:22:39.960 --> 00:22:42.470
for accessibility defects.

00:22:42.470 --> 00:22:45.550
So if we run this
evaluation, we will basically

00:22:45.550 --> 00:22:47.302
traverse our
application's hierarchy

00:22:47.302 --> 00:22:48.885
and we'll see what
issues we identify.

00:22:52.220 --> 00:22:55.800
So it will bring
up a results UI.

00:22:55.800 --> 00:22:58.600
It looks like we found that
duplicate clickable view

00:22:58.600 --> 00:23:01.970
from earlier that we saw causing
some inefficiencies with switch

00:23:01.970 --> 00:23:02.870
access.

00:23:02.870 --> 00:23:07.460
We also see a number of missing
speakable descriptions here

00:23:07.460 --> 00:23:09.980
related to missing
content descriptions

00:23:09.980 --> 00:23:10.857
on our digit buttons.

00:23:10.857 --> 00:23:12.440
We want to go back
and make sure we're

00:23:12.440 --> 00:23:15.610
providing reasonable
content descriptions there.

00:23:15.610 --> 00:23:17.940
And finally, we have a
redundantly labeled view.

00:23:17.940 --> 00:23:20.190
It looks like our seven
button incorrectly

00:23:20.190 --> 00:23:22.650
has the word button appended
to the end of its content

00:23:22.650 --> 00:23:23.200
description.

00:23:23.200 --> 00:23:26.100
We saw the impact of
that little earlier.

00:23:26.100 --> 00:23:28.500
So now that we've identified
all of these issues

00:23:28.500 --> 00:23:32.702
in a simple results activity,
we just need to fix them.

00:23:32.702 --> 00:23:34.910
PHIL WEAVER: All right, we
can go back to the slides.

00:23:34.910 --> 00:23:36.500
Thanks for that feedback, Casey.

00:23:36.500 --> 00:23:39.960
Fortunately, I do have
a patch ready for you

00:23:39.960 --> 00:23:41.250
if you can take a look at it.

00:23:41.250 --> 00:23:42.180
CASEY BURKHARDT:
Yeah, we've added back

00:23:42.180 --> 00:23:43.263
some content descriptions.

00:23:43.263 --> 00:23:45.680
We've removed that
clickable view.

00:23:45.680 --> 00:23:48.540
Looks good to me.

00:23:48.540 --> 00:23:50.290
PHIL WEAVER: Stay with
the slides, please.

00:23:50.290 --> 00:23:52.950
So I've got Casey to say
it looks good to him.

00:23:52.950 --> 00:23:56.940
That's something
I always cherish.

00:23:56.940 --> 00:23:59.720
And this is really the
workflow that we want to see.

00:23:59.720 --> 00:24:01.930
We want to see detailed,
actionable feedback getting

00:24:01.930 --> 00:24:03.610
back to developers
quickly so that they

00:24:03.610 --> 00:24:06.750
can make fairly small scale
changes to make sure they

00:24:06.750 --> 00:24:09.000
build quality products.

00:24:09.000 --> 00:24:11.570
So we're working hard
to get this tool out to.

00:24:11.570 --> 00:24:13.090
It is still manual
testing, though.

00:24:13.090 --> 00:24:14.670
So it's something
that if you wanted

00:24:14.670 --> 00:24:17.360
to do it every time
you make a change,

00:24:17.360 --> 00:24:20.070
it becomes tricky to do
any sort of manual test

00:24:20.070 --> 00:24:22.350
if you've got some large
scale development effort.

00:24:22.350 --> 00:24:24.350
What we really want to
do is catch these bugs as

00:24:24.350 --> 00:24:27.060
early as possible,
and to do that,

00:24:27.060 --> 00:24:30.720
we want to get into the
code development loop.

00:24:30.720 --> 00:24:33.770
So we've taken the
core of this checker

00:24:33.770 --> 00:24:36.180
and released it as an
open source library

00:24:36.180 --> 00:24:38.080
for accessibility testing.

00:24:38.080 --> 00:24:41.840
And we've integrated this
into two popular testing

00:24:41.840 --> 00:24:45.360
frameworks-- Espresso
and Robolectric.

00:24:45.360 --> 00:24:48.670
I'll show you how it
works in both frameworks.

00:24:48.670 --> 00:24:50.780
So Espresso I'll
talk about first.

00:24:50.780 --> 00:24:53.820
It's a test framework for
Android user interfaces.

00:24:53.820 --> 00:24:58.390
And accessibility checking
is available as of yesterday

00:24:58.390 --> 00:25:01.700
in version 2.2 in the
Espresso contrib area.

00:25:04.380 --> 00:25:07.940
So just to show you very
briefly how Espresso works.

00:25:07.940 --> 00:25:09.870
If you've ever done
any Android UI testing,

00:25:09.870 --> 00:25:11.702
you find there's a
bit of subtlety to it.

00:25:11.702 --> 00:25:13.410
You have to make sure
you understand what

00:25:13.410 --> 00:25:14.280
thread things are running in.

00:25:14.280 --> 00:25:16.613
There ends up being a lot of
boilerplate synchronization

00:25:16.613 --> 00:25:17.470
code.

00:25:17.470 --> 00:25:19.570
So if you want to do a
simple test that does, say,

00:25:19.570 --> 00:25:23.090
three things-- type some text
into a field, clicks a button,

00:25:23.090 --> 00:25:26.740
makes sure text updates
properly in another field--

00:25:26.740 --> 00:25:30.049
that can often end up being
a significant amount of code.

00:25:30.049 --> 00:25:31.840
Espresso does a really
nice job of wrapping

00:25:31.840 --> 00:25:33.790
a lot of this boilerplate
up so we end up

00:25:33.790 --> 00:25:35.680
with our three lines
of code to do three

00:25:35.680 --> 00:25:37.900
fairly straightforward things.

00:25:37.900 --> 00:25:43.010
And there's actually a box
talk about espresso out

00:25:43.010 --> 00:25:45.652
in the developer sandbox
starting at 2:00-- so,

00:25:45.652 --> 00:25:46.860
shortly after this talk ends.

00:25:46.860 --> 00:25:48.359
So if you're
interested in Espresso,

00:25:48.359 --> 00:25:50.900
you can go check that out.

00:25:50.900 --> 00:25:53.410
But we want to use Espresso
to test the pie app.

00:25:53.410 --> 00:25:56.217
And separate from
testing accessibility,

00:25:56.217 --> 00:25:57.550
we've got a test that we'll see.

00:25:57.550 --> 00:26:00.230
I push the one button to make
sure that the one appears over

00:26:00.230 --> 00:26:01.830
in the digits area.

00:26:01.830 --> 00:26:03.240
And so we write that test.

00:26:03.240 --> 00:26:04.880
The test passes.

00:26:04.880 --> 00:26:06.610
But there's one
more thing I can do.

00:26:06.610 --> 00:26:09.940
So starting at Espresso 2.2, we
can add one more line of code

00:26:09.940 --> 00:26:12.680
to enable these
accessibility checks.

00:26:12.680 --> 00:26:16.320
And then my test
doesn't pass anymore.

00:26:16.320 --> 00:26:17.920
And I get a whole
bunch of failures,

00:26:17.920 --> 00:26:19.890
and actually it will
go through the whole UI

00:26:19.890 --> 00:26:22.060
and give me essentially
the same list

00:26:22.060 --> 00:26:26.170
that Casey just gave me with
his accessibility checker tool.

00:26:26.170 --> 00:26:27.750
But here we're
finding these bugs

00:26:27.750 --> 00:26:30.510
as a side effect of testing
that we may have already

00:26:30.510 --> 00:26:32.330
been doing anyway.

00:26:32.330 --> 00:26:34.510
So if you're using
Espresso already,

00:26:34.510 --> 00:26:37.230
you can add one line
of code to your classes

00:26:37.230 --> 00:26:41.110
and you get the accessibility
checking that's added now.

00:26:41.110 --> 00:26:44.650
And then as we release new
features in this test library,

00:26:44.650 --> 00:26:47.390
as we think of new ways
to automate this testing,

00:26:47.390 --> 00:26:49.330
you'll continue to get
additional coverage

00:26:49.330 --> 00:26:50.080
for accessibility.

00:26:53.390 --> 00:26:54.830
So that's Espresso.

00:26:54.830 --> 00:26:56.610
We'll talk a little
bit about Robolectric.

00:26:56.610 --> 00:26:58.560
And I always struggle
a little bit more

00:26:58.560 --> 00:27:01.710
to explain exactly
how Robolectric works.

00:27:01.710 --> 00:27:05.220
I found out about it when I was
testing accessibility services.

00:27:05.220 --> 00:27:09.140
I needed to inject mocks of
an Android framework class

00:27:09.140 --> 00:27:11.300
into this class
that I had written.

00:27:11.300 --> 00:27:14.420
And it turns out that's simply
not possible with Android.

00:27:14.420 --> 00:27:17.170
But Robolectric allows
you to break these rules.

00:27:17.170 --> 00:27:20.040
You can run Android dependent
classes on a standard Java

00:27:20.040 --> 00:27:21.520
virtual machine.

00:27:21.520 --> 00:27:24.080
And you can pretty much
make Android classes

00:27:24.080 --> 00:27:26.110
behave any way you
need them to in order

00:27:26.110 --> 00:27:27.650
to make your test work.

00:27:27.650 --> 00:27:29.410
So they have the dream
of electric sheep.

00:27:29.410 --> 00:27:32.480
I might have used bending spoon
because there is no final.

00:27:35.380 --> 00:27:39.360
So I take that Espresso test and
I rewrite it for Robolectric.

00:27:39.360 --> 00:27:42.480
Again, I get the test to pass,
but I have one line of code.

00:27:42.480 --> 00:27:44.880
It's actually an
annotation in Java.

00:27:44.880 --> 00:27:47.560
And now I get accessibility
checking as well.

00:27:47.560 --> 00:27:51.620
I can also just do this with an
environment variable instead.

00:27:51.620 --> 00:27:55.490
So when I click on the
one button in Robolectric,

00:27:55.490 --> 00:27:57.684
it tells me it's missing
a content description.

00:27:57.684 --> 00:27:59.100
And you'll notice
I'm not actually

00:27:59.100 --> 00:28:01.480
getting the full
list of bugs that I

00:28:01.480 --> 00:28:03.440
was able to catch with
Espresso, and that's

00:28:03.440 --> 00:28:05.930
mostly because in addition
to there being no final,

00:28:05.930 --> 00:28:08.300
there's no fully
inflated user interface.

00:28:08.300 --> 00:28:09.890
So it can really
only check the things

00:28:09.890 --> 00:28:12.230
that we're actively
clicking on in Robolectric.

00:28:17.120 --> 00:28:19.280
So that's a couple ways
to do automated testing

00:28:19.280 --> 00:28:20.770
for accessibility.

00:28:20.770 --> 00:28:22.470
But you notice we
didn't actually

00:28:22.470 --> 00:28:25.930
catch another fairly
significant flaw that we had

00:28:25.930 --> 00:28:27.980
in the inaccessible experience.

00:28:27.980 --> 00:28:31.250
We couldn't catch the fact
that when Hugh made a mistake,

00:28:31.250 --> 00:28:34.154
it provided only
visual feedback.

00:28:34.154 --> 00:28:35.570
And that's the
kind of thing where

00:28:35.570 --> 00:28:36.778
you need a human in the loop.

00:28:36.778 --> 00:28:38.960
You need it understand
is this what makes sense.

00:28:38.960 --> 00:28:42.650
And so manual testing
remains the gold standard

00:28:42.650 --> 00:28:44.910
for figuring out
if an experience is

00:28:44.910 --> 00:28:47.300
going to make sense for
the full range of users.

00:28:47.300 --> 00:28:48.900
But if you're using
automated tools

00:28:48.900 --> 00:28:50.810
to catch the easy stuff--
the missing content

00:28:50.810 --> 00:28:54.480
descriptions, decoy
clickable views,

00:28:54.480 --> 00:28:59.780
views that are just too small to
be able to touch easily-- then

00:28:59.780 --> 00:29:03.380
you can reserve the
brain power you've

00:29:03.380 --> 00:29:05.300
got for the people
testing things to give you

00:29:05.300 --> 00:29:07.730
valuable high level feedback.

00:29:07.730 --> 00:29:09.660
And that's where I
started with this.

00:29:09.660 --> 00:29:11.320
You get to this
high level feedback,

00:29:11.320 --> 00:29:14.140
and the distinctions between
testing for accessibility

00:29:14.140 --> 00:29:17.050
and testing for mainstream
use start to blur.

00:29:17.050 --> 00:29:18.710
OK, how we're going
to fix this bug,

00:29:18.710 --> 00:29:21.043
and that critical thinking
can lead you to breakthroughs

00:29:21.043 --> 00:29:22.910
like auto complete.

00:29:22.910 --> 00:29:27.260
But I think you'll get a lot
more of these extra benefits

00:29:27.260 --> 00:29:30.180
of doing accessibility if
you're following these best

00:29:30.180 --> 00:29:31.840
practices in your
day to day work,

00:29:31.840 --> 00:29:34.810
not just finding them at the
end through manual testing.

00:29:34.810 --> 00:29:37.550
So I invite you to integrate
these testing tools

00:29:37.550 --> 00:29:40.000
into your software
development process.

00:29:40.000 --> 00:29:41.770
And we'll keep
working on these tools

00:29:41.770 --> 00:29:45.260
to enhance your apps
accessibility and help

00:29:45.260 --> 00:29:47.770
the billion people with
a disability access

00:29:47.770 --> 00:29:51.160
all the great products
that you're creating.

00:29:51.160 --> 00:29:53.090
So with that, I'll
hand this back to Eve.

00:30:04.780 --> 00:30:07.210
EVE ANDERSON: Thank you, Phil.

00:30:07.210 --> 00:30:09.550
The National
Federation of the Blind

00:30:09.550 --> 00:30:12.440
is an Important
partner for Google.

00:30:12.440 --> 00:30:15.250
We've been working together
over the past few years

00:30:15.250 --> 00:30:18.590
to improve the accessibility
of Google's products.

00:30:18.590 --> 00:30:21.510
We've learned a lot from
the National Federation

00:30:21.510 --> 00:30:24.570
of the Blind from their
insights and their advice

00:30:24.570 --> 00:30:26.520
and from the
connections we've been

00:30:26.520 --> 00:30:29.380
able to form with real users.

00:30:29.380 --> 00:30:33.370
I'd like now to introduce
Mark Riccobono, President

00:30:33.370 --> 00:30:35.820
of the National
Federation of the Blind,

00:30:35.820 --> 00:30:38.540
to share some of his
insights with you.

00:30:38.540 --> 00:30:40.080
Mark.

00:30:40.080 --> 00:30:42.950
MARK RICCOBONO: Thank
you very much, Eve.

00:30:42.950 --> 00:30:44.700
I appreciate the
opportunity to underscore

00:30:44.700 --> 00:30:46.116
some things that
have already been

00:30:46.116 --> 00:30:48.340
said from a user's perspective.

00:30:48.340 --> 00:30:50.050
The National
Federation of the Blind

00:30:50.050 --> 00:30:52.590
knows that blindness is
not the characteristic that

00:30:52.590 --> 00:30:54.670
defines you or your future.

00:30:54.670 --> 00:30:57.070
Every day, we raise
expectations of the blind,

00:30:57.070 --> 00:31:00.550
because we recognize that low
expectations create obstacles

00:31:00.550 --> 00:31:02.960
between blind people
and our dreams.

00:31:02.960 --> 00:31:05.320
We know that blindness
doesn't hold you back,

00:31:05.320 --> 00:31:08.110
but when technology
is not designed

00:31:08.110 --> 00:31:10.050
with the blind in
mind, it creates

00:31:10.050 --> 00:31:13.760
obstacles that prevents us
from achieving our dreams.

00:31:13.760 --> 00:31:15.790
Now, we know from our
experience that when

00:31:15.790 --> 00:31:18.680
you start with the prospect
that little is possible,

00:31:18.680 --> 00:31:21.490
it's impossible to get more
than little accomplished.

00:31:21.490 --> 00:31:24.590
So we want to start by
raising expectations.

00:31:24.590 --> 00:31:26.517
And as users, that's
what we like to do.

00:31:26.517 --> 00:31:28.350
A good example is in
the National Federation

00:31:28.350 --> 00:31:29.390
of the Blind.

00:31:29.390 --> 00:31:30.970
About four years
ago, we endeavored

00:31:30.970 --> 00:31:32.440
to create a team
of engineers that

00:31:32.440 --> 00:31:35.175
could build a car that a
blind person could drive.

00:31:35.175 --> 00:31:36.800
I'm going to come
back to that, but let

00:31:36.800 --> 00:31:38.940
me share a few other thoughts.

00:31:38.940 --> 00:31:42.580
When accessibility is
built for all users,

00:31:42.580 --> 00:31:46.370
it has a number of great
benefits when it's baked in.

00:31:46.370 --> 00:31:49.010
And those have already
been shared to some extent.

00:31:49.010 --> 00:31:52.210
What we find is that we get
innovations in user design

00:31:52.210 --> 00:31:53.940
and feature priorities.

00:31:53.940 --> 00:31:58.500
We develop highly effective
usability for all users.

00:31:58.500 --> 00:32:03.350
We can come across
dramatically creative solutions

00:32:03.350 --> 00:32:06.180
to sometimes
unexpected problems,

00:32:06.180 --> 00:32:09.320
and we recognize cost
savings because we don't have

00:32:09.320 --> 00:32:12.100
to go back and retrofit things.

00:32:12.100 --> 00:32:14.190
As has also already
been pointed out,

00:32:14.190 --> 00:32:17.670
often times innovations for
people with disabilities

00:32:17.670 --> 00:32:20.270
become innovations
in the mainstream.

00:32:20.270 --> 00:32:23.830
Some examples from
the history of dealing

00:32:23.830 --> 00:32:26.720
with blind people, original
versions of the typewriter

00:32:26.720 --> 00:32:29.110
were invented to help
blind people write,

00:32:29.110 --> 00:32:32.720
long play records, which
allowed more information to be

00:32:32.720 --> 00:32:36.000
delivered in audio format
to the blind, and of course

00:32:36.000 --> 00:32:38.300
desktop scanning, which
is now so prevalent

00:32:38.300 --> 00:32:41.470
but originally served
to use optical character

00:32:41.470 --> 00:32:46.060
recognition to provide access
to information to blind people.

00:32:46.060 --> 00:32:50.680
I'm here today to ask you if
you will rise to the challenge.

00:32:50.680 --> 00:32:53.320
First of all, to
build all of your apps

00:32:53.320 --> 00:32:56.800
to be accessible to as
many people as possible.

00:32:56.800 --> 00:32:59.280
And then to use and
apply your talents

00:32:59.280 --> 00:33:01.750
to create innovations for
people with disabilities.

00:33:01.750 --> 00:33:04.230
Some examples you could
use for blind people

00:33:04.230 --> 00:33:06.370
include enhanced
indoor navigation--

00:33:06.370 --> 00:33:10.100
would have been helpful
here at this conference.

00:33:10.100 --> 00:33:14.190
Automated image descriptions
and automatic creation

00:33:14.190 --> 00:33:18.400
of tactile images that we can
create using 3D technology.

00:33:18.400 --> 00:33:20.650
Or if you want to
think big, couldn't we

00:33:20.650 --> 00:33:23.230
invent non-visual interfaces
to give blind people

00:33:23.230 --> 00:33:27.230
access to information that would
allow us to fly an airplane?

00:33:27.230 --> 00:33:31.940
I invite you to join
Google and the National

00:33:31.940 --> 00:33:34.600
Federation of the Blind
and our dynamic team

00:33:34.600 --> 00:33:39.420
to rise to the challenge,
to innovate without limits.

00:33:39.420 --> 00:33:43.980
Because together, we can
transform dreams into reality

00:33:43.980 --> 00:33:45.150
when users are involved.

00:33:45.150 --> 00:33:49.340
And here's just one example from
my historic drive at Daytona

00:33:49.340 --> 00:33:50.210
four years ago.

00:34:23.170 --> 00:34:26.530
EVE ANDERSON: Thank you, Mark,
for your inspiring words.

00:34:26.530 --> 00:34:29.600
I hope that each of you
will rise to the challenges

00:34:29.600 --> 00:34:31.679
that Mark presented.

00:34:31.679 --> 00:34:35.670
Speaking of challenges, in case
you missed the announcement

00:34:35.670 --> 00:34:40.920
earlier this week, google.org
is committing $20 million

00:34:40.920 --> 00:34:46.900
in grant funding for the first
of its kind Google Impact

00:34:46.900 --> 00:34:48.719
Challenge Disabilities.

00:34:48.719 --> 00:34:52.080
Through the challenge,
we'll identify and support

00:34:52.080 --> 00:34:56.030
nonprofit organizations
working to increase access

00:34:56.030 --> 00:34:58.760
to opportunity for
people with disabilities.

00:34:58.760 --> 00:35:01.840
We're looking for big
ideas from nonprofits

00:35:01.840 --> 00:35:06.890
that have technology at their
core and the ability to scale,

00:35:06.890 --> 00:35:10.033
to impact people around the
world with disabilities.

00:35:13.590 --> 00:35:17.390
I'd like to all of you
to learn more about

00:35:17.390 --> 00:35:20.730
Google's accessibility efforts
and what you can do to make

00:35:20.730 --> 00:35:23.870
your own app more
accessible by visiting

00:35:23.870 --> 00:35:27.420
google.com/accessibility.

00:35:27.420 --> 00:35:31.860
Try out your own
apps using Android's

00:35:31.860 --> 00:35:34.600
built-in accessibility services.

00:35:34.600 --> 00:35:36.310
Please visit us.

00:35:36.310 --> 00:35:37.890
We're here for the
rest of the day.

00:35:37.890 --> 00:35:39.950
We'll be in the
accessibility lab

00:35:39.950 --> 00:35:42.990
in the google.org
sandbox on this floor.

00:35:42.990 --> 00:35:45.920
And now, I'd like to
open it up for questions.

00:35:45.920 --> 00:35:46.420
Thank you.

00:35:46.420 --> 00:35:47.878
There's a microphone
in the middle.

00:36:00.080 --> 00:36:00.784
Yes, ma'am.

00:36:00.784 --> 00:36:01.450
AUDIENCE: Hello.

00:36:01.450 --> 00:36:03.230
I have a question
about TalkBack.

00:36:03.230 --> 00:36:06.450
So sometimes TalkBack
read things out in a way

00:36:06.450 --> 00:36:09.380
that I wasn't expecting,
that's different.

00:36:09.380 --> 00:36:11.880
And so I'm wondering if
you have documentation

00:36:11.880 --> 00:36:16.210
on the versioning of TalkBack
similar to the documentation as

00:36:16.210 --> 00:36:18.520
far as versioning for the
different Android operating

00:36:18.520 --> 00:36:22.050
systems where someone could
go and read and understand

00:36:22.050 --> 00:36:27.200
why it's behaving differently
than was expected?

00:36:27.200 --> 00:36:28.680
CASEY BURKHARDT: Sure.

00:36:28.680 --> 00:36:30.810
So there are definitely
some differences

00:36:30.810 --> 00:36:33.360
to TalkBack across the
different Android versions,

00:36:33.360 --> 00:36:37.700
and to some degree, we do have
these documented on our Android

00:36:37.700 --> 00:36:40.402
support website at
support.google.com.

00:36:40.402 --> 00:36:42.380
We probably still
could make improvements

00:36:42.380 --> 00:36:44.800
to make some of these
differences between Android

00:36:44.800 --> 00:36:47.940
versions a little more clear.

00:36:47.940 --> 00:36:49.400
So thank you for that feedback.

00:36:49.400 --> 00:36:51.275
I will definitely take
that back to the team.

00:36:53.534 --> 00:36:55.200
AUDIENCE: Those testing
tools look cool.

00:36:55.200 --> 00:36:58.850
I was wondering if
any of the feedback

00:36:58.850 --> 00:37:03.020
about accessibility issues
could be pushed into earlier

00:37:03.020 --> 00:37:03.940
in the build change.

00:37:03.940 --> 00:37:05.661
So earlier in the
build time, you

00:37:05.661 --> 00:37:07.660
can catch some of those
things and not even have

00:37:07.660 --> 00:37:11.100
to get to the testing process?

00:37:11.100 --> 00:37:13.740
PHIL WEAVER: So that's
already included

00:37:13.740 --> 00:37:15.344
to some degree in Android Lint.

00:37:15.344 --> 00:37:17.260
And we could look and
see what else we can do.

00:37:17.260 --> 00:37:19.511
Android Lint will currently
check content descriptions

00:37:19.511 --> 00:37:20.010
for you.

00:37:20.010 --> 00:37:22.430
For example, if
you're missing one,

00:37:22.430 --> 00:37:25.660
then you'll get a Lint error.

00:37:25.660 --> 00:37:29.180
One thing is if you've got a
very complex app where you're

00:37:29.180 --> 00:37:32.670
going to start dynamically
changing content descriptions,

00:37:32.670 --> 00:37:35.490
often the solution to that is
you explicitly set the content

00:37:35.490 --> 00:37:38.550
description to null in the file,
which tells the Linter I've got

00:37:38.550 --> 00:37:40.190
this, don't bother me about it.

00:37:40.190 --> 00:37:42.356
But then you don't really
have another way to check.

00:37:42.356 --> 00:37:44.390
And so this is a way to
check it at run time.

00:37:44.390 --> 00:37:46.140
So yeah, I appreciate
the feedback.

00:37:46.140 --> 00:37:48.250
We certainly want to try
and provide the feedback

00:37:48.250 --> 00:37:51.210
at different levels so we have
more than one crack at catching

00:37:51.210 --> 00:37:51.761
these things.

00:37:54.216 --> 00:37:55.090
AUDIENCE: Two things.

00:37:55.090 --> 00:37:56.560
One, I know 100 digits of pi.

00:37:56.560 --> 00:37:59.510
So if you need user
testers, I'm your guy.

00:37:59.510 --> 00:38:01.260
Second thing, how would
switch access work

00:38:01.260 --> 00:38:04.950
with an infinite scroll feed
like Facebook, for instance?

00:38:04.950 --> 00:38:06.870
Would it just go forever down?

00:38:10.800 --> 00:38:14.490
PHIL WEAVER: Well, at least
to handle scroll events,

00:38:14.490 --> 00:38:17.430
you can scroll forward and
backward if you select a view

00:38:17.430 --> 00:38:19.150
that can be scrolled.

00:38:19.150 --> 00:38:22.219
And since Facebook, I believe,
does actually scroll forever,

00:38:22.219 --> 00:38:23.510
I think you can scroll forever.

00:38:23.510 --> 00:38:25.312
But it'll scroll
one view at a time.

00:38:25.312 --> 00:38:27.770
So if the user wants to keep
scrolling, they can go for it.

00:38:27.770 --> 00:38:29.130
If they want to select
something that's

00:38:29.130 --> 00:38:31.040
shown on the screen
at some point on it,

00:38:31.040 --> 00:38:32.490
It'll probably just do that.

00:38:36.654 --> 00:38:38.070
AUDIENCE: Is Google
doing anything

00:38:38.070 --> 00:38:40.750
with EEG headset as an
input method for users

00:38:40.750 --> 00:38:44.350
with severe physical
disabilities?

00:38:44.350 --> 00:38:46.950
EVE ANDERSON: That's a
very interesting question,

00:38:46.950 --> 00:38:50.040
and I think that is an area
that's ripe for research.

00:38:50.040 --> 00:38:52.140
I think there are
improvements being

00:38:52.140 --> 00:38:56.920
made in techniques for
capturing signals like that.

00:38:56.920 --> 00:39:01.030
We don't have anything to
announce in that area, however.

00:39:10.000 --> 00:39:12.550
AUDIENCE: So I think you said
the Espresso stuff is available

00:39:12.550 --> 00:39:13.400
now.

00:39:13.400 --> 00:39:16.190
The accessibility checker
in the app that you showed,

00:39:16.190 --> 00:39:18.964
is that available yet?

00:39:18.964 --> 00:39:20.380
CASEY BURKHARDT:
So we just wanted

00:39:20.380 --> 00:39:22.760
to give an early demo
of accessibility checker

00:39:22.760 --> 00:39:23.889
here today at IO.

00:39:23.889 --> 00:39:25.430
Unfortunately, we
don't have anything

00:39:25.430 --> 00:39:27.960
to announce regarding
availability.

00:39:27.960 --> 00:39:34.240
But please stay tuned following
us on Twitter at Google Access.

00:39:34.240 --> 00:39:36.000
We're going to be
sharing more information

00:39:36.000 --> 00:39:40.130
on Twitter regarding
availability and logistics.

00:39:40.130 --> 00:39:42.441
EVE ANDERSON: And we have
time for one last question.

00:39:42.441 --> 00:39:44.190
AUDIENCE: So I've been
doing a lot of work

00:39:44.190 --> 00:39:45.814
with the Blind
Institute of Technology.

00:39:45.814 --> 00:39:49.740
And their Android users wanted
me to ask about two features--

00:39:49.740 --> 00:39:54.940
screen blinking via tap
gestures and turning TalkBack

00:39:54.940 --> 00:39:55.540
on and off.

00:39:55.540 --> 00:39:57.540
I know you can pause it,
but actually turning it

00:39:57.540 --> 00:40:00.740
off and on via
gestures as well, are

00:40:00.740 --> 00:40:05.197
those any features that
are planned in the future?

00:40:05.197 --> 00:40:07.030
EVE ANDERSON: Do you
want to take it, Casey?

00:40:07.030 --> 00:40:07.946
CASEY BURKHARDT: Sure.

00:40:07.946 --> 00:40:12.380
So there is some
work done already

00:40:12.380 --> 00:40:14.970
to improve how easy it
is to enable and disable

00:40:14.970 --> 00:40:16.730
TalkBack on the fly.

00:40:16.730 --> 00:40:22.150
In TalkBack 4.2.0, you can
actually long press both volume

00:40:22.150 --> 00:40:25.400
keys at the same time
for about a second or two

00:40:25.400 --> 00:40:29.210
and that will toggle TalkBack
on or off on that device.

00:40:29.210 --> 00:40:30.820
And that works in
both directions.

00:40:30.820 --> 00:40:33.920
So if TalkBack is running,
I can long press those keys,

00:40:33.920 --> 00:40:38.180
disable it, and the same gesture
on those keys to re-enable it.

00:40:38.180 --> 00:40:40.940
Regarding screen blinking,
that's definitely a feature

00:40:40.940 --> 00:40:43.640
we've heard a lot
of requests for.

00:40:43.640 --> 00:40:45.740
So we'll definitely make
sure to take that back

00:40:45.740 --> 00:40:47.490
to the TalkBack team.

00:40:47.490 --> 00:40:48.999
AUDIENCE: Thank you so much.

00:40:48.999 --> 00:40:50.540
EVE ANDERSON: So I
have to apologize.

00:40:50.540 --> 00:40:52.420
That was the last
question we had time

00:40:52.420 --> 00:40:54.530
for during this session.

00:40:54.530 --> 00:40:58.060
However, we will be around
for the rest of the day

00:40:58.060 --> 00:41:01.870
in the accessibility section
of the google.org sandbox.

00:41:01.870 --> 00:41:05.810
So please come chat with us,
see live demos of everything,

00:41:05.810 --> 00:41:08.270
and give us your
suggestions and feedback.

00:41:08.270 --> 00:41:10.740
Thank you so much, everyone.

