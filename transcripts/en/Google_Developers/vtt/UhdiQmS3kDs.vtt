WEBVTT
Kind: captions
Language: en

00:00:00.116 --> 00:00:01.740
JOHN RAE-GRANT: Hi,
I'm John Rae-Grant,

00:00:01.740 --> 00:00:04.110
product manager for
Gmail Extensibility.

00:00:04.110 --> 00:00:06.460
I'm here to talk about
the new Gmail API.

00:00:06.460 --> 00:00:08.870
Let's start with a
quick history lesson.

00:00:08.870 --> 00:00:12.080
Back in the midst of the
distant past, there was email.

00:00:12.080 --> 00:00:14.020
Many email systems
were closed, meaning

00:00:14.020 --> 00:00:16.390
that you had to use a
specific application

00:00:16.390 --> 00:00:18.990
or a specific website
to manage your mail.

00:00:18.990 --> 00:00:21.240
This made it hard for people
who had multiple accounts

00:00:21.240 --> 00:00:23.800
or multiple clients
to manage their mail.

00:00:23.800 --> 00:00:26.010
So IMAP was born.

00:00:26.010 --> 00:00:29.360
IMAP is a standard protocol
designed for an email client

00:00:29.360 --> 00:00:31.106
to connect to an email server.

00:00:31.106 --> 00:00:32.689
IMAP's great, because
it means that we

00:00:32.689 --> 00:00:35.950
can do cool things like get
all of our mail into one inbox

00:00:35.950 --> 00:00:39.370
or send email using any of our
accounts from the same client.

00:00:39.370 --> 00:00:42.230
So IMAP was designed to
enable a full-fledged email

00:00:42.230 --> 00:00:44.470
client to connect
to an email service.

00:00:44.470 --> 00:00:47.730
Gmail initially introduced
IMAP support in 2007,

00:00:47.730 --> 00:00:49.310
specifically with
the goal of making

00:00:49.310 --> 00:00:52.630
it easy to use mobile device
email apps to access your Gmail

00:00:52.630 --> 00:00:53.330
account.

00:00:53.330 --> 00:00:54.700
And it was good.

00:00:54.700 --> 00:00:56.280
Then things got interesting.

00:00:56.280 --> 00:00:59.080
Once Gmail opened up to
IMAP, the developer community

00:00:59.080 --> 00:01:01.560
realized there was now
a way to enable users

00:01:01.560 --> 00:01:04.440
to add features that
used their Gmail data.

00:01:04.440 --> 00:01:06.330
These developers,
you folks, went way

00:01:06.330 --> 00:01:08.730
beyond building
simple email clients.

00:01:08.730 --> 00:01:11.170
You did brilliant things, like
adding a record of messages

00:01:11.170 --> 00:01:14.040
exchanged with each
prospect to a CRM system.

00:01:14.040 --> 00:01:17.130
You made useful utilities, which
manage your email subscriptions

00:01:17.130 --> 00:01:19.230
or allow you to send
mail at a later date.

00:01:19.230 --> 00:01:21.550
You even wrote custom
Chrome extensions

00:01:21.550 --> 00:01:24.550
which talk to IMAP and
extend the Gmail UI.

00:01:24.550 --> 00:01:26.507
All of these are good things.

00:01:26.507 --> 00:01:27.840
So what's the problem with IMAP?

00:01:27.840 --> 00:01:30.900
Well, IMAP's great,
but Gmail and you

00:01:30.900 --> 00:01:33.560
have gone way beyond
what it was designed for.

00:01:33.560 --> 00:01:36.030
IMAP was designed
a long time ago.

00:01:36.030 --> 00:01:39.080
Originally, in 1986, with
the last major core protocol

00:01:39.080 --> 00:01:40.880
version in 1998.

00:01:40.880 --> 00:01:43.960
To give some context, that's the
year the Sony PlayStation was

00:01:43.960 --> 00:01:45.580
battling it out
with the Nintendo

00:01:45.580 --> 00:01:50.170
64 and a new search engine
called Google first launched.

00:01:50.170 --> 00:01:52.960
APIs have come a
long way since then.

00:01:52.960 --> 00:01:56.080
IMAP was designed to handle the
kind of mailboxes people used

00:01:56.080 --> 00:01:56.950
to have.

00:01:56.950 --> 00:01:59.750
It was never intended to
scale to hundreds of thousands

00:01:59.750 --> 00:02:01.760
of messages in an inbox.

00:02:01.760 --> 00:02:04.860
In 2004, Gmail
revolutionized the inbox

00:02:04.860 --> 00:02:06.950
by giving you one
gigabyte of storage,

00:02:06.950 --> 00:02:09.880
giving you the ability to stop
wasting time sorting folders

00:02:09.880 --> 00:02:13.320
and instead use powerful
queries to search labels.

00:02:13.320 --> 00:02:15.640
Despite the decade since
IMAP was introduced,

00:02:15.640 --> 00:02:17.890
it still doesn't have
standards to support

00:02:17.890 --> 00:02:20.200
the revolutionary way
Gmail interacted with users

00:02:20.200 --> 00:02:25.310
a decade ago, let alone our
many improvements since then.

00:02:25.310 --> 00:02:27.139
It's not that IMAP isn't useful.

00:02:27.139 --> 00:02:29.430
It's that it's getting used
in ways for which it wasn't

00:02:29.430 --> 00:02:31.810
designed, sort of
like this golf club.

00:02:31.810 --> 00:02:33.890
You can use it for
bowling, and since you're

00:02:33.890 --> 00:02:36.930
clever and determined you might
manage to knock down some pins,

00:02:36.930 --> 00:02:39.930
but it's not really
the right tool.

00:02:39.930 --> 00:02:43.050
So we're introducing
the new Gmail API

00:02:43.050 --> 00:02:45.950
to enable you all to
creatively meet the modern use

00:02:45.950 --> 00:02:47.540
cases of today's users.

00:02:47.540 --> 00:02:49.360
We've kept in mind
all the performance

00:02:49.360 --> 00:02:52.080
and ease of use that you'd
expect to come with that.

00:02:52.080 --> 00:02:54.340
The new Gmail API
provides very simply

00:02:54.340 --> 00:02:57.650
what you would expect, with
RESTful access to threads,

00:02:57.650 --> 00:03:00.660
messages, and labels,
including drafts.

00:03:00.660 --> 00:03:03.130
In contrast to IMAP,
which requires access

00:03:03.130 --> 00:03:05.930
to all of the user's
messages for all operations,

00:03:05.930 --> 00:03:09.930
the new API gives fine grained
control to the user's mailbox.

00:03:09.930 --> 00:03:12.720
If you just need to send mail
as a convenience from your app,

00:03:12.720 --> 00:03:16.190
you don't need to ask the user
for permission to read mail.

00:03:16.190 --> 00:03:19.380
To keep in sync, the API allows
you to query the inbox change

00:03:19.380 --> 00:03:23.110
history, thereby avoiding the
need to pull or do archaeology

00:03:23.110 --> 00:03:24.930
to figure out what changed.

00:03:24.930 --> 00:03:27.050
Most importantly,
this API is designed

00:03:27.050 --> 00:03:30.270
to make it easy and efficient
to do specific queries,

00:03:30.270 --> 00:03:34.390
such as get me all the
messages exchanged with Joe.

00:03:34.390 --> 00:03:38.810
Or get all the messages received
with the my_company label.

00:03:38.810 --> 00:03:42.160
Or get me all the
messages in this thread.

00:03:42.160 --> 00:03:44.940
Essentially, the API
offers the full search

00:03:44.940 --> 00:03:48.100
capabilities of the web
UI using the same syntax

00:03:48.100 --> 00:03:50.120
as the search box.

00:03:50.120 --> 00:03:52.920
Since the new Gmail API
is a standard Google API,

00:03:52.920 --> 00:03:56.880
you get simple HTTPS
access using RESTful calls

00:03:56.880 --> 00:04:00.560
and get your responses in
JSON, XML, or Google Protobuf

00:04:00.560 --> 00:04:01.940
formats.

00:04:01.940 --> 00:04:04.400
You can also make these calls
from standard web languages

00:04:04.400 --> 00:04:05.980
like Java and Python.

00:04:05.980 --> 00:04:08.620
And there's no need
for a TCP socket.

00:04:08.620 --> 00:04:11.150
This means that the API is
accessible from many cloud

00:04:11.150 --> 00:04:13.840
environments that
couldn't support IMAP.

00:04:13.840 --> 00:04:15.720
Not only does the
new API replace

00:04:15.720 --> 00:04:17.970
IMAP for many
applications, it also

00:04:17.970 --> 00:04:21.089
replaces SMTP for mail sending.

00:04:21.089 --> 00:04:23.270
And one huge advantage is speed.

00:04:23.270 --> 00:04:25.150
As I mentioned
earlier, IMAP was never

00:04:25.150 --> 00:04:27.520
designed to do what you've
been getting it to do.

00:04:27.520 --> 00:04:29.870
Because the new Gmail API
was designed for the Gmail

00:04:29.870 --> 00:04:31.780
backend architecture,
it understands

00:04:31.780 --> 00:04:34.130
labels instead of
folders and is optimized

00:04:34.130 --> 00:04:36.340
for exactly these operations.

00:04:36.340 --> 00:04:37.950
Here are some
preliminary speed tests

00:04:37.950 --> 00:04:40.240
which demonstrate that even
before the tuning, which

00:04:40.240 --> 00:04:42.740
you beta users will
be helping us to do,

00:04:42.740 --> 00:04:44.750
the Gmail API handles
getting a thread

00:04:44.750 --> 00:04:46.840
or doing a search
for matching messages

00:04:46.840 --> 00:04:50.310
a factor of three to 10
times faster than IMAP.

00:04:50.310 --> 00:04:53.680
Since the new Gmail API is a
standard Google Developer API,

00:04:53.680 --> 00:04:55.680
you'll be able to get
started right away using

00:04:55.680 --> 00:04:57.790
the same developer key
and developer console

00:04:57.790 --> 00:05:00.750
that you already use
for other Google APIs.

00:05:00.750 --> 00:05:04.320
All access is under standard
OAuth 2.0 authentication,

00:05:04.320 --> 00:05:06.790
so you've likely already
done that as well.

00:05:06.790 --> 00:05:09.780
If you haven't, the example
apps and SDK documentation

00:05:09.780 --> 00:05:12.380
have done most of
the work for you.

00:05:12.380 --> 00:05:16.390
The Gmail API is entering beta
the week of June 24, 2014.

00:05:16.390 --> 00:05:19.040
We're really eager to get
your suggestions and feedback.

00:05:19.040 --> 00:05:21.270
To get started, go to the
Google Developers site

00:05:21.270 --> 00:05:23.680
and follow the instructions
to sign up for the beta.

00:05:23.680 --> 00:05:26.680
And we'd love to hear your
feedback and suggestions.

00:05:26.680 --> 00:05:29.221
On behalf of the Gmail team,
thanks for your attention.

00:05:29.221 --> 00:05:30.720
And we can't wait
to see what you'll

00:05:30.720 --> 00:05:33.490
make with the new Gmail API.

