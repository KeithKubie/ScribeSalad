WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now things should become challenging.

00:00:03.000 --> 00:00:06.000
I ask you to program the mode of a data set.

00:00:06.000 --> 00:00:08.000
Of course, data sets can have multiple modes.

00:00:08.000 --> 00:00:13.000
I just extended mine to have 3 times the element 5.

00:00:13.000 --> 00:00:15.000
Let's assume for now if you have multiple modes

00:00:15.000 --> 00:00:18.000
you can return either one; I don't care.

00:00:18.000 --> 00:00:20.000
But if it's unique, I want the correct mode.

00:00:20.000 --> 00:00:23.000
So this is entirely nontrivial for programming,

00:00:23.000 --> 00:00:26.000
and it's a real challenge.

00:00:26.000 --> 00:00:28.000
This is what makes this class fun.

00:00:28.000 --> 00:00:31.000
When you hit print mode of this data set

00:00:31.000 --> 00:00:34.000
then I want it to return 5.

00:00:34.000 --> 00:00:37.000
Now some hints: There are many different ways to implement it

00:00:37.000 --> 00:00:39.000
using complex data structures such as sets,

00:00:39.000 --> 00:00:42.000
but at the minimum for a simple solution,

00:00:42.000 --> 00:00:44.000
you should know what a for loop is,

00:00:44.000 --> 00:00:47.000
what an if statement is,

00:00:47.000 --> 00:00:49.000
and then there's a beautiful function

00:00:49.000 --> 00:00:51.000
called "data.count."

00:00:51.000 --> 00:00:56.000
You give it an argument--like this case the number 5--

00:00:56.000 --> 00:01:01.000
and it returns to you how often this specific number occurs

00:01:01.000 --> 00:01:04.000
in the data over here--three times for number 5.

00:01:04.000 --> 00:01:06.000
If you were to give it 6 as an argument,

00:01:06.000 --> 00:01:08.000
it doesn't occur at all,

00:01:08.000 --> 00:01:10.000
the result would now be zero.

00:01:10.000 --> 00:01:14.000
So my solution has a funny "for" notation.

00:01:14.000 --> 00:01:21.000
For variable "i" in the range of the length of data.

00:01:21.000 --> 00:01:24.000
Len(data), we know, is the number of elements.

00:01:24.000 --> 00:01:27.000
There's 7 over here, so it would give me 7.

00:01:27.000 --> 00:01:32.000
Range turns this into a list from zero to six of indices into the data,

00:01:32.000 --> 00:01:34.000
and then the for loop goes to these indices.

00:01:34.000 --> 00:01:38.000
That's one way to access each element in the data set sequentially.

00:01:38.000 --> 00:01:41.000
Now the count thing allows me to count how often each element occurs.

00:01:41.000 --> 00:01:45.000
So if you took my data--took the i'th data item--

00:01:45.000 --> 00:01:47.000
then what this thing gives me--

00:01:47.000 --> 00:01:49.000
this funny thing it gives me.

00:01:49.000 --> 00:01:53.000
How often inside this function do I see that specific number

00:01:53.000 --> 00:01:55.000
that is the i'th number in the original list?

00:01:55.000 --> 00:01:58.000
I leave it at this. This is not a trivial question.

00:01:58.000 --> 00:02:00.000
If you get stuck, you might go to the web

00:02:00.000 --> 00:02:04.000
and read up on for, on count, on if statements.

00:02:04.000 --> 99:59:59.000
So here is the code, and good luck programming it.

