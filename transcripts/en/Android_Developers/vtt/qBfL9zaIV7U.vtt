WEBVTT
Kind: captions
Language: en

00:00:04.960 --> 00:00:05.830
STEPHAN LINZNER: Hello,
everybody.

00:00:05.830 --> 00:00:08.310
Welcome to this week's
Android Office Hours

00:00:08.310 --> 00:00:10.920
live here from London.

00:00:10.920 --> 00:00:14.250
Today is the first birthday of
Google Play, for those who

00:00:14.250 --> 00:00:17.420
don't know, so I think
it's a good day to

00:00:17.420 --> 00:00:19.720
have an Android Hangout.

00:00:19.720 --> 00:00:21.040
So this is Stephan Linzner.

00:00:21.040 --> 00:00:24.380
MATT GAUNT: I'm Matt Gaunt.

00:00:24.380 --> 00:00:28.390
And in the Hangout down here,
we have Rich and Nick.

00:00:28.390 --> 00:00:28.910
RICH HYNDMAN: Hey there.

00:00:28.910 --> 00:00:31.440
Yeah, we're not in the London
office today because we've

00:00:31.440 --> 00:00:35.070
just got back from a trip to
Israel, where we were at the

00:00:35.070 --> 00:00:36.720
campus in Tel Aviv.

00:00:36.720 --> 00:00:38.535
I'm sporting the new Campus Tel
Aviv hoodie, whether you

00:00:38.535 --> 00:00:40.240
can read it from there.

00:00:40.240 --> 00:00:42.515
So Yossi there, in the bottom
corner there, we actually sat

00:00:42.515 --> 00:00:44.772
with him about 10 hours
ago, but we just

00:00:44.772 --> 00:00:46.190
got back to the UK.

00:00:46.190 --> 00:00:52.130
And there was a lot of good
talks on multiscreen

00:00:52.130 --> 00:00:54.490
applications and multiscreen
development over at

00:00:54.490 --> 00:00:56.380
the campus in Israel.

00:00:56.380 --> 00:00:58.260
What were you talking
about, Nick?

00:00:58.260 --> 00:01:02.480
NICK BUTCHER: Yeah, I went and I
gave a talk on how to design

00:01:02.480 --> 00:01:05.269
responsive applications
on Android.

00:01:05.269 --> 00:01:07.720
So hopefully, people enjoyed
that, and I'll be posting my

00:01:07.720 --> 00:01:10.708
slides online soon, so
watch out for that.

00:01:10.708 --> 00:01:11.186
RICH HYNDMAN: Absolutely.

00:01:11.186 --> 00:01:14.060
I'll be posting mine as well.

00:01:14.060 --> 00:01:14.844
MATT GAUNT: Sweet.

00:01:14.844 --> 00:01:16.460
STEPHAN LINZNER: Fun.

00:01:16.460 --> 00:01:18.090
MATT GAUNT: So as usual,
no more disclaimer.

00:01:18.090 --> 00:01:21.540
We are not announcing new
features or product timelines

00:01:21.540 --> 00:01:22.610
or anything like that.

00:01:22.610 --> 00:01:25.700
It's purely to answer questions
and help out

00:01:25.700 --> 00:01:27.330
wherever we can.

00:01:27.330 --> 00:01:30.030
So we've pretty much got
a full house already.

00:01:30.030 --> 00:01:34.840
So has anyone got any questions
in the Hangout?

00:01:34.840 --> 00:01:37.510
No.

00:01:37.510 --> 00:01:40.260
STEPHAN LINZNER: No questions
from the Hangout?

00:01:40.260 --> 00:01:41.520
OK.

00:01:41.520 --> 00:01:42.620
MATT GAUNT: Do you
want to kick off

00:01:42.620 --> 00:01:44.140
with a Moderator question?

00:01:44.140 --> 00:01:46.670
STEPHAN LINZNER: Yes.

00:01:46.670 --> 00:01:52.770
OK, we have a question down here
on using the Crop Intent

00:01:52.770 --> 00:01:56.270
or using a customized one.

00:01:56.270 --> 00:02:01.890
Yeah, I think it's a difficult
question because if you have

00:02:01.890 --> 00:02:04.440
used a Crop Intent before, you
might have noticed that it

00:02:04.440 --> 00:02:07.160
will not work on all devices.

00:02:07.160 --> 00:02:11.950
And I don't know actually how
official it is, but if you

00:02:11.950 --> 00:02:15.830
want to use it, you should
make sure that you have a

00:02:15.830 --> 00:02:18.080
fallback option to what
you're doing.

00:02:18.080 --> 00:02:24.110
So you could use the Crop
Intent, but you still have to

00:02:24.110 --> 00:02:28.170
have a fallback solution
if this is not working.

00:02:28.170 --> 00:02:30.420
NICK BUTCHER: I'd have stronger
guidelines than that

00:02:30.420 --> 00:02:32.830
and say it's actually not
a documented intent.

00:02:32.830 --> 00:02:35.920
So it's well known, but it's not
actually guaranteed to be

00:02:35.920 --> 00:02:37.120
there by the platform.

00:02:37.120 --> 00:02:40.270
So while you could try and use
it, like you're saying, it's

00:02:40.270 --> 00:02:41.500
not guaranteed to be there.

00:02:41.500 --> 00:02:44.860
A better approach might be to
copy the functionality from

00:02:44.860 --> 00:02:48.000
the gallery application
and do it yourself.

00:02:48.000 --> 00:02:50.500
STEPHAN LINZNER: Or do
it on a server side.

00:02:50.500 --> 00:02:52.830
Even that might be a
good idea to do.

00:02:52.830 --> 00:02:53.770
NICK BUTCHER: Well, you probably
want to be able to

00:02:53.770 --> 00:02:56.040
resize it on the client side and
then choose the cropping

00:02:56.040 --> 00:02:59.340
area, and then performing the
actual crop is trivial, right?

00:02:59.340 --> 00:03:01.120
STEPHAN LINZNER: Right.

00:03:01.120 --> 00:03:02.250
NICK BUTCHER: I mean, all
the code is there in the

00:03:02.250 --> 00:03:06.230
[INAUDIBLE] app, it's all open
source, but [INAUDIBLE]

00:03:06.230 --> 00:03:09.440
if the OEMs modified their
version of the gallery

00:03:09.440 --> 00:03:10.245
[INAUDIBLE].

00:03:10.245 --> 00:03:12.270
MATT GAUNT: Which is exactly
what's happened with a

00:03:12.270 --> 00:03:15.180
question like this saying, that
one particular device

00:03:15.180 --> 00:03:15.860
just doesn't work.

00:03:15.860 --> 00:03:17.510
It comes back with
something weird.

00:03:17.510 --> 00:03:20.450
I mean, you've also got to think
if you can get away with

00:03:20.450 --> 00:03:23.760
not involving the user
at all, that's also

00:03:23.760 --> 00:03:24.630
another viable option.

00:03:24.630 --> 00:03:27.150
I've had applications where we
needed to crop an image just

00:03:27.150 --> 00:03:30.280
to make it square, and nine
times out of 10, you didn't

00:03:30.280 --> 00:03:32.392
really need to get the
user involved.

00:03:32.392 --> 00:03:35.300
So think of a different way
of doing it, I think,

00:03:35.300 --> 00:03:36.550
is the way to go.

00:03:39.740 --> 00:03:43.200
Should I just jump in right
with the difficult one?

00:03:43.200 --> 00:03:44.010
I'm going to do it.

00:03:44.010 --> 00:03:45.610
So we had a question.

00:03:45.610 --> 00:03:49.160
Can Android destroy stopped
activities of an app if it's

00:03:49.160 --> 00:03:51.430
still in the foreground?

00:03:51.430 --> 00:03:55.580
The docs suggest it can, but
Hackborn replied it wasn't

00:03:55.580 --> 00:03:56.930
necessarily the same case.

00:03:56.930 --> 00:04:01.070
Essentially, what Dianne
Hackborn's kind of stated is

00:04:01.070 --> 00:04:04.560
that if you have an application
in the foreground

00:04:04.560 --> 00:04:08.760
and then you keep on creating
activity after activity,

00:04:08.760 --> 00:04:10.450
essentially, you'll get to a
point where you'll run out of

00:04:10.450 --> 00:04:13.530
memory and the activities won't
be cleared because the

00:04:13.530 --> 00:04:16.490
application is in
the foreground.

00:04:16.490 --> 00:04:19.160
So essentially, the best way
to get around this was to

00:04:19.160 --> 00:04:20.419
start using fragments.

00:04:20.419 --> 00:04:22.460
And essentially that way, you
can start managing memory

00:04:22.460 --> 00:04:25.430
itself because you're
essentially able to swap out

00:04:25.430 --> 00:04:28.530
the fragments and remove
them, et cetera.

00:04:28.530 --> 00:04:30.140
So managing things that way.

00:04:30.140 --> 00:04:34.000
I think it's slightly ambiguous
in the documentation

00:04:34.000 --> 00:04:37.300
in terms of whether the
activities will be cleared

00:04:37.300 --> 00:04:39.170
when they're just in the
background even though the

00:04:39.170 --> 00:04:40.730
application's in the
foreground or not.

00:04:40.730 --> 00:04:44.090
I think that's where the
confusion has come about.

00:04:44.090 --> 00:04:46.060
STEPHAN LINZNER: But you have
to be very careful if you're

00:04:46.060 --> 00:04:48.270
running in the foreground and
creating activity over

00:04:48.270 --> 00:04:50.830
activity over activity.

00:04:50.830 --> 00:04:53.570
I think this is kind of an
architectural problem.

00:04:53.570 --> 00:04:57.800
This is also why Dianne said
use a fragments API because

00:04:57.800 --> 00:05:01.480
you don't want to create a
new activity every time.

00:05:01.480 --> 00:05:06.330
Or what you can do is you can
handle a task that you can use

00:05:06.330 --> 00:05:09.710
flags like Single Tap
and refresh the

00:05:09.710 --> 00:05:13.220
views, refresh the adapters.

00:05:13.220 --> 00:05:20.170
But I think this is how you
should approach [INAUDIBLE].

00:05:20.170 --> 00:05:25.170
But this is how you generally
should approach these things.

00:05:25.170 --> 00:05:26.980
And to know that if your
application's in the

00:05:26.980 --> 00:05:32.680
background, the framework will
be able to kill your activity,

00:05:32.680 --> 00:05:35.650
but not if you're running
in the foreground.

00:05:35.650 --> 00:05:36.660
MATT GAUNT: And that
was from itai.

00:05:36.660 --> 00:05:38.960
And originally, I posted the
comment and he's rightfully

00:05:38.960 --> 00:05:41.030
come back saying, given that
it's Dianne Hackborn.

00:05:41.030 --> 00:05:43.455
If Dianne Hackborn says
it's true, then--

00:05:43.455 --> 00:05:44.310
STEPHAN LINZNER: It
probably is true.

00:05:44.310 --> 00:05:45.560
MATT GAUNT: Definitely take
her word over mine.

00:05:48.440 --> 00:05:49.690
Next [INAUDIBLE].

00:05:53.282 --> 00:05:55.420
When do you think the ability
to reply to comments will be

00:05:55.420 --> 00:05:56.510
added to developers?

00:05:56.510 --> 00:05:59.450
So again, this kind of falls
neatly under the, we're not

00:05:59.450 --> 00:06:01.615
announcing new features,
et cetera.

00:06:01.615 --> 00:06:04.990
Google Play have given it
to some developers, but

00:06:04.990 --> 00:06:09.680
ultimately, I think the move to
have comments be backed up

00:06:09.680 --> 00:06:12.640
by a Google+ profile means that
you could reach out to

00:06:12.640 --> 00:06:15.160
users if you wanted to help
them out directly.

00:06:15.160 --> 00:06:18.350
But at the moment, there's no
news as to what the Google

00:06:18.350 --> 00:06:20.434
Play team are doing
with that feature.

00:06:26.160 --> 00:06:27.140
I'm going to jump straight
into the next one.

00:06:27.140 --> 00:06:29.820
By the way, if anyone has
another question anywhere,

00:06:29.820 --> 00:06:31.070
then feel free.

00:06:33.600 --> 00:06:37.266
Stephan, have you got a question
in the Moderator?

00:06:37.266 --> 00:06:38.640
Yeah, he has somewhere.

00:06:38.640 --> 00:06:40.544
STEPHAN LINZNER: Which one?

00:06:40.544 --> 00:06:43.160
RICH HYNDMAN: He's linked
to it as well.

00:06:43.160 --> 00:06:45.920
Also, if anyone's got any
favorite apps from the first

00:06:45.920 --> 00:06:49.720
birthday celebrations that
they've been downloading, it'd

00:06:49.720 --> 00:06:51.385
be good to hear about them.

00:06:51.385 --> 00:06:54.940
There's movies, books,
applications, games, all for

00:06:54.940 --> 00:06:57.425
sale at the moment in the Play
Store for the first birthday.

00:06:57.425 --> 00:06:59.725
The Play is one celebration.

00:07:04.990 --> 00:07:06.360
STEPHAN LINZNER: Your question
was the one with the UI

00:07:06.360 --> 00:07:09.340
automator, I see.

00:07:09.340 --> 00:07:11.480
We still don't have
any news on that.

00:07:11.480 --> 00:07:15.540
I saw you open up
a different one.

00:07:15.540 --> 00:07:18.550
It should not happen, like I
said last week, but we don't

00:07:18.550 --> 00:07:20.550
have an answer for you ready.

00:07:20.550 --> 00:07:23.540
I'm sorry.

00:07:23.540 --> 00:07:27.740
Should we take on the private
API key question?

00:07:27.740 --> 00:07:28.880
MATT GAUNT: Let's do it.

00:07:28.880 --> 00:07:30.880
STEPHAN LINZNER: This is also
something that's very

00:07:30.880 --> 00:07:35.835
sensitive, I think, because you
should obviously protect

00:07:35.835 --> 00:07:37.870
your API keys.

00:07:37.870 --> 00:07:40.700
So what should you
do about it?

00:07:40.700 --> 00:07:44.190
There's a couple of things
you could do.

00:07:44.190 --> 00:07:47.490
In general, if you want to have
a read, there's a blog

00:07:47.490 --> 00:07:52.700
post on the Android Developers
Blog on securing passwords,

00:07:52.700 --> 00:07:57.220
and maybe use some advice from
there and apply it to secure

00:07:57.220 --> 00:07:59.830
your API key.

00:07:59.830 --> 00:08:03.370
But in general, you should think
about how sensitive is

00:08:03.370 --> 00:08:07.690
it to protect your API
key in general?

00:08:07.690 --> 00:08:12.950
Do you have to pay for your API
usage, and how important

00:08:12.950 --> 00:08:14.760
is it [INAUDIBLE] or not.

00:08:14.760 --> 00:08:16.450
Generally, you should
protect it.

00:08:16.450 --> 00:08:21.510
In the Android system, of
course, you should always use

00:08:21.510 --> 00:08:27.760
the Flag Private to store
the API key internally.

00:08:27.760 --> 00:08:33.520
Of course, on rooted devices,
this won't be accessible, so

00:08:33.520 --> 00:08:36.860
if you really have to protect
your API key, you can do some

00:08:36.860 --> 00:08:38.090
kind of root detection.

00:08:38.090 --> 00:08:41.510
I also posted a link
on [INAUDIBLE]

00:08:41.510 --> 00:08:44.890
class where you can do root
detection last week.

00:08:44.890 --> 00:08:49.860
This is something you can use to
detect root and only run on

00:08:49.860 --> 00:08:55.720
non-rooted devices if this
is something you can do.

00:08:55.720 --> 00:08:58.940
And you, obviously, what's
your take on it?

00:08:58.940 --> 00:09:01.940
You can do a lot of things.

00:09:01.940 --> 00:09:02.310
MATT GAUNT: Yeah.

00:09:02.310 --> 00:09:04.940
I think generally, you've got to
think how hard do you need

00:09:04.940 --> 00:09:07.180
to make it for someone to get
the API key, and I think

00:09:07.180 --> 00:09:11.390
that's going to be dependent on
the use case, essentially.

00:09:11.390 --> 00:09:14.390
I think the way a lot of
companies will get a way

00:09:14.390 --> 00:09:17.530
around this will be to do a
combination of server side

00:09:17.530 --> 00:09:20.230
support as well as client side,
which the [INAUDIBLE]

00:09:20.230 --> 00:09:22.610
kind of covers the client
side of it.

00:09:22.610 --> 00:09:25.710
So I think generally, there's
going to be certain methods

00:09:25.710 --> 00:09:28.025
that are going to work better
than others, but generally,

00:09:28.025 --> 00:09:31.290
it's a case of how difficult
do you need to make it for

00:09:31.290 --> 00:09:32.830
someone to then not
be interested in

00:09:32.830 --> 00:09:34.740
getting at the API key?

00:09:34.740 --> 00:09:36.850
So it will depend
on the scenario.

00:09:41.240 --> 00:09:46.700
STEPHAN LINZNER: We'll confer
and investigate on what is the

00:09:46.700 --> 00:09:50.960
best practice to do it on
different levels of

00:09:50.960 --> 00:09:53.230
[INAUDIBLE].

00:09:53.230 --> 00:09:56.890
RICH HYNDMAN: Also, the more
recent API keys now also

00:09:56.890 --> 00:09:58.890
require a package name to
be associated with them.

00:09:58.890 --> 00:10:02.100
So the Maps API, for example,
your API key can only be used

00:10:02.100 --> 00:10:04.097
by you because it takes
your signature and

00:10:04.097 --> 00:10:06.280
your package name.

00:10:06.280 --> 00:10:09.320
So for our APIs, at least,
we're now securing them

00:10:09.320 --> 00:10:10.950
through that mechanism
as well.

00:10:10.950 --> 00:10:15.430
Other people's APIs may not use
that, but it is actually

00:10:15.430 --> 00:10:17.390
fine to put things like the
Maps API key in plain text

00:10:17.390 --> 00:10:19.215
inside your application.

00:10:19.215 --> 00:10:20.490
MATT GAUNT: Yeah.

00:10:20.490 --> 00:10:21.470
NICK BUTCHER: But other
developers kind of take

00:10:21.470 --> 00:10:22.920
advantage of that same
infrastructure, right?

00:10:22.920 --> 00:10:26.310
You have the ability to verify
back end calls, so that's

00:10:26.310 --> 00:10:28.290
exactly what the Maps
API is doing.

00:10:28.290 --> 00:10:31.085
It's a way to verify that the
traffic is only coming from a

00:10:31.085 --> 00:10:31.750
certain package.

00:10:31.750 --> 00:10:33.630
So if you wanted to, you could
route something through a

00:10:33.630 --> 00:10:38.090
server off device, and use the
Google based [INAUDIBLE] token

00:10:38.090 --> 00:10:40.970
to verify that it's only coming
from your application,

00:10:40.970 --> 00:10:42.985
that isn't some random
web traffic.

00:10:42.985 --> 00:10:45.660
RICH HYNDMAN: Yeah, I think if
you search for Cloud Endpoints

00:10:45.660 --> 00:10:48.220
on Google+, Cloud Endpoints,
you'll find

00:10:48.220 --> 00:10:49.920
it on the API Console.

00:10:49.920 --> 00:10:50.385
MATT GAUNT: Nice.

00:10:50.385 --> 00:10:51.490
STEPHAN LINZNER:
OK, very nice.

00:10:51.490 --> 00:10:53.000
RICH HYNDMAN: While I'm talking
about things on the

00:10:53.000 --> 00:10:54.990
API Console, actually, it's
worth mentioning that last

00:10:54.990 --> 00:10:58.260
week, a new feature launched
which now allows you, if you

00:10:58.260 --> 00:11:01.710
use Google+ sign in on your
website, to have the Install

00:11:01.710 --> 00:11:04.790
Now button in your Android
applications.

00:11:04.790 --> 00:11:08.820
So users can install your
Android application from your

00:11:08.820 --> 00:11:13.180
website directly onto their
device as if they were in the

00:11:13.180 --> 00:11:13.410
Play Store.

00:11:13.410 --> 00:11:15.590
You don't need to forward them
to the Play Store anymore.

00:11:15.590 --> 00:11:18.760
It's part of the Google+ sign
in, as I say, and you get some

00:11:18.760 --> 00:11:21.900
great metrics from the Google+
Platform Insights as well.

00:11:21.900 --> 00:11:26.630
So have a look at
developers.google.com/+, and

00:11:26.630 --> 00:11:29.310
then look for Over
the Air Install.

00:11:29.310 --> 00:11:31.730
It's not actually the Install
button, it's part of the sign

00:11:31.730 --> 00:11:35.560
in process allows the user to
install your application.

00:11:35.560 --> 00:11:39.130
Kind of cool new feature.

00:11:39.130 --> 00:11:40.785
MATT GAUNT: Added some more
work for me to do to my

00:11:40.785 --> 00:11:43.105
website now.

00:11:43.105 --> 00:11:47.300
RICH HYNDMAN: But if you've got
Google+ sign in already,

00:11:47.300 --> 00:11:51.630
then you just need to add the
app package name into the

00:11:51.630 --> 00:11:55.406
script that's already there and
turn on the API feature in

00:11:55.406 --> 00:11:56.320
the API Console.

00:11:56.320 --> 00:11:58.390
MATT GAUNT: Cool.

00:11:58.390 --> 00:12:00.260
So Nick, we've got a
question for you.

00:12:00.260 --> 00:12:04.190
In the last Android Design in
Action, Nick mentioned they

00:12:04.190 --> 00:12:05.780
rarely recommend
to use dialogs.

00:12:05.780 --> 00:12:06.790
Why is that?

00:12:06.790 --> 00:12:10.090
I think it's a useful way not
only to get input data, but

00:12:10.090 --> 00:12:12.520
also show a relatively small
amount of info that doesn't

00:12:12.520 --> 00:12:14.190
really fit anywhere in
the app, so about

00:12:14.190 --> 00:12:16.760
two to three lines.

00:12:16.760 --> 00:12:20.432
NICK BUTCHER: Yeah, my general
hatred of dialogs is just due

00:12:20.432 --> 00:12:23.220
to their blocking nature.

00:12:23.220 --> 00:12:26.210
It just really disrupts any flow
you might have within an

00:12:26.210 --> 00:12:27.220
application.

00:12:27.220 --> 00:12:29.810
I just think if you can display
something in lines,

00:12:29.810 --> 00:12:33.810
two to three lines could be
given in line somehow, or some

00:12:33.810 --> 00:12:36.560
inline use in space element that
you don't have to go to

00:12:36.560 --> 00:12:42.090
through an explicit dismissal
or anything like that, and I

00:12:42.090 --> 00:12:42.890
find that's better.

00:12:42.890 --> 00:12:44.980
MATT GAUNT: Yeah,
I kind of agree.

00:12:44.980 --> 00:12:48.550
I think one of the most obvious
use cases for a dialog

00:12:48.550 --> 00:12:51.280
is when you're in the middle of
a sign in process, you've

00:12:51.280 --> 00:12:54.040
got the username, you've got
the password, and then

00:12:54.040 --> 00:12:56.340
something fails and then it
comes up with a dialog saying

00:12:56.340 --> 00:12:57.400
something doesn't work.

00:12:57.400 --> 00:13:00.350
It's much nicer if you just
show a message above the

00:13:00.350 --> 00:13:02.370
actual form, so that way they
can edit whatever they want to

00:13:02.370 --> 00:13:05.300
do, or retry there.

00:13:05.300 --> 00:13:08.070
By putting up a dialog, you're
almost already flagging up the

00:13:08.070 --> 00:13:09.920
fact that something's gone wrong
and blocking them from

00:13:09.920 --> 00:13:11.230
trying again.

00:13:11.230 --> 00:13:14.470
STEPHAN LINZNER: So you should
only use it in cases where you

00:13:14.470 --> 00:13:20.710
need the user's attention and
you need the user input.

00:13:20.710 --> 00:13:27.420
But in the other cases, I would
suggest there are other

00:13:27.420 --> 00:13:31.360
things in the framework you can
use to notify the user,

00:13:31.360 --> 00:13:32.540
tell them what's going on.

00:13:32.540 --> 00:13:37.260
But I think dialogs interrupt
user flow, as I wrote on the

00:13:37.260 --> 00:13:40.120
Moderator, and this is why you
should be really careful when

00:13:40.120 --> 00:13:42.660
using them.

00:13:42.660 --> 00:13:47.070
So what else do we have?

00:13:47.070 --> 00:13:48.855
AUDIENCE: Can I ask a
question, please?

00:13:48.855 --> 00:13:50.082
MATT GAUNT: Go for it.

00:13:50.082 --> 00:13:50.524
STEPHAN LINZNER: Of course.

00:13:50.524 --> 00:13:51.850
AUDIENCE: Thanks.

00:13:51.850 --> 00:13:56.890
Is it possible to detect if
the app is open from a

00:13:56.890 --> 00:13:58.140
broadcast receiver?

00:14:04.980 --> 00:14:05.760
STEPHAN LINZNER: I don't know
if it's possible from a

00:14:05.760 --> 00:14:11.410
broadcast receiver, but what
you can do is you can grant

00:14:11.410 --> 00:14:15.270
for it to Get Tasks permission,
and you can from

00:14:15.270 --> 00:14:16.550
there get the running task.

00:14:16.550 --> 00:14:19.760
But you have to be very
careful because you're

00:14:19.760 --> 00:14:21.320
requesting the Get
Task permission.

00:14:25.990 --> 00:14:28.170
I think there are
one or two ways.

00:14:28.170 --> 00:14:30.810
I did that on another project.

00:14:30.810 --> 00:14:34.520
But this is one way you can
detect if your application is

00:14:34.520 --> 00:14:37.850
still there and also
if it's running.

00:14:37.850 --> 00:14:41.400
But I only recommend it in rare
cases, because you're

00:14:41.400 --> 00:14:47.050
obviously going to request this
permission, and people

00:14:47.050 --> 00:14:49.370
wondering why you're
requesting--

00:14:49.370 --> 00:14:52.500
AUDIENCE: What exactly I would
like to know, I would like to

00:14:52.500 --> 00:14:56.600
know if the app is open, if the
UI is in the front, and

00:14:56.600 --> 00:14:59.630
not just if I can
find the task.

00:14:59.630 --> 00:15:02.620
Because you know the app can be
in the task but is not open

00:15:02.620 --> 00:15:03.560
at the moment.

00:15:03.560 --> 00:15:04.500
It's in the background.

00:15:04.500 --> 00:15:06.800
STEPHAN LINZNER: But I think
you can do it with that.

00:15:11.130 --> 00:15:12.730
Just type in on Stack Overflow,
there are a couple

00:15:12.730 --> 00:15:13.470
of answers on that.

00:15:13.470 --> 00:15:17.000
But if I remember correctly,
you can

00:15:17.000 --> 00:15:19.405
definitely do it from there.

00:15:19.405 --> 00:15:20.740
AUDIENCE: I will
check on that.

00:15:20.740 --> 00:15:21.990
Thank you.

00:15:27.310 --> 00:15:29.490
STEPHAN LINZNER: What you also
can do, I think one solution

00:15:29.490 --> 00:15:35.960
is to register a dynamic
broadcast receiver, and from

00:15:35.960 --> 00:15:40.110
then send messages which
you can then receive.

00:15:40.110 --> 00:15:42.990
This is something you also
could do because this

00:15:42.990 --> 00:15:47.060
broadcast receiver will only
be active if you're running

00:15:47.060 --> 00:15:52.711
the program and have
user focus.

00:15:52.711 --> 00:15:55.630
AUDIENCE: Thank you very much.

00:15:55.630 --> 00:15:57.475
MATT GAUNT: So one of the
questions on the Google+

00:15:57.475 --> 00:16:00.910
stream is, do the menu items on
the Action bar support the

00:16:00.910 --> 00:16:01.680
checked state?

00:16:01.680 --> 00:16:07.830
We tried this but it seems not
to work, from Jens Hohl.

00:16:07.830 --> 00:16:09.940
So to the best of my knowledge,
it doesn't support

00:16:09.940 --> 00:16:12.400
necessary the checked state,
but what you can do is just

00:16:12.400 --> 00:16:14.910
swap out the icon depending
on the state.

00:16:14.910 --> 00:16:17.722
So essentially, when you've
created the menu, it's safe to

00:16:17.722 --> 00:16:21.250
keep a reference to the actual
menu itself and then at that

00:16:21.250 --> 00:16:24.960
point use Find Item by Idea,
I think it is, or something

00:16:24.960 --> 00:16:26.750
along those lines, to actually
get a reference to that

00:16:26.750 --> 00:16:29.080
particular item, and then
change the icon

00:16:29.080 --> 00:16:30.990
depending on the state.

00:16:30.990 --> 00:16:32.680
So that's the best way that
I know how to do it.

00:16:35.610 --> 00:16:37.440
If anyone else has any
other comments on it?

00:16:37.440 --> 00:16:38.580
STEPHAN LINZNER: Yeah,
greetings to Jens.

00:16:38.580 --> 00:16:39.680
I know him.

00:16:39.680 --> 00:16:43.450
He's a very smart guy.

00:16:43.450 --> 00:16:44.780
MATT GAUNT: Another one
from Robert Rees.

00:16:44.780 --> 00:16:46.560
Where would you suggest a
new developer to start?

00:16:46.560 --> 00:16:51.660
So I think Giovanni has already
responded to the best

00:16:51.660 --> 00:16:53.790
place to start, which
is the Android

00:16:53.790 --> 00:16:55.790
Developer Training Site.

00:16:55.790 --> 00:16:59.380
Loads of tutorials, and just
generally helps you go from

00:16:59.380 --> 00:17:01.790
really brand new developers
right through to the really

00:17:01.790 --> 00:17:02.390
advanced stuff.

00:17:02.390 --> 00:17:06.390
So that's probably a really
safe place to start.

00:17:06.390 --> 00:17:08.089
And just start coding.

00:17:08.089 --> 00:17:11.220
Come and ask us questions.

00:17:11.220 --> 00:17:12.919
Then we've got a later
conversation with Andrew

00:17:12.919 --> 00:17:15.129
Kelly, the one man moderator
machine.

00:17:19.690 --> 00:17:21.910
So one of the other questions
we got on the Moderator--

00:17:21.910 --> 00:17:25.040
by the way, has anyone else got
a question in the Hangout?

00:17:28.109 --> 00:17:29.359
No, still quiet.

00:17:34.070 --> 00:17:35.920
So the question starts off with
something we can't cover

00:17:35.920 --> 00:17:38.830
now, which is will an update of
Google Maps API include a

00:17:38.830 --> 00:17:42.740
long press callback for Info
window, something like on info

00:17:42.740 --> 00:17:45.560
window, long click listener, or
is there any workaround to

00:17:45.560 --> 00:17:46.280
do that now?

00:17:46.280 --> 00:17:48.060
I really need that.

00:17:48.060 --> 00:17:50.540
So essentially, on the
Maps API, you can

00:17:50.540 --> 00:17:51.630
create a little marker.

00:17:51.630 --> 00:17:54.590
When you think the marker, it
comes up with an info window

00:17:54.590 --> 00:17:56.400
above that.

00:17:56.400 --> 00:17:59.560
What McCann is trying to do is
when you long click on the

00:17:59.560 --> 00:18:01.360
info window, get a difficult
callback.

00:18:01.360 --> 00:18:03.760
So Stephan, you've been kind
of looking into this.

00:18:06.390 --> 00:18:08.240
STEPHAN LINZNER: There's no out
of the box solution for

00:18:08.240 --> 00:18:10.320
this, so it's not supported.

00:18:10.320 --> 00:18:16.700
If you read through the docs,
you will see that the view

00:18:16.700 --> 00:18:20.880
that is shown there above the
marker as an info window is

00:18:20.880 --> 00:18:24.350
actually not the real
view, it's an image.

00:18:24.350 --> 00:18:28.000
So it's not very interactive.

00:18:28.000 --> 00:18:31.560
But there was one interesting
post on Stack Overflow.

00:18:31.560 --> 00:18:33.820
To be honest, it's a
little bit hacky.

00:18:33.820 --> 00:18:35.620
I put it in the Moderator.

00:18:35.620 --> 00:18:37.560
So give it a try.

00:18:37.560 --> 00:18:42.100
What he basically does is he
wraps his whole layout for the

00:18:42.100 --> 00:18:47.390
whole activity, he makes
a custom layout.

00:18:47.390 --> 00:18:48.340
And what he does, he's

00:18:48.340 --> 00:18:51.020
intercepting touch event there.

00:18:51.020 --> 00:18:56.570
He's overwriting on this touch
event and then is looking if

00:18:56.570 --> 00:19:02.190
the touch event actually
was on the info window.

00:19:02.190 --> 00:19:05.680
And when it was on the info
window, he's going to manually

00:19:05.680 --> 00:19:09.640
dispatch the event down
to the info window.

00:19:09.640 --> 00:19:14.020
And so the info window is,
again, kind of a live view.

00:19:14.020 --> 00:19:18.320
This is what he has successfully
managed to do,

00:19:18.320 --> 00:19:23.060
but to me, it sounds kind of
hacky and you should have a

00:19:23.060 --> 00:19:25.850
good reason to do it.

00:19:25.850 --> 00:19:28.160
We've discussed this before.

00:19:28.160 --> 00:19:35.570
A long press on a pop-up in a
Map View, my personal opinion

00:19:35.570 --> 00:19:39.610
is you have to have a very
good reason to do it.

00:19:39.610 --> 00:19:44.110
But if you have to do it, look
at the Moderator and try to

00:19:44.110 --> 00:19:46.712
intercept the touch events
and route them yourself.

00:19:46.712 --> 00:19:49.730
This is what you can do.

00:19:49.730 --> 00:19:51.230
MATT GAUNT: It's one of these
things, I think it's probably

00:19:51.230 --> 00:19:54.600
messed up from the API because
we intend people just to click

00:19:54.600 --> 00:19:56.850
on it and then go through to
another screen which will

00:19:56.850 --> 00:19:58.730
actually have all the
information and all the

00:19:58.730 --> 00:20:01.490
features that you can
do from that point.

00:20:01.490 --> 00:20:05.420
So having the long click
listener, I don't know.

00:20:05.420 --> 00:20:08.580
I struggle to see a situation
where the experience is going

00:20:08.580 --> 00:20:11.980
to really benefit from having
a long click, but I'd be

00:20:11.980 --> 00:20:14.340
interested to know what you're
trying to do with it, really.

00:20:17.780 --> 00:20:21.240
STEPHAN LINZNER: OK, what
else do we have?

00:20:21.240 --> 00:20:22.815
There's a really good
quality of images.

00:20:26.729 --> 00:20:29.214
MATT GAUNT: Got another one?

00:20:29.214 --> 00:20:29.720
STEPHAN LINZNER: There's one.

00:20:29.720 --> 00:20:32.150
I'm just reading through
the comment.

00:20:37.450 --> 00:20:42.760
What you can do is, I don't know
where you get your images

00:20:42.760 --> 00:20:45.820
from, but what you can do is,
I mean, you obviously will

00:20:45.820 --> 00:20:50.930
know the width and the height of
the image in your gallery.

00:20:50.930 --> 00:20:57.340
And to make sure the images are
always at a good quality,

00:20:57.340 --> 00:21:01.620
just fetch a slightly bigger
image from the server.

00:21:01.620 --> 00:21:05.550
And what you also can do is
then scale it down so

00:21:05.550 --> 00:21:06.440
that it will fit.

00:21:06.440 --> 00:21:07.800
So there are a couple
of strategies.

00:21:07.800 --> 00:21:15.140
I think optimizing images for
the gallery is often done on

00:21:15.140 --> 00:21:16.080
the server side.

00:21:16.080 --> 00:21:19.520
So you request different
representations from the

00:21:19.520 --> 00:21:24.970
server for different devices.

00:21:24.970 --> 00:21:29.690
But what you never should do
is download very big images

00:21:29.690 --> 00:21:34.940
and use them without sampling
them down, because this will

00:21:34.940 --> 00:21:37.730
obviously take a
lot of memory.

00:21:37.730 --> 00:21:41.150
You can download a big image
if you don't have an image

00:21:41.150 --> 00:21:45.570
scanning facility and scale it
down and then put it in a

00:21:45.570 --> 00:21:50.645
view, but what you should never
do is take the big image

00:21:50.645 --> 00:21:53.000
and put it in a gallery.

00:21:53.000 --> 00:21:57.270
And also, recycle your views.

00:21:57.270 --> 00:21:59.050
MATT GAUNT: So just to reference
that, that was

00:21:59.050 --> 00:22:02.590
referring to a question that we
had on the Google+ stream,

00:22:02.590 --> 00:22:06.450
that was essentially, how do you
maintain good quality for

00:22:06.450 --> 00:22:09.450
images when writing custom
gallery implementation?

00:22:09.450 --> 00:22:13.220
I think just to further what
Stephan was saying, the main

00:22:13.220 --> 00:22:15.960
approach that I've seen people
take is essentially, they only

00:22:15.960 --> 00:22:17.900
have access to really big
images, and therefore when

00:22:17.900 --> 00:22:20.430
you're doing custom gallery,
the best solution that I've

00:22:20.430 --> 00:22:23.180
seen is just to scale it down,
store a reference to the full

00:22:23.180 --> 00:22:25.550
image as well as the smaller
one, and then just use the

00:22:25.550 --> 00:22:27.470
thumbnail within the List
View, and then that way,

00:22:27.470 --> 00:22:30.230
you've still got access to the
large one if you need it for

00:22:30.230 --> 00:22:31.495
whatever reason.

00:22:31.495 --> 00:22:33.700
But you do you have to be
careful with memory management

00:22:33.700 --> 00:22:35.460
because you're dealing
with bitmaps.

00:22:35.460 --> 00:22:39.760
STEPHAN LINZNER: And Andrew
Kelly just pointed out to

00:22:39.760 --> 00:22:43.180
Giusepppe, this is what
I was talking about.

00:22:43.180 --> 00:22:46.030
With getting the running task
permission, you can refer to

00:22:46.030 --> 00:22:49.090
running a process info
and you can get the

00:22:49.090 --> 00:22:50.670
importance from there.

00:22:50.670 --> 00:22:53.560
This is where you can tell if
you're in the foreground or

00:22:53.560 --> 00:22:57.421
not, but still be very careful
when using it.

00:22:57.421 --> 00:23:00.290
AUDIENCE: Thank you.

00:23:00.290 --> 00:23:02.950
MATT GAUNT: So this is a
question that maybe Rich or

00:23:02.950 --> 00:23:06.490
Nick will have a bit
more insight in.

00:23:06.490 --> 00:23:08.390
This is from Phil.

00:23:08.390 --> 00:23:10.810
Are unstripped system libraries
available for

00:23:10.810 --> 00:23:13.860
download to assist in diagnosing
Android app crashes

00:23:13.860 --> 00:23:15.690
below the Dalvik VM?

00:23:15.690 --> 00:23:19.960
So essentially, what Phil's
got is he's got a Java

00:23:19.960 --> 00:23:22.810
application, there's no NDK,
and somewhere down in the

00:23:22.810 --> 00:23:26.360
Dalvik VM, there's
actually a cycle.

00:23:26.360 --> 00:23:29.020
And he's kind of posted to a
Google+ link, which then posts

00:23:29.020 --> 00:23:31.880
to a Google Group conversation
where someone's actually said

00:23:31.880 --> 00:23:36.150
they've got unstripped binaries
which then gives them

00:23:36.150 --> 00:23:39.690
access to an extra set
of information.

00:23:39.690 --> 00:23:41.750
So I've posted a link to
the Nexus drivers.

00:23:41.750 --> 00:23:43.910
Not really sure if that's
related or not,

00:23:43.910 --> 00:23:45.085
but it might help.

00:23:45.085 --> 00:23:48.878
Do you guys have any insight?

00:23:48.878 --> 00:23:50.615
NICK BUTCHER: Nope.

00:23:50.615 --> 00:23:51.970
RICH HYNDMAN: I'm looking
through the [INAUDIBLE]

00:23:51.970 --> 00:23:53.170
at the moment.

00:23:53.170 --> 00:23:56.370
Sometimes you can tell.

00:23:56.370 --> 00:23:57.600
Sometimes they've commented
and you can find out

00:23:57.600 --> 00:24:00.845
what's going on.

00:24:00.845 --> 00:24:04.780
But on this, I can't
see much at all.

00:24:10.950 --> 00:24:13.510
MATT GAUNT: I'd be interested
to know what you're doing,

00:24:13.510 --> 00:24:15.710
Phil, to kind of cause it.

00:24:15.710 --> 00:24:18.850
I think somewhere along the
lines, there was an example of

00:24:18.850 --> 00:24:20.750
using a bitmap in one thread,
recycling it in

00:24:20.750 --> 00:24:22.115
another, and then it--

00:24:22.115 --> 00:24:24.560
RICH HYNDMAN: I'd try the
memory allocation tools.

00:24:24.560 --> 00:24:28.470
Run a debug off the app, collect
the memory usage, and

00:24:28.470 --> 00:24:32.502
then run it through the MAT, the
Memory Analysis Tool, at

00:24:32.502 --> 00:24:35.200
the point when it crashes and
see if you can figure out from

00:24:35.200 --> 00:24:38.182
the memory allocations
what's going on.

00:24:38.182 --> 00:24:40.270
MATT GAUNT: OK.

00:24:40.270 --> 00:24:42.870
STEPHAN LINZNER: So our man Jens
asked another question,

00:24:42.870 --> 00:24:47.380
which I think Rich
can comment on.

00:24:47.380 --> 00:24:51.490
He's asking for suggestions on
a webcast recording tool from

00:24:51.490 --> 00:24:52.350
the device.

00:24:52.350 --> 00:24:58.520
They want to record their app
on the device and show the

00:24:58.520 --> 00:25:00.900
video to their customers.

00:25:00.900 --> 00:25:04.155
I think you're experienced in
recording video from devices.

00:25:04.155 --> 00:25:05.660
RICH HYNDMAN: Sure.

00:25:05.660 --> 00:25:07.780
If you want to record it into
a PC or a Mac, there's a

00:25:07.780 --> 00:25:09.570
number of HDMI recorders.

00:25:09.570 --> 00:25:11.450
I've used a Black Magic one.

00:25:11.450 --> 00:25:12.705
I was using one a couple
of days ago.

00:25:12.705 --> 00:25:14.580
It works very well.

00:25:14.580 --> 00:25:18.080
You get the 1080P and 720P
streams that's already through

00:25:18.080 --> 00:25:19.390
your Thunderbolt or USB3.

00:25:19.390 --> 00:25:22.378
So if you have a look at Black
Magic's website, they have a

00:25:22.378 --> 00:25:24.350
few tools there that
work quite well.

00:25:24.350 --> 00:25:27.990
The only thing to be careful
of is that your phone or

00:25:27.990 --> 00:25:33.280
tablet doesn't have
HTTP keys on it.

00:25:33.280 --> 00:25:36.140
So you want to something like
the Motorola Zoom, or the

00:25:36.140 --> 00:25:39.590
Galaxy Tab, or the Transformer
Prime, or the Galaxy Nexus.

00:25:39.590 --> 00:25:40.880
All these things
will work fine.

00:25:40.880 --> 00:25:43.470
But then as soon as you go up to
things like the Nexus 4 and

00:25:43.470 --> 00:25:45.570
the Nexus 10 and some of the
newer devices that support

00:25:45.570 --> 00:25:50.845
HTTP, most recorders
won't record HTTP

00:25:50.845 --> 00:25:53.970
encrypted content, obviously.

00:25:53.970 --> 00:25:56.440
So just be careful with that,
but I'm using the one from

00:25:56.440 --> 00:25:58.336
Black Magic and it works
absolutely perfectly for me.

00:26:01.660 --> 00:26:03.600
NICK BUTCHER: A viable attempt,
if you can, is that

00:26:03.600 --> 00:26:07.890
you use an emulator or a
desktop software like

00:26:07.890 --> 00:26:10.250
BlueStacks or something like
that and use some desktop

00:26:10.250 --> 00:26:11.200
recording software as well.

00:26:11.200 --> 00:26:14.620
You get quite good
frame rates then.

00:26:14.620 --> 00:26:15.000
STEPHAN LINZNER: OK.

00:26:15.000 --> 00:26:18.880
We have an interesting question,
I think, from

00:26:18.880 --> 00:26:20.340
Stephan from Berlin.

00:26:20.340 --> 00:26:23.450
He's asking what's the best
approach to migrate a phone

00:26:23.450 --> 00:26:27.590
app, no fragments,
to a tablet app.

00:26:27.590 --> 00:26:28.840
This is an interesting
question.

00:26:31.660 --> 00:26:33.470
What's the best approach?

00:26:33.470 --> 00:26:39.000
I think the best approach is
to go over the sequential

00:26:39.000 --> 00:26:45.470
screens on the phone and ask
yourself how will you lay out

00:26:45.470 --> 00:26:47.990
these screens on a tablet?

00:26:47.990 --> 00:26:52.000
And after you've done that, you
should probably continue

00:26:52.000 --> 00:26:58.240
on taking each activity and
refactoring out every code

00:26:58.240 --> 00:27:03.290
that has to go from the activity
to the fragment, and

00:27:03.290 --> 00:27:06.000
put all screens in fragments.

00:27:06.000 --> 00:27:11.890
And then after that, you're
going to start rearranging it

00:27:11.890 --> 00:27:12.620
on the tablet.

00:27:12.620 --> 00:27:19.500
But that's what I would do, is
I would think about which

00:27:19.500 --> 00:27:27.950
activities which visible views
to the user go where on a

00:27:27.950 --> 00:27:31.500
tablet, and then I would
refactor out the fragments,

00:27:31.500 --> 00:27:36.070
and then I would do all the
rearranging for the phone and

00:27:36.070 --> 00:27:36.570
the tablet.

00:27:36.570 --> 00:27:39.480
So you can do it step by step.

00:27:39.480 --> 00:27:43.450
What can be very helpful when
doing it is to use something

00:27:43.450 --> 00:27:49.010
like an event bus because
it allows you to

00:27:49.010 --> 00:27:50.220
decouple things like that.

00:27:50.220 --> 00:27:54.460
So you can still use the old
code while also running a

00:27:54.460 --> 00:28:00.820
fragment because the events tend
to make code more loosely

00:28:00.820 --> 00:28:04.230
coupled, so this is an approach
I've taken on which

00:28:04.230 --> 00:28:09.780
worked very well because you can
still keep the app running

00:28:09.780 --> 00:28:11.770
and having some fragments
there.

00:28:14.320 --> 00:28:19.120
But generally, take on the
phone code, extract some

00:28:19.120 --> 00:28:24.170
fragments, and then rearrange
it for the tablet version.

00:28:24.170 --> 00:28:25.460
MATT GAUNT: I think that
sounds about right.

00:28:25.460 --> 00:28:30.360
I think you just need to
genuinely think about how you

00:28:30.360 --> 00:28:34.220
want to chunk up the logic of
the application into fragments

00:28:34.220 --> 00:28:34.980
because obviously, you're
going to want

00:28:34.980 --> 00:28:36.020
to move them around.

00:28:36.020 --> 00:28:39.610
And once you've figured that
out, start moving those bits

00:28:39.610 --> 00:28:41.290
of logic you already have
into in the fragment.

00:28:41.290 --> 00:28:44.770
And like Stephan said, then
you're good to go.

00:28:44.770 --> 00:28:46.370
STEPHAN LINZNER: There's
a short question.

00:28:46.370 --> 00:28:47.260
I'm a newbie.

00:28:47.260 --> 00:28:50.820
Why don't pages like
developer.android.com?

00:28:50.820 --> 00:28:53.260
I have no links to examples.

00:28:59.640 --> 00:29:01.020
Where can you get
the sample apps?

00:29:01.020 --> 00:29:03.105
You can get it from, if
you use a [INAUDIBLE]

00:29:03.105 --> 00:29:05.225
Android tool--

00:29:05.225 --> 00:29:07.775
NICK BUTCHER: Sorry, actually,
the important thing you missed

00:29:07.775 --> 00:29:09.370
out when you read that link is
he was talking about the

00:29:09.370 --> 00:29:13.060
design site
developer.android.com/design,

00:29:13.060 --> 00:29:17.420
specifically on linked code
stuff, so they're specifically

00:29:17.420 --> 00:29:20.870
resources targeted mostly at
designers, and they're not

00:29:20.870 --> 00:29:22.560
supposed to be backed up by
implementation steps.

00:29:25.740 --> 00:29:26.610
STEPHAN LINZNER: You're right.

00:29:26.610 --> 00:29:29.180
MATT GAUNT: So I think generally
with this kind of

00:29:29.180 --> 00:29:32.050
stuff, when you start looking,
so if you're finding something

00:29:32.050 --> 00:29:33.950
in the Action Bar that's
mentioned in the design

00:29:33.950 --> 00:29:34.750
guidelines.

00:29:34.750 --> 00:29:36.850
When you actually then start
looking at the documentation

00:29:36.850 --> 00:29:39.450
for the Action Bar, you'll
actually start finding guides

00:29:39.450 --> 00:29:42.890
that'll explain how to do each
particular part that will be

00:29:42.890 --> 00:29:44.350
kind of referenced in the
design guidelines.

00:29:44.350 --> 00:29:48.310
So I think they are decoupled
for a good reason, but

00:29:48.310 --> 00:29:51.350
generally, the documentation is
still there to back it up

00:29:51.350 --> 00:29:53.830
and help you in whatever
way you need to.

00:29:53.830 --> 00:29:56.450
So I think it's quite a
good way of doing it.

00:29:56.450 --> 00:29:59.040
And like Nick said, it's one of
those things, anything that

00:29:59.040 --> 00:30:01.620
gets designers to start thinking
in an Android when

00:30:01.620 --> 00:30:04.790
they're not really used
to it is good.

00:30:04.790 --> 00:30:07.560
And scaring them off with code
and certain things like that,

00:30:07.560 --> 00:30:10.756
if they're not into that, then
it's best to leave it.

00:30:10.756 --> 00:30:12.910
NICK BUTCHER: I think
it's good and bad.

00:30:12.910 --> 00:30:15.975
I want all developers to read
the Design Guide, and I could

00:30:15.975 --> 00:30:17.660
see the benefit for
having links

00:30:17.660 --> 00:30:19.090
through to some examples.

00:30:19.090 --> 00:30:20.780
So I can see the argument.

00:30:20.780 --> 00:30:22.120
I get it completely where
you're coming from.

00:30:22.120 --> 00:30:24.650
But at the same time, like
Matt says, we want to be

00:30:24.650 --> 00:30:28.160
accessible to non-developers
as well, to designers and

00:30:28.160 --> 00:30:30.903
people who might get scared off
by links through to all

00:30:30.903 --> 00:30:30.990
that stuff.

00:30:30.990 --> 00:30:33.702
So there's arguments for both
sides, and this is the way

00:30:33.702 --> 00:30:36.042
we've fallen on this
argument right now.

00:30:40.510 --> 00:30:42.760
MATT GAUNT: Andrew Kelly's
asked a question.

00:30:42.760 --> 00:30:45.690
In the absence of--

00:30:45.690 --> 00:30:46.890
I'm going to answer this
one last question.

00:30:46.890 --> 00:30:49.250
In the absence of being able
to use the Google Maps

00:30:49.250 --> 00:30:52.050
Fragment inside an app widget,
would you see any problems

00:30:52.050 --> 00:30:55.210
using an image from static
Google Maps API instead?

00:30:55.210 --> 00:30:58.970
I like to link to periodically
call location updates show

00:30:58.970 --> 00:31:00.746
places of interest nearby.

00:31:00.746 --> 00:31:04.320
So Stephan's linked to Android
Design in Action next week,

00:31:04.320 --> 00:31:08.350
which I believe you guys are
covering widgets, Nick?

00:31:08.350 --> 00:31:08.840
NICK BUTCHER: That
was yesterday.

00:31:08.840 --> 00:31:09.920
That went out yesterday.

00:31:09.920 --> 00:31:10.560
MATT GAUNT: There you go.

00:31:10.560 --> 00:31:12.780
We've already done it.

00:31:12.780 --> 00:31:14.150
So what would you say to this?

00:31:14.150 --> 00:31:16.520
I personally don't think it's
that bad of an idea.

00:31:16.520 --> 00:31:19.694
I think dealing with the
densities, it might be a bit

00:31:19.694 --> 00:31:23.390
of an issue, but I'm sure
Andrew can deal with it.

00:31:23.390 --> 00:31:25.350
NICK BUTCHER: It
sounds doable.

00:31:25.350 --> 00:31:27.530
I think I would just be careful
about how frequently

00:31:27.530 --> 00:31:29.450
you're going to do something
like that.

00:31:29.450 --> 00:31:31.070
RICH HYNDMAN: And of course, if
you're using static images

00:31:31.070 --> 00:31:33.750
from Google Maps, make sure you
abide by all the relevant

00:31:33.750 --> 00:31:35.740
terms and conditions put the
copyrights and licenses at the

00:31:35.740 --> 00:31:36.810
bottom of the pictures.

00:31:36.810 --> 00:31:39.035
We have a static image
generator.

00:31:39.035 --> 00:31:40.910
NICK BUTCHER: Yeah, no cropping
out the cropping.

00:31:40.910 --> 00:31:44.090
RICH HYNDMAN: Exactly, no
cropping out the logo.

00:31:44.090 --> 00:31:45.650
STEPHAN LINZNER: Yeah,
but just give it a

00:31:45.650 --> 00:31:47.400
try and let us know.

00:31:47.400 --> 00:31:48.830
MATT GAUNT: Yeah, it would
be cool to find out

00:31:48.830 --> 00:31:49.910
what you're up to.

00:31:49.910 --> 00:31:52.890
So unfortunately, that
is our half hour.

00:31:52.890 --> 00:31:56.690
We have steamed through so many
questions, it is untrue.

00:31:56.690 --> 00:31:59.007
But thank you for
joining us and

00:31:59.007 --> 00:32:00.850
chatting with your questions.

00:32:00.850 --> 00:32:03.340
If you've got any more, then
stick them in the Moderator

00:32:03.340 --> 00:32:06.245
for next week where we'll be
doing another office hours.

00:32:06.245 --> 00:32:08.020
NICK BUTCHER: Guiseppe asked
where in the comments which

00:32:08.020 --> 00:32:09.335
I'm not touching with
a barge pole.

00:32:09.335 --> 00:32:11.110
MATT GAUNT: Yeah,
neither am I.

00:32:11.110 --> 00:32:13.170
NICK BUTCHER: How long will
it take for Google Air

00:32:13.170 --> 00:32:14.670
tickets to sell out?

00:32:17.670 --> 00:32:18.350
MATT GAUNT: You tell us.

00:32:18.350 --> 00:32:19.420
It depends.

00:32:19.420 --> 00:32:21.040
Anyway, thank you, everyone.

00:32:21.040 --> 00:32:21.410
STEPHAN LINZNER: All
right, guys.

00:32:21.410 --> 00:32:22.130
See you next week.

00:32:22.130 --> 00:32:23.290
NICK BUTCHER: Bye, guys.

00:32:23.290 --> 00:32:26.500
RICH HYNDMAN: Bye bye.

00:32:26.500 --> 00:32:27.750
AUDIENCE: Bye, guys.

