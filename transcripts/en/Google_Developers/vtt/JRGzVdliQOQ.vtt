WEBVTT
Kind: captions
Language: en

00:00:07.340 --> 00:00:08.830
ARUN NAGARAJAN: Hello, and
welcome to another exciting

00:00:08.830 --> 00:00:10.750
episode of Google
Developers Live.

00:00:10.750 --> 00:00:12.900
My name is Arun Nagarajan,
and we're streaming here

00:00:12.900 --> 00:00:15.220
from New York City.

00:00:15.220 --> 00:00:18.540
We're today gonna try an
exciting new series called

00:00:18.540 --> 00:00:20.060
Apps Script Crash Course.

00:00:20.060 --> 00:00:22.610
And the topic we're gonna
dive deep into today is

00:00:22.610 --> 00:00:24.100
ContentService.

00:00:24.100 --> 00:00:24.970
So let's take a look.

00:00:24.970 --> 00:00:27.630
Let's take a look at what
ContentService can do, what

00:00:27.630 --> 00:00:28.650
it's all about.

00:00:28.650 --> 00:00:31.612
Before we're gonna dive all into
ContentService, one of

00:00:31.612 --> 00:00:34.620
the things I want to do is walk
you through where does

00:00:34.620 --> 00:00:36.120
ContentService fit?

00:00:36.120 --> 00:00:38.590
So let's take a look at the
slides a little bit here.

00:00:38.590 --> 00:00:40.980
So, one of the things that we
want to take a look at here in

00:00:40.980 --> 00:00:45.900
the slides is the high-level
details of all the different

00:00:45.900 --> 00:00:48.400
execution methods
of Apps script.

00:00:48.400 --> 00:00:51.520
As you can see, there are seven
different execution

00:00:51.520 --> 00:00:53.600
contexts for Apps script.

00:00:53.600 --> 00:00:55.900
Obviously, you can run it right
from the script editor,

00:00:55.900 --> 00:01:00.690
custom functions in
spreadsheets, web apps,

00:01:00.690 --> 00:01:04.019
gadgets in sites, container
extensions, time-driven

00:01:04.019 --> 00:01:05.800
triggers, container-specific
triggers.

00:01:05.800 --> 00:01:07.540
These are things like onEdit,

00:01:07.540 --> 00:01:09.590
onFormSubmit, things like that.

00:01:09.590 --> 00:01:12.990
So quite a few different ways
you can run these Apps Script.

00:01:12.990 --> 00:01:15.500
The one that I've highlighted
there is called web apps.

00:01:15.500 --> 00:01:17.930
So web apps, as you probably
have already seen, you can do

00:01:17.930 --> 00:01:19.940
a lot of really interesting
things with.

00:01:19.940 --> 00:01:23.520
You can actually accept
requests, respond with UI, and

00:01:23.520 --> 00:01:25.450
all sorts of good things
like that.

00:01:25.450 --> 00:01:28.120
And what I've done here is
actually taken web apps and

00:01:28.120 --> 00:01:31.750
blown it out into other ways
you could output that.

00:01:31.750 --> 00:01:35.820
So with a web app, you can
display user interface, UI app

00:01:35.820 --> 00:01:39.560
using the GUI builder and other
things as well-- this is

00:01:39.560 --> 00:01:44.410
sort of a programmatic way of
building an application--

00:01:44.410 --> 00:01:48.620
or HTML service, which allows
you to bring your own HTML,

00:01:48.620 --> 00:01:52.370
JavaScript, and CSS and really
build a much more bespoke UI

00:01:52.370 --> 00:01:53.525
that you want.

00:01:53.525 --> 00:01:56.230
What we're here to talk about
today is ContentService.

00:01:56.230 --> 00:01:59.260
So this is sort of where
ContentService really sits.

00:01:59.260 --> 00:02:02.010
It's a mode of output
for web apps.

00:02:02.010 --> 00:02:05.410
So hopefully this slide kind of
gives you a sense for where

00:02:05.410 --> 00:02:08.330
within the Apps Script
ecosystem

00:02:08.330 --> 00:02:09.710
ContentService fits in.

00:02:09.710 --> 00:02:13.640
So ContentService is a type
of output for web apps.

00:02:13.640 --> 00:02:14.660
OK.

00:02:14.660 --> 00:02:16.730
So what does ContentService
look like?

00:02:16.730 --> 00:02:17.870
It's actually really simple.

00:02:17.870 --> 00:02:21.380
So, within a couple of lines
you can build a very simple

00:02:21.380 --> 00:02:22.710
ContentService app.

00:02:22.710 --> 00:02:25.020
You can have it outputting
a simple 'Hello World'.

00:02:25.020 --> 00:02:28.160
You can have it outputting
various other text types like

00:02:28.160 --> 00:02:31.640
JSON, XML, atom, and we'll take
a at look a few other

00:02:31.640 --> 00:02:34.040
interesting examples
today as well.

00:02:34.040 --> 00:02:37.000
You can accept request
through GET and POST.

00:02:37.000 --> 00:02:39.510
And it's got a very similar
authentication model to an

00:02:39.510 --> 00:02:40.340
HTML service.

00:02:40.340 --> 00:02:42.100
So, I should really
say the same.

00:02:42.100 --> 00:02:43.950
You can deploy it as yourself.

00:02:43.950 --> 00:02:45.720
You can deploy it as the
person accessing the

00:02:45.720 --> 00:02:46.770
application.

00:02:46.770 --> 00:02:50.230
You can have it be anonymous
as well, which is great.

00:02:50.230 --> 00:02:52.660
So you can really build
something pretty useful for a

00:02:52.660 --> 00:02:54.090
lot of different scenarios.

00:02:54.090 --> 00:02:57.470
And in essence, it really allows
you to build an API on

00:02:57.470 --> 00:03:01.890
top of Apps Script that exposes
your Google data

00:03:01.890 --> 00:03:05.100
securely, or other spreadsheet
information that you may want

00:03:05.100 --> 00:03:06.800
to have available as an API.

00:03:06.800 --> 00:03:09.490
And we'll see some examples of
how this all makes sense in a

00:03:09.490 --> 00:03:11.150
real-world scenario.

00:03:11.150 --> 00:03:14.150
So, let's just take a quick look
at a very simple example.

00:03:14.150 --> 00:03:15.940
So I'm just gonna go ahead.

00:03:15.940 --> 00:03:17.450
Open up a script editor.

00:03:17.450 --> 00:03:18.700
Go to script.google.com.

00:03:21.040 --> 00:03:22.870
Start a blank project.

00:03:22.870 --> 00:03:26.100
And this should give a sense
for how you build a very

00:03:26.100 --> 00:03:28.120
simple ContentService
application.

00:03:28.120 --> 00:03:29.370
I'll just say function doGet.

00:03:32.460 --> 00:03:35.490
I won't accept any parameters
for now.

00:03:35.490 --> 00:03:36.455
And I'll just say
ContentService.c

00:03:36.455 --> 00:03:46.460
reateTextOutput, 'hello
GDL', and that's it.

00:03:46.460 --> 00:03:49.590
Oh, I have to return it.

00:03:49.590 --> 00:03:51.230
I always forget that.

00:03:51.230 --> 00:03:55.920
So that's the code that when you
call it from an external

00:03:55.920 --> 00:03:59.250
URL invocation, it'll return
a simple piece of text.

00:03:59.250 --> 00:04:00.730
So let's just roll it out.

00:04:00.730 --> 00:04:05.140
So let's just say gdl
test, and I'll--

00:04:05.140 --> 00:04:07.420
so the same deployment
mechanisms apply.

00:04:07.420 --> 00:04:08.330
So you have to go into--

00:04:08.330 --> 00:04:09.960
let me save it.

00:04:09.960 --> 00:04:13.730
You got to have a version
specified.

00:04:13.730 --> 00:04:15.980
Save a version.

00:04:15.980 --> 00:04:19.140
Go under Publish, Deploy
as web app.

00:04:19.140 --> 00:04:20.829
You have to pick the
project version.

00:04:20.829 --> 00:04:23.610
In this case, I'm just gonna
execute for myself.

00:04:23.610 --> 00:04:28.370
I'm gonna deploy, copy
the code, and run it.

00:04:28.370 --> 00:04:30.942
And you'll see 'hello GDL'.

00:04:30.942 --> 00:04:31.770
OK.

00:04:31.770 --> 00:04:36.450
Very simple text response that
allows you to just ensure that

00:04:36.450 --> 00:04:38.830
you're doing the right thing as
far as the deployment, the

00:04:38.830 --> 00:04:42.730
authentication, and make sure
you're calling the right URL.

00:04:42.730 --> 00:04:48.050
So one thing to note is that the
content that is responded

00:04:48.050 --> 00:04:51.890
from ContentService is not
sanitized by Caja or other

00:04:51.890 --> 00:04:54.830
tools we use internally that
HTML service goes through.

00:04:54.830 --> 00:04:58.235
So, in order to make sure that
it's still secure, what we do

00:04:58.235 --> 00:05:01.550
do is redirect the service
to a different domain,

00:05:01.550 --> 00:05:03.310
googleusercontent.com.

00:05:03.310 --> 00:05:06.310
So if you're using cURL or other
mechanisms, ensure that

00:05:06.310 --> 00:05:09.110
you're following redirect so
that you're able to get at the

00:05:09.110 --> 00:05:12.420
content that you're trying to
return, not just stuck in the

00:05:12.420 --> 00:05:15.530
original
script.google.com/exeurls.

00:05:15.530 --> 00:05:16.410
OK.

00:05:16.410 --> 00:05:19.780
So just to really illustrate
that, if you go and look at

00:05:19.780 --> 00:05:24.850
the URL, the URL
script.google.com/macros and

00:05:24.850 --> 00:05:28.350
the whole URL that you're used
to from HTML service and other

00:05:28.350 --> 00:05:30.470
different deployment mechanisms,
the ultimate end

00:05:30.470 --> 00:05:33.840
URL ends in
googleuserscontent.com.

00:05:33.840 --> 00:05:35.220
OK.

00:05:35.220 --> 00:05:36.980
So that's a very
simple example.

00:05:36.980 --> 00:05:39.020
So let's take a look
at what's possible,

00:05:39.020 --> 00:05:40.270
what else is possible.

00:05:42.870 --> 00:05:45.240
So here are some other
examples of some more

00:05:45.240 --> 00:05:46.550
sophisticated examples.

00:05:46.550 --> 00:05:48.260
So the first one--

00:05:48.260 --> 00:05:50.140
and we'll actually kind
of see this in our

00:05:50.140 --> 00:05:51.760
documentation as well--

00:05:51.760 --> 00:05:58.110
is a very simple parse an
existing XML feed and then

00:05:58.110 --> 00:06:03.180
replace it with some information
that it may be

00:06:03.180 --> 00:06:06.010
tucked away and create
a new RSS feed and

00:06:06.010 --> 00:06:07.120
respond with that.

00:06:07.120 --> 00:06:08.990
So this may be a little
hard to see here.

00:06:08.990 --> 00:06:12.320
So let me actually go and find
it in our documentation site,

00:06:12.320 --> 00:06:15.430
which is exactly where
I pulled it up from.

00:06:15.430 --> 00:06:19.010
So here's our ContentService
documentation site.

00:06:19.010 --> 00:06:23.070
So you can see that off the left
navigation you can pick

00:06:23.070 --> 00:06:25.590
Serving Content as the option.

00:06:25.590 --> 00:06:27.670
And I'll show you the exact
example that we're talking

00:06:27.670 --> 00:06:28.400
about here.

00:06:28.400 --> 00:06:32.490
So a lot of you folks that are
in the tech industry may be a

00:06:32.490 --> 00:06:34.850
big fan of xkcd like I am.

00:06:34.850 --> 00:06:37.670
And one of the cool things that
they do is they tuck away

00:06:37.670 --> 00:06:41.410
some really interesting
commentary and notes in the

00:06:41.410 --> 00:06:44.510
Alt Tag of an image,
the actual comic.

00:06:44.510 --> 00:06:47.270
So in this example what we're
doing is we're taking an

00:06:47.270 --> 00:06:52.200
existing RSS feed, replacing the
RSS feed with interesting

00:06:52.200 --> 00:06:54.540
data that we're able to parse
out using a simple regular

00:06:54.540 --> 00:06:58.410
expression, and then return
it as another RSS feed.

00:06:58.410 --> 00:07:01.270
So a simple processing pipeline
that I think is

00:07:01.270 --> 00:07:03.360
interesting.

00:07:03.360 --> 00:07:07.770
Another example is the ability
to return JSON data.

00:07:07.770 --> 00:07:10.430
So we'll kind of dive deep
into these examples.

00:07:10.430 --> 00:07:12.660
So here you can see that
it takes a request--

00:07:12.660 --> 00:07:15.710
let me zoom in some more so you
can see all the details.

00:07:15.710 --> 00:07:19.520
Here it's taking in a request
object that contains two

00:07:19.520 --> 00:07:22.400
parameters, start and end, and
it's actually going into the

00:07:22.400 --> 00:07:25.880
calendar app and finding to see
if you have any meetings

00:07:25.880 --> 00:07:27.160
during that day.

00:07:27.160 --> 00:07:31.380
So a very simple free/busy
look-up type application here.

00:07:31.380 --> 00:07:34.140
So you can actually expose this
to other folks saying

00:07:34.140 --> 00:07:37.330
whether I am free between these
days or not, between

00:07:37.330 --> 00:07:38.650
this time or not.

00:07:38.650 --> 00:07:41.010
And all it's returning
is a true or false.

00:07:41.010 --> 00:07:43.550
So there's really not a lot of
sensitive data being leaked.

00:07:43.550 --> 00:07:46.960
So you can actually make this
available for interesting

00:07:46.960 --> 00:07:49.970
third-party applications,
if that makes sense.

00:07:49.970 --> 00:07:50.210
Great.

00:07:50.210 --> 00:07:51.170
So let's go back.

00:07:51.170 --> 00:07:53.640
And now let's talk about some
other things that we're gonna

00:07:53.640 --> 00:07:56.150
talk about.

00:07:56.150 --> 00:07:58.450
So what I want to do during this
session is really walk

00:07:58.450 --> 00:08:01.010
you through a few different
examples of what are some of

00:08:01.010 --> 00:08:02.180
these things that
we can build.

00:08:02.180 --> 00:08:05.580
So, very first thing I'm gonna
show is an RSS example.

00:08:05.580 --> 00:08:08.810
So take something that is very
day to day and expose that as

00:08:08.810 --> 00:08:13.590
an RSS, which allows you to
display that in very different

00:08:13.590 --> 00:08:16.580
places, like a Google Site
or Google Reader or other

00:08:16.580 --> 00:08:20.560
third-party tools that may
accept RSS or atom data.

00:08:20.560 --> 00:08:21.670
A JSON example.

00:08:21.670 --> 00:08:25.750
So you're able to take a
spreadsheet, make that act

00:08:25.750 --> 00:08:29.110
like a database, and expose
the data around it to a

00:08:29.110 --> 00:08:31.820
third-party application, a
mobile application or another

00:08:31.820 --> 00:08:33.090
application.

00:08:33.090 --> 00:08:35.440
We'll talk about
JSONP briefly.

00:08:35.440 --> 00:08:39.809
So JSONP is the way you can
have a third-party website

00:08:39.809 --> 00:08:42.179
that executes JavaScript on
the client side within a

00:08:42.179 --> 00:08:46.390
browser, access data from
a third-party domain.

00:08:46.390 --> 00:08:49.150
The other option for
this is CORS, cross

00:08:49.150 --> 00:08:50.690
origin resource sharing.

00:08:50.690 --> 00:08:52.260
That is not something
we support today.

00:08:52.260 --> 00:08:55.720
So JSONP is the way you will be
accessing data between two

00:08:55.720 --> 00:08:57.040
different sites.

00:08:57.040 --> 00:08:59.460
And then we'll show some
interesting examples around

00:08:59.460 --> 00:09:01.420
other MIME types that may
make sense as well.

00:09:01.420 --> 00:09:04.420
So this should hopefully be
interesting where we download

00:09:04.420 --> 00:09:06.770
vCard information
about a contact.

00:09:06.770 --> 00:09:07.280
OK.

00:09:07.280 --> 00:09:09.310
So those are the four demos
that we will show.

00:09:09.310 --> 00:09:11.860
And we'll go through
it fairly quickly.

00:09:11.860 --> 00:09:13.800
And after the session I'll
make sure all the code is

00:09:13.800 --> 00:09:16.450
available in my GitHub
site as well.

00:09:16.450 --> 00:09:20.850
So let's take a look at the
first example, RSS.

00:09:20.850 --> 00:09:22.160
Go back.

00:09:22.160 --> 00:09:25.190
So I've written the code for a
lot of this already, so just

00:09:25.190 --> 00:09:29.490
to expedite our demos here.

00:09:29.490 --> 00:09:33.080
What we'll show here first
is the RSS example.

00:09:33.080 --> 00:09:35.320
So what this is going
to do is--

00:09:35.320 --> 00:09:37.390
the doGet entry point--

00:09:37.390 --> 00:09:40.840
is all it's gonna do is to
evaluate a template and

00:09:40.840 --> 00:09:43.710
respond back with the content
produced from that template.

00:09:43.710 --> 00:09:45.820
So one thing that might be
curious here that's worthwhile

00:09:45.820 --> 00:09:49.570
noting is that we're using some
of the capabilities of

00:09:49.570 --> 00:09:52.500
HTML Service within
ContentService.

00:09:52.500 --> 00:09:53.540
This is actually
quite powerful.

00:09:53.540 --> 00:09:56.450
So HTML Service has the
templating capabilities.

00:09:56.450 --> 00:09:59.590
There's nothing about it that
restricts it to just HTML.

00:09:59.590 --> 00:10:02.760
So you can actually use the
templating liabilities with

00:10:02.760 --> 00:10:06.040
the angle bracket forceprint
angle bracket question mark

00:10:06.040 --> 00:10:09.420
equals and all these other
variations within the

00:10:09.420 --> 00:10:12.840
ContentService output mode.

00:10:12.840 --> 00:10:14.750
And here's the actual
template.

00:10:14.750 --> 00:10:19.550
So as you can see here, we have
a very simple template.

00:10:19.550 --> 00:10:23.360
RSS is the sort of the starting
tag and then has a

00:10:23.360 --> 00:10:24.480
channel within it.

00:10:24.480 --> 00:10:27.270
So anyone that's seen an RSS
feed, the actual raw RSS feed,

00:10:27.270 --> 00:10:29.790
they'll be able to see
all these details.

00:10:29.790 --> 00:10:32.010
We have a title that's static.

00:10:32.010 --> 00:10:35.070
And then we have something that
enumerates over all the

00:10:35.070 --> 00:10:38.290
different items that I may
have in my response.

00:10:38.290 --> 00:10:40.780
So what are we enumerating
over here?

00:10:40.780 --> 00:10:44.690
In this case, we're doing a
Gmail app call to get all the

00:10:44.690 --> 00:10:47.130
inbox resident and enumerate
over them.

00:10:47.130 --> 00:10:50.010
So this is interesting because
what you could potentially do

00:10:50.010 --> 00:10:53.440
is let's say you have a shared
inbox for a help desk or for

00:10:53.440 --> 00:10:56.990
some sort of a team inbox or
something along those lines,

00:10:56.990 --> 00:10:59.250
you can actually have that
available within your

00:10:59.250 --> 00:11:03.870
organization in a gadget
using Google Sites.

00:11:03.870 --> 00:11:06.180
So let's just quickly take a
look to this code, and then

00:11:06.180 --> 00:11:07.940
I'll show you what
the end result of

00:11:07.940 --> 00:11:09.370
this might look like.

00:11:09.370 --> 00:11:12.260
So I'm going through all the
threads, finding all the

00:11:12.260 --> 00:11:13.900
messages within those threads.

00:11:13.900 --> 00:11:18.110
Then in a single loop, I'm just
finding the first message

00:11:18.110 --> 00:11:22.070
for the subject, getting the
body from the most recent

00:11:22.070 --> 00:11:25.380
email, getting an ID so that I
can potentially link to it in

00:11:25.380 --> 00:11:28.350
the future, and then also a date
so that that's useful for

00:11:28.350 --> 00:11:29.510
RSS readers.

00:11:29.510 --> 00:11:30.080
OK.

00:11:30.080 --> 00:11:32.170
So these tags--

00:11:32.170 --> 00:11:34.530
you may be familiar with
HTML service--

00:11:34.530 --> 00:11:37.190
all it does is essentially
allows us to intersperse

00:11:37.190 --> 00:11:40.180
server-side JavaScript within
our content such that the

00:11:40.180 --> 00:11:45.400
template is executed with the
dynamic data that it produces.

00:11:45.400 --> 00:11:47.690
And then you'll see these
forceprint as well--

00:11:47.690 --> 00:11:49.020
or I should say just print--

00:11:49.020 --> 00:11:51.620
which instead of evaluating
it and then trying to do

00:11:51.620 --> 00:11:55.780
something with that data, it
just returns it as a literal

00:11:55.780 --> 00:11:57.250
after it's evaluated.

00:11:57.250 --> 00:12:01.590
So loop through all my threads
and produce these for the x

00:12:01.590 --> 00:12:03.520
number of threads I may have.

00:12:03.520 --> 00:12:03.730
All right.

00:12:03.730 --> 00:12:05.870
So let's publish this.

00:12:05.870 --> 00:12:06.940
I may already have
it published.

00:12:06.940 --> 00:12:08.750
I'll just copy the URL.

00:12:08.750 --> 00:12:10.260
So this is the URL of this.

00:12:10.260 --> 00:12:12.350
And for now, I'm just gonna
make this available

00:12:12.350 --> 00:12:13.130
anonymously.

00:12:13.130 --> 00:12:16.260
If you're running it within a
Google Apps account, you can

00:12:16.260 --> 00:12:19.150
have it available to just your
domain, which is, I think, a

00:12:19.150 --> 00:12:20.560
great way to deploy
this as well.

00:12:20.560 --> 00:12:22.240
So what I'll do now is go to

00:12:22.240 --> 00:12:26.140
sites.google.com under my account.

00:12:26.140 --> 00:12:32.820
Create a simple site, GDL.

00:12:32.820 --> 00:12:35.820
It'll ask me for this
real quick.

00:12:35.820 --> 00:12:37.070
Create the site.

00:12:41.930 --> 00:12:44.250
Google that site.

00:12:44.250 --> 00:12:45.520
You should put a number.

00:12:45.520 --> 00:12:47.860
That'll help.

00:12:47.860 --> 00:12:48.590
OK.

00:12:48.590 --> 00:12:50.936
Create a site.

00:12:50.936 --> 00:12:51.320
Cool.

00:12:51.320 --> 00:12:54.380
So what this allows us to do
is essentially find a great

00:12:54.380 --> 00:12:56.530
way for me to deploy
this RSS feed.

00:12:56.530 --> 00:12:58.180
Google Reader's another
way you can have this

00:12:58.180 --> 00:12:59.210
available as well.

00:12:59.210 --> 00:13:02.090
But in this scenario, what I'm
getting at is a way you can

00:13:02.090 --> 00:13:04.930
distribute this within
your team internally.

00:13:04.930 --> 00:13:06.655
Go to More Gadgets.

00:13:10.470 --> 00:13:13.450
Here's the gadget
for RSS feed.

00:13:13.450 --> 00:13:14.500
Select it.

00:13:14.500 --> 00:13:15.690
Paste my URL.

00:13:15.690 --> 00:13:19.300
So this is the exact URL that we
deployed the endpoint onto.

00:13:19.300 --> 00:13:20.330
Hit OK.

00:13:20.330 --> 00:13:22.030
Save.

00:13:22.030 --> 00:13:23.040
And there it is.

00:13:23.040 --> 00:13:25.790
So that you could have an
internal site to your team--

00:13:25.790 --> 00:13:28.040
or in this case it's
a public site--

00:13:28.040 --> 00:13:31.480
where an email inbox is
being read-- so let me

00:13:31.480 --> 00:13:34.010
go back to my email--

00:13:34.010 --> 00:13:37.940
an email inbox is being read
and displayed as a very

00:13:37.940 --> 00:13:39.510
simplistic RSS feed.

00:13:39.510 --> 00:13:41.850
So it's a great way to
kind of have your--

00:13:41.850 --> 00:13:46.160
let's say you have an inbox for
marketing news, you may

00:13:46.160 --> 00:13:48.740
have an inbox for support
desk, things like that.

00:13:48.740 --> 00:13:51.400
You're able to actually have
that surface up in an

00:13:51.400 --> 00:13:54.720
interesting manner in a site or
other RSS gadgets that you

00:13:54.720 --> 00:13:55.830
may be using.

00:13:55.830 --> 00:13:59.130
So this is an example where
Apps Script allows you to

00:13:59.130 --> 00:14:03.720
deploy content, such as RSS, in
a secure manner within your

00:14:03.720 --> 00:14:04.940
organization.

00:14:04.940 --> 00:14:05.900
Great.

00:14:05.900 --> 00:14:07.610
So now let's do something
a little bit different.

00:14:07.610 --> 00:14:11.410
So let's actually dive into
using-- so in this case it's

00:14:11.410 --> 00:14:12.440
not quite an API.

00:14:12.440 --> 00:14:16.030
It's really another deployment
mechanism, like HTML.

00:14:16.030 --> 00:14:18.010
It happens to be under
a ContentService.

00:14:18.010 --> 00:14:21.140
RSS is a type of XML protocol.

00:14:21.140 --> 00:14:24.170
So what we'll do now is actually
pretend as if we have

00:14:24.170 --> 00:14:27.780
another application that is
trying to access data from a

00:14:27.780 --> 00:14:30.360
spreadsheet or another internal
mechanism like a

00:14:30.360 --> 00:14:32.980
contact database, something
along those lines were Apps

00:14:32.980 --> 00:14:35.480
Script is great at getting at
that data very quickly.

00:14:35.480 --> 00:14:38.000
Couple of lines of code, you're
able to grab your

00:14:38.000 --> 00:14:38.830
spreadsheet data.

00:14:38.830 --> 00:14:41.620
Couple lines of code, you're
able to grab data from your

00:14:41.620 --> 00:14:44.052
address book and things
like that, right.

00:14:44.052 --> 00:14:46.520
So what we're gonna do is we're
gonna actually pretend

00:14:46.520 --> 00:14:51.240
as if we have a very simple
inventory database.

00:14:51.240 --> 00:14:54.830
So, IT help desk is a simple
scenario that I

00:14:54.830 --> 00:14:56.190
came up with here.

00:14:56.190 --> 00:14:58.880
Let's say that I am working
at a small department.

00:14:58.880 --> 00:15:01.920
And we have an inventory of a
few things, Chromebooks and

00:15:01.920 --> 00:15:03.910
MacBook Airs and
Dell monitors.

00:15:03.910 --> 00:15:07.750
I just made up a few SKUs and
quantities and whatnot.

00:15:07.750 --> 00:15:12.220
And the goal is to expose this
data in a nice API such that I

00:15:12.220 --> 00:15:14.500
could potentially consume it
from, let's say, an iPhone

00:15:14.500 --> 00:15:15.580
application.

00:15:15.580 --> 00:15:19.910
Very similar capabilities
apply to do Android.

00:15:19.910 --> 00:15:22.770
You may have an App Engine
application calling the same

00:15:22.770 --> 00:15:25.530
API from URL fetch on
the server side.

00:15:25.530 --> 00:15:29.670
Anywhere where you can call JSON
across domain boundaries,

00:15:29.670 --> 00:15:31.660
this is a great way
to expose that.

00:15:31.660 --> 00:15:33.650
What I also have here--
excuse me--

00:15:33.650 --> 00:15:37.760
what I also have here is a
simple script, which uses a

00:15:37.760 --> 00:15:39.950
lot of the templates that we
provide today, which allows

00:15:39.950 --> 00:15:42.610
you to turn a row
into an object.

00:15:42.610 --> 00:15:44.860
So I just kind of copied
that exact template.

00:15:44.860 --> 00:15:47.660
So all these functions should
look very familiar.

00:15:47.660 --> 00:15:51.260
Get rows data, get objects,
normalize headers, this is

00:15:51.260 --> 00:15:55.130
exactly from the template
that we provide.

00:15:55.130 --> 00:15:56.780
And what I've done is
basically open the

00:15:56.780 --> 00:16:00.850
spreadsheet, get the range that
I care for, get all the

00:16:00.850 --> 00:16:05.630
rows as an object, and then
just output that in a very

00:16:05.630 --> 00:16:09.390
simple call with the
MIME type of JSON.

00:16:09.390 --> 00:16:09.920
OK.

00:16:09.920 --> 00:16:12.825
So we'll dissect this code in
a little bit, but let's kind

00:16:12.825 --> 00:16:13.980
of see what's on the
client side.

00:16:13.980 --> 00:16:16.500
So what we've done
so far is an API.

00:16:16.500 --> 00:16:19.630
And we'll just take a look at
what the API looks like.

00:16:19.630 --> 00:16:25.190
I just copy this and paste
it into a window.

00:16:25.190 --> 00:16:28.020
You'll see that it's
just JSON.

00:16:28.020 --> 00:16:28.250
OK.

00:16:28.250 --> 00:16:34.170
It's an array of objects, items
within a larger array.

00:16:34.170 --> 00:16:38.120
So now let's go to the
client-side code.

00:16:38.120 --> 00:16:38.990
What I have here--

00:16:38.990 --> 00:16:42.250
I'm by no means a iOS developer,
but just whip

00:16:42.250 --> 00:16:43.900
something quickly together.

00:16:43.900 --> 00:16:48.330
What I have here is a very
simple application that has a

00:16:48.330 --> 00:16:49.530
table view.

00:16:49.530 --> 00:16:52.760
Hopefully that font
is decent enough.

00:16:52.760 --> 00:16:57.120
All I have here is a simple
table view which is populated

00:16:57.120 --> 00:16:59.740
based on a URL call.

00:16:59.740 --> 00:17:02.640
It is parsed as a JSON object.

00:17:02.640 --> 00:17:08.270
And then I have a table cell
for the x number of objects

00:17:08.270 --> 00:17:09.339
that are returned.

00:17:09.339 --> 00:17:12.480
And I'm just mapping the item
name and the quantity into it.

00:17:12.480 --> 00:17:13.230
OK.

00:17:13.230 --> 00:17:14.480
So let's run this.

00:17:17.430 --> 00:17:21.200
So this will fire up
the simulator.

00:17:21.200 --> 00:17:22.690
Sitting over there, I think.

00:17:25.762 --> 00:17:27.220
May take a second.

00:17:27.220 --> 00:17:30.140
There it goes.

00:17:30.140 --> 00:17:32.390
And there's the data, right.

00:17:32.390 --> 00:17:34.000
Very simple API.

00:17:34.000 --> 00:17:39.320
And I'm able to see all the
items I have in my inventory

00:17:39.320 --> 00:17:41.270
spreadsheet and the
current quantity.

00:17:41.270 --> 00:17:43.400
So let's do a quick test.

00:17:43.400 --> 00:17:47.890
So let me actually go
into my spreadsheet.

00:17:47.890 --> 00:17:51.540
And I'll say let me
insert a new row.

00:17:51.540 --> 00:17:53.323
I'll say I got some speakers--

00:17:56.910 --> 00:18:02.420
three speakers, no color, and
Scott owns those as well.

00:18:02.420 --> 00:18:05.605
And I'll also say five
of my headphones

00:18:05.605 --> 00:18:07.110
have been given out--

00:18:07.110 --> 00:18:08.980
or only five of them
are remaining.

00:18:08.980 --> 00:18:09.480
OK.

00:18:09.480 --> 00:18:10.100
No need to save.

00:18:10.100 --> 00:18:14.270
It's all in the cloud, great
feature of spreadsheets.

00:18:14.270 --> 00:18:17.610
And I'm gonna hit the
Refresh button.

00:18:17.610 --> 00:18:21.290
And you can see that this native
application was able to

00:18:21.290 --> 00:18:26.050
grab that data very quickly
and reflect that in a nice

00:18:26.050 --> 00:18:27.540
mobile-friendly UI.

00:18:27.540 --> 00:18:29.770
So you have the speakers
that are now available.

00:18:29.770 --> 00:18:31.750
The headphones have
been decremented.

00:18:31.750 --> 00:18:34.710
Very simple application, but if
you can imagine since this

00:18:34.710 --> 00:18:38.070
is a native application, you
can have the offline cache

00:18:38.070 --> 00:18:40.800
enabled, you can have this
available on an Android phone,

00:18:40.800 --> 00:18:42.000
and so on as well.

00:18:42.000 --> 00:18:44.580
And we'll talk about Android
in a lot more detail in

00:18:44.580 --> 00:18:46.570
another GDL.

00:18:46.570 --> 00:18:47.550
So that's the idea here.

00:18:47.550 --> 00:18:51.710
So, you're able to expose data
within your spreadsheets as a

00:18:51.710 --> 00:18:54.910
JSON API, which makes it
incredibly easy for other

00:18:54.910 --> 00:18:58.260
third-party applications to
parse it and then stick it

00:18:58.260 --> 00:19:00.980
into a nice UI that is
applicable to the front end.

00:19:00.980 --> 00:19:05.170
So this is what I was mentioning
when I talked about

00:19:05.170 --> 00:19:08.900
exposing your data via an API
and build that API with Apps

00:19:08.900 --> 00:19:10.680
Script itself.

00:19:10.680 --> 00:19:11.230
Great.

00:19:11.230 --> 00:19:14.210
So, one of the things that
a lot of the seasoned web

00:19:14.210 --> 00:19:17.010
developers have probably already
gathered is that you

00:19:17.010 --> 00:19:20.710
can just call JSON APIs
across domains.

00:19:20.710 --> 00:19:23.500
So this is something I
mentioned briefly.

00:19:23.500 --> 00:19:27.470
So let's say you have a web app
running within App Engine

00:19:27.470 --> 00:19:32.220
or some other hosting service,
that domain will not be

00:19:32.220 --> 00:19:33.920
script.google.com.

00:19:33.920 --> 00:19:38.950
You cannot make cross-origin
JSON calls using AJAX.

00:19:38.950 --> 00:19:41.460
There's a new protocol that's
coming out called CORS,

00:19:41.460 --> 00:19:43.740
C-O-R-S. We're looking at it.

00:19:43.740 --> 00:19:47.020
And hopefully we'll have some
more investigation that we'll

00:19:47.020 --> 00:19:49.380
do on that front and
give you an update.

00:19:49.380 --> 00:19:52.520
But for now, the way you have
that cross communicate between

00:19:52.520 --> 00:19:56.300
those two different domains is
a technology called JSONP.

00:19:56.300 --> 00:19:59.190
JSONP is basically
JSON padding.

00:19:59.190 --> 00:20:01.910
And the padding is basically the
callback function that is

00:20:01.910 --> 00:20:05.520
executed on the client side when
the response comes back.

00:20:05.520 --> 00:20:10.640
So that's the way you would
use an API built on Apps

00:20:10.640 --> 00:20:13.450
Script within a browser, so
within a web UI, if you're

00:20:13.450 --> 00:20:14.440
building that.

00:20:14.440 --> 00:20:17.050
So let's go take a look at what
that might look like.

00:20:17.050 --> 00:20:21.210
So, I kept this one
very simple.

00:20:21.210 --> 00:20:24.530
So let's say we have some data,
in this case the result

00:20:24.530 --> 00:20:27.290
is 'hello world'.

00:20:27.290 --> 00:20:28.470
This could be an object.

00:20:28.470 --> 00:20:30.950
This could be data
from your Gmail.

00:20:30.950 --> 00:20:34.710
This could be data from a drive,
file, what have you.

00:20:34.710 --> 00:20:37.420
In this case I kept it very
simple and static.

00:20:37.420 --> 00:20:40.610
And what's interesting here--
let me break this up a little

00:20:40.610 --> 00:20:45.110
bit, copy this out,
so let's say var

00:20:45.110 --> 00:20:47.830
content equal to this--

00:20:47.830 --> 00:20:53.440
is we're not just returning
the content directly.

00:20:53.440 --> 00:20:57.330
We're also taking in a prefix
from the request and padding

00:20:57.330 --> 00:20:58.770
that response with that.

00:20:58.770 --> 00:21:01.710
So this parentheses essentially
says when this

00:21:01.710 --> 00:21:04.910
returns, treat this as
JavaScript and execute it.

00:21:04.910 --> 00:21:07.990
So jQuery and a lot of other
libraries know how

00:21:07.990 --> 00:21:08.870
to deal with this.

00:21:08.870 --> 00:21:10.710
And we'll show that
in a second.

00:21:10.710 --> 00:21:14.080
And then once I've done this,
once the content is decorated,

00:21:14.080 --> 00:21:16.740
I just return it as
a JSON MIME type.

00:21:16.740 --> 00:21:17.200
OK.

00:21:17.200 --> 00:21:18.120
So it's still JSON.

00:21:18.120 --> 00:21:20.490
There's no MIME type
for JSONP.

00:21:20.490 --> 00:21:23.610
And just while I'm here, I'll
also note that this MIME type

00:21:23.610 --> 00:21:25.530
class has a really nice
auto-complete.

00:21:25.530 --> 00:21:29.180
So you can just say
contentservice.mimetype and it

00:21:29.180 --> 00:21:31.260
gives you all the different
capabilities that you have.

00:21:31.260 --> 00:21:32.860
The default is text.

00:21:32.860 --> 00:21:35.770
We already showed how we
can use RSS and JSON.

00:21:35.770 --> 00:21:37.900
For JSONP, you stick
with JSON.

00:21:37.900 --> 00:21:41.490
And we'll show some other
examples as well with text.

00:21:41.490 --> 00:21:42.220
OK.

00:21:42.220 --> 00:21:42.490
Great.

00:21:42.490 --> 00:21:45.090
So, I will save this.

00:21:45.090 --> 00:21:46.580
I already have a deployed
version, so I'll

00:21:46.580 --> 00:21:47.540
just play with that.

00:21:47.540 --> 00:21:50.100
So in order to show this, I need
to have a UI running on

00:21:50.100 --> 00:21:51.440
another domain.

00:21:51.440 --> 00:21:56.010
And for sake of simplicity, I
use a tool called jsFiddle.

00:21:56.010 --> 00:21:58.140
Lot of you may have
heard of this.

00:21:58.140 --> 00:21:59.310
Very simple tool.

00:21:59.310 --> 00:22:01.040
So I'm just gonna
get rid of this.

00:22:01.040 --> 00:22:06.880
And so, all that allows you to
do is paste in some HTML, see

00:22:06.880 --> 00:22:09.940
the preview, and you can inject
it with JavaScript and

00:22:09.940 --> 00:22:12.790
CSS that you may want to bring
in to really quickly test it.

00:22:12.790 --> 00:22:15.360
So what they do is when you
hit Save, it's actually

00:22:15.360 --> 00:22:17.590
running it off of
their servers.

00:22:17.590 --> 00:22:19.830
And you're able to very quickly
test your code without

00:22:19.830 --> 00:22:21.880
having to spin up a server
to host this.

00:22:21.880 --> 00:22:25.070
And it's all available
on any browser.

00:22:25.070 --> 00:22:26.955
So, jsFiddle.net,
a great tool.

00:22:26.955 --> 00:22:29.710
You don't even have to login
to test the basic stuff.

00:22:29.710 --> 00:22:32.120
So what I'm gonna do-- and you
can see that I'm loading in

00:22:32.120 --> 00:22:34.430
jQuery here.

00:22:34.430 --> 00:22:39.440
And what I have is a very simple
header called Welcome.

00:22:39.440 --> 00:22:44.070
And I'm gonna paste in some
interesting JavaScript.

00:22:44.070 --> 00:22:46.010
And let me zoom in
here just so--

00:22:46.010 --> 00:22:48.780
I'm zooming on this side.

00:22:48.780 --> 00:22:50.365
I'll zoom in here.

00:22:50.365 --> 00:22:50.790
OK.

00:22:50.790 --> 00:22:54.460
So all I have here is a jQuery
function that says when the

00:22:54.460 --> 00:22:58.200
document is ready, go
call this service.

00:22:58.200 --> 00:23:02.600
And in jQuery, the way you say
it's a JSONP is this prefix

00:23:02.600 --> 00:23:04.100
equal the question mark.

00:23:04.100 --> 00:23:06.130
If your URL ends with a question
mark, that's how you

00:23:06.130 --> 00:23:09.510
tell jQuery that it's
a JSONP call.

00:23:09.510 --> 00:23:12.090
And just make that with
the padding wrapper.

00:23:12.090 --> 00:23:13.990
And jQuery takes care
of all that stuff.

00:23:13.990 --> 00:23:17.230
It actually makes up a unique
padding server call-- a

00:23:17.230 --> 00:23:20.930
padding method name calls with
that-- and then also ensures

00:23:20.930 --> 00:23:22.940
that things are not cached
inappropriately, and all sorts

00:23:22.940 --> 00:23:24.380
of good stuff.

00:23:24.380 --> 00:23:28.130
And then you don't even have
to describe a separate

00:23:28.130 --> 00:23:28.660
callback function.

00:23:28.660 --> 00:23:31.230
You can just say, OK, when it's
back, just give me the

00:23:31.230 --> 00:23:33.080
data, and I'll go with it.

00:23:33.080 --> 00:23:37.330
So it actually unpacks the data
such that it only gets

00:23:37.330 --> 00:23:39.530
the results and not the
callback function.

00:23:39.530 --> 00:23:41.570
So what do I mean by that?

00:23:41.570 --> 00:23:44.940
So if you can see here, we're
returning this sort of

00:23:44.940 --> 00:23:46.730
padding around it.

00:23:46.730 --> 00:23:49.070
And jQuery's really good
at just getting

00:23:49.070 --> 00:23:50.190
to the actual results.

00:23:50.190 --> 00:23:52.310
So let's actually run this.

00:23:52.310 --> 00:23:54.750
And you can see that thing
because of the redirect,

00:23:54.750 --> 00:23:55.740
things get a little funky.

00:23:55.740 --> 00:23:57.120
It shows it twice.

00:23:57.120 --> 00:23:59.050
Might be a little issue
with jsFiddle.

00:23:59.050 --> 00:24:00.090
But you get the idea.

00:24:00.090 --> 00:24:03.700
You're able to very quickly
grab data from Google Apps

00:24:03.700 --> 00:24:06.600
Script that's outputting
JSONP and use it in

00:24:06.600 --> 00:24:07.840
your own web apps.

00:24:07.840 --> 00:24:08.420
OK.

00:24:08.420 --> 00:24:12.340
So great way to add a little
bit more dynamicness, a bit

00:24:12.340 --> 00:24:14.930
more interactiveness
to your web apps

00:24:14.930 --> 00:24:16.880
using Google Apps Script.

00:24:16.880 --> 00:24:17.840
Great.

00:24:17.840 --> 00:24:19.700
So far we've talked about RSS.

00:24:19.700 --> 00:24:25.520
We've talked about JSON to use
in a mobile app, JSONP to use

00:24:25.520 --> 00:24:26.550
in a web app.

00:24:26.550 --> 00:24:30.060
And we'll actually show one
last thing around vCards.

00:24:30.060 --> 00:24:33.280
vCards are basically a protocol
that allows you to

00:24:33.280 --> 00:24:36.320
export contacts that are
friendly for address book

00:24:36.320 --> 00:24:37.360
applications.

00:24:37.360 --> 00:24:43.870
So, an example is the one that
comes with a Mac OS.

00:24:43.870 --> 00:24:47.160
The contacts application gives
you a really nice directory

00:24:47.160 --> 00:24:48.410
style look.

00:24:48.410 --> 00:24:50.590
Windows has something as well.

00:24:50.590 --> 00:24:53.840
vCard is a really interesting
export option for a lot of

00:24:53.840 --> 00:24:56.990
different directory and contact
management tools.

00:24:56.990 --> 00:25:00.880
So what I've done is what if
we have a very simple--

00:25:00.880 --> 00:25:04.950
let me go back to
find this guy.

00:25:04.950 --> 00:25:05.300
There it is.

00:25:05.300 --> 00:25:05.700
OK.

00:25:05.700 --> 00:25:06.210
Cool.

00:25:06.210 --> 00:25:12.490
So, what I have is in my inbox,
I have a contact.

00:25:12.490 --> 00:25:15.200
I wasn't feeling creative
so I just added myself.

00:25:15.200 --> 00:25:18.660
So you can just see I have one
contact with my email address.

00:25:18.660 --> 00:25:21.030
And I made a phone number
and whatnot.

00:25:21.030 --> 00:25:26.180
And in my example, what I'm
gonna do is grab a contact.

00:25:26.180 --> 00:25:28.960
Again, I'm gonna do the
evaluation of the template.

00:25:28.960 --> 00:25:31.560
But in this case, I'm going to
bind that template with the

00:25:31.560 --> 00:25:35.800
contact object, get the final
output, and then return it.

00:25:35.800 --> 00:25:40.790
But don't just return it, make
it available through a file--

00:25:40.790 --> 00:25:43.470
download as file method call
and give it a name.

00:25:43.470 --> 00:25:47.080
There is actually a hidden gem
within the API which allows

00:25:47.080 --> 00:25:50.030
you to take any content you
have and give it a content

00:25:50.030 --> 00:25:54.030
disposition header which makes
the browser say, OK, it's told

00:25:54.030 --> 00:25:56.370
me that it wants to be available
in the file system,

00:25:56.370 --> 00:25:57.750
the host machine.

00:25:57.750 --> 00:26:00.250
Rather than the browser trying
to render it, it becomes a

00:26:00.250 --> 00:26:04.360
downloadable file and the
normal operating system

00:26:04.360 --> 00:26:05.610
invocation procedures kick in.

00:26:05.610 --> 00:26:07.190
So it's great.

00:26:07.190 --> 00:26:09.250
So it really allows you do some
pretty interesting things

00:26:09.250 --> 00:26:14.200
with things like CSVs and
other interesting output

00:26:14.200 --> 00:26:18.560
formats that you can cook
up pretty easily.

00:26:18.560 --> 00:26:21.350
So let's take a look at what
a vCard looks like.

00:26:21.350 --> 00:26:23.500
If you just go to Wikipedia,
lot of good

00:26:23.500 --> 00:26:25.260
details on the protocol.

00:26:25.260 --> 00:26:30.360
It's actually pretty sparse as
far as a protocol might go.

00:26:30.360 --> 00:26:34.370
It just says begin vCard, a
bunch of name value pairs with

00:26:34.370 --> 00:26:38.370
something separated by double
semicolons, and end vCard.

00:26:38.370 --> 00:26:40.130
So, it's not like XML.

00:26:40.130 --> 00:26:41.280
It's not like JSON.

00:26:41.280 --> 00:26:43.750
It's its own little format.

00:26:43.750 --> 00:26:46.750
And it's something that, I
think, has become standard

00:26:46.750 --> 00:26:48.000
over the years.

00:26:48.000 --> 00:26:48.540
OK.

00:26:48.540 --> 00:26:51.870
So, what I've done is
basically copied

00:26:51.870 --> 00:26:53.820
something like that.

00:26:53.820 --> 00:26:57.120
And again, I've used the
template mechanism.

00:26:57.120 --> 00:27:00.730
So I felt lazy and just kind
of punched in the same

00:27:00.730 --> 00:27:02.730
property in a couple
different fields.

00:27:02.730 --> 00:27:05.040
But you can see that you can
really populate a lot of

00:27:05.040 --> 00:27:07.610
different fields
pretty easily.

00:27:07.610 --> 00:27:12.760
And again, this contact today,
I'm just picking up one that

00:27:12.760 --> 00:27:13.700
is hard coded.

00:27:13.700 --> 00:27:16.350
You can theoretically have
something where an email

00:27:16.350 --> 00:27:19.720
address is passed in through the
URL, and you're actually

00:27:19.720 --> 00:27:21.530
picking that up individually
and making that

00:27:21.530 --> 00:27:22.810
available as a vCard.

00:27:22.810 --> 00:27:23.390
OK.

00:27:23.390 --> 00:27:27.590
So, I make this contact object
that I read through the Google

00:27:27.590 --> 00:27:30.030
Apps Script code base available
into the template.

00:27:30.030 --> 00:27:31.650
That's what this line does.

00:27:31.650 --> 00:27:34.180
That means I can do
contact.fullname here.

00:27:34.180 --> 00:27:36.670
And ultimately, I'll get
the output that I want.

00:27:36.670 --> 00:27:37.580
So let's take a look.

00:27:37.580 --> 00:27:43.010
If I go to Publish, Deploy as
web app, copy this guy.

00:27:43.010 --> 00:27:45.870
And just to kind of show you,
there is just one Arun

00:27:45.870 --> 00:27:46.590
Nagarajan in here.

00:27:46.590 --> 00:27:51.170
That's sort of the default one
that Apple adds into the

00:27:51.170 --> 00:27:52.290
operating system.

00:27:52.290 --> 00:27:53.770
So I'm gonna call this URL.

00:27:53.770 --> 00:27:55.350
There's no UI to this.

00:27:55.350 --> 00:27:58.240
Imagine this as a service
invocation where you may pass

00:27:58.240 --> 00:28:00.450
in a parameter into it.

00:28:00.450 --> 00:28:02.870
In this case, I just kept
it really simple.

00:28:02.870 --> 00:28:04.340
I call it.

00:28:04.340 --> 00:28:06.840
Again, no UI is shown.

00:28:06.840 --> 00:28:08.910
Chrome shows me that there's
something available that I

00:28:08.910 --> 00:28:09.860
should click on.

00:28:09.860 --> 00:28:10.710
Probably hard to see.

00:28:10.710 --> 00:28:15.090
It says contactcar.vcf And that
name, again, comes from

00:28:15.090 --> 00:28:16.410
what I specified here.

00:28:16.410 --> 00:28:17.970
I could have made this
a bit more dynamic.

00:28:17.970 --> 00:28:19.220
I could have just used
arunnagarajan.vcf.

00:28:21.790 --> 00:28:25.370
And going back here, if I click
on this, again, Chrome

00:28:25.370 --> 00:28:26.535
doesn't do anything
at that point.

00:28:26.535 --> 00:28:30.540
It says you said it was a
download as file call, so the

00:28:30.540 --> 00:28:32.330
Apple address book comes in.

00:28:32.330 --> 00:28:34.110
I add this contact.

00:28:34.110 --> 00:28:35.740
And there it is.

00:28:35.740 --> 00:28:37.990
All the different
things came in.

00:28:37.990 --> 00:28:41.190
If I have some synchronization
rules with it and on my mobile

00:28:41.190 --> 00:28:43.370
device, this will
work seamlessly.

00:28:43.370 --> 00:28:47.550
So really allows you to provide
data that's sometimes

00:28:47.550 --> 00:28:51.460
locked in behind Google
Apps such as contacts

00:28:51.460 --> 00:28:52.820
and calendar entries.

00:28:52.820 --> 00:28:54.940
vCal is another popular
format.

00:28:54.940 --> 00:28:57.480
So ContentService allows you to
provide this sort of export

00:28:57.480 --> 00:29:00.690
facility when that makes sense
for your application.

00:29:00.690 --> 00:29:03.630
So, in this example I just
picked vCard because it was

00:29:03.630 --> 00:29:06.350
simple enough, and it made
sense on my laptop.

00:29:06.350 --> 00:29:10.980
But vCal is a really popular
extension type for--

00:29:10.980 --> 00:29:13.860
or ICS is another one that
Outlook uses, I think.

00:29:13.860 --> 00:29:17.840
So, really very easy for you
to build your own little

00:29:17.840 --> 00:29:19.990
export and interaction mechanism
to all these

00:29:19.990 --> 00:29:22.890
different applications using
content service.

00:29:22.890 --> 00:29:25.750
So hope you found this
interesting.

00:29:25.750 --> 00:29:28.290
And I'll post all this code
up on GitHub very soon.

00:29:28.290 --> 00:29:31.130
And hope to see a lot of
interesting applications that

00:29:31.130 --> 00:29:33.670
you may be building with
ContentService.

00:29:33.670 --> 00:29:34.920
Thank you very much.

