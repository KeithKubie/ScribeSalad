WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
We're going to look at the testing a couple of bitwise functions.

00:00:03.000 --> 00:00:05.000
What we're going to want to do is write two Python functions called

00:00:05.000 --> 00:00:08.000
high common bits and low common bits.

00:00:08.000 --> 00:00:13.000
Given two inputs (a) and (b) which are integers that have the same size, let's say 32 or 64 bit integers.

00:00:13.000 --> 00:00:16.000
Return integer with the same bit width with the higher the bits

00:00:16.000 --> 00:00:19.000
that the two inputs have in common are included in the return value.

00:00:19.000 --> 00:00:22.000
The first bit where the two inputs differ at a bit position

00:00:22.000 --> 00:00:26.000
starting from the high end is set and all remaining bits are cleared.

00:00:26.000 --> 00:00:28.000
Okay, so that's probably completely unclear.

00:00:28.000 --> 00:00:31.000
This is the list of requirements, so we're going to do an example.

00:00:31.000 --> 00:00:38.000
If (a) is 10101 and (b) is 10011, then the output is going to be

00:00:38.000 --> 00:00:40.000
the higher bits that they have in common.

00:00:40.000 --> 00:00:44.000
The 1 is common in sudden both inputs, so we return that.

00:00:44.000 --> 00:00:46.000
Zero is in common, so we've copy that to the output.

00:00:46.000 --> 00:00:50.000
This bit is different. The third bit is different so we want to set that bit and clear all remaining bits.

00:00:50.000 --> 00:00:54.000
Hopefully, that's good. So we copied bits that are in common until we find a difference.

00:00:54.000 --> 00:00:56.000
We set that bit and everything else is clear.

00:00:56.000 --> 00:00:59.000
We also want to implement a function called low common bits,

00:00:59.000 --> 00:01:02.000
that does the same thing except starting from the bottom end.

00:01:02.000 --> 00:01:04.000
We take the same example and we do the low common bits.

00:01:04.000 --> 00:01:08.000
Let's start at the bottom and see that 1 is common, so we copy it between the two.

00:01:08.000 --> 00:01:12.000
The next bit, the second bit from the bottom, is different so we set that bit and clear all the rest.

00:01:12.000 --> 00:01:15.000
And so what you might be saying to yourself at this point is, this functions look really silly.

00:01:15.000 --> 00:01:18.000
But this look like a contrived example that a professor would come up with

00:01:18.000 --> 00:01:20.000
just to mess with the students but does not actually the case.

00:01:20.000 --> 00:01:23.000
It's functions come from an optimized trie implementation.

00:01:23.000 --> 00:01:28.000
What a trie is, it's a kind of a balanced ordered tree, not incredibly unlike the splay tree

00:01:28.000 --> 00:01:30.000
that we already looked at and some of it's branch,

00:01:30.000 --> 00:01:33.000
but tries rely on bitwise operations to find the descendants of nodes

00:01:33.000 --> 00:01:36.000
in order to get really high performance and really low-memory footprints.

