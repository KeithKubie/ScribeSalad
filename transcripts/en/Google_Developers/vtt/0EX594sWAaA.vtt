WEBVTT
Kind: captions
Language: en

00:00:00.382 --> 00:00:02.090
WIM LELER: Welcome to
the Developer Show.

00:00:02.090 --> 00:00:02.910
I'm Wim Leler.

00:00:02.910 --> 00:00:05.610
We're here at Dart
Conf in Los Angeles.

00:00:05.610 --> 00:00:06.714
And this is Jacob Richman.

00:00:06.714 --> 00:00:08.130
JACOB RICHMAN: Hi,
I'm a developer

00:00:08.130 --> 00:00:09.450
on the Dart team in Seattle.

00:00:09.450 --> 00:00:11.834
And I focus on developer
tools for Flutter.

00:00:11.834 --> 00:00:14.000
WIM LELER: So can you tell
us what the inspector is?

00:00:14.000 --> 00:00:15.150
What does it do?

00:00:15.150 --> 00:00:16.691
JACOB RICHMAN: Yeah,
so the inspector

00:00:16.691 --> 00:00:18.900
lets you answer
questions about how

00:00:18.900 --> 00:00:20.960
your application is working.

00:00:20.960 --> 00:00:22.430
It lets you explore
an application

00:00:22.430 --> 00:00:24.330
and really see how
it all ties together,

00:00:24.330 --> 00:00:28.650
how it connects from the
device to the widget tree,

00:00:28.650 --> 00:00:33.319
to your source code, and makes
all those connections really

00:00:33.319 --> 00:00:35.610
quick and easy to follow and
something that we can only

00:00:35.610 --> 00:00:38.539
do because of how
Flutter is structured.

00:00:38.539 --> 00:00:40.080
WIM LELER: So what
was the motivation

00:00:40.080 --> 00:00:41.520
for doing the inspector?

00:00:41.520 --> 00:00:43.080
JACOB RICHMAN: So
the motivation is,

00:00:43.080 --> 00:00:46.830
because Flutter handles
the whole UI stack,

00:00:46.830 --> 00:00:49.960
from the widgets to
rendering, on its own,

00:00:49.960 --> 00:00:53.910
rather than relying on native
widgets in iOS or Android,

00:00:53.910 --> 00:00:56.440
we really needed to provide
our own inspector tool,

00:00:56.440 --> 00:00:58.230
because we can't
depend on native tools

00:00:58.230 --> 00:01:01.094
on the platform working for us.

00:01:01.094 --> 00:01:03.510
WIM LELER: So can you tell us
about some of the challenges

00:01:03.510 --> 00:01:04.562
working on the inspector?

00:01:04.562 --> 00:01:06.270
JACOB RICHMAN: So one
of the challenges--

00:01:06.270 --> 00:01:08.970
all your UI is to find
in Dart code instead

00:01:08.970 --> 00:01:11.334
of some intermediate
markup language.

00:01:11.334 --> 00:01:13.500
So this means to write a
really good inspector tool,

00:01:13.500 --> 00:01:15.890
we have to really
understand Dart code.

00:01:15.890 --> 00:01:17.580
We can't get by
just understanding

00:01:17.580 --> 00:01:20.325
some much simpler SML format.

00:01:20.325 --> 00:01:22.950
WIM LELER: So can you talk about
the characteristics of Flutter

00:01:22.950 --> 00:01:26.082
that made it different to
work on this than other tools?

00:01:26.082 --> 00:01:28.290
JACOB RICHMAN: So in Flutter,
everything is a widget.

00:01:28.290 --> 00:01:30.150
You have this big
tree of widgets

00:01:30.150 --> 00:01:32.430
that describe your application.

00:01:32.430 --> 00:01:36.390
And that's great for us, because
it means most of the questions

00:01:36.390 --> 00:01:39.600
you care about as a
user using the inspector

00:01:39.600 --> 00:01:41.280
are answered by
the widgets tree.

00:01:41.280 --> 00:01:44.130
But it means we also have
to be really smart about how

00:01:44.130 --> 00:01:46.710
we display the tree and how
we let you navigate back

00:01:46.710 --> 00:01:49.770
and forth between the device and
the widget tree in your source

00:01:49.770 --> 00:01:52.260
code, because otherwise it
could be too difficult for you

00:01:52.260 --> 00:01:53.826
to find where you want to go.

00:01:53.826 --> 00:01:55.950
WIM LELER: So what were
some of the reasons for not

00:01:55.950 --> 00:01:57.870
using more traditional
tools, like what

00:01:57.870 --> 00:01:59.610
are used on Android and iOS?

00:01:59.610 --> 00:02:02.190
JACOB RICHMAN: So the normal
tools in Android and iOS

00:02:02.190 --> 00:02:04.860
couldn't really tell you much
useful about your application.

00:02:04.860 --> 00:02:08.430
They'd just be able to say,
oh, there's one big component.

00:02:08.430 --> 00:02:09.780
That's your entire application.

00:02:09.780 --> 00:02:12.690
That's really all they know,
because Flutter is fully

00:02:12.690 --> 00:02:15.180
owning the whole
UI stack, instead

00:02:15.180 --> 00:02:19.740
of trying to provide polyfills
over top of native components

00:02:19.740 --> 00:02:21.550
on one platform or another.

00:02:21.550 --> 00:02:23.860
WIM LELER: So when is this
going to be available?

00:02:23.860 --> 00:02:25.560
JACOB RICHMAN: So
you can use it now

00:02:25.560 --> 00:02:28.260
in the latest version of
IntelliJ, the IntelliJ Dart

00:02:28.260 --> 00:02:29.774
plug-in that just was released.

00:02:29.774 --> 00:02:31.440
And some of the
features we talked about

00:02:31.440 --> 00:02:33.660
will require Dart
2.0, because they're

00:02:33.660 --> 00:02:37.830
ones where we've taken advantage
of new features in Dart 2.0

00:02:37.830 --> 00:02:40.950
to really be able to track
where your widgets were created,

00:02:40.950 --> 00:02:42.600
which provides some
of the really deep

00:02:42.600 --> 00:02:45.450
linking back and forth between
the widget tree and your source

00:02:45.450 --> 00:02:46.170
code.

00:02:46.170 --> 00:02:47.580
WIM LELER: Thank you very
much for talking to us.

00:02:47.580 --> 00:02:48.750
This was very enjoyable.

00:02:48.750 --> 00:02:49.791
JACOB RICHMAN: Thank you.

00:02:49.791 --> 00:02:51.710
WIM LELER: And thank
you for watching.

