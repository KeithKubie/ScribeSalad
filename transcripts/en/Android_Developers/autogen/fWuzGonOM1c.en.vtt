WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.450
 
with the launch of jetpack and the KTX

00:00:02.450 --> 00:00:02.460
with the launch of jetpack and the KTX
 

00:00:02.460 --> 00:00:04.309
with the launch of jetpack and the KTX
libraries we've made Android development

00:00:04.309 --> 00:00:04.319
libraries we've made Android development
 

00:00:04.319 --> 00:00:07.519
libraries we've made Android development
even sweeter in Collin but our haps rely

00:00:07.519 --> 00:00:07.529
even sweeter in Collin but our haps rely
 

00:00:07.529 --> 00:00:09.620
even sweeter in Collin but our haps rely
on more than just the Android libraries

00:00:09.620 --> 00:00:09.630
on more than just the Android libraries
 

00:00:09.630 --> 00:00:11.900
on more than just the Android libraries
as app writers and library maintainer

00:00:11.900 --> 00:00:11.910
as app writers and library maintainer
 

00:00:11.910 --> 00:00:14.030
as app writers and library maintainer
there's a lot you can do to be Kotlin

00:00:14.030 --> 00:00:14.040
there's a lot you can do to be Kotlin
 

00:00:14.040 --> 00:00:16.460
there's a lot you can do to be Kotlin
friendly first you should update your

00:00:16.460 --> 00:00:16.470
friendly first you should update your
 

00:00:16.470 --> 00:00:18.200
friendly first you should update your
existing code to follow the interrupt

00:00:18.200 --> 00:00:18.210
existing code to follow the interrupt
 

00:00:18.210 --> 00:00:20.450
existing code to follow the interrupt
guide then you can start building Kotla

00:00:20.450 --> 00:00:20.460
guide then you can start building Kotla
 

00:00:20.460 --> 00:00:23.120
guide then you can start building Kotla
specific api's this video will cover the

00:00:23.120 --> 00:00:23.130
specific api's this video will cover the
 

00:00:23.130 --> 00:00:24.890
specific api's this video will cover the
Interop guide which covers best

00:00:24.890 --> 00:00:24.900
Interop guide which covers best
 

00:00:24.900 --> 00:00:27.140
Interop guide which covers best
practices for writing code in the java

00:00:27.140 --> 00:00:27.150
practices for writing code in the java
 

00:00:27.150 --> 00:00:29.179
practices for writing code in the java
programming language to support Collin

00:00:29.179 --> 00:00:29.189
programming language to support Collin
 

00:00:29.189 --> 00:00:31.759
programming language to support Collin
it has four main Interop suggestions

00:00:31.759 --> 00:00:31.769
it has four main Interop suggestions
 

00:00:31.769 --> 00:00:35.479
it has four main Interop suggestions
first Kotlin is all about null safety to

00:00:35.479 --> 00:00:35.489
first Kotlin is all about null safety to
 

00:00:35.489 --> 00:00:37.040
first Kotlin is all about null safety to
support this in the java programming

00:00:37.040 --> 00:00:37.050
support this in the java programming
 

00:00:37.050 --> 00:00:39.170
support this in the java programming
language add the annotations nullable

00:00:39.170 --> 00:00:39.180
language add the annotations nullable
 

00:00:39.180 --> 00:00:41.119
language add the annotations nullable
and none know everywhere in your public

00:00:41.119 --> 00:00:41.129
and none know everywhere in your public
 

00:00:41.129 --> 00:00:43.459
and none know everywhere in your public
API Collin will use these to make your

00:00:43.459 --> 00:00:43.469
API Collin will use these to make your
 

00:00:43.469 --> 00:00:46.400
API Collin will use these to make your
API Noll safe now what happens if you

00:00:46.400 --> 00:00:46.410
API Noll safe now what happens if you
 

00:00:46.410 --> 00:00:46.700
API Noll safe now what happens if you
don't

00:00:46.700 --> 00:00:46.710
don't
 

00:00:46.710 --> 00:00:48.560
don't
well Kotlin makes what's called a

00:00:48.560 --> 00:00:48.570
well Kotlin makes what's called a
 

00:00:48.570 --> 00:00:51.229
well Kotlin makes what's called a
platform type it's a hisin type that can

00:00:51.229 --> 00:00:51.239
platform type it's a hisin type that can
 

00:00:51.239 --> 00:00:53.330
platform type it's a hisin type that can
be null or non null and it leads to

00:00:53.330 --> 00:00:53.340
be null or non null and it leads to
 

00:00:53.340 --> 00:00:55.819
be null or non null and it leads to
heisenbugs and null pointer exceptions

00:00:55.819 --> 00:00:55.829
heisenbugs and null pointer exceptions
 

00:00:55.829 --> 00:00:58.639
heisenbugs and null pointer exceptions
when you do use annotations Collin will

00:00:58.639 --> 00:00:58.649
when you do use annotations Collin will
 

00:00:58.649 --> 00:01:00.950
when you do use annotations Collin will
make your API is null safe fixing the

00:01:00.950 --> 00:01:00.960
make your API is null safe fixing the
 

00:01:00.960 --> 00:01:03.529
make your API is null safe fixing the
null pointer exceptions getters and

00:01:03.529 --> 00:01:03.539
null pointer exceptions getters and
 

00:01:03.539 --> 00:01:05.509
null pointer exceptions getters and
setters are important for interrupt

00:01:05.509 --> 00:01:05.519
setters are important for interrupt
 

00:01:05.519 --> 00:01:07.760
setters are important for interrupt
Collin requires they follow the beam

00:01:07.760 --> 00:01:07.770
Collin requires they follow the beam
 

00:01:07.770 --> 00:01:11.300
Collin requires they follow the beam
style get name set name is active set

00:01:11.300 --> 00:01:11.310
style get name set name is active set
 

00:01:11.310 --> 00:01:12.830
style get name set name is active set
active when you do this

00:01:12.830 --> 00:01:12.840
active when you do this
 

00:01:12.840 --> 00:01:14.660
active when you do this
Collin will elevate them to properties

00:01:14.660 --> 00:01:14.670
Collin will elevate them to properties
 

00:01:14.670 --> 00:01:17.480
Collin will elevate them to properties
so they can be used naturally next

00:01:17.480 --> 00:01:17.490
so they can be used naturally next
 

00:01:17.490 --> 00:01:19.940
so they can be used naturally next
Collin add support for lambdas and you

00:01:19.940 --> 00:01:19.950
Collin add support for lambdas and you
 

00:01:19.950 --> 00:01:21.800
Collin add support for lambdas and you
can interrupt with them by using single

00:01:21.800 --> 00:01:21.810
can interrupt with them by using single
 

00:01:21.810 --> 00:01:24.140
can interrupt with them by using single
abstract methods examples of single

00:01:24.140 --> 00:01:24.150
abstract methods examples of single
 

00:01:24.150 --> 00:01:25.700
abstract methods examples of single
abstract methods are runnable and

00:01:25.700 --> 00:01:25.710
abstract methods are runnable and
 

00:01:25.710 --> 00:01:28.580
abstract methods are runnable and
callable when defining your API make

00:01:28.580 --> 00:01:28.590
callable when defining your API make
 

00:01:28.590 --> 00:01:30.319
callable when defining your API make
sure to put your single abstract method

00:01:30.319 --> 00:01:30.329
sure to put your single abstract method
 

00:01:30.329 --> 00:01:32.539
sure to put your single abstract method
parameters last then Kotlin developers

00:01:32.539 --> 00:01:32.549
parameters last then Kotlin developers
 

00:01:32.549 --> 00:01:35.450
parameters last then Kotlin developers
can make full use of lambdas and finally

00:01:35.450 --> 00:01:35.460
can make full use of lambdas and finally
 

00:01:35.460 --> 00:01:37.370
can make full use of lambdas and finally
collet has some different keywords and

00:01:37.370 --> 00:01:37.380
collet has some different keywords and
 

00:01:37.380 --> 00:01:39.440
collet has some different keywords and
it's important to avoid name conflicts

00:01:39.440 --> 00:01:39.450
it's important to avoid name conflicts
 

00:01:39.450 --> 00:01:41.440
it's important to avoid name conflicts
if you do provide a function called is

00:01:41.440 --> 00:01:41.450
if you do provide a function called is
 

00:01:41.450 --> 00:01:43.580
if you do provide a function called is
developers can still call it by saying

00:01:43.580 --> 00:01:43.590
developers can still call it by saying
 

00:01:43.590 --> 00:01:46.340
developers can still call it by saying
backtick is backtick but let's be honest

00:01:46.340 --> 00:01:46.350
backtick is backtick but let's be honest
 

00:01:46.350 --> 00:01:48.889
backtick is backtick but let's be honest
that is not a good look for a full list

00:01:48.889 --> 00:01:48.899
that is not a good look for a full list
 

00:01:48.899 --> 00:01:49.520
that is not a good look for a full list
of keywords

00:01:49.520 --> 00:01:49.530
of keywords
 

00:01:49.530 --> 00:01:51.620
of keywords
check out the interrupt guide to help

00:01:51.620 --> 00:01:51.630
check out the interrupt guide to help
 

00:01:51.630 --> 00:01:53.660
check out the interrupt guide to help
support Interop we've added tooling to

00:01:53.660 --> 00:01:53.670
support Interop we've added tooling to
 

00:01:53.670 --> 00:01:56.270
support Interop we've added tooling to
Android studio 3.2 introducing lint

00:01:56.270 --> 00:01:56.280
Android studio 3.2 introducing lint
 

00:01:56.280 --> 00:01:57.770
Android studio 3.2 introducing lint
checks that will warn you for all

00:01:57.770 --> 00:01:57.780
checks that will warn you for all
 

00:01:57.780 --> 00:02:00.590
checks that will warn you for all
Interop issues to use them enable the

00:02:00.590 --> 00:02:00.600
Interop issues to use them enable the
 

00:02:00.600 --> 00:02:03.590
Interop issues to use them enable the
interoperability group in Gradle another

00:02:03.590 --> 00:02:03.600
interoperability group in Gradle another
 

00:02:03.600 --> 00:02:05.870
interoperability group in Gradle another
tool for colin is daca if you're

00:02:05.870 --> 00:02:05.880
tool for colin is daca if you're
 

00:02:05.880 --> 00:02:07.550
tool for colin is daca if you're
generating documentation with the

00:02:07.550 --> 00:02:07.560
generating documentation with the
 

00:02:07.560 --> 00:02:09.800
generating documentation with the
Javadoc tool you can migrate to using

00:02:09.800 --> 00:02:09.810
Javadoc tool you can migrate to using
 

00:02:09.810 --> 00:02:11.510
Javadoc tool you can migrate to using
dakka dakka will generate your

00:02:11.510 --> 00:02:11.520
dakka dakka will generate your
 

00:02:11.520 --> 00:02:13.260
dakka dakka will generate your
documentation and it supports

00:02:13.260 --> 00:02:13.270
documentation and it supports
 

00:02:13.270 --> 00:02:15.720
documentation and it supports
of languages there's a lot you can do to

00:02:15.720 --> 00:02:15.730
of languages there's a lot you can do to
 

00:02:15.730 --> 00:02:17.610
of languages there's a lot you can do to
make sure your existing code is collin

00:02:17.610 --> 00:02:17.620
make sure your existing code is collin
 

00:02:17.620 --> 00:02:19.590
make sure your existing code is collin
friendly in this video I covered how to

00:02:19.590 --> 00:02:19.600
friendly in this video I covered how to
 

00:02:19.600 --> 00:02:21.240
friendly in this video I covered how to
follow the inter up guide and we'll

00:02:21.240 --> 00:02:21.250
follow the inter up guide and we'll
 

00:02:21.250 --> 00:02:23.280
follow the inter up guide and we'll
cover how to make Collin specific api's

00:02:23.280 --> 00:02:23.290
cover how to make Collin specific api's
 

00:02:23.290 --> 00:02:25.860
cover how to make Collin specific api's
in a later video thanks for watching see

00:02:25.860 --> 00:02:25.870
in a later video thanks for watching see
 

00:02:25.870 --> 00:02:27.400
in a later video thanks for watching see
you again next time

00:02:27.400 --> 00:02:27.410
you again next time
 

00:02:27.410 --> 00:02:36.909
you again next time
[Music]

