WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.690
[Music]

00:00:07.690 --> 00:00:07.700
[Music]
 

00:00:07.700 --> 00:00:10.160
[Music]
thanks for coming welcome to working

00:00:10.160 --> 00:00:10.170
thanks for coming welcome to working
 

00:00:10.170 --> 00:00:11.749
thanks for coming welcome to working
with work manager session my name is

00:00:11.749 --> 00:00:11.759
with work manager session my name is
 

00:00:11.759 --> 00:00:13.490
with work manager session my name is
Samira Kataria I'm a software engineer

00:00:13.490 --> 00:00:13.500
Samira Kataria I'm a software engineer
 

00:00:13.500 --> 00:00:16.430
Samira Kataria I'm a software engineer
at Google hi my name is Rahul Ravi Kumar

00:00:16.430 --> 00:00:16.440
at Google hi my name is Rahul Ravi Kumar
 

00:00:16.440 --> 00:00:17.990
at Google hi my name is Rahul Ravi Kumar
I'm also a software engineer in Google

00:00:17.990 --> 00:00:18.000
I'm also a software engineer in Google
 

00:00:18.000 --> 00:00:20.510
I'm also a software engineer in Google
and we both work on Android architecture

00:00:20.510 --> 00:00:20.520
and we both work on Android architecture
 

00:00:20.520 --> 00:00:24.410
and we both work on Android architecture
components particularly work manager let

00:00:24.410 --> 00:00:24.420
components particularly work manager let
 

00:00:24.420 --> 00:00:28.519
components particularly work manager let
me grab my all right so what are we

00:00:28.519 --> 00:00:28.529
me grab my all right so what are we
 

00:00:28.529 --> 00:00:30.109
me grab my all right so what are we
going to talk about today when I give

00:00:30.109 --> 00:00:30.119
going to talk about today when I give
 

00:00:30.119 --> 00:00:31.790
going to talk about today when I give
you a state of the union about work

00:00:31.790 --> 00:00:31.800
you a state of the union about work
 

00:00:31.800 --> 00:00:33.950
you a state of the union about work
manager it was released at Google i/o I

00:00:33.950 --> 00:00:33.960
manager it was released at Google i/o I
 

00:00:33.960 --> 00:00:36.620
manager it was released at Google i/o I
want to give you an abbreviated guide to

00:00:36.620 --> 00:00:36.630
want to give you an abbreviated guide to
 

00:00:36.630 --> 00:00:38.060
want to give you an abbreviated guide to
work managers so for those of you

00:00:38.060 --> 00:00:38.070
work managers so for those of you
 

00:00:38.070 --> 00:00:40.100
work managers so for those of you
haven't used work manager before we want

00:00:40.100 --> 00:00:40.110
haven't used work manager before we want
 

00:00:40.110 --> 00:00:42.819
haven't used work manager before we want
to go over some of the basic api's and

00:00:42.819 --> 00:00:42.829
to go over some of the basic api's and
 

00:00:42.829 --> 00:00:45.610
to go over some of the basic api's and
we're gonna spend the most of the time

00:00:45.610 --> 00:00:45.620
we're gonna spend the most of the time
 

00:00:45.620 --> 00:00:48.319
we're gonna spend the most of the time
talking about work manager the questions

00:00:48.319 --> 00:00:48.329
talking about work manager the questions
 

00:00:48.329 --> 00:00:50.299
talking about work manager the questions
you've asked things that have been

00:00:50.299 --> 00:00:50.309
you've asked things that have been
 

00:00:50.309 --> 00:00:51.979
you've asked things that have been
frequently misunderstood and also the

00:00:51.979 --> 00:00:51.989
frequently misunderstood and also the
 

00:00:51.989 --> 00:00:56.090
frequently misunderstood and also the
new changes that we've made since i/o so

00:00:56.090 --> 00:00:56.100
new changes that we've made since i/o so
 

00:00:56.100 --> 00:00:58.209
new changes that we've made since i/o so
let's start with the State of the Union

00:00:58.209 --> 00:00:58.219
let's start with the State of the Union
 

00:00:58.219 --> 00:01:00.770
let's start with the State of the Union
there have been 11 releases of work

00:01:00.770 --> 00:01:00.780
there have been 11 releases of work
 

00:01:00.780 --> 00:01:04.460
there have been 11 releases of work
manager since Google i/o and these are

00:01:04.460 --> 00:01:04.470
manager since Google i/o and these are
 

00:01:04.470 --> 00:01:08.780
manager since Google i/o and these are
alpha releases today was the one was the

00:01:08.780 --> 00:01:08.790
alpha releases today was the one was the
 

00:01:08.790 --> 00:01:11.600
alpha releases today was the one was the
11th one and beta is coming soon so

00:01:11.600 --> 00:01:11.610
11th one and beta is coming soon so
 

00:01:11.610 --> 00:01:12.950
11th one and beta is coming soon so
those of you who watched the keynote

00:01:12.950 --> 00:01:12.960
those of you who watched the keynote
 

00:01:12.960 --> 00:01:15.800
those of you who watched the keynote
yesterday may have heard that beta is

00:01:15.800 --> 00:01:15.810
yesterday may have heard that beta is
 

00:01:15.810 --> 00:01:17.780
yesterday may have heard that beta is
coming this month this was news to us

00:01:17.780 --> 00:01:17.790
coming this month this was news to us
 

00:01:17.790 --> 00:01:21.050
coming this month this was news to us
too but it's coming this month we were

00:01:21.050 --> 00:01:21.060
too but it's coming this month we were
 

00:01:21.060 --> 00:01:22.399
too but it's coming this month we were
very close but I guess we're doing at

00:01:22.399 --> 00:01:22.409
very close but I guess we're doing at
 

00:01:22.409 --> 00:01:26.330
very close but I guess we're doing at
this month now so we want to give you an

00:01:26.330 --> 00:01:26.340
this month now so we want to give you an
 

00:01:26.340 --> 00:01:28.450
this month now so we want to give you an
abbreviated guide to work manager and

00:01:28.450 --> 00:01:28.460
abbreviated guide to work manager and
 

00:01:28.460 --> 00:01:31.219
abbreviated guide to work manager and
what is it for those of you who are just

00:01:31.219 --> 00:01:31.229
what is it for those of you who are just
 

00:01:31.229 --> 00:01:32.899
what is it for those of you who are just
completely new to this it's a library

00:01:32.899 --> 00:01:32.909
completely new to this it's a library
 

00:01:32.909 --> 00:01:34.880
completely new to this it's a library
for managing deferrable background work

00:01:34.880 --> 00:01:34.890
for managing deferrable background work
 

00:01:34.890 --> 00:01:38.179
for managing deferrable background work
it wraps job scheduler and alarmmanager

00:01:38.179 --> 00:01:38.189
it wraps job scheduler and alarmmanager
 

00:01:38.189 --> 00:01:40.190
it wraps job scheduler and alarmmanager
broadcast receivers it's backwards

00:01:40.190 --> 00:01:40.200
broadcast receivers it's backwards
 

00:01:40.200 --> 00:01:42.800
broadcast receivers it's backwards
compatible to api 14 and those of you

00:01:42.800 --> 00:01:42.810
compatible to api 14 and those of you
 

00:01:42.810 --> 00:01:44.480
compatible to api 14 and those of you
who've used job scheduler will find many

00:01:44.480 --> 00:01:44.490
who've used job scheduler will find many
 

00:01:44.490 --> 00:01:48.440
who've used job scheduler will find many
of the concepts very familiar so let's

00:01:48.440 --> 00:01:48.450
of the concepts very familiar so let's
 

00:01:48.450 --> 00:01:50.960
of the concepts very familiar so let's
talk about work you've got got a unit of

00:01:50.960 --> 00:01:50.970
talk about work you've got got a unit of
 

00:01:50.970 --> 00:01:52.190
talk about work you've got got a unit of
background work and we'll talk a little

00:01:52.190 --> 00:01:52.200
background work and we'll talk a little
 

00:01:52.200 --> 00:01:54.109
background work and we'll talk a little
bit more about how we create it and how

00:01:54.109 --> 00:01:54.119
bit more about how we create it and how
 

00:01:54.119 --> 00:01:56.510
bit more about how we create it and how
we in queue it later but you've got it

00:01:56.510 --> 00:01:56.520
we in queue it later but you've got it
 

00:01:56.520 --> 00:01:59.060
we in queue it later but you've got it
and how does work manager execute this

00:01:59.060 --> 00:01:59.070
and how does work manager execute this
 

00:01:59.070 --> 00:02:01.300
and how does work manager execute this
work this is a graph that might help you

00:02:01.300 --> 00:02:01.310
work this is a graph that might help you
 

00:02:01.310 --> 00:02:03.679
work this is a graph that might help you
while your process is up and running

00:02:03.679 --> 00:02:03.689
while your process is up and running
 

00:02:03.689 --> 00:02:05.990
while your process is up and running
we'll feed it to this executor that we

00:02:05.990 --> 00:02:06.000
we'll feed it to this executor that we
 

00:02:06.000 --> 00:02:07.580
we'll feed it to this executor that we
have that does the work it could be a

00:02:07.580 --> 00:02:07.590
have that does the work it could be a
 

00:02:07.590 --> 00:02:09.790
have that does the work it could be a
thread pool you can customize this thing

00:02:09.790 --> 00:02:09.800
thread pool you can customize this thing
 

00:02:09.800 --> 00:02:12.680
thread pool you can customize this thing
but your process may be killed and work

00:02:12.680 --> 00:02:12.690
but your process may be killed and work
 

00:02:12.690 --> 00:02:13.940
but your process may be killed and work
manager is

00:02:13.940 --> 00:02:13.950
manager is
 

00:02:13.950 --> 00:02:16.970
manager is
guaranteed to do work it may defer it

00:02:16.970 --> 00:02:16.980
guaranteed to do work it may defer it
 

00:02:16.980 --> 00:02:18.500
guaranteed to do work it may defer it
but it will do that work when the

00:02:18.500 --> 00:02:18.510
but it will do that work when the
 

00:02:18.510 --> 00:02:21.410
but it will do that work when the
constraints for that work are met so we

00:02:21.410 --> 00:02:21.420
constraints for that work are met so we
 

00:02:21.420 --> 00:02:23.180
constraints for that work are met so we
also include in the background so if

00:02:23.180 --> 00:02:23.190
also include in the background so if
 

00:02:23.190 --> 00:02:25.820
also include in the background so if
your API 23 plus we use job scheduler

00:02:25.820 --> 00:02:25.830
your API 23 plus we use job scheduler
 

00:02:25.830 --> 00:02:28.970
your API 23 plus we use job scheduler
and before that we use an alarm manager

00:02:28.970 --> 00:02:28.980
and before that we use an alarm manager
 

00:02:28.980 --> 00:02:30.940
and before that we use an alarm manager
and broadcast receiver implementation so

00:02:30.940 --> 00:02:30.950
and broadcast receiver implementation so
 

00:02:30.950 --> 00:02:33.350
and broadcast receiver implementation so
whenever the signals are met let's say

00:02:33.350 --> 00:02:33.360
whenever the signals are met let's say
 

00:02:33.360 --> 00:02:35.330
whenever the signals are met let's say
that you've put in some work for a two

00:02:35.330 --> 00:02:35.340
that you've put in some work for a two
 

00:02:35.340 --> 00:02:37.280
that you've put in some work for a two
hour time delay when you're when you

00:02:37.280 --> 00:02:37.290
hour time delay when you're when you
 

00:02:37.290 --> 00:02:39.500
hour time delay when you're when you
have network when all of that well all

00:02:39.500 --> 00:02:39.510
have network when all of that well all
 

00:02:39.510 --> 00:02:41.630
have network when all of that well all
those conditions are met it'll still go

00:02:41.630 --> 00:02:41.640
those conditions are met it'll still go
 

00:02:41.640 --> 00:02:46.940
those conditions are met it'll still go
to the same executor all right let's do

00:02:46.940 --> 00:02:46.950
to the same executor all right let's do
 

00:02:46.950 --> 00:02:48.620
to the same executor all right let's do
a quick API walkthrough for those who

00:02:48.620 --> 00:02:48.630
a quick API walkthrough for those who
 

00:02:48.630 --> 00:02:52.039
a quick API walkthrough for those who
have not seen the API so the fundamental

00:02:52.039 --> 00:02:52.049
have not seen the API so the fundamental
 

00:02:52.049 --> 00:02:54.710
have not seen the API so the fundamental
unit of work in work manager is a worker

00:02:54.710 --> 00:02:54.720
unit of work in work manager is a worker
 

00:02:54.720 --> 00:02:57.610
unit of work in work manager is a worker
here I'm defining a calculation worker

00:02:57.610 --> 00:02:57.620
here I'm defining a calculation worker
 

00:02:57.620 --> 00:03:01.160
here I'm defining a calculation worker
it extends the worker type so now the

00:03:01.160 --> 00:03:01.170
it extends the worker type so now the
 

00:03:01.170 --> 00:03:02.449
it extends the worker type so now the
only thing that you need to do when you

00:03:02.449 --> 00:03:02.459
only thing that you need to do when you
 

00:03:02.459 --> 00:03:04.699
only thing that you need to do when you
define a new worker is to extend do work

00:03:04.699 --> 00:03:04.709
define a new worker is to extend do work
 

00:03:04.709 --> 00:03:07.460
define a new worker is to extend do work
and do work return the result here I'm

00:03:07.460 --> 00:03:07.470
and do work return the result here I'm
 

00:03:07.470 --> 00:03:10.400
and do work return the result here I'm
returning a success you can also return

00:03:10.400 --> 00:03:10.410
returning a success you can also return
 

00:03:10.410 --> 00:03:12.770
returning a success you can also return
a retry or a fail I'm doing some

00:03:12.770 --> 00:03:12.780
a retry or a fail I'm doing some
 

00:03:12.780 --> 00:03:14.360
a retry or a fail I'm doing some
expensive calculation or background

00:03:14.360 --> 00:03:14.370
expensive calculation or background
 

00:03:14.370 --> 00:03:15.559
expensive calculation or background
thread so you don't have to worry about

00:03:15.559 --> 00:03:15.569
thread so you don't have to worry about
 

00:03:15.569 --> 00:03:17.300
thread so you don't have to worry about
threading here because work manager is

00:03:17.300 --> 00:03:17.310
threading here because work manager is
 

00:03:17.310 --> 00:03:18.920
threading here because work manager is
guaranteed to schedule your work on a

00:03:18.920 --> 00:03:18.930
guaranteed to schedule your work on a
 

00:03:18.930 --> 00:03:21.770
guaranteed to schedule your work on a
background thread and here I'm returning

00:03:21.770 --> 00:03:21.780
background thread and here I'm returning
 

00:03:21.780 --> 00:03:23.870
background thread and here I'm returning
a result of success synchronously so

00:03:23.870 --> 00:03:23.880
a result of success synchronously so
 

00:03:23.880 --> 00:03:26.990
a result of success synchronously so
that's it I'm pretty much good to go so

00:03:26.990 --> 00:03:27.000
that's it I'm pretty much good to go so
 

00:03:27.000 --> 00:03:28.699
that's it I'm pretty much good to go so
now you've defined a worker how do you

00:03:28.699 --> 00:03:28.709
now you've defined a worker how do you
 

00:03:28.709 --> 00:03:31.729
now you've defined a worker how do you
actually make that work run so for that

00:03:31.729 --> 00:03:31.739
actually make that work run so for that
 

00:03:31.739 --> 00:03:34.129
actually make that work run so for that
you need to NQ a work request so there

00:03:34.129 --> 00:03:34.139
you need to NQ a work request so there
 

00:03:34.139 --> 00:03:35.809
you need to NQ a work request so there
are two types of work requests once a

00:03:35.809 --> 00:03:35.819
are two types of work requests once a
 

00:03:35.819 --> 00:03:37.520
are two types of work requests once a
one time and the other one is a periodic

00:03:37.520 --> 00:03:37.530
one time and the other one is a periodic
 

00:03:37.530 --> 00:03:39.440
one time and the other one is a periodic
work request here I'm using a one time

00:03:39.440 --> 00:03:39.450
work request here I'm using a one time
 

00:03:39.450 --> 00:03:44.150
work request here I'm using a one time
work request builder and I'm asking I'm

00:03:44.150 --> 00:03:44.160
work request builder and I'm asking I'm
 

00:03:44.160 --> 00:03:45.920
work request builder and I'm asking I'm
building it with the calculation worker

00:03:45.920 --> 00:03:45.930
building it with the calculation worker
 

00:03:45.930 --> 00:03:47.210
building it with the calculation worker
that I just defined in the previous

00:03:47.210 --> 00:03:47.220
that I just defined in the previous
 

00:03:47.220 --> 00:03:49.910
that I just defined in the previous
slide so I'm setting an initial delay

00:03:49.910 --> 00:03:49.920
slide so I'm setting an initial delay
 

00:03:49.920 --> 00:03:51.440
slide so I'm setting an initial delay
and this is a timing based constraint

00:03:51.440 --> 00:03:51.450
and this is a timing based constraint
 

00:03:51.450 --> 00:03:55.759
and this is a timing based constraint
and this this tells work manager to only

00:03:55.759 --> 00:03:55.769
and this this tells work manager to only
 

00:03:55.769 --> 00:03:57.589
and this this tells work manager to only
run the work after two hours have passed

00:03:57.589 --> 00:03:57.599
run the work after two hours have passed
 

00:03:57.599 --> 00:03:59.990
run the work after two hours have passed
since the point when queue I'm also

00:03:59.990 --> 00:04:00.000
since the point when queue I'm also
 

00:04:00.000 --> 00:04:01.759
since the point when queue I'm also
setting another constraint which is the

00:04:01.759 --> 00:04:01.769
setting another constraint which is the
 

00:04:01.769 --> 00:04:03.170
setting another constraint which is the
charging constraint

00:04:03.170 --> 00:04:03.180
charging constraint
 

00:04:03.180 --> 00:04:04.550
charging constraint
this tells work manager that this work

00:04:04.550 --> 00:04:04.560
this tells work manager that this work
 

00:04:04.560 --> 00:04:06.289
this tells work manager that this work
is only eligible to run when the device

00:04:06.289 --> 00:04:06.299
is only eligible to run when the device
 

00:04:06.299 --> 00:04:08.599
is only eligible to run when the device
is actually connected to are charging

00:04:08.599 --> 00:04:08.609
is actually connected to are charging
 

00:04:08.609 --> 00:04:10.610
is actually connected to are charging
when the device is actually charging I

00:04:10.610 --> 00:04:10.620
when the device is actually charging I
 

00:04:10.620 --> 00:04:13.250
when the device is actually charging I
add a tag I'll talk about tags in more

00:04:13.250 --> 00:04:13.260
add a tag I'll talk about tags in more
 

00:04:13.260 --> 00:04:15.620
add a tag I'll talk about tags in more
detail but and I'm finally calling that

00:04:15.620 --> 00:04:15.630
detail but and I'm finally calling that
 

00:04:15.630 --> 00:04:19.400
detail but and I'm finally calling that
build now all I need to do is to call

00:04:19.400 --> 00:04:19.410
build now all I need to do is to call
 

00:04:19.410 --> 00:04:20.960
build now all I need to do is to call
Karen stones and enqueue the work and

00:04:20.960 --> 00:04:20.970
Karen stones and enqueue the work and
 

00:04:20.970 --> 00:04:23.450
Karen stones and enqueue the work and
that's it now you the work is scheduled

00:04:23.450 --> 00:04:23.460
that's it now you the work is scheduled
 

00:04:23.460 --> 00:04:26.149
that's it now you the work is scheduled
so now you've scheduled your work you've

00:04:26.149 --> 00:04:26.159
so now you've scheduled your work you've
 

00:04:26.159 --> 00:04:27.620
so now you've scheduled your work you've
defined a bunch of constraints

00:04:27.620 --> 00:04:27.630
defined a bunch of constraints
 

00:04:27.630 --> 00:04:29.840
defined a bunch of constraints
and it's hard to keep track of and if

00:04:29.840 --> 00:04:29.850
and it's hard to keep track of and if
 

00:04:29.850 --> 00:04:31.220
and it's hard to keep track of and if
you want to keep track of what state

00:04:31.220 --> 00:04:31.230
you want to keep track of what state
 

00:04:31.230 --> 00:04:32.930
you want to keep track of what state
your work is in then you want to KITT

00:04:32.930 --> 00:04:32.940
your work is in then you want to KITT
 

00:04:32.940 --> 00:04:35.600
your work is in then you want to KITT
call get working for by ID live data and

00:04:35.600 --> 00:04:35.610
call get working for by ID live data and
 

00:04:35.610 --> 00:04:38.900
call get working for by ID live data and
this returns a live data of a list of

00:04:38.900 --> 00:04:38.910
this returns a live data of a list of
 

00:04:38.910 --> 00:04:41.480
this returns a live data of a list of
working live data of a work info and so

00:04:41.480 --> 00:04:41.490
working live data of a work info and so
 

00:04:41.490 --> 00:04:43.490
working live data of a work info and so
working for is the type that determines

00:04:43.490 --> 00:04:43.500
working for is the type that determines
 

00:04:43.500 --> 00:04:46.070
working for is the type that determines
the state of your work and live data

00:04:46.070 --> 00:04:46.080
the state of your work and live data
 

00:04:46.080 --> 00:04:48.110
the state of your work and live data
here is a life cycle of air observable

00:04:48.110 --> 00:04:48.120
here is a life cycle of air observable
 

00:04:48.120 --> 00:04:50.540
here is a life cycle of air observable
so once you attach it to a life cycle

00:04:50.540 --> 00:04:50.550
so once you attach it to a life cycle
 

00:04:50.550 --> 00:04:52.970
so once you attach it to a life cycle
owner and you define an observer you can

00:04:52.970 --> 00:04:52.980
owner and you define an observer you can
 

00:04:52.980 --> 00:04:54.470
owner and you define an observer you can
observe the state transitions of the

00:04:54.470 --> 00:04:54.480
observe the state transitions of the
 

00:04:54.480 --> 00:04:56.000
observe the state transitions of the
vault request so it will go something

00:04:56.000 --> 00:04:56.010
vault request so it will go something
 

00:04:56.010 --> 00:04:58.460
vault request so it will go something
like once the country wants you in cue

00:04:58.460 --> 00:04:58.470
like once the country wants you in cue
 

00:04:58.470 --> 00:05:00.590
like once the country wants you in cue
the work it will go into in queue once

00:05:00.590 --> 00:05:00.600
the work it will go into in queue once
 

00:05:00.600 --> 00:05:02.300
the work it will go into in queue once
the constraints are met it'll go into a

00:05:02.300 --> 00:05:02.310
the constraints are met it'll go into a
 

00:05:02.310 --> 00:05:04.430
the constraints are met it'll go into a
running and then finally because you

00:05:04.430 --> 00:05:04.440
running and then finally because you
 

00:05:04.440 --> 00:05:06.260
running and then finally because you
return success it's going to the

00:05:06.260 --> 00:05:06.270
return success it's going to the
 

00:05:06.270 --> 00:05:09.380
return success it's going to the
succeeded state so remember that tag

00:05:09.380 --> 00:05:09.390
succeeded state so remember that tag
 

00:05:09.390 --> 00:05:11.090
succeeded state so remember that tag
that we added when we built the one time

00:05:11.090 --> 00:05:11.100
that we added when we built the one time
 

00:05:11.100 --> 00:05:13.550
that we added when we built the one time
work request you can also get work infos

00:05:13.550 --> 00:05:13.560
work request you can also get work infos
 

00:05:13.560 --> 00:05:16.700
work request you can also get work infos
by tag live data and tag is something

00:05:16.700 --> 00:05:16.710
by tag live data and tag is something
 

00:05:16.710 --> 00:05:18.950
by tag live data and tag is something
that you associate with associate with a

00:05:18.950 --> 00:05:18.960
that you associate with associate with a
 

00:05:18.960 --> 00:05:20.990
that you associate with associate with a
work request and they can be one too

00:05:20.990 --> 00:05:21.000
work request and they can be one too
 

00:05:21.000 --> 00:05:22.580
work request and they can be one too
many so you can associate the same tag

00:05:22.580 --> 00:05:22.590
many so you can associate the same tag
 

00:05:22.590 --> 00:05:24.860
many so you can associate the same tag
to multiple work requests and here I'm

00:05:24.860 --> 00:05:24.870
to multiple work requests and here I'm
 

00:05:24.870 --> 00:05:28.130
to multiple work requests and here I'm
calling get work infos by tag live data

00:05:28.130 --> 00:05:28.140
calling get work infos by tag live data
 

00:05:28.140 --> 00:05:30.710
calling get work infos by tag live data
it runs a live data again notice how it

00:05:30.710 --> 00:05:30.720
it runs a live data again notice how it
 

00:05:30.720 --> 00:05:32.210
it runs a live data again notice how it
returns a list of work info and not a

00:05:32.210 --> 00:05:32.220
returns a list of work info and not a
 

00:05:32.220 --> 00:05:35.120
returns a list of work info and not a
single work info and again I can do the

00:05:35.120 --> 00:05:35.130
single work info and again I can do the
 

00:05:35.130 --> 00:05:36.200
single work info and again I can do the
same things that I did in the previous

00:05:36.200 --> 00:05:36.210
same things that I did in the previous
 

00:05:36.210 --> 00:05:38.750
same things that I did in the previous
sites like so one of the coolest

00:05:38.750 --> 00:05:38.760
sites like so one of the coolest
 

00:05:38.760 --> 00:05:40.910
sites like so one of the coolest
features of work manager is the ability

00:05:40.910 --> 00:05:40.920
features of work manager is the ability
 

00:05:40.920 --> 00:05:43.940
features of work manager is the ability
to chain work so that helps you define

00:05:43.940 --> 00:05:43.950
to chain work so that helps you define
 

00:05:43.950 --> 00:05:46.850
to chain work so that helps you define
an acyclic graph of work and here I'm

00:05:46.850 --> 00:05:46.860
an acyclic graph of work and here I'm
 

00:05:46.860 --> 00:05:49.400
an acyclic graph of work and here I'm
asking work manager to begin with a B

00:05:49.400 --> 00:05:49.410
asking work manager to begin with a B
 

00:05:49.410 --> 00:05:51.920
asking work manager to begin with a B
and C and here a B and C are work

00:05:51.920 --> 00:05:51.930
and C and here a B and C are work
 

00:05:51.930 --> 00:05:55.010
and C and here a B and C are work
requests and I'm saying that DNA are

00:05:55.010 --> 00:05:55.020
requests and I'm saying that DNA are
 

00:05:55.020 --> 00:05:57.740
requests and I'm saying that DNA are
only eligible to run once all a B and C

00:05:57.740 --> 00:05:57.750
only eligible to run once all a B and C
 

00:05:57.750 --> 00:06:00.380
only eligible to run once all a B and C
are done and when I say when I use the

00:06:00.380 --> 00:06:00.390
are done and when I say when I use the
 

00:06:00.390 --> 00:06:02.780
are done and when I say when I use the
begin with API I'm asking work manager

00:06:02.780 --> 00:06:02.790
begin with API I'm asking work manager
 

00:06:02.790 --> 00:06:04.850
begin with API I'm asking work manager
to run a B and C potentially in parallel

00:06:04.850 --> 00:06:04.860
to run a B and C potentially in parallel
 

00:06:04.860 --> 00:06:06.710
to run a B and C potentially in parallel
whether they actually run in parallel

00:06:06.710 --> 00:06:06.720
whether they actually run in parallel
 

00:06:06.720 --> 00:06:10.310
whether they actually run in parallel
are is determined by the capabilities of

00:06:10.310 --> 00:06:10.320
are is determined by the capabilities of
 

00:06:10.320 --> 00:06:11.900
are is determined by the capabilities of
the device and the size of your thread

00:06:11.900 --> 00:06:11.910
the device and the size of your thread
 

00:06:11.910 --> 00:06:15.080
the device and the size of your thread
pool and finally I'm calling at then on

00:06:15.080 --> 00:06:15.090
pool and finally I'm calling at then on
 

00:06:15.090 --> 00:06:18.320
pool and finally I'm calling at then on
F G and H again that now F G and H will

00:06:18.320 --> 00:06:18.330
F G and H again that now F G and H will
 

00:06:18.330 --> 00:06:20.270
F G and H again that now F G and H will
only run once all the preceding works

00:06:20.270 --> 00:06:20.280
only run once all the preceding works
 

00:06:20.280 --> 00:06:22.790
only run once all the preceding works
are done finally don't forget to call in

00:06:22.790 --> 00:06:22.800
are done finally don't forget to call in
 

00:06:22.800 --> 00:06:25.250
are done finally don't forget to call in
queue that's when all the magic happens

00:06:25.250 --> 00:06:25.260
queue that's when all the magic happens
 

00:06:25.260 --> 00:06:29.150
queue that's when all the magic happens
so so now you call them queue now you

00:06:29.150 --> 00:06:29.160
so so now you call them queue now you
 

00:06:29.160 --> 00:06:30.500
so so now you call them queue now you
might be wondering what begin what

00:06:30.500 --> 00:06:30.510
might be wondering what begin what
 

00:06:30.510 --> 00:06:33.380
might be wondering what begin what
returns begin with returns so begin with

00:06:33.380 --> 00:06:33.390
returns begin with returns so begin with
 

00:06:33.390 --> 00:06:35.480
returns begin with returns so begin with
actually returns an instance of work

00:06:35.480 --> 00:06:35.490
actually returns an instance of work
 

00:06:35.490 --> 00:06:37.760
actually returns an instance of work
continuation and a work continuation is

00:06:37.760 --> 00:06:37.770
continuation and a work continuation is
 

00:06:37.770 --> 00:06:39.839
continuation and a work continuation is
a node inner acyclic graph

00:06:39.839 --> 00:06:39.849
a node inner acyclic graph
 

00:06:39.849 --> 00:06:42.480
a node inner acyclic graph
and this lends to a very fluent API so

00:06:42.480 --> 00:06:42.490
and this lends to a very fluent API so
 

00:06:42.490 --> 00:06:43.799
and this lends to a very fluent API so
every time you call begin with it

00:06:43.799 --> 00:06:43.809
every time you call begin with it
 

00:06:43.809 --> 00:06:45.719
every time you call begin with it
returns a new continuation and every

00:06:45.719 --> 00:06:45.729
returns a new continuation and every
 

00:06:45.729 --> 00:06:47.279
returns a new continuation and every
time you call that then it returns a new

00:06:47.279 --> 00:06:47.289
time you call that then it returns a new
 

00:06:47.289 --> 00:06:49.709
time you call that then it returns a new
instance of another continuation finally

00:06:49.709 --> 00:06:49.719
instance of another continuation finally
 

00:06:49.719 --> 00:06:52.109
instance of another continuation finally
don't forget to call thank you the one

00:06:52.109 --> 00:06:52.119
don't forget to call thank you the one
 

00:06:52.119 --> 00:06:53.129
don't forget to call thank you the one
important thing that you need to

00:06:53.129 --> 00:06:53.139
important thing that you need to
 

00:06:53.139 --> 00:06:54.869
important thing that you need to
remember is when you chain work the

00:06:54.869 --> 00:06:54.879
remember is when you chain work the
 

00:06:54.879 --> 00:06:57.600
remember is when you chain work the
outputs of parent are the outputs of the

00:06:57.600 --> 00:06:57.610
outputs of parent are the outputs of the
 

00:06:57.610 --> 00:06:59.309
outputs of parent are the outputs of the
parent work requests become inputs to

00:06:59.309 --> 00:06:59.319
parent work requests become inputs to
 

00:06:59.319 --> 00:07:01.679
parent work requests become inputs to
your descending work request or your

00:07:01.679 --> 00:07:01.689
your descending work request or your
 

00:07:01.689 --> 00:07:05.249
your descending work request or your
children this helps you managed it and

00:07:05.249 --> 00:07:05.259
children this helps you managed it and
 

00:07:05.259 --> 00:07:07.260
children this helps you managed it and
send state from parent work to the

00:07:07.260 --> 00:07:07.270
send state from parent work to the
 

00:07:07.270 --> 00:07:10.739
send state from parent work to the
descendant work and so now finally

00:07:10.739 --> 00:07:10.749
descendant work and so now finally
 

00:07:10.749 --> 00:07:13.469
descendant work and so now finally
there's work manager also exposes the

00:07:13.469 --> 00:07:13.479
there's work manager also exposes the
 

00:07:13.479 --> 00:07:16.079
there's work manager also exposes the
ape the API is to cancel work so for

00:07:16.079 --> 00:07:16.089
ape the API is to cancel work so for
 

00:07:16.089 --> 00:07:17.820
ape the API is to cancel work so for
some reason if you want to do that you

00:07:17.820 --> 00:07:17.830
some reason if you want to do that you
 

00:07:17.830 --> 00:07:20.249
some reason if you want to do that you
can cancel work by ID and every work

00:07:20.249 --> 00:07:20.259
can cancel work by ID and every work
 

00:07:20.259 --> 00:07:22.259
can cancel work by ID and every work
request has a unique ID so here we're

00:07:22.259 --> 00:07:22.269
request has a unique ID so here we're
 

00:07:22.269 --> 00:07:24.389
request has a unique ID so here we're
canceling work by that ID and you can

00:07:24.389 --> 00:07:24.399
canceling work by that ID and you can
 

00:07:24.399 --> 00:07:27.359
canceling work by that ID and you can
also cancel all work by tag so those are

00:07:27.359 --> 00:07:27.369
also cancel all work by tag so those are
 

00:07:27.369 --> 00:07:33.269
also cancel all work by tag so those are
the two api's and that's it and I want

00:07:33.269 --> 00:07:33.279
the two api's and that's it and I want
 

00:07:33.279 --> 00:07:35.100
the two api's and that's it and I want
to point out that all the things we've

00:07:35.100 --> 00:07:35.110
to point out that all the things we've
 

00:07:35.110 --> 00:07:37.259
to point out that all the things we've
all the APS we've been showing are for

00:07:37.259 --> 00:07:37.269
all the APS we've been showing are for
 

00:07:37.269 --> 00:07:39.209
all the APS we've been showing are for
alpha 11 so that you may notice some

00:07:39.209 --> 00:07:39.219
alpha 11 so that you may notice some
 

00:07:39.219 --> 00:07:40.980
alpha 11 so that you may notice some
slight changes for those of you who have

00:07:40.980 --> 00:07:40.990
slight changes for those of you who have
 

00:07:40.990 --> 00:07:43.199
slight changes for those of you who have
been using this API before but

00:07:43.199 --> 00:07:43.209
been using this API before but
 

00:07:43.209 --> 00:07:46.109
been using this API before but
everything is live today so let's talk a

00:07:46.109 --> 00:07:46.119
everything is live today so let's talk a
 

00:07:46.119 --> 00:07:47.489
everything is live today so let's talk a
little bit about how you can get the

00:07:47.489 --> 00:07:47.499
little bit about how you can get the
 

00:07:47.499 --> 00:07:49.589
little bit about how you can get the
most out of work manager and these also

00:07:49.589 --> 00:07:49.599
most out of work manager and these also
 

00:07:49.599 --> 00:07:52.139
most out of work manager and these also
include questions like how do I do a

00:07:52.139 --> 00:07:52.149
include questions like how do I do a
 

00:07:52.149 --> 00:07:55.439
include questions like how do I do a
certain type of task why does this work

00:07:55.439 --> 00:07:55.449
certain type of task why does this work
 

00:07:55.449 --> 00:07:57.809
certain type of task why does this work
this way a certain way and the biggest

00:07:57.809 --> 00:07:57.819
this way a certain way and the biggest
 

00:07:57.819 --> 00:07:59.309
this way a certain way and the biggest
one that we get a question about is

00:07:59.309 --> 00:07:59.319
one that we get a question about is
 

00:07:59.319 --> 00:07:59.939
one that we get a question about is
threading

00:07:59.939 --> 00:07:59.949
threading
 

00:07:59.949 --> 00:08:02.089
threading
how does threading work in work manager

00:08:02.089 --> 00:08:02.099
how does threading work in work manager
 

00:08:02.099 --> 00:08:04.379
how does threading work in work manager
so we talked about a about a work

00:08:04.379 --> 00:08:04.389
so we talked about a about a work
 

00:08:04.389 --> 00:08:06.959
so we talked about a about a work
request Rahul just mention that and you

00:08:06.959 --> 00:08:06.969
request Rahul just mention that and you
 

00:08:06.969 --> 00:08:09.389
request Rahul just mention that and you
in cue it what happens to it then so we

00:08:09.389 --> 00:08:09.399
in cue it what happens to it then so we
 

00:08:09.399 --> 00:08:11.009
in cue it what happens to it then so we
have an internal tab we call it an

00:08:11.009 --> 00:08:11.019
have an internal tab we call it an
 

00:08:11.019 --> 00:08:12.779
have an internal tab we call it an
internal task executor you can think of

00:08:12.779 --> 00:08:12.789
internal task executor you can think of
 

00:08:12.789 --> 00:08:15.929
internal task executor you can think of
it as a single threaded executor and the

00:08:15.929 --> 00:08:15.939
it as a single threaded executor and the
 

00:08:15.939 --> 00:08:18.839
it as a single threaded executor and the
in queue goes to that which stores it in

00:08:18.839 --> 00:08:18.849
in queue goes to that which stores it in
 

00:08:18.849 --> 00:08:21.179
in queue goes to that which stores it in
a local database so every app that uses

00:08:21.179 --> 00:08:21.189
a local database so every app that uses
 

00:08:21.189 --> 00:08:22.980
a local database so every app that uses
work manager has a work manager database

00:08:22.980 --> 00:08:22.990
work manager has a work manager database
 

00:08:22.990 --> 00:08:24.929
work manager has a work manager database
this is the source of truth this is

00:08:24.929 --> 00:08:24.939
this is the source of truth this is
 

00:08:24.939 --> 00:08:26.819
this is the source of truth this is
where we keep track of the state of your

00:08:26.819 --> 00:08:26.829
where we keep track of the state of your
 

00:08:26.829 --> 00:08:30.089
where we keep track of the state of your
work your inputs and outputs everything

00:08:30.089 --> 00:08:30.099
work your inputs and outputs everything
 

00:08:30.099 --> 00:08:32.159
work your inputs and outputs everything
with the dependency chains everything

00:08:32.159 --> 00:08:32.169
with the dependency chains everything
 

00:08:32.169 --> 00:08:35.009
with the dependency chains everything
goes in this database so after it's been

00:08:35.009 --> 00:08:35.019
goes in this database so after it's been
 

00:08:35.019 --> 00:08:36.600
goes in this database so after it's been
in queued some time later your

00:08:36.600 --> 00:08:36.610
in queued some time later your
 

00:08:36.610 --> 00:08:39.029
in queued some time later your
constraints are met and the OS tells you

00:08:39.029 --> 00:08:39.039
constraints are met and the OS tells you
 

00:08:39.039 --> 00:08:40.920
constraints are met and the OS tells you
that if you have no constraints it's

00:08:40.920 --> 00:08:40.930
that if you have no constraints it's
 

00:08:40.930 --> 00:08:42.929
that if you have no constraints it's
eligible to run it right away if there

00:08:42.929 --> 00:08:42.939
eligible to run it right away if there
 

00:08:42.939 --> 00:08:44.790
eligible to run it right away if there
are constraints the OS will tell you oh

00:08:44.790 --> 00:08:44.800
are constraints the OS will tell you oh
 

00:08:44.800 --> 00:08:47.100
are constraints the OS will tell you oh
you have network you are charging right

00:08:47.100 --> 00:08:47.110
you have network you are charging right
 

00:08:47.110 --> 00:08:50.220
you have network you are charging right
now whatever it is same task executor

00:08:50.220 --> 00:08:50.230
now whatever it is same task executor
 

00:08:50.230 --> 00:08:53.740
now whatever it is same task executor
uses a worker factory to create a worker

00:08:53.740 --> 00:08:53.750
uses a worker factory to create a worker
 

00:08:53.750 --> 00:08:55.810
uses a worker factory to create a worker
worker Factory is exactly what it is

00:08:55.810 --> 00:08:55.820
worker Factory is exactly what it is
 

00:08:55.820 --> 00:08:57.730
worker Factory is exactly what it is
it's a factory for workers and you can

00:08:57.730 --> 00:08:57.740
it's a factory for workers and you can
 

00:08:57.740 --> 00:09:00.160
it's a factory for workers and you can
make your own you can customize and do

00:09:00.160 --> 00:09:00.170
make your own you can customize and do
 

00:09:00.170 --> 00:09:01.270
make your own you can customize and do
things with that we'll talk more about

00:09:01.270 --> 00:09:01.280
things with that we'll talk more about
 

00:09:01.280 --> 00:09:04.600
things with that we'll talk more about
that later after the workers been

00:09:04.600 --> 00:09:04.610
that later after the workers been
 

00:09:04.610 --> 00:09:07.270
that later after the workers been
created we execute it on an executor and

00:09:07.270 --> 00:09:07.280
created we execute it on an executor and
 

00:09:07.280 --> 00:09:09.880
created we execute it on an executor and
this is also a thing that you can

00:09:09.880 --> 00:09:09.890
this is also a thing that you can
 

00:09:09.890 --> 00:09:11.320
this is also a thing that you can
actually customize we'll talk more about

00:09:11.320 --> 00:09:11.330
actually customize we'll talk more about
 

00:09:11.330 --> 00:09:13.140
actually customize we'll talk more about
that later as well

00:09:13.140 --> 00:09:13.150
that later as well
 

00:09:13.150 --> 00:09:15.820
that later as well
but what if you don't want to execute

00:09:15.820 --> 00:09:15.830
but what if you don't want to execute
 

00:09:15.830 --> 00:09:17.530
but what if you don't want to execute
something on that executor we give you a

00:09:17.530 --> 00:09:17.540
something on that executor we give you a
 

00:09:17.540 --> 00:09:19.600
something on that executor we give you a
default one you could specify your own

00:09:19.600 --> 00:09:19.610
default one you could specify your own
 

00:09:19.610 --> 00:09:21.850
default one you could specify your own
but what if you're using rx Java what if

00:09:21.850 --> 00:09:21.860
but what if you're using rx Java what if
 

00:09:21.860 --> 00:09:24.250
but what if you're using rx Java what if
you're using co-routines what if you

00:09:24.250 --> 00:09:24.260
you're using co-routines what if you
 

00:09:24.260 --> 00:09:25.870
you're using co-routines what if you
have your own bespoke solution that you

00:09:25.870 --> 00:09:25.880
have your own bespoke solution that you
 

00:09:25.880 --> 00:09:27.820
have your own bespoke solution that you
want to use to run things in the

00:09:27.820 --> 00:09:27.830
want to use to run things in the
 

00:09:27.830 --> 00:09:30.400
want to use to run things in the
background this was a request that came

00:09:30.400 --> 00:09:30.410
background this was a request that came
 

00:09:30.410 --> 00:09:31.780
background this was a request that came
up quite a lot when we first released

00:09:31.780 --> 00:09:31.790
up quite a lot when we first released
 

00:09:31.790 --> 00:09:36.130
up quite a lot when we first released
work manager so to do this we want to

00:09:36.130 --> 00:09:36.140
work manager so to do this we want to
 

00:09:36.140 --> 00:09:39.700
work manager so to do this we want to
provide you a an API to let you do work

00:09:39.700 --> 00:09:39.710
provide you a an API to let you do work
 

00:09:39.710 --> 00:09:41.830
provide you a an API to let you do work
on your own and just tell us when it's

00:09:41.830 --> 00:09:41.840
on your own and just tell us when it's
 

00:09:41.840 --> 00:09:44.410
on your own and just tell us when it's
done so you want to signal async or

00:09:44.410 --> 00:09:44.420
done so you want to signal async or
 

00:09:44.420 --> 00:09:46.510
done so you want to signal async or
completion to us and for that we use a

00:09:46.510 --> 00:09:46.520
completion to us and for that we use a
 

00:09:46.520 --> 00:09:48.850
completion to us and for that we use a
class called listenable future those of

00:09:48.850 --> 00:09:48.860
class called listenable future those of
 

00:09:48.860 --> 00:09:50.620
class called listenable future those of
you who use guava will be very familiar

00:09:50.620 --> 00:09:50.630
you who use guava will be very familiar
 

00:09:50.630 --> 00:09:54.010
you who use guava will be very familiar
with this but we split it out and the

00:09:54.010 --> 00:09:54.020
with this but we split it out and the
 

00:09:54.020 --> 00:09:55.330
with this but we split it out and the
guava team has helped us with this so

00:09:55.330 --> 00:09:55.340
guava team has helped us with this so
 

00:09:55.340 --> 00:09:57.250
guava team has helped us with this so
everybody's collaboratively worked on

00:09:57.250 --> 00:09:57.260
everybody's collaboratively worked on
 

00:09:57.260 --> 00:09:58.390
everybody's collaboratively worked on
splitting this out to its own

00:09:58.390 --> 00:09:58.400
splitting this out to its own
 

00:09:58.400 --> 00:09:59.980
splitting this out to its own
lightweight artifact so you don't need a

00:09:59.980 --> 00:09:59.990
lightweight artifact so you don't need a
 

00:09:59.990 --> 00:10:02.200
lightweight artifact so you don't need a
full guava dependency for this it's

00:10:02.200 --> 00:10:02.210
full guava dependency for this it's
 

00:10:02.210 --> 00:10:05.350
full guava dependency for this it's
literally one one or two classes now and

00:10:05.350 --> 00:10:05.360
literally one one or two classes now and
 

00:10:05.360 --> 00:10:07.720
literally one one or two classes now and
it's a future that can have one or more

00:10:07.720 --> 00:10:07.730
it's a future that can have one or more
 

00:10:07.730 --> 00:10:10.060
it's a future that can have one or more
listeners and those listeners can be

00:10:10.060 --> 00:10:10.070
listeners and those listeners can be
 

00:10:10.070 --> 00:10:11.800
listeners and those listeners can be
invoked on a specified executor that's

00:10:11.800 --> 00:10:11.810
invoked on a specified executor that's
 

00:10:11.810 --> 00:10:13.710
invoked on a specified executor that's
all it is it's very simple

00:10:13.710 --> 00:10:13.720
all it is it's very simple
 

00:10:13.720 --> 00:10:16.270
all it is it's very simple
so using this little future we made a

00:10:16.270 --> 00:10:16.280
so using this little future we made a
 

00:10:16.280 --> 00:10:18.130
so using this little future we made a
class called listenable worker which

00:10:18.130 --> 00:10:18.140
class called listenable worker which
 

00:10:18.140 --> 00:10:19.630
class called listenable worker which
only has one method that you need to

00:10:19.630 --> 00:10:19.640
only has one method that you need to
 

00:10:19.640 --> 00:10:21.850
only has one method that you need to
override it's called start work will

00:10:21.850 --> 00:10:21.860
override it's called start work will
 

00:10:21.860 --> 00:10:23.650
override it's called start work will
call start work on the main thread for

00:10:23.650 --> 00:10:23.660
call start work on the main thread for
 

00:10:23.660 --> 00:10:25.300
call start work on the main thread for
you you give us back a list of all

00:10:25.300 --> 00:10:25.310
you you give us back a list of all
 

00:10:25.310 --> 00:10:28.060
you you give us back a list of all
future you do whatever work you want on

00:10:28.060 --> 00:10:28.070
future you do whatever work you want on
 

00:10:28.070 --> 00:10:29.860
future you do whatever work you want on
whatever thread you want and when you're

00:10:29.860 --> 00:10:29.870
whatever thread you want and when you're
 

00:10:29.870 --> 00:10:32.140
whatever thread you want and when you're
done just set the result on the future

00:10:32.140 --> 00:10:32.150
done just set the result on the future
 

00:10:32.150 --> 00:10:34.450
done just set the result on the future
and we'll be able to listen for it and

00:10:34.450 --> 00:10:34.460
and we'll be able to listen for it and
 

00:10:34.460 --> 00:10:36.600
and we'll be able to listen for it and
we'll be able to react to it

00:10:36.600 --> 00:10:36.610
we'll be able to react to it
 

00:10:36.610 --> 00:10:38.980
we'll be able to react to it
so the actual threading model in work

00:10:38.980 --> 00:10:38.990
so the actual threading model in work
 

00:10:38.990 --> 00:10:40.930
so the actual threading model in work
manager is after your constraints are

00:10:40.930 --> 00:10:40.940
manager is after your constraints are
 

00:10:40.940 --> 00:10:43.540
manager is after your constraints are
met it goes to the test executor which

00:10:43.540 --> 00:10:43.550
met it goes to the test executor which
 

00:10:43.550 --> 00:10:45.280
met it goes to the test executor which
uses the worker Factory to create a list

00:10:45.280 --> 00:10:45.290
uses the worker Factory to create a list
 

00:10:45.290 --> 00:10:48.730
uses the worker Factory to create a list
of all worker we call start work on it

00:10:48.730 --> 00:10:48.740
of all worker we call start work on it
 

00:10:48.740 --> 00:10:52.090
of all worker we call start work on it
and we also attach a listener so we can

00:10:52.090 --> 00:10:52.100
and we also attach a listener so we can
 

00:10:52.100 --> 00:10:56.200
and we also attach a listener so we can
listen to whenever you're done what this

00:10:56.200 --> 00:10:56.210
listen to whenever you're done what this
 

00:10:56.210 --> 00:10:57.700
listen to whenever you're done what this
means is that the worker class which is

00:10:57.700 --> 00:10:57.710
means is that the worker class which is
 

00:10:57.710 --> 00:10:59.530
means is that the worker class which is
still around is a simple listenable

00:10:59.530 --> 00:10:59.540
still around is a simple listenable
 

00:10:59.540 --> 00:11:02.560
still around is a simple listenable
worker so we've got the do work method

00:11:02.560 --> 00:11:02.570
worker so we've got the do work method
 

00:11:02.570 --> 00:11:05.199
worker so we've got the do work method
that we talked about we override the

00:11:05.199 --> 00:11:05.209
that we talked about we override the
 

00:11:05.209 --> 00:11:07.610
that we talked about we override the
start work for you we create a future

00:11:07.610 --> 00:11:07.620
start work for you we create a future
 

00:11:07.620 --> 00:11:09.650
start work for you we create a future
on that background executor that I

00:11:09.650 --> 00:11:09.660
on that background executor that I
 

00:11:09.660 --> 00:11:11.030
on that background executor that I
talked about the one we provide by

00:11:11.030 --> 00:11:11.040
talked about the one we provide by
 

00:11:11.040 --> 00:11:14.330
talked about the one we provide by
default we execute the work and we of

00:11:14.330 --> 00:11:14.340
default we execute the work and we of
 

00:11:14.340 --> 00:11:19.040
default we execute the work and we of
course return the future so now we have

00:11:19.040 --> 00:11:19.050
course return the future so now we have
 

00:11:19.050 --> 00:11:21.410
course return the future so now we have
two classes worker and listenable worker

00:11:21.410 --> 00:11:21.420
two classes worker and listenable worker
 

00:11:21.420 --> 00:11:23.320
two classes worker and listenable worker
what's the differences between them

00:11:23.320 --> 00:11:23.330
what's the differences between them
 

00:11:23.330 --> 00:11:26.290
what's the differences between them
workers we consider those a simple class

00:11:26.290 --> 00:11:26.300
workers we consider those a simple class
 

00:11:26.300 --> 00:11:28.970
workers we consider those a simple class
for most use cases we think that

00:11:28.970 --> 00:11:28.980
for most use cases we think that
 

00:11:28.980 --> 00:11:31.250
for most use cases we think that
sufficient is a class that runs

00:11:31.250 --> 00:11:31.260
sufficient is a class that runs
 

00:11:31.260 --> 00:11:32.900
sufficient is a class that runs
synchronously and on a pre-specified

00:11:32.900 --> 00:11:32.910
synchronously and on a pre-specified
 

00:11:32.910 --> 00:11:35.900
synchronously and on a pre-specified
background thread list of all worker

00:11:35.900 --> 00:11:35.910
background thread list of all worker
 

00:11:35.910 --> 00:11:38.690
background thread list of all worker
runs asynchronously on us unspecified

00:11:38.690 --> 00:11:38.700
runs asynchronously on us unspecified
 

00:11:38.700 --> 00:11:41.390
runs asynchronously on us unspecified
background thread so worker do work is a

00:11:41.390 --> 00:11:41.400
background thread so worker do work is a
 

00:11:41.400 --> 00:11:43.850
background thread so worker do work is a
synchronous API you're expected to

00:11:43.850 --> 00:11:43.860
synchronous API you're expected to
 

00:11:43.860 --> 00:11:47.120
synchronous API you're expected to
finish what you're doing there if you're

00:11:47.120 --> 00:11:47.130
finish what you're doing there if you're
 

00:11:47.130 --> 00:11:48.680
finish what you're doing there if you're
trying to create a list of all worker

00:11:48.680 --> 00:11:48.690
trying to create a list of all worker
 

00:11:48.690 --> 00:11:50.420
trying to create a list of all worker
you may need to return a list of all

00:11:50.420 --> 00:11:50.430
you may need to return a list of all
 

00:11:50.430 --> 00:11:53.150
you may need to return a list of all
future which is an interface if you have

00:11:53.150 --> 00:11:53.160
future which is an interface if you have
 

00:11:53.160 --> 00:11:55.730
future which is an interface if you have
access to guava you have access to many

00:11:55.730 --> 00:11:55.740
access to guava you have access to many
 

00:11:55.740 --> 00:11:57.620
access to guava you have access to many
tens of list of all futures if you don't

00:11:57.620 --> 00:11:57.630
tens of list of all futures if you don't
 

00:11:57.630 --> 00:11:59.120
tens of list of all futures if you don't
have access to guava or don't want to

00:11:59.120 --> 00:11:59.130
have access to guava or don't want to
 

00:11:59.130 --> 00:12:01.820
have access to guava or don't want to
add the dependency resolvable future is

00:12:01.820 --> 00:12:01.830
add the dependency resolvable future is
 

00:12:01.830 --> 00:12:03.350
add the dependency resolvable future is
a lightweight implementation that we

00:12:03.350 --> 00:12:03.360
a lightweight implementation that we
 

00:12:03.360 --> 00:12:05.720
a lightweight implementation that we
provide in Android X concurrent

00:12:05.720 --> 00:12:05.730
provide in Android X concurrent
 

00:12:05.730 --> 00:12:07.720
provide in Android X concurrent
concurrent futures so you can use that

00:12:07.720 --> 00:12:07.730
concurrent futures so you can use that
 

00:12:07.730 --> 00:12:10.550
concurrent futures so you can use that
so let's look at an example one of the

00:12:10.550 --> 00:12:10.560
so let's look at an example one of the
 

00:12:10.560 --> 00:12:12.470
so let's look at an example one of the
things that a lot of people are trying

00:12:12.470 --> 00:12:12.480
things that a lot of people are trying
 

00:12:12.480 --> 00:12:15.410
things that a lot of people are trying
and doing incorrectly with workers is

00:12:15.410 --> 00:12:15.420
and doing incorrectly with workers is
 

00:12:15.420 --> 00:12:17.060
and doing incorrectly with workers is
that they're trying to get locations and

00:12:17.060 --> 00:12:17.070
that they're trying to get locations and
 

00:12:17.070 --> 00:12:19.490
that they're trying to get locations and
we're gonna specifically use the fused

00:12:19.490 --> 00:12:19.500
we're gonna specifically use the fused
 

00:12:19.500 --> 00:12:21.200
we're gonna specifically use the fused
location provider clients so if you

00:12:21.200 --> 00:12:21.210
location provider clients so if you
 

00:12:21.210 --> 00:12:23.240
location provider clients so if you
listen to the cotton suspenders talk

00:12:23.240 --> 00:12:23.250
listen to the cotton suspenders talk
 

00:12:23.250 --> 00:12:25.970
listen to the cotton suspenders talk
yesterday they also use this it's a GM s

00:12:25.970 --> 00:12:25.980
yesterday they also use this it's a GM s
 

00:12:25.980 --> 00:12:28.370
yesterday they also use this it's a GM s
core API to asynchronously get your

00:12:28.370 --> 00:12:28.380
core API to asynchronously get your
 

00:12:28.380 --> 00:12:33.050
core API to asynchronously get your
location remember that a worker class is

00:12:33.050 --> 00:12:33.060
location remember that a worker class is
 

00:12:33.060 --> 00:12:34.850
location remember that a worker class is
synchronous so if you attach a callback

00:12:34.850 --> 00:12:34.860
synchronous so if you attach a callback
 

00:12:34.860 --> 00:12:36.770
synchronous so if you attach a callback
and later get informed about it but

00:12:36.770 --> 00:12:36.780
and later get informed about it but
 

00:12:36.780 --> 00:12:39.950
and later get informed about it but
returns success you your work is already

00:12:39.950 --> 00:12:39.960
returns success you your work is already
 

00:12:39.960 --> 00:12:41.450
returns success you your work is already
completed it's not gonna work the way

00:12:41.450 --> 00:12:41.460
completed it's not gonna work the way
 

00:12:41.460 --> 00:12:44.240
completed it's not gonna work the way
you think it is so first thing we do

00:12:44.240 --> 00:12:44.250
you think it is so first thing we do
 

00:12:44.250 --> 00:12:45.950
you think it is so first thing we do
here we're using a list of all worker is

00:12:45.950 --> 00:12:45.960
here we're using a list of all worker is
 

00:12:45.960 --> 00:12:48.020
here we're using a list of all worker is
we create a resolvable futures so this

00:12:48.020 --> 00:12:48.030
we create a resolvable futures so this
 

00:12:48.030 --> 00:12:49.730
we create a resolvable futures so this
is the future that will return and do

00:12:49.730 --> 00:12:49.740
is the future that will return and do
 

00:12:49.740 --> 00:12:52.280
is the future that will return and do
all our bookkeeping on in the start work

00:12:52.280 --> 00:12:52.290
all our bookkeeping on in the start work
 

00:12:52.290 --> 00:12:53.720
all our bookkeeping on in the start work
method we'll check to see if we have

00:12:53.720 --> 00:12:53.730
method we'll check to see if we have
 

00:12:53.730 --> 00:12:56.810
method we'll check to see if we have
permissions if we don't we'll set of

00:12:56.810 --> 00:12:56.820
permissions if we don't we'll set of
 

00:12:56.820 --> 00:13:00.170
permissions if we don't we'll set of
tail here on the future otherwise what

00:13:00.170 --> 00:13:00.180
tail here on the future otherwise what
 

00:13:00.180 --> 00:13:02.300
tail here on the future otherwise what
we'll do is we'll get that fuse location

00:13:02.300 --> 00:13:02.310
we'll do is we'll get that fuse location
 

00:13:02.310 --> 00:13:04.820
we'll do is we'll get that fuse location
providers last location this is kind of

00:13:04.820 --> 00:13:04.830
providers last location this is kind of
 

00:13:04.830 --> 00:13:08.300
providers last location this is kind of
like a future in GMS core or Google Play

00:13:08.300 --> 00:13:08.310
like a future in GMS core or Google Play
 

00:13:08.310 --> 00:13:11.900
like a future in GMS core or Google Play
services world and we'll call this get

00:13:11.900 --> 00:13:11.910
services world and we'll call this get
 

00:13:11.910 --> 00:13:13.430
services world and we'll call this get
location method which I'll go into and

00:13:13.430 --> 00:13:13.440
location method which I'll go into and
 

00:13:13.440 --> 00:13:15.500
location method which I'll go into and
then we return the future so that's sort

00:13:15.500 --> 00:13:15.510
then we return the future so that's sort
 

00:13:15.510 --> 00:13:18.620
then we return the future so that's sort
of the high level start work in the low

00:13:18.620 --> 00:13:18.630
of the high level start work in the low
 

00:13:18.630 --> 00:13:19.530
of the high level start work in the low
K

00:13:19.530 --> 00:13:19.540
K
 

00:13:19.540 --> 00:13:23.160
K
get location method will use that task

00:13:23.160 --> 00:13:23.170
get location method will use that task
 

00:13:23.170 --> 00:13:26.460
get location method will use that task
and will add a listener to it if the

00:13:26.460 --> 00:13:26.470
and will add a listener to it if the
 

00:13:26.470 --> 00:13:28.290
and will add a listener to it if the
task is successful we'll pass that

00:13:28.290 --> 00:13:28.300
task is successful we'll pass that
 

00:13:28.300 --> 00:13:29.960
task is successful we'll pass that
location back with a success status

00:13:29.960 --> 00:13:29.970
location back with a success status
 

00:13:29.970 --> 00:13:32.340
location back with a success status
otherwise we'll set an exception on the

00:13:32.340 --> 00:13:32.350
otherwise we'll set an exception on the
 

00:13:32.350 --> 00:13:34.380
otherwise we'll set an exception on the
future so that's it we've basically

00:13:34.380 --> 00:13:34.390
future so that's it we've basically
 

00:13:34.390 --> 00:13:37.080
future so that's it we've basically
addressed like the the three cases where

00:13:37.080 --> 00:13:37.090
addressed like the the three cases where
 

00:13:37.090 --> 00:13:39.210
addressed like the the three cases where
we want to have a successful or an

00:13:39.210 --> 00:13:39.220
we want to have a successful or an
 

00:13:39.220 --> 00:13:40.920
we want to have a successful or an
unsuccessful task or if we don't have

00:13:40.920 --> 00:13:40.930
unsuccessful task or if we don't have
 

00:13:40.930 --> 00:13:43.950
unsuccessful task or if we don't have
permissions and work manager we'll

00:13:43.950 --> 00:13:43.960
permissions and work manager we'll
 

00:13:43.960 --> 00:13:45.060
permissions and work manager we'll
attach that listener

00:13:45.060 --> 00:13:45.070
attach that listener
 

00:13:45.070 --> 00:13:46.530
attach that listener
it'll listen to the success or failure

00:13:46.530 --> 00:13:46.540
it'll listen to the success or failure
 

00:13:46.540 --> 00:13:48.480
it'll listen to the success or failure
of their task and do the bookkeeping as

00:13:48.480 --> 00:13:48.490
of their task and do the bookkeeping as
 

00:13:48.490 --> 00:13:52.530
of their task and do the bookkeeping as
necessary all right let's talk about

00:13:52.530 --> 00:13:52.540
necessary all right let's talk about
 

00:13:52.540 --> 00:13:55.680
necessary all right let's talk about
operations no remember soonish mentioned

00:13:55.680 --> 00:13:55.690
operations no remember soonish mentioned
 

00:13:55.690 --> 00:13:57.570
operations no remember soonish mentioned
that work manager uses a database as a

00:13:57.570 --> 00:13:57.580
that work manager uses a database as a
 

00:13:57.580 --> 00:13:59.910
that work manager uses a database as a
source of truth so any any time you end

00:13:59.910 --> 00:13:59.920
source of truth so any any time you end
 

00:13:59.920 --> 00:14:02.370
source of truth so any any time you end
you or you cancel work we have to do

00:14:02.370 --> 00:14:02.380
you or you cancel work we have to do
 

00:14:02.380 --> 00:14:03.540
you or you cancel work we have to do
some bookkeeping and we have to make

00:14:03.540 --> 00:14:03.550
some bookkeeping and we have to make
 

00:14:03.550 --> 00:14:05.520
some bookkeeping and we have to make
sure we keep track of what your

00:14:05.520 --> 00:14:05.530
sure we keep track of what your
 

00:14:05.530 --> 00:14:08.040
sure we keep track of what your
intention to there so these involve

00:14:08.040 --> 00:14:08.050
intention to there so these involve
 

00:14:08.050 --> 00:14:09.840
intention to there so these involve
writes to a database and because they're

00:14:09.840 --> 00:14:09.850
writes to a database and because they're
 

00:14:09.850 --> 00:14:11.670
writes to a database and because they're
there are rights to our database we have

00:14:11.670 --> 00:14:11.680
there are rights to our database we have
 

00:14:11.680 --> 00:14:12.810
there are rights to our database we have
to do them on a background thread

00:14:12.810 --> 00:14:12.820
to do them on a background thread
 

00:14:12.820 --> 00:14:17.010
to do them on a background thread
so as a result they're asynchronous what

00:14:17.010 --> 00:14:17.020
so as a result they're asynchronous what
 

00:14:17.020 --> 00:14:18.480
so as a result they're asynchronous what
if you actually wanted to do something

00:14:18.480 --> 00:14:18.490
if you actually wanted to do something
 

00:14:18.490 --> 00:14:20.820
if you actually wanted to do something
after the end queue happened or the

00:14:20.820 --> 00:14:20.830
after the end queue happened or the
 

00:14:20.830 --> 00:14:22.230
after the end queue happened or the
cancel happen so you want to make sure

00:14:22.230 --> 00:14:22.240
cancel happen so you want to make sure
 

00:14:22.240 --> 00:14:24.330
cancel happen so you want to make sure
that those operations completed before

00:14:24.330 --> 00:14:24.340
that those operations completed before
 

00:14:24.340 --> 00:14:27.330
that those operations completed before
you want to do some more stuff so for

00:14:27.330 --> 00:14:27.340
you want to do some more stuff so for
 

00:14:27.340 --> 00:14:30.450
you want to do some more stuff so for
that we've introduced a new API so now

00:14:30.450 --> 00:14:30.460
that we've introduced a new API so now
 

00:14:30.460 --> 00:14:32.460
that we've introduced a new API so now
in queue and cancel actually return a

00:14:32.460 --> 00:14:32.470
in queue and cancel actually return a
 

00:14:32.470 --> 00:14:35.550
in queue and cancel actually return a
new type called operation operation is a

00:14:35.550 --> 00:14:35.560
new type called operation operation is a
 

00:14:35.560 --> 00:14:37.440
new type called operation operation is a
very simple interface it has two methods

00:14:37.440 --> 00:14:37.450
very simple interface it has two methods
 

00:14:37.450 --> 00:14:40.800
very simple interface it has two methods
so it has a get state API which returns

00:14:40.800 --> 00:14:40.810
so it has a get state API which returns
 

00:14:40.810 --> 00:14:43.470
so it has a get state API which returns
a live data of an operation dot state if

00:14:43.470 --> 00:14:43.480
a live data of an operation dot state if
 

00:14:43.480 --> 00:14:45.390
a live data of an operation dot state if
you attach an observer to this live data

00:14:45.390 --> 00:14:45.400
you attach an observer to this live data
 

00:14:45.400 --> 00:14:47.460
you attach an observer to this live data
you will see that the operation

00:14:47.460 --> 00:14:47.470
you will see that the operation
 

00:14:47.470 --> 00:14:49.410
you will see that the operation
transitions from in progress to a

00:14:49.410 --> 00:14:49.420
transitions from in progress to a
 

00:14:49.420 --> 00:14:52.440
transitions from in progress to a
successful or failure you can also call

00:14:52.440 --> 00:14:52.450
successful or failure you can also call
 

00:14:52.450 --> 00:14:54.720
successful or failure you can also call
get result and this returns the familiar

00:14:54.720 --> 00:14:54.730
get result and this returns the familiar
 

00:14:54.730 --> 00:14:57.000
get result and this returns the familiar
listenable feature type and remember

00:14:57.000 --> 00:14:57.010
listenable feature type and remember
 

00:14:57.010 --> 00:14:59.340
listenable feature type and remember
that this API will only return the

00:14:59.340 --> 00:14:59.350
that this API will only return the
 

00:14:59.350 --> 00:15:01.500
that this API will only return the
terminal state of the operation it won't

00:15:01.500 --> 00:15:01.510
terminal state of the operation it won't
 

00:15:01.510 --> 00:15:03.120
terminal state of the operation it won't
give you the intermediate state so if

00:15:03.120 --> 00:15:03.130
give you the intermediate state so if
 

00:15:03.130 --> 00:15:04.980
give you the intermediate state so if
you're attaching a listener you will

00:15:04.980 --> 00:15:04.990
you're attaching a listener you will
 

00:15:04.990 --> 00:15:07.620
you're attaching a listener you will
only ever get a success or failed and

00:15:07.620 --> 00:15:07.630
only ever get a success or failed and
 

00:15:07.630 --> 00:15:09.840
only ever get a success or failed and
with the exceptions and Turing you why

00:15:09.840 --> 00:15:09.850
with the exceptions and Turing you why
 

00:15:09.850 --> 00:15:15.690
with the exceptions and Turing you why
the failure happened another question a

00:15:15.690 --> 00:15:15.700
the failure happened another question a
 

00:15:15.700 --> 00:15:18.570
the failure happened another question a
lot of people have is when is work

00:15:18.570 --> 00:15:18.580
lot of people have is when is work
 

00:15:18.580 --> 00:15:21.090
lot of people have is when is work
stopped what happens when you stop work

00:15:21.090 --> 00:15:21.100
stopped what happens when you stop work
 

00:15:21.100 --> 00:15:26.490
stopped what happens when you stop work
on behalf of work manager yeah all right

00:15:26.490 --> 00:15:26.500
on behalf of work manager yeah all right
 

00:15:26.500 --> 00:15:27.210
on behalf of work manager yeah all right
so

00:15:27.210 --> 00:15:27.220
so
 

00:15:27.220 --> 00:15:29.340
so
there's three cases when work is stopped

00:15:29.340 --> 00:15:29.350
there's three cases when work is stopped
 

00:15:29.350 --> 00:15:31.050
there's three cases when work is stopped
the first day is very simple your

00:15:31.050 --> 00:15:31.060
the first day is very simple your
 

00:15:31.060 --> 00:15:32.639
the first day is very simple your
constraints are no longer met so you

00:15:32.639 --> 00:15:32.649
constraints are no longer met so you
 

00:15:32.649 --> 00:15:34.439
constraints are no longer met so you
said for example that I need a network

00:15:34.439 --> 00:15:34.449
said for example that I need a network
 

00:15:34.449 --> 00:15:37.050
said for example that I need a network
to do this upload task but your network

00:15:37.050 --> 00:15:37.060
to do this upload task but your network
 

00:15:37.060 --> 00:15:38.759
to do this upload task but your network
got lost so we will stop your work at

00:15:38.759 --> 00:15:38.769
got lost so we will stop your work at
 

00:15:38.769 --> 00:15:41.369
got lost so we will stop your work at
that point a second case is that they

00:15:41.369 --> 00:15:41.379
that point a second case is that they
 

00:15:41.379 --> 00:15:42.840
that point a second case is that they
always preempted your work for some

00:15:42.840 --> 00:15:42.850
always preempted your work for some
 

00:15:42.850 --> 00:15:44.429
always preempted your work for some
reason for example you exceeded the

00:15:44.429 --> 00:15:44.439
reason for example you exceeded the
 

00:15:44.439 --> 00:15:46.139
reason for example you exceeded the
10-minute time limit that the OS gives

00:15:46.139 --> 00:15:46.149
10-minute time limit that the OS gives
 

00:15:46.149 --> 00:15:49.889
10-minute time limit that the OS gives
you to do your work or the device

00:15:49.889 --> 00:15:49.899
you to do your work or the device
 

00:15:49.899 --> 00:15:51.660
you to do your work or the device
decided to go into doze mode for battery

00:15:51.660 --> 00:15:51.670
decided to go into doze mode for battery
 

00:15:51.670 --> 00:15:54.660
decided to go into doze mode for battery
savings or something like that and the

00:15:54.660 --> 00:15:54.670
savings or something like that and the
 

00:15:54.670 --> 00:15:56.369
savings or something like that and the
third reason is that you just cancelled

00:15:56.369 --> 00:15:56.379
third reason is that you just cancelled
 

00:15:56.379 --> 00:16:00.119
third reason is that you just cancelled
your work somewhere else in your app how

00:16:00.119 --> 00:16:00.129
your work somewhere else in your app how
 

00:16:00.129 --> 00:16:02.160
your work somewhere else in your app how
do we stop work there's a method

00:16:02.160 --> 00:16:02.170
do we stop work there's a method
 

00:16:02.170 --> 00:16:04.679
do we stop work there's a method
listenable worker on stopped we call

00:16:04.679 --> 00:16:04.689
listenable worker on stopped we call
 

00:16:04.689 --> 00:16:06.569
listenable worker on stopped we call
this method when we stop so just

00:16:06.569 --> 00:16:06.579
this method when we stop so just
 

00:16:06.579 --> 00:16:08.009
this method when we stop so just
override this and you get your cancel

00:16:08.009 --> 00:16:08.019
override this and you get your cancel
 

00:16:08.019 --> 00:16:10.259
override this and you get your cancel
your stop signal right there we also

00:16:10.259 --> 00:16:10.269
your stop signal right there we also
 

00:16:10.269 --> 00:16:11.759
your stop signal right there we also
cancel that future that we talked about

00:16:11.759 --> 00:16:11.769
cancel that future that we talked about
 

00:16:11.769 --> 00:16:13.050
cancel that future that we talked about
so you can also just add your own

00:16:13.050 --> 00:16:13.060
so you can also just add your own
 

00:16:13.060 --> 00:16:16.710
so you can also just add your own
listener and look for that so this is

00:16:16.710 --> 00:16:16.720
listener and look for that so this is
 

00:16:16.720 --> 00:16:18.179
listener and look for that so this is
you're one of them in one of these two

00:16:18.179 --> 00:16:18.189
you're one of them in one of these two
 

00:16:18.189 --> 00:16:19.650
you're one of them in one of these two
things happens for you whichever one

00:16:19.650 --> 00:16:19.660
things happens for you whichever one
 

00:16:19.660 --> 00:16:20.970
things happens for you whichever one
you're looking at this is your signal to

00:16:20.970 --> 00:16:20.980
you're looking at this is your signal to
 

00:16:20.980 --> 00:16:23.970
you're looking at this is your signal to
be a good citizen and clean up because

00:16:23.970 --> 00:16:23.980
be a good citizen and clean up because
 

00:16:23.980 --> 00:16:25.619
be a good citizen and clean up because
after this is called the process may be

00:16:25.619 --> 00:16:25.629
after this is called the process may be
 

00:16:25.629 --> 00:16:26.910
after this is called the process may be
killed by the OS

00:16:26.910 --> 00:16:26.920
killed by the OS
 

00:16:26.920 --> 00:16:30.689
killed by the OS
so if always woke up your apps process

00:16:30.689 --> 00:16:30.699
so if always woke up your apps process
 

00:16:30.699 --> 00:16:33.119
so if always woke up your apps process
just to run this work it could actually

00:16:33.119 --> 00:16:33.129
just to run this work it could actually
 

00:16:33.129 --> 00:16:35.400
just to run this work it could actually
kill it when it decides that the work

00:16:35.400 --> 00:16:35.410
kill it when it decides that the work
 

00:16:35.410 --> 00:16:39.749
kill it when it decides that the work
should stop and if you happen to return

00:16:39.749 --> 00:16:39.759
should stop and if you happen to return
 

00:16:39.759 --> 00:16:42.600
should stop and if you happen to return
something after this signal say you

00:16:42.600 --> 00:16:42.610
something after this signal say you
 

00:16:42.610 --> 00:16:44.519
something after this signal say you
return to success we ignore it because

00:16:44.519 --> 00:16:44.529
return to success we ignore it because
 

00:16:44.529 --> 00:16:46.559
return to success we ignore it because
as far as we're concerned your work has

00:16:46.559 --> 00:16:46.569
as far as we're concerned your work has
 

00:16:46.569 --> 00:16:48.509
as far as we're concerned your work has
been stopped whatever you're doing is no

00:16:48.509 --> 00:16:48.519
been stopped whatever you're doing is no
 

00:16:48.519 --> 00:16:51.929
been stopped whatever you're doing is no
longer necessary to be done you can also

00:16:51.929 --> 00:16:51.939
longer necessary to be done you can also
 

00:16:51.939 --> 00:16:54.030
longer necessary to be done you can also
pull for stoppages in your workers so

00:16:54.030 --> 00:16:54.040
pull for stoppages in your workers so
 

00:16:54.040 --> 00:16:55.889
pull for stoppages in your workers so
you can also call the is stopped method

00:16:55.889 --> 00:16:55.899
you can also call the is stopped method
 

00:16:55.899 --> 00:16:57.629
you can also call the is stopped method
and that'll fine that'll tell you

00:16:57.629 --> 00:16:57.639
and that'll fine that'll tell you
 

00:16:57.639 --> 00:16:59.100
and that'll fine that'll tell you
whether you've been signaled for

00:16:59.100 --> 00:16:59.110
whether you've been signaled for
 

00:16:59.110 --> 00:17:01.829
whether you've been signaled for
stopping so let's look at how you can be

00:17:01.829 --> 00:17:01.839
stopping so let's look at how you can be
 

00:17:01.839 --> 00:17:04.890
stopping so let's look at how you can be
a good citizen and clean up so let's say

00:17:04.890 --> 00:17:04.900
a good citizen and clean up so let's say
 

00:17:04.900 --> 00:17:06.390
a good citizen and clean up so let's say
your example in this example we're

00:17:06.390 --> 00:17:06.400
your example in this example we're
 

00:17:06.400 --> 00:17:08.130
your example in this example we're
parsing a file asynchronously let's say

00:17:08.130 --> 00:17:08.140
parsing a file asynchronously let's say
 

00:17:08.140 --> 00:17:09.569
parsing a file asynchronously let's say
it's a huge file so you're doing it in a

00:17:09.569 --> 00:17:09.579
it's a huge file so you're doing it in a
 

00:17:09.579 --> 00:17:12.630
it's a huge file so you're doing it in a
worker and you've got that familiar

00:17:12.630 --> 00:17:12.640
worker and you've got that familiar
 

00:17:12.640 --> 00:17:14.069
worker and you've got that familiar
resolvable future thing that I showed

00:17:14.069 --> 00:17:14.079
resolvable future thing that I showed
 

00:17:14.079 --> 00:17:15.809
resolvable future thing that I showed
you earlier you've also got this input

00:17:15.809 --> 00:17:15.819
you earlier you've also got this input
 

00:17:15.819 --> 00:17:18.179
you earlier you've also got this input
stream so you're reading a file right so

00:17:18.179 --> 00:17:18.189
stream so you're reading a file right so
 

00:17:18.189 --> 00:17:20.819
stream so you're reading a file right so
in start work you say parse file this is

00:17:20.819 --> 00:17:20.829
in start work you say parse file this is
 

00:17:20.829 --> 00:17:22.949
in start work you say parse file this is
doing something asynchronously and you

00:17:22.949 --> 00:17:22.959
doing something asynchronously and you
 

00:17:22.959 --> 00:17:24.260
doing something asynchronously and you
return the future

00:17:24.260 --> 00:17:24.270
return the future
 

00:17:24.270 --> 00:17:28.289
return the future
here's parse file so you've got some

00:17:28.289 --> 00:17:28.299
here's parse file so you've got some
 

00:17:28.299 --> 00:17:30.510
here's parse file so you've got some
executor or whatever I call routine it

00:17:30.510 --> 00:17:30.520
executor or whatever I call routine it
 

00:17:30.520 --> 00:17:31.980
executor or whatever I call routine it
doesn't matter it you're asynchronously

00:17:31.980 --> 00:17:31.990
doesn't matter it you're asynchronously
 

00:17:31.990 --> 00:17:35.490
doesn't matter it you're asynchronously
doing that runnable that follows so the

00:17:35.490 --> 00:17:35.500
doing that runnable that follows so the
 

00:17:35.500 --> 00:17:37.440
doing that runnable that follows so the
first thing you might be doing is you're

00:17:37.440 --> 00:17:37.450
first thing you might be doing is you're
 

00:17:37.450 --> 00:17:39.870
first thing you might be doing is you're
opening a file you're reading each byte

00:17:39.870 --> 00:17:39.880
opening a file you're reading each byte
 

00:17:39.880 --> 00:17:41.250
opening a file you're reading each byte
out of the file doing some

00:17:41.250 --> 00:17:41.260
out of the file doing some
 

00:17:41.260 --> 00:17:43.169
out of the file doing some
with that bite and then when you're done

00:17:43.169 --> 00:17:43.179
with that bite and then when you're done
 

00:17:43.179 --> 00:17:44.820
with that bite and then when you're done
you set a success because you're done

00:17:44.820 --> 00:17:44.830
you set a success because you're done
 

00:17:44.830 --> 00:17:47.549
you set a success because you're done
and then you have the necessary try

00:17:47.549 --> 00:17:47.559
and then you have the necessary try
 

00:17:47.559 --> 00:17:50.190
and then you have the necessary try
catch finally after that so that you can

00:17:50.190 --> 00:17:50.200
catch finally after that so that you can
 

00:17:50.200 --> 00:17:53.159
catch finally after that so that you can
clean up after yourself so how do we

00:17:53.159 --> 00:17:53.169
clean up after yourself so how do we
 

00:17:53.169 --> 00:17:55.919
clean up after yourself so how do we
handle when your work gets stopped while

00:17:55.919 --> 00:17:55.929
handle when your work gets stopped while
 

00:17:55.929 --> 00:17:58.980
handle when your work gets stopped while
this is executing so like I said we

00:17:58.980 --> 00:17:58.990
this is executing so like I said we
 

00:17:58.990 --> 00:18:01.500
this is executing so like I said we
override Aeon stop method let's say that

00:18:01.500 --> 00:18:01.510
override Aeon stop method let's say that
 

00:18:01.510 --> 00:18:04.169
override Aeon stop method let's say that
we want to just finish what we're doing

00:18:04.169 --> 00:18:04.179
we want to just finish what we're doing
 

00:18:04.179 --> 00:18:06.419
we want to just finish what we're doing
we could easily just close that input

00:18:06.419 --> 00:18:06.429
we could easily just close that input
 

00:18:06.429 --> 00:18:09.990
we could easily just close that input
file stream okay so what happens now

00:18:09.990 --> 00:18:10.000
file stream okay so what happens now
 

00:18:10.000 --> 00:18:11.730
file stream okay so what happens now
you've done that let's go back to the

00:18:11.730 --> 00:18:11.740
you've done that let's go back to the
 

00:18:11.740 --> 00:18:14.549
you've done that let's go back to the
code well if you're in the middle of

00:18:14.549 --> 00:18:14.559
code well if you're in the middle of
 

00:18:14.559 --> 00:18:18.180
code well if you're in the middle of
that read loop and you close a file it

00:18:18.180 --> 00:18:18.190
that read loop and you close a file it
 

00:18:18.190 --> 00:18:19.560
that read loop and you close a file it
throws an exception right you next time

00:18:19.560 --> 00:18:19.570
throws an exception right you next time
 

00:18:19.570 --> 00:18:20.820
throws an exception right you next time
you try to read something well

00:18:20.820 --> 00:18:20.830
you try to read something well
 

00:18:20.830 --> 00:18:22.590
you try to read something well
fortunately you're already handling that

00:18:22.590 --> 00:18:22.600
fortunately you're already handling that
 

00:18:22.600 --> 00:18:24.960
fortunately you're already handling that
exception right there so it looks like

00:18:24.960 --> 00:18:24.970
exception right there so it looks like
 

00:18:24.970 --> 00:18:27.169
exception right there so it looks like
you're good right you you're you're done

00:18:27.169 --> 00:18:27.179
you're good right you you're you're done
 

00:18:27.179 --> 00:18:29.760
you're good right you you're you're done
or are you there's one more case that

00:18:29.760 --> 00:18:29.770
or are you there's one more case that
 

00:18:29.770 --> 00:18:32.520
or are you there's one more case that
you forgot about here which is that what

00:18:32.520 --> 00:18:32.530
you forgot about here which is that what
 

00:18:32.530 --> 00:18:34.590
you forgot about here which is that what
if the on stop happens before you even

00:18:34.590 --> 00:18:34.600
if the on stop happens before you even
 

00:18:34.600 --> 00:18:36.630
if the on stop happens before you even
open the file so now you're no longer

00:18:36.630 --> 00:18:36.640
open the file so now you're no longer
 

00:18:36.640 --> 00:18:39.030
open the file so now you're no longer
looking for that stop thing because you

00:18:39.030 --> 00:18:39.040
looking for that stop thing because you
 

00:18:39.040 --> 00:18:40.350
looking for that stop thing because you
never got that signal you'll read that

00:18:40.350 --> 00:18:40.360
never got that signal you'll read that
 

00:18:40.360 --> 00:18:43.320
never got that signal you'll read that
file because it opened after you tried

00:18:43.320 --> 00:18:43.330
file because it opened after you tried
 

00:18:43.330 --> 00:18:44.610
file because it opened after you tried
to close it which it didn't do anything

00:18:44.610 --> 00:18:44.620
to close it which it didn't do anything
 

00:18:44.620 --> 00:18:46.890
to close it which it didn't do anything
for so you'll do all of this work and

00:18:46.890 --> 00:18:46.900
for so you'll do all of this work and
 

00:18:46.900 --> 00:18:49.530
for so you'll do all of this work and
how you fix it is use that is stop

00:18:49.530 --> 00:18:49.540
how you fix it is use that is stop
 

00:18:49.540 --> 00:18:51.930
how you fix it is use that is stop
method so basically while you're in that

00:18:51.930 --> 00:18:51.940
method so basically while you're in that
 

00:18:51.940 --> 00:18:53.880
method so basically while you're in that
loop you can always just make sure that

00:18:53.880 --> 00:18:53.890
loop you can always just make sure that
 

00:18:53.890 --> 00:18:55.650
loop you can always just make sure that
you're looking for stoppages so this is

00:18:55.650 --> 00:18:55.660
you're looking for stoppages so this is
 

00:18:55.660 --> 00:18:57.710
you're looking for stoppages so this is
a good example of how you would honor

00:18:57.710 --> 00:18:57.720
a good example of how you would honor
 

00:18:57.720 --> 00:19:00.570
a good example of how you would honor
the OSS signal to you or work managers

00:19:00.570 --> 00:19:00.580
the OSS signal to you or work managers
 

00:19:00.580 --> 00:19:02.130
the OSS signal to you or work managers
signal to you that you should stop and

00:19:02.130 --> 00:19:02.140
signal to you that you should stop and
 

00:19:02.140 --> 00:19:06.570
signal to you that you should stop and
be a good citizen right so every time

00:19:06.570 --> 00:19:06.580
be a good citizen right so every time
 

00:19:06.580 --> 00:19:09.450
be a good citizen right so every time
you in queue a method or in every time

00:19:09.450 --> 00:19:09.460
you in queue a method or in every time
 

00:19:09.460 --> 00:19:10.890
you in queue a method or in every time
you in queue work request the work

00:19:10.890 --> 00:19:10.900
you in queue work request the work
 

00:19:10.900 --> 00:19:12.330
you in queue work request the work
request goes through several state

00:19:12.330 --> 00:19:12.340
request goes through several state
 

00:19:12.340 --> 00:19:14.280
request goes through several state
transitions and I'll talk about how they

00:19:14.280 --> 00:19:14.290
transitions and I'll talk about how they
 

00:19:14.290 --> 00:19:17.490
transitions and I'll talk about how they
look so let's look at life of a one-time

00:19:17.490 --> 00:19:17.500
look so let's look at life of a one-time
 

00:19:17.500 --> 00:19:19.380
look so let's look at life of a one-time
work request so when you in queue a new

00:19:19.380 --> 00:19:19.390
work request so when you in queue a new
 

00:19:19.390 --> 00:19:21.750
work request so when you in queue a new
work request it can end up in one of two

00:19:21.750 --> 00:19:21.760
work request it can end up in one of two
 

00:19:21.760 --> 00:19:23.760
work request it can end up in one of two
states it can be blocked if it's blocked

00:19:23.760 --> 00:19:23.770
states it can be blocked if it's blocked
 

00:19:23.770 --> 00:19:25.289
states it can be blocked if it's blocked
on another work request if you know

00:19:25.289 --> 00:19:25.299
on another work request if you know
 

00:19:25.299 --> 00:19:27.510
on another work request if you know
given it's a chain work or it can be in

00:19:27.510 --> 00:19:27.520
given it's a chain work or it can be in
 

00:19:27.520 --> 00:19:30.330
given it's a chain work or it can be in
queued once the constraints are met it

00:19:30.330 --> 00:19:30.340
queued once the constraints are met it
 

00:19:30.340 --> 00:19:32.580
queued once the constraints are met it
goes into running and this is the point

00:19:32.580 --> 00:19:32.590
goes into running and this is the point
 

00:19:32.590 --> 00:19:34.830
goes into running and this is the point
at which the worker is being actively

00:19:34.830 --> 00:19:34.840
at which the worker is being actively
 

00:19:34.840 --> 00:19:37.950
at which the worker is being actively
executed once depending on the result

00:19:37.950 --> 00:19:37.960
executed once depending on the result
 

00:19:37.960 --> 00:19:40.049
executed once depending on the result
that you returned on how you signal work

00:19:40.049 --> 00:19:40.059
that you returned on how you signal work
 

00:19:40.059 --> 00:19:41.700
that you returned on how you signal work
completion will take it to one of the

00:19:41.700 --> 00:19:41.710
completion will take it to one of the
 

00:19:41.710 --> 00:19:44.850
completion will take it to one of the
terminal states so if the worker returns

00:19:44.850 --> 00:19:44.860
terminal states so if the worker returns
 

00:19:44.860 --> 00:19:48.000
terminal states so if the worker returns
success then it's a terminate we will

00:19:48.000 --> 00:19:48.010
success then it's a terminate we will
 

00:19:48.010 --> 00:19:50.970
success then it's a terminate we will
terminate it with a succeeded state if

00:19:50.970 --> 00:19:50.980
terminate it with a succeeded state if
 

00:19:50.980 --> 00:19:52.770
terminate it with a succeeded state if
the worker returns a failure then we

00:19:52.770 --> 00:19:52.780
the worker returns a failure then we
 

00:19:52.780 --> 00:19:54.880
the worker returns a failure then we
will mark it as a failure and that

00:19:54.880 --> 00:19:54.890
will mark it as a failure and that
 

00:19:54.890 --> 00:19:57.670
will mark it as a failure and that
the terminal state at any point in time

00:19:57.670 --> 00:19:57.680
the terminal state at any point in time
 

00:19:57.680 --> 00:19:59.890
the terminal state at any point in time
while the worker was in a nonterminating

00:19:59.890 --> 00:19:59.900
while the worker was in a nonterminating
 

00:19:59.900 --> 00:20:01.960
while the worker was in a nonterminating
state if you call canceled then it is

00:20:01.960 --> 00:20:01.970
state if you call canceled then it is
 

00:20:01.970 --> 00:20:04.990
state if you call canceled then it is
sorry if you actually retry then we will

00:20:04.990 --> 00:20:05.000
sorry if you actually retry then we will
 

00:20:05.000 --> 00:20:06.490
sorry if you actually retry then we will
apply the back off policy and then we

00:20:06.490 --> 00:20:06.500
apply the back off policy and then we
 

00:20:06.500 --> 00:20:08.950
apply the back off policy and then we
will retry so the worker will go back to

00:20:08.950 --> 00:20:08.960
will retry so the worker will go back to
 

00:20:08.960 --> 00:20:10.540
will retry so the worker will go back to
the include State at any point in time

00:20:10.540 --> 00:20:10.550
the include State at any point in time
 

00:20:10.550 --> 00:20:13.120
the include State at any point in time
if you have a non terminating State and

00:20:13.120 --> 00:20:13.130
if you have a non terminating State and
 

00:20:13.130 --> 00:20:14.770
if you have a non terminating State and
you call cancel it will end up in

00:20:14.770 --> 00:20:14.780
you call cancel it will end up in
 

00:20:14.780 --> 00:20:17.680
you call cancel it will end up in
cancelled so this is what a life of a

00:20:17.680 --> 00:20:17.690
cancelled so this is what a life of a
 

00:20:17.690 --> 00:20:19.720
cancelled so this is what a life of a
one-time work request looks like now

00:20:19.720 --> 00:20:19.730
one-time work request looks like now
 

00:20:19.730 --> 00:20:22.630
one-time work request looks like now
let's look at periodic work periodic

00:20:22.630 --> 00:20:22.640
let's look at periodic work periodic
 

00:20:22.640 --> 00:20:25.510
let's look at periodic work periodic
work is almost the same because periodic

00:20:25.510 --> 00:20:25.520
work is almost the same because periodic
 

00:20:25.520 --> 00:20:26.670
work is almost the same because periodic
work can't be chained

00:20:26.670 --> 00:20:26.680
work can't be chained
 

00:20:26.680 --> 00:20:29.500
work can't be chained
there's no block state so it always ends

00:20:29.500 --> 00:20:29.510
there's no block state so it always ends
 

00:20:29.510 --> 00:20:31.300
there's no block state so it always ends
up in the end cute state once the

00:20:31.300 --> 00:20:31.310
up in the end cute state once the
 

00:20:31.310 --> 00:20:32.560
up in the end cute state once the
constraints are met it'll go into

00:20:32.560 --> 00:20:32.570
constraints are met it'll go into
 

00:20:32.570 --> 00:20:36.220
constraints are met it'll go into
running so whether whether you succeed

00:20:36.220 --> 00:20:36.230
running so whether whether you succeed
 

00:20:36.230 --> 00:20:38.140
running so whether whether you succeed
or you retry it will go back to the end

00:20:38.140 --> 00:20:38.150
or you retry it will go back to the end
 

00:20:38.150 --> 00:20:39.630
or you retry it will go back to the end
cute state now this might seem confusing

00:20:39.630 --> 00:20:39.640
cute state now this might seem confusing
 

00:20:39.640 --> 00:20:42.220
cute state now this might seem confusing
if you succeed then the work really

00:20:42.220 --> 00:20:42.230
if you succeed then the work really
 

00:20:42.230 --> 00:20:43.930
if you succeed then the work really
isn't done because it's a periodic work

00:20:43.930 --> 00:20:43.940
isn't done because it's a periodic work
 

00:20:43.940 --> 00:20:45.970
isn't done because it's a periodic work
we'll just wait for the next interval if

00:20:45.970 --> 00:20:45.980
we'll just wait for the next interval if
 

00:20:45.980 --> 00:20:49.270
we'll just wait for the next interval if
you fail and you ask us to retry then

00:20:49.270 --> 00:20:49.280
you fail and you ask us to retry then
 

00:20:49.280 --> 00:20:50.650
you fail and you ask us to retry then
we'll apply the appropriate back off

00:20:50.650 --> 00:20:50.660
we'll apply the appropriate back off
 

00:20:50.660 --> 00:20:52.810
we'll apply the appropriate back off
policy and then we'll increment the run

00:20:52.810 --> 00:20:52.820
policy and then we'll increment the run
 

00:20:52.820 --> 00:20:54.250
policy and then we'll increment the run
attempt account so we will tell you that

00:20:54.250 --> 00:20:54.260
attempt account so we will tell you that
 

00:20:54.260 --> 00:20:55.780
attempt account so we will tell you that
this is the second time that you're

00:20:55.780 --> 00:20:55.790
this is the second time that you're
 

00:20:55.790 --> 00:20:57.720
this is the second time that you're
trying to run it for that last period

00:20:57.720 --> 00:20:57.730
trying to run it for that last period
 

00:20:57.730 --> 00:21:02.710
trying to run it for that last period
and if you mark your work as failed then

00:21:02.710 --> 00:21:02.720
and if you mark your work as failed then
 

00:21:02.720 --> 00:21:04.600
and if you mark your work as failed then
we'll transition it to the failed state

00:21:04.600 --> 00:21:04.610
we'll transition it to the failed state
 

00:21:04.610 --> 00:21:06.460
we'll transition it to the failed state
at that point your periodic work won't

00:21:06.460 --> 00:21:06.470
at that point your periodic work won't
 

00:21:06.470 --> 00:21:09.460
at that point your periodic work won't
run again and again any time your work

00:21:09.460 --> 00:21:09.470
run again and again any time your work
 

00:21:09.470 --> 00:21:11.440
run again and again any time your work
is in a non terminal state and if you

00:21:11.440 --> 00:21:11.450
is in a non terminal state and if you
 

00:21:11.450 --> 00:21:12.940
is in a non terminal state and if you
ask us to cancel it we will mark it

00:21:12.940 --> 00:21:12.950
ask us to cancel it we will mark it
 

00:21:12.950 --> 00:21:16.630
ask us to cancel it we will mark it
cancelled so let's apply those rules to

00:21:16.630 --> 00:21:16.640
cancelled so let's apply those rules to
 

00:21:16.640 --> 00:21:18.910
cancelled so let's apply those rules to
how life of a chain of work looks like

00:21:18.910 --> 00:21:18.920
how life of a chain of work looks like
 

00:21:18.920 --> 00:21:22.570
how life of a chain of work looks like
so here is the parent of all workers so

00:21:22.570 --> 00:21:22.580
so here is the parent of all workers so
 

00:21:22.580 --> 00:21:24.550
so here is the parent of all workers so
when is when you include this chain of

00:21:24.550 --> 00:21:24.560
when is when you include this chain of
 

00:21:24.560 --> 00:21:27.310
when is when you include this chain of
work only is in the in queued state and

00:21:27.310 --> 00:21:27.320
work only is in the in queued state and
 

00:21:27.320 --> 00:21:29.380
work only is in the in queued state and
all descendants of a are actually

00:21:29.380 --> 00:21:29.390
all descendants of a are actually
 

00:21:29.390 --> 00:21:32.230
all descendants of a are actually
blocked now right so let's assume is

00:21:32.230 --> 00:21:32.240
blocked now right so let's assume is
 

00:21:32.240 --> 00:21:33.880
blocked now right so let's assume is
constraints are met and it goes into rot

00:21:33.880 --> 00:21:33.890
constraints are met and it goes into rot
 

00:21:33.890 --> 00:21:37.870
constraints are met and it goes into rot
running State once is done let's assume

00:21:37.870 --> 00:21:37.880
running State once is done let's assume
 

00:21:37.880 --> 00:21:39.940
running State once is done let's assume
it's exceeded so it unlocks B and C now

00:21:39.940 --> 00:21:39.950
it's exceeded so it unlocks B and C now
 

00:21:39.950 --> 00:21:43.210
it's exceeded so it unlocks B and C now
so B and C now become one Q and then

00:21:43.210 --> 00:21:43.220
so B and C now become one Q and then
 

00:21:43.220 --> 00:21:45.340
so B and C now become one Q and then
they go into running and for the sake of

00:21:45.340 --> 00:21:45.350
they go into running and for the sake of
 

00:21:45.350 --> 00:21:46.870
they go into running and for the sake of
the argument let's assume that B

00:21:46.870 --> 00:21:46.880
the argument let's assume that B
 

00:21:46.880 --> 00:21:49.500
the argument let's assume that B
succeeds and C fails what happens now

00:21:49.500 --> 00:21:49.510
succeeds and C fails what happens now
 

00:21:49.510 --> 00:21:54.220
succeeds and C fails what happens now
because we succeeded around box D so so

00:21:54.220 --> 00:21:54.230
because we succeeded around box D so so
 

00:21:54.230 --> 00:21:56.650
because we succeeded around box D so so
D goes tuned to the end cute State but

00:21:56.650 --> 00:21:56.660
D goes tuned to the end cute State but
 

00:21:56.660 --> 00:21:59.350
D goes tuned to the end cute State but
notice what happened to e FNG they all

00:21:59.350 --> 00:21:59.360
notice what happened to e FNG they all
 

00:21:59.360 --> 00:22:03.130
notice what happened to e FNG they all
failed so the key takeaway is that if a

00:22:03.130 --> 00:22:03.140
failed so the key takeaway is that if a
 

00:22:03.140 --> 00:22:05.530
failed so the key takeaway is that if a
unit of work fails then all descendant

00:22:05.530 --> 00:22:05.540
unit of work fails then all descendant
 

00:22:05.540 --> 00:22:08.140
unit of work fails then all descendant
work is also marked as failed if a unit

00:22:08.140 --> 00:22:08.150
work is also marked as failed if a unit
 

00:22:08.150 --> 00:22:08.770
work is also marked as failed if a unit
of work is

00:22:08.770 --> 00:22:08.780
of work is
 

00:22:08.780 --> 00:22:10.510
of work is
Hansol then all of its descendants are

00:22:10.510 --> 00:22:10.520
Hansol then all of its descendants are
 

00:22:10.520 --> 00:22:17.260
Hansol then all of its descendants are
also marked cancelled so I want to talk

00:22:17.260 --> 00:22:17.270
also marked cancelled so I want to talk
 

00:22:17.270 --> 00:22:19.270
also marked cancelled so I want to talk
about something called unique work and

00:22:19.270 --> 00:22:19.280
about something called unique work and
 

00:22:19.280 --> 00:22:22.060
about something called unique work and
let's start with a little question here

00:22:22.060 --> 00:22:22.070
let's start with a little question here
 

00:22:22.070 --> 00:22:24.250
let's start with a little question here
what's wrong with this code so you've

00:22:24.250 --> 00:22:24.260
what's wrong with this code so you've
 

00:22:24.260 --> 00:22:25.750
what's wrong with this code so you've
got an application object in the

00:22:25.750 --> 00:22:25.760
got an application object in the
 

00:22:25.760 --> 00:22:27.640
got an application object in the
oncreate you're in queueing some

00:22:27.640 --> 00:22:27.650
oncreate you're in queueing some
 

00:22:27.650 --> 00:22:30.520
oncreate you're in queueing some
periodic work the problem here and I've

00:22:30.520 --> 00:22:30.530
periodic work the problem here and I've
 

00:22:30.530 --> 00:22:33.220
periodic work the problem here and I've
seen this in a few bugs is that this in

00:22:33.220 --> 00:22:33.230
seen this in a few bugs is that this in
 

00:22:33.230 --> 00:22:34.840
seen this in a few bugs is that this in
queues periodic work every time your app

00:22:34.840 --> 00:22:34.850
queues periodic work every time your app
 

00:22:34.850 --> 00:22:37.120
queues periodic work every time your app
process starts and it's probably not

00:22:37.120 --> 00:22:37.130
process starts and it's probably not
 

00:22:37.130 --> 00:22:38.410
process starts and it's probably not
what you're trying to do you're trying

00:22:38.410 --> 00:22:38.420
what you're trying to do you're trying
 

00:22:38.420 --> 00:22:40.360
what you're trying to do you're trying
to do you're trying to set up a sink

00:22:40.360 --> 00:22:40.370
to do you're trying to set up a sink
 

00:22:40.370 --> 00:22:42.400
to do you're trying to set up a sink
here let's say it's you know syncing

00:22:42.400 --> 00:22:42.410
here let's say it's you know syncing
 

00:22:42.410 --> 00:22:45.460
here let's say it's you know syncing
your data every day if you if you call

00:22:45.460 --> 00:22:45.470
your data every day if you if you call
 

00:22:45.470 --> 00:22:47.190
your data every day if you if you call
this code every time the app starts

00:22:47.190 --> 00:22:47.200
this code every time the app starts
 

00:22:47.200 --> 00:22:49.510
this code every time the app starts
every time you've got another thing

00:22:49.510 --> 00:22:49.520
every time you've got another thing
 

00:22:49.520 --> 00:22:50.860
every time you've got another thing
that's syncing your code you really only

00:22:50.860 --> 00:22:50.870
that's syncing your code you really only
 

00:22:50.870 --> 00:22:53.920
that's syncing your code you really only
want one of them so unique work

00:22:53.920 --> 00:22:53.930
want one of them so unique work
 

00:22:53.930 --> 00:22:55.870
want one of them so unique work
basically is something that lets you

00:22:55.870 --> 00:22:55.880
basically is something that lets you
 

00:22:55.880 --> 00:22:58.150
basically is something that lets you
specify conflict policies for a database

00:22:58.150 --> 00:22:58.160
specify conflict policies for a database
 

00:22:58.160 --> 00:23:00.160
specify conflict policies for a database
insert think of it like that like if you

00:23:00.160 --> 00:23:00.170
insert think of it like that like if you
 

00:23:00.170 --> 00:23:01.900
insert think of it like that like if you
insert the same key into a database

00:23:01.900 --> 00:23:01.910
insert the same key into a database
 

00:23:01.910 --> 00:23:03.820
insert the same key into a database
again what do you want to happen do you

00:23:03.820 --> 00:23:03.830
again what do you want to happen do you
 

00:23:03.830 --> 00:23:05.380
again what do you want to happen do you
want to overwrite what's already in

00:23:05.380 --> 00:23:05.390
want to overwrite what's already in
 

00:23:05.390 --> 00:23:06.820
want to overwrite what's already in
there you want to ignore what you're

00:23:06.820 --> 00:23:06.830
there you want to ignore what you're
 

00:23:06.830 --> 00:23:08.950
there you want to ignore what you're
trying to do that's what unique work

00:23:08.950 --> 00:23:08.960
trying to do that's what unique work
 

00:23:08.960 --> 00:23:11.290
trying to do that's what unique work
does it basically is a conflict policy

00:23:11.290 --> 00:23:11.300
does it basically is a conflict policy
 

00:23:11.300 --> 00:23:14.110
does it basically is a conflict policy
for work manager and here's a syntax for

00:23:14.110 --> 00:23:14.120
for work manager and here's a syntax for
 

00:23:14.120 --> 00:23:15.700
for work manager and here's a syntax for
it it's pretty simple unique name is

00:23:15.700 --> 00:23:15.710
it it's pretty simple unique name is
 

00:23:15.710 --> 00:23:17.710
it it's pretty simple unique name is
that key it's that something that

00:23:17.710 --> 00:23:17.720
that key it's that something that
 

00:23:17.720 --> 00:23:22.230
that key it's that something that
uniquely identifies that chain of work

00:23:22.230 --> 00:23:22.240
uniquely identifies that chain of work
 

00:23:22.240 --> 00:23:24.850
uniquely identifies that chain of work
policy is the existing work policy or

00:23:24.850 --> 00:23:24.860
policy is the existing work policy or
 

00:23:24.860 --> 00:23:27.970
policy is the existing work policy or
what we call the conflict policies and

00:23:27.970 --> 00:23:27.980
what we call the conflict policies and
 

00:23:27.980 --> 00:23:31.780
what we call the conflict policies and
then you obviously have your requests so

00:23:31.780 --> 00:23:31.790
then you obviously have your requests so
 

00:23:31.790 --> 00:23:33.610
then you obviously have your requests so
the existing work policies are the

00:23:33.610 --> 00:23:33.620
the existing work policies are the
 

00:23:33.620 --> 00:23:35.020
the existing work policies are the
interesting things there's three of them

00:23:35.020 --> 00:23:35.030
interesting things there's three of them
 

00:23:35.030 --> 00:23:38.140
interesting things there's three of them
the first one is keep which is it keeps

00:23:38.140 --> 00:23:38.150
the first one is keep which is it keeps
 

00:23:38.150 --> 00:23:39.910
the first one is keep which is it keeps
the existing unfinished work so if you

00:23:39.910 --> 00:23:39.920
the existing unfinished work so if you
 

00:23:39.920 --> 00:23:42.430
the existing unfinished work so if you
have things that are in blocked running

00:23:42.430 --> 00:23:42.440
have things that are in blocked running
 

00:23:42.440 --> 00:23:46.090
have things that are in blocked running
or in queued it will keep them and if

00:23:46.090 --> 00:23:46.100
or in queued it will keep them and if
 

00:23:46.100 --> 00:23:48.100
or in queued it will keep them and if
something if the work is already

00:23:48.100 --> 00:23:48.110
something if the work is already
 

00:23:48.110 --> 00:23:50.050
something if the work is already
finished or it's not there to begin with

00:23:50.050 --> 00:23:50.060
finished or it's not there to begin with
 

00:23:50.060 --> 00:23:51.550
finished or it's not there to begin with
it'll in queue whatever you just sent

00:23:51.550 --> 00:23:51.560
it'll in queue whatever you just sent
 

00:23:51.560 --> 00:23:54.490
it'll in queue whatever you just sent
along with that call the next one is

00:23:54.490 --> 00:23:54.500
along with that call the next one is
 

00:23:54.500 --> 00:23:57.250
along with that call the next one is
replaced it always replaces the work

00:23:57.250 --> 00:23:57.260
replaced it always replaces the work
 

00:23:57.260 --> 00:23:59.260
replaced it always replaces the work
request in the database if your work is

00:23:59.260 --> 00:23:59.270
request in the database if your work is
 

00:23:59.270 --> 00:24:01.450
request in the database if your work is
running it'll get stopped as I described

00:24:01.450 --> 00:24:01.460
running it'll get stopped as I described
 

00:24:01.460 --> 00:24:04.360
running it'll get stopped as I described
a few minutes earlier it cancels the old

00:24:04.360 --> 00:24:04.370
a few minutes earlier it cancels the old
 

00:24:04.370 --> 00:24:05.950
a few minutes earlier it cancels the old
work and it stops it that's that's what

00:24:05.950 --> 00:24:05.960
work and it stops it that's that's what
 

00:24:05.960 --> 00:24:06.720
work and it stops it that's that's what
it does

00:24:06.720 --> 00:24:06.730
it does
 

00:24:06.730 --> 00:24:09.610
it does
append is kind of a special one it

00:24:09.610 --> 00:24:09.620
append is kind of a special one it
 

00:24:09.620 --> 00:24:11.680
append is kind of a special one it
basically appends to that chain of work

00:24:11.680 --> 00:24:11.690
basically appends to that chain of work
 

00:24:11.690 --> 00:24:13.660
basically appends to that chain of work
so for example this is useful if you're

00:24:13.660 --> 00:24:13.670
so for example this is useful if you're
 

00:24:13.670 --> 00:24:15.790
so for example this is useful if you're
trying to do something in order for

00:24:15.790 --> 00:24:15.800
trying to do something in order for
 

00:24:15.800 --> 00:24:17.800
trying to do something in order for
example you're trying to build a

00:24:17.800 --> 00:24:17.810
example you're trying to build a
 

00:24:17.810 --> 00:24:19.030
example you're trying to build a
messaging app and you're sending

00:24:19.030 --> 00:24:19.040
messaging app and you're sending
 

00:24:19.040 --> 00:24:21.880
messaging app and you're sending
messages in order so you may have a

00:24:21.880 --> 00:24:21.890
messages in order so you may have a
 

00:24:21.890 --> 00:24:22.540
messages in order so you may have a
unique

00:24:22.540 --> 00:24:22.550
unique
 

00:24:22.550 --> 00:24:24.490
unique
chain of work for sending messages and

00:24:24.490 --> 00:24:24.500
chain of work for sending messages and
 

00:24:24.500 --> 00:24:27.130
chain of work for sending messages and
you want to append new messages to the

00:24:27.130 --> 00:24:27.140
you want to append new messages to the
 

00:24:27.140 --> 00:24:28.990
you want to append new messages to the
end of it so it's basically creating a

00:24:28.990 --> 00:24:29.000
end of it so it's basically creating a
 

00:24:29.000 --> 00:24:34.150
end of it so it's basically creating a
tree for you remember so we mentioned

00:24:34.150 --> 00:24:34.160
tree for you remember so we mentioned
 

00:24:34.160 --> 00:24:36.460
tree for you remember so we mentioned
that in one of his previous slides on

00:24:36.460 --> 00:24:36.470
that in one of his previous slides on
 

00:24:36.470 --> 00:24:38.680
that in one of his previous slides on
because on how one can customize work

00:24:38.680 --> 00:24:38.690
because on how one can customize work
 

00:24:38.690 --> 00:24:41.620
because on how one can customize work
manager so let's look at how you all the

00:24:41.620 --> 00:24:41.630
manager so let's look at how you all the
 

00:24:41.630 --> 00:24:44.410
manager so let's look at how you all the
things that you can do so you can

00:24:44.410 --> 00:24:44.420
things that you can do so you can
 

00:24:44.420 --> 00:24:46.810
things that you can do so you can
actually specify a worker factory that

00:24:46.810 --> 00:24:46.820
actually specify a worker factory that
 

00:24:46.820 --> 00:24:48.640
actually specify a worker factory that
can be used to instantiate your workers

00:24:48.640 --> 00:24:48.650
can be used to instantiate your workers
 

00:24:48.650 --> 00:24:50.440
can be used to instantiate your workers
and listenable workers and this is

00:24:50.440 --> 00:24:50.450
and listenable workers and this is
 

00:24:50.450 --> 00:24:52.030
and listenable workers and this is
especially useful in the context of

00:24:52.030 --> 00:24:52.040
especially useful in the context of
 

00:24:52.040 --> 00:24:53.890
especially useful in the context of
dependency injection so if you're using

00:24:53.890 --> 00:24:53.900
dependency injection so if you're using
 

00:24:53.900 --> 00:24:55.870
dependency injection so if you're using
dagger and you want to inject something

00:24:55.870 --> 00:24:55.880
dagger and you want to inject something
 

00:24:55.880 --> 00:24:57.400
dagger and you want to inject something
into your worker before the worker

00:24:57.400 --> 00:24:57.410
into your worker before the worker
 

00:24:57.410 --> 00:24:59.260
into your worker before the worker
starts and this is a good place to do

00:24:59.260 --> 00:24:59.270
starts and this is a good place to do
 

00:24:59.270 --> 00:25:01.660
starts and this is a good place to do
that you can also specify the default

00:25:01.660 --> 00:25:01.670
that you can also specify the default
 

00:25:01.670 --> 00:25:03.970
that you can also specify the default
executor that you want that you want all

00:25:03.970 --> 00:25:03.980
executor that you want that you want all
 

00:25:03.980 --> 00:25:06.190
executor that you want that you want all
workers to use you can specify the

00:25:06.190 --> 00:25:06.200
workers to use you can specify the
 

00:25:06.200 --> 00:25:08.380
workers to use you can specify the
logging verbosity if you want you know

00:25:08.380 --> 00:25:08.390
logging verbosity if you want you know
 

00:25:08.390 --> 00:25:09.970
logging verbosity if you want you know
if you want distinguish between a build

00:25:09.970 --> 00:25:09.980
if you want distinguish between a build
 

00:25:09.980 --> 00:25:12.640
if you want distinguish between a build
and a release build and you want to make

00:25:12.640 --> 00:25:12.650
and a release build and you want to make
 

00:25:12.650 --> 00:25:14.020
and a release build and you want to make
sure you log more information to

00:25:14.020 --> 00:25:14.030
sure you log more information to
 

00:25:14.030 --> 00:25:15.940
sure you log more information to
diagnose your problems and then you can

00:25:15.940 --> 00:25:15.950
diagnose your problems and then you can
 

00:25:15.950 --> 00:25:18.190
diagnose your problems and then you can
also specify various other job scheduler

00:25:18.190 --> 00:25:18.200
also specify various other job scheduler
 

00:25:18.200 --> 00:25:20.890
also specify various other job scheduler
parameters like number of jobs that you

00:25:20.890 --> 00:25:20.900
parameters like number of jobs that you
 

00:25:20.900 --> 00:25:22.690
parameters like number of jobs that you
want us to send to job scheduler the IDS

00:25:22.690 --> 00:25:22.700
want us to send to job scheduler the IDS
 

00:25:22.700 --> 00:25:24.580
want us to send to job scheduler the IDS
of jobs that you want us to use in case

00:25:24.580 --> 00:25:24.590
of jobs that you want us to use in case
 

00:25:24.590 --> 00:25:25.780
of jobs that you want us to use in case
you're already using job scheduler

00:25:25.780 --> 00:25:25.790
you're already using job scheduler
 

00:25:25.790 --> 00:25:29.680
you're already using job scheduler
before so if you want to customize work

00:25:29.680 --> 00:25:29.690
before so if you want to customize work
 

00:25:29.690 --> 00:25:31.720
before so if you want to customize work
manager then you have to disable the

00:25:31.720 --> 00:25:31.730
manager then you have to disable the
 

00:25:31.730 --> 00:25:32.980
manager then you have to disable the
default work management initializer

00:25:32.980 --> 00:25:32.990
default work management initializer
 

00:25:32.990 --> 00:25:35.170
default work management initializer
first so for that you have to add this

00:25:35.170 --> 00:25:35.180
first so for that you have to add this
 

00:25:35.180 --> 00:25:37.990
first so for that you have to add this
entry to your manifest and note the

00:25:37.990 --> 00:25:38.000
entry to your manifest and note the
 

00:25:38.000 --> 00:25:40.270
entry to your manifest and note the
tools node remove that means you're

00:25:40.270 --> 00:25:40.280
tools node remove that means you're
 

00:25:40.280 --> 00:25:42.370
tools node remove that means you're
removing this you don't want this entry

00:25:42.370 --> 00:25:42.380
removing this you don't want this entry
 

00:25:42.380 --> 00:25:44.500
removing this you don't want this entry
to get merged so now that you've

00:25:44.500 --> 00:25:44.510
to get merged so now that you've
 

00:25:44.510 --> 00:25:45.850
to get merged so now that you've
disabled the default work manage

00:25:45.850 --> 00:25:45.860
disabled the default work manage
 

00:25:45.860 --> 00:25:47.800
disabled the default work manage
initializer the next step is to actually

00:25:47.800 --> 00:25:47.810
initializer the next step is to actually
 

00:25:47.810 --> 00:25:49.630
initializer the next step is to actually
create a new instance of configuration

00:25:49.630 --> 00:25:49.640
create a new instance of configuration
 

00:25:49.640 --> 00:25:51.460
create a new instance of configuration
so here I'm using the configuration

00:25:51.460 --> 00:25:51.470
so here I'm using the configuration
 

00:25:51.470 --> 00:25:54.580
so here I'm using the configuration
builder and I'm overriding it to specify

00:25:54.580 --> 00:25:54.590
builder and I'm overriding it to specify
 

00:25:54.590 --> 00:25:57.220
builder and I'm overriding it to specify
my own custom executor so now that I've

00:25:57.220 --> 00:25:57.230
my own custom executor so now that I've
 

00:25:57.230 --> 00:25:58.840
my own custom executor so now that I've
done that I can just call work manager

00:25:58.840 --> 00:25:58.850
done that I can just call work manager
 

00:25:58.850 --> 00:26:00.910
done that I can just call work manager
that initialize I specify the

00:26:00.910 --> 00:26:00.920
that initialize I specify the
 

00:26:00.920 --> 00:26:02.110
that initialize I specify the
application context and the

00:26:02.110 --> 00:26:02.120
application context and the
 

00:26:02.120 --> 00:26:04.330
application context and the
configuration and I'm done so make sure

00:26:04.330 --> 00:26:04.340
configuration and I'm done so make sure
 

00:26:04.340 --> 00:26:05.800
configuration and I'm done so make sure
you do this in your application on

00:26:05.800 --> 00:26:05.810
you do this in your application on
 

00:26:05.810 --> 00:26:07.720
you do this in your application on
create or a Content folder on create

00:26:07.720 --> 00:26:07.730
create or a Content folder on create
 

00:26:07.730 --> 00:26:10.990
create or a Content folder on create
because the system the operating system

00:26:10.990 --> 00:26:11.000
because the system the operating system
 

00:26:11.000 --> 00:26:12.820
because the system the operating system
can actually invoke job services on your

00:26:12.820 --> 00:26:12.830
can actually invoke job services on your
 

00:26:12.830 --> 00:26:15.910
can actually invoke job services on your
behalf and when you're when job services

00:26:15.910 --> 00:26:15.920
behalf and when you're when job services
 

00:26:15.920 --> 00:26:17.920
behalf and when you're when job services
are being invoked work manager needs to

00:26:17.920 --> 00:26:17.930
are being invoked work manager needs to
 

00:26:17.930 --> 00:26:24.160
are being invoked work manager needs to
be initialized finally the last thing we

00:26:24.160 --> 00:26:24.170
be initialized finally the last thing we
 

00:26:24.170 --> 00:26:26.100
be initialized finally the last thing we
want to talk about before we wrap up is

00:26:26.100 --> 00:26:26.110
want to talk about before we wrap up is
 

00:26:26.110 --> 00:26:28.810
want to talk about before we wrap up is
some tips for all the library developers

00:26:28.810 --> 00:26:28.820
some tips for all the library developers
 

00:26:28.820 --> 00:26:30.550
some tips for all the library developers
out there if you're using work manager

00:26:30.550 --> 00:26:30.560
out there if you're using work manager
 

00:26:30.560 --> 00:26:32.530
out there if you're using work manager
in your library you have some special

00:26:32.530 --> 00:26:32.540
in your library you have some special
 

00:26:32.540 --> 00:26:35.170
in your library you have some special
use cases that we want to think about so

00:26:35.170 --> 00:26:35.180
use cases that we want to think about so
 

00:26:35.180 --> 00:26:36.430
use cases that we want to think about so
the general advice we give

00:26:36.430 --> 00:26:36.440
the general advice we give
 

00:26:36.440 --> 00:26:38.230
the general advice we give
for library developers is because work

00:26:38.230 --> 00:26:38.240
for library developers is because work
 

00:26:38.240 --> 00:26:40.210
for library developers is because work
managers a singleton and the application

00:26:40.210 --> 00:26:40.220
managers a singleton and the application
 

00:26:40.220 --> 00:26:42.850
managers a singleton and the application
initializes it as Rahul just showed you

00:26:42.850 --> 00:26:42.860
initializes it as Rahul just showed you
 

00:26:42.860 --> 00:26:45.520
initializes it as Rahul just showed you
you are not really in control of what's

00:26:45.520 --> 00:26:45.530
you are not really in control of what's
 

00:26:45.530 --> 00:26:46.030
you are not really in control of what's
there

00:26:46.030 --> 00:26:46.040
there
 

00:26:46.040 --> 00:26:48.340
there
rely on the defaults so use the default

00:26:48.340 --> 00:26:48.350
rely on the defaults so use the default
 

00:26:48.350 --> 00:26:49.810
rely on the defaults so use the default
worker Factory the default worker

00:26:49.810 --> 00:26:49.820
worker Factory the default worker
 

00:26:49.820 --> 00:26:52.660
worker Factory the default worker
factory that we provide gives create

00:26:52.660 --> 00:26:52.670
factory that we provide gives create
 

00:26:52.670 --> 00:26:54.970
factory that we provide gives create
workers and listenable workers using

00:26:54.970 --> 00:26:54.980
workers and listenable workers using
 

00:26:54.980 --> 00:26:57.400
workers and listenable workers using
reflection rely on that because you

00:26:57.400 --> 00:26:57.410
reflection rely on that because you
 

00:26:57.410 --> 00:26:58.690
reflection rely on that because you
don't know what else is happening if

00:26:58.690 --> 00:26:58.700
don't know what else is happening if
 

00:26:58.700 --> 00:26:59.980
don't know what else is happening if
you're if you need some particular

00:26:59.980 --> 00:26:59.990
you're if you need some particular
 

00:26:59.990 --> 00:27:02.500
you're if you need some particular
dependency injection or anything else of

00:27:02.500 --> 00:27:02.510
dependency injection or anything else of
 

00:27:02.510 --> 00:27:04.120
dependency injection or anything else of
that sort you'll have to have a contract

00:27:04.120 --> 00:27:04.130
that sort you'll have to have a contract
 

00:27:04.130 --> 00:27:08.260
that sort you'll have to have a contract
with the app silo your work with tags so

00:27:08.260 --> 00:27:08.270
with the app silo your work with tags so
 

00:27:08.270 --> 00:27:10.120
with the app silo your work with tags so
Rahul also showed you how to tag your

00:27:10.120 --> 00:27:10.130
Rahul also showed you how to tag your
 

00:27:10.130 --> 00:27:13.090
Rahul also showed you how to tag your
work if you silo all your work meaning

00:27:13.090 --> 00:27:13.100
work if you silo all your work meaning
 

00:27:13.100 --> 00:27:15.850
work if you silo all your work meaning
you prefix or put your prefix or your

00:27:15.850 --> 00:27:15.860
you prefix or put your prefix or your
 

00:27:15.860 --> 00:27:18.250
you prefix or put your prefix or your
package name or your library name in

00:27:18.250 --> 00:27:18.260
package name or your library name in
 

00:27:18.260 --> 00:27:21.250
package name or your library name in
your tags you can easily identify all

00:27:21.250 --> 00:27:21.260
your tags you can easily identify all
 

00:27:21.260 --> 00:27:22.510
your tags you can easily identify all
the work that's your so you don't have

00:27:22.510 --> 00:27:22.520
the work that's your so you don't have
 

00:27:22.520 --> 00:27:25.630
the work that's your so you don't have
to worry about other people other

00:27:25.630 --> 00:27:25.640
to worry about other people other
 

00:27:25.640 --> 00:27:27.280
to worry about other people other
people's work you don't have to deal

00:27:27.280 --> 00:27:27.290
people's work you don't have to deal
 

00:27:27.290 --> 00:27:28.690
people's work you don't have to deal
with any of that you can just get your

00:27:28.690 --> 00:27:28.700
with any of that you can just get your
 

00:27:28.700 --> 00:27:30.670
with any of that you can just get your
work and operate on just that if you

00:27:30.670 --> 00:27:30.680
work and operate on just that if you
 

00:27:30.680 --> 00:27:33.790
work and operate on just that if you
don't know the IDS finally we do provide

00:27:33.790 --> 00:27:33.800
don't know the IDS finally we do provide
 

00:27:33.800 --> 00:27:35.680
don't know the IDS finally we do provide
the ability for apps to wipe away all

00:27:35.680 --> 00:27:35.690
the ability for apps to wipe away all
 

00:27:35.690 --> 00:27:38.110
the ability for apps to wipe away all
work and this is for generally for

00:27:38.110 --> 00:27:38.120
work and this is for generally for
 

00:27:38.120 --> 00:27:40.120
work and this is for generally for
privacy reasons this is not something we

00:27:40.120 --> 00:27:40.130
privacy reasons this is not something we
 

00:27:40.130 --> 00:27:41.740
privacy reasons this is not something we
expect to be called but it's for that

00:27:41.740 --> 00:27:41.750
expect to be called but it's for that
 

00:27:41.750 --> 00:27:44.320
expect to be called but it's for that
sort of critical use case where you have

00:27:44.320 --> 00:27:44.330
sort of critical use case where you have
 

00:27:44.330 --> 00:27:47.770
sort of critical use case where you have
to wipe user data for some reason so as

00:27:47.770 --> 00:27:47.780
to wipe user data for some reason so as
 

00:27:47.780 --> 00:27:49.240
to wipe user data for some reason so as
a library developer how do you find out

00:27:49.240 --> 00:27:49.250
a library developer how do you find out
 

00:27:49.250 --> 00:27:51.430
a library developer how do you find out
if your works been wiped or gone from

00:27:51.430 --> 00:27:51.440
if your works been wiped or gone from
 

00:27:51.440 --> 00:27:53.260
if your works been wiped or gone from
under you you should look at get last

00:27:53.260 --> 00:27:53.270
under you you should look at get last
 

00:27:53.270 --> 00:27:57.010
under you you should look at get last
get last cancel time sorry get last

00:27:57.010 --> 00:27:57.020
get last cancel time sorry get last
 

00:27:57.020 --> 00:27:58.600
get last cancel time sorry get last
cancel all time really it's a very

00:27:58.600 --> 00:27:58.610
cancel all time really it's a very
 

00:27:58.610 --> 00:28:04.990
cancel all time really it's a very
confusing name ok next steps so get work

00:28:04.990 --> 00:28:05.000
confusing name ok next steps so get work
 

00:28:05.000 --> 00:28:06.460
confusing name ok next steps so get work
manager if you haven't already and for

00:28:06.460 --> 00:28:06.470
manager if you haven't already and for
 

00:28:06.470 --> 00:28:07.930
manager if you haven't already and for
those of you who have thank you very

00:28:07.930 --> 00:28:07.940
those of you who have thank you very
 

00:28:07.940 --> 00:28:10.750
those of you who have thank you very
much your feedbacks been invaluable or

00:28:10.750 --> 00:28:10.760
much your feedbacks been invaluable or
 

00:28:10.760 --> 00:28:13.240
much your feedbacks been invaluable or
up to alpha 11 so there's three general

00:28:13.240 --> 00:28:13.250
up to alpha 11 so there's three general
 

00:28:13.250 --> 00:28:15.160
up to alpha 11 so there's three general
categories of artifacts here there's the

00:28:15.160 --> 00:28:15.170
categories of artifacts here there's the
 

00:28:15.170 --> 00:28:17.800
categories of artifacts here there's the
runtime there's the KTX stuff which

00:28:17.800 --> 00:28:17.810
runtime there's the KTX stuff which
 

00:28:17.810 --> 00:28:19.840
runtime there's the KTX stuff which
includes a coroutines worker that we

00:28:19.840 --> 00:28:19.850
includes a coroutines worker that we
 

00:28:19.850 --> 00:28:21.820
includes a coroutines worker that we
just put in so you don't have to write

00:28:21.820 --> 00:28:21.830
just put in so you don't have to write
 

00:28:21.830 --> 00:28:23.620
just put in so you don't have to write
your own and then there's testing

00:28:23.620 --> 00:28:23.630
your own and then there's testing
 

00:28:23.630 --> 00:28:26.590
your own and then there's testing
support as well these are some helpful

00:28:26.590 --> 00:28:26.600
support as well these are some helpful
 

00:28:26.600 --> 00:28:29.380
support as well these are some helpful
links scheduled tasks with work manager

00:28:29.380 --> 00:28:29.390
links scheduled tasks with work manager
 

00:28:29.390 --> 00:28:32.260
links scheduled tasks with work manager
is the developer.android.com section for

00:28:32.260 --> 00:28:32.270
is the developer.android.com section for
 

00:28:32.270 --> 00:28:35.890
is the developer.android.com section for
work manager there's a youtube on

00:28:35.890 --> 00:28:35.900
work manager there's a youtube on
 

00:28:35.900 --> 00:28:37.840
work manager there's a youtube on
youtube there's the google io 2018 talk

00:28:37.840 --> 00:28:37.850
youtube there's the google io 2018 talk
 

00:28:37.850 --> 00:28:39.760
youtube there's the google io 2018 talk
which talks about all the basics in much

00:28:39.760 --> 00:28:39.770
which talks about all the basics in much
 

00:28:39.770 --> 00:28:41.410
which talks about all the basics in much
greater length some of those aps have

00:28:41.410 --> 00:28:41.420
greater length some of those aps have
 

00:28:41.420 --> 00:28:44.380
greater length some of those aps have
changed a little bit but it's still

00:28:44.380 --> 00:28:44.390
changed a little bit but it's still
 

00:28:44.390 --> 00:28:46.320
changed a little bit but it's still
broadly a good thing to read or to

00:28:46.320 --> 00:28:46.330
broadly a good thing to read or to
 

00:28:46.330 --> 00:28:49.720
broadly a good thing to read or to
listen to and also please file your

00:28:49.720 --> 00:28:49.730
listen to and also please file your
 

00:28:49.730 --> 00:28:50.260
listen to and also please file your
feedback at

00:28:50.260 --> 00:28:50.270
feedback at
 

00:28:50.270 --> 00:28:54.520
feedback at
our public issue tracker beta is coming

00:28:54.520 --> 00:28:54.530
our public issue tracker beta is coming
 

00:28:54.530 --> 00:28:56.680
our public issue tracker beta is coming
we were told up this morning or last

00:28:56.680 --> 00:28:56.690
we were told up this morning or last
 

00:28:56.690 --> 00:28:59.710
we were told up this morning or last
morning as well so we're kind of we have

00:28:59.710 --> 00:28:59.720
morning as well so we're kind of we have
 

00:28:59.720 --> 00:29:04.360
morning as well so we're kind of we have
to get back to work but thanks a lot

00:29:04.360 --> 00:29:04.370
to get back to work but thanks a lot
 

00:29:04.370 --> 00:29:06.549
to get back to work but thanks a lot
please visit all the jetpack libraries

00:29:06.549 --> 00:29:06.559
please visit all the jetpack libraries
 

00:29:06.559 --> 00:29:08.140
please visit all the jetpack libraries
on the web and where it'll be outside

00:29:08.140 --> 00:29:08.150
on the web and where it'll be outside
 

00:29:08.150 --> 00:29:09.190
on the web and where it'll be outside
for any questions that you might have

00:29:09.190 --> 00:29:09.200
for any questions that you might have
 

00:29:09.200 --> 00:29:10.340
for any questions that you might have
Thanks

00:29:10.340 --> 00:29:10.350
Thanks
 

00:29:10.350 --> 00:29:11.240
Thanks
[Applause]

00:29:11.240 --> 00:29:11.250
[Applause]
 

00:29:11.250 --> 00:29:27.319
[Applause]
[Music]

