WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Andy] Now, what if our data structure was a bit more complicated

00:00:03.000 --> 00:00:05.000
than a list with strings as entries?

00:00:05.000 --> 00:00:10.000
Here we have a list where each entry is a tuple, as indicated by these parentheses.

00:00:10.000 --> 00:00:15.000
For now let's just think of tuples as unchangeable or immutable lists.

00:00:15.000 --> 00:00:21.000
Each of these tuples contains a TA name, the country where that TA lives,

00:00:21.000 --> 00:00:24.000
and the course which that TA is currently instructing.

00:00:24.000 --> 00:00:28.000
This data is interesting, but I'd rather have it presented to me as a list of sentences,

00:00:28.000 --> 00:00:31.000
and we can do that with list comprehensions.

00:00:31.000 --> 00:00:34.000
So here we've turned ta_data into a list of strings,

00:00:34.000 --> 00:00:37.000
and each of those strings is a sentence about a TA.

00:00:37.000 --> 00:00:42.000
For example, Peter lives in USA and is the TA for CS262.

00:00:42.000 --> 00:00:44.000
How do we do that?

00:00:44.000 --> 00:00:47.000
We use the same sort of list comprehension we used last time,

00:00:47.000 --> 00:00:53.000
but now ta_data is an iterable and its entries are tuples.

00:00:53.000 --> 00:01:02.000
These tuples each have 3 entries, and when we reference these names here, here, and here,

00:01:02.000 --> 00:01:04.000
Python understands what we're talking about.

00:01:04.000 --> 00:01:06.000
Now let's have a quiz.

00:01:06.000 --> 00:01:09.000
Using the same structure for ta_data that we had before,

00:01:09.000 --> 00:01:14.000
I want to construct sentences but only about the country in which each TA lives.

00:01:14.000 --> 00:01:16.000
For example, Peter lives in USA,

00:01:16.000 --> 00:01:18.000
or Gundega lives in Latvia.

00:01:18.000 --> 00:01:21.000
I've given you 3 options for possible list comprehensions

00:01:21.000 --> 00:01:23.000
that may accomplish this task--

00:01:23.000 --> 00:01:28.000
that given ta_data will produce the correct ta_country.

00:01:28.000 --> 00:01:31.000
And so which of the following list comprehensions will work?

00:01:31.000 --> 00:01:33.000
Check all that apply.

