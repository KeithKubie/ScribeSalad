WEBVTT
Kind: captions
Language: en

00:00:08.750 --> 00:00:15.770
 Today is my notice I am google android developer 

00:00:12.920 --> 00:00:20.630
 I belong to the relations team 

00:00:15.770 --> 00:00:21.970
 This video introduces new features for developers of KitKat Android 4.4 

00:00:20.630 --> 00:00:27.220
 I will 

00:00:21.970 --> 00:00:30.340
 Kit Kat is only 0.1 when it sees only the version number but it is actually a lot 

00:00:27.220 --> 00:00:35.430
 Has a new api added 

00:00:30.340 --> 00:00:38.490
 At the time of development of the jelly bean, the main focus was on smooth operation 

00:00:35.430 --> 00:00:42.820
 Memory optimization in this kit cut 

00:00:38.490 --> 00:00:46.720
 It can be said that the main focus is on improving the efficiency of use of ram 

00:00:42.820 --> 00:00:50.390
 android 4.4 leaves the smoothness of the jelly bean 

00:00:46.720 --> 00:00:57.190
 Works with a much wider range of terminals than ever before 

00:00:50.390 --> 00:01:02.590
 It corresponds to the terminal that the installed ram capacity is limited to 512 mb 

00:00:57.190 --> 00:01:05.400
 Thai enthusiasts use the app ram under development with several new apis and tools 

00:01:02.590 --> 00:01:11.070
 You can check the efficiency 

00:01:05.400 --> 00:01:11.730
 The new api is running on a terminal with limited memory when the app is launched 

00:01:11.070 --> 00:01:14.730
 Is 

00:01:11.730 --> 00:01:17.190
 activity manager is low ram device 

00:01:14.730 --> 00:01:23.130
 You can check using 

00:01:17.190 --> 00:01:27.720
 By enduring yesterday's behavior which eats memory according to the value or restricting some functions 

00:01:23.130 --> 00:01:29.999
 Providing an excellent user experience even on terminals with limited RAM capacity 

00:01:27.720 --> 00:01:33.190
 I can do it 

00:01:29.999 --> 00:01:37.150
 It is a last resort to limit the y and y functions 

00:01:33.190 --> 00:01:42.820
 First of all, if you refer to this document, without reducing the function 

00:01:37.150 --> 00:01:48.490
 You can check the know-how to optimize the free efficiency etc. 

00:01:42.820 --> 00:01:51.680
 How to use the memory of the application in the first place to actually work to improve the efficiency of ram utilization 

00:01:48.490 --> 00:01:56.600
 You need to understand what you are doing 

00:01:51.680 --> 00:01:59.909
 The new Prox tool is about app execution time and memory usage 

00:01:56.600 --> 00:02:03.149
 Provide useful data for analysis 

00:01:59.909 --> 00:02:08.470
 Prox standing can be called from adb 

00:02:03.149 --> 00:02:13.480
 adb shell is a command called dump and sprout start 

00:02:08.470 --> 00:02:17.950
 If you're not good at the command line, you'll be fine 

00:02:13.480 --> 00:02:23.260
 Process all android 4.4 terminal and emulator processes with options 

00:02:17.950 --> 00:02:24.930
 You can analyze the memory profile of the app on the Developer Options screen of the statistical information 

00:02:23.260 --> 00:02:29.770
 I will 

00:02:24.930 --> 00:02:33.430
 There is a blue list of the system Mari's overview 

00:02:29.770 --> 00:02:37.810
 The overall memory load of each app is displayed 

00:02:33.430 --> 00:02:39.520
 In addition, he used to have time for each app to go out in background 

00:02:37.810 --> 00:02:45.760
 is 

00:02:39.520 --> 00:02:49.380
 Selecting an app gives an overview of the memory consumption and the running time of that app and the average maximum 

00:02:45.760 --> 00:02:49.380
 ram usage is displayed 

00:02:49.860 --> 00:03:00.730
 Memory usage efficiency is not only KitKat has a beautiful ui ux design 

00:02:55.650 --> 00:03:04.630
 There are several new methods to offer you 

00:03:00.730 --> 00:03:09.640
 First the android design guidelines have been updated 

00:03:04.630 --> 00:03:12.610
 In the color beity section that users get impressed by referring to the latest guidelines 

00:03:09.640 --> 00:03:16.720
 Please provide a unique experience 

00:03:12.610 --> 00:03:19.230
 For details, check the latest contents of the android design action program 

00:03:16.720 --> 00:03:19.230
 Please give me 

00:03:19.280 --> 00:03:28.290
 As a new api, full screen ima-branch mode added new 

00:03:24.080 --> 00:03:30.330
 Transitions framework supports fresh animation 

00:03:28.290 --> 00:03:36.440
 Subtitle display support 

00:03:30.330 --> 00:03:36.440
 New tools for high quality screen recording are provided 

00:03:37.230 --> 00:03:46.060
 Use the new full screen Well Chapter mode to take advantage of the high quality ui that takes advantage of every corner of the screen 

00:03:42.989 --> 00:03:52.780
 You can develop 

00:03:46.060 --> 00:03:57.030
 System ui status bar The navigation bar is hidden and the app is 

00:03:52.780 --> 00:04:00.480
 You can react to events in any place 

00:03:57.030 --> 00:04:06.450
 Providing visually rich content through this 

00:04:00.480 --> 00:04:08.310
 For example, to enhance the user experience of photo video map e-books and games 

00:04:06.450 --> 00:04:12.900
 I can do it 

00:04:08.310 --> 00:04:14.040
 This full-screen now branch mode can be controlled with an eye flag of two things 

00:04:12.900 --> 00:04:17.739
 I will 

00:04:14.040 --> 00:04:23.800
 I am now sticky and Ishibu club 

00:04:17.739 --> 00:04:28.870
 The code looks like this You can now turn on and off the branch flag 

00:04:23.800 --> 00:04:34.090
 Also now if the branch sticky flag is used then the system ui has been a while 

00:04:28.870 --> 00:04:38.610
 Automatically hide or hide automatically when the user touches the middle part of the screen 

00:04:34.090 --> 00:04:42.300
 Full Screen Now Branch Mode Available 

00:04:38.610 --> 00:04:47.669
 For more information about the old nest proximal well branch mode 

00:04:42.300 --> 00:04:50.090
 Look at the program called Doubly in the now branch mode that Rick of Romans has released 

00:04:47.669 --> 00:04:50.090
 Please give me 

00:04:50.790 --> 00:04:59.520
 Real-life high-quality fresh animation To go simply 

00:04:55.500 --> 00:05:02.040
 The new Transitions framework in android 4.4 

00:04:59.520 --> 00:05:07.260
 api has been added 

00:05:02.040 --> 00:05:12.610
 It is ui corresponding to the change of the situation so that the person of the user can understand easily if this is used 

00:05:07.260 --> 00:05:18.230
 It can be elegantly written to express animation 

00:05:12.610 --> 00:05:22.880
 The new Transitions framework allows developers to define scenes 

00:05:18.230 --> 00:05:26.169
 Scene fibers are such view hierarchies and transitions 

00:05:22.880 --> 00:05:32.939
 A combination of animated fibers 

00:05:26.169 --> 00:05:32.939
 You can hurt the animation notation when the user enters and leaves the scene 

00:05:33.060 --> 00:05:40.169
 Match some predefined transitions from layout to display hide 

00:05:37.950 --> 00:05:43.860
 Available 

00:05:40.169 --> 00:05:48.470
 Fade in fade out automatically when the scene changes 

00:05:43.860 --> 00:05:52.940
 Automatic transitions such as moving and resizing are also available 

00:05:48.470 --> 00:05:57.200
 Also, custom transitions that animate any property specifically for that app 

00:05:52.940 --> 00:05:58.849
 You can also define your own and plug in your own animation style 

00:05:57.200 --> 00:06:02.749
 I will 

00:05:58.849 --> 00:06:06.529
 More in detail is the program called Transitions 

00:06:02.749 --> 00:06:09.969
 Animation specialist Chet Hase from the android team explains 

00:06:06.529 --> 00:06:09.969
 Please check it by all means 

00:06:10.820 --> 00:06:18.630
 Android 4.4 system settings and to improve the accessibility of the app 

00:06:15.110 --> 00:06:23.480
 The subtitle display setting has been added 

00:06:18.630 --> 00:06:28.640
 Users can choose subtitle settings common to previous apps 

00:06:23.480 --> 00:06:32.110
 New caption ring manager while referring to the settings for the video playback application 

00:06:28.640 --> 00:06:36.460
 Control subtitles through 

00:06:32.110 --> 00:06:42.310
 Subtitle data stream if the app uses video view 

00:06:36.460 --> 00:06:48.009
 You can add web vtt format to regular video stream 

00:06:42.310 --> 00:06:53.680
 Video view automatically controls subtitle display according to user settings 

00:06:48.009 --> 00:06:56.279
 More specifically, it is in the soldier who implemented this that is a devil-byte program by Alan Billet 

00:06:53.680 --> 00:06:56.279
 Please take a look 

00:06:57.760 --> 00:07:08.350
 People who have tried to manually show the app demo screen with a video camera have a new screen recording 

00:07:03.250 --> 00:07:10.980
 Understand the merit of being able to record the screen of the functional terminal as it is to mp 4 file 

00:07:08.350 --> 00:07:17.160
 I think you can 

00:07:10.980 --> 00:07:21.770
 Recording is done at any bandwidth bit rate supported by the terminal 

00:07:17.160 --> 00:07:21.770
 The aspect ratio of the recorded file will be the same as the screen 

00:07:22.150 --> 00:07:30.220
 Use the adb command to perform screen recording 

00:07:26.080 --> 00:07:32.229
 Record without adb shell screen or at command line 

00:07:30.220 --> 00:07:36.360
 eclipse and android studio 

00:07:32.229 --> 00:07:36.360
 It can also be called from the ddms panel 

00:07:37.420 --> 00:07:45.310
 kitkat adds api for several large new storage areas 

00:07:43.480 --> 00:07:48.249
 Has been 

00:07:45.310 --> 00:07:52.740
 New storage access framework 

00:07:48.249 --> 00:07:57.810
 And new sms content providers 

00:07:52.740 --> 00:08:02.819
 New storage access framework allows users to view and open document images 

00:07:57.810 --> 00:08:06.500
 When choosing a storage provider on the terminal local or in the cloud 

00:08:02.819 --> 00:08:11.990
 Provide fly mark 

00:08:06.500 --> 00:08:16.760
 First of all, as a client-side scenario, the developer provides an application for browsing and managing content 

00:08:11.990 --> 00:08:21.740
 Storage access framework create document if 

00:08:16.760 --> 00:08:25.789
 Use Intents or Open Document Intents 

00:08:21.740 --> 00:08:29.710
 The android platform does standard ui display and users like it 

00:08:25.789 --> 00:08:29.710
 You can choose a document provider 

00:08:29.810 --> 00:08:39.080
 As a provider-side scenario, the storage provider will be your own development 

00:08:34.909 --> 00:08:40.880
 If you do, you can implement the documents provider derived class 

00:08:39.080 --> 00:08:45.500
 Please give me 

00:08:40.880 --> 00:08:50.900
 Overriding these four methods will be your provider file 

00:08:45.500 --> 00:08:53.870
 Read and write functions for any data that is expressed locally or in the cloud 

00:08:50.900 --> 00:08:57.950
 Can be provided 

00:08:53.870 --> 00:09:00.380
 After overriding the intent filter for the documents provider 

00:08:57.950 --> 00:09:05.030
 Attached to the government's promise 

00:09:00.380 --> 00:09:08.750
 Please request permission to manage wood 

00:09:05.030 --> 00:09:14.100
 This will register your provider with the storage access framework 

00:09:08.750 --> 00:09:18.899
 Users will be able to choose from standard ui 

00:09:14.100 --> 00:09:22.829
 On the terminal where your provider app is installed, other client side apps 

00:09:18.899 --> 00:09:27.720
 When trying to access a file using the storage access framework 

00:09:22.829 --> 00:09:29.899
 Allows user users to access your provider's content 

00:09:27.720 --> 00:09:29.899
 I will 

00:09:30.200 --> 00:09:38.000
 I met my colleague in New York 

00:09:33.200 --> 00:09:46.300
 About the storage access framework from both providers 

00:09:38.000 --> 00:09:46.300
 I think that you can confirm this fat byte original program that we are explaining by all means 

00:09:47.400 --> 00:09:53.529
 Now 

00:09:48.430 --> 00:09:58.240
 If you have ever developed an app that uses sms, this new 

00:09:53.529 --> 00:10:01.510
 Please use the official api for sms support 

00:09:58.240 --> 00:10:06.220
 This api is newly added to sdk 

00:10:01.510 --> 00:10:10.690
 An api centered on the use of the sms content provider 

00:10:06.220 --> 00:10:13.279
 Also, the context when receiving a message or writing a message to a provider is slightly 

00:10:10.690 --> 00:10:17.810
 It has been changed 

00:10:13.279 --> 00:10:21.230
 When the sms message arrives the platform directly 

00:10:17.810 --> 00:10:26.870
 Send to default sms message app 

00:10:21.230 --> 00:10:32.180
 This communication is done through the river intent with sms other apps messages 

00:10:26.870 --> 00:10:34.499
 Can be monitored through the sms receive degree intent on 

00:10:32.180 --> 00:10:39.329
 I can do it 

00:10:34.499 --> 00:10:42.550
 The ability to write to the sms provider is selected as the default 

00:10:39.329 --> 00:10:47.440
 There will be only the sns app 

00:10:42.550 --> 00:10:48.370
 Apps that are not selected as default can also send sms messages 

00:10:47.440 --> 00:10:52.630
 I can do it 

00:10:48.370 --> 00:10:54.190
 In this case the platform will instead write to the sms provider 

00:10:52.630 --> 00:10:58.870
 Do 

00:10:54.190 --> 00:11:03.649
 This results in the user having selected those messages as default sns 

00:10:58.870 --> 00:11:08.779
 It is possible to check in the app 

00:11:03.649 --> 00:11:12.220
 More about these sms epia by Adam Sass 

00:11:08.779 --> 00:11:12.220
 Please check the program by all means 

00:11:12.730 --> 00:11:20.620
 And with android 4.4, there are various functions to communicate with surrounding devices. 

00:11:17.889 --> 00:11:24.550
 Addition is being done 

00:11:20.620 --> 00:11:26.410
 Eg new bluetooth profile bluetooth hid 

00:11:24.550 --> 00:11:31.180
 Overgat profile 

00:11:26.410 --> 00:11:36.250
 Aka hog p It consumes low power like mouse x stick keyboard 

00:11:31.180 --> 00:11:39.700
 Provides fast communication between devices and apps 

00:11:36.250 --> 00:11:42.670
 And message exchange at short distance by bluetooth map 

00:11:39.700 --> 00:11:47.530
 Supported 

00:11:42.670 --> 00:11:49.139
 Also, ir blaster function is newly defined as a function of platform standard. 

00:11:47.530 --> 00:11:55.199
 I will 

00:11:49.139 --> 00:11:55.980
 Check the terminal's infrared oscillator with the new api and check its communication frequency 

00:11:55.199 --> 00:12:01.129
 Follow 

00:11:55.980 --> 00:12:01.129
 You can also send signals using infrared communication 

00:12:01.520 --> 00:12:11.730
 Added support for nc's host card emulation feature 

00:12:06.300 --> 00:12:17.900
 Host card emulation function enables various secure nfc communication 

00:12:11.730 --> 00:12:22.130
 For example, the usage such as payment coupon access card traffic pass can be considered 

00:12:17.900 --> 00:12:22.970
 At this time your app can emulate the nfc smart card directly 

00:12:22.130 --> 00:12:27.640
 Can 

00:12:22.970 --> 00:12:27.640
 Implementation of secure element is not necessary 

00:12:28.350 --> 00:12:37.680
 A new reader mode is also supported and your app is a host card 

00:12:32.370 --> 00:12:39.990
 Take on the role of leader in emulation card communication and other nfc communication 

00:12:37.680 --> 00:12:44.580
 Can also 

00:12:39.990 --> 00:12:50.490
 ando host card emulation with iso 7816 plans 

00:12:44.580 --> 00:12:52.100
 Can emulate a smart card based on the 14434 communication standard 

00:12:50.490 --> 00:12:57.560
 I will 

00:12:52.100 --> 00:13:03.079
 Application identifier is defined by the standard iso 7 should be 78164 

00:12:57.560 --> 00:13:06.100
 Dynamically based on the way the communication takes place with the correct android app 

00:13:03.079 --> 00:13:06.100
 Will be routed 

00:13:06.920 --> 00:13:17.790
 The printing function is now supported by platform standard 

00:13:12.810 --> 00:13:22.320
 Print together via wi-fi and print service on the cloud 

00:13:17.790 --> 00:13:24.380
 For example, an api for managing google cloud print is also provided. 

00:13:22.320 --> 00:13:29.480
 I will 

00:13:24.380 --> 00:13:31.370
 Apps support printing of almost any kind of content with these new apis 

00:13:29.480 --> 00:13:35.270
 I can do it 

00:13:31.370 --> 00:13:39.490
 Terminal local image, data on document network, etc. 

00:13:35.270 --> 00:13:44.960
 You can print anything you can draw on canvas 

00:13:39.490 --> 00:13:48.860
 pdf data is the basic format for printing on android 

00:13:44.960 --> 00:13:54.690
 In general, print a bitmap by using a helper class 

00:13:48.860 --> 00:13:59.070
 You can create pdf data with the page properly described 

00:13:54.690 --> 00:14:00.560
 Print api is provided for java and for web view ferper 

00:13:59.070 --> 00:14:04.460
 I will 

00:14:00.560 --> 00:14:06.200
 Generate pdf data with standard android drawing api 

00:14:04.460 --> 00:14:11.360
 receive 

00:14:06.200 --> 00:14:14.440
 The app prints pdf data for printing in exactly the same way as drawing content on the screen 

00:14:11.360 --> 00:14:20.110
 Can be generated 

00:14:14.440 --> 00:14:21.970
 My cousin's mystery Maridoris is an introduction to the print api and a debrief to introduce best practices 

00:14:20.110 --> 00:14:24.760
 We release byte program 

00:14:21.970 --> 00:14:31.390
 Please take a look 

00:14:24.760 --> 00:14:33.960
 KitKat has introduced a new maintenance method to save sensor power consumption 

00:14:31.390 --> 00:14:38.400
 For example, a badge for sensor processing 

00:14:33.960 --> 00:14:46.820
 This is to collect sensor measurement values ​​separately rather than collectively 

00:14:38.400 --> 00:14:46.820
 Schedule and keep the terminal in low power state until the next batch acquisition 

00:14:47.290 --> 00:14:57.430
 Developers specify time intervals for batch acquisition or force measurements before the next feeling comes 

00:14:53.259 --> 00:15:01.440
 You can request the acquisition of 

00:14:57.430 --> 00:15:04.520
 Also two new combined sensors are supported 

00:15:01.440 --> 00:15:11.140
 A walk detection and pedometer 

00:15:04.520 --> 00:15:11.140
 Both can be implemented with hardware to reduce power consumption 

00:15:11.610 --> 00:15:21.570
 So far we have told the atmosphere of some of the api 

00:15:16.110 --> 00:15:23.400
 Besides that, the implementation of the web view is completely new based on chromium 

00:15:21.570 --> 00:15:27.060
 became 

00:15:23.400 --> 00:15:30.190
 Support high performance of the latest standard plan 

00:15:27.060 --> 00:15:34.360
 Provides excellent compatibility 

00:15:30.190 --> 00:15:37.270
 Most of the html 5 features of chrome for android are available 

00:15:34.360 --> 00:15:40.380
 With the new javascript engine va 

00:15:37.270 --> 00:15:40.380
 Is installed 

00:15:40.680 --> 00:15:45.750
 The new api also adds support for the right to left language 

00:15:44.730 --> 00:15:51.050
 Was 

00:15:45.750 --> 00:15:56.240
 For example, horizontal flip of drawing or pseudo locale can be used 

00:15:51.050 --> 00:16:00.019
 Declare the draw bubble as automirrored according to the user's locale 

00:15:56.240 --> 00:16:03.970
 Platform will automatically do spot disease 

00:16:00.019 --> 00:16:09.220
 You can reduce the duplication of several resources in the app 

00:16:03.970 --> 00:16:12.699
 Added support for light and left pseudo locales in developer options 

00:16:09.220 --> 00:16:17.710
 The layout of the screen is 

00:16:12.699 --> 00:16:21.280
 The language displayed in the right to left direction will remain the same 

00:16:17.710 --> 00:16:26.190
 Because of this right to left the layout area of ​​the app even if you can not read the language 

00:16:21.280 --> 00:16:26.190
 You can use it when debugging 

00:16:26.920 --> 00:16:35.130
 And there is good news for those who need fast calculations 

00:16:31.190 --> 00:16:39.360
 Render script is faster 

00:16:35.130 --> 00:16:41.300
 In addition, in android 4.4 render script direct call from c ++ 

00:16:39.360 --> 00:16:45.860
 can do 

00:16:41.300 --> 00:16:48.649
 ndk's new c ++ api renders scroll like java 

00:16:45.860 --> 00:16:54.760
 It is an api that calls the function with the RIP 

00:16:48.649 --> 00:16:54.760
 Script instruction custom kernel functionality is also available from c ++ 

00:16:55.350 --> 00:17:02.100
 Last but not least, some security issues in android 4.4 

00:16:59.910 --> 00:17:06.929
 Enhancements have been made 

00:17:02.100 --> 00:17:08.230
 First of all android se relaxation setting becomes garden 4 bedding from par 3 branch 

00:17:06.929 --> 00:17:12.120
 Was 

00:17:08.230 --> 00:17:18.380
 Cryptographic algorithms have also been enhanced 

00:17:12.120 --> 00:17:19.510
 Support for Elliptic Curve Digital Signature Algorithm Added to Kiss and Provider 

00:17:18.380 --> 00:17:25.480
 Also 

00:17:19.510 --> 00:17:32.610
 Script key diversion function This is implemented enhancement of key co-op function 

00:17:25.480 --> 00:17:32.610
 More protection for encryption keys when disk space is encrypted 

00:17:33.040 --> 00:17:41.530
 And there is big news related to android 4.4 

00:17:38.320 --> 00:17:43.920
 A new terminal has been announced 

00:17:41.530 --> 00:17:48.690
 It is Lexus 5 

00:17:43.920 --> 00:17:53.720
 Please check and purchase the latest information on Google Play. 

00:17:48.690 --> 00:17:53.720
 And we hope that you develop a nice app 

00:17:54.360 --> 00:18:00.730
 android 4.4 sdk is currently from sdk manager 

00:17:58.170 --> 00:18:05.590
 It is available for download 

00:18:00.730 --> 00:18:10.570
 Please use this to start updating your code 

00:18:05.590 --> 00:18:15.600
 For more detailed api features new features changes please 

00:18:10.570 --> 00:18:18.980
 Please visit the developer. Android. Com website 

00:18:15.600 --> 00:18:18.980
 thank you very much 

