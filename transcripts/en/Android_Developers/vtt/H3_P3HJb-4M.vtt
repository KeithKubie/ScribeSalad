WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.458
[MUSIC PLAYING]

00:00:06.916 --> 00:00:08.550
KENNETH FORD: Hi, everyone.

00:00:08.550 --> 00:00:11.310
Thank you for
coming and watching

00:00:11.310 --> 00:00:15.640
my session, which is going to
be Android on large screens.

00:00:15.640 --> 00:00:21.120
So as we all know, Android has
evolved from just being a phone

00:00:21.120 --> 00:00:21.780
platform.

00:00:21.780 --> 00:00:24.150
It's available on
watches and cars,

00:00:24.150 --> 00:00:28.560
as we just heard,
desktop, phones.

00:00:28.560 --> 00:00:30.030
And specifically,
the mobile space

00:00:30.030 --> 00:00:32.280
has also changed
pretty drastically.

00:00:32.280 --> 00:00:36.665
Let's see what your mobile
APK is running on today.

00:00:36.665 --> 00:00:38.420
So starting off
with the phone, it's

00:00:38.420 --> 00:00:42.530
what we all develop for
mainly, if not solely.

00:00:42.530 --> 00:00:44.780
A couple of keys
about the platform.

00:00:44.780 --> 00:00:49.714
It's portrait first, touch
first, and full screen first.

00:00:49.714 --> 00:00:52.210
A lot of apps now
even lock rotation.

00:00:52.210 --> 00:00:55.400
Some users do obviously
use multi-window

00:00:55.400 --> 00:00:56.900
or stylus and things like that.

00:00:56.900 --> 00:00:59.180
But majority of your
users are using it

00:00:59.180 --> 00:01:03.410
with regular touch screens
and in full screen.

00:01:03.410 --> 00:01:05.420
Moving on to tablets.

00:01:05.420 --> 00:01:09.290
Both orientations here are
kind of first class citizens.

00:01:09.290 --> 00:01:12.840
If you do opt to portrait,
users can still use your app

00:01:12.840 --> 00:01:14.660
in the portrait landscape.

00:01:14.660 --> 00:01:18.730
Larger screens do bring
challenges design wise,

00:01:18.730 --> 00:01:21.170
but also the ability to
kind of do different things,

00:01:21.170 --> 00:01:23.480
take more advantage
of the real estate,

00:01:23.480 --> 00:01:27.530
allow your users to
do things faster.

00:01:27.530 --> 00:01:29.600
But more importantly,
the different medium

00:01:29.600 --> 00:01:32.690
kind of brings a different
focus on what apps are probably

00:01:32.690 --> 00:01:34.250
going to be used more heavily--

00:01:34.250 --> 00:01:37.160
content apps or media
consumption apps,

00:01:37.160 --> 00:01:40.670
productivity apps, things
that can really take

00:01:40.670 --> 00:01:43.920
advantage of the larger screen.

00:01:43.920 --> 00:01:47.900
And then moving on to kind
of the desktop platforms.

00:01:47.900 --> 00:01:50.000
We have Chrome OS,
we have some OEMs

00:01:50.000 --> 00:01:51.860
that have made desktop
platforms as well

00:01:51.860 --> 00:01:54.235
like the Samsung [INAUDIBLE],,
the [INAUDIBLE] [? make ?]

00:01:54.235 --> 00:01:55.414
desktop mode.

00:01:55.414 --> 00:01:57.350
Also, Android has now
brought the ability

00:01:57.350 --> 00:02:01.400
to really take advantage of
having external displays.

00:02:01.400 --> 00:02:03.610
So it's very possible
that your app even if it's

00:02:03.610 --> 00:02:06.410
running on a phone is
actually being displayed

00:02:06.410 --> 00:02:08.209
to an external monitor.

00:02:08.209 --> 00:02:10.250
This is really where the
biggest difference comes

00:02:10.250 --> 00:02:13.080
in where it's landscape first.

00:02:13.080 --> 00:02:16.340
All these environments have
some sort of window resizing,

00:02:16.340 --> 00:02:19.050
and multi-windows could
be used a lot more often.

00:02:19.050 --> 00:02:21.380
And you have new first
class input methods

00:02:21.380 --> 00:02:23.660
such as keyboard and
mouse and track pads

00:02:23.660 --> 00:02:25.910
that actually either
ship with the device

00:02:25.910 --> 00:02:29.490
or will be connected.

00:02:29.490 --> 00:02:30.950
So what's the focus
on when you're

00:02:30.950 --> 00:02:33.116
thinking about kind of how
to bring your apps to all

00:02:33.116 --> 00:02:36.290
these platforms and have
a good user experience?

00:02:36.290 --> 00:02:39.170
Number one is design.

00:02:39.170 --> 00:02:41.310
Again, if you've really
been focusing on phones,

00:02:41.310 --> 00:02:43.220
most of your
designs are probably

00:02:43.220 --> 00:02:47.020
very portrait based and kind
of smaller screen based.

00:02:47.020 --> 00:02:50.000
Window management is
probably the biggest place

00:02:50.000 --> 00:02:52.100
where we see issues
with partner's apps.

00:02:52.100 --> 00:02:54.834
Dealing with resizing, some
multi-window consideration,

00:02:54.834 --> 00:02:56.750
things like that are
just problems we've never

00:02:56.750 --> 00:02:57.682
had to focus before.

00:02:57.682 --> 00:02:59.390
And then we're going
to talk a little bit

00:02:59.390 --> 00:03:01.790
about the tooling that's
available from Google

00:03:01.790 --> 00:03:04.280
to make sure that you're
able to actually develop

00:03:04.280 --> 00:03:10.362
for these platforms and bring
it into your actual cycle.

00:03:10.362 --> 00:03:12.290
So talking about design.

00:03:12.290 --> 00:03:15.440
Raise your hands if you have
layouts for large screens

00:03:15.440 --> 00:03:17.885
or tablets at all.

00:03:17.885 --> 00:03:20.860
That's a lot more
people than I expected.

00:03:20.860 --> 00:03:21.750
Cool.

00:03:21.750 --> 00:03:25.380
So biggest thing is just
thinking about larger screens,

00:03:25.380 --> 00:03:26.880
again.

00:03:26.880 --> 00:03:28.720
Probably for the
last couple of years,

00:03:28.720 --> 00:03:30.810
we've seen a lot
more apps come out

00:03:30.810 --> 00:03:33.600
that they may lock the
portrait or are solely mobile

00:03:33.600 --> 00:03:36.400
focused, which makes sense.

00:03:36.400 --> 00:03:38.790
But with the more and
more growing number

00:03:38.790 --> 00:03:43.140
of platforms that are running
your mobile APK but showing

00:03:43.140 --> 00:03:47.106
a completely different
form factor or platform,

00:03:47.106 --> 00:03:48.480
it's time to start
thinking again

00:03:48.480 --> 00:03:52.590
about how to really bring the
best experience to those areas.

00:03:52.590 --> 00:03:57.730
A really bad example of design
is actually Google Play Music,

00:03:57.730 --> 00:03:59.580
which is always great.

00:03:59.580 --> 00:04:03.730
So a couple things about this
that really are not great

00:04:03.730 --> 00:04:05.150
is super stretch layout.

00:04:05.150 --> 00:04:06.950
There's tons of white
space that could

00:04:06.950 --> 00:04:10.022
be used to show more
content to the user,

00:04:10.022 --> 00:04:12.480
whether it's album descriptions,
artist descriptions, album

00:04:12.480 --> 00:04:14.480
art, things like that.

00:04:14.480 --> 00:04:18.230
The biggest key here though is
there's no line dividers, which

00:04:18.230 --> 00:04:20.790
on a phone is fine because
the screen is so small,

00:04:20.790 --> 00:04:24.560
you can see what options
menu you're clicking on.

00:04:24.560 --> 00:04:29.030
When you take it to kind of
a larger landscape layout,

00:04:29.030 --> 00:04:31.250
it's really hard to
actually follow the lines

00:04:31.250 --> 00:04:36.290
and see what item you're
pressing options menu for.

00:04:36.290 --> 00:04:38.540
An external partner that we
worked a lot with actually

00:04:38.540 --> 00:04:40.040
is 1Password.

00:04:40.040 --> 00:04:41.630
So looking at their
phone layouts,

00:04:41.630 --> 00:04:43.430
it's kind of your
standard list of items

00:04:43.430 --> 00:04:45.230
that you'll drill down into.

00:04:45.230 --> 00:04:48.130
But when you move
to a larger screen,

00:04:48.130 --> 00:04:50.330
they really take advantage
of the real estate going

00:04:50.330 --> 00:04:52.910
to almost like a
three panel layout,

00:04:52.910 --> 00:04:55.550
allowing the user to really
get whatever content they

00:04:55.550 --> 00:04:59.000
need in a lot less
clicks and a lot faster.

00:04:59.000 --> 00:05:04.866
Also being able to showcase more
information at the same time.

00:05:04.866 --> 00:05:06.490
So kind of going back
to the same point

00:05:06.490 --> 00:05:09.130
is, again, just building
layouts for both orientations.

00:05:09.130 --> 00:05:12.340
And there's a couple
of big keys for this.

00:05:12.340 --> 00:05:16.312
Again, not all platforms
are portrait first.

00:05:16.312 --> 00:05:17.770
A lot of the desktop
environments--

00:05:17.770 --> 00:05:20.539
if you're only really
building for portrait,

00:05:20.539 --> 00:05:22.580
you're going to have a
pretty bad user experience

00:05:22.580 --> 00:05:24.910
when I want to use your app
in, let's say, full screen,

00:05:24.910 --> 00:05:26.535
or even just the top
half of the screen

00:05:26.535 --> 00:05:28.390
if I'm trying to multitask.

00:05:28.390 --> 00:05:30.070
On top of that,
resizing capabilities

00:05:30.070 --> 00:05:33.330
allow the user to make
your app whatever size,

00:05:33.330 --> 00:05:36.610
orientation, or screen ratio
that they really want to.

00:05:36.610 --> 00:05:39.610
So you really want to let
the user really decide

00:05:39.610 --> 00:05:40.930
how they want to use your app.

00:05:43.930 --> 00:05:47.200
Going back to kind of
mainly the desktop platforms

00:05:47.200 --> 00:05:51.480
is designing for input
mediums other than touch.

00:05:51.480 --> 00:05:54.150
Make sure your design is taken
into consideration, like how

00:05:54.150 --> 00:05:57.090
your app works maybe using a
mouse or stylus, and things

00:05:57.090 --> 00:05:58.290
like that.

00:05:58.290 --> 00:06:01.560
On top of this,
the UX patterns are

00:06:01.560 --> 00:06:04.640
different for non-touch devices.

00:06:04.640 --> 00:06:07.860
Things like right
clicking is a little bit

00:06:07.860 --> 00:06:12.162
different than what we kind of
are used to with long pressing.

00:06:12.162 --> 00:06:15.690
Most of the paradigms are long
pressing to multi-select items.

00:06:15.690 --> 00:06:18.630
Whereas when you right
click on a desktop,

00:06:18.630 --> 00:06:20.640
you're usually
expecting some type of

00:06:20.640 --> 00:06:23.230
pop up context menu
and things like that.

00:06:23.230 --> 00:06:25.170
So taking the time
to really think

00:06:25.170 --> 00:06:28.080
about how your app works for
the different UX considerations.

00:06:28.080 --> 00:06:33.240
The other big one that we
notice is hover actions.

00:06:33.240 --> 00:06:36.150
On the web or on desktop
environments for the mouse,

00:06:36.150 --> 00:06:37.890
you really expect
some type of feedback

00:06:37.890 --> 00:06:41.250
when you move your mouse
over an action item

00:06:41.250 --> 00:06:43.290
to let you know that
there is actually

00:06:43.290 --> 00:06:44.956
something you can do
there, whether it's

00:06:44.956 --> 00:06:47.340
clickable, or dragable.

00:06:47.340 --> 00:06:49.890
There's some behavior,
there's some feedback.

00:06:49.890 --> 00:06:54.600
Myself, even if I use the
app on a phone extensively--

00:06:54.600 --> 00:06:57.330
Google Drive is a
good example of this--

00:06:57.330 --> 00:07:01.230
when I use it on, let's
say, Android on Chrome OS,

00:07:01.230 --> 00:07:03.240
I'll miss actions
that I can actually

00:07:03.240 --> 00:07:05.700
do because just natively
on this platform,

00:07:05.700 --> 00:07:09.790
I'm expecting some
type of hover actions.

00:07:09.790 --> 00:07:11.580
I'm going to go over
two simple APIs.

00:07:11.580 --> 00:07:14.130
There are many APIs
that kind of help

00:07:14.130 --> 00:07:16.770
handle a lot of these
input methods and things,

00:07:16.770 --> 00:07:18.930
such as mouse scrolling
and things like that.

00:07:18.930 --> 00:07:21.420
And there'll be resources
when the slides get posted.

00:07:21.420 --> 00:07:25.560
But right clicking, which is
one of the usual kind of feature

00:07:25.560 --> 00:07:27.430
blocks, is super easy.

00:07:27.430 --> 00:07:29.430
You just set an on
context with listener

00:07:29.430 --> 00:07:31.950
and make sure that you're
exposing whatever behavior

00:07:31.950 --> 00:07:36.874
or functionality you have on
long press in this method.

00:07:36.874 --> 00:07:40.050
Again, also hopefully
considering any type of UX

00:07:40.050 --> 00:07:41.920
changes you need to make.

00:07:41.920 --> 00:07:44.220
And then setting the
hover listener to kind of

00:07:44.220 --> 00:07:46.410
watch for the user's points.

00:07:46.410 --> 00:07:48.935
You're hovering over the
item and [? out. ?] Again,

00:07:48.935 --> 00:07:50.310
this is really
the biggest one we

00:07:50.310 --> 00:07:53.090
see that will lead to
kind of misfunctionality

00:07:53.090 --> 00:07:56.910
or kind of really give you
the desktop native feel,

00:07:56.910 --> 00:08:00.900
or even just kind of the
large screen native feel.

00:08:00.900 --> 00:08:04.140
In terms of hovering, most
of our native components

00:08:04.140 --> 00:08:05.940
do handle this somewhat.

00:08:05.940 --> 00:08:07.680
But depending on the
colors you're using,

00:08:07.680 --> 00:08:11.160
the contrast and
change may not be

00:08:11.160 --> 00:08:15.120
enough for you or your users,
or especially accessibility,

00:08:15.120 --> 00:08:15.840
things like that.

00:08:19.030 --> 00:08:21.045
At the end of the
day though, you

00:08:21.045 --> 00:08:23.570
know how your users use the
app, and you know the product.

00:08:23.570 --> 00:08:26.690
So take some time
and use your app

00:08:26.690 --> 00:08:28.970
on kind of these
different platforms

00:08:28.970 --> 00:08:31.520
and think about how you would
expect the app to behave,

00:08:31.520 --> 00:08:34.850
things that you would expect
the app to take advantage of.

00:08:34.850 --> 00:08:36.919
Note taking out
the stylus based--

00:08:36.919 --> 00:08:41.210
may not really need to focus
much on mouse input or keyboard

00:08:41.210 --> 00:08:43.629
input, where a
productivity app is really

00:08:43.629 --> 00:08:46.170
going to want to take advantage
of all the screen real estate

00:08:46.170 --> 00:08:47.810
and find ways to let
the users do what they

00:08:47.810 --> 00:08:49.101
need to do as fast as possible.

00:08:51.960 --> 00:08:54.260
So talking about
window management.

00:08:54.260 --> 00:08:56.460
This, again, is really
the biggest area

00:08:56.460 --> 00:09:00.480
where we see crashes happen
because it's just challenges

00:09:00.480 --> 00:09:03.180
that we've never had
to face before and kind

00:09:03.180 --> 00:09:06.650
of a mobile only environment.

00:09:06.650 --> 00:09:08.760
I love harping on
rotation because I

00:09:08.760 --> 00:09:12.240
see so many apps that
lock to portrait, which

00:09:12.240 --> 00:09:14.050
is completely understandable.

00:09:14.050 --> 00:09:15.660
But on these
different platforms,

00:09:15.660 --> 00:09:19.910
it really shows kind of
where the experience falls.

00:09:19.910 --> 00:09:22.690
If you do locked on portrait
on Chrome OS specifically,

00:09:22.690 --> 00:09:24.730
this is how your
app will look like.

00:09:24.730 --> 00:09:28.190
You'll get these super cool
black bars on the side.

00:09:28.190 --> 00:09:29.740
And it's really
just a whole bunch

00:09:29.740 --> 00:09:31.630
of wasted screen real estate.

00:09:31.630 --> 00:09:35.530
On top of that, it also
really shows the user

00:09:35.530 --> 00:09:37.510
and gives this really
non-native feel

00:09:37.510 --> 00:09:41.650
just because it doesn't really
conform to the platform well.

00:09:41.650 --> 00:09:44.470
Now, why do we generally
lock to portrait?

00:09:44.470 --> 00:09:46.570
Usually to run away from
handling configuration

00:09:46.570 --> 00:09:50.350
changes because
they've always been

00:09:50.350 --> 00:09:52.400
rather difficult to deal with.

00:09:52.400 --> 00:09:54.790
But on these larger
screen platforms,

00:09:54.790 --> 00:09:58.640
configuration changes are
more important than ever.

00:09:58.640 --> 00:10:01.150
Resizing and
multi-window brings a lot

00:10:01.150 --> 00:10:04.720
of new kind of configuration
change paradigms

00:10:04.720 --> 00:10:07.690
and challenges.

00:10:07.690 --> 00:10:10.360
Chrome OS is probably
one of the most complex

00:10:10.360 --> 00:10:13.000
of the resizing
strategies because it

00:10:13.000 --> 00:10:16.670
does trigger configuration
changes pretty frequently.

00:10:16.670 --> 00:10:19.080
I know some of the
other desktop platforms

00:10:19.080 --> 00:10:22.660
don't cause as many
configuration changes.

00:10:22.660 --> 00:10:25.030
On top of that,
with bigger screens,

00:10:25.030 --> 00:10:27.250
multi-window is going
to be used much more

00:10:27.250 --> 00:10:28.890
frequently than before.

00:10:28.890 --> 00:10:30.670
So any bugs that
you do have in that

00:10:30.670 --> 00:10:34.300
are going to start kind of
being surfaced a lot more.

00:10:34.300 --> 00:10:37.750
This is a quick GIF
about just kind of how

00:10:37.750 --> 00:10:39.380
resizing on Chrome OS works.

00:10:39.380 --> 00:10:42.010
So anytime one of
those labels changes,

00:10:42.010 --> 00:10:45.500
it's going through a complete
destroy and rebuild process.

00:10:45.500 --> 00:10:48.310
So you can imagine that this
can get triggered substantially

00:10:48.310 --> 00:10:51.460
faster and substantially
more often than on a phone

00:10:51.460 --> 00:10:54.030
just because rotation
is just kind of slow.

00:10:57.520 --> 00:10:59.994
Jetpack helps with this.

00:10:59.994 --> 00:11:01.910
Things like view model
and being able to build

00:11:01.910 --> 00:11:05.060
your own components that
are lifecycle aware really

00:11:05.060 --> 00:11:08.420
allows you to kind of take
any of your business logic

00:11:08.420 --> 00:11:10.010
that's in your
activity, anything

00:11:10.010 --> 00:11:11.870
you're doing to save
state, and move it

00:11:11.870 --> 00:11:14.870
there so that your activity
destroy and rebuild process

00:11:14.870 --> 00:11:15.540
is really quick.

00:11:18.650 --> 00:11:20.540
Your app will not
always be in focus.

00:11:20.540 --> 00:11:21.920
Again, this isn't new.

00:11:21.920 --> 00:11:24.950
With Android N, we
brought multi-window.

00:11:24.950 --> 00:11:27.290
But on these larger
screens, you're

00:11:27.290 --> 00:11:29.840
going to see this being
the case a lot more often.

00:11:29.840 --> 00:11:32.120
I know most of us that
work with a large monitor

00:11:32.120 --> 00:11:33.714
have multiple things up at once.

00:11:33.714 --> 00:11:35.630
And you need to make
sure that your content is

00:11:35.630 --> 00:11:38.840
still visible and playing even
if you're not the focused app.

00:11:38.840 --> 00:11:41.300
So make sure that you're
still displaying messages

00:11:41.300 --> 00:11:44.240
if you're a messaging app,
or your content is continuing

00:11:44.240 --> 00:11:46.685
playing.

00:11:46.685 --> 00:11:48.310
And then take advantage
of the features

00:11:48.310 --> 00:11:51.070
on these new and
different platforms.

00:11:51.070 --> 00:11:52.690
Larger screens and
external monitors

00:11:52.690 --> 00:11:54.560
bring new possibilities.

00:11:54.560 --> 00:11:57.440
One of the things that
we've seen a couple apps do,

00:11:57.440 --> 00:11:59.500
such as email apps or
word processing apps

00:11:59.500 --> 00:12:02.950
that really kind of bring
a better experience,

00:12:02.950 --> 00:12:08.904
is allowing email composed
windows or new documents

00:12:08.904 --> 00:12:11.320
to be shown in different tasks
so that the user can really

00:12:11.320 --> 00:12:14.200
see their email plus
this new email they're

00:12:14.200 --> 00:12:17.780
creating in a different window.

00:12:17.780 --> 00:12:20.250
Something that we
released quite a bit ago

00:12:20.250 --> 00:12:24.066
but is now really being used
a lot more is drag and drop.

00:12:24.066 --> 00:12:26.310
Again, these desktop
platforms specifically,

00:12:26.310 --> 00:12:29.040
users expect drag and
drop to be a thing.

00:12:29.040 --> 00:12:30.660
They're not really
going to understand

00:12:30.660 --> 00:12:33.159
that this is an Android app and
we've never thought about it

00:12:33.159 --> 00:12:35.290
before, so why
doesn't this exist?

00:12:35.290 --> 00:12:37.500
So think about if drag
and drop kind of makes

00:12:37.500 --> 00:12:41.685
sense in your app, and how
you can kind of bring it

00:12:41.685 --> 00:12:43.597
to these platforms.

00:12:43.597 --> 00:12:45.180
And then not really
window management,

00:12:45.180 --> 00:12:47.790
but different features that
are kind of new to some

00:12:47.790 --> 00:12:51.000
of these ecosystems is just--

00:12:51.000 --> 00:12:54.360
different info capabilities
and specifically increased

00:12:54.360 --> 00:12:56.166
stylus usage.

00:12:56.166 --> 00:12:57.540
The biggest thing
that we've seen

00:12:57.540 --> 00:12:59.310
that users have logged
on some of the apps

00:12:59.310 --> 00:13:00.990
that we've worked
with is the ability

00:13:00.990 --> 00:13:04.110
to have keyboard shortcuts
and keyboard navigation

00:13:04.110 --> 00:13:05.790
so that if they're
heavy power users

00:13:05.790 --> 00:13:07.920
or there's things
that people do often,

00:13:07.920 --> 00:13:10.914
they're able to do these things
faster in and out of the app,

00:13:10.914 --> 00:13:13.080
get what they need to get
done as quick as possible.

00:13:16.000 --> 00:13:18.770
So this is great and all,
but how do we actually

00:13:18.770 --> 00:13:19.960
build for this?

00:13:19.960 --> 00:13:22.698
And moving on to tooling.

00:13:22.698 --> 00:13:25.197
It'd be awful if I came up here
and talked about kind of you

00:13:25.197 --> 00:13:27.770
should do all these things,
yet there's no tools from us

00:13:27.770 --> 00:13:30.590
to make this possible.

00:13:30.590 --> 00:13:34.430
Most of the tooling
examples that we do

00:13:34.430 --> 00:13:36.270
have are around Chrome OS.

00:13:36.270 --> 00:13:38.120
A, it's our
platform, and then B,

00:13:38.120 --> 00:13:42.260
it's also kind of the most all
in one platform that we have.

00:13:42.260 --> 00:13:45.860
Most devices ship with a
keyboard and track pad.

00:13:45.860 --> 00:13:47.630
Some don't even
have a touch screen.

00:13:47.630 --> 00:13:50.690
And then it has one of the more
complex resizing strategies.

00:13:50.690 --> 00:13:55.910
So it's kind of the best all
in one platform to test on.

00:13:55.910 --> 00:13:58.460
We were working on bringing some
interest to the integration,

00:13:58.460 --> 00:14:02.360
specifically around larger
screens in Chrome OS.

00:14:02.360 --> 00:14:04.760
Lint additions are coming soon.

00:14:04.760 --> 00:14:08.560
It's actually my job once this
event's over to finish this.

00:14:08.560 --> 00:14:10.650
And then we're really
looking at more things

00:14:10.650 --> 00:14:11.889
that we can bring to the IDE.

00:14:11.889 --> 00:14:14.180
It's really great to have
devices that you can test on,

00:14:14.180 --> 00:14:17.480
but we want to be able
to give quicker feedback

00:14:17.480 --> 00:14:19.340
and things to look for
while you're actually

00:14:19.340 --> 00:14:21.420
developing in the IDE.

00:14:21.420 --> 00:14:24.660
So if you have ideas,
please come let me know.

00:14:24.660 --> 00:14:27.650
There's a Chrome OS emulator
that's currently in preview.

00:14:27.650 --> 00:14:31.880
So if you don't have devices,
you can download the emulator

00:14:31.880 --> 00:14:36.140
and start to kind of see
where your app falls apart,

00:14:36.140 --> 00:14:41.410
things that don't work,
things that crash, et cetera.

00:14:41.410 --> 00:14:43.690
One of the biggest
complaints for developing

00:14:43.690 --> 00:14:46.420
for Chrome OS in
testing has been

00:14:46.420 --> 00:14:49.690
having to use ADB over Wi-Fi,
and the development cycle's

00:14:49.690 --> 00:14:51.870
always been pretty crappy.

00:14:51.870 --> 00:14:55.240
But on the HP Chromebook
X2 and the Pixelbook,

00:14:55.240 --> 00:14:58.930
you can ADB over USB, so you
can actually bring the devices

00:14:58.930 --> 00:15:01.030
into the same kind
of development cycle

00:15:01.030 --> 00:15:02.950
that you do with phones.

00:15:02.950 --> 00:15:05.800
Other devices still
require ADB over Wi-Fi,

00:15:05.800 --> 00:15:11.820
but we hope to bring more and
more devices to this feature.

00:15:11.820 --> 00:15:13.440
But the easiest
way really is just

00:15:13.440 --> 00:15:15.690
to run Android
Studio on Chrome OS.

00:15:15.690 --> 00:15:18.720
This is available currently
on the Pixelbook in preview,

00:15:18.720 --> 00:15:21.546
and we're hoping to bring it
to more devices in the future.

00:15:21.546 --> 00:15:25.590
And we do have this setup at
the Android and Chrome OS tables

00:15:25.590 --> 00:15:27.540
as well as the
Android Studio table.

00:15:27.540 --> 00:15:29.490
Being able to just
kind of build the app

00:15:29.490 --> 00:15:32.380
and deploy it
directly to the device

00:15:32.380 --> 00:15:35.196
makes the whole development
cycles substantially easier

00:15:35.196 --> 00:15:35.695
and faster.

00:15:38.800 --> 00:15:41.200
At the end of day, Android
is always evolving.

00:15:41.200 --> 00:15:43.660
There's more and more platforms
that are running APKs,

00:15:43.660 --> 00:15:46.300
whether they're different
flavors or even just

00:15:46.300 --> 00:15:48.220
your mobile APK.

00:15:48.220 --> 00:15:51.354
So make sure that
your app is too.

00:15:51.354 --> 00:15:52.220
Thank you.

00:15:52.220 --> 00:15:54.650
Again, please ask any questions.

00:15:54.650 --> 00:15:57.030
Any suggestions that
you have for tooling,

00:15:57.030 --> 00:16:00.452
any things that you've run into
when trying to develop for kind

00:16:00.452 --> 00:16:01.910
of larger screen
platforms, I would

00:16:01.910 --> 00:16:04.670
love to hear about it so
that we can tackle this.

00:16:04.670 --> 00:16:05.630
Thank you.

00:16:05.630 --> 00:16:08.980
[MUSIC PLAYING]

