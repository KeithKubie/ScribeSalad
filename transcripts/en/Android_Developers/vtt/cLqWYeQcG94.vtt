WEBVTT
Kind: captions
Language: en

00:00:08.380 --> 00:00:08.870
Hi.

00:00:08.870 --> 00:00:11.220
My name is Reto Meier and I'm
the tech lead for Google's

00:00:11.220 --> 00:00:13.420
Android Developer
Relations team.

00:00:13.420 --> 00:00:15.740
In this Efficient Data Transfers
DevByte, I'm going

00:00:15.740 --> 00:00:18.080
to demonstrate a couple of quick
techniques that you can

00:00:18.080 --> 00:00:20.590
use to better understand when
your application is making

00:00:20.590 --> 00:00:22.075
network requests.

00:00:22.075 --> 00:00:25.070
The aim is to modify the data
transfer profile of your apps

00:00:25.070 --> 00:00:28.310
to optimize for minimizing the
battery drain caused by

00:00:28.310 --> 00:00:30.100
activating the cell radio.

00:00:30.100 --> 00:00:32.220
As you may have already seen in
my DevByte on understanding

00:00:32.220 --> 00:00:35.490
the cell radio, it's good
practice to use the big cookie

00:00:35.490 --> 00:00:38.580
approach to data transfers to
avoid a fragmented network

00:00:38.580 --> 00:00:41.610
traffic profile that keeps
the cell radio powered up

00:00:41.610 --> 00:00:44.420
indefinitely, in favor of
minimizing the number of radio

00:00:44.420 --> 00:00:45.610
state transitions.

00:00:45.610 --> 00:00:47.640
And before you optimize your
code, you need a way to

00:00:47.640 --> 00:00:50.050
generate these graphs that show
exactly when your app is

00:00:50.050 --> 00:00:52.660
transferring data and to
understand what you're looking

00:00:52.660 --> 00:00:55.600
for so you can look for areas
that need improvement.

00:00:55.600 --> 00:00:57.170
There are several tools
you can use for this.

00:00:57.170 --> 00:01:00.280
Most simply, you can use logcat
to generate log entries

00:01:00.280 --> 00:01:02.720
that define the timing
information of your network

00:01:02.720 --> 00:01:05.800
requests at their start and end
points, and then use the

00:01:05.800 --> 00:01:08.500
exported log file to graph the
output using the graphing tool

00:01:08.500 --> 00:01:10.050
of your choice.

00:01:10.050 --> 00:01:11.870
If you'd like someone to handle
that graphing step for

00:01:11.870 --> 00:01:15.410
you, AT&amp;T offer the open source
Application Resource

00:01:15.410 --> 00:01:17.930
Optimizer, or ARO tool, that
will generate the pretty

00:01:17.930 --> 00:01:20.520
graphs and even overlay the
battery state model, as well

00:01:20.520 --> 00:01:23.270
as providing you with specific
recommendations based on their

00:01:23.270 --> 00:01:25.250
analysis of your app.

00:01:25.250 --> 00:01:27.830
Another great alternative is to
use the Network Statistics

00:01:27.830 --> 00:01:29.920
tab in the DDMS view,
which is part of the

00:01:29.920 --> 00:01:31.870
Android Developer Tools.

00:01:31.870 --> 00:01:34.110
As you can see in this
screenshot, it displays the

00:01:34.110 --> 00:01:36.150
amount of data being transferred
and the direction

00:01:36.150 --> 00:01:37.400
of the data flow.

00:01:37.400 --> 00:01:39.700
Additionally, you can tag your
output sockets to color-code

00:01:39.700 --> 00:01:43.110
your data transfers, making it
easier for you to see where

00:01:43.110 --> 00:01:45.460
each transfer is originating.

00:01:45.460 --> 00:01:47.770
If you're using the HTTP
client to execute your

00:01:47.770 --> 00:01:50.710
transfers, the ThreadStatsTag
associated with the current

00:01:50.710 --> 00:01:53.530
thread will automatically be
associated with the socket

00:01:53.530 --> 00:01:56.360
used for transfers using
the HTTP client.

00:01:56.360 --> 00:01:58.530
Note that for socket tagging
to work, you need a device

00:01:58.530 --> 00:02:00.330
running Jelly Bean or higher.

00:02:00.330 --> 00:02:02.770
So once you've generated a
representation of your app's

00:02:02.770 --> 00:02:05.460
transfer profile, you can start
analyzing it for battery

00:02:05.460 --> 00:02:06.290
inefficiencies.

00:02:06.290 --> 00:02:08.560
The most important thing
to look for are

00:02:08.560 --> 00:02:09.860
any periodic transfers.

00:02:09.860 --> 00:02:12.920
Any regular pattern of repeating
transfers will cause

00:02:12.920 --> 00:02:16.420
a correspondingly regular
pattern of radio activations,

00:02:16.420 --> 00:02:17.940
so you're effectively
setting the minimum

00:02:17.940 --> 00:02:19.250
level of battery drain.

00:02:19.250 --> 00:02:22.220
So the shorter the period
between updates, the higher

00:02:22.220 --> 00:02:23.240
the battery drain.

00:02:23.240 --> 00:02:25.980
Now in this example, the period
is 15 seconds, more

00:02:25.980 --> 00:02:27.700
than enough to keep the
battery powered up

00:02:27.700 --> 00:02:28.910
indefinitely.

00:02:28.910 --> 00:02:31.220
But depending on the device
and carrier, even a period

00:02:31.220 --> 00:02:34.280
over a minute may be enough to
prevent the radio from ever

00:02:34.280 --> 00:02:36.840
dropping into standby
mode completely.

00:02:36.840 --> 00:02:39.260
Now, we can incrementally reduce
the battery pack by

00:02:39.260 --> 00:02:41.370
lowering the frequency of
these regular transfers.

00:02:41.370 --> 00:02:44.110
But a better approach is to
try and eliminate periodic

00:02:44.110 --> 00:02:47.260
updates completely, allowing
your app to have a baseline of

00:02:47.260 --> 00:02:48.710
no battery drain.

00:02:48.710 --> 00:02:51.050
Now, periodic data transfer
spikes are typically an

00:02:51.050 --> 00:02:53.170
indicator of either a regularly
scheduled upload,

00:02:53.170 --> 00:02:55.840
such as analytics or ad
impressions, or client-side

00:02:55.840 --> 00:02:59.040
scheduled polling, generally
implemented using it a timer

00:02:59.040 --> 00:03:00.840
or a repeating alarm.

00:03:00.840 --> 00:03:03.790
You can eliminate both using
some simple best practices.

00:03:03.790 --> 00:03:05.580
Anything that's not
time-sensitive, such as

00:03:05.580 --> 00:03:07.710
analytics data, ad impressions,
or anything else

00:03:07.710 --> 00:03:10.290
that doesn't have a direct
impact on the user experience

00:03:10.290 --> 00:03:12.130
should be cued up and batched
to be transferred

00:03:12.130 --> 00:03:13.690
together as a group.

00:03:13.690 --> 00:03:16.245
The best approach is to simply
fill the queue and trigger all

00:03:16.245 --> 00:03:19.130
these delay-tolerant downloads
the next time you need to

00:03:19.130 --> 00:03:21.620
perform something that is
time-sensitive, like

00:03:21.620 --> 00:03:24.460
downloading new music, updated
headlines, current sports

00:03:24.460 --> 00:03:27.600
scores, whatever data your users
are interacting with.

00:03:27.600 --> 00:03:30.330
If time-insensitive data is the
only data you transfer,

00:03:30.330 --> 00:03:33.210
you may find it necessary to
schedule a daily sync.

00:03:33.210 --> 00:03:35.010
In that scenario, the best
approach is to use a

00:03:35.010 --> 00:03:37.040
SyncAdapter to handle
this for you.

00:03:37.040 --> 00:03:39.160
We'll cover that in
another DevByte.

00:03:39.160 --> 00:03:42.340
But where a repeating alarm is
the only thing that will work,

00:03:42.340 --> 00:03:45.330
you can try and optimize that by
randomizing the periodicity

00:03:45.330 --> 00:03:48.790
as shown here and make the
frequency as low as possible.

00:03:48.790 --> 00:03:50.840
If you're polling your server
to check for updates, you

00:03:50.840 --> 00:03:53.300
should do everything in your
power to replace client-side

00:03:53.300 --> 00:03:55.830
polling with Google
Cloud Messaging.

00:03:55.830 --> 00:03:58.890
This technology lets you send
messages from your server to

00:03:58.890 --> 00:04:01.660
specific application instances
through Google's Cloud

00:04:01.660 --> 00:04:02.760
Messaging infrastructure.

00:04:02.760 --> 00:04:05.430
So instead of having each device
poll your server every

00:04:05.430 --> 00:04:09.200
1, 5, 15, or 60 minutes to check
for updates which may or

00:04:09.200 --> 00:04:12.430
may not exist, you can have your
server notify each device

00:04:12.430 --> 00:04:15.060
when there's new information
ready for it to download.

00:04:15.060 --> 00:04:17.510
The result is an improved user
experience thanks to both

00:04:17.510 --> 00:04:21.320
better battery efficiency and
lower latency updates.

00:04:21.320 --> 00:04:24.010
I examine both SyncAdapters and
Google Cloud Messaging in

00:04:24.010 --> 00:04:25.910
more detail, as well as
exploring some other

00:04:25.910 --> 00:04:28.460
approaches to eliminating
repeating transfers, later in

00:04:28.460 --> 00:04:30.070
this DevByte series.

00:04:30.070 --> 00:04:32.600
For now, having eliminated
periodic transfers, let's look

00:04:32.600 --> 00:04:34.880
at some more indicators for
potential efficiency

00:04:34.880 --> 00:04:36.280
improvements.

00:04:36.280 --> 00:04:39.650
Another pattern to look for is
short spikes, either in height

00:04:39.650 --> 00:04:40.840
or duration.

00:04:40.840 --> 00:04:42.980
While they may not be regular,
they typically indicate

00:04:42.980 --> 00:04:45.160
transfers that could be bundled
together in the same

00:04:45.160 --> 00:04:47.960
way as periodic transfers or
possibly batched together or

00:04:47.960 --> 00:04:49.470
even pre-fetched.

00:04:49.470 --> 00:04:51.920
The same thing goes for
transfers of any kind that

00:04:51.920 --> 00:04:55.260
happen in close proximity
but don't quite overlap.

00:04:55.260 --> 00:04:57.570
Now, it's significantly more
efficient to have transfers

00:04:57.570 --> 00:05:00.240
happen when the radio is already
in it's active state,

00:05:00.240 --> 00:05:02.740
so when a time-sensitive
transfer is initiated for

00:05:02.740 --> 00:05:06.620
whatever reason you should look
to preempt any transfers

00:05:06.620 --> 00:05:09.350
which are likely to occur within
the next few minutes.

00:05:09.350 --> 00:05:11.680
This is particularly true of any
scheduled transfers, but

00:05:11.680 --> 00:05:15.700
also includes potentially
user-initiated transfers.

00:05:15.700 --> 00:05:17.690
Now for example, say you
have a news app.

00:05:17.690 --> 00:05:20.370
If you're forced to perform a
download to let the user read

00:05:20.370 --> 00:05:22.910
a full article that you haven't
yet pre-fetched, you

00:05:22.910 --> 00:05:25.000
should use this as an
opportunity pre-fetch other

00:05:25.000 --> 00:05:27.520
articles that they're likely to
read next, particularly if

00:05:27.520 --> 00:05:29.250
switching between your articles
is as simple as

00:05:29.250 --> 00:05:30.750
swiping left or right.

00:05:30.750 --> 00:05:33.490
Now alternatively, if the action
is time-sensitive but

00:05:33.490 --> 00:05:36.970
not critical, for example
uploading an image, it might

00:05:36.970 --> 00:05:39.850
be worth holding off for up to
30 seconds, just in case

00:05:39.850 --> 00:05:43.100
another transfer is initiated
in the interim.

00:05:43.100 --> 00:05:45.690
Now perhaps not surprisingly,
this functionality is built

00:05:45.690 --> 00:05:48.200
into the SyncAdapter, which also
handles things like loss

00:05:48.200 --> 00:05:51.550
connectivity and batching
transfers across applications.

00:05:51.550 --> 00:05:53.780
So it makes it a great approach
for handling all of

00:05:53.780 --> 00:05:55.560
your data transfers.

00:05:55.560 --> 00:05:57.830
I'll dive into that and
further efficient data

00:05:57.830 --> 00:06:00.600
transfer topics in more detail
in other DevBytes in this

00:06:00.600 --> 00:06:02.620
series, including how to
implement some of those best

00:06:02.620 --> 00:06:05.290
practices using simple code
patterns, Google Cloud

00:06:05.290 --> 00:06:06.580
Messaging, and the SyncAdapter.

