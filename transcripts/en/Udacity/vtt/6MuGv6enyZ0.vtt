WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So, we're going to start off with the Python statement "if A or B and C:",

00:00:04.000 --> 00:00:09.000
so let's make sure to nail down the precedents so we don't have to remember that.

00:00:09.000 --> 00:00:12.000
If A is true, or else both B and C are true,

00:00:12.000 --> 00:00:14.000
then we're going to execute some code.

00:00:14.000 --> 00:00:17.000
And so now let's look what it takes to get full MC/DC coverage

00:00:17.000 --> 00:00:19.000
of this bit of code.

00:00:19.000 --> 00:00:22.000
The first thing we can see is that we're going to need to test each of the variables

00:00:22.000 --> 00:00:25.000
with both to their true and false values,

00:00:25.000 --> 00:00:28.000
because the conditions, that is to say, the conditions are A, B, and C here,

00:00:28.000 --> 00:00:30.000
need to take on all possible values.

00:00:30.000 --> 00:00:33.000
We can see that each of the conditions is going to need to be assigned both the true value

00:00:33.000 --> 00:00:36.000
and the false value during the test that we run.

00:00:36.000 --> 00:00:40.000
Now, the other part of MC/DC coverage--that is, does every condition independently affect

00:00:40.000 --> 00:00:43.000
the outcome of a decision--is going to be a little harder to deal with.

00:00:43.000 --> 00:00:45.000
Let's take a look.

00:00:45.000 --> 00:00:48.000
Let's first consider the input where A is true, B is false, and C is true.

00:00:48.000 --> 00:00:50.000
We don't even need to look at the B and C part of the expression,

00:00:50.000 --> 00:00:55.000
because we know that if A is true, then the entire condition succeeds.

00:00:55.000 --> 00:00:57.000
This maps to a true value.

00:00:57.000 --> 00:01:00.000
What we want to verify here is that we can come up with a test case where every condition

00:01:00.000 --> 00:01:02.000
independently affects that outcome of a decision.

00:01:02.000 --> 00:01:05.000
Since our top-level operator here is an or,

00:01:05.000 --> 00:01:07.000
let's see how we can make the whole thing come out false.

00:01:07.000 --> 00:01:10.000
While the B and C clause already came out to false,

00:01:10.000 --> 00:01:13.000
because if B is false, then the whole thing comes out to false.

00:01:13.000 --> 00:01:17.000
If we make A false, then the entire decision will come out to be false,

00:01:17.000 --> 00:01:20.000
and if we've changed only A and we haven't changed B and C,

00:01:20.000 --> 00:01:24.000
then we've shown that A independently affects the outcome.

00:01:24.000 --> 00:01:26.000
So, let's write another test case.

00:01:26.000 --> 00:01:30.000
Our second test case with A being input as false, B input as false, and C as true,

00:01:30.000 --> 00:01:33.000
leads the overall decision to come out as false.

00:01:33.000 --> 00:01:36.000
We've shown now that A independently affects the outcome.

00:01:36.000 --> 00:01:38.000
So let's try to do the same thing for B and C.

00:01:38.000 --> 00:01:42.000
If we want to continue trying to leave everything the same and only change the value of one variable

00:01:42.000 --> 00:01:45.000
in order to establish this independence condition,

00:01:45.000 --> 00:01:47.000
let's this time try flipping the value of B.

00:01:47.000 --> 00:01:52.000
We're going to have A being false, B being true, and C being true.

00:01:52.000 --> 00:01:57.000
If we look at the overall value of the decision, what now happens is that B and C evaluates to true,

00:01:57.000 --> 00:01:59.000
so it doesn't matter that A evaluates to false.

00:01:59.000 --> 00:02:01.000
Overall, decision evaluates to true this time.

00:02:01.000 --> 00:02:06.000
By flipping the value of only B we've satisfied this condition for the input B.

00:02:06.000 --> 00:02:09.000
That is to say we've shown that B independently affects the outcome,

00:02:09.000 --> 00:02:13.000
because when we change B, the overall value of the decision went from false to true.

00:02:13.000 --> 00:02:15.000
Now let's see if we can do the same thing for C.

00:02:15.000 --> 00:02:18.000
We're going to leave A and B the same, and we're going to pass in C as false.

00:02:18.000 --> 00:02:20.000
Now let's look what happens.

00:02:20.000 --> 00:02:26.000
B and C evaluates to false, and then also A is false, so the entire value of the boolean decision

00:02:26.000 --> 00:02:28.000
comes out to be false.

00:02:28.000 --> 00:02:32.000
By only changing C and by seeing that the overall decision changes value,

00:02:32.000 --> 00:02:35.000
we've now shown that C independently affects the outcome of the decision.

00:02:35.000 --> 00:02:39.000
So, what I believe we have here is a minimal--of if not minimal, at least fairly small--

00:02:39.000 --> 00:02:44.000
set of test cases that together gets 100% MC/DC coverage 

00:02:44.000 --> 00:02:46.000
for this particular conditional statement in Python.

00:02:46.000 --> 00:02:48.000
You can see here that this isn't a particularly complicated conditional.

00:02:48.000 --> 00:02:50.000
We could've written one much more complicated,

00:02:50.000 --> 00:02:54.000
and if we had, we probably would've had a fairly hard time reasoning this stuff out by hand,

00:02:54.000 --> 00:02:58.000
and what we would've needed to do in that case is probably draw out a full truth table.

00:02:58.000 --> 00:03:01.000
So, let's look at the idea behind MC/DC coverage.

00:03:01.000 --> 00:03:03.000
Why would this be a good thing at all?

00:03:03.000 --> 00:03:06.000
What it's done is taken a statement that was really very easy to cover

00:03:06.000 --> 00:03:09.000
using either branch coverage or statement coverage.

00:03:09.000 --> 00:03:13.000
That is to say it's pretty easy to take this and make it either come out to be true or false overall

00:03:13.000 --> 00:03:15.000
on the force testing of the individual components of the boolean logic.

00:03:15.000 --> 00:03:19.000
Basically, the idea is that when we have complicated boolean expressions,

00:03:19.000 --> 00:03:21.000
they're truth tables become rather large.

00:03:21.000 --> 00:03:23.000
What that means is there's a lot of complexity hiding in those truth tables.

00:03:23.000 --> 00:03:26.000
When there's complexity, there are probably things we don't understand,

00:03:26.000 --> 00:03:28.000
and that means they're probably bugs.

00:03:28.000 --> 00:03:31.000
It turns out that the domain of interest for MC/DC coverage--

00:03:31.000 --> 00:03:35.000
that is to say embedded control systems that happen to be embedded in avionics systems

00:03:35.000 --> 00:03:38.000
end up having generally lots of complicated conditionals.

00:03:38.000 --> 00:03:41.000
It's definitely desirable when people's lives depend on the correctness

00:03:41.000 --> 00:03:45.000
of these complicated conditional expressions to force people to test them rather thoroughly.

00:03:45.000 --> 00:03:49.000
The other idea behind MC/DC coverage is that as part of establishing

00:03:49.000 --> 00:03:52.000
that every condition independently affects the outcome of a decision

00:03:52.000 --> 00:03:54.000
we're going to figure out when we have conditionals 

00:03:54.000 --> 00:03:56.000
that don't independently affect the outcome of a decision.

00:03:56.000 --> 00:04:00.000
If you think about it, why would you have a conditional involved in a conditional expression

00:04:00.000 --> 00:04:02.000
which doesn't affect the outcome.

00:04:02.000 --> 00:04:05.000
What that basically means is there's a programming mistake, and it may be a harmless mistake.

00:04:05.000 --> 00:04:09.000
That is to say, the extra conditional being part of a decision 

00:04:09.000 --> 00:04:11.000
may not affect the correctness of the overall system,

00:04:11.000 --> 00:04:15.000
but what it means is somebody didn't understand what was going on,

00:04:15.000 --> 00:04:17.000
and probably there's something that we need to look at more closely

00:04:17.000 --> 00:04:19.000
and probably even change.

00:04:19.000 --> 00:04:21.000
Another thing you can see, looking at MC/DC coverage,

00:04:21.000 --> 00:04:26.000
is that getting it on a very large piece of software is going to take an enormous amount of work.

00:04:26.000 --> 00:04:29.000
This is why it's a specialized coverage metric for the avionics industry 

00:04:29.000 --> 00:04:32.000
where the critical parts of the codes end up being fairly small.

00:04:32.000 --> 00:04:34.000
That's MC/DC coverage, and we're not going to take a programming quiz on that,

00:04:34.000 --> 00:04:38.000
since first of all, as you saw, it gets to be a pain pretty quickly,

00:04:38.000 --> 00:04:42.000
and second we lack good tool support for MC/DC coverage in Python.

