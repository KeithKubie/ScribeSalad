WEBVTT
Kind: captions
Language: en

00:00:01.314 --> 00:00:06.700
MALE SPEAKER: Everyone, I'd
like to welcome Seth Ladd.

00:00:06.700 --> 00:00:09.910
I met this guy years ago
in Miami at the Spring

00:00:09.910 --> 00:00:10.290
Experience.

00:00:10.290 --> 00:00:14.380
And we've touched bases a few
a times over the years.

00:00:14.380 --> 00:00:16.110
SETH LADD: Ships passing
in the night.

00:00:16.110 --> 00:00:17.370
MALE SPEAKER: Exactly.

00:00:17.370 --> 00:00:21.040
So when he joined Google, I
wanted [UNINTELLIGIBLE]

00:00:21.040 --> 00:00:23.660
talking to us about Chrome,
like a year ago.

00:00:23.660 --> 00:00:24.850
That didn't quite work out.

00:00:24.850 --> 00:00:26.490
But now he's working
with Dart.

00:00:26.490 --> 00:00:29.172
SETH LADD: We waited for
the new, new thing.

00:00:29.172 --> 00:00:30.036
MALE SPEAKER: Exactly.

00:00:30.036 --> 00:00:31.370
SETH LADD: Anyway, thanks
everyone for

00:00:31.370 --> 00:00:32.030
taking their time.

00:00:32.030 --> 00:00:33.320
My name is Seth.

00:00:33.320 --> 00:00:36.180
I'm a developer advocate
with the Chrome team.

00:00:36.180 --> 00:00:37.650
So I help partners of all
different sizes get up and

00:00:37.650 --> 00:00:38.930
running and on all
their cool stuff.

00:00:38.930 --> 00:00:40.750
And Chrome is this
massive thing.

00:00:40.750 --> 00:00:44.850
So we have, obviously, the
Chrome browser, Chrome OS,

00:00:44.850 --> 00:00:49.970
Chrome Books, Chrome Frame,
HTML5, Chrome Web Store,

00:00:49.970 --> 00:00:51.710
JavaScript.

00:00:51.710 --> 00:00:54.435
And what's near and dear
to my heart is Dart.

00:00:54.435 --> 00:00:58.260
So that's why I'm happy to be
talking to you guys today.

00:00:58.260 --> 00:01:01.280
Before I dive into it, I want to
talk a little bit about my

00:01:01.280 --> 00:01:01.710
perspective.

00:01:01.710 --> 00:01:03.460
And I was talking to Christian
a little bit.

00:01:03.460 --> 00:01:07.280
And thanks again
for having me.

00:01:07.280 --> 00:01:10.200
Why this is interesting to me,
and why I think we all need to

00:01:10.200 --> 00:01:11.740
pay attention to what
this project is

00:01:11.740 --> 00:01:14.610
trying to do and say?

00:01:14.610 --> 00:01:18.760
My first language was C. So I
kind of jumped in the deep end

00:01:18.760 --> 00:01:20.095
way back in the day.

00:01:20.095 --> 00:01:22.170
And later on then,
Java came out.

00:01:22.170 --> 00:01:24.616
And Java was really just in
me, because I was more

00:01:24.616 --> 00:01:26.540
interested in computer science
because I wanted

00:01:26.540 --> 00:01:28.370
to get stuff done.

00:01:28.370 --> 00:01:30.700
So I was more of the pragmatic
mind at that time.

00:01:30.700 --> 00:01:32.925
So to me, Java was just an
easier way to get something

00:01:32.925 --> 00:01:36.670
done, garbage collection, bundle
classes and libraries.

00:01:36.670 --> 00:01:37.330
I think that was awesome.

00:01:37.330 --> 00:01:39.832
The whole SDK [UNINTELLIGIBLE].

00:01:39.832 --> 00:01:42.580
But what was really cool at
Java at the time was that,

00:01:42.580 --> 00:01:44.770
actually, it was of
and for the web.

00:01:44.770 --> 00:01:47.765
I mean, at that time Applets, I
think people were trying to

00:01:47.765 --> 00:01:48.400
get working.

00:01:48.400 --> 00:01:49.750
Obviously, it didn't
really play out.

00:01:49.750 --> 00:01:52.550
But I liked the idea,
that concept.

00:01:52.550 --> 00:01:54.800
They had a formal URL class.

00:01:54.800 --> 00:01:58.290
You could actually load Java
classes, Java byte code over

00:01:58.290 --> 00:01:59.810
the network into your virtual.

00:01:59.810 --> 00:02:02.580
Like that, that was mind blowing
at the time, just

00:02:02.580 --> 00:02:04.100
seeing a modern object-oriented
programming

00:02:04.100 --> 00:02:07.480
language native in
a network world.

00:02:07.480 --> 00:02:08.990
It was like light
bulbs going off.

00:02:08.990 --> 00:02:11.444
So I really, really
dove into that.

00:02:11.444 --> 00:02:14.665
Obviously, Java became relegated
to the server side.

00:02:14.665 --> 00:02:16.830
But there's still a lot of
these-- it's still pretty

00:02:16.830 --> 00:02:18.680
productive.

00:02:18.680 --> 00:02:21.450
Later on then, I wanted to be
even more productive, so I

00:02:21.450 --> 00:02:22.250
found Ruby on Rails.

00:02:22.250 --> 00:02:24.720
And I know you guys are
a big Rail shop.

00:02:24.720 --> 00:02:26.440
And so I really took to that.

00:02:26.440 --> 00:02:29.430
But I was able to bring over
a lot of the software

00:02:29.430 --> 00:02:32.260
engineering principles and
practices that I grew up

00:02:32.260 --> 00:02:34.440
programming C and Java.

00:02:34.440 --> 00:02:37.050
A lot of design patterns
came over.

00:02:37.050 --> 00:02:39.160
A lot of the expectation around
tooling and refactoring

00:02:39.160 --> 00:02:41.260
and all that.

00:02:41.260 --> 00:02:42.640
Maybe not refactoring so much.

00:02:42.640 --> 00:02:45.570
But certainly tooling, unit
testing, design patterns,

00:02:45.570 --> 00:02:48.316
object-orientational,
all this good stuff.

00:02:48.316 --> 00:02:50.130
And I felt definitely
more productive.

00:02:50.130 --> 00:02:52.550
And then I was extremely
lucky to get this gig

00:02:52.550 --> 00:02:54.530
at Google and Chrome.

00:02:54.530 --> 00:02:58.000
And I remember, I was really
interviewing for App Engine

00:02:58.000 --> 00:02:59.550
and that's the service I got.

00:02:59.550 --> 00:03:01.040
They were like, actually,
you're going

00:03:01.040 --> 00:03:01.610
to be good for Chrome.

00:03:01.610 --> 00:03:06.170
And so I wrote in an email,
and I said, I don't really

00:03:06.170 --> 00:03:07.430
know JavaScript that well.

00:03:07.430 --> 00:03:08.710
I mean, I can get it to do
stuff, but I'm not a

00:03:08.710 --> 00:03:10.960
JavaScript ninja.

00:03:10.960 --> 00:03:13.200
And they were like, ah,
don't worry about it.

00:03:13.200 --> 00:03:17.420
So lucky enough, I'm still
there, even without being a

00:03:17.420 --> 00:03:18.080
JavaScript ninja.

00:03:18.080 --> 00:03:20.920
But I did learn through the
job and through these

00:03:20.920 --> 00:03:23.670
opportunities just how totally
powerful and awesome the

00:03:23.670 --> 00:03:24.710
browser is.

00:03:24.710 --> 00:03:27.457
So I was able to make the shift
of, oh, everything has

00:03:27.457 --> 00:03:30.050
to be on the server, because
that's where the power is to,

00:03:30.050 --> 00:03:30.720
wait a minute.

00:03:30.720 --> 00:03:33.240
There is actually, a really
capable browser now, with

00:03:33.240 --> 00:03:36.500
these runtime APIs, and fast
execution engines.

00:03:36.500 --> 00:03:37.320
And OK, cool.

00:03:37.320 --> 00:03:40.805
I can see how these two roles
can complement each other.

00:03:40.805 --> 00:03:44.540
But I was never able to fully
dive in with the full set of

00:03:44.540 --> 00:03:47.000
expectations that I had,
from my experience

00:03:47.000 --> 00:03:48.250
in the other platform.

00:03:48.250 --> 00:03:52.720
And again, that's as much
on me as anything else.

00:03:52.720 --> 00:03:55.830
But when I heard about this
Dart project, well, light

00:03:55.830 --> 00:03:56.710
bulbs again went off.

00:03:56.710 --> 00:04:00.170
Because I said, OK, this is a
structured platform, allowing

00:04:00.170 --> 00:04:02.540
me to develop software
that I--

00:04:02.540 --> 00:04:05.510
or meeting the needs and
expectations of developers

00:04:05.510 --> 00:04:09.160
like me, yet delivers software
for the browser, which is the

00:04:09.160 --> 00:04:11.920
most ubiquitous platform out
there and getting more

00:04:11.920 --> 00:04:13.020
powerful every day.

00:04:13.020 --> 00:04:14.240
So, again, light bulbs go off.

00:04:14.240 --> 00:04:15.940
I said, this is something I
want to pay attention to.

00:04:15.940 --> 00:04:18.769
This is something I want
to help out with.

00:04:18.769 --> 00:04:20.820
Now, I'm going to use this
time to talk about the

00:04:20.820 --> 00:04:23.260
philosophy and motivation around
Dart and then show you

00:04:23.260 --> 00:04:24.210
some of the code.

00:04:24.210 --> 00:04:26.020
And just give you an idea where
the project's at and

00:04:26.020 --> 00:04:27.270
where it's going.

00:04:29.340 --> 00:04:31.090
Is that OK?

00:04:31.090 --> 00:04:33.882
Our goal is to help app
developers from all different

00:04:33.882 --> 00:04:37.280
platforms write complex, high
performance client apps for

00:04:37.280 --> 00:04:38.710
the modern web.

00:04:38.710 --> 00:04:41.620
OK, so you can see the word
that's missing up here.

00:04:41.620 --> 00:04:43.650
The word Dart, actually,
isn't on here.

00:04:43.650 --> 00:04:45.570
And that's on purpose.

00:04:45.570 --> 00:04:50.010
The Dart projects is about
insuring the web remains a

00:04:50.010 --> 00:04:52.525
compelling and productive
environment for app

00:04:52.525 --> 00:04:54.596
developers.

00:04:54.596 --> 00:04:57.001
In fact, back when Chrome
launched, we thought, this is

00:04:57.001 --> 00:04:59.230
the browser for web apps.

00:04:59.230 --> 00:05:00.450
Turns out, we're a little
ahead of the time.

00:05:00.450 --> 00:05:03.260
So speed, simplicity, and
security was the message that

00:05:03.260 --> 00:05:04.120
resonated with people.

00:05:04.120 --> 00:05:06.540
We always had, in the back of
our heads , people should be

00:05:06.540 --> 00:05:07.010
writing apps.

00:05:07.010 --> 00:05:10.940
It's more than just interactive
sites and engines.

00:05:10.940 --> 00:05:14.430
And so if you're able to do
really large scale app

00:05:14.430 --> 00:05:17.320
development in JavaScript,
[UNINTELLIGIBLE], whatever

00:05:17.320 --> 00:05:19.300
you're doing, that's
fantastic.

00:05:19.300 --> 00:05:23.340
We think that there's room on
the web, room in the world for

00:05:23.340 --> 00:05:24.390
developer choice.

00:05:24.390 --> 00:05:27.880
And as long as everyone's going
towards this goal of

00:05:27.880 --> 00:05:33.475
complex, multifeature, high
performance apps are running

00:05:33.475 --> 00:05:36.450
in the browser, that's what we
want to see, and what we want

00:05:36.450 --> 00:05:37.460
to help make happen.

00:05:37.460 --> 00:05:41.390
Maybe Dart is a way
to do that.

00:05:41.390 --> 00:05:44.080
So technically it's structured
web programming.

00:05:44.080 --> 00:05:46.785
It's really an entire, batteries
included, platform.

00:05:46.785 --> 00:05:48.300
It's not just a language.

00:05:48.300 --> 00:05:49.450
Certainly there's a language.

00:05:49.450 --> 00:05:52.240
But there's also tools
that get added here.

00:05:52.240 --> 00:05:53.700
There's a virtual machine.

00:05:53.700 --> 00:05:57.140
There is, of course,
a libraries.

00:05:57.140 --> 00:05:58.940
And probably, most importantly,
it compiles to

00:05:58.940 --> 00:05:59.970
JavaScript.

00:05:59.970 --> 00:06:01.895
Again, getting back to the
previous slide, where what

00:06:01.895 --> 00:06:04.080
we're really just trying to do
is help people deliver awesome

00:06:04.080 --> 00:06:05.405
apps for the web.

00:06:05.405 --> 00:06:08.580
So it has to work on the
entire modern web.

00:06:08.580 --> 00:06:11.300
It's a totally open-source
project, announced, actually,

00:06:11.300 --> 00:06:14.680
not too long ago, just in
October of last year.

00:06:14.680 --> 00:06:16.330
It's all in Google code.

00:06:16.330 --> 00:06:19.300
And I'll probably say this many
times, but do keep in

00:06:19.300 --> 00:06:23.240
mind that the entire project is
still technology preview.

00:06:23.240 --> 00:06:23.990
So what does that mean?

00:06:23.990 --> 00:06:26.500
So when we launched in October
and still today--

00:06:26.500 --> 00:06:28.610
well, when we launched in
October, even more, things

00:06:28.610 --> 00:06:29.980
were generally compiling.

00:06:29.980 --> 00:06:32.740
We had some core libraries.

00:06:32.740 --> 00:06:33.906
We had a virtual machine
that added a lot of

00:06:33.906 --> 00:06:34.910
features but not all.

00:06:34.910 --> 00:06:37.670
So you can see the direction the
project was going in, but

00:06:37.670 --> 00:06:40.520
it's very, very early-- still
it is early in the project.

00:06:40.520 --> 00:06:43.357
And being launched so we can get
that feedback, so we can

00:06:43.357 --> 00:06:47.106
hear from app developers, like
you guys, about what you need.

00:06:47.106 --> 00:06:49.005
And so we're not even in
an alpha state yet.

00:06:49.005 --> 00:06:51.240
But hopefully you can see
where we're going.

00:06:51.240 --> 00:06:53.785
But there's still time to send
that feedback in and help

00:06:53.785 --> 00:06:56.110
direct the project.

00:06:56.110 --> 00:06:57.910
So we're going to be talking
over a lot of stuff.

00:06:57.910 --> 00:06:59.772
I don't know how much time we
have. We'll get through as

00:06:59.772 --> 00:07:01.270
much as we can.

00:07:01.270 --> 00:07:03.950
Motivation and languages, we'll
look at some of the cool

00:07:03.950 --> 00:07:05.480
new features of the language.

00:07:05.480 --> 00:07:07.910
We're not going to look
at the whole thing.

00:07:07.910 --> 00:07:09.700
We'll look at some code and
look at what's new.

00:07:12.620 --> 00:07:15.610
So the current web, people are
obviously developing apps for

00:07:15.610 --> 00:07:16.050
the web today.

00:07:16.050 --> 00:07:17.960
There's certainly a lot of
neat parts about that.

00:07:17.960 --> 00:07:21.160
Small to medium apps are
still easy to develop.

00:07:21.160 --> 00:07:23.430
You can see that over
and over again.

00:07:23.430 --> 00:07:26.610
How many start-ups, how many
business, how many--

00:07:26.610 --> 00:07:27.780
everyone launches a web app.

00:07:27.780 --> 00:07:30.410
It's still easy to do
the smaller things.

00:07:30.410 --> 00:07:31.990
Platform independence
is obviously a key

00:07:31.990 --> 00:07:33.620
feature of the platform.

00:07:33.620 --> 00:07:36.620
You can write JavaScript, DHTML
code and get, on every

00:07:36.620 --> 00:07:41.049
operating system that you can
think of, and if you look hard

00:07:41.049 --> 00:07:44.230
enough on modern smartphones
[UNINTELLIGIBLE].

00:07:44.230 --> 00:07:46.820
No application installation
is great.

00:07:46.820 --> 00:07:48.742
You can click a link
and you're there.

00:07:48.742 --> 00:07:51.720
And not only is that technically
is a great feature

00:07:51.720 --> 00:07:56.250
of the web, but that clicking
a blue link and delivering a

00:07:56.250 --> 00:07:59.990
new app just on the next page
refresh, also has a great

00:07:59.990 --> 00:08:01.570
social contract with users.

00:08:01.570 --> 00:08:03.936
They know that clicking that
blue link it not going to eat

00:08:03.936 --> 00:08:04.770
their computer.

00:08:04.770 --> 00:08:07.470
And that's really great.

00:08:07.470 --> 00:08:09.500
Supporting incremental
development, the web does that

00:08:09.500 --> 00:08:10.320
really well.

00:08:10.320 --> 00:08:11.640
There's a couple different
things I mean there.

00:08:11.640 --> 00:08:14.800
One is, you start out by trying
a couple functions, add

00:08:14.800 --> 00:08:15.890
more functions.

00:08:15.890 --> 00:08:18.070
You can start small and grow.

00:08:18.070 --> 00:08:19.990
Also, deploying with that,
you can deploy

00:08:19.990 --> 00:08:21.305
one just more thought.

00:08:21.305 --> 00:08:23.220
You don't have to
think in a large

00:08:23.220 --> 00:08:25.560
distribution bundle for that.

00:08:25.560 --> 00:08:28.810
The platform's improving
tremendously fast. It's very,

00:08:28.810 --> 00:08:31.487
hard even for us to keep up
with all the new HTML5

00:08:31.487 --> 00:08:34.289
features and APIs.

00:08:34.289 --> 00:08:36.980
And this last point is really
near and dear to my heart.

00:08:36.980 --> 00:08:39.500
I helped bring Angry
Birds to web.

00:08:39.500 --> 00:08:41.159
And to me Angry Birds
is a litmus

00:08:41.159 --> 00:08:42.799
test of modern browsers.

00:08:42.799 --> 00:08:46.480
So to run Angry Birds you need
a modern JavaScript engine,

00:08:46.480 --> 00:08:50.190
and you need hardware
acceleration for graphics, and

00:08:50.190 --> 00:08:53.010
you need features like the
app cache to run offline.

00:08:53.010 --> 00:08:55.890
So to me it's, if you can run
Angry Birds on your browser,

00:08:55.890 --> 00:08:56.850
then you're running
a modern browser.

00:08:56.850 --> 00:08:58.690
When I looked last-- this is
a couple of months old--

00:08:58.690 --> 00:09:03.650
30% to 50% of all desktop,
laptop, notebook web users can

00:09:03.650 --> 00:09:04.320
play Angry Birds.

00:09:04.320 --> 00:09:06.097
It's across all different
browsers.

00:09:06.097 --> 00:09:07.786
I don't know how many hundreds,
and hundreds, and

00:09:07.786 --> 00:09:09.270
hundreds, and hundreds of
millions of people that is.

00:09:09.270 --> 00:09:12.990
That many, that is a really,
really big number.

00:09:12.990 --> 00:09:15.900
And to me that says, we're
crossing over that threshold

00:09:15.900 --> 00:09:18.850
of not thinking twice about
delivering apps that use these

00:09:18.850 --> 00:09:20.592
awesome features, because you're
going to have such a

00:09:20.592 --> 00:09:21.810
large user base.

00:09:21.810 --> 00:09:24.040
So that's all good.

00:09:24.040 --> 00:09:28.070
However we believe that building
large apps is still

00:09:28.070 --> 00:09:29.500
very challenging.

00:09:29.500 --> 00:09:32.300
It's hard to find the
program's structure.

00:09:32.300 --> 00:09:35.980
It's hard to look at a large
JavaScript app today and

00:09:35.980 --> 00:09:38.320
understand where the modules,
where the components, where

00:09:38.320 --> 00:09:39.620
the libraries, get together.

00:09:39.620 --> 00:09:42.270
Where does the program start?

00:09:42.270 --> 00:09:46.820
We believe that the lack of
static types is a hindrance.

00:09:46.820 --> 00:09:49.760
When you think of the vendors
that give you, in terms of

00:09:49.760 --> 00:09:52.030
tooling or just documentation
[UNINTELLIGIBLE].

00:09:52.030 --> 00:09:54.724
Like I was trying to port some
docs from libraries in Dart,

00:09:54.724 --> 00:09:58.155
and I had no idea what the
parameters are, its methods.

00:09:58.155 --> 00:10:00.980
You just don't know, unless you
manually trace through the

00:10:00.980 --> 00:10:01.623
burn instruction.

00:10:01.623 --> 00:10:05.010
I think we can do better
than that.

00:10:05.010 --> 00:10:09.940
It's taken a very long time to
have decent JavaScript tools.

00:10:09.940 --> 00:10:13.210
WebStorm, for instance, is a
pretty good web editor today.

00:10:13.210 --> 00:10:15.690
It's less than a year old, I
think, the new version that

00:10:15.690 --> 00:10:16.295
does all the stuff.

00:10:16.295 --> 00:10:18.120
Though you would expect, it
still doesn't do everything

00:10:18.120 --> 00:10:20.540
that we have on other platforms.
And we should ask

00:10:20.540 --> 00:10:22.290
ourselves, why do we have
better things than

00:10:22.290 --> 00:10:23.790
[UNINTELLIGIBLE].

00:10:23.790 --> 00:10:26.960
And really that, even though
these engines, like V8, are

00:10:26.960 --> 00:10:29.290
getting faster and faster at
release, pure start-up time is

00:10:29.290 --> 00:10:29.660
actually too slow.

00:10:29.660 --> 00:10:32.590
You still have to parse all
of those scripts as

00:10:32.590 --> 00:10:34.570
text to start an app.

00:10:34.570 --> 00:10:37.150
I mean, that's insane that every
time you start up your

00:10:37.150 --> 00:10:37.920
desktop, [UNINTELLIGIBLE]

00:10:37.920 --> 00:10:39.630
Chrome had to parse
your C code.

00:10:39.630 --> 00:10:41.440
We can definitely do better.

00:10:41.440 --> 00:10:43.750
And then you just think, well
the web has been around for 15

00:10:43.750 --> 00:10:46.265
plus years, and there's
a lot of cruft there.

00:10:46.265 --> 00:10:48.850
And certainly a strength of the
web is the first original

00:10:48.850 --> 00:10:51.400
web page still renders its
[? age ?] process.

00:10:51.400 --> 00:10:52.320
That is amazing.

00:10:52.320 --> 00:10:54.660
That's not anything I
want to get rid of.

00:10:54.660 --> 00:10:58.040
But there are pieces like deep
in the dark alleyways and

00:10:58.040 --> 00:11:04.002
corners of the API that we
question does that still need

00:11:04.002 --> 00:11:04.580
to be there.

00:11:04.580 --> 00:11:08.760
And we don't really have a
way to deprecate our web.

00:11:08.760 --> 00:11:13.440
Like, what would happen if
somebody took a fresh look?

00:11:13.440 --> 00:11:15.760
So that brings us to
the Dart platform.

00:11:15.760 --> 00:11:16.800
So we got a look at
the good parts.

00:11:16.800 --> 00:11:18.950
We looked at the parts
we don't approve.

00:11:18.950 --> 00:11:22.225
And at least, from the team's
perspective, we can look at

00:11:22.225 --> 00:11:25.000
the experience we have, both
inside Google and the

00:11:25.000 --> 00:11:26.430
different teams inside Google.

00:11:26.430 --> 00:11:30.820
Building things like closure
compiler, which doesn't really

00:11:30.820 --> 00:11:32.945
have a vocal developer
adoption.

00:11:32.945 --> 00:11:36.200
But I talk to a lot of people,
and they love this tool.

00:11:36.200 --> 00:11:36.360
[? We ?]

00:11:36.360 --> 00:11:36.520
[? at ?]

00:11:36.520 --> 00:11:38.710
[UNINTELLIGIBLE] toolkit, which
again enables these

00:11:38.710 --> 00:11:40.950
larger structured web apps.

00:11:40.950 --> 00:11:45.110
Google itself develops larger
apps like Google Docs, Gmail,

00:11:45.110 --> 00:11:48.995
Google Plus itself is a really
complex almost entirely script

00:11:48.995 --> 00:11:50.360
driven app.

00:11:50.360 --> 00:11:52.010
And certainly the team
building, [? I ?]

00:11:52.010 --> 00:11:52.470
[? think, ?]

00:11:52.470 --> 00:11:54.940
the low-level components
like V8.

00:11:54.940 --> 00:11:57.560
So if you take all of that
experience, and then what if

00:11:57.560 --> 00:11:59.820
you could package it all up and
make it available to the

00:11:59.820 --> 00:12:03.020
entire modern web, and make it
feel like it's for everybody?

00:12:03.020 --> 00:12:06.350
That's what we're trying to do
with the current platform.

00:12:06.350 --> 00:12:09.210
And by the way, since it's
awesome that it's a small

00:12:09.210 --> 00:12:11.490
crowd, so feel free to
stop me at any time.

00:12:11.490 --> 00:12:13.832
It's way more interesting
to do it two-way.

00:12:13.832 --> 00:12:15.392
I hope we get to the point where
I've learned from you

00:12:15.392 --> 00:12:18.080
about what your experiences are
developing web apps, and

00:12:18.080 --> 00:12:22.190
your take on this stuff,
so don't hesitate.

00:12:22.190 --> 00:12:23.770
And then we'll talk about this
a little bit though.

00:12:23.770 --> 00:12:25.810
We firmly believe that
innovation is essential.

00:12:25.810 --> 00:12:27.890
I think I saw some quote.

00:12:27.890 --> 00:12:29.190
I think it was related
to Dart.

00:12:29.190 --> 00:12:32.606
That no one has a monopoly
on innovation for web.

00:12:32.606 --> 00:12:34.200
And they feel very strongly
about that.

00:12:34.200 --> 00:12:36.630
I mean, when you look at
the formal side, oh,

00:12:36.630 --> 00:12:37.580
it's open web platform.

00:12:37.580 --> 00:12:41.380
And to me, open means, everyone
has an open, free

00:12:41.380 --> 00:12:44.125
shot at grassroots groundswell
support,

00:12:44.125 --> 00:12:46.940
improving on these ideas.

00:12:46.940 --> 00:12:48.670
And the community should
embrace that.

00:12:48.670 --> 00:12:49.760
The community should
embrace people

00:12:49.760 --> 00:12:50.640
trying different things.

00:12:50.640 --> 00:12:52.080
And not everything
is going to work.

00:12:52.080 --> 00:12:56.000
But we don't want anyone
to say, you can't try.

00:12:56.000 --> 00:12:58.130
And we already talked about
it a little bit.

00:12:58.130 --> 00:13:00.370
And the aim of this process is
in maintaining the web as

00:13:00.370 --> 00:13:03.300
relevant, interesting,
productive, pleasurable for

00:13:03.300 --> 00:13:07.700
app developers, for all of us.

00:13:07.700 --> 00:13:07.975
Cool.

00:13:07.975 --> 00:13:09.760
So if you have questions
about that, you can

00:13:09.760 --> 00:13:11.485
stop me at any time.

00:13:11.485 --> 00:13:13.110
Let's dive into the language.

00:13:13.110 --> 00:13:14.030
This is code-heavy talk.

00:13:14.030 --> 00:13:15.790
That would be boring.

00:13:15.790 --> 00:13:17.490
But I do want to call out a
couple of different features

00:13:17.490 --> 00:13:20.430
that might be interesting
to you guys.

00:13:20.430 --> 00:13:22.630
So just the eye-level review
of Dart language.

00:13:22.630 --> 00:13:25.095
It's a simple, unsurprising,
object-oriented programming

00:13:25.095 --> 00:13:27.397
language with interfaces
and signal inheritance.

00:13:27.397 --> 00:13:29.385
At that point, you
can just yawn.

00:13:29.385 --> 00:13:32.370
And go to sleep, and check
your emails stuff.

00:13:32.370 --> 00:13:33.992
But that's pretty much
exactly the response

00:13:33.992 --> 00:13:35.730
that we want to get.

00:13:35.730 --> 00:13:38.990
We believe that the language
itself should be very familiar

00:13:38.990 --> 00:13:41.620
to developers in a
wide spectrum.

00:13:41.620 --> 00:13:45.680
And the Dart project is not the
time and place for us to

00:13:45.680 --> 00:13:46.810
invent like the next Pascal.

00:13:46.810 --> 00:13:50.180
And even though that might be
totally awesome to programming

00:13:50.180 --> 00:13:54.300
language as a discipline, we'd
end up with six users.

00:13:54.300 --> 00:13:58.920
And the Dart platform or project
is trying to appeal to

00:13:58.920 --> 00:14:03.150
an army of web developers, an
army of Java, an army of C

00:14:03.150 --> 00:14:04.080
Sharp developers.

00:14:04.080 --> 00:14:07.660
So innovating on things like
language syntax is not going

00:14:07.660 --> 00:14:11.400
to help people easily get
up on this platform.

00:14:11.400 --> 00:14:14.570
So we take a very familiar
approach to this language.

00:14:14.570 --> 00:14:16.730
But that doesn't meant that we
don't take this opportunity to

00:14:16.730 --> 00:14:18.115
introduce a couple
of new things or

00:14:18.115 --> 00:14:19.160
clean up a couple things.

00:14:19.160 --> 00:14:20.945
So we'll look at some
of that stuff.

00:14:23.480 --> 00:14:26.650
To me, the coolest thing that
the Dart project is trying to

00:14:26.650 --> 00:14:28.330
do is introduce optional
static typing.

00:14:28.330 --> 00:14:31.200
Now, it's not the first language
to do this, but

00:14:31.200 --> 00:14:34.430
arguably, it's the first
language which is targeted to

00:14:34.430 --> 00:14:38.490
mass adoption to try an optional
static typing.

00:14:38.490 --> 00:14:41.460
The best way to think about
optional static typing is

00:14:41.460 --> 00:14:43.185
they're simply annotations.

00:14:43.185 --> 00:14:45.545
They're simply documentation.

00:14:45.545 --> 00:14:48.770
It's a way for you to
communicate your intent to

00:14:48.770 --> 00:14:53.040
your other developers and
your fellow machines.

00:14:53.040 --> 00:14:55.660
So I don't know the background
in this room.

00:14:55.660 --> 00:14:57.490
But if you come from structured
languages, you're

00:14:57.490 --> 00:14:59.620
like, well, obviously,
I want static types.

00:14:59.620 --> 00:15:00.990
They tell my tools a lot.

00:15:00.990 --> 00:15:02.610
They tell my fellow
developers a lot.

00:15:02.610 --> 00:15:03.630
Yes, these are great things.

00:15:03.630 --> 00:15:06.450
But, again, there's an army of
web developers out there

00:15:06.450 --> 00:15:08.040
writing JavaScript that have
never seen a type.

00:15:08.040 --> 00:15:09.940
May never want to see a type.

00:15:09.940 --> 00:15:12.830
And this platform should
appeal to them.

00:15:12.830 --> 00:15:17.030
So again, you look at the
spectrum of JavaScript guys,

00:15:17.030 --> 00:15:20.524
who may want to validate a form,
all the way out to the

00:15:20.524 --> 00:15:22.370
people who want to build
abstract factory class

00:15:22.370 --> 00:15:25.530
factories, and everything
in between.

00:15:25.530 --> 00:15:28.370
Optional static types is our
effort to allow you to

00:15:28.370 --> 00:15:30.740
gradually get familiar with
the language and then

00:15:30.740 --> 00:15:33.230
gradually add types,
as you see fit.

00:15:33.230 --> 00:15:36.830
And then just more and more
benefits start to appear.

00:15:36.830 --> 00:15:42.120
Philosophically, we don't want
to introduce any strong handed

00:15:42.120 --> 00:15:45.676
type theorem checker that
beats you over the head.

00:15:45.676 --> 00:15:48.020
Especially, when
you think of--

00:15:48.020 --> 00:15:50.150
incremental development is
really important, especially

00:15:50.150 --> 00:15:51.100
to the web.

00:15:51.100 --> 00:15:52.780
So you should be able to
write code that doesn't

00:15:52.780 --> 00:15:54.450
exactly work perfectly.

00:15:54.450 --> 00:15:56.720
Because you may not actually
run that code yet.

00:15:56.720 --> 00:15:58.285
And so you should be able to
write a little code and

00:15:58.285 --> 00:16:00.140
refresh, write a little
code and refresh.

00:16:00.140 --> 00:16:01.750
That's the cycle
we want to get.

00:16:01.750 --> 00:16:04.150
You can't have that in more
structured languages that have

00:16:04.150 --> 00:16:05.700
mandatory static types.

00:16:05.700 --> 00:16:08.220
But there are a lot of benefits
to static types.

00:16:08.220 --> 00:16:11.150
So optional static types is our
effort to maybe make both

00:16:11.150 --> 00:16:13.540
of these standards work well.

00:16:13.540 --> 00:16:16.150
And so before I dive more into
those, I'll explain how

00:16:16.150 --> 00:16:17.700
optional static types
might be applied.

00:16:17.700 --> 00:16:21.260
And it's important to understand
that the two

00:16:21.260 --> 00:16:22.980
runtime modes for Dart.

00:16:22.980 --> 00:16:26.635
So the default mode of Dart
programs, the mode that when

00:16:26.635 --> 00:16:29.120
you start the Dart program, the
user hits the URL and it

00:16:29.120 --> 00:16:31.110
goes, is what we call
production mode.

00:16:31.110 --> 00:16:34.070
Production mode is the fast
way, the default way

00:16:34.070 --> 00:16:35.020
of trying to code.

00:16:35.020 --> 00:16:40.595
It's more or less ignoring
static type annotations.

00:16:40.595 --> 00:16:43.210
In fact, the static type
annotations have no runtime,

00:16:43.210 --> 00:16:46.210
so they don't affect the
runtime semantics.

00:16:46.210 --> 00:16:47.660
So it's great for
when you deploy.

00:16:47.660 --> 00:16:51.290
But when you develop or write
unit tests, or are just

00:16:51.290 --> 00:16:53.370
building out your program, you
want to run what's then called

00:16:53.370 --> 00:16:54.670
the checked mode.

00:16:54.670 --> 00:16:56.940
Checked mode, you start
to see the benefits of

00:16:56.940 --> 00:16:58.500
these static types.

00:16:58.500 --> 00:17:01.160
Because dynamic type
assertions turn on.

00:17:01.160 --> 00:17:04.364
And, for instance, if you try
to assign an integer to a

00:17:04.364 --> 00:17:07.462
string or something, the dynamic
type assertion will

00:17:07.462 --> 00:17:10.010
kick-in, throw that exception,
say, he you're doing something

00:17:10.010 --> 00:17:12.384
I don't think you really
meant to do.

00:17:12.384 --> 00:17:15.220
I'm going to stop you,
and let you fix that.

00:17:15.220 --> 00:17:18.280
And again, this is a developer
client choice.

00:17:18.280 --> 00:17:19.999
You can say, I'm going to run
checked mode I'm going to get

00:17:19.999 --> 00:17:20.890
all these benefits.

00:17:20.890 --> 00:17:23.250
Assert statements
are turned on.

00:17:23.250 --> 00:17:26.695
We believe it's really, really
good for development.

00:17:26.695 --> 00:17:29.850
Now that we understand the two
different runtime modes, let's

00:17:29.850 --> 00:17:31.110
look back at optional
static types.

00:17:31.110 --> 00:17:34.745
So during development time, the
optional static types give

00:17:34.745 --> 00:17:36.530
you, for instance, the
ability to run an

00:17:36.530 --> 00:17:38.515
intelligent static analysis.

00:17:38.515 --> 00:17:40.710
Again, somebody coming from Java
or C Sharp is like, of

00:17:40.710 --> 00:17:41.770
course I have this stuff.

00:17:41.770 --> 00:17:43.750
So we have this too in Dart.

00:17:43.750 --> 00:17:45.880
If you're typing along, and
it notices something is

00:17:45.880 --> 00:17:48.240
incorrect, it's going to give
you a little squiggly and say,

00:17:48.240 --> 00:17:50.610
that's not exactly
what you thought.

00:17:50.610 --> 00:17:51.926
It is tuned to be unobtrusive.

00:17:51.926 --> 00:17:54.140
So we do prefer warnings
and not errors.

00:17:54.140 --> 00:17:56.405
And again, because you should be
able to write code and hit

00:17:56.405 --> 00:17:57.715
refresh and run.

00:17:57.715 --> 00:17:59.870
Again, we're not trying to
make you jump through a

00:17:59.870 --> 00:18:03.010
tremendous amount of hoops just
to write your program.

00:18:03.010 --> 00:18:06.612
And then, again, in that time
all of your site type enable

00:18:06.612 --> 00:18:08.942
these dynamic type
checks, boom.

00:18:08.942 --> 00:18:12.950
So back over in runtime.

00:18:12.950 --> 00:18:14.430
This is a little misleading,
so I'm going

00:18:14.430 --> 00:18:17.610
to have to fix this.

00:18:17.610 --> 00:18:18.280
Sorry.

00:18:18.280 --> 00:18:19.485
So this is development time.

00:18:19.485 --> 00:18:21.140
This is when you are
writing the code.

00:18:21.140 --> 00:18:22.810
The warnings can get
all turned on, and

00:18:22.810 --> 00:18:24.570
it can static analyze.

00:18:24.570 --> 00:18:25.680
This is at runtime.

00:18:25.680 --> 00:18:26.970
So you're still in
checked mode.

00:18:26.970 --> 00:18:29.170
But while your program's
running, that's when all the

00:18:29.170 --> 00:18:29.530
type assertions are on.

00:18:29.530 --> 00:18:30.780
You hit that code.

00:18:30.780 --> 00:18:32.200
It can throw the exception
for you.

00:18:32.200 --> 00:18:35.180
So you can do warnings
while you code.

00:18:35.180 --> 00:18:37.960
Exceptions catched during
checked mode as you execute.

00:18:37.960 --> 00:18:40.810
And so, for instance,
you might write

00:18:40.810 --> 00:18:43.210
something like T x=o.

00:18:43.210 --> 00:18:45.730
Then in checked mode, this is
going to be automatically

00:18:45.730 --> 00:18:47.120
inserted in your code.

00:18:47.120 --> 00:18:48.240
And so this is really cool.

00:18:48.240 --> 00:18:50.730
So if you try to assign
something that's on T, it's

00:18:50.730 --> 00:18:51.020
going to warn you.

00:18:51.020 --> 00:18:53.480
That's cool.

00:18:53.480 --> 00:18:55.370
So let's see an example
of this stuff working.

00:19:00.300 --> 00:19:01.779
And I [UNINTELLIGIBLE].

00:19:07.202 --> 00:19:08.870
So now I'm in the Dart editor.

00:19:08.870 --> 00:19:11.798
And I'm going to create--

00:19:11.798 --> 00:19:12.715
[UNINTELLIGIBLE]

00:19:12.715 --> 00:19:13.140
servers.

00:19:13.140 --> 00:19:16.040
And we'll dive into this a
little bit more later.

00:19:16.040 --> 00:19:17.880
So here's a simple Dart program
where we can just

00:19:17.880 --> 00:19:19.905
illustrate these kind of bugs.

00:19:19.905 --> 00:19:24.200
So let's say to your buddy down
the hall, I'm going to

00:19:24.200 --> 00:19:24.800
write you a method.

00:19:24.800 --> 00:19:25.780
This is going to be awesome.

00:19:25.780 --> 00:19:29.680
And it's going to do this.

00:19:29.680 --> 00:19:30.690
And you're like, yes.

00:19:30.690 --> 00:19:33.200
I totally need to add stuff.

00:19:33.200 --> 00:19:35.652
And thankfully did that.

00:19:35.652 --> 00:19:39.260
So, so let's try to run this.

00:19:39.260 --> 00:19:39.940
Probably your didn't see it.

00:19:39.940 --> 00:19:40.860
But here's three.

00:19:40.860 --> 00:19:44.210
Just as you would expect if you
looked at this code today.

00:19:44.210 --> 00:19:46.170
So that's cool.

00:19:46.170 --> 00:19:47.570
But then later one,
[UNINTELLIGIBLE].

00:19:47.570 --> 00:19:51.160
Well, actually, really what I
meant is this, because that's

00:19:51.160 --> 00:19:54.110
what I needed in my code.

00:19:54.110 --> 00:19:58.560
So he comes and adds the type
annotations in the program.

00:19:58.560 --> 00:20:01.320
Thus being a lot more clear
about what that does.

00:20:01.320 --> 00:20:02.170
Cool.

00:20:02.170 --> 00:20:05.310
And then I don't know if we can
see it, but now the static

00:20:05.310 --> 00:20:09.970
analysis can kick on and say,
well, obviously, if one is an

00:20:09.970 --> 00:20:11.220
integer, and you told
me that, if you're

00:20:11.220 --> 00:20:12.250
going to take a string.

00:20:12.250 --> 00:20:14.670
So hey, n is not assignable
to string.

00:20:14.670 --> 00:20:15.720
Heads up.

00:20:15.720 --> 00:20:19.110
This may not be what you want.

00:20:19.110 --> 00:20:20.790
But it's a warning
not an error.

00:20:20.790 --> 00:20:24.760
So if we run this program,
it still runs.

00:20:24.760 --> 00:20:26.500
Because I'm running in
production mode here.

00:20:26.500 --> 00:20:27.950
And remember that your type
annotations don't affect the

00:20:27.950 --> 00:20:28.540
runtime semantics.

00:20:28.540 --> 00:20:29.790
So [UNINTELLIGIBLE]

00:20:29.790 --> 00:20:32.630
two strings together, but
everything is fine.

00:20:32.630 --> 00:20:35.425
However, let's go on,
and and take this.

00:20:35.425 --> 00:20:36.675
We're going to run
a checked mode.

00:20:40.300 --> 00:20:40.930
Now, [UNINTELLIGIBLE]

00:20:40.930 --> 00:20:41.970
I want to know these things.

00:20:41.970 --> 00:20:44.480
So now the checked mode is
coming on, it's going to

00:20:44.480 --> 00:20:46.940
actually stop the program and
throw an exception, that you

00:20:46.940 --> 00:20:48.580
can catch, or do whatever,
or just be warned.

00:20:48.580 --> 00:20:50.830
And it just has some type
of string or X.

00:20:50.830 --> 00:20:53.250
So now my program is helping
me as a developer.

00:20:53.250 --> 00:20:56.405
Adding two simple words, string
and string, now you get

00:20:56.405 --> 00:20:57.736
all these benefits.

00:20:57.736 --> 00:20:59.320
And again, if you come from
other platforms, you're like,

00:20:59.320 --> 00:21:01.740
yes, of course, we love it.

00:21:01.740 --> 00:21:04.060
But we're trying to create a
type system that doesn't get

00:21:04.060 --> 00:21:04.860
in your way, but helps you.

00:21:04.860 --> 00:21:06.190
That's why the warning's
there.

00:21:06.190 --> 00:21:10.810
So that's what's going on.

00:21:10.810 --> 00:21:11.750
Cool.

00:21:11.750 --> 00:21:14.090
So let's look at some other new
features of the platform.

00:21:14.090 --> 00:21:15.210
One is isolates.

00:21:15.210 --> 00:21:18.144
We'll look at some samples
of those in a little bit.

00:21:18.144 --> 00:21:20.030
I don't know if you guys are
familiar with Erlang, but

00:21:20.030 --> 00:21:25.670
Erlang was quite successful with
this idea of actor-based

00:21:25.670 --> 00:21:26.260
concurrency.

00:21:26.260 --> 00:21:31.190
We should be able start these
isolated actors in the system,

00:21:31.190 --> 00:21:32.100
totally memory isolated.

00:21:32.100 --> 00:21:34.220
And you pass messages
back and forth.

00:21:34.220 --> 00:21:40.070
It's, many believe, a much safer
way to write parallel

00:21:40.070 --> 00:21:41.750
code, concurrent code.

00:21:41.750 --> 00:21:43.410
Because nothing is
actually shared.

00:21:43.410 --> 00:21:47.370
And so Dart takes a lot of the
inspiration from this.

00:21:47.370 --> 00:21:49.490
And so we built a system
called isolates.

00:21:49.490 --> 00:21:52.910
Isolates are memory isolated
chunks of running code.

00:21:52.910 --> 00:21:55.150
And communicate between
them via messages.

00:21:55.150 --> 00:21:57.620
These messages are copied
back and forth.

00:21:57.620 --> 00:22:01.100
So you get all the benefits of
no shared state concurrent

00:22:01.100 --> 00:22:04.620
programming, a simple
library that's just

00:22:04.620 --> 00:22:06.020
built into the platform.

00:22:06.020 --> 00:22:09.040
There's also a pragmatic reason
why we have this is

00:22:09.040 --> 00:22:10.720
because Dart is single
threaded.

00:22:10.720 --> 00:22:13.600
And if you know, JavaScript
is also single threaded.

00:22:13.600 --> 00:22:16.652
So one of the core tenets of
Dart is that everything has to

00:22:16.652 --> 00:22:19.070
compile to JavaScript in
some fairly sane way.

00:22:19.070 --> 00:22:21.600
So we couldn't build
threads into Dart.

00:22:21.600 --> 00:22:22.510
Because how would
you get that?

00:22:22.510 --> 00:22:24.380
Do you want to map those
to the web brokers?

00:22:24.380 --> 00:22:25.800
The web brokers don't have
shared state like

00:22:25.800 --> 00:22:26.110
[? correcting. ?]

00:22:26.110 --> 00:22:29.990
So anyway, we developed out
isolates and it's pretty cool.

00:22:29.990 --> 00:22:33.690
So lightweight units
of execution.

00:22:33.690 --> 00:22:34.940
So what are they good for?

00:22:34.940 --> 00:22:36.160
Well, certainly concurrency.

00:22:36.160 --> 00:22:38.620
Everyone has multicore machines,
even your phones are

00:22:38.620 --> 00:22:40.250
getting multicores, so we have
to have an answer to

00:22:40.250 --> 00:22:42.360
concurrency.

00:22:42.360 --> 00:22:46.250
If you think about modern web
page today, it's just full of

00:22:46.250 --> 00:22:49.860
injected JavaScript, like your
Plus one button, and your

00:22:49.860 --> 00:22:52.640
Facebook like, and your Twitter
button, and ads, and

00:22:52.640 --> 00:22:54.350
analytics, and you name it.

00:22:54.350 --> 00:22:56.400
And so it's all jammed
in there on the page.

00:22:56.400 --> 00:22:58.810
And if you don't write the code
perfectly, and if that

00:22:58.810 --> 00:23:00.806
[? had ?] third party libraries,
we got iframes, and

00:23:00.806 --> 00:23:03.080
all this other stuff, you're
basically going to all operate

00:23:03.080 --> 00:23:05.420
on same key.

00:23:05.420 --> 00:23:06.440
I mean, like that's.

00:23:06.440 --> 00:23:09.283
So wouldn't it be interesting if
each one of those could be

00:23:09.283 --> 00:23:09.510
an isolate?

00:23:09.510 --> 00:23:12.650
And you'd then just have a lot
more confidence in your apps,

00:23:12.650 --> 00:23:15.200
like they can trample on each
other, and have to have an

00:23:15.200 --> 00:23:17.380
easier way to do it other
than iframes.

00:23:17.380 --> 00:23:20.130
Another interesting usage of
isolates is, what if you can

00:23:20.130 --> 00:23:23.190
mask client-server
communication, just like you

00:23:23.190 --> 00:23:27.470
use isolates to communicate,
or ports to communicate

00:23:27.470 --> 00:23:29.550
between isolates in
running Dart app.

00:23:29.550 --> 00:23:31.910
Wouldn't it be interesting to
just extrapolate that and have

00:23:31.910 --> 00:23:33.045
an isolate between the
client and server.

00:23:33.045 --> 00:23:34.350
And you just post messages.

00:23:34.350 --> 00:23:35.970
And it just takes care
of it for you.

00:23:35.970 --> 00:23:39.440
So we see a couple uses
for isolates.

00:23:39.440 --> 00:23:42.700
First and foremost, Dart is a
web programming language.

00:23:42.700 --> 00:23:45.910
And, again, this our chance to
look back at the platform and

00:23:45.910 --> 00:23:48.385
the API and say, what would we
do differently if you did it

00:23:48.385 --> 00:23:50.030
again today.

00:23:50.030 --> 00:23:52.370
And then jQuery really
pioneered this.

00:23:52.370 --> 00:23:53.765
Anybody that's a JavaScript
developer pretty much is a

00:23:53.765 --> 00:23:55.020
jQuery developer.

00:23:55.020 --> 00:23:57.560
Everyone injects the same 30
k of JavaScript into every

00:23:57.560 --> 00:23:59.812
single app everyone writes.

00:23:59.812 --> 00:24:01.060
There's a very good
reason for that.

00:24:01.060 --> 00:24:03.790
They made the DOM feel
natural to the

00:24:03.790 --> 00:24:05.390
Java programming language.

00:24:05.390 --> 00:24:07.200
They made the DOM feel
like JavaScript.

00:24:07.200 --> 00:24:08.660
It was awesome.

00:24:08.660 --> 00:24:10.630
So, of course, Dart is going to
take inspiration from that.

00:24:10.630 --> 00:24:14.470
And we're building out what we
call the HTML library to make

00:24:14.470 --> 00:24:17.110
interacting with the DOM feel
very natural to Dart.

00:24:17.110 --> 00:24:20.970
So collections of nodes or
children should just be Dart

00:24:20.970 --> 00:24:21.980
collections.

00:24:21.980 --> 00:24:24.020
And the method name should look
like what you might call

00:24:24.020 --> 00:24:27.220
them if you were programming
Dart.

00:24:27.220 --> 00:24:29.170
And we also need this
opportunity to clean up or

00:24:29.170 --> 00:24:31.452
remove some of the dark corners
and alleyways you

00:24:31.452 --> 00:24:34.740
probably think you shouldn't
be touching.

00:24:34.740 --> 00:24:38.780
And we'll get into all that.

00:24:38.780 --> 00:24:40.770
This is a [UNINTELLIGIBLE]
on the next slide.

00:24:40.770 --> 00:24:43.160
So let's look at how you
might execute Dart.

00:24:43.160 --> 00:24:45.907
So you always start out
seeing a Dart source.

00:24:45.907 --> 00:24:48.896
Now, you may not see the Dart
source directly in the Dart

00:24:48.896 --> 00:24:49.960
virtual machine.

00:24:49.960 --> 00:24:51.280
Because this is part of
the Dart platform.

00:24:51.280 --> 00:24:54.591
The Dart virtual machine runs
just fine on the server or on

00:24:54.591 --> 00:24:55.546
the command line.

00:24:55.546 --> 00:24:58.450
Much like JavaScript runs fine
on the command line which

00:24:58.450 --> 00:25:00.320
powers Node.js.

00:25:00.320 --> 00:25:01.720
You have to give the
Dart execute while

00:25:01.720 --> 00:25:02.170
[UNINTELLIGIBLE].

00:25:02.170 --> 00:25:03.520
This can be embedded
also in a browser.

00:25:03.520 --> 00:25:05.360
We have a beta virtual app.

00:25:05.360 --> 00:25:08.230
Or you can [? try ?] some and
[UNINTELLIGIBLE] tools.

00:25:08.230 --> 00:25:11.240
So some of your tools may be
compiling into JavaScript,

00:25:11.240 --> 00:25:14.366
which is totally critical to the
adoption of Dart and just

00:25:14.366 --> 00:25:15.370
being a citizen on the web.

00:25:15.370 --> 00:25:18.840
Or you might mine for a tool
that can generate snapshots.

00:25:18.840 --> 00:25:20.910
That's what I want
to talk about.

00:25:20.910 --> 00:25:21.740
So snapshots [? are ?]

00:25:21.740 --> 00:25:21.910
[? another idea. ?]

00:25:21.910 --> 00:25:24.470
And it's our answer
to running--

00:25:24.470 --> 00:25:27.617
to fix the slow start up
performance problem we see in

00:25:27.617 --> 00:25:29.330
the current web applications
today.

00:25:29.330 --> 00:25:31.750
So wouldn't it be amazing if you
could start your app from

00:25:31.750 --> 00:25:35.359
cache, say on your mobile
device, from a snapshot, a

00:25:35.359 --> 00:25:37.240
serialization of the [? key ?]
from the last time you ran

00:25:37.240 --> 00:25:38.820
your [? program. ?]

00:25:38.820 --> 00:25:41.730
We've seen, when we did this,
when we tested, we saw an

00:25:41.730 --> 00:25:43.840
order of magnitude improvement
of load time.

00:25:43.840 --> 00:25:45.220
And this stuff,
[UNINTELLIGIBLE].

00:25:45.220 --> 00:25:47.610
It ain't that apps start fast,
because V8 seems fast.

00:25:47.610 --> 00:25:50.320
But again, when you know that
you get an order magnitude

00:25:50.320 --> 00:25:54.540
better, and you show the time
signing in Microsoft, Amazon,

00:25:54.540 --> 00:25:57.940
Google, every time you increase
the speed or decrease

00:25:57.940 --> 00:26:00.191
latency, your revenues go up.

00:26:00.191 --> 00:26:01.850
The usage goes up.

00:26:01.850 --> 00:26:05.330
There's a direct correlation
between speed and bottom line,

00:26:05.330 --> 00:26:06.790
the dollars.

00:26:06.790 --> 00:26:08.630
So this stuff is important.

00:26:08.630 --> 00:26:12.390
Snapshot is a feature of
the virtual machine.

00:26:12.390 --> 00:26:15.630
But pretty cool, so
good on that one.

00:26:15.630 --> 00:26:17.890
So this some of the features
about the language.

00:26:17.890 --> 00:26:19.540
We'll look at it a little
bit more later.

00:26:19.540 --> 00:26:22.210
But I want to now shift to the
other elements of the platform

00:26:22.210 --> 00:26:22.860
like the tools.

00:26:22.860 --> 00:26:24.915
We saw the editor
real briefly.

00:26:24.915 --> 00:26:28.700
We believe that tooling is as
important as just shipping

00:26:28.700 --> 00:26:30.410
language back to our
virtual machine.

00:26:30.410 --> 00:26:33.010
So we built an editor
based on RCP.

00:26:33.010 --> 00:26:35.975
We basically just took the
widgeting components and built

00:26:35.975 --> 00:26:40.520
an editor only for editing
Dart a fun, pleasurable

00:26:40.520 --> 00:26:41.330
experience.

00:26:41.330 --> 00:26:43.530
So things like syntax
highlighting, which we saw,

00:26:43.530 --> 00:26:49.200
code completion, warnings and
errors, that we saw there too.

00:26:49.200 --> 00:26:50.370
You can fire-off the Dart
virtual machine.

00:26:50.370 --> 00:26:53.125
You can fire-off Dartium, which
is the Dart VM built

00:26:53.125 --> 00:26:54.885
inside Chrome.

00:26:54.885 --> 00:26:56.370
They can debug between
the two.

00:26:56.370 --> 00:26:59.301
It's the things you might
expect in an editor.

00:26:59.301 --> 00:27:01.330
It's not trying to be like
an IDEs that implies this

00:27:01.330 --> 00:27:03.400
massive, monolithic thing.

00:27:03.400 --> 00:27:06.050
And web developers, they
want very fast ,

00:27:06.050 --> 00:27:07.910
going past this stuff.

00:27:07.910 --> 00:27:10.290
So you see a lot people use the
blindtext and TextMates.

00:27:10.290 --> 00:27:12.875
We're trying to build something
that gives you the

00:27:12.875 --> 00:27:15.150
features that play off the
language benefits, yet still

00:27:15.150 --> 00:27:17.800
remains a lightweight, like
a text editor would.

00:27:17.800 --> 00:27:20.280
And so that's our goal there.

00:27:20.280 --> 00:27:23.806
There's always the SDK, if you
just love loading on the

00:27:23.806 --> 00:27:24.192
command line.

00:27:24.192 --> 00:27:26.520
And this is all downloadable
stuff today.

00:27:26.520 --> 00:27:30.180
The SDK has the Dart2js, the
serial compiler to JavaScript.

00:27:30.180 --> 00:27:32.170
There's the Dart virtual
machine built in.

00:27:32.170 --> 00:27:34.020
It has all the core libraries.

00:27:34.020 --> 00:27:36.250
We just put the unit
test in there.

00:27:36.250 --> 00:27:39.020
I believe we can put the
dartdoc util in there.

00:27:39.020 --> 00:27:42.050
That's where [UNINTELLIGIBLE]
eventually is going to live.

00:27:42.050 --> 00:27:44.416
And just like all the stuff, you
can download this and play

00:27:44.416 --> 00:27:45.540
with it today.

00:27:45.540 --> 00:27:49.860
And then there's a Chromium with
the Dart virtual machine.

00:27:49.860 --> 00:27:51.880
This ships in the editor
download today.

00:27:51.880 --> 00:27:52.950
And it's just like
what it sounds.

00:27:52.950 --> 00:27:55.570
We took the Dart VM,
put it in Chromium,

00:27:55.570 --> 00:27:56.690
wired up all the bindings.

00:27:56.690 --> 00:27:59.520
So just like you might
communicate with HTML5 APIs

00:27:59.520 --> 00:28:01.560
with JavaScript, you can
communicate with

00:28:01.560 --> 00:28:02.580
those APIs with Dart.

00:28:02.580 --> 00:28:04.030
The dev tools also work.

00:28:04.030 --> 00:28:06.300
And we'll see this
in a second.

00:28:06.300 --> 00:28:08.265
So it'll be a while before this
is actually deployed out

00:28:08.265 --> 00:28:10.280
into the wild.

00:28:10.280 --> 00:28:13.730
So what's really awesome about
this is the editor, the editor

00:28:13.730 --> 00:28:16.550
debug development cycle.

00:28:16.550 --> 00:28:17.250
I don't know.

00:28:17.250 --> 00:28:20.130
Has anyone played with GWT,
Google Web Toolkit?

00:28:20.130 --> 00:28:22.678
So you write your Java code,
then just compile stuff, then

00:28:22.678 --> 00:28:23.212
you reload.

00:28:23.212 --> 00:28:25.230
And there's a dev mode, which
made it a little bit better.

00:28:25.230 --> 00:28:27.840
And just recently they
had a super dev mode.

00:28:27.840 --> 00:28:31.450
But there is this cycle, where
we have to compile.

00:28:31.450 --> 00:28:33.140
Well, what's awesome about
JavaScript web programming

00:28:33.140 --> 00:28:34.240
today, write a code, reload.

00:28:34.240 --> 00:28:36.390
Well, reload is the
web's compiler.

00:28:36.390 --> 00:28:38.130
We want that experience
for Dart developers.

00:28:38.130 --> 00:28:41.116
So you can write code in the
editor, and run it in Dartium

00:28:41.116 --> 00:28:42.980
or run, develop, run, develop,
run, develop.

00:28:42.980 --> 00:28:44.490
And then when you're ready to
deploy, then you compile to

00:28:44.490 --> 00:28:45.570
JavaScript and ship out.

00:28:45.570 --> 00:28:47.700
So this would be awesome
development an

00:28:47.700 --> 00:28:49.790
debug tool for a while.

00:28:49.790 --> 00:28:50.275
Christian?

00:28:50.275 --> 00:28:52.230
MALE SPEAKER: How do you see--

00:28:52.230 --> 00:28:56.952
what's the future of Dart in
non-Chromium browsers?

00:28:56.952 --> 00:29:00.120
SETH LADD: I think that the Dart
team has work to do to

00:29:00.120 --> 00:29:01.070
finish up the platform.

00:29:01.070 --> 00:29:04.080
We're still seeing things
like reflection.

00:29:04.080 --> 00:29:05.460
Increase the speed.

00:29:05.460 --> 00:29:06.670
Increase development
productivity.

00:29:06.670 --> 00:29:09.030
We're still in technology
preview.

00:29:09.030 --> 00:29:11.750
So I think, rightfully so,
people are going to wait and

00:29:11.750 --> 00:29:13.550
see approach.

00:29:13.550 --> 00:29:14.640
And that's fair.

00:29:14.640 --> 00:29:16.380
That's the pragmatic thing.

00:29:16.380 --> 00:29:20.160
They're waiting to see how
Dart can deliver on these

00:29:20.160 --> 00:29:23.270
hypotheses, if you will, for
DOM and web development.

00:29:23.270 --> 00:29:25.120
So we'll see what happens.

00:29:25.120 --> 00:29:29.445
But it's still early, so we've
got work to do to prove out

00:29:29.445 --> 00:29:30.400
these theories.

00:29:30.400 --> 00:29:32.460
AUDIENCE: Is the speed
improvement based on comparing

00:29:32.460 --> 00:29:36.707
to all services starting in
Chromium or is it based on the

00:29:36.707 --> 00:29:40.265
code produced from
Dart versus?

00:29:40.265 --> 00:29:40.960
SETH LADD: Both.

00:29:40.960 --> 00:29:43.880
We track the performance of
both and Dart compiled to

00:29:43.880 --> 00:29:45.890
JavaScript and native Dart.

00:29:45.890 --> 00:29:47.240
AUDIENCE: I know.

00:29:47.240 --> 00:29:48.450
It tested in another browser?

00:29:48.450 --> 00:29:49.350
SETH LADD: Absolutely.

00:29:49.350 --> 00:29:50.470
AUDIENCE: The cycles
[UNINTELLIGIBLE].

00:29:50.470 --> 00:29:52.990
SETH LADD: Our buildbot
is public.

00:29:52.990 --> 00:29:54.550
And you can go to the buildbot
and you see all these things

00:29:54.550 --> 00:29:57.700
running on all the different
browsers.

00:29:57.700 --> 00:30:00.400
And there's definitely work to
do with performance, for sure.

00:30:00.400 --> 00:30:01.440
But we are tracking--

00:30:01.440 --> 00:30:03.355
AUDIENCE: Are you seeing a
performance improvement on

00:30:03.355 --> 00:30:08.238
other browsers, if
you start from--

00:30:08.238 --> 00:30:10.140
I guess that's hard to
[? remember ?] and all.

00:30:10.140 --> 00:30:13.400
If you start from the
Dart language and it

00:30:13.400 --> 00:30:14.690
optimizes in some way--

00:30:14.690 --> 00:30:16.770
SETH LADD: So this is something
that GWT does.

00:30:16.770 --> 00:30:19.010
GWT can take your Java code,
compile it, and authorize it

00:30:19.010 --> 00:30:20.010
for different browsers,
understanding

00:30:20.010 --> 00:30:22.070
their particular quirks.

00:30:22.070 --> 00:30:24.340
Dart's not yet doing that,
because Dart--

00:30:24.340 --> 00:30:27.125
one of GWT's things was like,
back when they started, we're

00:30:27.125 --> 00:30:28.750
going to make this work IE6.

00:30:28.750 --> 00:30:31.330
There was a vast discrepancy
there.

00:30:31.330 --> 00:30:34.550
Dart's targeting modern
browsers.

00:30:34.550 --> 00:30:36.880
So that means IE9 and
up, basically.

00:30:36.880 --> 00:30:38.640
AUDIENCE: So you're going
to see the speed on

00:30:38.640 --> 00:30:38.940
[? programming ?]

00:30:38.940 --> 00:30:41.672
[UNINTELLIGIBLE] only
on Chromium, really?

00:30:41.672 --> 00:30:43.970
SETH LADD: I wouldn't
go that far.

00:30:43.970 --> 00:30:47.160
In fact, again, in many cases
we don't actually see speed

00:30:47.160 --> 00:30:49.430
[UNINTELLIGIBLE] yet, because
it's very early in the game.

00:30:49.430 --> 00:30:53.640
So what I suspect is that if
you write fairly sane Dart

00:30:53.640 --> 00:30:57.130
code, we have a lot of smarts
that generate optimized

00:30:57.130 --> 00:30:58.622
JavaScript.

00:30:58.622 --> 00:31:01.050
It remains to be seen how much
we'll tweak that JavaScript

00:31:01.050 --> 00:31:02.780
for each browser.

00:31:02.780 --> 00:31:06.640
But because we're targeting
modern browsers, who have

00:31:06.640 --> 00:31:08.940
fairly decent JavaScript
engines, the need for us to

00:31:08.940 --> 00:31:11.710
micro-tweak at like,
on day one for

00:31:11.710 --> 00:31:13.820
Dart, is greatly minimized.

00:31:13.820 --> 00:31:18.130
AUDIENCE: I also had a couple
clarifying questions.

00:31:18.130 --> 00:31:20.980
So it sounds like there's
two paths to see

00:31:20.980 --> 00:31:22.200
benefit through Dart.

00:31:22.200 --> 00:31:25.872
So I can run-- just to clarify--
so one way I could--

00:31:25.872 --> 00:31:27.230
SETH LADD: Do you want
me to go back to

00:31:27.230 --> 00:31:29.015
this guy, right here?

00:31:29.015 --> 00:31:29.575
Is this it?

00:31:29.575 --> 00:31:30.240
AUDIENCE: Yeah.

00:31:30.240 --> 00:31:33.070
So in the Dart source editor,
I could run pure

00:31:33.070 --> 00:31:34.080
JavaScript if I wanted?

00:31:34.080 --> 00:31:36.392
SETH LADD: In the Dart source--
in the Dart editor, I

00:31:36.392 --> 00:31:36.740
showed you earlier?

00:31:36.740 --> 00:31:37.315
AUDIENCE: Yeah.

00:31:37.315 --> 00:31:37.970
I could run through
JavaScript.

00:31:37.970 --> 00:31:38.890
SETH LADD: Well, you can
definitely write pure

00:31:38.890 --> 00:31:40.950
JavaScript, like you
can write HTML CSS.

00:31:40.950 --> 00:31:43.810
The editor will treat
those as text files.

00:31:43.810 --> 00:31:45.645
But every modern web app has a
collection of different text

00:31:45.645 --> 00:31:46.140
file formats.

00:31:46.140 --> 00:31:49.580
AUDIENCE: I think I'm
misunderstanding.

00:31:49.580 --> 00:31:52.600
If type in JavaScript, purely,
into the Dart engine--

00:31:52.600 --> 00:31:53.690
SETH LADD: Into this
guy, right here?

00:31:53.690 --> 00:31:55.435
AUDIENCE: Will it run?

00:31:55.435 --> 00:31:55.690
Or does it--

00:31:55.690 --> 00:31:56.700
SETH LADD: So no.

00:31:56.700 --> 00:31:57.120
[UNINTELLIGIBLE]

00:31:57.120 --> 00:31:58.540
That's not valid syntax.

00:31:58.540 --> 00:31:59.540
AUDIENCE: I know, I--

00:31:59.540 --> 00:32:02.025
SETH LADD: So let me explain
some of that.

00:32:02.025 --> 00:32:03.950
This is an editor.

00:32:03.950 --> 00:32:06.720
It mainly understands Dart code,
which is why it's that

00:32:06.720 --> 00:32:07.760
stuff showing up.

00:32:07.760 --> 00:32:08.380
I can totally do--

00:32:08.380 --> 00:32:09.920
AUDIENCE: I guess I was
just wondering if it

00:32:09.920 --> 00:32:11.740
makes the code at all?

00:32:11.740 --> 00:32:12.630
SETH LADD: Yeah.

00:32:12.630 --> 00:32:14.472
Again, so it's now
you edited it.

00:32:14.472 --> 00:32:15.090
You're good.

00:32:15.090 --> 00:32:16.480
Now, I want to run it.

00:32:16.480 --> 00:32:18.810
So there's two different ways
you can run the code.

00:32:18.810 --> 00:32:19.590
One's the way I showed you.

00:32:19.590 --> 00:32:20.850
Well, three, maybe.

00:32:20.850 --> 00:32:21.850
One is the way I showed you.

00:32:21.850 --> 00:32:23.950
We'll run it straight in
the virtual machine.

00:32:23.950 --> 00:32:24.960
Which we saw down here.

00:32:24.960 --> 00:32:27.580
This is just what's being
spit out from VM.

00:32:27.580 --> 00:32:28.780
Let's go ahead an jump
to this guy.

00:32:28.780 --> 00:32:30.060
This will, hopefully,
make sense to you.

00:32:30.060 --> 00:32:31.780
AUDIENCE: Are you going to tell
me that it'll compile to

00:32:31.780 --> 00:32:32.090
JavaScript?

00:32:32.090 --> 00:32:32.620
SETH LADD: Yes.

00:32:32.620 --> 00:32:33.730
AUDIENCE: Because I
already got that.

00:32:33.730 --> 00:32:36.230
What I was wondering, I guess, I
thought that maybe you could

00:32:36.230 --> 00:32:38.600
start from JavaScript and slowly
add implementation.

00:32:38.600 --> 00:32:40.390
It tells me it can't.

00:32:40.390 --> 00:32:42.240
Like if you have some JavaScript
already and you

00:32:42.240 --> 00:32:45.620
want to convert it to Dart and
then experiment with that?

00:32:45.620 --> 00:32:46.920
SETH LADD: Got it.

00:32:46.920 --> 00:32:47.690
Good question.

00:32:47.690 --> 00:32:48.410
That's really clever.

00:32:48.410 --> 00:32:52.010
So the question was, can you
use the editor or not?

00:32:52.010 --> 00:32:55.220
Can you start with JavaScript
and slowly convert it to Dart?

00:32:55.220 --> 00:32:56.940
Got to have these two
worlds intermix--

00:32:56.940 --> 00:32:57.670
AUDIENCE: And your
answer is, no.

00:32:57.670 --> 00:32:59.342
You have to start with Dart.

00:32:59.342 --> 00:33:04.473
SETH LADD: So the answer is Dart
does not have a JSNI or

00:33:04.473 --> 00:33:06.700
something like GWT has, like
JavaScript Native Interface.

00:33:06.700 --> 00:33:10.380
Dart can't directly
synchronicitly interact with

00:33:10.380 --> 00:33:11.550
JavaScript.

00:33:11.550 --> 00:33:14.070
And the reason for that is,
when you have two virtual

00:33:14.070 --> 00:33:16.450
machines, it gets a little
complicated on like who owns

00:33:16.450 --> 00:33:19.950
the object, and garbage
collection, and an efficient

00:33:19.950 --> 00:33:21.450
RBC mechanism between the two.

00:33:21.450 --> 00:33:24.680
And so the way that you interact
or interoperate with

00:33:24.680 --> 00:33:26.960
JavaScript, in Dart today,
is via post message.

00:33:26.960 --> 00:33:29.740
Just like you might interact
between two iframes, or two

00:33:29.740 --> 00:33:33.500
tabs, or two disparate third
party programs. Post message

00:33:33.500 --> 00:33:34.200
is how you do that.

00:33:34.200 --> 00:33:38.100
So what we see people
do is, they might

00:33:38.100 --> 00:33:38.790
have JavaScript code.

00:33:38.790 --> 00:33:42.300
They write a layer that turns
that JavaScript code into a

00:33:42.300 --> 00:33:43.780
course-grained asynchronous
interface.

00:33:43.780 --> 00:33:44.835
That's in Dart.

00:33:44.835 --> 00:33:48.200
And then the implementation of
that interface just uses post

00:33:48.200 --> 00:33:49.650
message to link you back
to the main page.

00:33:49.650 --> 00:33:53.330
So it's definitely not a totally
awesome experience.

00:33:53.330 --> 00:33:54.510
But it does work.

00:33:54.510 --> 00:33:57.770
AUDIENCE: When I start from Dart
specifically, do I have

00:33:57.770 --> 00:34:00.760
like two options on creating the
JavaScript and create it

00:34:00.760 --> 00:34:03.890
pretty, so that like people
working in just pure

00:34:03.890 --> 00:34:05.545
JavaScript and not
Dart are happy?

00:34:05.545 --> 00:34:09.795
Or does it just convert into
Dart optimized JavaScript?

00:34:09.795 --> 00:34:13.469
SETH LADD: So the pretty and the
Dart optimized are, right

00:34:13.469 --> 00:34:14.260
now, the same thing.

00:34:14.260 --> 00:34:16.739
We generate just one version
of the JavaScript.

00:34:16.739 --> 00:34:18.600
In fact, I think we'll
see that really soon.

00:34:18.600 --> 00:34:20.460
I'll actually show you.

00:34:20.460 --> 00:34:23.540
To tie it back to this
experience here, the editor

00:34:23.540 --> 00:34:28.679
can both launch this thing
directly in Dartium, or it can

00:34:28.679 --> 00:34:32.569
compile to JavaScript for you
and launch it another browser.

00:34:32.569 --> 00:34:36.247
AUDIENCE: So how awful is
debugging, generally?

00:34:36.247 --> 00:34:38.630
SETH LADD: Yeah,
fair question.

00:34:38.630 --> 00:34:39.850
The JavaScript that we generate

00:34:39.850 --> 00:34:41.210
today is fairly readable.

00:34:41.210 --> 00:34:43.100
And I'll show you
really quickly.

00:34:43.100 --> 00:34:44.900
AUDIENCE: But how easily
can I add it back

00:34:44.900 --> 00:34:45.960
to the Dart I wrote?

00:34:45.960 --> 00:34:49.710
SETH LADD: So we don't yet
have source maps, today.

00:34:49.710 --> 00:34:50.770
That would be really awesome.

00:34:50.770 --> 00:34:52.440
And I know that's been brought
up a couple times.

00:34:52.440 --> 00:34:57.760
AUDIENCE: Even my hand, I find
CoffeeScript hard enough to

00:34:57.760 --> 00:34:59.100
realize I did something wrong.

00:34:59.100 --> 00:35:00.255
So it's not a tool problem.

00:35:00.255 --> 00:35:02.720
It's that I wrote
invalid code.

00:35:02.720 --> 00:35:04.960
But it compiled and executed
JavaScript that

00:35:04.960 --> 00:35:05.860
didn't do what I wanted.

00:35:05.860 --> 00:35:10.280
And I find a lot of JavaScript
that generated behavior that

00:35:10.280 --> 00:35:11.840
wasn't intended.

00:35:11.840 --> 00:35:15.963
But then locating which process
or compiled statement

00:35:15.963 --> 00:35:18.690
generated that, is
that feasible?

00:35:18.690 --> 00:35:20.455
SETH LADD: It's so feasible
that we don't

00:35:20.455 --> 00:35:22.300
even have source maps.

00:35:22.300 --> 00:35:24.100
For those of you who don't know,
a source map's the lines

00:35:24.100 --> 00:35:26.070
that you map between the
compile output and the

00:35:26.070 --> 00:35:27.270
original source.

00:35:27.270 --> 00:35:30.280
And so when you're actually in
the dev tools, as you step

00:35:30.280 --> 00:35:31.816
through the program, it'll
actually [? set ?] you through

00:35:31.816 --> 00:35:34.210
the source, the original source,
even though it's

00:35:34.210 --> 00:35:37.850
executing the generated
JavaScript code.

00:35:37.850 --> 00:35:39.270
But we're going to get
there really quick.

00:35:39.270 --> 00:35:43.520
I'll show you what a generated
JavaScript code looks like.

00:35:43.520 --> 00:35:46.770
It basically looks like
a human wrote it.

00:35:46.770 --> 00:35:48.745
Yeah, let's look at that then.

00:35:48.745 --> 00:35:49.210
And I'll show you.

00:35:49.210 --> 00:35:50.460
That's a good question.

00:35:55.280 --> 00:35:55.860
Look at that.

00:35:55.860 --> 00:35:56.780
It's actually the next slide.

00:35:56.780 --> 00:35:58.160
Very cool.

00:35:58.160 --> 00:36:01.240
So completing the tools that we
offer, there's the Dart to

00:36:01.240 --> 00:36:02.860
JavaScript compiler, as well.

00:36:02.860 --> 00:36:05.170
Which is how you deploy
your app today,

00:36:05.170 --> 00:36:05.950
for all modern browsers.

00:36:05.950 --> 00:36:07.840
It used to be called Frog,
affectionately.

00:36:07.840 --> 00:36:10.190
But now it's simplified
to Dart2js.

00:36:10.190 --> 00:36:12.700
Because everyone's like,
what's Frog?

00:36:12.700 --> 00:36:14.330
So does use some smarts
out of the gate today.

00:36:14.330 --> 00:36:16.250
It does do what we call,
tree shaking.

00:36:16.250 --> 00:36:19.390
So it, actually, it compiles in
your whole program and then

00:36:19.390 --> 00:36:20.100
shakes the tree.

00:36:20.100 --> 00:36:22.450
And then all the unused
or dead code fall off.

00:36:22.450 --> 00:36:24.710
And we only ship what's
actually being used.

00:36:24.710 --> 00:36:25.440
Which is really cool.

00:36:25.440 --> 00:36:29.180
Because that means you can
import all these libraries.

00:36:29.180 --> 00:36:32.090
But if you use just 10% of
library you import, then what

00:36:32.090 --> 00:36:34.620
gets generated out
is just that 10%.

00:36:34.620 --> 00:36:35.270
So that's pretty cool.

00:36:35.270 --> 00:36:37.550
And there's more work to do
there to make it even smaller.

00:36:37.550 --> 00:36:40.300
And once you understand the
semantics of the code, your

00:36:40.300 --> 00:36:41.920
minification can get
a lot smarter.

00:36:41.920 --> 00:36:45.088
And so we'll add minification
to the tool chain as well.

00:36:45.088 --> 00:36:48.810
So, to answer your questions.

00:36:48.810 --> 00:36:49.800
Here's an example.

00:36:49.800 --> 00:36:52.805
This is slightly old, but
you get the idea.

00:36:55.940 --> 00:36:57.310
Here's some Dart code.

00:36:57.310 --> 00:36:58.760
This is pretty self-explanatory.

00:36:58.760 --> 00:37:00.590
You have a class here.

00:37:00.590 --> 00:37:01.645
This is static method.

00:37:01.645 --> 00:37:03.560
And here's your main method,
that calls the static method.

00:37:03.560 --> 00:37:05.020
So this is what you would
write in a program.

00:37:05.020 --> 00:37:08.695
Then you run it through
the Dart2js compiler.

00:37:08.695 --> 00:37:12.225
In this version of Frog, this
is the code that generates.

00:37:12.225 --> 00:37:16.290
So it actually fits
on the screen.

00:37:16.290 --> 00:37:18.830
And you have main method here.

00:37:18.830 --> 00:37:19.780
That's fine.

00:37:19.780 --> 00:37:20.430
That makes sense.

00:37:20.430 --> 00:37:22.620
In fact, this looks like the
same name and method.

00:37:22.620 --> 00:37:23.490
That's good.

00:37:23.490 --> 00:37:24.580
Then you look back up here.

00:37:24.580 --> 00:37:26.250
So there's a class.

00:37:26.250 --> 00:37:28.090
So that's that guy, here.

00:37:28.090 --> 00:37:29.685
It says static on it.

00:37:29.685 --> 00:37:32.655
That, actually, to me, is
fairly understandable.

00:37:36.260 --> 00:37:36.950
This is just one example.

00:37:36.950 --> 00:37:39.820
Obviously you could write really
complex Dart code.

00:37:39.820 --> 00:37:43.184
The Dart compile should be smart
enough to optimize that.

00:37:43.184 --> 00:37:46.110
But we're not, out of the
gate, trying to make,

00:37:46.110 --> 00:37:49.836
purposely, confusing or
crazy JavaScript.

00:37:49.836 --> 00:37:53.000
The development and debug
experience for JavaScript

00:37:53.000 --> 00:37:56.230
should be fairly sane
and logical to us.

00:37:56.230 --> 00:37:59.420
And that's where we are today.

00:37:59.420 --> 00:38:00.670
[UNINTELLIGIBLE]

00:38:05.270 --> 00:38:07.000
So it's important to remember
though, we're still in the

00:38:07.000 --> 00:38:09.290
technology [? preview ?], so
Dart is by no means done.

00:38:09.290 --> 00:38:12.410
There's still key features,
like reflection, that are

00:38:12.410 --> 00:38:15.680
currently still in being
implemented.

00:38:15.680 --> 00:38:17.300
In fact, we just changed the
semantics for equality.

00:38:17.300 --> 00:38:19.470
So changes are still
happening.

00:38:19.470 --> 00:38:20.880
We don't yet have an Enum.

00:38:20.880 --> 00:38:22.070
That's probably pretty useful.

00:38:22.070 --> 00:38:23.920
Patter action is really useful
if you have isolate

00:38:23.920 --> 00:38:24.890
communication and messages.

00:38:24.890 --> 00:38:26.650
We know we want to have that.

00:38:26.650 --> 00:38:28.610
And of course, there's no
question about how we should

00:38:28.610 --> 00:38:30.001
drive Chrome.

00:38:30.001 --> 00:38:32.820
So it's still early on.

00:38:32.820 --> 00:38:35.030
And this is why we like to get
the feedback to know what's

00:38:35.030 --> 00:38:36.450
important to you guys.

00:38:36.450 --> 00:38:37.970
Now, I hear the debugging of

00:38:37.970 --> 00:38:39.180
JavaScript is really important.

00:38:39.180 --> 00:38:41.110
So maybe that's the
something to hear.

00:38:44.610 --> 00:38:45.570
So this is really cool.

00:38:45.570 --> 00:38:46.800
Just like [UNINTELLIGIBLE],
one of the things that's

00:38:46.800 --> 00:38:50.500
really important to any kind of
ecosystem is a way to get

00:38:50.500 --> 00:38:54.190
developers to feel empowered
to share, publish, use,

00:38:54.190 --> 00:38:56.410
install, discover libraries.

00:38:56.410 --> 00:38:58.000
Java has Maven.

00:38:58.000 --> 00:38:59.630
Node.js has MPM.

00:38:59.630 --> 00:39:01.270
Ruby has Gems and Butler.

00:39:01.270 --> 00:39:04.370
So Dart is building what we
affectionately call Pub.

00:39:04.370 --> 00:39:06.580
You play darts in a pub.

00:39:06.580 --> 00:39:07.390
And that's our package
manager.

00:39:07.390 --> 00:39:11.820
And it'll do things like enable
installation discovery,

00:39:11.820 --> 00:39:13.330
bundling, all that good stuff.

00:39:13.330 --> 00:39:15.720
And to me, this is one of those
key missing pieces, and

00:39:15.720 --> 00:39:16.760
one that should be at launch.

00:39:16.760 --> 00:39:19.135
You'll now see this kind
of ecosystem bloom.

00:39:19.135 --> 00:39:20.500
Because we have all these
libraries out there, right

00:39:20.500 --> 00:39:23.050
now, but there's no economical
way to pull them

00:39:23.050 --> 00:39:24.640
all in right now.

00:39:24.640 --> 00:39:27.600
So anyway, we're keenly worried
about developer

00:39:27.600 --> 00:39:28.310
experience.

00:39:28.310 --> 00:39:30.382
And this is the kind of thins
that we feel are part of the

00:39:30.382 --> 00:39:32.025
values we put into
our package.

00:39:32.025 --> 00:39:33.770
Now, the proposal is
live right now.

00:39:33.770 --> 00:39:36.516
And you can shoot comment
to this and respond.

00:39:36.516 --> 00:39:39.722
That's the kind of stuff
we like to hear.

00:39:39.722 --> 00:39:41.125
How much time do we have?

00:39:41.125 --> 00:39:42.520
MALE SPEAKER: 15
minutes or so.

00:39:42.520 --> 00:39:43.750
SETH LADD: Cool.

00:39:43.750 --> 00:39:44.700
Well, I won't go into
these then.

00:39:44.700 --> 00:39:46.030
But this just gives you the idea
that people are building

00:39:46.030 --> 00:39:49.230
things for Dart today,
crypto libraries,

00:39:49.230 --> 00:39:51.610
NEC Frameworks, logging.

00:39:51.610 --> 00:39:53.940
All the kind of infrastructure
things you'd think would

00:39:53.940 --> 00:39:54.890
happen in early days.

00:39:54.890 --> 00:39:56.920
So in other words, people
are building stuff.

00:39:56.920 --> 00:39:58.600
And it's neat to watch them.

00:39:58.600 --> 00:40:01.500
And build upon what other people
have built already, so

00:40:01.500 --> 00:40:03.960
early on in the project.

00:40:03.960 --> 00:40:06.000
The online, that community
is also growing.

00:40:06.000 --> 00:40:09.010
We have a Plus pages,
hashtags, Twitter.

00:40:09.010 --> 00:40:11.210
Dartosphere is what
we call a planet.

00:40:11.210 --> 00:40:14.560
So like all the blog aggregation
is there.

00:40:14.560 --> 00:40:18.900
Dartbug.com is a short URL
over to the bug tracker.

00:40:18.900 --> 00:40:19.850
We love that.

00:40:19.850 --> 00:40:22.260
A blog here for news.

00:40:22.260 --> 00:40:26.098
So it's happening online
as well, like that.

00:40:26.098 --> 00:40:28.455
Useful resources, you might
find useful, just

00:40:28.455 --> 00:40:29.980
to makey you aware.

00:40:29.980 --> 00:40:31.960
We've a language tour.

00:40:31.960 --> 00:40:34.340
Where you can just walk yourself
through, at a high

00:40:34.340 --> 00:40:37.140
level, all these features.

00:40:37.140 --> 00:40:39.530
We have API docs, which
have comments as well.

00:40:39.530 --> 00:40:41.500
So you can browse around,
again, [? one ?] for the

00:40:41.500 --> 00:40:42.040
[? platform ?]

00:40:42.040 --> 00:40:44.070
libraries, things
like futures.

00:40:44.070 --> 00:40:46.580
I think that's really useful for
asynchronous programming,

00:40:46.580 --> 00:40:49.170
timers, clocks, date
manipulation.

00:40:49.170 --> 00:40:51.455
This is one of the things
I love about Java.

00:40:51.455 --> 00:40:54.260
It shipped with a pretty
comprehensive core library.

00:40:54.260 --> 00:40:56.840
And if you need it, the web
platform had this too.

00:40:56.840 --> 00:40:58.870
That's less coding to
ship around there.

00:40:58.870 --> 00:41:00.790
So you can browse around that.

00:41:00.790 --> 00:41:02.630
And then this one's
really cool.

00:41:02.630 --> 00:41:03.390
You can't see the whole thing.

00:41:03.390 --> 00:41:07.060
But this translates JavaScript
idioms to Dart.

00:41:07.060 --> 00:41:09.928
And so this can help you if
your JavaScript guy or

00:41:09.928 --> 00:41:10.384
programmer.

00:41:10.384 --> 00:41:12.510
And you want to know like, I'm
always iterating through

00:41:12.510 --> 00:41:13.290
arrays in Java.

00:41:13.290 --> 00:41:15.030
How am I going to
do that in Dart?

00:41:15.030 --> 00:41:15.610
Does that make sense?

00:41:15.610 --> 00:41:16.850
You can use this.

00:41:16.850 --> 00:41:17.640
This a huge page.

00:41:17.640 --> 00:41:20.520
This itself is written with
Dart, and, oddly enough, XSLT.

00:41:20.520 --> 00:41:23.980
Found a good use for it.

00:41:23.980 --> 00:41:25.690
Anyway, that's pretty
useful for that.

00:41:25.690 --> 00:41:27.040
And then shameless plug.

00:41:27.040 --> 00:41:29.670
This is a freebie book, kind
of high level stuff.

00:41:29.670 --> 00:41:34.080
You can get that at O'Reilly's
for free.

00:41:34.080 --> 00:41:35.640
So yeah, I mean, the
main thing is that

00:41:35.640 --> 00:41:36.490
Dart is getting ready.

00:41:36.490 --> 00:41:37.250
It's not quite done.

00:41:37.250 --> 00:41:39.900
But we envision it as a whole
batteries included platform,

00:41:39.900 --> 00:41:42.875
language, libraries, editors,
virtual machines, browser

00:41:42.875 --> 00:41:44.690
integrations.

00:41:44.690 --> 00:41:47.360
We view it as for structured
web programming.

00:41:47.360 --> 00:41:50.980
So we have a set of
use cases in mind.

00:41:50.980 --> 00:41:53.670
We're working with some
assumptions around that.

00:41:53.670 --> 00:41:56.200
And we love feedback, as many
ways as you can do it, mailing

00:41:56.200 --> 00:42:01.340
list, bugs, the Plus feed,
whatever, my email.

00:42:01.340 --> 00:42:02.180
It's all good.

00:42:02.180 --> 00:42:05.290
So with a few minutes left, I'll
show you a couple more

00:42:05.290 --> 00:42:06.090
code samples, and then whatever

00:42:06.090 --> 00:42:08.960
questions you guys got.

00:42:08.960 --> 00:42:10.660
AUDIENCE: Are there any internal
teams that have

00:42:10.660 --> 00:42:14.800
signed up to start developing
with this?

00:42:14.800 --> 00:42:16.240
SETH LADD: I don't know if
we're talking about this.

00:42:16.240 --> 00:42:18.930
That's no comment.

00:42:18.930 --> 00:42:21.490
Yeah, but that's a
good question.

00:42:21.490 --> 00:42:22.915
So let's start here.

00:42:22.915 --> 00:42:23.950
We saw this, [? probably ?]

00:42:23.950 --> 00:42:24.810
[UNINTELLIGIBLE].

00:42:24.810 --> 00:42:26.800
This is just the obligatory
hello world.

00:42:26.800 --> 00:42:29.565
What I like about this, though,
is it's very obvious.

00:42:29.565 --> 00:42:30.910
It's very familiar.

00:42:30.910 --> 00:42:32.700
And there's nothing really
surprising here.

00:42:32.700 --> 00:42:36.600
But it doesn't have all this
ceremonious garbage that Java

00:42:36.600 --> 00:42:38.560
would have.

00:42:38.560 --> 00:42:41.820
So again, we can be structured
and familiar without making

00:42:41.820 --> 00:42:44.345
you type out public, static,
[? void, ?] main, bla, bla,

00:42:44.345 --> 00:42:44.800
bla, bla, bla.

00:42:44.800 --> 00:42:46.310
You still get a processing
point.

00:42:46.310 --> 00:42:47.745
I know where my program
starts.

00:42:47.745 --> 00:42:49.180
And that's actually something
you don't know about

00:42:49.180 --> 00:42:51.216
JavaScript.

00:42:51.216 --> 00:42:51.780
That's kind of cool.

00:42:51.780 --> 00:42:53.670
Let's look at class.

00:42:53.670 --> 00:42:54.705
This is a little
bit artificial.

00:42:54.705 --> 00:42:56.420
But it shows a couple of things
I like about this.

00:42:56.420 --> 00:42:58.354
I hope you guys can see this.

00:42:58.354 --> 00:42:59.860
[? Each cloud ?] again,
syntax is really

00:42:59.860 --> 00:43:01.420
familiar, class points.

00:43:01.420 --> 00:43:04.510
We can see the optional
typing here.

00:43:04.510 --> 00:43:06.680
[UNINTELLIGIBLE] works
just fine.

00:43:06.680 --> 00:43:09.180
What I love is this, the
syntactic sugar for

00:43:09.180 --> 00:43:09.880
constructors.

00:43:09.880 --> 00:43:13.900
You always type this dot x
equals x, this dot y equals y.

00:43:13.900 --> 00:43:15.970
Why not just say, this
dot x, this dot y.

00:43:15.970 --> 00:43:16.260
Cool.

00:43:16.260 --> 00:43:18.290
Works for me.

00:43:18.290 --> 00:43:21.480
You can see the static method
being called upon that, here.

00:43:21.480 --> 00:43:24.430
One of the things that
we loved, or we're

00:43:24.430 --> 00:43:26.810
beginning to see this--

00:43:26.810 --> 00:43:28.880
let me do this--

00:43:28.880 --> 00:43:32.590
is using the static type of
annotations to surface the

00:43:32.590 --> 00:43:33.940
area of your code.

00:43:33.940 --> 00:43:35.906
Again, to provide documentation
to your fellow

00:43:35.906 --> 00:43:37.430
humans and machines.

00:43:37.430 --> 00:43:40.400
Really, what we want to
encourage is using types to

00:43:40.400 --> 00:43:43.010
cite type annotations
here, and here.

00:43:43.010 --> 00:43:45.470
This parcel will flow
down to this.

00:43:45.470 --> 00:43:48.030
So that when you give the code
to a fellow programmer, he can

00:43:48.030 --> 00:43:51.020
immediately see what the
expectations are.

00:43:51.020 --> 00:43:52.940
That alone is a huge
improvement over

00:43:52.940 --> 00:43:55.150
what we have today.

00:43:55.150 --> 00:43:57.150
And then, for instance,
when you start doing

00:43:57.150 --> 00:43:58.980
that kind of stuff--

00:43:58.980 --> 00:44:00.370
let's just mark this
[UNINTELLIGIBLE].

00:44:06.170 --> 00:44:09.156
So it obviously doesn't know
how to complete this.

00:44:09.156 --> 00:44:11.068
But I do.

00:44:11.068 --> 00:44:16.583
So I tell the system it's point,
then the system gets a

00:44:16.583 --> 00:44:17.090
lot more smart.

00:44:17.090 --> 00:44:19.130
And obviously, things begin to
[? expect ?] from any modern

00:44:19.130 --> 00:44:21.702
programming environment,
kick in, boom.

00:44:21.702 --> 00:44:22.590
A lot more productive.

00:44:22.590 --> 00:44:25.560
So highlight that
kind of stuff.

00:44:25.560 --> 00:44:28.110
There's been talk about, while
it could be non-enbabled,

00:44:28.110 --> 00:44:32.252
local-type inference, and that
would be cool, and I think

00:44:32.252 --> 00:44:33.970
that will come at some point.

00:44:33.970 --> 00:44:36.080
That would make sense.

00:44:36.080 --> 00:44:38.030
Some of you had questions
about that.

00:44:38.030 --> 00:44:39.990
And then let's look at--

00:44:39.990 --> 00:44:41.780
we saw this guy before.

00:44:41.780 --> 00:44:45.550
So this is an example of what
we call, HTML library.

00:44:45.550 --> 00:44:49.000
A totally artificial example
here, but it shows you that

00:44:49.000 --> 00:44:52.200
this is a little bit more
jQuery-esque, if you will.

00:44:52.200 --> 00:44:55.750
You create a new elements with
this nice-- this is called a

00:44:55.750 --> 00:44:57.890
name constructor.

00:44:57.890 --> 00:44:59.440
Which I love named constructors,
because before

00:44:59.440 --> 00:45:01.580
you had just overloaded
instructions, different

00:45:01.580 --> 00:45:02.540
combination of arguments.

00:45:02.540 --> 00:45:04.840
You never knew what they were
for or what they did.

00:45:04.840 --> 00:45:09.073
So now you have a constructor,
for instance, like from Jason.

00:45:09.073 --> 00:45:09.514
Good.

00:45:09.514 --> 00:45:10.840
Makes sense.

00:45:10.840 --> 00:45:13.620
And then, you can just interact
with the attributes

00:45:13.620 --> 00:45:16.825
of an element just as you might
properties of the class,

00:45:16.825 --> 00:45:18.910
so ID, text.

00:45:18.910 --> 00:45:21.230
Classes here, is just
a Dart collection.

00:45:21.230 --> 00:45:22.822
So just like you can add things
in our collection, you

00:45:22.822 --> 00:45:23.932
can add class.

00:45:23.932 --> 00:45:26.920
That just works.

00:45:26.920 --> 00:45:29.600
And this is how you had
an anonymous event

00:45:29.600 --> 00:45:30.660
callback, if you will.

00:45:30.660 --> 00:45:32.310
See the click handler?

00:45:32.310 --> 00:45:34.890
Reads pretty easy to
me on click app.

00:45:34.890 --> 00:45:36.985
And then, again, elements
is a Dart collection.

00:45:36.985 --> 00:45:41.435
So you just added your new
element to [UNINTELLIGIBLE].

00:45:41.435 --> 00:45:44.440
So let's run this.

00:45:44.440 --> 00:45:45.690
Adjust the mouse.

00:45:50.090 --> 00:45:51.550
Come on computer.

00:45:51.550 --> 00:45:54.730
Double [UNINTELLIGIBLE].

00:45:54.730 --> 00:45:55.980
That's so funny.

00:46:00.120 --> 00:46:01.370
[INAUDIBLE]

00:46:08.970 --> 00:46:11.360
So we are now running this
inside what we call Dartium,

00:46:11.360 --> 00:46:13.310
which is the Dart
virtual machine.

00:46:13.310 --> 00:46:17.038
Sorry, embedded inside
Chromium.

00:46:17.038 --> 00:46:19.060
Here we are.

00:46:19.060 --> 00:46:20.770
Just to prove that
it all works.

00:46:20.770 --> 00:46:21.370
Great.

00:46:21.370 --> 00:46:23.210
So this answers sort of your
debugging question.

00:46:23.210 --> 00:46:25.110
This isn't exactly
what you asked.

00:46:25.110 --> 00:46:28.770
But it shows you the direction
that the team is going in.

00:46:28.770 --> 00:46:33.180
I can fire up the dev tools
and get in the way here.

00:46:33.180 --> 00:46:35.890
The dev tools are awesome
for JavaScript.

00:46:35.890 --> 00:46:37.510
And we're making those
work in Dart as well.

00:46:37.510 --> 00:46:39.870
So, for instance, you can insert
a breakpoint here.

00:46:39.870 --> 00:46:42.054
And notice this would
be Dart code.

00:46:42.054 --> 00:46:44.274
Let me go back up here.

00:46:44.274 --> 00:46:46.460
And sure enough, it would
stop right here.

00:46:46.460 --> 00:46:47.710
You can inspect objects.

00:46:47.710 --> 00:46:50.517
It's really cool, just like you
would expect in dev tools

00:46:50.517 --> 00:46:51.880
for JavaScript.

00:46:51.880 --> 00:46:53.540
We'll just keep going.

00:46:53.540 --> 00:46:55.710
And [UNINTELLIGIBLE].

00:46:55.710 --> 00:46:57.430
The debug experience here
should be great.

00:46:57.430 --> 00:47:00.070
And what they're working on
now is actually wiring the

00:47:00.070 --> 00:47:02.345
debugger of the editor,
communicating directly with

00:47:02.345 --> 00:47:03.250
the virtual machine here.

00:47:03.250 --> 00:47:05.825
So you should use the editor
to step through and inspect

00:47:05.825 --> 00:47:08.610
variables and all that stuff,
living in a nice, development

00:47:08.610 --> 00:47:08.995
experience.

00:47:08.995 --> 00:47:12.420
And writing and enabling
the [? Dart code. ?]

00:47:12.420 --> 00:47:15.310
Finally, I'll show isolates.

00:47:15.310 --> 00:47:17.630
That's the cool stuff I like.

00:47:17.630 --> 00:47:18.705
You remember isolates?

00:47:18.705 --> 00:47:21.035
Those are a kind of hypervisor
running the code in different

00:47:21.035 --> 00:47:22.830
memory isolated segments,
and possibly

00:47:22.830 --> 00:47:25.540
different threads or processes.

00:47:25.540 --> 00:47:27.050
So, they basically
clean up the API.

00:47:27.050 --> 00:47:28.470
It looks pretty good to me.

00:47:28.470 --> 00:47:31.800
Spawn function to create an
isolate, give it a function as

00:47:31.800 --> 00:47:32.890
the entry point.

00:47:32.890 --> 00:47:34.390
Just happens that
it's up here.

00:47:34.390 --> 00:47:36.750
In our simple one, up here,
every isolate has a port.

00:47:36.750 --> 00:47:39.420
So I say, OK, well, we'll
send out a message.

00:47:39.420 --> 00:47:42.990
And when I get that message,
reply and just, basically,

00:47:42.990 --> 00:47:45.810
echo the message.

00:47:45.810 --> 00:47:47.190
And then down here, I'm
going to send a

00:47:47.190 --> 00:47:48.720
message via send port.

00:47:48.720 --> 00:47:50.780
I'm going to say, hi.

00:47:50.780 --> 00:47:52.650
And then when I get
the response--

00:47:52.650 --> 00:47:55.631
and this is using futures--

00:47:55.631 --> 00:47:57.920
go ahead and print.

00:47:57.920 --> 00:48:02.650
Then takes the function, and
print is a function.

00:48:02.650 --> 00:48:03.650
Just so that makes sense.

00:48:03.650 --> 00:48:05.040
So let's run this.

00:48:05.040 --> 00:48:06.616
AUDIENCE: [UNINTELLIGIBLE]

00:48:06.616 --> 00:48:09.860
SETH LADD: They're built in.

00:48:09.860 --> 00:48:11.160
So you can't see it down here.

00:48:11.160 --> 00:48:11.660
[? It's already ?]

00:48:11.660 --> 00:48:11.960
Been [? hightlighted ?]

00:48:11.960 --> 00:48:13.350
Hi, THC echo.

00:48:13.350 --> 00:48:14.760
So we sent a message.

00:48:14.760 --> 00:48:15.280
I responded.

00:48:15.280 --> 00:48:16.440
Sent it back.

00:48:16.440 --> 00:48:19.590
I got it here, and I sent that,
the object I got, as a

00:48:19.590 --> 00:48:21.020
response to the print
function, and the

00:48:21.020 --> 00:48:21.950
[UNINTELLIGIBLE].

00:48:21.950 --> 00:48:23.540
So isolates are really
cool, and a lot

00:48:23.540 --> 00:48:24.350
of cool things happen.

00:48:24.350 --> 00:48:25.540
AUDIENCE: [UNINTELLIGIBLE]

00:48:25.540 --> 00:48:26.360
implicit argument here?

00:48:26.360 --> 00:48:28.400
SETH LADD: It's not an
implicit argument?

00:48:28.400 --> 00:48:31.520
Oh, it is being passed
into this.

00:48:31.520 --> 00:48:32.645
I could have done this.

00:48:32.645 --> 00:48:33.895
Let's see here.

00:48:39.920 --> 00:48:41.270
That's a good question.

00:48:41.270 --> 00:48:43.920
AUDIENCE: So there's on thing
I haven't seen here, some

00:48:43.920 --> 00:48:46.560
examples yet, any kind of code
that you're blocking.

00:48:46.560 --> 00:48:49.370
SETH LADD: So yes, we just
had enclosure right here.

00:48:49.370 --> 00:48:50.300
AUDIENCE: Is that
what that is?

00:48:50.300 --> 00:48:50.850
SETH LADD: Yeah.

00:48:50.850 --> 00:48:52.370
In fact, Dart has
sane closures.

00:48:52.370 --> 00:48:53.670
And if we had any more time
I [? tell you. ?]

00:48:53.670 --> 00:48:55.860
Maybe afterwards,
I'll show you.

00:48:55.860 --> 00:49:00.810
But this, in Dart, is totally
logical [UNINTELLIGIBLE].

00:49:00.810 --> 00:49:02.630
And I'll show you some
samples of these.

00:49:05.140 --> 00:49:05.960
So cool.

00:49:05.960 --> 00:49:11.080
So that's what I have, given
the time allotted.

00:49:11.080 --> 00:49:13.765
So I totally think you guys are
spending lunch with me and

00:49:13.765 --> 00:49:14.390
the questions.

00:49:14.390 --> 00:49:16.920
And I'll just hang out for as
long as you guys want, and we

00:49:16.920 --> 00:49:18.298
can chat about all the stuff
I'd like to know.

00:49:18.298 --> 00:49:22.200
Actually, I'm most visibly
interested in how much modern

00:49:22.200 --> 00:49:24.990
client-side web development
you guys do.

00:49:24.990 --> 00:49:28.456
What are your clients
asking for?

00:49:28.456 --> 00:49:31.250
We envision Dart being
applicable and relevant in a

00:49:31.250 --> 00:49:34.790
world where the application
lives in the browser.

00:49:34.790 --> 00:49:38.280
And the server is a restful,
adjacent endpoint.

00:49:38.280 --> 00:49:40.680
And then you start writing
you app offline first.

00:49:40.680 --> 00:49:43.840
You start writing your app
with Dart or JavaScript.

00:49:43.840 --> 00:49:46.190
And just like might in iOS or
Android app [? in devo ?], you

00:49:46.190 --> 00:49:47.330
don't ask the server
to generate your

00:49:47.330 --> 00:49:49.210
Android views for you.

00:49:49.210 --> 00:49:52.660
So we want to build tools to
that help developers build

00:49:52.660 --> 00:49:56.260
apps that are modern
client-side apps.

00:49:56.260 --> 00:49:58.220
And I'm totally curious if
that's what you guys are

00:49:58.220 --> 00:50:00.160
trying to do, want to do,
are being asked to do?

00:50:00.160 --> 00:50:05.480
AUDIENCE: Well, I guess then,
responding to that.

00:50:05.480 --> 00:50:08.630
One thing I don't think I've
heard you mention is what is

00:50:08.630 --> 00:50:10.745
the view generation in Dart?

00:50:10.745 --> 00:50:12.640
SETH LADD: Very astute.

00:50:12.640 --> 00:50:15.750
The reason I did not talk about
that is because that is

00:50:15.750 --> 00:50:16.560
still being worked on.

00:50:16.560 --> 00:50:18.730
That's like even more technology
preview than what

00:50:18.730 --> 00:50:22.860
we have. And I'm personally,
really excited for that.

00:50:22.860 --> 00:50:25.711
I can tell a little bit about
the philosophy, in 30 seconds,

00:50:25.711 --> 00:50:26.152
like what we think.

00:50:26.152 --> 00:50:28.360
If that would be helpful.

00:50:28.360 --> 00:50:31.970
We do believe that we'll
ship a UI app stack

00:50:31.970 --> 00:50:32.870
library with Dart.

00:50:32.870 --> 00:50:35.500
It'll be another library you
get along with them.

00:50:35.500 --> 00:50:38.070
And it's going to operate on
the assumptions of offline

00:50:38.070 --> 00:50:38.395
first.

00:50:38.395 --> 00:50:40.790
It's going to operate on the
assumption that the view

00:50:40.790 --> 00:50:42.240
creation happens in a client.

00:50:42.240 --> 00:50:44.570
It's going to operate on the
assumption of data mining,

00:50:44.570 --> 00:50:46.580
observables, events.

00:50:46.580 --> 00:50:49.690
It's going to very much give you
a [UNINTELLIGIBLE] modern

00:50:49.690 --> 00:50:51.120
client-side app stack.

00:50:51.120 --> 00:50:54.870
But it will give you those
pieces like observables, and

00:50:54.870 --> 00:50:57.270
views, themes, and those
sort of things.

00:50:57.270 --> 00:51:01.420
AUDIENCE: Are we talking about a
DOM element generation in an

00:51:01.420 --> 00:51:06.030
accessible form, or is this Dart
takes over all of your

00:51:06.030 --> 00:51:08.650
new styling, your CSS is lost?

00:51:08.650 --> 00:51:10.500
SETH LADD: So nothing
takes over anything.

00:51:10.500 --> 00:51:13.550
The question was, for the video,
are we talking about

00:51:13.550 --> 00:51:15.410
accessible DOM creation
and manipulation?

00:51:15.410 --> 00:51:18.340
Or are we talking about Dart
taking over the whole thing?

00:51:18.340 --> 00:51:18.700
Is that fair?

00:51:18.700 --> 00:51:21.710
AUDIENCE: Right, or at least the
components it generates.

00:51:21.710 --> 00:51:24.370
Do you have any hope of styling
them or interacting

00:51:24.370 --> 00:51:26.506
with them to then fix their
own JavaScript?

00:51:26.506 --> 00:51:29.260
SETH LADD: Yeah, for
the recording.

00:51:29.260 --> 00:51:32.768
It was, do we have any hope to
interact with those external

00:51:32.768 --> 00:51:34.640
JavaScripts?

00:51:34.640 --> 00:51:37.322
So nothing we're going to
provide is going to force you

00:51:37.322 --> 00:51:37.940
into anything.

00:51:37.940 --> 00:51:39.060
That's for sure.

00:51:39.060 --> 00:51:42.210
It's definitely going to have an
opinion, but I don't think

00:51:42.210 --> 00:51:44.550
it's even possible for us to
be like, you can never ever

00:51:44.550 --> 00:51:45.080
touch this again.

00:51:45.080 --> 00:51:46.920
You can always just walk the DOM
through your JavaScript.

00:51:46.920 --> 00:51:47.540
AUDIENCE: Sure.

00:51:47.540 --> 00:51:47.940
Just like, yeah.

00:51:47.940 --> 00:51:48.986
It may not be a good idea.

00:51:48.986 --> 00:51:50.170
SETH LADD: Right.

00:51:50.170 --> 00:51:53.050
So one of the things that we've
been playing with is a

00:51:53.050 --> 00:51:54.300
template system.

00:51:54.300 --> 00:51:57.120
That you write a snippet of
HTML, and it has Mustache like

00:51:57.120 --> 00:51:58.370
things in it.

00:51:58.370 --> 00:52:00.980
But that, you actually compile
that to Dart code.

00:52:00.980 --> 00:52:03.760
And it takes all your HTML
elements and actually generate

00:52:03.760 --> 00:52:04.895
the code, like you saw before.

00:52:04.895 --> 00:52:07.440
It'll create the elements
for you.

00:52:07.440 --> 00:52:09.400
So it actually parses
the HTML.

00:52:09.400 --> 00:52:11.980
That's statically generated
for you.

00:52:11.980 --> 00:52:13.820
So then you can use
those as snippets.

00:52:13.820 --> 00:52:15.880
And you can actually get
handles to each of the

00:52:15.880 --> 00:52:17.270
elements via IDs.

00:52:17.270 --> 00:52:19.475
So the template system
will do this for you.

00:52:19.475 --> 00:52:22.460
In other words, we're moving
in a direction away from

00:52:22.460 --> 00:52:25.746
string manipulation on the
client, to nodes and element

00:52:25.746 --> 00:52:26.102
manipulation.

00:52:26.102 --> 00:52:28.790
So that's kind of philosophy
number one.

00:52:28.790 --> 00:52:31.830
Philosophy number 2 is, this is
something the web component

00:52:31.830 --> 00:52:33.640
spec is doing for us.

00:52:33.640 --> 00:52:36.700
Which is it's going to
utilize what area

00:52:36.700 --> 00:52:38.590
called scope style sheets.

00:52:38.590 --> 00:52:39.940
Scope style sheets are
really awesome.

00:52:39.940 --> 00:52:41.550
You can say, I'm going to buy
these styles, for just this

00:52:41.550 --> 00:52:43.060
node and all its
children nodes.

00:52:43.060 --> 00:52:45.830
This then allows you to actually
create components,

00:52:45.830 --> 00:52:47.645
which is something the
web actually lacks.

00:52:47.645 --> 00:52:50.090
It's just crazy when
you think about it.

00:52:50.090 --> 00:52:52.090
So Dart is going is to play off
of this theme, as well.

00:52:52.090 --> 00:52:54.150
And so when you create these
templates, you're going to be

00:52:54.150 --> 00:52:57.000
able to also specify the CSS
that goes with that block.

00:52:57.000 --> 00:53:00.115
And we will go through, parse
the CSS, monitor all the class

00:53:00.115 --> 00:53:01.720
names, and the names
are reimported.

00:53:01.720 --> 00:53:04.860
So you can ship this template
as an actual widget or

00:53:04.860 --> 00:53:07.740
component and have confidence
that it doesn't mess with

00:53:07.740 --> 00:53:10.330
anything else.

00:53:10.330 --> 00:53:13.430
So if you were relying on a
particular class name in

00:53:13.430 --> 00:53:15.720
outside, in this particular
library, it

00:53:15.720 --> 00:53:17.000
might be a little difficult.

00:53:17.000 --> 00:53:21.710
But we don't think that using
JavaScript to manipulate class

00:53:21.710 --> 00:53:22.860
names is the way to do it.

00:53:22.860 --> 00:53:26.620
We think you should actually
write Dart code and manipulate

00:53:26.620 --> 00:53:30.690
via calls in your app stack, and
have that manifest itself

00:53:30.690 --> 00:53:33.340
out, underlying through the
themes and the skins layers to

00:53:33.340 --> 00:53:35.710
manipulate CSS.

00:53:35.710 --> 00:53:38.970
So in other words, we can code
as grants or [UNINTELLIGIBLE]

00:53:38.970 --> 00:53:40.924
direct manipulation of
the attributes at

00:53:40.924 --> 00:53:41.875
the application layer.

00:53:41.875 --> 00:53:43.920
AUDIENCE: Sure, but I think what
I'm hearing is, it would

00:53:43.920 --> 00:53:46.945
be hard for them to have global
style sheets that apply

00:53:46.945 --> 00:53:50.074
to DOM elements with
known classes

00:53:50.074 --> 00:53:51.050
generated through Dart.

00:53:51.050 --> 00:53:52.610
SETH LADD: So what I'm
talking about is

00:53:52.610 --> 00:53:54.590
just a template engine.

00:53:54.590 --> 00:53:56.350
There's other work going on.

00:53:56.350 --> 00:53:58.120
And this is why we had
to shift head.

00:53:58.120 --> 00:54:00.370
And so we then don't improve
these theories out, that

00:54:00.370 --> 00:54:03.960
[UNINTELLIGIBLE] with the
constant themes and styles.

00:54:03.960 --> 00:54:05.480
Again, we're not exactly
sure what format

00:54:05.480 --> 00:54:06.170
it's going to take.

00:54:06.170 --> 00:54:08.810
But that might help manage
the styles for you.

00:54:08.810 --> 00:54:11.443
Of course, you can always insert
a style tag up at the

00:54:11.443 --> 00:54:14.970
top, and doing the cascade
stuff might happen.

00:54:14.970 --> 00:54:18.850
But we're experimenting with
the a route where you would

00:54:18.850 --> 00:54:24.620
treat us like a a modern on
other platforms. So do it

00:54:24.620 --> 00:54:27.020
through the libraries and APIs
that have interfaces or

00:54:27.020 --> 00:54:29.950
abstraction provided by the
platform, not direct

00:54:29.950 --> 00:54:33.410
manipulation of attributes
in CSS files.

00:54:33.410 --> 00:54:35.440
But this stuff is even
more preview.

00:54:35.440 --> 00:54:37.440
So this is just what
we're thinking of.

00:54:37.440 --> 00:54:41.590
And we're trying to prove it on
out and see what happens.

00:54:41.590 --> 00:54:43.110
We should follow
up all clients.

00:54:43.110 --> 00:54:45.090
I think, you're trying to go
some-- like, I want to

00:54:45.090 --> 00:54:46.000
accomplish x.

00:54:46.000 --> 00:54:47.050
I'm not fully understanding.

00:54:47.050 --> 00:54:48.600
So I'm not answering your
question great.

00:54:48.600 --> 00:54:50.260
But I want to learn a little
more about what that thing is

00:54:50.260 --> 00:54:51.705
that you want enabled to do.

00:54:51.705 --> 00:54:54.960
AUDIENCE: What about testing
support [? factory, ?]

00:54:54.960 --> 00:54:56.870
into terms of the tools and
in terms of the libraries?

00:54:56.870 --> 00:54:59.310
SETH LADD: The question
was about testing.

00:54:59.310 --> 00:55:02.620
Just last week, I think it
was, we put the unit test

00:55:02.620 --> 00:55:04.320
library into the SDK.

00:55:04.320 --> 00:55:05.590
There's a couple
[? on ?] this.

00:55:05.590 --> 00:55:06.835
There are like three floating
around there.

00:55:06.835 --> 00:55:10.170
And we're kind of like, yeah,
let's pick one, put it in.

00:55:10.170 --> 00:55:12.840
And I know of another third
party testing environment too,

00:55:12.840 --> 00:55:13.703
which is really cool.

00:55:13.703 --> 00:55:16.140
It's so exciting to see
some choice there.

00:55:16.140 --> 00:55:17.560
It's still early days.

00:55:17.560 --> 00:55:20.810
In the core library, there is an
expects class with a set of

00:55:20.810 --> 00:55:23.560
functions, pretty
low-level stuff.

00:55:23.560 --> 00:55:25.560
But then you still need to wrap
that, like [? a U test ?]

00:55:25.560 --> 00:55:25.810
framer.

00:55:25.810 --> 00:55:26.740
That's the one we
just shipped.

00:55:26.740 --> 00:55:29.380
But it's really early
for that too.

00:55:29.380 --> 00:55:32.125
It takes cues from the
Jasmine and RSpec.

00:55:32.125 --> 00:55:33.635
So if you're familiar
with those, this

00:55:33.635 --> 00:55:36.340
should look fairly familiar.

00:55:36.340 --> 00:55:39.090
But what we haven't shipped--

00:55:39.090 --> 00:55:40.150
we stopped there.

00:55:40.150 --> 00:55:42.010
It would be interesting to see
what else we or community

00:55:42.010 --> 00:55:45.240
could do around browser
level testing.

00:55:45.240 --> 00:55:48.235
So we have this buildbot guy,
that's running all these tests

00:55:48.235 --> 00:55:50.610
on all the browsers, checking
out performance and

00:55:50.610 --> 00:55:52.770
conformance.

00:55:52.770 --> 00:55:56.560
We may see like, can we expose
that more or encourage

00:55:56.560 --> 00:55:57.555
community [? building ?]

00:55:57.555 --> 00:56:00.470
[UNINTELLIGIBLE].

00:56:00.470 --> 00:56:02.815
It's turns out that there's this
tool from the Chromium

00:56:02.815 --> 00:56:05.430
project called dump render tree,
which is basically a

00:56:05.430 --> 00:56:06.510
headless Chrome.

00:56:06.510 --> 00:56:10.915
Which is really awesome
for testing, actually.

00:56:10.915 --> 00:56:13.260
So, actually, nearly no
one knows about it.

00:56:13.260 --> 00:56:16.820
And it would be cool if other
people keyed in on it.

00:56:16.820 --> 00:56:17.260
[UNINTELLIGIBLE]

00:56:17.260 --> 00:56:19.220
you guys, what's better than
running your app in the

00:56:19.220 --> 00:56:20.640
browser it's pointing to.

00:56:20.640 --> 00:56:24.010
And the real live thing, and
not emulated at all.

00:56:24.010 --> 00:56:25.130
But it's some
[? script for me. ?].

00:56:25.130 --> 00:56:27.410
AUDIENCE: Well, some of the
tools that I use in my LAN

00:56:27.410 --> 00:56:28.706
layer, I use a headless
webcam.

00:56:28.706 --> 00:56:33.292
Either for JavaScript speed
tests or for functional tests.

00:56:33.292 --> 00:56:34.642
SETH LADD: So you guys are going
in the right direction.

00:56:34.642 --> 00:56:35.830
AUDIENCE: What's this?

00:56:35.830 --> 00:56:36.555
SETH LADD: Sorry.

00:56:36.555 --> 00:56:37.710
AUDIENCE: Can you talk a
little bit about the

00:56:37.710 --> 00:56:41.460
philosophy of Erlang,
in terms of, I know

00:56:41.460 --> 00:56:42.130
there's like futures?

00:56:42.130 --> 00:56:42.740
Like [? how ?]

00:56:42.740 --> 00:56:44.790
[? kind of ?] errors get
bubbled up through?

00:56:44.790 --> 00:56:45.510
SETH LADD: Sure.

00:56:45.510 --> 00:56:49.290
So that's specific to
just the futures.

00:56:49.290 --> 00:56:50.720
I guess I can go
to the library.

00:56:57.230 --> 00:56:57.700
I'm sorry.

00:56:57.700 --> 00:56:59.980
Are you familiar with like
offsets or defers or

00:56:59.980 --> 00:57:00.600
something like that?

00:57:00.600 --> 00:57:01.850
[UNINTELLIGIBLE]

00:57:04.140 --> 00:57:05.728
So I have something
to talk to here.

00:57:09.440 --> 00:57:12.560
Actually, this might not
give you what you want.

00:57:12.560 --> 00:57:14.810
Well.

00:57:14.810 --> 00:57:17.210
So for those of you who don't
know, futures are what-- it's

00:57:17.210 --> 00:57:19.030
a way for you to return a token
for something that will

00:57:19.030 --> 00:57:20.380
happen in the future.

00:57:20.380 --> 00:57:23.220
And allowing your immediate
client code to say, OK, when

00:57:23.220 --> 00:57:25.290
you get a response,
do this thing.

00:57:25.290 --> 00:57:28.040
To me, it sanitizes the
call back heavy code.

00:57:28.040 --> 00:57:30.060
And I like futures a lot more.

00:57:30.060 --> 00:57:31.700
Especially when you have
a chain method.

00:57:31.700 --> 00:57:34.470
You can turn what would have
been just like deeply nested

00:57:34.470 --> 00:57:37.070
or deeply spaghettified call
back in those into what

00:57:37.070 --> 00:57:39.900
appears to be layer code.

00:57:39.900 --> 00:57:42.980
But then, at the end, you can
have a halo exception method.

00:57:42.980 --> 00:57:45.930
So in the specific case of
futures, if an exception is

00:57:45.930 --> 00:57:49.370
throw inside one of
the actually--

00:57:49.370 --> 00:57:53.272
it's under the logic, your
future, you can subscribe it

00:57:53.272 --> 00:57:56.980
down into here.

00:57:56.980 --> 00:57:58.050
Does that answer.

00:57:58.050 --> 00:57:58.770
AUDIENCE: Yeah.

00:57:58.770 --> 00:58:00.350
SETH LADD: So the exceptions
will bottle up, just like the

00:58:00.350 --> 00:58:04.390
actual results, which in the
future, the result bubbles up.

00:58:04.390 --> 00:58:08.350
And for instance that there.

00:58:08.350 --> 00:58:11.155
[? Our ?] futures are cool.

00:58:11.155 --> 00:58:13.140
AUDIENCE: I have a question.

00:58:13.140 --> 00:58:16.730
It's kind of a broad one,
so preface it with that.

00:58:16.730 --> 00:58:21.380
It seems like Dart would have
been better off not having to

00:58:21.380 --> 00:58:23.970
be compiled down to JavaScript,
like if you had a

00:58:23.970 --> 00:58:26.070
genuinely clean slate.

00:58:26.070 --> 00:58:29.280
I understand why you would
want to though, from an

00:58:29.280 --> 00:58:30.540
adoption stand point.

00:58:30.540 --> 00:58:31.245
SETH LADD: Yes.

00:58:31.245 --> 00:58:33.546
MALE SPEAKER: I'm not sure
what my question is.

00:58:37.250 --> 00:58:39.590
It seems like the goal would
be, if this is successful,

00:58:39.590 --> 00:58:43.000
really, for every browser to be
able to be opened directly

00:58:43.000 --> 00:58:44.680
without that.

00:58:44.680 --> 00:58:46.090
I'm hearing it's not fun.

00:58:46.090 --> 00:58:48.420
SETH LADD: I don't know how much
we'll cut into the video,

00:58:48.420 --> 00:58:49.225
so I'll just repeat it.

00:58:49.225 --> 00:58:54.315
You're point it,
same click it.

00:58:54.315 --> 00:58:59.210
AUDIENCE: How held back do think
Dart is by the fact that

00:58:59.210 --> 00:59:02.524
it, initially, has to compile
down to JavaScript?

00:59:02.524 --> 00:59:06.195
SETH LADD: How held back do we
think Dart is due to the fact

00:59:06.195 --> 00:59:08.680
that it has to compile
to JavaScript?

00:59:08.680 --> 00:59:09.360
I don't know.

00:59:09.360 --> 00:59:14.120
But I think that option is
totally off the table.

00:59:14.120 --> 00:59:15.590
Chrome loves the web.

00:59:15.590 --> 00:59:17.300
We love the web that do this.

00:59:17.300 --> 00:59:20.892
We're all web engineers and want
to see the web succeed.

00:59:20.892 --> 00:59:23.170
And we have to be
very pragmatic.

00:59:23.170 --> 00:59:25.520
It has to compile to
modern JavaScipt.

00:59:25.520 --> 00:59:26.650
Now we do draw a line.

00:59:26.650 --> 00:59:29.360
We do draw a line that says,
legacy browsers with older

00:59:29.360 --> 00:59:31.920
implementations of JavaScript
are really slow performance

00:59:31.920 --> 00:59:33.550
and aren't interesting to us.

00:59:33.550 --> 00:59:38.200
We're online for IE,
IE9, right now.

00:59:38.200 --> 00:59:41.970
But again, it does include
Chrome for Android, Mobile

00:59:41.970 --> 00:59:44.610
Safari, Safari 5.1, Firefox.

00:59:44.610 --> 00:59:47.460
Basically, M minus one for us.

00:59:47.460 --> 00:59:51.150
Chrome N minus one
is out right now.

00:59:51.150 --> 00:59:55.270
Yeah, to get any adoption-- to
help web developers developing

00:59:55.270 --> 00:59:57.322
apps, we want to see
LAN on the web.

00:59:57.322 --> 01:00:01.100
It Has to be deploy to
the Brahman browser.

01:00:01.100 --> 01:00:03.610
And so it's just a core
tenet of Dart.

01:00:03.610 --> 01:00:06.640
Its things a fact a life.

01:00:06.640 --> 01:00:10.100
And I think that the team's done
some amazing things like

01:00:10.100 --> 01:00:14.210
with isolates, optional types,
the broad support for

01:00:14.210 --> 01:00:15.055
libraries here.

01:00:15.055 --> 01:00:17.290
And you still get in all this
composite JavaScript.

01:00:17.290 --> 01:00:18.340
I mean, that's pretty
impressive.

01:00:18.340 --> 01:00:21.350
So I think the developer will
still see a tremendous amount

01:00:21.350 --> 01:00:23.880
of productivity gains, once
this gets fleshed out and

01:00:23.880 --> 01:00:27.090
launches in like this
1.0 release.

01:00:29.700 --> 01:00:30.790
We're ready for anything.

01:00:30.790 --> 01:00:32.273
AUDIENCE: Copy script
is doing OK?

01:00:32.273 --> 01:00:33.650
SETH LADD: Yeah.

01:00:33.650 --> 01:00:35.484
MALE SPEAKER: Let's do one more
question, and then we'll

01:00:35.484 --> 01:00:36.660
wrap up [UNINTELLIGIBLE].

01:00:36.660 --> 01:00:37.780
AUDIENCE: I have a question.

01:00:37.780 --> 01:00:40.060
What is the status of work for
like more advanced browser

01:00:40.060 --> 01:00:44.682
API, like GL?

01:00:44.682 --> 01:00:46.830
SETH LADD: So the
question was--

01:00:46.830 --> 01:00:47.330
AUDIENCE: [? String or audio? ?]

01:00:47.330 --> 01:00:47.995
[? Web Workers? ?]

01:00:47.995 --> 01:00:52.640
SETH LADD: What's the safe
support for broad navigational

01:00:52.640 --> 01:00:55.650
applied family APIs?

01:00:55.650 --> 01:00:56.610
So we're pretty good.

01:00:56.610 --> 01:00:58.730
And if it's not there,
it's a button.

01:00:58.730 --> 01:01:01.720
So you can just scroll through
this thing, you'll see, here's

01:01:01.720 --> 01:01:04.480
the next [? EV ?].

01:01:04.480 --> 01:01:05.930
Down here, is Web GL.

01:01:05.930 --> 01:01:08.420
Here's Web SQL.

01:01:08.420 --> 01:01:09.120
Here's SVG.

01:01:09.120 --> 01:01:13.170
So it's our intent to expose all
the regulational [? buy ?]

01:01:13.170 --> 01:01:15.660
of APIs and features
with Dart, through

01:01:15.660 --> 01:01:18.654
the Dart HTML library.

01:01:18.654 --> 01:01:19.152
Absolutely.

01:01:19.152 --> 01:01:21.100
I mean, here's your
typed arrays.

01:01:21.100 --> 01:01:23.502
AUDIENCE: Are you set
on port 3js to--

01:01:23.502 --> 01:01:26.070
SETH LADD: We're not, but
luckily somebody already did.

01:01:26.070 --> 01:01:27.260
I should have put that
on my slide.

01:01:27.260 --> 01:01:28.155
That's another good one.

01:01:28.155 --> 01:01:29.830
Yeah, there's a 3 dot Dart.

01:01:33.670 --> 01:01:34.750
MALE SPEAKER: Thank you, Seth.

01:01:34.750 --> 01:01:36.000
SETH LADD: Thank you.

01:01:40.140 --> 01:01:42.610
I'll hang around for as long
as you guys have questions.

