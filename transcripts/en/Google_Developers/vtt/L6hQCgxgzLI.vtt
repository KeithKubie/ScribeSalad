WEBVTT
Kind: captions
Language: en

00:00:00.309 --> 00:00:02.600
WESLEY CHUN: Greetings, 18th
century American colonists

00:00:02.600 --> 00:00:04.310
and modern day
software developers.

00:00:04.310 --> 00:00:06.840
This is Wesley George
Washington Chun from Google.

00:00:06.840 --> 00:00:08.880
In this video, we're
going to demo the Gmail

00:00:08.880 --> 00:00:10.920
API with real code,
but we'll also

00:00:10.920 --> 00:00:12.950
discuss early America,
connecting you

00:00:12.950 --> 00:00:15.640
to past and present revolutions.

00:00:15.640 --> 00:00:17.220
When email was
invented, rules were

00:00:17.220 --> 00:00:18.860
needed to govern access to it.

00:00:18.860 --> 00:00:22.490
Protocols were used to send,
route, and receive email

00:00:22.490 --> 00:00:23.550
on the internet.

00:00:23.550 --> 00:00:25.660
Similarly, when the
United States was created,

00:00:25.660 --> 00:00:27.237
the founding
fathers had to craft

00:00:27.237 --> 00:00:28.820
rules for a new
government, calling it

00:00:28.820 --> 00:00:30.870
the Articles of Confederation.

00:00:30.870 --> 00:00:33.210
However, neither of those
articles nor email protocols

00:00:33.210 --> 00:00:35.418
were able to keep up with
the growth of a new country

00:00:35.418 --> 00:00:38.200
or advancements in email
features and usage.

00:00:38.200 --> 00:00:39.780
Let's start with email.

00:00:39.780 --> 00:00:41.630
With internet
protocols, developers

00:00:41.630 --> 00:00:44.710
work at the message level,
sending and downloading them,

00:00:44.710 --> 00:00:46.780
whether for a web or mobile app.

00:00:46.780 --> 00:00:48.310
The problem is that
email has grown

00:00:48.310 --> 00:00:49.990
in ways that no one thought of.

00:00:49.990 --> 00:00:53.190
Features such as drafts,
labels, and threads

00:00:53.190 --> 00:00:55.330
weren't even considered
back in the early days,

00:00:55.330 --> 00:00:57.240
but now have become
a crucial backbone

00:00:57.240 --> 00:00:58.790
to the email experience.

00:00:58.790 --> 00:01:01.340
Dealing only with messages
doesn't work anymore.

00:01:01.340 --> 00:01:04.230
So that's why we
created the Gmail API.

00:01:04.230 --> 00:01:07.870
Besides basic message management
and granular access control,

00:01:07.870 --> 00:01:11.780
the API can process drafts,
threads, labels, and folders,

00:01:11.780 --> 00:01:13.700
as well as perform
admin functionality,

00:01:13.700 --> 00:01:16.150
such as mass user migration
all without needing

00:01:16.150 --> 00:01:18.560
to write lower level
code such as raw sockets

00:01:18.560 --> 00:01:20.160
with internet protocols.

00:01:20.160 --> 00:01:24.430
Google users also expect search,
so the API has got that too.

00:01:24.430 --> 00:01:27.040
Check out the clip from
the Gmail API launch video

00:01:27.040 --> 00:01:30.280
to get an idea of what kind
of queries you can perform.

00:01:30.280 --> 00:01:30.780
All right.

00:01:30.780 --> 00:01:31.510
Enough talk.

00:01:31.510 --> 00:01:32.530
Time the code.

00:01:32.530 --> 00:01:35.180
We'll reuse the same
authorized API access code

00:01:35.180 --> 00:01:36.840
covered in an earlier episode.

00:01:36.840 --> 00:01:39.880
So check out that via over the
first link before continuing .

00:01:39.880 --> 00:01:42.240
If you're completely
new to Google APIs,

00:01:42.240 --> 00:01:43.810
you should review
the earlier episode

00:01:43.810 --> 00:01:45.270
found at the second link.

00:01:45.270 --> 00:01:47.580
We'll pause now to let you
catch up before coming back

00:01:47.580 --> 00:01:49.930
to join me here.

00:01:49.930 --> 00:01:50.870
All caught up?

00:01:50.870 --> 00:01:52.310
Great.

00:01:52.310 --> 00:01:54.750
Now let's say I wanted
to archive the busiest

00:01:54.750 --> 00:01:57.900
threads in my Gmail account
that subscribe to many mailing

00:01:57.900 --> 00:01:58.590
lists.

00:01:58.590 --> 00:02:01.510
I'm curious about which big
things happen to make everyone

00:02:01.510 --> 00:02:03.020
engage and reply.

00:02:03.020 --> 00:02:05.564
To kick off such a project,
let's create a simple command

00:02:05.564 --> 00:02:06.980
line script that
looks for threads

00:02:06.980 --> 00:02:08.630
with more than two
messages in them

00:02:08.630 --> 00:02:11.050
and displays the subject
line as well as the number

00:02:11.050 --> 00:02:12.930
of messages in those threads.

00:02:12.930 --> 00:02:13.600
Ready?

00:02:13.600 --> 00:02:14.650
Let's go to the computer.

00:02:17.730 --> 00:02:19.050
Ready to start coding?

00:02:19.050 --> 00:02:21.830
We'll do this demo in Python,
but the purpose of the code is

00:02:21.830 --> 00:02:25.210
not necessarily to target just
Python developers as the Google

00:02:25.210 --> 00:02:29.590
APIs client library is available
for Java, JavaScript, .NET,

00:02:29.590 --> 00:02:34.540
Objective C, PHP, Dart,
GO, Node.js, and Ruby.

00:02:34.540 --> 00:02:36.430
So regardless of which
language you use,

00:02:36.430 --> 00:02:38.470
the calls will be quite similar.

00:02:38.470 --> 00:02:40.360
Google's REST APIs
are web based,

00:02:40.360 --> 00:02:43.120
so they'll work with server
side apps including command line

00:02:43.120 --> 00:02:44.970
scripts like the one
we're building here.

00:02:44.970 --> 00:02:48.360
The calls for native mobile
libraries, such as for Android

00:02:48.360 --> 00:02:52.010
and iOS when available, will
also be named similarly.

00:02:52.010 --> 00:02:54.810
The bottom line is that if
you're not a Python server side

00:02:54.810 --> 00:02:58.870
dev, consider this as
pseudocode to help guide you.

00:02:58.870 --> 00:03:00.840
All right, so after
the standard Python

00:03:00.840 --> 00:03:03.290
imports on the first
few lines, on line five

00:03:03.290 --> 00:03:05.830
is the scope for
read-only access to Gmail.

00:03:05.830 --> 00:03:10.250
Yes, the API supports a variety
of specific granular access

00:03:10.250 --> 00:03:12.310
unlike internet email protocols.

00:03:12.310 --> 00:03:14.150
In this particular
demo, we're only

00:03:14.150 --> 00:03:18.400
going to look at threads so
read only is good enough.

00:03:18.400 --> 00:03:20.530
And the rest of the code
that you see below here

00:03:20.530 --> 00:03:24.300
is the standard common
authorized API access boiler

00:03:24.300 --> 00:03:26.790
plate that we covered
in an earlier episode.

00:03:26.790 --> 00:03:29.310
So go back and review
that video if you

00:03:29.310 --> 00:03:31.145
need to go over it again.

00:03:31.145 --> 00:03:34.440
On line 13, we have
something more specific.

00:03:34.440 --> 00:03:37.870
This is where we built the Gmail
service endpoint, by passing

00:03:37.870 --> 00:03:40.050
in Gmail, and the API
Ike version, which

00:03:40.050 --> 00:03:41.519
is B1 that you see there.

00:03:41.519 --> 00:03:43.060
And then on the next
line we're going

00:03:43.060 --> 00:03:47.804
to call users.thread.list
to get a user's threads.

00:03:47.804 --> 00:03:49.470
In particular, I want
to get my threads,

00:03:49.470 --> 00:03:51.770
so that's where you
see user ID is me.

00:03:51.770 --> 00:03:54.110
But if you want to do a
query, a specific query

00:03:54.110 --> 00:03:57.100
like all messages from a
particular user with a subject

00:03:57.100 --> 00:04:00.090
line or with a label,
that's where you enter it

00:04:00.090 --> 00:04:01.790
also on the same line here.

00:04:01.790 --> 00:04:04.290
But in this example, we're
just going to get all threads.

00:04:04.290 --> 00:04:06.360
So we're going to pull
this out right now.

00:04:06.360 --> 00:04:08.790
Once you're done, call execute.

00:04:08.790 --> 00:04:11.510
And then you get
back a JSON payload.

00:04:11.510 --> 00:04:13.800
It comes back as a
Python dictionary.

00:04:13.800 --> 00:04:15.740
The thing we care about
are all the threads.

00:04:15.740 --> 00:04:18.339
And that's given the
key threads here.

00:04:18.339 --> 00:04:20.589
For some reason, if you
don't have any threads,

00:04:20.589 --> 00:04:23.810
we're going to hedge our bets
and pass in an empty list

00:04:23.810 --> 00:04:26.550
just in case, because
on the next few lines,

00:04:26.550 --> 00:04:28.800
you can see we're going to
have a for loop that goes

00:04:28.800 --> 00:04:30.042
through every single thread.

00:04:30.042 --> 00:04:31.500
And what we're
going to do is we're

00:04:31.500 --> 00:04:33.980
going to look for all
threads have at least

00:04:33.980 --> 00:04:36.940
three messages in that thread.

00:04:36.940 --> 00:04:41.560
So we're going to call the Get
method with a specific thread

00:04:41.560 --> 00:04:42.132
ID.

00:04:42.132 --> 00:04:43.840
And what we're going
to do there is we're

00:04:43.840 --> 00:04:47.040
going to check hey, how many
messages are in this thread,

00:04:47.040 --> 00:04:48.640
because we really care about it.

00:04:48.640 --> 00:04:51.040
If you don't get enough,
we're going to dump ya.

00:04:51.040 --> 00:04:53.340
So line 17 makes
the call to Get.

00:04:53.340 --> 00:04:57.510
Line 18 grabs the count
of the number of messages.

00:04:57.510 --> 00:05:00.310
And then the next block of
code, as you can probably guess,

00:05:00.310 --> 00:05:03.240
is going to start with an
if statement that says, hey,

00:05:03.240 --> 00:05:05.490
if I don't have at
least three messages,

00:05:05.490 --> 00:05:06.580
I'm going to drop you.

00:05:06.580 --> 00:05:08.320
And that's on line 20.

00:05:08.320 --> 00:05:10.530
Once we know there's at
least three messages,

00:05:10.530 --> 00:05:14.330
we're going to go down into
the first message, which is

00:05:14.330 --> 00:05:16.700
at index zero we can see there.

00:05:16.700 --> 00:05:18.480
We're going to grab
its payload, and we're

00:05:18.480 --> 00:05:20.229
going to take a look
at the subject lines,

00:05:20.229 --> 00:05:22.160
because we only care
about messages that

00:05:22.160 --> 00:05:24.450
have subject lines in
them or threads that

00:05:24.450 --> 00:05:25.660
have subject lines in them.

00:05:25.660 --> 00:05:28.580
So we're just going to grab
it from the first message.

00:05:28.580 --> 00:05:30.884
So let's set our default
subject to empty first.

00:05:30.884 --> 00:05:32.300
And then what we're
going to do is

00:05:32.300 --> 00:05:34.258
we're going to cycle
through all of the headers

00:05:34.258 --> 00:05:36.610
in this message looking
for a subject line.

00:05:36.610 --> 00:05:40.590
And if there is one, save it
and break out of the loop.

00:05:40.590 --> 00:05:42.480
And then on the last
two lines of code,

00:05:42.480 --> 00:05:45.120
we're going to check, hey,
do I got a subject line?

00:05:45.120 --> 00:05:46.860
If so, print it.

00:05:46.860 --> 00:05:49.110
And also tell me how many
messages are in this thread,

00:05:49.110 --> 00:05:51.231
because that's
what we care about.

00:05:51.231 --> 00:05:51.730
All right.

00:05:51.730 --> 00:05:53.080
Looking good?

00:05:53.080 --> 00:05:53.870
Great.

00:05:53.870 --> 00:05:56.440
Let's give it a shot.

00:05:56.440 --> 00:05:56.940
All right.

00:05:56.940 --> 00:05:58.110
So here we go.

00:06:00.816 --> 00:06:02.510
It shouldn't take too long.

00:06:02.510 --> 00:06:04.580
As you can tell this
is the email address

00:06:04.580 --> 00:06:05.790
I use for a mailing list.

00:06:10.100 --> 00:06:11.194
And that's it.

00:06:11.194 --> 00:06:14.020
Isn't that awesome?

00:06:14.020 --> 00:06:14.520
Wow.

00:06:14.520 --> 00:06:16.160
The demo code
filtered out threads

00:06:16.160 --> 00:06:17.460
with fewer than three messages.

00:06:17.460 --> 00:06:20.420
You could easily change that
threshold to 50 or a 100

00:06:20.420 --> 00:06:22.900
should you be on very
busy mailing lists.

00:06:22.900 --> 00:06:25.420
But wasn't that
example nice and short?

00:06:25.420 --> 00:06:28.290
Before the Gmail API, I
had to write a lower level

00:06:28.290 --> 00:06:31.850
code, including raw TCP
sockets, logging into a server,

00:06:31.850 --> 00:06:35.100
and be intimately familiar with
talking to an email protocol

00:06:35.100 --> 00:06:37.200
by sending and
receiving strings.

00:06:37.200 --> 00:06:39.940
Using your favorite dev
tools and talking to an API

00:06:39.940 --> 00:06:42.860
is one way that we can better
adapt to developers needs

00:06:42.860 --> 00:06:44.300
today.

00:06:44.300 --> 00:06:46.190
To find out more
about the Gmail API,

00:06:46.190 --> 00:06:48.220
check out the docs
via the first link.

00:06:48.220 --> 00:06:51.180
If you're an email sender,
whether you use the API or not,

00:06:51.180 --> 00:06:52.990
strongly consider
embedding markup

00:06:52.990 --> 00:06:56.120
in your messages to provide
for a better user experience.

00:06:56.120 --> 00:06:58.270
The second link talks
more about that.

00:06:58.270 --> 00:07:00.290
Finally, you can
access other episodes

00:07:00.290 --> 00:07:03.570
in this and other series with
the links down at the bottom.

00:07:03.570 --> 00:07:05.360
This is Wesley Chun
from Google, and I'll

00:07:05.360 --> 00:07:07.030
see you next-- no wait.

00:07:07.030 --> 00:07:10.470
This is George Washington, and
I didn't finish my story yet.

00:07:10.470 --> 00:07:12.260
So the Articles of
Confederation didn't

00:07:12.260 --> 00:07:13.570
provide for what was needed?

00:07:13.570 --> 00:07:15.170
What was it replaced by?

00:07:15.170 --> 00:07:17.090
Well, Congress and
other key stakeholders

00:07:17.090 --> 00:07:21.380
were pretty hard to come up with
USA V2 called The Constitution.

00:07:21.380 --> 00:07:23.350
Now it may not look
like much, but trust me

00:07:23.350 --> 00:07:25.880
it's way better than
what we had before.

00:07:25.880 --> 00:07:28.890
V2 was launched in 1789 when
I was elected president.

00:07:28.890 --> 00:07:30.440
And the rest is history.

00:07:30.440 --> 00:07:31.100
But wait.

00:07:31.100 --> 00:07:33.070
There's one more thing.

00:07:33.070 --> 00:07:36.680
The war ended in 1781, but I
didn't get elected till 1789.

00:07:36.680 --> 00:07:39.490
So who led the country in
those eight years in between?

00:07:39.490 --> 00:07:40.990
Well, the Articles
of Confederation

00:07:40.990 --> 00:07:43.830
stipulated presidents
elected for one year terms.

00:07:43.830 --> 00:07:46.290
So the first president
was actually John Hanson.

00:07:46.290 --> 00:07:48.320
I even wrote a letter
congratulating him

00:07:48.320 --> 00:07:49.360
on his election.

00:07:49.360 --> 00:07:49.860
Yep.

00:07:49.860 --> 00:07:51.818
You can tell all your
friends that I'm actually

00:07:51.818 --> 00:07:53.340
the nice president.

00:07:53.340 --> 00:07:55.240
But since the
Constitution became

00:07:55.240 --> 00:07:57.760
the current legitimate
form of our government,

00:07:57.760 --> 00:08:00.170
got to dish out the tough
love to my compatriot.

00:08:00.170 --> 00:08:01.790
Sorry dude.

00:08:01.790 --> 00:08:03.370
Hope you learned
something today.

00:08:03.370 --> 00:08:05.890
Thanks for tuning in to this
episode where we introduced you

00:08:05.890 --> 00:08:08.340
to the next revolution in
programmatic email access

00:08:08.340 --> 00:08:10.950
as well as get a short
American history lesson.

00:08:10.950 --> 00:08:12.590
George and John are
now gone, but I'll

00:08:12.590 --> 00:08:16.120
see you on the next episode
of the "Launch Pad Online."

