WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.510
[MUSIC PLAYING]

00:00:09.510 --> 00:00:11.650
STEPHEN FLUIN: Good afternoon.

00:00:11.650 --> 00:00:14.430
My name is Stephen Fluin,
and I am a developer advocate

00:00:14.430 --> 00:00:17.130
on the Angular team at Google.

00:00:17.130 --> 00:00:19.080
Throughout my career,
I've been entranced

00:00:19.080 --> 00:00:21.030
by the power of tools.

00:00:21.030 --> 00:00:23.460
The right tools used
in the right way

00:00:23.460 --> 00:00:26.980
have the power to improve
our lives as developers,

00:00:26.980 --> 00:00:30.420
but also to increase
the quality of our work.

00:00:30.420 --> 00:00:32.430
Part of the reason
I joined Google

00:00:32.430 --> 00:00:35.340
was to help developers
find and adopt great tools

00:00:35.340 --> 00:00:37.860
from across the ecosystem.

00:00:37.860 --> 00:00:39.630
Over the past day
or so, we've heard

00:00:39.630 --> 00:00:42.777
a lot about progressive
web applications.

00:00:42.777 --> 00:00:45.110
Part of what we've heard has
been some of the great case

00:00:45.110 --> 00:00:47.150
studies about the
outcomes that we

00:00:47.150 --> 00:00:49.110
get from adopting
these technologies,

00:00:49.110 --> 00:00:51.050
and we've also heard
about some of the ways

00:00:51.050 --> 00:00:54.200
that these improve
the user experience.

00:00:54.200 --> 00:00:57.200
I want to peel back the onion
a little bit now of PWAs

00:00:57.200 --> 00:00:59.810
and get into a little bit
of the tooling, the ways

00:00:59.810 --> 00:01:02.210
that we build progressive
web applications and the way

00:01:02.210 --> 00:01:06.060
that tools can help us do that.

00:01:06.060 --> 00:01:08.470
I'm going to go through this
in basically four parts.

00:01:08.470 --> 00:01:10.845
First, I'm going to start off
with a introduction to kind

00:01:10.845 --> 00:01:13.882
of the state of progressive
web apps as they are today.

00:01:13.882 --> 00:01:15.840
Then we're going to go
ahead and dive into some

00:01:15.840 --> 00:01:17.182
of the goals of the tools.

00:01:17.182 --> 00:01:18.390
Why do we build these things?

00:01:18.390 --> 00:01:21.240
What are the philosophies
behind these tools?

00:01:21.240 --> 00:01:23.439
Then we'll talk about
single page applications

00:01:23.439 --> 00:01:25.230
and the libraries and
frameworks that exist

00:01:25.230 --> 00:01:27.960
today to use these things.

00:01:27.960 --> 00:01:30.120
Then we'll end with
some best practices

00:01:30.120 --> 00:01:32.605
that you can take back with
you as you start adopting some

00:01:32.605 --> 00:01:34.980
of these tools, and as you
look at adding progressive web

00:01:34.980 --> 00:01:39.360
applications to your workflow.

00:01:39.360 --> 00:01:41.330
So let's start by looking
at the state of PWA

00:01:41.330 --> 00:01:45.710
tooling as it is right
now in September of 2017.

00:01:45.710 --> 00:01:48.500
We're all chasing after
the perfect progressive web

00:01:48.500 --> 00:01:50.390
application, but
a lot of us come

00:01:50.390 --> 00:01:52.010
from very different journeys.

00:01:52.010 --> 00:01:54.440
Some of us already have
large applications.

00:01:54.440 --> 00:01:55.970
Some of us have
Greenfield projects

00:01:55.970 --> 00:01:58.680
where we can experiment
and try new things.

00:01:58.680 --> 00:02:00.980
But when we talk about the
perfect progressive web app,

00:02:00.980 --> 00:02:03.740
I like to think that we're
talking about three things.

00:02:03.740 --> 00:02:06.180
We're talking about building
applications that are fast,

00:02:06.180 --> 00:02:08.699
reliable, and engaging.

00:02:08.699 --> 00:02:11.240
And when we combine this with
thinking about the tooling that

00:02:11.240 --> 00:02:13.130
exists for us as
developers, we're

00:02:13.130 --> 00:02:15.620
really looking at how do
we get the best developer

00:02:15.620 --> 00:02:19.490
experience for providing our
users the best experience,

00:02:19.490 --> 00:02:22.700
the best DX for the best UX.

00:02:22.700 --> 00:02:24.620
So what can tooling
do to help us with all

00:02:24.620 --> 00:02:26.570
of these different problems?

00:02:26.570 --> 00:02:29.180
Well, when we talk
about our users,

00:02:29.180 --> 00:02:31.700
their time is very,
very important.

00:02:31.700 --> 00:02:34.580
As we've heard many times
throughout the conference,

00:02:34.580 --> 00:02:37.136
even seconds or
milliseconds of time

00:02:37.136 --> 00:02:39.260
that you make your users
wait for your application,

00:02:39.260 --> 00:02:41.090
or for a piece of
the functionality,

00:02:41.090 --> 00:02:44.060
can cost your business money.

00:02:44.060 --> 00:02:47.840
It can lose you
conversions every time.

00:02:47.840 --> 00:02:50.600
We also talk about bandwidth.

00:02:50.600 --> 00:02:54.140
In many cases, and in
many user environments,

00:02:54.140 --> 00:02:56.690
the amount of bandwidth
that your application takes

00:02:56.690 --> 00:02:58.850
is a direct decision
factor in terms of

00:02:58.850 --> 00:03:02.040
whether or not they're going
to use your product or service.

00:03:02.040 --> 00:03:05.100
Additionally, tools can do
some very interesting things.

00:03:05.100 --> 00:03:07.514
By giving a tool an
understanding of the browsers

00:03:07.514 --> 00:03:09.680
that you're looking to
target, and by combining that

00:03:09.680 --> 00:03:11.810
with an understanding
of what tool or browser

00:03:11.810 --> 00:03:14.630
the user is using to
access your application,

00:03:14.630 --> 00:03:18.870
we can send down just the
right code at the right time.

00:03:18.870 --> 00:03:21.780
Additionally, push notifications
are a really great way

00:03:21.780 --> 00:03:24.020
of building
engagement with PWAs,

00:03:24.020 --> 00:03:26.060
and tooling can help us
understand these things

00:03:26.060 --> 00:03:28.130
a little bit better.

00:03:28.130 --> 00:03:30.260
As developers, a lot
of the time we're

00:03:30.260 --> 00:03:32.650
writing code and
maintaining code.

00:03:32.650 --> 00:03:35.870
And so using PWAs to
generate code for us,

00:03:35.870 --> 00:03:38.660
or using tools to
generate code for PWAs,

00:03:38.660 --> 00:03:41.630
can be a huge impact
for our lives.

00:03:41.630 --> 00:03:43.880
And lastly, tools
really focus on allowing

00:03:43.880 --> 00:03:45.740
us to take advantage
of best practices

00:03:45.740 --> 00:03:47.750
by giving us a deep
understanding using tools

00:03:47.750 --> 00:03:51.406
like Lighthouse that expose,
from across the industry,

00:03:51.406 --> 00:03:53.780
the best practices that have
been collected by the Chrome

00:03:53.780 --> 00:03:55.430
team.

00:03:55.430 --> 00:03:57.380
Some of the
technology behind PWAs

00:03:57.380 --> 00:03:59.930
include the web app manifest,
which we'll talk a little bit

00:03:59.930 --> 00:04:03.495
about, the service worker,
which I'll talk a lot about.

00:04:03.495 --> 00:04:05.120
But a lot of this is
going to come down

00:04:05.120 --> 00:04:07.280
to you building
great applications.

00:04:07.280 --> 00:04:10.460
Tools can only do so much
to help you advance and take

00:04:10.460 --> 00:04:12.950
advantage of the latest
and greatest capabilities

00:04:12.950 --> 00:04:14.960
of the browser,
but you still need

00:04:14.960 --> 00:04:16.470
to be thinking about
your use cases.

00:04:16.470 --> 00:04:19.670
You still need to be
worrying about your users.

00:04:19.670 --> 00:04:22.820
So let's talk a little bit about
the web application manifest.

00:04:22.820 --> 00:04:25.640
The web app manifest is
really designed to try and let

00:04:25.640 --> 00:04:28.100
both browsers and
the web at large

00:04:28.100 --> 00:04:30.290
know about your application.

00:04:30.290 --> 00:04:32.030
We're really trying
to elevate the code

00:04:32.030 --> 00:04:33.960
that we write from
a single page that's

00:04:33.960 --> 00:04:36.770
going to be served at a single
time, or a set of JavaScript

00:04:36.770 --> 00:04:40.062
and HTML, into the concept
of a collective application

00:04:40.062 --> 00:04:41.270
that we know something about.

00:04:41.270 --> 00:04:42.050
It has themes.

00:04:42.050 --> 00:04:42.980
It's got icons.

00:04:42.980 --> 00:04:44.670
It's got a starting place.

00:04:44.670 --> 00:04:46.940
We can tell the
browser of the device

00:04:46.940 --> 00:04:48.830
how it should be
accessing our site

00:04:48.830 --> 00:04:51.860
and how we should be
presenting it to the user.

00:04:51.860 --> 00:04:54.590
Some tools can do things
like default generation.

00:04:54.590 --> 00:04:58.250
They can give us a manifest that
we can then easily configure.

00:04:58.250 --> 00:04:59.960
Other tools will
actually guide you

00:04:59.960 --> 00:05:03.970
through the entire process
of making decisions.

00:05:03.970 --> 00:05:07.990
Service workers are the
underlying API in browsers

00:05:07.990 --> 00:05:10.180
that give us these kind
of modern superpowers

00:05:10.180 --> 00:05:12.400
for building progressive
web applications.

00:05:12.400 --> 00:05:14.230
By adding a service
worker to my app,

00:05:14.230 --> 00:05:16.600
I can do a lot of
very cool things.

00:05:16.600 --> 00:05:19.930
I can proxy and intercept
all of the HTTP requests

00:05:19.930 --> 00:05:22.000
that my application makes.

00:05:22.000 --> 00:05:24.340
By doing that, I can
decide when and where

00:05:24.340 --> 00:05:27.280
I want to be serving from the
internet, from a local cache,

00:05:27.280 --> 00:05:28.930
or maybe even some
generated content

00:05:28.930 --> 00:05:31.090
that I'm storing within
my service worker.

00:05:31.090 --> 00:05:33.610
But service workers have a
relatively complex life cycle.

00:05:33.610 --> 00:05:36.160
And as we think about
things like caching,

00:05:36.160 --> 00:05:38.650
each of these things can be
done at any of these stages,

00:05:38.650 --> 00:05:41.350
whether it's when the
user first visits the page

00:05:41.350 --> 00:05:43.810
and we're still rendering
from their HTML,

00:05:43.810 --> 00:05:45.770
after the service
worker's been installed

00:05:45.770 --> 00:05:47.770
and were given a chance
to actually go and cache

00:05:47.770 --> 00:05:50.366
these things, or even
later, maybe when

00:05:50.366 --> 00:05:52.240
a user is visiting a
page for the second time

00:05:52.240 --> 00:05:53.680
or the third time.

00:05:53.680 --> 00:05:57.220
We can make decisions at each of
these points of the lifecycle,

00:05:57.220 --> 00:06:00.710
but tools can help us
make those decisions.

00:06:00.710 --> 00:06:04.810
So let's talk about one specific
case, which is file caching.

00:06:04.810 --> 00:06:06.900
As a developer, we
can decide, hey, I

00:06:06.900 --> 00:06:09.580
want to cache all of the
assets from my application,

00:06:09.580 --> 00:06:12.130
maybe as part of the
installation process,

00:06:12.130 --> 00:06:14.210
because it's so
important to my app.

00:06:14.210 --> 00:06:17.920
Or maybe I see caching as a
nice to have for my application,

00:06:17.920 --> 00:06:20.890
and I want to install
after the application has

00:06:20.890 --> 00:06:23.020
installed my service worker.

00:06:23.020 --> 00:06:25.390
This can be helpful by taking
some of the work that's

00:06:25.390 --> 00:06:27.550
being done by the browser
out of the critical path

00:06:27.550 --> 00:06:31.000
for rendering, giving
users a great experience.

00:06:31.000 --> 00:06:33.310
We can also do things
like runtime caching

00:06:33.310 --> 00:06:35.350
because we don't always
know all of the data

00:06:35.350 --> 00:06:38.260
our application is going
to need when we write it.

00:06:38.260 --> 00:06:40.900
A lot of data is coming
from servers and back ends,

00:06:40.900 --> 00:06:42.910
and as the user
accesses them, we

00:06:42.910 --> 00:06:45.430
can decide, hey, I'd like
to cache these things

00:06:45.430 --> 00:06:47.262
so that if my user
does go offline,

00:06:47.262 --> 00:06:48.970
they're able to access
all of the content

00:06:48.970 --> 00:06:51.580
that they've previously seen.

00:06:51.580 --> 00:06:54.310
Finally, there's also
advanced caching strategies,

00:06:54.310 --> 00:06:58.300
because by combining our
knowledge of our applications

00:06:58.300 --> 00:07:00.890
with our tools
knowledge of the user,

00:07:00.890 --> 00:07:04.150
we can actually do far more
advanced things that really

00:07:04.150 --> 00:07:07.480
drive great user experiences.

00:07:07.480 --> 00:07:08.860
Another technology
that we really

00:07:08.860 --> 00:07:12.140
want our tools to help us
with is push notifications

00:07:12.140 --> 00:07:14.740
because as developers,
there's a lot of work here

00:07:14.740 --> 00:07:17.050
that can be done if we want
to take advantage of it.

00:07:17.050 --> 00:07:19.270
And there's best practices
that the browsers

00:07:19.270 --> 00:07:20.717
are leaning towards.

00:07:20.717 --> 00:07:22.300
One of these best
practices is that we

00:07:22.300 --> 00:07:24.730
want different behaviors
for push notifications,

00:07:24.730 --> 00:07:26.620
whether we're using the
application actively

00:07:26.620 --> 00:07:30.130
on the device or whether the
service worker's being woken up

00:07:30.130 --> 00:07:31.900
behind the scenes
when the user is not

00:07:31.900 --> 00:07:33.159
interacting with our device.

00:07:33.159 --> 00:07:35.200
When the user is not
interacting with our device,

00:07:35.200 --> 00:07:36.970
we actually want to
show a notification.

00:07:36.970 --> 00:07:38.386
But there's some
additional things

00:07:38.386 --> 00:07:40.030
we can do if the
user is live and

00:07:40.030 --> 00:07:41.890
engaging with your application.

00:07:41.890 --> 00:07:47.100
These sorts of best practices
can be baked in via tooling.

00:07:47.100 --> 00:07:48.720
Another thing that
I care a lot about

00:07:48.720 --> 00:07:50.282
is code generation,
where we want

00:07:50.282 --> 00:07:51.990
to give you the code
that's going to help

00:07:51.990 --> 00:07:54.630
you get your work done faster.

00:07:54.630 --> 00:07:56.520
Good tools that do
good code generation

00:07:56.520 --> 00:07:58.470
are going to be fast
by default. They're

00:07:58.470 --> 00:08:01.710
going to be great by default.
And they can even do things

00:08:01.710 --> 00:08:04.170
like help you with your
build pipeline, so help

00:08:04.170 --> 00:08:08.340
you write code and ship that
great code to your users

00:08:08.340 --> 00:08:10.140
with all of the sorts
of metrics and things

00:08:10.140 --> 00:08:12.570
that you need to understand
how your users are going

00:08:12.570 --> 00:08:14.640
to consume your applications.

00:08:14.640 --> 00:08:17.460
I see code generation as
a very interesting idea

00:08:17.460 --> 00:08:20.640
because it combines this
ability to give a developer

00:08:20.640 --> 00:08:23.580
a great experience by
default without eliminating

00:08:23.580 --> 00:08:25.740
any of their
flexibility or control

00:08:25.740 --> 00:08:29.420
of what they actually
ship to users.

00:08:29.420 --> 00:08:32.724
So when we talk about PWAs,
there's a few different ways

00:08:32.724 --> 00:08:34.390
that Sam talked about
yesterday in terms

00:08:34.390 --> 00:08:37.419
of building them and adding
them to our existing workflow.

00:08:37.419 --> 00:08:39.190
He talked about, maybe
I'm going to write

00:08:39.190 --> 00:08:42.669
a new app from scratch,
taking advantage of PWAs.

00:08:42.669 --> 00:08:45.760
Maybe I'm going to rewrite
one feature of my application

00:08:45.760 --> 00:08:47.730
and take advantage
of PWAs fully.

00:08:47.730 --> 00:08:49.480
Or maybe I want to
look at it a little bit

00:08:49.480 --> 00:08:52.360
differently and
add one PWA feature

00:08:52.360 --> 00:08:54.070
to my entire application.

00:08:54.070 --> 00:08:55.570
Things are a little
bit simpler when

00:08:55.570 --> 00:08:58.660
we talk about both the generic
tools and the framework-

00:08:58.660 --> 00:09:01.570
and library-specific
tools because typically,

00:09:01.570 --> 00:09:04.720
as a developer, I'm targeting
that library or framework

00:09:04.720 --> 00:09:06.650
for my entire application.

00:09:06.650 --> 00:09:08.650
And because of this,
it's much easier for us

00:09:08.650 --> 00:09:11.560
to take the best of PWA
and apply it holistically

00:09:11.560 --> 00:09:13.960
to an application
all at one time.

00:09:13.960 --> 00:09:16.060
But it's still possible
to take advantage

00:09:16.060 --> 00:09:19.030
of some of these tools and
build a fully custom service

00:09:19.030 --> 00:09:23.290
worker or PWA implementation
that follows my business needs

00:09:23.290 --> 00:09:25.960
and the needs of my users.

00:09:25.960 --> 00:09:28.000
One of the really
fantastic tools

00:09:28.000 --> 00:09:29.860
is Chrome and the
developer tools

00:09:29.860 --> 00:09:31.640
that we've been
building into them.

00:09:31.640 --> 00:09:33.640
I'm going to come back
to this a couple of times

00:09:33.640 --> 00:09:36.880
because the Application
tab in the developer tools

00:09:36.880 --> 00:09:39.040
is one of your best
assets for understanding

00:09:39.040 --> 00:09:41.800
what's going on when it
comes to building a PWA.

00:09:41.800 --> 00:09:44.494
It's there that you can bypass
the service worker for network

00:09:44.494 --> 00:09:45.910
calls so that you
make sure you're

00:09:45.910 --> 00:09:47.500
getting the most fresh data.

00:09:47.500 --> 00:09:49.509
You can understand
the lifecycle.

00:09:49.509 --> 00:09:51.550
Is there a service worker
that's pending install?

00:09:51.550 --> 00:09:53.350
Is there one that's
already been installed?

00:09:53.350 --> 00:09:54.840
What's the state of my cache?

00:09:54.840 --> 00:09:58.570
Can I look and see what has been
cached and what its status is?

00:09:58.570 --> 00:10:00.130
But Chrome developer
tools are also

00:10:00.130 --> 00:10:03.010
very awesome because we've baked
in some of these awesome tools

00:10:03.010 --> 00:10:06.190
for finding best practices
such as Lighthouse.

00:10:06.190 --> 00:10:08.470
So now, using
Lighthouse, I can figure

00:10:08.470 --> 00:10:12.070
out am I building a great
progressive web application?

00:10:12.070 --> 00:10:15.010
Is my application doing
well on performance?

00:10:15.010 --> 00:10:17.680
Can I broaden my audience
by taking advantage of more

00:10:17.680 --> 00:10:20.050
accessibility best practices?

00:10:20.050 --> 00:10:21.790
And overall, what
are the practices

00:10:21.790 --> 00:10:24.040
that we've discovered
from across the ecosystem

00:10:24.040 --> 00:10:28.070
that I could be taking
advantage of in my app?

00:10:28.070 --> 00:10:30.980
So we have a few generic tools.

00:10:30.980 --> 00:10:33.340
So these are tools that
could be used for any web

00:10:33.340 --> 00:10:35.620
application that exists today.

00:10:35.620 --> 00:10:38.560
And one of the best for
doing this is called Workbox.

00:10:38.560 --> 00:10:41.080
So this is a project
from the Chrome team

00:10:41.080 --> 00:10:43.150
that takes the
best of what we've

00:10:43.150 --> 00:10:45.460
got in terms of our
understanding of the use cases

00:10:45.460 --> 00:10:47.530
and the needs of developers,
and packages that

00:10:47.530 --> 00:10:49.740
in a very easy-to-use library.

00:10:49.740 --> 00:10:53.440
Workbox is fantastic in the way
that it embeds offline caching,

00:10:53.440 --> 00:10:56.230
even newer things like
offline analytics,

00:10:56.230 --> 00:10:58.820
and new APIs that are now
coming available in browsers

00:10:58.820 --> 00:11:00.589
such as background sync.

00:11:00.589 --> 00:11:02.380
Background sync is a
very important concept

00:11:02.380 --> 00:11:05.279
because it allows us to not
only get the freshest data when

00:11:05.279 --> 00:11:07.070
a user is interacting
with our application,

00:11:07.070 --> 00:11:09.040
but we can do some of
that behind the scenes,

00:11:09.040 --> 00:11:12.170
so that the moment our user
accesses our application, even

00:11:12.170 --> 00:11:15.940
in offline mode, we can still
give them the freshest data

00:11:15.940 --> 00:11:18.350
that they expect.

00:11:18.350 --> 00:11:19.560
I love Webpack.

00:11:19.560 --> 00:11:21.860
There's a lot of
different tools out there

00:11:21.860 --> 00:11:24.470
for building
applications with Webpack

00:11:24.470 --> 00:11:26.480
that have PWA attributes.

00:11:26.480 --> 00:11:29.510
One of these is Offline
Plugin for Webpack.

00:11:29.510 --> 00:11:32.930
Offline Plugin really focuses
on the file caching aspect

00:11:32.930 --> 00:11:35.180
of service workers and PWAs.

00:11:35.180 --> 00:11:38.030
With Offline Plugin, you can
do ahead of time caching,

00:11:38.030 --> 00:11:40.130
so give me all my
files up front.

00:11:40.130 --> 00:11:41.330
I can do deferred caching.

00:11:41.330 --> 00:11:43.310
Hey, let's go and get
these files later.

00:11:43.310 --> 00:11:45.350
Or I can make some
of my files optional

00:11:45.350 --> 00:11:47.690
and base these sorts of
decisions on user behavior

00:11:47.690 --> 00:11:50.060
in order to cache the
files at the right times

00:11:50.060 --> 00:11:52.360
in the right way.

00:11:52.360 --> 00:11:54.070
Another fantastic
project that you

00:11:54.070 --> 00:11:56.590
should look at as you're
getting to know PWAs

00:11:56.590 --> 00:11:57.880
is actually from Pinterest.

00:11:57.880 --> 00:12:00.520
It's on their Github
pinterest/serviceworkers.

00:12:00.520 --> 00:12:02.140
This is a collection
of utilities

00:12:02.140 --> 00:12:04.090
for creating, testing,
and experimenting

00:12:04.090 --> 00:12:05.560
with service workers.

00:12:05.560 --> 00:12:07.900
Not only do they have
code generation tools

00:12:07.900 --> 00:12:11.470
that give you a service
worker under the hood that

00:12:11.470 --> 00:12:13.840
helps you move faster
as a developer,

00:12:13.840 --> 00:12:16.100
but they've also done
something very interesting.

00:12:16.100 --> 00:12:18.280
They've built out
a mock environment

00:12:18.280 --> 00:12:21.370
generator that allows you to
do testing of your service

00:12:21.370 --> 00:12:21.870
workers.

00:12:21.870 --> 00:12:23.661
And this has historically
been a little bit

00:12:23.661 --> 00:12:25.330
of a problem because
of the newness

00:12:25.330 --> 00:12:28.330
of these APIs and the way
that sometimes the browser's

00:12:28.330 --> 00:12:30.884
actually ignoring the back end
of your application entirely.

00:12:30.884 --> 00:12:32.800
And so mocking out these
sorts of environments

00:12:32.800 --> 00:12:35.290
and testing them can be
very important for ensuring

00:12:35.290 --> 00:12:38.744
that we have fantastic
user experiences.

00:12:38.744 --> 00:12:41.160
Another tool that you should
be aware of, that you're just

00:12:41.160 --> 00:12:42.900
going to see all
over the place, is

00:12:42.900 --> 00:12:46.680
a set of tools called
sw-precache and sw-toolbox.

00:12:46.680 --> 00:12:49.380
This was another set of
tools from the Chrome team

00:12:49.380 --> 00:12:52.470
that were utilities for
building service workers.

00:12:52.470 --> 00:12:55.530
These tools had the same
goals and values as Workbox,

00:12:55.530 --> 00:12:57.840
but they were a little bit
less modular, flexible,

00:12:57.840 --> 00:12:58.770
and extensible.

00:12:58.770 --> 00:13:00.660
And so the team
decided, hey, we want

00:13:00.660 --> 00:13:02.790
to collect this array of
tools that we've built.

00:13:02.790 --> 00:13:04.560
We want to reflect
on the best practices

00:13:04.560 --> 00:13:07.050
that we've learned over
the past few years.

00:13:07.050 --> 00:13:09.090
And we want to bake
those into the new tools.

00:13:09.090 --> 00:13:13.300
So sw-precache and sw-toolbox
have, for the most part,

00:13:13.300 --> 00:13:14.910
been replaced by
Workbox if you're

00:13:14.910 --> 00:13:17.970
building a generic
implementation of a PWA today.

00:13:17.970 --> 00:13:20.250
But what you'll see is
that sw-precache is still

00:13:20.250 --> 00:13:23.580
used by many CLIs today, and
it's still a fantastic tool

00:13:23.580 --> 00:13:26.830
for building PWAs.

00:13:26.830 --> 00:13:28.820
Another tool to have
in your tool kit

00:13:28.820 --> 00:13:33.670
is Hacker News
PWA, or hnpwa.com.

00:13:33.670 --> 00:13:35.950
This is a website where
we're collecting the best

00:13:35.950 --> 00:13:39.430
practices across a number of
different tools, libraries,

00:13:39.430 --> 00:13:43.060
and frameworks for building
progressive web applications.

00:13:43.060 --> 00:13:46.000
For each submission, we track
both the speed as well as

00:13:46.000 --> 00:13:47.920
some of the capabilities of it.

00:13:47.920 --> 00:13:52.335
There's tools from projects like
React, Firebase, and Angular.

00:13:52.335 --> 00:13:54.460
There's more than 20
implementations of this Hacker

00:13:54.460 --> 00:13:56.320
News client, and they
really tried the best

00:13:56.320 --> 00:13:59.050
to show off the capabilities
of the framework

00:13:59.050 --> 00:14:02.257
and of their PWA capabilities
in a way that's open source

00:14:02.257 --> 00:14:04.090
and that you can take
advantage of and learn

00:14:04.090 --> 00:14:07.047
from as a developer.

00:14:07.047 --> 00:14:09.130
So now let's get into a
little bit about the goals

00:14:09.130 --> 00:14:12.370
and the philosophy
behind these tools.

00:14:12.370 --> 00:14:15.550
I like to think that
technology tools are really

00:14:15.550 --> 00:14:18.710
about simplifying the
mental model in a good way.

00:14:18.710 --> 00:14:20.710
It's very easy to do
this wrong, because what

00:14:20.710 --> 00:14:22.168
we're doing under
the hood is we're

00:14:22.168 --> 00:14:25.090
finding new abstractions
for concepts that have

00:14:25.090 --> 00:14:27.220
existed before in lower levels.

00:14:27.220 --> 00:14:28.810
But we, as
developers, can't hold

00:14:28.810 --> 00:14:31.280
all of the complexity in
our heads at one time.

00:14:31.280 --> 00:14:33.474
We have to focus
on smaller subsets

00:14:33.474 --> 00:14:35.140
of the projects and
the tasks that we're

00:14:35.140 --> 00:14:36.610
trying to accomplish.

00:14:36.610 --> 00:14:39.790
And tools are fantastic
at taking an abstraction

00:14:39.790 --> 00:14:43.730
and saying, here is the thing
that I can help you with.

00:14:43.730 --> 00:14:47.160
Additionally, tools can help
you with different edge cases.

00:14:47.160 --> 00:14:49.150
And finally, tools can
help you save time.

00:14:49.150 --> 00:14:51.170
Let's dig into these
little bit more.

00:14:51.170 --> 00:14:54.310
So when we simplify
mental models,

00:14:54.310 --> 00:14:57.160
this is something that
we often have to do.

00:14:57.160 --> 00:14:59.009
One of the common
programming jokes

00:14:59.009 --> 00:15:00.550
is that there's two
unsolved problems

00:15:00.550 --> 00:15:02.900
in computer science,
naming things and cache

00:15:02.900 --> 00:15:04.150
and validation.

00:15:04.150 --> 00:15:06.520
Caching is a very,
very hard topic.

00:15:06.520 --> 00:15:10.120
And so if we focus, via
tools, more on use cases

00:15:10.120 --> 00:15:12.220
than underlying
implementation, the tools

00:15:12.220 --> 00:15:15.370
can actually help us
with that a huge degree.

00:15:15.370 --> 00:15:17.050
The service worker
lifecycle I also

00:15:17.050 --> 00:15:18.670
find to be a little
bit difficult.

00:15:18.670 --> 00:15:20.500
And so again,
focusing on use cases,

00:15:20.500 --> 00:15:22.855
the tools can help us with that.

00:15:22.855 --> 00:15:24.730
The last thing is an
interesting conversation

00:15:24.730 --> 00:15:26.800
that I often have with
developers, which is,

00:15:26.800 --> 00:15:29.740
does web development feel
like what I'm used to?

00:15:29.740 --> 00:15:31.840
We're always
mapping new concepts

00:15:31.840 --> 00:15:33.580
into concepts that
came previously

00:15:33.580 --> 00:15:35.440
for us as developers.

00:15:35.440 --> 00:15:37.420
I know that I talk
to developers that

00:15:37.420 --> 00:15:40.080
are in some ways stuck
in the web development

00:15:40.080 --> 00:15:43.240
that we did five or six years
ago because they haven't been

00:15:43.240 --> 00:15:46.510
able to take advantage of the
newer capabilities that we have

00:15:46.510 --> 00:15:48.640
and the new APIs that
exists in the browser.

00:15:48.640 --> 00:15:50.260
And so good tooling
should both be

00:15:50.260 --> 00:15:53.830
teaching you these mental
models and kind of guiding you

00:15:53.830 --> 00:15:56.830
into the new world while
still empowering you

00:15:56.830 --> 00:15:59.980
to be effective from day one.

00:15:59.980 --> 00:16:01.570
There's also a lot
of edge cases that

00:16:01.570 --> 00:16:03.430
end up coming up
that you might not

00:16:03.430 --> 00:16:06.160
expect when you start using
progressive web apps or service

00:16:06.160 --> 00:16:07.760
workers.

00:16:07.760 --> 00:16:10.750
So a lot of us have talked
about intermittent connectivity

00:16:10.750 --> 00:16:12.500
in offline use cases.

00:16:12.500 --> 00:16:14.500
So one of the things that
can happen very easily

00:16:14.500 --> 00:16:17.290
is what if your app loses
connectivity during the service

00:16:17.290 --> 00:16:18.659
worker install?

00:16:18.659 --> 00:16:20.200
A naive implementation
that you might

00:16:20.200 --> 00:16:22.409
do yourself might
fail out and say,

00:16:22.409 --> 00:16:23.950
hey, I can't use
any of these assets.

00:16:23.950 --> 00:16:25.480
Let's uninstall.

00:16:25.480 --> 00:16:27.100
Let's throw away
everything we've got

00:16:27.100 --> 00:16:29.260
and then try again
on the next load.

00:16:29.260 --> 00:16:31.179
But you could also do
something different.

00:16:31.179 --> 00:16:33.220
Some of the tools will
allow you to, for example,

00:16:33.220 --> 00:16:35.885
keep some of the cache files
via some sort of validation.

00:16:35.885 --> 00:16:37.870
They're using some
sort of checksum

00:16:37.870 --> 00:16:39.370
to ensure that
they've got the files

00:16:39.370 --> 00:16:43.034
and they understand the
integrity of those files.

00:16:43.034 --> 00:16:44.950
We've talked about a lot
of offline use cases,

00:16:44.950 --> 00:16:46.930
but there's also
online use cases.

00:16:46.930 --> 00:16:49.434
What if your user has
full connectivity?

00:16:49.434 --> 00:16:51.100
One of the patterns
that's been emerging

00:16:51.100 --> 00:16:53.681
that I believe is a little
bit of an anti-pattern

00:16:53.681 --> 00:16:55.930
is this little box at the
bottom of the page that says

00:16:55.930 --> 00:16:57.054
the application is updated.

00:16:57.054 --> 00:16:58.166
Click to refresh.

00:16:58.166 --> 00:17:00.790
And so this is something that we
didn't used to have on the web

00:17:00.790 --> 00:17:03.766
because applications were always
fresh when you loaded them.

00:17:03.766 --> 00:17:05.349
But now, in the
modern web, because we

00:17:05.349 --> 00:17:06.940
have these new
capabilities, we've

00:17:06.940 --> 00:17:08.440
introduced a little
bit of a problem

00:17:08.440 --> 00:17:11.260
where if I update my
application every day, perhaps

00:17:11.260 --> 00:17:13.569
via some sort of continuous
integration system,

00:17:13.569 --> 00:17:15.849
I don't want my user to
be constantly assaulted

00:17:15.849 --> 00:17:17.500
with this click
to refresh, click

00:17:17.500 --> 00:17:19.150
to refresh just so
that they're getting

00:17:19.150 --> 00:17:22.869
the freshest content of my app.

00:17:22.869 --> 00:17:26.619
We also build applications now
in much larger environments.

00:17:26.619 --> 00:17:30.010
Many times you may be building
a front end of an application,

00:17:30.010 --> 00:17:32.599
but you have no control over
the back end of an application.

00:17:32.599 --> 00:17:34.390
And so as you're looking
at adopting things

00:17:34.390 --> 00:17:37.450
like service worker, you may
want to be caching files.

00:17:37.450 --> 00:17:40.814
But maybe the cache headers that
are coming back from your API

00:17:40.814 --> 00:17:42.730
aren't what you expect
or aren't what you need

00:17:42.730 --> 00:17:44.230
to build out the front end.

00:17:44.230 --> 00:17:47.299
So you can look at things
like tools to say, hey,

00:17:47.299 --> 00:17:49.090
maybe I need to override
the cache headers,

00:17:49.090 --> 00:17:51.070
or I need to ignore them and
I need to supply a completely

00:17:51.070 --> 00:17:53.860
different policy that supports
my front end in a way that

00:17:53.860 --> 00:17:56.700
my back end can't?

00:17:56.700 --> 00:17:58.980
And then finally, we
talk about saving time.

00:17:58.980 --> 00:18:01.230
As developers we
write a lot of code.

00:18:01.230 --> 00:18:04.350
But we also have projects
that have a lot of DevOps.

00:18:04.350 --> 00:18:06.346
It's not just as easy
as writing code anymore.

00:18:06.346 --> 00:18:08.470
I have to figure out how
am I going to minify this?

00:18:08.470 --> 00:18:09.678
How am I going to build this?

00:18:09.678 --> 00:18:11.700
How am I going to combine
this all with the work

00:18:11.700 --> 00:18:13.230
that other developers are doing?

00:18:13.230 --> 00:18:15.360
And then how do we ship
that down to the user?

00:18:15.360 --> 00:18:17.179
And all these things
have lots of effort,

00:18:17.179 --> 00:18:18.720
and so finding the
right abstractions

00:18:18.720 --> 00:18:22.960
and the right tools at each of
these stages is very important.

00:18:22.960 --> 00:18:26.100
So now let's get into the world
of single page applications.

00:18:26.100 --> 00:18:29.610
So libraries, frameworks,
and platforms, oh my.

00:18:29.610 --> 00:18:33.904
So I'm going to go through
these five specific tools.

00:18:33.904 --> 00:18:35.820
I apologize to anyone
that's not on this list.

00:18:35.820 --> 00:18:38.960
There are more tools than I can
count and more frameworks them

00:18:38.960 --> 00:18:43.120
I can go over in the
limited time we have.

00:18:43.120 --> 00:18:45.220
But each of these share
a number of things.

00:18:45.220 --> 00:18:48.090
So each of these tools
use some sort of CLI

00:18:48.090 --> 00:18:51.330
in order to empower developers
to be more effective, more

00:18:51.330 --> 00:18:52.240
quickly.

00:18:52.240 --> 00:18:54.160
So let's go into each of these.

00:18:54.160 --> 00:18:56.160
So in the React world,
we have Create React app,

00:18:56.160 --> 00:18:58.247
which is a fantastic CLI.

00:18:58.247 --> 00:19:00.330
If you're using this CLI,
what you're going to see

00:19:00.330 --> 00:19:02.371
is that it creates a
service worker and a web app

00:19:02.371 --> 00:19:05.940
manifest by default. They
have a cache for strategy

00:19:05.940 --> 00:19:10.050
under the hood to ensure
that you get the fastest

00:19:10.050 --> 00:19:11.980
experience possible.

00:19:11.980 --> 00:19:14.700
So for all of these examples,
I'm going to use Yarn.

00:19:14.700 --> 00:19:17.760
You as a developer could use NPM
or any other package management

00:19:17.760 --> 00:19:20.910
tool that you want to go fetch
from the NPM repositories.

00:19:20.910 --> 00:19:24.420
But installing Create React
app is yarn global app,

00:19:24.420 --> 00:19:27.200
so you globally install
Create React app.

00:19:27.200 --> 00:19:29.130
Then I'm going to
run Create React app

00:19:29.130 --> 00:19:30.829
and give it a project name.

00:19:30.829 --> 00:19:32.370
Then I'm going to
CD into that folder

00:19:32.370 --> 00:19:34.320
and I'm going to
run a build command.

00:19:34.320 --> 00:19:37.680
What this will get me is a
basic kind of Hello World,

00:19:37.680 --> 00:19:40.530
welcome to React
application that

00:19:40.530 --> 00:19:42.540
is awesome in terms
of demonstrating

00:19:42.540 --> 00:19:44.280
how do we get
started very quickly,

00:19:44.280 --> 00:19:46.590
and then giving developers
the freedom and flexibility

00:19:46.590 --> 00:19:49.089
to get into their application
and start adding functionality

00:19:49.089 --> 00:19:50.530
right away.

00:19:50.530 --> 00:19:52.560
And one thing that is
very beautiful to see

00:19:52.560 --> 00:19:54.360
is that the moment you
see that application

00:19:54.360 --> 00:19:56.190
in your web browser,
a service worker

00:19:56.190 --> 00:19:58.020
has been installed and loaded.

00:19:58.020 --> 00:20:03.000
So it is a PWA out of the
box in a very fantastic way.

00:20:03.000 --> 00:20:05.220
Let's now talk a little bit
about the Preact project

00:20:05.220 --> 00:20:07.170
and the Preact CLI.

00:20:07.170 --> 00:20:09.510
This is a CLI that goes
a little bit further

00:20:09.510 --> 00:20:11.220
in terms of helping
developers take

00:20:11.220 --> 00:20:13.080
advantage of the modern web.

00:20:13.080 --> 00:20:14.930
It has the standard
app creation,

00:20:14.930 --> 00:20:17.820
but it will also do things
like generate an app

00:20:17.820 --> 00:20:20.220
shell for your index.html file.

00:20:20.220 --> 00:20:23.100
Because it has knowledge of
some of your application,

00:20:23.100 --> 00:20:26.000
it can ensure that that
is pre-rendered as HTML,

00:20:26.000 --> 00:20:27.750
and then you ship that
down to the browser

00:20:27.750 --> 00:20:29.610
to increase perceived
performance, which

00:20:29.610 --> 00:20:32.250
is a very important metric.

00:20:32.250 --> 00:20:34.064
The Preact CLI is
also browser ware,

00:20:34.064 --> 00:20:36.480
so if you tell it which browsers
you want to be targeting,

00:20:36.480 --> 00:20:38.610
it can automatically add
the appropriate prefixes

00:20:38.610 --> 00:20:40.360
for your application.

00:20:40.360 --> 00:20:42.810
One of the things that's
fantastic about the Preact CLI

00:20:42.810 --> 00:20:44.880
is that they've pre-configured
your application

00:20:44.880 --> 00:20:47.580
if you run the appropriate
commands for Firebase Server

00:20:47.580 --> 00:20:48.390
Push.

00:20:48.390 --> 00:20:51.169
So combining, again, its
knowledge of your application

00:20:51.169 --> 00:20:53.460
with its knowledge of the
best practices across the web

00:20:53.460 --> 00:20:56.060
in terms of which files should
be pushed down of the browser,

00:20:56.060 --> 00:20:58.380
and which should be waited
for or requested only

00:20:58.380 --> 00:21:00.990
when it's needed by
the user, and then

00:21:00.990 --> 00:21:04.320
baking that into the Firebase
hosting configuration.

00:21:04.320 --> 00:21:08.464
All the Preact CLI is using SW
pre-cache under the hood today.

00:21:08.464 --> 00:21:10.005
So just like we saw
before, I'm going

00:21:10.005 --> 00:21:12.655
to add the Preact
CLI via the terminal,

00:21:12.655 --> 00:21:14.280
and then I'm going
to run Preact Create

00:21:14.280 --> 00:21:15.810
and give it a project name.

00:21:15.810 --> 00:21:18.769
And again, I'll just CD into
the folder and run the build.

00:21:18.769 --> 00:21:20.310
And here, out of
the box, we're going

00:21:20.310 --> 00:21:22.880
to get a beautiful,
material designed,

00:21:22.880 --> 00:21:24.719
styled app, Hello World.

00:21:24.719 --> 00:21:26.760
And one of the cool things
about this application

00:21:26.760 --> 00:21:28.650
is it actually includes
routing by default,

00:21:28.650 --> 00:21:31.680
so you can see one of
these very common patterns

00:21:31.680 --> 00:21:33.997
and get started more quickly.

00:21:33.997 --> 00:21:36.580
Next I want to talk a little bit
about Polymer and the Polymer

00:21:36.580 --> 00:21:37.756
CLI.

00:21:37.756 --> 00:21:39.630
Polymer does things a
little bit differently.

00:21:39.630 --> 00:21:41.820
So while they have the
manifest generation

00:21:41.820 --> 00:21:44.010
and the optional service
worker, they actually

00:21:44.010 --> 00:21:45.861
do a set of
distributions for you.

00:21:45.861 --> 00:21:47.610
And this is something
that's unique to how

00:21:47.610 --> 00:21:49.230
they've built their CLI.

00:21:49.230 --> 00:21:51.000
So when you run a
build, you won't just

00:21:51.000 --> 00:21:52.680
get a single set of
JavaScript that you ship down

00:21:52.680 --> 00:21:53.460
to the browser.

00:21:53.460 --> 00:21:55.290
They actually give
you three options.

00:21:55.290 --> 00:21:57.480
So they're going to
give you an ES5 bundled

00:21:57.480 --> 00:21:58.980
version of your
application, which

00:21:58.980 --> 00:22:00.355
is the standard
version that will

00:22:00.355 --> 00:22:02.160
work in basically any browser.

00:22:02.160 --> 00:22:06.210
But you also get an ES6
version, or an ES2015 version

00:22:06.210 --> 00:22:08.910
that is a little bit smaller,
a little bit more performant

00:22:08.910 --> 00:22:12.450
if the browsers have optimized
for ES2015, which most of them

00:22:12.450 --> 00:22:13.150
have.

00:22:13.150 --> 00:22:15.000
But then you also get
an unbundled version

00:22:15.000 --> 00:22:16.364
of that same code.

00:22:16.364 --> 00:22:18.030
And the idea here is
that they're really

00:22:18.030 --> 00:22:20.190
trying to help you take
advantage of the latest

00:22:20.190 --> 00:22:22.620
and greatest from the browsers,
and kind of leaving behind

00:22:22.620 --> 00:22:24.328
some of the legacy
that we had to support

00:22:24.328 --> 00:22:27.780
with ES5 in the past.

00:22:27.780 --> 00:22:30.660
One nice thing, as well
about the Polymer CLI

00:22:30.660 --> 00:22:32.190
is that they have
purple by default,

00:22:32.190 --> 00:22:34.980
so they really believe in this
idea of building great user

00:22:34.980 --> 00:22:36.600
experiences.

00:22:36.600 --> 00:22:39.900
With the CLI for Polymer, I'm
going to install Polymer-CLI.

00:22:39.900 --> 00:22:41.970
I'm going to make a new
directory and CD into it,

00:22:41.970 --> 00:22:43.462
and I'm going to
run Polymer Nit.

00:22:43.462 --> 00:22:44.920
And then when it's
going to give me

00:22:44.920 --> 00:22:48.220
is a set of choices of which
starter kit I want to use.

00:22:48.220 --> 00:22:49.830
So there's several options.

00:22:49.830 --> 00:22:52.110
The one here that includes
PWA out of the box

00:22:52.110 --> 00:22:53.835
is called Polymer 2 starter kit.

00:22:53.835 --> 00:22:55.710
And then as soon as I've
set up that project,

00:22:55.710 --> 00:22:57.535
I can run Polymer Build.

00:22:57.535 --> 00:22:59.660
Again, I'm going to get an
application with routing

00:22:59.660 --> 00:23:02.520
and some material design
styling that, out of the box,

00:23:02.520 --> 00:23:04.860
gets me started much quicker.

00:23:04.860 --> 00:23:07.110
And as we always
like to see, it's

00:23:07.110 --> 00:23:10.000
service worker out of the box.

00:23:10.000 --> 00:23:12.400
Next I'm going to talk
a little bit about Vue.

00:23:12.400 --> 00:23:14.020
So there's two
projects at play here.

00:23:14.020 --> 00:23:19.480
There's the Vue CLI as well as
the Vue JS Templates for PWA.

00:23:19.480 --> 00:23:21.520
Again, this handles
app creation.

00:23:21.520 --> 00:23:23.860
It handles manifest and
service worker and app shell

00:23:23.860 --> 00:23:25.060
generation.

00:23:25.060 --> 00:23:27.370
And one of the very nice
things about the Vue CLI

00:23:27.370 --> 00:23:30.580
is that it intelligently loads
the bits of your application

00:23:30.580 --> 00:23:31.570
as they're needed.

00:23:31.570 --> 00:23:32.990
So it can understand,
for example,

00:23:32.990 --> 00:23:36.310
if you have lazy loaded routes,
which chunks, based on the user

00:23:36.310 --> 00:23:38.552
request, we need
to load right away

00:23:38.552 --> 00:23:40.510
and which ones can be
asynchronous and deferred

00:23:40.510 --> 00:23:42.990
for a little bit later.

00:23:42.990 --> 00:23:46.050
Using the Vue CLI is
relatively straightforward.

00:23:46.050 --> 00:23:47.835
I'm going to install
the CLI, and then I'm

00:23:47.835 --> 00:23:49.418
going to run Vue and
Nit and I'm going

00:23:49.418 --> 00:23:51.220
to choose the PWA
template, and then

00:23:51.220 --> 00:23:53.300
I'm going to give
it a project name.

00:23:53.300 --> 00:23:55.230
The Vue CLI is fantastic
in terms of the way

00:23:55.230 --> 00:23:56.820
that it gives you
a guided setup,

00:23:56.820 --> 00:23:58.410
and so it's going
to be asking you

00:23:58.410 --> 00:24:00.360
questions about your
application and how

00:24:00.360 --> 00:24:02.280
you want to be serving
your users in order

00:24:02.280 --> 00:24:05.224
to, as you're going, teach
you the different decisions

00:24:05.224 --> 00:24:06.765
that you have to
make as a developer.

00:24:06.765 --> 00:24:09.120
The Then I'm going to
install the dependencies

00:24:09.120 --> 00:24:11.130
and I'm going to run
another build command.

00:24:11.130 --> 00:24:13.836
And out of the box, we have
this very helpful tutorial that

00:24:13.836 --> 00:24:15.210
says, hey, here's
some links that

00:24:15.210 --> 00:24:18.540
will get you started
as a Vue developer.

00:24:18.540 --> 00:24:21.829
And again, we have the
beautiful service worker.

00:24:21.829 --> 00:24:24.120
Lastly I'm going to talk a
little bit about the Angular

00:24:24.120 --> 00:24:25.200
CLI.

00:24:25.200 --> 00:24:27.840
The Angular CLI
handles app creation.

00:24:27.840 --> 00:24:30.849
It also handles service
worker generation.

00:24:30.849 --> 00:24:33.390
One thing that's a little bit
different about the ANgular CLI

00:24:33.390 --> 00:24:35.940
is instead of using JavaScript
to configure your service

00:24:35.940 --> 00:24:38.550
worker, it has a
declarative JSON based

00:24:38.550 --> 00:24:41.917
configuration file called NGSW.

00:24:41.917 --> 00:24:43.500
Another thing that's
interesting about

00:24:43.500 --> 00:24:46.800
the Angular implementation and
support for service workers

00:24:46.800 --> 00:24:50.130
is that they've wrapped push
notifications as a service

00:24:50.130 --> 00:24:52.050
that you can inject
into your application

00:24:52.050 --> 00:24:54.480
in order to do things
like registering for push

00:24:54.480 --> 00:24:58.659
notifications, or to observe
or listen to an observable that

00:24:58.659 --> 00:25:00.450
gives you the push
notifications that comes

00:25:00.450 --> 00:25:02.280
from your application,
or understanding

00:25:02.280 --> 00:25:05.430
the lifecycle events that are
coming from a service worker.

00:25:05.430 --> 00:25:08.550
To use PWAs with Angular,
you're going to install the app

00:25:08.550 --> 00:25:10.440
angular/cliproject.

00:25:10.440 --> 00:25:13.560
I'm going to use the ng new
command with my project name.

00:25:13.560 --> 00:25:16.740
And then I'm in it flip a flag
in the CLI's configuration

00:25:16.740 --> 00:25:19.020
saying, I would like a
service worker, please.

00:25:19.020 --> 00:25:20.875
And then when you run
a production build,

00:25:20.875 --> 00:25:23.250
you're going to automatically
get service worker included

00:25:23.250 --> 00:25:26.220
in your application that's going
to cache all the static files

00:25:26.220 --> 00:25:29.094
that are generated as part of
the web pack build process.

00:25:29.094 --> 00:25:30.510
And then you can
further configure

00:25:30.510 --> 00:25:32.957
those via that
declarative file saying

00:25:32.957 --> 00:25:35.040
these are the files I'd
like to dynamically cache,

00:25:35.040 --> 00:25:38.167
these are the files you
can ignore, and so on.

00:25:38.167 --> 00:25:39.750
When you generate a
project like this,

00:25:39.750 --> 00:25:43.564
it's going to give you, again,
a short Hello World page

00:25:43.564 --> 00:25:45.480
that has all of the
necessary links to get you

00:25:45.480 --> 00:25:48.630
further started as
an Angular developer.

00:25:48.630 --> 00:25:50.820
And again, we have
the service worker.

00:25:50.820 --> 00:25:53.820
The Angular team has decided to
ship basically a single service

00:25:53.820 --> 00:25:57.900
worker that is entirely reliant
on that configuration file.

00:25:57.900 --> 00:25:59.926
So obviously, this
file exists on disk.

00:25:59.926 --> 00:26:01.800
It's generated for you,
but you can modify it

00:26:01.800 --> 00:26:02.940
to your heart's content.

00:26:02.940 --> 00:26:04.620
But it really is
focused on exposing

00:26:04.620 --> 00:26:06.990
all of the capabilities
of service worker via that

00:26:06.990 --> 00:26:11.272
file so you can do
configuration easily.

00:26:11.272 --> 00:26:12.730
There's a few other
projects that I

00:26:12.730 --> 00:26:15.740
want to mention very briefly
in the remaining time we have.

00:26:15.740 --> 00:26:18.420
There's a website
called pwa.rocks.

00:26:18.420 --> 00:26:21.130
There's a PWA builder
that you can find online.

00:26:21.130 --> 00:26:22.780
The nice thing about
the PWA builder

00:26:22.780 --> 00:26:24.490
is that it's a
web-based interface

00:26:24.490 --> 00:26:25.792
for generating manifest.

00:26:25.792 --> 00:26:28.000
You'll be able to upload
images, and it will generate

00:26:28.000 --> 00:26:29.230
all the right sizes for you.

00:26:29.230 --> 00:26:30.592
It'll generate the JSON for you.

00:26:30.592 --> 00:26:32.050
It will ask you
questions that help

00:26:32.050 --> 00:26:35.330
you understand what's going
into the web app manifest.

00:26:35.330 --> 00:26:37.352
And then it will ask
you, how do you want

00:26:37.352 --> 00:26:38.560
to generate a service worker?

00:26:38.560 --> 00:26:41.650
It'll ask you, based on the
use case that you're using,

00:26:41.650 --> 00:26:44.290
for example, are you just trying
to cache all the static assets

00:26:44.290 --> 00:26:46.242
so that the application
works offline?

00:26:46.242 --> 00:26:47.950
Or would you like
something more dynamic,

00:26:47.950 --> 00:26:50.590
where we just cache the assets
the application actually

00:26:50.590 --> 00:26:53.770
uses so that as the
user has interacted

00:26:53.770 --> 00:26:56.830
with our application, anything
that they've touched before

00:26:56.830 --> 00:26:58.770
can be accessed offline.

00:26:58.770 --> 00:27:00.520
And then also, within
the Angular project,

00:27:00.520 --> 00:27:03.160
there's a set of tools
called NG PWA tools that

00:27:03.160 --> 00:27:07.360
let you take advantage of things
like server side rendering.

00:27:07.360 --> 00:27:09.700
Lastly, let's dive
into best practices

00:27:09.700 --> 00:27:12.160
for building and
debugging these things.

00:27:12.160 --> 00:27:15.730
Remember, remember, remember
to check the Applications tab.

00:27:15.730 --> 00:27:19.090
I've heard stories of developers
restarting their browsers,

00:27:19.090 --> 00:27:22.210
uninstalling Chrome,
reformatting their machines

00:27:22.210 --> 00:27:24.910
because they can't understand
why their application isn't

00:27:24.910 --> 00:27:25.930
refreshing.

00:27:25.930 --> 00:27:28.120
So service workers are
a very powerful API,

00:27:28.120 --> 00:27:30.970
but because of the way that
they can favor performance

00:27:30.970 --> 00:27:34.210
over freshness, it can actually
break some of our expectations

00:27:34.210 --> 00:27:36.070
around the save
and refresh cycle.

00:27:36.070 --> 00:27:38.440
There's a fantastic guide
on debugging service workers

00:27:38.440 --> 00:27:39.790
by Rob Dodson.

00:27:39.790 --> 00:27:41.530
The link is bitly/debuggingsw.

00:27:43.712 --> 00:27:45.170
Another recommendation
that I would

00:27:45.170 --> 00:27:47.060
make in terms of best
practices is make sure

00:27:47.060 --> 00:27:49.530
that you're following the tools.

00:27:49.530 --> 00:27:52.490
Tools are useful because
they provide abstractions.

00:27:52.490 --> 00:27:54.260
But if those are the
wrong abstractions,

00:27:54.260 --> 00:27:56.216
you can end up
spending more time

00:27:56.216 --> 00:27:57.590
fighting the tools
because you're

00:27:57.590 --> 00:27:59.390
going against their intention.

00:27:59.390 --> 00:28:00.800
So whenever you
adopt a new tool,

00:28:00.800 --> 00:28:03.174
try and understand what the
tool is trying to do for you.

00:28:03.174 --> 00:28:05.210
Try and understand the
pieces of the workflow

00:28:05.210 --> 00:28:07.367
that it's trying to
automate because you're

00:28:07.367 --> 00:28:09.950
going to have a much better time
if you're using tools the way

00:28:09.950 --> 00:28:12.750
they intend so that as
they continue to evolve,

00:28:12.750 --> 00:28:16.170
they don't
continually break you.

00:28:16.170 --> 00:28:18.335
While the Chrome Developer
Tools are fantastic,

00:28:18.335 --> 00:28:19.710
I would highly
recommend that you

00:28:19.710 --> 00:28:21.240
don't rely on them
as the only way

00:28:21.240 --> 00:28:24.306
that you debug and
build your applications.

00:28:24.306 --> 00:28:26.430
Throttling is one of the
really cool features where

00:28:26.430 --> 00:28:29.400
I can say, hey, give me
an emulated 3G connection,

00:28:29.400 --> 00:28:31.394
or give me an
offline connection.

00:28:31.394 --> 00:28:33.060
But these tools are
sometimes not enough

00:28:33.060 --> 00:28:34.800
and won't reproduce
all of the scenarios

00:28:34.800 --> 00:28:36.844
that users run into
on a day to day basis

00:28:36.844 --> 00:28:38.760
when they're on the bus
or they're on a plane,

00:28:38.760 --> 00:28:40.480
for example.

00:28:40.480 --> 00:28:42.570
It's also important to
note that as of today--

00:28:42.570 --> 00:28:43.950
I believe this is still true--

00:28:43.950 --> 00:28:47.070
the offline check box does not
actually affect web sockets.

00:28:47.070 --> 00:28:50.310
And so if you're building an
application with Firebase,

00:28:50.310 --> 00:28:52.800
for example, where you're
pulling down data via those web

00:28:52.800 --> 00:28:55.020
sockets, hitting
the offline button

00:28:55.020 --> 00:28:57.780
will not allow you to test your
service worker with that data

00:28:57.780 --> 00:28:59.821
because all the data will
actually come back when

00:28:59.821 --> 00:29:02.776
you might expect it not to.

00:29:02.776 --> 00:29:04.400
One of the other
really cool techniques

00:29:04.400 --> 00:29:06.420
that's just kind of
being developed right now

00:29:06.420 --> 00:29:09.660
is the idea of having end to end
tests for your service worker.

00:29:09.660 --> 00:29:12.187
So it's possible and important
to think about how do we test

00:29:12.187 --> 00:29:14.520
and how do we understand the
state of our service worker

00:29:14.520 --> 00:29:16.062
as we're building
these applications?

00:29:16.062 --> 00:29:17.644
So there's two
projects I'd definitely

00:29:17.644 --> 00:29:18.757
recommend you check out.

00:29:18.757 --> 00:29:21.090
The first is that Pinterest
project that I talked about,

00:29:21.090 --> 00:29:23.381
where they are mocking out
the environments so that you

00:29:23.381 --> 00:29:25.480
can do things in more
of a hermetic way.

00:29:25.480 --> 00:29:27.420
But there's also work
being done to build out,

00:29:27.420 --> 00:29:29.640
for example, a PWA
harness where we

00:29:29.640 --> 00:29:33.120
can use our standard end
to end tools, where we're

00:29:33.120 --> 00:29:35.970
doing browser instrumentation
using the debugging mode,

00:29:35.970 --> 00:29:38.700
and we're actually using
UX elements on the screen

00:29:38.700 --> 00:29:41.040
to check and verify and
change the service worker

00:29:41.040 --> 00:29:43.080
status in the way that
the user could be doing.

00:29:45.720 --> 00:29:47.580
The last recommendation
I'd have is

00:29:47.580 --> 00:29:49.920
really make sure that
you're staying up to date.

00:29:49.920 --> 00:29:52.020
Service workers are
a fantastic API that

00:29:52.020 --> 00:29:53.460
are on millions, and possibly--

00:29:53.460 --> 00:29:56.480
I think that's actually
billions of devices today--

00:29:56.480 --> 00:29:58.890
but it's continuing
to expand and evolve

00:29:58.890 --> 00:30:00.722
as the web ecosystem
always does.

00:30:00.722 --> 00:30:02.430
A great example of
this is that we've now

00:30:02.430 --> 00:30:05.820
seen work being done in Safari
to support service workers.

00:30:05.820 --> 00:30:09.274
And so what that support looks
like, we don't actually know.

00:30:09.274 --> 00:30:11.940
But it's important to understand
and use the latest and greatest

00:30:11.940 --> 00:30:15.480
tools so that you're reaching
as many people as you can

00:30:15.480 --> 00:30:19.120
and empowering as many users
with fantastic experiences.

00:30:19.120 --> 00:30:22.020
So I'd ask you, really just
give these tools a try,

00:30:22.020 --> 00:30:23.790
and let us know what
your experiences are

00:30:23.790 --> 00:30:27.210
with them, because we all want
to make the web a better place.

00:30:27.210 --> 00:30:29.150
Thank you so much.

