WEBVTT
Kind: captions
Language: en

00:00:00.124 --> 00:00:02.040
SPEAKER: [INAUDIBLE]
Firebase is about helping

00:00:02.040 --> 00:00:07.080
you build better apps and
grow successful businesses.

00:00:07.080 --> 00:00:10.710
And with that, the main
goal here-- the main point

00:00:10.710 --> 00:00:12.990
here is that better
apps are actually

00:00:12.990 --> 00:00:15.360
associated with more
successful businesses.

00:00:15.360 --> 00:00:17.070
And why is that?

00:00:17.070 --> 00:00:20.185
Why is building stable,
higher-quality apps

00:00:20.185 --> 00:00:23.520
really related to building
better and more successful

00:00:23.520 --> 00:00:24.900
businesses?

00:00:24.900 --> 00:00:27.270
To answer this question,
we looked at data

00:00:27.270 --> 00:00:28.740
from Google Play.

00:00:28.740 --> 00:00:32.490
And specifically, we classified
all the one-star reviews

00:00:32.490 --> 00:00:36.980
on Google Play on what are
users complaining about?

00:00:36.980 --> 00:00:39.930
What didn't they
like about this app

00:00:39.930 --> 00:00:42.150
that they gave it
a one-star review?

00:00:42.150 --> 00:00:47.400
And we realized that more than
50% of these one-star reviews

00:00:47.400 --> 00:00:50.340
are just stability issues.

00:00:50.340 --> 00:00:52.590
These are not functional
issues, these are not

00:00:52.590 --> 00:00:55.110
missing features in the
app, but these are just

00:00:55.110 --> 00:00:58.930
basically bugs and crashes
happening in the app

00:00:58.930 --> 00:01:00.750
and affecting the ratings.

00:01:00.750 --> 00:01:03.920
So with that in mind,
the quality of the app

00:01:03.920 --> 00:01:08.010
is one of the most important
drivers in the user's retention

00:01:08.010 --> 00:01:09.870
and engagement.

00:01:09.870 --> 00:01:13.860
And it can also affect your
revenues significantly.

00:01:13.860 --> 00:01:17.640
So Firebase is trying
to help developers

00:01:17.640 --> 00:01:19.920
build more successful
and better apps.

00:01:19.920 --> 00:01:23.215
But it seems that
developers themselves--

00:01:23.215 --> 00:01:28.590
they are not really focusing
on bugs and crashes sometimes.

00:01:28.590 --> 00:01:32.970
And the reason--
basically, developers

00:01:32.970 --> 00:01:37.920
are not focused on closing
these bugs and crashes.

00:01:37.920 --> 00:01:43.020
And why aren't they doing that?

00:01:43.020 --> 00:01:45.710
If you look at the
mobile ecosystem today,

00:01:45.710 --> 00:01:49.580
there's a lot of variations
in devices, platforms, network

00:01:49.580 --> 00:01:51.920
conditions, locations, locales.

00:01:51.920 --> 00:01:55.220
So many things that might
go wrong with the apps.

00:01:55.220 --> 00:01:59.150
So it's really difficult
to actually test

00:01:59.150 --> 00:02:01.860
against all these things
before using the apps.

00:02:01.860 --> 00:02:04.070
And this is where
Firebase app quality

00:02:04.070 --> 00:02:07.110
tools are trying to help.

00:02:07.110 --> 00:02:10.039
So we looked at our
practices inside Google,

00:02:10.039 --> 00:02:12.530
and we've been building
apps for a really long time.

00:02:12.530 --> 00:02:16.630
And we realized that the key to
building higher-quality apps is

00:02:16.630 --> 00:02:18.580
a combination of two things--

00:02:18.580 --> 00:02:22.010
being proactive, which means
try to prevent the issues

00:02:22.010 --> 00:02:24.440
before they happen
in the first place.

00:02:24.440 --> 00:02:28.160
And being reactive, so as
soon as a new crash starts

00:02:28.160 --> 00:02:31.610
happening, you want to go ahead
and investigate it, and fix it

00:02:31.610 --> 00:02:33.920
in a timely manner.

00:02:33.920 --> 00:02:37.450
And with being
proactive in mind,

00:02:37.450 --> 00:02:39.290
the tools that
Firebase app quality

00:02:39.290 --> 00:02:41.240
provides to help with that--

00:02:41.240 --> 00:02:44.740
the first one is
Firebase Test Lab.

00:02:44.740 --> 00:02:47.960
So Firebase Test Lab
tries to provide you

00:02:47.960 --> 00:02:51.200
with a testing solution
that helps you emulate

00:02:51.200 --> 00:02:54.000
the actual production
environment that your user are

00:02:54.000 --> 00:02:56.110
currently using your apps on.

00:02:56.110 --> 00:02:58.220
So for example,
we give you access

00:02:58.220 --> 00:03:01.120
to physical devices,
actual phones running

00:03:01.120 --> 00:03:02.490
in our data sensors.

00:03:02.490 --> 00:03:05.390
And you can, with one
click, run your test

00:03:05.390 --> 00:03:08.980
on Samsung and Motorala,
running Android Jelly Bean

00:03:08.980 --> 00:03:14.030
and KitKat in two different
orientations, five

00:03:14.030 --> 00:03:15.180
different languages.

00:03:15.180 --> 00:03:17.450
And with one click, you
launch all these tests

00:03:17.450 --> 00:03:20.112
and basically try
all these parameters,

00:03:20.112 --> 00:03:22.320
and it makes sure that your
app is working across all

00:03:22.320 --> 00:03:24.800
these different parameters.

00:03:24.800 --> 00:03:26.550
The second part about
the infrastructure

00:03:26.550 --> 00:03:27.650
is the virtual devices.

00:03:27.650 --> 00:03:31.400
So besides the actual physical
devices in out data centers,

00:03:31.400 --> 00:03:33.260
we have an option
for virtual devices.

00:03:33.260 --> 00:03:37.310
These are full Android versions
running on a virtual machine.

00:03:37.310 --> 00:03:39.710
So you can imagine
the amount of scaling

00:03:39.710 --> 00:03:41.270
you can do with these devices.

00:03:41.270 --> 00:03:43.550
You can launch hundreds
or thousands of tests

00:03:43.550 --> 00:03:44.960
at the same time.

00:03:44.960 --> 00:03:48.800
So one test that would
take five, six hours to run

00:03:48.800 --> 00:03:51.630
can actually finish in just a
matter of a couple of minutes.

00:03:51.630 --> 00:03:54.860
This is how much you can
scale with virtual devices.

00:03:54.860 --> 00:03:57.930
And since we launched
at Google I/O this year,

00:03:57.930 --> 00:04:01.290
our primary focus was to
increase the number of devices

00:04:01.290 --> 00:04:03.045
that we have in the catalog.

00:04:03.045 --> 00:04:05.040
And since Google
I/O, we have actually

00:04:05.040 --> 00:04:08.580
doubled the number of physical
devices in our catalog.

00:04:08.580 --> 00:04:11.790
But more importantly, we
worked very, very closely

00:04:11.790 --> 00:04:15.420
with the Android team on the
next generation of Android--

00:04:15.420 --> 00:04:16.510
the NMR1.

00:04:16.510 --> 00:04:21.000
And moving forward,
every new Android release

00:04:21.000 --> 00:04:23.930
is going to have corresponding
devices on Firebase Test

00:04:23.930 --> 00:04:27.150
Lab ready for use so that you
don't have to install these two

00:04:27.150 --> 00:04:29.190
images on your own devices.

00:04:29.190 --> 00:04:33.840
You can use them
directly on the Cloud.

00:04:33.840 --> 00:04:36.110
We have also listened
to users' feedback.

00:04:36.110 --> 00:04:39.710
The number one piece of feedback
we've got since Google I/O

00:04:39.710 --> 00:04:42.460
after we released the product
is that developers want

00:04:42.460 --> 00:04:45.020
to try that product before
they actually commit,

00:04:45.020 --> 00:04:48.230
and enter their credit
card, and start using it.

00:04:48.230 --> 00:04:51.260
And as of last month, we
have launched a free tier

00:04:51.260 --> 00:04:53.030
for Firebase Test Lab.

00:04:53.030 --> 00:04:56.930
Which means that without
having to enter any credit card

00:04:56.930 --> 00:05:00.520
information, you can
get up to 15 tests--

00:05:00.520 --> 00:05:04.400
10 tests on virtual devices,
5 tests on physical devices,

00:05:04.400 --> 00:05:07.570
every single day for free.

00:05:07.570 --> 00:05:11.045
And this will help
you evaluate Test Lab

00:05:11.045 --> 00:05:13.250
and make sure it fits
within your business needs

00:05:13.250 --> 00:05:16.231
before you can actually commit,
or you can just basically use

00:05:16.231 --> 00:05:19.850
the free tier forever.

00:05:19.850 --> 00:05:21.535
Now, one of the things
I really, really

00:05:21.535 --> 00:05:24.530
like about Firebase Test Lab
is how well it integrates

00:05:24.530 --> 00:05:26.490
with your existing workload.

00:05:26.490 --> 00:05:28.137
We have a web
interface where you

00:05:28.137 --> 00:05:31.730
can, with a matter of a couple
of clicks, uploading your APK,

00:05:31.730 --> 00:05:34.550
selecting some devices,
you can run your test

00:05:34.550 --> 00:05:37.490
on hundreds of device
configurations.

00:05:37.490 --> 00:05:39.800
We also have the integration
with Android Studio.

00:05:39.800 --> 00:05:42.170
So from within your own
development environment,

00:05:42.170 --> 00:05:44.240
when you're actually
writing your code,

00:05:44.240 --> 00:05:47.090
you can say, OK, I'm
implementing a new UI feature.

00:05:47.090 --> 00:05:49.160
I want to make sure that
this UI feature works

00:05:49.160 --> 00:05:53.450
well across different devices,
different form factors,

00:05:53.450 --> 00:05:55.790
and with one click, from
within Android Studio,

00:05:55.790 --> 00:05:59.240
you can launch your test
on hundreds of devices.

00:05:59.240 --> 00:06:00.800
And then my personal
favorite here

00:06:00.800 --> 00:06:02.644
is actually the
command line interface.

00:06:02.644 --> 00:06:04.310
And the reason it's
my personal favorite

00:06:04.310 --> 00:06:06.170
is that it allows you
to run these tests

00:06:06.170 --> 00:06:08.450
from continuous
integration environments.

00:06:08.450 --> 00:06:11.870
So how many of you here know
what continuous integration

00:06:11.870 --> 00:06:14.647
environments are
and have used them?

00:06:14.647 --> 00:06:15.810
Jenkins.

00:06:15.810 --> 00:06:16.515
Circle.

00:06:16.515 --> 00:06:17.850
Travis.

00:06:17.850 --> 00:06:19.352
Very few, which is fine.

00:06:19.352 --> 00:06:20.810
But I'm hoping by
the end of today,

00:06:20.810 --> 00:06:23.190
everyone here will at
least give it a try

00:06:23.190 --> 00:06:25.645
and try running their tests
on continuous integration.

00:06:25.645 --> 00:06:27.020
What continuous
integration helps

00:06:27.020 --> 00:06:31.040
you do is that for every
change you add to your code,

00:06:31.040 --> 00:06:33.770
you can build your
app to make sure

00:06:33.770 --> 00:06:37.460
that this change didn't break
any of your existing code.

00:06:37.460 --> 00:06:40.430
And you can run your
tests on as many devices

00:06:40.430 --> 00:06:42.090
as you want on
Firebase Test Lab.

00:06:42.090 --> 00:06:45.100
So you can make sure that
existing features in your app

00:06:45.100 --> 00:06:48.460
actually didn't break.

00:06:48.460 --> 00:06:50.620
Now, many of you
will be thinking,

00:06:50.620 --> 00:06:53.830
now I have to go back and learn
a new programming language,

00:06:53.830 --> 00:06:56.340
and start writing a
lot of test script,

00:06:56.340 --> 00:06:58.630
and setting up too
many different things.

00:06:58.630 --> 00:07:01.760
And the answer is actually no,
because of two great features

00:07:01.760 --> 00:07:04.540
that I really, really like
about Firebase Test Lab.

00:07:04.540 --> 00:07:08.170
The first one is what
we call the Robo test.

00:07:08.170 --> 00:07:10.210
This is an intelligent
app crawler

00:07:10.210 --> 00:07:12.640
that launches your
application and tries

00:07:12.640 --> 00:07:13.750
to navigate through it.

00:07:13.750 --> 00:07:17.516
So clicking on Menu,
swiping through screens

00:07:17.516 --> 00:07:20.530
and scrolling through the
app, clicking on buttons.

00:07:20.530 --> 00:07:24.370
And the idea here is we want to
expose either crashes so we can

00:07:24.370 --> 00:07:26.360
tell you, here's a
crash in your app,

00:07:26.360 --> 00:07:28.750
and here's the path
leading to the crash.

00:07:28.750 --> 00:07:32.170
Or we want to expose
layout inconsistencies

00:07:32.170 --> 00:07:35.720
between different screenshots
on different devices.

00:07:35.720 --> 00:07:38.980
And this is what the Robo
test allows you to do.

00:07:38.980 --> 00:07:41.470
We've been working really,
really hard in improving

00:07:41.470 --> 00:07:42.990
the coverage of the crawler.

00:07:42.990 --> 00:07:44.700
And if you look
here, actually, this

00:07:44.700 --> 00:07:47.050
is the Google I/O 2016 app.

00:07:47.050 --> 00:07:50.710
This app actually runs
behind the login screen.

00:07:50.710 --> 00:07:53.300
And the Robo still managed
to create an account,

00:07:53.300 --> 00:07:56.260
and login through
the app, and navigate

00:07:56.260 --> 00:07:59.460
the app until it was able
to find a crash in the app.

00:07:59.460 --> 00:08:00.710
This is an actual [INAUDIBLE].

00:08:00.710 --> 00:08:03.910
This is not even some
demo that we put.

00:08:03.910 --> 00:08:06.430
We actually crawled the
Google I/O 2016 app,

00:08:06.430 --> 00:08:09.940
and we were able to find the
crash without the user having

00:08:09.940 --> 00:08:11.470
to write a single line of code.

00:08:11.470 --> 00:08:16.370
All they really needed
is just the APK.

00:08:16.370 --> 00:08:18.760
The second feature I'm
really, really excited

00:08:18.760 --> 00:08:21.190
about is an integration we've
done with Android Studio

00:08:21.190 --> 00:08:25.030
to allow you to create test
scripts by just using your app.

00:08:25.030 --> 00:08:27.085
And I'm going to demo
this in a little bit.

00:08:27.085 --> 00:08:28.600
But this is called
the Espresso Test

00:08:28.600 --> 00:08:30.121
Recorder in Android Studio.

00:08:30.121 --> 00:08:32.530
Has anyone heard of it?

00:08:32.530 --> 00:08:33.170
No, OK.

00:08:33.170 --> 00:08:34.760
You're going to
see it right now.

00:08:34.760 --> 00:08:37.590
And there's going to be no
excuse to not create some test

00:08:37.590 --> 00:08:39.130
cases from now on.

00:08:39.130 --> 00:08:42.480
So the Espresso Test Recorder
captures all the interactions

00:08:42.480 --> 00:08:44.710
you are doing with
your screen and allow

00:08:44.710 --> 00:08:46.940
you to expose all
these interactions

00:08:46.940 --> 00:08:49.980
into a fully reusable
instrumentation test

00:08:49.980 --> 00:08:52.600
that you can then
run every time you

00:08:52.600 --> 00:08:54.580
change your code in
your app and make sure

00:08:54.580 --> 00:08:55.980
that your app is functional.

00:08:58.960 --> 00:09:04.830
So to recap, Firebase Test Lab
gives you access to devices,

00:09:04.830 --> 00:09:06.830
gives you access
to infrastructure,

00:09:06.830 --> 00:09:10.170
integrates really, really well
with your existing workflow,

00:09:10.170 --> 00:09:13.042
and it is really, really
easy to get started.

00:09:13.042 --> 00:09:14.250
You don't need a credit card.

00:09:14.250 --> 00:09:15.990
You don't even need test cases.

00:09:15.990 --> 00:09:18.000
All you need is your app.

00:09:18.000 --> 00:09:20.690
We've been working very
closely with our partners

00:09:20.690 --> 00:09:23.679
since our launch at
Google I/O. And these

00:09:23.679 --> 00:09:24.720
are some of our partners.

00:09:24.720 --> 00:09:26.880
This is [INAUDIBLE],
it's a shopping company.

00:09:26.880 --> 00:09:29.220
And they really like the
fact that Firebase Test Lab

00:09:29.220 --> 00:09:31.542
integrated with their
existing workflow

00:09:31.542 --> 00:09:33.500
and allowed them to launch
their tests directly

00:09:33.500 --> 00:09:37.460
from within Android Studio.

00:09:37.460 --> 00:09:39.420
So with that in
mind, this is what

00:09:39.420 --> 00:09:41.080
I have about being
proactive, which

00:09:41.080 --> 00:09:44.470
means we try to prevent
as many bugs as possible

00:09:44.470 --> 00:09:46.780
before releasing the
app to production.

00:09:46.780 --> 00:09:49.400
Now, the next part is
well, after I actually

00:09:49.400 --> 00:09:51.290
release my app to
production, I want

00:09:51.290 --> 00:09:52.955
to make sure that
if there's anything

00:09:52.955 --> 00:09:54.330
I've missed-- if
there's anything

00:09:54.330 --> 00:09:57.160
that my QA team has missed,
I want to go back and fix it

00:09:57.160 --> 00:09:58.010
right away.

00:09:58.010 --> 00:10:01.150
But more importantly, I want
to know about it right away.

00:10:01.150 --> 00:10:05.230
And this is where Firebase
Crash Reporting comes into play.

00:10:05.230 --> 00:10:08.500
Firebase Crash Reporting
collects all the crashes

00:10:08.500 --> 00:10:10.630
that happen in
production and gives you

00:10:10.630 --> 00:10:13.540
all the information you need
to investigate these crashes

00:10:13.540 --> 00:10:15.770
and go back and fix your app.

00:10:15.770 --> 00:10:17.245
It is cross-platform,
which means

00:10:17.245 --> 00:10:22.360
it works on Android and iOS
on both Objective-C and Swift.

00:10:22.360 --> 00:10:23.930
Super easy to install.

00:10:23.930 --> 00:10:26.700
All you really need to
get it starting on Android

00:10:26.700 --> 00:10:29.692
is just one line in
your [INAUDIBLE] config.

00:10:29.692 --> 00:10:31.525
And on iOS, you need
to install [INAUDIBLE].

00:10:31.525 --> 00:10:35.160
And that's it--
you're up and running.

00:10:35.160 --> 00:10:37.950
Now, the part that I really like
about Firebase Crash Reporting

00:10:37.950 --> 00:10:41.275
is that as we mentioned
earlier, app quality is really

00:10:41.275 --> 00:10:42.760
important for your business.

00:10:42.760 --> 00:10:44.593
And one of the most
important parts about it

00:10:44.593 --> 00:10:48.270
is that it helps you understand
the impact of that crash

00:10:48.270 --> 00:10:50.500
and how much it impacts
and affects your users.

00:10:50.500 --> 00:10:55.520
So you can triage your crashes
and focus on what matters most

00:10:55.520 --> 00:10:58.810
and what is most
important for your users.

00:10:58.810 --> 00:11:00.320
And another part
where it integrates

00:11:00.320 --> 00:11:03.540
with Firebase Analytics,
which means that

00:11:03.540 --> 00:11:05.940
from within the crash,
you can actually

00:11:05.940 --> 00:11:09.010
create cohorts and measure
the effect of a crash

00:11:09.010 --> 00:11:11.760
on the retention of your
users, and potentially

00:11:11.760 --> 00:11:12.549
on your revenue.

00:11:16.770 --> 00:11:20.102
We've been working closely with
our developers and our users

00:11:20.102 --> 00:11:21.310
for Firebase Crash Reporting.

00:11:21.310 --> 00:11:23.620
And one of the features that
they really, really, like

00:11:23.620 --> 00:11:26.280
is the Firebase Crash
Reporting console.

00:11:26.280 --> 00:11:28.815
The reason they like it
is that it's actionable.

00:11:28.815 --> 00:11:31.320
It gives you the trends
of crashes over time

00:11:31.320 --> 00:11:33.760
and also clusters
these crashes for you,

00:11:33.760 --> 00:11:36.090
so you can look at
a specific cluster

00:11:36.090 --> 00:11:39.340
and triage it, make sure
it's the most important thing

00:11:39.340 --> 00:11:40.777
to focus on at the moment.

00:11:40.777 --> 00:11:42.235
And then once you
triage-- once you

00:11:42.235 --> 00:11:44.322
start focusing on
a certain cluster,

00:11:44.322 --> 00:11:46.430
it provides you with
all the information

00:11:46.430 --> 00:11:48.760
you need to actually
investigate that crash

00:11:48.760 --> 00:11:52.183
and fix it and go back, get
your app to a more stable state.

00:11:55.360 --> 00:11:57.400
So as I mentioned,
Firebase Crash Reporting

00:11:57.400 --> 00:11:59.490
was announced at
Google I/O this year,

00:11:59.490 --> 00:12:01.000
and it was a beta product.

00:12:01.000 --> 00:12:02.500
We've worked really hard.

00:12:02.500 --> 00:12:04.590
We've collaborated with
our developers community.

00:12:04.590 --> 00:12:07.780
We've listened to a ton of
feedback from our developers.

00:12:07.780 --> 00:12:09.750
And as of last
month, this project

00:12:09.750 --> 00:12:11.690
is no longer a beta product.

00:12:11.690 --> 00:12:13.930
So thanks so much for our
developer community for all

00:12:13.930 --> 00:12:15.340
the feedback they've given us.

00:12:15.340 --> 00:12:16.660
And we're looking
forward to working

00:12:16.660 --> 00:12:18.951
with more and more developers
and hearing more feedback

00:12:18.951 --> 00:12:23.690
in order to make our
products a lot better.

00:12:23.690 --> 00:12:25.880
So while we were
exiting beta, we

00:12:25.880 --> 00:12:28.910
focused on a number of features
that our developers really

00:12:28.910 --> 00:12:29.860
wanted in [INAUDIBLE].

00:12:29.860 --> 00:12:34.410
And they're essential for a
good crash reporting module.

00:12:34.410 --> 00:12:36.710
The first one is
actually alerts.

00:12:36.710 --> 00:12:40.055
So many of you want
to know of a new crash

00:12:40.055 --> 00:12:44.150
or a new cluster of crashes
that is happening right away.

00:12:44.150 --> 00:12:47.690
And with alerts, we actually
send you email notifications.

00:12:47.690 --> 00:12:50.855
You can also do some
customizations to enable it

00:12:50.855 --> 00:12:52.580
on Slack, or
HipChat, or whatever

00:12:52.580 --> 00:12:55.012
tool you're using for alerting.

00:12:55.012 --> 00:12:56.949
So that's a very
important feature.

00:12:56.949 --> 00:12:58.490
And thanks to our
developer community

00:12:58.490 --> 00:13:01.190
for making sure that we
focus on the right things.

00:13:01.190 --> 00:13:04.200
And we've launched this already
with our [INAUDIBLE] beta

00:13:04.200 --> 00:13:05.390
[INAUDIBLE].

00:13:05.390 --> 00:13:08.870
The second issue is we're
giving you the ability

00:13:08.870 --> 00:13:09.990
to close a certain issue.

00:13:09.990 --> 00:13:12.150
So once you're done, once
you've fixed a certain crash,

00:13:12.150 --> 00:13:13.983
you can go back to the
console and close it.

00:13:13.983 --> 00:13:16.460
And make sure it doesn't
affect any of your trends,

00:13:16.460 --> 00:13:18.930
as we mentioned
earlier, in the console.

00:13:18.930 --> 00:13:22.310
And then finally, we have been
providing analytics integration

00:13:22.310 --> 00:13:23.360
out the box.

00:13:23.360 --> 00:13:24.830
So without having
to do anything,

00:13:24.830 --> 00:13:29.005
we give you all the analytics
logs leading up to a crash.

00:13:29.005 --> 00:13:32.480
So you can look at these
events and triage them.

00:13:32.480 --> 00:13:35.705
And also, they can help you
investigate your crashes

00:13:35.705 --> 00:13:38.930
and fix your app.

00:13:38.930 --> 00:13:42.750
With that in mind, that's why I
have also about being reactive.

00:13:42.750 --> 00:13:45.090
So Firebase Crash
Reporting helps you

00:13:45.090 --> 00:13:48.810
once a new issue happens,
helps you go back

00:13:48.810 --> 00:13:51.594
and understand what's
going on, fix that issue.

00:13:51.594 --> 00:13:53.260
Gives you all the
necessary information,

00:13:53.260 --> 00:13:55.260
alerts you about the
issue, and then you

00:13:55.260 --> 00:13:57.330
can relatively fix your app.

00:13:57.330 --> 00:14:00.310
So we talked about being
proactive with Firebase Test

00:14:00.310 --> 00:14:00.840
Lab.

00:14:00.840 --> 00:14:03.735
And we talked about it being
reactive with Firebase crash

00:14:03.735 --> 00:14:04.350
reporting.

00:14:04.350 --> 00:14:06.135
Now let's actually
switch to a demo.

00:14:06.135 --> 00:14:08.230
But before I talk
about the demo,

00:14:08.230 --> 00:14:10.285
let me try to describe
the scenario that

00:14:10.285 --> 00:14:11.756
is leading up to the demo.

00:14:11.756 --> 00:14:15.270
And it's a scenario that happens
to us developers all the time.

00:14:15.270 --> 00:14:18.170
We wake up one morning with
a new alert or a notification

00:14:18.170 --> 00:14:22.950
about a crash that is
occurring in one of our apps.

00:14:22.950 --> 00:14:25.020
The first thing we want
to do is understand

00:14:25.020 --> 00:14:26.190
the effect of that crash.

00:14:26.190 --> 00:14:28.650
Is that something we need to
focus on and drop everything

00:14:28.650 --> 00:14:29.949
and work on right away?

00:14:29.949 --> 00:14:31.365
Or is that something
that can wait

00:14:31.365 --> 00:14:34.240
for the next release of our
app, and we can just wait a week

00:14:34.240 --> 00:14:37.440
or so until we push
the fix for it?

00:14:37.440 --> 00:14:39.320
Once we understand the
impact of the crash

00:14:39.320 --> 00:14:40.861
and the effect of
the crash, and then

00:14:40.861 --> 00:14:42.840
decide that it's something
we want to work on,

00:14:42.840 --> 00:14:45.540
we start by trying to
reproduce that crash.

00:14:45.540 --> 00:14:48.600
We try to find or emulate the
exact environment leading up

00:14:48.600 --> 00:14:51.060
to that crash based on
all the data that we

00:14:51.060 --> 00:14:53.240
can gather about that crash.

00:14:53.240 --> 00:14:56.310
And once we do that and
reproduce that crash,

00:14:56.310 --> 00:14:59.920
we're going to go to our code
and start debugging that crash.

00:14:59.920 --> 00:15:01.950
So we want to look at
the line in the code,

00:15:01.950 --> 00:15:04.090
we want to set up
our environment

00:15:04.090 --> 00:15:06.700
and start developing and
then debug that crash

00:15:06.700 --> 00:15:08.500
until we can actually fix it.

00:15:08.500 --> 00:15:11.220
Once we have a fix, we
want to release that app

00:15:11.220 --> 00:15:12.549
with the fix to our users.

00:15:12.549 --> 00:15:14.340
But more importantly,
what we're goon to do

00:15:14.340 --> 00:15:17.850
is that we want to avoid that
crash ever happening again.

00:15:17.850 --> 00:15:19.567
And this is something
that we're going

00:15:19.567 --> 00:15:21.357
to talk about today as well.

00:15:21.357 --> 00:15:23.672
With that, I'll transition
to the demo now.

00:15:36.480 --> 00:15:40.650
So this is the demo,
and the first thing

00:15:40.650 --> 00:15:44.550
I have here is a screenshot of
one of the emails that Firebase

00:15:44.550 --> 00:15:48.090
Crash Reporting provides you,
which alerts you of a new crash

00:15:48.090 --> 00:15:50.170
cluster happening in your app.

00:15:50.170 --> 00:15:52.120
So this is an
example of an email,

00:15:52.120 --> 00:15:54.922
and then it's telling you hey,
there's a new fatal cluster

00:15:54.922 --> 00:15:57.029
showing up in one of
your apps, and you

00:15:57.029 --> 00:15:58.320
should go ahead investigate it.

00:15:58.320 --> 00:16:00.420
So you want to click
here on View Details.

00:16:00.420 --> 00:16:03.060
Once you do that, it takes
you to the Firebase console.

00:16:03.060 --> 00:16:06.630
And this is the page that is
describing this exact crash.

00:16:06.630 --> 00:16:09.030
As you can see here,
there's information

00:16:09.030 --> 00:16:10.560
about the versional path.

00:16:10.560 --> 00:16:12.165
So it's on version 55.

00:16:12.165 --> 00:16:14.760
It happened 10 times
on 10 different users.

00:16:14.760 --> 00:16:19.480
And it's happening on API levels
22, 23, 24 and other, others

00:16:19.480 --> 00:16:22.012
being 25.

00:16:22.012 --> 00:16:23.660
It also shows you
the devices where

00:16:23.660 --> 00:16:26.000
this crash has happened on.

00:16:26.000 --> 00:16:29.570
And then it shows you some
stat traces and snapshots

00:16:29.570 --> 00:16:30.350
about this crash.

00:16:30.350 --> 00:16:32.367
So we try to gather
as much information,

00:16:32.367 --> 00:16:33.950
whether it's stat
traces, whether it's

00:16:33.950 --> 00:16:36.555
performance data of the
device, whether it's

00:16:36.555 --> 00:16:39.650
some device information,
error data, user data.

00:16:39.650 --> 00:16:41.480
And then if you
scroll even further,

00:16:41.480 --> 00:16:43.520
you can look here at
the analytic event.

00:16:43.520 --> 00:16:46.380
These are analytics events
provided to you out of the box

00:16:46.380 --> 00:16:49.340
that is every event
leading up to a crash.

00:16:49.340 --> 00:16:51.500
So you can see here,
select content.

00:16:51.500 --> 00:16:52.520
Level start.

00:16:52.520 --> 00:16:53.040
Level up.

00:16:53.040 --> 00:16:53.810
Level complete.

00:16:53.810 --> 00:16:54.940
[INAUDIBLE] core.

00:16:54.940 --> 00:16:59.110
And everything about that
crash until a cool new feature

00:16:59.110 --> 00:17:04.440
was clicked, and then the
fatal crash started showing up.

00:17:04.440 --> 00:17:08.260
So we can also look at
different snapshots.

00:17:08.260 --> 00:17:12.097
And it seems that stat trace
is pretty consistent here.

00:17:12.097 --> 00:17:13.680
The message on the
stat trace tells us

00:17:13.680 --> 00:17:15.150
that this is a
crash that happens

00:17:15.150 --> 00:17:17.220
on API levels more than 21.

00:17:17.220 --> 00:17:19.589
So it seems that
there's a pattern here

00:17:19.589 --> 00:17:24.682
that only occurs on API levels
more than 21, 22, or above.

00:17:24.682 --> 00:17:27.300
So I don't have a
device, actually,

00:17:27.300 --> 00:17:29.850
that is more than API level 21.

00:17:29.850 --> 00:17:31.936
So what I'm going
to do is I'm going

00:17:31.936 --> 00:17:34.990
to try to run a test on
Firebase Test Lab on one

00:17:34.990 --> 00:17:38.540
of the devices that is
more than 21 and then see,

00:17:38.540 --> 00:17:40.550
how can I get out of that test?

00:17:40.550 --> 00:17:42.940
So I'm going to go to the
Firebase console here.

00:17:42.940 --> 00:17:47.273
And what I'm going to do is
this is the Firebase console.

00:17:47.273 --> 00:17:49.640
I'm going to click on Test Lab.

00:17:49.640 --> 00:17:51.280
And then hit Run a Test.

00:17:51.280 --> 00:17:53.140
And I'm going to try
to write a Robo test.

00:17:53.140 --> 00:17:54.990
And again, the Robo
test is the app crawler

00:17:54.990 --> 00:17:56.470
that we talked about earlier.

00:17:56.470 --> 00:17:59.570
And to run a Robo test, you
need nothing but your app.

00:17:59.570 --> 00:18:02.450
So I'm going to
try that right now.

00:18:02.450 --> 00:18:04.570
As you can see,
nothing but my APK.

00:18:04.570 --> 00:18:06.170
I'm just going to
upload my APK here.

00:18:14.260 --> 00:18:16.820
Which, wow-- it
worked very quickly.

00:18:16.820 --> 00:18:18.999
And then you click continue.

00:18:18.999 --> 00:18:19.790
And then that's it.

00:18:19.790 --> 00:18:22.304
You can select now which
devices at which API levels.

00:18:22.304 --> 00:18:24.470
So what I'm going to do is
I don't care about these.

00:18:24.470 --> 00:18:27.650
I only care about 22 and above.

00:18:27.650 --> 00:18:29.070
And try 22 and 23.

00:18:29.070 --> 00:18:31.700
Maybe at 24 and 25.

00:18:31.700 --> 00:18:33.590
On landscape and portrait.

00:18:33.590 --> 00:18:35.161
And then I'm going
to start a test.

00:18:35.161 --> 00:18:37.160
Notice here that we're
running these eight tests

00:18:37.160 --> 00:18:39.440
with just one single click.

00:18:39.440 --> 00:18:42.830
Two orientations, four
different device labs,

00:18:42.830 --> 00:18:44.622
is basically the eight tests.

00:18:44.622 --> 00:18:48.354
And then the test
is about to start.

00:18:48.354 --> 00:18:50.270
I'm not going to wait
for that test to finish.

00:18:50.270 --> 00:18:52.540
It usually takes
10 minutes or so,

00:18:52.540 --> 00:18:54.790
because the crawler tries
to crawl as much as possible

00:18:54.790 --> 00:18:55.230
in the app.

00:18:55.230 --> 00:18:57.604
So what I'm going to do is
I'm going to go straight ahead

00:18:57.604 --> 00:18:59.160
to one of the test results.

00:18:59.160 --> 00:19:02.000
So this is one of the
results on a Nexus

00:19:02.000 --> 00:19:05.600
5 running on API level 22.

00:19:05.600 --> 00:19:08.370
And again, I was able to
see that exact same crash

00:19:08.370 --> 00:19:10.700
that I saw in my crash
reporting console.

00:19:10.700 --> 00:19:13.760
But then what I can do
is look at the logs.

00:19:13.760 --> 00:19:16.730
So I can see exactly the
logs on the device leading up

00:19:16.730 --> 00:19:18.190
to the crash.

00:19:18.190 --> 00:19:19.315
I can see some screenshots.

00:19:19.315 --> 00:19:21.350
And this is super
cool, because you

00:19:21.350 --> 00:19:24.830
notice that these screenshots
were obtained for me without me

00:19:24.830 --> 00:19:26.100
having to do anything.

00:19:26.100 --> 00:19:29.180
All I really added is just
my app, and that's it.

00:19:29.180 --> 00:19:33.690
And I got all these screenshots
for free from within the app.

00:19:33.690 --> 00:19:35.230
And then if you
notice here, this

00:19:35.230 --> 00:19:38.600
is actually the part where the
cool new feature was clicked

00:19:38.600 --> 00:19:40.790
and that the crashes happened.

00:19:40.790 --> 00:19:43.690
And then what we can also
look at is the Activity Map.

00:19:43.690 --> 00:19:47.210
So the Activity Map here is
a description of every step

00:19:47.210 --> 00:19:48.650
that the crawler has taken.

00:19:48.650 --> 00:19:51.740
And you can see here this is
the main screen of the app.

00:19:51.740 --> 00:19:54.410
And then I clicked
on Progressive.

00:19:54.410 --> 00:19:56.590
So I started Progressive levels.

00:19:56.590 --> 00:19:59.250
The Robo actually, in
effect, finished a level,

00:19:59.250 --> 00:20:00.930
which is pretty impressive.

00:20:00.930 --> 00:20:02.160
And then it crashed here.

00:20:02.160 --> 00:20:05.630
So these are the it went--
it looked like it went here

00:20:05.630 --> 00:20:08.300
to the About
[INAUDIBLE], and then it

00:20:08.300 --> 00:20:11.270
clicked on the Cool new
Feature and then crashed.

00:20:11.270 --> 00:20:16.040
So this is the path leading
all the way up to the crash.

00:20:16.040 --> 00:20:18.130
Now that I was able
to reproduce the crash

00:20:18.130 --> 00:20:22.520
and understand the exact steps
that a user or the crawler

00:20:22.520 --> 00:20:27.615
has taken to find that crash,
I want to go to my code

00:20:27.615 --> 00:20:28.992
and try to fix it.

00:20:28.992 --> 00:20:30.700
And what I'm going to
do here is I'm just

00:20:30.700 --> 00:20:32.200
going to go to
that About Activity

00:20:32.200 --> 00:20:34.590
now that I know that
it's the right place.

00:20:34.590 --> 00:20:38.080
And I will see here that
someone added this line.

00:20:38.080 --> 00:20:42.540
If the version is more than
Lollipop, throw an exception.

00:20:42.540 --> 00:20:45.260
So it seems that maybe
somebody put an Easter egg

00:20:45.260 --> 00:20:46.810
or something in demo app.

00:20:46.810 --> 00:20:49.126
And this is where the
exception is happening.

00:20:49.126 --> 00:20:53.932
So what I'm going to do here
is just comment out this line.

00:20:53.932 --> 00:20:59.550
And this should prevent the
crash from happening again.

00:20:59.550 --> 00:21:04.020
And then what I want to do,
more importantly, beside fixing

00:21:04.020 --> 00:21:06.540
the issue is making
sure that from now on,

00:21:06.540 --> 00:21:09.210
this issue actually never
happens in the future.

00:21:09.210 --> 00:21:12.250
And this is where we want
to create a test case that

00:21:12.250 --> 00:21:14.058
covers this [INAUDIBLE].

00:21:14.058 --> 00:21:15.945
Even though the Robo
was actually successful

00:21:15.945 --> 00:21:18.720
in finding that crash,
sometimes in our app,

00:21:18.720 --> 00:21:20.580
there is a certain
flow that you want

00:21:20.580 --> 00:21:22.817
to make sure that it always
works no matter what.

00:21:22.817 --> 00:21:25.150
We always need to cover it
with an instrumentation test.

00:21:25.150 --> 00:21:27.270
For example, if you're
testing a checkout flow,

00:21:27.270 --> 00:21:29.710
this is the most important
flow in your business.

00:21:29.710 --> 00:21:32.620
So you want to make sure it
works well no matter what.

00:21:32.620 --> 00:21:35.355
So this is why you always want
to cover it with a test case

00:21:35.355 --> 00:21:38.890
to make sure that from now on,
every code change that happens

00:21:38.890 --> 00:21:42.910
in my app runs this test
and this test basically

00:21:42.910 --> 00:21:46.160
covers that change,
and it doesn't break.

00:21:46.160 --> 00:21:49.340
So what I'm going to do now is
I want to create that test case.

00:21:49.340 --> 00:21:52.020
And to do that, I need to
learn Espresso and spend

00:21:52.020 --> 00:21:53.273
five hours studying--

00:21:53.273 --> 00:21:54.080
I'm kidding.

00:21:54.080 --> 00:21:56.490
All I'm going to do
here is just go to Run

00:21:56.490 --> 00:21:59.732
and Record the Espresso test.

00:21:59.732 --> 00:22:03.380
So what we can do here is
just record the Espresso test.

00:22:03.380 --> 00:22:06.230
And I have the emulator up
and running right now here.

00:22:09.360 --> 00:22:11.640
So I'm just going
to record the test.

00:22:11.640 --> 00:22:13.460
And the way I'm going
to record the test

00:22:13.460 --> 00:22:16.990
is just basically by using
my app, nothing else.

00:22:16.990 --> 00:22:19.890
So right now, the
app is being built.

00:22:19.890 --> 00:22:25.680
It's going to take
20 seconds or so.

00:22:25.680 --> 00:22:28.700
And then it's going to start
on that emulator screen.

00:22:28.700 --> 00:22:31.850
And then everything that I do
on that screen, every click

00:22:31.850 --> 00:22:34.050
that I do is going to be record.

00:22:34.050 --> 00:22:37.120
And at the end of it, I'm
going to see a fully reusable

00:22:37.120 --> 00:22:40.584
Espresso test script that I can
run on every code change moving

00:22:40.584 --> 00:22:43.180
forward.

00:22:43.180 --> 00:22:44.270
So this is the app.

00:22:44.270 --> 00:22:47.149
And it seems that the crawler
has clicked on Progressive

00:22:47.149 --> 00:22:49.690
or Quick Play, so I'm just going
to click on Quick Play here.

00:22:55.670 --> 00:22:57.890
So if you notice here when
I click on Quick Play,

00:22:57.890 --> 00:22:59.059
it actually was captured.

00:22:59.059 --> 00:23:00.350
So the event was captured here.

00:23:00.350 --> 00:23:02.876
And it's showing up in
the recorder screen.

00:23:02.876 --> 00:23:04.250
And then I'm going
to keep going.

00:23:04.250 --> 00:23:08.320
So maybe I can click
here on the purple thing.

00:23:11.170 --> 00:23:11.950
Or maybe not.

00:23:11.950 --> 00:23:14.220
[INAUDIBLE] go here
on the Menu page.

00:23:14.220 --> 00:23:17.690
And it tells you here that
we select more options.

00:23:17.690 --> 00:23:19.700
And then after we
select more options,

00:23:19.700 --> 00:23:21.740
we can go to the
Info, which is where

00:23:21.740 --> 00:23:25.250
the About Activity triggers.

00:23:25.250 --> 00:23:27.860
And then I'm going to
click on Cool New Feature.

00:23:30.680 --> 00:23:32.015
So that's it.

00:23:32.015 --> 00:23:34.550
That's all the steps we
need leading up to a crash

00:23:34.550 --> 00:23:36.370
that I want to cover
with a test case.

00:23:36.370 --> 00:23:39.470
And one thing we can do also
with that is add an assertion.

00:23:39.470 --> 00:23:40.509
And this is really cool.

00:23:40.509 --> 00:23:42.050
When we're testing
something, we want

00:23:42.050 --> 00:23:45.210
to make sure that this thing is
functionally correct on every--

00:23:45.210 --> 00:23:46.937
[INAUDIBLE] so that
moving forward,

00:23:46.937 --> 00:23:49.145
I just check and make sure
that the screen's correct.

00:23:49.145 --> 00:23:52.570
So I'm going to try adding
an assertion right now.

00:23:52.570 --> 00:23:55.860
Adding an assertion will grab
a snapshot from the screen.

00:23:55.860 --> 00:23:57.410
And then it tells
you your stats.

00:23:57.410 --> 00:24:00.250
And one thing I can say, for
example, is this your stats?

00:24:00.250 --> 00:24:03.100
I just want to make sure
that the text is actually

00:24:03.100 --> 00:24:03.790
your stats.

00:24:03.790 --> 00:24:05.640
So very simple assertion here.

00:24:05.640 --> 00:24:06.905
I'm going to save it.

00:24:06.905 --> 00:24:08.810
And with that, I can
complete the recording.

00:24:08.810 --> 00:24:10.820
It even suggests a name for you.

00:24:10.820 --> 00:24:13.997
Like here's how you
want to name that test.

00:24:13.997 --> 00:24:15.080
And you can save the test.

00:24:19.340 --> 00:24:20.990
So look what happened here.

00:24:20.990 --> 00:24:23.800
This is actually super cool.

00:24:23.800 --> 00:24:26.710
This is a functional
Android Espresso test

00:24:26.710 --> 00:24:29.960
case that was created for us
without us developers having

00:24:29.960 --> 00:24:32.790
to learn anything or write
a single line of code.

00:24:32.790 --> 00:24:35.530
And it's a fully functional
Espresso test script

00:24:35.530 --> 00:24:36.884
that we can then run.

00:24:36.884 --> 00:24:39.870
We can actually try running
it right now, if you want.

00:24:39.870 --> 00:24:41.462
Let's do that.

00:24:41.462 --> 00:24:44.490
So just going to run it
on the emulator first.

00:24:54.885 --> 00:24:59.445
So on the emulator, you
can see it playing here.

00:24:59.445 --> 00:25:01.345
Magic.

00:25:01.345 --> 00:25:02.775
And it passed.

00:25:02.775 --> 00:25:03.725
[APPLAUSE]

00:25:03.725 --> 00:25:05.150
Oh, thank you.

00:25:07.997 --> 00:25:09.830
Now, the second part
is actually-- let's try

00:25:09.830 --> 00:25:11.960
to run it on Firebase Test Lab.

00:25:11.960 --> 00:25:16.015
So let's take this one that
we recorded on an API level 21

00:25:16.015 --> 00:25:20.065
emulator and run the same
test on hundreds of devices.

00:25:20.065 --> 00:25:23.300
So I can go here and on
the same screen that I

00:25:23.300 --> 00:25:25.340
used to run the test
on the emulator,

00:25:25.340 --> 00:25:27.950
I can go to cloud testing.

00:25:27.950 --> 00:25:31.160
And then here, what I can see is
there is a configuration that I

00:25:31.160 --> 00:25:35.180
created called chinaddd demo,
which has three devices,

00:25:35.180 --> 00:25:39.590
two platforms, one locale,
and two orientation's.

00:25:39.590 --> 00:25:44.430
By the way, I'm going to run
this test right now first.

00:25:44.430 --> 00:25:48.962
And then yeah, let's see.

00:25:58.640 --> 00:26:01.218
Yeah, so this is going
to run 12 test for me.

00:26:04.710 --> 00:26:07.515
I ran this test once
in the past as well,

00:26:07.515 --> 00:26:09.265
so I'm just going to
show you the results.

00:26:09.265 --> 00:26:11.600
And when I ran this test, I
actually didn't fix the bug.

00:26:11.600 --> 00:26:12.933
I'll just fix the bug right now.

00:26:12.933 --> 00:26:15.000
But when I ran the
test, it was supposed

00:26:15.000 --> 00:26:18.220
to actually work
correctly on API levels 21

00:26:18.220 --> 00:26:20.680
but fail on API levels 22.

00:26:20.680 --> 00:26:22.910
And this is exactly
what happened here.

00:26:22.910 --> 00:26:25.550
So if you notice here
the Nexus 5 API level 19,

00:26:25.550 --> 00:26:27.270
but that's actually
past successful.

00:26:27.270 --> 00:26:30.640
Because when I click on the Cool
New Feature, nothing happens.

00:26:30.640 --> 00:26:35.360
But then on API levels 22 and
more, the test actually fails.

00:26:35.360 --> 00:26:37.770
So this is a reminder for us
to make sure that we always

00:26:37.770 --> 00:26:40.760
test our app on
devices that cover

00:26:40.760 --> 00:26:44.086
many of our realistic scenarios
and many of our users' devices

00:26:44.086 --> 00:26:45.440
that we have.

00:26:45.440 --> 00:26:48.320
We can always go to the Play
Store or our analytics data

00:26:48.320 --> 00:26:51.290
to understand which devices
are our users using,

00:26:51.290 --> 00:26:55.870
which API levels are
more popular, and so on.

00:26:55.870 --> 00:26:58.040
So that's it with the demo.

00:26:58.040 --> 00:27:00.590
Now it's time to just
go and publish your app

00:27:00.590 --> 00:27:02.890
to Google Play, and that's it.

00:27:02.890 --> 00:27:05.375
So can we switch
back to the slide?

00:27:09.360 --> 00:27:11.620
So let's recap what we just did.

00:27:11.620 --> 00:27:14.670
We woke up one morning with
an alert about a new crash

00:27:14.670 --> 00:27:18.010
cluster that was happening,
and we received that alert

00:27:18.010 --> 00:27:21.860
from Firebase Crash
Reporting that told us

00:27:21.860 --> 00:27:24.520
about this new cluster
of crash that is starting

00:27:24.520 --> 00:27:26.840
to occur most recently.

00:27:26.840 --> 00:27:29.470
We understood the
impact of that crash

00:27:29.470 --> 00:27:31.970
by looking at the Firebase
Crash Reporting console.

00:27:31.970 --> 00:27:33.755
It told us how many
users were affected,

00:27:33.755 --> 00:27:37.295
it gave us some examples
about their devices,

00:27:37.295 --> 00:27:39.390
about the environment
leading up to the crash,

00:27:39.390 --> 00:27:42.660
based on data it
got from analytics.

00:27:42.660 --> 00:27:46.480
And then we were able
to reproduce that crash

00:27:46.480 --> 00:27:49.210
by using Fireplace Test
Lab on one of the devices

00:27:49.210 --> 00:27:51.422
that we didn't
have in our closet.

00:27:51.422 --> 00:27:54.760
And we were able successfully
reproduce that crash.

00:27:54.760 --> 00:27:57.170
Once we reproduced that crash,
we were able to debug it.

00:27:57.170 --> 00:28:00.850
We looked at our code and
starting fixing that crack.

00:28:00.850 --> 00:28:03.380
And then finally, we
had a fix in place.

00:28:03.380 --> 00:28:06.290
But more importantly, when
we were releasing that fix

00:28:06.290 --> 00:28:09.160
to our users, we
created a test case

00:28:09.160 --> 00:28:11.890
to make sure that
this issue never

00:28:11.890 --> 00:28:15.780
appears again for our users, and
we covered it with a test case.

00:28:19.200 --> 00:28:22.685
So this is the message I'm
going to leave you with.

00:28:22.685 --> 00:28:25.530
App quality is one of the
most important factors

00:28:25.530 --> 00:28:27.490
for the success
of your business.

00:28:27.490 --> 00:28:29.290
So make sure when
you're solving a bug

00:28:29.290 --> 00:28:32.342
or you're looking at a crash,
that this is not just a crash

00:28:32.342 --> 00:28:34.800
happening to some users-- this
is revenues that I'm losing.

00:28:34.800 --> 00:28:37.860
And there are users that might
never come back to my app.

00:28:37.860 --> 00:28:41.010
So app quality is one of the
most important contributors

00:28:41.010 --> 00:28:43.890
to the success of your business.

00:28:43.890 --> 00:28:46.140
And then the second message
I want to leave you with

00:28:46.140 --> 00:28:49.440
is that Firebase
App Quality makes

00:28:49.440 --> 00:28:52.180
caring about and closing
these app quality

00:28:52.180 --> 00:28:53.920
issues really, really easy.

00:28:53.920 --> 00:28:57.180
All you need to do is
build a suite of tests.

00:28:57.180 --> 00:28:58.890
And we saw that
you don't even need

00:28:58.890 --> 00:29:03.390
to have any coding skills to
write that suite of tests.

00:29:03.390 --> 00:29:06.770
You can use the Robo, or you can
record your own instrumentation

00:29:06.770 --> 00:29:10.380
test with the Espresso
Test Recorder.

00:29:10.380 --> 00:29:11.910
And test continuously.

00:29:11.910 --> 00:29:15.090
Make sure that you trigger
these test cases on every change

00:29:15.090 --> 00:29:16.320
you make in your app.

00:29:16.320 --> 00:29:19.410
Every new code change has
to trigger these test cases,

00:29:19.410 --> 00:29:22.290
and this will allow you to move
a lot faster and iterate faster

00:29:22.290 --> 00:29:23.080
on your app.

00:29:23.080 --> 00:29:25.530
And also will reduce the
amount of bugs and crashes

00:29:25.530 --> 00:29:26.640
in your app.

00:29:26.640 --> 00:29:29.700
And you want to run these tests
on so many different devices,

00:29:29.700 --> 00:29:32.550
like the ones that
your users actually do.

00:29:32.550 --> 00:29:35.670
And then finally, just
monitor production for crashes

00:29:35.670 --> 00:29:38.760
and reactively engage
with these crashes

00:29:38.760 --> 00:29:41.448
to make sure that you close them
in a timely manner and very,

00:29:41.448 --> 00:29:43.100
very quickly.

00:29:43.100 --> 00:29:44.246
And that's it.

00:29:44.246 --> 00:29:45.200
Thank you so much.

00:29:45.200 --> 00:29:47.810
Again, this is my gchat
account, so feel free to add me.

00:29:47.810 --> 00:29:51.460
And yeah, if you have any
questions, let me know.

